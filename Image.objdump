
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000013fd 	strdeq	r1, [r0], -sp
		// Called to issue a wait request
		if (st == WNONE)
       8:	000013f7 	strdeq	r1, [r0], -r7
       c:	000013f9 	strdeq	r1, [r0], -r9
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000013fb 	strdeq	r1, [r0], -fp
      14:	000013fb 	strdeq	r1, [r0], -fp
		when (&__input_pins, st);
      18:	000013fb 	strdeq	r1, [r0], -fp
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000013fb 	strdeq	r1, [r0], -fp
      30:	000013fb 	strdeq	r1, [r0], -fp
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000013fb 	strdeq	r1, [r0], -fp
      3c:	000013fb 	strdeq	r1, [r0], -fp
      40:	00000839 	andeq	r0, r0, r9, lsr r8
      44:	000013fb 	strdeq	r1, [r0], -fp
      48:	000013fb 	strdeq	r1, [r0], -fp
}
      4c:	000013fb 	strdeq	r1, [r0], -fp
      50:	000003f9 	strdeq	r0, [r0], -r9
      54:	000006f9 	strdeq	r0, [r0], -r9
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000013fb 	strdeq	r1, [r0], -fp
	    pbutton++) {
      5c:	000013fb 	strdeq	r1, [r0], -fp
      60:	000013fb 	strdeq	r1, [r0], -fp
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000013fb 	strdeq	r1, [r0], -fp
      68:	000013fb 	strdeq	r1, [r0], -fp
      6c:	000013fb 	strdeq	r1, [r0], -fp
      70:	000013fb 	strdeq	r1, [r0], -fp
      74:	000013fb 	strdeq	r1, [r0], -fp
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000013fb 	strdeq	r1, [r0], -fp
      7c:	000013fb 	strdeq	r1, [r0], -fp
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000013fb 	strdeq	r1, [r0], -fp
      84:	000013fb 	strdeq	r1, [r0], -fp
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000013fb 	strdeq	r1, [r0], -fp
      8c:	000013fb 	strdeq	r1, [r0], -fp
      90:	000013fb 	strdeq	r1, [r0], -fp
      94:	000013fb 	strdeq	r1, [r0], -fp
      98:	000013fb 	strdeq	r1, [r0], -fp
		goto Done;

	if (baction == NULL)
      9c:	000013fb 	strdeq	r1, [r0], -fp
      a0:	000013fb 	strdeq	r1, [r0], -fp
		goto Term;

	(*baction) (pbutton);
      a4:	000013fb 	strdeq	r1, [r0], -fp

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000013fb 	strdeq	r1, [r0], -fp
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000013fb 	strdeq	r1, [r0], -fp
      b0:	000013fb 	strdeq	r1, [r0], -fp
endthread
      b4:	000013fb 	strdeq	r1, [r0], -fp
      b8:	000013fb 	strdeq	r1, [r0], -fp
      bc:	000013fb 	strdeq	r1, [r0], -fp
      c0:	000013fb 	strdeq	r1, [r0], -fp
      c4:	000013fb 	strdeq	r1, [r0], -fp

000000c8 <initCycles>:
      c8:	2352      	movs	r3, #82	; 0x52
      ca:	4a0d      	ldr	r2, [pc, #52]	; (100 <_Min_Stack_Size>)
Boolean displayCycle = NO;

fsm blinker {
    state Check_PERIOD:
        if(On)
            leds(cycles[cyclesIndex].led, 1);
      cc:	b530      	push	{r4, r5, lr}
      ce:	7113      	strb	r3, [r2, #4]
      d0:	2301      	movs	r3, #1
      d2:	4c0c      	ldr	r4, [pc, #48]	; (104 <_Min_Stack_Size+0x4>)
      d4:	2500      	movs	r5, #0
            if(displayCycle) {
                ser_outf(Check_PERIOD, "%c ", cycles[cyclesIndex].letter);
            }
        else
            leds(cycles[cyclesIndex].led, 0);
      d6:	6023      	str	r3, [r4, #0]
      d8:	2347      	movs	r3, #71	; 0x47
      da:	7123      	strb	r3, [r4, #4]
      dc:	4b0a      	ldr	r3, [pc, #40]	; (108 <_Min_Stack_Size+0x8>)
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      de:	6015      	str	r5, [r2, #0]
      e0:	80d5      	strh	r5, [r2, #6]
      e2:	8115      	strh	r5, [r2, #8]
      e4:	ca07      	ldmia	r2, {r0, r1, r2}
      e6:	80e5      	strh	r5, [r4, #6]
      e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ec:	8125      	strh	r5, [r4, #8]
      ee:	330c      	adds	r3, #12
      f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
      f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      f8:	4b04      	ldr	r3, [pc, #16]	; (10c <_Min_Stack_Size+0xc>)
      fa:	601d      	str	r5, [r3, #0]
      fc:	bd30      	pop	{r4, r5, pc}
      fe:	bf00      	nop
     100:	20000060 	andcs	r0, r0, r0, rrx
     104:	20000054 	andcs	r0, r0, r4, asr r0
        delay(cycles[cyclesIndex].onTime * MS,OFF_PERIOD);
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        leds(cycles[cyclesIndex].led, 0);
     108:	2000006c 	andcs	r0, r0, ip, rrx
     10c:	20000084 	andcs	r0, r0, r4, lsl #1

00000110 <processSettingsInput>:
     110:	2300      	movs	r3, #0
     112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     114:	2101      	movs	r1, #1
     116:	461d      	mov	r5, r3
        cyclesIndex = (cyclesIndex + 1) % 2;
        
        delay(offTime * MS,Check_PERIOD);
        when(&On, Check_PERIOD);
        release;
}
     118:	260a      	movs	r6, #10
     11a:	1e44      	subs	r4, r0, #1
     11c:	3013      	adds	r0, #19
     11e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
     122:	2a20      	cmp	r2, #32
     124:	d118      	bne.n	158 <processSettingsInput+0x48>
     126:	aa02      	add	r2, sp, #8
     128:	eb02 0245 	add.w	r2, r2, r5, lsl #1
     12c:	f822 3c08 	strh.w	r3, [r2, #-8]
     130:	2101      	movs	r1, #1
     132:	2300      	movs	r3, #0
     134:	3501      	adds	r5, #1
     136:	4284      	cmp	r4, r0
     138:	d1f1      	bne.n	11e <processSettingsInput+0xe>
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <processSettingsInput+0x5c>)
     13c:	f8bd 2000 	ldrh.w	r2, [sp]
            number += settingsInput[i] - 48;
            numberMultiplier = numberMultiplier * 10;
        }
    }

    cycles[0].onTime = numbers[0];
     140:	80da      	strh	r2, [r3, #6]
    cycles[0].offTime = numbers[1];
     142:	f8bd 2002 	ldrh.w	r2, [sp, #2]
     146:	811a      	strh	r2, [r3, #8]

    cycles[1].onTime = numbers[2];
     148:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     14c:	825a      	strh	r2, [r3, #18]
    cycles[1].offTime = numbers[3];
     14e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     152:	829a      	strh	r2, [r3, #20]
}
     154:	b003      	add	sp, #12
     156:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	3a30      	subs	r2, #48	; 0x30
     15a:	b2d7      	uxtb	r7, r2
     15c:	2f09      	cmp	r7, #9
            number += settingsInput[i] - 48;
     15e:	bf9e      	ittt	ls
     160:	fb01 2303 	mlals	r3, r1, r3, r2
            numberMultiplier = numberMultiplier * 10;
     164:	4371      	mulls	r1, r6
            number += settingsInput[i] - 48;
     166:	b29b      	uxthls	r3, r3
            numberMultiplier = numberMultiplier * 10;
     168:	e7e5      	b.n	136 <processSettingsInput+0x26>
     16a:	bf00      	nop
     16c:	2000006c 	andcs	r0, r0, ip, rrx

00000170 <root>:

fsm root {
     170:	b500      	push	{lr}
     172:	b091      	sub	sp, #68	; 0x44
     174:	2809      	cmp	r0, #9
     176:	d878      	bhi.n	26a <root+0xfa>
     178:	e8df f000 	tbb	[pc, r0]
     17c:	15100b05 	ldrne	r0, [r0, #-2821]	; 0xfffff4fb
     180:	43352a26 	teqmi	r5, #155648	; 0x26000
     184:	f7ff524a 			; <UNDEFINED> instruction: 0xf7ff524a

    char username[NAME_LENGTH];
        
    state Initial:
        initCycles();
     188:	ff9f 2000 	vaddl.u16	q1, d15, d0

        ser_outf(Initial, "Enter your name: ");
     18c:	4938      	ldr	r1, [pc, #224]	; (270 <root+0x100>)
     18e:	f001 fa45 	bl	161c <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     192:	2214      	movs	r2, #20
     194:	2001      	movs	r0, #1
     196:	4937      	ldr	r1, [pc, #220]	; (274 <root+0x104>)
     198:	f001 fa04 	bl	15a4 <ser_in>
        //runfsm blinker;

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	2002      	movs	r0, #2
     19e:	4a35      	ldr	r2, [pc, #212]	; (274 <root+0x104>)
     1a0:	4935      	ldr	r1, [pc, #212]	; (278 <root+0x108>)
     1a2:	f001 fa3b 	bl	161c <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     1a6:	2003      	movs	r0, #3
     1a8:	4934      	ldr	r1, [pc, #208]	; (27c <root+0x10c>)
     1aa:	aa03      	add	r2, sp, #12
     1ac:	f001 fa60 	bl	1670 <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     1b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
     1b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     1b8:	2b41      	cmp	r3, #65	; 0x41
     1ba:	d14a      	bne.n	252 <root+0xe2>
            proceed Adjust_Intervals;
     1bc:	2004      	movs	r0, #4
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     1be:	f000 fe9d 	bl	efc <proceed>
        }

        proceed Show_Menu;
     1c2:	2002      	movs	r0, #2
     1c4:	f000 fe9a 	bl	efc <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	2000      	movs	r0, #0
     1ca:	492d      	ldr	r1, [pc, #180]	; (280 <root+0x110>)
     1cc:	f001 fa26 	bl	161c <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	2232      	movs	r2, #50	; 0x32
     1d2:	a903      	add	r1, sp, #12
     1d4:	2005      	movs	r0, #5
     1d6:	f001 f9e5 	bl	15a4 <ser_in>

        processSettingsInput(settings);
     1da:	a803      	add	r0, sp, #12
     1dc:	f7ff ff98 	bl	110 <processSettingsInput>

        proceed Show_Menu;
     1e0:	2002      	movs	r0, #2
     1e2:	f000 fe8b 	bl	efc <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
            cycles[0].onTime,
            cycles[0].offTime,
     1e6:	4a27      	ldr	r2, [pc, #156]	; (284 <root+0x114>)
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	2006      	movs	r0, #6
     1ea:	8a93      	ldrh	r3, [r2, #20]
     1ec:	4926      	ldr	r1, [pc, #152]	; (288 <root+0x118>)
     1ee:	9301      	str	r3, [sp, #4]
     1f0:	8a53      	ldrh	r3, [r2, #18]
     1f2:	9300      	str	r3, [sp, #0]
     1f4:	8913      	ldrh	r3, [r2, #8]
     1f6:	88d2      	ldrh	r2, [r2, #6]
     1f8:	f001 fa10 	bl	161c <ser_outf>
            cycles[1].onTime,
            cycles[1].offTime
        );

        proceed Show_Menu;
     1fc:	2002      	movs	r0, #2
     1fe:	f000 fe7d 	bl	efc <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     202:	2007      	movs	r0, #7
     204:	4921      	ldr	r1, [pc, #132]	; (28c <root+0x11c>)
     206:	f001 fa09 	bl	161c <ser_outf>
        displayCycle = YES;
     20a:	2201      	movs	r2, #1
     20c:	4b20      	ldr	r3, [pc, #128]	; (290 <root+0x120>)
     20e:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", ch);
     210:	2200      	movs	r2, #0
     212:	2008      	movs	r0, #8
     214:	4919      	ldr	r1, [pc, #100]	; (27c <root+0x10c>)
     216:	f001 fa2b 	bl	1670 <ser_inf>
        if(ch == 'S' || ch == 's'){
            displayCycle = NO;
            proceed Show_Menu;
        }
        
        proceed Monitor;
     21a:	2007      	movs	r0, #7
     21c:	f000 fe6e 	bl	efc <proceed>
     220:	2380      	movs	r3, #128	; 0x80
     222:	481c      	ldr	r0, [pc, #112]	; (294 <root+0x124>)
     224:	6003      	str	r3, [r0, #0]

    state Stop:
        leds(1, 0);
     226:	4b1c      	ldr	r3, [pc, #112]	; (298 <root+0x128>)
     228:	781a      	ldrb	r2, [r3, #0]
     22a:	7819      	ldrb	r1, [r3, #0]
     22c:	0912      	lsrs	r2, r2, #4
     22e:	f002 020d 	and.w	r2, r2, #13
     232:	f362 1107 	bfi	r1, r2, #4, #4
     236:	2240      	movs	r2, #64	; 0x40
     238:	7019      	strb	r1, [r3, #0]
     23a:	6002      	str	r2, [r0, #0]
        leds(0, 0);
     23c:	781a      	ldrb	r2, [r3, #0]
     23e:	7819      	ldrb	r1, [r3, #0]
     240:	0912      	lsrs	r2, r2, #4
     242:	f002 020e 	and.w	r2, r2, #14
     246:	f362 1107 	bfi	r1, r2, #4, #4
     24a:	7019      	strb	r1, [r3, #0]
     24c:	b011      	add	sp, #68	; 0x44
     24e:	f85d fb04 	ldr.w	pc, [sp], #4
        } else if (choice == 'S' || choice == 's') {
     252:	2b53      	cmp	r3, #83	; 0x53
     254:	d101      	bne.n	25a <root+0xea>
            proceed Stop;
     256:	2009      	movs	r0, #9
     258:	e7b1      	b.n	1be <root+0x4e>
        } else if (choice == 'V' || choice == 'v') {
     25a:	2b56      	cmp	r3, #86	; 0x56
     25c:	d101      	bne.n	262 <root+0xf2>
            proceed View_Settings;
     25e:	2006      	movs	r0, #6
     260:	e7ad      	b.n	1be <root+0x4e>
        } else if (choice == 'M' || choice == 'm') {
     262:	2b4d      	cmp	r3, #77	; 0x4d
     264:	d1ad      	bne.n	1c2 <root+0x52>
            proceed Monitor;
     266:	2007      	movs	r0, #7
     268:	e7a9      	b.n	1be <root+0x4e>
     26a:	f000 fdd9 	bl	e20 <__pi_badstate>
     26e:	e7ed      	b.n	24c <root+0xdc>
     270:	00002a54 	andeq	r2, r0, r4, asr sl
     274:	20000001 	andcs	r0, r0, r1
     278:	00002a66 	andeq	r2, r0, r6, ror #20
     27c:	00002af7 	strdeq	r2, [r0], -r7
     280:	00002afa 	strdeq	r2, [r0], -sl
     284:	2000006c 	andcs	r0, r0, ip, rrx
     288:	00002b2d 	andeq	r2, r0, sp, lsr #22
     28c:	00002b68 	andeq	r2, r0, r8, ror #22
     290:	20000000 	andcs	r0, r0, r0
     294:	400220a0 	andmi	r2, r2, r0, lsr #1
     298:	2000009c 	mulcs	r0, ip, r0

0000029c <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     29c:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     29e:	4801      	ldr	r0, [pc, #4]	; (2a4 <devinit_uart+0x8>)
     2a0:	f000 bebc 	b.w	101c <adddevfunc>
     2a4:	000005e9 	andeq	r0, r0, r9, ror #11

000002a8 <udelay>:
void udelay (volatile word n) {
     2a8:	b082      	sub	sp, #8
     2aa:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     2ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2b2:	b29b      	uxth	r3, r3
     2b4:	b90b      	cbnz	r3, 2ba <udelay+0x12>
}
     2b6:	b002      	add	sp, #8
     2b8:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     2ba:	2304      	movs	r3, #4
	while (n--);
     2bc:	461a      	mov	r2, r3
     2be:	3b01      	subs	r3, #1
     2c0:	b29b      	uxth	r3, r3
     2c2:	2a00      	cmp	r2, #0
     2c4:	d1fa      	bne.n	2bc <udelay+0x14>
		n--;
     2c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2ca:	3b01      	subs	r3, #1
     2cc:	b29b      	uxth	r3, r3
     2ce:	f8ad 3006 	strh.w	r3, [sp, #6]
     2d2:	e7ec      	b.n	2ae <udelay+0x6>

000002d4 <mdelay>:
void mdelay (volatile word n) {
     2d4:	b507      	push	{r0, r1, r2, lr}
     2d6:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     2da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2de:	b29b      	uxth	r3, r3
     2e0:	b913      	cbnz	r3, 2e8 <mdelay+0x14>
}
     2e2:	b003      	add	sp, #12
     2e4:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     2e8:	f240 30e7 	movw	r0, #999	; 0x3e7
     2ec:	f7ff ffdc 	bl	2a8 <udelay>
		n--;
     2f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2f4:	3b01      	subs	r3, #1
     2f6:	b29b      	uxth	r3, r3
     2f8:	f8ad 3006 	strh.w	r3, [sp, #6]
     2fc:	e7ed      	b.n	2da <mdelay+0x6>
	...

00000300 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     300:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     302:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     304:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     306:	d505      	bpl.n	314 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <__pi_ondomain+0x34>)
     30a:	78da      	ldrb	r2, [r3, #3]
     30c:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     30e:	bf84      	itt	hi
     310:	2201      	movhi	r2, #1
     312:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     314:	4d08      	ldr	r5, [pc, #32]	; (338 <__pi_ondomain+0x38>)
     316:	4620      	mov	r0, r4
     318:	682b      	ldr	r3, [r5, #0]
     31a:	695b      	ldr	r3, [r3, #20]
     31c:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31e:	682b      	ldr	r3, [r5, #0]
     320:	4620      	mov	r0, r4
     322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     324:	4798      	blx	r3
     326:	2801      	cmp	r0, #1
     328:	d1f9      	bne.n	31e <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     32a:	4b02      	ldr	r3, [pc, #8]	; (334 <__pi_ondomain+0x34>)
     32c:	6858      	ldr	r0, [r3, #4]
     32e:	4304      	orrs	r4, r0
     330:	605c      	str	r4, [r3, #4]
}
     332:	bd38      	pop	{r3, r4, r5, pc}
     334:	2000009c 	mulcs	r0, ip, r0
     338:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

0000033c <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     33c:	460a      	mov	r2, r1
     33e:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     340:	4601      	mov	r1, r0
     342:	480f      	ldr	r0, [pc, #60]	; (380 <__pi_syserror+0x44>)
     344:	f000 ffb8 	bl	12b8 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     348:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34a:	2540      	movs	r5, #64	; 0x40
     34c:	462f      	mov	r7, r5
     34e:	4e0d      	ldr	r6, [pc, #52]	; (384 <__pi_syserror+0x48>)
     350:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     352:	490d      	ldr	r1, [pc, #52]	; (388 <__pi_syserror+0x4c>)
     354:	6037      	str	r7, [r6, #0]
     356:	6034      	str	r4, [r6, #0]
     358:	780b      	ldrb	r3, [r1, #0]
     35a:	780b      	ldrb	r3, [r1, #0]
     35c:	20c8      	movs	r0, #200	; 0xc8
     35e:	f36f 1307 	bfc	r3, #4, #4
     362:	700b      	strb	r3, [r1, #0]
     364:	f7ff ffb6 	bl	2d4 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	4b08      	ldr	r3, [pc, #32]	; (38c <__pi_syserror+0x50>)
     36a:	20c8      	movs	r0, #200	; 0xc8
     36c:	601d      	str	r5, [r3, #0]
     36e:	601c      	str	r4, [r3, #0]
     370:	780b      	ldrb	r3, [r1, #0]
     372:	780b      	ldrb	r3, [r1, #0]
     374:	f36f 1307 	bfc	r3, #4, #4
     378:	700b      	strb	r3, [r1, #0]
     37a:	f7ff ffab 	bl	2d4 <mdelay>
	while (1) {
     37e:	e7e7      	b.n	350 <__pi_syserror+0x14>
     380:	00002b84 	andeq	r2, r0, r4, lsl #23
     384:	40022090 	mulmi	r2, r0, r0
     388:	2000009c 	mulcs	r0, ip, r0
     38c:	400220a0 	andmi	r2, r2, r0, lsr #1

00000390 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     390:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     392:	4b0a      	ldr	r3, [pc, #40]	; (3bc <tci_run_delay_timer+0x2c>)
     394:	881c      	ldrh	r4, [r3, #0]
     396:	4b0a      	ldr	r3, [pc, #40]	; (3c0 <tci_run_delay_timer+0x30>)
     398:	8818      	ldrh	r0, [r3, #0]
     39a:	4b0a      	ldr	r3, [pc, #40]	; (3c4 <tci_run_delay_timer+0x34>)
     39c:	1b00      	subs	r0, r0, r4
     39e:	b284      	uxth	r4, r0
     3a0:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a2:	f001 fd8b 	bl	1ebc <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     3a6:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a8:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3aa:	4b07      	ldr	r3, [pc, #28]	; (3c8 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     3b0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	6018      	str	r0, [r3, #0]
	sti_tim;
     3b6:	4b05      	ldr	r3, [pc, #20]	; (3cc <tci_run_delay_timer+0x3c>)
     3b8:	601a      	str	r2, [r3, #0]
}
     3ba:	bd10      	pop	{r4, pc}
     3bc:	2000009a 	mulcs	r0, sl, r0
     3c0:	20000098 	mulcs	r0, r8, r0
     3c4:	20000016 	andcs	r0, r0, r6, lsl r0
     3c8:	40092018 	andmi	r2, r9, r8, lsl r0
     3cc:	43240280 			; <UNDEFINED> instruction: 0x43240280

000003d0 <tci_run_auxiliary_timer>:
	cli_aux;
     3d0:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     3d2:	b510      	push	{r4, lr}
	cli_aux;
     3d4:	4c06      	ldr	r4, [pc, #24]	; (3f0 <tci_run_auxiliary_timer+0x20>)
     3d6:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	f001 fd70 	bl	1ebc <NOROM_AONRTCCurrent64BitValueGet>
     3dc:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     3de:	4b05      	ldr	r3, [pc, #20]	; (3f4 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     3e4:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     3e6:	6018      	str	r0, [r3, #0]
	sti_aux;
     3e8:	2301      	movs	r3, #1
     3ea:	6023      	str	r3, [r4, #0]
}
     3ec:	bd10      	pop	{r4, pc}
     3ee:	bf00      	nop
     3f0:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     3f4:	40092020 	andmi	r2, r9, r0, lsr #32

000003f8 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     3f8:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fa:	4b3b      	ldr	r3, [pc, #236]	; (4e8 <AONRTCIntHandler+0xf0>)
     3fc:	6818      	ldr	r0, [r3, #0]
     3fe:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     402:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     406:	d542      	bpl.n	48e <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     408:	4b38      	ldr	r3, [pc, #224]	; (4ec <AONRTCIntHandler+0xf4>)
     40a:	6819      	ldr	r1, [r3, #0]
     40c:	2900      	cmp	r1, #0
     40e:	d053      	beq.n	4b8 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     410:	880a      	ldrh	r2, [r1, #0]
     412:	2a00      	cmp	r2, #0
     414:	d04e      	beq.n	4b4 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     416:	3a01      	subs	r2, #1
     418:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     41a:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     41c:	685c      	ldr	r4, [r3, #4]
     41e:	b194      	cbz	r4, 446 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     420:	8821      	ldrh	r1, [r4, #0]
     422:	b111      	cbz	r1, 42a <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     424:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     426:	3901      	subs	r1, #1
     428:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     42a:	689c      	ldr	r4, [r3, #8]
     42c:	b15c      	cbz	r4, 446 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     42e:	8821      	ldrh	r1, [r4, #0]
     430:	b111      	cbz	r1, 438 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     432:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     434:	3901      	subs	r1, #1
     436:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     438:	68d9      	ldr	r1, [r3, #12]
     43a:	b121      	cbz	r1, 446 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     43c:	880b      	ldrh	r3, [r1, #0]
     43e:	b113      	cbz	r3, 446 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     440:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     442:	3b01      	subs	r3, #1
     444:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     446:	4b2a      	ldr	r3, [pc, #168]	; (4f0 <AONRTCIntHandler+0xf8>)
     448:	7819      	ldrb	r1, [r3, #0]
     44a:	0909      	lsrs	r1, r1, #4
     44c:	d047      	beq.n	4de <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     44e:	7859      	ldrb	r1, [r3, #1]
     450:	1c4a      	adds	r2, r1, #1
     452:	b2d2      	uxtb	r2, r2
     454:	705a      	strb	r2, [r3, #1]
     456:	b9d1      	cbnz	r1, 48e <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     458:	781a      	ldrb	r2, [r3, #0]
     45a:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     45e:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     460:	d02c      	beq.n	4bc <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     462:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	bf42      	ittt	mi
     466:	2140      	movmi	r1, #64	; 0x40
     468:	4a22      	ldrmi	r2, [pc, #136]	; (4f4 <AONRTCIntHandler+0xfc>)
     46a:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     46c:	781a      	ldrb	r2, [r3, #0]
     46e:	0692      	lsls	r2, r2, #26
     470:	bf42      	ittt	mi
     472:	2180      	movmi	r1, #128	; 0x80
     474:	4a1f      	ldrmi	r2, [pc, #124]	; (4f4 <AONRTCIntHandler+0xfc>)
     476:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     478:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     47a:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     47c:	781a      	ldrb	r2, [r3, #0]
     47e:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     482:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     484:	781a      	ldrb	r2, [r3, #0]
     486:	0752      	lsls	r2, r2, #29
     488:	d501      	bpl.n	48e <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     48a:	22c8      	movs	r2, #200	; 0xc8
     48c:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     48e:	07c3      	lsls	r3, r0, #31
     490:	d50f      	bpl.n	4b2 <AONRTCIntHandler+0xba>
		cli_tim;
     492:	2100      	movs	r1, #0
     494:	4b18      	ldr	r3, [pc, #96]	; (4f8 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     496:	4a19      	ldr	r2, [pc, #100]	; (4fc <AONRTCIntHandler+0x104>)
     498:	4819      	ldr	r0, [pc, #100]	; (500 <AONRTCIntHandler+0x108>)
		cli_tim;
     49a:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     49c:	8803      	ldrh	r3, [r0, #0]
     49e:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     4a0:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     4a2:	4423      	add	r3, r4
		RISE_N_SHINE;
     4a4:	4a12      	ldr	r2, [pc, #72]	; (4f0 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     4a6:	b29b      	uxth	r3, r3
     4a8:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     4aa:	7813      	ldrb	r3, [r2, #0]
     4ac:	f043 0302 	orr.w	r3, r3, #2
     4b0:	7013      	strb	r3, [r2, #0]
}
     4b2:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     4b4:	2201      	movs	r2, #1
     4b6:	e7b1      	b.n	41c <AONRTCIntHandler+0x24>
     4b8:	2201      	movs	r2, #1
     4ba:	e7c4      	b.n	446 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     4bc:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4be:	bf42      	ittt	mi
     4c0:	2140      	movmi	r1, #64	; 0x40
     4c2:	4a10      	ldrmi	r2, [pc, #64]	; (504 <AONRTCIntHandler+0x10c>)
     4c4:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     4c6:	781a      	ldrb	r2, [r3, #0]
     4c8:	0691      	lsls	r1, r2, #26
     4ca:	bf42      	ittt	mi
     4cc:	2180      	movmi	r1, #128	; 0x80
     4ce:	4a0d      	ldrmi	r2, [pc, #52]	; (504 <AONRTCIntHandler+0x10c>)
     4d0:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     4d2:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     4d4:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     4d6:	781a      	ldrb	r2, [r3, #0]
     4d8:	f042 0208 	orr.w	r2, r2, #8
     4dc:	e7d1      	b.n	482 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     4de:	2a00      	cmp	r2, #0
     4e0:	d0d5      	beq.n	48e <AONRTCIntHandler+0x96>
			cli_aux;
     4e2:	4b09      	ldr	r3, [pc, #36]	; (508 <AONRTCIntHandler+0x110>)
     4e4:	6019      	str	r1, [r3, #0]
     4e6:	e7d2      	b.n	48e <AONRTCIntHandler+0x96>
     4e8:	40092004 	andmi	r2, r9, r4
     4ec:	200000a8 	andcs	r0, r0, r8, lsr #1
     4f0:	2000009c 	mulcs	r0, ip, r0
     4f4:	40022090 	mulmi	r2, r0, r0
     4f8:	43240280 			; <UNDEFINED> instruction: 0x43240280
     4fc:	20000016 	andcs	r0, r0, r6, lsl r0
     500:	200000a4 	andcs	r0, r0, r4, lsr #1
     504:	400220a0 	andmi	r2, r2, r0, lsr #1
     508:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

0000050c <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     50e:	2600      	movs	r6, #0
     510:	4b0e      	ldr	r3, [pc, #56]	; (54c <tci_update_delay_ticks+0x40>)
	if (setdel) {
     512:	4f0f      	ldr	r7, [pc, #60]	; (550 <tci_update_delay_ticks+0x44>)
	cli_tim;
     514:	601e      	str	r6, [r3, #0]
	if (setdel) {
     516:	883d      	ldrh	r5, [r7, #0]
     518:	b19d      	cbz	r5, 542 <tci_update_delay_ticks+0x36>
		if (force) {
     51a:	b1a0      	cbz	r0, 546 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	4b0d      	ldr	r3, [pc, #52]	; (554 <tci_update_delay_ticks+0x48>)
     51e:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	f001 fccc 	bl	1ebc <NOROM_AONRTCCurrent64BitValueGet>
     524:	0d80      	lsrs	r0, r0, #22
     526:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52a:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     52e:	b280      	uxth	r0, r0
     530:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     532:	1b2c      	subs	r4, r5, r4
	return NO;
     534:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     536:	4b08      	ldr	r3, [pc, #32]	; (558 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     538:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53a:	881a      	ldrh	r2, [r3, #0]
     53c:	4414      	add	r4, r2
     53e:	b2a4      	uxth	r4, r4
     540:	801c      	strh	r4, [r3, #0]
}
     542:	4628      	mov	r0, r5
     544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     546:	2501      	movs	r5, #1
     548:	601d      	str	r5, [r3, #0]
		return YES;
     54a:	e7fa      	b.n	542 <tci_update_delay_ticks+0x36>
     54c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     550:	20000016 	andcs	r0, r0, r6, lsl r0
     554:	40092018 	andmi	r2, r9, r8, lsl r0
     558:	200000a4 	andcs	r0, r0, r4, lsr #1

0000055c <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     55e:	4e0f      	ldr	r6, [pc, #60]	; (59c <__pi_uart_setrate+0x40>)
     560:	4d0f      	ldr	r5, [pc, #60]	; (5a0 <__pi_uart_setrate+0x44>)
     562:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     566:	68db      	ldr	r3, [r3, #12]
     568:	4628      	mov	r0, r5
     56a:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     56c:	2264      	movs	r2, #100	; 0x64
     56e:	6833      	ldr	r3, [r6, #0]
     570:	4628      	mov	r0, r5
     572:	4362      	muls	r2, r4
     574:	685e      	ldr	r6, [r3, #4]
     576:	490b      	ldr	r1, [pc, #44]	; (5a4 <__pi_uart_setrate+0x48>)
     578:	2360      	movs	r3, #96	; 0x60
     57a:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	4a0a      	ldr	r2, [pc, #40]	; (5a8 <__pi_uart_setrate+0x4c>)
}
     57e:	2001      	movs	r0, #1
     580:	6813      	ldr	r3, [r2, #0]
     582:	f043 0310 	orr.w	r3, r3, #16
     586:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	6853      	ldr	r3, [r2, #4]
     58a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     58e:	f043 0301 	orr.w	r3, r3, #1
     592:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     594:	4b05      	ldr	r3, [pc, #20]	; (5ac <__pi_uart_setrate+0x50>)
     596:	801c      	strh	r4, [r3, #0]
}
     598:	bd70      	pop	{r4, r5, r6, pc}
     59a:	bf00      	nop
     59c:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     5a0:	40001000 	andmi	r1, r0, r0
     5a4:	02dc6c00 	sbcseq	r6, ip, #0, 24
     5a8:	4000102c 	andmi	r1, r0, ip, lsr #32
     5ac:	20000018 	andcs	r0, r0, r8, lsl r0

000005b0 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	4a08      	ldr	r2, [pc, #32]	; (5d4 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     5b2:	4909      	ldr	r1, [pc, #36]	; (5d8 <reinit_uart+0x28>)
     5b4:	6813      	ldr	r3, [r2, #0]
     5b6:	f043 0310 	orr.w	r3, r3, #16
     5ba:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	2212      	movs	r2, #18
     5be:	4b07      	ldr	r3, [pc, #28]	; (5dc <reinit_uart+0x2c>)
     5c0:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c2:	4a07      	ldr	r2, [pc, #28]	; (5e0 <reinit_uart+0x30>)
     5c4:	6813      	ldr	r3, [r2, #0]
     5c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     5ca:	6013      	str	r3, [r2, #0]
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <reinit_uart+0x34>)
     5ce:	8818      	ldrh	r0, [r3, #0]
     5d0:	f7ff bfc4 	b.w	55c <__pi_uart_setrate>
     5d4:	4000102c 	andmi	r1, r0, ip, lsr #32
     5d8:	20000088 	andcs	r0, r0, r8, lsl #1
     5dc:	40001034 	andmi	r1, r0, r4, lsr r0
     5e0:	40001030 	andmi	r1, r0, r0, lsr r0
     5e4:	20000018 	andcs	r0, r0, r8, lsl r0

000005e8 <ioreq_uart_a>:
	switch (operation) {
     5e8:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5ee:	460d      	mov	r5, r1
     5f0:	4614      	mov	r4, r2
     5f2:	2803      	cmp	r0, #3
     5f4:	d86e      	bhi.n	6d4 <ioreq_uart_a+0xec>
     5f6:	e8df f000 	tbb	[pc, r0]
     5fa:	5a471253 	bpl	11c4f4e <__ccfg+0x11a4fa6>
				*buf++ = uart_a_read;
     5fe:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     602:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     604:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     608:	b11e      	cbz	r6, 612 <ioreq_uart_a+0x2a>
     60a:	f8d8 3000 	ldr.w	r3, [r8]
     60e:	06d8      	lsls	r0, r3, #27
     610:	d5f5      	bpl.n	5fe <ioreq_uart_a+0x16>
			if (len != operation) {
     612:	42a6      	cmp	r6, r4
     614:	d00a      	beq.n	62c <ioreq_uart_a+0x44>
				return operation - len;
     616:	1ba4      	subs	r4, r4, r6
}
     618:	4620      	mov	r0, r4
     61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     61e:	4616      	mov	r6, r2
			uart_a_disable_int;
     620:	4f2e      	ldr	r7, [pc, #184]	; (6dc <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     622:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6f0 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     626:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6f4 <ioreq_uart_a+0x10c>
     62a:	e7ed      	b.n	608 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     62c:	683b      	ldr	r3, [r7, #0]
     62e:	2015      	movs	r0, #21
     630:	695b      	ldr	r3, [r3, #20]
     632:	4798      	blx	r3
			if (uart_a_char_available) {
     634:	f8d8 3000 	ldr.w	r3, [r8]
     638:	06d9      	lsls	r1, r3, #27
     63a:	d404      	bmi.n	646 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     63c:	683b      	ldr	r3, [r7, #0]
     63e:	2015      	movs	r0, #21
     640:	691b      	ldr	r3, [r3, #16]
     642:	4798      	blx	r3
				goto Redo_rx;
     644:	e7e0      	b.n	608 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     646:	4a26      	ldr	r2, [pc, #152]	; (6e0 <ioreq_uart_a+0xf8>)
     648:	7993      	ldrb	r3, [r2, #6]
     64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     64e:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     652:	7193      	strb	r3, [r2, #6]
			return -2;
     654:	e7e0      	b.n	618 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     656:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     65a:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     65c:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     660:	b11e      	cbz	r6, 66a <ioreq_uart_a+0x82>
     662:	f8d8 3000 	ldr.w	r3, [r8]
     666:	069a      	lsls	r2, r3, #26
     668:	d5f5      	bpl.n	656 <ioreq_uart_a+0x6e>
			if (len != operation) {
     66a:	42a6      	cmp	r6, r4
     66c:	d1d3      	bne.n	616 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     66e:	683b      	ldr	r3, [r7, #0]
     670:	2015      	movs	r0, #21
     672:	695b      	ldr	r3, [r3, #20]
     674:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     676:	f8d8 3000 	ldr.w	r3, [r8]
     67a:	069b      	lsls	r3, r3, #26
     67c:	d40b      	bmi.n	696 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     67e:	683b      	ldr	r3, [r7, #0]
     680:	2015      	movs	r0, #21
     682:	691b      	ldr	r3, [r3, #16]
     684:	4798      	blx	r3
				goto Redo_tx;
     686:	e7eb      	b.n	660 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     688:	4616      	mov	r6, r2
			uart_a_disable_int;
     68a:	4f14      	ldr	r7, [pc, #80]	; (6dc <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     68c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 6f0 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     690:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6f4 <ioreq_uart_a+0x10c>
     694:	e7e4      	b.n	660 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     696:	4a12      	ldr	r2, [pc, #72]	; (6e0 <ioreq_uart_a+0xf8>)
     698:	7993      	ldrb	r3, [r2, #6]
     69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     69e:	e7d6      	b.n	64e <ioreq_uart_a+0x66>
			uart_a_enable_int;
     6a0:	4b0e      	ldr	r3, [pc, #56]	; (6dc <ioreq_uart_a+0xf4>)
     6a2:	2015      	movs	r0, #21
     6a4:	681b      	ldr	r3, [r3, #0]
			return 0;
     6a6:	2400      	movs	r4, #0
			uart_a_enable_int;
     6a8:	691b      	ldr	r3, [r3, #16]
     6aa:	4798      	blx	r3
			return 0;
     6ac:	e7b4      	b.n	618 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     6ae:	2a01      	cmp	r2, #1
     6b0:	d109      	bne.n	6c6 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     6b2:	490b      	ldr	r1, [pc, #44]	; (6e0 <ioreq_uart_a+0xf8>)
     6b4:	8828      	ldrh	r0, [r5, #0]
     6b6:	f7ff ff51 	bl	55c <__pi_uart_setrate>
     6ba:	2800      	cmp	r0, #0
     6bc:	d1ac      	bne.n	618 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     6be:	2003      	movs	r0, #3
     6c0:	4908      	ldr	r1, [pc, #32]	; (6e4 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     6c2:	f7ff fe3b 	bl	33c <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     6c6:	2a02      	cmp	r2, #2
     6c8:	d104      	bne.n	6d4 <ioreq_uart_a+0xec>
	return urates [0];
     6ca:	4b07      	ldr	r3, [pc, #28]	; (6e8 <ioreq_uart_a+0x100>)
				return 1;
     6cc:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6ce:	881b      	ldrh	r3, [r3, #0]
     6d0:	800b      	strh	r3, [r1, #0]
				return 1;
     6d2:	e7a1      	b.n	618 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     6d4:	2002      	movs	r0, #2
     6d6:	4905      	ldr	r1, [pc, #20]	; (6ec <ioreq_uart_a+0x104>)
     6d8:	e7f3      	b.n	6c2 <ioreq_uart_a+0xda>
     6da:	bf00      	nop
     6dc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     6e0:	20000088 	andcs	r0, r0, r8, lsl #1
     6e4:	00002b93 	muleq	r0, r3, fp
     6e8:	20000018 	andcs	r0, r0, r8, lsl r0
     6ec:	00002b97 	muleq	r0, r7, fp
     6f0:	40001018 	andmi	r1, r0, r8, lsl r0
     6f4:	40001000 	andmi	r1, r0, r0

000006f8 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     6fc:	b530      	push	{r4, r5, lr}
     6fe:	4b29      	ldr	r3, [pc, #164]	; (7a4 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	4c29      	ldr	r4, [pc, #164]	; (7a8 <UART0IntHandler+0xb0>)
     702:	601a      	str	r2, [r3, #0]
     704:	6822      	ldr	r2, [r4, #0]
     706:	06d5      	lsls	r5, r2, #27
     708:	d423      	bmi.n	752 <UART0IntHandler+0x5a>
     70a:	4b28      	ldr	r3, [pc, #160]	; (7ac <UART0IntHandler+0xb4>)
     70c:	799a      	ldrb	r2, [r3, #6]
     70e:	0610      	lsls	r0, r2, #24
     710:	d51f      	bpl.n	752 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     712:	799a      	ldrb	r2, [r3, #6]
     714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     718:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     71a:	4a25      	ldr	r2, [pc, #148]	; (7b0 <UART0IntHandler+0xb8>)
     71c:	7813      	ldrb	r3, [r2, #0]
     71e:	f043 0302 	orr.w	r3, r3, #2
     722:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     724:	4b23      	ldr	r3, [pc, #140]	; (7b4 <UART0IntHandler+0xbc>)
     726:	681a      	ldr	r2, [r3, #0]
     728:	b19a      	cbz	r2, 752 <UART0IntHandler+0x5a>
     72a:	4610      	mov	r0, r2
     72c:	2300      	movs	r3, #0
     72e:	f830 1b10 	ldrh.w	r1, [r0], #16
     732:	f001 0107 	and.w	r1, r1, #7
     736:	4299      	cmp	r1, r3
     738:	dd09      	ble.n	74e <UART0IntHandler+0x56>
     73a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     73e:	3301      	adds	r3, #1
     740:	f515 7f81 	cmn.w	r5, #258	; 0x102
     744:	d1f7      	bne.n	736 <UART0IntHandler+0x3e>
     746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     74a:	889b      	ldrh	r3, [r3, #4]
     74c:	8013      	strh	r3, [r2, #0]
     74e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     750:	e7ea      	b.n	728 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     752:	6823      	ldr	r3, [r4, #0]
     754:	0699      	lsls	r1, r3, #26
     756:	d424      	bmi.n	7a2 <UART0IntHandler+0xaa>
     758:	4b14      	ldr	r3, [pc, #80]	; (7ac <UART0IntHandler+0xb4>)
     75a:	799a      	ldrb	r2, [r3, #6]
     75c:	0652      	lsls	r2, r2, #25
     75e:	d520      	bpl.n	7a2 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     760:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	799a      	ldrb	r2, [r3, #6]
     766:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     76a:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     76c:	4a10      	ldr	r2, [pc, #64]	; (7b0 <UART0IntHandler+0xb8>)
     76e:	7813      	ldrb	r3, [r2, #0]
     770:	f043 0302 	orr.w	r3, r3, #2
     774:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     776:	4b0f      	ldr	r3, [pc, #60]	; (7b4 <UART0IntHandler+0xbc>)
     778:	681a      	ldr	r2, [r3, #0]
     77a:	b192      	cbz	r2, 7a2 <UART0IntHandler+0xaa>
     77c:	4610      	mov	r0, r2
     77e:	2300      	movs	r3, #0
     780:	f830 1b10 	ldrh.w	r1, [r0], #16
     784:	f001 0107 	and.w	r1, r1, #7
     788:	4299      	cmp	r1, r3
     78a:	dd08      	ble.n	79e <UART0IntHandler+0xa6>
     78c:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     790:	3301      	adds	r3, #1
     792:	42a5      	cmp	r5, r4
     794:	d1f8      	bne.n	788 <UART0IntHandler+0x90>
     796:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     79a:	889b      	ldrh	r3, [r3, #4]
     79c:	8013      	strh	r3, [r2, #0]
     79e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     7a0:	e7eb      	b.n	77a <UART0IntHandler+0x82>
	}

	RTNI;
}
     7a2:	bd30      	pop	{r4, r5, pc}
     7a4:	40001044 	andmi	r1, r0, r4, asr #32
     7a8:	40001018 	andmi	r1, r0, r8, lsl r0
     7ac:	20000088 	andcs	r0, r0, r8, lsl #1
     7b0:	2000009c 	mulcs	r0, ip, r0
     7b4:	2000001c 	andcs	r0, r0, ip, lsl r0

000007b8 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     7be:	4e0c      	ldr	r6, [pc, #48]	; (7f0 <__buttons_setirq+0x38>)
     7c0:	4d0c      	ldr	r5, [pc, #48]	; (7f4 <__buttons_setirq+0x3c>)
     7c2:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	4c0c      	ldr	r4, [pc, #48]	; (7f8 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     7c6:	0a1b      	lsrs	r3, r3, #8
     7c8:	fa01 f203 	lsl.w	r2, r1, r3
     7cc:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7ce:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     7d0:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d2:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     7d6:	0a1b      	lsrs	r3, r3, #8
     7d8:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7da:	01db      	lsls	r3, r3, #7
     7dc:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     7e0:	4322      	orrs	r2, r4
     7e2:	4323      	orrs	r3, r4
     7e4:	6010      	str	r0, [r2, #0]
     7e6:	6029      	str	r1, [r5, #0]
     7e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     7ea:	b662      	cpsie	i
			val;
	}
	sti;
}
     7ec:	bd70      	pop	{r4, r5, r6, pc}
     7ee:	bf00      	nop
     7f0:	00002c80 	andeq	r2, r0, r0, lsl #25
     7f4:	400220e0 	andmi	r2, r2, r0, ror #1
     7f8:	42000048 	andmi	r0, r0, #72	; 0x48

000007fc <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     7fe:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     800:	2200      	movs	r2, #0
     802:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	4f09      	ldr	r7, [pc, #36]	; (82c <__pinlist_setirq+0x30>)
     806:	4c0a      	ldr	r4, [pc, #40]	; (830 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	490a      	ldr	r1, [pc, #40]	; (834 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80a:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     80c:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     812:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     816:	01db      	lsls	r3, r3, #7
     818:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     81c:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     81e:	2a04      	cmp	r2, #4
     820:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     822:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     824:	d1f1      	bne.n	80a <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     826:	b662      	cpsie	i
			val;
	}
	sti;
}
     828:	bdf0      	pop	{r4, r5, r6, r7, pc}
     82a:	bf00      	nop
     82c:	00002c7c 	andeq	r2, r0, ip, ror ip
     830:	400220e0 	andmi	r2, r2, r0, ror #1
     834:	42000048 	andmi	r0, r0, #72	; 0x48

00000838 <GPIOIntHandler>:
void GPIOIntHandler () {
     838:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     83a:	4c23      	ldr	r4, [pc, #140]	; (8c8 <GPIOIntHandler+0x90>)
     83c:	6822      	ldr	r2, [r4, #0]
     83e:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     842:	d01e      	beq.n	882 <GPIOIntHandler+0x4a>
	buttons_disable ();
     844:	2000      	movs	r0, #0
     846:	f7ff ffb7 	bl	7b8 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     84a:	4b20      	ldr	r3, [pc, #128]	; (8cc <GPIOIntHandler+0x94>)
     84c:	4d20      	ldr	r5, [pc, #128]	; (8d0 <GPIOIntHandler+0x98>)
     84e:	681a      	ldr	r2, [r3, #0]
     850:	b192      	cbz	r2, 878 <GPIOIntHandler+0x40>
     852:	4610      	mov	r0, r2
     854:	2300      	movs	r3, #0
     856:	f830 1b10 	ldrh.w	r1, [r0], #16
     85a:	f001 0107 	and.w	r1, r1, #7
     85e:	4299      	cmp	r1, r3
     860:	dd08      	ble.n	874 <GPIOIntHandler+0x3c>
     862:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     866:	3301      	adds	r3, #1
     868:	42ae      	cmp	r6, r5
     86a:	d1f8      	bne.n	85e <GPIOIntHandler+0x26>
     86c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     870:	889b      	ldrh	r3, [r3, #4]
     872:	8013      	strh	r3, [r2, #0]
     874:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     876:	e7eb      	b.n	850 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     878:	4a16      	ldr	r2, [pc, #88]	; (8d4 <GPIOIntHandler+0x9c>)
     87a:	7813      	ldrb	r3, [r2, #0]
     87c:	f043 0302 	orr.w	r3, r3, #2
     880:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     882:	6823      	ldr	r3, [r4, #0]
     884:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     888:	d01d      	beq.n	8c6 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     88a:	4b10      	ldr	r3, [pc, #64]	; (8cc <GPIOIntHandler+0x94>)
     88c:	4c12      	ldr	r4, [pc, #72]	; (8d8 <GPIOIntHandler+0xa0>)
     88e:	6818      	ldr	r0, [r3, #0]
     890:	b190      	cbz	r0, 8b8 <GPIOIntHandler+0x80>
     892:	4601      	mov	r1, r0
     894:	2300      	movs	r3, #0
     896:	f831 2b10 	ldrh.w	r2, [r1], #16
     89a:	f002 0207 	and.w	r2, r2, #7
     89e:	429a      	cmp	r2, r3
     8a0:	dd08      	ble.n	8b4 <GPIOIntHandler+0x7c>
     8a2:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     8a6:	3301      	adds	r3, #1
     8a8:	42a5      	cmp	r5, r4
     8aa:	d1f8      	bne.n	89e <GPIOIntHandler+0x66>
     8ac:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     8b0:	889b      	ldrh	r3, [r3, #4]
     8b2:	8003      	strh	r3, [r0, #0]
     8b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     8b6:	e7eb      	b.n	890 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     8b8:	f7ff ffa0 	bl	7fc <__pinlist_setirq>
	RISE_N_SHINE;
     8bc:	4a05      	ldr	r2, [pc, #20]	; (8d4 <GPIOIntHandler+0x9c>)
     8be:	7813      	ldrb	r3, [r2, #0]
     8c0:	f043 0302 	orr.w	r3, r3, #2
     8c4:	7013      	strb	r3, [r2, #0]
}
     8c6:	bd70      	pop	{r4, r5, r6, pc}
     8c8:	400220e0 	andmi	r2, r2, r0, ror #1
     8cc:	2000001c 	andcs	r0, r0, ip, lsl r0
     8d0:	00002c80 	andeq	r2, r0, r0, lsl #25
     8d4:	2000009c 	mulcs	r0, ip, r0
     8d8:	00002c7c 	andeq	r2, r0, ip, ror ip

000008dc <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	4c58      	ldr	r4, [pc, #352]	; (a44 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e2:	2004      	movs	r0, #4
     8e4:	f7ff fd0c 	bl	300 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	6823      	ldr	r3, [r4, #0]
     8ea:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8ee:	69db      	ldr	r3, [r3, #28]
     8f0:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f2:	6823      	ldr	r3, [r4, #0]
     8f4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     8fa:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	6823      	ldr	r3, [r4, #0]
     8fe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     904:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     906:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	2600      	movs	r6, #0
     90a:	4c4f      	ldr	r4, [pc, #316]	; (a48 <system_init+0x16c>)
     90c:	4f4f      	ldr	r7, [pc, #316]	; (a4c <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90e:	f8df c17c 	ldr.w	ip, [pc, #380]	; a8c <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     912:	f8df e17c 	ldr.w	lr, [pc, #380]	; a90 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     916:	f8df 8140 	ldr.w	r8, [pc, #320]	; a58 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91a:	f8df 9134 	ldr.w	r9, [pc, #308]	; a50 <system_init+0x174>
     91e:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     926:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92a:	0091      	lsls	r1, r2, #2
     92c:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     930:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     934:	ea05 0a0c 	and.w	sl, r5, ip
     938:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     93c:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93e:	bf44      	itt	mi
     940:	ea41 010e 	orrmi.w	r1, r1, lr
     944:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     946:	fa03 f202 	lsl.w	r2, r3, r2
     94a:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	bf4c      	ite	mi
     94e:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     952:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     956:	2e11      	cmp	r6, #17
     958:	d1e2      	bne.n	920 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95a:	2540      	movs	r5, #64	; 0x40
     95c:	2680      	movs	r6, #128	; 0x80
     95e:	4b3c      	ldr	r3, [pc, #240]	; (a50 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     960:	493c      	ldr	r1, [pc, #240]	; (a54 <system_init+0x178>)
     962:	601d      	str	r5, [r3, #0]
     964:	601e      	str	r6, [r3, #0]
     966:	780b      	ldrb	r3, [r1, #0]
     968:	780b      	ldrb	r3, [r1, #0]
     96a:	20c8      	movs	r0, #200	; 0xc8
     96c:	f36f 1307 	bfc	r3, #4, #4
     970:	700b      	strb	r3, [r1, #0]
     972:	f7ff fcaf 	bl	2d4 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     976:	4b38      	ldr	r3, [pc, #224]	; (a58 <system_init+0x17c>)
     978:	20c8      	movs	r0, #200	; 0xc8
     97a:	601d      	str	r5, [r3, #0]
     97c:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     97e:	2601      	movs	r6, #1
	all_leds_blink;
     980:	780b      	ldrb	r3, [r1, #0]
     982:	780b      	ldrb	r3, [r1, #0]
     984:	f36f 1307 	bfc	r3, #4, #4
     988:	700b      	strb	r3, [r1, #0]
     98a:	f7ff fca3 	bl	2d4 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     98e:	4b33      	ldr	r3, [pc, #204]	; (a5c <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	4a33      	ldr	r2, [pc, #204]	; (a60 <system_init+0x184>)
     992:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	4b33      	ldr	r3, [pc, #204]	; (a64 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     996:	4d34      	ldr	r5, [pc, #208]	; (a68 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     998:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     99a:	4b34      	ldr	r3, [pc, #208]	; (a6c <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     99c:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     99e:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     9a0:	682b      	ldr	r3, [r5, #0]
     9a2:	691b      	ldr	r3, [r3, #16]
     9a4:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     9a6:	f000 fb99 	bl	10dc <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     9aa:	682b      	ldr	r3, [r5, #0]
     9ac:	2010      	movs	r0, #16
     9ae:	691b      	ldr	r3, [r3, #16]
     9b0:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b2:	2002      	movs	r0, #2
     9b4:	f7ff fca4 	bl	300 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	68ab      	ldr	r3, [r5, #8]
     9ba:	f44f 7000 	mov.w	r0, #512	; 0x200
     9be:	69db      	ldr	r3, [r3, #28]
     9c0:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c2:	68ab      	ldr	r3, [r5, #8]
     9c4:	f44f 7000 	mov.w	r0, #512	; 0x200
     9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     9ca:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	68ab      	ldr	r3, [r5, #8]
     9ce:	f44f 7000 	mov.w	r0, #512	; 0x200
     9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9d4:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     9d6:	2260      	movs	r2, #96	; 0x60
     9d8:	4b25      	ldr	r3, [pc, #148]	; (a70 <system_init+0x194>)
     9da:	6026      	str	r6, [r4, #0]
     9dc:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     9de:	f7ff fde7 	bl	5b0 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     9e2:	f000 fdcb 	bl	157c <ee_open>
     9e6:	f000 fdd3 	bl	1590 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ea:	f001 ff63 	bl	28b4 <NOROM_SysCtrlResetSourceGet>
     9ee:	2808      	cmp	r0, #8
     9f0:	d11a      	bne.n	a28 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     9f2:	4b20      	ldr	r3, [pc, #128]	; (a74 <system_init+0x198>)
     9f4:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     9fa:	3b04      	subs	r3, #4
     9fc:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     a02:	3324      	adds	r3, #36	; 0x24
     a04:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     a06:	2000      	movs	r0, #0
     a08:	f7ff fc48 	bl	29c <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	4a1a      	ldr	r2, [pc, #104]	; (a78 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     a0e:	2015      	movs	r0, #21
     a10:	6813      	ldr	r3, [r2, #0]
     a12:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     a16:	6013      	str	r3, [r2, #0]
     a18:	4b13      	ldr	r3, [pc, #76]	; (a68 <system_init+0x18c>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	691b      	ldr	r3, [r3, #16]
     a1e:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     a20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     a24:	f7ff bcd4 	b.w	3d0 <tci_run_auxiliary_timer>
		diag ("");
     a28:	4814      	ldr	r0, [pc, #80]	; (a7c <system_init+0x1a0>)
     a2a:	f000 fc45 	bl	12b8 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2e:	4814      	ldr	r0, [pc, #80]	; (a80 <system_init+0x1a4>)
     a30:	f000 fc42 	bl	12b8 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	4913      	ldr	r1, [pc, #76]	; (a84 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     a36:	4814      	ldr	r0, [pc, #80]	; (a88 <system_init+0x1ac>)
     a38:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     a3c:	b289      	uxth	r1, r1
     a3e:	f000 fc3b 	bl	12b8 <diag>
     a42:	e7e0      	b.n	a06 <system_init+0x12a>
     a44:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     a48:	60082028 	andvs	r2, r8, r8, lsr #32
     a4c:	00002c04 	andeq	r2, r0, r4, lsl #24
     a50:	40022090 	mulmi	r2, r0, r0
     a54:	2000009c 	mulcs	r0, ip, r0
     a58:	400220a0 	andmi	r2, r2, r0, lsr #1
     a5c:	40092024 	andmi	r2, r9, r4, lsr #32
     a60:	00050003 	andeq	r0, r5, r3
     a64:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     a68:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     a6c:	40092000 	andmi	r2, r9, r0
     a70:	20000018 	andcs	r0, r0, r8, lsl r0
     a74:	4009400c 	andmi	r4, r9, ip
     a78:	40001038 	andmi	r1, r0, r8, lsr r0
     a7c:	00002b67 	andeq	r2, r0, r7, ror #22
     a80:	00002b9b 	muleq	r0, fp, fp
     a84:	200000bc 	strhcs	r0, [r0], -ip
     a88:	00002be7 	andeq	r2, r0, r7, ror #23
     a8c:	7f077f3f 	svcvc	0x00077f3f
     a90:	42441a00 	submi	r1, r4, #0, 20

00000a94 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     a94:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     a98:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9a:	4b79      	ldr	r3, [pc, #484]	; (c80 <__pi_release+0x1ec>)
     a9c:	af00      	add	r7, sp, #0
     a9e:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     aa2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     aa6:	681a      	ldr	r2, [r3, #0]
     aa8:	4b76      	ldr	r3, [pc, #472]	; (c84 <__pi_release+0x1f0>)
     aaa:	429a      	cmp	r2, r3
     aac:	d127      	bne.n	afe <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     aae:	4e76      	ldr	r6, [pc, #472]	; (c88 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     ab0:	2100      	movs	r1, #0
     ab2:	f64f 70ff 	movw	r0, #65535	; 0xffff
     ab6:	f000 f9bb 	bl	e30 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     aba:	4a74      	ldr	r2, [pc, #464]	; (c8c <__pi_release+0x1f8>)
     abc:	4b74      	ldr	r3, [pc, #464]	; (c90 <__pi_release+0x1fc>)
     abe:	6812      	ldr	r2, [r2, #0]
     ac0:	601a      	str	r2, [r3, #0]
     ac2:	681a      	ldr	r2, [r3, #0]
     ac4:	b9fa      	cbnz	r2, b06 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ac6:	4c73      	ldr	r4, [pc, #460]	; (c94 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     aca:	4d73      	ldr	r5, [pc, #460]	; (c98 <__pi_release+0x204>)
     acc:	782b      	ldrb	r3, [r5, #0]
     ace:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ad2:	0798      	lsls	r0, r3, #30
     ad4:	607a      	str	r2, [r7, #4]
     ad6:	f100 80cd 	bmi.w	c74 <__pi_release+0x1e0>
	system_event_count ++;
     ada:	4a70      	ldr	r2, [pc, #448]	; (c9c <__pi_release+0x208>)
     adc:	6813      	ldr	r3, [r2, #0]
     ade:	3301      	adds	r3, #1
     ae0:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     ae2:	78ea      	ldrb	r2, [r5, #3]
     ae4:	2a01      	cmp	r2, #1
     ae6:	b2d3      	uxtb	r3, r2
     ae8:	d017      	beq.n	b1a <__pi_release+0x86>
     aea:	2b02      	cmp	r3, #2
     aec:	d031      	beq.n	b52 <__pi_release+0xbe>
     aee:	2b00      	cmp	r3, #0
     af0:	f040 8095 	bne.w	c1e <__pi_release+0x18a>
			__WFI ();
     af4:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     af6:	b662      	cpsie	i
     af8:	bf00      	nop
     afa:	bf00      	nop
     afc:	e7e4      	b.n	ac8 <__pi_release+0x34>
	check_stack_overflow;
     afe:	200b      	movs	r0, #11
     b00:	4967      	ldr	r1, [pc, #412]	; (ca0 <__pi_release+0x20c>)
     b02:	f7ff fc1b 	bl	33c <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b06:	6851      	ldr	r1, [r2, #4]
     b08:	b129      	cbz	r1, b16 <__pi_release+0x82>
     b0a:	8810      	ldrh	r0, [r2, #0]
     b0c:	0704      	lsls	r4, r0, #28
     b0e:	d102      	bne.n	b16 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	0900      	lsrs	r0, r0, #4
     b12:	4788      	blx	r1
			goto Redo;
     b14:	e7cc      	b.n	ab0 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     b18:	e7d2      	b.n	ac0 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1a:	4a62      	ldr	r2, [pc, #392]	; (ca4 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1e:	6813      	ldr	r3, [r2, #0]
     b20:	f043 0301 	orr.w	r3, r3, #1
     b24:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b26:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     b2a:	f043 0303 	orr.w	r3, r3, #3
     b2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b32:	4b5d      	ldr	r3, [pc, #372]	; (ca8 <__pi_release+0x214>)
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	699b      	ldr	r3, [r3, #24]
     b38:	4798      	blx	r3
     b3a:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b3c:	6823      	ldr	r3, [r4, #0]
     b3e:	f043 0304 	orr.w	r3, r3, #4
     b42:	6023      	str	r3, [r4, #0]
			__WFI ();
     b44:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b46:	6823      	ldr	r3, [r4, #0]
     b48:	f023 0304 	bic.w	r3, r3, #4
     b4c:	6023      	str	r3, [r4, #0]
     b4e:	6833      	ldr	r3, [r6, #0]
}
     b50:	e7d1      	b.n	af6 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b52:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b56:	687a      	ldr	r2, [r7, #4]
     b58:	4b54      	ldr	r3, [pc, #336]	; (cac <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5a:	f8df b188 	ldr.w	fp, [pc, #392]	; ce4 <__pi_release+0x250>
     b5e:	601a      	str	r2, [r3, #0]
     b60:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b62:	f8df a144 	ldr.w	sl, [pc, #324]	; ca8 <__pi_release+0x214>
     b66:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b6a:	6833      	ldr	r3, [r6, #0]
     b6c:	4b50      	ldr	r3, [pc, #320]	; (cb0 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; ce8 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b72:	f8c3 8000 	str.w	r8, [r3]
     b76:	6868      	ldr	r0, [r5, #4]
     b78:	f8da 3000 	ldr.w	r3, [sl]
     b7c:	f040 0020 	orr.w	r0, r0, #32
     b80:	699b      	ldr	r3, [r3, #24]
     b82:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	4b4b      	ldr	r3, [pc, #300]	; (cb4 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b86:	2103      	movs	r1, #3
     b88:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	f8d9 3000 	ldr.w	r3, [r9]
     b90:	4849      	ldr	r0, [pc, #292]	; (cb8 <__pi_release+0x224>)
     b92:	f023 0303 	bic.w	r3, r3, #3
     b96:	f8c9 3000 	str.w	r3, [r9]
     b9a:	4b48      	ldr	r3, [pc, #288]	; (cbc <__pi_release+0x228>)
     b9c:	681a      	ldr	r2, [r3, #0]
     b9e:	6852      	ldr	r2, [r2, #4]
     ba0:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     ba2:	6878      	ldr	r0, [r7, #4]
     ba4:	f001 fd46 	bl	2634 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     ba8:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     baa:	6822      	ldr	r2, [r4, #0]
     bac:	f042 0204 	orr.w	r2, r2, #4
     bb0:	6022      	str	r2, [r4, #0]
			__WFI ();
     bb2:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb6:	4b41      	ldr	r3, [pc, #260]	; (cbc <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb8:	f022 0204 	bic.w	r2, r2, #4
     bbc:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	4641      	mov	r1, r8
     bc2:	685b      	ldr	r3, [r3, #4]
     bc4:	483c      	ldr	r0, [pc, #240]	; (cb8 <__pi_release+0x224>)
     bc6:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	4a3c      	ldr	r2, [pc, #240]	; (cc0 <__pi_release+0x22c>)
     bce:	f043 0303 	orr.w	r3, r3, #3
     bd2:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd6:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bda:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     bdc:	0699      	lsls	r1, r3, #26
     bde:	d5fc      	bpl.n	bda <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	f8da 3000 	ldr.w	r3, [sl]
     be4:	6868      	ldr	r0, [r5, #4]
     be6:	695b      	ldr	r3, [r3, #20]
     be8:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bea:	4d2f      	ldr	r5, [pc, #188]	; (ca8 <__pi_release+0x214>)
     bec:	4b2a      	ldr	r3, [pc, #168]	; (c98 <__pi_release+0x204>)
     bee:	6858      	ldr	r0, [r3, #4]
     bf0:	682b      	ldr	r3, [r5, #0]
     bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     bf4:	4798      	blx	r3
     bf6:	2801      	cmp	r0, #1
     bf8:	d1f8      	bne.n	bec <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     bfa:	4b2d      	ldr	r3, [pc, #180]	; (cb0 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	4a2d      	ldr	r2, [pc, #180]	; (cb4 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     bfe:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c00:	2300      	movs	r3, #0
     c02:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	4b29      	ldr	r3, [pc, #164]	; (cac <__pi_release+0x218>)
     c06:	6018      	str	r0, [r3, #0]
     c08:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0a:	f001 fe23 	bl	2854 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     c0e:	f7ff fccf 	bl	5b0 <reinit_uart>
     c12:	4a2c      	ldr	r2, [pc, #176]	; (cc4 <__pi_release+0x230>)
     c14:	6813      	ldr	r3, [r2, #0]
     c16:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     c1a:	6013      	str	r3, [r2, #0]
}
     c1c:	e76b      	b.n	af6 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1e:	4b2a      	ldr	r3, [pc, #168]	; (cc8 <__pi_release+0x234>)
     c20:	2001      	movs	r0, #1
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	68db      	ldr	r3, [r3, #12]
     c26:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	4a28      	ldr	r2, [pc, #160]	; (ccc <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c2a:	4929      	ldr	r1, [pc, #164]	; (cd0 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c2c:	6813      	ldr	r3, [r2, #0]
     c2e:	f023 0301 	bic.w	r3, r3, #1
     c32:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	4b27      	ldr	r3, [pc, #156]	; (cd4 <__pi_release+0x240>)
     c36:	681a      	ldr	r2, [r3, #0]
     c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     c3c:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3e:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     c42:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	604a      	str	r2, [r1, #4]
     c46:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	687a      	ldr	r2, [r7, #4]
     c4a:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	687a      	ldr	r2, [r7, #4]
     c4e:	4b22      	ldr	r3, [pc, #136]	; (cd8 <__pi_release+0x244>)
     c50:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c52:	2201      	movs	r2, #1
     c54:	4b21      	ldr	r3, [pc, #132]	; (cdc <__pi_release+0x248>)
     c56:	601a      	str	r2, [r3, #0]
     c58:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5a:	4a19      	ldr	r2, [pc, #100]	; (cc0 <__pi_release+0x22c>)
     c5c:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5e:	069b      	lsls	r3, r3, #26
     c60:	d4fc      	bmi.n	c5c <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c62:	2201      	movs	r2, #1
     c64:	4b1e      	ldr	r3, [pc, #120]	; (ce0 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     c66:	2037      	movs	r0, #55	; 0x37
     c68:	601a      	str	r2, [r3, #0]
     c6a:	4b0f      	ldr	r3, [pc, #60]	; (ca8 <__pi_release+0x214>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	699b      	ldr	r3, [r3, #24]
     c70:	4798      	blx	r3
			goto DeepSleep;
     c72:	e763      	b.n	b3c <__pi_release+0xa8>
	__SLEEP;
     c74:	782b      	ldrb	r3, [r5, #0]
     c76:	f36f 0341 	bfc	r3, #1, #1
     c7a:	702b      	strb	r3, [r5, #0]
     c7c:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     c7e:	e717      	b.n	ab0 <__pi_release+0x1c>
     c80:	20005000 	andcs	r5, r0, r0
     c84:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     c88:	4009202c 	andmi	r2, r9, ip, lsr #32
     c8c:	2000001c 	andcs	r0, r0, ip, lsl r0
     c90:	200000b8 	strhcs	r0, [r0], -r8
     c94:	e000ed10 	and	lr, r0, r0, lsl sp
     c98:	2000009c 	mulcs	r0, ip, r0
     c9c:	20000090 	mulcs	r0, r0, r0
     ca0:	00002bfe 	strdeq	r2, [r0], -lr
     ca4:	4008218c 	andmi	r2, r8, ip, lsl #3
     ca8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     cac:	4009400c 	andmi	r4, r9, ip
     cb0:	60082028 	andvs	r2, r8, r8, lsr #32
     cb4:	43040180 	movwmi	r0, #16768	; 0x4180
     cb8:	40034000 	andmi	r4, r3, r0
     cbc:	100001d8 	ldrdne	r0, [r0], -r8
     cc0:	40091014 	andmi	r1, r9, r4, lsl r0
     cc4:	40001038 	andmi	r1, r0, r8, lsr r0
     cc8:	100001a0 	andne	r0, r0, r0, lsr #3
     ccc:	40091010 	andmi	r1, r9, r0, lsl r0
     cd0:	40093000 	andmi	r3, r9, r0
     cd4:	40091040 	andmi	r1, r9, r0, asr #32
     cd8:	43220420 			; <UNDEFINED> instruction: 0x43220420
     cdc:	40091018 	andmi	r1, r9, r8, lsl r0
     ce0:	43040188 	movwmi	r0, #16776	; 0x4188
     ce4:	43220200 			; <UNDEFINED> instruction: 0x43220200
     ce8:	40082224 	andmi	r2, r8, r4, lsr #4

00000cec <main>:

#include "scheduler.h"

}

int main (void) {
     cec:	b510      	push	{r4, lr}
     cee:	4b11      	ldr	r3, [pc, #68]	; (d34 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	4911      	ldr	r1, [pc, #68]	; (d38 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf2:	4a12      	ldr	r2, [pc, #72]	; (d3c <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf4:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	4293      	cmp	r3, r2
     cfa:	d1fb      	bne.n	cf4 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	4c10      	ldr	r4, [pc, #64]	; (d40 <main+0x54>)
	system_init ();
     cfe:	f7ff fded 	bl	8dc <system_init>
	tcv_init ();
     d02:	f000 fb77 	bl	13f4 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d06:	6823      	ldr	r3, [r4, #0]
     d08:	2129      	movs	r1, #41	; 0x29
     d0a:	2000      	movs	r0, #0
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	6823      	ldr	r3, [r4, #0]
     d12:	2120      	movs	r1, #32
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	2001      	movs	r0, #1
     d18:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1a:	2100      	movs	r1, #0
     d1c:	4809      	ldr	r0, [pc, #36]	; (d44 <main+0x58>)
     d1e:	f000 faa5 	bl	126c <__pi_fork>
     d22:	4b09      	ldr	r3, [pc, #36]	; (d48 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     d24:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d26:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     d28:	2010      	movs	r0, #16
     d2a:	f000 f937 	bl	f9c <delay>
     d2e:	b662      	cpsie	i

	sti;

	__pi_release ();
     d30:	f7ff feb0 	bl	a94 <__pi_release>
     d34:	20004bfc 	strdcs	r4, [r0], -ip
     d38:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     d3c:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     d40:	10000184 	andne	r0, r0, r4, lsl #3
     d44:	00000171 	andeq	r0, r0, r1, ror r1
     d48:	200000b8 	strhcs	r0, [r0], -r8

00000d4c <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     d4c:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     d4e:	4b0d      	ldr	r3, [pc, #52]	; (d84 <killev+0x38>)
	wfun = (aword)(pid->code);
     d50:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     d52:	681a      	ldr	r2, [r3, #0]
     d54:	b1aa      	cbz	r2, d82 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     d56:	4614      	mov	r4, r2
     d58:	f834 1b10 	ldrh.w	r1, [r4], #16
     d5c:	2300      	movs	r3, #0
     d5e:	f001 0107 	and.w	r1, r1, #7
     d62:	e001      	b.n	d68 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     d64:	42b5      	cmp	r5, r6
     d66:	d006      	beq.n	d76 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     d68:	4299      	cmp	r1, r3
     d6a:	dd08      	ble.n	d7e <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     d6c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     d70:	3301      	adds	r3, #1
     d72:	42a8      	cmp	r0, r5
     d74:	d1f6      	bne.n	d64 <killev+0x18>
			    ) {
				wakeupev (i, j);
     d76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     d7a:	889b      	ldrh	r3, [r3, #4]
     d7c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     d7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     d80:	e7e8      	b.n	d54 <killev+0x8>
				break;
			}
		}
	}
}
     d82:	bd70      	pop	{r4, r5, r6, pc}
     d84:	2000001c 	andcs	r0, r0, ip, lsl r0

00000d88 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	4a1d      	ldr	r2, [pc, #116]	; (e00 <qfree+0x78>)
static void qfree (aword *ch) {
     d8a:	b530      	push	{r4, r5, lr}
     d8c:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8e:	6813      	ldr	r3, [r2, #0]
     d90:	b93b      	cbnz	r3, da2 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     d92:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     d94:	4a1a      	ldr	r2, [pc, #104]	; (e00 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     d96:	bb53      	cbnz	r3, dee <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     d98:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     d9a:	4b1a      	ldr	r3, [pc, #104]	; (e04 <qfree+0x7c>)
	m_setnextp (cc, ch);
     d9c:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     d9e:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     da0:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da2:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     da6:	3101      	adds	r1, #1
     da8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     dac:	4288      	cmp	r0, r1
     dae:	d10b      	bne.n	dc8 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     db0:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     db2:	f850 0c04 	ldr.w	r0, [r0, #-4]
     db6:	f853 1c04 	ldr.w	r1, [r3, #-4]
     dba:	4401      	add	r1, r0
     dbc:	4618      	mov	r0, r3
     dbe:	3101      	adds	r1, #1
     dc0:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	e7e3      	b.n	d90 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	f850 1c04 	ldr.w	r1, [r0, #-4]
     dcc:	3101      	adds	r1, #1
     dce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     dd2:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     dd4:	bf03      	ittte	eq
     dd6:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     ddc:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     de0:	461a      	movne	r2, r3
     de2:	bf02      	ittt	eq
     de4:	1949      	addeq	r1, r1, r5
     de6:	3101      	addeq	r1, #1
     de8:	f840 1c04 	streq.w	r1, [r0, #-4]
     dec:	e7ea      	b.n	dc4 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     dee:	f853 4c04 	ldr.w	r4, [r3, #-4]
     df2:	f850 1c04 	ldr.w	r1, [r0, #-4]
     df6:	428c      	cmp	r4, r1
     df8:	d2ce      	bcs.n	d98 <qfree+0x10>
		chunk = m_nextp (chunk))
     dfa:	461a      	mov	r2, r3
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	e7ca      	b.n	d96 <qfree+0xe>
     e00:	20000030 	andcs	r0, r0, r0, lsr r0
     e04:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000e08 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	4a03      	ldr	r2, [pc, #12]	; (e18 <dgout+0x10>)
     e0a:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     e0c:	071b      	lsls	r3, r3, #28
     e0e:	d4fc      	bmi.n	e0a <dgout+0x2>
	diag_wchar (c, a);
     e10:	4b02      	ldr	r3, [pc, #8]	; (e1c <dgout+0x14>)
     e12:	b2c0      	uxtb	r0, r0
     e14:	6018      	str	r0, [r3, #0]
}
     e16:	4770      	bx	lr
     e18:	40001018 	andmi	r1, r0, r8, lsl r0
     e1c:	40001000 	andmi	r1, r0, r0

00000e20 <__pi_badstate>:
	syserror (ESTATE, "state");
     e20:	2007      	movs	r0, #7
void __pi_badstate (void) {
     e22:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     e24:	4901      	ldr	r1, [pc, #4]	; (e2c <__pi_badstate+0xc>)
     e26:	f7ff fa89 	bl	33c <__pi_syserror>
     e2a:	bf00      	nop
     e2c:	00002c48 	andeq	r2, r0, r8, asr #24

00000e30 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e32:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	4608      	mov	r0, r1
     e36:	f7ff fb69 	bl	50c <tci_update_delay_ticks>
     e3a:	2800      	cmp	r0, #0
     e3c:	d154      	bne.n	ee8 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3e:	4b2b      	ldr	r3, [pc, #172]	; (eec <update_n_wake+0xbc>)
     e40:	4d2b      	ldr	r5, [pc, #172]	; (ef0 <update_n_wake+0xc0>)
     e42:	8819      	ldrh	r1, [r3, #0]
     e44:	882a      	ldrh	r2, [r5, #0]
     e46:	b289      	uxth	r1, r1
     e48:	428a      	cmp	r2, r1
     e4a:	492a      	ldr	r1, [pc, #168]	; (ef4 <update_n_wake+0xc4>)
     e4c:	d803      	bhi.n	e56 <update_n_wake+0x26>
     e4e:	8808      	ldrh	r0, [r1, #0]
     e50:	b280      	uxth	r0, r0
     e52:	4282      	cmp	r2, r0
     e54:	d20d      	bcs.n	e72 <update_n_wake+0x42>
     e56:	881e      	ldrh	r6, [r3, #0]
     e58:	8808      	ldrh	r0, [r1, #0]
     e5a:	b2b6      	uxth	r6, r6
     e5c:	b280      	uxth	r0, r0
     e5e:	4286      	cmp	r6, r0
     e60:	d236      	bcs.n	ed0 <update_n_wake+0xa0>
     e62:	8818      	ldrh	r0, [r3, #0]
     e64:	b280      	uxth	r0, r0
     e66:	4282      	cmp	r2, r0
     e68:	d903      	bls.n	e72 <update_n_wake+0x42>
     e6a:	8808      	ldrh	r0, [r1, #0]
     e6c:	b280      	uxth	r0, r0
     e6e:	4282      	cmp	r2, r0
     e70:	d32e      	bcc.n	ed0 <update_n_wake+0xa0>
		for_all_tasks (i) {
     e72:	4a21      	ldr	r2, [pc, #132]	; (ef8 <update_n_wake+0xc8>)
     e74:	6810      	ldr	r0, [r2, #0]
     e76:	b918      	cbnz	r0, e80 <update_n_wake+0x50>
	__pi_mintk = znew + min;
     e78:	8818      	ldrh	r0, [r3, #0]
     e7a:	4404      	add	r4, r0
     e7c:	802c      	strh	r4, [r5, #0]
     e7e:	e02c      	b.n	eda <update_n_wake+0xaa>
			if (!twaiting (i))
     e80:	8806      	ldrh	r6, [r0, #0]
     e82:	0732      	lsls	r2, r6, #28
     e84:	d51b      	bpl.n	ebe <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e86:	881f      	ldrh	r7, [r3, #0]
     e88:	8842      	ldrh	r2, [r0, #2]
     e8a:	b2bf      	uxth	r7, r7
     e8c:	42ba      	cmp	r2, r7
     e8e:	d803      	bhi.n	e98 <update_n_wake+0x68>
     e90:	880f      	ldrh	r7, [r1, #0]
     e92:	b2bf      	uxth	r7, r7
     e94:	42ba      	cmp	r2, r7
     e96:	d20f      	bcs.n	eb8 <update_n_wake+0x88>
     e98:	f8b3 c000 	ldrh.w	ip, [r3]
     e9c:	880f      	ldrh	r7, [r1, #0]
     e9e:	fa1f fc8c 	uxth.w	ip, ip
     ea2:	b2bf      	uxth	r7, r7
     ea4:	45bc      	cmp	ip, r7
     ea6:	d20c      	bcs.n	ec2 <update_n_wake+0x92>
     ea8:	881f      	ldrh	r7, [r3, #0]
     eaa:	b2bf      	uxth	r7, r7
     eac:	42ba      	cmp	r2, r7
     eae:	d903      	bls.n	eb8 <update_n_wake+0x88>
     eb0:	880f      	ldrh	r7, [r1, #0]
     eb2:	b2bf      	uxth	r7, r7
     eb4:	42ba      	cmp	r2, r7
     eb6:	d304      	bcc.n	ec2 <update_n_wake+0x92>
				wakeuptm (i);
     eb8:	f026 060f 	bic.w	r6, r6, #15
     ebc:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
     ebe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     ec0:	e7d9      	b.n	e76 <update_n_wake+0x46>
				d = i->Timer - znew;
     ec2:	881e      	ldrh	r6, [r3, #0]
     ec4:	1b92      	subs	r2, r2, r6
     ec6:	b292      	uxth	r2, r2
     ec8:	4294      	cmp	r4, r2
     eca:	bf28      	it	cs
     ecc:	4614      	movcs	r4, r2
     ece:	e7f6      	b.n	ebe <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	8818      	ldrh	r0, [r3, #0]
     ed2:	1a12      	subs	r2, r2, r0
     ed4:	b292      	uxth	r2, r2
     ed6:	4294      	cmp	r4, r2
     ed8:	d9ce      	bls.n	e78 <update_n_wake+0x48>
	__pi_old = znew;
     eda:	881b      	ldrh	r3, [r3, #0]
     edc:	b29b      	uxth	r3, r3
     ede:	800b      	strh	r3, [r1, #0]
}
     ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
     ee4:	f7ff ba54 	b.w	390 <tci_run_delay_timer>
}
     ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eea:	bf00      	nop
     eec:	200000a4 	andcs	r0, r0, r4, lsr #1
     ef0:	20000098 	mulcs	r0, r8, r0
     ef4:	2000009a 	mulcs	r0, sl, r0
     ef8:	2000001c 	andcs	r0, r0, ip, lsl r0

00000efc <proceed>:
void proceed (word state) {
     efc:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
     efe:	4b03      	ldr	r3, [pc, #12]	; (f0c <proceed+0x10>)
     f00:	0100      	lsls	r0, r0, #4
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	8018      	strh	r0, [r3, #0]
	release;
     f06:	f7ff fdc5 	bl	a94 <__pi_release>
     f0a:	bf00      	nop
     f0c:	200000b8 	strhcs	r0, [r0], -r8

00000f10 <__pi_wait>:
void __pi_wait (aword event, word state) {
     f10:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
     f12:	4b0a      	ldr	r3, [pc, #40]	; (f3c <__pi_wait+0x2c>)
     f14:	681c      	ldr	r4, [r3, #0]
     f16:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
     f18:	f013 0f04 	tst.w	r3, #4
     f1c:	f003 0207 	and.w	r2, r3, #7
     f20:	d003      	beq.n	f2a <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
     f22:	2005      	movs	r0, #5
     f24:	4906      	ldr	r1, [pc, #24]	; (f40 <__pi_wait+0x30>)
     f26:	f7ff fa09 	bl	33c <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
     f2a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     f2e:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
     f30:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
     f32:	8191      	strh	r1, [r2, #12]
     f34:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
     f36:	8023      	strh	r3, [r4, #0]
}
     f38:	bd10      	pop	{r4, pc}
     f3a:	bf00      	nop
     f3c:	200000b8 	strhcs	r0, [r0], -r8
     f40:	00002c4e 	andeq	r2, r0, lr, asr #24

00000f44 <__pi_trigger>:
void __pi_trigger (aword event) {
     f44:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
     f46:	4b0b      	ldr	r3, [pc, #44]	; (f74 <__pi_trigger+0x30>)
     f48:	681a      	ldr	r2, [r3, #0]
     f4a:	b192      	cbz	r2, f72 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
     f4c:	4614      	mov	r4, r2
     f4e:	2300      	movs	r3, #0
     f50:	f834 1b10 	ldrh.w	r1, [r4], #16
     f54:	f001 0107 	and.w	r1, r1, #7
     f58:	4299      	cmp	r1, r3
     f5a:	dd08      	ble.n	f6e <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
     f5c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f60:	3301      	adds	r3, #1
     f62:	4285      	cmp	r5, r0
     f64:	d1f8      	bne.n	f58 <__pi_trigger+0x14>
				wakeupev (i, j);
     f66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f6a:	889b      	ldrh	r3, [r3, #4]
     f6c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f70:	e7eb      	b.n	f4a <__pi_trigger+0x6>
}
     f72:	bd30      	pop	{r4, r5, pc}
     f74:	2000001c 	andcs	r0, r0, ip, lsl r0

00000f78 <__pi_join>:
aword __pi_join (aword pid, word st) {
     f78:	b510      	push	{r4, lr}
     f7a:	4604      	mov	r4, r0
	for_all_tasks (i) {
     f7c:	4b06      	ldr	r3, [pc, #24]	; (f98 <__pi_join+0x20>)
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	b90b      	cbnz	r3, f86 <__pi_join+0xe>
	return 0;
     f82:	461c      	mov	r4, r3
     f84:	e004      	b.n	f90 <__pi_join+0x18>
		if ((aword)i == pid) {
     f86:	42a3      	cmp	r3, r4
     f88:	d104      	bne.n	f94 <__pi_join+0x1c>
			__pi_wait (pid, st);
     f8a:	4620      	mov	r0, r4
     f8c:	f7ff ffc0 	bl	f10 <__pi_wait>
}
     f90:	4620      	mov	r0, r4
     f92:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
     f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f96:	e7f3      	b.n	f80 <__pi_join+0x8>
     f98:	2000001c 	andcs	r0, r0, ip, lsl r0

00000f9c <delay>:
void delay (word d, word state) {
     f9c:	b538      	push	{r3, r4, r5, lr}
     f9e:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
     fa0:	4d0a      	ldr	r5, [pc, #40]	; (fcc <delay+0x30>)
     fa2:	682a      	ldr	r2, [r5, #0]
     fa4:	8813      	ldrh	r3, [r2, #0]
     fa6:	f003 0307 	and.w	r3, r3, #7
     faa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     fae:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
     fb0:	2101      	movs	r1, #1
     fb2:	f7ff ff3d 	bl	e30 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
     fb6:	4b06      	ldr	r3, [pc, #24]	; (fd0 <delay+0x34>)
     fb8:	8818      	ldrh	r0, [r3, #0]
     fba:	682b      	ldr	r3, [r5, #0]
     fbc:	4404      	add	r4, r0
     fbe:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
     fc0:	682a      	ldr	r2, [r5, #0]
     fc2:	8813      	ldrh	r3, [r2, #0]
     fc4:	f043 0308 	orr.w	r3, r3, #8
     fc8:	8013      	strh	r3, [r2, #0]
}
     fca:	bd38      	pop	{r3, r4, r5, pc}
     fcc:	200000b8 	strhcs	r0, [r0], -r8
     fd0:	2000009a 	mulcs	r0, sl, r0

00000fd4 <running>:
	if (fun == NULL)
     fd4:	4603      	mov	r3, r0
     fd6:	b910      	cbnz	r0, fde <running+0xa>
		return (int) __pi_curr;
     fd8:	4b05      	ldr	r3, [pc, #20]	; (ff0 <running+0x1c>)
     fda:	6818      	ldr	r0, [r3, #0]
     fdc:	4770      	bx	lr
	for_all_tasks (i)
     fde:	4a05      	ldr	r2, [pc, #20]	; (ff4 <running+0x20>)
     fe0:	6810      	ldr	r0, [r2, #0]
     fe2:	b900      	cbnz	r0, fe6 <running+0x12>
}
     fe4:	4770      	bx	lr
		if (i->code == fun)
     fe6:	6842      	ldr	r2, [r0, #4]
     fe8:	429a      	cmp	r2, r3
     fea:	d0fb      	beq.n	fe4 <running+0x10>
	for_all_tasks (i)
     fec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     fee:	e7f8      	b.n	fe2 <running+0xe>
     ff0:	200000b8 	strhcs	r0, [r0], -r8
     ff4:	2000001c 	andcs	r0, r0, ip, lsl r0

00000ff8 <__pi_strlen>:
int __pi_strlen (const char *s) {
     ff8:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
     ffa:	2000      	movs	r0, #0
     ffc:	5c1a      	ldrb	r2, [r3, r0]
     ffe:	b902      	cbnz	r2, 1002 <__pi_strlen+0xa>
}
    1000:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1002:	3001      	adds	r0, #1
    1004:	e7fa      	b.n	ffc <__pi_strlen+0x4>

00001006 <__pi_memcpy>:
	while (n--)
    1006:	3801      	subs	r0, #1
    1008:	440a      	add	r2, r1
    100a:	4291      	cmp	r1, r2
    100c:	d100      	bne.n	1010 <__pi_memcpy+0xa>
}
    100e:	4770      	bx	lr
		*dest++ = *src++;
    1010:	f811 3b01 	ldrb.w	r3, [r1], #1
    1014:	f800 3f01 	strb.w	r3, [r0, #1]!
    1018:	e7f7      	b.n	100a <__pi_memcpy+0x4>
	...

0000101c <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    101e:	b119      	cbz	r1, 1028 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1020:	2003      	movs	r0, #3
    1022:	4905      	ldr	r1, [pc, #20]	; (1038 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1024:	f7ff f98a 	bl	33c <__pi_syserror>
	if (ioreq [loc] != NULL)
    1028:	4b04      	ldr	r3, [pc, #16]	; (103c <adddevfunc+0x20>)
    102a:	681a      	ldr	r2, [r3, #0]
    102c:	b112      	cbz	r2, 1034 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    102e:	2004      	movs	r0, #4
    1030:	4901      	ldr	r1, [pc, #4]	; (1038 <adddevfunc+0x1c>)
    1032:	e7f7      	b.n	1024 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1034:	6018      	str	r0, [r3, #0]
}
    1036:	bd08      	pop	{r3, pc}
    1038:	00002c51 	andeq	r2, r0, r1, asr ip
    103c:	20000020 	andcs	r0, r0, r0, lsr #32

00001040 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1044:	4604      	mov	r4, r0
    1046:	4616      	mov	r6, r2
    1048:	461d      	mov	r5, r3
    104a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104e:	b921      	cbnz	r1, 105a <io+0x1a>
    1050:	f8df 9084 	ldr.w	r9, [pc, #132]	; 10d8 <io+0x98>
    1054:	f8d9 3000 	ldr.w	r3, [r9]
    1058:	b91b      	cbnz	r3, 1062 <io+0x22>
		syserror (ENODEVICE, "io");
    105a:	2001      	movs	r0, #1
    105c:	491d      	ldr	r1, [pc, #116]	; (10d4 <io+0x94>)
    105e:	f7ff f96d 	bl	33c <__pi_syserror>
	if (len == 0)
    1062:	f1b8 0f00 	cmp.w	r8, #0
    1066:	d028      	beq.n	10ba <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	4642      	mov	r2, r8
    106a:	4629      	mov	r1, r5
    106c:	4630      	mov	r0, r6
    106e:	4798      	blx	r3
	if (ret >= 0)
    1070:	2800      	cmp	r0, #0
    1072:	da23      	bge.n	10bc <io+0x7c>
	if (ret == -1) {
    1074:	1c41      	adds	r1, r0, #1
    1076:	f64f 73ff 	movw	r3, #65535	; 0xffff
    107a:	d108      	bne.n	108e <io+0x4e>
		if (retry == WNONE)
    107c:	429c      	cmp	r4, r3
    107e:	d01c      	beq.n	10ba <io+0x7a>
		iowait (dev, operation, retry);
    1080:	4621      	mov	r1, r4
    1082:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1086:	f7ff ff43 	bl	f10 <__pi_wait>
			release;
    108a:	f7ff fd03 	bl	a94 <__pi_release>
	if (ret == -2) {
    108e:	1c82      	adds	r2, r0, #2
    1090:	d116      	bne.n	10c0 <io+0x80>
		if (retry != WNONE) {
    1092:	429c      	cmp	r4, r3
    1094:	f8d9 9000 	ldr.w	r9, [r9]
    1098:	d00a      	beq.n	10b0 <io+0x70>
			iowait (dev, operation, retry);
    109a:	4621      	mov	r1, r4
    109c:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    10a0:	f7ff ff36 	bl	f10 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    10a4:	4642      	mov	r2, r8
    10a6:	4629      	mov	r1, r5
    10a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10ac:	47c8      	blx	r9
    10ae:	e7ec      	b.n	108a <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    10b0:	4642      	mov	r2, r8
    10b2:	4629      	mov	r1, r5
    10b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10b8:	47c8      	blx	r9
		return 0;
    10ba:	2000      	movs	r0, #0
}
    10bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    10c0:	429c      	cmp	r4, r3
    10c2:	d0fa      	beq.n	10ba <io+0x7a>
		delay (-ret - 2, retry);
    10c4:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    10c8:	30fe      	adds	r0, #254	; 0xfe
    10ca:	4621      	mov	r1, r4
    10cc:	b280      	uxth	r0, r0
    10ce:	f7ff ff65 	bl	f9c <delay>
		release;
    10d2:	e7da      	b.n	108a <io+0x4a>
    10d4:	00002c56 	andeq	r2, r0, r6, asr ip
    10d8:	20000020 	andcs	r0, r0, r0, lsr #32

000010dc <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	4a0d      	ldr	r2, [pc, #52]	; (1114 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    10de:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10e0:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    10e4:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    10e8:	089b      	lsrs	r3, r3, #2
    10ea:	1e59      	subs	r1, r3, #1
    10ec:	29ff      	cmp	r1, #255	; 0xff
    10ee:	d803      	bhi.n	10f8 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    10f0:	2004      	movs	r0, #4
    10f2:	4909      	ldr	r1, [pc, #36]	; (1118 <__pi_malloc_init+0x3c>)
    10f4:	f7ff f922 	bl	33c <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	4908      	ldr	r1, [pc, #32]	; (111c <__pi_malloc_init+0x40>)
    10fa:	1d10      	adds	r0, r2, #4
    10fc:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fe:	2000      	movs	r0, #0
    1100:	4907      	ldr	r1, [pc, #28]	; (1120 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1102:	3b02      	subs	r3, #2
    1104:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1106:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    110a:	4a06      	ldr	r2, [pc, #24]	; (1124 <__pi_malloc_init+0x48>)
    110c:	6013      	str	r3, [r2, #0]
    110e:	4a06      	ldr	r2, [pc, #24]	; (1128 <__pi_malloc_init+0x4c>)
    1110:	6013      	str	r3, [r2, #0]
}
    1112:	bd08      	pop	{r3, pc}
    1114:	200000bc 	strhcs	r0, [r0], -ip
    1118:	00002c59 	andeq	r2, r0, r9, asr ip
    111c:	20000030 	andcs	r0, r0, r0, lsr r0
    1120:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1124:	20000024 	andcs	r0, r0, r4, lsr #32
    1128:	2000002c 	andcs	r0, r0, ip, lsr #32

0000112c <__pi_free>:
void __pi_free (aword *ch) {
    112c:	b508      	push	{r3, lr}
	if (ch == NULL)
    112e:	b1c8      	cbz	r0, 1164 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1130:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1134:	2b00      	cmp	r3, #0
    1136:	db03      	blt.n	1140 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1138:	2006      	movs	r0, #6
    113a:	490b      	ldr	r1, [pc, #44]	; (1168 <__pi_free+0x3c>)
    113c:	f7ff f8fe 	bl	33c <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1140:	490a      	ldr	r1, [pc, #40]	; (116c <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1142:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1146:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1148:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    114c:	4413      	add	r3, r2
    114e:	600b      	str	r3, [r1, #0]
	QFREE;
    1150:	f7ff fe1a 	bl	d88 <qfree>
	if (mevent [MA_NP] . nwait) {
    1154:	4806      	ldr	r0, [pc, #24]	; (1170 <__pi_free+0x44>)
    1156:	7803      	ldrb	r3, [r0, #0]
    1158:	b123      	cbz	r3, 1164 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    115a:	f7ff fef3 	bl	f44 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    115e:	7803      	ldrb	r3, [r0, #0]
    1160:	3b01      	subs	r3, #1
    1162:	7003      	strb	r3, [r0, #0]
}
    1164:	bd08      	pop	{r3, pc}
    1166:	bf00      	nop
    1168:	00002c5e 	andeq	r2, r0, lr, asr ip
    116c:	20000024 	andcs	r0, r0, r4, lsr #32
    1170:	20000028 	andcs	r0, r0, r8, lsr #32

00001174 <kill>:
void kill (aword pid) {
    1174:	b510      	push	{r4, lr}
	if (pid == 0)
    1176:	b908      	cbnz	r0, 117c <kill+0x8>
		pid = (aword) __pi_curr;
    1178:	4b0f      	ldr	r3, [pc, #60]	; (11b8 <kill+0x44>)
    117a:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    117c:	2200      	movs	r2, #0
	for_all_tasks (i) {
    117e:	4b0f      	ldr	r3, [pc, #60]	; (11bc <kill+0x48>)
    1180:	681c      	ldr	r4, [r3, #0]
    1182:	b91c      	cbnz	r4, 118c <kill+0x18>
	syserror (EREQPAR, "kpi");
    1184:	2003      	movs	r0, #3
    1186:	490e      	ldr	r1, [pc, #56]	; (11c0 <kill+0x4c>)
    1188:	f7ff f8d8 	bl	33c <__pi_syserror>
		if ((aword)i == pid) {
    118c:	4284      	cmp	r4, r0
    118e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1190:	d10e      	bne.n	11b0 <kill+0x3c>
			if (j == NULL)
    1192:	b95a      	cbnz	r2, 11ac <kill+0x38>
				__PCB = i->Next;
    1194:	6019      	str	r1, [r3, #0]
			killev (i);
    1196:	4620      	mov	r0, r4
    1198:	f7ff fdd8 	bl	d4c <killev>
			ufree (i);
    119c:	f7ff ffc6 	bl	112c <__pi_free>
			if (i == __pi_curr)
    11a0:	4b05      	ldr	r3, [pc, #20]	; (11b8 <kill+0x44>)
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	42a3      	cmp	r3, r4
    11a6:	d106      	bne.n	11b6 <kill+0x42>
				release;
    11a8:	f7ff fc74 	bl	a94 <__pi_release>
				j->Next = i->Next;
    11ac:	62d1      	str	r1, [r2, #44]	; 0x2c
    11ae:	e7f2      	b.n	1196 <kill+0x22>
    11b0:	4622      	mov	r2, r4
    11b2:	460c      	mov	r4, r1
    11b4:	e7e5      	b.n	1182 <kill+0xe>
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	200000b8 	strhcs	r0, [r0], -r8
    11bc:	2000001c 	andcs	r0, r0, ip, lsl r0
    11c0:	00002c63 	andeq	r2, r0, r3, ror #24

000011c4 <__pi_malloc>:
	if (size < 8)
    11c4:	2807      	cmp	r0, #7
		_size = 2;
    11c6:	bf98      	it	ls
    11c8:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    11ca:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	4b21      	ldr	r3, [pc, #132]	; (1254 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    11ce:	bf88      	it	hi
    11d0:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11d2:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	4920      	ldr	r1, [pc, #128]	; (1258 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    11d6:	bf88      	it	hi
    11d8:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11da:	b94c      	cbnz	r4, 11f0 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    11dc:	4a1f      	ldr	r2, [pc, #124]	; (125c <__pi_malloc+0x98>)
    11de:	7853      	ldrb	r3, [r2, #1]
    11e0:	2bff      	cmp	r3, #255	; 0xff
    11e2:	d001      	beq.n	11e8 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    11e4:	3301      	adds	r3, #1
    11e6:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    11e8:	2200      	movs	r2, #0
    11ea:	4b1d      	ldr	r3, [pc, #116]	; (1260 <__pi_malloc+0x9c>)
    11ec:	601a      	str	r2, [r3, #0]
	return chunk;
    11ee:	e02f      	b.n	1250 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	6862      	ldr	r2, [r4, #4]
    11f2:	428a      	cmp	r2, r1
    11f4:	d003      	beq.n	11fe <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    11f6:	2006      	movs	r0, #6
    11f8:	491a      	ldr	r1, [pc, #104]	; (1264 <__pi_malloc+0xa0>)
    11fa:	f7ff f89f 	bl	33c <__pi_syserror>
		if (m_size (chunk) >= _size)
    11fe:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1202:	4285      	cmp	r5, r0
    1204:	d202      	bcs.n	120c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1206:	4623      	mov	r3, r4
    1208:	4614      	mov	r4, r2
    120a:	e7e6      	b.n	11da <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    120c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1212:	1a1b      	subs	r3, r3, r0
    1214:	2b08      	cmp	r3, #8
    1216:	d909      	bls.n	122c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1218:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    121c:	3001      	adds	r0, #1
    121e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1222:	3b01      	subs	r3, #1
    1224:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1228:	f7ff fdae 	bl	d88 <qfree>
		mevent [MA_NP] . nfail = 0;
    122c:	2200      	movs	r2, #0
    122e:	4b0b      	ldr	r3, [pc, #44]	; (125c <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1230:	490d      	ldr	r1, [pc, #52]	; (1268 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1232:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1234:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1238:	680b      	ldr	r3, [r1, #0]
    123a:	1a9b      	subs	r3, r3, r2
    123c:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    123e:	4908      	ldr	r1, [pc, #32]	; (1260 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1240:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1244:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1246:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    124a:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    124c:	bf38      	it	cc
    124e:	600b      	strcc	r3, [r1, #0]
}
    1250:	4620      	mov	r0, r4
    1252:	bd38      	pop	{r3, r4, r5, pc}
    1254:	20000030 	andcs	r0, r0, r0, lsr r0
    1258:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    125c:	20000028 	andcs	r0, r0, r8, lsr #32
    1260:	2000002c 	andcs	r0, r0, ip, lsr #32
    1264:	00002c67 	andeq	r2, r0, r7, ror #24
    1268:	20000024 	andcs	r0, r0, r4, lsr #32

0000126c <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    126c:	b538      	push	{r3, r4, r5, lr}
    126e:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1272:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1274:	f7ff ffa6 	bl	11c4 <__pi_malloc>
    1278:	2300      	movs	r3, #0
    127a:	b138      	cbz	r0, 128c <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    127c:	4a07      	ldr	r2, [pc, #28]	; (129c <__pi_fork+0x30>)
	i->Status = 0;
    127e:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1280:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1282:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1284:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1288:	b90b      	cbnz	r3, 128e <__pi_fork+0x22>
			__PCB = i;
    128a:	6010      	str	r0, [r2, #0]
}
    128c:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    128e:	461a      	mov	r2, r3
    1290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1292:	2b00      	cmp	r3, #0
    1294:	d1fb      	bne.n	128e <__pi_fork+0x22>
			j->Next = i;
    1296:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1298:	e7f8      	b.n	128c <__pi_fork+0x20>
    129a:	bf00      	nop
    129c:	2000001c 	andcs	r0, r0, ip, lsl r0

000012a0 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    12a0:	4a04      	ldr	r2, [pc, #16]	; (12b4 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    12a2:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    12a4:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    12a6:	4803      	ldr	r0, [pc, #12]	; (12b4 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    12a8:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    12aa:	bf1c      	itt	ne
    12ac:	3301      	addne	r3, #1
    12ae:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	f7ff be2e 	b.w	f10 <__pi_wait>
    12b4:	20000028 	andcs	r0, r0, r8, lsr #32

000012b8 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    12b8:	b40f      	push	{r0, r1, r2, r3}
    12ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    12be:	ab0a      	add	r3, sp, #40	; 0x28
    12c0:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    12c4:	2015      	movs	r0, #21
	va_start (ap, mess);
    12c6:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    12c8:	4b46      	ldr	r3, [pc, #280]	; (13e4 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    12ca:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    12cc:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    12ce:	f8df 811c 	ldr.w	r8, [pc, #284]	; 13ec <diag+0x134>
	diag_disable_int (a, is);
    12d2:	695b      	ldr	r3, [r3, #20]
    12d4:	4798      	blx	r3
	while (*mess != '\0') {
    12d6:	7820      	ldrb	r0, [r4, #0]
    12d8:	b998      	cbnz	r0, 1302 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    12da:	200d      	movs	r0, #13
    12dc:	f7ff fd94 	bl	e08 <dgout>
	dgout ('\n');
    12e0:	200a      	movs	r0, #10
    12e2:	f7ff fd91 	bl	e08 <dgout>
    12e6:	4a40      	ldr	r2, [pc, #256]	; (13e8 <diag+0x130>)
    12e8:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    12ea:	071b      	lsls	r3, r3, #28
    12ec:	d4fc      	bmi.n	12e8 <diag+0x30>
	diag_enable_int (a, is);
    12ee:	4b3d      	ldr	r3, [pc, #244]	; (13e4 <diag+0x12c>)
    12f0:	2015      	movs	r0, #21
    12f2:	681b      	ldr	r3, [r3, #0]
    12f4:	691b      	ldr	r3, [r3, #16]
    12f6:	4798      	blx	r3
}
    12f8:	b003      	add	sp, #12
    12fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12fe:	b004      	add	sp, #16
    1300:	4770      	bx	lr
		if (*mess == '%') {
    1302:	2825      	cmp	r0, #37	; 0x25
    1304:	f104 0601 	add.w	r6, r4, #1
    1308:	d169      	bne.n	13de <diag+0x126>
			if (*mess == 'l') {
    130a:	9b01      	ldr	r3, [sp, #4]
    130c:	7862      	ldrb	r2, [r4, #1]
    130e:	f853 1b04 	ldr.w	r1, [r3], #4
    1312:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1314:	bf08      	it	eq
    1316:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1318:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    131a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    131c:	bf0c      	ite	eq
    131e:	2520      	moveq	r5, #32
				bc = 16;
    1320:	2510      	movne	r5, #16
			switch (*mess) {
    1322:	2b75      	cmp	r3, #117	; 0x75
    1324:	d04e      	beq.n	13c4 <diag+0x10c>
    1326:	d80a      	bhi.n	133e <diag+0x86>
    1328:	2b64      	cmp	r3, #100	; 0x64
    132a:	d01c      	beq.n	1366 <diag+0xae>
    132c:	2b73      	cmp	r3, #115	; 0x73
    132e:	d052      	beq.n	13d6 <diag+0x11e>
				dgout ('%');
    1330:	2025      	movs	r0, #37	; 0x25
    1332:	f7ff fd69 	bl	e08 <dgout>
				dgout (*mess);
    1336:	7830      	ldrb	r0, [r6, #0]
    1338:	f7ff fd66 	bl	e08 <dgout>
    133c:	e010      	b.n	1360 <diag+0xa8>
			switch (*mess) {
    133e:	2b78      	cmp	r3, #120	; 0x78
    1340:	d1f6      	bne.n	1330 <diag+0x78>
    1342:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1344:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 13f0 <diag+0x138>
					i += 4;
    1348:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    134a:	1b2b      	subs	r3, r5, r4
    134c:	fa21 f303 	lsr.w	r3, r1, r3
    1350:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1354:	f819 0003 	ldrb.w	r0, [r9, r3]
    1358:	f7ff fd56 	bl	e08 <dgout>
				while (i < bc) {
    135c:	42a5      	cmp	r5, r4
    135e:	dcf3      	bgt.n	1348 <diag+0x90>
			mess++;
    1360:	3601      	adds	r6, #1
					d /= 10;
    1362:	4634      	mov	r4, r6
    1364:	e7b7      	b.n	12d6 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1366:	1e6b      	subs	r3, r5, #1
    1368:	fa21 f303 	lsr.w	r3, r1, r3
    136c:	07da      	lsls	r2, r3, #31
    136e:	d509      	bpl.n	1384 <diag+0xcc>
					dgout ('-');
    1370:	202d      	movs	r0, #45	; 0x2d
    1372:	f7ff fd49 	bl	e08 <dgout>
					if (bc == 16)
    1376:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1378:	bf04      	itt	eq
    137a:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    137e:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1382:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	f242 7410 	movw	r4, #10000	; 0x2710
    1388:	2d10      	cmp	r5, #16
    138a:	bf18      	it	ne
    138c:	4644      	movne	r4, r8
					v = (word) (val / d);
    138e:	fbb1 f5f4 	udiv	r5, r1, r4
    1392:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1394:	b935      	cbnz	r5, 13a4 <diag+0xec>
    1396:	2c01      	cmp	r4, #1
    1398:	d004      	beq.n	13a4 <diag+0xec>
					d /= 10;
    139a:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    139e:	e7f6      	b.n	138e <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    13a0:	4c12      	ldr	r4, [pc, #72]	; (13ec <diag+0x134>)
    13a2:	e7f4      	b.n	138e <diag+0xd6>
					dgout (v + '0');
    13a4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    13a8:	b280      	uxth	r0, r0
    13aa:	f7ff fd2d 	bl	e08 <dgout>
					if (d == 0) break;
    13ae:	2c09      	cmp	r4, #9
					d /= 10;
    13b0:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    13b4:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    13b8:	d9d2      	bls.n	1360 <diag+0xa8>
					v = (word) (val / d);
    13ba:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    13be:	461c      	mov	r4, r3
					v = (word) (val / d);
    13c0:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    13c2:	e7ef      	b.n	13a4 <diag+0xec>
				if (bc == 16)
    13c4:	2d10      	cmp	r5, #16
    13c6:	d1eb      	bne.n	13a0 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    13c8:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    13cc:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    13ce:	e7de      	b.n	138e <diag+0xd6>
					dgout (*s);
    13d0:	f7ff fd1a 	bl	e08 <dgout>
					s++;
    13d4:	3101      	adds	r1, #1
				while (*s != '\0') {
    13d6:	7808      	ldrb	r0, [r1, #0]
    13d8:	2800      	cmp	r0, #0
    13da:	d1f9      	bne.n	13d0 <diag+0x118>
    13dc:	e7c0      	b.n	1360 <diag+0xa8>
			dgout (*mess++);
    13de:	f7ff fd13 	bl	e08 <dgout>
    13e2:	e7be      	b.n	1362 <diag+0xaa>
    13e4:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    13e8:	40001018 	andmi	r1, r0, r8, lsl r0
    13ec:	3b9aca00 	blcc	fe6b3bf4 <_estack+0xde6aebf4>
    13f0:	00002c6c 	andeq	r2, r0, ip, ror #24

000013f4 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    13f4:	4770      	bx	lr

000013f6 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    13f6:	e7fe      	b.n	13f6 <NmiSR>

000013f8 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    13f8:	e7fe      	b.n	13f8 <FaultISR>

000013fa <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    13fa:	e7fe      	b.n	13fa <AONIntHandler>

000013fc <ResetISR>:
{
    13fc:	b508      	push	{r3, lr}
    SetupTrimDevice();
    13fe:	f000 fddb 	bl	1fb8 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1402:	4b0c      	ldr	r3, [pc, #48]	; (1434 <zero_loop+0x20>)
    pui32Src = &_etext;
    1404:	4a0c      	ldr	r2, [pc, #48]	; (1438 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1406:	490d      	ldr	r1, [pc, #52]	; (143c <zero_loop+0x28>)
    1408:	428b      	cmp	r3, r1
    140a:	d30d      	bcc.n	1428 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    140c:	480c      	ldr	r0, [pc, #48]	; (1440 <zero_loop+0x2c>)
    140e:	490d      	ldr	r1, [pc, #52]	; (1444 <zero_loop+0x30>)
    1410:	f04f 0200 	mov.w	r2, #0

00001414 <zero_loop>:
    1414:	4288      	cmp	r0, r1
    1416:	bfb8      	it	lt
    1418:	f840 2b04 	strlt.w	r2, [r0], #4
    141c:	dbfa      	blt.n	1414 <zero_loop>
   main();
    141e:	f7ff fc65 	bl	cec <main>
    FaultISR();
    1422:	f7ff ffe9 	bl	13f8 <FaultISR>
}
    1426:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1428:	f852 0b04 	ldr.w	r0, [r2], #4
    142c:	f843 0b04 	str.w	r0, [r3], #4
    1430:	e7ea      	b.n	1408 <ResetISR+0xc>
    1432:	bf00      	nop
    1434:	20000000 	andcs	r0, r0, r0
    1438:	00002c84 	andeq	r2, r0, r4, lsl #25
    143c:	20000000 	andcs	r0, r0, r0
    1440:	20000000 	andcs	r0, r0, r0
    1444:	200000bc 	strhcs	r0, [r0], -ip

00001448 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1448:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    144a:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1450:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1452:	4907      	ldr	r1, [pc, #28]	; (1470 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	4d07      	ldr	r5, [pc, #28]	; (1474 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1456:	4c08      	ldr	r4, [pc, #32]	; (1478 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1458:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    145a:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    145c:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    145e:	b2c0      	uxtb	r0, r0
			b |= 1;
    1460:	bf48      	it	mi
    1462:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1466:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1468:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    146a:	600a      	str	r2, [r1, #0]
    146c:	d1f4      	bne.n	1458 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    146e:	bd70      	pop	{r4, r5, r6, pc}
    1470:	400220a0 	andmi	r2, r2, r0, lsr #1
    1474:	400220c0 	andmi	r2, r2, r0, asr #1
    1478:	40022090 	mulmi	r2, r0, r0

0000147c <put_byte>:

static void put_byte (byte b) {
    147c:	b530      	push	{r4, r5, lr}
    147e:	2308      	movs	r3, #8
    1480:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1484:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1488:	4c06      	ldr	r4, [pc, #24]	; (14a4 <put_byte+0x28>)
    148a:	4a07      	ldr	r2, [pc, #28]	; (14a8 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    148c:	f010 0f80 	tst.w	r0, #128	; 0x80
    1490:	bf14      	ite	ne
    1492:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1494:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1496:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1498:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    149a:	6021      	str	r1, [r4, #0]
		b <<= 1;
    149c:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    149e:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    14a0:	d1f4      	bne.n	148c <put_byte+0x10>
	}
}
    14a2:	bd30      	pop	{r4, r5, pc}
    14a4:	40022090 	mulmi	r2, r0, r0
    14a8:	400220a0 	andmi	r2, r2, r0, lsr #1

000014ac <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14ac:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    14ae:	b510      	push	{r4, lr}
    14b0:	4c03      	ldr	r4, [pc, #12]	; (14c0 <cmd_0+0x14>)
    14b2:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    14b4:	f7ff ffe2 	bl	147c <put_byte>
    14b8:	2300      	movs	r3, #0
    14ba:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    14bc:	bd10      	pop	{r4, pc}
    14be:	bf00      	nop
    14c0:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000014c4 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    14c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14c8:	4604      	mov	r4, r0
    14ca:	460d      	mov	r5, r1
    14cc:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    14ce:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1514 <wwait+0x50>
    14d2:	4e0f      	ldr	r6, [pc, #60]	; (1510 <wwait+0x4c>)
    14d4:	f898 3000 	ldrb.w	r3, [r8]
    14d8:	b14b      	cbz	r3, 14ee <wwait+0x2a>
	put_byte (CMD_RDSR);
    14da:	2005      	movs	r0, #5
    14dc:	6037      	str	r7, [r6, #0]
    14de:	f7ff ffcd 	bl	147c <put_byte>
	r = get_byte ();
    14e2:	f7ff ffb1 	bl	1448 <get_byte>
    14e6:	2300      	movs	r3, #0
    14e8:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    14ea:	07c3      	lsls	r3, r0, #31
    14ec:	d401      	bmi.n	14f2 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    14ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    14f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    14f6:	429c      	cmp	r4, r3
    14f8:	d103      	bne.n	1502 <wwait+0x3e>
			mdelay (1);
    14fa:	2001      	movs	r0, #1
    14fc:	f7fe feea 	bl	2d4 <mdelay>
    1500:	e7e8      	b.n	14d4 <wwait+0x10>
			delay (del, st);
    1502:	4621      	mov	r1, r4
    1504:	4628      	mov	r0, r5
    1506:	f7ff fd49 	bl	f9c <delay>
			release;
    150a:	f7ff fac3 	bl	a94 <__pi_release>
    150e:	bf00      	nop
    1510:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1514:	20000034 	andcs	r0, r0, r4, lsr r0

00001518 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    151a:	4d0c      	ldr	r5, [pc, #48]	; (154c <ready+0x34>)
    151c:	782f      	ldrb	r7, [r5, #0]
    151e:	b147      	cbz	r7, 1532 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1520:	2101      	movs	r1, #1
    1522:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1526:	f7ff ffcd 	bl	14c4 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    152a:	2200      	movs	r2, #0
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <ready+0x38>)
    152e:	701a      	strb	r2, [r3, #0]
}
    1530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1532:	2401      	movs	r4, #1
    1534:	4e07      	ldr	r6, [pc, #28]	; (1554 <ready+0x3c>)
	udelay (1);
    1536:	4620      	mov	r0, r4
    1538:	6034      	str	r4, [r6, #0]
    153a:	f7fe feb5 	bl	2a8 <udelay>
	udelay (1);
    153e:	4620      	mov	r0, r4
    1540:	6037      	str	r7, [r6, #0]
    1542:	f7fe feb1 	bl	2a8 <udelay>
		dopen = DOPEN_TEMP;
    1546:	2302      	movs	r3, #2
    1548:	702b      	strb	r3, [r5, #0]
    154a:	e7ee      	b.n	152a <ready+0x12>
    154c:	20000034 	andcs	r0, r0, r4, lsr r0
    1550:	20000035 	andcs	r0, r0, r5, lsr r0
    1554:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001558 <cclose>:
static void cclose () {
    1558:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    155a:	4c07      	ldr	r4, [pc, #28]	; (1578 <cclose+0x20>)
    155c:	7823      	ldrb	r3, [r4, #0]
    155e:	2b02      	cmp	r3, #2
    1560:	d109      	bne.n	1576 <cclose+0x1e>
		wwait (WNONE, 1);
    1562:	2101      	movs	r1, #1
    1564:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1568:	f7ff ffac 	bl	14c4 <wwait>
	cmd_0 (CMD_DP);
    156c:	20b9      	movs	r0, #185	; 0xb9
    156e:	f7ff ff9d 	bl	14ac <cmd_0>
		dopen = 0;
    1572:	2300      	movs	r3, #0
    1574:	7023      	strb	r3, [r4, #0]
}
    1576:	bd10      	pop	{r4, pc}
    1578:	20000034 	andcs	r0, r0, r4, lsr r0

0000157c <ee_open>:

// ============================================================================

word ee_open () {
    157c:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    157e:	f7ff ffcb 	bl	1518 <ready>
	dopen = DOPEN_PERM;
    1582:	2201      	movs	r2, #1
    1584:	4b01      	ldr	r3, [pc, #4]	; (158c <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1586:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1588:	701a      	strb	r2, [r3, #0]
}
    158a:	bd08      	pop	{r3, pc}
    158c:	20000034 	andcs	r0, r0, r4, lsr r0

00001590 <ee_close>:

void ee_close () {

	if (dopen) {
    1590:	4b03      	ldr	r3, [pc, #12]	; (15a0 <ee_close+0x10>)
    1592:	781a      	ldrb	r2, [r3, #0]
    1594:	b11a      	cbz	r2, 159e <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1596:	2202      	movs	r2, #2
    1598:	701a      	strb	r2, [r3, #0]
		cclose ();
    159a:	f7ff bfdd 	b.w	1558 <cclose>
	}
}
    159e:	4770      	bx	lr
    15a0:	20000034 	andcs	r0, r0, r4, lsr r0

000015a4 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    15a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a6:	4604      	mov	r4, r0
    15a8:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    15aa:	4615      	mov	r5, r2
    15ac:	b37a      	cbz	r2, 160e <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    15ae:	4e19      	ldr	r6, [pc, #100]	; (1614 <ser_in+0x70>)
    15b0:	6830      	ldr	r0, [r6, #0]
    15b2:	b988      	cbnz	r0, 15d8 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    15b4:	4818      	ldr	r0, [pc, #96]	; (1618 <ser_in+0x74>)
    15b6:	f7ff fd0d 	bl	fd4 <running>
    15ba:	b948      	cbnz	r0, 15d0 <ser_in+0x2c>
			prcs = runthread (__inserial);
    15bc:	4601      	mov	r1, r0
    15be:	4816      	ldr	r0, [pc, #88]	; (1618 <ser_in+0x74>)
    15c0:	f7ff fe54 	bl	126c <__pi_fork>
			if (prcs == 0) {
    15c4:	b920      	cbnz	r0, 15d0 <ser_in+0x2c>
				npwait (st);
    15c6:	4620      	mov	r0, r4
    15c8:	f7ff fe6a 	bl	12a0 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    15cc:	f7ff fa62 	bl	a94 <__pi_release>
		join (prcs, st);
    15d0:	4621      	mov	r1, r4
    15d2:	f7ff fcd1 	bl	f78 <__pi_join>
    15d6:	e7f9      	b.n	15cc <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    15d8:	7803      	ldrb	r3, [r0, #0]
    15da:	b9a3      	cbnz	r3, 1606 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15dc:	7844      	ldrb	r4, [r0, #1]
    15de:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    15e0:	42ac      	cmp	r4, r5
		prcs = len-1;
    15e2:	bfa8      	it	ge
    15e4:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    15e8:	4622      	mov	r2, r4
    15ea:	4638      	mov	r0, r7
    15ec:	6831      	ldr	r1, [r6, #0]
    15ee:	f7ff fd0a 	bl	1006 <__pi_memcpy>
	ufree (__inpline);
    15f2:	6830      	ldr	r0, [r6, #0]
    15f4:	f7ff fd9a 	bl	112c <__pi_free>
	__inpline = NULL;
    15f8:	2300      	movs	r3, #0
    15fa:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    15fc:	783a      	ldrb	r2, [r7, #0]
    15fe:	b102      	cbz	r2, 1602 <ser_in+0x5e>
		buf [prcs] = '\0';
    1600:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1602:	4620      	mov	r0, r4
    1604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1606:	f7ff fcf7 	bl	ff8 <__pi_strlen>
    160a:	4604      	mov	r4, r0
    160c:	e7e8      	b.n	15e0 <ser_in+0x3c>
		return 0;
    160e:	4614      	mov	r4, r2
    1610:	e7f7      	b.n	1602 <ser_in+0x5e>
    1612:	bf00      	nop
    1614:	20000040 	andcs	r0, r0, r0, asr #32
    1618:	00001741 	andeq	r1, r0, r1, asr #14

0000161c <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    161c:	b40e      	push	{r1, r2, r3}
    161e:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1620:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1622:	4812      	ldr	r0, [pc, #72]	; (166c <ser_outf+0x50>)
    1624:	f7ff fcd6 	bl	fd4 <running>
    1628:	4606      	mov	r6, r0
    162a:	b120      	cbz	r0, 1636 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    162c:	4621      	mov	r1, r4
    162e:	f7ff fca3 	bl	f78 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1632:	f7ff fa2f 	bl	a94 <__pi_release>
	va_start (ap, m);
    1636:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    163a:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    163c:	f000 fa36 	bl	1aac <vform>
    1640:	4605      	mov	r5, r0
    1642:	b918      	cbnz	r0, 164c <ser_outf+0x30>
		umwait (st);
    1644:	4620      	mov	r0, r4
    1646:	f7ff fe2b 	bl	12a0 <__pi_waitmem>
    164a:	e7f2      	b.n	1632 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    164c:	4601      	mov	r1, r0
    164e:	4807      	ldr	r0, [pc, #28]	; (166c <ser_outf+0x50>)
    1650:	f7ff fe0c 	bl	126c <__pi_fork>
    1654:	b918      	cbnz	r0, 165e <ser_outf+0x42>
		ufree (buf);
    1656:	4628      	mov	r0, r5
    1658:	f7ff fd68 	bl	112c <__pi_free>
		npwait (st);
    165c:	e7f2      	b.n	1644 <ser_outf+0x28>
		release;
	}

	return 0;
}
    165e:	4630      	mov	r0, r6
    1660:	b003      	add	sp, #12
    1662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1666:	b003      	add	sp, #12
    1668:	4770      	bx	lr
    166a:	bf00      	nop
    166c:	000016d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>

00001670 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1670:	b40e      	push	{r1, r2, r3}
    1672:	b533      	push	{r0, r1, r4, r5, lr}
    1674:	9905      	ldr	r1, [sp, #20]
    1676:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1678:	b321      	cbz	r1, 16c4 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    167a:	4d13      	ldr	r5, [pc, #76]	; (16c8 <ser_inf+0x58>)
    167c:	6828      	ldr	r0, [r5, #0]
    167e:	b988      	cbnz	r0, 16a4 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1680:	4812      	ldr	r0, [pc, #72]	; (16cc <ser_inf+0x5c>)
    1682:	f7ff fca7 	bl	fd4 <running>
    1686:	b948      	cbnz	r0, 169c <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1688:	4601      	mov	r1, r0
    168a:	4810      	ldr	r0, [pc, #64]	; (16cc <ser_inf+0x5c>)
    168c:	f7ff fdee 	bl	126c <__pi_fork>
			if (prcs == 0) {
    1690:	b920      	cbnz	r0, 169c <ser_inf+0x2c>
				npwait (st);
    1692:	4620      	mov	r0, r4
    1694:	f7ff fe04 	bl	12a0 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1698:	f7ff f9fc 	bl	a94 <__pi_release>
		join (prcs, st);
    169c:	4621      	mov	r1, r4
    169e:	f7ff fc6b 	bl	f78 <__pi_join>
    16a2:	e7f9      	b.n	1698 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    16a4:	aa06      	add	r2, sp, #24
    16a6:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    16a8:	f000 fa28 	bl	1afc <vscan>
    16ac:	4604      	mov	r4, r0

	ufree (__inpline);
    16ae:	6828      	ldr	r0, [r5, #0]
    16b0:	f7ff fd3c 	bl	112c <__pi_free>
	__inpline = NULL;
    16b4:	2300      	movs	r3, #0
    16b6:	602b      	str	r3, [r5, #0]

	return prcs;
}
    16b8:	4620      	mov	r0, r4
    16ba:	b002      	add	sp, #8
    16bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    16c0:	b003      	add	sp, #12
    16c2:	4770      	bx	lr
		return 0;
    16c4:	460c      	mov	r4, r1
    16c6:	e7f7      	b.n	16b8 <ser_inf+0x48>
    16c8:	20000040 	andcs	r0, r0, r0, asr #32
    16cc:	00001741 	andeq	r1, r0, r1, asr #14

000016d0 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    16d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16d2:	4b18      	ldr	r3, [pc, #96]	; (1734 <__outserial+0x64>)
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	689d      	ldr	r5, [r3, #8]
    16d8:	b130      	cbz	r0, 16e8 <__outserial+0x18>
    16da:	280a      	cmp	r0, #10
    16dc:	d00d      	beq.n	16fa <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    16de:	b003      	add	sp, #12
    16e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16e4:	f7ff bb9c 	b.w	e20 <__pi_badstate>
	ptr = data;
    16e8:	4b13      	ldr	r3, [pc, #76]	; (1738 <__outserial+0x68>)
    16ea:	4c14      	ldr	r4, [pc, #80]	; (173c <__outserial+0x6c>)
    16ec:	601d      	str	r5, [r3, #0]
	if (*ptr)
    16ee:	782b      	ldrb	r3, [r5, #0]
    16f0:	b1e3      	cbz	r3, 172c <__outserial+0x5c>
		len = strlen (ptr);
    16f2:	4628      	mov	r0, r5
    16f4:	f7ff fc80 	bl	ff8 <__pi_strlen>
    16f8:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fa:	4e0f      	ldr	r6, [pc, #60]	; (1738 <__outserial+0x68>)
    16fc:	4f0f      	ldr	r7, [pc, #60]	; (173c <__outserial+0x6c>)
    16fe:	883b      	ldrh	r3, [r7, #0]
    1700:	2201      	movs	r2, #1
    1702:	9300      	str	r3, [sp, #0]
    1704:	2100      	movs	r1, #0
    1706:	6833      	ldr	r3, [r6, #0]
    1708:	200a      	movs	r0, #10
    170a:	f7ff fc99 	bl	1040 <io>
	ptr += quant;
    170e:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1710:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    1712:	4403      	add	r3, r0
	len -= quant;
    1714:	1a24      	subs	r4, r4, r0
	ptr += quant;
    1716:	6033      	str	r3, [r6, #0]
	len -= quant;
    1718:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    171a:	2c00      	cmp	r4, #0
    171c:	d1ef      	bne.n	16fe <__outserial+0x2e>
		ufree (data);
    171e:	4628      	mov	r0, r5
    1720:	f7ff fd04 	bl	112c <__pi_free>
		finish;
    1724:	4620      	mov	r0, r4
    1726:	f7ff fd25 	bl	1174 <kill>
    172a:	e7e8      	b.n	16fe <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    172c:	786b      	ldrb	r3, [r5, #1]
    172e:	3303      	adds	r3, #3
    1730:	6023      	str	r3, [r4, #0]
    1732:	e7e2      	b.n	16fa <__outserial+0x2a>
    1734:	200000b8 	strhcs	r0, [r0], -r8
    1738:	2000003c 	andcs	r0, r0, ip, lsr r0
    173c:	20000038 	andcs	r0, r0, r8, lsr r0

00001740 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    1740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1742:	4d42      	ldr	r5, [pc, #264]	; (184c <__inserial+0x10c>)
    1744:	682a      	ldr	r2, [r5, #0]
    1746:	6894      	ldr	r4, [r2, #8]
    1748:	2803      	cmp	r0, #3
    174a:	d87a      	bhi.n	1842 <__inserial+0x102>
    174c:	e8df f000 	tbb	[pc, r0]
    1750:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    1754:	4b3e      	ldr	r3, [pc, #248]	; (1850 <__inserial+0x110>)
    1756:	681b      	ldr	r3, [r3, #0]
    1758:	b113      	cbz	r3, 1760 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    175a:	2000      	movs	r0, #0
    175c:	f7ff fd0a 	bl	1174 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1760:	2040      	movs	r0, #64	; 0x40
    1762:	f7ff fd2f 	bl	11c4 <__pi_malloc>
    1766:	4b3b      	ldr	r3, [pc, #236]	; (1854 <__inserial+0x114>)
    1768:	4604      	mov	r4, r0
    176a:	6018      	str	r0, [r3, #0]
    176c:	b918      	cbnz	r0, 1776 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    176e:	f7ff fd97 	bl	12a0 <__pi_waitmem>
		release;
    1772:	f7ff f98f 	bl	a94 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    1776:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    1778:	682b      	ldr	r3, [r5, #0]
    177a:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    177c:	4b36      	ldr	r3, [pc, #216]	; (1858 <__inserial+0x118>)
    177e:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    1780:	2001      	movs	r0, #1
    1782:	2200      	movs	r2, #0
    1784:	4d33      	ldr	r5, [pc, #204]	; (1854 <__inserial+0x114>)
    1786:	9000      	str	r0, [sp, #0]
    1788:	682b      	ldr	r3, [r5, #0]
    178a:	4611      	mov	r1, r2
    178c:	f7ff fc58 	bl	1040 <io>
	if (ptr == (char*) data) { // new line
    1790:	682b      	ldr	r3, [r5, #0]
    1792:	42a3      	cmp	r3, r4
    1794:	d10d      	bne.n	17b2 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    1796:	7823      	ldrb	r3, [r4, #0]
    1798:	b923      	cbnz	r3, 17a4 <__inserial+0x64>
			ptr++;
    179a:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    179c:	2002      	movs	r0, #2
			ptr++;
    179e:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    17a0:	f7ff fbac 	bl	efc <proceed>
		}

		if (*ptr < 0x20)
    17a4:	682b      	ldr	r3, [r5, #0]
    17a6:	781b      	ldrb	r3, [r3, #0]
    17a8:	2b1f      	cmp	r3, #31
    17aa:	d802      	bhi.n	17b2 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    17ac:	2001      	movs	r0, #1
    17ae:	f7ff fba5 	bl	efc <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    17b2:	682b      	ldr	r3, [r5, #0]
    17b4:	781a      	ldrb	r2, [r3, #0]
    17b6:	2a0a      	cmp	r2, #10
    17b8:	d001      	beq.n	17be <__inserial+0x7e>
    17ba:	2a0d      	cmp	r2, #13
    17bc:	d105      	bne.n	17ca <__inserial+0x8a>
		*ptr = '\0';
    17be:	2000      	movs	r0, #0
    17c0:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    17c2:	4b23      	ldr	r3, [pc, #140]	; (1850 <__inserial+0x110>)
    17c4:	601c      	str	r4, [r3, #0]
		finish;
    17c6:	f7ff fcd5 	bl	1174 <kill>
	}

	if (len) {
    17ca:	4923      	ldr	r1, [pc, #140]	; (1858 <__inserial+0x118>)
    17cc:	680b      	ldr	r3, [r1, #0]
    17ce:	b123      	cbz	r3, 17da <__inserial+0x9a>
		ptr++;
    17d0:	682a      	ldr	r2, [r5, #0]
		len--;
    17d2:	3b01      	subs	r3, #1
		ptr++;
    17d4:	3201      	adds	r2, #1
    17d6:	602a      	str	r2, [r5, #0]
		len--;
    17d8:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    17da:	2001      	movs	r0, #1
    17dc:	f7ff fb8e 	bl	efc <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    17e0:	2301      	movs	r3, #1
    17e2:	2200      	movs	r2, #0
    17e4:	4d1b      	ldr	r5, [pc, #108]	; (1854 <__inserial+0x114>)
    17e6:	9300      	str	r3, [sp, #0]
    17e8:	4611      	mov	r1, r2
    17ea:	682b      	ldr	r3, [r5, #0]
    17ec:	2002      	movs	r0, #2
    17ee:	f7ff fc27 	bl	1040 <io>
	len -= 2;
    17f2:	4819      	ldr	r0, [pc, #100]	; (1858 <__inserial+0x118>)
    17f4:	6803      	ldr	r3, [r0, #0]
    17f6:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    17f8:	682b      	ldr	r3, [r5, #0]
    17fa:	f813 1b01 	ldrb.w	r1, [r3], #1
    17fe:	3101      	adds	r1, #1
		len = *ptr + 1;
    1800:	4291      	cmp	r1, r2
    1802:	bfd4      	ite	le
    1804:	6001      	strle	r1, [r0, #0]
    1806:	6002      	strgt	r2, [r0, #0]
	ptr++;
    1808:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    180a:	2200      	movs	r2, #0
    180c:	4f12      	ldr	r7, [pc, #72]	; (1858 <__inserial+0x118>)
    180e:	4d11      	ldr	r5, [pc, #68]	; (1854 <__inserial+0x114>)
    1810:	883b      	ldrh	r3, [r7, #0]
    1812:	4611      	mov	r1, r2
    1814:	9300      	str	r3, [sp, #0]
    1816:	682b      	ldr	r3, [r5, #0]
    1818:	2003      	movs	r0, #3
    181a:	f7ff fc11 	bl	1040 <io>
	len -= quant;
    181e:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1820:	4606      	mov	r6, r0
	len -= quant;
    1822:	1a18      	subs	r0, r3, r0
    1824:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1826:	b918      	cbnz	r0, 1830 <__inserial+0xf0>
		__inpline = (char*)data;
    1828:	4b09      	ldr	r3, [pc, #36]	; (1850 <__inserial+0x110>)
    182a:	601c      	str	r4, [r3, #0]
		finish;
    182c:	f7ff fca2 	bl	1174 <kill>
	}
	ptr += quant;
    1830:	6828      	ldr	r0, [r5, #0]
    1832:	4430      	add	r0, r6
    1834:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    1836:	2003      	movs	r0, #3

endstrand
    1838:	b003      	add	sp, #12
    183a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    183e:	f7ff bb5d 	b.w	efc <proceed>
endstrand
    1842:	b003      	add	sp, #12
    1844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1848:	f7ff baea 	b.w	e20 <__pi_badstate>
    184c:	200000b8 	strhcs	r0, [r0], -r8
    1850:	20000040 	andcs	r0, r0, r0, asr #32
    1854:	20000048 	andcs	r0, r0, r8, asr #32
    1858:	20000044 	andcs	r0, r0, r4, asr #32

0000185c <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    185c:	f8dc 2000 	ldr.w	r2, [ip]
    1860:	b132      	cbz	r2, 1870 <outc.5724+0x14>
    1862:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1866:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    186a:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    186c:	bf88      	it	hi
    186e:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    1870:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1874:	3301      	adds	r3, #1
    1876:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    187a:	4770      	bx	lr

0000187c <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1880:	461c      	mov	r4, r3
    1882:	ab0c      	add	r3, sp, #48	; 0x30
    1884:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    1886:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1888:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    188a:	4f86      	ldr	r7, [pc, #536]	; (1aa4 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    188c:	9001      	str	r0, [sp, #4]
    188e:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    1892:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1896:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    189a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    189e:	d118      	bne.n	18d2 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    18a0:	f892 9001 	ldrb.w	r9, [r2, #1]
    18a4:	1c95      	adds	r5, r2, #2
				outc ('\\');
    18a6:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    18aa:	f1b9 0f00 	cmp.w	r9, #0
    18ae:	d10b      	bne.n	18c8 <__pi_vfparse+0x4c>
				outc ('\\');
    18b0:	205c      	movs	r0, #92	; 0x5c
    18b2:	f7ff ffd3 	bl	185c <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    18b6:	4648      	mov	r0, r9
    18b8:	f10d 0c04 	add.w	ip, sp, #4
    18bc:	f7ff ffce 	bl	185c <outc.5724>
			if (c == '\0')
    18c0:	f1b9 0f00 	cmp.w	r9, #0
    18c4:	d103      	bne.n	18ce <__pi_vfparse+0x52>
    18c6:	e027      	b.n	1918 <__pi_vfparse+0x9c>
			outc (c);
    18c8:	4648      	mov	r0, r9
				outc (val);
    18ca:	f7ff ffc7 	bl	185c <outc.5724>
				val = (word) va_arg (ap, aword);
    18ce:	462a      	mov	r2, r5
    18d0:	e7e1      	b.n	1896 <__pi_vfparse+0x1a>
		if (c == '%') {
    18d2:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    18d6:	f040 80e2 	bne.w	1a9e <__pi_vfparse+0x222>
			c = *fm++;
    18da:	f892 8001 	ldrb.w	r8, [r2, #1]
    18de:	1c95      	adds	r5, r2, #2
			switch (c) {
    18e0:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    18e4:	f000 80cd 	beq.w	1a82 <__pi_vfparse+0x206>
    18e8:	d81b      	bhi.n	1922 <__pi_vfparse+0xa6>
    18ea:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    18ee:	d033      	beq.n	1958 <__pi_vfparse+0xdc>
    18f0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    18f4:	d067      	beq.n	19c6 <__pi_vfparse+0x14a>
    18f6:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    18fa:	f000 80bc 	beq.w	1a76 <__pi_vfparse+0x1fa>
				outc ('%');
    18fe:	2025      	movs	r0, #37	; 0x25
    1900:	f10d 0c04 	add.w	ip, sp, #4
    1904:	f7ff ffaa 	bl	185c <outc.5724>
				outc (c);
    1908:	4640      	mov	r0, r8
    190a:	f10d 0c04 	add.w	ip, sp, #4
    190e:	f7ff ffa5 	bl	185c <outc.5724>
				if (c == '\0')
    1912:	f1b8 0f00 	cmp.w	r8, #0
    1916:	d1da      	bne.n	18ce <__pi_vfparse+0x52>
Ret:
				return d;
    1918:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    191c:	b004      	add	sp, #16
    191e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1922:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1926:	d017      	beq.n	1958 <__pi_vfparse+0xdc>
    1928:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    192c:	d1e7      	bne.n	18fe <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    192e:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1932:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1936:	fa1f f983 	uxth.w	r9, r3
    193a:	fa49 f308 	asr.w	r3, r9, r8
    193e:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1942:	5cf8      	ldrb	r0, [r7, r3]
    1944:	f10d 0c04 	add.w	ip, sp, #4
    1948:	f7ff ff88 	bl	185c <outc.5724>
					if (i == 0)
    194c:	f1b8 0f00 	cmp.w	r8, #0
    1950:	d0bd      	beq.n	18ce <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1952:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1956:	e7f0      	b.n	193a <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1958:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    195c:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1960:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1964:	d10a      	bne.n	197c <__pi_vfparse+0x100>
    1966:	041b      	lsls	r3, r3, #16
    1968:	d508      	bpl.n	197c <__pi_vfparse+0x100>
					outc ('-');
    196a:	202d      	movs	r0, #45	; 0x2d
    196c:	f10d 0c04 	add.w	ip, sp, #4
    1970:	f7ff ff74 	bl	185c <outc.5724>
					val = (~val) + 1;
    1974:	f1c9 0900 	rsb	r9, r9, #0
    1978:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    197c:	2305      	movs	r3, #5
				enci (10000);
    197e:	f242 7810 	movw	r8, #10000	; 0x2710
    1982:	fbb9 f0f8 	udiv	r0, r9, r8
    1986:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    198a:	d103      	bne.n	1994 <__pi_vfparse+0x118>
    198c:	3b01      	subs	r3, #1
    198e:	d117      	bne.n	19c0 <__pi_vfparse+0x144>
    1990:	f04f 0801 	mov.w	r8, #1
    1994:	fa1f fa80 	uxth.w	sl, r0
    1998:	f10d 0c04 	add.w	ip, sp, #4
    199c:	3030      	adds	r0, #48	; 0x30
    199e:	f7ff ff5d 	bl	185c <outc.5724>
    19a2:	fbb8 f3f6 	udiv	r3, r8, r6
    19a6:	fb08 991a 	mls	r9, r8, sl, r9
    19aa:	f1b8 0f09 	cmp.w	r8, #9
    19ae:	fa1f f989 	uxth.w	r9, r9
    19b2:	b29b      	uxth	r3, r3
    19b4:	d98b      	bls.n	18ce <__pi_vfparse+0x52>
    19b6:	fbb9 f0f3 	udiv	r0, r9, r3
    19ba:	4698      	mov	r8, r3
    19bc:	b2c0      	uxtb	r0, r0
    19be:	e7e9      	b.n	1994 <__pi_vfparse+0x118>
    19c0:	fbb8 f8f6 	udiv	r8, r8, r6
    19c4:	e7dd      	b.n	1982 <__pi_vfparse+0x106>
				c = *fm;
    19c6:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    19c8:	2b64      	cmp	r3, #100	; 0x64
    19ca:	d001      	beq.n	19d0 <__pi_vfparse+0x154>
    19cc:	2b75      	cmp	r3, #117	; 0x75
    19ce:	d132      	bne.n	1a36 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    19d0:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    19d2:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    19d6:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    19da:	d109      	bne.n	19f0 <__pi_vfparse+0x174>
    19dc:	f1ba 0f00 	cmp.w	sl, #0
    19e0:	da06      	bge.n	19f0 <__pi_vfparse+0x174>
						outc ('-');
    19e2:	202d      	movs	r0, #45	; 0x2d
    19e4:	f10d 0c04 	add.w	ip, sp, #4
    19e8:	f7ff ff38 	bl	185c <outc.5724>
						val = (~val) + 1;
    19ec:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    19f0:	230a      	movs	r3, #10
					enci (1000000000UL);
    19f2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1aa8 <__pi_vfparse+0x22c>
    19f6:	fbba f9f8 	udiv	r9, sl, r8
    19fa:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    19fe:	d103      	bne.n	1a08 <__pi_vfparse+0x18c>
    1a00:	3b01      	subs	r3, #1
    1a02:	d115      	bne.n	1a30 <__pi_vfparse+0x1b4>
    1a04:	f04f 0801 	mov.w	r8, #1
    1a08:	f10d 0c04 	add.w	ip, sp, #4
    1a0c:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1a10:	f7ff ff24 	bl	185c <outc.5724>
    1a14:	f1b8 0f09 	cmp.w	r8, #9
    1a18:	fbb8 f3f6 	udiv	r3, r8, r6
    1a1c:	fb08 aa19 	mls	sl, r8, r9, sl
    1a20:	f67f af55 	bls.w	18ce <__pi_vfparse+0x52>
    1a24:	fbba f9f3 	udiv	r9, sl, r3
    1a28:	4698      	mov	r8, r3
    1a2a:	fa5f f989 	uxtb.w	r9, r9
    1a2e:	e7eb      	b.n	1a08 <__pi_vfparse+0x18c>
    1a30:	fbb8 f8f6 	udiv	r8, r8, r6
    1a34:	e7df      	b.n	19f6 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1a36:	2b78      	cmp	r3, #120	; 0x78
    1a38:	d114      	bne.n	1a64 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1a3a:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1a3e:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1a42:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1a44:	fa29 f308 	lsr.w	r3, r9, r8
    1a48:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1a4c:	5cf8      	ldrb	r0, [r7, r3]
    1a4e:	f10d 0c04 	add.w	ip, sp, #4
    1a52:	f7ff ff03 	bl	185c <outc.5724>
						if (i == 0)
    1a56:	f1b8 0f00 	cmp.w	r8, #0
    1a5a:	f43f af38 	beq.w	18ce <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1a5e:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1a62:	e7ef      	b.n	1a44 <__pi_vfparse+0x1c8>
					outc ('%');
    1a64:	4648      	mov	r0, r9
    1a66:	f10d 0c04 	add.w	ip, sp, #4
    1a6a:	f7ff fef7 	bl	185c <outc.5724>
					outc ('l');
    1a6e:	4640      	mov	r0, r8
    1a70:	f10d 0c04 	add.w	ip, sp, #4
    1a74:	e729      	b.n	18ca <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1a76:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1a7a:	f10d 0c04 	add.w	ip, sp, #4
    1a7e:	b280      	uxth	r0, r0
    1a80:	e723      	b.n	18ca <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1a82:	f854 3b04 	ldr.w	r3, [r4], #4
    1a86:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1a8a:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1a8e:	2800      	cmp	r0, #0
    1a90:	f43f af1d 	beq.w	18ce <__pi_vfparse+0x52>
					outc (*st);
    1a94:	f10d 0c04 	add.w	ip, sp, #4
    1a98:	f7ff fee0 	bl	185c <outc.5724>
					st++;
    1a9c:	e7f5      	b.n	1a8a <__pi_vfparse+0x20e>
		c = *fm++;
    1a9e:	1c55      	adds	r5, r2, #1
    1aa0:	e709      	b.n	18b6 <__pi_vfparse+0x3a>
    1aa2:	bf00      	nop
    1aa4:	00002c6c 	andeq	r2, r0, ip, ror #24
    1aa8:	3b9aca00 	blcc	fe6b42b0 <_estack+0xde6af2b0>

00001aac <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ab0:	460e      	mov	r6, r1
    1ab2:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1ab4:	4604      	mov	r4, r0
    1ab6:	b140      	cbz	r0, 1aca <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab8:	4613      	mov	r3, r2
    1aba:	460a      	mov	r2, r1
    1abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1ac0:	f7ff fedc 	bl	187c <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1ac4:	4620      	mov	r0, r4
    1ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1aca:	4608      	mov	r0, r1
    1acc:	f7ff fa94 	bl	ff8 <__pi_strlen>
    1ad0:	f100 0511 	add.w	r5, r0, #17
    1ad4:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad6:	4628      	mov	r0, r5
    1ad8:	f7ff fb74 	bl	11c4 <__pi_malloc>
    1adc:	4604      	mov	r4, r0
    1ade:	2800      	cmp	r0, #0
    1ae0:	d0f0      	beq.n	1ac4 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae2:	463b      	mov	r3, r7
    1ae4:	4632      	mov	r2, r6
    1ae6:	4629      	mov	r1, r5
    1ae8:	f7ff fec8 	bl	187c <__pi_vfparse>
    1aec:	4285      	cmp	r5, r0
    1aee:	4680      	mov	r8, r0
    1af0:	d2e8      	bcs.n	1ac4 <vform+0x18>
		ufree (res);
    1af2:	4620      	mov	r0, r4
    1af4:	f7ff fb1a 	bl	112c <__pi_free>
		goto Again;
    1af8:	4645      	mov	r5, r8
    1afa:	e7ec      	b.n	1ad6 <vform+0x2a>

00001afc <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1afc:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1b02:	2800      	cmp	r0, #0
    1b04:	f000 81b5 	beq.w	1e72 <vscan+0x376>
    1b08:	2900      	cmp	r1, #0
    1b0a:	f000 81b4 	beq.w	1e76 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1b0e:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1b10:	270a      	movs	r7, #10
    1b12:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1b14:	f8df c370 	ldr.w	ip, [pc, #880]	; 1e88 <vscan+0x38c>
    1b18:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1b1a:	f811 0b01 	ldrb.w	r0, [r1], #1
    1b1e:	b170      	cbz	r0, 1b3e <vscan+0x42>
		if (*fmt++ != '%')
    1b20:	2825      	cmp	r0, #37	; 0x25
    1b22:	d1f9      	bne.n	1b18 <vscan+0x1c>
		switch (*fmt++) {
    1b24:	7870      	ldrb	r0, [r6, #1]
    1b26:	1cb1      	adds	r1, r6, #2
    1b28:	286c      	cmp	r0, #108	; 0x6c
    1b2a:	f000 80e1 	beq.w	1cf0 <vscan+0x1f4>
    1b2e:	d809      	bhi.n	1b44 <vscan+0x48>
    1b30:	2863      	cmp	r0, #99	; 0x63
    1b32:	f000 8184 	beq.w	1e3e <vscan+0x342>
    1b36:	2864      	cmp	r0, #100	; 0x64
    1b38:	d043      	beq.n	1bc2 <vscan+0xc6>
    1b3a:	2800      	cmp	r0, #0
    1b3c:	d1ec      	bne.n	1b18 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1b3e:	4620      	mov	r0, r4
    1b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1b44:	2875      	cmp	r0, #117	; 0x75
    1b46:	d074      	beq.n	1c32 <vscan+0x136>
    1b48:	2878      	cmp	r0, #120	; 0x78
    1b4a:	f000 8098 	beq.w	1c7e <vscan+0x182>
    1b4e:	2873      	cmp	r0, #115	; 0x73
    1b50:	d1e2      	bne.n	1b18 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1b52:	7818      	ldrb	r0, [r3, #0]
    1b54:	461e      	mov	r6, r3
    1b56:	f1a0 0e09 	sub.w	lr, r0, #9
    1b5a:	fa5f fe8e 	uxtb.w	lr, lr
    1b5e:	f1be 0f17 	cmp.w	lr, #23
    1b62:	4698      	mov	r8, r3
    1b64:	f103 0301 	add.w	r3, r3, #1
    1b68:	f240 8173 	bls.w	1e52 <vscan+0x356>
			if (*buf == '\0')
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d0e6      	beq.n	1b3e <vscan+0x42>
			if (*buf != ',') {
    1b70:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1b72:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1b76:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1b7a:	d00e      	beq.n	1b9a <vscan+0x9e>
    1b7c:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1b7e:	f818 3b01 	ldrb.w	r3, [r8], #1
    1b82:	f1a3 0009 	sub.w	r0, r3, #9
    1b86:	2801      	cmp	r0, #1
    1b88:	d907      	bls.n	1b9a <vscan+0x9e>
    1b8a:	2b0d      	cmp	r3, #13
    1b8c:	d005      	beq.n	1b9a <vscan+0x9e>
    1b8e:	2b2c      	cmp	r3, #44	; 0x2c
    1b90:	d003      	beq.n	1b9a <vscan+0x9e>
    1b92:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1b96:	f040 8163 	bne.w	1e60 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1b9a:	f896 8000 	ldrb.w	r8, [r6]
    1b9e:	4633      	mov	r3, r6
    1ba0:	f1a8 0009 	sub.w	r0, r8, #9
    1ba4:	b2c0      	uxtb	r0, r0
    1ba6:	2817      	cmp	r0, #23
    1ba8:	f106 0601 	add.w	r6, r6, #1
    1bac:	f240 815b 	bls.w	1e66 <vscan+0x36a>
			if (*buf == ',') buf++;
    1bb0:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1bb4:	bf08      	it	eq
    1bb6:	4633      	moveq	r3, r6
			*sap = '\0';
    1bb8:	f88e 5000 	strb.w	r5, [lr]
			break;
    1bbc:	e7ac      	b.n	1b18 <vscan+0x1c>
		    case 'd': scani (word); break;
    1bbe:	2e00      	cmp	r6, #0
    1bc0:	d0bd      	beq.n	1b3e <vscan+0x42>
    1bc2:	469e      	mov	lr, r3
    1bc4:	f813 6b01 	ldrb.w	r6, [r3], #1
    1bc8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1bcc:	2809      	cmp	r0, #9
    1bce:	d923      	bls.n	1c18 <vscan+0x11c>
    1bd0:	2e2d      	cmp	r6, #45	; 0x2d
    1bd2:	d001      	beq.n	1bd8 <vscan+0xdc>
    1bd4:	2e2b      	cmp	r6, #43	; 0x2b
    1bd6:	d1f2      	bne.n	1bbe <vscan+0xc2>
    1bd8:	7818      	ldrb	r0, [r3, #0]
    1bda:	469e      	mov	lr, r3
    1bdc:	3830      	subs	r0, #48	; 0x30
    1bde:	2809      	cmp	r0, #9
    1be0:	d8ef      	bhi.n	1bc2 <vscan+0xc6>
    1be2:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1be6:	f1d9 0800 	rsbs	r8, r9, #0
    1bea:	eb48 0809 	adc.w	r8, r8, r9
    1bee:	f852 6b04 	ldr.w	r6, [r2], #4
    1bf2:	3401      	adds	r4, #1
    1bf4:	8035      	strh	r5, [r6, #0]
    1bf6:	f89e 0000 	ldrb.w	r0, [lr]
    1bfa:	4673      	mov	r3, lr
    1bfc:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1c00:	f1b9 0f09 	cmp.w	r9, #9
    1c04:	f10e 0e01 	add.w	lr, lr, #1
    1c08:	d909      	bls.n	1c1e <vscan+0x122>
    1c0a:	f1b8 0f00 	cmp.w	r8, #0
    1c0e:	d183      	bne.n	1b18 <vscan+0x1c>
    1c10:	8830      	ldrh	r0, [r6, #0]
    1c12:	4240      	negs	r0, r0
    1c14:	8030      	strh	r0, [r6, #0]
    1c16:	e77f      	b.n	1b18 <vscan+0x1c>
    1c18:	f04f 0800 	mov.w	r8, #0
    1c1c:	e7e7      	b.n	1bee <vscan+0xf2>
    1c1e:	8833      	ldrh	r3, [r6, #0]
    1c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c24:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1c28:	3030      	adds	r0, #48	; 0x30
    1c2a:	8030      	strh	r0, [r6, #0]
    1c2c:	e7e3      	b.n	1bf6 <vscan+0xfa>
		    case 'u': scanu (word); break;
    1c2e:	2800      	cmp	r0, #0
    1c30:	d085      	beq.n	1b3e <vscan+0x42>
    1c32:	7818      	ldrb	r0, [r3, #0]
    1c34:	461e      	mov	r6, r3
    1c36:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1c3a:	f1be 0f09 	cmp.w	lr, #9
    1c3e:	f103 0301 	add.w	r3, r3, #1
    1c42:	d8f4      	bhi.n	1c2e <vscan+0x132>
    1c44:	f852 eb04 	ldr.w	lr, [r2], #4
    1c48:	3401      	adds	r4, #1
    1c4a:	f8ae 5000 	strh.w	r5, [lr]
    1c4e:	7830      	ldrb	r0, [r6, #0]
    1c50:	4633      	mov	r3, r6
    1c52:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1c56:	f1b8 0f09 	cmp.w	r8, #9
    1c5a:	f106 0601 	add.w	r6, r6, #1
    1c5e:	f63f af5b 	bhi.w	1b18 <vscan+0x1c>
    1c62:	f8be 3000 	ldrh.w	r3, [lr]
    1c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1c6e:	3830      	subs	r0, #48	; 0x30
    1c70:	f8ae 0000 	strh.w	r0, [lr]
    1c74:	e7eb      	b.n	1c4e <vscan+0x152>
		    case 'x': scanx (word); break;
    1c76:	f1be 0f00 	cmp.w	lr, #0
    1c7a:	f43f af60 	beq.w	1b3e <vscan+0x42>
    1c7e:	f893 e000 	ldrb.w	lr, [r3]
    1c82:	461e      	mov	r6, r3
    1c84:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1c88:	2809      	cmp	r0, #9
    1c8a:	f103 0301 	add.w	r3, r3, #1
    1c8e:	d904      	bls.n	1c9a <vscan+0x19e>
    1c90:	f02e 0020 	bic.w	r0, lr, #32
    1c94:	3841      	subs	r0, #65	; 0x41
    1c96:	2805      	cmp	r0, #5
    1c98:	d8ed      	bhi.n	1c76 <vscan+0x17a>
    1c9a:	f852 eb04 	ldr.w	lr, [r2], #4
    1c9e:	3401      	adds	r4, #1
    1ca0:	f8ae 5000 	strh.w	r5, [lr]
    1ca4:	f106 0805 	add.w	r8, r6, #5
    1ca8:	f896 9000 	ldrb.w	r9, [r6]
    1cac:	4633      	mov	r3, r6
    1cae:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1cb2:	b2c0      	uxtb	r0, r0
    1cb4:	2809      	cmp	r0, #9
    1cb6:	f106 0601 	add.w	r6, r6, #1
    1cba:	f240 80de 	bls.w	1e7a <vscan+0x37e>
    1cbe:	f029 0020 	bic.w	r0, r9, #32
    1cc2:	3841      	subs	r0, #65	; 0x41
    1cc4:	2805      	cmp	r0, #5
    1cc6:	f63f af27 	bhi.w	1b18 <vscan+0x1c>
    1cca:	4546      	cmp	r6, r8
    1ccc:	f43f af24 	beq.w	1b18 <vscan+0x1c>
    1cd0:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1cd4:	2b05      	cmp	r3, #5
    1cd6:	bf94      	ite	ls
    1cd8:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1cdc:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1ce0:	b2c0      	uxtb	r0, r0
    1ce2:	f8be 3000 	ldrh.w	r3, [lr]
    1ce6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1cea:	f8ae 0000 	strh.w	r0, [lr]
    1cee:	e7db      	b.n	1ca8 <vscan+0x1ac>
			switch (*fmt++) {
    1cf0:	78b0      	ldrb	r0, [r6, #2]
    1cf2:	1cf1      	adds	r1, r6, #3
    1cf4:	2875      	cmp	r0, #117	; 0x75
    1cf6:	d07d      	beq.n	1df4 <vscan+0x2f8>
    1cf8:	d831      	bhi.n	1d5e <vscan+0x262>
    1cfa:	2800      	cmp	r0, #0
    1cfc:	f43f af1f 	beq.w	1b3e <vscan+0x42>
    1d00:	2864      	cmp	r0, #100	; 0x64
    1d02:	f47f af09 	bne.w	1b18 <vscan+0x1c>
    1d06:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1d08:	f813 6b01 	ldrb.w	r6, [r3], #1
    1d0c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1d10:	2809      	cmp	r0, #9
    1d12:	d962      	bls.n	1dda <vscan+0x2de>
    1d14:	2e2d      	cmp	r6, #45	; 0x2d
    1d16:	d001      	beq.n	1d1c <vscan+0x220>
    1d18:	2e2b      	cmp	r6, #43	; 0x2b
    1d1a:	d15b      	bne.n	1dd4 <vscan+0x2d8>
    1d1c:	7818      	ldrb	r0, [r3, #0]
    1d1e:	4698      	mov	r8, r3
    1d20:	3830      	subs	r0, #48	; 0x30
    1d22:	2809      	cmp	r0, #9
    1d24:	d8ef      	bhi.n	1d06 <vscan+0x20a>
    1d26:	3e2d      	subs	r6, #45	; 0x2d
    1d28:	4270      	negs	r0, r6
    1d2a:	4170      	adcs	r0, r6
    1d2c:	f852 eb04 	ldr.w	lr, [r2], #4
    1d30:	3401      	adds	r4, #1
    1d32:	f8ce 5000 	str.w	r5, [lr]
    1d36:	f898 6000 	ldrb.w	r6, [r8]
    1d3a:	4643      	mov	r3, r8
    1d3c:	3e30      	subs	r6, #48	; 0x30
    1d3e:	fa5f f986 	uxtb.w	r9, r6
    1d42:	f1b9 0f09 	cmp.w	r9, #9
    1d46:	f108 0801 	add.w	r8, r8, #1
    1d4a:	d948      	bls.n	1dde <vscan+0x2e2>
    1d4c:	2800      	cmp	r0, #0
    1d4e:	f47f aee3 	bne.w	1b18 <vscan+0x1c>
    1d52:	f8de 0000 	ldr.w	r0, [lr]
    1d56:	4240      	negs	r0, r0
    1d58:	f8ce 0000 	str.w	r0, [lr]
    1d5c:	e6dc      	b.n	1b18 <vscan+0x1c>
    1d5e:	2878      	cmp	r0, #120	; 0x78
    1d60:	f47f aeda 	bne.w	1b18 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1d64:	f893 e000 	ldrb.w	lr, [r3]
    1d68:	461e      	mov	r6, r3
    1d6a:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1d6e:	2809      	cmp	r0, #9
    1d70:	f103 0301 	add.w	r3, r3, #1
    1d74:	d904      	bls.n	1d80 <vscan+0x284>
    1d76:	f02e 0020 	bic.w	r0, lr, #32
    1d7a:	3841      	subs	r0, #65	; 0x41
    1d7c:	2805      	cmp	r0, #5
    1d7e:	d85a      	bhi.n	1e36 <vscan+0x33a>
    1d80:	f852 eb04 	ldr.w	lr, [r2], #4
    1d84:	3401      	adds	r4, #1
    1d86:	f8ce 5000 	str.w	r5, [lr]
    1d8a:	f106 0809 	add.w	r8, r6, #9
    1d8e:	f896 9000 	ldrb.w	r9, [r6]
    1d92:	4633      	mov	r3, r6
    1d94:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1d98:	b2c0      	uxtb	r0, r0
    1d9a:	2809      	cmp	r0, #9
    1d9c:	f106 0601 	add.w	r6, r6, #1
    1da0:	d96f      	bls.n	1e82 <vscan+0x386>
    1da2:	f029 0020 	bic.w	r0, r9, #32
    1da6:	3841      	subs	r0, #65	; 0x41
    1da8:	2805      	cmp	r0, #5
    1daa:	f63f aeb5 	bhi.w	1b18 <vscan+0x1c>
    1dae:	4546      	cmp	r6, r8
    1db0:	f43f aeb2 	beq.w	1b18 <vscan+0x1c>
    1db4:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1db8:	2b05      	cmp	r3, #5
    1dba:	bf94      	ite	ls
    1dbc:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1dc0:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1dc4:	b2c0      	uxtb	r0, r0
    1dc6:	f8de 3000 	ldr.w	r3, [lr]
    1dca:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1dce:	f8ce 0000 	str.w	r0, [lr]
    1dd2:	e7dc      	b.n	1d8e <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1dd4:	2e00      	cmp	r6, #0
    1dd6:	d196      	bne.n	1d06 <vscan+0x20a>
    1dd8:	e6b1      	b.n	1b3e <vscan+0x42>
    1dda:	2000      	movs	r0, #0
    1ddc:	e7a6      	b.n	1d2c <vscan+0x230>
    1dde:	f8de 3000 	ldr.w	r3, [lr]
    1de2:	b2b6      	uxth	r6, r6
    1de4:	437b      	muls	r3, r7
    1de6:	1b9e      	subs	r6, r3, r6
    1de8:	f8ce 6000 	str.w	r6, [lr]
    1dec:	e7a3      	b.n	1d36 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1dee:	2800      	cmp	r0, #0
    1df0:	f43f aea5 	beq.w	1b3e <vscan+0x42>
    1df4:	7818      	ldrb	r0, [r3, #0]
    1df6:	461e      	mov	r6, r3
    1df8:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1dfc:	f1be 0f09 	cmp.w	lr, #9
    1e00:	f103 0301 	add.w	r3, r3, #1
    1e04:	d8f3      	bhi.n	1dee <vscan+0x2f2>
    1e06:	f852 eb04 	ldr.w	lr, [r2], #4
    1e0a:	3401      	adds	r4, #1
    1e0c:	f8ce 5000 	str.w	r5, [lr]
    1e10:	7830      	ldrb	r0, [r6, #0]
    1e12:	4633      	mov	r3, r6
    1e14:	3830      	subs	r0, #48	; 0x30
    1e16:	fa5f f880 	uxtb.w	r8, r0
    1e1a:	f1b8 0f09 	cmp.w	r8, #9
    1e1e:	f106 0601 	add.w	r6, r6, #1
    1e22:	f63f ae79 	bhi.w	1b18 <vscan+0x1c>
    1e26:	f8de 3000 	ldr.w	r3, [lr]
    1e2a:	b280      	uxth	r0, r0
    1e2c:	fb07 0003 	mla	r0, r7, r3, r0
    1e30:	f8ce 0000 	str.w	r0, [lr]
    1e34:	e7ec      	b.n	1e10 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    1e36:	f1be 0f00 	cmp.w	lr, #0
    1e3a:	d193      	bne.n	1d64 <vscan+0x268>
    1e3c:	e67f      	b.n	1b3e <vscan+0x42>
			if ((c = *buf++) == '\0')
    1e3e:	f813 0b01 	ldrb.w	r0, [r3], #1
    1e42:	2800      	cmp	r0, #0
    1e44:	f43f ae7b 	beq.w	1b3e <vscan+0x42>
			sap = va_arg (ap, char*);
    1e48:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    1e4c:	3401      	adds	r4, #1
			*sap = c;
    1e4e:	7030      	strb	r0, [r6, #0]
			break;
    1e50:	e662      	b.n	1b18 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1e52:	fa2c fe0e 	lsr.w	lr, ip, lr
    1e56:	f01e 0f01 	tst.w	lr, #1
    1e5a:	f47f ae7a 	bne.w	1b52 <vscan+0x56>
    1e5e:	e687      	b.n	1b70 <vscan+0x74>
						*sap++ = *buf++;
    1e60:	f80e 3b01 	strb.w	r3, [lr], #1
    1e64:	e68a      	b.n	1b7c <vscan+0x80>
			while (isspace (*buf)) buf++;
    1e66:	fa2c f000 	lsr.w	r0, ip, r0
    1e6a:	07c0      	lsls	r0, r0, #31
    1e6c:	f53f ae95 	bmi.w	1b9a <vscan+0x9e>
    1e70:	e6a2      	b.n	1bb8 <vscan+0xbc>
		return 0;
    1e72:	4604      	mov	r4, r0
    1e74:	e663      	b.n	1b3e <vscan+0x42>
    1e76:	460c      	mov	r4, r1
    1e78:	e661      	b.n	1b3e <vscan+0x42>
		    case 'x': scanx (word); break;
    1e7a:	4546      	cmp	r6, r8
    1e7c:	f47f af31 	bne.w	1ce2 <vscan+0x1e6>
    1e80:	e64a      	b.n	1b18 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1e82:	4546      	cmp	r6, r8
    1e84:	d19f      	bne.n	1dc6 <vscan+0x2ca>
    1e86:	e647      	b.n	1b18 <vscan+0x1c>
    1e88:	00800013 	addeq	r0, r0, r3, lsl r0

00001e8c <NOROM_AONBatMonTemperatureGetDegC>:
    1e8c:	4b08      	ldr	r3, [pc, #32]	; (1eb0 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    1e8e:	6818      	ldr	r0, [r3, #0]
    1e90:	4b08      	ldr	r3, [pc, #32]	; (1eb4 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    1e92:	7819      	ldrb	r1, [r3, #0]
    1e94:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    1e96:	681a      	ldr	r2, [r3, #0]
    1e98:	f340 0310 	sbfx	r3, r0, #0, #17
    1e9c:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    1ea0:	b248      	sxtb	r0, r1
    1ea2:	4350      	muls	r0, r2
    1ea4:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    1ea8:	3080      	adds	r0, #128	; 0x80
    1eaa:	1200      	asrs	r0, r0, #8
    1eac:	4770      	bx	lr
    1eae:	bf00      	nop
    1eb0:	40095030 	andmi	r5, r9, r0, lsr r0
    1eb4:	5000130c 	andpl	r1, r0, ip, lsl #6
    1eb8:	40095028 	andmi	r5, r9, r8, lsr #32

00001ebc <NOROM_AONRTCCurrent64BitValueGet>:
    1ebc:	4b03      	ldr	r3, [pc, #12]	; (1ecc <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    1ebe:	4904      	ldr	r1, [pc, #16]	; (1ed0 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    1ec0:	681a      	ldr	r2, [r3, #0]
    1ec2:	6808      	ldr	r0, [r1, #0]
    1ec4:	6819      	ldr	r1, [r3, #0]
    1ec6:	4291      	cmp	r1, r2
    1ec8:	d1f8      	bne.n	1ebc <NOROM_AONRTCCurrent64BitValueGet>
    1eca:	4770      	bx	lr
    1ecc:	40092008 	andmi	r2, r9, r8
    1ed0:	4009200c 	andmi	r2, r9, ip

00001ed4 <NOROM_CPUcpsid>:
    1ed4:	f3ef 8010 	mrs	r0, PRIMASK
    1ed8:	b672      	cpsid	i
    1eda:	4770      	bx	lr

00001edc <NOROM_CPUcpsie>:
    1edc:	f3ef 8010 	mrs	r0, PRIMASK
    1ee0:	b662      	cpsie	i
    1ee2:	4770      	bx	lr

00001ee4 <TrimAfterColdResetWakeupFromShutDown>:
    1ee4:	b538      	push	{r3, r4, r5, lr}
    1ee6:	4605      	mov	r5, r0
    1ee8:	4b26      	ldr	r3, [pc, #152]	; (1f84 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    1eea:	2201      	movs	r2, #1
    1eec:	601a      	str	r2, [r3, #0]
    1eee:	4b26      	ldr	r3, [pc, #152]	; (1f88 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d0fb      	beq.n	1eee <TrimAfterColdResetWakeupFromShutDown+0xa>
    1ef6:	4b25      	ldr	r3, [pc, #148]	; (1f8c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1ef8:	22c0      	movs	r2, #192	; 0xc0
    1efa:	601a      	str	r2, [r3, #0]
    1efc:	4b24      	ldr	r3, [pc, #144]	; (1f90 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    1efe:	681b      	ldr	r3, [r3, #0]
    1f00:	079b      	lsls	r3, r3, #30
    1f02:	bf5f      	itttt	pl
    1f04:	4b23      	ldrpl	r3, [pc, #140]	; (1f94 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    1f06:	4a24      	ldrpl	r2, [pc, #144]	; (1f98 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    1f08:	681b      	ldrpl	r3, [r3, #0]
    1f0a:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    1f0e:	bf5c      	itt	pl
    1f10:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    1f14:	7013      	strbpl	r3, [r2, #0]
    1f16:	4b21      	ldr	r3, [pc, #132]	; (1f9c <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    1f18:	2200      	movs	r2, #0
    1f1a:	601a      	str	r2, [r3, #0]
    1f1c:	4b20      	ldr	r3, [pc, #128]	; (1fa0 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    1f1e:	681c      	ldr	r4, [r3, #0]
    1f20:	4620      	mov	r0, r4
    1f22:	f000 f8d9 	bl	20d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    1f26:	4628      	mov	r0, r5
    1f28:	4621      	mov	r1, r4
    1f2a:	f000 fa0d 	bl	2348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    1f2e:	f240 221d 	movw	r2, #541	; 0x21d
    1f32:	4b1c      	ldr	r3, [pc, #112]	; (1fa4 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	b29b      	uxth	r3, r3
    1f38:	4293      	cmp	r3, r2
    1f3a:	d814      	bhi.n	1f66 <TrimAfterColdResetWakeupFromShutDown+0x82>
    1f3c:	4a1a      	ldr	r2, [pc, #104]	; (1fa8 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    1f3e:	6813      	ldr	r3, [r2, #0]
    1f40:	6812      	ldr	r2, [r2, #0]
    1f42:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1f46:	f3c2 4203 	ubfx	r2, r2, #16, #4
    1f4a:	b103      	cbz	r3, 1f4e <TrimAfterColdResetWakeupFromShutDown+0x6a>
    1f4c:	3b01      	subs	r3, #1
    1f4e:	1f91      	subs	r1, r2, #6
    1f50:	2901      	cmp	r1, #1
    1f52:	bf86      	itte	hi
    1f54:	3202      	addhi	r2, #2
    1f56:	f002 020f 	andhi.w	r2, r2, #15
    1f5a:	2207      	movls	r2, #7
    1f5c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    1f60:	4a12      	ldr	r2, [pc, #72]	; (1fac <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    1f62:	b2db      	uxtb	r3, r3
    1f64:	7013      	strb	r3, [r2, #0]
    1f66:	4620      	mov	r0, r4
    1f68:	f000 fabc 	bl	24e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    1f6c:	4b10      	ldr	r3, [pc, #64]	; (1fb0 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    1f6e:	2002      	movs	r0, #2
    1f70:	681b      	ldr	r3, [r3, #0]
    1f72:	68db      	ldr	r3, [r3, #12]
    1f74:	4798      	blx	r3
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1f78:	2240      	movs	r2, #64	; 0x40
    1f7a:	601a      	str	r2, [r3, #0]
    1f7c:	4b0d      	ldr	r3, [pc, #52]	; (1fb4 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    1f7e:	2201      	movs	r2, #1
    1f80:	601a      	str	r2, [r3, #0]
    1f82:	bd38      	pop	{r3, r4, r5, pc}
    1f84:	40091010 	andmi	r1, r9, r0, lsl r0
    1f88:	43220294 			; <UNDEFINED> instruction: 0x43220294
    1f8c:	400c6000 	andmi	r6, ip, r0
    1f90:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    1f94:	50003fac 	andpl	r3, r0, ip, lsr #31
    1f98:	40086256 	andmi	r6, r8, r6, asr r2
    1f9c:	40091040 	andmi	r1, r9, r0, asr #32
    1fa0:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    1fa4:	50001314 	andpl	r1, r0, r4, lsl r3
    1fa8:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    1fac:	40086002 	andmi	r6, r8, r2
    1fb0:	100001a0 	andne	r0, r0, r0, lsr #3
    1fb4:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00001fb8 <NOROM_SetupTrimDevice>:
    1fb8:	b510      	push	{r4, lr}
    1fba:	4b1f      	ldr	r3, [pc, #124]	; (2038 <NOROM_SetupTrimDevice+0x80>)
    1fbc:	681c      	ldr	r4, [r3, #0]
    1fbe:	1c63      	adds	r3, r4, #1
    1fc0:	bf08      	it	eq
    1fc2:	2400      	moveq	r4, #0
    1fc4:	f000 fcde 	bl	2984 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    1fc8:	4b1c      	ldr	r3, [pc, #112]	; (203c <NOROM_SetupTrimDevice+0x84>)
    1fca:	2200      	movs	r2, #0
    1fcc:	601a      	str	r2, [r3, #0]
    1fce:	4a1c      	ldr	r2, [pc, #112]	; (2040 <NOROM_SetupTrimDevice+0x88>)
    1fd0:	2301      	movs	r3, #1
    1fd2:	6013      	str	r3, [r2, #0]
    1fd4:	4a1b      	ldr	r2, [pc, #108]	; (2044 <NOROM_SetupTrimDevice+0x8c>)
    1fd6:	6013      	str	r3, [r2, #0]
    1fd8:	f000 fa3e 	bl	2458 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    1fdc:	4b1a      	ldr	r3, [pc, #104]	; (2048 <NOROM_SetupTrimDevice+0x90>)
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	b123      	cbz	r3, 1fec <NOROM_SetupTrimDevice+0x34>
    1fe2:	4b1a      	ldr	r3, [pc, #104]	; (204c <NOROM_SetupTrimDevice+0x94>)
    1fe4:	4620      	mov	r0, r4
    1fe6:	681b      	ldr	r3, [r3, #0]
    1fe8:	f7ff ff7c 	bl	1ee4 <TrimAfterColdResetWakeupFromShutDown>
    1fec:	4b18      	ldr	r3, [pc, #96]	; (2050 <NOROM_SetupTrimDevice+0x98>)
    1fee:	2200      	movs	r2, #0
    1ff0:	601a      	str	r2, [r3, #0]
    1ff2:	4a18      	ldr	r2, [pc, #96]	; (2054 <NOROM_SetupTrimDevice+0x9c>)
    1ff4:	6813      	ldr	r3, [r2, #0]
    1ff6:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    1ffa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1ffe:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    2002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2006:	6013      	str	r3, [r2, #0]
    2008:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    200c:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    2010:	6813      	ldr	r3, [r2, #0]
    2012:	f3c3 3301 	ubfx	r3, r3, #12, #2
    2016:	2b01      	cmp	r3, #1
    2018:	bf01      	itttt	eq
    201a:	6813      	ldreq	r3, [r2, #0]
    201c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    2020:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2024:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2028:	bf04      	itt	eq
    202a:	6011      	streq	r1, [r2, #0]
    202c:	6013      	streq	r3, [r2, #0]
    202e:	4b0a      	ldr	r3, [pc, #40]	; (2058 <NOROM_SetupTrimDevice+0xa0>)
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	2b00      	cmp	r3, #0
    2034:	d1fb      	bne.n	202e <NOROM_SetupTrimDevice+0x76>
    2036:	bd10      	pop	{r4, pc}
    2038:	5000131c 	andpl	r1, r0, ip, lsl r3
    203c:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    2040:	400c605c 	andmi	r6, ip, ip, asr r0
    2044:	43042208 	movwmi	r2, #16904	; 0x4208
    2048:	43280180 			; <UNDEFINED> instruction: 0x43280180
    204c:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    2050:	4008218c 	andmi	r2, r8, ip, lsl #3
    2054:	40032048 	andmi	r2, r3, r8, asr #32
    2058:	4268000c 	rsbmi	r0, r8, #12

0000205c <NOROM_SetupSetVddrLevel>:
    205c:	b530      	push	{r4, r5, lr}
    205e:	4b19      	ldr	r3, [pc, #100]	; (20c4 <NOROM_SetupSetVddrLevel+0x68>)
    2060:	681a      	ldr	r2, [r3, #0]
    2062:	4b19      	ldr	r3, [pc, #100]	; (20c8 <NOROM_SetupSetVddrLevel+0x6c>)
    2064:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	2a15      	cmp	r2, #21
    206c:	f003 031f 	and.w	r3, r3, #31
    2070:	bf88      	it	hi
    2072:	3a20      	subhi	r2, #32
    2074:	2b15      	cmp	r3, #21
    2076:	bf88      	it	hi
    2078:	3b20      	subhi	r3, #32
    207a:	4293      	cmp	r3, r2
    207c:	d020      	beq.n	20c0 <NOROM_SetupSetVddrLevel+0x64>
    207e:	4913      	ldr	r1, [pc, #76]	; (20cc <NOROM_SetupSetVddrLevel+0x70>)
    2080:	2000      	movs	r0, #0
    2082:	6008      	str	r0, [r1, #0]
    2084:	4608      	mov	r0, r1
    2086:	1ad1      	subs	r1, r2, r3
    2088:	2902      	cmp	r1, #2
    208a:	dc05      	bgt.n	2098 <NOROM_SetupSetVddrLevel+0x3c>
    208c:	f06f 0401 	mvn.w	r4, #1
    2090:	42a1      	cmp	r1, r4
    2092:	bfb8      	it	lt
    2094:	4621      	movlt	r1, r4
    2096:	e000      	b.n	209a <NOROM_SetupSetVddrLevel+0x3e>
    2098:	2102      	movs	r1, #2
    209a:	440b      	add	r3, r1
    209c:	490c      	ldr	r1, [pc, #48]	; (20d0 <NOROM_SetupSetVddrLevel+0x74>)
    209e:	4d0d      	ldr	r5, [pc, #52]	; (20d4 <NOROM_SetupSetVddrLevel+0x78>)
    20a0:	680c      	ldr	r4, [r1, #0]
    20a2:	f003 041f 	and.w	r4, r3, #31
    20a6:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    20aa:	802c      	strh	r4, [r5, #0]
    20ac:	4293      	cmp	r3, r2
    20ae:	f04f 0401 	mov.w	r4, #1
    20b2:	600c      	str	r4, [r1, #0]
    20b4:	d1e7      	bne.n	2086 <NOROM_SetupSetVddrLevel+0x2a>
    20b6:	680b      	ldr	r3, [r1, #0]
    20b8:	600c      	str	r4, [r1, #0]
    20ba:	680b      	ldr	r3, [r1, #0]
    20bc:	6004      	str	r4, [r0, #0]
    20be:	680b      	ldr	r3, [r1, #0]
    20c0:	bd30      	pop	{r4, r5, pc}
    20c2:	bf00      	nop
    20c4:	50001388 	andpl	r1, r0, r8, lsl #7
    20c8:	40086206 	andmi	r6, r8, r6, lsl #4
    20cc:	43200098 			; <UNDEFINED> instruction: 0x43200098
    20d0:	4009202c 	andmi	r2, r9, ip, lsr #32
    20d4:	4008626c 	andmi	r6, r8, ip, ror #4

000020d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    20d8:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    20dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    20e0:	b510      	push	{r4, lr}
    20e2:	4604      	mov	r4, r0
    20e4:	d10f      	bne.n	2106 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    20e6:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    20ea:	4a1e      	ldr	r2, [pc, #120]	; (2164 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    20ec:	2380      	movs	r3, #128	; 0x80
    20ee:	7013      	strb	r3, [r2, #0]
    20f0:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    20f4:	f802 3c10 	strb.w	r3, [r2, #-16]
    20f8:	f7ff ffb0 	bl	205c <NOROM_SetupSetVddrLevel>
    20fc:	4b1a      	ldr	r3, [pc, #104]	; (2168 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2104:	e003      	b.n	210e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    2106:	4b19      	ldr	r3, [pc, #100]	; (216c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    210e:	2b15      	cmp	r3, #21
    2110:	bf88      	it	hi
    2112:	3b20      	subhi	r3, #32
    2114:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2118:	3301      	adds	r3, #1
    211a:	2b15      	cmp	r3, #21
    211c:	dc05      	bgt.n	212a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    211e:	f06f 0209 	mvn.w	r2, #9
    2122:	4293      	cmp	r3, r2
    2124:	bfb8      	it	lt
    2126:	4613      	movlt	r3, r2
    2128:	e000      	b.n	212c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    212a:	2315      	movs	r3, #21
    212c:	4a10      	ldr	r2, [pc, #64]	; (2170 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    212e:	f003 031f 	and.w	r3, r3, #31
    2132:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    2136:	8013      	strh	r3, [r2, #0]
    2138:	4b0e      	ldr	r3, [pc, #56]	; (2174 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	f013 0302 	ands.w	r3, r3, #2
    2140:	bf0a      	itet	eq
    2142:	4a0d      	ldreq	r2, [pc, #52]	; (2178 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    2144:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    2148:	6013      	streq	r3, [r2, #0]
    214a:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    214e:	4a0b      	ldr	r2, [pc, #44]	; (217c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    2150:	f083 0301 	eor.w	r3, r3, #1
    2154:	6013      	str	r3, [r2, #0]
    2156:	f3c4 6480 	ubfx	r4, r4, #26, #1
    215a:	4b09      	ldr	r3, [pc, #36]	; (2180 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    215c:	f084 0401 	eor.w	r4, r4, #1
    2160:	601c      	str	r4, [r3, #0]
    2162:	bd10      	pop	{r4, pc}
    2164:	40086225 	andmi	r6, r8, r5, lsr #4
    2168:	50001388 	andpl	r1, r0, r8, lsl #7
    216c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2170:	4008626e 	andmi	r6, r8, lr, ror #4
    2174:	40090000 	andmi	r0, r9, r0
    2178:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    217c:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    2180:	43200008 			; <UNDEFINED> instruction: 0x43200008

00002184 <NOROM_SetupGetTrimForAnabypassValue1>:
    2184:	4b15      	ldr	r3, [pc, #84]	; (21dc <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    2186:	0381      	lsls	r1, r0, #14
    2188:	681b      	ldr	r3, [r3, #0]
    218a:	f3c3 6283 	ubfx	r2, r3, #26, #4
    218e:	f3c3 238f 	ubfx	r3, r3, #10, #16
    2192:	d41f      	bmi.n	21d4 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2194:	f340 2007 	sbfx	r0, r0, #8, #8
    2198:	2800      	cmp	r0, #0
    219a:	da19      	bge.n	21d0 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    219c:	085b      	lsrs	r3, r3, #1
    219e:	d105      	bne.n	21ac <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    21a0:	0852      	lsrs	r2, r2, #1
    21a2:	bf06      	itte	eq
    21a4:	2301      	moveq	r3, #1
    21a6:	461a      	moveq	r2, r3
    21a8:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    21ac:	3001      	adds	r0, #1
    21ae:	e7f3      	b.n	2198 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    21b0:	005b      	lsls	r3, r3, #1
    21b2:	f043 0301 	orr.w	r3, r3, #1
    21b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    21ba:	d308      	bcc.n	21ce <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    21bc:	0052      	lsls	r2, r2, #1
    21be:	f042 0201 	orr.w	r2, r2, #1
    21c2:	2a0f      	cmp	r2, #15
    21c4:	bf86      	itte	hi
    21c6:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    21ca:	220f      	movhi	r2, #15
    21cc:	2301      	movls	r3, #1
    21ce:	3801      	subs	r0, #1
    21d0:	2800      	cmp	r0, #0
    21d2:	d1ed      	bne.n	21b0 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    21d4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    21d8:	4770      	bx	lr
    21da:	bf00      	nop
    21dc:	50001350 	andpl	r1, r0, r0, asr r3

000021e0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    21e0:	4a04      	ldr	r2, [pc, #16]	; (21f4 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    21e2:	6813      	ldr	r3, [r2, #0]
    21e4:	6810      	ldr	r0, [r2, #0]
    21e6:	f3c3 0387 	ubfx	r3, r3, #2, #8
    21ea:	f000 0003 	and.w	r0, r0, #3
    21ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    21f2:	4770      	bx	lr
    21f4:	50001350 	andpl	r1, r0, r0, asr r3

000021f8 <NOROM_SetupGetTrimForAmpcompTh2>:
    21f8:	4b02      	ldr	r3, [pc, #8]	; (2204 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    21fa:	6818      	ldr	r0, [r3, #0]
    21fc:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    2200:	4770      	bx	lr
    2202:	bf00      	nop
    2204:	50001374 	andpl	r1, r0, r4, ror r3

00002208 <NOROM_SetupGetTrimForAmpcompTh1>:
    2208:	4b03      	ldr	r3, [pc, #12]	; (2218 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    220a:	6818      	ldr	r0, [r3, #0]
    220c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2210:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2214:	4770      	bx	lr
    2216:	bf00      	nop
    2218:	50001370 	andpl	r1, r0, r0, ror r3

0000221c <NOROM_SetupGetTrimForAmpcompCtrl>:
    221c:	b570      	push	{r4, r5, r6, lr}
    221e:	4b15      	ldr	r3, [pc, #84]	; (2274 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    2220:	4915      	ldr	r1, [pc, #84]	; (2278 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    2222:	681c      	ldr	r4, [r3, #0]
    2224:	6809      	ldr	r1, [r1, #0]
    2226:	f3c4 5203 	ubfx	r2, r4, #20, #4
    222a:	f011 0501 	ands.w	r5, r1, #1
    222e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    2232:	d113      	bne.n	225c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2234:	4911      	ldr	r1, [pc, #68]	; (227c <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    2236:	6809      	ldr	r1, [r1, #0]
    2238:	f341 2603 	sbfx	r6, r1, #8, #4
    223c:	18b2      	adds	r2, r6, r2
    223e:	d403      	bmi.n	2248 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2240:	2a0f      	cmp	r2, #15
    2242:	bfa8      	it	ge
    2244:	220f      	movge	r2, #15
    2246:	e000      	b.n	224a <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    2248:	462a      	mov	r2, r5
    224a:	f341 3103 	sbfx	r1, r1, #12, #4
    224e:	18cb      	adds	r3, r1, r3
    2250:	d403      	bmi.n	225a <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    2252:	2b0f      	cmp	r3, #15
    2254:	bfa8      	it	ge
    2256:	230f      	movge	r3, #15
    2258:	e000      	b.n	225c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    225a:	2300      	movs	r3, #0
    225c:	b2a1      	uxth	r1, r4
    225e:	2821      	cmp	r0, #33	; 0x21
    2260:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    2264:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2268:	bf84      	itt	hi
    226a:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    226e:	4323      	orrhi	r3, r4
    2270:	4618      	mov	r0, r3
    2272:	bd70      	pop	{r4, r5, r6, pc}
    2274:	50001378 	andpl	r1, r0, r8, ror r3
    2278:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    227c:	50003fac 	andpl	r3, r0, ip, lsr #31

00002280 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    2280:	281f      	cmp	r0, #31
    2282:	bf83      	ittte	hi
    2284:	4b02      	ldrhi	r3, [pc, #8]	; (2290 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    2286:	6818      	ldrhi	r0, [r3, #0]
    2288:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    228c:	2000      	movls	r0, #0
    228e:	4770      	bx	lr
    2290:	50001398 	mulpl	r0, r8, r3

00002294 <NOROM_SetupGetTrimForAdcShModeEn>:
    2294:	2821      	cmp	r0, #33	; 0x21
    2296:	bf83      	ittte	hi
    2298:	4b02      	ldrhi	r3, [pc, #8]	; (22a4 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    229a:	6818      	ldrhi	r0, [r3, #0]
    229c:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    22a0:	2001      	movls	r0, #1
    22a2:	4770      	bx	lr
    22a4:	5000138c 	andpl	r1, r0, ip, lsl #7

000022a8 <NOROM_SetupGetTrimForAdcShVbufEn>:
    22a8:	2821      	cmp	r0, #33	; 0x21
    22aa:	bf83      	ittte	hi
    22ac:	4b02      	ldrhi	r3, [pc, #8]	; (22b8 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    22ae:	6818      	ldrhi	r0, [r3, #0]
    22b0:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    22b4:	2001      	movls	r0, #1
    22b6:	4770      	bx	lr
    22b8:	5000138c 	andpl	r1, r0, ip, lsl #7

000022bc <NOROM_SetupGetTrimForXoscHfCtl>:
    22bc:	281f      	cmp	r0, #31
    22be:	bf81      	itttt	hi
    22c0:	4b07      	ldrhi	r3, [pc, #28]	; (22e0 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    22c2:	681b      	ldrhi	r3, [r3, #0]
    22c4:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    22c8:	0080      	lslhi	r0, r0, #2
    22ca:	bf81      	itttt	hi
    22cc:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    22d0:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    22d4:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    22d8:	4318      	orrhi	r0, r3
    22da:	bf98      	it	ls
    22dc:	2000      	movls	r0, #0
    22de:	4770      	bx	lr
    22e0:	50001398 	mulpl	r0, r8, r3

000022e4 <NOROM_SetupGetTrimForXoscHfFastStart>:
    22e4:	4b02      	ldr	r3, [pc, #8]	; (22f0 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    22e6:	6818      	ldr	r0, [r3, #0]
    22e8:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	5000138c 	andpl	r1, r0, ip, lsl #7

000022f4 <NOROM_SetupGetTrimForRadcExtCfg>:
    22f4:	281f      	cmp	r0, #31
    22f6:	bf81      	itttt	hi
    22f8:	4b07      	ldrhi	r3, [pc, #28]	; (2318 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    22fa:	681b      	ldrhi	r3, [r3, #0]
    22fc:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    2300:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    2304:	bf81      	itttt	hi
    2306:	0400      	lslhi	r0, r0, #16
    2308:	031b      	lslhi	r3, r3, #12
    230a:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    230e:	b29b      	uxthhi	r3, r3
    2310:	bf8c      	ite	hi
    2312:	4318      	orrhi	r0, r3
    2314:	4801      	ldrls	r0, [pc, #4]	; (231c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    2316:	4770      	bx	lr
    2318:	50001398 	mulpl	r0, r8, r3
    231c:	403f8000 	eorsmi	r8, pc, r0

00002320 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    2320:	2821      	cmp	r0, #33	; 0x21
    2322:	bf83      	ittte	hi
    2324:	4b02      	ldrhi	r3, [pc, #8]	; (2330 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    2326:	6818      	ldrhi	r0, [r3, #0]
    2328:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    232c:	2000      	movls	r0, #0
    232e:	4770      	bx	lr
    2330:	5000138c 	andpl	r1, r0, ip, lsl #7

00002334 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    2334:	2821      	cmp	r0, #33	; 0x21
    2336:	bf83      	ittte	hi
    2338:	4b02      	ldrhi	r3, [pc, #8]	; (2344 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    233a:	6818      	ldrhi	r0, [r3, #0]
    233c:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    2340:	2000      	movls	r0, #0
    2342:	4770      	bx	lr
    2344:	5000138c 	andpl	r1, r0, ip, lsl #7

00002348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    2348:	b573      	push	{r0, r1, r4, r5, r6, lr}
    234a:	4605      	mov	r5, r0
    234c:	4608      	mov	r0, r1
    234e:	f7ff ff19 	bl	2184 <NOROM_SetupGetTrimForAnabypassValue1>
    2352:	4c39      	ldr	r4, [pc, #228]	; (2438 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    2354:	4602      	mov	r2, r0
    2356:	2118      	movs	r1, #24
    2358:	4620      	mov	r0, r4
    235a:	f000 fb33 	bl	29c4 <NOROM_DDI32RegWrite>
    235e:	f7ff ff3f 	bl	21e0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    2362:	4b36      	ldr	r3, [pc, #216]	; (243c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    2364:	b280      	uxth	r0, r0
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	9000      	str	r0, [sp, #0]
    236a:	685e      	ldr	r6, [r3, #4]
    236c:	4620      	mov	r0, r4
    236e:	212c      	movs	r1, #44	; 0x2c
    2370:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2374:	2300      	movs	r3, #0
    2376:	47b0      	blx	r6
    2378:	4b31      	ldr	r3, [pc, #196]	; (2440 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    237a:	4620      	mov	r0, r4
    237c:	681a      	ldr	r2, [r3, #0]
    237e:	211c      	movs	r1, #28
    2380:	f3c2 020d 	ubfx	r2, r2, #0, #14
    2384:	f000 fb1e 	bl	29c4 <NOROM_DDI32RegWrite>
    2388:	f7ff ff36 	bl	21f8 <NOROM_SetupGetTrimForAmpcompTh2>
    238c:	2114      	movs	r1, #20
    238e:	4602      	mov	r2, r0
    2390:	4620      	mov	r0, r4
    2392:	f000 fb17 	bl	29c4 <NOROM_DDI32RegWrite>
    2396:	f7ff ff37 	bl	2208 <NOROM_SetupGetTrimForAmpcompTh1>
    239a:	2110      	movs	r1, #16
    239c:	4602      	mov	r2, r0
    239e:	4620      	mov	r0, r4
    23a0:	f000 fb10 	bl	29c4 <NOROM_DDI32RegWrite>
    23a4:	4628      	mov	r0, r5
    23a6:	f7ff ff39 	bl	221c <NOROM_SetupGetTrimForAmpcompCtrl>
    23aa:	210c      	movs	r1, #12
    23ac:	4602      	mov	r2, r0
    23ae:	4620      	mov	r0, r4
    23b0:	f000 fb08 	bl	29c4 <NOROM_DDI32RegWrite>
    23b4:	4628      	mov	r0, r5
    23b6:	f7ff ff6d 	bl	2294 <NOROM_SetupGetTrimForAdcShModeEn>
    23ba:	0040      	lsls	r0, r0, #1
    23bc:	4e21      	ldr	r6, [pc, #132]	; (2444 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    23be:	f040 0020 	orr.w	r0, r0, #32
    23c2:	b2c0      	uxtb	r0, r0
    23c4:	7030      	strb	r0, [r6, #0]
    23c6:	4628      	mov	r0, r5
    23c8:	f7ff ff6e 	bl	22a8 <NOROM_SetupGetTrimForAdcShVbufEn>
    23cc:	f040 0010 	orr.w	r0, r0, #16
    23d0:	b2c0      	uxtb	r0, r0
    23d2:	7030      	strb	r0, [r6, #0]
    23d4:	4628      	mov	r0, r5
    23d6:	f7ff ff71 	bl	22bc <NOROM_SetupGetTrimForXoscHfCtl>
    23da:	2128      	movs	r1, #40	; 0x28
    23dc:	4602      	mov	r2, r0
    23de:	4620      	mov	r0, r4
    23e0:	f000 faf0 	bl	29c4 <NOROM_DDI32RegWrite>
    23e4:	4628      	mov	r0, r5
    23e6:	f7ff ff4b 	bl	2280 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    23ea:	0040      	lsls	r0, r0, #1
    23ec:	4b16      	ldr	r3, [pc, #88]	; (2448 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    23ee:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    23f2:	b2c0      	uxtb	r0, r0
    23f4:	7018      	strb	r0, [r3, #0]
    23f6:	4628      	mov	r0, r5
    23f8:	f7ff ff92 	bl	2320 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    23fc:	00c0      	lsls	r0, r0, #3
    23fe:	4b13      	ldr	r3, [pc, #76]	; (244c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    2400:	f060 007f 	orn	r0, r0, #127	; 0x7f
    2404:	b2c0      	uxtb	r0, r0
    2406:	7018      	strb	r0, [r3, #0]
    2408:	4628      	mov	r0, r5
    240a:	f7ff ff93 	bl	2334 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    240e:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    2412:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    2416:	4b0e      	ldr	r3, [pc, #56]	; (2450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2418:	b280      	uxth	r0, r0
    241a:	8018      	strh	r0, [r3, #0]
    241c:	4628      	mov	r0, r5
    241e:	f7ff ff69 	bl	22f4 <NOROM_SetupGetTrimForRadcExtCfg>
    2422:	2108      	movs	r1, #8
    2424:	4602      	mov	r2, r0
    2426:	4620      	mov	r0, r4
    2428:	f000 facc 	bl	29c4 <NOROM_DDI32RegWrite>
    242c:	4b09      	ldr	r3, [pc, #36]	; (2454 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    242e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2432:	601a      	str	r2, [r3, #0]
    2434:	b002      	add	sp, #8
    2436:	bd70      	pop	{r4, r5, r6, pc}
    2438:	400ca000 	andmi	sl, ip, r0
    243c:	100001a4 	andne	r0, r0, r4, lsr #3
    2440:	5000137c 	andpl	r1, r0, ip, ror r3
    2444:	400ca149 	andmi	sl, ip, r9, asr #2
    2448:	400ca14c 	andmi	sl, ip, ip, asr #2
    244c:	400ca141 	andmi	sl, ip, r1, asr #2
    2450:	400ca1dc 	ldrdmi	sl, [ip], -ip
    2454:	400ca040 	andmi	sl, ip, r0, asr #32

00002458 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    2458:	b530      	push	{r4, r5, lr}
    245a:	4b14      	ldr	r3, [pc, #80]	; (24ac <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d1fb      	bne.n	245a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    2462:	4a13      	ldr	r2, [pc, #76]	; (24b0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    2464:	4913      	ldr	r1, [pc, #76]	; (24b4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    2466:	6813      	ldr	r3, [r2, #0]
    2468:	6809      	ldr	r1, [r1, #0]
    246a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    246e:	f023 0307 	bic.w	r3, r3, #7
    2472:	f011 0f04 	tst.w	r1, #4
    2476:	4614      	mov	r4, r2
    2478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    247c:	d003      	beq.n	2486 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    247e:	f043 0305 	orr.w	r3, r3, #5
    2482:	6013      	str	r3, [r2, #0]
    2484:	bd30      	pop	{r4, r5, pc}
    2486:	490c      	ldr	r1, [pc, #48]	; (24b8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    2488:	f043 0004 	orr.w	r0, r3, #4
    248c:	680d      	ldr	r5, [r1, #0]
    248e:	07ad      	lsls	r5, r5, #30
    2490:	d009      	beq.n	24a6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    2492:	f043 0307 	orr.w	r3, r3, #7
    2496:	6013      	str	r3, [r2, #0]
    2498:	680b      	ldr	r3, [r1, #0]
    249a:	f003 0303 	and.w	r3, r3, #3
    249e:	2b03      	cmp	r3, #3
    24a0:	d1fa      	bne.n	2498 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    24a2:	6020      	str	r0, [r4, #0]
    24a4:	bd30      	pop	{r4, r5, pc}
    24a6:	6010      	str	r0, [r2, #0]
    24a8:	bd30      	pop	{r4, r5, pc}
    24aa:	bf00      	nop
    24ac:	4268000c 	rsbmi	r0, r8, #12
    24b0:	40034004 	andmi	r4, r3, r4
    24b4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    24b8:	40034000 	andmi	r4, r3, r0

000024bc <NOROM_SetupSetAonRtcSubSecInc>:
    24bc:	4b07      	ldr	r3, [pc, #28]	; (24dc <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    24be:	b282      	uxth	r2, r0
    24c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    24c4:	601a      	str	r2, [r3, #0]
    24c6:	6058      	str	r0, [r3, #4]
    24c8:	2201      	movs	r2, #1
    24ca:	3308      	adds	r3, #8
    24cc:	601a      	str	r2, [r3, #0]
    24ce:	4a04      	ldr	r2, [pc, #16]	; (24e0 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    24d0:	6812      	ldr	r2, [r2, #0]
    24d2:	2a00      	cmp	r2, #0
    24d4:	d0fb      	beq.n	24ce <NOROM_SetupSetAonRtcSubSecInc+0x12>
    24d6:	2200      	movs	r2, #0
    24d8:	601a      	str	r2, [r3, #0]
    24da:	4770      	bx	lr
    24dc:	400c603c 	andmi	r6, ip, ip, lsr r0
    24e0:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000024e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    24e4:	f3c0 4381 	ubfx	r3, r0, #18, #2
    24e8:	2b01      	cmp	r3, #1
    24ea:	b510      	push	{r4, lr}
    24ec:	4604      	mov	r4, r0
    24ee:	d002      	beq.n	24f6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    24f0:	2b02      	cmp	r3, #2
    24f2:	d02f      	beq.n	2554 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    24f4:	e02a      	b.n	254c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24f6:	4b42      	ldr	r3, [pc, #264]	; (2600 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	039a      	lsls	r2, r3, #14
    24fc:	d426      	bmi.n	254c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24fe:	4a41      	ldr	r2, [pc, #260]	; (2604 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    2500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2504:	6011      	str	r1, [r2, #0]
    2506:	4940      	ldr	r1, [pc, #256]	; (2608 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    2508:	f3c3 3003 	ubfx	r0, r3, #12, #4
    250c:	680a      	ldr	r2, [r1, #0]
    250e:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    2512:	4302      	orrs	r2, r0
    2514:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2518:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    251c:	600a      	str	r2, [r1, #0]
    251e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    2522:	f3c3 2003 	ubfx	r0, r3, #8, #4
    2526:	f022 020f 	bic.w	r2, r2, #15
    252a:	4302      	orrs	r2, r0
    252c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    2530:	f841 2c01 	str.w	r2, [r1, #-1]
    2534:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2538:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    253c:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    2540:	4313      	orrs	r3, r2
    2542:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2546:	f841 3c02 	str.w	r3, [r1, #-2]
    254a:	e003      	b.n	2554 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    254c:	4b2d      	ldr	r3, [pc, #180]	; (2604 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    254e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2552:	601a      	str	r2, [r3, #0]
    2554:	4b2d      	ldr	r3, [pc, #180]	; (260c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    2556:	681b      	ldr	r3, [r3, #0]
    2558:	071b      	lsls	r3, r3, #28
    255a:	bf5e      	ittt	pl
    255c:	4b2c      	ldrpl	r3, [pc, #176]	; (2610 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    255e:	2240      	movpl	r2, #64	; 0x40
    2560:	601a      	strpl	r2, [r3, #0]
    2562:	4b2c      	ldr	r3, [pc, #176]	; (2614 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    2564:	f44f 7200 	mov.w	r2, #512	; 0x200
    2568:	601a      	str	r2, [r3, #0]
    256a:	f7ff febb 	bl	22e4 <NOROM_SetupGetTrimForXoscHfFastStart>
    256e:	4b2a      	ldr	r3, [pc, #168]	; (2618 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    2570:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    2574:	b2c0      	uxtb	r0, r0
    2576:	7018      	strb	r0, [r3, #0]
    2578:	f3c4 5081 	ubfx	r0, r4, #22, #2
    257c:	2801      	cmp	r0, #1
    257e:	d00b      	beq.n	2598 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    2580:	d302      	bcc.n	2588 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    2582:	2802      	cmp	r0, #2
    2584:	d026      	beq.n	25d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    2586:	e028      	b.n	25da <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    2588:	2004      	movs	r0, #4
    258a:	2101      	movs	r1, #1
    258c:	f000 fa1e 	bl	29cc <NOROM_OSCClockSourceSet>
    2590:	4822      	ldr	r0, [pc, #136]	; (261c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    2592:	f7ff ff93 	bl	24bc <NOROM_SetupSetAonRtcSubSecInc>
    2596:	e024      	b.n	25e2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2598:	f000 fa46 	bl	2a28 <NOROM_OSCClockSourceGet>
    259c:	4604      	mov	r4, r0
    259e:	2004      	movs	r0, #4
    25a0:	4621      	mov	r1, r4
    25a2:	f000 fa13 	bl	29cc <NOROM_OSCClockSourceSet>
    25a6:	2004      	movs	r0, #4
    25a8:	f000 fa3e 	bl	2a28 <NOROM_OSCClockSourceGet>
    25ac:	42a0      	cmp	r0, r4
    25ae:	d1fa      	bne.n	25a6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    25b0:	4b1b      	ldr	r3, [pc, #108]	; (2620 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    25b2:	681c      	ldr	r4, [r3, #0]
    25b4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    25b8:	f7ff ff80 	bl	24bc <NOROM_SetupSetAonRtcSubSecInc>
    25bc:	4b19      	ldr	r3, [pc, #100]	; (2624 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    25be:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	0e20      	lsrs	r0, r4, #24
    25c6:	681b      	ldr	r3, [r3, #0]
    25c8:	2107      	movs	r1, #7
    25ca:	4798      	blx	r3
    25cc:	4b0d      	ldr	r3, [pc, #52]	; (2604 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    25ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25d2:	601a      	str	r2, [r3, #0]
    25d4:	2004      	movs	r0, #4
    25d6:	2103      	movs	r1, #3
    25d8:	e001      	b.n	25de <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    25da:	2004      	movs	r0, #4
    25dc:	2102      	movs	r1, #2
    25de:	f000 f9f5 	bl	29cc <NOROM_OSCClockSourceSet>
    25e2:	4b11      	ldr	r3, [pc, #68]	; (2628 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    25e4:	4a11      	ldr	r2, [pc, #68]	; (262c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    25ec:	7013      	strb	r3, [r2, #0]
    25ee:	f647 0218 	movw	r2, #30744	; 0x7818
    25f2:	4b0f      	ldr	r3, [pc, #60]	; (2630 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    25f4:	801a      	strh	r2, [r3, #0]
    25f6:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    25fa:	3b44      	subs	r3, #68	; 0x44
    25fc:	681b      	ldr	r3, [r3, #0]
    25fe:	bd10      	pop	{r4, pc}
    2600:	5000138c 	andpl	r1, r0, ip, lsl #7
    2604:	400ca040 	andmi	sl, ip, r0, asr #32
    2608:	4008600c 	andmi	r6, r8, ip
    260c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2610:	400ca068 	andmi	sl, ip, r8, rrx
    2614:	400ca080 	andmi	sl, ip, r0, lsl #1
    2618:	400ca108 	andmi	sl, ip, r8, lsl #2
    261c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    2620:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2624:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2628:	5000136c 	andpl	r1, r0, ip, ror #6
    262c:	400cb00b 	andmi	fp, ip, fp
    2630:	400cb070 	andmi	fp, ip, r0, ror r0

00002634 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    2634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2638:	4b77      	ldr	r3, [pc, #476]	; (2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    263a:	4607      	mov	r7, r0
    263c:	681b      	ldr	r3, [r3, #0]
    263e:	4e77      	ldr	r6, [pc, #476]	; (281c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2640:	f013 0f02 	tst.w	r3, #2
    2644:	d004      	beq.n	2650 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    2646:	2308      	movs	r3, #8
    2648:	71b3      	strb	r3, [r6, #6]
    264a:	4a75      	ldr	r2, [pc, #468]	; (2820 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    264c:	4b75      	ldr	r3, [pc, #468]	; (2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    264e:	e0df      	b.n	2810 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    2650:	f7ff fc1c 	bl	1e8c <NOROM_AONBatMonTemperatureGetDegC>
    2654:	4b74      	ldr	r3, [pc, #464]	; (2828 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    2656:	681d      	ldr	r5, [r3, #0]
    2658:	172a      	asrs	r2, r5, #28
    265a:	02ac      	lsls	r4, r5, #10
    265c:	f102 0101 	add.w	r1, r2, #1
    2660:	d408      	bmi.n	2674 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    2662:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    2666:	10db      	asrs	r3, r3, #3
    2668:	2b08      	cmp	r3, #8
    266a:	bfa8      	it	ge
    266c:	2308      	movge	r3, #8
    266e:	4299      	cmp	r1, r3
    2670:	bfb8      	it	lt
    2672:	4619      	movlt	r1, r3
    2674:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    2678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    267c:	d10a      	bne.n	2694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    267e:	4b6b      	ldr	r3, [pc, #428]	; (282c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    2680:	681a      	ldr	r2, [r3, #0]
    2682:	681b      	ldr	r3, [r3, #0]
    2684:	f3c2 2204 	ubfx	r2, r2, #8, #5
    2688:	2a15      	cmp	r2, #21
    268a:	bf88      	it	hi
    268c:	3a20      	subhi	r2, #32
    268e:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2692:	e00a      	b.n	26aa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2694:	4b66      	ldr	r3, [pc, #408]	; (2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2696:	681a      	ldr	r2, [r3, #0]
    2698:	4b66      	ldr	r3, [pc, #408]	; (2834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    269a:	f3c2 6204 	ubfx	r2, r2, #24, #5
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	2a15      	cmp	r2, #21
    26a2:	bf88      	it	hi
    26a4:	3a20      	subhi	r2, #32
    26a6:	f3c3 4304 	ubfx	r3, r3, #16, #5
    26aa:	2b15      	cmp	r3, #21
    26ac:	440a      	add	r2, r1
    26ae:	bf88      	it	hi
    26b0:	3b20      	subhi	r3, #32
    26b2:	2a15      	cmp	r2, #21
    26b4:	dc05      	bgt.n	26c2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    26b6:	f06f 0109 	mvn.w	r1, #9
    26ba:	428a      	cmp	r2, r1
    26bc:	bfb8      	it	lt
    26be:	460a      	movlt	r2, r1
    26c0:	e000      	b.n	26c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    26c2:	2215      	movs	r2, #21
    26c4:	4c5c      	ldr	r4, [pc, #368]	; (2838 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    26c6:	f002 011f 	and.w	r1, r2, #31
    26ca:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    26ce:	8021      	strh	r1, [r4, #0]
    26d0:	495a      	ldr	r1, [pc, #360]	; (283c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    26d2:	6809      	ldr	r1, [r1, #0]
    26d4:	f011 0403 	ands.w	r4, r1, #3
    26d8:	bf18      	it	ne
    26da:	2401      	movne	r4, #1
    26dc:	0749      	lsls	r1, r1, #29
    26de:	bf48      	it	mi
    26e0:	f044 0402 	orrmi.w	r4, r4, #2
    26e4:	b10f      	cbz	r7, 26ea <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    26e6:	f044 0404 	orr.w	r4, r4, #4
    26ea:	f996 1007 	ldrsb.w	r1, [r6, #7]
    26ee:	1a41      	subs	r1, r0, r1
    26f0:	2904      	cmp	r1, #4
    26f2:	dc03      	bgt.n	26fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    26f4:	4949      	ldr	r1, [pc, #292]	; (281c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    26f6:	7989      	ldrb	r1, [r1, #6]
    26f8:	428c      	cmp	r4, r1
    26fa:	d06f      	beq.n	27dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    26fc:	f1b0 010f 	subs.w	r1, r0, #15
    2700:	9101      	str	r1, [sp, #4]
    2702:	f004 0101 	and.w	r1, r4, #1
    2706:	f8df a144 	ldr.w	sl, [pc, #324]	; 284c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    270a:	f004 0904 	and.w	r9, r4, #4
    270e:	f004 0802 	and.w	r8, r4, #2
    2712:	460f      	mov	r7, r1
    2714:	d42a      	bmi.n	276c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2716:	9901      	ldr	r1, [sp, #4]
    2718:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    271c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    2720:	f1be 0f07 	cmp.w	lr, #7
    2724:	9101      	str	r1, [sp, #4]
    2726:	d801      	bhi.n	272c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2728:	d104      	bne.n	2734 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    272a:	e001      	b.n	2730 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    272c:	f04f 0e07 	mov.w	lr, #7
    2730:	2106      	movs	r1, #6
    2732:	e000      	b.n	2736 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    2734:	4671      	mov	r1, lr
    2736:	f8df b118 	ldr.w	fp, [pc, #280]	; 2850 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    273a:	3101      	adds	r1, #1
    273c:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    2740:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    2744:	ebc1 0c0c 	rsb	ip, r1, ip
    2748:	fa5f f18c 	uxtb.w	r1, ip
    274c:	f1b9 0f00 	cmp.w	r9, #0
    2750:	d002      	beq.n	2758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    2752:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    2756:	4459      	add	r1, fp
    2758:	f1b8 0f00 	cmp.w	r8, #0
    275c:	d002      	beq.n	2764 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    275e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    2762:	4459      	add	r1, fp
    2764:	b12f      	cbz	r7, 2772 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2766:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    276a:	e002      	b.n	2772 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    276c:	f04f 0e00 	mov.w	lr, #0
    2770:	4671      	mov	r1, lr
    2772:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    2776:	fa5f fc8a 	uxtb.w	ip, sl
    277a:	f1b9 0f00 	cmp.w	r9, #0
    277e:	d002      	beq.n	2786 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    2780:	f3ca 2907 	ubfx	r9, sl, #8, #8
    2784:	44cc      	add	ip, r9
    2786:	f1b8 0f00 	cmp.w	r8, #0
    278a:	d002      	beq.n	2792 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    278c:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2790:	44c4      	add	ip, r8
    2792:	b10f      	cbz	r7, 2798 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2794:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2798:	1a9b      	subs	r3, r3, r2
    279a:	2b01      	cmp	r3, #1
    279c:	bfb8      	it	lt
    279e:	2301      	movlt	r3, #1
    27a0:	9f01      	ldr	r7, [sp, #4]
    27a2:	2234      	movs	r2, #52	; 0x34
    27a4:	4353      	muls	r3, r2
    27a6:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    27aa:	4379      	muls	r1, r7
    27ac:	b2ed      	uxtb	r5, r5
    27ae:	436b      	muls	r3, r5
    27b0:	3180      	adds	r1, #128	; 0x80
    27b2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    27b6:	fbb3 f1f1 	udiv	r1, r3, r1
    27ba:	f64f 7cff 	movw	ip, #65535	; 0xffff
    27be:	4561      	cmp	r1, ip
    27c0:	bf28      	it	cs
    27c2:	4661      	movcs	r1, ip
    27c4:	287f      	cmp	r0, #127	; 0x7f
    27c6:	80b1      	strh	r1, [r6, #4]
    27c8:	dc05      	bgt.n	27d6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    27ca:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    27ce:	4298      	cmp	r0, r3
    27d0:	bfb8      	it	lt
    27d2:	4618      	movlt	r0, r3
    27d4:	e000      	b.n	27d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    27d6:	207f      	movs	r0, #127	; 0x7f
    27d8:	71f0      	strb	r0, [r6, #7]
    27da:	71b4      	strb	r4, [r6, #6]
    27dc:	4b18      	ldr	r3, [pc, #96]	; (2840 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    27de:	2100      	movs	r1, #0
    27e0:	681b      	ldr	r3, [r3, #0]
    27e2:	6033      	str	r3, [r6, #0]
    27e4:	88b3      	ldrh	r3, [r6, #4]
    27e6:	2b1e      	cmp	r3, #30
    27e8:	bf9e      	ittt	ls
    27ea:	4a0c      	ldrls	r2, [pc, #48]	; (281c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    27ec:	231f      	movls	r3, #31
    27ee:	8093      	strhls	r3, [r2, #4]
    27f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27f4:	d302      	bcc.n	27fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    27f6:	085b      	lsrs	r3, r3, #1
    27f8:	3101      	adds	r1, #1
    27fa:	e7f9      	b.n	27f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    27fc:	4a11      	ldr	r2, [pc, #68]	; (2844 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    27fe:	3b0f      	subs	r3, #15
    2800:	430a      	orrs	r2, r1
    2802:	091b      	lsrs	r3, r3, #4
    2804:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    2808:	4a06      	ldr	r2, [pc, #24]	; (2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    280a:	6013      	str	r3, [r2, #0]
    280c:	4b0e      	ldr	r3, [pc, #56]	; (2848 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    280e:	2200      	movs	r2, #0
    2810:	601a      	str	r2, [r3, #0]
    2812:	b003      	add	sp, #12
    2814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2818:	40090000 	andmi	r0, r9, r0
    281c:	2000004c 	andcs	r0, r0, ip, asr #32
    2820:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2824:	40091030 	andmi	r1, r9, r0, lsr r0
    2828:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    282c:	50001388 	andpl	r1, r0, r8, lsl #7
    2830:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2834:	5000113c 	andpl	r1, r0, ip, lsr r1
    2838:	4008626e 	andmi	r6, r8, lr, ror #4
    283c:	40082224 	andmi	r2, r8, r4, lsr #4
    2840:	40092008 	andmi	r2, r9, r8
    2844:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2848:	40091034 	andmi	r1, r9, r4, lsr r0
    284c:	5000139c 	mulpl	r0, ip, r3
    2850:	50001398 	mulpl	r0, r8, r3

00002854 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2854:	b510      	push	{r4, lr}
    2856:	4b14      	ldr	r3, [pc, #80]	; (28a8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2858:	681c      	ldr	r4, [r3, #0]
    285a:	b2a4      	uxth	r4, r4
    285c:	b314      	cbz	r4, 28a4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    285e:	f7ff fb15 	bl	1e8c <NOROM_AONBatMonTemperatureGetDegC>
    2862:	4b12      	ldr	r3, [pc, #72]	; (28ac <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2864:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2868:	4290      	cmp	r0, r2
    286a:	da05      	bge.n	2878 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    286c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2870:	4290      	cmp	r0, r2
    2872:	bfb8      	it	lt
    2874:	4610      	movlt	r0, r2
    2876:	71d8      	strb	r0, [r3, #7]
    2878:	889a      	ldrh	r2, [r3, #4]
    287a:	490c      	ldr	r1, [pc, #48]	; (28ac <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    287c:	4294      	cmp	r4, r2
    287e:	d310      	bcc.n	28a2 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2880:	4b0b      	ldr	r3, [pc, #44]	; (28b0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    2882:	6808      	ldr	r0, [r1, #0]
    2884:	681b      	ldr	r3, [r3, #0]
    2886:	1aa4      	subs	r4, r4, r2
    2888:	3302      	adds	r3, #2
    288a:	1a1b      	subs	r3, r3, r0
    288c:	2b1f      	cmp	r3, #31
    288e:	bf28      	it	cs
    2890:	231f      	movcs	r3, #31
    2892:	085b      	lsrs	r3, r3, #1
    2894:	40dc      	lsrs	r4, r3
    2896:	4414      	add	r4, r2
    2898:	f64f 72ff 	movw	r2, #65535	; 0xffff
    289c:	4294      	cmp	r4, r2
    289e:	bf28      	it	cs
    28a0:	4614      	movcs	r4, r2
    28a2:	808c      	strh	r4, [r1, #4]
    28a4:	bd10      	pop	{r4, pc}
    28a6:	bf00      	nop
    28a8:	40091034 	andmi	r1, r9, r4, lsr r0
    28ac:	2000004c 	andcs	r0, r0, ip, asr #32
    28b0:	40092008 	andmi	r2, r9, r8

000028b4 <NOROM_SysCtrlResetSourceGet>:
    28b4:	4b04      	ldr	r3, [pc, #16]	; (28c8 <NOROM_SysCtrlResetSourceGet+0x14>)
    28b6:	681a      	ldr	r2, [r3, #0]
    28b8:	0412      	lsls	r2, r2, #16
    28ba:	bf5a      	itte	pl
    28bc:	6818      	ldrpl	r0, [r3, #0]
    28be:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    28c2:	2008      	movmi	r0, #8
    28c4:	4770      	bx	lr
    28c6:	bf00      	nop
    28c8:	40090004 	andmi	r0, r9, r4

000028cc <NOROM_ChipInfo_GetChipFamily>:
    28cc:	f64b 129a 	movw	r2, #47514	; 0xb99a
    28d0:	4b10      	ldr	r3, [pc, #64]	; (2914 <NOROM_ChipInfo_GetChipFamily+0x48>)
    28d2:	6818      	ldr	r0, [r3, #0]
    28d4:	f3c0 300f 	ubfx	r0, r0, #12, #16
    28d8:	4290      	cmp	r0, r2
    28da:	d106      	bne.n	28ea <NOROM_ChipInfo_GetChipFamily+0x1e>
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	0f1b      	lsrs	r3, r3, #28
    28e0:	2b0b      	cmp	r3, #11
    28e2:	bf0c      	ite	eq
    28e4:	2004      	moveq	r0, #4
    28e6:	2000      	movne	r0, #0
    28e8:	e011      	b.n	290e <NOROM_ChipInfo_GetChipFamily+0x42>
    28ea:	f64b 13be 	movw	r3, #47550	; 0xb9be
    28ee:	4298      	cmp	r0, r3
    28f0:	d00a      	beq.n	2908 <NOROM_ChipInfo_GetChipFamily+0x3c>
    28f2:	f64b 3341 	movw	r3, #47937	; 0xbb41
    28f6:	4298      	cmp	r0, r3
    28f8:	d008      	beq.n	290c <NOROM_ChipInfo_GetChipFamily+0x40>
    28fa:	f64b 3320 	movw	r3, #47904	; 0xbb20
    28fe:	4298      	cmp	r0, r3
    2900:	bf14      	ite	ne
    2902:	20ff      	movne	r0, #255	; 0xff
    2904:	2002      	moveq	r0, #2
    2906:	e002      	b.n	290e <NOROM_ChipInfo_GetChipFamily+0x42>
    2908:	2001      	movs	r0, #1
    290a:	e000      	b.n	290e <NOROM_ChipInfo_GetChipFamily+0x42>
    290c:	2003      	movs	r0, #3
    290e:	b240      	sxtb	r0, r0
    2910:	4770      	bx	lr
    2912:	bf00      	nop
    2914:	50001318 	andpl	r1, r0, r8, lsl r3

00002918 <NOROM_ChipInfo_GetHwRevision>:
    2918:	b538      	push	{r3, r4, r5, lr}
    291a:	4b19      	ldr	r3, [pc, #100]	; (2980 <NOROM_ChipInfo_GetHwRevision+0x68>)
    291c:	681d      	ldr	r5, [r3, #0]
    291e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2922:	6818      	ldr	r0, [r3, #0]
    2924:	0f2d      	lsrs	r5, r5, #28
    2926:	b2c4      	uxtb	r4, r0
    2928:	2c80      	cmp	r4, #128	; 0x80
    292a:	bf28      	it	cs
    292c:	2400      	movcs	r4, #0
    292e:	f7ff ffcd 	bl	28cc <NOROM_ChipInfo_GetChipFamily>
    2932:	2804      	cmp	r0, #4
    2934:	d821      	bhi.n	297a <NOROM_ChipInfo_GetHwRevision+0x62>
    2936:	e8df f000 	tbb	[pc, r0]
    293a:	1b1b1303 	blne	6c754e <__ccfg+0x6a75a6>
    293e:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2942:	2d07      	cmp	r5, #7
    2944:	d819      	bhi.n	297a <NOROM_ChipInfo_GetHwRevision+0x62>
    2946:	e8df f005 	tbb	[pc, r5]
    294a:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    294e:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2952:	2014      	movs	r0, #20
    2954:	e012      	b.n	297c <NOROM_ChipInfo_GetHwRevision+0x64>
    2956:	2015      	movs	r0, #21
    2958:	e010      	b.n	297c <NOROM_ChipInfo_GetHwRevision+0x64>
    295a:	f104 0016 	add.w	r0, r4, #22
    295e:	e00a      	b.n	2976 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2960:	b125      	cbz	r5, 296c <NOROM_ChipInfo_GetHwRevision+0x54>
    2962:	2d02      	cmp	r5, #2
    2964:	d109      	bne.n	297a <NOROM_ChipInfo_GetHwRevision+0x62>
    2966:	f104 0014 	add.w	r0, r4, #20
    296a:	e004      	b.n	2976 <NOROM_ChipInfo_GetHwRevision+0x5e>
    296c:	200a      	movs	r0, #10
    296e:	e005      	b.n	297c <NOROM_ChipInfo_GetHwRevision+0x64>
    2970:	b91d      	cbnz	r5, 297a <NOROM_ChipInfo_GetHwRevision+0x62>
    2972:	f104 000a 	add.w	r0, r4, #10
    2976:	b2c0      	uxtb	r0, r0
    2978:	e000      	b.n	297c <NOROM_ChipInfo_GetHwRevision+0x64>
    297a:	20ff      	movs	r0, #255	; 0xff
    297c:	b240      	sxtb	r0, r0
    297e:	bd38      	pop	{r3, r4, r5, pc}
    2980:	50001318 	andpl	r1, r0, r8, lsl r3

00002984 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2984:	b508      	push	{r3, lr}
    2986:	f7ff ffa1 	bl	28cc <NOROM_ChipInfo_GetChipFamily>
    298a:	2801      	cmp	r0, #1
    298c:	d103      	bne.n	2996 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    298e:	f7ff ffc3 	bl	2918 <NOROM_ChipInfo_GetHwRevision>
    2992:	2813      	cmp	r0, #19
    2994:	dc00      	bgt.n	2998 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2996:	e7fe      	b.n	2996 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2998:	bd08      	pop	{r3, pc}
	...

0000299c <AuxAdiDdiSafeWrite.constprop.1>:
    299c:	b538      	push	{r3, r4, r5, lr}
    299e:	4604      	mov	r4, r0
    29a0:	460d      	mov	r5, r1
    29a2:	f7ff fa97 	bl	1ed4 <NOROM_CPUcpsid>
    29a6:	4b06      	ldr	r3, [pc, #24]	; (29c0 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    29a8:	681a      	ldr	r2, [r3, #0]
    29aa:	2a00      	cmp	r2, #0
    29ac:	d0fb      	beq.n	29a6 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    29ae:	2201      	movs	r2, #1
    29b0:	6025      	str	r5, [r4, #0]
    29b2:	601a      	str	r2, [r3, #0]
    29b4:	b918      	cbnz	r0, 29be <AuxAdiDdiSafeWrite.constprop.1+0x22>
    29b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    29ba:	f7ff ba8f 	b.w	1edc <NOROM_CPUcpsie>
    29be:	bd38      	pop	{r3, r4, r5, pc}
    29c0:	400c8000 	andmi	r8, ip, r0

000029c4 <NOROM_DDI32RegWrite>:
    29c4:	4408      	add	r0, r1
    29c6:	4611      	mov	r1, r2
    29c8:	f7ff bfe8 	b.w	299c <AuxAdiDdiSafeWrite.constprop.1>

000029cc <NOROM_OSCClockSourceSet>:
    29cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    29ce:	460c      	mov	r4, r1
    29d0:	07c1      	lsls	r1, r0, #31
    29d2:	4605      	mov	r5, r0
    29d4:	d509      	bpl.n	29ea <NOROM_OSCClockSourceSet+0x1e>
    29d6:	4b12      	ldr	r3, [pc, #72]	; (2a20 <NOROM_OSCClockSourceSet+0x54>)
    29d8:	b2a2      	uxth	r2, r4
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	2100      	movs	r1, #0
    29de:	9200      	str	r2, [sp, #0]
    29e0:	685e      	ldr	r6, [r3, #4]
    29e2:	4810      	ldr	r0, [pc, #64]	; (2a24 <NOROM_OSCClockSourceSet+0x58>)
    29e4:	2201      	movs	r2, #1
    29e6:	460b      	mov	r3, r1
    29e8:	47b0      	blx	r6
    29ea:	07aa      	lsls	r2, r5, #30
    29ec:	d509      	bpl.n	2a02 <NOROM_OSCClockSourceSet+0x36>
    29ee:	4b0c      	ldr	r3, [pc, #48]	; (2a20 <NOROM_OSCClockSourceSet+0x54>)
    29f0:	b2a2      	uxth	r2, r4
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	9200      	str	r2, [sp, #0]
    29f6:	685e      	ldr	r6, [r3, #4]
    29f8:	480a      	ldr	r0, [pc, #40]	; (2a24 <NOROM_OSCClockSourceSet+0x58>)
    29fa:	2100      	movs	r1, #0
    29fc:	2202      	movs	r2, #2
    29fe:	2301      	movs	r3, #1
    2a00:	47b0      	blx	r6
    2a02:	076b      	lsls	r3, r5, #29
    2a04:	d509      	bpl.n	2a1a <NOROM_OSCClockSourceSet+0x4e>
    2a06:	4b06      	ldr	r3, [pc, #24]	; (2a20 <NOROM_OSCClockSourceSet+0x54>)
    2a08:	b2a4      	uxth	r4, r4
    2a0a:	681b      	ldr	r3, [r3, #0]
    2a0c:	9400      	str	r4, [sp, #0]
    2a0e:	685c      	ldr	r4, [r3, #4]
    2a10:	4804      	ldr	r0, [pc, #16]	; (2a24 <NOROM_OSCClockSourceSet+0x58>)
    2a12:	2100      	movs	r1, #0
    2a14:	220c      	movs	r2, #12
    2a16:	2302      	movs	r3, #2
    2a18:	47a0      	blx	r4
    2a1a:	b002      	add	sp, #8
    2a1c:	bd70      	pop	{r4, r5, r6, pc}
    2a1e:	bf00      	nop
    2a20:	100001a4 	andne	r0, r0, r4, lsr #3
    2a24:	400ca000 	andmi	sl, ip, r0

00002a28 <NOROM_OSCClockSourceGet>:
    2a28:	b510      	push	{r4, lr}
    2a2a:	4b08      	ldr	r3, [pc, #32]	; (2a4c <NOROM_OSCClockSourceGet+0x24>)
    2a2c:	2804      	cmp	r0, #4
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	f04f 0134 	mov.w	r1, #52	; 0x34
    2a34:	68dc      	ldr	r4, [r3, #12]
    2a36:	bf07      	ittee	eq
    2a38:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2a3c:	231d      	moveq	r3, #29
    2a3e:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2a42:	231c      	movne	r3, #28
    2a44:	4802      	ldr	r0, [pc, #8]	; (2a50 <NOROM_OSCClockSourceGet+0x28>)
    2a46:	47a0      	blx	r4
    2a48:	bd10      	pop	{r4, pc}
    2a4a:	bf00      	nop
    2a4c:	100001a4 	andne	r0, r0, r4, lsr #3
    2a50:	400ca000 	andmi	sl, ip, r0
    2a54:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2a58:	6f792072 	svcvs	0x00792072
    2a5c:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2a60:	3a656d61 	bcc	195dfec <__ccfg+0x193e044>
    2a64:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2a68:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 28c0 <NOROM_SysCtrlResetSourceGet+0xc>
    2a6c:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2a70:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2a74:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2a78:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2a7c:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2a80:	20656874 	rsbcs	r6, r5, r4, ror r8
    2a84:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2a88:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2a8c:	706f2067 	rsbvc	r2, pc, r7, rrx
    2a90:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2a94:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2a98:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2a9c:	6a642941 	bvs	190cfa8 <__ccfg+0x18ed000>
    2aa0:	20747375 	rsbscs	r7, r4, r5, ror r3
    2aa4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2aa8:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2aac:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2ab0:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2ab4:	0a747261 	beq	1d1f440 <__ccfg+0x1cff498>
    2ab8:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2abc:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2ac0:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2ac4:	6f697461 	svcvs	0x00697461
    2ac8:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2acc:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2ad0:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2ad4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2ad8:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2adc:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2ae0:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2ae4:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2ae8:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2aec:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2af0:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2af4:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2af8:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2afc:	20726574 	rsbscs	r6, r2, r4, ror r5
    2b00:	20656874 	rsbcs	r6, r5, r4, ror r8
    2b04:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2b08:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2b0c:	52282073 	eorpl	r2, r8, #115	; 0x73
    2b10:	4f206465 	svcmi	0x00206465
    2b14:	4f202c4e 	svcmi	0x00202c4e
    2b18:	202c4646 	eorcs	r4, ip, r6, asr #12
    2b1c:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2b20:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2b24:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2b28:	203a2946 	eorscs	r2, sl, r6, asr #18
    2b2c:	65522800 	ldrbvs	r2, [r2, #-2048]	; 0xfffff800
    2b30:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2b34:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2b38:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2b3c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2b40:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2b44:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2b48:	6e692029 	cdpvs	0, 6, cr2, cr9, cr9, {1}
    2b4c:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2b50:	3a736c61 	bcc	1cddcdc <__ccfg+0x1cbdd34>
    2b54:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
    2b58:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b5c:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b60:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b64:	000d0a29 	andeq	r0, sp, r9, lsr #20
    2b68:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    2b6c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    2b70:	65727028 	ldrbvs	r7, [r2, #-40]!	; 0xffffffd8
    2b74:	53207373 			; <UNDEFINED> instruction: 0x53207373
    2b78:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    2b7c:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2b80:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2b84:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    2b88:	203a5252 	eorscs	r5, sl, r2, asr r2
    2b8c:	202c7825 	eorcs	r7, ip, r5, lsr #16
    2b90:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    2b94:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    2b98:	50006961 	andpl	r6, r0, r1, ror #18
    2b9c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2ba0:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    2ba4:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    2ba8:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    2bac:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    2bb0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2bb4:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2bb8:	434e5541 	movtmi	r5, #58689	; 0xe541
    2bbc:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    2bc0:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    2bc4:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    2bc8:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    2bcc:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 2b54 <NOROM_OSCClockSourceGet+0x12c>
    2bd0:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2bd4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2bd8:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    2bdc:	30303220 	eorscc	r3, r0, r0, lsr #4
    2be0:	30322d32 	eorscc	r2, r2, r2, lsr sp
    2be4:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    2be8:	6f746665 	svcvs	0x00746665
    2bec:	20726576 	rsbscs	r6, r2, r6, ror r5
    2bf0:	3a4d4152 	bcc	1353140 <__ccfg+0x1333198>
    2bf4:	20642520 	rsbcs	r2, r4, r0, lsr #10
    2bf8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2bfc:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2c00:	00000000 	andeq	r0, r0, r0

00002c04 <port_confs>:
    2c04:	00306080 	eorseq	r6, r0, r0, lsl #1
    2c08:	00386080 	eorseq	r6, r8, r0, lsl #1
    2c0c:	00186010 	andseq	r6, r8, r0, lsl r0
    2c10:	2010400f 	andscs	r4, r0, pc
    2c14:	30694000 	rsbcc	r4, r9, r0
    2c18:	30714000 	rsbscc	r4, r1, r0
    2c1c:	00b86008 	adcseq	r6, r8, r8
    2c20:	60c94000 	sbcvs	r4, r9, r0
    2c24:	60d14000 	sbcsvs	r4, r1, r0
    2c28:	60d94000 	sbcsvs	r4, r9, r0
    2c2c:	60e14000 	rscvs	r4, r1, r0
    2c30:	00096380 	andeq	r6, r9, r0, lsl #7
    2c34:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2c38:	20402000 	subcs	r2, r0, r0
    2c3c:	00486080 	subeq	r6, r8, r0, lsl #1
    2c40:	00506080 	subseq	r6, r0, r0, lsl #1
    2c44:	00a06000 	adceq	r6, r0, r0
    2c48:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2c4c:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2c50:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2c54:	6f690076 	svcvs	0x00690076
    2c58:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2c5c:	616d0031 	cmnvs	sp, r1, lsr r0
    2c60:	6b00676c 	blvs	1ca18 <__exidx_end+0x19d94>
    2c64:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2c68:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002c6c <__pi_hex_enc_table>:
    2c6c:	33323130 	teqcc	r2, #48, 2
    2c70:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2c74:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2c78:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002c7c <__input_pins>:
    2c7c:	9c9b9a99 	vldmials	fp, {s18-s170}

00002c80 <__button_list>:
    2c80:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .bss:

20000000 <displayCycle>:
	...

20000001 <username.5768>:
	...

20000016 <setdel>:
	...

20000018 <urates>:
static word urates [N_UARTS];
20000018:	00000000 	andeq	r0, r0, r0

2000001c <__PCB>:
2000001c:	00000000 	andeq	r0, r0, r0

20000020 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000020:	00000000 	andeq	r0, r0, r0

20000024 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000024:	00000000 	andeq	r0, r0, r0

20000028 <mevent>:
20000028:	00000000 	andeq	r0, r0, r0

2000002c <mnfree>:
2000002c:	00000000 	andeq	r0, r0, r0

20000030 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000030:	00000000 	andeq	r0, r0, r0

20000034 <dopen>:
	...

20000035 <dstat>:
20000035:	 	andeq	r0, r0, r0

20000038 <len.5699>:
20000038:	00000000 	andeq	r0, r0, r0

2000003c <ptr.5698>:
2000003c:	00000000 	andeq	r0, r0, r0

20000040 <__inpline>:
char *__inpline = NULL;
20000040:	00000000 	andeq	r0, r0, r0

20000044 <len.5700>:
20000044:	00000000 	andeq	r0, r0, r0

20000048 <ptr.5699>:
20000048:	00000000 	andeq	r0, r0, r0

2000004c <powerQualGlobals>:
	...

20000054 <greenCycle>:
	...

20000060 <redCycle>:
	...

2000006c <cycles>:
	...

20000084 <cyclesIndex>:
int cyclesIndex;
20000084:	00000000 	andeq	r0, r0, r0

20000088 <__pi_uart>:
	...

20000090 <system_event_count>:
20000090:	00000000 	andeq	r0, r0, r0

20000094 <entropy>:
20000094:	00000000 	andeq	r0, r0, r0

20000098 <__pi_mintk>:
	...

2000009a <__pi_old>:
	...

2000009c <__pi_systat>:
	...

200000a4 <__pi_new>:
200000a4:	00000000 	andeq	r0, r0, r0

200000a8 <__pi_utims>:
	...

200000b8 <__pi_curr>:
200000b8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000bc <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000079d 	muleq	r0, sp, r7
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000170 	andeq	r0, r0, r0, ror r1
      10:	0002e20c 	andeq	lr, r2, ip, lsl #4
      14:	0000c000 	andeq	ip, r0, r0
      18:	00008800 	andeq	r8, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000003a3 	andeq	r0, r0, r3, lsr #7
      2c:	dd050202 	sfmle	f0, 4, [r5, #-8]
      30:	02000003 	andeq	r0, r0, #3
      34:	009d0504 	addseq	r0, sp, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00009805 	andeq	r9, r0, r5, lsl #16
			i = k;
      40:	21fc0300 	mvnscs	r0, r0, lsl #6
				j->Next = k;
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
}
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	000003a1 	andeq	r0, r0, r1, lsr #7
      54:	0020ea03 	eoreq	lr, r0, r3, lsl #20
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	71070202 	tstvc	r7, r2, lsl #4
      64:	03000002 	movweq	r0, #2
      68:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00720704 	rsbseq	r0, r2, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00006d07 	andeq	r6, r0, r7, lsl #26
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	77070402 	strvc	r0, [r7, -r2, lsl #8]
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	000003fd 	strdeq	r0, [r0], -sp
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	000015c0 	andeq	r1, r0, r0, asr #11
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013b803 	andseq	fp, r3, r3, lsl #16
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	16110300 	ldrne	r0, [r1], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	a7030000 	strge	r0, [r3, -r0]
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	000002c2 	andeq	r0, r0, r2, asr #5
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	00000091 	muleq	r0, r1, r0
			curr += 0x1000;
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (from >= EE_SIZE || upto < from)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	00000299 	muleq	r0, r9, r2
			upto = EE_SIZE - 1;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
     114:	0000040c 	andeq	r0, r0, ip, lsl #8
     118:	ac033704 	stcge	7, cr3, [r3], {4}
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
     124:	00000405 	andeq	r0, r0, r5, lsl #8
}
     128:	ac033804 	stcge	8, cr3, [r3], {4}
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
     130:	09000004 	stmdbeq	r0, {r2}
     134:	000003f6 	strdeq	r0, [r0], -r6
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
    cycles[0].onTime = numbers[0];
     140:	00004009 	andeq	r4, r0, r9
    cycles[0].offTime = numbers[1];
     144:	033c0400 	teqeq	ip, #0, 8
    cycles[1].onTime = numbers[2];
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
     14c:	00660902 	rsbeq	r0, r6, r2, lsl #18
    cycles[1].offTime = numbers[3];
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
}
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	54090300 	strpl	r0, [r9], #-768	; 0xfffffd00
     15c:	04000001 	streq	r0, [r0], #-1
            number += settingsInput[i] - 48;
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
            numberMultiplier = numberMultiplier * 10;
     164:	00040000 	andeq	r0, r4, r0
     168:	00043403 	andeq	r3, r4, r3, lsl #8
     16c:	03410400 	movteq	r0, #5120	; 0x1400
fsm root {
     170:	000000da 	ldrdeq	r0, [r0], -sl
     174:	00016806 	andeq	r6, r1, r6, lsl #16
     178:	02b60a00 	adcseq	r0, r6, #0, 20
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
        initCycles();
     188:	0000030d 	andeq	r0, r0, sp, lsl #6
        ser_outf(Initial, "Enter your name: ");
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
     190:	01000001 	tsteq	r0, r1
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
     198:	02000001 	andeq	r0, r0, #1
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	03aa0801 			; <UNDEFINED> instruction: 0x03aa0801
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
     1a4:	0a000001 	beq	1b0 <root+0x40>
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	0000031b 	andeq	r0, r0, fp, lsl r3
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
        if (choice == 'A' || choice == 'a'){
     1b0:	01000001 	tsteq	r0, r1
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
            proceed Adjust_Intervals;
     1bc:	d2090000 	andle	r0, r9, #0
            proceed Monitor;
     1c0:	05000002 	streq	r0, [r0, #-2]
        proceed Show_Menu;
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1cc:	000005ed 	andeq	r0, r0, sp, ror #11
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
     1d4:	04000000 	streq	r0, [r0], #-0
     1d8:	00047109 	andeq	r7, r4, r9, lsl #2
        processSettingsInput(settings);
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
        proceed Show_Menu;
     1e0:	000000b8 	strheq	r0, [r0], -r8
     1e4:	13030006 	movwne	r0, #12294	; 0x3006
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	05000004 	streq	r0, [r0, #-4]
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
     1f0:	e60c0000 	str	r0, [ip], -r0
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
        proceed Show_Menu;
     1fc:	00360a00 	eorseq	r0, r6, r0, lsl #20
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
     208:	0c010100 	stfeqs	f0, [r1], {-0}
        displayCycle = YES;
     20c:	0000009b 	muleq	r0, fp, r0
        ser_inf(Await_Stop, "%c", ch);
     210:	0000021b 	andeq	r0, r0, fp, lsl r2
     214:	0000880e 	andeq	r8, r0, lr, lsl #16
     218:	07000300 	streq	r0, [r0, -r0, lsl #6]
        proceed Monitor;
     21c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     220:	00000245 	andeq	r0, r0, r5, asr #4
     224:	00046408 	andeq	r6, r4, r8, lsl #8
        leds(1, 0);
     228:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
     230:	00010701 	andeq	r0, r1, r1, lsl #14
     234:	00003108 	andeq	r3, r0, r8, lsl #2
     238:	03940600 	orrseq	r0, r4, #0, 12
        leds(0, 0);
     23c:	000000ac 	andeq	r0, r0, ip, lsr #1
     240:	00000101 	andeq	r0, r0, r1, lsl #2
     244:	02840300 	addeq	r0, r4, #0, 6
     248:	96060000 	strls	r0, [r6], -r0
     24c:	00021b03 	andeq	r1, r2, r3, lsl #22
     250:	02450500 	subeq	r0, r5, #0, 10
        } else if (choice == 'S' || choice == 's') {
     254:	510c0000 	mrspl	r0, (UNDEF: 12)
            proceed Stop;
     258:	61000002 	tstvs	r0, r2
        } else if (choice == 'V' || choice == 'v') {
     25c:	0d000002 	stceq	0, cr0, [r0, #-8]
            proceed View_Settings;
     260:	02560500 	subseq	r0, r6, #0, 10
        } else if (choice == 'M' || choice == 'm') {
     264:	ed0a0000 	stc	0, cr0, [sl, #-0]
            proceed Monitor;
     268:	06000002 	streq	r0, [r0], -r2
     26c:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
     270:	01010000 	mrseq	r0, (UNDEF: 1)
     274:	0000a70c 	andeq	sl, r0, ip, lsl #14
     278:	00027f00 	andeq	r7, r2, r0, lsl #30
     27c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     280:	00000274 	andeq	r0, r0, r4, ror r2
     284:	0003930a 	andeq	r9, r3, sl, lsl #6
     288:	13060700 	movwne	r0, #26368	; 0x6700
     28c:	0000027f 	andeq	r0, r0, pc, ror r2
     290:	340a0101 	strcc	r0, [sl], #-257	; 0xfffffeff
     294:	05000001 	streq	r0, [r0, #-1]
     298:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
static void devinit_uart (int devnum) {
     29c:	01010000 	mrseq	r0, (UNDEF: 1)
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	00047e0f 	andeq	r7, r4, pc, lsl #28
     2a4:	016e0800 	cmneq	lr, r0, lsl #16
void udelay (volatile word n) {
     2a8:	0002ad10 	andeq	sl, r2, r0, lsl sp
     2ac:	b3040b00 	movwlt	r0, #19200	; 0x4b00
	while (n) {
     2b0:	10000002 	andne	r0, r0, r2
     2b4:	0002bf01 	andeq	fp, r2, r1, lsl #30
}
     2b8:	009b1100 	addseq	r1, fp, r0, lsl #2
	while (n--);
     2bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2c0:	000001a2 	andeq	r0, r0, r2, lsr #3
     2c4:	000002ca 	andeq	r0, r0, sl, asr #5
		n--;
     2c8:	bf05000d 	svclt	0x0005000d
     2cc:	12000002 	andne	r0, r0, #2
     2d0:	00000444 	andeq	r0, r0, r4, asr #8
void mdelay (volatile word n) {
     2d4:	13017f08 	movwne	r7, #7944	; 0x1f08
     2d8:	000002ca 	andeq	r0, r0, sl, asr #5
	while (n) {
     2dc:	8b120101 	blhi	4806e8 <__ccfg+0x460740>
     2e0:	08000003 	stmdaeq	r0, {r0, r1}
}
     2e4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
		udelay (999);
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
     2ec:	04691201 	strbteq	r1, [r9], #-513	; 0xfffffdff
		n--;
     2f0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     2f4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
     2f8:	01010000 	mrseq	r0, (UNDEF: 1)
     2fc:	03080813 	movweq	r0, #34835	; 0x8813
void __pi_ondomain (lword d) {
     300:	03230903 			; <UNDEFINED> instruction: 0x03230903
     304:	f4140000 			; <UNDEFINED> instruction: 0xf4140000
		if (__pi_systat.effpdm > 1)
     308:	08000021 	stmdaeq	r0, {r0, r5}
     30c:	9b070307 	blls	1c0f30 <__ccfg+0x1a0f88>
			__pi_systat.effpdm = 1;
     310:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
     314:	00053f14 	andeq	r3, r5, r4, lsl pc
     318:	03080800 	movweq	r0, #34816	; 0x8800
     31c:	0000ce08 	andeq	ip, r0, r8, lsl #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	0f000400 	svceq	0x00000400
     324:	00000264 	andeq	r0, r0, r4, ror #4
     328:	03030908 	movweq	r0, #14600	; 0x3908
	__pi_systat.ondmns |= d;
     32c:	000002fc 	strdeq	r0, [r0], -ip
     330:	00048d15 	andeq	r8, r4, r5, lsl sp
}
     334:	0b083000 	bleq	20c33c <__ccfg+0x1ec394>
     338:	03930803 	orrseq	r0, r3, #196608	; 0x30000
void __pi_syserror (word ec, const char *m) {
     33c:	86140000 	ldrhi	r0, [r4], -r0
	diag ("SYSERR: %x, %s", ec, m);
     340:	08000004 	stmdaeq	r0, {r2}
     344:	9b070314 	blls	1c0f9c <__ccfg+0x1a0ff4>
  __ASM volatile ("cpsid i" : : : "memory");
     348:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	0002dc14 	andeq	sp, r2, r4, lsl ip
     350:	03150800 	tsteq	r5, #0, 16
     354:	00009b07 	andeq	r9, r0, r7, lsl #22
		all_leds_blink;
     358:	81140200 	tsthi	r4, r0, lsl #4
     35c:	08000004 	stmdaeq	r0, {r2}
     360:	a00a0316 	andge	r0, sl, r6, lsl r3
     364:	04000002 	streq	r0, [r0], #-2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	000f3f14 	andeq	r3, pc, r4, lsl pc	; <UNPREDICTABLE>
     36c:	03170800 	tsteq	r7, #0, 16
     370:	0000ce08 	andeq	ip, r0, r8, lsl #28
     374:	3d140800 	ldccc	8, cr0, [r4, #-0]
     378:	08000004 	stmdaeq	r0, {r2}
     37c:	930f0318 	movwls	r0, #62232	; 0xf318
	while (1) {
     380:	0c000003 	stceq	0, cr0, [r0], {3}
     384:	0002d714 	andeq	sp, r2, r4, lsl r7
     388:	03190800 	tsteq	r9, #0, 16
     38c:	0003a315 	andeq	sl, r3, r5, lsl r3
void tci_run_delay_timer () {
     390:	0c002c00 	stceq	12, cr2, [r0], {-0}
	setdel = __pi_mintk - __pi_old;
     394:	00000323 	andeq	r0, r0, r3, lsr #6
     398:	000003a3 	andeq	r0, r0, r3, lsr #7
     39c:	0000880e 	andeq	r8, r0, lr, lsl #16
     3a0:	0b000300 	bleq	fa8 <delay+0xc>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	00033004 	andeq	r3, r3, r4
     3a8:	04980f00 	ldreq	r0, [r8], #3840	; 0xf00
     3ac:	1c080000 	stcne	0, cr0, [r8], {-0}
     3b0:	03301b03 	teqeq	r0, #3072	; 0xc00
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	81120000 	tsthi	r2, r0
	sti_tim;
     3b8:	08000003 	stmdaeq	r0, {r0, r1}
}
     3bc:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
     3c0:	01000003 	tsteq	r0, r3
     3c4:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
     3c8:	07000003 	streq	r0, [r0, -r3]
     3cc:	090c010c 	stmdbeq	ip, {r2, r3, r8}
	cli_aux;
     3d0:	00000409 	andeq	r0, r0, r9, lsl #8
     3d4:	64656c16 	strbtvs	r6, [r5], #-3094	; 0xfffff3ea
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	090d0100 	stmdbeq	sp, {r8}
     3dc:	00000081 	andeq	r0, r0, r1, lsl #1
     3e0:	042d0900 	strteq	r0, [sp], #-2304	; 0xfffff700
     3e4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
	sti_aux;
     3e8:	00019b0a 	andeq	r9, r1, sl, lsl #22
}
     3ec:	bd090400 	cfstrslt	mvf0, [r9, #-0]
     3f0:	01000003 	tsteq	r0, r3
     3f4:	009b0a0f 	addseq	r0, fp, pc, lsl #20
void AONRTCIntHandler () {
     3f8:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fc:	0000034d 	andeq	r0, r0, sp, asr #6
     400:	9b0a1001 	blls	28440c <__ccfg+0x264464>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		if (__pi_utims [0] == 0)
     408:	04a30300 	strteq	r0, [r3], #768	; 0x300
     40c:	11010000 	mrsne	r0, (UNDEF: 1)
		if (*(__pi_utims [0])) {
     410:	0003cb03 	andeq	ip, r3, r3, lsl #22
     414:	015b1700 	cmpeq	fp, r0, lsl #14
			(*(__pi_utims [0]))--;
     418:	13010000 	movwne	r0, #4096	; 0x1000
		if (__pi_utims [1] == 0)
     41c:	0004090a 	andeq	r0, r4, sl, lsl #18
		if (*(__pi_utims [1])) {
     420:	03050100 	movweq	r0, #20736	; 0x5100
			aux_timer_inactive = 0;
     424:	20000054 	andcs	r0, r0, r4, asr r0
			(*(__pi_utims [1]))--;
     428:	0002c917 	andeq	ip, r2, r7, lsl r9
		if (__pi_utims [2] == 0)
     42c:	0a140100 	beq	500834 <__ccfg+0x4e088c>
		if (*(__pi_utims [2])) {
     430:	00000409 	andeq	r0, r0, r9, lsl #8
			(*(__pi_utims [2]))--;
     434:	60030501 	andvs	r0, r3, r1, lsl #10
		if (__pi_utims [3] != 0) {
     438:	0c200000 	stceq	0, cr0, [r0], #-0
			if (*(__pi_utims [3])) {
     43c:	00000409 	andeq	r0, r0, r9, lsl #8
				aux_timer_inactive = 0;
     440:	0000044b 	andeq	r0, r0, fp, asr #8
				(*(__pi_utims [3]))--;
     444:	0000880e 	andeq	r8, r0, lr, lsl #16
	if (__pi_systat.ledsts) {
     448:	17000100 	strne	r0, [r0, -r0, lsl #2]
     44c:	000003e7 	andeq	r0, r0, r7, ror #7
		if (__pi_systat.ledblc++ == 0) {
     450:	3b0a1601 	blcc	285c5c <__ccfg+0x265cb4>
     454:	01000004 	tsteq	r0, r4
			if (__pi_systat.ledblk) {
     458:	006c0305 	rsbeq	r0, ip, r5, lsl #6
     45c:	8d172000 	ldchi	0, cr2, [r7, #-0]
     460:	01000002 	tsteq	r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	00810518 	addeq	r0, r1, r8, lsl r5
     468:	05010000 	streq	r0, [r1, #-0]
				if (__pi_systat.ledsts & 0x2)
     46c:	00008403 	andeq	r8, r0, r3, lsl #8
     470:	6e4f1820 	cdpvs	8, 4, cr1, cr15, cr0, {1}
     474:	091a0100 	ldmdbeq	sl, {r8}
				if (__pi_systat.ledsts & 0x4)
     478:	0000008f 	andeq	r0, r0, pc, lsl #1
				__pi_systat.ledblk = 0;
     47c:	00030501 	andeq	r0, r3, r1, lsl #10
     480:	17000000 	strne	r0, [r0, -r0]
			if (__pi_systat.fstblk)
     484:	00000457 	andeq	r0, r0, r7, asr r4
     488:	8f091b01 	svchi	0x00091b01
				__pi_systat.ledblc = 200;
     48c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	00000305 	andeq	r0, r0, r5, lsl #6
		cli_tim;
     494:	01192000 	tsteq	r9, r0
		__pi_new += setdel;
     498:	000004ac 	andeq	r0, r0, ip, lsr #9
     49c:	01066101 	tsteq	r6, r1, lsl #2
		setdel = 0;
     4a0:	00000170 	andeq	r0, r0, r0, ror r1
		RISE_N_SHINE;
     4a4:	0000029c 	muleq	r0, ip, r2
		__pi_new += setdel;
     4a8:	05ce9c01 	strbeq	r9, [lr, #3073]	; 0xc01
		RISE_N_SHINE;
     4ac:	b81a0000 	ldmdalt	sl, {}	; <UNPREDICTABLE>
     4b0:	01000000 	mrseq	r0, (UNDEF: 0)
		aux_timer_inactive = 1;
     4b4:	009b1161 	addseq	r1, fp, r1, ror #2
     4b8:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x1)
     4bc:	241b0000 	ldrcs	r0, [fp], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c0:	01000001 	tsteq	r0, r1
     4c4:	01861465 	orreq	r1, r6, r5, ror #8
				if (__pi_systat.ledsts & 0x2)
     4c8:	471b0000 	ldrmi	r0, [fp, -r0]
     4cc:	01000000 	mrseq	r0, (UNDEF: 0)
     4d0:	0192176a 	orrseq	r1, r2, sl, ror #14
				if (__pi_systat.ledsts & 0x8)
     4d4:	a61b0000 	ldrge	r0, [fp], -r0
				__pi_systat.ledblk = 1;
     4d8:	01000000 	mrseq	r0, (UNDEF: 0)
     4dc:	019c186e 	orrseq	r1, ip, lr, ror #16
		if (aux_timer_inactive) {
     4e0:	1a1b0000 	bne	6c04e8 <__ccfg+0x6a0540>
			cli_aux;
     4e4:	01000004 	tsteq	r0, r4
     4e8:	01a61977 			; <UNDEFINED> instruction: 0x01a61977
     4ec:	c41b0000 	ldrgt	r0, [fp], #-0
     4f0:	01000003 	tsteq	r0, r3
     4f4:	01c81f88 	biceq	r1, r8, r8, lsl #31
     4f8:	551b0000 	ldrpl	r0, [fp, #-0]
     4fc:	01000003 	tsteq	r0, r3
     500:	01d01c8b 	bicseq	r1, r0, fp, lsl #25
     504:	6b1b0000 	blvs	6c050c <__ccfg+0x6a0564>
     508:	01000003 	tsteq	r0, r3
word tci_update_delay_ticks (Boolean force) {
     50c:	01e61c94 			; <UNDEFINED> instruction: 0x01e61c94
	cli_tim;
     510:	001b0000 	andseq	r0, fp, r0
     514:	01000000 	mrseq	r0, (UNDEF: 0)
	if (setdel) {
     518:	0202169e 	andeq	r1, r2, #165675008	; 0x9e00000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	fa1b0000 	blx	6c0524 <__ccfg+0x6a057c>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	01000002 	tsteq	r0, r2
     524:	021019a2 	andseq	r1, r0, #2654208	; 0x288000
     528:	471b0000 	ldrmi	r0, [fp, -r0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	01000001 	tsteq	r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	022013ad 	eoreq	r1, r0, #-1275068414	; 0xb4000002
	return NO;
     534:	401c0000 	andsmi	r0, ip, r0
			setdel = 0;
     538:	1d000000 	stcne	0, cr0, [r0, #-0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	000002ad 	andeq	r0, r0, sp, lsr #5
     540:	ce116301 	cdpgt	3, 1, cr6, cr1, cr1, {0}
}
     544:	05000005 	streq	r0, [r0, #-5]
		sti_tim;
     548:	00000103 	andeq	r0, r0, r3, lsl #2
		return YES;
     54c:	00581e20 	subseq	r1, r8, r0, lsr #28
     550:	05660000 	strbeq	r0, [r6, #-0]!
     554:	771d0000 	ldrvc	r0, [sp, -r0]
     558:	01000004 	tsteq	r0, r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	019b0e78 	orrseq	r0, fp, r8, ror lr
	UARTDisable (UART0_BASE);
     560:	91020000 	mrsls	r0, (UNDEF: 2)
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	d01f0044 	andsle	r0, pc, r4, asr #32
	UARTDisable (UART0_BASE);
     568:	e6000001 	str	r0, [r0], -r1
	UARTConfigSetExpClk (UART0_BASE,
     56c:	83000001 	movwhi	r0, #1
     570:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
     574:	00000344 	andeq	r0, r0, r4, asr #6
     578:	de0e8c01 	cdple	12, 0, cr8, cr14, cr1, {0}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	02000005 	andeq	r0, r0, #5
     580:	1f004491 	svcne	0x00004491
     584:	00000210 	andeq	r0, r0, r0, lsl r2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	00000220 	andeq	r0, r0, r0, lsr #4
     58c:	0000059c 	muleq	r0, ip, r5
     590:	00686320 	rsbeq	r6, r8, r0, lsr #6
	urates [0] = rate;
     594:	9b0ea301 	blls	3a91a0 <__ccfg+0x3891f8>
}
     598:	00000001 	andeq	r0, r0, r1
     59c:	00076a21 	andeq	r6, r7, r1, lsr #20
     5a0:	00022000 	andeq	r2, r2, r0
     5a4:	00022600 	andeq	r2, r2, r0, lsl #12
     5a8:	8dae0100 	stfhis	f0, [lr]
     5ac:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	00077922 	andeq	r7, r7, r2, lsr #18
     5b4:	6a230000 	bvs	8c05bc <__ccfg+0x8a0614>
     5b8:	36000007 	strcc	r0, [r0], -r7
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	70000002 	andvc	r0, r0, r2
     5c0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	792233af 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r7, r8, r9, ip, sp}
     5c8:	00000007 	andeq	r0, r0, r7
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	9b0c0000 	blls	3005d4 <__ccfg+0x2e062c>
     5d0:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
     5d4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     5d8:	00000088 	andeq	r0, r0, r8, lsl #1
     5dc:	9b0c0013 	blls	300630 <__ccfg+0x2e0688>
     5e0:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
     5e4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
	switch (operation) {
     5e8:	00000088 	andeq	r0, r0, r8, lsl #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ec:	01190031 	tsteq	r9, r1, lsr r0
     5f0:	00000327 	andeq	r0, r0, r7, lsr #6
     5f4:	01064601 	tsteq	r6, r1, lsl #12
     5f8:	00000110 	andeq	r0, r0, r0, lsl r1
     5fc:	00000170 	andeq	r0, r0, r0, ror r1
				*buf++ = uart_a_read;
     600:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
     604:	581a0000 	ldmdapl	sl, {}	; <UNPREDICTABLE>
			while (len && uart_a_char_available) {
     608:	01000000 	mrseq	r0, (UNDEF: 0)
     60c:	01952246 	orrseq	r2, r5, r6, asr #4
     610:	001e0000 	andseq	r0, lr, r0
			if (len != operation) {
     614:	ee1d0000 	cdp	0, 1, cr0, cr13, cr0, {0}
}
     618:	01000003 	tsteq	r0, r3
     61c:	020b0a47 	andeq	r0, fp, #290816	; 0x47000
			uart_a_disable_int;
     620:	91020000 	mrsls	r0, (UNDEF: 2)
			if (uart_a_char_available) {
     624:	00842460 	addeq	r2, r4, r0, ror #8
				*buf++ = uart_a_read;
     628:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
			uart_a_disable_int;
     62c:	00008109 	andeq	r8, r0, r9, lsl #2
     630:	00003100 	andeq	r3, r0, r0, lsl #2
			if (uart_a_char_available) {
     634:	02a02400 	adceq	r2, r0, #0, 8
     638:	4a010000 	bmi	40640 <__ccfg+0x20698>
				uart_a_enable_int;
     63c:	00009b0a 	andeq	r9, r0, sl, lsl #22
     640:	00004400 	andeq	r4, r0, r0, lsl #8
				goto Redo_rx;
     644:	01002400 	tsteq	r0, r0, lsl #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	4b010000 	blmi	40650 <__ccfg+0x206a8>
     64c:	00008109 	andeq	r8, r0, r9, lsl #2
			return -2;
     650:	00007800 	andeq	r7, r0, r0, lsl #16
     654:	00201c00 	eoreq	r1, r0, r0, lsl #24
				uart_a_write (*buf);
     658:	69200000 	stmdbvs	r0!, {}	; <UNPREDICTABLE>
     65c:	0e4d0100 	dvfeqe	f0, f5, f0
			while (len && uart_a_room_in_tx) {
     660:	00000081 	andeq	r0, r0, r1, lsl #1
     664:	01250000 			; <UNDEFINED> instruction: 0x01250000
     668:	000000f5 	strdeq	r0, [r0], -r5
			if (len != operation) {
     66c:	c8063501 	stmdagt	r6, {r0, r8, sl, ip, sp}
			uart_a_disable_int;
     670:	10000000 	andne	r0, r0, r0
     674:	01000001 	tsteq	r0, r1
			if (uart_a_room_in_tx) {
     678:	3c01199c 			; <UNDEFINED> instruction: 0x3c01199c
     67c:	01000003 	tsteq	r0, r3
				uart_a_enable_int;
     680:	0001061d 	andeq	r0, r1, sp, lsl r6
     684:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     688:	01000000 	mrseq	r0, (UNDEF: 0)
			if (uart_a_room_in_tx) {
     68c:	00076a9c 	muleq	r7, ip, sl
				uart_a_write (*buf);
     690:	00b81a00 	adcseq	r1, r8, r0, lsl #20
     694:	1d010000 	stcne	0, cr0, [r1, #-0]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	00009b14 	andeq	r9, r0, r4, lsl fp
     69c:	0000a100 	andeq	sl, r0, r0, lsl #2
			uart_a_enable_int;
     6a0:	00101b00 	andseq	r1, r0, r0, lsl #22
     6a4:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     6a8:	00000019 	andeq	r0, r0, r9, lsl r0
			return 0;
     6ac:	01111b00 	tsteq	r1, r0, lsl #22
			if (len == UART_CNTRL_SETRATE) {
     6b0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	00000019 	andeq	r0, r0, r9, lsl r0
     6b8:	00001e00 	andeq	r1, r0, r0, lsl #28
     6bc:	07030000 	streq	r0, [r3, -r0]
				syserror (EREQPAR, "uar");
     6c0:	4d240000 	stcmi	0, cr0, [r4, #-0]
			syserror (ENOOPER, "uai");
     6c4:	01000003 	tsteq	r0, r3
			if (len == UART_CNTRL_GETRATE) {
     6c8:	009b0e2c 	addseq	r0, fp, ip, lsr #28
				return 1;
     6cc:	00d50000 	sbcseq	r0, r5, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	6a210000 	bvs	8406d8 <__ccfg+0x820730>
			syserror (ENOOPER, "uai");
     6d4:	00000007 	andeq	r0, r0, r7
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	01000000 	mrseq	r0, (UNDEF: 0)
     6e0:	06ec492a 	strbteq	r4, [ip], sl, lsr #18
     6e4:	79220000 	stmdbvc	r2!, {}	; <UNPREDICTABLE>
     6e8:	00000007 	andeq	r0, r0, r7
     6ec:	00076a26 	andeq	r6, r7, r6, lsr #20
	...
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	b92a0100 	stmdblt	sl!, {r8}
void UART0IntHandler () {
     6fc:	00077922 	andeq	r7, r7, r2, lsr #18
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	27000000 	strcs	r0, [r0, -r0]
     704:	00000787 	andeq	r0, r0, r7, lsl #15
	...
     710:	01bd2001 			; <UNDEFINED> instruction: 0x01bd2001
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	0000071e 	andeq	r0, r0, lr, lsl r7
     718:	00079222 	andeq	r9, r7, r2, lsr #4
		RISE_N_SHINE;
     71c:	87270000 	strhi	r0, [r7, -r0]!
     720:	00000007 	andeq	r0, r0, r7
		i_trigger (devevent (UART_A, READ));
     724:	00000000 	andeq	r0, r0, r0
     728:	01000000 	mrseq	r0, (UNDEF: 0)
     72c:	39022c20 	stmdbcc	r2, {r5, sl, fp, sp}
     730:	22000007 	andcs	r0, r0, #7
     734:	00000792 	muleq	r0, r2, r7
     738:	076a2100 	strbeq	r2, [sl, -r0, lsl #2]!
	...
     744:	25010000 	strcs	r0, [r1, #-0]
     748:	0007534d 	andeq	r5, r7, sp, asr #6
     74c:	07792200 	ldrbeq	r2, [r9, -r0, lsl #4]!
     750:	26000000 	strcs	r0, [r0], -r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	0000076a 	andeq	r0, r0, sl, ror #14
	...
		i_trigger (devevent (UART_A, WRITE));
     760:	22bd2501 	adcscs	r2, sp, #4194304	; 0x400000
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	00000779 	andeq	r0, r0, r9, ror r7
     768:	af280000 	svcge	0x00280000
		RISE_N_SHINE;
     76c:	02000003 	andeq	r0, r0, #3
     770:	01010154 	tsteq	r1, r4, asr r1
     774:	00078703 	andeq	r8, r7, r3, lsl #14
		i_trigger (devevent (UART_A, WRITE));
     778:	01662900 	cmneq	r6, r0, lsl #18
     77c:	54020000 	strpl	r0, [r2], #-0
     780:	00671901 	rsbeq	r1, r7, r1, lsl #18
     784:	2a000000 	bcs	78c <UART0IntHandler+0x94>
     788:	00000025 	andeq	r0, r0, r5, lsr #32
     78c:	01011e02 	tsteq	r1, r2, lsl #28
     790:	66290301 	strtvs	r0, [r9], -r1, lsl #6
     794:	02000001 	andeq	r0, r0, #1
     798:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	00148c00 	andseq	r8, r4, r0, lsl #24
}
     7a4:	67000300 	strvs	r0, [r0, -r0, lsl #6]
     7a8:	04000002 	streq	r0, [r0], #-2
     7ac:	00017001 	andeq	r7, r1, r1
     7b0:	09280c00 	stmdbeq	r8!, {sl, fp}
     7b4:	00c00000 	sbceq	r0, r0, r0
void __buttons_setirq (int val) {
     7b8:	05180000 	ldreq	r0, [r8, #-0]
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	054b0000 	strbeq	r0, [fp, #-0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	01020000 	mrseq	r0, (UNDEF: 2)
     7c8:	0003a306 	andeq	sl, r3, r6, lsl #6
     7cc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
		bn = BUTTON_GPIO (__button_list [i]);
     7d0:	000003dd 	ldrdeq	r0, [r0], -sp
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d4:	00164803 	andseq	r4, r6, r3, lsl #16
     7d8:	18281000 	stmdane	r8!, {ip}
     7dc:	0000003f 	andeq	r0, r0, pc, lsr r0
     7e0:	9d050402 	cfstrsls	mvf0, [r5, #-8]
     7e4:	02000000 	andeq	r0, r0, #0
     7e8:	00980508 	addseq	r0, r8, r8, lsl #10
}
     7ec:	fc030000 	stc2	0, cr0, [r3], {-0}
     7f0:	10000021 	andne	r0, r0, r1, lsr #32
     7f4:	0059182e 	subseq	r1, r9, lr, lsr #16
     7f8:	01020000 	mrseq	r0, (UNDEF: 2)
void __pinlist_setirq (int val) {
     7fc:	0003a108 	andeq	sl, r3, r8, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     800:	20ea0300 	rsccs	r0, sl, r0, lsl #6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	31100000 	tstcc	r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	00006c19 	andeq	r6, r0, r9, lsl ip
	for (i = 0; i < N_PINLIST; i++) {
     80c:	07020200 	streq	r0, [r2, -r0, lsl #4]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     810:	00000271 	andeq	r0, r0, r1, ror r2
     814:	0017b303 	andseq	fp, r7, r3, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     818:	19341000 	ldmdbne	r4!, {ip}
     81c:	0000007f 	andeq	r0, r0, pc, ror r0
     820:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
	for (i = 0; i < N_PINLIST; i++) {
     824:	02000000 	andeq	r0, r0, #0
}
     828:	006d0708 	rsbeq	r0, sp, r8, lsl #14
     82c:	04040000 	streq	r0, [r4], #-0
     830:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     834:	07040200 	streq	r0, [r4, -r0, lsl #4]
void GPIOIntHandler () {
     838:	00000077 	andeq	r0, r0, r7, ror r0
if (buttons_int) {
     83c:	0003fd03 	andeq	pc, r3, r3, lsl #26
     840:	12261100 	eorne	r1, r6, #0, 2
	buttons_disable ();
     844:	0000004d 	andeq	r0, r0, sp, asr #32
     848:	0015c003 	andseq	ip, r5, r3
	i_trigger ((aword)&__button_list);
     84c:	12271100 	eorne	r1, r7, #0, 2
     850:	00000060 	andeq	r0, r0, r0, rrx
     854:	0000a705 	andeq	sl, r0, r5, lsl #14
     858:	00a70600 	adceq	r0, r7, r0, lsl #12
     85c:	06030000 	streq	r0, [r3], -r0
     860:	11000009 	tstne	r0, r9
     864:	00331228 	eorseq	r1, r3, r8, lsr #4
     868:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
     86c:	11000013 	tstne	r0, r3, lsl r0
     870:	004d122b 	subeq	r1, sp, fp, lsr #4
     874:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
	RISE_N_SHINE;
     878:	05000000 	streq	r0, [r0, #-0]
     87c:	000000c9 	andeq	r0, r0, r9, asr #1
     880:	00161103 	andseq	r1, r6, r3, lsl #2
if (pin_sensor_int) {
     884:	122c1100 	eorne	r1, ip, #0, 2
     888:	00000073 	andeq	r0, r0, r3, ror r0
	i_trigger ((aword)(&__input_pins));
     88c:	0000df05 	andeq	sp, r0, r5, lsl #30
     890:	02a70300 	adceq	r0, r7, #0, 6
     894:	2d110000 	ldccs	0, cr0, [r1, #-0]
     898:	00007312 	andeq	r7, r0, r2, lsl r3
     89c:	07620300 	strbeq	r0, [r2, -r0, lsl #6]!
     8a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     8a4:	00010810 	andeq	r0, r1, r0, lsl r8
     8a8:	a7040700 	strge	r0, [r4, -r0, lsl #14]
     8ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8b0:	09321108 	ldmdbeq	r2!, {r3, r8, ip}
     8b4:	0000019c 	muleq	r0, ip, r1
	__pinsen_disable_and_clear;
     8b8:	0002c209 	andeq	ip, r2, r9, lsl #4
	RISE_N_SHINE;
     8bc:	07341100 	ldreq	r1, [r4, -r0, lsl #2]!
     8c0:	000000c9 	andeq	r0, r0, r9, asr #1
     8c4:	00070101 	andeq	r0, r7, r1, lsl #2
}
     8c8:	00009109 	andeq	r9, r0, r9, lsl #2
     8cc:	03351100 	teqeq	r5, #0, 2
     8d0:	000000c9 	andeq	r0, r0, r9, asr #1
     8d4:	00060101 	andeq	r0, r6, r1, lsl #2
     8d8:	00029909 	andeq	r9, r2, r9, lsl #18
void system_init () {
     8dc:	03361100 	teqeq	r6, #0, 2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	000000c9 	andeq	r0, r0, r9, asr #1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	00050101 	andeq	r0, r5, r1, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	00040c09 	andeq	r0, r4, r9, lsl #24
     8ec:	03371100 	teqeq	r7, #0, 2
     8f0:	000000c9 	andeq	r0, r0, r9, asr #1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	00040101 	andeq	r0, r4, r1, lsl #2
     8f8:	00040509 	andeq	r0, r4, r9, lsl #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	03381100 	teqeq	r8, #0, 2
     900:	000000c9 	andeq	r0, r0, r9, asr #1
     904:	00000401 	andeq	r0, r0, r1, lsl #8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	0003f60a 	andeq	pc, r3, sl, lsl #12
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	073a1100 	ldreq	r1, [sl, -r0, lsl #2]!
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	000000c9 	andeq	r0, r0, r9, asr #1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	00400a01 	subeq	r0, r0, r1, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	3c110000 	ldccc	0, cr0, [r1], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	0000c903 	andeq	ip, r0, r3, lsl #18
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	660a0200 	strvs	r0, [sl], -r0, lsl #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	11000000 	mrsne	r0, (UNDEF: 0)
		pin = (port_confs [i] >> 19) & 0x1f;
     928:	00c9033d 	sbceq	r0, r9, sp, lsr r3
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92c:	0a030000 	beq	c0934 <__ccfg+0xa098c>
     930:	00000154 	andeq	r0, r0, r4, asr r1
     934:	df083f11 	svcle	0x00083f11
     938:	04000000 	streq	r0, [r0], #-0
		if (port_confs [i] & 0x80)
     93c:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	41110000 	tstmi	r1, r0
     944:	00010e03 	andeq	r0, r1, r3, lsl #28
		if (port_confs [i] & 0x40)
     948:	019c0600 	orrseq	r0, ip, r0, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	b60b0000 	strlt	r0, [fp], -r0
     950:	11000002 	tstne	r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     954:	01a81a43 			; <UNDEFINED> instruction: 0x01a81a43
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95c:	00030d0b 	andeq	r0, r3, fp, lsl #26
	all_leds_blink;
     960:	0e451100 	dvfeqs	f1, f5, f0
     964:	000001c9 	andeq	r0, r0, r9, asr #3
     968:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
     96c:	000001cf 	andeq	r0, r0, pc, asr #3
     970:	aa080102 	bge	200d80 <__ccfg+0x1e0dd8>
     974:	05000003 	streq	r0, [r0, #-3]
     978:	000001cf 	andeq	r0, r0, pc, asr #3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	00031b0b 	andeq	r1, r3, fp, lsl #22
     980:	1e451100 	dvfnes	f1, f5, f0
     984:	000001c9 	andeq	r0, r0, r9, asr #3
     988:	08080101 	stmdaeq	r8, {r0, r8}
     98c:	1a098f12 	bne	2645dc <__ccfg+0x244634>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	0a000002 	beq	9a0 <system_init+0xc4>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	000002d2 	ldrdeq	r0, [r0], -r2
     998:	730b9012 	movwvc	r9, #45074	; 0xb012
	IntEnable (INT_AON_RTC_COMB);
     99c:	00000000 	andeq	r0, r0, r0
     9a0:	0005ed0a 	andeq	lr, r5, sl, lsl #26
     9a4:	08911200 	ldmeq	r1, {r9, ip}
	__pi_malloc_init ();
     9a8:	000000a7 	andeq	r0, r0, r7, lsr #1
	IntEnable (INT_AON_GPIO_EDGE);
     9ac:	04710a04 	ldrbteq	r0, [r1], #-2564	; 0xfffff5fc
     9b0:	92120000 	andsls	r0, r2, #0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	0000d510 	andeq	sp, r0, r0, lsl r5
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	03000600 	movweq	r0, #1536	; 0x600
     9bc:	00000413 	andeq	r0, r0, r3, lsl r4
     9c0:	e9039312 	stmdb	r3, {r1, r4, r8, r9, ip, pc}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	05000001 	streq	r0, [r0, #-1]
     9c8:	0000021a 	andeq	r0, r0, sl, lsl r2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	00021a0c 	andeq	r1, r2, ip, lsl #20
     9d0:	00023600 	andeq	r3, r2, r0, lsl #12
     9d4:	0b000d00 	bleq	3ddc <__exidx_end+0x1158>
	urates [0] = UART_RATE / 100;
     9d8:	00000036 	andeq	r0, r0, r6, lsr r0
     9dc:	2b0f9912 	blcs	3e6e2c <__ccfg+0x3c6e84>
	reinit_uart ();
     9e0:	01000002 	tsteq	r0, r2
	EXTRA_INITIALIZERS;
     9e4:	da040701 	ble	1025f0 <__ccfg+0xe2648>
     9e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	09911301 	ldmibeq	r1, {r0, r8, r9, ip}
     9f0:	00000274 	andeq	r0, r0, r4, ror r2
     9f4:	00046409 	andeq	r6, r4, r9, lsl #8
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	07931300 	ldreq	r1, [r3, r0, lsl #6]
     9fc:	000000c9 	andeq	r0, r0, r9, asr #1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	00010701 	andeq	r0, r1, r1, lsl #14
     a04:	00003109 	andeq	r3, r0, r9, lsl #2
			devinit [i] . init (devinit [i] . param);
     a08:	03941300 	orrseq	r1, r4, #0, 6
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	000000c9 	andeq	r0, r0, r9, asr #1
     a10:	00000101 	andeq	r0, r0, r1, lsl #2
     a14:	02840300 	addeq	r0, r4, #0, 6
	IntEnable (INT_UART0_COMB);
     a18:	96130000 	ldrls	r0, [r3], -r0
     a1c:	00024a03 	andeq	r4, r2, r3, lsl #20
}
     a20:	02740500 	rsbseq	r0, r4, #0, 10
	tci_run_auxiliary_timer ();
     a24:	800c0000 	andhi	r0, ip, r0
		diag ("");
     a28:	90000002 	andls	r0, r0, r2
     a2c:	0d000002 	stceq	0, cr0, [r0, #-8]
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	02850500 	addeq	r0, r5, #0, 10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	ed0b0000 	stc	0, cr0, [fp, #-0]
		diag ("Leftover RAM: %d bytes",
     a38:	13000002 	movwne	r0, #2
     a3c:	0290179c 	addseq	r1, r0, #156, 14	; 0x2700000
     a40:	01010000 	mrseq	r0, (UNDEF: 1)
     a44:	0000b30c 	andeq	fp, r0, ip, lsl #6
     a48:	0002ae00 	andeq	sl, r2, r0, lsl #28
     a4c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     a50:	000002a3 	andeq	r0, r0, r3, lsr #5
     a54:	0003930b 	andeq	r9, r3, fp, lsl #6
     a58:	13061400 	movwne	r1, #25600	; 0x6400
     a5c:	000002ae 	andeq	r0, r0, lr, lsr #5
     a60:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
     a64:	12000001 	andne	r0, r0, #1
     a68:	00df0ec3 	sbcseq	r0, pc, r3, asr #29
     a6c:	01010000 	mrseq	r0, (UNDEF: 1)
     a70:	00047e0e 	andeq	r7, r4, lr, lsl #28
     a74:	016e1500 	cmneq	lr, r0, lsl #10
     a78:	0002dc10 	andeq	sp, r2, r0, lsl ip
     a7c:	e2040700 	and	r0, r4, #0, 14
     a80:	0f000002 	svceq	0x00000002
     a84:	0002ee01 	andeq	lr, r2, r1, lsl #28
     a88:	00a71000 	adceq	r1, r7, r0
     a8c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a90:	000001d6 	ldrdeq	r0, [r0], -r6
__attribute__ ((noreturn)) void __pi_release () {
     a94:	000002f9 	strdeq	r0, [r0], -r9
     a98:	ee05000d 	cdp	0, 0, cr0, cr5, cr13, {0}
     a9c:	11000002 	tstne	r0, r2
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     aa0:	00000444 	andeq	r0, r0, r4, asr #8
	check_stack_overflow;
     aa4:	16017f15 			; <UNDEFINED> instruction: 0x16017f15
     aa8:	000002f9 	strdeq	r0, [r0], -r9
     aac:	8b110101 	blhi	440eb8 <__ccfg+0x420f10>
	update_n_wake (MAX_WORD, NO);
     ab0:	15000003 	strne	r0, [r0, #-3]
     ab4:	eb140182 	bl	5010c4 <__ccfg+0x4e111c>
     ab8:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (__pi_curr) {
     abc:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
     ac0:	d8150000 	ldmdale	r5, {}	; <UNPREDICTABLE>
     ac4:	00df0e02 	sbcseq	r0, pc, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	01010000 	mrseq	r0, (UNDEF: 1)
	__SLEEP;
     acc:	03150812 	tsteq	r5, #1179648	; 0x120000
     ad0:	03520903 	cmpeq	r2, #49152	; 0xc000
     ad4:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
     ad8:	15000021 	strne	r0, [r0, #-33]	; 0xffffffdf
	system_event_count ++;
     adc:	a7070307 	strge	r0, [r7, -r7, lsl #6]
     ae0:	00000000 	andeq	r0, r0, r0
	switch (__pi_systat.effpdm) {
     ae4:	00053f13 	andeq	r3, r5, r3, lsl pc
     ae8:	03081500 	movweq	r1, #34048	; 0x8500
     aec:	0000f008 	andeq	pc, r0, r8
     af0:	0e000400 	cfcpyseq	mvf0, mvf0
			__WFI ();
     af4:	00000264 	andeq	r0, r0, r4, ror #4
     af8:	03030915 	movweq	r0, #14613	; 0x3915
     afc:	0000032b 	andeq	r0, r0, fp, lsr #6
	check_stack_overflow;
     b00:	00048d14 	andeq	r8, r4, r4, lsl sp
     b04:	0b153000 	bleq	54cb0c <__ccfg+0x52cb64>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b08:	03c20803 	biceq	r0, r2, #196608	; 0x30000
     b0c:	86130000 	ldrhi	r0, [r3], -r0
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	15000004 	strne	r0, [r0, #-4]
			goto Redo;
     b14:	a7080314 	smladge	r8, r4, r3, r0
	for_all_tasks (__pi_curr) {
     b18:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	0002dc13 	andeq	sp, r2, r3, lsl ip
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	03151500 	tsteq	r5, #0, 10
     b24:	0000a708 	andeq	sl, r0, r8, lsl #14
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	81130200 	tsthi	r3, r0, lsl #4
     b2c:	15000004 	strne	r0, [r0, #-4]
     b30:	cf0b0316 	svcgt	0x000b0316
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b34:	04000002 	streq	r0, [r0], #-2
     b38:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b3c:	03171500 	tsteq	r7, #0, 10
     b40:	0000f009 	andeq	pc, r0, r9
			__WFI ();
     b44:	3d130800 	ldccc	8, cr0, [r3, #-0]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	15000004 	strne	r0, [r0, #-4]
     b4c:	c20f0318 	andgt	r0, pc, #24, 6	; 0x60000000
}
     b50:	0c000003 	stceq	0, cr0, [r0], {3}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b54:	0002d713 	andeq	sp, r2, r3, lsl r7
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	03191500 	tsteq	r9, #0, 10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	0003d215 	andeq	sp, r3, r5, lsl r2
     b60:	0c002c00 	stceq	12, cr2, [r0], {-0}
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b64:	00000352 	andeq	r0, r0, r2, asr r3
     b68:	000003d2 	ldrdeq	r0, [r0], -r2
     b6c:	00009415 	andeq	r9, r0, r5, lsl r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b70:	07000300 	streq	r0, [r0, -r0, lsl #6]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b74:	00035f04 	andeq	r5, r3, r4, lsl #30
     b78:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
     b7c:	1c150000 	ldcne	0, cr0, [r5], {-0}
     b80:	035f1b03 	cmpeq	pc, #3072	; 0xc00
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	81110000 	tsthi	r1, r0
     b88:	15000003 	strne	r0, [r0, #-3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	f414031e 			; <UNDEFINED> instruction: 0xf414031e
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	01000003 	tsteq	r0, r3
     b94:	d8040701 	stmdale	r4, {r0, r8, r9, sl}
     b98:	0b000003 	bleq	bac <__pi_release+0x118>
     b9c:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     ba0:	a7131d16 			; <UNDEFINED> instruction: 0xa7131d16
			SysCtrlSetRechargeBeforePowerDown
     ba4:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	071b0b01 	ldreq	r0, [fp, -r1, lsl #22]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
     bb0:	0000b81a 	andeq	fp, r0, sl, lsl r8
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	0b010100 	bleq	40fbc <__ccfg+0x21014>
     bb8:	000008ab 	andeq	r0, r0, fp, lsr #17
     bbc:	b8241e16 	stmdalt	r4!, {r1, r2, r4, r9, sl, fp, ip}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
     bc4:	05da0b01 	ldrbeq	r0, [sl, #2817]	; 0xb01
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	22160000 	andscs	r0, r6, #0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
     bd0:	03010100 	movweq	r0, #4352	; 0x1100
     bd4:	00000523 	andeq	r0, r0, r3, lsr #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd8:	3e104316 	mrccc	3, 0, r4, cr0, cr6, {0}
			while (!(AONWUCPowerStatusGet () &
     bdc:	07000004 	streq	r0, [r0, -r4]
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	00044404 	andeq	r4, r4, r4, lsl #8
     be4:	50010f00 	andpl	r0, r1, r0, lsl #30
     be8:	10000004 	andne	r0, r0, r4
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bec:	0000008d 	andeq	r0, r0, sp, lsl #1
     bf0:	16080800 	strne	r0, [r8], -r0, lsl #16
     bf4:	04740946 	ldrbteq	r0, [r4], #-2374	; 0xfffff6ba
     bf8:	860a0000 	strhi	r0, [sl], -r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	1600000a 	strne	r0, [r0], -sl
     c00:	04320f4a 	ldrteq	r0, [r2], #-3914	; 0xfffff0b6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	0a000000 	beq	c0c <__pi_release+0x178>
     c08:	00000788 	andeq	r0, r0, r8, lsl #15
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0c:	8d074b16 	vstrhi	d4, [r7, #-88]	; 0xffffffa8
			reinit_uart ();
     c10:	04000000 	streq	r0, [r0], #-0
     c14:	05a90300 	streq	r0, [r9, #768]!	; 0x300
     c18:	4c160000 	ldcmi	0, cr0, [r6], {-0}
}
     c1c:	00045003 	andeq	r5, r4, r3
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	04740500 	ldrbteq	r0, [r4], #-1280	; 0xfffffb00
     c24:	fc0c0000 	stc2	0, cr0, [ip], {-0}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	95000000 	strls	r0, [r0, #-0]
     c2c:	15000004 	strne	r0, [r0, #-4]
     c30:	00000094 	muleq	r0, r4, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	fb0b0003 	blx	2c0c4a <__ccfg+0x2a0ca2>
     c38:	01000008 	tsteq	r0, r8
     c3c:	0485120d 	streq	r1, [r5], #525	; 0x20d
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c40:	01010000 	mrseq	r0, (UNDEF: 1)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	0004800c 	andeq	r8, r4, ip
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	0004b300 	andeq	fp, r4, r0, lsl #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	00941500 	addseq	r1, r4, r0, lsl #10
     c50:	00010000 	andeq	r0, r1, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c54:	0004a305 	andeq	sl, r4, r5, lsl #6
     c58:	090b1600 	stmdbeq	fp, {r9, sl, ip}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5c:	cf010000 	svcgt	0x00010000
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c60:	0004b318 	andeq	fp, r4, r8, lsl r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	00eb0c00 	rsceq	r0, fp, r0, lsl #24
     c68:	04d40000 	ldrbeq	r0, [r4], #0
			PRCMPowerDomainOff (
     c6c:	94150000 	ldrls	r0, [r5], #-0
     c70:	10000000 	andne	r0, r0, r0
	__SLEEP;
     c74:	04c40500 	strbeq	r0, [r4], #1280	; 0x500
     c78:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	01000007 	tsteq	r0, r7
	goto Redo;
     c80:	04d40dec 	ldrbeq	r0, [r4], #3564	; 0xdec
     c84:	05010000 	streq	r0, [r1, #-0]
     c88:	002c0403 	eoreq	r0, ip, r3, lsl #8
     c8c:	05881800 	streq	r1, [r8, #2048]	; 0x800
     c90:	0c010000 	stceq	0, cr0, [r1], {-0}
     c94:	00a70d01 	adceq	r0, r7, r1, lsl #26
     c98:	03050000 	movweq	r0, #20480	; 0x5000
     c9c:	20000016 	andcs	r0, r0, r6, lsl r0
     ca0:	00023619 	andeq	r3, r2, r9, lsl r6
     ca4:	02d00100 	sbcseq	r0, r0, #0, 2
     ca8:	88030508 	stmdahi	r3, {r3, r8, sl}
     cac:	0c200000 	stceq	0, cr0, [r0], #-0
     cb0:	000000a7 	andeq	r0, r0, r7, lsr #1
     cb4:	0000051e 	andeq	r0, r0, lr, lsl r5
     cb8:	00009415 	andeq	r9, r0, r5, lsl r4
     cbc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     cc0:	00000509 	andeq	r0, r0, r9, lsl #10
     cc4:	0d02d201 	sfmeq	f5, 1, [r2, #-4]
     cc8:	0000050e 	andeq	r0, r0, lr, lsl #10
     ccc:	00180305 	andseq	r0, r8, r5, lsl #6
     cd0:	c1192000 	tstgt	r9, r0
     cd4:	01000002 	tsteq	r0, r2
     cd8:	0507048c 	streq	r0, [r7, #-1164]	; 0xfffffb74
     cdc:	00009003 	andeq	r9, r0, r3
     ce0:	fd011a20 	stc2	10, cr1, [r1, #-128]	; 0xffffff80	; <UNPREDICTABLE>
     ce4:	01000004 	tsteq	r0, r4
     ce8:	01050572 	tsteq	r5, r2, ror r5
int main (void) {
     cec:	0000008d 	andeq	r0, r0, sp, lsl #1
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	00000cec 	andeq	r0, r0, ip, ror #25
     cf4:	00000d4c 	andeq	r0, r0, ip, asr #26
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	05849c01 	streq	r9, [r4, #3073]	; 0xc01
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	001b0000 	andseq	r0, fp, r0
	system_init ();
     d00:	72000005 	andvc	r0, r0, #5
	tcv_init ();
     d04:	1c000005 	stcne	0, cr0, [r0], {5}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d08:	76010069 	strvc	r0, [r1], -r9, rrx
     d0c:	00bd1105 	adcseq	r1, sp, r5, lsl #2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	1d000000 	stcne	0, cr0, [r0, #-0]
     d14:	000011f7 	strdeq	r1, [r0], -r7
     d18:	00000d2e 	andeq	r0, r0, lr, lsr #26
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1c:	00000d30 	andeq	r0, r0, r0, lsr sp
     d20:	02058d01 	andeq	r8, r5, #1, 26	; 0x40
	delay (16, 0);
     d24:	a2011e00 	andge	r1, r1, #0, 28
     d28:	01000007 	tsteq	r0, r7
     d2c:	94210568 	strtls	r0, [r1], #-1384	; 0xfffffa98
	__pi_release ();
     d30:	ec00000a 	stc	0, cr0, [r0], {10}
     d34:	0100000c 	tsteq	r0, ip
     d38:	0007e49c 	muleq	r7, ip, r4
     d3c:	07af1f00 	streq	r1, [pc, r0, lsl #30]!
     d40:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
     d44:	11d02001 	bicsne	r2, r0, r1
     d48:	0a940000 	beq	fe500d50 <_estack+0xde4fbd50>
static void killev (__pi_pcb_t *pid) {
     d4c:	03600000 	cmneq	r0, #0
	wfun = (aword)(pid->code);
     d50:	6a010000 	bvs	40d58 <__ccfg+0x20db0>
	for_all_tasks (i) {
     d54:	05bf0205 	ldreq	r0, [pc, #517]!	; f61 <__pi_trigger+0x1d>
		for (j = 0; j < nevents (i); j++) {
     d58:	df210000 	svcle	0x00210000
     d5c:	00000011 	andeq	r0, r0, r1, lsl r0
     d60:	00081222 	andeq	r1, r8, r2, lsr #4
			    || i->Events [j] . Event == wfun
     d64:	000aae00 	andeq	sl, sl, r0, lsl #28
		for (j = 0; j < nevents (i); j++) {
     d68:	00038000 	andeq	r8, r3, r0
			if (i->Events [j] . Event == (aword)pid
     d6c:	02270d00 	eoreq	r0, r7, #0, 26
     d70:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
     d74:	00038023 	andeq	r8, r3, r3, lsr #32
				wakeupev (i, j);
     d78:	08202400 	stmdaeq	r0!, {sl, sp}
     d7c:	0b3c0000 	bleq	f00d84 <__ccfg+0xee0ddc>
	for_all_tasks (i) {
     d80:	5c250000 	stcpl	0, cr0, [r5], #-0
}
     d84:	ae000012 	mcrge	0, 0, r0, cr0, cr2, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	a800000a 	stmdage	r0, {r1, r3}
static void qfree (aword *ch) {
     d8c:	01000003 	tsteq	r0, r3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d90:	1d0404b3 	cfstrsne	mvf0, [r4, #-716]	; 0xfffffd34
	cc = (aword*)(mpools + MA_NP);
     d94:	00001438 	andeq	r1, r0, r8, lsr r4
	m_setnextp (ch, chunk);
     d98:	00000b26 	andeq	r0, r0, r6, lsr #22
	m_setnextp (cc, ch);
     d9c:	00000b32 	andeq	r0, r0, r2, lsr fp
}
     da0:	0404a401 	streq	sl, [r4], #-1025	; 0xfffffbff
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da4:	00125c1d 	andseq	r5, r2, sp, lsl ip
     da8:	000b3a00 	andeq	r3, fp, r0, lsl #20
     dac:	000b3c00 	andeq	r3, fp, r0, lsl #24
			m_setnextp (cc, m_nextp (chunk));
     db0:	04aa0100 	strteq	r0, [sl], #256	; 0x100
			m_size (chunk) += m_hdrlen + m_size (ch);
     db4:	12c02504 	sbcne	r2, r0, #4, 10	; 0x1000000
     db8:	0b520000 	bleq	1480dc0 <__ccfg+0x1460e18>
     dbc:	03c00000 	biceq	r0, r0, #0
     dc0:	bb010000 	bllt	40dc8 <__ccfg+0x20e20>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	43250404 			; <UNDEFINED> instruction: 0x43250404
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	52000014 	andpl	r0, r0, #20
     dcc:	e000000b 	and	r0, r0, fp
     dd0:	01000003 	tsteq	r0, r3
			m_setnextp (cc, m_nextp (chunk));
     dd4:	200404c5 	andcs	r0, r4, r5, asr #9
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	0000128e 	andeq	r1, r0, lr, lsl #5
     ddc:	00000b5a 	andeq	r0, r0, sl, asr fp
     de0:	00000400 	andeq	r0, r0, r0, lsl #8
     de4:	0404c001 	streq	ip, [r4], #-1
     de8:	00000651 	andeq	r0, r0, r1, asr r6
     dec:	00129d21 	andseq	r9, r2, r1, lsr #26
			if (m_size (chunk) >= m_size (ch))
     df0:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
     df4:	6a000012 	bvs	e44 <update_n_wake+0x14>
     df8:	6c00000b 	stcvs	0, cr0, [r0], {11}
		chunk = m_nextp (chunk))
     dfc:	0100000b 	tsteq	r0, fp
     e00:	250404c3 	strcs	r0, [r4, #-1219]	; 0xfffffb3d
     e04:	0000142d 	andeq	r1, r0, sp, lsr #8
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	00000b6e 	andeq	r0, r0, lr, ror #22
	diag_wait (a);
     e0c:	00000420 	andeq	r0, r0, r0, lsr #8
	diag_wchar (c, a);
     e10:	0404d501 	streq	sp, [r4], #-1281	; 0xfffffaff
     e14:	00144e20 	andseq	r4, r4, r0, lsr #28
}
     e18:	000b8400 	andeq	r8, fp, r0, lsl #8
     e1c:	00044000 	andeq	r4, r4, r0
	syserror (ESTATE, "state");
     e20:	04cc0100 	strbeq	r0, [ip], #256	; 0x100
     e24:	00068e04 	andeq	r8, r6, r4, lsl #28
     e28:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
     e2c:	1d000000 	stcne	0, cr0, [r0, #-0]
void update_n_wake (word min, Boolean force) {
     e30:	0000125c 	andeq	r1, r0, ip, asr r2
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	00000ba8 	andeq	r0, r0, r8, lsr #23
     e38:	00000baa 	andeq	r0, r0, sl, lsr #23
     e3c:	0404df01 	streq	sp, [r4], #-3841	; 0xfffff0ff
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e40:	00143825 	andseq	r3, r4, r5, lsr #16
     e44:	000bc800 	andeq	ip, fp, r0, lsl #16
     e48:	00045800 	andeq	r5, r4, r0, lsl #16
     e4c:	04e80100 	strbteq	r0, [r8], #256	; 0x100
     e50:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
     e54:	0bcc0000 	bleq	ff300e5c <_estack+0xdf2fbe5c>
     e58:	04700000 	ldrbteq	r0, [r0], #-0
     e5c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
     e60:	8e260d04 	cdphi	13, 2, cr0, cr6, cr4, {0}
     e64:	d6000012 			; <UNDEFINED> instruction: 0xd6000012
     e68:	da00000b 	ble	e9c <update_n_wake+0x6c>
     e6c:	0100000b 	tsteq	r0, fp
     e70:	dc0404ed 	cfstrsle	mvf0, [r4], {237}	; 0xed
		for_all_tasks (i) {
     e74:	21000006 	tstcs	r0, r6
	__pi_mintk = znew + min;
     e78:	0000129d 	muleq	r0, sp, r2
     e7c:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
			if (!twaiting (i))
     e80:	0bfa0000 	bleq	ffe80e88 <_estack+0xdfe7be88>
     e84:	04880000 	streq	r0, [r8], #0
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
     e8c:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
     e90:	fc000014 	stc2	0, cr0, [r0], {20}
     e94:	a000000b 	andge	r0, r0, fp
     e98:	01000004 	tsteq	r0, r4
     e9c:	080404fa 	stmdaeq	r4, {r1, r3, r4, r5, r6, r7, sl}
     ea0:	21000007 	tstcs	r0, r7
     ea4:	0000145d 	andeq	r1, r0, sp, asr r4
     ea8:	12b61d00 	adcsne	r1, r6, #0, 26
     eac:	0c040000 	stceq	0, cr0, [r4], {-0}
     eb0:	0c080000 	stceq	0, cr0, [r8], {-0}
     eb4:	fd010000 	stc2	0, cr0, [r1, #-0]
				wakeuptm (i);
     eb8:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
     ebc:	08000012 	stmdaeq	r0, {r1, r4}
		for_all_tasks (i) {
     ec0:	0a00000c 	beq	ef8 <update_n_wake+0xc8>
				d = i->Timer - znew;
     ec4:	0100000c 	tsteq	r0, ip
     ec8:	26040500 	strcs	r0, [r4], -r0, lsl #10
     ecc:	00000b95 	muleq	r0, r5, fp
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	00000c12 	andeq	r0, r0, r2, lsl ip
     ed4:	00000c1e 	andeq	r0, r0, lr, lsl ip
     ed8:	04050d01 	streq	r0, [r5], #-3329	; 0xfffff2ff
	__pi_old = znew;
     edc:	0000075c 	andeq	r0, r0, ip, asr r7
}
     ee0:	00131127 	andseq	r1, r3, r7, lsr #2
	TCI_RUN_DELAY_TIMER;
     ee4:	000c1200 	andeq	r1, ip, r0, lsl #4
}
     ee8:	000c1c00 	andeq	r1, ip, r0, lsl #24
     eec:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
     ef0:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
     ef4:	20210000 	eorcs	r0, r1, r0
     ef8:	00000013 	andeq	r0, r0, r3, lsl r0
void proceed (word state) {
     efc:	125c1d00 	subsne	r1, ip, #0, 26
	prcdstate (__pi_curr, state);
     f00:	0c460000 	mareq	acc0, r0, r6
     f04:	0c480000 	mareq	acc0, r0, r8
	release;
     f08:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     f0c:	741d0405 	ldrvc	r0, [sp], #-1029	; 0xfffffbfb
void __pi_wait (aword event, word state) {
     f10:	48000012 	stmdami	r0, {r1, r4}
	sint j = nevents (__pi_curr);
     f14:	5800000c 	stmdapl	r0, {r2, r3}
	if (j >= MAX_EVENTS_PER_TASK)
     f18:	0100000c 	tsteq	r0, ip
     f1c:	1d040541 	cfstr32ne	mvfx0, [r4, #-260]	; 0xfffffefc
     f20:	0000125c 	andeq	r1, r0, ip, asr r2
		syserror (ENEVENTS, "sw");
     f24:	00000c58 	andeq	r0, r0, r8, asr ip
     f28:	00000c5a 	andeq	r0, r0, sl, asr ip
	setestate (__pi_curr->Events [j], state, event);
     f2c:	04054401 	streq	r4, [r5], #-1025	; 0xfffffbff
	incwait (__pi_curr);
     f30:	00127f25 	andseq	r7, r2, r5, lsr #30
	setestate (__pi_curr->Events [j], state, event);
     f34:	000c5a00 	andeq	r5, ip, r0, lsl #20
}
     f38:	0004b800 	andeq	fp, r4, r0, lsl #16
     f3c:	05470100 	strbeq	r0, [r7, #-256]	; 0xffffff00
     f40:	146b250b 	strbtne	r2, [fp], #-1291	; 0xfffffaf5
void __pi_trigger (aword event) {
     f44:	0c620000 	stcleq	0, cr0, [r2], #-0
	for_all_tasks (i) {
     f48:	04d00000 	ldrbeq	r0, [r0], #0
		for (j = 0; j < nevents (i); j++) {
     f4c:	4b010000 	blmi	40f54 <__ccfg+0x20fac>
     f50:	00000405 	andeq	r0, r0, r5, lsl #8
     f54:	0011ed28 	andseq	lr, r1, r8, lsr #26
     f58:	000ac800 	andeq	ip, sl, r0, lsl #16
			if (i->Events [j] . Event == event) {
     f5c:	000aca00 	andeq	ip, sl, r0, lsl #20
     f60:	02270d00 	eoreq	r0, r7, #0, 26
     f64:	0011f728 	andseq	pc, r1, r8, lsr #14
				wakeupev (i, j);
     f68:	000af600 	andeq	pc, sl, r0, lsl #12
     f6c:	000af800 	andeq	pc, sl, r0, lsl #16
	for_all_tasks (i) {
     f70:	02270d00 	eoreq	r0, r7, #0, 26
}
     f74:	0011f728 	andseq	pc, r1, r8, lsr #14
aword __pi_join (aword pid, word st) {
     f78:	000c7c00 	andeq	r7, ip, r0, lsl #24
	for_all_tasks (i) {
     f7c:	000c7e00 	andeq	r7, ip, r0, lsl #28
     f80:	02270d00 	eoreq	r0, r7, #0, 26
	return 0;
     f84:	1a011a00 	bne	4778c <__ccfg+0x277e4>
		if ((aword)i == pid) {
     f88:	01000008 	tsteq	r0, r8
			__pi_wait (pid, st);
     f8c:	0106055c 	tsteq	r6, ip, asr r5
}
     f90:	000000a7 	andeq	r0, r0, r7, lsr #1
	...
void delay (word d, word state) {
     f9c:	08129c01 	ldmdaeq	r2, {r0, sl, fp, ip, pc}
	settstate (__pi_curr, state);
     fa0:	73290000 			; <UNDEFINED> instruction: 0x73290000
     fa4:	5e010063 	cdppl	0, 0, cr0, cr1, cr3, {3}
     fa8:	00a70705 	adceq	r0, r7, r5, lsl #14
     fac:	01190000 	tsteq	r9, r0
	update_n_wake (d, YES);
     fb0:	2a000000 	bcs	fb8 <delay+0x1c>
     fb4:	0000073a 	andeq	r0, r0, sl, lsr r7
	__pi_curr->Timer = __pi_old + d;
     fb8:	14048e01 	strne	r8, [r4], #-3585	; 0xfffff1ff
     fbc:	00082a03 	andeq	r2, r8, r3, lsl #20
	inctimer (__pi_curr);
     fc0:	09d32b00 	ldmibeq	r3, {r8, r9, fp, sp}^
     fc4:	ad010000 	stcge	0, cr0, [r1, #-0]
     fc8:	2c000104 	stfcss	f0, [r0], {4}
}
     fcc:	0006de01 	andeq	sp, r6, r1, lsl #28
     fd0:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
	if (fun == NULL)
     fd4:	00000106 	andeq	r0, r0, r6, lsl #2
		return (int) __pi_curr;
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	9c010000 	stcls	0, cr0, [r1], {-0}
	for_all_tasks (i)
     fe0:	00000855 	andeq	r0, r0, r5, asr r8
}
     fe4:	0002c42d 	andeq	ip, r2, sp, lsr #8
		if (i->code == fun)
     fe8:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
	for_all_tasks (i)
     fec:	0000a719 	andeq	sl, r0, r9, lsl r7
     ff0:	00012c00 	andeq	r2, r1, r0, lsl #24
     ff4:	011e0000 	tsteq	lr, r0
int __pi_strlen (const char *s) {
     ff8:	00000567 	andeq	r0, r0, r7, ror #10
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	06040101 	streq	r0, [r4], -r1, lsl #2
}
    1000:	000008dc 	ldrdeq	r0, [r0], -ip
	for (i = 0; *(s+i) != '\0'; i++);
    1004:	00000a94 	muleq	r0, r4, sl
	while (n--)
    1008:	0a1e9c01 	beq	7a8014 <__ccfg+0x78806c>
    100c:	062e0000 	strteq	r0, [lr], -r0
		*dest++ = *src++;
    1010:	0c00000a 	stceq	0, cr0, [r0], {10}
    1014:	8600000a 	strhi	r0, [r0], -sl
    1018:	1c000008 	stcne	0, cr0, [r0], {8}
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	6b010069 	blvs	411c8 <__ccfg+0x21220>
		syserror (EREQPAR, "addv");
    1020:	008d0b04 	addeq	r0, sp, r4, lsl #22
		syserror (ERESOURCE, "addv");
    1024:	25000000 	strcs	r0, [r0, #-0]
	if (ioreq [loc] != NULL)
    1028:	00001443 	andeq	r1, r0, r3, asr #8
    102c:	00000906 	andeq	r0, r0, r6, lsl #18
		syserror (ERESOURCE, "addv");
    1030:	00000240 	andeq	r0, r0, r0, asr #4
	ioreq [loc] = rf;
    1034:	02040801 	andeq	r0, r4, #65536	; 0x10000
}
    1038:	000f5420 	andeq	r5, pc, r0, lsr #8
    103c:	00090800 	andeq	r0, r9, r0, lsl #16
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	00026000 	andeq	r6, r2, r0
    1044:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    1048:	00091a02 	andeq	r1, r9, r2, lsl #20
    104c:	02602300 	rsbeq	r2, r0, #0, 6
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
    1054:	3000000f 	andcc	r0, r0, pc
    1058:	00000f6d 	andeq	r0, r0, sp, ror #30
		syserror (ENODEVICE, "io");
    105c:	00000260 	andeq	r0, r0, r0, ror #4
    1060:	000f6e31 	andeq	r6, pc, r1, lsr lr	; <UNPREDICTABLE>
	if (len == 0)
    1064:	00013f00 	andeq	r3, r1, r0, lsl #30
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	13c92200 	bicne	r2, r9, #0, 4
    106c:	09120000 	ldmdbeq	r2, {}	; <UNPREDICTABLE>
	if (ret >= 0)
    1070:	02800000 	addeq	r0, r0, #0
	if (ret == -1) {
    1074:	fa010000 	blx	4107c <__ccfg+0x210d4>
    1078:	0008e704 	andeq	lr, r8, r4, lsl #14
		if (retry == WNONE)
    107c:	13e52100 	mvnne	r2, #0, 2
		iowait (dev, operation, retry);
    1080:	d8210000 	stmdale	r1!, {}	; <UNPREDICTABLE>
    1084:	00000013 	andeq	r0, r0, r3, lsl r0
    1088:	0013f322 	andseq	pc, r3, r2, lsr #6
			release;
    108c:	00091600 	andeq	r1, r9, r0, lsl #12
	if (ret == -2) {
    1090:	00029800 	andeq	r9, r2, r0, lsl #16
		if (retry != WNONE) {
    1094:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    1098:	00000901 	andeq	r0, r0, r1, lsl #18
			iowait (dev, operation, retry);
    109c:	00140221 	andseq	r0, r4, r1, lsr #4
    10a0:	10320000 	eorsne	r0, r2, r0
			(ioreq [dev]) (NONE, buf, len);
    10a4:	1a000014 	bne	10fc <__pi_malloc_init+0x20>
    10a8:	b0000009 	andlt	r0, r0, r9
    10ac:	01000002 	tsteq	r0, r2
		(ioreq [dev]) (NONE, buf, len);
    10b0:	1f2104fc 	svcne	0x002104fc
    10b4:	00000014 	andeq	r0, r0, r4, lsl r0
    10b8:	20000000 	andcs	r0, r0, r0
}
    10bc:	00001410 	andeq	r1, r0, r0, lsl r4
	if (retry != WNONE) {
    10c0:	0000095a 	andeq	r0, r0, sl, asr r9
		delay (-ret - 2, retry);
    10c4:	000002c8 	andeq	r0, r0, r8, asr #5
    10c8:	02040e01 	andeq	r0, r4, #1, 28
    10cc:	00000935 	andeq	r0, r0, r5, lsr r9
    10d0:	00141f21 	andseq	r1, r4, r1, lsr #30
		release;
    10d4:	10200000 	eorne	r0, r0, r0
    10d8:	5c000014 	stcpl	0, cr0, [r0], {20}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	e8000009 	stmda	r0, {r0, r3}
    10e0:	01000002 	tsteq	r0, r2
    10e4:	5002040e 	andpl	r0, r2, lr, lsl #8
    10e8:	21000009 	tstcs	r0, r9
    10ec:	0000141f 	andeq	r1, r0, pc, lsl r4
		syserror (ERESOURCE, "mal1");
    10f0:	13f32000 	mvnsne	r2, #0
    10f4:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	03000000 	movweq	r0, #0
    10fc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1100:	096b0204 	stmdbeq	fp!, {r2, r9}^
	m_size (mpools [0]) = mlen - m_hdrlen;
    1104:	02210000 	eoreq	r0, r1, #0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1108:	00000014 	andeq	r0, r0, r4, lsl r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    110c:	0013f326 	andseq	pc, r3, r6, lsr #6
    1110:	00097c00 	andeq	r7, r9, r0, lsl #24
}
    1114:	00097e00 	andeq	r7, r9, r0, lsl #28
    1118:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    111c:	00098602 	andeq	r8, r9, r2, lsl #12
    1120:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    1124:	20000000 	andcs	r0, r0, r0
    1128:	00001234 	andeq	r1, r0, r4, lsr r2
void __pi_free (aword *ch) {
    112c:	0000098e 	andeq	r0, r0, lr, lsl #19
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1130:	00000318 	andeq	r0, r0, r8, lsl r3
    1134:	02041b01 	andeq	r1, r4, #1024	; 0x400
		syserror (EMALLOC, "malg");
    1138:	000009a1 	andeq	r0, r0, r1, lsr #19
    113c:	00124321 	andseq	r4, r2, r1, lsr #6
	mcfree [MA_NP] += m_size (ch);
    1140:	cb260000 	blgt	981148 <__ccfg+0x9611a0>
		m_size (ch) ^= MALLOC_UMASK;
    1144:	b800000c 	stmdalt	r0, {r2, r3}
    1148:	e2000009 	and	r0, r0, #9
	mcfree [MA_NP] += m_size (ch);
    114c:	01000009 	tsteq	r0, r9
	QFREE;
    1150:	c802043e 	stmdagt	r2, {r1, r2, r3, r4, r5, sl}
	if (mevent [MA_NP] . nwait) {
    1154:	25000009 	strcs	r0, [r0, #-9]
    1158:	00001443 	andeq	r1, r0, r3, asr #8
		trigger ((aword)(&(mevent [MA_NP])));
    115c:	000009d6 	ldrdeq	r0, [r0], -r6
		mevent [MA_NP] . nwait --;
    1160:	00000330 	andeq	r0, r0, r0, lsr r3
}
    1164:	02030101 	andeq	r0, r3, #1073741824	; 0x40000000
    1168:	12ab2600 	adcne	r2, fp, #0, 12
    116c:	09f20000 	ldmibeq	r2!, {}^	; <UNPREDICTABLE>
    1170:	0a060000 	beq	181178 <__ccfg+0x1611d0>
void kill (aword pid) {
    1174:	51010000 	mrspl	r0, (UNDEF: 1)
		pid = (aword) __pi_curr;
    1178:	09ef0304 	stmibeq	pc!, {r2, r8, r9}^	; <UNPREDICTABLE>
	j = NULL;
    117c:	b61d0000 	ldrlt	r0, [sp], -r0
	for_all_tasks (i) {
    1180:	f2000012 	vqadd.s8	d0, d0, d2
	syserror (EREQPAR, "kpi");
    1184:	f6000009 			; <UNDEFINED> instruction: 0xf6000009
    1188:	0b000009 	bleq	11b4 <kill+0x40>
		if ((aword)i == pid) {
    118c:	00050114 	andeq	r0, r5, r4, lsl r1
    1190:	000b9533 	andeq	r9, fp, r3, lsr r5
				__PCB = i->Next;
    1194:	000a0c00 	andeq	r0, sl, r0, lsl #24
			killev (i);
    1198:	00034800 	andeq	r4, r3, r0, lsl #16
			ufree (i);
    119c:	04720100 	ldrbteq	r0, [r2], #-256	; 0xffffff00
			if (i == __pi_curr)
    11a0:	13113302 	tstne	r1, #134217728	; 0x8000000
    11a4:	0a0c0000 	beq	3011ac <__ccfg+0x2e1204>
				release;
    11a8:	03480000 	movteq	r0, #32768	; 0x8000
				j->Next = i->Next;
    11ac:	bd010000 	stclt	0, cr0, [r1, #-0]
    11b0:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
    11b4:	21000013 	tstcs	r0, r3, lsl r0
}
    11b8:	00001320 	andeq	r1, r0, r0, lsr #6
    11bc:	2c000000 	stccs	0, cr0, [r0], {-0}
    11c0:	00084101 	andeq	r4, r8, r1, lsl #2
	if (size < 8)
    11c4:	03ed0100 	mvneq	r0, #0, 2
		_size = 2;
    11c8:	07fc0106 	ldrbeq	r0, [ip, r6, lsl #2]!
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
		_size = (((aword)size) + 3) >> 2;
    11d0:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	00000aa7 	andeq	r0, r0, r7, lsr #21
		_size = (((aword)size) + 3) >> 2;
    11d8:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
		if (mevent [MA_NP] . nfail != 255)
    11dc:	03ed0100 	mvneq	r0, #0, 2
    11e0:	00008d1c 	andeq	r8, r0, ip, lsl sp
			mevent [MA_NP] . nfail ++;
    11e4:	29500100 	ldmdbcs	r0, {r8}^
		mnfree [MA_NP] = 0;
    11e8:	ef010069 	svc	0x00010069
    11ec:	008d0603 	addeq	r0, sp, r3, lsl #12
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	015d0000 	cmpeq	sp, r0
    11f4:	62290000 	eorvs	r0, r9, #0
			syserror (EMALLOC, "malc");
    11f8:	f001006e 			; <UNDEFINED> instruction: 0xf001006e
    11fc:	00df0803 	sbcseq	r0, pc, r3, lsl #16
		if (m_size (chunk) >= _size)
    1200:	017b0000 	cmneq	fp, r0
    1204:	ed250000 	stc	0, cr0, [r5, #-0]
		chunk = m_nextp (chunk)) {
    1208:	fc000011 	stc2	0, cr0, [r0], {17}
		m_setnextp (cc, m_nextp (chunk));
    120c:	00000007 	andeq	r0, r0, r7
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1210:	01000002 	tsteq	r0, r2
    1214:	200203f2 	strdcs	r0, [r2], -r2
			m_size (chunk) = _size;
    1218:	000013ac 	andeq	r1, r0, ip, lsr #7
			cc = chunk + _size + m_hdrlen;
    121c:	00000802 	andeq	r0, r0, r2, lsl #16
    1220:	00000218 	andeq	r0, r0, r8, lsl r2
			m_size (cc) = waste - m_hdrlen;
    1224:	0303f501 	movweq	pc, #13569	; 0x3501	; <UNPREDICTABLE>
			QFREE;
    1228:	00000a95 	muleq	r0, r5, sl
		mevent [MA_NP] . nfail = 0;
    122c:	0013bb35 	andseq	fp, r3, r5, lsr fp
		mcfree [MA_NP] -= m_size (chunk);
    1230:	00017b00 	andeq	r7, r1, r0, lsl #22
    1234:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    1238:	26000011 			; <UNDEFINED> instruction: 0x26000011
    123c:	28000008 	stmdacs	r0, {r3}
		m_size (chunk) |= MALLOC_UMASK;
    1240:	01000008 	tsteq	r0, r8
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1244:	000203f9 	strdeq	r0, [r2], -r9
		m_size (chunk) |= MALLOC_UMASK;
    1248:	07e5012c 	strbeq	r0, [r5, ip, lsr #2]!
			mnfree [MA_NP] = mcfree [MA_NP];
    124c:	da010000 	ble	41254 <__ccfg+0x212ac>
}
    1250:	b8010603 	stmdalt	r1, {r0, r1, r9, sl}
    1254:	fc000007 	stc2	0, cr0, [r0], {7}
    1258:	01000007 	tsteq	r0, r7
    125c:	000b2c9c 	muleq	fp, ip, ip
    1260:	61763400 	cmnvs	r6, r0, lsl #8
    1264:	da01006c 	ble	4141c <__ccfg+0x21474>
    1268:	008d1c03 	addeq	r1, sp, r3, lsl #24
aword __pi_fork (fsmcode func, aword data) {
    126c:	50010000 	andpl	r0, r1, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	0100691c 	tsteq	r0, ip, lsl r9
    1274:	8d0603dc 	stchi	3, cr0, [r6, #-880]	; 0xfffffc90
    1278:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
		if ((j = __PCB) == NULL)
    127c:	01006e62 	tsteq	r0, r2, ror #28
	i->Next = NULL;
    1280:	df0803dd 	svcle	0x000803dd
	i->data = data;
    1284:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
		if ((j = __PCB) == NULL)
    1288:	25000001 	strcs	r0, [r0, #-1]
}
    128c:	000011ed 	andeq	r1, r0, sp, ror #3
			for (; j->Next != NULL; j = j->Next);
    1290:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    1294:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
	return (aword) i;
    1298:	0203df01 	andeq	sp, r3, #1, 30
    129c:	0013ac20 	andseq	sl, r3, r0, lsr #24
	if (mevent [MA_NP] . nwait != 255)
    12a0:	0007bc00 	andeq	fp, r7, r0, lsl #24
    12a4:	0001d000 	andeq	sp, r1, r0
    12a8:	03e20100 	mvneq	r0, #0, 2
		mevent [MA_NP] . nwait ++;
    12ac:	000b1a03 	andeq	r1, fp, r3, lsl #20
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    12b4:	01a10000 			; <UNDEFINED> instruction: 0x01a10000
void diag (const char *mess, ...) {
    12b8:	1d000000 	stcne	0, cr0, [r0, #-0]
    12bc:	000011f7 	strdeq	r1, [r0], -r7
    12c0:	000007ea 	andeq	r0, r0, sl, ror #15
	diag_disable_int (a, is);
    12c4:	000007ec 	andeq	r0, r0, ip, ror #15
    12c8:	0203e601 	andeq	lr, r3, #1048576	; 0x100000
    12cc:	52011e00 	andpl	r1, r1, #0, 28
				d = (bc == 16) ? 10000 : 1000000000;
    12d0:	01000008 	tsteq	r0, r8
	diag_disable_int (a, is);
    12d4:	380603c6 	stmdacc	r6, {r1, r2, r6, r7, r8, r9}
	while (*mess != '\0') {
    12d8:	dc000008 	stcle	0, cr0, [r0], {8}
	dgout ('\r');
    12dc:	01000008 	tsteq	r0, r8
	dgout ('\n');
    12e0:	000b959c 	muleq	fp, ip, r5
    12e4:	084a2e00 	stmdaeq	sl, {r9, sl, fp, sp}^
    12e8:	08780000 	ldmdaeq	r8!, {}^	; <UNPREDICTABLE>
	diag_wait (a);
    12ec:	0b6e0000 	bleq	1b812f4 <__ccfg+0x1b6134c>
	diag_enable_int (a, is);
    12f0:	6a360000 	bvs	d812f8 <__ccfg+0xd61350>
    12f4:	02030700 	andeq	r0, r3, #0, 14
}
    12f8:	0000008d 	andeq	r0, r0, sp, lsl #1
    12fc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1300:	07006936 	smladxeq	r0, r6, r9, r6
		if (*mess == '%') {
    1304:	03f40203 	mvnseq	r0, #805306368	; 0x30000000
    1308:	01c70000 	biceq	r0, r7, r0
			if (*mess == 'l') {
    130c:	37000000 	strcc	r0, [r0, -r0]
    1310:	0000088a 	andeq	r0, r0, sl, lsl #17
				mess++;
    1314:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
				val = va_arg (ap, lword);
    1318:	08006a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, sp, lr}
				bc = 32;
    131c:	008d0202 	addeq	r0, sp, r2, lsl #4
				bc = 16;
    1320:	01da0000 	bicseq	r0, sl, r0
			switch (*mess) {
    1324:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
    1328:	02020800 	andeq	r0, r2, #0, 16
    132c:	000003f4 	strdeq	r0, [r0], -r4
				dgout ('%');
    1330:	000001ed 	andeq	r0, r0, sp, ror #3
    1334:	66380000 	ldrtvs	r0, [r8], -r0
				dgout (*mess);
    1338:	01000006 	tsteq	r0, r6
    133c:	031403bb 	tsteq	r4, #-335544318	; 0xec000002
			switch (*mess) {
    1340:	09c3011e 	stmibeq	r3, {r1, r2, r3, r4, r8}^
					v = __pi_hex_enc_table [
    1344:	82010000 	andhi	r0, r1, #0
					i += 4;
    1348:	06f80603 	ldrbteq	r0, [r8], r3, lsl #12
					(val >> (bc - i)) & 0xf];
    134c:	07b80000 	ldreq	r0, [r8, r0]!
    1350:	9c010000 	stcls	0, cr0, [r1], {-0}
					dgout (v);
    1354:	00000c28 	andeq	r0, r0, r8, lsr #24
    1358:	0007242e 	andeq	r2, r7, lr, lsr #8
				while (i < bc) {
    135c:	00075200 	andeq	r5, r7, r0, lsl #4
			mess++;
    1360:	000be300 	andeq	lr, fp, r0, lsl #6
					d /= 10;
    1364:	006a2900 	rsbeq	r2, sl, r0, lsl #18
				if ((val >> (bc - 1)) & 1) {
    1368:	03038901 	movweq	r8, #14593	; 0x3901
    136c:	0000008d 	andeq	r0, r0, sp, lsl #1
					dgout ('-');
    1370:	00000200 	andeq	r0, r0, r0, lsl #4
    1374:	01006929 	tsteq	r0, r9, lsr #18
						val |= 0xffff0000;
    1378:	f4030389 	vst2.32	{d0-d3}, [r3], r9
    137c:	13000003 	movwne	r0, #3
    1380:	00000002 	andeq	r0, r0, r2
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	0001a01b 	andeq	sl, r1, fp, lsl r0
    1388:	000c0b00 	andeq	r0, ip, r0, lsl #22
    138c:	006a2900 	rsbeq	r2, sl, r0, lsl #18
					v = (word) (val / d);
    1390:	03038f01 	movweq	r8, #16129	; 0x3f01
					if (v || d == 1) break;
    1394:	0000008d 	andeq	r0, r0, sp, lsl #1
    1398:	00000226 	andeq	r0, r0, r6, lsr #4
					d /= 10;
    139c:	01006929 	tsteq	r0, r9, lsr #18
				d = (bc == 16) ? 10000 : 1000000000;
    13a0:	f403038f 	vst2.32	{d0-d3}, [r3]
					dgout (v + '0');
    13a4:	39000003 	stmdbcc	r0, {r0, r1}
    13a8:	00000002 	andeq	r0, r0, r2
    13ac:	0012e733 	andseq	lr, r2, r3, lsr r7
					d /= 10;
    13b0:	0006f800 	andeq	pc, r6, r0, lsl #16
					val = val - (v * d);
    13b4:	00018000 	andeq	r8, r1, r0
					if (d == 0) break;
    13b8:	03840100 	orreq	r0, r4, #0, 2
					v = (word) (val / d);
    13bc:	13032102 	movwne	r2, #12546	; 0x3102
    13c0:	f6210000 			; <UNDEFINED> instruction: 0xf6210000
				if (bc == 16)
    13c4:	00000012 	andeq	r0, r0, r2, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    13c8:	076a3900 	strbeq	r3, [sl, -r0, lsl #18]!
					val &= 0xffff;
    13cc:	7d010000 	stcvc	0, cr0, [r1, #-0]
					dgout (*s);
    13d0:	9c010d03 	stcls	13, cr0, [r1], {3}
					s++;
    13d4:	a8000002 	stmdage	r0, {r1}
				while (*s != '\0') {
    13d8:	01000002 	tsteq	r0, r2
    13dc:	000c529c 	muleq	ip, ip, r2
			dgout (*mess++);
    13e0:	09212d00 	stmdbeq	r1!, {r8, sl, fp, sp}
    13e4:	7d010000 	stcvc	0, cr0, [r1, #-0]
    13e8:	008d1f03 	addeq	r1, sp, r3, lsl #30
    13ec:	024c0000 	subeq	r0, ip, #0
    13f0:	3a000000 	bcc	13f8 <FaultISR>
}
    13f4:	000008ee 	andeq	r0, r0, lr, ror #17
    while(1)
    13f8:	0c031001 	stceq	0, cr1, [r3], {1}
{
    13fc:	00008d01 	andeq	r8, r0, r1, lsl #26
    SetupTrimDevice();
    1400:	0005e800 	andeq	lr, r5, r0, lsl #16
    pui32Src = &_etext;
    1404:	0006f800 	andeq	pc, r6, r0, lsl #16
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1408:	cb9c0100 	blgt	fe701810 <_estack+0xde6fc810>
    __asm("    ldr     r0, =_bss\n"
    140c:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    1410:	000006eb 	andeq	r0, r0, fp, ror #13
    1414:	1e031001 	cdpne	0, 0, cr1, cr3, cr1, {0}
    1418:	0000008d 	andeq	r0, r0, sp, lsl #1
    141c:	0000026a 	andeq	r0, r0, sl, ror #4
   main();
    1420:	6675623b 			; <UNDEFINED> instruction: 0x6675623b
    FaultISR();
    1424:	03100100 	tsteq	r0, #0, 2
        *pui32Dest++ = *pui32Src++;
    1428:	0001c92f 	andeq	ip, r1, pc, lsr #18
    142c:	00027d00 	andeq	r7, r2, r0, lsl #26
    1430:	656c3b00 	strbvs	r3, [ip, #-2816]!	; 0xfffff500
    1434:	1001006e 	andne	r0, r1, lr, rrx
    1438:	008d3803 	addeq	r3, sp, r3, lsl #16
    143c:	031f0000 	tsteq	pc, #0
    1440:	122b0000 	eorne	r0, fp, #0
    1444:	01000006 	tsteq	r0, r6
static byte get_byte () {
    1448:	2b010318 	blcs	420b0 <__ccfg+0x22108>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    144c:	00000713 	andeq	r0, r0, r3, lsl r7
    1450:	01033d01 	tsteq	r3, r1, lsl #26
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	000d4427 	andeq	r4, sp, r7, lsr #8
    1458:	0006ca00 	andeq	ip, r6, r0, lsl #20
		if (ee_inp)
    145c:	0006cc00 	andeq	ip, r6, r0, lsl #24
			b |= 1;
    1460:	03650100 	cmneq	r5, #0, 2
    1464:	0d582115 	ldfeqe	f2, [r8, #-84]	; 0xffffffac
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1468:	00000000 	andeq	r0, r0, r0
	for (b = 0, i = 0; i < 8; i++) {
    146c:	0007b438 	andeq	fp, r7, r8, lsr r4
}
    1470:	02fc0100 	rscseq	r0, ip, #0, 2
    1474:	b53c010d 	ldrlt	r0, [ip, #-269]!	; 0xfffffef3
    1478:	01000007 	tsteq	r0, r7
static void put_byte (byte b) {
    147c:	b00d02f0 	strdlt	r0, [sp], -r0	; <UNPREDICTABLE>
    1480:	e8000005 	stmda	r0, {r0, r2}
    1484:	01000005 	tsteq	r0, r5
    1488:	000d449c 	muleq	sp, ip, r4
		if (b & 0x80)
    148c:	133b2000 	teqne	fp, #0
    1490:	05b00000 	ldreq	r0, [r0, #0]!
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1494:	01680000 	cmneq	r8, r0
	for (i = 0; i < 8; i++) {
    1498:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
		b <<= 1;
    149c:	0d070202 	sfmeq	f0, 4, [r7, #-8]
	for (i = 0; i < 8; i++) {
    14a0:	4a210000 	bmi	8414a8 <__ccfg+0x821500>
}
    14a4:	00000013 	andeq	r0, r0, r3, lsl r0
    14a8:	00137526 	andseq	r7, r3, r6, lsr #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14ac:	0005bc00 	andeq	fp, r5, r0, lsl #24
    14b0:	0005c200 	andeq	ip, r5, r0, lsl #4
	put_byte (cmd);
    14b4:	02f60100 	rscseq	r0, r6, #0, 2
    14b8:	000d2c02 	andeq	r2, sp, r2, lsl #24
}
    14bc:	139e2100 	orrsne	r2, lr, #0, 2
    14c0:	91210000 			; <UNDEFINED> instruction: 0x91210000
static void wwait (word st, word del) {
    14c4:	21000013 	tstcs	r0, r3, lsl r0
    14c8:	00001384 	andeq	r1, r0, r4, lsl #7
    14cc:	12ca2700 	sbcne	r2, sl, #0, 14
	while (dopen && (rdsr () & 1)) {
    14d0:	05c20000 	strbeq	r0, [r2]
    14d4:	05cc0000 	strbeq	r0, [ip]
    14d8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    14dc:	d9210202 	stmdble	r1!, {r1, r9}
	put_byte (CMD_RDSR);
    14e0:	00000012 	andeq	r0, r0, r2, lsl r0
	r = get_byte ();
    14e4:	e0013d00 	and	r3, r1, r0, lsl #26
    14e8:	01000005 	tsteq	r0, r5
	while (dopen && (rdsr () & 1)) {
    14ec:	010602eb 	smlatteq	r6, fp, r2, r0
}
    14f0:	000000a7 	andeq	r0, r0, r7, lsr #1
		if (st == WNONE)
    14f4:	000d6501 	andeq	r6, sp, r1, lsl #10
    14f8:	61753e00 	cmnvs	r5, r0, lsl #28
			mdelay (1);
    14fc:	02eb0100 	rsceq	r0, fp, #0, 2
    1500:	000d6527 	andeq	r6, sp, r7, lsr #10
			delay (del, st);
    1504:	04070000 	streq	r0, [r7], #-0
    1508:	00000226 	andeq	r0, r0, r6, lsr #4
			release;
    150c:	0699011a 			; <UNDEFINED> instruction: 0x0699011a
    1510:	d4010000 	strle	r0, [r1], #-0
    1514:	9b010902 	blls	43924 <__ccfg+0x2397c>
static void ready () {
    1518:	5c000000 	stcpl	0, cr0, [r0], {-0}
	if (dopen) {
    151c:	b0000005 	andlt	r0, r0, r5
		wwait (WNONE, 1);
    1520:	01000005 	tsteq	r0, r5
    1524:	000dc19c 	muleq	sp, ip, r1
    1528:	05ed2d00 	strbeq	r2, [sp, #3328]!	; 0xd00
	dstat = 0;
    152c:	d4010000 	strle	r0, [r1], #-0
}
    1530:	00a72102 	adceq	r2, r7, r2, lsl #2
    1534:	03ab0000 			; <UNDEFINED> instruction: 0x03ab0000
    1538:	753b0000 	ldrvc	r0, [fp, #-0]!
	udelay (1);
    153c:	d4010061 	strle	r0, [r1], #-97	; 0xffffff9f
    1540:	0dc12f02 	stcleq	15, cr2, [r1, #8]
	udelay (1);
    1544:	03be0000 			; <UNDEFINED> instruction: 0x03be0000
		dopen = DOPEN_TEMP;
    1548:	58330000 	ldmdapl	r3!, {}	; <UNPREDICTABLE>
    154c:	7c000013 	stcvc	0, cr0, [r0], {19}
    1550:	50000005 	andpl	r0, r0, r5
    1554:	01000001 	tsteq	r0, r1
static void cclose () {
    1558:	210202e6 	smlattcs	r2, r6, r2, r0
	if (dopen == DOPEN_TEMP) {
    155c:	00001367 	andeq	r1, r0, r7, ror #6
    1560:	04070000 	streq	r0, [r7], #-0
		wwait (WNONE, 1);
    1564:	0000021a 	andeq	r0, r0, sl, lsl r2
    1568:	09e9011a 	stmibeq	r9!, {r1, r3, r4, r8}^
	cmd_0 (CMD_DP);
    156c:	8a010000 	bhi	41574 <__ccfg+0x215cc>
    1570:	a7010601 	strge	r0, [r1, -r1, lsl #12]
		dopen = 0;
    1574:	0c000000 	stceq	0, cr0, [r0], {-0}
}
    1578:	5c000005 	stcpl	0, cr0, [r0], {5}
word ee_open () {
    157c:	01000005 	tsteq	r0, r5
	ready ();
    1580:	000e0f9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
	dopen = DOPEN_PERM;
    1584:	07c12d00 	strbeq	r2, [r1, r0, lsl #26]
    1588:	8a010000 	bhi	41590 <__ccfg+0x215e8>
}
    158c:	009b2601 	addseq	r2, fp, r1, lsl #12
	if (dopen) {
    1590:	03d10000 	bicseq	r0, r1, #0
    1594:	453f0000 	ldrmi	r0, [pc, #-0]!	; 159c <ee_close+0xc>
		dopen = DOPEN_TEMP;
    1598:	a4010058 	strge	r0, [r1], #-88	; 0xffffffa8
		cclose ();
    159c:	461d0101 	ldrmi	r0, [sp], -r1, lsl #2
}
    15a0:	2000000f 	andcs	r0, r0, pc
int ser_in (word st, char *buf, int len) {
    15a4:	2a000005 	bcs	15c0 <ser_in+0x1c>
    15a8:	01000005 	tsteq	r0, r5
	if (len == 0)
    15ac:	001a019c 	mulseq	sl, ip, r1
	if (__inpline == NULL) {
    15b0:	0777011e 			; <UNDEFINED> instruction: 0x0777011e
		if ((prcs = running (__inserial)) == 0) {
    15b4:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    15b8:	03f80601 	mvnseq	r0, #1048576	; 0x100000
			prcs = runthread (__inserial);
    15bc:	050c0000 	streq	r0, [ip, #-0]
    15c0:	9c010000 	stcls	0, cr0, [r1], {-0}
			if (prcs == 0) {
    15c4:	00000ec1 	andeq	r0, r0, r1, asr #29
				npwait (st);
    15c8:	00088c40 	andeq	r8, r8, r0, asr #24
		release;
    15cc:	013a0100 	teqeq	sl, r0, lsl #2
		join (prcs, st);
    15d0:	0000df08 	andeq	sp, r0, r8, lsl #30
    15d4:	0003ef00 	andeq	lr, r3, r0, lsl #30
	if (*__inpline == NULL) // bin cmd
    15d8:	55454100 	strbpl	r4, [r5, #-256]	; 0xffffff00
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15dc:	68010054 	stmdavs	r1, {r2, r4, r6}
	if (prcs >= len)
    15e0:	04460101 	strbeq	r0, [r6], #-257	; 0xfffffeff
		prcs = len-1;
    15e4:	38230000 	stmdacc	r3!, {}	; <UNPREDICTABLE>
	memcpy (buf, __inpline, prcs);
    15e8:	40000001 	andmi	r0, r0, r1
    15ec:	000006f5 	strdeq	r0, [r0], -r5
    15f0:	0b014701 	bleq	531fc <__ccfg+0x33254>
	ufree (__inpline);
    15f4:	0000009b 	muleq	r0, fp, r0
	__inpline = NULL;
    15f8:	0000043a 	andeq	r0, r0, sl, lsr r4
	if (*buf) // if it's NULL, it's a bin cmd
    15fc:	00141042 	andseq	r1, r4, r2, asr #32
		buf [prcs] = '\0';
    1600:	00046400 	andeq	r6, r4, r0, lsl #8
}
    1604:	00046c00 	andeq	r6, r4, r0, lsl #24
		prcs = strlen (__inpline);
    1608:	060d0500 	streq	r0, [sp], -r0, lsl #10
    160c:	00000e75 	andeq	r0, r0, r5, ror lr
		return 0;
    1610:	00141f21 	andseq	r1, r4, r1, lsr #30
    1614:	10420000 	subne	r0, r2, r0
    1618:	70000014 	andvc	r0, r0, r4, lsl r0
int ser_outf (word st, const char *m, ...) {
    161c:	78000004 	stmdavc	r0, {r2}
    1620:	05000004 	streq	r0, [r0, #-4]
	if ((prcs = running (__outserial)) != 0) {
    1624:	0e8f060f 	cdpeq	6, 8, cr0, cr15, cr15, {0}
    1628:	1f210000 	svcne	0x00210000
		join (prcs, st);
    162c:	00000014 	andeq	r0, r0, r4, lsl r0
    1630:	0013f342 	andseq	pc, r3, r2, asr #6
		release;
    1634:	0004be00 	andeq	fp, r4, r0, lsl #28
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	0004c600 	andeq	ip, r4, r0, lsl #12
    163c:	06170500 	ldreq	r0, [r7], -r0, lsl #10
    1640:	00000ea9 	andeq	r0, r0, r9, lsr #29
		umwait (st);
    1644:	00140221 	andseq	r0, r4, r1, lsr #4
    1648:	f3430000 	vhadd.u8	d16, d3, d0
	if (runstrand (__outserial, buf) == 0) {
    164c:	ca000013 	bgt	16a0 <ser_inf+0x30>
    1650:	d2000004 	andle	r0, r0, #4
    1654:	05000004 	streq	r0, [r0, #-4]
		ufree (buf);
    1658:	02210619 	eoreq	r0, r1, #26214400	; 0x1900000
		npwait (st);
    165c:	00000014 	andeq	r0, r0, r4, lsl r0
}
    1660:	011e0000 	tsteq	lr, r0
    1664:	00000829 	andeq	r0, r0, r9, lsr #16
    1668:	06012b01 	streq	r2, [r1], -r1, lsl #22
    166c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
int ser_inf (word st, const char *fmt, ...) {
    1670:	000003f8 	strdeq	r0, [r0], -r8
    1674:	0ef19c01 	cdpeq	12, 15, cr9, cr1, cr1, {0}
	if (fmt == NULL)
    1678:	25330000 	ldrcs	r0, [r3, #-0]!
	if (__inpline == NULL) {
    167c:	d800000f 	stmdale	r0, {r0, r1, r2, r3}
		if ((prcs = running (__inserial)) == 0) {
    1680:	20000003 	andcs	r0, r0, r3
    1684:	01000001 	tsteq	r0, r1
			prcs = runthread (__inserial);
    1688:	212c0132 			; <UNDEFINED> instruction: 0x212c0132
    168c:	00000f38 	andeq	r0, r0, r8, lsr pc
			if (prcs == 0) {
    1690:	011e0000 	tsteq	lr, r0
				npwait (st);
    1694:	0000078e 	andeq	r0, r0, lr, lsl #15
		release;
    1698:	06011e01 	streq	r1, [r1], -r1, lsl #28
		join (prcs, st);
    169c:	00000390 	muleq	r0, r0, r3
    16a0:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	va_start (ap, fmt);
    16a4:	0f259c01 	svceq	0x00259c01
	prcs = vscan (__inpline, fmt, ap);
    16a8:	25330000 	ldrcs	r0, [r3, #-0]!
    16ac:	a200000f 	andge	r0, r0, #15
	ufree (__inpline);
    16b0:	00000003 	andeq	r0, r0, r3
	__inpline = NULL;
    16b4:	01000001 	tsteq	r0, r1
}
    16b8:	352c0125 	strcc	r0, [ip, #-293]!	; 0xfffffedb
    16bc:	00000f38 	andeq	r0, r0, r8, lsr pc
    16c0:	00000479 	andeq	r0, r0, r9, ror r4
		return 0;
    16c4:	85440000 	strbhi	r0, [r4, #-0]
    16c8:	01000008 	tsteq	r0, r8
    16cc:	01150117 	tsteq	r5, r7, lsl r1
strand (__outserial, const char*)
    16d0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16d4:	000f4603 	andeq	r4, pc, r3, lsl #12
    16d8:	65643e00 	strbvs	r3, [r4, #-3584]!	; 0xfffff200
    16dc:	1701006c 	strne	r0, [r1, -ip, rrx]
endstrand
    16e0:	00a72201 	adceq	r2, r7, r1, lsl #4
    16e4:	45000000 	strmi	r0, [r0, #-0]
	ptr = data;
    16e8:	00000502 	andeq	r0, r0, r2, lsl #10
    16ec:	14010e01 	strne	r0, [r1], #-3585	; 0xfffff1ff
	if (*ptr)
    16f0:	000000a7 	andeq	r0, r0, r7, lsr #1
		len = strlen (ptr);
    16f4:	09dd4603 	ldmibeq	sp, {r0, r1, r9, sl, lr}^
    16f8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fc:	0f7a0314 	svceq	0x007a0314
    1700:	70470000 	subvc	r0, r7, r0
    1704:	01006e69 	tsteq	r0, r9, ror #28
    1708:	008d06f2 	strdeq	r0, [sp], r2
    170c:	47480000 	strbmi	r0, [r8, -r0]
	len -= quant;
    1710:	f4010069 	vst4.16	{d0-d3}, [r1 :128], r9
    1714:	00008d0b 	andeq	r8, r0, fp, lsl #26
    1718:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
	if (len == 0) {
    171c:	00091301 	andeq	r1, r9, r1, lsl #6
		ufree (data);
    1720:	06980100 	ldreq	r0, [r8], r0, lsl #2
		finish;
    1724:	00033c01 	andeq	r3, r3, r1, lsl #24
    1728:	00039000 	andeq	r9, r3, r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    172c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    1730:	4a000010 	bmi	1778 <__inserial+0x38>
    1734:	01006365 	tsteq	r0, r5, ror #6
    1738:	00a71a98 	umlaleq	r1, r7, r8, sl
    173c:	048c0000 	streq	r0, [ip], #0
strand (__inserial, address)
    1740:	6d4a0000 	stclvs	0, cr0, [sl, #-0]
    1744:	2a980100 	bcs	fe601b4c <_estack+0xde5fcb4c>
    1748:	00001024 	andeq	r1, r0, r4, lsr #32
    174c:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1750:	0011ed28 	andseq	lr, r1, r8, lsr #26
	if (__inpline != NULL)
    1754:	00034800 	andeq	r4, r3, r0, lsl #16
    1758:	00034a00 	andeq	r4, r3, r0, lsl #20
		finish;
    175c:	02a80100 	adceq	r0, r8, #0, 2
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1760:	00141022 	andseq	r1, r4, r2, lsr #32
    1764:	00034a00 	andeq	r4, r3, r0, lsl #20
    1768:	0000b000 	andeq	fp, r0, r0
    176c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
		umwait (IM_INIT);
    1770:	00000fd9 	ldrdeq	r0, [r0], -r9
		release;
    1774:	00141f21 	andseq	r1, r4, r1, lsr #30
	savedata (data);
    1778:	10220000 	eorne	r0, r2, r0
	len = MAX_LINE_LENGTH;
    177c:	50000014 	andpl	r0, r0, r4, lsl r0
	io (IM_READ, __cport, READ, ptr, 1);
    1780:	d0000003 	andle	r0, r0, r3
    1784:	01000000 	mrseq	r0, (UNDEF: 0)
    1788:	0ff303b8 	svceq	0x00f303b8
    178c:	1f210000 	svcne	0x00210000
	if (ptr == (char*) data) { // new line
    1790:	00000014 	andeq	r0, r0, r4, lsl r0
    1794:	0013f322 	andseq	pc, r3, r2, lsr #6
		if (*ptr == '\0') { // bin cmd
    1798:	00036800 	andeq	r6, r3, r0, lsl #16
			proceed (IM_BIN);
    179c:	0000e800 	andeq	lr, r0, r0, lsl #16
    17a0:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
		if (*ptr < 0x20)
    17a4:	0000100d 	andeq	r1, r0, sp
    17a8:	00140221 	andseq	r0, r4, r1, lsr #4
			proceed (IM_READ);
    17ac:	f3430000 	vhadd.u8	d16, d3, d0
    17b0:	6e000013 	mcrvs	0, 0, r0, cr0, cr3, {0}
	if (*ptr == '\n' || *ptr == '\r') {
    17b4:	70000003 	andvc	r0, r0, r3
    17b8:	01000003 	tsteq	r0, r3
    17bc:	022103b8 	eoreq	r0, r1, #184, 6	; 0xe0000002
		*ptr = '\0';
    17c0:	00000014 	andeq	r0, r0, r4, lsl r0
		__inpline = (char*)data;
    17c4:	d6040700 	strle	r0, [r4], -r0, lsl #14
		finish;
    17c8:	49000001 	stmdbmi	r0, {r0}
	if (len) {
    17cc:	0008b401 	andeq	fp, r8, r1, lsl #8
		ptr++;
    17d0:	06720100 	ldrbteq	r0, [r2], -r0, lsl #2
    17d4:	00000001 	andeq	r0, r0, r1
		len--;
    17d8:	00000000 	andeq	r0, r0, r0
	proceed (IM_READ);
    17dc:	ca9c0100 	bgt	fe701be4 <_estack+0xde6fcbe4>
	io (IM_BIN, __cport, READ, ptr, 1);
    17e0:	4a000010 	bmi	1828 <__inserial+0xe8>
    17e4:	01007473 	tsteq	r0, r3, ror r4
    17e8:	00a71872 	adceq	r1, r7, r2, ror r8
    17ec:	04bd0000 	ldrteq	r0, [sp], #0
    17f0:	734a0000 	movtvc	r0, #40960	; 0xa000
	len -= 2;
    17f4:	01006e65 	tsteq	r0, r5, ror #28
	if (len > *ptr + 1) // 1 for 0x04
    17f8:	02442872 	subeq	r2, r4, #7471104	; 0x720000
    17fc:	04d00000 	ldrbeq	r0, [r0], #0
		len = *ptr + 1;
    1800:	764a0000 	strbvc	r0, [sl], -r0
    1804:	01006c61 	tsteq	r0, r1, ror #24
	ptr++;
    1808:	00fc3572 	rscseq	r3, ip, r2, ror r5
	quant = io (IM_BINL, __cport, READ, ptr, len);
    180c:	04ee0000 	strbteq	r0, [lr], #0
    1810:	1d4b0000 	stclne	0, cr0, [fp, #-0]
    1814:	01000005 	tsteq	r0, r5
    1818:	00c90e74 	sbceq	r0, r9, r4, ror lr
    181c:	03050000 	movweq	r0, #20480	; 0x5000
    1820:	00000000 	andeq	r0, r0, r0
	len -= quant;
    1824:	000a004c 	andeq	r0, sl, ip, asr #32
		__inpline = (char*)data;
    1828:	01780100 	cmneq	r8, r0, lsl #2
		finish;
    182c:	00000000 	andeq	r0, r0, r0
	ptr += quant;
    1830:	0012204d 	andseq	r2, r2, sp, asr #32
    1834:	00000000 	andeq	r0, r0, r0
endstrand
    1838:	0004e800 	andeq	lr, r4, r0, lsl #16
    183c:	03810100 	orreq	r0, r1, #0, 2
	proceed (IM_BINL);
    1840:	00120142 	andseq	r0, r2, r2, asr #2
	...
endstrand
    184c:	127e0100 	rsbsne	r0, lr, #0, 2
    1850:	000010b9 	strheq	r1, [r0], -r9
    1854:	0012132f 	andseq	r1, r2, pc, lsr #6
    1858:	2a280000 	bcs	a01860 <__ccfg+0x9e18b8>
		if (res && (d < n))
    185c:	00000012 	andeq	r0, r0, r2, lsl r0
    1860:	00000000 	andeq	r0, r0, r0
    1864:	01000000 	mrseq	r0, (UNDEF: 0)
    1868:	4e000384 	cdpmi	3, 0, cr0, cr0, cr4, {4}
			res [d] = (char) c;
    186c:	0009a701 	andeq	sl, r9, r1, lsl #14
		d++;
    1870:	06620100 	strbteq	r0, [r2], -r0, lsl #2
    1874:	00000001 	andeq	r0, r0, r1
    1878:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	499c0100 	ldmibmi	ip, {r8}
    1880:	0004bc01 	andeq	fp, r4, r1, lsl #24
    1884:	064f0100 	strbeq	r0, [pc], -r0, lsl #2
				enci (10000);
    1888:	00000001 	andeq	r0, r0, r1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    188c:	00000000 	andeq	r0, r0, r0
    1890:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
	d = 0;
    1894:	28000011 	stmdacs	r0, {r0, r4}
		c = *fm++;
    1898:	00001251 	andeq	r1, r0, r1, asr r2
	...
			if ((c = *fm++) == '\0') {
    18a4:	00035f01 	andeq	r5, r3, r1, lsl #30
				outc ('\\');
    18a8:	04f30149 	ldrbteq	r0, [r3], #329	; 0x149
			if ((c = *fm++) == '\0') {
    18ac:	3b010000 	blcc	418b4 <__ccfg+0x2190c>
				outc ('\\');
    18b0:	00000106 	andeq	r0, r0, r6, lsl #2
    18b4:	00000000 	andeq	r0, r0, r0
			outc (c);
    18b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18bc:	0000112e 	andeq	r1, r0, lr, lsr #2
			if (c == '\0')
    18c0:	0100644a 	tsteq	r0, sl, asr #8
    18c4:	00df1c3b 	sbcseq	r1, pc, fp, lsr ip	; <UNPREDICTABLE>
			outc (c);
    18c8:	050c0000 	streq	r0, [ip, #-0]
				outc (val);
    18cc:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    18d0:	0005b301 	andeq	fp, r5, r1, lsl #6
		if (c == '%') {
    18d4:	062b0100 	strteq	r0, [fp], -r0, lsl #2
    18d8:	00030001 	andeq	r0, r3, r1
			c = *fm++;
    18dc:	00033c00 	andeq	r3, r3, r0, lsl #24
			switch (c) {
    18e0:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    18e4:	4a000011 	bmi	1930 <__pi_vfparse+0xb4>
    18e8:	2b010064 	blcs	41a80 <__ccfg+0x21ad8>
    18ec:	0000df1b 	andeq	sp, r0, fp, lsl pc
    18f0:	00052a00 	andeq	r2, r5, r0, lsl #20
    18f4:	01490000 	mrseq	r0, (UNDEF: 73)
    18f8:	000007f6 	strdeq	r0, [r0], -r6
    18fc:	01062001 	tsteq	r6, r1
				outc ('%');
    1900:	000002d4 	ldrdeq	r0, [r0], -r4
    1904:	000002fe 	strdeq	r0, [r0], -lr
				outc (c);
    1908:	117c9c01 	cmnne	ip, r1, lsl #24
    190c:	6e4a0000 	cdpvs	0, 4, cr0, cr10, cr0, {0}
    1910:	1c200100 	stfnes	f0, [r0], #-0
				if (c == '\0')
    1914:	000000b8 	strheq	r0, [r0], -r8
				return d;
    1918:	00000548 	andeq	r0, r0, r8, asr #10
}
    191c:	93014900 	movwls	r4, #6400	; 0x1900
    1920:	01000008 	tsteq	r0, r8
			switch (c) {
    1924:	a8010619 	stmdage	r1, {r0, r3, r4, r9, sl}
    1928:	d4000002 	strle	r0, [r0], #-2
    192c:	01000002 	tsteq	r0, r2
				for (i = 12; ; i -= 4) {
    1930:	0011b79c 	mulseq	r1, ip, r7
				val = (word) va_arg (ap, aword);
    1934:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
						[ (val >> i) & 0xf ]);
    1938:	b81c1901 	ldmdalt	ip, {r0, r8, fp, ip}
    193c:	01000000 	mrseq	r0, (UNDEF: 0)
    1940:	11b74350 			; <UNDEFINED> instruction: 0x11b74350
					outc (__pi_hex_enc_table
    1944:	02bc0000 	adcseq	r0, ip, #0
    1948:	02c60000 	sbceq	r0, r6, #0
					if (i == 0)
    194c:	1b010000 	blne	41954 <__ccfg+0x219ac>
    1950:	11c52103 	bicne	r2, r5, r3, lsl #2
				for (i = 12; ; i -= 4) {
    1954:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1958:	0009bb50 	andeq	fp, r9, r0, asr fp
				if (c == 'd' && (val & 0x8000) != 0) {
    195c:	14150100 	ldrne	r0, [r5], #-256	; 0xffffff00
				val = (word) va_arg (ap, aword);
    1960:	11d00301 	bicsne	r0, r0, r1, lsl #6
				if (c == 'd' && (val & 0x8000) != 0) {
    1964:	6e510000 	cdpvs	0, 5, cr0, cr1, cr0, {0}
    1968:	2b150100 	blcs	541d70 <__ccfg+0x521dc8>
					outc ('-');
    196c:	000000b8 	strheq	r0, [r0], -r8
    1970:	059f5200 	ldreq	r5, [pc, #512]	; 1b78 <vscan+0x7c>
					val = (~val) + 1;
    1974:	1a030000 	bne	c197c <__ccfg+0xa19d4>
    1978:	03013501 	movweq	r3, #5377	; 0x1501
				for (i = 12; ; i -= 4) {
    197c:	000011ed 	andeq	r1, r0, sp, ror #3
				enci (10000);
    1980:	0009ac53 	andeq	sl, r9, r3, asr ip
    1984:	011a0300 	tsteq	sl, r0, lsl #6
    1988:	00007348 	andeq	r7, r0, r8, asr #6
    198c:	fd540000 	ldc2l	0, cr0, [r4, #-0]
    1990:	03000007 	movweq	r0, #7
    1994:	0301355b 	movweq	r3, #5467	; 0x155b
    1998:	00051054 	andeq	r1, r5, r4, asr r0
    199c:	35500300 	ldrbcc	r0, [r0, #-768]	; 0xfffffd00
    19a0:	d3550301 	cmple	r5, #67108864	; 0x4000000
    19a4:	0f000008 	svceq	0x00000008
    19a8:	730101bf 	movwvc	r0, #4543	; 0x11bf
    19ac:	03000000 	movweq	r0, #0
    19b0:	00001220 	andeq	r1, r0, r0, lsr #4
    19b4:	00095f16 	andeq	r5, r9, r6, lsl pc
    19b8:	0ec10f00 	cdpeq	15, 12, cr0, cr1, cr0, {0}
    19bc:	00000073 	andeq	r0, r0, r3, ror r0
    19c0:	089a5400 	ldmeq	sl, {sl, ip, lr}
    19c4:	900f0000 	andls	r0, pc, r0
				if (c == 'd' || c == 'u') {
    19c8:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    19cc:	000004da 	ldrdeq	r0, [r0], -sl
					if (c == 'd' &&
    19d0:	01017b0f 	tsteq	r1, pc, lsl #22
					val = va_arg (ap, lword);
    19d4:	074d5203 	strbeq	r5, [sp, -r3, lsl #4]
					fm++;
    19d8:	660a0000 	strvs	r0, [sl], -r0
					if (c == 'd' &&
    19dc:	03010103 	movweq	r0, #4355	; 0x1103
    19e0:	00001251 	andeq	r1, r0, r1, asr r2
						outc ('-');
    19e4:	00072453 	andeq	r2, r7, r3, asr r4
    19e8:	03660a00 	cmneq	r6, #0, 20
						val = (~val) + 1;
    19ec:	0000731f 	andeq	r7, r0, pc, lsl r3
				enci (10000);
    19f0:	72560000 	subsvc	r0, r6, #0
					enci (1000000000UL);
    19f4:	02000008 	andeq	r0, r0, #8
    19f8:	0101014c 	tsteq	r1, ip, asr #2
    19fc:	080b5403 	stmdaeq	fp, {r0, r1, sl, ip, lr}
    1a00:	c4020000 	strgt	r0, [r2], #-0
    1a04:	57030101 	strpl	r0, [r3, -r1, lsl #2]
    1a08:	00000626 	andeq	r0, r0, r6, lsr #12
    1a0c:	0101ad02 	tsteq	r1, r2, lsl #26
    1a10:	00000073 	andeq	r0, r0, r3, ror r0
    1a14:	05735603 	ldrbeq	r5, [r3, #-1539]!	; 0xfffff9fd
    1a18:	450e0000 	strmi	r0, [lr, #-0]
    1a1c:	03010102 	movweq	r0, #4354	; 0x1102
    1a20:	00054558 	andeq	r4, r5, r8, asr r5
    1a24:	022c0e00 	eoreq	r0, ip, #0, 28
    1a28:	00730101 	rsbseq	r0, r3, r1, lsl #2
    1a2c:	52030000 	andpl	r0, r3, #0
    1a30:	00000530 	andeq	r0, r0, r0, lsr r5
    1a34:	0101dc0e 	tsteq	r1, lr, lsl #24
				} else if (c == 'x') {
    1a38:	12ab0301 	adcne	r0, fp, #67108864	; 0x4000000
					for (i = 28; ; i -= 4) {
    1a3c:	ea530000 	b	14c1a44 <__ccfg+0x14a1a9c>
					val = va_arg (ap, lword);
    1a40:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
							[ (val >> i) & 0xf ]);
    1a44:	731f01dc 	tstvc	pc, #220, 2	; 0x37
    1a48:	00000000 	andeq	r0, r0, r0
						outc (__pi_hex_enc_table
    1a4c:	0006ab56 	andeq	sl, r6, r6, asr fp
    1a50:	010f0b00 	tsteq	pc, r0, lsl #22
    1a54:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
						if (i == 0)
    1a58:	000005f2 	strdeq	r0, [r0], -r2
    1a5c:	0101ed0c 	tsteq	r1, ip, lsl #26
					for (i = 28; ; i -= 4) {
    1a60:	08c05403 	stmiaeq	r0, {r0, r1, sl, ip, lr}^
					outc ('%');
    1a64:	d60c0000 	strle	r0, [ip], -r0
    1a68:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    1a6c:	000005c1 	andeq	r0, r0, r1, asr #11
					outc ('l');
    1a70:	01044006 	tsteq	r4, r6
    1a74:	12e70301 	rscne	r0, r7, #67108864	; 0x4000000
				val = (word) va_arg (ap, aword);
    1a78:	31530000 	cmpcc	r3, r0
				outc (val);
    1a7c:	06000007 	streq	r0, [r0], -r7
    1a80:	73240440 			; <UNDEFINED> instruction: 0x73240440
				while (*st != '\0') {
    1a84:	00000000 	andeq	r0, r0, r0
    1a88:	00055a52 	andeq	r5, r5, r2, asr sl
    1a8c:	03910600 	orrseq	r0, r1, #0, 12
    1a90:	11030101 	tstne	r3, r1, lsl #2
					outc (*st);
    1a94:	53000013 	movwpl	r0, #19
    1a98:	00000731 	andeq	r0, r0, r1, lsr r7
					st++;
    1a9c:	17039106 	strne	r9, [r3, -r6, lsl #2]
		c = *fm++;
    1aa0:	00000073 	andeq	r0, r0, r3, ror r0
    1aa4:	00068c53 	andeq	r8, r6, r3, asr ip
    1aa8:	03910600 	orrseq	r0, r1, #0, 12
char *vform (char *res, const char *fm, va_list aq) {
    1aac:	0000732a 	andeq	r7, r0, sl, lsr #6
    1ab0:	72520000 	subsvc	r0, r2, #0
	if (res != NULL) {
    1ab4:	06000009 	streq	r0, [r0], -r9
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab8:	0101030c 	tsteq	r1, ip, lsl #6
    1abc:	00133b03 	andseq	r3, r3, r3, lsl #22
    1ac0:	07315300 	ldreq	r5, [r1, -r0, lsl #6]!
}
    1ac4:	0c060000 	stceq	0, cr0, [r6], {-0}
    1ac8:	00731803 	rsbseq	r1, r3, r3, lsl #16
	fml = strlen (fm) + 17;
    1acc:	8c530000 	mrahi	r0, r3, acc0
    1ad0:	06000006 	streq	r0, [r0], -r6
    1ad4:	732b030c 			; <UNDEFINED> instruction: 0x732b030c
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	00067d52 	andeq	r7, r6, r2, asr sp
    1ae0:	01e70600 	mvneq	r0, r0, lsl #12
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae4:	58030101 	stmdapl	r3, {r0, r8}
    1ae8:	53000013 	movwpl	r0, #19
    1aec:	00000731 	andeq	r0, r0, r1, lsr r7
    1af0:	1901e706 	stmdbne	r1, {r1, r2, r8, r9, sl, sp, lr, pc}
		ufree (res);
    1af4:	00000073 	andeq	r0, r0, r3, ror r0
		goto Again;
    1af8:	07c75200 	strbeq	r5, [r7, r0, lsl #4]
	if (buf == NULL || fmt == NULL)
    1afc:	ba060000 	blt	181b04 <__ccfg+0x161b5c>
int vscan (const char *buf, const char *fmt, va_list ap) {
    1b00:	03010101 	movweq	r0, #4353	; 0x1101
	if (buf == NULL || fmt == NULL)
    1b04:	00001375 	andeq	r1, r0, r5, ror r3
    1b08:	00073153 	andeq	r3, r7, r3, asr r1
    1b0c:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
		    	    case 'u': scanu (lword); break;
    1b10:	00007315 	andeq	r7, r0, r5, lsl r3
			while (isspace (*buf)) buf++;
    1b14:	61520000 	cmpvs	r2, r0
    1b18:	06000008 	streq	r0, [r0], -r8
	while (*fmt != '\0') {
    1b1c:	01010139 	tsteq	r1, r9, lsr r1
		if (*fmt++ != '%')
    1b20:	0013ac03 	andseq	sl, r3, r3, lsl #24
		switch (*fmt++) {
    1b24:	07315300 	ldreq	r5, [r1, -r0, lsl #6]!
    1b28:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    1b2c:	00731b01 	rsbseq	r1, r3, r1, lsl #22
    1b30:	1a530000 	bne	14c1b38 <__ccfg+0x14a1b90>
    1b34:	06000006 	streq	r0, [r0], -r6
    1b38:	732e0139 			; <UNDEFINED> instruction: 0x732e0139
    1b3c:	53000000 	movwpl	r0, #0
}
    1b40:	00000606 	andeq	r0, r0, r6, lsl #12
		switch (*fmt++) {
    1b44:	1b013a06 	blne	50364 <__ccfg+0x303bc>
    1b48:	00000073 	andeq	r0, r0, r3, ror r0
    1b4c:	07d25200 	ldrbeq	r5, [r2, r0, lsl #4]
    1b50:	84040000 	strhi	r0, [r4], #-0
			while (isspace (*buf)) buf++;
    1b54:	03010102 	movweq	r0, #4354	; 0x1102
    1b58:	000013c9 	andeq	r1, r0, r9, asr #7
    1b5c:	00016653 	andeq	r6, r1, r3, asr r6
    1b60:	02840400 	addeq	r0, r4, #0, 8
    1b64:	0000731e 	andeq	r7, r0, lr, lsl r3
    1b68:	c2520000 	subsgt	r0, r2, #0
			if (*buf == '\0')
    1b6c:	04000004 	streq	r0, [r0], #-4
			if (*buf != ',') {
    1b70:	01010206 	tsteq	r1, r6, lsl #4
			sap = va_arg (ap, char*);
    1b74:	0013f303 	andseq	pc, r3, r3, lsl #6
			nc++;
    1b78:	01665300 	cmneq	r6, r0, lsl #6
			if (*buf != ',') {
    1b7c:	06040000 	streq	r0, [r4], -r0
				while (!isspace (*buf) && *buf != ',' &&
    1b80:	00732302 	rsbseq	r2, r3, r2, lsl #6
    1b84:	95530000 	ldrbls	r0, [r3, #-0]
    1b88:	04000009 	streq	r0, [r0], #-9
    1b8c:	73370206 	teqvc	r7, #1610612736	; 0x60000000
    1b90:	00000000 	andeq	r0, r0, r0
    1b94:	0003af52 	andeq	sl, r3, r2, asr pc
    1b98:	01540400 	cmpeq	r4, r0, lsl #8
			while (isspace (*buf)) buf++;
    1b9c:	10030101 	andne	r0, r3, r1, lsl #2
    1ba0:	53000014 	movwpl	r0, #20
    1ba4:	00000166 	andeq	r0, r0, r6, ror #2
    1ba8:	19015404 	stmdbne	r1, {r2, sl, ip, lr}
    1bac:	00000073 	andeq	r0, r0, r3, ror r0
			if (*buf == ',') buf++;
    1bb0:	00255200 	eoreq	r5, r5, r0, lsl #4
    1bb4:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
			*sap = '\0';
    1bb8:	03010101 	movweq	r0, #4353	; 0x1101
			break;
    1bbc:	0000142d 	andeq	r1, r0, sp, lsr #8
		    case 'd': scani (word); break;
    1bc0:	00016653 	andeq	r6, r1, r3, asr r6
    1bc4:	011e0400 	tsteq	lr, r0, lsl #8
    1bc8:	00007317 	andeq	r7, r0, r7, lsl r3
    1bcc:	c4560000 	ldrbgt	r0, [r6], #-0
    1bd0:	09000006 	stmdbeq	r0, {r1, r2}
    1bd4:	01010463 	tsteq	r1, r3, ror #8
    1bd8:	06365603 	ldrteq	r5, [r6], -r3, lsl #12
    1bdc:	54090000 	strpl	r0, [r9], #-0
    1be0:	03010104 	movweq	r0, #4356	; 0x1104
    1be4:	00064f56 	andeq	r4, r6, r6, asr pc
    1be8:	022a0900 	eoreq	r0, sl, #0, 18
    1bec:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    1bf0:	00000980 	andeq	r0, r0, r0, lsl #19
    1bf4:	01016809 	tsteq	r1, r9, lsl #16
    1bf8:	146b0301 	strbtne	r0, [fp], #-769	; 0xfffffcff
    1bfc:	5b530000 	blpl	14c1c04 <__ccfg+0x14a1c5c>
    1c00:	09000006 	stmdbeq	r0, {r1, r2}
    1c04:	731f0168 	tstvc	pc, #104, 2
    1c08:	00000000 	andeq	r0, r0, r0
    1c0c:	00058f56 	andeq	r8, r5, r6, asr pc
    1c10:	01320900 	teqeq	r2, r0, lsl #18
    1c14:	59030101 	stmdbpl	r3, {r0, r8}
    1c18:	00000d44 	andeq	r0, r0, r4, asr #26
	...
    1c24:	58359c01 	ldmdapl	r5!, {r0, sl, fp, ip, pc}
    1c28:	5b00000d 	blpl	1c64 <vscan+0x168>
    1c2c:	00000005 	andeq	r0, r0, r5
		    case 'u': scanu (word); break;
    1c30:	00121f00 	andseq	r1, r2, r0, lsl #30
    1c34:	d3000300 	movwle	r0, #768	; 0x300
    1c38:	04000007 	streq	r0, [r0], #-7
    1c3c:	00017001 	andeq	r7, r1, r1
    1c40:	0a8b0c00 	beq	fe2c4c48 <_estack+0xde2bfc48>
    1c44:	00c00000 	sbceq	r0, r0, r0
    1c48:	06900000 	ldreq	r0, [r0], r0
    1c4c:	00000000 	andeq	r0, r0, r0
    1c50:	1aab0000 	bne	feac1c58 <_estack+0xdeabcc58>
    1c54:	01020000 	mrseq	r0, (UNDEF: 2)
    1c58:	0003a306 	andeq	sl, r3, r6, lsl #6
    1c5c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1c60:	000003dd 	ldrdeq	r0, [r0], -sp
    1c64:	00164803 	andseq	r4, r6, r3, lsl #16
    1c68:	18280300 	stmdane	r8!, {r8, r9}
    1c6c:	0000003f 	andeq	r0, r0, pc, lsr r0
    1c70:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    1c74:	02000000 	andeq	r0, r0, #0
		    case 'x': scanx (word); break;
    1c78:	00980508 	addseq	r0, r8, r8, lsl #10
    1c7c:	fc030000 	stc2	0, cr0, [r3], {-0}
    1c80:	03000021 	movweq	r0, #33	; 0x21
    1c84:	0059182e 	subseq	r1, r9, lr, lsr #16
    1c88:	01020000 	mrseq	r0, (UNDEF: 2)
    1c8c:	0003a108 	andeq	sl, r3, r8, lsl #2
    1c90:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    1c94:	31030000 	mrscc	r0, (UNDEF: 3)
    1c98:	00006c19 	andeq	r6, r0, r9, lsl ip
    1c9c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1ca0:	00000271 	andeq	r0, r0, r1, ror r2
    1ca4:	0017b303 	andseq	fp, r7, r3, lsl #6
    1ca8:	19340300 	ldmdbne	r4!, {r8, r9}
    1cac:	0000007f 	andeq	r0, r0, pc, ror r0
    1cb0:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    1cb4:	02000000 	andeq	r0, r0, #0
    1cb8:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    1cbc:	04040000 	streq	r0, [r4], #-0
    1cc0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1cc4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1cc8:	00000077 	andeq	r0, r0, r7, ror r0
    1ccc:	000b4603 	andeq	r4, fp, r3, lsl #12
    1cd0:	1b280400 	blne	a02cd8 <__ccfg+0x9e2d30>
    1cd4:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cd8:	000a5c05 	andeq	r5, sl, r5, lsl #24
    1cdc:	000b0400 	andeq	r0, fp, r0, lsl #8
    1ce0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1ce4:	000bfc06 	andeq	pc, fp, r6, lsl #24
    1ce8:	0000bf00 	andeq	fp, r0, r0, lsl #30
    1cec:	00010000 	andeq	r0, r1, r0
			switch (*fmt++) {
    1cf0:	5e030407 	cdppl	4, 0, cr0, cr3, cr7, {0}
    1cf4:	0400000a 	streq	r0, [r0], #-10
    1cf8:	009b1863 	addseq	r1, fp, r3, ror #16
    1cfc:	fd030000 	stc2	0, cr0, [r3, #-0]
    1d00:	05000003 	streq	r0, [r0, #-3]
    1d04:	004d1226 	subeq	r1, sp, r6, lsr #4
		    	    case 'd': scani (lword); break;
    1d08:	c0030000 	andgt	r0, r3, r0
    1d0c:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    1d10:	00601227 	rsbeq	r1, r0, r7, lsr #4
    1d14:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    1d18:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d1c:	000000d9 	ldrdeq	r0, [r0], -r9
    1d20:	00090603 	andeq	r0, r9, r3, lsl #12
    1d24:	12280500 	eorne	r0, r8, #0, 10
    1d28:	00000033 	andeq	r0, r0, r3, lsr r0
    1d2c:	0013b803 	andseq	fp, r3, r3, lsl #16
    1d30:	122b0500 	eorne	r0, fp, #0, 10
    1d34:	0000004d 	andeq	r0, r0, sp, asr #32
    1d38:	0000fb09 	andeq	pc, r0, r9, lsl #22
    1d3c:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    1d40:	2c050000 	stccs	0, cr0, [r5], {-0}
    1d44:	00007312 	andeq	r7, r0, r2, lsl r3
    1d48:	010c0800 	tsteq	ip, r0, lsl #16
    1d4c:	a7030000 	strge	r0, [r3, -r0]
    1d50:	05000002 	streq	r0, [r0, #-2]
    1d54:	0073122d 	rsbseq	r1, r3, sp, lsr #4
    1d58:	62030000 	andvs	r0, r3, #0
    1d5c:	05000007 	streq	r0, [r0, #-7]
    1d60:	0135102e 	teqeq	r5, lr, lsr #32
		    	    case 'x': scanx (lword); break;
    1d64:	040a0000 	streq	r0, [sl], #-0
    1d68:	000000d9 	ldrdeq	r0, [r0], -r9
    1d6c:	3205080b 	andcc	r0, r5, #720896	; 0xb0000
    1d70:	0001c909 	andeq	ip, r1, r9, lsl #18
    1d74:	02c20c00 	sbceq	r0, r2, #0, 24
    1d78:	34050000 	strcc	r0, [r5], #-0
    1d7c:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1d80:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1d84:	00910c00 	addseq	r0, r1, r0, lsl #24
    1d88:	35050000 	strcc	r0, [r5, #-0]
    1d8c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1d90:	06010100 	streq	r0, [r1], -r0, lsl #2
    1d94:	02990c00 	addseq	r0, r9, #0, 24
    1d98:	36050000 	strcc	r0, [r5], -r0
    1d9c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1da0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1da4:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    1da8:	37050000 	strcc	r0, [r5, -r0]
    1dac:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1db0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1db4:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    1db8:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    1dbc:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1dc0:	00040100 	andeq	r0, r4, r0, lsl #2
    1dc4:	03f60d00 	mvnseq	r0, #0, 26
    1dc8:	3a050000 	bcc	141dd0 <__ccfg+0x121e28>
    1dcc:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1dd0:	400d0100 	andmi	r0, sp, r0, lsl #2
		    	    case 'd': scani (lword); break;
    1dd4:	05000000 	streq	r0, [r0, #-0]
    1dd8:	00fb033c 	rscseq	r0, fp, ip, lsr r3
    1ddc:	0d020000 	stceq	0, cr0, [r2, #-0]
    1de0:	00000066 	andeq	r0, r0, r6, rrx
    1de4:	fb033d05 	blx	d1202 <__ccfg+0xb125a>
    1de8:	03000000 	movweq	r0, #0
    1dec:	0001540d 	andeq	r5, r1, sp, lsl #8
		    	    case 'u': scanu (lword); break;
    1df0:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    1df4:	0000010c 	andeq	r0, r0, ip, lsl #2
    1df8:	34030004 	strcc	r0, [r3], #-4
    1dfc:	05000004 	streq	r0, [r0, #-4]
    1e00:	013b0341 	teqeq	fp, r1, asr #6
    1e04:	c9090000 	stmdbgt	r9, {}	; <UNPREDICTABLE>
    1e08:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1e0c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    1e10:	d51a4305 	ldrle	r4, [sl, #-773]	; 0xfffffcfb
    1e14:	01000001 	tsteq	r0, r1
    1e18:	030d0e01 	movweq	r0, #56833	; 0xde01
    1e1c:	45050000 	strmi	r0, [r5, #-0]
    1e20:	0001f60e 	andeq	pc, r1, lr, lsl #12
    1e24:	0a010100 	beq	4222c <__ccfg+0x22284>
    1e28:	0001fc04 	andeq	pc, r1, r4, lsl #24
    1e2c:	08010200 	stmdaeq	r1, {r9}
    1e30:	000003aa 	andeq	r0, r0, sl, lsr #7
    1e34:	0001fc08 	andeq	pc, r1, r8, lsl #24
		    	    case 'x': scanx (lword); break;
    1e38:	031b0e00 	tsteq	fp, #0, 28
    1e3c:	45050000 	strmi	r0, [r5, #-0]
			if ((c = *buf++) == '\0')
    1e40:	0001f61e 	andeq	pc, r1, lr, lsl r6	; <UNPREDICTABLE>
    1e44:	0b010100 	bleq	4224c <__ccfg+0x222a4>
			sap = va_arg (ap, char*);
    1e48:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
			nc++;
    1e4c:	00000247 	andeq	r0, r0, r7, asr #4
			break;
    1e50:	0002d20d 	andeq	sp, r2, sp, lsl #4
			while (isspace (*buf)) buf++;
    1e54:	0b900600 	bleq	fe40365c <_estack+0xde3fe65c>
    1e58:	00000073 	andeq	r0, r0, r3, ror r0
    1e5c:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
						*sap++ = *buf++;
    1e60:	91060000 	mrsls	r0, (UNDEF: 6)
    1e64:	0000d908 	andeq	sp, r0, r8, lsl #18
			while (isspace (*buf)) buf++;
    1e68:	710d0400 	tstvc	sp, r0, lsl #8
    1e6c:	06000004 	streq	r0, [r0], -r4
    1e70:	01071092 	swpeq	r1, r2, [r7]
		return 0;
    1e74:	00060000 	andeq	r0, r6, r0
    1e78:	00041303 	andeq	r1, r4, r3, lsl #6
		    case 'x': scanx (word); break;
    1e7c:	03930600 	orrseq	r0, r3, #0, 12
    1e80:	00000216 	andeq	r0, r0, r6, lsl r2
		    	    case 'x': scanx (lword); break;
    1e84:	0002470f 	andeq	r4, r2, pc, lsl #14
    1e88:	00025e00 	andeq	r5, r2, r0, lsl #28
    1e8c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    1e90:	00000036 	andeq	r0, r0, r6, lsr r0
    1e94:	530f9906 	movwpl	r9, #63750	; 0xf906
    1e98:	01000002 	tsteq	r0, r2
    1e9c:	07010b01 	streq	r0, [r1, -r1, lsl #22]
    1ea0:	02960991 	addseq	r0, r6, #2375680	; 0x244000
    1ea4:	640c0000 	strvs	r0, [ip], #-0
    1ea8:	07000004 	streq	r0, [r0, -r4]
    1eac:	00fb0793 	smlalseq	r0, fp, r3, r7
    1eb0:	07010000 	streq	r0, [r1, -r0]
    1eb4:	310c0001 	tstcc	ip, r1
    1eb8:	07000000 	streq	r0, [r0, -r0]
    1ebc:	00fb0394 	smlalseq	r0, fp, r4, r3
    1ec0:	01010000 	mrseq	r0, (UNDEF: 1)
    1ec4:	03000000 	movweq	r0, #0
    1ec8:	00000284 	andeq	r0, r0, r4, lsl #5
    1ecc:	6c039607 	stcvs	6, cr9, [r3], {7}
    1ed0:	08000002 	stmdaeq	r0, {r1}
    1ed4:	00000296 	muleq	r0, r6, r2
    1ed8:	0002a20f 	andeq	sl, r2, pc, lsl #4
    1edc:	0002b200 	andeq	fp, r2, r0, lsl #4
    1ee0:	08001000 	stmdaeq	r0, {ip}
    1ee4:	000002a7 	andeq	r0, r0, r7, lsr #5
    1ee8:	0002ed0e 	andeq	lr, r2, lr, lsl #26
    1eec:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    1ef0:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1ef4:	e50f0101 	str	r0, [pc, #-257]	; 1dfb <vscan+0x2ff>
    1ef8:	d0000000 	andle	r0, r0, r0
    1efc:	10000002 	andne	r0, r0, r2
    1f00:	02c50800 	sbceq	r0, r5, #0, 16
    1f04:	930e0000 	movwls	r0, #57344	; 0xe000
    1f08:	08000003 	stmdaeq	r0, {r0, r1}
    1f0c:	02d01306 	sbcseq	r1, r0, #402653184	; 0x18000000
    1f10:	01010000 	mrseq	r0, (UNDEF: 1)
    1f14:	0001340e 	andeq	r3, r1, lr, lsl #8
    1f18:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    1f1c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1f20:	7e110101 	mufvcs	f0, f1, f1
    1f24:	09000004 	stmdbeq	r0, {r2}
    1f28:	fe10016e 	cdp2	1, 1, cr0, cr0, cr14, {3}
    1f2c:	0a000002 	beq	1f3c <TrimAfterColdResetWakeupFromShutDown+0x58>
    1f30:	00030404 	andeq	r0, r3, r4, lsl #8
    1f34:	10011200 	andne	r1, r1, r0, lsl #4
    1f38:	13000003 	movwne	r0, #3
    1f3c:	000000d9 	ldrdeq	r0, [r0], -r9
    1f40:	02030f00 	andeq	r0, r3, #0, 30
    1f44:	031b0000 	tsteq	fp, #0
    1f48:	00100000 	andseq	r0, r0, r0
    1f4c:	00031008 	andeq	r1, r3, r8
    1f50:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    1f54:	7f090000 	svcvc	0x00090000
    1f58:	031b1601 	tsteq	fp, #1048576	; 0x100000
    1f5c:	01010000 	mrseq	r0, (UNDEF: 1)
    1f60:	00038b14 	andeq	r8, r3, r4, lsl fp
    1f64:	01820900 	orreq	r0, r2, r0, lsl #18
    1f68:	00011814 	andeq	r1, r1, r4, lsl r8
    1f6c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    1f70:	00000469 	andeq	r0, r0, r9, ror #8
    1f74:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    1f78:	0000010c 	andeq	r0, r0, ip, lsl #2
    1f7c:	08150101 	ldmdaeq	r5, {r0, r8}
    1f80:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    1f84:	00000374 	andeq	r0, r0, r4, ror r3
    1f88:	0021f416 	eoreq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    1f8c:	03070900 	movweq	r0, #30976	; 0x7900
    1f90:	0000d907 	andeq	sp, r0, r7, lsl #18
    1f94:	3f160000 	svccc	0x00160000
    1f98:	09000005 	stmdbeq	r0, {r0, r2}
    1f9c:	1d080308 	stcne	3, cr0, [r8, #-32]	; 0xffffffe0
    1fa0:	04000001 	streq	r0, [r0], #-1
    1fa4:	02641100 	rsbeq	r1, r4, #0, 2
    1fa8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1fac:	034d0303 	movteq	r0, #54019	; 0xd303
    1fb0:	8d170000 	ldchi	0, cr0, [r7, #-0]
    1fb4:	30000004 	andcc	r0, r0, r4
    1fb8:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    1fbc:	000003e4 	andeq	r0, r0, r4, ror #7
    1fc0:	00048616 	andeq	r8, r4, r6, lsl r6
    1fc4:	03140900 	tsteq	r4, #0, 18
    1fc8:	0000d908 	andeq	sp, r0, r8, lsl #18
    1fcc:	dc160000 	ldcle	0, cr0, [r6], {-0}
    1fd0:	09000002 	stmdbeq	r0, {r1}
    1fd4:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    1fd8:	02000000 	andeq	r0, r0, #0
    1fdc:	00048116 	andeq	r8, r4, r6, lsl r1
    1fe0:	03160900 	tsteq	r6, #0, 18
    1fe4:	0002f10b 	andeq	pc, r2, fp, lsl #2
    1fe8:	3f160400 	svccc	0x00160400
    1fec:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    1ff0:	1d090317 	stcne	3, cr0, [r9, #-92]	; 0xffffffa4
    1ff4:	08000001 	stmdaeq	r0, {r0}
    1ff8:	00043d16 	andeq	r3, r4, r6, lsl sp
    1ffc:	03180900 	tsteq	r8, #0, 18
    2000:	0003e40f 	andeq	lr, r3, pc, lsl #8
    2004:	d7160c00 	ldrle	r0, [r6, -r0, lsl #24]
    2008:	09000002 	stmdbeq	r0, {r1}
    200c:	f4150319 			; <UNDEFINED> instruction: 0xf4150319
    2010:	2c000003 	stccs	0, cr0, [r0], {3}
    2014:	03740f00 	cmneq	r4, #0, 30
    2018:	03f40000 	mvnseq	r0, #0
    201c:	94180000 	ldrls	r0, [r8], #-0
    2020:	03000000 	movweq	r0, #0
    2024:	81040a00 	tsthi	r4, r0, lsl #20
    2028:	11000003 	tstne	r0, r3
    202c:	00000498 	muleq	r0, r8, r4
    2030:	1b031c09 	blne	c905c <__ccfg+0xa90b4>
    2034:	00000381 	andeq	r0, r0, r1, lsl #7
    2038:	00038114 	andeq	r8, r3, r4, lsl r1
    203c:	031e0900 	tsteq	lr, #0, 18
    2040:	00041614 	andeq	r1, r4, r4, lsl r6
    2044:	0a010100 	beq	4244c <__ccfg+0x224a4>
    2048:	0003fa04 	andeq	pc, r3, r4, lsl #20
    204c:	04b10e00 	ldrteq	r0, [r1], #3584	; 0xe00
    2050:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    2054:	0000d913 	andeq	sp, r0, r3, lsl r9
    2058:	0e010100 	adfeqs	f0, f1, f0
    205c:	0000071b 	andeq	r0, r0, fp, lsl r7
    2060:	ea1a1e0a 	b	689890 <__ccfg+0x6698e8>
    2064:	01000000 	mrseq	r0, (UNDEF: 0)
    2068:	08ab0e01 	stmiaeq	fp!, {r0, r9, sl, fp}
    206c:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2070:	0000ea24 	andeq	lr, r0, r4, lsr #20
    2074:	0e010100 	adfeqs	f0, f1, f0
    2078:	000005da 	ldrdeq	r0, [r0], -sl
    207c:	1614220a 	ldrne	r2, [r4], -sl, lsl #4
    2080:	01000004 	tsteq	r0, r4
    2084:	0a080301 	beq	202c90 <__ccfg+0x1e2ce8>
    2088:	440a0000 	strmi	r0, [sl], #-0
    208c:	0004600f 	andeq	r6, r4, pc
    2090:	66040a00 	strvs	r0, [r4], -r0, lsl #20
    2094:	19000004 	stmdbne	r0, {r2}
    2098:	00008d01 	andeq	r8, r0, r1, lsl #26
    209c:	00048000 	andeq	r8, r4, r0
    20a0:	008d1300 	addeq	r1, sp, r0, lsl #6
    20a4:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
    20a8:	13000001 	movwne	r0, #1
    20ac:	0000008d 	andeq	r0, r0, sp, lsl #1
    20b0:	033e1a00 	teqeq	lr, #0, 20
    20b4:	0c010000 	stceq	0, cr0, [r1], {-0}
    20b8:	94030507 	strls	r0, [r3], #-1287	; 0xfffffaf9
    20bc:	1b200000 	blne	8020c4 <__ccfg+0x7e211c>
    20c0:	00000bd2 	ldrdeq	r0, [r0], -r2
    20c4:	0c071001 	stceq	0, cr1, [r7], {1}
    20c8:	01000001 	tsteq	r0, r1
    20cc:	00000305 	andeq	r0, r0, r5, lsl #6
    20d0:	461a0000 	ldrmi	r0, [sl], -r0
    20d4:	01000004 	tsteq	r0, r4
    20d8:	03050d1a 	movweq	r0, #23834	; 0x5d1a
    20dc:	2000001c 	andcs	r0, r0, ip, lsl r0
    20e0:	0004540f 	andeq	r5, r4, pc, lsl #8
    20e4:	0004bf00 	andeq	fp, r4, r0, lsl #30
    20e8:	00941800 	addseq	r1, r4, r0, lsl #16
    20ec:	00000000 	andeq	r0, r0, r0
    20f0:	000a401c 	andeq	r4, sl, ip, lsl r0
    20f4:	141e0100 	ldrne	r0, [lr], #-256	; 0xffffff00
    20f8:	000004af 	andeq	r0, r0, pc, lsr #9
    20fc:	00200305 	eoreq	r0, r0, r5, lsl #6
    2100:	da1a2000 	ble	68a108 <__ccfg+0x66a160>
    2104:	01000001 	tsteq	r0, r1
    2108:	03051322 	movweq	r1, #21282	; 0x5322
    210c:	2000009c 	mulcs	r0, ip, r0
    2110:	0004071a 	andeq	r0, r4, sl, lsl r7
    2114:	0d270100 	stfeqs	f0, [r7, #-0]
    2118:	00b80305 	adcseq	r0, r8, r5, lsl #6
    211c:	1c1a2000 	ldcne	0, cr2, [sl], {-0}
    2120:	01000004 	tsteq	r0, r4
    2124:	03050730 	movweq	r0, #22320	; 0x5730
    2128:	20000098 	mulcs	r0, r8, r0
    212c:	00042a1a 	andeq	r2, r4, sl, lsl sl
    2130:	0f310100 	svceq	0x00310100
    2134:	009a0305 	addseq	r0, sl, r5, lsl #6
    2138:	381a2000 	ldmdacc	sl, {sp}
    213c:	01000004 	tsteq	r0, r4
    2140:	03051931 	movweq	r1, #22833	; 0x5931
    2144:	200000a4 	andcs	r0, r0, r4, lsr #1
    2148:	0001290f 	andeq	r2, r1, pc, lsl #18
    214c:	00052700 	andeq	r2, r5, r0, lsl #14
    2150:	00941800 	addseq	r1, r4, r0, lsl #16
    2154:	00030000 	andeq	r0, r3, r0
    2158:	0008fb1b 	andeq	pc, r8, fp, lsl fp	; <UNPREDICTABLE>
    215c:	0a360100 	beq	d82564 <__ccfg+0xd625bc>
    2160:	00000517 	andeq	r0, r0, r7, lsl r5
    2164:	a8030501 	stmdage	r3, {r0, r8, sl}
    2168:	1a200000 	bne	802170 <__ccfg+0x7e21c8>
    216c:	00000320 	andeq	r0, r0, r0, lsr #6
    2170:	050c3f01 	streq	r3, [ip, #-3841]	; 0xfffff0ff
    2174:	002c6c03 	eoreq	r6, ip, r3, lsl #24
    2178:	032f1a00 			; <UNDEFINED> instruction: 0x032f1a00
    217c:	45010000 	strmi	r0, [r1, #-0]
    2180:	0003050d 	andeq	r0, r3, sp, lsl #10
    2184:	0b000000 	bleq	218c <NOROM_SetupGetTrimForAnabypassValue1+0x8>
    2188:	09490102 	stmdbeq	r9, {r1, r8}^
    218c:	0000057a 	andeq	r0, r0, sl, ror r5
    2190:	000a340d 	andeq	r3, sl, sp, lsl #8
    2194:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    2198:	000000fb 	strdeq	r0, [r0], -fp
    219c:	0c160d00 	ldceq	13, cr0, [r6], {-0}
    21a0:	4b010000 	blmi	421a8 <__ccfg+0x22200>
    21a4:	0000fb07 	andeq	pc, r0, r7, lsl #22
    21a8:	03000100 	movweq	r0, #256	; 0x100
    21ac:	00000b3d 	andeq	r0, r0, sp, lsr fp
    21b0:	56034c01 	strpl	r4, [r3], -r1, lsl #24
    21b4:	0f000005 	svceq	0x00000005
    21b8:	0000057a 	andeq	r0, r0, sl, ror r5
    21bc:	00000596 	muleq	r0, r6, r5
    21c0:	00009418 	andeq	r9, r0, r8, lsl r4
    21c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    21c8:	00000b72 	andeq	r0, r0, r2, ror fp
    21cc:	86114e01 	ldrhi	r4, [r1], -r1, lsl #28
    21d0:	05000005 	streq	r0, [r0, #-5]
    21d4:	00002803 	andeq	r2, r0, r3, lsl #16
    21d8:	05b80f20 	ldreq	r0, [r8, #3872]!	; 0xf20
    21dc:	05b80000 	ldreq	r0, [r8, #0]!
    21e0:	94180000 	ldrls	r0, [r8], #-0
    21e4:	00000000 	andeq	r0, r0, r0
    21e8:	1d040a00 	vstrne	s0, [r4, #-0]
    21ec:	1d000001 	stcne	0, cr0, [r0, #-4]
    21f0:	00000a55 	andeq	r0, r0, r5, asr sl
    21f4:	0f02bd01 	svceq	0x0002bd01
    21f8:	000005a8 	andeq	r0, r0, r8, lsr #11
    21fc:	00300305 	eorseq	r0, r0, r5, lsl #6
    2200:	1d0f2000 	stcne	0, cr2, [pc, #-0]	; 2208 <NOROM_SetupGetTrimForAmpcompTh1>
    2204:	e1000001 	tst	r0, r1
    2208:	18000005 	stmdane	r0, {r0, r2}
    220c:	00000094 	muleq	r0, r4, r0
    2210:	f81d0000 			; <UNDEFINED> instruction: 0xf81d0000
    2214:	0100000a 	tsteq	r0, sl
    2218:	d10e02c2 	smlabtle	lr, r2, r2, r0
    221c:	05000005 	streq	r0, [r0, #-5]
    2220:	00002c03 	andeq	r2, r0, r3, lsl #24
    2224:	0b551d20 	bleq	15496ac <__ccfg+0x1529704>
    2228:	c2010000 	andgt	r0, r1, #0
    222c:	05d12602 	ldrbeq	r2, [r1, #1538]	; 0x602
    2230:	03050000 	movweq	r0, #20480	; 0x5000
    2234:	20000024 	andcs	r0, r0, r4, lsr #32
    2238:	0b9e011e 	bleq	fe7826b8 <_estack+0xde77d6b8>
    223c:	2f010000 	svccs	0x00010000
    2240:	0c010705 	stceq	7, cr0, [r1], {5}
    2244:	00000001 	andeq	r0, r0, r1
    2248:	00000000 	andeq	r0, r0, r0
    224c:	01000000 	mrseq	r0, (UNDEF: 0)
    2250:	2c011f9c 	stccs	15, cr1, [r1], {156}	; 0x9c
    2254:	0100000b 	tsteq	r0, fp
    2258:	01060482 	smlabbeq	r6, r2, r4, r0
    225c:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
    2260:	000013f4 	strdeq	r1, [r0], -r4
    2264:	070e9c01 	streq	r9, [lr, -r1, lsl #24]
    2268:	6d200000 	stcvs	0, cr0, [r0, #-0]
    226c:	0100000b 	tsteq	r0, fp
    2270:	0e180482 	cdpeq	4, 1, cr0, cr8, cr2, {4}
    2274:	6e000007 	cdpvs	0, 0, cr0, cr0, cr7, {0}
    2278:	21000005 	tstcs	r0, r5
    227c:	6c617622 	stclvs	6, cr7, [r1], #-136	; 0xffffff78
    2280:	04870100 	streq	r0, [r7], #256	; 0x100
    2284:	00010c08 	andeq	r0, r1, r8, lsl #24
    2288:	0005ae00 	andeq	sl, r5, r0, lsl #28
    228c:	70612300 	rsbvc	r2, r1, r0, lsl #6
    2290:	04880100 	streq	r0, [r8], #256	; 0x100
    2294:	0000c10a 	andeq	ip, r0, sl, lsl #2
    2298:	4c910200 	lfmmi	f0, 4, [r1], {0}
    229c:	00636222 	rsbeq	r6, r3, r2, lsr #4
    22a0:	07048901 	streq	r8, [r4, -r1, lsl #18]
    22a4:	000000ef 	andeq	r0, r0, pc, ror #1
    22a8:	000005ed 	andeq	r0, r0, sp, ror #11
    22ac:	01007622 	tsteq	r0, r2, lsr #12
    22b0:	d907048a 	stmdble	r7, {r1, r3, r7, sl}
    22b4:	21000000 	mrscs	r0, (UNDEF: 0)
    22b8:	24000006 	strcs	r0, [r0], #-6
    22bc:	01007369 	tsteq	r0, r9, ror #6
    22c0:	fb07048b 	blx	1c34f6 <__ccfg+0x1a354e>
    22c4:	25000000 	strcs	r0, [r0, #-0]
    22c8:	00000c26 	andeq	r0, r0, r6, lsr #24
    22cc:	0104b001 	tsteq	r4, r1
    22d0:	00001384 	andeq	r1, r0, r4, lsl #7
    22d4:	00134426 	andseq	r4, r3, r6, lsr #8
    22d8:	00136000 	andseq	r6, r3, r0
    22dc:	0006c000 	andeq	ip, r6, r0
    22e0:	00692200 	rsbeq	r2, r9, r0, lsl #4
    22e4:	0a049f01 	beq	129ef0 <__ccfg+0x109f48>
    22e8:	000000ef 	andeq	r0, r0, pc, ror #1
    22ec:	0000064a 	andeq	r0, r0, sl, asr #12
    22f0:	06482700 	strbeq	r2, [r8], -r0, lsl #14
    22f4:	06d90000 	ldrbeq	r0, [r9], r0
    22f8:	64220000 	strtvs	r0, [r2], #-0
    22fc:	04a90100 	strteq	r0, [r9], #256	; 0x100
    2300:	00010c0b 	andeq	r0, r1, fp, lsl #24
    2304:	00065d00 	andeq	r5, r6, r0, lsl #26
    2308:	d0260000 	eorle	r0, r6, r0
    230c:	de000013 	mcrle	0, 0, r0, cr0, cr3, {0}
    2310:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
    2314:	22000006 	andcs	r0, r0, #6
    2318:	c6010073 			; <UNDEFINED> instruction: 0xc6010073
    231c:	01f60b04 	mvnseq	r0, r4, lsl #22
    2320:	06860000 	streq	r0, [r6], r0
    2324:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2328:	000010c1 	andeq	r1, r0, r1, asr #1
    232c:	000012e6 	andeq	r1, r0, r6, ror #5
    2330:	00000678 	andeq	r0, r0, r8, ror r6
    2334:	0204d901 	andeq	sp, r4, #16384	; 0x4000
    2338:	0010d429 	andseq	sp, r0, r9, lsr #8
    233c:	0a000000 	beq	2344 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>
    2340:	00020304 	andeq	r0, r2, r4, lsl #6
    2344:	0bf62a00 	bleq	ffd8cb4c <_estack+0xdfd87b4c>
    2348:	47010000 	strmi	r0, [r1, -r0]
    234c:	08010d04 	stmdaeq	r1, {r2, r8, sl, fp}
    2350:	2000000e 	andcs	r0, r0, lr
    2354:	0100000e 	tsteq	r0, lr
    2358:	0007539c 	muleq	r7, ip, r3
    235c:	00632b00 	rsbeq	r2, r3, r0, lsl #22
    2360:	19044701 	stmdbne	r4, {r0, r8, r9, sl, lr}
    2364:	000000d9 	ldrdeq	r0, [r0], -r9
    2368:	00000699 	muleq	r0, r9, r6
    236c:	0010c128 	andseq	ip, r0, r8, lsr #2
    2370:	000e0800 	andeq	r0, lr, r0, lsl #16
    2374:	0005f000 	andeq	pc, r5, r0
    2378:	04490100 	strbeq	r0, [r9], #-256	; 0xffffff00
    237c:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    2380:	00000000 	andeq	r0, r0, r0
    2384:	0add012c 	beq	ff74283c <_estack+0xdf73d83c>
    2388:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    238c:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    2398:	01000000 	mrseq	r0, (UNDEF: 0)
    239c:	0007b49c 	muleq	r7, ip, r4
    23a0:	636e2b00 	cmnvs	lr, #0, 22
    23a4:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    23a8:	0001291c 	andeq	r2, r1, ip, lsl r9
    23ac:	0006ac00 	andeq	sl, r6, r0, lsl #24
    23b0:	0bbe2d00 	bleq	fef8d7b8 <_estack+0xdef887b8>
    23b4:	31010000 	mrscc	r0, (UNDEF: 1)
    23b8:	05b80904 	ldreq	r0, [r8, #2308]!	; 0x904
    23bc:	06ca0000 	strbeq	r0, [sl], r0
    23c0:	6d220000 	stcvs	0, cr0, [r2, #-0]
    23c4:	01007861 	tsteq	r0, r1, ror #16
    23c8:	1d080432 	cfstrsne	mvf0, [r8, #-200]	; 0xffffff38
    23cc:	e8000001 	stmda	r0, {r0}
    23d0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    23d4:	00000af3 	strdeq	r0, [r0], -r3
    23d8:	0d043201 	sfmeq	f3, 4, [r4, #-4]
    23dc:	0000011d 	andeq	r0, r0, sp, lsl r1
    23e0:	00000706 	andeq	r0, r0, r6, lsl #14
    23e4:	ab012c00 	blge	4d3ec <__ccfg+0x2d444>
    23e8:	0100000b 	tsteq	r0, fp
    23ec:	01060415 	tsteq	r6, r5, lsl r4
    23f0:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    23fc:	07e39c01 	strbeq	r9, [r3, r1, lsl #24]!
    2400:	6d2b0000 	stcvs	0, cr0, [fp, #-0]
    2404:	01006e69 	tsteq	r0, r9, ror #28
    2408:	291c0415 	ldmdbcs	ip, {r0, r2, r4, sl}
    240c:	2f000001 	svccs	0x00000001
    2410:	00000007 	andeq	r0, r0, r7
    2414:	0b91011f 	bleq	fe442898 <_estack+0xde43d898>
    2418:	02010000 	andeq	r0, r1, #0
    241c:	a0010604 	andge	r0, r1, r4, lsl #12
    2420:	b8000012 	stmdalt	r0, {r1, r4}
    2424:	01000012 	tsteq	r0, r2, lsl r0
    2428:	00080e9c 	muleq	r8, ip, lr
    242c:	0b812000 	bleq	fe04a434 <_estack+0xde045434>
    2430:	02010000 	andeq	r0, r1, #0
    2434:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2438:	07420000 	strbeq	r0, [r2, -r0]
    243c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2440:	000a2701 	andeq	r2, sl, r1, lsl #14
    2444:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    2448:	05b80108 	ldreq	r0, [r8, #264]!	; 0x108
    244c:	11c40000 	bicne	r0, r4, r0
    2450:	126c0000 	rsbne	r0, ip, #0
    2454:	9c010000 	stcls	0, cr0, [r1], {-0}
    2458:	00000880 	andeq	r0, r0, r0, lsl #17
    245c:	00139720 	andseq	r9, r3, r0, lsr #14
    2460:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    2464:	0000d91a 	andeq	sp, r0, sl, lsl r9
    2468:	00075500 	andeq	r5, r7, r0, lsl #10
    246c:	0bbe2d00 	bleq	fef8d874 <_estack+0xdef88874>
    2470:	ab010000 	blge	42478 <__ccfg+0x224d0>
    2474:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    2478:	07680000 	strbeq	r0, [r8, -r0]!
    247c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2480:	ab010063 	blge	42614 <__ccfg+0x2266c>
    2484:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    2488:	079c0000 	ldreq	r0, [ip, r0]
    248c:	5c2d0000 	stcpl	0, cr0, [sp], #-0
    2490:	0100000b 	tsteq	r0, fp
    2494:	1d1503ab 	ldcne	3, cr0, [r5, #-684]	; 0xfffffd54
    2498:	c5000001 	strgt	r0, [r0, #-1]
    249c:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    24a0:	00001396 	muleq	r0, r6, r3
    24a4:	0803af01 	stmdaeq	r3, {r0, r8, r9, sl, fp, sp, pc}
    24a8:	0000011d 	andeq	r0, r0, sp, lsl r1
    24ac:	000007d8 	ldrdeq	r0, [r0], -r8
    24b0:	1c012e00 	stcne	14, cr2, [r1], {-0}
    24b4:	0100000c 	tsteq	r0, ip
    24b8:	0106037c 	tsteq	r6, ip, ror r3
    24bc:	00089d01 	andeq	r9, r8, r1, lsl #26
    24c0:	68632f00 	stmdavs	r3!, {r8, r9, sl, fp, sp}^
    24c4:	037c0100 	cmneq	ip, #0, 2
    24c8:	0005b818 	andeq	fp, r5, r8, lsl r8
    24cc:	3a2a0000 	bcc	a824d4 <__ccfg+0xa6252c>
    24d0:	0100000a 	tsteq	r0, sl
    24d4:	010d034a 	tsteq	sp, sl, asr #6
    24d8:	00000d88 	andeq	r0, r0, r8, lsl #27
    24dc:	00000e08 	andeq	r0, r0, r8, lsl #28
    24e0:	08e79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}^
    24e4:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    24e8:	4a010068 	bmi	42690 <__ccfg+0x226e8>
    24ec:	05b81b03 	ldreq	r1, [r8, #2819]!	; 0xb03
    24f0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    24f4:	be2d0000 	cdplt	0, 2, cr0, cr13, cr0, {0}
    24f8:	0100000b 	tsteq	r0, fp
    24fc:	b8090357 	stmdalt	r9, {r0, r1, r2, r4, r6, r8, r9}
    2500:	20000005 	andcs	r0, r0, r5
    2504:	22000008 	andcs	r0, r0, #8
    2508:	01006363 	tsteq	r0, r3, ror #6
    250c:	b8110357 	ldmdalt	r1, {r0, r1, r2, r4, r6, r8, r9}
    2510:	61000005 	tstvs	r0, r5
    2514:	00000008 	andeq	r0, r0, r8
    2518:	0a7a0130 	beq	1e829e0 <__ccfg+0x1e62a38>
    251c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2520:	10dc0602 	sbcsne	r0, ip, r2, lsl #12
    2524:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    2528:	9c010000 	stcls	0, cr0, [r1], {-0}
    252c:	00000911 	andeq	r0, r0, r1, lsl r9
    2530:	000b072d 	andeq	r0, fp, sp, lsr #14
    2534:	02f50100 	rscseq	r0, r5, #0, 2
    2538:	00011d08 	andeq	r1, r1, r8, lsl #26
    253c:	00089500 	andeq	r9, r8, r0, lsl #10
    2540:	01310000 	teqeq	r1, r0
    2544:	01006f69 	tsteq	r0, r9, ror #30
    2548:	01060279 	tsteq	r6, r9, ror r2
    254c:	000000ef 	andeq	r0, r0, pc, ror #1
    2550:	00001040 	andeq	r1, r0, r0, asr #32
    2554:	000010dc 	ldrdeq	r1, [r0], -ip
    2558:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    255c:	62200000 	eorvs	r0, r0, #0
    2560:	0100000b 	tsteq	r0, fp
    2564:	d90f0279 	stmdble	pc, {r0, r3, r4, r5, r6, r9}	; <UNPREDICTABLE>
    2568:	b3000000 	movwlt	r0, #0
    256c:	2b000008 	blcs	2594 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb0>
    2570:	00766564 	rsbseq	r6, r6, r4, ror #10
    2574:	1b027901 	blne	a0980 <__ccfg+0x809d8>
    2578:	000000d9 	ldrdeq	r0, [r0], -r9
    257c:	000008d1 	ldrdeq	r0, [r0], -r1
    2580:	0006eb20 	andeq	lr, r6, r0, lsr #22
    2584:	02790100 	rsbseq	r0, r9, #0, 2
    2588:	0000d925 	andeq	sp, r0, r5, lsr #18
    258c:	0008ef00 	andeq	lr, r8, r0, lsl #30
    2590:	75622b00 	strbvc	r2, [r2, #-2816]!	; 0xfffff500
    2594:	79010066 	stmdbvc	r1, {r1, r2, r5, r6}
    2598:	01f63602 	mvnseq	r3, r2, lsl #12
    259c:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    25a0:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    25a4:	01006e65 	tsteq	r0, r5, ror #28
    25a8:	d9400279 	stmdble	r0, {r0, r3, r4, r5, r6, r9}^
    25ac:	2b000000 	blcs	25b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xd0>
    25b0:	22000009 	andcs	r0, r0, #9
    25b4:	00746572 	rsbseq	r6, r4, r2, ror r5
    25b8:	07027b01 	streq	r7, [r2, -r1, lsl #22]
    25bc:	000000ef 	andeq	r0, r0, pc, ror #1
    25c0:	0000094b 	andeq	r0, r0, fp, asr #18
    25c4:	1a011f00 	bne	4a1cc <__ccfg+0x2a224>
    25c8:	0100000b 	tsteq	r0, fp
    25cc:	01060269 	tsteq	r6, r9, ror #4
    25d0:	0000101c 	andeq	r1, r0, ip, lsl r0
    25d4:	00001040 	andeq	r1, r0, r0, asr #32
    25d8:	09cf9c01 	stmibeq	pc, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    25dc:	722b0000 	eorvc	r0, fp, #0
    25e0:	69010066 	stmdbvs	r1, {r1, r2, r5, r6}
    25e4:	04541e02 	ldrbeq	r1, [r4], #-3586	; 0xfffff1fe
    25e8:	097f0000 	ldmdbeq	pc!, {}^	; <UNPREDICTABLE>
    25ec:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    25f0:	0100636f 	tsteq	r0, pc, ror #6
    25f4:	8d260269 	sfmhi	f0, 4, [r6, #-420]!	; 0xfffffe5c
    25f8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    25fc:	00000009 	andeq	r0, r0, r9
    2600:	0c2d011f 	stfeqs	f0, [sp], #-124	; 0xffffff84
    2604:	5f010000 	svcpl	0x00010000
    2608:	00010602 	andeq	r0, r1, r2, lsl #12
    260c:	00000000 	andeq	r0, r0, r0
    2610:	01000000 	mrseq	r0, (UNDEF: 0)
    2614:	000a169c 	muleq	sl, ip, r6
    2618:	0b682000 	bleq	1a0a620 <__ccfg+0x19ea678>
    261c:	5f010000 	svcpl	0x00010000
    2620:	01f61902 	mvnseq	r1, r2, lsl #18
    2624:	09d10000 	ldmibeq	r1, {}^	; <UNPREDICTABLE>
    2628:	63320000 	teqvs	r2, #0
    262c:	025f0100 	subseq	r0, pc, #0, 2
    2630:	0001fc24 	andeq	pc, r1, r4, lsr #24
    2634:	2b510100 	blcs	1442a3c <__ccfg+0x1422a94>
    2638:	5f01006e 	svcpl	0x0001006e
    263c:	008d2b02 	addeq	r2, sp, r2, lsl #22
    2640:	09ef0000 	stmibeq	pc!, {}^	; <UNPREDICTABLE>
    2644:	1f000000 	svcne	0x00000000
    2648:	000bea01 	andeq	lr, fp, r1, lsl #20
    264c:	02590100 	subseq	r0, r9, #0, 2
    2650:	10060106 	andne	r0, r6, r6, lsl #2
    2654:	101a0000 	andsne	r0, sl, r0
    2658:	9c010000 	stcls	0, cr0, [r1], {-0}
    265c:	00000a61 	andeq	r0, r0, r1, ror #20
    2660:	000b6820 	andeq	r6, fp, r0, lsr #16
    2664:	02590100 	subseq	r0, r9, #0, 2
    2668:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    266c:	000a0200 	andeq	r0, sl, r0, lsl #4
    2670:	72732b00 	rsbsvc	r2, r3, #0, 22
    2674:	59010063 	stmdbpl	r1, {r0, r1, r5, r6}
    2678:	070e2b02 	streq	r2, [lr, -r2, lsl #22]
    267c:	0a150000 	beq	542684 <__ccfg+0x5226dc>
    2680:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    2684:	02590100 	subseq	r0, r9, #0, 2
    2688:	00008d34 	andeq	r8, r0, r4, lsr sp
    268c:	000a3300 	andeq	r3, sl, r0, lsl #6
    2690:	011f0000 	tsteq	pc, r0
    2694:	00000c5e 	andeq	r0, r0, lr, asr ip
    2698:	06025401 	streq	r5, [r2], -r1, lsl #8
    269c:	00000001 	andeq	r0, r0, r1
    26a0:	00000000 	andeq	r0, r0, r0
    26a4:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    26a8:	2b00000a 	blcs	26d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xa4>
    26ac:	54010064 	strpl	r0, [r1], #-100	; 0xffffff9c
    26b0:	01f61a02 	mvnseq	r1, r2, lsl #20
    26b4:	0a460000 	beq	11826bc <__ccfg+0x1162714>
    26b8:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    26bc:	02540100 	subseq	r0, r4, #0, 2
    26c0:	00070e29 	andeq	r0, r7, r9, lsr #28
    26c4:	000a5900 	andeq	r5, sl, r0, lsl #18
    26c8:	006e3200 	rsbeq	r3, lr, r0, lsl #4
    26cc:	30025401 	andcc	r5, r2, r1, lsl #8
    26d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    26d4:	1f005201 	svcne	0x00005201
    26d8:	000b3101 	andeq	r3, fp, r1, lsl #2
    26dc:	024e0100 	subeq	r0, lr, #0, 2
    26e0:	00000106 	andeq	r0, r0, r6, lsl #2
    26e4:	00000000 	andeq	r0, r0, r0
    26e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    26ec:	00000ade 	ldrdeq	r0, [r0], -lr
    26f0:	0100642b 	tsteq	r0, fp, lsr #8
    26f4:	f619024e 			; <UNDEFINED> instruction: 0xf619024e
    26f8:	6c000001 	stcvs	0, cr0, [r0], {1}
    26fc:	2b00000a 	blcs	272c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2700:	4e010073 	mcrmi	0, 0, r0, cr1, cr3, {3}
    2704:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    2708:	0a8a0000 	beq	fe282710 <_estack+0xde27d710>
    270c:	1f000000 	svcne	0x00000000
    2710:	000c3901 	andeq	r3, ip, r1, lsl #18
    2714:	02470100 	subeq	r0, r7, #0, 2
    2718:	00000106 	andeq	r0, r0, r6, lsl #2
    271c:	00000000 	andeq	r0, r0, r0
    2720:	9c010000 	stcls	0, cr0, [r1], {-0}
    2724:	00000b25 	andeq	r0, r0, r5, lsr #22
    2728:	0100642b 	tsteq	r0, fp, lsr #8
    272c:	f61a0247 			; <UNDEFINED> instruction: 0xf61a0247
    2730:	9d000001 	stcls	0, cr0, [r0, #-4]
    2734:	2b00000a 	blcs	2764 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    2738:	47010073 	smlsdxmi	r1, r3, r0, r0
    273c:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    2740:	0abb0000 	beq	feec2748 <_estack+0xdeebd748>
    2744:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    2748:	02470100 	subeq	r0, r7, #0, 2
    274c:	00008d30 	andeq	r8, r0, r0, lsr sp
    2750:	000ace00 	andeq	ip, sl, r0, lsl #28
    2754:	011f0000 	tsteq	pc, r0
    2758:	00000a1b 	andeq	r0, r0, fp, lsl sl
    275c:	06024201 	streq	r4, [r2], -r1, lsl #4
    2760:	00000001 	andeq	r0, r0, r1
    2764:	00000000 	andeq	r0, r0, r0
    2768:	5d9c0100 	ldfpls	f0, [ip]
    276c:	2b00000b 	blcs	27a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x16c>
    2770:	42010064 	andmi	r0, r1, #100	; 0x64
    2774:	01f61902 	mvnseq	r1, r2, lsl #18
    2778:	0ae10000 	beq	ff842780 <_estack+0xdf83d780>
    277c:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2780:	02420100 	subeq	r0, r2, #0, 2
    2784:	00070e28 	andeq	r0, r7, r8, lsr #28
    2788:	000af400 	andeq	pc, sl, r0, lsl #8
    278c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2790:	00000ad1 	ldrdeq	r0, [r0], -r1
    2794:	05023901 	streq	r3, [r2, #-2305]	; 0xfffff6ff
    2798:	00008d01 	andeq	r8, r0, r1, lsl #26
    279c:	000ff800 	andeq	pc, pc, r0, lsl #16
    27a0:	00100600 	andseq	r0, r0, r0, lsl #12
    27a4:	999c0100 	ldmibls	ip, {r8}
    27a8:	2b00000b 	blcs	27dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    27ac:	39010073 	stmdbcc	r1, {r0, r1, r4, r5, r6}
    27b0:	070e1e02 	streq	r1, [lr, -r2, lsl #28]
    27b4:	0b120000 	bleq	4827bc <__ccfg+0x462814>
    27b8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    27bc:	023b0100 	eorseq	r0, fp, #0, 2
    27c0:	00008d06 	andeq	r8, r0, r6, lsl #26
    27c4:	000b3000 	andeq	r3, fp, r0
    27c8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    27cc:	00000aea 	andeq	r0, r0, sl, ror #21
    27d0:	06022d01 	streq	r2, [r2], -r1, lsl #26
    27d4:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    27e0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    27e4:	2b00000b 	blcs	2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>
    27e8:	006e7566 	rsbeq	r7, lr, r6, ror #10
    27ec:	18022d01 	stmdane	r2, {r0, r8, sl, fp, sp}
    27f0:	000002f1 	strdeq	r0, [r0], -r1
    27f4:	00000b43 	andeq	r0, r0, r3, asr #22
    27f8:	01006922 	tsteq	r0, r2, lsr #18
    27fc:	160e022f 	strne	r0, [lr], -pc, lsr #4
    2800:	61000004 	tstvs	r0, r4
    2804:	2200000b 	andcs	r0, r0, #11
    2808:	30010063 	andcc	r0, r1, r3, rrx
    280c:	00d90702 	sbcseq	r0, r9, r2, lsl #14
    2810:	0b7f0000 	bleq	1fc2818 <__ccfg+0x1fa2870>
    2814:	2c000000 	stccs	0, cr0, [r0], {-0}
    2818:	000aeb01 	andeq	lr, sl, r1, lsl #22
    281c:	021f0100 	andseq	r0, pc, #0, 2
    2820:	011d0107 	tsteq	sp, r7, lsl #2
    2824:	0fd40000 	svceq	0x00d40000
    2828:	0ff80000 	svceq	0x00f80000
    282c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2830:	00000c22 	andeq	r0, r0, r2, lsr #24
    2834:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    2838:	021f0100 	andseq	r0, pc, #0, 2
    283c:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    2840:	000b9200 	andeq	r9, fp, r0, lsl #4
    2844:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2848:	0e022101 	adfeqs	f2, f2, f1
    284c:	00000416 	andeq	r0, r0, r6, lsl r4
    2850:	2c005001 	stccs	0, cr5, [r0], {1}
    2854:	000bdc01 	andeq	sp, fp, r1, lsl #24
    2858:	02130100 	andseq	r0, r3, #0, 2
    285c:	02f10109 	rscseq	r0, r1, #1073741826	; 0x40000002
	...
    2868:	9c010000 	stcls	0, cr0, [r1], {-0}
    286c:	00000c60 	andeq	r0, r0, r0, ror #24
    2870:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2874:	02130100 	andseq	r0, r3, #0, 2
    2878:	00011d18 	andeq	r1, r1, r8, lsl sp
    287c:	000bbb00 	andeq	fp, fp, r0, lsl #22
    2880:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2884:	0e021501 	cfsh32eq	mvfx1, mvfx2, #1
    2888:	00000416 	andeq	r0, r0, r6, lsl r4
    288c:	00000bd9 	ldrdeq	r0, [r0], -r9
    2890:	a3011f00 	movwge	r1, #7936	; 0x1f00
    2894:	0100000b 	tsteq	r0, fp
    2898:	010601f5 	strdeq	r0, [r6, -r5]
	...
    28a4:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    28a8:	662b0000 	strtvs	r0, [fp], -r0
    28ac:	01006e75 	tsteq	r0, r5, ror lr
    28b0:	f11701f5 			; <UNDEFINED> instruction: 0xf11701f5
    28b4:	f7000002 			; <UNDEFINED> instruction: 0xf7000002
    28b8:	2200000b 	andcs	r0, r0, #11
    28bc:	006c6572 	rsbeq	r6, ip, r2, ror r5
    28c0:	0a01f901 	beq	80ccc <__ccfg+0x60d24>
    28c4:	000000cd 	andeq	r0, r0, sp, asr #1
    28c8:	00000c15 	andeq	r0, r0, r5, lsl ip
    28cc:	01006922 	tsteq	r0, r2, lsr #18
    28d0:	160e01fa 			; <UNDEFINED> instruction: 0x160e01fa
    28d4:	28000004 	stmdacs	r0, {r2}
    28d8:	2200000c 	andcs	r0, r0, #12
    28dc:	fa01006a 	blx	42a8c <__ccfg+0x22ae4>
    28e0:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    28e4:	0c5c0000 	mraeq	r0, ip, acc0
    28e8:	6b220000 	blvs	8828f0 <__ccfg+0x862948>
    28ec:	01fa0100 	mvnseq	r0, r0, lsl #2
    28f0:	00041616 	andeq	r1, r4, r6, lsl r6
    28f4:	000c7a00 	andeq	r7, ip, r0, lsl #20
    28f8:	011f0000 	tsteq	pc, r0
    28fc:	00000a50 	andeq	r0, r0, r0, asr sl
    2900:	0601d901 	streq	sp, [r1], -r1, lsl #18
    2904:	00117401 	andseq	r7, r1, r1, lsl #8
    2908:	0011c400 	andseq	ip, r1, r0, lsl #8
    290c:	0e9c0100 	fmleqe	f0, f4, f0
    2910:	2b00000d 	blcs	294c <NOROM_ChipInfo_GetHwRevision+0x34>
    2914:	00646970 	rsbeq	r6, r4, r0, ror r9
    2918:	1201d901 	andne	sp, r1, #16384	; 0x4000
    291c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2920:	00000c98 	muleq	r0, r8, ip
    2924:	01006922 	tsteq	r0, r2, lsr #18
    2928:	160e01dd 			; <UNDEFINED> instruction: 0x160e01dd
    292c:	cc000004 	stcgt	0, cr0, [r0], {4}
    2930:	2400000c 	strcs	r0, [r0], #-12
    2934:	dd01006a 	stcle	0, cr0, [r1, #-424]	; 0xfffffe58
    2938:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    293c:	2a000000 	bcs	2944 <NOROM_ChipInfo_GetHwRevision+0x2c>
    2940:	00000a14 	andeq	r0, r0, r4, lsl sl
    2944:	0d01c401 	cfstrseq	mvf12, [r1, #-4]
    2948:	000d4c01 	andeq	r4, sp, r1, lsl #24
    294c:	000d8800 	andeq	r8, sp, r0, lsl #16
    2950:	639c0100 	orrsvs	r0, ip, #0, 2
    2954:	3200000d 	andcc	r0, r0, #13
    2958:	00646970 	rsbeq	r6, r4, r0, ror r9
    295c:	2101c401 	tstcs	r1, r1, lsl #8
    2960:	00000416 	andeq	r0, r0, r6, lsl r4
    2964:	112d5001 			; <UNDEFINED> instruction: 0x112d5001
    2968:	0100000c 	tsteq	r0, ip
    296c:	1d0801c8 	stfnes	f0, [r8, #-800]	; 0xfffffce0
    2970:	f5000001 			; <UNDEFINED> instruction: 0xf5000001
    2974:	2200000c 	andcs	r0, r0, #12
    2978:	c901006a 	stmdbgt	r1, {r1, r3, r5, r6}
    297c:	008d0601 	addeq	r0, sp, r1, lsl #12
    2980:	0d080000 	stceq	0, cr0, [r8, #-0]
    2984:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2988:	01ca0100 	biceq	r0, sl, r0, lsl #2
    298c:	0004160e 	andeq	r1, r4, lr, lsl #12
    2990:	00520100 	subseq	r0, r2, r0, lsl #2
    2994:	0be4012c 	bleq	ff902e4c <_estack+0xdf8fde4c>
    2998:	b3010000 	movwlt	r0, #4096	; 0x1000
    299c:	d9010601 	stmdble	r1, {r0, r9, sl}
	...
    29a8:	01000000 	mrseq	r0, (UNDEF: 0)
    29ac:	000da19c 	muleq	sp, ip, r1
    29b0:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    29b4:	b3010064 	movwlt	r0, #4196	; 0x1064
    29b8:	011d1301 	tsteq	sp, r1, lsl #6
    29bc:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
    29c0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    29c4:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    29c8:	0004160e 	andeq	r1, r4, lr, lsl #12
    29cc:	000d3900 	andeq	r3, sp, r0, lsl #18
    29d0:	01330000 	teqeq	r3, r0
    29d4:	00000a33 	andeq	r0, r0, r3, lsr sl
    29d8:	0601a801 	streq	sl, [r1], -r1, lsl #16
    29dc:	00000001 	andeq	r0, r0, r1
    29e0:	00000000 	andeq	r0, r0, r0
    29e4:	1f9c0100 	svcne	0x009c0100
    29e8:	00189b01 	andseq	r9, r8, r1, lsl #22
    29ec:	019a0100 	orrseq	r0, sl, r0, lsl #2
    29f0:	0f9c0106 	svceq	0x009c0106
    29f4:	0fd40000 	svceq	0x00d40000
    29f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29fc:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a00:	0100642b 	tsteq	r0, fp, lsr #8
    2a04:	d912019a 	ldmdble	r2, {r1, r3, r4, r7, r8}
    2a08:	57000000 	strpl	r0, [r0, -r0]
    2a0c:	2000000d 	andcs	r0, r0, sp
    2a10:	00000b81 	andeq	r0, r0, r1, lsl #23
    2a14:	1a019a01 	bne	69220 <__ccfg+0x49278>
    2a18:	000000d9 	ldrdeq	r0, [r0], -r9
    2a1c:	00000d6a 	andeq	r0, r0, sl, ror #26
    2a20:	46012c00 	strmi	r2, [r1], -r0, lsl #24
    2a24:	0100000c 	tsteq	r0, ip
    2a28:	01070188 	smlabbeq	r7, r8, r1, r0
    2a2c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2a30:	00000f78 	andeq	r0, r0, r8, ror pc
    2a34:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    2a38:	0e3e9c01 	cdpeq	12, 3, cr9, cr14, cr1, {0}
    2a3c:	702b0000 	eorvc	r0, fp, r0
    2a40:	01006469 	tsteq	r0, r9, ror #8
    2a44:	1d180188 	ldfnes	f0, [r8, #-544]	; 0xfffffde0
    2a48:	7d000001 	stcvc	0, cr0, [r0, #-4]
    2a4c:	2b00000d 	blcs	2a88 <NOROM_OSCClockSourceGet+0x60>
    2a50:	01007473 	tsteq	r0, r3, ror r4
    2a54:	d9220188 	stmdble	r2!, {r3, r7, r8}
    2a58:	a6000000 	strge	r0, [r0], -r0
    2a5c:	2200000d 	andcs	r0, r0, #13
    2a60:	8a010069 	bhi	42c0c <__ccfg+0x22c64>
    2a64:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2a68:	0dc40000 	stcleq	0, cr0, [r4]
    2a6c:	1f000000 	svcne	0x00000000
    2a70:	000b0c01 	andeq	r0, fp, r1, lsl #24
    2a74:	01780100 	cmneq	r8, r0, lsl #2
    2a78:	00000106 	andeq	r0, r0, r6, lsl #2
    2a7c:	00000000 	andeq	r0, r0, r0
    2a80:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a84:	00000e96 	muleq	r0, r6, lr
    2a88:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2a8c:	01780100 	cmneq	r8, r0, lsl #2
    2a90:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2a94:	000de200 	andeq	lr, sp, r0, lsl #4
    2a98:	0b732000 	bleq	1ccaaa0 <__ccfg+0x1caaaf8>
    2a9c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2aa0:	011d2601 	tsteq	sp, r1, lsl #12
    2aa4:	0df50000 	ldcleq	0, cr0, [r5]
    2aa8:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2aac:	017c0100 	cmneq	ip, r0, lsl #2
    2ab0:	0004160e 	andeq	r1, r4, lr, lsl #12
    2ab4:	22500100 	subscs	r0, r0, #0, 2
    2ab8:	7d01006a 	stcvc	0, cr0, [r1, #-424]	; 0xfffffe58
    2abc:	008d0701 	addeq	r0, sp, r1, lsl #14
    2ac0:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
    2ac4:	1f000000 	svcne	0x00000000
    2ac8:	000ac401 	andeq	ip, sl, r1, lsl #8
    2acc:	01660100 	cmneq	r6, r0, lsl #2
    2ad0:	0f440106 	svceq	0x00440106
    2ad4:	0f780000 	svceq	0x00780000
    2ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2adc:	00000edb 	ldrdeq	r0, [r0], -fp
    2ae0:	000b7334 	andeq	r7, fp, r4, lsr r3
    2ae4:	01660100 	cmneq	r6, r0, lsl #2
    2ae8:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2aec:	22500100 	subscs	r0, r0, #0, 2
    2af0:	6a01006a 	bvs	42ca0 <__ccfg+0x22cf8>
    2af4:	008d0601 	addeq	r0, sp, r1, lsl #12
    2af8:	0e310000 	cdpeq	0, 3, cr0, cr1, cr0, {0}
    2afc:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2b00:	016b0100 	cmneq	fp, r0, lsl #2
    2b04:	0004160e 	andeq	r1, r4, lr, lsl #12
    2b08:	00520100 	subseq	r0, r2, r0, lsl #2
    2b0c:	0b87012e 	bleq	fe1c2fcc <_estack+0xde1bdfcc>
    2b10:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2b14:	01010601 	tsteq	r1, r1, lsl #12
    2b18:	00000f11 	andeq	r0, r0, r1, lsl pc
    2b1c:	000b7335 	andeq	r7, fp, r5, lsr r3
    2b20:	01590100 	cmpeq	r9, r0, lsl #2
    2b24:	00011d17 	andeq	r1, r1, r7, lsl sp
    2b28:	0b813500 	bleq	fe04ff30 <_estack+0xde04af30>
    2b2c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2b30:	00d92301 	sbcseq	r2, r9, r1, lsl #6
    2b34:	6a240000 	bvs	902b3c <__ccfg+0x8e2b94>
    2b38:	015d0100 	cmpeq	sp, r0, lsl #2
    2b3c:	0000ef07 	andeq	lr, r0, r7, lsl #30
    2b40:	011f0000 	tsteq	pc, r0
    2b44:	00000aff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2b48:	06015301 	streq	r5, [r1], -r1, lsl #6
    2b4c:	000efc01 	andeq	pc, lr, r1, lsl #24
    2b50:	000f1000 	andeq	r1, pc, r0
    2b54:	3c9c0100 	ldfccs	f0, [ip], {0}
    2b58:	2000000f 	andcs	r0, r0, pc
    2b5c:	00000b81 	andeq	r0, r0, r1, lsl #23
    2b60:	14015301 	strne	r5, [r1], #-769	; 0xfffffcff
    2b64:	000000d9 	ldrdeq	r0, [r0], -r9
    2b68:	00000e44 	andeq	r0, r0, r4, asr #28
    2b6c:	46012c00 	strmi	r2, [r1], -r0, lsl #24
    2b70:	0100000a 	tsteq	r0, sl
    2b74:	0107012c 	tsteq	r7, ip, lsr #2
    2b78:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b7c:	0000126c 	andeq	r1, r0, ip, ror #4
    2b80:	000012a0 	andeq	r1, r0, r0, lsr #5
    2b84:	0f9e9c01 	svceq	0x009e9c01
    2b88:	20200000 	eorcs	r0, r0, r0
    2b8c:	0100000b 	tsteq	r0, fp
    2b90:	f11a012c 			; <UNDEFINED> instruction: 0xf11a012c
    2b94:	57000002 	strpl	r0, [r0, -r2]
    2b98:	2000000e 	andcs	r0, r0, lr
    2b9c:	00000f3f 	andeq	r0, r0, pc, lsr pc
    2ba0:	26012c01 	strcs	r2, [r1], -r1, lsl #24
    2ba4:	0000011d 	andeq	r0, r0, sp, lsl r1
    2ba8:	00000e75 	andeq	r0, r0, r5, ror lr
    2bac:	01006923 	tsteq	r0, r3, lsr #18
    2bb0:	160e012e 	strne	r0, [lr], -lr, lsr #2
    2bb4:	01000004 	tsteq	r0, r4
    2bb8:	06203650 			; <UNDEFINED> instruction: 0x06203650
    2bbc:	6a220000 	bvs	882bc4 <__ccfg+0x862c1c>
    2bc0:	013d0100 	teqeq	sp, r0, lsl #2
    2bc4:	0004160f 	andeq	r1, r4, pc, lsl #12
    2bc8:	000e9300 	andeq	r9, lr, r0, lsl #6
    2bcc:	37000000 	strcc	r0, [r0, -r0]
    2bd0:	000bc401 	andeq	ip, fp, r1, lsl #8
    2bd4:	06af0100 	strteq	r0, [pc], r0, lsl #2
    2bd8:	0fe30101 	svceq	0x00e30101
    2bdc:	6d380000 	ldcvs	0, cr0, [r8, #-0]
    2be0:	01006e69 	tsteq	r0, r9, ror #28
    2be4:	00d91aaf 	sbcseq	r1, r9, pc, lsr #21
    2be8:	c1390000 	teqgt	r9, r0
    2bec:	01000007 	tsteq	r0, r7
    2bf0:	00cd27af 	sbceq	r2, sp, pc, lsr #15
    2bf4:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    2bf8:	0ebd0100 	frdeqe	f0, f5, f0
    2bfc:	00000416 	andeq	r0, r0, r6, lsl r4
    2c00:	0100643a 	tsteq	r0, sl, lsr r4
    2c04:	00d907be 	ldrheq	r0, [r9], #126	; 0x7e
    2c08:	4d3b0000 	ldcmi	0, cr0, [fp, #-0]
    2c0c:	01004b4f 	tsteq	r0, pc, asr #22
    2c10:	00010109 	andeq	r0, r1, r9, lsl #2
    2c14:	0c01013c 	stfeqs	f0, [r1], {60}	; 0x3c
    2c18:	a7010000 	strge	r0, [r1, -r0]
    2c1c:	00000106 	andeq	r0, r0, r6, lsl #2
    2c20:	00000000 	andeq	r0, r0, r0
    2c24:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c28:	00001018 	andeq	r1, r0, r8, lsl r0
    2c2c:	0100743d 	tsteq	r0, sp, lsr r4
    2c30:	01291fa7 			; <UNDEFINED> instruction: 0x01291fa7
    2c34:	0ebc0000 	cdpeq	0, 11, cr0, cr12, cr0, {0}
    2c38:	763d0000 	ldrtvc	r0, [sp], -r0
    2c3c:	27a70100 	strcs	r0, [r7, r0, lsl #2]!
    2c40:	000000d9 	ldrdeq	r0, [r0], -r9
    2c44:	00000ecf 	andeq	r0, r0, pc, asr #29
    2c48:	50013c00 	andpl	r3, r1, r0, lsl #24
    2c4c:	0100000c 	tsteq	r0, ip
    2c50:	0001068f 	andeq	r0, r1, pc, lsl #13
    2c54:	00000000 	andeq	r0, r0, r0
    2c58:	01000000 	mrseq	r0, (UNDEF: 0)
    2c5c:	00104e9c 	mulseq	r0, ip, lr
    2c60:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    2c64:	1d8f0100 	stfnes	f0, [pc]	; 2c6c <__pi_hex_enc_table>
    2c68:	00000129 	andeq	r0, r0, r9, lsr #2
    2c6c:	00000ee2 	andeq	r0, r0, r2, ror #29
    2c70:	0100693e 	tsteq	r0, lr, lsr r9
    2c74:	008d0693 	umulleq	r0, sp, r3, r6
    2c78:	0f000000 	svceq	0x00000000
    2c7c:	3c000000 	stccc	0, cr0, [r0], {-0}
    2c80:	000a6601 	andeq	r6, sl, r1, lsl #12
    2c84:	067f0100 	ldrbteq	r0, [pc], -r0, lsl #2
    2c88:	00000001 	andeq	r0, r0, r1
    2c8c:	00000000 	andeq	r0, r0, r0
    2c90:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    2c94:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2c98:	01007475 	tsteq	r0, r5, ror r4
    2c9c:	01291a7f 			; <UNDEFINED> instruction: 0x01291a7f
    2ca0:	0f1e0000 	svceq	0x001e0000
    2ca4:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    2ca8:	06830100 	streq	r0, [r3], r0, lsl #2
    2cac:	0000008d 	andeq	r0, r0, sp, lsl #1
    2cb0:	00000f47 	andeq	r0, r0, r7, asr #30
    2cb4:	79013f00 	stmdbvc	r1, {r8, r9, sl, fp, ip, sp}
    2cb8:	0100000b 	tsteq	r0, fp
    2cbc:	2001067b 	andcs	r0, r1, fp, ror r6
    2cc0:	3000000e 	andcc	r0, r0, lr
    2cc4:	0100000e 	tsteq	r0, lr
    2cc8:	0b25409c 	bleq	952f40 <__ccfg+0x932f98>
    2ccc:	5f010000 	svcpl	0x00010000
    2cd0:	04160114 	ldreq	r0, [r6], #-276	; 0xfffffeec
    2cd4:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2cd8:	38000010 	stmdacc	r0, {r4}
    2cdc:	00646970 	rsbeq	r6, r4, r0, ror r9
    2ce0:	1d225f01 	stcne	15, cr5, [r2, #-4]!
    2ce4:	3a000001 	bcc	2cf0 <__exidx_end+0x6c>
    2ce8:	61010069 	tstvs	r1, r9, rrx
    2cec:	00041617 	andeq	r1, r4, r7, lsl r6
    2cf0:	71410000 	mrsvc	r0, (UNDEF: 65)
    2cf4:	0200000a 	andeq	r0, r0, #10
    2cf8:	0101029e 			; <UNDEFINED> instruction: 0x0101029e
    2cfc:	000010e2 	andeq	r1, r0, r2, ror #1
    2d00:	0010e203 	andseq	lr, r0, r3, lsl #4
    2d04:	07313500 	ldreq	r3, [r1, -r0, lsl #10]!
    2d08:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2d0c:	00731302 	rsbseq	r1, r3, r2, lsl #6
    2d10:	02000000 	andeq	r0, r0, #0
    2d14:	0bb80201 	bleq	fee03520 <_estack+0xdedfe520>
    2d18:	98420000 	stmdals	r2, {}^	; <UNPREDICTABLE>
    2d1c:	00000010 	andeq	r0, r0, r0, lsl r0
    2d20:	00000000 	andeq	r0, r0, r0
    2d24:	01000000 	mrseq	r0, (UNDEF: 0)
    2d28:	00112e9c 	mulseq	r1, ip, lr
    2d2c:	10aa4300 	adcne	r4, sl, r0, lsl #6
    2d30:	0f650000 	svceq	0x00650000
    2d34:	b6440000 	strblt	r0, [r4], -r0
    2d38:	8e000010 	mcrhi	0, 0, r0, cr0, cr0, {0}
    2d3c:	4500000f 	strmi	r0, [r0, #-15]
    2d40:	00001098 	muleq	r0, r8, r0
	...
    2d4c:	43145f01 	tstmi	r4, #1, 30
    2d50:	000010aa 	andeq	r1, r0, sl, lsr #1
    2d54:	00000fac 	andeq	r0, r0, ip, lsr #31
    2d58:	0010b646 	andseq	fp, r0, r6, asr #12
    2d5c:	42000000 	andmi	r0, r0, #0
    2d60:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    2d64:	00000e30 	andeq	r0, r0, r0, lsr lr
    2d68:	00000efc 	strdeq	r0, [r0], -ip
    2d6c:	119a9c01 	orrsne	r9, sl, r1, lsl #24
    2d70:	ad430000 	stclge	0, cr0, [r3, #-0]
    2d74:	bf00000f 	svclt	0x0000000f
    2d78:	4300000f 	movwmi	r0, #15
    2d7c:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    2d80:	00000fd2 	ldrdeq	r0, [r0], -r2
    2d84:	000fc546 	andeq	ip, pc, r6, asr #10
    2d88:	0fcf4600 	svceq	0x00cf4600
    2d8c:	9e470000 	cdpls	0, 4, cr0, cr7, cr0, {0}
    2d90:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
    2d94:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2d98:	01000006 	tsteq	r0, r6
    2d9c:	b92906af 	stmdblt	r9!, {r0, r1, r2, r3, r5, r7, r9, sl}
    2da0:	4300000f 	movwmi	r0, #15
    2da4:	00000fad 	andeq	r0, r0, sp, lsr #31
    2da8:	00000fe5 	andeq	r0, r0, r5, ror #31
    2dac:	00060836 	andeq	r0, r6, r6, lsr r8
    2db0:	0fc54400 	svceq	0x00c54400
    2db4:	100e0000 	andne	r0, lr, r0
    2db8:	cf460000 	svcgt	0x00460000
    2dbc:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
    2dc0:	00000fd9 	ldrdeq	r0, [r0], -r9
    2dc4:	00000eda 	ldrdeq	r0, [r0], -sl
    2dc8:	42000000 	andmi	r0, r0, #0
    2dcc:	00000edb 	ldrdeq	r0, [r0], -fp
    2dd0:	00000f10 	andeq	r0, r0, r0, lsl pc
    2dd4:	00000f44 	andeq	r0, r0, r4, asr #30
    2dd8:	11ee9c01 	mvnne	r9, r1, lsl #24
    2ddc:	eb430000 	bl	10c2de4 <__ccfg+0x10a2e3c>
    2de0:	2c00000e 	stccs	0, cr0, [r0], {14}
    2de4:	43000010 	movwmi	r0, #16
    2de8:	00000ef8 	strdeq	r0, [r0], -r8
    2dec:	0000104a 	andeq	r1, r0, sl, asr #32
    2df0:	000f0546 	andeq	r0, pc, r6, asr #10
    2df4:	0edb4900 	vfnmseq.f16	s9, s22, s0	; <UNPREDICTABLE>
    2df8:	0f220000 	svceq	0x00220000
    2dfc:	0f2a0000 	svceq	0x002a0000
    2e00:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2e04:	eb430601 	bl	10c4610 <__ccfg+0x10a4668>
    2e08:	6800000e 	stmdavs	r0, {r1, r2, r3}
    2e0c:	43000010 	movwmi	r0, #16
    2e10:	00000ef8 	strdeq	r0, [r0], -r8
    2e14:	0000107b 	andeq	r1, r0, fp, ror r0
    2e18:	000f0546 	andeq	r0, pc, r6, asr #10
    2e1c:	4a000000 	bmi	2e24 <__exidx_end+0x1a0>
    2e20:	00000880 	andeq	r0, r0, r0, lsl #17
    2e24:	0000112c 	andeq	r1, r0, ip, lsr #2
    2e28:	00001174 	andeq	r1, r0, r4, ror r1
    2e2c:	90439c01 	subls	r9, r3, r1, lsl #24
    2e30:	8e000008 	cdphi	0, 0, cr0, cr0, cr8, {0}
    2e34:	49000010 	stmdbmi	r0, {r4}
    2e38:	00000880 	andeq	r0, r0, r0, lsl #17
    2e3c:	00001138 	andeq	r1, r0, r8, lsr r1
    2e40:	00001140 	andeq	r1, r0, r0, asr #2
    2e44:	06037c01 	streq	r7, [r3], -r1, lsl #24
    2e48:	00089043 	andeq	r9, r8, r3, asr #32
    2e4c:	0010ac00 	andseq	sl, r0, r0, lsl #24
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	00001333 	andeq	r1, r0, r3, lsr r3
    2e58:	0c420003 	mcrreq	0, 0, r0, r2, cr3
    2e5c:	01040000 	mrseq	r0, (UNDEF: 4)
    2e60:	00000170 	andeq	r0, r0, r0, ror r1
    2e64:	000c9f0c 	andeq	r9, ip, ip, lsl #30
    2e68:	0000c000 	andeq	ip, r0, r0
    2e6c:	00081000 	andeq	r1, r8, r0
    2e70:	00000000 	andeq	r0, r0, r0
    2e74:	00298f00 	eoreq	r8, r9, r0, lsl #30
    2e78:	06010200 	streq	r0, [r1], -r0, lsl #4
    2e7c:	000003a3 	andeq	r0, r0, r3, lsr #7
    2e80:	dd050202 	sfmle	f0, 4, [r5, #-8]
    2e84:	02000003 	andeq	r0, r0, #3
    2e88:	009d0504 	addseq	r0, sp, r4, lsl #10
    2e8c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2e90:	00009805 	andeq	r9, r0, r5, lsl #16
    2e94:	21fc0300 	mvnscs	r0, r0, lsl #6
    2e98:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    2e9c:	00004d18 	andeq	r4, r0, r8, lsl sp
    2ea0:	08010200 	stmdaeq	r1, {r9}
    2ea4:	000003a1 	andeq	r0, r0, r1, lsr #7
    2ea8:	0020ea03 	eoreq	lr, r0, r3, lsl #20
    2eac:	19310200 	ldmdbne	r1!, {r9}
    2eb0:	00000060 	andeq	r0, r0, r0, rrx
    2eb4:	71070202 	tstvc	r7, r2, lsl #4
    2eb8:	03000002 	movweq	r0, #2
    2ebc:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    2ec0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    2ec4:	02000000 	andeq	r0, r0, #0
    2ec8:	00720704 	rsbseq	r0, r2, r4, lsl #14
    2ecc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2ed0:	00006d07 	andeq	r6, r0, r7, lsl #26
    2ed4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2ed8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2edc:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    2ee0:	03000000 	movweq	r0, #0
    2ee4:	00000b46 	andeq	r0, r0, r6, asr #22
    2ee8:	9b1b2803 	blls	6ccefc <__ccfg+0x6acf54>
    2eec:	05000000 	streq	r0, [r0, #-0]
    2ef0:	00000a5c 	andeq	r0, r0, ip, asr sl
    2ef4:	b3000d04 	movwlt	r0, #3332	; 0xd04
    2ef8:	06000000 	streq	r0, [r0], -r0
    2efc:	00000bfc 	strdeq	r0, [r0], -ip
    2f00:	000000b3 	strheq	r0, [r0], -r3
    2f04:	07000100 	streq	r0, [r0, -r0, lsl #2]
    2f08:	0a5e0304 	beq	1783b20 <__ccfg+0x1763b78>
    2f0c:	63030000 	movwvs	r0, #12288	; 0x3000
    2f10:	00008f18 	andeq	r8, r0, r8, lsl pc
    2f14:	03fd0300 	mvnseq	r0, #0, 6
    2f18:	26040000 	strcs	r0, [r4], -r0
    2f1c:	00004112 	andeq	r4, r0, r2, lsl r1
    2f20:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    2f24:	27040000 	strcs	r0, [r4, -r0]
    2f28:	00005412 	andeq	r5, r0, r2, lsl r4
    2f2c:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    2f30:	cd090000 	stcgt	0, cr0, [r9, #-0]
    2f34:	03000000 	movweq	r0, #0
    2f38:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    2f3c:	41122b04 	tstmi	r2, r4, lsl #22
    2f40:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2f44:	000000e3 	andeq	r0, r0, r3, ror #1
    2f48:	0000e308 	andeq	lr, r0, r8, lsl #6
    2f4c:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    2f50:	2c040000 	stccs	0, cr0, [r4], {-0}
    2f54:	00006712 	andeq	r6, r0, r2, lsl r7
    2f58:	00f90800 	rscseq	r0, r9, r0, lsl #16
    2f5c:	a7030000 	strge	r0, [r3, -r0]
    2f60:	04000002 	streq	r0, [r0], #-2
    2f64:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    2f68:	62030000 	andvs	r0, r3, #0
    2f6c:	04000007 	streq	r0, [r0], #-7
    2f70:	0122102e 			; <UNDEFINED> instruction: 0x0122102e
    2f74:	040a0000 	streq	r0, [sl], #-0
    2f78:	000000cd 	andeq	r0, r0, sp, asr #1
    2f7c:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    2f80:	0001b609 	andeq	fp, r1, r9, lsl #12
    2f84:	02c20c00 	sbceq	r0, r2, #0, 24
    2f88:	34040000 	strcc	r0, [r4], #-0
    2f8c:	0000e307 	andeq	lr, r0, r7, lsl #6
    2f90:	07010100 	streq	r0, [r1, -r0, lsl #2]
    2f94:	00910c00 	addseq	r0, r1, r0, lsl #24
    2f98:	35040000 	strcc	r0, [r4, #-0]
    2f9c:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fa0:	06010100 	streq	r0, [r1], -r0, lsl #2
    2fa4:	02990c00 	addseq	r0, r9, #0, 24
    2fa8:	36040000 	strcc	r0, [r4], -r0
    2fac:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fb0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fb4:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    2fb8:	37040000 	strcc	r0, [r4, -r0]
    2fbc:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fc0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    2fc4:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    2fc8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    2fcc:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fd0:	00040100 	andeq	r0, r4, r0, lsl #2
    2fd4:	03f60d00 	mvnseq	r0, #0, 26
    2fd8:	3a040000 	bcc	102fe0 <__ccfg+0xe3038>
    2fdc:	0000e307 	andeq	lr, r0, r7, lsl #6
    2fe0:	400d0100 	andmi	r0, sp, r0, lsl #2
    2fe4:	04000000 	streq	r0, [r0], #-0
    2fe8:	00e3033c 	rsceq	r0, r3, ip, lsr r3
    2fec:	0d020000 	stceq	0, cr0, [r2, #-0]
    2ff0:	00000066 	andeq	r0, r0, r6, rrx
    2ff4:	e3033d04 	movw	r3, #15620	; 0x3d04
    2ff8:	03000000 	movweq	r0, #0
    2ffc:	0001540d 	andeq	r5, r1, sp, lsl #8
    3000:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    3004:	000000f9 	strdeq	r0, [r0], -r9
    3008:	34030004 	strcc	r0, [r3], #-4
    300c:	04000004 	streq	r0, [r0], #-4
    3010:	01280341 			; <UNDEFINED> instruction: 0x01280341
    3014:	b6090000 	strlt	r0, [r9], -r0
    3018:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    301c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    3020:	c21a4304 	andsgt	r4, sl, #4, 6	; 0x10000000
    3024:	01000001 	tsteq	r0, r1
    3028:	030d0e01 	movweq	r0, #56833	; 0xde01
    302c:	45040000 	strmi	r0, [r4, #-0]
    3030:	0001e30e 	andeq	lr, r1, lr, lsl #6
    3034:	0a010100 	beq	4343c <__ccfg+0x23494>
    3038:	0001e904 	andeq	lr, r1, r4, lsl #18
    303c:	08010200 	stmdaeq	r1, {r9}
    3040:	000003aa 	andeq	r0, r0, sl, lsr #7
    3044:	0001e908 	andeq	lr, r1, r8, lsl #18
    3048:	031b0e00 	tsteq	fp, #0, 28
    304c:	45040000 	strmi	r0, [r4, #-0]
    3050:	0001e31e 	andeq	lr, r1, lr, lsl r3
    3054:	0b010100 	bleq	4345c <__ccfg+0x234b4>
    3058:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    305c:	00000234 	andeq	r0, r0, r4, lsr r2
    3060:	0002d20d 	andeq	sp, r2, sp, lsl #4
    3064:	0b900500 	bleq	fe40446c <_estack+0xde3ff46c>
    3068:	00000067 	andeq	r0, r0, r7, rrx
    306c:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
    3070:	91050000 	mrsls	r0, (UNDEF: 5)
    3074:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3078:	710d0400 	tstvc	sp, r0, lsl #8
    307c:	05000004 	streq	r0, [r0, #-4]
    3080:	00ef1092 	smlaleq	r1, pc, r2, r0	; <UNPREDICTABLE>
    3084:	00060000 	andeq	r0, r6, r0
    3088:	00041303 	andeq	r1, r4, r3, lsl #6
    308c:	03930500 	orrseq	r0, r3, #0, 10
    3090:	00000203 	andeq	r0, r0, r3, lsl #4
    3094:	0002340f 	andeq	r3, r2, pc, lsl #8
    3098:	00024b00 	andeq	r4, r2, r0, lsl #22
    309c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    30a0:	00000036 	andeq	r0, r0, r6, lsr r0
    30a4:	400f9905 	andmi	r9, pc, r5, lsl #18
    30a8:	01000002 	tsteq	r0, r2
    30ac:	f4040a01 	vst1.8	{d0-d1}, [r4], r1
    30b0:	0b000000 	bleq	30b8 <__exidx_end+0x434>
    30b4:	09910601 	ldmibeq	r1, {r0, r9, sl}
    30b8:	00000289 	andeq	r0, r0, r9, lsl #5
    30bc:	0004640c 	andeq	r6, r4, ip, lsl #8
    30c0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    30c4:	000000e3 	andeq	r0, r0, r3, ror #1
    30c8:	00010701 	andeq	r0, r1, r1, lsl #14
    30cc:	0000310c 	andeq	r3, r0, ip, lsl #2
    30d0:	03940600 	orrseq	r0, r4, #0, 12
    30d4:	000000e3 	andeq	r0, r0, r3, ror #1
    30d8:	00000101 	andeq	r0, r0, r1, lsl #2
    30dc:	02840300 	addeq	r0, r4, #0, 6
    30e0:	96060000 	strls	r0, [r6], -r0
    30e4:	00025f03 	andeq	r5, r2, r3, lsl #30
    30e8:	02890800 	addeq	r0, r9, #0, 16
    30ec:	950f0000 	strls	r0, [pc, #-0]	; 30f4 <__exidx_end+0x470>
    30f0:	a5000002 	strge	r0, [r0, #-2]
    30f4:	10000002 	andne	r0, r0, r2
    30f8:	029a0800 	addseq	r0, sl, #0, 16
    30fc:	ed0e0000 	stc	0, cr0, [lr, #-0]
    3100:	06000002 	streq	r0, [r0], -r2
    3104:	02a5179c 	adceq	r1, r5, #156, 14	; 0x2700000
    3108:	01010000 	mrseq	r0, (UNDEF: 1)
    310c:	0000d90f 	andeq	sp, r0, pc, lsl #18
    3110:	0002c300 	andeq	ip, r2, r0, lsl #6
    3114:	08001000 	stmdaeq	r0, {ip}
    3118:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    311c:	0003930e 	andeq	r9, r3, lr, lsl #6
    3120:	13060700 	movwne	r0, #26368	; 0x6700
    3124:	000002c3 	andeq	r0, r0, r3, asr #5
    3128:	340e0101 	strcc	r0, [lr], #-257	; 0xfffffeff
    312c:	05000001 	streq	r0, [r0, #-1]
    3130:	00f90ec3 	rscseq	r0, r9, r3, asr #29
    3134:	01010000 	mrseq	r0, (UNDEF: 1)
    3138:	00047e11 	andeq	r7, r4, r1, lsl lr
    313c:	016e0800 	cmneq	lr, r0, lsl #16
    3140:	0002f110 	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
    3144:	f7040a00 			; <UNDEFINED> instruction: 0xf7040a00
    3148:	12000002 	andne	r0, r0, #2
    314c:	00030301 	andeq	r0, r3, r1, lsl #6
    3150:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    3154:	0f000000 	svceq	0x00000000
    3158:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    315c:	0000030e 	andeq	r0, r0, lr, lsl #6
    3160:	03080010 	movweq	r0, #32784	; 0x8010
    3164:	14000003 	strne	r0, [r0], #-3
    3168:	00000444 	andeq	r0, r0, r4, asr #8
    316c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    3170:	0000030e 	andeq	r0, r0, lr, lsl #6
    3174:	8b140101 	blhi	503580 <__ccfg+0x4e35d8>
    3178:	08000003 	stmdaeq	r0, {r0, r1}
    317c:	05140182 	ldreq	r0, [r4, #-386]	; 0xfffffe7e
    3180:	01000001 	tsteq	r0, r1
    3184:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    3188:	03550908 	cmpeq	r5, #8, 18	; 0x20000
    318c:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    3190:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3194:	00cd070f 	sbceq	r0, sp, pc, lsl #14
    3198:	0d000000 	stceq	0, cr0, [r0, #-0]
    319c:	00000e3c 	andeq	r0, r0, ip, lsr lr
    31a0:	cd031009 	stcgt	0, cr1, [r3, #-36]	; 0xffffffdc
    31a4:	02000000 	andeq	r0, r0, #0
    31a8:	0eac0300 	cdpeq	3, 10, cr0, cr12, cr0, {0}
    31ac:	11090000 	mrsne	r0, (UNDEF: 9)
    31b0:	00033103 	andeq	r3, r3, r3, lsl #2
    31b4:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    31b8:	03d30916 	bicseq	r0, r3, #360448	; 0x58000
    31bc:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    31c0:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    31c4:	03ed0817 	mvneq	r0, #1507328	; 0x170000
    31c8:	0d000000 	stceq	0, cr0, [r0, #-0]
    31cc:	00000da4 	andeq	r0, r0, r4, lsr #27
    31d0:	08081809 	stmdaeq	r8, {r0, r3, fp, ip}
    31d4:	04000004 	streq	r0, [r0], #-4
    31d8:	000e0c0d 	andeq	r0, lr, sp, lsl #24
    31dc:	08190900 	ldmdaeq	r9, {r8, fp}
    31e0:	0000043e 	andeq	r0, r0, lr, lsr r4
    31e4:	0e5a0d08 	cdpeq	13, 5, cr0, cr10, cr8, {0}
    31e8:	1a090000 	bne	2431f0 <__ccfg+0x223248>
    31ec:	00045908 	andeq	r5, r4, r8, lsl #18
    31f0:	cb0d0c00 	blgt	3461f8 <__ccfg+0x326250>
    31f4:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    31f8:	046f081b 	strbteq	r0, [pc], #-2075	; 3200 <__exidx_end+0x57c>
    31fc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    3200:	00000ea4 	andeq	r0, r0, r4, lsr #29
    3204:	6f081c09 	svcvs	0x00081c09
    3208:	14000004 	strne	r0, [r0], #-4
    320c:	000de30d 	andeq	lr, sp, sp, lsl #6
    3210:	081d0900 	ldmdaeq	sp, {r8, fp}
    3214:	0000046f 	andeq	r0, r0, pc, ror #8
    3218:	0d160d18 	ldceq	13, cr0, [r6, #-96]	; 0xffffffa0
    321c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    3220:	00008106 	andeq	r8, r0, r6, lsl #2
    3224:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    3228:	00008101 	andeq	r8, r0, r1, lsl #2
    322c:	0003ed00 	andeq	lr, r3, r0, lsl #26
    3230:	00811300 	addeq	r1, r1, r0, lsl #6
    3234:	81130000 	tsthi	r3, r0
    3238:	13000000 	movwne	r0, #0
    323c:	000000b5 	strheq	r0, [r0], -r5
    3240:	d3040a00 	movwle	r0, #18944	; 0x4a00
    3244:	15000003 	strne	r0, [r0, #-3]
    3248:	00008101 	andeq	r8, r0, r1, lsl #2
    324c:	00040800 	andeq	r0, r4, r0, lsl #16
    3250:	00811300 	addeq	r1, r1, r0, lsl #6
    3254:	81130000 	tsthi	r3, r0
    3258:	00000000 	andeq	r0, r0, r0
    325c:	03f3040a 	mvnseq	r0, #167772160	; 0xa000000
    3260:	01150000 	tsteq	r5, r0
    3264:	00000081 	andeq	r0, r0, r1, lsl #1
    3268:	00000432 	andeq	r0, r0, r2, lsr r4
    326c:	00008113 	andeq	r8, r0, r3, lsl r1
    3270:	01161300 	tsteq	r6, r0, lsl #6
    3274:	81130000 	tsthi	r3, r0
    3278:	13000000 	movwne	r0, #0
    327c:	00000432 	andeq	r0, r0, r2, lsr r4
    3280:	00043813 	andeq	r3, r4, r3, lsl r8
    3284:	040a0000 	streq	r0, [sl], #-0
    3288:	00000081 	andeq	r0, r0, r1, lsl #1
    328c:	0355040a 	cmpeq	r5, #167772160	; 0xa000000
    3290:	040a0000 	streq	r0, [sl], #-0
    3294:	0000040e 	andeq	r0, r0, lr, lsl #8
    3298:	00810115 	addeq	r0, r1, r5, lsl r1
    329c:	04590000 	ldrbeq	r0, [r9], #-0
    32a0:	16130000 	ldrne	r0, [r3], -r0
    32a4:	13000001 	movwne	r0, #1
    32a8:	00000438 	andeq	r0, r0, r8, lsr r4
    32ac:	44040a00 	strmi	r0, [r4], #-2560	; 0xfffff600
    32b0:	15000004 	strne	r0, [r0, #-4]
    32b4:	00008101 	andeq	r8, r0, r1, lsl #2
    32b8:	00046f00 	andeq	r6, r4, r0, lsl #30
    32bc:	01161300 	tsteq	r6, r0, lsl #6
    32c0:	0a000000 	beq	32c8 <__exidx_end+0x644>
    32c4:	00045f04 	andeq	r5, r4, r4, lsl #30
    32c8:	0d010300 	stceq	3, cr0, [r1, #-0]
    32cc:	1f090000 	svcne	0x00090000
    32d0:	00036103 	andeq	r6, r3, r3, lsl #2
    32d4:	04750800 	ldrbteq	r0, [r5], #-2048	; 0xfffff800
    32d8:	61160000 	tstvs	r6, r0
    32dc:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    32e0:	ae082409 	cdpge	4, 0, cr2, cr8, cr9, {0}
    32e4:	0d000004 	stceq	0, cr0, [r0, #-16]
    32e8:	00000cf2 	strdeq	r0, [r0], -r2
    32ec:	ae182509 	cfmul32ge	mvfx2, mvfx8, mvfx9
    32f0:	00000004 	andeq	r0, r0, r4
    32f4:	000c750d 	andeq	r7, ip, sp, lsl #10
    32f8:	06260900 	strteq	r0, [r6], -r0, lsl #18
    32fc:	000004ae 	andeq	r0, r0, lr, lsr #9
    3300:	040a0004 	streq	r0, [sl], #-4
    3304:	00000486 	andeq	r0, r0, r6, lsl #9
    3308:	000d6f03 	andeq	r6, sp, r3, lsl #30
    330c:	1e290900 	vmulne.f16	s0, s18, s0	; <UNPREDICTABLE>
    3310:	00000486 	andeq	r0, r0, r6, lsl #9
    3314:	000ece03 	andeq	ip, lr, r3, lsl #28
    3318:	1e2a0900 	vmulne.f16	s0, s20, s0	; <UNPREDICTABLE>
    331c:	00000486 	andeq	r0, r0, r6, lsl #9
    3320:	3f09020b 	svccc	0x0009020b
    3324:	00053602 	andeq	r3, r5, r2, lsl #12
    3328:	0e410c00 	cdpeq	12, 4, cr0, cr1, cr0, {0}
    332c:	40090000 	andmi	r0, r9, r0
    3330:	0000cd09 	andeq	ip, r0, r9, lsl #26
    3334:	0f010200 	svceq	0x00010200
    3338:	0f200c00 	svceq	0x00200c00
    333c:	41090000 	mrsmi	r0, (UNDEF: 9)
    3340:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3344:	0e010200 	cdpeq	2, 0, cr0, cr1, cr0, {0}
    3348:	0d910c00 	ldceq	12, cr0, [r1]
    334c:	42090000 	andmi	r0, r9, #0
    3350:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3354:	0d010200 	sfmeq	f0, 4, [r1, #-0]
    3358:	0e620c00 	cdpeq	12, 6, cr0, cr2, cr0, {0}
    335c:	43090000 	movwmi	r0, #36864	; 0x9000
    3360:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3364:	06070200 	streq	r0, [r7], -r0, lsl #4
    3368:	0edc0c00 	cdpeq	12, 13, cr0, cr12, cr0, {0}
    336c:	44090000 	strmi	r0, [r9], #-0
    3370:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3374:	03030200 	movweq	r0, #12800	; 0x3200
    3378:	0e2e0c00 	cdpeq	12, 2, cr0, cr14, cr0, {0}
    337c:	45090000 	strmi	r0, [r9, #-0]
    3380:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3384:	00030200 	andeq	r0, r3, r0, lsl #4
    3388:	02170000 	andseq	r0, r7, #0
    338c:	56093d09 	strpl	r3, [r9], -r9, lsl #26
    3390:	18000005 	stmdane	r0, {r0, r2}
    3394:	00000d98 	muleq	r0, r8, sp
    3398:	cd073e09 	stcgt	14, cr3, [r7, #-36]	; 0xffffffdc
    339c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    33a0:	46090062 	strmi	r0, [r9], -r2, rrx
    33a4:	0004cc04 	andeq	ip, r4, r4, lsl #24
    33a8:	7a030000 	bvc	c33b0 <__ccfg+0xa3408>
    33ac:	0900000c 	stmdbeq	r0, {r2, r3}
    33b0:	05360347 	ldreq	r0, [r6, #-839]!	; 0xfffffcb9
    33b4:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    33b8:	84055009 	strhi	r5, [r5], #-9
    33bc:	18000005 	stmdane	r0, {r0, r2}
    33c0:	00000f02 	andeq	r0, r0, r2, lsl #30
    33c4:	b4105109 	ldrlt	r5, [r0], #-265	; 0xfffffef7
    33c8:	18000004 	stmdane	r0, {r2}
    33cc:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    33d0:	550b5209 	strpl	r5, [fp, #-521]	; 0xfffffdf7
    33d4:	00000003 	andeq	r0, r0, r3
    33d8:	000f1116 	andeq	r1, pc, r6, lsl r1	; <UNPREDICTABLE>
    33dc:	4c090c00 	stcmi	12, cr0, [r9], {-0}
    33e0:	0005b708 	andeq	fp, r5, r8, lsl #14
    33e4:	00751a00 	rsbseq	r1, r5, r0, lsl #20
    33e8:	62075809 	andvs	r5, r7, #589824	; 0x90000
    33ec:	00000005 	andeq	r0, r0, r5
    33f0:	000ee30d 	andeq	lr, lr, sp, lsl #6
    33f4:	07630900 	strbeq	r0, [r3, -r0, lsl #18]!
    33f8:	000000cd 	andeq	r0, r0, sp, asr #1
    33fc:	0ec30d08 	cdpeq	13, 12, cr0, cr3, cr8, {0}
    3400:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    3404:	00055610 	andeq	r5, r5, r0, lsl r6
    3408:	03000a00 	movweq	r0, #2560	; 0xa00
    340c:	00000d7d 	andeq	r0, r0, sp, ror sp
    3410:	841f7909 	ldrhi	r7, [pc], #-2313	; 3418 <__exidx_end+0x794>
    3414:	0b000005 	bleq	3430 <__exidx_end+0x7ac>
    3418:	097b090c 	ldmdbeq	fp!, {r2, r3, r8, fp}^
    341c:	000005e7 	andeq	r0, r0, r7, ror #11
    3420:	000ddc0d 	andeq	sp, sp, sp, lsl #24
    3424:	117f0900 	cmnne	pc, r0, lsl #18
    3428:	000004c0 	andeq	r0, r0, r0, asr #9
    342c:	0e910d00 	cdpeq	13, 9, cr0, cr1, cr0, {0}
    3430:	83090000 	movwhi	r0, #36864	; 0x9000
    3434:	00055611 	andeq	r5, r5, r1, lsl r6
    3438:	03000800 	movweq	r0, #2048	; 0x800
    343c:	00000e1e 	andeq	r0, r0, lr, lsl lr
    3440:	c3039209 	movwgt	r9, #12809	; 0x3209
    3444:	14000005 	strne	r0, [r0], #-5
    3448:	00000469 	andeq	r0, r0, r9, ror #8
    344c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    3450:	000000f9 	strdeq	r0, [r0], -r9
    3454:	081b0101 	ldmdaeq	fp, {r0, r8}
    3458:	09030308 	stmdbeq	r3, {r3, r8, r9}
    345c:	00000629 	andeq	r0, r0, r9, lsr #12
    3460:	0021f41c 	eoreq	pc, r1, ip, lsl r4	; <UNPREDICTABLE>
    3464:	03070800 	movweq	r0, #30720	; 0x7800
    3468:	0000cd07 	andeq	ip, r0, r7, lsl #26
    346c:	3f1c0000 	svccc	0x001c0000
    3470:	08000005 	stmdaeq	r0, {r0, r2}
    3474:	0a080308 	beq	20409c <__ccfg+0x1e40f4>
    3478:	04000001 	streq	r0, [r0], #-1
    347c:	02641100 	rsbeq	r1, r4, #0, 2
    3480:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3484:	06020303 	streq	r0, [r2], -r3, lsl #6
    3488:	8d1d0000 	ldchi	0, cr0, [sp, #-0]
    348c:	30000004 	andcc	r0, r0, r4
    3490:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    3494:	00000699 	muleq	r0, r9, r6
    3498:	0004861c 	andeq	r8, r4, ip, lsl r6
    349c:	03140800 	tsteq	r4, #0, 16
    34a0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    34a4:	dc1c0000 	ldcle	0, cr0, [ip], {-0}
    34a8:	08000002 	stmdaeq	r0, {r1}
    34ac:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    34b0:	02000000 	andeq	r0, r0, #0
    34b4:	0004811c 	andeq	r8, r4, ip, lsl r1
    34b8:	03160800 	tsteq	r6, #0, 16
    34bc:	0002e40b 	andeq	lr, r2, fp, lsl #8
    34c0:	3f1c0400 	svccc	0x001c0400
    34c4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    34c8:	0a090317 	beq	24412c <__ccfg+0x224184>
    34cc:	08000001 	stmdaeq	r0, {r0}
    34d0:	00043d1c 	andeq	r3, r4, ip, lsl sp
    34d4:	03180800 	tsteq	r8, #0, 16
    34d8:	0006990f 	andeq	r9, r6, pc, lsl #18
    34dc:	d71c0c00 	ldrle	r0, [ip, -r0, lsl #24]
    34e0:	08000002 	stmdaeq	r0, {r1}
    34e4:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    34e8:	2c000006 	stccs	0, cr0, [r0], {6}
    34ec:	06290f00 	strteq	r0, [r9], -r0, lsl #30
    34f0:	06a90000 	strteq	r0, [r9], r0
    34f4:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    34f8:	03000000 	movweq	r0, #0
    34fc:	36040a00 	strcc	r0, [r4], -r0, lsl #20
    3500:	11000006 	tstne	r0, r6
    3504:	00000498 	muleq	r0, r8, r4
    3508:	1b031c08 	blne	ca530 <__ccfg+0xaa588>
    350c:	00000636 	andeq	r0, r0, r6, lsr r6
    3510:	00038114 	andeq	r8, r3, r4, lsl r1
    3514:	031e0800 	tsteq	lr, #0, 16
    3518:	0006cb14 	andeq	ip, r6, r4, lsl fp
    351c:	0a010100 	beq	43924 <__ccfg+0x2397c>
    3520:	0006af04 	andeq	sl, r6, r4, lsl #30
    3524:	04b10e00 	ldrteq	r0, [r1], #3584	; 0xe00
    3528:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    352c:	0000cd13 	andeq	ip, r0, r3, lsl sp
    3530:	0e010100 	adfeqs	f0, f1, f0
    3534:	0000071b 	andeq	r0, r0, fp, lsl r7
    3538:	de1a1e0a 	cdple	14, 1, cr1, cr10, cr10, {0}
    353c:	01000000 	mrseq	r0, (UNDEF: 0)
    3540:	08ab0e01 	stmiaeq	fp!, {r0, r9, sl, fp}
    3544:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    3548:	0000de24 	andeq	sp, r0, r4, lsr #28
    354c:	0e010100 	adfeqs	f0, f1, f0
    3550:	000005da 	ldrdeq	r0, [r0], -sl
    3554:	cb14220a 	blgt	50bd84 <__ccfg+0x4ebddc>
    3558:	01000006 	tsteq	r0, r6
    355c:	0cf70301 	ldcleq	3, cr0, [r7], #4
    3560:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    3564:	0007150f 	andeq	r1, r7, pc, lsl #10
    3568:	1b040a00 	blne	105d70 <__ccfg+0xe5dc8>
    356c:	15000007 	strne	r0, [r0, #-7]
    3570:	00008101 	andeq	r8, r0, r1, lsl #2
    3574:	00073000 	andeq	r3, r7, r0
    3578:	00811300 	addeq	r1, r1, r0, lsl #6
    357c:	16130000 	ldrne	r0, [r3], -r0
    3580:	00000001 	andeq	r0, r0, r1
    3584:	0007400f 	andeq	r4, r7, pc
    3588:	00074000 	andeq	r4, r7, r0
    358c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3590:	00070000 	andeq	r0, r7, r0
    3594:	05e7040a 	strbeq	r0, [r7, #1034]!	; 0x40a
    3598:	ac1f0000 	ldcge	0, cr0, [pc], {-0}
    359c:	0c00000d 	stceq	0, cr0, [r0], {13}
    35a0:	0730150d 	ldreq	r1, [r0, -sp, lsl #10]!
    35a4:	03050000 	movweq	r0, #20480	; 0x5000
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	0007090f 	andeq	r0, r7, pc, lsl #18
    35b0:	00076800 	andeq	r6, r7, r0, lsl #16
    35b4:	00881e00 	addeq	r1, r8, r0, lsl #28
    35b8:	00020000 	andeq	r0, r2, r0
    35bc:	000e331f 	andeq	r3, lr, pc, lsl r3
    35c0:	14130c00 	ldrne	r0, [r3], #-3072	; 0xfffff400
    35c4:	00000758 	andeq	r0, r0, r8, asr r7
    35c8:	00000305 	andeq	r0, r0, r5, lsl #6
    35cc:	8a0f0000 	bhi	3c35d4 <__ccfg+0x3a362c>
    35d0:	8a000007 	bhi	35f4 <__exidx_end+0x970>
    35d4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    35d8:	00000088 	andeq	r0, r0, r8, lsl #1
    35dc:	040a0002 	streq	r0, [sl], #-2
    35e0:	000004c0 	andeq	r0, r0, r0, asr #9
    35e4:	000d591f 	andeq	r5, sp, pc, lsl r9
    35e8:	13190c00 	tstne	r9, #0, 24
    35ec:	0000077a 	andeq	r0, r0, sl, ror r7
    35f0:	00000305 	andeq	r0, r0, r5, lsl #6
    35f4:	810f0000 	mrshi	r0, CPSR
    35f8:	b2000000 	andlt	r0, r0, #0
    35fc:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3600:	00000088 	andeq	r0, r0, r8, lsl #1
    3604:	311f0002 	tstcc	pc, r2
    3608:	0c00000d 	stceq	0, cr0, [r0], {13}
    360c:	07a20f1e 			; <UNDEFINED> instruction: 0x07a20f1e
    3610:	03050000 	movweq	r0, #20480	; 0x5000
    3614:	00000000 	andeq	r0, r0, r0
    3618:	0007d40f 	andeq	sp, r7, pc, lsl #8
    361c:	0007d400 	andeq	sp, r7, r0, lsl #8
    3620:	00881e00 	addeq	r1, r8, r0, lsl #28
    3624:	00020000 	andeq	r0, r2, r0
    3628:	0481040a 	streq	r0, [r1], #1034	; 0x40a
    362c:	091f0000 	ldmdbeq	pc, {}	; <UNPREDICTABLE>
    3630:	0c00000f 	stceq	0, cr0, [r0], {15}
    3634:	07c41b23 	strbeq	r1, [r4, r3, lsr #22]
    3638:	03050000 	movweq	r0, #20480	; 0x5000
    363c:	00000000 	andeq	r0, r0, r0
    3640:	0e510120 	rdfeqsp	f0, f1, f0
    3644:	0d010000 	stceq	0, cr0, [r1, #-0]
    3648:	f4010105 	vst4.8	{d0,d2,d4,d6}, [r1], r5
    364c:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
    3650:	01000013 	tsteq	r0, r3, lsl r0
    3654:	4001219c 	mulmi	r1, ip, r1
    3658:	0100000d 	tsteq	r0, sp
    365c:	01010505 	tsteq	r1, r5, lsl #10
    3660:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    366c:	08639c01 	stmdaeq	r3!, {r0, sl, fp, ip, pc}^
    3670:	70220000 	eorvc	r0, r2, r0
    3674:	01007968 	tsteq	r0, r8, ror #18
    3678:	812d0505 			; <UNDEFINED> instruction: 0x812d0505
    367c:	bf000000 	svclt	0x00000000
    3680:	23000010 	movwcs	r0, #16
    3684:	0000114e 	andeq	r1, r0, lr, asr #2
    3688:	00000000 	andeq	r0, r0, r0
    368c:	000007f8 	strdeq	r0, [r0], -r8
    3690:	09050a01 	stmdbeq	r5, {r0, r9, fp}
    3694:	00116024 	andseq	r6, r1, r4, lsr #32
    3698:	0010dd00 	andseq	sp, r0, r0, lsl #26
    369c:	07f82500 	ldrbeq	r2, [r8, r0, lsl #10]!
    36a0:	6b260000 	blvs	9836a8 <__ccfg+0x963700>
    36a4:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
    36a8:	26000010 			; <UNDEFINED> instruction: 0x26000010
    36ac:	00001176 	andeq	r1, r0, r6, ror r1
    36b0:	0000110e 	andeq	r1, r0, lr, lsl #2
    36b4:	27000000 	strcs	r0, [r0, -r0]
    36b8:	000e8601 	andeq	r8, lr, r1, lsl #12
    36bc:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    36c0:	00000101 	andeq	r0, r0, r1, lsl #2
    36c4:	00000000 	andeq	r0, r0, r0
    36c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    36cc:	0000089d 	muleq	r0, sp, r8
    36d0:	746b7022 	strbtvc	r7, [fp], #-34	; 0xffffffde
    36d4:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    36d8:	00011630 	andeq	r1, r1, r0, lsr r6
    36dc:	00113800 	andseq	r3, r1, r0, lsl #16
    36e0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    36e4:	0c04fe01 	stceq	14, cr15, [r4], {1}
    36e8:	0000089d 	muleq	r0, sp, r8
    36ec:	00001156 	andeq	r1, r0, r6, asr r1
    36f0:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    36f4:	21000005 	tstcs	r0, r5
    36f8:	000c8801 	andeq	r8, ip, r1, lsl #16
    36fc:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    3700:	01160101 	tsteq	r6, r1, lsl #2
	...
    370c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3710:	000008f1 	strdeq	r0, [r0], -r1
    3714:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3718:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    371c:	0000812f 	andeq	r8, r0, pc, lsr #2
    3720:	00117400 	andseq	r7, r1, r0, lsl #8
    3724:	716f2800 	cmnvc	pc, r0, lsl #16
    3728:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    372c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3730:	00119200 	andseq	r9, r1, r0, lsl #4
    3734:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3738:	0c04ee01 	stceq	14, cr14, [r4], {1}
    373c:	0000089d 	muleq	r0, sp, r8
    3740:	000011a5 	andeq	r1, r0, r5, lsr #3
    3744:	0b012100 	bleq	4bb4c <__ccfg+0x2bba4>
    3748:	0100000d 	tsteq	r0, sp
    374c:	010104d2 	ldrdeq	r0, [r1, -r2]
    3750:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    375c:	09509c01 	ldmdbeq	r0, {r0, sl, fp, ip, pc}^
    3760:	70220000 	eorvc	r0, r2, r0
    3764:	01007968 	tsteq	r0, r8, ror #18
    3768:	812f04d2 	ldrdhi	r0, [pc, -r2]!
    376c:	c4000000 	strgt	r0, [r0], #-0
    3770:	22000011 	andcs	r0, r0, #17
    3774:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3778:	3904d201 	stmdbcc	r4, {r0, r9, ip, lr, pc}
    377c:	00000432 	andeq	r0, r0, r2, lsr r4
    3780:	000011e2 	andeq	r1, r0, r2, ror #3
    3784:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    3788:	0b04d701 	bleq	139394 <__ccfg+0x1193ec>
    378c:	0000078a 	andeq	r0, r0, sl, lsl #15
    3790:	00001200 	andeq	r1, r0, r0, lsl #4
    3794:	01006228 	tsteq	r0, r8, lsr #4
    3798:	9d0c04d8 	cfstrsls	mvf0, [ip, #-864]	; 0xfffffca0
    379c:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    37a0:	00000012 	andeq	r0, r0, r2, lsl r0
    37a4:	0ef70121 	cdpeq	1, 15, cr0, cr7, cr1, {1}
    37a8:	a1010000 	mrsge	r0, (UNDEF: 1)
    37ac:	81010104 	tsthi	r1, r4, lsl #2
	...
    37b8:	01000000 	mrseq	r0, (UNDEF: 0)
    37bc:	0009eb9c 	muleq	r9, ip, fp
    37c0:	68702200 	ldmdavs	r0!, {r9, sp}^
    37c4:	a1010079 	tstge	r1, r9, ror r0
    37c8:	00812b04 	addeq	r2, r1, r4, lsl #22
    37cc:	12480000 	subne	r0, r8, #0
    37d0:	70220000 	eorvc	r0, r2, r0
    37d4:	04a10100 	strteq	r0, [r1], #256	; 0x100
    37d8:	00011638 	andeq	r1, r1, r8, lsr r6
    37dc:	00127c00 	andseq	r7, r2, r0, lsl #24
    37e0:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    37e4:	a101006e 	tstge	r1, lr, rrx
    37e8:	00813f04 	addeq	r3, r1, r4, lsl #30
    37ec:	12b00000 	adcsne	r0, r0, #0
    37f0:	70290000 	eorvc	r0, r9, r0
    37f4:	0100676c 	tsteq	r0, ip, ror #14
    37f8:	810604a6 	smlatbhi	r6, r6, r4, r0
    37fc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3800:	00707364 	rsbseq	r7, r0, r4, ror #6
    3804:	0b04a601 	bleq	12d010 <__ccfg+0x10d068>
    3808:	00000081 	andeq	r0, r0, r1, lsl #1
    380c:	000012e4 	andeq	r1, r0, r4, ror #5
    3810:	7365732a 	cmnvc	r5, #-1476395008	; 0xa8000000
    3814:	04a60100 	strteq	r0, [r6], #256	; 0x100
    3818:	00008110 	andeq	r8, r0, r0, lsl r1
    381c:	50910200 	addspl	r0, r1, r0, lsl #4
    3820:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    3824:	0b04a701 	bleq	12d430 <__ccfg+0x10d488>
    3828:	00000355 	andeq	r0, r0, r5, asr r3
    382c:	28549102 	ldmdacs	r4, {r1, r8, ip, pc}^
    3830:	a8010063 	stmdage	r1, {r0, r1, r5, r6}
    3834:	01160a04 	tsteq	r6, r4, lsl #20
    3838:	13020000 	movwne	r0, #8192	; 0x2000
    383c:	21000000 	mrscs	r0, (UNDEF: 0)
    3840:	000ce701 	andeq	lr, ip, r1, lsl #14
    3844:	04870100 	streq	r0, [r7], #256	; 0x100
    3848:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3854:	9c010000 	stcls	0, cr0, [r1], {-0}
    3858:	00000a4a 	andeq	r0, r0, sl, asr #20
    385c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3860:	04870100 	streq	r0, [r7], #256	; 0x100
    3864:	0000812b 	andeq	r8, r0, fp, lsr #2
    3868:	00131500 	andseq	r1, r3, r0, lsl #10
    386c:	73702200 	cmnvc	r0, #0, 4
    3870:	04870100 	streq	r0, [r7], #256	; 0x100
    3874:	0007093a 	andeq	r0, r7, sl, lsr r9
    3878:	00133300 	andseq	r3, r3, r0, lsl #6
    387c:	0d1a2b00 	vldreq	d2, [sl, #-0]
    3880:	87010000 	strhi	r0, [r1, -r0]
    3884:	00814204 	addeq	r4, r1, r4, lsl #4
    3888:	13510000 	cmpne	r1, #0
    388c:	71280000 			; <UNDEFINED> instruction: 0x71280000
    3890:	048d0100 	streq	r0, [sp], #256	; 0x100
    3894:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3898:	00136f00 	andseq	r6, r3, r0, lsl #30
    389c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    38a0:	00000dd3 	ldrdeq	r0, [r0], -r3
    38a4:	01038601 	tsteq	r3, r1, lsl #12
    38a8:	00011601 	andeq	r1, r1, r1, lsl #12
    38ac:	0a910100 	beq	fe443cb4 <_estack+0xde43ecb4>
    38b0:	972d0000 	strls	r0, [sp, -r0]!
    38b4:	01000013 	tsteq	r0, r3, lsl r0
    38b8:	812d0386 	smlawbhi	sp, r6, r3, r0
    38bc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    38c0:	00707364 	rsbseq	r7, r0, r4, ror #6
    38c4:	37038601 	strcc	r8, [r3, -r1, lsl #12]
    38c8:	00000081 	andeq	r0, r0, r1, lsl #1
    38cc:	7365732e 	cmnvc	r5, #-1207959552	; 0xb8000000
    38d0:	03860100 	orreq	r0, r6, #0, 2
    38d4:	00008140 	andeq	r8, r0, r0, asr #2
    38d8:	00702900 	rsbseq	r2, r0, r0, lsl #18
    38dc:	0c038a01 			; <UNDEFINED> instruction: 0x0c038a01
    38e0:	0000089d 	muleq	r0, sp, r8
    38e4:	da012700 	ble	4d4ec <__ccfg+0x2d544>
    38e8:	0100000c 	tsteq	r0, ip
    38ec:	0101037f 	tsteq	r1, pc, ror r3
	...
    38f8:	0acb9c01 	beq	ff2ea904 <_estack+0xdf2e5904>
    38fc:	70220000 	eorvc	r0, r2, r0
    3900:	037f0100 	cmneq	pc, #0, 2
    3904:	00011632 	andeq	r1, r1, r2, lsr r6
    3908:	00139e00 	andseq	r9, r3, r0, lsl #28
    390c:	73642200 	cmnvc	r4, #0, 4
    3910:	7f010070 	svcvc	0x00010070
    3914:	00813903 	addeq	r3, r1, r3, lsl #18
    3918:	13b10000 			; <UNDEFINED> instruction: 0x13b10000
    391c:	21000000 	mrscs	r0, (UNDEF: 0)
    3920:	000e6a01 	andeq	r6, lr, r1, lsl #20
    3924:	036b0100 	cmneq	fp, #0, 2
    3928:	01160101 	tsteq	r6, r1, lsl #2
	...
    3934:	9c010000 	stcls	0, cr0, [r1], {-0}
    3938:	00000b25 	andeq	r0, r0, r5, lsr #22
    393c:	01007022 	tsteq	r0, r2, lsr #32
    3940:	1633036b 	ldrtne	r0, [r3], -fp, ror #6
    3944:	c4000001 	strgt	r0, [r0], #-1
    3948:	2b000013 	blcs	399c <__exidx_end+0xd18>
    394c:	00000eea 	andeq	r0, r0, sl, ror #29
    3950:	3a036b01 	bcc	de55c <__ccfg+0xbe5b4>
    3954:	00000081 	andeq	r0, r0, r1, lsl #1
    3958:	000013e2 	andeq	r1, r0, r2, ror #7
    395c:	00637028 	rsbeq	r7, r3, r8, lsr #32
    3960:	0c036f01 	stceq	15, cr6, [r3], {1}
    3964:	0000089d 	muleq	r0, sp, r8
    3968:	00001400 	andeq	r1, r0, r0, lsl #8
    396c:	00707029 	rsbseq	r7, r0, r9, lsr #32
    3970:	11036f01 	tstne	r3, r1, lsl #30
    3974:	0000089d 	muleq	r0, sp, r8
    3978:	4d012700 	stcmi	7, cr2, [r1, #-0]
    397c:	0100000d 	tsteq	r0, sp
    3980:	01010363 	tsteq	r1, r3, ror #6
	...
    398c:	0b5f9c01 	bleq	17ea998 <__ccfg+0x17ca9f0>
    3990:	70220000 	eorvc	r0, r2, r0
    3994:	03630100 	cmneq	r3, #0, 2
    3998:	00011631 	andeq	r1, r1, r1, lsr r6
    399c:	00141e00 	andseq	r1, r4, r0, lsl #28
    39a0:	68702200 	ldmdavs	r0!, {r9, sp}^
    39a4:	63010079 	movwvs	r0, #4217	; 0x1079
    39a8:	00813803 	addeq	r3, r1, r3, lsl #16
    39ac:	143c0000 	ldrtne	r0, [ip], #-0
    39b0:	27000000 	strcs	r0, [r0, -r0]
    39b4:	000e7501 	andeq	r7, lr, r1, lsl #10
    39b8:	035a0100 	cmpeq	sl, #0, 2
    39bc:	00000101 	andeq	r0, r0, r1, lsl #2
    39c0:	00000000 	andeq	r0, r0, r0
    39c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39c8:	00000b99 	muleq	r0, r9, fp
    39cc:	01007022 	tsteq	r0, r2, lsr #32
    39d0:	1631035a 			; <UNDEFINED> instruction: 0x1631035a
    39d4:	5a000001 	bpl	39e0 <__exidx_end+0xd5c>
    39d8:	22000014 	andcs	r0, r0, #20
    39dc:	00736573 	rsbseq	r6, r3, r3, ror r5
    39e0:	38035a01 	stmdacc	r3, {r0, r9, fp, ip, lr}
    39e4:	00000081 	andeq	r0, r0, r1, lsl #1
    39e8:	00001478 	andeq	r1, r0, r8, ror r4
    39ec:	29012c00 	stmdbcs	r1, {sl, fp, sp}
    39f0:	0100000f 	tsteq	r0, pc
    39f4:	01010352 	tsteq	r1, r2, asr r3
    39f8:	00000081 	andeq	r0, r0, r1, lsl #1
    39fc:	000bd501 	andeq	sp, fp, r1, lsl #10
    3a00:	68702e00 	ldmdavs	r0!, {r9, sl, fp, sp}^
    3a04:	52010079 	andpl	r0, r1, #121	; 0x79
    3a08:	00812d03 	addeq	r2, r1, r3, lsl #26
    3a0c:	6f2e0000 	svcvs	0x002e0000
    3a10:	01007470 	tsteq	r0, r0, ror r4
    3a14:	81360352 	teqhi	r6, r2, asr r3
    3a18:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3a1c:	00677261 	rsbeq	r7, r7, r1, ror #4
    3a20:	43035201 	movwmi	r5, #12801	; 0x3201
    3a24:	00000116 	andeq	r0, r0, r6, lsl r1
    3a28:	93012100 	movwls	r2, #4352	; 0x1100
    3a2c:	0100000c 	tsteq	r0, ip
    3a30:	01010333 	tsteq	r1, r3, lsr r3
    3a34:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3a40:	0c3e9c01 	ldceq	12, cr9, [lr], #-4
    3a44:	66220000 	strtvs	r0, [r2], -r0
    3a48:	33010064 	movwcc	r0, #4196	; 0x1064
    3a4c:	00812c03 	addeq	r2, r1, r3, lsl #24
    3a50:	14960000 	ldrne	r0, [r6], #0
    3a54:	6f220000 	svcvs	0x00220000
    3a58:	01007470 	tsteq	r0, r0, ror r4
    3a5c:	81340333 	teqhi	r4, r3, lsr r3
    3a60:	d5000000 	strle	r0, [r0, #-0]
    3a64:	22000014 	andcs	r0, r0, #20
    3a68:	00677261 	rsbeq	r7, r7, r1, ror #4
    3a6c:	41033301 	tstmi	r3, r1, lsl #6
    3a70:	00000116 	andeq	r0, r0, r6, lsl r1
    3a74:	000014fe 	strdeq	r1, [r0], -lr
    3a78:	0000002f 	andeq	r0, r0, pc, lsr #32
    3a7c:	00000000 	andeq	r0, r0, r0
    3a80:	00702800 	rsbseq	r2, r0, r0, lsl #16
    3a84:	15033c01 	strne	r3, [r3, #-3073]	; 0xfffff3ff
    3a88:	000007d4 	ldrdeq	r0, [r0], -r4
    3a8c:	00001527 	andeq	r1, r0, r7, lsr #10
    3a90:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3a94:	00000d28 	andeq	r0, r0, r8, lsr #26
    3a98:	01032b01 	tsteq	r3, r1, lsl #22
    3a9c:	00000001 	andeq	r0, r0, r1
    3aa0:	00000000 	andeq	r0, r0, r0
    3aa4:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    3aa8:	2200000c 	andcs	r0, r0, #12
    3aac:	2b010070 	blcs	43c74 <__ccfg+0x23ccc>
    3ab0:	01162e03 	tsteq	r6, r3, lsl #28
    3ab4:	153a0000 	ldrne	r0, [sl, #-0]!
    3ab8:	21000000 	mrscs	r0, (UNDEF: 0)
    3abc:	000e0201 	andeq	r0, lr, r1, lsl #4
    3ac0:	031a0100 	tsteq	sl, #0, 2
    3ac4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ad4:	00000cc1 	andeq	r0, r0, r1, asr #25
    3ad8:	01007022 	tsteq	r0, r2, lsr #32
    3adc:	162e031a 			; <UNDEFINED> instruction: 0x162e031a
    3ae0:	58000001 	stmdapl	r0, {r0}
    3ae4:	22000015 	andcs	r0, r0, #21
    3ae8:	00667562 	rsbeq	r7, r6, r2, ror #10
    3aec:	3d031a01 	vstrcc	s2, [r3, #-4]
    3af0:	00000259 	andeq	r0, r0, r9, asr r2
    3af4:	00001576 	andeq	r1, r0, r6, ror r5
    3af8:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3afc:	031a0100 	tsteq	sl, #0, 2
    3b00:	00008146 	andeq	r8, r0, r6, asr #2
    3b04:	00158900 	andseq	r8, r5, r0, lsl #18
    3b08:	00622900 	rsbeq	r2, r2, r0, lsl #18
    3b0c:	0c031e01 	stceq	14, cr1, [r3], {1}
    3b10:	0000089d 	muleq	r0, sp, r8
    3b14:	48012100 	stmdami	r1, {r8, sp}
    3b18:	0100000e 	tsteq	r0, lr
    3b1c:	01010308 	tsteq	r1, r8, lsl #6
    3b20:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3b2c:	0d1b9c01 	ldceq	12, cr9, [fp, #-4]
    3b30:	70220000 	eorvc	r0, r2, r0
    3b34:	03080100 	movweq	r0, #33024	; 0x8100
    3b38:	0001162d 	andeq	r1, r1, sp, lsr #12
    3b3c:	0015a700 	andseq	sl, r5, r0, lsl #14
    3b40:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    3b44:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    3b48:	0d1b3603 	ldceq	6, cr3, [fp, #-12]
    3b4c:	15c50000 	strbne	r0, [r5]
    3b50:	6c220000 	stcvs	0, cr0, [r2], #-0
    3b54:	01006e65 	tsteq	r0, r5, ror #28
    3b58:	813f0308 	teqhi	pc, r8, lsl #6
    3b5c:	e3000000 	movw	r0, #0
    3b60:	29000015 	stmdbcs	r0, {r0, r2, r4}
    3b64:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    3b68:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3b6c:	0a000000 	beq	3b74 <__exidx_end+0xef0>
    3b70:	0000e304 	andeq	lr, r0, r4, lsl #6
    3b74:	f9012100 			; <UNDEFINED> instruction: 0xf9012100
    3b78:	0100000d 	tsteq	r0, sp
    3b7c:	010102cd 	smlabteq	r1, sp, r2, r0
    3b80:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3b8c:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 3b98 <__exidx_end+0xf14>
    3b90:	812b0000 			; <UNDEFINED> instruction: 0x812b0000
    3b94:	0100000b 	tsteq	r0, fp
    3b98:	cd2e02cd 	sfmgt	f0, 4, [lr, #-820]!	; 0xfffffccc
    3b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    3ba0:	22000016 	andcs	r0, r0, #22
    3ba4:	01006466 	tsteq	r0, r6, ror #8
    3ba8:	813902cd 	teqhi	r9, sp, asr #5
    3bac:	1f000000 	svcne	0x00000000
    3bb0:	2b000016 	blcs	3c10 <__exidx_end+0xf8c>
    3bb4:	00000ee3 	andeq	r0, r0, r3, ror #29
    3bb8:	4102cd01 	tstmi	r2, r1, lsl #26
    3bbc:	00000081 	andeq	r0, r0, r1, lsl #1
    3bc0:	00001648 	andeq	r1, r0, r8, asr #12
    3bc4:	67727522 	ldrbvs	r7, [r2, -r2, lsr #10]!
    3bc8:	02ce0100 	sbceq	r0, lr, #0, 2
    3bcc:	0000c111 	andeq	ip, r0, r1, lsl r1
    3bd0:	00169200 	andseq	r9, r6, r0, lsl #4
    3bd4:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3bd8:	0c02cf01 	stceq	15, cr12, [r2], {1}
    3bdc:	0000089d 	muleq	r0, sp, r8
    3be0:	000016a5 	andeq	r1, r0, r5, lsr #13
    3be4:	000deb30 	andeq	lr, sp, r0, lsr fp
    3be8:	02d00100 	sbcseq	r0, r0, #0, 2
    3bec:	0003550b 	andeq	r5, r3, fp, lsl #10
    3bf0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3bf4:	0100732a 	tsteq	r0, sl, lsr #6
    3bf8:	400d02d1 	ldrdmi	r0, [sp], -r1
    3bfc:	01000007 	tsteq	r0, r7
    3c00:	69652857 	stmdbvs	r5!, {r0, r1, r2, r4, r6, fp, sp}^
    3c04:	d2010064 	andle	r0, r1, #100	; 0x64
    3c08:	00810602 	addeq	r0, r1, r2, lsl #12
    3c0c:	16c30000 	strbne	r0, [r3], r0
    3c10:	21000000 	mrscs	r0, (UNDEF: 0)
    3c14:	000db801 	andeq	fp, sp, r1, lsl #16
    3c18:	02a40100 	adceq	r0, r4, #0, 2
    3c1c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3c28:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c2c:	00000e72 	andeq	r0, r0, r2, ror lr
    3c30:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3c34:	2a02a401 	bcs	acc40 <__ccfg+0x8cc98>
    3c38:	00000081 	andeq	r0, r0, r1, lsl #1
    3c3c:	000016ec 	andeq	r1, r0, ip, ror #13
    3c40:	000eea2b 	andeq	lr, lr, fp, lsr #20
    3c44:	02a40100 	adceq	r0, r4, #0, 2
    3c48:	00008132 	andeq	r8, r0, r2, lsr r1
    3c4c:	00172000 	andseq	r2, r7, r0
    3c50:	00732800 	rsbseq	r2, r3, r0, lsl #16
    3c54:	0d02a801 	stceq	8, cr10, [r2, #-4]
    3c58:	00000740 	andeq	r0, r0, r0, asr #14
    3c5c:	00001754 	andeq	r1, r0, r4, asr r7
    3c60:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    3c64:	0602a901 	streq	sl, [r2], -r1, lsl #18
    3c68:	00000081 	andeq	r0, r0, r1, lsl #1
    3c6c:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    3c70:	00717228 	rsbseq	r7, r1, r8, lsr #4
    3c74:	0b02aa01 	bleq	ae480 <__ccfg+0x8e4d8>
    3c78:	0000078a 	andeq	r0, r0, sl, lsl #15
    3c7c:	000017d7 	ldrdeq	r1, [r0], -r7
    3c80:	01006228 	tsteq	r0, r8, lsr #4
    3c84:	9d0c02ab 	sfmls	f0, 4, [ip, #-684]	; 0xfffffd54
    3c88:	f5000008 			; <UNDEFINED> instruction: 0xf5000008
    3c8c:	31000017 	tstcc	r0, r7, lsl r0
    3c90:	00000d9e 	muleq	r0, lr, sp
    3c94:	0102c001 	tsteq	r2, r1
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	00114e32 	andseq	r4, r1, r2, lsr lr
	...
    3ca8:	02bb0100 	adcseq	r0, fp, #0, 2
    3cac:	1160330a 	cmnne	r0, sl, lsl #6
    3cb0:	6b260000 	blvs	983cb8 <__ccfg+0x963d10>
    3cb4:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    3cb8:	26000018 			; <UNDEFINED> instruction: 0x26000018
    3cbc:	00001176 	andeq	r1, r0, r6, ror r1
    3cc0:	00001831 	andeq	r1, r0, r1, lsr r8
    3cc4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3cc8:	00000c6b 	andeq	r0, r0, fp, ror #24
    3ccc:	01027d01 	tsteq	r2, r1, lsl #26
    3cd0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3cdc:	ef9c0100 	svc	0x009c0100
    3ce0:	2200000e 	andcs	r0, r0, #14
    3ce4:	01006466 	tsteq	r0, r6, ror #8
    3ce8:	812a027d 			; <UNDEFINED> instruction: 0x812a027d
    3cec:	44000000 	strmi	r0, [r0], #-0
    3cf0:	2b000018 	blcs	3d58 <__exidx_end+0x10d4>
    3cf4:	00000eea 	andeq	r0, r0, sl, ror #29
    3cf8:	32027d01 	andcc	r7, r2, #1, 26	; 0x40
    3cfc:	00000081 	andeq	r0, r0, r1, lsl #1
    3d00:	00001878 	andeq	r1, r0, r8, ror r8
    3d04:	01007328 	tsteq	r0, r8, lsr #6
    3d08:	400d0281 	andmi	r0, sp, r1, lsl #5
    3d0c:	a1000007 	tstge	r0, r7
    3d10:	28000018 	stmdacs	r0, {r3, r4}
    3d14:	0100716e 	tsteq	r0, lr, ror #2
    3d18:	81060282 	smlabbhi	r6, r2, r2, r0
    3d1c:	06000000 	streq	r0, [r0], -r0
    3d20:	28000019 	stmdacs	r0, {r0, r3, r4}
    3d24:	01007172 	tsteq	r0, r2, ror r1
    3d28:	8a0b0283 	bhi	2c473c <__ccfg+0x2a4794>
    3d2c:	24000007 	strcs	r0, [r0], #-7
    3d30:	28000019 	stmdacs	r0, {r0, r3, r4}
    3d34:	84010062 	strhi	r0, [r1], #-98	; 0xffffff9e
    3d38:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3d3c:	194d0000 	stmdbne	sp, {}^	; <UNPREDICTABLE>
    3d40:	21000000 	mrscs	r0, (UNDEF: 0)
    3d44:	000eef01 	andeq	lr, lr, r1, lsl #30
    3d48:	02560100 	subseq	r0, r6, #0, 2
    3d4c:	01160101 	tsteq	r6, r1, lsl #2
	...
    3d58:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d5c:	00000f5c 	andeq	r0, r0, ip, asr pc
    3d60:	000b812b 	andeq	r8, fp, fp, lsr #2
    3d64:	02560100 	subseq	r0, r6, #0, 2
    3d68:	0000cd2d 	andeq	ip, r0, sp, lsr #26
    3d6c:	00198100 	andseq	r8, r9, r0, lsl #2
    3d70:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3d74:	02560100 	subseq	r0, r6, #0, 2
    3d78:	00008138 	andeq	r8, r0, r8, lsr r1
    3d7c:	00199400 	andseq	r9, r9, r0, lsl #8
    3d80:	00702800 	rsbseq	r2, r0, r0, lsl #16
    3d84:	0a025d01 	beq	9b190 <__ccfg+0x7b1e8>
    3d88:	00000116 	andeq	r0, r0, r6, lsl r1
    3d8c:	000019d3 	ldrdeq	r1, [r0], -r3
    3d90:	01006228 	tsteq	r0, r8, lsr #4
    3d94:	9d0c025e 	sfmls	f0, 4, [ip, #-376]	; 0xfffffe88
    3d98:	e6000008 	str	r0, [r0], -r8
    3d9c:	28000019 	stmdacs	r0, {r0, r3, r4}
    3da0:	01007172 	tsteq	r0, r2, ror r1
    3da4:	8a0b025f 	bhi	2c4728 <__ccfg+0x2a4780>
    3da8:	0f000007 	svceq	0x00000007
    3dac:	0000001a 	andeq	r0, r0, sl, lsl r0
    3db0:	0eb50121 	frdeqsp	f0, f5, f1
    3db4:	4a010000 	bmi	43dbc <__ccfg+0x23e14>
    3db8:	81010102 	tsthi	r1, r2, lsl #2
	...
    3dc4:	01000000 	mrseq	r0, (UNDEF: 0)
    3dc8:	000f999c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    3dcc:	726f2200 	rsbvc	r2, pc, #0, 4
    3dd0:	4a010064 	bmi	43f68 <__ccfg+0x23fc0>
    3dd4:	00812902 	addeq	r2, r1, r2, lsl #18
    3dd8:	1a490000 	bne	1243de0 <__ccfg+0x1223e38>
    3ddc:	70340000 	eorsvc	r0, r4, r0
    3de0:	4a01006c 	bmi	43f98 <__ccfg+0x23ff0>
    3de4:	07d43f02 	ldrbeq	r3, [r4, r2, lsl #30]
    3de8:	51010000 	mrspl	r0, (UNDEF: 1)
    3dec:	14012100 	strne	r2, [r1], #-256	; 0xffffff00
    3df0:	0100000e 	tsteq	r0, lr
    3df4:	01010229 	tsteq	r1, r9, lsr #4
    3df8:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3e04:	0ff69c01 	svceq	0x00f69c01
    3e08:	812b0000 			; <UNDEFINED> instruction: 0x812b0000
    3e0c:	0100000b 	tsteq	r0, fp
    3e10:	cd2b0229 	sfmgt	f0, 4, [fp, #-164]!	; 0xffffff5c
    3e14:	67000000 	strvs	r0, [r0, -r0]
    3e18:	2200001a 	andcs	r0, r0, #26
    3e1c:	01006466 	tsteq	r0, r6, ror #8
    3e20:	81360229 	teqhi	r6, r9, lsr #4
    3e24:	85000000 	strhi	r0, [r0, #-0]
    3e28:	2800001a 	stmdacs	r0, {r1, r3, r4}
    3e2c:	2b010073 	blcs	44000 <__ccfg+0x24058>
    3e30:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3e34:	1acf0000 	bne	ff3c3e3c <_estack+0xdf3bee3c>
    3e38:	62280000 	eorvs	r0, r8, #0
    3e3c:	022c0100 	eoreq	r0, ip, #0, 2
    3e40:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3e44:	001ae200 	andseq	lr, sl, r0, lsl #4
    3e48:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3e4c:	00000d1f 	andeq	r0, r0, pc, lsl sp
    3e50:	0101f601 	tsteq	r1, r1, lsl #12	; <UNPREDICTABLE>
    3e54:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3e60:	839c0100 	orrshi	r0, ip, #0, 2
    3e64:	2b000010 	blcs	3eac <__exidx_end+0x1228>
    3e68:	00000b81 	andeq	r0, r0, r1, lsl #23
    3e6c:	2a01f601 	bcs	81678 <__ccfg+0x616d0>
    3e70:	000000cd 	andeq	r0, r0, sp, asr #1
    3e74:	00001af5 	strdeq	r1, [r0], -r5
    3e78:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3e7c:	01f60100 	mvnseq	r0, r0, lsl #2
    3e80:	00008135 	andeq	r8, r0, r5, lsr r1
    3e84:	001b1e00 	andseq	r1, fp, r0, lsl #28
    3e88:	0e812b00 	vdiveq.f64	d2, d1, d0
    3e8c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3e90:	00813e01 	addeq	r3, r1, r1, lsl #28
    3e94:	1b730000 	blne	1cc3e9c <__ccfg+0x1ca3ef4>
    3e98:	28350000 	ldmdacs	r5!, {}	; <UNPREDICTABLE>
    3e9c:	01006466 	tsteq	r0, r6, ror #8
    3ea0:	810601f8 	strdhi	r0, [r6, -r8]
    3ea4:	ab000000 	blge	3eac <__exidx_end+0x1228>
    3ea8:	3600001b 			; <UNDEFINED> instruction: 0x3600001b
    3eac:	00000d8c 	andeq	r0, r0, ip, lsl #27
    3eb0:	0a01f901 	beq	822bc <__ccfg+0x62314>
    3eb4:	00000556 	andeq	r0, r0, r6, asr r5
    3eb8:	01007328 	tsteq	r0, r8, lsr #6
    3ebc:	400d01fa 	strdmi	r0, [sp], -sl
    3ec0:	c9000007 	stmdbgt	r0, {r0, r1, r2}
    3ec4:	2a00001b 	bcs	3f38 <__exidx_end+0x12b4>
    3ec8:	01007061 	tsteq	r0, r1, rrx
    3ecc:	b50b01fc 	strlt	r0, [fp, #-508]	; 0xfffffe04
    3ed0:	02000000 	andeq	r0, r0, #0
    3ed4:	27005491 			; <UNDEFINED> instruction: 0x27005491
    3ed8:	000dc201 	andeq	ip, sp, r1, lsl #4
    3edc:	013b0100 	teqeq	fp, r0, lsl #2
    3ee0:	00000101 	andeq	r0, r0, r1, lsl #2
    3ee4:	00000000 	andeq	r0, r0, r0
    3ee8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3eec:	000010bb 	strheq	r1, [r0], -fp
    3ef0:	01007022 	tsteq	r0, r2, lsr #32
    3ef4:	162e013b 			; <UNDEFINED> instruction: 0x162e013b
    3ef8:	13000001 	movwne	r0, #1
    3efc:	2800001c 	stmdacs	r0, {r2, r3, r4}
    3f00:	41010062 	tstmi	r1, r2, rrx
    3f04:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    3f08:	1c3c0000 	ldcne	0, cr0, [ip], #-0
    3f0c:	37000000 	strcc	r0, [r0, -r0]
    3f10:	00627061 	rsbeq	r7, r2, r1, rrx
    3f14:	01011401 	tsteq	r1, r1, lsl #8
    3f18:	00089d01 	andeq	r9, r8, r1, lsl #26
	...
    3f24:	029c0100 	addseq	r0, ip, #0, 2
    3f28:	2b000011 	blcs	3f74 <__exidx_end+0x12f0>
    3f2c:	00001397 	muleq	r0, r7, r3
    3f30:	2b011401 	blcs	48f3c <__ccfg+0x28f94>
    3f34:	000000cd 	andeq	r0, r0, sp, asr #1
    3f38:	00001c70 	andeq	r1, r0, r0, ror ip
    3f3c:	0100702a 	tsteq	r0, sl, lsr #32
    3f40:	9d0c0119 	stflss	f0, [ip, #-100]	; 0xffffff9c
    3f44:	01000008 	tsteq	r0, r8
    3f48:	73632950 	cmnvc	r3, #80, 18	; 0x140000
    3f4c:	011a0100 	tsteq	sl, r0, lsl #2
    3f50:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3f54:	72380000 	eorsvc	r0, r8, #0
    3f58:	0100706c 	tsteq	r0, ip, rrx
    3f5c:	01010104 	tsteq	r1, r4, lsl #2
	...
    3f68:	112a9c01 			; <UNDEFINED> instruction: 0x112a9c01
    3f6c:	70220000 	eorvc	r0, r2, r0
    3f70:	01040100 	mrseq	r0, (UNDEF: 20)
    3f74:	00089d2b 	andeq	r9, r8, fp, lsr #26
    3f78:	001c8300 	andseq	r8, ip, r0, lsl #6
    3f7c:	df390000 	svcle	0x00390000
    3f80:	0100000c 	tsteq	r0, ip
    3f84:	010101e0 	smlatteq	r1, r0, r1, r0
    3f88:	0000114e 	andeq	r1, r0, lr, asr #2
    3f8c:	0100703a 	tsteq	r0, sl, lsr r0
    3f90:	089d2fe0 	ldmeq	sp, {r5, r6, r7, r8, r9, sl, fp, sp}
    3f94:	643a0000 	ldrtvs	r0, [sl], #-0
    3f98:	e0010076 	and	r0, r1, r6, ror r0
    3f9c:	00008136 	andeq	r8, r0, r6, lsr r1
    3fa0:	3a3b0000 	bcc	ec3fa8 <__ccfg+0xea4000>
    3fa4:	0100000d 	tsteq	r0, sp
    3fa8:	810101cf 	smlabthi	r1, pc, r1, r0	; <UNPREDICTABLE>
    3fac:	01000000 	mrseq	r0, (UNDEF: 0)
    3fb0:	00001181 	andeq	r1, r0, r1, lsl #3
    3fb4:	00716f3a 	rsbseq	r6, r1, sl, lsr pc
    3fb8:	8a2bcf01 	bhi	af7bc4 <__ccfg+0xad7c1c>
    3fbc:	3c000007 	stccc	0, cr0, [r0], {7}
    3fc0:	0100716e 	tsteq	r0, lr, ror #2
    3fc4:	008106d3 	ldrdeq	r0, [r1], r3
    3fc8:	623c0000 	eorsvs	r0, ip, #0
    3fcc:	0cd40100 	ldfeqe	f0, [r4], {0}
    3fd0:	0000089d 	muleq	r0, sp, r8
    3fd4:	6e653d00 	cdpvs	13, 6, cr3, cr5, cr0, {0}
    3fd8:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    3fdc:	a4010101 	strge	r0, [r1], #-257	; 0xfffffeff
    3fe0:	3a000011 	bcc	402c <__exidx_end+0x13a8>
    3fe4:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    3fe8:	00078a2a 	andeq	r8, r7, sl, lsr #20
    3fec:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    3ff0:	9d37a801 	ldcls	8, cr10, [r7, #-4]!
    3ff4:	00000008 	andeq	r0, r0, r8
    3ff8:	7165643d 	cmnvc	r5, sp, lsr r4
    3ffc:	017f0100 	cmneq	pc, r0, lsl #2
    4000:	11bd0101 			; <UNDEFINED> instruction: 0x11bd0101
    4004:	703a0000 	eorsvc	r0, sl, r0
    4008:	2b7f0100 	blcs	1fc4410 <__ccfg+0x1fa4468>
    400c:	0000089d 	muleq	r0, sp, r8
    4010:	11a43e00 			; <UNDEFINED> instruction: 0x11a43e00
	...
    401c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4020:	000011f2 	strdeq	r1, [r0], -r2
    4024:	0011b23f 	andseq	fp, r1, pc, lsr r2
    4028:	40500100 	subsmi	r0, r0, r0, lsl #2
    402c:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    4038:	24017f01 	strcs	r7, [r1], #-3841	; 0xfffff0ff
    403c:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4040:	00001c96 	muleq	r0, r6, ip
    4044:	813e0000 	teqhi	lr, r0
    4048:	00000011 	andeq	r0, r0, r1, lsl r0
    404c:	00000000 	andeq	r0, r0, r0
    4050:	01000000 	mrseq	r0, (UNDEF: 0)
    4054:	00123b9c 	mulseq	r2, ip, fp
    4058:	118f2400 	orrne	r2, pc, r0, lsl #8
    405c:	1ca90000 	stcne	0, cr0, [r9]
    4060:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    4064:	dd000011 	stcle	0, cr0, [r0, #-68]	; 0xffffffbc
    4068:	4000001c 	andmi	r0, r0, ip, lsl r0
    406c:	00001181 	andeq	r1, r0, r1, lsl #3
	...
    4078:	2401a801 	strcs	sl, [r1], #-2049	; 0xfffff7ff
    407c:	0000118f 	andeq	r1, r0, pc, lsl #3
    4080:	00001d11 	andeq	r1, r0, r1, lsl sp
    4084:	00119924 	andseq	r9, r1, r4, lsr #18
    4088:	001d2f00 	andseq	r2, sp, r0, lsl #30
    408c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4090:	0000112a 	andeq	r1, r0, sl, lsr #2
	...
    409c:	12809c01 	addne	r9, r0, #256	; 0x100
    40a0:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    40a4:	4d000011 	stcmi	0, cr0, [r0, #-68]	; 0xffffffbc
    40a8:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    40ac:	00001142 	andeq	r1, r0, r2, asr #2
    40b0:	00001da2 	andeq	r1, r0, r2, lsr #27
    40b4:	00112a41 	andseq	r2, r1, r1, asr #20
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	0007d800 	andeq	sp, r7, r0, lsl #16
    40c0:	01e00100 	mvneq	r0, r0, lsl #2
    40c4:	00114233 	andseq	r4, r1, r3, lsr r2
    40c8:	11382400 	teqne	r8, r0, lsl #8
    40cc:	1db50000 	ldcne	0, cr0, [r5]
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	000b993e 	andeq	r9, fp, lr, lsr r9
	...
    40e0:	d89c0100 	ldmle	ip, {r8}
    40e4:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    40e8:	00000bad 	andeq	r0, r0, sp, lsr #23
    40ec:	00001dd3 	ldrdeq	r1, [r0], -r3
    40f0:	000bba24 	andeq	fp, fp, r4, lsr #20
    40f4:	001df100 	andseq	pc, sp, r0, lsl #2
    40f8:	0bc72400 	bleq	ff1cd100 <_estack+0xdf1c8100>
    40fc:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
    4100:	99320000 	ldmdbls	r2!, {}	; <UNPREDICTABLE>
    4104:	0000000b 	andeq	r0, r0, fp
    4108:	00000000 	andeq	r0, r0, r0
    410c:	01000000 	mrseq	r0, (UNDEF: 0)
    4110:	33010352 	movwcc	r0, #4946	; 0x1352
    4114:	00000bad 	andeq	r0, r0, sp, lsr #23
    4118:	000bba24 	andeq	fp, fp, r4, lsr #20
    411c:	001e4300 	andseq	r4, lr, r0, lsl #6
    4120:	0bc72400 	bleq	ff1cd128 <_estack+0xdf1c8128>
    4124:	1e560000 	cdpne	0, 5, cr0, cr6, cr0, {0}
    4128:	00000000 	andeq	r0, r0, r0
    412c:	000a4a42 	andeq	r4, sl, r2, asr #20
	...
    4138:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    413c:	00000a5e 	andeq	r0, r0, lr, asr sl
    4140:	00001e69 	andeq	r1, r0, r9, ror #28
    4144:	000a6b24 	andeq	r6, sl, r4, lsr #22
    4148:	001e7c00 	andseq	r7, lr, r0, lsl #24
    414c:	0a782400 	beq	1e0d154 <__ccfg+0x1ded1ac>
    4150:	1edc0000 	cdpne	0, 13, cr0, cr12, cr0, {0}
    4154:	85260000 	strhi	r0, [r6, #-0]!
    4158:	2600000a 	strcs	r0, [r0], -sl
    415c:	3200001f 	andcc	r0, r0, #31
    4160:	00000a4a 	andeq	r0, r0, sl, asr #20
	...
    416c:	01038601 	tsteq	r3, r1, lsl #12
    4170:	000a5e33 	andeq	r5, sl, r3, lsr lr
    4174:	0a6b2400 	beq	1acd17c <__ccfg+0x1aad1d4>
    4178:	1f5a0000 	svcne	0x005a0000
    417c:	78330000 	ldmdavc	r3!, {}	; <UNPREDICTABLE>
    4180:	4300000a 	movwmi	r0, #10
    4184:	00000a85 	andeq	r0, r0, r5, lsl #21
    4188:	74000000 	strvc	r0, [r0], #-0
    418c:	03000001 	movweq	r0, #1
    4190:	00101e00 	andseq	r1, r0, r0, lsl #28
    4194:	70010400 	andvc	r0, r1, r0, lsl #8
    4198:	0c000001 	stceq	0, cr0, [r0], {1}
    419c:	00000f77 	andeq	r0, r0, r7, ror pc
    41a0:	000000c0 	andeq	r0, r0, r0, asr #1
    41a4:	00000908 	andeq	r0, r0, r8, lsl #18
    41a8:	00000000 	andeq	r0, r0, r0
    41ac:	0000364a 	andeq	r3, r0, sl, asr #12
    41b0:	a3060102 	movwge	r0, #24834	; 0x6102
    41b4:	02000003 	andeq	r0, r0, #3
    41b8:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    41bc:	04020000 	streq	r0, [r2], #-0
    41c0:	00009d05 	andeq	r9, r0, r5, lsl #26
    41c4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    41c8:	00000098 	muleq	r0, r8, r0
    41cc:	a1080102 	tstge	r8, r2, lsl #2
    41d0:	02000003 	andeq	r0, r0, #3
    41d4:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    41d8:	b3030000 	movwlt	r0, #12288	; 0x3000
    41dc:	02000017 	andeq	r0, r0, #23
    41e0:	005b1934 	subseq	r1, fp, r4, lsr r9
    41e4:	04020000 	streq	r0, [r2], #-0
    41e8:	00007207 	andeq	r7, r0, r7, lsl #4
    41ec:	07080200 	streq	r0, [r8, -r0, lsl #4]
    41f0:	0000006d 	andeq	r0, r0, sp, rrx
    41f4:	69050404 	stmdbvs	r5, {r2, sl}
    41f8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    41fc:	00770704 	rsbseq	r0, r7, r4, lsl #14
    4200:	04050000 	streq	r0, [r5], #-0
    4204:	00000082 	andeq	r0, r0, r2, lsl #1
    4208:	00007706 	andeq	r7, r0, r6, lsl #14
    420c:	05010700 	streq	r0, [r1, #-1792]	; 0xfffff900
    4210:	00004f04 	andeq	r4, r0, r4, lsl #30
    4214:	0f6a0800 	svceq	0x006a0800
    4218:	7f010000 	svcvc	0x00010000
    421c:	00004f11 	andeq	r4, r0, r1, lsl pc
    4220:	08010100 	stmdaeq	r1, {r8}
    4224:	00000f3e 	andeq	r0, r0, lr, lsr pc
    4228:	4f118001 	svcmi	0x00118001
    422c:	01000000 	mrseq	r0, (UNDEF: 0)
    4230:	0fba0801 	svceq	0x00ba0801
    4234:	81010000 	mrshi	r0, (UNDEF: 1)
    4238:	00004f11 	andeq	r4, r0, r1, lsl pc
    423c:	08010100 	stmdaeq	r1, {r8}
    4240:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    4244:	4f118201 	svcmi	0x00118201
    4248:	01000000 	mrseq	r0, (UNDEF: 0)
    424c:	0f710801 	svceq	0x00710801
    4250:	83010000 	movwhi	r0, #4096	; 0x1000
    4254:	00004f11 	andeq	r4, r0, r1, lsl pc
    4258:	08010100 	stmdaeq	r1, {r8}
    425c:	00000f36 	andeq	r0, r0, r6, lsr pc
    4260:	4f118401 	svcmi	0x00118401
    4264:	01000000 	mrseq	r0, (UNDEF: 0)
    4268:	007d0901 	rsbseq	r0, sp, r1, lsl #18
    426c:	00ee0000 	rsceq	r0, lr, r0
    4270:	700a0000 	andvc	r0, sl, r0
    4274:	31000000 	mrscc	r0, (UNDEF: 0)
    4278:	00de0600 	sbcseq	r0, lr, r0, lsl #12
    427c:	d30b0000 	movwle	r0, #45056	; 0xb000
    4280:	0100000f 	tsteq	r0, pc
    4284:	00ee0f8e 	rsceq	r0, lr, lr, lsl #31
    4288:	05010000 	streq	r0, [r1, #-0]
    428c:	00000003 	andeq	r0, r0, r3
    4290:	0fc10c00 	svceq	0x00c10c00
    4294:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4298:	fa010101 	blx	446a4 <__ccfg+0x246fc>
    429c:	fc000013 	stc2	0, cr0, [r0], {19}
    42a0:	01000013 	tsteq	r0, r3, lsl r0
    42a4:	0f4d0c9c 	svceq	0x004d0c9c
    42a8:	16010000 	strne	r0, [r1], -r0
    42ac:	f8010101 			; <UNDEFINED> instruction: 0xf8010101
    42b0:	fa000013 	blx	4304 <__exidx_end+0x1680>
    42b4:	01000013 	tsteq	r0, r3, lsl r0
    42b8:	0f5d0c9c 	svceq	0x005d0c9c
    42bc:	04010000 	streq	r0, [r1], #-0
    42c0:	f6010101 			; <UNDEFINED> instruction: 0xf6010101
    42c4:	f8000013 			; <UNDEFINED> instruction: 0xf8000013
    42c8:	01000013 	tsteq	r0, r3, lsl r0
    42cc:	ea010d9c 	b	47944 <__ccfg+0x2799c>
    42d0:	0100000f 	tsteq	r0, pc
    42d4:	fc0101d2 	stc2	1, cr0, [r1], {210}	; 0xd2
    42d8:	40000013 	andmi	r0, r0, r3, lsl r0
    42dc:	01000014 	tsteq	r0, r4, lsl r0
    42e0:	0f440e9c 	svceq	0x00440e9c
    42e4:	d4010000 	strle	r0, [r1], #-0
    42e8:	0000840f 	andeq	r8, r0, pc, lsl #8
    42ec:	001f6d00 	andseq	r6, pc, r0, lsl #26
    42f0:	0fe00e00 	svceq	0x00e00e00
    42f4:	d4010000 	strle	r0, [r1], #-0
    42f8:	0000841a 	andeq	r8, r0, sl, lsl r4
    42fc:	001f8b00 	andseq	r8, pc, r0, lsl #22
    4300:	37000000 	strcc	r0, [r0, -r0]
    4304:	03000005 	movweq	r0, #5
    4308:	0010e300 	andseq	lr, r0, r0, lsl #6
    430c:	70010400 	andvc	r0, r1, r0, lsl #8
    4310:	0c000001 	stceq	0, cr0, [r0], {1}
    4314:	0000104a 	andeq	r1, r0, sl, asr #32
    4318:	000000c0 	andeq	r0, r0, r0, asr #1
    431c:	00003771 	andeq	r3, r0, r1, ror r7
    4320:	a3060102 	movwge	r0, #24834	; 0x6102
    4324:	02000003 	andeq	r0, r0, #3
    4328:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    432c:	04020000 	streq	r0, [r2], #-0
    4330:	00009d05 	andeq	r9, r0, r5, lsl #26
    4334:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    4338:	00000098 	muleq	r0, r8, r0
    433c:	0021fc03 	eoreq	pc, r1, r3, lsl #24
    4340:	182e0100 	stmdane	lr!, {r8}
    4344:	00000045 	andeq	r0, r0, r5, asr #32
    4348:	a1080102 	tstge	r8, r2, lsl #2
    434c:	03000003 	movweq	r0, #3
    4350:	000020ea 	andeq	r2, r0, sl, ror #1
    4354:	58193101 	ldmdapl	r9, {r0, r8, ip, sp}
    4358:	02000000 	andeq	r0, r0, #0
    435c:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    4360:	b3030000 	movwlt	r0, #12288	; 0x3000
    4364:	01000017 	tsteq	r0, r7, lsl r0
    4368:	006b1934 	rsbeq	r1, fp, r4, lsr r9
    436c:	04020000 	streq	r0, [r2], #-0
    4370:	00007207 	andeq	r7, r0, r7, lsl #4
    4374:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4378:	0000006d 	andeq	r0, r0, sp, rrx
    437c:	69050404 	stmdbvs	r5, {r2, sl}
    4380:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4384:	00770704 	rsbseq	r0, r7, r4, lsl #14
    4388:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    438c:	af092f02 	svcge	0x00092f02
    4390:	06000001 	streq	r0, [r0], -r1
    4394:	000011a4 	andeq	r1, r0, r4, lsr #3
    4398:	5f103102 	svcpl	0x00103102
    439c:	00000000 	andeq	r0, r0, r0
    43a0:	0010b906 	andseq	fp, r0, r6, lsl #18
    43a4:	10320200 	eorsne	r0, r2, r0, lsl #4
    43a8:	0000005f 	andeq	r0, r0, pc, asr r0
    43ac:	10810604 	addne	r0, r1, r4, lsl #12
    43b0:	33020000 	movwcc	r0, #8192	; 0x2000
    43b4:	00005f10 	andeq	r5, r0, r0, lsl pc
    43b8:	34060800 	strcc	r0, [r6], #-2048	; 0xfffff800
    43bc:	02000010 	andeq	r0, r0, #16
    43c0:	005f1034 	subseq	r1, pc, r4, lsr r0	; <UNPREDICTABLE>
    43c4:	060c0000 	streq	r0, [ip], -r0
    43c8:	00000ff3 	strdeq	r0, [r0], -r3
    43cc:	5f103502 	svcpl	0x00103502
    43d0:	10000000 	andne	r0, r0, r0
    43d4:	00100406 	andseq	r0, r0, r6, lsl #8
    43d8:	10360200 	eorsne	r0, r6, r0, lsl #4
    43dc:	0000005f 	andeq	r0, r0, pc, asr r0
    43e0:	10240614 	eorne	r0, r4, r4, lsl r6
    43e4:	37020000 	strcc	r0, [r2, -r0]
    43e8:	00005f10 	andeq	r5, r0, r0, lsl pc
    43ec:	49061800 	stmdbmi	r6, {fp, ip}
    43f0:	02000011 	andeq	r0, r0, #17
    43f4:	005f1038 	subseq	r1, pc, r8, lsr r0	; <UNPREDICTABLE>
    43f8:	061c0000 	ldreq	r0, [ip], -r0
    43fc:	00001099 	muleq	r0, r9, r0
    4400:	5f103902 	svcpl	0x00103902
    4404:	20000000 	andcs	r0, r0, r0
    4408:	0010a906 	andseq	sl, r0, r6, lsl #18
    440c:	103a0200 	eorsne	r0, sl, r0, lsl #4
    4410:	0000005f 	andeq	r0, r0, pc, asr r0
    4414:	116f0624 	cmnne	pc, r4, lsr #12
    4418:	3b020000 	blcc	84420 <__ccfg+0x64478>
    441c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4420:	7f062800 	svcvc	0x00062800
    4424:	02000011 	andeq	r0, r0, #17
    4428:	005f103c 	subseq	r1, pc, ip, lsr r0	; <UNPREDICTABLE>
    442c:	062c0000 	strteq	r0, [ip], -r0
    4430:	00001015 	andeq	r1, r0, r5, lsl r0
    4434:	5f103d02 	svcpl	0x00103d02
    4438:	30000000 	andcc	r0, r0, r0
    443c:	00110f06 	andseq	r0, r1, r6, lsl #30
    4440:	103e0200 	eorsne	r0, lr, r0, lsl #4
    4444:	0000005f 	andeq	r0, r0, pc, asr r0
    4448:	11b40634 			; <UNDEFINED> instruction: 0x11b40634
    444c:	3f020000 	svccc	0x00020000
    4450:	00005f10 	andeq	r5, r0, r0, lsl pc
    4454:	ca063800 	bgt	19245c <__ccfg+0x1724b4>
    4458:	02000010 	andeq	r0, r0, #16
    445c:	005f1040 	subseq	r1, pc, r0, asr #32
    4460:	063c0000 	ldrteq	r0, [ip], -r0
    4464:	000010de 	ldrdeq	r1, [r0], -lr
    4468:	5f104102 	svcpl	0x00104102
    446c:	40000000 	andmi	r0, r0, r0
    4470:	00113306 	andseq	r3, r1, r6, lsl #6
    4474:	10420200 	subne	r0, r2, r0, lsl #4
    4478:	0000005f 	andeq	r0, r0, pc, asr r0
    447c:	111f0644 	tstne	pc, r4, asr #12
    4480:	43020000 	movwmi	r0, #8192	; 0x2000
    4484:	00005f10 	andeq	r5, r0, r0, lsl pc
    4488:	5a064800 	bpl	196490 <__ccfg+0x1764e8>
    448c:	02000011 	andeq	r0, r0, #17
    4490:	005f1044 	subseq	r1, pc, r4, asr #32
    4494:	064c0000 	strbeq	r0, [ip], -r0
    4498:	0000118f 	andeq	r1, r0, pc, lsl #3
    449c:	5f104502 	svcpl	0x00104502
    44a0:	50000000 	andpl	r0, r0, r0
    44a4:	0010f906 	andseq	pc, r0, r6, lsl #18
    44a8:	10460200 	subne	r0, r6, r0, lsl #4
    44ac:	0000005f 	andeq	r0, r0, pc, asr r0
    44b0:	f2030054 	vqadd.s8	q0, <illegal reg q1.5>, q2
    44b4:	02000010 	andeq	r0, r0, #16
    44b8:	00870347 	addeq	r0, r7, r7, asr #6
    44bc:	af070000 	svcge	0x00070000
    44c0:	08000001 	stmdaeq	r0, {r0}
    44c4:	00001043 	andeq	r1, r0, r3, asr #32
    44c8:	bb154e02 	bllt	557cd8 <__ccfg+0x537d30>
    44cc:	01000001 	tsteq	r0, r1
    44d0:	15c00301 	strbne	r0, [r0, #769]	; 0x301
    44d4:	27030000 	strcs	r0, [r3, -r0]
    44d8:	00004c12 	andeq	r4, r0, r2, lsl ip
    44dc:	01ce0700 	biceq	r0, lr, r0, lsl #14
    44e0:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    44e4:	03000001 	movweq	r0, #1
    44e8:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    44ec:	39122b03 	ldmdbcc	r2, {r0, r1, r8, r9, fp, sp}
    44f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    44f4:	000001e4 	andeq	r0, r0, r4, ror #3
    44f8:	00161103 	andseq	r1, r6, r3, lsl #2
    44fc:	122c0300 	eorne	r0, ip, #0, 6
    4500:	0000005f 	andeq	r0, r0, pc, asr r0
    4504:	0001f507 	andeq	pc, r1, r7, lsl #10
    4508:	02a70300 	adceq	r0, r7, #0, 6
    450c:	2d030000 	stccs	0, cr0, [r3, #-0]
    4510:	00005f12 	andeq	r5, r0, r2, lsl pc
    4514:	03080500 	movweq	r0, #34048	; 0x8500
    4518:	02a00932 	adceq	r0, r0, #819200	; 0xc8000
    451c:	c20a0000 	andgt	r0, sl, #0
    4520:	03000002 	movweq	r0, #2
    4524:	01e40734 	mvneq	r0, r4, lsr r7
    4528:	01010000 	mrseq	r0, (UNDEF: 1)
    452c:	910a0007 	tstls	sl, r7
    4530:	03000000 	movweq	r0, #0
    4534:	01e40335 	mvneq	r0, r5, lsr r3
    4538:	01010000 	mrseq	r0, (UNDEF: 1)
    453c:	990a0006 	stmdbls	sl, {r1, r2}
    4540:	03000002 	movweq	r0, #2
    4544:	01e40336 	mvneq	r0, r6, lsr r3
    4548:	01010000 	mrseq	r0, (UNDEF: 1)
    454c:	0c0a0005 	stceq	0, cr0, [sl], {5}
    4550:	03000004 	movweq	r0, #4
    4554:	01e40337 	mvneq	r0, r7, lsr r3
    4558:	01010000 	mrseq	r0, (UNDEF: 1)
    455c:	050a0004 	streq	r0, [sl, #-4]
    4560:	03000004 	movweq	r0, #4
    4564:	01e40338 	mvneq	r0, r8, lsr r3
    4568:	04010000 	streq	r0, [r1], #-0
    456c:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    4570:	03000003 	movweq	r0, #3
    4574:	01e4073a 	mvneq	r0, sl, lsr r7
    4578:	06010000 	streq	r0, [r1], -r0
    457c:	00000040 	andeq	r0, r0, r0, asr #32
    4580:	e4033c03 	str	r3, [r3], #-3075	; 0xfffff3fd
    4584:	02000001 	andeq	r0, r0, #1
    4588:	00006606 	andeq	r6, r0, r6, lsl #12
    458c:	033d0300 	teqeq	sp, #0, 6
    4590:	000001e4 	andeq	r0, r0, r4, ror #3
    4594:	01540603 	cmpeq	r4, r3, lsl #12
    4598:	3f030000 	svccc	0x00030000
    459c:	0001f508 	andeq	pc, r1, r8, lsl #10
    45a0:	03000400 	movweq	r0, #1024	; 0x400
    45a4:	00000434 	andeq	r0, r0, r4, lsr r4
    45a8:	12034103 	andne	r4, r3, #-1073741824	; 0xc0000000
    45ac:	09000002 	stmdbeq	r0, {r1}
    45b0:	000002a0 	andeq	r0, r0, r0, lsr #5
    45b4:	0002b608 	andeq	fp, r2, r8, lsl #12
    45b8:	1a430300 	bne	10c51c0 <__ccfg+0x10a5218>
    45bc:	000002ac 	andeq	r0, r0, ip, lsr #5
    45c0:	0d080101 	stfeqs	f0, [r8, #-4]
    45c4:	03000003 	movweq	r0, #3
    45c8:	02cd0e45 	sbceq	r0, sp, #1104	; 0x450
    45cc:	01010000 	mrseq	r0, (UNDEF: 1)
    45d0:	02d3040b 	sbcseq	r0, r3, #184549376	; 0xb000000
    45d4:	01020000 	mrseq	r0, (UNDEF: 2)
    45d8:	0003aa08 	andeq	sl, r3, r8, lsl #20
    45dc:	02d30700 	sbcseq	r0, r3, #0, 14
    45e0:	1b080000 	blne	2045e8 <__ccfg+0x1e4640>
    45e4:	03000003 	movweq	r0, #3
    45e8:	02cd1e45 	sbceq	r1, sp, #1104	; 0x450
    45ec:	01010000 	mrseq	r0, (UNDEF: 1)
    45f0:	8f040805 	svchi	0x00040805
    45f4:	00031e09 	andeq	r1, r3, r9, lsl #28
    45f8:	02d20600 	sbcseq	r0, r2, #0, 12
    45fc:	90040000 	andls	r0, r4, r0
    4600:	00005f0b 	andeq	r5, r0, fp, lsl #30
    4604:	ed060000 	stc	0, cr0, [r6, #-0]
    4608:	04000005 	streq	r0, [r0], #-5
    460c:	01ce0891 			; <UNDEFINED> instruction: 0x01ce0891
    4610:	06040000 	streq	r0, [r4], -r0
    4614:	00000471 	andeq	r0, r0, r1, ror r4
    4618:	f0109204 			; <UNDEFINED> instruction: 0xf0109204
    461c:	06000001 	streq	r0, [r0], -r1
    4620:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    4624:	93040000 	movwls	r0, #16384	; 0x4000
    4628:	0002ed03 	andeq	lr, r2, r3, lsl #26
    462c:	031e0c00 	tsteq	lr, #0, 24
    4630:	03350000 	teqeq	r5, #0
    4634:	000d0000 	andeq	r0, sp, r0
    4638:	00003608 	andeq	r3, r0, r8, lsl #12
    463c:	0f990400 	svceq	0x00990400
    4640:	0000032a 	andeq	r0, r0, sl, lsr #6
    4644:	01050101 	tsteq	r5, r1, lsl #2
    4648:	6d099105 	stfvsd	f1, [r9, #-20]	; 0xffffffec
    464c:	0a000003 	beq	4660 <__exidx_end+0x19dc>
    4650:	00000464 	andeq	r0, r0, r4, ror #8
    4654:	e4079305 	str	r9, [r7], #-773	; 0xfffffcfb
    4658:	01000001 	tsteq	r0, r1
    465c:	0a000107 	beq	4a80 <__exidx_end+0x1dfc>
    4660:	00000031 	andeq	r0, r0, r1, lsr r0
    4664:	e4039405 	str	r9, [r3], #-1029	; 0xfffffbfb
    4668:	01000001 	tsteq	r0, r1
    466c:	00000001 	andeq	r0, r0, r1
    4670:	00028403 	andeq	r8, r2, r3, lsl #8
    4674:	03960500 	orrseq	r0, r6, #0, 10
    4678:	00000343 	andeq	r0, r0, r3, asr #6
    467c:	00036d07 	andeq	r6, r3, r7, lsl #26
    4680:	03790c00 	cmneq	r9, #0, 24
    4684:	03890000 	orreq	r0, r9, #0
    4688:	000d0000 	andeq	r0, sp, r0
    468c:	00037e07 	andeq	r7, r3, r7, lsl #28
    4690:	02ed0800 	rsceq	r0, sp, #0, 16
    4694:	9c050000 	stcls	0, cr0, [r5], {-0}
    4698:	00038917 	andeq	r8, r3, r7, lsl r9
    469c:	0c010100 	stfeqs	f0, [r1], {-0}
    46a0:	000001da 	ldrdeq	r0, [r0], -sl
    46a4:	000003a7 	andeq	r0, r0, r7, lsr #7
    46a8:	9c07000d 	stcls	0, cr0, [r7], {13}
    46ac:	08000003 	stmdaeq	r0, {r0, r1}
    46b0:	00000393 	muleq	r0, r3, r3
    46b4:	a7130606 	ldrge	r0, [r3, -r6, lsl #12]
    46b8:	01000003 	tsteq	r0, r3
    46bc:	01340801 	teqeq	r4, r1, lsl #16
    46c0:	c3040000 	movwgt	r0, #16384	; 0x4000
    46c4:	0001f50e 	andeq	pc, r1, lr, lsl #10
    46c8:	0e010100 	adfeqs	f0, f1, f0
    46cc:	0000047e 	andeq	r0, r0, lr, ror r4
    46d0:	10016e07 	andne	r6, r1, r7, lsl #28
    46d4:	000003d5 	ldrdeq	r0, [r0], -r5
    46d8:	03db040b 	bicseq	r0, fp, #184549376	; 0xb000000
    46dc:	010f0000 	mrseq	r0, CPSR
    46e0:	000003e7 	andeq	r0, r0, r7, ror #7
    46e4:	0001ce10 	andeq	ip, r1, r0, lsl lr
    46e8:	da0c0000 	ble	3046f0 <__ccfg+0x2e4748>
    46ec:	f2000002 	vhadd.s8	d0, d0, d2
    46f0:	0d000003 	stceq	0, cr0, [r0, #-12]
    46f4:	03e70700 	mvneq	r0, #0, 14
    46f8:	44110000 	ldrmi	r0, [r1], #-0
    46fc:	07000004 	streq	r0, [r0, -r4]
    4700:	f216017f 	vbic	q0, q3, <illegal reg q15.5>
    4704:	01000003 	tsteq	r0, r3
    4708:	038b1101 	orreq	r1, fp, #1073741824	; 0x40000000
    470c:	82070000 	andhi	r0, r7, #0
    4710:	02011401 	andeq	r1, r1, #16777216	; 0x1000000
    4714:	01010000 	mrseq	r0, (UNDEF: 1)
    4718:	00046911 	andeq	r6, r4, r1, lsl r9
    471c:	02d80700 	sbcseq	r0, r8, #0, 14
    4720:	0001f50e 	andeq	pc, r1, lr, lsl #10
    4724:	12010100 	andne	r0, r1, #0, 2
    4728:	03030708 	movweq	r0, #14088	; 0x3708
    472c:	00044b09 	andeq	r4, r4, r9, lsl #22
    4730:	21f41300 	mvnscs	r1, r0, lsl #6
    4734:	07070000 	streq	r0, [r7, -r0]
    4738:	01ce0703 	biceq	r0, lr, r3, lsl #14
    473c:	13000000 	movwne	r0, #0
    4740:	0000053f 	andeq	r0, r0, pc, lsr r5
    4744:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    4748:	00000206 	andeq	r0, r0, r6, lsl #4
    474c:	640e0004 	strvs	r0, [lr], #-4
    4750:	07000002 	streq	r0, [r0, -r2]
    4754:	24030309 	strcs	r0, [r3], #-777	; 0xfffffcf7
    4758:	14000004 	strne	r0, [r0], #-4
    475c:	0000048d 	andeq	r0, r0, sp, lsl #9
    4760:	030b0730 	movweq	r0, #46896	; 0xb730
    4764:	0004bb08 	andeq	fp, r4, r8, lsl #22
    4768:	04861300 	streq	r1, [r6], #768	; 0x300
    476c:	14070000 	strne	r0, [r7], #-0
    4770:	01ce0803 	biceq	r0, lr, r3, lsl #16
    4774:	13000000 	movwne	r0, #0
    4778:	000002dc 	ldrdeq	r0, [r0], -ip
    477c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    4780:	000001ce 	andeq	r0, r0, lr, asr #3
    4784:	04811302 	streq	r1, [r1], #770	; 0x302
    4788:	16070000 	strne	r0, [r7], -r0
    478c:	03c80b03 	biceq	r0, r8, #3072	; 0xc00
    4790:	13040000 	movwne	r0, #16384	; 0x4000
    4794:	00000f3f 	andeq	r0, r0, pc, lsr pc
    4798:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    479c:	00000206 	andeq	r0, r0, r6, lsl #4
    47a0:	043d1308 	ldrteq	r1, [sp], #-776	; 0xfffffcf8
    47a4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    47a8:	04bb0f03 	ldrteq	r0, [fp], #3843	; 0xf03
    47ac:	130c0000 	movwne	r0, #49152	; 0xc000
    47b0:	000002d7 	ldrdeq	r0, [r0], -r7
    47b4:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    47b8:	000004cb 	andeq	r0, r0, fp, asr #9
    47bc:	4b0c002c 	blmi	304874 <__ccfg+0x2e48cc>
    47c0:	cb000004 	blgt	47d8 <__exidx_end+0x1b54>
    47c4:	15000004 	strne	r0, [r0, #-4]
    47c8:	00000080 	andeq	r0, r0, r0, lsl #1
    47cc:	040b0003 	streq	r0, [fp], #-3
    47d0:	00000458 	andeq	r0, r0, r8, asr r4
    47d4:	0004980e 	andeq	r9, r4, lr, lsl #16
    47d8:	031c0700 	tsteq	ip, #0, 14
    47dc:	0004581b 	andeq	r5, r4, fp, lsl r8
    47e0:	03811100 	orreq	r1, r1, #0, 2
    47e4:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    47e8:	04ed1403 	strbteq	r1, [sp], #1027	; 0x403
    47ec:	01010000 	mrseq	r0, (UNDEF: 1)
    47f0:	04d1040b 	ldrbeq	r0, [r1], #1035	; 0x40b
    47f4:	b1080000 	mrslt	r0, (UNDEF: 8)
    47f8:	08000004 	stmdaeq	r0, {r2}
    47fc:	01ce131d 	biceq	r1, lr, sp, lsl r3
    4800:	01010000 	mrseq	r0, (UNDEF: 1)
    4804:	00071b08 	andeq	r1, r7, r8, lsl #22
    4808:	1a1e0800 	bne	786810 <__ccfg+0x766868>
    480c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4810:	ab080101 	blge	204c1c <__ccfg+0x1e4c74>
    4814:	08000008 	stmdaeq	r0, {r3}
    4818:	01df241e 	bicseq	r2, pc, lr, lsl r4	; <UNPREDICTABLE>
    481c:	01010000 	mrseq	r0, (UNDEF: 1)
    4820:	0005da08 	andeq	sp, r5, r8, lsl #20
    4824:	14220800 	strtne	r0, [r2], #-2048	; 0xfffff800
    4828:	000004ed 	andeq	r0, r0, sp, ror #9
    482c:	c0160101 	andsgt	r0, r6, r1, lsl #2
    4830:	09000001 	stmdbeq	r0, {r0}
    4834:	050e0217 	streq	r0, [lr, #-535]	; 0xfffffde9
    4838:	01ffa803 	mvnseq	sl, r3, lsl #16
    483c:	05000000 	streq	r0, [r0, #-0]
    4840:	00030000 	andeq	r0, r3, r0
    4844:	00001202 	andeq	r1, r0, r2, lsl #4
    4848:	01700104 	cmneq	r0, r4, lsl #2
    484c:	fb0c0000 	blx	304856 <__ccfg+0x2e48ae>
    4850:	c0000011 	andgt	r0, r0, r1, lsl r0
    4854:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4858:	00000009 	andeq	r0, r0, r9
    485c:	fa000000 	blx	4864 <__exidx_end+0x1be0>
    4860:	02000038 	andeq	r0, r0, #56	; 0x38
    4864:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    4868:	02020000 	andeq	r0, r2, #0
    486c:	0003dd05 	andeq	sp, r3, r5, lsl #26
    4870:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4874:	0000009d 	muleq	r0, sp, r0
    4878:	98050802 	stmdals	r5, {r1, fp}
    487c:	03000000 	movweq	r0, #0
    4880:	000021fc 	strdeq	r2, [r0], -ip
    4884:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    4888:	02000000 	andeq	r0, r0, #0
    488c:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    4890:	ea030000 	b	c4898 <__ccfg+0xa48f0>
    4894:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    4898:	00601931 	rsbeq	r1, r0, r1, lsr r9
    489c:	02020000 	andeq	r0, r2, #0
    48a0:	00027107 	andeq	r7, r2, r7, lsl #2
    48a4:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    48a8:	34040000 	strcc	r0, [r4], #-0
    48ac:	00007319 	andeq	r7, r0, r9, lsl r3
    48b0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    48b4:	00000072 	andeq	r0, r0, r2, ror r0
    48b8:	6d070802 	stcvs	8, cr0, [r7, #-8]
    48bc:	04000000 	streq	r0, [r0], #-0
    48c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    48c4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    48c8:	00007707 	andeq	r7, r0, r7, lsl #14
    48cc:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    48d0:	27050000 	strcs	r0, [r5, -r0]
    48d4:	00005412 	andeq	r5, r0, r2, lsl r4
    48d8:	008f0500 	addeq	r0, pc, r0, lsl #10
    48dc:	8f060000 	svchi	0x00060000
    48e0:	03000000 	movweq	r0, #0
    48e4:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    48e8:	41122b05 	tstmi	r2, r5, lsl #22
    48ec:	06000000 	streq	r0, [r0], -r0
    48f0:	000000a5 	andeq	r0, r0, r5, lsr #1
    48f4:	0000a505 	andeq	sl, r0, r5, lsl #10
    48f8:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    48fc:	2c050000 	stccs	0, cr0, [r5], {-0}
    4900:	00006712 	andeq	r6, r0, r2, lsl r7
    4904:	00bb0500 	adcseq	r0, fp, r0, lsl #10
    4908:	a7030000 	strge	r0, [r3, -r0]
    490c:	05000002 	streq	r0, [r0, #-2]
    4910:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    4914:	62030000 	andvs	r0, r3, #0
    4918:	05000007 	streq	r0, [r0, #-7]
    491c:	00e4102e 	rsceq	r1, r4, lr, lsr #32
    4920:	04070000 	streq	r0, [r7], #-0
    4924:	0000008f 	andeq	r0, r0, pc, lsl #1
    4928:	32050808 	andcc	r0, r5, #8, 16	; 0x80000
    492c:	00017809 	andeq	r7, r1, r9, lsl #16
    4930:	02c20900 	sbceq	r0, r2, #0, 18
    4934:	34050000 	strcc	r0, [r5], #-0
    4938:	0000a507 	andeq	sl, r0, r7, lsl #10
    493c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4940:	00910900 	addseq	r0, r1, r0, lsl #18
    4944:	35050000 	strcc	r0, [r5, #-0]
    4948:	0000a503 	andeq	sl, r0, r3, lsl #10
    494c:	06010100 	streq	r0, [r1], -r0, lsl #2
    4950:	02990900 	addseq	r0, r9, #0, 18
    4954:	36050000 	strcc	r0, [r5], -r0
    4958:	0000a503 	andeq	sl, r0, r3, lsl #10
    495c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4960:	040c0900 	streq	r0, [ip], #-2304	; 0xfffff700
    4964:	37050000 	strcc	r0, [r5, -r0]
    4968:	0000a503 	andeq	sl, r0, r3, lsl #10
    496c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4970:	04050900 	streq	r0, [r5], #-2304	; 0xfffff700
    4974:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    4978:	0000a503 	andeq	sl, r0, r3, lsl #10
    497c:	00040100 	andeq	r0, r4, r0, lsl #2
    4980:	03f60a00 	mvnseq	r0, #0, 20
    4984:	3a050000 	bcc	14498c <__ccfg+0x1249e4>
    4988:	0000a507 	andeq	sl, r0, r7, lsl #10
    498c:	400a0100 	andmi	r0, sl, r0, lsl #2
    4990:	05000000 	streq	r0, [r0, #-0]
    4994:	00a5033c 	adceq	r0, r5, ip, lsr r3
    4998:	0a020000 	beq	849a0 <__ccfg+0x649f8>
    499c:	00000066 	andeq	r0, r0, r6, rrx
    49a0:	a5033d05 	strge	r3, [r3, #-3333]	; 0xfffff2fb
    49a4:	03000000 	movweq	r0, #0
    49a8:	0001540a 	andeq	r5, r1, sl, lsl #8
    49ac:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    49b0:	000000bb 	strheq	r0, [r0], -fp
    49b4:	34030004 	strcc	r0, [r3], #-4
    49b8:	05000004 	streq	r0, [r0, #-4]
    49bc:	00ea0341 	rsceq	r0, sl, r1, asr #6
    49c0:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    49c4:	0b000001 	bleq	49d0 <__exidx_end+0x1d4c>
    49c8:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    49cc:	841a4305 	ldrhi	r4, [sl], #-773	; 0xfffffcfb
    49d0:	01000001 	tsteq	r0, r1
    49d4:	030d0b01 	movweq	r0, #56065	; 0xdb01
    49d8:	45050000 	strmi	r0, [r5, #-0]
    49dc:	0001a50e 	andeq	sl, r1, lr, lsl #10
    49e0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    49e4:	0001ab04 	andeq	sl, r1, r4, lsl #22
    49e8:	08010200 	stmdaeq	r1, {r9}
    49ec:	000003aa 	andeq	r0, r0, sl, lsr #7
    49f0:	0001ab05 	andeq	sl, r1, r5, lsl #22
    49f4:	031b0b00 	tsteq	fp, #0, 22
    49f8:	45050000 	strmi	r0, [r5, #-0]
    49fc:	0001a51e 	andeq	sl, r1, lr, lsl r5
    4a00:	08010100 	stmdaeq	r1, {r8}
    4a04:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    4a08:	000001f6 	strdeq	r0, [r0], -r6
    4a0c:	0002d20a 	andeq	sp, r2, sl, lsl #4
    4a10:	0b900600 	bleq	fe406218 <_estack+0xde401218>
    4a14:	00000067 	andeq	r0, r0, r7, rrx
    4a18:	05ed0a00 	strbeq	r0, [sp, #2560]!	; 0xa00
    4a1c:	91060000 	mrsls	r0, (UNDEF: 6)
    4a20:	00008f08 	andeq	r8, r0, r8, lsl #30
    4a24:	710a0400 	tstvc	sl, r0, lsl #8
    4a28:	06000004 	streq	r0, [r0], -r4
    4a2c:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    4a30:	00060000 	andeq	r0, r6, r0
    4a34:	00041303 	andeq	r1, r4, r3, lsl #6
    4a38:	03930600 	orrseq	r0, r3, #0, 12
    4a3c:	000001c5 	andeq	r0, r0, r5, asr #3
    4a40:	0001f60c 	andeq	pc, r1, ip, lsl #12
    4a44:	00020d00 	andeq	r0, r2, r0, lsl #26
    4a48:	0b000d00 	bleq	7e50 <__exidx_end+0x51cc>
    4a4c:	00000036 	andeq	r0, r0, r6, lsr r0
    4a50:	020f9906 	andeq	r9, pc, #98304	; 0x18000
    4a54:	01000002 	tsteq	r0, r2
    4a58:	b6040701 	strlt	r0, [r4], -r1, lsl #14
    4a5c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4a60:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    4a64:	0000024b 	andeq	r0, r0, fp, asr #4
    4a68:	00046409 	andeq	r6, r4, r9, lsl #8
    4a6c:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    4a70:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a74:	00010701 	andeq	r0, r1, r1, lsl #14
    4a78:	00003109 	andeq	r3, r0, r9, lsl #2
    4a7c:	03940700 	orrseq	r0, r4, #0, 14
    4a80:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a84:	00000101 	andeq	r0, r0, r1, lsl #2
    4a88:	02840300 	addeq	r0, r4, #0, 6
    4a8c:	96070000 	strls	r0, [r7], -r0
    4a90:	00022103 	andeq	r2, r2, r3, lsl #2
    4a94:	024b0500 	subeq	r0, fp, #0, 10
    4a98:	570c0000 	strpl	r0, [ip, -r0]
    4a9c:	67000002 	strvs	r0, [r0, -r2]
    4aa0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4aa4:	025c0500 	subseq	r0, ip, #0, 10
    4aa8:	ed0b0000 	stc	0, cr0, [fp, #-0]
    4aac:	07000002 	streq	r0, [r0, -r2]
    4ab0:	0267179c 	rsbeq	r1, r7, #156, 14	; 0x2700000
    4ab4:	01010000 	mrseq	r0, (UNDEF: 1)
    4ab8:	00009b0c 	andeq	r9, r0, ip, lsl #22
    4abc:	00028500 	andeq	r8, r2, r0, lsl #10
    4ac0:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4ac4:	0000027a 	andeq	r0, r0, sl, ror r2
    4ac8:	0003930b 	andeq	r9, r3, fp, lsl #6
    4acc:	13060800 	movwne	r0, #26624	; 0x6800
    4ad0:	00000285 	andeq	r0, r0, r5, lsl #5
    4ad4:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
    4ad8:	06000001 	streq	r0, [r0], -r1
    4adc:	00bb0ec3 	adcseq	r0, fp, r3, asr #29
    4ae0:	01010000 	mrseq	r0, (UNDEF: 1)
    4ae4:	00047e0e 	andeq	r7, r4, lr, lsl #28
    4ae8:	016e0900 	cmneq	lr, r0, lsl #18
    4aec:	0002b310 	andeq	fp, r2, r0, lsl r3
    4af0:	b9040700 	stmdblt	r4, {r8, r9, sl}
    4af4:	0f000002 	svceq	0x00000002
    4af8:	0002c501 	andeq	ip, r2, r1, lsl #10
    4afc:	008f1000 	addeq	r1, pc, r0
    4b00:	0c000000 	stceq	0, cr0, [r0], {-0}
    4b04:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    4b08:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4b0c:	c505000d 	strgt	r0, [r5, #-13]
    4b10:	11000002 	tstne	r0, r2
    4b14:	00000444 	andeq	r0, r0, r4, asr #8
    4b18:	16017f09 	strne	r7, [r1], -r9, lsl #30
    4b1c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4b20:	8b110101 	blhi	444f2c <__ccfg+0x424f84>
    4b24:	09000003 	stmdbeq	r0, {r0, r1}
    4b28:	c7140182 	ldrgt	r0, [r4, -r2, lsl #3]
    4b2c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b30:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
    4b34:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    4b38:	00bb0e02 	adcseq	r0, fp, r2, lsl #28
    4b3c:	01010000 	mrseq	r0, (UNDEF: 1)
    4b40:	03090812 	movweq	r0, #38930	; 0x9812
    4b44:	03290903 			; <UNDEFINED> instruction: 0x03290903
    4b48:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    4b4c:	09000021 	stmdbeq	r0, {r0, r5}
    4b50:	8f070307 	svchi	0x00070307
    4b54:	00000000 	andeq	r0, r0, r0
    4b58:	00053f13 	andeq	r3, r5, r3, lsl pc
    4b5c:	03080900 	movweq	r0, #35072	; 0x8900
    4b60:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4b64:	0e000400 	cfcpyseq	mvf0, mvf0
    4b68:	00000264 	andeq	r0, r0, r4, ror #4
    4b6c:	03030909 	movweq	r0, #14601	; 0x3909
    4b70:	00000302 	andeq	r0, r0, r2, lsl #6
    4b74:	00048d14 	andeq	r8, r4, r4, lsl sp
    4b78:	0b093000 	bleq	250b80 <__ccfg+0x230bd8>
    4b7c:	03990803 	orrseq	r0, r9, #196608	; 0x30000
    4b80:	86130000 	ldrhi	r0, [r3], -r0
    4b84:	09000004 	stmdbeq	r0, {r2}
    4b88:	8f080314 	svchi	0x00080314
    4b8c:	00000000 	andeq	r0, r0, r0
    4b90:	0002dc13 	andeq	sp, r2, r3, lsl ip
    4b94:	03150900 	tsteq	r5, #0, 18
    4b98:	00008f08 	andeq	r8, r0, r8, lsl #30
    4b9c:	81130200 	tsthi	r3, r0, lsl #4
    4ba0:	09000004 	stmdbeq	r0, {r2}
    4ba4:	a60b0316 			; <UNDEFINED> instruction: 0xa60b0316
    4ba8:	04000002 	streq	r0, [r0], #-2
    4bac:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
    4bb0:	03170900 	tsteq	r7, #0, 18
    4bb4:	0000cc09 	andeq	ip, r0, r9, lsl #24
    4bb8:	3d130800 	ldccc	8, cr0, [r3, #-0]
    4bbc:	09000004 	stmdbeq	r0, {r2}
    4bc0:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    4bc4:	0c000003 	stceq	0, cr0, [r0], {3}
    4bc8:	0002d713 	andeq	sp, r2, r3, lsl r7
    4bcc:	03190900 	tsteq	r9, #0, 18
    4bd0:	0003a915 	andeq	sl, r3, r5, lsl r9
    4bd4:	0c002c00 	stceq	12, cr2, [r0], {-0}
    4bd8:	00000329 	andeq	r0, r0, r9, lsr #6
    4bdc:	000003a9 	andeq	r0, r0, r9, lsr #7
    4be0:	00008815 	andeq	r8, r0, r5, lsl r8
    4be4:	07000300 	streq	r0, [r0, -r0, lsl #6]
    4be8:	00033604 	andeq	r3, r3, r4, lsl #12
    4bec:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
    4bf0:	1c090000 	stcne	0, cr0, [r9], {-0}
    4bf4:	03361b03 	teqeq	r6, #3072	; 0xc00
    4bf8:	81110000 	tsthi	r1, r0
    4bfc:	09000003 	stmdbeq	r0, {r0, r1}
    4c00:	cb14031e 	blgt	505880 <__ccfg+0x4e58d8>
    4c04:	01000003 	tsteq	r0, r3
    4c08:	af040701 	svcge	0x00040701
    4c0c:	0b000003 	bleq	4c20 <__exidx_end+0x1f9c>
    4c10:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    4c14:	8f131d0a 	svchi	0x00131d0a
    4c18:	01000000 	mrseq	r0, (UNDEF: 0)
    4c1c:	071b0b01 	ldreq	r0, [fp, -r1, lsl #22]
    4c20:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    4c24:	0000a01a 	andeq	sl, r0, sl, lsl r0
    4c28:	0b010100 	bleq	45030 <__ccfg+0x25088>
    4c2c:	000008ab 	andeq	r0, r0, fp, lsr #17
    4c30:	a0241e0a 	eorge	r1, r4, sl, lsl #28
    4c34:	01000000 	mrseq	r0, (UNDEF: 0)
    4c38:	05da0b01 	ldrbeq	r0, [sl, #2817]	; 0xb01
    4c3c:	220a0000 	andcs	r0, sl, #0
    4c40:	0003cb14 	andeq	ip, r3, r4, lsl fp
    4c44:	16010100 	strne	r0, [r1], -r0, lsl #2
    4c48:	0000026c 	andeq	r0, r0, ip, ror #4
    4c4c:	05100d01 	ldreq	r0, [r0, #-3329]	; 0xfffff2ff
    4c50:	002c7c03 	eoreq	r7, ip, r3, lsl #24
    4c54:	db011700 	blle	4a85c <__ccfg+0x2a8b4>
    4c58:	01000011 	tsteq	r0, r1, lsl r0
    4c5c:	00010611 	andeq	r0, r1, r1, lsl r6
    4c60:	00000000 	andeq	r0, r0, r0
    4c64:	01000000 	mrseq	r0, (UNDEF: 0)
    4c68:	0004bb9c 	muleq	r4, ip, fp
    4c6c:	74731800 	ldrbtvc	r1, [r3], #-2048	; 0xfffff800
    4c70:	1c110100 	ldfnes	f0, [r1], {-0}
    4c74:	0000008f 	andeq	r0, r0, pc, lsl #1
    4c78:	00001fa9 	andeq	r1, r0, r9, lsr #31
    4c7c:	0011d619 	andseq	sp, r1, r9, lsl r6
    4c80:	2c110100 	ldfcss	f0, [r1], {-0}
    4c84:	0000021b 	andeq	r0, r0, fp, lsl r2
    4c88:	00001fc7 	andeq	r1, r0, r7, asr #31
    4c8c:	6c617618 	stclvs	6, cr7, [r1], #-96	; 0xffffffa0
    4c90:	3a110100 	bcc	445098 <__ccfg+0x4250f0>
    4c94:	000000d8 	ldrdeq	r0, [r0], -r8
    4c98:	00001fe5 	andeq	r1, r0, r5, ror #31
    4c9c:	0100701a 	tsteq	r0, sl, lsl r0
    4ca0:	04bb1213 	ldrteq	r1, [fp], #531	; 0x213
    4ca4:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    4ca8:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    4cac:	0000008f 	andeq	r0, r0, pc, lsl #1
    4cb0:	00002003 	andeq	r2, r0, r3
    4cb4:	0100761a 	tsteq	r0, sl, lsl r6
    4cb8:	00a50715 	adceq	r0, r5, r5, lsl r7
    4cbc:	d41c0000 	ldrle	r0, [ip], #-0
    4cc0:	00000004 	andeq	r0, r0, r4
    4cc4:	00000000 	andeq	r0, r0, r0
    4cc8:	01000000 	mrseq	r0, (UNDEF: 0)
    4ccc:	de1c031c 	mrcle	3, 0, r0, cr12, cr12, {0}
    4cd0:	00000004 	andeq	r0, r0, r4
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cdc:	e81d031f 	ldmda	sp, {r0, r1, r2, r3, r4, r8, r9}
    4ce0:	00000004 	andeq	r0, r0, r4
    4ce4:	30000000 	andcc	r0, r0, r0
    4ce8:	01000009 	tsteq	r0, r9
    4cec:	f61e0b26 			; <UNDEFINED> instruction: 0xf61e0b26
    4cf0:	16000004 	strne	r0, [r0], -r4
    4cf4:	00000020 	andeq	r0, r0, r0, lsr #32
    4cf8:	57040700 	strpl	r0, [r4, -r0, lsl #14]
    4cfc:	1f000002 	svcne	0x00000002
    4d00:	0011eb01 	andseq	lr, r1, r1, lsl #22
    4d04:	060f0100 	streq	r0, [pc], -r0, lsl #2
	...
    4d10:	fd209c01 	stc2	12, cr9, [r0, #-4]!
    4d14:	02000007 	andeq	r0, r0, #7
    4d18:	0301355b 	movweq	r3, #5467	; 0x155b
    4d1c:	00051020 	andeq	r1, r5, r0, lsr #32
    4d20:	35500200 	ldrbcc	r0, [r0, #-512]	; 0xfffffe00
    4d24:	c9210301 	stmdbgt	r1!, {r0, r8, r9}
    4d28:	03000011 	movweq	r0, #17
    4d2c:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    4d30:	03000000 	movweq	r0, #0
    4d34:	00016622 	andeq	r6, r1, r2, lsr #12
    4d38:	18a40300 	stmiane	r4!, {r8, r9}
    4d3c:	00000067 	andeq	r0, r0, r7, rrx
    4d40:	04f60000 	ldrbteq	r0, [r6], #0
    4d44:	00030000 	andeq	r0, r3, r0
    4d48:	000013f3 	strdeq	r1, [r0], -r3
    4d4c:	01700104 	cmneq	r0, r4, lsl #2
    4d50:	550c0000 	strpl	r0, [ip, #-0]
    4d54:	c0000012 	andgt	r0, r0, r2, lsl r0
    4d58:	d0000000 	andle	r0, r0, r0
    4d5c:	00000009 	andeq	r0, r0, r9
    4d60:	97000000 	strls	r0, [r0, -r0]
    4d64:	0200003b 	andeq	r0, r0, #59	; 0x3b
    4d68:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    4d6c:	02020000 	andeq	r0, r2, #0
    4d70:	0003dd05 	andeq	sp, r3, r5, lsl #26
    4d74:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4d78:	0000009d 	muleq	r0, sp, r0
    4d7c:	98050802 	stmdals	r5, {r1, fp}
    4d80:	03000000 	movweq	r0, #0
    4d84:	000021fc 	strdeq	r2, [r0], -ip
    4d88:	4d182e03 	ldcmi	14, cr2, [r8, #-12]
    4d8c:	02000000 	andeq	r0, r0, #0
    4d90:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    4d94:	ea030000 	b	c4d9c <__ccfg+0xa4df4>
    4d98:	03000020 	movweq	r0, #32
    4d9c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    4da0:	02020000 	andeq	r0, r2, #0
    4da4:	00027107 	andeq	r7, r2, r7, lsl #2
    4da8:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    4dac:	34030000 	strcc	r0, [r3], #-0
    4db0:	00007319 	andeq	r7, r0, r9, lsl r3
    4db4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4db8:	00000072 	andeq	r0, r0, r2, ror r0
    4dbc:	6d070802 	stcvs	8, cr0, [r7, #-8]
    4dc0:	04000000 	streq	r0, [r0], #-0
    4dc4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4dc8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4dcc:	00007707 	andeq	r7, r0, r7, lsl #14
    4dd0:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    4dd4:	27040000 	strcs	r0, [r4, -r0]
    4dd8:	00005412 	andeq	r5, r0, r2, lsl r4
    4ddc:	008f0500 	addeq	r0, pc, r0, lsl #10
    4de0:	8f060000 	svchi	0x00060000
    4de4:	03000000 	movweq	r0, #0
    4de8:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    4dec:	41122b04 	tstmi	r2, r4, lsl #22
    4df0:	06000000 	streq	r0, [r0], -r0
    4df4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4df8:	00161103 	andseq	r1, r6, r3, lsl #2
    4dfc:	122c0400 	eorne	r0, ip, #0, 8
    4e00:	00000067 	andeq	r0, r0, r7, rrx
    4e04:	0000b605 	andeq	fp, r0, r5, lsl #12
    4e08:	02a70300 	adceq	r0, r7, #0, 6
    4e0c:	2d040000 	stccs	0, cr0, [r4, #-0]
    4e10:	00006712 	andeq	r6, r0, r2, lsl r7
    4e14:	04080700 	streq	r0, [r8], #-1792	; 0xfffff900
    4e18:	01610932 	cmneq	r1, r2, lsr r9
    4e1c:	c2080000 	andgt	r0, r8, #0
    4e20:	04000002 	streq	r0, [r0], #-2
    4e24:	00a50734 	adceq	r0, r5, r4, lsr r7
    4e28:	01010000 	mrseq	r0, (UNDEF: 1)
    4e2c:	91080007 	tstls	r8, r7
    4e30:	04000000 	streq	r0, [r0], #-0
    4e34:	00a50335 	adceq	r0, r5, r5, lsr r3
    4e38:	01010000 	mrseq	r0, (UNDEF: 1)
    4e3c:	99080006 	stmdbls	r8, {r1, r2}
    4e40:	04000002 	streq	r0, [r0], #-2
    4e44:	00a50336 	adceq	r0, r5, r6, lsr r3
    4e48:	01010000 	mrseq	r0, (UNDEF: 1)
    4e4c:	0c080005 	stceq	0, cr0, [r8], {5}
    4e50:	04000004 	streq	r0, [r0], #-4
    4e54:	00a50337 	adceq	r0, r5, r7, lsr r3
    4e58:	01010000 	mrseq	r0, (UNDEF: 1)
    4e5c:	05080004 	streq	r0, [r8, #-4]
    4e60:	04000004 	streq	r0, [r0], #-4
    4e64:	00a50338 	adceq	r0, r5, r8, lsr r3
    4e68:	04010000 	streq	r0, [r1], #-0
    4e6c:	f6090000 			; <UNDEFINED> instruction: 0xf6090000
    4e70:	04000003 	streq	r0, [r0], #-3
    4e74:	00a5073a 	adceq	r0, r5, sl, lsr r7
    4e78:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4e7c:	00000040 	andeq	r0, r0, r0, asr #32
    4e80:	a5033c04 	strge	r3, [r3, #-3076]	; 0xfffff3fc
    4e84:	02000000 	andeq	r0, r0, #0
    4e88:	00006609 	andeq	r6, r0, r9, lsl #12
    4e8c:	033d0400 	teqeq	sp, #0, 8
    4e90:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e94:	01540903 	cmpeq	r4, r3, lsl #18
    4e98:	3f040000 	svccc	0x00040000
    4e9c:	0000b608 	andeq	fp, r0, r8, lsl #12
    4ea0:	03000400 	movweq	r0, #1024	; 0x400
    4ea4:	00000434 	andeq	r0, r0, r4, lsr r4
    4ea8:	d3034104 	movwle	r4, #12548	; 0x3104
    4eac:	06000000 	streq	r0, [r0], -r0
    4eb0:	00000161 	andeq	r0, r0, r1, ror #2
    4eb4:	0002b60a 	andeq	fp, r2, sl, lsl #12
    4eb8:	1a430400 	bne	10c5ec0 <__ccfg+0x10a5f18>
    4ebc:	0000016d 	andeq	r0, r0, sp, ror #2
    4ec0:	0d0a0101 	stfeqs	f0, [sl, #-4]
    4ec4:	04000003 	streq	r0, [r0], #-3
    4ec8:	018e0e45 	orreq	r0, lr, r5, asr #28
    4ecc:	01010000 	mrseq	r0, (UNDEF: 1)
    4ed0:	0194040b 	orrseq	r0, r4, fp, lsl #8
    4ed4:	01020000 	mrseq	r0, (UNDEF: 2)
    4ed8:	0003aa08 	andeq	sl, r3, r8, lsl #20
    4edc:	01940500 	orrseq	r0, r4, r0, lsl #10
    4ee0:	1b0a0000 	blne	284ee8 <__ccfg+0x264f40>
    4ee4:	04000003 	streq	r0, [r0], #-3
    4ee8:	018e1e45 	orreq	r1, lr, r5, asr #28
    4eec:	01010000 	mrseq	r0, (UNDEF: 1)
    4ef0:	8f050807 	svchi	0x00050807
    4ef4:	0001df09 	andeq	sp, r1, r9, lsl #30
    4ef8:	02d20900 	sbcseq	r0, r2, #0, 18
    4efc:	90050000 	andls	r0, r5, r0
    4f00:	0000670b 	andeq	r6, r0, fp, lsl #14
    4f04:	ed090000 	stc	0, cr0, [r9, #-0]
    4f08:	05000005 	streq	r0, [r0, #-5]
    4f0c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    4f10:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4f14:	00000471 	andeq	r0, r0, r1, ror r4
    4f18:	b1109205 	tstlt	r0, r5, lsl #4
    4f1c:	06000000 	streq	r0, [r0], -r0
    4f20:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    4f24:	93050000 	movwls	r0, #20480	; 0x5000
    4f28:	0001ae03 	andeq	sl, r1, r3, lsl #28
    4f2c:	01df0c00 	bicseq	r0, pc, r0, lsl #24
    4f30:	01f60000 	mvnseq	r0, r0
    4f34:	000d0000 	andeq	r0, sp, r0
    4f38:	0000360a 	andeq	r3, r0, sl, lsl #12
    4f3c:	0f990500 	svceq	0x00990500
    4f40:	000001eb 	andeq	r0, r0, fp, ror #3
    4f44:	01070101 	tsteq	r7, r1, lsl #2
    4f48:	2e099106 	mvfcse	f1, f6
    4f4c:	08000002 	stmdaeq	r0, {r1}
    4f50:	00000464 	andeq	r0, r0, r4, ror #8
    4f54:	a5079306 	strge	r9, [r7, #-774]	; 0xfffffcfa
    4f58:	01000000 	mrseq	r0, (UNDEF: 0)
    4f5c:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    4f60:	00000031 	andeq	r0, r0, r1, lsr r0
    4f64:	a5039406 	strge	r9, [r3, #-1030]	; 0xfffffbfa
    4f68:	01000000 	mrseq	r0, (UNDEF: 0)
    4f6c:	00000001 	andeq	r0, r0, r1
    4f70:	00028403 	andeq	r8, r2, r3, lsl #8
    4f74:	03960600 	orrseq	r0, r6, #0, 12
    4f78:	00000204 	andeq	r0, r0, r4, lsl #4
    4f7c:	00022e05 	andeq	r2, r2, r5, lsl #28
    4f80:	023a0c00 	eorseq	r0, sl, #0, 24
    4f84:	024a0000 	subeq	r0, sl, #0
    4f88:	000d0000 	andeq	r0, sp, r0
    4f8c:	00023f05 	andeq	r3, r2, r5, lsl #30
    4f90:	02ed0a00 	rsceq	r0, sp, #0, 20
    4f94:	9c060000 	stcls	0, cr0, [r6], {-0}
    4f98:	00024a17 	andeq	r4, r2, r7, lsl sl
    4f9c:	0c010100 	stfeqs	f0, [r1], {-0}
    4fa0:	0000009b 	muleq	r0, fp, r0
    4fa4:	00000268 	andeq	r0, r0, r8, ror #4
    4fa8:	5d05000d 	stcpl	0, cr0, [r5, #-52]	; 0xffffffcc
    4fac:	0a000002 	beq	4fbc <__exidx_end+0x2338>
    4fb0:	00000393 	muleq	r0, r3, r3
    4fb4:	68130607 	ldmdavs	r3, {r0, r1, r2, r9, sl}
    4fb8:	01000002 	tsteq	r0, r2
    4fbc:	01340a01 	teqeq	r4, r1, lsl #20
    4fc0:	c3050000 	movwgt	r0, #20480	; 0x5000
    4fc4:	0000b60e 	andeq	fp, r0, lr, lsl #12
    4fc8:	0e010100 	adfeqs	f0, f1, f0
    4fcc:	0000047e 	andeq	r0, r0, lr, ror r4
    4fd0:	10016e08 	andne	r6, r1, r8, lsl #28
    4fd4:	00000296 	muleq	r0, r6, r2
    4fd8:	029c040b 	addseq	r0, ip, #184549376	; 0xb000000
    4fdc:	010f0000 	mrseq	r0, CPSR
    4fe0:	000002a8 	andeq	r0, r0, r8, lsr #5
    4fe4:	00008f10 	andeq	r8, r0, r0, lsl pc
    4fe8:	9b0c0000 	blls	304ff0 <__ccfg+0x2e5048>
    4fec:	b3000001 	movwlt	r0, #1
    4ff0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4ff4:	02a80500 	adceq	r0, r8, #0, 10
    4ff8:	44110000 	ldrmi	r0, [r1], #-0
    4ffc:	08000004 	stmdaeq	r0, {r2}
    5000:	b316017f 	tstlt	r6, #-1073741793	; 0xc000001f
    5004:	01000002 	tsteq	r0, r2
    5008:	038b1101 	orreq	r1, fp, #1073741824	; 0x40000000
    500c:	82080000 	andhi	r0, r8, #0
    5010:	00c21401 	sbceq	r1, r2, r1, lsl #8
    5014:	01010000 	mrseq	r0, (UNDEF: 1)
    5018:	00046911 	andeq	r6, r4, r1, lsl r9
    501c:	02d80800 	sbcseq	r0, r8, #0, 16
    5020:	0000b60e 	andeq	fp, r0, lr, lsl #12
    5024:	12010100 	andne	r0, r1, #0, 2
    5028:	03030808 	movweq	r0, #14344	; 0x3808
    502c:	00030c09 	andeq	r0, r3, r9, lsl #24
    5030:	21f41300 	mvnscs	r1, r0, lsl #6
    5034:	07080000 	streq	r0, [r8, -r0]
    5038:	008f0703 	addeq	r0, pc, r3, lsl #14
    503c:	13000000 	movwne	r0, #0
    5040:	0000053f 	andeq	r0, r0, pc, lsr r5
    5044:	08030808 	stmdaeq	r3, {r3, fp}
    5048:	000000c7 	andeq	r0, r0, r7, asr #1
    504c:	640e0004 	strvs	r0, [lr], #-4
    5050:	08000002 	stmdaeq	r0, {r1}
    5054:	e5030309 	str	r0, [r3, #-777]	; 0xfffffcf7
    5058:	14000002 	strne	r0, [r0], #-2
    505c:	0000048d 	andeq	r0, r0, sp, lsl #9
    5060:	030b0830 	movweq	r0, #47152	; 0xb830
    5064:	00037c08 	andeq	r7, r3, r8, lsl #24
    5068:	04861300 	streq	r1, [r6], #768	; 0x300
    506c:	14080000 	strne	r0, [r8], #-0
    5070:	008f0803 	addeq	r0, pc, r3, lsl #16
    5074:	13000000 	movwne	r0, #0
    5078:	000002dc 	ldrdeq	r0, [r0], -ip
    507c:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    5080:	0000008f 	andeq	r0, r0, pc, lsl #1
    5084:	04811302 	streq	r1, [r1], #770	; 0x302
    5088:	16080000 	strne	r0, [r8], -r0
    508c:	02890b03 	addeq	r0, r9, #3072	; 0xc00
    5090:	13040000 	movwne	r0, #16384	; 0x4000
    5094:	00000f3f 	andeq	r0, r0, pc, lsr pc
    5098:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    509c:	000000c7 	andeq	r0, r0, r7, asr #1
    50a0:	043d1308 	ldrteq	r1, [sp], #-776	; 0xfffffcf8
    50a4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    50a8:	037c0f03 	cmneq	ip, #3, 30
    50ac:	130c0000 	movwne	r0, #49152	; 0xc000
    50b0:	000002d7 	ldrdeq	r0, [r0], -r7
    50b4:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    50b8:	0000038c 	andeq	r0, r0, ip, lsl #7
    50bc:	0c0c002c 	stceq	0, cr0, [ip], {44}	; 0x2c
    50c0:	8c000003 	stchi	0, cr0, [r0], {3}
    50c4:	15000003 	strne	r0, [r0, #-3]
    50c8:	00000088 	andeq	r0, r0, r8, lsl #1
    50cc:	040b0003 	streq	r0, [fp], #-3
    50d0:	00000319 	andeq	r0, r0, r9, lsl r3
    50d4:	0004980e 	andeq	r9, r4, lr, lsl #16
    50d8:	031c0800 	tsteq	ip, #0, 16
    50dc:	0003191b 	andeq	r1, r3, fp, lsl r9
    50e0:	03811100 	orreq	r1, r1, #0, 2
    50e4:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    50e8:	03ae1403 			; <UNDEFINED> instruction: 0x03ae1403
    50ec:	01010000 	mrseq	r0, (UNDEF: 1)
    50f0:	0392040b 	orrseq	r0, r2, #184549376	; 0xb000000
    50f4:	b10a0000 	mrslt	r0, (UNDEF: 10)
    50f8:	09000004 	stmdbeq	r0, {r2}
    50fc:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    5100:	01010000 	mrseq	r0, (UNDEF: 1)
    5104:	00071b0a 	andeq	r1, r7, sl, lsl #22
    5108:	1a1e0900 	bne	787510 <__ccfg+0x767568>
    510c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5110:	ab0a0101 	blge	28551c <__ccfg+0x265574>
    5114:	09000008 	stmdbeq	r0, {r3}
    5118:	00a0241e 	adceq	r2, r0, lr, lsl r4
    511c:	01010000 	mrseq	r0, (UNDEF: 1)
    5120:	0005da0a 	andeq	sp, r5, sl, lsl #20
    5124:	14220900 	strtne	r0, [r2], #-2304	; 0xfffff700
    5128:	000003ae 	andeq	r0, r0, lr, lsr #7
    512c:	44160101 	ldrmi	r0, [r6], #-257	; 0xfffffeff
    5130:	01000012 	tsteq	r0, r2, lsl r0
    5134:	02960f08 	addseq	r0, r6, #8, 30
    5138:	03050000 	movweq	r0, #20480	; 0x5000
    513c:	00000000 	andeq	r0, r0, r0
    5140:	00129116 	andseq	r9, r2, r6, lsl r1
    5144:	0d090100 	stfeqs	f0, [r9, #-0]
    5148:	0000008f 	andeq	r0, r0, pc, lsl #1
    514c:	00000305 	andeq	r0, r0, r5, lsl #6
    5150:	6d170000 	ldcvs	0, cr0, [r7, #-0]
    5154:	01000002 	tsteq	r0, r2
    5158:	03050c0a 	movweq	r0, #23562	; 0x5c0a
    515c:	00002c80 	andeq	r2, r0, r0, lsl #25
    5160:	12a60118 	adcne	r0, r6, #24, 2
    5164:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    5168:	00000106 	andeq	r0, r0, r6, lsl #2
    516c:	00000000 	andeq	r0, r0, r0
    5170:	9c010000 	stcls	0, cr0, [r1], {-0}
    5174:	00000447 	andeq	r0, r0, r7, asr #8
    5178:	74636119 	strbtvc	r6, [r3], #-281	; 0xfffffee7
    517c:	1d580100 	ldfnee	f0, [r8, #-0]
    5180:	00000296 	muleq	r0, r6, r2
    5184:	00002029 	andeq	r2, r0, r9, lsr #32
    5188:	99011800 	stmdbls	r1, {fp, ip}
    518c:	01000012 	tsteq	r0, r2, lsl r0
    5190:	0001011c 	andeq	r0, r1, ip, lsl r1
    5194:	00000000 	andeq	r0, r0, r0
    5198:	01000000 	mrseq	r0, (UNDEF: 0)
    519c:	0004de9c 	muleq	r4, ip, lr
    51a0:	00b81a00 	adcseq	r1, r8, r0, lsl #20
    51a4:	1c010000 	stcne	0, cr0, [r1], {-0}
    51a8:	00008f01 	andeq	r8, r0, r1, lsl #30
    51ac:	00206500 	eoreq	r6, r0, r0, lsl #10
    51b0:	123f1b00 	eorsne	r1, pc, #0, 22
    51b4:	21010000 	mrscs	r0, (UNDEF: 1)
    51b8:	00000001 	andeq	r0, r0, r1
    51bc:	124c1b00 	subne	r1, ip, #0, 22
    51c0:	30010000 	andcc	r0, r1, r0
    51c4:	00000001 	andeq	r0, r0, r1
    51c8:	13a31b00 			; <UNDEFINED> instruction: 0x13a31b00
    51cc:	37010000 	strcc	r0, [r1, -r0]
    51d0:	00000001 	andeq	r0, r0, r1
    51d4:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    51d8:	00000000 	andeq	r0, r0, r0
    51dc:	09700000 	ldmdbeq	r0!, {}^	; <UNPREDICTABLE>
    51e0:	2b010000 	blcs	451e8 <__ccfg+0x25240>
    51e4:	0004ad07 	andeq	sl, r4, r7, lsl #26
    51e8:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    51ec:	1c000000 	stcne	0, cr0, [r0], {-0}
    51f0:	000004de 	ldrdeq	r0, [r0], -lr
    51f4:	00000000 	andeq	r0, r0, r0
    51f8:	00000998 	muleq	r0, r8, r9
    51fc:	c7073e01 	strgt	r3, [r7, -r1, lsl #28]
    5200:	1d000004 	stcne	0, cr0, [r0, #-16]
    5204:	000004ec 	andeq	r0, r0, ip, ror #9
    5208:	04de1e00 	ldrbeq	r1, [lr], #3584	; 0xe00
    520c:	00000000 	andeq	r0, r0, r0
    5210:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
    5214:	4a010000 	bmi	4521c <__ccfg+0x25274>
    5218:	04ec1d07 	strbteq	r1, [ip], #3335	; 0xd07
    521c:	00000000 	andeq	r0, r0, r0
    5220:	0011c91f 	andseq	ip, r1, pc, lsl r9
    5224:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    5228:	00006701 	andeq	r6, r0, r1, lsl #14
    522c:	66200300 	strtvs	r0, [r0], -r0, lsl #6
    5230:	02000001 	andeq	r0, r0, #1
    5234:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    5238:	00000000 	andeq	r0, r0, r0
    523c:	00000aa7 	andeq	r0, r0, r7, lsr #21
    5240:	15be0003 	ldrne	r0, [lr, #3]!
    5244:	01040000 	mrseq	r0, (UNDEF: 4)
    5248:	00000170 	andeq	r0, r0, r0, ror r1
    524c:	0013310c 	andseq	r3, r3, ip, lsl #2
    5250:	0000c000 	andeq	ip, r0, r0
    5254:	000b7000 	andeq	r7, fp, r0
    5258:	00000000 	andeq	r0, r0, r0
    525c:	003ed700 	eorseq	sp, lr, r0, lsl #14
    5260:	06010200 	streq	r0, [r1], -r0, lsl #4
    5264:	000003a3 	andeq	r0, r0, r3, lsr #7
    5268:	dd050202 	sfmle	f0, 4, [r5, #-8]
    526c:	02000003 	andeq	r0, r0, #3
    5270:	009d0504 	addseq	r0, sp, r4, lsl #10
    5274:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5278:	00009805 	andeq	r9, r0, r5, lsl #16
    527c:	21fc0300 	mvnscs	r0, r0, lsl #6
    5280:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    5284:	00004d18 	andeq	r4, r0, r8, lsl sp
    5288:	08010200 	stmdaeq	r1, {r9}
    528c:	000003a1 	andeq	r0, r0, r1, lsr #7
    5290:	0020ea03 	eoreq	lr, r0, r3, lsl #20
    5294:	19310400 	ldmdbne	r1!, {sl}
    5298:	00000060 	andeq	r0, r0, r0, rrx
    529c:	71070202 	tstvc	r7, r2, lsl #4
    52a0:	03000002 	movweq	r0, #2
    52a4:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    52a8:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    52ac:	02000000 	andeq	r0, r0, #0
    52b0:	00720704 	rsbseq	r0, r2, r4, lsl #14
    52b4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    52b8:	00006d07 	andeq	r6, r0, r7, lsl #26
    52bc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    52c0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    52c4:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    52c8:	03000000 	movweq	r0, #0
    52cc:	000003fd 	strdeq	r0, [r0], -sp
    52d0:	41122605 	tstmi	r2, r5, lsl #12
    52d4:	03000000 	movweq	r0, #0
    52d8:	000015c0 	andeq	r1, r0, r0, asr #11
    52dc:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    52e0:	05000000 	streq	r0, [r0, #-0]
    52e4:	0000009b 	muleq	r0, fp, r0
    52e8:	00009b06 	andeq	r9, r0, r6, lsl #22
    52ec:	13b80300 			; <UNDEFINED> instruction: 0x13b80300
    52f0:	2b050000 	blcs	1452f8 <__ccfg+0x125350>
    52f4:	00004112 	andeq	r4, r0, r2, lsl r1
    52f8:	00b10600 	adcseq	r0, r1, r0, lsl #12
    52fc:	b1050000 	mrslt	r0, (UNDEF: 5)
    5300:	03000000 	movweq	r0, #0
    5304:	00001611 	andeq	r1, r0, r1, lsl r6
    5308:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    530c:	05000000 	streq	r0, [r0, #-0]
    5310:	000000c7 	andeq	r0, r0, r7, asr #1
    5314:	0002a703 	andeq	sl, r2, r3, lsl #14
    5318:	122d0500 	eorne	r0, sp, #0, 10
    531c:	00000067 	andeq	r0, r0, r7, rrx
    5320:	32050807 	andcc	r0, r5, #458752	; 0x70000
    5324:	00017209 	andeq	r7, r1, r9, lsl #4
    5328:	02c20800 	sbceq	r0, r2, #0, 16
    532c:	34050000 	strcc	r0, [r5], #-0
    5330:	0000b107 	andeq	fp, r0, r7, lsl #2
    5334:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5338:	00910800 	addseq	r0, r1, r0, lsl #16
    533c:	35050000 	strcc	r0, [r5, #-0]
    5340:	0000b103 	andeq	fp, r0, r3, lsl #2
    5344:	06010100 	streq	r0, [r1], -r0, lsl #2
    5348:	02990800 	addseq	r0, r9, #0, 16
    534c:	36050000 	strcc	r0, [r5], -r0
    5350:	0000b103 	andeq	fp, r0, r3, lsl #2
    5354:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5358:	040c0800 	streq	r0, [ip], #-2048	; 0xfffff800
    535c:	37050000 	strcc	r0, [r5, -r0]
    5360:	0000b103 	andeq	fp, r0, r3, lsl #2
    5364:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5368:	04050800 	streq	r0, [r5], #-2048	; 0xfffff800
    536c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    5370:	0000b103 	andeq	fp, r0, r3, lsl #2
    5374:	00040100 	andeq	r0, r4, r0, lsl #2
    5378:	03f60900 	mvnseq	r0, #0, 18
    537c:	3a050000 	bcc	145384 <__ccfg+0x1253dc>
    5380:	0000b107 	andeq	fp, r0, r7, lsl #2
    5384:	40090100 	andmi	r0, r9, r0, lsl #2
    5388:	05000000 	streq	r0, [r0, #-0]
    538c:	00b1033c 	adcseq	r0, r1, ip, lsr r3
    5390:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5394:	00000066 	andeq	r0, r0, r6, rrx
    5398:	b1033d05 	tstlt	r3, r5, lsl #26
    539c:	03000000 	movweq	r0, #0
    53a0:	00015409 	andeq	r5, r1, r9, lsl #8
    53a4:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    53a8:	000000c7 	andeq	r0, r0, r7, asr #1
    53ac:	34030004 	strcc	r0, [r3], #-4
    53b0:	05000004 	streq	r0, [r0, #-4]
    53b4:	00e40341 	rsceq	r0, r4, r1, asr #6
    53b8:	72060000 	andvc	r0, r6, #0
    53bc:	0a000001 	beq	53c8 <__exidx_end+0x2744>
    53c0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    53c4:	7e1a4305 	cdpvc	3, 1, cr4, cr10, cr5, {0}
    53c8:	01000001 	tsteq	r0, r1
    53cc:	030d0a01 	movweq	r0, #55809	; 0xda01
    53d0:	45050000 	strmi	r0, [r5, #-0]
    53d4:	00019f0e 	andeq	r9, r1, lr, lsl #30
    53d8:	0b010100 	bleq	457e0 <__ccfg+0x25838>
    53dc:	0001a504 	andeq	sl, r1, r4, lsl #10
    53e0:	08010200 	stmdaeq	r1, {r9}
    53e4:	000003aa 	andeq	r0, r0, sl, lsr #7
    53e8:	0001a505 	andeq	sl, r1, r5, lsl #10
    53ec:	031b0a00 	tsteq	fp, #0, 20
    53f0:	45050000 	strmi	r0, [r5, #-0]
    53f4:	00019f1e 	andeq	r9, r1, lr, lsl pc
    53f8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    53fc:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    5400:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5404:	0002d209 	andeq	sp, r2, r9, lsl #4
    5408:	0b900600 	bleq	fe406c10 <_estack+0xde401c10>
    540c:	00000067 	andeq	r0, r0, r7, rrx
    5410:	05ed0900 	strbeq	r0, [sp, #2304]!	; 0x900
    5414:	91060000 	mrsls	r0, (UNDEF: 6)
    5418:	00009b08 	andeq	r9, r0, r8, lsl #22
    541c:	71090400 	tstvc	r9, r0, lsl #8
    5420:	06000004 	streq	r0, [r0], -r4
    5424:	00bd1092 	umlalseq	r1, sp, r2, r0
    5428:	00060000 	andeq	r0, r6, r0
    542c:	00041303 	andeq	r1, r4, r3, lsl #6
    5430:	03930600 	orrseq	r0, r3, #0, 12
    5434:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    5438:	0001f00c 	andeq	pc, r1, ip
    543c:	00020700 	andeq	r0, r2, r0, lsl #14
    5440:	0a000d00 	beq	8848 <__exidx_end+0x5bc4>
    5444:	00000036 	andeq	r0, r0, r6, lsr r0
    5448:	fc0f9906 	stc2	9, cr9, [pc], {6}	; <UNPREDICTABLE>
    544c:	01000001 	tsteq	r0, r1
    5450:	c2040b01 	andgt	r0, r4, #1024	; 0x400
    5454:	07000000 	streq	r0, [r0, -r0]
    5458:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    545c:	00000245 	andeq	r0, r0, r5, asr #4
    5460:	00046408 	andeq	r6, r4, r8, lsl #8
    5464:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    5468:	000000b1 	strheq	r0, [r0], -r1
    546c:	00010701 	andeq	r0, r1, r1, lsl #14
    5470:	00003108 	andeq	r3, r0, r8, lsl #2
    5474:	03940700 	orrseq	r0, r4, #0, 14
    5478:	000000b1 	strheq	r0, [r0], -r1
    547c:	00000101 	andeq	r0, r0, r1, lsl #2
    5480:	02840300 	addeq	r0, r4, #0, 6
    5484:	96070000 	strls	r0, [r7], -r0
    5488:	00021b03 	andeq	r1, r2, r3, lsl #22
    548c:	02450500 	subeq	r0, r5, #0, 10
    5490:	510c0000 	mrspl	r0, (UNDEF: 12)
    5494:	61000002 	tstvs	r0, r2
    5498:	0d000002 	stceq	0, cr0, [r0, #-8]
    549c:	02560500 	subseq	r0, r6, #0, 10
    54a0:	ed0a0000 	stc	0, cr0, [sl, #-0]
    54a4:	07000002 	streq	r0, [r0, -r2]
    54a8:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
    54ac:	01010000 	mrseq	r0, (UNDEF: 1)
    54b0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    54b4:	00027f00 	andeq	r7, r2, r0, lsl #30
    54b8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    54bc:	00000274 	andeq	r0, r0, r4, ror r2
    54c0:	0003930a 	andeq	r9, r3, sl, lsl #6
    54c4:	13060800 	movwne	r0, #26624	; 0x6800
    54c8:	0000027f 	andeq	r0, r0, pc, ror r2
    54cc:	340a0101 	strcc	r0, [sl], #-257	; 0xfffffeff
    54d0:	06000001 	streq	r0, [r0], -r1
    54d4:	00c70ec3 	sbceq	r0, r7, r3, asr #29
    54d8:	01010000 	mrseq	r0, (UNDEF: 1)
    54dc:	00047e0e 	andeq	r7, r4, lr, lsl #28
    54e0:	016e0900 	cmneq	lr, r0, lsl #18
    54e4:	0002ad10 	andeq	sl, r2, r0, lsl sp
    54e8:	b3040b00 	movwlt	r0, #19200	; 0x4b00
    54ec:	0f000002 	svceq	0x00000002
    54f0:	0002bf01 	andeq	fp, r2, r1, lsl #30
    54f4:	009b1000 	addseq	r1, fp, r0
    54f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    54fc:	000001ac 	andeq	r0, r0, ip, lsr #3
    5500:	000002ca 	andeq	r0, r0, sl, asr #5
    5504:	bf05000d 	svclt	0x0005000d
    5508:	11000002 	tstne	r0, r2
    550c:	00000444 	andeq	r0, r0, r4, asr #8
    5510:	16017f09 	strne	r7, [r1], -r9, lsl #30
    5514:	000002ca 	andeq	r0, r0, sl, asr #5
    5518:	8b110101 	blhi	445924 <__ccfg+0x42597c>
    551c:	09000003 	stmdbeq	r0, {r0, r1}
    5520:	d3140182 	tstle	r4, #-2147483616	; 0x80000020
    5524:	01000000 	mrseq	r0, (UNDEF: 0)
    5528:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
    552c:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    5530:	00c70e02 	sbceq	r0, r7, r2, lsl #28
    5534:	01010000 	mrseq	r0, (UNDEF: 1)
    5538:	03090812 	movweq	r0, #38930	; 0x9812
    553c:	03230903 			; <UNDEFINED> instruction: 0x03230903
    5540:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    5544:	09000021 	stmdbeq	r0, {r0, r5}
    5548:	9b070307 	blls	1c616c <__ccfg+0x1a61c4>
    554c:	00000000 	andeq	r0, r0, r0
    5550:	00053f13 	andeq	r3, r5, r3, lsl pc
    5554:	03080900 	movweq	r0, #35072	; 0x8900
    5558:	0000d808 	andeq	sp, r0, r8, lsl #16
    555c:	0e000400 	cfcpyseq	mvf0, mvf0
    5560:	00000264 	andeq	r0, r0, r4, ror #4
    5564:	03030909 	movweq	r0, #14601	; 0x3909
    5568:	000002fc 	strdeq	r0, [r0], -ip
    556c:	00048d14 	andeq	r8, r4, r4, lsl sp
    5570:	0b093000 	bleq	251578 <__ccfg+0x2315d0>
    5574:	03930803 	orrseq	r0, r3, #196608	; 0x30000
    5578:	86130000 	ldrhi	r0, [r3], -r0
    557c:	09000004 	stmdbeq	r0, {r2}
    5580:	9b080314 	blls	2061d8 <__ccfg+0x1e6230>
    5584:	00000000 	andeq	r0, r0, r0
    5588:	0002dc13 	andeq	sp, r2, r3, lsl ip
    558c:	03150900 	tsteq	r5, #0, 18
    5590:	00009b08 	andeq	r9, r0, r8, lsl #22
    5594:	81130200 	tsthi	r3, r0, lsl #4
    5598:	09000004 	stmdbeq	r0, {r2}
    559c:	a00b0316 	andge	r0, fp, r6, lsl r3
    55a0:	04000002 	streq	r0, [r0], #-2
    55a4:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
    55a8:	03170900 	tsteq	r7, #0, 18
    55ac:	0000d809 	andeq	sp, r0, r9, lsl #16
    55b0:	3d130800 	ldccc	8, cr0, [r3, #-0]
    55b4:	09000004 	stmdbeq	r0, {r2}
    55b8:	930f0318 	movwls	r0, #62232	; 0xf318
    55bc:	0c000003 	stceq	0, cr0, [r0], {3}
    55c0:	0002d713 	andeq	sp, r2, r3, lsl r7
    55c4:	03190900 	tsteq	r9, #0, 18
    55c8:	0003a315 	andeq	sl, r3, r5, lsl r3
    55cc:	0c002c00 	stceq	12, cr2, [r0], {-0}
    55d0:	00000323 	andeq	r0, r0, r3, lsr #6
    55d4:	000003a3 	andeq	r0, r0, r3, lsr #7
    55d8:	00008815 	andeq	r8, r0, r5, lsl r8
    55dc:	0b000300 	bleq	61e4 <__exidx_end+0x3560>
    55e0:	00033004 	andeq	r3, r3, r4
    55e4:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
    55e8:	1c090000 	stcne	0, cr0, [r9], {-0}
    55ec:	03301b03 	teqeq	r0, #3072	; 0xc00
    55f0:	81110000 	tsthi	r1, r0
    55f4:	09000003 	stmdbeq	r0, {r0, r1}
    55f8:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
    55fc:	01000003 	tsteq	r0, r3
    5600:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
    5604:	0a000003 	beq	5618 <__exidx_end+0x2994>
    5608:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    560c:	9b131d0a 	blls	4cca3c <__ccfg+0x4aca94>
    5610:	01000000 	mrseq	r0, (UNDEF: 0)
    5614:	071b0a01 	ldreq	r0, [fp, -r1, lsl #20]
    5618:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    561c:	0000ac1a 	andeq	sl, r0, sl, lsl ip
    5620:	0a010100 	beq	45a28 <__ccfg+0x25a80>
    5624:	000008ab 	andeq	r0, r0, fp, lsr #17
    5628:	ac241e0a 	stcge	14, cr1, [r4], #-40	; 0xffffffd8
    562c:	01000000 	mrseq	r0, (UNDEF: 0)
    5630:	05da0a01 	ldrbeq	r0, [sl, #2561]	; 0xa01
    5634:	220a0000 	andcs	r0, sl, #0
    5638:	0003c514 	andeq	ip, r3, r4, lsl r5
    563c:	16010100 	strne	r0, [r1], -r0, lsl #2
    5640:	00000386 	andeq	r0, r0, r6, lsl #7
    5644:	c70f0f01 	strgt	r0, [pc, -r1, lsl #30]
    5648:	05000000 	streq	r0, [r0, #-0]
    564c:	00000003 	andeq	r0, r0, r3
    5650:	13091600 	movwne	r1, #38400	; 0x9600
    5654:	0f010000 	svceq	0x00010000
    5658:	0000c715 	andeq	ip, r0, r5, lsl r7
    565c:	00030500 	andeq	r0, r3, r0, lsl #10
    5660:	16000000 	strne	r0, [r0], -r0
    5664:	0000138f 	andeq	r1, r0, pc, lsl #7
    5668:	15141001 	ldrne	r1, [r4, #-1]
    566c:	05000002 	streq	r0, [r0, #-2]
    5670:	00000003 	andeq	r0, r0, r3
    5674:	12ef1600 	rscne	r1, pc, #0, 12
    5678:	12010000 	andne	r0, r1, #0
    567c:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5680:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    5684:	16200000 	strtne	r0, [r0], -r0
    5688:	00001383 	andeq	r1, r0, r3, lsl #7
    568c:	b1031301 	tstlt	r3, r1, lsl #6
    5690:	05000000 	streq	r0, [r0, #-0]
    5694:	00003503 	andeq	r3, r0, r3, lsl #10
    5698:	0be51620 	bleq	ff94af20 <_estack+0xdf945f20>
    569c:	15010000 	strne	r0, [r1, #-0]
    56a0:	00009b0d 	andeq	r9, r0, sp, lsl #22
    56a4:	00030500 	andeq	r0, r3, r0, lsl #10
    56a8:	17000000 	strne	r0, [r0, -r0]
    56ac:	0012bb01 	andseq	fp, r2, r1, lsl #22
    56b0:	06130300 	ldreq	r0, [r3], -r0, lsl #6
	...
    56bc:	01189c01 	tsteq	r8, r1, lsl #24
    56c0:	00001394 	muleq	r0, r4, r3
    56c4:	01070803 	tsteq	r7, r3, lsl #16
    56c8:	000000c7 	andeq	r0, r0, r7, asr #1
	...
    56d4:	04bc9c01 	ldrteq	r9, [ip], #3073	; 0xc01
    56d8:	65190000 	ldrvs	r0, [r9, #-0]
    56dc:	08030072 	stmdaeq	r3, {r1, r4, r5, r6}
    56e0:	0004bc19 	andeq	fp, r4, r9, lsl ip
    56e4:	00209900 	eoreq	r9, r0, r0, lsl #18
    56e8:	72651a00 	rsbvc	r1, r5, #0, 20
    56ec:	08030075 	stmdaeq	r3, {r0, r2, r4, r5, r6}
    56f0:	0004c224 	andeq	ip, r4, r4, lsr #4
    56f4:	00510100 	subseq	r0, r1, r0, lsl #2
    56f8:	008f040b 	addeq	r0, pc, fp, lsl #8
    56fc:	040b0000 	streq	r0, [fp], #-0
    5700:	000000c7 	andeq	r0, r0, r7, asr #1
    5704:	1317011b 	tstne	r7, #-1073741818	; 0xc0000006
    5708:	60010000 	andvs	r0, r1, r0
    570c:	9b010601 	blls	46f18 <__ccfg+0x26f70>
	...
    5718:	01000000 	mrseq	r0, (UNDEF: 0)
    571c:	0004f69c 	muleq	r4, ip, r6
    5720:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    5724:	01600100 	cmneq	r0, r0, lsl #2
    5728:	00009b14 	andeq	r9, r0, r4, lsl fp
    572c:	0020ac00 	eoreq	sl, r0, r0, lsl #24
    5730:	011d0000 	tsteq	sp, r0
    5734:	0000130e 	andeq	r1, r0, lr, lsl #6
    5738:	06015b01 	streq	r5, [r1], -r1, lsl #22
	...
    5744:	011b9c01 	tsteq	fp, r1, lsl #24
    5748:	000012e6 	andeq	r1, r0, r6, ror #5
    574c:	06012101 	streq	r2, [r1], -r1, lsl #2
    5750:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    575c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    5760:	1c000005 	stcne	0, cr0, [r0], {5}
    5764:	01007473 	tsteq	r0, r3, ror r4
    5768:	9b150121 	blls	545bf4 <__ccfg+0x525c4c>
    576c:	bf000000 	svclt	0x00000000
    5770:	1c000020 	stcne	0, cr0, [r0], {32}
    5774:	21010061 	tstcs	r1, r1, rrx
    5778:	00c71f01 	sbceq	r1, r7, r1, lsl #30
    577c:	20d20000 	sbcscs	r0, r2, r0
    5780:	731c0000 	tstvc	ip, #0
    5784:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5788:	0002152e 	andeq	r1, r2, lr, lsr #10
    578c:	0020f000 	eoreq	pc, r0, r0
    5790:	656c1c00 	strbvs	r1, [ip, #-3072]!	; 0xfffff400
    5794:	2101006e 	tstcs	r1, lr, rrx
    5798:	009b3601 	addseq	r3, fp, r1, lsl #12
    579c:	21030000 	mrscs	r0, (UNDEF: 3)
    57a0:	621e0000 	andsvs	r0, lr, #0
    57a4:	2301006c 	movwcs	r0, #4204	; 0x106c
    57a8:	009b0701 	addseq	r0, fp, r1, lsl #14
    57ac:	21160000 	tstcs	r6, r0
    57b0:	fd1f0000 	ldc2	0, cr0, [pc, #-0]	; 57b8 <__exidx_end+0x2b34>
    57b4:	01000012 	tsteq	r0, r2, lsl r0
    57b8:	00010132 	andeq	r0, r1, r2, lsr r1
    57bc:	20000000 	andcs	r0, r0, r0
    57c0:	000009f6 	strdeq	r0, [r0], -r6
    57c4:	00000000 	andeq	r0, r0, r0
    57c8:	00000b58 	andeq	r0, r0, r8, asr fp
    57cc:	03014301 	movweq	r4, #4865	; 0x1301
    57d0:	000005a3 	andeq	r0, r0, r3, lsr #11
    57d4:	000a1221 	andeq	r1, sl, r1, lsr #4
    57d8:	0a052100 	beq	14dbe0 <__ccfg+0x12dc38>
    57dc:	22000000 	andcs	r0, r0, #0
    57e0:	000009f6 	strdeq	r0, [r0], -r6
	...
    57ec:	03015001 	movweq	r5, #4097	; 0x1001
    57f0:	000a1221 	andeq	r1, sl, r1, lsr #4
    57f4:	0a052100 	beq	14dbfc <__ccfg+0x12dc54>
    57f8:	00000000 	andeq	r0, r0, r0
    57fc:	12dd0118 	sbcsne	r0, sp, #24, 2
    5800:	cb010000 	blgt	45808 <__ccfg+0x25860>
    5804:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5810:	9c010000 	stcls	0, cr0, [r1], {-0}
    5814:	00000681 	andeq	r0, r0, r1, lsl #13
    5818:	00747319 	rsbseq	r7, r4, r9, lsl r3
    581c:	9b15cb01 	blls	578428 <__ccfg+0x558480>
    5820:	3f000000 	svccc	0x00000000
    5824:	23000021 	movwcs	r0, #33	; 0x21
    5828:	0000131f 	andeq	r1, r0, pc, lsl r3
    582c:	c71fcb01 	ldrgt	ip, [pc, -r1, lsl #22]
    5830:	5d000000 	stcpl	0, cr0, [r0, #-0]
    5834:	23000021 	movwcs	r0, #33	; 0x21
    5838:	000012c9 	andeq	r1, r0, r9, asr #5
    583c:	c72bcb01 	strgt	ip, [fp, -r1, lsl #22]!
    5840:	86000000 	strhi	r0, [r0], -r0
    5844:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    5848:	000012b5 			; <UNDEFINED> instruction: 0x000012b5
    584c:	0001e601 	andeq	lr, r1, r1, lsl #12
    5850:	24000000 	strcs	r0, [r0], #-0
    5854:	000013a2 	andeq	r1, r0, r2, lsr #7
    5858:	0001ea01 	andeq	lr, r1, r1, lsl #20
    585c:	25000000 	strcs	r0, [r0, #-0]
    5860:	0000085e 	andeq	r0, r0, lr, asr r8
    5864:	00000000 	andeq	r0, r0, r0
    5868:	00000b28 	andeq	r0, r0, r8, lsr #22
    586c:	2604fc01 	strcs	pc, [r4], -r1, lsl #24
    5870:	00000878 	andeq	r0, r0, r8, ror r8
    5874:	000021a4 	andeq	r2, r0, r4, lsr #3
    5878:	00086c26 	andeq	r6, r8, r6, lsr #24
    587c:	0021b700 	eoreq	fp, r1, r0, lsl #14
    5880:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5884:	00000000 	andeq	r0, r0, r0
    5888:	0b400000 	bleq	1005890 <__ccfg+0xfe58e8>
    588c:	43010000 	movwmi	r0, #4096	; 0x1000
    5890:	00066402 	andeq	r6, r6, r2, lsl #8
    5894:	0a122100 	beq	48dc9c <__ccfg+0x46dcf4>
    5898:	05210000 	streq	r0, [r1, #-0]!
    589c:	0000000a 	andeq	r0, r0, sl
    58a0:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    58ac:	02480100 	subeq	r0, r8, #0, 2
    58b0:	000a1221 	andeq	r1, sl, r1, lsr #4
    58b4:	0a052100 	beq	14dcbc <__ccfg+0x12dd14>
    58b8:	00000000 	andeq	r0, r0, r0
    58bc:	24011800 	strcs	r1, [r1], #-2048	; 0xfffff800
    58c0:	01000013 	tsteq	r0, r3, lsl r0
    58c4:	9b0106b0 	blls	4738c <__ccfg+0x273e4>
	...
    58d0:	01000000 	mrseq	r0, (UNDEF: 0)
    58d4:	0007049c 	muleq	r7, ip, r4
    58d8:	00611900 	rsbeq	r1, r1, r0, lsl #18
    58dc:	c715b001 	ldrgt	fp, [r5, -r1]
    58e0:	ca000000 	bgt	58e8 <__exidx_end+0x2c64>
    58e4:	19000021 	stmdbne	r0, {r0, r5}
    58e8:	b0010073 	andlt	r0, r1, r3, ror r0
    58ec:	0007041e 	andeq	r0, r7, lr, lsl r4
    58f0:	0021f300 	eoreq	pc, r1, r0, lsl #6
    58f4:	656c1900 	strbvs	r1, [ip, #-2304]!	; 0xfffff700
    58f8:	b001006e 	andlt	r0, r1, lr, rrx
    58fc:	00009b26 	andeq	r9, r0, r6, lsr #22
    5900:	00222700 	eoreq	r2, r2, r0, lsl #14
    5904:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5908:	00000000 	andeq	r0, r0, r0
    590c:	0b100000 	bleq	405914 <__ccfg+0x3e596c>
    5910:	ba010000 	blt	45918 <__ccfg+0x25970>
    5914:	0006e802 	andeq	lr, r6, r2, lsl #16
    5918:	0a122100 	beq	48dd20 <__ccfg+0x46dd78>
    591c:	05210000 	streq	r0, [r1, #-0]!
    5920:	0000000a 	andeq	r0, r0, sl
    5924:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    5930:	02c40100 	sbceq	r0, r4, #0, 2
    5934:	000a1221 	andeq	r1, sl, r1, lsr #4
    5938:	0a052100 	beq	14dd40 <__ccfg+0x12dd98>
    593c:	00000000 	andeq	r0, r0, r0
    5940:	00b1040b 	adcseq	r0, r1, fp, lsl #8
    5944:	01170000 	tsteq	r7, r0
    5948:	000012d4 	ldrdeq	r1, [r0], -r4
    594c:	9006a801 	andls	sl, r6, r1, lsl #16
    5950:	a4000015 	strge	r0, [r0], #-21	; 0xffffffeb
    5954:	01000015 	tsteq	r0, r5, lsl r0
    5958:	f501299c 			; <UNDEFINED> instruction: 0xf501299c
    595c:	01000012 	tsteq	r0, r2, lsl r0
    5960:	009b0693 	umullseq	r0, fp, r3, r6
    5964:	157c0000 	ldrbne	r0, [ip, #-0]!
    5968:	15900000 	ldrne	r0, [r0]
    596c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5970:	00139c2a 	andseq	r9, r3, sl, lsr #24
    5974:	0d820100 	stfeqs	f0, [r2]
    5978:	00001518 	andeq	r1, r0, r8, lsl r5
    597c:	00001558 	andeq	r1, r0, r8, asr r5
    5980:	07969c01 	ldreq	r9, [r6, r1, lsl #24]
    5984:	9f280000 	svcls	0x00280000
    5988:	32000007 	andcc	r0, r0, #7
    598c:	46000015 			; <UNDEFINED> instruction: 0x46000015
    5990:	01000015 	tsteq	r0, r5, lsl r0
    5994:	f627038a 			; <UNDEFINED> instruction: 0xf627038a
    5998:	32000009 	andcc	r0, r0, #9
    599c:	e0000015 	and	r0, r0, r5, lsl r0
    59a0:	0100000a 	tsteq	r0, sl
    59a4:	07790272 			; <UNDEFINED> instruction: 0x07790272
    59a8:	12210000 	eorne	r0, r1, #0
    59ac:	2100000a 	tstcs	r0, sl
    59b0:	00000a05 	andeq	r0, r0, r5, lsl #20
    59b4:	09f62500 	ldmibeq	r6!, {r8, sl, sp}^
    59b8:	153e0000 	ldrne	r0, [lr, #-0]!
    59bc:	0af80000 	beq	ffe059c4 <_estack+0xdfe009c4>
    59c0:	74010000 	strvc	r0, [r1], #-0
    59c4:	0a122102 	beq	48ddd4 <__ccfg+0x46de2c>
    59c8:	05210000 	streq	r0, [r1, #-0]!
    59cc:	0000000a 	andeq	r0, r0, sl
    59d0:	7c2b0000 	stcvc	0, cr0, [fp], #-0
    59d4:	01000013 	tsteq	r0, r3, lsl r0
    59d8:	2b010d78 	blcs	48fc0 <__ccfg+0x29018>
    59dc:	00001389 	andeq	r1, r0, r9, lsl #7
    59e0:	010d6d01 	tsteq	sp, r1, lsl #26
    59e4:	0013a82b 	andseq	sl, r3, fp, lsr #16
    59e8:	0d660100 	stfeqe	f0, [r6, #-0]
    59ec:	13ae2c01 			; <UNDEFINED> instruction: 0x13ae2c01
    59f0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    59f4:	14c4010d 	strbne	r0, [r4], #269	; 0x10d
    59f8:	15180000 	ldrne	r0, [r8, #-0]
    59fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a00:	00000842 	andeq	r0, r0, r2, asr #16
    5a04:	00747319 	rsbseq	r7, r4, r9, lsl r3
    5a08:	9b195801 	blls	65ba14 <__ccfg+0x63ba6c>
    5a0c:	45000000 	strmi	r0, [r0, #-0]
    5a10:	19000022 	stmdbne	r0, {r1, r5}
    5a14:	006c6564 	rsbeq	r6, ip, r4, ror #10
    5a18:	9b225801 	blls	89ba24 <__ccfg+0x87ba7c>
    5a1c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    5a20:	25000022 	strcs	r0, [r0, #-34]	; 0xffffffde
    5a24:	00000842 	andeq	r0, r0, r2, asr #16
    5a28:	000014cc 	andeq	r1, r0, ip, asr #9
    5a2c:	00000a98 	muleq	r0, r8, sl
    5a30:	2d135c01 	ldccs	12, cr5, [r3, #-4]
    5a34:	00000a98 	muleq	r0, r8, sl
    5a38:	0008532e 	andeq	r5, r8, lr, lsr #6
    5a3c:	00226b00 	eoreq	r6, r2, r0, lsl #22
    5a40:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5a44:	14cc0000 	strbne	r0, [ip], #0
    5a48:	0ab80000 	beq	fee05a50 <_estack+0xdee00a50>
    5a4c:	51010000 	mrspl	r0, (UNDEF: 1)
    5a50:	00082402 	andeq	r2, r8, r2, lsl #8
    5a54:	0a122100 	beq	48de5c <__ccfg+0x46deb4>
    5a58:	05210000 	streq	r0, [r1, #-0]!
    5a5c:	0000000a 	andeq	r0, r0, sl
    5a60:	0009f628 	andeq	pc, r9, r8, lsr #12
    5a64:	0014e600 	andseq	lr, r4, r0, lsl #12
    5a68:	0014ea00 	andseq	lr, r4, r0, lsl #20
    5a6c:	02540100 	subseq	r0, r4, #0, 2
    5a70:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a74:	0a052100 	beq	14de7c <__ccfg+0x12ded4>
    5a78:	00000000 	andeq	r0, r0, r0
    5a7c:	2c2f0000 	stccs	0, cr0, [pc], #-0	; 5a84 <__exidx_end+0x2e00>
    5a80:	01000013 	tsteq	r0, r3, lsl r0
    5a84:	00b10d4b 	adcseq	r0, r1, fp, asr #26
    5a88:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    5a8c:	30000008 	andcc	r0, r0, r8
    5a90:	4f010072 	svcmi	0x00010072
    5a94:	0000b107 	andeq	fp, r0, r7, lsl #2
    5a98:	03310000 	teqeq	r1, #0
    5a9c:	01000013 	tsteq	r0, r3, lsl r0
    5aa0:	01010d41 	tsteq	r1, r1, asr #26
    5aa4:	00000883 	andeq	r0, r0, r3, lsl #17
    5aa8:	646d6332 	strbtvs	r6, [sp], #-818	; 0xfffffcce
    5aac:	19410100 	stmdbne	r1, {r8}^
    5ab0:	000000b1 	strheq	r0, [r0], -r1
    5ab4:	01006132 	tsteq	r0, r2, lsr r1
    5ab8:	00c72441 	sbceq	r2, r7, r1, asr #8
    5abc:	2c000000 	stccs	0, cr0, [r0], {-0}
    5ac0:	000012ce 	andeq	r1, r0, lr, asr #5
    5ac4:	010d3a01 	tsteq	sp, r1, lsl #20
    5ac8:	000014ac 	andeq	r1, r0, ip, lsr #9
    5acc:	000014c4 	andeq	r1, r0, r4, asr #9
    5ad0:	08e59c01 	stmiaeq	r5!, {r0, sl, fp, ip, pc}^
    5ad4:	63190000 	tstvs	r9, #0
    5ad8:	0100646d 	tsteq	r0, sp, ror #8
    5adc:	00b1193a 	adcseq	r1, r1, sl, lsr r9
    5ae0:	227e0000 	rsbscs	r0, lr, #0
    5ae4:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    5ae8:	ac000009 	stcge	0, cr0, [r0], {9}
    5aec:	80000014 	andhi	r0, r0, r4, lsl r0
    5af0:	0100000a 	tsteq	r0, sl
    5af4:	08c9023c 	stmiaeq	r9, {r2, r3, r4, r5, r9}^
    5af8:	12210000 	eorne	r0, r1, #0
    5afc:	2100000a 	tstcs	r0, sl
    5b00:	00000a05 	andeq	r0, r0, r5, lsl #20
    5b04:	09f62800 	ldmibeq	r6!, {fp, sp}^
    5b08:	14b80000 	ldrtne	r0, [r8], #0
    5b0c:	14bc0000 	ldrtne	r0, [ip], #0
    5b10:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5b14:	0a122102 	beq	48df24 <__ccfg+0x46df7c>
    5b18:	05210000 	streq	r0, [r1, #-0]!
    5b1c:	0000000a 	andeq	r0, r0, sl
    5b20:	13bd2c00 			; <UNDEFINED> instruction: 0x13bd2c00
    5b24:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    5b28:	147c010d 	ldrbtne	r0, [ip], #-269	; 0xfffffef3
    5b2c:	14ac0000 	strtne	r0, [ip], #0
    5b30:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b34:	00000979 	andeq	r0, r0, r9, ror r9
    5b38:	01006219 	tsteq	r0, r9, lsl r2
    5b3c:	00b11c29 	adcseq	r1, r1, r9, lsr #24
    5b40:	22910000 	addscs	r0, r1, #0
    5b44:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    5b48:	062b0100 	strteq	r0, [fp], -r0, lsl #2
    5b4c:	00000081 	andeq	r0, r0, r1, lsl #1
    5b50:	000a3d27 	andeq	r3, sl, r7, lsr #26
    5b54:	00148400 	andseq	r8, r4, r0, lsl #8
    5b58:	000a4800 	andeq	r4, sl, r0, lsl #16
    5b5c:	03320100 	teqeq	r2, #0, 2
    5b60:	0000092e 	andeq	r0, r0, lr, lsr #18
    5b64:	000a4c21 	andeq	r4, sl, r1, lsr #24
    5b68:	3d330000 	ldccc	0, cr0, [r3, #-0]
    5b6c:	9000000a 	andls	r0, r0, sl
    5b70:	94000014 	strls	r0, [r0], #-20	; 0xffffffec
    5b74:	01000014 	tsteq	r0, r4, lsl r0
    5b78:	0948042f 	stmdbeq	r8, {r0, r1, r2, r3, r5, sl}^
    5b7c:	4c210000 	stcmi	0, cr0, [r1], #-0
    5b80:	0000000a 	andeq	r0, r0, sl
    5b84:	000a2033 	andeq	r2, sl, r3, lsr r0
    5b88:	00149400 	andseq	r9, r4, r0, lsl #8
    5b8c:	00149600 	andseq	r9, r4, r0, lsl #12
    5b90:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    5b94:	00000962 	andeq	r0, r0, r2, ror #18
    5b98:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5b9c:	20250000 	eorcs	r0, r5, r0
    5ba0:	9c00000a 	stcls	0, cr0, [r0], {10}
    5ba4:	68000014 	stmdavs	r0, {r2, r4}
    5ba8:	0100000a 	tsteq	r0, sl
    5bac:	2f210333 	svccs	0x00210333
    5bb0:	0000000a 	andeq	r0, r0, sl
    5bb4:	13b43400 			; <UNDEFINED> instruction: 0x13b43400
    5bb8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5bbc:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5bc0:	00144800 	andseq	r4, r4, r0, lsl #16
    5bc4:	00147c00 	andseq	r7, r4, r0, lsl #24
    5bc8:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5bcc:	30000009 	andcc	r0, r0, r9
    5bd0:	1b010069 	blne	45d7c <__ccfg+0x25dd4>
    5bd4:	00008106 	andeq	r8, r0, r6, lsl #2
    5bd8:	00623500 	rsbeq	r3, r2, r0, lsl #10
    5bdc:	b1071c01 	tstlt	r7, r1, lsl #24
    5be0:	af000000 	svcge	0x00000000
    5be4:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    5be8:	00000a3d 	andeq	r0, r0, sp, lsr sl
    5bec:	0000144c 	andeq	r1, r0, ip, asr #8
    5bf0:	000009e8 	andeq	r0, r0, r8, ror #19
    5bf4:	c5032201 	strgt	r2, [r3, #-513]	; 0xfffffdff
    5bf8:	21000009 	tstcs	r0, r9
    5bfc:	00000a4c 	andeq	r0, r0, ip, asr #20
    5c00:	0a202700 	beq	80f808 <__ccfg+0x7ef860>
    5c04:	14520000 	ldrbne	r0, [r2], #-0
    5c08:	0a100000 	beq	405c10 <__ccfg+0x3e5c68>
    5c0c:	23010000 	movwcs	r0, #4096	; 0x1000
    5c10:	0009df03 	andeq	sp, r9, r3, lsl #30
    5c14:	0a2f2100 	beq	bce01c <__ccfg+0xbae074>
    5c18:	25000000 	strcs	r0, [r0, #-0]
    5c1c:	00000a5a 	andeq	r0, r0, sl, asr sl
    5c20:	00001454 	andeq	r1, r0, r4, asr r4
    5c24:	00000a28 	andeq	r0, r0, r8, lsr #20
    5c28:	21072001 	tstcs	r7, r1
    5c2c:	00000a6c 	andeq	r0, r0, ip, ror #20
    5c30:	c2360000 	eorsgt	r0, r6, #0
    5c34:	02000004 	andeq	r0, r0, #4
    5c38:	01010206 	tsteq	r1, r6, lsl #4
    5c3c:	000a2003 	andeq	r2, sl, r3
    5c40:	01663700 	cmneq	r6, r0, lsl #14
    5c44:	06020000 	streq	r0, [r2], -r0
    5c48:	00672302 	rsbeq	r2, r7, r2, lsl #6
    5c4c:	95370000 	ldrls	r0, [r7, #-0]!
    5c50:	02000009 	andeq	r0, r0, #9
    5c54:	67370206 	ldrvs	r0, [r7, -r6, lsl #4]!
    5c58:	00000000 	andeq	r0, r0, r0
    5c5c:	0003af36 	andeq	sl, r3, r6, lsr pc
    5c60:	01540200 	cmpeq	r4, r0, lsl #4
    5c64:	3d030101 	stfccs	f0, [r3, #-4]
    5c68:	3700000a 	strcc	r0, [r0, -sl]
    5c6c:	00000166 	andeq	r0, r0, r6, ror #2
    5c70:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
    5c74:	00000067 	andeq	r0, r0, r7, rrx
    5c78:	00253600 	eoreq	r3, r5, r0, lsl #12
    5c7c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    5c80:	03010101 	movweq	r0, #4353	; 0x1101
    5c84:	00000a5a 	andeq	r0, r0, sl, asr sl
    5c88:	00016637 	andeq	r6, r1, r7, lsr r6
    5c8c:	011e0200 	tsteq	lr, r0, lsl #4
    5c90:	00006717 	andeq	r6, r0, r7, lsl r7
    5c94:	c9380000 	ldmdbgt	r8!, {}	; <UNPREDICTABLE>
    5c98:	02000011 	andeq	r0, r0, #17
    5c9c:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    5ca0:	03000000 	movweq	r0, #0
    5ca4:	00000a79 	andeq	r0, r0, r9, ror sl
    5ca8:	00016639 	andeq	r6, r1, r9, lsr r6
    5cac:	18a40200 	stmiane	r4!, {r9}
    5cb0:	00000067 	andeq	r0, r0, r7, rrx
    5cb4:	07963a00 	ldreq	r3, [r6, r0, lsl #20]
    5cb8:	15580000 	ldrbne	r0, [r8, #-0]
    5cbc:	157c0000 	ldrbne	r0, [ip, #-0]!
    5cc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5cc4:	00079628 	andeq	r9, r7, r8, lsr #12
    5cc8:	00156200 	andseq	r6, r5, r0, lsl #4
    5ccc:	00157600 	andseq	r7, r5, r0, lsl #12
    5cd0:	0d780100 	ldfeqe	f0, [r8, #-0]
    5cd4:	0007a83b 	andeq	sl, r7, fp, lsr r8
    5cd8:	00156c00 	andseq	r6, r5, r0, lsl #24
    5cdc:	00157200 	andseq	r7, r5, r0, lsl #4
    5ce0:	037c0100 	cmneq	ip, #0, 2
    5ce4:	12000000 	andne	r0, r0, #0
    5ce8:	03000004 	movweq	r0, #4
    5cec:	00196400 	andseq	r6, r9, r0, lsl #8
    5cf0:	70010400 	andvc	r0, r1, r0, lsl #8
    5cf4:	0c000001 	stceq	0, cr0, [r0], {1}
    5cf8:	000013d0 	ldrdeq	r1, [r0], -r0
    5cfc:	000000c0 	andeq	r0, r0, r0, asr #1
    5d00:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5d04:	00000000 	andeq	r0, r0, r0
    5d08:	0000480c 	andeq	r4, r0, ip, lsl #16
    5d0c:	a3060102 	movwge	r0, #24834	; 0x6102
    5d10:	02000003 	andeq	r0, r0, #3
    5d14:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    5d18:	04020000 	streq	r0, [r2], #-0
    5d1c:	00009d05 	andeq	r9, r0, r5, lsl #26
    5d20:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5d24:	00000098 	muleq	r0, r8, r0
    5d28:	0021fc03 	eoreq	pc, r1, r3, lsl #24
    5d2c:	182e0200 	stmdane	lr!, {r9}
    5d30:	0000004d 	andeq	r0, r0, sp, asr #32
    5d34:	a1080102 	tstge	r8, r2, lsl #2
    5d38:	03000003 	movweq	r0, #3
    5d3c:	000020ea 	andeq	r2, r0, sl, ror #1
    5d40:	60193102 	andsvs	r3, r9, r2, lsl #2
    5d44:	02000000 	andeq	r0, r0, #0
    5d48:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    5d4c:	b3030000 	movwlt	r0, #12288	; 0x3000
    5d50:	02000017 	andeq	r0, r0, #23
    5d54:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5d58:	04020000 	streq	r0, [r2], #-0
    5d5c:	00007207 	andeq	r7, r0, r7, lsl #4
    5d60:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5d64:	0000006d 	andeq	r0, r0, sp, rrx
    5d68:	69050404 	stmdbvs	r5, {r2, sl}
    5d6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5d70:	00770704 	rsbseq	r0, r7, r4, lsl #14
    5d74:	c0030000 	andgt	r0, r3, r0
    5d78:	03000015 	movweq	r0, #21
    5d7c:	00541227 	subseq	r1, r4, r7, lsr #4
    5d80:	8f050000 	svchi	0x00050000
    5d84:	03000000 	movweq	r0, #0
    5d88:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    5d8c:	41122b03 	tstmi	r2, r3, lsl #22
    5d90:	06000000 	streq	r0, [r0], -r0
    5d94:	000000a0 	andeq	r0, r0, r0, lsr #1
    5d98:	00161103 	andseq	r1, r6, r3, lsl #2
    5d9c:	122c0300 	eorne	r0, ip, #0, 6
    5da0:	00000067 	andeq	r0, r0, r7, rrx
    5da4:	0000b105 	andeq	fp, r0, r5, lsl #2
    5da8:	02a70300 	adceq	r0, r7, #0, 6
    5dac:	2d030000 	stccs	0, cr0, [r3, #-0]
    5db0:	00006712 	andeq	r6, r0, r2, lsl r7
    5db4:	03080700 	movweq	r0, #34560	; 0x8700
    5db8:	015c0932 	cmpeq	ip, r2, lsr r9
    5dbc:	c2080000 	andgt	r0, r8, #0
    5dc0:	03000002 	movweq	r0, #2
    5dc4:	00a00734 	adceq	r0, r0, r4, lsr r7
    5dc8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dcc:	91080007 	tstls	r8, r7
    5dd0:	03000000 	movweq	r0, #0
    5dd4:	00a00335 	adceq	r0, r0, r5, lsr r3
    5dd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5ddc:	99080006 	stmdbls	r8, {r1, r2}
    5de0:	03000002 	movweq	r0, #2
    5de4:	00a00336 	adceq	r0, r0, r6, lsr r3
    5de8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dec:	0c080005 	stceq	0, cr0, [r8], {5}
    5df0:	03000004 	movweq	r0, #4
    5df4:	00a00337 	adceq	r0, r0, r7, lsr r3
    5df8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dfc:	05080004 	streq	r0, [r8, #-4]
    5e00:	03000004 	movweq	r0, #4
    5e04:	00a00338 	adceq	r0, r0, r8, lsr r3
    5e08:	04010000 	streq	r0, [r1], #-0
    5e0c:	f6090000 			; <UNDEFINED> instruction: 0xf6090000
    5e10:	03000003 	movweq	r0, #3
    5e14:	00a0073a 	adceq	r0, r0, sl, lsr r7
    5e18:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    5e1c:	00000040 	andeq	r0, r0, r0, asr #32
    5e20:	a0033c03 	andge	r3, r3, r3, lsl #24
    5e24:	02000000 	andeq	r0, r0, #0
    5e28:	00006609 	andeq	r6, r0, r9, lsl #12
    5e2c:	033d0300 	teqeq	sp, #0, 6
    5e30:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e34:	01540903 	cmpeq	r4, r3, lsl #18
    5e38:	3f030000 	svccc	0x00030000
    5e3c:	0000b108 	andeq	fp, r0, r8, lsl #2
    5e40:	03000400 	movweq	r0, #1024	; 0x400
    5e44:	00000434 	andeq	r0, r0, r4, lsr r4
    5e48:	ce034103 	adfgts	f4, f3, f3
    5e4c:	06000000 	streq	r0, [r0], -r0
    5e50:	0000015c 	andeq	r0, r0, ip, asr r1
    5e54:	0002b60a 	andeq	fp, r2, sl, lsl #12
    5e58:	1a430300 	bne	10c6a60 <__ccfg+0x10a6ab8>
    5e5c:	00000168 	andeq	r0, r0, r8, ror #2
    5e60:	0d0a0101 	stfeqs	f0, [sl, #-4]
    5e64:	03000003 	movweq	r0, #3
    5e68:	01890e45 	orreq	r0, r9, r5, asr #28
    5e6c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e70:	018f040b 	orreq	r0, pc, fp, lsl #8
    5e74:	01020000 	mrseq	r0, (UNDEF: 2)
    5e78:	0003aa08 	andeq	sl, r3, r8, lsl #20
    5e7c:	018f0500 	orreq	r0, pc, r0, lsl #10
    5e80:	1b0a0000 	blne	285e88 <__ccfg+0x265ee0>
    5e84:	03000003 	movweq	r0, #3
    5e88:	01891e45 	orreq	r1, r9, r5, asr #28
    5e8c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e90:	8f040807 	svchi	0x00040807
    5e94:	0001da09 	andeq	sp, r1, r9, lsl #20
    5e98:	02d20900 	sbcseq	r0, r2, #0, 18
    5e9c:	90040000 	andls	r0, r4, r0
    5ea0:	0000670b 	andeq	r6, r0, fp, lsl #14
    5ea4:	ed090000 	stc	0, cr0, [r9, #-0]
    5ea8:	04000005 	streq	r0, [r0], #-5
    5eac:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    5eb0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    5eb4:	00000471 	andeq	r0, r0, r1, ror r4
    5eb8:	ac109204 	lfmge	f1, 1, [r0], {4}
    5ebc:	06000000 	streq	r0, [r0], -r0
    5ec0:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    5ec4:	93040000 	movwls	r0, #16384	; 0x4000
    5ec8:	0001a903 	andeq	sl, r1, r3, lsl #18
    5ecc:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    5ed0:	01f10000 	mvnseq	r0, r0
    5ed4:	000d0000 	andeq	r0, sp, r0
    5ed8:	0000360a 	andeq	r3, r0, sl, lsl #12
    5edc:	0f990400 	svceq	0x00990400
    5ee0:	000001e6 	andeq	r0, r0, r6, ror #3
    5ee4:	01070101 	tsteq	r7, r1, lsl #2
    5ee8:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    5eec:	08000002 	stmdaeq	r0, {r1}
    5ef0:	00000464 	andeq	r0, r0, r4, ror #8
    5ef4:	a0079305 	andge	r9, r7, r5, lsl #6
    5ef8:	01000000 	mrseq	r0, (UNDEF: 0)
    5efc:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    5f00:	00000031 	andeq	r0, r0, r1, lsr r0
    5f04:	a0039405 	andge	r9, r3, r5, lsl #8
    5f08:	01000000 	mrseq	r0, (UNDEF: 0)
    5f0c:	00000001 	andeq	r0, r0, r1
    5f10:	00028403 	andeq	r8, r2, r3, lsl #8
    5f14:	03960500 	orrseq	r0, r6, #0, 10
    5f18:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5f1c:	00022905 	andeq	r2, r2, r5, lsl #18
    5f20:	02350c00 	eorseq	r0, r5, #0, 24
    5f24:	02450000 	subeq	r0, r5, #0
    5f28:	000d0000 	andeq	r0, sp, r0
    5f2c:	00023a05 	andeq	r3, r2, r5, lsl #20
    5f30:	02ed0a00 	rsceq	r0, sp, #0, 20
    5f34:	9c050000 	stcls	0, cr0, [r5], {-0}
    5f38:	00024517 	andeq	r4, r2, r7, lsl r5
    5f3c:	0c010100 	stfeqs	f0, [r1], {-0}
    5f40:	0000009b 	muleq	r0, fp, r0
    5f44:	00000263 	andeq	r0, r0, r3, ror #4
    5f48:	5805000d 	stmdapl	r5, {r0, r2, r3}
    5f4c:	0a000002 	beq	5f5c <__exidx_end+0x32d8>
    5f50:	00000393 	muleq	r0, r3, r3
    5f54:	63130606 	tstvs	r3, #6291456	; 0x600000
    5f58:	01000002 	tsteq	r0, r2
    5f5c:	01340a01 	teqeq	r4, r1, lsl #20
    5f60:	c3040000 	movwgt	r0, #16384	; 0x4000
    5f64:	0000b10e 	andeq	fp, r0, lr, lsl #2
    5f68:	0e010100 	adfeqs	f0, f1, f0
    5f6c:	0000047e 	andeq	r0, r0, lr, ror r4
    5f70:	10016e07 	andne	r6, r1, r7, lsl #28
    5f74:	00000291 	muleq	r0, r1, r2
    5f78:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    5f7c:	010f0000 	mrseq	r0, CPSR
    5f80:	000002a3 	andeq	r0, r0, r3, lsr #5
    5f84:	00008f10 	andeq	r8, r0, r0, lsl pc
    5f88:	960c0000 	strls	r0, [ip], -r0
    5f8c:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    5f90:	0d000002 	stceq	0, cr0, [r0, #-8]
    5f94:	02a30500 	adceq	r0, r3, #0, 10
    5f98:	44110000 	ldrmi	r0, [r1], #-0
    5f9c:	07000004 	streq	r0, [r0, -r4]
    5fa0:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    5fa4:	01000002 	tsteq	r0, r2
    5fa8:	038b1101 	orreq	r1, fp, #1073741824	; 0x40000000
    5fac:	82070000 	andhi	r0, r7, #0
    5fb0:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    5fb4:	01010000 	mrseq	r0, (UNDEF: 1)
    5fb8:	00046911 	andeq	r6, r4, r1, lsl r9
    5fbc:	02d80700 	sbcseq	r0, r8, #0, 14
    5fc0:	0000b10e 	andeq	fp, r0, lr, lsl #2
    5fc4:	12010100 	andne	r0, r1, #0, 2
    5fc8:	03030708 	movweq	r0, #14088	; 0x3708
    5fcc:	00030709 	andeq	r0, r3, r9, lsl #14
    5fd0:	21f41300 	mvnscs	r1, r0, lsl #6
    5fd4:	07070000 	streq	r0, [r7, -r0]
    5fd8:	008f0703 	addeq	r0, pc, r3, lsl #14
    5fdc:	13000000 	movwne	r0, #0
    5fe0:	0000053f 	andeq	r0, r0, pc, lsr r5
    5fe4:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    5fe8:	000000c2 	andeq	r0, r0, r2, asr #1
    5fec:	640e0004 	strvs	r0, [lr], #-4
    5ff0:	07000002 	streq	r0, [r0, -r2]
    5ff4:	e0030309 	and	r0, r3, r9, lsl #6
    5ff8:	14000002 	strne	r0, [r0], #-2
    5ffc:	0000048d 	andeq	r0, r0, sp, lsl #9
    6000:	030b0730 	movweq	r0, #46896	; 0xb730
    6004:	00037708 	andeq	r7, r3, r8, lsl #14
    6008:	04861300 	streq	r1, [r6], #768	; 0x300
    600c:	14070000 	strne	r0, [r7], #-0
    6010:	008f0803 	addeq	r0, pc, r3, lsl #16
    6014:	13000000 	movwne	r0, #0
    6018:	000002dc 	ldrdeq	r0, [r0], -ip
    601c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    6020:	0000008f 	andeq	r0, r0, pc, lsl #1
    6024:	04811302 	streq	r1, [r1], #770	; 0x302
    6028:	16070000 	strne	r0, [r7], -r0
    602c:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    6030:	13040000 	movwne	r0, #16384	; 0x4000
    6034:	00000f3f 	andeq	r0, r0, pc, lsr pc
    6038:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    603c:	000000c2 	andeq	r0, r0, r2, asr #1
    6040:	043d1308 	ldrteq	r1, [sp], #-776	; 0xfffffcf8
    6044:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    6048:	03770f03 	cmneq	r7, #3, 30
    604c:	130c0000 	movwne	r0, #49152	; 0xc000
    6050:	000002d7 	ldrdeq	r0, [r0], -r7
    6054:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    6058:	00000387 	andeq	r0, r0, r7, lsl #7
    605c:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    6060:	87000003 	strhi	r0, [r0, -r3]
    6064:	15000003 	strne	r0, [r0, #-3]
    6068:	00000088 	andeq	r0, r0, r8, lsl #1
    606c:	040b0003 	streq	r0, [fp], #-3
    6070:	00000314 	andeq	r0, r0, r4, lsl r3
    6074:	0004980e 	andeq	r9, r4, lr, lsl #16
    6078:	031c0700 	tsteq	ip, #0, 14
    607c:	0003141b 	andeq	r1, r3, fp, lsl r4
    6080:	03811100 	orreq	r1, r1, #0, 2
    6084:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    6088:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    608c:	01010000 	mrseq	r0, (UNDEF: 1)
    6090:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    6094:	c60a0000 	strgt	r0, [sl], -r0
    6098:	01000013 	tsteq	r0, r3, lsl r0
    609c:	01890e09 	orreq	r0, r9, r9, lsl #28
    60a0:	01010000 	mrseq	r0, (UNDEF: 1)
    60a4:	140f0116 	strne	r0, [pc], #-278	; 60ac <__exidx_end+0x3428>
    60a8:	0d010000 	stceq	0, cr0, [r1, #-0]
    60ac:	00810105 	addeq	r0, r1, r5, lsl #2
    60b0:	15a40000 	strne	r0, [r4, #0]!
    60b4:	161c0000 	ldrne	r0, [ip], -r0
    60b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    60bc:	00747317 	rsbseq	r7, r4, r7, lsl r3
    60c0:	8f120d01 	svchi	0x00120d01
    60c4:	cd000000 	stcgt	0, cr0, [r0, #-0]
    60c8:	17000022 	strne	r0, [r0, -r2, lsr #32]
    60cc:	00667562 	rsbeq	r7, r6, r2, ror #10
    60d0:	891c0d01 	ldmdbhi	ip, {r0, r8, sl, fp}
    60d4:	eb000001 	bl	60e0 <__exidx_end+0x345c>
    60d8:	17000022 	strne	r0, [r0, -r2, lsr #32]
    60dc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    60e0:	81250d01 			; <UNDEFINED> instruction: 0x81250d01
    60e4:	40000000 	andmi	r0, r0, r0
    60e8:	18000023 	stmdane	r0, {r0, r1, r5}
    60ec:	00001416 	andeq	r1, r0, r6, lsl r4
    60f0:	81061101 	tsthi	r6, r1, lsl #2
    60f4:	95000000 	strls	r0, [r0, #-0]
    60f8:	00000023 	andeq	r0, r0, r3, lsr #32
    60fc:	00044c00 	andeq	r4, r4, r0, lsl #24
    6100:	b3000300 	movwlt	r0, #768	; 0x300
    6104:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    6108:	00017001 	andeq	r7, r1, r1
    610c:	14240c00 	strtne	r0, [r4], #-3072	; 0xfffff400
    6110:	00c00000 	sbceq	r0, r0, r0
    6114:	0c000000 	stceq	0, cr0, [r0], {-0}
    6118:	00000000 	andeq	r0, r0, r0
    611c:	49d10000 	ldmibmi	r1, {}^	; <UNPREDICTABLE>
    6120:	01020000 	mrseq	r0, (UNDEF: 2)
    6124:	0003a306 	andeq	sl, r3, r6, lsl #6
    6128:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    612c:	000003dd 	ldrdeq	r0, [r0], -sp
    6130:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    6134:	02000000 	andeq	r0, r0, #0
    6138:	00980508 	addseq	r0, r8, r8, lsl #10
    613c:	fc030000 	stc2	0, cr0, [r3], {-0}
    6140:	02000021 	andeq	r0, r0, #33	; 0x21
    6144:	004d182e 	subeq	r1, sp, lr, lsr #16
    6148:	01020000 	mrseq	r0, (UNDEF: 2)
    614c:	0003a108 	andeq	sl, r3, r8, lsl #2
    6150:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    6154:	31020000 	mrscc	r0, (UNDEF: 2)
    6158:	00006019 	andeq	r6, r0, r9, lsl r0
    615c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6160:	00000271 	andeq	r0, r0, r1, ror r2
    6164:	0017b303 	andseq	fp, r7, r3, lsl #6
    6168:	19340200 	ldmdbne	r4!, {r9}
    616c:	00000073 	andeq	r0, r0, r3, ror r0
    6170:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    6174:	02000000 	andeq	r0, r0, #0
    6178:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    617c:	04040000 	streq	r0, [r4], #-0
    6180:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6184:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6188:	00000077 	andeq	r0, r0, r7, ror r0
    618c:	000b4603 	andeq	r4, fp, r3, lsl #12
    6190:	1b280300 	blne	a06d98 <__ccfg+0x9e6df0>
    6194:	0000009b 	muleq	r0, fp, r0
    6198:	000a5c05 	andeq	r5, sl, r5, lsl #24
    619c:	00090400 	andeq	r0, r9, r0, lsl #8
    61a0:	000000b3 	strheq	r0, [r0], -r3
    61a4:	000bfc06 	andeq	pc, fp, r6, lsl #24
    61a8:	0000b300 	andeq	fp, r0, r0, lsl #6
    61ac:	00010000 	andeq	r0, r1, r0
    61b0:	5e030407 	cdppl	4, 0, cr0, cr3, cr7, {0}
    61b4:	0300000a 	movweq	r0, #10
    61b8:	008f1863 	addeq	r1, pc, r3, ror #16
    61bc:	c0030000 	andgt	r0, r3, r0
    61c0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    61c4:	00541227 	subseq	r1, r4, r7, lsr #4
    61c8:	c1080000 	mrsgt	r0, (UNDEF: 8)
    61cc:	03000000 	movweq	r0, #0
    61d0:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    61d4:	41122b04 	tstmi	r2, r4, lsl #22
    61d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    61dc:	000000d2 	ldrdeq	r0, [r0], -r2
    61e0:	00161103 	andseq	r1, r6, r3, lsl #2
    61e4:	122c0400 	eorne	r0, ip, #0, 8
    61e8:	00000067 	andeq	r0, r0, r7, rrx
    61ec:	0000e308 	andeq	lr, r0, r8, lsl #6
    61f0:	02a70300 	adceq	r0, r7, #0, 6
    61f4:	2d040000 	stccs	0, cr0, [r4, #-0]
    61f8:	00006712 	andeq	r6, r0, r2, lsl r7
    61fc:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    6200:	018e0932 	orreq	r0, lr, r2, lsr r9
    6204:	c20b0000 	andgt	r0, fp, #0
    6208:	04000002 	streq	r0, [r0], #-2
    620c:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6210:	01010000 	mrseq	r0, (UNDEF: 1)
    6214:	910b0007 	tstls	fp, r7
    6218:	04000000 	streq	r0, [r0], #-0
    621c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6220:	01010000 	mrseq	r0, (UNDEF: 1)
    6224:	990b0006 	stmdbls	fp, {r1, r2}
    6228:	04000002 	streq	r0, [r0], #-2
    622c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6230:	01010000 	mrseq	r0, (UNDEF: 1)
    6234:	0c0b0005 	stceq	0, cr0, [fp], {5}
    6238:	04000004 	streq	r0, [r0], #-4
    623c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6240:	01010000 	mrseq	r0, (UNDEF: 1)
    6244:	050b0004 	streq	r0, [fp, #-4]
    6248:	04000004 	streq	r0, [r0], #-4
    624c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    6250:	04010000 	streq	r0, [r1], #-0
    6254:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    6258:	04000003 	streq	r0, [r0], #-3
    625c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    6260:	0c010000 	stceq	0, cr0, [r1], {-0}
    6264:	00000040 	andeq	r0, r0, r0, asr #32
    6268:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    626c:	02000000 	andeq	r0, r0, #0
    6270:	0000660c 	andeq	r6, r0, ip, lsl #12
    6274:	033d0400 	teqeq	sp, #0, 8
    6278:	000000d2 	ldrdeq	r0, [r0], -r2
    627c:	01540c03 	cmpeq	r4, r3, lsl #24
    6280:	3f040000 	svccc	0x00040000
    6284:	0000e308 	andeq	lr, r0, r8, lsl #6
    6288:	03000400 	movweq	r0, #1024	; 0x400
    628c:	00000434 	andeq	r0, r0, r4, lsr r4
    6290:	00034104 	andeq	r4, r3, r4, lsl #2
    6294:	09000001 	stmdbeq	r0, {r0}
    6298:	0000018e 	andeq	r0, r0, lr, lsl #3
    629c:	0002b60d 	andeq	fp, r2, sp, lsl #12
    62a0:	1a430400 	bne	10c72a8 <__ccfg+0x10a7300>
    62a4:	0000019a 	muleq	r0, sl, r1
    62a8:	0d0d0101 	stfeqs	f0, [sp, #-4]
    62ac:	04000003 	streq	r0, [r0], #-3
    62b0:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    62b4:	01010000 	mrseq	r0, (UNDEF: 1)
    62b8:	01c1040e 	biceq	r0, r1, lr, lsl #8
    62bc:	01020000 	mrseq	r0, (UNDEF: 2)
    62c0:	0003aa08 	andeq	sl, r3, r8, lsl #20
    62c4:	01c10800 	biceq	r0, r1, r0, lsl #16
    62c8:	1b0d0000 	blne	3462d0 <__ccfg+0x326328>
    62cc:	04000003 	streq	r0, [r0], #-3
    62d0:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    62d4:	01010000 	mrseq	r0, (UNDEF: 1)
    62d8:	8f05080a 	svchi	0x0005080a
    62dc:	00020c09 	andeq	r0, r2, r9, lsl #24
    62e0:	02d20c00 	sbcseq	r0, r2, #0, 24
    62e4:	90050000 	andls	r0, r5, r0
    62e8:	0000670b 	andeq	r6, r0, fp, lsl #14
    62ec:	ed0c0000 	stc	0, cr0, [ip, #-0]
    62f0:	05000005 	streq	r0, [r0, #-5]
    62f4:	00c10891 	smulleq	r0, r1, r1, r8
    62f8:	0c040000 	stceq	0, cr0, [r4], {-0}
    62fc:	00000471 	andeq	r0, r0, r1, ror r4
    6300:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    6304:	06000000 	streq	r0, [r0], -r0
    6308:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    630c:	93050000 	movwls	r0, #20480	; 0x5000
    6310:	0001db03 	andeq	sp, r1, r3, lsl #22
    6314:	020c0f00 	andeq	r0, ip, #0, 30
    6318:	02230000 	eoreq	r0, r3, #0
    631c:	00100000 	andseq	r0, r0, r0
    6320:	0000360d 	andeq	r3, r0, sp, lsl #12
    6324:	0f990500 	svceq	0x00990500
    6328:	00000218 	andeq	r0, r0, r8, lsl r2
    632c:	010a0101 	tsteq	sl, r1, lsl #2
    6330:	5b099106 	blpl	26a750 <__ccfg+0x24a7a8>
    6334:	0b000002 	bleq	6344 <__exidx_end+0x36c0>
    6338:	00000464 	andeq	r0, r0, r4, ror #8
    633c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6340:	01000000 	mrseq	r0, (UNDEF: 0)
    6344:	0b000107 	bleq	6768 <__exidx_end+0x3ae4>
    6348:	00000031 	andeq	r0, r0, r1, lsr r0
    634c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    6350:	01000000 	mrseq	r0, (UNDEF: 0)
    6354:	00000001 	andeq	r0, r0, r1
    6358:	00028403 	andeq	r8, r2, r3, lsl #8
    635c:	03960600 	orrseq	r0, r6, #0, 12
    6360:	00000231 	andeq	r0, r0, r1, lsr r2
    6364:	00025b08 	andeq	r5, r2, r8, lsl #22
    6368:	02670f00 	rsbeq	r0, r7, #0, 30
    636c:	02770000 	rsbseq	r0, r7, #0
    6370:	00100000 	andseq	r0, r0, r0
    6374:	00026c08 	andeq	r6, r2, r8, lsl #24
    6378:	02ed0d00 	rsceq	r0, sp, #0, 26
    637c:	9c060000 	stcls	0, cr0, [r6], {-0}
    6380:	00027717 	andeq	r7, r2, r7, lsl r7
    6384:	0f010100 	svceq	0x00010100
    6388:	000000cd 	andeq	r0, r0, sp, asr #1
    638c:	00000295 	muleq	r0, r5, r2
    6390:	8a080010 	bhi	2063d8 <__ccfg+0x1e6430>
    6394:	0d000002 	stceq	0, cr0, [r0, #-8]
    6398:	00000393 	muleq	r0, r3, r3
    639c:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    63a0:	01000002 	tsteq	r0, r2
    63a4:	01340d01 	teqeq	r4, r1, lsl #26
    63a8:	c3050000 	movwgt	r0, #20480	; 0x5000
    63ac:	0000e30e 	andeq	lr, r0, lr, lsl #6
    63b0:	11010100 	mrsne	r0, (UNDEF: 17)
    63b4:	0000047e 	andeq	r0, r0, lr, ror r4
    63b8:	10016e08 	andne	r6, r1, r8, lsl #28
    63bc:	000002c3 	andeq	r0, r0, r3, asr #5
    63c0:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    63c4:	01120000 	tsteq	r2, r0
    63c8:	000002d5 	ldrdeq	r0, [r0], -r5
    63cc:	0000c113 	andeq	ip, r0, r3, lsl r1
    63d0:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    63d4:	e0000001 	and	r0, r0, r1
    63d8:	10000002 	andne	r0, r0, r2
    63dc:	02d50800 	sbcseq	r0, r5, #0, 16
    63e0:	44140000 	ldrmi	r0, [r4], #-0
    63e4:	08000004 	stmdaeq	r0, {r2}
    63e8:	e016017f 	ands	r0, r6, pc, ror r1
    63ec:	01000002 	tsteq	r0, r2
    63f0:	038b1401 	orreq	r1, fp, #16777216	; 0x1000000
    63f4:	82080000 	andhi	r0, r8, #0
    63f8:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    63fc:	01010000 	mrseq	r0, (UNDEF: 1)
    6400:	00046914 	andeq	r6, r4, r4, lsl r9
    6404:	02d80800 	sbcseq	r0, r8, #0, 16
    6408:	0000e30e 	andeq	lr, r0, lr, lsl #6
    640c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6410:	03030808 	movweq	r0, #14344	; 0x3808
    6414:	00033909 	andeq	r3, r3, r9, lsl #18
    6418:	21f41600 	mvnscs	r1, r0, lsl #12
    641c:	07080000 	streq	r0, [r8, -r0]
    6420:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6424:	16000000 	strne	r0, [r0], -r0
    6428:	0000053f 	andeq	r0, r0, pc, lsr r5
    642c:	08030808 	stmdaeq	r3, {r3, fp}
    6430:	000000f4 	strdeq	r0, [r0], -r4
    6434:	64110004 	ldrvs	r0, [r1], #-4
    6438:	08000002 	stmdaeq	r0, {r1}
    643c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6440:	17000003 	strne	r0, [r0, -r3]
    6444:	0000048d 	andeq	r0, r0, sp, lsl #9
    6448:	030b0830 	movweq	r0, #47152	; 0xb830
    644c:	0003a908 	andeq	sl, r3, r8, lsl #18
    6450:	04861600 	streq	r1, [r6], #1536	; 0x600
    6454:	14080000 	strne	r0, [r8], #-0
    6458:	00c10803 	sbceq	r0, r1, r3, lsl #16
    645c:	16000000 	strne	r0, [r0], -r0
    6460:	000002dc 	ldrdeq	r0, [r0], -ip
    6464:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    6468:	000000c1 	andeq	r0, r0, r1, asr #1
    646c:	04811602 	streq	r1, [r1], #1538	; 0x602
    6470:	16080000 	strne	r0, [r8], -r0
    6474:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    6478:	16040000 	strne	r0, [r4], -r0
    647c:	00000f3f 	andeq	r0, r0, pc, lsr pc
    6480:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    6484:	000000f4 	strdeq	r0, [r0], -r4
    6488:	043d1608 	ldrteq	r1, [sp], #-1544	; 0xfffff9f8
    648c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6490:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    6494:	160c0000 	strne	r0, [ip], -r0
    6498:	000002d7 	ldrdeq	r0, [r0], -r7
    649c:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    64a0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    64a4:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    64a8:	b9000003 	stmdblt	r0, {r0, r1}
    64ac:	18000003 	stmdane	r0, {r0, r1}
    64b0:	00000088 	andeq	r0, r0, r8, lsl #1
    64b4:	040e0003 	streq	r0, [lr], #-3
    64b8:	00000346 	andeq	r0, r0, r6, asr #6
    64bc:	00049811 	andeq	r9, r4, r1, lsl r8
    64c0:	031c0800 	tsteq	ip, #0, 16
    64c4:	0003461b 	andeq	r4, r3, fp, lsl r6
    64c8:	03811400 	orreq	r1, r1, #0, 8
    64cc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    64d0:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    64d4:	01010000 	mrseq	r0, (UNDEF: 1)
    64d8:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    64dc:	01190000 	tsteq	r9, r0
    64e0:	0000141b 	andeq	r1, r0, fp, lsl r4
    64e4:	01050c01 	tsteq	r5, r1, lsl #24
    64e8:	00000081 	andeq	r0, r0, r1, lsl #1
    64ec:	0000161c 	andeq	r1, r0, ip, lsl r6
    64f0:	00001670 	andeq	r1, r0, r0, ror r6
    64f4:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    64f8:	731a0000 	tstvc	sl, #0
    64fc:	0c010074 	stceq	0, cr0, [r1], {116}	; 0x74
    6500:	0000c114 	andeq	ip, r0, r4, lsl r1
    6504:	0023df00 	eoreq	sp, r3, r0, lsl #30
    6508:	006d1b00 	rsbeq	r1, sp, r0, lsl #22
    650c:	49240c01 	stmdbmi	r4!, {r0, sl, fp}
    6510:	02000004 	andeq	r0, r0, #4
    6514:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6518:	00001416 	andeq	r1, r0, r6, lsl r4
    651c:	81060e01 	tsthi	r6, r1, lsl #28
    6520:	f2000000 	vhadd.s8	d0, d0, d0
    6524:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    6528:	00667562 	rsbeq	r7, r6, r2, ror #10
    652c:	bb080f01 	bllt	20a138 <__ccfg+0x1ea190>
    6530:	31000001 	tstcc	r0, r1
    6534:	1f000024 	svcne	0x00000024
    6538:	01007061 	tsteq	r0, r1, rrx
    653c:	00b50a10 	adcseq	r0, r5, r0, lsl sl
    6540:	91020000 	mrsls	r0, (UNDEF: 2)
    6544:	040e005c 	streq	r0, [lr], #-92	; 0xffffffa4
    6548:	000001c8 	andeq	r0, r0, r8, asr #3
    654c:	00044c00 	andeq	r4, r4, r0, lsl #24
    6550:	5f000300 	svcpl	0x00000300
    6554:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    6558:	00017001 	andeq	r7, r1, r1
    655c:	14650c00 	strbtne	r0, [r5], #-3072	; 0xfffff400
    6560:	00c00000 	sbceq	r0, r0, r0
    6564:	0c100000 	ldceq	0, cr0, [r0], {-0}
    6568:	00000000 	andeq	r0, r0, r0
    656c:	4b730000 	blmi	1cc6574 <__ccfg+0x1ca65cc>
    6570:	01020000 	mrseq	r0, (UNDEF: 2)
    6574:	0003a306 	andeq	sl, r3, r6, lsl #6
    6578:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    657c:	000003dd 	ldrdeq	r0, [r0], -sp
    6580:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    6584:	02000000 	andeq	r0, r0, #0
    6588:	00980508 	addseq	r0, r8, r8, lsl #10
    658c:	fc030000 	stc2	0, cr0, [r3], {-0}
    6590:	02000021 	andeq	r0, r0, #33	; 0x21
    6594:	004d182e 	subeq	r1, sp, lr, lsr #16
    6598:	01020000 	mrseq	r0, (UNDEF: 2)
    659c:	0003a108 	andeq	sl, r3, r8, lsl #2
    65a0:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    65a4:	31020000 	mrscc	r0, (UNDEF: 2)
    65a8:	00006019 	andeq	r6, r0, r9, lsl r0
    65ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    65b0:	00000271 	andeq	r0, r0, r1, ror r2
    65b4:	0017b303 	andseq	fp, r7, r3, lsl #6
    65b8:	19340200 	ldmdbne	r4!, {r9}
    65bc:	00000073 	andeq	r0, r0, r3, ror r0
    65c0:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    65c4:	02000000 	andeq	r0, r0, #0
    65c8:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    65cc:	04040000 	streq	r0, [r4], #-0
    65d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    65d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    65d8:	00000077 	andeq	r0, r0, r7, ror r0
    65dc:	000b4603 	andeq	r4, fp, r3, lsl #12
    65e0:	1b280300 	blne	a071e8 <__ccfg+0x9e7240>
    65e4:	0000009b 	muleq	r0, fp, r0
    65e8:	000a5c05 	andeq	r5, sl, r5, lsl #24
    65ec:	00090400 	andeq	r0, r9, r0, lsl #8
    65f0:	000000b3 	strheq	r0, [r0], -r3
    65f4:	000bfc06 	andeq	pc, fp, r6, lsl #24
    65f8:	0000b300 	andeq	fp, r0, r0, lsl #6
    65fc:	00010000 	andeq	r0, r1, r0
    6600:	5e030407 	cdppl	4, 0, cr0, cr3, cr7, {0}
    6604:	0300000a 	movweq	r0, #10
    6608:	008f1863 	addeq	r1, pc, r3, ror #16
    660c:	c0030000 	andgt	r0, r3, r0
    6610:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    6614:	00541227 	subseq	r1, r4, r7, lsr #4
    6618:	c1080000 	mrsgt	r0, (UNDEF: 8)
    661c:	03000000 	movweq	r0, #0
    6620:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    6624:	41122b04 	tstmi	r2, r4, lsl #22
    6628:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    662c:	000000d2 	ldrdeq	r0, [r0], -r2
    6630:	00161103 	andseq	r1, r6, r3, lsl #2
    6634:	122c0400 	eorne	r0, ip, #0, 8
    6638:	00000067 	andeq	r0, r0, r7, rrx
    663c:	0000e308 	andeq	lr, r0, r8, lsl #6
    6640:	02a70300 	adceq	r0, r7, #0, 6
    6644:	2d040000 	stccs	0, cr0, [r4, #-0]
    6648:	00006712 	andeq	r6, r0, r2, lsl r7
    664c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    6650:	018e0932 	orreq	r0, lr, r2, lsr r9
    6654:	c20b0000 	andgt	r0, fp, #0
    6658:	04000002 	streq	r0, [r0], #-2
    665c:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6660:	01010000 	mrseq	r0, (UNDEF: 1)
    6664:	910b0007 	tstls	fp, r7
    6668:	04000000 	streq	r0, [r0], #-0
    666c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6670:	01010000 	mrseq	r0, (UNDEF: 1)
    6674:	990b0006 	stmdbls	fp, {r1, r2}
    6678:	04000002 	streq	r0, [r0], #-2
    667c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6680:	01010000 	mrseq	r0, (UNDEF: 1)
    6684:	0c0b0005 	stceq	0, cr0, [fp], {5}
    6688:	04000004 	streq	r0, [r0], #-4
    668c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6690:	01010000 	mrseq	r0, (UNDEF: 1)
    6694:	050b0004 	streq	r0, [fp, #-4]
    6698:	04000004 	streq	r0, [r0], #-4
    669c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    66a0:	04010000 	streq	r0, [r1], #-0
    66a4:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    66a8:	04000003 	streq	r0, [r0], #-3
    66ac:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    66b0:	0c010000 	stceq	0, cr0, [r1], {-0}
    66b4:	00000040 	andeq	r0, r0, r0, asr #32
    66b8:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    66bc:	02000000 	andeq	r0, r0, #0
    66c0:	0000660c 	andeq	r6, r0, ip, lsl #12
    66c4:	033d0400 	teqeq	sp, #0, 8
    66c8:	000000d2 	ldrdeq	r0, [r0], -r2
    66cc:	01540c03 	cmpeq	r4, r3, lsl #24
    66d0:	3f040000 	svccc	0x00040000
    66d4:	0000e308 	andeq	lr, r0, r8, lsl #6
    66d8:	03000400 	movweq	r0, #1024	; 0x400
    66dc:	00000434 	andeq	r0, r0, r4, lsr r4
    66e0:	00034104 	andeq	r4, r3, r4, lsl #2
    66e4:	09000001 	stmdbeq	r0, {r0}
    66e8:	0000018e 	andeq	r0, r0, lr, lsl #3
    66ec:	0002b60d 	andeq	fp, r2, sp, lsl #12
    66f0:	1a430400 	bne	10c76f8 <__ccfg+0x10a7750>
    66f4:	0000019a 	muleq	r0, sl, r1
    66f8:	0d0d0101 	stfeqs	f0, [sp, #-4]
    66fc:	04000003 	streq	r0, [r0], #-3
    6700:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    6704:	01010000 	mrseq	r0, (UNDEF: 1)
    6708:	01c1040e 	biceq	r0, r1, lr, lsl #8
    670c:	01020000 	mrseq	r0, (UNDEF: 2)
    6710:	0003aa08 	andeq	sl, r3, r8, lsl #20
    6714:	01c10800 	biceq	r0, r1, r0, lsl #16
    6718:	1b0d0000 	blne	346720 <__ccfg+0x326778>
    671c:	04000003 	streq	r0, [r0], #-3
    6720:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    6724:	01010000 	mrseq	r0, (UNDEF: 1)
    6728:	8f05080a 	svchi	0x0005080a
    672c:	00020c09 	andeq	r0, r2, r9, lsl #24
    6730:	02d20c00 	sbcseq	r0, r2, #0, 24
    6734:	90050000 	andls	r0, r5, r0
    6738:	0000670b 	andeq	r6, r0, fp, lsl #14
    673c:	ed0c0000 	stc	0, cr0, [ip, #-0]
    6740:	05000005 	streq	r0, [r0, #-5]
    6744:	00c10891 	smulleq	r0, r1, r1, r8
    6748:	0c040000 	stceq	0, cr0, [r4], {-0}
    674c:	00000471 	andeq	r0, r0, r1, ror r4
    6750:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    6754:	06000000 	streq	r0, [r0], -r0
    6758:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    675c:	93050000 	movwls	r0, #20480	; 0x5000
    6760:	0001db03 	andeq	sp, r1, r3, lsl #22
    6764:	020c0f00 	andeq	r0, ip, #0, 30
    6768:	02230000 	eoreq	r0, r3, #0
    676c:	00100000 	andseq	r0, r0, r0
    6770:	0000360d 	andeq	r3, r0, sp, lsl #12
    6774:	0f990500 	svceq	0x00990500
    6778:	00000218 	andeq	r0, r0, r8, lsl r2
    677c:	010a0101 	tsteq	sl, r1, lsl #2
    6780:	5b099106 	blpl	26aba0 <__ccfg+0x24abf8>
    6784:	0b000002 	bleq	6794 <__exidx_end+0x3b10>
    6788:	00000464 	andeq	r0, r0, r4, ror #8
    678c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6790:	01000000 	mrseq	r0, (UNDEF: 0)
    6794:	0b000107 	bleq	6bb8 <__exidx_end+0x3f34>
    6798:	00000031 	andeq	r0, r0, r1, lsr r0
    679c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    67a0:	01000000 	mrseq	r0, (UNDEF: 0)
    67a4:	00000001 	andeq	r0, r0, r1
    67a8:	00028403 	andeq	r8, r2, r3, lsl #8
    67ac:	03960600 	orrseq	r0, r6, #0, 12
    67b0:	00000231 	andeq	r0, r0, r1, lsr r2
    67b4:	00025b08 	andeq	r5, r2, r8, lsl #22
    67b8:	02670f00 	rsbeq	r0, r7, #0, 30
    67bc:	02770000 	rsbseq	r0, r7, #0
    67c0:	00100000 	andseq	r0, r0, r0
    67c4:	00026c08 	andeq	r6, r2, r8, lsl #24
    67c8:	02ed0d00 	rsceq	r0, sp, #0, 26
    67cc:	9c060000 	stcls	0, cr0, [r6], {-0}
    67d0:	00027717 	andeq	r7, r2, r7, lsl r7
    67d4:	0f010100 	svceq	0x00010100
    67d8:	000000cd 	andeq	r0, r0, sp, asr #1
    67dc:	00000295 	muleq	r0, r5, r2
    67e0:	8a080010 	bhi	206828 <__ccfg+0x1e6880>
    67e4:	0d000002 	stceq	0, cr0, [r0, #-8]
    67e8:	00000393 	muleq	r0, r3, r3
    67ec:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    67f0:	01000002 	tsteq	r0, r2
    67f4:	01340d01 	teqeq	r4, r1, lsl #26
    67f8:	c3050000 	movwgt	r0, #20480	; 0x5000
    67fc:	0000e30e 	andeq	lr, r0, lr, lsl #6
    6800:	11010100 	mrsne	r0, (UNDEF: 17)
    6804:	0000047e 	andeq	r0, r0, lr, ror r4
    6808:	10016e08 	andne	r6, r1, r8, lsl #28
    680c:	000002c3 	andeq	r0, r0, r3, asr #5
    6810:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    6814:	01120000 	tsteq	r2, r0
    6818:	000002d5 	ldrdeq	r0, [r0], -r5
    681c:	0000c113 	andeq	ip, r0, r3, lsl r1
    6820:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    6824:	e0000001 	and	r0, r0, r1
    6828:	10000002 	andne	r0, r0, r2
    682c:	02d50800 	sbcseq	r0, r5, #0, 16
    6830:	44140000 	ldrmi	r0, [r4], #-0
    6834:	08000004 	stmdaeq	r0, {r2}
    6838:	e016017f 	ands	r0, r6, pc, ror r1
    683c:	01000002 	tsteq	r0, r2
    6840:	038b1401 	orreq	r1, fp, #16777216	; 0x1000000
    6844:	82080000 	andhi	r0, r8, #0
    6848:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    684c:	01010000 	mrseq	r0, (UNDEF: 1)
    6850:	00046914 	andeq	r6, r4, r4, lsl r9
    6854:	02d80800 	sbcseq	r0, r8, #0, 16
    6858:	0000e30e 	andeq	lr, r0, lr, lsl #6
    685c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6860:	03030808 	movweq	r0, #14344	; 0x3808
    6864:	00033909 	andeq	r3, r3, r9, lsl #18
    6868:	21f41600 	mvnscs	r1, r0, lsl #12
    686c:	07080000 	streq	r0, [r8, -r0]
    6870:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6874:	16000000 	strne	r0, [r0], -r0
    6878:	0000053f 	andeq	r0, r0, pc, lsr r5
    687c:	08030808 	stmdaeq	r3, {r3, fp}
    6880:	000000f4 	strdeq	r0, [r0], -r4
    6884:	64110004 	ldrvs	r0, [r1], #-4
    6888:	08000002 	stmdaeq	r0, {r1}
    688c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6890:	17000003 	strne	r0, [r0, -r3]
    6894:	0000048d 	andeq	r0, r0, sp, lsl #9
    6898:	030b0830 	movweq	r0, #47152	; 0xb830
    689c:	0003a908 	andeq	sl, r3, r8, lsl #18
    68a0:	04861600 	streq	r1, [r6], #1536	; 0x600
    68a4:	14080000 	strne	r0, [r8], #-0
    68a8:	00c10803 	sbceq	r0, r1, r3, lsl #16
    68ac:	16000000 	strne	r0, [r0], -r0
    68b0:	000002dc 	ldrdeq	r0, [r0], -ip
    68b4:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    68b8:	000000c1 	andeq	r0, r0, r1, asr #1
    68bc:	04811602 	streq	r1, [r1], #1538	; 0x602
    68c0:	16080000 	strne	r0, [r8], -r0
    68c4:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    68c8:	16040000 	strne	r0, [r4], -r0
    68cc:	00000f3f 	andeq	r0, r0, pc, lsr pc
    68d0:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    68d4:	000000f4 	strdeq	r0, [r0], -r4
    68d8:	043d1608 	ldrteq	r1, [sp], #-1544	; 0xfffff9f8
    68dc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    68e0:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    68e4:	160c0000 	strne	r0, [ip], -r0
    68e8:	000002d7 	ldrdeq	r0, [r0], -r7
    68ec:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    68f0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    68f4:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    68f8:	b9000003 	stmdblt	r0, {r0, r1}
    68fc:	18000003 	stmdane	r0, {r0, r1}
    6900:	00000088 	andeq	r0, r0, r8, lsl #1
    6904:	040e0003 	streq	r0, [lr], #-3
    6908:	00000346 	andeq	r0, r0, r6, asr #6
    690c:	00049811 	andeq	r9, r4, r1, lsl r8
    6910:	031c0800 	tsteq	ip, #0, 16
    6914:	0003461b 	andeq	r4, r3, fp, lsl r6
    6918:	03811400 	orreq	r1, r1, #0, 8
    691c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    6920:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    6924:	01010000 	mrseq	r0, (UNDEF: 1)
    6928:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    692c:	c60d0000 	strgt	r0, [sp], -r0
    6930:	01000013 	tsteq	r0, r3, lsl r0
    6934:	01bb0e0a 			; <UNDEFINED> instruction: 0x01bb0e0a
    6938:	01010000 	mrseq	r0, (UNDEF: 1)
    693c:	14a50119 	strtne	r0, [r5], #281	; 0x119
    6940:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6944:	00810105 	addeq	r0, r1, r5, lsl #2
    6948:	16700000 	ldrbtne	r0, [r0], -r0
    694c:	16d00000 	ldrbne	r0, [r0], r0
    6950:	9c010000 	stcls	0, cr0, [r1], {-0}
    6954:	00000449 	andeq	r0, r0, r9, asr #8
    6958:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    695c:	c1130e01 	tstgt	r3, r1, lsl #28
    6960:	65000000 	strvs	r0, [r0, #-0]
    6964:	1b000024 	blne	69fc <__exidx_end+0x3d78>
    6968:	00746d66 	rsbseq	r6, r4, r6, ror #26
    696c:	49230e01 	stmdbmi	r3!, {r0, r9, sl, fp}
    6970:	02000004 	andeq	r0, r0, #4
    6974:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6978:	00001416 	andeq	r1, r0, r6, lsl r4
    697c:	81061301 	tsthi	r6, r1, lsl #6
    6980:	83000000 	movwhi	r0, #0
    6984:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    6988:	01007061 	tsteq	r0, r1, rrx
    698c:	00b50a14 	adcseq	r0, r5, r4, lsl sl
    6990:	91020000 	mrsls	r0, (UNDEF: 2)
    6994:	040e0064 	streq	r0, [lr], #-100	; 0xffffff9c
    6998:	000001c8 	andeq	r0, r0, r8, asr #3
    699c:	00042d00 	andeq	r2, r4, r0, lsl #26
    69a0:	fa000300 	blx	75a8 <__exidx_end+0x4924>
    69a4:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    69a8:	00017001 	andeq	r7, r1, r1
    69ac:	14ad0c00 	strtne	r0, [sp], #3072	; 0xc00
    69b0:	00c00000 	sbceq	r0, r0, r0
    69b4:	0c380000 	ldceq	0, cr0, [r8], #-0
    69b8:	00000000 	andeq	r0, r0, r0
    69bc:	4d260000 	stcmi	0, cr0, [r6, #-0]
    69c0:	01020000 	mrseq	r0, (UNDEF: 2)
    69c4:	0003a306 	andeq	sl, r3, r6, lsl #6
    69c8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    69cc:	000003dd 	ldrdeq	r0, [r0], -sp
    69d0:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    69d4:	02000000 	andeq	r0, r0, #0
    69d8:	00980508 	addseq	r0, r8, r8, lsl #10
    69dc:	fc030000 	stc2	0, cr0, [r3], {-0}
    69e0:	02000021 	andeq	r0, r0, #33	; 0x21
    69e4:	004d182e 	subeq	r1, sp, lr, lsr #16
    69e8:	01020000 	mrseq	r0, (UNDEF: 2)
    69ec:	0003a108 	andeq	sl, r3, r8, lsl #2
    69f0:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    69f4:	31020000 	mrscc	r0, (UNDEF: 2)
    69f8:	00006019 	andeq	r6, r0, r9, lsl r0
    69fc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6a00:	00000271 	andeq	r0, r0, r1, ror r2
    6a04:	0017b303 	andseq	fp, r7, r3, lsl #6
    6a08:	19340200 	ldmdbne	r4!, {r9}
    6a0c:	00000073 	andeq	r0, r0, r3, ror r0
    6a10:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    6a14:	02000000 	andeq	r0, r0, #0
    6a18:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    6a1c:	04040000 	streq	r0, [r4], #-0
    6a20:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6a24:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6a28:	00000077 	andeq	r0, r0, r7, ror r0
    6a2c:	0015c003 	andseq	ip, r5, r3
    6a30:	12270300 	eorne	r0, r7, #0, 6
    6a34:	00000054 	andeq	r0, r0, r4, asr r0
    6a38:	00008f05 	andeq	r8, r0, r5, lsl #30
    6a3c:	13b80300 			; <UNDEFINED> instruction: 0x13b80300
    6a40:	2b030000 	blcs	c6a48 <__ccfg+0xa6aa0>
    6a44:	00004112 	andeq	r4, r0, r2, lsl r1
    6a48:	00a00600 	adceq	r0, r0, r0, lsl #12
    6a4c:	11030000 	mrsne	r0, (UNDEF: 3)
    6a50:	03000016 	movweq	r0, #22
    6a54:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6a58:	b1050000 	mrslt	r0, (UNDEF: 5)
    6a5c:	03000000 	movweq	r0, #0
    6a60:	000002a7 	andeq	r0, r0, r7, lsr #5
    6a64:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    6a68:	07000000 	streq	r0, [r0, -r0]
    6a6c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    6a70:	0000015c 	andeq	r0, r0, ip, asr r1
    6a74:	0002c208 	andeq	ip, r2, r8, lsl #4
    6a78:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    6a7c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a80:	00070101 	andeq	r0, r7, r1, lsl #2
    6a84:	00009108 	andeq	r9, r0, r8, lsl #2
    6a88:	03350300 	teqeq	r5, #0, 6
    6a8c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a90:	00060101 	andeq	r0, r6, r1, lsl #2
    6a94:	00029908 	andeq	r9, r2, r8, lsl #18
    6a98:	03360300 	teqeq	r6, #0, 6
    6a9c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6aa0:	00050101 	andeq	r0, r5, r1, lsl #2
    6aa4:	00040c08 	andeq	r0, r4, r8, lsl #24
    6aa8:	03370300 	teqeq	r7, #0, 6
    6aac:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ab0:	00040101 	andeq	r0, r4, r1, lsl #2
    6ab4:	00040508 	andeq	r0, r4, r8, lsl #10
    6ab8:	03380300 	teqeq	r8, #0, 6
    6abc:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ac0:	00000401 	andeq	r0, r0, r1, lsl #8
    6ac4:	0003f609 	andeq	pc, r3, r9, lsl #12
    6ac8:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    6acc:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ad0:	00400901 	subeq	r0, r0, r1, lsl #18
    6ad4:	3c030000 	stccc	0, cr0, [r3], {-0}
    6ad8:	0000a003 	andeq	sl, r0, r3
    6adc:	66090200 	strvs	r0, [r9], -r0, lsl #4
    6ae0:	03000000 	movweq	r0, #0
    6ae4:	00a0033d 	adceq	r0, r0, sp, lsr r3
    6ae8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    6aec:	00000154 	andeq	r0, r0, r4, asr r1
    6af0:	b1083f03 	tstlt	r8, r3, lsl #30
    6af4:	04000000 	streq	r0, [r0], #-0
    6af8:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
    6afc:	41030000 	mrsmi	r0, (UNDEF: 3)
    6b00:	0000ce03 	andeq	ip, r0, r3, lsl #28
    6b04:	015c0600 	cmpeq	ip, r0, lsl #12
    6b08:	b60a0000 	strlt	r0, [sl], -r0
    6b0c:	03000002 	movweq	r0, #2
    6b10:	01681a43 	cmneq	r8, r3, asr #20
    6b14:	01010000 	mrseq	r0, (UNDEF: 1)
    6b18:	00030d0a 	andeq	r0, r3, sl, lsl #26
    6b1c:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    6b20:	00000189 	andeq	r0, r0, r9, lsl #3
    6b24:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6b28:	0000018f 	andeq	r0, r0, pc, lsl #3
    6b2c:	aa080102 	bge	206f3c <__ccfg+0x1e6f94>
    6b30:	05000003 	streq	r0, [r0, #-3]
    6b34:	0000018f 	andeq	r0, r0, pc, lsl #3
    6b38:	00031b0a 	andeq	r1, r3, sl, lsl #22
    6b3c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    6b40:	00000189 	andeq	r0, r0, r9, lsl #3
    6b44:	08070101 	stmdaeq	r7, {r0, r8}
    6b48:	da098f04 	ble	26a760 <__ccfg+0x24a7b8>
    6b4c:	09000001 	stmdbeq	r0, {r0}
    6b50:	000002d2 	ldrdeq	r0, [r0], -r2
    6b54:	670b9004 	strvs	r9, [fp, -r4]
    6b58:	00000000 	andeq	r0, r0, r0
    6b5c:	0005ed09 	andeq	lr, r5, r9, lsl #26
    6b60:	08910400 	ldmeq	r1, {sl}
    6b64:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b68:	04710904 	ldrbteq	r0, [r1], #-2308	; 0xfffff6fc
    6b6c:	92040000 	andls	r0, r4, #0
    6b70:	0000ac10 	andeq	sl, r0, r0, lsl ip
    6b74:	03000600 	movweq	r0, #1536	; 0x600
    6b78:	00000413 	andeq	r0, r0, r3, lsl r4
    6b7c:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    6b80:	0c000001 	stceq	0, cr0, [r0], {1}
    6b84:	000001da 	ldrdeq	r0, [r0], -sl
    6b88:	000001f1 	strdeq	r0, [r0], -r1
    6b8c:	360a000d 	strcc	r0, [sl], -sp
    6b90:	04000000 	streq	r0, [r0], #-0
    6b94:	01e60f99 	strexheq	r0, r9, [r6]
    6b98:	01010000 	mrseq	r0, (UNDEF: 1)
    6b9c:	91050107 	tstls	r5, r7, lsl #2
    6ba0:	00022909 	andeq	r2, r2, r9, lsl #18
    6ba4:	04640800 	strbteq	r0, [r4], #-2048	; 0xfffff800
    6ba8:	93050000 	movwls	r0, #20480	; 0x5000
    6bac:	0000a007 	andeq	sl, r0, r7
    6bb0:	01070100 	mrseq	r0, (UNDEF: 23)
    6bb4:	00310800 	eorseq	r0, r1, r0, lsl #16
    6bb8:	94050000 	strls	r0, [r5], #-0
    6bbc:	0000a003 	andeq	sl, r0, r3
    6bc0:	00010100 	andeq	r0, r1, r0, lsl #2
    6bc4:	84030000 	strhi	r0, [r3], #-0
    6bc8:	05000002 	streq	r0, [r0, #-2]
    6bcc:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    6bd0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    6bd4:	0c000002 	stceq	0, cr0, [r0], {2}
    6bd8:	00000235 	andeq	r0, r0, r5, lsr r2
    6bdc:	00000245 	andeq	r0, r0, r5, asr #4
    6be0:	3a05000d 	bcc	146c1c <__ccfg+0x126c74>
    6be4:	0a000002 	beq	6bf4 <__exidx_end+0x3f70>
    6be8:	000002ed 	andeq	r0, r0, sp, ror #5
    6bec:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    6bf0:	01000002 	tsteq	r0, r2
    6bf4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    6bf8:	02630000 	rsbeq	r0, r3, #0
    6bfc:	000d0000 	andeq	r0, sp, r0
    6c00:	00025805 	andeq	r5, r2, r5, lsl #16
    6c04:	03930a00 	orrseq	r0, r3, #0, 20
    6c08:	06060000 	streq	r0, [r6], -r0
    6c0c:	00026313 	andeq	r6, r2, r3, lsl r3
    6c10:	0a010100 	beq	47018 <__ccfg+0x27070>
    6c14:	00000134 	andeq	r0, r0, r4, lsr r1
    6c18:	b10ec304 	tstlt	lr, r4, lsl #6
    6c1c:	01000000 	mrseq	r0, (UNDEF: 0)
    6c20:	047e0e01 	ldrbteq	r0, [lr], #-3585	; 0xfffff1ff
    6c24:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    6c28:	02911001 	addseq	r1, r1, #1
    6c2c:	040b0000 	streq	r0, [fp], #-0
    6c30:	00000297 	muleq	r0, r7, r2
    6c34:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    6c38:	8f100000 	svchi	0x00100000
    6c3c:	00000000 	andeq	r0, r0, r0
    6c40:	0001960c 	andeq	r9, r1, ip, lsl #12
    6c44:	0002ae00 	andeq	sl, r2, r0, lsl #28
    6c48:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6c4c:	000002a3 	andeq	r0, r0, r3, lsr #5
    6c50:	00044411 	andeq	r4, r4, r1, lsl r4
    6c54:	017f0700 	cmneq	pc, r0, lsl #14
    6c58:	0002ae16 	andeq	sl, r2, r6, lsl lr
    6c5c:	11010100 	mrsne	r0, (UNDEF: 17)
    6c60:	0000038b 	andeq	r0, r0, fp, lsl #7
    6c64:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    6c68:	000000bd 	strheq	r0, [r0], -sp
    6c6c:	69110101 	ldmdbvs	r1, {r0, r8}
    6c70:	07000004 	streq	r0, [r0, -r4]
    6c74:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    6c78:	01000000 	mrseq	r0, (UNDEF: 0)
    6c7c:	07081201 	streq	r1, [r8, -r1, lsl #4]
    6c80:	07090303 	streq	r0, [r9, -r3, lsl #6]
    6c84:	13000003 	movwne	r0, #3
    6c88:	000021f4 	strdeq	r2, [r0], -r4
    6c8c:	07030707 	streq	r0, [r3, -r7, lsl #14]
    6c90:	0000008f 	andeq	r0, r0, pc, lsl #1
    6c94:	053f1300 	ldreq	r1, [pc, #-768]!	; 699c <__exidx_end+0x3d18>
    6c98:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6c9c:	00c20803 	sbceq	r0, r2, r3, lsl #16
    6ca0:	00040000 	andeq	r0, r4, r0
    6ca4:	0002640e 	andeq	r6, r2, lr, lsl #8
    6ca8:	03090700 	movweq	r0, #38656	; 0x9700
    6cac:	0002e003 	andeq	lr, r2, r3
    6cb0:	048d1400 	streq	r1, [sp], #1024	; 0x400
    6cb4:	07300000 	ldreq	r0, [r0, -r0]!
    6cb8:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    6cbc:	13000003 	movwne	r0, #3
    6cc0:	00000486 	andeq	r0, r0, r6, lsl #9
    6cc4:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6cc8:	0000008f 	andeq	r0, r0, pc, lsl #1
    6ccc:	02dc1300 	sbcseq	r1, ip, #0, 6
    6cd0:	15070000 	strne	r0, [r7, #-0]
    6cd4:	008f0803 	addeq	r0, pc, r3, lsl #16
    6cd8:	13020000 	movwne	r0, #8192	; 0x2000
    6cdc:	00000481 	andeq	r0, r0, r1, lsl #9
    6ce0:	0b031607 	bleq	cc504 <__ccfg+0xac55c>
    6ce4:	00000284 	andeq	r0, r0, r4, lsl #5
    6ce8:	0f3f1304 	svceq	0x003f1304
    6cec:	17070000 	strne	r0, [r7, -r0]
    6cf0:	00c20903 	sbceq	r0, r2, r3, lsl #18
    6cf4:	13080000 	movwne	r0, #32768	; 0x8000
    6cf8:	0000043d 	andeq	r0, r0, sp, lsr r4
    6cfc:	0f031807 	svceq	0x00031807
    6d00:	00000377 	andeq	r0, r0, r7, ror r3
    6d04:	02d7130c 	sbcseq	r1, r7, #12, 6	; 0x30000000
    6d08:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    6d0c:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    6d10:	002c0000 	eoreq	r0, ip, r0
    6d14:	0003070c 	andeq	r0, r3, ip, lsl #14
    6d18:	00038700 	andeq	r8, r3, r0, lsl #14
    6d1c:	00881500 	addeq	r1, r8, r0, lsl #10
    6d20:	00030000 	andeq	r0, r3, r0
    6d24:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    6d28:	980e0000 	stmdals	lr, {}	; <UNPREDICTABLE>
    6d2c:	07000004 	streq	r0, [r0, -r4]
    6d30:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6d34:	11000003 	tstne	r0, r3
    6d38:	00000381 	andeq	r0, r0, r1, lsl #7
    6d3c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    6d40:	000003a9 	andeq	r0, r0, r9, lsr #7
    6d44:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6d48:	0000038d 	andeq	r0, r0, sp, lsl #7
    6d4c:	14f70116 	ldrbtne	r0, [r7], #278	; 0x116
    6d50:	1d010000 	stcne	0, cr0, [r1, #-0]
    6d54:	16d00101 	ldrbne	r0, [r0], r1, lsl #2
    6d58:	17400000 	strbne	r0, [r0, -r0]
    6d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d60:	0000042a 	andeq	r0, r0, sl, lsr #8
    6d64:	0000b817 	andeq	fp, r0, r7, lsl r8
    6d68:	011d0100 	tsteq	sp, r0, lsl #2
    6d6c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6d70:	000024cd 	andeq	r2, r0, sp, asr #9
    6d74:	000f3f18 	andeq	r3, pc, r8, lsl pc	; <UNPREDICTABLE>
    6d78:	011d0100 	tsteq	sp, r0, lsl #2
    6d7c:	0000042a 	andeq	r0, r0, sl, lsr #8
    6d80:	000024f6 	strdeq	r2, [r0], -r6
    6d84:	00150319 	andseq	r0, r5, r9, lsl r3
    6d88:	01300100 	teqeq	r0, r0, lsl #2
    6d8c:	000c201a 	andeq	r2, ip, sl, lsl r0
    6d90:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    6d94:	22010072 	andcs	r0, r1, #114	; 0x72
    6d98:	00042a15 	andeq	r2, r4, r5, lsl sl
    6d9c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    6da0:	1b200000 	blne	806da8 <__ccfg+0x7e6e00>
    6da4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6da8:	810d2301 	tsthi	sp, r1, lsl #6
    6dac:	05000000 	streq	r0, [r0, #-0]
    6db0:	00003803 	andeq	r3, r0, r3, lsl #16
    6db4:	14f11820 	ldrbtne	r1, [r1], #2080	; 0x820
    6db8:	24010000 	strcs	r0, [r1], #-0
    6dbc:	00008106 	andeq	r8, r0, r6, lsl #2
    6dc0:	00252000 	eoreq	r2, r5, r0
    6dc4:	0b000000 	bleq	6dcc <__exidx_end+0x4148>
    6dc8:	00019604 	andeq	r9, r1, r4, lsl #12
    6dcc:	04400000 	strbeq	r0, [r0], #-0
    6dd0:	00030000 	andeq	r0, r3, r0
    6dd4:	00001f6e 	andeq	r1, r0, lr, ror #30
    6dd8:	01700104 	cmneq	r0, r4, lsl #2
    6ddc:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    6de0:	c0000015 	andgt	r0, r0, r5, lsl r0
    6de4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6de8:	0000000c 	andeq	r0, r0, ip
    6dec:	cb000000 	blgt	6df4 <__exidx_end+0x4170>
    6df0:	0200004e 	andeq	r0, r0, #78	; 0x4e
    6df4:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    6df8:	02020000 	andeq	r0, r2, #0
    6dfc:	0003dd05 	andeq	sp, r3, r5, lsl #26
    6e00:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6e04:	0000009d 	muleq	r0, sp, r0
    6e08:	98050802 	stmdals	r5, {r1, fp}
    6e0c:	03000000 	movweq	r0, #0
    6e10:	000021fc 	strdeq	r2, [r0], -ip
    6e14:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    6e18:	02000000 	andeq	r0, r0, #0
    6e1c:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    6e20:	ea030000 	b	c6e28 <__ccfg+0xa6e80>
    6e24:	02000020 	andeq	r0, r0, #32
    6e28:	00601931 	rsbeq	r1, r0, r1, lsr r9
    6e2c:	02020000 	andeq	r0, r2, #0
    6e30:	00027107 	andeq	r7, r2, r7, lsl #2
    6e34:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    6e38:	34020000 	strcc	r0, [r2], #-0
    6e3c:	00007319 	andeq	r7, r0, r9, lsl r3
    6e40:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6e44:	00000072 	andeq	r0, r0, r2, ror r0
    6e48:	6d070802 	stcvs	8, cr0, [r7, #-8]
    6e4c:	04000000 	streq	r0, [r0], #-0
    6e50:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6e54:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6e58:	00007707 	andeq	r7, r0, r7, lsl #14
    6e5c:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    6e60:	27030000 	strcs	r0, [r3, -r0]
    6e64:	00005412 	andeq	r5, r0, r2, lsl r4
    6e68:	008f0500 	addeq	r0, pc, r0, lsl #10
    6e6c:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    6e70:	03000013 	movweq	r0, #19
    6e74:	0041122b 	subeq	r1, r1, fp, lsr #4
    6e78:	a0060000 	andge	r0, r6, r0
    6e7c:	03000000 	movweq	r0, #0
    6e80:	00001611 	andeq	r1, r0, r1, lsl r6
    6e84:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    6e88:	05000000 	streq	r0, [r0, #-0]
    6e8c:	000000b1 	strheq	r0, [r0], -r1
    6e90:	0002a703 	andeq	sl, r2, r3, lsl #14
    6e94:	122d0300 	eorne	r0, sp, #0, 6
    6e98:	00000067 	andeq	r0, r0, r7, rrx
    6e9c:	00076203 	andeq	r6, r7, r3, lsl #4
    6ea0:	102e0300 	eorne	r0, lr, r0, lsl #6
    6ea4:	000000da 	ldrdeq	r0, [r0], -sl
    6ea8:	008f0407 	addeq	r0, pc, r7, lsl #8
    6eac:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6eb0:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    6eb4:	09000001 	stmdbeq	r0, {r0}
    6eb8:	000002c2 	andeq	r0, r0, r2, asr #5
    6ebc:	a0073403 	andge	r3, r7, r3, lsl #8
    6ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ec4:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    6ec8:	00000091 	muleq	r0, r1, r0
    6ecc:	a0033503 	andge	r3, r3, r3, lsl #10
    6ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ed4:	09000601 	stmdbeq	r0, {r0, r9, sl}
    6ed8:	00000299 	muleq	r0, r9, r2
    6edc:	a0033603 	andge	r3, r3, r3, lsl #12
    6ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ee4:	09000501 	stmdbeq	r0, {r0, r8, sl}
    6ee8:	0000040c 	andeq	r0, r0, ip, lsl #8
    6eec:	a0033703 	andge	r3, r3, r3, lsl #14
    6ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ef4:	09000401 	stmdbeq	r0, {r0, sl}
    6ef8:	00000405 	andeq	r0, r0, r5, lsl #8
    6efc:	a0033803 	andge	r3, r3, r3, lsl #16
    6f00:	01000000 	mrseq	r0, (UNDEF: 0)
    6f04:	0a000004 	beq	6f1c <__exidx_end+0x4298>
    6f08:	000003f6 	strdeq	r0, [r0], -r6
    6f0c:	a0073a03 	andge	r3, r7, r3, lsl #20
    6f10:	01000000 	mrseq	r0, (UNDEF: 0)
    6f14:	0000400a 	andeq	r4, r0, sl
    6f18:	033c0300 	teqeq	ip, #0, 6
    6f1c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6f20:	00660a02 	rsbeq	r0, r6, r2, lsl #20
    6f24:	3d030000 	stccc	0, cr0, [r3, #-0]
    6f28:	0000a003 	andeq	sl, r0, r3
    6f2c:	540a0300 	strpl	r0, [sl], #-768	; 0xfffffd00
    6f30:	03000001 	movweq	r0, #1
    6f34:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    6f38:	00040000 	andeq	r0, r4, r0
    6f3c:	00043403 	andeq	r3, r4, r3, lsl #8
    6f40:	03410300 	movteq	r0, #4864	; 0x1300
    6f44:	000000e0 	andeq	r0, r0, r0, ror #1
    6f48:	00016e06 	andeq	r6, r1, r6, lsl #28
    6f4c:	02b60b00 	adcseq	r0, r6, #0, 22
    6f50:	43030000 	movwmi	r0, #12288	; 0x3000
    6f54:	00017a1a 	andeq	r7, r1, sl, lsl sl
    6f58:	0b010100 	bleq	47360 <__ccfg+0x273b8>
    6f5c:	0000030d 	andeq	r0, r0, sp, lsl #6
    6f60:	9b0e4503 	blls	398374 <__ccfg+0x3783cc>
    6f64:	01000001 	tsteq	r0, r1
    6f68:	a1040701 	tstge	r4, r1, lsl #14
    6f6c:	02000001 	andeq	r0, r0, #1
    6f70:	03aa0801 			; <UNDEFINED> instruction: 0x03aa0801
    6f74:	a1050000 	mrsge	r0, (UNDEF: 5)
    6f78:	0b000001 	bleq	6f84 <__exidx_end+0x4300>
    6f7c:	0000031b 	andeq	r0, r0, fp, lsl r3
    6f80:	9b1e4503 	blls	798394 <__ccfg+0x7783ec>
    6f84:	01000001 	tsteq	r0, r1
    6f88:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    6f8c:	01ec098f 	mvneq	r0, pc, lsl #19
    6f90:	d20a0000 	andle	r0, sl, #0
    6f94:	04000002 	streq	r0, [r0], #-2
    6f98:	00670b90 	mlseq	r7, r0, fp, r0
    6f9c:	0a000000 	beq	6fa4 <__exidx_end+0x4320>
    6fa0:	000005ed 	andeq	r0, r0, sp, ror #11
    6fa4:	8f089104 	svchi	0x00089104
    6fa8:	04000000 	streq	r0, [r0], #-0
    6fac:	0004710a 	andeq	r7, r4, sl, lsl #2
    6fb0:	10920400 	addsne	r0, r2, r0, lsl #8
    6fb4:	000000ac 	andeq	r0, r0, ip, lsr #1
    6fb8:	13030006 	movwne	r0, #12294	; 0x3006
    6fbc:	04000004 	streq	r0, [r0], #-4
    6fc0:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    6fc4:	ec0c0000 	stc	0, cr0, [ip], {-0}
    6fc8:	03000001 	movweq	r0, #1
    6fcc:	0d000002 	stceq	0, cr0, [r0, #-8]
    6fd0:	00360b00 	eorseq	r0, r6, r0, lsl #22
    6fd4:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    6fd8:	0001f80f 	andeq	pc, r1, pc, lsl #16
    6fdc:	08010100 	stmdaeq	r1, {r8}
    6fe0:	09910501 	ldmibeq	r1, {r0, r8, sl}
    6fe4:	0000023b 	andeq	r0, r0, fp, lsr r2
    6fe8:	00046409 	andeq	r6, r4, r9, lsl #8
    6fec:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    6ff0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ff4:	00010701 	andeq	r0, r1, r1, lsl #14
    6ff8:	00003109 	andeq	r3, r0, r9, lsl #2
    6ffc:	03940500 	orrseq	r0, r4, #0, 10
    7000:	000000a0 	andeq	r0, r0, r0, lsr #1
    7004:	00000101 	andeq	r0, r0, r1, lsl #2
    7008:	02840300 	addeq	r0, r4, #0, 6
    700c:	96050000 	strls	r0, [r5], -r0
    7010:	00021103 	andeq	r1, r2, r3, lsl #2
    7014:	023b0500 	eorseq	r0, fp, #0, 10
    7018:	470c0000 	strmi	r0, [ip, -r0]
    701c:	57000002 	strpl	r0, [r0, -r2]
    7020:	0d000002 	stceq	0, cr0, [r0, #-8]
    7024:	024c0500 	subeq	r0, ip, #0, 10
    7028:	ed0b0000 	stc	0, cr0, [fp, #-0]
    702c:	05000002 	streq	r0, [r0, #-2]
    7030:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    7034:	01010000 	mrseq	r0, (UNDEF: 1)
    7038:	00009b0c 	andeq	r9, r0, ip, lsl #22
    703c:	00027500 	andeq	r7, r2, r0, lsl #10
    7040:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7044:	0000026a 	andeq	r0, r0, sl, ror #4
    7048:	0003930b 	andeq	r9, r3, fp, lsl #6
    704c:	13060600 	movwne	r0, #26112	; 0x6600
    7050:	00000275 	andeq	r0, r0, r5, ror r2
    7054:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
    7058:	04000001 	streq	r0, [r0], #-1
    705c:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    7060:	01010000 	mrseq	r0, (UNDEF: 1)
    7064:	00047e0e 	andeq	r7, r4, lr, lsl #28
    7068:	016e0700 	cmneq	lr, r0, lsl #14
    706c:	0002a310 	andeq	sl, r2, r0, lsl r3
    7070:	a9040700 	stmdbge	r4, {r8, r9, sl}
    7074:	0f000002 	svceq	0x00000002
    7078:	0002b501 	andeq	fp, r2, r1, lsl #10
    707c:	008f1000 	addeq	r1, pc, r0
    7080:	0c000000 	stceq	0, cr0, [r0], {-0}
    7084:	000001a8 	andeq	r0, r0, r8, lsr #3
    7088:	000002c0 	andeq	r0, r0, r0, asr #5
    708c:	b505000d 	strlt	r0, [r5, #-13]
    7090:	11000002 	tstne	r0, r2
    7094:	00000444 	andeq	r0, r0, r4, asr #8
    7098:	16017f07 	strne	r7, [r1], -r7, lsl #30
    709c:	000002c0 	andeq	r0, r0, r0, asr #5
    70a0:	8b110101 	blhi	4474ac <__ccfg+0x427504>
    70a4:	07000003 	streq	r0, [r0, -r3]
    70a8:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    70ac:	01000000 	mrseq	r0, (UNDEF: 0)
    70b0:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
    70b4:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    70b8:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    70bc:	01010000 	mrseq	r0, (UNDEF: 1)
    70c0:	03070812 	movweq	r0, #30738	; 0x7812
    70c4:	03190903 	tsteq	r9, #49152	; 0xc000
    70c8:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    70cc:	07000021 	streq	r0, [r0, -r1, lsr #32]
    70d0:	8f070307 	svchi	0x00070307
    70d4:	00000000 	andeq	r0, r0, r0
    70d8:	00053f13 	andeq	r3, r5, r3, lsl pc
    70dc:	03080700 	movweq	r0, #34560	; 0x8700
    70e0:	0000c208 	andeq	ip, r0, r8, lsl #4
    70e4:	0e000400 	cfcpyseq	mvf0, mvf0
    70e8:	00000264 	andeq	r0, r0, r4, ror #4
    70ec:	03030907 	movweq	r0, #14599	; 0x3907
    70f0:	000002f2 	strdeq	r0, [r0], -r2
    70f4:	00048d14 	andeq	r8, r4, r4, lsl sp
    70f8:	0b073000 	bleq	1d3100 <__ccfg+0x1b3158>
    70fc:	03890803 	orreq	r0, r9, #196608	; 0x30000
    7100:	86130000 	ldrhi	r0, [r3], -r0
    7104:	07000004 	streq	r0, [r0, -r4]
    7108:	8f080314 	svchi	0x00080314
    710c:	00000000 	andeq	r0, r0, r0
    7110:	0002dc13 	andeq	sp, r2, r3, lsl ip
    7114:	03150700 	tsteq	r5, #0, 14
    7118:	00008f08 	andeq	r8, r0, r8, lsl #30
    711c:	81130200 	tsthi	r3, r0, lsl #4
    7120:	07000004 	streq	r0, [r0, -r4]
    7124:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    7128:	04000002 	streq	r0, [r0], #-2
    712c:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
    7130:	03170700 	tsteq	r7, #0, 14
    7134:	0000c209 	andeq	ip, r0, r9, lsl #4
    7138:	3d130800 	ldccc	8, cr0, [r3, #-0]
    713c:	07000004 	streq	r0, [r0, -r4]
    7140:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7144:	0c000003 	stceq	0, cr0, [r0], {3}
    7148:	0002d713 	andeq	sp, r2, r3, lsl r7
    714c:	03190700 	tsteq	r9, #0, 14
    7150:	00039915 	andeq	r9, r3, r5, lsl r9
    7154:	0c002c00 	stceq	12, cr2, [r0], {-0}
    7158:	00000319 	andeq	r0, r0, r9, lsl r3
    715c:	00000399 	muleq	r0, r9, r3
    7160:	00008815 	andeq	r8, r0, r5, lsl r8
    7164:	07000300 	streq	r0, [r0, -r0, lsl #6]
    7168:	00032604 	andeq	r2, r3, r4, lsl #12
    716c:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
    7170:	1c070000 	stcne	0, cr0, [r7], {-0}
    7174:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    7178:	81110000 	tsthi	r1, r0
    717c:	07000003 	streq	r0, [r0, -r3]
    7180:	bb14031e 	bllt	507e00 <__ccfg+0x4e7e58>
    7184:	01000003 	tsteq	r0, r3
    7188:	9f040701 	svcls	0x00040701
    718c:	16000003 	strne	r0, [r0], -r3
    7190:	000013c6 	andeq	r1, r0, r6, asr #7
    7194:	9b070d01 	blls	1ca5a0 <__ccfg+0x1aa5f8>
    7198:	01000001 	tsteq	r0, r1
    719c:	00400305 	subeq	r0, r0, r5, lsl #6
    71a0:	01172000 	tsteq	r7, r0
    71a4:	0000150e 	andeq	r1, r0, lr, lsl #10
    71a8:	01012301 	tsteq	r1, r1, lsl #6
    71ac:	00001740 	andeq	r1, r0, r0, asr #14
    71b0:	0000185c 	andeq	r1, r0, ip, asr r8
    71b4:	b8189c01 	ldmdalt	r8, {r0, sl, fp, ip, pc}
    71b8:	01000000 	mrseq	r0, (UNDEF: 0)
    71bc:	008f0123 	addeq	r0, pc, r3, lsr #2
    71c0:	25330000 	ldrcs	r0, [r3, #-0]!
    71c4:	3f190000 	svccc	0x00190000
    71c8:	0100000f 	tsteq	r0, pc
    71cc:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    71d0:	25510000 	ldrbcs	r0, [r1, #-0]
    71d4:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    71d8:	1b00000c 	blne	7210 <__exidx_end+0x458c>
    71dc:	00727470 	rsbseq	r7, r2, r0, ror r4
    71e0:	9b0f2801 	blls	3d11ec <__ccfg+0x3b1244>
    71e4:	05000001 	streq	r0, [r0, #-1]
    71e8:	00004803 	andeq	r4, r0, r3, lsl #16
    71ec:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    71f0:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    71f4:	0000810d 	andeq	r8, r0, sp, lsl #2
    71f8:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    71fc:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    7200:	000014f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    7204:	81062a01 	tsthi	r6, r1, lsl #20
    7208:	a7000000 	strge	r0, [r0, -r0]
    720c:	00000025 	andeq	r0, r0, r5, lsr #32
    7210:	05f00000 	ldrbeq	r0, [r0, #0]!
    7214:	00030000 	andeq	r0, r3, r0
    7218:	000020e6 	andeq	r2, r0, r6, ror #1
    721c:	01700104 	cmneq	r0, r4, lsl #2
    7220:	5c0c0000 	stcpl	0, cr0, [ip], {-0}
    7224:	c0000015 	andgt	r0, r0, r5, lsl r0
    7228:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    722c:	0000000c 	andeq	r0, r0, ip
    7230:	1a000000 	bne	7238 <__exidx_end+0x45b4>
    7234:	02000051 	andeq	r0, r0, #81	; 0x51
    7238:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    723c:	02020000 	andeq	r0, r2, #0
    7240:	0003dd05 	andeq	sp, r3, r5, lsl #26
    7244:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7248:	0000009d 	muleq	r0, sp, r0
    724c:	98050802 	stmdals	r5, {r1, fp}
    7250:	03000000 	movweq	r0, #0
    7254:	000021fc 	strdeq	r2, [r0], -ip
    7258:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    725c:	02000000 	andeq	r0, r0, #0
    7260:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    7264:	ea030000 	b	c726c <__ccfg+0xa72c4>
    7268:	02000020 	andeq	r0, r0, #32
    726c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7270:	02020000 	andeq	r0, r2, #0
    7274:	00027107 	andeq	r7, r2, r7, lsl #2
    7278:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    727c:	34020000 	strcc	r0, [r2], #-0
    7280:	00007319 	andeq	r7, r0, r9, lsl r3
    7284:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7288:	00000072 	andeq	r0, r0, r2, ror r0
    728c:	6d070802 	stcvs	8, cr0, [r7, #-8]
    7290:	04000000 	streq	r0, [r0], #-0
    7294:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7298:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    729c:	00007707 	andeq	r7, r0, r7, lsl #14
    72a0:	0b460300 	bleq	1187ea8 <__ccfg+0x1167f00>
    72a4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    72a8:	00009b1b 	andeq	r9, r0, fp, lsl fp
    72ac:	0a5c0500 	beq	17086b4 <__ccfg+0x16e870c>
    72b0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    72b4:	0000b300 	andeq	fp, r0, r0, lsl #6
    72b8:	0bfc0600 	bleq	fff08ac0 <_estack+0xdff03ac0>
    72bc:	00b30000 	adcseq	r0, r3, r0
    72c0:	01000000 	mrseq	r0, (UNDEF: 0)
    72c4:	03040700 	movweq	r0, #18176	; 0x4700
    72c8:	00000a5e 	andeq	r0, r0, lr, asr sl
    72cc:	8f186303 	svchi	0x00186303
    72d0:	03000000 	movweq	r0, #0
    72d4:	000015c0 	andeq	r1, r0, r0, asr #11
    72d8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    72dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72e0:	000000c1 	andeq	r0, r0, r1, asr #1
    72e4:	0013b803 	andseq	fp, r3, r3, lsl #16
    72e8:	122b0400 	eorne	r0, fp, #0, 8
    72ec:	00000041 	andeq	r0, r0, r1, asr #32
    72f0:	0000d209 	andeq	sp, r0, r9, lsl #4
    72f4:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    72f8:	2c040000 	stccs	0, cr0, [r4], {-0}
    72fc:	00006712 	andeq	r6, r0, r2, lsl r7
    7300:	00e30800 	rsceq	r0, r3, r0, lsl #16
    7304:	a7030000 	strge	r0, [r3, -r0]
    7308:	04000002 	streq	r0, [r0], #-2
    730c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7310:	62030000 	andvs	r0, r3, #0
    7314:	04000007 	streq	r0, [r0], #-7
    7318:	010c102e 	tsteq	ip, lr, lsr #32
    731c:	040a0000 	streq	r0, [sl], #-0
    7320:	000000c1 	andeq	r0, r0, r1, asr #1
    7324:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    7328:	0001a009 	andeq	sl, r1, r9
    732c:	02c20c00 	sbceq	r0, r2, #0, 24
    7330:	34040000 	strcc	r0, [r4], #-0
    7334:	0000d207 	andeq	sp, r0, r7, lsl #4
    7338:	07010100 	streq	r0, [r1, -r0, lsl #2]
    733c:	00910c00 	addseq	r0, r1, r0, lsl #24
    7340:	35040000 	strcc	r0, [r4, #-0]
    7344:	0000d203 	andeq	sp, r0, r3, lsl #4
    7348:	06010100 	streq	r0, [r1], -r0, lsl #2
    734c:	02990c00 	addseq	r0, r9, #0, 24
    7350:	36040000 	strcc	r0, [r4], -r0
    7354:	0000d203 	andeq	sp, r0, r3, lsl #4
    7358:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    735c:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    7360:	37040000 	strcc	r0, [r4, -r0]
    7364:	0000d203 	andeq	sp, r0, r3, lsl #4
    7368:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    736c:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    7370:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7374:	0000d203 	andeq	sp, r0, r3, lsl #4
    7378:	00040100 	andeq	r0, r4, r0, lsl #2
    737c:	03f60d00 	mvnseq	r0, #0, 26
    7380:	3a040000 	bcc	107388 <__ccfg+0xe73e0>
    7384:	0000d207 	andeq	sp, r0, r7, lsl #4
    7388:	400d0100 	andmi	r0, sp, r0, lsl #2
    738c:	04000000 	streq	r0, [r0], #-0
    7390:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7394:	0d020000 	stceq	0, cr0, [r2, #-0]
    7398:	00000066 	andeq	r0, r0, r6, rrx
    739c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    73a0:	03000000 	movweq	r0, #0
    73a4:	0001540d 	andeq	r5, r1, sp, lsl #8
    73a8:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    73ac:	000000e3 	andeq	r0, r0, r3, ror #1
    73b0:	34030004 	strcc	r0, [r3], #-4
    73b4:	04000004 	streq	r0, [r0], #-4
    73b8:	01120341 	tsteq	r2, r1, asr #6
    73bc:	a0090000 	andge	r0, r9, r0
    73c0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    73c4:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    73c8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    73cc:	01000001 	tsteq	r0, r1
    73d0:	030d0e01 	movweq	r0, #56833	; 0xde01
    73d4:	45040000 	strmi	r0, [r4, #-0]
    73d8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    73dc:	0a010100 	beq	477e4 <__ccfg+0x2783c>
    73e0:	0001d304 	andeq	sp, r1, r4, lsl #6
    73e4:	08010200 	stmdaeq	r1, {r9}
    73e8:	000003aa 	andeq	r0, r0, sl, lsr #7
    73ec:	0001d308 	andeq	sp, r1, r8, lsl #6
    73f0:	031b0e00 	tsteq	fp, #0, 28
    73f4:	45040000 	strmi	r0, [r4, #-0]
    73f8:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    73fc:	0b010100 	bleq	47804 <__ccfg+0x2785c>
    7400:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    7404:	0000021e 	andeq	r0, r0, lr, lsl r2
    7408:	0002d20d 	andeq	sp, r2, sp, lsl #4
    740c:	0b900500 	bleq	fe408814 <_estack+0xde403814>
    7410:	00000067 	andeq	r0, r0, r7, rrx
    7414:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
    7418:	91050000 	mrsls	r0, (UNDEF: 5)
    741c:	0000c108 	andeq	ip, r0, r8, lsl #2
    7420:	710d0400 	tstvc	sp, r0, lsl #8
    7424:	05000004 	streq	r0, [r0, #-4]
    7428:	00de1092 	smullseq	r1, lr, r2, r0
    742c:	00060000 	andeq	r0, r6, r0
    7430:	00041303 	andeq	r1, r4, r3, lsl #6
    7434:	03930500 	orrseq	r0, r3, #0, 10
    7438:	000001ed 	andeq	r0, r0, sp, ror #3
    743c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    7440:	00023500 	andeq	r3, r2, r0, lsl #10
    7444:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    7448:	00000036 	andeq	r0, r0, r6, lsr r0
    744c:	2a0f9905 	bcs	3ed868 <__ccfg+0x3cd8c0>
    7450:	01000002 	tsteq	r0, r2
    7454:	06010b01 	streq	r0, [r1], -r1, lsl #22
    7458:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    745c:	640c0000 	strvs	r0, [ip], #-0
    7460:	06000004 	streq	r0, [r0], -r4
    7464:	00d20793 	smullseq	r0, r2, r3, r7
    7468:	07010000 	streq	r0, [r1, -r0]
    746c:	310c0001 	tstcc	ip, r1
    7470:	06000000 	streq	r0, [r0], -r0
    7474:	00d20394 	smullseq	r0, r2, r4, r3
    7478:	01010000 	mrseq	r0, (UNDEF: 1)
    747c:	03000000 	movweq	r0, #0
    7480:	00000284 	andeq	r0, r0, r4, lsl #5
    7484:	43039606 	movwmi	r9, #13830	; 0x3606
    7488:	08000002 	stmdaeq	r0, {r1}
    748c:	0000026d 	andeq	r0, r0, sp, ror #4
    7490:	0002790f 	andeq	r7, r2, pc, lsl #18
    7494:	00028900 	andeq	r8, r2, r0, lsl #18
    7498:	08001000 	stmdaeq	r0, {ip}
    749c:	0000027e 	andeq	r0, r0, lr, ror r2
    74a0:	0002ed0e 	andeq	lr, r2, lr, lsl #26
    74a4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    74a8:	00000289 	andeq	r0, r0, r9, lsl #5
    74ac:	cd0f0101 	stfgts	f0, [pc, #-4]	; 74b0 <__exidx_end+0x482c>
    74b0:	a7000000 	strge	r0, [r0, -r0]
    74b4:	10000002 	andne	r0, r0, r2
    74b8:	029c0800 	addseq	r0, ip, #0, 16
    74bc:	930e0000 	movwls	r0, #57344	; 0xe000
    74c0:	07000003 	streq	r0, [r0, -r3]
    74c4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    74c8:	01010000 	mrseq	r0, (UNDEF: 1)
    74cc:	0001340e 	andeq	r3, r1, lr, lsl #8
    74d0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    74d4:	000000e3 	andeq	r0, r0, r3, ror #1
    74d8:	7e110101 	mufvcs	f0, f1, f1
    74dc:	08000004 	stmdaeq	r0, {r2}
    74e0:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    74e4:	0a000002 	beq	74f4 <__exidx_end+0x4870>
    74e8:	0002db04 	andeq	sp, r2, r4, lsl #22
    74ec:	e7011200 	str	r1, [r1, -r0, lsl #4]
    74f0:	13000002 	movwne	r0, #2
    74f4:	000000c1 	andeq	r0, r0, r1, asr #1
    74f8:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    74fc:	02f20000 	rscseq	r0, r2, #0
    7500:	00100000 	andseq	r0, r0, r0
    7504:	0002e708 	andeq	lr, r2, r8, lsl #14
    7508:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    750c:	7f080000 	svcvc	0x00080000
    7510:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    7514:	01010000 	mrseq	r0, (UNDEF: 1)
    7518:	00038b14 	andeq	r8, r3, r4, lsl fp
    751c:	01820800 	orreq	r0, r2, r0, lsl #16
    7520:	0000ef14 	andeq	lr, r0, r4, lsl pc
    7524:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7528:	00000469 	andeq	r0, r0, r9, ror #8
    752c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7530:	000000e3 	andeq	r0, r0, r3, ror #1
    7534:	08150101 	ldmdaeq	r5, {r0, r8}
    7538:	09030308 	stmdbeq	r3, {r3, r8, r9}
    753c:	0000034b 	andeq	r0, r0, fp, asr #6
    7540:	0021f416 	eoreq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    7544:	03070800 	movweq	r0, #30720	; 0x7800
    7548:	0000c107 	andeq	ip, r0, r7, lsl #2
    754c:	3f160000 	svccc	0x00160000
    7550:	08000005 	stmdaeq	r0, {r0, r2}
    7554:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7558:	04000000 	streq	r0, [r0], #-0
    755c:	02641100 	rsbeq	r1, r4, #0, 2
    7560:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7564:	03240303 			; <UNDEFINED> instruction: 0x03240303
    7568:	8d170000 	ldchi	0, cr0, [r7, #-0]
    756c:	30000004 	andcc	r0, r0, r4
    7570:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7574:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7578:	00048616 	andeq	r8, r4, r6, lsl r6
    757c:	03140800 	tsteq	r4, #0, 16
    7580:	0000c108 	andeq	ip, r0, r8, lsl #2
    7584:	dc160000 	ldcle	0, cr0, [r6], {-0}
    7588:	08000002 	stmdaeq	r0, {r1}
    758c:	c1080315 	tstgt	r8, r5, lsl r3
    7590:	02000000 	andeq	r0, r0, #0
    7594:	00048116 	andeq	r8, r4, r6, lsl r1
    7598:	03160800 	tsteq	r6, #0, 16
    759c:	0002c80b 	andeq	ip, r2, fp, lsl #16
    75a0:	3f160400 	svccc	0x00160400
    75a4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    75a8:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    75ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    75b0:	00043d16 	andeq	r3, r4, r6, lsl sp
    75b4:	03180800 	tsteq	r8, #0, 16
    75b8:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    75bc:	d7160c00 	ldrle	r0, [r6, -r0, lsl #24]
    75c0:	08000002 	stmdaeq	r0, {r1}
    75c4:	cb150319 	blgt	548230 <__ccfg+0x528288>
    75c8:	2c000003 	stccs	0, cr0, [r0], {3}
    75cc:	034b0f00 	movteq	r0, #48896	; 0xbf00
    75d0:	03cb0000 	biceq	r0, fp, #0
    75d4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    75d8:	03000000 	movweq	r0, #0
    75dc:	58040a00 	stmdapl	r4, {r9, fp}
    75e0:	11000003 	tstne	r0, r3
    75e4:	00000498 	muleq	r0, r8, r4
    75e8:	1b031c08 	blne	ce610 <__ccfg+0xae668>
    75ec:	00000358 	andeq	r0, r0, r8, asr r3
    75f0:	00038114 	andeq	r8, r3, r4, lsl r1
    75f4:	031e0800 	tsteq	lr, #0, 16
    75f8:	0003ed14 	andeq	lr, r3, r4, lsl sp
    75fc:	0a010100 	beq	47a04 <__ccfg+0x27a5c>
    7600:	0003d104 	andeq	sp, r3, r4, lsl #2
    7604:	b2011900 	andlt	r1, r1, #0, 18
    7608:	01000015 	tsteq	r0, r5, lsl r0
    760c:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    7610:	ac000001 	stcge	0, cr0, [r0], {1}
    7614:	fc00001a 	stc2	0, cr0, [r0], {26}
    7618:	0100001a 	tsteq	r0, sl, lsl r0
    761c:	0004689c 	muleq	r4, ip, r8
    7620:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    7624:	91010073 	tstls	r1, r3, ror r0
    7628:	0001cd14 	andeq	ip, r1, r4, lsl sp
    762c:	0025c500 	eoreq	ip, r5, r0, lsl #10
    7630:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7634:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    7638:	00000468 	andeq	r0, r0, r8, ror #8
    763c:	0000260f 	andeq	r2, r0, pc, lsl #12
    7640:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    7644:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    7648:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    764c:	1b000026 	blne	76ec <__exidx_end+0x4a68>
    7650:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    7654:	c1079301 	tstgt	r7, r1, lsl #6
    7658:	82000000 	andhi	r0, r0, #0
    765c:	1b000026 	blne	76fc <__exidx_end+0x4a78>
    7660:	93010064 	movwls	r0, #4196	; 0x1064
    7664:	0000c10c 	andeq	ip, r0, ip, lsl #2
    7668:	0026a000 	eoreq	sl, r6, r0
    766c:	159a1c00 	ldrne	r1, [sl, #3072]	; 0xc00
    7670:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    7674:	001ad601 	andseq	sp, sl, r1, lsl #12
    7678:	040a0000 	streq	r0, [sl], #-0
    767c:	000001da 	ldrdeq	r0, [r0], -sl
    7680:	15a5011d 	strne	r0, [r5, #285]!	; 0x11d
    7684:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7688:	00c10106 	sbceq	r0, r1, r6, lsl #2
    768c:	187c0000 	ldmdane	ip!, {}^	; <UNPREDICTABLE>
    7690:	1aac0000 	bne	feb07698 <_estack+0xdeb02698>
    7694:	9c010000 	stcls	0, cr0, [r1], {-0}
    7698:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    769c:	1a080100 	bne	207aa4 <__ccfg+0x1e7afc>
    76a0:	000001cd 	andeq	r0, r0, sp, asr #3
    76a4:	000026b3 			; <UNDEFINED> instruction: 0x000026b3
    76a8:	01006e1a 	tsteq	r0, sl, lsl lr
    76ac:	00c12408 	sbceq	r2, r1, r8, lsl #8
    76b0:	26c60000 	strbcs	r0, [r6], r0
    76b4:	661a0000 	ldrvs	r0, [sl], -r0
    76b8:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    76bc:	00046833 	andeq	r6, r4, r3, lsr r8
    76c0:	0026d900 	eoreq	sp, r6, r0, lsl #18
    76c4:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    76c8:	3f080100 	svccc	0x00080100
    76cc:	000000b5 	strheq	r0, [r0], -r5
    76d0:	00002702 	andeq	r2, r0, r2, lsl #14
    76d4:	0100631b 	tsteq	r0, fp, lsl r3
    76d8:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    76dc:	27a40000 	strcs	r0, [r4, r0]!
    76e0:	641e0000 	ldrvs	r0, [lr], #-0
    76e4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    76e8:	000000c1 	andeq	r0, r0, r1, asr #1
    76ec:	23549104 	cmpcs	r4, #4, 2
    76f0:	15a01f06 	strne	r1, [r0, #3846]!	; 0xf06
    76f4:	0d010000 	stceq	0, cr0, [r1, #-0]
    76f8:	185c0107 	ldmdane	ip, {r0, r1, r2, r8}^
    76fc:	187c0000 	ldmdane	ip!, {}^	; <UNPREDICTABLE>
    7700:	9c010000 	stcls	0, cr0, [r1], {-0}
    7704:	23007c05 	movwcs	r7, #3077	; 0xc05
    7708:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    770c:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    7710:	120d0100 	andne	r0, sp, #0, 2
    7714:	000000c1 	andeq	r0, r0, r1, asr #1
    7718:	21005001 	tstcs	r0, r1
    771c:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    7720:	b6018801 	strlt	r8, [r1], -r1, lsl #16
    7724:	21000018 	tstcs	r0, r8, lsl r0
    7728:	00746552 	rsbseq	r6, r4, r2, asr r5
    772c:	18018b01 	stmdane	r1, {r0, r8, r9, fp, pc}
    7730:	22000019 	andcs	r0, r0, #25
    7734:	00000ca0 	andeq	r0, r0, r0, lsr #25
    7738:	00000545 	andeq	r0, r0, r5, asr #10
    773c:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    7740:	0a3a0100 	beq	e87b48 <__ccfg+0xe67ba0>
    7744:	000000c1 	andeq	r0, r0, r1, asr #1
    7748:	0100691b 	tsteq	r0, fp, lsl r9
    774c:	0081133a 	addeq	r1, r1, sl, lsr r3
    7750:	288a0000 	stmcs	sl, {}	; <UNPREDICTABLE>
    7754:	22000000 	andcs	r0, r0, #0
    7758:	00000c78 	andeq	r0, r0, r8, ror ip
    775c:	0000056d 	andeq	r0, r0, sp, ror #10
    7760:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    7764:	0a460100 	beq	1187b6c <__ccfg+0x1167bc4>
    7768:	000000c1 	andeq	r0, r0, r1, asr #1
    776c:	0000289d 	muleq	r0, sp, r8
    7770:	0100691b 	tsteq	r0, fp, lsl r9
    7774:	00c10f46 	sbceq	r0, r1, r6, asr #30
    7778:	28c60000 	stmiacs	r6, {}^	; <UNPREDICTABLE>
    777c:	22000000 	andcs	r0, r0, #0
    7780:	00000cd8 	ldrdeq	r0, [r0], -r8
    7784:	00000595 	muleq	r0, r5, r5
    7788:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    778c:	0c550100 	ldfeqe	f0, [r5], {-0}
    7790:	000000e3 	andeq	r0, r0, r3, ror #1
    7794:	000028ef 	andeq	r2, r0, pc, ror #17
    7798:	0100691b 	tsteq	r0, fp, lsl r9
    779c:	00e31155 	rsceq	r1, r3, r5, asr r1
    77a0:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    77a4:	24000000 	strcs	r0, [r0], #-0
    77a8:	00001a3a 	andeq	r1, r0, sl, lsr sl
    77ac:	00001a64 	andeq	r1, r0, r4, ror #20
    77b0:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    77b4:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    77b8:	0c600100 	stfeqe	f0, [r0], #-0
    77bc:	000000e3 	andeq	r0, r0, r3, ror #1
    77c0:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    77c4:	0a610100 	beq	1847bcc <__ccfg+0x1827c24>
    77c8:	00000081 	andeq	r0, r0, r1, lsl #1
    77cc:	0000292b 	andeq	r2, r0, fp, lsr #18
    77d0:	0cc02200 	sfmeq	f2, 2, [r0], {0}
    77d4:	05d90000 	ldrbeq	r0, [r9]
    77d8:	761b0000 	ldrvc	r0, [fp], -r0
    77dc:	01006c61 	tsteq	r0, r1, ror #24
    77e0:	00c10a71 	sbceq	r0, r1, r1, ror sl
    77e4:	293e0000 	ldmdbcs	lr!, {}	; <UNPREDICTABLE>
    77e8:	25000000 	strcs	r0, [r0, #-0]
    77ec:	00001a82 	andeq	r1, r0, r2, lsl #21
    77f0:	00001a9e 	muleq	r0, lr, sl
    77f4:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    77f8:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    77fc:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    7800:	00000029 	andeq	r0, r0, r9, lsr #32
    7804:	058f0000 	streq	r0, [pc]	; 780c <__exidx_end+0x4b88>
    7808:	00030000 	andeq	r0, r3, r0
    780c:	000022f8 	strdeq	r2, [r0], -r8
    7810:	01700104 	cmneq	r0, r4, lsl #2
    7814:	c50c0000 	strgt	r0, [ip, #-0]
    7818:	c0000015 	andgt	r0, r0, r5, lsl r0
    781c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    7820:	0000000d 	andeq	r0, r0, sp
    7824:	db000000 	blle	782c <__exidx_end+0x4ba8>
    7828:	02000054 	andeq	r0, r0, #84	; 0x54
    782c:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    7830:	02020000 	andeq	r0, r2, #0
    7834:	0003dd05 	andeq	sp, r3, r5, lsl #26
    7838:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    783c:	0000009d 	muleq	r0, sp, r0
    7840:	98050802 	stmdals	r5, {r1, fp}
    7844:	03000000 	movweq	r0, #0
    7848:	000021fc 	strdeq	r2, [r0], -ip
    784c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7850:	02000000 	andeq	r0, r0, #0
    7854:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    7858:	ea030000 	b	c7860 <__ccfg+0xa78b8>
    785c:	02000020 	andeq	r0, r0, #32
    7860:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7864:	02020000 	andeq	r0, r2, #0
    7868:	00027107 	andeq	r7, r2, r7, lsl #2
    786c:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    7870:	34020000 	strcc	r0, [r2], #-0
    7874:	00007319 	andeq	r7, r0, r9, lsl r3
    7878:	07040200 	streq	r0, [r4, -r0, lsl #4]
    787c:	00000072 	andeq	r0, r0, r2, ror r0
    7880:	6d070802 	stcvs	8, cr0, [r7, #-8]
    7884:	04000000 	streq	r0, [r0], #-0
    7888:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    788c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7890:	00007707 	andeq	r7, r0, r7, lsl #14
    7894:	0b460300 	bleq	118849c <__ccfg+0x11684f4>
    7898:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    789c:	00009b1b 	andeq	r9, r0, fp, lsl fp
    78a0:	0a5c0500 	beq	1708ca8 <__ccfg+0x16e8d00>
    78a4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    78a8:	0000b300 	andeq	fp, r0, r0, lsl #6
    78ac:	0bfc0600 	bleq	fff090b4 <_estack+0xdff040b4>
    78b0:	00b30000 	adcseq	r0, r3, r0
    78b4:	01000000 	mrseq	r0, (UNDEF: 0)
    78b8:	03040700 	movweq	r0, #18176	; 0x4700
    78bc:	00000a5e 	andeq	r0, r0, lr, asr sl
    78c0:	8f186303 	svchi	0x00186303
    78c4:	03000000 	movweq	r0, #0
    78c8:	000003fd 	strdeq	r0, [r0], -sp
    78cc:	41122604 	tstmi	r2, r4, lsl #12
    78d0:	03000000 	movweq	r0, #0
    78d4:	000015c0 	andeq	r1, r0, r0, asr #11
    78d8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    78dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    78e0:	000000cd 	andeq	r0, r0, sp, asr #1
    78e4:	0013b803 	andseq	fp, r3, r3, lsl #16
    78e8:	122b0400 	eorne	r0, fp, #0, 8
    78ec:	00000041 	andeq	r0, r0, r1, asr #32
    78f0:	0000de09 	andeq	sp, r0, r9, lsl #28
    78f4:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    78f8:	2c040000 	stccs	0, cr0, [r4], {-0}
    78fc:	00006712 	andeq	r6, r0, r2, lsl r7
    7900:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    7904:	a7030000 	strge	r0, [r3, -r0]
    7908:	04000002 	streq	r0, [r0], #-2
    790c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7910:	040a0000 	streq	r0, [sl], #-0
    7914:	000000cd 	andeq	r0, r0, sp, asr #1
    7918:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    791c:	0001a009 	andeq	sl, r1, r9
    7920:	02c20c00 	sbceq	r0, r2, #0, 24
    7924:	34040000 	strcc	r0, [r4], #-0
    7928:	0000de07 	andeq	sp, r0, r7, lsl #28
    792c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7930:	00910c00 	addseq	r0, r1, r0, lsl #24
    7934:	35040000 	strcc	r0, [r4, #-0]
    7938:	0000de03 	andeq	sp, r0, r3, lsl #28
    793c:	06010100 	streq	r0, [r1], -r0, lsl #2
    7940:	02990c00 	addseq	r0, r9, #0, 24
    7944:	36040000 	strcc	r0, [r4], -r0
    7948:	0000de03 	andeq	sp, r0, r3, lsl #28
    794c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7950:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    7954:	37040000 	strcc	r0, [r4, -r0]
    7958:	0000de03 	andeq	sp, r0, r3, lsl #28
    795c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7960:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    7964:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7968:	0000de03 	andeq	sp, r0, r3, lsl #28
    796c:	00040100 	andeq	r0, r4, r0, lsl #2
    7970:	03f60d00 	mvnseq	r0, #0, 26
    7974:	3a040000 	bcc	10797c <__ccfg+0xe79d4>
    7978:	0000de07 	andeq	sp, r0, r7, lsl #28
    797c:	400d0100 	andmi	r0, sp, r0, lsl #2
    7980:	04000000 	streq	r0, [r0], #-0
    7984:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    7988:	0d020000 	stceq	0, cr0, [r2, #-0]
    798c:	00000066 	andeq	r0, r0, r6, rrx
    7990:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    7994:	03000000 	movweq	r0, #0
    7998:	0001540d 	andeq	r5, r1, sp, lsl #8
    799c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    79a0:	000000ef 	andeq	r0, r0, pc, ror #1
    79a4:	34030004 	strcc	r0, [r3], #-4
    79a8:	04000004 	streq	r0, [r0], #-4
    79ac:	01120341 	tsteq	r2, r1, asr #6
    79b0:	a0090000 	andge	r0, r9, r0
    79b4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    79b8:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    79bc:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    79c0:	01000001 	tsteq	r0, r1
    79c4:	030d0e01 	movweq	r0, #56833	; 0xde01
    79c8:	45040000 	strmi	r0, [r4, #-0]
    79cc:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    79d0:	0a010100 	beq	47dd8 <__ccfg+0x27e30>
    79d4:	0001d304 	andeq	sp, r1, r4, lsl #6
    79d8:	08010200 	stmdaeq	r1, {r9}
    79dc:	000003aa 	andeq	r0, r0, sl, lsr #7
    79e0:	0001d308 	andeq	sp, r1, r8, lsl #6
    79e4:	031b0e00 	tsteq	fp, #0, 28
    79e8:	45040000 	strmi	r0, [r4, #-0]
    79ec:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    79f0:	0b010100 	bleq	47df8 <__ccfg+0x27e50>
    79f4:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    79f8:	0000021e 	andeq	r0, r0, lr, lsl r2
    79fc:	0002d20d 	andeq	sp, r2, sp, lsl #4
    7a00:	0b900500 	bleq	fe408e08 <_estack+0xde403e08>
    7a04:	00000067 	andeq	r0, r0, r7, rrx
    7a08:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
    7a0c:	91050000 	mrsls	r0, (UNDEF: 5)
    7a10:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7a14:	710d0400 	tstvc	sp, r0, lsl #8
    7a18:	05000004 	streq	r0, [r0, #-4]
    7a1c:	00ea1092 	smlaleq	r1, sl, r2, r0
    7a20:	00060000 	andeq	r0, r6, r0
    7a24:	00041303 	andeq	r1, r4, r3, lsl #6
    7a28:	03930500 	orrseq	r0, r3, #0, 10
    7a2c:	000001ed 	andeq	r0, r0, sp, ror #3
    7a30:	00021e0f 	andeq	r1, r2, pc, lsl #28
    7a34:	00023500 	andeq	r3, r2, r0, lsl #10
    7a38:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    7a3c:	00000036 	andeq	r0, r0, r6, lsr r0
    7a40:	2a0f9905 	bcs	3ede5c <__ccfg+0x3cdeb4>
    7a44:	01000002 	tsteq	r0, r2
    7a48:	06010b01 	streq	r0, [r1], -r1, lsl #22
    7a4c:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    7a50:	640c0000 	strvs	r0, [ip], #-0
    7a54:	06000004 	streq	r0, [r0], -r4
    7a58:	00de0793 	smullseq	r0, lr, r3, r7
    7a5c:	07010000 	streq	r0, [r1, -r0]
    7a60:	310c0001 	tstcc	ip, r1
    7a64:	06000000 	streq	r0, [r0], -r0
    7a68:	00de0394 	smullseq	r0, lr, r4, r3
    7a6c:	01010000 	mrseq	r0, (UNDEF: 1)
    7a70:	03000000 	movweq	r0, #0
    7a74:	00000284 	andeq	r0, r0, r4, lsl #5
    7a78:	43039606 	movwmi	r9, #13830	; 0x3606
    7a7c:	08000002 	stmdaeq	r0, {r1}
    7a80:	0000026d 	andeq	r0, r0, sp, ror #4
    7a84:	0002790f 	andeq	r7, r2, pc, lsl #18
    7a88:	00028900 	andeq	r8, r2, r0, lsl #18
    7a8c:	08001000 	stmdaeq	r0, {ip}
    7a90:	0000027e 	andeq	r0, r0, lr, ror r2
    7a94:	0002ed0e 	andeq	lr, r2, lr, lsl #26
    7a98:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7a9c:	00000289 	andeq	r0, r0, r9, lsl #5
    7aa0:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    7aa4:	a7000000 	strge	r0, [r0, -r0]
    7aa8:	10000002 	andne	r0, r0, r2
    7aac:	029c0800 	addseq	r0, ip, #0, 16
    7ab0:	930e0000 	movwls	r0, #57344	; 0xe000
    7ab4:	07000003 	streq	r0, [r0, -r3]
    7ab8:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    7abc:	01010000 	mrseq	r0, (UNDEF: 1)
    7ac0:	0001340e 	andeq	r3, r1, lr, lsl #8
    7ac4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7ac8:	000000ef 	andeq	r0, r0, pc, ror #1
    7acc:	7e110101 	mufvcs	f0, f1, f1
    7ad0:	08000004 	stmdaeq	r0, {r2}
    7ad4:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    7ad8:	0a000002 	beq	7ae8 <__exidx_end+0x4e64>
    7adc:	0002db04 	andeq	sp, r2, r4, lsl #22
    7ae0:	e7011200 	str	r1, [r1, -r0, lsl #4]
    7ae4:	13000002 	movwne	r0, #2
    7ae8:	000000cd 	andeq	r0, r0, sp, asr #1
    7aec:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    7af0:	02f20000 	rscseq	r0, r2, #0
    7af4:	00100000 	andseq	r0, r0, r0
    7af8:	0002e708 	andeq	lr, r2, r8, lsl #14
    7afc:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    7b00:	7f080000 	svcvc	0x00080000
    7b04:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    7b08:	01010000 	mrseq	r0, (UNDEF: 1)
    7b0c:	00038b14 	andeq	r8, r3, r4, lsl fp
    7b10:	01820800 	orreq	r0, r2, r0, lsl #16
    7b14:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    7b18:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7b1c:	00000469 	andeq	r0, r0, r9, ror #8
    7b20:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7b24:	000000ef 	andeq	r0, r0, pc, ror #1
    7b28:	08150101 	ldmdaeq	r5, {r0, r8}
    7b2c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7b30:	0000034b 	andeq	r0, r0, fp, asr #6
    7b34:	0021f416 	eoreq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    7b38:	03070800 	movweq	r0, #30720	; 0x7800
    7b3c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    7b40:	3f160000 	svccc	0x00160000
    7b44:	08000005 	stmdaeq	r0, {r0, r2}
    7b48:	00080308 	andeq	r0, r8, r8, lsl #6
    7b4c:	04000001 	streq	r0, [r0], #-1
    7b50:	02641100 	rsbeq	r1, r4, #0, 2
    7b54:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7b58:	03240303 			; <UNDEFINED> instruction: 0x03240303
    7b5c:	8d170000 	ldchi	0, cr0, [r7, #-0]
    7b60:	30000004 	andcc	r0, r0, r4
    7b64:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7b68:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7b6c:	00048616 	andeq	r8, r4, r6, lsl r6
    7b70:	03140800 	tsteq	r4, #0, 16
    7b74:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7b78:	dc160000 	ldcle	0, cr0, [r6], {-0}
    7b7c:	08000002 	stmdaeq	r0, {r1}
    7b80:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    7b84:	02000000 	andeq	r0, r0, #0
    7b88:	00048116 	andeq	r8, r4, r6, lsl r1
    7b8c:	03160800 	tsteq	r6, #0, 16
    7b90:	0002c80b 	andeq	ip, r2, fp, lsl #16
    7b94:	3f160400 	svccc	0x00160400
    7b98:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7b9c:	00090317 	andeq	r0, r9, r7, lsl r3
    7ba0:	08000001 	stmdaeq	r0, {r0}
    7ba4:	00043d16 	andeq	r3, r4, r6, lsl sp
    7ba8:	03180800 	tsteq	r8, #0, 16
    7bac:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    7bb0:	d7160c00 	ldrle	r0, [r6, -r0, lsl #24]
    7bb4:	08000002 	stmdaeq	r0, {r1}
    7bb8:	cb150319 	blgt	548824 <__ccfg+0x52887c>
    7bbc:	2c000003 	stccs	0, cr0, [r0], {3}
    7bc0:	034b0f00 	movteq	r0, #48896	; 0xbf00
    7bc4:	03cb0000 	biceq	r0, fp, #0
    7bc8:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7bcc:	03000000 	movweq	r0, #0
    7bd0:	58040a00 	stmdapl	r4, {r9, fp}
    7bd4:	11000003 	tstne	r0, r3
    7bd8:	00000498 	muleq	r0, r8, r4
    7bdc:	1b031c08 	blne	cec04 <__ccfg+0xaec5c>
    7be0:	00000358 	andeq	r0, r0, r8, asr r3
    7be4:	00038114 	andeq	r8, r3, r4, lsl r1
    7be8:	031e0800 	tsteq	lr, #0, 16
    7bec:	0003ed14 	andeq	lr, r3, r4, lsl sp
    7bf0:	0a010100 	beq	47ff8 <__ccfg+0x28050>
    7bf4:	0003d104 	andeq	sp, r3, r4, lsl #2
    7bf8:	03011900 	movweq	r1, #6400	; 0x1900
    7bfc:	01000016 	tsteq	r0, r6, lsl r0
    7c00:	81010508 	tsthi	r1, r8, lsl #10
    7c04:	fc000000 	stc2	0, cr0, [r0], {-0}
    7c08:	8c00001a 	stchi	0, cr0, [r0], {26}
    7c0c:	0100001e 	tsteq	r0, lr, lsl r0
    7c10:	0005869c 	muleq	r5, ip, r6
    7c14:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    7c18:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    7c1c:	00058618 	andeq	r8, r5, r8, lsl r6
    7c20:	00297100 	eoreq	r7, r9, r0, lsl #2
    7c24:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7c28:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    7c2c:	00058629 	andeq	r8, r5, r9, lsr #12
    7c30:	002b6800 	eoreq	r6, fp, r0, lsl #16
    7c34:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    7c38:	36080100 	strcc	r0, [r8], -r0, lsl #2
    7c3c:	000000b5 	strheq	r0, [r0], -r5
    7c40:	00002b9c 	muleq	r0, ip, fp
    7c44:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    7c48:	81060a01 	tsthi	r6, r1, lsl #20
    7c4c:	35000000 	strcc	r0, [r0, #-0]
    7c50:	1c00002c 	stcne	0, cr0, [r0], {44}	; 0x2c
    7c54:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    7c58:	1c114e01 	ldcne	14, cr4, [r1], {1}
    7c5c:	00001609 	andeq	r1, r0, r9, lsl #12
    7c60:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    7c64:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    7c68:	00001c2e 	andeq	r1, r0, lr, lsr #24
    7c6c:	00000488 	andeq	r0, r0, r8, lsl #9
    7c70:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    7c74:	114e0100 	mrsne	r0, (UNDEF: 94)
    7c78:	0000010c 	andeq	r0, r0, ip, lsl #2
    7c7c:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    7c80:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    7c84:	0000c111 	andeq	ip, r0, r1, lsl r1
    7c88:	002cb600 	eoreq	fp, ip, r0, lsl #12
    7c8c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    7c90:	7600001c 			; <UNDEFINED> instruction: 0x7600001c
    7c94:	a400001c 	strge	r0, [r0], #-28	; 0xffffffe4
    7c98:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7c9c:	00706176 	rsbseq	r6, r0, r6, ror r1
    7ca0:	0c114f01 	ldceq	15, cr4, [r1], {1}
    7ca4:	01000001 	tsteq	r0, r1
    7ca8:	481f005e 	ldmdami	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    7cac:	d500000d 	strle	r0, [r0, #-13]
    7cb0:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7cb4:	00706176 	rsbseq	r6, r0, r6, ror r1
    7cb8:	0c115001 	ldceq	0, cr5, [r1], {1}
    7cbc:	01000001 	tsteq	r0, r1
    7cc0:	6364205e 	cmnvs	r4, #94	; 0x5e
    7cc4:	11500100 	cmpne	r0, r0, lsl #2
    7cc8:	00000081 	andeq	r0, r0, r1, lsl #1
    7ccc:	0100631b 	tsteq	r0, fp, lsl r3
    7cd0:	01d31150 	bicseq	r1, r3, r0, asr r1
    7cd4:	2cd40000 	ldclcs	0, cr0, [r4], {0}
    7cd8:	1f000000 	svcne	0x00000000
    7cdc:	00000d60 	andeq	r0, r0, r0, ror #26
    7ce0:	000004fc 	strdeq	r0, [r0], -ip
    7ce4:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    7ce8:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    7cec:	0000058c 	andeq	r0, r0, ip, lsl #11
    7cf0:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    7cf4:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    7cf8:	0000c116 	andeq	ip, r0, r6, lsl r1
    7cfc:	002cf200 	eoreq	pc, ip, r0, lsl #4
    7d00:	101f0000 	andsne	r0, pc, r0
    7d04:	1400000d 	strne	r0, [r0], #-13
    7d08:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7d0c:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d10:	8c165601 	ldchi	6, cr5, [r6], {1}
    7d14:	01000005 	tsteq	r0, r5
    7d18:	781f005e 	ldmdavc	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    7d1c:	4500000d 	strmi	r0, [r0, #-13]
    7d20:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7d24:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d28:	8c165701 	ldchi	7, cr5, [r6], {1}
    7d2c:	01000005 	tsteq	r0, r5
    7d30:	6364205e 	cmnvs	r4, #94	; 0x5e
    7d34:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    7d38:	00000081 	andeq	r0, r0, r1, lsl #1
    7d3c:	0100631b 	tsteq	r0, fp, lsl r3
    7d40:	01d31657 	bicseq	r1, r3, r7, asr r6
    7d44:	2d100000 	ldccs	0, cr0, [r0, #-0]
    7d48:	1d000000 	stcne	0, cr0, [r0, #-0]
    7d4c:	00001e3e 	andeq	r1, r0, lr, lsr lr
    7d50:	00001e52 	andeq	r1, r0, r2, asr lr
    7d54:	0000056f 	andeq	r0, r0, pc, ror #10
    7d58:	0100631b 	tsteq	r0, fp, lsl r3
    7d5c:	01d3095c 	bicseq	r0, r3, ip, asr r9
    7d60:	2d2e0000 	stccs	0, cr0, [lr, #-0]
    7d64:	731e0000 	tstvc	lr, #0
    7d68:	01007061 	tsteq	r0, r1, rrx
    7d6c:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    7d70:	56010000 	strpl	r0, [r1], -r0
    7d74:	0d282100 	stfeqs	f2, [r8, #-0]
    7d78:	731b0000 	tstvc	fp, #0
    7d7c:	01007061 	tsteq	r0, r1, rrx
    7d80:	01cd0a66 	biceq	r0, sp, r6, ror #20
    7d84:	2d410000 	stclcs	0, cr0, [r1, #-0]
    7d88:	00000000 	andeq	r0, r0, r0
    7d8c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    7d90:	040a0000 	streq	r0, [sl], #-0
    7d94:	000000ef 	andeq	r0, r0, pc, ror #1
    7d98:	0000d500 	andeq	sp, r0, r0, lsl #10
    7d9c:	b4000400 	strlt	r0, [r0], #-1024	; 0xfffffc00
    7da0:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    7da4:	00165001 	andseq	r5, r6, r1
    7da8:	17090100 	strne	r0, [r9, -r0, lsl #2]
    7dac:	17450000 	strbne	r0, [r5, -r0]
    7db0:	0da80000 	stceq	0, cr0, [r8]
    7db4:	00000000 	andeq	r0, r0, r0
    7db8:	57a50000 	strpl	r0, [r5, r0]!
    7dbc:	00020000 	andeq	r0, r2, r0
    7dc0:	02000017 	andeq	r0, r0, #23
    7dc4:	0000301b 	andeq	r3, r0, fp, lsl r0
    7dc8:	06010300 	streq	r0, [r1], -r0, lsl #6
    7dcc:	000003a3 	andeq	r0, r0, r3, lsr #7
    7dd0:	a1080103 	tstge	r8, r3, lsl #2
    7dd4:	03000003 	movweq	r0, #3
    7dd8:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    7ddc:	02030000 	andeq	r0, r3, #0
    7de0:	00027107 	andeq	r7, r2, r7, lsl #2
    7de4:	16460200 	strbne	r0, [r6], -r0, lsl #4
    7de8:	3f020000 	svccc	0x00020000
    7dec:	00000057 	andeq	r0, r0, r7, asr r0
    7df0:	9d050403 	cfstrsls	mvf0, [r5, #-12]
    7df4:	03000000 	movweq	r0, #0
    7df8:	00720704 	rsbseq	r0, r2, r4, lsl #14
    7dfc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    7e00:	00009805 	andeq	r9, r0, r5, lsl #16
    7e04:	07080300 	streq	r0, [r8, -r0, lsl #6]
    7e08:	0000006d 	andeq	r0, r0, sp, rrx
    7e0c:	69050404 	stmdbvs	r5, {r2, sl}
    7e10:	0300746e 	movweq	r7, #1134	; 0x46e
    7e14:	00770704 	rsbseq	r0, r7, r4, lsl #14
    7e18:	02020000 	andeq	r0, r2, #0
    7e1c:	03000017 	movweq	r0, #23
    7e20:	00002513 	andeq	r2, r0, r3, lsl r5
    7e24:	16480200 	strbne	r0, [r8], -r0, lsl #4
    7e28:	1f030000 	svcne	0x00030000
    7e2c:	0000004c 	andeq	r0, r0, ip, asr #32
    7e30:	00161705 	andseq	r1, r6, r5, lsl #14
    7e34:	8caa0400 	cfstrshi	mvf0, [sl]
    7e38:	8c000000 	stchi	0, cr0, [r0], {-0}
    7e3c:	3000001e 	andcc	r0, r0, lr, lsl r0
    7e40:	01000000 	mrseq	r0, (UNDEF: 0)
    7e44:	173a069c 			; <UNDEFINED> instruction: 0x173a069c
    7e48:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    7e4c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7e50:	00002d5f 	andeq	r2, r0, pc, asr sp
    7e54:	00172b06 	andseq	r2, r7, r6, lsl #22
    7e58:	8c3f0100 	ldfhis	f0, [pc], #-0	; 7e60 <__exidx_end+0x51dc>
    7e5c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    7e60:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    7e64:	00001639 	andeq	r1, r0, r9, lsr r6
    7e68:	00814001 	addeq	r4, r1, r1
    7e6c:	51010000 	mrspl	r0, (UNDEF: 1)
    7e70:	01430000 	mrseq	r0, (UNDEF: 67)
    7e74:	00040000 	andeq	r0, r4, r0
    7e78:	00002523 	andeq	r2, r0, r3, lsr #10
    7e7c:	16500104 	ldrbne	r0, [r0], -r4, lsl #2
    7e80:	56010000 	strpl	r0, [r1], -r0
    7e84:	45000018 	strmi	r0, [r0, #-24]	; 0xffffffe8
    7e88:	b8000017 	stmdalt	r0, {r0, r1, r2, r4}
    7e8c:	0000000d 	andeq	r0, r0, sp
    7e90:	10000000 	andne	r0, r0, r0
    7e94:	02000059 	andeq	r0, r0, #89	; 0x59
    7e98:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    7e9c:	01020000 	mrseq	r0, (UNDEF: 2)
    7ea0:	0003a108 	andeq	sl, r3, r8, lsl #2
    7ea4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7ea8:	000003dd 	ldrdeq	r0, [r0], -sp
    7eac:	71070202 	tstvc	r7, r2, lsl #4
    7eb0:	02000002 	andeq	r0, r0, #2
    7eb4:	009d0504 	addseq	r0, sp, r4, lsl #10
    7eb8:	b1030000 	mrslt	r0, (UNDEF: 3)
    7ebc:	02000017 	andeq	r0, r0, #23
    7ec0:	00005341 	andeq	r5, r0, r1, asr #6
    7ec4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7ec8:	00000072 	andeq	r0, r0, r2, ror r0
    7ecc:	98050802 	stmdals	r5, {r1, fp}
    7ed0:	03000000 	movweq	r0, #0
    7ed4:	00001800 	andeq	r1, r0, r0, lsl #16
    7ed8:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    7edc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ee0:	00006d07 	andeq	r6, r0, r7, lsl #26
    7ee4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7ee8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7eec:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    7ef0:	03000000 	movweq	r0, #0
    7ef4:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    7ef8:	00482003 	subeq	r2, r8, r3
    7efc:	02030000 	andeq	r0, r3, #0
    7f00:	03000018 	movweq	r0, #24
    7f04:	00006126 	andeq	r6, r0, r6, lsr #2
    7f08:	17cb0500 	strbne	r0, [fp, r0, lsl #10]
    7f0c:	45040000 	strmi	r0, [r4, #-0]
    7f10:	00008103 	andeq	r8, r0, r3, lsl #2
    7f14:	00000000 	andeq	r0, r0, r0
    7f18:	00002000 	andeq	r2, r0, r0
    7f1c:	dd9c0100 	ldfles	f0, [ip]
    7f20:	06000000 	streq	r0, [r0], -r0
    7f24:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    7f28:	00814001 	addeq	r4, r1, r1
    7f2c:	2dad0000 	stccs	0, cr0, [sp]
    7f30:	0b060000 	bleq	187f38 <__ccfg+0x167f90>
    7f34:	01000018 	tsteq	r0, r8, lsl r0
    7f38:	00008141 	andeq	r8, r0, r1, asr #2
    7f3c:	002dc000 	eoreq	ip, sp, r0
    7f40:	17ee0700 	strbne	r0, [lr, r0, lsl #14]!
    7f44:	42010000 	andmi	r0, r1, #0
    7f48:	00000081 	andeq	r0, r0, r1, lsl #1
    7f4c:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    7f50:	0000181d 	andeq	r1, r0, sp, lsl r8
    7f54:	8c035304 	stchi	3, cr5, [r3], {4}
    7f58:	bc000000 	stclt	0, cr0, [r0], {-0}
    7f5c:	1800001e 	stmdane	r0, {r1, r2, r3, r4}
    7f60:	01000000 	mrseq	r0, (UNDEF: 0)
    7f64:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    7f68:	01080800 	tsteq	r8, r0, lsl #16
    7f6c:	00011659 	andeq	r1, r1, r9, asr r6
    7f70:	17a50900 	strne	r0, [r5, r0, lsl #18]!
    7f74:	5a010000 	bpl	47f7c <__ccfg+0x27fd4>
    7f78:	0000008c 	andeq	r0, r0, ip, lsl #1
    7f7c:	00184909 	andseq	r4, r8, r9, lsl #18
    7f80:	2f5b0100 	svccs	0x005b0100
    7f84:	00000001 	andeq	r0, r0, r1
    7f88:	00183e0a 	andseq	r3, r8, sl, lsl #28
    7f8c:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    7f90:	07000000 	streq	r0, [r0, -r0]
    7f94:	000017ee 	andeq	r1, r0, lr, ror #15
    7f98:	00815d01 	addeq	r5, r1, r1, lsl #26
    7f9c:	51010000 	mrspl	r0, (UNDEF: 1)
    7fa0:	00810b00 	addeq	r0, r1, r0, lsl #22
    7fa4:	013f0000 	teqeq	pc, r0
    7fa8:	3f0c0000 	svccc	0x000c0000
    7fac:	01000001 	tsteq	r0, r1
    7fb0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7fb4:	00001875 	andeq	r1, r0, r5, ror r8
    7fb8:	00013600 	andeq	r3, r1, r0, lsl #12
    7fbc:	cd000400 	cfstrsgt	mvf0, [r0, #-0]
    7fc0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7fc4:	00165001 	andseq	r5, r6, r1
    7fc8:	18d10100 	ldmne	r1, {r8}^
    7fcc:	17450000 	strbne	r0, [r5, -r0]
    7fd0:	0dd00000 	ldcleq	0, cr0, [r0]
    7fd4:	00000000 	andeq	r0, r0, r0
    7fd8:	5abd0000 	bpl	fef47fe0 <_estack+0xdef42fe0>
    7fdc:	01020000 	mrseq	r0, (UNDEF: 2)
    7fe0:	0003a306 	andeq	sl, r3, r6, lsl #6
    7fe4:	08010200 	stmdaeq	r1, {r9}
    7fe8:	000003a1 	andeq	r0, r0, r1, lsr #7
    7fec:	dd050202 	sfmle	f0, 4, [r5, #-8]
    7ff0:	02000003 	andeq	r0, r0, #3
    7ff4:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    7ff8:	04020000 	streq	r0, [r2], #-0
    7ffc:	00009d05 	andeq	r9, r0, r5, lsl #26
    8000:	17b10300 	ldrne	r0, [r1, r0, lsl #6]!
    8004:	41020000 	mrsmi	r0, (UNDEF: 2)
    8008:	00000053 	andeq	r0, r0, r3, asr r0
    800c:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    8010:	02000000 	andeq	r0, r0, #0
    8014:	00980508 	addseq	r0, r8, r8, lsl #10
    8018:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    801c:	00006d07 	andeq	r6, r0, r7, lsl #26
    8020:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8024:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8028:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    802c:	03000000 	movweq	r0, #0
    8030:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    8034:	00482003 	subeq	r2, r8, r3
    8038:	b3050000 	movwlt	r0, #20480	; 0x5000
    803c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8040:	0000766a 	andeq	r7, r0, sl, ror #12
    8044:	001ed400 	andseq	sp, lr, r0, lsl #8
    8048:	00000800 	andeq	r0, r0, r0, lsl #16
    804c:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    8050:	06000000 	streq	r0, [r0], -r0
    8054:	000018a1 	andeq	r1, r0, r1, lsr #17
    8058:	00767701 	rsbseq	r7, r6, r1, lsl #14
    805c:	05000000 	streq	r0, [r0, #-0]
    8060:	000018ec 	andeq	r1, r0, ip, ror #17
    8064:	00767804 	rsbseq	r7, r6, r4, lsl #16
    8068:	00000000 	andeq	r0, r0, r0
    806c:	00060000 	andeq	r0, r6, r0
    8070:	9c010000 	stcls	0, cr0, [r1], {-0}
    8074:	000000cb 	andeq	r0, r0, fp, asr #1
    8078:	0018a106 	andseq	sl, r8, r6, lsl #2
    807c:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    8080:	00000000 	andeq	r0, r0, r0
    8084:	0018c205 	andseq	ip, r8, r5, lsl #4
    8088:	76840400 	strvc	r0, [r4], r0, lsl #8
    808c:	dc000000 	stcle	0, cr0, [r0], {-0}
    8090:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    8094:	01000000 	mrseq	r0, (UNDEF: 0)
    8098:	0000f19c 	muleq	r0, ip, r1
    809c:	18a10700 	stmiane	r1!, {r8, r9, sl}
    80a0:	0f010000 	svceq	0x00010000
    80a4:	00007601 	andeq	r7, r0, r1, lsl #12
    80a8:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    80ac:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    80b0:	0076015b 	rsbseq	r0, r6, fp, asr r1
    80b4:	00000000 	andeq	r0, r0, r0
    80b8:	00060000 	andeq	r0, r6, r0
    80bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    80c0:	00000118 	andeq	r0, r0, r8, lsl r1
    80c4:	0018a107 	andseq	sl, r8, r7, lsl #2
    80c8:	015a0100 	cmpeq	sl, r0, lsl #2
    80cc:	00000076 	andeq	r0, r0, r6, ror r0
    80d0:	18920900 	ldmne	r2, {r8, fp}
    80d4:	6c040000 	stcvs	0, cr0, [r4], {-0}
    80d8:	00000001 	andeq	r0, r0, r1
    80dc:	00000800 	andeq	r0, r0, r0, lsl #16
    80e0:	0a9c0100 	beq	fe7084e8 <_estack+0xde7034e8>
    80e4:	000018a9 	andeq	r1, r0, r9, lsr #17
    80e8:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    80ec:	01000000 	mrseq	r0, (UNDEF: 0)
    80f0:	07000050 	smlsdeq	r0, r0, r0, r0
    80f4:	04000002 	streq	r0, [r0], #-2
    80f8:	00267d00 	eoreq	r7, r6, r0, lsl #26
    80fc:	50010400 	andpl	r0, r1, r0, lsl #8
    8100:	01000016 	tsteq	r0, r6, lsl r0
    8104:	000019b9 			; <UNDEFINED> instruction: 0x000019b9
    8108:	00001745 	andeq	r1, r0, r5, asr #14
    810c:	00000e00 	andeq	r0, r0, r0, lsl #28
    8110:	00000000 	andeq	r0, r0, r0
    8114:	00005c5d 	andeq	r5, r0, sp, asr ip
    8118:	a3060102 	movwge	r0, #24834	; 0x6102
    811c:	02000003 	andeq	r0, r0, #3
    8120:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    8124:	02020000 	andeq	r0, r2, #0
    8128:	0003dd05 	andeq	sp, r3, r5, lsl #26
    812c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8130:	00000271 	andeq	r0, r0, r1, ror r2
    8134:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    8138:	03000000 	movweq	r0, #0
    813c:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    8140:	00534103 	subseq	r4, r3, r3, lsl #2
    8144:	04020000 	streq	r0, [r2], #-0
    8148:	00007207 	andeq	r7, r0, r7, lsl #4
    814c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8150:	00000098 	muleq	r0, r8, r0
    8154:	6d070802 	stcvs	8, cr0, [r7, #-8]
    8158:	04000000 	streq	r0, [r0], #-0
    815c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8160:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8164:	00007707 	andeq	r7, r0, r7, lsl #14
    8168:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    816c:	20040000 	andcs	r0, r4, r0
    8170:	00000048 	andeq	r0, r0, r8, asr #32
    8174:	001a1605 	andseq	r1, sl, r5, lsl #12
    8178:	03300200 	teqeq	r0, #0, 4
    817c:	1a810603 	bne	fe049990 <_estack+0xde044990>
    8180:	fd010000 	stc2	0, cr0, [r1, #-0]
    8184:	1a290501 	bne	a49590 <__ccfg+0xa295e8>
    8188:	82010000 	andhi	r0, r1, #0
    818c:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    8190:	01000019 	tsteq	r0, r9, lsl r0
    8194:	1ee4010d 	cdpne	1, 14, cr0, cr4, cr13, {0}
    8198:	00d40000 	sbcseq	r0, r4, r0
    819c:	9c010000 	stcls	0, cr0, [r1], {-0}
    81a0:	0000016d 	andeq	r0, r0, sp, ror #2
    81a4:	001a0408 	andseq	r0, sl, r8, lsl #8
    81a8:	010d0100 	mrseq	r0, (UNDEF: 29)
    81ac:	00000076 	andeq	r0, r0, r6, ror r0
    81b0:	00002dd3 	ldrdeq	r2, [r0], -r3
    81b4:	001a7009 	andseq	r7, sl, r9
    81b8:	010f0100 	mrseq	r0, (UNDEF: 31)
    81bc:	00000076 	andeq	r0, r0, r6, ror r0
    81c0:	00002dff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    81c4:	0018fd09 	andseq	pc, r8, r9, lsl #26
    81c8:	01100100 	tsteq	r0, r0, lsl #2
    81cc:	00000076 	andeq	r0, r0, r6, ror r0
    81d0:	00002e12 	andeq	r2, r0, r2, lsl lr
    81d4:	0000810a 	andeq	r8, r0, sl, lsl #2
    81d8:	001f1600 	andseq	r1, pc, r0, lsl #12
    81dc:	00000600 	andeq	r0, r0, r0, lsl #12
    81e0:	01360100 	teqeq	r6, r0, lsl #2
    81e4:	001f3c0b 	andseq	r3, pc, fp, lsl #24
    81e8:	00002a00 	andeq	r2, r0, r0, lsl #20
    81ec:	00011f00 	andeq	r1, r1, r0, lsl #30
    81f0:	1af60900 	bne	ffd8a5f8 <_estack+0xdfd855f8>
    81f4:	53010000 	movwpl	r0, #4096	; 0x1000
    81f8:	00007601 	andeq	r7, r0, r1, lsl #12
    81fc:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    8200:	1a520900 	bne	148a608 <__ccfg+0x146a660>
    8204:	54010000 	strpl	r0, [r1], #-0
    8208:	00007601 	andeq	r7, r0, r1, lsl #12
    820c:	002e3e00 	eoreq	r3, lr, r0, lsl #28
    8210:	260c0000 	strcs	r0, [ip], -r0
    8214:	c300001f 	movwgt	r0, #31
    8218:	33000001 	movwcc	r0, #1
    821c:	0d000001 	stceq	0, cr0, [r0, #-4]
    8220:	74025001 	strvc	r5, [r2], #-1
    8224:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    8228:	d400001f 	strle	r0, [r0], #-31	; 0xffffffe1
    822c:	4d000001 	stcmi	0, cr0, [r0, #-4]
    8230:	0d000001 	stceq	0, cr0, [r0, #-4]
    8234:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    8238:	50010d00 	andpl	r0, r1, r0, lsl #26
    823c:	00007502 	andeq	r7, r0, r2, lsl #10
    8240:	001f6c0c 	andseq	r6, pc, ip, lsl #24
    8244:	0001ea00 	andeq	lr, r1, r0, lsl #20
    8248:	00016100 	andeq	r6, r1, r0, lsl #2
    824c:	50010d00 	andpl	r0, r1, r0, lsl #26
    8250:	00007402 	andeq	r7, r0, r2, lsl #8
    8254:	001f760e 	andseq	r7, pc, lr, lsl #12
    8258:	50010d00 	andpl	r0, r1, r0, lsl #26
    825c:	00003201 	andeq	r3, r0, r1, lsl #4
    8260:	001a3c0f 	andseq	r3, sl, pc, lsl #24
    8264:	b85f0700 	ldmdalt	pc, {r8, r9, sl}^	; <UNPREDICTABLE>
    8268:	a400001f 	strge	r0, [r0], #-31	; 0xffffffe1
    826c:	01000000 	mrseq	r0, (UNDEF: 0)
    8270:	0001c39c 	muleq	r1, ip, r3
    8274:	1a041000 	bne	10c27c <__ccfg+0xec2d4>
    8278:	72010000 	andvc	r0, r1, #0
    827c:	00000076 	andeq	r0, r0, r6, ror r0
    8280:	00002e69 	andeq	r2, r0, r9, ror #28
    8284:	001a5d10 	andseq	r5, sl, r0, lsl sp
    8288:	76730100 	ldrbtvc	r0, [r3], -r0, lsl #2
    828c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    8290:	1100002e 	tstne	r0, lr, lsr #32
    8294:	00001fc8 	andeq	r1, r0, r8, asr #31
    8298:	000001fb 	strdeq	r0, [r0], -fp
    829c:	001fdc11 	andseq	sp, pc, r1, lsl ip	; <UNPREDICTABLE>
    82a0:	00020300 	andeq	r0, r2, r0, lsl #6
    82a4:	1fec1200 	svcne	0x00ec1200
    82a8:	009b0000 	addseq	r0, fp, r0
    82ac:	010d0000 	mrseq	r0, (UNDEF: 13)
    82b0:	00740250 	rsbseq	r0, r4, r0, asr r2
    82b4:	29130000 	ldmdbcs	r3, {}	; <UNPREDICTABLE>
    82b8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    82bc:	0001d46c 	andeq	sp, r1, ip, ror #8
    82c0:	00761400 	rsbseq	r1, r6, r0, lsl #8
    82c4:	13000000 	movwne	r0, #0
    82c8:	00001959 	andeq	r1, r0, r9, asr r9
    82cc:	01ea7305 	mvneq	r7, r5, lsl #6
    82d0:	76140000 	ldrvc	r0, [r4], -r0
    82d4:	14000000 	strne	r0, [r0], #-0
    82d8:	00000076 	andeq	r0, r0, r6, ror r0
    82dc:	19891300 	stmibne	r9, {r8, r9, ip}
    82e0:	7a050000 	bvc	1482e8 <__ccfg+0x128340>
    82e4:	000001fb 	strdeq	r0, [r0], -fp
    82e8:	00007614 	andeq	r7, r0, r4, lsl r6
    82ec:	b9150000 	ldmdblt	r5, {}	; <UNPREDICTABLE>
    82f0:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    82f4:	d6160243 	ldrle	r0, [r6], -r3, asr #4
    82f8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    82fc:	0b1700fd 	bleq	5c86f8 <__ccfg+0x5a8750>
    8300:	00040000 	andeq	r0, r4, r0
    8304:	000027bf 			; <UNDEFINED> instruction: 0x000027bf
    8308:	16500104 	ldrbne	r0, [r0], -r4, lsl #2
    830c:	51010000 	mrspl	r0, (UNDEF: 1)
    8310:	4500001d 	strmi	r0, [r0, #-29]	; 0xffffffe3
    8314:	48000017 	stmdami	r0, {r0, r1, r2, r4}
    8318:	0000000e 	andeq	r0, r0, lr
    831c:	4a000000 	bmi	8324 <__exidx_end+0x56a0>
    8320:	0200005e 	andeq	r0, r0, #94	; 0x5e
    8324:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    8328:	01020000 	mrseq	r0, (UNDEF: 2)
    832c:	0003a108 	andeq	sl, r3, r8, lsl #2
    8330:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8334:	000003dd 	ldrdeq	r0, [r0], -sp
    8338:	71070202 	tstvc	r7, r2, lsl #4
    833c:	03000002 	movweq	r0, #2
    8340:	00001646 	andeq	r1, r0, r6, asr #12
    8344:	004c3f04 	subeq	r3, ip, r4, lsl #30
    8348:	04020000 	streq	r0, [r2], #-0
    834c:	00009d05 	andeq	r9, r0, r5, lsl #26
    8350:	17b10300 	ldrne	r0, [r1, r0, lsl #6]!
    8354:	41040000 	mrsmi	r0, (UNDEF: 4)
    8358:	0000005e 	andeq	r0, r0, lr, asr r0
    835c:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    8360:	02000000 	andeq	r0, r0, #0
    8364:	00980508 	addseq	r0, r8, r8, lsl #10
    8368:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    836c:	00006d07 	andeq	r6, r0, r7, lsl #26
    8370:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8374:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8378:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    837c:	03000000 	movweq	r0, #0
    8380:	00001648 	andeq	r1, r0, r8, asr #12
    8384:	00411f05 	subeq	r1, r1, r5, lsl #30
    8388:	b3030000 	movwlt	r0, #12288	; 0x3000
    838c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8390:	00005320 	andeq	r5, r0, r0, lsr #6
    8394:	1de40500 	cfstr64ne	mvdx0, [r4]
    8398:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    839c:	00000081 	andeq	r0, r0, r1, lsl #1
    83a0:	0000be03 	andeq	fp, r0, r3, lsl #28
    83a4:	1b340600 	blne	d09bac <__ccfg+0xce9c04>
    83a8:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    83ac:	0000008c 	andeq	r0, r0, ip, lsl #1
    83b0:	001e3d07 	andseq	r3, lr, r7, lsl #26
    83b4:	81ef0200 	mvnhi	r0, r0, lsl #4
    83b8:	00000000 	andeq	r0, r0, r0
    83bc:	001b6908 	andseq	r6, fp, r8, lsl #18
    83c0:	8cab0200 	sfmhi	f0, 4, [fp]
    83c4:	01000000 	mrseq	r0, (UNDEF: 0)
    83c8:	000000e7 	andeq	r0, r0, r7, ror #1
    83cc:	001a0409 	andseq	r0, sl, r9, lsl #8
    83d0:	03290100 			; <UNDEFINED> instruction: 0x03290100
    83d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    83d8:	001ede0a 	andseq	sp, lr, sl, lsl #28
    83dc:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    83e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    83e4:	1e1c0800 	cdpne	8, 1, cr0, cr12, cr0, {0}
    83e8:	81020000 	mrshi	r0, (UNDEF: 2)
    83ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    83f0:	00011001 	andeq	r1, r1, r1
    83f4:	1a040900 	bne	10a7fc <__ccfg+0xea854>
    83f8:	3c010000 	stccc	0, cr0, [r1], {-0}
    83fc:	00008c03 	andeq	r8, r0, r3, lsl #24
    8400:	1e8d0a00 	vdivne.f32	s0, s26, s0
    8404:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8408:	00008c03 	andeq	r8, r0, r3, lsl #24
    840c:	ca080000 	bgt	208414 <__ccfg+0x1e846c>
    8410:	0200001c 	andeq	r0, r0, #28
    8414:	00008c88 	andeq	r8, r0, r8, lsl #25
    8418:	01390100 	teqeq	r9, r0, lsl #2
    841c:	04090000 	streq	r0, [r9], #-0
    8420:	0100001a 	tsteq	r0, sl, lsl r0
    8424:	008c034f 	addeq	r0, ip, pc, asr #6
    8428:	010a0000 	mrseq	r0, (UNDEF: 10)
    842c:	0100001e 	tsteq	r0, lr, lsl r0
    8430:	008c0351 	addeq	r0, ip, r1, asr r3
    8434:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8438:	00001c2e 	andeq	r1, r0, lr, lsr #24
    843c:	008cc802 	addeq	ip, ip, r2, lsl #16
    8440:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    8444:	09000001 	stmdbeq	r0, {r0}
    8448:	00001a04 	andeq	r1, r0, r4, lsl #20
    844c:	8c036201 	sfmhi	f6, 4, [r3], {1}
    8450:	0a000000 	beq	8458 <__exidx_end+0x57d4>
    8454:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    8458:	8c036401 	cfstrshi	mvf6, [r3], {1}
    845c:	0a000000 	beq	8464 <__exidx_end+0x57e0>
    8460:	00001cff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    8464:	8c036501 	cfstr32hi	mvfx6, [r3], {1}
    8468:	00000000 	andeq	r0, r0, r0
    846c:	001d3108 	andseq	r3, sp, r8, lsl #2
    8470:	8cb20200 	lfmhi	f0, 4, [r2]
    8474:	01000000 	mrseq	r0, (UNDEF: 0)
    8478:	000001a3 	andeq	r0, r0, r3, lsr #3
    847c:	001a0409 	andseq	r0, sl, r9, lsl #8
    8480:	03940100 	orrseq	r0, r4, #0, 2
    8484:	0000008c 	andeq	r0, r0, ip, lsl #1
    8488:	001c4d0a 	andseq	r4, ip, sl, lsl #26
    848c:	03960100 	orrseq	r0, r6, #0, 2
    8490:	0000008c 	andeq	r0, r0, ip, lsl #1
    8494:	001cff0a 	andseq	pc, ip, sl, lsl #30
    8498:	03970100 	orrseq	r0, r7, #0, 2
    849c:	0000008c 	andeq	r0, r0, ip, lsl #1
    84a0:	1bfc0800 	blne	fff0a4a8 <_estack+0xdff054a8>
    84a4:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
    84a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    84ac:	0001cc01 	andeq	ip, r1, r1, lsl #24
    84b0:	1a040900 	bne	10a8b8 <__ccfg+0xea910>
    84b4:	b4010000 	strlt	r0, [r1], #-0
    84b8:	00008c03 	andeq	r8, r0, r3, lsl #24
    84bc:	1d090a00 	vstrne	s0, [r9, #-0]
    84c0:	b6010000 	strlt	r0, [r1], -r0
    84c4:	00008c03 	andeq	r8, r0, r3, lsl #24
    84c8:	a7080000 	strge	r0, [r8, -r0]
    84cc:	0200001d 	andeq	r0, r0, #29
    84d0:	00008cdf 	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
    84d4:	01f50100 	mvnseq	r0, r0, lsl #2
    84d8:	04090000 	streq	r0, [r9], #-0
    84dc:	0100001a 	tsteq	r0, sl, lsl r0
    84e0:	008c03c8 	addeq	r0, ip, r8, asr #7
    84e4:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
    84e8:	0100001e 	tsteq	r0, lr, lsl r0
    84ec:	008c03ca 	addeq	r0, ip, sl, asr #7
    84f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84f4:	00001e67 	andeq	r1, r0, r7, ror #28
    84f8:	008cd702 	addeq	sp, ip, r2, lsl #14
    84fc:	12010000 	andne	r0, r1, #0
    8500:	0a000002 	beq	8510 <__exidx_end+0x588c>
    8504:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    8508:	8c028301 	stchi	3, cr8, [r2], {1}
    850c:	00000000 	andeq	r0, r0, r0
    8510:	00080b0b 	andeq	r0, r8, fp, lsl #22
    8514:	03c40300 	biceq	r0, r4, #0, 6
    8518:	001f8e0c 	andseq	r8, pc, ip, lsl #28
    851c:	010f0200 	mrseq	r0, (UNDEF: 47)
    8520:	0000205c 	andeq	r2, r0, ip, asr r0
    8524:	0000007c 	andeq	r0, r0, ip, ror r0
    8528:	02c49c01 	sbceq	r9, r4, #256	; 0x100
    852c:	700d0000 	andvc	r0, sp, r0
    8530:	0100001a 	tsteq	r0, sl, lsl r0
    8534:	00008c7f 	andeq	r8, r0, pc, ror ip
    8538:	002e8f00 	eoreq	r8, lr, r0, lsl #30
    853c:	1fa60700 	svcne	0x00a60700
    8540:	81010000 	mrshi	r0, (UNDEF: 1)
    8544:	0000008c 	andeq	r0, r0, ip, lsl #1
    8548:	001d260e 	andseq	r2, sp, lr, lsl #12
    854c:	81820100 	orrhi	r0, r2, r0, lsl #2
    8550:	01000000 	mrseq	r0, (UNDEF: 0)
    8554:	1b990f52 	blne	fe64c2a4 <_estack+0xde6472a4>
    8558:	83010000 	movwhi	r0, #4096	; 0x1000
    855c:	00000081 	andeq	r0, r0, r1, lsl #1
    8560:	00002eb0 			; <UNDEFINED> instruction: 0x00002eb0
    8564:	001c670f 	andseq	r6, ip, pc, lsl #14
    8568:	81840100 	orrhi	r0, r4, r0, lsl #2
    856c:	c3000000 	movwgt	r0, #0
    8570:	1000002e 	andne	r0, r0, lr, lsr #32
    8574:	00000097 	muleq	r0, r7, r0
    8578:	0000206a 	andeq	r2, r0, sl, rrx
    857c:	00000e18 	andeq	r0, r0, r8, lsl lr
    8580:	029b9701 	addseq	r9, fp, #262144	; 0x40000
    8584:	a7110000 	ldrge	r0, [r1, -r0]
    8588:	12000000 	andne	r0, r0, #0
    858c:	00000e18 	andeq	r0, r0, r8, lsl lr
    8590:	0000b213 	andeq	fp, r0, r3, lsl r2
    8594:	00520100 	subseq	r0, r2, r0, lsl #2
    8598:	00971400 	addseq	r1, r7, r0, lsl #8
    859c:	20740000 	rsbscs	r0, r4, r0
    85a0:	00060000 	andeq	r0, r6, r0
    85a4:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    85a8:	0000a711 	andeq	sl, r0, r1, lsl r7
    85ac:	20741500 	rsbscs	r1, r4, r0, lsl #10
    85b0:	00060000 	andeq	r0, r6, r0
    85b4:	b2160000 	andslt	r0, r6, #0
    85b8:	f1000000 	cps	#0
    85bc:	0000002e 	andeq	r0, r0, lr, lsr #32
    85c0:	29170000 	ldmdbcs	r7, {}	; <UNPREDICTABLE>
    85c4:	02000019 	andeq	r0, r0, #25
    85c8:	0020d86c 	eoreq	sp, r0, ip, ror #16
    85cc:	0000ac00 	andeq	sl, r0, r0, lsl #24
    85d0:	439c0100 	orrsmi	r0, ip, #0, 2
    85d4:	0d000003 	stceq	0, cr0, [r0, #-12]
    85d8:	00001a70 	andeq	r1, r0, r0, ror sl
    85dc:	008cbf01 	addeq	fp, ip, r1, lsl #30
    85e0:	2f040000 	svccs	0x00040000
    85e4:	c00f0000 	andgt	r0, pc, r0
    85e8:	0100001e 	tsteq	r0, lr, lsl r0
    85ec:	000081c1 	andeq	r8, r0, r1, asr #3
    85f0:	002f3800 	eoreq	r3, pc, r0, lsl #16
    85f4:	1fd60f00 	svcne	0x00d60f00
    85f8:	c2010000 	andgt	r0, r1, #0
    85fc:	00000081 	andeq	r0, r0, r1, lsl #1
    8600:	00002f61 	andeq	r2, r0, r1, ror #30
    8604:	00009718 	andeq	r9, r0, r8, lsl r7
    8608:	00210e00 	eoreq	r0, r1, r0, lsl #28
    860c:	00000600 	andeq	r0, r0, r0, lsl #12
    8610:	32ee0100 	rsccc	r0, lr, #0, 2
    8614:	11000003 	tstne	r0, r3
    8618:	000000a7 	andeq	r0, r0, r7, lsr #1
    861c:	00210e15 	eoreq	r0, r1, r5, lsl lr
    8620:	00000600 	andeq	r0, r0, r0, lsl #12
    8624:	00b21600 	adcseq	r1, r2, r0, lsl #12
    8628:	2f880000 	svccs	0x00880000
    862c:	00000000 	andeq	r0, r0, r0
    8630:	0020fc19 	eoreq	pc, r0, r9, lsl ip	; <UNPREDICTABLE>
    8634:	00021a00 	andeq	r1, r2, r0, lsl #20
    8638:	50011a00 	andpl	r1, r1, r0, lsl #20
    863c:	00007402 	andeq	r7, r0, r2, lsl #8
    8640:	1b441b00 	blne	110f248 <__ccfg+0x10ef2a0>
    8644:	a4020000 	strge	r0, [r2], #-0
    8648:	0000008c 	andeq	r0, r0, ip, lsl #1
    864c:	00002184 	andeq	r2, r0, r4, lsl #3
    8650:	0000005c 	andeq	r0, r0, ip, asr r0
    8654:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
    8658:	701c0000 	andsvc	r0, ip, r0
    865c:	0100001a 	tsteq	r0, sl, lsl r0
    8660:	008c021f 	addeq	r0, ip, pc, lsl r2
    8664:	2f9b0000 	svccs	0x009b0000
    8668:	581d0000 	ldmdapl	sp, {}	; <UNPREDICTABLE>
    866c:	0100001e 	tsteq	r0, lr, lsl r0
    8670:	008c0221 	addeq	r0, ip, r1, lsr #4
    8674:	2fbc0000 	svccs	0x00bc0000
    8678:	721d0000 	andsvc	r0, sp, #0
    867c:	0100001f 	tsteq	r0, pc, lsl r0
    8680:	008c0222 	addeq	r0, ip, r2, lsr #4
    8684:	2fcf0000 	svccs	0x00cf0000
    8688:	801d0000 	andshi	r0, sp, r0
    868c:	0100001f 	tsteq	r0, pc, lsl r0
    8690:	008c0223 	addeq	r0, ip, r3, lsr #4
    8694:	301d0000 	andscc	r0, sp, r0
    8698:	bf1d0000 	svclt	0x001d0000
    869c:	0100001f 	tsteq	r0, pc, lsl r0
    86a0:	00810224 	addeq	r0, r1, r4, lsr #4
    86a4:	30850000 	addcc	r0, r5, r0
    86a8:	b11d0000 	tstlt	sp, r0
    86ac:	0100001f 	tsteq	r0, pc, lsl r0
    86b0:	008c0225 	addeq	r0, ip, r5, lsr #4
    86b4:	30a40000 	adccc	r0, r4, r0
    86b8:	1b000000 	blne	86c0 <__exidx_end+0x5a3c>
    86bc:	00001d7c 	andeq	r1, r0, ip, ror sp
    86c0:	008cc102 	addeq	ip, ip, r2, lsl #2
    86c4:	21e00000 	mvncs	r0, r0
    86c8:	00180000 	andseq	r0, r8, r0
    86cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    86d0:	000003e7 	andeq	r0, r0, r7, ror #7
    86d4:	001fb11d 	andseq	fp, pc, sp, lsl r1	; <UNPREDICTABLE>
    86d8:	02670100 	rsbeq	r0, r7, #0, 2
    86dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    86e0:	000030c9 	andeq	r3, r0, r9, asr #1
    86e4:	01f51e00 	mvnseq	r1, r0, lsl #28
    86e8:	00000000 	andeq	r0, r0, r0
    86ec:	00100000 	andseq	r0, r0, r0
    86f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    86f4:	00000404 	andeq	r0, r0, r4, lsl #8
    86f8:	00020516 	andeq	r0, r2, r6, lsl r5
    86fc:	0030f000 	eorseq	pc, r0, r0
    8700:	aa1b0000 	bge	6c8708 <__ccfg+0x6a8760>
    8704:	0200001c 	andeq	r0, r0, #28
    8708:	00008c9d 	muleq	r0, sp, ip
    870c:	0021f800 	eoreq	pc, r1, r0, lsl #16
    8710:	00001000 	andeq	r1, r0, r0
    8714:	3e9c0100 	fmlcce	f0, f4, f0
    8718:	1d000004 	stcne	0, cr0, [r0, #-16]
    871c:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    8720:	8c029701 	stchi	7, cr9, [r2], {1}
    8724:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8728:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    872c:	00001e58 	andeq	r1, r0, r8, asr lr
    8730:	8c029801 	stchi	8, cr9, [r2], {1}
    8734:	2a000000 	bcs	873c <__exidx_end+0x5ab8>
    8738:	00000031 	andeq	r0, r0, r1, lsr r0
    873c:	001c8a1b 	andseq	r8, ip, fp, lsl sl
    8740:	8c960200 	lfmhi	f0, 4, [r6], {0}
    8744:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8748:	14000022 	strne	r0, [r0], #-34	; 0xffffffde
    874c:	01000000 	mrseq	r0, (UNDEF: 0)
    8750:	0004789c 	muleq	r4, ip, r8
    8754:	1fb11d00 	svcne	0x00b11d00
    8758:	ba010000 	blt	48760 <__ccfg+0x287b8>
    875c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8760:	00313d00 	eorseq	r3, r1, r0, lsl #26
    8764:	1e581d00 	cdpne	13, 5, cr1, cr8, cr0, {0}
    8768:	bb010000 	bllt	48770 <__ccfg+0x287c8>
    876c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8770:	00315e00 	eorseq	r5, r1, r0, lsl #28
    8774:	511b0000 	tstpl	fp, r0
    8778:	0200001f 	andeq	r0, r0, #31
    877c:	00008c8f 	andeq	r8, r0, pc, lsl #25
    8780:	00221c00 	eoreq	r1, r2, r0, lsl #24
    8784:	00006400 	andeq	r6, r0, r0, lsl #8
    8788:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    878c:	1c000004 	stcne	0, cr0, [r0], {4}
    8790:	00001a04 	andeq	r1, r0, r4, lsl #20
    8794:	8c02db01 			; <UNDEFINED> instruction: 0x8c02db01
    8798:	71000000 	mrsvc	r0, (UNDEF: 0)
    879c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87a0:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    87a4:	8c02dd01 	stchi	13, cr13, [r2], {1}
    87a8:	92000000 	andls	r0, r0, #0
    87ac:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87b0:	00001e58 	andeq	r1, r0, r8, asr lr
    87b4:	8c02de01 	stchi	14, cr13, [r2], {1}
    87b8:	c6000000 	strgt	r0, [r0], -r0
    87bc:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87c0:	00001bb2 			; <UNDEFINED> instruction: 0x00001bb2
    87c4:	8c02df01 	stchi	15, cr13, [r2], {1}
    87c8:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    87cc:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87d0:	00001f29 	andeq	r1, r0, r9, lsr #30
    87d4:	8c02e001 	stchi	0, cr14, [r2], {1}
    87d8:	07000000 	streq	r0, [r0, -r0]
    87dc:	0a000032 	beq	88ac <__exidx_end+0x5c28>
    87e0:	00001e4e 	andeq	r1, r0, lr, asr #28
    87e4:	8c02e101 	stfhid	f6, [r2], {1}
    87e8:	1d000000 	stcne	0, cr0, [r0, #-0]
    87ec:	00001c22 	andeq	r1, r0, r2, lsr #24
    87f0:	8102e201 	tsthi	r2, r1, lsl #4
    87f4:	35000000 	strcc	r0, [r0, #-0]
    87f8:	00000032 	andeq	r0, r0, r2, lsr r0
    87fc:	0000be1e 	andeq	fp, r0, lr, lsl lr
    8800:	00228000 	eoreq	r8, r2, r0
    8804:	00001400 	andeq	r1, r0, r0, lsl #8
    8808:	4a9c0100 	bmi	fe708c10 <_estack+0xde703c10>
    880c:	1f000005 	svcne	0x00000005
    8810:	000000ce 	andeq	r0, r0, lr, asr #1
    8814:	000032b0 			; <UNDEFINED> instruction: 0x000032b0
    8818:	0000da16 	andeq	sp, r0, r6, lsl sl
    881c:	0032d100 	eorseq	sp, r2, r0, lsl #2
    8820:	22821500 	addcs	r1, r2, #0, 10
    8824:	000a0000 	andeq	r0, sl, r0
    8828:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    882c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    8830:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8834:	00002282 	andeq	r2, r0, r2, lsl #5
    8838:	0000000a 	andeq	r0, r0, sl
    883c:	0000da16 	andeq	sp, r0, r6, lsl sl
    8840:	00331100 	eorseq	r1, r3, r0, lsl #2
    8844:	00000000 	andeq	r0, r0, r0
    8848:	0000e71e 	andeq	lr, r0, lr, lsl r7
    884c:	00229400 	eoreq	r9, r2, r0, lsl #8
    8850:	00001400 	andeq	r1, r0, r0, lsl #8
    8854:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    8858:	1f000005 	svcne	0x00000005
    885c:	000000f7 	strdeq	r0, [r0], -r7
    8860:	00003324 	andeq	r3, r0, r4, lsr #6
    8864:	00010316 	andeq	r0, r1, r6, lsl r3
    8868:	00334500 	eorseq	r4, r3, r0, lsl #10
    886c:	22961500 	addscs	r1, r6, #0, 10
    8870:	000a0000 	andeq	r0, sl, r0
    8874:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    8878:	64000000 	strvs	r0, [r0], #-0
    887c:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    8880:	00002296 	muleq	r0, r6, r2
    8884:	0000000a 	andeq	r0, r0, sl
    8888:	00010316 	andeq	r0, r1, r6, lsl r3
    888c:	00338500 	eorseq	r8, r3, r0, lsl #10
    8890:	00000000 	andeq	r0, r0, r0
    8894:	0001101e 	andeq	r1, r1, lr, lsl r0
    8898:	0022a800 	eoreq	sl, r2, r0, lsl #16
    889c:	00001400 	andeq	r1, r0, r0, lsl #8
    88a0:	e29c0100 	adds	r0, ip, #0, 2
    88a4:	1f000005 	svcne	0x00000005
    88a8:	00000120 	andeq	r0, r0, r0, lsr #2
    88ac:	00003398 	muleq	r0, r8, r3
    88b0:	00012c16 	andeq	r2, r1, r6, lsl ip
    88b4:	0033b900 	eorseq	fp, r3, r0, lsl #18
    88b8:	22aa1500 	adccs	r1, sl, #0, 10
    88bc:	000a0000 	andeq	r0, sl, r0
    88c0:	201f0000 	andscs	r0, pc, r0
    88c4:	d8000001 	stmdale	r0, {r0}
    88c8:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    88cc:	000022aa 	andeq	r2, r0, sl, lsr #5
    88d0:	0000000a 	andeq	r0, r0, sl
    88d4:	00012c16 	andeq	r2, r1, r6, lsl ip
    88d8:	0033f900 	eorseq	pc, r3, r0, lsl #18
    88dc:	00000000 	andeq	r0, r0, r0
    88e0:	0001391e 	andeq	r3, r1, lr, lsl r9
    88e4:	0022bc00 	eoreq	fp, r2, r0, lsl #24
    88e8:	00002800 	andeq	r2, r0, r0, lsl #16
    88ec:	3c9c0100 	ldfccs	f0, [ip], {0}
    88f0:	1f000006 	svcne	0x00000006
    88f4:	00000149 	andeq	r0, r0, r9, asr #2
    88f8:	0000340c 	andeq	r3, r0, ip, lsl #8
    88fc:	00015516 	andeq	r5, r1, r6, lsl r5
    8900:	00342d00 	eorseq	r2, r4, r0, lsl #26
    8904:	01612000 	cmneq	r1, r0
    8908:	be150000 	cdplt	0, 1, cr0, cr5, cr0, {0}
    890c:	1c000022 	stcne	0, cr0, [r0], {34}	; 0x22
    8910:	1f000000 	svcne	0x00000000
    8914:	00000149 	andeq	r0, r0, r9, asr #2
    8918:	0000344c 	andeq	r3, r0, ip, asr #8
    891c:	0022be15 	eoreq	fp, r2, r5, lsl lr
    8920:	00001c00 	andeq	r1, r0, r0, lsl #24
    8924:	01551600 	cmpeq	r5, r0, lsl #12
    8928:	346d0000 	strbtcc	r0, [sp], #-0
    892c:	61160000 	tstvs	r6, r0
    8930:	9a000001 	bls	893c <__exidx_end+0x5cb8>
    8934:	00000034 	andeq	r0, r0, r4, lsr r0
    8938:	d71b0000 	ldrle	r0, [fp, -r0]
    893c:	0200001b 	andeq	r0, r0, #27
    8940:	00008ccf 	andeq	r8, r0, pc, asr #25
    8944:	0022e400 	eoreq	lr, r2, r0, lsl #8
    8948:	00001000 	andeq	r1, r0, r0
    894c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    8950:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    8954:	00001c71 	andeq	r1, r0, r1, ror ip
    8958:	8c038401 	cfstrshi	mvf8, [r3], {1}
    895c:	ad000000 	stcge	0, cr0, [r0, #-0]
    8960:	00000034 	andeq	r0, r0, r4, lsr r0
    8964:	00016e1e 	andeq	r6, r1, lr, lsl lr
    8968:	0022f400 	eoreq	pc, r2, r0, lsl #8
    896c:	00002c00 	andeq	r2, r0, r0, lsl #24
    8970:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    8974:	1f000006 	svcne	0x00000006
    8978:	0000017e 	andeq	r0, r0, lr, ror r1
    897c:	000034c8 	andeq	r3, r0, r8, asr #9
    8980:	00018a16 	andeq	r8, r1, r6, lsl sl
    8984:	0034e900 	eorseq	lr, r4, r0, lsl #18
    8988:	01962000 	orrseq	r2, r6, r0
    898c:	f6150000 			; <UNDEFINED> instruction: 0xf6150000
    8990:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    8994:	1f000000 	svcne	0x00000000
    8998:	0000017e 	andeq	r0, r0, lr, ror r1
    899c:	0000350c 	andeq	r3, r0, ip, lsl #10
    89a0:	0022f615 	eoreq	pc, r2, r5, lsl r6	; <UNPREDICTABLE>
    89a4:	00001e00 	andeq	r1, r0, r0, lsl #28
    89a8:	018a1600 	orreq	r1, sl, r0, lsl #12
    89ac:	352d0000 	strcc	r0, [sp, #-0]!
    89b0:	96160000 	ldrls	r0, [r6], -r0
    89b4:	5a000001 	bpl	89c0 <__exidx_end+0x5d3c>
    89b8:	00000035 	andeq	r0, r0, r5, lsr r0
    89bc:	a31e0000 	tstge	lr, #0
    89c0:	20000001 	andcs	r0, r0, r1
    89c4:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    89c8:	01000000 	mrseq	r0, (UNDEF: 0)
    89cc:	00070c9c 	muleq	r7, ip, ip
    89d0:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
    89d4:	356d0000 	strbcc	r0, [sp, #-0]!
    89d8:	bf160000 	svclt	0x00160000
    89dc:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    89e0:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    89e4:	00002322 	andeq	r2, r0, r2, lsr #6
    89e8:	0000000a 	andeq	r0, r0, sl
    89ec:	0001b31f 	andeq	fp, r1, pc, lsl r3
    89f0:	0035ad00 	eorseq	sl, r5, r0, lsl #26
    89f4:	23221500 			; <UNDEFINED> instruction: 0x23221500
    89f8:	000a0000 	andeq	r0, sl, r0
    89fc:	bf160000 	svclt	0x00160000
    8a00:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    8a04:	00000035 	andeq	r0, r0, r5, lsr r0
    8a08:	cc1e0000 	ldcgt	0, cr0, [lr], {-0}
    8a0c:	34000001 	strcc	r0, [r0], #-1
    8a10:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    8a14:	01000000 	mrseq	r0, (UNDEF: 0)
    8a18:	0007589c 	muleq	r7, ip, r8
    8a1c:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
    8a20:	35e10000 	strbcc	r0, [r1, #0]!
    8a24:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    8a28:	02000001 	andeq	r0, r0, #1
    8a2c:	15000036 	strne	r0, [r0, #-54]	; 0xffffffca
    8a30:	00002336 	andeq	r2, r0, r6, lsr r3
    8a34:	0000000a 	andeq	r0, r0, sl
    8a38:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    8a3c:	00362100 	eorseq	r2, r6, r0, lsl #2
    8a40:	23361500 	teqcs	r6, #0, 10
    8a44:	000a0000 	andeq	r0, sl, r0
    8a48:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    8a4c:	42000001 	andmi	r0, r0, #1
    8a50:	00000036 	andeq	r0, r0, r6, lsr r0
    8a54:	59170000 	ldmdbpl	r7, {}	; <UNPREDICTABLE>
    8a58:	02000019 	andeq	r0, r0, #25
    8a5c:	00234873 	eoreq	r4, r3, r3, ror r8
    8a60:	00011000 	andeq	r1, r1, r0
    8a64:	639c0100 	orrsvs	r0, ip, #0, 2
    8a68:	1c000009 	stcne	0, cr0, [r0], {9}
    8a6c:	00001a04 	andeq	r1, r0, r4, lsl #20
    8a70:	8c012701 	stchi	7, cr2, [r1], {1}
    8a74:	55000000 	strpl	r0, [r0, #-0]
    8a78:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    8a7c:	00001a70 	andeq	r1, r0, r0, ror sl
    8a80:	8c012701 	stchi	7, cr2, [r1], {1}
    8a84:	81000000 	mrshi	r0, (UNDEF: 0)
    8a88:	1d000036 	stcne	0, cr0, [r0, #-216]	; 0xffffff28
    8a8c:	00001ddb 	ldrdeq	r1, [r0], -fp
    8a90:	8c012901 			; <UNDEFINED> instruction: 0x8c012901
    8a94:	a2000000 	andge	r0, r0, #0
    8a98:	21000036 	tstcs	r0, r6, lsr r0
    8a9c:	000001f5 	strdeq	r0, [r0], -r5
    8aa0:	00002378 	andeq	r2, r0, r8, ror r3
    8aa4:	00000e30 	andeq	r0, r0, r0, lsr lr
    8aa8:	c1014001 	tstgt	r1, r1
    8aac:	12000007 	andne	r0, r0, #7
    8ab0:	00000e30 	andeq	r0, r0, r0, lsr lr
    8ab4:	00020516 	andeq	r0, r2, r6, lsl r5
    8ab8:	00377000 	eorseq	r7, r7, r0
    8abc:	22000000 	andcs	r0, r0, #0
    8ac0:	00002352 	andeq	r2, r0, r2, asr r3
    8ac4:	00000343 	andeq	r0, r0, r3, asr #6
    8ac8:	000007d6 	ldrdeq	r0, [r0], -r6
    8acc:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
    8ad0:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
    8ad4:	00235e22 	eoreq	r5, r3, r2, lsr #28
    8ad8:	000ad600 	andeq	sp, sl, r0, lsl #12
    8adc:	0007ef00 	andeq	lr, r7, r0, lsl #30
    8ae0:	51011a00 	tstpl	r1, r0, lsl #20
    8ae4:	011a4801 	tsteq	sl, r1, lsl #16
    8ae8:	00740250 	rsbseq	r0, r4, r0, asr r2
    8aec:	23622300 	cmncs	r2, #0, 6
    8af0:	03bd0000 			; <UNDEFINED> instruction: 0x03bd0000
    8af4:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    8af8:	02000023 	andeq	r0, r0, #35	; 0x23
    8afc:	081d0076 	ldmdaeq	sp, {r1, r2, r4, r5, r6}
    8b00:	011a0000 	tsteq	sl, r0
    8b04:	1a300153 	bne	c09058 <__ccfg+0xbe90b0>
    8b08:	0a035201 	beq	dd314 <__ccfg+0xbd36c>
    8b0c:	011a03ff 			; <UNDEFINED> instruction: 0x011a03ff
    8b10:	2c080251 	sfmcs	f0, 4, [r8], {81}	; 0x51
    8b14:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8b18:	22000074 	andcs	r0, r0, #116	; 0x74
    8b1c:	00002388 	andeq	r2, r0, r8, lsl #7
    8b20:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b24:	00000836 	andeq	r0, r0, r6, lsr r8
    8b28:	0151011a 	cmpeq	r1, sl, lsl r1
    8b2c:	50011a4c 	andpl	r1, r1, ip, asr #20
    8b30:	00007402 	andeq	r7, r0, r2, lsl #8
    8b34:	00238c23 	eoreq	r8, r3, r3, lsr #24
    8b38:	00040400 	andeq	r0, r4, r0, lsl #8
    8b3c:	23962200 	orrscs	r2, r6, #0, 4
    8b40:	0ad60000 	beq	ff588b48 <_estack+0xdf583b48>
    8b44:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    8b48:	011a0000 	tsteq	sl, r0
    8b4c:	1a440151 	bne	1109098 <__ccfg+0x10e90f0>
    8b50:	74025001 	strvc	r5, [r2], #-1
    8b54:	9a230000 	bls	8c8b5c <__ccfg+0x8a8bb4>
    8b58:	3e000023 	cdpcc	0, 0, cr0, cr0, cr3, {1}
    8b5c:	22000004 	andcs	r0, r0, #4
    8b60:	000023a4 	andeq	r2, r0, r4, lsr #7
    8b64:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b68:	0000087a 	andeq	r0, r0, sl, ror r8
    8b6c:	0151011a 	cmpeq	r1, sl, lsl r1
    8b70:	50011a40 	andpl	r1, r1, r0, asr #20
    8b74:	00007402 	andeq	r7, r0, r2, lsl #8
    8b78:	0023aa22 	eoreq	sl, r3, r2, lsr #20
    8b7c:	00047800 	andeq	r7, r4, r0, lsl #16
    8b80:	00088e00 	andeq	r8, r8, r0, lsl #28
    8b84:	50011a00 	andpl	r1, r1, r0, lsl #20
    8b88:	00007502 	andeq	r7, r0, r2, lsl #10
    8b8c:	0023b422 	eoreq	fp, r3, r2, lsr #8
    8b90:	000ad600 	andeq	sp, sl, r0, lsl #12
    8b94:	0008a700 	andeq	sl, r8, r0, lsl #14
    8b98:	51011a00 	tstpl	r1, r0, lsl #20
    8b9c:	011a3c01 	tsteq	sl, r1, lsl #24
    8ba0:	00740250 	rsbseq	r0, r4, r0, asr r2
    8ba4:	23ba2200 			; <UNDEFINED> instruction: 0x23ba2200
    8ba8:	00e70000 	rsceq	r0, r7, r0
    8bac:	08bb0000 	ldmeq	fp!, {}	; <UNPREDICTABLE>
    8bb0:	011a0000 	tsteq	sl, r0
    8bb4:	00750250 	rsbseq	r0, r5, r0, asr r2
    8bb8:	23cc2200 	biccs	r2, ip, #0, 4
    8bbc:	01100000 	tsteq	r0, r0
    8bc0:	08cf0000 	stmiaeq	pc, {}^	; <UNPREDICTABLE>
    8bc4:	011a0000 	tsteq	sl, r0
    8bc8:	00750250 	rsbseq	r0, r5, r0, asr r2
    8bcc:	23da2200 	bicscs	r2, sl, #0, 4
    8bd0:	01390000 	teqeq	r9, r0
    8bd4:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
    8bd8:	011a0000 	tsteq	sl, r0
    8bdc:	00750250 	rsbseq	r0, r5, r0, asr r2
    8be0:	23e42200 	mvncs	r2, #0, 4
    8be4:	0ad60000 	beq	ff588bec <_estack+0xdf583bec>
    8be8:	08fd0000 	ldmeq	sp!, {}^	; <UNPREDICTABLE>
    8bec:	011a0000 	tsteq	sl, r0
    8bf0:	28080251 	stmdacs	r8, {r0, r4, r6, r9}
    8bf4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bf8:	22000074 	andcs	r0, r0, #116	; 0x74
    8bfc:	000023ea 	andeq	r2, r0, sl, ror #7
    8c00:	000000be 	strheq	r0, [r0], -lr
    8c04:	00000911 	andeq	r0, r0, r1, lsl r9
    8c08:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c0c:	22000075 	andcs	r0, r0, #117	; 0x75
    8c10:	000023fc 	strdeq	r2, [r0], -ip
    8c14:	000001a3 	andeq	r0, r0, r3, lsr #3
    8c18:	00000925 	andeq	r0, r0, r5, lsr #18
    8c1c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c20:	22000075 	andcs	r0, r0, #117	; 0x75
    8c24:	0000240e 	andeq	r2, r0, lr, lsl #8
    8c28:	000001cc 	andeq	r0, r0, ip, asr #3
    8c2c:	00000939 	andeq	r0, r0, r9, lsr r9
    8c30:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c34:	22000075 	andcs	r0, r0, #117	; 0x75
    8c38:	00002422 	andeq	r2, r0, r2, lsr #8
    8c3c:	0000016e 	andeq	r0, r0, lr, ror #2
    8c40:	0000094d 	andeq	r0, r0, sp, asr #18
    8c44:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c48:	19000075 	stmdbne	r0, {r0, r2, r4, r5, r6}
    8c4c:	0000242c 	andeq	r2, r0, ip, lsr #8
    8c50:	00000ad6 	ldrdeq	r0, [r0], -r6
    8c54:	0151011a 	cmpeq	r1, sl, lsl r1
    8c58:	50011a38 	andpl	r1, r1, r8, lsr sl
    8c5c:	00007402 	andeq	r7, r0, r2, lsl #8
    8c60:	19d61700 	ldmibne	r6, {r8, r9, sl, ip}^
    8c64:	fd020000 	stc2	0, cr0, [r2, #-0]
    8c68:	00002458 	andeq	r2, r0, r8, asr r4
    8c6c:	00000064 	andeq	r0, r0, r4, rrx
    8c70:	09899c01 	stmibeq	r9, {r0, sl, fp, ip, pc}
    8c74:	a51d0000 	ldrge	r0, [sp, #-0]
    8c78:	0100001b 	tsteq	r0, fp, lsl r0
    8c7c:	008c03eb 	addeq	r0, ip, fp, ror #7
    8c80:	37890000 	strcc	r0, [r9, r0]
    8c84:	0c000000 	stceq	0, cr0, [r0], {-0}
    8c88:	00001f33 	andeq	r1, r0, r3, lsr pc
    8c8c:	bc010602 	stclt	6, cr0, [r1], {2}
    8c90:	28000024 	stmdacs	r0, {r2, r5}
    8c94:	01000000 	mrseq	r0, (UNDEF: 0)
    8c98:	0009b09c 	muleq	r9, ip, r0
    8c9c:	1d721c00 	ldclne	12, cr1, [r2, #-0]
    8ca0:	13010000 	movwne	r0, #4096	; 0x1000
    8ca4:	00008c04 	andeq	r8, r0, r4, lsl #24
    8ca8:	0037a400 	eorseq	sl, r7, r0, lsl #8
    8cac:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
    8cb0:	02000019 	andeq	r0, r0, #25
    8cb4:	0024e47a 	eoreq	lr, r4, sl, ror r4
    8cb8:	00015000 	andeq	r5, r1, r0
    8cbc:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    8cc0:	1c00000a 	stcne	0, cr0, [r0], {10}
    8cc4:	00001a70 	andeq	r1, r0, r0, ror sl
    8cc8:	8c019b01 			; <UNDEFINED> instruction: 0x8c019b01
    8ccc:	c5000000 	strgt	r0, [r0, #-0]
    8cd0:	1d000037 	stcne	0, cr0, [r0, #-220]	; 0xffffff24
    8cd4:	00001ed1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    8cd8:	8c019d01 	stchi	13, cr9, [r1], {1}
    8cdc:	20000000 	andcs	r0, r0, r0
    8ce0:	1d000038 	stcne	0, cr0, [r0, #-224]	; 0xffffff20
    8ce4:	00001ddb 	ldrdeq	r1, [r0], -fp
    8ce8:	8c019e01 	stchi	14, cr9, [r1], {1}
    8cec:	33000000 	movwcc	r0, #0
    8cf0:	1d000038 	stcne	0, cr0, [r0, #-224]	; 0xffffff20
    8cf4:	00001b25 	andeq	r1, r0, r5, lsr #22
    8cf8:	8c019f01 	stchi	15, cr9, [r1], {1}
    8cfc:	46000000 	strmi	r0, [r0], -r0
    8d00:	1d000038 	stcne	0, cr0, [r0, #-224]	; 0xffffff20
    8d04:	00001b00 	andeq	r1, r0, r0, lsl #22
    8d08:	8c01a001 	stchi	0, cr10, [r1], {1}
    8d0c:	64000000 	strvs	r0, [r0], #-0
    8d10:	25000038 	strcs	r0, [r0, #-56]	; 0xffffffc8
    8d14:	00000212 	andeq	r0, r0, r2, lsl r2
    8d18:	000025f6 	strdeq	r2, [r0], -r6
    8d1c:	0000003e 	andeq	r0, r0, lr, lsr r0
    8d20:	23021601 	movwcs	r1, #9729	; 0x2601
    8d24:	0000256e 	andeq	r2, r0, lr, ror #10
    8d28:	0000063c 	andeq	r0, r0, ip, lsr r6
    8d2c:	00259022 	eoreq	r9, r5, r2, lsr #32
    8d30:	000af200 	andeq	pc, sl, r0, lsl #4
    8d34:	000a4600 	andeq	r4, sl, r0, lsl #12
    8d38:	51011a00 	tstpl	r1, r0, lsl #20
    8d3c:	011a3101 	tsteq	sl, r1, lsl #2
    8d40:	00340150 	eorseq	r0, r4, r0, asr r1
    8d44:	00259622 	eoreq	r9, r5, r2, lsr #12
    8d48:	00098900 	andeq	r8, r9, r0, lsl #18
    8d4c:	000a5d00 	andeq	r5, sl, r0, lsl #26
    8d50:	50011a00 	andpl	r1, r1, r0, lsl #20
    8d54:	37bd0c05 	ldrcc	r0, [sp, r5, lsl #24]!
    8d58:	23000086 	movwcs	r0, #134	; 0x86
    8d5c:	0000259c 	muleq	r0, ip, r5
    8d60:	00000b08 	andeq	r0, r0, r8, lsl #22
    8d64:	0025a622 	eoreq	sl, r5, r2, lsr #12
    8d68:	000af200 	andeq	pc, sl, r0, lsl #4
    8d6c:	000a7f00 	andeq	r7, sl, r0, lsl #30
    8d70:	51011a00 	tstpl	r1, r0, lsl #20
    8d74:	1a007402 	bne	25d84 <__ccfg+0x5ddc>
    8d78:	34015001 	strcc	r5, [r1], #-1
    8d7c:	25ac2200 	strcs	r2, [ip, #512]!	; 0x200
    8d80:	0b080000 	bleq	208d88 <__ccfg+0x1e8de0>
    8d84:	0a920000 	beq	fe488d8c <_estack+0xde483d8c>
    8d88:	011a0000 	tsteq	sl, r0
    8d8c:	00340150 	eorseq	r0, r4, r0, asr r1
    8d90:	0025bc22 	eoreq	fp, r5, r2, lsr #24
    8d94:	00098900 	andeq	r8, r9, r0, lsl #18
    8d98:	000aac00 	andeq	sl, sl, r0, lsl #24
    8d9c:	50011a00 	andpl	r1, r1, r0, lsl #20
    8da0:	0c007408 	cfstrseq	mvf7, [r0], {8}
    8da4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    8da8:	cc26001a 	stcgt	0, cr0, [r6], #-104	; 0xffffff98
    8dac:	cc000025 	stcgt	0, cr0, [r0], {37}	; 0x25
    8db0:	1a00000a 	bne	8de0 <__exidx_end+0x615c>
    8db4:	0c055201 	sfmeq	f5, 4, [r5], {1}
    8db8:	60006000 	andvs	r6, r0, r0
    8dbc:	0151011a 	cmpeq	r1, sl, lsl r1
    8dc0:	50011a37 	andpl	r1, r1, r7, lsr sl
    8dc4:	48007404 	stmdami	r0, {r2, sl, ip, sp, lr}
    8dc8:	e2230025 	eor	r0, r3, #37	; 0x25
    8dcc:	f2000025 	vhadd.s8	d0, d0, d21
    8dd0:	0000000a 	andeq	r0, r0, sl
    8dd4:	001ceb27 	andseq	lr, ip, r7, lsr #22
    8dd8:	01ca0600 	biceq	r0, sl, r0, lsl #12
    8ddc:	00000af2 	strdeq	r0, [r0], -r2
    8de0:	00008c28 	andeq	r8, r0, r8, lsr #24
    8de4:	008c2800 	addeq	r2, ip, r0, lsl #16
    8de8:	8c280000 	stchi	0, cr0, [r8], #-0
    8dec:	00000000 	andeq	r0, r0, r0
    8df0:	001b0d29 	andseq	r0, fp, r9, lsr #26
    8df4:	08f90700 	ldmeq	r9!, {r8, r9, sl}^
    8df8:	2800000b 	stmdacs	r0, {r0, r1, r3}
    8dfc:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e00:	00008c28 	andeq	r8, r0, r8, lsr #24
    8e04:	a82a0000 	stmdage	sl!, {}	; <UNPREDICTABLE>
    8e08:	0700001e 	smladeq	r0, lr, r0, r0
    8e0c:	008c0110 	addeq	r0, ip, r0, lsl r1
    8e10:	8c280000 	stchi	0, cr0, [r8], #-0
    8e14:	00000000 	andeq	r0, r0, r0
    8e18:	00092300 	andeq	r2, r9, r0, lsl #6
    8e1c:	20000400 	andcs	r0, r0, r0, lsl #8
    8e20:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    8e24:	00165001 	andseq	r5, r6, r1
    8e28:	20bb0100 	adcscs	r0, fp, r0, lsl #2
    8e2c:	17450000 	strbne	r0, [r5, -r0]
    8e30:	0f200000 	svceq	0x00200000
    8e34:	00000000 	andeq	r0, r0, r0
    8e38:	62a50000 	adcvs	r0, r5, #0
    8e3c:	00020000 	andeq	r0, r2, r0
    8e40:	06000017 			; <UNDEFINED> instruction: 0x06000017
    8e44:	0000301b 	andeq	r3, r0, fp, lsl r0
    8e48:	06010300 	streq	r0, [r1], -r0, lsl #6
    8e4c:	000003a3 	andeq	r0, r0, r3, lsr #7
    8e50:	0021fa02 	eoreq	pc, r1, r2, lsl #20
    8e54:	421d0600 	andsmi	r0, sp, #0, 12
    8e58:	03000000 	movweq	r0, #0
    8e5c:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    8e60:	02030000 	andeq	r0, r3, #0
    8e64:	0003dd05 	andeq	sp, r3, r5, lsl #26
    8e68:	20e80200 	rsccs	r0, r8, r0, lsl #4
    8e6c:	2b060000 	blcs	188e74 <__ccfg+0x168ecc>
    8e70:	0000005b 	andeq	r0, r0, fp, asr r0
    8e74:	71070203 	tstvc	r7, r3, lsl #4
    8e78:	02000002 	andeq	r0, r0, #2
    8e7c:	00001646 	andeq	r1, r0, r6, asr #12
    8e80:	006d3f06 	rsbeq	r3, sp, r6, lsl #30
    8e84:	04030000 	streq	r0, [r3], #-0
    8e88:	00009d05 	andeq	r9, r0, r5, lsl #26
    8e8c:	17b10200 	ldrne	r0, [r1, r0, lsl #4]!
    8e90:	41060000 	mrsmi	r0, (UNDEF: 6)
    8e94:	0000007f 	andeq	r0, r0, pc, ror r0
    8e98:	72070403 	andvc	r0, r7, #50331648	; 0x3000000
    8e9c:	03000000 	movweq	r0, #0
    8ea0:	00980508 	addseq	r0, r8, r8, lsl #10
    8ea4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8ea8:	00006d07 	andeq	r6, r0, r7, lsl #26
    8eac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8eb0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8eb4:	77070403 	strvc	r0, [r7, -r3, lsl #8]
    8eb8:	02000000 	andeq	r0, r0, #0
    8ebc:	00001702 	andeq	r1, r0, r2, lsl #14
    8ec0:	00251307 	eoreq	r1, r5, r7, lsl #6
    8ec4:	fc020000 	stc2	0, cr0, [r2], {-0}
    8ec8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    8ecc:	00003714 	andeq	r3, r0, r4, lsl r7
    8ed0:	20ea0200 	rsccs	r0, sl, r0, lsl #4
    8ed4:	1a070000 	bne	1c8edc <__ccfg+0x1a8f34>
    8ed8:	00000050 	andeq	r0, r0, r0, asr r0
    8edc:	00164802 	andseq	r4, r6, r2, lsl #16
    8ee0:	621f0700 	andsvs	r0, pc, #0, 14
    8ee4:	02000000 	andeq	r0, r0, #0
    8ee8:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    8eec:	00742007 	rsbseq	r2, r4, r7
    8ef0:	d3020000 	movwle	r0, #8192	; 0x2000
    8ef4:	08000022 	stmdaeq	r0, {r1, r5}
    8ef8:	0000e433 	andeq	lr, r0, r3, lsr r4
    8efc:	ea040500 	b	10a304 <__ccfg+0xea35c>
    8f00:	06000000 	streq	r0, [r0], -r0
    8f04:	00f10405 	rscseq	r0, r1, r5, lsl #8
    8f08:	fc070000 	stc2	0, cr0, [r7], {-0}
    8f0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8f10:	000000ad 	andeq	r0, r0, sp, lsr #1
    8f14:	23490200 	movtcs	r0, #37376	; 0x9200
    8f18:	42090000 	andmi	r0, r9, #0
    8f1c:	00000107 	andeq	r0, r0, r7, lsl #2
    8f20:	010d0405 	tsteq	sp, r5, lsl #8
    8f24:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8f28:	26000000 	strcs	r0, [r0], -r0
    8f2c:	08000001 	stmdaeq	r0, {r0}
    8f30:	00000126 	andeq	r0, r0, r6, lsr #2
    8f34:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f38:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    8f3c:	05000000 	streq	r0, [r0, #-0]
    8f40:	0000ad04 	andeq	sl, r0, r4, lsl #26
    8f44:	24720200 	ldrbtcs	r0, [r2], #-512	; 0xfffffe00
    8f48:	46090000 	strmi	r0, [r9], -r0
    8f4c:	00000137 	andeq	r0, r0, r7, lsr r1
    8f50:	013d0405 	teqeq	sp, r5, lsl #8
    8f54:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    8f58:	02000000 	andeq	r0, r0, #0
    8f5c:	000024de 	ldrdeq	r2, [r0], -lr
    8f60:	01374809 	teqeq	r7, r9, lsl #16
    8f64:	24020000 	strcs	r0, [r2], #-0
    8f68:	09000022 	stmdbeq	r0, {r1, r5}
    8f6c:	0001584a 	andeq	r5, r1, sl, asr #16
    8f70:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    8f74:	09000001 	stmdbeq	r0, {r0}
    8f78:	000000ce 	andeq	r0, r0, lr, asr #1
    8f7c:	0000016d 	andeq	r0, r0, sp, ror #2
    8f80:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f84:	8a020000 	bhi	88f8c <__ccfg+0x68fe4>
    8f88:	09000021 	stmdbeq	r0, {r0, r5}
    8f8c:	0001374c 	andeq	r3, r1, ip, asr #14
    8f90:	20f30200 	rscscs	r0, r3, r0, lsl #4
    8f94:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    8f98:	00000107 	andeq	r0, r0, r7, lsl #2
    8f9c:	00217a02 	eoreq	r7, r1, r2, lsl #20
    8fa0:	e4510900 	ldrb	r0, [r1], #-2304	; 0xfffff700
    8fa4:	02000000 	andeq	r0, r0, #0
    8fa8:	00001ff6 	strdeq	r1, [r0], -r6
    8fac:	01995309 	orrseq	r5, r9, r9, lsl #6
    8fb0:	04050000 	streq	r0, [r5], #-0
    8fb4:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    8fb8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8fbc:	0001b800 	andeq	fp, r1, r0, lsl #16
    8fc0:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    8fc4:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    8fc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8fcc:	000000b8 	strheq	r0, [r0], -r8
    8fd0:	b8040500 	stmdalt	r4, {r8, sl}
    8fd4:	02000000 	andeq	r0, r0, #0
    8fd8:	0000236d 	andeq	r2, r0, sp, ror #6
    8fdc:	01c95709 	biceq	r5, r9, r9, lsl #14
    8fe0:	04050000 	streq	r0, [r5], #-0
    8fe4:	000001cf 	andeq	r0, r0, pc, asr #3
    8fe8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8fec:	0001e300 	andeq	lr, r1, r0, lsl #6
    8ff0:	01e30800 	mvneq	r0, r0, lsl #16
    8ff4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    8ff8:	00000000 	andeq	r0, r0, r0
    8ffc:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    9000:	ad020000 	stcge	0, cr0, [r2, #-0]
    9004:	09000021 	stmdbeq	r0, {r0, r5}
    9008:	0001c95a 	andeq	ip, r1, sl, asr r9
    900c:	22760200 	rsbscs	r0, r6, #0, 4
    9010:	5d090000 	stcpl	0, cr0, [r9, #-0]
    9014:	000001c9 	andeq	r0, r0, r9, asr #3
    9018:	00200802 	eoreq	r0, r0, r2, lsl #16
    901c:	c9600900 	stmdbgt	r0!, {r8, fp}^
    9020:	02000001 	andeq	r0, r0, #1
    9024:	00002398 	muleq	r0, r8, r3
    9028:	00e46309 	rsceq	r6, r4, r9, lsl #6
    902c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    9030:	09000020 	stmdbeq	r0, {r5}
    9034:	00022065 	andeq	r2, r2, r5, rrx
    9038:	26040500 	strcs	r0, [r4], -r0, lsl #10
    903c:	07000002 	streq	r0, [r0, -r2]
    9040:	00000231 	andeq	r0, r0, r1, lsr r2
    9044:	0000ce08 	andeq	ip, r0, r8, lsl #28
    9048:	ef020000 	svc	0x00020000
    904c:	09000024 	stmdbeq	r0, {r2, r5}
    9050:	00022067 	andeq	r2, r2, r7, rrx
    9054:	22e40200 	rsccs	r0, r4, #0, 4
    9058:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    905c:	000000eb 	andeq	r0, r0, fp, ror #1
    9060:	0024bd02 	eoreq	fp, r4, r2, lsl #26
    9064:	eb6b0900 	bl	1acb46c <__ccfg+0x1aab4c4>
    9068:	02000000 	andeq	r0, r0, #0
    906c:	00002292 	muleq	r0, r2, r2
    9070:	00eb6d09 	rsceq	r6, fp, r9, lsl #26
    9074:	a4020000 	strge	r0, [r2], #-0
    9078:	09000022 	stmdbeq	r0, {r1, r5}
    907c:	0000eb6f 	andeq	lr, r0, pc, ror #22
    9080:	094c0b00 	stmdbeq	ip, {r8, r9, fp}^
    9084:	0003557a 	andeq	r5, r3, sl, ror r5
    9088:	22480c00 	subcs	r0, r8, #0, 24
    908c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    9090:	000000fc 	strdeq	r0, [r0], -ip
    9094:	24b00c00 	ldrtcs	r0, [r0], #3072	; 0xc00
    9098:	7d090000 	stcvc	0, cr0, [r9, #-0]
    909c:	0000012c 	andeq	r0, r0, ip, lsr #2
    90a0:	226c0c04 	rsbcs	r0, ip, #4, 24	; 0x400
    90a4:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    90a8:	00000142 	andeq	r0, r0, r2, asr #2
    90ac:	23d70c08 	bicscs	r0, r7, #8, 24	; 0x800
    90b0:	7f090000 	svcvc	0x00090000
    90b4:	0000014d 	andeq	r0, r0, sp, asr #2
    90b8:	23e90c0c 	mvncs	r0, #12, 24	; 0xc00
    90bc:	80090000 	andhi	r0, r9, r0
    90c0:	0000016d 	andeq	r0, r0, sp, ror #2
    90c4:	23fb0c10 	mvnscs	r0, #16, 24	; 0x1000
    90c8:	81090000 	mrshi	r0, (UNDEF: 9)
    90cc:	00000178 	andeq	r0, r0, r8, ror r1
    90d0:	21460c14 	cmpcs	r6, r4, lsl ip
    90d4:	82090000 	andhi	r0, r9, #0
    90d8:	00000183 	andeq	r0, r0, r3, lsl #3
    90dc:	22610c18 	rsbcs	r0, r1, #24, 24	; 0x1800
    90e0:	83090000 	movwhi	r0, #36864	; 0x9000
    90e4:	0000018e 	andeq	r0, r0, lr, lsl #3
    90e8:	23b20c1c 			; <UNDEFINED> instruction: 0x23b20c1c
    90ec:	84090000 	strhi	r0, [r9], #-0
    90f0:	000001be 			; <UNDEFINED> instruction: 0x000001be
    90f4:	21e90c20 	mvncs	r0, r0, lsr #24
    90f8:	85090000 	strhi	r0, [r9, #-0]
    90fc:	000001e9 	andeq	r0, r0, r9, ror #3
    9100:	22040c24 	andcs	r0, r4, #36, 24	; 0x2400
    9104:	86090000 	strhi	r0, [r9], -r0
    9108:	000001f4 	strdeq	r0, [r0], -r4
    910c:	241f0c28 	ldrcs	r0, [pc], #-3112	; 9114 <__exidx_end+0x6490>
    9110:	87090000 	strhi	r0, [r9, -r0]
    9114:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9118:	219b0c2c 	orrscs	r0, fp, ip, lsr #24
    911c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    9120:	00000215 	andeq	r0, r0, r5, lsl r2
    9124:	240d0c30 	strcs	r0, [sp], #-3120	; 0xfffff3d0
    9128:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    912c:	00000231 	andeq	r0, r0, r1, lsr r2
    9130:	224e0c34 	subcs	r0, lr, #52, 24	; 0x3400
    9134:	8a090000 	bhi	24913c <__ccfg+0x229194>
    9138:	0000020a 	andeq	r0, r0, sl, lsl #4
    913c:	22c20c38 	sbccs	r0, r2, #56, 24	; 0x3800
    9140:	8b090000 	blhi	249148 <__ccfg+0x2291a0>
    9144:	0000023c 	andeq	r0, r0, ip, lsr r2
    9148:	23c80c3c 	biccs	r0, r8, #60, 24	; 0x3c00
    914c:	8c090000 	stchi	0, cr0, [r9], {-0}
    9150:	00000247 	andeq	r0, r0, r7, asr #4
    9154:	21c30c40 	biccs	r0, r3, r0, asr #24
    9158:	8d090000 	stchi	0, cr0, [r9, #-0]
    915c:	00000252 	andeq	r0, r0, r2, asr r2
    9160:	201f0c44 	andscs	r0, pc, r4, asr #24
    9164:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    9168:	0000025d 	andeq	r0, r0, sp, asr r2
    916c:	23020048 	movwcs	r0, #8264	; 0x2048
    9170:	09000023 	stmdbeq	r0, {r0, r1, r5}
    9174:	0002688f 	andeq	r6, r2, pc, lsl #17
    9178:	01080b00 	tsteq	r8, r0, lsl #22
    917c:	0003994e 	andeq	r9, r3, lr, asr #18
    9180:	23660c00 	cmncs	r6, #0, 24
    9184:	4f010000 	svcmi	0x00010000
    9188:	000000ce 	andeq	r0, r0, lr, asr #1
    918c:	24330c00 	ldrtcs	r0, [r3], #-3072	; 0xfffff400
    9190:	50010000 	andpl	r0, r1, r0
    9194:	000000b8 	strheq	r0, [r0], -r8
    9198:	21f20c04 	mvnscs	r0, r4, lsl #24
    919c:	51010000 	mrspl	r0, (UNDEF: 1)
    91a0:	000000ad 	andeq	r0, r0, sp, lsr #1
    91a4:	21310c06 	teqcs	r1, r6, lsl #24
    91a8:	52010000 	andpl	r0, r1, #0
    91ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    91b0:	5f020007 	svcpl	0x00020007
    91b4:	01000024 	tsteq	r0, r4, lsr #32
    91b8:	00036053 	andeq	r6, r3, r3, asr r0
    91bc:	05300d00 	ldreq	r0, [r0, #-3328]!	; 0xfffff300
    91c0:	dc020000 	stcle	0, cr0, [r2], {-0}
    91c4:	03be0301 			; <UNDEFINED> instruction: 0x03be0301
    91c8:	ea0e0000 	b	3891d0 <__ccfg+0x369228>
    91cc:	02000004 	andeq	r0, r0, #4
    91d0:	00ce01dc 	ldrdeq	r0, [lr], #28
    91d4:	0f000000 	svceq	0x00000000
    91d8:	00000545 	andeq	r0, r0, r5, asr #10
    91dc:	ce022c02 	cdpgt	12, 0, cr2, cr2, cr2, {0}
    91e0:	03000000 	movweq	r0, #0
    91e4:	00064f10 	andeq	r4, r6, r0, lsl pc
    91e8:	022a0400 	eoreq	r0, sl, #0, 8
    91ec:	1de41103 	stfnee	f1, [r4, #12]!
    91f0:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    91f4:	000000c3 	andeq	r0, r0, r3, asr #1
    91f8:	0003fb03 	andeq	pc, r3, r3, lsl #22
    91fc:	1b341200 	blne	d0da04 <__ccfg+0xceda5c>
    9200:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    9204:	000000ce 	andeq	r0, r0, lr, asr #1
    9208:	001e3d13 	andseq	r3, lr, r3, lsl sp
    920c:	c3ef0500 	mvngt	r0, #0, 10
    9210:	00000000 	andeq	r0, r0, r0
    9214:	0021520d 	eoreq	r5, r1, sp, lsl #4
    9218:	025c0400 	subseq	r0, ip, #0, 8
    921c:	00041503 	andeq	r1, r4, r3, lsl #10
    9220:	21200e00 			; <UNDEFINED> instruction: 0x21200e00
    9224:	5c040000 	stcpl	0, cr0, [r4], {-0}
    9228:	0000ce02 	andeq	ip, r0, r2, lsl #28
    922c:	37100000 	ldrcc	r0, [r0, -r0]
    9230:	03000023 	movweq	r0, #35	; 0x23
    9234:	0f030140 	svceq	0x00030140
    9238:	000022f3 	strdeq	r2, [r0], -r3
    923c:	2b023e04 	blcs	98a54 <__ccfg+0x78aac>
    9240:	03000004 	movweq	r0, #4
    9244:	b8020103 	stmdalt	r2, {r0, r1, r8}
    9248:	1400000b 	strne	r0, [r0], #-11
    924c:	0000237b 	andeq	r2, r0, fp, ror r3
    9250:	00009e0a 	andeq	r9, r0, sl, lsl #28
    9254:	00f40000 	rscseq	r0, r4, r0
    9258:	9c010000 	stcls	0, cr0, [r1], {-0}
    925c:	000005cd 	andeq	r0, r0, sp, asr #11
    9260:	0021e115 	eoreq	lr, r1, r5, lsl r1
    9264:	ce7b0100 	rpwgte	f0, f3, f0
    9268:	77000000 	strvc	r0, [r0, -r0]
    926c:	16000038 			; <UNDEFINED> instruction: 0x16000038
    9270:	00002138 	andeq	r2, r0, r8, lsr r1
    9274:	00ce7c01 	sbceq	r7, lr, r1, lsl #24
    9278:	07ff0000 	ldrbeq	r0, [pc, r0]!
    927c:	0003a417 	andeq	sl, r3, r7, lsl r4
    9280:	00000000 	andeq	r0, r0, r0
    9284:	000ef000 	andeq	pc, lr, r0
    9288:	7d810100 	stfvcs	f0, [r1]
    928c:	18000004 	stmdane	r0, {r2}
    9290:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    9294:	be190001 	cdplt	0, 1, cr0, cr9, cr1, {0}
    9298:	00000003 	andeq	r0, r0, r3
    929c:	04000000 	streq	r0, [r0], #-0
    92a0:	01000000 	mrseq	r0, (UNDEF: 0)
    92a4:	04151a82 	ldreq	r1, [r5], #-2690	; 0xfffff57e
    92a8:	00000000 	andeq	r0, r0, r0
    92ac:	00080000 	andeq	r0, r8, r0
    92b0:	a1010000 	mrsge	r0, (UNDEF: 1)
    92b4:	000004a9 	andeq	r0, r0, r9, lsr #9
    92b8:	0000001b 	andeq	r0, r0, fp, lsl r0
    92bc:	0008de00 	andeq	sp, r8, r0, lsl #28
    92c0:	cb190000 	blgt	6492c8 <__ccfg+0x629320>
    92c4:	00000003 	andeq	r0, r0, r3
    92c8:	06000000 	streq	r0, [r0], -r0
    92cc:	01000000 	mrseq	r0, (UNDEF: 0)
    92d0:	041e19b1 	ldreq	r1, [lr], #-2481	; 0xfffff64f
    92d4:	00000000 	andeq	r0, r0, r0
    92d8:	00040000 	andeq	r0, r4, r0
    92dc:	b2010000 	andlt	r0, r1, #0
    92e0:	0003fb1a 	andeq	pc, r3, sl, lsl fp	; <UNPREDICTABLE>
    92e4:	00000000 	andeq	r0, r0, r0
    92e8:	00000a00 	andeq	r0, r0, r0, lsl #20
    92ec:	e1b80100 			; <UNDEFINED> instruction: 0xe1b80100
    92f0:	18000004 	stmdane	r0, {r2}
    92f4:	00000408 	andeq	r0, r0, r8, lsl #8
    92f8:	cb190011 	blgt	649344 <__ccfg+0x62939c>
    92fc:	00000003 	andeq	r0, r0, r3
    9300:	04000000 	streq	r0, [r0], #-0
    9304:	01000000 	mrseq	r0, (UNDEF: 0)
    9308:	041e19b9 	ldreq	r1, [lr], #-2489	; 0xfffff647
    930c:	00000000 	andeq	r0, r0, r0
    9310:	00020000 	andeq	r0, r2, r0
    9314:	ba010000 	blt	4931c <__ccfg+0x29374>
    9318:	0003cb19 	andeq	ip, r3, r9, lsl fp
    931c:	00000000 	andeq	r0, r0, r0
    9320:	00000600 	andeq	r0, r0, r0, lsl #12
    9324:	19cf0100 	stmibne	pc, {r8}^	; <UNPREDICTABLE>
    9328:	0000041e 	andeq	r0, r0, lr, lsl r4
    932c:	00000000 	andeq	r0, r0, r0
    9330:	00000002 	andeq	r0, r0, r2
    9334:	001cd001 	andseq	sp, ip, r1
    9338:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    933c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9340:	0a035001 	beq	dd34c <__ccfg+0xbd3a4>
    9344:	1c0007ff 	stcne	7, cr0, [r0], {255}	; 0xff
    9348:	00000000 	andeq	r0, r0, r0
    934c:	0000053f 	andeq	r0, r0, pc, lsr r5
    9350:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
    9354:	0007ff0a 	andeq	pc, r7, sl, lsl #30
    9358:	0000001e 	andeq	r0, r0, lr, lsl r0
    935c:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9360:	00055700 	andeq	r5, r5, r0, lsl #14
    9364:	51011d00 	tstpl	r1, r0, lsl #26
    9368:	011d3101 	tsteq	sp, r1, lsl #2
    936c:	00330150 	eorseq	r0, r3, r0, asr r1
    9370:	0000001e 	andeq	r0, r0, lr, lsl r0
    9374:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9378:	00056f00 	andeq	r6, r5, r0, lsl #30
    937c:	51011d00 	tstpl	r1, r0, lsl #26
    9380:	011d3301 	tsteq	sp, r1, lsl #6
    9384:	00340150 	eorseq	r0, r4, r0, asr r1
    9388:	0000001e 	andeq	r0, r0, lr, lsl r0
    938c:	00090500 	andeq	r0, r9, r0, lsl #10
    9390:	00058200 	andeq	r8, r5, r0, lsl #4
    9394:	50011d00 	andpl	r1, r1, r0, lsl #26
    9398:	1c003101 	stfnes	f3, [r0], {1}
    939c:	00000000 	andeq	r0, r0, r0
    93a0:	00000591 	muleq	r0, r1, r5
    93a4:	0150011d 	cmpeq	r0, sp, lsl r1
    93a8:	001c0037 	andseq	r0, ip, r7, lsr r0
    93ac:	a0000000 	andge	r0, r0, r0
    93b0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    93b4:	37015001 	strcc	r5, [r1, -r1]
    93b8:	00001c00 	andeq	r1, r0, r0, lsl #24
    93bc:	05b00000 	ldreq	r0, [r0, #0]!
    93c0:	011d0000 	tsteq	sp, r0
    93c4:	00760250 	rsbseq	r0, r6, r0, asr r2
    93c8:	00001c00 	andeq	r1, r0, r0, lsl #24
    93cc:	05c00000 	strbeq	r0, [r0]
    93d0:	011d0000 	tsteq	sp, r0
    93d4:	00760250 	rsbseq	r0, r6, r0, asr r2
    93d8:	00001f00 	andeq	r1, r0, r0, lsl #30
    93dc:	011d0000 	tsteq	sp, r0
    93e0:	00760250 	rsbseq	r0, r6, r0, asr r2
    93e4:	93200000 	nopls	{0}	; <UNPREDICTABLE>
    93e8:	0a000020 	beq	9470 <__exidx_end+0x67ec>
    93ec:	26340101 	ldrtcs	r0, [r4], -r1, lsl #2
    93f0:	02200000 	eoreq	r0, r0, #0
    93f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    93f8:	000007c8 	andeq	r0, r0, r8, asr #15
    93fc:	0022b421 	eoreq	fp, r2, r1, lsr #8
    9400:	ceda0100 	cdpgt	1, 13, cr0, cr10, cr0, {0}
    9404:	a2000000 	andge	r0, r0, #0
    9408:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    940c:	00002017 	andeq	r2, r0, r7, lsl r0
    9410:	00c3dc01 	sbceq	sp, r3, r1, lsl #24
    9414:	38ce0000 	stmiacc	lr, {}^	; <UNPREDICTABLE>
    9418:	ff150000 			; <UNDEFINED> instruction: 0xff150000
    941c:	01000022 	tsteq	r0, r2, lsr #32
    9420:	0000c3dd 	ldrdeq	ip, [r0], -sp
    9424:	0038ec00 	eorseq	lr, r8, r0, lsl #24
    9428:	22351500 	eorscs	r1, r5, #0, 10
    942c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    9430:	000000c3 	andeq	r0, r0, r3, asr #1
    9434:	00003946 	andeq	r3, r0, r6, asr #18
    9438:	00245115 	eoreq	r5, r4, r5, lsl r1
    943c:	c3df0100 	bicsgt	r0, pc, #0, 2
    9440:	64000000 	strvs	r0, [r0], #-0
    9444:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    9448:	00001fe8 	andeq	r1, r0, r8, ror #31
    944c:	00c3e001 	sbceq	lr, r3, r1
    9450:	39820000 	stmibcc	r2, {}	; <UNPREDICTABLE>
    9454:	3f220000 	svccc	0x00220000
    9458:	01000020 	tsteq	r0, r0, lsr #32
    945c:	0000c3e1 	andeq	ip, r0, r1, ror #7
    9460:	15530100 	ldrbne	r0, [r3, #-256]	; 0xffffff00
    9464:	00001a70 	andeq	r1, r0, r0, ror sl
    9468:	00cee201 	sbceq	lr, lr, r1, lsl #4
    946c:	39950000 	ldmibcc	r5, {}	; <UNPREDICTABLE>
    9470:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    9474:	01000023 	tsteq	r0, r3, lsr #32
    9478:	0000cee3 	andeq	ip, r0, r3, ror #29
    947c:	0039a800 	eorseq	sl, r9, r0, lsl #16
    9480:	20531500 	subscs	r1, r3, r0, lsl #10
    9484:	e4010000 	str	r0, [r1], #-0
    9488:	000000ce 	andeq	r0, r0, lr, asr #1
    948c:	000039c7 	andeq	r3, r0, r7, asr #19
    9490:	00696423 	rsbeq	r6, r9, r3, lsr #8
    9494:	00cee501 	sbceq	lr, lr, r1, lsl #10
    9498:	39da0000 	ldmibcc	sl, {}^	; <UNPREDICTABLE>
    949c:	64230000 	strtvs	r0, [r3], #-0
    94a0:	01006969 	tsteq	r0, r9, ror #18
    94a4:	0000cee6 	andeq	ip, r0, r6, ror #29
    94a8:	003a1000 	eorseq	r1, sl, r0
    94ac:	69742300 	ldmdbvs	r4!, {r8, r9, sp}^
    94b0:	cee70100 	cdpgt	1, 14, cr0, cr7, cr0, {0}
    94b4:	46000000 	strmi	r0, [r0], -r0
    94b8:	2300003a 	movwcs	r0, #58	; 0x3a
    94bc:	01006463 	tsteq	r0, r3, ror #8
    94c0:	0000cee8 	andeq	ip, r0, r8, ror #29
    94c4:	003ab600 	eorseq	fp, sl, r0, lsl #12
    94c8:	6c632300 	stclvs	3, cr2, [r3], #-0
    94cc:	cee90100 	cdpgt	1, 14, cr0, cr9, cr0, {0}
    94d0:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    94d4:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    94d8:	00002064 	andeq	r2, r0, r4, rrx
    94dc:	00ceea01 	sbceq	lr, lr, r1, lsl #20
    94e0:	3adc0000 	bcc	ff7094e8 <_estack+0xdf7044e8>
    94e4:	6b240000 	blvs	9094ec <__ccfg+0x8e9544>
    94e8:	ceeb0100 	cdpgt	1, 14, cr0, cr11, cr0, {0}
    94ec:	13000000 	movwne	r0, #0
    94f0:	000021bb 			; <UNDEFINED> instruction: 0x000021bb
    94f4:	00ceec01 	sbceq	lr, lr, r1, lsl #24
    94f8:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
    94fc:	01000021 	tsteq	r0, r1, lsr #32
    9500:	0000ceed 	andeq	ip, r0, sp, ror #29
    9504:	003afa00 	eorseq	pc, sl, r0, lsl #20
    9508:	212c1500 			; <UNDEFINED> instruction: 0x212c1500
    950c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    9510:	000000ce 	andeq	r0, r0, lr, asr #1
    9514:	00003b23 	andeq	r3, r0, r3, lsr #22
    9518:	00216315 	eoreq	r6, r1, r5, lsl r3
    951c:	ceef0100 	cdpgt	1, 14, cr0, cr15, cr0, {0}
    9520:	42000000 	andmi	r0, r0, #0
    9524:	1500003b 	strne	r0, [r0, #-59]	; 0xffffffc5
    9528:	000023bb 			; <UNDEFINED> instruction: 0x000023bb
    952c:	07c8f001 	strbeq	pc, [r8, r1]	; <UNPREDICTABLE>
    9530:	3b860000 	blcc	fe189538 <_estack+0xde184538>
    9534:	62250000 	eorvs	r0, r5, #0
    9538:	12000026 	andne	r0, r0, #38	; 0x26
    953c:	3b000000 	blcc	9544 <__exidx_end+0x68c0>
    9540:	26000007 	strcs	r0, [r0], -r7
    9544:	0000230b 	andeq	r2, r0, fp, lsl #6
    9548:	c3010a01 	movwgt	r0, #6657	; 0x1a01
    954c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    9550:	0000003b 	andeq	r0, r0, fp, lsr r0
    9554:	0003d427 	andeq	sp, r3, r7, lsr #8
    9558:	00268800 	eoreq	r8, r6, r0, lsl #16
    955c:	00000600 	andeq	r0, r0, r0, lsl #12
    9560:	01110100 	tsteq	r1, r0, lsl #2
    9564:	00000768 	andeq	r0, r0, r8, ror #14
    9568:	0003e428 	andeq	lr, r3, r8, lsr #8
    956c:	26882900 	strcs	r2, [r8], r0, lsl #18
    9570:	00060000 	andeq	r0, r6, r0
    9574:	ef2a0000 	svc	0x002a0000
    9578:	b1000003 	tstlt	r0, r3
    957c:	0000003b 	andeq	r0, r0, fp, lsr r0
    9580:	03d42700 	bicseq	r2, r4, #0, 14
    9584:	26a00000 	strtcs	r0, [r0], r0
    9588:	00060000 	andeq	r0, r6, r0
    958c:	1b010000 	blne	49594 <__ccfg+0x295ec>
    9590:	00079501 	andeq	r9, r7, r1, lsl #10
    9594:	03e42800 	mvneq	r2, #0, 16
    9598:	a0290000 	eorge	r0, r9, r0
    959c:	06000026 	streq	r0, [r0], -r6, lsr #32
    95a0:	2a000000 	bcs	95a8 <__exidx_end+0x6924>
    95a4:	000003ef 	andeq	r0, r0, pc, ror #7
    95a8:	00003bc4 	andeq	r3, r0, r4, asr #23
    95ac:	d42b0000 	strtle	r0, [fp], #-0
    95b0:	aa000003 	bge	95c4 <__exidx_end+0x6940>
    95b4:	08000026 	stmdaeq	r0, {r1, r2, r5}
    95b8:	0100000f 	tsteq	r0, pc
    95bc:	07be011f 			; <UNDEFINED> instruction: 0x07be011f
    95c0:	e4280000 	strt	r0, [r8], #-0
    95c4:	2c000003 	stccs	0, cr0, [r0], {3}
    95c8:	00000f08 	andeq	r0, r0, r8, lsl #30
    95cc:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    95d0:	003bd700 	eorseq	sp, fp, r0, lsl #14
    95d4:	1b000000 	blne	95dc <__exidx_end+0x6958>
    95d8:	00002654 	andeq	r2, r0, r4, asr r6
    95dc:	0000091b 	andeq	r0, r0, fp, lsl r9
    95e0:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    95e4:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    95e8:	000000ce 	andeq	r0, r0, lr, asr #1
    95ec:	00206920 	eoreq	r6, r0, r0, lsr #18
    95f0:	01170a00 	tsteq	r7, r0, lsl #20
    95f4:	00002854 	andeq	r2, r0, r4, asr r8
    95f8:	00000060 	andeq	r0, r0, r0, rrx
    95fc:	08339c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}
    9600:	17260000 	strne	r0, [r6, -r0]!
    9604:	01000020 	tsteq	r0, r0, lsr #32
    9608:	00c301b8 	strheq	r0, [r3], #24
    960c:	3bea0000 	blcc	ffa89614 <_estack+0xdfa84614>
    9610:	0e260000 	cdpeq	0, 2, cr0, cr6, cr0, {0}
    9614:	01000022 	tsteq	r0, r2, lsr #32
    9618:	00ce01b9 	strheq	r0, [lr], #25
    961c:	3c150000 	ldccc	0, cr0, [r5], {-0}
    9620:	d7260000 	strle	r0, [r6, -r0]!
    9624:	01000021 	tsteq	r0, r1, lsr #32
    9628:	00ce01ba 	strheq	r0, [lr], #26
    962c:	3c280000 	stccc	0, cr0, [r8], #-0
    9630:	68260000 	stmdavs	r6!, {}	; <UNPREDICTABLE>
    9634:	01000021 	tsteq	r0, r1, lsr #32
    9638:	00ce01bb 	strheq	r0, [lr], #27
    963c:	3c4f0000 	marcc	acc0, r0, pc
    9640:	621b0000 	andsvs	r0, fp, #0
    9644:	1b000028 	blne	96ec <__exidx_end+0x6a68>
    9648:	00000009 	andeq	r0, r0, r9
    964c:	00248320 	eoreq	r8, r4, r0, lsr #6
    9650:	01290a00 			; <UNDEFINED> instruction: 0x01290a00
    9654:	00000000 	andeq	r0, r0, r0
    9658:	00000078 	andeq	r0, r0, r8, ror r0
    965c:	088a9c01 	stmeq	sl, {r0, sl, fp, ip, pc}
    9660:	85260000 	strhi	r0, [r6, #-0]!
    9664:	01000022 	tsteq	r0, r2, lsr #32
    9668:	00ce01e7 	sbceq	r0, lr, r7, ror #3
    966c:	3c780000 	ldclcc	0, cr0, [r8], #-0
    9670:	44260000 	strtmi	r0, [r6], #-0
    9674:	01000024 	tsteq	r0, r4, lsr #32
    9678:	00ce01e8 	sbceq	r0, lr, r8, ror #3
    967c:	3c8b0000 	stccc	0, cr0, [fp], {0}
    9680:	70260000 	eorvc	r0, r6, r0
    9684:	0100001a 	tsteq	r0, sl, lsl r0
    9688:	00ce01e9 	sbceq	r0, lr, r9, ror #3
    968c:	3c9e0000 	ldccc	0, cr0, [lr], {0}
    9690:	56260000 	strtpl	r0, [r6], -r0
    9694:	01000023 	tsteq	r0, r3, lsr #32
    9698:	00ce01ea 	sbceq	r0, lr, sl, ror #3
    969c:	3cb10000 	ldccc	0, cr0, [r1]
    96a0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    96a4:	00002104 	andeq	r2, r0, r4, lsl #2
    96a8:	ce01420a 	cdpgt	2, 0, cr4, cr1, cr10, {0}
    96ac:	b4000000 	strlt	r0, [r0], #-0
    96b0:	18000028 	stmdane	r0, {r3, r5}
    96b4:	01000000 	mrseq	r0, (UNDEF: 0)
    96b8:	24cd229c 	strbcs	r2, [sp], #668	; 0x29c
    96bc:	55010000 	strpl	r0, [r1, #-0]
    96c0:	00000399 	muleq	r0, r9, r3
    96c4:	004c0305 	subeq	r0, ip, r5, lsl #6
    96c8:	ce2f2000 	cdpgt	0, 2, cr2, cr15, cr0, {0}
    96cc:	c1000000 	mrsgt	r0, (UNDEF: 0)
    96d0:	30000008 	andcc	r0, r0, r8
    96d4:	000008c1 	andeq	r0, r0, r1, asr #17
    96d8:	0403000c 	streq	r0, [r3], #-12
    96dc:	00187507 	andseq	r7, r8, r7, lsl #10
    96e0:	23132200 	tstcs	r3, #0, 4
    96e4:	61010000 	mrsvs	r0, (UNDEF: 1)
    96e8:	000008d9 	ldrdeq	r0, [r0], -r9
    96ec:	00000305 	andeq	r0, r0, r5, lsl #6
    96f0:	b12d0000 			; <UNDEFINED> instruction: 0xb12d0000
    96f4:	31000008 	tstcc	r0, r8
    96f8:	000020db 	ldrdeq	r2, [r0], -fp
    96fc:	08ef9909 	stmiaeq	pc!, {r0, r3, r8, fp, ip, pc}^	; <UNPREDICTABLE>
    9700:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    9704:	00000000 	andeq	r0, r0, r0
    9708:	001b0d31 	andseq	r0, fp, r1, lsr sp
    970c:	05f90300 	ldrbeq	r0, [r9, #768]!	; 0x300
    9710:	08000009 	stmdaeq	r0, {r0, r3}
    9714:	000000ce 	andeq	r0, r0, lr, asr #1
    9718:	0000ce08 	andeq	ip, r0, r8, lsl #28
    971c:	a8320000 	ldmdage	r2!, {}	; <UNPREDICTABLE>
    9720:	0300001e 	movweq	r0, #30
    9724:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    9728:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    972c:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9730:	00000000 	andeq	r0, r0, r0
    9734:	00161733 	andseq	r1, r6, r3, lsr r7
    9738:	c3aa0b00 			; <UNDEFINED> instruction: 0xc3aa0b00
    973c:	00000000 	andeq	r0, r0, r0
    9740:	000003cc 	andeq	r0, r0, ip, asr #7
    9744:	2cda0004 	ldclcs	0, cr0, [sl], {4}
    9748:	01040000 	mrseq	r0, (UNDEF: 4)
    974c:	00001650 	andeq	r1, r0, r0, asr r6
    9750:	0027d601 	eoreq	sp, r7, r1, lsl #12
    9754:	00174500 	andseq	r4, r7, r0, lsl #10
    9758:	000f8000 	andeq	r8, pc, r0
    975c:	00000000 	andeq	r0, r0, r0
    9760:	00660e00 	rsbeq	r0, r6, r0, lsl #28
    9764:	06010200 	streq	r0, [r1], -r0, lsl #4
    9768:	000003a3 	andeq	r0, r0, r3, lsr #7
    976c:	a1080102 	tstge	r8, r2, lsl #2
    9770:	02000003 	andeq	r0, r0, #3
    9774:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    9778:	02020000 	andeq	r0, r2, #0
    977c:	00027107 	andeq	r7, r2, r7, lsl #2
    9780:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9784:	0000009d 	muleq	r0, sp, r0
    9788:	0017b103 	andseq	fp, r7, r3, lsl #2
    978c:	53410300 	movtpl	r0, #4864	; 0x1300
    9790:	02000000 	andeq	r0, r0, #0
    9794:	00720704 	rsbseq	r0, r2, r4, lsl #14
    9798:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    979c:	00009805 	andeq	r9, r0, r5, lsl #16
    97a0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    97a4:	0000006d 	andeq	r0, r0, sp, rrx
    97a8:	69050404 	stmdbvs	r5, {r2, sl}
    97ac:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    97b0:	00770704 	rsbseq	r0, r7, r4, lsl #14
    97b4:	b3030000 	movwlt	r0, #12288	; 0x3000
    97b8:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    97bc:	00004820 	andeq	r4, r0, r0, lsr #16
    97c0:	02010500 	andeq	r0, r1, #0, 10
    97c4:	0000a263 	andeq	sl, r0, r3, ror #4
    97c8:	27100600 	ldrcs	r0, [r0, -r0, lsl #12]
    97cc:	06000000 	streq	r0, [r0], -r0
    97d0:	00002750 	andeq	r2, r0, r0, asr r7
    97d4:	26c00602 	strbcs	r0, [r0], r2, lsl #12
    97d8:	06040000 	streq	r0, [r4], -r0
    97dc:	00002500 	andeq	r2, r0, r0, lsl #10
    97e0:	ac030008 	stcge	0, cr0, [r3], {8}
    97e4:	02000026 	andeq	r0, r0, #38	; 0x26
    97e8:	00008168 	andeq	r8, r0, r8, ror #2
    97ec:	02010500 	andeq	r0, r1, #0, 10
    97f0:	0000daa5 	andeq	sp, r0, r5, lsr #21
    97f4:	27c60600 	strbcs	r0, [r6, r0, lsl #12]
    97f8:	067f0000 	ldrbteq	r0, [pc], -r0
    97fc:	00002518 	andeq	r2, r0, r8, lsl r5
    9800:	28770600 	ldmdacs	r7!, {r9, sl}^
    9804:	06010000 	streq	r0, [r1], -r0
    9808:	00002704 	andeq	r2, r0, r4, lsl #14
    980c:	28690602 	stmdacs	r9!, {r1, r9, sl}^
    9810:	06030000 	streq	r0, [r3], -r0
    9814:	000025fd 	strdeq	r2, [r0], -sp
    9818:	83030004 	movwhi	r0, #12292	; 0x3004
    981c:	02000028 	andeq	r0, r0, #40	; 0x28
    9820:	0000adac 	andeq	sl, r0, ip, lsr #27
    9824:	02010700 	andeq	r0, r1, #0, 14
    9828:	0125013d 			; <UNDEFINED> instruction: 0x0125013d
    982c:	da060000 	ble	189834 <__ccfg+0x16988c>
    9830:	7f000026 	svcvc	0x00000026
    9834:	0025c806 	eoreq	ip, r5, r6, lsl #16
    9838:	24060000 	strcs	r0, [r6], #-0
    983c:	01000026 	tsteq	r0, r6, lsr #32
    9840:	00266006 	eoreq	r6, r6, r6
    9844:	ab060200 	blge	18a04c <__ccfg+0x16a0a4>
    9848:	03000027 	movweq	r0, #39	; 0x27
    984c:	00252406 	eoreq	r2, r5, r6, lsl #8
    9850:	ec060400 	cfstrs	mvf0, [r6], {-0}
    9854:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    9858:	00278506 	eoreq	r8, r7, r6, lsl #10
    985c:	98060600 	stmdals	r6, {r9, sl}
    9860:	07000027 	streq	r0, [r0, -r7, lsr #32]
    9864:	25b00800 	ldrcs	r0, [r0, #2048]!	; 0x800
    9868:	47020000 	strmi	r0, [r2, -r0]
    986c:	0000e501 	andeq	lr, r0, r1, lsl #10
    9870:	02010700 	andeq	r0, r1, #0, 14
    9874:	015f0159 	cmpeq	pc, r9, asr r1	; <UNPREDICTABLE>
    9878:	51060000 	mrspl	r0, (UNDEF: 6)
    987c:	7f000026 	svcvc	0x00000026
    9880:	00267a06 	eoreq	r7, r6, r6, lsl #20
    9884:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    9888:	01000026 	tsteq	r0, r6, lsr #32
    988c:	00253d06 	eoreq	r3, r5, r6, lsl #26
    9890:	60060200 	andvs	r0, r6, r0, lsl #4
    9894:	03000027 	movweq	r0, #39	; 0x27
    9898:	00261306 	eoreq	r1, r6, r6, lsl #6
    989c:	08000400 	stmdaeq	r0, {sl}
    98a0:	000025d9 	ldrdeq	r2, [r0], -r9
    98a4:	31016002 	tstcc	r1, r2
    98a8:	07000001 	streq	r0, [r0, -r1]
    98ac:	01b80201 			; <UNDEFINED> instruction: 0x01b80201
    98b0:	00000199 	muleq	r0, r9, r1
    98b4:	00269006 	eoreq	r9, r6, r6
    98b8:	bc067f00 	stclt	15, cr7, [r6], {-0}
    98bc:	0a000027 	beq	9960 <__exidx_end+0x6cdc>
    98c0:	00272106 	eoreq	r2, r7, r6, lsl #2
    98c4:	46061400 	strmi	r1, [r6], -r0, lsl #8
    98c8:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    98cc:	0026ec06 	eoreq	lr, r6, r6, lsl #24
    98d0:	72061600 	andvc	r1, r6, #0, 12
    98d4:	17000027 	strne	r0, [r0, -r7, lsr #32]
    98d8:	25bb0800 	ldrcs	r0, [fp, #2048]!	; 0x800
    98dc:	bf020000 	svclt	0x00020000
    98e0:	00016b01 	andeq	r6, r1, r1, lsl #22
    98e4:	28020900 	stmdacs	r2, {r8, fp}
    98e8:	07020000 	streq	r0, [r2, -r0]
    98ec:	00007601 	andeq	r7, r0, r1, lsl #12
    98f0:	4f0a0300 	svcmi	0x000a0300
    98f4:	02000025 	andeq	r0, r0, #37	; 0x25
    98f8:	015f016a 	cmpeq	pc, sl, ror #2
    98fc:	da010000 	ble	49904 <__ccfg+0x2995c>
    9900:	0b000001 	bleq	990c <__exidx_end+0x6c88>
    9904:	00002688 	andeq	r2, r0, r8, lsl #13
    9908:	015f6801 	cmpeq	pc, r1, lsl #16
    990c:	350b0000 	strcc	r0, [fp, #-0]
    9910:	01000025 	tsteq	r0, r5, lsr #32
    9914:	00007669 	andeq	r7, r0, r9, ror #12
    9918:	b0090000 	andlt	r0, r9, r0
    991c:	02000028 	andeq	r0, r0, #40	; 0x28
    9920:	00760132 	rsbseq	r0, r6, r2, lsr r1
    9924:	0c030000 	stceq	0, cr0, [r3], {-0}
    9928:	00002842 	andeq	r2, r0, r2, asr #16
    992c:	00a27202 	adceq	r7, r2, r2, lsl #4
    9930:	00000000 	andeq	r0, r0, r0
    9934:	00100000 	andseq	r0, r0, r0
    9938:	9c010000 	stcls	0, cr0, [r1], {-0}
    993c:	00256c0d 	eoreq	r6, r5, sp, lsl #24
    9940:	dab60200 	ble	fed8a148 <_estack+0xded85148>
    9944:	00000000 	andeq	r0, r0, r0
    9948:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    994c:	01000000 	mrseq	r0, (UNDEF: 0)
    9950:	0002259c 	muleq	r2, ip, r5
    9954:	25a70e00 	strcs	r0, [r7, #3584]!	; 0xe00
    9958:	52010000 	andpl	r0, r1, #0
    995c:	000000da 	ldrdeq	r0, [r0], -sl
    9960:	00003cc4 	andeq	r3, r0, r4, asr #25
    9964:	01b20f00 			; <UNDEFINED> instruction: 0x01b20f00
    9968:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    996c:	004c0000 	subeq	r0, ip, r0
    9970:	9c010000 	stcls	0, cr0, [r1], {-0}
    9974:	0000026e 	andeq	r0, r0, lr, ror #4
    9978:	0001c310 	andeq	ip, r1, r0, lsl r3
    997c:	003cec00 	eorseq	lr, ip, r0, lsl #24
    9980:	01ce1000 	biceq	r1, lr, r0
    9984:	3d0c0000 	stccc	0, cr0, [ip, #-0]
    9988:	dc110000 	ldcle	0, cr0, [r1], {-0}
    998c:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    9990:	12000000 	andne	r0, r0, #0
    9994:	000001c3 	andeq	r0, r0, r3, asr #3
    9998:	0001ce12 	andeq	ip, r1, r2, lsl lr
    999c:	01a51300 			; <UNDEFINED> instruction: 0x01a51300
    99a0:	28dc0000 	ldmcs	ip, {}^	; <UNPREDICTABLE>
    99a4:	00040000 	andeq	r0, r4, r0
    99a8:	70010000 	andvc	r0, r1, r0
    99ac:	2b140000 	blcs	5099b4 <__ccfg+0x4e9a0c>
    99b0:	02000027 	andeq	r0, r0, #39	; 0x27
    99b4:	01250151 			; <UNDEFINED> instruction: 0x01250151
    99b8:	00000000 	andeq	r0, r0, r0
    99bc:	00300000 	eorseq	r0, r0, r0
    99c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    99c4:	000002ca 	andeq	r0, r0, sl, asr #5
    99c8:	00277c0e 	eoreq	r7, r7, lr, lsl #24
    99cc:	25850100 	strcs	r0, [r5, #256]	; 0x100
    99d0:	40000001 	andmi	r0, r0, r1
    99d4:	0b00003d 	bleq	9ad0 <__exidx_end+0x6e4c>
    99d8:	000027f6 	strdeq	r2, [r0], -r6
    99dc:	00768601 	rsbseq	r8, r6, r1, lsl #12
    99e0:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
    99e4:	01000026 	tsteq	r0, r6, lsr #32
    99e8:	00007687 	andeq	r7, r0, r7, lsl #13
    99ec:	003d6000 	eorseq	r6, sp, r0
    99f0:	01da1300 	bicseq	r1, sl, r0, lsl #6
    99f4:	00000000 	andeq	r0, r0, r0
    99f8:	00040000 	andeq	r0, r4, r0
    99fc:	86010000 	strhi	r0, [r1], -r0
    9a00:	00000015 	andeq	r0, r0, r5, lsl r0
    9a04:	0001b200 	andeq	fp, r1, r0, lsl #4
    9a08:	20160000 	andscs	r0, r6, r0
    9a0c:	02000028 	andeq	r0, r0, #40	; 0x28
    9a10:	00760119 	rsbseq	r0, r6, r9, lsl r1
    9a14:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    9a18:	17000002 	strne	r0, [r0, -r2]
    9a1c:	0000260a 	andeq	r2, r0, sl, lsl #12
    9a20:	76011b02 	strvc	r1, [r1], -r2, lsl #22
    9a24:	00000000 	andeq	r0, r0, r0
    9a28:	00258a14 	eoreq	r8, r5, r4, lsl sl
    9a2c:	01c90200 	biceq	r0, r9, r0, lsl #4
    9a30:	00000199 	muleq	r0, r9, r1
    9a34:	00002918 	andeq	r2, r0, r8, lsl r9
    9a38:	0000006c 	andeq	r0, r0, ip, rrx
    9a3c:	03659c01 	cmneq	r5, #256	; 0x100
    9a40:	e60e0000 	str	r0, [lr], -r0
    9a44:	01000025 	tsteq	r0, r5, lsr #32
    9a48:	000199a8 	andeq	r9, r1, r8, lsr #19
    9a4c:	003d7300 	eorseq	r7, sp, r0, lsl #6
    9a50:	26710b00 	ldrbtcs	r0, [r1], -r0, lsl #22
    9a54:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9a58:	00000076 	andeq	r0, r0, r6, ror r0
    9a5c:	00283718 	eoreq	r3, r8, r8, lsl r7
    9a60:	76aa0100 	strtvc	r0, [sl], r0, lsl #2
    9a64:	01000000 	mrseq	r0, (UNDEF: 0)
    9a68:	01a51954 			; <UNDEFINED> instruction: 0x01a51954
    9a6c:	291a0000 	ldmdbcs	sl, {}	; <UNPREDICTABLE>
    9a70:	0f500000 	svceq	0x00500000
    9a74:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9a78:	0002ca1a 	andeq	ip, r2, sl, lsl sl
    9a7c:	00291e00 	eoreq	r1, r9, r0, lsl #28
    9a80:	000f6800 	andeq	r6, pc, r0, lsl #16
    9a84:	5baa0100 	blpl	fea89e8c <_estack+0xdea84e8c>
    9a88:	1b000003 	blne	9a9c <__exidx_end+0x6e18>
    9a8c:	00000f68 	andeq	r0, r0, r8, ror #30
    9a90:	0002db10 	andeq	sp, r2, r0, lsl fp
    9a94:	003dd000 	eorseq	sp, sp, r0
    9a98:	15000000 	strne	r0, [r0, #-0]
    9a9c:	00002932 	andeq	r2, r0, r2, lsr r9
    9aa0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9aa4:	26350900 	ldrtcs	r0, [r5], -r0, lsl #18
    9aa8:	83020000 	movwhi	r0, #8192	; 0x2000
    9aac:	00037201 	andeq	r7, r3, r1, lsl #4
    9ab0:	01020300 	mrseq	r0, LR_svc
    9ab4:	000bb802 	andeq	fp, fp, r2, lsl #16
    9ab8:	28910900 	ldmcs	r1, {r8, fp}
    9abc:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
    9ac0:	00037201 	andeq	r7, r3, r1, lsl #4
    9ac4:	b91c0300 	ldmdblt	ip, {r8, r9}
    9ac8:	0200001a 	andeq	r0, r0, #26
    9acc:	29840243 	stmibcs	r4, {r0, r1, r6, r9}
    9ad0:	00160000 	andseq	r0, r6, r0
    9ad4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ad8:	0003651d 	andeq	r6, r3, sp, lsl r5
    9adc:	00298600 	eoreq	r8, r9, r0, lsl #12
    9ae0:	00000400 	andeq	r0, r0, r0, lsl #8
    9ae4:	b5e20100 	strblt	r0, [r2, #256]!	; 0x100
    9ae8:	15000003 	strne	r0, [r0, #-3]
    9aec:	0000298a 	andeq	r2, r0, sl, lsl #19
    9af0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9af4:	03791e00 	cmneq	r9, #0, 28
    9af8:	298e0000 	stmibcs	lr, {}	; <UNPREDICTABLE>
    9afc:	00040000 	andeq	r0, r4, r0
    9b00:	e3010000 	movw	r0, #4096	; 0x1000
    9b04:	00299215 	eoreq	r9, r9, r5, lsl r2
    9b08:	0002e800 	andeq	lr, r2, r0, lsl #16
    9b0c:	00000000 	andeq	r0, r0, r0
    9b10:	000005a7 	andeq	r0, r0, r7, lsr #11
    9b14:	2ea80004 	cdpcs	0, 10, cr0, cr8, cr4, {0}
    9b18:	01040000 	mrseq	r0, (UNDEF: 4)
    9b1c:	00001650 	andeq	r1, r0, r0, asr r6
    9b20:	00298801 	eoreq	r8, r9, r1, lsl #16
    9b24:	00174500 	andseq	r4, r7, r0, lsl #10
    9b28:	000fb800 	andeq	fp, pc, r0, lsl #16
    9b2c:	00000000 	andeq	r0, r0, r0
    9b30:	00683d00 	rsbeq	r3, r8, r0, lsl #26
    9b34:	06010200 	streq	r0, [r1], -r0, lsl #4
    9b38:	000003a3 	andeq	r0, r0, r3, lsr #7
    9b3c:	0021fa03 	eoreq	pc, r1, r3, lsl #20
    9b40:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    9b44:	02000000 	andeq	r0, r0, #0
    9b48:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    9b4c:	02020000 	andeq	r0, r2, #0
    9b50:	0003dd05 	andeq	sp, r3, r5, lsl #26
    9b54:	20e80300 	rsccs	r0, r8, r0, lsl #6
    9b58:	2b030000 	blcs	c9b60 <__ccfg+0xa9bb8>
    9b5c:	00000050 	andeq	r0, r0, r0, asr r0
    9b60:	71070202 	tstvc	r7, r2, lsl #4
    9b64:	02000002 	andeq	r0, r0, #2
    9b68:	009d0504 	addseq	r0, sp, r4, lsl #10
    9b6c:	b1030000 	mrslt	r0, (UNDEF: 3)
    9b70:	03000017 	movweq	r0, #23
    9b74:	00006941 	andeq	r6, r0, r1, asr #18
    9b78:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b7c:	00000072 	andeq	r0, r0, r2, ror r0
    9b80:	98050802 	stmdals	r5, {r1, fp}
    9b84:	02000000 	andeq	r0, r0, #0
    9b88:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    9b8c:	04040000 	streq	r0, [r4], #-0
    9b90:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    9b94:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b98:	00000077 	andeq	r0, r0, r7, ror r0
    9b9c:	0021fc03 	eoreq	pc, r1, r3, lsl #24
    9ba0:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    9ba4:	03000000 	movweq	r0, #0
    9ba8:	000020ea 	andeq	r2, r0, sl, ror #1
    9bac:	00451a04 	subeq	r1, r5, r4, lsl #20
    9bb0:	b3030000 	movwlt	r0, #12288	; 0x3000
    9bb4:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    9bb8:	00005e20 	andeq	r5, r0, r0, lsr #28
    9bbc:	29010500 	stmdbcs	r1, {r8, sl}
    9bc0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9bc4:	0000e603 	andeq	lr, r0, r3, lsl #12
    9bc8:	28e30600 	stmiacs	r3!, {r9, sl}^
    9bcc:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9bd0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9bd4:	00295406 	eoreq	r5, r9, r6, lsl #8
    9bd8:	a2890100 	addge	r0, r9, #0, 2
    9bdc:	06000000 	streq	r0, [r0], -r0
    9be0:	000029c4 	andeq	r2, r0, r4, asr #19
    9be4:	00a28901 	adceq	r8, r2, r1, lsl #18
    9be8:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    9bec:	01000029 	tsteq	r0, r9, lsr #32
    9bf0:	0000e68c 	andeq	lr, r0, ip, lsl #13
    9bf4:	01020000 	mrseq	r0, (UNDEF: 2)
    9bf8:	000bb802 	andeq	fp, fp, r2, lsl #16
    9bfc:	29620800 	stmdbcs	r2!, {fp}^
    9c00:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9c04:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c08:	00012a03 	andeq	r2, r1, r3, lsl #20
    9c0c:	28e30600 	stmiacs	r3!, {r9, sl}^
    9c10:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9c14:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c18:	0029c406 	eoreq	ip, r9, r6, lsl #8
    9c1c:	a2a90100 	adcge	r0, r9, #0, 2
    9c20:	07000000 	streq	r0, [r0, -r0]
    9c24:	000028fc 	strdeq	r2, [r0], -ip
    9c28:	00a2ab01 	adceq	sl, r2, r1, lsl #22
    9c2c:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    9c30:	01000029 	tsteq	r0, r9, lsr #32
    9c34:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    9c38:	ad090000 	stcge	0, cr0, [r9, #-0]
    9c3c:	9c000000 	stcls	0, cr0, [r0], {-0}
    9c40:	28000029 	stmdacs	r0, {r0, r3, r5}
    9c44:	01000000 	mrseq	r0, (UNDEF: 0)
    9c48:	0001719c 	muleq	r1, ip, r1
    9c4c:	00b90a00 	adcseq	r0, r9, r0, lsl #20
    9c50:	3de30000 	stclcc	0, cr0, [r3]
    9c54:	c40a0000 	strgt	r0, [sl], #-0
    9c58:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9c5c:	0b00003e 	bleq	9d5c <__exidx_end+0x70d8>
    9c60:	000000da 	ldrdeq	r0, [r0], -sl
    9c64:	00003e6d 	andeq	r3, r0, sp, ror #28
    9c68:	0000cf0c 	andeq	ip, r0, ip, lsl #30
    9c6c:	a60d0400 	strge	r0, [sp], -r0, lsl #8
    9c70:	94000029 	strls	r0, [r0], #-41	; 0xffffffd7
    9c74:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    9c78:	000029be 			; <UNDEFINED> instruction: 0x000029be
    9c7c:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    9c80:	1ceb0f00 	stclne	15, cr0, [fp]
    9c84:	ca010000 	bgt	49c8c <__ccfg+0x29ce4>
    9c88:	0029c401 	eoreq	ip, r9, r1, lsl #8
    9c8c:	00000800 	andeq	r0, r0, r0, lsl #16
    9c90:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    9c94:	10000001 	andne	r0, r0, r1
    9c98:	00000731 	andeq	r0, r0, r1, lsr r7
    9c9c:	00a24202 	adceq	r4, r2, r2, lsl #4
    9ca0:	3e930000 	cdpcc	0, 9, cr0, cr3, cr0, {0}
    9ca4:	c3100000 	tstgt	r0, #0
    9ca8:	02000028 	andeq	r0, r0, #40	; 0x28
    9cac:	0000a242 	andeq	sl, r0, r2, asr #4
    9cb0:	003eb400 	eorseq	fp, lr, r0, lsl #8
    9cb4:	295a1000 	ldmdbcs	sl, {ip}^
    9cb8:	43020000 	movwmi	r0, #8192	; 0x2000
    9cbc:	000000a2 	andeq	r0, r0, r2, lsr #1
    9cc0:	00003ed5 	ldrdeq	r3, [r0], -r5
    9cc4:	0029cc11 	eoreq	ip, r9, r1, lsl ip
    9cc8:	00012a00 	andeq	r2, r1, r0, lsl #20
    9ccc:	51011200 	mrspl	r1, R9_usr
    9cd0:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    9cd4:	07500112 	smmlaeq	r0, r2, r1, r0
    9cd8:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    9cdc:	00225101 	eoreq	r5, r2, r1, lsl #2
    9ce0:	29740f00 	ldmdbcs	r4!, {r8, r9, sl, fp}^
    9ce4:	df010000 	svcle	0x00010000
    9ce8:	00000001 	andeq	r0, r0, r1
    9cec:	00002200 	andeq	r2, r0, r0, lsl #4
    9cf0:	ea9c0100 	b	fe70a0f8 <_estack+0xde7050f8>
    9cf4:	10000002 	andne	r0, r0, r2
    9cf8:	00000731 	andeq	r0, r0, r1, lsr r7
    9cfc:	00a25702 	adceq	r5, r2, r2, lsl #14
    9d00:	3ef60000 	cdpcc	0, 15, cr0, cr6, cr0, {0}
    9d04:	c3100000 	tstgt	r0, #0
    9d08:	02000028 	andeq	r0, r0, #40	; 0x28
    9d0c:	0000a257 	andeq	sl, r0, r7, asr r2
    9d10:	003f1700 	eorseq	r1, pc, r0, lsl #14
    9d14:	29a31000 	stmibcs	r3!, {ip}
    9d18:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    9d1c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d20:	00003f38 	andeq	r3, r0, r8, lsr pc
    9d24:	00291d10 	eoreq	r1, r9, r0, lsl sp
    9d28:	a2580200 	subsge	r0, r8, #0, 4
    9d2c:	83000000 	movwhi	r0, #0
    9d30:	1300003f 	movwne	r0, #63	; 0x3f
    9d34:	000029ac 	andeq	r2, r0, ip, lsr #19
    9d38:	00a25a02 	adceq	r5, r2, r2, lsl #20
    9d3c:	3fa40000 	svccc	0x00a40000
    9d40:	28130000 	ldmdacs	r3, {}	; <UNPREDICTABLE>
    9d44:	02000029 	andeq	r0, r0, #41	; 0x29
    9d48:	0000a25b 	andeq	sl, r0, fp, asr r2
    9d4c:	00403800 	subeq	r3, r0, r0, lsl #16
    9d50:	00001100 	andeq	r1, r0, r0, lsl #2
    9d54:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    9d58:	01120000 	tsteq	r2, r0
    9d5c:	01f34551 	mvnseq	r4, r1, asr r5
    9d60:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    9d64:	01f35201 	mvnseq	r5, r1, lsl #4
    9d68:	30254052 	eorcc	r4, r5, r2, asr r0
    9d6c:	0001282e 	andeq	r2, r1, lr, lsr #16
    9d70:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
    9d74:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    9d78:	01f32540 	mvnseq	r2, r0, asr #10
    9d7c:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    9d80:	2e302540 	cfneg32cs	mvfx2, mvfx0
    9d84:	16000128 	strne	r0, [r0], -r8, lsr #2
    9d88:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    9d8c:	01f32540 	mvnseq	r2, r0, asr #10
    9d90:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    9d94:	13160001 	tstne	r6, #1
    9d98:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    9d9c:	00012829 	andeq	r2, r1, r9, lsr #16
    9da0:	12211316 	eorne	r1, r1, #1476395008	; 0x58000000
    9da4:	f3515001 	vhadd.u16	d21, d1, d1
    9da8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9dac:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9db0:	f3048023 	vhadd.u8	d8, d4, d19
    9db4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9db8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9dbc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dc0:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    9dc4:	13160001 	tstne	r6, #1
    9dc8:	f3048423 	vshl.u8	d8, d19, d4
    9dcc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9dd0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9dd4:	f3048023 	vhadd.u8	d8, d4, d19
    9dd8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9ddc:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9de0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9de4:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    9de8:	13160001 	tstne	r6, #1
    9dec:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9df0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9df4:	13160001 	tstne	r6, #1
    9df8:	3b0f0000 	blcc	3c9e00 <__ccfg+0x3a9e58>
    9dfc:	01000029 	tsteq	r0, r9, lsr #32
    9e00:	000001f6 	strdeq	r0, [r0], -r6
    9e04:	002e0000 	eoreq	r0, lr, r0
    9e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    9e0c:	0000041f 	andeq	r0, r0, pc, lsl r4
    9e10:	00073110 	andeq	r3, r7, r0, lsl r1
    9e14:	a2830200 	addge	r0, r3, #0, 4
    9e18:	84000000 	strhi	r0, [r0], #-0
    9e1c:	10000040 	andne	r0, r0, r0, asr #32
    9e20:	000028c3 	andeq	r2, r0, r3, asr #17
    9e24:	00a28302 	adceq	r8, r2, r2, lsl #6
    9e28:	40a50000 	adcmi	r0, r5, r0
    9e2c:	a3100000 	tstge	r0, #0
    9e30:	02000029 	andeq	r0, r0, #41	; 0x29
    9e34:	0000a284 	andeq	sl, r0, r4, lsl #5
    9e38:	0040c600 	subeq	ip, r0, r0, lsl #12
    9e3c:	29311000 	ldmdbcs	r1!, {ip}
    9e40:	84020000 	strhi	r0, [r2], #-0
    9e44:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e48:	00004117 	andeq	r4, r0, r7, lsl r1
    9e4c:	00292810 	eoreq	r2, r9, r0, lsl r8
    9e50:	97850200 	strls	r0, [r5, r0, lsl #4]
    9e54:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    9e58:	13000041 	movwne	r0, #65	; 0x41
    9e5c:	000029ac 	andeq	r2, r0, ip, lsr #19
    9e60:	00a28702 	adceq	r8, r2, r2, lsl #14
    9e64:	41880000 	orrmi	r0, r8, r0
    9e68:	1d130000 	ldcne	0, cr0, [r3, #-0]
    9e6c:	02000029 	andeq	r0, r0, #41	; 0x29
    9e70:	0000a288 	andeq	sl, r0, r8, lsl #5
    9e74:	00422e00 	subeq	r2, r2, r0, lsl #28
    9e78:	00001100 	andeq	r1, r0, r0, lsl #2
    9e7c:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    9e80:	01120000 	tsteq	r2, r0
    9e84:	01f34051 	mvnseq	r4, r1, asr r0
    9e88:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    9e8c:	01f35201 	mvnseq	r5, r1, lsl #4
    9e90:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9e94:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9e98:	282b8000 	stmdacs	fp!, {pc}
    9e9c:	13160001 	tstne	r6, #1
    9ea0:	007d2440 	rsbseq	r2, sp, r0, asr #8
    9ea4:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    9ea8:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    9eac:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    9eb0:	01f35301 	mvnseq	r5, r1, lsl #6
    9eb4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9eb8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9ebc:	282b8000 	stmdacs	fp!, {pc}
    9ec0:	13160001 	tstne	r6, #1
    9ec4:	01122124 	tsteq	r2, r4, lsr #2
    9ec8:	01f36350 	mvnseq	r6, r0, asr r3
    9ecc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9ed0:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9ed4:	01f30480 	mvnseq	r0, r0, lsl #9
    9ed8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9edc:	f3225001 	vhadd.u32	d5, d2, d1
    9ee0:	4b405301 	blmi	101eaec <__ccfg+0xffeb44>
    9ee4:	0f0c2224 	svceq	0x000c2224
    9ee8:	2c800000 	stccs	0, cr0, [r0], {0}
    9eec:	16000128 	strne	r0, [r0], -r8, lsr #2
    9ef0:	04842313 	streq	r2, [r4], #787	; 0x313
    9ef4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ef8:	5001f324 	andpl	pc, r1, r4, lsr #6
    9efc:	04802322 	streq	r2, [r0], #802	; 0x322
    9f00:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9f04:	5001f324 	andpl	pc, r1, r4, lsr #6
    9f08:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    9f0c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f10:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f14:	01282c80 	smlawbeq	r8, r0, ip, r2
    9f18:	f3131600 	vmax.u16	d1, d3, d0
    9f1c:	4b405301 	blmi	101eb28 <__ccfg+0xffeb80>
    9f20:	0f0c2224 	svceq	0x000c2224
    9f24:	2b800000 	blcs	fe009f2c <_estack+0xde004f2c>
    9f28:	16000128 	strne	r0, [r0], -r8, lsr #2
    9f2c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    9f30:	000028e9 	andeq	r2, r0, r9, ror #17
    9f34:	97020801 	strls	r0, [r2, -r1, lsl #16]
    9f38:	00000000 	andeq	r0, r0, r0
    9f3c:	34000000 	strcc	r0, [r0], #-0
    9f40:	01000000 	mrseq	r0, (UNDEF: 0)
    9f44:	0004d29c 	muleq	r4, ip, r2
    9f48:	07311000 	ldreq	r1, [r1, -r0]!
    9f4c:	af020000 	svcge	0x00020000
    9f50:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f54:	0000428e 	andeq	r4, r0, lr, lsl #5
    9f58:	0028c310 	eoreq	ip, r8, r0, lsl r3
    9f5c:	a2af0200 	adcge	r0, pc, #0, 4
    9f60:	af000000 	svcge	0x00000000
    9f64:	10000042 	andne	r0, r0, r2, asr #32
    9f68:	000029a3 	andeq	r2, r0, r3, lsr #19
    9f6c:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9f70:	42d00000 	sbcsmi	r0, r0, #0
    9f74:	ac130000 	ldcge	0, cr0, [r3], {-0}
    9f78:	02000029 	andeq	r0, r0, #41	; 0x29
    9f7c:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    9f80:	00430d00 	subeq	r0, r3, r0, lsl #26
    9f84:	29141300 	ldmdbcs	r4, {r8, r9, ip}
    9f88:	b2020000 	andlt	r0, r2, #0
    9f8c:	00000097 	muleq	r0, r7, r0
    9f90:	00004347 	andeq	r4, r0, r7, asr #6
    9f94:	0000ed15 	andeq	lr, r0, r5, lsl sp
    9f98:	00000000 	andeq	r0, r0, r0
    9f9c:	00001a00 	andeq	r1, r0, r0, lsl #20
    9fa0:	0cca0200 	sfmeq	f0, 2, [sl], {0}
    9fa4:	00000108 	andeq	r0, r0, r8, lsl #2
    9fa8:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
    9fac:	435f0000 	cmpmi	pc, #0
    9fb0:	00160000 	andseq	r0, r6, r0
    9fb4:	1a000000 	bne	9fbc <__exidx_end+0x7338>
    9fb8:	0b000000 	bleq	9fc0 <__exidx_end+0x733c>
    9fbc:	00000113 	andeq	r0, r0, r3, lsl r1
    9fc0:	00004399 	muleq	r0, r9, r3
    9fc4:	00011e0b 	andeq	r1, r1, fp, lsl #28
    9fc8:	0043b200 	subeq	fp, r3, r0, lsl #4
    9fcc:	00000d00 	andeq	r0, r0, r0, lsl #26
    9fd0:	05940000 	ldreq	r0, [r4]
    9fd4:	000d0000 	andeq	r0, sp, r0
    9fd8:	9f000000 	svcls	0x00000000
    9fdc:	00000005 	andeq	r0, r0, r5
    9fe0:	cb140000 	blgt	509fe8 <__ccfg+0x4ea040>
    9fe4:	01000028 	tsteq	r0, r8, lsr #32
    9fe8:	0097021d 	addseq	r0, r7, sp, lsl r2
    9fec:	00000000 	andeq	r0, r0, r0
    9ff0:	00400000 	subeq	r0, r0, r0
    9ff4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ff8:	00000594 	muleq	r0, r4, r5
    9ffc:	00073110 	andeq	r3, r7, r0, lsl r1
    a000:	a2dd0200 	sbcsge	r0, sp, #0, 4
    a004:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    a008:	10000043 	andne	r0, r0, r3, asr #32
    a00c:	000028c3 	andeq	r2, r0, r3, asr #17
    a010:	00a2dd02 	adceq	sp, r2, r2, lsl #26
    a014:	43ea0000 	mvnmi	r0, #0
    a018:	a3100000 	tstge	r0, #0
    a01c:	02000029 	andeq	r0, r0, #41	; 0x29
    a020:	0000a2de 	ldrdeq	sl, [r0], -lr
    a024:	00440b00 	subeq	r0, r4, r0, lsl #22
    a028:	29311000 	ldmdbcs	r1!, {ip}
    a02c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    a030:	000000a2 	andeq	r0, r0, r2, lsr #1
    a034:	0000444e 	andeq	r4, r0, lr, asr #8
    a038:	0029ac13 	eoreq	sl, r9, r3, lsl ip
    a03c:	a2e00200 	rscge	r0, r0, #0, 4
    a040:	91000000 	mrsls	r0, (UNDEF: 0)
    a044:	13000044 	movwne	r0, #68	; 0x44
    a048:	00002914 	andeq	r2, r0, r4, lsl r9
    a04c:	0097e102 	addseq	lr, r7, r2, lsl #2
    a050:	44ec0000 	strbtmi	r0, [ip], #0
    a054:	ed150000 	ldc	0, cr0, [r5, #-0]
    a058:	00000000 	andeq	r0, r0, r0
    a05c:	1a000000 	bne	a064 <__exidx_end+0x73e0>
    a060:	02000000 	andeq	r0, r0, #0
    a064:	01080cfa 	strdeq	r0, [r8, -sl]
    a068:	0a020000 	beq	8a070 <__ccfg+0x6a0c8>
    a06c:	000000fd 	strdeq	r0, [r0], -sp
    a070:	0000450f 	andeq	r4, r0, pc, lsl #10
    a074:	00000016 	andeq	r0, r0, r6, lsl r0
    a078:	00001a00 	andeq	r1, r0, r0, lsl #20
    a07c:	01130b00 	tsteq	r3, r0, lsl #22
    a080:	454f0000 	strbmi	r0, [pc, #-0]	; a088 <__exidx_end+0x7404>
    a084:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    a088:	68000001 	stmdavs	r0, {r0}
    a08c:	0d000045 	stceq	0, cr0, [r0, #-276]	; 0xfffffeec
    a090:	00000000 	andeq	r0, r0, r0
    a094:	00000594 	muleq	r0, r4, r5
    a098:	0000000d 	andeq	r0, r0, sp
    a09c:	00059f00 	andeq	r9, r5, r0, lsl #30
    a0a0:	00000000 	andeq	r0, r0, r0
    a0a4:	0018b317 	andseq	fp, r8, r7, lsl r3
    a0a8:	a26a0500 	rsbge	r0, sl, #0, 10
    a0ac:	17000000 	strne	r0, [r0, -r0]
    a0b0:	000018c2 	andeq	r1, r0, r2, asr #17
    a0b4:	00a28405 	adceq	r8, r2, r5, lsl #8
    a0b8:	bf000000 	svclt	0x00000000
    a0bc:	04000008 	streq	r0, [r0], #-8
    a0c0:	002ffc00 	eoreq	pc, pc, r0, lsl #24
    a0c4:	50010400 	andpl	r0, r1, r0, lsl #8
    a0c8:	01000016 	tsteq	r0, r6, lsl r0
    a0cc:	00002a51 	andeq	r2, r0, r1, asr sl
    a0d0:	00001745 	andeq	r1, r0, r5, asr #14
    a0d4:	00001008 	andeq	r1, r0, r8
    a0d8:	00000000 	andeq	r0, r0, r0
    a0dc:	00006a5f 	andeq	r6, r0, pc, asr sl
    a0e0:	a3060102 	movwge	r0, #24834	; 0x6102
    a0e4:	03000003 	movweq	r0, #3
    a0e8:	000021fa 	strdeq	r2, [r0], -sl
    a0ec:	00371d03 	eorseq	r1, r7, r3, lsl #26
    a0f0:	01020000 	mrseq	r0, (UNDEF: 2)
    a0f4:	0003a108 	andeq	sl, r3, r8, lsl #2
    a0f8:	2c670300 	stclcs	3, cr0, [r7], #-0
    a0fc:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    a100:	00000049 	andeq	r0, r0, r9, asr #32
    a104:	dd050202 	sfmle	f0, 4, [r5, #-8]
    a108:	03000003 	movweq	r0, #3
    a10c:	000020e8 	andeq	r2, r0, r8, ror #1
    a110:	005b2b03 	subseq	r2, fp, r3, lsl #22
    a114:	02020000 	andeq	r0, r2, #0
    a118:	00027107 	andeq	r7, r2, r7, lsl #2
    a11c:	16460300 	strbne	r0, [r6], -r0, lsl #6
    a120:	3f030000 	svccc	0x00030000
    a124:	0000006d 	andeq	r0, r0, sp, rrx
    a128:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    a12c:	03000000 	movweq	r0, #0
    a130:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    a134:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    a138:	04020000 	streq	r0, [r2], #-0
    a13c:	00007207 	andeq	r7, r0, r7, lsl #4
    a140:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    a144:	00000098 	muleq	r0, r8, r0
    a148:	6d070802 	stcvs	8, cr0, [r7, #-8]
    a14c:	04000000 	streq	r0, [r0], #-0
    a150:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a154:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a158:	00007707 	andeq	r7, r0, r7, lsl #14
    a15c:	21fc0300 	mvnscs	r0, r0, lsl #6
    a160:	14040000 	strne	r0, [r4], #-0
    a164:	0000002c 	andeq	r0, r0, ip, lsr #32
    a168:	002c6903 	eoreq	r6, ip, r3, lsl #18
    a16c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    a170:	03000000 	movweq	r0, #0
    a174:	000020ea 	andeq	r2, r0, sl, ror #1
    a178:	00501a04 	subseq	r1, r0, r4, lsl #20
    a17c:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
    a180:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    a184:	0000621f 	andeq	r6, r0, pc, lsl r2
    a188:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    a18c:	20040000 	andcs	r0, r4, r0
    a190:	00000074 	andeq	r0, r0, r4, ror r0
    a194:	0022d303 	eoreq	sp, r2, r3, lsl #6
    a198:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    a19c:	05000000 	streq	r0, [r0, #-0]
    a1a0:	0000ea04 	andeq	lr, r0, r4, lsl #20
    a1a4:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    a1a8:	000000f1 	strdeq	r0, [r0], -r1
    a1ac:	0000fc07 	andeq	pc, r0, r7, lsl #24
    a1b0:	00a20800 	adceq	r0, r2, r0, lsl #16
    a1b4:	03000000 	movweq	r0, #0
    a1b8:	00002349 	andeq	r2, r0, r9, asr #6
    a1bc:	01074206 	tsteq	r7, r6, lsl #4
    a1c0:	04050000 	streq	r0, [r5], #-0
    a1c4:	0000010d 	andeq	r0, r0, sp, lsl #2
    a1c8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a1cc:	00012600 	andeq	r2, r1, r0, lsl #12
    a1d0:	01260800 			; <UNDEFINED> instruction: 0x01260800
    a1d4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a1d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a1dc:	000000ce 	andeq	r0, r0, lr, asr #1
    a1e0:	a2040500 	andge	r0, r4, #0, 10
    a1e4:	03000000 	movweq	r0, #0
    a1e8:	00002472 	andeq	r2, r0, r2, ror r4
    a1ec:	01374606 	teqeq	r7, r6, lsl #12
    a1f0:	04050000 	streq	r0, [r5], #-0
    a1f4:	0000013d 	andeq	r0, r0, sp, lsr r1
    a1f8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    a1fc:	24de0300 	ldrbcs	r0, [lr], #768	; 0x300
    a200:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    a204:	00000137 	andeq	r0, r0, r7, lsr r1
    a208:	00222403 	eoreq	r2, r2, r3, lsl #8
    a20c:	584a0600 	stmdapl	sl, {r9, sl}^
    a210:	05000001 	streq	r0, [r0, #-1]
    a214:	00015e04 	andeq	r5, r1, r4, lsl #28
    a218:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a21c:	016d0000 	cmneq	sp, r0
    a220:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a224:	00000000 	andeq	r0, r0, r0
    a228:	00218a03 	eoreq	r8, r1, r3, lsl #20
    a22c:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    a230:	03000001 	movweq	r0, #1
    a234:	000020f3 	strdeq	r2, [r0], -r3
    a238:	01074e06 	tsteq	r7, r6, lsl #28
    a23c:	7a030000 	bvc	ca244 <__ccfg+0xaa29c>
    a240:	06000021 	streq	r0, [r0], -r1, lsr #32
    a244:	0000e451 	andeq	lr, r0, r1, asr r4
    a248:	1ff60300 	svcne	0x00f60300
    a24c:	53060000 	movwpl	r0, #24576	; 0x6000
    a250:	00000199 	muleq	r0, r9, r1
    a254:	019f0405 	orrseq	r0, pc, r5, lsl #8
    a258:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a25c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a260:	08000001 	stmdaeq	r0, {r0}
    a264:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    a268:	0000b808 	andeq	fp, r0, r8, lsl #16
    a26c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    a270:	05000000 	streq	r0, [r0, #-0]
    a274:	0000b804 	andeq	fp, r0, r4, lsl #16
    a278:	236d0300 	cmncs	sp, #0, 6
    a27c:	57060000 	strpl	r0, [r6, -r0]
    a280:	000001c9 	andeq	r0, r0, r9, asr #3
    a284:	01cf0405 	biceq	r0, pc, r5, lsl #8
    a288:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a28c:	e3000000 	movw	r0, #0
    a290:	08000001 	stmdaeq	r0, {r0}
    a294:	000001e3 	andeq	r0, r0, r3, ror #3
    a298:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a29c:	04050000 	streq	r0, [r5], #-0
    a2a0:	000000ce 	andeq	r0, r0, lr, asr #1
    a2a4:	0021ad03 	eoreq	sl, r1, r3, lsl #26
    a2a8:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    a2ac:	03000001 	movweq	r0, #1
    a2b0:	00002276 	andeq	r2, r0, r6, ror r2
    a2b4:	01c95d06 	biceq	r5, r9, r6, lsl #26
    a2b8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    a2bc:	06000020 	streq	r0, [r0], -r0, lsr #32
    a2c0:	0001c960 	andeq	ip, r1, r0, ror #18
    a2c4:	23980300 	orrscs	r0, r8, #0, 6
    a2c8:	63060000 	movwvs	r0, #24576	; 0x6000
    a2cc:	000000e4 	andeq	r0, r0, r4, ror #1
    a2d0:	00202e03 	eoreq	r2, r0, r3, lsl #28
    a2d4:	20650600 	rsbcs	r0, r5, r0, lsl #12
    a2d8:	05000002 	streq	r0, [r0, #-2]
    a2dc:	00022604 	andeq	r2, r2, r4, lsl #12
    a2e0:	02310700 	eorseq	r0, r1, #0, 14
    a2e4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a2e8:	00000000 	andeq	r0, r0, r0
    a2ec:	0024ef03 	eoreq	lr, r4, r3, lsl #30
    a2f0:	20670600 	rsbcs	r0, r7, r0, lsl #12
    a2f4:	03000002 	movweq	r0, #2
    a2f8:	000022e4 	andeq	r2, r0, r4, ror #5
    a2fc:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    a300:	bd030000 	stclt	0, cr0, [r3, #-0]
    a304:	06000024 	streq	r0, [r0], -r4, lsr #32
    a308:	0000eb6b 	andeq	lr, r0, fp, ror #22
    a30c:	22920300 	addscs	r0, r2, #0, 6
    a310:	6d060000 	stcvs	0, cr0, [r6, #-0]
    a314:	000000eb 	andeq	r0, r0, fp, ror #1
    a318:	0022a403 	eoreq	sl, r2, r3, lsl #8
    a31c:	eb6f0600 	bl	1bcbb24 <__ccfg+0x1babb7c>
    a320:	0b000000 	bleq	a328 <__exidx_end+0x76a4>
    a324:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    a328:	0c000003 	stceq	0, cr0, [r0], {3}
    a32c:	00002248 	andeq	r2, r0, r8, asr #4
    a330:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    a334:	0c000000 	stceq	0, cr0, [r0], {-0}
    a338:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    a33c:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    a340:	0c040000 	stceq	0, cr0, [r4], {-0}
    a344:	0000226c 	andeq	r2, r0, ip, ror #4
    a348:	01427e06 	cmpeq	r2, r6, lsl #28
    a34c:	0c080000 	stceq	0, cr0, [r8], {-0}
    a350:	000023d7 	ldrdeq	r2, [r0], -r7
    a354:	014d7f06 	cmpeq	sp, r6, lsl #30
    a358:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a35c:	000023e9 	andeq	r2, r0, r9, ror #7
    a360:	016d8006 	cmneq	sp, r6
    a364:	0c100000 	ldceq	0, cr0, [r0], {-0}
    a368:	000023fb 	strdeq	r2, [r0], -fp
    a36c:	01788106 	cmneq	r8, r6, lsl #2
    a370:	0c140000 	ldceq	0, cr0, [r4], {-0}
    a374:	00002146 	andeq	r2, r0, r6, asr #2
    a378:	01838206 	orreq	r8, r3, r6, lsl #4
    a37c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    a380:	00002261 	andeq	r2, r0, r1, ror #4
    a384:	018e8306 	orreq	r8, lr, r6, lsl #6
    a388:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    a38c:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    a390:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    a394:	0c200000 	stceq	0, cr0, [r0], #-0
    a398:	000021e9 	andeq	r2, r0, r9, ror #3
    a39c:	01e98506 	mvneq	r8, r6, lsl #10
    a3a0:	0c240000 	stceq	0, cr0, [r4], #-0
    a3a4:	00002204 	andeq	r2, r0, r4, lsl #4
    a3a8:	01f48606 	mvnseq	r8, r6, lsl #12
    a3ac:	0c280000 	stceq	0, cr0, [r8], #-0
    a3b0:	0000241f 	andeq	r2, r0, pc, lsl r4
    a3b4:	01ff8706 	mvnseq	r8, r6, lsl #14
    a3b8:	0c2c0000 	stceq	0, cr0, [ip], #-0
    a3bc:	0000219b 	muleq	r0, fp, r1
    a3c0:	02158806 	andseq	r8, r5, #393216	; 0x60000
    a3c4:	0c300000 	ldceq	0, cr0, [r0], #-0
    a3c8:	0000240d 	andeq	r2, r0, sp, lsl #8
    a3cc:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    a3d0:	0c340000 	ldceq	0, cr0, [r4], #-0
    a3d4:	0000224e 	andeq	r2, r0, lr, asr #4
    a3d8:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    a3dc:	0c380000 	ldceq	0, cr0, [r8], #-0
    a3e0:	000022c2 	andeq	r2, r0, r2, asr #5
    a3e4:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    a3e8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    a3ec:	000023c8 	andeq	r2, r0, r8, asr #7
    a3f0:	02478c06 	subeq	r8, r7, #1536	; 0x600
    a3f4:	0c400000 	mareq	acc0, r0, r0
    a3f8:	000021c3 	andeq	r2, r0, r3, asr #3
    a3fc:	02528d06 	subseq	r8, r2, #384	; 0x180
    a400:	0c440000 	mareq	acc0, r0, r4
    a404:	0000201f 	andeq	r2, r0, pc, lsl r0
    a408:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    a40c:	00480000 	subeq	r0, r8, r0
    a410:	00232303 	eoreq	r2, r3, r3, lsl #6
    a414:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    a418:	0b000002 	bleq	a428 <__exidx_end+0x77a4>
    a41c:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    a420:	0c000003 	stceq	0, cr0, [r0], {3}
    a424:	00002a39 	andeq	r2, r0, r9, lsr sl
    a428:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    a42c:	0c000000 	stceq	0, cr0, [r0], {-0}
    a430:	00002b9e 	muleq	r0, lr, fp
    a434:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    a438:	0c040000 	stceq	0, cr0, [r4], {-0}
    a43c:	000029d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a440:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    a444:	0c080000 	stceq	0, cr0, [r8], {-0}
    a448:	00002a6c 	andeq	r2, r0, ip, ror #20
    a44c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    a450:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a454:	00002a02 	andeq	r2, r0, r2, lsl #20
    a458:	00c35901 	sbceq	r5, r3, r1, lsl #18
    a45c:	00100000 	andseq	r0, r0, r0
    a460:	002bc903 	eoreq	ip, fp, r3, lsl #18
    a464:	605a0100 	subsvs	r0, sl, r0, lsl #2
    a468:	0d000003 	stceq	0, cr0, [r0, #-12]
    a46c:	00001b0d 	andeq	r1, r0, sp, lsl #22
    a470:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    a474:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    a478:	00002bec 	andeq	r2, r0, ip, ror #23
    a47c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    a480:	ca0e0000 	bgt	38a488 <__ccfg+0x36a4e0>
    a484:	01000029 	tsteq	r0, r9, lsr #32
    a488:	0000ce65 	andeq	ip, r0, r5, ror #28
    a48c:	a80f0000 	stmdage	pc, {}	; <UNPREDICTABLE>
    a490:	0200001e 	andeq	r0, r0, #30
    a494:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    a498:	fb010000 	blx	4a4a2 <__ccfg+0x2a4fa>
    a49c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    a4a0:	00002bec 	andeq	r2, r0, ip, ror #23
    a4a4:	00cea001 	sbceq	sl, lr, r1
    a4a8:	57100000 	ldrpl	r0, [r0, -r0]
    a4ac:	0100002c 	tsteq	r0, ip, lsr #32
    a4b0:	0000cea2 	andeq	ip, r0, r2, lsr #29
    a4b4:	b0110000 	andslt	r0, r1, r0
    a4b8:	cc000003 	stcgt	0, cr0, [r0], {3}
    a4bc:	5c000029 	stcpl	0, cr0, [r0], {41}	; 0x29
    a4c0:	01000000 	mrseq	r0, (UNDEF: 0)
    a4c4:	0004b69c 	muleq	r4, ip, r6
    a4c8:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    a4cc:	457f0000 	ldrbmi	r0, [pc, #-0]!	; a4d4 <__exidx_end+0x7850>
    a4d0:	c7120000 	ldrgt	r0, [r2, -r0]
    a4d4:	ab000003 	blge	a4e8 <__exidx_end+0x7864>
    a4d8:	13000045 	movwne	r0, #69	; 0x45
    a4dc:	00002a06 	andeq	r2, r0, r6, lsl #20
    a4e0:	00000014 	andeq	r0, r0, r4, lsl r0
    a4e4:	00000461 	andeq	r0, r0, r1, ror #8
    a4e8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    a4ec:	0045d700 	subeq	sp, r5, r0, lsl #14
    a4f0:	03c71200 	biceq	r1, r7, #0, 4
    a4f4:	45ea0000 	strbmi	r0, [sl, #0]!
    a4f8:	1a140000 	bne	50a500 <__ccfg+0x4ea558>
    a4fc:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a500:	01150074 	tsteq	r5, r4, ror r0
    a504:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    a508:	3c015201 	sfmcc	f5, 4, [r1], {1}
    a50c:	01510115 	cmpeq	r1, r5, lsl r1
    a510:	50011530 	andpl	r1, r1, r0, lsr r5
    a514:	a0000c05 	andge	r0, r0, r5, lsl #24
    a518:	0000400c 	andeq	r4, r0, ip
    a51c:	0029ea16 	eoreq	lr, r9, r6, lsl sl
    a520:	00760200 	rsbseq	r0, r6, r0, lsl #4
    a524:	0000048d 	andeq	r0, r0, sp, lsl #9
    a528:	01530115 	cmpeq	r3, r5, lsl r1
    a52c:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    a530:	01153101 	tsteq	r5, r1, lsl #2
    a534:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a538:	0c055001 	stceq	0, cr5, [r5], {1}
    a53c:	400ca000 	andmi	sl, ip, r0
    a540:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    a544:	00007402 	andeq	r7, r0, r2, lsl #8
    a548:	002a0214 	eoreq	r0, sl, r4, lsl r2
    a54c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    a550:	01530115 	cmpeq	r3, r5, lsl r1
    a554:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    a558:	01153201 	tsteq	r5, r1, lsl #4
    a55c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a560:	0c055001 	stceq	0, cr5, [r5], {1}
    a564:	400ca000 	andmi	sl, ip, r0
    a568:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    a56c:	00007402 	andeq	r7, r0, r2, lsl #8
    a570:	03d31100 	bicseq	r1, r3, #0, 2
    a574:	2a280000 	bcs	a0a57c <__ccfg+0x9ea5d4>
    a578:	002c0000 	eoreq	r0, ip, r0
    a57c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a580:	0000050d 	andeq	r0, r0, sp, lsl #10
    a584:	0003e412 	andeq	lr, r3, r2, lsl r4
    a588:	00460b00 	subeq	r0, r6, r0, lsl #22
    a58c:	03ef1700 	mvneq	r1, #0, 14
    a590:	50010000 	andpl	r0, r1, r0
    a594:	000ff018 	andeq	pc, pc, r8, lsl r0	; <UNPREDICTABLE>
    a598:	0004f400 	andeq	pc, r4, r0, lsl #8
    a59c:	03e41900 	mvneq	r1, #0, 18
    a5a0:	1a040000 	bne	10a5a8 <__ccfg+0xea600>
    a5a4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a5a8:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    a5ac:	14000000 	strne	r0, [r0], #-0
    a5b0:	00002a48 	andeq	r2, r0, r8, asr #20
    a5b4:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    a5b8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    a5bc:	50011534 	andpl	r1, r1, r4, lsr r5
    a5c0:	a0000c05 	andge	r0, r0, r5, lsl #24
    a5c4:	0000400c 	andeq	r4, r0, ip
    a5c8:	002cd21c 	eoreq	sp, ip, ip, lsl r2
    a5cc:	01840200 	orreq	r0, r4, r0, lsl #4
    a5d0:	000000ce 	andeq	r0, r0, lr, asr #1
    a5d4:	00000000 	andeq	r0, r0, r0
    a5d8:	00000090 	muleq	r0, r0, r0
    a5dc:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    a5e0:	d81d0000 	ldmdale	sp, {}	; <UNPREDICTABLE>
    a5e4:	0100002b 	tsteq	r0, fp, lsr #32
    a5e8:	0000cec2 	andeq	ip, r0, r2, asr #29
    a5ec:	00462c00 	subeq	r2, r6, r0, lsl #24
    a5f0:	2b561e00 	blcs	1591df8 <__ccfg+0x1571e50>
    a5f4:	c4010000 	strgt	r0, [r1], #-0
    a5f8:	000000ce 	andeq	r0, r0, lr, asr #1
    a5fc:	00004658 	andeq	r4, r0, r8, asr r6
    a600:	002b6f1e 	eoreq	r6, fp, lr, lsl pc
    a604:	c3c50100 	bicgt	r0, r5, #0, 2
    a608:	6b000000 	blvs	a610 <__exidx_end+0x798c>
    a60c:	1e000046 	cdpne	0, 0, cr0, cr0, cr6, {2}
    a610:	00002a0e 	andeq	r2, r0, lr, lsl #20
    a614:	00cec601 	sbceq	ip, lr, r1, lsl #12
    a618:	46920000 	ldrmi	r0, [r2], r0
    a61c:	001f0000 	andseq	r0, pc, r0
    a620:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a624:	1f000008 	svcne	0x00000008
    a628:	00000000 	andeq	r0, r0, r0
    a62c:	000008aa 	andeq	r0, r0, sl, lsr #17
    a630:	2a952000 	bcs	fe552638 <_estack+0xde54d638>
    a634:	91020000 	mrsls	r0, (UNDEF: 2)
    a638:	00000001 	andeq	r0, r0, r1
    a63c:	00001800 	andeq	r1, r0, r0, lsl #16
    a640:	ae9c0100 	fmlgee	f0, f4, f0
    a644:	21000005 	tstcs	r0, r5
    a648:	00000000 	andeq	r0, r0, r0
    a64c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    a650:	000005a4 	andeq	r0, r0, r4, lsr #11
    a654:	01510115 	cmpeq	r1, r5, lsl r1
    a658:	50011531 	andpl	r1, r1, r1, lsr r5
    a65c:	1f003301 	svcne	0x00003301
    a660:	00000000 	andeq	r0, r0, r0
    a664:	0000089e 	muleq	r0, lr, r8
    a668:	2bad2200 	blcs	feb52e70 <_estack+0xdeb4de70>
    a66c:	22020000 	andcs	r0, r2, #0
    a670:	0005bb01 	andeq	fp, r5, r1, lsl #22
    a674:	01020300 	mrseq	r0, LR_svc
    a678:	000bb802 	andeq	fp, fp, r2, lsl #16
    a67c:	23372300 	teqcs	r7, #0, 6
    a680:	40020000 	andmi	r0, r2, r0
    a684:	e01c0301 	ands	r0, ip, r1, lsl #6
    a688:	02000029 	andeq	r0, r0, #41	; 0x29
    a68c:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    a690:	00000000 	andeq	r0, r0, r0
    a694:	00600000 	rsbeq	r0, r0, r0
    a698:	9c010000 	stcls	0, cr0, [r1], {-0}
    a69c:	00000677 	andeq	r0, r0, r7, ror r6
    a6a0:	002b8e24 	eoreq	r8, fp, r4, lsr #28
    a6a4:	01020100 	mrseq	r0, (UNDEF: 18)
    a6a8:	000000ce 	andeq	r0, r0, lr, asr #1
    a6ac:	000046e6 	andeq	r4, r0, r6, ror #13
    a6b0:	002c0a24 	eoreq	r0, ip, r4, lsr #20
    a6b4:	01030100 	mrseq	r0, (UNDEF: 19)
    a6b8:	000000ce 	andeq	r0, r0, lr, asr #1
    a6bc:	000046f9 	strdeq	r4, [r0], -r9
    a6c0:	0005ae25 	andeq	sl, r5, r5, lsr #28
    a6c4:	00000000 	andeq	r0, r0, r0
    a6c8:	00001000 	andeq	r1, r0, r0
    a6cc:	01090100 	mrseq	r0, (UNDEF: 25)
    a6d0:	0000063c 	andeq	r0, r0, ip, lsr r6
    a6d4:	00000014 	andeq	r0, r0, r4, lsl r0
    a6d8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    a6dc:	01530115 	cmpeq	r3, r5, lsl r1
    a6e0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    a6e4:	01153101 	tsteq	r5, r1, lsl #2
    a6e8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    a6ec:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a6f0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a6f4:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    a6f8:	000005c2 	andeq	r0, r0, r2, asr #11
    a6fc:	00000000 	andeq	r0, r0, r0
    a700:	00000008 	andeq	r0, r0, r8
    a704:	5a010a01 	bpl	4cf10 <__ccfg+0x2cf68>
    a708:	1f000006 	svcne	0x00000006
    a70c:	00000000 	andeq	r0, r0, r0
    a710:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    a714:	00002100 	andeq	r2, r0, r0, lsl #2
    a718:	03d30000 	bicseq	r0, r3, #0
    a71c:	066d0000 	strbteq	r0, [sp], -r0
    a720:	01150000 	tsteq	r5, r0
    a724:	00310150 	eorseq	r0, r1, r0, asr r1
    a728:	0000001f 	andeq	r0, r0, pc, lsl r0
    a72c:	00089e00 	andeq	r9, r8, r0, lsl #28
    a730:	b5200000 	strlt	r0, [r0, #-0]!
    a734:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a738:	000001ae 	andeq	r0, r0, lr, lsr #3
    a73c:	00340000 	eorseq	r0, r4, r0
    a740:	9c010000 	stcls	0, cr0, [r1], {-0}
    a744:	000006e9 	andeq	r0, r0, r9, ror #13
    a748:	0005c225 	andeq	ip, r5, r5, lsr #4
    a74c:	00000000 	andeq	r0, r0, r0
    a750:	00000800 	andeq	r0, r0, r0, lsl #16
    a754:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    a758:	000006ab 	andeq	r0, r0, fp, lsr #13
    a75c:	0000001f 	andeq	r0, r0, pc, lsl r0
    a760:	0008b500 	andeq	fp, r8, r0, lsl #10
    a764:	00210000 	eoreq	r0, r1, r0
    a768:	b0000000 	andlt	r0, r0, r0
    a76c:	c3000003 	movwgt	r0, #3
    a770:	15000006 	strne	r0, [r0, #-6]
    a774:	30015101 	andcc	r5, r1, r1, lsl #2
    a778:	01500115 	cmpeq	r0, r5, lsl r1
    a77c:	00210033 	eoreq	r0, r1, r3, lsr r0
    a780:	d3000000 	movwle	r0, #0
    a784:	d6000003 	strle	r0, [r0], -r3
    a788:	15000006 	strne	r0, [r0, #-6]
    a78c:	31015001 	tstcc	r1, r1
    a790:	00001f00 	andeq	r1, r0, r0, lsl #30
    a794:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a798:	001f0000 	andseq	r0, pc, r0
    a79c:	aa000000 	bge	a7a4 <__exidx_end+0x7b20>
    a7a0:	00000008 	andeq	r0, r0, r8
    a7a4:	002ada1c 	eoreq	sp, sl, ip, lsl sl
    a7a8:	01f20200 	mvnseq	r0, r0, lsl #4
    a7ac:	000000c3 	andeq	r0, r0, r3, asr #1
    a7b0:	00000000 	andeq	r0, r0, r0
    a7b4:	00000038 	andeq	r0, r0, r8, lsr r0
    a7b8:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    a7bc:	f7260000 			; <UNDEFINED> instruction: 0xf7260000
    a7c0:	0100002b 	tsteq	r0, fp, lsr #32
    a7c4:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    a7c8:	470c0000 	strmi	r0, [ip, -r0]
    a7cc:	84270000 	strthi	r0, [r7], #-0
    a7d0:	0100002b 	tsteq	r0, fp, lsr #32
    a7d4:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    a7d8:	51010000 	mrspl	r0, (UNDEF: 1)
    a7dc:	002ced27 	eoreq	lr, ip, r7, lsr #26
    a7e0:	01410100 	mrseq	r0, (UNDEF: 81)
    a7e4:	000000c3 	andeq	r0, r0, r3, asr #1
    a7e8:	40007105 	andmi	r7, r0, r5, lsl #2
    a7ec:	21279f26 			; <UNDEFINED> instruction: 0x21279f26
    a7f0:	0100002a 	tsteq	r0, sl, lsr #32
    a7f4:	00c30143 	sbceq	r0, r3, r3, asr #2
    a7f8:	71070000 	mrsvc	r0, (UNDEF: 7)
    a7fc:	48244000 	stmdami	r4!, {lr}
    a800:	29279f26 	stmdbcs	r7!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    a804:	0100002a 	tsteq	r0, sl, lsr #32
    a808:	00c30145 	sbceq	r0, r3, r5, asr #2
    a80c:	71070000 	mrsvc	r0, (UNDEF: 7)
    a810:	48244800 	stmdami	r4!, {fp, lr}
    a814:	31249f26 			; <UNDEFINED> instruction: 0x31249f26
    a818:	0100002a 	tsteq	r0, sl, lsr #32
    a81c:	00c30147 	sbceq	r0, r3, r7, asr #2
    a820:	473a0000 	ldrmi	r0, [sl, -r0]!
    a824:	7e240000 	cdpvc	0, 2, cr0, cr4, cr0, {0}
    a828:	0100002a 	tsteq	r0, sl, lsr #32
    a82c:	00c30156 	sbceq	r0, r3, r6, asr r1
    a830:	47530000 	ldrbmi	r0, [r3, -r0]
    a834:	29240000 	stmdbcs	r4!, {}	; <UNPREDICTABLE>
    a838:	0100002b 	tsteq	r0, fp, lsr #32
    a83c:	00c30157 	sbceq	r0, r3, r7, asr r1
    a840:	47760000 	ldrbmi	r0, [r6, -r0]!
    a844:	64280000 	strtvs	r0, [r8], #-0
    a848:	01580100 	cmpeq	r8, r0, lsl #2
    a84c:	000000c3 	andeq	r0, r0, r3, asr #1
    a850:	0000479f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    a854:	2c1b1c00 	ldccs	12, cr1, [fp], {-0}
    a858:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    a85c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    a860:	00000000 	andeq	r0, r0, r0
    a864:	00000c00 	andeq	r0, r0, r0, lsl #24
    a868:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    a86c:	26000007 	strcs	r0, [r0], -r7
    a870:	00002b42 	andeq	r2, r0, r2, asr #22
    a874:	c3016301 	movwgt	r6, #4865	; 0x1301
    a878:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a87c:	24000048 	strcs	r0, [r0], #-72	; 0xffffffb8
    a880:	00002c71 	andeq	r2, r0, r1, ror ip
    a884:	c3018501 	movwgt	r8, #5377	; 0x1501
    a888:	3a000000 	bcc	a890 <__exidx_end+0x7c0c>
    a88c:	00000048 	andeq	r0, r0, r8, asr #32
    a890:	002b041c 	eoreq	r0, fp, ip, lsl r4
    a894:	01c20200 	biceq	r0, r2, r0, lsl #4
    a898:	000000ce 	andeq	r0, r0, lr, asr #1
    a89c:	00000000 	andeq	r0, r0, r0
    a8a0:	00000034 	andeq	r0, r0, r4, lsr r0
    a8a4:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    a8a8:	c4240000 	strtgt	r0, [r4], #-0
    a8ac:	0100002c 	tsteq	r0, ip, lsr #32
    a8b0:	00ce0192 	smulleq	r0, lr, r2, r1
    a8b4:	487a0000 	ldmdami	sl!, {}^	; <UNPREDICTABLE>
    a8b8:	00240000 	eoreq	r0, r4, r0
    a8bc:	0100002c 	tsteq	r0, ip, lsr #32
    a8c0:	00ce0193 	smulleq	r0, lr, r3, r1
    a8c4:	489c0000 	ldmmi	ip, {}	; <UNPREDICTABLE>
    a8c8:	d7240000 	strle	r0, [r4, -r0]!
    a8cc:	01000021 	tsteq	r0, r1, lsr #32
    a8d0:	00ce0194 	smulleq	r0, lr, r4, r1
    a8d4:	48af0000 	stmiami	pc!, {}	; <UNPREDICTABLE>
    a8d8:	ac240000 	stcge	0, cr0, [r4], #-0
    a8dc:	0100002a 	tsteq	r0, sl, lsr #32
    a8e0:	00ce0195 	smulleq	r0, lr, r5, r1
    a8e4:	48d20000 	ldmmi	r2, {}^	; <UNPREDICTABLE>
    a8e8:	001f0000 	andseq	r0, pc, r0
    a8ec:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a8f0:	1f000008 	svcne	0x00000008
    a8f4:	00000000 	andeq	r0, r0, r0
    a8f8:	0000089e 	muleq	r0, lr, r8
    a8fc:	2c901c00 	ldccs	12, cr1, [r0], {0}
    a900:	d3020000 	movwle	r0, #8192	; 0x2000
    a904:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a908:	00000000 	andeq	r0, r0, r0
    a90c:	00001c00 	andeq	r1, r0, r0, lsl #24
    a910:	8d9c0100 	ldfhis	f0, [ip]
    a914:	24000008 	strcs	r0, [r0], #-8
    a918:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
    a91c:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    a920:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    a924:	24000048 	strcs	r0, [r0], #-72	; 0xffffffb8
    a928:	00002c82 	andeq	r2, r0, r2, lsl #25
    a92c:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    a930:	01000000 	mrseq	r0, (UNDEF: 0)
    a934:	24000049 	strcs	r0, [r0], #-73	; 0xffffffb7
    a938:	00002a88 	andeq	r2, r0, r8, lsl #21
    a93c:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    a940:	1c000000 	stcne	0, cr0, [r0], {-0}
    a944:	00000049 	andeq	r0, r0, r9, asr #32
    a948:	002b3529 	eoreq	r3, fp, r9, lsr #10
    a94c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    a950:	05000003 	streq	r0, [r0, #-3]
    a954:	00000003 	andeq	r0, r0, r3
    a958:	17cb2a00 	strbne	r2, [fp, r0, lsl #20]
    a95c:	45070000 	strmi	r0, [r7, #-0]
    a960:	0000ce03 	andeq	ip, r0, r3, lsl #28
    a964:	16172b00 	ldrne	r2, [r7], -r0, lsl #22
    a968:	aa080000 	bge	20a970 <__ccfg+0x1ea9c8>
    a96c:	000000c3 	andeq	r0, r0, r3, asr #1
    a970:	0020db2c 	eoreq	sp, r0, ip, lsr #22
    a974:	08990600 	ldmeq	r9, {r9, sl}
    a978:	000000d9 	ldrdeq	r0, [r0], -r9
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			i = k;
      40:	13490035 	movtne	r0, #36917	; 0x9035
				j->Next = k;
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
}
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0x1040>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
			wwait (st, 50);
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
			curr += 0x1000;
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
		if (from >= EE_SIZE || upto < from)
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
			upto = EE_SIZE - 1;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	00000b38 	andeq	r0, r0, r8, lsr fp
     124:	03003417 	movweq	r3, #1047	; 0x417
}
     128:	3b0b3a0e 	blcc	2ce968 <__ccfg+0x2ae9c0>
     12c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     130:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     134:	1800000a 	stmdane	r0, {r1, r3}
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <__ccfg+0xea2e84>
    cycles[0].onTime = numbers[0];
     140:	13490b39 	movtne	r0, #39737	; 0x9b39
    cycles[0].offTime = numbers[1];
     144:	0a020c3f 	beq	83248 <__ccfg+0x632a0>
    cycles[1].onTime = numbers[2];
     148:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     14c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    cycles[1].offTime = numbers[3];
     150:	3b0b3a0e 	blcc	2ce990 <__ccfg+0x2ae9e8>
}
     154:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	1201110c 	andne	r1, r1, #12, 2
     15c:	010a4001 	tsteq	sl, r1
            number += settingsInput[i] - 48;
     160:	1a000013 	bne	1b4 <root+0x44>
            numberMultiplier = numberMultiplier * 10;
     164:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
     16c:	13490b39 	movtne	r0, #39737	; 0x9b39
fsm root {
     170:	00000602 	andeq	r0, r0, r2, lsl #12
     174:	03000a1b 	movweq	r0, #2587	; 0xa1b
     178:	3b0b3a0e 	blcc	2ce9b8 <__ccfg+0x2aea10>
     17c:	110b390b 	tstne	fp, fp, lsl #18
     180:	1c000001 	stcne	0, cr0, [r0], {1}
     184:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
        initCycles();
     188:	341d0000 	ldrcc	r0, [sp], #-0
        ser_outf(Initial, "Enter your name: ");
     18c:	3a0e0300 	bcc	380d94 <__ccfg+0x360dec>
     190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     198:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     1a0:	00001301 	andeq	r1, r0, r1, lsl #6
     1a4:	11010b1f 	tstne	r1, pc, lsl fp
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	01011201 	tsteq	r1, r1, lsl #4
     1ac:	20000013 	andcs	r0, r0, r3, lsl r0
        if (choice == 'A' || choice == 'a'){
     1b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     1b4:	0b3b0b3a 	bleq	ec2ea4 <__ccfg+0xea2efc>
     1b8:	13490b39 	movtne	r0, #39737	; 0x9b39
            proceed Adjust_Intervals;
     1bc:	1d210000 	stcne	0, cr0, [r1, #-0]
            proceed Monitor;
     1c0:	11133101 	tstne	r3, r1, lsl #2
        proceed Show_Menu;
     1c4:	58011201 	stmdapl	r1, {r0, r9, ip}
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     1cc:	0013010b 	andseq	r0, r3, fp, lsl #2
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	00052200 	andeq	r2, r5, r0, lsl #4
     1d4:	00001331 	andeq	r1, r0, r1, lsr r3
     1d8:	31011d23 	tstcc	r1, r3, lsr #26
        processSettingsInput(settings);
     1dc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
        proceed Show_Menu;
     1e0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     1e4:	000b570b 	andeq	r5, fp, fp, lsl #14
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	00342400 	eorseq	r2, r4, r0, lsl #8
     1ec:	0b3a0e03 	bleq	e83a00 <__ccfg+0xe63a58>
     1f0:	0b390b3b 	bleq	e42ee4 <__ccfg+0xe22f3c>
     1f4:	06021349 	streq	r1, [r2], -r9, asr #6
     1f8:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
        proceed Show_Menu;
     1fc:	030c3f00 	movweq	r3, #52992	; 0xcf00
     200:	3b0b3a0e 	blcc	2cea40 <__ccfg+0x2aea98>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	110b390b 	tstne	fp, fp, lsl #18
     208:	40011201 	andmi	r1, r1, r1, lsl #4
        displayCycle = YES;
     20c:	2600000a 	strcs	r0, [r0], -sl
        ser_inf(Await_Stop, "%c", ch);
     210:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     214:	01120111 	tsteq	r2, r1, lsl r1
     218:	0b590b58 	bleq	1642f80 <__ccfg+0x1622fd8>
        proceed Monitor;
     21c:	00000b57 	andeq	r0, r0, r7, asr fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     220:	31011d27 	tstcc	r1, r7, lsr #26
     224:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
        leds(1, 0);
     228:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     22c:	0105570b 	tsteq	r5, fp, lsl #14
     230:	28000013 	stmdacs	r0, {r0, r1, r4}
     234:	0e03012e 	adfeqsp	f0, f3, #0.5
     238:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        leds(0, 0);
     23c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     240:	13010b20 	movwne	r0, #6944	; 0x1b20
     244:	05290000 	streq	r0, [r9, #-0]!
     248:	3a0e0300 	bcc	380e50 <__ccfg+0x360ea8>
     24c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     250:	0013490b 	andseq	r4, r3, fp, lsl #18
        } else if (choice == 'S' || choice == 's') {
     254:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
            proceed Stop;
     258:	0b3a0e03 	bleq	e83a6c <__ccfg+0xe63ac4>
        } else if (choice == 'V' || choice == 'v') {
     25c:	0b39053b 	bleq	e41750 <__ccfg+0xe217a8>
            proceed View_Settings;
     260:	0b200c27 	bleq	803304 <__ccfg+0x7e335c>
        } else if (choice == 'M' || choice == 'm') {
     264:	01000000 	mrseq	r0, (UNDEF: 0)
            proceed Monitor;
     268:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     26c:	0e030b13 	vmoveq.32	d3[0], r0
     270:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     274:	06100111 			; <UNDEFINED> instruction: 0x06100111
     278:	24020000 	strcs	r0, [r2], #-0
     27c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     280:	000e030b 	andeq	r0, lr, fp, lsl #6
     284:	00160300 	andseq	r0, r6, r0, lsl #6
     288:	0b3a0e03 	bleq	e83a9c <__ccfg+0xe63af4>
     28c:	0b390b3b 	bleq	e42f80 <__ccfg+0xe22fd8>
     290:	00001349 	andeq	r1, r0, r9, asr #6
     294:	0b002404 	bleq	92ac <__exidx_end+0x6628>
     298:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
static void devinit_uart (int devnum) {
     29c:	05000008 	streq	r0, [r0, #-8]
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	13490026 	movtne	r0, #36902	; 0x9026
     2a4:	35060000 	strcc	r0, [r6, #-0]
void udelay (volatile word n) {
     2a8:	00134900 	andseq	r4, r3, r0, lsl #18
     2ac:	000f0700 	andeq	r0, pc, r0, lsl #14
	while (n) {
     2b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     2b4:	13080000 	movwne	r0, #32768	; 0x8000
}
     2b8:	3a0b0b01 	bcc	2c2ec4 <__ccfg+0x2a2f1c>
	while (n--);
     2bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2c0:	0013010b 	andseq	r0, r3, fp, lsl #2
     2c4:	000d0900 	andeq	r0, sp, r0, lsl #18
		n--;
     2c8:	0b3a0e03 	bleq	e83adc <__ccfg+0xe63b34>
     2cc:	0b390b3b 	bleq	e42fc0 <__ccfg+0xe23018>
     2d0:	0b0b1349 	bleq	2c4ffc <__ccfg+0x2a5054>
void mdelay (volatile word n) {
     2d4:	0b0c0b0d 	bleq	302f10 <__ccfg+0x2e2f68>
     2d8:	00000b38 	andeq	r0, r0, r8, lsr fp
	while (n) {
     2dc:	03000d0a 	movweq	r0, #3338	; 0xd0a
     2e0:	3b0b3a0e 	blcc	2ceb20 <__ccfg+0x2aeb78>
}
     2e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		udelay (999);
     2e8:	000b3813 	andeq	r3, fp, r3, lsl r8
     2ec:	00340b00 	eorseq	r0, r4, r0, lsl #22
		n--;
     2f0:	0b3a0e03 	bleq	e83b04 <__ccfg+0xe63b5c>
     2f4:	0b390b3b 	bleq	e42fe8 <__ccfg+0xe23040>
     2f8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1dc <root+0x6c>
     2fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
void __pi_ondomain (lword d) {
     300:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     304:	00130113 	andseq	r0, r3, r3, lsl r1
		if (__pi_systat.effpdm > 1)
     308:	00210d00 	eoreq	r0, r1, r0, lsl #26
     30c:	160e0000 	strne	r0, [lr], -r0
			__pi_systat.effpdm = 1;
     310:	3a0e0300 	bcc	380f18 <__ccfg+0x360f70>
	PRCMPowerDomainOn (d);
     314:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     318:	0013490b 	andseq	r4, r3, fp, lsl #18
     31c:	01150f00 	tsteq	r5, r0, lsl #30
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	13010c27 	movwne	r0, #7207	; 0x1c27
     324:	05100000 	ldreq	r0, [r0, #-0]
     328:	00134900 	andseq	r4, r3, r0, lsl #18
	__pi_systat.ondmns |= d;
     32c:	00341100 	eorseq	r1, r4, r0, lsl #2
     330:	0b3a0e03 	bleq	e83b44 <__ccfg+0xe63b9c>
}
     334:	0b39053b 	bleq	e41828 <__ccfg+0xe21880>
     338:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 21c <root+0xac>
void __pi_syserror (word ec, const char *m) {
     33c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	diag ("SYSERR: %x, %s", ec, m);
     340:	0b011312 	bleq	44f90 <__ccfg+0x24fe8>
     344:	3b0b3a0b 	blcc	2ceb78 <__ccfg+0x2aebd0>
  __ASM volatile ("cpsid i" : : : "memory");
     348:	010b3905 	tsteq	fp, r5, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	13000013 	movwne	r0, #19
     350:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     354:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		all_leds_blink;
     358:	13490b39 	movtne	r0, #39737	; 0x9b39
     35c:	00000b38 	andeq	r0, r0, r8, lsr fp
     360:	03011314 	movweq	r1, #4884	; 0x1314
     364:	3a0b0b0e 	bcc	2c2fa4 <__ccfg+0x2a2ffc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     36c:	0013010b 	andseq	r0, r3, fp, lsl #2
     370:	00211500 	eoreq	r1, r1, r0, lsl #10
     374:	0b2f1349 	bleq	bc50a0 <__ccfg+0xba50f8>
     378:	34160000 	ldrcc	r0, [r6], #-0
     37c:	3a0e0300 	bcc	380f84 <__ccfg+0x360fdc>
	while (1) {
     380:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     384:	0013490b 	andseq	r4, r3, fp, lsl #18
     388:	00341700 	eorseq	r1, r4, r0, lsl #14
     38c:	0b3a0e03 	bleq	e83ba0 <__ccfg+0xe63bf8>
void tci_run_delay_timer () {
     390:	0b390b3b 	bleq	e43084 <__ccfg+0xe230dc>
	setdel = __pi_mintk - __pi_old;
     394:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 278 <root+0x108>
     398:	00000a02 	andeq	r0, r0, r2, lsl #20
     39c:	03003418 	movweq	r3, #1048	; 0x418
     3a0:	3b0b3a0e 	blcc	2cebe0 <__ccfg+0x2aec38>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     3a8:	000a0213 	andeq	r0, sl, r3, lsl r2
     3ac:	00341900 	eorseq	r1, r4, r0, lsl #18
     3b0:	0b3a1347 	bleq	e850d4 <__ccfg+0xe6512c>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	0b39053b 	bleq	e418a8 <__ccfg+0xe21900>
	sti_tim;
     3b8:	00000a02 	andeq	r0, r0, r2, lsl #20
}
     3bc:	3f012e1a 	svccc	0x00012e1a
     3c0:	3a0e030c 	bcc	380ff8 <__ccfg+0x361050>
     3c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3c8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     3cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	cli_aux;
     3d0:	010a4001 	tsteq	sl, r1
     3d4:	1b000013 	blne	428 <AONRTCIntHandler+0x30>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     3dc:	00001301 	andeq	r1, r0, r1, lsl #6
     3e0:	0300341c 	movweq	r3, #1052	; 0x41c
     3e4:	3b0b3a08 	blcc	2cec0c <__ccfg+0x2aec64>
	sti_aux;
     3e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     3ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     3f0:	1331001d 	teqne	r1, #29
     3f4:	01120111 	tsteq	r2, r1, lsl r1
void AONRTCIntHandler () {
     3f8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fc:	00000b57 	andeq	r0, r0, r7, asr fp
     400:	3f012e1e 	svccc	0x00012e1e
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	3a0e030c 	bcc	38103c <__ccfg+0x361094>
		if (__pi_utims [0] == 0)
     408:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     40c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		if (*(__pi_utims [0])) {
     410:	010a4001 	tsteq	sl, r1
     414:	1f000013 	svcne	0x00000013
			(*(__pi_utims [0]))--;
     418:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		if (__pi_utims [1] == 0)
     41c:	0b3b0b3a 	bleq	ec310c <__ccfg+0xea3164>
		if (*(__pi_utims [1])) {
     420:	00000b39 	andeq	r0, r0, r9, lsr fp
			aux_timer_inactive = 0;
     424:	31011d20 	tstcc	r1, r0, lsr #26
			(*(__pi_utims [1]))--;
     428:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		if (__pi_utims [2] == 0)
     42c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		if (*(__pi_utims [2])) {
     430:	010b5705 	tsteq	fp, r5, lsl #14
			(*(__pi_utims [2]))--;
     434:	21000013 	tstcs	r0, r3, lsl r0
		if (__pi_utims [3] != 0) {
     438:	13310005 	teqne	r1, #5
			if (*(__pi_utims [3])) {
     43c:	1d220000 	stcne	0, cr0, [r2, #-0]
				aux_timer_inactive = 0;
     440:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
				(*(__pi_utims [3]))--;
     444:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	if (__pi_systat.ledsts) {
     448:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     44c:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (__pi_systat.ledblc++ == 0) {
     450:	010b2300 	mrseq	r2, (UNDEF: 59)
     454:	00000655 	andeq	r0, r0, r5, asr r6
			if (__pi_systat.ledblk) {
     458:	31000a24 	tstcc	r0, r4, lsr #20
     45c:	00011113 	andeq	r1, r1, r3, lsl r1
     460:	001d2500 	andseq	r2, sp, r0, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	01521331 	cmpeq	r2, r1, lsr r3
     468:	0b580655 	bleq	1601dc4 <__ccfg+0x15e1e1c>
				if (__pi_systat.ledsts & 0x2)
     46c:	0b570559 	bleq	15c19d8 <__ccfg+0x15a1a30>
     470:	1d260000 	stcne	0, cr0, [r6, #-0]
     474:	11133101 	tstne	r3, r1, lsl #2
				if (__pi_systat.ledsts & 0x4)
     478:	58011201 	stmdapl	r1, {r0, r9, ip}
				__pi_systat.ledblk = 0;
     47c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     480:	0013010b 	andseq	r0, r3, fp, lsl #2
			if (__pi_systat.fstblk)
     484:	011d2700 	tsteq	sp, r0, lsl #14
     488:	01111331 	tsteq	r1, r1, lsr r3
				__pi_systat.ledblc = 200;
     48c:	0b580112 	bleq	16008dc <__ccfg+0x15e0934>
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	0b570559 	bleq	15c19fc <__ccfg+0x15a1a54>
		cli_tim;
     494:	1d280000 	stcne	0, cr0, [r8, #-0]
		__pi_new += setdel;
     498:	11133100 	tstne	r3, r0, lsl #2
     49c:	58011201 	stmdapl	r1, {r0, r9, ip}
		setdel = 0;
     4a0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		RISE_N_SHINE;
     4a4:	2900000b 	stmdbcs	r0, {r0, r1, r3}
		__pi_new += setdel;
     4a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		RISE_N_SHINE;
     4ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4b0:	13490b39 	movtne	r0, #39737	; 0x9b39
		aux_timer_inactive = 1;
     4b4:	00000602 	andeq	r0, r0, r2, lsl #12
     4b8:	03012e2a 	movweq	r2, #7722	; 0x1e2a
				if (__pi_systat.ledsts & 0x1)
     4bc:	3b0b3a0e 	blcc	2cecfc <__ccfg+0x2aed54>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c0:	200b3905 	andcs	r3, fp, r5, lsl #18
     4c4:	0013010b 	andseq	r0, r3, fp, lsl #2
				if (__pi_systat.ledsts & 0x2)
     4c8:	000a2b00 	andeq	r2, sl, r0, lsl #22
     4cc:	0b3a0e03 	bleq	e83ce0 <__ccfg+0xe63d38>
     4d0:	0b39053b 	bleq	e419c4 <__ccfg+0xe21a1c>
				if (__pi_systat.ledsts & 0x8)
     4d4:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
				__pi_systat.ledblk = 1;
     4d8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     4dc:	3b0b3a0e 	blcc	2ced1c <__ccfg+0x2aed74>
		if (aux_timer_inactive) {
     4e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			cli_aux;
     4e4:	1201110c 	andne	r1, r1, #12, 2
     4e8:	010a4001 	tsteq	sl, r1
     4ec:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     4f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     4f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4f8:	13490b39 	movtne	r0, #39737	; 0x9b39
     4fc:	00000602 	andeq	r0, r0, r2, lsl #12
     500:	11010b2e 	tstne	r1, lr, lsr #22
     504:	01011201 	tsteq	r1, r1, lsl #4
     508:	2f000013 	svccs	0x00000013
word tci_update_delay_ticks (Boolean force) {
     50c:	13310034 	teqne	r1, #52	; 0x34
	cli_tim;
     510:	0b300000 	bleq	c00518 <__ccfg+0xbe0570>
     514:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
	if (setdel) {
     518:	31000006 	tstcc	r0, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	13310034 	teqne	r1, #52	; 0x34
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	00000602 	andeq	r0, r0, r2, lsl #12
     524:	31011d32 	tstcc	r1, r2, lsr sp
     528:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	000b570b 	andeq	r5, fp, fp, lsl #14
	return NO;
     534:	011d3300 	tsteq	sp, r0, lsl #6
			setdel = 0;
     538:	01521331 	cmpeq	r2, r1, lsr r3
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	0b580655 	bleq	1601e98 <__ccfg+0x15e1ef0>
     540:	0b570559 	bleq	15c1aac <__ccfg+0x15a1b04>
}
     544:	05340000 	ldreq	r0, [r4, #-0]!
		sti_tim;
     548:	3a080300 	bcc	201150 <__ccfg+0x1e11a8>
		return YES;
     54c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     550:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     554:	3500000a 	strcc	r0, [r0, #-10]
     558:	13310005 	teqne	r1, #5
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	00000602 	andeq	r0, r0, r2, lsl #12
	UARTDisable (UART0_BASE);
     560:	03003436 	movweq	r3, #1078	; 0x436
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	3b0b3a08 	blcc	2ced8c <__ccfg+0x2aede4>
	UARTDisable (UART0_BASE);
     568:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	UARTConfigSetExpClk (UART0_BASE,
     56c:	00060213 	andeq	r0, r6, r3, lsl r2
     570:	010b3700 	tsteq	fp, r0, lsl #14
     574:	01120111 	tsteq	r2, r1, lsl r1
     578:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	3a0e0300 	bcc	381184 <__ccfg+0x3611dc>
     580:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     584:	000b200b 	andeq	r2, fp, fp
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     58c:	0b3a0e03 	bleq	e83da0 <__ccfg+0xe63df8>
     590:	0b39053b 	bleq	e41a84 <__ccfg+0xe21adc>
	urates [0] = rate;
     594:	01110c27 	tsteq	r1, r7, lsr #24
}
     598:	0a400112 	beq	10009e8 <__ccfg+0xfe0a40>
     59c:	00001301 	andeq	r1, r0, r1, lsl #6
     5a0:	03012e3a 	movweq	r2, #7738	; 0x1e3a
     5a4:	3b0b3a0e 	blcc	2cede4 <__ccfg+0x2aee3c>
     5a8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     5ac:	1113490c 	tstne	r3, ip, lsl #18
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	40011201 	andmi	r1, r1, r1, lsl #4
     5b4:	0013010a 	andseq	r0, r3, sl, lsl #2
     5b8:	00053b00 	andeq	r3, r5, r0, lsl #22
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	0b3a0803 	bleq	e825d0 <__ccfg+0xe62628>
     5c0:	0b39053b 	bleq	e41ab4 <__ccfg+0xe21b0c>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	06021349 	streq	r1, [r2], -r9, asr #6
     5c8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	3a0e0301 	bcc	3811d8 <__ccfg+0x361230>
     5d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5d4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     5d8:	010a4001 	tsteq	sl, r1
     5dc:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     5e0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 530 <tci_update_delay_ticks+0x24>
     5e4:	0b3a0e03 	bleq	e83df8 <__ccfg+0xe63e50>
	switch (operation) {
     5e8:	0b39053b 	bleq	e41adc <__ccfg+0xe21b34>
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ec:	13490c27 	movtne	r0, #39975	; 0x9c27
     5f0:	13010b20 	movwne	r0, #6944	; 0x1b20
     5f4:	053e0000 	ldreq	r0, [lr, #-0]!
     5f8:	3a080300 	bcc	201200 <__ccfg+0x1e1258>
     5fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				*buf++ = uart_a_read;
     600:	0013490b 	andseq	r4, r3, fp, lsl #18
     604:	000a3f00 	andeq	r3, sl, r0, lsl #30
			while (len && uart_a_char_available) {
     608:	0b3a0803 	bleq	e8261c <__ccfg+0xe62674>
     60c:	0b39053b 	bleq	e41b00 <__ccfg+0xe21b58>
     610:	34400000 	strbcc	r0, [r0], #-0
			if (len != operation) {
     614:	3a0e0300 	bcc	38121c <__ccfg+0x361274>
}
     618:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     61c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			uart_a_disable_int;
     620:	41000006 	tstmi	r0, r6
			if (uart_a_char_available) {
     624:	0803000a 	stmdaeq	r3, {r1, r3}
				*buf++ = uart_a_read;
     628:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			uart_a_disable_int;
     62c:	01110b39 	tsteq	r1, r9, lsr fp
     630:	1d420000 	stclne	0, cr0, [r2, #-0]
			if (uart_a_char_available) {
     634:	11133101 	tstne	r3, r1, lsl #2
     638:	58011201 	stmdapl	r1, {r0, r9, ip}
				uart_a_enable_int;
     63c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     640:	0013010b 	andseq	r0, r3, fp, lsl #2
				goto Redo_rx;
     644:	011d4300 	tsteq	sp, r0, lsl #6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	01111331 	tsteq	r1, r1, lsr r3
     64c:	0b580112 	bleq	1600a9c <__ccfg+0x15e0af4>
			return -2;
     650:	0b570b59 	bleq	15c33bc <__ccfg+0x15a3414>
     654:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
				uart_a_write (*buf);
     658:	3a0e0301 	bcc	381264 <__ccfg+0x3612bc>
     65c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (len && uart_a_room_in_tx) {
     660:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     664:	010b2013 	tsteq	fp, r3, lsl r0
     668:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
			if (len != operation) {
     66c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
			uart_a_disable_int;
     670:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     674:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (uart_a_room_in_tx) {
     678:	00000b20 	andeq	r0, r0, r0, lsr #22
     67c:	03012e46 	movweq	r2, #7750	; 0x1e46
				uart_a_enable_int;
     680:	3b0b3a0e 	blcc	2ceec0 <__ccfg+0x2aef18>
     684:	200b390b 	andcs	r3, fp, fp, lsl #18
				*buf++ = uart_a_read;
     688:	0013010b 	andseq	r0, r3, fp, lsl #2
			if (uart_a_room_in_tx) {
     68c:	00344700 	eorseq	r4, r4, r0, lsl #14
				uart_a_write (*buf);
     690:	0b3a0803 	bleq	e826a4 <__ccfg+0xe626fc>
     694:	0b390b3b 	bleq	e43388 <__ccfg+0xe233e0>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	00001349 	andeq	r1, r0, r9, asr #6
     69c:	00010b48 	andeq	r0, r1, r8, asr #22
			uart_a_enable_int;
     6a0:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
     6a4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6a8:	0b3b0b3a 	bleq	ec3398 <__ccfg+0xea33f0>
			return 0;
     6ac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (len == UART_CNTRL_SETRATE) {
     6b0:	01120111 	tsteq	r2, r1, lsl r1
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	13010a40 	movwne	r0, #6720	; 0x1a40
     6b8:	054a0000 	strbeq	r0, [sl, #-0]
     6bc:	3a080300 	bcc	2012c4 <__ccfg+0x1e131c>
				syserror (EREQPAR, "uar");
     6c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			syserror (ENOOPER, "uai");
     6c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if (len == UART_CNTRL_GETRATE) {
     6c8:	4b000006 	blmi	6e8 <ioreq_uart_a+0x100>
				return 1;
     6cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	0b3b0b3a 	bleq	ec33c0 <__ccfg+0xea3418>
			syserror (ENOOPER, "uai");
     6d4:	13490b39 	movtne	r0, #39737	; 0x9b39
     6d8:	00000a02 	andeq	r0, r0, r2, lsl #20
     6dc:	03000a4c 	movweq	r0, #2636	; 0xa4c
     6e0:	3b0b3a0e 	blcc	2cef20 <__ccfg+0x2aef78>
     6e4:	110b390b 	tstne	fp, fp, lsl #18
     6e8:	4d000001 	stcmi	0, cr0, [r0, #-4]
     6ec:	1331001d 	teqne	r1, #29
     6f0:	06550152 			; <UNDEFINED> instruction: 0x06550152
     6f4:	0b590b58 	bleq	164345c <__ccfg+0x16234b4>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	00000b57 	andeq	r0, r0, r7, asr fp
void UART0IntHandler () {
     6fc:	3f002e4e 	svccc	0x00002e4e
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	3a0e030c 	bcc	381338 <__ccfg+0x361390>
     704:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     708:	110c270b 	tstne	ip, fp, lsl #14
     70c:	40011201 	andmi	r1, r1, r1, lsl #4
     710:	4f00000a 	svcmi	0x0000000a
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	08030005 	stmdaeq	r3, {r0, r2}
     718:	0b3b0b3a 	bleq	ec3408 <__ccfg+0xea3460>
		RISE_N_SHINE;
     71c:	13490b39 	movtne	r0, #39737	; 0x9b39
     720:	00000a02 	andeq	r0, r0, r2, lsl #20
		i_trigger (devevent (UART_A, READ));
     724:	03012e50 	movweq	r2, #7760	; 0x1e50
     728:	3b0b3a0e 	blcc	2cef68 <__ccfg+0x2aefc0>
     72c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     730:	010b200c 	tsteq	fp, ip
     734:	51000013 	tstpl	r0, r3, lsl r0
     738:	08030005 	stmdaeq	r3, {r0, r2}
     73c:	0b3b0b3a 	bleq	ec342c <__ccfg+0xea3484>
     740:	13490b39 	movtne	r0, #39737	; 0x9b39
     744:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
     748:	3a0e0301 	bcc	381354 <__ccfg+0x3613ac>
     74c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     750:	200c270b 	andcs	r2, ip, fp, lsl #14
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	0013010b 	andseq	r0, r3, fp, lsl #2
     758:	00055300 	andeq	r5, r5, r0, lsl #6
     75c:	0b3a0e03 	bleq	e83f70 <__ccfg+0xe63fc8>
		i_trigger (devevent (UART_A, WRITE));
     760:	0b39053b 	bleq	e41c54 <__ccfg+0xe21cac>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	00001349 	andeq	r1, r0, r9, asr #6
     768:	03002e54 	movweq	r2, #3668	; 0xe54
		RISE_N_SHINE;
     76c:	3b0b3a0e 	blcc	2cefac <__ccfg+0x2af004>
     770:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     774:	000b200c 	andeq	r2, fp, ip
		i_trigger (devevent (UART_A, WRITE));
     778:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
     77c:	0b3a0e03 	bleq	e83f90 <__ccfg+0xe63fe8>
     780:	0b390b3b 	bleq	e43474 <__ccfg+0xe234cc>
     784:	13490c27 	movtne	r0, #39975	; 0x9c27
     788:	13010b20 	movwne	r0, #6944	; 0x1b20
     78c:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
     790:	3a0e0300 	bcc	381398 <__ccfg+0x3613f0>
     794:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     798:	200c270b 	andcs	r2, ip, fp, lsl #14
     79c:	5700000b 	strpl	r0, [r0, -fp]
     7a0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
     7a4:	0b3b0b3a 	bleq	ec3494 <__ccfg+0xea34ec>
     7a8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7ac:	0b201349 	bleq	8054d8 <__ccfg+0x7e5530>
     7b0:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
     7b4:	3a0e0300 	bcc	3813bc <__ccfg+0x361414>
void __buttons_setirq (int val) {
     7b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     7c0:	000b2013 	andeq	r2, fp, r3, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
     7c8:	01111331 	tsteq	r1, r1, lsr r3
     7cc:	0a400112 	beq	1000c1c <__ccfg+0xfe0c74>
		bn = BUTTON_GPIO (__button_list [i]);
     7d0:	01000000 	mrseq	r0, (UNDEF: 0)
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     7d8:	0e030b13 	vmoveq.32	d3[0], r0
     7dc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     7e0:	06100111 			; <UNDEFINED> instruction: 0x06100111
     7e4:	24020000 	strcs	r0, [r2], #-0
     7e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
}
     7ec:	000e030b 	andeq	r0, lr, fp, lsl #6
     7f0:	00160300 	andseq	r0, r6, r0, lsl #6
     7f4:	0b3a0e03 	bleq	e84008 <__ccfg+0xe64060>
     7f8:	0b390b3b 	bleq	e434ec <__ccfg+0xe23544>
void __pinlist_setirq (int val) {
     7fc:	00001349 	andeq	r1, r0, r9, asr #6
	for (i = 0; i < N_PINLIST; i++) {
     800:	0b002404 	bleq	9818 <__exidx_end+0x6b94>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	05000008 	streq	r0, [r0, #-8]
	for (i = 0; i < N_PINLIST; i++) {
     80c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     810:	0b3a0b0b 	bleq	e83444 <__ccfg+0xe6349c>
     814:	13010b3b 	movwne	r0, #6971	; 0x1b3b
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     818:	0d060000 	stceq	0, cr0, [r6, #-0]
     81c:	490e0300 	stmdbmi	lr, {r8, r9}
     820:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
	for (i = 0; i < N_PINLIST; i++) {
     824:	0700000c 	streq	r0, [r0, -ip]
}
     828:	0b0b000f 	bleq	2c086c <__ccfg+0x2a08c4>
     82c:	26080000 	strcs	r0, [r8], -r0
     830:	00134900 	andseq	r4, r3, r0, lsl #18
     834:	00350900 	eorseq	r0, r5, r0, lsl #18
void GPIOIntHandler () {
     838:	00001349 	andeq	r1, r0, r9, asr #6
if (buttons_int) {
     83c:	0b000f0a 	bleq	446c <__exidx_end+0x17e8>
     840:	0013490b 	andseq	r4, r3, fp, lsl #18
	buttons_disable ();
     844:	01130b00 	tsteq	r3, r0, lsl #22
     848:	0b3a0b0b 	bleq	e8347c <__ccfg+0xe634d4>
	i_trigger ((aword)&__button_list);
     84c:	0b390b3b 	bleq	e43540 <__ccfg+0xe23598>
     850:	00001301 	andeq	r1, r0, r1, lsl #6
     854:	03000d0c 	movweq	r0, #3340	; 0xd0c
     858:	3b0b3a0e 	blcc	2cf098 <__ccfg+0x2af0f0>
     85c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     860:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     864:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     868:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     86c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     870:	0b3b0b3a 	bleq	ec3560 <__ccfg+0xea35b8>
     874:	13490b39 	movtne	r0, #39737	; 0x9b39
	RISE_N_SHINE;
     878:	00000b38 	andeq	r0, r0, r8, lsr fp
     87c:	0300340e 	movweq	r3, #1038	; 0x40e
     880:	3b0b3a0e 	blcc	2cf0c0 <__ccfg+0x2af118>
if (pin_sensor_int) {
     884:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     888:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	i_trigger ((aword)(&__input_pins));
     88c:	0f00000c 	svceq	0x0000000c
     890:	13490101 	movtne	r0, #37121	; 0x9101
     894:	00001301 	andeq	r1, r0, r1, lsl #6
     898:	00002110 	andeq	r2, r0, r0, lsl r1
     89c:	00161100 	andseq	r1, r6, r0, lsl #2
     8a0:	0b3a0e03 	bleq	e840b4 <__ccfg+0xe6410c>
     8a4:	0b39053b 	bleq	e41d98 <__ccfg+0xe21df0>
     8a8:	00001349 	andeq	r1, r0, r9, asr #6
     8ac:	27011512 	smladcs	r1, r2, r5, r1
     8b0:	0013010c 	andseq	r0, r3, ip, lsl #2
     8b4:	00051300 	andeq	r1, r5, r0, lsl #6
	__pinsen_disable_and_clear;
     8b8:	00001349 	andeq	r1, r0, r9, asr #6
	RISE_N_SHINE;
     8bc:	03003414 	movweq	r3, #1044	; 0x414
     8c0:	3b0b3a0e 	blcc	2cf100 <__ccfg+0x2af158>
     8c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     8c8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     8cc:	1500000c 	strne	r0, [r0, #-12]
     8d0:	0b0b0113 	bleq	2c0d24 <__ccfg+0x2a0d7c>
     8d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8d8:	13010b39 	movwne	r0, #6969	; 0x1b39
void system_init () {
     8dc:	0d160000 	ldceq	0, cr0, [r6, #-0]
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	3a0e0300 	bcc	3814e8 <__ccfg+0x361540>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     8ec:	1700000b 	strne	r0, [r0, -fp]
     8f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	0b3a0b0b 	bleq	e83528 <__ccfg+0xe63580>
     8f8:	0b39053b 	bleq	e41dec <__ccfg+0xe21e44>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	00001301 	andeq	r1, r0, r1, lsl #6
     900:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
     904:	000b2f13 	andeq	r2, fp, r3, lsl pc
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	01151900 	tsteq	r5, r0, lsl #18
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	13490c27 	movtne	r0, #39975	; 0x9c27
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	4700341a 	smladmi	r0, sl, r4, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	3b0b3a13 	blcc	2cf16c <__ccfg+0x2af1c4>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	1b00000a 	blne	950 <system_init+0x74>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		pin = (port_confs [i] >> 19) & 0x1f;
     928:	0b3b0b3a 	bleq	ec3618 <__ccfg+0xea3670>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92c:	13490b39 	movtne	r0, #39737	; 0x9b39
     930:	0a020c3f 	beq	83a34 <__ccfg+0x63a8c>
     934:	341c0000 	ldrcc	r0, [ip], #-0
     938:	3a0e0300 	bcc	381540 <__ccfg+0x361598>
		if (port_confs [i] & 0x80)
     93c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     944:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
		if (port_confs [i] & 0x40)
     948:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     950:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     954:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	3f002e1e 	svccc	0x00002e1e
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95c:	3a0e030c 	bcc	381594 <__ccfg+0x3615ec>
	all_leds_blink;
     960:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     964:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     968:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     96c:	000a4001 	andeq	r4, sl, r1
     970:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     974:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     978:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     980:	01120111 	tsteq	r2, r1, lsl r1
     984:	13010a40 	movwne	r0, #6720	; 0x1a40
     988:	05200000 	streq	r0, [r0, #-0]!
     98c:	3a0e0300 	bcc	381594 <__ccfg+0x3615ec>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     998:	21000006 	tstcs	r0, r6
	IntEnable (INT_AON_RTC_COMB);
     99c:	00000018 	andeq	r0, r0, r8, lsl r0
     9a0:	03003422 	movweq	r3, #1058	; 0x422
     9a4:	3b0b3a08 	blcc	2cf1cc <__ccfg+0x2af224>
	__pi_malloc_init ();
     9a8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	IntEnable (INT_AON_GPIO_EDGE);
     9ac:	00060213 	andeq	r0, r6, r3, lsl r2
     9b0:	00342300 	eorseq	r2, r4, r0, lsl #6
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	0b3a0803 	bleq	e829c8 <__ccfg+0xe62a20>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	0b39053b 	bleq	e41eac <__ccfg+0xe21f04>
     9bc:	0a021349 	beq	856e8 <__ccfg+0x65740>
     9c0:	34240000 	strtcc	r0, [r4], #-0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	3a080300 	bcc	2015cc <__ccfg+0x1e1624>
     9c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	0013490b 	andseq	r4, r3, fp, lsl #18
     9d0:	000a2500 	andeq	r2, sl, r0, lsl #10
     9d4:	0b3a0e03 	bleq	e841e8 <__ccfg+0xe64240>
	urates [0] = UART_RATE / 100;
     9d8:	0b39053b 	bleq	e41ecc <__ccfg+0xe21f24>
     9dc:	00000111 	andeq	r0, r0, r1, lsl r1
	reinit_uart ();
     9e0:	11010b26 	tstne	r1, r6, lsr #22
	EXTRA_INITIALIZERS;
     9e4:	01011201 	tsteq	r1, r1, lsl #4
     9e8:	27000013 	smladcs	r0, r3, r0, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     9f0:	00001301 	andeq	r1, r0, r1, lsl #6
     9f4:	31011d28 	tstcc	r1, r8, lsr #26
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     9fc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	000b5705 	andeq	r5, fp, r5, lsl #14
     a04:	00052900 	andeq	r2, r5, r0, lsl #18
			devinit [i] . init (devinit [i] . param);
     a08:	00001331 	andeq	r1, r0, r1, lsr r3
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     a10:	3b0b3a0e 	blcc	2cf250 <__ccfg+0x2af2a8>
     a14:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	IntEnable (INT_UART0_COMB);
     a18:	1201110c 	andne	r1, r1, #12, 2
     a1c:	010a4001 	tsteq	sl, r1
}
     a20:	2b000013 	blcs	a74 <system_init+0x198>
	tci_run_auxiliary_timer ();
     a24:	08030005 	stmdaeq	r3, {r0, r2}
		diag ("");
     a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a2c:	13490b39 	movtne	r0, #39737	; 0x9b39
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	00000602 	andeq	r0, r0, r2, lsl #12
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	3f012e2c 	svccc	0x00012e2c
		diag ("Leftover RAM: %d bytes",
     a38:	3a0e030c 	bcc	381670 <__ccfg+0x3616c8>
     a3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a40:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     a44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a48:	010a4001 	tsteq	sl, r1
     a4c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     a50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a58:	13490b39 	movtne	r0, #39737	; 0x9b39
     a5c:	00000602 	andeq	r0, r0, r2, lsl #12
     a60:	3f012e2e 	svccc	0x00012e2e
     a64:	3a0e030c 	bcc	38169c <__ccfg+0x3616f4>
     a68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a6c:	200c270b 	andcs	r2, ip, fp, lsl #14
     a70:	0013010b 	andseq	r0, r3, fp, lsl #2
     a74:	00052f00 	andeq	r2, r5, r0, lsl #30
     a78:	0b3a0803 	bleq	e82a8c <__ccfg+0xe62ae4>
     a7c:	0b39053b 	bleq	e41f70 <__ccfg+0xe21fc8>
     a80:	00001349 	andeq	r1, r0, r9, asr #6
     a84:	3f012e30 	svccc	0x00012e30
     a88:	3a0e030c 	bcc	3816c0 <__ccfg+0x361718>
     a8c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a90:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
__attribute__ ((noreturn)) void __pi_release () {
     a94:	010a4001 	tsteq	sl, r1
     a98:	31000013 	tstcc	r0, r3, lsl r0
     a9c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 9ec <system_init+0x110>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     aa0:	0b3a0803 	bleq	e82ab4 <__ccfg+0xe62b0c>
	check_stack_overflow;
     aa4:	0b39053b 	bleq	e41f98 <__ccfg+0xe21ff0>
     aa8:	13490c27 	movtne	r0, #39975	; 0x9c27
     aac:	01120111 	tsteq	r2, r1, lsl r1
	update_n_wake (MAX_WORD, NO);
     ab0:	13010a40 	movwne	r0, #6720	; 0x1a40
     ab4:	05320000 	ldreq	r0, [r2, #-0]!
     ab8:	3a080300 	bcc	2016c0 <__ccfg+0x1e1718>
	for_all_tasks (__pi_curr) {
     abc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ac4:	3300000a 	movwcc	r0, #10
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; a18 <system_init+0x13c>
	__SLEEP;
     acc:	0b3a0e03 	bleq	e842e0 <__ccfg+0xe64338>
     ad0:	0b39053b 	bleq	e41fc4 <__ccfg+0xe2201c>
     ad4:	01110c27 	tsteq	r1, r7, lsr #24
     ad8:	0a400112 	beq	1000f28 <__ccfg+0xfe0f80>
	system_event_count ++;
     adc:	05340000 	ldreq	r0, [r4, #-0]!
     ae0:	3a0e0300 	bcc	3816e8 <__ccfg+0x361740>
	switch (__pi_systat.effpdm) {
     ae4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     aec:	3500000a 	strcc	r0, [r0, #-10]
     af0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			__WFI ();
     af4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     af8:	13490b39 	movtne	r0, #39737	; 0x9b39
     afc:	0b360000 	bleq	d80b04 <__ccfg+0xd60b5c>
	check_stack_overflow;
     b00:	00065501 	andeq	r5, r6, r1, lsl #10
     b04:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b08:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b0c:	0b3b0b3a 	bleq	ec37fc <__ccfg+0xea3854>
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			goto Redo;
     b14:	13010b20 	movwne	r0, #6944	; 0x1b20
	for_all_tasks (__pi_curr) {
     b18:	05380000 	ldreq	r0, [r8, #-0]!
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	3a080300 	bcc	201724 <__ccfg+0x1e177c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b24:	0013490b 	andseq	r4, r3, fp, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	00053900 	andeq	r3, r5, r0, lsl #18
     b2c:	0b3a0e03 	bleq	e84340 <__ccfg+0xe64398>
     b30:	0b390b3b 	bleq	e43824 <__ccfg+0xe2387c>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b34:	00001349 	andeq	r1, r0, r9, asr #6
     b38:	0300343a 	movweq	r3, #1082	; 0x43a
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b3c:	3b0b3a08 	blcc	2cf364 <__ccfg+0x2af3bc>
     b40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			__WFI ();
     b44:	3b000013 	blcc	b98 <__pi_release+0x104>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	0803000a 	stmdaeq	r3, {r1, r3}
     b4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     b50:	00000b39 	andeq	r0, r0, r9, lsr fp
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b54:	3f012e3c 	svccc	0x00012e3c
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	3a0e030c 	bcc	381790 <__ccfg+0x3617e8>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b60:	110c270b 	tstne	ip, fp, lsl #14
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b64:	40011201 	andmi	r1, r1, r1, lsl #4
     b68:	0013010a 	andseq	r0, r3, sl, lsl #2
     b6c:	00053d00 	andeq	r3, r5, r0, lsl #26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b70:	0b3a0803 	bleq	e82b84 <__ccfg+0xe62bdc>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b74:	0b390b3b 	bleq	e43868 <__ccfg+0xe238c0>
     b78:	06021349 	streq	r1, [r2], -r9, asr #6
     b7c:	343e0000 	ldrtcc	r0, [lr], #-0
     b80:	3a080300 	bcc	201788 <__ccfg+0x1e17e0>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	3f000006 	svccc	0x00000006
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; ae0 <__pi_release+0x4c>
     b94:	0b3a0e03 	bleq	e843a8 <__ccfg+0xe64400>
     b98:	0b390b3b 	bleq	e4388c <__ccfg+0xe238e4>
     b9c:	01110c27 	tsteq	r1, r7, lsr #24
     ba0:	0a400112 	beq	1000ff0 <__ccfg+0xfe1048>
			SysCtrlSetRechargeBeforePowerDown
     ba4:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	3a0e0301 	bcc	3817b4 <__ccfg+0x36180c>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	010b2013 	tsteq	fp, r3, lsl r0
     bb8:	41000013 	tstmi	r0, r3, lsl r0
     bbc:	0e03012e 	adfeqsp	f0, f3, #0.5
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bc4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	0b201349 	bleq	8058f4 <__ccfg+0x7e594c>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	00001301 	andeq	r1, r0, r1, lsl #6
     bd0:	31012e42 	tstcc	r1, r2, asr #28
     bd4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd8:	010a4001 	tsteq	sl, r1
			while (!(AONWUCPowerStatusGet () &
     bdc:	43000013 	movwmi	r0, #19
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	13310005 	teqne	r1, #5
     be4:	00000602 	andeq	r0, r0, r2, lsl #12
     be8:	31003444 	tstcc	r0, r4, asr #8
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bec:	00060213 	andeq	r0, r6, r3, lsl r2
     bf0:	011d4500 	tsteq	sp, r0, lsl #10
     bf4:	01111331 	tsteq	r1, r1, lsr r3
     bf8:	0b580112 	bleq	1601048 <__ccfg+0x15e10a0>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	0b570b59 	bleq	15c3968 <__ccfg+0x15a39c0>
     c00:	34460000 	strbcc	r0, [r6], #-0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	00133100 	andseq	r3, r3, r0, lsl #2
     c08:	011d4700 	tsteq	sp, r0, lsl #14
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0c:	01521331 	cmpeq	r2, r1, lsr r3
			reinit_uart ();
     c10:	0b580655 	bleq	160256c <__ccfg+0x15e25c4>
     c14:	0b570b59 	bleq	15c3980 <__ccfg+0x15a39d8>
     c18:	0a480000 	beq	1200c20 <__ccfg+0x11e0c78>
}
     c1c:	11133100 	tstne	r3, r0, lsl #2
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	49000001 	stmdbmi	r0, {r0}
     c24:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	01120111 	tsteq	r2, r1, lsl r1
     c2c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     c30:	00000b57 	andeq	r0, r0, r7, asr fp
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	31012e4a 	tstcc	r1, sl, asr #28
     c38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c3c:	000a4001 	andeq	r4, sl, r1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c40:	11010000 	mrsne	r0, (UNDEF: 1)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	130e2501 	movwne	r2, #58625	; 0xe501
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	1b0e030b 	blne	38187c <__ccfg+0x3618d4>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	1106550e 	tstne	r6, lr, lsl #10
     c50:	00061001 	andeq	r1, r6, r1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c54:	00240200 	eoreq	r0, r4, r0, lsl #4
     c58:	0b3e0b0b 	bleq	f8388c <__ccfg+0xf638e4>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5c:	00000e03 	andeq	r0, r0, r3, lsl #28
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c60:	03001603 	movweq	r1, #1539	; 0x603
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	3b0b3a0e 	blcc	2cf4a4 <__ccfg+0x2af4fc>
     c68:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			PRCMPowerDomainOff (
     c6c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     c70:	0b0b0024 	bleq	2c0d08 <__ccfg+0x2a0d60>
	__SLEEP;
     c74:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     c78:	13050000 	movwne	r0, #20480	; 0x5000
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	0b0e0301 	bleq	381888 <__ccfg+0x3618e0>
	goto Redo;
     c80:	3b0b3a0b 	blcc	2cf4b4 <__ccfg+0x2af50c>
     c84:	0013010b 	andseq	r0, r3, fp, lsl #2
     c88:	000d0600 	andeq	r0, sp, r0, lsl #12
     c8c:	13490e03 	movtne	r0, #40451	; 0x9e03
     c90:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     c94:	0f070000 	svceq	0x00070000
     c98:	000b0b00 	andeq	r0, fp, r0, lsl #22
     c9c:	00260800 	eoreq	r0, r6, r0, lsl #16
     ca0:	00001349 	andeq	r1, r0, r9, asr #6
     ca4:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     ca8:	0a000013 	beq	cfc <main+0x10>
     cac:	0b0b000f 	bleq	2c0cf0 <__ccfg+0x2a0d48>
     cb0:	00001349 	andeq	r1, r0, r9, asr #6
     cb4:	0b01130b 	bleq	458e8 <__ccfg+0x25940>
     cb8:	3b0b3a0b 	blcc	2cf4ec <__ccfg+0x2af544>
     cbc:	010b390b 	tsteq	fp, fp, lsl #18
     cc0:	0c000013 	stceq	0, cr0, [r0], {19}
     cc4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cc8:	0b3b0b3a 	bleq	ec39b8 <__ccfg+0xea3a10>
     ccc:	13490b39 	movtne	r0, #39737	; 0x9b39
     cd0:	0b0d0b0b 	bleq	343904 <__ccfg+0x32395c>
     cd4:	0b380b0c 	bleq	e0390c <__ccfg+0xde3964>
     cd8:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     cdc:	3a0e0300 	bcc	3818e4 <__ccfg+0x36193c>
     ce0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ce4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ce8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
int main (void) {
     cec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	0b3b0b3a 	bleq	ec39e0 <__ccfg+0xea3a38>
     cf4:	13490b39 	movtne	r0, #39737	; 0x9b39
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	010f0000 	mrseq	r0, CPSR
	system_init ();
     d00:	01134901 	tsteq	r3, r1, lsl #18
	tcv_init ();
     d04:	10000013 	andne	r0, r0, r3, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d08:	00000021 	andeq	r0, r0, r1, lsr #32
     d0c:	03001611 	movweq	r1, #1553	; 0x611
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	3b0b3a0e 	blcc	2cf550 <__ccfg+0x2af5a8>
     d14:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     d18:	12000013 	andne	r0, r0, #19
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     d20:	00001301 	andeq	r1, r0, r1, lsl #6
	delay (16, 0);
     d24:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     d28:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     d2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	__pi_release ();
     d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d34:	13490b39 	movtne	r0, #39737	; 0x9b39
     d38:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     d3c:	15150000 	ldrne	r0, [r5, #-0]
     d40:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     d44:	00130113 	andseq	r0, r3, r3, lsl r1
     d48:	01131600 	tsteq	r3, r0, lsl #12
static void killev (__pi_pcb_t *pid) {
     d4c:	0b0b0e03 	bleq	2c4560 <__ccfg+0x2a45b8>
	wfun = (aword)(pid->code);
     d50:	0b3b0b3a 	bleq	ec3a40 <__ccfg+0xea3a98>
	for_all_tasks (i) {
     d54:	13010b39 	movwne	r0, #6969	; 0x1b39
		for (j = 0; j < nevents (i); j++) {
     d58:	17170000 	ldrne	r0, [r7, -r0]
     d5c:	3a0b0b01 	bcc	2c3968 <__ccfg+0x2a39c0>
     d60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			    || i->Events [j] . Event == wfun
     d64:	0013010b 	andseq	r0, r3, fp, lsl #2
		for (j = 0; j < nevents (i); j++) {
     d68:	000d1800 	andeq	r1, sp, r0, lsl #16
			if (i->Events [j] . Event == (aword)pid
     d6c:	0b3a0e03 	bleq	e84580 <__ccfg+0xe645d8>
     d70:	0b390b3b 	bleq	e43a64 <__ccfg+0xe23abc>
     d74:	00001349 	andeq	r1, r0, r9, asr #6
				wakeupev (i, j);
     d78:	03000d19 	movweq	r0, #3353	; 0xd19
     d7c:	3b0b3a08 	blcc	2cf5a4 <__ccfg+0x2af5fc>
	for_all_tasks (i) {
     d80:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
     d84:	1a000013 	bne	dd8 <qfree+0x50>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	0803000d 	stmdaeq	r3, {r0, r2, r3}
static void qfree (aword *ch) {
     d8c:	0b3b0b3a 	bleq	ec3a7c <__ccfg+0xea3ad4>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d90:	13490b39 	movtne	r0, #39737	; 0x9b39
	cc = (aword*)(mpools + MA_NP);
     d94:	00000b38 	andeq	r0, r0, r8, lsr fp
	m_setnextp (ch, chunk);
     d98:	0b01131b 	bleq	45a0c <__ccfg+0x25a64>
	m_setnextp (cc, ch);
     d9c:	3b0b3a0b 	blcc	2cf5d0 <__ccfg+0x2af628>
}
     da0:	010b3905 	tsteq	fp, r5, lsl #18
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da4:	1c000013 	stcne	0, cr0, [r0], {19}
     da8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			m_setnextp (cc, m_nextp (chunk));
     db0:	13490b39 	movtne	r0, #39737	; 0x9b39
			m_size (chunk) += m_hdrlen + m_size (ch);
     db4:	00000b38 	andeq	r0, r0, r8, lsr fp
     db8:	0301131d 	movweq	r1, #4893	; 0x131d
     dbc:	3a0b0b0e 	bcc	2c39fc <__ccfg+0x2a3a54>
     dc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	0013010b 	andseq	r0, r3, fp, lsl #2
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	00211e00 	eoreq	r1, r1, r0, lsl #28
     dcc:	0b2f1349 	bleq	bc5af8 <__ccfg+0xba5b50>
     dd0:	341f0000 	ldrcc	r0, [pc], #-0	; dd8 <qfree+0x50>
			m_setnextp (cc, m_nextp (chunk));
     dd4:	3a0e0300 	bcc	3819dc <__ccfg+0x361a34>
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ddc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     de0:	2000000a 	andcs	r0, r0, sl
     de4:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d34 <main+0x48>
     de8:	0b3a0e03 	bleq	e845fc <__ccfg+0xe64654>
     dec:	0b39053b 	bleq	e422e0 <__ccfg+0xe22338>
			if (m_size (chunk) >= m_size (ch))
     df0:	01110c27 	tsteq	r1, r7, lsr #24
     df4:	0a400112 	beq	1001244 <__ccfg+0xfe129c>
     df8:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
		chunk = m_nextp (chunk))
     dfc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e00:	3b0b3a0e 	blcc	2cf640 <__ccfg+0x2af698>
     e04:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	1113490c 	tstne	r3, ip, lsl #18
	diag_wait (a);
     e0c:	40011201 	andmi	r1, r1, r1, lsl #4
	diag_wchar (c, a);
     e10:	0013010a 	andseq	r0, r3, sl, lsl #2
     e14:	00052200 	andeq	r2, r5, r0, lsl #4
}
     e18:	0b3a0803 	bleq	e82e2c <__ccfg+0xe62e84>
     e1c:	0b39053b 	bleq	e42310 <__ccfg+0xe22368>
	syserror (ESTATE, "state");
     e20:	06021349 	streq	r1, [r2], -r9, asr #6
     e24:	1d230000 	stcne	0, cr0, [r3, #-0]
     e28:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     e2c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
void update_n_wake (word min, Boolean force) {
     e30:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	2400000b 	strcs	r0, [r0], #-11
     e38:	13310005 	teqne	r1, #5
     e3c:	00000602 	andeq	r0, r0, r2, lsl #12
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e40:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
     e44:	26000006 	strcs	r0, [r0], -r6
     e48:	13310034 	teqne	r1, #52	; 0x34
     e4c:	00000602 	andeq	r0, r0, r2, lsl #12
     e50:	3f012e27 	svccc	0x00012e27
     e54:	3a0e030c 	bcc	381a8c <__ccfg+0x361ae4>
     e58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e5c:	110c270b 	tstne	ip, fp, lsl #14
     e60:	40011201 	andmi	r1, r1, r1, lsl #4
     e64:	0013010a 	andseq	r0, r3, sl, lsl #2
     e68:	00342800 	eorseq	r2, r4, r0, lsl #16
     e6c:	0b3a0803 	bleq	e82e80 <__ccfg+0xe62ed8>
     e70:	0b39053b 	bleq	e42364 <__ccfg+0xe223bc>
		for_all_tasks (i) {
     e74:	06021349 	streq	r1, [r2], -r9, asr #6
	__pi_mintk = znew + min;
     e78:	34290000 	strtcc	r0, [r9], #-0
     e7c:	3a080300 	bcc	201a84 <__ccfg+0x1e1adc>
			if (!twaiting (i))
     e80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e84:	0013490b 	andseq	r4, r3, fp, lsl #18
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	00342a00 	eorseq	r2, r4, r0, lsl #20
     e8c:	0b3a0803 	bleq	e82ea0 <__ccfg+0xe62ef8>
     e90:	0b39053b 	bleq	e42384 <__ccfg+0xe223dc>
     e94:	0a021349 	beq	85bc0 <__ccfg+0x65c18>
     e98:	052b0000 	streq	r0, [fp, #-0]!
     e9c:	3a0e0300 	bcc	381aa4 <__ccfg+0x361afc>
     ea0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ea4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ea8:	2c000006 	stccs	0, cr0, [r0], {6}
     eac:	0c3f012e 	ldfeqs	f0, [pc], #-184	; dfc <qfree+0x74>
     eb0:	0b3a0e03 	bleq	e846c4 <__ccfg+0xe6471c>
     eb4:	0b39053b 	bleq	e423a8 <__ccfg+0xe22400>
				wakeuptm (i);
     eb8:	13490c27 	movtne	r0, #39975	; 0x9c27
     ebc:	13010b20 	movwne	r0, #6944	; 0x1b20
		for_all_tasks (i) {
     ec0:	052d0000 	streq	r0, [sp, #-0]!
				d = i->Timer - znew;
     ec4:	3a0e0300 	bcc	381acc <__ccfg+0x361b24>
     ec8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ecc:	0013490b 	andseq	r4, r3, fp, lsl #18
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	00052e00 	andeq	r2, r5, r0, lsl #28
     ed4:	0b3a0803 	bleq	e82ee8 <__ccfg+0xe62f40>
     ed8:	0b39053b 	bleq	e423cc <__ccfg+0xe22424>
	__pi_old = znew;
     edc:	00001349 	andeq	r1, r0, r9, asr #6
}
     ee0:	11010b2f 	tstne	r1, pc, lsr #22
	TCI_RUN_DELAY_TIMER;
     ee4:	00011201 	andeq	r1, r1, r1, lsl #4
}
     ee8:	00343000 	eorseq	r3, r4, r0
     eec:	0b3a0e03 	bleq	e84700 <__ccfg+0xe64758>
     ef0:	0b39053b 	bleq	e423e4 <__ccfg+0xe2243c>
     ef4:	0a021349 	beq	85c20 <__ccfg+0x65c78>
     ef8:	0a310000 	beq	c40f00 <__ccfg+0xc20f58>
void proceed (word state) {
     efc:	3a0e0300 	bcc	381b04 <__ccfg+0x361b5c>
	prcdstate (__pi_curr, state);
     f00:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f04:	0001110b 	andeq	r1, r1, fp, lsl #2
	release;
     f08:	011d3200 	tsteq	sp, r0, lsl #4
     f0c:	01111331 	tsteq	r1, r1, lsr r3
void __pi_wait (aword event, word state) {
     f10:	0b580112 	bleq	1601360 <__ccfg+0x15e13b8>
	sint j = nevents (__pi_curr);
     f14:	0b570559 	bleq	15c2480 <__ccfg+0x15a24d8>
	if (j >= MAX_EVENTS_PER_TASK)
     f18:	05330000 	ldreq	r0, [r3, #-0]!
     f1c:	00133100 	andseq	r3, r3, r0, lsl #2
     f20:	00053400 	andeq	r3, r5, r0, lsl #8
		syserror (ENEVENTS, "sw");
     f24:	0b3a0803 	bleq	e82f38 <__ccfg+0xe62f90>
     f28:	0b39053b 	bleq	e4241c <__ccfg+0xe22474>
	setestate (__pi_curr->Events [j], state, event);
     f2c:	0a021349 	beq	85c58 <__ccfg+0x65cb0>
	incwait (__pi_curr);
     f30:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
	setestate (__pi_curr->Events [j], state, event);
     f34:	36000000 	strcc	r0, [r0], -r0
}
     f38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f40:	13490b39 	movtne	r0, #39737	; 0x9b39
void __pi_trigger (aword event) {
     f44:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
	for_all_tasks (i) {
     f48:	3a080301 	bcc	201b54 <__ccfg+0x1e1bac>
		for (j = 0; j < nevents (i); j++) {
     f4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f50:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     f54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f58:	010a4001 	tsteq	sl, r1
			if (i->Events [j] . Event == event) {
     f5c:	38000013 	stmdacc	r0, {r0, r1, r4}
     f60:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     f64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				wakeupev (i, j);
     f68:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f6c:	01120111 	tsteq	r2, r1, lsl r1
	for_all_tasks (i) {
     f70:	13010a40 	movwne	r0, #6720	; 0x1a40
}
     f74:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
aword __pi_join (aword pid, word st) {
     f78:	3a0e0301 	bcc	381b84 <__ccfg+0x361bdc>
	for_all_tasks (i) {
     f7c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f80:	200c270b 	andcs	r2, ip, fp, lsl #14
	return 0;
     f84:	0013010b 	andseq	r0, r3, fp, lsl #2
		if ((aword)i == pid) {
     f88:	00053a00 	andeq	r3, r5, r0, lsl #20
			__pi_wait (pid, st);
     f8c:	0b3a0803 	bleq	e82fa0 <__ccfg+0xe62ff8>
}
     f90:	0b390b3b 	bleq	e43c84 <__ccfg+0xe23cdc>
	for_all_tasks (i) {
     f94:	00001349 	andeq	r1, r0, r9, asr #6
     f98:	03012e3b 	movweq	r2, #7739	; 0x1e3b
void delay (word d, word state) {
     f9c:	3b0b3a0e 	blcc	2cf7dc <__ccfg+0x2af834>
	settstate (__pi_curr, state);
     fa0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     fa4:	2013490c 	andscs	r4, r3, ip, lsl #18
     fa8:	0013010b 	andseq	r0, r3, fp, lsl #2
     fac:	00343c00 	eorseq	r3, r4, r0, lsl #24
	update_n_wake (d, YES);
     fb0:	0b3a0803 	bleq	e82fc4 <__ccfg+0xe6301c>
     fb4:	0b390b3b 	bleq	e43ca8 <__ccfg+0xe23d00>
	__pi_curr->Timer = __pi_old + d;
     fb8:	00001349 	andeq	r1, r0, r9, asr #6
     fbc:	03012e3d 	movweq	r2, #7741	; 0x1e3d
	inctimer (__pi_curr);
     fc0:	3b0b3a08 	blcc	2cf7e8 <__ccfg+0x2af840>
     fc4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     fc8:	010b200c 	tsteq	fp, ip
}
     fcc:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     fd0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
	if (fun == NULL)
     fd4:	01120111 	tsteq	r2, r1, lsl r1
		return (int) __pi_curr;
     fd8:	13010a40 	movwne	r0, #6720	; 0x1a40
     fdc:	053f0000 	ldreq	r0, [pc, #-0]!	; fe4 <running+0x10>
	for_all_tasks (i)
     fe0:	02133100 	andseq	r3, r3, #0, 2
}
     fe4:	4000000a 	andmi	r0, r0, sl
		if (i->code == fun)
     fe8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	for_all_tasks (i)
     fec:	01120111 	tsteq	r2, r1, lsl r1
     ff0:	0b590b58 	bleq	1643d58 <__ccfg+0x1623db0>
     ff4:	00000b57 	andeq	r0, r0, r7, asr fp
int __pi_strlen (const char *s) {
     ff8:	31011d41 	tstcc	r1, r1, asr #26
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
}
    1000:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	for (i = 0; *(s+i) != '\0'; i++);
    1004:	000b570b 	andeq	r5, fp, fp, lsl #14
	while (n--)
    1008:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
    100c:	01111331 	tsteq	r1, r1, lsr r3
		*dest++ = *src++;
    1010:	0a400112 	beq	1001460 <__ccfg+0xfe14b8>
    1014:	34430000 	strbcc	r0, [r3], #-0
    1018:	00133100 	andseq	r3, r3, r0, lsl #2
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	11010000 	mrsne	r0, (UNDEF: 1)
		syserror (EREQPAR, "addv");
    1020:	130e2501 	movwne	r2, #58625	; 0xe501
		syserror (ERESOURCE, "addv");
    1024:	1b0e030b 	blne	381c58 <__ccfg+0x361cb0>
	if (ioreq [loc] != NULL)
    1028:	1106550e 	tstne	r6, lr, lsl #10
    102c:	00061001 	andeq	r1, r6, r1
		syserror (ERESOURCE, "addv");
    1030:	00240200 	eoreq	r0, r4, r0, lsl #4
	ioreq [loc] = rf;
    1034:	0b3e0b0b 	bleq	f83c68 <__ccfg+0xf63cc0>
}
    1038:	00000e03 	andeq	r0, r0, r3, lsl #28
    103c:	03001603 	movweq	r1, #1539	; 0x603
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	3b0b3a0e 	blcc	2cf880 <__ccfg+0x2af8d8>
    1044:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1048:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    104c:	0b0b0024 	bleq	2c10e4 <__ccfg+0x2a113c>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1054:	0f050000 	svceq	0x00050000
    1058:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		syserror (ENODEVICE, "io");
    105c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1060:	13490026 	movtne	r0, #36902	; 0x9026
	if (len == 0)
    1064:	15070000 	strne	r0, [r7, #-0]
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	000c2700 	andeq	r2, ip, r0, lsl #14
    106c:	00340800 	eorseq	r0, r4, r0, lsl #16
	if (ret >= 0)
    1070:	0b3a0e03 	bleq	e84884 <__ccfg+0xe648dc>
	if (ret == -1) {
    1074:	0b390b3b 	bleq	e43d68 <__ccfg+0xe23dc0>
    1078:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; f5c <__pi_trigger+0x18>
		if (retry == WNONE)
    107c:	00000c3c 	andeq	r0, r0, ip, lsr ip
		iowait (dev, operation, retry);
    1080:	49010109 	stmdbmi	r1, {r0, r3, r8}
    1084:	00130113 	andseq	r0, r3, r3, lsl r1
    1088:	00210a00 	eoreq	r0, r1, r0, lsl #20
			release;
    108c:	0b2f1349 	bleq	bc5db8 <__ccfg+0xba5e10>
	if (ret == -2) {
    1090:	340b0000 	strcc	r0, [fp], #-0
		if (retry != WNONE) {
    1094:	3a0e0300 	bcc	381c9c <__ccfg+0x361cf4>
    1098:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			iowait (dev, operation, retry);
    109c:	3f13490b 	svccc	0x0013490b
    10a0:	000a020c 	andeq	r0, sl, ip, lsl #4
			(ioreq [dev]) (NONE, buf, len);
    10a4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    10a8:	0b3a0e03 	bleq	e848bc <__ccfg+0xe64914>
    10ac:	0b39053b 	bleq	e425a0 <__ccfg+0xe225f8>
		(ioreq [dev]) (NONE, buf, len);
    10b0:	01110c27 	tsteq	r1, r7, lsr #24
    10b4:	0a400112 	beq	1001504 <__ccfg+0xfe155c>
    10b8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
}
    10bc:	030c3f01 	movweq	r3, #52993	; 0xcf01
	if (retry != WNONE) {
    10c0:	3b0b3a0e 	blcc	2cf900 <__ccfg+0x2af958>
		delay (-ret - 2, retry);
    10c4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10c8:	1201110c 	andne	r1, r1, #12, 2
    10cc:	000a4001 	andeq	r4, sl, r1
    10d0:	00340e00 	eorseq	r0, r4, r0, lsl #28
		release;
    10d4:	0b3a0e03 	bleq	e848e8 <__ccfg+0xe64940>
    10d8:	0b390b3b 	bleq	e43dcc <__ccfg+0xe23e24>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	06021349 	streq	r1, [r2], -r9, asr #6
    10e0:	01000000 	mrseq	r0, (UNDEF: 0)
    10e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    10e8:	0e030b13 	vmoveq.32	d3[0], r0
    10ec:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
		syserror (ERESOURCE, "mal1");
    10f0:	24020000 	strcs	r0, [r2], #-0
    10f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	000e030b 	andeq	r0, lr, fp, lsl #6
    10fc:	00160300 	andseq	r0, r6, r0, lsl #6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1100:	0b3a0e03 	bleq	e84914 <__ccfg+0xe6496c>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1104:	0b390b3b 	bleq	e43df8 <__ccfg+0xe23e50>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1108:	00001349 	andeq	r1, r0, r9, asr #6
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    110c:	0b002404 	bleq	a124 <__exidx_end+0x74a0>
    1110:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    1114:	05000008 	streq	r0, [r0, #-8]
    1118:	0b0b0113 	bleq	2c156c <__ccfg+0x2a15c4>
    111c:	0b3b0b3a 	bleq	ec3e0c <__ccfg+0xea3e64>
    1120:	13010b39 	movwne	r0, #6969	; 0x1b39
    1124:	0d060000 	stceq	0, cr0, [r6, #-0]
    1128:	3a0e0300 	bcc	381d30 <__ccfg+0x361d88>
void __pi_free (aword *ch) {
    112c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1134:	0700000b 	streq	r0, [r0, -fp]
		syserror (EMALLOC, "malg");
    1138:	13490026 	movtne	r0, #36902	; 0x9026
    113c:	34080000 	strcc	r0, [r8], #-0
	mcfree [MA_NP] += m_size (ch);
    1140:	3a0e0300 	bcc	381d48 <__ccfg+0x361da0>
		m_size (ch) ^= MALLOC_UMASK;
    1144:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1148:	3f13490b 	svccc	0x0013490b
	mcfree [MA_NP] += m_size (ch);
    114c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	QFREE;
    1150:	00350900 	eorseq	r0, r5, r0, lsl #18
	if (mevent [MA_NP] . nwait) {
    1154:	00001349 	andeq	r1, r0, r9, asr #6
    1158:	03000d0a 	movweq	r0, #3338	; 0xd0a
		trigger ((aword)(&(mevent [MA_NP])));
    115c:	3b0b3a0e 	blcc	2cf99c <__ccfg+0x2af9f4>
		mevent [MA_NP] . nwait --;
    1160:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1164:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1168:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    116c:	0b00000b 	bleq	11a0 <kill+0x2c>
    1170:	0b0b000f 	bleq	2c11b4 <__ccfg+0x2a120c>
void kill (aword pid) {
    1174:	00001349 	andeq	r1, r0, r9, asr #6
		pid = (aword) __pi_curr;
    1178:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	j = NULL;
    117c:	00130113 	andseq	r0, r3, r3, lsl r1
	for_all_tasks (i) {
    1180:	00210d00 	eoreq	r0, r1, r0, lsl #26
	syserror (EREQPAR, "kpi");
    1184:	160e0000 	strne	r0, [lr], -r0
    1188:	3a0e0300 	bcc	381d90 <__ccfg+0x361de8>
		if ((aword)i == pid) {
    118c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1190:	0013490b 	andseq	r4, r3, fp, lsl #18
				__PCB = i->Next;
    1194:	01150f00 	tsteq	r5, r0, lsl #30
			killev (i);
    1198:	13010c27 	movwne	r0, #7207	; 0x1c27
			ufree (i);
    119c:	05100000 	ldreq	r0, [r0, #-0]
			if (i == __pi_curr)
    11a0:	00134900 	andseq	r4, r3, r0, lsl #18
    11a4:	00341100 	eorseq	r1, r4, r0, lsl #2
				release;
    11a8:	0b3a0e03 	bleq	e849bc <__ccfg+0xe64a14>
				j->Next = i->Next;
    11ac:	0b39053b 	bleq	e426a0 <__ccfg+0xe226f8>
    11b0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1094 <io+0x54>
    11b4:	00000c3c 	andeq	r0, r0, ip, lsr ip
}
    11b8:	0b011312 	bleq	45e08 <__ccfg+0x25e60>
    11bc:	3b0b3a0b 	blcc	2cf9f0 <__ccfg+0x2afa48>
    11c0:	010b3905 	tsteq	fp, r5, lsl #18
	if (size < 8)
    11c4:	13000013 	movwne	r0, #19
		_size = 2;
    11c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		_size = (((aword)size) + 3) >> 2;
    11d0:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	00000b38 	andeq	r0, r0, r8, lsr fp
		_size = (((aword)size) + 3) >> 2;
    11d8:	03011314 	movweq	r1, #4884	; 0x1314
		if (mevent [MA_NP] . nfail != 255)
    11dc:	3a0b0b0e 	bcc	2c3e1c <__ccfg+0x2a3e74>
    11e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			mevent [MA_NP] . nfail ++;
    11e4:	0013010b 	andseq	r0, r3, fp, lsl #2
		mnfree [MA_NP] = 0;
    11e8:	00211500 	eoreq	r1, r1, r0, lsl #10
    11ec:	0b2f1349 	bleq	bc5f18 <__ccfg+0xba5f70>
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	34160000 	ldrcc	r0, [r6], #-0
    11f4:	3a134700 	bcc	4d2dfc <__ccfg+0x4b2e54>
			syserror (EMALLOC, "malc");
    11f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11fc:	000a020b 	andeq	r0, sl, fp, lsl #4
		if (m_size (chunk) >= _size)
    1200:	11010000 	mrsne	r0, (UNDEF: 1)
    1204:	130e2501 	movwne	r2, #58625	; 0xe501
		chunk = m_nextp (chunk)) {
    1208:	1b0e030b 	blne	381e3c <__ccfg+0x361e94>
		m_setnextp (cc, m_nextp (chunk));
    120c:	1106550e 	tstne	r6, lr, lsl #10
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1210:	00061001 	andeq	r1, r6, r1
    1214:	00240200 	eoreq	r0, r4, r0, lsl #4
			m_size (chunk) = _size;
    1218:	0b3e0b0b 	bleq	f83e4c <__ccfg+0xf63ea4>
			cc = chunk + _size + m_hdrlen;
    121c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1220:	03001603 	movweq	r1, #1539	; 0x603
			m_size (cc) = waste - m_hdrlen;
    1224:	3b0b3a0e 	blcc	2cfa64 <__ccfg+0x2afabc>
			QFREE;
    1228:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		mevent [MA_NP] . nfail = 0;
    122c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		mcfree [MA_NP] -= m_size (chunk);
    1230:	0b0b0024 	bleq	2c12c8 <__ccfg+0x2a1320>
    1234:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1238:	26050000 	strcs	r0, [r5], -r0
    123c:	00134900 	andseq	r4, r3, r0, lsl #18
		m_size (chunk) |= MALLOC_UMASK;
    1240:	00350600 	eorseq	r0, r5, r0, lsl #12
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1244:	00001349 	andeq	r1, r0, r9, asr #6
		m_size (chunk) |= MALLOC_UMASK;
    1248:	0b000f07 	bleq	4e6c <__exidx_end+0x21e8>
			mnfree [MA_NP] = mcfree [MA_NP];
    124c:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    1250:	01130800 	tsteq	r3, r0, lsl #16
    1254:	0b3a0b0b 	bleq	e83e88 <__ccfg+0xe63ee0>
    1258:	0b390b3b 	bleq	e43f4c <__ccfg+0xe23fa4>
    125c:	00001301 	andeq	r1, r0, r1, lsl #6
    1260:	03000d09 	movweq	r0, #3337	; 0xd09
    1264:	3b0b3a0e 	blcc	2cfaa4 <__ccfg+0x2afafc>
    1268:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
aword __pi_fork (fsmcode func, aword data) {
    126c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1274:	0a00000b 	beq	12a8 <__pi_waitmem+0x8>
    1278:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if ((j = __PCB) == NULL)
    127c:	0b3b0b3a 	bleq	ec3f6c <__ccfg+0xea3fc4>
	i->Next = NULL;
    1280:	13490b39 	movtne	r0, #39737	; 0x9b39
	i->data = data;
    1284:	00000b38 	andeq	r0, r0, r8, lsr fp
		if ((j = __PCB) == NULL)
    1288:	0300340b 	movweq	r3, #1035	; 0x40b
}
    128c:	3b0b3a0e 	blcc	2cfacc <__ccfg+0x2afb24>
			for (; j->Next != NULL; j = j->Next);
    1290:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1294:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	return (aword) i;
    1298:	0c00000c 	stceq	0, cr0, [r0], {12}
    129c:	13490101 	movtne	r0, #37121	; 0x9101
	if (mevent [MA_NP] . nwait != 255)
    12a0:	00001301 	andeq	r1, r0, r1, lsl #6
    12a4:	0000210d 	andeq	r2, r0, sp, lsl #2
    12a8:	00160e00 	andseq	r0, r6, r0, lsl #28
		mevent [MA_NP] . nwait ++;
    12ac:	0b3a0e03 	bleq	e84ac0 <__ccfg+0xe64b18>
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	0b39053b 	bleq	e427a4 <__ccfg+0xe227fc>
    12b4:	00001349 	andeq	r1, r0, r9, asr #6
void diag (const char *mess, ...) {
    12b8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    12bc:	0013010c 	andseq	r0, r3, ip, lsl #2
    12c0:	00051000 	andeq	r1, r5, r0
	diag_disable_int (a, is);
    12c4:	00001349 	andeq	r1, r0, r9, asr #6
    12c8:	03003411 	movweq	r3, #1041	; 0x411
    12cc:	3b0b3a0e 	blcc	2cfb0c <__ccfg+0x2afb64>
				d = (bc == 16) ? 10000 : 1000000000;
    12d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	diag_disable_int (a, is);
    12d4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	while (*mess != '\0') {
    12d8:	1200000c 	andne	r0, r0, #12
	dgout ('\r');
    12dc:	0b0b0113 	bleq	2c1730 <__ccfg+0x2a1788>
	dgout ('\n');
    12e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12e4:	13010b39 	movwne	r0, #6969	; 0x1b39
    12e8:	0d130000 	ldceq	0, cr0, [r3, #-0]
	diag_wait (a);
    12ec:	3a0e0300 	bcc	381ef4 <__ccfg+0x361f4c>
	diag_enable_int (a, is);
    12f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
}
    12f8:	1400000b 	strne	r0, [r0], #-11
    12fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1300:	0b3a0b0b 	bleq	e83f34 <__ccfg+0xe63f8c>
		if (*mess == '%') {
    1304:	0b39053b 	bleq	e427f8 <__ccfg+0xe22850>
    1308:	00001301 	andeq	r1, r0, r1, lsl #6
			if (*mess == 'l') {
    130c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1310:	000b2f13 	andeq	r2, fp, r3, lsl pc
				mess++;
    1314:	00341600 	eorseq	r1, r4, r0, lsl #12
				val = va_arg (ap, lword);
    1318:	0b3a1347 	bleq	e8603c <__ccfg+0xe66094>
				bc = 32;
    131c:	0b390b3b 	bleq	e44010 <__ccfg+0xe24068>
				bc = 16;
    1320:	00000a02 	andeq	r0, r0, r2, lsl #20
			switch (*mess) {
    1324:	3f012e17 	svccc	0x00012e17
    1328:	3a0e030c 	bcc	381f60 <__ccfg+0x361fb8>
    132c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				dgout ('%');
    1330:	110c270b 	tstne	ip, fp, lsl #14
    1334:	40011201 	andmi	r1, r1, r1, lsl #4
				dgout (*mess);
    1338:	0013010a 	andseq	r0, r3, sl, lsl #2
    133c:	00051800 	andeq	r1, r5, r0, lsl #16
			switch (*mess) {
    1340:	0b3a0803 	bleq	e83354 <__ccfg+0xe633ac>
					v = __pi_hex_enc_table [
    1344:	0b390b3b 	bleq	e44038 <__ccfg+0xe24090>
					i += 4;
    1348:	06021349 	streq	r1, [r2], -r9, asr #6
					(val >> (bc - i)) & 0xf];
    134c:	05190000 	ldreq	r0, [r9, #-0]
    1350:	3a0e0300 	bcc	381f58 <__ccfg+0x361fb0>
					dgout (v);
    1354:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1358:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				while (i < bc) {
    135c:	1a000006 	bne	137c <diag+0xc4>
			mess++;
    1360:	08030034 	stmdaeq	r3, {r2, r4, r5}
					d /= 10;
    1364:	0b3b0b3a 	bleq	ec4054 <__ccfg+0xea40ac>
				if ((val >> (bc - 1)) & 1) {
    1368:	13490b39 	movtne	r0, #39737	; 0x9b39
    136c:	341b0000 	ldrcc	r0, [fp], #-0
					dgout ('-');
    1370:	3a080300 	bcc	201f78 <__ccfg+0x1e1fd0>
    1374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						val |= 0xffff0000;
    1378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    137c:	1c000006 	stcne	0, cr0, [r0], {6}
    1380:	1331001d 	teqne	r1, #29
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	01120111 	tsteq	r2, r1, lsl r1
    1388:	0b590b58 	bleq	16440f0 <__ccfg+0x1624148>
    138c:	00000b57 	andeq	r0, r0, r7, asr fp
					v = (word) (val / d);
    1390:	31011d1d 	tstcc	r1, sp, lsl sp
					if (v || d == 1) break;
    1394:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1398:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
					d /= 10;
    139c:	000b570b 	andeq	r5, fp, fp, lsl #14
				d = (bc == 16) ? 10000 : 1000000000;
    13a0:	00051e00 	andeq	r1, r5, r0, lsl #28
					dgout (v + '0');
    13a4:	06021331 			; <UNDEFINED> instruction: 0x06021331
    13a8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    13ac:	030c3f00 	movweq	r3, #52992	; 0xcf00
					d /= 10;
    13b0:	3b0b3a0e 	blcc	2cfbf0 <__ccfg+0x2afc48>
					val = val - (v * d);
    13b4:	110b390b 	tstne	fp, fp, lsl #18
					if (d == 0) break;
    13b8:	40011201 	andmi	r1, r1, r1, lsl #4
					v = (word) (val / d);
    13bc:	2000000a 	andcs	r0, r0, sl
    13c0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				if (bc == 16)
    13c4:	0b3b0b3a 	bleq	ec40b4 <__ccfg+0xea410c>
				d = (bc == 16) ? 10000 : 1000000000;
    13c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					val &= 0xffff;
    13cc:	00000b20 	andeq	r0, r0, r0, lsr #22
					dgout (*s);
    13d0:	03012e21 	movweq	r2, #7713	; 0x1e21
					s++;
    13d4:	3b0b3a0e 	blcc	2cfc14 <__ccfg+0x2afc6c>
				while (*s != '\0') {
    13d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    13dc:	2013490c 	andscs	r4, r3, ip, lsl #18
			dgout (*mess++);
    13e0:	2200000b 	andcs	r0, r0, #11
    13e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    13e8:	0b3b0b3a 	bleq	ec40d8 <__ccfg+0xea4130>
    13ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    13f0:	01000000 	mrseq	r0, (UNDEF: 0)
}
    13f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    while(1)
    13f8:	0e030b13 	vmoveq.32	d3[0], r0
{
    13fc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    SetupTrimDevice();
    1400:	06100111 			; <UNDEFINED> instruction: 0x06100111
    pui32Src = &_etext;
    1404:	24020000 	strcs	r0, [r2], #-0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1408:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    __asm("    ldr     r0, =_bss\n"
    140c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1410:	00160300 	andseq	r0, r6, r0, lsl #6
    1414:	0b3a0e03 	bleq	e84c28 <__ccfg+0xe64c80>
    1418:	0b390b3b 	bleq	e4410c <__ccfg+0xe24164>
    141c:	00001349 	andeq	r1, r0, r9, asr #6
   main();
    1420:	0b002404 	bleq	a438 <__exidx_end+0x77b4>
    FaultISR();
    1424:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
        *pui32Dest++ = *pui32Src++;
    1428:	05000008 	streq	r0, [r0, #-8]
    142c:	13490026 	movtne	r0, #36902	; 0x9026
    1430:	35060000 	strcc	r0, [r6, #-0]
    1434:	00134900 	andseq	r4, r3, r0, lsl #18
    1438:	01130700 	tsteq	r3, r0, lsl #14
    143c:	0b3a0b0b 	bleq	e84070 <__ccfg+0xe640c8>
    1440:	0b390b3b 	bleq	e44134 <__ccfg+0xe2418c>
    1444:	00001301 	andeq	r1, r0, r1, lsl #6
static byte get_byte () {
    1448:	03000d08 	movweq	r0, #3336	; 0xd08
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    144c:	3b0b3a0e 	blcc	2cfc8c <__ccfg+0x2afce4>
    1450:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1458:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		if (ee_inp)
    145c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
			b |= 1;
    1460:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1464:	0b3b0b3a 	bleq	ec4154 <__ccfg+0xea41ac>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1468:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (b = 0, i = 0; i < 8; i++) {
    146c:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    1470:	0300340a 	movweq	r3, #1034	; 0x40a
    1474:	3b0b3a0e 	blcc	2cfcb4 <__ccfg+0x2afd0c>
    1478:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
static void put_byte (byte b) {
    147c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1480:	0b00000c 	bleq	14b8 <cmd_0+0xc>
    1484:	0b0b000f 	bleq	2c14c8 <__ccfg+0x2a1520>
    1488:	00001349 	andeq	r1, r0, r9, asr #6
		if (b & 0x80)
    148c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1490:	00130113 	andseq	r0, r3, r3, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1494:	00210d00 	eoreq	r0, r1, r0, lsl #26
	for (i = 0; i < 8; i++) {
    1498:	160e0000 	strne	r0, [lr], -r0
		b <<= 1;
    149c:	3a0e0300 	bcc	3820a4 <__ccfg+0x3620fc>
	for (i = 0; i < 8; i++) {
    14a0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    14a4:	0013490b 	andseq	r4, r3, fp, lsl #18
    14a8:	01150f00 	tsteq	r5, r0, lsl #30
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14ac:	13010c27 	movwne	r0, #7207	; 0x1c27
    14b0:	05100000 	ldreq	r0, [r0, #-0]
	put_byte (cmd);
    14b4:	00134900 	andseq	r4, r3, r0, lsl #18
    14b8:	00341100 	eorseq	r1, r4, r0, lsl #2
}
    14bc:	0b3a0e03 	bleq	e84cd0 <__ccfg+0xe64d28>
    14c0:	0b39053b 	bleq	e429b4 <__ccfg+0xe22a0c>
static void wwait (word st, word del) {
    14c4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 13a8 <diag+0xf0>
    14c8:	00000c3c 	andeq	r0, r0, ip, lsr ip
    14cc:	0b011312 	bleq	4611c <__ccfg+0x26174>
	while (dopen && (rdsr () & 1)) {
    14d0:	3b0b3a0b 	blcc	2cfd04 <__ccfg+0x2afd5c>
    14d4:	010b3905 	tsteq	fp, r5, lsl #18
    14d8:	13000013 	movwne	r0, #19
    14dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	put_byte (CMD_RDSR);
    14e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	r = get_byte ();
    14e4:	13490b39 	movtne	r0, #39737	; 0x9b39
    14e8:	00000b38 	andeq	r0, r0, r8, lsr fp
	while (dopen && (rdsr () & 1)) {
    14ec:	03011314 	movweq	r1, #4884	; 0x1314
}
    14f0:	3a0b0b0e 	bcc	2c4130 <__ccfg+0x2a4188>
		if (st == WNONE)
    14f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f8:	0013010b 	andseq	r0, r3, fp, lsl #2
			mdelay (1);
    14fc:	00211500 	eoreq	r1, r1, r0, lsl #10
    1500:	0b2f1349 	bleq	bc622c <__ccfg+0xba6284>
			delay (del, st);
    1504:	34160000 	ldrcc	r0, [r6], #-0
    1508:	3a0e0300 	bcc	382110 <__ccfg+0x362168>
			release;
    150c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1510:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1514:	1700000a 	strne	r0, [r0, -sl]
static void ready () {
    1518:	13470034 	movtne	r0, #28724	; 0x7034
	if (dopen) {
    151c:	0b3b0b3a 	bleq	ec420c <__ccfg+0xea4264>
		wwait (WNONE, 1);
    1520:	0a020b39 	beq	8420c <__ccfg+0x64264>
    1524:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1528:	030c3f01 	movweq	r3, #52993	; 0xcf01
	dstat = 0;
    152c:	3b0b3a0e 	blcc	2cfd6c <__ccfg+0x2afdc4>
}
    1530:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1534:	1201110c 	andne	r1, r1, #12, 2
    1538:	010a4001 	tsteq	sl, r1
	udelay (1);
    153c:	19000013 	stmdbne	r0, {r0, r1, r4}
    1540:	08030005 	stmdaeq	r3, {r0, r2}
	udelay (1);
    1544:	0b3b0b3a 	bleq	ec4234 <__ccfg+0xea428c>
		dopen = DOPEN_TEMP;
    1548:	13490b39 	movtne	r0, #39737	; 0x9b39
    154c:	00000602 	andeq	r0, r0, r2, lsl #12
    1550:	0300051a 	movweq	r0, #1306	; 0x51a
    1554:	3b0b3a0e 	blcc	2cfd94 <__ccfg+0x2afdec>
static void cclose () {
    1558:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (dopen == DOPEN_TEMP) {
    155c:	00060213 	andeq	r0, r6, r3, lsl r2
    1560:	000a1b00 	andeq	r1, sl, r0, lsl #22
		wwait (WNONE, 1);
    1564:	0b3a0e03 	bleq	e84d78 <__ccfg+0xe64dd0>
    1568:	0b390b3b 	bleq	e4425c <__ccfg+0xe242b4>
	cmd_0 (CMD_DP);
    156c:	00000111 	andeq	r0, r0, r1, lsl r1
    1570:	31011d1c 	tstcc	r1, ip, lsl sp
		dopen = 0;
    1574:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
}
    1578:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
word ee_open () {
    157c:	010b570b 	tsteq	fp, fp, lsl #14
	ready ();
    1580:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
	dopen = DOPEN_PERM;
    1584:	13310005 	teqne	r1, #5
    1588:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
}
    158c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	if (dopen) {
    1590:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1594:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		dopen = DOPEN_TEMP;
    1598:	1f00000b 	svcne	0x0000000b
		cclose ();
    159c:	0e03012e 	adfeqsp	f0, f3, #0.5
}
    15a0:	0b3b0b3a 	bleq	ec4290 <__ccfg+0xea42e8>
int ser_in (word st, char *buf, int len) {
    15a4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    15a8:	0b201349 	bleq	8062d4 <__ccfg+0x7e632c>
	if (len == 0)
    15ac:	05200000 	streq	r0, [r0, #-0]!
	if (__inpline == NULL) {
    15b0:	3a0e0300 	bcc	3821b8 <__ccfg+0x362210>
		if ((prcs = running (__inserial)) == 0) {
    15b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b8:	0013490b 	andseq	r4, r3, fp, lsl #18
			prcs = runthread (__inserial);
    15bc:	11010000 	mrsne	r0, (UNDEF: 1)
    15c0:	130e2501 	movwne	r2, #58625	; 0xe501
			if (prcs == 0) {
    15c4:	1b0e030b 	blne	3821f8 <__ccfg+0x362250>
				npwait (st);
    15c8:	1106550e 	tstne	r6, lr, lsl #10
		release;
    15cc:	00061001 	andeq	r1, r6, r1
		join (prcs, st);
    15d0:	00240200 	eoreq	r0, r4, r0, lsl #4
    15d4:	0b3e0b0b 	bleq	f84208 <__ccfg+0xf64260>
	if (*__inpline == NULL) // bin cmd
    15d8:	00000e03 	andeq	r0, r0, r3, lsl #28
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15dc:	03001603 	movweq	r1, #1539	; 0x603
	if (prcs >= len)
    15e0:	3b0b3a0e 	blcc	2cfe20 <__ccfg+0x2afe78>
		prcs = len-1;
    15e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	memcpy (buf, __inpline, prcs);
    15e8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    15ec:	0b0b0024 	bleq	2c1684 <__ccfg+0x2a16dc>
    15f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	ufree (__inpline);
    15f4:	26050000 	strcs	r0, [r5], -r0
	__inpline = NULL;
    15f8:	00134900 	andseq	r4, r3, r0, lsl #18
	if (*buf) // if it's NULL, it's a bin cmd
    15fc:	00350600 	eorseq	r0, r5, r0, lsl #12
		buf [prcs] = '\0';
    1600:	00001349 	andeq	r1, r0, r9, asr #6
}
    1604:	0b011307 	bleq	46228 <__ccfg+0x26280>
		prcs = strlen (__inpline);
    1608:	3b0b3a0b 	blcc	2cfe3c <__ccfg+0x2afe94>
    160c:	010b390b 	tsteq	fp, fp, lsl #18
		return 0;
    1610:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1618:	0b3b0b3a 	bleq	ec4308 <__ccfg+0xea4360>
int ser_outf (word st, const char *m, ...) {
    161c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1620:	0b0d0b0b 	bleq	344254 <__ccfg+0x3242ac>
	if ((prcs = running (__outserial)) != 0) {
    1624:	0b380b0c 	bleq	e0425c <__ccfg+0xde42b4>
    1628:	0d090000 	stceq	0, cr0, [r9, #-0]
		join (prcs, st);
    162c:	3a0e0300 	bcc	382234 <__ccfg+0x36228c>
    1630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		release;
    1634:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	0a00000b 	beq	166c <ser_outf+0x50>
    163c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1640:	0b3b0b3a 	bleq	ec4330 <__ccfg+0xea4388>
		umwait (st);
    1644:	13490b39 	movtne	r0, #39737	; 0x9b39
    1648:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	if (runstrand (__outserial, buf) == 0) {
    164c:	0f0b0000 	svceq	0x000b0000
    1650:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1654:	0c000013 	stceq	0, cr0, [r0], {19}
		ufree (buf);
    1658:	13490101 	movtne	r0, #37121	; 0x9101
		npwait (st);
    165c:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1660:	0000210d 	andeq	r2, r0, sp, lsl #2
    1664:	00160e00 	andseq	r0, r6, r0, lsl #28
    1668:	0b3a0e03 	bleq	e84e7c <__ccfg+0xe64ed4>
    166c:	0b39053b 	bleq	e42b60 <__ccfg+0xe22bb8>
int ser_inf (word st, const char *fmt, ...) {
    1670:	00001349 	andeq	r1, r0, r9, asr #6
    1674:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	if (fmt == NULL)
    1678:	0013010c 	andseq	r0, r3, ip, lsl #2
	if (__inpline == NULL) {
    167c:	00051000 	andeq	r1, r5, r0
		if ((prcs = running (__inserial)) == 0) {
    1680:	00001349 	andeq	r1, r0, r9, asr #6
    1684:	03003411 	movweq	r3, #1041	; 0x411
			prcs = runthread (__inserial);
    1688:	3b0b3a0e 	blcc	2cfec8 <__ccfg+0x2aff20>
    168c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (prcs == 0) {
    1690:	3c0c3f13 	stccc	15, cr3, [ip], {19}
				npwait (st);
    1694:	1200000c 	andne	r0, r0, #12
		release;
    1698:	0b0b0113 	bleq	2c1aec <__ccfg+0x2a1b44>
		join (prcs, st);
    169c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16a0:	13010b39 	movwne	r0, #6969	; 0x1b39
	va_start (ap, fmt);
    16a4:	0d130000 	ldceq	0, cr0, [r3, #-0]
	prcs = vscan (__inpline, fmt, ap);
    16a8:	3a0e0300 	bcc	3822b0 <__ccfg+0x362308>
    16ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	ufree (__inpline);
    16b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	__inpline = NULL;
    16b4:	1400000b 	strne	r0, [r0], #-11
}
    16b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    16bc:	0b3a0b0b 	bleq	e842f0 <__ccfg+0xe64348>
    16c0:	0b39053b 	bleq	e42bb4 <__ccfg+0xe22c0c>
		return 0;
    16c4:	00001301 	andeq	r1, r0, r1, lsl #6
    16c8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    16cc:	000b2f13 	andeq	r2, fp, r3, lsl pc
strand (__outserial, const char*)
    16d0:	00341600 	eorseq	r1, r4, r0, lsl #12
    16d4:	0b3a0e03 	bleq	e84ee8 <__ccfg+0xe64f40>
    16d8:	0b390b3b 	bleq	e443cc <__ccfg+0xe24424>
    16dc:	0a021349 	beq	86408 <__ccfg+0x66460>
endstrand
    16e0:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    16e4:	030c3f00 	movweq	r3, #52992	; 0xcf00
	ptr = data;
    16e8:	3b0b3a0e 	blcc	2cff28 <__ccfg+0x2aff80>
    16ec:	110b390b 	tstne	fp, fp, lsl #18
	if (*ptr)
    16f0:	40011201 	andmi	r1, r1, r1, lsl #4
		len = strlen (ptr);
    16f4:	1800000a 	stmdane	r0, {r1, r3}
    16f8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1648 <ser_outf+0x2c>
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fc:	0b3a0e03 	bleq	e84f10 <__ccfg+0xe64f68>
    1700:	0b390b3b 	bleq	e443f4 <__ccfg+0xe2444c>
    1704:	13490c27 	movtne	r0, #39975	; 0x9c27
    1708:	01120111 	tsteq	r2, r1, lsl r1
    170c:	13010a40 	movwne	r0, #6720	; 0x1a40
	len -= quant;
    1710:	05190000 	ldreq	r0, [r9, #-0]
    1714:	3a080300 	bcc	20231c <__ccfg+0x1e2374>
    1718:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (len == 0) {
    171c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		ufree (data);
    1720:	1a000006 	bne	1740 <__inserial>
		finish;
    1724:	08030005 	stmdaeq	r3, {r0, r2}
    1728:	0b3b0b3a 	bleq	ec4418 <__ccfg+0xea4470>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    172c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1730:	00000a02 	andeq	r0, r0, r2, lsl #20
    1734:	3f012e1b 	svccc	0x00012e1b
    1738:	3a0e030c 	bcc	382370 <__ccfg+0x3623c8>
    173c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
strand (__inserial, address)
    1740:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1744:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1748:	010a4001 	tsteq	sl, r1
    174c:	1c000013 	stcne	0, cr0, [r0], {19}
    1750:	08030005 	stmdaeq	r3, {r0, r2}
	if (__inpline != NULL)
    1754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1758:	13490b39 	movtne	r0, #39737	; 0x9b39
		finish;
    175c:	00000602 	andeq	r0, r0, r2, lsl #12
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1760:	3f002e1d 	svccc	0x00002e1d
    1764:	3a0e030c 	bcc	38239c <__ccfg+0x3623f4>
    1768:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    176c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		umwait (IM_INIT);
    1770:	000a4001 	andeq	r4, sl, r1
		release;
    1774:	00341e00 	eorseq	r1, r4, r0, lsl #28
	savedata (data);
    1778:	0b3a0803 	bleq	e8378c <__ccfg+0xe637e4>
	len = MAX_LINE_LENGTH;
    177c:	0b39053b 	bleq	e42c70 <__ccfg+0xe22cc8>
	io (IM_READ, __cport, READ, ptr, 1);
    1780:	06021349 	streq	r1, [r2], -r9, asr #6
    1784:	0a1f0000 	beq	7c178c <__ccfg+0x7a17e4>
    1788:	3a0e0300 	bcc	382390 <__ccfg+0x3623e8>
    178c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (ptr == (char*) data) { // new line
    1790:	0001110b 	andeq	r1, r1, fp, lsl #2
    1794:	011d2000 	tsteq	sp, r0
		if (*ptr == '\0') { // bin cmd
    1798:	01521331 	cmpeq	r2, r1, lsr r3
			proceed (IM_BIN);
    179c:	0b580655 	bleq	16030f8 <__ccfg+0x15e3150>
    17a0:	0b570559 	bleq	15c2d0c <__ccfg+0x15a2d64>
		if (*ptr < 0x20)
    17a4:	00001301 	andeq	r1, r0, r1, lsl #6
    17a8:	31000521 	tstcc	r0, r1, lsr #10
			proceed (IM_READ);
    17ac:	22000013 	andcs	r0, r0, #19
    17b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	if (*ptr == '\n' || *ptr == '\r') {
    17b4:	01120111 	tsteq	r2, r1, lsl r1
    17b8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    17bc:	00000b57 	andeq	r0, r0, r7, asr fp
		*ptr = '\0';
    17c0:	03000523 	movweq	r0, #1315	; 0x523
		__inpline = (char*)data;
    17c4:	3b0b3a0e 	blcc	2d0004 <__ccfg+0x2b005c>
		finish;
    17c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (len) {
    17cc:	00060213 	andeq	r0, r6, r3, lsl r2
		ptr++;
    17d0:	000a2400 	andeq	r2, sl, r0, lsl #8
    17d4:	0b3a0e03 	bleq	e84fe8 <__ccfg+0xe65040>
		len--;
    17d8:	0b390b3b 	bleq	e444cc <__ccfg+0xe24524>
	proceed (IM_READ);
    17dc:	00000111 	andeq	r0, r0, r1, lsl r1
	io (IM_BIN, __cport, READ, ptr, 1);
    17e0:	31011d25 	tstcc	r1, r5, lsr #26
    17e4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    17e8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    17ec:	000b570b 	andeq	r5, fp, fp, lsl #14
    17f0:	00052600 	andeq	r2, r5, r0, lsl #12
	len -= 2;
    17f4:	06021331 			; <UNDEFINED> instruction: 0x06021331
	if (len > *ptr + 1) // 1 for 0x04
    17f8:	1d270000 	stcne	0, cr0, [r7, #-0]
    17fc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		len = *ptr + 1;
    1800:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1804:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	ptr++;
    1808:	0013010b 	andseq	r0, r3, fp, lsl #2
	quant = io (IM_BINL, __cport, READ, ptr, len);
    180c:	011d2800 	tsteq	sp, r0, lsl #16
    1810:	01111331 	tsteq	r1, r1, lsr r3
    1814:	0b580112 	bleq	1601c64 <__ccfg+0x15e1cbc>
    1818:	0b570b59 	bleq	15c4584 <__ccfg+0x15a45dc>
    181c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    1820:	030c3f00 	movweq	r3, #52992	; 0xcf00
	len -= quant;
    1824:	3b0b3a0e 	blcc	2d0064 <__ccfg+0x2b00bc>
		__inpline = (char*)data;
    1828:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		finish;
    182c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	ptr += quant;
    1830:	000a4001 	andeq	r4, sl, r1
    1834:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
endstrand
    1838:	0b3a0e03 	bleq	e8504c <__ccfg+0xe650a4>
    183c:	0b390b3b 	bleq	e44530 <__ccfg+0xe24588>
	proceed (IM_BINL);
    1840:	01120111 	tsteq	r2, r1, lsl r1
endstrand
    1844:	13010a40 	movwne	r0, #6720	; 0x1a40
    1848:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    184c:	3a0e0300 	bcc	382454 <__ccfg+0x3624ac>
    1850:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1854:	000b200b 	andeq	r2, fp, fp
    1858:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
		if (res && (d < n))
    185c:	0b3a0e03 	bleq	e85070 <__ccfg+0xe650c8>
    1860:	0b390b3b 	bleq	e44554 <__ccfg+0xe245ac>
    1864:	01110c27 	tsteq	r1, r7, lsr #24
    1868:	0a400112 	beq	1001cb8 <__ccfg+0xfe1d10>
			res [d] = (char) c;
    186c:	00001301 	andeq	r1, r0, r1, lsl #6
		d++;
    1870:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
    1874:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    1878:	13310034 	teqne	r1, #52	; 0x34
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	00000602 	andeq	r0, r0, r2, lsl #12
    1880:	03012e2f 	movweq	r2, #7727	; 0x1e2f
    1884:	3b0b3a0e 	blcc	2d00c4 <__ccfg+0x2b011c>
				enci (10000);
    1888:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    188c:	010b2013 	tsteq	fp, r3, lsl r0
    1890:	30000013 	andcc	r0, r0, r3, lsl r0
	d = 0;
    1894:	08030034 	stmdaeq	r3, {r2, r4, r5}
		c = *fm++;
    1898:	0b3b0b3a 	bleq	ec4588 <__ccfg+0xea45e0>
		if (c == '\\') {
    189c:	13490b39 	movtne	r0, #39737	; 0x9b39
			if ((c = *fm++) == '\0') {
    18a0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    18a4:	3a0e0301 	bcc	3824b0 <__ccfg+0x362508>
				outc ('\\');
    18a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if ((c = *fm++) == '\0') {
    18ac:	200c270b 	andcs	r2, ip, fp, lsl #14
				outc ('\\');
    18b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    18b4:	00053200 	andeq	r3, r5, r0, lsl #4
			outc (c);
    18b8:	0b3a0803 	bleq	e838cc <__ccfg+0xe63924>
    18bc:	0b390b3b 	bleq	e445b0 <__ccfg+0xe24608>
			if (c == '\0')
    18c0:	00001349 	andeq	r1, r0, r9, asr #6
    18c4:	31011d33 	tstcc	r1, r3, lsr sp
			outc (c);
    18c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				outc (val);
    18cc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
				val = (word) va_arg (ap, aword);
    18d0:	010b570b 	tsteq	fp, fp, lsl #14
		if (c == '%') {
    18d4:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    18d8:	0e03012e 	adfeqsp	f0, f3, #0.5
			c = *fm++;
    18dc:	0b3b0b3a 	bleq	ec45cc <__ccfg+0xea4624>
			switch (c) {
    18e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    18e4:	01120111 	tsteq	r2, r1, lsl r1
    18e8:	13010a40 	movwne	r0, #6720	; 0x1a40
    18ec:	34350000 	ldrtcc	r0, [r5], #-0
    18f0:	3a080300 	bcc	2024f8 <__ccfg+0x1e2550>
    18f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18fc:	36000006 	strcc	r0, [r0], -r6
				outc ('%');
    1900:	0e03012e 	adfeqsp	f0, f3, #0.5
    1904:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				outc (c);
    1908:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    190c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1910:	05370000 	ldreq	r0, [r7, #-0]!
				if (c == '\0')
    1914:	3a0e0300 	bcc	38251c <__ccfg+0x362574>
				return d;
    1918:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    191c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1920:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
			switch (c) {
    1924:	0b3a0e03 	bleq	e85138 <__ccfg+0xe65190>
    1928:	0b390b3b 	bleq	e4461c <__ccfg+0xe24674>
    192c:	13490c27 	movtne	r0, #39975	; 0x9c27
				for (i = 12; ; i -= 4) {
    1930:	13010b20 	movwne	r0, #6944	; 0x1b20
				val = (word) va_arg (ap, aword);
    1934:	05390000 	ldreq	r0, [r9, #-0]!
						[ (val >> i) & 0xf ]);
    1938:	3a0e0300 	bcc	382540 <__ccfg+0x362598>
    193c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1940:	0013490b 	andseq	r4, r3, fp, lsl #18
					outc (__pi_hex_enc_table
    1944:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
    1948:	01111331 	tsteq	r1, r1, lsr r3
					if (i == 0)
    194c:	0a400112 	beq	1001d9c <__ccfg+0xfe1df4>
    1950:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
				for (i = 12; ; i -= 4) {
    1954:	11133100 	tstne	r3, r0, lsl #2
				val = (word) va_arg (ap, aword);
    1958:	58011201 	stmdapl	r1, {r0, r9, ip}
				if (c == 'd' && (val & 0x8000) != 0) {
    195c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
				val = (word) va_arg (ap, aword);
    1960:	0000000b 	andeq	r0, r0, fp
				if (c == 'd' && (val & 0x8000) != 0) {
    1964:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1968:	030b130e 	movweq	r1, #45838	; 0xb30e
					outc ('-');
    196c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1970:	10011106 	andne	r1, r1, r6, lsl #2
					val = (~val) + 1;
    1974:	02000006 	andeq	r0, r0, #6
    1978:	0b0b0024 	bleq	2c1a10 <__ccfg+0x2a1a68>
				for (i = 12; ; i -= 4) {
    197c:	0e030b3e 	vmoveq.16	d3[0], r0
				enci (10000);
    1980:	16030000 	strne	r0, [r3], -r0
    1984:	3a0e0300 	bcc	38258c <__ccfg+0x3625e4>
    1988:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    198c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1990:	00240400 	eoreq	r0, r4, r0, lsl #8
    1994:	0b3e0b0b 	bleq	f845c8 <__ccfg+0xf64620>
    1998:	00000803 	andeq	r0, r0, r3, lsl #16
    199c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    19a0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    19a4:	13490035 	movtne	r0, #36917	; 0x9035
    19a8:	13070000 	movwne	r0, #28672	; 0x7000
    19ac:	3a0b0b01 	bcc	2c45b8 <__ccfg+0x2a4610>
    19b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    19b8:	000d0800 	andeq	r0, sp, r0, lsl #16
    19bc:	0b3a0e03 	bleq	e851d0 <__ccfg+0xe65228>
    19c0:	0b390b3b 	bleq	e446b4 <__ccfg+0xe2470c>
    19c4:	0b0b1349 	bleq	2c66f0 <__ccfg+0x2a6748>
				if (c == 'd' || c == 'u') {
    19c8:	0b0c0b0d 	bleq	304604 <__ccfg+0x2e465c>
    19cc:	00000b38 	andeq	r0, r0, r8, lsr fp
					if (c == 'd' &&
    19d0:	03000d09 	movweq	r0, #3337	; 0xd09
					val = va_arg (ap, lword);
    19d4:	3b0b3a0e 	blcc	2d0214 <__ccfg+0x2b026c>
					fm++;
    19d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					if (c == 'd' &&
    19dc:	000b3813 	andeq	r3, fp, r3, lsl r8
    19e0:	00340a00 	eorseq	r0, r4, r0, lsl #20
						outc ('-');
    19e4:	0b3a0e03 	bleq	e851f8 <__ccfg+0xe65250>
    19e8:	0b390b3b 	bleq	e446dc <__ccfg+0xe24734>
						val = (~val) + 1;
    19ec:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 18d0 <__pi_vfparse+0x54>
				enci (10000);
    19f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
					enci (1000000000UL);
    19f4:	0b000f0b 	bleq	5628 <__exidx_end+0x29a4>
    19f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    19fc:	01010c00 	tsteq	r1, r0, lsl #24
    1a00:	13011349 	movwne	r1, #4937	; 0x1349
    1a04:	210d0000 	mrscs	r0, (UNDEF: 13)
    1a08:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1a0c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1a10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a14:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a18:	150f0000 	strne	r0, [pc, #-0]	; 1a20 <__pi_vfparse+0x1a4>
    1a1c:	010c2701 	tsteq	ip, r1, lsl #14
    1a20:	10000013 	andne	r0, r0, r3, lsl r0
    1a24:	13490005 	movtne	r0, #36869	; 0x9005
    1a28:	34110000 	ldrcc	r0, [r1], #-0
    1a2c:	3a0e0300 	bcc	382634 <__ccfg+0x36268c>
    1a30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a34:	3f13490b 	svccc	0x0013490b
				} else if (c == 'x') {
    1a38:	000c3c0c 	andeq	r3, ip, ip, lsl #24
					for (i = 28; ; i -= 4) {
    1a3c:	01131200 	tsteq	r3, r0, lsl #4
					val = va_arg (ap, lword);
    1a40:	0b3a0b0b 	bleq	e84674 <__ccfg+0xe646cc>
							[ (val >> i) & 0xf ]);
    1a44:	0b39053b 	bleq	e42f38 <__ccfg+0xe22f90>
    1a48:	00001301 	andeq	r1, r0, r1, lsl #6
						outc (__pi_hex_enc_table
    1a4c:	03000d13 	movweq	r0, #3347	; 0xd13
    1a50:	3b0b3a0e 	blcc	2d0290 <__ccfg+0x2b02e8>
    1a54:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
						if (i == 0)
    1a58:	000b3813 	andeq	r3, fp, r3, lsl r8
    1a5c:	01131400 	tsteq	r3, r0, lsl #8
					for (i = 28; ; i -= 4) {
    1a60:	0b0b0e03 	bleq	2c5274 <__ccfg+0x2a52cc>
					outc ('%');
    1a64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a68:	13010b39 	movwne	r0, #6969	; 0x1b39
    1a6c:	21150000 	tstcs	r5, r0
					outc ('l');
    1a70:	2f134900 	svccs	0x00134900
    1a74:	1600000b 	strne	r0, [r0], -fp
				val = (word) va_arg (ap, aword);
    1a78:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 19c8 <__pi_vfparse+0x14c>
				outc (val);
    1a7c:	0b3a0e03 	bleq	e85290 <__ccfg+0xe652e8>
    1a80:	0b390b3b 	bleq	e44774 <__ccfg+0xe247cc>
				while (*st != '\0') {
    1a84:	13490c27 	movtne	r0, #39975	; 0x9c27
    1a88:	01120111 	tsteq	r2, r1, lsl r1
    1a8c:	00000a40 	andeq	r0, r0, r0, asr #20
    1a90:	03000517 	movweq	r0, #1303	; 0x517
					outc (*st);
    1a94:	3b0b3a08 	blcc	2d02bc <__ccfg+0x2b0314>
    1a98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					st++;
    1a9c:	00060213 	andeq	r0, r6, r3, lsl r2
		c = *fm++;
    1aa0:	00341800 	eorseq	r1, r4, r0, lsl #16
    1aa4:	0b3a0e03 	bleq	e852b8 <__ccfg+0xe65310>
    1aa8:	0b390b3b 	bleq	e4479c <__ccfg+0xe247f4>
char *vform (char *res, const char *fm, va_list aq) {
    1aac:	06021349 	streq	r1, [r2], -r9, asr #6
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
	if (res != NULL) {
    1ab4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab8:	0e030b13 	vmoveq.32	d3[0], r0
    1abc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1ac0:	06100111 			; <UNDEFINED> instruction: 0x06100111
}
    1ac4:	24020000 	strcs	r0, [r2], #-0
    1ac8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	fml = strlen (fm) + 17;
    1acc:	000e030b 	andeq	r0, lr, fp, lsl #6
    1ad0:	00160300 	andseq	r0, r6, r0, lsl #6
    1ad4:	0b3a0e03 	bleq	e852e8 <__ccfg+0xe65340>
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad8:	0b390b3b 	bleq	e447cc <__ccfg+0xe24824>
    1adc:	00001349 	andeq	r1, r0, r9, asr #6
    1ae0:	0b002404 	bleq	aaf8 <__exidx_end+0x7e74>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ae8:	05000008 	streq	r0, [r0, #-8]
    1aec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1af0:	0b3a0b0b 	bleq	e84724 <__ccfg+0xe6477c>
		ufree (res);
    1af4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
		goto Again;
    1af8:	0d060000 	stceq	0, cr0, [r6, #-0]
	if (buf == NULL || fmt == NULL)
    1afc:	490e0300 	stmdbmi	lr, {r8, r9}
int vscan (const char *buf, const char *fmt, va_list ap) {
    1b00:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
	if (buf == NULL || fmt == NULL)
    1b04:	0700000c 	streq	r0, [r0, -ip]
    1b08:	0b0b000f 	bleq	2c1b4c <__ccfg+0x2a1ba4>
    1b0c:	26080000 	strcs	r0, [r8], -r0
		    	    case 'u': scanu (lword); break;
    1b10:	00134900 	andseq	r4, r3, r0, lsl #18
			while (isspace (*buf)) buf++;
    1b14:	00350900 	eorseq	r0, r5, r0, lsl #18
    1b18:	00001349 	andeq	r1, r0, r9, asr #6
	while (*fmt != '\0') {
    1b1c:	0b01130a 	bleq	4674c <__ccfg+0x267a4>
		if (*fmt++ != '%')
    1b20:	3b0b3a0b 	blcc	2d0354 <__ccfg+0x2b03ac>
		switch (*fmt++) {
    1b24:	010b390b 	tsteq	fp, fp, lsl #18
    1b28:	0b000013 	bleq	1b7c <vscan+0x80>
    1b2c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b30:	0b3b0b3a 	bleq	ec4820 <__ccfg+0xea4878>
    1b34:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b38:	0b0d0b0b 	bleq	34476c <__ccfg+0x3247c4>
    1b3c:	0b380b0c 	bleq	e04774 <__ccfg+0xde47cc>
}
    1b40:	0d0c0000 	stceq	0, cr0, [ip, #-0]
		switch (*fmt++) {
    1b44:	3a0e0300 	bcc	38274c <__ccfg+0x3627a4>
    1b48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b4c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1b50:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
			while (isspace (*buf)) buf++;
    1b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1b58:	0b3b0b3a 	bleq	ec4848 <__ccfg+0xea48a0>
    1b5c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b60:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1b64:	0f0e0000 	svceq	0x000e0000
    1b68:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
			if (*buf == '\0')
    1b6c:	0f000013 	svceq	0x00000013
			if (*buf != ',') {
    1b70:	13490101 	movtne	r0, #37121	; 0x9101
			sap = va_arg (ap, char*);
    1b74:	00001301 	andeq	r1, r0, r1, lsl #6
			nc++;
    1b78:	00002110 	andeq	r2, r0, r0, lsl r1
			if (*buf != ',') {
    1b7c:	00161100 	andseq	r1, r6, r0, lsl #2
				while (!isspace (*buf) && *buf != ',' &&
    1b80:	0b3a0e03 	bleq	e85394 <__ccfg+0xe653ec>
    1b84:	0b39053b 	bleq	e43078 <__ccfg+0xe230d0>
    1b88:	00001349 	andeq	r1, r0, r9, asr #6
    1b8c:	27011512 	smladcs	r1, r2, r5, r1
    1b90:	0013010c 	andseq	r0, r3, ip, lsl #2
    1b94:	00051300 	andeq	r1, r5, r0, lsl #6
    1b98:	00001349 	andeq	r1, r0, r9, asr #6
			while (isspace (*buf)) buf++;
    1b9c:	03003414 	movweq	r3, #1044	; 0x414
    1ba0:	3b0b3a0e 	blcc	2d03e0 <__ccfg+0x2b0438>
    1ba4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1ba8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1bac:	1500000c 	strne	r0, [r0, #-12]
			if (*buf == ',') buf++;
    1bb0:	0b0b0113 	bleq	2c2004 <__ccfg+0x2a205c>
    1bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			*sap = '\0';
    1bb8:	13010b39 	movwne	r0, #6969	; 0x1b39
			break;
    1bbc:	0d160000 	ldceq	0, cr0, [r6, #-0]
		    case 'd': scani (word); break;
    1bc0:	3a0e0300 	bcc	3827c8 <__ccfg+0x362820>
    1bc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bc8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1bcc:	1700000b 	strne	r0, [r0, -fp]
    1bd0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1bd4:	0b3a0b0b 	bleq	e84808 <__ccfg+0xe64860>
    1bd8:	0b39053b 	bleq	e430cc <__ccfg+0xe23124>
    1bdc:	00001301 	andeq	r1, r0, r1, lsl #6
    1be0:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1be4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1be8:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1bec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1bf0:	0b3b0b3a 	bleq	ec48e0 <__ccfg+0xea4938>
    1bf4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1bf8:	01111349 	tsteq	r1, r9, asr #6
    1bfc:	0a400112 	beq	100204c <__ccfg+0xfe20a4>
    1c00:	00001301 	andeq	r1, r0, r1, lsl #6
    1c04:	0300051a 	movweq	r0, #1306	; 0x51a
    1c08:	3b0b3a08 	blcc	2d0430 <__ccfg+0x2b0488>
    1c0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c10:	00060213 	andeq	r0, r6, r3, lsl r2
    1c14:	00051b00 	andeq	r1, r5, r0, lsl #22
    1c18:	0b3a0803 	bleq	e83c2c <__ccfg+0xe63c84>
    1c1c:	0b390b3b 	bleq	e44910 <__ccfg+0xe24968>
    1c20:	0a021349 	beq	8694c <__ccfg+0x669a4>
    1c24:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1c28:	1d000000 	stcne	0, cr0, [r0, #-0]
    1c2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    case 'u': scanu (word); break;
    1c30:	0b3b0b3a 	bleq	ec4920 <__ccfg+0xea4978>
    1c34:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c38:	00000602 	andeq	r0, r0, r2, lsl #12
    1c3c:	0300341e 	movweq	r3, #1054	; 0x41e
    1c40:	3b0b3a08 	blcc	2d0468 <__ccfg+0x2b04c0>
    1c44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c48:	00060213 	andeq	r0, r6, r3, lsl r2
    1c4c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1c50:	0b3a0803 	bleq	e83c64 <__ccfg+0xe63cbc>
    1c54:	0b390b3b 	bleq	e44948 <__ccfg+0xe249a0>
    1c58:	0a021349 	beq	86984 <__ccfg+0x669dc>
    1c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c60:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1c64:	0e030b13 	vmoveq.32	d3[0], r0
    1c68:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1c6c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1c70:	24020000 	strcs	r0, [r2], #-0
    1c74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		    case 'x': scanx (word); break;
    1c78:	000e030b 	andeq	r0, lr, fp, lsl #6
    1c7c:	00160300 	andseq	r0, r6, r0, lsl #6
    1c80:	0b3a0e03 	bleq	e85494 <__ccfg+0xe654ec>
    1c84:	0b390b3b 	bleq	e44978 <__ccfg+0xe249d0>
    1c88:	00001349 	andeq	r1, r0, r9, asr #6
    1c8c:	0b002404 	bleq	aca4 <__exidx_end+0x8020>
    1c90:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1c94:	05000008 	streq	r0, [r0, #-8]
    1c98:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1c9c:	0b3a0b0b 	bleq	e848d0 <__ccfg+0xe64928>
    1ca0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1ca4:	0d060000 	stceq	0, cr0, [r6, #-0]
    1ca8:	490e0300 	stmdbmi	lr, {r8, r9}
    1cac:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1cb0:	0700000c 	streq	r0, [r0, -ip]
    1cb4:	0b0b000f 	bleq	2c1cf8 <__ccfg+0x2a1d50>
    1cb8:	26080000 	strcs	r0, [r8], -r0
    1cbc:	00134900 	andseq	r4, r3, r0, lsl #18
    1cc0:	00350900 	eorseq	r0, r5, r0, lsl #18
    1cc4:	00001349 	andeq	r1, r0, r9, asr #6
    1cc8:	0b01130a 	bleq	468f8 <__ccfg+0x26950>
    1ccc:	3b0b3a0b 	blcc	2d0500 <__ccfg+0x2b0558>
    1cd0:	010b390b 	tsteq	fp, fp, lsl #18
    1cd4:	0b000013 	bleq	1d28 <vscan+0x22c>
    1cd8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1cdc:	0b3b0b3a 	bleq	ec49cc <__ccfg+0xea4a24>
    1ce0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ce4:	0b0d0b0b 	bleq	344918 <__ccfg+0x324970>
    1ce8:	0b380b0c 	bleq	e04920 <__ccfg+0xde4978>
    1cec:	0d0c0000 	stceq	0, cr0, [ip, #-0]
			switch (*fmt++) {
    1cf0:	3a0e0300 	bcc	3828f8 <__ccfg+0x362950>
    1cf4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1cfc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1d00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d04:	0b3b0b3a 	bleq	ec49f4 <__ccfg+0xea4a4c>
		    	    case 'd': scani (lword); break;
    1d08:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d0c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1d10:	0f0e0000 	svceq	0x000e0000
    1d14:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d18:	0f000013 	svceq	0x00000013
    1d1c:	13490101 	movtne	r0, #37121	; 0x9101
    1d20:	00001301 	andeq	r1, r0, r1, lsl #6
    1d24:	00002110 	andeq	r2, r0, r0, lsl r1
    1d28:	00161100 	andseq	r1, r6, r0, lsl #2
    1d2c:	0b3a0e03 	bleq	e85540 <__ccfg+0xe65598>
    1d30:	0b39053b 	bleq	e43224 <__ccfg+0xe2327c>
    1d34:	00001349 	andeq	r1, r0, r9, asr #6
    1d38:	27011512 	smladcs	r1, r2, r5, r1
    1d3c:	0013010c 	andseq	r0, r3, ip, lsl #2
    1d40:	00051300 	andeq	r1, r5, r0, lsl #6
    1d44:	00001349 	andeq	r1, r0, r9, asr #6
    1d48:	03003414 	movweq	r3, #1044	; 0x414
    1d4c:	3b0b3a0e 	blcc	2d058c <__ccfg+0x2b05e4>
    1d50:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1d54:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1d58:	1500000c 	strne	r0, [r0, #-12]
    1d5c:	0b0b0113 	bleq	2c21b0 <__ccfg+0x2a2208>
    1d60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		    	    case 'x': scanx (lword); break;
    1d64:	13010b39 	movwne	r0, #6969	; 0x1b39
    1d68:	0d160000 	ldceq	0, cr0, [r6, #-0]
    1d6c:	3a0e0300 	bcc	382974 <__ccfg+0x3629cc>
    1d70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d74:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1d78:	1700000b 	strne	r0, [r0, -fp]
    1d7c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1d80:	0b3a0b0b 	bleq	e849b4 <__ccfg+0xe64a0c>
    1d84:	0b39053b 	bleq	e43278 <__ccfg+0xe232d0>
    1d88:	00001301 	andeq	r1, r0, r1, lsl #6
    1d8c:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1d90:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1d94:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1d98:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1d9c:	0b3b0b3a 	bleq	ec4a8c <__ccfg+0xea4ae4>
    1da0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1da4:	01111349 	tsteq	r1, r9, asr #6
    1da8:	0a400112 	beq	10021f8 <__ccfg+0xfe2250>
    1dac:	00001301 	andeq	r1, r0, r1, lsl #6
    1db0:	0300051a 	movweq	r0, #1306	; 0x51a
    1db4:	3b0b3a08 	blcc	2d05dc <__ccfg+0x2b0634>
    1db8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1dbc:	00060213 	andeq	r0, r6, r3, lsl r2
    1dc0:	00051b00 	andeq	r1, r5, r0, lsl #22
    1dc4:	0b3a0803 	bleq	e83dd8 <__ccfg+0xe63e30>
    1dc8:	0b390b3b 	bleq	e44abc <__ccfg+0xe24b14>
    1dcc:	0a021349 	beq	86af8 <__ccfg+0x66b50>
    1dd0:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
		    	    case 'd': scani (lword); break;
    1dd4:	1d000000 	stcne	0, cr0, [r0, #-0]
    1dd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ddc:	0b3b0b3a 	bleq	ec4acc <__ccfg+0xea4b24>
    1de0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1de4:	00000602 	andeq	r0, r0, r2, lsl #12
    1de8:	0300341e 	movweq	r3, #1054	; 0x41e
    1dec:	3b0b3a08 	blcc	2d0614 <__ccfg+0x2b066c>
		    	    case 'u': scanu (lword); break;
    1df0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1df4:	000a0213 	andeq	r0, sl, r3, lsl r2
    1df8:	11010000 	mrsne	r0, (UNDEF: 1)
    1dfc:	130e2501 	movwne	r2, #58625	; 0xe501
    1e00:	1b0e030b 	blne	382a34 <__ccfg+0x362a8c>
    1e04:	1106550e 	tstne	r6, lr, lsl #10
    1e08:	00061001 	andeq	r1, r6, r1
    1e0c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1e10:	0b3e0b0b 	bleq	f84a44 <__ccfg+0xf64a9c>
    1e14:	00000e03 	andeq	r0, r0, r3, lsl #28
    1e18:	03001603 	movweq	r1, #1539	; 0x603
    1e1c:	3b0b3a0e 	blcc	2d065c <__ccfg+0x2b06b4>
    1e20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1e28:	0b0b0024 	bleq	2c1ec0 <__ccfg+0x2a1f18>
    1e2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1e30:	26050000 	strcs	r0, [r5], -r0
    1e34:	00134900 	andseq	r4, r3, r0, lsl #18
		    	    case 'x': scanx (lword); break;
    1e38:	00350600 	eorseq	r0, r5, r0, lsl #12
    1e3c:	00001349 	andeq	r1, r0, r9, asr #6
			if ((c = *buf++) == '\0')
    1e40:	0b011307 	bleq	46a64 <__ccfg+0x26abc>
    1e44:	3b0b3a0b 	blcc	2d0678 <__ccfg+0x2b06d0>
			sap = va_arg (ap, char*);
    1e48:	010b390b 	tsteq	fp, fp, lsl #18
			nc++;
    1e4c:	08000013 	stmdaeq	r0, {r0, r1, r4}
			break;
    1e50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			while (isspace (*buf)) buf++;
    1e54:	0b3b0b3a 	bleq	ec4b44 <__ccfg+0xea4b9c>
    1e58:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e5c:	0b0d0b0b 	bleq	344a90 <__ccfg+0x324ae8>
						*sap++ = *buf++;
    1e60:	0b380b0c 	bleq	e04a98 <__ccfg+0xde4af0>
    1e64:	0d090000 	stceq	0, cr0, [r9, #-0]
			while (isspace (*buf)) buf++;
    1e68:	3a0e0300 	bcc	382a70 <__ccfg+0x362ac8>
    1e6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		return 0;
    1e74:	0a00000b 	beq	1ea8 <NOROM_AONBatMonTemperatureGetDegC+0x1c>
    1e78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    case 'x': scanx (word); break;
    1e7c:	0b3b0b3a 	bleq	ec4b6c <__ccfg+0xea4bc4>
    1e80:	13490b39 	movtne	r0, #39737	; 0x9b39
		    	    case 'x': scanx (lword); break;
    1e84:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1e88:	0f0b0000 	svceq	0x000b0000
    1e8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1e90:	0c000013 	stceq	0, cr0, [r0], {19}
    1e94:	13490101 	movtne	r0, #37121	; 0x9101
    1e98:	00001301 	andeq	r1, r0, r1, lsl #6
    1e9c:	0000210d 	andeq	r2, r0, sp, lsl #2
    1ea0:	00160e00 	andseq	r0, r6, r0, lsl #28
    1ea4:	0b3a0e03 	bleq	e856b8 <__ccfg+0xe65710>
    1ea8:	0b39053b 	bleq	e4339c <__ccfg+0xe233f4>
    1eac:	00001349 	andeq	r1, r0, r9, asr #6
    1eb0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1eb4:	0013010c 	andseq	r0, r3, ip, lsl #2
    1eb8:	00051000 	andeq	r1, r5, r0
    1ebc:	00001349 	andeq	r1, r0, r9, asr #6
    1ec0:	03003411 	movweq	r3, #1041	; 0x411
    1ec4:	3b0b3a0e 	blcc	2d0704 <__ccfg+0x2b075c>
    1ec8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1ecc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1ed0:	1200000c 	andne	r0, r0, #12
    1ed4:	0b0b0113 	bleq	2c2328 <__ccfg+0x2a2380>
    1ed8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1edc:	13010b39 	movwne	r0, #6969	; 0x1b39
    1ee0:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1ee4:	3a0e0300 	bcc	382aec <__ccfg+0x362b44>
    1ee8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1eec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1ef0:	1400000b 	strne	r0, [r0], #-11
    1ef4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1ef8:	0b3a0b0b 	bleq	e84b2c <__ccfg+0xe64b84>
    1efc:	0b39053b 	bleq	e433f0 <__ccfg+0xe23448>
    1f00:	00001301 	andeq	r1, r0, r1, lsl #6
    1f04:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1f08:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f0c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1f10:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1f14:	0b3b0b3a 	bleq	ec4c04 <__ccfg+0xea4c5c>
    1f18:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1f1c:	01120111 	tsteq	r2, r1, lsl r1
    1f20:	13010a40 	movwne	r0, #6720	; 0x1a40
    1f24:	05170000 	ldreq	r0, [r7, #-0]
    1f28:	3a0e0300 	bcc	382b30 <__ccfg+0x362b88>
    1f2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f34:	18000006 	stmdane	r0, {r1, r2}
    1f38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1f3c:	0b3b0b3a 	bleq	ec4c2c <__ccfg+0xea4c84>
    1f40:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f44:	00000602 	andeq	r0, r0, r2, lsl #12
    1f48:	03000a19 	movweq	r0, #2585	; 0xa19
    1f4c:	3b0b3a0e 	blcc	2d078c <__ccfg+0x2b07e4>
    1f50:	000b390b 	andeq	r3, fp, fp, lsl #18
    1f54:	010b1a00 	tsteq	fp, r0, lsl #20
    1f58:	00000655 	andeq	r0, r0, r5, asr r6
    1f5c:	0300341b 	movweq	r3, #1051	; 0x41b
    1f60:	3b0b3a08 	blcc	2d0788 <__ccfg+0x2b07e0>
    1f64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f68:	000a0213 	andeq	r0, sl, r3, lsl r2
    1f6c:	11010000 	mrsne	r0, (UNDEF: 1)
    1f70:	130e2501 	movwne	r2, #58625	; 0xe501
    1f74:	1b0e030b 	blne	382ba8 <__ccfg+0x362c00>
    1f78:	1106550e 	tstne	r6, lr, lsl #10
    1f7c:	00061001 	andeq	r1, r6, r1
    1f80:	00240200 	eoreq	r0, r4, r0, lsl #4
    1f84:	0b3e0b0b 	bleq	f84bb8 <__ccfg+0xf64c10>
    1f88:	00000e03 	andeq	r0, r0, r3, lsl #28
    1f8c:	03001603 	movweq	r1, #1539	; 0x603
    1f90:	3b0b3a0e 	blcc	2d07d0 <__ccfg+0x2b0828>
    1f94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f98:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1f9c:	0b0b0024 	bleq	2c2034 <__ccfg+0x2a208c>
    1fa0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1fa4:	26050000 	strcs	r0, [r5], -r0
    1fa8:	00134900 	andseq	r4, r3, r0, lsl #18
    1fac:	00350600 	eorseq	r0, r5, r0, lsl #12
    1fb0:	00001349 	andeq	r1, r0, r9, asr #6
    1fb4:	0b000f07 	bleq	5bd8 <__exidx_end+0x2f54>
    1fb8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fbc:	01130800 	tsteq	r3, r0, lsl #16
    1fc0:	0b3a0b0b 	bleq	e84bf4 <__ccfg+0xe64c4c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	00001301 	andeq	r1, r0, r1, lsl #6
    1fcc:	03000d09 	movweq	r0, #3337	; 0xd09
    1fd0:	3b0b3a0e 	blcc	2d0810 <__ccfg+0x2b0868>
    1fd4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fd8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1fdc:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1fe0:	0a00000b 	beq	2014 <NOROM_SetupTrimDevice+0x5c>
    1fe4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1fe8:	0b3b0b3a 	bleq	ec4cd8 <__ccfg+0xea4d30>
    1fec:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ff0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ff4:	0300340b 	movweq	r3, #1035	; 0x40b
    1ff8:	3b0b3a0e 	blcc	2d0838 <__ccfg+0x2b0890>
    1ffc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2000:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2004:	0c00000c 	stceq	0, cr0, [r0], {12}
    2008:	13490101 	movtne	r0, #37121	; 0x9101
    200c:	00001301 	andeq	r1, r0, r1, lsl #6
    2010:	0000210d 	andeq	r2, r0, sp, lsl #2
    2014:	00160e00 	andseq	r0, r6, r0, lsl #28
    2018:	0b3a0e03 	bleq	e8582c <__ccfg+0xe65884>
    201c:	0b39053b 	bleq	e43510 <__ccfg+0xe23568>
    2020:	00001349 	andeq	r1, r0, r9, asr #6
    2024:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    2028:	0013010c 	andseq	r0, r3, ip, lsl #2
    202c:	00051000 	andeq	r1, r5, r0
    2030:	00001349 	andeq	r1, r0, r9, asr #6
    2034:	03003411 	movweq	r3, #1041	; 0x411
    2038:	3b0b3a0e 	blcc	2d0878 <__ccfg+0x2b08d0>
    203c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2040:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2044:	1200000c 	andne	r0, r0, #12
    2048:	0b0b0113 	bleq	2c249c <__ccfg+0x2a24f4>
    204c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2050:	13010b39 	movwne	r0, #6969	; 0x1b39
    2054:	0d130000 	ldceq	0, cr0, [r3, #-0]
    2058:	3a0e0300 	bcc	382c60 <__ccfg+0x362cb8>
    205c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2060:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2064:	1400000b 	strne	r0, [r0], #-11
    2068:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    206c:	0b3a0b0b 	bleq	e84ca0 <__ccfg+0xe64cf8>
    2070:	0b39053b 	bleq	e43564 <__ccfg+0xe235bc>
    2074:	00001301 	andeq	r1, r0, r1, lsl #6
    2078:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    207c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2080:	00341600 	eorseq	r1, r4, r0, lsl #12
    2084:	0b3a0e03 	bleq	e85898 <__ccfg+0xe658f0>
    2088:	0b390b3b 	bleq	e44d7c <__ccfg+0xe24dd4>
    208c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f70 <TrimAfterColdResetWakeupFromShutDown+0x8c>
    2090:	00000a02 	andeq	r0, r0, r2, lsl #20
    2094:	3f012e17 	svccc	0x00012e17
    2098:	3a0e030c 	bcc	382cd0 <__ccfg+0x362d28>
    209c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20a0:	110c270b 	tstne	ip, fp, lsl #14
    20a4:	40011201 	andmi	r1, r1, r1, lsl #4
    20a8:	1800000a 	stmdane	r0, {r1, r3}
    20ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    20b0:	0b3b0b3a 	bleq	ec4da0 <__ccfg+0xea4df8>
    20b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    20b8:	00000602 	andeq	r0, r0, r2, lsl #12
    20bc:	03003419 	movweq	r3, #1049	; 0x419
    20c0:	3b0b3a0e 	blcc	2d0900 <__ccfg+0x2b0958>
    20c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20c8:	00060213 	andeq	r0, r6, r3, lsl r2
    20cc:	010b1a00 	tsteq	fp, r0, lsl #20
    20d0:	00000655 	andeq	r0, r0, r5, asr r6
    20d4:	0300341b 	movweq	r3, #1051	; 0x41b
    20d8:	3b0b3a08 	blcc	2d0900 <__ccfg+0x2b0958>
    20dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20e0:	000a0213 	andeq	r0, sl, r3, lsl r2
    20e4:	11010000 	mrsne	r0, (UNDEF: 1)
    20e8:	130e2501 	movwne	r2, #58625	; 0xe501
    20ec:	1b0e030b 	blne	382d20 <__ccfg+0x362d78>
    20f0:	1106550e 	tstne	r6, lr, lsl #10
    20f4:	00061001 	andeq	r1, r6, r1
    20f8:	00240200 	eoreq	r0, r4, r0, lsl #4
    20fc:	0b3e0b0b 	bleq	f84d30 <__ccfg+0xf64d88>
    2100:	00000e03 	andeq	r0, r0, r3, lsl #28
    2104:	03001603 	movweq	r1, #1539	; 0x603
    2108:	3b0b3a0e 	blcc	2d0948 <__ccfg+0x2b09a0>
    210c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2110:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2114:	0b0b0024 	bleq	2c21ac <__ccfg+0x2a2204>
    2118:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    211c:	13050000 	movwne	r0, #20480	; 0x5000
    2120:	0b0e0301 	bleq	382d2c <__ccfg+0x362d84>
    2124:	3b0b3a0b 	blcc	2d0958 <__ccfg+0x2b09b0>
    2128:	0013010b 	andseq	r0, r3, fp, lsl #2
    212c:	000d0600 	andeq	r0, sp, r0, lsl #12
    2130:	13490e03 	movtne	r0, #40451	; 0x9e03
    2134:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2138:	0f070000 	svceq	0x00070000
    213c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2140:	00260800 	eoreq	r0, r6, r0, lsl #16
    2144:	00001349 	andeq	r1, r0, r9, asr #6
    2148:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    214c:	0a000013 	beq	21a0 <NOROM_SetupGetTrimForAnabypassValue1+0x1c>
    2150:	0b0b000f 	bleq	2c2194 <__ccfg+0x2a21ec>
    2154:	00001349 	andeq	r1, r0, r9, asr #6
    2158:	0b01130b 	bleq	46d8c <__ccfg+0x26de4>
    215c:	3b0b3a0b 	blcc	2d0990 <__ccfg+0x2b09e8>
    2160:	010b390b 	tsteq	fp, fp, lsl #18
    2164:	0c000013 	stceq	0, cr0, [r0], {19}
    2168:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    216c:	0b3b0b3a 	bleq	ec4e5c <__ccfg+0xea4eb4>
    2170:	13490b39 	movtne	r0, #39737	; 0x9b39
    2174:	0b0d0b0b 	bleq	344da8 <__ccfg+0x324e00>
    2178:	0b380b0c 	bleq	e04db0 <__ccfg+0xde4e08>
    217c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2180:	3a0e0300 	bcc	382d88 <__ccfg+0x362de0>
    2184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2188:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    218c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2190:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2194:	0b3b0b3a 	bleq	ec4e84 <__ccfg+0xea4edc>
    2198:	13490b39 	movtne	r0, #39737	; 0x9b39
    219c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    21a0:	010f0000 	mrseq	r0, CPSR
    21a4:	01134901 	tsteq	r3, r1, lsl #18
    21a8:	10000013 	andne	r0, r0, r3, lsl r0
    21ac:	00000021 	andeq	r0, r0, r1, lsr #32
    21b0:	03001611 	movweq	r1, #1553	; 0x611
    21b4:	3b0b3a0e 	blcc	2d09f4 <__ccfg+0x2b0a4c>
    21b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21bc:	12000013 	andne	r0, r0, #19
    21c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    21c4:	00001301 	andeq	r1, r0, r1, lsl #6
    21c8:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    21cc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    21d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    21dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    21e0:	13150000 	tstne	r5, #0
    21e4:	3a0b0b01 	bcc	2c4df0 <__ccfg+0x2a4e48>
    21e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    21f0:	000d1600 	andeq	r1, sp, r0, lsl #12
    21f4:	0b3a0e03 	bleq	e85a08 <__ccfg+0xe65a60>
    21f8:	0b39053b 	bleq	e436ec <__ccfg+0xe23744>
    21fc:	0b381349 	bleq	e06f28 <__ccfg+0xde6f80>
    2200:	13170000 	tstne	r7, #0
    2204:	0b0e0301 	bleq	382e10 <__ccfg+0x362e68>
    2208:	3b0b3a0b 	blcc	2d0a3c <__ccfg+0x2b0a94>
    220c:	010b3905 	tsteq	fp, r5, lsl #18
    2210:	18000013 	stmdane	r0, {r0, r1, r4}
    2214:	13490021 	movtne	r0, #36897	; 0x9021
    2218:	00000b2f 	andeq	r0, r0, pc, lsr #22
    221c:	3f012e19 	svccc	0x00012e19
    2220:	3a0e030c 	bcc	382e58 <__ccfg+0x362eb0>
    2224:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2228:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    222c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2230:	010a4001 	tsteq	sl, r1
    2234:	1a000013 	bne	2288 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x8>
    2238:	08030005 	stmdaeq	r3, {r0, r2}
    223c:	0b3b0b3a 	bleq	ec4f2c <__ccfg+0xea4f84>
    2240:	13490b39 	movtne	r0, #39737	; 0x9b39
    2244:	00000602 	andeq	r0, r0, r2, lsl #12
    2248:	0300341b 	movweq	r3, #1051	; 0x41b
    224c:	3b0b3a08 	blcc	2d0a74 <__ccfg+0x2b0acc>
    2250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2254:	00060213 	andeq	r0, r6, r3, lsl r2
    2258:	000a1c00 	andeq	r1, sl, r0, lsl #24
    225c:	0b3a0e03 	bleq	e85a70 <__ccfg+0xe65ac8>
    2260:	0b390b3b 	bleq	e44f54 <__ccfg+0xe24fac>
    2264:	00000111 	andeq	r0, r0, r1, lsl r1
    2268:	3f012e1d 	svccc	0x00012e1d
    226c:	3a0e030c 	bcc	382ea4 <__ccfg+0x362efc>
    2270:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2274:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2278:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    227c:	000a4001 	andeq	r4, sl, r1
    2280:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2284:	0b3a0803 	bleq	e84298 <__ccfg+0xe642f0>
    2288:	0b390b3b 	bleq	e44f7c <__ccfg+0xe24fd4>
    228c:	0a021349 	beq	86fb8 <__ccfg+0x67010>
    2290:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    2294:	3a0e0301 	bcc	382ea0 <__ccfg+0x362ef8>
    2298:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    229c:	110c270b 	tstne	ip, fp, lsl #14
    22a0:	40011201 	andmi	r1, r1, r1, lsl #4
    22a4:	010a480a 	tsteq	sl, sl, lsl #16
    22a8:	20000013 	andcs	r0, r0, r3, lsl r0
    22ac:	08030005 	stmdaeq	r3, {r0, r2}
    22b0:	0b3b0b3a 	bleq	ec4fa0 <__ccfg+0xea4ff8>
    22b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    22b8:	00000a02 	andeq	r0, r0, r2, lsl #20
    22bc:	03000a21 	movweq	r0, #2593	; 0xa21
    22c0:	3b0b3a08 	blcc	2d0ae8 <__ccfg+0x2b0b40>
    22c4:	110b390b 	tstne	fp, fp, lsl #18
    22c8:	22000001 	andcs	r0, r0, #1
    22cc:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    22d0:	00001301 	andeq	r1, r0, r1, lsl #6
    22d4:	03003423 	movweq	r3, #1059	; 0x423
    22d8:	3b0b3a08 	blcc	2d0b00 <__ccfg+0x2b0b58>
    22dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    22e0:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    22e4:	0111010b 	tsteq	r1, fp, lsl #2
    22e8:	13010112 	movwne	r0, #4370	; 0x1112
    22ec:	0b250000 	bleq	9422f4 <__ccfg+0x92234c>
    22f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    22f4:	00000001 	andeq	r0, r0, r1
    22f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    22fc:	030b130e 	movweq	r1, #45838	; 0xb30e
    2300:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2304:	10011106 	andne	r1, r1, r6, lsl #2
    2308:	02000006 	andeq	r0, r0, #6
    230c:	0b0b0024 	bleq	2c23a4 <__ccfg+0x2a23fc>
    2310:	0e030b3e 	vmoveq.16	d3[0], r0
    2314:	16030000 	strne	r0, [r3], -r0
    2318:	3a0e0300 	bcc	382f20 <__ccfg+0x362f78>
    231c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2320:	0013490b 	andseq	r4, r3, fp, lsl #18
    2324:	00240400 	eoreq	r0, r4, r0, lsl #8
    2328:	0b3e0b0b 	bleq	f84f5c <__ccfg+0xf64fb4>
    232c:	00000803 	andeq	r0, r0, r3, lsl #16
    2330:	03011305 	movweq	r1, #4869	; 0x1305
    2334:	3a0b0b0e 	bcc	2c4f74 <__ccfg+0x2a4fcc>
    2338:	010b3b0b 	tsteq	fp, fp, lsl #22
    233c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2340:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2344:	0b381349 	bleq	e07070 <__ccfg+0xde70c8>
    2348:	00000c34 	andeq	r0, r0, r4, lsr ip
    234c:	0b000f07 	bleq	5f70 <__exidx_end+0x32ec>
    2350:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2354:	13490026 	movtne	r0, #36902	; 0x9026
    2358:	35090000 	strcc	r0, [r9, #-0]
    235c:	00134900 	andseq	r4, r3, r0, lsl #18
    2360:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2364:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2368:	130b0000 	movwne	r0, #45056	; 0xb000
    236c:	3a0b0b01 	bcc	2c4f78 <__ccfg+0x2a4fd0>
    2370:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2374:	0013010b 	andseq	r0, r3, fp, lsl #2
    2378:	000d0c00 	andeq	r0, sp, r0, lsl #24
    237c:	0b3a0e03 	bleq	e85b90 <__ccfg+0xe65be8>
    2380:	0b390b3b 	bleq	e45074 <__ccfg+0xe250cc>
    2384:	0b0b1349 	bleq	2c70b0 <__ccfg+0x2a7108>
    2388:	0b0c0b0d 	bleq	304fc4 <__ccfg+0x2e501c>
    238c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2390:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2394:	3b0b3a0e 	blcc	2d0bd4 <__ccfg+0x2b0c2c>
    2398:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    239c:	000b3813 	andeq	r3, fp, r3, lsl r8
    23a0:	00340e00 	eorseq	r0, r4, r0, lsl #28
    23a4:	0b3a0e03 	bleq	e85bb8 <__ccfg+0xe65c10>
    23a8:	0b390b3b 	bleq	e4509c <__ccfg+0xe250f4>
    23ac:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2290 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>
    23b0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    23b4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    23b8:	00130113 	andseq	r0, r3, r3, lsl r1
    23bc:	00211000 	eoreq	r1, r1, r0
    23c0:	16110000 	ldrne	r0, [r1], -r0
    23c4:	3a0e0300 	bcc	382fcc <__ccfg+0x363024>
    23c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    23d0:	01151200 	tsteq	r5, r0, lsl #4
    23d4:	13010c27 	movwne	r0, #7207	; 0x1c27
    23d8:	05130000 	ldreq	r0, [r3, #-0]
    23dc:	00134900 	andseq	r4, r3, r0, lsl #18
    23e0:	00341400 	eorseq	r1, r4, r0, lsl #8
    23e4:	0b3a0e03 	bleq	e85bf8 <__ccfg+0xe65c50>
    23e8:	0b39053b 	bleq	e438dc <__ccfg+0xe23934>
    23ec:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 22d0 <NOROM_SetupGetTrimForXoscHfCtl+0x14>
    23f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    23f4:	0b011315 	bleq	47050 <__ccfg+0x270a8>
    23f8:	3b0b3a0b 	blcc	2d0c2c <__ccfg+0x2b0c84>
    23fc:	010b3905 	tsteq	fp, r5, lsl #18
    2400:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2404:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2408:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    240c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2410:	00000b38 	andeq	r0, r0, r8, lsr fp
    2414:	03011317 	movweq	r1, #4887	; 0x1317
    2418:	3a0b0b0e 	bcc	2c5058 <__ccfg+0x2a50b0>
    241c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2420:	0013010b 	andseq	r0, r3, fp, lsl #2
    2424:	00211800 	eoreq	r1, r1, r0, lsl #16
    2428:	0b2f1349 	bleq	bc7154 <__ccfg+0xba71ac>
    242c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2430:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2434:	3b0b3a0e 	blcc	2d0c74 <__ccfg+0x2b0ccc>
    2438:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    243c:	1113490c 	tstne	r3, ip, lsl #18
    2440:	40011201 	andmi	r1, r1, r1, lsl #4
    2444:	0013010a 	andseq	r0, r3, sl, lsl #2
    2448:	00051a00 	andeq	r1, r5, r0, lsl #20
    244c:	0b3a0803 	bleq	e84460 <__ccfg+0xe644b8>
    2450:	0b390b3b 	bleq	e45144 <__ccfg+0xe2519c>
    2454:	06021349 	streq	r1, [r2], -r9, asr #6
    2458:	341b0000 	ldrcc	r0, [fp], #-0
    245c:	3a080300 	bcc	203064 <__ccfg+0x1e30bc>
    2460:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2464:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2468:	1c000006 	stcne	0, cr0, [r0], {6}
    246c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2470:	0b3b0b3a 	bleq	ec5160 <__ccfg+0xea51b8>
    2474:	00000b39 	andeq	r0, r0, r9, lsr fp
    2478:	11010b1d 	tstne	r1, sp, lsl fp
    247c:	01011201 	tsteq	r1, r1, lsl #4
    2480:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2484:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2488:	0b3b0b3a 	bleq	ec5178 <__ccfg+0xea51d0>
    248c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2490:	00000a02 	andeq	r0, r0, r2, lsl #20
    2494:	55010b1f 	strpl	r0, [r1, #-2847]	; 0xfffff4e1
    2498:	00130106 	andseq	r0, r3, r6, lsl #2
    249c:	00342000 	eorseq	r2, r4, r0
    24a0:	0b3a0803 	bleq	e844b4 <__ccfg+0xe6450c>
    24a4:	0b390b3b 	bleq	e45198 <__ccfg+0xe251f0>
    24a8:	00001349 	andeq	r1, r0, r9, asr #6
    24ac:	55010b21 	strpl	r0, [r1, #-2849]	; 0xfffff4df
    24b0:	00000006 	andeq	r0, r0, r6
    24b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    24b8:	030b130e 	movweq	r1, #45838	; 0xb30e
    24bc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    24c0:	10011117 	andne	r1, r1, r7, lsl r1
    24c4:	02000017 	andeq	r0, r0, #23
    24c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    24cc:	0b3b0b3a 	bleq	ec51bc <__ccfg+0xea5214>
    24d0:	00001349 	andeq	r1, r0, r9, asr #6
    24d4:	0b002403 	bleq	b4e8 <__exidx_end+0x8864>
    24d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    24dc:	0400000e 	streq	r0, [r0], #-14
    24e0:	0b0b0024 	bleq	2c2578 <__ccfg+0x2a25d0>
    24e4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    24e8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    24ec:	03193f01 	tsteq	r9, #1, 30
    24f0:	3b0b3a0e 	blcc	2d0d30 <__ccfg+0x2b0d88>
    24f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    24f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    24fc:	97184006 	ldrls	r4, [r8, -r6]
    2500:	00001942 	andeq	r1, r0, r2, asr #18
    2504:	03003406 	movweq	r3, #1030	; 0x406
    2508:	3b0b3a0e 	blcc	2d0d48 <__ccfg+0x2b0da0>
    250c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2510:	07000017 	smladeq	r0, r7, r0, r0
    2514:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2518:	0b3b0b3a 	bleq	ec5208 <__ccfg+0xea5260>
    251c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2520:	01000000 	mrseq	r0, (UNDEF: 0)
    2524:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2528:	0e030b13 	vmoveq.32	d3[0], r0
    252c:	17550e1b 	smmlane	r5, fp, lr, r0
    2530:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2534:	24020000 	strcs	r0, [r2], #-0
    2538:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    253c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2540:	00160300 	andseq	r0, r6, r0, lsl #6
    2544:	0b3a0e03 	bleq	e85d58 <__ccfg+0xe65db0>
    2548:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    254c:	24040000 	strcs	r0, [r4], #-0
    2550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2554:	0008030b 	andeq	r0, r8, fp, lsl #6
    2558:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    255c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2560:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2564:	13491927 	movtne	r1, #39207	; 0x9927
    2568:	06120111 			; <UNDEFINED> instruction: 0x06120111
    256c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2570:	00130119 	andseq	r0, r3, r9, lsl r1
    2574:	00340600 	eorseq	r0, r4, r0, lsl #12
    2578:	0b3a0e03 	bleq	e85d8c <__ccfg+0xe65de4>
    257c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2580:	00001702 	andeq	r1, r0, r2, lsl #14
    2584:	03003407 	movweq	r3, #1031	; 0x407
    2588:	3b0b3a0e 	blcc	2d0dc8 <__ccfg+0x2b0e20>
    258c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2590:	08000018 	stmdaeq	r0, {r3, r4}
    2594:	0b0b0117 	bleq	2c29f8 <__ccfg+0x2a2a50>
    2598:	0b3b0b3a 	bleq	ec5288 <__ccfg+0xea52e0>
    259c:	00001301 	andeq	r1, r0, r1, lsl #6
    25a0:	03000d09 	movweq	r0, #3337	; 0xd09
    25a4:	3b0b3a0e 	blcc	2d0de4 <__ccfg+0x2b0e3c>
    25a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    25ac:	00340a00 	eorseq	r0, r4, r0, lsl #20
    25b0:	0b3a0e03 	bleq	e85dc4 <__ccfg+0xe65e1c>
    25b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25b8:	010b0000 	mrseq	r0, (UNDEF: 11)
    25bc:	01134901 	tsteq	r3, r1, lsl #18
    25c0:	0c000013 	stceq	0, cr0, [r0], {19}
    25c4:	13490021 	movtne	r0, #36897	; 0x9021
    25c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    25cc:	01110100 	tsteq	r1, r0, lsl #2
    25d0:	0b130e25 	bleq	4c5e6c <__ccfg+0x4a5ec4>
    25d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    25d8:	01111755 	tsteq	r1, r5, asr r7
    25dc:	00001710 	andeq	r1, r0, r0, lsl r7
    25e0:	0b002402 	bleq	b5f0 <__exidx_end+0x896c>
    25e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    25e8:	0300000e 	movweq	r0, #14
    25ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    25f0:	0b3b0b3a 	bleq	ec52e0 <__ccfg+0xea5338>
    25f4:	00001349 	andeq	r1, r0, r9, asr #6
    25f8:	0b002404 	bleq	b610 <__exidx_end+0x898c>
    25fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2600:	05000008 	streq	r0, [r0, #-8]
    2604:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2608:	0b3a0e03 	bleq	e85e1c <__ccfg+0xe65e74>
    260c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2610:	01111349 	tsteq	r1, r9, asr #6
    2614:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2618:	01194297 			; <UNDEFINED> instruction: 0x01194297
    261c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2620:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2624:	0b3b0b3a 	bleq	ec5314 <__ccfg+0xea536c>
    2628:	00001349 	andeq	r1, r0, r9, asr #6
    262c:	03003407 	movweq	r3, #1031	; 0x407
    2630:	3b0b3a0e 	blcc	2d0e70 <__ccfg+0x2b0ec8>
    2634:	00134905 	andseq	r4, r3, r5, lsl #18
    2638:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    263c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2640:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2644:	13491927 	movtne	r1, #39207	; 0x9927
    2648:	06120111 			; <UNDEFINED> instruction: 0x06120111
    264c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2650:	00130119 	andseq	r0, r3, r9, lsl r1
    2654:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2658:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    265c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2660:	01111927 	tsteq	r1, r7, lsr #18
    2664:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2668:	00194297 	mulseq	r9, r7, r2
    266c:	00050a00 	andeq	r0, r5, r0, lsl #20
    2670:	0b3a0e03 	bleq	e85e84 <__ccfg+0xe65edc>
    2674:	1349053b 	movtne	r0, #38203	; 0x953b
    2678:	00001802 	andeq	r1, r0, r2, lsl #16
    267c:	01110100 	tsteq	r1, r0, lsl #2
    2680:	0b130e25 	bleq	4c5f1c <__ccfg+0x4a5f74>
    2684:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2688:	01111755 	tsteq	r1, r5, asr r7
    268c:	00001710 	andeq	r1, r0, r0, lsl r7
    2690:	0b002402 	bleq	b6a0 <__exidx_end+0x8a1c>
    2694:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2698:	0300000e 	movweq	r0, #14
    269c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    26a0:	0b3b0b3a 	bleq	ec5390 <__ccfg+0xea53e8>
    26a4:	00001349 	andeq	r1, r0, r9, asr #6
    26a8:	0b002404 	bleq	b6c0 <__exidx_end+0x8a3c>
    26ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    26b0:	05000008 	streq	r0, [r0, #-8]
    26b4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    26b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26bc:	0b201927 	bleq	808b60 <__ccfg+0x7e8bb8>
    26c0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    26c4:	3a0e0300 	bcc	3832cc <__ccfg+0x363324>
    26c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26cc:	000b2019 	andeq	r2, fp, r9, lsl r0
    26d0:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    26d4:	0b3a0e03 	bleq	e85ee8 <__ccfg+0xe65f40>
    26d8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    26dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    26e4:	00130119 	andseq	r0, r3, r9, lsl r1
    26e8:	00050800 	andeq	r0, r5, r0, lsl #16
    26ec:	0b3a0e03 	bleq	e85f00 <__ccfg+0xe65f58>
    26f0:	1349053b 	movtne	r0, #38203	; 0x953b
    26f4:	00001702 	andeq	r1, r0, r2, lsl #14
    26f8:	03003409 	movweq	r3, #1033	; 0x409
    26fc:	3b0b3a0e 	blcc	2d0f3c <__ccfg+0x2b0f94>
    2700:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2704:	0a000017 	beq	2768 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x134>
    2708:	1331001d 	teqne	r1, #29
    270c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2710:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2714:	0b0b0000 	bleq	2c271c <__ccfg+0x2a2774>
    2718:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    271c:	00130106 	andseq	r0, r3, r6, lsl #2
    2720:	82890c00 	addhi	r0, r9, #0, 24
    2724:	01110101 	tsteq	r1, r1, lsl #2
    2728:	13011331 	movwne	r1, #4913	; 0x1331
    272c:	8a0d0000 	bhi	342734 <__ccfg+0x32278c>
    2730:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2734:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2738:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    273c:	11010182 	smlabbne	r1, r2, r1, r0
    2740:	0f000001 	svceq	0x00000001
    2744:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2748:	0b3a0e03 	bleq	e85f5c <__ccfg+0xe65fb4>
    274c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2750:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2754:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2758:	00130119 	andseq	r0, r3, r9, lsl r1
    275c:	00341000 	eorseq	r1, r4, r0
    2760:	0b3a0e03 	bleq	e85f74 <__ccfg+0xe65fcc>
    2764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2768:	00001702 	andeq	r1, r0, r2, lsl #14
    276c:	01828911 	orreq	r8, r2, r1, lsl r9
    2770:	31011100 	mrscc	r1, (UNDEF: 17)
    2774:	12000013 	andne	r0, r0, #19
    2778:	01018289 	smlabbeq	r1, r9, r2, r8
    277c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2780:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2784:	03193f01 	tsteq	r9, #1, 30
    2788:	3b0b3a0e 	blcc	2d0fc8 <__ccfg+0x2b1020>
    278c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2790:	00130119 	andseq	r0, r3, r9, lsl r1
    2794:	00051400 	andeq	r1, r5, r0, lsl #8
    2798:	00001349 	andeq	r1, r0, r9, asr #6
    279c:	3f002e15 	svccc	0x00002e15
    27a0:	3a0e0319 	bcc	38340c <__ccfg+0x363464>
    27a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27a8:	00193c19 	andseq	r3, r9, r9, lsl ip
    27ac:	002e1600 	eoreq	r1, lr, r0, lsl #12
    27b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    27b4:	0b3b0b3a 	bleq	ec54a4 <__ccfg+0xea54fc>
    27b8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    27bc:	01000000 	mrseq	r0, (UNDEF: 0)
    27c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    27c4:	0e030b13 	vmoveq.32	d3[0], r0
    27c8:	17550e1b 	smmlane	r5, fp, lr, r0
    27cc:	17100111 			; <UNDEFINED> instruction: 0x17100111
    27d0:	24020000 	strcs	r0, [r2], #-0
    27d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    27d8:	000e030b 	andeq	r0, lr, fp, lsl #6
    27dc:	00160300 	andseq	r0, r6, r0, lsl #6
    27e0:	0b3a0e03 	bleq	e85ff4 <__ccfg+0xe6604c>
    27e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27e8:	24040000 	strcs	r0, [r4], #-0
    27ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    27f0:	0008030b 	andeq	r0, r8, fp, lsl #6
    27f4:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    27f8:	0b3a0e03 	bleq	e8600c <__ccfg+0xe66064>
    27fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2800:	0b201349 	bleq	80752c <__ccfg+0x7e7584>
    2804:	00001301 	andeq	r1, r0, r1, lsl #6
    2808:	03000506 	movweq	r0, #1286	; 0x506
    280c:	3b0b3a0e 	blcc	2d104c <__ccfg+0x2b10a4>
    2810:	0013490b 	andseq	r4, r3, fp, lsl #18
    2814:	00340700 	eorseq	r0, r4, r0, lsl #14
    2818:	0b3a0e03 	bleq	e8602c <__ccfg+0xe66084>
    281c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2820:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2824:	03193f01 	tsteq	r9, #1, 30
    2828:	3b0b3a0e 	blcc	2d1068 <__ccfg+0x2b10c0>
    282c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2830:	010b2013 	tsteq	fp, r3, lsl r0
    2834:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2838:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    283c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2840:	00001349 	andeq	r1, r0, r9, asr #6
    2844:	0300340a 	movweq	r3, #1034	; 0x40a
    2848:	3b0b3a0e 	blcc	2d1088 <__ccfg+0x2b10e0>
    284c:	00134905 	andseq	r4, r3, r5, lsl #18
    2850:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    2854:	0b3a0e03 	bleq	e86068 <__ccfg+0xe660c0>
    2858:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    285c:	00000b20 	andeq	r0, r0, r0, lsr #22
    2860:	3f012e0c 	svccc	0x00012e0c
    2864:	3a0e0319 	bcc	3834d0 <__ccfg+0x363528>
    2868:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    286c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2870:	97184006 	ldrls	r4, [r8, -r6]
    2874:	13011942 	movwne	r1, #6466	; 0x1942
    2878:	050d0000 	streq	r0, [sp, #-0]
    287c:	3a0e0300 	bcc	383484 <__ccfg+0x3634dc>
    2880:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2884:	00170213 	andseq	r0, r7, r3, lsl r2
    2888:	00340e00 	eorseq	r0, r4, r0, lsl #28
    288c:	0b3a0e03 	bleq	e860a0 <__ccfg+0xe660f8>
    2890:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2894:	00001802 	andeq	r1, r0, r2, lsl #16
    2898:	0300340f 	movweq	r3, #1039	; 0x40f
    289c:	3b0b3a0e 	blcc	2d10dc <__ccfg+0x2b1134>
    28a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28a4:	10000017 	andne	r0, r0, r7, lsl r0
    28a8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28ac:	17550152 			; <UNDEFINED> instruction: 0x17550152
    28b0:	0b590b58 	bleq	1645618 <__ccfg+0x1625670>
    28b4:	00001301 	andeq	r1, r0, r1, lsl #6
    28b8:	31000511 	tstcc	r0, r1, lsl r5
    28bc:	12000013 	andne	r0, r0, #19
    28c0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    28c4:	34130000 	ldrcc	r0, [r3], #-0
    28c8:	02133100 	andseq	r3, r3, #0, 2
    28cc:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    28d0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28d8:	0b590b58 	bleq	1645640 <__ccfg+0x1625698>
    28dc:	0b150000 	bleq	5428e4 <__ccfg+0x52293c>
    28e0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    28e4:	16000006 	strne	r0, [r0], -r6
    28e8:	13310034 	teqne	r1, #52	; 0x34
    28ec:	00001702 	andeq	r1, r0, r2, lsl #14
    28f0:	3f012e17 	svccc	0x00012e17
    28f4:	3a0e0319 	bcc	383560 <__ccfg+0x3635b8>
    28f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    28fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2900:	97184006 	ldrls	r4, [r8, -r6]
    2904:	13011942 	movwne	r1, #6466	; 0x1942
    2908:	1d180000 	ldcne	0, cr0, [r8, #-0]
    290c:	11133101 	tstne	r3, r1, lsl #2
    2910:	58061201 	stmdapl	r6, {r0, r9, ip}
    2914:	010b590b 	tsteq	fp, fp, lsl #18
    2918:	19000013 	stmdbne	r0, {r0, r1, r4}
    291c:	01018289 	smlabbeq	r1, r9, r2, r8
    2920:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2924:	8a1a0000 	bhi	68292c <__ccfg+0x662984>
    2928:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    292c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2930:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2934:	03193f01 	tsteq	r9, #1, 30
    2938:	3b0b3a0e 	blcc	2d1178 <__ccfg+0x2b11d0>
    293c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2940:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2944:	97184006 	ldrls	r4, [r8, -r6]
    2948:	13011942 	movwne	r1, #6466	; 0x1942
    294c:	051c0000 	ldreq	r0, [ip, #-0]
    2950:	3a0e0300 	bcc	383558 <__ccfg+0x3635b0>
    2954:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2958:	00170213 	andseq	r0, r7, r3, lsl r2
    295c:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2960:	0b3a0e03 	bleq	e86174 <__ccfg+0xe661cc>
    2964:	1349053b 	movtne	r0, #38203	; 0x953b
    2968:	00001702 	andeq	r1, r0, r2, lsl #14
    296c:	31012e1e 	tstcc	r1, lr, lsl lr
    2970:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2974:	97184006 	ldrls	r4, [r8, -r6]
    2978:	13011942 	movwne	r1, #6466	; 0x1942
    297c:	051f0000 	ldreq	r0, [pc, #-0]	; 2984 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    2980:	02133100 	andseq	r3, r3, #0, 2
    2984:	20000017 	andcs	r0, r0, r7, lsl r0
    2988:	13310034 	teqne	r1, #52	; 0x34
    298c:	1d210000 	stcne	0, cr0, [r1, #-0]
    2990:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2994:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2998:	0105590b 	tsteq	r5, fp, lsl #18
    299c:	22000013 	andcs	r0, r0, #19
    29a0:	01018289 	smlabbeq	r1, r9, r2, r8
    29a4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    29a8:	00001301 	andeq	r1, r0, r1, lsl #6
    29ac:	01828923 	orreq	r8, r2, r3, lsr #18
    29b0:	31011100 	mrscc	r1, (UNDEF: 17)
    29b4:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    29b8:	01018289 	smlabbeq	r1, r9, r2, r8
    29bc:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    29c0:	00130118 	andseq	r0, r3, r8, lsl r1
    29c4:	001d2500 	andseq	r2, sp, r0, lsl #10
    29c8:	01111331 	tsteq	r1, r1, lsr r3
    29cc:	0b580612 	bleq	160421c <__ccfg+0x15e4274>
    29d0:	00000559 	andeq	r0, r0, r9, asr r5
    29d4:	01828926 	orreq	r8, r2, r6, lsr #18
    29d8:	01011101 	tsteq	r1, r1, lsl #2
    29dc:	27000013 	smladcs	r0, r3, r0, r0
    29e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29e4:	0b3a0e03 	bleq	e861f8 <__ccfg+0xe66250>
    29e8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    29ec:	1301193c 	movwne	r1, #6460	; 0x193c
    29f0:	05280000 	streq	r0, [r8, #-0]!
    29f4:	00134900 	andseq	r4, r3, r0, lsl #18
    29f8:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    29fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a00:	0b3b0b3a 	bleq	ec56f0 <__ccfg+0xea5748>
    2a04:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2a08:	00001301 	andeq	r1, r0, r1, lsl #6
    2a0c:	3f012e2a 	svccc	0x00012e2a
    2a10:	3a0e0319 	bcc	38367c <__ccfg+0x3636d4>
    2a14:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a18:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2a1c:	00000019 	andeq	r0, r0, r9, lsl r0
    2a20:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2a24:	030b130e 	movweq	r1, #45838	; 0xb30e
    2a28:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2a2c:	10011117 	andne	r1, r1, r7, lsl r1
    2a30:	02000017 	andeq	r0, r0, #23
    2a34:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a38:	0b3b0b3a 	bleq	ec5728 <__ccfg+0xea5780>
    2a3c:	00001349 	andeq	r1, r0, r9, asr #6
    2a40:	0b002403 	bleq	ba54 <__exidx_end+0x8dd0>
    2a44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a48:	0400000e 	streq	r0, [r0], #-14
    2a4c:	0b0b0024 	bleq	2c2ae4 <__ccfg+0x2a2b3c>
    2a50:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2a54:	0f050000 	svceq	0x00050000
    2a58:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2a5c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2a60:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2a64:	15070000 	strne	r0, [r7, #-0]
    2a68:	01192701 	tsteq	r9, r1, lsl #14
    2a6c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2a70:	13490005 	movtne	r0, #36869	; 0x9005
    2a74:	15090000 	strne	r0, [r9, #-0]
    2a78:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2a7c:	00130113 	andseq	r0, r3, r3, lsl r1
    2a80:	00150a00 	andseq	r0, r5, r0, lsl #20
    2a84:	13491927 	movtne	r1, #39207	; 0x9927
    2a88:	130b0000 	movwne	r0, #45056	; 0xb000
    2a8c:	3a0b0b01 	bcc	2c5698 <__ccfg+0x2a56f0>
    2a90:	010b3b0b 	tsteq	fp, fp, lsl #22
    2a94:	0c000013 	stceq	0, cr0, [r0], {19}
    2a98:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2a9c:	0b3b0b3a 	bleq	ec578c <__ccfg+0xea57e4>
    2aa0:	0b381349 	bleq	e077cc <__ccfg+0xde7824>
    2aa4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    2aa8:	3a0e0301 	bcc	3836b4 <__ccfg+0x36370c>
    2aac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ab0:	010b2019 	tsteq	fp, r9, lsl r0
    2ab4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2ab8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2abc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ac0:	00001349 	andeq	r1, r0, r9, asr #6
    2ac4:	03002e0f 	movweq	r2, #3599	; 0xe0f
    2ac8:	3b0b3a0e 	blcc	2d1308 <__ccfg+0x2b1360>
    2acc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2ad0:	000b2013 	andeq	r2, fp, r3, lsl r0
    2ad4:	002e1000 	eoreq	r1, lr, r0
    2ad8:	0b3a0e03 	bleq	e862ec <__ccfg+0xe66344>
    2adc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ae0:	00000b20 	andeq	r0, r0, r0, lsr #22
    2ae4:	03012e11 	movweq	r2, #7697	; 0x1e11
    2ae8:	3b0b3a0e 	blcc	2d1328 <__ccfg+0x2b1380>
    2aec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2af0:	010b2013 	tsteq	fp, r3, lsl r0
    2af4:	12000013 	andne	r0, r0, #19
    2af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2afc:	0b3b0b3a 	bleq	ec57ec <__ccfg+0xea5844>
    2b00:	00001349 	andeq	r1, r0, r9, asr #6
    2b04:	03003413 	movweq	r3, #1043	; 0x413
    2b08:	3b0b3a0e 	blcc	2d1348 <__ccfg+0x2b13a0>
    2b0c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b10:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2b14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2b18:	0b3b0b3a 	bleq	ec5808 <__ccfg+0xea5860>
    2b1c:	01111927 	tsteq	r1, r7, lsr #18
    2b20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b24:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2b28:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2b2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b30:	0b3b0b3a 	bleq	ec5820 <__ccfg+0xea5878>
    2b34:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b38:	34160000 	ldrcc	r0, [r6], #-0
    2b3c:	3a0e0300 	bcc	383744 <__ccfg+0x36379c>
    2b40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b44:	00051c13 	andeq	r1, r5, r3, lsl ip
    2b48:	011d1700 	tsteq	sp, r0, lsl #14
    2b4c:	01521331 	cmpeq	r2, r1, lsr r3
    2b50:	0b581755 	bleq	16088ac <__ccfg+0x15e8904>
    2b54:	13010b59 	movwne	r0, #7001	; 0x1b59
    2b58:	05180000 	ldreq	r0, [r8, #-0]
    2b5c:	1c133100 	ldfnes	f3, [r3], {-0}
    2b60:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2b64:	1331001d 	teqne	r1, #29
    2b68:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b6c:	0b590b58 	bleq	16458d4 <__ccfg+0x162592c>
    2b70:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2b74:	11133101 	tstne	r3, r1, lsl #2
    2b78:	58061201 	stmdapl	r6, {r0, r9, ip}
    2b7c:	010b590b 	tsteq	fp, fp, lsl #18
    2b80:	1b000013 	blne	2bd4 <NOROM_OSCClockSourceGet+0x1ac>
    2b84:	00018289 	andeq	r8, r1, r9, lsl #5
    2b88:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2b8c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    2b90:	11010182 	smlabbne	r1, r2, r1, r0
    2b94:	00130101 	andseq	r0, r3, r1, lsl #2
    2b98:	828a1d00 	addhi	r1, sl, #0, 26
    2b9c:	18020001 	stmdane	r2, {r0}
    2ba0:	00184291 	mulseq	r8, r1, r2
    2ba4:	82891e00 	addhi	r1, r9, #0, 28
    2ba8:	01110101 	tsteq	r1, r1, lsl #2
    2bac:	13011331 	movwne	r1, #4913	; 0x1331
    2bb0:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    2bb4:	11010182 	smlabbne	r1, r2, r1, r0
    2bb8:	20000001 	andcs	r0, r0, r1
    2bbc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2bc0:	0b3a0e03 	bleq	e863d4 <__ccfg+0xe6642c>
    2bc4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2bc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2bcc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2bd0:	00130119 	andseq	r0, r3, r9, lsl r1
    2bd4:	00052100 	andeq	r2, r5, r0, lsl #2
    2bd8:	0b3a0e03 	bleq	e863ec <__ccfg+0xe66444>
    2bdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2be0:	00001702 	andeq	r1, r0, r2, lsl #14
    2be4:	03003422 	movweq	r3, #1058	; 0x422
    2be8:	3b0b3a0e 	blcc	2d1428 <__ccfg+0x2b1480>
    2bec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2bf0:	23000018 	movwcs	r0, #24
    2bf4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2bf8:	0b3b0b3a 	bleq	ec58e8 <__ccfg+0xea5940>
    2bfc:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c00:	34240000 	strtcc	r0, [r4], #-0
    2c04:	3a080300 	bcc	20380c <__ccfg+0x1e3864>
    2c08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c0c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    2c10:	0111010b 	tsteq	r1, fp, lsl #2
    2c14:	13010612 	movwne	r0, #5650	; 0x1612
    2c18:	34260000 	strtcc	r0, [r6], #-0
    2c1c:	3a0e0300 	bcc	383824 <__ccfg+0x36387c>
    2c20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c24:	00170213 	andseq	r0, r7, r3, lsl r2
    2c28:	011d2700 	tsteq	sp, r0, lsl #14
    2c2c:	01111331 	tsteq	r1, r1, lsr r3
    2c30:	0b580612 	bleq	1604480 <__ccfg+0x15e44d8>
    2c34:	13010559 	movwne	r0, #5465	; 0x1559
    2c38:	05280000 	streq	r0, [r8, #-0]!
    2c3c:	00133100 	andseq	r3, r3, r0, lsl #2
    2c40:	010b2900 	tsteq	fp, r0, lsl #18
    2c44:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c48:	342a0000 	strtcc	r0, [sl], #-0
    2c4c:	02133100 	andseq	r3, r3, #0, 2
    2c50:	2b000017 	blcs	2cb4 <__exidx_end+0x30>
    2c54:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2c58:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2c5c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2c60:	00001301 	andeq	r1, r0, r1, lsl #6
    2c64:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    2c68:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    2c6c:	13490026 	movtne	r0, #36902	; 0x9026
    2c70:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    2c74:	03193f00 	tsteq	r9, #0, 30
    2c78:	3b0b3a0e 	blcc	2d14b8 <__ccfg+0x2b1510>
    2c7c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2c80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c84:	97184006 	ldrls	r4, [r8, -r6]
    2c88:	00001942 	andeq	r1, r0, r2, asr #18
    2c8c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    2c90:	00130113 	andseq	r0, r3, r3, lsl r1
    2c94:	00213000 	eoreq	r3, r1, r0
    2c98:	0b2f1349 	bleq	bc79c4 <__ccfg+0xba7a1c>
    2c9c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    2ca0:	03193f01 	tsteq	r9, #1, 30
    2ca4:	3b0b3a0e 	blcc	2d14e4 <__ccfg+0x2b153c>
    2ca8:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2cac:	00130119 	andseq	r0, r3, r9, lsl r1
    2cb0:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    2cb4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2cbc:	13491927 	movtne	r1, #39207	; 0x9927
    2cc0:	1301193c 	movwne	r1, #6460	; 0x193c
    2cc4:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    2cc8:	03193f00 	tsteq	r9, #0, 30
    2ccc:	3b0b3a0e 	blcc	2d150c <__ccfg+0x2b1564>
    2cd0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2cd4:	00193c13 	andseq	r3, r9, r3, lsl ip
    2cd8:	11010000 	mrsne	r0, (UNDEF: 1)
    2cdc:	130e2501 	movwne	r2, #58625	; 0xe501
    2ce0:	1b0e030b 	blne	383914 <__ccfg+0x36396c>
    2ce4:	1117550e 	tstne	r7, lr, lsl #10
    2ce8:	00171001 	andseq	r1, r7, r1
    2cec:	00240200 	eoreq	r0, r4, r0, lsl #4
    2cf0:	0b3e0b0b 	bleq	f85924 <__ccfg+0xf6597c>
    2cf4:	00000e03 	andeq	r0, r0, r3, lsl #28
    2cf8:	03001603 	movweq	r1, #1539	; 0x603
    2cfc:	3b0b3a0e 	blcc	2d153c <__ccfg+0x2b1594>
    2d00:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d04:	00240400 	eoreq	r0, r4, r0, lsl #8
    2d08:	0b3e0b0b 	bleq	f8593c <__ccfg+0xf65994>
    2d0c:	00000803 	andeq	r0, r0, r3, lsl #16
    2d10:	0b010405 	bleq	43d2c <__ccfg+0x23d84>
    2d14:	3b0b3a0b 	blcc	2d1548 <__ccfg+0x2b15a0>
    2d18:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d1c:	00280600 	eoreq	r0, r8, r0, lsl #12
    2d20:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2d24:	04070000 	streq	r0, [r7], #-0
    2d28:	3a0b0b01 	bcc	2c5934 <__ccfg+0x2a598c>
    2d2c:	01053b0b 	tsteq	r5, fp, lsl #22
    2d30:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2d34:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2d38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d3c:	00001349 	andeq	r1, r0, r9, asr #6
    2d40:	03002e09 	movweq	r2, #3593	; 0xe09
    2d44:	3b0b3a0e 	blcc	2d1584 <__ccfg+0x2b15dc>
    2d48:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d4c:	000b2013 	andeq	r2, fp, r3, lsl r0
    2d50:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    2d54:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d5c:	13491927 	movtne	r1, #39207	; 0x9927
    2d60:	13010b20 	movwne	r0, #6944	; 0x1b20
    2d64:	340b0000 	strcc	r0, [fp], #-0
    2d68:	3a0e0300 	bcc	383970 <__ccfg+0x3639c8>
    2d6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d70:	0c000013 	stceq	0, cr0, [r0], {19}
    2d74:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2d78:	0b3a0e03 	bleq	e8658c <__ccfg+0xe665e4>
    2d7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2d80:	01111349 	tsteq	r1, r9, asr #6
    2d84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d88:	00194297 	mulseq	r9, r7, r2
    2d8c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2d90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d94:	0b3b0b3a 	bleq	ec5a84 <__ccfg+0xea5adc>
    2d98:	13491927 	movtne	r1, #39207	; 0x9927
    2d9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2da0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2da4:	00130119 	andseq	r0, r3, r9, lsl r1
    2da8:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2dac:	0b3a0e03 	bleq	e865c0 <__ccfg+0xe66618>
    2db0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2db4:	00001702 	andeq	r1, r0, r2, lsl #14
    2db8:	31012e0f 	tstcc	r1, pc, lsl #28
    2dbc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2dc0:	97184006 	ldrls	r4, [r8, -r6]
    2dc4:	13011942 	movwne	r1, #6466	; 0x1942
    2dc8:	34100000 	ldrcc	r0, [r0], #-0
    2dcc:	02133100 	andseq	r3, r3, #0, 2
    2dd0:	11000017 	tstne	r0, r7, lsl r0
    2dd4:	0111010b 	tsteq	r1, fp, lsl #2
    2dd8:	00000612 	andeq	r0, r0, r2, lsl r6
    2ddc:	31003412 	tstcc	r0, r2, lsl r4
    2de0:	13000013 	movwne	r0, #19
    2de4:	1331001d 	teqne	r1, #29
    2de8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dec:	0b590b58 	bleq	1645b54 <__ccfg+0x1625bac>
    2df0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2df4:	03193f01 	tsteq	r9, #1, 30
    2df8:	3b0b3a0e 	blcc	2d1638 <__ccfg+0x2b1690>
    2dfc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2e00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e04:	97184006 	ldrls	r4, [r8, -r6]
    2e08:	13011942 	movwne	r1, #6466	; 0x1942
    2e0c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    2e10:	11000182 	smlabbne	r0, r2, r1, r0
    2e14:	00133101 	andseq	r3, r3, r1, lsl #2
    2e18:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    2e1c:	0b3a0e03 	bleq	e86630 <__ccfg+0xe66688>
    2e20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e24:	0b201349 	bleq	807b50 <__ccfg+0x7e7ba8>
    2e28:	00001301 	andeq	r1, r0, r1, lsl #6
    2e2c:	03003417 	movweq	r3, #1047	; 0x417
    2e30:	3b0b3a0e 	blcc	2d1670 <__ccfg+0x2b16c8>
    2e34:	00134905 	andseq	r4, r3, r5, lsl #18
    2e38:	00341800 	eorseq	r1, r4, r0, lsl #16
    2e3c:	0b3a0e03 	bleq	e86650 <__ccfg+0xe666a8>
    2e40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e44:	00001802 	andeq	r1, r0, r2, lsl #16
    2e48:	31001d19 	tstcc	r0, r9, lsl sp
    2e4c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2e50:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2e54:	1a00000b 	bne	2e88 <__exidx_end+0x204>
    2e58:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2e5c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2e60:	0b590b58 	bleq	1645bc8 <__ccfg+0x1625c20>
    2e64:	00001301 	andeq	r1, r0, r1, lsl #6
    2e68:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    2e6c:	1c000017 	stcne	0, cr0, [r0], {23}
    2e70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2e74:	0b3a0e03 	bleq	e86688 <__ccfg+0xe666e0>
    2e78:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2e84:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    2e88:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2e8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e90:	0b590b58 	bleq	1645bf8 <__ccfg+0x1625c50>
    2e94:	00001301 	andeq	r1, r0, r1, lsl #6
    2e98:	31011d1e 	tstcc	r1, lr, lsl sp
    2e9c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2ea0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2ea4:	0000000b 	andeq	r0, r0, fp
    2ea8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2eac:	030b130e 	movweq	r1, #45838	; 0xb30e
    2eb0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2eb4:	10011117 	andne	r1, r1, r7, lsl r1
    2eb8:	02000017 	andeq	r0, r0, #23
    2ebc:	0b0b0024 	bleq	2c2f54 <__ccfg+0x2a2fac>
    2ec0:	0e030b3e 	vmoveq.16	d3[0], r0
    2ec4:	16030000 	strne	r0, [r3], -r0
    2ec8:	3a0e0300 	bcc	383ad0 <__ccfg+0x363b28>
    2ecc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ed0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2ed4:	0b0b0024 	bleq	2c2f6c <__ccfg+0x2a2fc4>
    2ed8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2edc:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2ee0:	3a0e0301 	bcc	383aec <__ccfg+0x363b44>
    2ee4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2ee8:	010b2019 	tsteq	fp, r9, lsl r0
    2eec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2ef0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2ef4:	0b3b0b3a 	bleq	ec5be4 <__ccfg+0xea5c3c>
    2ef8:	00001349 	andeq	r1, r0, r9, asr #6
    2efc:	03003407 	movweq	r3, #1031	; 0x407
    2f00:	3b0b3a0e 	blcc	2d1740 <__ccfg+0x2b1798>
    2f04:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f08:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2f0c:	0b3a0e03 	bleq	e86720 <__ccfg+0xe66778>
    2f10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f14:	0b201349 	bleq	807c40 <__ccfg+0x7e7c98>
    2f18:	00001301 	andeq	r1, r0, r1, lsl #6
    2f1c:	31012e09 	tstcc	r1, r9, lsl #28
    2f20:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2f24:	97184006 	ldrls	r4, [r8, -r6]
    2f28:	13011942 	movwne	r1, #6466	; 0x1942
    2f2c:	050a0000 	streq	r0, [sl, #-0]
    2f30:	02133100 	andseq	r3, r3, #0, 2
    2f34:	0b000017 	bleq	2f98 <__exidx_end+0x314>
    2f38:	13310034 	teqne	r1, #52	; 0x34
    2f3c:	00001702 	andeq	r1, r0, r2, lsl #14
    2f40:	3100050c 	tstcc	r0, ip, lsl #10
    2f44:	000b1c13 	andeq	r1, fp, r3, lsl ip
    2f48:	82890d00 	addhi	r0, r9, #0, 26
    2f4c:	01110001 	tsteq	r1, r1
    2f50:	00001331 	andeq	r1, r0, r1, lsr r3
    2f54:	0182890e 	orreq	r8, r2, lr, lsl #18
    2f58:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2f5c:	13311942 	teqne	r1, #1081344	; 0x108000
    2f60:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2f64:	03193f01 	tsteq	r9, #1, 30
    2f68:	3b0b3a0e 	blcc	2d17a8 <__ccfg+0x2b1800>
    2f6c:	11192705 	tstne	r9, r5, lsl #14
    2f70:	40061201 	andmi	r1, r6, r1, lsl #4
    2f74:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2f78:	00001301 	andeq	r1, r0, r1, lsl #6
    2f7c:	03000510 	movweq	r0, #1296	; 0x510
    2f80:	3b0b3a0e 	blcc	2d17c0 <__ccfg+0x2b1818>
    2f84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f88:	11000017 	tstne	r0, r7, lsl r0
    2f8c:	01018289 	smlabbeq	r1, r9, r2, r8
    2f90:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    2f94:	00133119 	andseq	r3, r3, r9, lsl r1
    2f98:	828a1200 	addhi	r1, sl, #0, 4
    2f9c:	18020001 	stmdane	r2, {r0}
    2fa0:	00184291 	mulseq	r8, r1, r2
    2fa4:	00341300 	eorseq	r1, r4, r0, lsl #6
    2fa8:	0b3a0e03 	bleq	e867bc <__ccfg+0xe66814>
    2fac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2fb0:	00001702 	andeq	r1, r0, r2, lsl #14
    2fb4:	3f012e14 	svccc	0x00012e14
    2fb8:	3a0e0319 	bcc	383c24 <__ccfg+0x363c7c>
    2fbc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2fc0:	11134919 	tstne	r3, r9, lsl r9
    2fc4:	40061201 	andmi	r1, r6, r1, lsl #4
    2fc8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2fcc:	00001301 	andeq	r1, r0, r1, lsl #6
    2fd0:	31011d15 	tstcc	r1, r5, lsl sp
    2fd4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2fd8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2fdc:	1600000b 	strne	r0, [r0], -fp
    2fe0:	0111010b 	tsteq	r1, fp, lsl #2
    2fe4:	00000612 	andeq	r0, r0, r2, lsl r6
    2fe8:	3f002e17 	svccc	0x00002e17
    2fec:	3a0e0319 	bcc	383c58 <__ccfg+0x363cb0>
    2ff0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2ff4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2ff8:	00000019 	andeq	r0, r0, r9, lsl r0
    2ffc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3000:	030b130e 	movweq	r1, #45838	; 0xb30e
    3004:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3008:	10011117 	andne	r1, r1, r7, lsl r1
    300c:	02000017 	andeq	r0, r0, #23
    3010:	0b0b0024 	bleq	2c30a8 <__ccfg+0x2a3100>
    3014:	0e030b3e 	vmoveq.16	d3[0], r0
    3018:	16030000 	strne	r0, [r3], -r0
    301c:	3a0e0300 	bcc	383c24 <__ccfg+0x363c7c>
    3020:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3024:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3028:	0b0b0024 	bleq	2c30c0 <__ccfg+0x2a3118>
    302c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3030:	0f050000 	svceq	0x00050000
    3034:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3038:	06000013 			; <UNDEFINED> instruction: 0x06000013
    303c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3040:	15070000 	strne	r0, [r7, #-0]
    3044:	01192701 	tsteq	r9, r1, lsl #14
    3048:	08000013 	stmdaeq	r0, {r0, r1, r4}
    304c:	13490005 	movtne	r0, #36869	; 0x9005
    3050:	15090000 	strne	r0, [r9, #-0]
    3054:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3058:	00130113 	andseq	r0, r3, r3, lsl r1
    305c:	00150a00 	andseq	r0, r5, r0, lsl #20
    3060:	13491927 	movtne	r1, #39207	; 0x9927
    3064:	130b0000 	movwne	r0, #45056	; 0xb000
    3068:	3a0b0b01 	bcc	2c5c74 <__ccfg+0x2a5ccc>
    306c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3070:	0c000013 	stceq	0, cr0, [r0], {19}
    3074:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3078:	0b3b0b3a 	bleq	ec5d68 <__ccfg+0xea5dc0>
    307c:	0b381349 	bleq	e07da8 <__ccfg+0xde7e00>
    3080:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3084:	03193f01 	tsteq	r9, #1, 30
    3088:	3b0b3a0e 	blcc	2d18c8 <__ccfg+0x2b1920>
    308c:	2019270b 	andscs	r2, r9, fp, lsl #14
    3090:	0013010b 	andseq	r0, r3, fp, lsl #2
    3094:	00050e00 	andeq	r0, r5, r0, lsl #28
    3098:	0b3a0e03 	bleq	e868ac <__ccfg+0xe66904>
    309c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30a0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    30a4:	03193f01 	tsteq	r9, #1, 30
    30a8:	3b0b3a0e 	blcc	2d18e8 <__ccfg+0x2b1940>
    30ac:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    30b0:	010b2013 	tsteq	fp, r3, lsl r0
    30b4:	10000013 	andne	r0, r0, r3, lsl r0
    30b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30bc:	0b3b0b3a 	bleq	ec5dac <__ccfg+0xea5e04>
    30c0:	00001349 	andeq	r1, r0, r9, asr #6
    30c4:	31012e11 	tstcc	r1, r1, lsl lr
    30c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    30cc:	97184006 	ldrls	r4, [r8, -r6]
    30d0:	13011942 	movwne	r1, #6466	; 0x1942
    30d4:	05120000 	ldreq	r0, [r2, #-0]
    30d8:	02133100 	andseq	r3, r3, #0, 2
    30dc:	13000017 	movwne	r0, #23
    30e0:	0111010b 	tsteq	r1, fp, lsl #2
    30e4:	13010612 	movwne	r0, #5650	; 0x1612
    30e8:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    30ec:	11010182 	smlabbne	r1, r2, r1, r0
    30f0:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    30f4:	8a150000 	bhi	5430fc <__ccfg+0x523154>
    30f8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    30fc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3100:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3104:	11010182 	smlabbne	r1, r2, r1, r0
    3108:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    310c:	00001301 	andeq	r1, r0, r1, lsl #6
    3110:	31003417 	tstcc	r0, r7, lsl r4
    3114:	00180213 	andseq	r0, r8, r3, lsl r2
    3118:	010b1800 	tsteq	fp, r0, lsl #16
    311c:	13011755 	movwne	r1, #5973	; 0x1755
    3120:	05190000 	ldreq	r0, [r9, #-0]
    3124:	1c133100 	ldfnes	f3, [r3], {-0}
    3128:	1a00000b 	bne	315c <__exidx_end+0x4d8>
    312c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3130:	341b0000 	ldrcc	r0, [fp], #-0
    3134:	00133100 	andseq	r3, r3, r0, lsl #2
    3138:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    313c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3140:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3144:	13491927 	movtne	r1, #39207	; 0x9927
    3148:	06120111 			; <UNDEFINED> instruction: 0x06120111
    314c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3150:	00130119 	andseq	r0, r3, r9, lsl r1
    3154:	00051d00 	andeq	r1, r5, r0, lsl #26
    3158:	0b3a0e03 	bleq	e8696c <__ccfg+0xe669c4>
    315c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3160:	00001702 	andeq	r1, r0, r2, lsl #14
    3164:	0300341e 	movweq	r3, #1054	; 0x41e
    3168:	3b0b3a0e 	blcc	2d19a8 <__ccfg+0x2b1a00>
    316c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3170:	1f000017 	svcne	0x00000017
    3174:	00018289 	andeq	r8, r1, r9, lsl #5
    3178:	13310111 	teqne	r1, #1073741828	; 0x40000004
    317c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    3180:	03193f01 	tsteq	r9, #1, 30
    3184:	3b0b3a0e 	blcc	2d19c4 <__ccfg+0x2b1a1c>
    3188:	11192705 	tstne	r9, r5, lsl #14
    318c:	40061201 	andmi	r1, r6, r1, lsl #4
    3190:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3194:	00001301 	andeq	r1, r0, r1, lsl #6
    3198:	01828921 	orreq	r8, r2, r1, lsr #18
    319c:	31011101 	tstcc	r1, r1, lsl #2
    31a0:	00130113 	andseq	r0, r3, r3, lsl r1
    31a4:	002e2200 	eoreq	r2, lr, r0, lsl #4
    31a8:	0b3a0e03 	bleq	e869bc <__ccfg+0xe66a14>
    31ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31b0:	0b201349 	bleq	807edc <__ccfg+0x7e7f34>
    31b4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    31b8:	3a0e0300 	bcc	383dc0 <__ccfg+0x363e18>
    31bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    31c0:	000b2019 	andeq	r2, fp, r9, lsl r0
    31c4:	00342400 	eorseq	r2, r4, r0, lsl #8
    31c8:	0b3a0e03 	bleq	e869dc <__ccfg+0xe66a34>
    31cc:	1349053b 	movtne	r0, #38203	; 0x953b
    31d0:	00001702 	andeq	r1, r0, r2, lsl #14
    31d4:	31011d25 	tstcc	r1, r5, lsr #26
    31d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    31dc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    31e0:	00130105 	andseq	r0, r3, r5, lsl #2
    31e4:	00052600 	andeq	r2, r5, r0, lsl #12
    31e8:	0b3a0e03 	bleq	e869fc <__ccfg+0xe66a54>
    31ec:	1349053b 	movtne	r0, #38203	; 0x953b
    31f0:	00001702 	andeq	r1, r0, r2, lsl #14
    31f4:	03003427 	movweq	r3, #1063	; 0x427
    31f8:	3b0b3a0e 	blcc	2d1a38 <__ccfg+0x2b1a90>
    31fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3200:	28000018 	stmdacs	r0, {r3, r4}
    3204:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    320c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3210:	34290000 	strtcc	r0, [r9], #-0
    3214:	3a0e0300 	bcc	383e1c <__ccfg+0x363e74>
    3218:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    321c:	00180213 	andseq	r0, r8, r3, lsl r2
    3220:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    3224:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3228:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    322c:	13491927 	movtne	r1, #39207	; 0x9927
    3230:	0000193c 	andeq	r1, r0, ip, lsr r9
    3234:	3f002e2b 	svccc	0x00002e2b
    3238:	3a0e0319 	bcc	383ea4 <__ccfg+0x363efc>
    323c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3240:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3244:	2c000019 	stccs	0, cr0, [r0], {25}
    3248:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    324c:	0b3a0e03 	bleq	e86a60 <__ccfg+0xe66ab8>
    3250:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3254:	0000193c 	andeq	r1, r0, ip, lsr r9
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000170 	andeq	r0, r0, r0, ror r1
       4:	00000189 	andeq	r0, r0, r9, lsl #3
       8:	6a500001 	bvs	1400014 <__ccfg+0x13e006c>
       c:	6d000002 	stcvs	0, cr0, [r0, #-8]
      10:	01000002 	tsteq	r0, r2
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	01100000 	tsteq	r0, r0
      20:	011e0000 	tsteq	lr, r0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	00011e00 	andeq	r1, r1, r0, lsl #28
      34:	00017000 	andeq	r7, r1, r0
      38:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				j->Next = k;
      44:	0000011e 	andeq	r0, r0, lr, lsl r1
      48:	00000130 	andeq	r0, r0, r0, lsr r1
}
      4c:	36530001 	ldrbcc	r0, [r3], -r1
      50:	3c000001 	stccc	0, cr0, [r0], {1}
      54:	01000001 	tsteq	r0, r1
		release;
      58:	01585300 	cmpeq	r8, r0, lsl #6
      5c:	015e0000 	cmpeq	lr, r0
      60:	00010000 	andeq	r0, r1, r0
      64:	00016853 	andeq	r6, r1, r3, asr r8
      68:	00017000 	andeq	r7, r1, r0
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      78:	0000011e 	andeq	r0, r0, lr, lsl r1
      7c:	00000132 	andeq	r0, r0, r2, lsr r1
      80:	36510001 	ldrbcc	r0, [r1], -r1
      84:	66000001 	strvs	r0, [r0], -r1
      88:	01000001 	tsteq	r0, r1
      8c:	01685100 	cmneq	r8, r0, lsl #2
	descriptors [fd] = s;
      90:	01700000 	cmneq	r0, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	00000051 	andeq	r0, r0, r1, asr r0
	...
		syserror (EMALLOC, "tcv05");
      a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      b4:	00500001 	subseq	r0, r0, r1
      b8:	00000000 	andeq	r0, r0, r0
      bc:	01000000 	mrseq	r0, (UNDEF: 0)
      c0:	00005000 	andeq	r5, r0, r0
      c4:	00000000 	andeq	r0, r0, r0
      c8:	00010000 	andeq	r0, r1, r0
      cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
      dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      e8:	0071000f 	rsbseq	r0, r1, pc
      ec:	00008403 	andeq	r8, r0, r3, lsl #8
      f0:	031e0620 	tsteq	lr, #32, 12	; 0x2000000
			wwait (st, 50);
      f4:	20000074 	andcs	r0, r0, r4, ror r0
			curr += 0x1000;
      f8:	00000022 	andeq	r0, r0, r2, lsr #32
      fc:	00000000 	andeq	r0, r0, r0
		if (from >= EE_SIZE || upto < from)
     100:	03000e00 	movweq	r0, #3584	; 0xe00
     104:	20000084 	andcs	r0, r0, r4, lsl #1
			upto = EE_SIZE - 1;
     108:	031e3c06 	tsteq	lr, #1536	; 0x600
     10c:	20000074 	andcs	r0, r0, r4, ror r0
     110:	00000022 	andeq	r0, r0, r2, lsr #32
	...
     120:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     134:	00500001 	subseq	r0, r0, r1
     138:	00000000 	andeq	r0, r0, r0
     13c:	20000000 	andcs	r0, r0, r0
    cycles[0].onTime = numbers[0];
     140:	26000009 	strcs	r0, [r0], -r9
    cycles[0].offTime = numbers[1];
     144:	01000009 	tsteq	r0, r9
    cycles[1].onTime = numbers[2];
     148:	09565600 	ldmdbeq	r6, {r9, sl, ip, lr}^
     14c:	095a0000 	ldmdbeq	sl, {}^	; <UNPREDICTABLE>
    cycles[1].offTime = numbers[3];
     150:	00010000 	andeq	r0, r1, r0
}
     154:	00000056 	andeq	r0, r0, r6, asr r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	00000000 	andeq	r0, r0, r0
     15c:	00080a00 	andeq	r0, r8, r0, lsl #20
            number += settingsInput[i] - 48;
     160:	00080e00 	andeq	r0, r8, r0, lsl #28
            numberMultiplier = numberMultiplier * 10;
     164:	52000100 	andpl	r0, r0, #0, 2
     168:	00000824 	andeq	r0, r0, r4, lsr #16
     16c:	00000838 	andeq	r0, r0, r8, lsr r8
fsm root {
     170:	00520001 	subseq	r0, r2, r1
     174:	00000000 	andeq	r0, r0, r0
     178:	12000000 	andne	r0, r0, #0
     17c:	18000008 	stmdane	r0, {r3}
     180:	01000008 	tsteq	r0, r8
     184:	00005300 	andeq	r5, r0, r0, lsl #6
        initCycles();
     188:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter your name: ");
     18c:	07c80000 	strbeq	r0, [r8, r0]
     190:	07d20000 	ldrbeq	r0, [r2, r0]
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	00010000 	andeq	r0, r1, r0
     198:	00000053 	andeq	r0, r0, r3, asr r0
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	0007c800 	andeq	ip, r7, r0, lsl #16
     1a4:	0007ce00 	andeq	ip, r7, r0, lsl #28
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	53000100 	movwpl	r0, #256	; 0x100
	...
        if (choice == 'A' || choice == 'a'){
     1b4:	0000085e 	andeq	r0, r0, lr, asr r8
     1b8:	00000868 	andeq	r0, r0, r8, ror #16
            proceed Adjust_Intervals;
     1bc:	00530001 	subseq	r0, r3, r1
            proceed Monitor;
     1c0:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
     1c4:	50000000 	andpl	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	7a000008 	bvc	1f0 <root+0x80>
     1cc:	01000008 	tsteq	r0, r8
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	00005200 	andeq	r5, r0, r0, lsl #4
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
        processSettingsInput(settings);
     1dc:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
        proceed Show_Menu;
     1e0:	00010000 	andeq	r0, r1, r0
     1e4:	00000053 	andeq	r0, r0, r3, asr r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	00000000 	andeq	r0, r0, r0
     1ec:	00089000 	andeq	r9, r8, r0
     1f0:	0008c600 	andeq	ip, r8, r0, lsl #12
     1f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        proceed Show_Menu;
     200:	00000736 	andeq	r0, r0, r6, lsr r7
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	00000740 	andeq	r0, r0, r0, asr #14
     208:	00530001 	subseq	r0, r3, r1
        displayCycle = YES;
     20c:	00000000 	andeq	r0, r0, r0
        ser_inf(Await_Stop, "%c", ch);
     210:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     214:	52000007 	andpl	r0, r0, #7
     218:	01000007 	tsteq	r0, r7
        proceed Monitor;
     21c:	00005200 	andeq	r5, r0, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     220:	00000000 	andeq	r0, r0, r0
     224:	07880000 	streq	r0, [r8, r0]
        leds(1, 0);
     228:	07920000 	ldreq	r0, [r2, r0]
     22c:	00010000 	andeq	r0, r1, r0
     230:	00000053 	andeq	r0, r0, r3, asr r0
     234:	00000000 	andeq	r0, r0, r0
     238:	00077a00 	andeq	r7, r7, r0, lsl #20
        leds(0, 0);
     23c:	0007a200 	andeq	sl, r7, r0, lsl #4
     240:	52000100 	andpl	r0, r0, #0, 2
	...
     24c:	0000029c 	muleq	r0, ip, r2
     250:	000002a0 	andeq	r0, r0, r0, lsr #5
        } else if (choice == 'S' || choice == 's') {
     254:	a0500001 	subsge	r0, r0, r1
            proceed Stop;
     258:	a3000002 	movwge	r0, #2
        } else if (choice == 'V' || choice == 'v') {
     25c:	01000002 	tsteq	r0, r2
            proceed View_Settings;
     260:	00005100 	andeq	r5, r0, r0, lsl #2
        } else if (choice == 'M' || choice == 'm') {
     264:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
     268:	05e80000 	strbeq	r0, [r8, #0]!
     26c:	05ea0000 	strbeq	r0, [sl, #0]!
     270:	00010000 	andeq	r0, r1, r0
     274:	00000050 	andeq	r0, r0, r0, asr r0
     278:	00000000 	andeq	r0, r0, r0
     27c:	0005e800 	andeq	lr, r5, r0, lsl #16
     280:	0005fe00 	andeq	pc, r5, r0, lsl #28
     284:	51000100 	mrspl	r0, (UNDEF: 16)
     288:	000005fe 	strdeq	r0, [r0], -lr
     28c:	00000602 	andeq	r0, r0, r2, lsl #12
     290:	08550001 	ldmdaeq	r5, {r0}^
     294:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     298:	01000006 	tsteq	r0, r6
static void devinit_uart (int devnum) {
     29c:	061e5500 	ldreq	r5, [lr], -r0, lsl #10
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	062c0000 	strteq	r0, [ip], -r0
     2a4:	00010000 	andeq	r0, r1, r0
void udelay (volatile word n) {
     2a8:	00062c51 	andeq	r2, r6, r1, asr ip
     2ac:	00065a00 	andeq	r5, r6, r0, lsl #20
	while (n) {
     2b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     2b4:	00000660 	andeq	r0, r0, r0, ror #12
}
     2b8:	00000688 	andeq	r0, r0, r8, lsl #13
	while (n--);
     2bc:	88550001 	ldmdahi	r5, {r0}^
     2c0:	96000006 	strls	r0, [r0], -r6
     2c4:	01000006 	tsteq	r0, r6
		n--;
     2c8:	06965100 	ldreq	r5, [r6], r0, lsl #2
     2cc:	06a00000 	strteq	r0, [r0], r0
     2d0:	00010000 	andeq	r0, r1, r0
void mdelay (volatile word n) {
     2d4:	0006a055 	andeq	sl, r6, r5, asr r0
     2d8:	0006ab00 	andeq	sl, r6, r0, lsl #22
	while (n) {
     2dc:	51000100 	mrspl	r0, (UNDEF: 16)
     2e0:	000006ab 	andeq	r0, r0, fp, lsr #13
}
     2e4:	000006ae 	andeq	r0, r0, lr, lsr #13
		udelay (999);
     2e8:	ae550001 	cdpge	0, 5, cr0, cr5, cr1, {0}
     2ec:	b4000006 	strlt	r0, [r0], #-6
		n--;
     2f0:	01000006 	tsteq	r0, r6
     2f4:	06b45100 	ldrteq	r5, [r4], r0, lsl #2
     2f8:	06c60000 	strbeq	r0, [r6], r0
     2fc:	00010000 	andeq	r0, r1, r0
void __pi_ondomain (lword d) {
     300:	0006c655 	andeq	ip, r6, r5, asr r6
     304:	0006d800 	andeq	sp, r6, r0, lsl #16
		if (__pi_systat.effpdm > 1)
     308:	51000100 	mrspl	r0, (UNDEF: 16)
     30c:	000006d8 	ldrdeq	r0, [r0], -r8
			__pi_systat.effpdm = 1;
     310:	000006f8 	strdeq	r0, [r0], -r8
	PRCMPowerDomainOn (d);
     314:	00550001 	subseq	r0, r5, r1
     318:	00000000 	andeq	r0, r0, r0
     31c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	fe000005 	cdp2	0, 0, cr0, cr0, cr5, {0}
     324:	01000005 	tsteq	r0, r5
     328:	05fe5200 	ldrbeq	r5, [lr, #512]!	; 0x200
	__pi_systat.ondmns |= d;
     32c:	06040000 	streq	r0, [r4], -r0
     330:	00010000 	andeq	r0, r1, r0
}
     334:	00060856 	andeq	r0, r6, r6, asr r8
     338:	00061800 	andeq	r1, r6, r0, lsl #16
void __pi_syserror (word ec, const char *m) {
     33c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	diag ("SYSERR: %x, %s", ec, m);
     340:	0000061e 	andeq	r0, r0, lr, lsl r6
     344:	0000062c 	andeq	r0, r0, ip, lsr #12
  __ASM volatile ("cpsid i" : : : "memory");
     348:	2c520001 	mrrccs	0, 0, r0, r2, cr1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	5c000006 	stcpl	0, cr0, [r0], {6}
     350:	01000006 	tsteq	r0, r6
     354:	06605600 	strbteq	r5, [r0], -r0, lsl #12
		all_leds_blink;
     358:	06880000 	streq	r0, [r8], r0
     35c:	00010000 	andeq	r0, r1, r0
     360:	00068856 	andeq	r8, r6, r6, asr r8
     364:	00069600 	andeq	r9, r6, r0, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	52000100 	andpl	r0, r0, #0, 2
     36c:	00000696 	muleq	r0, r6, r6
     370:	000006a0 	andeq	r0, r0, r0, lsr #13
     374:	a0560001 	subsge	r0, r6, r1
     378:	ab000006 	blge	398 <tci_run_delay_timer+0x8>
     37c:	01000006 	tsteq	r0, r6
	while (1) {
     380:	06ae5200 	strteq	r5, [lr], r0, lsl #4
     384:	06b90000 	ldrteq	r0, [r9], r0
     388:	00010000 	andeq	r0, r1, r0
     38c:	0006b952 	andeq	fp, r6, r2, asr r9
void tci_run_delay_timer () {
     390:	0006c600 	andeq	ip, r6, r0, lsl #12
	setdel = __pi_mintk - __pi_old;
     394:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     398:	000006c6 	andeq	r0, r0, r6, asr #13
     39c:	000006f8 	strdeq	r0, [r0], -r8
     3a0:	00520001 	subseq	r0, r2, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	5c000000 	stcpl	0, cr0, [r0], {-0}
     3ac:	6a000005 	bvs	3c8 <tci_run_delay_timer+0x38>
     3b0:	01000005 	tsteq	r0, r5
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	00005000 	andeq	r5, r0, r0
	sti_tim;
     3b8:	00000000 	andeq	r0, r0, r0
}
     3bc:	055c0000 	ldrbeq	r0, [ip, #-0]
     3c0:	056b0000 	strbeq	r0, [fp, #-0]!
     3c4:	00010000 	andeq	r0, r1, r0
     3c8:	00000051 	andeq	r0, r0, r1, asr r0
     3cc:	00000000 	andeq	r0, r0, r0
	cli_aux;
     3d0:	00050c00 	andeq	r0, r5, r0, lsl #24
     3d4:	00052300 	andeq	r2, r5, r0, lsl #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	50000100 	andpl	r0, r0, r0, lsl #2
     3dc:	00000546 	andeq	r0, r0, r6, asr #10
     3e0:	0000055c 	andeq	r0, r0, ip, asr r5
     3e4:	00500001 	subseq	r0, r0, r1
	sti_aux;
     3e8:	00000000 	andeq	r0, r0, r0
}
     3ec:	02000000 	andeq	r0, r0, #0
     3f0:	12000004 	andne	r0, r0, #4
     3f4:	01000004 	tsteq	r0, r4
void AONRTCIntHandler () {
     3f8:	04125200 	ldreq	r5, [r2], #-512	; 0xfffffe00
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fc:	041a0000 	ldreq	r0, [sl], #-0
     400:	00050000 	andeq	r0, r5, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
		if (__pi_utims [0] == 0)
     408:	0004b440 	andeq	fp, r4, r0, asr #8
     40c:	0004b800 	andeq	fp, r4, r0, lsl #16
		if (*(__pi_utims [0])) {
     410:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     414:	40092004 	andmi	r2, r9, r4
			(*(__pi_utims [0]))--;
     418:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
		if (__pi_utims [1] == 0)
     41c:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
		if (*(__pi_utims [1])) {
     420:	ba520001 	blt	148042c <__ccfg+0x1460484>
			aux_timer_inactive = 0;
     424:	bc000004 	stclt	0, cr0, [r0], {4}
			(*(__pi_utims [1]))--;
     428:	05000004 	streq	r0, [r0, #-4]
		if (__pi_utims [2] == 0)
     42c:	20040c00 	andcs	r0, r4, r0, lsl #24
		if (*(__pi_utims [2])) {
     430:	00004009 	andeq	r4, r0, r9
			(*(__pi_utims [2]))--;
     434:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [3] != 0) {
     438:	041c0000 	ldreq	r0, [ip], #-0
			if (*(__pi_utims [3])) {
     43c:	04260000 	strteq	r0, [r6], #-0
				aux_timer_inactive = 0;
     440:	00010000 	andeq	r0, r1, r0
				(*(__pi_utims [3]))--;
     444:	00042a52 	andeq	r2, r4, r2, asr sl
	if (__pi_systat.ledsts) {
     448:	00043400 	andeq	r3, r4, r0, lsl #8
     44c:	52000100 	andpl	r0, r0, #0, 2
		if (__pi_systat.ledblc++ == 0) {
     450:	00000438 	andeq	r0, r0, r8, lsr r4
     454:	00000442 	andeq	r0, r0, r2, asr #8
			if (__pi_systat.ledblk) {
     458:	46520001 	ldrbmi	r0, [r2], -r1
     45c:	52000004 	andpl	r0, r0, #4
     460:	01000004 	tsteq	r0, r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	04de5200 	ldrbeq	r5, [lr], #512	; 0x200
     468:	04e20000 	strbteq	r0, [r2], #0
				if (__pi_systat.ledsts & 0x2)
     46c:	00010000 	andeq	r0, r1, r0
     470:	00000052 	andeq	r0, r0, r2, asr r0
     474:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
     478:	0003a200 	andeq	sl, r3, r0, lsl #4
				__pi_systat.ledblk = 0;
     47c:	0003b400 	andeq	fp, r3, r0, lsl #8
     480:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				__pi_systat.ledblc = 200;
     48c:	0000033c 	andeq	r0, r0, ip, lsr r3
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	00000344 	andeq	r0, r0, r4, asr #6
		cli_tim;
     494:	00500001 	subseq	r0, r0, r1
		__pi_new += setdel;
     498:	00000000 	andeq	r0, r0, r0
     49c:	3c000000 	stccc	0, cr0, [r0], {-0}
		setdel = 0;
     4a0:	42000003 	andmi	r0, r0, #3
		RISE_N_SHINE;
     4a4:	01000003 	tsteq	r0, r3
		__pi_new += setdel;
     4a8:	03425100 	movteq	r5, #8448	; 0x2100
		RISE_N_SHINE;
     4ac:	03470000 	movteq	r0, #28672	; 0x7000
     4b0:	00010000 	andeq	r0, r1, r0
		aux_timer_inactive = 1;
     4b4:	00000052 	andeq	r0, r0, r2, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				__pi_systat.ledblk = 1;
     4d8:	00510001 	subseq	r0, r1, r1
     4dc:	00000000 	andeq	r0, r0, r0
		if (aux_timer_inactive) {
     4e0:	01000000 	mrseq	r0, (UNDEF: 0)
			cli_aux;
     4e4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     4f4:	00010000 	andeq	r0, r1, r0
     4f8:	00000052 	andeq	r0, r0, r2, asr r0
     4fc:	00000000 	andeq	r0, r0, r0
     500:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	cli_tim;
     514:	00500001 	subseq	r0, r0, r1
	if (setdel) {
     518:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	01000000 	mrseq	r0, (UNDEF: 0)
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	00005400 	andeq	r5, r0, r0, lsl #8
     524:	00000000 	andeq	r0, r0, r0
     528:	03000000 	movweq	r0, #0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	03180000 	tsteq	r8, #0
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	00010000 	andeq	r0, r1, r0
	return NO;
     534:	00031850 	andeq	r1, r3, r0, asr r8
			setdel = 0;
     538:	00033000 	andeq	r3, r3, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		sti_tim;
     548:	000002d4 	ldrdeq	r0, [r0], -r4
		return YES;
     54c:	000002da 	ldrdeq	r0, [r0], -sl
     550:	00500001 	subseq	r0, r0, r1
	...
	UARTDisable (UART0_BASE);
     560:	01000000 	mrseq	r0, (UNDEF: 0)
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	00005000 	andeq	r5, r0, r0
	UARTDisable (UART0_BASE);
     568:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
     56c:	12b80000 	adcsne	r0, r8, #0
     570:	12d60000 	sbcsne	r0, r6, #0
     574:	00020000 	andeq	r0, r2, r0
     578:	12d67091 	sbcsne	r7, r6, #145	; 0x91
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	12fe0000 	rscsne	r0, lr, #0
     580:	00010000 	andeq	r0, r1, r0
     584:	00130254 	andseq	r0, r3, r4, asr r2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	00130a00 	andseq	r0, r3, r0, lsl #20
     58c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     590:	00001318 	andeq	r1, r0, r8, lsl r3
	urates [0] = rate;
     594:	00001362 	andeq	r1, r0, r2, ror #6
}
     598:	66560001 	ldrbvs	r0, [r6], -r1
     59c:	de000013 	mcrle	0, 0, r0, cr0, cr3, {0}
     5a0:	01000013 	tsteq	r0, r3, lsl r0
     5a4:	00005600 	andeq	r5, r0, r0, lsl #12
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	13220000 			; <UNDEFINED> instruction: 0x13220000
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	13600000 	cmnne	r0, #0
     5b4:	00010000 	andeq	r0, r1, r0
     5b8:	00136651 	andseq	r6, r3, r1, asr r6
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	00137800 	andseq	r7, r3, r0, lsl #16
     5c0:	51000100 	mrspl	r0, (UNDEF: 16)
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	00001384 	andeq	r1, r0, r4, lsl #7
     5c8:	0000138e 	andeq	r1, r0, lr, lsl #7
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	a0510001 	subsge	r0, r1, r1
     5d0:	a4000013 	strge	r0, [r0], #-19	; 0xffffffed
     5d4:	01000013 	tsteq	r0, r3, lsl r0
     5d8:	13c45100 	bicne	r5, r4, #0, 2
     5dc:	13c80000 	bicne	r0, r8, #0
     5e0:	00010000 	andeq	r0, r1, r0
     5e4:	00000051 	andeq	r0, r0, r1, asr r0
	switch (operation) {
     5e8:	00000000 	andeq	r0, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ec:	00132200 	andseq	r2, r3, r0, lsl #4
     5f0:	00136000 	andseq	r6, r3, r0
     5f4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     5f8:	00001366 	andeq	r1, r0, r6, ror #6
     5fc:	0000138e 	andeq	r1, r0, lr, lsl #7
				*buf++ = uart_a_read;
     600:	a0550001 	subsge	r0, r5, r1
     604:	a4000013 	strge	r0, [r0], #-19	; 0xffffffed
			while (len && uart_a_char_available) {
     608:	01000013 	tsteq	r0, r3, lsl r0
     60c:	13c45500 	bicne	r5, r4, #0, 10
     610:	13de0000 	bicsne	r0, lr, #0
			if (len != operation) {
     614:	00010000 	andeq	r0, r1, r0
}
     618:	00000055 	andeq	r0, r0, r5, asr r0
     61c:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     620:	00139400 	andseq	r9, r3, r0, lsl #8
			if (uart_a_char_available) {
     624:	0013a000 	andseq	sl, r3, r0
				*buf++ = uart_a_read;
     628:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			uart_a_disable_int;
     62c:	000013a4 	andeq	r1, r0, r4, lsr #7
     630:	000013be 			; <UNDEFINED> instruction: 0x000013be
			if (uart_a_char_available) {
     634:	c2550001 	subsgt	r0, r5, #1
     638:	c4000013 	strgt	r0, [r0], #-19	; 0xffffffed
				uart_a_enable_int;
     63c:	01000013 	tsteq	r0, r3, lsl r0
     640:	00005500 	andeq	r5, r0, r0, lsl #10
				goto Redo_rx;
     644:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	13480000 	movtne	r0, #32768	; 0x8000
     64c:	13600000 	cmnne	r0, #0
			return -2;
     650:	00010000 	andeq	r0, r1, r0
     654:	00000054 	andeq	r0, r0, r4, asr r0
				uart_a_write (*buf);
     658:	00000000 	andeq	r0, r0, r0
     65c:	00138e00 	andseq	r8, r3, r0, lsl #28
			while (len && uart_a_room_in_tx) {
     660:	0013a000 	andseq	sl, r3, r0
     664:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     668:	000013a4 	andeq	r1, r0, r4, lsr #7
			if (len != operation) {
     66c:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
			uart_a_disable_int;
     670:	b8540001 	ldmdalt	r4, {r0}^
     674:	c4000013 	strgt	r0, [r0], #-19	; 0xffffffed
			if (uart_a_room_in_tx) {
     678:	01000013 	tsteq	r0, r3, lsl r0
     67c:	00005300 	andeq	r5, r0, r0, lsl #6
				uart_a_enable_int;
     680:	00000000 	andeq	r0, r0, r0
     684:	13d00000 	bicsne	r0, r0, #0
				*buf++ = uart_a_read;
     688:	13de0000 	bicsne	r0, lr, #0
			if (uart_a_room_in_tx) {
     68c:	00010000 	andeq	r0, r1, r0
				uart_a_write (*buf);
     690:	00000051 	andeq	r0, r0, r1, asr r0
     694:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	000e0800 	andeq	r0, lr, r0, lsl #16
     69c:	000e1400 	andeq	r1, lr, r0, lsl #8
			uart_a_enable_int;
     6a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	00500001 	subseq	r0, r0, r1
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
				syserror (EREQPAR, "uar");
     6c0:	00005000 	andeq	r5, r0, r0
	...
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	00010000 	andeq	r0, r1, r0
			syserror (ENOOPER, "uai");
     6d4:	00000051 	andeq	r0, r0, r1, asr r0
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     6f0:	00520001 	subseq	r0, r2, r1
     6f4:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	01000000 	mrseq	r0, (UNDEF: 0)
void UART0IntHandler () {
     6fc:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     70c:	00010000 	andeq	r0, r1, r0
     710:	00000053 	andeq	r0, r0, r3, asr r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	00000000 	andeq	r0, r0, r0
     718:	53000100 	movwpl	r0, #256	; 0x100
	...
		i_trigger (devevent (UART_A, READ));
     724:	00530001 	subseq	r0, r3, r1
	...
     734:	01000000 	mrseq	r0, (UNDEF: 0)
     738:	00005000 	andeq	r5, r0, r0
     73c:	00000000 	andeq	r0, r0, r0
     740:	12a00000 	adcne	r0, r0, #0
     744:	12a80000 	adcne	r0, r8, #0
     748:	00010000 	andeq	r0, r1, r0
     74c:	00000050 	andeq	r0, r0, r0, asr r0
     750:	00000000 	andeq	r0, r0, r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	0011c400 	andseq	ip, r1, r0, lsl #8
     758:	0011ca00 	andseq	ip, r1, r0, lsl #20
     75c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     768:	000011da 	ldrdeq	r1, [r0], -sl
		RISE_N_SHINE;
     76c:	00001206 	andeq	r1, r0, r6, lsl #4
     770:	06540001 	ldrbeq	r0, [r4], -r1
     774:	0c000012 	stceq	0, cr0, [r0], {18}
		i_trigger (devevent (UART_A, WRITE));
     778:	01000012 	tsteq	r0, r2, lsl r0
     77c:	120c5200 	andne	r5, ip, #0, 4
     780:	12540000 	subsne	r0, r4, #0
     784:	00010000 	andeq	r0, r1, r0
     788:	00125454 	andseq	r5, r2, r4, asr r4
     78c:	00126c00 	andseq	r6, r2, r0, lsl #24
     790:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     79c:	00001206 	andeq	r1, r0, r6, lsl #4
     7a0:	0000120a 	andeq	r1, r0, sl, lsl #4
}
     7a4:	0a540001 	beq	15007b0 <__ccfg+0x14e0808>
     7a8:	0c000012 	stceq	0, cr0, [r0], {18}
     7ac:	01000012 	tsteq	r0, r2, lsl r0
     7b0:	12225300 	eorne	r5, r2, #0, 6
     7b4:	122b0000 	eorne	r0, fp, #0
void __buttons_setirq (int val) {
     7b8:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	00000050 	andeq	r0, r0, r0, asr r0
     7c0:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	00121400 	andseq	r1, r2, r0, lsl #8
     7c8:	00122400 	andseq	r2, r2, r0, lsl #8
     7cc:	53000100 	movwpl	r0, #256	; 0x100
	...
     7d8:	000011da 	ldrdeq	r1, [r0], -sl
     7dc:	000011f8 	strdeq	r1, [r0], -r8
     7e0:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
     7e4:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
     7e8:	01000012 	tsteq	r0, r2, lsl r0
}
     7ec:	121e5000 	andsne	r5, lr, #0
     7f0:	12280000 	eorne	r0, r8, #0
     7f4:	00020000 	andeq	r0, r2, r0
     7f8:	00007c74 	andeq	r7, r0, r4, ror ip
void __pinlist_setirq (int val) {
     7fc:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     800:	0d880000 	stceq	0, cr0, [r8]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	0db60000 	ldceq	0, cr0, [r6]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < N_PINLIST; i++) {
     80c:	000dc450 	andeq	ip, sp, r0, asr r4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     810:	000e0800 	andeq	r0, lr, r0, lsl #16
     814:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     820:	00000d90 	muleq	r0, r0, sp
	for (i = 0; i < N_PINLIST; i++) {
     824:	00000d9c 	muleq	r0, ip, sp
}
     828:	9c530001 	mrrcls	0, 0, r0, r3, cr1
     82c:	9e00000d 	cdpls	0, 0, cr0, cr0, cr13, {0}
     830:	0200000d 	andeq	r0, r0, #13
     834:	a2007000 	andge	r7, r0, #0
void GPIOIntHandler () {
     838:	fa00000d 	blx	874 <GPIOIntHandler+0x3c>
if (buttons_int) {
     83c:	0100000d 	tsteq	r0, sp
     840:	0dfa5300 	ldcleq	3, cr5, [sl]
	buttons_disable ();
     844:	0dfe0000 	ldcleq	0, cr0, [lr]
     848:	00020000 	andeq	r0, r2, r0
	i_trigger ((aword)&__button_list);
     84c:	0dfe0073 	ldcleq	0, cr0, [lr, #460]!	; 0x1cc
     850:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     854:	00010000 	andeq	r0, r1, r0
     858:	00000053 	andeq	r0, r0, r3, asr r0
     85c:	00000000 	andeq	r0, r0, r0
     860:	000d9000 	andeq	r9, sp, r0
     864:	000d9200 	andeq	r9, sp, r0, lsl #4
     868:	52000100 	andpl	r0, r0, #0, 2
     86c:	00000da2 	andeq	r0, r0, r2, lsr #27
     870:	00000de2 	andeq	r0, r0, r2, ror #27
     874:	fa520001 	blx	1480880 <__ccfg+0x14608d8>
	RISE_N_SHINE;
     878:	fe00000d 	cdp2	0, 0, cr0, cr0, cr13, {0}
     87c:	0100000d 	tsteq	r0, sp
     880:	0dfe5300 	ldcleq	3, cr5, [lr]
if (pin_sensor_int) {
     884:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     888:	00010000 	andeq	r0, r1, r0
	i_trigger ((aword)(&__input_pins));
     88c:	00000052 	andeq	r0, r0, r2, asr r0
     890:	00000000 	andeq	r0, r0, r0
     894:	0010ec00 	andseq	lr, r0, r0, lsl #24
     898:	0010f400 	andseq	pc, r0, r0, lsl #8
     89c:	51000100 	mrspl	r0, (UNDEF: 16)
     8a0:	000010f8 	strdeq	r1, [r0], -r8
     8a4:	000010fa 	strdeq	r1, [r0], -sl
     8a8:	00510001 	subseq	r0, r1, r1
     8ac:	00000000 	andeq	r0, r0, r0
     8b0:	40000000 	andmi	r0, r0, r0
     8b4:	5c000010 	stcpl	0, cr0, [r0], {16}
	__pinsen_disable_and_clear;
     8b8:	01000010 	tsteq	r0, r0, lsl r0
	RISE_N_SHINE;
     8bc:	10625000 	rsbne	r5, r2, r0
     8c0:	106e0000 	rsbne	r0, lr, r0
     8c4:	00010000 	andeq	r0, r1, r0
}
     8c8:	00000050 	andeq	r0, r0, r0, asr r0
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	00104000 	andseq	r4, r0, r0
     8d4:	00105e00 	andseq	r5, r0, r0, lsl #28
     8d8:	51000100 	mrspl	r0, (UNDEF: 16)
void system_init () {
     8dc:	00001062 	andeq	r1, r0, r2, rrx
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	0000106c 	andeq	r1, r0, ip, rrx
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	00510001 	subseq	r0, r1, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	40000000 	andmi	r0, r0, r0
     8f0:	61000010 	tstvs	r0, r0, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	01000010 	tsteq	r0, r0, lsl r0
     8f8:	10625200 	rsbne	r5, r2, r0, lsl #4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	106a0000 	rsbne	r0, sl, r0
     900:	00010000 	andeq	r0, r1, r0
     904:	00000052 	andeq	r0, r0, r2, asr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	00104000 	andseq	r4, r0, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	00105800 	andseq	r5, r0, r0, lsl #16
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	53000100 	movwpl	r0, #256	; 0x100
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	00001058 	andeq	r1, r0, r8, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	000010dc 	ldrdeq	r1, [r0], -ip
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	00550001 	subseq	r0, r5, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	00000000 	andeq	r0, r0, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     928:	40000000 	andmi	r0, r0, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92c:	c0000010 	andgt	r0, r0, r0, lsl r0
     930:	02000010 	andeq	r0, r0, #16
     934:	c0009100 	andgt	r9, r0, r0, lsl #2
     938:	dc000010 	stcle	0, cr0, [r0], {16}
		if (port_confs [i] & 0x80)
     93c:	02000010 	andeq	r0, r0, #16
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	00009100 	andeq	r9, r0, r0, lsl #2
     944:	00000000 	andeq	r0, r0, r0
		if (port_confs [i] & 0x40)
     948:	70000000 	andvc	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	86000010 			; <UNDEFINED> instruction: 0x86000010
     950:	01000010 	tsteq	r0, r0, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     954:	108e5000 	addne	r5, lr, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	10a00000 	adcne	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95c:	00010000 	andeq	r0, r1, r0
	all_leds_blink;
     960:	0010b050 	andseq	fp, r0, r0, asr r0
     964:	0010b800 	andseq	fp, r0, r0, lsl #16
     968:	50000100 	andpl	r0, r0, r0, lsl #2
     96c:	000010c0 	andeq	r1, r0, r0, asr #1
     970:	000010c8 	andeq	r1, r0, r8, asr #1
     974:	00500001 	subseq	r0, r0, r1
     978:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	1c000000 	stcne	0, cr0, [r0], {-0}
     980:	22000010 	andcs	r0, r0, #16
     984:	01000010 	tsteq	r0, r0, lsl r0
     988:	10285000 	eorne	r5, r8, r0
     98c:	10300000 	eorsne	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	00010000 	andeq	r0, r1, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	00103450 	andseq	r3, r0, r0, asr r4
     998:	00104000 	andseq	r4, r0, r0
	IntEnable (INT_AON_RTC_COMB);
     99c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_malloc_init ();
     9a8:	0000101c 	andeq	r1, r0, ip, lsl r0
	IntEnable (INT_AON_GPIO_EDGE);
     9ac:	00001024 	andeq	r1, r0, r4, lsr #32
     9b0:	28510001 	ldmdacs	r1, {r0}^
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	32000010 	andcc	r0, r0, #16
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	01000010 	tsteq	r0, r0, lsl r0
     9bc:	10345100 	eorsne	r5, r4, r0, lsl #2
     9c0:	10400000 	subne	r0, r0, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	00010000 	andeq	r0, r1, r0
     9c8:	00000051 	andeq	r0, r0, r1, asr r0
	...
	urates [0] = UART_RATE / 100;
     9d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	EXTRA_INITIALIZERS;
     9e4:	00500001 	subseq	r0, r0, r1
	...
     9f4:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	00005200 	andeq	r5, r0, r0, lsl #4
     9fc:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	10060000 	andne	r0, r6, r0
     a04:	10080000 	andne	r0, r8, r0
			devinit [i] . init (devinit [i] . param);
     a08:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	00000050 	andeq	r0, r0, r0, asr r0
     a10:	00000000 	andeq	r0, r0, r0
     a14:	00100600 	andseq	r0, r0, r0, lsl #12
	IntEnable (INT_UART0_COMB);
     a18:	00101000 	andseq	r1, r0, r0
     a1c:	51000100 	mrspl	r0, (UNDEF: 16)
}
     a20:	00001014 	andeq	r1, r0, r4, lsl r0
	tci_run_auxiliary_timer ();
     a24:	0000101a 	andeq	r1, r0, sl, lsl r0
		diag ("");
     a28:	00510001 	subseq	r0, r1, r1
     a2c:	00000000 	andeq	r0, r0, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	06000000 	streq	r0, [r0], -r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	0a000010 	beq	a7c <system_init+0x1a0>
		diag ("Leftover RAM: %d bytes",
     a38:	01000010 	tsteq	r0, r0, lsl r0
     a3c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     a4c:	00010000 	andeq	r0, r1, r0
     a50:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a60:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     a74:	00500001 	subseq	r0, r0, r1
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	01000000 	mrseq	r0, (UNDEF: 0)
     a80:	00005000 	andeq	r5, r0, r0
	...
     a90:	00010000 	andeq	r0, r1, r0
__attribute__ ((noreturn)) void __pi_release () {
     a94:	00000051 	andeq	r0, r0, r1, asr r0
	...
	check_stack_overflow;
     aa4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	update_n_wake (MAX_WORD, NO);
     ab0:	00500001 	subseq	r0, r0, r1
	...
	for_all_tasks (__pi_curr) {
     ac0:	01000000 	mrseq	r0, (UNDEF: 0)
     ac4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	__SLEEP;
     ad4:	00010000 	andeq	r0, r1, r0
     ad8:	00000052 	andeq	r0, r0, r2, asr r0
	...
	switch (__pi_systat.effpdm) {
     ae8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     afc:	00510001 	subseq	r0, r1, r1
	check_stack_overflow;
     b00:	00000000 	andeq	r0, r0, r0
     b04:	01000000 	mrseq	r0, (UNDEF: 0)
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b08:	00005100 	andeq	r5, r0, r0, lsl #2
     b0c:	00000000 	andeq	r0, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	0ff80000 	svceq	0x00f80000
			goto Redo;
     b14:	0ffc0000 	svceq	0x00fc0000
	for_all_tasks (__pi_curr) {
     b18:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	000ffc50 	andeq	pc, pc, r0, asr ip	; <UNPREDICTABLE>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	00100600 	andseq	r0, r0, r0, lsl #12
     b24:	53000100 	movwpl	r0, #256	; 0x100
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b30:	00000ffc 	strdeq	r0, [r0], -ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b34:	00001006 	andeq	r1, r0, r6
     b38:	00500001 	subseq	r0, r0, r1
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	00005000 	andeq	r5, r0, r0
}
     b50:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b54:	00010000 	andeq	r0, r1, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	00000051 	andeq	r0, r0, r1, asr r0
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b68:	52000100 	andpl	r0, r0, #0, 2
	...
     b74:	00520001 	subseq	r0, r2, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	00005000 	andeq	r5, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	0fd40000 	svceq	0x00d40000
     b94:	0fdc0000 	svceq	0x00dc0000
     b98:	00010000 	andeq	r0, r1, r0
     b9c:	000fde50 	andeq	sp, pc, r0, asr lr	; <UNPREDICTABLE>
     ba0:	000fe200 	andeq	lr, pc, r0, lsl #4
			SysCtrlSetRechargeBeforePowerDown
     ba4:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	00000fe2 	andeq	r0, r0, r2, ror #31
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	00000ff8 	strdeq	r0, [r0], -r8
     bb0:	00530001 	subseq	r0, r3, r1
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
     bc4:	00005000 	andeq	r5, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	00000000 	andeq	r0, r0, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	00010000 	andeq	r0, r1, r0
     bd0:	00000050 	andeq	r0, r0, r0, asr r0
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bec:	00500001 	subseq	r0, r0, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	01000000 	mrseq	r0, (UNDEF: 0)
     c00:	00005000 	andeq	r5, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	00000000 	andeq	r0, r0, r0
     c08:	00010000 	andeq	r0, r1, r0
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0c:	00000057 	andeq	r0, r0, r7, asr r0
	...
}
     c1c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c30:	00500001 	subseq	r0, r0, r1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	00000000 	andeq	r0, r0, r0
     c38:	01000000 	mrseq	r0, (UNDEF: 0)
     c3c:	00005000 	andeq	r5, r0, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c40:	00000000 	andeq	r0, r0, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	00010000 	andeq	r0, r1, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	00000058 	andeq	r0, r0, r8, asr r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	00000000 	andeq	r0, r0, r0
     c50:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	00540001 	subseq	r0, r4, r1
     c68:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (
     c6c:	01000000 	mrseq	r0, (UNDEF: 0)
     c70:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	goto Redo;
     c80:	00010000 	andeq	r0, r1, r0
     c84:	00000058 	andeq	r0, r0, r8, asr r0
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	58000100 	stmdapl	r0, {r8}
	...
     c98:	00001174 	andeq	r1, r0, r4, ror r1
     c9c:	0000117c 	andeq	r1, r0, ip, ror r1
     ca0:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     ca4:	86000011 			; <UNDEFINED> instruction: 0x86000011
     ca8:	01000011 	tsteq	r0, r1, lsl r0
     cac:	118c5000 	orrne	r5, ip, r0
     cb0:	11980000 	orrsne	r0, r8, r0
     cb4:	00010000 	andeq	r0, r1, r0
     cb8:	0011ac50 	andseq	sl, r1, r0, asr ip
     cbc:	0011b600 	andseq	fp, r1, r0, lsl #12
     cc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ccc:	00001182 	andeq	r1, r0, r2, lsl #3
     cd0:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
     cd4:	b4540001 	ldrblt	r0, [r4], #-1
     cd8:	b6000011 			; <UNDEFINED> instruction: 0xb6000011
     cdc:	01000011 	tsteq	r0, r1, lsl r0
     ce0:	11b65200 			; <UNDEFINED> instruction: 0x11b65200
     ce4:	11b80000 			; <UNDEFINED> instruction: 0x11b80000
     ce8:	00010000 	andeq	r0, r1, r0
int main (void) {
     cec:	00000054 	andeq	r0, r0, r4, asr r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	00000000 	andeq	r0, r0, r0
     cf4:	000d5200 	andeq	r5, sp, r0, lsl #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	000d8400 	andeq	r8, sp, r0, lsl #8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     d08:	00000d68 	andeq	r0, r0, r8, ror #26
     d0c:	00000d72 	andeq	r0, r0, r2, ror sp
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	00530001 	subseq	r0, r3, r1
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d20:	01000000 	mrseq	r0, (UNDEF: 0)
	delay (16, 0);
     d24:	00005000 	andeq	r5, r0, r0
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	00010000 	andeq	r0, r1, r0
	__pi_release ();
     d30:	00000054 	andeq	r0, r0, r4, asr r0
	...
     d40:	50000100 	andpl	r0, r0, r0, lsl #2
	...
static void killev (__pi_pcb_t *pid) {
     d4c:	00500001 	subseq	r0, r0, r1
	wfun = (aword)(pid->code);
     d50:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
     d54:	9c000000 	stcls	0, cr0, [r0], {-0}
		for (j = 0; j < nevents (i); j++) {
     d58:	b500000f 	strlt	r0, [r0, #-15]
     d5c:	0100000f 	tsteq	r0, pc
     d60:	00005000 	andeq	r5, r0, r0
			    || i->Events [j] . Event == wfun
     d64:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
     d68:	0f9c0000 	svceq	0x009c0000
			if (i->Events [j] . Event == (aword)pid
     d6c:	0fb20000 	svceq	0x00b20000
     d70:	00010000 	andeq	r0, r1, r0
     d74:	00000051 	andeq	r0, r0, r1, asr r0
				wakeupev (i, j);
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	000f7800 	andeq	r7, pc, r0, lsl #16
	for_all_tasks (i) {
     d80:	000f8c00 	andeq	r8, pc, r0, lsl #24
}
     d84:	50000100 	andpl	r0, r0, r0, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	00000f8c 	andeq	r0, r0, ip, lsl #31
static void qfree (aword *ch) {
     d8c:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d90:	94540001 	ldrbls	r0, [r4], #-1
	cc = (aword*)(mpools + MA_NP);
     d94:	9c00000f 	stcls	0, cr0, [r0], {15}
	m_setnextp (ch, chunk);
     d98:	0100000f 	tsteq	r0, pc
	m_setnextp (cc, ch);
     d9c:	00005000 	andeq	r5, r0, r0
}
     da0:	00000000 	andeq	r0, r0, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da4:	0f780000 	svceq	0x00780000
     da8:	0f8f0000 	svceq	0x008f0000
     dac:	00010000 	andeq	r0, r1, r0
			m_setnextp (cc, m_nextp (chunk));
     db0:	000f9451 	andeq	r9, pc, r1, asr r4	; <UNPREDICTABLE>
			m_size (chunk) += m_hdrlen + m_size (ch);
     db4:	000f9c00 	andeq	r9, pc, r0, lsl #24
     db8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	00000f80 	andeq	r0, r0, r0, lsl #31
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	00000f8f 	andeq	r0, r0, pc, lsl #31
     dcc:	94530001 	ldrbls	r0, [r3], #-1
     dd0:	9c00000f 	stcls	0, cr0, [r0], {15}
			m_setnextp (cc, m_nextp (chunk));
     dd4:	0100000f 	tsteq	r0, pc
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     de8:	00010000 	andeq	r0, r1, r0
     dec:	00000050 	andeq	r0, r0, r0, asr r0
	...
		chunk = m_nextp (chunk))
     dfc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	00550001 	subseq	r0, r5, r1
	...
}
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
     e1c:	00005200 	andeq	r5, r0, r0, lsl #4
	syserror (ESTATE, "state");
     e20:	00000000 	andeq	r0, r0, r0
     e24:	00010000 	andeq	r0, r1, r0
     e28:	00000052 	andeq	r0, r0, r2, asr r0
     e2c:	00000000 	andeq	r0, r0, r0
void update_n_wake (word min, Boolean force) {
     e30:	000f5800 	andeq	r5, pc, r0, lsl #16
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	000f6200 	andeq	r6, pc, r0, lsl #4
     e38:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e44:	00000efc 	strdeq	r0, [r0], -ip
     e48:	00000f02 	andeq	r0, r0, r2, lsl #30
     e4c:	00500001 	subseq	r0, r0, r1
     e50:	00000000 	andeq	r0, r0, r0
     e54:	6c000000 	stcvs	0, cr0, [r0], {-0}
     e58:	72000012 	andvc	r0, r0, #18
     e5c:	01000012 	tsteq	r0, r2, lsl r0
     e60:	12725000 	rsbsne	r5, r2, #0
     e64:	12a00000 	adcne	r0, r0, #0
     e68:	00010000 	andeq	r0, r1, r0
     e6c:	00000055 	andeq	r0, r0, r5, asr r0
     e70:	00000000 	andeq	r0, r0, r0
		for_all_tasks (i) {
     e74:	00126c00 	andseq	r6, r2, r0, lsl #24
	__pi_mintk = znew + min;
     e78:	00127700 	andseq	r7, r2, r0, lsl #14
     e7c:	51000100 	mrspl	r0, (UNDEF: 16)
			if (!twaiting (i))
     e80:	00001277 	andeq	r1, r0, r7, ror r2
     e84:	000012a0 	andeq	r1, r0, r0, lsr #5
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	00540001 	subseq	r0, r4, r1
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     e94:	8c000012 	stchi	0, cr0, [r0], {18}
     e98:	01000012 	tsteq	r0, r2, lsl r0
     e9c:	128e5300 	addne	r5, lr, #0, 6
     ea0:	12920000 	addsne	r0, r2, #0
     ea4:	00010000 	andeq	r0, r1, r0
     ea8:	00129253 	andseq	r9, r2, r3, asr r2
     eac:	0012a000 	andseq	sl, r2, r0
     eb0:	52000100 	andpl	r0, r0, #0, 2
	...
				d = i->Timer - znew;
     ec4:	00500001 	subseq	r0, r0, r1
	...
		if ((word)(__pi_mintk - znew) < min) 
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
}
     ee8:	00010000 	andeq	r0, r1, r0
     eec:	00000050 	andeq	r0, r0, r0, asr r0
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	release;
     f08:	00530001 	subseq	r0, r3, r1
     f0c:	00000000 	andeq	r0, r0, r0
void __pi_wait (aword event, word state) {
     f10:	01000000 	mrseq	r0, (UNDEF: 0)
	sint j = nevents (__pi_curr);
     f14:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		syserror (ENEVENTS, "sw");
     f24:	00010000 	andeq	r0, r1, r0
     f28:	00000050 	andeq	r0, r0, r0, asr r0
	setestate (__pi_curr->Events [j], state, event);
     f2c:	00000000 	andeq	r0, r0, r0
	incwait (__pi_curr);
     f30:	53000100 	movwpl	r0, #256	; 0x100
	...
}
     f3c:	00530001 	subseq	r0, r3, r1
	...
		for (j = 0; j < nevents (i); j++) {
     f4c:	01000000 	mrseq	r0, (UNDEF: 0)
     f50:	00005000 	andeq	r5, r0, r0
     f54:	00000000 	andeq	r0, r0, r0
     f58:	00010000 	andeq	r0, r1, r0
			if (i->Events [j] . Event == event) {
     f5c:	00000050 	andeq	r0, r0, r0, asr r0
	...
				wakeupev (i, j);
     f6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
aword __pi_join (aword pid, word st) {
     f78:	00530001 	subseq	r0, r3, r1
	for_all_tasks (i) {
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	01000000 	mrseq	r0, (UNDEF: 0)
	return 0;
     f84:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	for_all_tasks (i) {
     f94:	00010000 	andeq	r0, r1, r0
     f98:	00000050 	andeq	r0, r0, r0, asr r0
void delay (word d, word state) {
     f9c:	00000000 	andeq	r0, r0, r0
	settstate (__pi_curr, state);
     fa0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	update_n_wake (d, YES);
     fb4:	00530001 	subseq	r0, r3, r1
	__pi_curr->Timer = __pi_old + d;
     fb8:	00000000 	andeq	r0, r0, r0
     fbc:	30000000 	andcc	r0, r0, r0
	inctimer (__pi_curr);
     fc0:	3600000e 	strcc	r0, [r0], -lr
     fc4:	0100000e 	tsteq	r0, lr
     fc8:	00005000 	andeq	r5, r0, r0
}
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
	if (fun == NULL)
     fd4:	0e390000 	cdpeq	0, 3, cr0, cr9, cr0, {0}
		return (int) __pi_curr;
     fd8:	00010000 	andeq	r0, r1, r0
     fdc:	00000051 	andeq	r0, r0, r1, asr r0
	for_all_tasks (i)
     fe0:	00000000 	andeq	r0, r0, r0
}
     fe4:	000e3e00 	andeq	r3, lr, r0, lsl #28
		if (i->code == fun)
     fe8:	000e7c00 	andeq	r7, lr, r0, lsl #24
	for_all_tasks (i)
     fec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     ff0:	00000e80 	andeq	r0, r0, r0, lsl #29
     ff4:	00000ece 	andeq	r0, r0, lr, asr #29
int __pi_strlen (const char *s) {
     ff8:	d0540001 	subsle	r0, r4, r1
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	da00000e 	ble	103c <adddevfunc+0x20>
}
    1000:	0100000e 	tsteq	r0, lr
	for (i = 0; *(s+i) != '\0'; i++);
    1004:	00005400 	andeq	r5, r0, r0, lsl #8
	while (n--)
    1008:	00000000 	andeq	r0, r0, r0
    100c:	0e760000 	cdpeq	0, 7, cr0, cr6, cr0, {0}
		*dest++ = *src++;
    1010:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    1014:	00010000 	andeq	r0, r1, r0
    1018:	000e8050 	andeq	r8, lr, r0, asr r0
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	000ed000 	andeq	sp, lr, r0
		syserror (EREQPAR, "addv");
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (ioreq [loc] != NULL)
    102c:	00000f10 	andeq	r0, r0, r0, lsl pc
		syserror (ERESOURCE, "addv");
    1030:	00000f24 	andeq	r0, r0, r4, lsr #30
	ioreq [loc] = rf;
    1034:	2a500001 	bcs	1401040 <__ccfg+0x13e1098>
}
    1038:	4400000f 	strmi	r0, [r0], #-15
    103c:	0100000f 	tsteq	r0, pc
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	00005000 	andeq	r5, r0, r0
    1044:	00000000 	andeq	r0, r0, r0
    1048:	0f100000 	svceq	0x00100000
    104c:	0f260000 	svceq	0x00260000
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	00010000 	andeq	r0, r1, r0
    1054:	000f2a51 	andeq	r2, pc, r1, asr sl	; <UNPREDICTABLE>
    1058:	000f3000 	andeq	r3, pc, r0
		syserror (ENODEVICE, "io");
    105c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	00000f22 	andeq	r0, r0, r2, lsr #30
    106c:	00000f24 	andeq	r0, r0, r4, lsr #30
	if (ret >= 0)
    1070:	00500001 	subseq	r0, r0, r1
	if (ret == -1) {
    1074:	00000000 	andeq	r0, r0, r0
    1078:	22000000 	andcs	r0, r0, #0
		if (retry == WNONE)
    107c:	2600000f 	strcs	r0, [r0], -pc
		iowait (dev, operation, retry);
    1080:	0100000f 	tsteq	r0, pc
    1084:	00005100 	andeq	r5, r0, r0, lsl #2
    1088:	00000000 	andeq	r0, r0, r0
			release;
    108c:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
	if (ret == -2) {
    1090:	113a0000 	teqne	sl, r0
		if (retry != WNONE) {
    1094:	00010000 	andeq	r0, r1, r0
    1098:	00114050 	andseq	r4, r1, r0, asr r0
			iowait (dev, operation, retry);
    109c:	00115300 	andseq	r5, r1, r0, lsl #6
    10a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			(ioreq [dev]) (NONE, buf, len);
    10ac:	00001138 	andeq	r1, r0, r8, lsr r1
		(ioreq [dev]) (NONE, buf, len);
    10b0:	0000113a 	andeq	r1, r0, sl, lsr r1
    10b4:	00500001 	subseq	r0, r0, r1
	...
		delay (-ret - 2, retry);
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
    10c8:	00005000 	andeq	r5, r0, r0
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00010000 	andeq	r0, r1, r0
		release;
    10d4:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	00540001 	subseq	r0, r4, r1
    10fc:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1100:	01000000 	mrseq	r0, (UNDEF: 0)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1104:	00005000 	andeq	r5, r0, r0
	...
}
    1114:	00010000 	andeq	r0, r1, r0
    1118:	00000050 	andeq	r0, r0, r0, asr r0
    111c:	00000000 	andeq	r0, r0, r0
    1120:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void __pi_free (aword *ch) {
    112c:	00750002 	rsbseq	r0, r5, r2
	...
	mcfree [MA_NP] += m_size (ch);
    1140:	00500001 	subseq	r0, r0, r1
		m_size (ch) ^= MALLOC_UMASK;
    1144:	00000000 	andeq	r0, r0, r0
    1148:	01000000 	mrseq	r0, (UNDEF: 0)
	mcfree [MA_NP] += m_size (ch);
    114c:	00005000 	andeq	r5, r0, r0
	...
		trigger ((aword)(&(mevent [MA_NP])));
    115c:	00010000 	andeq	r0, r1, r0
		mevent [MA_NP] . nwait --;
    1160:	00000054 	andeq	r0, r0, r4, asr r0
}
    1164:	00000000 	andeq	r0, r0, r0
    1168:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	j = NULL;
    117c:	00500001 	subseq	r0, r0, r1
	for_all_tasks (i) {
    1180:	00000000 	andeq	r0, r0, r0
	syserror (EREQPAR, "kpi");
    1184:	01000000 	mrseq	r0, (UNDEF: 0)
    1188:	00005000 	andeq	r5, r0, r0
	...
			killev (i);
    1198:	00010000 	andeq	r0, r1, r0
			ufree (i);
    119c:	00000053 	andeq	r0, r0, r3, asr r0
	...
				j->Next = i->Next;
    11ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    11b8:	00730002 	rsbseq	r0, r3, r2
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	00500001 	subseq	r0, r0, r1
		_size = (((aword)size) + 3) >> 2;
    11d0:	00000000 	andeq	r0, r0, r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	01000000 	mrseq	r0, (UNDEF: 0)
		_size = (((aword)size) + 3) >> 2;
    11d8:	00005000 	andeq	r5, r0, r0
	...
		mnfree [MA_NP] = 0;
    11e8:	00010000 	andeq	r0, r1, r0
    11ec:	00000051 	andeq	r0, r0, r1, asr r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		chunk = m_nextp (chunk)) {
    1208:	00530001 	subseq	r0, r3, r1
		m_setnextp (cc, m_nextp (chunk));
    120c:	00000000 	andeq	r0, r0, r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1210:	01000000 	mrseq	r0, (UNDEF: 0)
    1214:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			m_size (cc) = waste - m_hdrlen;
    1224:	00010000 	andeq	r0, r1, r0
			QFREE;
    1228:	00000050 	andeq	r0, r0, r0, asr r0
		mevent [MA_NP] . nfail = 0;
    122c:	00000000 	andeq	r0, r0, r0
		mcfree [MA_NP] -= m_size (chunk);
    1230:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    123c:	00730002 	rsbseq	r0, r3, r2
	...
}
    1250:	00500001 	subseq	r0, r0, r1
    1254:	00000000 	andeq	r0, r0, r0
    1258:	01000000 	mrseq	r0, (UNDEF: 0)
    125c:	00005500 	andeq	r5, r0, r0, lsl #10
    1260:	00000000 	andeq	r0, r0, r0
    1264:	00010000 	andeq	r0, r1, r0
    1268:	00000050 	andeq	r0, r0, r0, asr r0
aword __pi_fork (fsmcode func, aword data) {
    126c:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	i->data = data;
    1284:	00510001 	subseq	r0, r1, r1
		if ((j = __PCB) == NULL)
    1288:	00000000 	andeq	r0, r0, r0
}
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
			for (; j->Next != NULL; j = j->Next);
    1290:	00005700 	andeq	r5, r0, r0, lsl #14
    1294:	00000000 	andeq	r0, r0, r0
	return (aword) i;
    1298:	00010000 	andeq	r0, r1, r0
    129c:	00000051 	andeq	r0, r0, r1, asr r0
	if (mevent [MA_NP] . nwait != 255)
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
void diag (const char *mess, ...) {
    12b8:	00520001 	subseq	r0, r2, r1
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
	diag_disable_int (a, is);
    12c4:	00005400 	andeq	r5, r0, r0, lsl #8
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	00010000 	andeq	r0, r1, r0
				d = (bc == 16) ? 10000 : 1000000000;
    12d0:	00000052 	andeq	r0, r0, r2, asr r0
	diag_disable_int (a, is);
    12d4:	00000000 	andeq	r0, r0, r0
	while (*mess != '\0') {
    12d8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	diag_wait (a);
    12ec:	00500001 	subseq	r0, r0, r1
	diag_enable_int (a, is);
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
}
    12f8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		if (*mess == '%') {
    1308:	00010000 	andeq	r0, r1, r0
			if (*mess == 'l') {
    130c:	00000050 	andeq	r0, r0, r0, asr r0
	...
				bc = 32;
    131c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (*mess) {
    1328:	00540001 	subseq	r0, r4, r1
	...
				dgout (*mess);
    1338:	01000000 	mrseq	r0, (UNDEF: 0)
    133c:	00005100 	andeq	r5, r0, r0, lsl #2
			switch (*mess) {
    1340:	00000000 	andeq	r0, r0, r0
					v = __pi_hex_enc_table [
    1344:	00010000 	andeq	r0, r1, r0
					i += 4;
    1348:	00000051 	andeq	r0, r0, r1, asr r0
	...
					dgout (v);
    1358:	52000100 	andpl	r0, r0, #0, 2
	...
					d /= 10;
    1364:	00520001 	subseq	r0, r2, r1
	...
					dgout ('-');
    1374:	01000000 	mrseq	r0, (UNDEF: 0)
						val |= 0xffff0000;
    1378:	00005000 	andeq	r5, r0, r0
    137c:	00000000 	andeq	r0, r0, r0
    1380:	00070000 	andeq	r0, r7, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
    1388:	00220072 	eoreq	r0, r2, r2, ror r0
    138c:	00000000 	andeq	r0, r0, r0
					v = (word) (val / d);
    1390:	01000000 	mrseq	r0, (UNDEF: 0)
					if (v || d == 1) break;
    1394:	00005000 	andeq	r5, r0, r0
	...
					dgout (v + '0');
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	00000050 	andeq	r0, r0, r0, asr r0
	...
					if (d == 0) break;
    13b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					val &= 0xffff;
    13cc:	00500001 	subseq	r0, r0, r1
					dgout (*s);
    13d0:	00000000 	andeq	r0, r0, r0
					s++;
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
				while (*s != '\0') {
    13d8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
			dgout (*mess++);
    13e8:	00010000 	andeq	r0, r1, r0
    13ec:	00000051 	andeq	r0, r0, r1, asr r0
    13f0:	00000000 	andeq	r0, r0, r0
}
    13f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1408:	00500001 	subseq	r0, r0, r1
    __asm("    ldr     r0, =_bss\n"
    140c:	00000000 	andeq	r0, r0, r0
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
    1414:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    FaultISR();
    1424:	00010000 	andeq	r0, r1, r0
        *pui32Dest++ = *pui32Src++;
    1428:	00000050 	andeq	r0, r0, r0, asr r0
    142c:	00000000 	andeq	r0, r0, r0
    1430:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1444:	00510001 	subseq	r0, r1, r1
static byte get_byte () {
    1448:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    144c:	01000000 	mrseq	r0, (UNDEF: 0)
    1450:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			b |= 1;
    1460:	00010000 	andeq	r0, r1, r0
    1464:	00000050 	andeq	r0, r0, r0, asr r0
    1468:	00000000 	andeq	r0, r0, r0
	for (b = 0, i = 0; i < 8; i++) {
    146c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
static void put_byte (byte b) {
    1480:	00510001 	subseq	r0, r1, r1
    1484:	00000000 	andeq	r0, r0, r0
    1488:	01000000 	mrseq	r0, (UNDEF: 0)
		if (b & 0x80)
    148c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		b <<= 1;
    149c:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < 8; i++) {
    14a0:	00000050 	andeq	r0, r0, r0, asr r0
}
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	put_byte (cmd);
    14b4:	00500001 	subseq	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14b8:	00000000 	andeq	r0, r0, r0
}
    14bc:	01000000 	mrseq	r0, (UNDEF: 0)
    14c0:	00005000 	andeq	r5, r0, r0
static void wwait (word st, word del) {
    14c4:	00000000 	andeq	r0, r0, r0
    14c8:	00010000 	andeq	r0, r1, r0
    14cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
    14dc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    14e8:	00510001 	subseq	r0, r1, r1
	while (dopen && (rdsr () & 1)) {
    14ec:	00000000 	andeq	r0, r0, r0
}
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
		if (st == WNONE)
    14f4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			delay (del, st);
    1504:	00010000 	andeq	r0, r1, r0
    1508:	00000052 	andeq	r0, r0, r2, asr r0
			release;
    150c:	00000000 	andeq	r0, r0, r0
    1510:	52000100 	andpl	r0, r0, #0, 2
	...
	if (dopen) {
    151c:	00520001 	subseq	r0, r2, r1
	...
	dstat = 0;
    152c:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1530:	00005000 	andeq	r5, r0, r0
	...
    1540:	00010000 	andeq	r0, r1, r0
	udelay (1);
    1544:	00000050 	andeq	r0, r0, r0, asr r0
		dopen = DOPEN_TEMP;
    1548:	00000000 	andeq	r0, r0, r0
    154c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (dopen == DOPEN_TEMP) {
    1560:	00500001 	subseq	r0, r0, r1
		wwait (WNONE, 1);
    1564:	00000000 	andeq	r0, r0, r0
    1568:	01000000 	mrseq	r0, (UNDEF: 0)
	cmd_0 (CMD_DP);
    156c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
word ee_open () {
    157c:	00010000 	andeq	r0, r1, r0
	ready ();
    1580:	00000051 	andeq	r0, r0, r1, asr r0
	...
	if (dopen) {
    1590:	52000100 	andpl	r0, r0, #0, 2
	...
		cclose ();
    159c:	00550001 	subseq	r0, r5, r1
	...
	if (len == 0)
    15ac:	01000000 	mrseq	r0, (UNDEF: 0)
	if (__inpline == NULL) {
    15b0:	00005000 	andeq	r5, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	00010000 	andeq	r0, r1, r0
			prcs = runthread (__inserial);
    15bc:	00000054 	andeq	r0, r0, r4, asr r0
	...
		release;
    15cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (*__inpline == NULL) // bin cmd
    15d8:	00500001 	subseq	r0, r0, r1
	...
	memcpy (buf, __inpline, prcs);
    15e8:	01000000 	mrseq	r0, (UNDEF: 0)
    15ec:	00005200 	andeq	r5, r0, r0, lsl #4
    15f0:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    15f4:	00010000 	andeq	r0, r1, r0
	__inpline = NULL;
    15f8:	00000055 	andeq	r0, r0, r5, asr r0
	...
		prcs = strlen (__inpline);
    1608:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		return 0;
    1614:	00500001 	subseq	r0, r0, r1
	...
	if ((prcs = running (__outserial)) != 0) {
    1624:	01000000 	mrseq	r0, (UNDEF: 0)
    1628:	00005100 	andeq	r5, r0, r0, lsl #2
		join (prcs, st);
    162c:	00000000 	andeq	r0, r0, r0
    1630:	00010000 	andeq	r0, r1, r0
		release;
    1634:	00000051 	andeq	r0, r0, r1, asr r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	00000000 	andeq	r0, r0, r0
    163c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (runstrand (__outserial, buf) == 0) {
    1650:	00520001 	subseq	r0, r2, r1
    1654:	00000000 	andeq	r0, r0, r0
		ufree (buf);
    1658:	01000000 	mrseq	r0, (UNDEF: 0)
		npwait (st);
    165c:	00005400 	andeq	r5, r0, r0, lsl #8
}
    1660:	00000000 	andeq	r0, r0, r0
    1664:	00010000 	andeq	r0, r1, r0
    1668:	00000052 	andeq	r0, r0, r2, asr r0
    166c:	00000000 	andeq	r0, r0, r0
int ser_inf (word st, const char *fmt, ...) {
    1670:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (__inpline == NULL) {
    167c:	00540001 	subseq	r0, r4, r1
		if ((prcs = running (__inserial)) == 0) {
    1680:	00000000 	andeq	r0, r0, r0
    1684:	01000000 	mrseq	r0, (UNDEF: 0)
			prcs = runthread (__inserial);
    1688:	00005400 	andeq	r5, r0, r0, lsl #8
	...
		release;
    1698:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    169c:	00000053 	andeq	r0, r0, r3, asr r0
	...
	prcs = vscan (__inpline, fmt, ap);
    16ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    16b8:	00500001 	subseq	r0, r0, r1
	...
		return 0;
    16c8:	01000000 	mrseq	r0, (UNDEF: 0)
    16cc:	00005000 	andeq	r5, r0, r0
strand (__outserial, const char*)
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	00010000 	andeq	r0, r1, r0
    16d8:	00000050 	andeq	r0, r0, r0, asr r0
    16dc:	00000000 	andeq	r0, r0, r0
endstrand
    16e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		len = strlen (ptr);
    16f4:	00500001 	subseq	r0, r0, r1
    16f8:	00000000 	andeq	r0, r0, r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1700:	00005000 	andeq	r5, r0, r0
    1704:	00000000 	andeq	r0, r0, r0
    1708:	00010000 	andeq	r0, r1, r0
    170c:	00000050 	andeq	r0, r0, r0, asr r0
	len -= quant;
    1710:	00000000 	andeq	r0, r0, r0
    1714:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		finish;
    1728:	00510001 	subseq	r0, r1, r1
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    172c:	00000000 	andeq	r0, r0, r0
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	00005100 	andeq	r5, r0, r0, lsl #2
    1738:	00000000 	andeq	r0, r0, r0
    173c:	00010000 	andeq	r0, r1, r0
strand (__inserial, address)
    1740:	00000051 	andeq	r0, r0, r1, asr r0
    1744:	00000000 	andeq	r0, r0, r0
    1748:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		finish;
    175c:	00540001 	subseq	r0, r4, r1
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1760:	00000000 	andeq	r0, r0, r0
    1764:	0a000000 	beq	176c <__inserial+0x2c>
    1768:	32007000 	andcc	r7, r0, #0
    176c:	00000324 	andeq	r0, r0, r4, lsr #6
		umwait (IM_INIT);
    1770:	00220000 	eoreq	r0, r2, r0
		release;
    1774:	00000000 	andeq	r0, r0, r0
	savedata (data);
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
	len = MAX_LINE_LENGTH;
    177c:	00005400 	andeq	r5, r0, r0, lsl #8
	io (IM_READ, __cport, READ, ptr, 1);
    1780:	00000000 	andeq	r0, r0, r0
    1784:	000a0000 	andeq	r0, sl, r0
    1788:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    178c:	00000003 	andeq	r0, r0, r3
	if (ptr == (char*) data) { // new line
    1790:	00002200 	andeq	r2, r0, r0, lsl #4
    1794:	00000000 	andeq	r0, r0, r0
		if (*ptr == '\0') { // bin cmd
    1798:	00010000 	andeq	r0, r1, r0
			proceed (IM_BIN);
    179c:	00000054 	andeq	r0, r0, r4, asr r0
    17a0:	00000000 	andeq	r0, r0, r0
		if (*ptr < 0x20)
    17a4:	70000a00 	andvc	r0, r0, r0, lsl #20
    17a8:	03243200 			; <UNDEFINED> instruction: 0x03243200
			proceed (IM_READ);
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	00000022 	andeq	r0, r0, r2, lsr #32
	...
		*ptr = '\0';
    17c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (len) {
    17cc:	00550001 	subseq	r0, r5, r1
	...
	proceed (IM_READ);
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
	io (IM_BIN, __cport, READ, ptr, 1);
    17e0:	00005400 	andeq	r5, r0, r0, lsl #8
    17e4:	00000000 	andeq	r0, r0, r0
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00000054 	andeq	r0, r0, r4, asr r0
	...
	if (len > *ptr + 1) // 1 for 0x04
    17fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	ptr++;
    1808:	00500001 	subseq	r0, r0, r1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    180c:	00000000 	andeq	r0, r0, r0
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
    1814:	00005000 	andeq	r5, r0, r0
	...
	len -= quant;
    1824:	00010000 	andeq	r0, r1, r0
		__inpline = (char*)data;
    1828:	00000055 	andeq	r0, r0, r5, asr r0
	...
endstrand
    1838:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    184c:	00500001 	subseq	r0, r0, r1
    1850:	00000000 	andeq	r0, r0, r0
    1854:	01000000 	mrseq	r0, (UNDEF: 0)
    1858:	00005000 	andeq	r5, r0, r0
		if (res && (d < n))
    185c:	00000000 	andeq	r0, r0, r0
    1860:	00010000 	andeq	r0, r1, r0
    1864:	00000050 	andeq	r0, r0, r0, asr r0
    1868:	00000000 	andeq	r0, r0, r0
			res [d] = (char) c;
    186c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1880:	00510001 	subseq	r0, r1, r1
    1884:	00000000 	andeq	r0, r0, r0
				enci (10000);
    1888:	01000000 	mrseq	r0, (UNDEF: 0)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    188c:	00005100 	andeq	r5, r0, r0, lsl #2
    1890:	00000000 	andeq	r0, r0, r0
	d = 0;
    1894:	00010000 	andeq	r0, r1, r0
		c = *fm++;
    1898:	00000051 	andeq	r0, r0, r1, asr r0
	...
				outc ('\\');
    18a8:	53000100 	movwpl	r0, #256	; 0x100
	...
    18b4:	0070000a 	rsbseq	r0, r0, sl
			outc (c);
    18b8:	00032432 	andeq	r2, r3, r2, lsr r4
    18bc:	22000000 	andcs	r0, r0, #0
	...
			outc (c);
    18c8:	00530001 	subseq	r0, r3, r1
				outc (val);
    18cc:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    18d0:	0a000000 	beq	18d8 <__pi_vfparse+0x5c>
		if (c == '%') {
    18d4:	32007000 	andcc	r7, r0, #0
    18d8:	00000324 	andeq	r0, r0, r4, lsr #6
			c = *fm++;
    18dc:	00220000 	eoreq	r0, r2, r0
			switch (c) {
    18e0:	00000000 	andeq	r0, r0, r0
    18e4:	01000000 	mrseq	r0, (UNDEF: 0)
    18e8:	00005300 	andeq	r5, r0, r0, lsl #6
    18ec:	00000000 	andeq	r0, r0, r0
    18f0:	000a0000 	andeq	r0, sl, r0
    18f4:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    18f8:	00000003 	andeq	r0, r0, r3
    18fc:	00002200 	andeq	r2, r0, r0, lsl #4
	...
				outc (c);
    190c:	00010000 	andeq	r0, r1, r0
    1910:	00000050 	andeq	r0, r0, r0, asr r0
				if (c == '\0')
    1914:	00000000 	andeq	r0, r0, r0
				return d;
    1918:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (c) {
    192c:	00530001 	subseq	r0, r3, r1
				for (i = 12; ; i -= 4) {
    1930:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1934:	01000000 	mrseq	r0, (UNDEF: 0)
						[ (val >> i) & 0xf ]);
    1938:	00005300 	andeq	r5, r0, r0, lsl #6
    193c:	00000000 	andeq	r0, r0, r0
    1940:	00010000 	andeq	r0, r1, r0
					outc (__pi_hex_enc_table
    1944:	00000053 	andeq	r0, r0, r3, asr r0
	...
				for (i = 12; ; i -= 4) {
    1954:	52000100 	andpl	r0, r0, #0, 2
	...
				val = (word) va_arg (ap, aword);
    1960:	00520001 	subseq	r0, r2, r1
				if (c == 'd' && (val & 0x8000) != 0) {
    1964:	00000000 	andeq	r0, r0, r0
    1968:	01000000 	mrseq	r0, (UNDEF: 0)
					outc ('-');
    196c:	00005200 	andeq	r5, r0, r0, lsl #4
    1970:	00000000 	andeq	r0, r0, r0
					val = (~val) + 1;
    1974:	00010000 	andeq	r0, r1, r0
    1978:	00000052 	andeq	r0, r0, r2, asr r0
	...
				enci (10000);
    1988:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    199c:	00510001 	subseq	r0, r1, r1
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	01000000 	mrseq	r0, (UNDEF: 0)
    19a8:	00005100 	andeq	r5, r0, r0, lsl #2
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	00010000 	andeq	r0, r1, r0
    19b4:	00000051 	andeq	r0, r0, r1, asr r0
    19b8:	00000000 	andeq	r0, r0, r0
    19bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				if (c == 'd' || c == 'u') {
    19c8:	00510001 	subseq	r0, r1, r1
	...
					fm++;
    19d8:	01000000 	mrseq	r0, (UNDEF: 0)
					if (c == 'd' &&
    19dc:	00005500 	andeq	r5, r0, r0, lsl #10
	...
						val = (~val) + 1;
    19ec:	00010000 	andeq	r0, r1, r0
				enci (10000);
    19f0:	00000054 	andeq	r0, r0, r4, asr r0
					enci (1000000000UL);
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1a04:	00540001 	subseq	r0, r4, r1
	...
    1a14:	01000000 	mrseq	r0, (UNDEF: 0)
    1a18:	00005000 	andeq	r5, r0, r0
    1a1c:	00000000 	andeq	r0, r0, r0
    1a20:	00010000 	andeq	r0, r1, r0
    1a24:	00000050 	andeq	r0, r0, r0, asr r0
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	71000700 	tstvc	r0, r0, lsl #14
    1a30:	72243200 	eorvc	r3, r4, #0, 4
    1a34:	00002200 	andeq	r2, r0, r0, lsl #4
				} else if (c == 'x') {
    1a38:	00000000 	andeq	r0, r0, r0
					for (i = 28; ; i -= 4) {
    1a3c:	00010000 	andeq	r0, r1, r0
					val = va_arg (ap, lword);
    1a40:	00000050 	andeq	r0, r0, r0, asr r0
	...
						outc (__pi_hex_enc_table
    1a50:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						if (i == 0)
    1a5c:	00500001 	subseq	r0, r0, r1
	...
					outc ('%');
    1a6c:	01000000 	mrseq	r0, (UNDEF: 0)
					outc ('l');
    1a70:	00005000 	andeq	r5, r0, r0
    1a74:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1a78:	00010000 	andeq	r0, r1, r0
				outc (val);
    1a7c:	00000050 	andeq	r0, r0, r0, asr r0
	...
				while (*st != '\0') {
    1a8c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					outc (*st);
    1a98:	00550001 	subseq	r0, r5, r1
					st++;
    1a9c:	00000000 	andeq	r0, r0, r0
		c = *fm++;
    1aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa4:	00005100 	andeq	r5, r0, r0, lsl #2
    1aa8:	00000000 	andeq	r0, r0, r0
char *vform (char *res, const char *fm, va_list aq) {
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	00000055 	andeq	r0, r0, r5, asr r0
	if (res != NULL) {
    1ab4:	00000000 	andeq	r0, r0, r0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    1ac4:	00550001 	subseq	r0, r5, r1
	...
	fml = strlen (fm) + 17;
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad8:	00005600 	andeq	r5, r0, r0, lsl #12
	...
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae8:	00010000 	andeq	r0, r1, r0
    1aec:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (buf == NULL || fmt == NULL)
    1afc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1b08:	00500001 	subseq	r0, r0, r1
    1b0c:	00000000 	andeq	r0, r0, r0
		    	    case 'u': scanu (lword); break;
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
			while (isspace (*buf)) buf++;
    1b14:	00005000 	andeq	r5, r0, r0
	...
		switch (*fmt++) {
    1b24:	00010000 	andeq	r0, r1, r0
    1b28:	00000051 	andeq	r0, r0, r1, asr r0
    1b2c:	00000000 	andeq	r0, r0, r0
    1b30:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1b3c:	00510001 	subseq	r0, r1, r1
}
    1b40:	00000000 	andeq	r0, r0, r0
		switch (*fmt++) {
    1b44:	01000000 	mrseq	r0, (UNDEF: 0)
    1b48:	00005700 	andeq	r5, r0, r0, lsl #14
    1b4c:	00000000 	andeq	r0, r0, r0
    1b50:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    1b54:	00000057 	andeq	r0, r0, r7, asr r0
    1b58:	00000000 	andeq	r0, r0, r0
    1b5c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1b68:	00570001 	subseq	r0, r7, r1
	...
			nc++;
    1b78:	02000000 	andeq	r0, r0, #0
			if (*buf != ',') {
    1b7c:	00789100 	rsbseq	r9, r8, r0, lsl #2
				while (!isspace (*buf) && *buf != ',' &&
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	02000000 	andeq	r0, r0, #0
    1b88:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1b8c:	00000000 	andeq	r0, r0, r0
    1b90:	02000000 	andeq	r0, r0, #0
    1b94:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1b98:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    1b9c:	02000000 	andeq	r0, r0, #0
    1ba0:	00789100 	rsbseq	r9, r8, r0, lsl #2
	...
			if (*buf == ',') buf++;
    1bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    1bb4:	00005600 	andeq	r5, r0, r0, lsl #12
			*sap = '\0';
    1bb8:	00000000 	andeq	r0, r0, r0
			break;
    1bbc:	00010000 	andeq	r0, r1, r0
		    case 'd': scani (word); break;
    1bc0:	00000056 	andeq	r0, r0, r6, asr r0
	...
    1bd0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1bdc:	00540001 	subseq	r0, r4, r1
    1be0:	00000000 	andeq	r0, r0, r0
    1be4:	01000000 	mrseq	r0, (UNDEF: 0)
    1be8:	00005000 	andeq	r5, r0, r0
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	00010000 	andeq	r0, r1, r0
    1bf4:	00000054 	andeq	r0, r0, r4, asr r0
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c08:	00540001 	subseq	r0, r4, r1
	...
    1c18:	01000000 	mrseq	r0, (UNDEF: 0)
    1c1c:	00005000 	andeq	r5, r0, r0
    1c20:	00000000 	andeq	r0, r0, r0
    1c24:	00010000 	andeq	r0, r1, r0
    1c28:	00000050 	andeq	r0, r0, r0, asr r0
    1c2c:	00000000 	andeq	r0, r0, r0
		    case 'u': scanu (word); break;
    1c30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c44:	00540001 	subseq	r0, r4, r1
    1c48:	00000000 	andeq	r0, r0, r0
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00005000 	andeq	r5, r0, r0
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	00010000 	andeq	r0, r1, r0
    1c5c:	00000054 	andeq	r0, r0, r4, asr r0
    1c60:	00000000 	andeq	r0, r0, r0
    1c64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    case 'x': scanx (word); break;
    1c78:	00500001 	subseq	r0, r0, r1
	...
    1c88:	01000000 	mrseq	r0, (UNDEF: 0)
    1c8c:	00005000 	andeq	r5, r0, r0
	...
    1c9c:	00010000 	andeq	r0, r1, r0
    1ca0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1cb0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1cbc:	00550001 	subseq	r0, r5, r1
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc8:	00005000 	andeq	r5, r0, r0
    1ccc:	00000000 	andeq	r0, r0, r0
    1cd0:	00010000 	andeq	r0, r1, r0
    1cd4:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1ce4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			switch (*fmt++) {
    1cf0:	00540001 	subseq	r0, r4, r1
    1cf4:	00000000 	andeq	r0, r0, r0
    1cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cfc:	00005100 	andeq	r5, r0, r0, lsl #2
    1d00:	00000000 	andeq	r0, r0, r0
    1d04:	00010000 	andeq	r0, r1, r0
		    	    case 'd': scani (lword); break;
    1d08:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1d18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d24:	00550001 	subseq	r0, r5, r1
	...
    1d34:	01000000 	mrseq	r0, (UNDEF: 0)
    1d38:	00005100 	andeq	r5, r0, r0, lsl #2
    1d3c:	00000000 	andeq	r0, r0, r0
    1d40:	00010000 	andeq	r0, r1, r0
    1d44:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1d54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d60:	00540001 	subseq	r0, r4, r1
		    	    case 'x': scanx (lword); break;
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	01000000 	mrseq	r0, (UNDEF: 0)
    1d6c:	00005100 	andeq	r5, r0, r0, lsl #2
    1d70:	00000000 	andeq	r0, r0, r0
    1d74:	00010000 	andeq	r0, r1, r0
    1d78:	00000050 	andeq	r0, r0, r0, asr r0
    1d7c:	00000000 	andeq	r0, r0, r0
    1d80:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1d8c:	00500001 	subseq	r0, r0, r1
    1d90:	00000000 	andeq	r0, r0, r0
    1d94:	01000000 	mrseq	r0, (UNDEF: 0)
    1d98:	00005000 	andeq	r5, r0, r0
	...
    1da8:	00010000 	andeq	r0, r1, r0
    1dac:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1dbc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dc8:	00540001 	subseq	r0, r4, r1
	...
		    	    case 'd': scani (lword); break;
    1dd8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ddc:	00005000 	andeq	r5, r0, r0
    1de0:	00000000 	andeq	r0, r0, r0
    1de4:	00010000 	andeq	r0, r1, r0
    1de8:	00000053 	andeq	r0, r0, r3, asr r0
	...
		    	    case 'u': scanu (lword); break;
    1df8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e04:	00500001 	subseq	r0, r0, r1
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e10:	00005000 	andeq	r5, r0, r0
	...
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00000052 	andeq	r0, r0, r2, asr r0
    1e28:	00000000 	andeq	r0, r0, r0
    1e2c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		    	    case 'x': scanx (lword); break;
    1e38:	00510001 	subseq	r0, r1, r1
	...
			sap = va_arg (ap, char*);
    1e48:	01000000 	mrseq	r0, (UNDEF: 0)
			nc++;
    1e4c:	00005000 	andeq	r5, r0, r0
	...
			while (isspace (*buf)) buf++;
    1e5c:	00010000 	andeq	r0, r1, r0
						*sap++ = *buf++;
    1e60:	00000051 	andeq	r0, r0, r1, asr r0
	...
			while (isspace (*buf)) buf++;
    1e70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    1e84:	00510001 	subseq	r0, r1, r1
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e90:	00005600 	andeq	r5, r0, r0, lsl #12
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	00010000 	andeq	r0, r1, r0
    1e9c:	00000051 	andeq	r0, r0, r1, asr r0
    1ea0:	00000000 	andeq	r0, r0, r0
    1ea4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1eb0:	00510001 	subseq	r0, r1, r1
    1eb4:	00000000 	andeq	r0, r0, r0
    1eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ebc:	00005600 	andeq	r5, r0, r0, lsl #12
    1ec0:	00000000 	andeq	r0, r0, r0
    1ec4:	00010000 	andeq	r0, r1, r0
    1ec8:	00000051 	andeq	r0, r0, r1, asr r0
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1ee4:	00520001 	subseq	r0, r2, r1
    1ee8:	00000000 	andeq	r0, r0, r0
    1eec:	01000000 	mrseq	r0, (UNDEF: 0)
    1ef0:	00005500 	andeq	r5, r0, r0, lsl #10
    1ef4:	00000000 	andeq	r0, r0, r0
    1ef8:	00010000 	andeq	r0, r1, r0
    1efc:	00000052 	andeq	r0, r0, r2, asr r0
    1f00:	00000000 	andeq	r0, r0, r0
    1f04:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1f10:	00520001 	subseq	r0, r2, r1
    1f14:	00000000 	andeq	r0, r0, r0
    1f18:	01000000 	mrseq	r0, (UNDEF: 0)
    1f1c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1f2c:	00010000 	andeq	r0, r1, r0
    1f30:	00000050 	andeq	r0, r0, r0, asr r0
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f44:	00540001 	subseq	r0, r4, r1
    1f48:	00000000 	andeq	r0, r0, r0
    1f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1f50:	00005000 	andeq	r5, r0, r0
	...
    1f60:	00010000 	andeq	r0, r1, r0
    1f64:	00000051 	andeq	r0, r0, r1, asr r0
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	00140800 	andseq	r0, r4, r0, lsl #16
    1f70:	00142100 	andseq	r2, r4, r0, lsl #2
    1f74:	52000100 	andpl	r0, r0, #0, 2
    1f78:	0000142c 	andeq	r1, r0, ip, lsr #8
    1f7c:	00001440 	andeq	r1, r0, r0, asr #8
    1f80:	00520001 	subseq	r0, r2, r1
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f8c:	21000014 	tstcs	r0, r4, lsl r0
    1f90:	01000014 	tsteq	r0, r4, lsl r0
    1f94:	14305300 	ldrtne	r5, [r0], #-768	; 0xfffffd00
    1f98:	14400000 	strbne	r0, [r0], #-0
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1fb0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1fbc:	00500001 	subseq	r0, r0, r1
	...
    1fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd0:	00005100 	andeq	r5, r0, r0, lsl #2
    1fd4:	00000000 	andeq	r0, r0, r0
    1fd8:	00010000 	andeq	r0, r1, r0
    1fdc:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1fec:	52000100 	andpl	r0, r0, #0, 2
	...
    1ff8:	00520001 	subseq	r0, r2, r1
	...
    2008:	01000000 	mrseq	r0, (UNDEF: 0)
    200c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    201c:	00010000 	andeq	r0, r1, r0
    2020:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2030:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    203c:	00030005 	andeq	r0, r3, r5
	...
    2048:	01000000 	mrseq	r0, (UNDEF: 0)
    204c:	00005000 	andeq	r5, r0, r0
    2050:	00000000 	andeq	r0, r0, r0
    2054:	00050000 	andeq	r0, r5, r0
    2058:	00000003 	andeq	r0, r0, r3
	...
    206c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2078:	00500001 	subseq	r0, r0, r1
    207c:	00000000 	andeq	r0, r0, r0
    2080:	01000000 	mrseq	r0, (UNDEF: 0)
    2084:	00005000 	andeq	r5, r0, r0
    2088:	00000000 	andeq	r0, r0, r0
    208c:	00010000 	andeq	r0, r1, r0
    2090:	00000050 	andeq	r0, r0, r0, asr r0
	...
    20a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    20b4:	00500001 	subseq	r0, r0, r1
	...
    20c4:	01000000 	mrseq	r0, (UNDEF: 0)
    20c8:	00005000 	andeq	r5, r0, r0
	...
    20d8:	00010000 	andeq	r0, r1, r0
    20dc:	00000051 	andeq	r0, r0, r1, asr r0
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    20f8:	00520001 	subseq	r0, r2, r1
	...
    2108:	01000000 	mrseq	r0, (UNDEF: 0)
    210c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    211c:	00010000 	andeq	r0, r1, r0
    2120:	00000054 	andeq	r0, r0, r4, asr r0
    2124:	00000000 	andeq	r0, r0, r0
    2128:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2134:	00540001 	subseq	r0, r4, r1
	...
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	00005000 	andeq	r5, r0, r0
    214c:	00000000 	andeq	r0, r0, r0
    2150:	00010000 	andeq	r0, r1, r0
    2154:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2164:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2170:	00560001 	subseq	r0, r6, r1
    2174:	00000000 	andeq	r0, r0, r0
    2178:	01000000 	mrseq	r0, (UNDEF: 0)
    217c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    218c:	00010000 	andeq	r0, r1, r0
    2190:	00000052 	andeq	r0, r0, r2, asr r0
    2194:	00000000 	andeq	r0, r0, r0
    2198:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    21ac:	00540001 	subseq	r0, r4, r1
	...
    21bc:	01000000 	mrseq	r0, (UNDEF: 0)
    21c0:	00005000 	andeq	r5, r0, r0
	...
    21d0:	00010000 	andeq	r0, r1, r0
    21d4:	00000050 	andeq	r0, r0, r0, asr r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    21e8:	00500001 	subseq	r0, r0, r1
	...
    21f8:	01000000 	mrseq	r0, (UNDEF: 0)
    21fc:	00005100 	andeq	r5, r0, r0, lsl #2
    2200:	00000000 	andeq	r0, r0, r0
    2204:	00010000 	andeq	r0, r1, r0
    2208:	00000056 	andeq	r0, r0, r6, asr r0
    220c:	00000000 	andeq	r0, r0, r0
    2210:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    221c:	00510001 	subseq	r0, r1, r1
	...
    222c:	01000000 	mrseq	r0, (UNDEF: 0)
    2230:	00005200 	andeq	r5, r0, r0, lsl #4
    2234:	00000000 	andeq	r0, r0, r0
    2238:	00010000 	andeq	r0, r1, r0
    223c:	00000052 	andeq	r0, r0, r2, asr r0
    2240:	00000000 	andeq	r0, r0, r0
    2244:	0014c400 	andseq	ip, r4, r0, lsl #8
    2248:	0014d400 	andseq	sp, r4, r0, lsl #8
    224c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2258:	000014c4 	andeq	r1, r0, r4, asr #9
    225c:	000014d4 	ldrdeq	r1, [r0], -r4
    2260:	00510001 	subseq	r0, r1, r1
    2264:	00000000 	andeq	r0, r0, r0
    2268:	e6000000 	str	r0, [r0], -r0
    226c:	ea000014 	b	22c4 <NOROM_SetupGetTrimForXoscHfCtl+0x8>
    2270:	01000014 	tsteq	r0, r4, lsl r0
    2274:	00005000 	andeq	r5, r0, r0
    2278:	00000000 	andeq	r0, r0, r0
    227c:	14ac0000 	strtne	r0, [ip], #0
    2280:	14b70000 	ldrtne	r0, [r7], #0
    2284:	00010000 	andeq	r0, r1, r0
    2288:	00000050 	andeq	r0, r0, r0, asr r0
    228c:	00000000 	andeq	r0, r0, r0
    2290:	00147c00 	andseq	r7, r4, r0, lsl #24
    2294:	00149800 	andseq	r9, r4, r0, lsl #16
    2298:	50000100 	andpl	r0, r0, r0, lsl #2
    229c:	000014a0 	andeq	r1, r0, r0, lsr #9
    22a0:	000014ac 	andeq	r1, r0, ip, lsr #9
    22a4:	00500001 	subseq	r0, r0, r1
    22a8:	00000000 	andeq	r0, r0, r0
    22ac:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    22b0:	5c000014 	stcpl	0, cr0, [r0], {20}
    22b4:	01000014 	tsteq	r0, r4, lsl r0
    22b8:	14605000 	strbtne	r5, [r0], #-0
    22bc:	147c0000 	ldrbtne	r0, [ip], #-0
    22c0:	00010000 	andeq	r0, r1, r0
    22c4:	00000050 	andeq	r0, r0, r0, asr r0
    22c8:	00000000 	andeq	r0, r0, r0
    22cc:	0015a400 	andseq	sl, r5, r0, lsl #8
    22d0:	0015b200 	andseq	fp, r5, r0, lsl #4
    22d4:	50000100 	andpl	r0, r0, r0, lsl #2
    22d8:	0000160e 	andeq	r1, r0, lr, lsl #12
    22dc:	0000161c 	andeq	r1, r0, ip, lsl r6
    22e0:	00500001 	subseq	r0, r0, r1
    22e4:	00000000 	andeq	r0, r0, r0
    22e8:	a4000000 	strge	r0, [r0], #-0
    22ec:	b9000015 	stmdblt	r0, {r0, r2, r4}
    22f0:	01000015 	tsteq	r0, r5, lsl r0
    22f4:	15b95100 	ldrne	r5, [r9, #256]!	; 0x100
    22f8:	15d80000 	ldrbne	r0, [r8]
    22fc:	00010000 	andeq	r0, r1, r0
    2300:	0015d857 	andseq	sp, r5, r7, asr r8
    2304:	0015e000 	andseq	lr, r5, r0
    2308:	51000100 	mrspl	r0, (UNDEF: 16)
    230c:	000015e0 	andeq	r1, r0, r0, ror #11
    2310:	00001606 	andeq	r1, r0, r6, lsl #12
    2314:	06570001 	ldrbeq	r0, [r7], -r1
    2318:	09000016 	stmdbeq	r0, {r1, r2, r4}
    231c:	01000016 	tsteq	r0, r6, lsl r0
    2320:	16095100 	strne	r5, [r9], -r0, lsl #2
    2324:	160e0000 	strne	r0, [lr], -r0
    2328:	00010000 	andeq	r0, r1, r0
    232c:	00160e57 	andseq	r0, r6, r7, asr lr
    2330:	00161c00 	andseq	r1, r6, r0, lsl #24
    2334:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2340:	000015a4 	andeq	r1, r0, r4, lsr #11
    2344:	000015b9 			; <UNDEFINED> instruction: 0x000015b9
    2348:	b9520001 	ldmdblt	r2, {r0}^
    234c:	d8000015 	stmdale	r0, {r0, r2, r4}
    2350:	01000015 	tsteq	r0, r5, lsl r0
    2354:	15d85500 	ldrbne	r5, [r8, #1280]	; 0x500
    2358:	15e00000 	strbne	r0, [r0, #0]!
    235c:	00010000 	andeq	r0, r1, r0
    2360:	0015e052 	andseq	lr, r5, r2, asr r0
    2364:	00160600 	andseq	r0, r6, r0, lsl #12
    2368:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    236c:	00001606 	andeq	r1, r0, r6, lsl #12
    2370:	00001609 	andeq	r1, r0, r9, lsl #12
    2374:	09520001 	ldmdbeq	r2, {r0}^
    2378:	0e000016 	mcreq	0, 0, r0, cr0, cr6, {0}
    237c:	01000016 	tsteq	r0, r6, lsl r0
    2380:	160e5500 	strne	r5, [lr], -r0, lsl #10
    2384:	161c0000 	ldrne	r0, [ip], -r0
    2388:	00010000 	andeq	r0, r1, r0
    238c:	00000052 	andeq	r0, r0, r2, asr r0
    2390:	00000000 	andeq	r0, r0, r0
    2394:	0015ba00 	andseq	fp, r5, r0, lsl #20
    2398:	0015c000 	andseq	ip, r5, r0
    239c:	50000100 	andpl	r0, r0, r0, lsl #2
    23a0:	000015c0 	andeq	r1, r0, r0, asr #11
    23a4:	000015c3 	andeq	r1, r0, r3, asr #11
    23a8:	c4510001 	ldrbgt	r0, [r1], #-1
    23ac:	c8000015 	stmdagt	r0, {r0, r2, r4}
    23b0:	01000015 	tsteq	r0, r5, lsl r0
    23b4:	15d05000 	ldrbne	r5, [r0]
    23b8:	15d50000 	ldrbne	r0, [r5]
    23bc:	00010000 	andeq	r0, r1, r0
    23c0:	0015e050 	andseq	lr, r5, r0, asr r0
    23c4:	00160200 	andseq	r0, r6, r0, lsl #4
    23c8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    23cc:	0000160c 	andeq	r1, r0, ip, lsl #12
    23d0:	0000160e 	andeq	r1, r0, lr, lsl #12
    23d4:	00500001 	subseq	r0, r0, r1
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	1c000000 	stcne	0, cr0, [r0], {-0}
    23e0:	24000016 	strcs	r0, [r0], #-22	; 0xffffffea
    23e4:	01000016 	tsteq	r0, r6, lsl r0
    23e8:	00005000 	andeq	r5, r0, r0
    23ec:	00000000 	andeq	r0, r0, r0
    23f0:	16280000 	strtne	r0, [r8], -r0
    23f4:	16310000 	ldrtne	r0, [r1], -r0
    23f8:	00010000 	andeq	r0, r1, r0
    23fc:	00163150 	andseq	r3, r6, r0, asr r1
    2400:	00163600 	andseq	r3, r6, r0, lsl #12
    2404:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2408:	00001636 	andeq	r1, r0, r6, lsr r6
    240c:	0000163f 	andeq	r1, r0, pc, lsr r6
    2410:	3f500001 	svccc	0x00500001
    2414:	66000016 			; <UNDEFINED> instruction: 0x66000016
    2418:	01000016 	tsteq	r0, r6, lsl r0
    241c:	16665600 	strbtne	r5, [r6], -r0, lsl #12
    2420:	16700000 	ldrbtne	r0, [r0], -r0
    2424:	00010000 	andeq	r0, r1, r0
    2428:	00000050 	andeq	r0, r0, r0, asr r0
    242c:	00000000 	andeq	r0, r0, r0
    2430:	00164000 	andseq	r4, r6, r0
    2434:	00164400 	andseq	r4, r6, r0, lsl #8
    2438:	50000100 	andpl	r0, r0, r0, lsl #2
    243c:	00001644 	andeq	r1, r0, r4, asr #12
    2440:	0000164c 	andeq	r1, r0, ip, asr #12
    2444:	4c550001 	mrrcmi	0, 0, r0, r5, cr1
    2448:	50000016 	andpl	r0, r0, r6, lsl r0
    244c:	01000016 	tsteq	r0, r6, lsl r0
    2450:	16505000 	ldrbne	r5, [r0], -r0
    2454:	16660000 	strbtne	r0, [r6], -r0
    2458:	00010000 	andeq	r0, r1, r0
    245c:	00000055 	andeq	r0, r0, r5, asr r0
    2460:	00000000 	andeq	r0, r0, r0
    2464:	00167000 	andseq	r7, r6, r0
    2468:	00167e00 	andseq	r7, r6, r0, lsl #28
    246c:	50000100 	andpl	r0, r0, r0, lsl #2
    2470:	000016c4 	andeq	r1, r0, r4, asr #13
    2474:	000016d0 	ldrdeq	r1, [r0], -r0
    2478:	00500001 	subseq	r0, r0, r1
    247c:	00000000 	andeq	r0, r0, r0
    2480:	86000000 	strhi	r0, [r0], -r0
    2484:	8c000016 	stchi	0, cr0, [r0], {22}
    2488:	01000016 	tsteq	r0, r6, lsl r0
    248c:	168c5000 	strne	r5, [ip], r0
    2490:	168f0000 	strne	r0, [pc], r0
    2494:	00010000 	andeq	r0, r1, r0
    2498:	00169051 	andseq	r9, r6, r1, asr r0
    249c:	00169400 	andseq	r9, r6, r0, lsl #8
    24a0:	50000100 	andpl	r0, r0, r0, lsl #2
    24a4:	0000169c 	muleq	r0, ip, r6
    24a8:	000016a1 	andeq	r1, r0, r1, lsr #13
    24ac:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    24b0:	b0000016 	andlt	r0, r0, r6, lsl r0
    24b4:	01000016 	tsteq	r0, r6, lsl r0
    24b8:	16b05000 	ldrtne	r5, [r0], r0
    24bc:	16b80000 	ldrtne	r0, [r8], r0
    24c0:	00010000 	andeq	r0, r1, r0
    24c4:	00000054 	andeq	r0, r0, r4, asr r0
    24c8:	00000000 	andeq	r0, r0, r0
    24cc:	0016d000 	andseq	sp, r6, r0
    24d0:	0016e700 	andseq	lr, r6, r0, lsl #14
    24d4:	50000100 	andpl	r0, r0, r0, lsl #2
    24d8:	000016e8 	andeq	r1, r0, r8, ror #13
    24dc:	000016f4 	strdeq	r1, [r0], -r4
    24e0:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    24e4:	40000017 	andmi	r0, r0, r7, lsl r0
    24e8:	01000017 	tsteq	r0, r7, lsl r0
    24ec:	00005000 	andeq	r5, r0, r0
    24f0:	00000000 	andeq	r0, r0, r0
    24f4:	16d80000 	ldrbne	r0, [r8], r0
    24f8:	16e40000 	strbtne	r0, [r4], r0
    24fc:	00010000 	andeq	r0, r1, r0
    2500:	0016e455 	andseq	lr, r6, r5, asr r4
    2504:	0016e700 	andseq	lr, r6, r0, lsl #14
    2508:	73000200 	movwvc	r0, #512	; 0x200
    250c:	0016e808 	andseq	lr, r6, r8, lsl #16
    2510:	00174000 	andseq	r4, r7, r0
    2514:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2520:	0000170e 	andeq	r1, r0, lr, lsl #14
    2524:	00001720 	andeq	r1, r0, r0, lsr #14
    2528:	00500001 	subseq	r0, r0, r1
    252c:	00000000 	andeq	r0, r0, r0
    2530:	40000000 	andmi	r0, r0, r0
    2534:	5c000017 	stcpl	0, cr0, [r0], {23}
    2538:	01000017 	tsteq	r0, r7, lsl r0
    253c:	18425000 	stmdane	r2, {ip, lr}^
    2540:	184b0000 	stmdane	fp, {}^	; <UNPREDICTABLE>
    2544:	00010000 	andeq	r0, r1, r0
    2548:	00000050 	andeq	r0, r0, r0, asr r0
    254c:	00000000 	andeq	r0, r0, r0
    2550:	00174800 	andseq	r4, r7, r0, lsl #16
    2554:	00176a00 	andseq	r6, r7, r0, lsl #20
    2558:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    255c:	0000176a 	andeq	r1, r0, sl, ror #14
    2560:	00001771 	andeq	r1, r0, r1, ror r7
    2564:	71500001 	cmpvc	r0, r1
    2568:	76000017 			; <UNDEFINED> instruction: 0x76000017
    256c:	01000017 	tsteq	r0, r7, lsl r0
    2570:	17765400 	ldrbne	r5, [r6, -r0, lsl #8]!
    2574:	17800000 	strne	r0, [r0, r0]
    2578:	00010000 	andeq	r0, r1, r0
    257c:	00178050 	andseq	r8, r7, r0, asr r0
    2580:	00183e00 	andseq	r3, r8, r0, lsl #28
    2584:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2588:	00001842 	andeq	r1, r0, r2, asr #16
    258c:	00001848 	andeq	r1, r0, r8, asr #16
    2590:	48540001 	ldmdami	r4, {r0}^
    2594:	4b000018 	blmi	25fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x118>
    2598:	02000018 	andeq	r0, r0, #24
    259c:	00087200 	andeq	r7, r8, r0, lsl #4
    25a0:	00000000 	andeq	r0, r0, r0
    25a4:	22000000 	andcs	r0, r0, #0
    25a8:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
    25ac:	01000018 	tsteq	r0, r8, lsl r0
    25b0:	18245000 	stmdane	r4!, {ip, lr}
    25b4:	183e0000 	ldmdane	lr!, {}	; <UNPREDICTABLE>
    25b8:	00010000 	andeq	r0, r1, r0
    25bc:	00000056 	andeq	r0, r0, r6, asr r0
    25c0:	00000000 	andeq	r0, r0, r0
    25c4:	001aac00 	andseq	sl, sl, r0, lsl #24
    25c8:	001ac300 	andseq	ip, sl, r0, lsl #6
    25cc:	50000100 	andpl	r0, r0, r0, lsl #2
    25d0:	00001ac3 	andeq	r1, r0, r3, asr #21
    25d4:	00001aca 	andeq	r1, r0, sl, asr #21
    25d8:	ca540001 	bgt	15025e4 <__ccfg+0x14e263c>
    25dc:	cc00001a 	stcgt	0, cr0, [r0], {26}
    25e0:	0100001a 	tsteq	r0, sl, lsl r0
    25e4:	1acc5000 	bne	ff3165ec <_estack+0xdf3115ec>
    25e8:	1adc0000 	bne	ff7025f0 <_estack+0xdf6fd5f0>
    25ec:	00010000 	andeq	r0, r1, r0
    25f0:	001adc54 	andseq	sp, sl, r4, asr ip
    25f4:	001aeb00 	andseq	lr, sl, r0, lsl #22
    25f8:	50000100 	andpl	r0, r0, r0, lsl #2
    25fc:	00001aeb 	andeq	r1, r0, fp, ror #21
    2600:	00001afc 	strdeq	r1, [r0], -ip
    2604:	00540001 	subseq	r0, r4, r1
    2608:	00000000 	andeq	r0, r0, r0
    260c:	ac000000 	stcge	0, cr0, [r0], {-0}
    2610:	c000001a 	andgt	r0, r0, sl, lsl r0
    2614:	0100001a 	tsteq	r0, sl, lsl r0
    2618:	1ac05100 	bne	ff016a20 <_estack+0xdf011a20>
    261c:	1ac30000 	bne	ff0c2624 <_estack+0xdf0bd624>
    2620:	00010000 	andeq	r0, r1, r0
    2624:	001ac352 	andseq	ip, sl, r2, asr r3
    2628:	001aca00 	andseq	ip, sl, r0, lsl #20
    262c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2630:	00001aca 	andeq	r1, r0, sl, asr #21
    2634:	00001acf 	andeq	r1, r0, pc, asr #21
    2638:	cf510001 	svcgt	0x00510001
    263c:	fc00001a 	stc2	0, cr0, [r0], {26}
    2640:	0100001a 	tsteq	r0, sl, lsl r0
    2644:	00005600 	andeq	r5, r0, r0, lsl #12
    2648:	00000000 	andeq	r0, r0, r0
    264c:	1aac0000 	bne	feb02654 <_estack+0xdeafd654>
    2650:	1ab40000 	bne	fed02658 <_estack+0xdecfd658>
    2654:	00010000 	andeq	r0, r1, r0
    2658:	001ab852 	andseq	fp, sl, r2, asr r8
    265c:	001abc00 	andseq	fp, sl, r0, lsl #24
    2660:	52000100 	andpl	r0, r0, #0, 2
    2664:	00001ac4 	andeq	r1, r0, r4, asr #21
    2668:	00001aca 	andeq	r1, r0, sl, asr #21
    266c:	d6570001 	ldrble	r0, [r7], -r1
    2670:	fc00001a 	stc2	0, cr0, [r0], {26}
    2674:	0100001a 	tsteq	r0, sl, lsl r0
    2678:	00005700 	andeq	r5, r0, r0, lsl #14
    267c:	00000000 	andeq	r0, r0, r0
    2680:	1ad60000 	bne	ff582688 <_estack+0xdf57d688>
    2684:	1af80000 	bne	ffe0268c <_estack+0xdfdfd68c>
    2688:	00010000 	andeq	r0, r1, r0
    268c:	001af855 	andseq	pc, sl, r5, asr r8	; <UNPREDICTABLE>
    2690:	001afc00 	andseq	pc, sl, r0, lsl #24
    2694:	58000100 	stmdapl	r0, {r8}
	...
    26a0:	00001af0 	strdeq	r1, [r0], -r0
    26a4:	00001af4 	strdeq	r1, [r0], -r4
    26a8:	00500001 	subseq	r0, r0, r1
    26ac:	00000000 	andeq	r0, r0, r0
    26b0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    26b4:	96000018 			; <UNDEFINED> instruction: 0x96000018
    26b8:	01000018 	tsteq	r0, r8, lsl r0
    26bc:	00005000 	andeq	r5, r0, r0
    26c0:	00000000 	andeq	r0, r0, r0
    26c4:	187c0000 	ldmdane	ip!, {}^	; <UNPREDICTABLE>
    26c8:	18960000 	ldmne	r6, {}	; <UNPREDICTABLE>
    26cc:	00010000 	andeq	r0, r1, r0
    26d0:	00000051 	andeq	r0, r0, r1, asr r0
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	00187c00 	andseq	r7, r8, r0, lsl #24
    26dc:	00189600 	andseq	r9, r8, r0, lsl #12
    26e0:	52000100 	andpl	r0, r0, #0, 2
    26e4:	000018a6 	andeq	r1, r0, r6, lsr #17
    26e8:	000018d2 	ldrdeq	r1, [r0], -r2
    26ec:	e0550001 	subs	r0, r5, r1
    26f0:	9e000018 	mcrls	0, 0, r0, cr0, cr8, {0}
    26f4:	0100001a 	tsteq	r0, sl, lsl r0
    26f8:	00005500 	andeq	r5, r0, r0, lsl #10
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	187c0000 	ldmdane	ip!, {}^	; <UNPREDICTABLE>
    2704:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
    2708:	00010000 	andeq	r0, r1, r0
    270c:	00188253 	andseq	r8, r8, r3, asr r2
    2710:	00188400 	andseq	r8, r8, r0, lsl #8
    2714:	53000300 	movwpl	r0, #768	; 0x300
    2718:	18840493 	stmne	r4, {r0, r1, r4, r7, sl}
    271c:	18ce0000 	stmiane	lr, {}^	; <UNPREDICTABLE>
    2720:	00030000 	andeq	r0, r3, r0
    2724:	ce049354 	mcrgt	3, 0, r9, cr4, cr4, {2}
    2728:	22000018 	andcs	r0, r0, #24
    272c:	03000019 	movweq	r0, #25
    2730:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2734:	00001922 	andeq	r1, r0, r2, lsr #18
    2738:	0000192e 	andeq	r1, r0, lr, lsr #18
    273c:	93540003 	cmpls	r4, #3
    2740:	00193604 	andseq	r3, r9, r4, lsl #12
    2744:	00195800 	andseq	r5, r9, r0, lsl #16
    2748:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    274c:	195c0493 	ldmdbne	ip, {r0, r1, r4, r7, sl}^
    2750:	19d60000 	ldmibne	r6, {}^	; <UNPREDICTABLE>
    2754:	00030000 	andeq	r0, r3, r0
    2758:	dc049354 	stcle	3, cr9, [r4], {84}	; 0x54
    275c:	f0000019 			; <UNDEFINED> instruction: 0xf0000019
    2760:	03000019 	movweq	r0, #25
    2764:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2768:	00001a36 	andeq	r1, r0, r6, lsr sl
    276c:	00001a42 	andeq	r1, r0, r2, asr #20
    2770:	93540003 	cmpls	r4, #3
    2774:	001a6404 	andseq	r6, sl, r4, lsl #8
    2778:	001a7600 	andseq	r7, sl, r0, lsl #12
    277c:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2780:	1a7a0493 	bne	1e839d4 <__ccfg+0x1e63a2c>
    2784:	1a820000 	bne	fe08278c <_estack+0xde07d78c>
    2788:	00030000 	andeq	r0, r3, r0
    278c:	86049354 			; <UNDEFINED> instruction: 0x86049354
    2790:	ac00001a 	stcge	0, cr0, [r0], {26}
    2794:	0300001a 	movweq	r0, #26
    2798:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	...
    27a4:	0000189a 	muleq	r0, sl, r8
    27a8:	000018a4 	andeq	r1, r0, r4, lsr #17
    27ac:	a4590001 	ldrbge	r0, [r9], #-1
    27b0:	a6000018 			; <UNDEFINED> instruction: 0xa6000018
    27b4:	02000018 	andeq	r0, r0, #24
    27b8:	a6007200 	strge	r7, [r0], -r0, lsl #4
    27bc:	ca000018 	bgt	2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>
    27c0:	01000018 	tsteq	r0, r8, lsl r0
    27c4:	18d25900 	ldmne	r2, {r8, fp, ip, lr}^
    27c8:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    27cc:	00010000 	andeq	r0, r1, r0
    27d0:	0018e059 	andseq	lr, r8, r9, asr r0
    27d4:	00191800 	andseq	r1, r9, r0, lsl #16
    27d8:	58000100 	stmdapl	r0, {r8}
    27dc:	00001922 	andeq	r1, r0, r2, lsr #18
    27e0:	00001932 	andeq	r1, r0, r2, lsr r9
    27e4:	32580001 	subscc	r0, r8, #1
    27e8:	3a000019 	bcc	2854 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
    27ec:	02000019 	andeq	r0, r0, #25
    27f0:	58017200 	stmdapl	r1, {r9, ip, sp, lr}
    27f4:	82000019 	andhi	r0, r0, #25
    27f8:	01000019 	tsteq	r0, r9, lsl r0
    27fc:	19865800 	stmibne	r6, {fp, ip, lr}
    2800:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    2804:	00010000 	andeq	r0, r1, r0
    2808:	00199450 	andseq	r9, r9, r0, asr r4
    280c:	00199e00 	andseq	r9, r9, r0, lsl #28
    2810:	50000100 	andpl	r0, r0, r0, lsl #2
    2814:	000019be 			; <UNDEFINED> instruction: 0x000019be
    2818:	000019c0 	andeq	r1, r0, r0, asr #19
    281c:	c6500001 	ldrbgt	r0, [r0], -r1
    2820:	c8000019 	stmdagt	r0, {r0, r3, r4}
    2824:	01000019 	tsteq	r0, r9, lsl r0
    2828:	19c85800 	stmibne	r8, {fp, ip, lr}^
    282c:	19eb0000 	stmibne	fp!, {}^	; <UNPREDICTABLE>
    2830:	00010000 	andeq	r0, r1, r0
    2834:	0019fa53 	andseq	pc, r9, r3, asr sl	; <UNPREDICTABLE>
    2838:	0019fe00 	andseq	pc, r9, r0, lsl #28
    283c:	59000100 	stmdbpl	r0, {r8}
    2840:	00001a08 	andeq	r1, r0, r8, lsl #20
    2844:	00001a28 	andeq	r1, r0, r8, lsr #20
    2848:	2e590001 	cdpcs	0, 5, cr0, cr9, cr1, {0}
    284c:	3000001a 	andcc	r0, r0, sl, lsl r0
    2850:	0100001a 	tsteq	r0, sl, lsl r0
    2854:	1a365900 	bne	d98c5c <__ccfg+0xd78cb4>
    2858:	1a440000 	bne	1102860 <__ccfg+0x10e28b8>
    285c:	00010000 	andeq	r0, r1, r0
    2860:	001a6453 	andseq	r6, sl, r3, asr r4
    2864:	001a6d00 	andseq	r6, sl, r0, lsl #26
    2868:	53000100 	movwpl	r0, #256	; 0x100
    286c:	00001a76 	andeq	r1, r0, r6, ror sl
    2870:	00001a8a 	andeq	r1, r0, sl, lsl #21
    2874:	9e580001 	cdpls	0, 5, cr0, cr8, cr1, {0}
    2878:	ac00001a 	stcge	0, cr0, [r0], {26}
    287c:	0100001a 	tsteq	r0, sl, lsl r0
    2880:	00005900 	andeq	r5, r0, r0, lsl #18
    2884:	00000000 	andeq	r0, r0, r0
    2888:	193a0000 	ldmdbne	sl!, {}	; <UNPREDICTABLE>
    288c:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    2890:	00010000 	andeq	r0, r1, r0
    2894:	00000058 	andeq	r0, r0, r8, asr r0
    2898:	00000000 	andeq	r0, r0, r0
    289c:	00196400 	andseq	r6, r9, r0, lsl #8
    28a0:	00197800 	andseq	r7, r9, r0, lsl #16
    28a4:	59000100 	stmdbpl	r0, {r8}
    28a8:	0000197c 	andeq	r1, r0, ip, ror r9
    28ac:	000019aa 	andeq	r1, r0, sl, lsr #19
    28b0:	b2590001 	subslt	r0, r9, #1
    28b4:	c6000019 			; <UNDEFINED> instruction: 0xc6000019
    28b8:	01000019 	tsteq	r0, r9, lsl r0
    28bc:	00005900 	andeq	r5, r0, r0, lsl #18
    28c0:	00000000 	andeq	r0, r0, r0
    28c4:	19820000 	stmibne	r2, {}	; <UNPREDICTABLE>
    28c8:	19b40000 	ldmibne	r4!, {}	; <UNPREDICTABLE>
    28cc:	00010000 	andeq	r0, r1, r0
    28d0:	0019b458 	andseq	fp, r9, r8, asr r4
    28d4:	0019c000 	andseq	ip, r9, r0
    28d8:	53000100 	movwpl	r0, #256	; 0x100
    28dc:	000019c0 	andeq	r1, r0, r0, asr #19
    28e0:	000019c6 	andeq	r1, r0, r6, asr #19
    28e4:	00580001 	subseq	r0, r8, r1
    28e8:	00000000 	andeq	r0, r0, r0
    28ec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    28f0:	36000019 			; <UNDEFINED> instruction: 0x36000019
    28f4:	0100001a 	tsteq	r0, sl, lsl r0
    28f8:	00005a00 	andeq	r5, r0, r0, lsl #20
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	19f60000 	ldmibne	r6!, {}^	; <UNPREDICTABLE>
    2904:	1a200000 	bne	80290c <__ccfg+0x7e2964>
    2908:	00010000 	andeq	r0, r1, r0
    290c:	001a2058 	andseq	r2, sl, r8, asr r0
    2910:	001a3000 	andseq	r3, sl, r0
    2914:	53000100 	movwpl	r0, #256	; 0x100
    2918:	00001a30 	andeq	r1, r0, r0, lsr sl
    291c:	00001a36 	andeq	r1, r0, r6, lsr sl
    2920:	00580001 	subseq	r0, r8, r1
    2924:	00000000 	andeq	r0, r0, r0
    2928:	44000000 	strmi	r0, [r0], #-0
    292c:	6400001a 	strvs	r0, [r0], #-26	; 0xffffffe6
    2930:	0100001a 	tsteq	r0, sl, lsl r0
    2934:	00005800 	andeq	r5, r0, r0, lsl #16
    2938:	00000000 	andeq	r0, r0, r0
    293c:	1a760000 	bne	1d82944 <__ccfg+0x1d6299c>
    2940:	1a7a0000 	bne	1e82948 <__ccfg+0x1e629a0>
    2944:	00020000 	andeq	r0, r2, r0
    2948:	1a7a0074 	bne	1e82b20 <__ccfg+0x1e62b78>
    294c:	1a820000 	bne	fe082954 <_estack+0xde07d954>
    2950:	00020000 	andeq	r0, r2, r0
    2954:	00007c74 	andeq	r7, r0, r4, ror ip
    2958:	00000000 	andeq	r0, r0, r0
    295c:	1a8e0000 	bne	fe382964 <_estack+0xde37d964>
    2960:	1a9c0000 	bne	fe702968 <_estack+0xde6fd968>
    2964:	00010000 	andeq	r0, r1, r0
    2968:	00000058 	andeq	r0, r0, r8, asr r0
    296c:	00000000 	andeq	r0, r0, r0
    2970:	001afc00 	andseq	pc, sl, r0, lsl #24
    2974:	001b1800 	andseq	r1, fp, r0, lsl #16
    2978:	50000100 	andpl	r0, r0, r0, lsl #2
    297c:	00001b56 	andeq	r1, r0, r6, asr fp
    2980:	00001b68 	andeq	r1, r0, r8, ror #22
    2984:	68530001 	ldmdavs	r3, {r0}^
    2988:	7c00001b 	stcvc	0, cr0, [r0], {27}
    298c:	0100001b 	tsteq	r0, fp, lsl r0
    2990:	1b7e5600 	blne	1f98198 <__ccfg+0x1f781f0>
    2994:	1b9a0000 	blne	fe68299c <_estack+0xde67d99c>
    2998:	00010000 	andeq	r0, r1, r0
    299c:	001bac56 	andseq	sl, fp, r6, asr ip
    29a0:	001bb800 	andseq	fp, fp, r0, lsl #16
    29a4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    29a8:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
    29ac:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    29b0:	c4530001 	ldrbgt	r0, [r3], #-1
    29b4:	c800001b 	stmdagt	r0, {r0, r1, r3, r4}
    29b8:	0100001b 	tsteq	r0, fp, lsl r0
    29bc:	1bc85300 	blne	ff2175c4 <_estack+0xdf2125c4>
    29c0:	1bd80000 	blne	ff6029c8 <_estack+0xdf5fd9c8>
    29c4:	00010000 	andeq	r0, r1, r0
    29c8:	001bd85e 	andseq	sp, fp, lr, asr r8
    29cc:	001bee00 	andseq	lr, fp, r0, lsl #28
    29d0:	53000100 	movwpl	r0, #256	; 0x100
    29d4:	00001bee 	andeq	r1, r0, lr, ror #23
    29d8:	00001bf6 	strdeq	r1, [r0], -r6
    29dc:	fc5e0001 	mrrc2	0, 0, r0, lr, cr1
    29e0:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    29e4:	0100001c 	tsteq	r0, ip, lsl r0
    29e8:	1c185300 	ldcne	3, cr5, [r8], {-0}
    29ec:	1c1e0000 	ldcne	0, cr0, [lr], {-0}
    29f0:	00010000 	andeq	r0, r1, r0
    29f4:	001c1e5e 	andseq	r1, ip, lr, asr lr
    29f8:	001c2000 	andseq	r2, ip, r0
    29fc:	53000100 	movwpl	r0, #256	; 0x100
    2a00:	00001c2c 	andeq	r1, r0, ip, lsr #24
    2a04:	00001c2e 	andeq	r1, r0, lr, lsr #24
    2a08:	2e5e0001 	cdpcs	0, 5, cr0, cr14, cr1, {0}
    2a0c:	4200001c 	andmi	r0, r0, #28
    2a10:	0100001c 	tsteq	r0, ip, lsl r0
    2a14:	1c425300 	mcrrne	3, 0, r5, r2, cr0
    2a18:	1c520000 	mrane	r0, r2, acc0
    2a1c:	00010000 	andeq	r0, r1, r0
    2a20:	001c5256 	andseq	r5, ip, r6, asr r2
    2a24:	001c6600 	andseq	r6, ip, r0, lsl #12
    2a28:	53000100 	movwpl	r0, #256	; 0x100
    2a2c:	00001c74 	andeq	r1, r0, r4, ror ip
    2a30:	00001c76 	andeq	r1, r0, r6, ror ip
    2a34:	76560001 	ldrbvc	r0, [r6], -r1
    2a38:	8e00001c 	mcrhi	0, 0, r0, cr0, cr12, {0}
    2a3c:	0100001c 	tsteq	r0, ip, lsl r0
    2a40:	1c8e5300 	stcne	3, cr5, [lr], {0}
    2a44:	1ca80000 	stcne	0, cr0, [r8]
    2a48:	00010000 	andeq	r0, r1, r0
    2a4c:	001cae56 	andseq	sl, ip, r6, asr lr
    2a50:	001cd000 	andseq	sp, ip, r0
    2a54:	53000100 	movwpl	r0, #256	; 0x100
    2a58:	00001cd0 	ldrdeq	r1, [r0], -r0
    2a5c:	00001ce2 	andeq	r1, r0, r2, ror #25
    2a60:	08560001 	ldmdaeq	r6, {r0}^
    2a64:	0c00001d 	stceq	0, cr0, [r0], {29}
    2a68:	0100001d 	tsteq	r0, sp, lsl r0
    2a6c:	1d0c5300 	stcne	3, cr5, [ip, #-0]
    2a70:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    2a74:	00010000 	andeq	r0, r1, r0
    2a78:	001d1c58 	andseq	r1, sp, r8, asr ip
    2a7c:	001d2c00 	andseq	r2, sp, r0, lsl #24
    2a80:	53000100 	movwpl	r0, #256	; 0x100
    2a84:	00001d2c 	andeq	r1, r0, ip, lsr #26
    2a88:	00001d36 	andeq	r1, r0, r6, lsr sp
    2a8c:	3c580001 	mrrccc	0, 0, r0, r8, cr1
    2a90:	5e00001d 	mcrpl	0, 0, r0, cr0, cr13, {0}
    2a94:	0100001d 	tsteq	r0, sp, lsl r0
    2a98:	1d645300 	stclne	3, cr5, [r4, #-0]
    2a9c:	1d740000 	ldclne	0, cr0, [r4, #-0]
    2aa0:	00010000 	andeq	r0, r1, r0
    2aa4:	001d7453 	andseq	r7, sp, r3, asr r4
    2aa8:	001d8e00 	andseq	r8, sp, r0, lsl #28
    2aac:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2ab0:	00001d94 	muleq	r0, r4, sp
    2ab4:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
    2ab8:	b4530001 	ldrblt	r0, [r3], #-1
    2abc:	c600001d 			; <UNDEFINED> instruction: 0xc600001d
    2ac0:	0100001d 	tsteq	r0, sp, lsl r0
    2ac4:	1dda5600 	ldclne	6, cr5, [sl]
    2ac8:	1dde0000 	ldclne	0, cr0, [lr]
    2acc:	00010000 	andeq	r0, r1, r0
    2ad0:	001dde58 	andseq	sp, sp, r8, asr lr
    2ad4:	001de200 	andseq	lr, sp, r0, lsl #4
    2ad8:	53000100 	movwpl	r0, #256	; 0x100
    2adc:	00001dec 	andeq	r1, r0, ip, ror #27
    2ae0:	00001dee 	andeq	r1, r0, lr, ror #27
    2ae4:	ee580001 	cdp	0, 5, cr0, cr8, cr1, {0}
    2ae8:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    2aec:	0100001e 	tsteq	r0, lr, lsl r0
    2af0:	1e045300 	cdpne	3, 0, cr5, cr4, cr0, {0}
    2af4:	1e140000 	cdpne	0, 1, cr0, cr4, cr0, {0}
    2af8:	00010000 	andeq	r0, r1, r0
    2afc:	001e1456 	andseq	r1, lr, r6, asr r4
    2b00:	001e2a00 	andseq	r2, lr, r0, lsl #20
    2b04:	53000100 	movwpl	r0, #256	; 0x100
    2b08:	00001e34 	andeq	r1, r0, r4, lsr lr
    2b0c:	00001e36 	andeq	r1, r0, r6, lsr lr
    2b10:	36560001 	ldrbcc	r0, [r6], -r1
    2b14:	3e00001e 	mcrcc	0, 0, r0, cr0, cr14, {0}
    2b18:	0100001e 	tsteq	r0, lr, lsl r0
    2b1c:	1e425300 	cdpne	3, 4, cr5, cr2, cr0, {0}
    2b20:	1e520000 	cdpne	0, 5, cr0, cr2, cr0, {0}
    2b24:	00010000 	andeq	r0, r1, r0
    2b28:	001e5253 	andseq	r5, lr, r3, asr r2
    2b2c:	001e6000 	andseq	r6, lr, r0
    2b30:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2b34:	00001e60 	andeq	r1, r0, r0, ror #28
    2b38:	00001e66 	andeq	r1, r0, r6, ror #28
    2b3c:	66580001 	ldrbvs	r0, [r8], -r1
    2b40:	7200001e 	andvc	r0, r0, #30
    2b44:	0100001e 	tsteq	r0, lr, lsl r0
    2b48:	1e725600 	cdpne	6, 7, cr5, cr2, cr0, {0}
    2b4c:	1e7a0000 	cdpne	0, 7, cr0, cr10, cr0, {0}
    2b50:	00010000 	andeq	r0, r1, r0
    2b54:	001e7a50 	andseq	r7, lr, r0, asr sl
    2b58:	001e8c00 	andseq	r8, lr, r0, lsl #24
    2b5c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2b68:	00001afc 	strdeq	r1, [r0], -ip
    2b6c:	00001b1a 	andeq	r1, r0, sl, lsl fp
    2b70:	1a510001 	bne	1442b7c <__ccfg+0x1422bd4>
    2b74:	2000001b 	andcs	r0, r0, fp, lsl r0
    2b78:	0100001b 	tsteq	r0, fp, lsl r0
    2b7c:	1b205600 	blne	818384 <__ccfg+0x7f83dc>
    2b80:	1b3e0000 	blne	f82b88 <__ccfg+0xf62be0>
    2b84:	00010000 	andeq	r0, r1, r0
    2b88:	001b4451 	andseq	r4, fp, r1, asr r4
    2b8c:	001e8c00 	andseq	r8, lr, r0, lsl #24
    2b90:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2b9c:	00001afc 	strdeq	r1, [r0], -ip
    2ba0:	00001afc 	strdeq	r1, [r0], -ip
    2ba4:	fc520001 	mrrc2	0, 0, r0, r2, cr1
    2ba8:	1800001a 	stmdane	r0, {r1, r3, r4}
    2bac:	0300001b 	movweq	r0, #27
    2bb0:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2bb4:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    2bb8:	00001bf2 	strdeq	r1, [r0], -r2
    2bbc:	18520001 	ldmdane	r2, {r0}^
    2bc0:	1e00001c 	mcrne	0, 0, r0, cr0, cr12, {0}
    2bc4:	0100001c 	tsteq	r0, ip, lsl r0
    2bc8:	1c2e5200 	sfmne	f5, 4, [lr], #-0
    2bcc:	1c480000 	marne	acc0, r0, r8
    2bd0:	00010000 	andeq	r0, r1, r0
    2bd4:	001c7652 	andseq	r7, ip, r2, asr r6
    2bd8:	001c9e00 	andseq	r9, ip, r0, lsl #28
    2bdc:	52000100 	andpl	r0, r0, #0, 2
    2be0:	00001cf0 	strdeq	r1, [r0], -r0
    2be4:	00001d30 	andeq	r1, r0, r0, lsr sp
    2be8:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    2bec:	8400001d 	strhi	r0, [r0], #-29	; 0xffffffe3
    2bf0:	0100001d 	tsteq	r0, sp, lsl r0
    2bf4:	1dd45200 	lfmne	f5, 2, [r4]
    2bf8:	1dde0000 	ldclne	0, cr0, [lr]
    2bfc:	00010000 	andeq	r0, r1, r0
    2c00:	001dee52 	andseq	lr, sp, r2, asr lr
    2c04:	001e0a00 	andseq	r0, lr, r0, lsl #20
    2c08:	52000100 	andpl	r0, r0, #0, 2
    2c0c:	00001e36 	andeq	r1, r0, r6, lsr lr
    2c10:	00001e4c 	andeq	r1, r0, ip, asr #28
    2c14:	52520001 	subspl	r0, r2, #1
    2c18:	6000001e 	andvs	r0, r0, lr, lsl r0
    2c1c:	0100001e 	tsteq	r0, lr, lsl r0
    2c20:	1e725200 	cdpne	2, 7, cr5, cr2, cr0, {0}
    2c24:	1e7a0000 	cdpne	0, 7, cr0, cr10, cr0, {0}
    2c28:	00010000 	andeq	r0, r1, r0
    2c2c:	00000052 	andeq	r0, r0, r2, asr r0
    2c30:	00000000 	andeq	r0, r0, r0
    2c34:	001b7a00 	andseq	r7, fp, r0, lsl #20
    2c38:	001b7c00 	andseq	r7, fp, r0, lsl #24
    2c3c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c40:	00001bf4 	strdeq	r1, [r0], -r4
    2c44:	00001c18 	andeq	r1, r0, r8, lsl ip
    2c48:	1e540001 	cdpne	0, 5, cr0, cr4, cr1, {0}
    2c4c:	2e00001c 	mcrcs	0, 0, r0, cr0, cr12, {0}
    2c50:	0100001c 	tsteq	r0, ip, lsl r0
    2c54:	1c4a5400 	cfstrdne	mvd5, [sl], {-0}
    2c58:	1c760000 	ldclne	0, cr0, [r6], #-0
    2c5c:	00010000 	andeq	r0, r1, r0
    2c60:	001ca054 	andseq	sl, ip, r4, asr r0
    2c64:	001cf000 	andseq	pc, ip, r0
    2c68:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c6c:	00001d32 	andeq	r1, r0, r2, lsr sp
    2c70:	00001d5e 	andeq	r1, r0, lr, asr sp
    2c74:	86540001 	ldrbhi	r0, [r4], -r1
    2c78:	d400001d 	strle	r0, [r0], #-29	; 0xffffffe3
    2c7c:	0100001d 	tsteq	r0, sp, lsl r0
    2c80:	1dde5400 	cfldrdne	mvd5, [lr]
    2c84:	1dee0000 	stclne	0, cr0, [lr]
    2c88:	00010000 	andeq	r0, r1, r0
    2c8c:	001e0c54 	andseq	r0, lr, r4, asr ip
    2c90:	001e3600 	andseq	r3, lr, r0, lsl #12
    2c94:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c98:	00001e4e 	andeq	r1, r0, lr, asr #28
    2c9c:	00001e52 	andeq	r1, r0, r2, asr lr
    2ca0:	7a540001 	bvc	1502cac <__ccfg+0x14e2d04>
    2ca4:	8c00001e 	stchi	0, cr0, [r0], {30}
    2ca8:	0100001e 	tsteq	r0, lr, lsl r0
    2cac:	00005400 	andeq	r5, r0, r0, lsl #8
    2cb0:	00000000 	andeq	r0, r0, r0
    2cb4:	1bee0000 	blne	ffb82cbc <_estack+0xdfb7dcbc>
    2cb8:	1c180000 	ldcne	0, cr0, [r8], {-0}
    2cbc:	00010000 	andeq	r0, r1, r0
    2cc0:	001c1e58 	andseq	r1, ip, r8, asr lr
    2cc4:	001c2e00 	andseq	r2, ip, r0, lsl #28
    2cc8:	58000100 	stmdapl	r0, {r8}
	...
    2cd4:	00001cd0 	ldrdeq	r1, [r0], -r0
    2cd8:	00001ce2 	andeq	r1, r0, r2, ror #25
    2cdc:	e2590001 	subs	r0, r9, #1
    2ce0:	ea00001c 	b	2d58 <__exidx_end+0xd4>
    2ce4:	0100001c 	tsteq	r0, ip, lsl r0
    2ce8:	00005000 	andeq	r5, r0, r0
    2cec:	00000000 	andeq	r0, r0, r0
    2cf0:	1d2c0000 	stcne	0, cr0, [ip, #-0]
    2cf4:	1d560000 	ldclne	0, cr0, [r6, #-0]
    2cf8:	00010000 	andeq	r0, r1, r0
    2cfc:	001dde50 	andseq	sp, sp, r0, asr lr
    2d00:	001dee00 	andseq	lr, sp, r0, lsl #28
    2d04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2d10:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
    2d14:	00001dc6 	andeq	r1, r0, r6, asr #27
    2d18:	c6590001 	ldrbgt	r0, [r9], -r1
    2d1c:	ce00001d 	mcrgt	0, 0, r0, cr0, cr13, {0}
    2d20:	0100001d 	tsteq	r0, sp, lsl r0
    2d24:	00005000 	andeq	r5, r0, r0
    2d28:	00000000 	andeq	r0, r0, r0
    2d2c:	1e420000 	cdpne	0, 4, cr0, cr2, cr0, {0}
    2d30:	1e520000 	cdpne	0, 5, cr0, cr2, cr0, {0}
    2d34:	00010000 	andeq	r0, r1, r0
    2d38:	00000050 	andeq	r0, r0, r0, asr r0
    2d3c:	00000000 	andeq	r0, r0, r0
    2d40:	001b7e00 	andseq	r7, fp, r0, lsl #28
    2d44:	001b9a00 	andseq	r9, fp, r0, lsl #20
    2d48:	5e000100 	adfpls	f0, f0, f0
    2d4c:	00001e64 	andeq	r1, r0, r4, ror #28
    2d50:	00001e66 	andeq	r1, r0, r6, ror #28
    2d54:	005e0001 	subseq	r0, lr, r1
    2d58:	00000000 	andeq	r0, r0, r0
    2d5c:	90000000 	andls	r0, r0, r0
    2d60:	a200001e 	andge	r0, r0, #30
    2d64:	0700001e 	smladeq	r0, lr, r0, r0
    2d68:	3f007000 	svccc	0x00007000
    2d6c:	9f263f24 	svcls	0x00263f24
	...
    2d78:	00001e98 	muleq	r0, r8, lr
    2d7c:	00001ea0 	andeq	r1, r0, r0, lsr #29
    2d80:	8072000d 	rsbshi	r0, r2, sp
    2d84:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    2d88:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    2d8c:	a09f2634 	addsge	r2, pc, r4, lsr r6	; <UNPREDICTABLE>
    2d90:	bc00001e 	stclt	0, cr0, [r0], {30}
    2d94:	0c00001e 	stceq	0, cr0, [r0], {30}
    2d98:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    2d9c:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    2da0:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    2da4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2db4:	53000100 	movwpl	r0, #256	; 0x100
	...
    2dc8:	00500001 	subseq	r0, r0, r1
    2dcc:	00000000 	andeq	r0, r0, r0
    2dd0:	e4000000 	str	r0, [r0], #-0
    2dd4:	2200001e 	andcs	r0, r0, #30
    2dd8:	0100001f 	tsteq	r0, pc, lsl r0
    2ddc:	1f225000 	svcne	0x00225000
    2de0:	1f840000 	svcne	0x00840000
    2de4:	00010000 	andeq	r0, r1, r0
    2de8:	001f8455 	andseq	r8, pc, r5, asr r4	; <UNPREDICTABLE>
    2dec:	001fb800 	andseq	fp, pc, r0, lsl #16
    2df0:	f3000400 	vshl.u8	d0, d0, d0
    2df4:	009f5001 	addseq	r5, pc, r1
    2df8:	00000000 	andeq	r0, r0, r0
    2dfc:	20000000 	andcs	r0, r0, r0
    2e00:	8400001f 	strhi	r0, [r0], #-31	; 0xffffffe1
    2e04:	0100001f 	tsteq	r0, pc, lsl r0
    2e08:	00005400 	andeq	r5, r0, r0, lsl #8
    2e0c:	00000000 	andeq	r0, r0, r0
    2e10:	1f360000 	svcne	0x00360000
    2e14:	1f380000 	svcne	0x00380000
    2e18:	00070000 	andeq	r0, r7, r0
    2e1c:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    2e20:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    2e24:	00000000 	andeq	r0, r0, r0
    2e28:	46000000 	strmi	r0, [r0], -r0
    2e2c:	6000001f 	andvs	r0, r0, pc, lsl r0
    2e30:	0100001f 	tsteq	r0, pc, lsl r0
    2e34:	00005300 	andeq	r5, r0, r0, lsl #6
    2e38:	00000000 	andeq	r0, r0, r0
    2e3c:	1f4a0000 	svcne	0x004a0000
    2e40:	1f560000 	svcne	0x00560000
    2e44:	00010000 	andeq	r0, r1, r0
    2e48:	001f5652 	andseq	r5, pc, r2, asr r6	; <UNPREDICTABLE>
    2e4c:	001f5a00 	andseq	r5, pc, r0, lsl #20
    2e50:	71000300 	mrsvc	r0, LR_irq
    2e54:	1f5a9f06 	svcne	0x005a9f06
    2e58:	1f620000 	svcne	0x00620000
    2e5c:	00010000 	andeq	r0, r1, r0
    2e60:	00000052 	andeq	r0, r0, r2, asr r0
    2e64:	00000000 	andeq	r0, r0, r0
    2e68:	001fbe00 	andseq	fp, pc, r0, lsl #28
    2e6c:	00203800 	eoreq	r3, r0, r0, lsl #16
    2e70:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2e7c:	00002024 	andeq	r2, r0, r4, lsr #32
    2e80:	0000202e 	andeq	r2, r0, lr, lsr #32
    2e84:	00530001 	subseq	r0, r3, r1
    2e88:	00000000 	andeq	r0, r0, r0
    2e8c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2e90:	82000020 	andhi	r0, r0, #32
    2e94:	01000020 	tsteq	r0, r0, lsr #32
    2e98:	20825000 	addcs	r5, r2, r0
    2e9c:	20d80000 	sbcscs	r0, r8, r0
    2ea0:	00040000 	andeq	r0, r4, r0
    2ea4:	9f5001f3 	svcls	0x005001f3
	...
    2eb0:	00002084 	andeq	r2, r0, r4, lsl #1
    2eb4:	000020b8 	strheq	r2, [r0], -r8
    2eb8:	00530001 	subseq	r0, r3, r1
    2ebc:	00000000 	andeq	r0, r0, r0
    2ec0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2ec4:	96000020 	strls	r0, [r0], -r0, lsr #32
    2ec8:	01000020 	tsteq	r0, r0, lsr #32
    2ecc:	20965100 	addscs	r5, r6, r0, lsl #2
    2ed0:	20980000 	addscs	r0, r8, r0
    2ed4:	00060000 	andeq	r0, r6, r0
    2ed8:	00730072 	rsbseq	r0, r3, r2, ror r0
    2edc:	20989f1c 	addscs	r9, r8, ip, lsl pc
    2ee0:	209e0000 	addscs	r0, lr, r0
    2ee4:	00010000 	andeq	r0, r1, r0
    2ee8:	00000051 	andeq	r0, r0, r1, asr r0
    2eec:	00000000 	andeq	r0, r0, r0
    2ef0:	00207400 	eoreq	r7, r0, r0, lsl #8
    2ef4:	00208600 	eoreq	r8, r0, r0, lsl #12
    2ef8:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f04:	000020d8 	ldrdeq	r2, [r0], -r8
    2f08:	000020fb 	strdeq	r2, [r0], -fp
    2f0c:	fb500001 	blx	1402f1a <__ccfg+0x13e2f72>
    2f10:	06000020 	streq	r0, [r0], -r0, lsr #32
    2f14:	01000021 	tsteq	r0, r1, lsr #32
    2f18:	21065400 	tstcs	r6, r0, lsl #8
    2f1c:	210e0000 	mrscs	r0, (UNDEF: 14)
    2f20:	00010000 	andeq	r0, r1, r0
    2f24:	00210e50 	eoreq	r0, r1, r0, asr lr
    2f28:	00215a00 	eoreq	r5, r1, r0, lsl #20
    2f2c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2f38:	00002114 	andeq	r2, r0, r4, lsl r1
    2f3c:	00002118 	andeq	r2, r0, r8, lsl r1
    2f40:	1a530001 	bne	14c2f4c <__ccfg+0x14a2fa4>
    2f44:	28000021 	stmdacs	r0, {r0, r5}
    2f48:	01000021 	tsteq	r0, r1, lsr #32
    2f4c:	212a5300 			; <UNDEFINED> instruction: 0x212a5300
    2f50:	21320000 	teqcs	r2, r0
    2f54:	00010000 	andeq	r0, r1, r0
    2f58:	00000053 	andeq	r0, r0, r3, asr r0
    2f5c:	00000000 	andeq	r0, r0, r0
    2f60:	00211400 	eoreq	r1, r1, r0, lsl #8
    2f64:	00214800 	eoreq	r4, r1, r0, lsl #16
    2f68:	74000500 	strvc	r0, [r0], #-1280	; 0xfffffb00
    2f6c:	9f264c00 	svcls	0x00264c00
    2f70:	00002148 	andeq	r2, r0, r8, asr #2
    2f74:	00002184 	andeq	r2, r0, r4, lsl #3
    2f78:	01f30006 	mvnseq	r0, r6
    2f7c:	9f264c50 	svcls	0x00264c50
	...
    2f88:	0000210e 	andeq	r2, r0, lr, lsl #2
    2f8c:	00002118 	andeq	r2, r0, r8, lsl r1
    2f90:	00530001 	subseq	r0, r3, r1
    2f94:	00000000 	andeq	r0, r0, r0
    2f98:	84000000 	strhi	r0, [r0], #-0
    2f9c:	98000021 	stmdals	r0, {r0, r5}
    2fa0:	01000021 	tsteq	r0, r1, lsr #32
    2fa4:	21985000 	orrscs	r5, r8, r0
    2fa8:	21e00000 	mvncs	r0, r0
    2fac:	00040000 	andeq	r0, r4, r0
    2fb0:	9f5001f3 	svcls	0x005001f3
	...
    2fbc:	0000218a 	andeq	r2, r0, sl, lsl #3
    2fc0:	00002192 	muleq	r0, r2, r1
    2fc4:	00530001 	subseq	r0, r3, r1
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    2fd0:	a0000021 	andge	r0, r0, r1, lsr #32
    2fd4:	01000021 	tsteq	r0, r1, lsr #32
    2fd8:	21a05200 	lslcs	r5, r0, #4
    2fdc:	21a20000 			; <UNDEFINED> instruction: 0x21a20000
    2fe0:	00050000 	andeq	r0, r5, r0
    2fe4:	25310072 	ldrcs	r0, [r1, #-114]!	; 0xffffff8e
    2fe8:	0021a29f 	mlaeq	r1, pc, r2, sl	; <UNPREDICTABLE>
    2fec:	0021a800 	eoreq	sl, r1, r0, lsl #16
    2ff0:	52000100 	andpl	r0, r0, #0, 2
    2ff4:	000021ac 	andeq	r2, r0, ip, lsr #3
    2ff8:	000021be 			; <UNDEFINED> instruction: 0x000021be
    2ffc:	c2520001 	subsgt	r0, r2, #1
    3000:	cc000021 	stcgt	0, cr0, [r0], {33}	; 0x21
    3004:	01000021 	tsteq	r0, r1, lsr #32
    3008:	21ce5200 	biccs	r5, lr, r0, lsl #4
    300c:	21e00000 	mvncs	r0, r0
    3010:	00010000 	andeq	r0, r1, r0
    3014:	00000052 	andeq	r0, r0, r2, asr r0
    3018:	00000000 	andeq	r0, r0, r0
    301c:	00219200 	eoreq	r9, r1, r0, lsl #4
    3020:	00219c00 	eoreq	r9, r1, r0, lsl #24
    3024:	53000100 	movwpl	r0, #256	; 0x100
    3028:	0000219c 	muleq	r0, ip, r1
    302c:	0000219e 	muleq	r0, lr, r1
    3030:	00730005 	rsbseq	r0, r3, r5
    3034:	9e9f2531 	mrcls	5, 4, r2, cr15, cr1, {1}
    3038:	a0000021 	andge	r0, r0, r1, lsr #32
    303c:	01000021 	tsteq	r0, r1, lsr #32
    3040:	21a05300 	lslcs	r5, r0, #6
    3044:	21ac0000 			; <UNDEFINED> instruction: 0x21ac0000
    3048:	00040000 	andeq	r0, r4, r0
    304c:	9fffff0a 	svcls	0x00ffff0a
    3050:	000021ac 	andeq	r2, r0, ip, lsr #3
    3054:	000021b2 			; <UNDEFINED> instruction: 0x000021b2
    3058:	b6530001 	ldrblt	r0, [r3], -r1
    305c:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    3060:	01000021 	tsteq	r0, r1, lsr #32
    3064:	21bc5300 			; <UNDEFINED> instruction: 0x21bc5300
    3068:	21ce0000 	biccs	r0, lr, r0
    306c:	00020000 	andeq	r0, r2, r0
    3070:	21ce9f31 	biccs	r9, lr, r1, lsr pc
    3074:	21e00000 	mvncs	r0, r0
    3078:	00010000 	andeq	r0, r1, r0
    307c:	00000053 	andeq	r0, r0, r3, asr r0
    3080:	00000000 	andeq	r0, r0, r0
    3084:	00219200 	eoreq	r9, r1, r0, lsl #4
    3088:	00219800 	eoreq	r9, r1, r0, lsl #16
    308c:	30000200 	andcc	r0, r0, r0, lsl #4
    3090:	0021989f 	mlaeq	r1, pc, r8, r9	; <UNPREDICTABLE>
    3094:	0021d400 	eoreq	sp, r1, r0, lsl #8
    3098:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    30a4:	000021d4 	ldrdeq	r2, [r0], -r4
    30a8:	000021d8 	ldrdeq	r2, [r0], -r8
    30ac:	00720008 	rsbseq	r0, r2, r8
    30b0:	00732440 	rsbseq	r2, r3, r0, asr #8
    30b4:	21d89f21 	bicscs	r9, r8, r1, lsr #30
    30b8:	21e00000 	mvncs	r0, r0
    30bc:	00010000 	andeq	r0, r1, r0
    30c0:	00000050 	andeq	r0, r0, r0, asr r0
    30c4:	00000000 	andeq	r0, r0, r0
    30c8:	0021ea00 	eoreq	lr, r1, r0, lsl #20
    30cc:	0021ee00 	eoreq	lr, r1, r0, lsl #28
    30d0:	70000a00 	andvc	r0, r0, r0, lsl #20
    30d4:	381a3300 	ldmdacc	sl, {r8, r9, ip, sp}
    30d8:	21007324 	tstcs	r0, r4, lsr #6
    30dc:	0021f29f 	mlaeq	r1, pc, r2, pc	; <UNPREDICTABLE>
    30e0:	0021f800 	eoreq	pc, r1, r0, lsl #16
    30e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    30f8:	00700007 	rsbseq	r0, r0, r7
    30fc:	1a3fff0a 	bne	1002d2c <__ccfg+0xfe2d84>
    3100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3104:	00000000 	andeq	r0, r0, r0
    3108:	0021fc00 	eoreq	pc, r1, r0, lsl #24
    310c:	00220000 	eoreq	r0, r2, r0
    3110:	70000f00 	andvc	r0, r0, r0, lsl #30
    3114:	1afc0800 	bne	fff0511c <_estack+0xdff0011c>
    3118:	80110070 	andshi	r0, r1, r0, ror r0
    311c:	1a67f3f8 	bne	1a00104 <__ccfg+0x19e015c>
    3120:	00009f21 	andeq	r9, r0, r1, lsr #30
    3124:	00000000 	andeq	r0, r0, r0
    3128:	21fc0000 	mvnscs	r0, r0
    312c:	22000000 	andcs	r0, r0, #0
    3130:	00010000 	andeq	r0, r1, r0
    3134:	00000050 	andeq	r0, r0, r0, asr r0
    3138:	00000000 	andeq	r0, r0, r0
    313c:	00220c00 	eoreq	r0, r2, r0, lsl #24
    3140:	00221000 	eoreq	r1, r2, r0
    3144:	70000f00 	andvc	r0, r0, r0, lsl #30
    3148:	1a3f0800 	bne	fc5150 <__ccfg+0xfa51a8>
    314c:	c00c0070 	andgt	r0, ip, r0, ror r0
    3150:	1a00fcff 	bne	42554 <__ccfg+0x225ac>
    3154:	00009f21 	andeq	r9, r0, r1, lsr #30
    3158:	00000000 	andeq	r0, r0, r0
    315c:	220c0000 	andcs	r0, ip, #0
    3160:	22100000 	andscs	r0, r0, #0
    3164:	00010000 	andeq	r0, r1, r0
    3168:	00000050 	andeq	r0, r0, r0, asr r0
    316c:	00000000 	andeq	r0, r0, r0
    3170:	00221c00 	eoreq	r1, r2, r0, lsl #24
    3174:	00227200 	eoreq	r7, r2, r0, lsl #4
    3178:	50000100 	andpl	r0, r0, r0, lsl #2
    317c:	00002272 	andeq	r2, r0, r2, ror r2
    3180:	00002280 	andeq	r2, r0, r0, lsl #5
    3184:	01f30004 	mvnseq	r0, r4
    3188:	00009f50 	andeq	r9, r0, r0, asr pc
    318c:	00000000 	andeq	r0, r0, r0
    3190:	225c0000 	subscs	r0, ip, #0
    3194:	22640000 	rsbcs	r0, r4, #0
    3198:	00170000 	andseq	r0, r7, r0
    319c:	000a0074 	andeq	r0, sl, r4, ror r0
    31a0:	00741aff 	ldrshteq	r1, [r4], #-175	; 0xffffff51
    31a4:	211af008 	tstcs	sl, r8	; <UNPREDICTABLE>
    31a8:	24440072 	strbcs	r0, [r4], #-114	; 0xffffff8e
    31ac:	40007321 	andmi	r7, r0, r1, lsr #6
    31b0:	689f2124 	ldmvs	pc, {r2, r5, r8, sp}	; <UNPREDICTABLE>
    31b4:	80000022 	andhi	r0, r0, r2, lsr #32
    31b8:	01000022 	tsteq	r0, r2, lsr #32
    31bc:	00005300 	andeq	r5, r0, r0, lsl #6
    31c0:	00000000 	andeq	r0, r0, r0
    31c4:	22240000 	eorcs	r0, r4, #0
    31c8:	226e0000 	rsbcs	r0, lr, #0
    31cc:	00010000 	andeq	r0, r1, r0
    31d0:	00000054 	andeq	r0, r0, r4, asr r0
    31d4:	00000000 	andeq	r0, r0, r0
    31d8:	00222a00 	eoreq	r2, r2, r0, lsl #20
    31dc:	00223e00 	eoreq	r3, r2, r0, lsl #28
    31e0:	52000100 	andpl	r0, r0, #0, 2
    31e4:	0000223e 	andeq	r2, r0, lr, lsr r2
    31e8:	0000224a 	andeq	r2, r0, sl, asr #4
    31ec:	00740006 	rsbseq	r0, r4, r6
    31f0:	9f24ec09 	svcls	0x0024ec09
    31f4:	0000225c 	andeq	r2, r0, ip, asr r2
    31f8:	00002264 	andeq	r2, r0, r4, ror #4
    31fc:	00520001 	subseq	r0, r2, r1
    3200:	00000000 	andeq	r0, r0, r0
    3204:	32000000 	andcc	r0, r0, #0
    3208:	50000022 	andpl	r0, r0, r2, lsr #32
    320c:	01000022 	tsteq	r0, r2, lsr #32
    3210:	22505300 	subscs	r5, r0, #0, 6
    3214:	225c0000 	subscs	r0, ip, #0
    3218:	00060000 	andeq	r0, r6, r0
    321c:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3220:	225c9f24 	subscs	r9, ip, #36, 30	; 0x90
    3224:	22680000 	rsbcs	r0, r8, #0
    3228:	00010000 	andeq	r0, r1, r0
    322c:	00000053 	andeq	r0, r0, r3, asr r0
    3230:	00000000 	andeq	r0, r0, r0
    3234:	00223c00 	eoreq	r3, r2, r0, lsl #24
    3238:	00223e00 	eoreq	r3, r2, r0, lsl #28
    323c:	76000600 	strvc	r0, [r0], -r0, lsl #12
    3240:	22007200 	andcs	r7, r0, #0, 4
    3244:	00223e9f 	mlaeq	r2, pc, lr, r3	; <UNPREDICTABLE>
    3248:	00224600 	eoreq	r4, r2, r0, lsl #12
    324c:	52000100 	andpl	r0, r0, #0, 2
    3250:	00002246 	andeq	r2, r0, r6, asr #4
    3254:	00002248 	andeq	r2, r0, r8, asr #4
    3258:	00740009 	rsbseq	r0, r4, r9
    325c:	7624ec09 	strtvc	lr, [r4], -r9, lsl #24
    3260:	489f2200 	ldmmi	pc, {r9, sp}	; <UNPREDICTABLE>
    3264:	4a000022 	bmi	32f4 <__exidx_end+0x670>
    3268:	01000022 	tsteq	r0, r2, lsr #32
    326c:	224e5500 	subcs	r5, lr, #0, 10
    3270:	22500000 	subscs	r0, r0, #0
    3274:	00060000 	andeq	r0, r6, r0
    3278:	00730071 	rsbseq	r0, r3, r1, ror r0
    327c:	22509f22 	subscs	r9, r0, #34, 30	; 0x88
    3280:	22580000 	subscs	r0, r8, #0
    3284:	00010000 	andeq	r0, r1, r0
    3288:	00225853 	eoreq	r5, r2, r3, asr r8
    328c:	00225a00 	eoreq	r5, r2, r0, lsl #20
    3290:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    3294:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    3298:	9f220071 	svcls	0x00220071
    329c:	0000225a 	andeq	r2, r0, sl, asr r2
    32a0:	0000225c 	andeq	r2, r0, ip, asr r2
    32a4:	9f300002 	svcls	0x00300002
	...
    32b0:	00002280 	andeq	r2, r0, r0, lsl #5
    32b4:	00002288 	andeq	r2, r0, r8, lsl #5
    32b8:	88500001 	ldmdahi	r0, {r0}^
    32bc:	94000022 	strls	r0, [r0], #-34	; 0xffffffde
    32c0:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    32c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    32c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32cc:	00000000 	andeq	r0, r0, r0
    32d0:	00228000 	eoreq	r8, r2, r0
    32d4:	00228e00 	eoreq	r8, r2, r0, lsl #28
    32d8:	30000200 	andcc	r0, r0, r0, lsl #4
    32dc:	00228e9f 	mlaeq	r2, pc, lr, r8	; <UNPREDICTABLE>
    32e0:	00229400 	eoreq	r9, r2, r0, lsl #8
    32e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    32f0:	00002282 	andeq	r2, r0, r2, lsl #5
    32f4:	00002288 	andeq	r2, r0, r8, lsl #5
    32f8:	88500001 	ldmdahi	r0, {r0}^
    32fc:	94000022 	strls	r0, [r0], #-34	; 0xffffffde
    3300:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3304:	5001f300 	andpl	pc, r1, r0, lsl #6
    3308:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    330c:	00000000 	andeq	r0, r0, r0
    3310:	00228c00 	eoreq	r8, r2, r0, lsl #24
    3314:	00228e00 	eoreq	r8, r2, r0, lsl #28
    3318:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3324:	00002294 	muleq	r0, r4, r2
    3328:	0000229c 	muleq	r0, ip, r2
    332c:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3330:	a8000022 	stmdage	r0, {r1, r5}
    3334:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3338:	5001f300 	andpl	pc, r1, r0, lsl #6
    333c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3340:	00000000 	andeq	r0, r0, r0
    3344:	00229400 	eoreq	r9, r2, r0, lsl #8
    3348:	0022a200 	eoreq	sl, r2, r0, lsl #4
    334c:	31000200 	mrscc	r0, R8_usr
    3350:	0022a29f 	mlaeq	r2, pc, r2, sl	; <UNPREDICTABLE>
    3354:	0022a800 	eoreq	sl, r2, r0, lsl #16
    3358:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3364:	00002296 	muleq	r0, r6, r2
    3368:	0000229c 	muleq	r0, ip, r2
    336c:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3370:	a8000022 	stmdage	r0, {r1, r5}
    3374:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3378:	5001f300 	andpl	pc, r1, r0, lsl #6
    337c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3380:	00000000 	andeq	r0, r0, r0
    3384:	0022a000 	eoreq	sl, r2, r0
    3388:	0022a200 	eoreq	sl, r2, r0, lsl #4
    338c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3398:	000022a8 	andeq	r2, r0, r8, lsr #5
    339c:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    33a0:	b0500001 	subslt	r0, r0, r1
    33a4:	bc000022 	stclt	0, cr0, [r0], {34}	; 0x22
    33a8:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    33ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    33b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33b4:	00000000 	andeq	r0, r0, r0
    33b8:	0022a800 	eoreq	sl, r2, r0, lsl #16
    33bc:	0022b600 	eoreq	fp, r2, r0, lsl #12
    33c0:	31000200 	mrscc	r0, R8_usr
    33c4:	0022b69f 	mlaeq	r2, pc, r6, fp	; <UNPREDICTABLE>
    33c8:	0022bc00 	eoreq	fp, r2, r0, lsl #24
    33cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    33d8:	000022aa 	andeq	r2, r0, sl, lsr #5
    33dc:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    33e0:	b0500001 	subslt	r0, r0, r1
    33e4:	bc000022 	stclt	0, cr0, [r0], {34}	; 0x22
    33e8:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    33ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    33f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33f4:	00000000 	andeq	r0, r0, r0
    33f8:	0022b400 	eoreq	fp, r2, r0, lsl #8
    33fc:	0022b600 	eoreq	fp, r2, r0, lsl #12
    3400:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    340c:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
    3410:	000022c8 	andeq	r2, r0, r8, asr #5
    3414:	c8500001 	ldmdagt	r0, {r0}^
    3418:	e4000022 	str	r0, [r0], #-34	; 0xffffffde
    341c:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3420:	5001f300 	andpl	pc, r1, r0, lsl #6
    3424:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3428:	00000000 	andeq	r0, r0, r0
    342c:	0022bc00 	eoreq	fp, r2, r0, lsl #24
    3430:	0022de00 	eoreq	sp, r2, r0, lsl #28
    3434:	30000200 	andcc	r0, r0, r0, lsl #4
    3438:	0022de9f 	mlaeq	r2, pc, lr, sp	; <UNPREDICTABLE>
    343c:	0022e400 	eoreq	lr, r2, r0, lsl #8
    3440:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    344c:	000022be 			; <UNDEFINED> instruction: 0x000022be
    3450:	000022c8 	andeq	r2, r0, r8, asr #5
    3454:	c8500001 	ldmdagt	r0, {r0}^
    3458:	e4000022 	str	r0, [r0], #-34	; 0xffffffde
    345c:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3460:	5001f300 	andpl	pc, r1, r0, lsl #6
    3464:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3468:	00000000 	andeq	r0, r0, r0
    346c:	0022d000 	eoreq	sp, r2, r0
    3470:	0022d800 	eoreq	sp, r2, r0, lsl #16
    3474:	73001000 	movwvc	r1, #0
    3478:	24464c00 	strbcs	r4, [r6], #-3072	; 0xfffff400
    347c:	3225481a 	eorcc	r4, r5, #1703936	; 0x1a0000
    3480:	38007224 	stmdacc	r0, {r2, r5, r9, ip, sp, lr}
    3484:	da9f2124 	ble	fe7cb91c <_estack+0xde7c691c>
    3488:	de000022 	cdple	0, 0, cr0, cr0, cr2, {1}
    348c:	01000022 	tsteq	r0, r2, lsr #32
    3490:	00005000 	andeq	r5, r0, r0
    3494:	00000000 	andeq	r0, r0, r0
    3498:	22c40000 	sbccs	r0, r4, #0
    349c:	22d80000 	sbcscs	r0, r8, #0
    34a0:	00010000 	andeq	r0, r1, r0
    34a4:	00000053 	andeq	r0, r0, r3, asr r0
    34a8:	00000000 	andeq	r0, r0, r0
    34ac:	0022e800 	eoreq	lr, r2, r0, lsl #16
    34b0:	0022ec00 	eoreq	lr, r2, r0, lsl #24
    34b4:	70000900 	andvc	r0, r0, r0, lsl #18
    34b8:	24404800 	strbcs	r4, [r0], #-2048	; 0xfffff800
    34bc:	9f25431a 	svcls	0x0025431a
	...
    34c8:	000022f4 	strdeq	r2, [r0], -r4
    34cc:	00002300 	andeq	r2, r0, r0, lsl #6
    34d0:	00500001 	subseq	r0, r0, r1
    34d4:	20000023 	andcs	r0, r0, r3, lsr #32
    34d8:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    34dc:	5001f300 	andpl	pc, r1, r0, lsl #6
    34e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34e4:	00000000 	andeq	r0, r0, r0
    34e8:	0022f400 	eoreq	pc, r2, r0, lsl #8
    34ec:	00231600 	eoreq	r1, r3, r0, lsl #12
    34f0:	0c000600 	stceq	6, cr0, [r0], {-0}
    34f4:	403f8000 	eorsmi	r8, pc, r0
    34f8:	0023169f 	mlaeq	r3, pc, r6, r1	; <UNPREDICTABLE>
    34fc:	00232000 	eoreq	r2, r3, r0
    3500:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    350c:	000022f6 	strdeq	r2, [r0], -r6
    3510:	00002300 	andeq	r2, r0, r0, lsl #6
    3514:	00500001 	subseq	r0, r0, r1
    3518:	20000023 	andcs	r0, r0, r3, lsr #32
    351c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3520:	5001f300 	andpl	pc, r1, r0, lsl #6
    3524:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3528:	00000000 	andeq	r0, r0, r0
    352c:	00230400 	eoreq	r0, r3, r0, lsl #8
    3530:	00230a00 	eoreq	r0, r3, r0, lsl #20
    3534:	73001000 	movwvc	r1, #0
    3538:	03f00a00 	mvnseq	r0, #0, 20
    353c:	4025341a 	eormi	r3, r5, sl, lsl r4
    3540:	46007224 	strmi	r7, [r0], -r4, lsr #4
    3544:	149f2124 	ldrne	r2, [pc], #292	; 354c <__exidx_end+0x8c8>
    3548:	16000023 	strne	r0, [r0], -r3, lsr #32
    354c:	01000023 	tsteq	r0, r3, lsr #32
    3550:	00005000 	andeq	r5, r0, r0
    3554:	00000000 	andeq	r0, r0, r0
    3558:	22fc0000 	rscscs	r0, ip, #0
    355c:	230a0000 	movwcs	r0, #40960	; 0xa000
    3560:	00010000 	andeq	r0, r1, r0
    3564:	00000053 	andeq	r0, r0, r3, asr r0
    3568:	00000000 	andeq	r0, r0, r0
    356c:	00232000 	eoreq	r2, r3, r0
    3570:	00232800 	eoreq	r2, r3, r0, lsl #16
    3574:	50000100 	andpl	r0, r0, r0, lsl #2
    3578:	00002328 	andeq	r2, r0, r8, lsr #6
    357c:	00002334 	andeq	r2, r0, r4, lsr r3
    3580:	01f30004 	mvnseq	r0, r4
    3584:	00009f50 	andeq	r9, r0, r0, asr pc
    3588:	00000000 	andeq	r0, r0, r0
    358c:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    3590:	232e0000 			; <UNDEFINED> instruction: 0x232e0000
    3594:	00020000 	andeq	r0, r2, r0
    3598:	232e9f30 			; <UNDEFINED> instruction: 0x232e9f30
    359c:	23340000 	teqcs	r4, #0
    35a0:	00010000 	andeq	r0, r1, r0
    35a4:	00000050 	andeq	r0, r0, r0, asr r0
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	00232200 	eoreq	r2, r3, r0, lsl #4
    35b0:	00232800 	eoreq	r2, r3, r0, lsl #16
    35b4:	50000100 	andpl	r0, r0, r0, lsl #2
    35b8:	00002328 	andeq	r2, r0, r8, lsr #6
    35bc:	00002334 	andeq	r2, r0, r4, lsr r3
    35c0:	01f30004 	mvnseq	r0, r4
    35c4:	00009f50 	andeq	r9, r0, r0, asr pc
    35c8:	00000000 	andeq	r0, r0, r0
    35cc:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    35d0:	232e0000 			; <UNDEFINED> instruction: 0x232e0000
    35d4:	00010000 	andeq	r0, r1, r0
    35d8:	00000050 	andeq	r0, r0, r0, asr r0
    35dc:	00000000 	andeq	r0, r0, r0
    35e0:	00233400 	eoreq	r3, r3, r0, lsl #8
    35e4:	00233c00 	eoreq	r3, r3, r0, lsl #24
    35e8:	50000100 	andpl	r0, r0, r0, lsl #2
    35ec:	0000233c 	andeq	r2, r0, ip, lsr r3
    35f0:	00002348 	andeq	r2, r0, r8, asr #6
    35f4:	01f30004 	mvnseq	r0, r4
    35f8:	00009f50 	andeq	r9, r0, r0, asr pc
    35fc:	00000000 	andeq	r0, r0, r0
    3600:	23340000 	teqcs	r4, #0
    3604:	23420000 	movtcs	r0, #8192	; 0x2000
    3608:	00020000 	andeq	r0, r2, r0
    360c:	23429f30 	movtcs	r9, #12080	; 0x2f30
    3610:	23480000 	movtcs	r0, #32768	; 0x8000
    3614:	00010000 	andeq	r0, r1, r0
    3618:	00000050 	andeq	r0, r0, r0, asr r0
    361c:	00000000 	andeq	r0, r0, r0
    3620:	00233600 	eoreq	r3, r3, r0, lsl #12
    3624:	00233c00 	eoreq	r3, r3, r0, lsl #24
    3628:	50000100 	andpl	r0, r0, r0, lsl #2
    362c:	0000233c 	andeq	r2, r0, ip, lsr r3
    3630:	00002348 	andeq	r2, r0, r8, asr #6
    3634:	01f30004 	mvnseq	r0, r4
    3638:	00009f50 	andeq	r9, r0, r0, asr pc
    363c:	00000000 	andeq	r0, r0, r0
    3640:	23400000 	movtcs	r0, #0
    3644:	23420000 	movtcs	r0, #8192	; 0x2000
    3648:	00010000 	andeq	r0, r1, r0
    364c:	00000050 	andeq	r0, r0, r0, asr r0
    3650:	00000000 	andeq	r0, r0, r0
    3654:	00234800 	eoreq	r4, r3, r0, lsl #16
    3658:	00234e00 	eoreq	r4, r3, r0, lsl #28
    365c:	50000100 	andpl	r0, r0, r0, lsl #2
    3660:	0000234e 	andeq	r2, r0, lr, asr #6
    3664:	00002438 	andeq	r2, r0, r8, lsr r4
    3668:	38550001 	ldmdacc	r5, {r0}^
    366c:	58000024 	stmdapl	r0, {r2, r5}
    3670:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3674:	5001f300 	andpl	pc, r1, r0, lsl #6
    3678:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    367c:	00000000 	andeq	r0, r0, r0
    3680:	00234800 	eoreq	r4, r3, r0, lsl #16
    3684:	00235100 	eoreq	r5, r3, r0, lsl #2
    3688:	51000100 	mrspl	r0, (UNDEF: 16)
    368c:	00002351 	andeq	r2, r0, r1, asr r3
    3690:	00002458 	andeq	r2, r0, r8, asr r4
    3694:	01f30004 	mvnseq	r0, r4
    3698:	00009f51 	andeq	r9, r0, r1, asr pc
    369c:	00000000 	andeq	r0, r0, r0
    36a0:	23560000 	cmpcs	r6, #0
    36a4:	235a0000 	cmpcs	sl, #0
    36a8:	00010000 	andeq	r0, r1, r0
    36ac:	00235a50 	eoreq	r5, r3, r0, asr sl
    36b0:	00235d00 	eoreq	r5, r3, r0, lsl #26
    36b4:	52000100 	andpl	r0, r0, #0, 2
    36b8:	00002362 	andeq	r2, r0, r2, ror #6
    36bc:	00002366 	andeq	r2, r0, r6, ror #6
    36c0:	90500001 	subsls	r0, r0, r1
    36c4:	92000023 	andls	r0, r0, #35	; 0x23
    36c8:	01000023 	tsteq	r0, r3, lsr #32
    36cc:	23925000 	orrscs	r5, r2, #0
    36d0:	23950000 	orrscs	r0, r5, #0
    36d4:	00010000 	andeq	r0, r1, r0
    36d8:	00239e52 	eoreq	r9, r3, r2, asr lr
    36dc:	0023a000 	eoreq	sl, r3, r0
    36e0:	50000100 	andpl	r0, r0, r0, lsl #2
    36e4:	000023a0 	andeq	r2, r0, r0, lsr #7
    36e8:	000023a3 	andeq	r2, r0, r3, lsr #7
    36ec:	ae520001 	cdpge	0, 5, cr0, cr2, cr1, {0}
    36f0:	b0000023 	andlt	r0, r0, r3, lsr #32
    36f4:	01000023 	tsteq	r0, r3, lsr #32
    36f8:	23b05000 	movscs	r5, #0
    36fc:	23b30000 			; <UNDEFINED> instruction: 0x23b30000
    3700:	00010000 	andeq	r0, r1, r0
    3704:	0023ba52 	eoreq	fp, r3, r2, asr sl
    3708:	0023bc00 	eoreq	fp, r3, r0, lsl #24
    370c:	50000100 	andpl	r0, r0, r0, lsl #2
    3710:	000023cc 	andeq	r2, r0, ip, asr #7
    3714:	000023d0 	ldrdeq	r2, [r0], -r0
    3718:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
    371c:	e0000023 	and	r0, r0, r3, lsr #32
    3720:	01000023 	tsteq	r0, r3, lsr #32
    3724:	23e05000 	mvncs	r5, #0
    3728:	23e30000 	mvncs	r0, #0
    372c:	00010000 	andeq	r0, r1, r0
    3730:	0023ea52 	eoreq	lr, r3, r2, asr sl
    3734:	0023ec00 	eoreq	lr, r3, r0, lsl #24
    3738:	50000100 	andpl	r0, r0, r0, lsl #2
    373c:	000023fc 	strdeq	r2, [r0], -ip
    3740:	000023fe 	strdeq	r2, [r0], -lr
    3744:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    3748:	12000024 	andne	r0, r0, #36	; 0x24
    374c:	01000024 	tsteq	r0, r4, lsr #32
    3750:	24265000 	strtcs	r5, [r6], #-0
    3754:	24280000 	strtcs	r0, [r8], #-0
    3758:	00010000 	andeq	r0, r1, r0
    375c:	00242850 	eoreq	r2, r4, r0, asr r8
    3760:	00242b00 	eoreq	r2, r4, r0, lsl #22
    3764:	52000100 	andpl	r0, r0, #0, 2
	...
    3770:	0000237e 	andeq	r2, r0, lr, ror r3
    3774:	00002384 	andeq	r2, r0, r4, lsl #7
    3778:	00720007 	rsbseq	r0, r2, r7
    377c:	1a3fff0a 	bne	10033ac <__ccfg+0xfe3404>
    3780:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3784:	00000000 	andeq	r0, r0, r0
    3788:	00247200 	eoreq	r7, r4, r0, lsl #4
    378c:	00247c00 	eoreq	r7, r4, r0, lsl #24
    3790:	73000900 	movwvc	r0, #2304	; 0x900
    3794:	00040c00 	andeq	r0, r4, r0, lsl #24
    3798:	9f212000 	svcls	0x00212000
	...
    37a4:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    37a8:	000024c4 	andeq	r2, r0, r4, asr #9
    37ac:	c4500001 	ldrbgt	r0, [r0], #-1
    37b0:	e4000024 	str	r0, [r0], #-36	; 0xffffffdc
    37b4:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    37b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    37bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37c0:	00000000 	andeq	r0, r0, r0
    37c4:	0024e400 	eoreq	lr, r4, r0, lsl #8
    37c8:	00250c00 	eoreq	r0, r5, r0, lsl #24
    37cc:	50000100 	andpl	r0, r0, r0, lsl #2
    37d0:	0000250c 	andeq	r2, r0, ip, lsl #10
    37d4:	0000254c 	andeq	r2, r0, ip, asr #10
    37d8:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    37dc:	54000025 	strpl	r0, [r0], #-37	; 0xffffffdb
    37e0:	01000025 	tsteq	r0, r5, lsr #32
    37e4:	25545000 	ldrbcs	r5, [r4, #-0]
    37e8:	259e0000 	ldrcs	r0, [lr]
    37ec:	00010000 	andeq	r0, r1, r0
    37f0:	00259e54 	eoreq	r9, r5, r4, asr lr
    37f4:	0025da00 	eoreq	sp, r5, r0, lsl #20
    37f8:	f3000400 	vshl.u8	d0, d0, d0
    37fc:	da9f5001 	ble	fe7d7808 <_estack+0xde7d2808>
    3800:	de000025 	cdple	0, 0, cr0, cr0, cr5, {1}
    3804:	01000025 	tsteq	r0, r5, lsr #32
    3808:	25de5400 	ldrbcs	r5, [lr, #1024]	; 0x400
    380c:	26340000 	ldrtcs	r0, [r4], -r0
    3810:	00040000 	andeq	r0, r4, r0
    3814:	9f5001f3 	svcls	0x005001f3
	...
    3820:	000024fa 	strdeq	r2, [r0], -sl
    3824:	0000253c 	andeq	r2, r0, ip, lsr r5
    3828:	00530001 	subseq	r0, r3, r1
    382c:	00000000 	andeq	r0, r0, r0
    3830:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    3834:	74000025 	strvc	r0, [r0], #-37	; 0xffffffdb
    3838:	01000025 	tsteq	r0, r5, lsr #32
    383c:	00005000 	andeq	r5, r0, r0
    3840:	00000000 	andeq	r0, r0, r0
    3844:	259e0000 	ldrcs	r0, [lr]
    3848:	25a00000 	strcs	r0, [r0, #0]!
    384c:	00010000 	andeq	r0, r1, r0
    3850:	0025a050 	eoreq	sl, r5, r0, asr r0
    3854:	0025b400 	eoreq	fp, r5, r0, lsl #8
    3858:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3864:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
    3868:	000025d4 	ldrdeq	r2, [r0], -r4
    386c:	00540001 	subseq	r0, r4, r1
	...
    387c:	01000000 	mrseq	r0, (UNDEF: 0)
    3880:	00005500 	andeq	r5, r0, r0, lsl #10
    3884:	00000000 	andeq	r0, r0, r0
    3888:	00030000 	andeq	r0, r3, r0
    388c:	009f7f75 	addseq	r7, pc, r5, ror pc	; <UNPREDICTABLE>
    3890:	00000000 	andeq	r0, r0, r0
    3894:	01000000 	mrseq	r0, (UNDEF: 0)
    3898:	00005500 	andeq	r5, r0, r0, lsl #10
    389c:	00000000 	andeq	r0, r0, r0
    38a0:	26340000 	ldrtcs	r0, [r4], -r0
    38a4:	26530000 	ldrbcs	r0, [r3], -r0
    38a8:	00010000 	andeq	r0, r1, r0
    38ac:	00265350 	eoreq	r5, r6, r0, asr r3
    38b0:	00271400 	eoreq	r1, r7, r0, lsl #8
    38b4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    38b8:	00002714 	andeq	r2, r0, r4, lsl r7
    38bc:	00002854 	andeq	r2, r0, r4, asr r8
    38c0:	01f30004 	mvnseq	r0, r4
    38c4:	00009f50 	andeq	r9, r0, r0, asr pc
    38c8:	00000000 	andeq	r0, r0, r0
    38cc:	26540000 	ldrbcs	r0, [r4], -r0
    38d0:	27d40000 	ldrbcs	r0, [r4, r0]
    38d4:	00010000 	andeq	r0, r1, r0
    38d8:	0027d650 	eoreq	sp, r7, r0, asr r6
    38dc:	00281000 	eoreq	r1, r8, r0
    38e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    38ec:	000026fc 	strdeq	r2, [r0], -ip
    38f0:	00002700 	andeq	r2, r0, r0, lsl #14
    38f4:	71700003 	cmnvc	r0, r3
    38f8:	0027009f 	mlaeq	r7, pc, r0, r0	; <UNPREDICTABLE>
    38fc:	00270600 	eoreq	r0, r7, r0, lsl #12
    3900:	51000100 	mrspl	r0, (UNDEF: 16)
    3904:	00002706 	andeq	r2, r0, r6, lsl #14
    3908:	00002726 	andeq	r2, r0, r6, lsr #14
    390c:	54910002 	ldrpl	r0, [r1], #2
    3910:	00002726 	andeq	r2, r0, r6, lsr #14
    3914:	00002732 	andeq	r2, r0, r2, lsr r7
    3918:	32510001 	subscc	r0, r1, #1
    391c:	34000027 	strcc	r0, [r0], #-39	; 0xffffffd9
    3920:	02000027 	andeq	r0, r0, #39	; 0x27
    3924:	34549100 	ldrbcc	r9, [r4], #-256	; 0xffffff00
    3928:	36000027 	strcc	r0, [r0], -r7, lsr #32
    392c:	01000027 	tsteq	r0, r7, lsr #32
    3930:	27365100 	ldrcs	r5, [r6, -r0, lsl #2]!
    3934:	27dc0000 	ldrbcs	r0, [ip, r0]
    3938:	00020000 	andeq	r0, r2, r0
    393c:	00005491 	muleq	r0, r1, r4
    3940:	00000000 	andeq	r0, r0, r0
    3944:	26600000 	strbtcs	r0, [r0], -r0
    3948:	26ba0000 	ldrtcs	r0, [sl], r0
    394c:	00010000 	andeq	r0, r1, r0
    3950:	0026c251 	eoreq	ip, r6, r1, asr r2
    3954:	0026c400 	eoreq	ip, r6, r0, lsl #8
    3958:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3964:	000026b2 			; <UNDEFINED> instruction: 0x000026b2
    3968:	000026c0 	andeq	r2, r0, r0, asr #13
    396c:	c2520001 	subsgt	r0, r2, #1
    3970:	a4000026 	strge	r0, [r0], #-38	; 0xffffffda
    3974:	01000027 	tsteq	r0, r7, lsr #32
    3978:	00005200 	andeq	r5, r0, r0, lsl #4
    397c:	00000000 	andeq	r0, r0, r0
    3980:	26b20000 	ldrtcs	r0, [r2], r0
    3984:	279a0000 	ldrcs	r0, [sl, r0]
    3988:	00010000 	andeq	r0, r1, r0
    398c:	00000053 	andeq	r0, r0, r3, asr r0
    3990:	00000000 	andeq	r0, r0, r0
    3994:	00265800 	eoreq	r5, r6, r0, lsl #16
    3998:	0027ae00 	eoreq	sl, r7, r0, lsl #28
    399c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    39a8:	00002654 	andeq	r2, r0, r4, asr r6
    39ac:	000026dc 	ldrdeq	r2, [r0], -ip
    39b0:	9f300002 	svcls	0x00300002
    39b4:	000026dc 	ldrdeq	r2, [r0], -ip
    39b8:	00002810 	andeq	r2, r0, r0, lsl r8
    39bc:	00540001 	subseq	r0, r4, r1
    39c0:	00000000 	andeq	r0, r0, r0
    39c4:	d4000000 	strle	r0, [r0], #-0
    39c8:	de000026 	cdple	0, 0, cr0, cr0, cr6, {1}
    39cc:	01000026 	tsteq	r0, r6, lsr #32
    39d0:	00005100 	andeq	r5, r0, r0, lsl #2
    39d4:	00000000 	andeq	r0, r0, r0
    39d8:	26fc0000 	ldrbtcs	r0, [ip], r0
    39dc:	274c0000 	strbcs	r0, [ip, -r0]
    39e0:	00020000 	andeq	r0, r2, r0
    39e4:	274c9f30 	smlaldxcs	r9, ip, r0, pc	; <UNPREDICTABLE>
    39e8:	276c0000 	strbcs	r0, [ip, -r0]!
    39ec:	00010000 	andeq	r0, r1, r0
    39f0:	00276c51 	eoreq	r6, r7, r1, asr ip
    39f4:	00277200 	eoreq	r7, r7, r0, lsl #4
    39f8:	30000200 	andcc	r0, r0, r0, lsl #4
    39fc:	0027729f 	mlaeq	r7, pc, r2, r7	; <UNPREDICTABLE>
    3a00:	0027ac00 	eoreq	sl, r7, r0, lsl #24
    3a04:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3a10:	00002728 	andeq	r2, r0, r8, lsr #14
    3a14:	0000272c 	andeq	r2, r0, ip, lsr #14
    3a18:	345e0001 	ldrbcc	r0, [lr], #-1
    3a1c:	36000027 	strcc	r0, [r0], -r7, lsr #32
    3a20:	01000027 	tsteq	r0, r7, lsr #32
    3a24:	27365e00 	ldrcs	r5, [r6, -r0, lsl #28]!
    3a28:	273c0000 	ldrcs	r0, [ip, -r0]!
    3a2c:	00010000 	andeq	r0, r1, r0
    3a30:	00273c51 	eoreq	r3, r7, r1, asr ip
    3a34:	00274400 	eoreq	r4, r7, r0, lsl #8
    3a38:	71000300 	mrsvc	r0, LR_irq
    3a3c:	00009f7f 	andeq	r9, r0, pc, ror pc
    3a40:	00000000 	andeq	r0, r0, r0
    3a44:	26fc0000 	ldrbtcs	r0, [ip], r0
    3a48:	27260000 	strcs	r0, [r6, -r0]!
    3a4c:	00020000 	andeq	r0, r2, r0
    3a50:	27269f30 			; <UNDEFINED> instruction: 0x27269f30
    3a54:	27300000 	ldrcs	r0, [r0, -r0]!
    3a58:	00010000 	andeq	r0, r1, r0
    3a5c:	0027305e 	eoreq	r3, r7, lr, asr r0
    3a60:	00273200 	eoreq	r3, r7, r0, lsl #4
    3a64:	71000500 	tstvc	r0, r0, lsl #10
    3a68:	9f263800 	svcls	0x00263800
    3a6c:	00002732 	andeq	r2, r0, r2, lsr r7
    3a70:	00002734 	andeq	r2, r0, r4, lsr r7
    3a74:	54910006 	ldrpl	r0, [r1], #6
    3a78:	9f263806 	svcls	0x00263806
    3a7c:	00002734 	andeq	r2, r0, r4, lsr r7
    3a80:	00002736 	andeq	r2, r0, r6, lsr r7
    3a84:	365e0001 	ldrbcc	r0, [lr], -r1
    3a88:	6c000027 	stcvs	0, cr0, [r0], {39}	; 0x27
    3a8c:	06000027 	streq	r0, [r0], -r7, lsr #32
    3a90:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    3a94:	6c9f2638 	ldcvs	6, cr2, [pc], {56}	; 0x38
    3a98:	72000027 	andvc	r0, r0, #39	; 0x27
    3a9c:	02000027 	andeq	r0, r0, #39	; 0x27
    3aa0:	729f3000 	addsvc	r3, pc, #0
    3aa4:	dc000027 	stcle	0, cr0, [r0], {39}	; 0x27
    3aa8:	01000027 	tsteq	r0, r7, lsr #32
    3aac:	00005e00 	andeq	r5, r0, r0, lsl #28
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	27480000 	strbcs	r0, [r8, -r0]
    3ab8:	276c0000 	strbcs	r0, [ip, -r0]!
    3abc:	00010000 	andeq	r0, r1, r0
    3ac0:	0000005c 	andeq	r0, r0, ip, asr r0
    3ac4:	00000000 	andeq	r0, r0, r0
    3ac8:	00277600 	eoreq	r7, r7, r0, lsl #12
    3acc:	0027dc00 	eoreq	sp, r7, r0, lsl #24
    3ad0:	5a000100 	bpl	3ed8 <__exidx_end+0x1254>
	...
    3adc:	0000277a 	andeq	r2, r0, sl, ror r7
    3ae0:	000027b6 			; <UNDEFINED> instruction: 0x000027b6
    3ae4:	b65c0001 	ldrblt	r0, [ip], -r1
    3ae8:	ba000027 	blt	3b8c <__exidx_end+0xf08>
    3aec:	01000027 	tsteq	r0, r7, lsr #32
    3af0:	00005100 	andeq	r5, r0, r0, lsl #2
    3af4:	00000000 	andeq	r0, r0, r0
    3af8:	27ba0000 	ldrcs	r0, [sl, r0]!
    3afc:	27c40000 	strbcs	r0, [r4, r0]
    3b00:	00170000 	andseq	r0, r7, r0
    3b04:	40120071 	andsmi	r0, r2, r1, ror r0
    3b08:	0a22244b 	beq	88cc3c <__ccfg+0x86cc94>
    3b0c:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    3b10:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3b14:	0001282d 	andeq	r2, r1, sp, lsr #16
    3b18:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3b1c:	00000000 	andeq	r0, r0, r0
    3b20:	e4000000 	str	r0, [r0], #-0
    3b24:	f0000027 			; <UNDEFINED> instruction: 0xf0000027
    3b28:	02000027 	andeq	r0, r0, #39	; 0x27
    3b2c:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    3b30:	10000027 	andne	r0, r0, r7, lsr #32
    3b34:	01000028 	tsteq	r0, r8, lsr #32
    3b38:	00005100 	andeq	r5, r0, r0, lsl #2
    3b3c:	00000000 	andeq	r0, r0, r0
    3b40:	27e60000 	strbcs	r0, [r6, r0]!
    3b44:	27e80000 	strbcs	r0, [r8, r0]!
    3b48:	00010000 	andeq	r0, r1, r0
    3b4c:	0027e853 	eoreq	lr, r7, r3, asr r8
    3b50:	0027f000 	eoreq	pc, r7, r0
    3b54:	4f000200 	svcmi	0x00000200
    3b58:	0027f09f 	mlaeq	r7, pc, r0, pc	; <UNPREDICTABLE>
    3b5c:	00280000 	eoreq	r0, r8, r0
    3b60:	53000100 	movwpl	r0, #256	; 0x100
    3b64:	00002800 	andeq	r2, r0, r0, lsl #16
    3b68:	00002804 	andeq	r2, r0, r4, lsl #16
    3b6c:	00730005 	rsbseq	r0, r3, r5
    3b70:	049f2534 	ldreq	r2, [pc], #1332	; 3b78 <__exidx_end+0xef4>
    3b74:	08000028 	stmdaeq	r0, {r3, r5}
    3b78:	01000028 	tsteq	r0, r8, lsr #32
    3b7c:	00005300 	andeq	r5, r0, r0, lsl #6
    3b80:	00000000 	andeq	r0, r0, r0
    3b84:	26fc0000 	ldrbtcs	r0, [ip], r0
    3b88:	27dc0000 	ldrbcs	r0, [ip, r0]
    3b8c:	00060000 	andeq	r0, r6, r0
    3b90:	00139c0c 	andseq	r9, r3, ip, lsl #24
    3b94:	00009f50 	andeq	r9, r0, r0, asr pc
    3b98:	00000000 	andeq	r0, r0, r0
    3b9c:	26680000 	strbtcs	r0, [r8], -r0
    3ba0:	26740000 	ldrbtcs	r0, [r4], -r0
    3ba4:	00010000 	andeq	r0, r1, r0
    3ba8:	00000053 	andeq	r0, r0, r3, asr r0
    3bac:	00000000 	andeq	r0, r0, r0
    3bb0:	00268800 	eoreq	r8, r6, r0, lsl #16
    3bb4:	00269400 	eoreq	r9, r6, r0, lsl #8
    3bb8:	52000100 	andpl	r0, r0, #0, 2
	...
    3bc4:	0000269e 	muleq	r0, lr, r6
    3bc8:	000026aa 	andeq	r2, r0, sl, lsr #13
    3bcc:	00520001 	subseq	r0, r2, r1
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	aa000000 	bge	3bdc <__exidx_end+0xf58>
    3bd8:	9a000026 	bls	3c78 <__exidx_end+0xff4>
    3bdc:	01000027 	tsteq	r0, r7, lsr #32
    3be0:	00005300 	andeq	r5, r0, r0, lsl #6
    3be4:	00000000 	andeq	r0, r0, r0
    3be8:	28620000 	stmdacs	r2!, {}^	; <UNPREDICTABLE>
    3bec:	286c0000 	stmdacs	ip!, {}^	; <UNPREDICTABLE>
    3bf0:	00010000 	andeq	r0, r1, r0
    3bf4:	00286c50 	eoreq	r6, r8, r0, asr ip
    3bf8:	00287600 	eoreq	r7, r8, r0, lsl #12
    3bfc:	70000e00 	andvc	r0, r0, r0, lsl #28
    3c00:	80091200 	andhi	r1, r9, r0, lsl #4
    3c04:	282b1416 	stmdacs	fp!, {r1, r2, r4, sl, ip}
    3c08:	13160001 	tstne	r6, #1
    3c0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c10:	00000000 	andeq	r0, r0, r0
    3c14:	00285c00 	eoreq	r5, r8, r0, lsl #24
    3c18:	00288800 	eoreq	r8, r8, r0, lsl #16
    3c1c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3c28:	0000288c 	andeq	r2, r0, ip, lsl #17
    3c2c:	00002892 	muleq	r0, r2, r8
    3c30:	00730015 	rsbseq	r0, r3, r5, lsl r0
    3c34:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3c38:	14164f22 	ldrne	r4, [r6], #-3874	; 0xfffff0de
    3c3c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3c40:	0001282d 	andeq	r2, r1, sp, lsr #16
    3c44:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3c48:	00000000 	andeq	r0, r0, r0
    3c4c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3c50:	a2000028 	andge	r0, r0, #40	; 0x28
    3c54:	17000028 	strne	r0, [r0, -r8, lsr #32]
    3c58:	12007400 	andne	r7, r0, #0, 8
    3c5c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3c60:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    3c64:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3c68:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3c6c:	9f131600 	svcls	0x00131600
	...
    3c80:	00520001 	subseq	r0, r2, r1
	...
    3c90:	01000000 	mrseq	r0, (UNDEF: 0)
    3c94:	00005000 	andeq	r5, r0, r0
	...
    3ca4:	00010000 	andeq	r0, r1, r0
    3ca8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    3cb8:	53000100 	movwpl	r0, #256	; 0x100
	...
    3ccc:	00700016 	rsbseq	r0, r0, r6, lsl r0
    3cd0:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
    3cd4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3cd8:	0000050c 	andeq	r0, r0, ip, lsl #10
    3cdc:	01282d80 	smlawbeq	r8, r0, sp, r2
    3ce0:	9f131600 	svcls	0x00131600
	...
    3cec:	000028cc 	andeq	r2, r0, ip, asr #17
    3cf0:	0000290e 	andeq	r2, r0, lr, lsl #18
    3cf4:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3cf8:	00290e9f 	mlaeq	r9, pc, lr, r0	; <UNPREDICTABLE>
    3cfc:	00291800 	eoreq	r1, r9, r0, lsl #16
    3d00:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3d0c:	000028d8 	ldrdeq	r2, [r0], -r8
    3d10:	000028e6 	andeq	r2, r0, r6, ror #17
    3d14:	ea500001 	b	1403d20 <__ccfg+0x13e3d78>
    3d18:	06000028 	streq	r0, [r0], -r8, lsr #32
    3d1c:	01000029 	tsteq	r0, r9, lsr #32
    3d20:	29085000 	stmdbcs	r8, {ip, lr}
    3d24:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    3d28:	00010000 	andeq	r0, r1, r0
    3d2c:	00290c50 	eoreq	r0, r9, r0, asr ip
    3d30:	00290e00 	eoreq	r0, r9, r0, lsl #28
    3d34:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3d48:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3d4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3d68:	00540001 	subseq	r0, r4, r1
    3d6c:	00000000 	andeq	r0, r0, r0
    3d70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3d74:	52000029 	andpl	r0, r0, #41	; 0x29
    3d78:	03000029 	movweq	r0, #41	; 0x29
    3d7c:	9fff0900 	svcls	0x00ff0900
    3d80:	00002952 	andeq	r2, r0, r2, asr r9
    3d84:	00002956 	andeq	r2, r0, r6, asr r9
    3d88:	9f440002 	svcls	0x00440002
    3d8c:	00002956 	andeq	r2, r0, r6, asr r9
    3d90:	0000295a 	andeq	r2, r0, sl, asr r9
    3d94:	9f450002 	svcls	0x00450002
    3d98:	0000295a 	andeq	r2, r0, sl, asr r9
    3d9c:	00002978 	andeq	r2, r0, r8, ror r9
    3da0:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3da4:	0029789f 	mlaeq	r9, pc, r8, r7	; <UNPREDICTABLE>
    3da8:	00297a00 	eoreq	r7, r9, r0, lsl #20
    3dac:	50000100 	andpl	r0, r0, r0, lsl #2
    3db0:	0000297a 	andeq	r2, r0, sl, ror r9
    3db4:	0000297c 	andeq	r2, r0, ip, ror r9
    3db8:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3dbc:	00297c9f 	mlaeq	r9, pc, ip, r7	; <UNPREDICTABLE>
    3dc0:	00298400 	eoreq	r8, r9, r0, lsl #8
    3dc4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3dd0:	00002928 	andeq	r2, r0, r8, lsr #18
    3dd4:	00002980 	andeq	r2, r0, r0, lsl #19
    3dd8:	00540001 	subseq	r0, r4, r1
    3ddc:	00000000 	andeq	r0, r0, r0
    3de0:	9c000000 	stcls	0, cr0, [r0], {-0}
    3de4:	a5000029 	strge	r0, [r0, #-41]	; 0xffffffd7
    3de8:	01000029 	tsteq	r0, r9, lsr #32
    3dec:	29a55000 	stmibcs	r5!, {ip, lr}
    3df0:	29ba0000 	ldmibcs	sl!, {}	; <UNPREDICTABLE>
    3df4:	00010000 	andeq	r0, r1, r0
    3df8:	0029ba54 	eoreq	fp, r9, r4, asr sl
    3dfc:	0029be00 	eoreq	fp, r9, r0, lsl #28
    3e00:	f3000400 	vshl.u8	d0, d0, d0
    3e04:	be9f5001 	cdplt	0, 9, cr5, cr15, cr1, {0}
    3e08:	c0000029 	andgt	r0, r0, r9, lsr #32
    3e0c:	01000029 	tsteq	r0, r9, lsr #32
    3e10:	29c05400 	stmibcs	r0, {sl, ip, lr}^
    3e14:	29c40000 	stmibcs	r4, {}^	; <UNPREDICTABLE>
    3e18:	00040000 	andeq	r0, r4, r0
    3e1c:	9f5001f3 	svcls	0x005001f3
	...
    3e28:	0000299c 	muleq	r0, ip, r9
    3e2c:	000029a5 	andeq	r2, r0, r5, lsr #19
    3e30:	a5510001 	ldrbge	r0, [r1, #-1]
    3e34:	ba000029 	blt	3ee0 <__exidx_end+0x125c>
    3e38:	01000029 	tsteq	r0, r9, lsr #32
    3e3c:	29ba5500 	ldmibcs	sl!, {r8, sl, ip, lr}
    3e40:	29be0000 	ldmibcs	lr!, {}	; <UNPREDICTABLE>
    3e44:	00040000 	andeq	r0, r4, r0
    3e48:	9f5101f3 	svcls	0x005101f3
    3e4c:	000029be 			; <UNDEFINED> instruction: 0x000029be
    3e50:	000029c0 	andeq	r2, r0, r0, asr #19
    3e54:	c0550001 	subsgt	r0, r5, r1
    3e58:	c4000029 	strgt	r0, [r0], #-41	; 0xffffffd7
    3e5c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3e60:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3e64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e68:	00000000 	andeq	r0, r0, r0
    3e6c:	0029a600 	eoreq	sl, r9, r0, lsl #12
    3e70:	0029bd00 	eoreq	fp, r9, r0, lsl #26
    3e74:	70000500 	andvc	r0, r0, r0, lsl #10
    3e78:	9f293000 	svcls	0x00293000
    3e7c:	000029be 			; <UNDEFINED> instruction: 0x000029be
    3e80:	000029c4 	andeq	r2, r0, r4, asr #19
    3e84:	00700005 	rsbseq	r0, r0, r5
    3e88:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    3e8c:	00000000 	andeq	r0, r0, r0
    3e90:	c4000000 	strgt	r0, [r0], #-0
    3e94:	c6000029 	strgt	r0, [r0], -r9, lsr #32
    3e98:	01000029 	tsteq	r0, r9, lsr #32
    3e9c:	29c65000 	stmibcs	r6, {ip, lr}^
    3ea0:	29cc0000 	stmibcs	ip, {}^	; <UNPREDICTABLE>
    3ea4:	00040000 	andeq	r0, r4, r0
    3ea8:	9f5001f3 	svcls	0x005001f3
	...
    3eb4:	000029c4 	andeq	r2, r0, r4, asr #19
    3eb8:	000029c8 	andeq	r2, r0, r8, asr #19
    3ebc:	c8510001 	ldmdagt	r1, {r0}^
    3ec0:	cc000029 	stcgt	0, cr0, [r0], {41}	; 0x29
    3ec4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3ec8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3ecc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ed0:	00000000 	andeq	r0, r0, r0
    3ed4:	0029c400 	eoreq	ip, r9, r0, lsl #8
    3ed8:	0029cb00 	eoreq	ip, r9, r0, lsl #22
    3edc:	52000100 	andpl	r0, r0, #0, 2
    3ee0:	000029cb 	andeq	r2, r0, fp, asr #19
    3ee4:	000029cc 	andeq	r2, r0, ip, asr #19
    3ee8:	01f30004 	mvnseq	r0, r4
    3eec:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    3efc:	00010000 	andeq	r0, r1, r0
    3f00:	00000050 	andeq	r0, r0, r0, asr r0
    3f04:	00000000 	andeq	r0, r0, r0
    3f08:	f3000400 	vshl.u8	d0, d0, d0
    3f0c:	009f5001 	addseq	r5, pc, r1
	...
    3f1c:	01000000 	mrseq	r0, (UNDEF: 0)
    3f20:	00005100 	andeq	r5, r0, r0, lsl #2
    3f24:	00000000 	andeq	r0, r0, r0
    3f28:	00040000 	andeq	r0, r4, r0
    3f2c:	9f5101f3 	svcls	0x005101f3
	...
    3f40:	00520001 	subseq	r0, r2, r1
    3f44:	00000000 	andeq	r0, r0, r0
    3f48:	04000000 	streq	r0, [r0], #-0
    3f4c:	5201f300 	andpl	pc, r1, #0, 6
    3f50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f54:	00000000 	andeq	r0, r0, r0
    3f58:	52000100 	andpl	r0, r0, #0, 2
	...
    3f64:	01f30015 	mvnseq	r0, r5, lsl r0
    3f68:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    3f6c:	01f35201 	mvnseq	r5, r1, lsl #4
    3f70:	30254052 	eorcc	r4, r5, r2, asr r0
    3f74:	0001282e 	andeq	r2, r1, lr, lsr #16
    3f78:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    3f88:	01000000 	mrseq	r0, (UNDEF: 0)
    3f8c:	00005300 	andeq	r5, r0, r0, lsl #6
    3f90:	00000000 	andeq	r0, r0, r0
    3f94:	00040000 	andeq	r0, r4, r0
    3f98:	9f5301f3 	svcls	0x005301f3
	...
    3fac:	80700004 	rsbshi	r0, r0, r4
    3fb0:	00009f04 	andeq	r9, r0, r4, lsl #30
    3fb4:	00000000 	andeq	r0, r0, r0
    3fb8:	000d0000 	andeq	r0, sp, r0
    3fbc:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3fc0:	5001f324 	andpl	pc, r1, r4, lsr #6
    3fc4:	04802322 	streq	r2, [r0], #802	; 0x322
    3fc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3fcc:	00000000 	andeq	r0, r0, r0
    3fd0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3fdc:	01f30052 	mvnseq	r0, r2, asr r0
    3fe0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3fe4:	23225001 			; <UNDEFINED> instruction: 0x23225001
    3fe8:	01f30480 	mvnseq	r0, r0, lsl #9
    3fec:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3ff0:	f3225001 	vhadd.u32	d5, d2, d1
    3ff4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3ff8:	01282930 			; <UNDEFINED> instruction: 0x01282930
    3ffc:	23131600 	tstcs	r3, #0, 12
    4000:	01f30484 	mvnseq	r0, r4, lsl #9
    4004:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4008:	23225001 			; <UNDEFINED> instruction: 0x23225001
    400c:	01f30480 	mvnseq	r0, r0, lsl #9
    4010:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4014:	f3225001 	vhadd.u32	d5, d2, d1
    4018:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    401c:	01282930 			; <UNDEFINED> instruction: 0x01282930
    4020:	f3131600 	vmax.u16	d1, d3, d0
    4024:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4028:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    402c:	9f131600 	svcls	0x00131600
	...
    4040:	00510001 	subseq	r0, r1, r1
    4044:	00000000 	andeq	r0, r0, r0
    4048:	2f000000 	svccs	0x00000000
    404c:	01f33000 	mvnseq	r3, r0
    4050:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4054:	01f35201 	mvnseq	r5, r1, lsl #4
    4058:	30254052 	eorcc	r4, r5, r2, asr r0
    405c:	0001282e 	andeq	r2, r1, lr, lsr #16
    4060:	01f31316 	mvnseq	r1, r6, lsl r3
    4064:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4068:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
    406c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4070:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    4074:	01282930 			; <UNDEFINED> instruction: 0x01282930
    4078:	9f131600 	svcls	0x00131600
	...
    408c:	00500001 	subseq	r0, r0, r1
    4090:	00000000 	andeq	r0, r0, r0
    4094:	04000000 	streq	r0, [r0], #-0
    4098:	5001f300 	andpl	pc, r1, r0, lsl #6
    409c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    40ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    40b8:	01f30004 	mvnseq	r0, r4
    40bc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    40cc:	00010000 	andeq	r0, r1, r0
    40d0:	00000052 	andeq	r0, r0, r2, asr r0
    40d4:	00000000 	andeq	r0, r0, r0
    40d8:	f3000400 	vshl.u8	d0, d0, d0
    40dc:	009f5201 	addseq	r5, pc, r1, lsl #4
    40e0:	00000000 	andeq	r0, r0, r0
    40e4:	01000000 	mrseq	r0, (UNDEF: 0)
    40e8:	00005200 	andeq	r5, r0, r0, lsl #4
    40ec:	00000000 	andeq	r0, r0, r0
    40f0:	001b0000 	andseq	r0, fp, r0
    40f4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    40f8:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    40fc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4100:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4104:	8000000f 	andhi	r0, r0, pc
    4108:	0001282b 	andeq	r2, r1, fp, lsr #16
    410c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    411c:	01000000 	mrseq	r0, (UNDEF: 0)
    4120:	00005300 	andeq	r5, r0, r0, lsl #6
    4124:	00000000 	andeq	r0, r0, r0
    4128:	00040000 	andeq	r0, r4, r0
    412c:	9f5301f3 	svcls	0x005301f3
	...
    4138:	00530001 	subseq	r0, r3, r1
    413c:	00000000 	andeq	r0, r0, r0
    4140:	1b000000 	blne	4148 <__exidx_end+0x14c4>
    4144:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4148:	01f31c40 	mvnseq	r1, r0, asr #24
    414c:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    4150:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4154:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4158:	01282b80 	smlawbeq	r8, r0, fp, r2
    415c:	9f131600 	svcls	0x00131600
	...
    4170:	00910002 	addseq	r0, r1, r2
	...
    417c:	007d0002 	rsbseq	r0, sp, r2
	...
    4190:	80700004 	rsbshi	r0, r0, r4
    4194:	00009f04 	andeq	r9, r0, r4, lsl #30
    4198:	00000000 	andeq	r0, r0, r0
    419c:	000d0000 	andeq	r0, sp, r0
    41a0:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    41a4:	5001f324 	andpl	pc, r1, r4, lsr #6
    41a8:	04802322 	streq	r2, [r0], #802	; 0x322
    41ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    41b0:	00000000 	andeq	r0, r0, r0
    41b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    41c0:	01f30064 	mvnseq	r0, r4, rrx
    41c4:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    41c8:	23225001 			; <UNDEFINED> instruction: 0x23225001
    41cc:	01f30480 	mvnseq	r0, r0, lsl #9
    41d0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    41d4:	f3225001 	vhadd.u32	d5, d2, d1
    41d8:	4b405301 	blmi	1018de4 <__ccfg+0xff8e3c>
    41dc:	0f0c2224 	svceq	0x000c2224
    41e0:	2c800000 	stccs	0, cr0, [r0], {0}
    41e4:	16000128 	strne	r0, [r0], -r8, lsr #2
    41e8:	04842313 	streq	r2, [r4], #787	; 0x313
    41ec:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    41f0:	5001f324 	andpl	pc, r1, r4, lsr #6
    41f4:	04802322 	streq	r2, [r0], #802	; 0x322
    41f8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    41fc:	5001f324 	andpl	pc, r1, r4, lsr #6
    4200:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4204:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4208:	00000f0c 	andeq	r0, r0, ip, lsl #30
    420c:	01282c80 	smlawbeq	r8, r0, ip, r2
    4210:	f3131600 	vmax.u16	d1, d3, d0
    4214:	4b405301 	blmi	1018e20 <__ccfg+0xff8e78>
    4218:	0f0c2224 	svceq	0x000c2224
    421c:	2b800000 	blcs	fe004224 <_estack+0xddfff224>
    4220:	16000128 	strne	r0, [r0], -r8, lsr #2
    4224:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4234:	000a0000 	andeq	r0, sl, r0
    4238:	ff0a0074 			; <UNDEFINED> instruction: 0xff0a0074
    423c:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    4240:	00009f24 	andeq	r9, r0, r4, lsr #30
    4244:	00000000 	andeq	r0, r0, r0
    4248:	000c0000 	andeq	r0, ip, r0
    424c:	0294007d 	addseq	r0, r4, #125	; 0x7d
    4250:	1affff0a 	bne	3e80 <__exidx_end+0x11fc>
    4254:	9f240073 	svcls	0x00240073
	...
    4260:	007d0024 	rsbseq	r0, sp, r4, lsr #32
    4264:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    4268:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    426c:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    4270:	01f35301 	mvnseq	r5, r1, lsl #6
    4274:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4278:	000f0c22 	andeq	r0, pc, r2, lsr #24
    427c:	282b8000 	stmdacs	fp!, {pc}
    4280:	13160001 	tstne	r6, #1
    4284:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    4294:	00010000 	andeq	r0, r1, r0
    4298:	00000050 	andeq	r0, r0, r0, asr r0
    429c:	00000000 	andeq	r0, r0, r0
    42a0:	f3000400 	vshl.u8	d0, d0, d0
    42a4:	009f5001 	addseq	r5, pc, r1
	...
    42b4:	01000000 	mrseq	r0, (UNDEF: 0)
    42b8:	00005100 	andeq	r5, r0, r0, lsl #2
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	00040000 	andeq	r0, r4, r0
    42c4:	9f5101f3 	svcls	0x005101f3
	...
    42d8:	00520001 	subseq	r0, r2, r1
    42dc:	00000000 	andeq	r0, r0, r0
    42e0:	01000000 	mrseq	r0, (UNDEF: 0)
    42e4:	00005400 	andeq	r5, r0, r0, lsl #8
    42e8:	00000000 	andeq	r0, r0, r0
    42ec:	00150000 	andseq	r0, r5, r0
    42f0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    42f4:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    42f8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    42fc:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4300:	13160001 	tstne	r6, #1
    4304:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4314:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4320:	01f3001d 	mvnseq	r0, sp, lsl r0
    4324:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4328:	f3022322 	vcgt.u8	d2, d2, d18
    432c:	01f35001 	mvnseq	r5, r1
    4330:	01f32251 	mvnseq	r2, r1, asr r2
    4334:	30254052 	eorcc	r4, r5, r2, asr r0
    4338:	0001282e 	andeq	r2, r1, lr, lsr #16
    433c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    434c:	06000000 	streq	r0, [r0], -r0
    4350:	74007500 	strvc	r7, [r0], #-1280	; 0xfffffb00
    4354:	009f1a00 	addseq	r1, pc, r0, lsl #20
	...
    4364:	01000000 	mrseq	r0, (UNDEF: 0)
    4368:	00005500 	andeq	r5, r0, r0, lsl #10
    436c:	00000000 	andeq	r0, r0, r0
    4370:	001d0000 	andseq	r0, sp, r0
    4374:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4378:	23225101 			; <UNDEFINED> instruction: 0x23225101
    437c:	5001f302 	andpl	pc, r1, r2, lsl #6
    4380:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4384:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4388:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    438c:	13160001 	tstne	r6, #1
    4390:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    43a0:	75000700 	strvc	r0, [r0, #-1792]	; 0xfffff900
    43a4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    43a8:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    43b8:	00050000 	andeq	r0, r5, r0
    43bc:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    43c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    43d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    43dc:	01f30004 	mvnseq	r0, r4
    43e0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    43f0:	00010000 	andeq	r0, r1, r0
    43f4:	00000051 	andeq	r0, r0, r1, asr r0
    43f8:	00000000 	andeq	r0, r0, r0
    43fc:	f3000400 	vshl.u8	d0, d0, d0
    4400:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4410:	01000000 	mrseq	r0, (UNDEF: 0)
    4414:	00005200 	andeq	r5, r0, r0, lsl #4
    4418:	00000000 	andeq	r0, r0, r0
    441c:	00010000 	andeq	r0, r1, r0
    4420:	00000054 	andeq	r0, r0, r4, asr r0
    4424:	00000000 	andeq	r0, r0, r0
    4428:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    442c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4430:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4434:	4b405301 	blmi	1019040 <__ccfg+0xff9098>
    4438:	0f0c2224 	svceq	0x000c2224
    443c:	2b800000 	blcs	fe004444 <_estack+0xddfff444>
    4440:	16000128 	strne	r0, [r0], -r8, lsr #2
    4444:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4454:	00010000 	andeq	r0, r1, r0
    4458:	00000053 	andeq	r0, r0, r3, asr r0
    445c:	00000000 	andeq	r0, r0, r0
    4460:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    446c:	01f3001b 	mvnseq	r0, fp, lsl r0
    4470:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    4474:	01f35301 	mvnseq	r5, r1, lsl #6
    4478:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    447c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4480:	282b8000 	stmdacs	fp!, {pc}
    4484:	13160001 	tstne	r6, #1
    4488:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4498:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    44a4:	00700006 	rsbseq	r0, r0, r6
    44a8:	9f220071 	svcls	0x00220071
	...
    44b4:	00560001 	subseq	r0, r6, r1
    44b8:	00000000 	andeq	r0, r0, r0
    44bc:	23000000 	movwcs	r0, #0
    44c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    44c4:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    44c8:	01f30223 	mvnseq	r0, r3, lsr #4
    44cc:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    44d0:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    44d4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    44d8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    44dc:	01282b80 	smlawbeq	r8, r0, fp, r2
    44e0:	9f131600 	svcls	0x00131600
	...
    44f4:	00760006 	rsbseq	r0, r6, r6
    44f8:	9f1a0074 	svcls	0x001a0074
	...
    4504:	00500001 	subseq	r0, r0, r1
	...
    4514:	01000000 	mrseq	r0, (UNDEF: 0)
    4518:	00005600 	andeq	r5, r0, r0, lsl #12
    451c:	00000000 	andeq	r0, r0, r0
    4520:	00230000 	eoreq	r0, r3, r0
    4524:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4528:	23225101 			; <UNDEFINED> instruction: 0x23225101
    452c:	5001f302 	andpl	pc, r1, r2, lsl #6
    4530:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4534:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4538:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    453c:	8000000f 	andhi	r0, r0, pc
    4540:	0001282b 	andeq	r2, r1, fp, lsr #16
    4544:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4554:	07000000 	streq	r0, [r0, -r0]
    4558:	0a007600 	beq	21d60 <__ccfg+0x1db8>
    455c:	9f1affff 	svcls	0x001affff
	...
    4570:	00700005 	rsbseq	r0, r0, r5
    4574:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    4578:	00000000 	andeq	r0, r0, r0
    457c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4580:	e4000029 	str	r0, [r0], #-41	; 0xffffffd7
    4584:	01000029 	tsteq	r0, r9, lsr #32
    4588:	29e45000 	stmibcs	r4!, {ip, lr}^
    458c:	2a1e0000 	bcs	784594 <__ccfg+0x7645ec>
    4590:	00010000 	andeq	r0, r1, r0
    4594:	002a1e55 	eoreq	r1, sl, r5, asr lr
    4598:	002a2800 	eoreq	r2, sl, r0, lsl #16
    459c:	f3000400 	vshl.u8	d0, d0, d0
    45a0:	009f5001 	addseq	r5, pc, r1
    45a4:	00000000 	andeq	r0, r0, r0
    45a8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    45ac:	d2000029 	andle	r0, r0, #41	; 0x29
    45b0:	01000029 	tsteq	r0, r9, lsr #32
    45b4:	29d25100 	ldmibcs	r2, {r8, ip, lr}^
    45b8:	2a0a0000 	bcs	2845c0 <__ccfg+0x264618>
    45bc:	00010000 	andeq	r0, r1, r0
    45c0:	002a0a54 	eoreq	r0, sl, r4, asr sl
    45c4:	002a2800 	eoreq	r2, sl, r0, lsl #16
    45c8:	f3000400 	vshl.u8	d0, d0, d0
    45cc:	009f5101 	addseq	r5, pc, r1, lsl #2
    45d0:	00000000 	andeq	r0, r0, r0
    45d4:	06000000 	streq	r0, [r0], -r0
    45d8:	1a00002a 	bne	4688 <__exidx_end+0x1a04>
    45dc:	0100002a 	tsteq	r0, sl, lsr #32
    45e0:	00005500 	andeq	r5, r0, r0, lsl #10
    45e4:	00000000 	andeq	r0, r0, r0
    45e8:	2a060000 	bcs	1845f0 <__ccfg+0x164648>
    45ec:	2a0a0000 	bcs	2845f4 <__ccfg+0x26464c>
    45f0:	00010000 	andeq	r0, r1, r0
    45f4:	002a0a54 	eoreq	r0, sl, r4, asr sl
    45f8:	002a1a00 	eoreq	r1, sl, r0, lsl #20
    45fc:	f3000400 	vshl.u8	d0, d0, d0
    4600:	009f5101 	addseq	r5, pc, r1, lsl #2
    4604:	00000000 	andeq	r0, r0, r0
    4608:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    460c:	4600002a 	strmi	r0, [r0], -sl, lsr #32
    4610:	0100002a 	tsteq	r0, sl, lsr #32
    4614:	2a465000 	bcs	119861c <__ccfg+0x1178674>
    4618:	2a540000 	bcs	1504620 <__ccfg+0x14e4678>
    461c:	00040000 	andeq	r0, r4, r0
    4620:	9f5001f3 	svcls	0x005001f3
	...
    4634:	00500001 	subseq	r0, r0, r1
    4638:	00000000 	andeq	r0, r0, r0
    463c:	01000000 	mrseq	r0, (UNDEF: 0)
    4640:	00005600 	andeq	r5, r0, r0, lsl #12
    4644:	00000000 	andeq	r0, r0, r0
    4648:	00040000 	andeq	r0, r4, r0
    464c:	9f5001f3 	svcls	0x005001f3
	...
    4660:	00550001 	subseq	r0, r5, r1
	...
    4670:	07000000 	streq	r0, [r0, -r0]
    4674:	73007000 	movwvc	r7, #0
    4678:	9f191c00 	svcls	0x00191c00
	...
    4684:	00700004 	rsbseq	r0, r0, r4
    4688:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    4698:	00040000 	andeq	r0, r4, r0
    469c:	9f07d00a 	svcls	0x0007d00a
	...
    46a8:	00500001 	subseq	r0, r0, r1
    46ac:	00000000 	andeq	r0, r0, r0
    46b0:	05000000 	streq	r0, [r0, #-0]
    46b4:	40007200 	andmi	r7, r0, r0, lsl #4
    46b8:	00009f25 	andeq	r9, r0, r5, lsr #30
    46bc:	00000000 	andeq	r0, r0, r0
    46c0:	00010000 	andeq	r0, r1, r0
    46c4:	00000050 	andeq	r0, r0, r0, asr r0
    46c8:	00000000 	andeq	r0, r0, r0
    46cc:	0a000400 	beq	56d4 <__exidx_end+0x2a50>
    46d0:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    46d4:	00000000 	andeq	r0, r0, r0
    46d8:	01000000 	mrseq	r0, (UNDEF: 0)
    46dc:	00005000 	andeq	r5, r0, r0
	...
    46ec:	00010000 	andeq	r0, r1, r0
    46f0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4700:	53000100 	movwpl	r0, #256	; 0x100
	...
    4714:	00500001 	subseq	r0, r0, r1
    4718:	00000000 	andeq	r0, r0, r0
    471c:	03000000 	movweq	r0, #0
    4720:	9f1b7000 	svcls	0x001b7000
	...
    472c:	01f30004 	mvnseq	r0, r4
    4730:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4740:	00070000 	andeq	r0, r7, r0
    4744:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    4748:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    4758:	01000000 	mrseq	r0, (UNDEF: 0)
    475c:	00005000 	andeq	r5, r0, r0
    4760:	00000000 	andeq	r0, r0, r0
    4764:	00060000 	andeq	r0, r6, r0
    4768:	4b5001f3 	blmi	1404f3c <__ccfg+0x13e4f94>
    476c:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    477c:	00010000 	andeq	r0, r1, r0
    4780:	00000055 	andeq	r0, r0, r5, asr r0
    4784:	00000000 	andeq	r0, r0, r0
    4788:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    478c:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    4790:	4b5001f3 	blmi	1404f64 <__ccfg+0x13e4fbc>
    4794:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    47a4:	2c000000 	stccs	0, cr0, [r0], {-0}
    47a8:	40007100 	andmi	r7, r0, r0, lsl #2
    47ac:	40007126 	andmi	r7, r0, r6, lsr #2
    47b0:	70264824 	eorvc	r4, r6, r4, lsr #16
    47b4:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    47b8:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    47bc:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    47c0:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    47c4:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    47c8:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    47cc:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    47d0:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    47d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	71003200 	mrsvc	r3, R8_usr
    47e0:	f3264000 	vhadd.u32	d4, d6, d0
    47e4:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    47e8:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    47ec:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    47f0:	00712226 	rsbseq	r2, r1, r6, lsr #4
    47f4:	26482448 	strbcs	r2, [r8], -r8, asr #8
    47f8:	3a1e0075 	bcc	7849d4 <__ccfg+0x764a2c>
    47fc:	01f32226 	mvnseq	r2, r6, lsr #4
    4800:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    4804:	48244800 	stmdami	r4!, {fp, lr}
    4808:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    480c:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    4810:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4820:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    482c:	01f30004 	mvnseq	r0, r4
    4830:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4840:	000b0000 	andeq	r0, fp, r0
    4844:	00700070 	rsbseq	r0, r0, r0, ror r0
    4848:	7026461e 	eorvc	r4, r6, lr, lsl r6
    484c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    4850:	00000000 	andeq	r0, r0, r0
    4854:	01000000 	mrseq	r0, (UNDEF: 0)
    4858:	00005000 	andeq	r5, r0, r0
    485c:	00000000 	andeq	r0, r0, r0
    4860:	000e0000 	andeq	r0, lr, r0
    4864:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4868:	461e5001 	ldrmi	r5, [lr], -r1
    486c:	5001f326 	andpl	pc, r1, r6, lsr #6
    4870:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    4880:	00010000 	andeq	r0, r1, r0
    4884:	00000055 	andeq	r0, r0, r5, asr r0
    4888:	00000000 	andeq	r0, r0, r0
    488c:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    4890:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    48a4:	00560001 	subseq	r0, r6, r1
	...
    48b4:	06000000 	streq	r0, [r0], -r0
    48b8:	76007000 	strvc	r7, [r0], -r0
    48bc:	009f1c00 	addseq	r1, pc, r0, lsl #24
    48c0:	00000000 	andeq	r0, r0, r0
    48c4:	01000000 	mrseq	r0, (UNDEF: 0)
    48c8:	00005000 	andeq	r5, r0, r0
	...
    48d8:	000a0000 	andeq	r0, sl, r0
    48dc:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    48e0:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    48e4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    48f4:	00010000 	andeq	r0, r1, r0
    48f8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4908:	73000900 	movwvc	r0, #2304	; 0x900
    490c:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    4910:	9f253a1a 	svcls	0x00253a1a
	...
    4924:	0073000a 	rsbseq	r0, r3, sl
    4928:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    492c:	9f25421a 	svcls	0x0025421a
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	00000140 	andeq	r0, r0, r0, asr #2
  18:	000000c8 	andeq	r0, r0, r8, asr #1
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	00000110 	andeq	r0, r0, r0, lsl r1
  24:	00000060 	andeq	r0, r0, r0, rrx
  28:	00000170 	andeq	r0, r0, r0, ror r1
  2c:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	07a10002 	streq	r0, [r1, r2]!
			i = k;
  40:	00040000 	andeq	r0, r4, r0
				j->Next = k;
  44:	00000000 	andeq	r0, r0, r0
  48:	0000029c 	muleq	r0, ip, r2
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000002a8 	andeq	r0, r0, r8, lsr #5
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	000002d4 	ldrdeq	r0, [r0], -r4
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
  60:	00000300 	andeq	r0, r0, r0, lsl #6
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	0000033c 	andeq	r0, r0, ip, lsr r3
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	00000390 	muleq	r0, r0, r3
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	descriptors [fd] = s;
  90:	000003f8 	strdeq	r0, [r0], -r8
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	0000050c 	andeq	r0, r0, ip, lsl #10
	if (s == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	0000055c 	andeq	r0, r0, ip, asr r5
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	000005e8 	andeq	r0, r0, r8, ror #11
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	000006f8 	strdeq	r0, [r0], -r8
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	000007fc 	strdeq	r0, [r0], -ip
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	00000838 	andeq	r0, r0, r8, lsr r8
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	000008dc 	ldrdeq	r0, [r0], -ip
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
			curr += 0x1000;
  f8:	00000a94 	muleq	r0, r4, sl
  fc:	00000258 	andeq	r0, r0, r8, asr r2
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
			upto = EE_SIZE - 1;
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	00000cec 	andeq	r0, r0, ip, ror #25
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1c310002 	ldcne	0, cr0, [r1], #-8
}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00000d4c 	andeq	r0, r0, ip, asr #26
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
 138:	00000d88 	andeq	r0, r0, r8, lsl #27
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
    cycles[0].onTime = numbers[0];
 140:	00000e08 	andeq	r0, r0, r8, lsl #28
    cycles[0].offTime = numbers[1];
 144:	00000018 	andeq	r0, r0, r8, lsl r0
    cycles[1].onTime = numbers[2];
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
    cycles[1].offTime = numbers[3];
 150:	00000e20 	andeq	r0, r0, r0, lsr #28
}
 154:	00000010 	andeq	r0, r0, r0, lsl r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
            number += settingsInput[i] - 48;
 160:	00000000 	andeq	r0, r0, r0
            numberMultiplier = numberMultiplier * 10;
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000000 	andeq	r0, r0, r0
 16c:	00000006 	andeq	r0, r0, r6
fsm root {
 170:	00000e30 	andeq	r0, r0, r0, lsr lr
 174:	000000cc 	andeq	r0, r0, ip, asr #1
 178:	00000efc 	strdeq	r0, [r0], -ip
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	00000f10 	andeq	r0, r0, r0, lsl pc
 184:	00000034 	andeq	r0, r0, r4, lsr r0
        initCycles();
 188:	00000f44 	andeq	r0, r0, r4, asr #30
        ser_outf(Initial, "Enter your name: ");
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	00000000 	andeq	r0, r0, r0
        ser_in(Get_Name, username, NAME_LENGTH);
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	00000f78 	andeq	r0, r0, r8, ror pc
        ser_outf(Show_Menu, "Welcome %s\n\r"
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_inf(Get_Choice, "%c", &choice);
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
        if (choice == 'A' || choice == 'a'){
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
 1b8:	00000000 	andeq	r0, r0, r0
            proceed Adjust_Intervals;
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
            proceed Monitor;
 1c0:	00000fd4 	ldrdeq	r0, [r0], -r4
        proceed Show_Menu;
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 1d0:	00000ff8 	strdeq	r0, [r0], -r8
 1d4:	0000000e 	andeq	r0, r0, lr
 1d8:	00000000 	andeq	r0, r0, r0
        processSettingsInput(settings);
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
        proceed Show_Menu;
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
 1f8:	00001006 	andeq	r1, r0, r6
        proceed Show_Menu;
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	00000000 	andeq	r0, r0, r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 204:	0000000e 	andeq	r0, r0, lr
 208:	0000101c 	andeq	r1, r0, ip, lsl r0
        displayCycle = YES;
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_inf(Await_Stop, "%c", ch);
 210:	00001040 	andeq	r1, r0, r0, asr #32
 214:	0000009c 	muleq	r0, ip, r0
 218:	000010dc 	ldrdeq	r1, [r0], -ip
        proceed Monitor;
 21c:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 220:	0000112c 	andeq	r1, r0, ip, lsr #2
 224:	00000048 	andeq	r0, r0, r8, asr #32
        leds(1, 0);
 228:	00001174 	andeq	r1, r0, r4, ror r1
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000058 	andeq	r0, r0, r8, asr r0
 238:	000011c4 	andeq	r1, r0, r4, asr #3
        leds(0, 0);
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
 240:	0000126c 	andeq	r1, r0, ip, ror #4
 244:	00000034 	andeq	r0, r0, r4, lsr r0
 248:	000012a0 	andeq	r1, r0, r0, lsr #5
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'S' || choice == 's') {
 254:	00000030 	andeq	r0, r0, r0, lsr r0
            proceed Stop;
 258:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'V' || choice == 'v') {
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
            proceed View_Settings;
 260:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
        } else if (choice == 'M' || choice == 'm') {
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
            proceed Monitor;
 268:	00000000 	andeq	r0, r0, r0
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 278:	00000104 	andeq	r0, r0, r4, lsl #2
 27c:	2e540002 	cdpcs	0, 5, cr0, cr4, cr2, {0}
 280:	00040000 	andeq	r0, r4, r0
	...
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
 298:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
 29c:	0000000e 	andeq	r0, r0, lr
	adddevfunc (ioreq_uart_a, devnum);
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
void udelay (volatile word n) {
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
	while (n) {
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
}
 2b8:	00000000 	andeq	r0, r0, r0
	while (n--);
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
		n--;
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
 2d0:	00000000 	andeq	r0, r0, r0
void mdelay (volatile word n) {
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
 2d8:	00000000 	andeq	r0, r0, r0
	while (n) {
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
 2e0:	00000000 	andeq	r0, r0, r0
}
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
		udelay (999);
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	000000bc 	strheq	r0, [r0], -ip
		n--;
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
void __pi_ondomain (lword d) {
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000a 	andeq	r0, r0, sl
		if (__pi_systat.effpdm > 1)
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
			__pi_systat.effpdm = 1;
 310:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
 31c:	00000040 	andeq	r0, r0, r0, asr #32
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 320:	00000000 	andeq	r0, r0, r0
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
 330:	00000000 	andeq	r0, r0, r0
}
 334:	00000006 	andeq	r0, r0, r6
 338:	00000000 	andeq	r0, r0, r0
void __pi_syserror (word ec, const char *m) {
 33c:	00000068 	andeq	r0, r0, r8, rrx
	diag ("SYSERR: %x, %s", ec, m);
 340:	00000000 	andeq	r0, r0, r0
 344:	00000050 	andeq	r0, r0, r0, asr r0
 348:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00000000 	andeq	r0, r0, r0
 354:	00000040 	andeq	r0, r0, r0, asr #32
		all_leds_blink;
 358:	00000000 	andeq	r0, r0, r0
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00000000 	andeq	r0, r0, r0
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	000013f4 	strdeq	r1, [r0], -r4
 374:	00000002 	andeq	r0, r0, r2
	...
	while (1) {
 380:	00000034 	andeq	r0, r0, r4, lsr r0
 384:	418b0002 	orrmi	r0, fp, r2
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
void tci_run_delay_timer () {
 390:	000013f6 	strdeq	r1, [r0], -r6
	setdel = __pi_mintk - __pi_old;
 394:	00000002 	andeq	r0, r0, r2
 398:	000013f8 	strdeq	r1, [r0], -r8
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	000013fa 	strdeq	r1, [r0], -sl
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 3a4:	00000002 	andeq	r0, r0, r2
 3a8:	000013fc 	strdeq	r1, [r0], -ip
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
	sti_tim;
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
}
 3bc:	43030002 	movwmi	r0, #12290	; 0x3002
 3c0:	00040000 	andeq	r0, r4, r0
	...
	cli_aux;
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
 3d4:	483e0002 	ldmdami	lr!, {r1}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 3d8:	00040000 	andeq	r0, r4, r0
	...
 3e4:	00000002 	andeq	r0, r0, r2
	sti_aux;
 3e8:	00000000 	andeq	r0, r0, r0
}
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
void AONRTCIntHandler () {
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 3fc:	4d420002 	stclmi	0, cr0, [r2, #-8]
 400:	00040000 	andeq	r0, r4, r0
	...
		if (__pi_utims [0] == 0)
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
		if (*(__pi_utims [0])) {
 410:	00000000 	andeq	r0, r0, r0
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
		if (*(__pi_utims [1])) {
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
			aux_timer_inactive = 0;
 424:	523c0002 	eorspl	r0, ip, #2
			(*(__pi_utims [1]))--;
 428:	00040000 	andeq	r0, r4, r0
		if (__pi_utims [2] == 0)
 42c:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
 430:	00001448 	andeq	r1, r0, r8, asr #8
			(*(__pi_utims [2]))--;
 434:	00000034 	andeq	r0, r0, r4, lsr r0
		if (__pi_utims [3] != 0) {
 438:	0000147c 	andeq	r1, r0, ip, ror r4
			if (*(__pi_utims [3])) {
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
				aux_timer_inactive = 0;
 440:	000014ac 	andeq	r1, r0, ip, lsr #9
				(*(__pi_utims [3]))--;
 444:	00000018 	andeq	r0, r0, r8, lsl r0
	if (__pi_systat.ledsts) {
 448:	000014c4 	andeq	r1, r0, r4, asr #9
 44c:	00000054 	andeq	r0, r0, r4, asr r0
		if (__pi_systat.ledblc++ == 0) {
 450:	00001518 	andeq	r1, r0, r8, lsl r5
 454:	00000040 	andeq	r0, r0, r0, asr #32
			if (__pi_systat.ledblk) {
 458:	00001558 	andeq	r1, r0, r8, asr r5
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	0000157c 	andeq	r1, r0, ip, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	00001590 	muleq	r0, r0, r5
				if (__pi_systat.ledsts & 0x2)
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000064 	andeq	r0, r0, r4, rrx
				if (__pi_systat.ledsts & 0x4)
 478:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 0;
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
 480:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.fstblk)
 484:	000000ec 	andeq	r0, r0, ip, ror #1
 488:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
 48c:	00000002 	andeq	r0, r0, r2
	if (events & AON_RTC_EVFLAGS_CH0) {
 490:	00000000 	andeq	r0, r0, r0
		cli_tim;
 494:	00000004 	andeq	r0, r0, r4
		__pi_new += setdel;
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
		setdel = 0;
 4a0:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
		aux_timer_inactive = 1;
 4b4:	5ce70002 	stclpl	0, cr0, [r7], #8
 4b8:	00040000 	andeq	r0, r4, r0
				if (__pi_systat.ledsts & 0x1)
 4bc:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 4c0:	000015a4 	andeq	r1, r0, r4, lsr #11
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
				if (__pi_systat.ledsts & 0x8)
 4d4:	60fd0002 	rscsvs	r0, sp, r2
				__pi_systat.ledblk = 1;
 4d8:	00040000 	andeq	r0, r4, r0
 4dc:	00000000 	andeq	r0, r0, r0
		if (aux_timer_inactive) {
 4e0:	0000161c 	andeq	r1, r0, ip, lsl r6
			cli_aux;
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	654d0002 	strbvs	r0, [sp, #-2]
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	00001670 	andeq	r1, r0, r0, ror r6
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
	cli_tim;
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	699d0002 	ldmibvs	sp, {r1}
	if (setdel) {
 518:	00040000 	andeq	r0, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 51c:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 520:	000016d0 	ldrdeq	r1, [r0], -r0
 524:	00000070 	andeq	r0, r0, r0, ror r0
	...
				AON_RTC_O_CH0CMP)) - gettav ());
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
	return NO;
 534:	6dce0002 	stclvs	0, cr0, [lr, #8]
			setdel = 0;
 538:	00040000 	andeq	r0, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 53c:	00000000 	andeq	r0, r0, r0
 540:	00001740 	andeq	r1, r0, r0, asr #14
}
 544:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
		return YES;
 550:	0000002c 	andeq	r0, r0, ip, lsr #32
 554:	72120002 	andsvc	r0, r2, #2
 558:	00040000 	andeq	r0, r4, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 55c:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
 560:	0000185c 	andeq	r1, r0, ip, asr r8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 564:	00000020 	andeq	r0, r0, r0, lsr #32
	UARTDisable (UART0_BASE);
 568:	0000187c 	andeq	r1, r0, ip, ror r8
	UARTConfigSetExpClk (UART0_BASE,
 56c:	00000230 	andeq	r0, r0, r0, lsr r2
 570:	00001aac 	andeq	r1, r0, ip, lsr #21
 574:	00000050 	andeq	r0, r0, r0, asr r0
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	78060002 	stmdavc	r6, {r1}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 588:	00040000 	andeq	r0, r4, r0
 58c:	00000000 	andeq	r0, r0, r0
 590:	00001afc 	strdeq	r1, [r0], -ip
	urates [0] = rate;
 594:	00000390 	muleq	r0, r0, r3
	...
}
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	7d990002 	ldcvc	0, cr0, [r9, #8]
 5a8:	00040000 	andeq	r0, r4, r0
 5ac:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 5b0:	00001e8c 	andeq	r1, r0, ip, lsl #29
 5b4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 5c4:	7e720002 	cdpvc	0, 7, cr0, cr2, cr2, {0}
 5c8:	00040000 	andeq	r0, r4, r0
	...
	__pi_uart_setrate (urates [0], __pi_uart);
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
 5d8:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	switch (operation) {
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
static int ioreq_uart_a (int operation, char *buf, int len) {
 5ec:	7fb90002 	svcvc	0x00b90002
 5f0:	00040000 	andeq	r0, r4, r0
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	00001ed4 	ldrdeq	r1, [r0], -r4
 5fc:	00000008 	andeq	r0, r0, r8
				*buf++ = uart_a_read;
 600:	00000000 	andeq	r0, r0, r0
 604:	00000006 	andeq	r0, r0, r6
			while (len && uart_a_char_available) {
 608:	00001edc 	ldrdeq	r1, [r0], -ip
 60c:	00000008 	andeq	r0, r0, r8
 610:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
 614:	00000006 	andeq	r0, r0, r6
}
 618:	00000000 	andeq	r0, r0, r0
 61c:	00000008 	andeq	r0, r0, r8
	...
				*buf++ = uart_a_read;
 628:	00000024 	andeq	r0, r0, r4, lsr #32
			uart_a_disable_int;
 62c:	80f30002 	rscshi	r0, r3, r2
 630:	00040000 	andeq	r0, r4, r0
			if (uart_a_char_available) {
 634:	00000000 	andeq	r0, r0, r0
 638:	00001ee4 	andeq	r1, r0, r4, ror #29
				uart_a_enable_int;
 63c:	000000d4 	ldrdeq	r0, [r0], -r4
 640:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
				goto Redo_rx;
 644:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			return -2;
 650:	000000b4 	strheq	r0, [r0], -r4
 654:	82fe0002 	rscshi	r0, lr, #2
				uart_a_write (*buf);
 658:	00040000 	andeq	r0, r4, r0
 65c:	00000000 	andeq	r0, r0, r0
			while (len && uart_a_room_in_tx) {
 660:	0000205c 	andeq	r2, r0, ip, asr r0
 664:	0000007c 	andeq	r0, r0, ip, ror r0
 668:	000020d8 	ldrdeq	r2, [r0], -r8
			if (len != operation) {
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
			uart_a_disable_int;
 670:	00002184 	andeq	r2, r0, r4, lsl #3
 674:	0000005c 	andeq	r0, r0, ip, asr r0
			if (uart_a_room_in_tx) {
 678:	000021e0 	andeq	r2, r0, r0, ror #3
 67c:	00000018 	andeq	r0, r0, r8, lsl r0
				uart_a_enable_int;
 680:	00000000 	andeq	r0, r0, r0
 684:	00000010 	andeq	r0, r0, r0, lsl r0
				*buf++ = uart_a_read;
 688:	000021f8 	strdeq	r2, [r0], -r8
			if (uart_a_room_in_tx) {
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
				uart_a_write (*buf);
 690:	00002208 	andeq	r2, r0, r8, lsl #4
 694:	00000014 	andeq	r0, r0, r4, lsl r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 698:	0000221c 	andeq	r2, r0, ip, lsl r2
 69c:	00000064 	andeq	r0, r0, r4, rrx
			uart_a_enable_int;
 6a0:	00002280 	andeq	r2, r0, r0, lsl #5
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	00002294 	muleq	r0, r4, r2
			return 0;
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
			if (len == UART_CNTRL_SETRATE) {
 6b0:	000022a8 	andeq	r2, r0, r8, lsr #5
				if (__pi_uart_setrate (*((word*)buf),
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
 6b8:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
 6bc:	00000028 	andeq	r0, r0, r8, lsr #32
				syserror (EREQPAR, "uar");
 6c0:	000022e4 	andeq	r2, r0, r4, ror #5
			syserror (ENOOPER, "uai");
 6c4:	00000010 	andeq	r0, r0, r0, lsl r0
			if (len == UART_CNTRL_GETRATE) {
 6c8:	000022f4 	strdeq	r2, [r0], -r4
				return 1;
 6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 6d0:	00002320 	andeq	r2, r0, r0, lsr #6
			syserror (ENOOPER, "uai");
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	00002334 	andeq	r2, r0, r4, lsr r3
 6dc:	00000014 	andeq	r0, r0, r4, lsl r0
 6e0:	00002348 	andeq	r2, r0, r8, asr #6
 6e4:	00000110 	andeq	r0, r0, r0, lsl r1
 6e8:	00002458 	andeq	r2, r0, r8, asr r4
 6ec:	00000064 	andeq	r0, r0, r4, rrx
 6f0:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
 6f4:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 6f8:	000024e4 	andeq	r2, r0, r4, ror #9
void UART0IntHandler () {
 6fc:	00000150 	andeq	r0, r0, r0, asr r1
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 708:	0000003c 	andeq	r0, r0, ip, lsr r0
 70c:	8e190002 	cdphi	0, 1, cr0, cr9, cr2, {0}
 710:	00040000 	andeq	r0, r4, r0
	...
		RISE_N_SHINE;
 71c:	000000f4 	strdeq	r0, [r0], -r4
 720:	00002634 	andeq	r2, r0, r4, lsr r6
		i_trigger (devevent (UART_A, READ));
 724:	00000220 	andeq	r0, r0, r0, lsr #4
 728:	00002854 	andeq	r2, r0, r4, asr r8
 72c:	00000060 	andeq	r0, r0, r0, rrx
 730:	00000000 	andeq	r0, r0, r0
 734:	00000078 	andeq	r0, r0, r8, ror r0
 738:	000028b4 			; <UNDEFINED> instruction: 0x000028b4
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 748:	00000044 	andeq	r0, r0, r4, asr #32
 74c:	97400002 	strbls	r0, [r0, -r2]
 750:	00040000 	andeq	r0, r4, r0
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 75c:	00000010 	andeq	r0, r0, r0, lsl r0
		i_trigger (devevent (UART_A, WRITE));
 760:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
 764:	00000018 	andeq	r0, r0, r8, lsl r0
 768:	000028cc 	andeq	r2, r0, ip, asr #17
		RISE_N_SHINE;
 76c:	0000004c 	andeq	r0, r0, ip, asr #32
 770:	00000000 	andeq	r0, r0, r0
 774:	00000030 	andeq	r0, r0, r0, lsr r0
		i_trigger (devevent (UART_A, WRITE));
 778:	00002918 	andeq	r2, r0, r8, lsl r9
 77c:	0000006c 	andeq	r0, r0, ip, rrx
 780:	00002984 	andeq	r2, r0, r4, lsl #19
 784:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 790:	00000044 	andeq	r0, r0, r4, asr #32
 794:	9b100002 	blls	4007a4 <__ccfg+0x3e07fc>
 798:	00040000 	andeq	r0, r4, r0
 79c:	00000000 	andeq	r0, r0, r0
 7a0:	0000299c 	muleq	r0, ip, r9
}
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
 7a8:	000029c4 	andeq	r2, r0, r4, asr #19
 7ac:	00000008 	andeq	r0, r0, r8
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	00000022 	andeq	r0, r0, r2, lsr #32
void __buttons_setirq (int val) {
 7b8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 7bc:	0000002e 	andeq	r0, r0, lr, lsr #32
 7c0:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 7c4:	00000034 	andeq	r0, r0, r4, lsr r0
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
 7d8:	00000064 	andeq	r0, r0, r4, rrx
 7dc:	a0bb0002 	adcsge	r0, fp, r2
 7e0:	00040000 	andeq	r0, r4, r0
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	000029cc 	andeq	r2, r0, ip, asr #19
}
 7ec:	0000005c 	andeq	r0, r0, ip, asr r0
 7f0:	00002a28 	andeq	r2, r0, r8, lsr #20
 7f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7f8:	00000000 	andeq	r0, r0, r0
void __pinlist_setirq (int val) {
 7fc:	00000090 	muleq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 800:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 804:	00000018 	andeq	r0, r0, r8, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 808:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 80c:	00000060 	andeq	r0, r0, r0, rrx
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 810:	00000000 	andeq	r0, r0, r0
 814:	00000034 	andeq	r0, r0, r4, lsr r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 818:	00000000 	andeq	r0, r0, r0
 81c:	00000038 	andeq	r0, r0, r8, lsr r0
 820:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 824:	0000000c 	andeq	r0, r0, ip
}
 828:	00000000 	andeq	r0, r0, r0
 82c:	00000034 	andeq	r0, r0, r4, lsr r0
 830:	00000000 	andeq	r0, r0, r0
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	00000001 	andeq	r0, r0, r1
       4:	00000001 	andeq	r0, r0, r1
       8:	00000001 	andeq	r0, r0, r1
       c:	00000001 	andeq	r0, r0, r1
      10:	00000001 	andeq	r0, r0, r1
      14:	00000001 	andeq	r0, r0, r1
	...
      20:	00000110 	andeq	r0, r0, r0, lsl r1
      24:	00000110 	andeq	r0, r0, r0, lsl r1
      28:	00000118 	andeq	r0, r0, r8, lsl r1
      2c:	0000013a 	andeq	r0, r0, sl, lsr r1
      30:	00000158 	andeq	r0, r0, r8, asr r1
      34:	00000170 	andeq	r0, r0, r0, ror r1
	...
			i = k;
      40:	00000186 	andeq	r0, r0, r6, lsl #3
				j->Next = k;
      44:	0000024c 	andeq	r0, r0, ip, asr #4
      48:	00000252 	andeq	r0, r0, r2, asr r2
}
      4c:	0000026e 	andeq	r0, r0, lr, ror #4
	...
		release;
      58:	000001a6 	andeq	r0, r0, r6, lsr #3
      5c:	000001c8 	andeq	r0, r0, r8, asr #3
      60:	00000252 	andeq	r0, r0, r2, asr r2
      64:	0000026a 	andeq	r0, r0, sl, ror #4
	...
      70:	00000236 	andeq	r0, r0, r6, lsr r2
      74:	00000238 	andeq	r0, r0, r8, lsr r2
      78:	0000023a 	andeq	r0, r0, sl, lsr r2
      7c:	0000023c 	andeq	r0, r0, ip, lsr r2
	...
      88:	00000001 	andeq	r0, r0, r1
      8c:	00000001 	andeq	r0, r0, r1
	descriptors [fd] = s;
      90:	000000c8 	andeq	r0, r0, r8, asr #1
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00000110 	andeq	r0, r0, r0, lsl r1
      98:	00000110 	andeq	r0, r0, r0, lsl r1
	if (s == NULL)
      9c:	00000170 	andeq	r0, r0, r0, ror r1
		syserror (EMALLOC, "tcv05");
      a0:	00000170 	andeq	r0, r0, r0, ror r1
      a4:	0000029c 	muleq	r0, ip, r2
	...
      b0:	0000034a 	andeq	r0, r0, sl, asr #6
      b4:	00000350 	andeq	r0, r0, r0, asr r3
      b8:	00000350 	andeq	r0, r0, r0, asr r3
      bc:	00000350 	andeq	r0, r0, r0, asr r3
      c0:	00000354 	andeq	r0, r0, r4, asr r3
      c4:	00000356 	andeq	r0, r0, r6, asr r3
	...
      d0:	00000350 	andeq	r0, r0, r0, asr r3
      d4:	00000352 	andeq	r0, r0, r2, asr r3
      d8:	00000356 	andeq	r0, r0, r6, asr r3
      dc:	00000358 	andeq	r0, r0, r8, asr r3
	...
      e8:	00000368 	andeq	r0, r0, r8, ror #6
      ec:	0000036a 	andeq	r0, r0, sl, ror #6
      f0:	0000036c 	andeq	r0, r0, ip, ror #6
			wwait (st, 50);
      f4:	0000036e 	andeq	r0, r0, lr, ror #6
	...
		if (from >= EE_SIZE || upto < from)
     100:	000003a2 	andeq	r0, r0, r2, lsr #7
     104:	000003a6 	andeq	r0, r0, r6, lsr #7
			upto = EE_SIZE - 1;
     108:	000003a8 	andeq	r0, r0, r8, lsr #7
     10c:	000003aa 	andeq	r0, r0, sl, lsr #7
     110:	000003ac 	andeq	r0, r0, ip, lsr #7
     114:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
	...
     120:	000003d8 	ldrdeq	r0, [r0], -r8
     124:	000003de 	ldrdeq	r0, [r0], -lr
}
     128:	000003e0 	andeq	r0, r0, r0, ror #7
     12c:	000003e6 	andeq	r0, r0, r6, ror #7
	...
     138:	00000408 	andeq	r0, r0, r8, lsl #8
     13c:	0000048e 	andeq	r0, r0, lr, lsl #9
    cycles[0].onTime = numbers[0];
     140:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    cycles[0].offTime = numbers[1];
     144:	0000050c 	andeq	r0, r0, ip, lsl #10
	...
    cycles[1].offTime = numbers[3];
     150:	0000057c 	andeq	r0, r0, ip, ror r5
}
     154:	0000057e 	andeq	r0, r0, lr, ror r5
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	00000580 	andeq	r0, r0, r0, lsl #11
     15c:	00000594 	muleq	r0, r4, r5
	...
            numberMultiplier = numberMultiplier * 10;
     168:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     16c:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
fsm root {
     170:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     174:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
	...
     180:	000006f8 	strdeq	r0, [r0], -r8
     184:	000006fc 	strdeq	r0, [r0], -ip
        initCycles();
     188:	000006fe 	strdeq	r0, [r0], -lr
        ser_outf(Initial, "Enter your name: ");
     18c:	00000700 	andeq	r0, r0, r0, lsl #14
     190:	00000702 	andeq	r0, r0, r2, lsl #14
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	00000704 	andeq	r0, r0, r4, lsl #14
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
     1a0:	00000760 	andeq	r0, r0, r0, ror #14
     1a4:	00000764 	andeq	r0, r0, r4, ror #14
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	00000776 	andeq	r0, r0, r6, ror r7
     1ac:	000007a2 	andeq	r0, r0, r2, lsr #15
	...
        if (choice == 'A' || choice == 'a'){
     1b8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
            proceed Adjust_Intervals;
     1bc:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
            proceed Monitor;
     1c0:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
        proceed Show_Menu;
     1c4:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
	...
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
     1d4:	000007be 			; <UNDEFINED> instruction: 0x000007be
     1d8:	000007c0 	andeq	r0, r0, r0, asr #15
        processSettingsInput(settings);
     1dc:	000007c2 	andeq	r0, r0, r2, asr #15
        proceed Show_Menu;
     1e0:	000007c8 	andeq	r0, r0, r8, asr #15
     1e4:	000007ce 	andeq	r0, r0, lr, asr #15
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	000007d8 	ldrdeq	r0, [r0], -r8
     1ec:	000007da 	ldrdeq	r0, [r0], -sl
     1f0:	000007e6 	andeq	r0, r0, r6, ror #15
     1f4:	000007e8 	andeq	r0, r0, r8, ror #15
	...
        proceed Show_Menu;
     200:	000007fc 	strdeq	r0, [r0], -ip
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	000007fc 	strdeq	r0, [r0], -ip
     208:	000007fe 	strdeq	r0, [r0], -lr
        displayCycle = YES;
     20c:	00000800 	andeq	r0, r0, r0, lsl #16
	...
        ser_inf(Await_Stop, "%c", ch);
     218:	00000802 	andeq	r0, r0, r2, lsl #16
        proceed Monitor;
     21c:	00000804 	andeq	r0, r0, r4, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     220:	00000806 	andeq	r0, r0, r6, lsl #16
     224:	00000808 	andeq	r0, r0, r8, lsl #16
        leds(1, 0);
     228:	00000812 	andeq	r0, r0, r2, lsl r8
     22c:	00000816 	andeq	r0, r0, r6, lsl r8
     230:	00000820 	andeq	r0, r0, r0, lsr #16
     234:	00000822 	andeq	r0, r0, r2, lsr #16
	...
        leds(0, 0);
     240:	00000906 	andeq	r0, r0, r6, lsl #18
     244:	00000908 	andeq	r0, r0, r8, lsl #18
     248:	0000090a 	andeq	r0, r0, sl, lsl #18
     24c:	0000090e 	andeq	r0, r0, lr, lsl #18
     250:	0000091e 	andeq	r0, r0, lr, lsl r9
        } else if (choice == 'S' || choice == 's') {
     254:	00000920 	andeq	r0, r0, r0, lsr #18
	...
            proceed View_Settings;
     260:	00000908 	andeq	r0, r0, r8, lsl #18
        } else if (choice == 'M' || choice == 'm') {
     264:	0000090a 	andeq	r0, r0, sl, lsl #18
            proceed Monitor;
     268:	0000090e 	andeq	r0, r0, lr, lsl #18
     26c:	0000091e 	andeq	r0, r0, lr, lsl r9
     270:	00000920 	andeq	r0, r0, r0, lsr #18
     274:	0000095a 	andeq	r0, r0, sl, asr r9
	...
     280:	00000912 	andeq	r0, r0, r2, lsl r9
     284:	00000916 	andeq	r0, r0, r6, lsl r9
     288:	0000093e 	andeq	r0, r0, lr, lsr r9
     28c:	00000946 	andeq	r0, r0, r6, asr #18
	...
     298:	00000916 	andeq	r0, r0, r6, lsl r9
static void devinit_uart (int devnum) {
     29c:	0000091a 	andeq	r0, r0, sl, lsl r9
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	00000952 	andeq	r0, r0, r2, asr r9
     2a4:	00000956 	andeq	r0, r0, r6, asr r9
	...
	while (n) {
     2b0:	0000091a 	andeq	r0, r0, sl, lsl r9
     2b4:	0000091e 	andeq	r0, r0, lr, lsl r9
}
     2b8:	0000094c 	andeq	r0, r0, ip, asr #18
	while (n--);
     2bc:	00000952 	andeq	r0, r0, r2, asr r9
	...
		n--;
     2c8:	0000095a 	andeq	r0, r0, sl, asr r9
     2cc:	0000095c 	andeq	r0, r0, ip, asr r9
     2d0:	0000095e 	andeq	r0, r0, lr, asr r9
void mdelay (volatile word n) {
     2d4:	00000960 	andeq	r0, r0, r0, ror #18
     2d8:	00000962 	andeq	r0, r0, r2, ror #18
	while (n) {
     2dc:	00000964 	andeq	r0, r0, r4, ror #18
	...
		udelay (999);
     2e8:	0000095c 	andeq	r0, r0, ip, asr r9
     2ec:	0000095e 	andeq	r0, r0, lr, asr r9
		n--;
     2f0:	00000964 	andeq	r0, r0, r4, ror #18
     2f4:	00000966 	andeq	r0, r0, r6, ror #18
	...
void __pi_ondomain (lword d) {
     300:	00000976 	andeq	r0, r0, r6, ror r9
     304:	00000978 	andeq	r0, r0, r8, ror r9
		if (__pi_systat.effpdm > 1)
     308:	0000097a 	andeq	r0, r0, sl, ror r9
     30c:	0000097c 	andeq	r0, r0, ip, ror r9
	...
	PRCMPowerDomainOn (d);
     318:	0000098e 	andeq	r0, r0, lr, lsl #19
     31c:	00000990 	muleq	r0, r0, r9
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	00000992 	muleq	r0, r2, r9
     324:	00000994 	muleq	r0, r4, r9
	...
	__pi_systat.ondmns |= d;
     330:	000009d6 	ldrdeq	r0, [r0], -r6
}
     334:	000009d6 	ldrdeq	r0, [r0], -r6
     338:	000009da 	ldrdeq	r0, [r0], -sl
void __pi_syserror (word ec, const char *m) {
     33c:	000009dc 	ldrdeq	r0, [r0], -ip
	...
     348:	00000a0c 	andeq	r0, r0, ip, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	00000a0e 	andeq	r0, r0, lr, lsl #20
     350:	00000a10 	andeq	r0, r0, r0, lsl sl
     354:	00000a18 	andeq	r0, r0, r8, lsl sl
	...
		all_leds_blink;
     360:	00000a94 	muleq	r0, r4, sl
     364:	00000a94 	muleq	r0, r4, sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	00000a9a 	muleq	r0, sl, sl
     36c:	00000a9c 	muleq	r0, ip, sl
     370:	00000a9e 	muleq	r0, lr, sl
     374:	00000aa2 	andeq	r0, r0, r2, lsr #21
	...
	while (1) {
     380:	00000aae 	andeq	r0, r0, lr, lsr #21
     384:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
     388:	00000ac6 	andeq	r0, r0, r6, asr #21
     38c:	00000ac8 	andeq	r0, r0, r8, asr #21
void tci_run_delay_timer () {
     390:	00000ada 	ldrdeq	r0, [r0], -sl
	setdel = __pi_mintk - __pi_old;
     394:	00000af6 	strdeq	r0, [r0], -r6
     398:	00000b1a 	andeq	r0, r0, sl, lsl fp
     39c:	00000c74 	andeq	r0, r0, r4, ror ip
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a8:	00000aae 	andeq	r0, r0, lr, lsr #21
     3ac:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
     3b0:	00000b4e 	andeq	r0, r0, lr, asr #22
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	00000b52 	andeq	r0, r0, r2, asr fp
	...
}
     3c0:	00000b52 	andeq	r0, r0, r2, asr fp
     3c4:	00000b52 	andeq	r0, r0, r2, asr fp
     3c8:	00000b56 	andeq	r0, r0, r6, asr fp
     3cc:	00000b5a 	andeq	r0, r0, sl, asr fp
	cli_aux;
     3d0:	00000b5e 	andeq	r0, r0, lr, asr fp
     3d4:	00000b60 	andeq	r0, r0, r0, ror #22
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3e0:	00000b52 	andeq	r0, r0, r2, asr fp
     3e4:	00000b56 	andeq	r0, r0, r6, asr fp
	sti_aux;
     3e8:	00000b6c 	andeq	r0, r0, ip, ror #22
}
     3ec:	00000b6e 	andeq	r0, r0, lr, ror #22
     3f0:	00000b72 	andeq	r0, r0, r2, ror fp
     3f4:	00000b76 	andeq	r0, r0, r6, ror fp
	...
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     400:	00000b5a 	andeq	r0, r0, sl, asr fp
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	00000b5e 	andeq	r0, r0, lr, asr fp
		if (__pi_utims [0] == 0)
     408:	00000b60 	andeq	r0, r0, r0, ror #22
     40c:	00000b62 	andeq	r0, r0, r2, ror #22
		if (*(__pi_utims [0])) {
     410:	00000b66 	andeq	r0, r0, r6, ror #22
     414:	00000b6a 	andeq	r0, r0, sl, ror #22
	...
		if (*(__pi_utims [1])) {
     420:	00000b6e 	andeq	r0, r0, lr, ror #22
			aux_timer_inactive = 0;
     424:	00000b72 	andeq	r0, r0, r2, ror fp
			(*(__pi_utims [1]))--;
     428:	00000b8c 	andeq	r0, r0, ip, lsl #23
		if (__pi_utims [2] == 0)
     42c:	00000b90 	muleq	r0, r0, fp
		if (*(__pi_utims [2])) {
     430:	00000b92 	muleq	r0, r2, fp
			(*(__pi_utims [2]))--;
     434:	00000b9a 	muleq	r0, sl, fp
	...
				aux_timer_inactive = 0;
     440:	00000b84 	andeq	r0, r0, r4, lsl #23
				(*(__pi_utims [3]))--;
     444:	00000b86 	andeq	r0, r0, r6, lsl #23
	if (__pi_systat.ledsts) {
     448:	00000b88 	andeq	r0, r0, r8, lsl #23
     44c:	00000b8c 	andeq	r0, r0, ip, lsl #23
	...
			if (__pi_systat.ledblk) {
     458:	00000bc8 	andeq	r0, r0, r8, asr #23
     45c:	00000bcc 	andeq	r0, r0, ip, asr #23
     460:	00000bce 	andeq	r0, r0, lr, asr #23
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	00000bd6 	ldrdeq	r0, [r0], -r6
	...
     470:	00000bcc 	andeq	r0, r0, ip, asr #23
     474:	00000bce 	andeq	r0, r0, lr, asr #23
				if (__pi_systat.ledsts & 0x4)
     478:	00000bda 	ldrdeq	r0, [r0], -sl
				__pi_systat.ledblk = 0;
     47c:	00000bdc 	ldrdeq	r0, [r0], -ip
	...
			if (__pi_systat.fstblk)
     488:	00000bfa 	strdeq	r0, [r0], -sl
				__pi_systat.ledblc = 200;
     48c:	00000bfc 	strdeq	r0, [r0], -ip
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	00000bfe 	strdeq	r0, [r0], -lr
		cli_tim;
     494:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
		setdel = 0;
     4a0:	00000bfc 	strdeq	r0, [r0], -ip
		RISE_N_SHINE;
     4a4:	00000bfe 	strdeq	r0, [r0], -lr
		__pi_new += setdel;
     4a8:	00000c00 	andeq	r0, r0, r0, lsl #24
		RISE_N_SHINE;
     4ac:	00000c04 	andeq	r0, r0, r4, lsl #24
	...
		aux_timer_inactive = 1;
     4b8:	00000c5a 	andeq	r0, r0, sl, asr ip
				if (__pi_systat.ledsts & 0x1)
     4bc:	00000c5c 	andeq	r0, r0, ip, asr ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c0:	00000c5c 	andeq	r0, r0, ip, asr ip
     4c4:	00000c5e 	andeq	r0, r0, lr, asr ip
	...
     4d0:	00000c62 	andeq	r0, r0, r2, ror #24
				if (__pi_systat.ledsts & 0x8)
     4d4:	00000c66 	andeq	r0, r0, r6, ror #24
				__pi_systat.ledblk = 1;
     4d8:	00000c68 	andeq	r0, r0, r8, ror #24
     4dc:	00000c6a 	andeq	r0, r0, sl, ror #24
	...
			cli_aux;
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	00000001 	andeq	r0, r0, r1
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
	...
     500:	00000cec 	andeq	r0, r0, ip, ror #25
     504:	00000cec 	andeq	r0, r0, ip, ror #25
     508:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
word tci_update_delay_ticks (Boolean force) {
     50c:	00000cfc 	strdeq	r0, [r0], -ip
	...
	if (setdel) {
     518:	0000029c 	muleq	r0, ip, r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	000002a8 	andeq	r0, r0, r8, lsr #5
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	000002a8 	andeq	r0, r0, r8, lsr #5
     524:	000002d4 	ldrdeq	r0, [r0], -r4
     528:	000002d4 	ldrdeq	r0, [r0], -r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	000002fe 	strdeq	r0, [r0], -lr
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	00000300 	andeq	r0, r0, r0, lsl #6
	return NO;
     534:	0000033c 	andeq	r0, r0, ip, lsr r3
			setdel = 0;
     538:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	00000001 	andeq	r0, r0, r1
     540:	00000001 	andeq	r0, r0, r1
}
     544:	00000001 	andeq	r0, r0, r1
		sti_tim;
     548:	0000033c 	andeq	r0, r0, ip, lsr r3
		return YES;
     54c:	00000390 	muleq	r0, r0, r3
     550:	00000390 	muleq	r0, r0, r3
     554:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     558:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	000003f8 	strdeq	r0, [r0], -r8
	UARTDisable (UART0_BASE);
     560:	000003f8 	strdeq	r0, [r0], -r8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	0000050c 	andeq	r0, r0, ip, lsl #10
	UARTDisable (UART0_BASE);
     568:	0000050c 	andeq	r0, r0, ip, lsl #10
	UARTConfigSetExpClk (UART0_BASE,
     56c:	0000055c 	andeq	r0, r0, ip, asr r5
     570:	0000055c 	andeq	r0, r0, ip, asr r5
     574:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     578:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	000005e8 	andeq	r0, r0, r8, ror #11
     580:	000005e8 	andeq	r0, r0, r8, ror #11
     584:	000006f8 	strdeq	r0, [r0], -r8
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	00000001 	andeq	r0, r0, r1
     58c:	00000001 	andeq	r0, r0, r1
     590:	000006f8 	strdeq	r0, [r0], -r8
	urates [0] = rate;
     594:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
}
     598:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     59c:	000007fc 	strdeq	r0, [r0], -ip
     5a0:	000007fc 	strdeq	r0, [r0], -ip
     5a4:	00000838 	andeq	r0, r0, r8, lsr r8
     5a8:	00000838 	andeq	r0, r0, r8, lsr r8
     5ac:	000008dc 	ldrdeq	r0, [r0], -ip
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	000008dc 	ldrdeq	r0, [r0], -ip
     5b4:	00000a94 	muleq	r0, r4, sl
     5b8:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	00000001 	andeq	r0, r0, r1
     5c0:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	00000001 	andeq	r0, r0, r1
     5c8:	00000a94 	muleq	r0, r4, sl
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	00000cec 	andeq	r0, r0, ip, ror #25
     5d0:	00000001 	andeq	r0, r0, r1
     5d4:	00000001 	andeq	r0, r0, r1
     5d8:	00000001 	andeq	r0, r0, r1
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	00000cec 	andeq	r0, r0, ip, ror #25
     5e4:	00000d4c 	andeq	r0, r0, ip, asr #26
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     5f0:	00000e08 	andeq	r0, r0, r8, lsl #28
     5f4:	00000e0a 	andeq	r0, r0, sl, lsl #28
     5f8:	00000e0a 	andeq	r0, r0, sl, lsl #28
     5fc:	00000e0c 	andeq	r0, r0, ip, lsl #28
	...
			while (len && uart_a_char_available) {
     608:	00000e3e 	andeq	r0, r0, lr, lsr lr
     60c:	00000ee0 	andeq	r0, r0, r0, ror #29
     610:	00000ee4 	andeq	r0, r0, r4, ror #29
			if (len != operation) {
     614:	00000ee8 	andeq	r0, r0, r8, ror #29
	...
			uart_a_disable_int;
     620:	0000127c 	andeq	r1, r0, ip, ror r2
			if (uart_a_char_available) {
     624:	0000127e 	andeq	r1, r0, lr, ror r2
				*buf++ = uart_a_read;
     628:	00001282 	andeq	r1, r0, r2, lsl #5
			uart_a_disable_int;
     62c:	00001284 	andeq	r1, r0, r4, lsl #5
     630:	00001288 	andeq	r1, r0, r8, lsl #5
			if (uart_a_char_available) {
     634:	0000128c 	andeq	r1, r0, ip, lsl #5
     638:	0000128e 	andeq	r1, r0, lr, lsl #5
				uart_a_enable_int;
     63c:	00001298 	muleq	r0, r8, r2
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	000012ca 	andeq	r1, r0, sl, asr #5
     64c:	000012cc 	andeq	r1, r0, ip, asr #5
			return -2;
     650:	000012ce 	andeq	r1, r0, lr, asr #5
     654:	000012d2 	ldrdeq	r1, [r0], -r2
				uart_a_write (*buf);
     658:	00001362 	andeq	r1, r0, r2, ror #6
     65c:	000013c4 	andeq	r1, r0, r4, asr #7
			while (len && uart_a_room_in_tx) {
     660:	000013c8 	andeq	r1, r0, r8, asr #7
     664:	000013cc 	andeq	r1, r0, ip, asr #7
     668:	000013ce 	andeq	r1, r0, lr, asr #7
			if (len != operation) {
     66c:	000013d0 	ldrdeq	r1, [r0], -r0
	...
			if (uart_a_room_in_tx) {
     678:	000012e6 	andeq	r1, r0, r6, ror #5
     67c:	000012e8 	andeq	r1, r0, r8, ror #5
				uart_a_enable_int;
     680:	000012e8 	andeq	r1, r0, r8, ror #5
     684:	000012ea 	andeq	r1, r0, sl, ror #5
	...
				uart_a_write (*buf);
     690:	00000d4c 	andeq	r0, r0, ip, asr #26
     694:	00000d88 	andeq	r0, r0, r8, lsl #27
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	00000d88 	andeq	r0, r0, r8, lsl #27
     69c:	00000e08 	andeq	r0, r0, r8, lsl #28
			uart_a_enable_int;
     6a0:	00000e08 	andeq	r0, r0, r8, lsl #28
     6a4:	00000e20 	andeq	r0, r0, r0, lsr #28
     6a8:	00000001 	andeq	r0, r0, r1
			return 0;
     6ac:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     6b0:	00000e20 	andeq	r0, r0, r0, lsr #28
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	00000e30 	andeq	r0, r0, r0, lsr lr
     6b8:	00000001 	andeq	r0, r0, r1
     6bc:	00000001 	andeq	r0, r0, r1
				syserror (EREQPAR, "uar");
     6c0:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     6c4:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     6c8:	00000001 	andeq	r0, r0, r1
				return 1;
     6cc:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	00000e30 	andeq	r0, r0, r0, lsr lr
			syserror (ENOOPER, "uai");
     6d4:	00000efc 	strdeq	r0, [r0], -ip
     6d8:	00000efc 	strdeq	r0, [r0], -ip
     6dc:	00000f10 	andeq	r0, r0, r0, lsl pc
     6e0:	00000f10 	andeq	r0, r0, r0, lsl pc
     6e4:	00000f44 	andeq	r0, r0, r4, asr #30
     6e8:	00000f44 	andeq	r0, r0, r4, asr #30
     6ec:	00000f78 	andeq	r0, r0, r8, ror pc
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	00000f78 	andeq	r0, r0, r8, ror pc
void UART0IntHandler () {
     6fc:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     704:	00000fd4 	ldrdeq	r0, [r0], -r4
     708:	00000001 	andeq	r0, r0, r1
     70c:	00000001 	andeq	r0, r0, r1
     710:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     71c:	00000001 	andeq	r0, r0, r1
     720:	00000fd4 	ldrdeq	r0, [r0], -r4
		i_trigger (devevent (UART_A, READ));
     724:	00000ff8 	strdeq	r0, [r0], -r8
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00000ff8 	strdeq	r0, [r0], -r8
     734:	00001006 	andeq	r1, r0, r6
     738:	00000001 	andeq	r0, r0, r1
     73c:	00000001 	andeq	r0, r0, r1
     740:	00000001 	andeq	r0, r0, r1
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
     750:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	00000001 	andeq	r0, r0, r1
     758:	00001006 	andeq	r1, r0, r6
     75c:	0000101a 	andeq	r1, r0, sl, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     760:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	00000001 	andeq	r0, r0, r1
     768:	0000101c 	andeq	r1, r0, ip, lsl r0
		RISE_N_SHINE;
     76c:	00001040 	andeq	r1, r0, r0, asr #32
     770:	00001040 	andeq	r1, r0, r0, asr #32
     774:	000010dc 	ldrdeq	r1, [r0], -ip
		i_trigger (devevent (UART_A, WRITE));
     778:	000010dc 	ldrdeq	r1, [r0], -ip
     77c:	0000112c 	andeq	r1, r0, ip, lsr #2
     780:	0000112c 	andeq	r1, r0, ip, lsr #2
     784:	00001174 	andeq	r1, r0, r4, ror r1
     788:	00001174 	andeq	r1, r0, r4, ror r1
     78c:	000011c4 	andeq	r1, r0, r4, asr #3
     790:	00000001 	andeq	r0, r0, r1
     794:	00000001 	andeq	r0, r0, r1
     798:	000011c4 	andeq	r1, r0, r4, asr #3
     79c:	0000126c 	andeq	r1, r0, ip, ror #4
     7a0:	0000126c 	andeq	r1, r0, ip, ror #4
}
     7a4:	000012a0 	andeq	r1, r0, r0, lsr #5
     7a8:	000012a0 	andeq	r1, r0, r0, lsr #5
     7ac:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
     7b0:	00000001 	andeq	r0, r0, r1
     7b4:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
     7b8:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	00000001 	andeq	r0, r0, r1
     7c0:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	000013f4 	strdeq	r1, [r0], -r4
     7c8:	00000001 	andeq	r0, r0, r1
     7cc:	00000001 	andeq	r0, r0, r1
	...
     7d8:	00000001 	andeq	r0, r0, r1
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00000001 	andeq	r0, r0, r1
}
     7ec:	00000001 	andeq	r0, r0, r1
	...
     7f8:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     7fc:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     800:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	00000001 	andeq	r0, r0, r1
	...
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000001 	andeq	r0, r0, r1
     820:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     824:	00000001 	andeq	r0, r0, r1
}
     828:	00000001 	andeq	r0, r0, r1
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
     834:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     838:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     83c:	00000001 	andeq	r0, r0, r1
     840:	00000001 	andeq	r0, r0, r1
	buttons_disable ();
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	00000001 	andeq	r0, r0, r1
if (pin_sensor_int) {
     884:	00000001 	andeq	r0, r0, r1
     888:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
	__pinsen_disable_and_clear;
     8b8:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00000001 	andeq	r0, r0, r1
     8c4:	00000001 	andeq	r0, r0, r1
}
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00000001 	andeq	r0, r0, r1
void system_init () {
     8dc:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	000013f4 	strdeq	r1, [r0], -r4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	000013f6 	strdeq	r1, [r0], -r6
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	000013f6 	strdeq	r1, [r0], -r6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	000013f8 	strdeq	r1, [r0], -r8
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	000013f8 	strdeq	r1, [r0], -r8
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	000013fa 	strdeq	r1, [r0], -sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	000013fa 	strdeq	r1, [r0], -sl
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	000013fc 	strdeq	r1, [r0], -ip
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	000013fc 	strdeq	r1, [r0], -ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	00001440 	andeq	r1, r0, r0, asr #8
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
     938:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x80)
     93c:	00000001 	andeq	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x40)
     948:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	00000001 	andeq	r0, r0, r1
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	00000001 	andeq	r0, r0, r1
     95c:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
	...
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
     978:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     998:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_RTC_COMB);
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_GPIO_EDGE);
     9b0:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9d0:	00000001 	andeq	r0, r0, r1
     9d4:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     9d8:	00000001 	andeq	r0, r0, r1
     9dc:	00000001 	andeq	r0, r0, r1
	...
	EXTRA_INITIALIZERS;
     9e8:	0000144c 	andeq	r1, r0, ip, asr #8
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	00001450 	andeq	r1, r0, r0, asr r4
     9f0:	00001456 	andeq	r1, r0, r6, asr r4
     9f4:	00001458 	andeq	r1, r0, r8, asr r4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	00001466 	andeq	r1, r0, r6, ror #8
     9fc:	00001466 	andeq	r1, r0, r6, ror #8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	00001468 	andeq	r1, r0, r8, ror #8
     a04:	0000146a 	andeq	r1, r0, sl, ror #8
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a10:	00001452 	andeq	r1, r0, r2, asr r4
     a14:	00001454 	andeq	r1, r0, r4, asr r4
	IntEnable (INT_UART0_COMB);
     a18:	0000146a 	andeq	r1, r0, sl, ror #8
     a1c:	0000146c 	andeq	r1, r0, ip, ror #8
	...
		diag ("");
     a28:	00001454 	andeq	r1, r0, r4, asr r4
     a2c:	00001456 	andeq	r1, r0, r6, asr r4
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	00001458 	andeq	r1, r0, r8, asr r4
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	0000145a 	andeq	r1, r0, sl, asr r4
		diag ("Leftover RAM: %d bytes",
     a38:	00001460 	andeq	r1, r0, r0, ror #8
     a3c:	00001460 	andeq	r1, r0, r0, ror #8
	...
     a48:	00001484 	andeq	r1, r0, r4, lsl #9
     a4c:	0000148c 	andeq	r1, r0, ip, lsl #9
     a50:	00001496 	muleq	r0, r6, r4
     a54:	00001496 	muleq	r0, r6, r4
     a58:	0000149a 	muleq	r0, sl, r4
     a5c:	0000149c 	muleq	r0, ip, r4
	...
     a68:	0000149c 	muleq	r0, ip, r4
     a6c:	0000149c 	muleq	r0, ip, r4
     a70:	0000149e 	muleq	r0, lr, r4
     a74:	000014a0 	andeq	r1, r0, r0, lsr #9
	...
     a80:	000014ac 	andeq	r1, r0, ip, lsr #9
     a84:	000014ae 	andeq	r1, r0, lr, lsr #9
     a88:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
     a8c:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
	...
__attribute__ ((noreturn)) void __pi_release () {
     a98:	000014cc 	andeq	r1, r0, ip, asr #9
     a9c:	000014ce 	andeq	r1, r0, lr, asr #9
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     aa0:	000014d2 	ldrdeq	r1, [r0], -r2
	check_stack_overflow;
     aa4:	000014d4 	ldrdeq	r1, [r0], -r4
     aa8:	000014da 	ldrdeq	r1, [r0], -sl
     aac:	000014ea 	andeq	r1, r0, sl, ror #9
	...
	update_n_wake (MAX_WORD, NO);
     ab8:	000014cc 	andeq	r1, r0, ip, asr #9
	for_all_tasks (__pi_curr) {
     abc:	000014ce 	andeq	r1, r0, lr, asr #9
     ac0:	000014d2 	ldrdeq	r1, [r0], -r2
     ac4:	000014d4 	ldrdeq	r1, [r0], -r4
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	000014da 	ldrdeq	r1, [r0], -sl
	__SLEEP;
     acc:	000014da 	ldrdeq	r1, [r0], -sl
     ad0:	000014dc 	ldrdeq	r1, [r0], -ip
     ad4:	000014de 	ldrdeq	r1, [r0], -lr
	...
	system_event_count ++;
     ae0:	00001532 	andeq	r1, r0, r2, lsr r5
	switch (__pi_systat.effpdm) {
     ae4:	00001536 	andeq	r1, r0, r6, lsr r5
     ae8:	00001538 	andeq	r1, r0, r8, lsr r5
     aec:	0000153a 	andeq	r1, r0, sl, lsr r5
	...
     af8:	0000153e 	andeq	r1, r0, lr, lsr r5
     afc:	0000153e 	andeq	r1, r0, lr, lsr r5
	check_stack_overflow;
     b00:	00001540 	andeq	r1, r0, r0, asr #10
     b04:	00001542 	andeq	r1, r0, r2, asr #10
	...
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	00000001 	andeq	r0, r0, r1
			goto Redo;
     b14:	00000001 	andeq	r0, r0, r1
	for_all_tasks (__pi_curr) {
     b18:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	00000001 	andeq	r0, r0, r1
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	00000001 	andeq	r0, r0, r1
     b2c:	00000001 	andeq	r0, r0, r1
     b30:	00000001 	andeq	r0, r0, r1
     b34:	00000001 	andeq	r0, r0, r1
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b40:	00000001 	andeq	r0, r0, r1
			__WFI ();
     b44:	00000001 	andeq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	00000001 	andeq	r0, r0, r1
     b4c:	00000001 	andeq	r0, r0, r1
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	00000001 	andeq	r0, r0, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	00000001 	andeq	r0, r0, r1
     b60:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b64:	00000001 	andeq	r0, r0, r1
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b70:	00001448 	andeq	r1, r0, r8, asr #8
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b74:	0000147c 	andeq	r1, r0, ip, ror r4
     b78:	0000147c 	andeq	r1, r0, ip, ror r4
     b7c:	000014ac 	andeq	r1, r0, ip, lsr #9
     b80:	000014ac 	andeq	r1, r0, ip, lsr #9
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	000014c4 	andeq	r1, r0, r4, asr #9
     b88:	000014c4 	andeq	r1, r0, r4, asr #9
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	00001518 	andeq	r1, r0, r8, lsl r5
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	00001518 	andeq	r1, r0, r8, lsl r5
     b94:	00001558 	andeq	r1, r0, r8, asr r5
     b98:	00001558 	andeq	r1, r0, r8, asr r5
     b9c:	0000157c 	andeq	r1, r0, ip, ror r5
     ba0:	0000157c 	andeq	r1, r0, ip, ror r5
			SysCtrlSetRechargeBeforePowerDown
     ba4:	00001590 	muleq	r0, r0, r5
     ba8:	00001590 	muleq	r0, r0, r5
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	000015a4 	andeq	r1, r0, r4, lsr #11
     bb0:	00000001 	andeq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	00000001 	andeq	r0, r0, r1
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000001 	andeq	r0, r0, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	00000001 	andeq	r0, r0, r1
     bc4:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	00000001 	andeq	r0, r0, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	00000001 	andeq	r0, r0, r1
     bd0:	00000001 	andeq	r0, r0, r1
     bd4:	00000001 	andeq	r0, r0, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd8:	00000001 	andeq	r0, r0, r1
			while (!(AONWUCPowerStatusGet () &
     bdc:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	00000001 	andeq	r0, r0, r1
     be4:	00000001 	andeq	r0, r0, r1
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bf0:	000015a4 	andeq	r1, r0, r4, lsr #11
     bf4:	0000161c 	andeq	r1, r0, ip, lsl r6
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c00:	0000161c 	andeq	r1, r0, ip, lsl r6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	00001670 	andeq	r1, r0, r0, ror r6
	...
			reinit_uart ();
     c10:	00001670 	andeq	r1, r0, r0, ror r6
     c14:	000016d0 	ldrdeq	r1, [r0], -r0
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	000016de 	ldrdeq	r1, [r0], -lr
     c24:	000016de 	ldrdeq	r1, [r0], -lr
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	000016e4 	andeq	r1, r0, r4, ror #13
     c2c:	00001740 	andeq	r1, r0, r0, asr #14
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c38:	000016d0 	ldrdeq	r1, [r0], -r0
     c3c:	00001740 	andeq	r1, r0, r0, asr #14
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	00001754 	andeq	r1, r0, r4, asr r7
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	00001838 	andeq	r1, r0, r8, lsr r8
     c50:	0000183e 	andeq	r1, r0, lr, lsr r8
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c54:	00001842 	andeq	r1, r0, r2, asr #16
     c58:	00001848 	andeq	r1, r0, r8, asr #16
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5c:	0000185c 	andeq	r1, r0, ip, asr r8
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c68:	00001740 	andeq	r1, r0, r0, asr #14
			PRCMPowerDomainOff (
     c6c:	0000185c 	andeq	r1, r0, ip, asr r8
	...
	__SLEEP;
     c78:	00001888 	andeq	r1, r0, r8, lsl #17
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	0000188a 	andeq	r1, r0, sl, lsl #17
	goto Redo;
     c80:	00001958 	andeq	r1, r0, r8, asr r9
     c84:	0000197c 	andeq	r1, r0, ip, ror r9
     c88:	0000197e 	andeq	r1, r0, lr, ror r9
     c8c:	000019c6 	andeq	r1, r0, r6, asr #19
     c90:	000019f0 	strdeq	r1, [r0], -r0
     c94:	000019f2 	strdeq	r1, [r0], -r2
	...
     ca0:	0000188a 	andeq	r1, r0, sl, lsl #17
     ca4:	0000188c 	andeq	r1, r0, ip, lsl #17
     ca8:	0000192e 	andeq	r1, r0, lr, lsr #18
     cac:	00001958 	andeq	r1, r0, r8, asr r9
     cb0:	0000197c 	andeq	r1, r0, ip, ror r9
     cb4:	0000197e 	andeq	r1, r0, lr, ror r9
	...
     cc0:	000018ca 	andeq	r1, r0, sl, asr #17
     cc4:	000018d2 	ldrdeq	r1, [r0], -r2
     cc8:	00001a76 	andeq	r1, r0, r6, ror sl
     ccc:	00001a82 	andeq	r1, r0, r2, lsl #21
	...
     cd8:	000019d0 	ldrdeq	r1, [r0], -r0
     cdc:	000019f0 	strdeq	r1, [r0], -r0
     ce0:	000019f2 	strdeq	r1, [r0], -r2
     ce4:	00001a36 	andeq	r1, r0, r6, lsr sl
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	0000185c 	andeq	r1, r0, ip, asr r8
     cf4:	0000187c 	andeq	r1, r0, ip, ror r8
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	0000187c 	andeq	r1, r0, ip, ror r8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	00001aac 	andeq	r1, r0, ip, lsr #21
	system_init ();
     d00:	00001aac 	andeq	r1, r0, ip, lsr #21
	tcv_init ();
     d04:	00001afc 	strdeq	r1, [r0], -ip
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	00001b10 	andeq	r1, r0, r0, lsl fp
     d14:	00001b14 	andeq	r1, r0, r4, lsl fp
     d18:	00001dee 	andeq	r1, r0, lr, ror #27
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1c:	00001e36 	andeq	r1, r0, r6, lsr lr
	...
	delay (16, 0);
     d28:	00001b14 	andeq	r1, r0, r4, lsl fp
     d2c:	00001b1a 	andeq	r1, r0, sl, lsl fp
	__pi_release ();
     d30:	00001b52 	andeq	r1, r0, r2, asr fp
     d34:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
     d38:	00001e52 	andeq	r1, r0, r2, asr lr
     d3c:	00001e72 	andeq	r1, r0, r2, ror lr
	...
     d48:	00001c76 	andeq	r1, r0, r6, ror ip
static void killev (__pi_pcb_t *pid) {
     d4c:	00001cf0 	strdeq	r1, [r0], -r0
	wfun = (aword)(pid->code);
     d50:	00001e7a 	andeq	r1, r0, sl, ror lr
	for_all_tasks (i) {
     d54:	00001e82 	andeq	r1, r0, r2, lsl #29
	...
		for (j = 0; j < nevents (i); j++) {
     d60:	00001d08 	andeq	r1, r0, r8, lsl #26
			    || i->Events [j] . Event == wfun
     d64:	00001d5e 	andeq	r1, r0, lr, asr sp
		for (j = 0; j < nevents (i); j++) {
     d68:	00001dd4 	ldrdeq	r1, [r0], -r4
			if (i->Events [j] . Event == (aword)pid
     d6c:	00001dee 	andeq	r1, r0, lr, ror #27
	...
				wakeupev (i, j);
     d78:	00001d64 	andeq	r1, r0, r4, ror #26
     d7c:	00001dd4 	ldrdeq	r1, [r0], -r4
	for_all_tasks (i) {
     d80:	00001e36 	andeq	r1, r0, r6, lsr lr
}
     d84:	00001e3e 	andeq	r1, r0, lr, lsr lr
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	00001e82 	andeq	r1, r0, r2, lsl #29
static void qfree (aword *ch) {
     d8c:	00001e8c 	andeq	r1, r0, ip, lsl #29
	...
	m_setnextp (ch, chunk);
     d98:	00001afc 	strdeq	r1, [r0], -ip
	m_setnextp (cc, ch);
     d9c:	00001e8c 	andeq	r1, r0, ip, lsl #29
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da8:	00001e8c 	andeq	r1, r0, ip, lsl #29
     dac:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     db8:	00000001 	andeq	r0, r0, r1
     dbc:	00000001 	andeq	r0, r0, r1
     dc0:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	00001ed4 	ldrdeq	r1, [r0], -r4
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dd0:	00001ed4 	ldrdeq	r1, [r0], -r4
			m_setnextp (cc, m_nextp (chunk));
     dd4:	00001edc 	ldrdeq	r1, [r0], -ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	00000001 	andeq	r0, r0, r1
     ddc:	00000001 	andeq	r0, r0, r1
     de0:	00001edc 	ldrdeq	r1, [r0], -ip
     de4:	00001ee4 	andeq	r1, r0, r4, ror #29
     de8:	00000001 	andeq	r0, r0, r1
     dec:	00000001 	andeq	r0, r0, r1
			if (m_size (chunk) >= m_size (ch))
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
	...
		chunk = m_nextp (chunk))
     e00:	00001ee4 	andeq	r1, r0, r4, ror #29
     e04:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
	diag_wait (a);
     e0c:	0000205c 	andeq	r2, r0, ip, asr r0
	...
}
     e18:	0000206a 	andeq	r2, r0, sl, rrx
     e1c:	0000206c 	andeq	r2, r0, ip, rrx
	syserror (ESTATE, "state");
     e20:	00002070 	andeq	r2, r0, r0, ror r0
     e24:	00002074 	andeq	r2, r0, r4, ror r0
	...
void update_n_wake (word min, Boolean force) {
     e30:	00002378 	andeq	r2, r0, r8, ror r3
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	0000237a 	andeq	r2, r0, sl, ror r3
     e38:	0000237c 	andeq	r2, r0, ip, ror r3
     e3c:	0000237e 	andeq	r2, r0, lr, ror r3
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e48:	0000205c 	andeq	r2, r0, ip, asr r0
     e4c:	000020d8 	ldrdeq	r2, [r0], -r8
     e50:	000020d8 	ldrdeq	r2, [r0], -r8
     e54:	00002184 	andeq	r2, r0, r4, lsl #3
     e58:	00002184 	andeq	r2, r0, r4, lsl #3
     e5c:	000021e0 	andeq	r2, r0, r0, ror #3
     e60:	000021e0 	andeq	r2, r0, r0, ror #3
     e64:	000021f8 	strdeq	r2, [r0], -r8
     e68:	00000001 	andeq	r0, r0, r1
     e6c:	00000001 	andeq	r0, r0, r1
     e70:	000021f8 	strdeq	r2, [r0], -r8
		for_all_tasks (i) {
     e74:	00002208 	andeq	r2, r0, r8, lsl #4
	__pi_mintk = znew + min;
     e78:	00002208 	andeq	r2, r0, r8, lsl #4
     e7c:	0000221c 	andeq	r2, r0, ip, lsl r2
			if (!twaiting (i))
     e80:	0000221c 	andeq	r2, r0, ip, lsl r2
     e84:	00002280 	andeq	r2, r0, r0, lsl #5
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	00002280 	andeq	r2, r0, r0, lsl #5
     e8c:	00002294 	muleq	r0, r4, r2
     e90:	00002294 	muleq	r0, r4, r2
     e94:	000022a8 	andeq	r2, r0, r8, lsr #5
     e98:	000022a8 	andeq	r2, r0, r8, lsr #5
     e9c:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
     ea0:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
     ea4:	000022e4 	andeq	r2, r0, r4, ror #5
     ea8:	000022e4 	andeq	r2, r0, r4, ror #5
     eac:	000022f4 	strdeq	r2, [r0], -r4
     eb0:	000022f4 	strdeq	r2, [r0], -r4
     eb4:	00002320 	andeq	r2, r0, r0, lsr #6
				wakeuptm (i);
     eb8:	00002320 	andeq	r2, r0, r0, lsr #6
     ebc:	00002334 	andeq	r2, r0, r4, lsr r3
		for_all_tasks (i) {
     ec0:	00002334 	andeq	r2, r0, r4, lsr r3
				d = i->Timer - znew;
     ec4:	00002348 	andeq	r2, r0, r8, asr #6
     ec8:	00002348 	andeq	r2, r0, r8, asr #6
     ecc:	00002458 	andeq	r2, r0, r8, asr r4
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	00002458 	andeq	r2, r0, r8, asr r4
     ed4:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
     ed8:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
	__pi_old = znew;
     edc:	000024e4 	andeq	r2, r0, r4, ror #9
}
     ee0:	000024e4 	andeq	r2, r0, r4, ror #9
	TCI_RUN_DELAY_TIMER;
     ee4:	00002634 	andeq	r2, r0, r4, lsr r6
	...
}
     ef0:	00000001 	andeq	r0, r0, r1
     ef4:	00000001 	andeq	r0, r0, r1
     ef8:	00000001 	andeq	r0, r0, r1
void proceed (word state) {
     efc:	00000001 	andeq	r0, r0, r1
	...
	release;
     f08:	000026aa 	andeq	r2, r0, sl, lsr #13
     f0c:	000026ac 	andeq	r2, r0, ip, lsr #13
void __pi_wait (aword event, word state) {
     f10:	000026ae 	andeq	r2, r0, lr, lsr #13
	sint j = nevents (__pi_curr);
     f14:	000026b2 			; <UNDEFINED> instruction: 0x000026b2
	...
	if (j >= MAX_EVENTS_PER_TASK)
     f20:	00000001 	andeq	r0, r0, r1
		syserror (ENEVENTS, "sw");
     f24:	00000001 	andeq	r0, r0, r1
     f28:	00002634 	andeq	r2, r0, r4, lsr r6
	setestate (__pi_curr->Events [j], state, event);
     f2c:	00002854 	andeq	r2, r0, r4, asr r8
	incwait (__pi_curr);
     f30:	00002854 	andeq	r2, r0, r4, asr r8
	setestate (__pi_curr->Events [j], state, event);
     f34:	000028b4 			; <UNDEFINED> instruction: 0x000028b4
}
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	000028b4 			; <UNDEFINED> instruction: 0x000028b4
void __pi_trigger (aword event) {
     f44:	000028cc 	andeq	r2, r0, ip, asr #17
	...
		for (j = 0; j < nevents (i); j++) {
     f50:	0000291a 	andeq	r2, r0, sl, lsl r9
     f54:	0000291e 	andeq	r2, r0, lr, lsl r9
     f58:	00002924 	andeq	r2, r0, r4, lsr #18
			if (i->Events [j] . Event == event) {
     f5c:	00002926 	andeq	r2, r0, r6, lsr #18
	...
				wakeupev (i, j);
     f68:	0000291e 	andeq	r2, r0, lr, lsl r9
     f6c:	00002924 	andeq	r2, r0, r4, lsr #18
	for_all_tasks (i) {
     f70:	00002926 	andeq	r2, r0, r6, lsr #18
}
     f74:	0000292e 	andeq	r2, r0, lr, lsr #18
	...
	for_all_tasks (i) {
     f80:	00000001 	andeq	r0, r0, r1
	return 0;
     f84:	00000001 	andeq	r0, r0, r1
		if ((aword)i == pid) {
     f88:	00000001 	andeq	r0, r0, r1
			__pi_wait (pid, st);
     f8c:	00000001 	andeq	r0, r0, r1
}
     f90:	000028cc 	andeq	r2, r0, ip, asr #17
	for_all_tasks (i) {
     f94:	00002918 	andeq	r2, r0, r8, lsl r9
     f98:	00000001 	andeq	r0, r0, r1
void delay (word d, word state) {
     f9c:	00000001 	andeq	r0, r0, r1
	settstate (__pi_curr, state);
     fa0:	00002918 	andeq	r2, r0, r8, lsl r9
     fa4:	00002984 	andeq	r2, r0, r4, lsl #19
     fa8:	00002984 	andeq	r2, r0, r4, lsl #19
     fac:	0000299a 	muleq	r0, sl, r9
	...
	__pi_curr->Timer = __pi_old + d;
     fb8:	0000299c 	muleq	r0, ip, r9
     fbc:	000029c4 	andeq	r2, r0, r4, asr #19
	inctimer (__pi_curr);
     fc0:	000029c4 	andeq	r2, r0, r4, asr #19
     fc4:	000029cc 	andeq	r2, r0, ip, asr #19
     fc8:	00000001 	andeq	r0, r0, r1
}
     fcc:	00000001 	andeq	r0, r0, r1
     fd0:	00000001 	andeq	r0, r0, r1
	if (fun == NULL)
     fd4:	00000001 	andeq	r0, r0, r1
		return (int) __pi_curr;
     fd8:	00000001 	andeq	r0, r0, r1
     fdc:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
     fe0:	00000001 	andeq	r0, r0, r1
}
     fe4:	00000001 	andeq	r0, r0, r1
	...
	for_all_tasks (i)
     ff0:	00002a2e 	andeq	r2, r0, lr, lsr #20
     ff4:	00002a3e 	andeq	r2, r0, lr, lsr sl
int __pi_strlen (const char *s) {
     ff8:	00002a44 	andeq	r2, r0, r4, asr #20
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	00002a46 	andeq	r2, r0, r6, asr #20
	...
	while (n--)
    1008:	000029cc 	andeq	r2, r0, ip, asr #19
    100c:	00002a28 	andeq	r2, r0, r8, lsr #20
		*dest++ = *src++;
    1010:	00002a28 	andeq	r2, r0, r8, lsr #20
    1014:	00002a54 	andeq	r2, r0, r4, asr sl
    1018:	00000001 	andeq	r0, r0, r1
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	00000001 	andeq	r0, r0, r1
		syserror (EREQPAR, "addv");
    1020:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "addv");
    1024:	00000001 	andeq	r0, r0, r1
	if (ioreq [loc] != NULL)
    1028:	00000001 	andeq	r0, r0, r1
    102c:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "addv");
    1030:	00000001 	andeq	r0, r0, r1
	ioreq [loc] = rf;
    1034:	00000001 	andeq	r0, r0, r1
}
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000001 	andeq	r0, r0, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
    104c:	00000001 	andeq	r0, r0, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	00000001 	andeq	r0, r0, r1
    1054:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000547 	andeq	r0, r0, r7, asr #10
       4:	01380003 	teqeq	r8, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			i = k;
      40:	2f534f63 	svccs	0x00534f63
				j->Next = k;
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
}
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
}
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     130:	0300682e 	movweq	r6, #2094	; 0x82e
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
     13c:	00040068 	andeq	r0, r4, r8, rrx
    cycles[0].onTime = numbers[0];
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
    cycles[0].offTime = numbers[1];
     144:	00020500 	andeq	r0, r2, r0, lsl #10
    cycles[1].onTime = numbers[2];
     148:	03000000 	movweq	r0, #0
     14c:	1f05011c 	svcne	0x0005011c
    cycles[1].offTime = numbers[3];
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
}
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	03060905 	movweq	r0, #26885	; 0x6905
     15c:	0e054a0d 	vmlaeq.f32	s8, s10, s26
            number += settingsInput[i] - 48;
     160:	011e0501 	tsteq	lr, r1, lsl #10
            numberMultiplier = numberMultiplier * 10;
     164:	01063605 	tsteq	r6, r5, lsl #12
     168:	05822105 	streq	r2, [r2, #261]	; 0x105
     16c:	052e0644 	streq	r0, [lr, #-1604]!	; 0xfffff9bc
fsm root {
     170:	02040149 	andeq	r0, r4, #1073741842	; 0x40000012
     174:	af030505 	svcge	0x00030505
     178:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     180:	065c0501 	ldrbeq	r0, [ip], -r1, lsl #10
     184:	2e7dcc03 	cdpcs	12, 7, cr12, cr13, cr3, {0}
        initCycles();
     188:	01066f05 	tsteq	r6, r5, lsl #30
        ser_outf(Initial, "Enter your name: ");
     18c:	4a01df05 	bmi	77da8 <__ccfg+0x57e00>
     190:	0601f205 	streq	pc, [r1], -r5, lsl #4
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	02e3054a 	rsceq	r0, r3, #310378496	; 0x12800000
     198:	02e80501 	rsceq	r0, r8, #4194304	; 0x400000
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	02f00501 	rscseq	r0, r0, #4194304	; 0x400000
     1a0:	08e90501 	stmiaeq	r9!, {r0, r8, sl}^
     1a4:	14090501 	strne	r0, [r9], #-1281	; 0xfffffaff
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	01060e05 	tsteq	r6, r5, lsl #28
     1ac:	05202b05 	streq	r2, [r0, #-2821]!	; 0xfffff4fb
        if (choice == 'A' || choice == 'a'){
     1b0:	0905200e 	stmdbeq	r5, {r1, r2, r3, sp}
     1b4:	29053e06 	stmdbcs	r5, {r1, r2, r9, sl, fp, ip, sp}
     1b8:	09050106 	stmdbeq	r5, {r1, r2, r8}
            proceed Adjust_Intervals;
     1bc:	2c290522 	cfstr32cs	mvfx0, [r9], #-136	; 0xffffff78
            proceed Monitor;
     1c0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
        proceed Show_Menu;
     1c4:	09052c29 	stmdbeq	r5, {r0, r3, r5, sl, fp, sp}
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	2c150530 	cfldr32cs	mvfx0, [r5], {48}	; 0x30
     1cc:	22060905 	andcs	r0, r6, #81920	; 0x14000
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
     1d4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     1d8:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
        processSettingsInput(settings);
     1dc:	12054b06 	andne	r4, r5, #6144	; 0x1800
        proceed Show_Menu;
     1e0:	03820501 	orreq	r0, r2, #4194304	; 0x400000
     1e4:	03920501 	orrseq	r0, r2, #4194304	; 0x400000
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	03aa0501 			; <UNDEFINED> instruction: 0x03aa0501
     1ec:	95050106 	strls	r0, [r5, #-262]	; 0xfffffefa
     1f0:	b8055803 	stmdalt	r5, {r0, r1, fp, ip, lr}
     1f4:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
     1f8:	040103bd 	streq	r0, [r1], #-957	; 0xfffffc43
        proceed Show_Menu;
     1fc:	03050502 	movweq	r0, #21762	; 0x5502
     200:	17010283 	strne	r0, [r1, -r3, lsl #5]
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	01063e05 	tsteq	r6, r5, lsl #28
     208:	cf050104 	svcgt	0x00050104
        displayCycle = YES;
     20c:	f8030603 			; <UNDEFINED> instruction: 0xf8030603
        ser_inf(Await_Stop, "%c", ch);
     210:	e2052e7d 	and	r2, r5, #2000	; 0x7d0
     214:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
     218:	054a04d1 	strbeq	r0, [sl, #-1233]	; 0xfffffb2f
        proceed Monitor;
     21c:	4a0604e4 	bmi	1815b4 <__ccfg+0x16160c>
     220:	0108ed05 	tsteq	r8, r5, lsl #26
     224:	05130d05 	ldreq	r0, [r3, #-3333]	; 0xfffff2fb
        leds(1, 0);
     228:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     22c:	11052e0f 	tstne	r5, pc, lsl #28
     230:	42053d06 	andmi	r3, r5, #384	; 0x180
     234:	11050106 	tstne	r5, r6, lsl #2
     238:	08ed052e 	stmiaeq	sp!, {r1, r2, r3, r5, r8, sl}^
        leds(0, 0);
     23c:	09055b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, ip, lr}
     240:	06220513 			; <UNDEFINED> instruction: 0x06220513
     244:	20090501 	andcs	r0, r9, r1, lsl #10
     248:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
     24c:	0a033c09 	beq	cf278 <__ccfg+0xaf2d0>
     250:	4b2f0674 	blmi	bc1c28 <__ccfg+0xba1c80>
        } else if (choice == 'S' || choice == 's') {
     254:	03048105 	movweq	r8, #16645	; 0x4105
            proceed Stop;
     258:	84052e6e 	strhi	r2, [r5], #-3694	; 0xfffff192
        } else if (choice == 'V' || choice == 'v') {
     25c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
            proceed View_Settings;
     260:	2e0604a7 	cdpcs	4, 0, cr0, cr6, cr7, {5}
        } else if (choice == 'M' || choice == 'm') {
     264:	0104ac05 	tsteq	r4, r5, lsl #24
            proceed Monitor;
     268:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     26c:	01028303 	tsteq	r2, r3, lsl #6
     270:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     274:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     278:	030604be 	movweq	r0, #25790	; 0x64be
     27c:	052e7df8 	streq	r7, [lr, #-3576]!	; 0xfffff208
     280:	010604d1 	ldrdeq	r0, [r6, -r1]
     284:	5d060d05 	stcpl	13, cr0, [r6, #-20]	; 0xffffffec
     288:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
     28c:	3a050122 	bcc	14071c <__ccfg+0x120774>
     290:	25050106 	strcs	r0, [r5, #-262]	; 0xfffffefa
     294:	0648053c 			; <UNDEFINED> instruction: 0x0648053c
     298:	014d0520 	cmpeq	sp, r0, lsr #10
static void devinit_uart (int devnum) {
     29c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	0102b403 	tsteq	r2, r3, lsl #8
     2a4:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
void udelay (volatile word n) {
     2a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     2ac:	c7030660 	strgt	r0, [r3, -r0, ror #12]
	while (n) {
     2b0:	73052e7d 	movwvc	r2, #24189	; 0x5e7d
     2b4:	e3050106 	movw	r0, #20742	; 0x5106
}
     2b8:	f6054a01 			; <UNDEFINED> instruction: 0xf6054a01
	while (n--);
     2bc:	054a0601 	strbeq	r0, [sl, #-1537]	; 0xfffff9ff
     2c0:	05200192 	streq	r0, [r0, #-402]!	; 0xfffffe6e
     2c4:	01060195 			; <UNDEFINED> instruction: 0x01060195
		n--;
     2c8:	0601b805 	streq	fp, [r1], -r5, lsl #16
     2cc:	01bd052e 			; <UNDEFINED> instruction: 0x01bd052e
     2d0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
void mdelay (volatile word n) {
     2d4:	02b40305 	adcseq	r0, r4, #335544320	; 0x14000000
     2d8:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
	while (n) {
     2dc:	01040106 	tsteq	r4, r6, lsl #2
     2e0:	0601d005 	streq	sp, [r1], -r5
}
     2e4:	2e7dc703 	cdpcs	7, 7, cr12, cr13, cr3, {0}
		udelay (999);
     2e8:	0601e305 	streq	lr, [r1], -r5, lsl #6
     2ec:	018e0501 	orreq	r0, lr, r1, lsl #10
		n--;
     2f0:	91055d06 	tstls	r5, r6, lsl #26
     2f4:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     2f8:	2e0601b4 	mcrcs	1, 0, r0, cr6, cr4, {5}
     2fc:	0101b905 	tsteq	r1, r5, lsl #18
void __pi_ondomain (lword d) {
     300:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     304:	0102af03 	tsteq	r2, r3, lsl #30
		if (__pi_systat.effpdm > 1)
     308:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     30c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			__pi_systat.effpdm = 1;
     310:	030601cc 	movweq	r0, #25036	; 0x61cc
	PRCMPowerDomainOn (d);
     314:	052e7dcc 	streq	r7, [lr, #-3532]!	; 0xfffff234
     318:	010601df 	ldrdeq	r0, [r6, -pc]
     31c:	03060105 	movweq	r0, #24837	; 0x6105
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	13055809 	movwne	r5, #22537	; 0x5809
     324:	06010501 	streq	r0, [r1], -r1, lsl #10
     328:	2e130501 	cfmul32cs	mvfx0, mvfx3, mvfx1
	__pi_systat.ondmns |= d;
     32c:	01001202 	tsteq	r0, r2, lsl #4
     330:	00130501 	andseq	r0, r3, r1, lsl #10
}
     334:	00c80205 	sbceq	r0, r8, r5, lsl #4
     338:	34030000 	strcc	r0, [r3], #-0
void __pi_syserror (word ec, const char *m) {
     33c:	13050501 	movwne	r0, #21761	; 0x5501
	diag ("SYSERR: %x, %s", ec, m);
     340:	13061505 	movwne	r1, #25861	; 0x6505
     344:	051f1205 	ldreq	r1, [pc, #-517]	; 147 <processSettingsInput+0x37>
  __ASM volatile ("cpsid i" : : : "memory");
     348:	15051f13 	strne	r1, [r5, #-3859]	; 0xfffff0ed
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	24140522 	ldrcs	r0, [r4], #-1314	; 0xfffffade
     350:	05291205 	streq	r1, [r9, #-517]!	; 0xfffffdfb
     354:	17052514 	smladne	r5, r4, r5, r2
		all_leds_blink;
     358:	320f0521 	andcc	r0, pc, #138412032	; 0x8400000
     35c:	76031205 	strvc	r1, [r3], -r5, lsl #4
     360:	06050520 	streq	r0, [r5], -r0, lsr #10
     364:	15051321 	strne	r1, [r5, #-801]	; 0xfffffcdf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     36c:	16052106 	strne	r2, [r5], -r6, lsl #2
     370:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     374:	13132206 	tstne	r3, #1610612736	; 0x60000000
     378:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
     37c:	051d1705 	ldreq	r1, [sp, #-1797]	; 0xfffff8fb
	while (1) {
     380:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     384:	0514060f 	ldreq	r0, [r4, #-1551]	; 0xfffff9f1
     388:	05052c18 	streq	r2, [r5, #-3096]	; 0xfffff3e8
     38c:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
void tci_run_delay_timer () {
     390:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
	setdel = __pi_mintk - __pi_old;
     394:	055a0605 	ldrbeq	r0, [sl, #-1541]	; 0xfffff9fb
     398:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     39c:	0a022f01 	beq	8bfa8 <__ccfg+0x6c000>
     3a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	02050030 	andeq	r0, r5, #48	; 0x30
     3a8:	00000110 	andeq	r0, r0, r0, lsl r1
     3ac:	0100c503 	tsteq	r0, r3, lsl #10
     3b0:	13130505 	tstne	r3, #20971520	; 0x1400000
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
	sti_tim;
     3b8:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
}
     3bc:	060a0501 	streq	r0, [sl], -r1, lsl #10
     3c0:	1c30050f 	cfldr32ne	mvfx0, [r0], #-60	; 0xffffffc4
     3c4:	1d250905 			; <UNDEFINED> instruction: 0x1d250905
     3c8:	0e031e05 	cdpeq	14, 0, cr1, cr3, cr5, {0}
     3cc:	06090520 	streq	r0, [r9], -r0, lsr #10
	cli_aux;
     3d0:	053c7803 	ldreq	r7, [ip, #-2051]!	; 0xfffff7fd
     3d4:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
     3dc:	23052f06 	movwcs	r2, #24326	; 0x5f06
     3e0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     3e4:	05135906 	ldreq	r5, [r3, #-2310]	; 0xfffff6fa
	sti_aux;
     3e8:	0513061e 	ldreq	r0, [r3, #-1566]	; 0xfffff9e2
}
     3ec:	19051e14 	stmdbne	r5, {r2, r4, r9, sl, fp, ip}
     3f0:	060d0521 	streq	r0, [sp], -r1, lsr #10
     3f4:	0d1d0521 	cfldr32eq	mvfx0, [sp, #-132]	; 0xffffff7c
void AONRTCIntHandler () {
     3f8:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fc:	06010605 	streq	r0, [r1], -r5, lsl #12
     400:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
		if (__pi_utims [0] == 0)
     408:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
     40c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
		if (*(__pi_utims [0])) {
     410:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
     414:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
			(*(__pi_utims [0]))--;
     418:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
		if (__pi_utims [1] == 0)
     41c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
		if (*(__pi_utims [1])) {
     420:	10053d01 	andne	r3, r5, r1, lsl #26
			aux_timer_inactive = 0;
     424:	2e740306 	cdpcs	3, 7, cr0, cr4, cr6, {0}
			(*(__pi_utims [1]))--;
     428:	01062c05 	tsteq	r6, r5, lsl #24
		if (__pi_utims [2] == 0)
     42c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
		if (*(__pi_utims [2])) {
     430:	132f060d 			; <UNDEFINED> instruction: 0x132f060d
			(*(__pi_utims [2]))--;
     434:	01061405 	tsteq	r6, r5, lsl #8
		if (__pi_utims [3] != 0) {
     438:	053d1e05 	ldreq	r1, [sp, #-3589]!	; 0xfffff1fb
			if (*(__pi_utims [3])) {
     43c:	0d051f14 	stceq	15, cr1, [r5, #-80]	; 0xffffffb0
				aux_timer_inactive = 0;
     440:	04022106 	streq	r2, [r2], #-262	; 0xfffffefa
				(*(__pi_utims [3]))--;
     444:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (__pi_systat.ledsts) {
     448:	0205001a 	andeq	r0, r5, #26
     44c:	00000170 	andeq	r0, r0, r0, ror r1
		if (__pi_systat.ledblc++ == 0) {
     450:	0100e003 	tsteq	r0, r3
     454:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
			if (__pi_systat.ledblk) {
     458:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
     45c:	05ae0605 	streq	r0, [lr, #1541]!	; 0x605
     460:	4d301509 	cfldr32mi	mvfx1, [r0, #-36]!	; 0xffffffdc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	5809035c 	stmdapl	r9, {r2, r3, r4, r6, r8, r9}
     468:	0c055a14 			; <UNDEFINED> instruction: 0x0c055a14
				if (__pi_systat.ledsts & 0x2)
     46c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     470:	26066706 	strcs	r6, [r6], -r6, lsl #14
     474:	31060905 	tstcc	r6, r5, lsl #18
				if (__pi_systat.ledsts & 0x4)
     478:	5a144d3f 	bpl	51397c <__ccfg+0x4f39d4>
				__pi_systat.ledblk = 0;
     47c:	16053f3e 			; <UNDEFINED> instruction: 0x16053f3e
     480:	09051406 	stmdbeq	r5, {r1, r2, sl, ip}
			if (__pi_systat.fstblk)
     484:	3fa5061e 	svccc	0x00a5061e
     488:	0616054b 	ldreq	r0, [r6], -fp, asr #10
				__pi_systat.ledblc = 200;
     48c:	06090501 	streq	r0, [r9], -r1, lsl #10
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	175a133f 	smmlarne	sl, pc, r3, r1	; <UNPREDICTABLE>
		cli_tim;
     494:	010e053f 	tsteq	lr, pc, lsr r5
		__pi_new += setdel;
     498:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
     49c:	88050178 	stmdahi	r5, {r3, r4, r5, r6, r8}
		setdel = 0;
     4a0:	8d050101 	stfhis	f0, [r5, #-4]
		RISE_N_SHINE;
     4a4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
		__pi_new += setdel;
     4a8:	ab030505 	blge	c18c4 <__ccfg+0xa191c>
		RISE_N_SHINE;
     4ac:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     4b0:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
		aux_timer_inactive = 1;
     4b4:	01a00501 	lsleq	r0, r1, #10
     4b8:	7ed00306 	cdpvc	3, 13, cr0, cr0, cr6, {0}
				if (__pi_systat.ledsts & 0x1)
     4bc:	01b3053c 			; <UNDEFINED> instruction: 0x01b3053c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c0:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
     4c4:	b0033e05 	andlt	r3, r3, r5, lsl #28
				if (__pi_systat.ledsts & 0x2)
     4c8:	01048201 	tsteq	r4, r1, lsl #4
     4cc:	0301b305 	movweq	fp, #4869	; 0x1305
     4d0:	05207ed0 	streq	r7, [r0, #-3792]!	; 0xfffff130
				if (__pi_systat.ledsts & 0x8)
     4d4:	200601c6 	andcs	r0, r6, r6, asr #3
				__pi_systat.ledblk = 1;
     4d8:	01028b05 	tsteq	r2, r5, lsl #22
     4dc:	01029005 	tsteq	r2, r5
		if (aux_timer_inactive) {
     4e0:	01029805 	tsteq	r2, r5, lsl #16
			cli_aux;
     4e4:	0106e105 	tsteq	r6, r5, lsl #2
     4e8:	05130905 	ldreq	r0, [r3, #-2309]	; 0xfffff6fb
     4ec:	1e05010e 	adfnes	f0, f5, #0.5
     4f0:	012e0501 			; <UNDEFINED> instruction: 0x012e0501
     4f4:	04013305 	streq	r3, [r1], #-773	; 0xfffffcfb
     4f8:	03050502 	movweq	r0, #21762	; 0x5502
     4fc:	170101aa 	strne	r0, [r1, -sl, lsr #3]
     500:	01063e05 	tsteq	r6, r5, lsl #28
     504:	46050104 	strmi	r0, [r5], -r4, lsl #2
     508:	7ed10306 	cdpvc	3, 13, cr0, cr1, cr6, {0}
word tci_update_delay_ticks (Boolean force) {
     50c:	06590520 	ldrbeq	r0, [r9], -r0, lsr #10
	cli_tim;
     510:	066c0501 	strbteq	r0, [ip], -r1, lsl #10
     514:	06010582 	streq	r0, [r1], -r2, lsl #11
	if (setdel) {
     518:	06100513 			; <UNDEFINED> instruction: 0x06100513
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	053c4e03 	ldreq	r4, [ip, #-3587]!	; 0xfffff1fd
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     524:	052f060d 	streq	r0, [pc, #-1549]!	; ffffff1f <_estack+0xdfffaf1f>
     528:	13052f10 	movwne	r2, #24336	; 0x5f10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	10052f06 	andne	r2, r5, r6, lsl #30
	return NO;
     534:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
			setdel = 0;
     538:	060d0501 	streq	r0, [sp], -r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
     540:	01052e2d 	tsteq	r5, sp, lsr #28
}
     544:	17022e06 	strne	r2, [r2, -r6, lsl #28]
		sti_tim;
     548:	5c010100 	stfpls	f0, [r1], {-0}
		return YES;
     54c:	03000015 	movweq	r0, #21
     550:	00029b00 	andeq	r9, r2, r0, lsl #22
     554:	fb010200 	blx	40d5e <__ccfg+0x20db6>
     558:	01000d0e 	tsteq	r0, lr, lsl #26
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	00010101 	andeq	r0, r1, r1, lsl #2
	UARTDisable (UART0_BASE);
     560:	00010000 	andeq	r0, r1, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
	UARTDisable (UART0_BASE);
     568:	2f656d6f 	svccs	0x00656d6f
	UARTConfigSetExpClk (UART0_BASE,
     56c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     570:	442f6e69 	strtmi	r6, [pc], #-3689	; 578 <__pi_uart_setrate+0x1c>
     574:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     578:	4f2f706f 	svcmi	0x002f706f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     580:	502f5445 	eorpl	r5, pc, r5, asr #8
     584:	534f4349 	movtpl	r4, #62281	; 0xf349
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	6369502f 	cmnvs	r9, #47	; 0x2f
     58c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     590:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	urates [0] = rate;
     594:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
}
     598:	2f656d6f 	svccs	0x00656d6f
     59c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     5a0:	442f6e69 	strtmi	r6, [pc], #-3689	; 5a8 <__pi_uart_setrate+0x4c>
     5a4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     5a8:	4f2f706f 	svcmi	0x002f706f
     5ac:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	502f5445 	eorpl	r5, pc, r5, asr #8
     5b4:	534f4349 	movtpl	r4, #62281	; 0xf349
     5b8:	6369502f 	cmnvs	r9, #47	; 0x2f
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     5c0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	43432f58 	movtmi	r2, #16216	; 0x3f58
     5c8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
     5d0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     5d4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
     5d8:	2f006269 	svccs	0x00006269
     5dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     5e0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     5e4:	2f6e6974 	svccs	0x006e6974
	switch (operation) {
     5e8:	6b736544 	blvs	1cd9b00 <__ccfg+0x1cb9b58>
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ec:	2f706f74 	svccs	0x00706f74
     5f0:	4f534c4f 	svcmi	0x00534c4f
     5f4:	2f54454e 	svccs	0x0054454e
     5f8:	4f434950 	svcmi	0x00434950
     5fc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				*buf++ = uart_a_read;
     600:	2f534f63 	svccs	0x00534f63
     604:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			while (len && uart_a_char_available) {
     608:	4f492f73 	svcmi	0x00492f73
     60c:	6f682f00 	svcvs	0x00682f00
     610:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 464 <AONRTCIntHandler+0x6c>
			if (len != operation) {
     614:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
}
     618:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     61c:	6f746b73 	svcvs	0x00746b73
			uart_a_disable_int;
     620:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			if (uart_a_char_available) {
     624:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				*buf++ = uart_a_read;
     628:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			uart_a_disable_int;
     62c:	2f534f43 	svccs	0x00534f43
     630:	4f636950 	svcmi	0x00636950
			if (uart_a_char_available) {
     634:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
     638:	2f736269 	svccs	0x00736269
				uart_a_enable_int;
     63c:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
     640:	0073726f 	rsbseq	r7, r3, pc, ror #4
				goto Redo_rx;
     644:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 590 <__pi_uart_setrate+0x34>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	616d2f65 	cmnvs	sp, r5, ror #30
     64c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			return -2;
     650:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     654:	706f746b 	rsbvc	r7, pc, fp, ror #8
				uart_a_write (*buf);
     658:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     65c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			while (len && uart_a_room_in_tx) {
     660:	4349502f 	movtmi	r5, #36911	; 0x902f
     664:	502f534f 	eorpl	r5, pc, pc, asr #6
     668:	534f6369 	movtpl	r6, #62313	; 0xf369
			if (len != operation) {
     66c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
			uart_a_disable_int;
     670:	006c656e 	rsbeq	r6, ip, lr, ror #10
     674:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
			if (uart_a_room_in_tx) {
     678:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     67c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
				uart_a_enable_int;
     680:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     684:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
				*buf++ = uart_a_read;
     688:	61652d65 	cmnvs	r5, r5, ror #26
			if (uart_a_room_in_tx) {
     68c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
				uart_a_write (*buf);
     690:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     694:	636e692f 	cmnvs	lr, #770048	; 0xbc000
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     69c:	6f682f00 	svcvs	0x00682f00
			uart_a_enable_int;
     6a0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4f4 <AONRTCIntHandler+0xfc>
     6a4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     6a8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			return 0;
     6ac:	6f746b73 	svcvs	0x00746b73
			if (len == UART_CNTRL_SETRATE) {
     6b0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     6b8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     6bc:	2f534f43 	svccs	0x00534f43
				syserror (EREQPAR, "uar");
     6c0:	4f636950 	svcmi	0x00636950
			syserror (ENOOPER, "uai");
     6c4:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
			if (len == UART_CNTRL_GETRATE) {
     6c8:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
				return 1;
     6cc:	00010063 	andeq	r0, r1, r3, rrx
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	73797300 	cmnvc	r9, #0, 6
			syserror (ENOOPER, "uai");
     6d4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     6d8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     6dc:	63000002 	movwvs	r0, #2
     6e0:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     6e4:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
     6e8:	0100682e 	tsteq	r0, lr, lsr #16
     6ec:	70670000 	rsbvc	r0, r7, r0
     6f0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     6f4:	00000200 	andeq	r0, r0, r0, lsl #4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	5f717269 	svcpl	0x00717269
void UART0IntHandler () {
     6fc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
     704:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
     708:	00000300 	andeq	r0, r0, r0, lsl #6
     70c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     710:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	72690000 	rsbvc	r0, r9, #0
     718:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
		RISE_N_SHINE;
     71c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     720:	00682e73 	rsbeq	r2, r8, r3, ror lr
		i_trigger (devevent (UART_A, READ));
     724:	69000003 	stmdbvs	r0, {r0, r1}
     728:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
     72c:	735f6e69 	cmpvc	pc, #1680	; 0x690
     730:	6f736e65 	svcvs	0x00736e65
     734:	00682e72 	rsbeq	r2, r8, r2, ror lr
     738:	70000004 	andvc	r0, r0, r4
     73c:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     740:	00020068 	andeq	r0, r2, r8, rrx
     744:	6e6f6100 	powvse	f6, f7, f0
     748:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     74c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     750:	77700000 	ldrbvc	r0, [r0, -r0]!
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
     758:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     75c:	00000200 	andeq	r0, r0, r0, lsl #4
		i_trigger (devevent (UART_A, WRITE));
     760:	5f6e6f61 	svcpl	0x006e6f61
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     768:	00020068 	andeq	r0, r2, r8, rrx
		RISE_N_SHINE;
     76c:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
     770:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     774:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
		i_trigger (devevent (UART_A, WRITE));
     778:	00000500 	andeq	r0, r0, r0, lsl #10
     77c:	5f6e6f61 	svcpl	0x006e6f61
     780:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
     784:	00020068 	andeq	r0, r2, r8, rrx
     788:	6e6f6100 	powvse	f6, f7, f0
     78c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     790:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
     794:	00020068 	andeq	r0, r2, r8, rrx
     798:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     79c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     7a0:	00060068 	andeq	r0, r6, r8, rrx
}
     7a4:	63726100 	cmnvs	r2, #0, 2
     7a8:	00682e68 	rsbeq	r2, r8, r8, ror #28
     7ac:	6d000001 	stcvs	0, cr0, [r0, #-4]
     7b0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
     7b4:	00010068 	andeq	r0, r1, r8, rrx
void __buttons_setirq (int val) {
     7b8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7c0:	00682e73 	rsbeq	r2, r8, r3, ror lr
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	62000001 	andvs	r0, r0, #1
     7c8:	6f747475 	svcvs	0x00747475
     7cc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
		bn = BUTTON_GPIO (__button_list [i]);
     7d0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d4:	00000100 	andeq	r0, r0, r0, lsl #2
     7d8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     7dc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     7e0:	6b000007 	blvs	804 <__pinlist_setirq+0x8>
     7e4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     7e8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
}
     7ec:	00000005 	andeq	r0, r0, r5
     7f0:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
     7f4:	00029c02 	andeq	r9, r2, r2, lsl #24
     7f8:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
void __pinlist_setirq (int val) {
     7fc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	for (i = 0; i < N_PINLIST; i++) {
     800:	10062705 	andne	r2, r6, r5, lsl #14
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	01010005 	tsteq	r1, r5
	for (i = 0; i < N_PINLIST; i++) {
     80c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     810:	0002a802 	andeq	sl, r2, r2, lsl #16
     814:	01180300 	tsteq	r8, r0, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     818:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
     81c:	09050108 	stmdbeq	r5, {r3, r8}
     820:	08050106 	stmdaeq	r5, {r1, r2, r8}
	for (i = 0; i < N_PINLIST; i++) {
     824:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
}
     828:	2b060305 	blcs	181444 <__ccfg+0x16149c>
     82c:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
     830:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
     834:	060a0501 	streq	r0, [sl], -r1, lsl #10
void GPIOIntHandler () {
     838:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
if (buttons_int) {
     83c:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     840:	01060405 	tsteq	r6, r5, lsl #8
	buttons_disable ();
     844:	01000702 	tsteq	r0, r2, lsl #14
     848:	001f0501 	andseq	r0, pc, r1, lsl #10
	i_trigger ((aword)&__button_list);
     84c:	02d40205 	sbcseq	r0, r4, #1342177280	; 0x50000000
     850:	1f030000 	svcne	0x00030000
     854:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     858:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     85c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     860:	01053c08 	tsteq	r5, r8, lsl #24
     864:	06030524 	streq	r0, [r3], -r4, lsr #10
     868:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
     86c:	07020106 	streq	r0, [r2, -r6, lsl #2]
     870:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     874:	0205001e 	andeq	r0, r5, #30
	RISE_N_SHINE;
     878:	00000300 	andeq	r0, r0, r0, lsl #6
     87c:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
     880:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
if (pin_sensor_int) {
     884:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
     888:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
	i_trigger ((aword)(&__input_pins));
     88c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
     890:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     894:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     898:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
     89c:	17052106 	strne	r2, [r5, -r6, lsl #2]
     8a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     8a4:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
     8a8:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
     8ac:	06090501 	streq	r0, [r9], -r1, lsl #10
     8b0:	4a080501 	bmi	201cbc <__ccfg+0x1e1d14>
     8b4:	30060205 	andcc	r0, r6, r5, lsl #4
	__pinsen_disable_and_clear;
     8b8:	01061505 	tsteq	r6, r5, lsl #10
	RISE_N_SHINE;
     8bc:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     8c0:	01010005 	tsteq	r1, r5
     8c4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
}
     8c8:	00000002 	andeq	r0, r0, r2
     8cc:	013a0300 	teqeq	sl, r0, lsl #6
     8d0:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
     8d4:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
     8d8:	1f052502 	svcne	0x00052502
void system_init () {
     8dc:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	3c053d06 	stccc	13, cr3, [r5], {6}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	01080501 	tsteq	r8, r1, lsl #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	01060905 	tsteq	r6, r5, lsl #18
     8ec:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     8f0:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     8f8:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     900:	06052027 	streq	r2, [r5], -r7, lsr #32
     904:	06040520 	streq	r0, [r4], -r0, lsr #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	06240521 	strteq	r0, [r4], -r1, lsr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	23060205 	movwcs	r0, #25093	; 0x6205
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	01061505 	tsteq	r6, r5, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	01010005 	tsteq	r1, r5
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	00000002 	andeq	r0, r0, r2
		pin = (port_confs [i] >> 19) & 0x1f;
     928:	00ce0300 	sbceq	r0, lr, r0, lsl #6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     930:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
     934:	06220205 	strteq	r0, [r2], -r5, lsl #4
     938:	03053633 	movweq	r3, #22067	; 0x5633
		if (port_confs [i] & 0x80)
     93c:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	01f00304 	mvnseq	r0, r4, lsl #6
     944:	5c053001 	stcpl	0, cr3, [r5], {1}
		if (port_confs [i] & 0x40)
     948:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
     950:	0502100a 	streq	r1, [r2, #-10]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     954:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	0205002d 	andeq	r0, r5, #45	; 0x2d
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95c:	0000033c 	andeq	r0, r0, ip, lsr r3
	all_leds_blink;
     960:	01019703 	tsteq	r1, r3, lsl #14
     964:	01140205 	tsteq	r4, r5, lsl #4
     968:	2d051701 	stccs	7, cr1, [r5, #-4]
     96c:	01790306 	cmneq	r9, r6, lsl #6
     970:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
     974:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
     978:	03030503 	movweq	r0, #13571	; 0x3503
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
     980:	062d0504 	strteq	r0, [sp], -r4, lsl #10
     984:	2001cb03 	andcs	ip, r1, r3, lsl #22
     988:	02050104 	andeq	r0, r5, #4, 2
     98c:	7f8f0306 	svcvc	0x008f0306
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	1303053c 	movwne	r0, #13628	; 0x353c
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     998:	eb032905 	bl	cadb4 <__ccfg+0xaae0c>
	IntEnable (INT_AON_RTC_COMB);
     99c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     9a0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     9a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	__pi_malloc_init ();
     9a8:	7f900303 	svcvc	0x00900303
	IntEnable (INT_AON_GPIO_EDGE);
     9ac:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     9b0:	00f0032d 	rscseq	r0, r0, sp, lsr #6
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	90030603 	andls	r0, r3, r3, lsl #12
     9bc:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     9c0:	eb032905 	bl	caddc <__ccfg+0xaae34>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     9c8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     9d0:	90030603 	andls	r0, r3, r3, lsl #12
     9d4:	0101207f 	tsteq	r1, pc, ror r0
	urates [0] = UART_RATE / 100;
     9d8:	01010101 	tsteq	r1, r1, lsl #2
     9dc:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
	reinit_uart ();
     9e0:	29050404 	stmdbcs	r5, {r2, sl}
	EXTRA_INITIALIZERS;
     9e4:	0101a103 	tsteq	r1, r3, lsl #2
     9e8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     9f0:	03030501 	movweq	r0, #13569	; 0x3501
     9f4:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
     9fc:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	06030501 	streq	r0, [r3], -r1, lsl #10
     a04:	207eda03 	rsbscs	sp, lr, r3, lsl #20
			devinit [i] . init (devinit [i] . param);
     a08:	29050404 	stmdbcs	r5, {r2, sl}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	0101a103 	tsteq	r1, r3, lsl #2
     a10:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     a14:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	IntEnable (INT_UART0_COMB);
     a18:	06030501 	streq	r0, [r3], -r1, lsl #10
     a1c:	207eda03 	rsbscs	sp, lr, r3, lsl #20
}
     a20:	01010101 	tsteq	r1, r1, lsl #2
	tci_run_auxiliary_timer ();
     a24:	01580101 	cmpeq	r8, r1, lsl #2
		diag ("");
     a28:	1108052e 	tstne	r8, lr, lsr #10
     a2c:	01000902 	tsteq	r0, r2, lsl #18
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	001d0501 	andseq	r0, sp, r1, lsl #10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	03900205 	orrseq	r0, r0, #1342177280	; 0x50000000
		diag ("Leftover RAM: %d bytes",
     a38:	9d030000 	stcls	0, cr0, [r3, #-0]
     a3c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     a40:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
     a44:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
     a48:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     a4c:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
     a50:	0602052e 	streq	r0, [r2], -lr, lsr #10
     a54:	01760323 	cmneq	r6, r3, lsr #6
     a58:	01061105 	tsteq	r6, r5, lsl #2
     a5c:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
     a60:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
     a64:	2a052073 	bcs	148c38 <__ccfg+0x128c90>
     a68:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
     a6c:	2076032f 	rsbscs	r0, r6, pc, lsr #6
     a70:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     a74:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
     a78:	23060205 	movwcs	r0, #25093	; 0x6205
     a7c:	2f060105 	svccs	0x00060105
     a80:	01000b02 	tsteq	r0, r2, lsl #22
     a84:	00210501 	eoreq	r0, r1, r1, lsl #10
     a88:	03d00205 	bicseq	r0, r0, #1342177280	; 0x50000000
     a8c:	aa030000 	bge	c0a94 <__ccfg+0xa0aec>
     a90:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
__attribute__ ((noreturn)) void __pi_release () {
     a94:	06210517 			; <UNDEFINED> instruction: 0x06210517
     a98:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     a9c:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     aa0:	03140205 	tsteq	r4, #1342177280	; 0x50000000
	check_stack_overflow;
     aa4:	11050169 	tstne	r5, r9, ror #2
     aa8:	2f050106 	svccs	0x00050106
     aac:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
	update_n_wake (MAX_WORD, NO);
     ab0:	2f052017 	svccs	0x00052017
     ab4:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
     ab8:	2a052e36 	bcs	14c398 <__ccfg+0x12c3f0>
	for_all_tasks (__pi_curr) {
     abc:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
     ac0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     ac4:	01052e09 	tsteq	r5, r9, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	06021306 	streq	r1, [r2], -r6, lsl #6
	__SLEEP;
     acc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     ad0:	0205001a 	andeq	r0, r5, #26
     ad4:	000003f8 	strdeq	r0, [r0], -r8
     ad8:	0102b703 	tsteq	r2, r3, lsl #14
	system_event_count ++;
     adc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
     ae0:	0e061a05 	vmlaeq.f32	s2, s12, s10
	switch (__pi_systat.effpdm) {
     ae4:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
     ae8:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
     aec:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
     af0:	2b051406 	blcs	145b10 <__ccfg+0x125b68>
			__WFI ();
     af4:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
     af8:	06050522 	streq	r0, [r5], -r2, lsr #10
     afc:	06030501 	streq	r0, [r3], -r1, lsl #10
	check_stack_overflow;
     b00:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
     b04:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b08:	03052e06 	movweq	r2, #24070	; 0x5e06
     b0c:	07053006 	streq	r3, [r5, -r6]
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	06050106 	streq	r0, [r5], -r6, lsl #2
			goto Redo;
     b14:	06040520 	streq	r0, [r4], -r0, lsr #10
	for_all_tasks (__pi_curr) {
     b18:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	06040501 	streq	r0, [r4], -r1, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     b24:	06030501 	streq	r0, [r3], -r1, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	06120522 	ldreq	r0, [r2], -r2, lsr #10
     b2c:	20060501 	andcs	r0, r6, r1, lsl #10
     b30:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b34:	01060705 	tsteq	r6, r5, lsl #14
     b38:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b3c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     b40:	1f130617 	svcne	0x00130617
			__WFI ();
     b44:	2f060405 	svccs	0x00060405
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
     b4c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
}
     b50:	03052006 	movweq	r2, #20486	; 0x5006
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b54:	07052206 	streq	r2, [r5, -r6, lsl #4]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	06050106 	streq	r0, [r5], -r6, lsl #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	06040520 	streq	r0, [r4], -r0, lsr #10
     b60:	06170521 	ldreq	r0, [r7], -r1, lsr #10
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b64:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
     b68:	03052f06 	movweq	r2, #24326	; 0x5f06
     b6c:	06120514 			; <UNDEFINED> instruction: 0x06120514
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b70:	20060501 	andcs	r0, r6, r1, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b74:	21060405 	tstcs	r6, r5, lsl #8
     b78:	01060805 	tsteq	r6, r5, lsl #16
     b7c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     b80:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	1f130618 	svcne	0x00130618
     b88:	2f060505 	svccs	0x00060505
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	017da303 	cmneq	sp, r3, lsl #6
     b94:	01061105 	tsteq	r6, r5, lsl #2
     b98:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
     b9c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
     ba0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
			SysCtrlSetRechargeBeforePowerDown
     ba4:	06052019 			; <UNDEFINED> instruction: 0x06052019
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	06130521 	ldreq	r0, [r3], -r1, lsr #10
     bb0:	20070501 	andcs	r0, r7, r1, lsl #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	052f1405 	streq	r1, [pc, #-1029]!	; 7b7 <UART0IntHandler+0xbf>
     bb8:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
     bbc:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	06050106 	streq	r0, [r5], -r6, lsl #2
     bc4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	96032905 	strls	r2, [r3], -r5, lsl #18
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     bd0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     bd4:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd8:	e6030605 	str	r0, [r3], -r5, lsl #12
			while (!(AONWUCPowerStatusGet () &
     bdc:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	08050106 	stmdaeq	r5, {r1, r2, r8}
     be4:	06060520 	streq	r0, [r6], -r0, lsr #10
     be8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bec:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
     bf0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     bf4:	01062d05 	tsteq	r6, r5, lsl #26
     bf8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	7de80306 	stclvc	3, cr0, [r8, #24]!
     c00:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	06060501 	streq	r0, [r6], -r1, lsl #10
     c08:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0c:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
			reinit_uart ();
     c10:	06050106 	streq	r0, [r5], -r6, lsl #2
     c14:	01012106 	tsteq	r1, r6, lsl #2
     c18:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
}
     c1c:	03010618 	movweq	r0, #5656	; 0x1618
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
     c24:	13052206 	movwne	r2, #20998	; 0x5206
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	07050106 	streq	r0, [r5, -r6, lsl #2]
     c2c:	06050520 	streq	r0, [r5], -r0, lsr #10
     c30:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     c38:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
     c3c:	02052e02 	andeq	r2, r5, #2, 28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c40:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	06030501 	streq	r0, [r3], -r1, lsl #10
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
     c50:	0c052206 	sfmeq	f2, 4, [r5], {6}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c54:	0a050106 	beq	141074 <__ccfg+0x1210cc>
     c58:	1f0c052f 	svcne	0x000c052f
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5c:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c60:	03051e0c 	movweq	r1, #24076	; 0x5e0c
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	01132f06 	tsteq	r3, r6, lsl #30
     c68:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
			PRCMPowerDomainOff (
     c6c:	13060105 	movwne	r0, #24837	; 0x6105
     c70:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
	__SLEEP;
     c74:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
     c78:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
	goto Redo;
     c80:	06050106 	streq	r0, [r5], -r6, lsl #2
     c84:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     c88:	c2032905 	andgt	r2, r3, #81920	; 0x14000
     c8c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     c90:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     c94:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     c98:	ba030605 	blt	c24b4 <__ccfg+0xa250c>
     c9c:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     ca0:	08050106 	stmdaeq	r5, {r1, r2, r8}
     ca4:	06060520 	streq	r0, [r6], -r0, lsr #10
     ca8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     cac:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
     cb0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     cb4:	01062d05 	tsteq	r6, r5, lsl #26
     cb8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     cbc:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
     cc0:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     cc4:	06060501 	streq	r0, [r6], -r1, lsl #10
     cc8:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     ccc:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     cd0:	06050106 	streq	r0, [r5], -r6, lsl #2
     cd4:	01012106 	tsteq	r1, r6, lsl #2
     cd8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     cdc:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
     ce0:	06030501 	streq	r0, [r3], -r1, lsl #10
     ce4:	4a02ce03 	bmi	b44f8 <__ccfg+0x94550>
     ce8:	01060605 	tsteq	r6, r5, lsl #12
int main (void) {
     cec:	30060405 	andcc	r0, r6, r5, lsl #8
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	01001502 	tsteq	r0, r2, lsl #10
     cf4:	002d0501 	eoreq	r0, sp, r1, lsl #10
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	050c0205 	streq	r0, [ip, #-517]	; 0xfffffdfb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
	system_init ();
     d00:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
	tcv_init ();
     d04:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d08:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
     d0c:	052f0605 	streq	r0, [pc, #-1541]!	; 70f <UART0IntHandler+0x17>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	21061f02 	tstcs	r6, r2, lsl #30
     d14:	01060605 	tsteq	r6, r5, lsl #12
     d18:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1c:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
     d20:	06060520 	streq	r0, [r6], -r0, lsr #10
	delay (16, 0);
     d24:	06040501 	streq	r0, [r4], -r1, lsl #10
     d28:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
     d2c:	06020501 	streq	r0, [r2], -r1, lsl #10
	__pi_release ();
     d30:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
     d34:	01061005 	tsteq	r6, r5
     d38:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
     d3c:	0187031a 	orreq	r0, r7, sl, lsl r3
     d40:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
     d44:	1f170520 	svcne	0x00170520
     d48:	0a030905 	beq	c3164 <__ccfg+0xa31bc>
static void killev (__pi_pcb_t *pid) {
     d4c:	030d0520 	movweq	r0, #54560	; 0xd520
	wfun = (aword)(pid->code);
     d50:	0b052076 	bleq	148f30 <__ccfg+0x128f88>
	for_all_tasks (i) {
     d54:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
		for (j = 0; j < nevents (i); j++) {
     d58:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
     d5c:	06010513 			; <UNDEFINED> instruction: 0x06010513
     d60:	06030519 			; <UNDEFINED> instruction: 0x06030519
			    || i->Events [j] . Event == wfun
     d64:	0a052f29 	beq	14ca10 <__ccfg+0x12ca68>
		for (j = 0; j < nevents (i); j++) {
     d68:	09020106 	stmdbeq	r2, {r1, r2, r8}
			if (i->Events [j] . Event == (aword)pid
     d6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     d70:	02050033 	andeq	r0, r5, #51	; 0x33
     d74:	0000055c 	andeq	r0, r0, ip, asr r5
				wakeupev (i, j);
     d78:	0105d303 	tsteq	r5, r3, lsl #6
     d7c:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
	for_all_tasks (i) {
     d80:	03063305 	movweq	r3, #25349	; 0x6305
}
     d84:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	03330527 	teqeq	r3, #163577856	; 0x9c00000
static void qfree (aword *ch) {
     d8c:	02053c79 	andeq	r3, r5, #30976	; 0x7900
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d90:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
	cc = (aword*)(mpools + MA_NP);
     d94:	03050502 	movweq	r0, #21762	; 0x5502
	m_setnextp (ch, chunk);
     d98:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
	m_setnextp (cc, ch);
     d9c:	06020501 	streq	r0, [r2], -r1, lsl #10
}
     da0:	0104ab03 	tsteq	r4, r3, lsl #22
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da4:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
     da8:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
     dac:	017dd903 	cmneq	sp, r3, lsl #18
			m_setnextp (cc, m_nextp (chunk));
     db0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			m_size (chunk) += m_hdrlen + m_size (ch);
     db4:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     db8:	03010501 	movweq	r0, #5377	; 0x1501
     dbc:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
     dc0:	03230506 			; <UNDEFINED> instruction: 0x03230506
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	054f0605 	strbeq	r0, [pc, #-1541]	; 7cb <__buttons_setirq+0x13>
     dcc:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
     dd0:	06020501 	streq	r0, [r2], -r1, lsl #10
			m_setnextp (cc, m_nextp (chunk));
     dd4:	66029e03 	strvs	r9, [r2], -r3, lsl #28
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	01060d05 	tsteq	r6, r5, lsl #26
     ddc:	2f060205 	svccs	0x00060205
     de0:	13060105 	movwne	r0, #24837	; 0x6105
     de4:	01000c02 	tsteq	r0, r2, lsl #24
     de8:	001c0501 	andseq	r0, ip, r1, lsl #10
     dec:	05b00205 	ldreq	r0, [r0, #517]!	; 0x205
			if (m_size (chunk) >= m_size (ch))
     df0:	ef030000 	svc	0x00030000
     df4:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
     df8:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
		chunk = m_nextp (chunk))
     dfc:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
     e00:	17050501 	strne	r0, [r5, -r1, lsl #10]
     e04:	01062305 	tsteq	r6, r5, lsl #6
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	02050104 	andeq	r0, r5, #4, 2
	diag_wait (a);
     e0c:	20028803 	andcs	r8, r2, r3, lsl #16
	diag_wchar (c, a);
     e10:	23050604 	movwcs	r0, #22020	; 0x5604
     e14:	207df803 	rsbscs	pc, sp, r3, lsl #16
}
     e18:	02050104 	andeq	r0, r5, #4, 2
     e1c:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
	syserror (ESTATE, "state");
     e20:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
     e24:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
     e28:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
     e2c:	17050517 	smladne	r5, r7, r5, r0
void update_n_wake (word min, Boolean force) {
     e30:	01062305 	tsteq	r6, r5, lsl #6
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	02050104 	andeq	r0, r5, #4, 2
     e38:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
     e3c:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e40:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
     e44:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
     e48:	01062405 	tsteq	r6, r5, lsl #8
     e4c:	02050104 	andeq	r0, r5, #4, 2
     e50:	7db20306 	ldcvc	3, cr0, [r2, #24]!
     e54:	000e0258 	andeq	r0, lr, r8, asr r2
     e58:	3d050101 	stfccs	f0, [r5, #-4]
     e5c:	e8020500 	stmda	r2, {r8, sl}
     e60:	03000005 	movweq	r0, #5
     e64:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
     e68:	3d051402 	cfstrscc	mvf1, [r5, #-8]
     e6c:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
     e70:	0b030605 	bleq	c268c <__ccfg+0xa26e4>
		for_all_tasks (i) {
     e74:	060e0582 	streq	r0, [lr], -r2, lsl #11
	__pi_mintk = znew + min;
     e78:	2f080501 	svccs	0x00080501
     e7c:	051f0e05 	ldreq	r0, [pc, #-3589]	; 7f <g_pfnVectors+0x7f>
			if (!twaiting (i))
     e80:	052f0605 	streq	r0, [pc, #-1541]!	; 883 <GPIOIntHandler+0x4b>
     e84:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	0f052006 	svceq	0x00052006
     e8c:	0604052e 	streq	r0, [r4], -lr, lsr #10
     e90:	06070534 			; <UNDEFINED> instruction: 0x06070534
     e94:	06050501 	streq	r0, [r5], -r1, lsl #10
     e98:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
     e9c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     ea0:	20340301 	eorscs	r0, r4, r1, lsl #6
     ea4:	a0030905 	andge	r0, r3, r5, lsl #18
     ea8:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
     eac:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
     eb0:	0e052108 	adfeqs	f2, f5, #0.0
     eb4:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
				wakeuptm (i);
     eb8:	0b030604 	bleq	c26d0 <__ccfg+0xa2728>
     ebc:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
		for_all_tasks (i) {
     ec0:	07050106 	streq	r0, [r5, -r6, lsl #2]
				d = i->Timer - znew;
     ec4:	0605052e 	streq	r0, [r5], -lr, lsr #10
     ec8:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
     ecc:	060b0524 	streq	r0, [fp], -r4, lsr #10
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
     ed4:	21062d04 	tstcs	r6, r4, lsl #26
     ed8:	01060b05 	tsteq	r6, r5, lsl #22
	__pi_old = znew;
     edc:	03060505 	movweq	r0, #25861	; 0x6505
}
     ee0:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
	TCI_RUN_DELAY_TIMER;
     ee4:	05053006 	streq	r3, [r5, #-6]
}
     ee8:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
     eec:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
     ef0:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
     ef4:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     ef8:	07053506 	streq	r3, [r5, -r6, lsl #10]
void proceed (word state) {
     efc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	prcdstate (__pi_curr, state);
     f00:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
     f04:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	release;
     f08:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
     f0c:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
void __pi_wait (aword event, word state) {
     f10:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
	sint j = nevents (__pi_curr);
     f14:	03040520 	movweq	r0, #17696	; 0x4520
	if (j >= MAX_EVENTS_PER_TASK)
     f18:	08052030 	stmdaeq	r5, {r4, r5, sp}
     f1c:	03050521 	movweq	r0, #21793	; 0x5521
     f20:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
		syserror (ENEVENTS, "sw");
     f24:	3c110306 	ldccc	3, cr0, [r1], {6}
     f28:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
	setestate (__pi_curr->Events [j], state, event);
     f2c:	1f04053d 	svcne	0x0004053d
	incwait (__pi_curr);
     f30:	0b052f06 	bleq	14cb50 <__ccfg+0x12cba8>
	setestate (__pi_curr->Events [j], state, event);
     f34:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
     f38:	07052506 	streq	r2, [r5, -r6, lsl #10]
     f3c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     f40:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
void __pi_trigger (aword event) {
     f44:	08050106 	stmdaeq	r5, {r1, r2, r8}
	for_all_tasks (i) {
     f48:	0605054a 	streq	r0, [r5], -sl, asr #10
		for (j = 0; j < nevents (i); j++) {
     f4c:	06040531 			; <UNDEFINED> instruction: 0x06040531
     f50:	062e1603 	strteq	r1, [lr], -r3, lsl #12
     f54:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
     f58:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
			if (i->Events [j] . Event == event) {
     f5c:	052f0605 	streq	r0, [pc, #-1541]!	; 95f <system_init+0x83>
     f60:	7f880302 	svcvc	0x00880302
     f64:	06100501 	ldreq	r0, [r0], -r1, lsl #10
				wakeupev (i, j);
     f68:	030c0501 	movweq	r0, #50433	; 0xc501
     f6c:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
	for_all_tasks (i) {
     f70:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
}
     f74:	0c052f06 	stceq	15, cr2, [r5], {6}
aword __pi_join (aword pid, word st) {
     f78:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	for_all_tasks (i) {
     f7c:	20110306 	andscs	r0, r1, r6, lsl #6
     f80:	01001202 	tsteq	r0, r2, lsl #4
	return 0;
     f84:	002b0501 	eoreq	r0, fp, r1, lsl #10
		if ((aword)i == pid) {
     f88:	00000205 	andeq	r0, r0, r5, lsl #4
			__pi_wait (pid, st);
     f8c:	ea030000 	b	c0f94 <__ccfg+0xa0fec>
}
     f90:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
	for_all_tasks (i) {
     f94:	06010514 			; <UNDEFINED> instruction: 0x06010514
     f98:	00060213 	andeq	r0, r6, r3, lsl r2
void delay (word d, word state) {
     f9c:	19050101 	stmdbne	r5, {r0, r8}
	settstate (__pi_curr, state);
     fa0:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
     fa4:	03000006 	movweq	r0, #6
     fa8:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
     fac:	06041402 	streq	r1, [r4], -r2, lsl #8
	update_n_wake (d, YES);
     fb0:	12032405 	andne	r2, r3, #83886080	; 0x5000000
     fb4:	17050501 	strne	r0, [r5, -r1, lsl #10]
	__pi_curr->Timer = __pi_old + d;
     fb8:	01062205 	tsteq	r6, r5, lsl #4
     fbc:	19050104 	stmdbne	r5, {r2, r8}
	inctimer (__pi_curr);
     fc0:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
     fc4:	03220506 			; <UNDEFINED> instruction: 0x03220506
     fc8:	01042019 	tsteq	r4, r9, lsl r0
}
     fcc:	6b030605 	blvs	c27e8 <__ccfg+0xa2840>
     fd0:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
	if (fun == NULL)
     fd4:	20150322 	andscs	r0, r5, r2, lsr #6
		return (int) __pi_curr;
     fd8:	02050104 	andeq	r0, r5, #4, 2
     fdc:	206b0306 	rsbcs	r0, fp, r6, lsl #6
	for_all_tasks (i)
     fe0:	01060605 	tsteq	r6, r5, lsl #12
}
     fe4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
		if (i->code == fun)
     fe8:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
	for_all_tasks (i)
     fec:	0603052e 	streq	r0, [r3], -lr, lsr #10
     ff0:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
     ff4:	01010113 	tsteq	r1, r3, lsl r1
int __pi_strlen (const char *s) {
     ff8:	0620062e 	strteq	r0, [r0], -lr, lsr #12
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	4a662e66 	bmi	198c99c <__ccfg+0x196c9f4>
}
    1000:	02052e01 	andeq	r2, r5, #1, 28
	for (i = 0; *(s+i) != '\0'; i++);
    1004:	06060515 			; <UNDEFINED> instruction: 0x06060515
	while (n--)
    1008:	20050501 	andcs	r0, r5, r1, lsl #10
    100c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
		*dest++ = *src++;
    1010:	03052e18 	movweq	r2, #24088	; 0x5e18
    1014:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
    1018:	014b062c 	cmpeq	fp, ip, lsr #12
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	01011358 	tsteq	r1, r8, asr r3
		syserror (EREQPAR, "addv");
    1020:	20062e01 	andcs	r2, r6, r1, lsl #28
		syserror (ERESOURCE, "addv");
    1024:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	if (ioreq [loc] != NULL)
    1028:	0105014a 	tsteq	r5, sl, asr #2
    102c:	0b023206 	bleq	8d84c <__ccfg+0x6d8a4>
		syserror (ERESOURCE, "addv");
    1030:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	ioreq [loc] = rf;
    1034:	02050021 	andeq	r0, r5, #33	; 0x21
}
    1038:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    103c:	0107d903 	tsteq	r7, r3, lsl #18
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	13140205 	tstne	r4, #1342177280	; 0x50000000
    1044:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1048:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    104c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
    1054:	03040106 	movweq	r0, #16646	; 0x4106
    1058:	83030305 	movwhi	r0, #13061	; 0x3305
		syserror (ENODEVICE, "io");
    105c:	01042079 	tsteq	r4, r9, ror r0
    1060:	03060205 	movweq	r0, #25093	; 0x6205
	if (len == 0)
    1064:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	0305010e 	movweq	r0, #20750	; 0x510e
    106c:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
	if (ret >= 0)
    1070:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
	if (ret == -1) {
    1074:	0104017d 	tsteq	r4, sp, ror r1
    1078:	d3030805 	movwle	r0, #14341	; 0x3805
		if (retry == WNONE)
    107c:	04042002 	streq	r2, [r4], #-2
		iowait (dev, operation, retry);
    1080:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
    1084:	0104207d 	tsteq	r4, sp, ror r0
    1088:	d3030805 	movwle	r0, #14341	; 0x3805
			release;
    108c:	03052002 	movweq	r2, #20482	; 0x5002
	if (ret == -2) {
    1090:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
		if (retry != WNONE) {
    1094:	21060305 	tstcs	r6, r5, lsl #6
    1098:	29050404 	stmdbcs	r5, {r2, sl}
			iowait (dev, operation, retry);
    109c:	017da703 	cmneq	sp, r3, lsl #14
    10a0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			(ioreq [dev]) (NONE, buf, len);
    10a4:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
    10a8:	01042e2d 	tsteq	r4, sp, lsr #28
    10ac:	03060305 	movweq	r0, #25349	; 0x6305
		(ioreq [dev]) (NONE, buf, len);
    10b0:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    10b4:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
    10b8:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
}
    10bc:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
	if (retry != WNONE) {
    10c0:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
		delay (-ret - 2, retry);
    10c4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    10c8:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
    10cc:	58410520 	stmdapl	r1, {r5, r8, sl}^
    10d0:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
		release;
    10d4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10d8:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	03290504 			; <UNDEFINED> instruction: 0x03290504
    10e0:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
    10e4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    10e8:	01040106 	tsteq	r4, r6, lsl #2
    10ec:	03060305 	movweq	r0, #25349	; 0x6305
		syserror (ERESOURCE, "mal1");
    10f0:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    10f4:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    10fc:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1100:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
	m_size (mpools [0]) = mlen - m_hdrlen;
    1104:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1108:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    110c:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
    1110:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
}
    1114:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1118:	02050021 	andeq	r0, r5, #33	; 0x21
    111c:	000007fc 	strdeq	r0, [r0], -ip
    1120:	0107ec03 	tsteq	r7, r3, lsl #24
    1124:	13140205 	tstne	r4, #1342177280	; 0x50000000
    1128:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
void __pi_free (aword *ch) {
    112c:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1130:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1134:	90030621 	andls	r0, r3, r1, lsr #12
		syserror (EMALLOC, "malg");
    1138:	03040107 	movweq	r0, #16647	; 0x4107
    113c:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
	mcfree [MA_NP] += m_size (ch);
    1140:	01042078 	tsteq	r4, r8, ror r0
		m_size (ch) ^= MALLOC_UMASK;
    1144:	03060205 	movweq	r0, #25093	; 0x6205
    1148:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
	mcfree [MA_NP] += m_size (ch);
    114c:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	QFREE;
    1150:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
	if (mevent [MA_NP] . nwait) {
    1154:	9b033305 	blls	cdd70 <__ccfg+0xaddc8>
    1158:	0104207d 	tsteq	r4, sp, ror r0
		trigger ((aword)(&(mevent [MA_NP])));
    115c:	e6030805 	str	r0, [r3], -r5, lsl #16
		mevent [MA_NP] . nwait --;
    1160:	04042002 	streq	r2, [r4], #-2
}
    1164:	9a032d05 	bls	cc580 <__ccfg+0xac5d8>
    1168:	0104207d 	tsteq	r4, sp, ror r0
    116c:	e8030305 	stmda	r3, {r0, r2, r8, r9}
    1170:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
void kill (aword pid) {
    1174:	01060805 	tsteq	r6, r5, lsl #16
		pid = (aword) __pi_curr;
    1178:	051f1e05 	ldreq	r1, [pc, #-3589]	; 37b <__pi_syserror+0x3f>
	j = NULL;
    117c:	03052106 	movweq	r2, #20742	; 0x5106
	for_all_tasks (i) {
    1180:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
	syserror (EREQPAR, "kpi");
    1184:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
    1188:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
		if ((aword)i == pid) {
    118c:	06330517 			; <UNDEFINED> instruction: 0x06330517
    1190:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				__PCB = i->Next;
    1194:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
			killev (i);
    1198:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
			ufree (i);
    119c:	2d050404 	cfstrscs	mvf0, [r5, #-16]
			if (i == __pi_curr)
    11a0:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
    11a4:	03050104 	movweq	r0, #20740	; 0x5104
				release;
    11a8:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
				j->Next = i->Next;
    11ac:	06410520 	strbeq	r0, [r1], -r0, lsr #10
    11b0:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
    11b4:	010e051d 	tsteq	lr, sp, lsl r5
}
    11b8:	01060205 	tsteq	r6, r5, lsl #4
    11bc:	03042606 	movweq	r2, #17926	; 0x4606
    11c0:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
	if (size < 8)
    11c4:	01040178 	tsteq	r4, r8, ror r1
		_size = 2;
    11c8:	03060105 	movweq	r0, #24837	; 0x6105
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
		_size = (((aword)size) + 3) >> 2;
    11d0:	01010008 	tsteq	r1, r8
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
		_size = (((aword)size) + 3) >> 2;
    11d8:	00083802 	andeq	r3, r8, r2, lsl #16
		if (mevent [MA_NP] . nfail != 255)
    11dc:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
    11e0:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
			mevent [MA_NP] . nfail ++;
    11e4:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
		mnfree [MA_NP] = 0;
    11e8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    11ec:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	07040107 	streq	r0, [r4, -r7, lsl #2]
    11f4:	bb030505 	bllt	c2610 <__ccfg+0xa2668>
			syserror (EMALLOC, "malc");
    11f8:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
    11fc:	0602052e 	streq	r0, [r2], -lr, lsr #10
		if (m_size (chunk) >= _size)
    1200:	01013d3d 	tsteq	r1, sp, lsr sp
    1204:	20063c01 	andcs	r3, r6, r1, lsl #24
		chunk = m_nextp (chunk)) {
    1208:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
		m_setnextp (cc, m_nextp (chunk));
    120c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1210:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    1214:	050f0105 	streq	r0, [pc, #-261]	; 1117 <__pi_malloc_init+0x3b>
			m_size (chunk) = _size;
    1218:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
			cc = chunk + _size + m_hdrlen;
    121c:	02052004 	andeq	r2, r5, #4
    1220:	01013d06 	tsteq	r1, r6, lsl #26
			m_size (cc) = waste - m_hdrlen;
    1224:	20063c01 	andcs	r3, r6, r1, lsl #24
			QFREE;
    1228:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
		mevent [MA_NP] . nfail = 0;
    122c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		mcfree [MA_NP] -= m_size (chunk);
    1230:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
    1234:	06010501 	streq	r0, [r1], -r1, lsl #10
    1238:	0107d003 	tsteq	r7, r3
    123c:	01000b02 	tsteq	r0, r2, lsl #22
		m_size (chunk) |= MALLOC_UMASK;
    1240:	00150501 	andseq	r0, r5, r1, lsl #10
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1244:	08dc0205 	ldmeq	ip, {r0, r2, r9}^
		m_size (chunk) |= MALLOC_UMASK;
    1248:	80030000 	andhi	r0, r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    124c:	02050108 	andeq	r0, r5, #8, 2
}
    1250:	06150514 			; <UNDEFINED> instruction: 0x06150514
    1254:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
    1258:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    125c:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
    1260:	a7030505 	strge	r0, [r3, -r5, lsl #10]
    1264:	3105017c 	tstcc	r5, ip, ror r1
    1268:	01040106 	tsteq	r4, r6, lsl #2
aword __pi_fork (fsmcode func, aword data) {
    126c:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
    1274:	bb033105 	bllt	cd690 <__ccfg+0xad6e8>
    1278:	01042002 	tsteq	r4, r2
		if ((j = __PCB) == NULL)
    127c:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
	i->Next = NULL;
    1280:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
	i->data = data;
    1284:	9b030505 	blls	c26a0 <__ccfg+0xa26f8>
		if ((j = __PCB) == NULL)
    1288:	2d052e02 	stccs	14, cr2, [r5, #-8]
}
    128c:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
			for (; j->Next != NULL; j = j->Next);
    1290:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
    1294:	03310509 	teqeq	r1, #37748736	; 0x2400000
	return (aword) i;
    1298:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
    129c:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (mevent [MA_NP] . nwait != 255)
    12a0:	2003dc03 	andcs	sp, r3, r3, lsl #24
    12a4:	0179e703 	cmneq	r9, r3, lsl #14
    12a8:	01070514 	tsteq	r7, r4, lsl r5
		mevent [MA_NP] . nwait ++;
    12ac:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
    12b4:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
void diag (const char *mess, ...) {
    12b8:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
    12bc:	2f060305 	svccs	0x00060305
    12c0:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
	diag_disable_int (a, is);
    12c4:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    12c8:	052f0603 	streq	r0, [pc, #-1539]!	; ccd <__pi_release+0x239>
    12cc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
				d = (bc == 16) ? 10000 : 1000000000;
    12d0:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
	diag_disable_int (a, is);
    12d4:	03290504 			; <UNDEFINED> instruction: 0x03290504
	while (*mess != '\0') {
    12d8:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
	dgout ('\r');
    12dc:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
	dgout ('\n');
    12e0:	06380517 			; <UNDEFINED> instruction: 0x06380517
    12e4:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    12e8:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
	diag_wait (a);
    12ec:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
	diag_enable_int (a, is);
    12f0:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    12f4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
}
    12f8:	27032905 	strcs	r2, [r3, -r5, lsl #18]
    12fc:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1300:	01062d05 	tsteq	r6, r5, lsl #26
		if (*mess == '%') {
    1304:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1308:	3c560306 	mrrccc	3, 0, r0, r6, cr6
			if (*mess == 'l') {
    130c:	29050404 	stmdbcs	r5, {r2, sl}
    1310:	0100db03 	tsteq	r0, r3, lsl #22
				mess++;
    1314:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
				val = va_arg (ap, lword);
    1318:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
				bc = 32;
    131c:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
				bc = 16;
    1320:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
			switch (*mess) {
    1324:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
    1328:	06010602 	streq	r0, [r1], -r2, lsl #12
    132c:	2e069a03 	vmlacs.f32	s18, s12, s6
				dgout ('%');
    1330:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
    1334:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
				dgout (*mess);
    1338:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    133c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
			switch (*mess) {
    1340:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
					v = __pi_hex_enc_table [
    1344:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
					i += 4;
    1348:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
					(val >> (bc - i)) & 0xf];
    134c:	7a9a032d 	bvc	fe682008 <_estack+0xde67d008>
    1350:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
					dgout (v);
    1354:	e6030602 	str	r0, [r3], -r2, lsl #12
    1358:	04042005 	streq	r2, [r4], #-5
				while (i < bc) {
    135c:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
			mess++;
    1360:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
					d /= 10;
    1364:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
				if ((val >> (bc - 1)) & 1) {
    1368:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    136c:	e6030602 	str	r0, [r3], -r2, lsl #12
					dgout ('-');
    1370:	01012005 	tsteq	r1, r5
    1374:	01010101 	tsteq	r1, r1, lsl #2
						val |= 0xffff0000;
    1378:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    137c:	29050404 	stmdbcs	r5, {r2, sl}
    1380:	017acb03 	cmneq	sl, r3, lsl #22
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1388:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    138c:	03020501 	movweq	r0, #9473	; 0x2501
					v = (word) (val / d);
    1390:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
					if (v || d == 1) break;
    1394:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1398:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
					d /= 10;
    139c:	06020501 	streq	r0, [r2], -r1, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    13a0:	2005b003 	andcs	fp, r5, r3
					dgout (v + '0');
    13a4:	29050404 	stmdbcs	r5, {r2, sl}
    13a8:	017acb03 	cmneq	sl, r3, lsl #22
    13ac:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
					d /= 10;
    13b0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
					val = val - (v * d);
    13b4:	06020501 	streq	r0, [r2], -r1, lsl #10
					if (d == 0) break;
    13b8:	2005b003 	andcs	fp, r5, r3
					v = (word) (val / d);
    13bc:	01010101 	tsteq	r1, r1, lsl #2
    13c0:	23050101 	movwcs	r0, #20737	; 0x5101
				if (bc == 16)
    13c4:	01100306 	tsteq	r0, r6, lsl #6
				d = (bc == 16) ? 10000 : 1000000000;
    13c8:	70030205 	andvc	r0, r3, r5, lsl #4
					val &= 0xffff;
    13cc:	01580620 	cmpeq	r8, r0, lsr #12
					dgout (*s);
    13d0:	010d032e 	tsteq	sp, lr, lsr #6
					s++;
    13d4:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
				while (*s != '\0') {
    13d8:	017ecd03 	cmneq	lr, r3, lsl #26
    13dc:	01062f05 	tsteq	r6, r5, lsl #30
			dgout (*mess++);
    13e0:	27050104 	strcs	r0, [r5, -r4, lsl #2]
    13e4:	2001ba03 	andcs	fp, r1, r3, lsl #20
    13e8:	2f050a04 	svccs	0x00050a04
    13ec:	207ec603 	rsbscs	ip, lr, r3, lsl #12
    13f0:	02050104 	andeq	r0, r5, #4, 2
}
    13f4:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
    while(1)
    13f8:	06230520 	strteq	r0, [r3], -r0, lsr #10
{
    13fc:	03020513 	movweq	r0, #9491	; 0x2513
    SetupTrimDevice();
    1400:	2305200c 	movwcs	r2, #20492	; 0x500c
    pui32Src = &_etext;
    1404:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1408:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    __asm("    ldr     r0, =_bss\n"
    140c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    1410:	27052802 	strcs	r2, [r5, -r2, lsl #16]
    1414:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    1418:	3f280602 	svccc	0x00280602
    141c:	4a0a0331 	bmi	2820e8 <__ccfg+0x262140>
   main();
    1420:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
    FaultISR();
    1424:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
        *pui32Dest++ = *pui32Src++;
    1428:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    142c:	017eae03 	cmneq	lr, r3, lsl #28
    1430:	0d050104 	stfeqs	f0, [r5, #-16]
    1434:	01d40306 	bicseq	r0, r4, r6, lsl #6
    1438:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    143c:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
    1440:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1444:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
static byte get_byte () {
    1448:	0d052001 	stceq	0, cr2, [r5, #-4]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    144c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1450:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
    1458:	0605152e 	streq	r1, [r5], -lr, lsr #10
		if (ee_inp)
    145c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			b |= 1;
    1460:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1464:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1468:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
	for (b = 0, i = 0; i < 8; i++) {
    146c:	030c0401 	movweq	r0, #50177	; 0xc401
}
    1470:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
    1474:	0b040106 	bleq	101894 <__ccfg+0xe18ec>
    1478:	03060505 	movweq	r0, #25861	; 0x6505
static void put_byte (byte b) {
    147c:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
    1480:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1484:	01044b06 	tsteq	r4, r6, lsl #22
    1488:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
		if (b & 0x80)
    148c:	03054a06 	movweq	r4, #23046	; 0x5a06
    1490:	13040513 	movwne	r0, #17683	; 0x4513
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1494:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
	for (i = 0; i < 8; i++) {
    1498:	cb031902 	blgt	c78a8 <__ccfg+0xa7900>
		b <<= 1;
    149c:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
	for (i = 0; i < 8; i++) {
    14a0:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
}
    14a4:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
    14a8:	06230517 			; <UNDEFINED> instruction: 0x06230517
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14ac:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    14b0:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
	put_byte (cmd);
    14b4:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    14b8:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
}
    14bc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    14c0:	dd030602 	stcle	6, cr0, [r3, #-8]
static void wwait (word st, word del) {
    14c4:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
    14c8:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    14cc:	03052d02 	movweq	r2, #23810	; 0x5d02
	while (dopen && (rdsr () & 1)) {
    14d0:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
    14d4:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
    14d8:	03051306 	movweq	r1, #21254	; 0x5306
    14dc:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
	put_byte (CMD_RDSR);
    14e0:	1f050101 	svcne	0x00050101
	r = get_byte ();
    14e4:	00020500 	andeq	r0, r2, r0, lsl #10
    14e8:	03000000 	movweq	r0, #0
	while (dopen && (rdsr () & 1)) {
    14ec:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
}
    14f0:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
		if (st == WNONE)
    14f4:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    14f8:	2c056615 	stccs	6, cr6, [r5], {21}
			mdelay (1);
    14fc:	20150520 	andscs	r0, r5, r0, lsr #10
    1500:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
			delay (del, st);
    1504:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
    1508:	03022301 	movweq	r2, #8961	; 0x2301
			release;
    150c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1510:	0205001c 	andeq	r0, r5, #28
    1514:	00000000 	andeq	r0, r0, r0
static void ready () {
    1518:	010adb03 	tsteq	sl, r3, lsl #22
	if (dopen) {
    151c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
		wwait (WNONE, 1);
    1520:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1524:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
    1528:	07052506 	streq	r2, [r5, -r6, lsl #10]
	dstat = 0;
    152c:	58060520 	stmdapl	r6, {r5, r8, sl}
}
    1530:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1534:	01060605 	tsteq	r6, r5, lsl #12
    1538:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
	udelay (1);
    153c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1540:	06200602 	strteq	r0, [r0], -r2, lsl #12
	udelay (1);
    1544:	0601054d 	streq	r0, [r1], -sp, asr #10
		dopen = DOPEN_TEMP;
    1548:	00040213 	andeq	r0, r4, r3, lsl r2
    154c:	31050101 	tstcc	r5, r1, lsl #2
    1550:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    1554:	0300000a 	movweq	r0, #10
static void cclose () {
    1558:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
	if (dopen == DOPEN_TEMP) {
    155c:	03041402 	movweq	r1, #17410	; 0x4402
    1560:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
		wwait (WNONE, 1);
    1564:	01040177 	tsteq	r4, r7, ror r1
    1568:	03063105 	movweq	r3, #24837	; 0x6105
	cmd_0 (CMD_DP);
    156c:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
    1570:	03030503 	movweq	r0, #13571	; 0x3503
		dopen = 0;
    1574:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
}
    1578:	03310501 	teqeq	r1, #4194304	; 0x400000
word ee_open () {
    157c:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
	ready ();
    1580:	03030503 	movweq	r0, #13571	; 0x3503
	dopen = DOPEN_PERM;
    1584:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
    1588:	06020501 	streq	r0, [r2], -r1, lsl #10
}
    158c:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
	if (dopen) {
    1590:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1594:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
		dopen = DOPEN_TEMP;
    1598:	01046676 	tsteq	r4, r6, ror r6
		cclose ();
    159c:	03060205 	movweq	r0, #25093	; 0x6205
}
    15a0:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
int ser_in (word st, char *buf, int len) {
    15a4:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
    15a8:	19010101 	stmdbne	r1, {r0, r8}
	if (len == 0)
    15ac:	01044a5b 	tsteq	r4, fp, asr sl
	if (__inpline == NULL) {
    15b0:	03061a05 	movweq	r1, #27141	; 0x6a05
		if ((prcs = running (__inserial)) == 0) {
    15b4:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
    15b8:	0602050d 	streq	r0, [r2], -sp, lsl #10
			prcs = runthread (__inserial);
    15bc:	2076f903 	rsbscs	pc, r6, r3, lsl #18
    15c0:	01010101 	tsteq	r1, r1, lsl #2
			if (prcs == 0) {
    15c4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
				npwait (st);
    15c8:	01360303 	teqeq	r6, r3, lsl #6
		release;
    15cc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
		join (prcs, st);
    15d0:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
    15d4:	eb030104 	bl	c19ec <__ccfg+0xa1a44>
	if (*__inpline == NULL) // bin cmd
    15d8:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if (prcs >= len)
    15e0:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
		prcs = len-1;
    15e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	memcpy (buf, __inpline, prcs);
    15e8:	20150520 	andscs	r0, r5, r0, lsr #10
    15ec:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    15f0:	216a0604 	cmncs	sl, r4, lsl #12
	ufree (__inpline);
    15f4:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	__inpline = NULL;
    15f8:	01778e03 	cmneq	r7, r3, lsl #28
	if (*buf) // if it's NULL, it's a bin cmd
    15fc:	03050304 	movweq	r0, #21252	; 0x5304
		buf [prcs] = '\0';
    1600:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
}
    1604:	0302050d 	movweq	r0, #9485	; 0x250d
		prcs = strlen (__inpline);
    1608:	20202055 	eorcs	r2, r0, r5, asr r0
    160c:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
		return 0;
    1610:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
    1614:	a6030305 	strge	r0, [r3], -r5, lsl #6
    1618:	10054a75 	andne	r4, r5, r5, ror sl
int ser_outf (word st, const char *m, ...) {
    161c:	06050106 	streq	r0, [r5], -r6, lsl #2
    1620:	20230520 	eorcs	r0, r3, r0, lsr #10
	if ((prcs = running (__outserial)) != 0) {
    1624:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    1628:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
		join (prcs, st);
    162c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    1630:	052f0604 	streq	r0, [pc, #-1540]!	; 1034 <adddevfunc+0x18>
		release;
    1634:	01041c02 	tsteq	r4, r2, lsl #24
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	8f030405 	svchi	0x00030405
    163c:	2a052e09 	bcs	14ce68 <__ccfg+0x12cec0>
    1640:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		umwait (st);
    1644:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
    1648:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
	if (runstrand (__outserial, buf) == 0) {
    164c:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
    1650:	017fb203 	cmneq	pc, r3, lsl #4
    1654:	01062905 	tsteq	r6, r5, lsl #18
		ufree (buf);
    1658:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		npwait (st);
    165c:	00d10306 	sbcseq	r0, r1, r6, lsl #6
}
    1660:	02044d66 	andeq	r4, r4, #6528	; 0x1980
    1664:	9f030505 	svcls	0x00030505
    1668:	01040178 	tsteq	r4, r8, ror r1
    166c:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
int ser_inf (word st, const char *fmt, ...) {
    1670:	1a052007 	bne	149694 <__ccfg+0x1296ec>
    1674:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (fmt == NULL)
    1678:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
	if (__inpline == NULL) {
    167c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
		if ((prcs = running (__inserial)) == 0) {
    1680:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    1684:	03050502 	movweq	r0, #21762	; 0x5502
			prcs = runthread (__inserial);
    1688:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
    168c:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
			if (prcs == 0) {
    1690:	06040501 	streq	r0, [r4], -r1, lsl #10
				npwait (st);
    1694:	2007f103 	andcs	pc, r7, r3, lsl #2
		release;
    1698:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
		join (prcs, st);
    169c:	0178a003 	cmneq	r8, r3
    16a0:	31050904 	tstcc	r5, r4, lsl #18
	va_start (ap, fmt);
    16a4:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
	prcs = vscan (__inpline, fmt, ap);
    16a8:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
    16ac:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
	ufree (__inpline);
    16b0:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
	__inpline = NULL;
    16b4:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
}
    16b8:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    16bc:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
    16c0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
		return 0;
    16c4:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
    16c8:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
    16cc:	a0033105 	andge	r3, r3, r5, lsl #2
strand (__outserial, const char*)
    16d0:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    16d4:	06520515 			; <UNDEFINED> instruction: 0x06520515
    16d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    16dc:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
endstrand
    16e0:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    16e4:	7a9b0352 	bvc	fe6c2434 <_estack+0xde6bd434>
	ptr = data;
    16e8:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    16ec:	e0030604 	and	r0, r3, r4, lsl #12
	if (*ptr)
    16f0:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
		len = strlen (ptr);
    16f4:	86030505 	strhi	r0, [r3], -r5, lsl #10
    16f8:	01040178 	tsteq	r4, r8, ror r1
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fc:	fc030405 	stc2	4, cr0, [r3], {5}
    1700:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
    1704:	ea030505 	b	c2b20 <__ccfg+0xa2b78>
    1708:	3105017a 	tstcc	r5, sl, ror r1
    170c:	29050106 	stmdbcs	r5, {r1, r2, r8}
	len -= quant;
    1710:	2004b603 	andcs	fp, r4, r3, lsl #12
    1714:	ca033105 	bgt	cdb30 <__ccfg+0xadb88>
    1718:	01042e7b 	tsteq	r4, fp, ror lr
	if (len == 0) {
    171c:	03060405 	movweq	r0, #25605	; 0x6405
		ufree (data);
    1720:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
		finish;
    1724:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    1728:	6a062004 	bvs	189740 <__ccfg+0x169798>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    172c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1730:	01799f03 	cmneq	r9, r3, lsl #30
    1734:	01063f05 	tsteq	r6, r5, lsl #30
    1738:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    173c:	2006ed03 	andcs	lr, r6, r3, lsl #26
strand (__inserial, address)
    1740:	3f050904 	svccc	0x00050904
    1744:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1748:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    174c:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
    1750:	0309042e 	movweq	r0, #37934	; 0x942e
	if (__inpline != NULL)
    1754:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1758:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
		finish;
    175c:	03040501 	movweq	r0, #17665	; 0x4501
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1760:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
    1764:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1768:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
    176c:	06040501 	streq	r0, [r4], -r1, lsl #10
		umwait (IM_INIT);
    1770:	4a00f303 	bmi	3e384 <__ccfg+0x1e3dc>
		release;
    1774:	0204404d 	andeq	r4, r4, #77	; 0x4d
	savedata (data);
    1778:	ea030505 	b	c2b94 <__ccfg+0xa2bec>
	len = MAX_LINE_LENGTH;
    177c:	01040177 	tsteq	r4, r7, ror r1
	io (IM_READ, __cport, READ, ptr, 1);
    1780:	99030405 	stmdbls	r3, {r0, r2, sl}
    1784:	1a052008 	bne	1497ac <__ccfg+0x129804>
    1788:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    178c:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
	if (ptr == (char*) data) { // new line
    1790:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1794:	1a052304 	bne	14a3ac <__ccfg+0x12a404>
		if (*ptr == '\0') { // bin cmd
    1798:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
			proceed (IM_BIN);
    179c:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
    17a0:	017eee03 	cmneq	lr, r3, lsl #28
		if (*ptr < 0x20)
    17a4:	01062905 	tsteq	r6, r5, lsl #18
    17a8:	0d050e04 	stceq	14, cr0, [r5, #-16]
			proceed (IM_READ);
    17ac:	2e7bdb03 	vaddcs.f64	d29, d11, d3
    17b0:	29050904 	stmdbcs	r5, {r2, r8, fp}
	if (*ptr == '\n' || *ptr == '\r') {
    17b4:	2004a503 	andcs	sl, r4, r3, lsl #10
    17b8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    17bc:	01970306 	orrseq	r0, r7, r6, lsl #6
		*ptr = '\0';
    17c0:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
		__inpline = (char*)data;
    17c4:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
		finish;
    17c8:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
	if (len) {
    17cc:	01065205 	tsteq	r6, r5, lsl #4
		ptr++;
    17d0:	1a050104 	bne	141be8 <__ccfg+0x121c40>
    17d4:	068c0306 	streq	r0, [ip], r6, lsl #6
		len--;
    17d8:	110a052e 	tstne	sl, lr, lsr #10
	proceed (IM_READ);
    17dc:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
	io (IM_BIN, __cport, READ, ptr, 1);
    17e0:	017ac303 	cmneq	sl, r3, lsl #6
    17e4:	01060d05 	tsteq	r6, r5, lsl #26
    17e8:	0a050104 	beq	141c00 <__ccfg+0x121c58>
    17ec:	2005bd03 	andcs	fp, r5, r3, lsl #26
    17f0:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
	len -= 2;
    17f4:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
	if (len > *ptr + 1) // 1 for 0x04
    17f8:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    17fc:	110a0521 	tstne	sl, r1, lsr #10
		len = *ptr + 1;
    1800:	01060b05 	tsteq	r6, r5, lsl #22
    1804:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
	ptr++;
    1808:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
	quant = io (IM_BINL, __cport, READ, ptr, len);
    180c:	03050509 	movweq	r0, #21769	; 0x5509
    1810:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
    1814:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    1818:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
    181c:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    1820:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
	len -= quant;
    1824:	06040501 	streq	r0, [r4], -r1, lsl #10
		__inpline = (char*)data;
    1828:	2005cb03 	andcs	ip, r5, r3, lsl #22
		finish;
    182c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	ptr += quant;
    1830:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
    1834:	01063f05 	tsteq	r6, r5, lsl #30
endstrand
    1838:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    183c:	07920306 	ldreq	r0, [r2, r6, lsl #6]
	proceed (IM_BINL);
    1840:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
endstrand
    1844:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
    1848:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    184c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1850:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
    1854:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
    1858:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
		if (res && (d < n))
    185c:	01040177 	tsteq	r4, r7, ror r1
    1860:	ba030405 	blt	c287c <__ccfg+0xa28d4>
    1864:	09032008 	stmdbeq	r3, {r3, sp}
    1868:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
			res [d] = (char) c;
    186c:	017db003 	cmneq	sp, r3
		d++;
    1870:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1874:	017ed403 	cmneq	lr, r3, lsl #8
    1878:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    1880:	03010501 	movweq	r0, #5377	; 0x1501
    1884:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
				enci (10000);
    1888:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    188c:	055b2002 	ldrbeq	r2, [fp, #-2]
    1890:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
	d = 0;
    1894:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
		c = *fm++;
    1898:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
		if (c == '\\') {
    189c:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
			if ((c = *fm++) == '\0') {
    18a0:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    18a4:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
				outc ('\\');
    18a8:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
			if ((c = *fm++) == '\0') {
    18ac:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
				outc ('\\');
    18b0:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    18b4:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
			outc (c);
    18b8:	03050502 	movweq	r0, #21762	; 0x5502
    18bc:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
			if (c == '\0')
    18c0:	03040501 	movweq	r0, #17665	; 0x4501
    18c4:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
			outc (c);
    18c8:	0305050e 	movweq	r0, #21774	; 0x550e
				outc (val);
    18cc:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
				val = (word) va_arg (ap, aword);
    18d0:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
		if (c == '%') {
    18d4:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    18d8:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
			c = *fm++;
    18dc:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
			switch (c) {
    18e0:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    18e4:	06040501 	streq	r0, [r4], -r1, lsl #10
    18e8:	3c05f703 	stccc	7, cr15, [r5], {3}
    18ec:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    18f0:	01778503 	cmneq	r7, r3, lsl #10
    18f4:	0d050e04 	stceq	14, cr0, [r5, #-16]
    18f8:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    18fc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
				outc ('%');
    1900:	96030639 			; <UNDEFINED> instruction: 0x96030639
    1904:	0a052006 	beq	149924 <__ccfg+0x12997c>
				outc (c);
    1908:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    190c:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
    1910:	060d0501 	streq	r0, [sp], -r1, lsl #10
				if (c == '\0')
    1914:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				return d;
    1918:	0696030a 	ldreq	r0, [r6], sl, lsl #6
}
    191c:	06040520 	streq	r0, [r4], -r0, lsr #10
    1920:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
			switch (c) {
    1924:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
    1928:	06410501 	strbeq	r0, [r1], -r1, lsl #10
    192c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				for (i = 12; ; i -= 4) {
    1930:	08970304 	ldmeq	r7, {r2, r8, r9}
				val = (word) va_arg (ap, aword);
    1934:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
						[ (val >> i) & 0xf ]);
    1938:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    193c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1940:	97030604 	strls	r0, [r3, -r4, lsl #12]
					outc (__pi_hex_enc_table
    1944:	04522008 	ldrbeq	r2, [r2], #-8
    1948:	0302050d 	movweq	r0, #9485	; 0x250d
					if (i == 0)
    194c:	4a2075d1 	bmi	81f098 <__ccfg+0x7ff0f0>
    1950:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
				for (i = 12; ; i -= 4) {
    1954:	03030503 	movweq	r0, #13571	; 0x3503
				val = (word) va_arg (ap, aword);
    1958:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
				if (c == 'd' && (val & 0x8000) != 0) {
    195c:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
				val = (word) va_arg (ap, aword);
    1960:	37021620 	strcc	r1, [r2, -r0, lsr #12]
				if (c == 'd' && (val & 0x8000) != 0) {
    1964:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1968:	02050012 	andeq	r0, r5, #18
					outc ('-');
    196c:	00000000 	andeq	r0, r0, r0
    1970:	0100e103 	tsteq	r0, r3, lsl #2
					val = (~val) + 1;
    1974:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1978:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
				for (i = 12; ; i -= 4) {
    197c:	1f212202 	svcne	0x00212202
				enci (10000);
    1980:	4b2f2106 	blmi	bc9da0 <__ccfg+0xba9df8>
    1984:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    1988:	06020501 	streq	r0, [r2], -r1, lsl #10
    198c:	0008022f 	andeq	r0, r8, pc, lsr #4
    1990:	3a050101 	bcc	141d9c <__ccfg+0x121df4>
    1994:	00020500 	andeq	r0, r2, r0, lsl #10
    1998:	03000000 	movweq	r0, #0
    199c:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
    19a0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    19a4:	200e063a 	andcs	r0, lr, sl, lsr r6
    19a8:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    19ac:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
    19b0:	06030524 	streq	r0, [r3], -r4, lsr #10
    19b4:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
    19b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    19bc:	06120530 			; <UNDEFINED> instruction: 0x06120530
    19c0:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    19c4:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
				if (c == 'd' || c == 'u') {
    19c8:	01060905 	tsteq	r6, r5, lsl #18
    19cc:	2f050f04 	svccs	0x00050f04
					if (c == 'd' &&
    19d0:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
					val = va_arg (ap, lword);
    19d4:	03090501 	movweq	r0, #38145	; 0x9501
					fm++;
    19d8:	0305206b 	movweq	r2, #20587	; 0x506b
					if (c == 'd' &&
    19dc:	0f042106 	svceq	0x00042106
    19e0:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
						outc ('-');
    19e4:	062f0501 	strteq	r0, [pc], -r1, lsl #10
    19e8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
						val = (~val) + 1;
    19ec:	207a0301 	rsbscs	r0, sl, r1, lsl #6
				enci (10000);
    19f0:	03060405 	movweq	r0, #25605	; 0x6405
					enci (1000000000UL);
    19f4:	0f04206f 	svceq	0x0004206f
    19f8:	c3030505 	movwgt	r0, #13573	; 0x3505
    19fc:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
    1a00:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    1a04:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
    1a08:	060b0501 	streq	r0, [fp], -r1, lsl #10
    1a0c:	017fb603 	cmneq	pc, r3, lsl #12
    1a10:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    1a14:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    1a18:	062f050e 	strteq	r0, [pc], -lr, lsl #10
    1a1c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a20:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    1a24:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1a28:	06053f04 	streq	r3, [r5], -r4, lsl #30
    1a2c:	0604052b 	streq	r0, [r4], -fp, lsr #10
    1a30:	03052f23 	movweq	r2, #24355	; 0x5f23
    1a34:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
				} else if (c == 'x') {
    1a38:	03051f09 	movweq	r1, #24329	; 0x5f09
					for (i = 28; ; i -= 4) {
    1a3c:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
					val = va_arg (ap, lword);
    1a40:	01010009 	tsteq	r1, r9
							[ (val >> i) & 0xf ]);
    1a44:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    1a48:	000cec02 	andeq	lr, ip, r2, lsl #24
						outc (__pi_hex_enc_table
    1a4c:	0af10300 	beq	ffc42654 <_estack+0xdfc3d654>
    1a50:	16030501 	strne	r0, [r3], -r1, lsl #10
    1a54:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
						if (i == 0)
    1a58:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
    1a5c:	26250520 	strtcs	r0, [r5], -r0, lsr #10
					for (i = 28; ; i -= 4) {
    1a60:	051f0305 	ldreq	r0, [pc, #-773]	; 1763 <__inserial+0x23>
					outc ('%');
    1a64:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1a68:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    1a6c:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
					outc ('l');
    1a70:	0305010f 	movweq	r0, #20751	; 0x510f
    1a74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				val = (word) va_arg (ap, aword);
    1a78:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
				outc (val);
    1a7c:	06207903 	strteq	r7, [r0], -r3, lsl #18
    1a80:	5b5b3231 	blpl	16ce34c <__ccfg+0x16ae3a4>
				while (*st != '\0') {
    1a84:	01061c05 	tsteq	r6, r5, lsl #24
    1a88:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a8c:	0c052302 	stceq	3, cr2, [r5], {2}
    1a90:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
					outc (*st);
    1a94:	03043e23 	movweq	r3, #20003	; 0x4e23
    1a98:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
					st++;
    1a9c:	01040175 	tsteq	r4, r5, ror r1
		c = *fm++;
    1aa0:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
    1aa4:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
    1aa8:	e0010100 	and	r0, r1, r0, lsl #2
char *vform (char *res, const char *fm, va_list aq) {
    1aac:	0300000e 	movweq	r0, #14
    1ab0:	00019000 	andeq	r9, r1, r0
	if (res != NULL) {
    1ab4:	fb010200 	blx	422be <__ccfg+0x22316>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab8:	01000d0e 	tsteq	r0, lr, lsl #26
    1abc:	00010101 	andeq	r0, r1, r1, lsl #2
    1ac0:	00010000 	andeq	r0, r1, r0
}
    1ac4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1ac8:	2f656d6f 	svccs	0x00656d6f
	fml = strlen (fm) + 17;
    1acc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1ad0:	442f6e69 	strtmi	r6, [pc], #-3689	; 1ad8 <vform+0x2c>
    1ad4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad8:	4f2f706f 	svcmi	0x002f706f
    1adc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1ae0:	502f5445 	eorpl	r5, pc, r5, asr #8
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae4:	534f4349 	movtpl	r4, #62281	; 0xf349
    1ae8:	6369502f 	cmnvs	r9, #47	; 0x2f
    1aec:	6b2f534f 	blvs	bd6830 <__ccfg+0xbb6888>
    1af0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		ufree (res);
    1af4:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
		goto Again;
    1af8:	2f656d6f 	svccs	0x00656d6f
	if (buf == NULL || fmt == NULL)
    1afc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
int vscan (const char *buf, const char *fmt, va_list ap) {
    1b00:	442f6e69 	strtmi	r6, [pc], #-3689	; 1b08 <vscan+0xc>
	if (buf == NULL || fmt == NULL)
    1b04:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1b08:	4f2f706f 	svcmi	0x002f706f
    1b0c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		    	    case 'u': scanu (lword); break;
    1b10:	502f5445 	eorpl	r5, pc, r5, asr #8
			while (isspace (*buf)) buf++;
    1b14:	534f4349 	movtpl	r4, #62281	; 0xf349
    1b18:	6369502f 	cmnvs	r9, #47	; 0x2f
	while (*fmt != '\0') {
    1b1c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		if (*fmt++ != '%')
    1b20:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		switch (*fmt++) {
    1b24:	43432f58 	movtmi	r2, #16216	; 0x3f58
    1b28:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1b2c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    1b30:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    1b34:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1b38:	2f006269 	svccs	0x00006269
    1b3c:	2f727375 	svccs	0x00727375
}
    1b40:	2f62696c 	svccs	0x0062696c
		switch (*fmt++) {
    1b44:	2f636367 	svccs	0x00636367
    1b48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1b4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1b50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
			while (isspace (*buf)) buf++;
    1b54:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    1b58:	2f312e32 	svccs	0x00312e32
    1b5c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1b60:	00656475 	rsbeq	r6, r5, r5, ror r4
    1b64:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1ab0 <vform+0x4>
    1b68:	616d2f65 	cmnvs	sp, r5, ror #30
			if (*buf == '\0')
    1b6c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			if (*buf != ',') {
    1b70:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			sap = va_arg (ap, char*);
    1b74:	706f746b 	rsbvc	r7, pc, fp, ror #8
			nc++;
    1b78:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			if (*buf != ',') {
    1b7c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				while (!isspace (*buf) && *buf != ',' &&
    1b80:	4349502f 	movtmi	r5, #36911	; 0x902f
    1b84:	502f534f 	eorpl	r5, pc, pc, asr #6
    1b88:	534f6369 	movtpl	r6, #62313	; 0xf369
    1b8c:	3143432f 	cmpcc	r3, pc, lsr #6
    1b90:	00585833 	subseq	r5, r8, r3, lsr r8
    1b94:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1ae0 <vform+0x34>
    1b98:	616d2f65 	cmnvs	sp, r5, ror #30
			while (isspace (*buf)) buf++;
    1b9c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1ba0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1ba4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1ba8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1bac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			if (*buf == ',') buf++;
    1bb0:	4349502f 	movtmi	r5, #36911	; 0x902f
    1bb4:	502f534f 	eorpl	r5, pc, pc, asr #6
			*sap = '\0';
    1bb8:	534f6369 	movtpl	r6, #62313	; 0xf369
			break;
    1bbc:	656b0000 	strbvs	r0, [fp, #-0]!
		    case 'd': scani (word); break;
    1bc0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1bc4:	0100632e 	tsteq	r0, lr, lsr #6
    1bc8:	61750000 	cmnvs	r5, r0
    1bcc:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1bd0:	00000200 	andeq	r0, r0, r0, lsl #4
    1bd4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1bd8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1bdc:	00000300 	andeq	r0, r0, r0, lsl #6
    1be0:	61647473 	smcvs	18243	; 0x4743
    1be4:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    1be8:	00000300 	andeq	r0, r0, r0, lsl #6
    1bec:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1bf0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1bf4:	616d0000 	cmnvs	sp, r0
    1bf8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    1bfc:	00000400 	andeq	r0, r0, r0, lsl #8
    1c00:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    1c04:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1c08:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1c0c:	75620000 	strbvc	r0, [r2, #-0]!
    1c10:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1c14:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c18:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1c1c:	73000004 	movwvc	r0, #4
    1c20:	6f697379 	svcvs	0x00697379
    1c24:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1c28:	656b0000 	strbvs	r0, [fp, #-0]!
    1c2c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
		    case 'u': scanu (word); break;
    1c30:	0100682e 	tsteq	r0, lr, lsr #16
    1c34:	623c0000 	eorsvs	r0, ip, #0
    1c38:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    1c3c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    1c40:	00000000 	andeq	r0, r0, r0
    1c44:	00260500 	eoreq	r0, r6, r0, lsl #10
    1c48:	0d4c0205 	sfmeq	f0, 2, [ip, #-20]	; 0xffffffec
    1c4c:	c3030000 	movwgt	r0, #12288	; 0x3000
    1c50:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    1c54:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    1c58:	03062605 	movweq	r2, #26117	; 0x6605
    1c5c:	02050178 	andeq	r0, r5, #120, 2
    1c60:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    1c64:	02051f07 	andeq	r1, r5, #7, 30
    1c68:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
    1c6c:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1c70:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    1c74:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
		    case 'x': scanx (word); break;
    1c78:	2c060f05 	stccs	15, cr0, [r6], {5}
    1c7c:	01060305 	tsteq	r6, r5, lsl #6
    1c80:	2f060405 	svccs	0x00060405
    1c84:	01061605 	tsteq	r6, r5, lsl #12
    1c88:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    1c8c:	4b310605 	blmi	c434a8 <__ccfg+0xc23500>
    1c90:	7a030205 	bvc	c24ac <__ccfg+0xa2504>
    1c94:	06010501 	streq	r0, [r1], -r1, lsl #10
    1c98:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    1c9c:	01010003 	tsteq	r1, r3
    1ca0:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    1ca4:	000d8802 	andeq	r8, sp, r2, lsl #16
    1ca8:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    1cac:	03020501 	movweq	r0, #9473	; 0x2501
    1cb0:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    1cb4:	01060d05 	tsteq	r6, r5, lsl #26
    1cb8:	70031f05 	andvc	r1, r3, r5, lsl #30
    1cbc:	030d0520 	movweq	r0, #54560	; 0xd520
    1cc0:	1f052e10 	svcne	0x00052e10
    1cc4:	02052006 	andeq	r2, r5, #6
    1cc8:	03060106 	movweq	r0, #24838	; 0x6106
    1ccc:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
    1cd0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1cd4:	1f051f05 	svcne	0x00051f05
    1cd8:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1cdc:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
    1ce0:	060f0521 	streq	r0, [pc], -r1, lsr #10
    1ce4:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
    1ce8:	0f052306 	svceq	0x00052306
    1cec:	01050106 	tsteq	r5, r6, lsl #2
			switch (*fmt++) {
    1cf0:	06030524 	streq	r0, [r3], -r4, lsr #10
    1cf4:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    1cf8:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1cfc:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
    1d00:	05213006 	streq	r3, [r1, #-6]!
    1d04:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
		    	    case 'd': scani (lword); break;
    1d08:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    1d0c:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    1d10:	0a050106 	beq	142130 <__ccfg+0x122188>
    1d14:	1f053406 	svcne	0x00053406
    1d18:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1d1c:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1d20:	10052f22 	andne	r2, r5, r2, lsr #30
    1d24:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1d28:	ac0b0306 	stcge	3, cr0, [fp], {6}
    1d2c:	01060705 	tsteq	r6, r5, lsl #14
    1d30:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
    1d34:	13060905 	movwne	r0, #26885	; 0x6905
    1d38:	01000702 	tsteq	r0, r2, lsl #14
    1d3c:	001c0501 	andseq	r0, ip, r1, lsl #10
    1d40:	0e080205 	cdpeq	2, 0, cr0, cr8, cr5, {0}
    1d44:	c6030000 	strgt	r0, [r3], -r0
    1d48:	02050108 	andeq	r0, r5, #8, 2
    1d4c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    1d50:	df03060d 	svcle	0x0003060d
    1d54:	0104017c 	tsteq	r4, ip, ror r1
    1d58:	03060f05 	movweq	r0, #28421	; 0x6f05
    1d5c:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    1d60:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
		    	    case 'x': scanx (lword); break;
    1d64:	da032405 	ble	cad80 <__ccfg+0xaadd8>
    1d68:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    1d6c:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    1d70:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1d74:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    1d78:	052f0620 	streq	r0, [pc, #-1568]!	; 1760 <__inserial+0x20>
    1d7c:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    1d80:	01010005 	tsteq	r1, r5
    1d84:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    1d88:	00000002 	andeq	r0, r0, r2
    1d8c:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    1d90:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1d94:	06270514 			; <UNDEFINED> instruction: 0x06270514
    1d98:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    1d9c:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
    1da0:	20062402 	andcs	r2, r6, r2, lsl #8
    1da4:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
    1da8:	01060605 	tsteq	r6, r5, lsl #12
    1dac:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    1db0:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
    1db4:	01000502 	tsteq	r0, r2, lsl #10
    1db8:	001b0501 	andseq	r0, fp, r1, lsl #10
    1dbc:	0e200205 	cdpeq	2, 2, cr0, cr0, cr5, {0}
    1dc0:	fa030000 	blx	c1dc8 <__ccfg+0xa1e20>
    1dc4:	02050100 	andeq	r0, r5, #0, 2
    1dc8:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    1dcc:	2102051f 	tstcs	r2, pc, lsl r5
    1dd0:	01000602 	tsteq	r0, r2, lsl #12
		    	    case 'd': scani (lword); break;
    1dd4:	001e0501 	andseq	r0, lr, r1, lsl #10
    1dd8:	00000205 	andeq	r0, r0, r5, lsl #4
    1ddc:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    1de0:	02050100 	andeq	r0, r5, #0, 2
    1de4:	0e051416 	cfmvdlreq	mvd5, r1
    1de8:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    1dec:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
		    	    case 'u': scanu (lword); break;
    1df0:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    1df4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1df8:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1dfc:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1e00:	1f052e06 	svcne	0x00052e06
    1e04:	20051f06 	andcs	r1, r5, r6, lsl #30
    1e08:	0e050106 	adfeqs	f0, f5, f6
    1e0c:	02052006 	andeq	r2, r5, #6
    1e10:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1e14:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1e18:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    1e1c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1e20:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1e24:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e28:	02050021 	andeq	r0, r5, #33	; 0x21
    1e2c:	00000000 	andeq	r0, r0, r0
    1e30:	01018e03 	tsteq	r1, r3, lsl #28
    1e34:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
		    	    case 'x': scanx (lword); break;
    1e38:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1e3c:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
			if ((c = *buf++) == '\0')
    1e40:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
    1e44:	27060305 	strcs	r0, [r6, -r5, lsl #6]
			sap = va_arg (ap, char*);
    1e48:	01061205 	tsteq	r6, r5, lsl #4
			nc++;
    1e4c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
			break;
    1e50:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
			while (isspace (*buf)) buf++;
    1e54:	06054b03 	streq	r4, [r5], -r3, lsl #22
    1e58:	1f050106 	svcne	0x00050106
    1e5c:	20052b06 	andcs	r2, r5, r6, lsl #22
						*sap++ = *buf++;
    1e60:	0e050106 	adfeqs	f0, f5, f6
    1e64:	02052006 	andeq	r2, r5, #6
			while (isspace (*buf)) buf++;
    1e68:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
    1e6c:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    1e70:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
		return 0;
    1e74:	2f030501 	svccs	0x00030501
    1e78:	01061f05 	tsteq	r6, r5, lsl #30
		    case 'x': scanx (word); break;
    1e7c:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    1e80:	03052012 	movweq	r2, #20498	; 0x5012
		    	    case 'x': scanx (lword); break;
    1e84:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1e88:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e8c:	0b053206 	bleq	14e6ac <__ccfg+0x12e704>
    1e90:	0601052e 	streq	r0, [r1], -lr, lsr #10
    1e94:	00070213 	andeq	r0, r7, r3, lsl r2
    1e98:	2a050101 	bcs	1422a4 <__ccfg+0x1222fc>
    1e9c:	00020500 	andeq	r0, r2, r0, lsl #10
    1ea0:	03000000 	movweq	r0, #0
    1ea4:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
    1ea8:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    1eac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1eb0:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
    1eb4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1eb8:	0205002e 	andeq	r0, r5, #46	; 0x2e
    1ebc:	00000e30 	andeq	r0, r0, r0, lsr lr
    1ec0:	0101ae03 	tsteq	r1, r3, lsl #28
    1ec4:	02052006 	andeq	r2, r5, #6
    1ec8:	200e0306 	andcs	r0, lr, r6, lsl #6
    1ecc:	01100313 	tsteq	r0, r3, lsl r3
    1ed0:	01060605 	tsteq	r6, r5, lsl #12
    1ed4:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    1ed8:	09030602 	stmdbeq	r3, {r1, r9, sl}
    1edc:	0606052e 	streq	r0, [r6], -lr, lsr #10
    1ee0:	58050501 	stmdapl	r5, {r0, r8, sl}
    1ee4:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    1ee8:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    1eec:	0302052e 	movweq	r0, #9518	; 0x252e
    1ef0:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    1ef4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1ef8:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1efc:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    1f00:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1f04:	04052007 	streq	r2, [r5], #-7
    1f08:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    1f0c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1f10:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    1f14:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    1f18:	0303053e 	movweq	r0, #13630	; 0x353e
    1f1c:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    1f20:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    1f24:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1f28:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1f2c:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    1f30:	17030603 	strne	r0, [r3, -r3, lsl #12]
    1f34:	06070566 	streq	r0, [r7], -r6, ror #10
    1f38:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1f3c:	03060205 	movweq	r0, #25093	; 0x6205
    1f40:	0b053c16 	bleq	150fa0 <__ccfg+0x130ff8>
    1f44:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1f48:	01054006 	tsteq	r5, r6
    1f4c:	010d0306 	tsteq	sp, r6, lsl #6
    1f50:	73030205 	movwvc	r0, #12805	; 0x3205
    1f54:	0301052e 	movweq	r0, #5422	; 0x152e
    1f58:	0a022e0d 	beq	8d794 <__ccfg+0x6d7ec>
    1f5c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1f60:	0205001b 	andeq	r0, r5, #27
    1f64:	00000efc 	strdeq	r0, [r0], -ip
    1f68:	0102d203 	tsteq	r2, r3, lsl #4
    1f6c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1f70:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    1f74:	4b062202 	blmi	18a784 <__ccfg+0x16a7dc>
    1f78:	01000502 	tsteq	r0, r2, lsl #10
    1f7c:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1f80:	0f100205 	svceq	0x00100205
    1f84:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    1f88:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1f8c:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    1f90:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    1f94:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    1f98:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    1f9c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1fa0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1fa4:	06014c02 	streq	r4, [r1], -r2, lsl #24
    1fa8:	20061f3d 	andcs	r1, r6, sp, lsr pc
    1fac:	01051320 	tsteq	r5, r0, lsr #6
    1fb0:	06022106 	streq	r2, [r2], -r6, lsl #2
    1fb4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1fb8:	02050021 	andeq	r0, r5, #33	; 0x21
    1fbc:	00000f44 	andeq	r0, r0, r4, asr #30
    1fc0:	0102e503 	tsteq	r2, r3, lsl #10
    1fc4:	13160205 	tstne	r6, #1342177280	; 0x50000000
    1fc8:	06210514 			; <UNDEFINED> instruction: 0x06210514
    1fcc:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    1fd0:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
    1fd4:	21061305 	tstcs	r6, r5, lsl #6
    1fd8:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    1fdc:	0f052013 	svceq	0x00052013
    1fe0:	03054a06 	movweq	r4, #23046	; 0x5a06
    1fe4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1fe8:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    1fec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1ff0:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    1ff4:	01050d02 	tsteq	r5, r2, lsl #26
    1ff8:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    1ffc:	01000302 	tsteq	r0, r2, lsl #6
    2000:	002d0501 	eoreq	r0, sp, r1, lsl #10
    2004:	00000205 	andeq	r0, r0, r5, lsl #4
    2008:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    200c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2010:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    2014:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    2018:	02052001 	andeq	r2, r5, #1
    201c:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    2020:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2024:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    2028:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    202c:	01053c02 	tsteq	r5, r2, lsl #24
    2030:	06030533 			; <UNDEFINED> instruction: 0x06030533
    2034:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2038:	1f200501 	svcne	0x00200501
    203c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2040:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2044:	0102641f 	tsteq	r2, pc, lsl r4
    2048:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    204c:	02050026 	andeq	r0, r5, #38	; 0x26
    2050:	00000f78 	andeq	r0, r0, r8, ror pc
    2054:	01038703 	tsteq	r3, r3, lsl #14
    2058:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    205c:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    2060:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2064:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    2068:	03052806 	movweq	r2, #22534	; 0x5806
    206c:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    2070:	01060605 	tsteq	r6, r5, lsl #12
    2074:	30060405 	andcc	r0, r6, r5, lsl #8
    2078:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    207c:	06020517 			; <UNDEFINED> instruction: 0x06020517
    2080:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    2084:	01010004 	tsteq	r1, r4
    2088:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    208c:	000f9c02 	andeq	r9, pc, r2, lsl #24
    2090:	03990300 	orrseq	r0, r9, #0, 6
    2094:	16020501 	strne	r0, [r2], -r1, lsl #10
    2098:	0e062105 	adfeqs	f2, f6, f5
    209c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    20a0:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    20a4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    20a8:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    20ac:	20130520 	andscs	r0, r3, r0, lsr #10
    20b0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    20b4:	59060105 	stmdbpl	r6, {r0, r2, r8}
    20b8:	01000502 	tsteq	r0, r2, lsl #10
    20bc:	00140501 	andseq	r0, r4, r1, lsl #10
    20c0:	00000205 	andeq	r0, r0, r5, lsl #4
    20c4:	a7030000 	strge	r0, [r3, -r0]
    20c8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    20cc:	06010516 			; <UNDEFINED> instruction: 0x06010516
    20d0:	00040267 	andeq	r0, r4, r7, ror #4
    20d4:	18050101 	stmdane	r5, {r0, r8}
    20d8:	00020500 	andeq	r0, r2, r0, lsl #10
    20dc:	03000000 	movweq	r0, #0
    20e0:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    20e4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    20e8:	200e0618 	andcs	r0, lr, r8, lsl r6
    20ec:	06240205 	strteq	r0, [r4], -r5, lsl #4
    20f0:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    20f4:	06030501 	streq	r0, [r3], -r1, lsl #10
    20f8:	06050521 	streq	r0, [r5], -r1, lsr #10
    20fc:	06020501 	streq	r0, [r2], -r1, lsl #10
    2100:	06120535 			; <UNDEFINED> instruction: 0x06120535
    2104:	59010501 	stmdbpl	r1, {r0, r8, sl}
    2108:	03060305 	movweq	r0, #25349	; 0x6305
    210c:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    2110:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2114:	0b052e17 	bleq	14d978 <__ccfg+0x12d9d0>
    2118:	0008023d 	andeq	r0, r8, sp, lsr r2
    211c:	1d050101 	stfnes	f0, [r5, #-4]
    2120:	00020500 	andeq	r0, r2, r0, lsl #10
    2124:	03000000 	movweq	r0, #0
    2128:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    212c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2130:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    2134:	03052405 	movweq	r2, #21509	; 0x5405
    2138:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    213c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2140:	01053206 	tsteq	r5, r6, lsl #4
    2144:	03051306 	movweq	r1, #21254	; 0x5306
    2148:	06022b06 	streq	r2, [r2], -r6, lsl #22
    214c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2150:	0205001d 	andeq	r0, r5, #29
    2154:	00000fd4 	ldrdeq	r0, [r0], -r4
    2158:	01049e03 	tsteq	r4, r3, lsl #28
    215c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2160:	01060505 	tsteq	r6, r5, lsl #10
    2164:	2f060305 	svccs	0x00060305
    2168:	01060a05 	tsteq	r6, r5, lsl #20
    216c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    2170:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2174:	06030525 	streq	r0, [r3], -r5, lsr #10
    2178:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    217c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2180:	0006023b 	andeq	r0, r6, fp, lsr r2
    2184:	1d050101 	stfnes	f0, [r5, #-4]
    2188:	00020500 	andeq	r0, r2, r0, lsl #10
    218c:	03000000 	movweq	r0, #0
    2190:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    2194:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2198:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    219c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    21a0:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    21a4:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    21a8:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    21ac:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    21b0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    21b4:	06051f02 	streq	r1, [r5], -r2, lsl #30
    21b8:	06040521 	streq	r0, [r4], -r1, lsr #10
    21bc:	06050521 	streq	r0, [r5], -r1, lsr #10
    21c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    21c4:	0004023a 	andeq	r0, r4, sl, lsr r2
    21c8:	21050101 	tstcs	r5, r1, lsl #2
    21cc:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    21d0:	0300000f 	movweq	r0, #15
    21d4:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    21d8:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    21dc:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    21e0:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    21e4:	02052006 	andeq	r2, r5, #6
    21e8:	01050106 	tsteq	r5, r6, lsl #2
    21ec:	06220531 			; <UNDEFINED> instruction: 0x06220531
    21f0:	011e051d 	tsteq	lr, sp, lsl r5
    21f4:	01061f05 	tsteq	r6, r5, lsl #30
    21f8:	01000202 	tsteq	r0, r2, lsl #4
    21fc:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2200:	00000205 	andeq	r0, r0, r5, lsl #4
    2204:	c1030000 	mrsgt	r0, (UNDEF: 3)
    2208:	02050104 	andeq	r0, r5, #4, 2
    220c:	20200514 	eorcs	r0, r0, r4, lsl r5
    2210:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2214:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2218:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    221c:	2f01052e 	svccs	0x0001052e
    2220:	01000102 	tsteq	r0, r2, lsl #2
    2224:	00330501 	eorseq	r0, r3, r1, lsl #10
    2228:	00000205 	andeq	r0, r0, r5, lsl #4
    222c:	c6030000 	strgt	r0, [r3], -r0
    2230:	02050104 	andeq	r0, r5, #4, 2
    2234:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2238:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    223c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2240:	11052f01 	tstne	r5, r1, lsl #30
    2244:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
    2248:	2f060305 	svccs	0x00060305
    224c:	01060805 	tsteq	r6, r5, lsl #16
    2250:	01000302 	tsteq	r0, r2, lsl #6
    2254:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2258:	00000205 	andeq	r0, r0, r5, lsl #4
    225c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    2260:	02050104 	andeq	r0, r5, #4, 2
    2264:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2268:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    226c:	01010002 	tsteq	r1, r2
    2270:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2274:	00000002 	andeq	r0, r0, r2
    2278:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    227c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2280:	01000302 	tsteq	r0, r2, lsl #6
    2284:	00370501 	eorseq	r0, r7, r1, lsl #10
    2288:	10060205 	andne	r0, r6, r5, lsl #4
    228c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2290:	02050104 	andeq	r0, r5, #4, 2
    2294:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2298:	30060105 	andcc	r0, r6, r5, lsl #2
    229c:	1f060305 	svcne	0x00060305
    22a0:	01060d05 	tsteq	r6, r5, lsl #26
    22a4:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    22a8:	01010003 	tsteq	r1, r3
    22ac:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    22b0:	00000002 	andeq	r0, r0, r2
    22b4:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    22b8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22bc:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    22c0:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    22c4:	051f0603 	ldreq	r0, [pc, #-1539]	; 1cc9 <vscan+0x1cd>
    22c8:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    22cc:	01010003 	tsteq	r1, r3
    22d0:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    22d4:	00101c02 	andseq	r1, r0, r2, lsl #24
    22d8:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    22dc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22e0:	10062b05 	andne	r2, r6, r5, lsl #22
    22e4:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    22e8:	06210603 	strteq	r0, [r1], -r3, lsl #12
    22ec:	06020531 			; <UNDEFINED> instruction: 0x06020531
    22f0:	060c052d 	streq	r0, [ip], -sp, lsr #10
    22f4:	20050501 	andcs	r0, r5, r1, lsl #10
    22f8:	2f060305 	svccs	0x00060305
    22fc:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    2300:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2304:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    2308:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    230c:	02050045 	andeq	r0, r5, #69	; 0x45
    2310:	00001040 	andeq	r1, r0, r0, asr #32
    2314:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    2318:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    231c:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
    2320:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
    2324:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2328:	03054a19 	movweq	r4, #23065	; 0x5a19
    232c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    2330:	0605054c 	streq	r0, [r5], -ip, asr #10
    2334:	06020501 	streq	r0, [r2], -r1, lsl #10
    2338:	060f0540 	streq	r0, [pc], -r0, asr #10
    233c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2340:	0605054c 	streq	r0, [r5], -ip, asr #10
    2344:	06020501 	streq	r0, [r2], -r1, lsl #10
    2348:	06050531 			; <UNDEFINED> instruction: 0x06050531
    234c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2350:	0606054f 	streq	r0, [r6], -pc, asr #10
    2354:	06030501 	streq	r0, [r3], -r1, lsl #10
    2358:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
    235c:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    2360:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2364:	01060505 	tsteq	r6, r5, lsl #10
    2368:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    236c:	01060605 	tsteq	r6, r5, lsl #12
    2370:	4b060405 	blmi	18338c <__ccfg+0x1633e4>
    2374:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2378:	06030501 	streq	r0, [r3], -r1, lsl #10
    237c:	060a0569 	streq	r0, [sl], -r9, ror #10
    2380:	06030501 	streq	r0, [r3], -r1, lsl #10
    2384:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2388:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    238c:	20290301 	eorcs	r0, r9, r1, lsl #6
    2390:	03060205 	movweq	r0, #25093	; 0x6205
    2394:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2398:	03050106 	movweq	r0, #20742	; 0x5106
    239c:	02752f06 	rsbseq	r2, r5, #6, 30
    23a0:	01010005 	tsteq	r1, r5
    23a4:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    23a8:	0010dc02 	andseq	sp, r0, r2, lsl #24
    23ac:	05ef0300 	strbeq	r0, [pc, #768]!	; 26b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x80>
    23b0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    23b4:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    23b8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    23bc:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    23c0:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    23c4:	580c0520 	stmdapl	ip, {r5, r8, sl}
    23c8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    23cc:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    23d0:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    23d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23d8:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    23dc:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    23e0:	2016052b 	andscs	r0, r6, fp, lsr #10
    23e4:	21060205 	tstcs	r6, r5, lsl #4
    23e8:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    23ec:	31060205 	tstcc	r6, r5, lsl #4
    23f0:	01061a05 	tsteq	r6, r5, lsl #20
    23f4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    23f8:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    23fc:	01000d02 	tsteq	r0, r2, lsl #26
    2400:	001c0501 	andseq	r0, ip, r1, lsl #10
    2404:	112c0205 			; <UNDEFINED> instruction: 0x112c0205
    2408:	fb030000 	blx	c2412 <__ccfg+0xa246a>
    240c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2410:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2414:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2418:	03050501 	movweq	r0, #21761	; 0x5501
    241c:	0205200c 	andeq	r2, r5, #12
    2420:	07052506 	streq	r2, [r5, -r6, lsl #10]
    2424:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2428:	0603052e 	streq	r0, [r3], -lr, lsr #10
    242c:	11054c2f 	tstne	r5, pc, lsr #24
    2430:	0f051606 	svceq	0x00051606
    2434:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    2438:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    243c:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2440:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2444:	30300602 	eorscc	r0, r0, r2, lsl #12
    2448:	01061505 	tsteq	r6, r5, lsl #10
    244c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2450:	2f2f0603 	svccs	0x002f0603
    2454:	01061a05 	tsteq	r6, r5, lsl #20
    2458:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    245c:	01010008 	tsteq	r1, r8
    2460:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    2464:	00117402 	andseq	r7, r1, r2, lsl #8
    2468:	03d80300 	bicseq	r0, r8, #0, 6
    246c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2470:	06170514 			; <UNDEFINED> instruction: 0x06170514
    2474:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2478:	03052605 	movweq	r2, #22021	; 0x5605
    247c:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2480:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2484:	06020520 	streq	r0, [r2], -r0, lsr #10
    2488:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
    248c:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    2490:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
    2494:	0305200f 	movweq	r2, #20495	; 0x500f
    2498:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    249c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    24a0:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    24a4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    24a8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    24ac:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    24b0:	3d230604 	stccc	6, cr0, [r3, #-16]!
    24b4:	060a052f 	streq	r0, [sl], -pc, lsr #10
    24b8:	20070501 	andcs	r0, r7, r1, lsl #10
    24bc:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    24c0:	060d052a 	streq	r0, [sp], -sl, lsr #10
    24c4:	03010501 	movweq	r0, #5377	; 0x1501
    24c8:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    24cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24d0:	0205001c 	andeq	r0, r5, #28
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    24dc:	13160205 	tstne	r6, #1342177280	; 0x50000000
    24e0:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    24e4:	7703061c 	smladvc	r3, ip, r6, r0
    24e8:	36040501 	strcc	r0, [r4], -r1, lsl #10
    24ec:	051f0605 	ldreq	r0, [pc, #-1541]	; 1eef <TrimAfterColdResetWakeupFromShutDown+0xb>
    24f0:	1c052209 	sfmne	f2, 4, [r5], {9}
    24f4:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    24f8:	2010030a 	andscs	r0, r0, sl, lsl #6
    24fc:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    2500:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2504:	06020520 	streq	r0, [r2], -r0, lsr #10
    2508:	11030601 	tstne	r3, r1, lsl #12
    250c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2510:	06030501 	streq	r0, [r3], -r1, lsl #10
    2514:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    2518:	01060605 	tsteq	r6, r5, lsl #12
    251c:	59060405 	stmdbpl	r6, {r0, r2, sl}
    2520:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2524:	06050501 	streq	r0, [r5], -r1, lsl #10
    2528:	060b0521 	streq	r0, [fp], -r1, lsr #10
    252c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2530:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2534:	2f090501 	svccs	0x00090501
    2538:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    253c:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    2540:	060d0545 	streq	r0, [sp], -r5, asr #10
    2544:	03010501 	movweq	r0, #5377	; 0x1501
    2548:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    254c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2550:	02050020 	andeq	r0, r5, #32
    2554:	000011c4 	andeq	r1, r0, r4, asr #3
    2558:	0107a203 	tsteq	r7, r3, lsl #4
    255c:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    2560:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2564:	06030501 	streq	r0, [r3], -r1, lsl #10
    2568:	06090525 	streq	r0, [r9], -r5, lsr #10
    256c:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
    2570:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
    2574:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    2578:	2070031a 	rsbscs	r0, r0, sl, lsl r3
    257c:	10030d05 	andne	r0, r3, r5, lsl #26
    2580:	2306052e 	movwcs	r0, #25902	; 0x652e
    2584:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2588:	06020520 	streq	r0, [r2], -r0, lsr #10
    258c:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
    2590:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
    2594:	06010602 	streq	r0, [r1], -r2, lsl #12
    2598:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    259c:	01190303 	tsteq	r9, r3, lsl #6
    25a0:	01061605 	tsteq	r6, r5, lsl #12
    25a4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    25a8:	052f0604 	streq	r0, [pc, #-1540]!	; 1fac <TrimAfterColdResetWakeupFromShutDown+0xc8>
    25ac:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    25b0:	0d030603 	stceq	6, cr0, [r3, #-12]
    25b4:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    25b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    25bc:	06090540 	streq	r0, [r9], -r0, asr #10
    25c0:	06030501 	streq	r0, [r3], -r1, lsl #10
    25c4:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    25c8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    25cc:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    25d0:	06054c03 	streq	r4, [r5], -r3, lsl #24
    25d4:	2e050106 	adfcss	f0, f5, f6
    25d8:	4a7a0306 	bmi	1e831f8 <__ccfg+0x1e63250>
    25dc:	13060905 	movwne	r0, #26885	; 0x6905
    25e0:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
    25e4:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    25e8:	01060e05 	tsteq	r6, r5, lsl #28
    25ec:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    25f0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    25f4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    25f8:	052f0604 	streq	r0, [pc, #-1540]!	; 1ffc <NOROM_SetupTrimDevice+0x44>
    25fc:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2600:	04052007 	streq	r2, [r5], #-7
    2604:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    2608:	10050106 	andne	r0, r5, r6, lsl #2
    260c:	06040520 	streq	r0, [r4], -r0, lsr #10
    2610:	2e090530 	cfmv64hrcs	mvdx9, r0
    2614:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2618:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    261c:	1a053012 	bne	14e66c <__ccfg+0x12e6c4>
    2620:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2624:	06150522 	ldreq	r0, [r5], -r2, lsr #10
    2628:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    262c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2630:	01060e05 	tsteq	r6, r5, lsl #28
    2634:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2638:	12052906 	andne	r2, r5, #98304	; 0x18000
    263c:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    2640:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2644:	01061305 	tsteq	r6, r5, lsl #6
    2648:	31060305 	tstcc	r6, r5, lsl #6
    264c:	03060105 	movweq	r0, #24837	; 0x6105
    2650:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2654:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2658:	0205002c 	andeq	r0, r5, #44	; 0x2c
    265c:	0000126c 	andeq	r1, r0, ip, ror #4
    2660:	0102ab03 	tsteq	r2, r3, lsl #22
    2664:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2668:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    266c:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    2670:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
    2674:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
    2678:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    267c:	060a0523 	streq	r0, [sl], -r3, lsr #10
    2680:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2684:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2688:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    268c:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    2690:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2694:	13140305 	tstne	r4, #335544320	; 0x14000000
    2698:	01060605 	tsteq	r6, r5, lsl #12
    269c:	21060405 	tstcs	r6, r5, lsl #8
    26a0:	01060a05 	tsteq	r6, r5, lsl #20
    26a4:	0f030105 	svceq	0x00030105
    26a8:	060b0520 	streq	r0, [fp], -r0, lsr #10
    26ac:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    26b0:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    26b4:	2f062004 	svccs	0x00062004
    26b8:	01060c05 	tsteq	r6, r5, lsl #24
    26bc:	03060205 	movweq	r0, #25093	; 0x6205
    26c0:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    26c4:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    26c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26cc:	02050020 	andeq	r0, r5, #32
    26d0:	000012a0 	andeq	r1, r0, r0, lsr #5
    26d4:	01088103 	tsteq	r8, r3, lsl #2
    26d8:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26dc:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    26e0:	03200501 			; <UNDEFINED> instruction: 0x03200501
    26e4:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
    26e8:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    26ec:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    26f0:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    26f4:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    26f8:	06020501 	streq	r0, [r2], -r1, lsl #10
    26fc:	0004023e 	andeq	r0, r4, lr, lsr r2
    2700:	21050101 	tstcs	r5, r1, lsl #2
    2704:	00020500 	andeq	r0, r2, r0, lsl #10
    2708:	03000000 	movweq	r0, #0
    270c:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    2710:	01090302 	tsteq	r9, r2, lsl #6
    2714:	03062105 	movweq	r2, #24837	; 0x6105
    2718:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    271c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2720:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2724:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2728:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    272c:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
    2730:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    2734:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
    2738:	09051402 	stmdbeq	r5, {r1, sl, ip}
    273c:	01050106 	tsteq	r5, r6, lsl #2
    2740:	0006025a 	andeq	r0, r6, sl, asr r2
    2744:	20050101 	andcs	r0, r5, r1, lsl #2
    2748:	00020500 	andeq	r0, r2, r0, lsl #10
    274c:	03000000 	movweq	r0, #0
    2750:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2754:	01090302 	tsteq	r9, r2, lsl #6
    2758:	20051413 	andcs	r1, r5, r3, lsl r4
    275c:	01740306 	cmneq	r4, r6, lsl #6
    2760:	0c031d05 	stceq	13, cr1, [r3], {5}
    2764:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
    2768:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    276c:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    2770:	06010602 	streq	r0, [r1], -r2, lsl #12
    2774:	06050524 	streq	r0, [r5], -r4, lsr #10
    2778:	0603052e 	streq	r0, [r3], -lr, lsr #10
    277c:	06070521 	streq	r0, [r7], -r1, lsr #10
    2780:	06020501 	streq	r0, [r2], -r1, lsl #10
    2784:	0609054c 	streq	r0, [r9], -ip, asr #10
    2788:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    278c:	03060305 	movweq	r0, #25349	; 0x6305
    2790:	23052e79 	movwcs	r2, #24185	; 0x5e79
    2794:	06052d06 	streq	r2, [r5], -r6, lsl #26
    2798:	0e054a06 	vmlaeq.f32	s8, s10, s12
    279c:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    27a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    27a4:	02050023 	andeq	r0, r5, #35	; 0x23
    27a8:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
    27ac:	01098103 	tsteq	r9, r3, lsl #2
    27b0:	13410205 	movtne	r0, #4613	; 0x1205
    27b4:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    27b8:	03062305 	movweq	r2, #25349	; 0x6305
    27bc:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    27c0:	1f3c0c03 	svcne	0x003c0c03
    27c4:	01012106 	tsteq	r1, r6, lsl #2
    27c8:	03060805 	movweq	r0, #26629	; 0x6805
    27cc:	02052028 	andeq	r2, r5, #40	; 0x28
    27d0:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    27d4:	2023031c 	eorcs	r0, r3, ip, lsl r3
    27d8:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    27dc:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    27e0:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    27e4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    27e8:	02052008 	andeq	r2, r5, #8
    27ec:	00c70306 	sbceq	r0, r7, r6, lsl #6
    27f0:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    27f4:	060d0502 	streq	r0, [sp], -r2, lsl #10
    27f8:	017bcf03 	cmneq	fp, r3, lsl #30
    27fc:	0f050104 	svceq	0x00050104
    2800:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    2804:	01020520 	tsteq	r2, r0, lsr #10
    2808:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    280c:	017bca03 	cmneq	fp, r3, lsl #20
    2810:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2814:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    2818:	03020501 	movweq	r0, #9473	; 0x2501
    281c:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    2820:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    2824:	13060105 	movwne	r0, #24837	; 0x6105
    2828:	03060305 	movweq	r0, #25349	; 0x6305
    282c:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    2830:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2834:	134b0604 	movtne	r0, #46596	; 0xb604
    2838:	20060705 	andcs	r0, r6, r5, lsl #14
    283c:	4b060505 	blmi	183c58 <__ccfg+0x163cb0>
    2840:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2844:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2848:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    284c:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2850:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2854:	0f060805 	svceq	0x00060805
    2858:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    285c:	31030505 	tstcc	r3, r5, lsl #10
    2860:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    2864:	4a4e0306 	bmi	1383484 <__ccfg+0x13634dc>
    2868:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    286c:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    2870:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2874:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    2878:	11060b05 	tstne	r6, r5, lsl #22
    287c:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    2880:	0b052f06 	bleq	14e4a0 <__ccfg+0x12e4f8>
    2884:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    2888:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    288c:	03010608 	movweq	r0, #5640	; 0x1608
    2890:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    2894:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2898:	06150513 			; <UNDEFINED> instruction: 0x06150513
    289c:	200e0501 	andcs	r0, lr, r1, lsl #10
    28a0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    28a4:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 2894 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x40>
    28a8:	01060905 	tsteq	r6, r5, lsl #18
    28ac:	21060705 	tstcs	r6, r5, lsl #14
    28b0:	01060b05 	tsteq	r6, r5, lsl #22
    28b4:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    28b8:	01060a05 	tsteq	r6, r5, lsl #20
    28bc:	23060505 	movwcs	r0, #25861	; 0x6505
    28c0:	01061c05 	tsteq	r6, r5, lsl #24
    28c4:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    28c8:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    28cc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    28d0:	06052e08 	streq	r2, [r5], -r8, lsl #28
    28d4:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    28d8:	0c050106 	stfeqs	f0, [r5], {6}
    28dc:	06060520 	streq	r0, [r6], -r0, lsr #10
    28e0:	0608052f 	streq	r0, [r8], -pc, lsr #10
    28e4:	060b0501 	streq	r0, [fp], -r1, lsl #10
    28e8:	0608052a 	streq	r0, [r8], -sl, lsr #10
    28ec:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    28f0:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    28f4:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    28f8:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    28fc:	051f0805 	ldreq	r0, [pc, #-2053]	; 20ff <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x27>
    2900:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    2904:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    2908:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    290c:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    2910:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2914:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    2918:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    291c:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    2920:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    2924:	06080520 	streq	r0, [r8], -r0, lsr #10
    2928:	06060501 	streq	r0, [r6], -r1, lsl #10
    292c:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    2930:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    2934:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
    2938:	03060505 	movweq	r0, #25861	; 0x6505
    293c:	0605206e 	streq	r2, [r5], -lr, rrx
    2940:	2f201703 	svccs	0x00201703
    2944:	01060705 	tsteq	r6, r5, lsl #14
    2948:	1e060b05 	vmlane.f64	d0, d6, d5
    294c:	01060c05 	tsteq	r6, r5, lsl #24
    2950:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2954:	0c030604 	stceq	6, cr0, [r3], {4}
    2958:	000b023c 	andeq	r0, fp, ip, lsr r2
    295c:	0f050101 	svceq	0x00050101
    2960:	00020500 	andeq	r0, r2, r0, lsl #10
    2964:	03000000 	movweq	r0, #0
    2968:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    296c:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    2970:	18050106 	stmdane	r5, {r1, r2, r8}
    2974:	2025052e 	eorcs	r0, r5, lr, lsr #10
    2978:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    297c:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    2980:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2984:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
    2988:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    298c:	b7010100 	strlt	r0, [r1, -r0, lsl #2]
    2990:	0300000c 	movweq	r0, #12
    2994:	0001a100 	andeq	sl, r1, r0, lsl #2
    2998:	fb010200 	blx	431a2 <__ccfg+0x231fa>
    299c:	01000d0e 	tsteq	r0, lr, lsl #26
    29a0:	00010101 	andeq	r0, r1, r1, lsl #2
    29a4:	00010000 	andeq	r0, r1, r0
    29a8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    29ac:	2f656d6f 	svccs	0x00656d6f
    29b0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    29b4:	442f6e69 	strtmi	r6, [pc], #-3689	; 29bc <AuxAdiDdiSafeWrite.constprop.1+0x20>
    29b8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    29bc:	4f2f706f 	svcmi	0x002f706f
    29c0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    29c4:	502f5445 	eorpl	r5, pc, r5, asr #8
    29c8:	534f4349 	movtpl	r4, #62281	; 0xf349
    29cc:	6369502f 	cmnvs	r9, #47	; 0x2f
    29d0:	502f534f 	eorpl	r5, pc, pc, asr #6
    29d4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    29d8:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    29dc:	2f004974 	svccs	0x00004974
    29e0:	2f727375 	svccs	0x00727375
    29e4:	2f62696c 	svccs	0x0062696c
    29e8:	2f636367 	svccs	0x00636367
    29ec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    29f0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    29f4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    29f8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    29fc:	2f312e32 	svccs	0x00312e32
    2a00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2a04:	00656475 	rsbeq	r6, r5, r5, ror r4
    2a08:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2954 <NOROM_ChipInfo_GetHwRevision+0x3c>
    2a0c:	616d2f65 	cmnvs	sp, r5, ror #30
    2a10:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a14:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a18:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a1c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a20:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a24:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a28:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a2c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a30:	3143432f 	cmpcc	r3, pc, lsr #6
    2a34:	00585833 	subseq	r5, r8, r3, lsr r8
    2a38:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2984 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    2a3c:	616d2f65 	cmnvs	sp, r5, ror #30
    2a40:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a44:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a48:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a4c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a50:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a54:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a58:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a5c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a60:	6f682f00 	svcvs	0x00682f00
    2a64:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 28b8 <NOROM_SysCtrlResetSourceGet+0x4>
    2a68:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2a6c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2a70:	6f746b73 	svcvs	0x00746b73
    2a74:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2a78:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2a7c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a80:	2f534f43 	svccs	0x00534f43
    2a84:	4f636950 	svcmi	0x00636950
    2a88:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    2a8c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2a90:	63740000 	cmnvs	r4, #0
    2a94:	00632e76 	rsbeq	r2, r3, r6, ror lr
    2a98:	73000001 	movwvc	r0, #1
    2a9c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2aa0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2aa4:	73000002 	movwvc	r0, #2
    2aa8:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2aac:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2ab0:	61000002 	tstvs	r0, r2
    2ab4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    2ab8:	00030068 	andeq	r0, r3, r8, rrx
    2abc:	63616d00 	cmnvs	r1, #0, 26
    2ac0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    2ac4:	70000003 	andvc	r0, r0, r3
    2ac8:	5f736e69 	svcpl	0x00736e69
    2acc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2ad0:	00030068 	andeq	r0, r3, r8, rrx
    2ad4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    2ad8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    2adc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2ae0:	0300682e 	movweq	r6, #2094	; 0x82e
    2ae4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    2ae8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    2aec:	00040068 	andeq	r0, r4, r8, rrx
    2af0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2af4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2af8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2afc:	6b000001 	blvs	2b08 <NOROM_OSCClockSourceGet+0xe0>
    2b00:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2b04:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    2b08:	74000005 	strvc	r0, [r0], #-5
    2b0c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    2b10:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2b14:	00000100 	andeq	r0, r0, r0, lsl #2
    2b18:	5f766374 	svcpl	0x00766374
    2b1c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    2b20:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2b24:	00682e61 	rsbeq	r2, r8, r1, ror #28
    2b28:	3c000001 	stccc	0, cr0, [r0], {1}
    2b2c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2b30:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    2b34:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b38:	31050000 	mrscc	r0, (UNDEF: 5)
    2b3c:	00020500 	andeq	r0, r2, r0, lsl #10
    2b40:	03000000 	movweq	r0, #0
    2b44:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    2b48:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    2b4c:	03063105 	movweq	r3, #24837	; 0x6105
    2b50:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    2b54:	16052607 	strne	r2, [r5], -r7, lsl #12
    2b58:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    2b5c:	26060205 	strcs	r0, [r6], -r5, lsl #4
    2b60:	13061a05 	movwne	r1, #27141	; 0x6a05
    2b64:	051f0e05 	ldreq	r0, [pc, #-3589]	; 1d67 <vscan+0x26b>
    2b68:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2b6c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2b70:	0c030602 	stceq	6, cr0, [r3], {2}
    2b74:	06010520 	streq	r0, [r1], -r0, lsr #10
    2b78:	00010216 	andeq	r0, r1, r6, lsl r2
    2b7c:	2e050101 	adfcss	f0, f5, f1
    2b80:	00020500 	andeq	r0, r2, r0, lsl #10
    2b84:	03000000 	movweq	r0, #0
    2b88:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    2b8c:	06051602 	streq	r1, [r5], -r2, lsl #12
    2b90:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2b94:	06030520 	streq	r0, [r3], -r0, lsr #10
    2b98:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    2b9c:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    2ba0:	21060305 	tstcs	r6, r5, lsl #6
    2ba4:	01062905 	tsteq	r6, r5, lsl #18
    2ba8:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    2bac:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2bb0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2bb4:	01024c01 	tsteq	r2, r1, lsl #24
    2bb8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2bbc:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	01028303 	tsteq	r2, r3, lsl #6
    2bc8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2bcc:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    2bd0:	2f062402 	svccs	0x00062402
    2bd4:	01130101 	tsteq	r3, r1, lsl #2
    2bd8:	01051401 	tsteq	r5, r1, lsl #8
    2bdc:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    2be0:	0002022d 	andeq	r0, r2, sp, lsr #4
    2be4:	3a050101 	bcc	142ff0 <__ccfg+0x123048>
    2be8:	00020500 	andeq	r0, r2, r0, lsl #10
    2bec:	03000000 	movweq	r0, #0
    2bf0:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    2bf4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    2bf8:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    2bfc:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    2c00:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    2c04:	20062402 	andcs	r2, r6, r2, lsl #8
    2c08:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    2c0c:	03050106 	movweq	r0, #20742	; 0x5106
    2c10:	02053d06 	andeq	r3, r5, #384	; 0x180
    2c14:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2c18:	20050501 	andcs	r0, r5, r1, lsl #10
    2c1c:	30060305 	andcc	r0, r6, r5, lsl #6
    2c20:	01061705 	tsteq	r6, r5, lsl #14
    2c24:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    2c28:	052f0603 	streq	r0, [pc, #-1539]!	; 262d <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x149>
    2c2c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2c30:	03052011 	movweq	r2, #20497	; 0x5011
    2c34:	0b052106 	bleq	14b054 <__ccfg+0x12b0ac>
    2c38:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c3c:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    2c40:	01050106 	tsteq	r5, r6, lsl #2
    2c44:	0603054b 	streq	r0, [r3], -fp, asr #10
    2c48:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    2c4c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    2c50:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c54:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2c58:	03052014 	movweq	r2, #20500	; 0x5014
    2c5c:	11052106 	tstne	r5, r6, lsl #2
    2c60:	03050106 	movweq	r0, #20742	; 0x5106
    2c64:	0b052106 	bleq	14b084 <__ccfg+0x12b0dc>
    2c68:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    2c6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c70:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2c74:	00000000 	andeq	r0, r0, r0
    2c78:	0101df03 	tsteq	r1, r3, lsl #30
    2c7c:	02052006 	andeq	r2, r5, #6
    2c80:	20090306 	andcs	r0, r9, r6, lsl #6
    2c84:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
    2c88:	01061b05 	tsteq	r6, r5, lsl #22
    2c8c:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2c90:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2c94:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2c98:	133c7903 	teqne	ip, #49152	; 0xc000
    2c9c:	03060105 	movweq	r0, #24837	; 0x6105
    2ca0:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    2ca4:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    2ca8:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    2cac:	06040501 	streq	r0, [r4], -r1, lsl #10
    2cb0:	2e90014c 	fmlcssm	f0, f0, #4.0
    2cb4:	01055b13 	tsteq	r5, r3, lsl fp
    2cb8:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    2cbc:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    2cc0:	0c023601 	stceq	6, cr3, [r2], {1}
    2cc4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2cc8:	02050031 	andeq	r0, r5, #49	; 0x31
    2ccc:	00000000 	andeq	r0, r0, r0
    2cd0:	0102ba03 	tsteq	r2, r3, lsl #20
    2cd4:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    2cd8:	03063105 	movweq	r3, #24837	; 0x6105
    2cdc:	06050178 			; <UNDEFINED> instruction: 0x06050178
    2ce0:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2ce4:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    2ce8:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    2cec:	03050106 	movweq	r0, #20742	; 0x5106
    2cf0:	06012f06 	streq	r2, [r1], -r6, lsl #30
    2cf4:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    2cf8:	133b0621 	teqne	fp, #34603008	; 0x2100000
    2cfc:	4a660601 	bmi	1984508 <__ccfg+0x1964560>
    2d00:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2d04:	03060105 	movweq	r0, #24837	; 0x6105
    2d08:	03053c09 	movweq	r3, #23561	; 0x5c09
    2d0c:	062e7703 	strteq	r7, [lr], -r3, lsl #14
    2d10:	06010536 			; <UNDEFINED> instruction: 0x06010536
    2d14:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
    2d18:	01000b02 	tsteq	r0, r2, lsl #22
    2d1c:	004a0501 	subeq	r0, sl, r1, lsl #10
    2d20:	00000205 	andeq	r0, r0, r5, lsl #4
    2d24:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2d28:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2d2c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    2d30:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    2d34:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    2d38:	0b030505 	bleq	c4154 <__ccfg+0xa41ac>
    2d3c:	034a053c 	movteq	r0, #42300	; 0xa53c
    2d40:	02052075 	andeq	r2, r5, #117	; 0x75
    2d44:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
    2d48:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2d4c:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    2d50:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    2d54:	053c3005 	ldreq	r3, [ip, #-5]!
    2d58:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    2d5c:	03054b06 	movweq	r4, #23302	; 0x5b06
    2d60:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    2d64:	03060205 	movweq	r0, #25093	; 0x6205
    2d68:	13132e6e 	tstne	r3, #1760	; 0x6e0
    2d6c:	06120517 			; <UNDEFINED> instruction: 0x06120517
    2d70:	06020501 	streq	r0, [r2], -r1, lsl #10
    2d74:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
    2d78:	20060a05 	andcs	r0, r6, r5, lsl #20
    2d7c:	2f060305 	svccs	0x00060305
    2d80:	01061305 	tsteq	r6, r5, lsl #6
    2d84:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2d88:	051f0622 	ldreq	r0, [pc, #-1570]	; 276e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13a>
    2d8c:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    2d90:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    2d94:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    2d98:	0105330a 	tsteq	r5, sl, lsl #6
    2d9c:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    2da0:	73030602 	movwvc	r0, #13826	; 0x3602
    2da4:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    2da8:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    2dac:	2f060205 	svccs	0x00060205
    2db0:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    2db4:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    2db8:	0114132f 	tsteq	r4, pc, lsr #6
    2dbc:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    2dc0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2dc4:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    2dc8:	13053206 	movwne	r3, #20998	; 0x5206
    2dcc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dd0:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2dd4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dd8:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    2ddc:	06130515 			; <UNDEFINED> instruction: 0x06130515
    2de0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2de4:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    2de8:	06030501 	streq	r0, [r3], -r1, lsl #10
    2dec:	0010023d 	andseq	r0, r0, sp, lsr r2
    2df0:	3a050101 	bcc	1431fc <__ccfg+0x123254>
    2df4:	00020500 	andeq	r0, r2, r0, lsl #10
    2df8:	03000000 	movweq	r0, #0
    2dfc:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    2e00:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2e04:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    2e08:	0205201b 	andeq	r2, r5, #27
    2e0c:	4a062025 	bmi	18aea8 <__ccfg+0x16af00>
    2e10:	03062706 	movweq	r2, #26374	; 0x6706
    2e14:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    2e18:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    2e1c:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2e20:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2e24:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2e28:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    2e2c:	13410603 	movtne	r0, #5635	; 0x1603
    2e30:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    2e34:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2e38:	02052008 	andeq	r2, r5, #8
    2e3c:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    2e40:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2e44:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2e48:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    2e4c:	0101000b 	tsteq	r1, fp
    2e50:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    2e54:	00000002 	andeq	r0, r0, r2
    2e58:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    2e5c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2e60:	01060505 	tsteq	r6, r5, lsl #10
    2e64:	052f0f05 	streq	r0, [pc, #-3845]!	; 1f67 <TrimAfterColdResetWakeupFromShutDown+0x83>
    2e68:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    2e6c:	06020521 	streq	r0, [r2], -r1, lsr #10
    2e70:	06100531 			; <UNDEFINED> instruction: 0x06100531
    2e74:	06020501 	streq	r0, [r2], -r1, lsl #10
    2e78:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2e7c:	2b0a0501 	blcs	284288 <__ccfg+0x2642e0>
    2e80:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    2e84:	01010004 	tsteq	r1, r4
    2e88:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    2e8c:	00000002 	andeq	r0, r0, r2
    2e90:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    2e94:	19020501 	stmdbne	r2, {r0, r8, sl}
    2e98:	01141313 	tsteq	r4, r3, lsl r3
    2e9c:	03063c05 	movweq	r3, #27653	; 0x6c05
    2ea0:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    2ea4:	200b0302 	andcs	r0, fp, r2, lsl #6
    2ea8:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2eac:	06201303 	strteq	r1, [r0], -r3, lsl #6
    2eb0:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    2eb4:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2eb8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ebc:	06050521 	streq	r0, [r5], -r1, lsr #10
    2ec0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2ec4:	06060530 			; <UNDEFINED> instruction: 0x06060530
    2ec8:	06040501 	streq	r0, [r4], -r1, lsl #10
    2ecc:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    2ed0:	01013d33 	tsteq	r1, r3, lsr sp
    2ed4:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    2ed8:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    2edc:	06013006 	streq	r3, [r1], -r6
    2ee0:	2e064a4a 	vmlscs.f32	s8, s12, s20
    2ee4:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    2ee8:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    2eec:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    2ef0:	01052306 	tsteq	r5, r6, lsl #6
    2ef4:	0a051306 	beq	147b14 <__ccfg+0x127b6c>
    2ef8:	022e7003 	eoreq	r7, lr, #3
    2efc:	0101000b 	tsteq	r1, fp
    2f00:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2f04:	00000002 	andeq	r0, r0, r2
    2f08:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    2f0c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2f10:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2f14:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2f18:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2f1c:	20090302 	andcs	r0, r9, r2, lsl #6
    2f20:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2f24:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2f28:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2f2c:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2f30:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2f34:	20050501 	andcs	r0, r5, r1, lsl #10
    2f38:	2f060305 	svccs	0x00060305
    2f3c:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2f40:	01061b05 	tsteq	r6, r5, lsl #22
    2f44:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2f48:	0a030603 	beq	c475c <__ccfg+0xa47b4>
    2f4c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2f50:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2f54:	200b030a 	andcs	r0, fp, sl, lsl #6
    2f58:	20061a05 	andcs	r1, r6, r5, lsl #20
    2f5c:	01060305 	tsteq	r6, r5, lsl #6
    2f60:	2f060405 	svccs	0x00060405
    2f64:	11062c05 	tstne	r6, r5, lsl #24
    2f68:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2f6c:	051f062a 	ldreq	r0, [pc, #-1578]	; 294a <NOROM_ChipInfo_GetHwRevision+0x32>
    2f70:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    2f74:	01062105 	tsteq	r6, r5, lsl #2
    2f78:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2f7c:	052f0603 	streq	r0, [pc, #-1539]!	; 2981 <NOROM_ChipInfo_GetHwRevision+0x69>
    2f80:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2f84:	20052006 	andcs	r2, r5, r6
    2f88:	20060520 	andcs	r0, r6, r0, lsr #10
    2f8c:	33060205 	movwcc	r0, #25093	; 0x6205
    2f90:	06050513 			; <UNDEFINED> instruction: 0x06050513
    2f94:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f98:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    2f9c:	0a050f06 	beq	146bbc <__ccfg+0x126c14>
    2fa0:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    2fa4:	06030520 	streq	r0, [r3], -r0, lsr #10
    2fa8:	03010501 	movweq	r0, #5377	; 0x1501
    2fac:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    2fb0:	20740306 	rsbscs	r0, r4, r6, lsl #6
    2fb4:	01060805 	tsteq	r6, r5, lsl #16
    2fb8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2fbc:	052f0605 	streq	r0, [pc, #-1541]!	; 29bf <AuxAdiDdiSafeWrite.constprop.1+0x23>
    2fc0:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    2fc4:	2a052207 	bcs	14b7e8 <__ccfg+0x12b840>
    2fc8:	0a021e06 	beq	8a7e8 <__ccfg+0x6a840>
    2fcc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fd0:	02050038 	andeq	r0, r5, #56	; 0x38
    2fd4:	00000000 	andeq	r0, r0, r0
    2fd8:	0105a303 	tsteq	r5, r3, lsl #6
    2fdc:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2fe0:	01141313 	tsteq	r4, r3, lsl r3
    2fe4:	03063805 	movweq	r3, #26629	; 0x6805
    2fe8:	02052077 	andeq	r2, r5, #119	; 0x77
    2fec:	20200903 	eorcs	r0, r0, r3, lsl #18
    2ff0:	03054a06 	movweq	r4, #23046	; 0x5a06
    2ff4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2ff8:	03060205 	movweq	r0, #25093	; 0x6205
    2ffc:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    3000:	01061a05 	tsteq	r6, r5, lsl #20
    3004:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3008:	052f0603 	streq	r0, [pc, #-1539]!	; 2a0d <NOROM_OSCClockSourceSet+0x41>
    300c:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    3010:	1b050106 	blne	143430 <__ccfg+0x123488>
    3014:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    3018:	0305206b 	movweq	r2, #20587	; 0x506b
    301c:	7cb30306 	ldcvc	3, cr0, [r3], #24
    3020:	06050520 	streq	r0, [r5], -r0, lsr #10
    3024:	06030501 	streq	r0, [r3], -r1, lsl #10
    3028:	06060521 	streq	r0, [r6], -r1, lsr #10
    302c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3030:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3034:	01061305 	tsteq	r6, r5, lsl #6
    3038:	20060f05 	andcs	r0, r6, r5, lsl #30
    303c:	13060505 	movwne	r0, #25861	; 0x6505
    3040:	03060905 	movweq	r0, #26885	; 0x6905
    3044:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    3048:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    304c:	0305200c 	movweq	r2, #20492	; 0x500c
    3050:	20052f06 	andcs	r2, r5, r6, lsl #30
    3054:	06050106 	streq	r0, [r5], -r6, lsl #2
    3058:	20200520 	eorcs	r0, r0, r0, lsr #10
    305c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3060:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3064:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3068:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    306c:	0a030601 	beq	c4878 <__ccfg+0xa48d0>
    3070:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    3074:	06090521 	streq	r0, [r9], -r1, lsr #10
    3078:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    307c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3080:	03010501 	movweq	r0, #5377	; 0x1501
    3084:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3088:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    308c:	01061e05 	tsteq	r6, r5, lsl #28
    3090:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3094:	2f300604 	svccs	0x00300604
    3098:	01060605 	tsteq	r6, r5, lsl #12
    309c:	21060405 	tstcs	r6, r5, lsl #8
    30a0:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    30a4:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    30a8:	0101000a 	tsteq	r1, sl
    30ac:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    30b0:	00000002 	andeq	r0, r0, r2
    30b4:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    30b8:	13020501 	movwne	r0, #9473	; 0x2501
    30bc:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    30c0:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    30c4:	20207a03 	eorcs	r7, r0, r3, lsl #20
    30c8:	20420205 	subcs	r0, r2, r5, lsl #4
    30cc:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    30d0:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    30d4:	4a580601 	bmi	16048e0 <__ccfg+0x15e4938>
    30d8:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    30dc:	01060e05 	tsteq	r6, r5, lsl #28
    30e0:	2f060205 	svccs	0x00060205
    30e4:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    30e8:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    30ec:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    30f0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    30f4:	03052e05 	movweq	r2, #24069	; 0x5e05
    30f8:	06052206 	streq	r2, [r5], -r6, lsl #4
    30fc:	0a050106 	beq	14351c <__ccfg+0x123574>
    3100:	0301054e 	movweq	r0, #5454	; 0x154e
    3104:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    3108:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    310c:	0117033d 	tsteq	r7, sp, lsr r3
    3110:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3114:	2e3c012e 	rsfcsep	f0, f4, #0.5
    3118:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    311c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3120:	0b054a17 	bleq	155984 <__ccfg+0x1359dc>
    3124:	58050520 	stmdapl	r5, {r5, r8, sl}
    3128:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    312c:	01060605 	tsteq	r6, r5, lsl #12
    3130:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    3134:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3138:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    313c:	052f0602 	streq	r0, [pc, #-1538]!	; 2b42 <NOROM_OSCClockSourceGet+0x11a>
    3140:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3144:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3148:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    314c:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3150:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3154:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2247 <NOROM_SetupGetTrimForAmpcompCtrl+0x2b>
    3158:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    315c:	01060905 	tsteq	r6, r5, lsl #18
    3160:	01000c02 	tsteq	r0, r2, lsl #24
    3164:	00440501 	subeq	r0, r4, r1, lsl #10
    3168:	00000205 	andeq	r0, r0, r5, lsl #4
    316c:	87030000 	strhi	r0, [r3, -r0]
    3170:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3174:	06440516 			; <UNDEFINED> instruction: 0x06440516
    3178:	0205200e 	andeq	r2, r5, #14
    317c:	1a052606 	bne	14c99c <__ccfg+0x12c9f4>
    3180:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    3184:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3188:	09030602 	stmdbeq	r3, {r1, r9, sl}
    318c:	0605054a 	streq	r0, [r5], -sl, asr #10
    3190:	06030501 	streq	r0, [r3], -r1, lsl #10
    3194:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3198:	03050106 	movweq	r0, #20742	; 0x5106
    319c:	16056706 	strne	r6, [r5], -r6, lsl #14
    31a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    31a4:	01055b06 	tsteq	r5, r6, lsl #22
    31a8:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    31ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    31b0:	0205004b 	andeq	r0, r5, #75	; 0x4b
    31b4:	00000000 	andeq	r0, r0, r0
    31b8:	01069903 	tsteq	r6, r3, lsl #18
    31bc:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    31c0:	03064b05 	movweq	r4, #27397	; 0x6b05
    31c4:	1a05017a 	bne	1437b4 <__ccfg+0x12380c>
    31c8:	034b0526 	movteq	r0, #46374	; 0xb526
    31cc:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    31d0:	4a090306 	bmi	243df0 <__ccfg+0x223e48>
    31d4:	01060505 	tsteq	r6, r5, lsl #10
    31d8:	2f060305 	svccs	0x00060305
    31dc:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    31e4:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31e8:	06020501 	streq	r0, [r2], -r1, lsl #10
    31ec:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    31f0:	00020213 	andeq	r0, r2, r3, lsl r2
    31f4:	31050101 	tstcc	r5, r1, lsl #2
    31f8:	00020500 	andeq	r0, r2, r0, lsl #10
    31fc:	03000000 	movweq	r0, #0
    3200:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    3204:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    3208:	03050106 	movweq	r0, #20742	; 0x5106
    320c:	01052106 	tsteq	r5, r6, lsl #2
    3210:	01023d06 	tsteq	r2, r6, lsl #26
    3214:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3218:	02050048 	andeq	r0, r5, #72	; 0x48
    321c:	00000000 	andeq	r0, r0, r0
    3220:	0106d103 	tsteq	r6, r3, lsl #2
    3224:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3228:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    322c:	01240602 			; <UNDEFINED> instruction: 0x01240602
    3230:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3234:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3238:	4a4a0620 	bmi	1284ac0 <__ccfg+0x1264b18>
    323c:	06010513 			; <UNDEFINED> instruction: 0x06010513
    3240:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3244:	01000602 	tsteq	r0, r2, lsl #12
    3248:	00460501 	subeq	r0, r6, r1, lsl #10
    324c:	00000205 	andeq	r0, r0, r5, lsl #4
    3250:	b2030000 	andlt	r0, r3, #0
    3254:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3258:	06460517 			; <UNDEFINED> instruction: 0x06460517
    325c:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    3260:	2f060305 	svccs	0x00060305
    3264:	01060605 	tsteq	r6, r5, lsl #12
    3268:	30060305 	andcc	r0, r6, r5, lsl #6
    326c:	01060605 	tsteq	r6, r5, lsl #12
    3270:	2f060405 	svccs	0x00060405
    3274:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3278:	06040501 	streq	r0, [r4], -r1, lsl #10
    327c:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    3280:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3284:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3288:	01060c05 	tsteq	r6, r5, lsl #24
    328c:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3290:	06030520 	streq	r0, [r3], -r0, lsr #10
    3294:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3298:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    329c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    32a0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    32a4:	014c0602 	cmpeq	ip, r2, lsl #12
    32a8:	4a062e06 	bmi	18eac8 <__ccfg+0x16eb20>
    32ac:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    32b0:	01050106 	tsteq	r5, r6, lsl #2
    32b4:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    32b8:	71030b05 	tstvc	r3, r5, lsl #22
    32bc:	000b023c 	andeq	r0, fp, ip, lsr r2
    32c0:	3d050101 	stfccs	f0, [r5, #-4]
    32c4:	00020500 	andeq	r0, r2, r0, lsl #10
    32c8:	03000000 	movweq	r0, #0
    32cc:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    32d0:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    32d4:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    32d8:	06202402 	strteq	r2, [r0], -r2, lsl #8
    32dc:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    32e0:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    32e4:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    32e8:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    32ec:	43052e22 	movwmi	r2, #24098	; 0x5e22
    32f0:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    32f4:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    32f8:	01010005 	tsteq	r1, r5
    32fc:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3300:	00000002 	andeq	r0, r0, r2
    3304:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    3308:	16020501 	strne	r0, [r2], -r1, lsl #10
    330c:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3310:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3314:	4a4a0620 	bmi	1284b9c <__ccfg+0x1264bf4>
    3318:	06220513 			; <UNDEFINED> instruction: 0x06220513
    331c:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    3320:	01000502 	tsteq	r0, r2, lsl #10
    3324:	00400501 	subeq	r0, r0, r1, lsl #10
    3328:	00000205 	andeq	r0, r0, r5, lsl #4
    332c:	ea030000 	b	c3334 <__ccfg+0xa338c>
    3330:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3334:	40051416 	andmi	r1, r5, r6, lsl r4
    3338:	017a0306 	cmneq	sl, r6, lsl #6
    333c:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3340:	7a034005 	bvc	d335c <__ccfg+0xb33b4>
    3344:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3348:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    334c:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3350:	01061105 	tsteq	r6, r5, lsl #2
    3354:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3358:	02051d11 	andeq	r1, r5, #1088	; 0x440
    335c:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3360:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3364:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3368:	01060905 	tsteq	r6, r5, lsl #18
    336c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3370:	01010002 	tsteq	r1, r2
    3374:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3378:	00000002 	andeq	r0, r0, r2
    337c:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    3380:	16020501 	strne	r0, [r2], -r1, lsl #10
    3384:	01000302 	tsteq	r0, r2, lsl #6
    3388:	00450501 	subeq	r0, r5, r1, lsl #10
    338c:	00000205 	andeq	r0, r0, r5, lsl #4
    3390:	85030000 	strhi	r0, [r3, #-0]
    3394:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3398:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    339c:	017a0306 	cmneq	sl, r6, lsl #6
    33a0:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    33a4:	31060305 	tstcc	r6, r5, lsl #6
    33a8:	01060605 	tsteq	r6, r5, lsl #12
    33ac:	2f060405 	svccs	0x00060405
    33b0:	2f060305 	svccs	0x00060305
    33b4:	06012e06 	streq	r2, [r1], -r6, lsl #28
    33b8:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    33bc:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    33c0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    33c4:	0a052e06 	beq	14ebe4 <__ccfg+0x12ec3c>
    33c8:	27010535 	smladxcs	r1, r5, r5, r0
    33cc:	03060405 	movweq	r0, #25605	; 0x6405
    33d0:	20052073 	andcs	r2, r5, r3, ror r0
    33d4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    33d8:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    33dc:	30060405 	andcc	r0, r6, r5, lsl #8
    33e0:	01061d05 	tsteq	r6, r5, lsl #26
    33e4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    33e8:	060b052f 	streq	r0, [fp], -pc, lsr #10
    33ec:	06020501 	streq	r0, [r2], -r1, lsl #10
    33f0:	060b0541 	streq	r0, [fp], -r1, asr #10
    33f4:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    33f8:	2f060305 	svccs	0x00060305
    33fc:	01060a05 	tsteq	r6, r5, lsl #20
    3400:	01000902 	tsteq	r0, r2, lsl #18
    3404:	00480501 	subeq	r0, r8, r1, lsl #10
    3408:	00000205 	andeq	r0, r0, r5, lsl #4
    340c:	86030000 	strhi	r0, [r3], -r0
    3410:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3414:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3418:	48050106 	stmdami	r5, {r1, r2, r8}
    341c:	20207803 	eorcs	r7, r0, r3, lsl #16
    3420:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3424:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3428:	06030520 	streq	r0, [r3], -r0, lsr #10
    342c:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3430:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3434:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3438:	052f0602 	streq	r0, [pc, #-1538]!	; 2e3e <__exidx_end+0x1ba>
    343c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3440:	11052221 	tstne	r5, r1, lsr #4
    3444:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3448:	06210530 			; <UNDEFINED> instruction: 0x06210530
    344c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3450:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3454:	01060505 	tsteq	r6, r5, lsl #10
    3458:	21060305 	tstcs	r6, r5, lsl #6
    345c:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3460:	13060105 	movwne	r0, #24837	; 0x6105
    3464:	01000b02 	tsteq	r0, r2, lsl #22
    3468:	00440501 	subeq	r0, r4, r1, lsl #10
    346c:	00000205 	andeq	r0, r0, r5, lsl #4
    3470:	a0030000 	andge	r0, r3, r0
    3474:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3478:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    347c:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    3480:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3484:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3488:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    348c:	03020520 	movweq	r0, #9504	; 0x2520
    3490:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3494:	0603054a 	streq	r0, [r3], -sl, asr #10
    3498:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    349c:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    34a0:	0f054706 	svceq	0x00054706
    34a4:	06050106 	streq	r0, [r5], -r6, lsl #2
    34a8:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    34ac:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    34b0:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    34b4:	0a050106 	beq	1438d4 <__ccfg+0x12392c>
    34b8:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    34bc:	200d0301 	andcs	r0, sp, r1, lsl #6
    34c0:	03060305 	movweq	r0, #25349	; 0x6305
    34c4:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    34c8:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    34cc:	06050106 	streq	r0, [r5], -r6, lsl #2
    34d0:	06020574 			; <UNDEFINED> instruction: 0x06020574
    34d4:	06050542 	streq	r0, [r5], -r2, asr #10
    34d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    34dc:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    34e0:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    34e4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    34e8:	02052006 	andeq	r2, r5, #6
    34ec:	0b052306 	bleq	14c10c <__ccfg+0x12c164>
    34f0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    34f4:	0602054a 	streq	r0, [r2], -sl, asr #10
    34f8:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    34fc:	0a020106 	beq	8391c <__ccfg+0x63974>
    3500:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3504:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3508:	00000000 	andeq	r0, r0, r0
    350c:	0109d103 	tsteq	r9, r3, lsl #2
    3510:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3514:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3518:	20780306 	rsbscs	r0, r8, r6, lsl #6
    351c:	20280205 	eorcs	r0, r8, r5, lsl #4
    3520:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3524:	01060505 	tsteq	r6, r5, lsl #10
    3528:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    352c:	01060405 	tsteq	r6, r5, lsl #8
    3530:	21060205 	tstcs	r6, r5, lsl #4
    3534:	01060505 	tsteq	r6, r5, lsl #10
    3538:	33060205 	movwcc	r0, #25093	; 0x6205
    353c:	01060a05 	tsteq	r6, r5, lsl #20
    3540:	2f060205 	svccs	0x00060205
    3544:	1301012f 	movwne	r0, #4399	; 0x112f
    3548:	01060905 	tsteq	r6, r5, lsl #18
    354c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3550:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3554:	01000902 	tsteq	r0, r2, lsl #18
    3558:	00340501 	eorseq	r0, r4, r1, lsl #10
    355c:	00000205 	andeq	r0, r0, r5, lsl #4
    3560:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3564:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3568:	01141316 	tsteq	r4, r6, lsl r3
    356c:	03063405 	movweq	r3, #25605	; 0x6405
    3570:	02052079 	andeq	r2, r5, #121	; 0x79
    3574:	4a062027 	bmi	18b618 <__ccfg+0x16b670>
    3578:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    357c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3580:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3584:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3588:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    358c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3590:	0a052306 	beq	14c1b0 <__ccfg+0x12c208>
    3594:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3598:	21010530 	tstcs	r1, r0, lsr r5
    359c:	01000702 	tsteq	r0, r2, lsl #14
    35a0:	00350501 	eorseq	r0, r5, r1, lsl #10
    35a4:	00000205 	andeq	r0, r0, r5, lsl #4
    35a8:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    35ac:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    35b0:	06350516 			; <UNDEFINED> instruction: 0x06350516
    35b4:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    35b8:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    35bc:	01300602 	teqeq	r0, r2, lsl #12
    35c0:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    35c4:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    35c8:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    35cc:	06022c02 	streq	r2, [r2], -r2, lsl #24
    35d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35d4:	02050032 	andeq	r0, r5, #50	; 0x32
    35d8:	00000000 	andeq	r0, r0, r0
    35dc:	010a8403 	tsteq	sl, r3, lsl #8
    35e0:	01160205 	tsteq	r6, r5, lsl #4
    35e4:	1c063205 	sfmne	f3, 4, [r6], {5}
    35e8:	20240205 	eorcs	r0, r4, r5, lsl #4
    35ec:	134a4a06 	movtne	r4, #43526	; 0xaa06
    35f0:	03060a05 	movweq	r0, #27141	; 0x6a05
    35f4:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    35f8:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    35fc:	06020520 	streq	r0, [r2], -r0, lsr #10
    3600:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    3604:	03051413 	movweq	r1, #21523	; 0x5413
    3608:	06050513 			; <UNDEFINED> instruction: 0x06050513
    360c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3610:	06060521 	streq	r0, [r6], -r1, lsr #10
    3614:	06030501 	streq	r0, [r3], -r1, lsl #10
    3618:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    361c:	01061305 	tsteq	r6, r5, lsl #6
    3620:	20060f05 	andcs	r0, r6, r5, lsl #30
    3624:	13060505 	movwne	r0, #25861	; 0x6505
    3628:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    362c:	08022008 	stmdaeq	r2, {r3, sp}
    3630:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3634:	02050028 	andeq	r0, r5, #40	; 0x28
    3638:	000013f4 	strdeq	r1, [r0], -r4
    363c:	010a8c03 	tsteq	sl, r3, lsl #24
    3640:	1a030105 	bne	c3a5c <__ccfg+0xa3ab4>
    3644:	00010201 	andeq	r0, r1, r1, lsl #4
    3648:	01230101 			; <UNDEFINED> instruction: 0x01230101
    364c:	00030000 	andeq	r0, r3, r0
    3650:	00000089 	andeq	r0, r0, r9, lsl #1
    3654:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3658:	0101000d 	tsteq	r1, sp
    365c:	00000101 	andeq	r0, r0, r1, lsl #2
    3660:	00000100 	andeq	r0, r0, r0, lsl #2
    3664:	6f682f01 	svcvs	0x00682f01
    3668:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 34bc <__exidx_end+0x838>
    366c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3670:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3674:	6f746b73 	svcvs	0x00746b73
    3678:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    367c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3680:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3684:	2f534f43 	svccs	0x00534f43
    3688:	4f636950 	svcmi	0x00636950
    368c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3690:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3694:	73752f00 	cmnvc	r5, #0, 30
    3698:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    369c:	63672f62 	cmnvs	r7, #392	; 0x188
    36a0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    36a4:	6f6e2d6d 	svcvs	0x006e2d6d
    36a8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    36ac:	2f696261 	svccs	0x00696261
    36b0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    36b4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    36b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    36bc:	73000065 	movwvc	r0, #101	; 0x65
    36c0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    36c4:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    36c8:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    36cc:	00000100 	andeq	r0, r0, r0, lsl #2
    36d0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    36d4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    36d8:	00000200 	andeq	r0, r0, r0, lsl #4
    36dc:	00010500 	andeq	r0, r1, r0, lsl #10
    36e0:	13f60205 	mvnsne	r0, #1342177280	; 0x50000000
    36e4:	84030000 	strhi	r0, [r3], #-0
    36e8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    36ec:	0a051416 	beq	14874c <__ccfg+0x1287a4>
    36f0:	00010210 	andeq	r0, r1, r0, lsl r2
    36f4:	01050101 	tsteq	r5, r1, lsl #2
    36f8:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    36fc:	03000013 	movweq	r0, #19
    3700:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    3704:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3708:	0102100a 	tsteq	r2, sl
    370c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3710:	02050001 	andeq	r0, r5, #1
    3714:	000013fa 	strdeq	r1, [r0], -sl
    3718:	0102a803 	tsteq	r2, r3, lsl #16
    371c:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3720:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3724:	01010001 	tsteq	r1, r1
    3728:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    372c:	0013fc02 	andseq	pc, r3, r2, lsl #24
    3730:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3734:	13050501 	movwne	r0, #21761	; 0x5501
    3738:	06010517 			; <UNDEFINED> instruction: 0x06010517
    373c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    3740:	33062605 	movwcc	r2, #26117	; 0x6605
    3744:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3748:	2105051f 	tstcs	r5, pc, lsl r5
    374c:	20061d05 	andcs	r1, r6, r5, lsl #26
    3750:	01060505 	tsteq	r6, r5, lsl #10
    3754:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3758:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    375c:	01053305 	tsteq	r5, r5, lsl #6
    3760:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3764:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3768:	01061605 	tsteq	r6, r5, lsl #12
    376c:	01001002 	tsteq	r0, r2
    3770:	00018501 	andeq	r8, r1, r1, lsl #10
    3774:	7f000300 	svcvc	0x00000300
    3778:	02000001 	andeq	r0, r0, #1
    377c:	0d0efb01 	vstreq	d15, [lr, #-4]
    3780:	01010100 	mrseq	r0, (UNDEF: 17)
    3784:	00000001 	andeq	r0, r0, r1
    3788:	01000001 	tsteq	r0, r1
    378c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3790:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3794:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3798:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    379c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    37a0:	61652d65 	cmnvs	r5, r5, ror #26
    37a4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    37a8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    37ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    37b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    37b4:	6f682f00 	svcvs	0x00682f00
    37b8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 360c <__exidx_end+0x988>
    37bc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37c4:	6f746b73 	svcvs	0x00746b73
    37c8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37cc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37d0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37d4:	2f534f43 	svccs	0x00534f43
    37d8:	4f636950 	svcmi	0x00636950
    37dc:	43432f53 	movtmi	r2, #16211	; 0x3f53
    37e0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37e4:	3143432f 	cmpcc	r3, pc, lsr #6
    37e8:	57585833 	smmlarpl	r8, r3, r8, r5
    37ec:	2f455241 	svccs	0x00455241
    37f0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    37f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3740 <__exidx_end+0xabc>
    37f8:	616d2f65 	cmnvs	sp, r5, ror #30
    37fc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3800:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3804:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3808:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    380c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3810:	4349502f 	movtmi	r5, #36911	; 0x902f
    3814:	502f534f 	eorpl	r5, pc, pc, asr #6
    3818:	534f6369 	movtpl	r6, #62313	; 0xf369
    381c:	3143432f 	cmpcc	r3, pc, lsr #6
    3820:	00585833 	subseq	r5, r8, r3, lsr r8
    3824:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3770 <__exidx_end+0xaec>
    3828:	616d2f65 	cmnvs	sp, r5, ror #30
    382c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3830:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3834:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3838:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    383c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3840:	4349502f 	movtmi	r5, #36911	; 0x902f
    3844:	502f534f 	eorpl	r5, pc, pc, asr #6
    3848:	534f6369 	movtpl	r6, #62313	; 0xf369
    384c:	6f682f00 	svcvs	0x00682f00
    3850:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 36a4 <__exidx_end+0xa20>
    3854:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3858:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    385c:	6f746b73 	svcvs	0x00746b73
    3860:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3864:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3868:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    386c:	2f534f43 	svccs	0x00534f43
    3870:	4f636950 	svcmi	0x00636950
    3874:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3878:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    387c:	74730000 	ldrbtvc	r0, [r3], #-0
    3880:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3884:	0100682e 	tsteq	r0, lr, lsr #16
    3888:	77680000 	strbvc	r0, [r8, -r0]!
    388c:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    3890:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3894:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    3898:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    389c:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    38a0:	00020068 	andeq	r0, r2, r8, rrx
    38a4:	63726100 	cmnvs	r2, #0, 2
    38a8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    38ac:	6d000003 	stcvs	0, cr0, [r0, #-12]
    38b0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    38b4:	00030068 	andeq	r0, r3, r8, rrx
    38b8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    38bc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38c0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    38c4:	62000003 	andvs	r0, r0, #3
    38c8:	6f747475 	svcvs	0x00747475
    38cc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    38d0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    38d4:	00000300 	andeq	r0, r0, r0, lsl #6
    38d8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    38dc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    38e0:	6b000004 	blvs	38f8 <__exidx_end+0xc74>
    38e4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    38e8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    38ec:	63000005 	movwvs	r0, #5
    38f0:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    38f4:	00030063 	andeq	r0, r3, r3, rrx
    38f8:	02990000 	addseq	r0, r9, #0
    38fc:	00030000 	andeq	r0, r3, r0
    3900:	000001c0 	andeq	r0, r0, r0, asr #3
    3904:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3908:	0101000d 	tsteq	r1, sp
    390c:	00000101 	andeq	r0, r0, r1, lsl #2
    3910:	00000100 	andeq	r0, r0, r0, lsl #2
    3914:	6f682f01 	svcvs	0x00682f01
    3918:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 376c <__exidx_end+0xae8>
    391c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3920:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3924:	6f746b73 	svcvs	0x00746b73
    3928:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    392c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3930:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3934:	2f534f43 	svccs	0x00534f43
    3938:	4f636950 	svcmi	0x00636950
    393c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3940:	2f736269 	svccs	0x00736269
    3944:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    3948:	0073726f 	rsbseq	r7, r3, pc, ror #4
    394c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3898 <__exidx_end+0xc14>
    3950:	616d2f65 	cmnvs	sp, r5, ror #30
    3954:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3958:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    395c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3960:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3964:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3968:	4349502f 	movtmi	r5, #36911	; 0x902f
    396c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3970:	534f6369 	movtpl	r6, #62313	; 0xf369
    3974:	3143432f 	cmpcc	r3, pc, lsr #6
    3978:	00585833 	subseq	r5, r8, r3, lsr r8
    397c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 38c8 <__exidx_end+0xc44>
    3980:	616d2f65 	cmnvs	sp, r5, ror #30
    3984:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3988:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    398c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3990:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3994:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3998:	4349502f 	movtmi	r5, #36911	; 0x902f
    399c:	502f534f 	eorpl	r5, pc, pc, asr #6
    39a0:	534f6369 	movtpl	r6, #62313	; 0xf369
    39a4:	3143432f 	cmpcc	r3, pc, lsr #6
    39a8:	2f585833 	svccs	0x00585833
    39ac:	33314343 	teqcc	r1, #201326593	; 0xc000001
    39b0:	41575858 	cmpmi	r7, r8, asr r8
    39b4:	642f4552 	strtvs	r4, [pc], #-1362	; 39bc <__exidx_end+0xd38>
    39b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    39bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    39c0:	73752f00 	cmnvc	r5, #0, 30
    39c4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    39c8:	63672f62 	cmnvs	r7, #392	; 0x188
    39cc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    39d0:	6f6e2d6d 	svcvs	0x006e2d6d
    39d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    39d8:	2f696261 	svccs	0x00696261
    39dc:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    39e0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    39e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    39e8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    39ec:	2f656d6f 	svccs	0x00656d6f
    39f0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    39f4:	442f6e69 	strtmi	r6, [pc], #-3689	; 39fc <__exidx_end+0xd78>
    39f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    39fc:	4f2f706f 	svcmi	0x002f706f
    3a00:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3a04:	502f5445 	eorpl	r5, pc, r5, asr #8
    3a08:	534f4349 	movtpl	r4, #62281	; 0xf349
    3a0c:	6369502f 	cmnvs	r9, #47	; 0x2f
    3a10:	2f00534f 	svccs	0x0000534f
    3a14:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3a18:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3a1c:	2f6e6974 	svccs	0x006e6974
    3a20:	6b736544 	blvs	1cdcf38 <__ccfg+0x1cbcf90>
    3a24:	2f706f74 	svccs	0x00706f74
    3a28:	4f534c4f 	svcmi	0x00534c4f
    3a2c:	2f54454e 	svccs	0x0054454e
    3a30:	4f434950 	svcmi	0x00434950
    3a34:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3a38:	2f534f63 	svccs	0x00534f63
    3a3c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3a40:	00006c65 	andeq	r6, r0, r5, ror #24
    3a44:	5f6e6970 	svcpl	0x006e6970
    3a48:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    3a4c:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    3a50:	00000100 	andeq	r0, r0, r0, lsl #2
    3a54:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    3a58:	63675f73 	cmnvs	r7, #460	; 0x1cc
    3a5c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3a60:	67000002 	strvs	r0, [r0, -r2]
    3a64:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3a68:	00030068 	andeq	r0, r3, r8, rrx
    3a6c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3a70:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3a74:	00040068 	andeq	r0, r4, r8, rrx
    3a78:	63726100 	cmnvs	r2, #0, 2
    3a7c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3a80:	6d000002 	stcvs	0, cr0, [r0, #-8]
    3a84:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3a88:	00020068 	andeq	r0, r2, r8, rrx
    3a8c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3a90:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a94:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3a98:	62000002 	andvs	r0, r0, #2
    3a9c:	6f747475 	svcvs	0x00747475
    3aa0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3aa4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3aa8:	00000200 	andeq	r0, r0, r0, lsl #4
    3aac:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3ab0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3ab4:	6b000005 	blvs	3ad0 <__exidx_end+0xe4c>
    3ab8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3abc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3ac0:	00000006 	andeq	r0, r0, r6
    3ac4:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    3ac8:	00000002 	andeq	r0, r0, r2
    3acc:	010e0300 	mrseq	r0, ELR_hyp
    3ad0:	01011b05 	tsteq	r1, r5, lsl #22
    3ad4:	06010501 	streq	r0, [r1], -r1, lsl #10
    3ad8:	00010201 	andeq	r0, r1, r1, lsl #4
    3adc:	3f050101 	svccc	0x00050101
    3ae0:	00020500 	andeq	r0, r2, r0, lsl #10
    3ae4:	03000000 	movweq	r0, #0
    3ae8:	02050110 	andeq	r0, r5, #16, 2
    3aec:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    3af0:	03063f05 	movweq	r3, #28421	; 0x6f05
    3af4:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    3af8:	03052605 	movweq	r2, #22021	; 0x5605
    3afc:	06052206 	streq	r2, [r5], -r6, lsl #4
    3b00:	03050106 	movweq	r0, #20742	; 0x5106
    3b04:	02044d06 	andeq	r4, r4, #384	; 0x180
    3b08:	0100c103 	tsteq	r0, r3, lsl #2
    3b0c:	40030104 	andmi	r0, r3, r4, lsl #2
    3b10:	044b3d20 	strbeq	r3, [fp], #-3360	; 0xfffff2e0
    3b14:	01330302 	teqeq	r3, r2, lsl #6
    3b18:	4e030104 	adfmis	f0, f3, f4
    3b1c:	31020520 	tstcc	r2, r0, lsr #10
    3b20:	01060705 	tsteq	r6, r5, lsl #14
    3b24:	0f050304 	svceq	0x00050304
    3b28:	2e018b03 	vmlacs.f64	d8, d1, d3
    3b2c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3b30:	207ef503 	rsbscs	pc, lr, r3, lsl #10
    3b34:	21060205 	tstcs	r6, r5, lsl #4
    3b38:	05130b05 	ldreq	r0, [r3, #-2821]	; 0xfffff4fb
    3b3c:	03041303 	movweq	r1, #17155	; 0x4303
    3b40:	83032905 	movwhi	r2, #14597	; 0x3905
    3b44:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3b48:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3b4c:	f803060b 			; <UNDEFINED> instruction: 0xf803060b
    3b50:	0304017e 	movweq	r0, #16766	; 0x417e
    3b54:	88030f05 	stmdahi	r3, {r0, r2, r8, r9, sl, fp}
    3b58:	01042001 	tsteq	r4, r1
    3b5c:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b60:	0304207e 	movweq	r2, #16510	; 0x407e
    3b64:	88033305 	stmdahi	r3, {r0, r2, r8, r9, ip, sp}
    3b68:	42052e01 	andmi	r2, r5, #1, 28
    3b6c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3b70:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3b74:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    3b78:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    3b7c:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    3b80:	2208051e 	andcs	r0, r8, #125829120	; 0x7800000
    3b84:	1f063a05 	svcne	0x00063a05
    3b88:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
    3b8c:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    3b90:	06022301 	streq	r2, [r2], -r1, lsl #6
    3b94:	3c010100 	stfccs	f0, [r1], {-0}
    3b98:	03000003 	movweq	r0, #3
    3b9c:	0001a900 	andeq	sl, r1, r0, lsl #18
    3ba0:	fb010200 	blx	443aa <__ccfg+0x24402>
    3ba4:	01000d0e 	tsteq	r0, lr, lsl #26
    3ba8:	00010101 	andeq	r0, r1, r1, lsl #2
    3bac:	00010000 	andeq	r0, r1, r0
    3bb0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3bb4:	2f656d6f 	svccs	0x00656d6f
    3bb8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3bbc:	442f6e69 	strtmi	r6, [pc], #-3689	; 3bc4 <__exidx_end+0xf40>
    3bc0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3bc4:	4f2f706f 	svcmi	0x002f706f
    3bc8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3bcc:	502f5445 	eorpl	r5, pc, r5, asr #8
    3bd0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3bd4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3bd8:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bdc:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3be0:	004f492f 	subeq	r4, pc, pc, lsr #18
    3be4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b30 <__exidx_end+0xeac>
    3be8:	616d2f65 	cmnvs	sp, r5, ror #30
    3bec:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3bf0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3bf4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3bf8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3bfc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3c00:	4349502f 	movtmi	r5, #36911	; 0x902f
    3c04:	502f534f 	eorpl	r5, pc, pc, asr #6
    3c08:	534f6369 	movtpl	r6, #62313	; 0xf369
    3c0c:	3143432f 	cmpcc	r3, pc, lsr #6
    3c10:	2f585833 	svccs	0x00585833
    3c14:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3c18:	41575858 	cmpmi	r7, r8, asr r8
    3c1c:	642f4552 	strtvs	r4, [pc], #-1362	; 3c24 <__exidx_end+0xfa0>
    3c20:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3c24:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3c28:	73752f00 	cmnvc	r5, #0, 30
    3c2c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3c30:	63672f62 	cmnvs	r7, #392	; 0x188
    3c34:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3c38:	6f6e2d6d 	svcvs	0x006e2d6d
    3c3c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3c40:	2f696261 	svccs	0x00696261
    3c44:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3c48:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3c4c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c50:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3c54:	2f656d6f 	svccs	0x00656d6f
    3c58:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c5c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c64 <__exidx_end+0xfe0>
    3c60:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c64:	4f2f706f 	svcmi	0x002f706f
    3c68:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c6c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c70:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c74:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c78:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3c7c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3c80:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3c84:	2f656d6f 	svccs	0x00656d6f
    3c88:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c8c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c94 <__exidx_end+0x1010>
    3c90:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c94:	4f2f706f 	svcmi	0x002f706f
    3c98:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c9c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ca0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ca4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ca8:	2f00534f 	svccs	0x0000534f
    3cac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3cb0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3cb4:	2f6e6974 	svccs	0x006e6974
    3cb8:	6b736544 	blvs	1cdd1d0 <__ccfg+0x1cbd228>
    3cbc:	2f706f74 	svccs	0x00706f74
    3cc0:	4f534c4f 	svcmi	0x00534c4f
    3cc4:	2f54454e 	svccs	0x0054454e
    3cc8:	4f434950 	svcmi	0x00434950
    3ccc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3cd0:	2f534f63 	svccs	0x00534f63
    3cd4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3cd8:	00006c65 	andeq	r6, r0, r5, ror #24
    3cdc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3ce0:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    3ce4:	00010063 	andeq	r0, r1, r3, rrx
    3ce8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3cec:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3cf0:	73000002 	movwvc	r0, #2
    3cf4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3cf8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3cfc:	61000003 	tstvs	r0, r3
    3d00:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3d04:	00040068 	andeq	r0, r4, r8, rrx
    3d08:	63616d00 	cmnvs	r1, #0, 26
    3d0c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3d10:	70000004 	andvc	r0, r0, r4
    3d14:	5f736e69 	svcpl	0x00736e69
    3d18:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3d1c:	00040068 	andeq	r0, r4, r8, rrx
    3d20:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3d24:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3d28:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d2c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3d30:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3d34:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3d38:	00050068 	andeq	r0, r5, r8, rrx
    3d3c:	72656b00 	rsbvc	r6, r5, #0, 22
    3d40:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3d44:	00060068 	andeq	r0, r6, r8, rrx
    3d48:	01050000 	mrseq	r0, (UNDEF: 5)
    3d4c:	00020500 	andeq	r0, r2, r0, lsl #10
    3d50:	03000000 	movweq	r0, #0
    3d54:	0601011b 			; <UNDEFINED> instruction: 0x0601011b
    3d58:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3d5c:	060e056a 	streq	r0, [lr], -sl, ror #10
    3d60:	20050501 	andcs	r0, r5, r1, lsl #10
    3d64:	31060305 	tstcc	r6, r5, lsl #6
    3d68:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    3d6c:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3d70:	01870302 	orreq	r0, r7, r2, lsl #6
    3d74:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3d78:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3d7c:	1c0f0520 	cfstr32ne	mvfx0, [pc], {32}
    3d80:	20061405 	andcs	r1, r6, r5, lsl #8
    3d84:	01061c05 	tsteq	r6, r5, lsl #24
    3d88:	06200205 	strteq	r0, [r0], -r5, lsl #4
    3d8c:	4b2e1103 	blmi	b881a0 <__ccfg+0xb681f8>
    3d90:	0303053d 	movweq	r0, #13629	; 0x353d
    3d94:	02042e71 	andeq	r2, r4, #1808	; 0x710
    3d98:	fe032905 	vseleq.f16	s4, s6, s10
    3d9c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3da0:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3da4:	fd030607 	stc2	6, cr0, [r3, #-28]	; 0xffffffe4
    3da8:	0204017e 	andeq	r0, r4, #-2147483617	; 0x8000001f
    3dac:	83030f05 	movwhi	r0, #16133	; 0x3f05
    3db0:	01042e01 	tsteq	r4, r1, lsl #28
    3db4:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3db8:	0204207e 	andeq	r2, r4, #126	; 0x7e
    3dbc:	83033305 	movwhi	r3, #13061	; 0x3305
    3dc0:	01042001 	tsteq	r4, r1
    3dc4:	fd030605 	stc2	6, cr0, [r3, #-20]	; 0xffffffec
    3dc8:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    3dcc:	05053006 	streq	r3, [r5, #-6]
    3dd0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3dd4:	03054006 	movweq	r4, #20486	; 0x5006
    3dd8:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
    3ddc:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3de0:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    3de4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3de8:	16030602 	strne	r0, [r3], -r2, lsl #12
    3dec:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    3df0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3df4:	eb030629 	bl	c56a0 <__ccfg+0xa56f8>
    3df8:	05055800 	streq	r5, [r5, #-2048]	; 0xfffff800
    3dfc:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    3e00:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3e04:	7f900307 	svcvc	0x00900307
    3e08:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3e0c:	00f0030f 	rscseq	r0, r0, pc, lsl #6
    3e10:	20330520 	eorscs	r0, r3, r0, lsr #10
    3e14:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3e18:	207f9003 	rsbscs	r9, pc, r3
    3e1c:	31060205 	tstcc	r6, r5, lsl #4
    3e20:	01060505 	tsteq	r6, r5, lsl #10
    3e24:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    3e28:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
    3e2c:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3e30:	06290502 	strteq	r0, [r9], -r2, lsl #10
    3e34:	3c00df03 	stccc	15, cr13, [r0], {3}
    3e38:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3e3c:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3e40:	03070501 	movweq	r0, #29953	; 0x7501
    3e44:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e48:	030f0502 	movweq	r0, #62722	; 0xf502
    3e4c:	042e00e4 	strteq	r0, [lr], #-228	; 0xffffff1c
    3e50:	03070501 	movweq	r0, #29953	; 0x7501
    3e54:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e58:	03330502 	teqeq	r3, #8388608	; 0x800000
    3e5c:	042000e4 	strteq	r0, [r0], #-228	; 0xffffff1c
    3e60:	03050501 	movweq	r0, #21761	; 0x5501
    3e64:	05207f9c 	streq	r7, [r0, #-3996]!	; 0xfffff064
    3e68:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e6c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3e70:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3e74:	03053106 	movweq	r3, #20742	; 0x5106
    3e78:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e7c:	01052206 	tsteq	r5, r6, lsl #4
    3e80:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    3e84:	0601052c 	streq	r0, [r1], -ip, lsr #10
    3e88:	000c024c 	andeq	r0, ip, ip, asr #4
    3e8c:	29050101 	stmdbcs	r5, {r0, r8}
    3e90:	00020500 	andeq	r0, r2, r0, lsl #10
    3e94:	03000000 	movweq	r0, #0
    3e98:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    3e9c:	0f051602 	svceq	0x00051602
    3ea0:	29050106 	stmdbcs	r5, {r1, r2, r8}
    3ea4:	240f051c 	strcs	r0, [pc], #-1308	; 3eac <__exidx_end+0x1228>
    3ea8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3eac:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3eb0:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    3eb4:	2e780303 	cdpcs	3, 7, cr0, cr8, cr3, {0}
    3eb8:	40060205 	andmi	r0, r6, r5, lsl #4
    3ebc:	01060705 	tsteq	r6, r5, lsl #14
    3ec0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    3ec4:	2f2f0603 	svccs	0x002f0603
    3ec8:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    3ecc:	052c0305 	streq	r0, [ip, #-773]!	; 0xfffffcfb
    3ed0:	06023e01 	streq	r3, [r2], -r1, lsl #28
    3ed4:	31010100 	mrscc	r0, (UNDEF: 17)
    3ed8:	03000009 	movweq	r0, #9
    3edc:	0001cc00 	andeq	ip, r1, r0, lsl #24
    3ee0:	fb010200 	blx	446ea <__ccfg+0x24742>
    3ee4:	01000d0e 	tsteq	r0, lr, lsl #26
    3ee8:	00010101 	andeq	r0, r1, r1, lsl #2
    3eec:	00010000 	andeq	r0, r1, r0
    3ef0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ef4:	2f656d6f 	svccs	0x00656d6f
    3ef8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3efc:	442f6e69 	strtmi	r6, [pc], #-3689	; 3f04 <__exidx_end+0x1280>
    3f00:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3f04:	4f2f706f 	svcmi	0x002f706f
    3f08:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3f0c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3f10:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f14:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f18:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f1c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3f20:	6f74532f 	svcvs	0x0074532f
    3f24:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3f28:	6f682f00 	svcvs	0x00682f00
    3f2c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3d80 <__exidx_end+0x10fc>
    3f30:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3f34:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3f38:	6f746b73 	svcvs	0x00746b73
    3f3c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3f40:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3f44:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3f48:	2f534f43 	svccs	0x00534f43
    3f4c:	4f636950 	svcmi	0x00636950
    3f50:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3f54:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f58:	3143432f 	cmpcc	r3, pc, lsr #6
    3f5c:	57585833 	smmlarpl	r8, r3, r8, r5
    3f60:	2f455241 	svccs	0x00455241
    3f64:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3f68:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3f6c:	752f0062 	strvc	r0, [pc, #-98]!	; 3f12 <__exidx_end+0x128e>
    3f70:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3dac <__exidx_end+0x1128>
    3f74:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3f78:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3f7c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3f80:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3f84:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3f88:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3f8c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3f90:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3f94:	2f006564 	svccs	0x00006564
    3f98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3f9c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fa0:	2f6e6974 	svccs	0x006e6974
    3fa4:	6b736544 	blvs	1cdd4bc <__ccfg+0x1cbd514>
    3fa8:	2f706f74 	svccs	0x00706f74
    3fac:	4f534c4f 	svcmi	0x00534c4f
    3fb0:	2f54454e 	svccs	0x0054454e
    3fb4:	4f434950 	svcmi	0x00434950
    3fb8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fbc:	2f534f63 	svccs	0x00534f63
    3fc0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fc4:	2f005858 	svccs	0x00005858
    3fc8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fcc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fd0:	2f6e6974 	svccs	0x006e6974
    3fd4:	6b736544 	blvs	1cdd4ec <__ccfg+0x1cbd544>
    3fd8:	2f706f74 	svccs	0x00706f74
    3fdc:	4f534c4f 	svcmi	0x00534c4f
    3fe0:	2f54454e 	svccs	0x0054454e
    3fe4:	4f434950 	svcmi	0x00434950
    3fe8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fec:	00534f63 	subseq	r4, r3, r3, ror #30
    3ff0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f3c <__exidx_end+0x12b8>
    3ff4:	616d2f65 	cmnvs	sp, r5, ror #30
    3ff8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3ffc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4000:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4004:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4008:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    400c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4010:	502f534f 	eorpl	r5, pc, pc, asr #6
    4014:	534f6369 	movtpl	r6, #62313	; 0xf369
    4018:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    401c:	006c656e 	rsbeq	r6, ip, lr, ror #10
    4020:	6f747300 	svcvs	0x00747300
    4024:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4028:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    402c:	30387235 	eorscc	r7, r8, r5, lsr r2
    4030:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    4034:	00000100 	andeq	r0, r0, r0, lsl #2
    4038:	6f697067 	svcvs	0x00697067
    403c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4040:	74730000 	ldrbtvc	r0, [r3], #-0
    4044:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4048:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    404c:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 3e94 <__exidx_end+0x1210>
    4050:	0100682e 	tsteq	r0, lr, lsr #16
    4054:	74730000 	ldrbtvc	r0, [r3], #-0
    4058:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    405c:	0300682e 	movweq	r6, #2094	; 0x82e
    4060:	72610000 	rsbvc	r0, r1, #0
    4064:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4068:	00000400 	andeq	r0, r0, r0, lsl #8
    406c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4070:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4074:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4078:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    407c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4080:	00000400 	andeq	r0, r0, r0, lsl #8
    4084:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4088:	5f736e6f 	svcpl	0x00736e6f
    408c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4090:	00040068 	andeq	r0, r4, r8, rrx
    4094:	73797300 	cmnvc	r9, #0, 6
    4098:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    409c:	00000500 	andeq	r0, r0, r0, lsl #10
    40a0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    40a4:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    40a8:	00000600 	andeq	r0, r0, r0, lsl #12
    40ac:	00190500 	andseq	r0, r9, r0, lsl #10
    40b0:	14480205 	strbne	r0, [r8], #-517	; 0xfffffdfb
    40b4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    40b8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    40bc:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    40c0:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    40c4:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    40c8:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40cc:	20028a03 	andcs	r8, r2, r3, lsl #20
    40d0:	19050104 	stmdbne	r5, {r2, r8}
    40d4:	2e7df103 	expcse	f7, f3
    40d8:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40dc:	2002c503 	andcs	ip, r2, r3, lsl #10
    40e0:	d0030f05 	andle	r0, r3, r5, lsl #30
    40e4:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    40e8:	2000fa03 	andcs	pc, r0, r3, lsl #20
    40ec:	03050104 	movweq	r0, #20740	; 0x5104
    40f0:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    40f4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    40f8:	8f03060f 	svchi	0x0003060f
    40fc:	01040101 	tsteq	r4, r1, lsl #2
    4100:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    4104:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    4108:	1f050521 	svcne	0x00050521
    410c:	21060305 	tstcs	r6, r5, lsl #6
    4110:	29050204 	stmdbcs	r5, {r2, r9}
    4114:	01018903 	tsteq	r1, r3, lsl #18
    4118:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    411c:	03040501 	movweq	r0, #17665	; 0x4501
    4120:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    4124:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4128:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    412c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4130:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4134:	01041705 	tsteq	r4, r5, lsl #14
    4138:	03060205 	movweq	r0, #25093	; 0x6205
    413c:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    4140:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4144:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4148:	06030501 	streq	r0, [r3], -r1, lsl #10
    414c:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    4150:	29050204 	stmdbcs	r5, {r2, r9}
    4154:	0102b603 	tsteq	r2, r3, lsl #12
    4158:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    415c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    4160:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4164:	207dc003 	rsbscs	ip, sp, r3
    4168:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    416c:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    4170:	20090301 	andcs	r0, r9, r1, lsl #6
    4174:	01000702 	tsteq	r0, r2, lsl #14
    4178:	001f0501 	andseq	r0, pc, r1, lsl #10
    417c:	147c0205 	ldrbtne	r0, [ip], #-517	; 0xfffffdfb
    4180:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4184:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4188:	010e0514 	tsteq	lr, r4, lsl r5
    418c:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    4190:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4194:	01ff032d 	mvnseq	r0, sp, lsr #6
    4198:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    419c:	86030603 	strhi	r0, [r3], -r3, lsl #12
    41a0:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    41a4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    41a8:	02042f06 	andeq	r2, r4, #6, 30
    41ac:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    41b0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41b4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41bc:	89030604 	stmdbhi	r3, {r2, r9, sl}
    41c0:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    41c4:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    41c8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41cc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41d0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41d4:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    41d8:	0204207d 	andeq	r2, r4, #125	; 0x7d
    41dc:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    41e0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41e4:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41e8:	017e8c03 	cmneq	lr, r3, lsl #24
    41ec:	79030205 	stmdbvc	r3, {r0, r2, r9}
    41f0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    41f4:	01fb032d 	mvnseq	r0, sp, lsr #6
    41f8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41fc:	8b030603 	blhi	c5a10 <__ccfg+0xa5a68>
    4200:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4204:	a6032905 	strge	r2, [r3], -r5, lsl #18
    4208:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    420c:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4210:	017dd603 	cmneq	sp, r3, lsl #12
    4214:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4218:	2002aa03 	andcs	sl, r2, r3, lsl #20
    421c:	03050104 	movweq	r0, #20740	; 0x5104
    4220:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4224:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    4228:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    422c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4230:	03010501 	movweq	r0, #5377	; 0x1501
    4234:	05022009 	streq	r2, [r2, #-9]
    4238:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    423c:	0205001e 	andeq	r0, r5, #30
    4240:	000014ac 	andeq	r1, r0, ip, lsr #9
    4244:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4248:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    424c:	cf032905 	svcgt	0x00032905
    4250:	3d050103 	stfccs	f0, [r5, #-12]
    4254:	17050514 	smladne	r5, r4, r5, r0
    4258:	01063805 	tsteq	r6, r5, lsl #16
    425c:	1e050104 	adfnes	f0, f5, f4
    4260:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4264:	38050204 	stmdacc	r5, {r2, r9}
    4268:	2003d803 	andcs	sp, r3, r3, lsl #16
    426c:	02050104 	andeq	r0, r5, #4, 2
    4270:	7cab0306 	stcvc	3, cr0, [fp], #24
    4274:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4278:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    427c:	3d050103 	stfccs	f0, [r5, #-12]
    4280:	17050514 	smladne	r5, r4, r5, r0
    4284:	01063805 	tsteq	r6, r5, lsl #16
    4288:	01050104 	tsteq	r5, r4, lsl #2
    428c:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    4290:	01000402 	tsteq	r0, r2, lsl #8
    4294:	00270501 	eoreq	r0, r7, r1, lsl #10
    4298:	14c40205 	strbne	r0, [r4], #517	; 0x205
    429c:	d7030000 	strle	r0, [r3, -r0]
    42a0:	02050100 	andeq	r0, r5, #0, 2
    42a4:	06270516 			; <UNDEFINED> instruction: 0x06270516
    42a8:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    42ac:	ba033805 	blt	d22c8 <__ccfg+0xb2320>
    42b0:	01042e03 	tsteq	r4, r3, lsl #28
    42b4:	ca030905 	bgt	c66d0 <__ccfg+0xa6728>
    42b8:	0204207c 	andeq	r2, r4, #124	; 0x7c
    42bc:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    42c0:	01042e03 	tsteq	r4, r3, lsl #28
    42c4:	03060805 	movweq	r0, #26629	; 0x6805
    42c8:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    42cc:	3c730302 	ldclcc	3, cr0, [r3], #-8
    42d0:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    42d4:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    42d8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42dc:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42e0:	06020501 	streq	r0, [r2], -r1, lsl #10
    42e4:	017cc003 	cmneq	ip, r3
    42e8:	38050204 	stmdacc	r5, {r2, r9}
    42ec:	2003c003 	andcs	ip, r3, r3
    42f0:	02050104 	andeq	r0, r5, #4, 2
    42f4:	7cc00306 	stclvc	3, cr0, [r0], {6}
    42f8:	06052f20 	streq	r2, [r5], -r0, lsr #30
    42fc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4300:	02042f06 	andeq	r2, r4, #6, 30
    4304:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    4308:	3d050103 	stfccs	f0, [r5, #-12]
    430c:	17050514 	smladne	r5, r4, r5, r0
    4310:	01063805 	tsteq	r6, r5, lsl #16
    4314:	02050104 	andeq	r0, r5, #4, 2
    4318:	7cc30306 	stclvc	3, cr0, [r3], {6}
    431c:	060f052e 	streq	r0, [pc], -lr, lsr #10
    4320:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4324:	03060305 	movweq	r0, #25349	; 0x6305
    4328:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    432c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4330:	4b4c4b06 	blmi	1316f50 <__ccfg+0x12f6fa8>
    4334:	01000702 	tsteq	r0, r2, lsl #14
    4338:	00160501 	andseq	r0, r6, r1, lsl #10
    433c:	15180205 	ldrne	r0, [r8, #-517]	; 0xfffffdfb
    4340:	81030000 	mrshi	r0, (UNDEF: 3)
    4344:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4348:	06160516 			; <UNDEFINED> instruction: 0x06160516
    434c:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4350:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4354:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4358:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    435c:	01050106 	tsteq	r5, r6, lsl #2
    4360:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4364:	0302051b 	movweq	r0, #9499	; 0x251b
    4368:	01010166 	tsteq	r1, r6, ror #2
    436c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4370:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4374:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4378:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    437c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4380:	03020501 	movweq	r0, #9473	; 0x2501
    4384:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4388:	03380502 	teqeq	r8, #8388608	; 0x800000
    438c:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    4390:	06020501 	streq	r0, [r2], -r1, lsl #10
    4394:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4398:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    439c:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    43a0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    43a4:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    43a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    43ac:	017ce303 	cmneq	ip, r3, lsl #6
    43b0:	38050204 	stmdacc	r5, {r2, r9}
    43b4:	20039d03 	andcs	r9, r3, r3, lsl #26
    43b8:	02050104 	andeq	r0, r5, #4, 2
    43bc:	7ce30306 	stclvc	3, cr0, [r3], #24
    43c0:	03030520 	movweq	r0, #13600	; 0x3520
    43c4:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    43c8:	09020106 	stmdbeq	r2, {r1, r2, r8}
    43cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43d0:	02050017 	andeq	r0, r5, #23
    43d4:	00001558 	andeq	r1, r0, r8, asr r5
    43d8:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    43dc:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    43e0:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    43e4:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    43e8:	06030520 	streq	r0, [r3], -r0, lsr #10
    43ec:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    43f0:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    43f4:	3c130303 	ldccc	3, cr0, [r3], {3}
    43f8:	01060905 	tsteq	r6, r5, lsl #18
    43fc:	2f060305 	svccs	0x00060305
    4400:	01050101 	tsteq	r5, r1, lsl #2
    4404:	03021406 	movweq	r1, #9222	; 0x2406
    4408:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    440c:	02050011 	andeq	r0, r5, #17
    4410:	0000157c 	andeq	r1, r0, ip, ror r5
    4414:	01019203 	tsteq	r1, r3, lsl #4
    4418:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    441c:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    4420:	2f062402 	svccs	0x00062402
    4424:	01060805 	tsteq	r6, r5, lsl #16
    4428:	0e030105 	adfeqs	f0, f3, f5
    442c:	0308052e 	movweq	r0, #34094	; 0x852e
    4430:	02052072 	andeq	r2, r5, #114	; 0x72
    4434:	200d0306 	andcs	r0, sp, r6, lsl #6
    4438:	13060105 	movwne	r0, #24837	; 0x6105
    443c:	01000302 	tsteq	r0, r2, lsl #6
    4440:	00120501 	andseq	r0, r2, r1, lsl #10
    4444:	15900205 	ldrne	r0, [r0, #517]	; 0x205
    4448:	a7030000 	strge	r0, [r3, -r0]
    444c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4450:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4454:	20050501 	andcs	r0, r5, r1, lsl #10
    4458:	2f060305 	svccs	0x00060305
    445c:	01060905 	tsteq	r6, r5, lsl #18
    4460:	2f060305 	svccs	0x00060305
    4464:	30060105 	andcc	r0, r6, r5, lsl #2
    4468:	01000302 	tsteq	r0, r2, lsl #6
    446c:	002b0501 	eoreq	r0, fp, r1, lsl #10
    4470:	00000205 	andeq	r0, r0, r5, lsl #4
    4474:	af030000 	svcge	0x00030000
    4478:	20060101 	andcs	r0, r6, r1, lsl #2
    447c:	30060205 	andcc	r0, r6, r5, lsl #4
    4480:	01060505 	tsteq	r6, r5, lsl #10
    4484:	31060205 	tstcc	r6, r5, lsl #4
    4488:	01060505 	tsteq	r6, r5, lsl #10
    448c:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    4490:	02052012 	andeq	r2, r5, #18
    4494:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4498:	03290502 			; <UNDEFINED> instruction: 0x03290502
    449c:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    44a0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    44a4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    44a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    44ac:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    44b0:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    44b4:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    44b8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    44bc:	aa030602 	bge	c5ccc <__ccfg+0xa5d24>
    44c0:	4b2f207d 	blmi	bcc6bc <__ccfg+0xbac714>
    44c4:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    44c8:	31020520 	tstcc	r2, r0, lsr #10
    44cc:	29050204 	stmdbcs	r5, {r2, r9}
    44d0:	0102c703 	tsteq	r2, r3, lsl #14
    44d4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    44d8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    44dc:	01040106 	tsteq	r4, r6, lsl #2
    44e0:	03060205 	movweq	r0, #25093	; 0x6205
    44e4:	302e7db4 	strhtcc	r7, [lr], -r4
    44e8:	13060105 	movwne	r0, #24837	; 0x6105
    44ec:	03060305 	movweq	r0, #25349	; 0x6305
    44f0:	0a052e79 	beq	14fedc <__ccfg+0x12ff34>
    44f4:	08050106 	stmdaeq	r5, {r1, r2, r8}
    44f8:	030a052e 	movweq	r0, #42286	; 0xa52e
    44fc:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    4500:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4504:	02050031 	andeq	r0, r5, #49	; 0x31
    4508:	00000000 	andeq	r0, r0, r0
    450c:	0101ca03 	tsteq	r1, r3, lsl #20
    4510:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4514:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4518:	3105220c 	tstcc	r5, ip, lsl #4
    451c:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    4520:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4524:	03053005 	movweq	r3, #20485	; 0x5005
    4528:	06053206 	streq	r3, [r5], -r6, lsl #4
    452c:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4530:	20060520 	andcs	r0, r6, r0, lsr #10
    4534:	30060305 	andcc	r0, r6, r5, lsl #6
    4538:	01060605 	tsteq	r6, r5, lsl #12
    453c:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4540:	30320603 	eorscc	r0, r2, r3, lsl #12
    4544:	0a030405 	beq	c5560 <__ccfg+0xa55b8>
    4548:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    454c:	20090501 	andcs	r0, r9, r1, lsl #10
    4550:	05201005 	streq	r1, [r0, #-5]!
    4554:	04052009 	streq	r2, [r5], #-9
    4558:	11052206 	tstne	r5, r6, lsl #4
    455c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4560:	201f0520 	andscs	r0, pc, r0, lsr #10
    4564:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4568:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    456c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4570:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4574:	0b053106 	bleq	150994 <__ccfg+0x1309ec>
    4578:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    457c:	052f2f06 	streq	r2, [pc, #-3846]!	; 367e <__exidx_end+0x9fa>
    4580:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4584:	20310301 	eorscs	r0, r1, r1, lsl #6
    4588:	03060405 	movweq	r0, #25605	; 0x6405
    458c:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    4590:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4594:	20250520 	eorcs	r0, r5, r0, lsr #10
    4598:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    459c:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    45a0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    45a4:	0b052804 	bleq	14e5bc <__ccfg+0x12e614>
    45a8:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    45ac:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    45b0:	03063805 	movweq	r3, #26629	; 0x6805
    45b4:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    45b8:	03040501 	movweq	r0, #17665	; 0x4501
    45bc:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    45c0:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    45c4:	0204207e 	andeq	r2, r4, #126	; 0x7e
    45c8:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    45cc:	3d050103 	stfccs	f0, [r5, #-12]
    45d0:	17050514 	smladne	r5, r4, r5, r0
    45d4:	01063805 	tsteq	r6, r5, lsl #16
    45d8:	02050104 	andeq	r0, r5, #4, 2
    45dc:	7cb20306 	ldcvc	3, cr0, [r2], #24
    45e0:	4b4b2f20 	blmi	12d0268 <__ccfg+0x12b02c0>
    45e4:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    45e8:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    45ec:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    45f0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45f4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    45f8:	06020501 	streq	r0, [r2], -r1, lsl #10
    45fc:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    4600:	03060b05 	movweq	r0, #27397	; 0x6b05
    4604:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    4608:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    460c:	01061305 	tsteq	r6, r5, lsl #6
    4610:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4614:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4618:	06050520 	streq	r0, [r5], -r0, lsr #10
    461c:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4620:	06050501 	streq	r0, [r5], -r1, lsl #10
    4624:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4628:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    462c:	03060405 	movweq	r0, #25605	; 0x6405
    4630:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4634:	03010609 	movweq	r0, #5641	; 0x1609
    4638:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    463c:	6b032106 	blvs	cca5c <__ccfg+0xacab4>
    4640:	0b035920 	bleq	daac8 <__ccfg+0xbab20>
    4644:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4648:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    464c:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4650:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4654:	ba030603 	blt	c5e68 <__ccfg+0xa5ec0>
    4658:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    465c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4660:	0100083b 	tsteq	r0, fp, lsr r8
    4664:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4668:	00000205 	andeq	r0, r0, r5, lsl #4
    466c:	a0030000 	andge	r0, r3, r0
    4670:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4674:	3b051414 	blcc	1496cc <__ccfg+0x129724>
    4678:	0c050e06 	stceq	14, cr0, [r5], {6}
    467c:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    4680:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4684:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4688:	06030532 			; <UNDEFINED> instruction: 0x06030532
    468c:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4690:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4694:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4698:	053f0603 	ldreq	r0, [pc, #-1539]!	; 409d <__exidx_end+0x1419>
    469c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    46a0:	052f0603 	streq	r0, [pc, #-1539]!	; 40a5 <__exidx_end+0x1421>
    46a4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    46a8:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    46ac:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    46b0:	2f300603 	svccs	0x00300603
    46b4:	01060905 	tsteq	r6, r5, lsl #18
    46b8:	30060305 	andcc	r0, r6, r5, lsl #6
    46bc:	01060c05 	tsteq	r6, r5, lsl #24
    46c0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    46c4:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    46c8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    46cc:	2f210604 	svccs	0x00210604
    46d0:	03060105 	movweq	r0, #24837	; 0x6105
    46d4:	03050122 	movweq	r0, #20770	; 0x5122
    46d8:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    46dc:	01061105 	tsteq	r6, r5, lsl #2
    46e0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    46e4:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    46e8:	304a0624 	subcc	r0, sl, r4, lsr #12
    46ec:	29050204 	stmdbcs	r5, {r2, r9}
    46f0:	0101c803 	tsteq	r1, r3, lsl #16
    46f4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    46f8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    46fc:	01040106 	tsteq	r4, r6, lsl #2
    4700:	b3030305 	movwlt	r0, #13061	; 0x3305
    4704:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    4708:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    470c:	01042001 	tsteq	r4, r1
    4710:	03060305 	movweq	r0, #25349	; 0x6305
    4714:	2f2e7eb3 	svccs	0x002e7eb3
    4718:	01061905 	tsteq	r6, r5, lsl #18
    471c:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    4720:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4724:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4728:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    472c:	2308052e 	movwcs	r0, #34094	; 0x852e
    4730:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4734:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4738:	03290502 			; <UNDEFINED> instruction: 0x03290502
    473c:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    4740:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4744:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4748:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    474c:	c1030602 	tstgt	r3, r2, lsl #12
    4750:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4754:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4758:	054b4006 	strbeq	r4, [fp, #-6]
    475c:	20730304 	rsbscs	r0, r3, r4, lsl #6
    4760:	01061305 	tsteq	r6, r5, lsl #6
    4764:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4768:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    476c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4770:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4774:	030b0501 	movweq	r0, #46337	; 0xb501
    4778:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    477c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4780:	02050012 	andeq	r0, r5, #18
    4784:	00000000 	andeq	r0, r0, r0
    4788:	0102da03 	tsteq	r2, r3, lsl #20
    478c:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    4790:	01010001 	tsteq	r1, r1
    4794:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4798:	00000002 	andeq	r0, r0, r2
    479c:	02df0300 	sbcseq	r0, pc, #0, 6
    47a0:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    47a4:	13060105 	movwne	r0, #24837	; 0x6105
    47a8:	01000202 	tsteq	r0, r2, lsl #4
    47ac:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    47b0:	02050029 	andeq	r0, r5, #41	; 0x29
    47b4:	00000000 	andeq	r0, r0, r0
    47b8:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    47bc:	01060505 	tsteq	r6, r5, lsl #10
    47c0:	21060305 	tstcs	r6, r5, lsl #6
    47c4:	01060705 	tsteq	r6, r5, lsl #14
    47c8:	30060205 	andcc	r0, r6, r5, lsl #4
    47cc:	01060505 	tsteq	r6, r5, lsl #10
    47d0:	21060305 	tstcs	r6, r5, lsl #6
    47d4:	01060805 	tsteq	r6, r5, lsl #16
    47d8:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    47dc:	13060105 	movwne	r0, #24837	; 0x6105
    47e0:	01000302 	tsteq	r0, r2, lsl #6
    47e4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    47e8:	02050017 	andeq	r0, r5, #23
    47ec:	00000000 	andeq	r0, r0, r0
    47f0:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    47f4:	17051402 	strne	r1, [r5, -r2, lsl #8]
    47f8:	02051006 	andeq	r1, r5, #6
    47fc:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    4800:	13060105 	movwne	r0, #24837	; 0x6105
    4804:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    4808:	01010002 	tsteq	r1, r2
    480c:	000001c1 	andeq	r0, r0, r1, asr #3
    4810:	01210003 			; <UNDEFINED> instruction: 0x01210003
    4814:	01020000 	mrseq	r0, (UNDEF: 2)
    4818:	000d0efb 	strdeq	r0, [sp], -fp
    481c:	01010101 	tsteq	r1, r1, lsl #2
    4820:	01000000 	mrseq	r0, (UNDEF: 0)
    4824:	2f010000 	svccs	0x00010000
    4828:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    482c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4830:	2f6e6974 	svccs	0x006e6974
    4834:	6b736544 	blvs	1cddd4c <__ccfg+0x1cbdda4>
    4838:	2f706f74 	svccs	0x00706f74
    483c:	4f534c4f 	svcmi	0x00534c4f
    4840:	2f54454e 	svccs	0x0054454e
    4844:	4f434950 	svcmi	0x00434950
    4848:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    484c:	2f534f63 	svccs	0x00534f63
    4850:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4854:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4858:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    485c:	73752f00 	cmnvc	r5, #0, 30
    4860:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4864:	63672f62 	cmnvs	r7, #392	; 0x188
    4868:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    486c:	6f6e2d6d 	svcvs	0x006e2d6d
    4870:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4874:	2f696261 	svccs	0x00696261
    4878:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    487c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4880:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4884:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4888:	2f656d6f 	svccs	0x00656d6f
    488c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4890:	442f6e69 	strtmi	r6, [pc], #-3689	; 4898 <__exidx_end+0x1c14>
    4894:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4898:	4f2f706f 	svcmi	0x002f706f
    489c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    48a0:	502f5445 	eorpl	r5, pc, r5, asr #8
    48a4:	534f4349 	movtpl	r4, #62281	; 0xf349
    48a8:	6369502f 	cmnvs	r9, #47	; 0x2f
    48ac:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    48b0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    48b4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    48b8:	2f656d6f 	svccs	0x00656d6f
    48bc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    48c0:	442f6e69 	strtmi	r6, [pc], #-3689	; 48c8 <__exidx_end+0x1c44>
    48c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    48c8:	4f2f706f 	svcmi	0x002f706f
    48cc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    48d0:	502f5445 	eorpl	r5, pc, r5, asr #8
    48d4:	534f4349 	movtpl	r4, #62281	; 0xf349
    48d8:	6369502f 	cmnvs	r9, #47	; 0x2f
    48dc:	0000534f 	andeq	r5, r0, pc, asr #6
    48e0:	5f726573 	svcpl	0x00726573
    48e4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    48e8:	00000100 	andeq	r0, r0, r0, lsl #2
    48ec:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    48f0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    48f4:	00000200 	andeq	r0, r0, r0, lsl #4
    48f8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    48fc:	0300682e 	movweq	r6, #2094	; 0x82e
    4900:	616d0000 	cmnvs	sp, r0
    4904:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4908:	00000300 	andeq	r0, r0, r0, lsl #6
    490c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4910:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4914:	0300682e 	movweq	r6, #2094	; 0x82e
    4918:	75620000 	strbvc	r0, [r2, #-0]!
    491c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4920:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4924:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4928:	73000003 	movwvc	r0, #3
    492c:	6f697379 	svcvs	0x00697379
    4930:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4934:	05000000 	streq	r0, [r0, #-0]
    4938:	0205002a 	andeq	r0, r5, #42	; 0x2a
    493c:	000015a4 	andeq	r1, r0, r4, lsr #11
    4940:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    4944:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    4948:	7a03062a 	bvc	c61f8 <__ccfg+0xa6250>
    494c:	05052001 	streq	r2, [r5, #-1]
    4950:	06020534 			; <UNDEFINED> instruction: 0x06020534
    4954:	06100532 			; <UNDEFINED> instruction: 0x06100532
    4958:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    495c:	21060305 	tstcs	r6, r5, lsl #6
    4960:	01060f05 	tsteq	r6, r5, lsl #30
    4964:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4968:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    496c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4970:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4974:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4978:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    497c:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4980:	054f0205 	strbeq	r0, [pc, #-517]	; 4783 <__exidx_end+0x1aff>
    4984:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4988:	052f0603 	streq	r0, [pc, #-1539]!	; 438d <__exidx_end+0x1709>
    498c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4990:	02052008 	andeq	r2, r5, #8
    4994:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    4998:	03050106 	movweq	r0, #20742	; 0x5106
    499c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    49a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    49a4:	3d593e06 	ldclcc	14, cr3, [r9, #-24]	; 0xffffffe8
    49a8:	01060c05 	tsteq	r6, r5, lsl #24
    49ac:	2f060205 	svccs	0x00060205
    49b0:	01060505 	tsteq	r6, r5, lsl #10
    49b4:	2f060305 	svccs	0x00060305
    49b8:	01060e05 	tsteq	r6, r5, lsl #28
    49bc:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
    49c0:	75030603 	strvc	r0, [r3, #-1539]	; 0xfffff9fd
    49c4:	060a052e 	streq	r0, [sl], -lr, lsr #10
    49c8:	4a6e0301 	bmi	1b855d4 <__ccfg+0x1b6562c>
    49cc:	01000702 	tsteq	r0, r2, lsl #14
    49d0:	00019e01 	andeq	r9, r1, r1, lsl #28
    49d4:	3d000300 	stccc	3, cr0, [r0, #-0]
    49d8:	02000001 	andeq	r0, r0, #1
    49dc:	0d0efb01 	vstreq	d15, [lr, #-4]
    49e0:	01010100 	mrseq	r0, (UNDEF: 17)
    49e4:	00000001 	andeq	r0, r0, r1
    49e8:	01000001 	tsteq	r0, r1
    49ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4938 <__exidx_end+0x1cb4>
    49f0:	616d2f65 	cmnvs	sp, r5, ror #30
    49f4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    49f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    49fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a00:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a04:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a08:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a0c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a10:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a14:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4a18:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4a1c:	61697265 	cmnvs	r9, r5, ror #4
    4a20:	752f006c 	strvc	r0, [pc, #-108]!	; 49bc <__exidx_end+0x1d38>
    4a24:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4860 <__exidx_end+0x1bdc>
    4a28:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4a2c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4a30:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4a34:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4a38:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4a3c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4a40:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4a44:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4a48:	2f006564 	svccs	0x00006564
    4a4c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a50:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a54:	2f6e6974 	svccs	0x006e6974
    4a58:	6b736544 	blvs	1cddf70 <__ccfg+0x1cbdfc8>
    4a5c:	2f706f74 	svccs	0x00706f74
    4a60:	4f534c4f 	svcmi	0x00534c4f
    4a64:	2f54454e 	svccs	0x0054454e
    4a68:	4f434950 	svcmi	0x00434950
    4a6c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a70:	2f534f63 	svccs	0x00534f63
    4a74:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4a78:	2f005858 	svccs	0x00005858
    4a7c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a80:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a84:	2f6e6974 	svccs	0x006e6974
    4a88:	6b736544 	blvs	1cddfa0 <__ccfg+0x1cbdff8>
    4a8c:	2f706f74 	svccs	0x00706f74
    4a90:	4f534c4f 	svcmi	0x00534c4f
    4a94:	2f54454e 	svccs	0x0054454e
    4a98:	4f434950 	svcmi	0x00434950
    4a9c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4aa0:	00534f63 	subseq	r4, r3, r3, ror #30
    4aa4:	72657300 	rsbvc	r7, r5, #0, 6
    4aa8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4aac:	00632e66 	rsbeq	r2, r3, r6, ror #28
    4ab0:	73000001 	movwvc	r0, #1
    4ab4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4ab8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4abc:	73000002 	movwvc	r0, #2
    4ac0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    4ac4:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4ac8:	61000002 	tstvs	r0, r2
    4acc:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4ad0:	00030068 	andeq	r0, r3, r8, rrx
    4ad4:	63616d00 	cmnvs	r1, #0, 26
    4ad8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4adc:	70000003 	andvc	r0, r0, r3
    4ae0:	5f736e69 	svcpl	0x00736e69
    4ae4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4ae8:	00030068 	andeq	r0, r3, r8, rrx
    4aec:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4af0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4af4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4af8:	0300682e 	movweq	r6, #2094	; 0x82e
    4afc:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4b00:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4b04:	00040068 	andeq	r0, r4, r8, rrx
    4b08:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4b0c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4b10:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4b14:	00000000 	andeq	r0, r0, r0
    4b18:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    4b1c:	00161c02 	andseq	r1, r6, r2, lsl #24
    4b20:	010b0300 	mrseq	r0, (UNDEF: 59)
    4b24:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4b28:	2c051413 	cfstrscs	mvf1, [r5], {19}
    4b2c:	017a0306 	cmneq	sl, r6, lsl #6
    4b30:	260e052e 	strcs	r0, [lr], -lr, lsr #10
    4b34:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    4b38:	3d300603 	ldccc	6, cr0, [r0, #-12]!
    4b3c:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    4b40:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
    4b44:	22060d05 	andcs	r0, r6, #320	; 0x140
    4b48:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    4b4c:	060d0522 	streq	r0, [sp], -r2, lsr #10
    4b50:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4b54:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4b58:	054e0205 	strbeq	r0, [lr, #-517]	; 0xfffffdfb
    4b5c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4b60:	03054a05 	movweq	r4, #23045	; 0x5a05
    4b64:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4b68:	01052402 	tsteq	r5, r2, lsl #8
    4b6c:	09021306 	stmdbeq	r2, {r1, r2, r8, r9, ip}
    4b70:	af010100 	svcge	0x00010100
    4b74:	03000001 	movweq	r0, #1
    4b78:	00013c00 	andeq	r3, r1, r0, lsl #24
    4b7c:	fb010200 	blx	45386 <__ccfg+0x253de>
    4b80:	01000d0e 	tsteq	r0, lr, lsl #26
    4b84:	00010101 	andeq	r0, r1, r1, lsl #2
    4b88:	00010000 	andeq	r0, r1, r0
    4b8c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4b90:	2f656d6f 	svccs	0x00656d6f
    4b94:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4b98:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ba0 <__exidx_end+0x1f1c>
    4b9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ba0:	4f2f706f 	svcmi	0x002f706f
    4ba4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4ba8:	502f5445 	eorpl	r5, pc, r5, asr #8
    4bac:	534f4349 	movtpl	r4, #62281	; 0xf349
    4bb0:	6369502f 	cmnvs	r9, #47	; 0x2f
    4bb4:	502f534f 	eorpl	r5, pc, pc, asr #6
    4bb8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4bbc:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4bc0:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4bc4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4bc8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4bcc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4bd0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4bd4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4bd8:	61652d65 	cmnvs	r5, r5, ror #26
    4bdc:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4be0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4be4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4be8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4bec:	6f682f00 	svcvs	0x00682f00
    4bf0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a44 <__exidx_end+0x1dc0>
    4bf4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4bf8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4bfc:	6f746b73 	svcvs	0x00746b73
    4c00:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4c04:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4c08:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4c0c:	2f534f43 	svccs	0x00534f43
    4c10:	4f636950 	svcmi	0x00636950
    4c14:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4c18:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4c1c:	6f682f00 	svcvs	0x00682f00
    4c20:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a74 <__exidx_end+0x1df0>
    4c24:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4c28:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4c2c:	6f746b73 	svcvs	0x00746b73
    4c30:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4c34:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4c38:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4c3c:	2f534f43 	svccs	0x00534f43
    4c40:	4f636950 	svcmi	0x00636950
    4c44:	73000053 	movwvc	r0, #83	; 0x53
    4c48:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4c4c:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    4c50:	00000100 	andeq	r0, r0, r0, lsl #2
    4c54:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4c58:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4c5c:	00000200 	andeq	r0, r0, r0, lsl #4
    4c60:	61647473 	smcvs	18243	; 0x4743
    4c64:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4c68:	00000200 	andeq	r0, r0, r0, lsl #4
    4c6c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4c70:	0300682e 	movweq	r6, #2094	; 0x82e
    4c74:	616d0000 	cmnvs	sp, r0
    4c78:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4c7c:	00000300 	andeq	r0, r0, r0, lsl #6
    4c80:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4c84:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4c88:	0300682e 	movweq	r6, #2094	; 0x82e
    4c8c:	75620000 	strbvc	r0, [r2, #-0]!
    4c90:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4c94:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c98:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c9c:	73000003 	movwvc	r0, #3
    4ca0:	6f697379 	svcvs	0x00697379
    4ca4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4ca8:	623c0000 	eorsvs	r0, ip, #0
    4cac:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4cb0:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	002d0500 	eoreq	r0, sp, r0, lsl #10
    4cbc:	16700205 	ldrbtne	r0, [r0], -r5, lsl #4
    4cc0:	0d030000 	stceq	0, cr0, [r3, #-0]
    4cc4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    4cc8:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    4ccc:	01780306 	cmneq	r8, r6, lsl #6
    4cd0:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    4cd4:	23060205 	movwcs	r0, #25093	; 0x6205
    4cd8:	01061005 	tsteq	r6, r5
    4cdc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ce0:	052f0603 	streq	r0, [pc, #-1539]!	; 46e5 <__exidx_end+0x1a61>
    4ce4:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4ce8:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4cec:	0b052106 	bleq	14d10c <__ccfg+0x12d164>
    4cf0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4cf4:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4cf8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4cfc:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4d00:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    4d04:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    4d08:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4d0c:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    4d10:	01060c05 	tsteq	r6, r5, lsl #24
    4d14:	30060205 	andcc	r0, r6, r5, lsl #4
    4d18:	13060105 	movwne	r0, #24837	; 0x6105
    4d1c:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    4d20:	00060266 	andeq	r0, r6, r6, ror #4
    4d24:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    4d28:	00030000 	andeq	r0, r3, r0
    4d2c:	00000126 	andeq	r0, r0, r6, lsr #2
    4d30:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d34:	0101000d 	tsteq	r1, sp
    4d38:	00000101 	andeq	r0, r0, r1, lsl #2
    4d3c:	00000100 	andeq	r0, r0, r0, lsl #2
    4d40:	6f682f01 	svcvs	0x00682f01
    4d44:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b98 <__exidx_end+0x1f14>
    4d48:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d4c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d50:	6f746b73 	svcvs	0x00746b73
    4d54:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d58:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d5c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d60:	2f534f43 	svccs	0x00534f43
    4d64:	4f636950 	svcmi	0x00636950
    4d68:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4d6c:	2f736269 	svccs	0x00736269
    4d70:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4d74:	2f006c61 	svccs	0x00006c61
    4d78:	2f727375 	svccs	0x00727375
    4d7c:	2f62696c 	svccs	0x0062696c
    4d80:	2f636367 	svccs	0x00636367
    4d84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d88:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d8c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d90:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4d94:	2f312e32 	svccs	0x00312e32
    4d98:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d9c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4da0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4cec <__exidx_end+0x2068>
    4da4:	616d2f65 	cmnvs	sp, r5, ror #30
    4da8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4dac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4db0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4db4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4db8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4dbc:	4349502f 	movtmi	r5, #36911	; 0x902f
    4dc0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4dc4:	534f6369 	movtpl	r6, #62313	; 0xf369
    4dc8:	3143432f 	cmpcc	r3, pc, lsr #6
    4dcc:	00585833 	subseq	r5, r8, r3, lsr r8
    4dd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4d1c <__exidx_end+0x2098>
    4dd4:	616d2f65 	cmnvs	sp, r5, ror #30
    4dd8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4ddc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4de0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4de4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4de8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4dec:	4349502f 	movtmi	r5, #36911	; 0x902f
    4df0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4df4:	534f6369 	movtpl	r6, #62313	; 0xf369
    4df8:	5f5f0000 	svcpl	0x005f0000
    4dfc:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    4e00:	61697265 	cmnvs	r9, r5, ror #4
    4e04:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4e08:	73000001 	movwvc	r0, #1
    4e0c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4e10:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4e14:	61000002 	tstvs	r0, r2
    4e18:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4e1c:	00030068 	andeq	r0, r3, r8, rrx
    4e20:	63616d00 	cmnvs	r1, #0, 26
    4e24:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4e28:	70000003 	andvc	r0, r0, r3
    4e2c:	5f736e69 	svcpl	0x00736e69
    4e30:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4e34:	00030068 	andeq	r0, r3, r8, rrx
    4e38:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4e3c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4e40:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4e44:	0300682e 	movweq	r6, #2094	; 0x82e
    4e48:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4e4c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4e50:	00040068 	andeq	r0, r4, r8, rrx
    4e54:	01050000 	mrseq	r0, (UNDEF: 5)
    4e58:	d0020500 	andle	r0, r2, r0, lsl #10
    4e5c:	03000016 	movweq	r0, #22
    4e60:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    4e64:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    4e68:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    4e6c:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    4e70:	01151313 	tsteq	r5, r3, lsl r3
    4e74:	06051301 	streq	r1, [r5], -r1, lsl #6
    4e78:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4e7c:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    4e80:	03050106 	movweq	r0, #20742	; 0x5106
    4e84:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4e88:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4e8c:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    4e90:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    4e94:	01060a05 	tsteq	r6, r5, lsl #20
    4e98:	83060205 	movwhi	r0, #25093	; 0x6205
    4e9c:	01060605 	tsteq	r6, r5, lsl #12
    4ea0:	1f211f21 	svcne	0x00211f21
    4ea4:	21060205 	tstcs	r6, r5, lsl #4
    4ea8:	01060605 	tsteq	r6, r5, lsl #12
    4eac:	21060205 	tstcs	r6, r5, lsl #4
    4eb0:	01060505 	tsteq	r6, r5, lsl #10
    4eb4:	30060305 	andcc	r0, r6, r5, lsl #6
    4eb8:	4a74033d 	bmi	1d05bb4 <__ccfg+0x1ce5c0c>
    4ebc:	01060d05 	tsteq	r6, r5, lsl #26
    4ec0:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    4ec4:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    4ec8:	4b010100 	blmi	452d0 <__ccfg+0x25328>
    4ecc:	03000002 	movweq	r0, #2
    4ed0:	00012500 	andeq	r2, r1, r0, lsl #10
    4ed4:	fb010200 	blx	456de <__ccfg+0x25736>
    4ed8:	01000d0e 	tsteq	r0, lr, lsl #26
    4edc:	00010101 	andeq	r0, r1, r1, lsl #2
    4ee0:	00010000 	andeq	r0, r1, r0
    4ee4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4ee8:	2f656d6f 	svccs	0x00656d6f
    4eec:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4ef0:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ef8 <__exidx_end+0x2274>
    4ef4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ef8:	4f2f706f 	svcmi	0x002f706f
    4efc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4f00:	502f5445 	eorpl	r5, pc, r5, asr #8
    4f04:	534f4349 	movtpl	r4, #62281	; 0xf349
    4f08:	6369502f 	cmnvs	r9, #47	; 0x2f
    4f0c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4f10:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4f14:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4f18:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4f1c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4f20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4f24:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4f28:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4f2c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4f30:	61652d65 	cmnvs	r5, r5, ror #26
    4f34:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4f38:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4f3c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4f40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4f44:	6f682f00 	svcvs	0x00682f00
    4f48:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4d9c <__exidx_end+0x2118>
    4f4c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f50:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f54:	6f746b73 	svcvs	0x00746b73
    4f58:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f5c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f60:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f64:	2f534f43 	svccs	0x00534f43
    4f68:	4f636950 	svcmi	0x00636950
    4f6c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4f70:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4f74:	6f682f00 	svcvs	0x00682f00
    4f78:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4dcc <__exidx_end+0x2148>
    4f7c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f80:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f84:	6f746b73 	svcvs	0x00746b73
    4f88:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f8c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f90:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f94:	2f534f43 	svccs	0x00534f43
    4f98:	4f636950 	svcmi	0x00636950
    4f9c:	5f000053 	svcpl	0x00000053
    4fa0:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    4fa4:	61697265 	cmnvs	r9, r5, ror #4
    4fa8:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4fac:	73000001 	movwvc	r0, #1
    4fb0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4fb4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4fb8:	61000002 	tstvs	r0, r2
    4fbc:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4fc0:	00030068 	andeq	r0, r3, r8, rrx
    4fc4:	63616d00 	cmnvs	r1, #0, 26
    4fc8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4fcc:	70000003 	andvc	r0, r0, r3
    4fd0:	5f736e69 	svcpl	0x00736e69
    4fd4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4fd8:	00030068 	andeq	r0, r3, r8, rrx
    4fdc:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4fe0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4fe4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4fe8:	0300682e 	movweq	r6, #2094	; 0x82e
    4fec:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4ff0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4ff4:	00040068 	andeq	r0, r4, r8, rrx
    4ff8:	01050000 	mrseq	r0, (UNDEF: 5)
    4ffc:	40020500 	andmi	r0, r2, r0, lsl #10
    5000:	03000017 	movweq	r0, #23
    5004:	06010122 	streq	r0, [r1], -r2, lsr #2
    5008:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    500c:	13136b02 	tstne	r3, #2048	; 0x800
    5010:	06100516 			; <UNDEFINED> instruction: 0x06100516
    5014:	20050501 	andcs	r0, r5, r1, lsl #10
    5018:	30060305 	andcc	r0, r6, r5, lsl #6
    501c:	053f0205 	ldreq	r0, [pc, #-517]!	; 4e1f <__exidx_end+0x219b>
    5020:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    5024:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    5028:	200b0520 	andcs	r0, fp, r0, lsr #10
    502c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5030:	2f240603 	svccs	0x00240603
    5034:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    5038:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    503c:	2f061f02 	svccs	0x00061f02
    5040:	01060605 	tsteq	r6, r5, lsl #12
    5044:	30060205 	andcc	r0, r6, r5, lsl #4
    5048:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    504c:	01060505 	tsteq	r6, r5, lsl #10
    5050:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    5054:	01060605 	tsteq	r6, r5, lsl #12
    5058:	2f060405 	svccs	0x00060405
    505c:	01060705 	tsteq	r6, r5, lsl #14
    5060:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    5064:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    5068:	03052106 	movweq	r2, #20742	; 0x5106
    506c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    5070:	20060501 	andcs	r0, r6, r1, lsl #10
    5074:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5078:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    507c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5080:	13052e05 	movwne	r2, #24069	; 0x5e05
    5084:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5088:	0608052f 	streq	r0, [r8], -pc, lsr #10
    508c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5090:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5094:	06030501 	streq	r0, [r3], -r1, lsl #10
    5098:	3102052f 	tstcc	r2, pc, lsr #10
    509c:	01060605 	tsteq	r6, r5, lsl #12
    50a0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    50a4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    50a8:	21010606 	tstcs	r1, r6, lsl #12
    50ac:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    50b0:	0606052f 	streq	r0, [r6], -pc, lsr #10
    50b4:	06020501 	streq	r0, [r2], -r1, lsl #10
    50b8:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    50bc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50c0:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    50c4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    50c8:	07053c11 	smladeq	r5, r1, ip, r3
    50cc:	06020521 	streq	r0, [r2], -r1, lsr #10
    50d0:	0605054b 	streq	r0, [r5], -fp, asr #10
    50d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    50d8:	060a0524 	streq	r0, [sl], -r4, lsr #10
    50dc:	9f060501 	svcls	0x00060501
    50e0:	051f0a05 	ldreq	r0, [pc, #-2565]	; 46e3 <__exidx_end+0x1a5f>
    50e4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    50e8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50ec:	052f0602 	streq	r0, [pc, #-1538]!	; 4af2 <__exidx_end+0x1e6e>
    50f0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    50f4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    50f8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    50fc:	052f0603 	streq	r0, [pc, #-1539]!	; 4b01 <__exidx_end+0x1e7d>
    5100:	06053002 	streq	r3, [r5], -r2
    5104:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5108:	01053d06 	tsteq	r5, r6, lsl #26
    510c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    5110:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    5114:	000d0230 	andeq	r0, sp, r0, lsr r2
    5118:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    511c:	00030000 	andeq	r0, r3, r0
    5120:	0000013a 	andeq	r0, r0, sl, lsr r1
    5124:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5128:	0101000d 	tsteq	r1, sp
    512c:	00000101 	andeq	r0, r0, r1, lsl #2
    5130:	00000100 	andeq	r0, r0, r0, lsl #2
    5134:	6f682f01 	svcvs	0x00682f01
    5138:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4f8c <__exidx_end+0x2308>
    513c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5140:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5144:	6f746b73 	svcvs	0x00746b73
    5148:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    514c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5150:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5154:	2f534f43 	svccs	0x00534f43
    5158:	4f636950 	svcmi	0x00636950
    515c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5160:	2f736269 	svccs	0x00736269
    5164:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5168:	2f006c61 	svccs	0x00006c61
    516c:	2f727375 	svccs	0x00727375
    5170:	2f62696c 	svccs	0x0062696c
    5174:	2f636367 	svccs	0x00636367
    5178:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    517c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5180:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5184:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5188:	2f312e32 	svccs	0x00312e32
    518c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5190:	00656475 	rsbeq	r6, r5, r5, ror r4
    5194:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50e0 <__exidx_end+0x245c>
    5198:	616d2f65 	cmnvs	sp, r5, ror #30
    519c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    51a0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51a4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51a8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51ac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51b0:	4349502f 	movtmi	r5, #36911	; 0x902f
    51b4:	502f534f 	eorpl	r5, pc, pc, asr #6
    51b8:	534f6369 	movtpl	r6, #62313	; 0xf369
    51bc:	3143432f 	cmpcc	r3, pc, lsr #6
    51c0:	00585833 	subseq	r5, r8, r3, lsr r8
    51c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5110 <__exidx_end+0x248c>
    51c8:	616d2f65 	cmnvs	sp, r5, ror #30
    51cc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    51d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51d8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51dc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51e0:	4349502f 	movtmi	r5, #36911	; 0x902f
    51e4:	502f534f 	eorpl	r5, pc, pc, asr #6
    51e8:	534f6369 	movtpl	r6, #62313	; 0xf369
    51ec:	66760000 	ldrbtvs	r0, [r6], -r0
    51f0:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    51f4:	00010063 	andeq	r0, r1, r3, rrx
    51f8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51fc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5200:	00020068 	andeq	r0, r2, r8, rrx
    5204:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5208:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    520c:	00020068 	andeq	r0, r2, r8, rrx
    5210:	63726100 	cmnvs	r2, #0, 2
    5214:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5218:	6d000003 	stcvs	0, cr0, [r0, #-12]
    521c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5220:	00030068 	andeq	r0, r3, r8, rrx
    5224:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5228:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    522c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5230:	62000003 	andvs	r0, r0, #3
    5234:	6f747475 	svcvs	0x00747475
    5238:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    523c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5240:	00000300 	andeq	r0, r0, r0, lsl #6
    5244:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5248:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    524c:	3c000004 	stccc	0, cr0, [r0], {4}
    5250:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5254:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5258:	0000003e 	andeq	r0, r0, lr, lsr r0
    525c:	15050000 	strne	r0, [r5, #-0]
    5260:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    5264:	03000018 	movweq	r0, #24
    5268:	0305010c 	movweq	r0, #20748	; 0x510c
    526c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    5270:	580b0501 	stmdapl	fp, {r0, r8, sl}
    5274:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5278:	01060e05 	tsteq	r6, r5, lsl #28
    527c:	30060305 	andcc	r0, r6, r5, lsl #6
    5280:	01060405 	tsteq	r6, r5, lsl #8
    5284:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    5288:	01010001 	tsteq	r1, r1
    528c:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    5290:	00187c02 	andseq	r7, r8, r2, lsl #24
    5294:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    5298:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    529c:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    52a0:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    52a4:	03070520 	movweq	r0, #29984	; 0x7520
    52a8:	06052071 			; <UNDEFINED> instruction: 0x06052071
    52ac:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    52b0:	133e0602 	teqne	lr, #2097152	; 0x200000
    52b4:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    52b8:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    52bc:	06040501 	streq	r0, [r4], -r1, lsl #10
    52c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    52c4:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    52c8:	01060505 	tsteq	r6, r5, lsl #10
    52cc:	30060305 	andcc	r0, r6, r5, lsl #6
    52d0:	01060605 	tsteq	r6, r5, lsl #12
    52d4:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    52d8:	01060b05 	tsteq	r6, r5, lsl #22
    52dc:	052e1005 	streq	r1, [lr, #-5]!
    52e0:	07052105 	streq	r2, [r5, -r5, lsl #2]
    52e4:	0605052d 	streq	r0, [r5], -sp, lsr #10
    52e8:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    52ec:	0100da03 	tsteq	r0, r3, lsl #20
    52f0:	06070559 			; <UNDEFINED> instruction: 0x06070559
    52f4:	06040501 	streq	r0, [r4], -r1, lsl #10
    52f8:	4a7fa703 	bmi	1feef0c <__ccfg+0x1fcef64>
    52fc:	03060505 	movweq	r0, #25861	; 0x6505
    5300:	062000c2 	strteq	r0, [r0], -r2, asr #1
    5304:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    5308:	06030510 			; <UNDEFINED> instruction: 0x06030510
    530c:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    5310:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5314:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    5318:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    531c:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    5320:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    5324:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    5328:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    532c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5330:	3c090306 	stccc	3, cr0, [r9], {6}
    5334:	01060c05 	tsteq	r6, r5, lsl #24
    5338:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    533c:	7fa90304 	svcvc	0x00a90304
    5340:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    5344:	010f0568 	tsteq	pc, r8, ror #10
    5348:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    534c:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    5350:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    5354:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    5358:	06051406 	streq	r1, [r5], -r6, lsl #8
    535c:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    5360:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    5364:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    5368:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    536c:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    5370:	16053906 	strne	r3, [r5], -r6, lsl #18
    5374:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5378:	06052e06 	streq	r2, [r5], -r6, lsl #28
    537c:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    5380:	20090306 	andcs	r0, r9, r6, lsl #6
    5384:	06120513 			; <UNDEFINED> instruction: 0x06120513
    5388:	2f080501 	svccs	0x00080501
    538c:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    5390:	052f0605 	streq	r0, [pc, #-1541]!	; 4d93 <__exidx_end+0x210f>
    5394:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5398:	06052012 			; <UNDEFINED> instruction: 0x06052012
    539c:	05593006 	ldrbeq	r3, [r9, #-6]
    53a0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    53a4:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    53a8:	6f03060c 	svcvs	0x0003060c
    53ac:	03050501 	movweq	r0, #21761	; 0x5501
    53b0:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    53b4:	3c062e01 	stccc	14, cr2, [r6], {1}
    53b8:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    53bc:	4a202082 	bmi	80d5cc <__ccfg+0x7ed624>
    53c0:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    53c4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    53c8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    53cc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    53d0:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    53d4:	05133006 	ldreq	r3, [r3, #-6]
    53d8:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    53dc:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    53e0:	0606052d 	streq	r0, [r6], -sp, lsr #10
    53e4:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    53e8:	13050106 	movwne	r0, #20742	; 0x5106
    53ec:	06070520 	streq	r0, [r7], -r0, lsr #10
    53f0:	0b05593f 	bleq	15b8f4 <__ccfg+0x13b94c>
    53f4:	06050106 	streq	r0, [r5], -r6, lsl #2
    53f8:	05053006 	streq	r3, [r5, #-6]
    53fc:	016f0306 	cmneq	pc, r6, lsl #6
    5400:	11030605 	tstne	r3, r5, lsl #12
    5404:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    5408:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    540c:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    5410:	20582e01 	subscs	r2, r8, r1, lsl #28
    5414:	210c052e 	tstcs	ip, lr, lsr #10
    5418:	01060f05 	tsteq	r6, r5, lsl #30
    541c:	2f060605 	svccs	0x00060605
    5420:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    5424:	0a051406 	beq	14a444 <__ccfg+0x12a49c>
    5428:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    542c:	21060605 	tstcs	r6, r5, lsl #12
    5430:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    5434:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    5438:	07052e15 	smladeq	r5, r5, lr, r2
    543c:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    5440:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5444:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    5448:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    544c:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    5450:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    5454:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    5458:	134f0505 	movtne	r0, #62725	; 0xf505
    545c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    5460:	2f050511 	svccs	0x00050511
    5464:	13134f06 	tstne	r3, #6, 30
    5468:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    546c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5470:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    5474:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    5478:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    547c:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    5480:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5484:	02050035 	andeq	r0, r5, #53	; 0x35
    5488:	00001aac 	andeq	r1, r0, ip, lsr #21
    548c:	01019003 	tsteq	r1, r3
    5490:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5494:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    5498:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    549c:	30060305 	andcc	r0, r6, r5, lsl #6
    54a0:	06010567 	streq	r0, [r1], -r7, ror #10
    54a4:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    54a8:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    54ac:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    54b0:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    54b4:	3f060205 	svccc	0x00060205
    54b8:	01061505 	tsteq	r6, r5, lsl #10
    54bc:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    54c0:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    54c4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    54c8:	0b055805 	bleq	15b4e4 <__ccfg+0x13b53c>
    54cc:	20050520 	andcs	r0, r5, r0, lsr #10
    54d0:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    54d4:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    54d8:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    54dc:	03000002 	movweq	r0, #2
    54e0:	00013a00 	andeq	r3, r1, r0, lsl #20
    54e4:	fb010200 	blx	45cee <__ccfg+0x25d46>
    54e8:	01000d0e 	tsteq	r0, lr, lsl #26
    54ec:	00010101 	andeq	r0, r1, r1, lsl #2
    54f0:	00010000 	andeq	r0, r1, r0
    54f4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    54f8:	2f656d6f 	svccs	0x00656d6f
    54fc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5500:	442f6e69 	strtmi	r6, [pc], #-3689	; 5508 <__exidx_end+0x2884>
    5504:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5508:	4f2f706f 	svcmi	0x002f706f
    550c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5510:	502f5445 	eorpl	r5, pc, r5, asr #8
    5514:	534f4349 	movtpl	r4, #62281	; 0xf349
    5518:	6369502f 	cmnvs	r9, #47	; 0x2f
    551c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5520:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5524:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    5528:	006c6169 	rsbeq	r6, ip, r9, ror #2
    552c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5530:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5534:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5538:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    553c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5540:	61652d65 	cmnvs	r5, r5, ror #26
    5544:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5548:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    554c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5550:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5554:	6f682f00 	svcvs	0x00682f00
    5558:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 53ac <__exidx_end+0x2728>
    555c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5560:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5564:	6f746b73 	svcvs	0x00746b73
    5568:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    556c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5570:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5574:	2f534f43 	svccs	0x00534f43
    5578:	4f636950 	svcmi	0x00636950
    557c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5580:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5584:	6f682f00 	svcvs	0x00682f00
    5588:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 53dc <__exidx_end+0x2758>
    558c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5590:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5594:	6f746b73 	svcvs	0x00746b73
    5598:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    559c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    55a0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    55a4:	2f534f43 	svccs	0x00534f43
    55a8:	4f636950 	svcmi	0x00636950
    55ac:	76000053 			; <UNDEFINED> instruction: 0x76000053
    55b0:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    55b4:	0100632e 	tsteq	r0, lr, lsr #6
    55b8:	74730000 	ldrbtvc	r0, [r3], #-0
    55bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    55c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55c4:	74730000 	ldrbtvc	r0, [r3], #-0
    55c8:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    55cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55d0:	72610000 	rsbvc	r0, r1, #0
    55d4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    55d8:	00000300 	andeq	r0, r0, r0, lsl #6
    55dc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    55e0:	0300682e 	movweq	r6, #2094	; 0x82e
    55e4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    55e8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55ec:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55f0:	00000300 	andeq	r0, r0, r0, lsl #6
    55f4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    55f8:	5f736e6f 	svcpl	0x00736e6f
    55fc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5600:	00030068 	andeq	r0, r3, r8, rrx
    5604:	73797300 	cmnvc	r9, #0, 6
    5608:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    560c:	00000400 	andeq	r0, r0, r0, lsl #8
    5610:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5614:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    5618:	00003e6e 	andeq	r3, r0, lr, ror #28
    561c:	05000000 	streq	r0, [r0, #-0]
    5620:	0205003a 	andeq	r0, r5, #58	; 0x3a
    5624:	00001afc 	strdeq	r1, [r0], -ip
    5628:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    562c:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    5630:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5634:	2044033a 	subcs	r0, r4, sl, lsr r3
    5638:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    563c:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    5640:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    5644:	200e0316 	andcs	r0, lr, r6, lsl r3
    5648:	11030b05 	tstne	r3, r5, lsl #22
    564c:	0608052e 	streq	r0, [r8], -lr, lsr #10
    5650:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    5654:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5658:	03052e08 	movweq	r2, #24072	; 0x5e08
    565c:	06052106 	streq	r2, [r5], -r6, lsl #2
    5660:	03050106 	movweq	r0, #20742	; 0x5106
    5664:	0b053006 	bleq	151684 <__ccfg+0x1316dc>
    5668:	0f050106 	svceq	0x00050106
    566c:	20030520 	andcs	r0, r3, r0, lsr #10
    5670:	2e030105 	adfcss	f0, f3, f5
    5674:	030305ac 	movweq	r0, #13740	; 0x35ac
    5678:	0b053c52 	bleq	1547c8 <__ccfg+0x134820>
    567c:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    5680:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    5684:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5688:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    568c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5690:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5694:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    5698:	06051e08 	streq	r1, [r5], -r8, lsl #28
    569c:	0604052d 	streq	r0, [r4], -sp, lsr #10
    56a0:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    56a4:	0b050106 	bleq	145ac4 <__ccfg+0x125b1c>
    56a8:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    56ac:	0c050106 	stfeqs	f0, [r5], {6}
    56b0:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    56b4:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    56b8:	0a054e0b 	beq	158eec <__ccfg+0x138f44>
    56bc:	0b053c06 	bleq	1546dc <__ccfg+0x134734>
    56c0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56c4:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    56c8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56cc:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    56d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56d4:	11052f06 	tstne	r5, r6, lsl #30
    56d8:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    56dc:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    56e0:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    56e4:	013c6606 	teqeq	ip, r6, lsl #12
    56e8:	06010620 	streq	r0, [r1], -r0, lsr #12
    56ec:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    56f0:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    56f4:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    56f8:	01062e01 	tsteq	r6, r1, lsl #28
    56fc:	90822e06 	addls	r2, r2, r6, lsl #28
    5700:	90064a21 	andls	r4, r6, r1, lsr #20
    5704:	013c5806 	teqeq	ip, r6, lsl #16
    5708:	2e06012e 	adfcssp	f0, f6, #0.5
    570c:	82063c06 	andhi	r3, r6, #1536	; 0x600
    5710:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    5714:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    5718:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    571c:	20100501 	andscs	r0, r0, r1, lsl #10
    5720:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    5724:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    5728:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    572c:	013c3c06 	teqeq	ip, r6, lsl #24
    5730:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5734:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    5738:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    573c:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    5740:	3c062e06 	stccc	14, cr2, [r6], {6}
    5744:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    5748:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    574c:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    5750:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    5754:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    5758:	2e060106 	adfcss	f0, f6, f6
    575c:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    5760:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    5764:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5768:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    576c:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    5770:	06051306 	streq	r1, [r5], -r6, lsl #6
    5774:	0604052d 	streq	r0, [r4], -sp, lsr #10
    5778:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    577c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5780:	0b052106 	bleq	14dba0 <__ccfg+0x12dbf8>
    5784:	07052406 	streq	r2, [r5, -r6, lsl #8]
    5788:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    578c:	01060e05 	tsteq	r6, r5, lsl #28
    5790:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    5794:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    5798:	0a031105 	beq	c9bb4 <__ccfg+0xa9c0c>
    579c:	5116054a 	tstpl	r6, sl, asr #10
    57a0:	01000502 	tsteq	r0, r2, lsl #10
    57a4:	00016701 	andeq	r6, r1, r1, lsl #14
    57a8:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    57ac:	02000001 	andeq	r0, r0, #1
    57b0:	0d0efb01 	vstreq	d15, [lr, #-4]
    57b4:	01010100 	mrseq	r0, (UNDEF: 17)
    57b8:	00000001 	andeq	r0, r0, r1
    57bc:	01000001 	tsteq	r0, r1
    57c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    57c4:	2f2e2e2f 	svccs	0x002e2e2f
    57c8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 57d0 <__exidx_end+0x2b4c>
    57cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    57d0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    57d4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    57d8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    57dc:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    57e0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    57e4:	31303030 	teqcc	r0, r0, lsr r0
    57e8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    57ec:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    57f0:	61746562 	cmnvs	r4, r2, ror #10
    57f4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    57f8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    57fc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5634 <__exidx_end+0x29b0>
    5800:	6f635c73 	svcvs	0x00635c73
    5804:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5808:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    580c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5810:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5814:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5818:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    581c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5820:	3130322d 	teqcc	r0, sp, lsr #4
    5824:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5828:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    582c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5830:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5834:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5838:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    583c:	616d5c65 	cmnvs	sp, r5, ror #24
    5840:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5844:	3a630065 	bcc	18c59e0 <__ccfg+0x18a5a38>
    5848:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    584c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5850:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5854:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5858:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    585c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5860:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5864:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5868:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    586c:	6f6f745c 	svcvs	0x006f745c
    5870:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5874:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5878:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    587c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5880:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5884:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5888:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    588c:	5f342d69 	svcpl	0x00342d69
    5890:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5894:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5898:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    589c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    58a0:	61652d65 	cmnvs	r5, r5, ror #26
    58a4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    58a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    58ac:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    58b0:	00007379 	andeq	r7, r0, r9, ror r3
    58b4:	5f6e6f61 	svcpl	0x006e6f61
    58b8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    58bc:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    58c0:	00000100 	andeq	r0, r0, r0, lsl #2
    58c4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    58c8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    58cc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    58d0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    58d4:	00000200 	andeq	r0, r0, r0, lsl #4
    58d8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    58dc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    58e0:	00030068 	andeq	r0, r3, r8, rrx
    58e4:	6e6f6100 	powvse	f6, f7, f0
    58e8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    58ec:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    58f0:	00010068 	andeq	r0, r1, r8, rrx
    58f4:	05000000 	streq	r0, [r0, #-0]
    58f8:	001e8c02 	andseq	r8, lr, r2, lsl #24
    58fc:	013c0300 	teqeq	ip, r0, lsl #6
    5900:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    5904:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    5908:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    590c:	01010009 	tsteq	r1, r9
    5910:	000001a9 	andeq	r0, r0, r9, lsr #3
    5914:	01410002 	cmpeq	r1, r2
    5918:	01020000 	mrseq	r0, (UNDEF: 2)
    591c:	000d0efb 	strdeq	r0, [sp], -fp
    5920:	01010101 	tsteq	r1, r1, lsl #2
    5924:	01000000 	mrseq	r0, (UNDEF: 0)
    5928:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    592c:	2f2e2e2f 	svccs	0x002e2e2f
    5930:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5934:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    5938:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    593c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5940:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5944:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5948:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    594c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5950:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5954:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5958:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    595c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5960:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5964:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5968:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    596c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5804 <__exidx_end+0x2b80>
    5970:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5974:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5978:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    597c:	6f6e2d6d 	svcvs	0x006e2d6d
    5980:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5984:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5988:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    598c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5990:	615c3371 	cmpvs	ip, r1, ror r3
    5994:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5998:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    599c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    59a0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    59a4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    59a8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    59ac:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    59b0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    59b4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    59b8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    59bc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    59c0:	31303030 	teqcc	r0, r0, lsr r0
    59c4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    59c8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    59cc:	61746562 	cmnvs	r4, r2, ror #10
    59d0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    59d4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    59d8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5810 <__exidx_end+0x2b8c>
    59dc:	6f635c73 	svcvs	0x00635c73
    59e0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    59e4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    59e8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    59ec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    59f0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    59f4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    59f8:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    59fc:	3130322d 	teqcc	r0, sp, lsr #4
    5a00:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5a04:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5a08:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5a0c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5a10:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5a14:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5a18:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    5a1c:	61000073 	tstvs	r0, r3, ror r0
    5a20:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    5a24:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    5a28:	00000100 	andeq	r0, r0, r0, lsl #2
    5a2c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5a30:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5a34:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5a38:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5a3c:	00000200 	andeq	r0, r0, r0, lsl #4
    5a40:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5a44:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5a48:	00030068 	andeq	r0, r3, r8, rrx
    5a4c:	6e6f6100 	powvse	f6, f7, f0
    5a50:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    5a54:	0100682e 	tsteq	r0, lr, lsr #16
    5a58:	00000000 	andeq	r0, r0, r0
    5a5c:	00000205 	andeq	r0, r0, r5, lsl #4
    5a60:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    5a64:	04020001 	streq	r0, [r2], #-1
    5a68:	010a0301 	tsteq	sl, r1, lsl #6
    5a6c:	01040200 	mrseq	r0, R12_usr
    5a70:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a74:	02001f01 	andeq	r1, r0, #1, 30
    5a78:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a7c:	21010402 	tstcs	r1, r2, lsl #8
    5a80:	01040200 	mrseq	r0, R12_usr
    5a84:	02213021 	eoreq	r3, r1, #33	; 0x21
    5a88:	01010008 	tsteq	r1, r8
    5a8c:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    5a90:	0300001e 	movweq	r0, #30
    5a94:	000100d7 	ldrdeq	r0, [r1], -r7
    5a98:	03010402 	movweq	r0, #5122	; 0x1402
    5a9c:	0200010c 	andeq	r0, r0, #12, 2
    5aa0:	00210104 	eoreq	r0, r1, r4, lsl #2
    5aa4:	1f010402 	svcne	0x00010402
    5aa8:	01040200 	mrseq	r0, R12_usr
    5aac:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5ab0:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5ab4:	31210104 			; <UNDEFINED> instruction: 0x31210104
    5ab8:	01000502 	tsteq	r0, r2, lsl #10
    5abc:	00019c01 	andeq	r9, r1, r1, lsl #24
    5ac0:	39000200 	stmdbcc	r0, {r9}
    5ac4:	02000001 	andeq	r0, r0, #1
    5ac8:	0d0efb01 	vstreq	d15, [lr, #-4]
    5acc:	01010100 	mrseq	r0, (UNDEF: 17)
    5ad0:	00000001 	andeq	r0, r0, r1
    5ad4:	01000001 	tsteq	r0, r1
    5ad8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5adc:	2f2e2e2f 	svccs	0x002e2e2f
    5ae0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5ae8 <__exidx_end+0x2e64>
    5ae4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5ae8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5aec:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5af0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5af4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5af8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5afc:	31303030 	teqcc	r0, r0, lsr r0
    5b00:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5b04:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5b08:	61746562 	cmnvs	r4, r2, ror #10
    5b0c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5b10:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5b14:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 594c <__exidx_end+0x2cc8>
    5b18:	6f635c73 	svcvs	0x00635c73
    5b1c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5b20:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5b24:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5b28:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5b2c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5b30:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5b34:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5b38:	3130322d 	teqcc	r0, sp, lsr #4
    5b3c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5b40:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b44:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b4c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5b50:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5b54:	616d5c65 	cmnvs	sp, r5, ror #24
    5b58:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5b5c:	3a630065 	bcc	18c5cf8 <__ccfg+0x18a5d50>
    5b60:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5b64:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5b68:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5b6c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5b70:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5b74:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5b78:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5b7c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5b80:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5b84:	6f6f745c 	svcvs	0x006f745c
    5b88:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5b8c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5b90:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5b94:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5b98:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b9c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ba0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5ba4:	5f342d69 	svcpl	0x00342d69
    5ba8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5bac:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5bb0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5bb4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5bb8:	61652d65 	cmnvs	r5, r5, ror #26
    5bbc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5bc0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5bc4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5bc8:	00007379 	andeq	r7, r0, r9, ror r3
    5bcc:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    5bd0:	00010063 	andeq	r0, r1, r3, rrx
    5bd4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5bd8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5bdc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5be0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5be4:	00020068 	andeq	r0, r2, r8, rrx
    5be8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5bec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5bf0:	0300682e 	movweq	r6, #2094	; 0x82e
    5bf4:	70630000 	rsbvc	r0, r3, r0
    5bf8:	00682e75 	rsbeq	r2, r8, r5, ror lr
    5bfc:	00000001 	andeq	r0, r0, r1
    5c00:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    5c04:	0300001e 	movweq	r0, #30
    5c08:	030100f5 	movweq	r0, #4341	; 0x10f5
    5c0c:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    5c10:	00010100 	andeq	r0, r1, r0, lsl #2
    5c14:	00000205 	andeq	r0, r0, r5, lsl #4
    5c18:	c0030000 	andgt	r0, r3, r0
    5c1c:	11030101 	tstne	r3, r1, lsl #2
    5c20:	00030201 	andeq	r0, r3, r1, lsl #4
    5c24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5c28:	001edc02 	andseq	sp, lr, r2, lsl #24
    5c2c:	028d0300 	addeq	r0, sp, #0, 6
    5c30:	01120301 	tsteq	r2, r1, lsl #6
    5c34:	01000402 	tsteq	r0, r2, lsl #8
    5c38:	02050001 	andeq	r0, r5, #1
    5c3c:	00000000 	andeq	r0, r0, r0
    5c40:	0102d803 	tsteq	r2, r3, lsl #16
    5c44:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    5c48:	01010003 	tsteq	r1, r3
    5c4c:	00020500 	andeq	r0, r2, r0, lsl #10
    5c50:	03000000 	movweq	r0, #0
    5c54:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    5c58:	01000402 	tsteq	r0, r2, lsl #8
    5c5c:	0001e901 	andeq	lr, r1, r1, lsl #18
    5c60:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    5c64:	02000001 	andeq	r0, r0, #1
    5c68:	0d0efb01 	vstreq	d15, [lr, #-4]
    5c6c:	01010100 	mrseq	r0, (UNDEF: 17)
    5c70:	00000001 	andeq	r0, r0, r1
    5c74:	01000001 	tsteq	r0, r1
    5c78:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c7c:	2f2e2e2f 	svccs	0x002e2e2f
    5c80:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5c88 <__exidx_end+0x3004>
    5c84:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5c88:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5c8c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5c90:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5c94:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5c98:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5c9c:	31303030 	teqcc	r0, r0, lsr r0
    5ca0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5ca4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5ca8:	61746562 	cmnvs	r4, r2, ror #10
    5cac:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5cb0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5cb4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5aec <__exidx_end+0x2e68>
    5cb8:	6f635c73 	svcvs	0x00635c73
    5cbc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5cc0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5cc4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5cc8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5ccc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5cd0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5cd4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5cd8:	3130322d 	teqcc	r0, sp, lsr #4
    5cdc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5ce0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5ce4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ce8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5cec:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5cf0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5cf4:	616d5c65 	cmnvs	sp, r5, ror #24
    5cf8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5cfc:	3a630065 	bcc	18c5e98 <__ccfg+0x18a5ef0>
    5d00:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5d04:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5d08:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5d0c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5d10:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5d14:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5d18:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5d1c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5d20:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5d24:	6f6f745c 	svcvs	0x006f745c
    5d28:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5d2c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5d30:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5d34:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5d38:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5d3c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5d40:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5d44:	5f342d69 	svcpl	0x00342d69
    5d48:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5d4c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5d50:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5d54:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5d58:	61652d65 	cmnvs	r5, r5, ror #26
    5d5c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5d60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5d64:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5d68:	00007379 	andeq	r7, r0, r9, ror r3
    5d6c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5d70:	00632e70 	rsbeq	r2, r3, r0, ror lr
    5d74:	61000001 	tstvs	r0, r1
    5d78:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    5d7c:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    5d80:	00000100 	andeq	r0, r0, r0, lsl #2
    5d84:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5d88:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5d8c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5d90:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5d94:	00000200 	andeq	r0, r0, r0, lsl #4
    5d98:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5d9c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5da0:	00030068 	andeq	r0, r3, r8, rrx
    5da4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5da8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5dac:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5db0:	00000100 	andeq	r0, r0, r0, lsl #2
    5db4:	70696863 	rsbvc	r6, r9, r3, ror #16
    5db8:	6f666e69 	svcvs	0x00666e69
    5dbc:	0100682e 	tsteq	r0, lr, lsr #16
    5dc0:	65730000 	ldrbvs	r0, [r3, #-0]!
    5dc4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    5dc8:	00010068 	andeq	r0, r1, r8, rrx
    5dcc:	05000000 	streq	r0, [r0, #-0]
    5dd0:	001ee402 	andseq	lr, lr, r2, lsl #8
    5dd4:	028d0300 	addeq	r0, sp, #0, 6
    5dd8:	0a032001 	beq	cdde4 <__ccfg+0xade3c>
    5ddc:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5de0:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    5de4:	1f212d43 	svcne	0x00212d43
    5de8:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    5dec:	01046604 	tsteq	r4, r4, lsl #12
    5df0:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    5df4:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    5df8:	2f3d2d4a 	svccs	0x003d2d4a
    5dfc:	2f2f1f2f 	svccs	0x002f1f2f
    5e00:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    5e04:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    5e08:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    5e0c:	0101001e 	tsteq	r1, lr, lsl r0
    5e10:	b8020500 	stmdalt	r2, {r8, sl}
    5e14:	0300001f 	movweq	r0, #31
    5e18:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    5e1c:	41334330 	teqmi	r3, r0, lsr r3
    5e20:	333c0903 	teqcc	ip, #49152	; 0xc000
    5e24:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    5e28:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    5e2c:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    5e30:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    5e34:	03496742 	movteq	r6, #38722	; 0x9742
    5e38:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    5e3c:	004b6924 	subeq	r6, fp, r4, lsr #18
    5e40:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    5e44:	0013024d 	andseq	r0, r3, sp, asr #4
    5e48:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    5e4c:	00020000 	andeq	r0, r2, r0
    5e50:	00000165 	andeq	r0, r0, r5, ror #2
    5e54:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e58:	0101000d 	tsteq	r1, sp
    5e5c:	00000101 	andeq	r0, r0, r1, lsl #2
    5e60:	00000100 	andeq	r0, r0, r0, lsl #2
    5e64:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5e68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e6c:	2f2e2e2f 	svccs	0x002e2e2f
    5e70:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5e74:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5e78:	3a630062 	bcc	18c6008 <__ccfg+0x18a6060>
    5e7c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5e80:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5e84:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5e88:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5e8c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5e90:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5e94:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5e98:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5e9c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5ea0:	6f6f745c 	svcvs	0x006f745c
    5ea4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5ea8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5eac:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5eb0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5eb4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5eb8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ebc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5ec0:	5f342d69 	svcpl	0x00342d69
    5ec4:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5ec8:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5ecc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ed0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ed4:	61652d65 	cmnvs	r5, r5, ror #26
    5ed8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5edc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5ee0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5ee4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5ee8:	6300656e 	movwvs	r6, #1390	; 0x56e
    5eec:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5ef0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5ef4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5ef8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5efc:	5f393130 	svcpl	0x00393130
    5f00:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5f04:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5f08:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5f0c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5f10:	6f745c36 	svcvs	0x00745c36
    5f14:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5f18:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5f1c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5f20:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5f24:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5f28:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5f2c:	61652d65 	cmnvs	r5, r5, ror #26
    5f30:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5f34:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5f38:	71353130 	teqvc	r5, r0, lsr r1
    5f3c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5f40:	6f6e2d6d 	svcvs	0x006e2d6d
    5f44:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5f48:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5f4c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5f50:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5f54:	00737973 	rsbseq	r7, r3, r3, ror r9
    5f58:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5f5c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5f60:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    5f64:	00000100 	andeq	r0, r0, r0, lsl #2
    5f68:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5f6c:	6f725f70 	svcvs	0x00725f70
    5f70:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5f74:	73000001 	movwvc	r0, #1
    5f78:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    5f7c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    5f80:	00010068 	andeq	r0, r1, r8, rrx
    5f84:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5f88:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5f8c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5f90:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5f94:	00020068 	andeq	r0, r2, r8, rrx
    5f98:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5f9c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5fa0:	0300682e 	movweq	r6, #2094	; 0x82e
    5fa4:	64640000 	strbtvs	r0, [r4], #-0
    5fa8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    5fac:	6f000001 	svcvs	0x00000001
    5fb0:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    5fb4:	00000100 	andeq	r0, r0, r0, lsl #2
    5fb8:	02050000 	andeq	r0, r5, #0
    5fbc:	0000205c 	andeq	r2, r0, ip, asr r0
    5fc0:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    5fc4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    5fc8:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    5fcc:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    5fd0:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    5fd4:	01042000 	mrseq	r2, (UNDEF: 4)
    5fd8:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    5fdc:	d9030204 	stmdble	r3, {r2, r9}
    5fe0:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    5fe4:	ac030104 	stfges	f0, [r3], {4}
    5fe8:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    5fec:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    5ff0:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    5ff4:	03587803 	cmpeq	r8, #196608	; 0x30000
    5ff8:	7303200d 	movwvc	r2, #12301	; 0x300d
    5ffc:	2010033c 	andscs	r0, r0, ip, lsr r3
    6000:	21212121 			; <UNDEFINED> instruction: 0x21212121
    6004:	01000d02 	tsteq	r0, r2, lsl #26
    6008:	02050001 	andeq	r0, r5, #1
    600c:	000020d8 	ldrdeq	r2, [r0], -r8
    6010:	0101bf03 	tsteq	r1, r3, lsl #30
    6014:	4a78031a 	bmi	1e06c84 <__ccfg+0x1de6cdc>
    6018:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    601c:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    6020:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    6024:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    6028:	3002042d 	andcc	r0, r2, sp, lsr #8
    602c:	03010421 	movweq	r0, #5153	; 0x1421
    6030:	2f3d2e0b 	svccs	0x003d2e0b
    6034:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    6038:	302c4d66 	eorcc	r4, ip, r6, ror #26
    603c:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    6040:	01001502 	tsteq	r0, r2, lsl #10
    6044:	02050001 	andeq	r0, r5, #1
    6048:	00002184 	andeq	r2, r0, r4, lsl #3
    604c:	01049f03 	tsteq	r4, r3, lsl #30
    6050:	03010c03 	movweq	r0, #7171	; 0x1c03
    6054:	77032009 	strvc	r2, [r3, -r9]
    6058:	33312120 	teqcc	r1, #32, 2
    605c:	31303027 	teqcc	r0, r7, lsr #32
    6060:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    6064:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    6068:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    606c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    6070:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    6074:	00010100 	andeq	r0, r1, r0, lsl #2
    6078:	21e00205 	mvncs	r0, r5, lsl #4
    607c:	e5030000 	str	r0, [r3, #-0]
    6080:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    6084:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    6088:	00050233 	andeq	r0, r5, r3, lsr r2
    608c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6090:	00000002 	andeq	r0, r0, r2
    6094:	05810300 	streq	r0, [r1, #768]	; 0x300
    6098:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    609c:	01010006 	tsteq	r1, r6
    60a0:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    60a4:	03000021 	movweq	r0, #33	; 0x21
    60a8:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    60ac:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    60b0:	01010006 	tsteq	r1, r6
    60b4:	08020500 	stmdaeq	r2, {r8, sl}
    60b8:	03000022 	movweq	r0, #34	; 0x22
    60bc:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    60c0:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    60c4:	01010008 	tsteq	r1, r8
    60c8:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    60cc:	03000022 	movweq	r0, #34	; 0x22
    60d0:	030105db 	movweq	r0, #5595	; 0x15db
    60d4:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    60d8:	20770320 	rsbscs	r0, r7, r0, lsr #6
    60dc:	03200903 			; <UNDEFINED> instruction: 0x03200903
    60e0:	2a352079 	bcs	d4e2cc <__ccfg+0xd2e324>
    60e4:	30312232 	eorscc	r2, r1, r2, lsr r2
    60e8:	30274732 	eorcc	r4, r7, r2, lsr r7
    60ec:	17034732 	smladxne	r3, r2, r7, r4
    60f0:	3a36372e 	bcc	d93db0 <__ccfg+0xd73e08>
    60f4:	00080227 	andeq	r0, r8, r7, lsr #4
    60f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    60fc:	00228002 	eoreq	r8, r2, r2
    6100:	06a90300 	strteq	r0, [r9], r0, lsl #6
    6104:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6108:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    610c:	01010003 	tsteq	r1, r3
    6110:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    6114:	03000022 	movweq	r0, #34	; 0x22
    6118:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    611c:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    6120:	00030220 	andeq	r0, r3, r0, lsr #4
    6124:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6128:	0022a802 	eoreq	sl, r2, r2, lsl #16
    612c:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    6130:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6134:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    6138:	01010003 	tsteq	r1, r3
    613c:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    6140:	03000022 	movweq	r0, #34	; 0x22
    6144:	160106e2 	strne	r0, [r1], -r2, ror #13
    6148:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    614c:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    6150:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    6154:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    6158:	01010003 	tsteq	r1, r3
    615c:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    6160:	03000022 	movweq	r0, #34	; 0x22
    6164:	16010782 	strne	r0, [r1], -r2, lsl #15
    6168:	00060233 	andeq	r0, r6, r3, lsr r2
    616c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6170:	0022f402 	eoreq	pc, r2, r2, lsl #8
    6174:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    6178:	43211601 			; <UNDEFINED> instruction: 0x43211601
    617c:	03333429 	teqeq	r3, #687865856	; 0x29000000
    6180:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    6184:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    6188:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    618c:	00010100 	andeq	r0, r1, r0, lsl #2
    6190:	23200205 			; <UNDEFINED> instruction: 0x23200205
    6194:	b4030000 	strlt	r0, [r3], #-0
    6198:	21150107 	tstcs	r5, r7, lsl #2
    619c:	20090355 	andcs	r0, r9, r5, asr r3
    61a0:	01000302 	tsteq	r0, r2, lsl #6
    61a4:	02050001 	andeq	r0, r5, #1
    61a8:	00002334 	andeq	r2, r0, r4, lsr r3
    61ac:	0107c803 	tsteq	r7, r3, lsl #16
    61b0:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    61b4:	0302200a 	movweq	r2, #8202	; 0x200a
    61b8:	00010100 	andeq	r0, r1, r0, lsl #2
    61bc:	23480205 	movtcs	r0, #33285	; 0x8205
    61c0:	a7030000 	strge	r0, [r3, -r0]
    61c4:	03200102 			; <UNDEFINED> instruction: 0x03200102
    61c8:	1f3d2009 	svcne	0x003d2009
    61cc:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    61d0:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    61d4:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    61d8:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    61dc:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    61e0:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61e4:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61e8:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    61ec:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    61f0:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    61f4:	033d3c09 	teqeq	sp, #2304	; 0x900
    61f8:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    61fc:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    6200:	40211f3d 	eormi	r1, r1, sp, lsr pc
    6204:	0012024b 	andseq	r0, r2, fp, asr #4
    6208:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    620c:	00245802 	eoreq	r5, r4, r2, lsl #16
    6210:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    6214:	04020001 	streq	r0, [r2], #-1
    6218:	200e0301 	andcs	r0, lr, r1, lsl #6
    621c:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    6220:	4b684d1d 	blmi	1a1969c <__ccfg+0x19f96f4>
    6224:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    6228:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    622c:	315b3d01 	cmpcc	fp, r1, lsl #26
    6230:	01000b02 	tsteq	r0, r2, lsl #22
    6234:	02050001 	andeq	r0, r5, #1
    6238:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    623c:	01089303 	tsteq	r8, r3, lsl #6
    6240:	2f010903 	svccs	0x00010903
    6244:	0022212d 	eoreq	r2, r2, sp, lsr #2
    6248:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    624c:	0007024b 	andeq	r0, r7, fp, asr #4
    6250:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6254:	0024e402 	eoreq	lr, r4, r2, lsl #8
    6258:	039b0300 	orrseq	r0, fp, #0, 6
    625c:	01090301 	tsteq	r9, r1, lsl #6
    6260:	203c7703 	eorscs	r7, ip, r3, lsl #14
    6264:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    6268:	0a033130 	beq	d2730 <__ccfg+0xb2788>
    626c:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    6270:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 6158 <__exidx_end+0x34d4>
    6274:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    6278:	5226501c 	eorpl	r5, r6, #28
    627c:	2f4d4f3d 	svccs	0x004d4f3d
    6280:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    6284:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    6288:	5b4b0104 	blpl	12c66a0 <__ccfg+0x12a66f8>
    628c:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    6290:	4a09033f 	bmi	246f94 <__ccfg+0x226fec>
    6294:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    6298:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    629c:	4a7db903 	bmi	1f746b0 <__ccfg+0x1f54708>
    62a0:	01001f02 	tsteq	r0, r2, lsl #30
    62a4:	00036501 	andeq	r6, r3, r1, lsl #10
    62a8:	a8000200 	stmdage	r0, {r9}
    62ac:	02000001 	andeq	r0, r0, #1
    62b0:	0d0efb01 	vstreq	d15, [lr, #-4]
    62b4:	01010100 	mrseq	r0, (UNDEF: 17)
    62b8:	00000001 	andeq	r0, r0, r1
    62bc:	01000001 	tsteq	r0, r1
    62c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    62c4:	2f2e2e2f 	svccs	0x002e2e2f
    62c8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 62d0 <__exidx_end+0x364c>
    62cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    62d0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    62d4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    62d8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    62dc:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    62e0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    62e4:	31303030 	teqcc	r0, r0, lsr r0
    62e8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    62ec:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    62f0:	61746562 	cmnvs	r4, r2, ror #10
    62f4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    62f8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    62fc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6134 <__exidx_end+0x34b0>
    6300:	6f635c73 	svcvs	0x00635c73
    6304:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6308:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    630c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6310:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6314:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6318:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    631c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6320:	3130322d 	teqcc	r0, sp, lsr #4
    6324:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6328:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    632c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6330:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6334:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6338:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    633c:	616d5c65 	cmnvs	sp, r5, ror #24
    6340:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6344:	3a630065 	bcc	18c64e0 <__ccfg+0x18a6538>
    6348:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    634c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6350:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6354:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6358:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    635c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6360:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6364:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6368:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    636c:	6f6f745c 	svcvs	0x006f745c
    6370:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6374:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6378:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    637c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6380:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6384:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6388:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    638c:	5f342d69 	svcpl	0x00342d69
    6390:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6394:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6398:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    639c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    63a0:	61652d65 	cmnvs	r5, r5, ror #26
    63a4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    63a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    63ac:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    63b0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    63b4:	2f2e2e2f 	svccs	0x002e2e2f
    63b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    63bc:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    63c0:	73000063 	movwvc	r0, #99	; 0x63
    63c4:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    63c8:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    63cc:	00010063 	andeq	r0, r1, r3, rrx
    63d0:	6e6f6100 	powvse	f6, f7, f0
    63d4:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    63d8:	0100682e 	tsteq	r0, lr, lsr #16
    63dc:	736f0000 	cmnvc	pc, #0
    63e0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    63e4:	70000001 	andvc	r0, r0, r1
    63e8:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    63ec:	00010068 	andeq	r0, r1, r8, rrx
    63f0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    63f4:	725f7075 	subsvc	r7, pc, #117	; 0x75
    63f8:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    63fc:	00000100 	andeq	r0, r0, r0, lsl #2
    6400:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6404:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6408:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    640c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6410:	00000200 	andeq	r0, r0, r0, lsl #4
    6414:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6418:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    641c:	00030068 	andeq	r0, r3, r8, rrx
    6420:	5f776800 	svcpl	0x00776800
    6424:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6428:	00682e73 	rsbeq	r2, r8, r3, ror lr
    642c:	72000004 	andvc	r0, r0, #4
    6430:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6434:	00000100 	andeq	r0, r0, r0, lsl #2
    6438:	5f737973 	svcpl	0x00737973
    643c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    6440:	0100682e 	tsteq	r0, lr, lsr #16
    6444:	6f610000 	svcvs	0x00610000
    6448:	61625f6e 	cmnvs	r2, lr, ror #30
    644c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    6450:	0100682e 	tsteq	r0, lr, lsr #16
    6454:	00000000 	andeq	r0, r0, r0
    6458:	00000205 	andeq	r0, r0, r5, lsl #4
    645c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    6460:	02040100 	andeq	r0, r4, #0, 2
    6464:	0102e903 	tsteq	r2, r3, lsl #18
    6468:	97030104 	strls	r0, [r3, -r4, lsl #2]
    646c:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    6470:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    6474:	01040200 	mrseq	r0, R12_usr
    6478:	2000ce03 	andcs	ip, r0, r3, lsl #28
    647c:	02000104 	andeq	r0, r0, #4, 2
    6480:	d1030104 	tstle	r3, r4, lsl #2
    6484:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    6488:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    648c:	4b896701 	blmi	fe260098 <_estack+0xde25b098>
    6490:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    6494:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    6498:	03010458 	movweq	r0, #5208	; 0x1458
    649c:	004a7ee4 	subeq	r7, sl, r4, ror #29
    64a0:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    64a4:	81030404 	tsthi	r3, r4, lsl #8
    64a8:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    64ac:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    64b0:	0001043c 	andeq	r0, r1, ip, lsr r4
    64b4:	03010402 	movweq	r0, #5122	; 0x1402
    64b8:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    64bc:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    64c0:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    64c4:	00204203 	eoreq	r4, r0, r3, lsl #4
    64c8:	03010402 	movweq	r0, #5122	; 0x1402
    64cc:	01042e14 	tsteq	r4, r4, lsl lr
    64d0:	01040200 	mrseq	r0, R12_usr
    64d4:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    64d8:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    64dc:	4b83281b 	blmi	fe0d0550 <_estack+0xde0cb550>
    64e0:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    64e4:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    64e8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    64ec:	3c140301 	ldccc	3, cr0, [r4], {1}
    64f0:	02000104 	andeq	r0, r0, #4, 2
    64f4:	8d030104 	stfhis	f0, [r3, #-16]
    64f8:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    64fc:	01010017 	tsteq	r1, r7, lsl r0
    6500:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    6504:	03000026 	movweq	r0, #38	; 0x26
    6508:	030101da 	movweq	r0, #4570	; 0x11da
    650c:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    6510:	201d0320 	andscs	r0, sp, r0, lsr #6
    6514:	32412f59 	subcc	r2, r1, #356	; 0x164
    6518:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    651c:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    6520:	0305041b 	movweq	r0, #21531	; 0x541b
    6524:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    6528:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    652c:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    6530:	50030504 	andpl	r0, r3, r4, lsl #10
    6534:	01042120 	tsteq	r4, r0, lsr #2
    6538:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    653c:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    6540:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    6544:	03050420 	movweq	r0, #21536	; 0x5420
    6548:	0104204d 	tsteq	r4, sp, asr #32
    654c:	2f2e3403 	svccs	0x002e3403
    6550:	2f692365 	svccs	0x00692365
    6554:	213e214d 	teqcs	lr, sp, asr #2
    6558:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    655c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    6560:	ca4a0f03 	bgt	128a174 <__ccfg+0x126a1cc>
    6564:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    6568:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    656c:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    6570:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    6574:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    6578:	31312026 	teqcc	r1, r6, lsr #32
    657c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    6580:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    6584:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    6588:	03200903 			; <UNDEFINED> instruction: 0x03200903
    658c:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    6590:	7103213c 	tstvc	r3, ip, lsr r1
    6594:	3c0f0320 	stccc	3, cr0, [pc], {32}
    6598:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    659c:	23212265 			; <UNDEFINED> instruction: 0x23212265
    65a0:	20780328 	rsbscs	r0, r8, r8, lsr #6
    65a4:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    65a8:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    65ac:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    65b0:	01010021 	tsteq	r1, r1, lsr #32
    65b4:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    65b8:	03000028 	movweq	r0, #40	; 0x28
    65bc:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    65c0:	a22f2240 	eorge	r2, pc, #64, 4
    65c4:	2a404e24 	bcs	1019e5c <__ccfg+0xff9eb4>
    65c8:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    65cc:	00010100 	andeq	r0, r1, r0, lsl #2
    65d0:	00000205 	andeq	r0, r0, r5, lsl #4
    65d4:	e5030000 	str	r0, [r3, #-0]
    65d8:	0c030103 	stfeqs	f0, [r3], {3}
    65dc:	30282f20 	eorcc	r2, r8, r0, lsr #30
    65e0:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    65e4:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    65e8:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    65ec:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    65f0:	1e224b2f 	vmulne.f64	d4, d2, d31
    65f4:	000c023e 	andeq	r0, ip, lr, lsr r2
    65f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    65fc:	0028b402 	eoreq	fp, r8, r2, lsl #8
    6600:	04a60300 	strteq	r0, [r6], #768	; 0x300
    6604:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    6608:	00040226 	andeq	r0, r4, r6, lsr #4
    660c:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    6610:	00020000 	andeq	r0, r2, r0
    6614:	00000143 	andeq	r0, r0, r3, asr #2
    6618:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    661c:	0101000d 	tsteq	r1, sp
    6620:	00000101 	andeq	r0, r0, r1, lsl #2
    6624:	00000100 	andeq	r0, r0, r0, lsl #2
    6628:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    662c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6630:	2f2e2e2f 	svccs	0x002e2e2f
    6634:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6638:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    663c:	3a630062 	bcc	18c67cc <__ccfg+0x18a6824>
    6640:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6644:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6648:	302e322e 	eorcc	r3, lr, lr, lsr #4
    664c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6650:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6654:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6658:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    665c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6660:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6664:	6f6f745c 	svcvs	0x006f745c
    6668:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    666c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6670:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6674:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6678:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    667c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6680:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6684:	5f342d69 	svcpl	0x00342d69
    6688:	30322d39 	eorscc	r2, r2, r9, lsr sp
    668c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6690:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6694:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6698:	61652d65 	cmnvs	r5, r5, ror #26
    669c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    66a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    66a4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    66a8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    66ac:	6300656e 	movwvs	r6, #1390	; 0x56e
    66b0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    66b4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    66b8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    66bc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    66c0:	5f393130 	svcpl	0x00393130
    66c4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    66c8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    66cc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    66d0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    66d4:	6f745c36 	svcvs	0x00745c36
    66d8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    66dc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    66e0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    66e4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    66e8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    66ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    66f0:	61652d65 	cmnvs	r5, r5, ror #26
    66f4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    66f8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    66fc:	71353130 	teqvc	r5, r0, lsr r1
    6700:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6704:	6f6e2d6d 	svcvs	0x006e2d6d
    6708:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    670c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6710:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6714:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6718:	00737973 	rsbseq	r7, r3, r3, ror r9
    671c:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    6720:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    6724:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    6728:	63000001 	movwvs	r0, #1
    672c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    6730:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    6734:	00010068 	andeq	r0, r1, r8, rrx
    6738:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    673c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6740:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6744:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6748:	00020068 	andeq	r0, r2, r8, rrx
    674c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6750:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6754:	0300682e 	movweq	r6, #2094	; 0x82e
    6758:	00000000 	andeq	r0, r0, r0
    675c:	00000205 	andeq	r0, r0, r5, lsl #4
    6760:	c4030000 	strgt	r0, [r3], #-0
    6764:	2f130100 	svccs	0x00130100
    6768:	01000602 	tsteq	r0, r2, lsl #12
    676c:	02050001 	andeq	r0, r5, #1
    6770:	00000000 	andeq	r0, r0, r0
    6774:	0100d003 	tsteq	r0, r3
    6778:	0a032f14 	beq	d23d0 <__ccfg+0xb2428>
    677c:	0008022e 	andeq	r0, r8, lr, lsr #4
    6780:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6784:	0028cc02 	eoreq	ip, r8, r2, lsl #24
    6788:	00e60300 	rsceq	r0, r6, r0, lsl #6
    678c:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    6790:	9b030204 	blls	c6fa8 <__ccfg+0xa7000>
    6794:	01042e01 	tsteq	r4, r1, lsl #28
    6798:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    679c:	4b4b4c23 	blmi	12d9830 <__ccfg+0x12b9888>
    67a0:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    67a4:	01010005 	tsteq	r1, r5
    67a8:	00020500 	andeq	r0, r2, r0, lsl #10
    67ac:	03000000 	movweq	r0, #0
    67b0:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    67b4:	01b00302 	lslseq	r0, r2, #6
    67b8:	03010420 	movweq	r0, #5152	; 0x1420
    67bc:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    67c0:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    67c4:	4a0a033c 	bmi	2874bc <__ccfg+0x267514>
    67c8:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    67cc:	01000502 	tsteq	r0, r2, lsl #10
    67d0:	02050001 	andeq	r0, r5, #1
    67d4:	00002918 	andeq	r2, r0, r8, lsl r9
    67d8:	0101a603 	tsteq	r1, r3, lsl #12
    67dc:	e3030204 	movw	r0, #12804	; 0x3204
    67e0:	11032000 	mrsne	r2, (UNDEF: 3)
    67e4:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 6734 <__exidx_end+0x3ab0>
    67e8:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    67ec:	8c030104 	stfhis	f0, [r3], {4}
    67f0:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    67f4:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    67f8:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    67fc:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    6800:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    6804:	30032064 	andcc	r2, r3, r4, rrx
    6808:	00040220 	andeq	r0, r4, r0, lsr #4
    680c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6810:	00298402 	eoreq	r8, r9, r2, lsl #8
    6814:	01e00300 	mvneq	r0, r0, lsl #6
    6818:	03020401 	movweq	r0, #9217	; 0x2401
    681c:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    6820:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    6824:	0302042e 	movweq	r0, #9262	; 0x242e
    6828:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    682c:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    6830:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6834:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    6838:	01000202 	tsteq	r0, r2, lsl #4
    683c:	00021e01 	andeq	r1, r2, r1, lsl #28
    6840:	42000200 	andmi	r0, r0, #0, 4
    6844:	02000001 	andeq	r0, r0, #1
    6848:	0d0efb01 	vstreq	d15, [lr, #-4]
    684c:	01010100 	mrseq	r0, (UNDEF: 17)
    6850:	00000001 	andeq	r0, r0, r1
    6854:	01000001 	tsteq	r0, r1
    6858:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    685c:	2f2e2e2f 	svccs	0x002e2e2f
    6860:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6868 <__exidx_end+0x3be4>
    6864:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6868:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    686c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6870:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6874:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6878:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    687c:	31303030 	teqcc	r0, r0, lsr r0
    6880:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6884:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6888:	61746562 	cmnvs	r4, r2, ror #10
    688c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6890:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6894:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 66cc <__exidx_end+0x3a48>
    6898:	6f635c73 	svcvs	0x00635c73
    689c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    68a0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    68a4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    68a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    68ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    68b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    68b4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    68b8:	3130322d 	teqcc	r0, sp, lsr #4
    68bc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    68c0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    68c4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    68c8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    68cc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    68d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    68d4:	616d5c65 	cmnvs	sp, r5, ror #24
    68d8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    68dc:	3a630065 	bcc	18c6a78 <__ccfg+0x18a6ad0>
    68e0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    68e4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    68e8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    68ec:	3030302e 	eorscc	r3, r0, lr, lsr #32
    68f0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    68f4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    68f8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    68fc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6900:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6904:	6f6f745c 	svcvs	0x006f745c
    6908:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    690c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6910:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6914:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6918:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    691c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6920:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6924:	5f342d69 	svcpl	0x00342d69
    6928:	30322d39 	eorscc	r2, r2, r9, lsr sp
    692c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6930:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6934:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6938:	61652d65 	cmnvs	r5, r5, ror #26
    693c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6940:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6944:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6948:	00007379 	andeq	r7, r0, r9, ror r3
    694c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    6950:	00010068 	andeq	r0, r1, r8, rrx
    6954:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    6958:	0100632e 	tsteq	r0, lr, lsr #6
    695c:	645f0000 	ldrbvs	r0, [pc], #-0	; 6964 <__exidx_end+0x3ce0>
    6960:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6964:	745f746c 	ldrbvc	r7, [pc], #-1132	; 696c <__exidx_end+0x3ce8>
    6968:	73657079 	cmnvc	r5, #121	; 0x79
    696c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6970:	735f0000 	cmpvc	pc, #0
    6974:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6978:	00682e74 	rsbeq	r2, r8, r4, ror lr
    697c:	63000003 	movwvs	r0, #3
    6980:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    6984:	00000100 	andeq	r0, r0, r0, lsl #2
    6988:	02050000 	andeq	r0, r5, #0
    698c:	0000299c 	muleq	r0, ip, r9
    6990:	01018803 	tsteq	r1, r3, lsl #16
    6994:	50303120 	eorspl	r3, r0, r0, lsr #2
    6998:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    699c:	0005022c 	andeq	r0, r5, ip, lsr #4
    69a0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    69a4:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    69a8:	03000029 	movweq	r0, #41	; 0x29
    69ac:	030100c3 	movweq	r0, #4291	; 0x10c3
    69b0:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    69b4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    69b8:	02050002 	andeq	r0, r5, #2
    69bc:	00000000 	andeq	r0, r0, r0
    69c0:	0100d803 	tsteq	r0, r3, lsl #16
    69c4:	33010e03 	movwcc	r0, #7683	; 0x1e03
    69c8:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    69cc:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    69d0:	01010004 	tsteq	r1, r4
    69d4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69d8:	00000002 	andeq	r0, r0, r2
    69dc:	01850300 	orreq	r0, r5, r0, lsl #6
    69e0:	20110301 	andscs	r0, r1, r1, lsl #6
    69e4:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    69e8:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    69ec:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    69f0:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    69f4:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    69f8:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    69fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6a00:	02050002 	andeq	r0, r5, #2
    6a04:	00000000 	andeq	r0, r0, r0
    6a08:	0101af03 	tsteq	r1, r3, lsl #30
    6a0c:	1b201103 	blne	80ae20 <__ccfg+0x7eae78>
    6a10:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    6a14:	042f2013 	strteq	r2, [pc], #-19	; 6a1c <__exidx_end+0x3d98>
    6a18:	20690301 	rsbcs	r0, r9, r1, lsl #6
    6a1c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a20:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a24:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    6a28:	01000502 	tsteq	r0, r2, lsl #10
    6a2c:	00020401 	andeq	r0, r2, r1, lsl #8
    6a30:	00000205 	andeq	r0, r0, r5, lsl #4
    6a34:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    6a38:	11030101 	tstne	r3, r1, lsl #2
    6a3c:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    6a40:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    6a44:	0104302d 	tsteq	r4, sp, lsr #32
    6a48:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    6a4c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a50:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a54:	00c80302 	sbceq	r0, r8, r2, lsl #6
    6a58:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    6a5c:	d6010100 	strle	r0, [r1], -r0, lsl #2
    6a60:	02000002 	andeq	r0, r0, #2
    6a64:	00017c00 	andeq	r7, r1, r0, lsl #24
    6a68:	fb010200 	blx	47272 <__ccfg+0x272ca>
    6a6c:	01000d0e 	tsteq	r0, lr, lsl #26
    6a70:	00010101 	andeq	r0, r1, r1, lsl #2
    6a74:	00010000 	andeq	r0, r1, r0
    6a78:	2f2e0100 	svccs	0x002e0100
    6a7c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a80:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a84:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6a88:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6a8c:	63006269 	movwvs	r6, #617	; 0x269
    6a90:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6a94:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a98:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6a9c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6aa0:	5f393130 	svcpl	0x00393130
    6aa4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6aa8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6aac:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6ab0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6ab4:	6f745c36 	svcvs	0x00745c36
    6ab8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6abc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6ac0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6ac4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6ac8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6acc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6ad0:	61652d65 	cmnvs	r5, r5, ror #26
    6ad4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6ad8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6adc:	71353130 	teqvc	r5, r0, lsr r1
    6ae0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6ae4:	6f6e2d6d 	svcvs	0x006e2d6d
    6ae8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6aec:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6af0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6af4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6af8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6afc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6b00:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6b04:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6b08:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6b0c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6b10:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6b14:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6b18:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6b1c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6b20:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6b24:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6b28:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6b2c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 69c4 <__exidx_end+0x3d40>
    6b30:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6b34:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6b38:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6b3c:	6f6e2d6d 	svcvs	0x006e2d6d
    6b40:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6b44:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6b48:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6b4c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6b50:	615c3371 	cmpvs	ip, r1, ror r3
    6b54:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b58:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b5c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b60:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6b64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6b68:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6b6c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6b70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b74:	2f2e2e2f 	svccs	0x002e2e2f
    6b78:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6b7c:	63736f00 	cmnvs	r3, #0, 30
    6b80:	0100632e 	tsteq	r0, lr, lsr #6
    6b84:	736f0000 	cmnvc	pc, #0
    6b88:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6b8c:	5f000001 	svcpl	0x00000001
    6b90:	61666564 	cmnvs	r6, r4, ror #10
    6b94:	5f746c75 	svcpl	0x00746c75
    6b98:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6ba0:	5f000002 	svcpl	0x00000002
    6ba4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6ba8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6bac:	00000300 	andeq	r0, r0, r0, lsl #6
    6bb0:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6bb8 <__exidx_end+0x3f34>
    6bb4:	73657079 	cmnvc	r5, #121	; 0x79
    6bb8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6bbc:	6f720000 	svcvs	0x00720000
    6bc0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6bc4:	61000001 	tstvs	r0, r1
    6bc8:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    6bcc:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    6bd0:	00000100 	andeq	r0, r0, r0, lsl #2
    6bd4:	5f6e6f61 	svcpl	0x006e6f61
    6bd8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6bdc:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6be0:	00000100 	andeq	r0, r0, r0, lsl #2
    6be4:	02050000 	andeq	r0, r5, #0
    6be8:	000029cc 	andeq	r2, r0, ip, asr #19
    6bec:	0100e503 	tsteq	r0, r3, lsl #10
    6bf0:	200f0320 	andcs	r0, pc, r0, lsr #6
    6bf4:	03207103 			; <UNDEFINED> instruction: 0x03207103
    6bf8:	0325200f 			; <UNDEFINED> instruction: 0x0325200f
    6bfc:	03309e09 	teqeq	r0, #9, 28	; 0x90
    6c00:	a3339e09 	teqge	r3, #9, 28	; 0x90
    6c04:	01000702 	tsteq	r0, r2, lsl #14
    6c08:	02050001 	andeq	r0, r5, #1
    6c0c:	00002a28 	andeq	r2, r0, r8, lsr #20
    6c10:	0101a003 	tsteq	r1, r3
    6c14:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    6c18:	3c7a0388 	ldclcc	3, cr0, [sl], #-544	; 0xfffffde0
    6c1c:	06022526 	streq	r2, [r2], -r6, lsr #10
    6c20:	00010100 	andeq	r0, r1, r0, lsl #2
    6c24:	00000205 	andeq	r0, r0, r5, lsl #4
    6c28:	c2030000 	andgt	r0, r3, #0
    6c2c:	25200101 	strcs	r0, [r0, #-257]!	; 0xfffffeff
    6c30:	79033491 	stmdbvc	r3, {r0, r4, r7, sl, ip, sp}
    6c34:	7a03272e 	bvc	d08f4 <__ccfg+0xb094c>
    6c38:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    6c3c:	7a030104 	bvc	c7054 <__ccfg+0xa70ac>
    6c40:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6c44:	2d305001 	ldccs	0, cr5, [r0, #-4]!
    6c48:	4b241f30 	blmi	90e910 <__ccfg+0x8ee968>
    6c4c:	3d341f3d 	ldccc	15, cr1, [r4, #-244]!	; 0xffffff0c
    6c50:	6d03326c 	sfmvs	f3, 4, [r3, #-432]	; 0xfffffe50
    6c54:	3c100366 	ldccc	3, cr0, [r0], {102}	; 0x66
    6c58:	00090226 	andeq	r0, r9, r6, lsr #4
    6c5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6c60:	00000002 	andeq	r0, r0, r2
    6c64:	01f30300 	mvnseq	r0, r0, lsl #6
    6c68:	024b2101 	subeq	r2, fp, #1073741824	; 0x40000000
    6c6c:	01010007 	tsteq	r1, r7
    6c70:	00020500 	andeq	r0, r2, r0, lsl #10
    6c74:	03000000 	movweq	r0, #0
    6c78:	24010280 	strcs	r0, [r1], #-640	; 0xfffffd80
    6c7c:	22030204 	andcs	r0, r3, #4, 4	; 0x40000000
    6c80:	03010458 	movweq	r0, #5208	; 0x1458
    6c84:	02048262 	andeq	r8, r4, #536870918	; 0x20000006
    6c88:	04203c03 	strteq	r3, [r0], #-3075	; 0xfffff3fd
    6c8c:	4a4a0301 	bmi	1287898 <__ccfg+0x12678f0>
    6c90:	3d211f3d 	stccc	15, cr1, [r1, #-244]!	; 0xffffff0c
    6c94:	1f30221f 	svcne	0x0030221f
    6c98:	02232230 	eoreq	r2, r3, #48, 4
    6c9c:	0101000c 	tsteq	r1, ip
    6ca0:	00020500 	andeq	r0, r2, r0, lsl #10
    6ca4:	03000000 	movweq	r0, #0
    6ca8:	250102a3 	strcs	r0, [r1, #-675]	; 0xfffffd5d
    6cac:	0302044f 	movweq	r0, #9295	; 0x244f
    6cb0:	01044a17 	tsteq	r4, r7, lsl sl
    6cb4:	4b4a6d03 	blmi	12a20c8 <__ccfg+0x1282120>
    6cb8:	01000902 	tsteq	r0, r2, lsl #18
    6cbc:	02050001 	andeq	r0, r5, #1
    6cc0:	00000000 	andeq	r0, r0, r0
    6cc4:	0102bc03 	tsteq	r2, r3, lsl #24
    6cc8:	20170322 	andscs	r0, r7, r2, lsr #6
    6ccc:	28206903 	stmdacs	r0!, {r0, r1, r8, fp, sp, lr}
    6cd0:	033c1003 	teqeq	ip, #3
    6cd4:	15032e6c 	strne	r2, [r3, #-3692]	; 0xfffff194
    6cd8:	586d032e 	stmdapl	sp!, {r1, r2, r3, r5, r8, r9}^
    6cdc:	03201303 			; <UNDEFINED> instruction: 0x03201303
    6ce0:	1103206f 	tstne	r3, pc, rrx
    6ce4:	06023f20 	streq	r3, [r2], -r0, lsr #30
    6ce8:	00010100 	andeq	r0, r1, r0, lsl #2
    6cec:	00000205 	andeq	r0, r0, r5, lsl #4
    6cf0:	e3030000 	movw	r0, #12288	; 0x3000
    6cf4:	21030102 	tstcs	r3, r2, lsl #2
    6cf8:	02024d01 	andeq	r4, r2, #1, 26	; 0x40
    6cfc:	00010100 	andeq	r0, r1, r0, lsl #2
    6d00:	00000205 	andeq	r0, r0, r5, lsl #4
    6d04:	90030000 	andls	r0, r3, r0
    6d08:	10030103 	andne	r0, r3, r3, lsl #2
    6d0c:	211f2120 	tstcs	pc, r0, lsr #2
    6d10:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6d14:	02003e01 	andeq	r3, r0, #1, 28
    6d18:	3d3d0104 	ldfccs	f0, [sp, #-16]!
    6d1c:	02341d31 	eorseq	r1, r4, #3136	; 0xc40
    6d20:	01010007 	tsteq	r1, r7
    6d24:	00020500 	andeq	r0, r2, r0, lsl #10
    6d28:	03000000 	movweq	r0, #0
    6d2c:	170103b5 			; <UNDEFINED> instruction: 0x170103b5
    6d30:	3d332c31 	ldccc	12, cr2, [r3, #-196]!	; 0xffffff3c
    6d34:	01000502 	tsteq	r0, r2, lsl #10
    6d38:	Address 0x0000000000006d38 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
      34:	5f5f0065 	svcpl	0x005f0065
      38:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6d0 <_estack+0xdfffa6d0>
      3c:	00747261 	rsbseq	r7, r4, r1, ror #4
			i = k;
      40:	70716572 	rsbsvc	r6, r1, r2, ror r5
				j->Next = k;
      44:	5f006d64 	svcpl	0x00006d64
      48:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
      4c:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
      50:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
      54:	00656d61 	rsbeq	r6, r5, r1, ror #26
		release;
      58:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
      5c:	73676e69 	cmnvc	r7, #1680	; 0x690
      60:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
      64:	66650074 			; <UNDEFINED> instruction: 0x66650074
      68:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
      6c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      70:	6f6c2067 	svcvs	0x006c2067
      74:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
      78:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      7c:	2064656e 	rsbcs	r6, r4, lr, ror #10
      80:	00746e69 	rsbseq	r6, r4, r9, ror #28
      84:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
      88:	49737265 	ldmdbmi	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      8c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
	descriptors [fd] = s;
      90:	6e766500 	cdpvs	5, 7, cr6, cr6, cr0, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	006e7074 	rsbeq	r7, lr, r4, ror r0
      98:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
	if (s == NULL)
      9c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		syserror (EMALLOC, "tcv05");
      a0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      a4:	5f5f0074 	svcpl	0x005f0074
      a8:	616c7473 	smcvs	51011	; 0xc743
      ac:	68535f62 	ldmdavs	r3, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      b0:	4d5f776f 	ldclmi	7, cr7, [pc, #-444]	; fffffefc <_estack+0xdfffaefc>
      b4:	00756e65 	rsbseq	r6, r5, r5, ror #28
      b8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      bc:	0074735f 	rsbseq	r7, r4, pc, asr r3
      c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c <g_pfnVectors+0xc>
      c4:	616d2f65 	cmnvs	sp, r5, ror #30
      c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
      d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      dc:	4349502f 	movtmi	r5, #36911	; 0x902f
      e0:	412f534f 			; <UNDEFINED> instruction: 0x412f534f
      e4:	2f737070 	svccs	0x00737070
      e8:	54504d43 	ldrbpl	r4, [r0], #-3395	; 0xfffff2bd
      ec:	5f343634 	svcpl	0x00343634
      f0:	3662614c 	strbtcc	r6, [r2], -ip, asr #2
			wwait (st, 50);
      f4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
			curr += 0x1000;
      f8:	63794374 	cmnvs	r9, #116, 6	; 0xd0000001
      fc:	0073656c 	rsbseq	r6, r3, ip, ror #10
		if (from >= EE_SIZE || upto < from)
     100:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     104:	754d7265 	strbvc	r7, [sp, #-613]	; 0xfffffd9b
			upto = EE_SIZE - 1;
     108:	7069746c 	rsbvc	r7, r9, ip, ror #8
     10c:	7265696c 	rsbvc	r6, r5, #108, 18	; 0x1b0000
     110:	735f5f00 	cmpvc	pc, #0, 30
     114:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     118:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     11c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     120:	00444f49 	subeq	r4, r4, r9, asr #30
     124:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
}
     128:	5f62616c 	svcpl	0x0062616c
     12c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     130:	006c6169 	rsbeq	r6, ip, r9, ror #2
     134:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     138:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff3db <_estack+0xdfffa3db>
     13c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    cycles[0].onTime = numbers[0];
     140:	756f635f 	strbvc	r6, [pc, #-863]!	; fffffde9 <_estack+0xdfffade9>
    cycles[0].offTime = numbers[1];
     144:	5f00746e 	svcpl	0x0000746e
    cycles[1].onTime = numbers[2];
     148:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     14c:	535f6261 	cmppl	pc, #268435462	; 0x10000006
    cycles[1].offTime = numbers[3];
     150:	00706f74 	rsbseq	r6, r0, r4, ror pc
}
     154:	6d646e6f 	stclvs	14, cr6, [r4, #-444]!	; 0xfffffe44
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	6700736e 	strvs	r7, [r0, -lr, ror #6]
     15c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
            number += settingsInput[i] - 48;
     160:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
            numberMultiplier = numberMultiplier * 10;
     164:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
     168:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!	; 0xfffffe44
     16c:	00726562 	rsbseq	r6, r2, r2, ror #10
fsm root {
     170:	20554e47 	subscs	r4, r5, r7, asr #28
     174:	20393943 	eorscs	r3, r9, r3, asr #18
     178:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     17c:	30322031 	eorscc	r2, r2, r1, lsr r0
     180:	30313931 	eorscc	r3, r1, r1, lsr r9
     184:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
        initCycles();
     188:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
        ser_outf(Initial, "Enter your name: ");
     18c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     190:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
     198:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     1a0:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     1a4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     1ac:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
        if (choice == 'A' || choice == 'a'){
     1b0:	205d3939 	subscs	r3, sp, r9, lsr r9
     1b4:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
     1b8:	6f633d75 	svcvs	0x00633d75
            proceed Adjust_Intervals;
     1bc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
            proceed Monitor;
     1c0:	20336d2d 	eorscs	r6, r3, sp, lsr #26
        proceed Show_Menu;
     1c4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	20626d75 	rsbcs	r6, r2, r5, ror sp
     1cc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     1d4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     1d8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
        processSettingsInput(settings);
     1dc:	616d2d20 	cmnvs	sp, r0, lsr #26
        proceed Show_Menu;
     1e0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     1e4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
     1ec:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     1f0:	61776467 	cmnvs	r7, r7, ror #8
     1f4:	332d6672 			; <UNDEFINED> instruction: 0x332d6672
     1f8:	73672d20 	cmnvc	r7, #32, 26	; 0x800
        proceed Show_Menu;
     1fc:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     200:	77642d74 			; <UNDEFINED> instruction: 0x77642d74
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	20667261 	rsbcs	r7, r6, r1, ror #4
     208:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
        displayCycle = YES;
     20c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
        ser_inf(Await_Stop, "%c", ch);
     210:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     214:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
     218:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
        proceed Monitor;
     21c:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     220:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     224:	736e6f69 	cmnvc	lr, #420	; 0x1a4
        leds(1, 0);
     228:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
     22c:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
     230:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     234:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     238:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
        leds(0, 0);
     23c:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
     240:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     244:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
     248:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
     24c:	662d2067 	strtvs	r2, [sp], -r7, rrx
     250:	206d7361 	rsbcs	r7, sp, r1, ror #6
        } else if (choice == 'S' || choice == 's') {
     254:	616d662d 	cmnvs	sp, sp, lsr #12
            proceed Stop;
     258:	72652d78 	rsbvc	r2, r5, #120, 26	; 0x1e00
        } else if (choice == 'V' || choice == 'v') {
     25c:	73726f72 	cmnvc	r2, #456	; 0x1c8
            proceed View_Settings;
     260:	0030313d 	eorseq	r3, r0, sp, lsr r1
        } else if (choice == 'M' || choice == 'm') {
     264:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
            proceed Monitor;
     268:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
     26c:	745f746e 	ldrbvc	r7, [pc], #-1134	; 274 <root+0x104>
     270:	6f687300 	svcvs	0x00687300
     274:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     278:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     27c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     280:	00746e69 	rsbseq	r6, r4, r9, ror #28
     284:	696e6970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, sp, lr}^
     288:	745f646f 	ldrbvc	r6, [pc], #-1135	; 290 <root+0x120>
     28c:	63796300 	cmnvs	r9, #0, 6
     290:	4973656c 	ldmdbmi	r3!, {r2, r3, r5, r6, r8, sl, sp, lr}^
     294:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     298:	74736600 	ldrbtvc	r6, [r3], #-1536	; 0xfffffa00
static void devinit_uart (int devnum) {
     29c:	006b6c62 	rsbeq	r6, fp, r2, ror #24
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     2a4:	61007265 	tstvs	r0, r5, ror #4
void udelay (volatile word n) {
     2a8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
     2ac:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
	while (n) {
     2b0:	6d616e72 	stclvs	14, cr6, [r1, #-456]!	; 0xfffffe38
     2b4:	5f5f0065 	svcpl	0x005f0065
}
     2b8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
	while (n--);
     2bc:	61747379 	cmnvs	r4, r9, ror r3
     2c0:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
     2c4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
		n--;
     2c8:	64657200 	strbtvs	r7, [r5], #-512	; 0xfffffe00
     2cc:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     2d0:	61620065 	cmnvs	r2, r5, rrx
void mdelay (volatile word n) {
     2d4:	4e006573 	cfrshl64mi	mvdx0, mvdx3, r6
     2d8:	00747865 	rsbseq	r7, r4, r5, ror #16
	while (n) {
     2dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     2e0:	544b0072 	strbpl	r0, [fp], #-114	; 0xffffff8e
}
     2e4:	612f504d 			; <UNDEFINED> instruction: 0x612f504d
		udelay (999);
     2e8:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     2ec:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
		n--;
     2f0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     2f4:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     2f8:	5f5f0073 	svcpl	0x005f0073
     2fc:	616c7473 	smcvs	51011	; 0xc743
void __pi_ondomain (lword d) {
     300:	77415f62 	strbvc	r5, [r1, -r2, ror #30]
     304:	5f746961 	svcpl	0x00746961
		if (__pi_systat.effpdm > 1)
     308:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
     30c:	625f5f00 	subsvs	r5, pc, #0, 30
			__pi_systat.effpdm = 1;
     310:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
	PRCMPowerDomainOn (d);
     314:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     318:	5f005f5f 	svcpl	0x00005f5f
     31c:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     324:	70005f5f 	andvc	r5, r0, pc, asr pc
     328:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
	__pi_systat.ondmns |= d;
     32c:	65537373 	ldrbvs	r7, [r3, #-883]	; 0xfffffc8d
     330:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
}
     334:	6e497367 	cdpvs	3, 4, cr7, cr9, cr7, {3}
     338:	00747570 	rsbseq	r7, r4, r0, ror r5
void __pi_syserror (word ec, const char *m) {
     33c:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
	diag ("SYSERR: %x, %s", ec, m);
     340:	0072656b 	rsbseq	r6, r2, fp, ror #10
     344:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
  __ASM volatile ("cpsid i" : : : "memory");
     348:	73676e69 	cmnvc	r7, #1680	; 0x690
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
     350:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     354:	735f5f00 	cmpvc	pc, #0, 30
		all_leds_blink;
     358:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     35c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     360:	746e495f 	strbtvc	r4, [lr], #-2399	; 0xfffff6a1
     364:	61767265 	cmnvs	r6, r5, ror #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	5f00736c 	svcpl	0x0000736c
     36c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     370:	565f6261 	ldrbpl	r6, [pc], -r1, ror #4
     374:	5f776569 	svcpl	0x00776569
     378:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
     37c:	73676e69 	cmnvc	r7, #1680	; 0x690
	while (1) {
     380:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     384:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
     388:	68007272 	stmdavs	r0, {r1, r4, r5, r6, r9, ip, sp, lr}
     38c:	5f74736f 	svcpl	0x0074736f
void tci_run_delay_timer () {
     390:	5f006469 	svcpl	0x00006469
	setdel = __pi_mintk - __pi_old;
     394:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
     398:	5f6e6f74 	svcpl	0x006e6f74
     39c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     3a0:	736e7500 	cmnvc	lr, #0, 10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3a8:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3ac:	47007261 	strmi	r7, [r0, -r1, ror #4]
     3b0:	5f4f4950 	svcpl	0x004f4950
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	61656c63 	cmnvs	r5, r3, ror #24
	sti_tim;
     3b8:	6f694472 	svcvs	0x00694472
}
     3bc:	546e6f00 	strbtpl	r6, [lr], #-3840	; 0xfffff100
     3c0:	00656d69 	rsbeq	r6, r5, r9, ror #26
     3c4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     3c8:	5f62616c 	svcpl	0x0062616c
     3cc:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
	cli_aux;
     3d0:	495f7473 	ldmdbmi	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     3d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
     3dc:	6f687300 	svcvs	0x00687300
     3e0:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     3e4:	6300746e 	movwvs	r7, #1134	; 0x46e
	sti_aux;
     3e8:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
}
     3ec:	756e0073 	strbvc	r0, [lr, #-115]!	; 0xffffff8d
     3f0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     3f4:	656c0073 	strbvs	r0, [ip, #-115]!	; 0xffffff8d
void AONRTCIntHandler () {
     3f8:	636c6264 	cmnvs	ip, #100, 4	; 0x40000006
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fc:	6f6f4200 	svcvs	0x006f4200
     400:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
		if (__pi_utims [0] == 0)
     408:	00737473 	rsbseq	r7, r3, r3, ror r4
     40c:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
		if (*(__pi_utims [0])) {
     410:	75006b6c 	strvc	r6, [r0, #-2924]	; 0xfffff494
     414:	5f747261 	svcpl	0x00747261
			(*(__pi_utims [0]))--;
     418:	5f5f0074 	svcpl	0x005f0074
		if (__pi_utims [1] == 0)
     41c:	616c7473 	smcvs	51011	; 0xc743
		if (*(__pi_utims [1])) {
     420:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
			aux_timer_inactive = 0;
     424:	68435f74 	stmdavs	r3, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			(*(__pi_utims [1]))--;
     428:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
		if (__pi_utims [2] == 0)
     42c:	74656c00 	strbtvc	r6, [r5], #-3072	; 0xfffff400
		if (*(__pi_utims [2])) {
     430:	00726574 	rsbseq	r6, r2, r4, ror r5
			(*(__pi_utims [2]))--;
     434:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
		if (__pi_utims [3] != 0) {
     438:	745f7461 	ldrbvc	r7, [pc], #-1121	; 440 <AONRTCIntHandler+0x48>
			if (*(__pi_utims [3])) {
     43c:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
				aux_timer_inactive = 0;
     440:	0073746e 	rsbseq	r7, r3, lr, ror #8
				(*(__pi_utims [3]))--;
     444:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	if (__pi_systat.ledsts) {
     448:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     44c:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
		if (__pi_systat.ledblc++ == 0) {
     450:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     454:	6400656c 	strvs	r6, [r0], #-1388	; 0xfffffa94
			if (__pi_systat.ledblk) {
     458:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     45c:	79437961 	stmdbvc	r3, {r0, r5, r6, r8, fp, ip, sp, lr}^
     460:	00656c63 	rsbeq	r6, r5, r3, ror #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	6d756e70 	ldclvs	14, cr6, [r5, #-448]!	; 0xfffffe40
     468:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
				if (__pi_systat.ledsts & 0x2)
     46c:	79706f72 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     470:	616c6600 	cmnvs	ip, r0, lsl #12
     474:	63007367 	movwvs	r7, #871	; 0x367
				if (__pi_systat.ledsts & 0x4)
     478:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
				__pi_systat.ledblk = 0;
     47c:	73660065 	cmnvc	r6, #101	; 0x65
     480:	646f636d 	strbtvs	r6, [pc], #-877	; 488 <AONRTCIntHandler+0x90>
			if (__pi_systat.fstblk)
     484:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
     488:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
				__pi_systat.ledblc = 200;
     48c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	63705f69 	cmnvs	r0, #420	; 0x1a4
		cli_tim;
     494:	00735f62 	rsbseq	r5, r3, r2, ror #30
		__pi_new += setdel;
     498:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     49c:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
		setdel = 0;
     4a0:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
		RISE_N_SHINE;
     4a4:	79436465 	stmdbvc	r3, {r0, r2, r5, r6, sl, sp, lr}^
		__pi_new += setdel;
     4a8:	00656c63 	rsbeq	r6, r5, r3, ror #24
		RISE_N_SHINE;
     4ac:	746f6f72 	strbtvc	r6, [pc], #-3954	; 4b4 <AONRTCIntHandler+0xbc>
     4b0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		aux_timer_inactive = 1;
     4b4:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4b8:	006b746e 	rsbeq	r7, fp, lr, ror #8
				if (__pi_systat.ledsts & 0x1)
     4bc:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c0:	50470074 	subpl	r0, r7, r4, ror r0
     4c4:	735f4f49 	cmpvc	pc, #292	; 0x124
				if (__pi_systat.ledsts & 0x2)
     4c8:	754f7465 	strbvc	r7, [pc, #-1125]	; 6b <g_pfnVectors+0x6b>
     4cc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     4d0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
				if (__pi_systat.ledsts & 0x8)
     4d4:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
				__pi_systat.ledblk = 1;
     4d8:	4f41006f 	svcmi	0x0041006f
     4dc:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
		if (aux_timer_inactive) {
     4e0:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
			cli_aux;
     4e4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     4e8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     4ec:	6f4d3233 	svcvs	0x004d3233
     4f0:	5f006564 	svcpl	0x00006564
     4f4:	5f69705f 	svcpl	0x0069705f
     4f8:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
     4fc:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
     500:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
     504:	76617474 			; <UNDEFINED> instruction: 0x76617474
     508:	61727500 	cmnvs	r2, r0, lsl #10
word tci_update_delay_ticks (Boolean force) {
     50c:	00736574 	rsbseq	r6, r3, r4, ror r5
	cli_tim;
     510:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
     514:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	if (setdel) {
     518:	7172695f 	cmnvc	r2, pc, asr r9
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
     524:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     528:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
	return NO;
     534:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
			setdel = 0;
     538:	6b615778 	blvs	1856320 <__ccfg+0x1836378>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
     540:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
}
     544:	4e4f4100 	dvfmie	f4, f7, f0
		sti_tim;
     548:	50435557 	subpl	r5, r3, r7, asr r5
		return YES;
     54c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     550:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     554:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
     558:	41550074 	cmpmi	r5, r4, ror r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
	UARTDisable (UART0_BASE);
     560:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	73007261 	movwvc	r7, #609	; 0x261
	UARTDisable (UART0_BASE);
     568:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
	UARTConfigSetExpClk (UART0_BASE,
     56c:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
     570:	41007469 	tstmi	r0, r9, ror #8
     574:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     578:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
     580:	616e456e 	cmnvs	lr, lr, ror #10
     584:	00656c62 	rsbeq	r6, r5, r2, ror #24
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
     58c:	50006c65 	andpl	r6, r0, r5, ror #24
     590:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
	urates [0] = rate;
     594:	6f507563 	svcvs	0x00507563
}
     598:	4f726577 	svcmi	0x00726577
     59c:	5f006666 	svcpl	0x00006666
     5a0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     5a4:	50534d5f 	subspl	r4, r3, pc, asr sp
     5a8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     5ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	5f00745f 	svcpl	0x0000745f
     5b4:	5f69705f 	svcpl	0x0069705f
     5b8:	6f646e6f 	svcvs	0x00646e6f
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	6e69616d 	powvsez	f6, f1, #5.0
     5c0:	52415500 	subpl	r5, r1, #0, 10
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	46774854 			; <UNDEFINED> instruction: 0x46774854
     5c8:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     5d0:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     5d4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     5d8:	5f5f0065 	svcpl	0x005f0065
     5dc:	00424350 	subeq	r4, r2, r0, asr r3
     5e0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     5e4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
	switch (operation) {
     5e8:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ec:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
     5f0:	4f410065 	svcmi	0x00410065
     5f4:	434f494e 	movtmi	r4, #63822	; 0xf94e
     5f8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     5fc:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
				*buf++ = uart_a_read;
     600:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     604:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
			while (len && uart_a_char_available) {
     608:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
     60c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     610:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
			if (len != operation) {
     614:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
}
     618:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
     61c:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
			uart_a_disable_int;
     620:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
			if (uart_a_char_available) {
     624:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
				*buf++ = uart_a_read;
     628:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
			uart_a_disable_int;
     62c:	6f6c436c 	svcvs	0x006c436c
     630:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
			if (uart_a_char_available) {
     634:	52500074 	subspl	r0, r0, #116	; 0x74
     638:	61434d43 	cmpvs	r3, r3, asr #26
				uart_a_enable_int;
     63c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
     640:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
				goto Redo_rx;
     644:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     64c:	5000656c 	andpl	r6, r0, ip, ror #10
			return -2;
     650:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
     654:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
				uart_a_write (*buf);
     658:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     65c:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
			while (len && uart_a_room_in_tx) {
     660:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     664:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
     668:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			if (len != operation) {
     66c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
			uart_a_disable_int;
     670:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     674:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
			if (uart_a_room_in_tx) {
     678:	73747075 	cmnvc	r4, #117	; 0x75
     67c:	52415500 	subpl	r5, r1, #0, 10
				uart_a_enable_int;
     680:	46494654 			; <UNDEFINED> instruction: 0x46494654
     684:	616e454f 	cmnvs	lr, pc, asr #10
				*buf++ = uart_a_read;
     688:	00656c62 	rsbeq	r6, r5, r2, ror #24
			if (uart_a_room_in_tx) {
     68c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				uart_a_write (*buf);
     690:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
     694:	7367616c 	cmnvc	r7, #108, 2
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     69c:	61755f69 	cmnvs	r5, r9, ror #30
			uart_a_enable_int;
     6a0:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
     6a4:	61727465 	cmnvs	r2, r5, ror #8
     6a8:	50006574 	andpl	r6, r0, r4, ror r5
			return 0;
     6ac:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
			if (len == UART_CNTRL_SETRATE) {
     6b0:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	72464f49 	subvc	r4, r6, #292	; 0x124
     6b8:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     6bc:	61736944 	cmnvs	r3, r4, asr #18
				syserror (EREQPAR, "uar");
     6c0:	00656c62 	rsbeq	r6, r5, r2, ror #24
			syserror (ENOOPER, "uai");
     6c4:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
			if (len == UART_CNTRL_GETRATE) {
     6c8:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
				return 1;
     6cc:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
			syserror (ENOOPER, "uai");
     6d4:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     6d8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     6dc:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     6e0:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
     6e4:	6f6d7265 	svcvs	0x006d7265
     6e8:	6f006564 	svcvs	0x00006564
     6ec:	61726570 	cmnvs	r2, r0, ror r5
     6f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     6f4:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
void UART0IntHandler () {
     6fc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
     704:	00657669 	rsbeq	r7, r5, r9, ror #12
     708:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     70c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     710:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	5f6f6465 	svcpl	0x006f6465
     718:	5f007874 	svcpl	0x00007874
		RISE_N_SHINE;
     71c:	5f69705f 	svcpl	0x0069705f
     720:	00646c6f 	rsbeq	r6, r4, pc, ror #24
		i_trigger (devevent (UART_A, READ));
     724:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     728:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
     72c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     730:	33697500 	cmncc	r9, #0, 10
     734:	73614232 	cmnvc	r1, #536870915	; 0x20000003
     738:	5f5f0065 	svcpl	0x005f0065
     73c:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
     740:	615f6966 	cmpvs	pc, r6, ror #18
     744:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     748:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
     74c:	4e4f4100 	dvfmie	f4, f7, f0
     750:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	6156636e 	cmpvs	r6, lr, ror #6
     758:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
     75c:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
		i_trigger (devevent (UART_A, WRITE));
     760:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
     768:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
		RISE_N_SHINE;
     76c:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     770:	61755f74 	cmnvs	r5, r4, ror pc
     774:	41007472 	tstmi	r0, r2, ror r4
		i_trigger (devevent (UART_A, WRITE));
     778:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     77c:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
     780:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     784:	0072656c 	rsbseq	r6, r2, ip, ror #10
     788:	61726170 	cmnvs	r2, r0, ror r1
     78c:	6374006d 	cmnvs	r4, #109	; 0x6d
     790:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     794:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
     798:	5f79616c 	svcpl	0x0079616c
     79c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     7a0:	5f5f0072 	svcpl	0x005f0072
}
     7a4:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
     7a8:	61656c65 	cmnvs	r5, r5, ror #24
     7ac:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
     7b0:	006f6465 	rsbeq	r6, pc, r5, ror #8
     7b4:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
void __buttons_setirq (int val) {
     7b8:	5f74696e 	svcpl	0x0074696e
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     7c0:	726f6600 	rsbvc	r6, pc, #0, 12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
     7c8:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
     7cc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		bn = BUTTON_GPIO (__button_list [i]);
     7d0:	50470065 	subpl	r0, r7, r5, rrx
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d4:	635f4f49 	cmpvs	pc, #292	; 0x124
     7d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     7dc:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     7e0:	6f694474 	svcvs	0x00694474
     7e4:	625f5f00 	subsvs	r5, pc, #0, 30
     7e8:	6f747475 	svcvs	0x00747475
}
     7ec:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     7f0:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
     7f4:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
     7f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
void __pinlist_setirq (int val) {
     7fc:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 804 <__pinlist_setirq+0x8>
	for (i = 0; i < N_PINLIST; i++) {
     800:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	53007172 	movwpl	r7, #370	; 0x172
	for (i = 0; i < N_PINLIST; i++) {
     80c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     810:	6f416c72 	svcvs	0x00416c72
     814:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     818:	5f5f0063 	svcpl	0x005f0063
     81c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     820:	6b636174 	blvs	18d8df8 <__ccfg+0x18b8e50>
	for (i = 0; i < N_PINLIST; i++) {
     824:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
}
     828:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     82c:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
     830:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
     834:	61696c69 	cmnvs	r9, r9, ror #24
void GPIOIntHandler () {
     838:	745f7972 	ldrbvc	r7, [pc], #-2418	; 840 <GPIOIntHandler+0x8>
if (buttons_int) {
     83c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     840:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	buttons_disable ();
     844:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     848:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
	i_trigger ((aword)&__button_list);
     84c:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
     850:	50470071 	subpl	r0, r7, r1, ror r0
     854:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
     858:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     85c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     860:	52415500 	subpl	r5, r1, #0, 10
     864:	46494654 			; <UNDEFINED> instruction: 0x46494654
     868:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
     86c:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
     870:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
     874:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
	RISE_N_SHINE;
     878:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
     87c:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     880:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
if (pin_sensor_int) {
     884:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     888:	00766174 	rsbseq	r6, r6, r4, ror r1
	i_trigger ((aword)(&__input_pins));
     88c:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     890:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
     894:	616c6564 	cmnvs	ip, r4, ror #10
     898:	4f410079 	svcmi	0x00410079
     89c:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     8a0:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
     8a4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     8a8:	5f00656c 	svcpl	0x0000656c
     8ac:	5f69705f 	svcpl	0x0069705f
     8b0:	0077656e 	rsbseq	r6, r7, lr, ror #10
     8b4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	__pinsen_disable_and_clear;
     8b8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
	RISE_N_SHINE;
     8bc:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     8c0:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
     8c4:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
}
     8c8:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     8cc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     8d0:	4100656c 	tstmi	r0, ip, ror #10
     8d4:	61424e4f 	cmpvs	r2, pc, asr #28
     8d8:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
void system_init () {
     8dc:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	61746c6f 	cmnvs	r4, pc, ror #24
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
     8ec:	6f690074 	svcvs	0x00690074
     8f0:	5f716572 	svcpl	0x00716572
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     8f8:	5f00615f 	svcpl	0x0000615f
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	5f69705f 	svcpl	0x0069705f
     900:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     904:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	5f007469 	svcpl	0x00007469
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	5f69705f 	svcpl	0x0069705f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	006d756e 	rsbeq	r7, sp, lr, ror #10
		pin = (port_confs [i] >> 19) & 0x1f;
     928:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 874 <GPIOIntHandler+0x3c>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92c:	616d2f65 	cmnvs	sp, r5, ror #30
     930:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     934:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     938:	706f746b 	rsbvc	r7, pc, fp, ror #8
		if (port_confs [i] & 0x80)
     93c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     944:	4349502f 	movtmi	r5, #36911	; 0x902f
		if (port_confs [i] & 0x40)
     948:	502f534f 	eorpl	r5, pc, pc, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	534f6369 	movtpl	r6, #62313	; 0xf369
     950:	3143432f 	cmpcc	r3, pc, lsr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     954:	2f585833 	svccs	0x00585833
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	6e69616d 	powvsez	f6, f1, #5.0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
	all_leds_blink;
     960:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
     964:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     968:	6142746e 	cmpvs	r2, lr, ror #8
     96c:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     970:	41550079 	cmpmi	r5, r9, ror r0
     974:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     978:	616e4574 	smcvs	58452	; 0xe454
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     980:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     984:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
     988:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
     98c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     998:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
	IntEnable (INT_AON_RTC_COMB);
     99c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     9a0:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
     9a4:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
	__pi_malloc_init ();
     9a8:	00746c61 	rsbseq	r6, r4, r1, ror #24
	IntEnable (INT_AON_GPIO_EDGE);
     9ac:	4f706f74 	svcmi	0x00706f74
     9b0:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	6174536e 	cmnvs	r4, lr, ror #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	5f006b63 	svcpl	0x00006b63
     9bc:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
     9c0:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	30545241 	subscc	r5, r4, r1, asr #4
     9c8:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     9d0:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     9d4:	53706565 	cmnpl	r0, #423624704	; 0x19400000
	urates [0] = UART_RATE / 100;
     9d8:	7065656c 	rsbvc	r6, r5, ip, ror #10
     9dc:	726f7000 	rsbvc	r7, pc, #0
	reinit_uart ();
     9e0:	6f635f74 	svcvs	0x00635f74
	EXTRA_INITIALIZERS;
     9e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9e8:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
     9f0:	5f657461 	svcpl	0x00657461
     9f4:	616c6564 	cmnvs	ip, r4, ror #10
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     9fc:	00736b63 	rsbseq	r6, r3, r3, ror #22
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
     a04:	00657275 	rsbeq	r7, r5, r5, ror r2
			devinit [i] . init (devinit [i] . param);
     a08:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
     a10:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     a14:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
	IntEnable (INT_UART0_COMB);
     a18:	5f007665 	svcpl	0x00007665
     a1c:	5f69705f 	svcpl	0x0069705f
}
     a20:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
	tci_run_auxiliary_timer ();
     a24:	5f007970 	svcpl	0x00007970
		diag ("");
     a28:	5f69705f 	svcpl	0x0069705f
     a2c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
		diag ("Leftover RAM: %d bytes",
     a38:	66710074 			; <UNDEFINED> instruction: 0x66710074
     a3c:	00656572 	rsbeq	r6, r5, r2, ror r5
     a40:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
     a44:	5f5f0071 	svcpl	0x005f0071
     a48:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     a4c:	006b726f 	rsbeq	r7, fp, pc, ror #4
     a50:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a54:	6f706d00 	svcvs	0x00706d00
     a58:	00736c6f 	rsbseq	r6, r3, pc, ror #24
     a5c:	61765f5f 	cmnvs	r6, pc, asr pc
     a60:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     a64:	74750074 	ldrbtvc	r0, [r5], #-116	; 0xffffff8c
     a68:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     a6c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     a70:	52415500 	subpl	r5, r1, #0, 10
     a74:	73754254 	cmnvc	r5, #84, 4	; 0x40000005
     a78:	5f5f0079 	svcpl	0x005f0079
     a7c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 9a4 <system_init+0xc8>	; <UNPREDICTABLE>
     a80:	6f6c6c61 	svcvs	0x006c6c61
     a84:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
     a88:	2f007469 	svccs	0x00007469
     a8c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     a90:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
__attribute__ ((noreturn)) void __pi_release () {
     a94:	2f6e6974 	svccs	0x006e6974
     a98:	6b736544 	blvs	1cd9fb0 <__ccfg+0x1cba008>
     a9c:	2f706f74 	svccs	0x00706f74
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     aa0:	4f534c4f 	svcmi	0x00534c4f
	check_stack_overflow;
     aa4:	2f54454e 	svccs	0x0054454e
     aa8:	4f434950 	svcmi	0x00434950
     aac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	update_n_wake (MAX_WORD, NO);
     ab0:	2f534f63 	svccs	0x00534f63
     ab4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     ab8:	6b2f6c65 	blvs	bdbc54 <__ccfg+0xbbbcac>
	for_all_tasks (__pi_curr) {
     abc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     ac0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     ac4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
	__SLEEP;
     acc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     ad0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     ad4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     ad8:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
	system_event_count ++;
     adc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     ae0:	616d5f69 	cmnvs	sp, r9, ror #30
	switch (__pi_systat.effpdm) {
     ae4:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
     ae8:	72630065 	rsbvc	r0, r3, #101	; 0x65
     aec:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     af0:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
			__WFI ();
     af4:	006b6863 	rsbeq	r6, fp, r3, ror #16
     af8:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
     afc:	70006565 	andvc	r6, r0, r5, ror #10
	check_stack_overflow;
     b00:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
     b04:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b08:	006e656c 	rsbeq	r6, lr, ip, ror #10
     b0c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
			goto Redo;
     b14:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
	for_all_tasks (__pi_curr) {
     b18:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	76656464 	strbtvc	r6, [r5], -r4, ror #8
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     b24:	64697000 	strbtvs	r7, [r9], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	00726576 	rsbseq	r6, r2, r6, ror r5
     b2c:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
     b30:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b34:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     b38:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b3c:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
     b40:	5f746e65 	svcpl	0x00746e65
			__WFI ();
     b44:	5f5f0074 	svcpl	0x005f0074
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	63756e67 	cmnvs	r5, #1648	; 0x670
     b4c:	5f61765f 	svcpl	0x0061765f
}
     b50:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b54:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
     b60:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b64:	00797274 	rsbseq	r7, r9, r4, ror r2
     b68:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
     b6c:	73656d00 	cmnvc	r5, #0, 26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b70:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b74:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     b78:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b7c:	61625f69 	cmnvs	r2, r9, ror #30
     b80:	61747364 	cmnvs	r4, r4, ror #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	5f006574 	svcpl	0x00006574
     b88:	5f69705f 	svcpl	0x0069705f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b94:	61775f69 	cmnvs	r7, r9, ror #30
     b98:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
     b9c:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
     ba0:	6b00646e 	blvs	19d60 <__exidx_end+0x170dc>
			SysCtrlSetRechargeBeforePowerDown
     ba4:	616c6c69 	cmnvs	ip, r9, ror #24
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	5f006c6c 	svcpl	0x00006c6c
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	5f69705f 	svcpl	0x0069705f
     bb0:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	00656572 	rsbeq	r6, r5, r2, ror r5
     bb8:	6f6f425f 	svcvs	0x006f425f
     bbc:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	006b6e75 	rsbeq	r6, fp, r5, ror lr
     bc4:	61647075 	smcvs	18181	; 0x4705
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	6b61775f 	blvs	185e950 <__ccfg+0x183e9a8>
     bd0:	5f5f0065 	svcpl	0x005f0065
     bd4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd8:	00646565 	rsbeq	r6, r4, r5, ror #10
			while (!(AONWUCPowerStatusGet () &
     bdc:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     be4:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
     be8:	5f5f0074 	svcpl	0x005f0074
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bec:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; b14 <__pi_release+0x80>	; <UNPREDICTABLE>
     bf0:	70636d65 	rsbvc	r6, r3, r5, ror #26
     bf4:	67640079 			; <UNDEFINED> instruction: 0x67640079
     bf8:	0074756f 	rsbseq	r7, r4, pc, ror #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	70615f5f 	rsbvc	r5, r1, pc, asr pc
     c00:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     c08:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
			reinit_uart ();
     c10:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
     c14:	666e006e 	strbtvs	r0, [lr], -lr, rrx
     c18:	006c6961 	rsbeq	r6, ip, r1, ror #18
}
     c1c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     c24:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
     c2c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c30:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
     c38:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c3c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c40:	70636e72 	rsbvc	r6, r3, r2, ror lr
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	5f5f0079 	svcpl	0x005f0079
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	6a5f6970 	bvs	17db210 <__ccfg+0x17bb268>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	006e696f 	rsbeq	r6, lr, pc, ror #18
     c50:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c54:	645f7265 	ldrbvs	r7, [pc], #-613	; c5c <__pi_release+0x1c8>
     c58:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5c:	5f5f0065 	svcpl	0x005f0065
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c60:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
     c68:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
			PRCMPowerDomainOff (
     c6c:	715f7663 	cmpvc	pc, r3, ror #12
     c70:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
	__SLEEP;
     c74:	65727000 	ldrbvs	r7, [r2, #-0]!
     c78:	5f5f0076 	svcpl	0x005f0076
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	5f766374 	svcpl	0x00766374
	goto Redo;
     c80:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
     c84:	00745f72 	rsbseq	r5, r4, r2, ror pc
     c88:	70766374 	rsbsvc	r6, r6, r4, ror r3
     c8c:	745f7968 	ldrbvc	r7, [pc], #-2408	; c94 <__pi_release+0x200>
     c90:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
     c94:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     c98:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     c9c:	2f006c6f 	svccs	0x00006c6f
     ca0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     ca4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     ca8:	2f6e6974 	svccs	0x006e6974
     cac:	6b736544 	blvs	1cda1c4 <__ccfg+0x1cba21c>
     cb0:	2f706f74 	svccs	0x00706f74
     cb4:	4f534c4f 	svcmi	0x00534c4f
     cb8:	2f54454e 	svccs	0x0054454e
     cbc:	4f434950 	svcmi	0x00434950
     cc0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     cc4:	2f534f63 	svccs	0x00534f63
     cc8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     ccc:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
     cd0:	2f497465 	svccs	0x00497465
     cd4:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
     cd8:	63740063 	cmnvs	r4, #99	; 0x63
     cdc:	645f7076 	ldrbvs	r7, [pc], #-118	; ce4 <__pi_release+0x250>
     ce0:	6f707369 	svcvs	0x00707369
     ce4:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
     ce8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
int main (void) {
     cec:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	656e0067 	strbvs	r0, [lr, #-103]!	; 0xffffff99
     cf4:	63007478 	movwvs	r7, #1144	; 0x478
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	745f6e75 	ldrbvc	r6, [pc], #-3701	; d04 <main+0x18>
	system_init ();
     d00:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	tcv_init ();
     d04:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d08:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
     d0c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
     d14:	63740074 	cmnvs	r4, #116	; 0x74
     d18:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1c:	74006f66 	strvc	r6, [r0], #-3942	; 0xfffff09a
     d20:	6f5f7663 	svcvs	0x005f7663
	delay (16, 0);
     d24:	006e6570 	rsbeq	r6, lr, r0, ror r5
     d28:	5f766374 	svcpl	0x00766374
     d2c:	706f7264 	rsbvc	r7, pc, r4, ror #4
	__pi_release ();
     d30:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
     d34:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
     d38:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
     d3c:	00797470 	rsbseq	r7, r9, r0, ror r4
     d40:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d44:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 3e4 <tci_run_auxiliary_timer+0x14>
     d48:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
static void killev (__pi_pcb_t *pid) {
     d4c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	wfun = (aword)(pid->code);
     d50:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
	for_all_tasks (i) {
     d54:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
		for (j = 0; j < nevents (i); j++) {
     d58:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
     d5c:	73657565 	cmnvc	r5, #423624704	; 0x19400000
     d60:	745f5f00 	ldrbvc	r5, [pc], #-3840	; d68 <killev+0x1c>
			    || i->Events [j] . Event == wfun
     d64:	715f7663 	cmpvc	pc, r3, ror #12
		for (j = 0; j < nevents (i); j++) {
     d68:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
			if (i->Events [j] . Event == (aword)pid
     d6c:	5f00735f 	svcpl	0x0000735f
     d70:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
     d74:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
				wakeupev (i, j);
     d78:	745f6d65 	ldrbvc	r6, [pc], #-3429	; d80 <killev+0x34>
     d7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; d84 <killev+0x38>
	for_all_tasks (i) {
     d80:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
}
     d84:	636f6c62 	cmnvs	pc, #25088	; 0x6200
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	00745f6b 	rsbseq	r5, r4, fp, ror #30
static void qfree (aword *ch) {
     d8c:	70747461 	rsbsvc	r7, r4, r1, ror #8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d90:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
	cc = (aword*)(mpools + MA_NP);
     d94:	00746e65 	rsbseq	r6, r4, r5, ror #28
	m_setnextp (ch, chunk);
     d98:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
	m_setnextp (cc, ch);
     d9c:	72450065 	subvc	r0, r5, #101	; 0x65
}
     da0:	0074725f 	rsbseq	r7, r4, pc, asr r2
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da4:	5f766374 	svcpl	0x00766374
     da8:	006f6c63 	rsbeq	r6, pc, r3, ror #24
     dac:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
			m_setnextp (cc, m_nextp (chunk));
     db0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
			m_size (chunk) += m_hdrlen + m_size (ch);
     db4:	0073726f 	rsbseq	r7, r3, pc, ror #4
     db8:	5f766374 	svcpl	0x00766374
     dbc:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
     dc0:	63740065 	cmnvs	r4, #101	; 0x65
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
     dcc:	6f5f7663 	svcvs	0x005f7663
     dd0:	74007475 	strvc	r7, [r0], #-1141	; 0xfffffb8b
			m_setnextp (cc, m_nextp (chunk));
     dd4:	5f707663 	svcpl	0x00707663
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	0077656e 	rsbseq	r6, r7, lr, ror #10
     ddc:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
     de0:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
     de4:	745f7663 	ldrbvc	r7, [pc], #-1635	; dec <qfree+0x64>
     de8:	7000746d 	andvc	r7, r0, sp, ror #8
     dec:	00737274 	rsbseq	r7, r3, r4, ror r2
			if (m_size (chunk) >= m_size (ch))
     df0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     df4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     df8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		chunk = m_nextp (chunk))
     dfc:	706e775f 	rsbvc	r7, lr, pc, asr r7
     e00:	63740073 	cmnvs	r4, #115	; 0x73
     e04:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	00657469 	rsbeq	r7, r5, r9, ror #8
	diag_wait (a);
     e0c:	5f766374 	svcpl	0x00766374
	diag_wchar (c, a);
     e10:	00766372 	rsbseq	r6, r6, r2, ror r3
     e14:	5f766374 	svcpl	0x00766374
}
     e18:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     e1c:	5f5f0065 	svcpl	0x005f0065
	syserror (ESTATE, "state");
     e20:	5f766374 	svcpl	0x00766374
     e24:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
     e28:	5f637365 	svcpl	0x00637365
     e2c:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
void update_n_wake (word min, Boolean force) {
     e30:	70007379 	andvc	r7, r0, r9, ror r3
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
     e38:	006c6163 	rsbeq	r6, ip, r3, ror #2
     e3c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e40:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     e44:	00646575 	rsbeq	r6, r4, r5, ror r5
     e48:	5f766374 	svcpl	0x00766374
     e4c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     e50:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e54:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     e58:	63740074 	cmnvs	r4, #116	; 0x74
     e5c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
     e60:	6573006d 	ldrbvs	r0, [r3, #-109]!	; 0xffffff93
     e64:	6f697373 	svcvs	0x00697373
     e68:	6374006e 	cmnvs	r4, #110	; 0x6e
     e6c:	635f7076 	cmpvs	pc, #118	; 0x76
     e70:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
		for_all_tasks (i) {
     e74:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__pi_mintk = znew + min;
     e78:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
     e7c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
			if (!twaiting (i))
     e80:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
     e84:	63740064 	cmnvs	r4, #100	; 0x64
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     e8c:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     e90:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     e94:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
     e98:	006e7265 	rsbeq	r7, lr, r5, ror #4
     e9c:	5f766374 	svcpl	0x00766374
     ea0:	0065706f 	rsbeq	r7, r5, pc, rrx
     ea4:	5f766374 	svcpl	0x00766374
     ea8:	00746d78 	rsbseq	r6, r4, r8, ror sp
     eac:	61766374 	cmnvs	r6, r4, ror r3
     eb0:	745f7064 	ldrbvc	r7, [pc], #-100	; eb8 <update_n_wake+0x88>
     eb4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
				wakeuptm (i);
     eb8:	756c705f 	strbvc	r7, [ip, #-95]!	; 0xffffffa1
     ebc:	65680067 	strbvs	r0, [r8, #-103]!	; 0xffffff99
		for_all_tasks (i) {
     ec0:	61006461 	tstvs	r0, r1, ror #8
				d = i->Timer - znew;
     ec4:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
     ec8:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
     ecc:	5f5f0073 	svcpl	0x005f0073
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	5f766374 	svcpl	0x00766374
     ed4:	61656871 	smcvs	22145	; 0x5681
     ed8:	00745f64 	rsbseq	r5, r4, r4, ror #30
	__pi_old = znew;
     edc:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
}
     ee0:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
	TCI_RUN_DELAY_TIMER;
     ee4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
}
     ee8:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
     eec:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
     ef0:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
     ef4:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
     ef8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
void proceed (word state) {
     efc:	63725f79 	cmnvs	r2, #484	; 0x1e4
	prcdstate (__pi_curr, state);
     f00:	71620076 	smcvc	8198	; 0x2006
     f04:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
	release;
     f08:	756c7000 	strbvc	r7, [ip, #-0]!
     f0c:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
void __pi_wait (aword event, word state) {
     f10:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f18 <__pi_wait+0x8>
	sint j = nevents (__pi_curr);
     f14:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	if (j >= MAX_EVENTS_PER_TASK)
     f18:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     f1c:	00735f6b 	rsbseq	r5, r3, fp, ror #30
     f20:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
		syserror (ENEVENTS, "sw");
     f24:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
     f28:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	setestate (__pi_curr->Events [j], state, event);
     f2c:	6f635f70 	svcvs	0x00635f70
	incwait (__pi_curr);
     f30:	6f72746e 	svcvs	0x0072746e
	setestate (__pi_curr->Events [j], state, event);
     f34:	655f006c 	ldrbvs	r0, [pc, #-108]	; ed0 <update_n_wake+0xa0>
}
     f38:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     f3c:	645f006b 	ldrbvs	r0, [pc], #-107	; f44 <__pi_trigger>
     f40:	00617461 	rsbeq	r7, r1, r1, ror #8
void __pi_trigger (aword event) {
     f44:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
	for_all_tasks (i) {
     f48:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
		for (j = 0; j < nevents (i); j++) {
     f4c:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
     f50:	5349746c 	movtpl	r7, #37996	; 0x946c
     f54:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
     f58:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
			if (i->Events [j] . Event == event) {
     f5c:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
     f60:	61485253 	cmpvs	r8, r3, asr r2
     f64:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
				wakeupev (i, j);
     f68:	655f0072 	ldrbvs	r0, [pc, #-114]	; efe <proceed+0x2>
     f6c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
	for_all_tasks (i) {
     f70:	62655f00 	rsbvs	r5, r5, #0, 30
}
     f74:	2f007373 	svccs	0x00007373
aword __pi_join (aword pid, word st) {
     f78:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	for_all_tasks (i) {
     f7c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     f80:	2f6e6974 	svccs	0x006e6974
	return 0;
     f84:	6b736544 	blvs	1cda49c <__ccfg+0x1cba4f4>
		if ((aword)i == pid) {
     f88:	2f706f74 	svccs	0x00706f74
			__pi_wait (pid, st);
     f8c:	4f534c4f 	svcmi	0x00534c4f
}
     f90:	2f54454e 	svccs	0x0054454e
	for_all_tasks (i) {
     f94:	4f434950 	svcmi	0x00434950
     f98:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
void delay (word d, word state) {
     f9c:	2f534f63 	svccs	0x00534f63
	settstate (__pi_curr, state);
     fa0:	33314343 	teqcc	r1, #201326593	; 0xc000001
     fa4:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
     fa8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     fac:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
	update_n_wake (d, YES);
     fb0:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     fb4:	73625f00 	cmnvc	r2, #0, 30
	__pi_curr->Timer = __pi_old + d;
     fb8:	655f0073 	ldrbvs	r0, [pc, #-115]	; f4d <__pi_trigger+0x9>
     fbc:	61746164 	cmnvs	r4, r4, ror #2
	inctimer (__pi_curr);
     fc0:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
     fc4:	61666544 	cmnvs	r6, r4, asr #10
     fc8:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
}
     fcc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fd0:	67007265 	strvs	r7, [r0, -r5, ror #4]
	if (fun == NULL)
     fd4:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
		return (int) __pi_curr;
     fd8:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
     fdc:	0073726f 	rsbseq	r7, r3, pc, ror #4
	for_all_tasks (i)
     fe0:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
}
     fe4:	73654432 	cmnvc	r5, #838860800	; 0x32000000
		if (i->code == fun)
     fe8:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
	for_all_tasks (i)
     fec:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     ff0:	43005253 	movwmi	r5, #595	; 0x253
     ff4:	5f474643 	svcpl	0x00474643
int __pi_strlen (const char *s) {
     ff8:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
}
    1000:	00305f44 	eorseq	r5, r0, r4, asr #30
	for (i = 0; *(s+i) != '\0'; i++);
    1004:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	while (n--)
    1008:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    100c:	4f4c5f54 	svcmi	0x004c5f54
		*dest++ = *src++;
    1010:	315f4441 	cmpcc	pc, r1, asr #8
    1014:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1018:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
		syserror (EREQPAR, "addv");
    1020:	00474946 	subeq	r4, r7, r6, asr #18
		syserror (ERESOURCE, "addv");
    1024:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (ioreq [loc] != NULL)
    1028:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    102c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
		syserror (ERESOURCE, "addv");
    1030:	00544553 	subseq	r4, r4, r3, asr r5
	ioreq [loc] = rf;
    1034:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    1038:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1040 <io>
    103c:	4f435f45 	svcmi	0x00435f45
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	5f00464e 	svcpl	0x0000464e
    1044:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    1048:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
    104c:	2f656d6f 	svccs	0x00656d6f
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1054:	442f6e69 	strtmi	r6, [pc], #-3689	; 105c <io+0x1c>
    1058:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		syserror (ENODEVICE, "io");
    105c:	4f2f706f 	svcmi	0x002f706f
    1060:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	if (len == 0)
    1064:	502f5445 	eorpl	r5, pc, r5, asr #8
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	534f4349 	movtpl	r4, #62281	; 0xf349
    106c:	6369502f 	cmnvs	r9, #47	; 0x2f
	if (ret >= 0)
    1070:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	if (ret == -1) {
    1074:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    1078:	63632f58 	cmnvs	r3, #88, 30	; 0x160
		if (retry == WNONE)
    107c:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
		iowait (dev, operation, retry);
    1080:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1084:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1088:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
			release;
    108c:	445f444e 	ldrbmi	r4, [pc], #-1102	; 1094 <io+0x54>
	if (ret == -2) {
    1090:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
		if (retry != WNONE) {
    1094:	5347414c 	movtpl	r4, #29004	; 0x714c
    1098:	46434300 	strbmi	r4, [r3], -r0, lsl #6
			iowait (dev, operation, retry);
    109c:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    10a0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; f94 <__pi_join+0x1c>
			(ioreq [dev]) (NONE, buf, len);
    10a4:	305f4341 	subscc	r4, pc, r1, asr #6
    10a8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10ac:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		(ioreq [dev]) (NONE, buf, len);
    10b0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fa4 <delay+0x8>
    10b4:	315f4341 	cmpcc	pc, r1, asr #6
    10b8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    10bc:	4f4d5f47 	svcmi	0x004d5f47
	if (retry != WNONE) {
    10c0:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
		delay (-ret - 2, retry);
    10c4:	5f464e4f 	svcpl	0x00464e4f
    10c8:	43430031 	movtmi	r0, #12337	; 0x3031
    10cc:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    10d0:	5f474643 	svcpl	0x00474643
		release;
    10d4:	5f504154 	svcpl	0x00504154
    10d8:	5f504144 	svcpl	0x00504144
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	43430030 	movtmi	r0, #12336	; 0x3030
    10e0:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    10e4:	5f474643 	svcpl	0x00474643
    10e8:	5f504154 	svcpl	0x00504154
    10ec:	5f504144 	svcpl	0x00504144
		syserror (ERESOURCE, "mal1");
    10f0:	63630031 	cmnvs	r3, #49	; 0x31
    10f4:	745f6766 	ldrbvc	r6, [pc], #-1894	; 10fc <__pi_malloc_init+0x20>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10fc:	43435f47 	movtmi	r5, #16199	; 0x3f47
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1100:	505f4746 	subspl	r4, pc, r6, asr #14
	m_size (mpools [0]) = mlen - m_hdrlen;
    1104:	5f544f52 	svcpl	0x00544f52
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1108:	5f373231 	svcpl	0x00373231
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    110c:	43003639 	movwmi	r3, #1593	; 0x639
    1110:	5f474643 	svcpl	0x00474643
}
    1114:	53415245 	movtpl	r5, #4677	; 0x1245
    1118:	4f435f45 	svcmi	0x00435f45
    111c:	4300464e 	movwmi	r4, #1614	; 0x64e
    1120:	5f474643 	svcpl	0x00474643
    1124:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1128:	4f52505f 	svcmi	0x0052505f
void __pi_free (aword *ch) {
    112c:	31335f54 	teqcc	r3, r4, asr pc
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1130:	4300305f 	movwmi	r3, #95	; 0x5f
    1134:	5f474643 	svcpl	0x00474643
		syserror (EMALLOC, "malg");
    1138:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    113c:	41565f45 	cmpmi	r6, r5, asr #30
	mcfree [MA_NP] += m_size (ch);
    1140:	5f44494c 	svcpl	0x0044494c
		m_size (ch) ^= MALLOC_UMASK;
    1144:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1148:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	mcfree [MA_NP] += m_size (ch);
    114c:	52465f47 	subpl	r5, r6, #284	; 0x11c
	QFREE;
    1150:	4f5f5145 	svcmi	0x005f5145
	if (mevent [MA_NP] . nwait) {
    1154:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
    1158:	43430054 	movtmi	r0, #12372	; 0x3054
		trigger ((aword)(&(mevent [MA_NP])));
    115c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
		mevent [MA_NP] . nwait --;
    1160:	5f474643 	svcpl	0x00474643
}
    1164:	544f5250 	strbpl	r5, [pc], #-592	; 116c <__pi_free+0x40>
    1168:	5f33365f 	svcpl	0x0033365f
    116c:	43003233 	movwmi	r3, #563	; 0x233
    1170:	5f474643 	svcpl	0x00474643
void kill (aword pid) {
    1174:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
		pid = (aword) __pi_curr;
    1178:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
	j = NULL;
    117c:	4300305f 	movwmi	r3, #95	; 0x5f
	for_all_tasks (i) {
    1180:	5f474643 	svcpl	0x00474643
	syserror (EREQPAR, "kpi");
    1184:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1188:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		if ((aword)i == pid) {
    118c:	4300315f 	movwmi	r3, #351	; 0x15f
    1190:	5f474643 	svcpl	0x00474643
				__PCB = i->Next;
    1194:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			killev (i);
    1198:	4f52505f 	svcmi	0x0052505f
			ufree (i);
    119c:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
			if (i == __pi_curr)
    11a0:	0034365f 	eorseq	r3, r4, pc, asr r6
    11a4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				release;
    11a8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
				j->Next = i->Next;
    11ac:	5f464c5f 	svcpl	0x00464c5f
    11b0:	004b4c43 	subeq	r4, fp, r3, asr #24
    11b4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    11b8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    11bc:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    11c0:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
	if (size < 8)
    11c4:	534e4f49 	movtpl	r4, #61257	; 0xef49
		_size = 2;
    11c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
		_size = (((aword)size) + 3) >> 2;
    11d0:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
		_size = (((aword)size) + 3) >> 2;
    11d8:	70006b6e 	andvc	r6, r0, lr, ror #22
		if (mevent [MA_NP] . nfail != 255)
    11dc:	735f6e69 	cmpvc	pc, #1680	; 0x690
    11e0:	6f736e65 	svcvs	0x00736e65
			mevent [MA_NP] . nfail ++;
    11e4:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
		mnfree [MA_NP] = 0;
    11e8:	70006461 	andvc	r6, r0, r1, ror #8
    11ec:	735f6e69 	cmpvc	pc, #1680	; 0x690
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	6f736e65 	svcvs	0x00736e65
    11f4:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
			syserror (EMALLOC, "malc");
    11f8:	2f007469 	svccs	0x00007469
    11fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (m_size (chunk) >= _size)
    1200:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1204:	2f6e6974 	svccs	0x006e6974
		chunk = m_nextp (chunk)) {
    1208:	6b736544 	blvs	1cda720 <__ccfg+0x1cba778>
		m_setnextp (cc, m_nextp (chunk));
    120c:	2f706f74 	svccs	0x00706f74
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1210:	4f534c4f 	svcmi	0x00534c4f
    1214:	2f54454e 	svccs	0x0054454e
			m_size (chunk) = _size;
    1218:	4f434950 	svcmi	0x00434950
			cc = chunk + _size + m_hdrlen;
    121c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1220:	2f534f63 	svccs	0x00534f63
			m_size (cc) = waste - m_hdrlen;
    1224:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			QFREE;
    1228:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
		mevent [MA_NP] . nfail = 0;
    122c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		mcfree [MA_NP] -= m_size (chunk);
    1230:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1234:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1238:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    123c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
		m_size (chunk) |= MALLOC_UMASK;
    1240:	006d7265 	rsbeq	r7, sp, r5, ror #4
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1244:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
		m_size (chunk) |= MALLOC_UMASK;
    1248:	006e6f69 	rsbeq	r6, lr, r9, ror #30
			mnfree [MA_NP] = mcfree [MA_NP];
    124c:	6f626544 	svcvs	0x00626544
}
    1250:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
    1254:	6f682f00 	svcvs	0x00682f00
    1258:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 10ac <io+0x6c>
    125c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1260:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1264:	6f746b73 	svcvs	0x00746b73
    1268:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
aword __pi_fork (fsmcode func, aword data) {
    126c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1274:	2f534f43 	svccs	0x00534f43
    1278:	4f636950 	svcmi	0x00636950
		if ((j = __PCB) == NULL)
    127c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	i->Next = NULL;
    1280:	2f736269 	svccs	0x00736269
	i->data = data;
    1284:	622f4f49 	eorvs	r4, pc, #292	; 0x124
		if ((j = __PCB) == NULL)
    1288:	6f747475 	svcvs	0x00747475
}
    128c:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
			for (; j->Next != NULL; j = j->Next);
    1290:	75627000 	strbvc	r7, [r2, #-0]!
    1294:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	return (aword) i;
    1298:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    129c:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
	if (mevent [MA_NP] . nwait != 255)
    12a0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12a4:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
    12a8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
		mevent [MA_NP] . nwait ++;
    12ac:	63615f73 	cmnvs	r1, #460	; 0x1cc
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    12b4:	6f434500 	svcvs	0x00434500
void diag (const char *mess, ...) {
    12b8:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
    12bc:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    12c0:	655f7469 	ldrbvs	r7, [pc, #-1129]	; e5f <update_n_wake+0x2f>
	diag_disable_int (a, is);
    12c4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    12c8:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
    12cc:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
				d = (bc == 16) ? 10000 : 1000000000;
    12d0:	00305f64 	eorseq	r5, r0, r4, ror #30
	diag_disable_int (a, is);
    12d4:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
	while (*mess != '\0') {
    12d8:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	dgout ('\r');
    12dc:	5f656500 	svcpl	0x00656500
	dgout ('\n');
    12e0:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    12e4:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    12e8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
	diag_wait (a);
    12ec:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
	diag_enable_int (a, is);
    12f0:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    12f4:	5f656500 	svcpl	0x00656500
}
    12f8:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    12fc:	6f435700 	svcvs	0x00435700
    1300:	6300746e 	movwvs	r7, #1134	; 0x46e
		if (*mess == '%') {
    1304:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
    1308:	73616c00 	cmnvc	r1, #0, 24
			if (*mess == 'l') {
    130c:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
    1310:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
				mess++;
    1314:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
				val = va_arg (ap, lword);
    1318:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
				bc = 32;
    131c:	6600636e 	strvs	r6, [r0], -lr, ror #6
				bc = 16;
    1320:	006d6f72 	rsbeq	r6, sp, r2, ror pc
			switch (*mess) {
    1324:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
    1328:	00646165 	rsbeq	r6, r4, r5, ror #2
    132c:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
				dgout ('%');
    1330:	6f682f00 	svcvs	0x00682f00
    1334:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1188 <kill+0x14>
				dgout (*mess);
    1338:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    133c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			switch (*mess) {
    1340:	6f746b73 	svcvs	0x00746b73
					v = __pi_hex_enc_table [
    1344:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
					i += 4;
    1348:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					(val >> (bc - i)) & 0xf];
    134c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1350:	2f534f43 	svccs	0x00534f43
					dgout (v);
    1354:	4f636950 	svcmi	0x00636950
    1358:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
				while (i < bc) {
    135c:	2f736269 	svccs	0x00736269
			mess++;
    1360:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
					d /= 10;
    1364:	2f656761 	svccs	0x00656761
				if ((val >> (bc - 1)) & 1) {
    1368:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    136c:	5f656761 	svcpl	0x00656761
					dgout ('-');
    1370:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    1374:	33303872 	teqcc	r0, #7471104	; 0x720000
						val |= 0xffff0000;
    1378:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    137c:	6f6c6363 	svcvs	0x006c6363
    1380:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1388:	706f6300 	rsbvc	r6, pc, r0, lsl #6
    138c:	63006e65 	movwvs	r6, #3685	; 0xe65
					v = (word) (val / d);
    1390:	00727470 	rsbseq	r7, r2, r0, ror r4
					if (v || d == 1) break;
    1394:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    1398:	00657a69 	rsbeq	r7, r5, r9, ror #20
					d /= 10;
    139c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
				d = (bc == 16) ? 10000 : 1000000000;
    13a0:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
					dgout (v + '0');
    13a4:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13a8:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
    13ac:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
					d /= 10;
    13b0:	00746961 	rsbseq	r6, r4, r1, ror #18
					val = val - (v * d);
    13b4:	5f746567 	svcpl	0x00746567
					if (d == 0) break;
    13b8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
					v = (word) (val / d);
    13bc:	74757000 	ldrbtvc	r7, [r5], #-0
    13c0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
				if (bc == 16)
    13c4:	5f5f0065 	svcpl	0x005f0065
				d = (bc == 16) ? 10000 : 1000000000;
    13c8:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
					val &= 0xffff;
    13cc:	00656e69 	rsbeq	r6, r5, r9, ror #28
					dgout (*s);
    13d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 131c <diag+0x64>
					s++;
    13d4:	616d2f65 	cmnvs	sp, r5, ror #30
				while (*s != '\0') {
    13d8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    13dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			dgout (*mess++);
    13e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    13e4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    13e8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    13ec:	4349502f 	movtmi	r5, #36911	; 0x902f
    13f0:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    13f4:	534f6369 	movtpl	r6, #62313	; 0xf369
    while(1)
    13f8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
{
    13fc:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    SetupTrimDevice();
    1400:	61697265 	cmnvs	r9, r5, ror #4
    pui32Src = &_etext;
    1404:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1408:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    __asm("    ldr     r0, =_bss\n"
    140c:	7300632e 	movwvc	r6, #814	; 0x32e
    1410:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1414:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
    1418:	73007363 	movwvc	r7, #867	; 0x363
    141c:	6f5f7265 	svcvs	0x005f7265
   main();
    1420:	00667475 	rsbeq	r7, r6, r5, ror r4
    FaultISR();
    1424:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1370 <diag+0xb8>
        *pui32Dest++ = *pui32Src++;
    1428:	616d2f65 	cmnvs	sp, r5, ror #30
    142c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1430:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1434:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1438:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    143c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1440:	4349502f 	movtmi	r5, #36911	; 0x902f
    1444:	502f534f 	eorpl	r5, pc, pc, asr #6
static byte get_byte () {
    1448:	534f6369 	movtpl	r6, #62313	; 0xf369
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    144c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1450:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	61697265 	cmnvs	r9, r5, ror #4
    1458:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
		if (ee_inp)
    145c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 4f2 <AONRTCIntHandler+0xfa>
			b |= 1;
    1460:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    1464:	6f682f00 	svcvs	0x00682f00
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1468:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 12bc <diag+0x4>
	for (b = 0, i = 0; i < 8; i++) {
    146c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
}
    1470:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1474:	6f746b73 	svcvs	0x00746b73
    1478:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
static void put_byte (byte b) {
    147c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1480:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1484:	2f534f43 	svccs	0x00534f43
    1488:	4f636950 	svcmi	0x00636950
		if (b & 0x80)
    148c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1490:	2f736269 	svccs	0x00736269
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1494:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	for (i = 0; i < 8; i++) {
    1498:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
		b <<= 1;
    149c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	for (i = 0; i < 8; i++) {
    14a0:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
}
    14a4:	72657300 	rsbvc	r7, r5, #0, 6
    14a8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14ac:	6f682f00 	svcvs	0x00682f00
    14b0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1304 <diag+0x4c>
	put_byte (cmd);
    14b4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    14b8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
}
    14bc:	6f746b73 	svcvs	0x00746b73
    14c0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
static void wwait (word st, word del) {
    14c4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    14c8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    14cc:	2f534f43 	svccs	0x00534f43
	while (dopen && (rdsr () & 1)) {
    14d0:	4f636950 	svcmi	0x00636950
    14d4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    14d8:	2f736269 	svccs	0x00736269
    14dc:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	put_byte (CMD_RDSR);
    14e0:	5f2f6c61 	svcpl	0x002f6c61
	r = get_byte ();
    14e4:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    14e8:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
	while (dopen && (rdsr () & 1)) {
    14ec:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
}
    14f0:	61757100 	cmnvs	r5, r0, lsl #2
		if (st == WNONE)
    14f4:	5f00746e 	svcpl	0x0000746e
    14f8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
			mdelay (1);
    14fc:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1500:	5f006c61 	svcpl	0x00006c61
			delay (del, st);
    1504:	5f4d4f5f 	svcpl	0x004d4f5f
    1508:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
			release;
    150c:	5f5f0045 	svcpl	0x005f0045
    1510:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    1514:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
static void ready () {
    1518:	6f682f00 	svcvs	0x00682f00
	if (dopen) {
    151c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1370 <diag+0xb8>
		wwait (WNONE, 1);
    1520:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1524:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1528:	6f746b73 	svcvs	0x00746b73
	dstat = 0;
    152c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
    1530:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1534:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1538:	2f534f43 	svccs	0x00534f43
	udelay (1);
    153c:	4f636950 	svcmi	0x00636950
    1540:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	udelay (1);
    1544:	2f736269 	svccs	0x00736269
		dopen = DOPEN_TEMP;
    1548:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    154c:	5f2f6c61 	svcpl	0x002f6c61
    1550:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    1554:	61697265 	cmnvs	r9, r5, ror #4
static void cclose () {
    1558:	00632e6c 	rsbeq	r2, r3, ip, ror #28
	if (dopen == DOPEN_TEMP) {
    155c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14a8 <put_byte+0x2c>
    1560:	616d2f65 	cmnvs	sp, r5, ror #30
		wwait (WNONE, 1);
    1564:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1568:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	cmd_0 (CMD_DP);
    156c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1570:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		dopen = 0;
    1574:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
    1578:	4349502f 	movtmi	r5, #36911	; 0x902f
word ee_open () {
    157c:	502f534f 	eorpl	r5, pc, pc, asr #6
	ready ();
    1580:	534f6369 	movtpl	r6, #62313	; 0xf369
	dopen = DOPEN_PERM;
    1584:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1588:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
}
    158c:	61697265 	cmnvs	r9, r5, ror #4
	if (dopen) {
    1590:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    1594:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
		dopen = DOPEN_TEMP;
    1598:	67410063 	strbvs	r0, [r1, -r3, rrx]
		cclose ();
    159c:	006e6961 	rsbeq	r6, lr, r1, ror #18
}
    15a0:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
int ser_in (word st, char *buf, int len) {
    15a4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    15a8:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
	if (len == 0)
    15ac:	73726170 	cmnvc	r2, #112, 2
	if (__inpline == NULL) {
    15b0:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
		if ((prcs = running (__inserial)) == 0) {
    15b4:	006d726f 	rsbeq	r7, sp, pc, ror #4
    15b8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
			prcs = runthread (__inserial);
    15bc:	5f645f79 	svcpl	0x00645f79
    15c0:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
			if (prcs == 0) {
    15c4:	6f682f00 	svcvs	0x00682f00
				npwait (st);
    15c8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 141c <zero_loop+0x8>
		release;
    15cc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		join (prcs, st);
    15d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    15d4:	6f746b73 	svcvs	0x00746b73
	if (*__inpline == NULL) // bin cmd
    15d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if (prcs >= len)
    15e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		prcs = len-1;
    15e4:	2f534f43 	svccs	0x00534f43
	memcpy (buf, __inpline, prcs);
    15e8:	4f636950 	svcmi	0x00636950
    15ec:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    15f0:	2f736269 	svccs	0x00736269
	ufree (__inpline);
    15f4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	__inpline = NULL;
    15f8:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
	if (*buf) // if it's NULL, it's a bin cmd
    15fc:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
		buf [prcs] = '\0';
    1600:	7600632e 	strvc	r6, [r0], -lr, lsr #6
}
    1604:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
		prcs = strlen (__inpline);
    1608:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    160c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1614 <ser_in+0x70>
		return 0;
    1610:	6f776c5f 	svcvs	0x00776c5f
    1614:	4e006472 	mcrmi	4, 0, r6, cr0, cr2, {3}
    1618:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 14e4 <wwait+0x20>
int ser_outf (word st, const char *m, ...) {
    161c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    1620:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
	if ((prcs = running (__outserial)) != 0) {
    1624:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
    1628:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
		join (prcs, st);
    162c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1630:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
		release;
    1634:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 1640 <ser_outf+0x24>
    163c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1640:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
		umwait (st);
    1644:	5f5f0065 	svcpl	0x005f0065
    1648:	33746e69 	cmncc	r4, #1680	; 0x690
	if (runstrand (__outserial, buf) == 0) {
    164c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    1650:	20554e47 	subscs	r4, r5, r7, asr #28
    1654:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
		ufree (buf);
    1658:	20332e39 	eorscs	r2, r3, r9, lsr lr
		npwait (st);
    165c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
}
    1660:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
    1664:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    1668:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    166c:	5b202965 	blpl	80bc08 <__ccfg+0x7ebc60>
int ser_inf (word st, const char *fmt, ...) {
    1670:	2f4d5241 	svccs	0x004d5241
    1674:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
	if (fmt == NULL)
    1678:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	if (__inpline == NULL) {
    167c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
		if ((prcs = running (__inserial)) == 0) {
    1680:	6172622d 	cmnvs	r2, sp, lsr #4
    1684:	2068636e 	rsbcs	r6, r8, lr, ror #6
			prcs = runthread (__inserial);
    1688:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    168c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
			if (prcs == 0) {
    1690:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
				npwait (st);
    1694:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
		release;
    1698:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
		join (prcs, st);
    169c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    16a0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
	va_start (ap, fmt);
    16a4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
	prcs = vscan (__inpline, fmt, ap);
    16a8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    16ac:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
	ufree (__inpline);
    16b0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
	__inpline = NULL;
    16b4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
}
    16b8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
    16bc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
    16c0:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
		return 0;
    16c4:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    16c8:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
    16cc:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
strand (__outserial, const char*)
    16d0:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    16d4:	662d2067 	strtvs	r2, [sp], -r7, rrx
    16d8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    16dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
endstrand
    16e0:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    16e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	ptr = data;
    16e8:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    16ec:	61746164 	cmnvs	r4, r4, ror #2
	if (*ptr)
    16f0:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
		len = strlen (ptr);
    16f4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16f8:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fc:	006d7361 	rsbeq	r7, sp, r1, ror #6
    1700:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1704:	745f3874 	ldrbvc	r3, [pc], #-2164	; 170c <__outserial+0x3c>
    1708:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    170c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	len -= quant;
    1710:	2f2e2e2f 	svccs	0x002e2e2f
    1714:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1718:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	if (len == 0) {
    171c:	6f612f62 	svcvs	0x00612f62
		ufree (data);
    1720:	61625f6e 	cmnvs	r2, lr, ror #30
		finish;
    1724:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    1728:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    172c:	43706d65 	cmnmi	r0, #6464	; 0x1940
    1730:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
    1734:	6f697463 	svcvs	0x00697463
    1738:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
    173c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
strand (__inserial, address)
    1740:	706d6554 	rsbvc	r6, sp, r4, asr r5
    1744:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    1748:	6b6e654a 	blvs	1b9ac78 <__ccfg+0x1b7acd0>
    174c:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
    1750:	73626f6a 	cmnvc	r2, #424	; 0x1a8
	if (__inpline != NULL)
    1754:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
    1758:	70756f72 	rsbsvc	r6, r5, r2, ror pc
		finish;
    175c:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1760:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
    1764:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
    1768:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    176c:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
		umwait (IM_INIT);
    1770:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 1778 <__inserial+0x38>
		release;
    1774:	73656c75 	cmnvc	r5, #29952	; 0x7500
	savedata (data);
    1778:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
	len = MAX_LINE_LENGTH;
    177c:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
	io (IM_READ, __cport, READ, ptr, 1);
    1780:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    1784:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    1788:	325f6168 	subscc	r6, pc, #104, 2
    178c:	655f305f 	ldrbvs	r3, [pc, #-95]	; 1735 <__outserial+0x65>
	if (ptr == (char*) data) { // new line
    1790:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
    1794:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		if (*ptr == '\0') { // bin cmd
    1798:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
			proceed (IM_BIN);
    179c:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
    17a0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
		if (*ptr < 0x20)
    17a4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    17a8:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
			proceed (IM_READ);
    17ac:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    17b0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 8b8 <GPIOIntHandler+0x80>
	if (*ptr == '\n' || *ptr == '\r') {
    17b4:	33746e69 	cmncc	r4, #1680	; 0x690
    17b8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    17bc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		*ptr = '\0';
    17c0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
		__inpline = (char*)data;
    17c4:	53746e65 	cmnpl	r4, #1616	; 0x650
		finish;
    17c8:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
	if (len) {
    17cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1698 <ser_inf+0x28>
		ptr++;
    17d0:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    17d4:	43435452 	movtmi	r5, #13394	; 0x3452
		len--;
    17d8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
	proceed (IM_READ);
    17dc:	6f43746e 	svcvs	0x0043746e
	io (IM_BIN, __cport, READ, ptr, 1);
    17e0:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    17e4:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    17e8:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    17ec:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    17f0:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
	len -= 2;
    17f4:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
	if (len > *ptr + 1) // 1 for 0x04
    17f8:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
    17fc:	00646165 	rsbeq	r6, r4, r5, ror #2
		len = *ptr + 1;
    1800:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1804:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
	ptr++;
    1808:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    180c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    1810:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1814:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
    1818:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    181c:	524f4e00 	subpl	r4, pc, #0, 28
    1820:	415f4d4f 	cmpmi	pc, pc, asr #26
	len -= quant;
    1824:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
		__inpline = (char*)data;
    1828:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
		finish;
    182c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	ptr += quant;
    1830:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
    1834:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
endstrand
    1838:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    183c:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
	proceed (IM_BINL);
    1840:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
endstrand
    1844:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
    1848:	63657300 	cmnvs	r5, #0, 6
    184c:	53646e41 	cmnpl	r4, #1040	; 0x410
    1850:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1854:	2f2e0063 	svccs	0x002e0063
    1858:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		if (res && (d < n))
    185c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1860:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    1864:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1868:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
			res [d] = (char) c;
    186c:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
		d++;
    1870:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    1874:	7a697300 	bvc	1a5e47c <__ccfg+0x1a3e4d4>
    1878:	70797465 	rsbsvc	r7, r9, r5, ror #8
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	4f4e0065 	svcmi	0x004e0065
    1880:	5f4d4f52 	svcpl	0x004d4f52
    1884:	62555043 	subsvs	r5, r5, #67	; 0x43
				enci (10000);
    1888:	70657361 	rsbvc	r7, r5, r1, ror #6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    188c:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
    1890:	4f4e0074 	svcmi	0x004e0074
	d = 0;
    1894:	5f4d4f52 	svcpl	0x004d4f52
		c = *fm++;
    1898:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
		if (c == '\\') {
    189c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
			if ((c = *fm++) == '\0') {
    18a0:	33697500 	cmncc	r9, #0, 10
    18a4:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
				outc ('\\');
    18a8:	33697500 	cmncc	r9, #0, 10
			if ((c = *fm++) == '\0') {
    18ac:	756f4332 	strbvc	r4, [pc, #-818]!	; 1582 <ee_open+0x6>
				outc ('\\');
    18b0:	4e00746e 	cdpmi	4, 0, cr7, cr0, cr14, {3}
    18b4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1780 <__inserial+0x40>
			outc (c);
    18b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    18bc:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
			if (c == '\0')
    18c0:	4f4e0064 	svcmi	0x004e0064
    18c4:	5f4d4f52 	svcpl	0x004d4f52
			outc (c);
    18c8:	63555043 	cmpvs	r5, #67	; 0x43
				outc (val);
    18cc:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
				val = (word) va_arg (ap, aword);
    18d0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
		if (c == '%') {
    18d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    18d8:	2f2e2e2f 	svccs	0x002e2e2f
			c = *fm++;
    18dc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
			switch (c) {
    18e0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    18e4:	70632f62 	rsbvc	r2, r3, r2, ror #30
    18e8:	00632e75 	rsbeq	r2, r3, r5, ror lr
    18ec:	4f524f4e 	svcmi	0x00524f4e
    18f0:	50435f4d 	subpl	r5, r3, sp, asr #30
    18f4:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
    18f8:	6b73616d 	blvs	1cd9eb4 <__ccfg+0x1cb9f0c>
    18fc:	31706d00 	cmncc	r0, r0, lsl #26
				outc ('%');
    1900:	00766572 	rsbseq	r6, r6, r2, ror r5
    1904:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				outc (c);
    1908:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    190c:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 174c <__inserial+0xc>
    1910:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
				if (c == '\0')
    1914:	61577465 	cmpvs	r7, r5, ror #8
				return d;
    1918:	7075656b 	rsbsvc	r6, r5, fp, ror #10
}
    191c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 180c <__inserial+0xcc>
    1920:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
			switch (c) {
    1924:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1928:	524f4e00 	subpl	r4, pc, #0, 28
    192c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
				for (i = 12; ; i -= 4) {
    1930:	70757465 	rsbsvc	r7, r5, r5, ror #8
				val = (word) va_arg (ap, aword);
    1934:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
						[ (val >> i) & 0xf ]);
    1938:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1778 <__inserial+0x38>
    193c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1940:	61577465 	cmpvs	r7, r5, ror #8
					outc (__pi_hex_enc_table
    1944:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1948:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1838 <__inserial+0xf8>
					if (i == 0)
    194c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    1950:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
				for (i = 12; ; i -= 4) {
    1954:	31676643 	cmncc	r7, r3, asr #12
				val = (word) va_arg (ap, aword);
    1958:	524f4e00 	subpl	r4, pc, #0, 28
				if (c == 'd' && (val & 0x8000) != 0) {
    195c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
				val = (word) va_arg (ap, aword);
    1960:	70757465 	rsbsvc	r7, r5, r5, ror #8
				if (c == 'd' && (val & 0x8000) != 0) {
    1964:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1968:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17a8 <__inserial+0x68>
					outc ('-');
    196c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1970:	61577465 	cmpvs	r7, r5, ror #8
					val = (~val) + 1;
    1974:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1978:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1868 <outc.5724+0xc>
				for (i = 12; ; i -= 4) {
    197c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
				enci (10000);
    1980:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1984:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    1988:	524f4e00 	subpl	r4, pc, #0, 28
    198c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1990:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1994:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1998:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17d8 <__inserial+0x98>
    199c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    19a0:	61577465 	cmpvs	r7, r5, ror #8
    19a4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    19a8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1898 <__pi_vfparse+0x1c>
    19ac:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    19b0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    19b4:	33676643 	cmncc	r7, #70254592	; 0x4300000
    19b8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    19bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    19c0:	2f2e2e2f 	svccs	0x002e2e2f
    19c4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
				if (c == 'd' || c == 'u') {
    19c8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    19cc:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
					if (c == 'd' &&
    19d0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
					val = va_arg (ap, lword);
    19d4:	4f4e0063 	svcmi	0x004e0063
					fm++;
    19d8:	5f4d4f52 	svcpl	0x004d4f52
					if (c == 'd' &&
    19dc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    19e0:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
						outc ('-');
    19e4:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    19e8:	646f4d65 	strbtvs	r4, [pc], #-3429	; 19f0 <__pi_vfparse+0x174>
						val = (~val) + 1;
    19ec:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
				enci (10000);
    19f0:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
					enci (1000000000UL);
    19f4:	6f54676e 	svcvs	0x0054676e
    19f8:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    19fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    1a00:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1a04:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1a08:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1a0c:	76655231 			; <UNDEFINED> instruction: 0x76655231
    1a10:	6f697369 	svcvs	0x00697369
    1a14:	4f41006e 	svcmi	0x0041006e
    1a18:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    1a1c:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
    1a20:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1a24:	66664f72 	uqsub16vs	r4, r6, r2
    1a28:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    1a2c:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    1a30:	6f437265 	svcvs	0x00437265
    1a34:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
				} else if (c == 'x') {
    1a38:	00746573 	rsbseq	r6, r4, r3, ror r5
					for (i = 28; ; i -= 4) {
    1a3c:	4f524f4e 	svcmi	0x00524f4e
					val = va_arg (ap, lword);
    1a40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
							[ (val >> i) & 0xf ]);
    1a44:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    1a48:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
						outc (__pi_hex_enc_table
    1a4c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1a50:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
    1a54:	5f6d6972 	svcpl	0x006d6972
						if (i == 0)
    1a58:	67696475 			; <UNDEFINED> instruction: 0x67696475
    1a5c:	33697500 	cmncc	r9, #0, 10
					for (i = 28; ; i -= 4) {
    1a60:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
					outc ('%');
    1a64:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    1a68:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1a6c:	006c7463 	rsbeq	r7, ip, r3, ror #8
					outc ('l');
    1a70:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1a74:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1a7c <__pi_vfparse+0x200>
				val = (word) va_arg (ap, aword);
    1a78:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
				outc (val);
    1a7c:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    1a80:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
				while (*st != '\0') {
    1a84:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    1a88:	6f437265 	svcvs	0x00437265
    1a8c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    1a90:	57746573 			; <UNDEFINED> instruction: 0x57746573
					outc (*st);
    1a94:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1a98:	6f724670 	svcvs	0x00724670
					st++;
    1a9c:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
		c = *fm++;
    1aa0:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    1aa4:	6b61576e 	blvs	1857864 <__ccfg+0x18378bc>
    1aa8:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
char *vform (char *res, const char *fm, va_list aq) {
    1aac:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    1ab0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
	if (res != NULL) {
    1ab4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab8:	524f4e00 	subpl	r4, pc, #0, 28
    1abc:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 1ac4 <vform+0x18>
    1ac0:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
}
    1ac4:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    1ac8:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
	fml = strlen (fm) + 17;
    1acc:	6f46746c 	svcvs	0x0046746c
    1ad0:	31434372 	hvccc	13362	; 0x3432
    1ad4:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad8:	76655277 			; <UNDEFINED> instruction: 0x76655277
    1adc:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    1ae0:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae4:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1ae8:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    1aec:	6f695666 	svcvs	0x00695666
    1af0:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
		ufree (res);
    1af4:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
		goto Again;
    1af8:	5f6d6972 	svcpl	0x006d6972
	if (buf == NULL || fmt == NULL)
    1afc:	00646f62 	rsbeq	r6, r4, r2, ror #30
int vscan (const char *buf, const char *fmt, va_list ap) {
    1b00:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
	if (buf == NULL || fmt == NULL)
    1b04:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    1b08:	6b6c4366 	blvs	1b128a8 <__ccfg+0x1af2900>
    1b0c:	524f4e00 	subpl	r4, pc, #0, 28
		    	    case 'u': scanu (lword); break;
    1b10:	4f5f4d4f 	svcmi	0x005f4d4f
			while (isspace (*buf)) buf++;
    1b14:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    1b18:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
	while (*fmt != '\0') {
    1b1c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
		if (*fmt++ != '%')
    1b20:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
		switch (*fmt++) {
    1b24:	72756300 	rsbsvc	r6, r5, #0, 6
    1b28:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1b2c:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
    1b30:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1b34:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1b38:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1b3c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
}
    1b40:	006c6156 	rsbeq	r6, ip, r6, asr r1
		switch (*fmt++) {
    1b44:	4f524f4e 	svcmi	0x00524f4e
    1b48:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b4c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1b50:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
			while (isspace (*buf)) buf++;
    1b54:	6f466d69 	svcvs	0x00466d69
    1b58:	616e4172 	smcvs	58386	; 0xe412
    1b5c:	61707962 	cmnvs	r0, r2, ror #18
    1b60:	61567373 	cmpvs	r6, r3, ror r3
    1b64:	3165756c 	cmncc	r5, ip, ror #10
    1b68:	524f4e00 	subpl	r4, pc, #0, 28
			if (*buf == '\0')
    1b6c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
			if (*buf != ',') {
    1b70:	70757465 	rsbsvc	r7, r5, r5, ror #8
			sap = va_arg (ap, char*);
    1b74:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
			nc++;
    1b78:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
			if (*buf != ',') {
    1b7c:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
				while (!isspace (*buf) && *buf != ',' &&
    1b80:	6f4c726c 	svcvs	0x004c726c
    1b84:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1b88:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1b8c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1b90:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 19c8 <__pi_vfparse+0x14c>
    1b94:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1b98:	72756300 	rsbsvc	r6, r5, #0, 6
			while (isspace (*buf)) buf++;
    1b9c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1ba0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ba4:	6d697600 	stclvs	6, cr7, [r9, #-0]
    1ba8:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    1bac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
			if (*buf == ',') buf++;
    1bb0:	62690030 	rsbvs	r0, r9, #48	; 0x30
    1bb4:	4f736169 	svcmi	0x00736169
			*sap = '\0';
    1bb8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
			break;
    1bbc:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
		    case 'd': scani (word); break;
    1bc0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1bc4:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1bc8:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1bcc:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    1bd0:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    1bd4:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1bd8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1aa4 <__pi_vfparse+0x228>
    1bdc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1be0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1be4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1be8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1bec:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1bf0:	61466648 	cmpvs	r6, r8, asr #12
    1bf4:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    1bf8:	00747261 	rsbseq	r7, r4, r1, ror #4
    1bfc:	4f524f4e 	svcmi	0x00524f4e
    1c00:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1c04:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1c08:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1c0c:	6f466d69 	svcvs	0x00466d69
    1c10:	4f635272 	svcmi	0x00635272
    1c14:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1c18:	61694249 	cmnvs	r9, r9, asr #4
    1c1c:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    1c20:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    1c24:	4161746c 	cmnmi	r1, ip, ror #8
    1c28:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    1c2c:	4f4e0074 	svcmi	0x004e0074
		    case 'u': scanu (word); break;
    1c30:	5f4d4f52 	svcpl	0x004d4f52
    1c34:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c38:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c3c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c40:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1c44:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1c48:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    1c4c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1c50:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c54:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    1c58:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    1c5c:	66437478 			; <UNDEFINED> instruction: 0x66437478
    1c60:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    1c64:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
    1c68:	61746c65 	cmnvs	r4, r5, ror #24
    1c6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c70:	33697500 	cmncc	r9, #0, 10
    1c74:	736f5832 	cmnvc	pc, #3276800	; 0x320000
		    case 'x': scanx (word); break;
    1c78:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    1c7c:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    1c80:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1c84:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1c88:	4f4e0065 	svcmi	0x004e0065
    1c8c:	5f4d4f52 	svcpl	0x004d4f52
    1c90:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c94:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c98:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c9c:	41726f46 	cmnmi	r2, r6, asr #30
    1ca0:	6f63706d 	svcvs	0x0063706d
    1ca4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1ca8:	4f4e0031 	svcmi	0x004e0031
    1cac:	5f4d4f52 	svcpl	0x004d4f52
    1cb0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cb4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cb8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cbc:	41726f46 	cmnmi	r2, r6, asr #30
    1cc0:	6f63706d 	svcvs	0x0063706d
    1cc4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1cc8:	4f4e0032 	svcmi	0x004e0032
    1ccc:	5f4d4f52 	svcpl	0x004d4f52
    1cd0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cd4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cd8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cdc:	41726f46 	cmnmi	r2, r6, asr #30
    1ce0:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1ce4:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1ce8:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    1cec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bb8 <vscan+0xbc>
			switch (*fmt++) {
    1cf0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1cf4:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    1cf8:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    1cfc:	66006574 			; <UNDEFINED> instruction: 0x66006574
    1d00:	31676663 	cmncc	r7, r3, ror #12
    1d04:	61746144 	cmnvs	r4, r4, asr #2
		    	    case 'd': scani (lword); break;
    1d08:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1d0c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d10:	734f6352 	movtvc	r6, #62290	; 0xf352
    1d14:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    1d18:	73616942 	cmnvc	r1, #1081344	; 0x108000
    1d1c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d20:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1d24:	61740065 	cmnvs	r4, r5, rrx
    1d28:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    1d2c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d30:	524f4e00 	subpl	r4, pc, #0, 28
    1d34:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1d38:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1d3c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1d40:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1d44:	6152726f 	cmpvs	r2, pc, ror #4
    1d48:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    1d4c:	67664374 			; <UNDEFINED> instruction: 0x67664374
    1d50:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1d54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d58:	2f2e2e2f 	svccs	0x002e2e2f
    1d5c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1d60:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		    	    case 'x': scanx (lword); break;
    1d64:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    1d68:	5f707574 	svcpl	0x00707574
    1d6c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    1d70:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    1d74:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1d78:	00636e49 	rsbeq	r6, r3, r9, asr #28
    1d7c:	4f524f4e 	svcmi	0x00524f4e
    1d80:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1d84:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1d88:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1d8c:	6f466d69 	svcvs	0x00466d69
    1d90:	4f635272 	svcmi	0x00635272
    1d94:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1d98:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    1d9c:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    1da0:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    1da4:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    1da8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1c74 <vscan+0x178>
    1dac:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1db0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1db4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1db8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1dbc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1dc0:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    1dc4:	616c7567 	cmnvs	ip, r7, ror #10
    1dc8:	41726f74 	cmnmi	r2, r4, ror pc
    1dcc:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    1dd0:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
		    	    case 'd': scani (lword); break;
    1dd4:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    1dd8:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    1ddc:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    1de0:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1de4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1de8:	67695370 			; <UNDEFINED> instruction: 0x67695370
    1dec:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
		    	    case 'u': scanu (lword); break;
    1df0:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    1df4:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1df8:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1dfc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e00:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e04:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e08:	41726f46 	cmnmi	r2, r6, asr #30
    1e0c:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e10:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1e14:	61566e45 	cmpvs	r6, r5, asr #28
    1e18:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1e1c:	4f524f4e 	svcmi	0x00524f4e
    1e20:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1e24:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1e28:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1e2c:	6f466d69 	svcvs	0x00466d69
    1e30:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1e34:	6f4d6853 	svcvs	0x004d6853
		    	    case 'x': scanx (lword); break;
    1e38:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    1e3c:	32336900 	eorscc	r6, r3, #0, 18
			if ((c = *buf++) == '\0')
    1e40:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    1e44:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
			sap = va_arg (ap, char*);
    1e48:	61567264 	cmpvs	r6, r4, ror #4
			nc++;
    1e4c:	6f6d006c 	svcvs	0x006d006c
			break;
    1e50:	6f436564 	svcvs	0x00436564
			while (isspace (*buf)) buf++;
    1e54:	0031666e 	eorseq	r6, r1, lr, ror #12
    1e58:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1e5c:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
						*sap++ = *buf++;
    1e60:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    1e64:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
			while (isspace (*buf)) buf++;
    1e68:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1d34 <vscan+0x238>
    1e6c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1e70:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
		return 0;
    1e74:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e78:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
		    case 'x': scanx (word); break;
    1e7c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1e80:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
		    	    case 'x': scanx (lword); break;
    1e84:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    1e88:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    1e8c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e90:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e94:	41726f46 	cmnmi	r2, r6, asr #30
    1e98:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e9c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ea0:	61566e45 	cmpvs	r6, r5, asr #28
    1ea4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1ea8:	4f524f4e 	svcmi	0x00524f4e
    1eac:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1eb0:	6f6c4343 	svcvs	0x006c4343
    1eb4:	6f536b63 	svcvs	0x00536b63
    1eb8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ebc:	00746547 	rsbseq	r6, r4, r7, asr #10
    1ec0:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1ec4:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    1ec8:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1ecc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ed0:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    1ed4:	734f3167 	movtvc	r3, #61799	; 0xf167
    1ed8:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    1edc:	62640066 	rsbvs	r0, r4, #102	; 0x66
    1ee0:	6f4c726c 	svcvs	0x004c726c
    1ee4:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1ee8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1eec:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1ef0:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1d28 <vscan+0x22c>
    1ef4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1ef8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1efc:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    1f00:	6f466d69 	svcvs	0x00466d69
    1f04:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1f08:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1f0c:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1f10:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1f14:	43646e41 	cmnmi	r4, #1040	; 0x410
    1f18:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    1f1c:	61527277 	cmpvs	r2, r7, ror r2
    1f20:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    1f24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1f28:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    1f2c:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    1f30:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1f34:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1e00 <vscan+0x304>
    1f38:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1f3c:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    1f40:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    1f44:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    1f48:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1f4c:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    1f50:	524f4e00 	subpl	r4, pc, #0, 28
    1f54:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f58:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f5c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1f60:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1f64:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    1f68:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1db0 <vscan+0x2b4>
    1f6c:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    1f70:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    1f74:	6f583233 	svcvs	0x00583233
    1f78:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1f7c:	00776f52 	rsbseq	r6, r7, r2, asr pc
    1f80:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1f84:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1f88:	6f436648 	svcvs	0x00436648
    1f8c:	4f4e006c 	svcmi	0x004e006c
    1f90:	5f4d4f52 	svcpl	0x004d4f52
    1f94:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1f98:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    1f9c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1fa0:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    1fa4:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    1fa8:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    1fac:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    1fb0:	33697500 	cmncc	r9, #0, 10
    1fb4:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    1fb8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1fbc:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1fc0:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    1fc4:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 1e00 <vscan+0x304>
    1fc8:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    1fcc:	4161746c 	cmnmi	r1, ip, ror #8
    1fd0:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    1fd4:	33690074 	cmncc	r9, #116	; 0x74
    1fd8:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    1fdc:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    1fe0:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    1fe4:	0061746c 	rsbeq	r7, r1, ip, ror #8
    1fe8:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    1fec:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ff0:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    1ff4:	50460065 	subpl	r0, r6, r5, rrx
    1ff8:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
    1ffc:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
    2000:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
    2004:	00545f32 	subseq	r5, r4, r2, lsr pc
    2008:	52545046 	subspl	r5, r4, #70	; 0x46
    200c:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
    2010:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
    2014:	6300545f 	movwvs	r5, #1119	; 0x45f
    2018:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    201c:	5300706d 	movwpl	r7, #109	; 0x6d
    2020:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2024:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1e5c <vscan+0x360>
    2028:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    202c:	50460066 	subpl	r0, r6, r6, rrx
    2030:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2034:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2038:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    203c:	6400545f 	strvs	r5, [r0], #-1119	; 0xfffffba1
    2040:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    2044:	41726464 	cmnmi	r2, r4, ror #8
    2048:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    204c:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    2050:	70007065 	andvc	r7, r0, r5, rrx
    2054:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    2058:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    205c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    2060:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2064:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2068:	524f4e00 	subpl	r4, pc, #0, 28
    206c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2070:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    2074:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    2078:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    207c:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    2080:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    2084:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    2088:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    208c:	6f447265 	svcvs	0x00447265
    2090:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2094:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1f60 <TrimAfterColdResetWakeupFromShutDown+0x7c>
    2098:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    209c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    20a0:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    20a4:	61686365 	cmnvs	r8, r5, ror #6
    20a8:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    20ac:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    20b0:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    20b4:	6f447265 	svcvs	0x00447265
    20b8:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    20bc:	2f2e2e2f 	svccs	0x002e2e2f
    20c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20c4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    20c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    20cc:	2f62696c 	svccs	0x0062696c
    20d0:	5f737973 	svcpl	0x00737973
    20d4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    20d8:	5300632e 	movwpl	r6, #814	; 0x32e
    20dc:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    20e0:	56697061 	strbtpl	r7, [r9], -r1, rrx
    20e4:	0064696f 	rsbeq	r6, r4, pc, ror #18
    20e8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    20ec:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    20f0:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    20f4:	5f525450 	svcpl	0x00525450
    20f8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    20fc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2100:	00545f33 	subseq	r5, r4, r3, lsr pc
    2104:	4f524f4e 	svcmi	0x00524f4e
    2108:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    210c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    2110:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    2114:	6f537465 	svcvs	0x00537465
    2118:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    211c:	00746547 	rsbseq	r6, r4, r7, asr #10
    2120:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2124:	616d6f44 	cmnvs	sp, r4, asr #30
    2128:	00736e69 	rsbseq	r6, r3, r9, ror #28
    212c:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    2130:	54647000 	strbtpl	r7, [r4], #-0
    2134:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2138:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    213c:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    2140:	6b636f6c 	blvs	18ddef8 <__ccfg+0x18bdf50>
    2144:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
    2148:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    214c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2150:	52500065 	subspl	r0, r0, #101	; 0x65
    2154:	6f444d43 	svcvs	0x00444d43
    2158:	6e69616d 	powvsez	f6, f1, #5.0
    215c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2160:	7000656c 	andvc	r6, r0, ip, ror #10
    2164:	004d7265 	subeq	r7, sp, r5, ror #4
    2168:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    216c:	61686365 	cmnvs	r8, r5, ror #6
    2170:	50656772 	rsbpl	r6, r5, r2, ror r7
    2174:	6f697265 	svcvs	0x00697265
    2178:	50460064 	subpl	r0, r6, r4, rrx
    217c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2180:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    2184:	5f564544 	svcpl	0x00564544
    2188:	50460054 	subpl	r0, r6, r4, asr r0
    218c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2190:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2194:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    2198:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    219c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    21a0:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    21a4:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    21a8:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    21ac:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    21b0:	414d5f52 	cmpmi	sp, r2, asr pc
    21b4:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    21b8:	7600545f 			; <UNDEFINED> instruction: 0x7600545f
    21bc:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    21c0:	53007061 	movwpl	r7, #97	; 0x61
    21c4:	63656c65 	cmnvs	r5, #25856	; 0x6500
    21c8:	43444174 	movtmi	r4, #16756	; 0x4174
    21cc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    21d0:	706e4942 	rsbvc	r4, lr, r2, asr #18
    21d4:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    21d8:	61746c65 	cmnvs	r4, r5, ror #24
    21dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    21e0:	33697500 	cmncc	r9, #0, 10
    21e4:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    21e8:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    21ec:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    21f0:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    21f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    21f8:	5f5f0065 	svcpl	0x005f0065
    21fc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2200:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2204:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2208:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    220c:	6f6c0065 	svcvs	0x006c0065
    2210:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    2214:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    2218:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    221c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2220:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2224:	52545046 	subspl	r5, r4, #70	; 0x46
    2228:	5345525f 	movtpl	r5, #21087	; 0x525f
    222c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2230:	545f3144 	ldrbpl	r3, [pc], #-324	; 2238 <NOROM_SetupGetTrimForAmpcompCtrl+0x1c>
    2234:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2238:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    223c:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    2240:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    2244:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2248:	33637243 	cmncc	r3, #805306372	; 0x30000004
    224c:	46480032 			; <UNDEFINED> instruction: 0x46480032
    2250:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2254:	61536563 	cmpvs	r3, r3, ror #10
    2258:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    225c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2260:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    2264:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    2268:	00323372 	eorseq	r3, r2, r2, ror r3
    226c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2270:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2274:	50460064 	subpl	r0, r6, r4, rrx
    2278:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2130 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x58>
    227c:	564e4145 	strbpl	r4, [lr], -r5, asr #2
    2280:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2288 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x8>
    2284:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    2288:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    228c:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 20c8 <NOROM_SetupSetVddrLevel+0x6c>
    2290:	50460064 	subpl	r0, r6, r4, rrx
    2294:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
    2298:	4f434344 	svcmi	0x00434344
    229c:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    22a0:	00545f4e 	subseq	r5, r4, lr, asr #30
    22a4:	52545046 	subspl	r5, r4, #70	; 0x46
    22a8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2134 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x5c>
    22ac:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    22b0:	00545f46 	subseq	r5, r4, r6, asr #30
    22b4:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    22b8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    22bc:	646f4d72 	strbtvs	r4, [pc], #-3442	; 22c4 <NOROM_SetupGetTrimForXoscHfCtl+0x8>
    22c0:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    22c4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    22c8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    22cc:	706e4941 	rsbvc	r4, lr, r1, asr #18
    22d0:	46007475 			; <UNDEFINED> instruction: 0x46007475
    22d4:	5f525450 	svcpl	0x00525450
    22d8:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    22dc:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    22e0:	00545f44 	subseq	r5, r4, r4, asr #30
    22e4:	52545046 	subspl	r5, r4, #70	; 0x46
    22e8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2174 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>
    22ec:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    22f0:	5000545f 	andpl	r5, r0, pc, asr r4
    22f4:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    22f8:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    22fc:	73007465 	movwvc	r7, #1125	; 0x465
    2300:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    2304:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    2308:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    230c:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    2310:	67006174 	smlsdxvs	r0, r4, r1, r6
    2314:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2318:	6f4d3233 	svcvs	0x004d3233
    231c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    2320:	48004743 	stmdami	r0, {r0, r1, r6, r8, r9, sl, lr}
    2324:	5f445241 	svcpl	0x00445241
    2328:	5f495041 	svcpl	0x00495041
    232c:	75630054 	strbvc	r0, [r3, #-84]!	; 0xffffffac
    2330:	61745372 	cmnvs	r4, r2, ror r3
    2334:	4f006574 	svcmi	0x00006574
    2338:	66484353 			; <UNDEFINED> instruction: 0x66484353
    233c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2340:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2344:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2348:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    234c:	52435f52 	subpl	r5, r3, #328	; 0x148
    2350:	5f323343 	svcpl	0x00323343
    2354:	6f610054 	svcvs	0x00610054
    2358:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    235c:	506c7463 	rsbpl	r7, ip, r3, ror #8
    2360:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    2364:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    2368:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    236c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2370:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2374:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    2378:	4e00545f 	cfmvsrmi	mvf0, r5
    237c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2248 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2380:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    2384:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2388:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    238c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    2390:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    2394:	00676e69 	rsbeq	r6, r7, r9, ror #28
    2398:	52545046 	subspl	r5, r4, #70	; 0x46
    239c:	5346485f 	movtpl	r4, #26719	; 0x685f
    23a0:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    23a4:	46415345 	strbmi	r5, [r1], -r5, asr #6
    23a8:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    23ac:	5f484354 	svcpl	0x00484354
    23b0:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    23b4:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    23b8:	70006575 	andvc	r6, r0, r5, ror r5
    23bc:	6b6f6f4c 	blvs	1bde0f4 <__ccfg+0x1bbe14c>
    23c0:	61547075 	cmpvs	r4, r5, ror r0
    23c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    23c8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    23cc:	6f437463 	svcvs	0x00437463
    23d0:	5241706d 	subpl	r7, r1, #109	; 0x6d
    23d4:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    23d8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    23dc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    23e0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    23e4:	316e6f69 	cmncc	lr, r9, ror #30
    23e8:	73655200 	cmnvc	r5, #0, 4
    23ec:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    23f0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    23f4:	6f697461 	svcvs	0x00697461
    23f8:	5200326e 	andpl	r3, r0, #-536870906	; 0xe0000006
    23fc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2400:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2404:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2408:	336e6f69 	cmncc	lr, #420	; 0x1a4
    240c:	73655200 	cmnvc	r5, #0, 4
    2410:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2414:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2418:	6f697461 	svcvs	0x00697461
    241c:	5300356e 	movwpl	r3, #1390	; 0x56e
    2420:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    2424:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2428:	6f697461 	svcvs	0x00697461
    242c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2430:	70006575 	andvc	r6, r0, r5, ror r5
    2434:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    2438:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    243c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2440:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2444:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    2448:	6f6d7461 	svcvs	0x006d7461
    244c:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    2450:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    2454:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    2458:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    245c:	50007065 	andpl	r7, r0, r5, rrx
    2460:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2464:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    2468:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    246c:	5f736c61 	svcpl	0x00736c61
    2470:	50460074 	subpl	r0, r6, r4, ror r0
    2474:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2478:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    247c:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    2480:	4e00545f 	cfmvsrmi	mvf0, r5
    2484:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2350 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x8>
    2488:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    248c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2490:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    2494:	6f565f43 	svcvs	0x00565f43
    2498:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    249c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24a0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    24a4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    24a8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    24ac:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    24b0:	73616c46 	cmnvc	r1, #17920	; 0x4600
    24b4:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    24b8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    24bc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    24c0:	4f435f52 	svcmi	0x00435f52
    24c4:	5241504d 	subpl	r5, r1, #77	; 0x4d
    24c8:	545f4645 	ldrbpl	r4, [pc], #-1605	; 24d0 <NOROM_SetupSetAonRtcSubSecInc+0x14>
    24cc:	776f7000 	strbvc	r7, [pc, -r0]!
    24d0:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    24d4:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    24d8:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    24dc:	50460073 	subpl	r0, r6, r3, ror r0
    24e0:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    24e4:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    24e8:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    24ec:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    24f0:	5f525450 	svcpl	0x00525450
    24f4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    24f8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    24fc:	00545f35 	subseq	r5, r4, r5, lsr pc
    2500:	544f5250 	strbpl	r5, [pc], #-592	; 2508 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x24>
    2504:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2508:	5f544942 	svcpl	0x00544942
    250c:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    2510:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    2514:	00797261 	rsbseq	r7, r9, r1, ror #4
    2518:	4b434150 	blmi	10d2a60 <__ccfg+0x10b2ab8>
    251c:	5f454741 	svcpl	0x00454741
    2520:	00347834 	eorseq	r7, r4, r4, lsr r8
    2524:	50494843 	subpl	r4, r9, r3, asr #16
    2528:	5059545f 	subspl	r5, r9, pc, asr r4
    252c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2530:	30343632 	eorscc	r3, r4, r2, lsr r6
    2534:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    2538:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    253c:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2540:	5f594c49 	svcpl	0x00594c49
    2544:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2548:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    254c:	4e007a69 	vmlsmi.f32	s14, s0, s19
    2550:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 241c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xd4>
    2554:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2558:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    255c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    2560:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2564:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    2568:	00796c69 	rsbseq	r6, r9, r9, ror #24
    256c:	4f524f4e 	svcmi	0x00524f4e
    2570:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2574:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2578:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    257c:	61507465 	cmpvs	r0, r5, ror #8
    2580:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    2584:	70795465 	rsbsvc	r5, r9, r5, ror #8
    2588:	4f4e0065 	svcmi	0x004e0065
    258c:	5f4d4f52 	svcpl	0x004d4f52
    2590:	70696843 	rsbvc	r6, r9, r3, asr #16
    2594:	6f666e49 	svcvs	0x00666e49
    2598:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    259c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    25a0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    25a4:	70006e6f 	andvc	r6, r0, pc, ror #28
    25a8:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    25ac:	00657079 	rsbeq	r7, r5, r9, ror r0
    25b0:	70696843 	rsbvc	r6, r9, r3, asr #16
    25b4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    25b8:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    25bc:	76655277 			; <UNDEFINED> instruction: 0x76655277
    25c0:	6f697369 	svcvs	0x00697369
    25c4:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    25c8:	50494843 	subpl	r4, r9, r3, asr #16
    25cc:	5059545f 	subspl	r5, r9, pc, asr r4
    25d0:	43435f45 	movtmi	r5, #16197	; 0x3f45
    25d4:	30313331 	eorscc	r3, r1, r1, lsr r3
    25d8:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    25dc:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    25e0:	5f796c69 	svcpl	0x00796c69
    25e4:	77680074 			; <UNDEFINED> instruction: 0x77680074
    25e8:	00766552 	rsbseq	r6, r6, r2, asr r5
    25ec:	50494843 	subpl	r4, r9, r3, asr #16
    25f0:	5059545f 	subspl	r5, r9, pc, asr r4
    25f4:	43435f45 	movtmi	r5, #16197	; 0x3f45
    25f8:	30353632 	eorscc	r3, r5, r2, lsr r6
    25fc:	43415000 	movtmi	r5, #4096	; 0x1000
    2600:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2604:	5343575f 	movtpl	r5, #14175	; 0x375f
    2608:	696d0050 	stmdbvs	sp!, {r4, r6}^
    260c:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    2610:	46007665 	strmi	r7, [r0], -r5, ror #12
    2614:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2618:	43435f59 	movtmi	r5, #16217	; 0x3f59
    261c:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    2620:	0032525f 	eorseq	r5, r2, pc, asr r2
    2624:	50494843 	subpl	r4, r9, r3, asr #16
    2628:	5059545f 	subspl	r5, r9, pc, asr r4
    262c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2630:	30353331 	eorscc	r3, r5, r1, lsr r3
    2634:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2638:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    263c:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2640:	61467069 	cmpvs	r6, r9, rrx
    2644:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2648:	43437349 	movtmi	r7, #13129	; 0x3349
    264c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2650:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2654:	5f594c49 	svcpl	0x00594c49
    2658:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    265c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2660:	50494843 	subpl	r4, r9, r3, asr #16
    2664:	5059545f 	subspl	r5, r9, pc, asr r4
    2668:	43435f45 	movtmi	r5, #16197	; 0x3f45
    266c:	30323632 	eorscc	r3, r2, r2, lsr r6
    2670:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2674:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    2678:	41460076 	hvcmi	24582	; 0x6006
    267c:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    2680:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    2684:	00787836 	rsbseq	r7, r8, r6, lsr r8
    2688:	70696863 	rsbvc	r6, r9, r3, ror #16
    268c:	006d6146 	rsbeq	r6, sp, r6, asr #2
    2690:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2694:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    2698:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    269c:	6366006e 	cmnvs	r6, #110	; 0x6e
    26a0:	50316766 	eorspl	r6, r1, r6, ror #14
    26a4:	6f746f72 	svcvs	0x00746f72
    26a8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    26ac:	746f7250 	strbtvc	r7, [pc], #-592	; 26b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x80>
    26b0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 24fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x18>
    26b4:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    26b8:	6f746365 	svcvs	0x00746365
    26bc:	00745f72 	rsbseq	r5, r4, r2, ror pc
    26c0:	544f5250 	strbpl	r5, [pc], #-592	; 26c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x94>
    26c4:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    26c8:	5f544942 	svcpl	0x00544942
    26cc:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    26d0:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    26d4:	5f35315f 	svcpl	0x0035315f
    26d8:	48430034 	stmdami	r3, {r2, r4, r5}^
    26dc:	545f5049 	ldrbpl	r5, [pc], #-73	; 26e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb0>
    26e0:	5f455059 	svcpl	0x00455059
    26e4:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    26e8:	006e776f 	rsbeq	r7, lr, pc, ror #14
    26ec:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    26f0:	5f325f56 	svcpl	0x00325f56
    26f4:	41460032 	cmpmi	r6, r2, lsr r0
    26f8:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    26fc:	3143435f 	cmpcc	r3, pc, asr r3
    2700:	00787833 	rsbseq	r7, r8, r3, lsr r8
    2704:	4b434150 	blmi	10d2c4c <__ccfg+0x10b2ca4>
    2708:	5f454741 	svcpl	0x00454741
    270c:	00377837 	eorseq	r7, r7, r7, lsr r8
    2710:	544f5250 	strbpl	r5, [pc], #-592	; 2718 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe4>
    2714:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2718:	6b6e555f 	blvs	1b97c9c <__ccfg+0x1b77cf4>
    271c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    2720:	52574800 	subspl	r4, r7, #0, 16
    2724:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2728:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    272c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 25f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x114>
    2730:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2734:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2738:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    273c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2740:	70795470 	rsbsvc	r5, r9, r0, ror r4
    2744:	57480065 	strbpl	r0, [r8, -r5, rrx]
    2748:	5f564552 	svcpl	0x00564552
    274c:	00315f32 	eorseq	r5, r1, r2, lsr pc
    2750:	544f5250 	strbpl	r5, [pc], #-592	; 2758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    2754:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2758:	5f544942 	svcpl	0x00544942
    275c:	00454c42 	subeq	r4, r5, r2, asr #24
    2760:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    2764:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    2768:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    276c:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    2770:	57480061 	strbpl	r0, [r8, -r1, rrx]
    2774:	5f564552 	svcpl	0x00564552
    2778:	00335f32 	eorseq	r5, r3, r2, lsr pc
    277c:	70696863 	rsbvc	r6, r9, r3, ror #16
    2780:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2784:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    2788:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    278c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    2790:	4f545355 	svcmi	0x00545355
    2794:	00305f4d 	eorseq	r5, r0, sp, asr #30
    2798:	50494843 	subpl	r4, r9, r3, asr #16
    279c:	5059545f 	subspl	r5, r9, pc, asr r4
    27a0:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    27a4:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 2660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x2c>
    27a8:	4300315f 	movwmi	r3, #351	; 0x15f
    27ac:	5f504948 	svcpl	0x00504948
    27b0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    27b4:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    27b8:	00303336 	eorseq	r3, r0, r6, lsr r3
    27bc:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    27c0:	5f315f56 	svcpl	0x00315f56
    27c4:	41500030 	cmpmi	r0, r0, lsr r0
    27c8:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    27cc:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    27d0:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    27d4:	2f2e006e 	svccs	0x002e006e
    27d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    27dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    27e0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    27e4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    27e8:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    27ec:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    27f0:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    27f4:	63660063 	cmnvs	r6, #99	; 0x63
    27f8:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    27fc:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2800:	68430064 	stmdavs	r3, {r2, r5, r6}^
    2804:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2808:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    280c:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    2810:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2814:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    2818:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    281c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2820:	70696843 	rsbvc	r6, r9, r3, asr #16
    2824:	6f666e49 	svcvs	0x00666e49
    2828:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    282c:	6f6e694d 	svcvs	0x006e694d
    2830:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    2834:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    2838:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    283c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2840:	4f4e0076 	svcmi	0x004e0076
    2844:	5f4d4f52 	svcpl	0x004d4f52
    2848:	70696843 	rsbvc	r6, r9, r3, asr #16
    284c:	6f666e49 	svcvs	0x00666e49
    2850:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2854:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2858:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    285c:	6f725064 	svcvs	0x00725064
    2860:	6f636f74 	svcvs	0x00636f74
    2864:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    2868:	43415000 	movtmi	r5, #4096	; 0x1000
    286c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2870:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    2874:	50005245 	andpl	r5, r0, r5, asr #4
    2878:	414b4341 	cmpmi	fp, r1, asr #6
    287c:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 233d <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x9>
    2880:	50003578 	andpl	r3, r0, r8, ror r5
    2884:	616b6361 	cmnvs	fp, r1, ror #6
    2888:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    288c:	745f6570 	ldrbvc	r6, [pc], #-1392	; 2894 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x40>
    2890:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2894:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2898:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    289c:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    28a0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    28a4:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    28a8:	5f514554 	svcpl	0x00514554
    28ac:	00305f32 	eorseq	r5, r0, r2, lsr pc
    28b0:	70696843 	rsbvc	r6, r9, r3, asr #16
    28b4:	6f666e49 	svcvs	0x00666e49
    28b8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    28bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    28c0:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    28c4:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    28c8:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    28cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2798 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    28d0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    28d4:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    28d8:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    28dc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    28e0:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    28e4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    28e8:	524f4e00 	subpl	r4, pc, #0, 28
    28ec:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 28f4 <NOROM_ChipInfo_GetChipFamily+0x28>
    28f0:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    28f4:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    28f8:	00646165 	rsbeq	r6, r4, r5, ror #2
    28fc:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    2900:	78754100 	ldmdavc	r5!, {r8, lr}^
    2904:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    2908:	61536964 	cmpvs	r3, r4, ror #18
    290c:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    2910:	00657469 	rsbeq	r7, r5, r9, ror #8
    2914:	36316975 			; <UNDEFINED> instruction: 0x36316975
    2918:	61746144 	cmnvs	r4, r4, asr #2
    291c:	33697500 	cmncc	r9, #0, 10
    2920:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    2924:	00617461 	rsbeq	r7, r1, r1, ror #8
    2928:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    292c:	61746144 	cmnvs	r4, r4, asr #2
    2930:	33697500 	cmncc	r9, #0, 10
    2934:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    2938:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    293c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2808 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d4>
    2940:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2944:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2948:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    294c:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    2950:	00657469 	rsbeq	r7, r5, r9, ror #8
    2954:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    2958:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    295c:	61563233 	cmpvs	r6, r3, lsr r2
    2960:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    2964:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    2968:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    296c:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    2970:	00646165 	rsbeq	r6, r4, r5, ror #2
    2974:	4f524f4e 	svcmi	0x00524f4e
    2978:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    297c:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    2980:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    2984:	00657469 	rsbeq	r7, r5, r9, ror #8
    2988:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    298c:	2f2e2e2f 	svccs	0x002e2e2f
    2990:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2998 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2994:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2998:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    299c:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    29a0:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    29a4:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    29a8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    29ac:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29b0:	41676552 	cmnmi	r7, r2, asr r5
    29b4:	00726464 	rsbseq	r6, r2, r4, ror #8
    29b8:	71724962 	cmnvc	r2, r2, ror #18
    29bc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    29c0:	0064656c 	rsbeq	r6, r4, ip, ror #10
    29c4:	7a69536e 	bvc	1a57784 <__ccfg+0x1a377dc>
    29c8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    29cc:	734f3233 	movtvc	r3, #62003	; 0xf233
    29d0:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    29d4:	6f58656d 	svcvs	0x0058656d
    29d8:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    29dc:	0056435f 	subseq	r4, r6, pc, asr r3
    29e0:	4f524f4e 	svcmi	0x00524f4e
    29e4:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    29e8:	5f464843 	svcpl	0x00464843
    29ec:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    29f0:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    29f4:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    29f8:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    29fc:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2a00:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2a04:	6f58706d 	svcvs	0x0058706d
    2a08:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2a0c:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    2a10:	61745377 	cmnvs	r4, r7, ror r3
    2a14:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a18:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a1c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a20:	72617000 	rsbvc	r7, r1, #0
    2a24:	31506d61 	cmpcc	r0, r1, ror #26
    2a28:	72617000 	rsbvc	r7, r1, #0
    2a2c:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2a30:	72617000 	rsbvc	r7, r1, #0
    2a34:	33506d61 	cmpcc	r0, #6208	; 0x1840
    2a38:	65727000 	ldrbvs	r7, [r2, #-0]!
    2a3c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 20ce <NOROM_SetupSetVddrLevel+0x72>
    2a40:	61745373 	cmnvs	r4, r3, ror r3
    2a44:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a48:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a4c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a50:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2a54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a58:	2f2e2e2f 	svccs	0x002e2e2f
    2a5c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2a60:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2a64:	736f2f62 	cmnvc	pc, #392	; 0x188
    2a68:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2a6c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2a70:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2a74:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2a78:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2a7c:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2a80:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2a84:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2a88:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    2a8c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2a90:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2a94:	524f4e00 	subpl	r4, pc, #0, 28
    2a98:	4f5f4d4f 	svcmi	0x005f4d4f
    2a9c:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2aa0:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2aa4:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2aa8:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2aac:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
    2ab0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2ab4:	524f4e00 	subpl	r4, pc, #0, 28
    2ab8:	4f5f4d4f 	svcmi	0x005f4d4f
    2abc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2ac0:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2ac4:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2ac8:	4f63526f 	svcmi	0x0063526f
    2acc:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2ad0:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2ad4:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2ad8:	4f4e0063 	svcmi	0x004e0063
    2adc:	5f4d4f52 	svcpl	0x004d4f52
    2ae0:	5f43534f 	svcpl	0x0043534f
    2ae4:	534f5048 	movtpl	r5, #61512	; 0xf048
    2ae8:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2aec:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2af0:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2af4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2af8:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    2afc:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2b00:	00746547 	rsbseq	r6, r4, r7, asr #10
    2b04:	4f524f4e 	svcmi	0x00524f4e
    2b08:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2b0c:	5f464843 	svcpl	0x00464843
    2b10:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2b14:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2b18:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2b1c:	416c6174 	smcmi	50708	; 0xc614
    2b20:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b24:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2b28:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2b2c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2b30:	32586174 	subscc	r6, r8, #116, 2
    2b34:	63736f00 	cmnvs	r3, #0, 30
    2b38:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2b3c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2b40:	50480073 	subpl	r0, r8, r3, ror r0
    2b44:	5f43534f 	svcpl	0x0043534f
    2b48:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    2b4c:	4f716572 	svcmi	0x00716572
    2b50:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b54:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2b58:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b5c:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    2b60:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2b64:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2b68:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    2b6c:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
    2b70:	61746c65 	cmnvs	r4, r5, ror #24
    2b74:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2b78:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2b7c:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2b80:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    2b84:	50746966 	rsbspl	r6, r4, r6, ror #18
    2b88:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2b8c:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2b90:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2b94:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2b98:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2b9c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    2ba0:	6f58656d 	svcvs	0x0058656d
    2ba4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2ba8:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    2bac:	43534f00 	cmpmi	r3, #0, 30
    2bb0:	6f536648 	svcvs	0x00536648
    2bb4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2bb8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2bbc:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    2bc0:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2a08 <NOROM_OSCClockSourceSet+0x3c>
    2bc4:	31685470 	smccc	34112	; 0x8540
    2bc8:	63734f00 	cmnvs	r3, #0, 30
    2bcc:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2bd0:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2bd4:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2bd8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2bdc:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2be0:	6b61576c 	blvs	1858998 <__ccfg+0x18389f0>
    2be4:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    2be8:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2bec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2bf0:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2bf4:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
    2bf8:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2bfc:	00436765 	subeq	r6, r3, r5, ror #14
    2c00:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2c04:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    2c08:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2c0c:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
    2c10:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2c14:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
    2c18:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
    2c1c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ae8 <NOROM_OSCClockSourceGet+0xc0>
    2c20:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2c24:	4f50485f 	svcmi	0x0050485f
    2c28:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2c2c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2c30:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2c34:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2c38:	4f79636e 	svcmi	0x0079636e
    2c3c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c40:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
    2c44:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    2c48:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
    2c4c:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    2c50:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
    2c54:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
    2c58:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2c5c:	6b636f6c 	blvs	18dea14 <__ccfg+0x18bea6c>
    2c60:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2c64:	5f006563 	svcpl	0x00006563
    2c68:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2c6c:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2c74 <__pi_hex_enc_table+0x8>
    2c70:	43667200 	cmnmi	r6, #0, 4
    2c74:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2c78:	4f716572 	svcmi	0x00716572
    2c7c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c80:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    2c84:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    2c88:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2c8c:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2c90:	4f524f4e 	svcmi	0x00524f4e
    2c94:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2c98:	5f464843 	svcpl	0x00464843
    2c9c:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2ca0:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2ca4:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
    2ca8:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    2cac:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    2cb0:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    2cb4:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2cb8:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2cbc:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2cc0:	00656475 	rsbeq	r6, r5, r5, ror r4
    2cc4:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
    2cc8:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    2ccc:	706f4367 	rsbvc	r4, pc, r7, ror #6
    2cd0:	4f4e0079 	svcmi	0x004e0079
    2cd4:	5f4d4f52 	svcpl	0x004d4f52
    2cd8:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2cdc:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
    2ce0:	61745374 	cmnvs	r4, r4, ror r3
    2ce4:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2ce8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2cec:	72617000 	rsbvc	r7, r1, #0
    2cf0:	30506d61 	subscc	r6, r0, r1, ror #26
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000020 	andeq	r0, r0, r0, lsr #32
	...
      1c:	00000140 	andeq	r0, r0, r0, asr #2
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	02018e02 	andeq	r8, r1, #2, 28
      2c:	c4c5ce8d 	strbgt	ip, [r5], #3725	; 0xe8d
      30:	00000ec3 	andeq	r0, r0, r3, asr #29
      34:	00000018 	andeq	r0, r0, r8, lsl r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	000000c8 	andeq	r0, r0, r8, asr #1
			i = k;
      40:	00000048 	andeq	r0, r0, r8, asr #32
				j->Next = k;
      44:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
      48:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
}
      4c:	00000001 	andeq	r0, r0, r1
      50:	00000020 	andeq	r0, r0, r0, lsr #32
      54:	00000000 	andeq	r0, r0, r0
      58:	00000110 	andeq	r0, r0, r0, lsl r1
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
      64:	86048505 	strhi	r8, [r4], -r5, lsl #10
      68:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      6c:	0e0a6101 	adfeqe	f6, f2, f1
      70:	000b4114 	andeq	r4, fp, r4, lsl r1
      74:	0000001c 	andeq	r0, r0, ip, lsl r0
      78:	00000000 	andeq	r0, r0, r0
      7c:	00000170 	andeq	r0, r0, r0, ror r1
      80:	0000012c 	andeq	r0, r0, ip, lsr #2
      84:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
      88:	480e4101 	stmdami	lr, {r0, r8, lr}
      8c:	0e0a6d02 	cdpeq	13, 0, cr6, cr10, cr2, {0}
	descriptors [fd] = s;
      90:	000b4204 	andeq	r4, fp, r4, lsl #4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0000000c 	andeq	r0, r0, ip
      98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (s == NULL)
      9c:	7c020001 	stcvc	0, cr0, [r2], {1}
		syserror (EMALLOC, "tcv05");
      a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      a4:	0000000c 	andeq	r0, r0, ip
      a8:	00000094 	muleq	r0, r4, r0
      ac:	0000029c 	muleq	r0, ip, r2
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000018 	andeq	r0, r0, r8, lsl r0
      b8:	00000094 	muleq	r0, r4, r0
      bc:	000002a8 	andeq	r0, r0, r8, lsr #5
      c0:	0000002c 	andeq	r0, r0, ip, lsr #32
      c4:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      c8:	41000e0a 	tstmi	r0, sl, lsl #28
      cc:	0000000b 	andeq	r0, r0, fp
      d0:	00000018 	andeq	r0, r0, r8, lsl r0
      d4:	00000094 	muleq	r0, r4, r0
      d8:	000002d4 	ldrdeq	r0, [r0], -r4
      dc:	0000002a 	andeq	r0, r0, sl, lsr #32
      e0:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      e4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      e8:	000b4204 	andeq	r4, fp, r4, lsl #4
      ec:	00000018 	andeq	r0, r0, r8, lsl r0
      f0:	00000094 	muleq	r0, r4, r0
			wwait (st, 50);
      f4:	00000300 	andeq	r0, r0, r0, lsl #6
			curr += 0x1000;
      f8:	0000003c 	andeq	r0, r0, ip, lsr r0
      fc:	83100e41 	tsthi	r0, #1040	; 0x410
		if (from >= EE_SIZE || upto < from)
     100:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     104:	00018e02 	andeq	r8, r1, r2, lsl #28
			upto = EE_SIZE - 1;
     108:	00000018 	andeq	r0, r0, r8, lsl r0
     10c:	00000094 	muleq	r0, r4, r0
     110:	00000000 	andeq	r0, r0, r0
     114:	00000040 	andeq	r0, r0, r0, asr #32
     118:	83100e41 	tsthi	r0, #1040	; 0x410
     11c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     120:	00018e02 	andeq	r8, r1, r2, lsl #28
     124:	00000014 	andeq	r0, r0, r4, lsl r0
}
     128:	00000094 	muleq	r0, r4, r0
     12c:	00000000 	andeq	r0, r0, r0
     130:	00000020 	andeq	r0, r0, r0, lsr #32
     134:	83080e42 	movwhi	r0, #36418	; 0x8e42
     138:	00018e02 	andeq	r8, r1, r2, lsl #28
     13c:	00000014 	andeq	r0, r0, r4, lsl r0
    cycles[0].onTime = numbers[0];
     140:	00000094 	muleq	r0, r4, r0
    cycles[0].offTime = numbers[1];
     144:	0000033c 	andeq	r0, r0, ip, lsr r3
    cycles[1].onTime = numbers[2];
     148:	00000054 	andeq	r0, r0, r4, asr r0
     14c:	87080e42 	strhi	r0, [r8, -r2, asr #28]
    cycles[1].offTime = numbers[3];
     150:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     154:	00000014 	andeq	r0, r0, r4, lsl r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     158:	00000094 	muleq	r0, r4, r0
     15c:	00000390 	muleq	r0, r0, r3
            number += settingsInput[i] - 48;
     160:	00000040 	andeq	r0, r0, r0, asr #32
            numberMultiplier = numberMultiplier * 10;
     164:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     168:	00018e02 	andeq	r8, r1, r2, lsl #28
     16c:	00000014 	andeq	r0, r0, r4, lsl r0
fsm root {
     170:	00000094 	muleq	r0, r4, r0
     174:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     178:	00000028 	andeq	r0, r0, r8, lsr #32
     17c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     180:	00018e02 	andeq	r8, r1, r2, lsl #28
     184:	00000014 	andeq	r0, r0, r4, lsl r0
        initCycles();
     188:	00000094 	muleq	r0, r4, r0
        ser_outf(Initial, "Enter your name: ");
     18c:	000003f8 	strdeq	r0, [r0], -r8
     190:	00000114 	andeq	r0, r0, r4, lsl r1
        ser_in(Get_Name, username, NAME_LENGTH);
     194:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     198:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Show_Menu, "Welcome %s\n\r"
     19c:	0000001c 	andeq	r0, r0, ip, lsl r0
     1a0:	00000094 	muleq	r0, r4, r0
     1a4:	0000050c 	andeq	r0, r0, ip, lsl #10
        ser_inf(Get_Choice, "%c", &choice);
     1a8:	00000050 	andeq	r0, r0, r0, asr r0
     1ac:	83180e41 	tsthi	r8, #1040	; 0x410
        if (choice == 'A' || choice == 'a'){
     1b0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     1b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     1b8:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Adjust_Intervals;
     1bc:	00000018 	andeq	r0, r0, r8, lsl r0
            proceed Monitor;
     1c0:	00000094 	muleq	r0, r4, r0
        proceed Show_Menu;
     1c4:	0000055c 	andeq	r0, r0, ip, asr r5
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c8:	00000054 	andeq	r0, r0, r4, asr r0
     1cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     1d8:	0000000c 	andeq	r0, r0, ip
        processSettingsInput(settings);
     1dc:	00000094 	muleq	r0, r4, r0
        proceed Show_Menu;
     1e0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     1e4:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e8:	00000020 	andeq	r0, r0, r0, lsr #32
     1ec:	00000094 	muleq	r0, r4, r0
     1f0:	000005e8 	andeq	r0, r0, r8, ror #11
     1f4:	00000110 	andeq	r0, r0, r0, lsl r1
     1f8:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
        proceed Show_Menu;
     1fc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     200:	87058606 	strhi	r8, [r5, -r6, lsl #12]
        ser_outf(Monitor, "Monitor (press S to stop): ");
     204:	89038804 	stmdbhi	r3, {r2, fp, pc}
     208:	00018e02 	andeq	r8, r1, r2, lsl #28
        displayCycle = YES;
     20c:	0000000c 	andeq	r0, r0, ip
        ser_inf(Await_Stop, "%c", ch);
     210:	00000094 	muleq	r0, r4, r0
     214:	00000000 	andeq	r0, r0, r0
     218:	0000000c 	andeq	r0, r0, ip
        proceed Monitor;
     21c:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     220:	00000094 	muleq	r0, r4, r0
     224:	000006f8 	strdeq	r0, [r0], -r8
        leds(1, 0);
     228:	000000c0 	andeq	r0, r0, r0, asr #1
     22c:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     230:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     234:	00000001 	andeq	r0, r0, r1
     238:	00000018 	andeq	r0, r0, r8, lsl r0
        leds(0, 0);
     23c:	00000094 	muleq	r0, r4, r0
     240:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     244:	00000044 	andeq	r0, r0, r4, asr #32
     248:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     24c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
        } else if (choice == 'S' || choice == 's') {
     254:	0000001c 	andeq	r0, r0, ip, lsl r0
            proceed Stop;
     258:	00000094 	muleq	r0, r4, r0
        } else if (choice == 'V' || choice == 'v') {
     25c:	000007fc 	strdeq	r0, [r0], -ip
            proceed View_Settings;
     260:	0000003c 	andeq	r0, r0, ip, lsr r0
        } else if (choice == 'M' || choice == 'm') {
     264:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
            proceed Monitor;
     268:	86048505 	strhi	r8, [r4], -r5, lsl #10
     26c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     270:	00000001 	andeq	r0, r0, r1
     274:	00000018 	andeq	r0, r0, r8, lsl r0
     278:	00000094 	muleq	r0, r4, r0
     27c:	00000838 	andeq	r0, r0, r8, lsr r8
     280:	000000a4 	andeq	r0, r0, r4, lsr #1
     284:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     288:	86038504 	strhi	r8, [r3], -r4, lsl #10
     28c:	00018e02 	andeq	r8, r1, r2, lsl #28
     290:	00000030 	andeq	r0, r0, r0, lsr r0
     294:	00000094 	muleq	r0, r4, r0
     298:	000008dc 	ldrdeq	r0, [r0], -ip
static void devinit_uart (int devnum) {
     29c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
	adddevfunc (ioreq_uart_a, devnum);
     2a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     2a4:	86078508 	strhi	r8, [r7], -r8, lsl #10
void udelay (volatile word n) {
     2a8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2ac:	8a038904 	bhi	e26c4 <__ccfg+0xc271c>
	while (n) {
     2b0:	02018e02 	andeq	r8, r1, #2, 28
     2b4:	cace0aa2 	bgt	ff382d44 <_estack+0xdf37dd44>
}
     2b8:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
	while (n--);
     2bc:	000ec4c5 	andeq	ip, lr, r5, asr #9
     2c0:	00000b42 	andeq	r0, r0, r2, asr #22
     2c4:	0000000c 	andeq	r0, r0, ip
		n--;
     2c8:	00000094 	muleq	r0, r4, r0
     2cc:	00000000 	andeq	r0, r0, r0
     2d0:	00000024 	andeq	r0, r0, r4, lsr #32
void mdelay (volatile word n) {
     2d4:	0000000c 	andeq	r0, r0, ip
     2d8:	00000094 	muleq	r0, r4, r0
	while (n) {
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	00000028 	andeq	r0, r0, r8, lsr #32
}
     2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
		udelay (999);
     2e8:	00000094 	muleq	r0, r4, r0
     2ec:	00000a94 	muleq	r0, r4, sl
		n--;
     2f0:	00000258 	andeq	r0, r0, r8, asr r2
     2f4:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     2f8:	8e028b03 	vmlahi.f64	d8, d2, d3
     2fc:	180e4101 	stmdane	lr, {r0, r8, lr}
void __pi_ondomain (lword d) {
     300:	00070d42 	andeq	r0, r7, r2, asr #26
     304:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.effpdm > 1)
     308:	00000094 	muleq	r0, r4, r0
     30c:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
     310:	00000030 	andeq	r0, r0, r0, lsr r0
	PRCMPowerDomainOn (d);
     314:	83080e42 	movwhi	r0, #36418	; 0x8e42
     318:	00018e02 	andeq	r8, r1, r2, lsl #28
     31c:	00000018 	andeq	r0, r0, r8, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     320:	00000094 	muleq	r0, r4, r0
     324:	00000000 	andeq	r0, r0, r0
     328:	0000005c 	andeq	r0, r0, ip, asr r0
	__pi_systat.ondmns |= d;
     32c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     330:	86038504 	strhi	r8, [r3], -r4, lsl #10
}
     334:	00018e02 	andeq	r8, r1, r2, lsl #28
     338:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_syserror (word ec, const char *m) {
     33c:	00000094 	muleq	r0, r4, r0
	diag ("SYSERR: %x, %s", ec, m);
     340:	00000cec 	andeq	r0, r0, ip, ror #25
     344:	00000060 	andeq	r0, r0, r0, rrx
  __ASM volatile ("cpsid i" : : : "memory");
     348:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     34c:	00018e02 	andeq	r8, r1, r2, lsl #28
     350:	0000000c 	andeq	r0, r0, ip
     354:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		all_leds_blink;
     358:	7c020001 	stcvc	0, cr0, [r2], {1}
     35c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     360:	00000018 	andeq	r0, r0, r8, lsl r0
     364:	00000350 	andeq	r0, r0, r0, asr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     368:	00000d4c 	andeq	r0, r0, ip, asr #26
     36c:	0000003c 	andeq	r0, r0, ip, lsr r0
     370:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     374:	86038504 	strhi	r8, [r3], -r4, lsl #10
     378:	00018e02 	andeq	r8, r1, r2, lsl #28
     37c:	00000018 	andeq	r0, r0, r8, lsl r0
	while (1) {
     380:	00000350 	andeq	r0, r0, r0, asr r3
     384:	00000d88 	andeq	r0, r0, r8, lsl #27
     388:	00000080 	andeq	r0, r0, r0, lsl #1
     38c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
void tci_run_delay_timer () {
     390:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	setdel = __pi_mintk - __pi_old;
     394:	00000001 	andeq	r0, r0, r1
     398:	0000000c 	andeq	r0, r0, ip
     39c:	00000350 	andeq	r0, r0, r0, asr r3
     3a0:	00000e08 	andeq	r0, r0, r8, lsl #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	00000018 	andeq	r0, r0, r8, lsl r0
     3a8:	00000014 	andeq	r0, r0, r4, lsl r0
     3ac:	00000350 	andeq	r0, r0, r0, asr r3
     3b0:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b4:	00000024 	andeq	r0, r0, r4, lsr #32
	sti_tim;
     3b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
     3bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     3c0:	00000014 	andeq	r0, r0, r4, lsl r0
     3c4:	00000350 	andeq	r0, r0, r0, asr r3
     3c8:	00000e20 	andeq	r0, r0, r0, lsr #28
     3cc:	00000010 	andeq	r0, r0, r0, lsl r0
	cli_aux;
     3d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3d4:	00018e02 	andeq	r8, r1, r2, lsl #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d8:	00000014 	andeq	r0, r0, r4, lsl r0
     3dc:	00000350 	andeq	r0, r0, r0, asr r3
     3e0:	00000000 	andeq	r0, r0, r0
     3e4:	0000002c 	andeq	r0, r0, ip, lsr #32
	sti_aux;
     3e8:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
}
     3ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     3f0:	00000014 	andeq	r0, r0, r4, lsl r0
     3f4:	00000350 	andeq	r0, r0, r0, asr r3
void AONRTCIntHandler () {
     3f8:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3fc:	0000004c 	andeq	r0, r0, ip, asr #32
     400:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     404:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [0] == 0)
     408:	0000000c 	andeq	r0, r0, ip
     40c:	00000350 	andeq	r0, r0, r0, asr r3
		if (*(__pi_utims [0])) {
     410:	00000000 	andeq	r0, r0, r0
     414:	00000006 	andeq	r0, r0, r6
			(*(__pi_utims [0]))--;
     418:	00000028 	andeq	r0, r0, r8, lsr #32
		if (__pi_utims [1] == 0)
     41c:	00000350 	andeq	r0, r0, r0, asr r3
		if (*(__pi_utims [1])) {
     420:	00000e30 	andeq	r0, r0, r0, lsr lr
			aux_timer_inactive = 0;
     424:	000000cc 	andeq	r0, r0, ip, asr #1
			(*(__pi_utims [1]))--;
     428:	83180e41 	tsthi	r8, #1040	; 0x410
		if (__pi_utims [2] == 0)
     42c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (*(__pi_utims [2])) {
     430:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			(*(__pi_utims [2]))--;
     434:	02018e02 	andeq	r8, r1, #2, 28
		if (__pi_utims [3] != 0) {
     438:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
			if (*(__pi_utims [3])) {
     43c:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
				aux_timer_inactive = 0;
     440:	0b42000e 	bleq	1080480 <__ccfg+0x10604d8>
				(*(__pi_utims [3]))--;
     444:	00000014 	andeq	r0, r0, r4, lsl r0
	if (__pi_systat.ledsts) {
     448:	00000350 	andeq	r0, r0, r0, asr r3
     44c:	00000efc 	strdeq	r0, [r0], -ip
		if (__pi_systat.ledblc++ == 0) {
     450:	00000014 	andeq	r0, r0, r4, lsl r0
     454:	83080e41 	movwhi	r0, #36417	; 0x8e41
			if (__pi_systat.ledblk) {
     458:	00018e02 	andeq	r8, r1, r2, lsl #28
     45c:	00000014 	andeq	r0, r0, r4, lsl r0
     460:	00000350 	andeq	r0, r0, r0, asr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     464:	00000f10 	andeq	r0, r0, r0, lsl pc
     468:	00000034 	andeq	r0, r0, r4, lsr r0
				if (__pi_systat.ledsts & 0x2)
     46c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     470:	00018e02 	andeq	r8, r1, r2, lsl #28
     474:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x4)
     478:	00000350 	andeq	r0, r0, r0, asr r3
				__pi_systat.ledblk = 0;
     47c:	00000f44 	andeq	r0, r0, r4, asr #30
     480:	00000034 	andeq	r0, r0, r4, lsr r0
			if (__pi_systat.fstblk)
     484:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     488:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				__pi_systat.ledblc = 200;
     48c:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     490:	00000018 	andeq	r0, r0, r8, lsl r0
		cli_tim;
     494:	00000350 	andeq	r0, r0, r0, asr r3
		__pi_new += setdel;
     498:	00000000 	andeq	r0, r0, r0
     49c:	0000002c 	andeq	r0, r0, ip, lsr #32
		setdel = 0;
     4a0:	83100e41 	tsthi	r0, #1040	; 0x410
		RISE_N_SHINE;
     4a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		__pi_new += setdel;
     4a8:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     4ac:	00000014 	andeq	r0, r0, r4, lsl r0
     4b0:	00000350 	andeq	r0, r0, r0, asr r3
		aux_timer_inactive = 1;
     4b4:	00000f78 	andeq	r0, r0, r8, ror pc
     4b8:	00000024 	andeq	r0, r0, r4, lsr #32
				if (__pi_systat.ledsts & 0x1)
     4bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c4:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x2)
     4c8:	00000350 	andeq	r0, r0, r0, asr r3
     4cc:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     4d0:	00000038 	andeq	r0, r0, r8, lsr r0
				if (__pi_systat.ledsts & 0x8)
     4d4:	83100e41 	tsthi	r0, #1040	; 0x410
				__pi_systat.ledblk = 1;
     4d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4dc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (aux_timer_inactive) {
     4e0:	0000000c 	andeq	r0, r0, ip
			cli_aux;
     4e4:	00000350 	andeq	r0, r0, r0, asr r3
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	00000014 	andeq	r0, r0, r4, lsl r0
     4f0:	00000014 	andeq	r0, r0, r4, lsl r0
     4f4:	00000350 	andeq	r0, r0, r0, asr r3
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	00000040 	andeq	r0, r0, r0, asr #32
     500:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     504:	00018e02 	andeq	r8, r1, r2, lsl #28
     508:	00000014 	andeq	r0, r0, r4, lsl r0
word tci_update_delay_ticks (Boolean force) {
     50c:	00000350 	andeq	r0, r0, r0, asr r3
	cli_tim;
     510:	00000000 	andeq	r0, r0, r0
     514:	00000018 	andeq	r0, r0, r8, lsl r0
	if (setdel) {
     518:	83080e41 	movwhi	r0, #36417	; 0x8e41
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	00018e02 	andeq	r8, r1, r2, lsl #28
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     520:	0000000c 	andeq	r0, r0, ip
     524:	00000350 	andeq	r0, r0, r0, asr r3
     528:	00000fd4 	ldrdeq	r0, [r0], -r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	00000024 	andeq	r0, r0, r4, lsr #32
				AON_RTC_O_CH0CMP)) - gettav ());
     530:	0000000c 	andeq	r0, r0, ip
	return NO;
     534:	00000350 	andeq	r0, r0, r0, asr r3
			setdel = 0;
     538:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     53c:	00000020 	andeq	r0, r0, r0, lsr #32
     540:	0000000c 	andeq	r0, r0, ip
}
     544:	00000350 	andeq	r0, r0, r0, asr r3
		sti_tim;
     548:	00000ff8 	strdeq	r0, [r0], -r8
		return YES;
     54c:	0000000e 	andeq	r0, r0, lr
     550:	0000000c 	andeq	r0, r0, ip
     554:	00000350 	andeq	r0, r0, r0, asr r3
     558:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     55c:	00000010 	andeq	r0, r0, r0, lsl r0
	UARTDisable (UART0_BASE);
     560:	0000000c 	andeq	r0, r0, ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     564:	00000350 	andeq	r0, r0, r0, asr r3
	UARTDisable (UART0_BASE);
     568:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
     56c:	0000001c 	andeq	r0, r0, ip, lsl r0
     570:	0000000c 	andeq	r0, r0, ip
     574:	00000350 	andeq	r0, r0, r0, asr r3
     578:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     57c:	00000010 	andeq	r0, r0, r0, lsl r0
     580:	0000000c 	andeq	r0, r0, ip
     584:	00000350 	andeq	r0, r0, r0, asr r3
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     588:	00000000 	andeq	r0, r0, r0
     58c:	00000006 	andeq	r0, r0, r6
     590:	0000000c 	andeq	r0, r0, ip
	urates [0] = rate;
     594:	00000350 	andeq	r0, r0, r0, asr r3
}
     598:	00001006 	andeq	r1, r0, r6
     59c:	00000014 	andeq	r0, r0, r4, lsl r0
     5a0:	0000000c 	andeq	r0, r0, ip
     5a4:	00000350 	andeq	r0, r0, r0, asr r3
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	0000000e 	andeq	r0, r0, lr
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5b0:	00000014 	andeq	r0, r0, r4, lsl r0
     5b4:	00000350 	andeq	r0, r0, r0, asr r3
     5b8:	0000101c 	andeq	r1, r0, ip, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5bc:	00000024 	andeq	r0, r0, r4, lsr #32
     5c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c8:	00000020 	andeq	r0, r0, r0, lsr #32
	__pi_uart_setrate (urates [0], __pi_uart);
     5cc:	00000350 	andeq	r0, r0, r0, asr r3
     5d0:	00001040 	andeq	r1, r0, r0, asr #32
     5d4:	0000009c 	muleq	r0, ip, r0
     5d8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     5dc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     5e0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     5e4:	89038804 	stmdbhi	r3, {r2, fp, pc}
	switch (operation) {
     5e8:	00018e02 	andeq	r8, r1, r2, lsl #28
static int ioreq_uart_a (int operation, char *buf, int len) {
     5ec:	00000014 	andeq	r0, r0, r4, lsl r0
     5f0:	00000350 	andeq	r0, r0, r0, asr r3
     5f4:	000010dc 	ldrdeq	r1, [r0], -ip
     5f8:	00000050 	andeq	r0, r0, r0, asr r0
     5fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
				*buf++ = uart_a_read;
     600:	00018e02 	andeq	r8, r1, r2, lsl #28
     604:	00000014 	andeq	r0, r0, r4, lsl r0
			while (len && uart_a_char_available) {
     608:	00000350 	andeq	r0, r0, r0, asr r3
     60c:	0000112c 	andeq	r1, r0, ip, lsr #2
     610:	00000048 	andeq	r0, r0, r8, asr #32
			if (len != operation) {
     614:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
     618:	00018e02 	andeq	r8, r1, r2, lsl #28
     61c:	00000014 	andeq	r0, r0, r4, lsl r0
			uart_a_disable_int;
     620:	00000350 	andeq	r0, r0, r0, asr r3
			if (uart_a_char_available) {
     624:	00001174 	andeq	r1, r0, r4, ror r1
				*buf++ = uart_a_read;
     628:	00000050 	andeq	r0, r0, r0, asr r0
			uart_a_disable_int;
     62c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     630:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (uart_a_char_available) {
     634:	00000020 	andeq	r0, r0, r0, lsr #32
     638:	00000350 	andeq	r0, r0, r0, asr r3
				uart_a_enable_int;
     63c:	00000000 	andeq	r0, r0, r0
     640:	00000058 	andeq	r0, r0, r8, asr r0
				goto Redo_rx;
     644:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     64c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			return -2;
     650:	89038804 	stmdbhi	r3, {r2, fp, pc}
     654:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_write (*buf);
     658:	00000018 	andeq	r0, r0, r8, lsl r0
     65c:	00000350 	andeq	r0, r0, r0, asr r3
			while (len && uart_a_room_in_tx) {
     660:	000011c4 	andeq	r1, r0, r4, asr #3
     664:	000000a8 	andeq	r0, r0, r8, lsr #1
     668:	83100e44 	tsthi	r0, #68, 28	; 0x440
			if (len != operation) {
     66c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			uart_a_disable_int;
     670:	00018e02 	andeq	r8, r1, r2, lsl #28
     674:	00000018 	andeq	r0, r0, r8, lsl r0
			if (uart_a_room_in_tx) {
     678:	00000350 	andeq	r0, r0, r0, asr r3
     67c:	0000126c 	andeq	r1, r0, ip, ror #4
				uart_a_enable_int;
     680:	00000034 	andeq	r0, r0, r4, lsr r0
     684:	83100e41 	tsthi	r0, #1040	; 0x410
				*buf++ = uart_a_read;
     688:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (uart_a_room_in_tx) {
     68c:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_write (*buf);
     690:	0000000c 	andeq	r0, r0, ip
     694:	00000350 	andeq	r0, r0, r0, asr r3
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     698:	000012a0 	andeq	r1, r0, r0, lsr #5
     69c:	00000018 	andeq	r0, r0, r8, lsl r0
			uart_a_enable_int;
     6a0:	00000014 	andeq	r0, r0, r4, lsl r0
     6a4:	00000350 	andeq	r0, r0, r0, asr r3
     6a8:	00000000 	andeq	r0, r0, r0
			return 0;
     6ac:	00000030 	andeq	r0, r0, r0, lsr r0
			if (len == UART_CNTRL_SETRATE) {
     6b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6b8:	00000014 	andeq	r0, r0, r4, lsl r0
     6bc:	00000350 	andeq	r0, r0, r0, asr r3
				syserror (EREQPAR, "uar");
     6c0:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     6c4:	00000038 	andeq	r0, r0, r8, lsr r0
			if (len == UART_CNTRL_GETRATE) {
     6c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				return 1;
     6cc:	00018e02 	andeq	r8, r1, r2, lsl #28
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6d0:	00000040 	andeq	r0, r0, r0, asr #32
			syserror (ENOOPER, "uai");
     6d4:	00000350 	andeq	r0, r0, r0, asr r3
     6d8:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
     6dc:	0000013c 	andeq	r0, r0, ip, lsr r1
     6e0:	80100e41 	andshi	r0, r0, r1, asr #28
     6e4:	82038104 	andhi	r8, r3, #4, 2
     6e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     6ec:	0b84380e 	bleq	fe10e72c <_estack+0xde10972c>
     6f0:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6f4:	07880887 	streq	r0, [r8, r7, lsl #17]
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f8:	058e0689 	streq	r0, [lr, #1673]	; 0x689
void UART0IntHandler () {
     6fc:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     704:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     708:	c341100e 	movtgt	r1, #4110	; 0x100e
     70c:	0ec0c1c2 	acseqdm	f4, f2
     710:	000b4100 	andeq	r4, fp, r0, lsl #2
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     714:	0000000c 	andeq	r0, r0, ip
     718:	00000350 	andeq	r0, r0, r0, asr r3
		RISE_N_SHINE;
     71c:	00000000 	andeq	r0, r0, r0
     720:	00000024 	andeq	r0, r0, r4, lsr #32
		i_trigger (devevent (UART_A, READ));
     724:	0000000c 	andeq	r0, r0, ip
     728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     72c:	7c020001 	stcvc	0, cr0, [r2], {1}
     730:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     734:	00000014 	andeq	r0, r0, r4, lsl r0
     738:	00000724 	andeq	r0, r0, r4, lsr #14
     73c:	00000000 	andeq	r0, r0, r0
     740:	00000016 	andeq	r0, r0, r6, lsl r0
     744:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     748:	00018e02 	andeq	r8, r1, r2, lsl #28
     74c:	0000000c 	andeq	r0, r0, ip
     750:	00000724 	andeq	r0, r0, r4, lsr #14
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     754:	00000000 	andeq	r0, r0, r0
     758:	0000001a 	andeq	r0, r0, sl, lsl r0
     75c:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     760:	00000724 	andeq	r0, r0, r4, lsr #14
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     764:	00000000 	andeq	r0, r0, r0
     768:	0000000e 	andeq	r0, r0, lr
		RISE_N_SHINE;
     76c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     770:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     774:	000ec3ce 	andeq	ip, lr, lr, asr #7
		i_trigger (devevent (UART_A, WRITE));
     778:	00000018 	andeq	r0, r0, r8, lsl r0
     77c:	00000724 	andeq	r0, r0, r4, lsr #14
     780:	00000000 	andeq	r0, r0, r0
     784:	0000004c 	andeq	r0, r0, ip, asr #32
     788:	83100e41 	tsthi	r0, #1040	; 0x410
     78c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     790:	00018e02 	andeq	r8, r1, r2, lsl #28
     794:	00000020 	andeq	r0, r0, r0, lsr #32
     798:	00000724 	andeq	r0, r0, r4, lsr #14
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     7a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7a8:	5f018e02 	svcpl	0x00018e02
     7ac:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7b0:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     7b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
void __buttons_setirq (int val) {
     7b8:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7bc:	00000724 	andeq	r0, r0, r4, lsr #14
     7c0:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	00000070 	andeq	r0, r0, r0, ror r0
     7c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7cc:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		bn = BUTTON_GPIO (__button_list [i]);
     7d0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d4:	430b4200 	movwmi	r4, #45568	; 0xb200
     7d8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     7e0:	00000724 	andeq	r0, r0, r4, lsr #14
     7e4:	00000000 	andeq	r0, r0, r0
     7e8:	000000c0 	andeq	r0, r0, r0, asr #1
}
     7ec:	82080e41 	andhi	r0, r8, #1040	; 0x410
     7f0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7f4:	0a84300e 	beq	fe10c834 <_estack+0xde107834>
     7f8:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
void __pinlist_setirq (int val) {
     7fc:	06880787 	streq	r0, [r8], r7, lsl #15
	for (i = 0; i < N_PINLIST; i++) {
     800:	048a0589 	streq	r0, [sl], #1417	; 0x589
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     804:	0a6b038e 	beq	1ac1644 <__ccfg+0x1aa169c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
	for (i = 0; i < N_PINLIST; i++) {
     80c:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     810:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     814:	c2c34108 	sbcgt	r4, r3, #8, 2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     818:	0b41000e 	bleq	1040858 <__ccfg+0x10208b0>
     81c:	0000001c 	andeq	r0, r0, ip, lsl r0
     820:	00000724 	andeq	r0, r0, r4, lsr #14
	for (i = 0; i < N_PINLIST; i++) {
     824:	00000000 	andeq	r0, r0, r0
}
     828:	0000006c 	andeq	r0, r0, ip, rrx
     82c:	83180e42 	tsthi	r8, #1056	; 0x420
     830:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     834:	87038604 	strhi	r8, [r3, -r4, lsl #12]
void GPIOIntHandler () {
     838:	00018e02 	andeq	r8, r1, r2, lsl #28
if (buttons_int) {
     83c:	0000000c 	andeq	r0, r0, ip
     840:	00000724 	andeq	r0, r0, r4, lsr #14
	buttons_disable ();
     844:	00000000 	andeq	r0, r0, r0
     848:	00000024 	andeq	r0, r0, r4, lsr #32
	i_trigger ((aword)&__button_list);
     84c:	00000018 	andeq	r0, r0, r8, lsl r0
     850:	00000724 	andeq	r0, r0, r4, lsr #14
     854:	00000000 	andeq	r0, r0, r0
     858:	00000080 	andeq	r0, r0, r0, lsl #1
     85c:	83100e42 	tsthi	r0, #1056	; 0x420
     860:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     864:	00018e02 	andeq	r8, r1, r2, lsl #28
     868:	00000014 	andeq	r0, r0, r4, lsl r0
     86c:	00000724 	andeq	r0, r0, r4, lsr #14
     870:	00000000 	andeq	r0, r0, r0
     874:	00000070 	andeq	r0, r0, r0, ror r0
	RISE_N_SHINE;
     878:	83080e42 	movwhi	r0, #36418	; 0x8e42
     87c:	00018e02 	andeq	r8, r1, r2, lsl #28
     880:	00000018 	andeq	r0, r0, r8, lsl r0
if (pin_sensor_int) {
     884:	00000724 	andeq	r0, r0, r4, lsr #14
     888:	00000000 	andeq	r0, r0, r0
	i_trigger ((aword)(&__input_pins));
     88c:	00000078 	andeq	r0, r0, r8, ror r0
     890:	83100e42 	tsthi	r0, #1056	; 0x420
     894:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     898:	00018e02 	andeq	r8, r1, r2, lsl #28
     89c:	00000020 	andeq	r0, r0, r0, lsr #32
     8a0:	00000724 	andeq	r0, r0, r4, lsr #14
     8a4:	00000000 	andeq	r0, r0, r0
     8a8:	000000bc 	strheq	r0, [r0], -ip
     8ac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     8b0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     8b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	__pinsen_disable_and_clear;
     8b8:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
	RISE_N_SHINE;
     8bc:	000b4114 	andeq	r4, fp, r4, lsl r1
     8c0:	00000018 	andeq	r0, r0, r8, lsl r0
     8c4:	00000724 	andeq	r0, r0, r4, lsr #14
}
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	0000003a 	andeq	r0, r0, sl, lsr r0
     8d0:	83100e41 	tsthi	r0, #1040	; 0x410
     8d4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8d8:	00018e02 	andeq	r8, r1, r2, lsl #28
void system_init () {
     8dc:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e0:	00000724 	andeq	r0, r0, r4, lsr #14
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e4:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e8:	00000038 	andeq	r0, r0, r8, lsr r0
     8ec:	83100e41 	tsthi	r0, #1040	; 0x410
     8f0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8f8:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8fc:	00000724 	andeq	r0, r0, r4, lsr #14
     900:	00000000 	andeq	r0, r0, r0
     904:	0000000a 	andeq	r0, r0, sl
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     908:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     90c:	00000724 	andeq	r0, r0, r4, lsr #14
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     910:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     914:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     918:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     91c:	4c018e02 	stcmi	14, cr8, [r1], {2}
		pin = (port_confs [i] >> 19) & 0x1f;
     920:	000ec4ce 	andeq	ip, lr, lr, asr #9
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     924:	0000001c 	andeq	r0, r0, ip, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
     928:	00000724 	andeq	r0, r0, r4, lsr #14
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     92c:	00000000 	andeq	r0, r0, r0
     930:	00000060 	andeq	r0, r0, r0, rrx
     934:	83080e41 	movwhi	r0, #36417	; 0x8e41
     938:	61018e02 	tstvs	r1, r2, lsl #28
		if (port_confs [i] & 0x80)
     93c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     940:	000b4300 	andeq	r4, fp, r0, lsl #6
     944:	00000014 	andeq	r0, r0, r4, lsl r0
		if (port_confs [i] & 0x40)
     948:	00000724 	andeq	r0, r0, r4, lsr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	00000000 	andeq	r0, r0, r0
     950:	00000040 	andeq	r0, r0, r0, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     954:	83080e42 	movwhi	r0, #36418	; 0x8e42
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     958:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     95c:	00000014 	andeq	r0, r0, r4, lsl r0
	all_leds_blink;
     960:	00000724 	andeq	r0, r0, r4, lsr #14
     964:	00000000 	andeq	r0, r0, r0
     968:	0000002c 	andeq	r0, r0, ip, lsr #32
     96c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     970:	00018e02 	andeq	r8, r1, r2, lsl #28
     974:	0000001c 	andeq	r0, r0, ip, lsl r0
     978:	00000724 	andeq	r0, r0, r4, lsr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     97c:	00000000 	andeq	r0, r0, r0
     980:	0000003c 	andeq	r0, r0, ip, lsr r0
     984:	83180e41 	tsthi	r8, #1040	; 0x410
     988:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     98c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     990:	00018e02 	andeq	r8, r1, r2, lsl #28
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	0000000c 	andeq	r0, r0, ip
     998:	00000724 	andeq	r0, r0, r4, lsr #14
	IntEnable (INT_AON_RTC_COMB);
     99c:	00000000 	andeq	r0, r0, r0
     9a0:	00000006 	andeq	r0, r0, r6
     9a4:	0000001c 	andeq	r0, r0, ip, lsl r0
	__pi_malloc_init ();
     9a8:	00000724 	andeq	r0, r0, r4, lsr #14
	IntEnable (INT_AON_GPIO_EDGE);
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	00000068 	andeq	r0, r0, r8, rrx
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b4:	83180e41 	tsthi	r8, #1040	; 0x410
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     9bc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9c0:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c4:	00000014 	andeq	r0, r0, r4, lsl r0
     9c8:	00000724 	andeq	r0, r0, r4, lsr #14
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	00000050 	andeq	r0, r0, r0, asr r0
     9d4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	urates [0] = UART_RATE / 100;
     9d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9dc:	0000002c 	andeq	r0, r0, ip, lsr #32
	reinit_uart ();
     9e0:	00000724 	andeq	r0, r0, r4, lsr #14
	EXTRA_INITIALIZERS;
     9e4:	00000000 	andeq	r0, r0, r0
     9e8:	0000009c 	muleq	r0, ip, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9f0:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9f4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f8:	8a048905 	bhi	122e14 <__ccfg+0x102e6c>
     9fc:	8e028b03 	vmlahi.f64	d8, d2, d3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a00:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     a04:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
			devinit [i] . init (devinit [i] . param);
     a08:	00000b42 	andeq	r0, r0, r2, asr #22
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a0c:	00000014 	andeq	r0, r0, r4, lsl r0
     a10:	00000724 	andeq	r0, r0, r4, lsr #14
     a14:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_UART0_COMB);
     a18:	00000040 	andeq	r0, r0, r0, asr #32
     a1c:	83080e42 	movwhi	r0, #36418	; 0x8e42
}
     a20:	00018e02 	andeq	r8, r1, r2, lsl #28
	tci_run_auxiliary_timer ();
     a24:	00000014 	andeq	r0, r0, r4, lsl r0
		diag ("");
     a28:	00000724 	andeq	r0, r0, r4, lsr #14
     a2c:	00000000 	andeq	r0, r0, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a30:	00000034 	andeq	r0, r0, r4, lsr r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a34:	83080e42 	movwhi	r0, #36418	; 0x8e42
		diag ("Leftover RAM: %d bytes",
     a38:	00018e02 	andeq	r8, r1, r2, lsl #28
     a3c:	00000018 	andeq	r0, r0, r8, lsl r0
     a40:	00000724 	andeq	r0, r0, r4, lsr #14
     a44:	00000000 	andeq	r0, r0, r0
     a48:	0000003c 	andeq	r0, r0, ip, lsr r0
     a4c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a50:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a54:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a58:	00000018 	andeq	r0, r0, r8, lsl r0
     a5c:	00000724 	andeq	r0, r0, r4, lsr #14
     a60:	00000000 	andeq	r0, r0, r0
     a64:	0000003c 	andeq	r0, r0, ip, lsr r0
     a68:	83100e42 	tsthi	r0, #1056	; 0x420
     a6c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a70:	00018e02 	andeq	r8, r1, r2, lsl #28
     a74:	0000000c 	andeq	r0, r0, ip
     a78:	00000724 	andeq	r0, r0, r4, lsr #14
     a7c:	000013f4 	strdeq	r1, [r0], -r4
     a80:	00000002 	andeq	r0, r0, r2
     a84:	0000000c 	andeq	r0, r0, ip
     a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     a90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
__attribute__ ((noreturn)) void __pi_release () {
     a94:	0000000c 	andeq	r0, r0, ip
     a98:	00000a84 	andeq	r0, r0, r4, lsl #21
     a9c:	000013f6 	strdeq	r1, [r0], -r6
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     aa0:	00000002 	andeq	r0, r0, r2
	check_stack_overflow;
     aa4:	0000000c 	andeq	r0, r0, ip
     aa8:	00000a84 	andeq	r0, r0, r4, lsl #21
     aac:	000013f8 	strdeq	r1, [r0], -r8
	update_n_wake (MAX_WORD, NO);
     ab0:	00000002 	andeq	r0, r0, r2
     ab4:	0000000c 	andeq	r0, r0, ip
     ab8:	00000a84 	andeq	r0, r0, r4, lsl #21
	for_all_tasks (__pi_curr) {
     abc:	000013fa 	strdeq	r1, [r0], -sl
     ac0:	00000002 	andeq	r0, r0, r2
     ac4:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
     ac8:	00000a84 	andeq	r0, r0, r4, lsl #21
	__SLEEP;
     acc:	000013fc 	strdeq	r1, [r0], -ip
     ad0:	00000044 	andeq	r0, r0, r4, asr #32
     ad4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
	system_event_count ++;
     adc:	0000000c 	andeq	r0, r0, ip
     ae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	switch (__pi_systat.effpdm) {
     ae4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ae8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     aec:	0000000c 	andeq	r0, r0, ip
     af0:	00000adc 	ldrdeq	r0, [r0], -ip
			__WFI ();
     af4:	00000000 	andeq	r0, r0, r0
     af8:	00000002 	andeq	r0, r0, r2
     afc:	00000018 	andeq	r0, r0, r8, lsl r0
	check_stack_overflow;
     b00:	00000adc 	ldrdeq	r0, [r0], -ip
     b04:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b08:	00000058 	andeq	r0, r0, r8, asr r0
     b0c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			(__pi_curr->code) (tstate (__pi_curr));
     b10:	86038504 	strhi	r8, [r3], -r4, lsl #10
			goto Redo;
     b14:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (__pi_curr) {
     b18:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	7c020001 	stcvc	0, cr0, [r2], {1}
     b24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	0000002c 	andeq	r0, r0, ip, lsr #32
     b2c:	00000b18 	andeq	r0, r0, r8, lsl fp
     b30:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b34:	000000cc 	andeq	r0, r0, ip, asr #1
     b38:	83100e42 	tsthi	r0, #1056	; 0x420
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b3c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b40:	02018e02 	andeq	r8, r1, #2, 28
			__WFI ();
     b44:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b48:	000ec3c4 	andeq	ip, lr, r4, asr #7
     b4c:	ce420b44 	vmlsgt.f64	d16, d2, d4
}
     b50:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b54:	00000000 	andeq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b58:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	00000b18 	andeq	r0, r0, r8, lsl fp
     b60:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b64:	00000038 	andeq	r0, r0, r8, lsr r0
     b68:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     b6c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b74:	4a0b4300 	bmi	2d177c <__ccfg+0x2b17d4>
     b78:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b7c:	000b4300 	andeq	r4, fp, r0, lsl #6
     b80:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b88:	7c020001 	stcvc	0, cr0, [r2], {1}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b90:	00000018 	andeq	r0, r0, r8, lsl r0
     b94:	00000b80 	andeq	r0, r0, r0, lsl #23
     b98:	00001448 	andeq	r1, r0, r8, asr #8
     b9c:	00000034 	andeq	r0, r0, r4, lsr r0
     ba0:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
			SysCtrlSetRechargeBeforePowerDown
     ba4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bac:	00000018 	andeq	r0, r0, r8, lsl r0
     bb0:	00000b80 	andeq	r0, r0, r0, lsl #23
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	0000147c 	andeq	r1, r0, ip, ror r4
     bb8:	00000030 	andeq	r0, r0, r0, lsr r0
     bbc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bc0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     bc4:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc8:	00000014 	andeq	r0, r0, r4, lsl r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bcc:	00000b80 	andeq	r0, r0, r0, lsl #23
     bd0:	000014ac 	andeq	r1, r0, ip, lsr #9
     bd4:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
			while (!(AONWUCPowerStatusGet () &
     bdc:	00018e02 	andeq	r8, r1, r2, lsl #28
			PRCMPowerDomainOn (__pi_systat.ondmns);
     be0:	0000001c 	andeq	r0, r0, ip, lsl r0
     be4:	00000b80 	andeq	r0, r0, r0, lsl #23
     be8:	000014c4 	andeq	r1, r0, r4, asr #9
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bec:	00000054 	andeq	r0, r0, r4, asr r0
     bf0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     bf4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bf8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     c00:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c04:	00000b80 	andeq	r0, r0, r0, lsl #23
     c08:	00001518 	andeq	r1, r0, r8, lsl r5
			SysCtrlAdjustRechargeAfterPowerDown ();
     c0c:	00000040 	andeq	r0, r0, r0, asr #32
			reinit_uart ();
     c10:	83180e41 	tsthi	r8, #1040	; 0x410
     c14:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c18:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
     c1c:	00018e02 	andeq	r8, r1, r2, lsl #28
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	00000014 	andeq	r0, r0, r4, lsl r0
     c24:	00000b80 	andeq	r0, r0, r0, lsl #23
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	00001558 	andeq	r1, r0, r8, asr r5
     c2c:	00000024 	andeq	r0, r0, r4, lsr #32
     c30:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c34:	00018e02 	andeq	r8, r1, r2, lsl #28
     c38:	00000014 	andeq	r0, r0, r4, lsl r0
     c3c:	00000b80 	andeq	r0, r0, r0, lsl #23
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c40:	0000157c 	andeq	r1, r0, ip, ror r5
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c44:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c48:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c4c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c50:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c54:	00000b80 	andeq	r0, r0, r0, lsl #23
     c58:	00001590 	muleq	r0, r0, r5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c5c:	00000014 	andeq	r0, r0, r4, lsl r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c60:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	00000b80 	andeq	r0, r0, r0, lsl #23
     c68:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (
     c6c:	00000064 	andeq	r0, r0, r4, rrx
     c70:	83180e41 	tsthi	r8, #1040	; 0x410
	__SLEEP;
     c74:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c78:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	00018e02 	andeq	r8, r1, r2, lsl #28
	goto Redo;
     c80:	0000001c 	andeq	r0, r0, ip, lsl r0
     c84:	00000b80 	andeq	r0, r0, r0, lsl #23
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	00000128 	andeq	r0, r0, r8, lsr #2
     c90:	83180e41 	tsthi	r8, #1040	; 0x410
     c94:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c98:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     ca0:	00000024 	andeq	r0, r0, r4, lsr #32
     ca4:	00000b80 	andeq	r0, r0, r0, lsl #23
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	000000ec 	andeq	r0, r0, ip, ror #1
     cb0:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     cb4:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     cb8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     cbc:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     cc0:	8b038a04 	blhi	e34d8 <__ccfg+0xc3530>
     cc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc8:	0000000c 	andeq	r0, r0, ip
     ccc:	00000b80 	andeq	r0, r0, r0, lsl #23
     cd0:	00000000 	andeq	r0, r0, r0
     cd4:	00000002 	andeq	r0, r0, r2
     cd8:	0000000c 	andeq	r0, r0, ip
     cdc:	00000b80 	andeq	r0, r0, r0, lsl #23
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	00000004 	andeq	r0, r0, r4
     ce8:	0000000c 	andeq	r0, r0, ip
int main (void) {
     cec:	00000b80 	andeq	r0, r0, r0, lsl #23
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	00000000 	andeq	r0, r0, r0
     cf4:	00000014 	andeq	r0, r0, r4, lsl r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf8:	00000018 	andeq	r0, r0, r8, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cfc:	00000b80 	andeq	r0, r0, r0, lsl #23
	system_init ();
     d00:	00000000 	andeq	r0, r0, r0
	tcv_init ();
     d04:	0000001a 	andeq	r0, r0, sl, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d08:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d0c:	4a018e02 	bmi	6451c <__ccfg+0x44574>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	000ec3ce 	andeq	ip, lr, lr, asr #7
     d14:	0000000c 	andeq	r0, r0, ip
     d18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	delay (16, 0);
     d24:	0000001c 	andeq	r0, r0, ip, lsl r0
     d28:	00000d14 	andeq	r0, r0, r4, lsl sp
     d2c:	000015a4 	andeq	r1, r0, r4, lsr #11
	__pi_release ();
     d30:	00000078 	andeq	r0, r0, r8, ror r0
     d34:	83180e41 	tsthi	r8, #1040	; 0x410
     d38:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d3c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d40:	00018e02 	andeq	r8, r1, r2, lsl #28
     d44:	0000000c 	andeq	r0, r0, ip
     d48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
static void killev (__pi_pcb_t *pid) {
     d4c:	7c020001 	stcvc	0, cr0, [r2], {1}
	wfun = (aword)(pid->code);
     d50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for_all_tasks (i) {
     d54:	00000030 	andeq	r0, r0, r0, lsr r0
		for (j = 0; j < nevents (i); j++) {
     d58:	00000d44 	andeq	r0, r0, r4, asr #26
     d5c:	0000161c 	andeq	r1, r0, ip, lsl r6
     d60:	00000054 	andeq	r0, r0, r4, asr r0
			    || i->Events [j] . Event == wfun
     d64:	810c0e41 	tsthi	ip, r1, asr #28
		for (j = 0; j < nevents (i); j++) {
     d68:	83028203 	movwhi	r8, #8707	; 0x2203
			if (i->Events [j] . Event == (aword)pid
     d6c:	280e4101 	stmdacs	lr, {r0, r8, lr}
     d70:	06850784 	streq	r0, [r5], r4, lsl #15
     d74:	048e0586 	streq	r0, [lr], #1414	; 0x586
				wakeupev (i, j);
     d78:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     d7c:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
	for_all_tasks (i) {
     d80:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
}
     d84:	000ec1c2 	andeq	ip, lr, r2, asr #3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d88:	0000000c 	andeq	r0, r0, ip
static void qfree (aword *ch) {
     d8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d90:	7c020001 	stcvc	0, cr0, [r2], {1}
	cc = (aword*)(mpools + MA_NP);
     d94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	m_setnextp (ch, chunk);
     d98:	00000030 	andeq	r0, r0, r0, lsr r0
	m_setnextp (cc, ch);
     d9c:	00000d88 	andeq	r0, r0, r8, lsl #27
}
     da0:	00001670 	andeq	r1, r0, r0, ror r6
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da4:	00000060 	andeq	r0, r0, r0, rrx
     da8:	810c0e41 	tsthi	ip, r1, asr #28
     dac:	83028203 	movwhi	r8, #8707	; 0x2203
			m_setnextp (cc, m_nextp (chunk));
     db0:	200e4101 	andcs	r4, lr, r1, lsl #2
			m_size (chunk) += m_hdrlen + m_size (ch);
     db4:	05850684 	streq	r0, [r5, #1668]	; 0x684
     db8:	0a64048e 	beq	1901ff8 <__ccfg+0x18e2050>
     dbc:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     dc0:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc4:	c1c2c341 	bicgt	ip, r2, r1, asr #6
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc8:	0b41000e 	bleq	1040e08 <__ccfg+0x1020e60>
     dcc:	0000000c 	andeq	r0, r0, ip
     dd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			m_setnextp (cc, m_nextp (chunk));
     dd4:	7c020001 	stcvc	0, cr0, [r2], {1}
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ddc:	00000028 	andeq	r0, r0, r8, lsr #32
     de0:	00000dcc 	andeq	r0, r0, ip, asr #27
     de4:	000016d0 	ldrdeq	r1, [r0], -r0
     de8:	00000070 	andeq	r0, r0, r0, ror r0
     dec:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
			if (m_size (chunk) >= m_size (ch))
     df0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     df4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     df8:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
		chunk = m_nextp (chunk))
     dfc:	c7ce4214 	bfigt	r4, r4, #4, #11
     e00:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e04:	000b4200 	andeq	r4, fp, r0, lsl #4
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e08:	0000000c 	andeq	r0, r0, ip
	diag_wait (a);
     e0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	diag_wchar (c, a);
     e10:	7c020001 	stcvc	0, cr0, [r2], {1}
     e14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
     e18:	00000028 	andeq	r0, r0, r8, lsr #32
     e1c:	00000e08 	andeq	r0, r0, r8, lsl #28
	syserror (ESTATE, "state");
     e20:	00001740 	andeq	r1, r0, r0, asr #14
     e24:	0000011c 	andeq	r0, r0, ip, lsl r1
     e28:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     e2c:	86048505 	strhi	r8, [r4], -r5, lsl #10
void update_n_wake (word min, Boolean force) {
     e30:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	if (TCI_UPDATE_DELAY_TICKS (force))
     e34:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
     e38:	c7ce4214 	bfigt	r4, r4, #4, #11
     e3c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e40:	00000000 	andeq	r0, r0, r0
     e44:	0000000c 	andeq	r0, r0, ip
     e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e4c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e54:	0000000c 	andeq	r0, r0, ip
     e58:	00000e44 	andeq	r0, r0, r4, asr #28
     e5c:	0000185c 	andeq	r1, r0, ip, asr r8
     e60:	00000020 	andeq	r0, r0, r0, lsr #32
     e64:	00000028 	andeq	r0, r0, r8, lsr #32
     e68:	00000e44 	andeq	r0, r0, r4, asr #28
     e6c:	0000187c 	andeq	r1, r0, ip, ror r8
     e70:	00000230 	andeq	r0, r0, r0, lsr r2
		for_all_tasks (i) {
     e74:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
	__pi_mintk = znew + min;
     e78:	86078508 	strhi	r8, [r7], -r8, lsl #10
     e7c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
			if (!twaiting (i))
     e80:	8a038904 	bhi	e3298 <__ccfg+0xc32f0>
     e84:	02018e02 	andeq	r8, r1, #2, 28
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e88:	200e0a4f 	andcs	r0, lr, pc, asr #20
     e8c:	00000b42 	andeq	r0, r0, r2, asr #22
     e90:	0000001c 	andeq	r0, r0, ip, lsl r0
     e94:	00000e44 	andeq	r0, r0, r4, asr #28
     e98:	00001aac 	andeq	r1, r0, ip, lsr #21
     e9c:	00000050 	andeq	r0, r0, r0, asr r0
     ea0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     ea4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     ea8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     eac:	00018e02 	andeq	r8, r1, r2, lsl #28
     eb0:	0000000c 	andeq	r0, r0, ip
     eb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				wakeuptm (i);
     eb8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ebc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		for_all_tasks (i) {
     ec0:	00000020 	andeq	r0, r0, r0, lsr #32
				d = i->Timer - znew;
     ec4:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ec8:	00001afc 	strdeq	r1, [r0], -ip
     ecc:	00000390 	muleq	r0, r0, r3
		if ((word)(__pi_mintk - znew) < min) 
     ed0:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     ed4:	86068507 	strhi	r8, [r6], -r7, lsl #10
     ed8:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
	__pi_old = znew;
     edc:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
}
     ee0:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
     ee4:	0000000c 	andeq	r0, r0, ip
}
     ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eec:	7c020001 	stcvc	0, cr0, [r2], {1}
     ef0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ef4:	0000000c 	andeq	r0, r0, ip
     ef8:	00000ee4 	andeq	r0, r0, r4, ror #29
void proceed (word state) {
     efc:	00001e8c 	andeq	r1, r0, ip, lsl #29
	prcdstate (__pi_curr, state);
     f00:	00000030 	andeq	r0, r0, r0, lsr r0
     f04:	0000000c 	andeq	r0, r0, ip
	release;
     f08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f0c:	7c020001 	stcvc	0, cr0, [r2], {1}
void __pi_wait (aword event, word state) {
     f10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f14:	0000000c 	andeq	r0, r0, ip
	if (j >= MAX_EVENTS_PER_TASK)
     f18:	00000f04 	andeq	r0, r0, r4, lsl #30
     f1c:	00000000 	andeq	r0, r0, r0
     f20:	00000020 	andeq	r0, r0, r0, lsr #32
		syserror (ENEVENTS, "sw");
     f24:	0000000c 	andeq	r0, r0, ip
     f28:	00000f04 	andeq	r0, r0, r4, lsl #30
	setestate (__pi_curr->Events [j], state, event);
     f2c:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
	incwait (__pi_curr);
     f30:	00000018 	andeq	r0, r0, r8, lsl r0
	setestate (__pi_curr->Events [j], state, event);
     f34:	0000000c 	andeq	r0, r0, ip
}
     f38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f3c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f44:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
     f48:	00000f34 	andeq	r0, r0, r4, lsr pc
		for (j = 0; j < nevents (i); j++) {
     f4c:	00001ed4 	ldrdeq	r1, [r0], -r4
     f50:	00000008 	andeq	r0, r0, r8
     f54:	0000000c 	andeq	r0, r0, ip
     f58:	00000f34 	andeq	r0, r0, r4, lsr pc
			if (i->Events [j] . Event == event) {
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	00000006 	andeq	r0, r0, r6
     f64:	0000000c 	andeq	r0, r0, ip
				wakeupev (i, j);
     f68:	00000f34 	andeq	r0, r0, r4, lsr pc
     f6c:	00001edc 	ldrdeq	r1, [r0], -ip
	for_all_tasks (i) {
     f70:	00000008 	andeq	r0, r0, r8
}
     f74:	0000000c 	andeq	r0, r0, ip
aword __pi_join (aword pid, word st) {
     f78:	00000f34 	andeq	r0, r0, r4, lsr pc
	for_all_tasks (i) {
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	00000006 	andeq	r0, r0, r6
	return 0;
     f84:	0000000c 	andeq	r0, r0, ip
		if ((aword)i == pid) {
     f88:	00000f34 	andeq	r0, r0, r4, lsr pc
			__pi_wait (pid, st);
     f8c:	00000000 	andeq	r0, r0, r0
}
     f90:	00000008 	andeq	r0, r0, r8
	for_all_tasks (i) {
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void delay (word d, word state) {
     f9c:	7c020001 	stcvc	0, cr0, [r2], {1}
	settstate (__pi_curr, state);
     fa0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa4:	00000018 	andeq	r0, r0, r8, lsl r0
     fa8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fac:	00001ee4 	andeq	r1, r0, r4, ror #29
	update_n_wake (d, YES);
     fb0:	000000d4 	ldrdeq	r0, [r0], -r4
     fb4:	83100e41 	tsthi	r0, #1040	; 0x410
	__pi_curr->Timer = __pi_old + d;
     fb8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     fbc:	00018e02 	andeq	r8, r1, r2, lsl #28
	inctimer (__pi_curr);
     fc0:	00000014 	andeq	r0, r0, r4, lsl r0
     fc4:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fc8:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
}
     fcc:	000000a4 	andeq	r0, r0, r4, lsr #1
     fd0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (fun == NULL)
     fd4:	00018e02 	andeq	r8, r1, r2, lsl #28
		return (int) __pi_curr;
     fd8:	0000000c 	andeq	r0, r0, ip
     fdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for_all_tasks (i)
     fe0:	7c020001 	stcvc	0, cr0, [r2], {1}
}
     fe4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fe8:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (i)
     fec:	00000fd8 	ldrdeq	r0, [r0], -r8
     ff0:	0000205c 	andeq	r2, r0, ip, asr r0
     ff4:	0000007c 	andeq	r0, r0, ip, ror r0
int __pi_strlen (const char *s) {
     ff8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	for (i = 0; *(s+i) != '\0'; i++);
     ffc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
}
    1000:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    1004:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n--)
    1008:	00000fd8 	ldrdeq	r0, [r0], -r8
    100c:	000020d8 	ldrdeq	r2, [r0], -r8
		*dest++ = *src++;
    1010:	000000ac 	andeq	r0, r0, ip, lsr #1
    1014:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    1018:	00018e02 	andeq	r8, r1, r2, lsl #28
void adddevfunc (devreqfun_t rf, int loc) {
    101c:	0000000c 	andeq	r0, r0, ip
		syserror (EREQPAR, "addv");
    1020:	00000fd8 	ldrdeq	r0, [r0], -r8
		syserror (ERESOURCE, "addv");
    1024:	00002184 	andeq	r2, r0, r4, lsl #3
	if (ioreq [loc] != NULL)
    1028:	0000005c 	andeq	r0, r0, ip, asr r0
    102c:	0000000c 	andeq	r0, r0, ip
		syserror (ERESOURCE, "addv");
    1030:	00000fd8 	ldrdeq	r0, [r0], -r8
	ioreq [loc] = rf;
    1034:	000021e0 	andeq	r2, r0, r0, ror #3
}
    1038:	00000018 	andeq	r0, r0, r8, lsl r0
    103c:	0000000c 	andeq	r0, r0, ip
sint io (word retry, word dev, word operation, char *buf, word len) {
    1040:	00000fd8 	ldrdeq	r0, [r0], -r8
    1044:	00000000 	andeq	r0, r0, r0
    1048:	00000010 	andeq	r0, r0, r0, lsl r0
    104c:	0000000c 	andeq	r0, r0, ip
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1050:	00000fd8 	ldrdeq	r0, [r0], -r8
    1054:	000021f8 	strdeq	r2, [r0], -r8
    1058:	00000010 	andeq	r0, r0, r0, lsl r0
		syserror (ENODEVICE, "io");
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	00000fd8 	ldrdeq	r0, [r0], -r8
	if (len == 0)
    1064:	00002208 	andeq	r2, r0, r8, lsl #4
	ret = (ioreq [dev]) (operation, buf, len);
    1068:	00000014 	andeq	r0, r0, r4, lsl r0
    106c:	00000018 	andeq	r0, r0, r8, lsl r0
	if (ret >= 0)
    1070:	00000fd8 	ldrdeq	r0, [r0], -r8
	if (ret == -1) {
    1074:	0000221c 	andeq	r2, r0, ip, lsl r2
    1078:	00000064 	andeq	r0, r0, r4, rrx
		if (retry == WNONE)
    107c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		iowait (dev, operation, retry);
    1080:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1084:	00018e02 	andeq	r8, r1, r2, lsl #28
    1088:	0000000c 	andeq	r0, r0, ip
			release;
    108c:	00000fd8 	ldrdeq	r0, [r0], -r8
	if (ret == -2) {
    1090:	00002280 	andeq	r2, r0, r0, lsl #5
		if (retry != WNONE) {
    1094:	00000014 	andeq	r0, r0, r4, lsl r0
    1098:	0000000c 	andeq	r0, r0, ip
			iowait (dev, operation, retry);
    109c:	00000fd8 	ldrdeq	r0, [r0], -r8
    10a0:	00002294 	muleq	r0, r4, r2
			(ioreq [dev]) (NONE, buf, len);
    10a4:	00000014 	andeq	r0, r0, r4, lsl r0
    10a8:	0000000c 	andeq	r0, r0, ip
    10ac:	00000fd8 	ldrdeq	r0, [r0], -r8
		(ioreq [dev]) (NONE, buf, len);
    10b0:	000022a8 	andeq	r2, r0, r8, lsr #5
    10b4:	00000014 	andeq	r0, r0, r4, lsl r0
    10b8:	0000000c 	andeq	r0, r0, ip
}
    10bc:	00000fd8 	ldrdeq	r0, [r0], -r8
	if (retry != WNONE) {
    10c0:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
		delay (-ret - 2, retry);
    10c4:	00000028 	andeq	r0, r0, r8, lsr #32
    10c8:	0000000c 	andeq	r0, r0, ip
    10cc:	00000fd8 	ldrdeq	r0, [r0], -r8
    10d0:	000022e4 	andeq	r2, r0, r4, ror #5
		release;
    10d4:	00000010 	andeq	r0, r0, r0, lsl r0
    10d8:	0000000c 	andeq	r0, r0, ip
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	00000fd8 	ldrdeq	r0, [r0], -r8
    10e0:	000022f4 	strdeq	r2, [r0], -r4
    10e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10e8:	0000000c 	andeq	r0, r0, ip
    10ec:	00000fd8 	ldrdeq	r0, [r0], -r8
		syserror (ERESOURCE, "mal1");
    10f0:	00002320 	andeq	r2, r0, r0, lsr #6
    10f4:	00000014 	andeq	r0, r0, r4, lsl r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	0000000c 	andeq	r0, r0, ip
    10fc:	00000fd8 	ldrdeq	r0, [r0], -r8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1100:	00002334 	andeq	r2, r0, r4, lsr r3
	m_size (mpools [0]) = mlen - m_hdrlen;
    1104:	00000014 	andeq	r0, r0, r4, lsl r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1108:	0000001c 	andeq	r0, r0, ip, lsl r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    110c:	00000fd8 	ldrdeq	r0, [r0], -r8
    1110:	00002348 	andeq	r2, r0, r8, asr #6
}
    1114:	00000110 	andeq	r0, r0, r0, lsl r1
    1118:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    111c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1120:	02018e02 	andeq	r8, r1, #2, 28
    1124:	00100e76 	andseq	r0, r0, r6, ror lr
    1128:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_free (aword *ch) {
    112c:	00000fd8 	ldrdeq	r0, [r0], -r8
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1130:	00002458 	andeq	r2, r0, r8, asr r4
    1134:	00000064 	andeq	r0, r0, r4, rrx
		syserror (EMALLOC, "malg");
    1138:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    113c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	mcfree [MA_NP] += m_size (ch);
    1140:	00000001 	andeq	r0, r0, r1
		m_size (ch) ^= MALLOC_UMASK;
    1144:	0000000c 	andeq	r0, r0, ip
    1148:	00000fd8 	ldrdeq	r0, [r0], -r8
	mcfree [MA_NP] += m_size (ch);
    114c:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
	QFREE;
    1150:	00000028 	andeq	r0, r0, r8, lsr #32
	if (mevent [MA_NP] . nwait) {
    1154:	00000014 	andeq	r0, r0, r4, lsl r0
    1158:	00000fd8 	ldrdeq	r0, [r0], -r8
		trigger ((aword)(&(mevent [MA_NP])));
    115c:	000024e4 	andeq	r2, r0, r4, ror #9
		mevent [MA_NP] . nwait --;
    1160:	00000150 	andeq	r0, r0, r0, asr r1
}
    1164:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1168:	00018e02 	andeq	r8, r1, r2, lsl #28
    116c:	0000000c 	andeq	r0, r0, ip
    1170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void kill (aword pid) {
    1174:	7c020001 	stcvc	0, cr0, [r2], {1}
		pid = (aword) __pi_curr;
    1178:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    117c:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i) {
    1180:	0000116c 	andeq	r1, r0, ip, ror #2
	syserror (EREQPAR, "kpi");
    1184:	00000000 	andeq	r0, r0, r0
    1188:	000000f4 	strdeq	r0, [r0], -r4
		if ((aword)i == pid) {
    118c:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1190:	86058506 	strhi	r8, [r5], -r6, lsl #10
				__PCB = i->Next;
    1194:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			killev (i);
    1198:	00018e02 	andeq	r8, r1, r2, lsl #28
			ufree (i);
    119c:	00000028 	andeq	r0, r0, r8, lsr #32
			if (i == __pi_curr)
    11a0:	0000116c 	andeq	r1, r0, ip, ror #2
    11a4:	00002634 	andeq	r2, r0, r4, lsr r6
				release;
    11a8:	00000220 	andeq	r0, r0, r0, lsr #4
				j->Next = i->Next;
    11ac:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    11b0:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11b4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
}
    11b8:	8a048905 	bhi	1235d4 <__ccfg+0x10362c>
    11bc:	8e028b03 	vmlahi.f64	d8, d2, d3
    11c0:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	if (size < 8)
    11c4:	00000024 	andeq	r0, r0, r4, lsr #32
		_size = 2;
    11c8:	00000014 	andeq	r0, r0, r4, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11cc:	0000116c 	andeq	r1, r0, ip, ror #2
		_size = (((aword)size) + 3) >> 2;
    11d0:	00002854 	andeq	r2, r0, r4, asr r8
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d4:	00000060 	andeq	r0, r0, r0, rrx
		_size = (((aword)size) + 3) >> 2;
    11d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (mevent [MA_NP] . nfail != 255)
    11dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    11e0:	00000014 	andeq	r0, r0, r4, lsl r0
			mevent [MA_NP] . nfail ++;
    11e4:	0000116c 	andeq	r1, r0, ip, ror #2
		mnfree [MA_NP] = 0;
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00000078 	andeq	r0, r0, r8, ror r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    11f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11f4:	00018e02 	andeq	r8, r1, r2, lsl #28
			syserror (EMALLOC, "malc");
    11f8:	0000000c 	andeq	r0, r0, ip
    11fc:	0000116c 	andeq	r1, r0, ip, ror #2
		if (m_size (chunk) >= _size)
    1200:	000028b4 			; <UNDEFINED> instruction: 0x000028b4
    1204:	00000018 	andeq	r0, r0, r8, lsl r0
		chunk = m_nextp (chunk)) {
    1208:	0000000c 	andeq	r0, r0, ip
		m_setnextp (cc, m_nextp (chunk));
    120c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1210:	7c020001 	stcvc	0, cr0, [r2], {1}
    1214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1218:	0000000c 	andeq	r0, r0, ip
			cc = chunk + _size + m_hdrlen;
    121c:	00001208 	andeq	r1, r0, r8, lsl #4
    1220:	00000000 	andeq	r0, r0, r0
			m_size (cc) = waste - m_hdrlen;
    1224:	00000010 	andeq	r0, r0, r0, lsl r0
			QFREE;
    1228:	0000000c 	andeq	r0, r0, ip
		mevent [MA_NP] . nfail = 0;
    122c:	00001208 	andeq	r1, r0, r8, lsl #4
		mcfree [MA_NP] -= m_size (chunk);
    1230:	00000000 	andeq	r0, r0, r0
    1234:	00000018 	andeq	r0, r0, r8, lsl r0
    1238:	0000000c 	andeq	r0, r0, ip
    123c:	00001208 	andeq	r1, r0, r8, lsl #4
		m_size (chunk) |= MALLOC_UMASK;
    1240:	000028cc 	andeq	r2, r0, ip, asr #17
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1244:	0000004c 	andeq	r0, r0, ip, asr #32
		m_size (chunk) |= MALLOC_UMASK;
    1248:	00000014 	andeq	r0, r0, r4, lsl r0
			mnfree [MA_NP] = mcfree [MA_NP];
    124c:	00001208 	andeq	r1, r0, r8, lsl #4
}
    1250:	00000000 	andeq	r0, r0, r0
    1254:	00000030 	andeq	r0, r0, r0, lsr r0
    1258:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    125c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1260:	00000018 	andeq	r0, r0, r8, lsl r0
    1264:	00001208 	andeq	r1, r0, r8, lsl #4
    1268:	00002918 	andeq	r2, r0, r8, lsl r9
aword __pi_fork (fsmcode func, aword data) {
    126c:	0000006c 	andeq	r0, r0, ip, rrx
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	83100e41 	tsthi	r0, #1040	; 0x410
    1274:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1278:	00018e02 	andeq	r8, r1, r2, lsl #28
		if ((j = __PCB) == NULL)
    127c:	00000014 	andeq	r0, r0, r4, lsl r0
	i->Next = NULL;
    1280:	00001208 	andeq	r1, r0, r8, lsl #4
	i->data = data;
    1284:	00002984 	andeq	r2, r0, r4, lsl #19
		if ((j = __PCB) == NULL)
    1288:	00000016 	andeq	r0, r0, r6, lsl r0
}
    128c:	83080e41 	movwhi	r0, #36417	; 0x8e41
			for (; j->Next != NULL; j = j->Next);
    1290:	00018e02 	andeq	r8, r1, r2, lsl #28
    1294:	0000000c 	andeq	r0, r0, ip
	return (aword) i;
    1298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    129c:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (mevent [MA_NP] . nwait != 255)
    12a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12a4:	00000024 	andeq	r0, r0, r4, lsr #32
    12a8:	00001294 	muleq	r0, r4, r2
		mevent [MA_NP] . nwait ++;
    12ac:	0000299c 	muleq	r0, ip, r9
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	00000028 	andeq	r0, r0, r8, lsr #32
    12b4:	83100e41 	tsthi	r0, #1040	; 0x410
void diag (const char *mess, ...) {
    12b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    12bc:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    12c0:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
	diag_disable_int (a, is);
    12c4:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    12c8:	0000000b 	andeq	r0, r0, fp
    12cc:	0000000c 	andeq	r0, r0, ip
				d = (bc == 16) ? 10000 : 1000000000;
    12d0:	00001294 	muleq	r0, r4, r2
	diag_disable_int (a, is);
    12d4:	000029c4 	andeq	r2, r0, r4, asr #19
	while (*mess != '\0') {
    12d8:	00000008 	andeq	r0, r0, r8
	dgout ('\r');
    12dc:	0000000c 	andeq	r0, r0, ip
	dgout ('\n');
    12e0:	00001294 	muleq	r0, r4, r2
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	00000022 	andeq	r0, r0, r2, lsr #32
	diag_wait (a);
    12ec:	00000018 	andeq	r0, r0, r8, lsl r0
	diag_enable_int (a, is);
    12f0:	00001294 	muleq	r0, r4, r2
    12f4:	00000000 	andeq	r0, r0, r0
}
    12f8:	0000002e 	andeq	r0, r0, lr, lsr #32
    12fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1300:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
		if (*mess == '%') {
    1304:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1308:	00000018 	andeq	r0, r0, r8, lsl r0
			if (*mess == 'l') {
    130c:	00001294 	muleq	r0, r4, r2
    1310:	00000000 	andeq	r0, r0, r0
				mess++;
    1314:	00000034 	andeq	r0, r0, r4, lsr r0
				val = va_arg (ap, lword);
    1318:	83100e41 	tsthi	r0, #1040	; 0x410
				bc = 32;
    131c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				bc = 16;
    1320:	00018e02 	andeq	r8, r1, r2, lsl #28
			switch (*mess) {
    1324:	00000018 	andeq	r0, r0, r8, lsl r0
    1328:	00001294 	muleq	r0, r4, r2
    132c:	00000000 	andeq	r0, r0, r0
				dgout ('%');
    1330:	00000040 	andeq	r0, r0, r0, asr #32
    1334:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				dgout (*mess);
    1338:	86038504 	strhi	r8, [r3], -r4, lsl #10
    133c:	00018e02 	andeq	r8, r1, r2, lsl #28
			switch (*mess) {
    1340:	0000000c 	andeq	r0, r0, ip
					v = __pi_hex_enc_table [
    1344:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
					i += 4;
    1348:	7c020001 	stcvc	0, cr0, [r2], {1}
					(val >> (bc - i)) & 0xf];
    134c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1350:	0000001c 	andeq	r0, r0, ip, lsl r0
					dgout (v);
    1354:	00001340 	andeq	r1, r0, r0, asr #6
    1358:	000029cc 	andeq	r2, r0, ip, asr #19
				while (i < bc) {
    135c:	0000005c 	andeq	r0, r0, ip, asr r0
			mess++;
    1360:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
					d /= 10;
    1364:	86038504 	strhi	r8, [r3], -r4, lsl #10
				if ((val >> (bc - 1)) & 1) {
    1368:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    136c:	0000100e 	andeq	r1, r0, lr
					dgout ('-');
    1370:	00000014 	andeq	r0, r0, r4, lsl r0
    1374:	00001340 	andeq	r1, r0, r0, asr #6
						val |= 0xffff0000;
    1378:	00002a28 	andeq	r2, r0, r8, lsr #20
    137c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1380:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				d = (bc == 16) ? 10000 : 1000000000;
    1384:	00018e02 	andeq	r8, r1, r2, lsl #28
    1388:	00000018 	andeq	r0, r0, r8, lsl r0
    138c:	00001340 	andeq	r1, r0, r0, asr #6
					v = (word) (val / d);
    1390:	00000000 	andeq	r0, r0, r0
					if (v || d == 1) break;
    1394:	00000090 	muleq	r0, r0, r0
    1398:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					d /= 10;
    139c:	86038504 	strhi	r8, [r3], -r4, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    13a0:	00018e02 	andeq	r8, r1, r2, lsl #28
					dgout (v + '0');
    13a4:	00000014 	andeq	r0, r0, r4, lsl r0
    13a8:	00001340 	andeq	r1, r0, r0, asr #6
    13ac:	00000000 	andeq	r0, r0, r0
					d /= 10;
    13b0:	00000018 	andeq	r0, r0, r8, lsl r0
					val = val - (v * d);
    13b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
					if (d == 0) break;
    13b8:	00018e02 	andeq	r8, r1, r2, lsl #28
					v = (word) (val / d);
    13bc:	00000014 	andeq	r0, r0, r4, lsl r0
    13c0:	00001340 	andeq	r1, r0, r0, asr #6
				if (bc == 16)
    13c4:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    13c8:	00000060 	andeq	r0, r0, r0, rrx
					val &= 0xffff;
    13cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					dgout (*s);
    13d0:	00018e02 	andeq	r8, r1, r2, lsl #28
					s++;
    13d4:	00000014 	andeq	r0, r0, r4, lsl r0
				while (*s != '\0') {
    13d8:	00001340 	andeq	r1, r0, r0, asr #6
    13dc:	00000000 	andeq	r0, r0, r0
			dgout (*mess++);
    13e0:	00000034 	andeq	r0, r0, r4, lsr r0
    13e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13ec:	00000018 	andeq	r0, r0, r8, lsl r0
    13f0:	00001340 	andeq	r1, r0, r0, asr #6
}
    13f4:	00000000 	andeq	r0, r0, r0
    while(1)
    13f8:	00000038 	andeq	r0, r0, r8, lsr r0
{
    13fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    SetupTrimDevice();
    1400:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    pui32Src = &_etext;
    1404:	00000001 	andeq	r0, r0, r1
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1408:	0000000c 	andeq	r0, r0, ip
    __asm("    ldr     r0, =_bss\n"
    140c:	00001340 	andeq	r1, r0, r0, asr #6
    1410:	00000000 	andeq	r0, r0, r0
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	00000018 	andeq	r0, r0, r8, lsl r0
    141c:	00001340 	andeq	r1, r0, r0, asr #6
   main();
    1420:	00000000 	andeq	r0, r0, r0
    FaultISR();
    1424:	00000034 	andeq	r0, r0, r4, lsr r0
        *pui32Dest++ = *pui32Src++;
    1428:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    142c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1430:	00018e02 	andeq	r8, r1, r2, lsl #28
    1434:	0000000c 	andeq	r0, r0, ip
    1438:	00001340 	andeq	r1, r0, r0, asr #6
    143c:	00000000 	andeq	r0, r0, r0
    1440:	0000001c 	andeq	r0, r0, ip, lsl r0
