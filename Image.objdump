
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000015f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
		// Called to issue a wait request
		if (st == WNONE)
       8:	000015eb 	andeq	r1, r0, fp, ror #11
       c:	000015ed 	andeq	r1, r0, sp, ror #11
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000015ef 	andeq	r1, r0, pc, ror #11
      14:	000015ef 	andeq	r1, r0, pc, ror #11
		when (&__input_pins, st);
      18:	000015ef 	andeq	r1, r0, pc, ror #11
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000015ef 	andeq	r1, r0, pc, ror #11
      30:	000015ef 	andeq	r1, r0, pc, ror #11
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000015ef 	andeq	r1, r0, pc, ror #11
      3c:	000015ef 	andeq	r1, r0, pc, ror #11
      40:	000009d5 	ldrdeq	r0, [r0], -r5
      44:	000015ef 	andeq	r1, r0, pc, ror #11
      48:	000015ef 	andeq	r1, r0, pc, ror #11
}
      4c:	000015ef 	andeq	r1, r0, pc, ror #11
      50:	00000595 	muleq	r0, r5, r5
      54:	00000895 	muleq	r0, r5, r8
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000015ef 	andeq	r1, r0, pc, ror #11
	    pbutton++) {
      5c:	000015ef 	andeq	r1, r0, pc, ror #11
      60:	000015ef 	andeq	r1, r0, pc, ror #11
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000015ef 	andeq	r1, r0, pc, ror #11
      68:	000015ef 	andeq	r1, r0, pc, ror #11
      6c:	000015ef 	andeq	r1, r0, pc, ror #11
      70:	000015ef 	andeq	r1, r0, pc, ror #11
      74:	000015ef 	andeq	r1, r0, pc, ror #11
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000015ef 	andeq	r1, r0, pc, ror #11
      7c:	000015ef 	andeq	r1, r0, pc, ror #11
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000015ef 	andeq	r1, r0, pc, ror #11
      84:	000015ef 	andeq	r1, r0, pc, ror #11
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000015ef 	andeq	r1, r0, pc, ror #11
      8c:	000015ef 	andeq	r1, r0, pc, ror #11
      90:	000015ef 	andeq	r1, r0, pc, ror #11
      94:	000015ef 	andeq	r1, r0, pc, ror #11
      98:	000015ef 	andeq	r1, r0, pc, ror #11
		goto Done;

	if (baction == NULL)
      9c:	000015ef 	andeq	r1, r0, pc, ror #11
      a0:	000015ef 	andeq	r1, r0, pc, ror #11
		goto Term;

	(*baction) (pbutton);
      a4:	000015ef 	andeq	r1, r0, pc, ror #11

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000015ef 	andeq	r1, r0, pc, ror #11
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000015ef 	andeq	r1, r0, pc, ror #11
      b0:	000015ef 	andeq	r1, r0, pc, ror #11
endthread
      b4:	000015ef 	andeq	r1, r0, pc, ror #11
      b8:	000015ef 	andeq	r1, r0, pc, ror #11
      bc:	000015ef 	andeq	r1, r0, pc, ror #11
      c0:	000015ef 	andeq	r1, r0, pc, ror #11
      c4:	000015ef 	andeq	r1, r0, pc, ror #11

000000c8 <blinker>:
      c8:	b570      	push	{r4, r5, r6, lr}
      ca:	b308      	cbz	r0, 110 <_Min_Stack_Size+0x10>
word adjustTime(word time) {
    return (time * SECOND)/1000;
}

// Finite state machine for flashing the LEDs and displaying cycle characters
fsm blinker {
      cc:	2801      	cmp	r0, #1
      ce:	f040 808f 	bne.w	1f0 <_Min_Stack_Size+0xf0>
        
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        // turn off the LED that was turned on in the Check_PERIOD state
        leds(led,0);
      d2:	4b49      	ldr	r3, [pc, #292]	; (1f8 <_Min_Stack_Size+0xf8>)
      d4:	4a49      	ldr	r2, [pc, #292]	; (1fc <_Min_Stack_Size+0xfc>)
      d6:	6819      	ldr	r1, [r3, #0]
      d8:	4b49      	ldr	r3, [pc, #292]	; (200 <_Min_Stack_Size+0x100>)
      da:	2900      	cmp	r1, #0
      dc:	d17d      	bne.n	1da <_Min_Stack_Size+0xda>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      de:	2140      	movs	r1, #64	; 0x40
      e0:	6011      	str	r1, [r2, #0]
      e2:	781a      	ldrb	r2, [r3, #0]
      e4:	0912      	lsrs	r2, r2, #4
      e6:	f002 020e 	and.w	r2, r2, #14
      ea:	7819      	ldrb	r1, [r3, #0]
      ec:	f362 1107 	bfi	r1, r2, #4, #4
      f0:	7019      	strb	r1, [r3, #0]
        
        // Display the off character if required
        if (displayCycle)
      f2:	4b44      	ldr	r3, [pc, #272]	; (204 <_Min_Stack_Size+0x104>)
      f4:	781b      	ldrb	r3, [r3, #0]
      f6:	b123      	cbz	r3, 102 <_Min_Stack_Size+0x2>
            ser_outf(Check_PERIOD, "%c ", 'F');
      f8:	2246      	movs	r2, #70	; 0x46
      fa:	2000      	movs	r0, #0
      fc:	4942      	ldr	r1, [pc, #264]	; (208 <_Min_Stack_Size+0x108>)
      fe:	f001 fb87 	bl	1810 <ser_outf>

        // Set the delay if it is set
        if(offTime > 0)
     102:	4b42      	ldr	r3, [pc, #264]	; (20c <_Min_Stack_Size+0x10c>)
     104:	6818      	ldr	r0, [r3, #0]
     106:	2800      	cmp	r0, #0
     108:	dd70      	ble.n	1ec <_Min_Stack_Size+0xec>
            delay(offTime, Check_PERIOD);
     10a:	2100      	movs	r1, #0
     10c:	b280      	uxth	r0, r0
     10e:	e042      	b.n	196 <_Min_Stack_Size+0x96>
        if(ledFlag == 0) {
     110:	4a3f      	ldr	r2, [pc, #252]	; (210 <_Min_Stack_Size+0x110>)
     112:	4d39      	ldr	r5, [pc, #228]	; (1f8 <_Min_Stack_Size+0xf8>)
     114:	6813      	ldr	r3, [r2, #0]
     116:	4e3f      	ldr	r6, [pc, #252]	; (214 <_Min_Stack_Size+0x114>)
     118:	4c3f      	ldr	r4, [pc, #252]	; (218 <_Min_Stack_Size+0x118>)
     11a:	493c      	ldr	r1, [pc, #240]	; (20c <_Min_Stack_Size+0x10c>)
     11c:	2b00      	cmp	r3, #0
     11e:	d13d      	bne.n	19c <_Min_Stack_Size+0x9c>
            led = redLed;
     120:	483e      	ldr	r0, [pc, #248]	; (21c <_Min_Stack_Size+0x11c>)
     122:	6800      	ldr	r0, [r0, #0]
     124:	6028      	str	r0, [r5, #0]
            ch = redCharacter;
     126:	483e      	ldr	r0, [pc, #248]	; (220 <_Min_Stack_Size+0x120>)
     128:	7800      	ldrb	r0, [r0, #0]
     12a:	7030      	strb	r0, [r6, #0]
            onTime = redOn;
     12c:	483d      	ldr	r0, [pc, #244]	; (224 <_Min_Stack_Size+0x124>)
     12e:	8800      	ldrh	r0, [r0, #0]
     130:	6020      	str	r0, [r4, #0]
            offTime = redOff;
     132:	483d      	ldr	r0, [pc, #244]	; (228 <_Min_Stack_Size+0x128>)
            offTime = greenOff;
     134:	8800      	ldrh	r0, [r0, #0]
        ledFlag = 1 - ledFlag;
     136:	f1c3 0301 	rsb	r3, r3, #1
            offTime = greenOff;
     13a:	6008      	str	r0, [r1, #0]
    return (time * SECOND)/1000;
     13c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        ledFlag = 1 - ledFlag;
     140:	6013      	str	r3, [r2, #0]
    return (time * SECOND)/1000;
     142:	880b      	ldrh	r3, [r1, #0]
     144:	8822      	ldrh	r2, [r4, #0]
     146:	029b      	lsls	r3, r3, #10
     148:	fbb3 f3f0 	udiv	r3, r3, r0
     14c:	0292      	lsls	r2, r2, #10
     14e:	fbb2 f2f0 	udiv	r2, r2, r0
        offTime = adjustTime(offTime);
     152:	b29b      	uxth	r3, r3
     154:	600b      	str	r3, [r1, #0]
        if (displayCycle)
     156:	4b2b      	ldr	r3, [pc, #172]	; (204 <_Min_Stack_Size+0x104>)
        onTime = adjustTime(onTime);
     158:	b292      	uxth	r2, r2
        if (displayCycle)
     15a:	781b      	ldrb	r3, [r3, #0]
        onTime = adjustTime(onTime);
     15c:	6022      	str	r2, [r4, #0]
        if (displayCycle)
     15e:	b123      	cbz	r3, 16a <_Min_Stack_Size+0x6a>
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	2000      	movs	r0, #0
     162:	7832      	ldrb	r2, [r6, #0]
     164:	4928      	ldr	r1, [pc, #160]	; (208 <_Min_Stack_Size+0x108>)
     166:	f001 fb53 	bl	1810 <ser_outf>
        if(onTime > 0){
     16a:	6823      	ldr	r3, [r4, #0]
     16c:	2b00      	cmp	r3, #0
     16e:	dd2b      	ble.n	1c8 <_Min_Stack_Size+0xc8>
            if(On)
     170:	4b2e      	ldr	r3, [pc, #184]	; (22c <_Min_Stack_Size+0x12c>)
     172:	2040      	movs	r0, #64	; 0x40
     174:	7819      	ldrb	r1, [r3, #0]
     176:	682a      	ldr	r2, [r5, #0]
     178:	4b21      	ldr	r3, [pc, #132]	; (200 <_Min_Stack_Size+0x100>)
     17a:	b1d1      	cbz	r1, 1b2 <_Min_Stack_Size+0xb2>
                leds(led,1);
     17c:	492c      	ldr	r1, [pc, #176]	; (230 <_Min_Stack_Size+0x130>)
                leds(led,0);
     17e:	b9d2      	cbnz	r2, 1b6 <_Min_Stack_Size+0xb6>
     180:	6008      	str	r0, [r1, #0]
     182:	781a      	ldrb	r2, [r3, #0]
     184:	0912      	lsrs	r2, r2, #4
     186:	f002 020e 	and.w	r2, r2, #14
     18a:	7819      	ldrb	r1, [r3, #0]
     18c:	f362 1107 	bfi	r1, r2, #4, #4
     190:	7019      	strb	r1, [r3, #0]
            delay(onTime, OFF_PERIOD);
     192:	2101      	movs	r1, #1
     194:	8820      	ldrh	r0, [r4, #0]
            delay(offTime, Check_PERIOD);
     196:	f000 ffcf 	bl	1138 <delay>
     19a:	e018      	b.n	1ce <_Min_Stack_Size+0xce>
            led = greenLed;
     19c:	4825      	ldr	r0, [pc, #148]	; (234 <_Min_Stack_Size+0x134>)
     19e:	6800      	ldr	r0, [r0, #0]
     1a0:	6028      	str	r0, [r5, #0]
            ch = greenCharacter;
     1a2:	4825      	ldr	r0, [pc, #148]	; (238 <_Min_Stack_Size+0x138>)
     1a4:	7800      	ldrb	r0, [r0, #0]
     1a6:	7030      	strb	r0, [r6, #0]
            onTime = greenOn;
     1a8:	4824      	ldr	r0, [pc, #144]	; (23c <_Min_Stack_Size+0x13c>)
     1aa:	8800      	ldrh	r0, [r0, #0]
     1ac:	6020      	str	r0, [r4, #0]
            offTime = greenOff;
     1ae:	4824      	ldr	r0, [pc, #144]	; (240 <_Min_Stack_Size+0x140>)
     1b0:	e7c0      	b.n	134 <_Min_Stack_Size+0x34>
                leds(led,0);
     1b2:	4912      	ldr	r1, [pc, #72]	; (1fc <_Min_Stack_Size+0xfc>)
     1b4:	e7e3      	b.n	17e <_Min_Stack_Size+0x7e>
     1b6:	2a01      	cmp	r2, #1
     1b8:	d1eb      	bne.n	192 <_Min_Stack_Size+0x92>
     1ba:	2280      	movs	r2, #128	; 0x80
     1bc:	600a      	str	r2, [r1, #0]
     1be:	781a      	ldrb	r2, [r3, #0]
     1c0:	0912      	lsrs	r2, r2, #4
     1c2:	f002 020d 	and.w	r2, r2, #13
     1c6:	e7e0      	b.n	18a <_Min_Stack_Size+0x8a>
            proceed OFF_PERIOD;
     1c8:	2001      	movs	r0, #1
     1ca:	f000 ff65 	bl	1098 <proceed>
        when(&On, Check_PERIOD);
     1ce:	2100      	movs	r1, #0
     1d0:	4816      	ldr	r0, [pc, #88]	; (22c <_Min_Stack_Size+0x12c>)
     1d2:	f000 ff6b 	bl	10ac <__pi_wait>
        release;
     1d6:	f000 fd2b 	bl	c30 <__pi_release>
        leds(led,0);
     1da:	2901      	cmp	r1, #1
     1dc:	d189      	bne.n	f2 <blinker+0x2a>
     1de:	2180      	movs	r1, #128	; 0x80
     1e0:	6011      	str	r1, [r2, #0]
     1e2:	781a      	ldrb	r2, [r3, #0]
     1e4:	0912      	lsrs	r2, r2, #4
     1e6:	f002 020d 	and.w	r2, r2, #13
     1ea:	e77e      	b.n	ea <blinker+0x22>
        else
            proceed Check_PERIOD;
     1ec:	2000      	movs	r0, #0
     1ee:	e7ec      	b.n	1ca <_Min_Stack_Size+0xca>

        when(&On, Check_PERIOD);
        release;
}
     1f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     1f4:	f000 bee2 	b.w	fbc <__pi_badstate>
     1f8:	2000001c 	andcs	r0, r0, ip, lsl r0
     1fc:	400220a0 	andmi	r2, r2, r0, lsr #1
     200:	20000098 	mulcs	r0, r8, r0
     204:	20000016 	andcs	r0, r0, r6, lsl r0
     208:	00002c48 	andeq	r2, r0, r8, asr #24
     20c:	20000024 	andcs	r0, r0, r4, lsr #32
     210:	20000020 	andcs	r0, r0, r0, lsr #32
     214:	20000015 	andcs	r0, r0, r5, lsl r0
     218:	20000028 	andcs	r0, r0, r8, lsr #32
     21c:	2000002c 	andcs	r0, r0, ip, lsr #32
     220:	20000008 	andcs	r0, r0, r8
     224:	20000032 	andcs	r0, r0, r2, lsr r0
     228:	20000030 	andcs	r0, r0, r0, lsr r0
     22c:	2000000c 	andcs	r0, r0, ip
     230:	40022090 	mulmi	r2, r0, r0
     234:	20000004 	andcs	r0, r0, r4
     238:	20000000 	andcs	r0, r0, r0
     23c:	2000001a 	andcs	r0, r0, sl, lsl r0
     240:	20000018 	andcs	r0, r0, r8, lsl r0

00000244 <processSettingsInput>:
 * 
 * Parameters:
 *  settingsInput: The string that holds the user inputted time intervals
*/
void processSettingsInput(char * settingsInput){
    word numbers[] = {0, 0, 0, 0};
     244:	2300      	movs	r3, #0
void processSettingsInput(char * settingsInput){
     246:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int numbersIndex = 0;
     248:	461c      	mov	r4, r3
    word numbers[] = {0, 0, 0, 0};
     24a:	e9cd 3300 	strd	r3, r3, [sp]

    word number = 0;

    // Extract the intervals from the settings input string
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     24e:	1e41      	subs	r1, r0, #1
     250:	3031      	adds	r0, #49	; 0x31
        if(settingsInput[i] == ' ') {
     252:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     256:	2a20      	cmp	r2, #32
     258:	d11a      	bne.n	290 <processSettingsInput+0x4c>
            // seperate the input on the spaces
            numbers[numbersIndex] = number;
     25a:	aa02      	add	r2, sp, #8
     25c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
     260:	f822 3c08 	strh.w	r3, [r2, #-8]
            number = 0;
     264:	2300      	movs	r3, #0
            numbersIndex++;
     266:	3401      	adds	r4, #1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	4281      	cmp	r1, r0
     26a:	d1f2      	bne.n	252 <processSettingsInput+0xe>
            number = number * 10;
            number += settingsInput[i] - 48;
        }
    }

    redOn = numbers[0];
     26c:	f8bd 2000 	ldrh.w	r2, [sp]
     270:	4b0c      	ldr	r3, [pc, #48]	; (2a4 <processSettingsInput+0x60>)
     272:	801a      	strh	r2, [r3, #0]
    redOff = numbers[1];
     274:	f8bd 2002 	ldrh.w	r2, [sp, #2]
     278:	4b0b      	ldr	r3, [pc, #44]	; (2a8 <processSettingsInput+0x64>)
     27a:	801a      	strh	r2, [r3, #0]

    greenOn = numbers[2];
     27c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     280:	4b0a      	ldr	r3, [pc, #40]	; (2ac <processSettingsInput+0x68>)
     282:	801a      	strh	r2, [r3, #0]
    greenOff = numbers[3];
     284:	4b0a      	ldr	r3, [pc, #40]	; (2b0 <processSettingsInput+0x6c>)
     286:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     28a:	801a      	strh	r2, [r3, #0]
}
     28c:	b003      	add	sp, #12
     28e:	bd30      	pop	{r4, r5, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	3a30      	subs	r2, #48	; 0x30
     292:	b2d5      	uxtb	r5, r2
     294:	2d09      	cmp	r5, #9
            number = number * 10;
     296:	bf9e      	ittt	ls
     298:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
            number += settingsInput[i] - 48;
     29c:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
     2a0:	b29b      	uxthls	r3, r3
     2a2:	e7e1      	b.n	268 <processSettingsInput+0x24>
     2a4:	20000032 	andcs	r0, r0, r2, lsr r0
     2a8:	20000030 	andcs	r0, r0, r0, lsr r0
     2ac:	2000001a 	andcs	r0, r0, sl, lsl r0
     2b0:	20000018 	andcs	r0, r0, r8, lsl r0

000002b4 <root>:

// Root finite state machine that handles user input
fsm root {
     2b4:	b510      	push	{r4, lr}
     2b6:	b090      	sub	sp, #64	; 0x40
     2b8:	280a      	cmp	r0, #10
     2ba:	f200 8095 	bhi.w	3e8 <root+0x134>
     2be:	e8df f000 	tbb	[pc, r0]
     2c2:	140f0a06 	strne	r0, [pc], #-2566	; 2ca <root+0x16>
     2c6:	43312925 	teqmi	r1, #606208	; 0x94000
     2ca:	006f5b54 	rsbeq	r5, pc, r4, asr fp	; <UNPREDICTABLE>
    fsmcode blinkerCode;

    Boolean blinkerRunning = NO;
        
    state Initial:
        ser_outf(Initial, "Enter your name: ");
     2ce:	2000      	movs	r0, #0
     2d0:	4947      	ldr	r1, [pc, #284]	; (3f0 <root+0x13c>)
     2d2:	f001 fa9d 	bl	1810 <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     2d6:	2214      	movs	r2, #20
     2d8:	2001      	movs	r0, #1
     2da:	4946      	ldr	r1, [pc, #280]	; (3f4 <root+0x140>)
     2dc:	f001 fa5c 	bl	1798 <ser_in>

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	2002      	movs	r0, #2
     2e2:	4a44      	ldr	r2, [pc, #272]	; (3f4 <root+0x140>)
     2e4:	4944      	ldr	r1, [pc, #272]	; (3f8 <root+0x144>)
     2e6:	f001 fa93 	bl	1810 <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     2ea:	2003      	movs	r0, #3
     2ec:	4943      	ldr	r1, [pc, #268]	; (3fc <root+0x148>)
     2ee:	aa03      	add	r2, sp, #12
     2f0:	f001 fab8 	bl	1864 <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     2f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
     2f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     2fc:	2b41      	cmp	r3, #65	; 0x41
     2fe:	d167      	bne.n	3d0 <root+0x11c>
            proceed Adjust_Intervals;
     300:	2004      	movs	r0, #4
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     302:	f000 fec9 	bl	1098 <proceed>
        }

        proceed Show_Menu;
     306:	2002      	movs	r0, #2
     308:	f000 fec6 	bl	1098 <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	2000      	movs	r0, #0
     30e:	493c      	ldr	r1, [pc, #240]	; (400 <root+0x14c>)
     310:	f001 fa7e 	bl	1810 <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	2232      	movs	r2, #50	; 0x32
     316:	2005      	movs	r0, #5
     318:	a903      	add	r1, sp, #12
     31a:	f001 fa3d 	bl	1798 <ser_in>

        processSettingsInput(settings);
     31e:	a803      	add	r0, sp, #12
     320:	f7ff ff90 	bl	244 <processSettingsInput>

    state Start_Blinker:

        if(!blinkerRunning) {
     324:	4c37      	ldr	r4, [pc, #220]	; (404 <root+0x150>)
     326:	7821      	ldrb	r1, [r4, #0]
     328:	b931      	cbnz	r1, 338 <root+0x84>
            // only calls the blinker fsm if it isn't running already
            blinkerCode = runfsm blinker;
     32a:	4837      	ldr	r0, [pc, #220]	; (408 <root+0x154>)
     32c:	f001 f898 	bl	1460 <__pi_fork>
     330:	4b36      	ldr	r3, [pc, #216]	; (40c <root+0x158>)
     332:	6018      	str	r0, [r3, #0]
            blinkerRunning = YES;
     334:	2301      	movs	r3, #1
     336:	7023      	strb	r3, [r4, #0]
        }

        On = YES;
     338:	2301      	movs	r3, #1
     33a:	4835      	ldr	r0, [pc, #212]	; (410 <root+0x15c>)
     33c:	7003      	strb	r3, [r0, #0]

        trigger(&On);
     33e:	f000 fecf 	bl	10e0 <__pi_trigger>

        proceed Show_Menu;
     342:	2002      	movs	r0, #2
     344:	f000 fea8 	bl	1098 <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	4b32      	ldr	r3, [pc, #200]	; (414 <root+0x160>)
     34a:	4a33      	ldr	r2, [pc, #204]	; (418 <root+0x164>)
     34c:	881b      	ldrh	r3, [r3, #0]
     34e:	2007      	movs	r0, #7
     350:	9301      	str	r3, [sp, #4]
     352:	4b32      	ldr	r3, [pc, #200]	; (41c <root+0x168>)
     354:	4932      	ldr	r1, [pc, #200]	; (420 <root+0x16c>)
     356:	881b      	ldrh	r3, [r3, #0]
     358:	9300      	str	r3, [sp, #0]
     35a:	4b32      	ldr	r3, [pc, #200]	; (424 <root+0x170>)
     35c:	8812      	ldrh	r2, [r2, #0]
     35e:	881b      	ldrh	r3, [r3, #0]
     360:	f001 fa56 	bl	1810 <ser_outf>
            redOff,
            greenOn,
            greenOff
        );

        proceed Show_Menu;
     364:	2002      	movs	r0, #2
     366:	f000 fe97 	bl	1098 <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36a:	2008      	movs	r0, #8
     36c:	492e      	ldr	r1, [pc, #184]	; (428 <root+0x174>)
     36e:	f001 fa4f 	bl	1810 <ser_outf>
        displayCycle = YES;
     372:	2201      	movs	r2, #1
     374:	4b2d      	ldr	r3, [pc, #180]	; (42c <root+0x178>)
     376:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", &ch);
     378:	2009      	movs	r0, #9
     37a:	4920      	ldr	r1, [pc, #128]	; (3fc <root+0x148>)
     37c:	aa03      	add	r2, sp, #12
     37e:	f001 fa71 	bl	1864 <ser_inf>
        
        // ensures monitoring only stops when 'S' or 's' are entered
        if(ch == 'S' || ch == 's'){
     382:	f89d 300c 	ldrb.w	r3, [sp, #12]
     386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     38a:	2b53      	cmp	r3, #83	; 0x53
     38c:	d105      	bne.n	39a <root+0xe6>
            displayCycle = NO;
     38e:	2200      	movs	r2, #0
     390:	4b26      	ldr	r3, [pc, #152]	; (42c <root+0x178>)
            proceed Show_Menu;
     392:	2002      	movs	r0, #2
            displayCycle = NO;
     394:	701a      	strb	r2, [r3, #0]
            proceed Show_Menu;
     396:	f000 fe7f 	bl	1098 <proceed>
        }
        
        proceed Monitor;
     39a:	2008      	movs	r0, #8
     39c:	f000 fe7c 	bl	1098 <proceed>

    state Stop:
        On = NO;
     3a0:	2200      	movs	r2, #0
     3a2:	4b1b      	ldr	r3, [pc, #108]	; (410 <root+0x15c>)
     3a4:	701a      	strb	r2, [r3, #0]

        // Makes sure that the blinker code hasa been assigned to an actual value first
        if(blinkerCode != 0x0) {
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <root+0x158>)
     3a8:	6818      	ldr	r0, [r3, #0]
     3aa:	b108      	cbz	r0, 3b0 <root+0xfc>
            killall(blinkerCode);
     3ac:	f000 ffd8 	bl	1360 <killall>
     3b0:	2240      	movs	r2, #64	; 0x40
     3b2:	4b1f      	ldr	r3, [pc, #124]	; (430 <root+0x17c>)
        }

        // turn off all LEDs
        leds_all(0);

        proceed Show_Menu;
     3b4:	2002      	movs	r0, #2
     3b6:	601a      	str	r2, [r3, #0]
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	601a      	str	r2, [r3, #0]
        leds_all(0);
     3bc:	4a1d      	ldr	r2, [pc, #116]	; (434 <root+0x180>)
     3be:	7813      	ldrb	r3, [r2, #0]
     3c0:	7813      	ldrb	r3, [r2, #0]
     3c2:	f36f 1307 	bfc	r3, #4, #4
     3c6:	7013      	strb	r3, [r2, #0]
        proceed Show_Menu;
     3c8:	f000 fe66 	bl	1098 <proceed>
     3cc:	b010      	add	sp, #64	; 0x40
     3ce:	bd10      	pop	{r4, pc}
        } else if (choice == 'S' || choice == 's') {
     3d0:	2b53      	cmp	r3, #83	; 0x53
     3d2:	d101      	bne.n	3d8 <root+0x124>
            proceed Stop;
     3d4:	200a      	movs	r0, #10
     3d6:	e794      	b.n	302 <root+0x4e>
        } else if (choice == 'V' || choice == 'v') {
     3d8:	2b56      	cmp	r3, #86	; 0x56
     3da:	d101      	bne.n	3e0 <root+0x12c>
            proceed View_Settings;
     3dc:	2007      	movs	r0, #7
     3de:	e790      	b.n	302 <root+0x4e>
        } else if (choice == 'M' || choice == 'm') {
     3e0:	2b4d      	cmp	r3, #77	; 0x4d
     3e2:	d190      	bne.n	306 <root+0x52>
            proceed Monitor;
     3e4:	2008      	movs	r0, #8
     3e6:	e78c      	b.n	302 <root+0x4e>
     3e8:	f000 fde8 	bl	fbc <__pi_badstate>
     3ec:	e7ee      	b.n	3cc <root+0x118>
     3ee:	bf00      	nop
     3f0:	00002c4c 	andeq	r2, r0, ip, asr #24
     3f4:	20000034 	andcs	r0, r0, r4, lsr r0
     3f8:	00002c5e 	andeq	r2, r0, lr, asr ip
     3fc:	00002cef 	andeq	r2, r0, pc, ror #25
     400:	00002cf2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     404:	20000014 	andcs	r0, r0, r4, lsl r0
     408:	000000c9 	andeq	r0, r0, r9, asr #1
     40c:	20000010 	andcs	r0, r0, r0, lsl r0
     410:	2000000c 	andcs	r0, r0, ip
     414:	20000018 	andcs	r0, r0, r8, lsl r0
     418:	20000032 	andcs	r0, r0, r2, lsr r0
     41c:	2000001a 	andcs	r0, r0, sl, lsl r0
     420:	00002d25 	andeq	r2, r0, r5, lsr #26
     424:	20000030 	andcs	r0, r0, r0, lsr r0
     428:	00002d60 	andeq	r2, r0, r0, ror #26
     42c:	20000016 	andcs	r0, r0, r6, lsl r0
     430:	400220a0 	andmi	r2, r2, r0, lsr #1
     434:	20000098 	mulcs	r0, r8, r0

00000438 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     438:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     43a:	4801      	ldr	r0, [pc, #4]	; (440 <devinit_uart+0x8>)
     43c:	f000 bebc 	b.w	11b8 <adddevfunc>
     440:	00000785 	andeq	r0, r0, r5, lsl #15

00000444 <udelay>:
void udelay (volatile word n) {
     444:	b082      	sub	sp, #8
     446:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     44a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     44e:	b29b      	uxth	r3, r3
     450:	b90b      	cbnz	r3, 456 <udelay+0x12>
}
     452:	b002      	add	sp, #8
     454:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     456:	2304      	movs	r3, #4
	while (n--);
     458:	461a      	mov	r2, r3
     45a:	3b01      	subs	r3, #1
     45c:	b29b      	uxth	r3, r3
     45e:	2a00      	cmp	r2, #0
     460:	d1fa      	bne.n	458 <udelay+0x14>
		n--;
     462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     466:	3b01      	subs	r3, #1
     468:	b29b      	uxth	r3, r3
     46a:	f8ad 3006 	strh.w	r3, [sp, #6]
     46e:	e7ec      	b.n	44a <udelay+0x6>

00000470 <mdelay>:
void mdelay (volatile word n) {
     470:	b507      	push	{r0, r1, r2, lr}
     472:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     476:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     47a:	b29b      	uxth	r3, r3
     47c:	b913      	cbnz	r3, 484 <mdelay+0x14>
}
     47e:	b003      	add	sp, #12
     480:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     484:	f240 30e7 	movw	r0, #999	; 0x3e7
     488:	f7ff ffdc 	bl	444 <udelay>
		n--;
     48c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     490:	3b01      	subs	r3, #1
     492:	b29b      	uxth	r3, r3
     494:	f8ad 3006 	strh.w	r3, [sp, #6]
     498:	e7ed      	b.n	476 <mdelay+0x6>
	...

0000049c <__pi_ondomain>:
void __pi_ondomain (lword d) {
     49c:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     49e:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     4a0:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     4a2:	d505      	bpl.n	4b0 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     4a4:	4b0a      	ldr	r3, [pc, #40]	; (4d0 <__pi_ondomain+0x34>)
     4a6:	78da      	ldrb	r2, [r3, #3]
     4a8:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     4aa:	bf84      	itt	hi
     4ac:	2201      	movhi	r2, #1
     4ae:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     4b0:	4d08      	ldr	r5, [pc, #32]	; (4d4 <__pi_ondomain+0x38>)
     4b2:	4620      	mov	r0, r4
     4b4:	682b      	ldr	r3, [r5, #0]
     4b6:	695b      	ldr	r3, [r3, #20]
     4b8:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4ba:	682b      	ldr	r3, [r5, #0]
     4bc:	4620      	mov	r0, r4
     4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     4c0:	4798      	blx	r3
     4c2:	2801      	cmp	r0, #1
     4c4:	d1f9      	bne.n	4ba <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     4c6:	4b02      	ldr	r3, [pc, #8]	; (4d0 <__pi_ondomain+0x34>)
     4c8:	6858      	ldr	r0, [r3, #4]
     4ca:	4304      	orrs	r4, r0
     4cc:	605c      	str	r4, [r3, #4]
}
     4ce:	bd38      	pop	{r3, r4, r5, pc}
     4d0:	20000098 	mulcs	r0, r8, r0
     4d4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

000004d8 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     4d8:	460a      	mov	r2, r1
     4da:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	4601      	mov	r1, r0
     4de:	480f      	ldr	r0, [pc, #60]	; (51c <__pi_syserror+0x44>)
     4e0:	f000 ffe4 	bl	14ac <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e6:	2540      	movs	r5, #64	; 0x40
     4e8:	462f      	mov	r7, r5
     4ea:	4e0d      	ldr	r6, [pc, #52]	; (520 <__pi_syserror+0x48>)
     4ec:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     4ee:	490d      	ldr	r1, [pc, #52]	; (524 <__pi_syserror+0x4c>)
     4f0:	6037      	str	r7, [r6, #0]
     4f2:	6034      	str	r4, [r6, #0]
     4f4:	780b      	ldrb	r3, [r1, #0]
     4f6:	780b      	ldrb	r3, [r1, #0]
     4f8:	20c8      	movs	r0, #200	; 0xc8
     4fa:	f36f 1307 	bfc	r3, #4, #4
     4fe:	700b      	strb	r3, [r1, #0]
     500:	f7ff ffb6 	bl	470 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     504:	4b08      	ldr	r3, [pc, #32]	; (528 <__pi_syserror+0x50>)
     506:	20c8      	movs	r0, #200	; 0xc8
     508:	601d      	str	r5, [r3, #0]
     50a:	601c      	str	r4, [r3, #0]
     50c:	780b      	ldrb	r3, [r1, #0]
     50e:	780b      	ldrb	r3, [r1, #0]
     510:	f36f 1307 	bfc	r3, #4, #4
     514:	700b      	strb	r3, [r1, #0]
     516:	f7ff ffab 	bl	470 <mdelay>
	while (1) {
     51a:	e7e7      	b.n	4ec <__pi_syserror+0x14>
     51c:	00002d7c 	andeq	r2, r0, ip, ror sp
     520:	40022090 	mulmi	r2, r0, r0
     524:	20000098 	mulcs	r0, r8, r0
     528:	400220a0 	andmi	r2, r2, r0, lsr #1

0000052c <tci_run_delay_timer>:
void tci_run_delay_timer () {
     52c:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     52e:	4b0a      	ldr	r3, [pc, #40]	; (558 <tci_run_delay_timer+0x2c>)
     530:	881c      	ldrh	r4, [r3, #0]
     532:	4b0a      	ldr	r3, [pc, #40]	; (55c <tci_run_delay_timer+0x30>)
     534:	8818      	ldrh	r0, [r3, #0]
     536:	4b0a      	ldr	r3, [pc, #40]	; (560 <tci_run_delay_timer+0x34>)
     538:	1b00      	subs	r0, r0, r4
     53a:	b284      	uxth	r4, r0
     53c:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     53e:	f001 fdb7 	bl	20b0 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     542:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     544:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     546:	4b07      	ldr	r3, [pc, #28]	; (564 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     54c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	6018      	str	r0, [r3, #0]
	sti_tim;
     552:	4b05      	ldr	r3, [pc, #20]	; (568 <tci_run_delay_timer+0x3c>)
     554:	601a      	str	r2, [r3, #0]
}
     556:	bd10      	pop	{r4, pc}
     558:	20000096 	mulcs	r0, r6, r0
     55c:	20000094 	mulcs	r0, r4, r0
     560:	20000048 	andcs	r0, r0, r8, asr #32
     564:	40092018 	andmi	r2, r9, r8, lsl r0
     568:	43240280 			; <UNDEFINED> instruction: 0x43240280

0000056c <tci_run_auxiliary_timer>:
	cli_aux;
     56c:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     56e:	b510      	push	{r4, lr}
	cli_aux;
     570:	4c06      	ldr	r4, [pc, #24]	; (58c <tci_run_auxiliary_timer+0x20>)
     572:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	f001 fd9c 	bl	20b0 <NOROM_AONRTCCurrent64BitValueGet>
     578:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     57c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     580:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     582:	6018      	str	r0, [r3, #0]
	sti_aux;
     584:	2301      	movs	r3, #1
     586:	6023      	str	r3, [r4, #0]
}
     588:	bd10      	pop	{r4, pc}
     58a:	bf00      	nop
     58c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     590:	40092020 	andmi	r2, r9, r0, lsr #32

00000594 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     594:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     596:	4b3b      	ldr	r3, [pc, #236]	; (684 <AONRTCIntHandler+0xf0>)
     598:	6818      	ldr	r0, [r3, #0]
     59a:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     59e:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     5a2:	d542      	bpl.n	62a <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     5a4:	4b38      	ldr	r3, [pc, #224]	; (688 <AONRTCIntHandler+0xf4>)
     5a6:	6819      	ldr	r1, [r3, #0]
     5a8:	2900      	cmp	r1, #0
     5aa:	d053      	beq.n	654 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     5ac:	880a      	ldrh	r2, [r1, #0]
     5ae:	2a00      	cmp	r2, #0
     5b0:	d04e      	beq.n	650 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     5b2:	3a01      	subs	r2, #1
     5b4:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     5b6:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     5b8:	685c      	ldr	r4, [r3, #4]
     5ba:	b194      	cbz	r4, 5e2 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     5bc:	8821      	ldrh	r1, [r4, #0]
     5be:	b111      	cbz	r1, 5c6 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     5c0:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     5c2:	3901      	subs	r1, #1
     5c4:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     5c6:	689c      	ldr	r4, [r3, #8]
     5c8:	b15c      	cbz	r4, 5e2 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     5ca:	8821      	ldrh	r1, [r4, #0]
     5cc:	b111      	cbz	r1, 5d4 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     5ce:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     5d0:	3901      	subs	r1, #1
     5d2:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     5d4:	68d9      	ldr	r1, [r3, #12]
     5d6:	b121      	cbz	r1, 5e2 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     5d8:	880b      	ldrh	r3, [r1, #0]
     5da:	b113      	cbz	r3, 5e2 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     5dc:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     5de:	3b01      	subs	r3, #1
     5e0:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     5e2:	4b2a      	ldr	r3, [pc, #168]	; (68c <AONRTCIntHandler+0xf8>)
     5e4:	7819      	ldrb	r1, [r3, #0]
     5e6:	0909      	lsrs	r1, r1, #4
     5e8:	d047      	beq.n	67a <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     5ea:	7859      	ldrb	r1, [r3, #1]
     5ec:	1c4a      	adds	r2, r1, #1
     5ee:	b2d2      	uxtb	r2, r2
     5f0:	705a      	strb	r2, [r3, #1]
     5f2:	b9d1      	cbnz	r1, 62a <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     5f4:	781a      	ldrb	r2, [r3, #0]
     5f6:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     5fa:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     5fc:	d02c      	beq.n	658 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     5fe:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	bf42      	ittt	mi
     602:	2140      	movmi	r1, #64	; 0x40
     604:	4a22      	ldrmi	r2, [pc, #136]	; (690 <AONRTCIntHandler+0xfc>)
     606:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     608:	781a      	ldrb	r2, [r3, #0]
     60a:	0692      	lsls	r2, r2, #26
     60c:	bf42      	ittt	mi
     60e:	2180      	movmi	r1, #128	; 0x80
     610:	4a1f      	ldrmi	r2, [pc, #124]	; (690 <AONRTCIntHandler+0xfc>)
     612:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     614:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     616:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     618:	781a      	ldrb	r2, [r3, #0]
     61a:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     61e:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     620:	781a      	ldrb	r2, [r3, #0]
     622:	0752      	lsls	r2, r2, #29
     624:	d501      	bpl.n	62a <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     626:	22c8      	movs	r2, #200	; 0xc8
     628:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     62a:	07c3      	lsls	r3, r0, #31
     62c:	d50f      	bpl.n	64e <AONRTCIntHandler+0xba>
		cli_tim;
     62e:	2100      	movs	r1, #0
     630:	4b18      	ldr	r3, [pc, #96]	; (694 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     632:	4a19      	ldr	r2, [pc, #100]	; (698 <AONRTCIntHandler+0x104>)
     634:	4819      	ldr	r0, [pc, #100]	; (69c <AONRTCIntHandler+0x108>)
		cli_tim;
     636:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     638:	8803      	ldrh	r3, [r0, #0]
     63a:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     63c:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     63e:	4423      	add	r3, r4
		RISE_N_SHINE;
     640:	4a12      	ldr	r2, [pc, #72]	; (68c <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     642:	b29b      	uxth	r3, r3
     644:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     646:	7813      	ldrb	r3, [r2, #0]
     648:	f043 0302 	orr.w	r3, r3, #2
     64c:	7013      	strb	r3, [r2, #0]
}
     64e:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     650:	2201      	movs	r2, #1
     652:	e7b1      	b.n	5b8 <AONRTCIntHandler+0x24>
     654:	2201      	movs	r2, #1
     656:	e7c4      	b.n	5e2 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     658:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65a:	bf42      	ittt	mi
     65c:	2140      	movmi	r1, #64	; 0x40
     65e:	4a10      	ldrmi	r2, [pc, #64]	; (6a0 <AONRTCIntHandler+0x10c>)
     660:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     662:	781a      	ldrb	r2, [r3, #0]
     664:	0691      	lsls	r1, r2, #26
     666:	bf42      	ittt	mi
     668:	2180      	movmi	r1, #128	; 0x80
     66a:	4a0d      	ldrmi	r2, [pc, #52]	; (6a0 <AONRTCIntHandler+0x10c>)
     66c:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     66e:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     670:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     672:	781a      	ldrb	r2, [r3, #0]
     674:	f042 0208 	orr.w	r2, r2, #8
     678:	e7d1      	b.n	61e <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     67a:	2a00      	cmp	r2, #0
     67c:	d0d5      	beq.n	62a <AONRTCIntHandler+0x96>
			cli_aux;
     67e:	4b09      	ldr	r3, [pc, #36]	; (6a4 <AONRTCIntHandler+0x110>)
     680:	6019      	str	r1, [r3, #0]
     682:	e7d2      	b.n	62a <AONRTCIntHandler+0x96>
     684:	40092004 	andmi	r2, r9, r4
     688:	200000a4 	andcs	r0, r0, r4, lsr #1
     68c:	20000098 	mulcs	r0, r8, r0
     690:	40022090 	mulmi	r2, r0, r0
     694:	43240280 			; <UNDEFINED> instruction: 0x43240280
     698:	20000048 	andcs	r0, r0, r8, asr #32
     69c:	200000a0 	andcs	r0, r0, r0, lsr #1
     6a0:	400220a0 	andmi	r2, r2, r0, lsr #1
     6a4:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

000006a8 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     6aa:	2600      	movs	r6, #0
     6ac:	4b0e      	ldr	r3, [pc, #56]	; (6e8 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     6ae:	4f0f      	ldr	r7, [pc, #60]	; (6ec <tci_update_delay_ticks+0x44>)
	cli_tim;
     6b0:	601e      	str	r6, [r3, #0]
	if (setdel) {
     6b2:	883d      	ldrh	r5, [r7, #0]
     6b4:	b19d      	cbz	r5, 6de <tci_update_delay_ticks+0x36>
		if (force) {
     6b6:	b1a0      	cbz	r0, 6e2 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	4b0d      	ldr	r3, [pc, #52]	; (6f0 <tci_update_delay_ticks+0x48>)
     6ba:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	f001 fcf8 	bl	20b0 <NOROM_AONRTCCurrent64BitValueGet>
     6c0:	0d80      	lsrs	r0, r0, #22
     6c2:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c6:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     6ca:	b280      	uxth	r0, r0
     6cc:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ce:	1b2c      	subs	r4, r5, r4
	return NO;
     6d0:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d2:	4b08      	ldr	r3, [pc, #32]	; (6f4 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     6d4:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d6:	881a      	ldrh	r2, [r3, #0]
     6d8:	4414      	add	r4, r2
     6da:	b2a4      	uxth	r4, r4
     6dc:	801c      	strh	r4, [r3, #0]
}
     6de:	4628      	mov	r0, r5
     6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     6e2:	2501      	movs	r5, #1
     6e4:	601d      	str	r5, [r3, #0]
		return YES;
     6e6:	e7fa      	b.n	6de <tci_update_delay_ticks+0x36>
     6e8:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6ec:	20000048 	andcs	r0, r0, r8, asr #32
     6f0:	40092018 	andmi	r2, r9, r8, lsl r0
     6f4:	200000a0 	andcs	r0, r0, r0, lsr #1

000006f8 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     6fa:	4e0f      	ldr	r6, [pc, #60]	; (738 <__pi_uart_setrate+0x40>)
     6fc:	4d0f      	ldr	r5, [pc, #60]	; (73c <__pi_uart_setrate+0x44>)
     6fe:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     702:	68db      	ldr	r3, [r3, #12]
     704:	4628      	mov	r0, r5
     706:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     708:	2264      	movs	r2, #100	; 0x64
     70a:	6833      	ldr	r3, [r6, #0]
     70c:	4628      	mov	r0, r5
     70e:	4362      	muls	r2, r4
     710:	685e      	ldr	r6, [r3, #4]
     712:	490b      	ldr	r1, [pc, #44]	; (740 <__pi_uart_setrate+0x48>)
     714:	2360      	movs	r3, #96	; 0x60
     716:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	4a0a      	ldr	r2, [pc, #40]	; (744 <__pi_uart_setrate+0x4c>)
}
     71a:	2001      	movs	r0, #1
     71c:	6813      	ldr	r3, [r2, #0]
     71e:	f043 0310 	orr.w	r3, r3, #16
     722:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	6853      	ldr	r3, [r2, #4]
     726:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     72a:	f043 0301 	orr.w	r3, r3, #1
     72e:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     730:	4b05      	ldr	r3, [pc, #20]	; (748 <__pi_uart_setrate+0x50>)
     732:	801c      	strh	r4, [r3, #0]
}
     734:	bd70      	pop	{r4, r5, r6, pc}
     736:	bf00      	nop
     738:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     73c:	40001000 	andmi	r1, r0, r0
     740:	02dc6c00 	sbcseq	r6, ip, #0, 24
     744:	4000102c 	andmi	r1, r0, ip, lsr #32
     748:	2000004a 	andcs	r0, r0, sl, asr #32

0000074c <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	4a08      	ldr	r2, [pc, #32]	; (770 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     74e:	4909      	ldr	r1, [pc, #36]	; (774 <reinit_uart+0x28>)
     750:	6813      	ldr	r3, [r2, #0]
     752:	f043 0310 	orr.w	r3, r3, #16
     756:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	2212      	movs	r2, #18
     75a:	4b07      	ldr	r3, [pc, #28]	; (778 <reinit_uart+0x2c>)
     75c:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     75e:	4a07      	ldr	r2, [pc, #28]	; (77c <reinit_uart+0x30>)
     760:	6813      	ldr	r3, [r2, #0]
     762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     766:	6013      	str	r3, [r2, #0]
     768:	4b05      	ldr	r3, [pc, #20]	; (780 <reinit_uart+0x34>)
     76a:	8818      	ldrh	r0, [r3, #0]
     76c:	f7ff bfc4 	b.w	6f8 <__pi_uart_setrate>
     770:	4000102c 	andmi	r1, r0, ip, lsr #32
     774:	20000084 	andcs	r0, r0, r4, lsl #1
     778:	40001034 	andmi	r1, r0, r4, lsr r0
     77c:	40001030 	andmi	r1, r0, r0, lsr r0
     780:	2000004a 	andcs	r0, r0, sl, asr #32

00000784 <ioreq_uart_a>:
	switch (operation) {
     784:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     786:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     78a:	460d      	mov	r5, r1
     78c:	4614      	mov	r4, r2
     78e:	2803      	cmp	r0, #3
     790:	d86e      	bhi.n	870 <ioreq_uart_a+0xec>
     792:	e8df f000 	tbb	[pc, r0]
     796:	5a471253 	bpl	11c50ea <__ccfg+0x11a5142>
				*buf++ = uart_a_read;
     79a:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     79e:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     7a0:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     7a4:	b11e      	cbz	r6, 7ae <ioreq_uart_a+0x2a>
     7a6:	f8d8 3000 	ldr.w	r3, [r8]
     7aa:	06d8      	lsls	r0, r3, #27
     7ac:	d5f5      	bpl.n	79a <ioreq_uart_a+0x16>
			if (len != operation) {
     7ae:	42a6      	cmp	r6, r4
     7b0:	d00a      	beq.n	7c8 <ioreq_uart_a+0x44>
				return operation - len;
     7b2:	1ba4      	subs	r4, r4, r6
}
     7b4:	4620      	mov	r0, r4
     7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     7ba:	4616      	mov	r6, r2
			uart_a_disable_int;
     7bc:	4f2e      	ldr	r7, [pc, #184]	; (878 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     7be:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 88c <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     7c2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 890 <ioreq_uart_a+0x10c>
     7c6:	e7ed      	b.n	7a4 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     7c8:	683b      	ldr	r3, [r7, #0]
     7ca:	2015      	movs	r0, #21
     7cc:	695b      	ldr	r3, [r3, #20]
     7ce:	4798      	blx	r3
			if (uart_a_char_available) {
     7d0:	f8d8 3000 	ldr.w	r3, [r8]
     7d4:	06d9      	lsls	r1, r3, #27
     7d6:	d404      	bmi.n	7e2 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	2015      	movs	r0, #21
     7dc:	691b      	ldr	r3, [r3, #16]
     7de:	4798      	blx	r3
				goto Redo_rx;
     7e0:	e7e0      	b.n	7a4 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e2:	4a26      	ldr	r2, [pc, #152]	; (87c <ioreq_uart_a+0xf8>)
     7e4:	7993      	ldrb	r3, [r2, #6]
     7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     7ea:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7ee:	7193      	strb	r3, [r2, #6]
			return -2;
     7f0:	e7e0      	b.n	7b4 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     7f2:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     7f6:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     7f8:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     7fc:	b11e      	cbz	r6, 806 <ioreq_uart_a+0x82>
     7fe:	f8d8 3000 	ldr.w	r3, [r8]
     802:	069a      	lsls	r2, r3, #26
     804:	d5f5      	bpl.n	7f2 <ioreq_uart_a+0x6e>
			if (len != operation) {
     806:	42a6      	cmp	r6, r4
     808:	d1d3      	bne.n	7b2 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     80a:	683b      	ldr	r3, [r7, #0]
     80c:	2015      	movs	r0, #21
     80e:	695b      	ldr	r3, [r3, #20]
     810:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     812:	f8d8 3000 	ldr.w	r3, [r8]
     816:	069b      	lsls	r3, r3, #26
     818:	d40b      	bmi.n	832 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     81a:	683b      	ldr	r3, [r7, #0]
     81c:	2015      	movs	r0, #21
     81e:	691b      	ldr	r3, [r3, #16]
     820:	4798      	blx	r3
				goto Redo_tx;
     822:	e7eb      	b.n	7fc <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     824:	4616      	mov	r6, r2
			uart_a_disable_int;
     826:	4f14      	ldr	r7, [pc, #80]	; (878 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     828:	f8df 8060 	ldr.w	r8, [pc, #96]	; 88c <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     82c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 890 <ioreq_uart_a+0x10c>
     830:	e7e4      	b.n	7fc <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     832:	4a12      	ldr	r2, [pc, #72]	; (87c <ioreq_uart_a+0xf8>)
     834:	7993      	ldrb	r3, [r2, #6]
     836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     83a:	e7d6      	b.n	7ea <ioreq_uart_a+0x66>
			uart_a_enable_int;
     83c:	4b0e      	ldr	r3, [pc, #56]	; (878 <ioreq_uart_a+0xf4>)
     83e:	2015      	movs	r0, #21
     840:	681b      	ldr	r3, [r3, #0]
			return 0;
     842:	2400      	movs	r4, #0
			uart_a_enable_int;
     844:	691b      	ldr	r3, [r3, #16]
     846:	4798      	blx	r3
			return 0;
     848:	e7b4      	b.n	7b4 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     84a:	2a01      	cmp	r2, #1
     84c:	d109      	bne.n	862 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     84e:	490b      	ldr	r1, [pc, #44]	; (87c <ioreq_uart_a+0xf8>)
     850:	8828      	ldrh	r0, [r5, #0]
     852:	f7ff ff51 	bl	6f8 <__pi_uart_setrate>
     856:	2800      	cmp	r0, #0
     858:	d1ac      	bne.n	7b4 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     85a:	2003      	movs	r0, #3
     85c:	4908      	ldr	r1, [pc, #32]	; (880 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     85e:	f7ff fe3b 	bl	4d8 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     862:	2a02      	cmp	r2, #2
     864:	d104      	bne.n	870 <ioreq_uart_a+0xec>
	return urates [0];
     866:	4b07      	ldr	r3, [pc, #28]	; (884 <ioreq_uart_a+0x100>)
				return 1;
     868:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86a:	881b      	ldrh	r3, [r3, #0]
     86c:	800b      	strh	r3, [r1, #0]
				return 1;
     86e:	e7a1      	b.n	7b4 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     870:	2002      	movs	r0, #2
     872:	4905      	ldr	r1, [pc, #20]	; (888 <ioreq_uart_a+0x104>)
     874:	e7f3      	b.n	85e <ioreq_uart_a+0xda>
     876:	bf00      	nop
     878:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     87c:	20000084 	andcs	r0, r0, r4, lsl #1
     880:	00002d8b 	andeq	r2, r0, fp, lsl #27
     884:	2000004a 	andcs	r0, r0, sl, asr #32
     888:	00002d8f 	andeq	r2, r0, pc, lsl #27
     88c:	40001018 	andmi	r1, r0, r8, lsl r0
     890:	40001000 	andmi	r1, r0, r0

00000894 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     898:	b530      	push	{r4, r5, lr}
     89a:	4b29      	ldr	r3, [pc, #164]	; (940 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	4c29      	ldr	r4, [pc, #164]	; (944 <UART0IntHandler+0xb0>)
     89e:	601a      	str	r2, [r3, #0]
     8a0:	6822      	ldr	r2, [r4, #0]
     8a2:	06d5      	lsls	r5, r2, #27
     8a4:	d423      	bmi.n	8ee <UART0IntHandler+0x5a>
     8a6:	4b28      	ldr	r3, [pc, #160]	; (948 <UART0IntHandler+0xb4>)
     8a8:	799a      	ldrb	r2, [r3, #6]
     8aa:	0610      	lsls	r0, r2, #24
     8ac:	d51f      	bpl.n	8ee <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8ae:	799a      	ldrb	r2, [r3, #6]
     8b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     8b4:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8b6:	4a25      	ldr	r2, [pc, #148]	; (94c <UART0IntHandler+0xb8>)
     8b8:	7813      	ldrb	r3, [r2, #0]
     8ba:	f043 0302 	orr.w	r3, r3, #2
     8be:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     8c0:	4b23      	ldr	r3, [pc, #140]	; (950 <UART0IntHandler+0xbc>)
     8c2:	681a      	ldr	r2, [r3, #0]
     8c4:	b19a      	cbz	r2, 8ee <UART0IntHandler+0x5a>
     8c6:	4610      	mov	r0, r2
     8c8:	2300      	movs	r3, #0
     8ca:	f830 1b10 	ldrh.w	r1, [r0], #16
     8ce:	f001 0107 	and.w	r1, r1, #7
     8d2:	4299      	cmp	r1, r3
     8d4:	dd09      	ble.n	8ea <UART0IntHandler+0x56>
     8d6:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8da:	3301      	adds	r3, #1
     8dc:	f515 7f81 	cmn.w	r5, #258	; 0x102
     8e0:	d1f7      	bne.n	8d2 <UART0IntHandler+0x3e>
     8e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8e6:	889b      	ldrh	r3, [r3, #4]
     8e8:	8013      	strh	r3, [r2, #0]
     8ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8ec:	e7ea      	b.n	8c4 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8ee:	6823      	ldr	r3, [r4, #0]
     8f0:	0699      	lsls	r1, r3, #26
     8f2:	d424      	bmi.n	93e <UART0IntHandler+0xaa>
     8f4:	4b14      	ldr	r3, [pc, #80]	; (948 <UART0IntHandler+0xb4>)
     8f6:	799a      	ldrb	r2, [r3, #6]
     8f8:	0652      	lsls	r2, r2, #25
     8fa:	d520      	bpl.n	93e <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     8fc:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	799a      	ldrb	r2, [r3, #6]
     902:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     906:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     908:	4a10      	ldr	r2, [pc, #64]	; (94c <UART0IntHandler+0xb8>)
     90a:	7813      	ldrb	r3, [r2, #0]
     90c:	f043 0302 	orr.w	r3, r3, #2
     910:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     912:	4b0f      	ldr	r3, [pc, #60]	; (950 <UART0IntHandler+0xbc>)
     914:	681a      	ldr	r2, [r3, #0]
     916:	b192      	cbz	r2, 93e <UART0IntHandler+0xaa>
     918:	4610      	mov	r0, r2
     91a:	2300      	movs	r3, #0
     91c:	f830 1b10 	ldrh.w	r1, [r0], #16
     920:	f001 0107 	and.w	r1, r1, #7
     924:	4299      	cmp	r1, r3
     926:	dd08      	ble.n	93a <UART0IntHandler+0xa6>
     928:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     92c:	3301      	adds	r3, #1
     92e:	42a5      	cmp	r5, r4
     930:	d1f8      	bne.n	924 <UART0IntHandler+0x90>
     932:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     936:	889b      	ldrh	r3, [r3, #4]
     938:	8013      	strh	r3, [r2, #0]
     93a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     93c:	e7eb      	b.n	916 <UART0IntHandler+0x82>
	}

	RTNI;
}
     93e:	bd30      	pop	{r4, r5, pc}
     940:	40001044 	andmi	r1, r0, r4, asr #32
     944:	40001018 	andmi	r1, r0, r8, lsl r0
     948:	20000084 	andcs	r0, r0, r4, lsl #1
     94c:	20000098 	mulcs	r0, r8, r0
     950:	2000004c 	andcs	r0, r0, ip, asr #32

00000954 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     954:	b570      	push	{r4, r5, r6, lr}
     956:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     95a:	4e0c      	ldr	r6, [pc, #48]	; (98c <__buttons_setirq+0x38>)
     95c:	4d0c      	ldr	r5, [pc, #48]	; (990 <__buttons_setirq+0x3c>)
     95e:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	4c0c      	ldr	r4, [pc, #48]	; (994 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     962:	0a1b      	lsrs	r3, r3, #8
     964:	fa01 f203 	lsl.w	r2, r1, r3
     968:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96a:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96e:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     972:	0a1b      	lsrs	r3, r3, #8
     974:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     976:	01db      	lsls	r3, r3, #7
     978:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     97c:	4322      	orrs	r2, r4
     97e:	4323      	orrs	r3, r4
     980:	6010      	str	r0, [r2, #0]
     982:	6029      	str	r1, [r5, #0]
     984:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     986:	b662      	cpsie	i
			val;
	}
	sti;
}
     988:	bd70      	pop	{r4, r5, r6, pc}
     98a:	bf00      	nop
     98c:	00002e78 	andeq	r2, r0, r8, ror lr
     990:	400220e0 	andmi	r2, r2, r0, ror #1
     994:	42000048 	andmi	r0, r0, #72	; 0x48

00000998 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     998:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     99a:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     99c:	2200      	movs	r2, #0
     99e:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a0:	4f09      	ldr	r7, [pc, #36]	; (9c8 <__pinlist_setirq+0x30>)
     9a2:	4c0a      	ldr	r4, [pc, #40]	; (9cc <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a6:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9ae:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b2:	01db      	lsls	r3, r3, #7
     9b4:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     9b8:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     9ba:	2a04      	cmp	r2, #4
     9bc:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9be:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	d1f1      	bne.n	9a6 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     9c2:	b662      	cpsie	i
			val;
	}
	sti;
}
     9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c6:	bf00      	nop
     9c8:	00002e74 	andeq	r2, r0, r4, ror lr
     9cc:	400220e0 	andmi	r2, r2, r0, ror #1
     9d0:	42000048 	andmi	r0, r0, #72	; 0x48

000009d4 <GPIOIntHandler>:
void GPIOIntHandler () {
     9d4:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     9d6:	4c23      	ldr	r4, [pc, #140]	; (a64 <GPIOIntHandler+0x90>)
     9d8:	6822      	ldr	r2, [r4, #0]
     9da:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     9de:	d01e      	beq.n	a1e <GPIOIntHandler+0x4a>
	buttons_disable ();
     9e0:	2000      	movs	r0, #0
     9e2:	f7ff ffb7 	bl	954 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     9e6:	4b20      	ldr	r3, [pc, #128]	; (a68 <GPIOIntHandler+0x94>)
     9e8:	4d20      	ldr	r5, [pc, #128]	; (a6c <GPIOIntHandler+0x98>)
     9ea:	681a      	ldr	r2, [r3, #0]
     9ec:	b192      	cbz	r2, a14 <GPIOIntHandler+0x40>
     9ee:	4610      	mov	r0, r2
     9f0:	2300      	movs	r3, #0
     9f2:	f830 1b10 	ldrh.w	r1, [r0], #16
     9f6:	f001 0107 	and.w	r1, r1, #7
     9fa:	4299      	cmp	r1, r3
     9fc:	dd08      	ble.n	a10 <GPIOIntHandler+0x3c>
     9fe:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     a02:	3301      	adds	r3, #1
     a04:	42ae      	cmp	r6, r5
     a06:	d1f8      	bne.n	9fa <GPIOIntHandler+0x26>
     a08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     a0c:	889b      	ldrh	r3, [r3, #4]
     a0e:	8013      	strh	r3, [r2, #0]
     a10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a12:	e7eb      	b.n	9ec <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     a14:	4a16      	ldr	r2, [pc, #88]	; (a70 <GPIOIntHandler+0x9c>)
     a16:	7813      	ldrb	r3, [r2, #0]
     a18:	f043 0302 	orr.w	r3, r3, #2
     a1c:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     a1e:	6823      	ldr	r3, [r4, #0]
     a20:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     a24:	d01d      	beq.n	a62 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     a26:	4b10      	ldr	r3, [pc, #64]	; (a68 <GPIOIntHandler+0x94>)
     a28:	4c12      	ldr	r4, [pc, #72]	; (a74 <GPIOIntHandler+0xa0>)
     a2a:	6818      	ldr	r0, [r3, #0]
     a2c:	b190      	cbz	r0, a54 <GPIOIntHandler+0x80>
     a2e:	4601      	mov	r1, r0
     a30:	2300      	movs	r3, #0
     a32:	f831 2b10 	ldrh.w	r2, [r1], #16
     a36:	f002 0207 	and.w	r2, r2, #7
     a3a:	429a      	cmp	r2, r3
     a3c:	dd08      	ble.n	a50 <GPIOIntHandler+0x7c>
     a3e:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     a42:	3301      	adds	r3, #1
     a44:	42a5      	cmp	r5, r4
     a46:	d1f8      	bne.n	a3a <GPIOIntHandler+0x66>
     a48:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     a4c:	889b      	ldrh	r3, [r3, #4]
     a4e:	8003      	strh	r3, [r0, #0]
     a50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     a52:	e7eb      	b.n	a2c <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     a54:	f7ff ffa0 	bl	998 <__pinlist_setirq>
	RISE_N_SHINE;
     a58:	4a05      	ldr	r2, [pc, #20]	; (a70 <GPIOIntHandler+0x9c>)
     a5a:	7813      	ldrb	r3, [r2, #0]
     a5c:	f043 0302 	orr.w	r3, r3, #2
     a60:	7013      	strb	r3, [r2, #0]
}
     a62:	bd70      	pop	{r4, r5, r6, pc}
     a64:	400220e0 	andmi	r2, r2, r0, ror #1
     a68:	2000004c 	andcs	r0, r0, ip, asr #32
     a6c:	00002e78 	andeq	r2, r0, r8, ror lr
     a70:	20000098 	mulcs	r0, r8, r0
     a74:	00002e74 	andeq	r2, r0, r4, ror lr

00000a78 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	4c58      	ldr	r4, [pc, #352]	; (be0 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a7e:	2004      	movs	r0, #4
     a80:	f7ff fd0c 	bl	49c <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	6823      	ldr	r3, [r4, #0]
     a86:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a8a:	69db      	ldr	r3, [r3, #28]
     a8c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a8e:	6823      	ldr	r3, [r4, #0]
     a90:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a96:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	6823      	ldr	r3, [r4, #0]
     a9a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     aa0:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa2:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	2600      	movs	r6, #0
     aa6:	4c4f      	ldr	r4, [pc, #316]	; (be4 <system_init+0x16c>)
     aa8:	4f4f      	ldr	r7, [pc, #316]	; (be8 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aaa:	f8df c17c 	ldr.w	ip, [pc, #380]	; c28 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aae:	f8df e17c 	ldr.w	lr, [pc, #380]	; c2c <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab2:	f8df 8140 	ldr.w	r8, [pc, #320]	; bf4 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab6:	f8df 9134 	ldr.w	r9, [pc, #308]	; bec <system_init+0x174>
     aba:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     ac2:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac6:	0091      	lsls	r1, r2, #2
     ac8:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     acc:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     ad0:	ea05 0a0c 	and.w	sl, r5, ip
     ad4:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     ad8:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ada:	bf44      	itt	mi
     adc:	ea41 010e 	orrmi.w	r1, r1, lr
     ae0:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     ae2:	fa03 f202 	lsl.w	r2, r3, r2
     ae6:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	bf4c      	ite	mi
     aea:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aee:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af2:	2e11      	cmp	r6, #17
     af4:	d1e2      	bne.n	abc <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af6:	2540      	movs	r5, #64	; 0x40
     af8:	2680      	movs	r6, #128	; 0x80
     afa:	4b3c      	ldr	r3, [pc, #240]	; (bec <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     afc:	493c      	ldr	r1, [pc, #240]	; (bf0 <system_init+0x178>)
     afe:	601d      	str	r5, [r3, #0]
     b00:	601e      	str	r6, [r3, #0]
     b02:	780b      	ldrb	r3, [r1, #0]
     b04:	780b      	ldrb	r3, [r1, #0]
     b06:	20c8      	movs	r0, #200	; 0xc8
     b08:	f36f 1307 	bfc	r3, #4, #4
     b0c:	700b      	strb	r3, [r1, #0]
     b0e:	f7ff fcaf 	bl	470 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b12:	4b38      	ldr	r3, [pc, #224]	; (bf4 <system_init+0x17c>)
     b14:	20c8      	movs	r0, #200	; 0xc8
     b16:	601d      	str	r5, [r3, #0]
     b18:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b1a:	2601      	movs	r6, #1
	all_leds_blink;
     b1c:	780b      	ldrb	r3, [r1, #0]
     b1e:	780b      	ldrb	r3, [r1, #0]
     b20:	f36f 1307 	bfc	r3, #4, #4
     b24:	700b      	strb	r3, [r1, #0]
     b26:	f7ff fca3 	bl	470 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     b2a:	4b33      	ldr	r3, [pc, #204]	; (bf8 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2c:	4a33      	ldr	r2, [pc, #204]	; (bfc <system_init+0x184>)
     b2e:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	4b33      	ldr	r3, [pc, #204]	; (c00 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     b32:	4d34      	ldr	r5, [pc, #208]	; (c04 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b34:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b36:	4b34      	ldr	r3, [pc, #208]	; (c08 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     b38:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3a:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     b3c:	682b      	ldr	r3, [r5, #0]
     b3e:	691b      	ldr	r3, [r3, #16]
     b40:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     b42:	f000 fb99 	bl	1278 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     b46:	682b      	ldr	r3, [r5, #0]
     b48:	2010      	movs	r0, #16
     b4a:	691b      	ldr	r3, [r3, #16]
     b4c:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b4e:	2002      	movs	r0, #2
     b50:	f7ff fca4 	bl	49c <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	68ab      	ldr	r3, [r5, #8]
     b56:	f44f 7000 	mov.w	r0, #512	; 0x200
     b5a:	69db      	ldr	r3, [r3, #28]
     b5c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b5e:	68ab      	ldr	r3, [r5, #8]
     b60:	f44f 7000 	mov.w	r0, #512	; 0x200
     b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b66:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	68ab      	ldr	r3, [r5, #8]
     b6a:	f44f 7000 	mov.w	r0, #512	; 0x200
     b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b70:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b72:	2260      	movs	r2, #96	; 0x60
     b74:	4b25      	ldr	r3, [pc, #148]	; (c0c <system_init+0x194>)
     b76:	6026      	str	r6, [r4, #0]
     b78:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b7a:	f7ff fde7 	bl	74c <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b7e:	f000 fdf7 	bl	1770 <ee_open>
     b82:	f000 fdff 	bl	1784 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b86:	f001 ff8f 	bl	2aa8 <NOROM_SysCtrlResetSourceGet>
     b8a:	2808      	cmp	r0, #8
     b8c:	d11a      	bne.n	bc4 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b8e:	4b20      	ldr	r3, [pc, #128]	; (c10 <system_init+0x198>)
     b90:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b96:	3b04      	subs	r3, #4
     b98:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     b9e:	3324      	adds	r3, #36	; 0x24
     ba0:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     ba2:	2000      	movs	r0, #0
     ba4:	f7ff fc48 	bl	438 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	4a1a      	ldr	r2, [pc, #104]	; (c14 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     baa:	2015      	movs	r0, #21
     bac:	6813      	ldr	r3, [r2, #0]
     bae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     bb2:	6013      	str	r3, [r2, #0]
     bb4:	4b13      	ldr	r3, [pc, #76]	; (c04 <system_init+0x18c>)
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	691b      	ldr	r3, [r3, #16]
     bba:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     bbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     bc0:	f7ff bcd4 	b.w	56c <tci_run_auxiliary_timer>
		diag ("");
     bc4:	4814      	ldr	r0, [pc, #80]	; (c18 <system_init+0x1a0>)
     bc6:	f000 fc71 	bl	14ac <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bca:	4814      	ldr	r0, [pc, #80]	; (c1c <system_init+0x1a4>)
     bcc:	f000 fc6e 	bl	14ac <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	4913      	ldr	r1, [pc, #76]	; (c20 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     bd2:	4814      	ldr	r0, [pc, #80]	; (c24 <system_init+0x1ac>)
     bd4:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     bd8:	b289      	uxth	r1, r1
     bda:	f000 fc67 	bl	14ac <diag>
     bde:	e7e0      	b.n	ba2 <system_init+0x12a>
     be0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     be4:	60082028 	andvs	r2, r8, r8, lsr #32
     be8:	00002dfc 	strdeq	r2, [r0], -ip
     bec:	40022090 	mulmi	r2, r0, r0
     bf0:	20000098 	mulcs	r0, r8, r0
     bf4:	400220a0 	andmi	r2, r2, r0, lsr #1
     bf8:	40092024 	andmi	r2, r9, r4, lsr #32
     bfc:	00050003 	andeq	r0, r5, r3
     c00:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     c04:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     c08:	40092000 	andmi	r2, r9, r0
     c0c:	2000004a 	andcs	r0, r0, sl, asr #32
     c10:	4009400c 	andmi	r4, r9, ip
     c14:	40001038 	andmi	r1, r0, r8, lsr r0
     c18:	00002d5f 	andeq	r2, r0, pc, asr sp
     c1c:	00002d93 	muleq	r0, r3, sp
     c20:	200000b8 	strhcs	r0, [r0], -r8
     c24:	00002ddf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
     c28:	7f077f3f 	svcvc	0x00077f3f
     c2c:	42441a00 	submi	r1, r4, #0, 20

00000c30 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     c30:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     c34:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c36:	4b79      	ldr	r3, [pc, #484]	; (e1c <__pi_release+0x1ec>)
     c38:	af00      	add	r7, sp, #0
     c3a:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     c3e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     c42:	681a      	ldr	r2, [r3, #0]
     c44:	4b76      	ldr	r3, [pc, #472]	; (e20 <__pi_release+0x1f0>)
     c46:	429a      	cmp	r2, r3
     c48:	d127      	bne.n	c9a <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c4a:	4e76      	ldr	r6, [pc, #472]	; (e24 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     c4c:	2100      	movs	r1, #0
     c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c52:	f000 f9bb 	bl	fcc <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     c56:	4a74      	ldr	r2, [pc, #464]	; (e28 <__pi_release+0x1f8>)
     c58:	4b74      	ldr	r3, [pc, #464]	; (e2c <__pi_release+0x1fc>)
     c5a:	6812      	ldr	r2, [r2, #0]
     c5c:	601a      	str	r2, [r3, #0]
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	b9fa      	cbnz	r2, ca2 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c62:	4c73      	ldr	r4, [pc, #460]	; (e30 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c66:	4d73      	ldr	r5, [pc, #460]	; (e34 <__pi_release+0x204>)
     c68:	782b      	ldrb	r3, [r5, #0]
     c6a:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c6e:	0798      	lsls	r0, r3, #30
     c70:	607a      	str	r2, [r7, #4]
     c72:	f100 80cd 	bmi.w	e10 <__pi_release+0x1e0>
	system_event_count ++;
     c76:	4a70      	ldr	r2, [pc, #448]	; (e38 <__pi_release+0x208>)
     c78:	6813      	ldr	r3, [r2, #0]
     c7a:	3301      	adds	r3, #1
     c7c:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     c7e:	78ea      	ldrb	r2, [r5, #3]
     c80:	2a01      	cmp	r2, #1
     c82:	b2d3      	uxtb	r3, r2
     c84:	d017      	beq.n	cb6 <__pi_release+0x86>
     c86:	2b02      	cmp	r3, #2
     c88:	d031      	beq.n	cee <__pi_release+0xbe>
     c8a:	2b00      	cmp	r3, #0
     c8c:	f040 8095 	bne.w	dba <__pi_release+0x18a>
			__WFI ();
     c90:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     c92:	b662      	cpsie	i
     c94:	bf00      	nop
     c96:	bf00      	nop
     c98:	e7e4      	b.n	c64 <__pi_release+0x34>
	check_stack_overflow;
     c9a:	200b      	movs	r0, #11
     c9c:	4967      	ldr	r1, [pc, #412]	; (e3c <__pi_release+0x20c>)
     c9e:	f7ff fc1b 	bl	4d8 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca2:	6851      	ldr	r1, [r2, #4]
     ca4:	b129      	cbz	r1, cb2 <__pi_release+0x82>
     ca6:	8810      	ldrh	r0, [r2, #0]
     ca8:	0704      	lsls	r4, r0, #28
     caa:	d102      	bne.n	cb2 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	0900      	lsrs	r0, r0, #4
     cae:	4788      	blx	r1
			goto Redo;
     cb0:	e7cc      	b.n	c4c <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     cb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     cb4:	e7d2      	b.n	c5c <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb6:	4a62      	ldr	r2, [pc, #392]	; (e40 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cba:	6813      	ldr	r3, [r2, #0]
     cbc:	f043 0301 	orr.w	r3, r3, #1
     cc0:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     cc6:	f043 0303 	orr.w	r3, r3, #3
     cca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cce:	4b5d      	ldr	r3, [pc, #372]	; (e44 <__pi_release+0x214>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	699b      	ldr	r3, [r3, #24]
     cd4:	4798      	blx	r3
     cd6:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	6823      	ldr	r3, [r4, #0]
     cda:	f043 0304 	orr.w	r3, r3, #4
     cde:	6023      	str	r3, [r4, #0]
			__WFI ();
     ce0:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce2:	6823      	ldr	r3, [r4, #0]
     ce4:	f023 0304 	bic.w	r3, r3, #4
     ce8:	6023      	str	r3, [r4, #0]
     cea:	6833      	ldr	r3, [r6, #0]
}
     cec:	e7d1      	b.n	c92 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cee:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf2:	687a      	ldr	r2, [r7, #4]
     cf4:	4b54      	ldr	r3, [pc, #336]	; (e48 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf6:	f8df b188 	ldr.w	fp, [pc, #392]	; e80 <__pi_release+0x250>
     cfa:	601a      	str	r2, [r3, #0]
     cfc:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cfe:	f8df a144 	ldr.w	sl, [pc, #324]	; e44 <__pi_release+0x214>
     d02:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d06:	6833      	ldr	r3, [r6, #0]
     d08:	4b50      	ldr	r3, [pc, #320]	; (e4c <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0a:	f8df 9178 	ldr.w	r9, [pc, #376]	; e84 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d0e:	f8c3 8000 	str.w	r8, [r3]
     d12:	6868      	ldr	r0, [r5, #4]
     d14:	f8da 3000 	ldr.w	r3, [sl]
     d18:	f040 0020 	orr.w	r0, r0, #32
     d1c:	699b      	ldr	r3, [r3, #24]
     d1e:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	4b4b      	ldr	r3, [pc, #300]	; (e50 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d22:	2103      	movs	r1, #3
     d24:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	f8d9 3000 	ldr.w	r3, [r9]
     d2c:	4849      	ldr	r0, [pc, #292]	; (e54 <__pi_release+0x224>)
     d2e:	f023 0303 	bic.w	r3, r3, #3
     d32:	f8c9 3000 	str.w	r3, [r9]
     d36:	4b48      	ldr	r3, [pc, #288]	; (e58 <__pi_release+0x228>)
     d38:	681a      	ldr	r2, [r3, #0]
     d3a:	6852      	ldr	r2, [r2, #4]
     d3c:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d3e:	6878      	ldr	r0, [r7, #4]
     d40:	f001 fd72 	bl	2828 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d44:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d46:	6822      	ldr	r2, [r4, #0]
     d48:	f042 0204 	orr.w	r2, r2, #4
     d4c:	6022      	str	r2, [r4, #0]
			__WFI ();
     d4e:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d52:	4b41      	ldr	r3, [pc, #260]	; (e58 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d54:	f022 0204 	bic.w	r2, r2, #4
     d58:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	4641      	mov	r1, r8
     d5e:	685b      	ldr	r3, [r3, #4]
     d60:	483c      	ldr	r0, [pc, #240]	; (e54 <__pi_release+0x224>)
     d62:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	4a3c      	ldr	r2, [pc, #240]	; (e5c <__pi_release+0x22c>)
     d6a:	f043 0303 	orr.w	r3, r3, #3
     d6e:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d72:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d76:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     d78:	0699      	lsls	r1, r3, #26
     d7a:	d5fc      	bpl.n	d76 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	f8da 3000 	ldr.w	r3, [sl]
     d80:	6868      	ldr	r0, [r5, #4]
     d82:	695b      	ldr	r3, [r3, #20]
     d84:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d86:	4d2f      	ldr	r5, [pc, #188]	; (e44 <__pi_release+0x214>)
     d88:	4b2a      	ldr	r3, [pc, #168]	; (e34 <__pi_release+0x204>)
     d8a:	6858      	ldr	r0, [r3, #4]
     d8c:	682b      	ldr	r3, [r5, #0]
     d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d90:	4798      	blx	r3
     d92:	2801      	cmp	r0, #1
     d94:	d1f8      	bne.n	d88 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	4a2d      	ldr	r2, [pc, #180]	; (e50 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d9a:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d9c:	2300      	movs	r3, #0
     d9e:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     da0:	4b29      	ldr	r3, [pc, #164]	; (e48 <__pi_release+0x218>)
     da2:	6018      	str	r0, [r3, #0]
     da4:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     da6:	f001 fe4f 	bl	2a48 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     daa:	f7ff fccf 	bl	74c <reinit_uart>
     dae:	4a2c      	ldr	r2, [pc, #176]	; (e60 <__pi_release+0x230>)
     db0:	6813      	ldr	r3, [r2, #0]
     db2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     db6:	6013      	str	r3, [r2, #0]
}
     db8:	e76b      	b.n	c92 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dba:	4b2a      	ldr	r3, [pc, #168]	; (e64 <__pi_release+0x234>)
     dbc:	2001      	movs	r0, #1
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	68db      	ldr	r3, [r3, #12]
     dc2:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	4a28      	ldr	r2, [pc, #160]	; (e68 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dc6:	4929      	ldr	r1, [pc, #164]	; (e6c <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc8:	6813      	ldr	r3, [r2, #0]
     dca:	f023 0301 	bic.w	r3, r3, #1
     dce:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	4b27      	ldr	r3, [pc, #156]	; (e70 <__pi_release+0x240>)
     dd2:	681a      	ldr	r2, [r3, #0]
     dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     dd8:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dda:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     dde:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	604a      	str	r2, [r1, #4]
     de2:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	687a      	ldr	r2, [r7, #4]
     dea:	4b22      	ldr	r3, [pc, #136]	; (e74 <__pi_release+0x244>)
     dec:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dee:	2201      	movs	r2, #1
     df0:	4b21      	ldr	r3, [pc, #132]	; (e78 <__pi_release+0x248>)
     df2:	601a      	str	r2, [r3, #0]
     df4:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df6:	4a19      	ldr	r2, [pc, #100]	; (e5c <__pi_release+0x22c>)
     df8:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfa:	069b      	lsls	r3, r3, #26
     dfc:	d4fc      	bmi.n	df8 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dfe:	2201      	movs	r2, #1
     e00:	4b1e      	ldr	r3, [pc, #120]	; (e7c <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     e02:	2037      	movs	r0, #55	; 0x37
     e04:	601a      	str	r2, [r3, #0]
     e06:	4b0f      	ldr	r3, [pc, #60]	; (e44 <__pi_release+0x214>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	699b      	ldr	r3, [r3, #24]
     e0c:	4798      	blx	r3
			goto DeepSleep;
     e0e:	e763      	b.n	cd8 <__pi_release+0xa8>
	__SLEEP;
     e10:	782b      	ldrb	r3, [r5, #0]
     e12:	f36f 0341 	bfc	r3, #1, #1
     e16:	702b      	strb	r3, [r5, #0]
     e18:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     e1a:	e717      	b.n	c4c <__pi_release+0x1c>
     e1c:	20005000 	andcs	r5, r0, r0
     e20:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e24:	4009202c 	andmi	r2, r9, ip, lsr #32
     e28:	2000004c 	andcs	r0, r0, ip, asr #32
     e2c:	200000b4 	strhcs	r0, [r0], -r4
     e30:	e000ed10 	and	lr, r0, r0, lsl sp
     e34:	20000098 	mulcs	r0, r8, r0
     e38:	2000008c 	andcs	r0, r0, ip, lsl #1
     e3c:	00002df6 	strdeq	r2, [r0], -r6
     e40:	4008218c 	andmi	r2, r8, ip, lsl #3
     e44:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     e48:	4009400c 	andmi	r4, r9, ip
     e4c:	60082028 	andvs	r2, r8, r8, lsr #32
     e50:	43040180 	movwmi	r0, #16768	; 0x4180
     e54:	40034000 	andmi	r4, r3, r0
     e58:	100001d8 	ldrdne	r0, [r0], -r8
     e5c:	40091014 	andmi	r1, r9, r4, lsl r0
     e60:	40001038 	andmi	r1, r0, r8, lsr r0
     e64:	100001a0 	andne	r0, r0, r0, lsr #3
     e68:	40091010 	andmi	r1, r9, r0, lsl r0
     e6c:	40093000 	andmi	r3, r9, r0
     e70:	40091040 	andmi	r1, r9, r0, asr #32
     e74:	43220420 			; <UNDEFINED> instruction: 0x43220420
     e78:	40091018 	andmi	r1, r9, r8, lsl r0
     e7c:	43040188 	movwmi	r0, #16776	; 0x4188
     e80:	43220200 			; <UNDEFINED> instruction: 0x43220200
     e84:	40082224 	andmi	r2, r8, r4, lsr #4

00000e88 <main>:

#include "scheduler.h"

}

int main (void) {
     e88:	b510      	push	{r4, lr}
     e8a:	4b11      	ldr	r3, [pc, #68]	; (ed0 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	4911      	ldr	r1, [pc, #68]	; (ed4 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8e:	4a12      	ldr	r2, [pc, #72]	; (ed8 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e90:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	4293      	cmp	r3, r2
     e96:	d1fb      	bne.n	e90 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	4c10      	ldr	r4, [pc, #64]	; (edc <main+0x54>)
	system_init ();
     e9a:	f7ff fded 	bl	a78 <system_init>
	tcv_init ();
     e9e:	f000 fba3 	bl	15e8 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea2:	6823      	ldr	r3, [r4, #0]
     ea4:	2129      	movs	r1, #41	; 0x29
     ea6:	2000      	movs	r0, #0
     ea8:	681b      	ldr	r3, [r3, #0]
     eaa:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	6823      	ldr	r3, [r4, #0]
     eae:	2120      	movs	r1, #32
     eb0:	681b      	ldr	r3, [r3, #0]
     eb2:	2001      	movs	r0, #1
     eb4:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb6:	2100      	movs	r1, #0
     eb8:	4809      	ldr	r0, [pc, #36]	; (ee0 <main+0x58>)
     eba:	f000 fad1 	bl	1460 <__pi_fork>
     ebe:	4b09      	ldr	r3, [pc, #36]	; (ee4 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     ec0:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ec2:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     ec4:	2010      	movs	r0, #16
     ec6:	f000 f937 	bl	1138 <delay>
     eca:	b662      	cpsie	i

	sti;

	__pi_release ();
     ecc:	f7ff feb0 	bl	c30 <__pi_release>
     ed0:	20004bfc 	strdcs	r4, [r0], -ip
     ed4:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     ed8:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     edc:	10000184 	andne	r0, r0, r4, lsl #3
     ee0:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     ee4:	200000b4 	strhcs	r0, [r0], -r4

00000ee8 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     ee8:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     eea:	4b0d      	ldr	r3, [pc, #52]	; (f20 <killev+0x38>)
	wfun = (aword)(pid->code);
     eec:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     eee:	681a      	ldr	r2, [r3, #0]
     ef0:	b1aa      	cbz	r2, f1e <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     ef2:	4614      	mov	r4, r2
     ef4:	f834 1b10 	ldrh.w	r1, [r4], #16
     ef8:	2300      	movs	r3, #0
     efa:	f001 0107 	and.w	r1, r1, #7
     efe:	e001      	b.n	f04 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     f00:	42b5      	cmp	r5, r6
     f02:	d006      	beq.n	f12 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     f04:	4299      	cmp	r1, r3
     f06:	dd08      	ble.n	f1a <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     f08:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f0c:	3301      	adds	r3, #1
     f0e:	42a8      	cmp	r0, r5
     f10:	d1f6      	bne.n	f00 <killev+0x18>
			    ) {
				wakeupev (i, j);
     f12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f16:	889b      	ldrh	r3, [r3, #4]
     f18:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f1c:	e7e8      	b.n	ef0 <killev+0x8>
				break;
			}
		}
	}
}
     f1e:	bd70      	pop	{r4, r5, r6, pc}
     f20:	2000004c 	andcs	r0, r0, ip, asr #32

00000f24 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	4a1d      	ldr	r2, [pc, #116]	; (f9c <qfree+0x78>)
static void qfree (aword *ch) {
     f26:	b530      	push	{r4, r5, lr}
     f28:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2a:	6813      	ldr	r3, [r2, #0]
     f2c:	b93b      	cbnz	r3, f3e <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f2e:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f30:	4a1a      	ldr	r2, [pc, #104]	; (f9c <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f32:	bb53      	cbnz	r3, f8a <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f34:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f36:	4b1a      	ldr	r3, [pc, #104]	; (fa0 <qfree+0x7c>)
	m_setnextp (cc, ch);
     f38:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f3a:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     f3c:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f3e:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     f42:	3101      	adds	r1, #1
     f44:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     f48:	4288      	cmp	r0, r1
     f4a:	d10b      	bne.n	f64 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     f4c:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     f4e:	f850 0c04 	ldr.w	r0, [r0, #-4]
     f52:	f853 1c04 	ldr.w	r1, [r3, #-4]
     f56:	4401      	add	r1, r0
     f58:	4618      	mov	r0, r3
     f5a:	3101      	adds	r1, #1
     f5c:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	e7e3      	b.n	f2c <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f68:	3101      	adds	r1, #1
     f6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     f6e:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     f70:	bf03      	ittte	eq
     f72:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     f78:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     f7c:	461a      	movne	r2, r3
     f7e:	bf02      	ittt	eq
     f80:	1949      	addeq	r1, r1, r5
     f82:	3101      	addeq	r1, #1
     f84:	f840 1c04 	streq.w	r1, [r0, #-4]
     f88:	e7ea      	b.n	f60 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     f8a:	f853 4c04 	ldr.w	r4, [r3, #-4]
     f8e:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f92:	428c      	cmp	r4, r1
     f94:	d2ce      	bcs.n	f34 <qfree+0x10>
		chunk = m_nextp (chunk))
     f96:	461a      	mov	r2, r3
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	e7ca      	b.n	f32 <qfree+0xe>
     f9c:	20000060 	andcs	r0, r0, r0, rrx
     fa0:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000fa4 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	4a03      	ldr	r2, [pc, #12]	; (fb4 <dgout+0x10>)
     fa6:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     fa8:	071b      	lsls	r3, r3, #28
     faa:	d4fc      	bmi.n	fa6 <dgout+0x2>
	diag_wchar (c, a);
     fac:	4b02      	ldr	r3, [pc, #8]	; (fb8 <dgout+0x14>)
     fae:	b2c0      	uxtb	r0, r0
     fb0:	6018      	str	r0, [r3, #0]
}
     fb2:	4770      	bx	lr
     fb4:	40001018 	andmi	r1, r0, r8, lsl r0
     fb8:	40001000 	andmi	r1, r0, r0

00000fbc <__pi_badstate>:
	syserror (ESTATE, "state");
     fbc:	2007      	movs	r0, #7
void __pi_badstate (void) {
     fbe:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     fc0:	4901      	ldr	r1, [pc, #4]	; (fc8 <__pi_badstate+0xc>)
     fc2:	f7ff fa89 	bl	4d8 <__pi_syserror>
     fc6:	bf00      	nop
     fc8:	00002e40 	andeq	r2, r0, r0, asr #28

00000fcc <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fce:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	4608      	mov	r0, r1
     fd2:	f7ff fb69 	bl	6a8 <tci_update_delay_ticks>
     fd6:	2800      	cmp	r0, #0
     fd8:	d154      	bne.n	1084 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fda:	4b2b      	ldr	r3, [pc, #172]	; (1088 <update_n_wake+0xbc>)
     fdc:	4d2b      	ldr	r5, [pc, #172]	; (108c <update_n_wake+0xc0>)
     fde:	8819      	ldrh	r1, [r3, #0]
     fe0:	882a      	ldrh	r2, [r5, #0]
     fe2:	b289      	uxth	r1, r1
     fe4:	428a      	cmp	r2, r1
     fe6:	492a      	ldr	r1, [pc, #168]	; (1090 <update_n_wake+0xc4>)
     fe8:	d803      	bhi.n	ff2 <update_n_wake+0x26>
     fea:	8808      	ldrh	r0, [r1, #0]
     fec:	b280      	uxth	r0, r0
     fee:	4282      	cmp	r2, r0
     ff0:	d20d      	bcs.n	100e <update_n_wake+0x42>
     ff2:	881e      	ldrh	r6, [r3, #0]
     ff4:	8808      	ldrh	r0, [r1, #0]
     ff6:	b2b6      	uxth	r6, r6
     ff8:	b280      	uxth	r0, r0
     ffa:	4286      	cmp	r6, r0
     ffc:	d236      	bcs.n	106c <update_n_wake+0xa0>
     ffe:	8818      	ldrh	r0, [r3, #0]
    1000:	b280      	uxth	r0, r0
    1002:	4282      	cmp	r2, r0
    1004:	d903      	bls.n	100e <update_n_wake+0x42>
    1006:	8808      	ldrh	r0, [r1, #0]
    1008:	b280      	uxth	r0, r0
    100a:	4282      	cmp	r2, r0
    100c:	d32e      	bcc.n	106c <update_n_wake+0xa0>
		for_all_tasks (i) {
    100e:	4a21      	ldr	r2, [pc, #132]	; (1094 <update_n_wake+0xc8>)
    1010:	6810      	ldr	r0, [r2, #0]
    1012:	b918      	cbnz	r0, 101c <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1014:	8818      	ldrh	r0, [r3, #0]
    1016:	4404      	add	r4, r0
    1018:	802c      	strh	r4, [r5, #0]
    101a:	e02c      	b.n	1076 <update_n_wake+0xaa>
			if (!twaiting (i))
    101c:	8806      	ldrh	r6, [r0, #0]
    101e:	0732      	lsls	r2, r6, #28
    1020:	d51b      	bpl.n	105a <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1022:	881f      	ldrh	r7, [r3, #0]
    1024:	8842      	ldrh	r2, [r0, #2]
    1026:	b2bf      	uxth	r7, r7
    1028:	42ba      	cmp	r2, r7
    102a:	d803      	bhi.n	1034 <update_n_wake+0x68>
    102c:	880f      	ldrh	r7, [r1, #0]
    102e:	b2bf      	uxth	r7, r7
    1030:	42ba      	cmp	r2, r7
    1032:	d20f      	bcs.n	1054 <update_n_wake+0x88>
    1034:	f8b3 c000 	ldrh.w	ip, [r3]
    1038:	880f      	ldrh	r7, [r1, #0]
    103a:	fa1f fc8c 	uxth.w	ip, ip
    103e:	b2bf      	uxth	r7, r7
    1040:	45bc      	cmp	ip, r7
    1042:	d20c      	bcs.n	105e <update_n_wake+0x92>
    1044:	881f      	ldrh	r7, [r3, #0]
    1046:	b2bf      	uxth	r7, r7
    1048:	42ba      	cmp	r2, r7
    104a:	d903      	bls.n	1054 <update_n_wake+0x88>
    104c:	880f      	ldrh	r7, [r1, #0]
    104e:	b2bf      	uxth	r7, r7
    1050:	42ba      	cmp	r2, r7
    1052:	d304      	bcc.n	105e <update_n_wake+0x92>
				wakeuptm (i);
    1054:	f026 060f 	bic.w	r6, r6, #15
    1058:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    105a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    105c:	e7d9      	b.n	1012 <update_n_wake+0x46>
				d = i->Timer - znew;
    105e:	881e      	ldrh	r6, [r3, #0]
    1060:	1b92      	subs	r2, r2, r6
    1062:	b292      	uxth	r2, r2
    1064:	4294      	cmp	r4, r2
    1066:	bf28      	it	cs
    1068:	4614      	movcs	r4, r2
    106a:	e7f6      	b.n	105a <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    106c:	8818      	ldrh	r0, [r3, #0]
    106e:	1a12      	subs	r2, r2, r0
    1070:	b292      	uxth	r2, r2
    1072:	4294      	cmp	r4, r2
    1074:	d9ce      	bls.n	1014 <update_n_wake+0x48>
	__pi_old = znew;
    1076:	881b      	ldrh	r3, [r3, #0]
    1078:	b29b      	uxth	r3, r3
    107a:	800b      	strh	r3, [r1, #0]
}
    107c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1080:	f7ff ba54 	b.w	52c <tci_run_delay_timer>
}
    1084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1086:	bf00      	nop
    1088:	200000a0 	andcs	r0, r0, r0, lsr #1
    108c:	20000094 	mulcs	r0, r4, r0
    1090:	20000096 	mulcs	r0, r6, r0
    1094:	2000004c 	andcs	r0, r0, ip, asr #32

00001098 <proceed>:
void proceed (word state) {
    1098:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    109a:	4b03      	ldr	r3, [pc, #12]	; (10a8 <proceed+0x10>)
    109c:	0100      	lsls	r0, r0, #4
    109e:	681b      	ldr	r3, [r3, #0]
    10a0:	8018      	strh	r0, [r3, #0]
	release;
    10a2:	f7ff fdc5 	bl	c30 <__pi_release>
    10a6:	bf00      	nop
    10a8:	200000b4 	strhcs	r0, [r0], -r4

000010ac <__pi_wait>:
void __pi_wait (aword event, word state) {
    10ac:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    10ae:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <__pi_wait+0x2c>)
    10b0:	681c      	ldr	r4, [r3, #0]
    10b2:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	f013 0f04 	tst.w	r3, #4
    10b8:	f003 0207 	and.w	r2, r3, #7
    10bc:	d003      	beq.n	10c6 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    10be:	2005      	movs	r0, #5
    10c0:	4906      	ldr	r1, [pc, #24]	; (10dc <__pi_wait+0x30>)
    10c2:	f7ff fa09 	bl	4d8 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    10c6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    10ca:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    10cc:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    10ce:	8191      	strh	r1, [r2, #12]
    10d0:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    10d2:	8023      	strh	r3, [r4, #0]
}
    10d4:	bd10      	pop	{r4, pc}
    10d6:	bf00      	nop
    10d8:	200000b4 	strhcs	r0, [r0], -r4
    10dc:	00002e46 	andeq	r2, r0, r6, asr #28

000010e0 <__pi_trigger>:
void __pi_trigger (aword event) {
    10e0:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    10e2:	4b0b      	ldr	r3, [pc, #44]	; (1110 <__pi_trigger+0x30>)
    10e4:	681a      	ldr	r2, [r3, #0]
    10e6:	b192      	cbz	r2, 110e <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    10e8:	4614      	mov	r4, r2
    10ea:	2300      	movs	r3, #0
    10ec:	f834 1b10 	ldrh.w	r1, [r4], #16
    10f0:	f001 0107 	and.w	r1, r1, #7
    10f4:	4299      	cmp	r1, r3
    10f6:	dd08      	ble.n	110a <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    10f8:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    10fc:	3301      	adds	r3, #1
    10fe:	4285      	cmp	r5, r0
    1100:	d1f8      	bne.n	10f4 <__pi_trigger+0x14>
				wakeupev (i, j);
    1102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1106:	889b      	ldrh	r3, [r3, #4]
    1108:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    110a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    110c:	e7eb      	b.n	10e6 <__pi_trigger+0x6>
}
    110e:	bd30      	pop	{r4, r5, pc}
    1110:	2000004c 	andcs	r0, r0, ip, asr #32

00001114 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1114:	b510      	push	{r4, lr}
    1116:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1118:	4b06      	ldr	r3, [pc, #24]	; (1134 <__pi_join+0x20>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	b90b      	cbnz	r3, 1122 <__pi_join+0xe>
	return 0;
    111e:	461c      	mov	r4, r3
    1120:	e004      	b.n	112c <__pi_join+0x18>
		if ((aword)i == pid) {
    1122:	42a3      	cmp	r3, r4
    1124:	d104      	bne.n	1130 <__pi_join+0x1c>
			__pi_wait (pid, st);
    1126:	4620      	mov	r0, r4
    1128:	f7ff ffc0 	bl	10ac <__pi_wait>
}
    112c:	4620      	mov	r0, r4
    112e:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1132:	e7f3      	b.n	111c <__pi_join+0x8>
    1134:	2000004c 	andcs	r0, r0, ip, asr #32

00001138 <delay>:
void delay (word d, word state) {
    1138:	b538      	push	{r3, r4, r5, lr}
    113a:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    113c:	4d0a      	ldr	r5, [pc, #40]	; (1168 <delay+0x30>)
    113e:	682a      	ldr	r2, [r5, #0]
    1140:	8813      	ldrh	r3, [r2, #0]
    1142:	f003 0307 	and.w	r3, r3, #7
    1146:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    114a:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    114c:	2101      	movs	r1, #1
    114e:	f7ff ff3d 	bl	fcc <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1152:	4b06      	ldr	r3, [pc, #24]	; (116c <delay+0x34>)
    1154:	8818      	ldrh	r0, [r3, #0]
    1156:	682b      	ldr	r3, [r5, #0]
    1158:	4404      	add	r4, r0
    115a:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    115c:	682a      	ldr	r2, [r5, #0]
    115e:	8813      	ldrh	r3, [r2, #0]
    1160:	f043 0308 	orr.w	r3, r3, #8
    1164:	8013      	strh	r3, [r2, #0]
}
    1166:	bd38      	pop	{r3, r4, r5, pc}
    1168:	200000b4 	strhcs	r0, [r0], -r4
    116c:	20000096 	mulcs	r0, r6, r0

00001170 <running>:
	if (fun == NULL)
    1170:	4603      	mov	r3, r0
    1172:	b910      	cbnz	r0, 117a <running+0xa>
		return (int) __pi_curr;
    1174:	4b05      	ldr	r3, [pc, #20]	; (118c <running+0x1c>)
    1176:	6818      	ldr	r0, [r3, #0]
    1178:	4770      	bx	lr
	for_all_tasks (i)
    117a:	4a05      	ldr	r2, [pc, #20]	; (1190 <running+0x20>)
    117c:	6810      	ldr	r0, [r2, #0]
    117e:	b900      	cbnz	r0, 1182 <running+0x12>
}
    1180:	4770      	bx	lr
		if (i->code == fun)
    1182:	6842      	ldr	r2, [r0, #4]
    1184:	429a      	cmp	r2, r3
    1186:	d0fb      	beq.n	1180 <running+0x10>
	for_all_tasks (i)
    1188:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    118a:	e7f8      	b.n	117e <running+0xe>
    118c:	200000b4 	strhcs	r0, [r0], -r4
    1190:	2000004c 	andcs	r0, r0, ip, asr #32

00001194 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1194:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1196:	2000      	movs	r0, #0
    1198:	5c1a      	ldrb	r2, [r3, r0]
    119a:	b902      	cbnz	r2, 119e <__pi_strlen+0xa>
}
    119c:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    119e:	3001      	adds	r0, #1
    11a0:	e7fa      	b.n	1198 <__pi_strlen+0x4>

000011a2 <__pi_memcpy>:
	while (n--)
    11a2:	3801      	subs	r0, #1
    11a4:	440a      	add	r2, r1
    11a6:	4291      	cmp	r1, r2
    11a8:	d100      	bne.n	11ac <__pi_memcpy+0xa>
}
    11aa:	4770      	bx	lr
		*dest++ = *src++;
    11ac:	f811 3b01 	ldrb.w	r3, [r1], #1
    11b0:	f800 3f01 	strb.w	r3, [r0, #1]!
    11b4:	e7f7      	b.n	11a6 <__pi_memcpy+0x4>
	...

000011b8 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    11ba:	b119      	cbz	r1, 11c4 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    11bc:	2003      	movs	r0, #3
    11be:	4905      	ldr	r1, [pc, #20]	; (11d4 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    11c0:	f7ff f98a 	bl	4d8 <__pi_syserror>
	if (ioreq [loc] != NULL)
    11c4:	4b04      	ldr	r3, [pc, #16]	; (11d8 <adddevfunc+0x20>)
    11c6:	681a      	ldr	r2, [r3, #0]
    11c8:	b112      	cbz	r2, 11d0 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    11ca:	2004      	movs	r0, #4
    11cc:	4901      	ldr	r1, [pc, #4]	; (11d4 <adddevfunc+0x1c>)
    11ce:	e7f7      	b.n	11c0 <adddevfunc+0x8>
	ioreq [loc] = rf;
    11d0:	6018      	str	r0, [r3, #0]
}
    11d2:	bd08      	pop	{r3, pc}
    11d4:	00002e49 	andeq	r2, r0, r9, asr #28
    11d8:	20000050 	andcs	r0, r0, r0, asr r0

000011dc <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11e0:	4604      	mov	r4, r0
    11e2:	4616      	mov	r6, r2
    11e4:	461d      	mov	r5, r3
    11e6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ea:	b921      	cbnz	r1, 11f6 <io+0x1a>
    11ec:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1274 <io+0x98>
    11f0:	f8d9 3000 	ldr.w	r3, [r9]
    11f4:	b91b      	cbnz	r3, 11fe <io+0x22>
		syserror (ENODEVICE, "io");
    11f6:	2001      	movs	r0, #1
    11f8:	491d      	ldr	r1, [pc, #116]	; (1270 <io+0x94>)
    11fa:	f7ff f96d 	bl	4d8 <__pi_syserror>
	if (len == 0)
    11fe:	f1b8 0f00 	cmp.w	r8, #0
    1202:	d028      	beq.n	1256 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1204:	4642      	mov	r2, r8
    1206:	4629      	mov	r1, r5
    1208:	4630      	mov	r0, r6
    120a:	4798      	blx	r3
	if (ret >= 0)
    120c:	2800      	cmp	r0, #0
    120e:	da23      	bge.n	1258 <io+0x7c>
	if (ret == -1) {
    1210:	1c41      	adds	r1, r0, #1
    1212:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1216:	d108      	bne.n	122a <io+0x4e>
		if (retry == WNONE)
    1218:	429c      	cmp	r4, r3
    121a:	d01c      	beq.n	1256 <io+0x7a>
		iowait (dev, operation, retry);
    121c:	4621      	mov	r1, r4
    121e:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1222:	f7ff ff43 	bl	10ac <__pi_wait>
			release;
    1226:	f7ff fd03 	bl	c30 <__pi_release>
	if (ret == -2) {
    122a:	1c82      	adds	r2, r0, #2
    122c:	d116      	bne.n	125c <io+0x80>
		if (retry != WNONE) {
    122e:	429c      	cmp	r4, r3
    1230:	f8d9 9000 	ldr.w	r9, [r9]
    1234:	d00a      	beq.n	124c <io+0x70>
			iowait (dev, operation, retry);
    1236:	4621      	mov	r1, r4
    1238:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    123c:	f7ff ff36 	bl	10ac <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1240:	4642      	mov	r2, r8
    1242:	4629      	mov	r1, r5
    1244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1248:	47c8      	blx	r9
    124a:	e7ec      	b.n	1226 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    124c:	4642      	mov	r2, r8
    124e:	4629      	mov	r1, r5
    1250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1254:	47c8      	blx	r9
		return 0;
    1256:	2000      	movs	r0, #0
}
    1258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    125c:	429c      	cmp	r4, r3
    125e:	d0fa      	beq.n	1256 <io+0x7a>
		delay (-ret - 2, retry);
    1260:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1264:	30fe      	adds	r0, #254	; 0xfe
    1266:	4621      	mov	r1, r4
    1268:	b280      	uxth	r0, r0
    126a:	f7ff ff65 	bl	1138 <delay>
		release;
    126e:	e7da      	b.n	1226 <io+0x4a>
    1270:	00002e4e 	andeq	r2, r0, lr, asr #28
    1274:	20000050 	andcs	r0, r0, r0, asr r0

00001278 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	4a0d      	ldr	r2, [pc, #52]	; (12b0 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    127a:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1280:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1284:	089b      	lsrs	r3, r3, #2
    1286:	1e59      	subs	r1, r3, #1
    1288:	29ff      	cmp	r1, #255	; 0xff
    128a:	d803      	bhi.n	1294 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    128c:	2004      	movs	r0, #4
    128e:	4909      	ldr	r1, [pc, #36]	; (12b4 <__pi_malloc_init+0x3c>)
    1290:	f7ff f922 	bl	4d8 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1294:	4908      	ldr	r1, [pc, #32]	; (12b8 <__pi_malloc_init+0x40>)
    1296:	1d10      	adds	r0, r2, #4
    1298:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129a:	2000      	movs	r0, #0
    129c:	4907      	ldr	r1, [pc, #28]	; (12bc <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    129e:	3b02      	subs	r3, #2
    12a0:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a2:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a6:	4a06      	ldr	r2, [pc, #24]	; (12c0 <__pi_malloc_init+0x48>)
    12a8:	6013      	str	r3, [r2, #0]
    12aa:	4a06      	ldr	r2, [pc, #24]	; (12c4 <__pi_malloc_init+0x4c>)
    12ac:	6013      	str	r3, [r2, #0]
}
    12ae:	bd08      	pop	{r3, pc}
    12b0:	200000b8 	strhcs	r0, [r0], -r8
    12b4:	00002e51 	andeq	r2, r0, r1, asr lr
    12b8:	20000060 	andcs	r0, r0, r0, rrx
    12bc:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    12c0:	20000054 	andcs	r0, r0, r4, asr r0
    12c4:	2000005c 	andcs	r0, r0, ip, asr r0

000012c8 <__pi_free>:
void __pi_free (aword *ch) {
    12c8:	b508      	push	{r3, lr}
	if (ch == NULL)
    12ca:	b1c8      	cbz	r0, 1300 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
    12d0:	2b00      	cmp	r3, #0
    12d2:	db03      	blt.n	12dc <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    12d4:	2006      	movs	r0, #6
    12d6:	490b      	ldr	r1, [pc, #44]	; (1304 <__pi_free+0x3c>)
    12d8:	f7ff f8fe 	bl	4d8 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    12dc:	490a      	ldr	r1, [pc, #40]	; (1308 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    12de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    12e2:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    12e8:	4413      	add	r3, r2
    12ea:	600b      	str	r3, [r1, #0]
	QFREE;
    12ec:	f7ff fe1a 	bl	f24 <qfree>
	if (mevent [MA_NP] . nwait) {
    12f0:	4806      	ldr	r0, [pc, #24]	; (130c <__pi_free+0x44>)
    12f2:	7803      	ldrb	r3, [r0, #0]
    12f4:	b123      	cbz	r3, 1300 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    12f6:	f7ff fef3 	bl	10e0 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    12fa:	7803      	ldrb	r3, [r0, #0]
    12fc:	3b01      	subs	r3, #1
    12fe:	7003      	strb	r3, [r0, #0]
}
    1300:	bd08      	pop	{r3, pc}
    1302:	bf00      	nop
    1304:	00002e56 	andeq	r2, r0, r6, asr lr
    1308:	20000054 	andcs	r0, r0, r4, asr r0
    130c:	20000058 	andcs	r0, r0, r8, asr r0

00001310 <kill>:
void kill (aword pid) {
    1310:	b510      	push	{r4, lr}
	if (pid == 0)
    1312:	b908      	cbnz	r0, 1318 <kill+0x8>
		pid = (aword) __pi_curr;
    1314:	4b0f      	ldr	r3, [pc, #60]	; (1354 <kill+0x44>)
    1316:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1318:	2200      	movs	r2, #0
	for_all_tasks (i) {
    131a:	4b0f      	ldr	r3, [pc, #60]	; (1358 <kill+0x48>)
    131c:	681c      	ldr	r4, [r3, #0]
    131e:	b91c      	cbnz	r4, 1328 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1320:	2003      	movs	r0, #3
    1322:	490e      	ldr	r1, [pc, #56]	; (135c <kill+0x4c>)
    1324:	f7ff f8d8 	bl	4d8 <__pi_syserror>
		if ((aword)i == pid) {
    1328:	4284      	cmp	r4, r0
    132a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    132c:	d10e      	bne.n	134c <kill+0x3c>
			if (j == NULL)
    132e:	b95a      	cbnz	r2, 1348 <kill+0x38>
				__PCB = i->Next;
    1330:	6019      	str	r1, [r3, #0]
			killev (i);
    1332:	4620      	mov	r0, r4
    1334:	f7ff fdd8 	bl	ee8 <killev>
			ufree (i);
    1338:	f7ff ffc6 	bl	12c8 <__pi_free>
			if (i == __pi_curr)
    133c:	4b05      	ldr	r3, [pc, #20]	; (1354 <kill+0x44>)
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	42a3      	cmp	r3, r4
    1342:	d106      	bne.n	1352 <kill+0x42>
				release;
    1344:	f7ff fc74 	bl	c30 <__pi_release>
				j->Next = i->Next;
    1348:	62d1      	str	r1, [r2, #44]	; 0x2c
    134a:	e7f2      	b.n	1332 <kill+0x22>
    134c:	4622      	mov	r2, r4
    134e:	460c      	mov	r4, r1
    1350:	e7e5      	b.n	131e <kill+0xe>
}
    1352:	bd10      	pop	{r4, pc}
    1354:	200000b4 	strhcs	r0, [r0], -r4
    1358:	2000004c 	andcs	r0, r0, ip, asr #32
    135c:	00002e5b 	andeq	r2, r0, fp, asr lr

00001360 <killall>:
void killall (fsmcode fun) {
    1360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	j = NULL;
    1364:	2400      	movs	r4, #0
	rel = NO;
    1366:	4626      	mov	r6, r4
	for (i = __PCB; i != NULL; ) {
    1368:	4d11      	ldr	r5, [pc, #68]	; (13b0 <killall+0x50>)
void killall (fsmcode fun) {
    136a:	4607      	mov	r7, r0
			if (i == __pi_curr)
    136c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 13b4 <killall+0x54>
	for (i = __PCB; i != NULL; ) {
    1370:	6828      	ldr	r0, [r5, #0]
    1372:	b910      	cbnz	r0, 137a <killall+0x1a>
	if (rel)
    1374:	b1ce      	cbz	r6, 13aa <killall+0x4a>
		release;
    1376:	f7ff fc5b 	bl	c30 <__pi_release>
		if (i->code == fun) {
    137a:	6843      	ldr	r3, [r0, #4]
    137c:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    1380:	42bb      	cmp	r3, r7
    1382:	d10c      	bne.n	139e <killall+0x3e>
			if (j == NULL)
    1384:	b974      	cbnz	r4, 13a4 <killall+0x44>
				__PCB = k;
    1386:	f8c5 8000 	str.w	r8, [r5]
			if (i == __pi_curr)
    138a:	f8d9 3000 	ldr.w	r3, [r9]
				rel = YES;
    138e:	4283      	cmp	r3, r0
    1390:	bf08      	it	eq
    1392:	2601      	moveq	r6, #1
			killev (i);
    1394:	f7ff fda8 	bl	ee8 <killev>
			ufree (i);
    1398:	f7ff ff96 	bl	12c8 <__pi_free>
			i = k;
    139c:	4620      	mov	r0, r4
    139e:	4604      	mov	r4, r0
    13a0:	4640      	mov	r0, r8
    13a2:	e7e6      	b.n	1372 <killall+0x12>
				j->Next = k;
    13a4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    13a8:	e7ef      	b.n	138a <killall+0x2a>
}
    13aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    13ae:	bf00      	nop
    13b0:	2000004c 	andcs	r0, r0, ip, asr #32
    13b4:	200000b4 	strhcs	r0, [r0], -r4

000013b8 <__pi_malloc>:
	if (size < 8)
    13b8:	2807      	cmp	r0, #7
		_size = 2;
    13ba:	bf98      	it	ls
    13bc:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    13be:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c0:	4b21      	ldr	r3, [pc, #132]	; (1448 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    13c2:	bf88      	it	hi
    13c4:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c6:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	4920      	ldr	r1, [pc, #128]	; (144c <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    13ca:	bf88      	it	hi
    13cc:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13ce:	b94c      	cbnz	r4, 13e4 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    13d0:	4a1f      	ldr	r2, [pc, #124]	; (1450 <__pi_malloc+0x98>)
    13d2:	7853      	ldrb	r3, [r2, #1]
    13d4:	2bff      	cmp	r3, #255	; 0xff
    13d6:	d001      	beq.n	13dc <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    13d8:	3301      	adds	r3, #1
    13da:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    13dc:	2200      	movs	r2, #0
    13de:	4b1d      	ldr	r3, [pc, #116]	; (1454 <__pi_malloc+0x9c>)
    13e0:	601a      	str	r2, [r3, #0]
	return chunk;
    13e2:	e02f      	b.n	1444 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	6862      	ldr	r2, [r4, #4]
    13e6:	428a      	cmp	r2, r1
    13e8:	d003      	beq.n	13f2 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    13ea:	2006      	movs	r0, #6
    13ec:	491a      	ldr	r1, [pc, #104]	; (1458 <__pi_malloc+0xa0>)
    13ee:	f7ff f873 	bl	4d8 <__pi_syserror>
		if (m_size (chunk) >= _size)
    13f2:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    13f6:	4285      	cmp	r5, r0
    13f8:	d202      	bcs.n	1400 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    13fa:	4623      	mov	r3, r4
    13fc:	4614      	mov	r4, r2
    13fe:	e7e6      	b.n	13ce <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1400:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1402:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1406:	1a1b      	subs	r3, r3, r0
    1408:	2b08      	cmp	r3, #8
    140a:	d909      	bls.n	1420 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    140c:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1410:	3001      	adds	r0, #1
    1412:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1416:	3b01      	subs	r3, #1
    1418:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    141c:	f7ff fd82 	bl	f24 <qfree>
		mevent [MA_NP] . nfail = 0;
    1420:	2200      	movs	r2, #0
    1422:	4b0b      	ldr	r3, [pc, #44]	; (1450 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1424:	490d      	ldr	r1, [pc, #52]	; (145c <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1426:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1428:	f854 2c04 	ldr.w	r2, [r4, #-4]
    142c:	680b      	ldr	r3, [r1, #0]
    142e:	1a9b      	subs	r3, r3, r2
    1430:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1432:	4908      	ldr	r1, [pc, #32]	; (1454 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1434:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1438:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    143a:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    143e:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1440:	bf38      	it	cc
    1442:	600b      	strcc	r3, [r1, #0]
}
    1444:	4620      	mov	r0, r4
    1446:	bd38      	pop	{r3, r4, r5, pc}
    1448:	20000060 	andcs	r0, r0, r0, rrx
    144c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1450:	20000058 	andcs	r0, r0, r8, asr r0
    1454:	2000005c 	andcs	r0, r0, ip, asr r0
    1458:	00002e5f 	andeq	r2, r0, pc, asr lr
    145c:	20000054 	andcs	r0, r0, r4, asr r0

00001460 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1460:	b538      	push	{r3, r4, r5, lr}
    1462:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1464:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1466:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1468:	f7ff ffa6 	bl	13b8 <__pi_malloc>
    146c:	2300      	movs	r3, #0
    146e:	b138      	cbz	r0, 1480 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1470:	4a07      	ldr	r2, [pc, #28]	; (1490 <__pi_fork+0x30>)
	i->Status = 0;
    1472:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1474:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1476:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1478:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    147c:	b90b      	cbnz	r3, 1482 <__pi_fork+0x22>
			__PCB = i;
    147e:	6010      	str	r0, [r2, #0]
}
    1480:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1482:	461a      	mov	r2, r3
    1484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1486:	2b00      	cmp	r3, #0
    1488:	d1fb      	bne.n	1482 <__pi_fork+0x22>
			j->Next = i;
    148a:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    148c:	e7f8      	b.n	1480 <__pi_fork+0x20>
    148e:	bf00      	nop
    1490:	2000004c 	andcs	r0, r0, ip, asr #32

00001494 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1494:	4a04      	ldr	r2, [pc, #16]	; (14a8 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1496:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1498:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    149a:	4803      	ldr	r0, [pc, #12]	; (14a8 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    149c:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    149e:	bf1c      	itt	ne
    14a0:	3301      	addne	r3, #1
    14a2:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    14a4:	f7ff be02 	b.w	10ac <__pi_wait>
    14a8:	20000058 	andcs	r0, r0, r8, asr r0

000014ac <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    14ac:	b40f      	push	{r0, r1, r2, r3}
    14ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    14b2:	ab0a      	add	r3, sp, #40	; 0x28
    14b4:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    14b8:	2015      	movs	r0, #21
	va_start (ap, mess);
    14ba:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    14bc:	4b46      	ldr	r3, [pc, #280]	; (15d8 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    14be:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    14c0:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    14c2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 15e0 <diag+0x134>
	diag_disable_int (a, is);
    14c6:	695b      	ldr	r3, [r3, #20]
    14c8:	4798      	blx	r3
	while (*mess != '\0') {
    14ca:	7820      	ldrb	r0, [r4, #0]
    14cc:	b998      	cbnz	r0, 14f6 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    14ce:	200d      	movs	r0, #13
    14d0:	f7ff fd68 	bl	fa4 <dgout>
	dgout ('\n');
    14d4:	200a      	movs	r0, #10
    14d6:	f7ff fd65 	bl	fa4 <dgout>
    14da:	4a40      	ldr	r2, [pc, #256]	; (15dc <diag+0x130>)
    14dc:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    14de:	071b      	lsls	r3, r3, #28
    14e0:	d4fc      	bmi.n	14dc <diag+0x30>
	diag_enable_int (a, is);
    14e2:	4b3d      	ldr	r3, [pc, #244]	; (15d8 <diag+0x12c>)
    14e4:	2015      	movs	r0, #21
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	691b      	ldr	r3, [r3, #16]
    14ea:	4798      	blx	r3
}
    14ec:	b003      	add	sp, #12
    14ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14f2:	b004      	add	sp, #16
    14f4:	4770      	bx	lr
		if (*mess == '%') {
    14f6:	2825      	cmp	r0, #37	; 0x25
    14f8:	f104 0601 	add.w	r6, r4, #1
    14fc:	d169      	bne.n	15d2 <diag+0x126>
			if (*mess == 'l') {
    14fe:	9b01      	ldr	r3, [sp, #4]
    1500:	7862      	ldrb	r2, [r4, #1]
    1502:	f853 1b04 	ldr.w	r1, [r3], #4
    1506:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1508:	bf08      	it	eq
    150a:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    150c:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    150e:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1510:	bf0c      	ite	eq
    1512:	2520      	moveq	r5, #32
				bc = 16;
    1514:	2510      	movne	r5, #16
			switch (*mess) {
    1516:	2b75      	cmp	r3, #117	; 0x75
    1518:	d04e      	beq.n	15b8 <diag+0x10c>
    151a:	d80a      	bhi.n	1532 <diag+0x86>
    151c:	2b64      	cmp	r3, #100	; 0x64
    151e:	d01c      	beq.n	155a <diag+0xae>
    1520:	2b73      	cmp	r3, #115	; 0x73
    1522:	d052      	beq.n	15ca <diag+0x11e>
				dgout ('%');
    1524:	2025      	movs	r0, #37	; 0x25
    1526:	f7ff fd3d 	bl	fa4 <dgout>
				dgout (*mess);
    152a:	7830      	ldrb	r0, [r6, #0]
    152c:	f7ff fd3a 	bl	fa4 <dgout>
    1530:	e010      	b.n	1554 <diag+0xa8>
			switch (*mess) {
    1532:	2b78      	cmp	r3, #120	; 0x78
    1534:	d1f6      	bne.n	1524 <diag+0x78>
    1536:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1538:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 15e4 <diag+0x138>
					i += 4;
    153c:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    153e:	1b2b      	subs	r3, r5, r4
    1540:	fa21 f303 	lsr.w	r3, r1, r3
    1544:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1548:	f819 0003 	ldrb.w	r0, [r9, r3]
    154c:	f7ff fd2a 	bl	fa4 <dgout>
				while (i < bc) {
    1550:	42a5      	cmp	r5, r4
    1552:	dcf3      	bgt.n	153c <diag+0x90>
			mess++;
    1554:	3601      	adds	r6, #1
					d /= 10;
    1556:	4634      	mov	r4, r6
    1558:	e7b7      	b.n	14ca <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    155a:	1e6b      	subs	r3, r5, #1
    155c:	fa21 f303 	lsr.w	r3, r1, r3
    1560:	07da      	lsls	r2, r3, #31
    1562:	d509      	bpl.n	1578 <diag+0xcc>
					dgout ('-');
    1564:	202d      	movs	r0, #45	; 0x2d
    1566:	f7ff fd1d 	bl	fa4 <dgout>
					if (bc == 16)
    156a:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    156c:	bf04      	itt	eq
    156e:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1572:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1576:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	f242 7410 	movw	r4, #10000	; 0x2710
    157c:	2d10      	cmp	r5, #16
    157e:	bf18      	it	ne
    1580:	4644      	movne	r4, r8
					v = (word) (val / d);
    1582:	fbb1 f5f4 	udiv	r5, r1, r4
    1586:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1588:	b935      	cbnz	r5, 1598 <diag+0xec>
    158a:	2c01      	cmp	r4, #1
    158c:	d004      	beq.n	1598 <diag+0xec>
					d /= 10;
    158e:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1592:	e7f6      	b.n	1582 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1594:	4c12      	ldr	r4, [pc, #72]	; (15e0 <diag+0x134>)
    1596:	e7f4      	b.n	1582 <diag+0xd6>
					dgout (v + '0');
    1598:	f105 0030 	add.w	r0, r5, #48	; 0x30
    159c:	b280      	uxth	r0, r0
    159e:	f7ff fd01 	bl	fa4 <dgout>
					if (d == 0) break;
    15a2:	2c09      	cmp	r4, #9
					d /= 10;
    15a4:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    15a8:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    15ac:	d9d2      	bls.n	1554 <diag+0xa8>
					v = (word) (val / d);
    15ae:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    15b2:	461c      	mov	r4, r3
					v = (word) (val / d);
    15b4:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    15b6:	e7ef      	b.n	1598 <diag+0xec>
				if (bc == 16)
    15b8:	2d10      	cmp	r5, #16
    15ba:	d1eb      	bne.n	1594 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    15bc:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    15c0:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    15c2:	e7de      	b.n	1582 <diag+0xd6>
					dgout (*s);
    15c4:	f7ff fcee 	bl	fa4 <dgout>
					s++;
    15c8:	3101      	adds	r1, #1
				while (*s != '\0') {
    15ca:	7808      	ldrb	r0, [r1, #0]
    15cc:	2800      	cmp	r0, #0
    15ce:	d1f9      	bne.n	15c4 <diag+0x118>
    15d0:	e7c0      	b.n	1554 <diag+0xa8>
			dgout (*mess++);
    15d2:	f7ff fce7 	bl	fa4 <dgout>
    15d6:	e7be      	b.n	1556 <diag+0xaa>
    15d8:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    15dc:	40001018 	andmi	r1, r0, r8, lsl r0
    15e0:	3b9aca00 	blcc	fe6b3de8 <_estack+0xde6aede8>
    15e4:	00002e64 	andeq	r2, r0, r4, ror #28

000015e8 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    15e8:	4770      	bx	lr

000015ea <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    15ea:	e7fe      	b.n	15ea <NmiSR>

000015ec <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    15ec:	e7fe      	b.n	15ec <FaultISR>

000015ee <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    15ee:	e7fe      	b.n	15ee <AONIntHandler>

000015f0 <ResetISR>:
{
    15f0:	b508      	push	{r3, lr}
    SetupTrimDevice();
    15f2:	f000 fddb 	bl	21ac <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f6:	4b0c      	ldr	r3, [pc, #48]	; (1628 <zero_loop+0x20>)
    pui32Src = &_etext;
    15f8:	4a0c      	ldr	r2, [pc, #48]	; (162c <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15fa:	490d      	ldr	r1, [pc, #52]	; (1630 <zero_loop+0x28>)
    15fc:	428b      	cmp	r3, r1
    15fe:	d30d      	bcc.n	161c <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1600:	480c      	ldr	r0, [pc, #48]	; (1634 <zero_loop+0x2c>)
    1602:	490d      	ldr	r1, [pc, #52]	; (1638 <zero_loop+0x30>)
    1604:	f04f 0200 	mov.w	r2, #0

00001608 <zero_loop>:
    1608:	4288      	cmp	r0, r1
    160a:	bfb8      	it	lt
    160c:	f840 2b04 	strlt.w	r2, [r0], #4
    1610:	dbfa      	blt.n	1608 <zero_loop>
   main();
    1612:	f7ff fc39 	bl	e88 <main>
    FaultISR();
    1616:	f7ff ffe9 	bl	15ec <FaultISR>
}
    161a:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    161c:	f852 0b04 	ldr.w	r0, [r2], #4
    1620:	f843 0b04 	str.w	r0, [r3], #4
    1624:	e7ea      	b.n	15fc <ResetISR+0xc>
    1626:	bf00      	nop
    1628:	20000000 	andcs	r0, r0, r0
    162c:	00002e7c 	andeq	r2, r0, ip, ror lr
    1630:	20000009 	andcs	r0, r0, r9
    1634:	2000000c 	andcs	r0, r0, ip
    1638:	200000b8 	strhcs	r0, [r0], -r8

0000163c <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    163c:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    163e:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1640:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1644:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1646:	4907      	ldr	r1, [pc, #28]	; (1664 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1648:	4d07      	ldr	r5, [pc, #28]	; (1668 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    164a:	4c08      	ldr	r4, [pc, #32]	; (166c <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    164c:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    164e:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1650:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    1652:	b2c0      	uxtb	r0, r0
			b |= 1;
    1654:	bf48      	it	mi
    1656:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    165a:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    165c:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    165e:	600a      	str	r2, [r1, #0]
    1660:	d1f4      	bne.n	164c <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1662:	bd70      	pop	{r4, r5, r6, pc}
    1664:	400220a0 	andmi	r2, r2, r0, lsr #1
    1668:	400220c0 	andmi	r2, r2, r0, asr #1
    166c:	40022090 	mulmi	r2, r0, r0

00001670 <put_byte>:

static void put_byte (byte b) {
    1670:	b530      	push	{r4, r5, lr}
    1672:	2308      	movs	r3, #8
    1674:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1678:	f44f 6180 	mov.w	r1, #1024	; 0x400
    167c:	4c06      	ldr	r4, [pc, #24]	; (1698 <put_byte+0x28>)
    167e:	4a07      	ldr	r2, [pc, #28]	; (169c <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1680:	f010 0f80 	tst.w	r0, #128	; 0x80
    1684:	bf14      	ite	ne
    1686:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1688:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    168a:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    168c:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    168e:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1690:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1692:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1694:	d1f4      	bne.n	1680 <put_byte+0x10>
	}
}
    1696:	bd30      	pop	{r4, r5, pc}
    1698:	40022090 	mulmi	r2, r0, r0
    169c:	400220a0 	andmi	r2, r2, r0, lsr #1

000016a0 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    16a0:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    16a2:	b510      	push	{r4, lr}
    16a4:	4c03      	ldr	r4, [pc, #12]	; (16b4 <cmd_0+0x14>)
    16a6:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    16a8:	f7ff ffe2 	bl	1670 <put_byte>
    16ac:	2300      	movs	r3, #0
    16ae:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    16b0:	bd10      	pop	{r4, pc}
    16b2:	bf00      	nop
    16b4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000016b8 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    16b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16bc:	4604      	mov	r4, r0
    16be:	460d      	mov	r5, r1
    16c0:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    16c2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1708 <wwait+0x50>
    16c6:	4e0f      	ldr	r6, [pc, #60]	; (1704 <wwait+0x4c>)
    16c8:	f898 3000 	ldrb.w	r3, [r8]
    16cc:	b14b      	cbz	r3, 16e2 <wwait+0x2a>
	put_byte (CMD_RDSR);
    16ce:	2005      	movs	r0, #5
    16d0:	6037      	str	r7, [r6, #0]
    16d2:	f7ff ffcd 	bl	1670 <put_byte>
	r = get_byte ();
    16d6:	f7ff ffb1 	bl	163c <get_byte>
    16da:	2300      	movs	r3, #0
    16dc:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    16de:	07c3      	lsls	r3, r0, #31
    16e0:	d401      	bmi.n	16e6 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    16e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    16e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16ea:	429c      	cmp	r4, r3
    16ec:	d103      	bne.n	16f6 <wwait+0x3e>
			mdelay (1);
    16ee:	2001      	movs	r0, #1
    16f0:	f7fe febe 	bl	470 <mdelay>
    16f4:	e7e8      	b.n	16c8 <wwait+0x10>
			delay (del, st);
    16f6:	4621      	mov	r1, r4
    16f8:	4628      	mov	r0, r5
    16fa:	f7ff fd1d 	bl	1138 <delay>
			release;
    16fe:	f7ff fa97 	bl	c30 <__pi_release>
    1702:	bf00      	nop
    1704:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1708:	20000064 	andcs	r0, r0, r4, rrx

0000170c <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    170e:	4d0c      	ldr	r5, [pc, #48]	; (1740 <ready+0x34>)
    1710:	782f      	ldrb	r7, [r5, #0]
    1712:	b147      	cbz	r7, 1726 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1714:	2101      	movs	r1, #1
    1716:	f64f 70ff 	movw	r0, #65535	; 0xffff
    171a:	f7ff ffcd 	bl	16b8 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    171e:	2200      	movs	r2, #0
    1720:	4b08      	ldr	r3, [pc, #32]	; (1744 <ready+0x38>)
    1722:	701a      	strb	r2, [r3, #0]
}
    1724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1726:	2401      	movs	r4, #1
    1728:	4e07      	ldr	r6, [pc, #28]	; (1748 <ready+0x3c>)
	udelay (1);
    172a:	4620      	mov	r0, r4
    172c:	6034      	str	r4, [r6, #0]
    172e:	f7fe fe89 	bl	444 <udelay>
	udelay (1);
    1732:	4620      	mov	r0, r4
    1734:	6037      	str	r7, [r6, #0]
    1736:	f7fe fe85 	bl	444 <udelay>
		dopen = DOPEN_TEMP;
    173a:	2302      	movs	r3, #2
    173c:	702b      	strb	r3, [r5, #0]
    173e:	e7ee      	b.n	171e <ready+0x12>
    1740:	20000064 	andcs	r0, r0, r4, rrx
    1744:	20000065 	andcs	r0, r0, r5, rrx
    1748:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

0000174c <cclose>:
static void cclose () {
    174c:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    174e:	4c07      	ldr	r4, [pc, #28]	; (176c <cclose+0x20>)
    1750:	7823      	ldrb	r3, [r4, #0]
    1752:	2b02      	cmp	r3, #2
    1754:	d109      	bne.n	176a <cclose+0x1e>
		wwait (WNONE, 1);
    1756:	2101      	movs	r1, #1
    1758:	f64f 70ff 	movw	r0, #65535	; 0xffff
    175c:	f7ff ffac 	bl	16b8 <wwait>
	cmd_0 (CMD_DP);
    1760:	20b9      	movs	r0, #185	; 0xb9
    1762:	f7ff ff9d 	bl	16a0 <cmd_0>
		dopen = 0;
    1766:	2300      	movs	r3, #0
    1768:	7023      	strb	r3, [r4, #0]
}
    176a:	bd10      	pop	{r4, pc}
    176c:	20000064 	andcs	r0, r0, r4, rrx

00001770 <ee_open>:

// ============================================================================

word ee_open () {
    1770:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1772:	f7ff ffcb 	bl	170c <ready>
	dopen = DOPEN_PERM;
    1776:	2201      	movs	r2, #1
    1778:	4b01      	ldr	r3, [pc, #4]	; (1780 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    177a:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    177c:	701a      	strb	r2, [r3, #0]
}
    177e:	bd08      	pop	{r3, pc}
    1780:	20000064 	andcs	r0, r0, r4, rrx

00001784 <ee_close>:

void ee_close () {

	if (dopen) {
    1784:	4b03      	ldr	r3, [pc, #12]	; (1794 <ee_close+0x10>)
    1786:	781a      	ldrb	r2, [r3, #0]
    1788:	b11a      	cbz	r2, 1792 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    178a:	2202      	movs	r2, #2
    178c:	701a      	strb	r2, [r3, #0]
		cclose ();
    178e:	f7ff bfdd 	b.w	174c <cclose>
	}
}
    1792:	4770      	bx	lr
    1794:	20000064 	andcs	r0, r0, r4, rrx

00001798 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    179a:	4604      	mov	r4, r0
    179c:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    179e:	4615      	mov	r5, r2
    17a0:	b37a      	cbz	r2, 1802 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    17a2:	4e19      	ldr	r6, [pc, #100]	; (1808 <ser_in+0x70>)
    17a4:	6830      	ldr	r0, [r6, #0]
    17a6:	b988      	cbnz	r0, 17cc <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    17a8:	4818      	ldr	r0, [pc, #96]	; (180c <ser_in+0x74>)
    17aa:	f7ff fce1 	bl	1170 <running>
    17ae:	b948      	cbnz	r0, 17c4 <ser_in+0x2c>
			prcs = runthread (__inserial);
    17b0:	4601      	mov	r1, r0
    17b2:	4816      	ldr	r0, [pc, #88]	; (180c <ser_in+0x74>)
    17b4:	f7ff fe54 	bl	1460 <__pi_fork>
			if (prcs == 0) {
    17b8:	b920      	cbnz	r0, 17c4 <ser_in+0x2c>
				npwait (st);
    17ba:	4620      	mov	r0, r4
    17bc:	f7ff fe6a 	bl	1494 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    17c0:	f7ff fa36 	bl	c30 <__pi_release>
		join (prcs, st);
    17c4:	4621      	mov	r1, r4
    17c6:	f7ff fca5 	bl	1114 <__pi_join>
    17ca:	e7f9      	b.n	17c0 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    17cc:	7803      	ldrb	r3, [r0, #0]
    17ce:	b9a3      	cbnz	r3, 17fa <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17d0:	7844      	ldrb	r4, [r0, #1]
    17d2:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    17d4:	42ac      	cmp	r4, r5
		prcs = len-1;
    17d6:	bfa8      	it	ge
    17d8:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    17dc:	4622      	mov	r2, r4
    17de:	4638      	mov	r0, r7
    17e0:	6831      	ldr	r1, [r6, #0]
    17e2:	f7ff fcde 	bl	11a2 <__pi_memcpy>
	ufree (__inpline);
    17e6:	6830      	ldr	r0, [r6, #0]
    17e8:	f7ff fd6e 	bl	12c8 <__pi_free>
	__inpline = NULL;
    17ec:	2300      	movs	r3, #0
    17ee:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    17f0:	783a      	ldrb	r2, [r7, #0]
    17f2:	b102      	cbz	r2, 17f6 <ser_in+0x5e>
		buf [prcs] = '\0';
    17f4:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    17f6:	4620      	mov	r0, r4
    17f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    17fa:	f7ff fccb 	bl	1194 <__pi_strlen>
    17fe:	4604      	mov	r4, r0
    1800:	e7e8      	b.n	17d4 <ser_in+0x3c>
		return 0;
    1802:	4614      	mov	r4, r2
    1804:	e7f7      	b.n	17f6 <ser_in+0x5e>
    1806:	bf00      	nop
    1808:	20000070 	andcs	r0, r0, r0, ror r0
    180c:	00001935 	andeq	r1, r0, r5, lsr r9

00001810 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1810:	b40e      	push	{r1, r2, r3}
    1812:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1814:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1816:	4812      	ldr	r0, [pc, #72]	; (1860 <ser_outf+0x50>)
    1818:	f7ff fcaa 	bl	1170 <running>
    181c:	4606      	mov	r6, r0
    181e:	b120      	cbz	r0, 182a <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1820:	4621      	mov	r1, r4
    1822:	f7ff fc77 	bl	1114 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1826:	f7ff fa03 	bl	c30 <__pi_release>
	va_start (ap, m);
    182a:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    182c:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    182e:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1830:	f000 fa36 	bl	1ca0 <vform>
    1834:	4605      	mov	r5, r0
    1836:	b918      	cbnz	r0, 1840 <ser_outf+0x30>
		umwait (st);
    1838:	4620      	mov	r0, r4
    183a:	f7ff fe2b 	bl	1494 <__pi_waitmem>
    183e:	e7f2      	b.n	1826 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1840:	4601      	mov	r1, r0
    1842:	4807      	ldr	r0, [pc, #28]	; (1860 <ser_outf+0x50>)
    1844:	f7ff fe0c 	bl	1460 <__pi_fork>
    1848:	b918      	cbnz	r0, 1852 <ser_outf+0x42>
		ufree (buf);
    184a:	4628      	mov	r0, r5
    184c:	f7ff fd3c 	bl	12c8 <__pi_free>
		npwait (st);
    1850:	e7f2      	b.n	1838 <ser_outf+0x28>
		release;
	}

	return 0;
}
    1852:	4630      	mov	r0, r6
    1854:	b003      	add	sp, #12
    1856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    185a:	b003      	add	sp, #12
    185c:	4770      	bx	lr
    185e:	bf00      	nop
    1860:	000018c5 	andeq	r1, r0, r5, asr #17

00001864 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1864:	b40e      	push	{r1, r2, r3}
    1866:	b533      	push	{r0, r1, r4, r5, lr}
    1868:	9905      	ldr	r1, [sp, #20]
    186a:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    186c:	b321      	cbz	r1, 18b8 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    186e:	4d13      	ldr	r5, [pc, #76]	; (18bc <ser_inf+0x58>)
    1870:	6828      	ldr	r0, [r5, #0]
    1872:	b988      	cbnz	r0, 1898 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1874:	4812      	ldr	r0, [pc, #72]	; (18c0 <ser_inf+0x5c>)
    1876:	f7ff fc7b 	bl	1170 <running>
    187a:	b948      	cbnz	r0, 1890 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    187c:	4601      	mov	r1, r0
    187e:	4810      	ldr	r0, [pc, #64]	; (18c0 <ser_inf+0x5c>)
    1880:	f7ff fdee 	bl	1460 <__pi_fork>
			if (prcs == 0) {
    1884:	b920      	cbnz	r0, 1890 <ser_inf+0x2c>
				npwait (st);
    1886:	4620      	mov	r0, r4
    1888:	f7ff fe04 	bl	1494 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    188c:	f7ff f9d0 	bl	c30 <__pi_release>
		join (prcs, st);
    1890:	4621      	mov	r1, r4
    1892:	f7ff fc3f 	bl	1114 <__pi_join>
    1896:	e7f9      	b.n	188c <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1898:	aa06      	add	r2, sp, #24
    189a:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    189c:	f000 fa28 	bl	1cf0 <vscan>
    18a0:	4604      	mov	r4, r0

	ufree (__inpline);
    18a2:	6828      	ldr	r0, [r5, #0]
    18a4:	f7ff fd10 	bl	12c8 <__pi_free>
	__inpline = NULL;
    18a8:	2300      	movs	r3, #0
    18aa:	602b      	str	r3, [r5, #0]

	return prcs;
}
    18ac:	4620      	mov	r0, r4
    18ae:	b002      	add	sp, #8
    18b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    18b4:	b003      	add	sp, #12
    18b6:	4770      	bx	lr
		return 0;
    18b8:	460c      	mov	r4, r1
    18ba:	e7f7      	b.n	18ac <ser_inf+0x48>
    18bc:	20000070 	andcs	r0, r0, r0, ror r0
    18c0:	00001935 	andeq	r1, r0, r5, lsr r9

000018c4 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    18c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18c6:	4b18      	ldr	r3, [pc, #96]	; (1928 <__outserial+0x64>)
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	689d      	ldr	r5, [r3, #8]
    18cc:	b130      	cbz	r0, 18dc <__outserial+0x18>
    18ce:	280a      	cmp	r0, #10
    18d0:	d00d      	beq.n	18ee <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    18d2:	b003      	add	sp, #12
    18d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    18d8:	f7ff bb70 	b.w	fbc <__pi_badstate>
	ptr = data;
    18dc:	4b13      	ldr	r3, [pc, #76]	; (192c <__outserial+0x68>)
    18de:	4c14      	ldr	r4, [pc, #80]	; (1930 <__outserial+0x6c>)
    18e0:	601d      	str	r5, [r3, #0]
	if (*ptr)
    18e2:	782b      	ldrb	r3, [r5, #0]
    18e4:	b1e3      	cbz	r3, 1920 <__outserial+0x5c>
		len = strlen (ptr);
    18e6:	4628      	mov	r0, r5
    18e8:	f7ff fc54 	bl	1194 <__pi_strlen>
    18ec:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18ee:	4e0f      	ldr	r6, [pc, #60]	; (192c <__outserial+0x68>)
    18f0:	4f0f      	ldr	r7, [pc, #60]	; (1930 <__outserial+0x6c>)
    18f2:	883b      	ldrh	r3, [r7, #0]
    18f4:	2201      	movs	r2, #1
    18f6:	9300      	str	r3, [sp, #0]
    18f8:	2100      	movs	r1, #0
    18fa:	6833      	ldr	r3, [r6, #0]
    18fc:	200a      	movs	r0, #10
    18fe:	f7ff fc6d 	bl	11dc <io>
	ptr += quant;
    1902:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1904:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    1906:	4403      	add	r3, r0
	len -= quant;
    1908:	1a24      	subs	r4, r4, r0
	ptr += quant;
    190a:	6033      	str	r3, [r6, #0]
	len -= quant;
    190c:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    190e:	2c00      	cmp	r4, #0
    1910:	d1ef      	bne.n	18f2 <__outserial+0x2e>
		ufree (data);
    1912:	4628      	mov	r0, r5
    1914:	f7ff fcd8 	bl	12c8 <__pi_free>
		finish;
    1918:	4620      	mov	r0, r4
    191a:	f7ff fcf9 	bl	1310 <kill>
    191e:	e7e8      	b.n	18f2 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1920:	786b      	ldrb	r3, [r5, #1]
    1922:	3303      	adds	r3, #3
    1924:	6023      	str	r3, [r4, #0]
    1926:	e7e2      	b.n	18ee <__outserial+0x2a>
    1928:	200000b4 	strhcs	r0, [r0], -r4
    192c:	2000006c 	andcs	r0, r0, ip, rrx
    1930:	20000068 	andcs	r0, r0, r8, rrx

00001934 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    1934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1936:	4d42      	ldr	r5, [pc, #264]	; (1a40 <__inserial+0x10c>)
    1938:	682a      	ldr	r2, [r5, #0]
    193a:	6894      	ldr	r4, [r2, #8]
    193c:	2803      	cmp	r0, #3
    193e:	d87a      	bhi.n	1a36 <__inserial+0x102>
    1940:	e8df f000 	tbb	[pc, r0]
    1944:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    1948:	4b3e      	ldr	r3, [pc, #248]	; (1a44 <__inserial+0x110>)
    194a:	681b      	ldr	r3, [r3, #0]
    194c:	b113      	cbz	r3, 1954 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    194e:	2000      	movs	r0, #0
    1950:	f7ff fcde 	bl	1310 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1954:	2040      	movs	r0, #64	; 0x40
    1956:	f7ff fd2f 	bl	13b8 <__pi_malloc>
    195a:	4b3b      	ldr	r3, [pc, #236]	; (1a48 <__inserial+0x114>)
    195c:	4604      	mov	r4, r0
    195e:	6018      	str	r0, [r3, #0]
    1960:	b918      	cbnz	r0, 196a <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    1962:	f7ff fd97 	bl	1494 <__pi_waitmem>
		release;
    1966:	f7ff f963 	bl	c30 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    196a:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    196c:	682b      	ldr	r3, [r5, #0]
    196e:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    1970:	4b36      	ldr	r3, [pc, #216]	; (1a4c <__inserial+0x118>)
    1972:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    1974:	2001      	movs	r0, #1
    1976:	2200      	movs	r2, #0
    1978:	4d33      	ldr	r5, [pc, #204]	; (1a48 <__inserial+0x114>)
    197a:	9000      	str	r0, [sp, #0]
    197c:	682b      	ldr	r3, [r5, #0]
    197e:	4611      	mov	r1, r2
    1980:	f7ff fc2c 	bl	11dc <io>
	if (ptr == (char*) data) { // new line
    1984:	682b      	ldr	r3, [r5, #0]
    1986:	42a3      	cmp	r3, r4
    1988:	d10d      	bne.n	19a6 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    198a:	7823      	ldrb	r3, [r4, #0]
    198c:	b923      	cbnz	r3, 1998 <__inserial+0x64>
			ptr++;
    198e:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    1990:	2002      	movs	r0, #2
			ptr++;
    1992:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    1994:	f7ff fb80 	bl	1098 <proceed>
		}

		if (*ptr < 0x20)
    1998:	682b      	ldr	r3, [r5, #0]
    199a:	781b      	ldrb	r3, [r3, #0]
    199c:	2b1f      	cmp	r3, #31
    199e:	d802      	bhi.n	19a6 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    19a0:	2001      	movs	r0, #1
    19a2:	f7ff fb79 	bl	1098 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    19a6:	682b      	ldr	r3, [r5, #0]
    19a8:	781a      	ldrb	r2, [r3, #0]
    19aa:	2a0a      	cmp	r2, #10
    19ac:	d001      	beq.n	19b2 <__inserial+0x7e>
    19ae:	2a0d      	cmp	r2, #13
    19b0:	d105      	bne.n	19be <__inserial+0x8a>
		*ptr = '\0';
    19b2:	2000      	movs	r0, #0
    19b4:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    19b6:	4b23      	ldr	r3, [pc, #140]	; (1a44 <__inserial+0x110>)
    19b8:	601c      	str	r4, [r3, #0]
		finish;
    19ba:	f7ff fca9 	bl	1310 <kill>
	}

	if (len) {
    19be:	4923      	ldr	r1, [pc, #140]	; (1a4c <__inserial+0x118>)
    19c0:	680b      	ldr	r3, [r1, #0]
    19c2:	b123      	cbz	r3, 19ce <__inserial+0x9a>
		ptr++;
    19c4:	682a      	ldr	r2, [r5, #0]
		len--;
    19c6:	3b01      	subs	r3, #1
		ptr++;
    19c8:	3201      	adds	r2, #1
    19ca:	602a      	str	r2, [r5, #0]
		len--;
    19cc:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    19ce:	2001      	movs	r0, #1
    19d0:	f7ff fb62 	bl	1098 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    19d4:	2301      	movs	r3, #1
    19d6:	2200      	movs	r2, #0
    19d8:	4d1b      	ldr	r5, [pc, #108]	; (1a48 <__inserial+0x114>)
    19da:	9300      	str	r3, [sp, #0]
    19dc:	4611      	mov	r1, r2
    19de:	682b      	ldr	r3, [r5, #0]
    19e0:	2002      	movs	r0, #2
    19e2:	f7ff fbfb 	bl	11dc <io>
	len -= 2;
    19e6:	4819      	ldr	r0, [pc, #100]	; (1a4c <__inserial+0x118>)
    19e8:	6803      	ldr	r3, [r0, #0]
    19ea:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    19ec:	682b      	ldr	r3, [r5, #0]
    19ee:	f813 1b01 	ldrb.w	r1, [r3], #1
    19f2:	3101      	adds	r1, #1
		len = *ptr + 1;
    19f4:	4291      	cmp	r1, r2
    19f6:	bfd4      	ite	le
    19f8:	6001      	strle	r1, [r0, #0]
    19fa:	6002      	strgt	r2, [r0, #0]
	ptr++;
    19fc:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    19fe:	2200      	movs	r2, #0
    1a00:	4f12      	ldr	r7, [pc, #72]	; (1a4c <__inserial+0x118>)
    1a02:	4d11      	ldr	r5, [pc, #68]	; (1a48 <__inserial+0x114>)
    1a04:	883b      	ldrh	r3, [r7, #0]
    1a06:	4611      	mov	r1, r2
    1a08:	9300      	str	r3, [sp, #0]
    1a0a:	682b      	ldr	r3, [r5, #0]
    1a0c:	2003      	movs	r0, #3
    1a0e:	f7ff fbe5 	bl	11dc <io>
	len -= quant;
    1a12:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a14:	4606      	mov	r6, r0
	len -= quant;
    1a16:	1a18      	subs	r0, r3, r0
    1a18:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1a1a:	b918      	cbnz	r0, 1a24 <__inserial+0xf0>
		__inpline = (char*)data;
    1a1c:	4b09      	ldr	r3, [pc, #36]	; (1a44 <__inserial+0x110>)
    1a1e:	601c      	str	r4, [r3, #0]
		finish;
    1a20:	f7ff fc76 	bl	1310 <kill>
	}
	ptr += quant;
    1a24:	6828      	ldr	r0, [r5, #0]
    1a26:	4430      	add	r0, r6
    1a28:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    1a2a:	2003      	movs	r0, #3

endstrand
    1a2c:	b003      	add	sp, #12
    1a2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    1a32:	f7ff bb31 	b.w	1098 <proceed>
endstrand
    1a36:	b003      	add	sp, #12
    1a38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1a3c:	f7ff babe 	b.w	fbc <__pi_badstate>
    1a40:	200000b4 	strhcs	r0, [r0], -r4
    1a44:	20000070 	andcs	r0, r0, r0, ror r0
    1a48:	20000078 	andcs	r0, r0, r8, ror r0
    1a4c:	20000074 	andcs	r0, r0, r4, ror r0

00001a50 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    1a50:	f8dc 2000 	ldr.w	r2, [ip]
    1a54:	b132      	cbz	r2, 1a64 <outc.5724+0x14>
    1a56:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1a5a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    1a5e:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    1a60:	bf88      	it	hi
    1a62:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    1a64:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1a68:	3301      	adds	r3, #1
    1a6a:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    1a6e:	4770      	bx	lr

00001a70 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1a74:	461c      	mov	r4, r3
    1a76:	ab0c      	add	r3, sp, #48	; 0x30
    1a78:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    1a7a:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1a7c:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    1a7e:	4f86      	ldr	r7, [pc, #536]	; (1c98 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a80:	9001      	str	r0, [sp, #4]
    1a82:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    1a86:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1a8a:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    1a8e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    1a92:	d118      	bne.n	1ac6 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    1a94:	f892 9001 	ldrb.w	r9, [r2, #1]
    1a98:	1c95      	adds	r5, r2, #2
				outc ('\\');
    1a9a:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    1a9e:	f1b9 0f00 	cmp.w	r9, #0
    1aa2:	d10b      	bne.n	1abc <__pi_vfparse+0x4c>
				outc ('\\');
    1aa4:	205c      	movs	r0, #92	; 0x5c
    1aa6:	f7ff ffd3 	bl	1a50 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    1aaa:	4648      	mov	r0, r9
    1aac:	f10d 0c04 	add.w	ip, sp, #4
    1ab0:	f7ff ffce 	bl	1a50 <outc.5724>
			if (c == '\0')
    1ab4:	f1b9 0f00 	cmp.w	r9, #0
    1ab8:	d103      	bne.n	1ac2 <__pi_vfparse+0x52>
    1aba:	e027      	b.n	1b0c <__pi_vfparse+0x9c>
			outc (c);
    1abc:	4648      	mov	r0, r9
				outc (val);
    1abe:	f7ff ffc7 	bl	1a50 <outc.5724>
				val = (word) va_arg (ap, aword);
    1ac2:	462a      	mov	r2, r5
    1ac4:	e7e1      	b.n	1a8a <__pi_vfparse+0x1a>
		if (c == '%') {
    1ac6:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1aca:	f040 80e2 	bne.w	1c92 <__pi_vfparse+0x222>
			c = *fm++;
    1ace:	f892 8001 	ldrb.w	r8, [r2, #1]
    1ad2:	1c95      	adds	r5, r2, #2
			switch (c) {
    1ad4:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    1ad8:	f000 80cd 	beq.w	1c76 <__pi_vfparse+0x206>
    1adc:	d81b      	bhi.n	1b16 <__pi_vfparse+0xa6>
    1ade:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    1ae2:	d033      	beq.n	1b4c <__pi_vfparse+0xdc>
    1ae4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    1ae8:	d067      	beq.n	1bba <__pi_vfparse+0x14a>
    1aea:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    1aee:	f000 80bc 	beq.w	1c6a <__pi_vfparse+0x1fa>
				outc ('%');
    1af2:	2025      	movs	r0, #37	; 0x25
    1af4:	f10d 0c04 	add.w	ip, sp, #4
    1af8:	f7ff ffaa 	bl	1a50 <outc.5724>
				outc (c);
    1afc:	4640      	mov	r0, r8
    1afe:	f10d 0c04 	add.w	ip, sp, #4
    1b02:	f7ff ffa5 	bl	1a50 <outc.5724>
				if (c == '\0')
    1b06:	f1b8 0f00 	cmp.w	r8, #0
    1b0a:	d1da      	bne.n	1ac2 <__pi_vfparse+0x52>
Ret:
				return d;
    1b0c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1b10:	b004      	add	sp, #16
    1b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1b16:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1b1a:	d017      	beq.n	1b4c <__pi_vfparse+0xdc>
    1b1c:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1b20:	d1e7      	bne.n	1af2 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    1b22:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1b26:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1b2a:	fa1f f983 	uxth.w	r9, r3
    1b2e:	fa49 f308 	asr.w	r3, r9, r8
    1b32:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1b36:	5cf8      	ldrb	r0, [r7, r3]
    1b38:	f10d 0c04 	add.w	ip, sp, #4
    1b3c:	f7ff ff88 	bl	1a50 <outc.5724>
					if (i == 0)
    1b40:	f1b8 0f00 	cmp.w	r8, #0
    1b44:	d0bd      	beq.n	1ac2 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1b46:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1b4a:	e7f0      	b.n	1b2e <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1b4c:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1b54:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1b58:	d10a      	bne.n	1b70 <__pi_vfparse+0x100>
    1b5a:	041b      	lsls	r3, r3, #16
    1b5c:	d508      	bpl.n	1b70 <__pi_vfparse+0x100>
					outc ('-');
    1b5e:	202d      	movs	r0, #45	; 0x2d
    1b60:	f10d 0c04 	add.w	ip, sp, #4
    1b64:	f7ff ff74 	bl	1a50 <outc.5724>
					val = (~val) + 1;
    1b68:	f1c9 0900 	rsb	r9, r9, #0
    1b6c:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    1b70:	2305      	movs	r3, #5
				enci (10000);
    1b72:	f242 7810 	movw	r8, #10000	; 0x2710
    1b76:	fbb9 f0f8 	udiv	r0, r9, r8
    1b7a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1b7e:	d103      	bne.n	1b88 <__pi_vfparse+0x118>
    1b80:	3b01      	subs	r3, #1
    1b82:	d117      	bne.n	1bb4 <__pi_vfparse+0x144>
    1b84:	f04f 0801 	mov.w	r8, #1
    1b88:	fa1f fa80 	uxth.w	sl, r0
    1b8c:	f10d 0c04 	add.w	ip, sp, #4
    1b90:	3030      	adds	r0, #48	; 0x30
    1b92:	f7ff ff5d 	bl	1a50 <outc.5724>
    1b96:	fbb8 f3f6 	udiv	r3, r8, r6
    1b9a:	fb08 991a 	mls	r9, r8, sl, r9
    1b9e:	f1b8 0f09 	cmp.w	r8, #9
    1ba2:	fa1f f989 	uxth.w	r9, r9
    1ba6:	b29b      	uxth	r3, r3
    1ba8:	d98b      	bls.n	1ac2 <__pi_vfparse+0x52>
    1baa:	fbb9 f0f3 	udiv	r0, r9, r3
    1bae:	4698      	mov	r8, r3
    1bb0:	b2c0      	uxtb	r0, r0
    1bb2:	e7e9      	b.n	1b88 <__pi_vfparse+0x118>
    1bb4:	fbb8 f8f6 	udiv	r8, r8, r6
    1bb8:	e7dd      	b.n	1b76 <__pi_vfparse+0x106>
				c = *fm;
    1bba:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    1bbc:	2b64      	cmp	r3, #100	; 0x64
    1bbe:	d001      	beq.n	1bc4 <__pi_vfparse+0x154>
    1bc0:	2b75      	cmp	r3, #117	; 0x75
    1bc2:	d132      	bne.n	1c2a <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    1bc4:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    1bc6:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    1bca:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    1bce:	d109      	bne.n	1be4 <__pi_vfparse+0x174>
    1bd0:	f1ba 0f00 	cmp.w	sl, #0
    1bd4:	da06      	bge.n	1be4 <__pi_vfparse+0x174>
						outc ('-');
    1bd6:	202d      	movs	r0, #45	; 0x2d
    1bd8:	f10d 0c04 	add.w	ip, sp, #4
    1bdc:	f7ff ff38 	bl	1a50 <outc.5724>
						val = (~val) + 1;
    1be0:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    1be4:	230a      	movs	r3, #10
					enci (1000000000UL);
    1be6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1c9c <__pi_vfparse+0x22c>
    1bea:	fbba f9f8 	udiv	r9, sl, r8
    1bee:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1bf2:	d103      	bne.n	1bfc <__pi_vfparse+0x18c>
    1bf4:	3b01      	subs	r3, #1
    1bf6:	d115      	bne.n	1c24 <__pi_vfparse+0x1b4>
    1bf8:	f04f 0801 	mov.w	r8, #1
    1bfc:	f10d 0c04 	add.w	ip, sp, #4
    1c00:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1c04:	f7ff ff24 	bl	1a50 <outc.5724>
    1c08:	f1b8 0f09 	cmp.w	r8, #9
    1c0c:	fbb8 f3f6 	udiv	r3, r8, r6
    1c10:	fb08 aa19 	mls	sl, r8, r9, sl
    1c14:	f67f af55 	bls.w	1ac2 <__pi_vfparse+0x52>
    1c18:	fbba f9f3 	udiv	r9, sl, r3
    1c1c:	4698      	mov	r8, r3
    1c1e:	fa5f f989 	uxtb.w	r9, r9
    1c22:	e7eb      	b.n	1bfc <__pi_vfparse+0x18c>
    1c24:	fbb8 f8f6 	udiv	r8, r8, r6
    1c28:	e7df      	b.n	1bea <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1c2a:	2b78      	cmp	r3, #120	; 0x78
    1c2c:	d114      	bne.n	1c58 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1c2e:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1c32:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1c36:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1c38:	fa29 f308 	lsr.w	r3, r9, r8
    1c3c:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1c40:	5cf8      	ldrb	r0, [r7, r3]
    1c42:	f10d 0c04 	add.w	ip, sp, #4
    1c46:	f7ff ff03 	bl	1a50 <outc.5724>
						if (i == 0)
    1c4a:	f1b8 0f00 	cmp.w	r8, #0
    1c4e:	f43f af38 	beq.w	1ac2 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1c52:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1c56:	e7ef      	b.n	1c38 <__pi_vfparse+0x1c8>
					outc ('%');
    1c58:	4648      	mov	r0, r9
    1c5a:	f10d 0c04 	add.w	ip, sp, #4
    1c5e:	f7ff fef7 	bl	1a50 <outc.5724>
					outc ('l');
    1c62:	4640      	mov	r0, r8
    1c64:	f10d 0c04 	add.w	ip, sp, #4
    1c68:	e729      	b.n	1abe <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1c6a:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1c6e:	f10d 0c04 	add.w	ip, sp, #4
    1c72:	b280      	uxth	r0, r0
    1c74:	e723      	b.n	1abe <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1c76:	f854 3b04 	ldr.w	r3, [r4], #4
    1c7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1c7e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1c82:	2800      	cmp	r0, #0
    1c84:	f43f af1d 	beq.w	1ac2 <__pi_vfparse+0x52>
					outc (*st);
    1c88:	f10d 0c04 	add.w	ip, sp, #4
    1c8c:	f7ff fee0 	bl	1a50 <outc.5724>
					st++;
    1c90:	e7f5      	b.n	1c7e <__pi_vfparse+0x20e>
		c = *fm++;
    1c92:	1c55      	adds	r5, r2, #1
    1c94:	e709      	b.n	1aaa <__pi_vfparse+0x3a>
    1c96:	bf00      	nop
    1c98:	00002e64 	andeq	r2, r0, r4, ror #28
    1c9c:	3b9aca00 	blcc	fe6b44a4 <_estack+0xde6af4a4>

00001ca0 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ca4:	460e      	mov	r6, r1
    1ca6:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1ca8:	4604      	mov	r4, r0
    1caa:	b140      	cbz	r0, 1cbe <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	4613      	mov	r3, r2
    1cae:	460a      	mov	r2, r1
    1cb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1cb4:	f7ff fedc 	bl	1a70 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1cb8:	4620      	mov	r0, r4
    1cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1cbe:	4608      	mov	r0, r1
    1cc0:	f7ff fa68 	bl	1194 <__pi_strlen>
    1cc4:	f100 0511 	add.w	r5, r0, #17
    1cc8:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1cca:	4628      	mov	r0, r5
    1ccc:	f7ff fb74 	bl	13b8 <__pi_malloc>
    1cd0:	4604      	mov	r4, r0
    1cd2:	2800      	cmp	r0, #0
    1cd4:	d0f0      	beq.n	1cb8 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd6:	463b      	mov	r3, r7
    1cd8:	4632      	mov	r2, r6
    1cda:	4629      	mov	r1, r5
    1cdc:	f7ff fec8 	bl	1a70 <__pi_vfparse>
    1ce0:	4285      	cmp	r5, r0
    1ce2:	4680      	mov	r8, r0
    1ce4:	d2e8      	bcs.n	1cb8 <vform+0x18>
		ufree (res);
    1ce6:	4620      	mov	r0, r4
    1ce8:	f7ff faee 	bl	12c8 <__pi_free>
		goto Again;
    1cec:	4645      	mov	r5, r8
    1cee:	e7ec      	b.n	1cca <vform+0x2a>

00001cf0 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1cf0:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1cf6:	2800      	cmp	r0, #0
    1cf8:	f000 81b5 	beq.w	2066 <vscan+0x376>
    1cfc:	2900      	cmp	r1, #0
    1cfe:	f000 81b4 	beq.w	206a <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1d02:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1d04:	270a      	movs	r7, #10
    1d06:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1d08:	f8df c370 	ldr.w	ip, [pc, #880]	; 207c <vscan+0x38c>
    1d0c:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1d0e:	f811 0b01 	ldrb.w	r0, [r1], #1
    1d12:	b170      	cbz	r0, 1d32 <vscan+0x42>
		if (*fmt++ != '%')
    1d14:	2825      	cmp	r0, #37	; 0x25
    1d16:	d1f9      	bne.n	1d0c <vscan+0x1c>
		switch (*fmt++) {
    1d18:	7870      	ldrb	r0, [r6, #1]
    1d1a:	1cb1      	adds	r1, r6, #2
    1d1c:	286c      	cmp	r0, #108	; 0x6c
    1d1e:	f000 80e1 	beq.w	1ee4 <vscan+0x1f4>
    1d22:	d809      	bhi.n	1d38 <vscan+0x48>
    1d24:	2863      	cmp	r0, #99	; 0x63
    1d26:	f000 8184 	beq.w	2032 <vscan+0x342>
    1d2a:	2864      	cmp	r0, #100	; 0x64
    1d2c:	d043      	beq.n	1db6 <vscan+0xc6>
    1d2e:	2800      	cmp	r0, #0
    1d30:	d1ec      	bne.n	1d0c <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1d32:	4620      	mov	r0, r4
    1d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1d38:	2875      	cmp	r0, #117	; 0x75
    1d3a:	d074      	beq.n	1e26 <vscan+0x136>
    1d3c:	2878      	cmp	r0, #120	; 0x78
    1d3e:	f000 8098 	beq.w	1e72 <vscan+0x182>
    1d42:	2873      	cmp	r0, #115	; 0x73
    1d44:	d1e2      	bne.n	1d0c <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1d46:	7818      	ldrb	r0, [r3, #0]
    1d48:	461e      	mov	r6, r3
    1d4a:	f1a0 0e09 	sub.w	lr, r0, #9
    1d4e:	fa5f fe8e 	uxtb.w	lr, lr
    1d52:	f1be 0f17 	cmp.w	lr, #23
    1d56:	4698      	mov	r8, r3
    1d58:	f103 0301 	add.w	r3, r3, #1
    1d5c:	f240 8173 	bls.w	2046 <vscan+0x356>
			if (*buf == '\0')
    1d60:	2800      	cmp	r0, #0
    1d62:	d0e6      	beq.n	1d32 <vscan+0x42>
			if (*buf != ',') {
    1d64:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1d66:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1d6a:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1d6e:	d00e      	beq.n	1d8e <vscan+0x9e>
    1d70:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1d72:	f818 3b01 	ldrb.w	r3, [r8], #1
    1d76:	f1a3 0009 	sub.w	r0, r3, #9
    1d7a:	2801      	cmp	r0, #1
    1d7c:	d907      	bls.n	1d8e <vscan+0x9e>
    1d7e:	2b0d      	cmp	r3, #13
    1d80:	d005      	beq.n	1d8e <vscan+0x9e>
    1d82:	2b2c      	cmp	r3, #44	; 0x2c
    1d84:	d003      	beq.n	1d8e <vscan+0x9e>
    1d86:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1d8a:	f040 8163 	bne.w	2054 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1d8e:	f896 8000 	ldrb.w	r8, [r6]
    1d92:	4633      	mov	r3, r6
    1d94:	f1a8 0009 	sub.w	r0, r8, #9
    1d98:	b2c0      	uxtb	r0, r0
    1d9a:	2817      	cmp	r0, #23
    1d9c:	f106 0601 	add.w	r6, r6, #1
    1da0:	f240 815b 	bls.w	205a <vscan+0x36a>
			if (*buf == ',') buf++;
    1da4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1da8:	bf08      	it	eq
    1daa:	4633      	moveq	r3, r6
			*sap = '\0';
    1dac:	f88e 5000 	strb.w	r5, [lr]
			break;
    1db0:	e7ac      	b.n	1d0c <vscan+0x1c>
		    case 'd': scani (word); break;
    1db2:	2e00      	cmp	r6, #0
    1db4:	d0bd      	beq.n	1d32 <vscan+0x42>
    1db6:	469e      	mov	lr, r3
    1db8:	f813 6b01 	ldrb.w	r6, [r3], #1
    1dbc:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1dc0:	2809      	cmp	r0, #9
    1dc2:	d923      	bls.n	1e0c <vscan+0x11c>
    1dc4:	2e2d      	cmp	r6, #45	; 0x2d
    1dc6:	d001      	beq.n	1dcc <vscan+0xdc>
    1dc8:	2e2b      	cmp	r6, #43	; 0x2b
    1dca:	d1f2      	bne.n	1db2 <vscan+0xc2>
    1dcc:	7818      	ldrb	r0, [r3, #0]
    1dce:	469e      	mov	lr, r3
    1dd0:	3830      	subs	r0, #48	; 0x30
    1dd2:	2809      	cmp	r0, #9
    1dd4:	d8ef      	bhi.n	1db6 <vscan+0xc6>
    1dd6:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1dda:	f1d9 0800 	rsbs	r8, r9, #0
    1dde:	eb48 0809 	adc.w	r8, r8, r9
    1de2:	f852 6b04 	ldr.w	r6, [r2], #4
    1de6:	3401      	adds	r4, #1
    1de8:	8035      	strh	r5, [r6, #0]
    1dea:	f89e 0000 	ldrb.w	r0, [lr]
    1dee:	4673      	mov	r3, lr
    1df0:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1df4:	f1b9 0f09 	cmp.w	r9, #9
    1df8:	f10e 0e01 	add.w	lr, lr, #1
    1dfc:	d909      	bls.n	1e12 <vscan+0x122>
    1dfe:	f1b8 0f00 	cmp.w	r8, #0
    1e02:	d183      	bne.n	1d0c <vscan+0x1c>
    1e04:	8830      	ldrh	r0, [r6, #0]
    1e06:	4240      	negs	r0, r0
    1e08:	8030      	strh	r0, [r6, #0]
    1e0a:	e77f      	b.n	1d0c <vscan+0x1c>
    1e0c:	f04f 0800 	mov.w	r8, #0
    1e10:	e7e7      	b.n	1de2 <vscan+0xf2>
    1e12:	8833      	ldrh	r3, [r6, #0]
    1e14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e18:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1e1c:	3030      	adds	r0, #48	; 0x30
    1e1e:	8030      	strh	r0, [r6, #0]
    1e20:	e7e3      	b.n	1dea <vscan+0xfa>
		    case 'u': scanu (word); break;
    1e22:	2800      	cmp	r0, #0
    1e24:	d085      	beq.n	1d32 <vscan+0x42>
    1e26:	7818      	ldrb	r0, [r3, #0]
    1e28:	461e      	mov	r6, r3
    1e2a:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1e2e:	f1be 0f09 	cmp.w	lr, #9
    1e32:	f103 0301 	add.w	r3, r3, #1
    1e36:	d8f4      	bhi.n	1e22 <vscan+0x132>
    1e38:	f852 eb04 	ldr.w	lr, [r2], #4
    1e3c:	3401      	adds	r4, #1
    1e3e:	f8ae 5000 	strh.w	r5, [lr]
    1e42:	7830      	ldrb	r0, [r6, #0]
    1e44:	4633      	mov	r3, r6
    1e46:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1e4a:	f1b8 0f09 	cmp.w	r8, #9
    1e4e:	f106 0601 	add.w	r6, r6, #1
    1e52:	f63f af5b 	bhi.w	1d0c <vscan+0x1c>
    1e56:	f8be 3000 	ldrh.w	r3, [lr]
    1e5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1e62:	3830      	subs	r0, #48	; 0x30
    1e64:	f8ae 0000 	strh.w	r0, [lr]
    1e68:	e7eb      	b.n	1e42 <vscan+0x152>
		    case 'x': scanx (word); break;
    1e6a:	f1be 0f00 	cmp.w	lr, #0
    1e6e:	f43f af60 	beq.w	1d32 <vscan+0x42>
    1e72:	f893 e000 	ldrb.w	lr, [r3]
    1e76:	461e      	mov	r6, r3
    1e78:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1e7c:	2809      	cmp	r0, #9
    1e7e:	f103 0301 	add.w	r3, r3, #1
    1e82:	d904      	bls.n	1e8e <vscan+0x19e>
    1e84:	f02e 0020 	bic.w	r0, lr, #32
    1e88:	3841      	subs	r0, #65	; 0x41
    1e8a:	2805      	cmp	r0, #5
    1e8c:	d8ed      	bhi.n	1e6a <vscan+0x17a>
    1e8e:	f852 eb04 	ldr.w	lr, [r2], #4
    1e92:	3401      	adds	r4, #1
    1e94:	f8ae 5000 	strh.w	r5, [lr]
    1e98:	f106 0805 	add.w	r8, r6, #5
    1e9c:	f896 9000 	ldrb.w	r9, [r6]
    1ea0:	4633      	mov	r3, r6
    1ea2:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1ea6:	b2c0      	uxtb	r0, r0
    1ea8:	2809      	cmp	r0, #9
    1eaa:	f106 0601 	add.w	r6, r6, #1
    1eae:	f240 80de 	bls.w	206e <vscan+0x37e>
    1eb2:	f029 0020 	bic.w	r0, r9, #32
    1eb6:	3841      	subs	r0, #65	; 0x41
    1eb8:	2805      	cmp	r0, #5
    1eba:	f63f af27 	bhi.w	1d0c <vscan+0x1c>
    1ebe:	4546      	cmp	r6, r8
    1ec0:	f43f af24 	beq.w	1d0c <vscan+0x1c>
    1ec4:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1ec8:	2b05      	cmp	r3, #5
    1eca:	bf94      	ite	ls
    1ecc:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1ed0:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1ed4:	b2c0      	uxtb	r0, r0
    1ed6:	f8be 3000 	ldrh.w	r3, [lr]
    1eda:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1ede:	f8ae 0000 	strh.w	r0, [lr]
    1ee2:	e7db      	b.n	1e9c <vscan+0x1ac>
			switch (*fmt++) {
    1ee4:	78b0      	ldrb	r0, [r6, #2]
    1ee6:	1cf1      	adds	r1, r6, #3
    1ee8:	2875      	cmp	r0, #117	; 0x75
    1eea:	d07d      	beq.n	1fe8 <vscan+0x2f8>
    1eec:	d831      	bhi.n	1f52 <vscan+0x262>
    1eee:	2800      	cmp	r0, #0
    1ef0:	f43f af1f 	beq.w	1d32 <vscan+0x42>
    1ef4:	2864      	cmp	r0, #100	; 0x64
    1ef6:	f47f af09 	bne.w	1d0c <vscan+0x1c>
    1efa:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1efc:	f813 6b01 	ldrb.w	r6, [r3], #1
    1f00:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1f04:	2809      	cmp	r0, #9
    1f06:	d962      	bls.n	1fce <vscan+0x2de>
    1f08:	2e2d      	cmp	r6, #45	; 0x2d
    1f0a:	d001      	beq.n	1f10 <vscan+0x220>
    1f0c:	2e2b      	cmp	r6, #43	; 0x2b
    1f0e:	d15b      	bne.n	1fc8 <vscan+0x2d8>
    1f10:	7818      	ldrb	r0, [r3, #0]
    1f12:	4698      	mov	r8, r3
    1f14:	3830      	subs	r0, #48	; 0x30
    1f16:	2809      	cmp	r0, #9
    1f18:	d8ef      	bhi.n	1efa <vscan+0x20a>
    1f1a:	3e2d      	subs	r6, #45	; 0x2d
    1f1c:	4270      	negs	r0, r6
    1f1e:	4170      	adcs	r0, r6
    1f20:	f852 eb04 	ldr.w	lr, [r2], #4
    1f24:	3401      	adds	r4, #1
    1f26:	f8ce 5000 	str.w	r5, [lr]
    1f2a:	f898 6000 	ldrb.w	r6, [r8]
    1f2e:	4643      	mov	r3, r8
    1f30:	3e30      	subs	r6, #48	; 0x30
    1f32:	fa5f f986 	uxtb.w	r9, r6
    1f36:	f1b9 0f09 	cmp.w	r9, #9
    1f3a:	f108 0801 	add.w	r8, r8, #1
    1f3e:	d948      	bls.n	1fd2 <vscan+0x2e2>
    1f40:	2800      	cmp	r0, #0
    1f42:	f47f aee3 	bne.w	1d0c <vscan+0x1c>
    1f46:	f8de 0000 	ldr.w	r0, [lr]
    1f4a:	4240      	negs	r0, r0
    1f4c:	f8ce 0000 	str.w	r0, [lr]
    1f50:	e6dc      	b.n	1d0c <vscan+0x1c>
    1f52:	2878      	cmp	r0, #120	; 0x78
    1f54:	f47f aeda 	bne.w	1d0c <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1f58:	f893 e000 	ldrb.w	lr, [r3]
    1f5c:	461e      	mov	r6, r3
    1f5e:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1f62:	2809      	cmp	r0, #9
    1f64:	f103 0301 	add.w	r3, r3, #1
    1f68:	d904      	bls.n	1f74 <vscan+0x284>
    1f6a:	f02e 0020 	bic.w	r0, lr, #32
    1f6e:	3841      	subs	r0, #65	; 0x41
    1f70:	2805      	cmp	r0, #5
    1f72:	d85a      	bhi.n	202a <vscan+0x33a>
    1f74:	f852 eb04 	ldr.w	lr, [r2], #4
    1f78:	3401      	adds	r4, #1
    1f7a:	f8ce 5000 	str.w	r5, [lr]
    1f7e:	f106 0809 	add.w	r8, r6, #9
    1f82:	f896 9000 	ldrb.w	r9, [r6]
    1f86:	4633      	mov	r3, r6
    1f88:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1f8c:	b2c0      	uxtb	r0, r0
    1f8e:	2809      	cmp	r0, #9
    1f90:	f106 0601 	add.w	r6, r6, #1
    1f94:	d96f      	bls.n	2076 <vscan+0x386>
    1f96:	f029 0020 	bic.w	r0, r9, #32
    1f9a:	3841      	subs	r0, #65	; 0x41
    1f9c:	2805      	cmp	r0, #5
    1f9e:	f63f aeb5 	bhi.w	1d0c <vscan+0x1c>
    1fa2:	4546      	cmp	r6, r8
    1fa4:	f43f aeb2 	beq.w	1d0c <vscan+0x1c>
    1fa8:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1fac:	2b05      	cmp	r3, #5
    1fae:	bf94      	ite	ls
    1fb0:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1fb4:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1fb8:	b2c0      	uxtb	r0, r0
    1fba:	f8de 3000 	ldr.w	r3, [lr]
    1fbe:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1fc2:	f8ce 0000 	str.w	r0, [lr]
    1fc6:	e7dc      	b.n	1f82 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1fc8:	2e00      	cmp	r6, #0
    1fca:	d196      	bne.n	1efa <vscan+0x20a>
    1fcc:	e6b1      	b.n	1d32 <vscan+0x42>
    1fce:	2000      	movs	r0, #0
    1fd0:	e7a6      	b.n	1f20 <vscan+0x230>
    1fd2:	f8de 3000 	ldr.w	r3, [lr]
    1fd6:	b2b6      	uxth	r6, r6
    1fd8:	437b      	muls	r3, r7
    1fda:	1b9e      	subs	r6, r3, r6
    1fdc:	f8ce 6000 	str.w	r6, [lr]
    1fe0:	e7a3      	b.n	1f2a <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1fe2:	2800      	cmp	r0, #0
    1fe4:	f43f aea5 	beq.w	1d32 <vscan+0x42>
    1fe8:	7818      	ldrb	r0, [r3, #0]
    1fea:	461e      	mov	r6, r3
    1fec:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1ff0:	f1be 0f09 	cmp.w	lr, #9
    1ff4:	f103 0301 	add.w	r3, r3, #1
    1ff8:	d8f3      	bhi.n	1fe2 <vscan+0x2f2>
    1ffa:	f852 eb04 	ldr.w	lr, [r2], #4
    1ffe:	3401      	adds	r4, #1
    2000:	f8ce 5000 	str.w	r5, [lr]
    2004:	7830      	ldrb	r0, [r6, #0]
    2006:	4633      	mov	r3, r6
    2008:	3830      	subs	r0, #48	; 0x30
    200a:	fa5f f880 	uxtb.w	r8, r0
    200e:	f1b8 0f09 	cmp.w	r8, #9
    2012:	f106 0601 	add.w	r6, r6, #1
    2016:	f63f ae79 	bhi.w	1d0c <vscan+0x1c>
    201a:	f8de 3000 	ldr.w	r3, [lr]
    201e:	b280      	uxth	r0, r0
    2020:	fb07 0003 	mla	r0, r7, r3, r0
    2024:	f8ce 0000 	str.w	r0, [lr]
    2028:	e7ec      	b.n	2004 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    202a:	f1be 0f00 	cmp.w	lr, #0
    202e:	d193      	bne.n	1f58 <vscan+0x268>
    2030:	e67f      	b.n	1d32 <vscan+0x42>
			if ((c = *buf++) == '\0')
    2032:	f813 0b01 	ldrb.w	r0, [r3], #1
    2036:	2800      	cmp	r0, #0
    2038:	f43f ae7b 	beq.w	1d32 <vscan+0x42>
			sap = va_arg (ap, char*);
    203c:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    2040:	3401      	adds	r4, #1
			*sap = c;
    2042:	7030      	strb	r0, [r6, #0]
			break;
    2044:	e662      	b.n	1d0c <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2046:	fa2c fe0e 	lsr.w	lr, ip, lr
    204a:	f01e 0f01 	tst.w	lr, #1
    204e:	f47f ae7a 	bne.w	1d46 <vscan+0x56>
    2052:	e687      	b.n	1d64 <vscan+0x74>
						*sap++ = *buf++;
    2054:	f80e 3b01 	strb.w	r3, [lr], #1
    2058:	e68a      	b.n	1d70 <vscan+0x80>
			while (isspace (*buf)) buf++;
    205a:	fa2c f000 	lsr.w	r0, ip, r0
    205e:	07c0      	lsls	r0, r0, #31
    2060:	f53f ae95 	bmi.w	1d8e <vscan+0x9e>
    2064:	e6a2      	b.n	1dac <vscan+0xbc>
		return 0;
    2066:	4604      	mov	r4, r0
    2068:	e663      	b.n	1d32 <vscan+0x42>
    206a:	460c      	mov	r4, r1
    206c:	e661      	b.n	1d32 <vscan+0x42>
		    case 'x': scanx (word); break;
    206e:	4546      	cmp	r6, r8
    2070:	f47f af31 	bne.w	1ed6 <vscan+0x1e6>
    2074:	e64a      	b.n	1d0c <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    2076:	4546      	cmp	r6, r8
    2078:	d19f      	bne.n	1fba <vscan+0x2ca>
    207a:	e647      	b.n	1d0c <vscan+0x1c>
    207c:	00800013 	addeq	r0, r0, r3, lsl r0

00002080 <NOROM_AONBatMonTemperatureGetDegC>:
    2080:	4b08      	ldr	r3, [pc, #32]	; (20a4 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    2082:	6818      	ldr	r0, [r3, #0]
    2084:	4b08      	ldr	r3, [pc, #32]	; (20a8 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    2086:	7819      	ldrb	r1, [r3, #0]
    2088:	4b08      	ldr	r3, [pc, #32]	; (20ac <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    208a:	681a      	ldr	r2, [r3, #0]
    208c:	f340 0310 	sbfx	r3, r0, #0, #17
    2090:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    2094:	b248      	sxtb	r0, r1
    2096:	4350      	muls	r0, r2
    2098:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    209c:	3080      	adds	r0, #128	; 0x80
    209e:	1200      	asrs	r0, r0, #8
    20a0:	4770      	bx	lr
    20a2:	bf00      	nop
    20a4:	40095030 	andmi	r5, r9, r0, lsr r0
    20a8:	5000130c 	andpl	r1, r0, ip, lsl #6
    20ac:	40095028 	andmi	r5, r9, r8, lsr #32

000020b0 <NOROM_AONRTCCurrent64BitValueGet>:
    20b0:	4b03      	ldr	r3, [pc, #12]	; (20c0 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    20b2:	4904      	ldr	r1, [pc, #16]	; (20c4 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    20b4:	681a      	ldr	r2, [r3, #0]
    20b6:	6808      	ldr	r0, [r1, #0]
    20b8:	6819      	ldr	r1, [r3, #0]
    20ba:	4291      	cmp	r1, r2
    20bc:	d1f8      	bne.n	20b0 <NOROM_AONRTCCurrent64BitValueGet>
    20be:	4770      	bx	lr
    20c0:	40092008 	andmi	r2, r9, r8
    20c4:	4009200c 	andmi	r2, r9, ip

000020c8 <NOROM_CPUcpsid>:
    20c8:	f3ef 8010 	mrs	r0, PRIMASK
    20cc:	b672      	cpsid	i
    20ce:	4770      	bx	lr

000020d0 <NOROM_CPUcpsie>:
    20d0:	f3ef 8010 	mrs	r0, PRIMASK
    20d4:	b662      	cpsie	i
    20d6:	4770      	bx	lr

000020d8 <TrimAfterColdResetWakeupFromShutDown>:
    20d8:	b538      	push	{r3, r4, r5, lr}
    20da:	4605      	mov	r5, r0
    20dc:	4b26      	ldr	r3, [pc, #152]	; (2178 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    20de:	2201      	movs	r2, #1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	4b26      	ldr	r3, [pc, #152]	; (217c <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d0fb      	beq.n	20e2 <TrimAfterColdResetWakeupFromShutDown+0xa>
    20ea:	4b25      	ldr	r3, [pc, #148]	; (2180 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    20ec:	22c0      	movs	r2, #192	; 0xc0
    20ee:	601a      	str	r2, [r3, #0]
    20f0:	4b24      	ldr	r3, [pc, #144]	; (2184 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	079b      	lsls	r3, r3, #30
    20f6:	bf5f      	itttt	pl
    20f8:	4b23      	ldrpl	r3, [pc, #140]	; (2188 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    20fa:	4a24      	ldrpl	r2, [pc, #144]	; (218c <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    20fc:	681b      	ldrpl	r3, [r3, #0]
    20fe:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    2102:	bf5c      	itt	pl
    2104:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    2108:	7013      	strbpl	r3, [r2, #0]
    210a:	4b21      	ldr	r3, [pc, #132]	; (2190 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    210c:	2200      	movs	r2, #0
    210e:	601a      	str	r2, [r3, #0]
    2110:	4b20      	ldr	r3, [pc, #128]	; (2194 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    2112:	681c      	ldr	r4, [r3, #0]
    2114:	4620      	mov	r0, r4
    2116:	f000 f8d9 	bl	22cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    211a:	4628      	mov	r0, r5
    211c:	4621      	mov	r1, r4
    211e:	f000 fa0d 	bl	253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    2122:	f240 221d 	movw	r2, #541	; 0x21d
    2126:	4b1c      	ldr	r3, [pc, #112]	; (2198 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	b29b      	uxth	r3, r3
    212c:	4293      	cmp	r3, r2
    212e:	d814      	bhi.n	215a <TrimAfterColdResetWakeupFromShutDown+0x82>
    2130:	4a1a      	ldr	r2, [pc, #104]	; (219c <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    2132:	6813      	ldr	r3, [r2, #0]
    2134:	6812      	ldr	r2, [r2, #0]
    2136:	f3c3 6303 	ubfx	r3, r3, #24, #4
    213a:	f3c2 4203 	ubfx	r2, r2, #16, #4
    213e:	b103      	cbz	r3, 2142 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    2140:	3b01      	subs	r3, #1
    2142:	1f91      	subs	r1, r2, #6
    2144:	2901      	cmp	r1, #1
    2146:	bf86      	itte	hi
    2148:	3202      	addhi	r2, #2
    214a:	f002 020f 	andhi.w	r2, r2, #15
    214e:	2207      	movls	r2, #7
    2150:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    2154:	4a12      	ldr	r2, [pc, #72]	; (21a0 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    2156:	b2db      	uxtb	r3, r3
    2158:	7013      	strb	r3, [r2, #0]
    215a:	4620      	mov	r0, r4
    215c:	f000 fabc 	bl	26d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    2160:	4b10      	ldr	r3, [pc, #64]	; (21a4 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    2162:	2002      	movs	r0, #2
    2164:	681b      	ldr	r3, [r3, #0]
    2166:	68db      	ldr	r3, [r3, #12]
    2168:	4798      	blx	r3
    216a:	4b05      	ldr	r3, [pc, #20]	; (2180 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    216c:	2240      	movs	r2, #64	; 0x40
    216e:	601a      	str	r2, [r3, #0]
    2170:	4b0d      	ldr	r3, [pc, #52]	; (21a8 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    2172:	2201      	movs	r2, #1
    2174:	601a      	str	r2, [r3, #0]
    2176:	bd38      	pop	{r3, r4, r5, pc}
    2178:	40091010 	andmi	r1, r9, r0, lsl r0
    217c:	43220294 			; <UNDEFINED> instruction: 0x43220294
    2180:	400c6000 	andmi	r6, ip, r0
    2184:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2188:	50003fac 	andpl	r3, r0, ip, lsr #31
    218c:	40086256 	andmi	r6, r8, r6, asr r2
    2190:	40091040 	andmi	r1, r9, r0, asr #32
    2194:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2198:	50001314 	andpl	r1, r0, r4, lsl r3
    219c:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    21a0:	40086002 	andmi	r6, r8, r2
    21a4:	100001a0 	andne	r0, r0, r0, lsr #3
    21a8:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000021ac <NOROM_SetupTrimDevice>:
    21ac:	b510      	push	{r4, lr}
    21ae:	4b1f      	ldr	r3, [pc, #124]	; (222c <NOROM_SetupTrimDevice+0x80>)
    21b0:	681c      	ldr	r4, [r3, #0]
    21b2:	1c63      	adds	r3, r4, #1
    21b4:	bf08      	it	eq
    21b6:	2400      	moveq	r4, #0
    21b8:	f000 fcde 	bl	2b78 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    21bc:	4b1c      	ldr	r3, [pc, #112]	; (2230 <NOROM_SetupTrimDevice+0x84>)
    21be:	2200      	movs	r2, #0
    21c0:	601a      	str	r2, [r3, #0]
    21c2:	4a1c      	ldr	r2, [pc, #112]	; (2234 <NOROM_SetupTrimDevice+0x88>)
    21c4:	2301      	movs	r3, #1
    21c6:	6013      	str	r3, [r2, #0]
    21c8:	4a1b      	ldr	r2, [pc, #108]	; (2238 <NOROM_SetupTrimDevice+0x8c>)
    21ca:	6013      	str	r3, [r2, #0]
    21cc:	f000 fa3e 	bl	264c <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    21d0:	4b1a      	ldr	r3, [pc, #104]	; (223c <NOROM_SetupTrimDevice+0x90>)
    21d2:	681b      	ldr	r3, [r3, #0]
    21d4:	b123      	cbz	r3, 21e0 <NOROM_SetupTrimDevice+0x34>
    21d6:	4b1a      	ldr	r3, [pc, #104]	; (2240 <NOROM_SetupTrimDevice+0x94>)
    21d8:	4620      	mov	r0, r4
    21da:	681b      	ldr	r3, [r3, #0]
    21dc:	f7ff ff7c 	bl	20d8 <TrimAfterColdResetWakeupFromShutDown>
    21e0:	4b18      	ldr	r3, [pc, #96]	; (2244 <NOROM_SetupTrimDevice+0x98>)
    21e2:	2200      	movs	r2, #0
    21e4:	601a      	str	r2, [r3, #0]
    21e6:	4a18      	ldr	r2, [pc, #96]	; (2248 <NOROM_SetupTrimDevice+0x9c>)
    21e8:	6813      	ldr	r3, [r2, #0]
    21ea:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    21ee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    21f2:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    21f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    21fa:	6013      	str	r3, [r2, #0]
    21fc:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    2200:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    2204:	6813      	ldr	r3, [r2, #0]
    2206:	f3c3 3301 	ubfx	r3, r3, #12, #2
    220a:	2b01      	cmp	r3, #1
    220c:	bf01      	itttt	eq
    220e:	6813      	ldreq	r3, [r2, #0]
    2210:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    2214:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2218:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    221c:	bf04      	itt	eq
    221e:	6011      	streq	r1, [r2, #0]
    2220:	6013      	streq	r3, [r2, #0]
    2222:	4b0a      	ldr	r3, [pc, #40]	; (224c <NOROM_SetupTrimDevice+0xa0>)
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	2b00      	cmp	r3, #0
    2228:	d1fb      	bne.n	2222 <NOROM_SetupTrimDevice+0x76>
    222a:	bd10      	pop	{r4, pc}
    222c:	5000131c 	andpl	r1, r0, ip, lsl r3
    2230:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    2234:	400c605c 	andmi	r6, ip, ip, asr r0
    2238:	43042208 	movwmi	r2, #16904	; 0x4208
    223c:	43280180 			; <UNDEFINED> instruction: 0x43280180
    2240:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    2244:	4008218c 	andmi	r2, r8, ip, lsl #3
    2248:	40032048 	andmi	r2, r3, r8, asr #32
    224c:	4268000c 	rsbmi	r0, r8, #12

00002250 <NOROM_SetupSetVddrLevel>:
    2250:	b530      	push	{r4, r5, lr}
    2252:	4b19      	ldr	r3, [pc, #100]	; (22b8 <NOROM_SetupSetVddrLevel+0x68>)
    2254:	681a      	ldr	r2, [r3, #0]
    2256:	4b19      	ldr	r3, [pc, #100]	; (22bc <NOROM_SetupSetVddrLevel+0x6c>)
    2258:	f3c2 6204 	ubfx	r2, r2, #24, #5
    225c:	781b      	ldrb	r3, [r3, #0]
    225e:	2a15      	cmp	r2, #21
    2260:	f003 031f 	and.w	r3, r3, #31
    2264:	bf88      	it	hi
    2266:	3a20      	subhi	r2, #32
    2268:	2b15      	cmp	r3, #21
    226a:	bf88      	it	hi
    226c:	3b20      	subhi	r3, #32
    226e:	4293      	cmp	r3, r2
    2270:	d020      	beq.n	22b4 <NOROM_SetupSetVddrLevel+0x64>
    2272:	4913      	ldr	r1, [pc, #76]	; (22c0 <NOROM_SetupSetVddrLevel+0x70>)
    2274:	2000      	movs	r0, #0
    2276:	6008      	str	r0, [r1, #0]
    2278:	4608      	mov	r0, r1
    227a:	1ad1      	subs	r1, r2, r3
    227c:	2902      	cmp	r1, #2
    227e:	dc05      	bgt.n	228c <NOROM_SetupSetVddrLevel+0x3c>
    2280:	f06f 0401 	mvn.w	r4, #1
    2284:	42a1      	cmp	r1, r4
    2286:	bfb8      	it	lt
    2288:	4621      	movlt	r1, r4
    228a:	e000      	b.n	228e <NOROM_SetupSetVddrLevel+0x3e>
    228c:	2102      	movs	r1, #2
    228e:	440b      	add	r3, r1
    2290:	490c      	ldr	r1, [pc, #48]	; (22c4 <NOROM_SetupSetVddrLevel+0x74>)
    2292:	4d0d      	ldr	r5, [pc, #52]	; (22c8 <NOROM_SetupSetVddrLevel+0x78>)
    2294:	680c      	ldr	r4, [r1, #0]
    2296:	f003 041f 	and.w	r4, r3, #31
    229a:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    229e:	802c      	strh	r4, [r5, #0]
    22a0:	4293      	cmp	r3, r2
    22a2:	f04f 0401 	mov.w	r4, #1
    22a6:	600c      	str	r4, [r1, #0]
    22a8:	d1e7      	bne.n	227a <NOROM_SetupSetVddrLevel+0x2a>
    22aa:	680b      	ldr	r3, [r1, #0]
    22ac:	600c      	str	r4, [r1, #0]
    22ae:	680b      	ldr	r3, [r1, #0]
    22b0:	6004      	str	r4, [r0, #0]
    22b2:	680b      	ldr	r3, [r1, #0]
    22b4:	bd30      	pop	{r4, r5, pc}
    22b6:	bf00      	nop
    22b8:	50001388 	andpl	r1, r0, r8, lsl #7
    22bc:	40086206 	andmi	r6, r8, r6, lsl #4
    22c0:	43200098 			; <UNDEFINED> instruction: 0x43200098
    22c4:	4009202c 	andmi	r2, r9, ip, lsr #32
    22c8:	4008626c 	andmi	r6, r8, ip, ror #4

000022cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    22cc:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    22d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    22d4:	b510      	push	{r4, lr}
    22d6:	4604      	mov	r4, r0
    22d8:	d10f      	bne.n	22fa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    22da:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    22de:	4a1e      	ldr	r2, [pc, #120]	; (2358 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    22e0:	2380      	movs	r3, #128	; 0x80
    22e2:	7013      	strb	r3, [r2, #0]
    22e4:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    22e8:	f802 3c10 	strb.w	r3, [r2, #-16]
    22ec:	f7ff ffb0 	bl	2250 <NOROM_SetupSetVddrLevel>
    22f0:	4b1a      	ldr	r3, [pc, #104]	; (235c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    22f2:	681b      	ldr	r3, [r3, #0]
    22f4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    22f8:	e003      	b.n	2302 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    22fa:	4b19      	ldr	r3, [pc, #100]	; (2360 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2302:	2b15      	cmp	r3, #21
    2304:	bf88      	it	hi
    2306:	3b20      	subhi	r3, #32
    2308:	eb03 7324 	add.w	r3, r3, r4, asr #28
    230c:	3301      	adds	r3, #1
    230e:	2b15      	cmp	r3, #21
    2310:	dc05      	bgt.n	231e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    2312:	f06f 0209 	mvn.w	r2, #9
    2316:	4293      	cmp	r3, r2
    2318:	bfb8      	it	lt
    231a:	4613      	movlt	r3, r2
    231c:	e000      	b.n	2320 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    231e:	2315      	movs	r3, #21
    2320:	4a10      	ldr	r2, [pc, #64]	; (2364 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    2322:	f003 031f 	and.w	r3, r3, #31
    2326:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    232a:	8013      	strh	r3, [r2, #0]
    232c:	4b0e      	ldr	r3, [pc, #56]	; (2368 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	f013 0302 	ands.w	r3, r3, #2
    2334:	bf0a      	itet	eq
    2336:	4a0d      	ldreq	r2, [pc, #52]	; (236c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    2338:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    233c:	6013      	streq	r3, [r2, #0]
    233e:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    2342:	4a0b      	ldr	r2, [pc, #44]	; (2370 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    2344:	f083 0301 	eor.w	r3, r3, #1
    2348:	6013      	str	r3, [r2, #0]
    234a:	f3c4 6480 	ubfx	r4, r4, #26, #1
    234e:	4b09      	ldr	r3, [pc, #36]	; (2374 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    2350:	f084 0401 	eor.w	r4, r4, #1
    2354:	601c      	str	r4, [r3, #0]
    2356:	bd10      	pop	{r4, pc}
    2358:	40086225 	andmi	r6, r8, r5, lsr #4
    235c:	50001388 	andpl	r1, r0, r8, lsl #7
    2360:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2364:	4008626e 	andmi	r6, r8, lr, ror #4
    2368:	40090000 	andmi	r0, r9, r0
    236c:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    2370:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    2374:	43200008 			; <UNDEFINED> instruction: 0x43200008

00002378 <NOROM_SetupGetTrimForAnabypassValue1>:
    2378:	4b15      	ldr	r3, [pc, #84]	; (23d0 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    237a:	0381      	lsls	r1, r0, #14
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	f3c3 6283 	ubfx	r2, r3, #26, #4
    2382:	f3c3 238f 	ubfx	r3, r3, #10, #16
    2386:	d41f      	bmi.n	23c8 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2388:	f340 2007 	sbfx	r0, r0, #8, #8
    238c:	2800      	cmp	r0, #0
    238e:	da19      	bge.n	23c4 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    2390:	085b      	lsrs	r3, r3, #1
    2392:	d105      	bne.n	23a0 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    2394:	0852      	lsrs	r2, r2, #1
    2396:	bf06      	itte	eq
    2398:	2301      	moveq	r3, #1
    239a:	461a      	moveq	r2, r3
    239c:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    23a0:	3001      	adds	r0, #1
    23a2:	e7f3      	b.n	238c <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    23a4:	005b      	lsls	r3, r3, #1
    23a6:	f043 0301 	orr.w	r3, r3, #1
    23aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    23ae:	d308      	bcc.n	23c2 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    23b0:	0052      	lsls	r2, r2, #1
    23b2:	f042 0201 	orr.w	r2, r2, #1
    23b6:	2a0f      	cmp	r2, #15
    23b8:	bf86      	itte	hi
    23ba:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    23be:	220f      	movhi	r2, #15
    23c0:	2301      	movls	r3, #1
    23c2:	3801      	subs	r0, #1
    23c4:	2800      	cmp	r0, #0
    23c6:	d1ed      	bne.n	23a4 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    23c8:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    23cc:	4770      	bx	lr
    23ce:	bf00      	nop
    23d0:	50001350 	andpl	r1, r0, r0, asr r3

000023d4 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    23d4:	4a04      	ldr	r2, [pc, #16]	; (23e8 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    23d6:	6813      	ldr	r3, [r2, #0]
    23d8:	6810      	ldr	r0, [r2, #0]
    23da:	f3c3 0387 	ubfx	r3, r3, #2, #8
    23de:	f000 0003 	and.w	r0, r0, #3
    23e2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    23e6:	4770      	bx	lr
    23e8:	50001350 	andpl	r1, r0, r0, asr r3

000023ec <NOROM_SetupGetTrimForAmpcompTh2>:
    23ec:	4b02      	ldr	r3, [pc, #8]	; (23f8 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    23ee:	6818      	ldr	r0, [r3, #0]
    23f0:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop
    23f8:	50001374 	andpl	r1, r0, r4, ror r3

000023fc <NOROM_SetupGetTrimForAmpcompTh1>:
    23fc:	4b03      	ldr	r3, [pc, #12]	; (240c <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    23fe:	6818      	ldr	r0, [r3, #0]
    2400:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2404:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2408:	4770      	bx	lr
    240a:	bf00      	nop
    240c:	50001370 	andpl	r1, r0, r0, ror r3

00002410 <NOROM_SetupGetTrimForAmpcompCtrl>:
    2410:	b570      	push	{r4, r5, r6, lr}
    2412:	4b15      	ldr	r3, [pc, #84]	; (2468 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    2414:	4915      	ldr	r1, [pc, #84]	; (246c <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    2416:	681c      	ldr	r4, [r3, #0]
    2418:	6809      	ldr	r1, [r1, #0]
    241a:	f3c4 5203 	ubfx	r2, r4, #20, #4
    241e:	f011 0501 	ands.w	r5, r1, #1
    2422:	f3c4 4303 	ubfx	r3, r4, #16, #4
    2426:	d113      	bne.n	2450 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2428:	4911      	ldr	r1, [pc, #68]	; (2470 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    242a:	6809      	ldr	r1, [r1, #0]
    242c:	f341 2603 	sbfx	r6, r1, #8, #4
    2430:	18b2      	adds	r2, r6, r2
    2432:	d403      	bmi.n	243c <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2434:	2a0f      	cmp	r2, #15
    2436:	bfa8      	it	ge
    2438:	220f      	movge	r2, #15
    243a:	e000      	b.n	243e <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    243c:	462a      	mov	r2, r5
    243e:	f341 3103 	sbfx	r1, r1, #12, #4
    2442:	18cb      	adds	r3, r1, r3
    2444:	d403      	bmi.n	244e <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    2446:	2b0f      	cmp	r3, #15
    2448:	bfa8      	it	ge
    244a:	230f      	movge	r3, #15
    244c:	e000      	b.n	2450 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    244e:	2300      	movs	r3, #0
    2450:	b2a1      	uxth	r1, r4
    2452:	2821      	cmp	r0, #33	; 0x21
    2454:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    2458:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    245c:	bf84      	itt	hi
    245e:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    2462:	4323      	orrhi	r3, r4
    2464:	4618      	mov	r0, r3
    2466:	bd70      	pop	{r4, r5, r6, pc}
    2468:	50001378 	andpl	r1, r0, r8, ror r3
    246c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2470:	50003fac 	andpl	r3, r0, ip, lsr #31

00002474 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    2474:	281f      	cmp	r0, #31
    2476:	bf83      	ittte	hi
    2478:	4b02      	ldrhi	r3, [pc, #8]	; (2484 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    247a:	6818      	ldrhi	r0, [r3, #0]
    247c:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    2480:	2000      	movls	r0, #0
    2482:	4770      	bx	lr
    2484:	50001398 	mulpl	r0, r8, r3

00002488 <NOROM_SetupGetTrimForAdcShModeEn>:
    2488:	2821      	cmp	r0, #33	; 0x21
    248a:	bf83      	ittte	hi
    248c:	4b02      	ldrhi	r3, [pc, #8]	; (2498 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    248e:	6818      	ldrhi	r0, [r3, #0]
    2490:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    2494:	2001      	movls	r0, #1
    2496:	4770      	bx	lr
    2498:	5000138c 	andpl	r1, r0, ip, lsl #7

0000249c <NOROM_SetupGetTrimForAdcShVbufEn>:
    249c:	2821      	cmp	r0, #33	; 0x21
    249e:	bf83      	ittte	hi
    24a0:	4b02      	ldrhi	r3, [pc, #8]	; (24ac <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    24a2:	6818      	ldrhi	r0, [r3, #0]
    24a4:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    24a8:	2001      	movls	r0, #1
    24aa:	4770      	bx	lr
    24ac:	5000138c 	andpl	r1, r0, ip, lsl #7

000024b0 <NOROM_SetupGetTrimForXoscHfCtl>:
    24b0:	281f      	cmp	r0, #31
    24b2:	bf81      	itttt	hi
    24b4:	4b07      	ldrhi	r3, [pc, #28]	; (24d4 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    24b6:	681b      	ldrhi	r3, [r3, #0]
    24b8:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    24bc:	0080      	lslhi	r0, r0, #2
    24be:	bf81      	itttt	hi
    24c0:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    24c4:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    24c8:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    24cc:	4318      	orrhi	r0, r3
    24ce:	bf98      	it	ls
    24d0:	2000      	movls	r0, #0
    24d2:	4770      	bx	lr
    24d4:	50001398 	mulpl	r0, r8, r3

000024d8 <NOROM_SetupGetTrimForXoscHfFastStart>:
    24d8:	4b02      	ldr	r3, [pc, #8]	; (24e4 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    24da:	6818      	ldr	r0, [r3, #0]
    24dc:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    24e0:	4770      	bx	lr
    24e2:	bf00      	nop
    24e4:	5000138c 	andpl	r1, r0, ip, lsl #7

000024e8 <NOROM_SetupGetTrimForRadcExtCfg>:
    24e8:	281f      	cmp	r0, #31
    24ea:	bf81      	itttt	hi
    24ec:	4b07      	ldrhi	r3, [pc, #28]	; (250c <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    24ee:	681b      	ldrhi	r3, [r3, #0]
    24f0:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    24f4:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    24f8:	bf81      	itttt	hi
    24fa:	0400      	lslhi	r0, r0, #16
    24fc:	031b      	lslhi	r3, r3, #12
    24fe:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    2502:	b29b      	uxthhi	r3, r3
    2504:	bf8c      	ite	hi
    2506:	4318      	orrhi	r0, r3
    2508:	4801      	ldrls	r0, [pc, #4]	; (2510 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    250a:	4770      	bx	lr
    250c:	50001398 	mulpl	r0, r8, r3
    2510:	403f8000 	eorsmi	r8, pc, r0

00002514 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    2514:	2821      	cmp	r0, #33	; 0x21
    2516:	bf83      	ittte	hi
    2518:	4b02      	ldrhi	r3, [pc, #8]	; (2524 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    251a:	6818      	ldrhi	r0, [r3, #0]
    251c:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    2520:	2000      	movls	r0, #0
    2522:	4770      	bx	lr
    2524:	5000138c 	andpl	r1, r0, ip, lsl #7

00002528 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    2528:	2821      	cmp	r0, #33	; 0x21
    252a:	bf83      	ittte	hi
    252c:	4b02      	ldrhi	r3, [pc, #8]	; (2538 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    252e:	6818      	ldrhi	r0, [r3, #0]
    2530:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    2534:	2000      	movls	r0, #0
    2536:	4770      	bx	lr
    2538:	5000138c 	andpl	r1, r0, ip, lsl #7

0000253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    253c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    253e:	4605      	mov	r5, r0
    2540:	4608      	mov	r0, r1
    2542:	f7ff ff19 	bl	2378 <NOROM_SetupGetTrimForAnabypassValue1>
    2546:	4c39      	ldr	r4, [pc, #228]	; (262c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    2548:	4602      	mov	r2, r0
    254a:	2118      	movs	r1, #24
    254c:	4620      	mov	r0, r4
    254e:	f000 fb33 	bl	2bb8 <NOROM_DDI32RegWrite>
    2552:	f7ff ff3f 	bl	23d4 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    2556:	4b36      	ldr	r3, [pc, #216]	; (2630 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    2558:	b280      	uxth	r0, r0
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	9000      	str	r0, [sp, #0]
    255e:	685e      	ldr	r6, [r3, #4]
    2560:	4620      	mov	r0, r4
    2562:	212c      	movs	r1, #44	; 0x2c
    2564:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2568:	2300      	movs	r3, #0
    256a:	47b0      	blx	r6
    256c:	4b31      	ldr	r3, [pc, #196]	; (2634 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    256e:	4620      	mov	r0, r4
    2570:	681a      	ldr	r2, [r3, #0]
    2572:	211c      	movs	r1, #28
    2574:	f3c2 020d 	ubfx	r2, r2, #0, #14
    2578:	f000 fb1e 	bl	2bb8 <NOROM_DDI32RegWrite>
    257c:	f7ff ff36 	bl	23ec <NOROM_SetupGetTrimForAmpcompTh2>
    2580:	2114      	movs	r1, #20
    2582:	4602      	mov	r2, r0
    2584:	4620      	mov	r0, r4
    2586:	f000 fb17 	bl	2bb8 <NOROM_DDI32RegWrite>
    258a:	f7ff ff37 	bl	23fc <NOROM_SetupGetTrimForAmpcompTh1>
    258e:	2110      	movs	r1, #16
    2590:	4602      	mov	r2, r0
    2592:	4620      	mov	r0, r4
    2594:	f000 fb10 	bl	2bb8 <NOROM_DDI32RegWrite>
    2598:	4628      	mov	r0, r5
    259a:	f7ff ff39 	bl	2410 <NOROM_SetupGetTrimForAmpcompCtrl>
    259e:	210c      	movs	r1, #12
    25a0:	4602      	mov	r2, r0
    25a2:	4620      	mov	r0, r4
    25a4:	f000 fb08 	bl	2bb8 <NOROM_DDI32RegWrite>
    25a8:	4628      	mov	r0, r5
    25aa:	f7ff ff6d 	bl	2488 <NOROM_SetupGetTrimForAdcShModeEn>
    25ae:	0040      	lsls	r0, r0, #1
    25b0:	4e21      	ldr	r6, [pc, #132]	; (2638 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    25b2:	f040 0020 	orr.w	r0, r0, #32
    25b6:	b2c0      	uxtb	r0, r0
    25b8:	7030      	strb	r0, [r6, #0]
    25ba:	4628      	mov	r0, r5
    25bc:	f7ff ff6e 	bl	249c <NOROM_SetupGetTrimForAdcShVbufEn>
    25c0:	f040 0010 	orr.w	r0, r0, #16
    25c4:	b2c0      	uxtb	r0, r0
    25c6:	7030      	strb	r0, [r6, #0]
    25c8:	4628      	mov	r0, r5
    25ca:	f7ff ff71 	bl	24b0 <NOROM_SetupGetTrimForXoscHfCtl>
    25ce:	2128      	movs	r1, #40	; 0x28
    25d0:	4602      	mov	r2, r0
    25d2:	4620      	mov	r0, r4
    25d4:	f000 faf0 	bl	2bb8 <NOROM_DDI32RegWrite>
    25d8:	4628      	mov	r0, r5
    25da:	f7ff ff4b 	bl	2474 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    25de:	0040      	lsls	r0, r0, #1
    25e0:	4b16      	ldr	r3, [pc, #88]	; (263c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    25e2:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    25e6:	b2c0      	uxtb	r0, r0
    25e8:	7018      	strb	r0, [r3, #0]
    25ea:	4628      	mov	r0, r5
    25ec:	f7ff ff92 	bl	2514 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    25f0:	00c0      	lsls	r0, r0, #3
    25f2:	4b13      	ldr	r3, [pc, #76]	; (2640 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    25f4:	f060 007f 	orn	r0, r0, #127	; 0x7f
    25f8:	b2c0      	uxtb	r0, r0
    25fa:	7018      	strb	r0, [r3, #0]
    25fc:	4628      	mov	r0, r5
    25fe:	f7ff ff93 	bl	2528 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    2602:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    2606:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    260a:	4b0e      	ldr	r3, [pc, #56]	; (2644 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    260c:	b280      	uxth	r0, r0
    260e:	8018      	strh	r0, [r3, #0]
    2610:	4628      	mov	r0, r5
    2612:	f7ff ff69 	bl	24e8 <NOROM_SetupGetTrimForRadcExtCfg>
    2616:	2108      	movs	r1, #8
    2618:	4602      	mov	r2, r0
    261a:	4620      	mov	r0, r4
    261c:	f000 facc 	bl	2bb8 <NOROM_DDI32RegWrite>
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    2622:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2626:	601a      	str	r2, [r3, #0]
    2628:	b002      	add	sp, #8
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	400ca000 	andmi	sl, ip, r0
    2630:	100001a4 	andne	r0, r0, r4, lsr #3
    2634:	5000137c 	andpl	r1, r0, ip, ror r3
    2638:	400ca149 	andmi	sl, ip, r9, asr #2
    263c:	400ca14c 	andmi	sl, ip, ip, asr #2
    2640:	400ca141 	andmi	sl, ip, r1, asr #2
    2644:	400ca1dc 	ldrdmi	sl, [ip], -ip
    2648:	400ca040 	andmi	sl, ip, r0, asr #32

0000264c <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    264c:	b530      	push	{r4, r5, lr}
    264e:	4b14      	ldr	r3, [pc, #80]	; (26a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d1fb      	bne.n	264e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    2656:	4a13      	ldr	r2, [pc, #76]	; (26a4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    2658:	4913      	ldr	r1, [pc, #76]	; (26a8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    265a:	6813      	ldr	r3, [r2, #0]
    265c:	6809      	ldr	r1, [r1, #0]
    265e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    2662:	f023 0307 	bic.w	r3, r3, #7
    2666:	f011 0f04 	tst.w	r1, #4
    266a:	4614      	mov	r4, r2
    266c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2670:	d003      	beq.n	267a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    2672:	f043 0305 	orr.w	r3, r3, #5
    2676:	6013      	str	r3, [r2, #0]
    2678:	bd30      	pop	{r4, r5, pc}
    267a:	490c      	ldr	r1, [pc, #48]	; (26ac <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    267c:	f043 0004 	orr.w	r0, r3, #4
    2680:	680d      	ldr	r5, [r1, #0]
    2682:	07ad      	lsls	r5, r5, #30
    2684:	d009      	beq.n	269a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    2686:	f043 0307 	orr.w	r3, r3, #7
    268a:	6013      	str	r3, [r2, #0]
    268c:	680b      	ldr	r3, [r1, #0]
    268e:	f003 0303 	and.w	r3, r3, #3
    2692:	2b03      	cmp	r3, #3
    2694:	d1fa      	bne.n	268c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    2696:	6020      	str	r0, [r4, #0]
    2698:	bd30      	pop	{r4, r5, pc}
    269a:	6010      	str	r0, [r2, #0]
    269c:	bd30      	pop	{r4, r5, pc}
    269e:	bf00      	nop
    26a0:	4268000c 	rsbmi	r0, r8, #12
    26a4:	40034004 	andmi	r4, r3, r4
    26a8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    26ac:	40034000 	andmi	r4, r3, r0

000026b0 <NOROM_SetupSetAonRtcSubSecInc>:
    26b0:	4b07      	ldr	r3, [pc, #28]	; (26d0 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    26b2:	b282      	uxth	r2, r0
    26b4:	f3c0 4007 	ubfx	r0, r0, #16, #8
    26b8:	601a      	str	r2, [r3, #0]
    26ba:	6058      	str	r0, [r3, #4]
    26bc:	2201      	movs	r2, #1
    26be:	3308      	adds	r3, #8
    26c0:	601a      	str	r2, [r3, #0]
    26c2:	4a04      	ldr	r2, [pc, #16]	; (26d4 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    26c4:	6812      	ldr	r2, [r2, #0]
    26c6:	2a00      	cmp	r2, #0
    26c8:	d0fb      	beq.n	26c2 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    26ca:	2200      	movs	r2, #0
    26cc:	601a      	str	r2, [r3, #0]
    26ce:	4770      	bx	lr
    26d0:	400c603c 	andmi	r6, ip, ip, lsr r0
    26d4:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000026d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    26d8:	f3c0 4381 	ubfx	r3, r0, #18, #2
    26dc:	2b01      	cmp	r3, #1
    26de:	b510      	push	{r4, lr}
    26e0:	4604      	mov	r4, r0
    26e2:	d002      	beq.n	26ea <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    26e4:	2b02      	cmp	r3, #2
    26e6:	d02f      	beq.n	2748 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    26e8:	e02a      	b.n	2740 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    26ea:	4b42      	ldr	r3, [pc, #264]	; (27f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	039a      	lsls	r2, r3, #14
    26f0:	d426      	bmi.n	2740 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    26f2:	4a41      	ldr	r2, [pc, #260]	; (27f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    26f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    26f8:	6011      	str	r1, [r2, #0]
    26fa:	4940      	ldr	r1, [pc, #256]	; (27fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    26fc:	f3c3 3003 	ubfx	r0, r3, #12, #4
    2700:	680a      	ldr	r2, [r1, #0]
    2702:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    2706:	4302      	orrs	r2, r0
    2708:	f3c3 4000 	ubfx	r0, r3, #16, #1
    270c:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    2710:	600a      	str	r2, [r1, #0]
    2712:	f851 2c01 	ldr.w	r2, [r1, #-1]
    2716:	f3c3 2003 	ubfx	r0, r3, #8, #4
    271a:	f022 020f 	bic.w	r2, r2, #15
    271e:	4302      	orrs	r2, r0
    2720:	f851 0c01 	ldr.w	r0, [r1, #-1]
    2724:	f841 2c01 	str.w	r2, [r1, #-1]
    2728:	f851 2c02 	ldr.w	r2, [r1, #-2]
    272c:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    2730:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    2734:	4313      	orrs	r3, r2
    2736:	f851 2c02 	ldr.w	r2, [r1, #-2]
    273a:	f841 3c02 	str.w	r3, [r1, #-2]
    273e:	e003      	b.n	2748 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    2740:	4b2d      	ldr	r3, [pc, #180]	; (27f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    2742:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2746:	601a      	str	r2, [r3, #0]
    2748:	4b2d      	ldr	r3, [pc, #180]	; (2800 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	071b      	lsls	r3, r3, #28
    274e:	bf5e      	ittt	pl
    2750:	4b2c      	ldrpl	r3, [pc, #176]	; (2804 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    2752:	2240      	movpl	r2, #64	; 0x40
    2754:	601a      	strpl	r2, [r3, #0]
    2756:	4b2c      	ldr	r3, [pc, #176]	; (2808 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    2758:	f44f 7200 	mov.w	r2, #512	; 0x200
    275c:	601a      	str	r2, [r3, #0]
    275e:	f7ff febb 	bl	24d8 <NOROM_SetupGetTrimForXoscHfFastStart>
    2762:	4b2a      	ldr	r3, [pc, #168]	; (280c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    2764:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    2768:	b2c0      	uxtb	r0, r0
    276a:	7018      	strb	r0, [r3, #0]
    276c:	f3c4 5081 	ubfx	r0, r4, #22, #2
    2770:	2801      	cmp	r0, #1
    2772:	d00b      	beq.n	278c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    2774:	d302      	bcc.n	277c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    2776:	2802      	cmp	r0, #2
    2778:	d026      	beq.n	27c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    277a:	e028      	b.n	27ce <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    277c:	2004      	movs	r0, #4
    277e:	2101      	movs	r1, #1
    2780:	f000 fa1e 	bl	2bc0 <NOROM_OSCClockSourceSet>
    2784:	4822      	ldr	r0, [pc, #136]	; (2810 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    2786:	f7ff ff93 	bl	26b0 <NOROM_SetupSetAonRtcSubSecInc>
    278a:	e024      	b.n	27d6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    278c:	f000 fa46 	bl	2c1c <NOROM_OSCClockSourceGet>
    2790:	4604      	mov	r4, r0
    2792:	2004      	movs	r0, #4
    2794:	4621      	mov	r1, r4
    2796:	f000 fa13 	bl	2bc0 <NOROM_OSCClockSourceSet>
    279a:	2004      	movs	r0, #4
    279c:	f000 fa3e 	bl	2c1c <NOROM_OSCClockSourceGet>
    27a0:	42a0      	cmp	r0, r4
    27a2:	d1fa      	bne.n	279a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    27a4:	4b1b      	ldr	r3, [pc, #108]	; (2814 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    27a6:	681c      	ldr	r4, [r3, #0]
    27a8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    27ac:	f7ff ff80 	bl	26b0 <NOROM_SetupSetAonRtcSubSecInc>
    27b0:	4b19      	ldr	r3, [pc, #100]	; (2818 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    27b2:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    27b6:	681b      	ldr	r3, [r3, #0]
    27b8:	0e20      	lsrs	r0, r4, #24
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	2107      	movs	r1, #7
    27be:	4798      	blx	r3
    27c0:	4b0d      	ldr	r3, [pc, #52]	; (27f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    27c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    27c6:	601a      	str	r2, [r3, #0]
    27c8:	2004      	movs	r0, #4
    27ca:	2103      	movs	r1, #3
    27cc:	e001      	b.n	27d2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    27ce:	2004      	movs	r0, #4
    27d0:	2102      	movs	r1, #2
    27d2:	f000 f9f5 	bl	2bc0 <NOROM_OSCClockSourceSet>
    27d6:	4b11      	ldr	r3, [pc, #68]	; (281c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    27d8:	4a11      	ldr	r2, [pc, #68]	; (2820 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    27e0:	7013      	strb	r3, [r2, #0]
    27e2:	f647 0218 	movw	r2, #30744	; 0x7818
    27e6:	4b0f      	ldr	r3, [pc, #60]	; (2824 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    27e8:	801a      	strh	r2, [r3, #0]
    27ea:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    27ee:	3b44      	subs	r3, #68	; 0x44
    27f0:	681b      	ldr	r3, [r3, #0]
    27f2:	bd10      	pop	{r4, pc}
    27f4:	5000138c 	andpl	r1, r0, ip, lsl #7
    27f8:	400ca040 	andmi	sl, ip, r0, asr #32
    27fc:	4008600c 	andmi	r6, r8, ip
    2800:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2804:	400ca068 	andmi	sl, ip, r8, rrx
    2808:	400ca080 	andmi	sl, ip, r0, lsl #1
    280c:	400ca108 	andmi	sl, ip, r8, lsl #2
    2810:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    2814:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2818:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    281c:	5000136c 	andpl	r1, r0, ip, ror #6
    2820:	400cb00b 	andmi	fp, ip, fp
    2824:	400cb070 	andmi	fp, ip, r0, ror r0

00002828 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    2828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    282c:	4b77      	ldr	r3, [pc, #476]	; (2a0c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    282e:	4607      	mov	r7, r0
    2830:	681b      	ldr	r3, [r3, #0]
    2832:	4e77      	ldr	r6, [pc, #476]	; (2a10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2834:	f013 0f02 	tst.w	r3, #2
    2838:	d004      	beq.n	2844 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    283a:	2308      	movs	r3, #8
    283c:	71b3      	strb	r3, [r6, #6]
    283e:	4a75      	ldr	r2, [pc, #468]	; (2a14 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    2840:	4b75      	ldr	r3, [pc, #468]	; (2a18 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    2842:	e0df      	b.n	2a04 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    2844:	f7ff fc1c 	bl	2080 <NOROM_AONBatMonTemperatureGetDegC>
    2848:	4b74      	ldr	r3, [pc, #464]	; (2a1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    284a:	681d      	ldr	r5, [r3, #0]
    284c:	172a      	asrs	r2, r5, #28
    284e:	02ac      	lsls	r4, r5, #10
    2850:	f102 0101 	add.w	r1, r2, #1
    2854:	d408      	bmi.n	2868 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    2856:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    285a:	10db      	asrs	r3, r3, #3
    285c:	2b08      	cmp	r3, #8
    285e:	bfa8      	it	ge
    2860:	2308      	movge	r3, #8
    2862:	4299      	cmp	r1, r3
    2864:	bfb8      	it	lt
    2866:	4619      	movlt	r1, r3
    2868:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2870:	d10a      	bne.n	2888 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    2872:	4b6b      	ldr	r3, [pc, #428]	; (2a20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    2874:	681a      	ldr	r2, [r3, #0]
    2876:	681b      	ldr	r3, [r3, #0]
    2878:	f3c2 2204 	ubfx	r2, r2, #8, #5
    287c:	2a15      	cmp	r2, #21
    287e:	bf88      	it	hi
    2880:	3a20      	subhi	r2, #32
    2882:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2886:	e00a      	b.n	289e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2888:	4b66      	ldr	r3, [pc, #408]	; (2a24 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    288a:	681a      	ldr	r2, [r3, #0]
    288c:	4b66      	ldr	r3, [pc, #408]	; (2a28 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    288e:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2892:	681b      	ldr	r3, [r3, #0]
    2894:	2a15      	cmp	r2, #21
    2896:	bf88      	it	hi
    2898:	3a20      	subhi	r2, #32
    289a:	f3c3 4304 	ubfx	r3, r3, #16, #5
    289e:	2b15      	cmp	r3, #21
    28a0:	440a      	add	r2, r1
    28a2:	bf88      	it	hi
    28a4:	3b20      	subhi	r3, #32
    28a6:	2a15      	cmp	r2, #21
    28a8:	dc05      	bgt.n	28b6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    28aa:	f06f 0109 	mvn.w	r1, #9
    28ae:	428a      	cmp	r2, r1
    28b0:	bfb8      	it	lt
    28b2:	460a      	movlt	r2, r1
    28b4:	e000      	b.n	28b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    28b6:	2215      	movs	r2, #21
    28b8:	4c5c      	ldr	r4, [pc, #368]	; (2a2c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    28ba:	f002 011f 	and.w	r1, r2, #31
    28be:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    28c2:	8021      	strh	r1, [r4, #0]
    28c4:	495a      	ldr	r1, [pc, #360]	; (2a30 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    28c6:	6809      	ldr	r1, [r1, #0]
    28c8:	f011 0403 	ands.w	r4, r1, #3
    28cc:	bf18      	it	ne
    28ce:	2401      	movne	r4, #1
    28d0:	0749      	lsls	r1, r1, #29
    28d2:	bf48      	it	mi
    28d4:	f044 0402 	orrmi.w	r4, r4, #2
    28d8:	b10f      	cbz	r7, 28de <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    28da:	f044 0404 	orr.w	r4, r4, #4
    28de:	f996 1007 	ldrsb.w	r1, [r6, #7]
    28e2:	1a41      	subs	r1, r0, r1
    28e4:	2904      	cmp	r1, #4
    28e6:	dc03      	bgt.n	28f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    28e8:	4949      	ldr	r1, [pc, #292]	; (2a10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    28ea:	7989      	ldrb	r1, [r1, #6]
    28ec:	428c      	cmp	r4, r1
    28ee:	d06f      	beq.n	29d0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    28f0:	f1b0 010f 	subs.w	r1, r0, #15
    28f4:	9101      	str	r1, [sp, #4]
    28f6:	f004 0101 	and.w	r1, r4, #1
    28fa:	f8df a144 	ldr.w	sl, [pc, #324]	; 2a40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    28fe:	f004 0904 	and.w	r9, r4, #4
    2902:	f004 0802 	and.w	r8, r4, #2
    2906:	460f      	mov	r7, r1
    2908:	d42a      	bmi.n	2960 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    290a:	9901      	ldr	r1, [sp, #4]
    290c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    2910:	ea4f 2e21 	mov.w	lr, r1, asr #8
    2914:	f1be 0f07 	cmp.w	lr, #7
    2918:	9101      	str	r1, [sp, #4]
    291a:	d801      	bhi.n	2920 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    291c:	d104      	bne.n	2928 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    291e:	e001      	b.n	2924 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    2920:	f04f 0e07 	mov.w	lr, #7
    2924:	2106      	movs	r1, #6
    2926:	e000      	b.n	292a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    2928:	4671      	mov	r1, lr
    292a:	f8df b118 	ldr.w	fp, [pc, #280]	; 2a44 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    292e:	3101      	adds	r1, #1
    2930:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    2934:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    2938:	ebc1 0c0c 	rsb	ip, r1, ip
    293c:	fa5f f18c 	uxtb.w	r1, ip
    2940:	f1b9 0f00 	cmp.w	r9, #0
    2944:	d002      	beq.n	294c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    2946:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    294a:	4459      	add	r1, fp
    294c:	f1b8 0f00 	cmp.w	r8, #0
    2950:	d002      	beq.n	2958 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    2952:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    2956:	4459      	add	r1, fp
    2958:	b12f      	cbz	r7, 2966 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    295a:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    295e:	e002      	b.n	2966 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2960:	f04f 0e00 	mov.w	lr, #0
    2964:	4671      	mov	r1, lr
    2966:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    296a:	fa5f fc8a 	uxtb.w	ip, sl
    296e:	f1b9 0f00 	cmp.w	r9, #0
    2972:	d002      	beq.n	297a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    2974:	f3ca 2907 	ubfx	r9, sl, #8, #8
    2978:	44cc      	add	ip, r9
    297a:	f1b8 0f00 	cmp.w	r8, #0
    297e:	d002      	beq.n	2986 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    2980:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2984:	44c4      	add	ip, r8
    2986:	b10f      	cbz	r7, 298c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2988:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    298c:	1a9b      	subs	r3, r3, r2
    298e:	2b01      	cmp	r3, #1
    2990:	bfb8      	it	lt
    2992:	2301      	movlt	r3, #1
    2994:	9f01      	ldr	r7, [sp, #4]
    2996:	2234      	movs	r2, #52	; 0x34
    2998:	4353      	muls	r3, r2
    299a:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    299e:	4379      	muls	r1, r7
    29a0:	b2ed      	uxtb	r5, r5
    29a2:	436b      	muls	r3, r5
    29a4:	3180      	adds	r1, #128	; 0x80
    29a6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    29aa:	fbb3 f1f1 	udiv	r1, r3, r1
    29ae:	f64f 7cff 	movw	ip, #65535	; 0xffff
    29b2:	4561      	cmp	r1, ip
    29b4:	bf28      	it	cs
    29b6:	4661      	movcs	r1, ip
    29b8:	287f      	cmp	r0, #127	; 0x7f
    29ba:	80b1      	strh	r1, [r6, #4]
    29bc:	dc05      	bgt.n	29ca <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    29be:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    29c2:	4298      	cmp	r0, r3
    29c4:	bfb8      	it	lt
    29c6:	4618      	movlt	r0, r3
    29c8:	e000      	b.n	29cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    29ca:	207f      	movs	r0, #127	; 0x7f
    29cc:	71f0      	strb	r0, [r6, #7]
    29ce:	71b4      	strb	r4, [r6, #6]
    29d0:	4b18      	ldr	r3, [pc, #96]	; (2a34 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    29d2:	2100      	movs	r1, #0
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	6033      	str	r3, [r6, #0]
    29d8:	88b3      	ldrh	r3, [r6, #4]
    29da:	2b1e      	cmp	r3, #30
    29dc:	bf9e      	ittt	ls
    29de:	4a0c      	ldrls	r2, [pc, #48]	; (2a10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    29e0:	231f      	movls	r3, #31
    29e2:	8093      	strhls	r3, [r2, #4]
    29e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    29e8:	d302      	bcc.n	29f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    29ea:	085b      	lsrs	r3, r3, #1
    29ec:	3101      	adds	r1, #1
    29ee:	e7f9      	b.n	29e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    29f0:	4a11      	ldr	r2, [pc, #68]	; (2a38 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    29f2:	3b0f      	subs	r3, #15
    29f4:	430a      	orrs	r2, r1
    29f6:	091b      	lsrs	r3, r3, #4
    29f8:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    29fc:	4a06      	ldr	r2, [pc, #24]	; (2a18 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    29fe:	6013      	str	r3, [r2, #0]
    2a00:	4b0e      	ldr	r3, [pc, #56]	; (2a3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    2a02:	2200      	movs	r2, #0
    2a04:	601a      	str	r2, [r3, #0]
    2a06:	b003      	add	sp, #12
    2a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a0c:	40090000 	andmi	r0, r9, r0
    2a10:	2000007c 	andcs	r0, r0, ip, ror r0
    2a14:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2a18:	40091030 	andmi	r1, r9, r0, lsr r0
    2a1c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2a20:	50001388 	andpl	r1, r0, r8, lsl #7
    2a24:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2a28:	5000113c 	andpl	r1, r0, ip, lsr r1
    2a2c:	4008626e 	andmi	r6, r8, lr, ror #4
    2a30:	40082224 	andmi	r2, r8, r4, lsr #4
    2a34:	40092008 	andmi	r2, r9, r8
    2a38:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2a3c:	40091034 	andmi	r1, r9, r4, lsr r0
    2a40:	5000139c 	mulpl	r0, ip, r3
    2a44:	50001398 	mulpl	r0, r8, r3

00002a48 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2a48:	b510      	push	{r4, lr}
    2a4a:	4b14      	ldr	r3, [pc, #80]	; (2a9c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2a4c:	681c      	ldr	r4, [r3, #0]
    2a4e:	b2a4      	uxth	r4, r4
    2a50:	b314      	cbz	r4, 2a98 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    2a52:	f7ff fb15 	bl	2080 <NOROM_AONBatMonTemperatureGetDegC>
    2a56:	4b12      	ldr	r3, [pc, #72]	; (2aa0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2a58:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2a5c:	4290      	cmp	r0, r2
    2a5e:	da05      	bge.n	2a6c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    2a60:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2a64:	4290      	cmp	r0, r2
    2a66:	bfb8      	it	lt
    2a68:	4610      	movlt	r0, r2
    2a6a:	71d8      	strb	r0, [r3, #7]
    2a6c:	889a      	ldrh	r2, [r3, #4]
    2a6e:	490c      	ldr	r1, [pc, #48]	; (2aa0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2a70:	4294      	cmp	r4, r2
    2a72:	d310      	bcc.n	2a96 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2a74:	4b0b      	ldr	r3, [pc, #44]	; (2aa4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    2a76:	6808      	ldr	r0, [r1, #0]
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	1aa4      	subs	r4, r4, r2
    2a7c:	3302      	adds	r3, #2
    2a7e:	1a1b      	subs	r3, r3, r0
    2a80:	2b1f      	cmp	r3, #31
    2a82:	bf28      	it	cs
    2a84:	231f      	movcs	r3, #31
    2a86:	085b      	lsrs	r3, r3, #1
    2a88:	40dc      	lsrs	r4, r3
    2a8a:	4414      	add	r4, r2
    2a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2a90:	4294      	cmp	r4, r2
    2a92:	bf28      	it	cs
    2a94:	4614      	movcs	r4, r2
    2a96:	808c      	strh	r4, [r1, #4]
    2a98:	bd10      	pop	{r4, pc}
    2a9a:	bf00      	nop
    2a9c:	40091034 	andmi	r1, r9, r4, lsr r0
    2aa0:	2000007c 	andcs	r0, r0, ip, ror r0
    2aa4:	40092008 	andmi	r2, r9, r8

00002aa8 <NOROM_SysCtrlResetSourceGet>:
    2aa8:	4b04      	ldr	r3, [pc, #16]	; (2abc <NOROM_SysCtrlResetSourceGet+0x14>)
    2aaa:	681a      	ldr	r2, [r3, #0]
    2aac:	0412      	lsls	r2, r2, #16
    2aae:	bf5a      	itte	pl
    2ab0:	6818      	ldrpl	r0, [r3, #0]
    2ab2:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    2ab6:	2008      	movmi	r0, #8
    2ab8:	4770      	bx	lr
    2aba:	bf00      	nop
    2abc:	40090004 	andmi	r0, r9, r4

00002ac0 <NOROM_ChipInfo_GetChipFamily>:
    2ac0:	f64b 129a 	movw	r2, #47514	; 0xb99a
    2ac4:	4b10      	ldr	r3, [pc, #64]	; (2b08 <NOROM_ChipInfo_GetChipFamily+0x48>)
    2ac6:	6818      	ldr	r0, [r3, #0]
    2ac8:	f3c0 300f 	ubfx	r0, r0, #12, #16
    2acc:	4290      	cmp	r0, r2
    2ace:	d106      	bne.n	2ade <NOROM_ChipInfo_GetChipFamily+0x1e>
    2ad0:	681b      	ldr	r3, [r3, #0]
    2ad2:	0f1b      	lsrs	r3, r3, #28
    2ad4:	2b0b      	cmp	r3, #11
    2ad6:	bf0c      	ite	eq
    2ad8:	2004      	moveq	r0, #4
    2ada:	2000      	movne	r0, #0
    2adc:	e011      	b.n	2b02 <NOROM_ChipInfo_GetChipFamily+0x42>
    2ade:	f64b 13be 	movw	r3, #47550	; 0xb9be
    2ae2:	4298      	cmp	r0, r3
    2ae4:	d00a      	beq.n	2afc <NOROM_ChipInfo_GetChipFamily+0x3c>
    2ae6:	f64b 3341 	movw	r3, #47937	; 0xbb41
    2aea:	4298      	cmp	r0, r3
    2aec:	d008      	beq.n	2b00 <NOROM_ChipInfo_GetChipFamily+0x40>
    2aee:	f64b 3320 	movw	r3, #47904	; 0xbb20
    2af2:	4298      	cmp	r0, r3
    2af4:	bf14      	ite	ne
    2af6:	20ff      	movne	r0, #255	; 0xff
    2af8:	2002      	moveq	r0, #2
    2afa:	e002      	b.n	2b02 <NOROM_ChipInfo_GetChipFamily+0x42>
    2afc:	2001      	movs	r0, #1
    2afe:	e000      	b.n	2b02 <NOROM_ChipInfo_GetChipFamily+0x42>
    2b00:	2003      	movs	r0, #3
    2b02:	b240      	sxtb	r0, r0
    2b04:	4770      	bx	lr
    2b06:	bf00      	nop
    2b08:	50001318 	andpl	r1, r0, r8, lsl r3

00002b0c <NOROM_ChipInfo_GetHwRevision>:
    2b0c:	b538      	push	{r3, r4, r5, lr}
    2b0e:	4b19      	ldr	r3, [pc, #100]	; (2b74 <NOROM_ChipInfo_GetHwRevision+0x68>)
    2b10:	681d      	ldr	r5, [r3, #0]
    2b12:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2b16:	6818      	ldr	r0, [r3, #0]
    2b18:	0f2d      	lsrs	r5, r5, #28
    2b1a:	b2c4      	uxtb	r4, r0
    2b1c:	2c80      	cmp	r4, #128	; 0x80
    2b1e:	bf28      	it	cs
    2b20:	2400      	movcs	r4, #0
    2b22:	f7ff ffcd 	bl	2ac0 <NOROM_ChipInfo_GetChipFamily>
    2b26:	2804      	cmp	r0, #4
    2b28:	d821      	bhi.n	2b6e <NOROM_ChipInfo_GetHwRevision+0x62>
    2b2a:	e8df f000 	tbb	[pc, r0]
    2b2e:	1b1b1303 	blne	6c7742 <__ccfg+0x6a779a>
    2b32:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2b36:	2d07      	cmp	r5, #7
    2b38:	d819      	bhi.n	2b6e <NOROM_ChipInfo_GetHwRevision+0x62>
    2b3a:	e8df f005 	tbb	[pc, r5]
    2b3e:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    2b42:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2b46:	2014      	movs	r0, #20
    2b48:	e012      	b.n	2b70 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b4a:	2015      	movs	r0, #21
    2b4c:	e010      	b.n	2b70 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b4e:	f104 0016 	add.w	r0, r4, #22
    2b52:	e00a      	b.n	2b6a <NOROM_ChipInfo_GetHwRevision+0x5e>
    2b54:	b125      	cbz	r5, 2b60 <NOROM_ChipInfo_GetHwRevision+0x54>
    2b56:	2d02      	cmp	r5, #2
    2b58:	d109      	bne.n	2b6e <NOROM_ChipInfo_GetHwRevision+0x62>
    2b5a:	f104 0014 	add.w	r0, r4, #20
    2b5e:	e004      	b.n	2b6a <NOROM_ChipInfo_GetHwRevision+0x5e>
    2b60:	200a      	movs	r0, #10
    2b62:	e005      	b.n	2b70 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b64:	b91d      	cbnz	r5, 2b6e <NOROM_ChipInfo_GetHwRevision+0x62>
    2b66:	f104 000a 	add.w	r0, r4, #10
    2b6a:	b2c0      	uxtb	r0, r0
    2b6c:	e000      	b.n	2b70 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b6e:	20ff      	movs	r0, #255	; 0xff
    2b70:	b240      	sxtb	r0, r0
    2b72:	bd38      	pop	{r3, r4, r5, pc}
    2b74:	50001318 	andpl	r1, r0, r8, lsl r3

00002b78 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2b78:	b508      	push	{r3, lr}
    2b7a:	f7ff ffa1 	bl	2ac0 <NOROM_ChipInfo_GetChipFamily>
    2b7e:	2801      	cmp	r0, #1
    2b80:	d103      	bne.n	2b8a <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2b82:	f7ff ffc3 	bl	2b0c <NOROM_ChipInfo_GetHwRevision>
    2b86:	2813      	cmp	r0, #19
    2b88:	dc00      	bgt.n	2b8c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2b8a:	e7fe      	b.n	2b8a <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2b8c:	bd08      	pop	{r3, pc}
	...

00002b90 <AuxAdiDdiSafeWrite.constprop.1>:
    2b90:	b538      	push	{r3, r4, r5, lr}
    2b92:	4604      	mov	r4, r0
    2b94:	460d      	mov	r5, r1
    2b96:	f7ff fa97 	bl	20c8 <NOROM_CPUcpsid>
    2b9a:	4b06      	ldr	r3, [pc, #24]	; (2bb4 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2b9c:	681a      	ldr	r2, [r3, #0]
    2b9e:	2a00      	cmp	r2, #0
    2ba0:	d0fb      	beq.n	2b9a <AuxAdiDdiSafeWrite.constprop.1+0xa>
    2ba2:	2201      	movs	r2, #1
    2ba4:	6025      	str	r5, [r4, #0]
    2ba6:	601a      	str	r2, [r3, #0]
    2ba8:	b918      	cbnz	r0, 2bb2 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    2baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2bae:	f7ff ba8f 	b.w	20d0 <NOROM_CPUcpsie>
    2bb2:	bd38      	pop	{r3, r4, r5, pc}
    2bb4:	400c8000 	andmi	r8, ip, r0

00002bb8 <NOROM_DDI32RegWrite>:
    2bb8:	4408      	add	r0, r1
    2bba:	4611      	mov	r1, r2
    2bbc:	f7ff bfe8 	b.w	2b90 <AuxAdiDdiSafeWrite.constprop.1>

00002bc0 <NOROM_OSCClockSourceSet>:
    2bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2bc2:	460c      	mov	r4, r1
    2bc4:	07c1      	lsls	r1, r0, #31
    2bc6:	4605      	mov	r5, r0
    2bc8:	d509      	bpl.n	2bde <NOROM_OSCClockSourceSet+0x1e>
    2bca:	4b12      	ldr	r3, [pc, #72]	; (2c14 <NOROM_OSCClockSourceSet+0x54>)
    2bcc:	b2a2      	uxth	r2, r4
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	2100      	movs	r1, #0
    2bd2:	9200      	str	r2, [sp, #0]
    2bd4:	685e      	ldr	r6, [r3, #4]
    2bd6:	4810      	ldr	r0, [pc, #64]	; (2c18 <NOROM_OSCClockSourceSet+0x58>)
    2bd8:	2201      	movs	r2, #1
    2bda:	460b      	mov	r3, r1
    2bdc:	47b0      	blx	r6
    2bde:	07aa      	lsls	r2, r5, #30
    2be0:	d509      	bpl.n	2bf6 <NOROM_OSCClockSourceSet+0x36>
    2be2:	4b0c      	ldr	r3, [pc, #48]	; (2c14 <NOROM_OSCClockSourceSet+0x54>)
    2be4:	b2a2      	uxth	r2, r4
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	9200      	str	r2, [sp, #0]
    2bea:	685e      	ldr	r6, [r3, #4]
    2bec:	480a      	ldr	r0, [pc, #40]	; (2c18 <NOROM_OSCClockSourceSet+0x58>)
    2bee:	2100      	movs	r1, #0
    2bf0:	2202      	movs	r2, #2
    2bf2:	2301      	movs	r3, #1
    2bf4:	47b0      	blx	r6
    2bf6:	076b      	lsls	r3, r5, #29
    2bf8:	d509      	bpl.n	2c0e <NOROM_OSCClockSourceSet+0x4e>
    2bfa:	4b06      	ldr	r3, [pc, #24]	; (2c14 <NOROM_OSCClockSourceSet+0x54>)
    2bfc:	b2a4      	uxth	r4, r4
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	9400      	str	r4, [sp, #0]
    2c02:	685c      	ldr	r4, [r3, #4]
    2c04:	4804      	ldr	r0, [pc, #16]	; (2c18 <NOROM_OSCClockSourceSet+0x58>)
    2c06:	2100      	movs	r1, #0
    2c08:	220c      	movs	r2, #12
    2c0a:	2302      	movs	r3, #2
    2c0c:	47a0      	blx	r4
    2c0e:	b002      	add	sp, #8
    2c10:	bd70      	pop	{r4, r5, r6, pc}
    2c12:	bf00      	nop
    2c14:	100001a4 	andne	r0, r0, r4, lsr #3
    2c18:	400ca000 	andmi	sl, ip, r0

00002c1c <NOROM_OSCClockSourceGet>:
    2c1c:	b510      	push	{r4, lr}
    2c1e:	4b08      	ldr	r3, [pc, #32]	; (2c40 <NOROM_OSCClockSourceGet+0x24>)
    2c20:	2804      	cmp	r0, #4
    2c22:	681b      	ldr	r3, [r3, #0]
    2c24:	f04f 0134 	mov.w	r1, #52	; 0x34
    2c28:	68dc      	ldr	r4, [r3, #12]
    2c2a:	bf07      	ittee	eq
    2c2c:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2c30:	231d      	moveq	r3, #29
    2c32:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2c36:	231c      	movne	r3, #28
    2c38:	4802      	ldr	r0, [pc, #8]	; (2c44 <NOROM_OSCClockSourceGet+0x28>)
    2c3a:	47a0      	blx	r4
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	bf00      	nop
    2c40:	100001a4 	andne	r0, r0, r4, lsr #3
    2c44:	400ca000 	andmi	sl, ip, r0
    2c48:	00206325 	eoreq	r6, r0, r5, lsr #6
    2c4c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2c50:	6f792072 	svcvs	0x00792072
    2c54:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2c58:	3a656d61 	bcc	195e1e4 <__ccfg+0x193e23c>
    2c5c:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2c60:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 2ab8 <NOROM_SysCtrlResetSourceGet+0x10>
    2c64:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2c68:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2c6c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2c70:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2c74:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2c78:	20656874 	rsbcs	r6, r5, r4, ror r8
    2c7c:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2c80:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2c84:	706f2067 	rsbvc	r2, pc, r7, rrx
    2c88:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2c8c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2c90:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2c94:	6a642941 	bvs	190d1a0 <__ccfg+0x18ed1f8>
    2c98:	20747375 	rsbscs	r7, r4, r5, ror r3
    2c9c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2ca0:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2ca4:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2ca8:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2cac:	0a747261 	beq	1d1f638 <__ccfg+0x1cff690>
    2cb0:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2cb4:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2cb8:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2cbc:	6f697461 	svcvs	0x00697461
    2cc0:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2cc4:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2cc8:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2ccc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2cd0:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2cd4:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2cd8:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2cdc:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2ce0:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2ce4:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2ce8:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2cec:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2cf0:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2cf4:	20726574 	rsbscs	r6, r2, r4, ror r5
    2cf8:	20656874 	rsbcs	r6, r5, r4, ror r8
    2cfc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2d00:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2d04:	52282073 	eorpl	r2, r8, #115	; 0x73
    2d08:	4f206465 	svcmi	0x00206465
    2d0c:	4f202c4e 	svcmi	0x00202c4e
    2d10:	202c4646 	eorcs	r4, ip, r6, asr #12
    2d14:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2d18:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2d1c:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2d20:	203a2946 	eorscs	r2, sl, r6, asr #18
    2d24:	65522800 	ldrbvs	r2, [r2, #-2048]	; 0xfffff800
    2d28:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2d2c:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2d30:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2d34:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2d38:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2d3c:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2d40:	6e692029 	cdpvs	0, 6, cr2, cr9, cr9, {1}
    2d44:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2d48:	3a736c61 	bcc	1cdded4 <__ccfg+0x1cbdf2c>
    2d4c:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
    2d50:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2d54:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2d58:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2d5c:	000d0a29 	andeq	r0, sp, r9, lsr #20
    2d60:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    2d64:	20726f74 	rsbscs	r6, r2, r4, ror pc
    2d68:	65727028 	ldrbvs	r7, [r2, #-40]!	; 0xffffffd8
    2d6c:	53207373 			; <UNDEFINED> instruction: 0x53207373
    2d70:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    2d74:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2d78:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2d7c:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    2d80:	203a5252 	eorscs	r5, sl, r2, asr r2
    2d84:	202c7825 	eorcs	r7, ip, r5, lsr #16
    2d88:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    2d8c:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    2d90:	50006961 	andpl	r6, r0, r1, ror #18
    2d94:	534f6369 	movtpl	r6, #62313	; 0xf369
    2d98:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    2d9c:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    2da0:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    2da4:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    2da8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2dac:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2db0:	434e5541 	movtmi	r5, #58689	; 0xe541
    2db4:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    2db8:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    2dbc:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    2dc0:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    2dc4:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 2d4c <NOROM_OSCClockSourceGet+0x130>
    2dc8:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2dcc:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2dd0:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    2dd4:	30303220 	eorscc	r3, r0, r0, lsr #4
    2dd8:	30322d32 	eorscc	r2, r2, r2, lsr sp
    2ddc:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    2de0:	6f746665 	svcvs	0x00746665
    2de4:	20726576 	rsbscs	r6, r2, r6, ror r5
    2de8:	3a4d4152 	bcc	1353338 <__ccfg+0x1333390>
    2dec:	20642520 	rsbcs	r2, r4, r0, lsr #10
    2df0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2df4:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2df8:	00000000 	andeq	r0, r0, r0

00002dfc <port_confs>:
    2dfc:	00306080 	eorseq	r6, r0, r0, lsl #1
    2e00:	00386080 	eorseq	r6, r8, r0, lsl #1
    2e04:	00186010 	andseq	r6, r8, r0, lsl r0
    2e08:	2010400f 	andscs	r4, r0, pc
    2e0c:	30694000 	rsbcc	r4, r9, r0
    2e10:	30714000 	rsbscc	r4, r1, r0
    2e14:	00b86008 	adcseq	r6, r8, r8
    2e18:	60c94000 	sbcvs	r4, r9, r0
    2e1c:	60d14000 	sbcsvs	r4, r1, r0
    2e20:	60d94000 	sbcsvs	r4, r9, r0
    2e24:	60e14000 	rscvs	r4, r1, r0
    2e28:	00096380 	andeq	r6, r9, r0, lsl #7
    2e2c:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2e30:	20402000 	subcs	r2, r0, r0
    2e34:	00486080 	subeq	r6, r8, r0, lsl #1
    2e38:	00506080 	subseq	r6, r0, r0, lsl #1
    2e3c:	00a06000 	adceq	r6, r0, r0
    2e40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2e44:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2e48:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2e4c:	6f690076 	svcvs	0x00690076
    2e50:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2e54:	616d0031 	cmnvs	sp, r1, lsr r0
    2e58:	6b00676c 	blvs	1cc10 <_etext+0x19d94>
    2e5c:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2e60:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002e64 <__pi_hex_enc_table>:
    2e64:	33323130 	teqcc	r2, #48, 2
    2e68:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2e6c:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2e70:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002e74 <__input_pins>:
    2e74:	9c9b9a99 	vldmials	fp, {s18-s170}

00002e78 <__button_list>:
    2e78:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .data:

20000000 <greenCharacter>:
char greenCharacter = 'G';
20000000:	00000047 	andeq	r0, r0, r7, asr #32

20000004 <greenLed>:
int greenLed = 1;
20000004:	00000001 	andeq	r0, r0, r1

20000008 <redCharacter>:
char redCharacter = 'R';
20000008:	Address 0x0000000020000008 is out of bounds.


Disassembly of section .bss:

2000000c <On>:
2000000c:	00000000 	andeq	r0, r0, r0

20000010 <blinkerCode.5771>:
20000010:	00000000 	andeq	r0, r0, r0

20000014 <blinkerRunning.5772>:
	...

20000015 <ch.5749>:
	...

20000016 <displayCycle>:
	...

20000018 <greenOff>:
	...

2000001a <greenOn>:
	...

2000001c <led.5748>:
2000001c:	00000000 	andeq	r0, r0, r0

20000020 <ledFlag>:
int ledFlag = 0;
20000020:	00000000 	andeq	r0, r0, r0

20000024 <offTime.5751>:
20000024:	00000000 	andeq	r0, r0, r0

20000028 <onTime.5750>:
20000028:	00000000 	andeq	r0, r0, r0

2000002c <redLed>:
int redLed = 0;
2000002c:	00000000 	andeq	r0, r0, r0

20000030 <redOff>:
	...

20000032 <redOn>:
	...

20000034 <username.5770>:
	...

20000048 <setdel>:
	...

2000004a <urates>:
	...

2000004c <__PCB>:
2000004c:	00000000 	andeq	r0, r0, r0

20000050 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000050:	00000000 	andeq	r0, r0, r0

20000054 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000054:	00000000 	andeq	r0, r0, r0

20000058 <mevent>:
20000058:	00000000 	andeq	r0, r0, r0

2000005c <mnfree>:
2000005c:	00000000 	andeq	r0, r0, r0

20000060 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000060:	00000000 	andeq	r0, r0, r0

20000064 <dopen>:
	...

20000065 <dstat>:
20000065:	 	andeq	r0, r0, r0

20000068 <len.5699>:
20000068:	00000000 	andeq	r0, r0, r0

2000006c <ptr.5698>:
2000006c:	00000000 	andeq	r0, r0, r0

20000070 <__inpline>:
char *__inpline = NULL;
20000070:	00000000 	andeq	r0, r0, r0

20000074 <len.5700>:
20000074:	00000000 	andeq	r0, r0, r0

20000078 <ptr.5699>:
20000078:	00000000 	andeq	r0, r0, r0

2000007c <powerQualGlobals>:
	...

20000084 <__pi_uart>:
	...

2000008c <system_event_count>:
2000008c:	00000000 	andeq	r0, r0, r0

20000090 <entropy>:
20000090:	00000000 	andeq	r0, r0, r0

20000094 <__pi_mintk>:
	...

20000096 <__pi_old>:
	...

20000098 <__pi_systat>:
	...

200000a0 <__pi_new>:
200000a0:	00000000 	andeq	r0, r0, r0

200000a4 <__pi_utims>:
	...

200000b4 <__pi_curr>:
200000b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000b8 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000824 	andeq	r0, r0, r4, lsr #16
       4:	00000003 	andeq	r0, r0, r3
    return (time * SECOND)/1000;
       8:	01040000 	mrseq	r0, (UNDEF: 4)
}
       c:	00000172 	andeq	r0, r0, r2, ror r1
      10:	0002e00c 	andeq	lr, r2, ip
      14:	0000d300 	andeq	sp, r0, r0, lsl #6
      18:	0000c000 	andeq	ip, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
      2c:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
      30:	02000003 	andeq	r0, r0, #3
      34:	00b00504 	adcseq	r0, r0, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000ab05 	andeq	sl, r0, r5, lsl #22
}
      40:	223c0300 	eorscs	r0, ip, #0, 6
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
      54:	00212a03 	eoreq	r2, r1, r3, lsl #20
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	73070202 	movwvc	r0, #29186	; 0x7202
      64:	03000002 	movweq	r0, #2
      68:	000017f3 	strdeq	r1, [r0], -r3
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00850704 	addeq	r0, r5, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00008007 	andeq	r8, r0, r7
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	8a070402 	bhi	1c1098 <__ccfg+0x1a10f0>
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	0000041c 	andeq	r0, r0, ip, lsl r4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	00001600 	andeq	r1, r0, r0, lsl #12
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013f803 	andseq	pc, r3, r3, lsl #16
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	16510300 	ldrbne	r0, [r1], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	a6030000 	strge	r0, [r3], -r0
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	000002c1 	andeq	r0, r0, r1, asr #5
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	000000a4 	andeq	r0, r0, r4, lsr #1
			curr += 0x1000;
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (from >= EE_SIZE || upto < from)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	0000028f 	andeq	r0, r0, pc, lsl #5
			upto = EE_SIZE - 1;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
     114:	0000042b 	andeq	r0, r0, fp, lsr #8
     118:	ac033704 	stcge	7, cr3, [r3], {4}
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
     124:	00000424 	andeq	r0, r0, r4, lsr #8
            ch = redCharacter;
     128:	ac033804 	stcge	8, cr3, [r3], {4}
            onTime = redOn;
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
     130:	09000004 	stmdbeq	r0, {r2}
            offTime = greenOff;
     134:	00000415 	andeq	r0, r0, r5, lsl r4
        ledFlag = 1 - ledFlag;
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
    return (time * SECOND)/1000;
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
        ledFlag = 1 - ledFlag;
     140:	00004c09 	andeq	r4, r0, r9, lsl #24
    return (time * SECOND)/1000;
     144:	033c0400 	teqeq	ip, #0, 8
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
     14c:	00790902 	rsbseq	r0, r9, r2, lsl #18
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
        offTime = adjustTime(offTime);
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
        onTime = adjustTime(onTime);
     158:	61090300 	mrsvs	r0, (UNDEF: 57)
     15c:	04000001 	streq	r0, [r0], #-1
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
     164:	00040000 	andeq	r0, r4, r0
     168:	00045403 	andeq	r5, r4, r3, lsl #8
        if(onTime > 0){
     16c:	03410400 	movteq	r0, #5120	; 0x1400
            if(On)
     170:	000000da 	ldrdeq	r0, [r0], -sl
     174:	00016806 	andeq	r6, r1, r6, lsl #16
     178:	02b50a00 	adcseq	r0, r5, #0, 20
                leds(led,1);
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
                leds(led,0);
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
     188:	00000321 	andeq	r0, r0, r1, lsr #6
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
     190:	01000001 	tsteq	r0, r1
            delay(onTime, OFF_PERIOD);
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
            delay(offTime, Check_PERIOD);
     198:	02000001 	andeq	r0, r0, #1
            led = greenLed;
     19c:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
            ch = greenCharacter;
     1a4:	0a000001 	beq	1b0 <_Min_Stack_Size+0xb0>
            onTime = greenOn;
     1a8:	0000032f 	andeq	r0, r0, pc, lsr #6
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
            offTime = greenOff;
     1b0:	01000001 	tsteq	r0, r1
                leds(led,0);
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
     1bc:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
     1c0:	05000002 	streq	r0, [r0, #-2]
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
            proceed OFF_PERIOD;
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1cc:	0000062d 	andeq	r0, r0, sp, lsr #12
        when(&On, Check_PERIOD);
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
     1d4:	04000000 	streq	r0, [r0], #-0
        release;
     1d8:	00049c09 	andeq	r9, r4, r9, lsl #24
        leds(led,0);
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
     1e0:	000000b8 	strheq	r0, [r0], -r8
     1e4:	32030006 	andcc	r0, r3, #6
     1e8:	05000004 	streq	r0, [r0, #-4]
            proceed Check_PERIOD;
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
}
     1f0:	e60c0000 	str	r0, [ip], -r0
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
     1fc:	00420a00 	subeq	r0, r2, r0, lsl #20
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
     208:	0c010100 	stfeqs	f0, [r1], {-0}
     20c:	0000009b 	muleq	r0, fp, r0
     210:	0000021b 	andeq	r0, r0, fp, lsl r2
     214:	0000880e 	andeq	r8, r0, lr, lsl #16
     218:	07000300 	streq	r0, [r0, -r0, lsl #6]
     21c:	09910601 	ldmibeq	r1, {r0, r9, sl}
     220:	00000245 	andeq	r0, r0, r5, asr #4
     224:	00048f08 	andeq	r8, r4, r8, lsl #30
     228:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
     230:	00010701 	andeq	r0, r1, r1, lsl #14
     234:	00003d08 	andeq	r3, r0, r8, lsl #26
     238:	03940600 	orrseq	r0, r4, #0, 12
     23c:	000000ac 	andeq	r0, r0, ip, lsr #1
     240:	00000101 	andeq	r0, r0, r1, lsl #2
    word numbers[] = {0, 0, 0, 0};
     244:	02860300 	addeq	r0, r6, #0, 6
    int numbersIndex = 0;
     248:	96060000 	strls	r0, [r6], -r0
    word numbers[] = {0, 0, 0, 0};
     24c:	00021b03 	andeq	r1, r2, r3, lsl #22
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	02450500 	subeq	r0, r5, #0, 10
        if(settingsInput[i] == ' ') {
     254:	510c0000 	mrspl	r0, (UNDEF: 12)
     258:	61000002 	tstvs	r0, r2
            numbers[numbersIndex] = number;
     25c:	0d000002 	stceq	0, cr0, [r0, #-8]
     260:	02560500 	subseq	r0, r6, #0, 10
            number = 0;
     264:	eb0a0000 	bl	28026c <__ccfg+0x2602c4>
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	06000002 	streq	r0, [r0], -r2
    redOn = numbers[0];
     26c:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
     270:	01010000 	mrseq	r0, (UNDEF: 1)
    redOff = numbers[1];
     274:	0000a70c 	andeq	sl, r0, ip, lsl #14
     278:	00027f00 	andeq	r7, r2, r0, lsl #30
    greenOn = numbers[2];
     27c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     280:	00000274 	andeq	r0, r0, r4, ror r2
    greenOff = numbers[3];
     284:	0003a70a 	andeq	sl, r3, sl, lsl #14
     288:	13060700 	movwne	r0, #26368	; 0x6700
}
     28c:	0000027f 	andeq	r0, r0, pc, ror r2
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	410a0101 	tstmi	sl, r1, lsl #2
     294:	05000001 	streq	r0, [r0, #-1]
            number = number * 10;
     298:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
            number += settingsInput[i] - 48;
     29c:	01010000 	mrseq	r0, (UNDEF: 1)
     2a0:	0004a90f 	andeq	sl, r4, pc, lsl #18
     2a4:	016e0800 	cmneq	lr, r0, lsl #16
     2a8:	0002ad10 	andeq	sl, r2, r0, lsl sp
     2ac:	b3040b00 	movwlt	r0, #19200	; 0x4b00
     2b0:	10000002 	andne	r0, r0, r2
fsm root {
     2b4:	0002bf01 	andeq	fp, r2, r1, lsl #30
     2b8:	009b1100 	addseq	r1, fp, r0, lsl #2
     2bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2c0:	000001a2 	andeq	r0, r0, r2, lsr #3
     2c4:	000002ca 	andeq	r0, r0, sl, asr #5
     2c8:	bf05000d 	svclt	0x0005000d
     2cc:	12000002 	andne	r0, r0, #2
        ser_outf(Initial, "Enter your name: ");
     2d0:	00000464 	andeq	r0, r0, r4, ror #8
     2d4:	13017f08 	movwne	r7, #7944	; 0x1f08
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	000002ca 	andeq	r0, r0, sl, asr #5
     2dc:	9f120101 	svcls	0x00120101
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	08000003 	stmdaeq	r0, {r0, r1}
     2e4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	04941201 	ldreq	r1, [r4], #513	; 0x201
     2f0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
        if (choice == 'A' || choice == 'a'){
     2f4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
     2f8:	01010000 	mrseq	r0, (UNDEF: 1)
     2fc:	03080813 	movweq	r0, #34835	; 0x8813
            proceed Adjust_Intervals;
     300:	03230903 			; <UNDEFINED> instruction: 0x03230903
            proceed Monitor;
     304:	34140000 	ldrcc	r0, [r4], #-0
        proceed Show_Menu;
     308:	08000022 	stmdaeq	r0, {r1, r5}
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	9b070307 	blls	1c0f30 <__ccfg+0x1a0f88>
     310:	00000000 	andeq	r0, r0, r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	00057f14 	andeq	r7, r5, r4, lsl pc
     318:	03080800 	movweq	r0, #34816	; 0x8800
     31c:	0000ce08 	andeq	ip, r0, r8, lsl #28
        processSettingsInput(settings);
     320:	0f000400 	svceq	0x00000400
        if(!blinkerRunning) {
     324:	00000266 	andeq	r0, r0, r6, ror #4
     328:	03030908 	movweq	r0, #14600	; 0x3908
            blinkerCode = runfsm blinker;
     32c:	000002fc 	strdeq	r0, [r0], -ip
     330:	0004b815 	andeq	fp, r4, r5, lsl r8
            blinkerRunning = YES;
     334:	0b083000 	bleq	20c33c <__ccfg+0x1ec394>
        On = YES;
     338:	03930803 	orrseq	r0, r3, #196608	; 0x30000
     33c:	b1140000 	tstlt	r4, r0
        trigger(&On);
     340:	08000004 	stmdaeq	r0, {r2}
        proceed Show_Menu;
     344:	9b070314 	blls	1c0f9c <__ccfg+0x1a0ff4>
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	00000000 	andeq	r0, r0, r0
     34c:	0002d214 	andeq	sp, r2, r4, lsl r2
     350:	03150800 	tsteq	r5, #0, 16
     354:	00009b07 	andeq	r9, r0, r7, lsl #22
     358:	ac140200 	lfmge	f0, 4, [r4], {-0}
     35c:	08000004 	stmdaeq	r0, {r2}
     360:	a00a0316 	andge	r0, sl, r6, lsl r3
        proceed Show_Menu;
     364:	04000002 	streq	r0, [r0], #-2
     368:	000f7f14 	andeq	r7, pc, r4, lsl pc	; <UNPREDICTABLE>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	03170800 	tsteq	r7, #0, 16
     370:	0000ce08 	andeq	ip, r0, r8, lsl #28
        displayCycle = YES;
     374:	5d140800 	ldcpl	8, cr0, [r4, #-0]
        ser_inf(Await_Stop, "%c", &ch);
     378:	08000004 	stmdaeq	r0, {r2}
     37c:	930f0318 	movwls	r0, #62232	; 0xf318
     380:	0c000003 	stceq	0, cr0, [r0], {3}
        if(ch == 'S' || ch == 's'){
     384:	0002cd14 	andeq	ip, r2, r4, lsl sp
     388:	03190800 	tsteq	r9, #0, 16
     38c:	0003a315 	andeq	sl, r3, r5, lsl r3
            displayCycle = NO;
     390:	0c002c00 	stceq	12, cr2, [r0], {-0}
     394:	00000323 	andeq	r0, r0, r3, lsr #6
            proceed Show_Menu;
     398:	000003a3 	andeq	r0, r0, r3, lsr #7
        proceed Monitor;
     39c:	0000880e 	andeq	r8, r0, lr, lsl #16
        On = NO;
     3a0:	0b000300 	bleq	fa8 <dgout+0x4>
     3a4:	00033004 	andeq	r3, r3, r4
        if(blinkerCode != 0x0) {
     3a8:	04c30f00 	strbeq	r0, [r3], #3840	; 0xf00
            killall(blinkerCode);
     3ac:	1c080000 	stcne	0, cr0, [r8], {-0}
     3b0:	03301b03 	teqeq	r0, #3072	; 0xc00
        proceed Show_Menu;
     3b4:	95120000 	ldrls	r0, [r2, #-0]
     3b8:	08000003 	stmdaeq	r0, {r0, r1}
        leds_all(0);
     3bc:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
     3c0:	01000003 	tsteq	r0, r3
     3c4:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
        proceed Show_Menu;
     3c8:	16000003 	strne	r0, [r0], -r3
     3cc:	0000029d 	muleq	r0, sp, r2
        } else if (choice == 'S' || choice == 's') {
     3d0:	81051501 	tsthi	r5, r1, lsl #10
            proceed Stop;
     3d4:	01000000 	mrseq	r0, (UNDEF: 0)
        } else if (choice == 'V' || choice == 'v') {
     3d8:	00040305 	andeq	r0, r4, r5, lsl #6
            proceed View_Settings;
     3dc:	ce162000 	cdpgt	0, 1, cr2, cr6, cr0, {0}
        } else if (choice == 'M' || choice == 'm') {
     3e0:	01000004 	tsteq	r0, r4
            proceed Monitor;
     3e4:	019b0616 	orrseq	r0, fp, r6, lsl r6
     3e8:	05010000 	streq	r0, [r1, #-0]
     3ec:	00000003 	andeq	r0, r0, r3
     3f0:	02d81620 	sbcseq	r1, r8, #32, 12	; 0x2000000
     3f4:	17010000 	strne	r0, [r1, -r0]
     3f8:	00009b06 	andeq	r9, r0, r6, lsl #22
     3fc:	03050100 	movweq	r0, #20736	; 0x5100
     400:	2000001a 	andcs	r0, r0, sl, lsl r0
     404:	00031816 	andeq	r1, r3, r6, lsl r8
     408:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     40c:	0000009b 	muleq	r0, fp, r0
     410:	18030501 	stmdane	r3, {r0, r8, sl}
     414:	16200000 	strtne	r0, [r0], -r0
     418:	00000053 	andeq	r0, r0, r3, asr r0
     41c:	81051a01 	tsthi	r5, r1, lsl #20
     420:	01000000 	mrseq	r0, (UNDEF: 0)
     424:	002c0305 	eoreq	r0, ip, r5, lsl #6
     428:	0b162000 	bleq	588430 <__ccfg+0x568488>
     42c:	01000003 	tsteq	r0, r3
     430:	019b061b 	orrseq	r0, fp, fp, lsl r6
     434:	05010000 	streq	r0, [r1, #-0]
static void devinit_uart (int devnum) {
     438:	00000803 	andeq	r0, r0, r3, lsl #16
	adddevfunc (ioreq_uart_a, devnum);
     43c:	04771620 	ldrbteq	r1, [r7], #-1568	; 0xfffff9e0
     440:	1c010000 	stcne	0, cr0, [r1], {-0}
void udelay (volatile word n) {
     444:	00009b06 	andeq	r9, r0, r6, lsl #22
     448:	03050100 	movweq	r0, #20736	; 0x5100
	while (n) {
     44c:	20000032 	andcs	r0, r0, r2, lsr r0
     450:	0003fb16 	andeq	pc, r3, r6, lsl fp	; <UNPREDICTABLE>
}
     454:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
	while (n--);
     458:	0000009b 	muleq	r0, fp, r0
     45c:	30030501 	andcc	r0, r3, r1, lsl #10
     460:	16200000 	strtne	r0, [r0], -r0
		n--;
     464:	0000044c 	andeq	r0, r0, ip, asr #8
     468:	81052001 	tsthi	r5, r1
     46c:	01000000 	mrseq	r0, (UNDEF: 0)
void mdelay (volatile word n) {
     470:	00200305 	eoreq	r0, r0, r5, lsl #6
     474:	4f172000 	svcmi	0x00172000
	while (n) {
     478:	2301006e 	movwcs	r0, #4206	; 0x106e
     47c:	00008f09 	andeq	r8, r0, r9, lsl #30
}
     480:	03050100 	movweq	r0, #20736	; 0x5100
		udelay (999);
     484:	2000000c 	andcs	r0, r0, ip
     488:	00047d16 	andeq	r7, r4, r6, lsl sp
		n--;
     48c:	09240100 	stmdbeq	r4!, {r8}
     490:	0000008f 	andeq	r0, r0, pc, lsl #1
     494:	16030501 	strne	r0, [r3], -r1, lsl #10
     498:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
void __pi_ondomain (lword d) {
     49c:	0004ec01 	andeq	lr, r4, r1, lsl #24
     4a0:	06980100 	ldreq	r0, [r8], r0, lsl #2
		if (__pi_systat.effpdm > 1)
     4a4:	0002b401 	andeq	fp, r2, r1, lsl #8
     4a8:	00043800 	andeq	r3, r4, r0, lsl #16
			__pi_systat.effpdm = 1;
     4ac:	069c0100 	ldreq	r0, [ip], r0, lsl #2
	PRCMPowerDomainOn (d);
     4b0:	19000006 	stmdbne	r0, {r1, r2}
     4b4:	000000cb 	andeq	r0, r0, fp, asr #1
     4b8:	9b119801 	blls	4664c4 <__ccfg+0x44651c>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	1a000000 	bne	4c8 <__pi_ondomain+0x2c>
     4c4:	00000131 	andeq	r0, r0, r1, lsr r1
	__pi_systat.ondmns |= d;
     4c8:	ce14a001 	cdpgt	0, 1, cr10, cr4, cr1, {0}
     4cc:	1a000002 	bne	4dc <__pi_syserror+0x4>
}
     4d0:	0000005a 	andeq	r0, r0, sl, asr r0
     4d4:	d617a301 	ldrle	sl, [r7], -r1, lsl #6
void __pi_syserror (word ec, const char *m) {
     4d8:	1a000002 	bne	4e8 <__pi_syserror+0x10>
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	000000b9 	strheq	r0, [r0], -r9
     4e0:	e018a601 	ands	sl, r8, r1, lsl #12
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	1a000002 	bne	4f4 <__pi_syserror+0x1c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	00000439 	andeq	r0, r0, r9, lsr r4
     4ec:	ea19af01 	b	66c0f8 <__ccfg+0x64c150>
     4f0:	1a000002 	bne	500 <__pi_syserror+0x28>
		all_leds_blink;
     4f4:	000003d8 	ldrdeq	r0, [r0], -r8
     4f8:	0c1fc001 	ldceq	0, cr12, [pc], {1}
     4fc:	1a000003 	bne	510 <__pi_syserror+0x38>
     500:	00000369 	andeq	r0, r0, r9, ror #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     504:	141cc301 	ldrne	ip, [ip], #-769	; 0xfffffcff
     508:	1a000003 	bne	51c <__pi_syserror+0x44>
     50c:	00000108 	andeq	r0, r0, r8, lsl #2
     510:	241cca01 	ldrcs	ip, [ip], #-2561	; 0xfffff5ff
     514:	1a000003 	bne	528 <__pi_syserror+0x50>
     518:	0000037f 	andeq	r0, r0, pc, ror r3
	while (1) {
     51c:	481cd801 	ldmdami	ip, {r0, fp, ip, lr, pc}
     520:	1a000003 	bne	534 <tci_run_delay_timer+0x8>
     524:	00000000 	andeq	r0, r0, r0
     528:	6a16e201 	bvs	5b8d34 <__ccfg+0x598d8c>
void tci_run_delay_timer () {
     52c:	1a000003 	bne	540 <tci_run_delay_timer+0x14>
	setdel = __pi_mintk - __pi_old;
     530:	000002f8 	strdeq	r0, [r0], -r8
     534:	7819e601 	ldmdavc	r9, {r0, r9, sl, sp, lr, pc}
     538:	1a000003 	bne	54c <tci_run_delay_timer+0x20>
     53c:	00000154 	andeq	r0, r0, r4, asr r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	a013f201 	andsge	pc, r3, r1, lsl #4
     544:	1b000003 	blne	558 <tci_run_delay_timer+0x2c>
     548:	00000078 	andeq	r0, r0, r8, ror r0
     54c:	0002ac1c 	andeq	sl, r2, ip, lsl ip
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	119a0100 	orrsne	r0, sl, r0, lsl #2
	sti_tim;
     554:	00000606 	andeq	r0, r0, r6, lsl #12
}
     558:	00340305 	eorseq	r0, r4, r5, lsl #6
     55c:	311c2000 	tstcc	ip, r0
     560:	01000000 	mrseq	r0, (UNDEF: 0)
     564:	02a0149c 	adceq	r1, r0, #156, 8	; 0x9c000000
     568:	03050000 	movweq	r0, #20480	; 0x5000
	cli_aux;
     56c:	20000010 	andcs	r0, r0, r0, lsl r0
     570:	0004dd1c 	andeq	sp, r4, ip, lsl sp
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	149e0100 	ldrne	r0, [lr], #256	; 0x100
     578:	0000008f 	andeq	r0, r0, pc, lsl #1
     57c:	00140305 	andseq	r0, r4, r5, lsl #6
     580:	901d2000 	andsls	r2, sp, r0
	sti_aux;
     584:	9b000000 	blls	58c <tci_run_auxiliary_timer+0x20>
}
     588:	1c000005 	stcne	0, cr0, [r0], {5}
     58c:	000004a2 	andeq	r0, r0, r2, lsr #9
     590:	9b0eb001 	blls	3ac59c <__ccfg+0x38c5f4>
void AONRTCIntHandler () {
     594:	02000001 	andeq	r0, r0, #1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	1e004491 	mcrne	4, 0, r4, cr0, cr1, {4}
     59c:	00000314 	andeq	r0, r0, r4, lsl r3
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	00000324 	andeq	r0, r0, r4, lsr #6
		if (__pi_utims [0] == 0)
     5a4:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     5a8:	0003581c 	andeq	r5, r3, ip, lsl r8
		if (*(__pi_utims [0])) {
     5ac:	0ec40100 	poleqs	f0, f4, f0
     5b0:	00000616 	andeq	r0, r0, r6, lsl r6
			(*(__pi_utims [0]))--;
     5b4:	00449102 	subeq	r9, r4, r2, lsl #2
		if (__pi_utims [1] == 0)
     5b8:	0003781e 	andeq	r7, r3, lr, lsl r8
		if (*(__pi_utims [1])) {
     5bc:	0003a000 	andeq	sl, r3, r0
			aux_timer_inactive = 0;
     5c0:	0005d400 	andeq	sp, r5, r0, lsl #8
			(*(__pi_utims [1]))--;
     5c4:	68631f00 	stmdavs	r3!, {r8, r9, sl, fp, ip}^
		if (__pi_utims [2] == 0)
     5c8:	0ee70100 	cdpeq	1, 14, cr0, cr7, cr0, {0}
		if (*(__pi_utims [2])) {
     5cc:	0000019b 	muleq	r0, fp, r1
			(*(__pi_utims [2]))--;
     5d0:	00449102 	subeq	r9, r4, r2, lsl #2
		if (__pi_utims [3] != 0) {
     5d4:	0007d420 	andeq	sp, r7, r0, lsr #8
			if (*(__pi_utims [3])) {
     5d8:	0003b000 	andeq	fp, r3, r0
				aux_timer_inactive = 0;
     5dc:	0000a800 	andeq	sl, r0, r0, lsl #16
				(*(__pi_utims [3]))--;
     5e0:	23fb0100 	mvnscs	r0, #0, 2
	if (__pi_systat.ledsts) {
     5e4:	000005ee 	andeq	r0, r0, lr, ror #11
     5e8:	0007e321 	andeq	lr, r7, r1, lsr #6
		if (__pi_systat.ledblc++ == 0) {
     5ec:	d4220000 	strtle	r0, [r2], #-0
     5f0:	b8000007 	stmdalt	r0, {r0, r1, r2}
			if (__pi_systat.ledblk) {
     5f4:	bc000003 	stclt	0, cr0, [r0], {3}
     5f8:	01000003 	tsteq	r0, r3
     5fc:	e32136fb 			; <UNDEFINED> instruction: 0xe32136fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	00000007 	andeq	r0, r0, r7
     604:	9b0c0000 	blls	30060c <__ccfg+0x2e0664>
				if (__pi_systat.ledsts & 0x2)
     608:	16000001 	strne	r0, [r0], -r1
     60c:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     610:	00000088 	andeq	r0, r0, r8, lsl #1
				if (__pi_systat.ledsts & 0x4)
     614:	9b0c0013 	blls	300668 <__ccfg+0x2e06c0>
				__pi_systat.ledblk = 0;
     618:	26000001 	strcs	r0, [r0], -r1
     61c:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
			if (__pi_systat.fstblk)
     620:	00000088 	andeq	r0, r0, r8, lsl #1
     624:	01180031 	tsteq	r8, r1, lsr r0
				__pi_systat.ledblc = 200;
     628:	0000033b 	andeq	r0, r0, fp, lsr r3
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	01067c01 	tsteq	r6, r1, lsl #24
		cli_tim;
     630:	00000244 	andeq	r0, r0, r4, asr #4
		__pi_new += setdel;
     634:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     638:	068e9c01 	streq	r9, [lr], r1, lsl #24
		setdel = 0;
     63c:	6b190000 	blvs	640644 <__ccfg+0x62069c>
		RISE_N_SHINE;
     640:	01000000 	mrseq	r0, (UNDEF: 0)
		__pi_new += setdel;
     644:	0195227c 	orrseq	r2, r5, ip, ror r2
		RISE_N_SHINE;
     648:	001e0000 	andseq	r0, lr, r0
     64c:	021c0000 	andseq	r0, ip, #0
		aux_timer_inactive = 1;
     650:	01000004 	tsteq	r0, r4
     654:	020b0a7d 	andeq	r0, fp, #512000	; 0x7d000
				if (__pi_systat.ledsts & 0x1)
     658:	91020000 	mrsls	r0, (UNDEF: 2)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65c:	00972368 	addseq	r2, r7, r8, ror #6
     660:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
				if (__pi_systat.ledsts & 0x2)
     664:	00008109 	andeq	r8, r0, r9, lsl #2
     668:	00003100 	andeq	r3, r0, r0, lsl #2
     66c:	02962300 	addseq	r2, r6, #0, 6
				if (__pi_systat.ledsts & 0x8)
     670:	80010000 	andhi	r0, r1, r0
				__pi_systat.ledblk = 1;
     674:	00009b0a 	andeq	r9, r0, sl, lsl #22
     678:	00004400 	andeq	r4, r0, r0, lsl #8
		if (aux_timer_inactive) {
     67c:	00601b00 	rsbeq	r1, r0, r0, lsl #22
			cli_aux;
     680:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
     684:	0e830100 	rmfeqs	f0, f3, f0
     688:	00000081 	andeq	r0, r0, r1, lsl #1
     68c:	01180000 	tsteq	r8, r0
     690:	00000350 	andeq	r0, r0, r0, asr r3
     694:	01063401 	tsteq	r6, r1, lsl #8
     698:	000000c8 	andeq	r0, r0, r8, asr #1
     69c:	00000244 	andeq	r0, r0, r4, asr #4
     6a0:	07b49c01 	ldreq	r9, [r4, r1, lsl #24]!
     6a4:	cb190000 	blgt	6406ac <__ccfg+0x620704>
word tci_update_delay_ticks (Boolean force) {
     6a8:	01000000 	mrseq	r0, (UNDEF: 0)
	cli_tim;
     6ac:	009b1434 	addseq	r1, fp, r4, lsr r4
     6b0:	00780000 	rsbseq	r0, r8, r0
	if (setdel) {
     6b4:	101a0000 	andsne	r0, sl, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	01000000 	mrseq	r0, (UNDEF: 0)
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	0110193b 	tsteq	r0, fp, lsr r9
     6c0:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
     6c4:	01000001 	tsteq	r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00d21963 	sbcseq	r1, r2, r3, ror #18
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	001b0000 	andseq	r0, fp, r0
	return NO;
     6d0:	1f000000 	svcne	0x00000000
			setdel = 0;
     6d4:	0064656c 	rsbeq	r6, r4, ip, ror #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	81103501 	tsthi	r0, r1, lsl #10
     6dc:	05000000 	streq	r0, [r0, #-0]
}
     6e0:	00001c03 	andeq	r1, r0, r3, lsl #24
		sti_tim;
     6e4:	68631f20 	stmdavs	r3!, {r5, r8, r9, sl, fp, ip}^
		return YES;
     6e8:	11360100 	teqne	r6, r0, lsl #2
     6ec:	0000019b 	muleq	r0, fp, r1
     6f0:	00150305 	andseq	r0, r5, r5, lsl #6
     6f4:	d11c2000 	tstle	ip, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	01000003 	tsteq	r0, r3
	UARTDisable (UART0_BASE);
     6fc:	00811038 	addeq	r1, r1, r8, lsr r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	03050000 	movweq	r0, #20480	; 0x5000
	UARTDisable (UART0_BASE);
     704:	20000028 	andcs	r0, r0, r8, lsr #32
	UARTConfigSetExpClk (UART0_BASE,
     708:	0003611c 	andeq	r6, r3, ip, lsl r1
     70c:	10390100 	eorsne	r0, r9, r0, lsl #2
     710:	00000081 	andeq	r0, r0, r1, lsl #1
     714:	00240305 	eoreq	r0, r4, r5, lsl #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	d4252000 	strtle	r2, [r5], #-0
     71c:	de000007 	cdple	0, 0, cr0, cr0, cr7, {0}
     720:	e2000000 	and	r0, r0, #0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	01000000 	mrseq	r0, (UNDEF: 0)
     728:	07343565 	ldreq	r3, [r4, -r5, ror #10]!
     72c:	e3210000 			; <UNDEFINED> instruction: 0xe3210000
	urates [0] = rate;
     730:	00000007 	andeq	r0, r0, r7
}
     734:	0007b420 	andeq	fp, r7, r0, lsr #8
     738:	00013c00 	andeq	r3, r1, r0, lsl #24
     73c:	00001800 	andeq	r1, r0, r0, lsl #16
     740:	124d0100 	subne	r0, sp, #0, 2
     744:	0000074e 	andeq	r0, r0, lr, asr #14
     748:	0007c721 	andeq	ip, r7, r1, lsr #14
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	b4200000 	strtlt	r0, [r0], #-0
     750:	42000007 	andmi	r0, r0, #7
     754:	40000001 	andmi	r0, r0, r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	01000000 	mrseq	r0, (UNDEF: 0)
     75c:	0768134e 	strbeq	r1, [r8, -lr, asr #6]!
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	c7210000 	strgt	r0, [r1, -r0]!
     764:	00000007 	andeq	r0, r0, r7
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	0007d425 	andeq	sp, r7, r5, lsr #8
     76c:	00018000 	andeq	r8, r1, r0
     770:	00018200 	andeq	r8, r1, r0, lsl #4
     774:	3d590100 	ldfcce	f0, [r9, #-0]
     778:	00000782 	andeq	r0, r0, r2, lsl #15
     77c:	0007e321 	andeq	lr, r7, r1, lsr #6
     780:	d4250000 	strtle	r0, [r5], #-0
	switch (operation) {
     784:	ba000007 	blt	7a8 <ioreq_uart_a+0x24>
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
     78c:	01000001 	tsteq	r0, r1
     790:	079c9959 			; <UNDEFINED> instruction: 0x079c9959
     794:	e3210000 			; <UNDEFINED> instruction: 0xe3210000
     798:	00000007 	andeq	r0, r0, r7
				*buf++ = uart_a_read;
     79c:	0007d422 	andeq	sp, r7, r2, lsr #8
     7a0:	0001de00 	andeq	sp, r1, r0, lsl #28
			while (len && uart_a_char_available) {
     7a4:	0001e200 	andeq	lr, r1, r0, lsl #4
     7a8:	91650100 	cmnls	r5, r0, lsl #2
     7ac:	0007e321 	andeq	lr, r7, r1, lsr #6
			if (len != operation) {
     7b0:	00000000 	andeq	r0, r0, r0
}
     7b4:	040a0126 	streq	r0, [sl], #-294	; 0xfffffeda
     7b8:	2f010000 	svccs	0x00010000
			uart_a_disable_int;
     7bc:	009b0106 	addseq	r0, fp, r6, lsl #2
			if (uart_a_char_available) {
     7c0:	d4010000 	strle	r0, [r1], #-0
				*buf++ = uart_a_read;
     7c4:	27000007 	strcs	r0, [r0, -r7]
			uart_a_disable_int;
     7c8:	0000048a 	andeq	r0, r0, sl, lsl #9
     7cc:	9b162f01 	blls	58c3d8 <__ccfg+0x56c430>
			if (uart_a_char_available) {
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	0003c328 	andeq	ip, r3, r8, lsr #6
				uart_a_enable_int;
     7d8:	01540200 	cmpeq	r4, r0, lsl #4
     7dc:	f1030101 			; <UNDEFINED> instruction: 0xf1030101
				goto Redo_rx;
     7e0:	29000007 	stmdbcs	r0, {r0, r1, r2}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	00000168 	andeq	r0, r0, r8, ror #2
     7e8:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
			return -2;
     7ec:	00000067 	andeq	r0, r0, r7, rrx
     7f0:	00252800 	eoreq	r2, r5, r0, lsl #16
				uart_a_write (*buf);
     7f4:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
     7f8:	03010101 	movweq	r0, #4353	; 0x1101
			while (len && uart_a_room_in_tx) {
     7fc:	0000080e 	andeq	r0, r0, lr, lsl #16
     800:	00016829 	andeq	r6, r1, r9, lsr #16
     804:	011e0200 	tsteq	lr, r0, lsl #4
			if (len != operation) {
     808:	00006717 	andeq	r6, r0, r7, lsl r7
			uart_a_disable_int;
     80c:	b42a0000 	strtlt	r0, [sl], #-0
     810:	00000007 	andeq	r0, r0, r7
			if (uart_a_room_in_tx) {
     814:	00000000 	andeq	r0, r0, r0
     818:	01000000 	mrseq	r0, (UNDEF: 0)
				uart_a_enable_int;
     81c:	07c72b9c 	bfieq	r2, ip, (invalid: 23:7)
     820:	00b70000 	adcseq	r0, r7, r0
				*buf++ = uart_a_read;
     824:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
     828:	0000148c 	andeq	r1, r0, ip, lsl #9
				uart_a_write (*buf);
     82c:	026c0003 	rsbeq	r0, ip, #3
     830:	01040000 	mrseq	r0, (UNDEF: 4)
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	00000172 	andeq	r0, r0, r2, ror r1
     838:	0009680c 	andeq	r6, r9, ip, lsl #16
			uart_a_enable_int;
     83c:	0000d300 	andeq	sp, r0, r0, lsl #6
     840:	00055000 	andeq	r5, r5, r0
     844:	00000000 	andeq	r0, r0, r0
			return 0;
     848:	00053700 	andeq	r3, r5, r0, lsl #14
			if (len == UART_CNTRL_SETRATE) {
     84c:	06010200 	streq	r0, [r1], -r0, lsl #4
				if (__pi_uart_setrate (*((word*)buf),
     850:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
     854:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
     858:	03000003 	movweq	r0, #3
				syserror (EREQPAR, "uar");
     85c:	00001688 	andeq	r1, r0, r8, lsl #13
			syserror (ENOOPER, "uai");
     860:	3f182810 	svccc	0x00182810
			if (len == UART_CNTRL_GETRATE) {
     864:	02000000 	andeq	r0, r0, #0
				return 1;
     868:	00b00504 	adcseq	r0, r0, r4, lsl #10
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
			syserror (ENOOPER, "uai");
     870:	0000ab05 	andeq	sl, r0, r5, lsl #22
     874:	223c0300 	eorscs	r0, ip, #0, 6
     878:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     87c:	00005918 	andeq	r5, r0, r8, lsl r9
     880:	08010200 	stmdaeq	r1, {r9}
     884:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     888:	00212a03 	eoreq	r2, r1, r3, lsl #20
     88c:	19311000 	ldmdbne	r1!, {ip}
     890:	0000006c 	andeq	r0, r0, ip, rrx
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	73070202 	movwvc	r0, #29186	; 0x7202
void UART0IntHandler () {
     898:	03000002 	movweq	r0, #2
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	000017f3 	strdeq	r1, [r0], -r3
     8a0:	7f193410 	svcvc	0x00193410
     8a4:	02000000 	andeq	r0, r0, #0
     8a8:	00850704 	addeq	r0, r5, r4, lsl #14
     8ac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	00008007 	andeq	r8, r0, r7
     8b4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
		RISE_N_SHINE;
     8b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     8bc:	8a070402 	bhi	1c18cc <__ccfg+0x1a1924>
		i_trigger (devevent (UART_A, READ));
     8c0:	03000000 	movweq	r0, #0
     8c4:	0000041c 	andeq	r0, r0, ip, lsl r4
     8c8:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
     8cc:	03000000 	movweq	r0, #0
     8d0:	00001600 	andeq	r1, r0, r0, lsl #12
     8d4:	60122711 	andsvs	r2, r2, r1, lsl r7
     8d8:	05000000 	streq	r0, [r0, #-0]
     8dc:	000000a7 	andeq	r0, r0, r7, lsr #1
     8e0:	0000a706 	andeq	sl, r0, r6, lsl #14
     8e4:	09460300 	stmdbeq	r6, {r8, r9}^
     8e8:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
     8ec:	00003312 	andeq	r3, r0, r2, lsl r3
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	13f80300 	mvnsne	r0, #0, 6
     8f4:	2b110000 	blcs	4408fc <__ccfg+0x420954>
     8f8:	00004d12 	andeq	r4, r0, r2, lsl sp
		i_trigger (devevent (UART_A, WRITE));
     8fc:	00c90600 	sbceq	r0, r9, r0, lsl #12
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
     904:	03000000 	movweq	r0, #0
		RISE_N_SHINE;
     908:	00001651 	andeq	r1, r0, r1, asr r6
     90c:	73122c11 	tstvc	r2, #4352	; 0x1100
     910:	05000000 	streq	r0, [r0, #-0]
		i_trigger (devevent (UART_A, WRITE));
     914:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     918:	0002a603 	andeq	sl, r2, r3, lsl #12
     91c:	122d1100 	eorne	r1, sp, #0, 2
     920:	00000073 	andeq	r0, r0, r3, ror r0
     924:	0007a203 	andeq	sl, r7, r3, lsl #4
     928:	102e1100 	eorne	r1, lr, r0, lsl #2
     92c:	00000108 	andeq	r0, r0, r8, lsl #2
     930:	00a70407 	adceq	r0, r7, r7, lsl #8
     934:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     938:	9c093211 	sfmls	f3, 4, [r9], {17}
     93c:	09000001 	stmdbeq	r0, {r0}
}
     940:	000002c1 	andeq	r0, r0, r1, asr #5
     944:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
     948:	01000000 	mrseq	r0, (UNDEF: 0)
     94c:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
     950:	000000a4 	andeq	r0, r0, r4, lsr #1
void __buttons_setirq (int val) {
     954:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	01000000 	mrseq	r0, (UNDEF: 0)
     95c:	09000601 	stmdbeq	r0, {r0, r9, sl}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	0000028f 	andeq	r0, r0, pc, lsl #5
     964:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
     968:	01000000 	mrseq	r0, (UNDEF: 0)
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	09000501 	stmdbeq	r0, {r0, r8, sl}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	0000042b 	andeq	r0, r0, fp, lsr #8
     974:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
     978:	01000000 	mrseq	r0, (UNDEF: 0)
     97c:	09000401 	stmdbeq	r0, {r0, sl}
     980:	00000424 	andeq	r0, r0, r4, lsr #8
     984:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
}
     988:	01000000 	mrseq	r0, (UNDEF: 0)
     98c:	0a000004 	beq	9a4 <__pinlist_setirq+0xc>
     990:	00000415 	andeq	r0, r0, r5, lsl r4
     994:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
void __pinlist_setirq (int val) {
     998:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = 0; i < N_PINLIST; i++) {
     99c:	00004c0a 	andeq	r4, r0, sl, lsl #24
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a0:	033c1100 	teqeq	ip, #0, 2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9a4:	000000c9 	andeq	r0, r0, r9, asr #1
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	00790a02 	rsbseq	r0, r9, r2, lsl #20
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	3d110000 	ldccc	0, cr0, [r1, #-0]
     9b0:	0000c903 	andeq	ip, r0, r3, lsl #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	610a0300 	mrsvs	r0, (UNDEF: 58)
     9b8:	11000001 	tstne	r0, r1
     9bc:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	00040000 	andeq	r0, r4, r0
}
     9c4:	00045403 	andeq	r5, r4, r3, lsl #8
     9c8:	03411100 	movteq	r1, #4352	; 0x1100
     9cc:	0000010e 	andeq	r0, r0, lr, lsl #2
     9d0:	00019c06 	andeq	r9, r1, r6, lsl #24
void GPIOIntHandler () {
     9d4:	02b50b00 	adcseq	r0, r5, #0, 22
if (buttons_int) {
     9d8:	43110000 	tstmi	r1, #0
     9dc:	0001a81a 	andeq	sl, r1, sl, lsl r8
	buttons_disable ();
     9e0:	0b010100 	bleq	40de8 <__ccfg+0x20e40>
     9e4:	00000321 	andeq	r0, r0, r1, lsr #6
	i_trigger ((aword)&__button_list);
     9e8:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
     9ec:	01000001 	tsteq	r0, r1
     9f0:	cf040701 	svcgt	0x00040701
     9f4:	02000001 	andeq	r0, r0, #1
     9f8:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
     9fc:	cf050000 	svcgt	0x00050000
     a00:	0b000001 	bleq	a0c <GPIOIntHandler+0x38>
     a04:	0000032f 	andeq	r0, r0, pc, lsr #6
     a08:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
     a0c:	01000001 	tsteq	r0, r1
     a10:	12080801 	andne	r0, r8, #65536	; 0x10000
	RISE_N_SHINE;
     a14:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
     a18:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
     a1c:	12000002 	andne	r0, r0, #2
if (pin_sensor_int) {
     a20:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
     a24:	0a000000 	beq	a2c <GPIOIntHandler+0x58>
	i_trigger ((aword)(&__input_pins));
     a28:	0000062d 	andeq	r0, r0, sp, lsr #12
     a2c:	a7089112 	smladge	r8, r2, r1, r9
     a30:	04000000 	streq	r0, [r0], #-0
     a34:	00049c0a 	andeq	r9, r4, sl, lsl #24
     a38:	10921200 	addsne	r1, r2, r0, lsl #4
     a3c:	000000d5 	ldrdeq	r0, [r0], -r5
     a40:	32030006 	andcc	r0, r3, #6
     a44:	12000004 	andne	r0, r0, #4
     a48:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
     a4c:	1a050000 	bne	140a54 <__ccfg+0x120aac>
     a50:	0c000002 	stceq	0, cr0, [r0], {2}
	__pinsen_disable_and_clear;
     a54:	0000021a 	andeq	r0, r0, sl, lsl r2
	RISE_N_SHINE;
     a58:	00000236 	andeq	r0, r0, r6, lsr r2
     a5c:	420b000d 	andmi	r0, fp, #13
     a60:	12000000 	andne	r0, r0, #0
}
     a64:	022b0f99 	eoreq	r0, fp, #612	; 0x264
     a68:	01010000 	mrseq	r0, (UNDEF: 1)
     a6c:	00da0407 	sbcseq	r0, sl, r7, lsl #8
     a70:	01080000 	mrseq	r0, (UNDEF: 8)
     a74:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
void system_init () {
     a78:	09000002 	stmdbeq	r0, {r1}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	0000048f 	andeq	r0, r0, pc, lsl #9
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a80:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	01000000 	mrseq	r0, (UNDEF: 0)
     a88:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
     a8c:	0000003d 	andeq	r0, r0, sp, lsr r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a90:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	00000001 	andeq	r0, r0, r1
     a9c:	00028603 	andeq	r8, r2, r3, lsl #12
     aa0:	03961300 	orrseq	r1, r6, #0, 6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	0000024a 	andeq	r0, r0, sl, asr #4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa8:	00027405 	andeq	r7, r2, r5, lsl #8
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	02800c00 	addeq	r0, r0, #0, 24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	02900000 	addseq	r0, r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab4:	000d0000 	andeq	r0, sp, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	00028505 	andeq	r8, r2, r5, lsl #10
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	02eb0b00 	rsceq	r0, fp, #0, 22
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	9c130000 	ldcls	0, cr0, [r3], {-0}
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	00029017 	andeq	r9, r2, r7, lsl r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	0c010100 	stfeqs	f0, [r1], {-0}
     acc:	000000b3 	strheq	r0, [r0], -r3
     ad0:	000002ae 	andeq	r0, r0, lr, lsr #5
     ad4:	a305000d 	movwge	r0, #20493	; 0x500d
		if (port_confs [i] & 0x80)
     ad8:	0b000002 	bleq	ae8 <system_init+0x70>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	000003a7 	andeq	r0, r0, r7, lsr #7
     ae0:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
		if (port_confs [i] & 0x40)
     ae4:	01000002 	tsteq	r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	01410b01 	cmpeq	r1, r1, lsl #22
     aec:	c3120000 	tstgt	r2, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     af0:	0000df0e 	andeq	sp, r0, lr, lsl #30
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af4:	0e010100 	adfeqs	f0, f1, f0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	000004a9 	andeq	r0, r0, r9, lsr #9
	all_leds_blink;
     afc:	10016e15 	andne	r6, r1, r5, lsl lr
     b00:	000002dc 	ldrdeq	r0, [r0], -ip
     b04:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
     b08:	010f0000 	mrseq	r0, CPSR
     b0c:	000002ee 	andeq	r0, r0, lr, ror #5
     b10:	0000a710 	andeq	sl, r0, r0, lsl r7
     b14:	d60c0000 	strle	r0, [ip], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
     b1c:	0d000002 	stceq	0, cr0, [r0, #-8]
     b20:	02ee0500 	rsceq	r0, lr, #0, 10
     b24:	64110000 	ldrvs	r0, [r1], #-0
     b28:	15000004 	strne	r0, [r0, #-4]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2c:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	01000002 	tsteq	r0, r2
     b34:	039f1101 	orrseq	r1, pc, #1073741824	; 0x40000000
	IntEnable (INT_AON_RTC_COMB);
     b38:	82150000 	andshi	r0, r5, #0
     b3c:	00eb1401 	rsceq	r1, fp, r1, lsl #8
     b40:	01010000 	mrseq	r0, (UNDEF: 1)
	__pi_malloc_init ();
     b44:	00049411 	andeq	r9, r4, r1, lsl r4
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	02d81500 	sbcseq	r1, r8, #0, 10
     b4c:	0000df0e 	andeq	sp, r0, lr, lsl #30
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	12010100 	andne	r0, r1, #0, 2
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	03031508 	movweq	r1, #13576	; 0x3508
     b58:	00035209 	andeq	r5, r3, r9, lsl #4
     b5c:	22341300 	eorscs	r1, r4, #0, 6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	07150000 	ldreq	r0, [r5, -r0]
     b64:	00a70703 	adceq	r0, r7, r3, lsl #14
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	13000000 	movwne	r0, #0
     b6c:	0000057f 	andeq	r0, r0, pc, ror r5
     b70:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
	urates [0] = UART_RATE / 100;
     b74:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b78:	660e0004 	strvs	r0, [lr], -r4
	reinit_uart ();
     b7c:	15000002 	strne	r0, [r0, #-2]
	EXTRA_INITIALIZERS;
     b80:	2b030309 	blcs	c17ac <__ccfg+0xa1804>
     b84:	14000003 	strne	r0, [r0], #-3
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b88:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
     b8c:	030b1530 	movweq	r1, #46384	; 0xb530
     b90:	0003c208 	andeq	ip, r3, r8, lsl #4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	04b11300 	ldrteq	r1, [r1], #768	; 0x300
     b98:	14150000 	ldrne	r0, [r5], #-0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	00a70803 	adceq	r0, r7, r3, lsl #16
     ba0:	13000000 	movwne	r0, #0
			devinit [i] . init (devinit [i] . param);
     ba4:	000002d2 	ldrdeq	r0, [r0], -r2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
     bac:	000000a7 	andeq	r0, r0, r7, lsr #1
     bb0:	04ac1302 	strteq	r1, [ip], #770	; 0x302
	IntEnable (INT_UART0_COMB);
     bb4:	16150000 	ldrne	r0, [r5], -r0
     bb8:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
}
     bbc:	13040000 	movwne	r0, #16384	; 0x4000
	tci_run_auxiliary_timer ();
     bc0:	00000f7f 	andeq	r0, r0, pc, ror pc
		diag ("");
     bc4:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
     bc8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	045d1308 	ldrbeq	r1, [sp], #-776	; 0xfffffcf8
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
		diag ("Leftover RAM: %d bytes",
     bd4:	03c20f03 	biceq	r0, r2, #3, 30
     bd8:	130c0000 	movwne	r0, #49152	; 0xc000
     bdc:	000002cd 	andeq	r0, r0, sp, asr #5
     be0:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
     be4:	000003d2 	ldrdeq	r0, [r0], -r2
     be8:	520c002c 	andpl	r0, ip, #44	; 0x2c
     bec:	d2000003 	andle	r0, r0, #3
     bf0:	15000003 	strne	r0, [r0, #-3]
     bf4:	00000094 	muleq	r0, r4, r0
     bf8:	04070003 	streq	r0, [r7], #-3
     bfc:	0000035f 	andeq	r0, r0, pc, asr r3
     c00:	0004c30e 	andeq	ip, r4, lr, lsl #6
     c04:	031c1500 	tsteq	ip, #0, 10
     c08:	00035f1b 	andeq	r5, r3, fp, lsl pc
     c0c:	03951100 	orrseq	r1, r5, #0, 2
     c10:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
     c14:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
     c18:	01010000 	mrseq	r0, (UNDEF: 1)
     c1c:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
     c20:	f10b0000 			; <UNDEFINED> instruction: 0xf10b0000
     c24:	16000004 	strne	r0, [r0], -r4
     c28:	00a7131d 	adceq	r1, r7, sp, lsl r3
     c2c:	01010000 	mrseq	r0, (UNDEF: 1)
__attribute__ ((noreturn)) void __pi_release () {
     c30:	00075b0b 	andeq	r5, r7, fp, lsl #22
     c34:	1a1e1600 	bne	78643c <__ccfg+0x766494>
     c38:	000000b8 	strheq	r0, [r0], -r8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	eb0b0101 	bl	2c1048 <__ccfg+0x2a10a0>
	check_stack_overflow;
     c40:	16000008 	strne	r0, [r0], -r8
     c44:	00b8241e 	adcseq	r2, r8, lr, lsl r4
     c48:	01010000 	mrseq	r0, (UNDEF: 1)
	update_n_wake (MAX_WORD, NO);
     c4c:	00061a0b 	andeq	r1, r6, fp, lsl #20
     c50:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
     c54:	000003f4 	strdeq	r0, [r0], -r4
	for_all_tasks (__pi_curr) {
     c58:	63030101 	movwvs	r0, #12545	; 0x3101
     c5c:	16000005 	strne	r0, [r0], -r5
     c60:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	04070000 	streq	r0, [r7], #-0
	__SLEEP;
     c68:	00000444 	andeq	r0, r0, r4, asr #8
     c6c:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
     c70:	8d100000 	ldchi	0, cr0, [r0, #-0]
     c74:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
     c78:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
     c7c:	00047409 	andeq	r7, r4, r9, lsl #8
	switch (__pi_systat.effpdm) {
     c80:	0ac60a00 	beq	ff183488 <_estack+0xdf17e488>
     c84:	4a160000 	bmi	580c8c <__ccfg+0x560ce4>
     c88:	0004320f 	andeq	r3, r4, pc, lsl #4
     c8c:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
			__WFI ();
     c90:	16000007 	strne	r0, [r0], -r7
     c94:	008d074b 	addeq	r0, sp, fp, asr #14
     c98:	00040000 	andeq	r0, r4, r0
	check_stack_overflow;
     c9c:	0005e903 	andeq	lr, r5, r3, lsl #18
     ca0:	034c1600 	movteq	r1, #50688	; 0xc600
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	00000450 	andeq	r0, r0, r0, asr r4
     ca8:	00047405 	andeq	r7, r4, r5, lsl #8
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
			goto Redo;
     cb0:	04950000 	ldreq	r0, [r5], #0
	for_all_tasks (__pi_curr) {
     cb4:	94150000 	ldrls	r0, [r5], #-0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	03000000 	movweq	r0, #0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	093b0b00 	ldmdbeq	fp!, {r8, r9, fp}
     cc0:	0d010000 	stceq	0, cr0, [r1, #-0]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc4:	00048512 	andeq	r8, r4, r2, lsl r5
     cc8:	0c010100 	stfeqs	f0, [r1], {-0}
     ccc:	00000480 	andeq	r0, r0, r0, lsl #9
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cd0:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
     cd4:	00009415 	andeq	r9, r0, r5, lsl r4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     cdc:	000004a3 	andeq	r0, r0, r3, lsr #9
			__WFI ();
     ce0:	00094b16 	andeq	r4, r9, r6, lsl fp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce4:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
     ce8:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
}
     cec:	0000eb0c 	andeq	lr, r0, ip, lsl #22
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cf0:	0004d400 	andeq	sp, r4, r0, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf4:	00941500 	addseq	r1, r4, r0, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	00100000 	andseq	r0, r0, r0
     cfc:	0004c405 	andeq	ip, r4, r5, lsl #8
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d00:	07481700 	strbeq	r1, [r8, -r0, lsl #14]
     d04:	ec010000 	stc	0, cr0, [r1], {-0}
     d08:	0004d40d 	andeq	sp, r4, sp, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0c:	03050100 	movweq	r0, #20736	; 0x5100
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	00002dfc 	strdeq	r2, [r0], -ip
     d14:	0005c818 	andeq	ip, r5, r8, lsl r8
     d18:	010c0100 	mrseq	r0, (UNDEF: 28)
     d1c:	0000a70d 	andeq	sl, r0, sp, lsl #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	48030500 	stmdami	r3, {r8, sl}
     d24:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	00000236 	andeq	r0, r0, r6, lsr r2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
     d30:	00840305 	addeq	r0, r4, r5, lsl #6
     d34:	a70c2000 	strge	r2, [ip, -r0]
     d38:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     d3c:	15000005 	strne	r0, [r0, #-5]
			SysCtrlSetRechargeBeforePowerDown
     d40:	00000094 	muleq	r0, r4, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d44:	49180000 	ldmdbmi	r8, {}	; <UNPREDICTABLE>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	01000005 	tsteq	r0, r5
     d4c:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	05000005 	streq	r0, [r0, #-5]
     d54:	00004a03 	andeq	r4, r0, r3, lsl #20
     d58:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5c:	8c010000 	stchi	0, cr0, [r1], {-0}
     d60:	03050704 	movweq	r0, #22276	; 0x5704
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	2000008c 	andcs	r0, r0, ip, lsl #1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	053d011a 	ldreq	r0, [sp, #-282]!	; 0xfffffee6
     d6c:	72010000 	andvc	r0, r1, #0
     d70:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
			while (!(AONWUCPowerStatusGet () &
     d78:	e800000e 	stmda	r0, {r1, r2, r3}
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	0100000e 	tsteq	r0, lr
     d80:	0005849c 	muleq	r5, ip, r4
     d84:	05381b00 	ldreq	r1, [r8, #-2816]!	; 0xfffff500
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	05720000 	ldrbeq	r0, [r2, #-0]!
     d8c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
     d90:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
     d94:	0000bd11 	andeq	fp, r0, r1, lsl sp
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
     d9c:	ca000011 	bgt	de8 <__pi_release+0x1b8>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     da0:	cc00000e 	stcgt	0, cr0, [r0], {14}
     da4:	0100000e 	tsteq	r0, lr
			SysCtrlAdjustRechargeAfterPowerDown ();
     da8:	0002058d 	andeq	r0, r2, sp, lsl #11
			reinit_uart ();
     dac:	07e2011e 			; <UNDEFINED> instruction: 0x07e2011e
     db0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
     db4:	0c302105 	ldfeqs	f2, [r0], #-20	; 0xffffffec
}
     db8:	0e880000 	cdpeq	0, 8, cr0, cr8, cr0, {0}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
     dc0:	000007e4 	andeq	r0, r0, r4, ror #15
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	0007ef1f 	andeq	lr, r7, pc, lsl pc
     dc8:	01080d00 	tsteq	r8, r0, lsl #26
     dcc:	0011d020 	andseq	sp, r1, r0, lsr #32
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	000c3000 	andeq	r3, ip, r0
     dd4:	00039800 	andeq	r9, r3, r0, lsl #16
     dd8:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ddc:	0005bf02 	andeq	fp, r5, r2, lsl #30
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	11df2100 	bicsne	r2, pc, r0, lsl #2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	22000000 	andcs	r0, r0, #0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	00000812 	andeq	r0, r0, r2, lsl r8
     dec:	00000c4a 	andeq	r0, r0, sl, asr #24
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     df4:	b302270d 	movwlt	r2, #9997	; 0x270d
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	23000007 	movwcs	r0, #7
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e00:	00082024 	andeq	r2, r8, r4, lsr #32
     e04:	000cd800 	andeq	sp, ip, r0, lsl #16
			PRCMPowerDomainOff (
     e08:	125c2500 	subsne	r2, ip, #0, 10
     e0c:	0c4a0000 	mareq	acc0, r0, sl
	__SLEEP;
     e10:	03e00000 	mvneq	r0, #0
     e14:	b3010000 	movwlt	r0, #4096	; 0x1000
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	381d0404 	ldmdacc	sp, {r2, sl}
	goto Redo;
     e1c:	c2000014 	andgt	r0, r0, #20
     e20:	ce00000c 	cdpgt	0, 0, cr0, cr0, cr12, {0}
     e24:	0100000c 	tsteq	r0, ip
     e28:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
     e2c:	0000125c 	andeq	r1, r0, ip, asr r2
     e30:	00000cd6 	ldrdeq	r0, [r0], -r6
     e34:	00000cd8 	ldrdeq	r0, [r0], -r8
     e38:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
     e3c:	0012c025 	andseq	ip, r2, r5, lsr #32
     e40:	000cee00 	andeq	lr, ip, r0, lsl #28
     e44:	0003f800 	andeq	pc, r3, r0, lsl #16
     e48:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
     e4c:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
     e50:	0cee0000 	stcleq	0, cr0, [lr]
     e54:	04180000 	ldreq	r0, [r8], #-0
     e58:	c5010000 	strgt	r0, [r1, #-0]
     e5c:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
     e60:	f6000012 			; <UNDEFINED> instruction: 0xf6000012
     e64:	3800000c 	stmdacc	r0, {r2, r3}
     e68:	01000004 	tsteq	r0, r4
     e6c:	510404c0 	smlabtpl	r4, r0, r4, r0
     e70:	21000006 	tstcs	r0, r6
     e74:	0000129d 	muleq	r0, sp, r2
     e78:	125c1d00 	subsne	r1, ip, #0, 26
     e7c:	0d060000 	stceq	0, cr0, [r6, #-0]
     e80:	0d080000 	stceq	0, cr0, [r8, #-0]
     e84:	c3010000 	movwgt	r0, #4096	; 0x1000
int main (void) {
     e88:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	0a000014 	beq	ee4 <main+0x5c>
     e90:	5800000d 	stmdapl	r0, {r0, r2, r3}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	01000004 	tsteq	r0, r4
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	200404d5 	ldrdcs	r0, [r4], -r5
	system_init ();
     e9c:	0000144e 	andeq	r1, r0, lr, asr #8
	tcv_init ();
     ea0:	00000d20 	andeq	r0, r0, r0, lsr #26
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	00000478 	andeq	r0, r0, r8, ror r4
     ea8:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	0000068e 	andeq	r0, r0, lr, lsl #13
     eb0:	00145d21 	andseq	r5, r4, r1, lsr #26
     eb4:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	44000012 	strmi	r0, [r0], #-18	; 0xffffffee
     ebc:	4600000d 	strmi	r0, [r0], -sp
	delay (16, 0);
     ec0:	0100000d 	tsteq	r0, sp
     ec4:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
     ec8:	00001438 	andeq	r1, r0, r8, lsr r4
	__pi_release ();
     ecc:	00000d64 	andeq	r0, r0, r4, ror #26
     ed0:	00000490 	muleq	r0, r0, r4
     ed4:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
     ed8:	00127f25 	andseq	r7, r2, r5, lsr #30
     edc:	000d6800 	andeq	r6, sp, r0, lsl #16
     ee0:	0004a800 	andeq	sl, r4, r0, lsl #16
     ee4:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
static void killev (__pi_pcb_t *pid) {
     ee8:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
	wfun = (aword)(pid->code);
     eec:	0d720000 	ldcleq	0, cr0, [r2, #-0]
	for_all_tasks (i) {
     ef0:	0d760000 	ldcleq	0, cr0, [r6, #-0]
		for (j = 0; j < nevents (i); j++) {
     ef4:	ed010000 	stc	0, cr0, [r1, #-0]
     ef8:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
     efc:	9d210000 	stcls	0, cr0, [r1, #-0]
			    || i->Events [j] . Event == wfun
     f00:	00000012 	andeq	r0, r0, r2, lsl r0
		for (j = 0; j < nevents (i); j++) {
     f04:	00144325 	andseq	r4, r4, r5, lsr #6
			if (i->Events [j] . Event == (aword)pid
     f08:	000d9600 	andeq	r9, sp, r0, lsl #12
     f0c:	0004c000 	andeq	ip, r4, r0
     f10:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
				wakeupev (i, j);
     f14:	144e2004 	strbne	r2, [lr], #-4
     f18:	0d980000 	ldceq	0, cr0, [r8]
	for_all_tasks (i) {
     f1c:	04d80000 	ldrbeq	r0, [r8], #0
}
     f20:	fa010000 	blx	40f28 <__ccfg+0x20f80>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	07080404 	streq	r0, [r8, -r4, lsl #8]
static void qfree (aword *ch) {
     f28:	5d210000 	stcpl	0, cr0, [r1, #-0]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2c:	00000014 	andeq	r0, r0, r4, lsl r0
	cc = (aword*)(mpools + MA_NP);
     f30:	0012b61d 	andseq	fp, r2, sp, lsl r6
	m_setnextp (ch, chunk);
     f34:	000da000 	andeq	sl, sp, r0
	m_setnextp (cc, ch);
     f38:	000da400 	andeq	sl, sp, r0, lsl #8
}
     f3c:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f40:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
     f44:	0da40000 	stceq	0, cr0, [r4]
     f48:	0da60000 	stceq	0, cr0, [r6]
			m_setnextp (cc, m_nextp (chunk));
     f4c:	00010000 	andeq	r0, r1, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
     f54:	ae00000b 	cdpge	0, 0, cr0, cr0, cr11, {0}
     f58:	ba00000d 	blt	f94 <qfree+0x70>
     f5c:	0100000d 	tsteq	r0, sp
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	27000007 	strcs	r0, [r0, -r7]
     f68:	00001311 	andeq	r1, r0, r1, lsl r3
     f6c:	00000dae 	andeq	r0, r0, lr, lsr #27
			m_setnextp (cc, m_nextp (chunk));
     f70:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
     f78:	00132d21 	andseq	r2, r3, r1, lsr #26
     f7c:	13202100 	nopne	{0}	; <UNPREDICTABLE>
     f80:	00000000 	andeq	r0, r0, r0
     f84:	00125c1d 	andseq	r5, r2, sp, lsl ip
     f88:	000de200 	andeq	lr, sp, r0, lsl #4
			if (m_size (chunk) >= m_size (ch))
     f8c:	000de400 	andeq	lr, sp, r0, lsl #8
     f90:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
     f94:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
		chunk = m_nextp (chunk))
     f98:	0de40000 	stcleq	0, cr0, [r4]
     f9c:	0df40000 	ldcleq	0, cr0, [r4]
     fa0:	41010000 	mrsmi	r0, (UNDEF: 1)
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
	diag_wait (a);
     fa8:	f4000012 	vst4.8	{d0-d3}, [r0 :64], r2
	diag_wchar (c, a);
     fac:	f600000d 			; <UNDEFINED> instruction: 0xf600000d
     fb0:	0100000d 	tsteq	r0, sp
}
     fb4:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
     fb8:	0000127f 	andeq	r1, r0, pc, ror r2
	syserror (ESTATE, "state");
     fbc:	00000df6 	strdeq	r0, [r0], -r6
     fc0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fc4:	0b054701 	bleq	152bd0 <__ccfg+0x132c28>
     fc8:	00146b25 	andseq	r6, r4, r5, lsr #22
void update_n_wake (word min, Boolean force) {
     fcc:	000dfe00 	andeq	pc, sp, r0, lsl #28
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	00050800 	andeq	r0, r5, r0, lsl #16
     fd4:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
     fd8:	28000004 	stmdacs	r0, {r2}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fdc:	000011ed 	andeq	r1, r0, sp, ror #3
     fe0:	00000c64 	andeq	r0, r0, r4, ror #24
     fe4:	00000c66 	andeq	r0, r0, r6, ror #24
     fe8:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
     fec:	000011f7 	strdeq	r1, [r0], -r7
     ff0:	00000c92 	muleq	r0, r2, ip
     ff4:	00000c94 	muleq	r0, r4, ip
     ff8:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
     ffc:	000011f7 	strdeq	r1, [r0], -r7
    1000:	00000e18 	andeq	r0, r0, r8, lsl lr
    1004:	00000e1a 	andeq	r0, r0, sl, lsl lr
    1008:	0002270d 	andeq	r2, r2, sp, lsl #14
    100c:	085a011a 	ldmdaeq	sl, {r1, r3, r4, r8}^
		for_all_tasks (i) {
    1010:	5c010000 	stcpl	0, cr0, [r1], {-0}
	__pi_mintk = znew + min;
    1014:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
			if (!twaiting (i))
    1020:	01000000 	mrseq	r0, (UNDEF: 0)
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1024:	0008129c 	muleq	r8, ip, r2
    1028:	63732900 	cmnvs	r3, #0, 18
    102c:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
    1030:	0000a707 	andeq	sl, r0, r7, lsl #14
    1034:	0000ca00 	andeq	ip, r0, r0, lsl #20
    1038:	7a2a0000 	bvc	a81040 <__ccfg+0xa61098>
    103c:	01000007 	tsteq	r0, r7
    1040:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
    1044:	0000082a 	andeq	r0, r0, sl, lsr #16
    1048:	000a132b 	andeq	r1, sl, fp, lsr #6
    104c:	04ad0100 	strteq	r0, [sp], #256	; 0x100
    1050:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
				wakeuptm (i);
    1054:	0000071e 	andeq	r0, r0, lr, lsl r7
    1058:	06047e01 	streq	r7, [r4], -r1, lsl #28
		for_all_tasks (i) {
    105c:	00000001 	andeq	r0, r0, r1
				d = i->Timer - znew;
    1060:	00000000 	andeq	r0, r0, r0
    1064:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    1068:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
		if ((word)(__pi_mintk - znew) < min) 
    106c:	000002c3 	andeq	r0, r0, r3, asr #5
    1070:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
    1074:	000000a7 	andeq	r0, r0, r7, lsr #1
	__pi_old = znew;
    1078:	000000dd 	ldrdeq	r0, [r0], -sp
}
    107c:	a7011e00 	strge	r1, [r1, -r0, lsl #28]
	TCI_RUN_DELAY_TIMER;
    1080:	01000005 	tsteq	r0, r5
}
    1084:	78060401 	stmdavc	r6, {r0, sl}
    1088:	3000000a 	andcc	r0, r0, sl
    108c:	0100000c 	tsteq	r0, ip
    1090:	000a1e9c 	muleq	sl, ip, lr
    1094:	0ba22e00 	bleq	fe88c89c <_estack+0xde88789c>
void proceed (word state) {
    1098:	0ba80000 	bleq	fea010a0 <_estack+0xde9fc0a0>
	prcdstate (__pi_curr, state);
    109c:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    10a0:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
	release;
    10a4:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
    10a8:	00008d0b 	andeq	r8, r0, fp, lsl #26
void __pi_wait (aword event, word state) {
    10ac:	43250000 			; <UNDEFINED> instruction: 0x43250000
	sint j = nevents (__pi_curr);
    10b0:	a2000014 	andge	r0, r0, #20
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	7800000a 	stmdavc	r0, {r1, r3}
    10b8:	01000002 	tsteq	r0, r2
    10bc:	20020408 	andcs	r0, r2, r8, lsl #8
		syserror (ENEVENTS, "sw");
    10c0:	00000f54 	andeq	r0, r0, r4, asr pc
    10c4:	00000aa4 	andeq	r0, r0, r4, lsr #21
	setestate (__pi_curr->Events [j], state, event);
    10c8:	00000298 	muleq	r0, r8, r2
	incwait (__pi_curr);
    10cc:	02040b01 	andeq	r0, r4, #1024	; 0x400
	setestate (__pi_curr->Events [j], state, event);
    10d0:	0000091a 	andeq	r0, r0, sl, lsl r9
}
    10d4:	00029823 	andeq	r9, r2, r3, lsr #16
    10d8:	0f612f00 	svceq	0x00612f00
    10dc:	6d300000 	ldcvs	0, cr0, [r0, #-0]
void __pi_trigger (aword event) {
    10e0:	9800000f 	stmdals	r0, {r0, r1, r2, r3}
	for_all_tasks (i) {
    10e4:	31000002 	tstcc	r0, r2
		for (j = 0; j < nevents (i); j++) {
    10e8:	00000f6e 	andeq	r0, r0, lr, ror #30
    10ec:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10f0:	0013c922 	andseq	ip, r3, r2, lsr #18
    10f4:	000aae00 	andeq	sl, sl, r0, lsl #28
			if (i->Events [j] . Event == event) {
    10f8:	0002b800 	andeq	fp, r2, r0, lsl #16
    10fc:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    1100:	000008e7 	andeq	r0, r0, r7, ror #17
				wakeupev (i, j);
    1104:	0013e521 	andseq	lr, r3, r1, lsr #10
    1108:	13d82100 	bicsne	r2, r8, #0, 2
	for_all_tasks (i) {
    110c:	22000000 	andcs	r0, r0, #0
}
    1110:	000013f3 	strdeq	r1, [r0], -r3
aword __pi_join (aword pid, word st) {
    1114:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
	for_all_tasks (i) {
    1118:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    111c:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
	return 0;
    1120:	21000009 	tstcs	r0, r9
		if ((aword)i == pid) {
    1124:	00001402 	andeq	r1, r0, r2, lsl #8
			__pi_wait (pid, st);
    1128:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
}
    112c:	0ab60000 	beq	fed81134 <_estack+0xded7c134>
	for_all_tasks (i) {
    1130:	02e80000 	rsceq	r0, r8, #0
    1134:	fc010000 	stc2	0, cr0, [r1], {-0}
void delay (word d, word state) {
    1138:	141f2104 	ldrne	r2, [pc], #-260	; 1140 <delay+0x8>
	settstate (__pi_curr, state);
    113c:	00000000 	andeq	r0, r0, r0
    1140:	10200000 	eorne	r0, r0, r0
    1144:	f6000014 			; <UNDEFINED> instruction: 0xf6000014
    1148:	0000000a 	andeq	r0, r0, sl
	update_n_wake (d, YES);
    114c:	01000003 	tsteq	r0, r3
    1150:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
	__pi_curr->Timer = __pi_old + d;
    1154:	21000009 	tstcs	r0, r9
    1158:	0000141f 	andeq	r1, r0, pc, lsl r4
	inctimer (__pi_curr);
    115c:	14102000 	ldrne	r2, [r0], #-0
    1160:	0af80000 	beq	ffe01168 <_estack+0xdfdfc168>
    1164:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
}
    1168:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    116c:	09500204 	ldmdbeq	r0, {r2, r9}^
	if (fun == NULL)
    1170:	1f210000 	svcne	0x00210000
		return (int) __pi_curr;
    1174:	00000014 	andeq	r0, r0, r4, lsl r0
    1178:	0013f320 	andseq	pc, r3, r0, lsr #6
	for_all_tasks (i)
    117c:	000b1200 	andeq	r1, fp, r0, lsl #4
}
    1180:	00033800 	andeq	r3, r3, r0, lsl #16
		if (i->code == fun)
    1184:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
	for_all_tasks (i)
    1188:	00096b02 	andeq	r6, r9, r2, lsl #22
    118c:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    1190:	26000000 	strcs	r0, [r0], -r0
int __pi_strlen (const char *s) {
    1194:	000013f3 	strdeq	r1, [r0], -r3
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	00000b18 	andeq	r0, r0, r8, lsl fp
}
    119c:	00000b1a 	andeq	r0, r0, sl, lsl fp
	for (i = 0; *(s+i) != '\0'; i++);
    11a0:	02040e01 	andeq	r0, r4, #1, 28
	while (n--)
    11a4:	00000986 	andeq	r0, r0, r6, lsl #19
    11a8:	00140221 	andseq	r0, r4, r1, lsr #4
		*dest++ = *src++;
    11ac:	34200000 	strtcc	r0, [r0], #-0
    11b0:	2a000012 	bcs	1200 <io+0x24>
    11b4:	5000000b 	andpl	r0, r0, fp
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	01000003 	tsteq	r0, r3
		syserror (EREQPAR, "addv");
    11bc:	a102041b 	tstge	r2, fp, lsl r4
		syserror (ERESOURCE, "addv");
    11c0:	21000009 	tstcs	r0, r9
	if (ioreq [loc] != NULL)
    11c4:	00001243 	andeq	r1, r0, r3, asr #4
    11c8:	0ccb2600 	stcleq	6, cr2, [fp], {0}
		syserror (ERESOURCE, "addv");
    11cc:	0b540000 	bleq	15011d4 <__ccfg+0x14e122c>
	ioreq [loc] = rf;
    11d0:	0b7e0000 	bleq	1f811d8 <__ccfg+0x1f61230>
}
    11d4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    11d8:	09c80204 	stmibeq	r8, {r2, r9}^
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	43250000 			; <UNDEFINED> instruction: 0x43250000
    11e0:	72000014 	andvc	r0, r0, #20
    11e4:	6800000b 	stmdavs	r0, {r0, r1, r3}
    11e8:	01000003 	tsteq	r0, r3
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ec:	00020301 	andeq	r0, r2, r1, lsl #6
    11f0:	0012ab26 	andseq	sl, r2, r6, lsr #22
    11f4:	000b8e00 	andeq	r8, fp, r0, lsl #28
		syserror (ENODEVICE, "io");
    11f8:	000ba200 	andeq	sl, fp, r0, lsl #4
    11fc:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
	if (len == 0)
    1200:	0009ef03 	andeq	lr, r9, r3, lsl #30
	ret = (ioreq [dev]) (operation, buf, len);
    1204:	12b61d00 	adcsne	r1, r6, #0, 26
    1208:	0b8e0000 	bleq	fe381210 <_estack+0xde37c210>
	if (ret >= 0)
    120c:	0b920000 	bleq	fe481214 <_estack+0xde47c214>
	if (ret == -1) {
    1210:	140b0000 	strne	r0, [fp], #-0
    1214:	33000501 	movwcc	r0, #1281	; 0x501
		if (retry == WNONE)
    1218:	00000b95 	muleq	r0, r5, fp
		iowait (dev, operation, retry);
    121c:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1220:	00000380 	andeq	r0, r0, r0, lsl #7
    1224:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
			release;
    1228:	00131133 	andseq	r1, r3, r3, lsr r1
	if (ret == -2) {
    122c:	000ba800 	andeq	sl, fp, r0, lsl #16
		if (retry != WNONE) {
    1230:	00038000 	andeq	r8, r3, r0
    1234:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
			iowait (dev, operation, retry);
    1238:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
    123c:	20210000 	eorcs	r0, r1, r0
			(ioreq [dev]) (NONE, buf, len);
    1240:	00000013 	andeq	r0, r0, r3, lsl r0
    1244:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    1248:	00000881 	andeq	r0, r0, r1, lsl #17
		(ioreq [dev]) (NONE, buf, len);
    124c:	0603ed01 	streq	lr, [r3], -r1, lsl #26
    1250:	00099801 	andeq	r9, r9, r1, lsl #16
    1254:	0009d400 	andeq	sp, r9, r0, lsl #8
}
    1258:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
	if (retry != WNONE) {
    125c:	3400000a 	strcc	r0, [r0], #-10
		delay (-ret - 2, retry);
    1260:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1264:	1c03ed01 	stcne	13, cr14, [r3], {1}
    1268:	0000008d 	andeq	r0, r0, sp, lsl #1
    126c:	69295001 	stmdbvs	r9!, {r0, ip, lr}
		release;
    1270:	03ef0100 	mvneq	r0, #0, 2
    1274:	00008d06 	andeq	r8, r0, r6, lsl #26
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	00010e00 	andeq	r0, r1, r0, lsl #28
    127c:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
    1280:	03f00100 	mvnseq	r0, #0, 2
    1284:	0000df08 	andeq	sp, r0, r8, lsl #30
    1288:	00012c00 	andeq	r2, r1, r0, lsl #24
		syserror (ERESOURCE, "mal1");
    128c:	11ed2500 	mvnne	r2, r0, lsl #10
    1290:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1294:	02380000 	eorseq	r0, r8, #0
    1298:	f2010000 	vhadd.s8	d0, d1, d0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	ac200203 	sfmge	f0, 4, [r0], #-12
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a0:	9e000013 	mcrls	0, 0, r0, cr0, cr3, {0}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a4:	50000009 	andpl	r0, r0, r9
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a8:	01000002 	tsteq	r0, r2
    12ac:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
}
    12b0:	3500000a 	strcc	r0, [r0, #-10]
    12b4:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    12b8:	0000012c 	andeq	r0, r0, ip, lsr #2
    12bc:	11f71d00 	mvnsne	r1, r0, lsl #26
    12c0:	09c20000 	stmibeq	r2, {}^	; <UNPREDICTABLE>
    12c4:	09c40000 	stmibeq	r4, {}^	; <UNPREDICTABLE>
void __pi_free (aword *ch) {
    12c8:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	2c000203 	sfmcs	f0, 4, [r0], {3}
    12d0:	00082501 	andeq	r2, r8, r1, lsl #10
		syserror (EMALLOC, "malg");
    12d4:	03da0100 	bicseq	r0, sl, #0, 2
    12d8:	09540106 	ldmdbeq	r4, {r1, r2, r8}^
	mcfree [MA_NP] += m_size (ch);
    12dc:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
		m_size (ch) ^= MALLOC_UMASK;
    12e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12e4:	00000b2c 	andeq	r0, r0, ip, lsr #22
	mcfree [MA_NP] += m_size (ch);
    12e8:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
	QFREE;
    12ec:	03da0100 	bicseq	r0, sl, #0, 2
	if (mevent [MA_NP] . nwait) {
    12f0:	00008d1c 	andeq	r8, r0, ip, lsl sp
    12f4:	1c500100 	ldfnee	f0, [r0], {-0}
		trigger ((aword)(&(mevent [MA_NP])));
    12f8:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
		mevent [MA_NP] . nwait --;
    12fc:	008d0603 	addeq	r0, sp, r3, lsl #12
}
    1300:	62290000 	eorvs	r0, r9, #0
    1304:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    1308:	00df0803 	sbcseq	r0, pc, r3, lsl #16
    130c:	013f0000 	teqeq	pc, r0
void kill (aword pid) {
    1310:	ed250000 	stc	0, cr0, [r5, #-0]
		pid = (aword) __pi_curr;
    1314:	54000011 	strpl	r0, [r0], #-17	; 0xffffffef
	j = NULL;
    1318:	f0000009 			; <UNDEFINED> instruction: 0xf0000009
	for_all_tasks (i) {
    131c:	01000001 	tsteq	r0, r1
	syserror (EREQPAR, "kpi");
    1320:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
    1324:	000013ac 	andeq	r1, r0, ip, lsr #7
		if ((aword)i == pid) {
    1328:	00000958 	andeq	r0, r0, r8, asr r9
    132c:	00000208 	andeq	r0, r0, r8, lsl #4
				__PCB = i->Next;
    1330:	0303e201 	movweq	lr, #12801	; 0x3201
			killev (i);
    1334:	00000b1a 	andeq	r0, r0, sl, lsl fp
			ufree (i);
    1338:	0013bb35 	andseq	fp, r3, r5, lsr fp
			if (i == __pi_curr)
    133c:	00015200 	andeq	r5, r1, r0, lsl #4
    1340:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
				release;
    1344:	86000011 			; <UNDEFINED> instruction: 0x86000011
				j->Next = i->Next;
    1348:	88000009 	stmdahi	r0, {r0, r3}
    134c:	01000009 	tsteq	r0, r9
    1350:	000203e6 	andeq	r0, r2, r6, ror #7
}
    1354:	0892011e 	ldmeq	r2, {r1, r2, r3, r4, r8}
    1358:	c6010000 	strgt	r0, [r1], -r0
    135c:	09d40603 	ldmibeq	r4, {r0, r1, r9, sl}^
void killall (fsmcode fun) {
    1360:	0a780000 	beq	1e01368 <__ccfg+0x1de13c0>
	j = NULL;
    1364:	9c010000 	stcls	0, cr0, [r1], {-0}
	for (i = __PCB; i != NULL; ) {
    1368:	00000b95 	muleq	r0, r5, fp
			if (i == __pi_curr)
    136c:	0009e62e 	andeq	lr, r9, lr, lsr #12
	for (i = __PCB; i != NULL; ) {
    1370:	000a1400 	andeq	r1, sl, r0, lsl #8
	if (rel)
    1374:	000b6e00 	andeq	r6, fp, r0, lsl #28
		release;
    1378:	006a3600 	rsbeq	r3, sl, r0, lsl #12
		if (i->code == fun) {
    137c:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
    1380:	65000000 	strvs	r0, [r0, #-0]
			if (j == NULL)
    1384:	36000001 	strcc	r0, [r0], -r1
				__PCB = k;
    1388:	03070069 	movweq	r0, #28777	; 0x7069
			if (i == __pi_curr)
    138c:	0003f402 	andeq	pc, r3, r2, lsl #8
				rel = YES;
    1390:	00017800 	andeq	r7, r1, r0, lsl #16
			killev (i);
    1394:	26370000 	ldrtcs	r0, [r7], -r0
			ufree (i);
    1398:	5400000a 	strpl	r0, [r0], #-10
			i = k;
    139c:	3600000a 	strcc	r0, [r0], -sl
    13a0:	0208006a 	andeq	r0, r8, #106	; 0x6a
				j->Next = k;
    13a4:	00008d02 	andeq	r8, r0, r2, lsl #26
    13a8:	00018b00 	andeq	r8, r1, r0, lsl #22
}
    13ac:	00693600 	rsbeq	r3, r9, r0, lsl #12
    13b0:	f4020208 	vst1.8	{d0-d3}, [r2], r8
    13b4:	9e000003 	cdpls	0, 0, cr0, cr0, cr3, {0}
	if (size < 8)
    13b8:	00000001 	andeq	r0, r0, r1
		_size = 2;
    13bc:	06a63800 	strteq	r3, [r6], r0, lsl #16
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c0:	bb010000 	bllt	413c8 <__ccfg+0x21420>
		_size = (((aword)size) + 3) >> 2;
    13c4:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	000a0301 	andeq	r0, sl, r1, lsl #6
		_size = (((aword)size) + 3) >> 2;
    13cc:	03820100 	orreq	r0, r2, #0, 2
		if (mevent [MA_NP] . nfail != 255)
    13d0:	00089406 	andeq	r9, r8, r6, lsl #8
    13d4:	00095400 	andeq	r5, r9, r0, lsl #8
			mevent [MA_NP] . nfail ++;
    13d8:	289c0100 	ldmcs	ip, {r8}
		mnfree [MA_NP] = 0;
    13dc:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
    13e0:	000008c0 	andeq	r0, r0, r0, asr #17
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	000008ee 	andeq	r0, r0, lr, ror #17
    13e8:	00000be3 	andeq	r0, r0, r3, ror #23
			syserror (EMALLOC, "malc");
    13ec:	01006a29 	tsteq	r0, r9, lsr #20
    13f0:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
		if (m_size (chunk) >= _size)
    13f4:	b1000000 	mrslt	r0, (UNDEF: 0)
    13f8:	29000001 	stmdbcs	r0, {r0}
		chunk = m_nextp (chunk)) {
    13fc:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
		m_setnextp (cc, m_nextp (chunk));
    1400:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1404:	01c40000 	biceq	r0, r4, r0
    1408:	1b000000 	blne	1410 <__pi_malloc+0x58>
			m_size (chunk) = _size;
    140c:	000001d8 	ldrdeq	r0, [r0], -r8
			cc = chunk + _size + m_hdrlen;
    1410:	00000c0b 	andeq	r0, r0, fp, lsl #24
    1414:	01006a29 	tsteq	r0, r9, lsr #20
			m_size (cc) = waste - m_hdrlen;
    1418:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
			QFREE;
    141c:	d7000000 	strle	r0, [r0, -r0]
		mevent [MA_NP] . nfail = 0;
    1420:	29000001 	stmdbcs	r0, {r0}
		mcfree [MA_NP] -= m_size (chunk);
    1424:	8f010069 	svchi	0x00010069
    1428:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    142c:	01ea0000 	mvneq	r0, r0
    1430:	33000000 	movwcc	r0, #0
		m_size (chunk) |= MALLOC_UMASK;
    1434:	000012e7 	andeq	r1, r0, r7, ror #5
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1438:	00000894 	muleq	r0, r4, r8
		m_size (chunk) |= MALLOC_UMASK;
    143c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
			mnfree [MA_NP] = mcfree [MA_NP];
    1440:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
}
    1444:	00130321 	andseq	r0, r3, r1, lsr #6
    1448:	12f62100 	rscsne	r2, r6, #0, 2
    144c:	00000000 	andeq	r0, r0, r0
    1450:	0007aa39 	andeq	sl, r7, r9, lsr sl
    1454:	037d0100 	cmneq	sp, #0, 2
    1458:	0438010d 	ldrteq	r0, [r8], #-269	; 0xfffffef3
    145c:	04440000 	strbeq	r0, [r4], #-0
aword __pi_fork (fsmcode func, aword data) {
    1460:	9c010000 	stcls	0, cr0, [r1], {-0}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1464:	00000c52 	andeq	r0, r0, r2, asr ip
    1468:	0009612d 	andeq	r6, r9, sp, lsr #2
    146c:	037d0100 	cmneq	sp, #0, 2
		if ((j = __PCB) == NULL)
    1470:	00008d1f 	andeq	r8, r0, pc, lsl sp
	i->Next = NULL;
    1474:	0001fd00 	andeq	pc, r1, r0, lsl #26
	i->data = data;
    1478:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
		if ((j = __PCB) == NULL)
    147c:	01000009 	tsteq	r0, r9
}
    1480:	010c0310 	tsteq	ip, r0, lsl r3
			for (; j->Next != NULL; j = j->Next);
    1484:	0000008d 	andeq	r0, r0, sp, lsl #1
    1488:	00000784 	andeq	r0, r0, r4, lsl #15
	return (aword) i;
    148c:	00000894 	muleq	r0, r4, r8
    1490:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
	if (mevent [MA_NP] . nwait != 255)
    1494:	2b2d0000 	blcs	b4149c <__ccfg+0xb214f4>
    1498:	01000007 	tsteq	r0, r7
    149c:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
		mevent [MA_NP] . nwait ++;
    14a0:	1b000000 	blne	14a8 <__pi_waitmem+0x14>
	wait ((aword)(&(mevent [MA_NP])), state);
    14a4:	3b000002 	blcc	14b4 <diag+0x8>
    14a8:	00667562 	rsbeq	r7, r6, r2, ror #10
void diag (const char *mess, ...) {
    14ac:	2f031001 	svccs	0x00031001
    14b0:	000001c9 	andeq	r0, r0, r9, asr #3
    14b4:	0000022e 	andeq	r0, r0, lr, lsr #4
	diag_disable_int (a, is);
    14b8:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
    14bc:	03100100 	tsteq	r0, #0, 2
    14c0:	00008d38 	andeq	r8, r0, r8, lsr sp
				d = (bc == 16) ? 10000 : 1000000000;
    14c4:	0002d000 	andeq	sp, r2, r0
	diag_disable_int (a, is);
    14c8:	06522b00 	ldrbeq	r2, [r2], -r0, lsl #22
	while (*mess != '\0') {
    14cc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
	dgout ('\r');
    14d0:	532b0103 			; <UNDEFINED> instruction: 0x532b0103
	dgout ('\n');
    14d4:	01000007 	tsteq	r0, r7
    14d8:	2701033d 	smladxcs	r1, sp, r3, r0
    14dc:	00000d44 	andeq	r0, r0, r4, asr #26
	diag_wait (a);
    14e0:	00000866 	andeq	r0, r0, r6, ror #16
	diag_enable_int (a, is);
    14e4:	00000868 	andeq	r0, r0, r8, ror #16
    14e8:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
}
    14ec:	000d5821 	andeq	r5, sp, r1, lsr #16
    14f0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    14f4:	000007f4 	strdeq	r0, [r0], -r4
		if (*mess == '%') {
    14f8:	0d02fc01 	stceq	12, cr15, [r2, #-4]
    14fc:	07f53c01 	ldrbeq	r3, [r5, r1, lsl #24]!
			if (*mess == 'l') {
    1500:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1504:	074c0d02 	strbeq	r0, [ip, -r2, lsl #26]
				mess++;
    1508:	07840000 	streq	r0, [r4, r0]
				val = va_arg (ap, lword);
    150c:	9c010000 	stcls	0, cr0, [r1], {-0}
				bc = 32;
    1510:	00000d44 	andeq	r0, r0, r4, asr #26
				bc = 16;
    1514:	00133b20 	andseq	r3, r3, r0, lsr #22
			switch (*mess) {
    1518:	00074c00 	andeq	r4, r7, r0, lsl #24
    151c:	0001a000 	andeq	sl, r1, r0
    1520:	02f50100 	rscseq	r0, r5, #0, 2
				dgout ('%');
    1524:	000d0702 	andeq	r0, sp, r2, lsl #14
    1528:	134a2100 	movtne	r2, #41216	; 0xa100
				dgout (*mess);
    152c:	26000000 	strcs	r0, [r0], -r0
    1530:	00001375 	andeq	r1, r0, r5, ror r3
			switch (*mess) {
    1534:	00000758 	andeq	r0, r0, r8, asr r7
					v = __pi_hex_enc_table [
    1538:	0000075e 	andeq	r0, r0, lr, asr r7
					i += 4;
    153c:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
					(val >> (bc - i)) & 0xf];
    1540:	00000d2c 	andeq	r0, r0, ip, lsr #26
    1544:	00139e21 	andseq	r9, r3, r1, lsr #28
					dgout (v);
    1548:	13912100 	orrsne	r2, r1, #0, 2
    154c:	84210000 	strthi	r0, [r1], #-0
				while (i < bc) {
    1550:	00000013 	andeq	r0, r0, r3, lsl r0
			mess++;
    1554:	0012ca27 	andseq	ip, r2, r7, lsr #20
					d /= 10;
    1558:	00075e00 	andeq	r5, r7, r0, lsl #28
				if ((val >> (bc - 1)) & 1) {
    155c:	00076800 	andeq	r6, r7, r0, lsl #16
    1560:	02f70100 	rscseq	r0, r7, #0, 2
					dgout ('-');
    1564:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
    1568:	00000000 	andeq	r0, r0, r0
						val |= 0xffff0000;
    156c:	0620013d 			; <UNDEFINED> instruction: 0x0620013d
    1570:	eb010000 	bl	41578 <__ccfg+0x215d0>
    1574:	a7010602 	strge	r0, [r1, -r2, lsl #12]
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	01000000 	mrseq	r0, (UNDEF: 0)
    157c:	00000d65 	andeq	r0, r0, r5, ror #26
    1580:	0061753e 	rsbeq	r7, r1, lr, lsr r5
					v = (word) (val / d);
    1584:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
					if (v || d == 1) break;
    1588:	00000d65 	andeq	r0, r0, r5, ror #26
    158c:	26040700 	strcs	r0, [r4], -r0, lsl #14
					d /= 10;
    1590:	1a000002 	bne	15a0 <diag+0xf4>
				d = (bc == 16) ? 10000 : 1000000000;
    1594:	0006d901 	andeq	sp, r6, r1, lsl #18
					dgout (v + '0');
    1598:	02d40100 	sbcseq	r0, r4, #0, 2
    159c:	009b0109 	addseq	r0, fp, r9, lsl #2
    15a0:	06f80000 	ldrbteq	r0, [r8], r0
					d /= 10;
    15a4:	074c0000 	strbeq	r0, [ip, -r0]
					val = val - (v * d);
    15a8:	9c010000 	stcls	0, cr0, [r1], {-0}
					if (d == 0) break;
    15ac:	00000dc1 	andeq	r0, r0, r1, asr #27
					v = (word) (val / d);
    15b0:	00062d2d 	andeq	r2, r6, sp, lsr #26
    15b4:	02d40100 	sbcseq	r0, r4, #0, 2
				if (bc == 16)
    15b8:	0000a721 	andeq	sl, r0, r1, lsr #14
				d = (bc == 16) ? 10000 : 1000000000;
    15bc:	00035c00 	andeq	r5, r3, r0, lsl #24
					val &= 0xffff;
    15c0:	61753b00 	cmnvs	r5, r0, lsl #22
					dgout (*s);
    15c4:	02d40100 	sbcseq	r0, r4, #0, 2
					s++;
    15c8:	000dc12f 	andeq	ip, sp, pc, lsr #2
				while (*s != '\0') {
    15cc:	00036f00 	andeq	r6, r3, r0, lsl #30
    15d0:	13583300 	cmpne	r8, #0, 6
			dgout (*mess++);
    15d4:	07180000 	ldreq	r0, [r8, -r0]
    15d8:	01880000 	orreq	r0, r8, r0
    15dc:	e6010000 	str	r0, [r1], -r0
    15e0:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
    15e4:	00000013 	andeq	r0, r0, r3, lsl r0
}
    15e8:	1a040700 	bne	1031f0 <__ccfg+0xe3248>
    while(1)
    15ec:	1a000002 	bne	15fc <ResetISR+0xc>
{
    15f0:	000a2901 	andeq	r2, sl, r1, lsl #18
    SetupTrimDevice();
    15f4:	018a0100 	orreq	r0, sl, r0, lsl #2
    pui32Src = &_etext;
    15f8:	00a70106 	adceq	r0, r7, r6, lsl #2
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15fc:	06a80000 	strteq	r0, [r8], r0
    __asm("    ldr     r0, =_bss\n"
    1600:	06f80000 	ldrbteq	r0, [r8], r0
    1604:	9c010000 	stcls	0, cr0, [r1], {-0}
    1608:	00000e0f 	andeq	r0, r0, pc, lsl #28
    160c:	0008012d 	andeq	r0, r8, sp, lsr #2
    1610:	018a0100 	orreq	r0, sl, r0, lsl #2
   main();
    1614:	00009b26 	andeq	r9, r0, r6, lsr #22
    FaultISR();
    1618:	00038200 	andeq	r8, r3, r0, lsl #4
        *pui32Dest++ = *pui32Src++;
    161c:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
    1620:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    1624:	0f461d01 	svceq	0x00461d01
    1628:	06bc0000 	ldrteq	r0, [ip], r0
    162c:	06c60000 	strbeq	r0, [r6], r0
    1630:	9c010000 	stcls	0, cr0, [r1], {-0}
    1634:	1e001a01 	vmlane.f32	s2, s0, s2
    1638:	0007b701 	andeq	fp, r7, r1, lsl #14
static byte get_byte () {
    163c:	01380100 	teqeq	r8, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1640:	00059406 	andeq	r9, r5, r6, lsl #8
    1644:	0006a800 	andeq	sl, r6, r0, lsl #16
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1648:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    164c:	4000000e 	andmi	r0, r0, lr
		if (ee_inp)
    1650:	000008cc 	andeq	r0, r0, ip, asr #17
			b |= 1;
    1654:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
    1658:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    165c:	000003a0 	andeq	r0, r0, r0, lsr #7
	for (b = 0, i = 0; i < 8; i++) {
    1660:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
}
    1664:	01680100 	cmneq	r8, r0, lsl #2
    1668:	0005e201 	andeq	lr, r5, r1, lsl #4
    166c:	01702300 	cmneq	r0, r0, lsl #6
static void put_byte (byte b) {
    1670:	35400000 	strbcc	r0, [r0, #-0]
    1674:	01000007 	tsteq	r0, r7
    1678:	9b0b0147 	blls	2c1b9c <__ccfg+0x2a1bf4>
    167c:	eb000000 	bl	1684 <put_byte+0x14>
		if (b & 0x80)
    1680:	42000003 	andmi	r0, r0, #3
    1684:	00001410 	andeq	r1, r0, r0, lsl r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1688:	00000600 	andeq	r0, r0, r0, lsl #12
	for (i = 0; i < 8; i++) {
    168c:	00000608 	andeq	r0, r0, r8, lsl #12
		b <<= 1;
    1690:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
	for (i = 0; i < 8; i++) {
    1694:	2100000e 	tstcs	r0, lr
}
    1698:	0000141f 	andeq	r1, r0, pc, lsl r4
    169c:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    16a0:	060c0000 	streq	r0, [ip], -r0
    16a4:	06140000 	ldreq	r0, [r4], -r0
	put_byte (cmd);
    16a8:	0f050000 	svceq	0x00050000
    16ac:	000e8f06 	andeq	r8, lr, r6, lsl #30
}
    16b0:	141f2100 	ldrne	r2, [pc], #-256	; 16b8 <wwait>
    16b4:	42000000 	andmi	r0, r0, #0
static void wwait (word st, word del) {
    16b8:	000013f3 	strdeq	r1, [r0], -r3
    16bc:	0000065a 	andeq	r0, r0, sl, asr r6
    16c0:	00000662 	andeq	r0, r0, r2, ror #12
	while (dopen && (rdsr () & 1)) {
    16c4:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
    16c8:	2100000e 	tstcs	r0, lr
    16cc:	00001402 	andeq	r1, r0, r2, lsl #8
    16d0:	13f34300 	mvnsne	r4, #0, 6
	put_byte (CMD_RDSR);
    16d4:	06660000 	strbteq	r0, [r6], -r0
	r = get_byte ();
    16d8:	066e0000 	strbteq	r0, [lr], -r0
    16dc:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
	while (dopen && (rdsr () & 1)) {
    16e0:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
}
    16e4:	00000000 	andeq	r0, r0, r0
		if (st == WNONE)
    16e8:	69011e00 	stmdbvs	r1, {r9, sl, fp, ip}
    16ec:	01000008 	tsteq	r0, r8
			mdelay (1);
    16f0:	6c06012b 	stfvss	f0, [r6], {43}	; 0x2b
    16f4:	94000005 	strls	r0, [r0], #-5
			delay (del, st);
    16f8:	01000005 	tsteq	r0, r5
    16fc:	000ef19c 	muleq	lr, ip, r1
			release;
    1700:	0f253300 	svceq	0x00253300
    1704:	05740000 	ldrbeq	r0, [r4, #-0]!
    1708:	01580000 	cmpeq	r8, r0
static void ready () {
    170c:	32010000 	andcc	r0, r1, #0
	if (dopen) {
    1710:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
		wwait (WNONE, 1);
    1714:	0000000f 	andeq	r0, r0, pc
    1718:	ce011e00 	cdpgt	14, 0, cr1, cr1, cr0, {0}
    171c:	01000007 	tsteq	r0, r7
	dstat = 0;
    1720:	2c06011e 	stfcss	f0, [r6], {30}
}
    1724:	6c000005 	stcvs	0, cr0, [r0], {5}
    1728:	01000005 	tsteq	r0, r5
    172c:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
	udelay (1);
    1730:	0f253300 	svceq	0x00253300
    1734:	053e0000 	ldreq	r0, [lr, #-0]!
	udelay (1);
    1738:	01380000 	teqeq	r8, r0
		dopen = DOPEN_TEMP;
    173c:	25010000 	strcs	r0, [r1, #-0]
    1740:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
    1744:	2a00000f 	bcs	1788 <ee_close+0x4>
    1748:	00000004 	andeq	r0, r0, r4
static void cclose () {
    174c:	08c54400 	stmiaeq	r5, {sl, lr}^
	if (dopen == DOPEN_TEMP) {
    1750:	17010000 	strne	r0, [r1, -r0]
    1754:	df011501 	svcle	0x00011501
		wwait (WNONE, 1);
    1758:	03000000 	movweq	r0, #0
    175c:	00000f46 	andeq	r0, r0, r6, asr #30
	cmd_0 (CMD_DP);
    1760:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
    1764:	01170100 	tsteq	r7, r0, lsl #2
		dopen = 0;
    1768:	0000a722 	andeq	sl, r0, r2, lsr #14
}
    176c:	42450000 	submi	r0, r5, #0
word ee_open () {
    1770:	01000005 	tsteq	r0, r5
	ready ();
    1774:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
	dopen = DOPEN_PERM;
    1778:	03000000 	movweq	r0, #0
    177c:	000a1d46 	andeq	r1, sl, r6, asr #26
}
    1780:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
	if (dopen) {
    1784:	000f7a03 	andeq	r7, pc, r3, lsl #20
    1788:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
		dopen = DOPEN_TEMP;
    178c:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
		cclose ();
    1790:	00008d06 	andeq	r8, r0, r6, lsl #26
}
    1794:	69474800 	stmdbvs	r7, {fp, lr}^
int ser_in (word st, char *buf, int len) {
    1798:	0bf40100 	bleq	ffd01ba0 <_estack+0xdfcfcba0>
    179c:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (len == 0)
    17a0:	01490000 	mrseq	r0, (UNDEF: 73)
	if (__inpline == NULL) {
    17a4:	00000953 	andeq	r0, r0, r3, asr r9
		if ((prcs = running (__inserial)) == 0) {
    17a8:	01069801 	tsteq	r6, r1, lsl #16
    17ac:	000004d8 	ldrdeq	r0, [r0], -r8
			prcs = runthread (__inserial);
    17b0:	0000052c 	andeq	r0, r0, ip, lsr #10
    17b4:	10249c01 	eorne	r9, r4, r1, lsl #24
			if (prcs == 0) {
    17b8:	654a0000 	strbvs	r0, [sl, #-0]
				npwait (st);
    17bc:	98010063 	stmdals	r1, {r0, r1, r5, r6}
		release;
    17c0:	0000a71a 	andeq	sl, r0, sl, lsl r7
		join (prcs, st);
    17c4:	00043d00 	andeq	r3, r4, r0, lsl #26
    17c8:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
	if (*__inpline == NULL) // bin cmd
    17cc:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17d0:	50000010 	andpl	r0, r0, r0, lsl r0
	if (prcs >= len)
    17d4:	28000004 	stmdacs	r0, {r2}
		prcs = len-1;
    17d8:	000011ed 	andeq	r1, r0, sp, ror #3
	memcpy (buf, __inpline, prcs);
    17dc:	000004e4 	andeq	r0, r0, r4, ror #9
    17e0:	000004e6 	andeq	r0, r0, r6, ror #9
    17e4:	2202a801 	andcs	sl, r2, #65536	; 0x10000
	ufree (__inpline);
    17e8:	00001410 	andeq	r1, r0, r0, lsl r4
	__inpline = NULL;
    17ec:	000004e6 	andeq	r0, r0, r6, ror #9
	if (*buf) // if it's NULL, it's a bin cmd
    17f0:	000000e8 	andeq	r0, r0, r8, ror #1
		buf [prcs] = '\0';
    17f4:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
}
    17f8:	2100000f 	tstcs	r0, pc
		prcs = strlen (__inpline);
    17fc:	0000141f 	andeq	r1, r0, pc, lsl r4
    1800:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
		return 0;
    1804:	04ec0000 	strbteq	r0, [ip], #0
    1808:	01080000 	mrseq	r0, (UNDEF: 8)
    180c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
int ser_outf (word st, const char *m, ...) {
    1810:	000ff303 	andeq	pc, pc, r3, lsl #6
    1814:	141f2100 	ldrne	r2, [pc], #-256	; 181c <ser_outf+0xc>
	if ((prcs = running (__outserial)) != 0) {
    1818:	22000000 	andcs	r0, r0, #0
    181c:	000013f3 	strdeq	r1, [r0], -r3
		join (prcs, st);
    1820:	00000504 	andeq	r0, r0, r4, lsl #10
    1824:	00000120 	andeq	r0, r0, r0, lsr #2
		release;
    1828:	0d03b801 	stceq	8, cr11, [r3, #-4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    182c:	21000010 	tstcs	r0, r0, lsl r0
    1830:	00001402 	andeq	r1, r0, r2, lsl #8
    1834:	13f34300 	mvnsne	r4, #0, 6
		umwait (st);
    1838:	050a0000 	streq	r0, [sl, #-0]
    183c:	050c0000 	streq	r0, [ip, #-0]
	if (runstrand (__outserial, buf) == 0) {
    1840:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    1844:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
    1848:	00000000 	andeq	r0, r0, r0
		ufree (buf);
    184c:	01d60407 	bicseq	r0, r6, r7, lsl #8
		npwait (st);
    1850:	01490000 	mrseq	r0, (UNDEF: 73)
}
    1854:	000008f4 	strdeq	r0, [r0], -r4
    1858:	01067201 	tsteq	r6, r1, lsl #4
	...
int ser_inf (word st, const char *fmt, ...) {
    1864:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
    1868:	734a0000 	movtvc	r0, #40960	; 0xa000
	if (fmt == NULL)
    186c:	72010074 	andvc	r0, r1, #116	; 0x74
	if (__inpline == NULL) {
    1870:	0000a718 	andeq	sl, r0, r8, lsl r7
		if ((prcs = running (__inserial)) == 0) {
    1874:	00046e00 	andeq	r6, r4, r0, lsl #28
    1878:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
			prcs = runthread (__inserial);
    187c:	7201006e 	andvc	r0, r1, #110	; 0x6e
    1880:	00024428 	andeq	r4, r2, r8, lsr #8
			if (prcs == 0) {
    1884:	00048100 	andeq	r8, r4, r0, lsl #2
				npwait (st);
    1888:	61764a00 	cmnvs	r6, r0, lsl #20
		release;
    188c:	7201006c 	andvc	r0, r1, #108	; 0x6c
		join (prcs, st);
    1890:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
    1894:	00049f00 	andeq	r9, r4, r0, lsl #30
	va_start (ap, fmt);
    1898:	055d4b00 	ldrbeq	r4, [sp, #-2816]	; 0xfffff500
	prcs = vscan (__inpline, fmt, ap);
    189c:	74010000 	strvc	r0, [r1], #-0
    18a0:	0000c90e 	andeq	ip, r0, lr, lsl #18
	ufree (__inpline);
    18a4:	00030500 	andeq	r0, r3, r0, lsl #10
	__inpline = NULL;
    18a8:	4c000000 	stcmi	0, cr0, [r0], {-0}
}
    18ac:	00000a40 	andeq	r0, r0, r0, asr #20
    18b0:	00017801 	andeq	r7, r1, r1, lsl #16
    18b4:	4d000000 	stcmi	0, cr0, [r0, #-0]
		return 0;
    18b8:	00001220 	andeq	r1, r0, r0, lsr #4
    18bc:	00000000 	andeq	r0, r0, r0
    18c0:	00000520 	andeq	r0, r0, r0, lsr #10
strand (__outserial, const char*)
    18c4:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
    18c8:	00001201 	andeq	r1, r0, r1, lsl #4
	...
endstrand
    18d4:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
    18d8:	2f000010 	svccs	0x00000010
	ptr = data;
    18dc:	00001213 	andeq	r1, r0, r3, lsl r2
    18e0:	122a2800 	eorne	r2, sl, #0, 16
	...
		len = strlen (ptr);
    18ec:	84010000 	strhi	r0, [r1], #-0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18f0:	014e0003 	cmpeq	lr, r3
    18f4:	000009e7 	andeq	r0, r0, r7, ror #19
    18f8:	01066201 	tsteq	r6, r1, lsl #4
	...
	len -= quant;
    1904:	01499c01 	cmpeq	r9, r1, lsl #24
    1908:	000004fc 	strdeq	r0, [r0], -ip
    190c:	01064f01 	tsteq	r6, r1, lsl #30
	...
		finish;
    1918:	11079c01 	tstne	r7, r1, lsl #24
    191c:	51280000 			; <UNDEFINED> instruction: 0x51280000
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1920:	00000012 	andeq	r0, r0, r2, lsl r0
    1924:	00000000 	andeq	r0, r0, r0
    1928:	01000000 	mrseq	r0, (UNDEF: 0)
    192c:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
    1930:	00053301 	andeq	r3, r5, r1, lsl #6
strand (__inserial, address)
    1934:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    1938:	00000001 	andeq	r0, r0, r1
    193c:	00000000 	andeq	r0, r0, r0
    1940:	2e9c0100 	fmlcse	f0, f4, f0
    1944:	4a000011 	bmi	1990 <__inserial+0x5c>
	if (__inpline != NULL)
    1948:	3b010064 	blcc	41ae0 <__ccfg+0x21b38>
    194c:	0000df1c 	andeq	sp, r0, ip, lsl pc
		finish;
    1950:	0004bd00 	andeq	fp, r4, r0, lsl #26
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1954:	01490000 	mrseq	r0, (UNDEF: 73)
    1958:	000005f3 	strdeq	r0, [r0], -r3
    195c:	01062b01 	tsteq	r6, r1, lsl #22
    1960:	0000049c 	muleq	r0, ip, r4
		umwait (IM_INIT);
    1964:	000004d8 	ldrdeq	r0, [r0], -r8
		release;
    1968:	11559c01 	cmpne	r5, r1, lsl #24
	savedata (data);
    196c:	644a0000 	strbvs	r0, [sl], #-0
	len = MAX_LINE_LENGTH;
    1970:	1b2b0100 	blne	ac1d78 <__ccfg+0xaa1dd0>
	io (IM_READ, __cport, READ, ptr, 1);
    1974:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1978:	000004db 	ldrdeq	r0, [r0], -fp
    197c:	36014900 	strcc	r4, [r1], -r0, lsl #18
    1980:	01000008 	tsteq	r0, r8
	if (ptr == (char*) data) { // new line
    1984:	70010620 	andvc	r0, r1, r0, lsr #12
    1988:	9a000004 	bls	19a0 <__inserial+0x6c>
		if (*ptr == '\0') { // bin cmd
    198c:	01000004 	tsteq	r0, r4
			proceed (IM_BIN);
    1990:	00117c9c 	mulseq	r1, ip, ip
    1994:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
		if (*ptr < 0x20)
    1998:	b81c2001 	ldmdalt	ip, {r0, sp}
    199c:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
			proceed (IM_READ);
    19a0:	00000004 	andeq	r0, r0, r4
    19a4:	08d30149 	ldmeq	r3, {r0, r3, r6, r8}^
	if (*ptr == '\n' || *ptr == '\r') {
    19a8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    19ac:	04440106 	strbeq	r0, [r4], #-262	; 0xfffffefa
    19b0:	04700000 	ldrbteq	r0, [r0], #-0
		*ptr = '\0';
    19b4:	9c010000 	stcls	0, cr0, [r1], {-0}
		__inpline = (char*)data;
    19b8:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
		finish;
    19bc:	01006e4f 	tsteq	r0, pc, asr #28
	if (len) {
    19c0:	00b81c19 	adcseq	r1, r8, r9, lsl ip
		ptr++;
    19c4:	50010000 	andpl	r0, r1, r0
    19c8:	0011b743 	andseq	fp, r1, r3, asr #14
		len--;
    19cc:	00045800 	andeq	r5, r4, r0, lsl #16
	proceed (IM_READ);
    19d0:	00046200 	andeq	r6, r4, r0, lsl #4
	io (IM_BIN, __cport, READ, ptr, 1);
    19d4:	031b0100 	tsteq	fp, #0, 2
    19d8:	0011c521 	andseq	ip, r1, r1, lsr #10
    19dc:	50000000 	andpl	r0, r0, r0
    19e0:	000009fb 	strdeq	r0, [r0], -fp
    19e4:	01141501 	tsteq	r4, r1, lsl #10
	len -= 2;
    19e8:	0011d003 	andseq	sp, r1, r3
	if (len > *ptr + 1) // 1 for 0x04
    19ec:	006e5100 	rsbeq	r5, lr, r0, lsl #2
    19f0:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
		len = *ptr + 1;
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	0005df52 	andeq	sp, r5, r2, asr pc
	ptr++;
    19fc:	011a0300 	tsteq	sl, r0, lsl #6
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a00:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
    1a04:	53000011 	movwpl	r0, #17
    1a08:	000009ec 	andeq	r0, r0, ip, ror #19
    1a0c:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
    1a10:	00000073 	andeq	r0, r0, r3, ror r0
    1a14:	083d5400 	ldmdaeq	sp!, {sl, ip, lr}
	len -= quant;
    1a18:	5b030000 	blpl	c1a20 <__ccfg+0xa1a78>
		__inpline = (char*)data;
    1a1c:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
		finish;
    1a20:	00000550 	andeq	r0, r0, r0, asr r5
	ptr += quant;
    1a24:	01355003 	teqeq	r5, r3
    1a28:	09135503 	ldmdbeq	r3, {r0, r1, r8, sl, ip, lr}
endstrand
    1a2c:	bf0f0000 	svclt	0x000f0000
    1a30:	00730101 	rsbseq	r0, r3, r1, lsl #2
	proceed (IM_BINL);
    1a34:	20030000 	andcs	r0, r3, r0
endstrand
    1a38:	16000012 			; <UNDEFINED> instruction: 0x16000012
    1a3c:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    1a40:	730ec10f 	movwvc	ip, #57615	; 0xe10f
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	0008da54 	andeq	sp, r8, r4, asr sl
    1a4c:	01900f00 	orrseq	r0, r0, r0, lsl #30
		if (res && (d < n))
    1a50:	1a540301 	bne	150265c <__ccfg+0x14e26b4>
    1a54:	0f000005 	svceq	0x00000005
    1a58:	0301017b 	movweq	r0, #4475	; 0x117b
    1a5c:	00078d52 	andeq	r8, r7, r2, asr sp
			res [d] = (char) c;
    1a60:	03660a00 	cmneq	r6, #0, 20
		d++;
    1a64:	51030101 	tstpl	r3, r1, lsl #2
    1a68:	53000012 	movwpl	r0, #18
    1a6c:	00000764 	andeq	r0, r0, r4, ror #14
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a70:	1f03660a 	svcne	0x0003660a
    1a74:	00000073 	andeq	r0, r0, r3, ror r0
    1a78:	08b25600 	ldmeq	r2!, {r9, sl, ip, lr}
				enci (10000);
    1a7c:	4c020000 	stcmi	0, cr0, [r2], {-0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a80:	03010101 	movweq	r0, #4353	; 0x1101
    1a84:	00084b54 	andeq	r4, r8, r4, asr fp
	d = 0;
    1a88:	01c40200 	biceq	r0, r4, r0, lsl #4
		c = *fm++;
    1a8c:	66570301 	ldrbvs	r0, [r7], -r1, lsl #6
		if (c == '\\') {
    1a90:	02000006 	andeq	r0, r0, #6
			if ((c = *fm++) == '\0') {
    1a94:	730101ad 	movwvc	r0, #4525	; 0x11ad
    1a98:	03000000 	movweq	r0, #0
				outc ('\\');
    1a9c:	0005b356 	andeq	fp, r5, r6, asr r3
			if ((c = *fm++) == '\0') {
    1aa0:	02450e00 	subeq	r0, r5, #0, 28
				outc ('\\');
    1aa4:	58030101 	stmdapl	r3, {r0, r8}
    1aa8:	00000585 	andeq	r0, r0, r5, lsl #11
			outc (c);
    1aac:	01022c0e 	tsteq	r2, lr, lsl #24
    1ab0:	00007301 	andeq	r7, r0, r1, lsl #6
			if (c == '\0')
    1ab4:	70520300 	subsvc	r0, r2, r0, lsl #6
    1ab8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
			outc (c);
    1abc:	010101dc 	ldrdeq	r0, [r1, -ip]
				outc (val);
    1ac0:	0012ab03 	andseq	sl, r2, r3, lsl #22
				val = (word) va_arg (ap, aword);
    1ac4:	052a5300 	streq	r5, [sl, #-768]!	; 0xfffffd00
		if (c == '%') {
    1ac8:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    1acc:	00731f01 	rsbseq	r1, r3, r1, lsl #30
			c = *fm++;
    1ad0:	56000000 	strpl	r0, [r0], -r0
			switch (c) {
    1ad4:	000006eb 	andeq	r0, r0, fp, ror #13
    1ad8:	01010f0b 	tsteq	r1, fp, lsl #30
    1adc:	32540301 	subscc	r0, r4, #67108864	; 0x4000000
    1ae0:	0c000006 	stceq	0, cr0, [r0], {6}
    1ae4:	030101ed 	movweq	r0, #4589	; 0x11ed
    1ae8:	00090054 	andeq	r0, r9, r4, asr r0
    1aec:	01d60c00 	bicseq	r0, r6, r0, lsl #24
    1af0:	01520301 	cmpeq	r2, r1, lsl #6
				outc ('%');
    1af4:	06000006 	streq	r0, [r0], -r6
    1af8:	01010440 	tsteq	r1, r0, asr #8
				outc (c);
    1afc:	0012e703 	andseq	lr, r2, r3, lsl #14
    1b00:	07715300 	ldrbeq	r5, [r1, -r0, lsl #6]!
    1b04:	40060000 	andmi	r0, r6, r0
				if (c == '\0')
    1b08:	00732404 	rsbseq	r2, r3, r4, lsl #8
				return d;
    1b0c:	52000000 	andpl	r0, r0, #0
}
    1b10:	0000059a 	muleq	r0, sl, r5
    1b14:	01039106 	tsteq	r3, r6, lsl #2
			switch (c) {
    1b18:	13110301 	tstne	r1, #67108864	; 0x4000000
    1b1c:	71530000 	cmpvc	r3, r0
    1b20:	06000007 	streq	r0, [r0], -r7
				for (i = 12; ; i -= 4) {
    1b24:	73170391 	tstvc	r7, #1140850690	; 0x44000002
				val = (word) va_arg (ap, aword);
    1b28:	53000000 	movwpl	r0, #0
						[ (val >> i) & 0xf ]);
    1b2c:	000006cc 	andeq	r0, r0, ip, asr #13
    1b30:	2a039106 	bcs	e5f50 <__ccfg+0xc5fa8>
    1b34:	00000073 	andeq	r0, r0, r3, ror r0
					outc (__pi_hex_enc_table
    1b38:	09b25200 	ldmibeq	r2!, {r9, ip, lr}
    1b3c:	0c060000 	stceq	0, cr0, [r6], {-0}
					if (i == 0)
    1b40:	03010103 	movweq	r0, #4355	; 0x1103
    1b44:	0000133b 	andeq	r1, r0, fp, lsr r3
				for (i = 12; ; i -= 4) {
    1b48:	00077153 	andeq	r7, r7, r3, asr r1
				val = (word) va_arg (ap, aword);
    1b4c:	030c0600 	movweq	r0, #50688	; 0xc600
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	00007318 	andeq	r7, r0, r8, lsl r3
				val = (word) va_arg (ap, aword);
    1b54:	06cc5300 	strbeq	r5, [ip], r0, lsl #6
				if (c == 'd' && (val & 0x8000) != 0) {
    1b58:	0c060000 	stceq	0, cr0, [r6], {-0}
    1b5c:	00732b03 	rsbseq	r2, r3, r3, lsl #22
					outc ('-');
    1b60:	52000000 	andpl	r0, r0, #0
    1b64:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
					val = (~val) + 1;
    1b68:	0101e706 	tsteq	r1, r6, lsl #14
    1b6c:	13580301 	cmpne	r8, #67108864	; 0x4000000
				for (i = 12; ; i -= 4) {
    1b70:	71530000 	cmpvc	r3, r0
				enci (10000);
    1b74:	06000007 	streq	r0, [r0], -r7
    1b78:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    1b7c:	00000000 	andeq	r0, r0, r0
    1b80:	00080752 	andeq	r0, r8, r2, asr r7
    1b84:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    1b88:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
    1b8c:	53000013 	movwpl	r0, #19
    1b90:	00000771 	andeq	r0, r0, r1, ror r7
    1b94:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
    1b98:	00000073 	andeq	r0, r0, r3, ror r0
    1b9c:	08a15200 	stmiaeq	r1!, {r9, ip, lr}
    1ba0:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    1ba4:	03010101 	movweq	r0, #4353	; 0x1101
    1ba8:	000013ac 	andeq	r1, r0, ip, lsr #7
    1bac:	00077153 	andeq	r7, r7, r3, asr r1
    1bb0:	01390600 	teqeq	r9, r0, lsl #12
    1bb4:	0000731b 	andeq	r7, r0, fp, lsl r3
    1bb8:	065a5300 	ldrbeq	r5, [sl], -r0, lsl #6
				if (c == 'd' || c == 'u') {
    1bbc:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    1bc0:	00732e01 	rsbseq	r2, r3, r1, lsl #28
					if (c == 'd' &&
    1bc4:	46530000 	ldrbmi	r0, [r3], -r0
					val = va_arg (ap, lword);
    1bc8:	06000006 	streq	r0, [r0], -r6
					fm++;
    1bcc:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
					if (c == 'd' &&
    1bd0:	00000000 	andeq	r0, r0, r0
    1bd4:	00081252 	andeq	r1, r8, r2, asr r2
						outc ('-');
    1bd8:	02840400 	addeq	r0, r4, #0, 8
    1bdc:	c9030101 	stmdbgt	r3, {r0, r8}
						val = (~val) + 1;
    1be0:	53000013 	movwpl	r0, #19
				enci (10000);
    1be4:	00000168 	andeq	r0, r0, r8, ror #2
					enci (1000000000UL);
    1be8:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
    1bec:	00000073 	andeq	r0, r0, r3, ror r0
    1bf0:	05025200 	streq	r5, [r2, #-512]	; 0xfffffe00
    1bf4:	06040000 	streq	r0, [r4], -r0
    1bf8:	03010102 	movweq	r0, #4354	; 0x1102
    1bfc:	000013f3 	strdeq	r1, [r0], -r3
    1c00:	00016853 	andeq	r6, r1, r3, asr r8
    1c04:	02060400 	andeq	r0, r6, #0, 8
    1c08:	00007323 	andeq	r7, r0, r3, lsr #6
    1c0c:	09d55300 	ldmibeq	r5, {r8, r9, ip, lr}^
    1c10:	06040000 	streq	r0, [r4], -r0
    1c14:	00733702 	rsbseq	r3, r3, r2, lsl #14
    1c18:	52000000 	andpl	r0, r0, #0
    1c1c:	000003c3 	andeq	r0, r0, r3, asr #7
    1c20:	01015404 	tsteq	r1, r4, lsl #8
    1c24:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
    1c28:	68530000 	ldmdavs	r3, {}^	; <UNPREDICTABLE>
				} else if (c == 'x') {
    1c2c:	04000001 	streq	r0, [r0], #-1
					for (i = 28; ; i -= 4) {
    1c30:	73190154 	tstvc	r9, #84, 2
					val = va_arg (ap, lword);
    1c34:	00000000 	andeq	r0, r0, r0
							[ (val >> i) & 0xf ]);
    1c38:	00002552 	andeq	r2, r0, r2, asr r5
    1c3c:	011e0400 	tsteq	lr, r0, lsl #8
						outc (__pi_hex_enc_table
    1c40:	2d030101 	stfcss	f0, [r3, #-4]
    1c44:	53000014 	movwpl	r0, #20
    1c48:	00000168 	andeq	r0, r0, r8, ror #2
						if (i == 0)
    1c4c:	17011e04 	strne	r1, [r1, -r4, lsl #28]
    1c50:	00000073 	andeq	r0, r0, r3, ror r0
					for (i = 28; ; i -= 4) {
    1c54:	07045600 	streq	r5, [r4, -r0, lsl #12]
					outc ('%');
    1c58:	63090000 	movwvs	r0, #36864	; 0x9000
    1c5c:	03010104 	movweq	r0, #4356	; 0x1104
    1c60:	00067656 	andeq	r7, r6, r6, asr r6
					outc ('l');
    1c64:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
    1c68:	56030101 	strpl	r0, [r3], -r1, lsl #2
				val = (word) va_arg (ap, aword);
    1c6c:	0000068f 	andeq	r0, r0, pc, lsl #13
				outc (val);
    1c70:	01022a09 	tsteq	r2, r9, lsl #20
    1c74:	c0520301 	subsgt	r0, r2, r1, lsl #6
				while (*st != '\0') {
    1c78:	09000009 	stmdbeq	r0, {r0, r3}
    1c7c:	01010168 	tsteq	r1, r8, ror #2
    1c80:	00146b03 	andseq	r6, r4, r3, lsl #22
    1c84:	069b5300 	ldreq	r5, [fp], r0, lsl #6
					outc (*st);
    1c88:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    1c8c:	00731f01 	rsbseq	r1, r3, r1, lsl #30
					st++;
    1c90:	56000000 	strpl	r0, [r0], -r0
		c = *fm++;
    1c94:	000005cf 	andeq	r0, r0, pc, asr #11
    1c98:	01013209 	tsteq	r1, r9, lsl #4
    1c9c:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
char *vform (char *res, const char *fm, va_list aq) {
    1ca0:	0000000d 	andeq	r0, r0, sp
    1ca4:	00000000 	andeq	r0, r0, r0
	if (res != NULL) {
    1ca8:	01000000 	mrseq	r0, (UNDEF: 0)
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
    1cb0:	050c0000 	streq	r0, [ip, #-0]
    1cb4:	00000000 	andeq	r0, r0, r0
}
    1cb8:	0000121f 	andeq	r1, r0, pc, lsl r2
    1cbc:	07d80003 	ldrbeq	r0, [r8, r3]
	fml = strlen (fm) + 17;
    1cc0:	01040000 	mrseq	r0, (UNDEF: 4)
    1cc4:	00000172 	andeq	r0, r0, r2, ror r1
    1cc8:	000acb0c 	andeq	ip, sl, ip, lsl #22
	if ((res = (char*) umalloc (fml)) == NULL)
    1ccc:	0000d300 	andeq	sp, r0, r0, lsl #6
    1cd0:	0006c800 	andeq	ip, r6, r0, lsl #16
    1cd4:	00000000 	andeq	r0, r0, r0
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd8:	001a9700 	andseq	r9, sl, r0, lsl #14
    1cdc:	06010200 	streq	r0, [r1], -r0, lsl #4
    1ce0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    1ce4:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
		ufree (res);
    1ce8:	03000003 	movweq	r0, #3
		goto Again;
    1cec:	00001688 	andeq	r1, r0, r8, lsl #13
	if (buf == NULL || fmt == NULL)
    1cf0:	3f182803 	svccc	0x00182803
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cf4:	02000000 	andeq	r0, r0, #0
	if (buf == NULL || fmt == NULL)
    1cf8:	00b00504 	adcseq	r0, r0, r4, lsl #10
    1cfc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1d00:	0000ab05 	andeq	sl, r0, r5, lsl #22
		    	    case 'u': scanu (lword); break;
    1d04:	223c0300 	eorscs	r0, ip, #0, 6
			while (isspace (*buf)) buf++;
    1d08:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    1d0c:	00005918 	andeq	r5, r0, r8, lsl r9
	while (*fmt != '\0') {
    1d10:	08010200 	stmdaeq	r1, {r9}
		if (*fmt++ != '%')
    1d14:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
		switch (*fmt++) {
    1d18:	00212a03 	eoreq	r2, r1, r3, lsl #20
    1d1c:	19310300 	ldmdbne	r1!, {r8, r9}
    1d20:	0000006c 	andeq	r0, r0, ip, rrx
    1d24:	73070202 	movwvc	r0, #29186	; 0x7202
    1d28:	03000002 	movweq	r0, #2
    1d2c:	000017f3 	strdeq	r1, [r0], -r3
    1d30:	7f193403 	svcvc	0x00193403
}
    1d34:	02000000 	andeq	r0, r0, #0
		switch (*fmt++) {
    1d38:	00850704 	addeq	r0, r5, r4, lsl #14
    1d3c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1d40:	00008007 	andeq	r8, r0, r7
    1d44:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
			while (isspace (*buf)) buf++;
    1d48:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1d4c:	8a070402 	bhi	1c2d5c <__ccfg+0x1a2db4>
    1d50:	03000000 	movweq	r0, #0
    1d54:	00000b86 	andeq	r0, r0, r6, lsl #23
    1d58:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    1d5c:	05000000 	streq	r0, [r0, #-0]
			if (*buf == '\0')
    1d60:	00000a9c 	muleq	r0, ip, sl
			if (*buf != ',') {
    1d64:	bf000b04 	svclt	0x00000b04
			sap = va_arg (ap, char*);
    1d68:	06000000 	streq	r0, [r0], -r0
			nc++;
    1d6c:	00000c3c 	andeq	r0, r0, ip, lsr ip
			if (*buf != ',') {
    1d70:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
				while (!isspace (*buf) && *buf != ',' &&
    1d74:	07000100 	streq	r0, [r0, -r0, lsl #2]
    1d78:	0a9e0304 	beq	fe782990 <_estack+0xde77d990>
    1d7c:	63040000 	movwvs	r0, #16384	; 0x4000
    1d80:	00009b18 	andeq	r9, r0, r8, lsl fp
    1d84:	041c0300 	ldreq	r0, [ip], #-768	; 0xfffffd00
    1d88:	26050000 	strcs	r0, [r5], -r0
    1d8c:	00004d12 	andeq	r4, r0, r2, lsl sp
			while (isspace (*buf)) buf++;
    1d90:	16000300 	strne	r0, [r0], -r0, lsl #6
    1d94:	27050000 	strcs	r0, [r5, -r0]
    1d98:	00006012 	andeq	r6, r0, r2, lsl r0
    1d9c:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    1da0:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
			if (*buf == ',') buf++;
    1da4:	03000000 	movweq	r0, #0
    1da8:	00000946 	andeq	r0, r0, r6, asr #18
			*sap = '\0';
    1dac:	33122805 	tstcc	r2, #327680	; 0x50000
			break;
    1db0:	03000000 	movweq	r0, #0
		    case 'd': scani (word); break;
    1db4:	000013f8 	strdeq	r1, [r0], -r8
    1db8:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
    1dbc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1dc0:	000000fb 	strdeq	r0, [r0], -fp
    1dc4:	00165103 	andseq	r5, r6, r3, lsl #2
    1dc8:	122c0500 	eorne	r0, ip, #0, 10
    1dcc:	00000073 	andeq	r0, r0, r3, ror r0
    1dd0:	00010c08 	andeq	r0, r1, r8, lsl #24
    1dd4:	02a60300 	adceq	r0, r6, #0, 6
    1dd8:	2d050000 	stccs	0, cr0, [r5, #-0]
    1ddc:	00007312 	andeq	r7, r0, r2, lsl r3
    1de0:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    1de4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1de8:	00013510 	andeq	r3, r1, r0, lsl r5
    1dec:	d9040a00 	stmdble	r4, {r9, fp}
    1df0:	0b000000 	bleq	1df8 <vscan+0x108>
    1df4:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    1df8:	000001c9 	andeq	r0, r0, r9, asr #3
    1dfc:	0002c10c 	andeq	ip, r2, ip, lsl #2
    1e00:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    1e04:	000000fb 	strdeq	r0, [r0], -fp
    1e08:	00070101 	andeq	r0, r7, r1, lsl #2
    1e0c:	0000a40c 	andeq	sl, r0, ip, lsl #8
    1e10:	03350500 	teqeq	r5, #0, 10
    1e14:	000000fb 	strdeq	r0, [r0], -fp
    1e18:	00060101 	andeq	r0, r6, r1, lsl #2
    1e1c:	00028f0c 	andeq	r8, r2, ip, lsl #30
    1e20:	03360500 	teqeq	r6, #0, 10
		    case 'u': scanu (word); break;
    1e24:	000000fb 	strdeq	r0, [r0], -fp
    1e28:	00050101 	andeq	r0, r5, r1, lsl #2
    1e2c:	00042b0c 	andeq	r2, r4, ip, lsl #22
    1e30:	03370500 	teqeq	r7, #0, 10
    1e34:	000000fb 	strdeq	r0, [r0], -fp
    1e38:	00040101 	andeq	r0, r4, r1, lsl #2
    1e3c:	0004240c 	andeq	r2, r4, ip, lsl #8
    1e40:	03380500 	teqeq	r8, #0, 10
    1e44:	000000fb 	strdeq	r0, [r0], -fp
    1e48:	00000401 	andeq	r0, r0, r1, lsl #8
    1e4c:	0004150d 	andeq	r1, r4, sp, lsl #10
    1e50:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    1e54:	000000fb 	strdeq	r0, [r0], -fp
    1e58:	004c0d01 	subeq	r0, ip, r1, lsl #26
    1e5c:	3c050000 	stccc	0, cr0, [r5], {-0}
    1e60:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1e64:	790d0200 	stmdbvc	sp, {r9}
    1e68:	05000000 	streq	r0, [r0, #-0]
		    case 'x': scanx (word); break;
    1e6c:	00fb033d 	rscseq	r0, fp, sp, lsr r3
    1e70:	0d030000 	stceq	0, cr0, [r3, #-0]
    1e74:	00000161 	andeq	r0, r0, r1, ror #2
    1e78:	0c083f05 	stceq	15, cr3, [r8], {5}
    1e7c:	04000001 	streq	r0, [r0], #-1
    1e80:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    1e84:	41050000 	mrsmi	r0, (UNDEF: 5)
    1e88:	00013b03 	andeq	r3, r1, r3, lsl #22
    1e8c:	01c90900 	biceq	r0, r9, r0, lsl #18
    1e90:	b50e0000 	strlt	r0, [lr, #-0]
    1e94:	05000002 	streq	r0, [r0, #-2]
    1e98:	01d51a43 	bicseq	r1, r5, r3, asr #20
    1e9c:	01010000 	mrseq	r0, (UNDEF: 1)
    1ea0:	0003210e 	andeq	r2, r3, lr, lsl #2
    1ea4:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    1ea8:	000001f6 	strdeq	r0, [r0], -r6
    1eac:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    1eb0:	000001fc 	strdeq	r0, [r0], -ip
    1eb4:	be080102 	adflte	f0, f0, f2
    1eb8:	08000003 	stmdaeq	r0, {r0, r1}
    1ebc:	000001fc 	strdeq	r0, [r0], -ip
    1ec0:	00032f0e 	andeq	r2, r3, lr, lsl #30
    1ec4:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    1ec8:	000001f6 	strdeq	r0, [r0], -r6
    1ecc:	080b0101 	stmdaeq	fp, {r0, r8}
    1ed0:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
    1ed4:	0d000002 	stceq	0, cr0, [r0, #-8]
    1ed8:	000002c8 	andeq	r0, r0, r8, asr #5
    1edc:	730b9006 	movwvc	r9, #45062	; 0xb006
    1ee0:	00000000 	andeq	r0, r0, r0
			switch (*fmt++) {
    1ee4:	00062d0d 	andeq	r2, r6, sp, lsl #26
    1ee8:	08910600 	ldmeq	r1, {r9, sl}
    1eec:	000000d9 	ldrdeq	r0, [r0], -r9
    1ef0:	049c0d04 	ldreq	r0, [ip], #3332	; 0xd04
    1ef4:	92060000 	andls	r0, r6, #0
    1ef8:	00010710 	andeq	r0, r1, r0, lsl r7
		    	    case 'd': scani (lword); break;
    1efc:	03000600 	movweq	r0, #1536	; 0x600
    1f00:	00000432 	andeq	r0, r0, r2, lsr r4
    1f04:	16039306 	strne	r9, [r3], -r6, lsl #6
    1f08:	0f000002 	svceq	0x00000002
    1f0c:	00000247 	andeq	r0, r0, r7, asr #4
    1f10:	0000025e 	andeq	r0, r0, lr, asr r2
    1f14:	420e0010 	andmi	r0, lr, #16
    1f18:	06000000 	streq	r0, [r0], -r0
    1f1c:	02530f99 	subseq	r0, r3, #612	; 0x264
    1f20:	01010000 	mrseq	r0, (UNDEF: 1)
    1f24:	9107010b 	tstls	r7, fp, lsl #2
    1f28:	00029609 	andeq	r9, r2, r9, lsl #12
    1f2c:	048f0c00 	streq	r0, [pc], #3072	; 1f34 <vscan+0x244>
    1f30:	93070000 	movwls	r0, #28672	; 0x7000
    1f34:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1f38:	01070100 	mrseq	r0, (UNDEF: 23)
    1f3c:	003d0c00 	eorseq	r0, sp, r0, lsl #24
    1f40:	94070000 	strls	r0, [r7], #-0
    1f44:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1f48:	00010100 	andeq	r0, r1, r0, lsl #2
    1f4c:	86030000 	strhi	r0, [r3], -r0
    1f50:	07000002 	streq	r0, [r0, -r2]
    1f54:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
		    	    case 'x': scanx (lword); break;
    1f58:	96080000 	strls	r0, [r8], -r0
    1f5c:	0f000002 	svceq	0x00000002
    1f60:	000002a2 	andeq	r0, r0, r2, lsr #5
    1f64:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1f68:	a7080010 	smladge	r8, r0, r0, r0
    1f6c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1f70:	000002eb 	andeq	r0, r0, fp, ror #5
    1f74:	b2179c07 	andslt	r9, r7, #1792	; 0x700
    1f78:	01000002 	tsteq	r0, r2
    1f7c:	00e50f01 	rsceq	r0, r5, r1, lsl #30
    1f80:	02d00000 	sbcseq	r0, r0, #0
    1f84:	00100000 	andseq	r0, r0, r0
    1f88:	0002c508 	andeq	ip, r2, r8, lsl #10
    1f8c:	03a70e00 			; <UNDEFINED> instruction: 0x03a70e00
    1f90:	06080000 	streq	r0, [r8], -r0
    1f94:	0002d013 	andeq	sp, r2, r3, lsl r0
    1f98:	0e010100 	adfeqs	f0, f1, f0
    1f9c:	00000141 	andeq	r0, r0, r1, asr #2
    1fa0:	0c0ec306 	stceq	3, cr12, [lr], {6}
    1fa4:	01000001 	tsteq	r0, r1
    1fa8:	04a91101 	strteq	r1, [r9], #257	; 0x101
    1fac:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    1fb0:	02fe1001 	rscseq	r1, lr, #1
    1fb4:	040a0000 	streq	r0, [sl], #-0
    1fb8:	00000304 	andeq	r0, r0, r4, lsl #6
    1fbc:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    1fc0:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    1fc4:	00000000 	andeq	r0, r0, r0
		    	    case 'd': scani (lword); break;
    1fc8:	0002030f 	andeq	r0, r2, pc, lsl #6
    1fcc:	00031b00 	andeq	r1, r3, r0, lsl #22
    1fd0:	08001000 	stmdaeq	r0, {ip}
    1fd4:	00000310 	andeq	r0, r0, r0, lsl r3
    1fd8:	00046414 	andeq	r6, r4, r4, lsl r4
    1fdc:	017f0900 	cmneq	pc, r0, lsl #18
    1fe0:	00031b16 	andeq	r1, r3, r6, lsl fp
		    	    case 'u': scanu (lword); break;
    1fe4:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    1fe8:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    1fec:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    1ff0:	00000118 	andeq	r0, r0, r8, lsl r1
    1ff4:	94140101 	ldrls	r0, [r4], #-257	; 0xfffffeff
    1ff8:	09000004 	stmdbeq	r0, {r2}
    1ffc:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
    2000:	01000001 	tsteq	r0, r1
    2004:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
    2008:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
    200c:	16000003 	strne	r0, [r0], -r3
    2010:	00002234 	andeq	r2, r0, r4, lsr r2
    2014:	07030709 	streq	r0, [r3, -r9, lsl #14]
    2018:	000000d9 	ldrdeq	r0, [r0], -r9
    201c:	057f1600 	ldrbeq	r1, [pc, #-1536]!	; 1a24 <__inserial+0xf0>
    2020:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    2024:	011d0803 	tsteq	sp, r3, lsl #16
    2028:	00040000 	andeq	r0, r4, r0
		    	    case 'x': scanx (lword); break;
    202c:	00026611 	andeq	r6, r2, r1, lsl r6
    2030:	03090900 	movweq	r0, #39168	; 0x9900
			if ((c = *buf++) == '\0')
    2034:	00034d03 	andeq	r4, r3, r3, lsl #26
    2038:	04b81700 	ldrteq	r1, [r8], #1792	; 0x700
			sap = va_arg (ap, char*);
    203c:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
			nc++;
    2040:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
			break;
    2044:	16000003 	strne	r0, [r0], -r3
			while (isspace (*buf)) buf++;
    2048:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    204c:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    2050:	000000d9 	ldrdeq	r0, [r0], -r9
						*sap++ = *buf++;
    2054:	02d21600 	sbcseq	r1, r2, #0, 12
    2058:	15090000 	strne	r0, [r9, #-0]
			while (isspace (*buf)) buf++;
    205c:	00d90803 	sbcseq	r0, r9, r3, lsl #16
    2060:	16020000 	strne	r0, [r2], -r0
    2064:	000004ac 	andeq	r0, r0, ip, lsr #9
		return 0;
    2068:	0b031609 	bleq	c7894 <__ccfg+0xa78ec>
    206c:	000002f1 	strdeq	r0, [r0], -r1
		    case 'x': scanx (word); break;
    2070:	0f7f1604 	svceq	0x007f1604
    2074:	17090000 	strne	r0, [r9, -r0]
		    	    case 'x': scanx (lword); break;
    2078:	011d0903 	tsteq	sp, r3, lsl #18
    207c:	16080000 	strne	r0, [r8], -r0
    2080:	0000045d 	andeq	r0, r0, sp, asr r4
    2084:	0f031809 	svceq	0x00031809
    2088:	000003e4 	andeq	r0, r0, r4, ror #7
    208c:	02cd160c 	sbceq	r1, sp, #12, 12	; 0xc00000
    2090:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    2094:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
    2098:	002c0000 	eoreq	r0, ip, r0
    209c:	0003740f 	andeq	r7, r3, pc, lsl #8
    20a0:	0003f400 	andeq	pc, r3, r0, lsl #8
    20a4:	00941800 	addseq	r1, r4, r0, lsl #16
    20a8:	00030000 	andeq	r0, r3, r0
    20ac:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
    20b0:	c3110000 	tstgt	r1, #0
    20b4:	09000004 	stmdbeq	r0, {r2}
    20b8:	811b031c 	tsthi	fp, ip, lsl r3
    20bc:	14000003 	strne	r0, [r0], #-3
    20c0:	00000395 	muleq	r0, r5, r3
    20c4:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    20c8:	00000416 	andeq	r0, r0, r6, lsl r4
    20cc:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    20d0:	000003fa 	strdeq	r0, [r0], -sl
    20d4:	0004f10e 	andeq	pc, r4, lr, lsl #2
    20d8:	131d0a00 	tstne	sp, #0, 20
    20dc:	000000d9 	ldrdeq	r0, [r0], -r9
    20e0:	5b0e0101 	blpl	3824ec <__ccfg+0x362544>
    20e4:	0a000007 	beq	2108 <TrimAfterColdResetWakeupFromShutDown+0x30>
    20e8:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
    20ec:	01010000 	mrseq	r0, (UNDEF: 1)
    20f0:	0008eb0e 	andeq	lr, r8, lr, lsl #22
    20f4:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    20f8:	000000ea 	andeq	r0, r0, sl, ror #1
    20fc:	1a0e0101 	bne	382508 <__ccfg+0x362560>
    2100:	0a000006 	beq	2120 <TrimAfterColdResetWakeupFromShutDown+0x48>
    2104:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
    2108:	01010000 	mrseq	r0, (UNDEF: 1)
    210c:	000a4803 	andeq	r4, sl, r3, lsl #16
    2110:	0f440a00 	svceq	0x00440a00
    2114:	00000460 	andeq	r0, r0, r0, ror #8
    2118:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
    211c:	01190000 	tsteq	r9, r0
    2120:	0000008d 	andeq	r0, r0, sp, lsl #1
    2124:	00000480 	andeq	r0, r0, r0, lsl #9
    2128:	00008d13 	andeq	r8, r0, r3, lsl sp
    212c:	01f61300 	mvnseq	r1, r0, lsl #6
    2130:	8d130000 	ldchi	0, cr0, [r3, #-0]
    2134:	00000000 	andeq	r0, r0, r0
    2138:	00033e1a 	andeq	r3, r3, sl, lsl lr
    213c:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    2140:	00900305 	addseq	r0, r0, r5, lsl #6
    2144:	121b2000 	andsne	r2, fp, #0
    2148:	0100000c 	tsteq	r0, ip
    214c:	010c0710 	tsteq	ip, r0, lsl r7
    2150:	05010000 	streq	r0, [r1, #-0]
    2154:	00000003 	andeq	r0, r0, r3
    2158:	04461a00 	strbeq	r1, [r6], #-2560	; 0xfffff600
    215c:	1a010000 	bne	42164 <__ccfg+0x221bc>
    2160:	4c03050d 	cfstr32mi	mvfx0, [r3], {13}
    2164:	0f200000 	svceq	0x00200000
    2168:	00000454 	andeq	r0, r0, r4, asr r4
    216c:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    2170:	00009418 	andeq	r9, r0, r8, lsl r4
    2174:	1c000000 	stcne	0, cr0, [r0], {-0}
    2178:	00000a80 	andeq	r0, r0, r0, lsl #21
    217c:	af141e01 	svcge	0x00141e01
    2180:	05000004 	streq	r0, [r0, #-4]
    2184:	00005003 	andeq	r5, r0, r3
    2188:	01da1a20 	bicseq	r1, sl, r0, lsr #20
    218c:	22010000 	andcs	r0, r1, #0
    2190:	98030513 	stmdals	r3, {r0, r1, r4, r8, sl}
    2194:	1a200000 	bne	80219c <__ccfg+0x7e21f4>
    2198:	00000407 	andeq	r0, r0, r7, lsl #8
    219c:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
    21a0:	0000b403 	andeq	fp, r0, r3, lsl #8
    21a4:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
    21a8:	30010000 	andcc	r0, r1, r0
    21ac:	94030507 	strls	r0, [r3], #-1287	; 0xfffffaf9
    21b0:	1a200000 	bne	8021b8 <__ccfg+0x7e2210>
    21b4:	0000042a 	andeq	r0, r0, sl, lsr #8
    21b8:	050f3101 	streq	r3, [pc, #-257]	; 20bf <NOROM_AONRTCCurrent64BitValueGet+0xf>
    21bc:	00009603 	andeq	r9, r0, r3, lsl #12
    21c0:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
    21c4:	31010000 	mrscc	r0, (UNDEF: 1)
    21c8:	a0030519 	andge	r0, r3, r9, lsl r5
    21cc:	0f200000 	svceq	0x00200000
    21d0:	00000129 	andeq	r0, r0, r9, lsr #2
    21d4:	00000527 	andeq	r0, r0, r7, lsr #10
    21d8:	00009418 	andeq	r9, r0, r8, lsl r4
    21dc:	1b000300 	blne	2de4 <NOROM_OSCClockSourceGet+0x1c8>
    21e0:	0000093b 	andeq	r0, r0, fp, lsr r9
    21e4:	170a3601 	strne	r3, [sl, -r1, lsl #12]
    21e8:	01000005 	tsteq	r0, r5
    21ec:	00a40305 	adceq	r0, r4, r5, lsl #6
    21f0:	201a2000 	andscs	r2, sl, r0
    21f4:	01000003 	tsteq	r0, r3
    21f8:	03050c3f 	movweq	r0, #23615	; 0x5c3f
    21fc:	00002e64 	andeq	r2, r0, r4, ror #28
    2200:	00032f1a 	andeq	r2, r3, sl, lsl pc
    2204:	0d450100 	stfeqe	f0, [r5, #-0]
    2208:	00000305 	andeq	r0, r0, r5, lsl #6
    220c:	020b0000 	andeq	r0, fp, #0
    2210:	7a094901 	bvc	25461c <__ccfg+0x234674>
    2214:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    2218:	00000a74 	andeq	r0, r0, r4, ror sl
    221c:	fb074a01 	blx	1d4a2a <__ccfg+0x1b4a82>
    2220:	00000000 	andeq	r0, r0, r0
    2224:	000c560d 	andeq	r5, ip, sp, lsl #12
    2228:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
    222c:	000000fb 	strdeq	r0, [r0], -fp
    2230:	7d030001 	stcvc	0, cr0, [r3, #-4]
    2234:	0100000b 	tsteq	r0, fp
    2238:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
    223c:	7a0f0000 	bvc	3c2244 <__ccfg+0x3a229c>
    2240:	96000005 	strls	r0, [r0], -r5
    2244:	18000005 	stmdane	r0, {r0, r2}
    2248:	00000094 	muleq	r0, r4, r0
    224c:	b21c0000 	andslt	r0, ip, #0
    2250:	0100000b 	tsteq	r0, fp
    2254:	0586114e 	streq	r1, [r6, #334]	; 0x14e
    2258:	03050000 	movweq	r0, #20480	; 0x5000
    225c:	20000058 	andcs	r0, r0, r8, asr r0
    2260:	0005b80f 	andeq	fp, r5, pc, lsl #16
    2264:	0005b800 	andeq	fp, r5, r0, lsl #16
    2268:	00941800 	addseq	r1, r4, r0, lsl #16
    226c:	00000000 	andeq	r0, r0, r0
    2270:	011d040a 	tsteq	sp, sl, lsl #8
    2274:	951d0000 	ldrls	r0, [sp, #-0]
    2278:	0100000a 	tsteq	r0, sl
    227c:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
    2280:	05000005 	streq	r0, [r0, #-5]
    2284:	00006003 	andeq	r6, r0, r3
    2288:	011d0f20 	tsteq	sp, r0, lsr #30
    228c:	05e10000 	strbeq	r0, [r1, #0]!
    2290:	94180000 	ldrls	r0, [r8], #-0
    2294:	00000000 	andeq	r0, r0, r0
    2298:	0b381d00 	bleq	e096a0 <__ccfg+0xde96f8>
    229c:	c2010000 	andgt	r0, r1, #0
    22a0:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
    22a4:	03050000 	movweq	r0, #20480	; 0x5000
    22a8:	2000005c 	andcs	r0, r0, ip, asr r0
    22ac:	000b951d 	andeq	r9, fp, sp, lsl r5
    22b0:	02c20100 	sbceq	r0, r2, #0, 2
    22b4:	0005d126 	andeq	sp, r5, r6, lsr #2
    22b8:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    22bc:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
    22c0:	000bde01 	andeq	sp, fp, r1, lsl #28
    22c4:	052f0100 	streq	r0, [pc, #-256]!	; 21cc <NOROM_SetupTrimDevice+0x20>
    22c8:	010c0107 	tsteq	ip, r7, lsl #2
	...
    22d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    22d8:	0b6c011f 	bleq	1b0275c <__ccfg+0x1ae27b4>
    22dc:	82010000 	andhi	r0, r1, #0
    22e0:	ac010604 	stcge	6, cr0, [r1], {4}
    22e4:	e8000014 	stmda	r0, {r2, r4}
    22e8:	01000015 	tsteq	r0, r5, lsl r0
    22ec:	00070e9c 	muleq	r7, ip, lr
    22f0:	0bad2000 	bleq	feb4a2f8 <_estack+0xdeb452f8>
    22f4:	82010000 	andhi	r0, r1, #0
    22f8:	070e1804 	streq	r1, [lr, -r4, lsl #16]
    22fc:	051f0000 	ldreq	r0, [pc, #-0]	; 2304 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x38>
    2300:	22210000 	eorcs	r0, r1, #0
    2304:	006c6176 	rsbeq	r6, ip, r6, ror r1
    2308:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    230c:	0000010c 	andeq	r0, r0, ip, lsl #2
    2310:	0000055f 	andeq	r0, r0, pc, asr r5
    2314:	00706123 	rsbseq	r6, r0, r3, lsr #2
    2318:	0a048801 	beq	124324 <__ccfg+0x10437c>
    231c:	000000c1 	andeq	r0, r0, r1, asr #1
    2320:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    2324:	01006362 	tsteq	r0, r2, ror #6
    2328:	ef070489 	svc	0x00070489
    232c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    2330:	22000005 	andcs	r0, r0, #5
    2334:	8a010076 	bhi	42514 <__ccfg+0x2256c>
    2338:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    233c:	05d20000 	ldrbeq	r0, [r2]
    2340:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    2344:	8b010073 	blhi	42518 <__ccfg+0x22570>
    2348:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    234c:	66250000 	strtvs	r0, [r5], -r0
    2350:	0100000c 	tsteq	r0, ip
    2354:	780104b0 	stmdavc	r1, {r4, r5, r7, sl}
    2358:	26000015 			; <UNDEFINED> instruction: 0x26000015
    235c:	00001538 	andeq	r1, r0, r8, lsr r5
    2360:	00001554 	andeq	r1, r0, r4, asr r5
    2364:	000006c0 	andeq	r0, r0, r0, asr #13
    2368:	01006922 	tsteq	r0, r2, lsr #18
    236c:	ef0a049f 	svc	0x000a049f
    2370:	fb000000 	blx	237a <NOROM_SetupGetTrimForAnabypassValue1+0x2>
    2374:	00000005 	andeq	r0, r0, r5
    2378:	00068027 	andeq	r8, r6, r7, lsr #32
    237c:	0006d900 	andeq	sp, r6, r0, lsl #18
    2380:	00642200 	rsbeq	r2, r4, r0, lsl #4
    2384:	0b04a901 	bleq	12c790 <__ccfg+0x10c7e8>
    2388:	0000010c 	andeq	r0, r0, ip, lsl #2
    238c:	0000060e 	andeq	r0, r0, lr, lsl #12
    2390:	15c42600 	strbne	r2, [r4, #1536]	; 0x600
    2394:	15d20000 	ldrbne	r0, [r2]
    2398:	06f60000 	ldrbteq	r0, [r6], r0
    239c:	73220000 			; <UNDEFINED> instruction: 0x73220000
    23a0:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    23a4:	0001f60b 	andeq	pc, r1, fp, lsl #12
    23a8:	00063700 	andeq	r3, r6, r0, lsl #14
    23ac:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    23b0:	da000010 	ble	23f8 <NOROM_SetupGetTrimForAmpcompTh2+0xc>
    23b4:	b0000014 	andlt	r0, r0, r4, lsl r0
    23b8:	01000006 	tsteq	r0, r6
    23bc:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
    23c0:	000010d4 	ldrdeq	r1, [r0], -r4
    23c4:	040a0000 	streq	r0, [sl], #-0
    23c8:	00000203 	andeq	r0, r0, r3, lsl #4
    23cc:	000c362a 	andeq	r3, ip, sl, lsr #12
    23d0:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    23d4:	0fa4010d 	svceq	0x00a4010d
    23d8:	0fbc0000 	svceq	0x00bc0000
    23dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    23e0:	00000753 	andeq	r0, r0, r3, asr r7
    23e4:	0100632b 	tsteq	r0, fp, lsr #6
    23e8:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
    23ec:	4a000000 	bmi	23f4 <NOROM_SetupGetTrimForAmpcompTh2+0x8>
    23f0:	28000006 	stmdacs	r0, {r1, r2}
    23f4:	000010c1 	andeq	r1, r0, r1, asr #1
    23f8:	00000fa4 	andeq	r0, r0, r4, lsr #31
    23fc:	00000628 	andeq	r0, r0, r8, lsr #12
    2400:	02044901 	andeq	r4, r4, #16384	; 0x4000
    2404:	0010d429 	andseq	sp, r0, r9, lsr #8
    2408:	2c000000 	stccs	0, cr0, [r0], {-0}
    240c:	000b1d01 	andeq	r1, fp, r1, lsl #26
    2410:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    2414:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    2420:	9c010000 	stcls	0, cr0, [r1], {-0}
    2424:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    2428:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
    242c:	1c042801 	stcne	8, cr2, [r4], {1}
    2430:	00000129 	andeq	r0, r0, r9, lsr #2
    2434:	0000065d 	andeq	r0, r0, sp, asr r6
    2438:	000bfe2d 	andeq	pc, fp, sp, lsr #28
    243c:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    2440:	0005b809 	andeq	fp, r5, r9, lsl #16
    2444:	00067b00 	andeq	r7, r6, r0, lsl #22
    2448:	616d2200 	cmnvs	sp, r0, lsl #4
    244c:	32010078 	andcc	r0, r1, #120	; 0x78
    2450:	011d0804 	tsteq	sp, r4, lsl #16
    2454:	06990000 	ldreq	r0, [r9], r0
    2458:	332d0000 			; <UNDEFINED> instruction: 0x332d0000
    245c:	0100000b 	tsteq	r0, fp
    2460:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
    2464:	b7000001 	strlt	r0, [r0, -r1]
    2468:	00000006 	andeq	r0, r0, r6
    246c:	0beb012c 	bleq	ffac2924 <_estack+0xdfabd924>
    2470:	15010000 	strne	r0, [r1, #-0]
    2474:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    2480:	01000000 	mrseq	r0, (UNDEF: 0)
    2484:	0007e39c 	muleq	r7, ip, r3
    2488:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    248c:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    2490:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    2494:	06e00000 	strbteq	r0, [r0], r0
    2498:	1f000000 	svcne	0x00000000
    249c:	000bd101 	andeq	sp, fp, r1, lsl #2
    24a0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    24a4:	14940106 	ldrne	r0, [r4], #262	; 0x106
    24a8:	14ac0000 	strtne	r0, [ip], #0
    24ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    24b0:	0000080e 	andeq	r0, r0, lr, lsl #16
    24b4:	000bc120 	andeq	ip, fp, r0, lsr #2
    24b8:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    24bc:	0000d919 	andeq	sp, r0, r9, lsl r9
    24c0:	0006f300 	andeq	pc, r6, r0, lsl #6
    24c4:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    24c8:	00000a67 	andeq	r0, r0, r7, ror #20
    24cc:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
    24d0:	0005b801 	andeq	fp, r5, r1, lsl #16
    24d4:	0013b800 	andseq	fp, r3, r0, lsl #16
    24d8:	00146000 	andseq	r6, r4, r0
    24dc:	809c0100 	addshi	r0, ip, r0, lsl #2
    24e0:	20000008 	andcs	r0, r0, r8
    24e4:	000013d7 	ldrdeq	r1, [r0], -r7
    24e8:	1a03a301 	bne	eb0f4 <__ccfg+0xcb14c>
    24ec:	000000d9 	ldrdeq	r0, [r0], -r9
    24f0:	00000706 	andeq	r0, r0, r6, lsl #14
    24f4:	000bfe2d 	andeq	pc, fp, sp, lsr #28
    24f8:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    24fc:	0005b809 	andeq	fp, r5, r9, lsl #16
    2500:	00071900 	andeq	r1, r7, r0, lsl #18
    2504:	63632200 	cmnvs	r3, #0, 4
    2508:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    250c:	0005b811 	andeq	fp, r5, r1, lsl r8
    2510:	00074d00 	andeq	r4, r7, r0, lsl #26
    2514:	0b9c2d00 	bleq	fe70d91c <_estack+0xde70891c>
    2518:	ab010000 	blge	42520 <__ccfg+0x22578>
    251c:	011d1503 	tsteq	sp, r3, lsl #10
    2520:	07760000 	ldrbeq	r0, [r6, -r0]!
    2524:	d62d0000 	strtle	r0, [sp], -r0
    2528:	01000013 	tsteq	r0, r3, lsl r0
    252c:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
    2530:	89000001 	stmdbhi	r0, {r0}
    2534:	00000007 	andeq	r0, r0, r7
    2538:	0c5c012e 	ldfeqe	f0, [ip], {46}	; 0x2e
    253c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2540:	01010603 	tsteq	r1, r3, lsl #12
    2544:	0000089d 	muleq	r0, sp, r8
    2548:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    254c:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
    2550:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2554:	0a7a2a00 	beq	1e8cd5c <__ccfg+0x1e6cdb4>
    2558:	4a010000 	bmi	42560 <__ccfg+0x225b8>
    255c:	24010d03 	strcs	r0, [r1], #-3331	; 0xfffff2fd
    2560:	a400000f 	strge	r0, [r0], #-15
    2564:	0100000f 	tsteq	r0, pc
    2568:	0008e79c 	muleq	r8, ip, r7
    256c:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    2570:	034a0100 	movteq	r0, #41216	; 0xa100
    2574:	0005b81b 	andeq	fp, r5, fp, lsl r8
    2578:	0007b300 	andeq	fp, r7, r0, lsl #6
    257c:	0bfe2d00 	bleq	fff8d984 <_estack+0xdff88984>
    2580:	57010000 	strpl	r0, [r1, -r0]
    2584:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    2588:	07d10000 	ldrbeq	r0, [r1, r0]
    258c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2590:	57010063 	strpl	r0, [r1, -r3, rrx]
    2594:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    2598:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    259c:	30000000 	andcc	r0, r0, r0
    25a0:	000aba01 	andeq	fp, sl, r1, lsl #20
    25a4:	02f00100 	rscseq	r0, r0, #0, 2
    25a8:	00127806 	andseq	r7, r2, r6, lsl #16
    25ac:	0012c800 	andseq	ip, r2, r0, lsl #16
    25b0:	119c0100 	orrsne	r0, ip, r0, lsl #2
    25b4:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    25b8:	00000b47 	andeq	r0, r0, r7, asr #22
    25bc:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
    25c0:	0000011d 	andeq	r0, r0, sp, lsl r1
    25c4:	00000846 	andeq	r0, r0, r6, asr #16
    25c8:	69013100 	stmdbvs	r1, {r8, ip, sp}
    25cc:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
    25d0:	ef010602 	svc	0x00010602
    25d4:	dc000000 	stcle	0, cr0, [r0], {-0}
    25d8:	78000011 	stmdavc	r0, {r0, r4}
    25dc:	01000012 	tsteq	r0, r2, lsl r0
    25e0:	0009949c 	muleq	r9, ip, r4
    25e4:	0ba22000 	bleq	fe88a5ec <_estack+0xde8855ec>
    25e8:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    25ec:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    25f0:	08640000 	stmdaeq	r4!, {}^	; <UNPREDICTABLE>
    25f4:	642b0000 	strtvs	r0, [fp], #-0
    25f8:	01007665 	tsteq	r0, r5, ror #12
    25fc:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    2600:	82000000 	andhi	r0, r0, #0
    2604:	20000008 	andcs	r0, r0, r8
    2608:	0000072b 	andeq	r0, r0, fp, lsr #14
    260c:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    2610:	000000d9 	ldrdeq	r0, [r0], -r9
    2614:	000008a0 	andeq	r0, r0, r0, lsr #17
    2618:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
    261c:	02790100 	rsbseq	r0, r9, #0, 2
    2620:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
    2624:	0008be00 	andeq	fp, r8, r0, lsl #28
    2628:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
    262c:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
    2630:	00d94002 	sbcseq	r4, r9, r2
    2634:	08dc0000 	ldmeq	ip, {}^	; <UNPREDICTABLE>
    2638:	72220000 	eorvc	r0, r2, #0
    263c:	01007465 	tsteq	r0, r5, ror #8
    2640:	ef07027b 	svc	0x0007027b
    2644:	fc000000 	stc2	0, cr0, [r0], {-0}
    2648:	00000008 	andeq	r0, r0, r8
    264c:	0b5a011f 	bleq	1682ad0 <__ccfg+0x1662b28>
    2650:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    2654:	b8010602 	stmdalt	r1, {r1, r9, sl}
    2658:	dc000011 	stcle	0, cr0, [r0], {17}
    265c:	01000011 	tsteq	r0, r1, lsl r0
    2660:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    2664:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
    2668:	02690100 	rsbeq	r0, r9, #0, 2
    266c:	0004541e 	andeq	r5, r4, lr, lsl r4
    2670:	00093000 	andeq	r3, r9, r0
    2674:	6f6c2b00 	svcvs	0x006c2b00
    2678:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    267c:	008d2602 	addeq	r2, sp, r2, lsl #12
    2680:	09590000 	ldmdbeq	r9, {}^	; <UNPREDICTABLE>
    2684:	1f000000 	svcne	0x00000000
    2688:	000c6d01 	andeq	r6, ip, r1, lsl #26
    268c:	025f0100 	subseq	r0, pc, #0, 2
    2690:	00000106 	andeq	r0, r0, r6, lsl #2
    2694:	00000000 	andeq	r0, r0, r0
    2698:	9c010000 	stcls	0, cr0, [r1], {-0}
    269c:	00000a16 	andeq	r0, r0, r6, lsl sl
    26a0:	000ba820 	andeq	sl, fp, r0, lsr #16
    26a4:	025f0100 	subseq	r0, pc, #0, 2
    26a8:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    26ac:	00098200 	andeq	r8, r9, r0, lsl #4
    26b0:	00633200 	rsbeq	r3, r3, r0, lsl #4
    26b4:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    26b8:	000001fc 	strdeq	r0, [r0], -ip
    26bc:	6e2b5101 	sufvse	f5, f3, f1
    26c0:	025f0100 	subseq	r0, pc, #0, 2
    26c4:	00008d2b 	andeq	r8, r0, fp, lsr #26
    26c8:	0009a000 	andeq	sl, r9, r0
    26cc:	011f0000 	tsteq	pc, r0
    26d0:	00000c2a 	andeq	r0, r0, sl, lsr #24
    26d4:	06025901 	streq	r5, [r2], -r1, lsl #18
    26d8:	0011a201 	andseq	sl, r1, r1, lsl #4
    26dc:	0011b600 	andseq	fp, r1, r0, lsl #12
    26e0:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    26e4:	2000000a 	andcs	r0, r0, sl
    26e8:	00000ba8 	andeq	r0, r0, r8, lsr #23
    26ec:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    26f0:	000001f6 	strdeq	r0, [r0], -r6
    26f4:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
    26f8:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    26fc:	02590100 	subseq	r0, r9, #0, 2
    2700:	00070e2b 	andeq	r0, r7, fp, lsr #28
    2704:	0009c600 	andeq	ip, r9, r0, lsl #12
    2708:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    270c:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    2710:	0000008d 	andeq	r0, r0, sp, lsl #1
    2714:	000009e4 	andeq	r0, r0, r4, ror #19
    2718:	9e011f00 	cdpls	15, 0, cr1, cr1, cr0, {0}
    271c:	0100000c 	tsteq	r0, ip
    2720:	01060254 	tsteq	r6, r4, asr r2
	...
    272c:	0aa69c01 	beq	fe9a9738 <_estack+0xde9a4738>
    2730:	642b0000 	strtvs	r0, [fp], #-0
    2734:	02540100 	subseq	r0, r4, #0, 2
    2738:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    273c:	0009f700 	andeq	pc, r9, r0, lsl #14
    2740:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2744:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    2748:	0000070e 	andeq	r0, r0, lr, lsl #14
    274c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    2750:	01006e32 	tsteq	r0, r2, lsr lr
    2754:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    2758:	01000000 	mrseq	r0, (UNDEF: 0)
    275c:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    2760:	00000b71 	andeq	r0, r0, r1, ror fp
    2764:	06024e01 	streq	r4, [r2], -r1, lsl #28
    2768:	00000001 	andeq	r0, r0, r1
    276c:	00000000 	andeq	r0, r0, r0
    2770:	de9c0100 	fmllee	f0, f4, f0
    2774:	2b00000a 	blcs	27a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xcc>
    2778:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    277c:	01f61902 	mvnseq	r1, r2, lsl #18
    2780:	0a1d0000 	beq	742788 <__ccfg+0x7227e0>
    2784:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2788:	024e0100 	subeq	r0, lr, #0, 2
    278c:	00070e28 	andeq	r0, r7, r8, lsr #28
    2790:	000a3b00 	andeq	r3, sl, r0, lsl #22
    2794:	011f0000 	tsteq	pc, r0
    2798:	00000c79 	andeq	r0, r0, r9, ror ip
    279c:	06024701 	streq	r4, [r2], -r1, lsl #14
    27a0:	00000001 	andeq	r0, r0, r1
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    27ac:	2b00000b 	blcs	27e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x108>
    27b0:	47010064 	strmi	r0, [r1, -r4, rrx]
    27b4:	01f61a02 	mvnseq	r1, r2, lsl #20
    27b8:	0a4e0000 	beq	13827c0 <__ccfg+0x1362818>
    27bc:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    27c0:	02470100 	subeq	r0, r7, #0, 2
    27c4:	00070e29 	andeq	r0, r7, r9, lsr #28
    27c8:	000a6c00 	andeq	r6, sl, r0, lsl #24
    27cc:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    27d0:	30024701 	andcc	r4, r2, r1, lsl #14
    27d4:	0000008d 	andeq	r0, r0, sp, lsl #1
    27d8:	00000a7f 	andeq	r0, r0, pc, ror sl
    27dc:	5b011f00 	blpl	4a3e4 <__ccfg+0x2a43c>
    27e0:	0100000a 	tsteq	r0, sl
    27e4:	01060242 	tsteq	r6, r2, asr #4
	...
    27f0:	0b5d9c01 	bleq	17697fc <__ccfg+0x1749854>
    27f4:	642b0000 	strtvs	r0, [fp], #-0
    27f8:	02420100 	subeq	r0, r2, #0, 2
    27fc:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    2800:	000a9200 	andeq	r9, sl, r0, lsl #4
    2804:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2808:	28024201 	stmdacs	r2, {r0, r9, lr}
    280c:	0000070e 	andeq	r0, r0, lr, lsl #14
    2810:	00000aa5 	andeq	r0, r0, r5, lsr #21
    2814:	11012c00 	tstne	r1, r0, lsl #24
    2818:	0100000b 	tsteq	r0, fp
    281c:	01050239 	tsteq	r5, r9, lsr r2
    2820:	0000008d 	andeq	r0, r0, sp, lsl #1
    2824:	00001194 	muleq	r0, r4, r1
    2828:	000011a2 	andeq	r1, r0, r2, lsr #3
    282c:	0b999c01 	bleq	fe669838 <_estack+0xde664838>
    2830:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2834:	02390100 	eorseq	r0, r9, #0, 2
    2838:	00070e1e 	andeq	r0, r7, lr, lsl lr
    283c:	000ac300 	andeq	ip, sl, r0, lsl #6
    2840:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2844:	06023b01 	streq	r3, [r2], -r1, lsl #22
    2848:	0000008d 	andeq	r0, r0, sp, lsl #1
    284c:	00000ae1 	andeq	r0, r0, r1, ror #21
    2850:	2a012c00 	bcs	4d858 <__ccfg+0x2d8b0>
    2854:	0100000b 	tsteq	r0, fp
    2858:	0106022d 	tsteq	r6, sp, lsr #4
    285c:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    2868:	0be69c01 	bleq	ff9a9874 <_estack+0xdf9a4874>
    286c:	662b0000 	strtvs	r0, [fp], -r0
    2870:	01006e75 	tsteq	r0, r5, ror lr
    2874:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
    2878:	f4000002 	vst4.8	{d0-d3}, [r0], r2
    287c:	2200000a 	andcs	r0, r0, #10
    2880:	2f010069 	svccs	0x00010069
    2884:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    2888:	0b120000 	bleq	482890 <__ccfg+0x4628e8>
    288c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2890:	02300100 	eorseq	r0, r0, #0, 2
    2894:	0000d907 	andeq	sp, r0, r7, lsl #18
    2898:	000b3000 	andeq	r3, fp, r0
    289c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    28a0:	00000b2b 	andeq	r0, r0, fp, lsr #22
    28a4:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    28a8:	00011d01 	andeq	r1, r1, r1, lsl #26
    28ac:	00117000 	andseq	r7, r1, r0
    28b0:	00119400 	andseq	r9, r1, r0, lsl #8
    28b4:	229c0100 	addscs	r0, ip, #0, 2
    28b8:	2b00000c 	blcs	28f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    28bc:	006e7566 	rsbeq	r7, lr, r6, ror #10
    28c0:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
    28c4:	000002f1 	strdeq	r0, [r0], -r1
    28c8:	00000b43 	andeq	r0, r0, r3, asr #22
    28cc:	01006923 	tsteq	r0, r3, lsr #18
    28d0:	160e0221 	strne	r0, [lr], -r1, lsr #4
    28d4:	01000004 	tsteq	r0, r4
    28d8:	012c0050 	qsubeq	r0, r0, ip
    28dc:	00000c1c 	andeq	r0, r0, ip, lsl ip
    28e0:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    28e4:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
    28f0:	609c0100 	addsvs	r0, ip, r0, lsl #2
    28f4:	2b00000c 	blcs	292c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x104>
    28f8:	00646970 	rsbeq	r6, r4, r0, ror r9
    28fc:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    2900:	0000011d 	andeq	r0, r0, sp, lsl r1
    2904:	00000b6c 	andeq	r0, r0, ip, ror #22
    2908:	01006922 	tsteq	r0, r2, lsr #18
    290c:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    2910:	8a000004 	bhi	2928 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    2914:	0000000b 	andeq	r0, r0, fp
    2918:	0be3011f 	bleq	ff8c2d9c <_estack+0xdf8bdd9c>
    291c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2920:	60010601 	andvs	r0, r1, r1, lsl #12
    2924:	b8000013 	stmdalt	r0, {r0, r1, r4}
    2928:	01000013 	tsteq	r0, r3, lsl r0
    292c:	000cc99c 	muleq	ip, ip, r9
    2930:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    2934:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    2938:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    293c:	0ba80000 	bleq	fea02944 <_estack+0xde9fd944>
    2940:	72220000 	eorvc	r0, r2, #0
    2944:	01006c65 	tsteq	r0, r5, ror #24
    2948:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
    294c:	c6000000 	strgt	r0, [r0], -r0
    2950:	2200000b 	andcs	r0, r0, #11
    2954:	fa010069 	blx	42b00 <__ccfg+0x22b58>
    2958:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    295c:	0bd90000 	bleq	ff642964 <_estack+0xdf63d964>
    2960:	6a220000 	bvs	882968 <__ccfg+0x8629c0>
    2964:	01fa0100 	mvnseq	r0, r0, lsl #2
    2968:	00041612 	andeq	r1, r4, r2, lsl r6
    296c:	000c0d00 	andeq	r0, ip, r0, lsl #26
    2970:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    2974:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    2978:	00000416 	andeq	r0, r0, r6, lsl r4
    297c:	00000c2b 	andeq	r0, r0, fp, lsr #24
    2980:	90011f00 	andls	r1, r1, r0, lsl #30
    2984:	0100000a 	tsteq	r0, sl
    2988:	010601d9 	ldrdeq	r0, [r6, -r9]
    298c:	00001310 	andeq	r1, r0, r0, lsl r3
    2990:	00001360 	andeq	r1, r0, r0, ror #6
    2994:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
    2998:	702b0000 	eorvc	r0, fp, r0
    299c:	01006469 	tsteq	r0, r9, ror #8
    29a0:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
    29a4:	49000001 	stmdbmi	r0, {r0}
    29a8:	2200000c 	andcs	r0, r0, #12
    29ac:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    29b0:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    29b4:	0c7d0000 	ldcleq	0, cr0, [sp], #-0
    29b8:	6a240000 	bvs	9029c0 <__ccfg+0x8e2a18>
    29bc:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    29c0:	00041612 	andeq	r1, r4, r2, lsl r6
    29c4:	542a0000 	strtpl	r0, [sl], #-0
    29c8:	0100000a 	tsteq	r0, sl
    29cc:	010d01c4 	smlabteq	sp, r4, r1, r0
    29d0:	00000ee8 	andeq	r0, r0, r8, ror #29
    29d4:	00000f24 	andeq	r0, r0, r4, lsr #30
    29d8:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
    29dc:	70320000 	eorsvc	r0, r2, r0
    29e0:	01006469 	tsteq	r0, r9, ror #8
    29e4:	162101c4 	strtne	r0, [r1], -r4, asr #3
    29e8:	01000004 	tsteq	r0, r4
    29ec:	0c512d50 	mrrceq	13, 5, r2, r1, cr0
    29f0:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    29f4:	011d0801 	tsteq	sp, r1, lsl #16
    29f8:	0ca60000 	stceq	0, cr0, [r6]
    29fc:	6a220000 	bvs	882a04 <__ccfg+0x862a5c>
    2a00:	01c90100 	biceq	r0, r9, r0, lsl #2
    2a04:	00008d06 	andeq	r8, r0, r6, lsl #26
    2a08:	000cb900 	andeq	fp, ip, r0, lsl #18
    2a0c:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2a10:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    2a14:	00000416 	andeq	r0, r0, r6, lsl r4
    2a18:	2c005201 	sfmcs	f5, 4, [r0], {1}
    2a1c:	000c2401 	andeq	r2, ip, r1, lsl #8
    2a20:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    2a24:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    2a30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a34:	00000da1 	andeq	r0, r0, r1, lsr #27
    2a38:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2a3c:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    2a40:	00011d13 	andeq	r1, r1, r3, lsl sp
    2a44:	000ccc00 	andeq	ip, ip, r0, lsl #24
    2a48:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2a4c:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    2a50:	00000416 	andeq	r0, r0, r6, lsl r4
    2a54:	00000cea 	andeq	r0, r0, sl, ror #25
    2a58:	73013300 	movwvc	r3, #4864	; 0x1300
    2a5c:	0100000a 	tsteq	r0, sl
    2a60:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    2a6c:	011f9c01 	tsteq	pc, r1, lsl #24
    2a70:	000018db 	ldrdeq	r1, [r0], -fp
    2a74:	06019a01 	streq	r9, [r1], -r1, lsl #20
    2a78:	00113801 	andseq	r3, r1, r1, lsl #16
    2a7c:	00117000 	andseq	r7, r1, r0
    2a80:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    2a84:	2b00000d 	blcs	2ac0 <NOROM_ChipInfo_GetChipFamily>
    2a88:	9a010064 	bls	42c20 <__ccfg+0x22c78>
    2a8c:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    2a90:	0d080000 	stceq	0, cr0, [r8, #-0]
    2a94:	c1200000 			; <UNDEFINED> instruction: 0xc1200000
    2a98:	0100000b 	tsteq	r0, fp
    2a9c:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    2aa0:	1b000000 	blne	2aa8 <NOROM_SysCtrlResetSourceGet>
    2aa4:	0000000d 	andeq	r0, r0, sp
    2aa8:	0c86012c 	stfeqs	f0, [r6], {44}	; 0x2c
    2aac:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2ab0:	1d010701 	stcne	7, cr0, [r1, #-4]
    2ab4:	14000001 	strne	r0, [r0], #-1
    2ab8:	38000011 	stmdacc	r0, {r0, r4}
    2abc:	01000011 	tsteq	r0, r1, lsl r0
    2ac0:	000e3e9c 	muleq	lr, ip, lr
    2ac4:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    2ac8:	88010064 	stmdahi	r1, {r2, r5, r6}
    2acc:	011d1801 	tsteq	sp, r1, lsl #16
    2ad0:	0d2e0000 	stceq	0, cr0, [lr, #-0]
    2ad4:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2ad8:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    2adc:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    2ae0:	0d570000 	ldcleq	0, cr0, [r7, #-0]
    2ae4:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2ae8:	018a0100 	orreq	r0, sl, r0, lsl #2
    2aec:	0004160e 	andeq	r1, r4, lr, lsl #12
    2af0:	000d7500 	andeq	r7, sp, r0, lsl #10
    2af4:	011f0000 	tsteq	pc, r0
    2af8:	00000b4c 	andeq	r0, r0, ip, asr #22
    2afc:	06017801 	streq	r7, [r1], -r1, lsl #16
    2b00:	00000001 	andeq	r0, r0, r1
    2b04:	00000000 	andeq	r0, r0, r0
    2b08:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    2b0c:	2b00000e 	blcs	2b4c <NOROM_ChipInfo_GetHwRevision+0x40>
    2b10:	00646970 	rsbeq	r6, r4, r0, ror r9
    2b14:	1b017801 	blne	60b20 <__ccfg+0x40b78>
    2b18:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b1c:	00000d93 	muleq	r0, r3, sp
    2b20:	000bb320 	andeq	fp, fp, r0, lsr #6
    2b24:	01780100 	cmneq	r8, r0, lsl #2
    2b28:	00011d26 	andeq	r1, r1, r6, lsr #26
    2b2c:	000da600 	andeq	sl, sp, r0, lsl #12
    2b30:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2b34:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    2b38:	00000416 	andeq	r0, r0, r6, lsl r4
    2b3c:	6a225001 	bvs	896b48 <__ccfg+0x876ba0>
    2b40:	017d0100 	cmneq	sp, r0, lsl #2
    2b44:	00008d07 	andeq	r8, r0, r7, lsl #26
    2b48:	000dc400 	andeq	ip, sp, r0, lsl #8
    2b4c:	011f0000 	tsteq	pc, r0
    2b50:	00000b04 	andeq	r0, r0, r4, lsl #22
    2b54:	06016601 	streq	r6, [r1], -r1, lsl #12
    2b58:	0010e001 	andseq	lr, r0, r1
    2b5c:	00111400 	andseq	r1, r1, r0, lsl #8
    2b60:	db9c0100 	blle	fe702f68 <_estack+0xde6fdf68>
    2b64:	3400000e 	strcc	r0, [r0], #-14
    2b68:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    2b6c:	1a016601 	bne	5c378 <__ccfg+0x3c3d0>
    2b70:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b74:	6a225001 	bvs	896b80 <__ccfg+0x876bd8>
    2b78:	016a0100 	cmneq	sl, r0, lsl #2
    2b7c:	00008d06 	andeq	r8, r0, r6, lsl #26
    2b80:	000de200 	andeq	lr, sp, r0, lsl #4
    2b84:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2b88:	0e016b01 	vmlaeq.f64	d6, d1, d1
    2b8c:	00000416 	andeq	r0, r0, r6, lsl r4
    2b90:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    2b94:	000bc701 	andeq	ip, fp, r1, lsl #14
    2b98:	01590100 	cmpeq	r9, r0, lsl #2
    2b9c:	11010106 	tstne	r1, r6, lsl #2
    2ba0:	3500000f 	strcc	r0, [r0, #-15]
    2ba4:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    2ba8:	17015901 	strne	r5, [r1, -r1, lsl #18]
    2bac:	0000011d 	andeq	r0, r0, sp, lsl r1
    2bb0:	000bc135 	andeq	ip, fp, r5, lsr r1
    2bb4:	01590100 	cmpeq	r9, r0, lsl #2
    2bb8:	0000d923 	andeq	sp, r0, r3, lsr #18
    2bbc:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    2bc0:	07015d01 	streq	r5, [r1, -r1, lsl #26]
    2bc4:	000000ef 	andeq	r0, r0, pc, ror #1
    2bc8:	3f011f00 	svccc	0x00011f00
    2bcc:	0100000b 	tsteq	r0, fp
    2bd0:	01060153 	tsteq	r6, r3, asr r1
    2bd4:	00001098 	muleq	r0, r8, r0
    2bd8:	000010ac 	andeq	r1, r0, ip, lsr #1
    2bdc:	0f3c9c01 	svceq	0x003c9c01
    2be0:	c1200000 			; <UNDEFINED> instruction: 0xc1200000
    2be4:	0100000b 	tsteq	r0, fp
    2be8:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    2bec:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    2bf0:	0000000d 	andeq	r0, r0, sp
    2bf4:	0a86012c 	beq	fe1830ac <_estack+0xde17e0ac>
    2bf8:	2c010000 	stccs	0, cr0, [r1], {-0}
    2bfc:	1d010701 	stcne	7, cr0, [r1, #-4]
    2c00:	60000001 	andvs	r0, r0, r1
    2c04:	94000014 	strls	r0, [r0], #-20	; 0xffffffec
    2c08:	01000014 	tsteq	r0, r4, lsl r0
    2c0c:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    2c10:	0b602000 	bleq	180ac18 <__ccfg+0x17eac70>
    2c14:	2c010000 	stccs	0, cr0, [r1], {-0}
    2c18:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    2c1c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2c20:	7f200000 	svcvc	0x00200000
    2c24:	0100000f 	tsteq	r0, pc
    2c28:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    2c2c:	26000001 	strcs	r0, [r0], -r1
    2c30:	2300000e 	movwcs	r0, #14
    2c34:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    2c38:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2c3c:	50010000 	andpl	r0, r1, r0
    2c40:	00065836 	andeq	r5, r6, r6, lsr r8
    2c44:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    2c48:	0f013d01 	svceq	0x00013d01
    2c4c:	00000416 	andeq	r0, r0, r6, lsl r4
    2c50:	00000e44 	andeq	r0, r0, r4, asr #28
    2c54:	01370000 	teqeq	r7, r0
    2c58:	00000c04 	andeq	r0, r0, r4, lsl #24
    2c5c:	0106af01 	tsteq	r6, r1, lsl #30
    2c60:	000fe301 	andeq	lr, pc, r1, lsl #6
    2c64:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    2c68:	af01006e 	svcge	0x0001006e
    2c6c:	0000d91a 	andeq	sp, r0, sl, lsl r9
    2c70:	08013900 	stmdaeq	r1, {r8, fp, ip, sp}
    2c74:	af010000 	svcge	0x00010000
    2c78:	0000cd27 	andeq	ip, r0, r7, lsr #26
    2c7c:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    2c80:	160ebd01 	strne	fp, [lr], -r1, lsl #26
    2c84:	3a000004 	bcc	2c9c <NOROM_OSCClockSourceGet+0x80>
    2c88:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    2c8c:	0000d907 	andeq	sp, r0, r7, lsl #18
    2c90:	4f4d3b00 	svcmi	0x004d3b00
    2c94:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    2c98:	3c000101 	stfccs	f0, [r0], {1}
    2c9c:	000c4101 	andeq	r4, ip, r1, lsl #2
    2ca0:	06a70100 	strteq	r0, [r7], r0, lsl #2
    2ca4:	00000001 	andeq	r0, r0, r1
    2ca8:	00000000 	andeq	r0, r0, r0
    2cac:	189c0100 	ldmne	ip, {r8}
    2cb0:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2cb4:	a7010074 	smlsdxge	r1, r4, r0, r0
    2cb8:	0001291f 	andeq	r2, r1, pc, lsl r9
    2cbc:	000e6d00 	andeq	r6, lr, r0, lsl #26
    2cc0:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    2cc4:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    2cc8:	80000000 	andhi	r0, r0, r0
    2ccc:	0000000e 	andeq	r0, r0, lr
    2cd0:	0c90013c 	ldfeqs	f0, [r0], {60}	; 0x3c
    2cd4:	8f010000 	svchi	0x00010000
    2cd8:	00000106 	andeq	r0, r0, r6, lsl #2
    2cdc:	00000000 	andeq	r0, r0, r0
    2ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ce4:	0000104e 	andeq	r1, r0, lr, asr #32
    2ce8:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    2cec:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    2cf0:	93000001 	movwls	r0, #1
    2cf4:	3e00000e 	cdpcc	0, 0, cr0, cr0, cr14, {0}
    2cf8:	93010069 	movwls	r0, #4201	; 0x1069
    2cfc:	00008d06 	andeq	r8, r0, r6, lsl #26
    2d00:	000eb100 	andeq	fp, lr, r0, lsl #2
    2d04:	013c0000 	teqeq	ip, r0
    2d08:	00000aa6 	andeq	r0, r0, r6, lsr #21
    2d0c:	01067f01 	tsteq	r6, r1, lsl #30
	...
    2d18:	10849c01 	addne	r9, r4, r1, lsl #24
    2d1c:	753d0000 	ldrvc	r0, [sp, #-0]!
    2d20:	7f010074 	svcvc	0x00010074
    2d24:	0001291a 	andeq	r2, r1, sl, lsl r9
    2d28:	000ecf00 	andeq	ip, lr, r0, lsl #30
    2d2c:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    2d30:	8d068301 	stchi	3, cr8, [r6, #-4]
    2d34:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2d38:	0000000e 	andeq	r0, r0, lr
    2d3c:	0bb9013f 	bleq	fee43240 <_estack+0xdee3e240>
    2d40:	7b010000 	blvc	42d48 <__ccfg+0x22da0>
    2d44:	0fbc0106 	svceq	0x00bc0106
    2d48:	0fcc0000 	svceq	0x00cc0000
    2d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d50:	000b6540 	andeq	r6, fp, r0, asr #10
    2d54:	145f0100 	ldrbne	r0, [pc], #-256	; 2d5c <NOROM_OSCClockSourceGet+0x140>
    2d58:	00041601 	andeq	r1, r4, r1, lsl #12
    2d5c:	10c10100 	sbcne	r0, r1, r0, lsl #2
    2d60:	70380000 	eorsvc	r0, r8, r0
    2d64:	01006469 	tsteq	r0, r9, ror #8
    2d68:	011d225f 	tsteq	sp, pc, asr r2
    2d6c:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    2d70:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    2d74:	00000416 	andeq	r0, r0, r6, lsl r4
    2d78:	0ab14100 	beq	fec53180 <_estack+0xdec4e180>
    2d7c:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2d80:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    2d84:	03000010 	movweq	r0, #16
    2d88:	000010e2 	andeq	r1, r0, r2, ror #1
    2d8c:	00077135 	andeq	r7, r7, r5, lsr r1
    2d90:	029e0200 	addseq	r0, lr, #0, 4
    2d94:	00007313 	andeq	r7, r0, r3, lsl r3
    2d98:	01020000 	mrseq	r0, (UNDEF: 2)
    2d9c:	000bf802 	andeq	pc, fp, r2, lsl #16
    2da0:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    2dac:	9c010000 	stcls	0, cr0, [r1], {-0}
    2db0:	0000112e 	andeq	r1, r0, lr, lsr #2
    2db4:	0010aa43 	andseq	sl, r0, r3, asr #20
    2db8:	000f1600 	andeq	r1, pc, r0, lsl #12
    2dbc:	10b64400 	adcsne	r4, r6, r0, lsl #8
    2dc0:	0f3f0000 	svceq	0x003f0000
    2dc4:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    2dc8:	00000010 	andeq	r0, r0, r0, lsl r0
    2dcc:	00000000 	andeq	r0, r0, r0
    2dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2dd4:	aa43145f 	bge	10c7f58 <__ccfg+0x10a7fb0>
    2dd8:	5d000010 	stcpl	0, cr0, [r0, #-64]	; 0xffffffc0
    2ddc:	4600000f 	strmi	r0, [r0], -pc
    2de0:	000010b6 	strheq	r1, [r0], -r6
    2de4:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    2de8:	cc00000f 	stcgt	0, cr0, [r0], {15}
    2dec:	9800000f 	stmdals	r0, {r0, r1, r2, r3}
    2df0:	01000010 	tsteq	r0, r0, lsl r0
    2df4:	00119a9c 	mulseq	r1, ip, sl
    2df8:	0fad4300 	svceq	0x00ad4300
    2dfc:	0f700000 	svceq	0x00700000
    2e00:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    2e04:	8300000f 	movwhi	r0, #15
    2e08:	4600000f 	strmi	r0, [r0], -pc
    2e0c:	00000fc5 	andeq	r0, r0, r5, asr #31
    2e10:	000fcf46 	andeq	ip, pc, r6, asr #30
    2e14:	0f9e4700 	svceq	0x009e4700
    2e18:	0fda0000 	svceq	0x00da0000
    2e1c:	06400000 	strbeq	r0, [r0], -r0
    2e20:	af010000 	svcge	0x00010000
    2e24:	0fb92906 	svceq	0x00b92906
    2e28:	ad430000 	stclge	0, cr0, [r3, #-0]
    2e2c:	9600000f 	strls	r0, [r0], -pc
    2e30:	3600000f 	strcc	r0, [r0], -pc
    2e34:	00000640 	andeq	r0, r0, r0, asr #12
    2e38:	000fc544 	andeq	ip, pc, r4, asr #10
    2e3c:	000fbf00 	andeq	fp, pc, r0, lsl #30
    2e40:	0fcf4600 	svceq	0x00cf4600
    2e44:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    2e48:	7600000f 	strvc	r0, [r0], -pc
    2e4c:	00000010 	andeq	r0, r0, r0, lsl r0
    2e50:	db420000 	blle	1082e58 <__ccfg+0x1062eb0>
    2e54:	ac00000e 	stcge	0, cr0, [r0], {14}
    2e58:	e0000010 	and	r0, r0, r0, lsl r0
    2e5c:	01000010 	tsteq	r0, r0, lsl r0
    2e60:	0011ee9c 	mulseq	r1, ip, lr
    2e64:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    2e68:	0fdd0000 	svceq	0x00dd0000
    2e6c:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    2e70:	fb00000e 	blx	2eb2 <__exidx_end+0x36>
    2e74:	4600000f 	strmi	r0, [r0], -pc
    2e78:	00000f05 	andeq	r0, r0, r5, lsl #30
    2e7c:	000edb49 	andeq	sp, lr, r9, asr #22
    2e80:	0010be00 	andseq	fp, r0, r0, lsl #28
    2e84:	0010c600 	andseq	ip, r0, r0, lsl #12
    2e88:	01590100 	cmpeq	r9, r0, lsl #2
    2e8c:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    2e90:	10190000 	andsne	r0, r9, r0
    2e94:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    2e98:	2c00000e 	stccs	0, cr0, [r0], {14}
    2e9c:	46000010 			; <UNDEFINED> instruction: 0x46000010
    2ea0:	00000f05 	andeq	r0, r0, r5, lsl #30
    2ea4:	804a0000 	subhi	r0, sl, r0
    2ea8:	c8000008 	stmdagt	r0, {r3}
    2eac:	10000012 	andne	r0, r0, r2, lsl r0
    2eb0:	01000013 	tsteq	r0, r3, lsl r0
    2eb4:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    2eb8:	103f0000 	eorsne	r0, pc, r0
    2ebc:	80490000 	subhi	r0, r9, r0
    2ec0:	d4000008 	strle	r0, [r0], #-8
    2ec4:	dc000012 	stcle	0, cr0, [r0], {18}
    2ec8:	01000012 	tsteq	r0, r2, lsl r0
    2ecc:	4306037c 	movwmi	r0, #25468	; 0x637c
    2ed0:	00000890 	muleq	r0, r0, r8
    2ed4:	0000105d 	andeq	r1, r0, sp, asr r0
    2ed8:	33000000 	movwcc	r0, #0
    2edc:	03000013 	movweq	r0, #19
    2ee0:	000c4700 	andeq	r4, ip, r0, lsl #14
    2ee4:	72010400 	andvc	r0, r1, #0, 8
    2ee8:	0c000001 	stceq	0, cr0, [r0], {1}
    2eec:	00000cdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2ef0:	000000d3 	ldrdeq	r0, [r0], -r3
    2ef4:	00000848 	andeq	r0, r0, r8, asr #16
    2ef8:	00000000 	andeq	r0, r0, r0
    2efc:	0000297b 	andeq	r2, r0, fp, ror r9
    2f00:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    2f04:	02000003 	andeq	r0, r0, #3
    2f08:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    2f0c:	04020000 	streq	r0, [r2], #-0
    2f10:	0000b005 	andeq	fp, r0, r5
    2f14:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2f18:	000000ab 	andeq	r0, r0, fp, lsr #1
    2f1c:	00223c03 	eoreq	r3, r2, r3, lsl #24
    2f20:	182e0200 	stmdane	lr!, {r9}
    2f24:	0000004d 	andeq	r0, r0, sp, asr #32
    2f28:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    2f2c:	03000003 	movweq	r0, #3
    2f30:	0000212a 	andeq	r2, r0, sl, lsr #2
    2f34:	60193102 	andsvs	r3, r9, r2, lsl #2
    2f38:	02000000 	andeq	r0, r0, #0
    2f3c:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    2f40:	f3030000 	vhadd.u8	d0, d3, d0
    2f44:	02000017 	andeq	r0, r0, #23
    2f48:	00731934 	rsbseq	r1, r3, r4, lsr r9
    2f4c:	04020000 	streq	r0, [r2], #-0
    2f50:	00008507 	andeq	r8, r0, r7, lsl #10
    2f54:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2f58:	00000080 	andeq	r0, r0, r0, lsl #1
    2f5c:	69050404 	stmdbvs	r5, {r2, sl}
    2f60:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2f64:	008a0704 	addeq	r0, sl, r4, lsl #14
    2f68:	86030000 	strhi	r0, [r3], -r0
    2f6c:	0300000b 	movweq	r0, #11
    2f70:	009b1b28 	addseq	r1, fp, r8, lsr #22
    2f74:	9c050000 	stcls	0, cr0, [r5], {-0}
    2f78:	0400000a 	streq	r0, [r0], #-10
    2f7c:	00b3000d 	adcseq	r0, r3, sp
    2f80:	3c060000 	stccc	0, cr0, [r6], {-0}
    2f84:	b300000c 	movwlt	r0, #12
    2f88:	00000000 	andeq	r0, r0, r0
    2f8c:	04070001 	streq	r0, [r7], #-1
    2f90:	000a9e03 	andeq	r9, sl, r3, lsl #28
    2f94:	18630300 	stmdane	r3!, {r8, r9}^
    2f98:	0000008f 	andeq	r0, r0, pc, lsl #1
    2f9c:	00041c03 	andeq	r1, r4, r3, lsl #24
    2fa0:	12260400 	eorne	r0, r6, #0, 8
    2fa4:	00000041 	andeq	r0, r0, r1, asr #32
    2fa8:	00160003 	andseq	r0, r6, r3
    2fac:	12270400 	eorne	r0, r7, #0, 8
    2fb0:	00000054 	andeq	r0, r0, r4, asr r0
    2fb4:	0000cd08 	andeq	ip, r0, r8, lsl #26
    2fb8:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    2fbc:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    2fc0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2fc4:	0041122b 	subeq	r1, r1, fp, lsr #4
    2fc8:	e3090000 	movw	r0, #36864	; 0x9000
    2fcc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fd0:	000000e3 	andeq	r0, r0, r3, ror #1
    2fd4:	00165103 	andseq	r5, r6, r3, lsl #2
    2fd8:	122c0400 	eorne	r0, ip, #0, 8
    2fdc:	00000067 	andeq	r0, r0, r7, rrx
    2fe0:	0000f908 	andeq	pc, r0, r8, lsl #18
    2fe4:	02a60300 	adceq	r0, r6, #0, 6
    2fe8:	2d040000 	stccs	0, cr0, [r4, #-0]
    2fec:	00006712 	andeq	r6, r0, r2, lsl r7
    2ff0:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    2ff4:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    2ff8:	00012210 	andeq	r2, r1, r0, lsl r2
    2ffc:	cd040a00 	vstrgt	s0, [r4, #-0]
    3000:	0b000000 	bleq	3008 <__exidx_end+0x18c>
    3004:	09320408 	ldmdbeq	r2!, {r3, sl}
    3008:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    300c:	0002c10c 	andeq	ip, r2, ip, lsl #2
    3010:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    3014:	000000e3 	andeq	r0, r0, r3, ror #1
    3018:	00070101 	andeq	r0, r7, r1, lsl #2
    301c:	0000a40c 	andeq	sl, r0, ip, lsl #8
    3020:	03350400 	teqeq	r5, #0, 8
    3024:	000000e3 	andeq	r0, r0, r3, ror #1
    3028:	00060101 	andeq	r0, r6, r1, lsl #2
    302c:	00028f0c 	andeq	r8, r2, ip, lsl #30
    3030:	03360400 	teqeq	r6, #0, 8
    3034:	000000e3 	andeq	r0, r0, r3, ror #1
    3038:	00050101 	andeq	r0, r5, r1, lsl #2
    303c:	00042b0c 	andeq	r2, r4, ip, lsl #22
    3040:	03370400 	teqeq	r7, #0, 8
    3044:	000000e3 	andeq	r0, r0, r3, ror #1
    3048:	00040101 	andeq	r0, r4, r1, lsl #2
    304c:	0004240c 	andeq	r2, r4, ip, lsl #8
    3050:	03380400 	teqeq	r8, #0, 8
    3054:	000000e3 	andeq	r0, r0, r3, ror #1
    3058:	00000401 	andeq	r0, r0, r1, lsl #8
    305c:	0004150d 	andeq	r1, r4, sp, lsl #10
    3060:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    3064:	000000e3 	andeq	r0, r0, r3, ror #1
    3068:	004c0d01 	subeq	r0, ip, r1, lsl #26
    306c:	3c040000 	stccc	0, cr0, [r4], {-0}
    3070:	0000e303 	andeq	lr, r0, r3, lsl #6
    3074:	790d0200 	stmdbvc	sp, {r9}
    3078:	04000000 	streq	r0, [r0], #-0
    307c:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    3080:	0d030000 	stceq	0, cr0, [r3, #-0]
    3084:	00000161 	andeq	r0, r0, r1, ror #2
    3088:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    308c:	04000000 	streq	r0, [r0], #-0
    3090:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    3094:	41040000 	mrsmi	r0, (UNDEF: 4)
    3098:	00012803 	andeq	r2, r1, r3, lsl #16
    309c:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    30a0:	b50e0000 	strlt	r0, [lr, #-0]
    30a4:	04000002 	streq	r0, [r0], #-2
    30a8:	01c21a43 	biceq	r1, r2, r3, asr #20
    30ac:	01010000 	mrseq	r0, (UNDEF: 1)
    30b0:	0003210e 	andeq	r2, r3, lr, lsl #2
    30b4:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    30b8:	000001e3 	andeq	r0, r0, r3, ror #3
    30bc:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    30c0:	000001e9 	andeq	r0, r0, r9, ror #3
    30c4:	be080102 	adflte	f0, f0, f2
    30c8:	08000003 	stmdaeq	r0, {r0, r1}
    30cc:	000001e9 	andeq	r0, r0, r9, ror #3
    30d0:	00032f0e 	andeq	r2, r3, lr, lsl #30
    30d4:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    30d8:	000001e3 	andeq	r0, r0, r3, ror #3
    30dc:	080b0101 	stmdaeq	fp, {r0, r8}
    30e0:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    30e4:	0d000002 	stceq	0, cr0, [r0, #-8]
    30e8:	000002c8 	andeq	r0, r0, r8, asr #5
    30ec:	670b9005 	strvs	r9, [fp, -r5]
    30f0:	00000000 	andeq	r0, r0, r0
    30f4:	00062d0d 	andeq	r2, r6, sp, lsl #26
    30f8:	08910500 	ldmeq	r1, {r8, sl}
    30fc:	000000cd 	andeq	r0, r0, sp, asr #1
    3100:	049c0d04 	ldreq	r0, [ip], #3332	; 0xd04
    3104:	92050000 	andls	r0, r5, #0
    3108:	0000ef10 	andeq	lr, r0, r0, lsl pc
    310c:	03000600 	movweq	r0, #1536	; 0x600
    3110:	00000432 	andeq	r0, r0, r2, lsr r4
    3114:	03039305 	movweq	r9, #13061	; 0x3305
    3118:	0f000002 	svceq	0x00000002
    311c:	00000234 	andeq	r0, r0, r4, lsr r2
    3120:	0000024b 	andeq	r0, r0, fp, asr #4
    3124:	420e0010 	andmi	r0, lr, #16
    3128:	05000000 	streq	r0, [r0, #-0]
    312c:	02400f99 	subeq	r0, r0, #612	; 0x264
    3130:	01010000 	mrseq	r0, (UNDEF: 1)
    3134:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    3138:	010b0000 	mrseq	r0, (UNDEF: 11)
    313c:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    3140:	0c000002 	stceq	0, cr0, [r0], {2}
    3144:	0000048f 	andeq	r0, r0, pc, lsl #9
    3148:	e3079306 	movw	r9, #29446	; 0x7306
    314c:	01000000 	mrseq	r0, (UNDEF: 0)
    3150:	0c000107 	stfeqs	f0, [r0], {7}
    3154:	0000003d 	andeq	r0, r0, sp, lsr r0
    3158:	e3039406 	movw	r9, #13318	; 0x3406
    315c:	01000000 	mrseq	r0, (UNDEF: 0)
    3160:	00000001 	andeq	r0, r0, r1
    3164:	00028603 	andeq	r8, r2, r3, lsl #12
    3168:	03960600 	orrseq	r0, r6, #0, 12
    316c:	0000025f 	andeq	r0, r0, pc, asr r2
    3170:	00028908 	andeq	r8, r2, r8, lsl #18
    3174:	02950f00 	addseq	r0, r5, #0, 30
    3178:	02a50000 	adceq	r0, r5, #0
    317c:	00100000 	andseq	r0, r0, r0
    3180:	00029a08 	andeq	r9, r2, r8, lsl #20
    3184:	02eb0e00 	rsceq	r0, fp, #0, 28
    3188:	9c060000 	stcls	0, cr0, [r6], {-0}
    318c:	0002a517 	andeq	sl, r2, r7, lsl r5
    3190:	0f010100 	svceq	0x00010100
    3194:	000000d9 	ldrdeq	r0, [r0], -r9
    3198:	000002c3 	andeq	r0, r0, r3, asr #5
    319c:	b8080010 	stmdalt	r8, {r4}
    31a0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    31a4:	000003a7 	andeq	r0, r0, r7, lsr #7
    31a8:	c3130607 	tstgt	r3, #7340032	; 0x700000
    31ac:	01000002 	tsteq	r0, r2
    31b0:	01410e01 	cmpeq	r1, r1, lsl #28
    31b4:	c3050000 	movwgt	r0, #20480	; 0x5000
    31b8:	0000f90e 	andeq	pc, r0, lr, lsl #18
    31bc:	11010100 	mrsne	r0, (UNDEF: 17)
    31c0:	000004a9 	andeq	r0, r0, r9, lsr #9
    31c4:	10016e08 	andne	r6, r1, r8, lsl #28
    31c8:	000002f1 	strdeq	r0, [r0], -r1
    31cc:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    31d0:	01120000 	tsteq	r2, r0
    31d4:	00000303 	andeq	r0, r0, r3, lsl #6
    31d8:	0000cd13 	andeq	ip, r0, r3, lsl sp
    31dc:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    31e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    31e4:	10000003 	andne	r0, r0, r3
    31e8:	03030800 	movweq	r0, #14336	; 0x3800
    31ec:	64140000 	ldrvs	r0, [r4], #-0
    31f0:	08000004 	stmdaeq	r0, {r2}
    31f4:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    31f8:	01000003 	tsteq	r0, r3
    31fc:	039f1401 	orrseq	r1, pc, #16777216	; 0x1000000
    3200:	82080000 	andhi	r0, r8, #0
    3204:	01051401 	tsteq	r5, r1, lsl #8
    3208:	01010000 	mrseq	r0, (UNDEF: 1)
    320c:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    3210:	00035509 	andeq	r5, r3, r9, lsl #10
    3214:	0efe0d00 	cdpeq	13, 15, cr0, cr14, cr0, {0}
    3218:	0f090000 	svceq	0x00090000
    321c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3220:	7c0d0000 	stcvc	0, cr0, [sp], {-0}
    3224:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3228:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    322c:	00020000 	andeq	r0, r2, r0
    3230:	000eec03 	andeq	lr, lr, r3, lsl #24
    3234:	03110900 	tsteq	r1, #0, 18
    3238:	00000331 	andeq	r0, r0, r1, lsr r3
    323c:	1609200b 	strne	r2, [r9], -fp
    3240:	0003d309 	andeq	sp, r3, r9, lsl #6
    3244:	0edc0d00 	cdpeq	13, 13, cr0, cr12, cr0, {0}
    3248:	17090000 	strne	r0, [r9, -r0]
    324c:	0003ed08 	andeq	lr, r3, r8, lsl #26
    3250:	e40d0000 	str	r0, [sp], #-0
    3254:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3258:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    325c:	0d040000 	stceq	0, cr0, [r4, #-0]
    3260:	00000e4c 	andeq	r0, r0, ip, asr #28
    3264:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    3268:	08000004 	stmdaeq	r0, {r2}
    326c:	000e9a0d 	andeq	r9, lr, sp, lsl #20
    3270:	081a0900 	ldmdaeq	sl, {r8, fp}
    3274:	00000459 	andeq	r0, r0, r9, asr r4
    3278:	0e0b0d0c 	cdpeq	13, 0, cr0, cr11, cr12, {0}
    327c:	1b090000 	blne	243284 <__ccfg+0x2232dc>
    3280:	00046f08 	andeq	r6, r4, r8, lsl #30
    3284:	e40d1000 	str	r1, [sp], #-0
    3288:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    328c:	046f081c 	strbteq	r0, [pc], #-2076	; 3294 <__exidx_end+0x418>
    3290:	0d140000 	ldceq	0, cr0, [r4, #-0]
    3294:	00000e23 	andeq	r0, r0, r3, lsr #28
    3298:	6f081d09 	svcvs	0x00081d09
    329c:	18000004 	stmdane	r0, {r2}
    32a0:	000d560d 	andeq	r5, sp, sp, lsl #12
    32a4:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    32a8:	00000081 	andeq	r0, r0, r1, lsl #1
    32ac:	0115001c 	tsteq	r5, ip, lsl r0
    32b0:	00000081 	andeq	r0, r0, r1, lsl #1
    32b4:	000003ed 	andeq	r0, r0, sp, ror #7
    32b8:	00008113 	andeq	r8, r0, r3, lsl r1
    32bc:	00811300 	addeq	r1, r1, r0, lsl #6
    32c0:	b5130000 	ldrlt	r0, [r3, #-0]
    32c4:	00000000 	andeq	r0, r0, r0
    32c8:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    32cc:	01150000 	tsteq	r5, r0
    32d0:	00000081 	andeq	r0, r0, r1, lsl #1
    32d4:	00000408 	andeq	r0, r0, r8, lsl #8
    32d8:	00008113 	andeq	r8, r0, r3, lsl r1
    32dc:	00811300 	addeq	r1, r1, r0, lsl #6
    32e0:	0a000000 	beq	32e8 <__exidx_end+0x46c>
    32e4:	0003f304 	andeq	pc, r3, r4, lsl #6
    32e8:	81011500 	tsthi	r1, r0, lsl #10
    32ec:	32000000 	andcc	r0, r0, #0
    32f0:	13000004 	movwne	r0, #4
    32f4:	00000081 	andeq	r0, r0, r1, lsl #1
    32f8:	00011613 	andeq	r1, r1, r3, lsl r6
    32fc:	00811300 	addeq	r1, r1, r0, lsl #6
    3300:	32130000 	andscc	r0, r3, #0
    3304:	13000004 	movwne	r0, #4
    3308:	00000438 	andeq	r0, r0, r8, lsr r4
    330c:	81040a00 	tsthi	r4, r0, lsl #20
    3310:	0a000000 	beq	3318 <__exidx_end+0x49c>
    3314:	00035504 	andeq	r5, r3, r4, lsl #10
    3318:	0e040a00 	vmlaeq.f32	s0, s8, s0
    331c:	15000004 	strne	r0, [r0, #-4]
    3320:	00008101 	andeq	r8, r0, r1, lsl #2
    3324:	00045900 	andeq	r5, r4, r0, lsl #18
    3328:	01161300 	tsteq	r6, r0, lsl #6
    332c:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3330:	00000004 	andeq	r0, r0, r4
    3334:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    3338:	01150000 	tsteq	r5, r0
    333c:	00000081 	andeq	r0, r0, r1, lsl #1
    3340:	0000046f 	andeq	r0, r0, pc, ror #8
    3344:	00011613 	andeq	r1, r1, r3, lsl r6
    3348:	040a0000 	streq	r0, [sl], #-0
    334c:	0000045f 	andeq	r0, r0, pc, asr r4
    3350:	000d4103 	andeq	r4, sp, r3, lsl #2
    3354:	031f0900 	tsteq	pc, #0, 18
    3358:	00000361 	andeq	r0, r0, r1, ror #6
    335c:	00047508 	andeq	r7, r4, r8, lsl #10
    3360:	0da11600 	stceq	6, cr1, [r1]
    3364:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3368:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    336c:	320d0000 	andcc	r0, sp, #0
    3370:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3374:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    3378:	0d000000 	stceq	0, cr0, [r0, #-0]
    337c:	00000cb5 			; <UNDEFINED> instruction: 0x00000cb5
    3380:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    3384:	04000004 	streq	r0, [r0], #-4
    3388:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    338c:	03000004 	movweq	r0, #4
    3390:	00000daf 	andeq	r0, r0, pc, lsr #27
    3394:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    3398:	03000004 	movweq	r0, #4
    339c:	00000f0e 	andeq	r0, r0, lr, lsl #30
    33a0:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    33a4:	0b000004 	bleq	33bc <__exidx_end+0x540>
    33a8:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    33ac:	00000536 	andeq	r0, r0, r6, lsr r5
    33b0:	000e810c 	andeq	r8, lr, ip, lsl #2
    33b4:	09400900 	stmdbeq	r0, {r8, fp}^
    33b8:	000000cd 	andeq	r0, r0, sp, asr #1
    33bc:	000f0102 	andeq	r0, pc, r2, lsl #2
    33c0:	000f600c 	andeq	r6, pc, ip
    33c4:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    33c8:	000000cd 	andeq	r0, r0, sp, asr #1
    33cc:	000e0102 	andeq	r0, lr, r2, lsl #2
    33d0:	000dd10c 	andeq	sp, sp, ip, lsl #2
    33d4:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    33d8:	000000cd 	andeq	r0, r0, sp, asr #1
    33dc:	000d0102 	andeq	r0, sp, r2, lsl #2
    33e0:	000ea20c 	andeq	sl, lr, ip, lsl #4
    33e4:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    33e8:	000000cd 	andeq	r0, r0, sp, asr #1
    33ec:	00060702 	andeq	r0, r6, r2, lsl #14
    33f0:	000f1c0c 	andeq	r1, pc, ip, lsl #24
    33f4:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    33f8:	000000cd 	andeq	r0, r0, sp, asr #1
    33fc:	00030302 	andeq	r0, r3, r2, lsl #6
    3400:	000e6e0c 	andeq	r6, lr, ip, lsl #28
    3404:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    3408:	000000cd 	andeq	r0, r0, sp, asr #1
    340c:	00000302 	andeq	r0, r0, r2, lsl #6
    3410:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    3414:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    3418:	d8180000 	ldmdale	r8, {}	; <UNPREDICTABLE>
    341c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3420:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    3424:	62190000 	andsvs	r0, r9, #0
    3428:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    342c:	000004cc 	andeq	r0, r0, ip, asr #9
    3430:	0cba0300 	ldceq	3, cr0, [sl]
    3434:	47090000 	strmi	r0, [r9, -r0]
    3438:	00053603 	andeq	r3, r5, r3, lsl #12
    343c:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    3440:	05840550 	streq	r0, [r4, #1360]	; 0x550
    3444:	42180000 	andsmi	r0, r8, #0
    3448:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    344c:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    3450:	30180000 	andscc	r0, r8, r0
    3454:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3458:	03550b52 	cmpeq	r5, #83968	; 0x14800
    345c:	16000000 	strne	r0, [r0], -r0
    3460:	00000f51 	andeq	r0, r0, r1, asr pc
    3464:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    3468:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    346c:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    3470:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    3474:	0d000000 	stceq	0, cr0, [r0, #-0]
    3478:	00000f23 	andeq	r0, r0, r3, lsr #30
    347c:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    3480:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3484:	000f030d 	andeq	r0, pc, sp, lsl #6
    3488:	10680900 	rsbne	r0, r8, r0, lsl #18
    348c:	00000556 	andeq	r0, r0, r6, asr r5
    3490:	bd03000a 	stclt	0, cr0, [r3, #-40]	; 0xffffffd8
    3494:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3498:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    349c:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    34a0:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    34a4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    34a8:	00000e1c 	andeq	r0, r0, ip, lsl lr
    34ac:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    34b0:	00000004 	andeq	r0, r0, r4
    34b4:	000ed10d 	andeq	sp, lr, sp, lsl #2
    34b8:	11830900 	orrne	r0, r3, r0, lsl #18
    34bc:	00000556 	andeq	r0, r0, r6, asr r5
    34c0:	5e030008 	cdppl	0, 0, cr0, cr3, cr8, {0}
    34c4:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    34c8:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    34cc:	94140000 	ldrls	r0, [r4], #-0
    34d0:	08000004 	stmdaeq	r0, {r2}
    34d4:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    34d8:	01000000 	mrseq	r0, (UNDEF: 0)
    34dc:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    34e0:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    34e4:	1c000006 	stcne	0, cr0, [r0], {6}
    34e8:	00002234 	andeq	r2, r0, r4, lsr r2
    34ec:	07030708 	streq	r0, [r3, -r8, lsl #14]
    34f0:	000000cd 	andeq	r0, r0, sp, asr #1
    34f4:	057f1c00 	ldrbeq	r1, [pc, #-3072]!	; 28fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd4>
    34f8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    34fc:	010a0803 	tsteq	sl, r3, lsl #16
    3500:	00040000 	andeq	r0, r4, r0
    3504:	00026611 	andeq	r6, r2, r1, lsl r6
    3508:	03090800 	movweq	r0, #38912	; 0x9800
    350c:	00060203 	andeq	r0, r6, r3, lsl #4
    3510:	04b81d00 	ldrteq	r1, [r8], #3328	; 0xd00
    3514:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    3518:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    351c:	1c000006 	stcne	0, cr0, [r0], {6}
    3520:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    3524:	08031408 	stmdaeq	r3, {r3, sl, ip}
    3528:	000000cd 	andeq	r0, r0, sp, asr #1
    352c:	02d21c00 	sbcseq	r1, r2, #0, 24
    3530:	15080000 	strne	r0, [r8, #-0]
    3534:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    3538:	1c020000 	stcne	0, cr0, [r2], {-0}
    353c:	000004ac 	andeq	r0, r0, ip, lsr #9
    3540:	0b031608 	bleq	c8d68 <__ccfg+0xa8dc0>
    3544:	000002e4 	andeq	r0, r0, r4, ror #5
    3548:	0f7f1c04 	svceq	0x007f1c04
    354c:	17080000 	strne	r0, [r8, -r0]
    3550:	010a0903 	tsteq	sl, r3, lsl #18
    3554:	1c080000 	stcne	0, cr0, [r8], {-0}
    3558:	0000045d 	andeq	r0, r0, sp, asr r4
    355c:	0f031808 	svceq	0x00031808
    3560:	00000699 	muleq	r0, r9, r6
    3564:	02cd1c0c 	sbceq	r1, sp, #12, 24	; 0xc00
    3568:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    356c:	06a91503 	strteq	r1, [r9], r3, lsl #10
    3570:	002c0000 	eoreq	r0, ip, r0
    3574:	0006290f 	andeq	r2, r6, pc, lsl #18
    3578:	0006a900 	andeq	sl, r6, r0, lsl #18
    357c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3580:	00030000 	andeq	r0, r3, r0
    3584:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    3588:	c3110000 	tstgt	r1, #0
    358c:	08000004 	stmdaeq	r0, {r2}
    3590:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    3594:	14000006 	strne	r0, [r0], #-6
    3598:	00000395 	muleq	r0, r5, r3
    359c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    35a0:	000006cb 	andeq	r0, r0, fp, asr #13
    35a4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    35a8:	000006af 	andeq	r0, r0, pc, lsr #13
    35ac:	0004f10e 	andeq	pc, r4, lr, lsl #2
    35b0:	131d0a00 	tstne	sp, #0, 20
    35b4:	000000cd 	andeq	r0, r0, sp, asr #1
    35b8:	5b0e0101 	blpl	3839c4 <__ccfg+0x363a1c>
    35bc:	0a000007 	beq	35e0 <__exidx_end+0x764>
    35c0:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    35c4:	01010000 	mrseq	r0, (UNDEF: 1)
    35c8:	0008eb0e 	andeq	lr, r8, lr, lsl #22
    35cc:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    35d0:	000000de 	ldrdeq	r0, [r0], -lr
    35d4:	1a0e0101 	bne	3839e0 <__ccfg+0x363a38>
    35d8:	0a000006 	beq	35f8 <__exidx_end+0x77c>
    35dc:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    35e0:	01010000 	mrseq	r0, (UNDEF: 1)
    35e4:	000d3703 	andeq	r3, sp, r3, lsl #14
    35e8:	0f0e0b00 	svceq	0x000e0b00
    35ec:	00000715 	andeq	r0, r0, r5, lsl r7
    35f0:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    35f4:	01150000 	tsteq	r5, r0
    35f8:	00000081 	andeq	r0, r0, r1, lsl #1
    35fc:	00000730 	andeq	r0, r0, r0, lsr r7
    3600:	00008113 	andeq	r8, r0, r3, lsl r1
    3604:	01161300 	tsteq	r6, r0, lsl #6
    3608:	0f000000 	svceq	0x00000000
    360c:	00000740 	andeq	r0, r0, r0, asr #14
    3610:	00000740 	andeq	r0, r0, r0, asr #14
    3614:	0000881e 	andeq	r8, r0, lr, lsl r8
    3618:	0a000700 	beq	5220 <__exidx_end+0x23a4>
    361c:	0005e704 	andeq	lr, r5, r4, lsl #14
    3620:	0dec1f00 	stcleq	15, cr1, [ip]
    3624:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3628:	00073015 	andeq	r3, r7, r5, lsl r0
    362c:	00030500 	andeq	r0, r3, r0, lsl #10
    3630:	0f000000 	svceq	0x00000000
    3634:	00000709 	andeq	r0, r0, r9, lsl #14
    3638:	00000768 	andeq	r0, r0, r8, ror #14
    363c:	0000881e 	andeq	r8, r0, lr, lsl r8
    3640:	1f000200 	svcne	0x00000200
    3644:	00000e73 	andeq	r0, r0, r3, ror lr
    3648:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    364c:	05000007 	streq	r0, [r0, #-7]
    3650:	00000003 	andeq	r0, r0, r3
    3654:	078a0f00 	streq	r0, [sl, r0, lsl #30]
    3658:	078a0000 	streq	r0, [sl, r0]
    365c:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    3660:	02000000 	andeq	r0, r0, #0
    3664:	c0040a00 	andgt	r0, r4, r0, lsl #20
    3668:	1f000004 	svcne	0x00000004
    366c:	00000d99 	muleq	r0, r9, sp
    3670:	7a13190c 	bvc	4c9aa8 <__ccfg+0x4a9b00>
    3674:	05000007 	streq	r0, [r0, #-7]
    3678:	00000003 	andeq	r0, r0, r3
    367c:	00810f00 	addeq	r0, r1, r0, lsl #30
    3680:	07b20000 	ldreq	r0, [r2, r0]!
    3684:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    3688:	02000000 	andeq	r0, r0, #0
    368c:	0d711f00 	ldcleq	15, cr1, [r1, #-0]
    3690:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    3694:	0007a20f 	andeq	sl, r7, pc, lsl #4
    3698:	00030500 	andeq	r0, r3, r0, lsl #10
    369c:	0f000000 	svceq	0x00000000
    36a0:	000007d4 	ldrdeq	r0, [r0], -r4
    36a4:	000007d4 	ldrdeq	r0, [r0], -r4
    36a8:	0000881e 	andeq	r8, r0, lr, lsl r8
    36ac:	0a000200 	beq	3eb4 <__exidx_end+0x1038>
    36b0:	00048104 	andeq	r8, r4, r4, lsl #2
    36b4:	0f491f00 	svceq	0x00491f00
    36b8:	230c0000 	movwcs	r0, #49152	; 0xc000
    36bc:	0007c41b 	andeq	ip, r7, fp, lsl r4
    36c0:	00030500 	andeq	r0, r3, r0, lsl #10
    36c4:	20000000 	andcs	r0, r0, r0
    36c8:	000e9101 	andeq	r9, lr, r1, lsl #2
    36cc:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    36d0:	15e80101 	strbne	r0, [r8, #257]!	; 0x101
    36d4:	15ea0000 	strbne	r0, [sl, #0]!
    36d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    36dc:	0d800121 	stfeqs	f0, [r0, #132]	; 0x84
    36e0:	05010000 	streq	r0, [r1, #-0]
    36e4:	81010105 	tsthi	r1, r5, lsl #2
	...
    36f0:	01000000 	mrseq	r0, (UNDEF: 0)
    36f4:	0008639c 	muleq	r8, ip, r3
    36f8:	68702200 	ldmdavs	r0!, {r9, sp}^
    36fc:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    3700:	00812d05 	addeq	r2, r1, r5, lsl #26
    3704:	10700000 	rsbsne	r0, r0, r0
    3708:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    370c:	00000011 	andeq	r0, r0, r1, lsl r0
    3710:	30000000 	andcc	r0, r0, r0
    3714:	01000008 	tsteq	r0, r8
    3718:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    371c:	00001160 	andeq	r1, r0, r0, ror #2
    3720:	0000108e 	andeq	r1, r0, lr, lsl #1
    3724:	00083025 	andeq	r3, r8, r5, lsr #32
    3728:	116b2600 	cmnne	fp, r0, lsl #12
    372c:	10a10000 	adcne	r0, r1, r0
    3730:	76260000 	strtvc	r0, [r6], -r0
    3734:	bf000011 	svclt	0x00000011
    3738:	00000010 	andeq	r0, r0, r0, lsl r0
    373c:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3740:	00000ec6 	andeq	r0, r0, r6, asr #29
    3744:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    3748:	00000001 	andeq	r0, r0, r1
    374c:	00000000 	andeq	r0, r0, r0
    3750:	9d9c0100 	ldflss	f0, [ip]
    3754:	22000008 	andcs	r0, r0, #8
    3758:	00746b70 	rsbseq	r6, r4, r0, ror fp
    375c:	3004fa01 	andcc	pc, r4, r1, lsl #20
    3760:	00000116 	andeq	r0, r0, r6, lsl r1
    3764:	000010e9 	andeq	r1, r0, r9, ror #1
    3768:	01006228 	tsteq	r0, r8, lsr #4
    376c:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    3770:	07000008 	streq	r0, [r0, -r8]
    3774:	00000011 	andeq	r0, r0, r1, lsl r0
    3778:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    377c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3780:	00000cc8 	andeq	r0, r0, r8, asr #25
    3784:	0104e901 	tsteq	r4, r1, lsl #18
    3788:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    3794:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    3798:	22000008 	andcs	r0, r0, #8
    379c:	00796870 	rsbseq	r6, r9, r0, ror r8
    37a0:	2f04e901 	svccs	0x0004e901
    37a4:	00000081 	andeq	r0, r0, r1, lsl #1
    37a8:	00001125 	andeq	r1, r0, r5, lsr #2
    37ac:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    37b0:	0b04ed01 	bleq	13ebbc <__ccfg+0x11ec14>
    37b4:	0000078a 	andeq	r0, r0, sl, lsl #15
    37b8:	00001143 	andeq	r1, r0, r3, asr #2
    37bc:	01006228 	tsteq	r0, r8, lsr #4
    37c0:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    37c4:	56000008 	strpl	r0, [r0], -r8
    37c8:	00000011 	andeq	r0, r0, r1, lsl r0
    37cc:	0d4b0121 	stfeqe	f0, [fp, #-132]	; 0xffffff7c
    37d0:	d2010000 	andle	r0, r1, #0
    37d4:	16010104 	strne	r0, [r1], -r4, lsl #2
    37d8:	00000001 	andeq	r0, r0, r1
    37dc:	00000000 	andeq	r0, r0, r0
    37e0:	01000000 	mrseq	r0, (UNDEF: 0)
    37e4:	0009509c 	muleq	r9, ip, r0
    37e8:	68702200 	ldmdavs	r0!, {r9, sp}^
    37ec:	d2010079 	andle	r0, r1, #121	; 0x79
    37f0:	00812f04 	addeq	r2, r1, r4, lsl #30
    37f4:	11750000 	cmnne	r5, r0
    37f8:	6c220000 	stcvs	0, cr0, [r2], #-0
    37fc:	01006e65 	tsteq	r0, r5, ror #28
    3800:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    3804:	93000004 	movwls	r0, #4
    3808:	28000011 	stmdacs	r0, {r0, r4}
    380c:	0100716f 	tsteq	r0, pc, ror #2
    3810:	8a0b04d7 	bhi	2c4b74 <__ccfg+0x2a4bcc>
    3814:	b1000007 	tstlt	r0, r7
    3818:	28000011 	stmdacs	r0, {r0, r4}
    381c:	d8010062 	stmdale	r1, {r1, r5, r6}
    3820:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3824:	11cf0000 	bicne	r0, pc, r0
    3828:	21000000 	mrscs	r0, (UNDEF: 0)
    382c:	000f3701 	andeq	r3, pc, r1, lsl #14
    3830:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3834:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3840:	9c010000 	stcls	0, cr0, [r1], {-0}
    3844:	000009eb 	andeq	r0, r0, fp, ror #19
    3848:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    384c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3850:	0000812b 	andeq	r8, r0, fp, lsr #2
    3854:	0011f900 	andseq	pc, r1, r0, lsl #18
    3858:	00702200 	rsbseq	r2, r0, r0, lsl #4
    385c:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    3860:	00000116 	andeq	r0, r0, r6, lsl r1
    3864:	0000122d 	andeq	r1, r0, sp, lsr #4
    3868:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    386c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3870:	0000813f 	andeq	r8, r0, pc, lsr r1
    3874:	00126100 	andseq	r6, r2, r0, lsl #2
    3878:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    387c:	a6010067 	strge	r0, [r1], -r7, rrx
    3880:	00810604 	addeq	r0, r1, r4, lsl #12
    3884:	64280000 	strtvs	r0, [r8], #-0
    3888:	01007073 	tsteq	r0, r3, ror r0
    388c:	810b04a6 	smlatbhi	fp, r6, r4, r0
    3890:	95000000 	strls	r0, [r0, #-0]
    3894:	2a000012 	bcs	38e4 <__exidx_end+0xa68>
    3898:	00736573 	rsbseq	r6, r3, r3, ror r5
    389c:	1004a601 	andne	sl, r4, r1, lsl #12
    38a0:	00000081 	andeq	r0, r0, r1, lsl #1
    38a4:	2a509102 	bcs	1427cb4 <__ccfg+0x1407d0c>
    38a8:	01007061 	tsteq	r0, r1, rrx
    38ac:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    38b0:	02000003 	andeq	r0, r0, #3
    38b4:	63285491 			; <UNDEFINED> instruction: 0x63285491
    38b8:	04a80100 	strteq	r0, [r8], #256	; 0x100
    38bc:	0001160a 	andeq	r1, r1, sl, lsl #12
    38c0:	0012b300 	andseq	fp, r2, r0, lsl #6
    38c4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    38c8:	00000d27 	andeq	r0, r0, r7, lsr #26
    38cc:	01048701 	tsteq	r4, r1, lsl #14
    38d0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    38dc:	4a9c0100 	bmi	fe703ce4 <_estack+0xde6fece4>
    38e0:	2200000a 	andcs	r0, r0, #10
    38e4:	00796870 	rsbseq	r6, r9, r0, ror r8
    38e8:	2b048701 	blcs	1254f4 <__ccfg+0x10554c>
    38ec:	00000081 	andeq	r0, r0, r1, lsl #1
    38f0:	000012c6 	andeq	r1, r0, r6, asr #5
    38f4:	00737022 	rsbseq	r7, r3, r2, lsr #32
    38f8:	3a048701 	bcc	125504 <__ccfg+0x10555c>
    38fc:	00000709 	andeq	r0, r0, r9, lsl #14
    3900:	000012e4 	andeq	r1, r0, r4, ror #5
    3904:	000d5a2b 	andeq	r5, sp, fp, lsr #20
    3908:	04870100 	streq	r0, [r7], #256	; 0x100
    390c:	00008142 	andeq	r8, r0, r2, asr #2
    3910:	00130200 	andseq	r0, r3, r0, lsl #4
    3914:	00712800 	rsbseq	r2, r1, r0, lsl #16
    3918:	0b048d01 	bleq	126d24 <__ccfg+0x106d7c>
    391c:	0000078a 	andeq	r0, r0, sl, lsl #15
    3920:	00001320 	andeq	r1, r0, r0, lsr #6
    3924:	13012c00 	movwne	r2, #7168	; 0x1c00
    3928:	0100000e 	tsteq	r0, lr
    392c:	01010386 	smlabbeq	r1, r6, r3, r0
    3930:	00000116 	andeq	r0, r0, r6, lsl r1
    3934:	000a9101 	andeq	r9, sl, r1, lsl #2
    3938:	13d72d00 	bicsne	r2, r7, #0, 26
    393c:	86010000 	strhi	r0, [r1], -r0
    3940:	00812d03 	addeq	r2, r1, r3, lsl #26
    3944:	642e0000 	strtvs	r0, [lr], #-0
    3948:	01007073 	tsteq	r0, r3, ror r0
    394c:	81370386 	teqhi	r7, r6, lsl #7
    3950:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3954:	00736573 	rsbseq	r6, r3, r3, ror r5
    3958:	40038601 	andmi	r8, r3, r1, lsl #12
    395c:	00000081 	andeq	r0, r0, r1, lsl #1
    3960:	01007029 	tsteq	r0, r9, lsr #32
    3964:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    3968:	00000008 	andeq	r0, r0, r8
    396c:	0d1a0127 	ldfeqs	f0, [sl, #-156]	; 0xffffff64
    3970:	7f010000 	svcvc	0x00010000
    3974:	00010103 	andeq	r0, r1, r3, lsl #2
    3978:	00000000 	andeq	r0, r0, r0
    397c:	01000000 	mrseq	r0, (UNDEF: 0)
    3980:	000acb9c 	muleq	sl, ip, fp
    3984:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3988:	32037f01 	andcc	r7, r3, #1, 30
    398c:	00000116 	andeq	r0, r0, r6, lsl r1
    3990:	0000134f 	andeq	r1, r0, pc, asr #6
    3994:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    3998:	037f0100 	cmneq	pc, #0, 2
    399c:	00008139 	andeq	r8, r0, r9, lsr r1
    39a0:	00136200 	andseq	r6, r3, r0, lsl #4
    39a4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    39a8:	00000eaa 	andeq	r0, r0, sl, lsr #29
    39ac:	01036b01 	tsteq	r3, r1, lsl #22
    39b0:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    39bc:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    39c0:	2200000b 	andcs	r0, r0, #11
    39c4:	6b010070 	blvs	43b8c <__ccfg+0x23be4>
    39c8:	01163303 	tsteq	r6, r3, lsl #6
    39cc:	13750000 	cmnne	r5, #0
    39d0:	2a2b0000 	bcs	ac39d8 <__ccfg+0xaa3a30>
    39d4:	0100000f 	tsteq	r0, pc
    39d8:	813a036b 	teqhi	sl, fp, ror #6
    39dc:	93000000 	movwls	r0, #0
    39e0:	28000013 	stmdacs	r0, {r0, r1, r4}
    39e4:	01006370 	tsteq	r0, r0, ror r3
    39e8:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    39ec:	b1000008 	tstlt	r0, r8
    39f0:	29000013 	stmdbcs	r0, {r0, r1, r4}
    39f4:	01007070 	tsteq	r0, r0, ror r0
    39f8:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    39fc:	00000008 	andeq	r0, r0, r8
    3a00:	0d8d0127 	stfeqs	f0, [sp, #156]	; 0x9c
    3a04:	63010000 	movwvs	r0, #4096	; 0x1000
    3a08:	00010103 	andeq	r0, r1, r3, lsl #2
    3a0c:	00000000 	andeq	r0, r0, r0
    3a10:	01000000 	mrseq	r0, (UNDEF: 0)
    3a14:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    3a18:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3a1c:	31036301 	tstcc	r3, r1, lsl #6
    3a20:	00000116 	andeq	r0, r0, r6, lsl r1
    3a24:	000013cf 	andeq	r1, r0, pc, asr #7
    3a28:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3a2c:	03630100 	cmneq	r3, #0, 2
    3a30:	00008138 	andeq	r8, r0, r8, lsr r1
    3a34:	0013ed00 	andseq	lr, r3, r0, lsl #26
    3a38:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3a3c:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    3a40:	01035a01 	tsteq	r3, r1, lsl #20
    3a44:	00000001 	andeq	r0, r0, r1
    3a48:	00000000 	andeq	r0, r0, r0
    3a4c:	999c0100 	ldmibls	ip, {r8}
    3a50:	2200000b 	andcs	r0, r0, #11
    3a54:	5a010070 	bpl	43c1c <__ccfg+0x23c74>
    3a58:	01163103 	tsteq	r6, r3, lsl #2
    3a5c:	140b0000 	strne	r0, [fp], #-0
    3a60:	73220000 			; <UNDEFINED> instruction: 0x73220000
    3a64:	01007365 	tsteq	r0, r5, ror #6
    3a68:	8138035a 	teqhi	r8, sl, asr r3
    3a6c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3a70:	00000014 	andeq	r0, r0, r4, lsl r0
    3a74:	0f69012c 	svceq	0x0069012c
    3a78:	52010000 	andpl	r0, r1, #0
    3a7c:	81010103 	tsthi	r1, r3, lsl #2
    3a80:	01000000 	mrseq	r0, (UNDEF: 0)
    3a84:	00000bd5 	ldrdeq	r0, [r0], -r5
    3a88:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    3a8c:	03520100 	cmpeq	r2, #0, 2
    3a90:	0000812d 	andeq	r8, r0, sp, lsr #2
    3a94:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    3a98:	52010074 	andpl	r0, r1, #116	; 0x74
    3a9c:	00813603 	addeq	r3, r1, r3, lsl #12
    3aa0:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    3aa4:	01006772 	tsteq	r0, r2, ror r7
    3aa8:	16430352 			; <UNDEFINED> instruction: 0x16430352
    3aac:	00000001 	andeq	r0, r0, r1
    3ab0:	0cd30121 	ldfeqe	f0, [r3], {33}	; 0x21
    3ab4:	33010000 	movwcc	r0, #4096	; 0x1000
    3ab8:	81010103 	tsthi	r1, r3, lsl #2
	...
    3ac4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ac8:	000c3e9c 	muleq	ip, ip, lr
    3acc:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3ad0:	03330100 	teqeq	r3, #0, 2
    3ad4:	0000812c 	andeq	r8, r0, ip, lsr #2
    3ad8:	00144700 	andseq	r4, r4, r0, lsl #14
    3adc:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    3ae0:	33010074 	movwcc	r0, #4212	; 0x1074
    3ae4:	00813403 	addeq	r3, r1, r3, lsl #8
    3ae8:	14860000 	strne	r0, [r6], #0
    3aec:	61220000 			; <UNDEFINED> instruction: 0x61220000
    3af0:	01006772 	tsteq	r0, r2, ror r7
    3af4:	16410333 			; <UNDEFINED> instruction: 0x16410333
    3af8:	af000001 	svcge	0x00000001
    3afc:	2f000014 	svccs	0x00000014
	...
    3b08:	01007028 	tsteq	r0, r8, lsr #32
    3b0c:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    3b10:	d8000007 	stmdale	r0, {r0, r1, r2}
    3b14:	00000014 	andeq	r0, r0, r4, lsl r0
    3b18:	68012700 	stmdavs	r1, {r8, r9, sl, sp}
    3b1c:	0100000d 	tsteq	r0, sp
    3b20:	0101032b 	tsteq	r1, fp, lsr #6
	...
    3b2c:	0c679c01 	stcleq	12, cr9, [r7], #-4
    3b30:	70220000 	eorvc	r0, r2, r0
    3b34:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    3b38:	0001162e 	andeq	r1, r1, lr, lsr #12
    3b3c:	0014eb00 	andseq	lr, r4, r0, lsl #22
    3b40:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3b44:	00000e42 	andeq	r0, r0, r2, asr #28
    3b48:	01031a01 	tsteq	r3, r1, lsl #20
    3b4c:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3b58:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    3b5c:	2200000c 	andcs	r0, r0, #12
    3b60:	1a010070 	bne	43d28 <__ccfg+0x23d80>
    3b64:	01162e03 	tsteq	r6, r3, lsl #28
    3b68:	15090000 	strne	r0, [r9, #-0]
    3b6c:	62220000 	eorvs	r0, r2, #0
    3b70:	01006675 	tsteq	r0, r5, ror r6
    3b74:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    3b78:	27000002 	strcs	r0, [r0, -r2]
    3b7c:	22000015 	andcs	r0, r0, #21
    3b80:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3b84:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    3b88:	00000081 	andeq	r0, r0, r1, lsl #1
    3b8c:	0000153a 	andeq	r1, r0, sl, lsr r5
    3b90:	01006229 	tsteq	r0, r9, lsr #4
    3b94:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    3b98:	00000008 	andeq	r0, r0, r8
    3b9c:	0e880121 	rmfeqep	f0, f0, f1
    3ba0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3ba4:	81010103 	tsthi	r1, r3, lsl #2
	...
    3bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    3bb4:	000d1b9c 	muleq	sp, ip, fp
    3bb8:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3bbc:	2d030801 	stccs	8, cr0, [r3, #-4]
    3bc0:	00000116 	andeq	r0, r0, r6, lsl r1
    3bc4:	00001558 	andeq	r1, r0, r8, asr r5
    3bc8:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    3bcc:	03080100 	movweq	r0, #33024	; 0x8100
    3bd0:	000d1b36 	andeq	r1, sp, r6, lsr fp
    3bd4:	00157600 	andseq	r7, r5, r0, lsl #12
    3bd8:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    3bdc:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    3be0:	00813f03 	addeq	r3, r1, r3, lsl #30
    3be4:	15940000 	ldrne	r0, [r4]
    3be8:	62290000 	eorvs	r0, r9, #0
    3bec:	030c0100 	movweq	r0, #49408	; 0xc100
    3bf0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3bf4:	040a0000 	streq	r0, [sl], #-0
    3bf8:	000000e3 	andeq	r0, r0, r3, ror #1
    3bfc:	0e390121 	rsfeqep	f0, f1, f1
    3c00:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3c04:	16010102 	strne	r0, [r1], -r2, lsl #2
    3c08:	00000001 	andeq	r0, r0, r1
    3c0c:	00000000 	andeq	r0, r0, r0
    3c10:	01000000 	mrseq	r0, (UNDEF: 0)
    3c14:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    3c18:	0bc12b00 	bleq	ff04e820 <_estack+0xdf049820>
    3c1c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3c20:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    3c24:	15b20000 	ldrne	r0, [r2, #0]!
    3c28:	66220000 	strtvs	r0, [r2], -r0
    3c2c:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    3c30:	00813902 	addeq	r3, r1, r2, lsl #18
    3c34:	15d00000 	ldrbne	r0, [r0]
    3c38:	232b0000 			; <UNDEFINED> instruction: 0x232b0000
    3c3c:	0100000f 	tsteq	r0, pc
    3c40:	814102cd 	smlalbthi	r0, r1, sp, r2
    3c44:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    3c48:	22000015 	andcs	r0, r0, #21
    3c4c:	00677275 	rsbeq	r7, r7, r5, ror r2
    3c50:	1102ce01 	tstne	r2, r1, lsl #28
    3c54:	000000c1 	andeq	r0, r0, r1, asr #1
    3c58:	00001643 	andeq	r1, r0, r3, asr #12
    3c5c:	01006228 	tsteq	r0, r8, lsr #4
    3c60:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    3c64:	56000008 	strpl	r0, [r0], -r8
    3c68:	30000016 	andcc	r0, r0, r6, lsl r0
    3c6c:	00000e2b 	andeq	r0, r0, fp, lsr #28
    3c70:	0b02d001 	bleq	b7c7c <__ccfg+0x97cd4>
    3c74:	00000355 	andeq	r0, r0, r5, asr r3
    3c78:	2a649102 	bcs	1928088 <__ccfg+0x19080e0>
    3c7c:	d1010073 	tstle	r1, r3, ror r0
    3c80:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3c84:	57010000 	strpl	r0, [r1, -r0]
    3c88:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    3c8c:	02d20100 	sbcseq	r0, r2, #0, 2
    3c90:	00008106 	andeq	r8, r0, r6, lsl #2
    3c94:	00167400 	andseq	r7, r6, r0, lsl #8
    3c98:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3c9c:	00000df8 	strdeq	r0, [r0], -r8
    3ca0:	0102a401 	tsteq	r2, r1, lsl #8
    3ca4:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3cb0:	729c0100 	addsvc	r0, ip, #0, 2
    3cb4:	2200000e 	andcs	r0, r0, #14
    3cb8:	01006466 	tsteq	r0, r6, ror #8
    3cbc:	812a02a4 	smulwbhi	sl, r4, r2
    3cc0:	9d000000 	stcls	0, cr0, [r0, #-0]
    3cc4:	2b000016 	blcs	3d24 <__exidx_end+0xea8>
    3cc8:	00000f2a 	andeq	r0, r0, sl, lsr #30
    3ccc:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    3cd0:	00000081 	andeq	r0, r0, r1, lsl #1
    3cd4:	000016d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3cd8:	01007328 	tsteq	r0, r8, lsr #6
    3cdc:	400d02a8 	andmi	r0, sp, r8, lsr #5
    3ce0:	05000007 	streq	r0, [r0, #-7]
    3ce4:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3ce8:	0100716e 	tsteq	r0, lr, ror #2
    3cec:	810602a9 	smlatbhi	r6, r9, r2, r0
    3cf0:	6a000000 	bvs	3cf8 <__exidx_end+0xe7c>
    3cf4:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3cf8:	01007172 	tsteq	r0, r2, ror r1
    3cfc:	8a0b02aa 	bhi	2c47ac <__ccfg+0x2a4804>
    3d00:	88000007 	stmdahi	r0, {r0, r1, r2}
    3d04:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3d08:	ab010062 	blge	43e98 <__ccfg+0x23ef0>
    3d0c:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3d10:	17a60000 	strne	r0, [r6, r0]!
    3d14:	de310000 	cdple	0, 3, cr0, cr1, cr0, {0}
    3d18:	0100000d 	tsteq	r0, sp
    3d1c:	000102c0 	andeq	r0, r1, r0, asr #5
    3d20:	32000000 	andcc	r0, r0, #0
    3d24:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    3d30:	0a02bb01 	beq	b293c <__ccfg+0x92994>
    3d34:	00116033 	andseq	r6, r1, r3, lsr r0
    3d38:	116b2600 	cmnne	fp, r0, lsl #12
    3d3c:	17cf0000 	strbne	r0, [pc, r0]
    3d40:	76260000 	strtvc	r0, [r6], -r0
    3d44:	e2000011 	and	r0, r0, #17
    3d48:	00000017 	andeq	r0, r0, r7, lsl r0
    3d4c:	ab012100 	blge	4c154 <__ccfg+0x2c1ac>
    3d50:	0100000c 	tsteq	r0, ip
    3d54:	0101027d 	tsteq	r1, sp, ror r2
    3d58:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3d64:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    3d68:	66220000 	strtvs	r0, [r2], -r0
    3d6c:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    3d70:	00812a02 	addeq	r2, r1, r2, lsl #20
    3d74:	17f50000 	ldrbne	r0, [r5, r0]!
    3d78:	2a2b0000 	bcs	ac3d80 <__ccfg+0xaa3dd8>
    3d7c:	0100000f 	tsteq	r0, pc
    3d80:	8132027d 	teqhi	r2, sp, ror r2
    3d84:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3d88:	28000018 	stmdacs	r0, {r3, r4}
    3d8c:	81010073 	tsthi	r1, r3, ror r0
    3d90:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3d94:	18520000 	ldmdane	r2, {}^	; <UNPREDICTABLE>
    3d98:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    3d9c:	82010071 	andhi	r0, r1, #113	; 0x71
    3da0:	00810602 	addeq	r0, r1, r2, lsl #12
    3da4:	18b70000 	ldmne	r7!, {}	; <UNPREDICTABLE>
    3da8:	72280000 	eorvc	r0, r8, #0
    3dac:	83010071 	movwhi	r0, #4209	; 0x1071
    3db0:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3db4:	18d50000 	ldmne	r5, {}^	; <UNPREDICTABLE>
    3db8:	62280000 	eorvs	r0, r8, #0
    3dbc:	02840100 	addeq	r0, r4, #0, 2
    3dc0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3dc4:	0018fe00 	andseq	pc, r8, r0, lsl #28
    3dc8:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3dcc:	00000f2f 	andeq	r0, r0, pc, lsr #30
    3dd0:	01025601 	tsteq	r2, r1, lsl #12
    3dd4:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    3de0:	5c9c0100 	ldfpls	f0, [ip], {0}
    3de4:	2b00000f 	blcs	3e28 <__exidx_end+0xfac>
    3de8:	00000bc1 	andeq	r0, r0, r1, asr #23
    3dec:	2d025601 	stccs	6, cr5, [r2, #-4]
    3df0:	000000cd 	andeq	r0, r0, sp, asr #1
    3df4:	00001932 	andeq	r1, r0, r2, lsr r9
    3df8:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3dfc:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    3e00:	00000081 	andeq	r0, r0, r1, lsl #1
    3e04:	00001945 	andeq	r1, r0, r5, asr #18
    3e08:	01007028 	tsteq	r0, r8, lsr #32
    3e0c:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    3e10:	84000001 	strhi	r0, [r0], #-1
    3e14:	28000019 	stmdacs	r0, {r0, r3, r4}
    3e18:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    3e1c:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3e20:	19970000 	ldmibne	r7, {}	; <UNPREDICTABLE>
    3e24:	72280000 	eorvc	r0, r8, #0
    3e28:	5f010071 	svcpl	0x00010071
    3e2c:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3e30:	19c00000 	stmibne	r0, {}^	; <UNPREDICTABLE>
    3e34:	21000000 	mrscs	r0, (UNDEF: 0)
    3e38:	000ef501 	andeq	pc, lr, r1, lsl #10
    3e3c:	024a0100 	subeq	r0, sl, #0, 2
    3e40:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3e4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e50:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    3e54:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    3e58:	024a0100 	subeq	r0, sl, #0, 2
    3e5c:	00008129 	andeq	r8, r0, r9, lsr #2
    3e60:	0019fa00 	andseq	pc, r9, r0, lsl #20
    3e64:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    3e68:	024a0100 	subeq	r0, sl, #0, 2
    3e6c:	0007d43f 	andeq	sp, r7, pc, lsr r4
    3e70:	00510100 	subseq	r0, r1, r0, lsl #2
    3e74:	0e540121 	rdfeqsp	f0, f4, f1
    3e78:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3e7c:	81010102 	tsthi	r1, r2, lsl #2
	...
    3e88:	01000000 	mrseq	r0, (UNDEF: 0)
    3e8c:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    3e90:	0bc12b00 	bleq	ff04ea98 <_estack+0xdf049a98>
    3e94:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3e98:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    3e9c:	1a180000 	bne	603ea4 <__ccfg+0x5e3efc>
    3ea0:	66220000 	strtvs	r0, [r2], -r0
    3ea4:	29010064 	stmdbcs	r1, {r2, r5, r6}
    3ea8:	00813602 	addeq	r3, r1, r2, lsl #12
    3eac:	1a360000 	bne	d83eb4 <__ccfg+0xd63f0c>
    3eb0:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3eb4:	022b0100 	eoreq	r0, fp, #0, 2
    3eb8:	0007400d 	andeq	r4, r7, sp
    3ebc:	001a8000 	andseq	r8, sl, r0
    3ec0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3ec4:	0c022c01 	stceq	12, cr2, [r2], {1}
    3ec8:	0000089d 	muleq	r0, sp, r8
    3ecc:	00001a93 	muleq	r0, r3, sl
    3ed0:	5f012100 	svcpl	0x00012100
    3ed4:	0100000d 	tsteq	r0, sp
    3ed8:	010101f6 	strdeq	r0, [r1, -r6]
    3edc:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3ee8:	10839c01 	addne	r9, r3, r1, lsl #24
    3eec:	c12b0000 			; <UNDEFINED> instruction: 0xc12b0000
    3ef0:	0100000b 	tsteq	r0, fp
    3ef4:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    3ef8:	a6000000 	strge	r0, [r0], -r0
    3efc:	2200001a 	andcs	r0, r0, #26
    3f00:	00796870 	rsbseq	r6, r9, r0, ror r8
    3f04:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    3f08:	00000081 	andeq	r0, r0, r1, lsl #1
    3f0c:	00001acf 	andeq	r1, r0, pc, asr #21
    3f10:	000ec12b 	andeq	ip, lr, fp, lsr #2
    3f14:	01f60100 	mvnseq	r0, r0, lsl #2
    3f18:	0000813e 	andeq	r8, r0, lr, lsr r1
    3f1c:	001b2400 	andseq	r2, fp, r0, lsl #8
    3f20:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    3f24:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    3f28:	00810601 	addeq	r0, r1, r1, lsl #12
    3f2c:	1b5c0000 	blne	1703f34 <__ccfg+0x16e3f8c>
    3f30:	cc360000 	ldcgt	0, cr0, [r6], #-0
    3f34:	0100000d 	tsteq	r0, sp
    3f38:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    3f3c:	28000005 	stmdacs	r0, {r0, r2}
    3f40:	fa010073 	blx	44114 <__ccfg+0x2416c>
    3f44:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    3f48:	1b7a0000 	blne	1e83f50 <__ccfg+0x1e63fa8>
    3f4c:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    3f50:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    3f54:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    3f58:	91020000 	mrsls	r0, (UNDEF: 2)
    3f5c:	01270054 	qsubeq	r0, r4, r7
    3f60:	00000e02 	andeq	r0, r0, r2, lsl #28
    3f64:	01013b01 	tsteq	r1, r1, lsl #22
    3f68:	00000001 	andeq	r0, r0, r1
    3f6c:	00000000 	andeq	r0, r0, r0
    3f70:	bb9c0100 	bllt	fe704378 <_estack+0xde6ff378>
    3f74:	22000010 	andcs	r0, r0, #16
    3f78:	3b010070 	blcc	44140 <__ccfg+0x24198>
    3f7c:	01162e01 	tsteq	r6, r1, lsl #28
    3f80:	1bc40000 	blne	ff103f88 <_estack+0xdf0fef88>
    3f84:	62280000 	eorvs	r0, r8, #0
    3f88:	01410100 	mrseq	r0, (UNDEF: 81)
    3f8c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3f90:	001bed00 	andseq	lr, fp, r0, lsl #26
    3f94:	61370000 	teqvs	r7, r0
    3f98:	01006270 	tsteq	r0, r0, ror r2
    3f9c:	01010114 	tsteq	r1, r4, lsl r1
    3fa0:	0000089d 	muleq	r0, sp, r8
	...
    3fac:	11029c01 	tstne	r2, r1, lsl #24
    3fb0:	d72b0000 	strle	r0, [fp, -r0]!
    3fb4:	01000013 	tsteq	r0, r3, lsl r0
    3fb8:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    3fbc:	21000000 	mrscs	r0, (UNDEF: 0)
    3fc0:	2a00001c 	bcs	4038 <__exidx_end+0x11bc>
    3fc4:	19010070 	stmdbne	r1, {r4, r5, r6}
    3fc8:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    3fcc:	50010000 	andpl	r0, r1, r0
    3fd0:	00736329 	rsbseq	r6, r3, r9, lsr #6
    3fd4:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    3fd8:	000000cd 	andeq	r0, r0, sp, asr #1
    3fdc:	6c723800 	ldclvs	8, cr3, [r2], #-0
    3fe0:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    3fe4:	00010101 	andeq	r0, r1, r1, lsl #2
    3fe8:	00000000 	andeq	r0, r0, r0
    3fec:	01000000 	mrseq	r0, (UNDEF: 0)
    3ff0:	00112a9c 	mulseq	r1, ip, sl
    3ff4:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3ff8:	2b010401 	blcs	45004 <__ccfg+0x2505c>
    3ffc:	0000089d 	muleq	r0, sp, r8
    4000:	00001c34 	andeq	r1, r0, r4, lsr ip
    4004:	0d1f3900 	vldreq.16	s6, [pc, #-0]	; 400c <__exidx_end+0x1190>	; <UNPREDICTABLE>
    4008:	e0010000 	and	r0, r1, r0
    400c:	4e010101 	adfmis	f0, f1, f1
    4010:	3a000011 	bcc	405c <__exidx_end+0x11e0>
    4014:	e0010070 	and	r0, r1, r0, ror r0
    4018:	00089d2f 	andeq	r9, r8, pc, lsr #26
    401c:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    4020:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    4024:	00000081 	andeq	r0, r0, r1, lsl #1
    4028:	0d7a3b00 	vldmdbeq	sl!, {d19-d18}
    402c:	cf010000 	svcgt	0x00010000
    4030:	00810101 	addeq	r0, r1, r1, lsl #2
    4034:	81010000 	mrshi	r0, (UNDEF: 1)
    4038:	3a000011 	bcc	4084 <__exidx_end+0x1208>
    403c:	0100716f 	tsteq	r0, pc, ror #2
    4040:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    4044:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    4048:	d3010071 	movwle	r0, #4209	; 0x1071
    404c:	00008106 	andeq	r8, r0, r6, lsl #2
    4050:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    4054:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    4058:	00000008 	andeq	r0, r0, r8
    405c:	716e653d 	cmnvc	lr, sp, lsr r5
    4060:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    4064:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    4068:	713a0000 	teqvc	sl, r0
    406c:	2aa80100 	bcs	fea04474 <_estack+0xde9ff474>
    4070:	0000078a 	andeq	r0, r0, sl, lsl #15
    4074:	0100703a 	tsteq	r0, sl, lsr r0
    4078:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    407c:	3d000000 	stccc	0, cr0, [r0, #-0]
    4080:	00716564 	rsbseq	r6, r1, r4, ror #10
    4084:	01017f01 	tsteq	r1, r1, lsl #30
    4088:	0011bd01 	andseq	fp, r1, r1, lsl #26
    408c:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    4090:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    4094:	00000008 	andeq	r0, r0, r8
    4098:	0011a43e 	andseq	sl, r1, lr, lsr r4
	...
    40a4:	f29c0100 	vaddw.s16	q0, q6, d0
    40a8:	3f000011 	svccc	0x00000011
    40ac:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    40b0:	a4405001 	strbge	r5, [r0], #-1
    40b4:	00000011 	andeq	r0, r0, r1, lsl r0
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	01000000 	mrseq	r0, (UNDEF: 0)
    40c0:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    40c4:	47000011 	smladmi	r0, r1, r0, r0
    40c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    40cc:	11813e00 	orrne	r3, r1, r0, lsl #28
	...
    40d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    40dc:	0000123b 	andeq	r1, r0, fp, lsr r2
    40e0:	00118f24 	andseq	r8, r1, r4, lsr #30
    40e4:	001c5a00 	andseq	r5, ip, r0, lsl #20
    40e8:	11992400 	orrsne	r2, r9, r0, lsl #8
    40ec:	1c8e0000 	stcne	0, cr0, [lr], {0}
    40f0:	81400000 	mrshi	r0, (UNDEF: 64)
    40f4:	00000011 	andeq	r0, r0, r1, lsl r0
    40f8:	00000000 	andeq	r0, r0, r0
    40fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4100:	8f2401a8 	svchi	0x002401a8
    4104:	c2000011 	andgt	r0, r0, #17
    4108:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    410c:	00001199 	muleq	r0, r9, r1
    4110:	00001ce0 	andeq	r1, r0, r0, ror #25
    4114:	2a3e0000 	bcs	f8411c <__ccfg+0xf64174>
    4118:	00000011 	andeq	r0, r0, r1, lsl r0
    411c:	00000000 	andeq	r0, r0, r0
    4120:	01000000 	mrseq	r0, (UNDEF: 0)
    4124:	0012809c 	mulseq	r2, ip, r0
    4128:	11382400 	teqne	r8, r0, lsl #8
    412c:	1cfe0000 	ldclne	0, cr0, [lr]
    4130:	42240000 	eormi	r0, r4, #0
    4134:	53000011 	movwpl	r0, #17
    4138:	4100001d 	tstmi	r0, sp, lsl r0
    413c:	0000112a 	andeq	r1, r0, sl, lsr #2
    4140:	00000000 	andeq	r0, r0, r0
    4144:	00000810 	andeq	r0, r0, r0, lsl r8
    4148:	3301e001 	movwcc	lr, #4097	; 0x1001
    414c:	00001142 	andeq	r1, r0, r2, asr #2
    4150:	00113824 	andseq	r3, r1, r4, lsr #16
    4154:	001d6600 	andseq	r6, sp, r0, lsl #12
    4158:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    415c:	00000b99 	muleq	r0, r9, fp
	...
    4168:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    416c:	ad240000 	stcge	0, cr0, [r4, #-0]
    4170:	8400000b 	strhi	r0, [r0], #-11
    4174:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4178:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    417c:	00001da2 	andeq	r1, r0, r2, lsr #27
    4180:	000bc724 	andeq	ip, fp, r4, lsr #14
    4184:	001dcb00 	andseq	ip, sp, r0, lsl #22
    4188:	0b993200 	bleq	fe650990 <_estack+0xde64b990>
	...
    4194:	52010000 	andpl	r0, r1, #0
    4198:	ad330103 	ldfges	f0, [r3, #-12]!
    419c:	2400000b 	strcs	r0, [r0], #-11
    41a0:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    41a4:	00001df4 	strdeq	r1, [r0], -r4
    41a8:	000bc724 	andeq	ip, fp, r4, lsr #14
    41ac:	001e0700 	andseq	r0, lr, r0, lsl #14
    41b0:	42000000 	andmi	r0, r0, #0
    41b4:	00000a4a 	andeq	r0, r0, sl, asr #20
	...
    41c0:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    41c4:	1a00000a 	bne	41f4 <__exidx_end+0x1378>
    41c8:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    41cc:	00000a6b 	andeq	r0, r0, fp, ror #20
    41d0:	00001e2d 	andeq	r1, r0, sp, lsr #28
    41d4:	000a7824 	andeq	r7, sl, r4, lsr #16
    41d8:	001e8d00 	andseq	r8, lr, r0, lsl #26
    41dc:	0a852600 	beq	fe14d9e4 <_estack+0xde1489e4>
    41e0:	1ed70000 	cdpne	0, 13, cr0, cr7, cr0, {0}
    41e4:	4a320000 	bmi	c841ec <__ccfg+0xc64244>
    41e8:	0000000a 	andeq	r0, r0, sl
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	01000000 	mrseq	r0, (UNDEF: 0)
    41f4:	33010386 	movwcc	r0, #4998	; 0x1386
    41f8:	00000a5e 	andeq	r0, r0, lr, asr sl
    41fc:	000a6b24 	andeq	r6, sl, r4, lsr #22
    4200:	001f0b00 	andseq	r0, pc, r0, lsl #22
    4204:	0a783300 	beq	1e10e0c <__ccfg+0x1df0e64>
    4208:	85430000 	strbhi	r0, [r3, #-0]
    420c:	0000000a 	andeq	r0, r0, sl
    4210:	01740000 	cmneq	r4, r0
    4214:	00030000 	andeq	r0, r3, r0
    4218:	00001023 	andeq	r1, r0, r3, lsr #32
    421c:	01720104 	cmneq	r2, r4, lsl #2
    4220:	b70c0000 	strlt	r0, [ip, -r0]
    4224:	d300000f 	movwle	r0, #15
    4228:	40000000 	andmi	r0, r0, r0
    422c:	00000009 	andeq	r0, r0, r9
    4230:	36000000 	strcc	r0, [r0], -r0
    4234:	02000036 	andeq	r0, r0, #54	; 0x36
    4238:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    423c:	02020000 	andeq	r0, r2, #0
    4240:	0003f105 	andeq	pc, r3, r5, lsl #2
    4244:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4248:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    424c:	ab050802 	blge	14625c <__ccfg+0x1262b4>
    4250:	02000000 	andeq	r0, r0, #0
    4254:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    4258:	02020000 	andeq	r0, r2, #0
    425c:	00027307 	andeq	r7, r2, r7, lsl #6
    4260:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    4264:	34020000 	strcc	r0, [r2], #-0
    4268:	00005b19 	andeq	r5, r0, r9, lsl fp
    426c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4270:	00000085 	andeq	r0, r0, r5, lsl #1
    4274:	80070802 	andhi	r0, r7, r2, lsl #16
    4278:	04000000 	streq	r0, [r0], #-0
    427c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4280:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4284:	00008a07 	andeq	r8, r0, r7, lsl #20
    4288:	82040500 	andhi	r0, r4, #0, 10
    428c:	06000000 	streq	r0, [r0], -r0
    4290:	00000077 	andeq	r0, r0, r7, ror r0
    4294:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    4298:	0000004f 	andeq	r0, r0, pc, asr #32
    429c:	000faa08 	andeq	sl, pc, r8, lsl #20
    42a0:	117f0100 	cmnne	pc, r0, lsl #2
    42a4:	0000004f 	andeq	r0, r0, pc, asr #32
    42a8:	7e080101 	adfvce	f0, f0, f1
    42ac:	0100000f 	tsteq	r0, pc
    42b0:	004f1180 	subeq	r1, pc, r0, lsl #3
    42b4:	01010000 	mrseq	r0, (UNDEF: 1)
    42b8:	000ffa08 	andeq	pc, pc, r8, lsl #20
    42bc:	11810100 	orrne	r0, r1, r0, lsl #2
    42c0:	0000004f 	andeq	r0, r0, pc, asr #32
    42c4:	f5080101 			; <UNDEFINED> instruction: 0xf5080101
    42c8:	0100000f 	tsteq	r0, pc
    42cc:	004f1182 	subeq	r1, pc, r2, lsl #3
    42d0:	01010000 	mrseq	r0, (UNDEF: 1)
    42d4:	000fb108 	andeq	fp, pc, r8, lsl #2
    42d8:	11830100 	orrne	r0, r3, r0, lsl #2
    42dc:	0000004f 	andeq	r0, r0, pc, asr #32
    42e0:	76080101 	strvc	r0, [r8], -r1, lsl #2
    42e4:	0100000f 	tsteq	r0, pc
    42e8:	004f1184 	subeq	r1, pc, r4, lsl #3
    42ec:	01010000 	mrseq	r0, (UNDEF: 1)
    42f0:	00007d09 	andeq	r7, r0, r9, lsl #26
    42f4:	0000ee00 	andeq	lr, r0, r0, lsl #28
    42f8:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    42fc:	00310000 	eorseq	r0, r1, r0
    4300:	0000de06 	andeq	sp, r0, r6, lsl #28
    4304:	10130b00 	andsne	r0, r3, r0, lsl #22
    4308:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    430c:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    4310:	03050100 	movweq	r0, #20736	; 0x5100
    4314:	00000000 	andeq	r0, r0, r0
    4318:	0010010c 	andseq	r0, r0, ip, lsl #2
    431c:	01280100 			; <UNDEFINED> instruction: 0x01280100
    4320:	15ee0101 	strbne	r0, [lr, #257]!	; 0x101
    4324:	15f00000 	ldrbne	r0, [r0, #0]!
    4328:	9c010000 	stcls	0, cr0, [r1], {-0}
    432c:	000f8d0c 	andeq	r8, pc, ip, lsl #26
    4330:	01160100 	tsteq	r6, r0, lsl #2
    4334:	15ec0101 	strbne	r0, [ip, #257]!	; 0x101
    4338:	15ee0000 	strbne	r0, [lr, #0]!
    433c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4340:	000f9d0c 	andeq	r9, pc, ip, lsl #26
    4344:	01040100 	mrseq	r0, (UNDEF: 20)
    4348:	15ea0101 	strbne	r0, [sl, #257]!	; 0x101
    434c:	15ec0000 	strbne	r0, [ip, #0]!
    4350:	9c010000 	stcls	0, cr0, [r1], {-0}
    4354:	102a010d 	eorne	r0, sl, sp, lsl #2
    4358:	d2010000 	andle	r0, r1, #0
    435c:	15f00101 	ldrbne	r0, [r0, #257]!	; 0x101
    4360:	16340000 	ldrtne	r0, [r4], -r0
    4364:	9c010000 	stcls	0, cr0, [r1], {-0}
    4368:	000f840e 	andeq	r8, pc, lr, lsl #8
    436c:	0fd40100 	svceq	0x00d40100
    4370:	00000084 	andeq	r0, r0, r4, lsl #1
    4374:	00001f1e 	andeq	r1, r0, lr, lsl pc
    4378:	0010200e 	andseq	r2, r0, lr
    437c:	1ad40100 	bne	ff504784 <_estack+0xdf4ff784>
    4380:	00000084 	andeq	r0, r0, r4, lsl #1
    4384:	00001f3c 	andeq	r1, r0, ip, lsr pc
    4388:	05370000 	ldreq	r0, [r7, #-0]!
    438c:	00030000 	andeq	r0, r3, r0
    4390:	000010e8 	andeq	r1, r0, r8, ror #1
    4394:	01720104 	cmneq	r2, r4, lsl #2
    4398:	8a0c0000 	bhi	3043a0 <__ccfg+0x2e43f8>
    439c:	d3000010 	movwle	r0, #16
    43a0:	5d000000 	stcpl	0, cr0, [r0, #-0]
    43a4:	02000037 	andeq	r0, r0, #55	; 0x37
    43a8:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    43ac:	02020000 	andeq	r0, r2, #0
    43b0:	0003f105 	andeq	pc, r3, r5, lsl #2
    43b4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    43b8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    43bc:	ab050802 	blge	1463cc <__ccfg+0x126424>
    43c0:	03000000 	movweq	r0, #0
    43c4:	0000223c 	andeq	r2, r0, ip, lsr r2
    43c8:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    43cc:	02000000 	andeq	r0, r0, #0
    43d0:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    43d4:	2a030000 	bcs	c43dc <__ccfg+0xa4434>
    43d8:	01000021 	tsteq	r0, r1, lsr #32
    43dc:	00581931 	subseq	r1, r8, r1, lsr r9
    43e0:	02020000 	andeq	r0, r2, #0
    43e4:	00027307 	andeq	r7, r2, r7, lsl #6
    43e8:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    43ec:	34010000 	strcc	r0, [r1], #-0
    43f0:	00006b19 	andeq	r6, r0, r9, lsl fp
    43f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    43f8:	00000085 	andeq	r0, r0, r5, lsl #1
    43fc:	80070802 	andhi	r0, r7, r2, lsl #16
    4400:	04000000 	streq	r0, [r0], #-0
    4404:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4408:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    440c:	00008a07 	andeq	r8, r0, r7, lsl #20
    4410:	02580500 	subseq	r0, r8, #0, 10
    4414:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    4418:	e4060000 	str	r0, [r6], #-0
    441c:	02000011 	andeq	r0, r0, #17
    4420:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    4424:	06000000 	streq	r0, [r0], -r0
    4428:	000010f9 	strdeq	r1, [r0], -r9
    442c:	5f103202 	svcpl	0x00103202
    4430:	04000000 	streq	r0, [r0], #-0
    4434:	0010c106 	andseq	ip, r0, r6, lsl #2
    4438:	10330200 	eorsne	r0, r3, r0, lsl #4
    443c:	0000005f 	andeq	r0, r0, pc, asr r0
    4440:	10740608 	rsbsne	r0, r4, r8, lsl #12
    4444:	34020000 	strcc	r0, [r2], #-0
    4448:	00005f10 	andeq	r5, r0, r0, lsl pc
    444c:	33060c00 	movwcc	r0, #27648	; 0x6c00
    4450:	02000010 	andeq	r0, r0, #16
    4454:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    4458:	06100000 	ldreq	r0, [r0], -r0
    445c:	00001044 	andeq	r1, r0, r4, asr #32
    4460:	5f103602 	svcpl	0x00103602
    4464:	14000000 	strne	r0, [r0], #-0
    4468:	00106406 	andseq	r6, r0, r6, lsl #8
    446c:	10370200 	eorsne	r0, r7, r0, lsl #4
    4470:	0000005f 	andeq	r0, r0, pc, asr r0
    4474:	11890618 	orrne	r0, r9, r8, lsl r6
    4478:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    447c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4480:	d9061c00 	stmdble	r6, {sl, fp, ip}
    4484:	02000010 	andeq	r0, r0, #16
    4488:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    448c:	06200000 	strteq	r0, [r0], -r0
    4490:	000010e9 	andeq	r1, r0, r9, ror #1
    4494:	5f103a02 	svcpl	0x00103a02
    4498:	24000000 	strcs	r0, [r0], #-0
    449c:	0011af06 	andseq	sl, r1, r6, lsl #30
    44a0:	103b0200 	eorsne	r0, fp, r0, lsl #4
    44a4:	0000005f 	andeq	r0, r0, pc, asr r0
    44a8:	11bf0628 			; <UNDEFINED> instruction: 0x11bf0628
    44ac:	3c020000 	stccc	0, cr0, [r2], {-0}
    44b0:	00005f10 	andeq	r5, r0, r0, lsl pc
    44b4:	55062c00 	strpl	r2, [r6, #-3072]	; 0xfffff400
    44b8:	02000010 	andeq	r0, r0, #16
    44bc:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    44c0:	06300000 	ldrteq	r0, [r0], -r0
    44c4:	0000114f 	andeq	r1, r0, pc, asr #2
    44c8:	5f103e02 	svcpl	0x00103e02
    44cc:	34000000 	strcc	r0, [r0], #-0
    44d0:	0011f406 	andseq	pc, r1, r6, lsl #8
    44d4:	103f0200 	eorsne	r0, pc, r0, lsl #4
    44d8:	0000005f 	andeq	r0, r0, pc, asr r0
    44dc:	110a0638 	tstne	sl, r8, lsr r6
    44e0:	40020000 	andmi	r0, r2, r0
    44e4:	00005f10 	andeq	r5, r0, r0, lsl pc
    44e8:	1e063c00 	cdpne	12, 0, cr3, cr6, cr0, {0}
    44ec:	02000011 	andeq	r0, r0, #17
    44f0:	005f1041 	subseq	r1, pc, r1, asr #32
    44f4:	06400000 	strbeq	r0, [r0], -r0
    44f8:	00001173 	andeq	r1, r0, r3, ror r1
    44fc:	5f104202 	svcpl	0x00104202
    4500:	44000000 	strmi	r0, [r0], #-0
    4504:	00115f06 	andseq	r5, r1, r6, lsl #30
    4508:	10430200 	subne	r0, r3, r0, lsl #4
    450c:	0000005f 	andeq	r0, r0, pc, asr r0
    4510:	119a0648 	orrsne	r0, sl, r8, asr #12
    4514:	44020000 	strmi	r0, [r2], #-0
    4518:	00005f10 	andeq	r5, r0, r0, lsl pc
    451c:	cf064c00 	svcgt	0x00064c00
    4520:	02000011 	andeq	r0, r0, #17
    4524:	005f1045 	subseq	r1, pc, r5, asr #32
    4528:	06500000 	ldrbeq	r0, [r0], -r0
    452c:	00001139 	andeq	r1, r0, r9, lsr r1
    4530:	5f104602 	svcpl	0x00104602
    4534:	54000000 	strpl	r0, [r0], #-0
    4538:	11320300 	teqne	r2, r0, lsl #6
    453c:	47020000 	strmi	r0, [r2, -r0]
    4540:	00008703 	andeq	r8, r0, r3, lsl #14
    4544:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    4548:	83080000 	movwhi	r0, #32768	; 0x8000
    454c:	02000010 	andeq	r0, r0, #16
    4550:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    4554:	01010000 	mrseq	r0, (UNDEF: 1)
    4558:	00160003 	andseq	r0, r6, r3
    455c:	12270300 	eorne	r0, r7, #0, 6
    4560:	0000004c 	andeq	r0, r0, ip, asr #32
    4564:	0001ce07 	andeq	ip, r1, r7, lsl #28
    4568:	01ce0900 	biceq	r0, lr, r0, lsl #18
    456c:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    4570:	03000013 	movweq	r0, #19
    4574:	0039122b 	eorseq	r1, r9, fp, lsr #4
    4578:	e4090000 	str	r0, [r9], #-0
    457c:	03000001 	movweq	r0, #1
    4580:	00001651 	andeq	r1, r0, r1, asr r6
    4584:	5f122c03 	svcpl	0x00122c03
    4588:	07000000 	streq	r0, [r0, -r0]
    458c:	000001f5 	strdeq	r0, [r0], -r5
    4590:	0002a603 	andeq	sl, r2, r3, lsl #12
    4594:	122d0300 	eorne	r0, sp, #0, 6
    4598:	0000005f 	andeq	r0, r0, pc, asr r0
    459c:	32030805 	andcc	r0, r3, #327680	; 0x50000
    45a0:	0002a009 	andeq	sl, r2, r9
    45a4:	02c10a00 	sbceq	r0, r1, #0, 20
    45a8:	34030000 	strcc	r0, [r3], #-0
    45ac:	0001e407 	andeq	lr, r1, r7, lsl #8
    45b0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    45b4:	00a40a00 	adceq	r0, r4, r0, lsl #20
    45b8:	35030000 	strcc	r0, [r3, #-0]
    45bc:	0001e403 	andeq	lr, r1, r3, lsl #8
    45c0:	06010100 	streq	r0, [r1], -r0, lsl #2
    45c4:	028f0a00 	addeq	r0, pc, #0, 20
    45c8:	36030000 	strcc	r0, [r3], -r0
    45cc:	0001e403 	andeq	lr, r1, r3, lsl #8
    45d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    45d4:	042b0a00 	strteq	r0, [fp], #-2560	; 0xfffff600
    45d8:	37030000 	strcc	r0, [r3, -r0]
    45dc:	0001e403 	andeq	lr, r1, r3, lsl #8
    45e0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    45e4:	04240a00 	strteq	r0, [r4], #-2560	; 0xfffff600
    45e8:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    45ec:	0001e403 	andeq	lr, r1, r3, lsl #8
    45f0:	00040100 	andeq	r0, r4, r0, lsl #2
    45f4:	04150600 	ldreq	r0, [r5], #-1536	; 0xfffffa00
    45f8:	3a030000 	bcc	c4600 <__ccfg+0xa4658>
    45fc:	0001e407 	andeq	lr, r1, r7, lsl #8
    4600:	4c060100 	stfmis	f0, [r6], {-0}
    4604:	03000000 	movweq	r0, #0
    4608:	01e4033c 	mvneq	r0, ip, lsr r3
    460c:	06020000 	streq	r0, [r2], -r0
    4610:	00000079 	andeq	r0, r0, r9, ror r0
    4614:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    4618:	03000001 	movweq	r0, #1
    461c:	00016106 	andeq	r6, r1, r6, lsl #2
    4620:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    4624:	000001f5 	strdeq	r0, [r0], -r5
    4628:	54030004 	strpl	r0, [r3], #-4
    462c:	03000004 	movweq	r0, #4
    4630:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    4634:	a0090000 	andge	r0, r9, r0
    4638:	08000002 	stmdaeq	r0, {r1}
    463c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    4640:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    4644:	01000002 	tsteq	r0, r2
    4648:	03210801 			; <UNDEFINED> instruction: 0x03210801
    464c:	45030000 	strmi	r0, [r3, #-0]
    4650:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    4654:	0b010100 	bleq	44a5c <__ccfg+0x24ab4>
    4658:	0002d304 	andeq	sp, r2, r4, lsl #6
    465c:	08010200 	stmdaeq	r1, {r9}
    4660:	000003be 			; <UNDEFINED> instruction: 0x000003be
    4664:	0002d307 	andeq	sp, r2, r7, lsl #6
    4668:	032f0800 			; <UNDEFINED> instruction: 0x032f0800
    466c:	45030000 	strmi	r0, [r3, #-0]
    4670:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    4674:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4678:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    467c:	0000031e 	andeq	r0, r0, lr, lsl r3
    4680:	0002c806 	andeq	ip, r2, r6, lsl #16
    4684:	0b900400 	bleq	fe40568c <_estack+0xde40068c>
    4688:	0000005f 	andeq	r0, r0, pc, asr r0
    468c:	062d0600 	strteq	r0, [sp], -r0, lsl #12
    4690:	91040000 	mrsls	r0, (UNDEF: 4)
    4694:	0001ce08 	andeq	ip, r1, r8, lsl #28
    4698:	9c060400 	cfstrsls	mvf0, [r6], {-0}
    469c:	04000004 	streq	r0, [r0], #-4
    46a0:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    46a4:	00060000 	andeq	r0, r6, r0
    46a8:	00043203 	andeq	r3, r4, r3, lsl #4
    46ac:	03930400 	orrseq	r0, r3, #0, 8
    46b0:	000002ed 	andeq	r0, r0, sp, ror #5
    46b4:	00031e0c 	andeq	r1, r3, ip, lsl #28
    46b8:	00033500 	andeq	r3, r3, r0, lsl #10
    46bc:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    46c0:	00000042 	andeq	r0, r0, r2, asr #32
    46c4:	2a0f9904 	bcs	3eaadc <__ccfg+0x3cab34>
    46c8:	01000003 	tsteq	r0, r3
    46cc:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    46d0:	036d0991 	cmneq	sp, #2375680	; 0x244000
    46d4:	8f0a0000 	svchi	0x000a0000
    46d8:	05000004 	streq	r0, [r0, #-4]
    46dc:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    46e0:	07010000 	streq	r0, [r1, -r0]
    46e4:	3d0a0001 	stccc	0, cr0, [sl, #-4]
    46e8:	05000000 	streq	r0, [r0, #-0]
    46ec:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    46f0:	01010000 	mrseq	r0, (UNDEF: 1)
    46f4:	03000000 	movweq	r0, #0
    46f8:	00000286 	andeq	r0, r0, r6, lsl #5
    46fc:	43039605 	movwmi	r9, #13829	; 0x3605
    4700:	07000003 	streq	r0, [r0, -r3]
    4704:	0000036d 	andeq	r0, r0, sp, ror #6
    4708:	0003790c 	andeq	r7, r3, ip, lsl #18
    470c:	00038900 	andeq	r8, r3, r0, lsl #18
    4710:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    4714:	0000037e 	andeq	r0, r0, lr, ror r3
    4718:	0002eb08 	andeq	lr, r2, r8, lsl #22
    471c:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    4720:	00000389 	andeq	r0, r0, r9, lsl #7
    4724:	da0c0101 	ble	304b30 <__ccfg+0x2e4b88>
    4728:	a7000001 	strge	r0, [r0, -r1]
    472c:	0d000003 	stceq	0, cr0, [r0, #-12]
    4730:	039c0700 	orrseq	r0, ip, #0, 14
    4734:	a7080000 	strge	r0, [r8, -r0]
    4738:	06000003 	streq	r0, [r0], -r3
    473c:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    4740:	01010000 	mrseq	r0, (UNDEF: 1)
    4744:	00014108 	andeq	r4, r1, r8, lsl #2
    4748:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    474c:	000001f5 	strdeq	r0, [r0], -r5
    4750:	a90e0101 	stmdbge	lr, {r0, r8}
    4754:	07000004 	streq	r0, [r0, -r4]
    4758:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    475c:	0b000003 	bleq	4770 <__exidx_end+0x18f4>
    4760:	0003db04 	andeq	sp, r3, r4, lsl #22
    4764:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    4768:	10000003 	andne	r0, r0, r3
    476c:	000001ce 	andeq	r0, r0, lr, asr #3
    4770:	02da0c00 	sbcseq	r0, sl, #0, 24
    4774:	03f20000 	mvnseq	r0, #0
    4778:	000d0000 	andeq	r0, sp, r0
    477c:	0003e707 	andeq	lr, r3, r7, lsl #14
    4780:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
    4784:	7f070000 	svcvc	0x00070000
    4788:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    478c:	01010000 	mrseq	r0, (UNDEF: 1)
    4790:	00039f11 	andeq	r9, r3, r1, lsl pc
    4794:	01820700 	orreq	r0, r2, r0, lsl #14
    4798:	00020114 	andeq	r0, r2, r4, lsl r1
    479c:	11010100 	mrsne	r0, (UNDEF: 17)
    47a0:	00000494 	muleq	r0, r4, r4
    47a4:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    47a8:	000001f5 	strdeq	r0, [r0], -r5
    47ac:	08120101 	ldmdaeq	r2, {r0, r8}
    47b0:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    47b4:	0000044b 	andeq	r0, r0, fp, asr #8
    47b8:	00223413 	eoreq	r3, r2, r3, lsl r4
    47bc:	03070700 	movweq	r0, #30464	; 0x7700
    47c0:	0001ce07 	andeq	ip, r1, r7, lsl #28
    47c4:	7f130000 	svcvc	0x00130000
    47c8:	07000005 	streq	r0, [r0, -r5]
    47cc:	06080308 	streq	r0, [r8], -r8, lsl #6
    47d0:	04000002 	streq	r0, [r0], #-2
    47d4:	02660e00 	rsbeq	r0, r6, #0, 28
    47d8:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    47dc:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    47e0:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
    47e4:	30000004 	andcc	r0, r0, r4
    47e8:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    47ec:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    47f0:	0004b113 	andeq	fp, r4, r3, lsl r1
    47f4:	03140700 	tsteq	r4, #0, 14
    47f8:	0001ce08 	andeq	ip, r1, r8, lsl #28
    47fc:	d2130000 	andsle	r0, r3, #0
    4800:	07000002 	streq	r0, [r0, -r2]
    4804:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    4808:	02000001 	andeq	r0, r0, #1
    480c:	0004ac13 	andeq	sl, r4, r3, lsl ip
    4810:	03160700 	tsteq	r6, #0, 14
    4814:	0003c80b 	andeq	ip, r3, fp, lsl #16
    4818:	7f130400 	svcvc	0x00130400
    481c:	0700000f 	streq	r0, [r0, -pc]
    4820:	06090317 			; <UNDEFINED> instruction: 0x06090317
    4824:	08000002 	stmdaeq	r0, {r1}
    4828:	00045d13 	andeq	r5, r4, r3, lsl sp
    482c:	03180700 	tsteq	r8, #0, 14
    4830:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    4834:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
    4838:	07000002 	streq	r0, [r0, -r2]
    483c:	cb150319 	blgt	5454a8 <__ccfg+0x525500>
    4840:	2c000004 	stccs	0, cr0, [r0], {4}
    4844:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    4848:	04cb0000 	strbeq	r0, [fp], #0
    484c:	80150000 	andshi	r0, r5, r0
    4850:	03000000 	movweq	r0, #0
    4854:	58040b00 	stmdapl	r4, {r8, r9, fp}
    4858:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    485c:	000004c3 	andeq	r0, r0, r3, asr #9
    4860:	1b031c07 	blne	cb884 <__ccfg+0xab8dc>
    4864:	00000458 	andeq	r0, r0, r8, asr r4
    4868:	00039511 	andeq	r9, r3, r1, lsl r5
    486c:	031e0700 	tsteq	lr, #0, 14
    4870:	0004ed14 	andeq	lr, r4, r4, lsl sp
    4874:	0b010100 	bleq	44c7c <__ccfg+0x24cd4>
    4878:	0004d104 	andeq	sp, r4, r4, lsl #2
    487c:	04f10800 	ldrbteq	r0, [r1], #2048	; 0x800
    4880:	1d080000 	stcne	0, cr0, [r8, #-0]
    4884:	0001ce13 	andeq	ip, r1, r3, lsl lr
    4888:	08010100 	stmdaeq	r1, {r8}
    488c:	0000075b 	andeq	r0, r0, fp, asr r7
    4890:	df1a1e08 	svcle	0x001a1e08
    4894:	01000001 	tsteq	r0, r1
    4898:	08eb0801 	stmiaeq	fp!, {r0, fp}^
    489c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    48a0:	0001df24 	andeq	sp, r1, r4, lsr #30
    48a4:	08010100 	stmdaeq	r1, {r8}
    48a8:	0000061a 	andeq	r0, r0, sl, lsl r6
    48ac:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    48b0:	01000004 	tsteq	r0, r4
    48b4:	01c01601 	biceq	r1, r0, r1, lsl #12
    48b8:	17090000 	strne	r0, [r9, -r0]
    48bc:	03050e02 	movweq	r0, #24066	; 0x5e02
    48c0:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    48c4:	00050000 	andeq	r0, r5, r0
    48c8:	07000300 	streq	r0, [r0, -r0, lsl #6]
    48cc:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    48d0:	00017201 	andeq	r7, r1, r1, lsl #4
    48d4:	123b0c00 	eorsne	r0, fp, #0, 24
    48d8:	00d30000 	sbcseq	r0, r3, r0
    48dc:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    48e0:	00000000 	andeq	r0, r0, r0
    48e4:	38e60000 	stmiacc	r6!, {}^	; <UNPREDICTABLE>
    48e8:	01020000 	mrseq	r0, (UNDEF: 2)
    48ec:	0003b706 	andeq	fp, r3, r6, lsl #14
    48f0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    48f4:	000003f1 	strdeq	r0, [r0], -r1
    48f8:	b0050402 	andlt	r0, r5, r2, lsl #8
    48fc:	02000000 	andeq	r0, r0, #0
    4900:	00ab0508 	adceq	r0, fp, r8, lsl #10
    4904:	3c030000 	stccc	0, cr0, [r3], {-0}
    4908:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    490c:	004d182e 	subeq	r1, sp, lr, lsr #16
    4910:	01020000 	mrseq	r0, (UNDEF: 2)
    4914:	0003b508 	andeq	fp, r3, r8, lsl #10
    4918:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    491c:	31040000 	mrscc	r0, (UNDEF: 4)
    4920:	00006019 	andeq	r6, r0, r9, lsl r0
    4924:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4928:	00000273 	andeq	r0, r0, r3, ror r2
    492c:	0017f303 	andseq	pc, r7, r3, lsl #6
    4930:	19340400 	ldmdbne	r4!, {sl}
    4934:	00000073 	andeq	r0, r0, r3, ror r0
    4938:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    493c:	02000000 	andeq	r0, r0, #0
    4940:	00800708 	addeq	r0, r0, r8, lsl #14
    4944:	04040000 	streq	r0, [r4], #-0
    4948:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    494c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4950:	0000008a 	andeq	r0, r0, sl, lsl #1
    4954:	00160003 	andseq	r0, r6, r3
    4958:	12270500 	eorne	r0, r7, #0, 10
    495c:	00000054 	andeq	r0, r0, r4, asr r0
    4960:	00008f05 	andeq	r8, r0, r5, lsl #30
    4964:	008f0600 	addeq	r0, pc, r0, lsl #12
    4968:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    496c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    4970:	0041122b 	subeq	r1, r1, fp, lsr #4
    4974:	a5060000 	strge	r0, [r6, #-0]
    4978:	05000000 	streq	r0, [r0, #-0]
    497c:	000000a5 	andeq	r0, r0, r5, lsr #1
    4980:	00165103 	andseq	r5, r6, r3, lsl #2
    4984:	122c0500 	eorne	r0, ip, #0, 10
    4988:	00000067 	andeq	r0, r0, r7, rrx
    498c:	0000bb05 	andeq	fp, r0, r5, lsl #22
    4990:	02a60300 	adceq	r0, r6, #0, 6
    4994:	2d050000 	stccs	0, cr0, [r5, #-0]
    4998:	00006712 	andeq	r6, r0, r2, lsl r7
    499c:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    49a0:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    49a4:	0000e410 	andeq	lr, r0, r0, lsl r4
    49a8:	8f040700 	svchi	0x00040700
    49ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    49b0:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    49b4:	00000178 	andeq	r0, r0, r8, ror r1
    49b8:	0002c109 	andeq	ip, r2, r9, lsl #2
    49bc:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    49c0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49c4:	00070101 	andeq	r0, r7, r1, lsl #2
    49c8:	0000a409 	andeq	sl, r0, r9, lsl #8
    49cc:	03350500 	teqeq	r5, #0, 10
    49d0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49d4:	00060101 	andeq	r0, r6, r1, lsl #2
    49d8:	00028f09 	andeq	r8, r2, r9, lsl #30
    49dc:	03360500 	teqeq	r6, #0, 10
    49e0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49e4:	00050101 	andeq	r0, r5, r1, lsl #2
    49e8:	00042b09 	andeq	r2, r4, r9, lsl #22
    49ec:	03370500 	teqeq	r7, #0, 10
    49f0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49f4:	00040101 	andeq	r0, r4, r1, lsl #2
    49f8:	00042409 	andeq	r2, r4, r9, lsl #8
    49fc:	03380500 	teqeq	r8, #0, 10
    4a00:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a04:	00000401 	andeq	r0, r0, r1, lsl #8
    4a08:	0004150a 	andeq	r1, r4, sl, lsl #10
    4a0c:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    4a10:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a14:	004c0a01 	subeq	r0, ip, r1, lsl #20
    4a18:	3c050000 	stccc	0, cr0, [r5], {-0}
    4a1c:	0000a503 	andeq	sl, r0, r3, lsl #10
    4a20:	790a0200 	stmdbvc	sl, {r9}
    4a24:	05000000 	streq	r0, [r0, #-0]
    4a28:	00a5033d 	adceq	r0, r5, sp, lsr r3
    4a2c:	0a030000 	beq	c4a34 <__ccfg+0xa4a8c>
    4a30:	00000161 	andeq	r0, r0, r1, ror #2
    4a34:	bb083f05 	bllt	214650 <__ccfg+0x1f46a8>
    4a38:	04000000 	streq	r0, [r0], #-0
    4a3c:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    4a40:	41050000 	mrsmi	r0, (UNDEF: 5)
    4a44:	0000ea03 	andeq	lr, r0, r3, lsl #20
    4a48:	01780600 	cmneq	r8, r0, lsl #12
    4a4c:	b50b0000 	strlt	r0, [fp, #-0]
    4a50:	05000002 	streq	r0, [r0, #-2]
    4a54:	01841a43 	orreq	r1, r4, r3, asr #20
    4a58:	01010000 	mrseq	r0, (UNDEF: 1)
    4a5c:	0003210b 	andeq	r2, r3, fp, lsl #2
    4a60:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    4a64:	000001a5 	andeq	r0, r0, r5, lsr #3
    4a68:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    4a6c:	000001ab 	andeq	r0, r0, fp, lsr #3
    4a70:	be080102 	adflte	f0, f0, f2
    4a74:	05000003 	streq	r0, [r0, #-3]
    4a78:	000001ab 	andeq	r0, r0, fp, lsr #3
    4a7c:	00032f0b 	andeq	r2, r3, fp, lsl #30
    4a80:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    4a84:	000001a5 	andeq	r0, r0, r5, lsr #3
    4a88:	08080101 	stmdaeq	r8, {r0, r8}
    4a8c:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    4a90:	0a000001 	beq	4a9c <__exidx_end+0x1c20>
    4a94:	000002c8 	andeq	r0, r0, r8, asr #5
    4a98:	670b9006 	strvs	r9, [fp, -r6]
    4a9c:	00000000 	andeq	r0, r0, r0
    4aa0:	00062d0a 	andeq	r2, r6, sl, lsl #26
    4aa4:	08910600 	ldmeq	r1, {r9, sl}
    4aa8:	0000008f 	andeq	r0, r0, pc, lsl #1
    4aac:	049c0a04 	ldreq	r0, [ip], #2564	; 0xa04
    4ab0:	92060000 	andls	r0, r6, #0
    4ab4:	0000b110 	andeq	fp, r0, r0, lsl r1
    4ab8:	03000600 	movweq	r0, #1536	; 0x600
    4abc:	00000432 	andeq	r0, r0, r2, lsr r4
    4ac0:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    4ac4:	0c000001 	stceq	0, cr0, [r0], {1}
    4ac8:	000001f6 	strdeq	r0, [r0], -r6
    4acc:	0000020d 	andeq	r0, r0, sp, lsl #4
    4ad0:	420b000d 	andmi	r0, fp, #13
    4ad4:	06000000 	streq	r0, [r0], -r0
    4ad8:	02020f99 	andeq	r0, r2, #612	; 0x264
    4adc:	01010000 	mrseq	r0, (UNDEF: 1)
    4ae0:	00b60407 	adcseq	r0, r6, r7, lsl #8
    4ae4:	01080000 	mrseq	r0, (UNDEF: 8)
    4ae8:	4b099107 	blmi	268f0c <__ccfg+0x248f64>
    4aec:	09000002 	stmdbeq	r0, {r1}
    4af0:	0000048f 	andeq	r0, r0, pc, lsl #9
    4af4:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    4af8:	01000000 	mrseq	r0, (UNDEF: 0)
    4afc:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    4b00:	0000003d 	andeq	r0, r0, sp, lsr r0
    4b04:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    4b08:	01000000 	mrseq	r0, (UNDEF: 0)
    4b0c:	00000001 	andeq	r0, r0, r1
    4b10:	00028603 	andeq	r8, r2, r3, lsl #12
    4b14:	03960700 	orrseq	r0, r6, #0, 14
    4b18:	00000221 	andeq	r0, r0, r1, lsr #4
    4b1c:	00024b05 	andeq	r4, r2, r5, lsl #22
    4b20:	02570c00 	subseq	r0, r7, #0, 24
    4b24:	02670000 	rsbeq	r0, r7, #0
    4b28:	000d0000 	andeq	r0, sp, r0
    4b2c:	00025c05 	andeq	r5, r2, r5, lsl #24
    4b30:	02eb0b00 	rsceq	r0, fp, #0, 22
    4b34:	9c070000 	stcls	0, cr0, [r7], {-0}
    4b38:	00026717 	andeq	r6, r2, r7, lsl r7
    4b3c:	0c010100 	stfeqs	f0, [r1], {-0}
    4b40:	0000009b 	muleq	r0, fp, r0
    4b44:	00000285 	andeq	r0, r0, r5, lsl #5
    4b48:	7a05000d 	bvc	144b84 <__ccfg+0x124bdc>
    4b4c:	0b000002 	bleq	4b5c <__exidx_end+0x1ce0>
    4b50:	000003a7 	andeq	r0, r0, r7, lsr #7
    4b54:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    4b58:	01000002 	tsteq	r0, r2
    4b5c:	01410b01 	cmpeq	r1, r1, lsl #22
    4b60:	c3060000 	movwgt	r0, #24576	; 0x6000
    4b64:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    4b68:	0e010100 	adfeqs	f0, f1, f0
    4b6c:	000004a9 	andeq	r0, r0, r9, lsr #9
    4b70:	10016e09 	andne	r6, r1, r9, lsl #28
    4b74:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    4b78:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    4b7c:	010f0000 	mrseq	r0, CPSR
    4b80:	000002c5 	andeq	r0, r0, r5, asr #5
    4b84:	00008f10 	andeq	r8, r0, r0, lsl pc
    4b88:	b20c0000 	andlt	r0, ip, #0
    4b8c:	d0000001 	andle	r0, r0, r1
    4b90:	0d000002 	stceq	0, cr0, [r0, #-8]
    4b94:	02c50500 	sbceq	r0, r5, #0, 10
    4b98:	64110000 	ldrvs	r0, [r1], #-0
    4b9c:	09000004 	stmdbeq	r0, {r2}
    4ba0:	d016017f 	andsle	r0, r6, pc, ror r1
    4ba4:	01000002 	tsteq	r0, r2
    4ba8:	039f1101 	orrseq	r1, pc, #1073741824	; 0x40000000
    4bac:	82090000 	andhi	r0, r9, #0
    4bb0:	00c71401 	sbceq	r1, r7, r1, lsl #8
    4bb4:	01010000 	mrseq	r0, (UNDEF: 1)
    4bb8:	00049411 	andeq	r9, r4, r1, lsl r4
    4bbc:	02d80900 	sbcseq	r0, r8, #0, 18
    4bc0:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    4bc4:	12010100 	andne	r0, r1, #0, 2
    4bc8:	03030908 	movweq	r0, #14600	; 0x3908
    4bcc:	00032909 	andeq	r2, r3, r9, lsl #18
    4bd0:	22341300 	eorscs	r1, r4, #0, 6
    4bd4:	07090000 	streq	r0, [r9, -r0]
    4bd8:	008f0703 	addeq	r0, pc, r3, lsl #14
    4bdc:	13000000 	movwne	r0, #0
    4be0:	0000057f 	andeq	r0, r0, pc, ror r5
    4be4:	08030809 	stmdaeq	r3, {r0, r3, fp}
    4be8:	000000cc 	andeq	r0, r0, ip, asr #1
    4bec:	660e0004 	strvs	r0, [lr], -r4
    4bf0:	09000002 	stmdbeq	r0, {r1}
    4bf4:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    4bf8:	14000003 	strne	r0, [r0], #-3
    4bfc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    4c00:	030b0930 	movweq	r0, #47408	; 0xb930
    4c04:	00039908 	andeq	r9, r3, r8, lsl #18
    4c08:	04b11300 	ldrteq	r1, [r1], #768	; 0x300
    4c0c:	14090000 	strne	r0, [r9], #-0
    4c10:	008f0803 	addeq	r0, pc, r3, lsl #16
    4c14:	13000000 	movwne	r0, #0
    4c18:	000002d2 	ldrdeq	r0, [r0], -r2
    4c1c:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    4c20:	0000008f 	andeq	r0, r0, pc, lsl #1
    4c24:	04ac1302 	strteq	r1, [ip], #770	; 0x302
    4c28:	16090000 	strne	r0, [r9], -r0
    4c2c:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    4c30:	13040000 	movwne	r0, #16384	; 0x4000
    4c34:	00000f7f 	andeq	r0, r0, pc, ror pc
    4c38:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    4c3c:	000000cc 	andeq	r0, r0, ip, asr #1
    4c40:	045d1308 	ldrbeq	r1, [sp], #-776	; 0xfffffcf8
    4c44:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    4c48:	03990f03 	orrseq	r0, r9, #3, 30
    4c4c:	130c0000 	movwne	r0, #49152	; 0xc000
    4c50:	000002cd 	andeq	r0, r0, sp, asr #5
    4c54:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    4c58:	000003a9 	andeq	r0, r0, r9, lsr #7
    4c5c:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    4c60:	a9000003 	stmdbge	r0, {r0, r1}
    4c64:	15000003 	strne	r0, [r0, #-3]
    4c68:	00000088 	andeq	r0, r0, r8, lsl #1
    4c6c:	04070003 	streq	r0, [r7], #-3
    4c70:	00000336 	andeq	r0, r0, r6, lsr r3
    4c74:	0004c30e 	andeq	ip, r4, lr, lsl #6
    4c78:	031c0900 	tsteq	ip, #0, 18
    4c7c:	0003361b 	andeq	r3, r3, fp, lsl r6
    4c80:	03951100 	orrseq	r1, r5, #0, 2
    4c84:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    4c88:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    4c8c:	01010000 	mrseq	r0, (UNDEF: 1)
    4c90:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    4c94:	f10b0000 			; <UNDEFINED> instruction: 0xf10b0000
    4c98:	0a000004 	beq	4cb0 <__exidx_end+0x1e34>
    4c9c:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    4ca0:	01010000 	mrseq	r0, (UNDEF: 1)
    4ca4:	00075b0b 	andeq	r5, r7, fp, lsl #22
    4ca8:	1a1e0a00 	bne	7874b0 <__ccfg+0x767508>
    4cac:	000000a0 	andeq	r0, r0, r0, lsr #1
    4cb0:	eb0b0101 	bl	2c50bc <__ccfg+0x2a5114>
    4cb4:	0a000008 	beq	4cdc <__exidx_end+0x1e60>
    4cb8:	00a0241e 	adceq	r2, r0, lr, lsl r4
    4cbc:	01010000 	mrseq	r0, (UNDEF: 1)
    4cc0:	00061a0b 	andeq	r1, r6, fp, lsl #20
    4cc4:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    4cc8:	000003cb 	andeq	r0, r0, fp, asr #7
    4ccc:	6c160101 	ldfvss	f0, [r6], {1}
    4cd0:	01000002 	tsteq	r0, r2
    4cd4:	0305100d 	movweq	r1, #20493	; 0x500d
    4cd8:	00002e74 	andeq	r2, r0, r4, ror lr
    4cdc:	121b0117 	andsne	r0, fp, #-1073741819	; 0xc0000005
    4ce0:	11010000 	mrsne	r0, (UNDEF: 1)
    4ce4:	00000106 	andeq	r0, r0, r6, lsl #2
    4ce8:	00000000 	andeq	r0, r0, r0
    4cec:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cf0:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4cf4:	00747318 	rsbseq	r7, r4, r8, lsl r3
    4cf8:	8f1c1101 	svchi	0x001c1101
    4cfc:	5a000000 	bpl	4d04 <__exidx_end+0x1e88>
    4d00:	1900001f 	stmdbne	r0, {r0, r1, r2, r3, r4}
    4d04:	00001216 	andeq	r1, r0, r6, lsl r2
    4d08:	1b2c1101 	blne	b09114 <__ccfg+0xae916c>
    4d0c:	78000002 	stmdavc	r0, {r1}
    4d10:	1800001f 	stmdane	r0, {r0, r1, r2, r3, r4}
    4d14:	006c6176 	rsbeq	r6, ip, r6, ror r1
    4d18:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    4d1c:	96000000 	strls	r0, [r0], -r0
    4d20:	1a00001f 	bne	4da4 <__exidx_end+0x1f28>
    4d24:	13010070 	movwne	r0, #4208	; 0x1070
    4d28:	0004bb12 	andeq	fp, r4, r2, lsl fp
    4d2c:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    4d30:	8f071401 	svchi	0x00071401
    4d34:	b4000000 	strlt	r0, [r0], #-0
    4d38:	1a00001f 	bne	4dbc <__exidx_end+0x1f40>
    4d3c:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    4d40:	0000a507 	andeq	sl, r0, r7, lsl #10
    4d44:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    4d50:	1c010000 	stcne	0, cr0, [r1], {-0}
    4d54:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    4d60:	1f010000 	svcne	0x00010000
    4d64:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    4d68:	00000000 	andeq	r0, r0, r0
    4d6c:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    4d70:	26010000 	strcs	r0, [r1], -r0
    4d74:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    4d78:	1fc70000 	svcne	0x00c70000
    4d7c:	00000000 	andeq	r0, r0, r0
    4d80:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    4d84:	011f0000 	tsteq	pc, r0
    4d88:	0000122b 	andeq	r1, r0, fp, lsr #4
    4d8c:	00060f01 	andeq	r0, r6, r1, lsl #30
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	01000000 	mrseq	r0, (UNDEF: 0)
    4d98:	083d209c 	ldmdaeq	sp!, {r2, r3, r4, r7, sp}
    4d9c:	5b020000 	blpl	84da4 <__ccfg+0x64dfc>
    4da0:	20030135 	andcs	r0, r3, r5, lsr r1
    4da4:	00000550 	andeq	r0, r0, r0, asr r5
    4da8:	01355002 	teqeq	r5, r2
    4dac:	12092103 	andne	r2, r9, #-1073741824	; 0xc0000000
    4db0:	a4030000 	strge	r0, [r3], #-0
    4db4:	00670101 	rsbeq	r0, r7, r1, lsl #2
    4db8:	22030000 	andcs	r0, r3, #0
    4dbc:	00000168 	andeq	r0, r0, r8, ror #2
    4dc0:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    4dc4:	00000000 	andeq	r0, r0, r0
    4dc8:	0004f600 	andeq	pc, r4, r0, lsl #12
    4dcc:	f8000300 			; <UNDEFINED> instruction: 0xf8000300
    4dd0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4dd4:	00017201 	andeq	r7, r1, r1, lsl #4
    4dd8:	12950c00 	addsne	r0, r5, #0, 24
    4ddc:	00d30000 	sbcseq	r0, r3, r0
    4de0:	0a080000 	beq	204de8 <__ccfg+0x1e4e40>
    4de4:	00000000 	andeq	r0, r0, r0
    4de8:	3b830000 	blcc	fe0c4df0 <_estack+0xde0bfdf0>
    4dec:	01020000 	mrseq	r0, (UNDEF: 2)
    4df0:	0003b706 	andeq	fp, r3, r6, lsl #14
    4df4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4df8:	000003f1 	strdeq	r0, [r0], -r1
    4dfc:	b0050402 	andlt	r0, r5, r2, lsl #8
    4e00:	02000000 	andeq	r0, r0, #0
    4e04:	00ab0508 	adceq	r0, fp, r8, lsl #10
    4e08:	3c030000 	stccc	0, cr0, [r3], {-0}
    4e0c:	03000022 	movweq	r0, #34	; 0x22
    4e10:	004d182e 	subeq	r1, sp, lr, lsr #16
    4e14:	01020000 	mrseq	r0, (UNDEF: 2)
    4e18:	0003b508 	andeq	fp, r3, r8, lsl #10
    4e1c:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    4e20:	31030000 	mrscc	r0, (UNDEF: 3)
    4e24:	00006019 	andeq	r6, r0, r9, lsl r0
    4e28:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4e2c:	00000273 	andeq	r0, r0, r3, ror r2
    4e30:	0017f303 	andseq	pc, r7, r3, lsl #6
    4e34:	19340300 	ldmdbne	r4!, {r8, r9}
    4e38:	00000073 	andeq	r0, r0, r3, ror r0
    4e3c:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    4e40:	02000000 	andeq	r0, r0, #0
    4e44:	00800708 	addeq	r0, r0, r8, lsl #14
    4e48:	04040000 	streq	r0, [r4], #-0
    4e4c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4e50:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4e54:	0000008a 	andeq	r0, r0, sl, lsl #1
    4e58:	00160003 	andseq	r0, r6, r3
    4e5c:	12270400 	eorne	r0, r7, #0, 8
    4e60:	00000054 	andeq	r0, r0, r4, asr r0
    4e64:	00008f05 	andeq	r8, r0, r5, lsl #30
    4e68:	008f0600 	addeq	r0, pc, r0, lsl #12
    4e6c:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    4e70:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4e74:	0041122b 	subeq	r1, r1, fp, lsr #4
    4e78:	a5060000 	strge	r0, [r6, #-0]
    4e7c:	03000000 	movweq	r0, #0
    4e80:	00001651 	andeq	r1, r0, r1, asr r6
    4e84:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    4e88:	05000000 	streq	r0, [r0, #-0]
    4e8c:	000000b6 	strheq	r0, [r0], -r6
    4e90:	0002a603 	andeq	sl, r2, r3, lsl #12
    4e94:	122d0400 	eorne	r0, sp, #0, 8
    4e98:	00000067 	andeq	r0, r0, r7, rrx
    4e9c:	32040807 	andcc	r0, r4, #458752	; 0x70000
    4ea0:	00016109 	andeq	r6, r1, r9, lsl #2
    4ea4:	02c10800 	sbceq	r0, r1, #0, 16
    4ea8:	34040000 	strcc	r0, [r4], #-0
    4eac:	0000a507 	andeq	sl, r0, r7, lsl #10
    4eb0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4eb4:	00a40800 	adceq	r0, r4, r0, lsl #16
    4eb8:	35040000 	strcc	r0, [r4, #-0]
    4ebc:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ec0:	06010100 	streq	r0, [r1], -r0, lsl #2
    4ec4:	028f0800 	addeq	r0, pc, #0, 16
    4ec8:	36040000 	strcc	r0, [r4], -r0
    4ecc:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ed0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4ed4:	042b0800 	strteq	r0, [fp], #-2048	; 0xfffff800
    4ed8:	37040000 	strcc	r0, [r4, -r0]
    4edc:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ee0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4ee4:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
    4ee8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    4eec:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ef0:	00040100 	andeq	r0, r4, r0, lsl #2
    4ef4:	04150900 	ldreq	r0, [r5], #-2304	; 0xfffff700
    4ef8:	3a040000 	bcc	104f00 <__ccfg+0xe4f58>
    4efc:	0000a507 	andeq	sl, r0, r7, lsl #10
    4f00:	4c090100 	stfmis	f0, [r9], {-0}
    4f04:	04000000 	streq	r0, [r0], #-0
    4f08:	00a5033c 	adceq	r0, r5, ip, lsr r3
    4f0c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    4f10:	00000079 	andeq	r0, r0, r9, ror r0
    4f14:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    4f18:	03000000 	movweq	r0, #0
    4f1c:	00016109 	andeq	r6, r1, r9, lsl #2
    4f20:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    4f24:	000000b6 	strheq	r0, [r0], -r6
    4f28:	54030004 	strpl	r0, [r3], #-4
    4f2c:	04000004 	streq	r0, [r0], #-4
    4f30:	00d30341 	sbcseq	r0, r3, r1, asr #6
    4f34:	61060000 	mrsvs	r0, (UNDEF: 6)
    4f38:	0a000001 	beq	4f44 <__exidx_end+0x20c8>
    4f3c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    4f40:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    4f44:	01000001 	tsteq	r0, r1
    4f48:	03210a01 			; <UNDEFINED> instruction: 0x03210a01
    4f4c:	45040000 	strmi	r0, [r4, #-0]
    4f50:	00018e0e 	andeq	r8, r1, lr, lsl #28
    4f54:	0b010100 	bleq	4535c <__ccfg+0x253b4>
    4f58:	00019404 	andeq	r9, r1, r4, lsl #8
    4f5c:	08010200 	stmdaeq	r1, {r9}
    4f60:	000003be 			; <UNDEFINED> instruction: 0x000003be
    4f64:	00019405 	andeq	r9, r1, r5, lsl #8
    4f68:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    4f6c:	45040000 	strmi	r0, [r4, #-0]
    4f70:	00018e1e 	andeq	r8, r1, lr, lsl lr
    4f74:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4f78:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    4f7c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4f80:	0002c809 	andeq	ip, r2, r9, lsl #16
    4f84:	0b900500 	bleq	fe40638c <_estack+0xde40138c>
    4f88:	00000067 	andeq	r0, r0, r7, rrx
    4f8c:	062d0900 	strteq	r0, [sp], -r0, lsl #18
    4f90:	91050000 	mrsls	r0, (UNDEF: 5)
    4f94:	00008f08 	andeq	r8, r0, r8, lsl #30
    4f98:	9c090400 	cfstrsls	mvf0, [r9], {-0}
    4f9c:	05000004 	streq	r0, [r0, #-4]
    4fa0:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    4fa4:	00060000 	andeq	r0, r6, r0
    4fa8:	00043203 	andeq	r3, r4, r3, lsl #4
    4fac:	03930500 	orrseq	r0, r3, #0, 10
    4fb0:	000001ae 	andeq	r0, r0, lr, lsr #3
    4fb4:	0001df0c 	andeq	sp, r1, ip, lsl #30
    4fb8:	0001f600 	andeq	pc, r1, r0, lsl #12
    4fbc:	0a000d00 	beq	83c4 <__exidx_end+0x5548>
    4fc0:	00000042 	andeq	r0, r0, r2, asr #32
    4fc4:	eb0f9905 	bl	3eb3e0 <__ccfg+0x3cb438>
    4fc8:	01000001 	tsteq	r0, r1
    4fcc:	06010701 	streq	r0, [r1], -r1, lsl #14
    4fd0:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    4fd4:	8f080000 	svchi	0x00080000
    4fd8:	06000004 	streq	r0, [r0], -r4
    4fdc:	00a50793 	umlaleq	r0, r5, r3, r7
    4fe0:	07010000 	streq	r0, [r1, -r0]
    4fe4:	3d080001 	stccc	0, cr0, [r8, #-4]
    4fe8:	06000000 	streq	r0, [r0], -r0
    4fec:	00a50394 	umlaleq	r0, r5, r4, r3
    4ff0:	01010000 	mrseq	r0, (UNDEF: 1)
    4ff4:	03000000 	movweq	r0, #0
    4ff8:	00000286 	andeq	r0, r0, r6, lsl #5
    4ffc:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    5000:	05000002 	streq	r0, [r0, #-2]
    5004:	0000022e 	andeq	r0, r0, lr, lsr #4
    5008:	00023a0c 	andeq	r3, r2, ip, lsl #20
    500c:	00024a00 	andeq	r4, r2, r0, lsl #20
    5010:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5014:	0000023f 	andeq	r0, r0, pc, lsr r2
    5018:	0002eb0a 	andeq	lr, r2, sl, lsl #22
    501c:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    5020:	0000024a 	andeq	r0, r0, sl, asr #4
    5024:	9b0c0101 	blls	305430 <__ccfg+0x2e5488>
    5028:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    502c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5030:	025d0500 	subseq	r0, sp, #0, 10
    5034:	a70a0000 	strge	r0, [sl, -r0]
    5038:	07000003 	streq	r0, [r0, -r3]
    503c:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    5040:	01010000 	mrseq	r0, (UNDEF: 1)
    5044:	0001410a 	andeq	r4, r1, sl, lsl #2
    5048:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    504c:	000000b6 	strheq	r0, [r0], -r6
    5050:	a90e0101 	stmdbge	lr, {r0, r8}
    5054:	08000004 	stmdaeq	r0, {r2}
    5058:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    505c:	0b000002 	bleq	506c <__exidx_end+0x21f0>
    5060:	00029c04 	andeq	r9, r2, r4, lsl #24
    5064:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    5068:	10000002 	andne	r0, r0, r2
    506c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5070:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    5074:	02b30000 	adcseq	r0, r3, #0
    5078:	000d0000 	andeq	r0, sp, r0
    507c:	0002a805 	andeq	sl, r2, r5, lsl #16
    5080:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
    5084:	7f080000 	svcvc	0x00080000
    5088:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    508c:	01010000 	mrseq	r0, (UNDEF: 1)
    5090:	00039f11 	andeq	r9, r3, r1, lsl pc
    5094:	01820800 	orreq	r0, r2, r0, lsl #16
    5098:	0000c214 	andeq	ip, r0, r4, lsl r2
    509c:	11010100 	mrsne	r0, (UNDEF: 17)
    50a0:	00000494 	muleq	r0, r4, r4
    50a4:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    50a8:	000000b6 	strheq	r0, [r0], -r6
    50ac:	08120101 	ldmdaeq	r2, {r0, r8}
    50b0:	09030308 	stmdbeq	r3, {r3, r8, r9}
    50b4:	0000030c 	andeq	r0, r0, ip, lsl #6
    50b8:	00223413 	eoreq	r3, r2, r3, lsl r4
    50bc:	03070800 	movweq	r0, #30720	; 0x7800
    50c0:	00008f07 	andeq	r8, r0, r7, lsl #30
    50c4:	7f130000 	svcvc	0x00130000
    50c8:	08000005 	stmdaeq	r0, {r0, r2}
    50cc:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    50d0:	04000000 	streq	r0, [r0], #-0
    50d4:	02660e00 	rsbeq	r0, r6, #0, 28
    50d8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    50dc:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    50e0:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
    50e4:	30000004 	andcc	r0, r0, r4
    50e8:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    50ec:	0000037c 	andeq	r0, r0, ip, ror r3
    50f0:	0004b113 	andeq	fp, r4, r3, lsl r1
    50f4:	03140800 	tsteq	r4, #0, 16
    50f8:	00008f08 	andeq	r8, r0, r8, lsl #30
    50fc:	d2130000 	andsle	r0, r3, #0
    5100:	08000002 	stmdaeq	r0, {r1}
    5104:	8f080315 	svchi	0x00080315
    5108:	02000000 	andeq	r0, r0, #0
    510c:	0004ac13 	andeq	sl, r4, r3, lsl ip
    5110:	03160800 	tsteq	r6, #0, 16
    5114:	0002890b 	andeq	r8, r2, fp, lsl #18
    5118:	7f130400 	svcvc	0x00130400
    511c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5120:	c7090317 	smladgt	r9, r7, r3, r0
    5124:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5128:	00045d13 	andeq	r5, r4, r3, lsl sp
    512c:	03180800 	tsteq	r8, #0, 16
    5130:	00037c0f 	andeq	r7, r3, pc, lsl #24
    5134:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
    5138:	08000002 	stmdaeq	r0, {r1}
    513c:	8c150319 	ldchi	3, cr0, [r5], {25}
    5140:	2c000003 	stccs	0, cr0, [r0], {3}
    5144:	030c0c00 	movweq	r0, #52224	; 0xcc00
    5148:	038c0000 	orreq	r0, ip, #0
    514c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5150:	03000000 	movweq	r0, #0
    5154:	19040b00 	stmdbne	r4, {r8, r9, fp}
    5158:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    515c:	000004c3 	andeq	r0, r0, r3, asr #9
    5160:	1b031c08 	blne	cc188 <__ccfg+0xac1e0>
    5164:	00000319 	andeq	r0, r0, r9, lsl r3
    5168:	00039511 	andeq	r9, r3, r1, lsl r5
    516c:	031e0800 	tsteq	lr, #0, 16
    5170:	0003ae14 	andeq	sl, r3, r4, lsl lr
    5174:	0b010100 	bleq	4557c <__ccfg+0x255d4>
    5178:	00039204 	andeq	r9, r3, r4, lsl #4
    517c:	04f10a00 	ldrbteq	r0, [r1], #2560	; 0xa00
    5180:	1d090000 	stcne	0, cr0, [r9, #-0]
    5184:	00008f13 	andeq	r8, r0, r3, lsl pc
    5188:	0a010100 	beq	45590 <__ccfg+0x255e8>
    518c:	0000075b 	andeq	r0, r0, fp, asr r7
    5190:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    5194:	01000000 	mrseq	r0, (UNDEF: 0)
    5198:	08eb0a01 	stmiaeq	fp!, {r0, r9, fp}^
    519c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    51a0:	0000a024 	andeq	sl, r0, r4, lsr #32
    51a4:	0a010100 	beq	455ac <__ccfg+0x25604>
    51a8:	0000061a 	andeq	r0, r0, sl, lsl r6
    51ac:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    51b0:	01000003 	tsteq	r0, r3
    51b4:	12841601 	addne	r1, r4, #1048576	; 0x100000
    51b8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    51bc:	0002960f 	andeq	r9, r2, pc, lsl #12
    51c0:	00030500 	andeq	r0, r3, r0, lsl #10
    51c4:	16000000 	strne	r0, [r0], -r0
    51c8:	000012d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    51cc:	8f0d0901 	svchi	0x000d0901
    51d0:	05000000 	streq	r0, [r0, #-0]
    51d4:	00000003 	andeq	r0, r0, r3
    51d8:	026d1700 	rsbeq	r1, sp, #0, 14
    51dc:	0a010000 	beq	451e4 <__ccfg+0x2523c>
    51e0:	7803050c 	stmdavc	r3, {r2, r3, r8, sl}
    51e4:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    51e8:	0012e601 	andseq	lr, r2, r1, lsl #12
    51ec:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    51f0:	00000001 	andeq	r0, r0, r1
    51f4:	00000000 	andeq	r0, r0, r0
    51f8:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    51fc:	19000004 	stmdbne	r0, {r2}
    5200:	00746361 	rsbseq	r6, r4, r1, ror #6
    5204:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    5208:	da000002 	ble	5218 <__exidx_end+0x239c>
    520c:	0000001f 	andeq	r0, r0, pc, lsl r0
    5210:	12d90118 	sbcsne	r0, r9, #24, 2
    5214:	1c010000 	stcne	0, cr0, [r1], {-0}
    5218:	00000101 	andeq	r0, r0, r1, lsl #2
    521c:	00000000 	andeq	r0, r0, r0
    5220:	9c010000 	stcls	0, cr0, [r1], {-0}
    5224:	000004de 	ldrdeq	r0, [r0], -lr
    5228:	0000cb1a 	andeq	ip, r0, sl, lsl fp
    522c:	011c0100 	tsteq	ip, r0, lsl #2
    5230:	0000008f 	andeq	r0, r0, pc, lsl #1
    5234:	00002016 	andeq	r2, r0, r6, lsl r0
    5238:	00127f1b 	andseq	r7, r2, fp, lsl pc
    523c:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5240:	00000000 	andeq	r0, r0, r0
    5244:	00128c1b 	andseq	r8, r2, fp, lsl ip
    5248:	01300100 	teqeq	r0, r0, lsl #2
    524c:	00000000 	andeq	r0, r0, r0
    5250:	0013e31b 	andseq	lr, r3, fp, lsl r3
    5254:	01370100 	teqeq	r7, r0, lsl #2
    5258:	00000000 	andeq	r0, r0, r0
    525c:	0004de1c 	andeq	sp, r4, ip, lsl lr
    5260:	00000000 	andeq	r0, r0, r0
    5264:	0009a800 	andeq	sl, r9, r0, lsl #16
    5268:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    526c:	000004ad 	andeq	r0, r0, sp, lsr #9
    5270:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5274:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    5278:	00000004 	andeq	r0, r0, r4
    527c:	d0000000 	andle	r0, r0, r0
    5280:	01000009 	tsteq	r0, r9
    5284:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    5288:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    528c:	00000004 	andeq	r0, r0, r4
    5290:	0004de1e 	andeq	sp, r4, lr, lsl lr
    5294:	00000000 	andeq	r0, r0, r0
    5298:	0009e800 	andeq	lr, r9, r0, lsl #16
    529c:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    52a0:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    52a4:	1f000000 	svcne	0x00000000
    52a8:	00001209 	andeq	r1, r0, r9, lsl #4
    52ac:	0101a402 	tsteq	r1, r2, lsl #8
    52b0:	00000067 	andeq	r0, r0, r7, rrx
    52b4:	01682003 	cmneq	r8, r3
    52b8:	a4020000 	strge	r0, [r2], #-0
    52bc:	00006718 	andeq	r6, r0, r8, lsl r7
    52c0:	a7000000 	strge	r0, [r0, -r0]
    52c4:	0300000a 	movweq	r0, #10
    52c8:	0015c300 	andseq	ip, r5, r0, lsl #6
    52cc:	72010400 	andvc	r0, r1, #0, 8
    52d0:	0c000001 	stceq	0, cr0, [r0], {1}
    52d4:	00001371 	andeq	r1, r0, r1, ror r3
    52d8:	000000d3 	ldrdeq	r0, [r0], -r3
    52dc:	00000ba8 	andeq	r0, r0, r8, lsr #23
    52e0:	00000000 	andeq	r0, r0, r0
    52e4:	00003ec3 	andeq	r3, r0, r3, asr #29
    52e8:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    52ec:	02000003 	andeq	r0, r0, #3
    52f0:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    52f4:	04020000 	streq	r0, [r2], #-0
    52f8:	0000b005 	andeq	fp, r0, r5
    52fc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5300:	000000ab 	andeq	r0, r0, fp, lsr #1
    5304:	00223c03 	eoreq	r3, r2, r3, lsl #24
    5308:	182e0400 	stmdane	lr!, {sl}
    530c:	0000004d 	andeq	r0, r0, sp, asr #32
    5310:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    5314:	03000003 	movweq	r0, #3
    5318:	0000212a 	andeq	r2, r0, sl, lsr #2
    531c:	60193104 	andsvs	r3, r9, r4, lsl #2
    5320:	02000000 	andeq	r0, r0, #0
    5324:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    5328:	f3030000 	vhadd.u8	d0, d3, d0
    532c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    5330:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5334:	04020000 	streq	r0, [r2], #-0
    5338:	00008507 	andeq	r8, r0, r7, lsl #10
    533c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5340:	00000080 	andeq	r0, r0, r0, lsl #1
    5344:	69050404 	stmdbvs	r5, {r2, sl}
    5348:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    534c:	008a0704 	addeq	r0, sl, r4, lsl #14
    5350:	1c030000 	stcne	0, cr0, [r3], {-0}
    5354:	05000004 	streq	r0, [r0, #-4]
    5358:	00411226 	subeq	r1, r1, r6, lsr #4
    535c:	00030000 	andeq	r0, r3, r0
    5360:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    5364:	00541227 	subseq	r1, r4, r7, lsr #4
    5368:	9b050000 	blls	145370 <__ccfg+0x1253c8>
    536c:	06000000 	streq	r0, [r0], -r0
    5370:	0000009b 	muleq	r0, fp, r0
    5374:	0013f803 	andseq	pc, r3, r3, lsl #16
    5378:	122b0500 	eorne	r0, fp, #0, 10
    537c:	00000041 	andeq	r0, r0, r1, asr #32
    5380:	0000b106 	andeq	fp, r0, r6, lsl #2
    5384:	00b10500 	adcseq	r0, r1, r0, lsl #10
    5388:	51030000 	mrspl	r0, (UNDEF: 3)
    538c:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    5390:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5394:	c7050000 	strgt	r0, [r5, -r0]
    5398:	03000000 	movweq	r0, #0
    539c:	000002a6 	andeq	r0, r0, r6, lsr #5
    53a0:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    53a4:	07000000 	streq	r0, [r0, -r0]
    53a8:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    53ac:	00000172 	andeq	r0, r0, r2, ror r1
    53b0:	0002c108 	andeq	ip, r2, r8, lsl #2
    53b4:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    53b8:	000000b1 	strheq	r0, [r0], -r1
    53bc:	00070101 	andeq	r0, r7, r1, lsl #2
    53c0:	0000a408 	andeq	sl, r0, r8, lsl #8
    53c4:	03350500 	teqeq	r5, #0, 10
    53c8:	000000b1 	strheq	r0, [r0], -r1
    53cc:	00060101 	andeq	r0, r6, r1, lsl #2
    53d0:	00028f08 	andeq	r8, r2, r8, lsl #30
    53d4:	03360500 	teqeq	r6, #0, 10
    53d8:	000000b1 	strheq	r0, [r0], -r1
    53dc:	00050101 	andeq	r0, r5, r1, lsl #2
    53e0:	00042b08 	andeq	r2, r4, r8, lsl #22
    53e4:	03370500 	teqeq	r7, #0, 10
    53e8:	000000b1 	strheq	r0, [r0], -r1
    53ec:	00040101 	andeq	r0, r4, r1, lsl #2
    53f0:	00042408 	andeq	r2, r4, r8, lsl #8
    53f4:	03380500 	teqeq	r8, #0, 10
    53f8:	000000b1 	strheq	r0, [r0], -r1
    53fc:	00000401 	andeq	r0, r0, r1, lsl #8
    5400:	00041509 	andeq	r1, r4, r9, lsl #10
    5404:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    5408:	000000b1 	strheq	r0, [r0], -r1
    540c:	004c0901 	subeq	r0, ip, r1, lsl #18
    5410:	3c050000 	stccc	0, cr0, [r5], {-0}
    5414:	0000b103 	andeq	fp, r0, r3, lsl #2
    5418:	79090200 	stmdbvc	r9, {r9}
    541c:	05000000 	streq	r0, [r0, #-0]
    5420:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    5424:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    5428:	00000161 	andeq	r0, r0, r1, ror #2
    542c:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    5430:	04000000 	streq	r0, [r0], #-0
    5434:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    5438:	41050000 	mrsmi	r0, (UNDEF: 5)
    543c:	0000e403 	andeq	lr, r0, r3, lsl #8
    5440:	01720600 	cmneq	r2, r0, lsl #12
    5444:	b50a0000 	strlt	r0, [sl, #-0]
    5448:	05000002 	streq	r0, [r0, #-2]
    544c:	017e1a43 	cmneq	lr, r3, asr #20
    5450:	01010000 	mrseq	r0, (UNDEF: 1)
    5454:	0003210a 	andeq	r2, r3, sl, lsl #2
    5458:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    545c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5460:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5464:	000001a5 	andeq	r0, r0, r5, lsr #3
    5468:	be080102 	adflte	f0, f0, f2
    546c:	05000003 	streq	r0, [r0, #-3]
    5470:	000001a5 	andeq	r0, r0, r5, lsr #3
    5474:	00032f0a 	andeq	r2, r3, sl, lsl #30
    5478:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    547c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5480:	08070101 	stmdaeq	r7, {r0, r8}
    5484:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    5488:	09000001 	stmdbeq	r0, {r0}
    548c:	000002c8 	andeq	r0, r0, r8, asr #5
    5490:	670b9006 	strvs	r9, [fp, -r6]
    5494:	00000000 	andeq	r0, r0, r0
    5498:	00062d09 	andeq	r2, r6, r9, lsl #26
    549c:	08910600 	ldmeq	r1, {r9, sl}
    54a0:	0000009b 	muleq	r0, fp, r0
    54a4:	049c0904 	ldreq	r0, [ip], #2308	; 0x904
    54a8:	92060000 	andls	r0, r6, #0
    54ac:	0000bd10 	andeq	fp, r0, r0, lsl sp
    54b0:	03000600 	movweq	r0, #1536	; 0x600
    54b4:	00000432 	andeq	r0, r0, r2, lsr r4
    54b8:	bf039306 	svclt	0x00039306
    54bc:	0c000001 	stceq	0, cr0, [r0], {1}
    54c0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    54c4:	00000207 	andeq	r0, r0, r7, lsl #4
    54c8:	420a000d 	andmi	r0, sl, #13
    54cc:	06000000 	streq	r0, [r0], -r0
    54d0:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    54d4:	01010000 	mrseq	r0, (UNDEF: 1)
    54d8:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    54dc:	01070000 	mrseq	r0, (UNDEF: 7)
    54e0:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    54e4:	08000002 	stmdaeq	r0, {r1}
    54e8:	0000048f 	andeq	r0, r0, pc, lsl #9
    54ec:	b1079307 	tstlt	r7, r7, lsl #6
    54f0:	01000000 	mrseq	r0, (UNDEF: 0)
    54f4:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    54f8:	0000003d 	andeq	r0, r0, sp, lsr r0
    54fc:	b1039407 	tstlt	r3, r7, lsl #8
    5500:	01000000 	mrseq	r0, (UNDEF: 0)
    5504:	00000001 	andeq	r0, r0, r1
    5508:	00028603 	andeq	r8, r2, r3, lsl #12
    550c:	03960700 	orrseq	r0, r6, #0, 14
    5510:	0000021b 	andeq	r0, r0, fp, lsl r2
    5514:	00024505 	andeq	r4, r2, r5, lsl #10
    5518:	02510c00 	subseq	r0, r1, #0, 24
    551c:	02610000 	rsbeq	r0, r1, #0
    5520:	000d0000 	andeq	r0, sp, r0
    5524:	00025605 	andeq	r5, r2, r5, lsl #12
    5528:	02eb0a00 	rsceq	r0, fp, #0, 20
    552c:	9c070000 	stcls	0, cr0, [r7], {-0}
    5530:	00026117 	andeq	r6, r2, r7, lsl r1
    5534:	0c010100 	stfeqs	f0, [r1], {-0}
    5538:	000000a7 	andeq	r0, r0, r7, lsr #1
    553c:	0000027f 	andeq	r0, r0, pc, ror r2
    5540:	7405000d 	strvc	r0, [r5], #-13
    5544:	0a000002 	beq	5554 <__exidx_end+0x26d8>
    5548:	000003a7 	andeq	r0, r0, r7, lsr #7
    554c:	7f130608 	svcvc	0x00130608
    5550:	01000002 	tsteq	r0, r2
    5554:	01410a01 	cmpeq	r1, r1, lsl #20
    5558:	c3060000 	movwgt	r0, #24576	; 0x6000
    555c:	0000c70e 	andeq	ip, r0, lr, lsl #14
    5560:	0e010100 	adfeqs	f0, f1, f0
    5564:	000004a9 	andeq	r0, r0, r9, lsr #9
    5568:	10016e09 	andne	r6, r1, r9, lsl #28
    556c:	000002ad 	andeq	r0, r0, sp, lsr #5
    5570:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    5574:	010f0000 	mrseq	r0, CPSR
    5578:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    557c:	00009b10 	andeq	r9, r0, r0, lsl fp
    5580:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    5584:	ca000001 	bgt	5590 <__exidx_end+0x2714>
    5588:	0d000002 	stceq	0, cr0, [r0, #-8]
    558c:	02bf0500 	adcseq	r0, pc, #0, 10
    5590:	64110000 	ldrvs	r0, [r1], #-0
    5594:	09000004 	stmdbeq	r0, {r2}
    5598:	ca16017f 	bgt	585b9c <__ccfg+0x565bf4>
    559c:	01000002 	tsteq	r0, r2
    55a0:	039f1101 	orrseq	r1, pc, #1073741824	; 0x40000000
    55a4:	82090000 	andhi	r0, r9, #0
    55a8:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    55ac:	01010000 	mrseq	r0, (UNDEF: 1)
    55b0:	00049411 	andeq	r9, r4, r1, lsl r4
    55b4:	02d80900 	sbcseq	r0, r8, #0, 18
    55b8:	0000c70e 	andeq	ip, r0, lr, lsl #14
    55bc:	12010100 	andne	r0, r1, #0, 2
    55c0:	03030908 	movweq	r0, #14600	; 0x3908
    55c4:	00032309 	andeq	r2, r3, r9, lsl #6
    55c8:	22341300 	eorscs	r1, r4, #0, 6
    55cc:	07090000 	streq	r0, [r9, -r0]
    55d0:	009b0703 	addseq	r0, fp, r3, lsl #14
    55d4:	13000000 	movwne	r0, #0
    55d8:	0000057f 	andeq	r0, r0, pc, ror r5
    55dc:	08030809 	stmdaeq	r3, {r0, r3, fp}
    55e0:	000000d8 	ldrdeq	r0, [r0], -r8
    55e4:	660e0004 	strvs	r0, [lr], -r4
    55e8:	09000002 	stmdbeq	r0, {r1}
    55ec:	fc030309 	stc2	3, cr0, [r3], {9}
    55f0:	14000002 	strne	r0, [r0], #-2
    55f4:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    55f8:	030b0930 	movweq	r0, #47408	; 0xb930
    55fc:	00039308 	andeq	r9, r3, r8, lsl #6
    5600:	04b11300 	ldrteq	r1, [r1], #768	; 0x300
    5604:	14090000 	strne	r0, [r9], #-0
    5608:	009b0803 	addseq	r0, fp, r3, lsl #16
    560c:	13000000 	movwne	r0, #0
    5610:	000002d2 	ldrdeq	r0, [r0], -r2
    5614:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    5618:	0000009b 	muleq	r0, fp, r0
    561c:	04ac1302 	strteq	r1, [ip], #770	; 0x302
    5620:	16090000 	strne	r0, [r9], -r0
    5624:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    5628:	13040000 	movwne	r0, #16384	; 0x4000
    562c:	00000f7f 	andeq	r0, r0, pc, ror pc
    5630:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    5634:	000000d8 	ldrdeq	r0, [r0], -r8
    5638:	045d1308 	ldrbeq	r1, [sp], #-776	; 0xfffffcf8
    563c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    5640:	03930f03 	orrseq	r0, r3, #3, 30
    5644:	130c0000 	movwne	r0, #49152	; 0xc000
    5648:	000002cd 	andeq	r0, r0, sp, asr #5
    564c:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    5650:	000003a3 	andeq	r0, r0, r3, lsr #7
    5654:	230c002c 	movwcs	r0, #49196	; 0xc02c
    5658:	a3000003 	movwge	r0, #3
    565c:	15000003 	strne	r0, [r0, #-3]
    5660:	00000088 	andeq	r0, r0, r8, lsl #1
    5664:	040b0003 	streq	r0, [fp], #-3
    5668:	00000330 	andeq	r0, r0, r0, lsr r3
    566c:	0004c30e 	andeq	ip, r4, lr, lsl #6
    5670:	031c0900 	tsteq	ip, #0, 18
    5674:	0003301b 	andeq	r3, r3, fp, lsl r0
    5678:	03951100 	orrseq	r1, r5, #0, 2
    567c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5680:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    5684:	01010000 	mrseq	r0, (UNDEF: 1)
    5688:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    568c:	f10a0000 	cpsie	,#0
    5690:	0a000004 	beq	56a8 <__exidx_end+0x282c>
    5694:	009b131d 	addseq	r1, fp, sp, lsl r3
    5698:	01010000 	mrseq	r0, (UNDEF: 1)
    569c:	00075b0a 	andeq	r5, r7, sl, lsl #22
    56a0:	1a1e0a00 	bne	787ea8 <__ccfg+0x767f00>
    56a4:	000000ac 	andeq	r0, r0, ip, lsr #1
    56a8:	eb0a0101 	bl	285ab4 <__ccfg+0x265b0c>
    56ac:	0a000008 	beq	56d4 <__exidx_end+0x2858>
    56b0:	00ac241e 	adceq	r2, ip, lr, lsl r4
    56b4:	01010000 	mrseq	r0, (UNDEF: 1)
    56b8:	00061a0a 	andeq	r1, r6, sl, lsl #20
    56bc:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    56c0:	000003c5 	andeq	r0, r0, r5, asr #7
    56c4:	9a160101 	bls	585ad0 <__ccfg+0x565b28>
    56c8:	01000003 	tsteq	r0, r3
    56cc:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    56d0:	03050000 	movweq	r0, #20480	; 0x5000
    56d4:	00000000 	andeq	r0, r0, r0
    56d8:	00134916 	andseq	r4, r3, r6, lsl r9
    56dc:	150f0100 	strne	r0, [pc, #-256]	; 55e4 <__exidx_end+0x2768>
    56e0:	000000c7 	andeq	r0, r0, r7, asr #1
    56e4:	00000305 	andeq	r0, r0, r5, lsl #6
    56e8:	cf160000 	svcgt	0x00160000
    56ec:	01000013 	tsteq	r0, r3, lsl r0
    56f0:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    56f4:	03050000 	movweq	r0, #20480	; 0x5000
    56f8:	00000000 	andeq	r0, r0, r0
    56fc:	00132f16 	andseq	r2, r3, r6, lsl pc
    5700:	0d120100 	ldfeqs	f0, [r2, #-0]
    5704:	000000b1 	strheq	r0, [r0], -r1
    5708:	00640305 	rsbeq	r0, r4, r5, lsl #6
    570c:	c3162000 	tstgt	r6, #0
    5710:	01000013 	tsteq	r0, r3, lsl r0
    5714:	00b10313 	adcseq	r0, r1, r3, lsl r3
    5718:	03050000 	movweq	r0, #20480	; 0x5000
    571c:	20000065 	andcs	r0, r0, r5, rrx
    5720:	000c2516 	andeq	r2, ip, r6, lsl r5
    5724:	0d150100 	ldfeqs	f0, [r5, #-0]
    5728:	0000009b 	muleq	r0, fp, r0
    572c:	00000305 	andeq	r0, r0, r5, lsl #6
    5730:	01170000 	tsteq	r7, r0
    5734:	000012fb 	strdeq	r1, [r0], -fp
    5738:	00061303 	andeq	r1, r6, r3, lsl #6
    573c:	00000000 	andeq	r0, r0, r0
    5740:	01000000 	mrseq	r0, (UNDEF: 0)
    5744:	d401189c 	strle	r1, [r1], #-2204	; 0xfffff764
    5748:	03000013 	movweq	r0, #19
    574c:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    5758:	01000000 	mrseq	r0, (UNDEF: 0)
    575c:	0004bc9c 	muleq	r4, ip, ip
    5760:	72651900 	rsbvc	r1, r5, #0, 18
    5764:	19080300 	stmdbne	r8, {r8, r9}
    5768:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    576c:	0000204a 	andeq	r2, r0, sl, asr #32
    5770:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    5774:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    5778:	000004c2 	andeq	r0, r0, r2, asr #9
    577c:	0b005101 	bleq	19b88 <__exidx_end+0x16d0c>
    5780:	00008f04 	andeq	r8, r0, r4, lsl #30
    5784:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    5788:	1b000000 	blne	5790 <__exidx_end+0x2914>
    578c:	00135701 	andseq	r5, r3, r1, lsl #14
    5790:	01600100 	cmneq	r0, r0, lsl #2
    5794:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    57a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    57a4:	000004f6 	strdeq	r0, [r0], -r6
    57a8:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    57ac:	14016001 	strne	r6, [r1], #-1
    57b0:	0000009b 	muleq	r0, fp, r0
    57b4:	0000205d 	andeq	r2, r0, sp, asr r0
    57b8:	4e011d00 	cdpmi	13, 0, cr1, cr1, cr0, {0}
    57bc:	01000013 	tsteq	r0, r3, lsl r0
    57c0:	0006015b 	andeq	r0, r6, fp, asr r1
    57c4:	00000000 	andeq	r0, r0, r0
    57c8:	01000000 	mrseq	r0, (UNDEF: 0)
    57cc:	26011b9c 			; <UNDEFINED> instruction: 0x26011b9c
    57d0:	01000013 	tsteq	r0, r3, lsl r0
    57d4:	01060121 	tsteq	r6, r1, lsr #2
    57d8:	0000009b 	muleq	r0, fp, r0
	...
    57e4:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    57e8:	731c0000 	tstvc	ip, #0
    57ec:	21010074 	tstcs	r1, r4, ror r0
    57f0:	009b1501 	addseq	r1, fp, r1, lsl #10
    57f4:	20700000 	rsbscs	r0, r0, r0
    57f8:	611c0000 	tstvs	ip, r0
    57fc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5800:	0000c71f 	andeq	ip, r0, pc, lsl r7
    5804:	00208300 	eoreq	r8, r0, r0, lsl #6
    5808:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    580c:	2e012101 	adfcss	f2, f1, f1
    5810:	00000215 	andeq	r0, r0, r5, lsl r2
    5814:	000020a1 	andeq	r2, r0, r1, lsr #1
    5818:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    581c:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5820:	00009b36 	andeq	r9, r0, r6, lsr fp
    5824:	0020b400 	eoreq	fp, r0, r0, lsl #8
    5828:	6c621e00 	stclvs	14, cr1, [r2], #-0
    582c:	01230100 			; <UNDEFINED> instruction: 0x01230100
    5830:	00009b07 	andeq	r9, r0, r7, lsl #22
    5834:	0020c700 	eoreq	ip, r0, r0, lsl #14
    5838:	133d1f00 	teqne	sp, #0, 30
    583c:	32010000 	andcc	r0, r1, #0
    5840:	00000101 	andeq	r0, r0, r1, lsl #2
    5844:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    5848:	00000009 	andeq	r0, r0, r9
    584c:	90000000 	andls	r0, r0, r0
    5850:	0100000b 	tsteq	r0, fp
    5854:	a3030143 	movwge	r0, #12611	; 0x3143
    5858:	21000005 	tstcs	r0, r5
    585c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5860:	000a0521 	andeq	r0, sl, r1, lsr #10
    5864:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    5868:	00000009 	andeq	r0, r0, r9
    586c:	00000000 	andeq	r0, r0, r0
    5870:	01000000 	mrseq	r0, (UNDEF: 0)
    5874:	21030150 	tstcs	r3, r0, asr r1
    5878:	00000a12 	andeq	r0, r0, r2, lsl sl
    587c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5880:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5884:	00131d01 	andseq	r1, r3, r1, lsl #26
    5888:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    588c:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    5898:	819c0100 	orrshi	r0, ip, r0, lsl #2
    589c:	19000006 	stmdbne	r0, {r1, r2}
    58a0:	01007473 	tsteq	r0, r3, ror r4
    58a4:	009b15cb 	addseq	r1, fp, fp, asr #11
    58a8:	20f00000 	rscscs	r0, r0, r0
    58ac:	5f230000 	svcpl	0x00230000
    58b0:	01000013 	tsteq	r0, r3, lsl r0
    58b4:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    58b8:	210e0000 	mrscs	r0, (UNDEF: 14)
    58bc:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
    58c0:	01000013 	tsteq	r0, r3, lsl r0
    58c4:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    58c8:	21370000 	teqcs	r7, r0
    58cc:	f5240000 			; <UNDEFINED> instruction: 0xf5240000
    58d0:	01000012 	tsteq	r0, r2, lsl r0
    58d4:	000001e6 	andeq	r0, r0, r6, ror #3
    58d8:	e2240000 	eor	r0, r4, #0
    58dc:	01000013 	tsteq	r0, r3, lsl r0
    58e0:	000001ea 	andeq	r0, r0, sl, ror #3
    58e4:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    58e8:	00000008 	andeq	r0, r0, r8
    58ec:	60000000 	andvs	r0, r0, r0
    58f0:	0100000b 	tsteq	r0, fp
    58f4:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    58f8:	55000008 	strpl	r0, [r0, #-8]
    58fc:	26000021 	strcs	r0, [r0], -r1, lsr #32
    5900:	0000086c 	andeq	r0, r0, ip, ror #16
    5904:	00002168 	andeq	r2, r0, r8, ror #2
    5908:	0009f627 	andeq	pc, r9, r7, lsr #12
    590c:	00000000 	andeq	r0, r0, r0
    5910:	000b7800 	andeq	r7, fp, r0, lsl #16
    5914:	02430100 	subeq	r0, r3, #0, 2
    5918:	00000664 	andeq	r0, r0, r4, ror #12
    591c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5920:	0a052100 	beq	14dd28 <__ccfg+0x12dd80>
    5924:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5928:	000009f6 	strdeq	r0, [r0], -r6
	...
    5934:	21024801 	tstcs	r2, r1, lsl #16
    5938:	00000a12 	andeq	r0, r0, r2, lsl sl
    593c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5940:	00000000 	andeq	r0, r0, r0
    5944:	13640118 	cmnne	r4, #24, 2
    5948:	b0010000 	andlt	r0, r1, r0
    594c:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5958:	9c010000 	stcls	0, cr0, [r1], {-0}
    595c:	00000704 	andeq	r0, r0, r4, lsl #14
    5960:	01006119 	tsteq	r0, r9, lsl r1
    5964:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    5968:	217b0000 	cmncs	fp, r0
    596c:	73190000 	tstvc	r9, #0
    5970:	1eb00100 	frdnes	f0, f0, f0
    5974:	00000704 	andeq	r0, r0, r4, lsl #14
    5978:	000021a4 	andeq	r2, r0, r4, lsr #3
    597c:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    5980:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    5984:	0000009b 	muleq	r0, fp, r0
    5988:	000021d8 	ldrdeq	r2, [r0], -r8
    598c:	0009f627 	andeq	pc, r9, r7, lsr #12
    5990:	00000000 	andeq	r0, r0, r0
    5994:	000b4800 	andeq	r4, fp, r0, lsl #16
    5998:	02ba0100 	adcseq	r0, sl, #0, 2
    599c:	000006e8 	andeq	r0, r0, r8, ror #13
    59a0:	000a1221 	andeq	r1, sl, r1, lsr #4
    59a4:	0a052100 	beq	14ddac <__ccfg+0x12de04>
    59a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    59ac:	000009f6 	strdeq	r0, [r0], -r6
	...
    59b8:	2102c401 	tstcs	r2, r1, lsl #8
    59bc:	00000a12 	andeq	r0, r0, r2, lsl sl
    59c0:	000a0521 	andeq	r0, sl, r1, lsr #10
    59c4:	0b000000 	bleq	59cc <__exidx_end+0x2b50>
    59c8:	0000b104 	andeq	fp, r0, r4, lsl #2
    59cc:	14011700 	strne	r1, [r1], #-1792	; 0xfffff900
    59d0:	01000013 	tsteq	r0, r3, lsl r0
    59d4:	178406a8 	strne	r0, [r4, r8, lsr #13]
    59d8:	17980000 	ldrne	r0, [r8, r0]
    59dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    59e0:	13350129 	teqne	r5, #1073741834	; 0x4000000a
    59e4:	93010000 	movwls	r0, #4096	; 0x1000
    59e8:	00009b06 	andeq	r9, r0, r6, lsl #22
    59ec:	00177000 	andseq	r7, r7, r0
    59f0:	00178400 	andseq	r8, r7, r0, lsl #8
    59f4:	2a9c0100 	bcs	fe705dfc <_estack+0xde700dfc>
    59f8:	000013dc 	ldrdeq	r1, [r0], -ip
    59fc:	0c0d8201 	sfmeq	f0, 1, [sp], {1}
    5a00:	4c000017 	stcmi	0, cr0, [r0], {23}
    5a04:	01000017 	tsteq	r0, r7, lsl r0
    5a08:	0007969c 	muleq	r7, ip, r6
    5a0c:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    5a10:	17260000 	strne	r0, [r6, -r0]!
    5a14:	173a0000 	ldrne	r0, [sl, -r0]!
    5a18:	8a010000 	bhi	45a20 <__ccfg+0x25a78>
    5a1c:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    5a20:	17260000 	strne	r0, [r6, -r0]!
    5a24:	0b180000 	bleq	605a2c <__ccfg+0x5e5a84>
    5a28:	72010000 	andvc	r0, r1, #0
    5a2c:	00077902 	andeq	r7, r7, r2, lsl #18
    5a30:	0a122100 	beq	48de38 <__ccfg+0x46de90>
    5a34:	05210000 	streq	r0, [r1, #-0]!
    5a38:	0000000a 	andeq	r0, r0, sl
    5a3c:	0009f625 	andeq	pc, r9, r5, lsr #12
    5a40:	00173200 	andseq	r3, r7, r0, lsl #4
    5a44:	000b3000 	andeq	r3, fp, r0
    5a48:	02740100 	rsbseq	r0, r4, #0, 2
    5a4c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a50:	0a052100 	beq	14de58 <__ccfg+0x12deb0>
    5a54:	00000000 	andeq	r0, r0, r0
    5a58:	13bc2b00 			; <UNDEFINED> instruction: 0x13bc2b00
    5a5c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    5a60:	c92b010d 	stmdbgt	fp!, {r0, r2, r3, r8}
    5a64:	01000013 	tsteq	r0, r3, lsl r0
    5a68:	2b010d6d 	blcs	49024 <__ccfg+0x2907c>
    5a6c:	000013e8 	andeq	r1, r0, r8, ror #7
    5a70:	010d6601 	tsteq	sp, r1, lsl #12
    5a74:	0013ee2c 	andseq	lr, r3, ip, lsr #28
    5a78:	0d580100 	ldfeqe	f0, [r8, #-0]
    5a7c:	0016b801 	andseq	fp, r6, r1, lsl #16
    5a80:	00170c00 	andseq	r0, r7, r0, lsl #24
    5a84:	429c0100 	addsmi	r0, ip, #0, 2
    5a88:	19000008 	stmdbne	r0, {r3}
    5a8c:	01007473 	tsteq	r0, r3, ror r4
    5a90:	009b1958 	addseq	r1, fp, r8, asr r9
    5a94:	21f60000 	mvnscs	r0, r0
    5a98:	64190000 	ldrvs	r0, [r9], #-0
    5a9c:	01006c65 	tsteq	r0, r5, ror #24
    5aa0:	009b2258 	addseq	r2, fp, r8, asr r2
    5aa4:	22090000 	andcs	r0, r9, #0
    5aa8:	42250000 	eormi	r0, r5, #0
    5aac:	c0000008 	andgt	r0, r0, r8
    5ab0:	d0000016 	andle	r0, r0, r6, lsl r0
    5ab4:	0100000a 	tsteq	r0, sl
    5ab8:	d02d135c 	eorle	r1, sp, ip, asr r3
    5abc:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    5ac0:	00000853 	andeq	r0, r0, r3, asr r8
    5ac4:	0000221c 	andeq	r2, r0, ip, lsl r2
    5ac8:	0009f627 	andeq	pc, r9, r7, lsr #12
    5acc:	0016c000 	andseq	ip, r6, r0
    5ad0:	000af000 	andeq	pc, sl, r0
    5ad4:	02510100 	subseq	r0, r1, #0, 2
    5ad8:	00000824 	andeq	r0, r0, r4, lsr #16
    5adc:	000a1221 	andeq	r1, sl, r1, lsr #4
    5ae0:	0a052100 	beq	14dee8 <__ccfg+0x12df40>
    5ae4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5ae8:	000009f6 	strdeq	r0, [r0], -r6
    5aec:	000016da 	ldrdeq	r1, [r0], -sl
    5af0:	000016de 	ldrdeq	r1, [r0], -lr
    5af4:	21025401 	tstcs	r2, r1, lsl #8
    5af8:	00000a12 	andeq	r0, r0, r2, lsl sl
    5afc:	000a0521 	andeq	r0, sl, r1, lsr #10
    5b00:	00000000 	andeq	r0, r0, r0
    5b04:	136c2f00 	cmnne	ip, #0, 30
    5b08:	4b010000 	blmi	45b10 <__ccfg+0x25b68>
    5b0c:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5b10:	085e0100 	ldmdaeq	lr, {r8}^
    5b14:	72300000 	eorsvc	r0, r0, #0
    5b18:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    5b1c:	000000b1 	strheq	r0, [r0], -r1
    5b20:	13433100 	movtne	r3, #12544	; 0x3100
    5b24:	41010000 	mrsmi	r0, (UNDEF: 1)
    5b28:	8301010d 	movwhi	r0, #4365	; 0x110d
    5b2c:	32000008 	andcc	r0, r0, #8
    5b30:	00646d63 	rsbeq	r6, r4, r3, ror #26
    5b34:	b1194101 	tstlt	r9, r1, lsl #2
    5b38:	32000000 	andcc	r0, r0, #0
    5b3c:	41010061 	tstmi	r1, r1, rrx
    5b40:	0000c724 	andeq	ip, r0, r4, lsr #14
    5b44:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
    5b48:	01000013 	tsteq	r0, r3, lsl r0
    5b4c:	a0010d3a 	andge	r0, r1, sl, lsr sp
    5b50:	b8000016 	stmdalt	r0, {r1, r2, r4}
    5b54:	01000016 	tsteq	r0, r6, lsl r0
    5b58:	0008e59c 	muleq	r8, ip, r5
    5b5c:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    5b60:	3a010064 	bcc	45cf8 <__ccfg+0x25d50>
    5b64:	0000b119 	andeq	fp, r0, r9, lsl r1
    5b68:	00222f00 	eoreq	r2, r2, r0, lsl #30
    5b6c:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5b70:	16a00000 	strtne	r0, [r0], r0
    5b74:	0ab80000 	beq	fee05b7c <_estack+0xdee00b7c>
    5b78:	3c010000 	stccc	0, cr0, [r1], {-0}
    5b7c:	0008c902 	andeq	ip, r8, r2, lsl #18
    5b80:	0a122100 	beq	48df88 <__ccfg+0x46dfe0>
    5b84:	05210000 	streq	r0, [r1, #-0]!
    5b88:	0000000a 	andeq	r0, r0, sl
    5b8c:	0009f628 	andeq	pc, r9, r8, lsr #12
    5b90:	0016ac00 	andseq	sl, r6, r0, lsl #24
    5b94:	0016b000 	andseq	fp, r6, r0
    5b98:	023e0100 	eorseq	r0, lr, #0, 2
    5b9c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5ba0:	0a052100 	beq	14dfa8 <__ccfg+0x12e000>
    5ba4:	00000000 	andeq	r0, r0, r0
    5ba8:	0013fd2c 	andseq	pc, r3, ip, lsr #26
    5bac:	0d290100 	stfeqs	f0, [r9, #-0]
    5bb0:	00167001 	andseq	r7, r6, r1
    5bb4:	0016a000 	andseq	sl, r6, r0
    5bb8:	799c0100 	ldmibvc	ip, {r8}
    5bbc:	19000009 	stmdbne	r0, {r0, r3}
    5bc0:	29010062 	stmdbcs	r1, {r1, r5, r6}
    5bc4:	0000b11c 	andeq	fp, r0, ip, lsl r1
    5bc8:	00224200 	eoreq	r4, r2, r0, lsl #4
    5bcc:	00693000 	rsbeq	r3, r9, r0
    5bd0:	81062b01 	tsthi	r6, r1, lsl #22
    5bd4:	27000000 	strcs	r0, [r0, -r0]
    5bd8:	00000a3d 	andeq	r0, r0, sp, lsr sl
    5bdc:	00001678 	andeq	r1, r0, r8, ror r6
    5be0:	00000a80 	andeq	r0, r0, r0, lsl #21
    5be4:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    5be8:	21000009 	tstcs	r0, r9
    5bec:	00000a4c 	andeq	r0, r0, ip, asr #20
    5bf0:	0a3d3300 	beq	f527f8 <__ccfg+0xf32850>
    5bf4:	16840000 	strne	r0, [r4], r0
    5bf8:	16880000 	strne	r0, [r8], r0
    5bfc:	2f010000 	svccs	0x00010000
    5c00:	00094804 	andeq	r4, r9, r4, lsl #16
    5c04:	0a4c2100 	beq	130e00c <__ccfg+0x12ee064>
    5c08:	33000000 	movwcc	r0, #0
    5c0c:	00000a20 	andeq	r0, r0, r0, lsr #20
    5c10:	00001688 	andeq	r1, r0, r8, lsl #13
    5c14:	0000168a 	andeq	r1, r0, sl, lsl #13
    5c18:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    5c1c:	21000009 	tstcs	r0, r9
    5c20:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5c24:	0a202500 	beq	80f02c <__ccfg+0x7ef084>
    5c28:	16900000 	ldrne	r0, [r0], r0
    5c2c:	0aa00000 	beq	fe805c34 <_estack+0xde800c34>
    5c30:	33010000 	movwcc	r0, #4096	; 0x1000
    5c34:	0a2f2103 	beq	bce048 <__ccfg+0xbae0a0>
    5c38:	00000000 	andeq	r0, r0, r0
    5c3c:	0013f434 	andseq	pc, r3, r4, lsr r4	; <UNPREDICTABLE>
    5c40:	0d190100 	ldfeqs	f0, [r9, #-0]
    5c44:	000000b1 	strheq	r0, [r0], -r1
    5c48:	0000163c 	andeq	r1, r0, ip, lsr r6
    5c4c:	00001670 	andeq	r1, r0, r0, ror r6
    5c50:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    5c54:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    5c58:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    5c5c:	00000081 	andeq	r0, r0, r1, lsl #1
    5c60:	01006235 	tsteq	r0, r5, lsr r2
    5c64:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    5c68:	22600000 	rsbcs	r0, r0, #0
    5c6c:	3d270000 	stccc	0, cr0, [r7, #-0]
    5c70:	4000000a 	andmi	r0, r0, sl
    5c74:	20000016 	andcs	r0, r0, r6, lsl r0
    5c78:	0100000a 	tsteq	r0, sl
    5c7c:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    5c80:	4c210000 	stcmi	0, cr0, [r1], #-0
    5c84:	0000000a 	andeq	r0, r0, sl
    5c88:	000a2027 	andeq	r2, sl, r7, lsr #32
    5c8c:	00164600 	andseq	r4, r6, r0, lsl #12
    5c90:	000a4800 	andeq	r4, sl, r0, lsl #16
    5c94:	03230100 			; <UNDEFINED> instruction: 0x03230100
    5c98:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5c9c:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5ca0:	5a250000 	bpl	945ca8 <__ccfg+0x925d00>
    5ca4:	4800000a 	stmdami	r0, {r1, r3}
    5ca8:	60000016 	andvs	r0, r0, r6, lsl r0
    5cac:	0100000a 	tsteq	r0, sl
    5cb0:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    5cb4:	0000000a 	andeq	r0, r0, sl
    5cb8:	05023600 	streq	r3, [r2, #-1536]	; 0xfffffa00
    5cbc:	06020000 	streq	r0, [r2], -r0
    5cc0:	03010102 	movweq	r0, #4354	; 0x1102
    5cc4:	00000a20 	andeq	r0, r0, r0, lsr #20
    5cc8:	00016837 	andeq	r6, r1, r7, lsr r8
    5ccc:	02060200 	andeq	r0, r6, #0, 4
    5cd0:	00006723 	andeq	r6, r0, r3, lsr #14
    5cd4:	09d53700 	ldmibeq	r5, {r8, r9, sl, ip, sp}^
    5cd8:	06020000 	streq	r0, [r2], -r0
    5cdc:	00673702 	rsbeq	r3, r7, r2, lsl #14
    5ce0:	36000000 	strcc	r0, [r0], -r0
    5ce4:	000003c3 	andeq	r0, r0, r3, asr #7
    5ce8:	01015402 	tsteq	r1, r2, lsl #8
    5cec:	0a3d0301 	beq	f468f8 <__ccfg+0xf26950>
    5cf0:	68370000 	ldmdavs	r7!, {}	; <UNPREDICTABLE>
    5cf4:	02000001 	andeq	r0, r0, #1
    5cf8:	67190154 			; <UNDEFINED> instruction: 0x67190154
    5cfc:	00000000 	andeq	r0, r0, r0
    5d00:	00002536 	andeq	r2, r0, r6, lsr r5
    5d04:	011e0200 	tsteq	lr, r0, lsl #4
    5d08:	5a030101 	bpl	c6114 <__ccfg+0xa616c>
    5d0c:	3700000a 	strcc	r0, [r0, -sl]
    5d10:	00000168 	andeq	r0, r0, r8, ror #2
    5d14:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    5d18:	00000067 	andeq	r0, r0, r7, rrx
    5d1c:	12093800 	andne	r3, r9, #0, 16
    5d20:	a4020000 	strge	r0, [r2], #-0
    5d24:	00670101 	rsbeq	r0, r7, r1, lsl #2
    5d28:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    5d2c:	3900000a 	stmdbcc	r0, {r1, r3}
    5d30:	00000168 	andeq	r0, r0, r8, ror #2
    5d34:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    5d38:	00000000 	andeq	r0, r0, r0
    5d3c:	0007963a 	andeq	r9, r7, sl, lsr r6
    5d40:	00174c00 	andseq	r4, r7, r0, lsl #24
    5d44:	00177000 	andseq	r7, r7, r0
    5d48:	289c0100 	ldmcs	ip, {r8}
    5d4c:	00000796 	muleq	r0, r6, r7
    5d50:	00001756 	andeq	r1, r0, r6, asr r7
    5d54:	0000176a 	andeq	r1, r0, sl, ror #14
    5d58:	3b0d7801 	blcc	363d64 <__ccfg+0x343dbc>
    5d5c:	000007a8 	andeq	r0, r0, r8, lsr #15
    5d60:	00001760 	andeq	r1, r0, r0, ror #14
    5d64:	00001766 	andeq	r1, r0, r6, ror #14
    5d68:	00037c01 	andeq	r7, r3, r1, lsl #24
    5d6c:	04120000 	ldreq	r0, [r2], #-0
    5d70:	00030000 	andeq	r0, r3, r0
    5d74:	00001969 	andeq	r1, r0, r9, ror #18
    5d78:	01720104 	cmneq	r2, r4, lsl #2
    5d7c:	100c0000 	andne	r0, ip, r0
    5d80:	d3000014 	movwle	r0, #20
    5d84:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5d88:	0000000c 	andeq	r0, r0, ip
    5d8c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    5d90:	02000047 	andeq	r0, r0, #71	; 0x47
    5d94:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    5d98:	02020000 	andeq	r0, r2, #0
    5d9c:	0003f105 	andeq	pc, r3, r5, lsl #2
    5da0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5da4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5da8:	ab050802 	blge	147db8 <__ccfg+0x127e10>
    5dac:	03000000 	movweq	r0, #0
    5db0:	0000223c 	andeq	r2, r0, ip, lsr r2
    5db4:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    5db8:	02000000 	andeq	r0, r0, #0
    5dbc:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    5dc0:	2a030000 	bcs	c5dc8 <__ccfg+0xa5e20>
    5dc4:	02000021 	andeq	r0, r0, #33	; 0x21
    5dc8:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5dcc:	02020000 	andeq	r0, r2, #0
    5dd0:	00027307 	andeq	r7, r2, r7, lsl #6
    5dd4:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    5dd8:	34020000 	strcc	r0, [r2], #-0
    5ddc:	00007319 	andeq	r7, r0, r9, lsl r3
    5de0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5de4:	00000085 	andeq	r0, r0, r5, lsl #1
    5de8:	80070802 	andhi	r0, r7, r2, lsl #16
    5dec:	04000000 	streq	r0, [r0], #-0
    5df0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5df4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5df8:	00008a07 	andeq	r8, r0, r7, lsl #20
    5dfc:	16000300 	strne	r0, [r0], -r0, lsl #6
    5e00:	27030000 	strcs	r0, [r3, -r0]
    5e04:	00005412 	andeq	r5, r0, r2, lsl r4
    5e08:	008f0500 	addeq	r0, pc, r0, lsl #10
    5e0c:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    5e10:	03000013 	movweq	r0, #19
    5e14:	0041122b 	subeq	r1, r1, fp, lsr #4
    5e18:	a0060000 	andge	r0, r6, r0
    5e1c:	03000000 	movweq	r0, #0
    5e20:	00001651 	andeq	r1, r0, r1, asr r6
    5e24:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    5e28:	05000000 	streq	r0, [r0, #-0]
    5e2c:	000000b1 	strheq	r0, [r0], -r1
    5e30:	0002a603 	andeq	sl, r2, r3, lsl #12
    5e34:	122d0300 	eorne	r0, sp, #0, 6
    5e38:	00000067 	andeq	r0, r0, r7, rrx
    5e3c:	32030807 	andcc	r0, r3, #458752	; 0x70000
    5e40:	00015c09 	andeq	r5, r1, r9, lsl #24
    5e44:	02c10800 	sbceq	r0, r1, #0, 16
    5e48:	34030000 	strcc	r0, [r3], #-0
    5e4c:	0000a007 	andeq	sl, r0, r7
    5e50:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5e54:	00a40800 	adceq	r0, r4, r0, lsl #16
    5e58:	35030000 	strcc	r0, [r3, #-0]
    5e5c:	0000a003 	andeq	sl, r0, r3
    5e60:	06010100 	streq	r0, [r1], -r0, lsl #2
    5e64:	028f0800 	addeq	r0, pc, #0, 16
    5e68:	36030000 	strcc	r0, [r3], -r0
    5e6c:	0000a003 	andeq	sl, r0, r3
    5e70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5e74:	042b0800 	strteq	r0, [fp], #-2048	; 0xfffff800
    5e78:	37030000 	strcc	r0, [r3, -r0]
    5e7c:	0000a003 	andeq	sl, r0, r3
    5e80:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5e84:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
    5e88:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5e8c:	0000a003 	andeq	sl, r0, r3
    5e90:	00040100 	andeq	r0, r4, r0, lsl #2
    5e94:	04150900 	ldreq	r0, [r5], #-2304	; 0xfffff700
    5e98:	3a030000 	bcc	c5ea0 <__ccfg+0xa5ef8>
    5e9c:	0000a007 	andeq	sl, r0, r7
    5ea0:	4c090100 	stfmis	f0, [r9], {-0}
    5ea4:	03000000 	movweq	r0, #0
    5ea8:	00a0033c 	adceq	r0, r0, ip, lsr r3
    5eac:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5eb0:	00000079 	andeq	r0, r0, r9, ror r0
    5eb4:	a0033d03 	andge	r3, r3, r3, lsl #26
    5eb8:	03000000 	movweq	r0, #0
    5ebc:	00016109 	andeq	r6, r1, r9, lsl #2
    5ec0:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    5ec4:	000000b1 	strheq	r0, [r0], -r1
    5ec8:	54030004 	strpl	r0, [r3], #-4
    5ecc:	03000004 	movweq	r0, #4
    5ed0:	00ce0341 	sbceq	r0, lr, r1, asr #6
    5ed4:	5c060000 	stcpl	0, cr0, [r6], {-0}
    5ed8:	0a000001 	beq	5ee4 <__exidx_end+0x3068>
    5edc:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    5ee0:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    5ee4:	01000001 	tsteq	r0, r1
    5ee8:	03210a01 			; <UNDEFINED> instruction: 0x03210a01
    5eec:	45030000 	strmi	r0, [r3, #-0]
    5ef0:	0001890e 	andeq	r8, r1, lr, lsl #18
    5ef4:	0b010100 	bleq	462fc <__ccfg+0x26354>
    5ef8:	00018f04 	andeq	r8, r1, r4, lsl #30
    5efc:	08010200 	stmdaeq	r1, {r9}
    5f00:	000003be 			; <UNDEFINED> instruction: 0x000003be
    5f04:	00018f05 	andeq	r8, r1, r5, lsl #30
    5f08:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    5f0c:	45030000 	strmi	r0, [r3, #-0]
    5f10:	0001891e 	andeq	r8, r1, lr, lsl r9
    5f14:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5f18:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    5f1c:	000001da 	ldrdeq	r0, [r0], -sl
    5f20:	0002c809 	andeq	ip, r2, r9, lsl #16
    5f24:	0b900400 	bleq	fe406f2c <_estack+0xde401f2c>
    5f28:	00000067 	andeq	r0, r0, r7, rrx
    5f2c:	062d0900 	strteq	r0, [sp], -r0, lsl #18
    5f30:	91040000 	mrsls	r0, (UNDEF: 4)
    5f34:	00008f08 	andeq	r8, r0, r8, lsl #30
    5f38:	9c090400 	cfstrsls	mvf0, [r9], {-0}
    5f3c:	04000004 	streq	r0, [r0], #-4
    5f40:	00ac1092 	umlaleq	r1, ip, r2, r0
    5f44:	00060000 	andeq	r0, r6, r0
    5f48:	00043203 	andeq	r3, r4, r3, lsl #4
    5f4c:	03930400 	orrseq	r0, r3, #0, 8
    5f50:	000001a9 	andeq	r0, r0, r9, lsr #3
    5f54:	0001da0c 	andeq	sp, r1, ip, lsl #20
    5f58:	0001f100 	andeq	pc, r1, r0, lsl #2
    5f5c:	0a000d00 	beq	9364 <__exidx_end+0x64e8>
    5f60:	00000042 	andeq	r0, r0, r2, asr #32
    5f64:	e60f9904 	str	r9, [pc], -r4, lsl #18
    5f68:	01000001 	tsteq	r0, r1
    5f6c:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    5f70:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    5f74:	8f080000 	svchi	0x00080000
    5f78:	05000004 	streq	r0, [r0, #-4]
    5f7c:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    5f80:	07010000 	streq	r0, [r1, -r0]
    5f84:	3d080001 	stccc	0, cr0, [r8, #-4]
    5f88:	05000000 	streq	r0, [r0, #-0]
    5f8c:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    5f90:	01010000 	mrseq	r0, (UNDEF: 1)
    5f94:	03000000 	movweq	r0, #0
    5f98:	00000286 	andeq	r0, r0, r6, lsl #5
    5f9c:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    5fa0:	05000001 	streq	r0, [r0, #-1]
    5fa4:	00000229 	andeq	r0, r0, r9, lsr #4
    5fa8:	0002350c 	andeq	r3, r2, ip, lsl #10
    5fac:	00024500 	andeq	r4, r2, r0, lsl #10
    5fb0:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5fb4:	0000023a 	andeq	r0, r0, sl, lsr r2
    5fb8:	0002eb0a 	andeq	lr, r2, sl, lsl #22
    5fbc:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    5fc0:	00000245 	andeq	r0, r0, r5, asr #4
    5fc4:	9b0c0101 	blls	3063d0 <__ccfg+0x2e6428>
    5fc8:	63000000 	movwvs	r0, #0
    5fcc:	0d000002 	stceq	0, cr0, [r0, #-8]
    5fd0:	02580500 	subseq	r0, r8, #0, 10
    5fd4:	a70a0000 	strge	r0, [sl, -r0]
    5fd8:	06000003 	streq	r0, [r0], -r3
    5fdc:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    5fe0:	01010000 	mrseq	r0, (UNDEF: 1)
    5fe4:	0001410a 	andeq	r4, r1, sl, lsl #2
    5fe8:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    5fec:	000000b1 	strheq	r0, [r0], -r1
    5ff0:	a90e0101 	stmdbge	lr, {r0, r8}
    5ff4:	07000004 	streq	r0, [r0, -r4]
    5ff8:	9110016e 	tstls	r0, lr, ror #2
    5ffc:	0b000002 	bleq	600c <__exidx_end+0x3190>
    6000:	00029704 	andeq	r9, r2, r4, lsl #14
    6004:	a3010f00 	movwge	r0, #7936	; 0x1f00
    6008:	10000002 	andne	r0, r0, r2
    600c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6010:	01960c00 	orrseq	r0, r6, r0, lsl #24
    6014:	02ae0000 	adceq	r0, lr, #0
    6018:	000d0000 	andeq	r0, sp, r0
    601c:	0002a305 	andeq	sl, r2, r5, lsl #6
    6020:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
    6024:	7f070000 	svcvc	0x00070000
    6028:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    602c:	01010000 	mrseq	r0, (UNDEF: 1)
    6030:	00039f11 	andeq	r9, r3, r1, lsl pc
    6034:	01820700 	orreq	r0, r2, r0, lsl #14
    6038:	0000bd14 	andeq	fp, r0, r4, lsl sp
    603c:	11010100 	mrsne	r0, (UNDEF: 17)
    6040:	00000494 	muleq	r0, r4, r4
    6044:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    6048:	000000b1 	strheq	r0, [r0], -r1
    604c:	08120101 	ldmdaeq	r2, {r0, r8}
    6050:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    6054:	00000307 	andeq	r0, r0, r7, lsl #6
    6058:	00223413 	eoreq	r3, r2, r3, lsl r4
    605c:	03070700 	movweq	r0, #30464	; 0x7700
    6060:	00008f07 	andeq	r8, r0, r7, lsl #30
    6064:	7f130000 	svcvc	0x00130000
    6068:	07000005 	streq	r0, [r0, -r5]
    606c:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    6070:	04000000 	streq	r0, [r0], #-0
    6074:	02660e00 	rsbeq	r0, r6, #0, 28
    6078:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    607c:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    6080:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
    6084:	30000004 	andcc	r0, r0, r4
    6088:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    608c:	00000377 	andeq	r0, r0, r7, ror r3
    6090:	0004b113 	andeq	fp, r4, r3, lsl r1
    6094:	03140700 	tsteq	r4, #0, 14
    6098:	00008f08 	andeq	r8, r0, r8, lsl #30
    609c:	d2130000 	andsle	r0, r3, #0
    60a0:	07000002 	streq	r0, [r0, -r2]
    60a4:	8f080315 	svchi	0x00080315
    60a8:	02000000 	andeq	r0, r0, #0
    60ac:	0004ac13 	andeq	sl, r4, r3, lsl ip
    60b0:	03160700 	tsteq	r6, #0, 14
    60b4:	0002840b 	andeq	r8, r2, fp, lsl #8
    60b8:	7f130400 	svcvc	0x00130400
    60bc:	0700000f 	streq	r0, [r0, -pc]
    60c0:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    60c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    60c8:	00045d13 	andeq	r5, r4, r3, lsl sp
    60cc:	03180700 	tsteq	r8, #0, 14
    60d0:	0003770f 	andeq	r7, r3, pc, lsl #14
    60d4:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
    60d8:	07000002 	streq	r0, [r0, -r2]
    60dc:	87150319 			; <UNDEFINED> instruction: 0x87150319
    60e0:	2c000003 	stccs	0, cr0, [r0], {3}
    60e4:	03070c00 	movweq	r0, #31744	; 0x7c00
    60e8:	03870000 	orreq	r0, r7, #0
    60ec:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    60f0:	03000000 	movweq	r0, #0
    60f4:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    60f8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    60fc:	000004c3 	andeq	r0, r0, r3, asr #9
    6100:	1b031c07 	blne	cd124 <__ccfg+0xad17c>
    6104:	00000314 	andeq	r0, r0, r4, lsl r3
    6108:	00039511 	andeq	r9, r3, r1, lsl r5
    610c:	031e0700 	tsteq	lr, #0, 14
    6110:	0003a914 	andeq	sl, r3, r4, lsl r9
    6114:	0b010100 	bleq	4651c <__ccfg+0x26574>
    6118:	00038d04 	andeq	r8, r3, r4, lsl #26
    611c:	14060a00 	strne	r0, [r6], #-2560	; 0xfffff600
    6120:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6124:	0001890e 	andeq	r8, r1, lr, lsl #18
    6128:	16010100 	strne	r0, [r1], -r0, lsl #2
    612c:	00144f01 	andseq	r4, r4, r1, lsl #30
    6130:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    6134:	00008101 	andeq	r8, r0, r1, lsl #2
    6138:	00179800 	andseq	r9, r7, r0, lsl #16
    613c:	00181000 	andseq	r1, r8, r0
    6140:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    6144:	01007473 	tsteq	r0, r3, ror r4
    6148:	008f120d 	addeq	r1, pc, sp, lsl #4
    614c:	227e0000 	rsbscs	r0, lr, #0
    6150:	62170000 	andsvs	r0, r7, #0
    6154:	01006675 	tsteq	r0, r5, ror r6
    6158:	01891c0d 	orreq	r1, r9, sp, lsl #24
    615c:	229c0000 	addscs	r0, ip, #0
    6160:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    6164:	01006e65 	tsteq	r0, r5, ror #28
    6168:	0081250d 	addeq	r2, r1, sp, lsl #10
    616c:	22f10000 	rscscs	r0, r1, #0
    6170:	56180000 	ldrpl	r0, [r8], -r0
    6174:	01000014 	tsteq	r0, r4, lsl r0
    6178:	00810611 	addeq	r0, r1, r1, lsl r6
    617c:	23460000 	movtcs	r0, #24576	; 0x6000
    6180:	00000000 	andeq	r0, r0, r0
    6184:	0000044c 	andeq	r0, r0, ip, asr #8
    6188:	1ab80003 	bne	fee0619c <_estack+0xdee0119c>
    618c:	01040000 	mrseq	r0, (UNDEF: 4)
    6190:	00000172 	andeq	r0, r0, r2, ror r1
    6194:	0014640c 	andseq	r6, r4, ip, lsl #8
    6198:	0000d300 	andeq	sp, r0, r0, lsl #6
    619c:	000c3800 	andeq	r3, ip, r0, lsl #16
    61a0:	00000000 	andeq	r0, r0, r0
    61a4:	0049bd00 	subeq	fp, r9, r0, lsl #26
    61a8:	06010200 	streq	r0, [r1], -r0, lsl #4
    61ac:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    61b0:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    61b4:	02000003 	andeq	r0, r0, #3
    61b8:	00b00504 	adcseq	r0, r0, r4, lsl #10
    61bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    61c0:	0000ab05 	andeq	sl, r0, r5, lsl #22
    61c4:	223c0300 	eorscs	r0, ip, #0, 6
    61c8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    61cc:	00004d18 	andeq	r4, r0, r8, lsl sp
    61d0:	08010200 	stmdaeq	r1, {r9}
    61d4:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    61d8:	00212a03 	eoreq	r2, r1, r3, lsl #20
    61dc:	19310200 	ldmdbne	r1!, {r9}
    61e0:	00000060 	andeq	r0, r0, r0, rrx
    61e4:	73070202 	movwvc	r0, #29186	; 0x7202
    61e8:	03000002 	movweq	r0, #2
    61ec:	000017f3 	strdeq	r1, [r0], -r3
    61f0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    61f4:	02000000 	andeq	r0, r0, #0
    61f8:	00850704 	addeq	r0, r5, r4, lsl #14
    61fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6200:	00008007 	andeq	r8, r0, r7
    6204:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6208:	00746e69 	rsbseq	r6, r4, r9, ror #28
    620c:	8a070402 	bhi	1c721c <__ccfg+0x1a7274>
    6210:	03000000 	movweq	r0, #0
    6214:	00000b86 	andeq	r0, r0, r6, lsl #23
    6218:	9b1b2803 	blls	6d022c <__ccfg+0x6b0284>
    621c:	05000000 	streq	r0, [r0, #-0]
    6220:	00000a9c 	muleq	r0, ip, sl
    6224:	b3000904 	movwlt	r0, #2308	; 0x904
    6228:	06000000 	streq	r0, [r0], -r0
    622c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    6230:	000000b3 	strheq	r0, [r0], -r3
    6234:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6238:	0a9e0304 	beq	fe786e50 <_estack+0xde781e50>
    623c:	63030000 	movwvs	r0, #12288	; 0x3000
    6240:	00008f18 	andeq	r8, r0, r8, lsl pc
    6244:	16000300 	strne	r0, [r0], -r0, lsl #6
    6248:	27040000 	strcs	r0, [r4, -r0]
    624c:	00005412 	andeq	r5, r0, r2, lsl r4
    6250:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6254:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    6258:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    625c:	0041122b 	subeq	r1, r1, fp, lsr #4
    6260:	d2090000 	andle	r0, r9, #0
    6264:	03000000 	movweq	r0, #0
    6268:	00001651 	andeq	r1, r0, r1, asr r6
    626c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6270:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6274:	000000e3 	andeq	r0, r0, r3, ror #1
    6278:	0002a603 	andeq	sl, r2, r3, lsl #12
    627c:	122d0400 	eorne	r0, sp, #0, 8
    6280:	00000067 	andeq	r0, r0, r7, rrx
    6284:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    6288:	00018e09 	andeq	r8, r1, r9, lsl #28
    628c:	02c10b00 	sbceq	r0, r1, #0, 22
    6290:	34040000 	strcc	r0, [r4], #-0
    6294:	0000d207 	andeq	sp, r0, r7, lsl #4
    6298:	07010100 	streq	r0, [r1, -r0, lsl #2]
    629c:	00a40b00 	adceq	r0, r4, r0, lsl #22
    62a0:	35040000 	strcc	r0, [r4, #-0]
    62a4:	0000d203 	andeq	sp, r0, r3, lsl #4
    62a8:	06010100 	streq	r0, [r1], -r0, lsl #2
    62ac:	028f0b00 	addeq	r0, pc, #0, 22
    62b0:	36040000 	strcc	r0, [r4], -r0
    62b4:	0000d203 	andeq	sp, r0, r3, lsl #4
    62b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    62bc:	042b0b00 	strteq	r0, [fp], #-2816	; 0xfffff500
    62c0:	37040000 	strcc	r0, [r4, -r0]
    62c4:	0000d203 	andeq	sp, r0, r3, lsl #4
    62c8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    62cc:	04240b00 	strteq	r0, [r4], #-2816	; 0xfffff500
    62d0:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    62d4:	0000d203 	andeq	sp, r0, r3, lsl #4
    62d8:	00040100 	andeq	r0, r4, r0, lsl #2
    62dc:	04150c00 	ldreq	r0, [r5], #-3072	; 0xfffff400
    62e0:	3a040000 	bcc	1062e8 <__ccfg+0xe6340>
    62e4:	0000d207 	andeq	sp, r0, r7, lsl #4
    62e8:	4c0c0100 	stfmis	f0, [ip], {-0}
    62ec:	04000000 	streq	r0, [r0], #-0
    62f0:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    62f4:	0c020000 	stceq	0, cr0, [r2], {-0}
    62f8:	00000079 	andeq	r0, r0, r9, ror r0
    62fc:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    6300:	03000000 	movweq	r0, #0
    6304:	0001610c 	andeq	r6, r1, ip, lsl #2
    6308:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    630c:	000000e3 	andeq	r0, r0, r3, ror #1
    6310:	54030004 	strpl	r0, [r3], #-4
    6314:	04000004 	streq	r0, [r0], #-4
    6318:	01000341 	tsteq	r0, r1, asr #6
    631c:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6320:	0d000001 	stceq	0, cr0, [r0, #-4]
    6324:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    6328:	9a1a4304 	bls	696f40 <__ccfg+0x676f98>
    632c:	01000001 	tsteq	r0, r1
    6330:	03210d01 			; <UNDEFINED> instruction: 0x03210d01
    6334:	45040000 	strmi	r0, [r4, #-0]
    6338:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    633c:	0e010100 	adfeqs	f0, f1, f0
    6340:	0001c104 	andeq	ip, r1, r4, lsl #2
    6344:	08010200 	stmdaeq	r1, {r9}
    6348:	000003be 			; <UNDEFINED> instruction: 0x000003be
    634c:	0001c108 	andeq	ip, r1, r8, lsl #2
    6350:	032f0d00 			; <UNDEFINED> instruction: 0x032f0d00
    6354:	45040000 	strmi	r0, [r4, #-0]
    6358:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    635c:	0a010100 	beq	46764 <__ccfg+0x267bc>
    6360:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6364:	0000020c 	andeq	r0, r0, ip, lsl #4
    6368:	0002c80c 	andeq	ip, r2, ip, lsl #16
    636c:	0b900500 	bleq	fe407774 <_estack+0xde402774>
    6370:	00000067 	andeq	r0, r0, r7, rrx
    6374:	062d0c00 	strteq	r0, [sp], -r0, lsl #24
    6378:	91050000 	mrsls	r0, (UNDEF: 5)
    637c:	0000c108 	andeq	ip, r0, r8, lsl #2
    6380:	9c0c0400 	cfstrsls	mvf0, [ip], {-0}
    6384:	05000004 	streq	r0, [r0, #-4]
    6388:	00de1092 	smullseq	r1, lr, r2, r0
    638c:	00060000 	andeq	r0, r6, r0
    6390:	00043203 	andeq	r3, r4, r3, lsl #4
    6394:	03930500 	orrseq	r0, r3, #0, 10
    6398:	000001db 	ldrdeq	r0, [r0], -fp
    639c:	00020c0f 	andeq	r0, r2, pc, lsl #24
    63a0:	00022300 	andeq	r2, r2, r0, lsl #6
    63a4:	0d001000 	stceq	0, cr1, [r0, #-0]
    63a8:	00000042 	andeq	r0, r0, r2, asr #32
    63ac:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    63b0:	01000002 	tsteq	r0, r2
    63b4:	06010a01 	streq	r0, [r1], -r1, lsl #20
    63b8:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    63bc:	8f0b0000 	svchi	0x000b0000
    63c0:	06000004 	streq	r0, [r0], -r4
    63c4:	00d20793 	smullseq	r0, r2, r3, r7
    63c8:	07010000 	streq	r0, [r1, -r0]
    63cc:	3d0b0001 	stccc	0, cr0, [fp, #-4]
    63d0:	06000000 	streq	r0, [r0], -r0
    63d4:	00d20394 	smullseq	r0, r2, r4, r3
    63d8:	01010000 	mrseq	r0, (UNDEF: 1)
    63dc:	03000000 	movweq	r0, #0
    63e0:	00000286 	andeq	r0, r0, r6, lsl #5
    63e4:	31039606 	tstcc	r3, r6, lsl #12
    63e8:	08000002 	stmdaeq	r0, {r1}
    63ec:	0000025b 	andeq	r0, r0, fp, asr r2
    63f0:	0002670f 	andeq	r6, r2, pc, lsl #14
    63f4:	00027700 	andeq	r7, r2, r0, lsl #14
    63f8:	08001000 	stmdaeq	r0, {ip}
    63fc:	0000026c 	andeq	r0, r0, ip, ror #4
    6400:	0002eb0d 	andeq	lr, r2, sp, lsl #22
    6404:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    6408:	00000277 	andeq	r0, r0, r7, ror r2
    640c:	cd0f0101 	stfgts	f0, [pc, #-4]	; 6410 <__exidx_end+0x3594>
    6410:	95000000 	strls	r0, [r0, #-0]
    6414:	10000002 	andne	r0, r0, r2
    6418:	028a0800 	addeq	r0, sl, #0, 16
    641c:	a70d0000 	strge	r0, [sp, -r0]
    6420:	07000003 	streq	r0, [r0, -r3]
    6424:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    6428:	01010000 	mrseq	r0, (UNDEF: 1)
    642c:	0001410d 	andeq	r4, r1, sp, lsl #2
    6430:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6434:	000000e3 	andeq	r0, r0, r3, ror #1
    6438:	a9110101 	ldmdbge	r1, {r0, r8}
    643c:	08000004 	stmdaeq	r0, {r2}
    6440:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6444:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6448:	0002c904 	andeq	ip, r2, r4, lsl #18
    644c:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    6450:	13000002 	movwne	r0, #2
    6454:	000000c1 	andeq	r0, r0, r1, asr #1
    6458:	01c80f00 	biceq	r0, r8, r0, lsl #30
    645c:	02e00000 	rsceq	r0, r0, #0
    6460:	00100000 	andseq	r0, r0, r0
    6464:	0002d508 	andeq	sp, r2, r8, lsl #10
    6468:	04641400 	strbteq	r1, [r4], #-1024	; 0xfffffc00
    646c:	7f080000 	svcvc	0x00080000
    6470:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    6474:	01010000 	mrseq	r0, (UNDEF: 1)
    6478:	00039f14 	andeq	r9, r3, r4, lsl pc
    647c:	01820800 	orreq	r0, r2, r0, lsl #16
    6480:	0000ef14 	andeq	lr, r0, r4, lsl pc
    6484:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6488:	00000494 	muleq	r0, r4, r4
    648c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    6490:	000000e3 	andeq	r0, r0, r3, ror #1
    6494:	08150101 	ldmdaeq	r5, {r0, r8}
    6498:	09030308 	stmdbeq	r3, {r3, r8, r9}
    649c:	00000339 	andeq	r0, r0, r9, lsr r3
    64a0:	00223416 	eoreq	r3, r2, r6, lsl r4
    64a4:	03070800 	movweq	r0, #30720	; 0x7800
    64a8:	0000c107 	andeq	ip, r0, r7, lsl #2
    64ac:	7f160000 	svcvc	0x00160000
    64b0:	08000005 	stmdaeq	r0, {r0, r2}
    64b4:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    64b8:	04000000 	streq	r0, [r0], #-0
    64bc:	02661100 	rsbeq	r1, r6, #0, 2
    64c0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    64c4:	03120303 	tsteq	r2, #201326592	; 0xc000000
    64c8:	b8170000 	ldmdalt	r7, {}	; <UNPREDICTABLE>
    64cc:	30000004 	andcc	r0, r0, r4
    64d0:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    64d4:	000003a9 	andeq	r0, r0, r9, lsr #7
    64d8:	0004b116 	andeq	fp, r4, r6, lsl r1
    64dc:	03140800 	tsteq	r4, #0, 16
    64e0:	0000c108 	andeq	ip, r0, r8, lsl #2
    64e4:	d2160000 	andsle	r0, r6, #0
    64e8:	08000002 	stmdaeq	r0, {r1}
    64ec:	c1080315 	tstgt	r8, r5, lsl r3
    64f0:	02000000 	andeq	r0, r0, #0
    64f4:	0004ac16 	andeq	sl, r4, r6, lsl ip
    64f8:	03160800 	tsteq	r6, #0, 16
    64fc:	0002b60b 	andeq	fp, r2, fp, lsl #12
    6500:	7f160400 	svcvc	0x00160400
    6504:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    6508:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    650c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6510:	00045d16 	andeq	r5, r4, r6, lsl sp
    6514:	03180800 	tsteq	r8, #0, 16
    6518:	0003a90f 	andeq	sl, r3, pc, lsl #18
    651c:	cd160c00 	ldcgt	12, cr0, [r6, #-0]
    6520:	08000002 	stmdaeq	r0, {r1}
    6524:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    6528:	2c000003 	stccs	0, cr0, [r0], {3}
    652c:	03390f00 	teqeq	r9, #0, 30
    6530:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    6534:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    6538:	03000000 	movweq	r0, #0
    653c:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    6540:	11000003 	tstne	r0, r3
    6544:	000004c3 	andeq	r0, r0, r3, asr #9
    6548:	1b031c08 	blne	cd570 <__ccfg+0xad5c8>
    654c:	00000346 	andeq	r0, r0, r6, asr #6
    6550:	00039514 	andeq	r9, r3, r4, lsl r5
    6554:	031e0800 	tsteq	lr, #0, 16
    6558:	0003db14 	andeq	sp, r3, r4, lsl fp
    655c:	0e010100 	adfeqs	f0, f1, f0
    6560:	0003bf04 	andeq	fp, r3, r4, lsl #30
    6564:	5b011900 	blpl	4c96c <__ccfg+0x2c9c4>
    6568:	01000014 	tsteq	r0, r4, lsl r0
    656c:	8101050c 	tsthi	r1, ip, lsl #10
    6570:	10000000 	andne	r0, r0, r0
    6574:	64000018 	strvs	r0, [r0], #-24	; 0xffffffe8
    6578:	01000018 	tsteq	r0, r8, lsl r0
    657c:	0004499c 	muleq	r4, ip, r9
    6580:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    6584:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    6588:	000000c1 	andeq	r0, r0, r1, asr #1
    658c:	00002390 	muleq	r0, r0, r3
    6590:	01006d1b 	tsteq	r0, fp, lsl sp
    6594:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    6598:	91020000 	mrsls	r0, (UNDEF: 2)
    659c:	561d1c74 			; <UNDEFINED> instruction: 0x561d1c74
    65a0:	01000014 	tsteq	r0, r4, lsl r0
    65a4:	0081060e 	addeq	r0, r1, lr, lsl #12
    65a8:	23a30000 			; <UNDEFINED> instruction: 0x23a30000
    65ac:	621e0000 	andsvs	r0, lr, #0
    65b0:	01006675 	tsteq	r0, r5, ror r6
    65b4:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    65b8:	23e20000 	mvncs	r0, #0
    65bc:	611f0000 	tstvs	pc, r0
    65c0:	10010070 	andne	r0, r1, r0, ror r0
    65c4:	0000b50a 	andeq	fp, r0, sl, lsl #10
    65c8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    65cc:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    65d0:	00000001 	andeq	r0, r0, r1
    65d4:	0000044c 	andeq	r0, r0, ip, asr #8
    65d8:	1c640003 	stclne	0, cr0, [r4], #-12
    65dc:	01040000 	mrseq	r0, (UNDEF: 4)
    65e0:	00000172 	andeq	r0, r0, r2, ror r1
    65e4:	0014a50c 	andseq	sl, r4, ip, lsl #10
    65e8:	0000d300 	andeq	sp, r0, r0, lsl #6
    65ec:	000c4800 	andeq	r4, ip, r0, lsl #16
    65f0:	00000000 	andeq	r0, r0, r0
    65f4:	004b5f00 	subeq	r5, fp, r0, lsl #30
    65f8:	06010200 	streq	r0, [r1], -r0, lsl #4
    65fc:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    6600:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    6604:	02000003 	andeq	r0, r0, #3
    6608:	00b00504 	adcseq	r0, r0, r4, lsl #10
    660c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6610:	0000ab05 	andeq	sl, r0, r5, lsl #22
    6614:	223c0300 	eorscs	r0, ip, #0, 6
    6618:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    661c:	00004d18 	andeq	r4, r0, r8, lsl sp
    6620:	08010200 	stmdaeq	r1, {r9}
    6624:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    6628:	00212a03 	eoreq	r2, r1, r3, lsl #20
    662c:	19310200 	ldmdbne	r1!, {r9}
    6630:	00000060 	andeq	r0, r0, r0, rrx
    6634:	73070202 	movwvc	r0, #29186	; 0x7202
    6638:	03000002 	movweq	r0, #2
    663c:	000017f3 	strdeq	r1, [r0], -r3
    6640:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6644:	02000000 	andeq	r0, r0, #0
    6648:	00850704 	addeq	r0, r5, r4, lsl #14
    664c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6650:	00008007 	andeq	r8, r0, r7
    6654:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6658:	00746e69 	rsbseq	r6, r4, r9, ror #28
    665c:	8a070402 	bhi	1c766c <__ccfg+0x1a76c4>
    6660:	03000000 	movweq	r0, #0
    6664:	00000b86 	andeq	r0, r0, r6, lsl #23
    6668:	9b1b2803 	blls	6d067c <__ccfg+0x6b06d4>
    666c:	05000000 	streq	r0, [r0, #-0]
    6670:	00000a9c 	muleq	r0, ip, sl
    6674:	b3000904 	movwlt	r0, #2308	; 0x904
    6678:	06000000 	streq	r0, [r0], -r0
    667c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    6680:	000000b3 	strheq	r0, [r0], -r3
    6684:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6688:	0a9e0304 	beq	fe7872a0 <_estack+0xde7822a0>
    668c:	63030000 	movwvs	r0, #12288	; 0x3000
    6690:	00008f18 	andeq	r8, r0, r8, lsl pc
    6694:	16000300 	strne	r0, [r0], -r0, lsl #6
    6698:	27040000 	strcs	r0, [r4, -r0]
    669c:	00005412 	andeq	r5, r0, r2, lsl r4
    66a0:	00c10800 	sbceq	r0, r1, r0, lsl #16
    66a4:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    66a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    66ac:	0041122b 	subeq	r1, r1, fp, lsr #4
    66b0:	d2090000 	andle	r0, r9, #0
    66b4:	03000000 	movweq	r0, #0
    66b8:	00001651 	andeq	r1, r0, r1, asr r6
    66bc:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    66c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    66c4:	000000e3 	andeq	r0, r0, r3, ror #1
    66c8:	0002a603 	andeq	sl, r2, r3, lsl #12
    66cc:	122d0400 	eorne	r0, sp, #0, 8
    66d0:	00000067 	andeq	r0, r0, r7, rrx
    66d4:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    66d8:	00018e09 	andeq	r8, r1, r9, lsl #28
    66dc:	02c10b00 	sbceq	r0, r1, #0, 22
    66e0:	34040000 	strcc	r0, [r4], #-0
    66e4:	0000d207 	andeq	sp, r0, r7, lsl #4
    66e8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    66ec:	00a40b00 	adceq	r0, r4, r0, lsl #22
    66f0:	35040000 	strcc	r0, [r4, #-0]
    66f4:	0000d203 	andeq	sp, r0, r3, lsl #4
    66f8:	06010100 	streq	r0, [r1], -r0, lsl #2
    66fc:	028f0b00 	addeq	r0, pc, #0, 22
    6700:	36040000 	strcc	r0, [r4], -r0
    6704:	0000d203 	andeq	sp, r0, r3, lsl #4
    6708:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    670c:	042b0b00 	strteq	r0, [fp], #-2816	; 0xfffff500
    6710:	37040000 	strcc	r0, [r4, -r0]
    6714:	0000d203 	andeq	sp, r0, r3, lsl #4
    6718:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    671c:	04240b00 	strteq	r0, [r4], #-2816	; 0xfffff500
    6720:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6724:	0000d203 	andeq	sp, r0, r3, lsl #4
    6728:	00040100 	andeq	r0, r4, r0, lsl #2
    672c:	04150c00 	ldreq	r0, [r5], #-3072	; 0xfffff400
    6730:	3a040000 	bcc	106738 <__ccfg+0xe6790>
    6734:	0000d207 	andeq	sp, r0, r7, lsl #4
    6738:	4c0c0100 	stfmis	f0, [ip], {-0}
    673c:	04000000 	streq	r0, [r0], #-0
    6740:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    6744:	0c020000 	stceq	0, cr0, [r2], {-0}
    6748:	00000079 	andeq	r0, r0, r9, ror r0
    674c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    6750:	03000000 	movweq	r0, #0
    6754:	0001610c 	andeq	r6, r1, ip, lsl #2
    6758:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    675c:	000000e3 	andeq	r0, r0, r3, ror #1
    6760:	54030004 	strpl	r0, [r3], #-4
    6764:	04000004 	streq	r0, [r0], #-4
    6768:	01000341 	tsteq	r0, r1, asr #6
    676c:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6770:	0d000001 	stceq	0, cr0, [r0, #-4]
    6774:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    6778:	9a1a4304 	bls	697390 <__ccfg+0x6773e8>
    677c:	01000001 	tsteq	r0, r1
    6780:	03210d01 			; <UNDEFINED> instruction: 0x03210d01
    6784:	45040000 	strmi	r0, [r4, #-0]
    6788:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    678c:	0e010100 	adfeqs	f0, f1, f0
    6790:	0001c104 	andeq	ip, r1, r4, lsl #2
    6794:	08010200 	stmdaeq	r1, {r9}
    6798:	000003be 			; <UNDEFINED> instruction: 0x000003be
    679c:	0001c108 	andeq	ip, r1, r8, lsl #2
    67a0:	032f0d00 			; <UNDEFINED> instruction: 0x032f0d00
    67a4:	45040000 	strmi	r0, [r4, #-0]
    67a8:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    67ac:	0a010100 	beq	46bb4 <__ccfg+0x26c0c>
    67b0:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    67b4:	0000020c 	andeq	r0, r0, ip, lsl #4
    67b8:	0002c80c 	andeq	ip, r2, ip, lsl #16
    67bc:	0b900500 	bleq	fe407bc4 <_estack+0xde402bc4>
    67c0:	00000067 	andeq	r0, r0, r7, rrx
    67c4:	062d0c00 	strteq	r0, [sp], -r0, lsl #24
    67c8:	91050000 	mrsls	r0, (UNDEF: 5)
    67cc:	0000c108 	andeq	ip, r0, r8, lsl #2
    67d0:	9c0c0400 	cfstrsls	mvf0, [ip], {-0}
    67d4:	05000004 	streq	r0, [r0, #-4]
    67d8:	00de1092 	smullseq	r1, lr, r2, r0
    67dc:	00060000 	andeq	r0, r6, r0
    67e0:	00043203 	andeq	r3, r4, r3, lsl #4
    67e4:	03930500 	orrseq	r0, r3, #0, 10
    67e8:	000001db 	ldrdeq	r0, [r0], -fp
    67ec:	00020c0f 	andeq	r0, r2, pc, lsl #24
    67f0:	00022300 	andeq	r2, r2, r0, lsl #6
    67f4:	0d001000 	stceq	0, cr1, [r0, #-0]
    67f8:	00000042 	andeq	r0, r0, r2, asr #32
    67fc:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    6800:	01000002 	tsteq	r0, r2
    6804:	06010a01 	streq	r0, [r1], -r1, lsl #20
    6808:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    680c:	8f0b0000 	svchi	0x000b0000
    6810:	06000004 	streq	r0, [r0], -r4
    6814:	00d20793 	smullseq	r0, r2, r3, r7
    6818:	07010000 	streq	r0, [r1, -r0]
    681c:	3d0b0001 	stccc	0, cr0, [fp, #-4]
    6820:	06000000 	streq	r0, [r0], -r0
    6824:	00d20394 	smullseq	r0, r2, r4, r3
    6828:	01010000 	mrseq	r0, (UNDEF: 1)
    682c:	03000000 	movweq	r0, #0
    6830:	00000286 	andeq	r0, r0, r6, lsl #5
    6834:	31039606 	tstcc	r3, r6, lsl #12
    6838:	08000002 	stmdaeq	r0, {r1}
    683c:	0000025b 	andeq	r0, r0, fp, asr r2
    6840:	0002670f 	andeq	r6, r2, pc, lsl #14
    6844:	00027700 	andeq	r7, r2, r0, lsl #14
    6848:	08001000 	stmdaeq	r0, {ip}
    684c:	0000026c 	andeq	r0, r0, ip, ror #4
    6850:	0002eb0d 	andeq	lr, r2, sp, lsl #22
    6854:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    6858:	00000277 	andeq	r0, r0, r7, ror r2
    685c:	cd0f0101 	stfgts	f0, [pc, #-4]	; 6860 <__exidx_end+0x39e4>
    6860:	95000000 	strls	r0, [r0, #-0]
    6864:	10000002 	andne	r0, r0, r2
    6868:	028a0800 	addeq	r0, sl, #0, 16
    686c:	a70d0000 	strge	r0, [sp, -r0]
    6870:	07000003 	streq	r0, [r0, -r3]
    6874:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    6878:	01010000 	mrseq	r0, (UNDEF: 1)
    687c:	0001410d 	andeq	r4, r1, sp, lsl #2
    6880:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6884:	000000e3 	andeq	r0, r0, r3, ror #1
    6888:	a9110101 	ldmdbge	r1, {r0, r8}
    688c:	08000004 	stmdaeq	r0, {r2}
    6890:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6894:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6898:	0002c904 	andeq	ip, r2, r4, lsl #18
    689c:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    68a0:	13000002 	movwne	r0, #2
    68a4:	000000c1 	andeq	r0, r0, r1, asr #1
    68a8:	01c80f00 	biceq	r0, r8, r0, lsl #30
    68ac:	02e00000 	rsceq	r0, r0, #0
    68b0:	00100000 	andseq	r0, r0, r0
    68b4:	0002d508 	andeq	sp, r2, r8, lsl #10
    68b8:	04641400 	strbteq	r1, [r4], #-1024	; 0xfffffc00
    68bc:	7f080000 	svcvc	0x00080000
    68c0:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    68c4:	01010000 	mrseq	r0, (UNDEF: 1)
    68c8:	00039f14 	andeq	r9, r3, r4, lsl pc
    68cc:	01820800 	orreq	r0, r2, r0, lsl #16
    68d0:	0000ef14 	andeq	lr, r0, r4, lsl pc
    68d4:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    68d8:	00000494 	muleq	r0, r4, r4
    68dc:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    68e0:	000000e3 	andeq	r0, r0, r3, ror #1
    68e4:	08150101 	ldmdaeq	r5, {r0, r8}
    68e8:	09030308 	stmdbeq	r3, {r3, r8, r9}
    68ec:	00000339 	andeq	r0, r0, r9, lsr r3
    68f0:	00223416 	eoreq	r3, r2, r6, lsl r4
    68f4:	03070800 	movweq	r0, #30720	; 0x7800
    68f8:	0000c107 	andeq	ip, r0, r7, lsl #2
    68fc:	7f160000 	svcvc	0x00160000
    6900:	08000005 	stmdaeq	r0, {r0, r2}
    6904:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    6908:	04000000 	streq	r0, [r0], #-0
    690c:	02661100 	rsbeq	r1, r6, #0, 2
    6910:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    6914:	03120303 	tsteq	r2, #201326592	; 0xc000000
    6918:	b8170000 	ldmdalt	r7, {}	; <UNPREDICTABLE>
    691c:	30000004 	andcc	r0, r0, r4
    6920:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    6924:	000003a9 	andeq	r0, r0, r9, lsr #7
    6928:	0004b116 	andeq	fp, r4, r6, lsl r1
    692c:	03140800 	tsteq	r4, #0, 16
    6930:	0000c108 	andeq	ip, r0, r8, lsl #2
    6934:	d2160000 	andsle	r0, r6, #0
    6938:	08000002 	stmdaeq	r0, {r1}
    693c:	c1080315 	tstgt	r8, r5, lsl r3
    6940:	02000000 	andeq	r0, r0, #0
    6944:	0004ac16 	andeq	sl, r4, r6, lsl ip
    6948:	03160800 	tsteq	r6, #0, 16
    694c:	0002b60b 	andeq	fp, r2, fp, lsl #12
    6950:	7f160400 	svcvc	0x00160400
    6954:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    6958:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    695c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6960:	00045d16 	andeq	r5, r4, r6, lsl sp
    6964:	03180800 	tsteq	r8, #0, 16
    6968:	0003a90f 	andeq	sl, r3, pc, lsl #18
    696c:	cd160c00 	ldcgt	12, cr0, [r6, #-0]
    6970:	08000002 	stmdaeq	r0, {r1}
    6974:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    6978:	2c000003 	stccs	0, cr0, [r0], {3}
    697c:	03390f00 	teqeq	r9, #0, 30
    6980:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    6984:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    6988:	03000000 	movweq	r0, #0
    698c:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    6990:	11000003 	tstne	r0, r3
    6994:	000004c3 	andeq	r0, r0, r3, asr #9
    6998:	1b031c08 	blne	cd9c0 <__ccfg+0xada18>
    699c:	00000346 	andeq	r0, r0, r6, asr #6
    69a0:	00039514 	andeq	r9, r3, r4, lsl r5
    69a4:	031e0800 	tsteq	lr, #0, 16
    69a8:	0003db14 	andeq	sp, r3, r4, lsl fp
    69ac:	0e010100 	adfeqs	f0, f1, f0
    69b0:	0003bf04 	andeq	fp, r3, r4, lsl #30
    69b4:	14060d00 	strne	r0, [r6], #-3328	; 0xfffff300
    69b8:	0a010000 	beq	469c0 <__ccfg+0x26a18>
    69bc:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    69c0:	19010100 	stmdbne	r1, {r8}
    69c4:	0014e501 	andseq	lr, r4, r1, lsl #10
    69c8:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    69cc:	00008101 	andeq	r8, r0, r1, lsl #2
    69d0:	00186400 	andseq	r6, r8, r0, lsl #8
    69d4:	0018c400 	andseq	ip, r8, r0, lsl #8
    69d8:	499c0100 	ldmibmi	ip, {r8}
    69dc:	1a000004 	bne	69f4 <__exidx_end+0x3b78>
    69e0:	01007473 	tsteq	r0, r3, ror r4
    69e4:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    69e8:	24160000 	ldrcs	r0, [r6], #-0
    69ec:	661b0000 	ldrvs	r0, [fp], -r0
    69f0:	0100746d 	tsteq	r0, sp, ror #8
    69f4:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    69f8:	91020000 	mrsls	r0, (UNDEF: 2)
    69fc:	561d1c74 			; <UNDEFINED> instruction: 0x561d1c74
    6a00:	01000014 	tsteq	r0, r4, lsl r0
    6a04:	00810613 	addeq	r0, r1, r3, lsl r6
    6a08:	24340000 	ldrtcs	r0, [r4], #-0
    6a0c:	611e0000 	tstvs	lr, r0
    6a10:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    6a14:	0000b50a 	andeq	fp, r0, sl, lsl #10
    6a18:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6a1c:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    6a20:	00000001 	andeq	r0, r0, r1
    6a24:	0000042d 	andeq	r0, r0, sp, lsr #8
    6a28:	1dff0003 	ldclne	0, cr0, [pc, #12]!	; 6a3c <__exidx_end+0x3bc0>
    6a2c:	01040000 	mrseq	r0, (UNDEF: 4)
    6a30:	00000172 	andeq	r0, r0, r2, ror r1
    6a34:	0014ed0c 	andseq	lr, r4, ip, lsl #26
    6a38:	0000d300 	andeq	sp, r0, r0, lsl #6
    6a3c:	000c7000 	andeq	r7, ip, r0
    6a40:	00000000 	andeq	r0, r0, r0
    6a44:	004d1200 	subeq	r1, sp, r0, lsl #4
    6a48:	06010200 	streq	r0, [r1], -r0, lsl #4
    6a4c:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    6a50:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    6a54:	02000003 	andeq	r0, r0, #3
    6a58:	00b00504 	adcseq	r0, r0, r4, lsl #10
    6a5c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6a60:	0000ab05 	andeq	sl, r0, r5, lsl #22
    6a64:	223c0300 	eorscs	r0, ip, #0, 6
    6a68:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6a6c:	00004d18 	andeq	r4, r0, r8, lsl sp
    6a70:	08010200 	stmdaeq	r1, {r9}
    6a74:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    6a78:	00212a03 	eoreq	r2, r1, r3, lsl #20
    6a7c:	19310200 	ldmdbne	r1!, {r9}
    6a80:	00000060 	andeq	r0, r0, r0, rrx
    6a84:	73070202 	movwvc	r0, #29186	; 0x7202
    6a88:	03000002 	movweq	r0, #2
    6a8c:	000017f3 	strdeq	r1, [r0], -r3
    6a90:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6a94:	02000000 	andeq	r0, r0, #0
    6a98:	00850704 	addeq	r0, r5, r4, lsl #14
    6a9c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6aa0:	00008007 	andeq	r8, r0, r7
    6aa4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6aa8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6aac:	8a070402 	bhi	1c7abc <__ccfg+0x1a7b14>
    6ab0:	03000000 	movweq	r0, #0
    6ab4:	00001600 	andeq	r1, r0, r0, lsl #12
    6ab8:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    6abc:	05000000 	streq	r0, [r0, #-0]
    6ac0:	0000008f 	andeq	r0, r0, pc, lsl #1
    6ac4:	0013f803 	andseq	pc, r3, r3, lsl #16
    6ac8:	122b0300 	eorne	r0, fp, #0, 6
    6acc:	00000041 	andeq	r0, r0, r1, asr #32
    6ad0:	0000a006 	andeq	sl, r0, r6
    6ad4:	16510300 	ldrbne	r0, [r1], -r0, lsl #6
    6ad8:	2c030000 	stccs	0, cr0, [r3], {-0}
    6adc:	00006712 	andeq	r6, r0, r2, lsl r7
    6ae0:	00b10500 	adcseq	r0, r1, r0, lsl #10
    6ae4:	a6030000 	strge	r0, [r3], -r0
    6ae8:	03000002 	movweq	r0, #2
    6aec:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6af0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6af4:	5c093203 	sfmpl	f3, 4, [r9], {3}
    6af8:	08000001 	stmdaeq	r0, {r0}
    6afc:	000002c1 	andeq	r0, r0, r1, asr #5
    6b00:	a0073403 	andge	r3, r7, r3, lsl #8
    6b04:	01000000 	mrseq	r0, (UNDEF: 0)
    6b08:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    6b0c:	000000a4 	andeq	r0, r0, r4, lsr #1
    6b10:	a0033503 	andge	r3, r3, r3, lsl #10
    6b14:	01000000 	mrseq	r0, (UNDEF: 0)
    6b18:	08000601 	stmdaeq	r0, {r0, r9, sl}
    6b1c:	0000028f 	andeq	r0, r0, pc, lsl #5
    6b20:	a0033603 	andge	r3, r3, r3, lsl #12
    6b24:	01000000 	mrseq	r0, (UNDEF: 0)
    6b28:	08000501 	stmdaeq	r0, {r0, r8, sl}
    6b2c:	0000042b 	andeq	r0, r0, fp, lsr #8
    6b30:	a0033703 	andge	r3, r3, r3, lsl #14
    6b34:	01000000 	mrseq	r0, (UNDEF: 0)
    6b38:	08000401 	stmdaeq	r0, {r0, sl}
    6b3c:	00000424 	andeq	r0, r0, r4, lsr #8
    6b40:	a0033803 	andge	r3, r3, r3, lsl #16
    6b44:	01000000 	mrseq	r0, (UNDEF: 0)
    6b48:	09000004 	stmdbeq	r0, {r2}
    6b4c:	00000415 	andeq	r0, r0, r5, lsl r4
    6b50:	a0073a03 	andge	r3, r7, r3, lsl #20
    6b54:	01000000 	mrseq	r0, (UNDEF: 0)
    6b58:	00004c09 	andeq	r4, r0, r9, lsl #24
    6b5c:	033c0300 	teqeq	ip, #0, 6
    6b60:	000000a0 	andeq	r0, r0, r0, lsr #1
    6b64:	00790902 	rsbseq	r0, r9, r2, lsl #18
    6b68:	3d030000 	stccc	0, cr0, [r3, #-0]
    6b6c:	0000a003 	andeq	sl, r0, r3
    6b70:	61090300 	mrsvs	r0, (UNDEF: 57)
    6b74:	03000001 	movweq	r0, #1
    6b78:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    6b7c:	00040000 	andeq	r0, r4, r0
    6b80:	00045403 	andeq	r5, r4, r3, lsl #8
    6b84:	03410300 	movteq	r0, #4864	; 0x1300
    6b88:	000000ce 	andeq	r0, r0, lr, asr #1
    6b8c:	00015c06 	andeq	r5, r1, r6, lsl #24
    6b90:	02b50a00 	adcseq	r0, r5, #0, 20
    6b94:	43030000 	movwmi	r0, #12288	; 0x3000
    6b98:	0001681a 	andeq	r6, r1, sl, lsl r8
    6b9c:	0a010100 	beq	46fa4 <__ccfg+0x26ffc>
    6ba0:	00000321 	andeq	r0, r0, r1, lsr #6
    6ba4:	890e4503 	stmdbhi	lr, {r0, r1, r8, sl, lr}
    6ba8:	01000001 	tsteq	r0, r1
    6bac:	8f040b01 	svchi	0x00040b01
    6bb0:	02000001 	andeq	r0, r0, #1
    6bb4:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    6bb8:	8f050000 	svchi	0x00050000
    6bbc:	0a000001 	beq	6bc8 <__exidx_end+0x3d4c>
    6bc0:	0000032f 	andeq	r0, r0, pc, lsr #6
    6bc4:	891e4503 	ldmdbhi	lr, {r0, r1, r8, sl, lr}
    6bc8:	01000001 	tsteq	r0, r1
    6bcc:	04080701 	streq	r0, [r8], #-1793	; 0xfffff8ff
    6bd0:	01da098f 	bicseq	r0, sl, pc, lsl #19
    6bd4:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    6bd8:	04000002 	streq	r0, [r0], #-2
    6bdc:	00670b90 	mlseq	r7, r0, fp, r0
    6be0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6be4:	0000062d 	andeq	r0, r0, sp, lsr #12
    6be8:	8f089104 	svchi	0x00089104
    6bec:	04000000 	streq	r0, [r0], #-0
    6bf0:	00049c09 	andeq	r9, r4, r9, lsl #24
    6bf4:	10920400 	addsne	r0, r2, r0, lsl #8
    6bf8:	000000ac 	andeq	r0, r0, ip, lsr #1
    6bfc:	32030006 	andcc	r0, r3, #6
    6c00:	04000004 	streq	r0, [r0], #-4
    6c04:	01a90393 			; <UNDEFINED> instruction: 0x01a90393
    6c08:	da0c0000 	ble	306c10 <__ccfg+0x2e6c68>
    6c0c:	f1000001 	cps	#1
    6c10:	0d000001 	stceq	0, cr0, [r0, #-4]
    6c14:	00420a00 	subeq	r0, r2, r0, lsl #20
    6c18:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    6c1c:	0001e60f 	andeq	lr, r1, pc, lsl #12
    6c20:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6c24:	09910501 	ldmibeq	r1, {r0, r8, sl}
    6c28:	00000229 	andeq	r0, r0, r9, lsr #4
    6c2c:	00048f08 	andeq	r8, r4, r8, lsl #30
    6c30:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    6c34:	000000a0 	andeq	r0, r0, r0, lsr #1
    6c38:	00010701 	andeq	r0, r1, r1, lsl #14
    6c3c:	00003d08 	andeq	r3, r0, r8, lsl #26
    6c40:	03940500 	orrseq	r0, r4, #0, 10
    6c44:	000000a0 	andeq	r0, r0, r0, lsr #1
    6c48:	00000101 	andeq	r0, r0, r1, lsl #2
    6c4c:	02860300 	addeq	r0, r6, #0, 6
    6c50:	96050000 	strls	r0, [r5], -r0
    6c54:	0001ff03 	andeq	pc, r1, r3, lsl #30
    6c58:	02290500 	eoreq	r0, r9, #0, 10
    6c5c:	350c0000 	strcc	r0, [ip, #-0]
    6c60:	45000002 	strmi	r0, [r0, #-2]
    6c64:	0d000002 	stceq	0, cr0, [r0, #-8]
    6c68:	023a0500 	eorseq	r0, sl, #0, 10
    6c6c:	eb0a0000 	bl	286c74 <__ccfg+0x266ccc>
    6c70:	05000002 	streq	r0, [r0, #-2]
    6c74:	0245179c 	subeq	r1, r5, #156, 14	; 0x2700000
    6c78:	01010000 	mrseq	r0, (UNDEF: 1)
    6c7c:	00009b0c 	andeq	r9, r0, ip, lsl #22
    6c80:	00026300 	andeq	r6, r2, r0, lsl #6
    6c84:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6c88:	00000258 	andeq	r0, r0, r8, asr r2
    6c8c:	0003a70a 	andeq	sl, r3, sl, lsl #14
    6c90:	13060600 	movwne	r0, #26112	; 0x6600
    6c94:	00000263 	andeq	r0, r0, r3, ror #4
    6c98:	410a0101 	tstmi	sl, r1, lsl #2
    6c9c:	04000001 	streq	r0, [r0], #-1
    6ca0:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    6ca4:	01010000 	mrseq	r0, (UNDEF: 1)
    6ca8:	0004a90e 	andeq	sl, r4, lr, lsl #18
    6cac:	016e0700 	cmneq	lr, r0, lsl #14
    6cb0:	00029110 	andeq	r9, r2, r0, lsl r1
    6cb4:	97040b00 	strls	r0, [r4, -r0, lsl #22]
    6cb8:	0f000002 	svceq	0x00000002
    6cbc:	0002a301 	andeq	sl, r2, r1, lsl #6
    6cc0:	008f1000 	addeq	r1, pc, r0
    6cc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    6cc8:	00000196 	muleq	r0, r6, r1
    6ccc:	000002ae 	andeq	r0, r0, lr, lsr #5
    6cd0:	a305000d 	movwge	r0, #20493	; 0x500d
    6cd4:	11000002 	tstne	r0, r2
    6cd8:	00000464 	andeq	r0, r0, r4, ror #8
    6cdc:	16017f07 	strne	r7, [r1], -r7, lsl #30
    6ce0:	000002ae 	andeq	r0, r0, lr, lsr #5
    6ce4:	9f110101 	svcls	0x00110101
    6ce8:	07000003 	streq	r0, [r0, -r3]
    6cec:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    6cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cf4:	04941101 	ldreq	r1, [r4], #257	; 0x101
    6cf8:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    6cfc:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    6d00:	01010000 	mrseq	r0, (UNDEF: 1)
    6d04:	03070812 	movweq	r0, #30738	; 0x7812
    6d08:	03070903 	movweq	r0, #30979	; 0x7903
    6d0c:	34130000 	ldrcc	r0, [r3], #-0
    6d10:	07000022 	streq	r0, [r0, -r2, lsr #32]
    6d14:	8f070307 	svchi	0x00070307
    6d18:	00000000 	andeq	r0, r0, r0
    6d1c:	00057f13 	andeq	r7, r5, r3, lsl pc
    6d20:	03080700 	movweq	r0, #34560	; 0x8700
    6d24:	0000c208 	andeq	ip, r0, r8, lsl #4
    6d28:	0e000400 	cfcpyseq	mvf0, mvf0
    6d2c:	00000266 	andeq	r0, r0, r6, ror #4
    6d30:	03030907 	movweq	r0, #14599	; 0x3907
    6d34:	000002e0 	andeq	r0, r0, r0, ror #5
    6d38:	0004b814 	andeq	fp, r4, r4, lsl r8
    6d3c:	0b073000 	bleq	1d2d44 <__ccfg+0x1b2d9c>
    6d40:	03770803 	cmneq	r7, #196608	; 0x30000
    6d44:	b1130000 	tstlt	r3, r0
    6d48:	07000004 	streq	r0, [r0, -r4]
    6d4c:	8f080314 	svchi	0x00080314
    6d50:	00000000 	andeq	r0, r0, r0
    6d54:	0002d213 	andeq	sp, r2, r3, lsl r2
    6d58:	03150700 	tsteq	r5, #0, 14
    6d5c:	00008f08 	andeq	r8, r0, r8, lsl #30
    6d60:	ac130200 	lfmge	f0, 4, [r3], {-0}
    6d64:	07000004 	streq	r0, [r0, -r4]
    6d68:	840b0316 	strhi	r0, [fp], #-790	; 0xfffffcea
    6d6c:	04000002 	streq	r0, [r0], #-2
    6d70:	000f7f13 	andeq	r7, pc, r3, lsl pc	; <UNPREDICTABLE>
    6d74:	03170700 	tsteq	r7, #0, 14
    6d78:	0000c209 	andeq	ip, r0, r9, lsl #4
    6d7c:	5d130800 	ldcpl	8, cr0, [r3, #-0]
    6d80:	07000004 	streq	r0, [r0, -r4]
    6d84:	770f0318 	smladvc	pc, r8, r3, r0	; <UNPREDICTABLE>
    6d88:	0c000003 	stceq	0, cr0, [r0], {3}
    6d8c:	0002cd13 	andeq	ip, r2, r3, lsl sp
    6d90:	03190700 	tsteq	r9, #0, 14
    6d94:	00038715 	andeq	r8, r3, r5, lsl r7
    6d98:	0c002c00 	stceq	12, cr2, [r0], {-0}
    6d9c:	00000307 	andeq	r0, r0, r7, lsl #6
    6da0:	00000387 	andeq	r0, r0, r7, lsl #7
    6da4:	00008815 	andeq	r8, r0, r5, lsl r8
    6da8:	0b000300 	bleq	79b0 <__exidx_end+0x4b34>
    6dac:	00031404 	andeq	r1, r3, r4, lsl #8
    6db0:	04c30e00 	strbeq	r0, [r3], #3584	; 0xe00
    6db4:	1c070000 	stcne	0, cr0, [r7], {-0}
    6db8:	03141b03 	tsteq	r4, #3072	; 0xc00
    6dbc:	95110000 	ldrls	r0, [r1, #-0]
    6dc0:	07000003 	streq	r0, [r0, -r3]
    6dc4:	a914031e 	ldmdbge	r4, {r1, r2, r3, r4, r8, r9}
    6dc8:	01000003 	tsteq	r0, r3
    6dcc:	8d040b01 	vstrhi	d0, [r4, #-4]
    6dd0:	16000003 	strne	r0, [r0], -r3
    6dd4:	00153701 	andseq	r3, r5, r1, lsl #14
    6dd8:	011d0100 	tsteq	sp, r0, lsl #2
    6ddc:	0018c401 	andseq	ip, r8, r1, lsl #8
    6de0:	00193400 	andseq	r3, r9, r0, lsl #8
    6de4:	2a9c0100 	bcs	fe7071ec <_estack+0xde7021ec>
    6de8:	17000004 	strne	r0, [r0, -r4]
    6dec:	000000cb 	andeq	r0, r0, fp, asr #1
    6df0:	8f011d01 	svchi	0x00011d01
    6df4:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    6df8:	18000024 	stmdane	r0, {r2, r5}
    6dfc:	00000f7f 	andeq	r0, r0, pc, ror pc
    6e00:	2a011d01 	bcs	4e20c <__ccfg+0x2e264>
    6e04:	a7000004 	strge	r0, [r0, -r4]
    6e08:	19000024 	stmdbne	r0, {r2, r5}
    6e0c:	00001543 	andeq	r1, r0, r3, asr #10
    6e10:	1a013001 	bne	52e1c <__ccfg+0x32e74>
    6e14:	00000c58 	andeq	r0, r0, r8, asr ip
    6e18:	7274701b 	rsbsvc	r7, r4, #27
    6e1c:	15220100 	strne	r0, [r2, #-256]!	; 0xffffff00
    6e20:	0000042a 	andeq	r0, r0, sl, lsr #8
    6e24:	006c0305 	rsbeq	r0, ip, r5, lsl #6
    6e28:	6c1b2000 	ldcvs	0, cr2, [fp], {-0}
    6e2c:	01006e65 	tsteq	r0, r5, ror #28
    6e30:	00810d23 	addeq	r0, r1, r3, lsr #26
    6e34:	03050000 	movweq	r0, #20480	; 0x5000
    6e38:	20000068 	andcs	r0, r0, r8, rrx
    6e3c:	00153118 	andseq	r3, r5, r8, lsl r1
    6e40:	06240100 	strteq	r0, [r4], -r0, lsl #2
    6e44:	00000081 	andeq	r0, r0, r1, lsl #1
    6e48:	000024d1 	ldrdeq	r2, [r0], -r1
    6e4c:	040b0000 	streq	r0, [fp], #-0
    6e50:	00000196 	muleq	r0, r6, r1
    6e54:	00044000 	andeq	r4, r4, r0
    6e58:	73000300 	movwvc	r0, #768	; 0x300
    6e5c:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    6e60:	00017201 	andeq	r7, r1, r1, lsl #4
    6e64:	15590c00 	ldrbne	r0, [r9, #-3072]	; 0xfffff400
    6e68:	00d30000 	sbcseq	r0, r3, r0
    6e6c:	0ca00000 	stceq	0, cr0, [r0]
    6e70:	00000000 	andeq	r0, r0, r0
    6e74:	4eb70000 	cdpmi	0, 11, cr0, cr7, cr0, {0}
    6e78:	01020000 	mrseq	r0, (UNDEF: 2)
    6e7c:	0003b706 	andeq	fp, r3, r6, lsl #14
    6e80:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6e84:	000003f1 	strdeq	r0, [r0], -r1
    6e88:	b0050402 	andlt	r0, r5, r2, lsl #8
    6e8c:	02000000 	andeq	r0, r0, #0
    6e90:	00ab0508 	adceq	r0, fp, r8, lsl #10
    6e94:	3c030000 	stccc	0, cr0, [r3], {-0}
    6e98:	02000022 	andeq	r0, r0, #34	; 0x22
    6e9c:	004d182e 	subeq	r1, sp, lr, lsr #16
    6ea0:	01020000 	mrseq	r0, (UNDEF: 2)
    6ea4:	0003b508 	andeq	fp, r3, r8, lsl #10
    6ea8:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    6eac:	31020000 	mrscc	r0, (UNDEF: 2)
    6eb0:	00006019 	andeq	r6, r0, r9, lsl r0
    6eb4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6eb8:	00000273 	andeq	r0, r0, r3, ror r2
    6ebc:	0017f303 	andseq	pc, r7, r3, lsl #6
    6ec0:	19340200 	ldmdbne	r4!, {r9}
    6ec4:	00000073 	andeq	r0, r0, r3, ror r0
    6ec8:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    6ecc:	02000000 	andeq	r0, r0, #0
    6ed0:	00800708 	addeq	r0, r0, r8, lsl #14
    6ed4:	04040000 	streq	r0, [r4], #-0
    6ed8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6edc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6ee0:	0000008a 	andeq	r0, r0, sl, lsl #1
    6ee4:	00160003 	andseq	r0, r6, r3
    6ee8:	12270300 	eorne	r0, r7, #0, 6
    6eec:	00000054 	andeq	r0, r0, r4, asr r0
    6ef0:	00008f05 	andeq	r8, r0, r5, lsl #30
    6ef4:	13f80300 	mvnsne	r0, #0, 6
    6ef8:	2b030000 	blcs	c6f00 <__ccfg+0xa6f58>
    6efc:	00004112 	andeq	r4, r0, r2, lsl r1
    6f00:	00a00600 	adceq	r0, r0, r0, lsl #12
    6f04:	51030000 	mrspl	r0, (UNDEF: 3)
    6f08:	03000016 	movweq	r0, #22
    6f0c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6f10:	b1050000 	mrslt	r0, (UNDEF: 5)
    6f14:	03000000 	movweq	r0, #0
    6f18:	000002a6 	andeq	r0, r0, r6, lsr #5
    6f1c:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    6f20:	03000000 	movweq	r0, #0
    6f24:	000007a2 	andeq	r0, r0, r2, lsr #15
    6f28:	da102e03 	ble	41273c <__ccfg+0x3f2794>
    6f2c:	07000000 	streq	r0, [r0, -r0]
    6f30:	00008f04 	andeq	r8, r0, r4, lsl #30
    6f34:	03080800 	movweq	r0, #34816	; 0x8800
    6f38:	016e0932 	cmneq	lr, r2, lsr r9
    6f3c:	c1090000 	mrsgt	r0, (UNDEF: 9)
    6f40:	03000002 	movweq	r0, #2
    6f44:	00a00734 	adceq	r0, r0, r4, lsr r7
    6f48:	01010000 	mrseq	r0, (UNDEF: 1)
    6f4c:	a4090007 	strge	r0, [r9], #-7
    6f50:	03000000 	movweq	r0, #0
    6f54:	00a00335 	adceq	r0, r0, r5, lsr r3
    6f58:	01010000 	mrseq	r0, (UNDEF: 1)
    6f5c:	8f090006 	svchi	0x00090006
    6f60:	03000002 	movweq	r0, #2
    6f64:	00a00336 	adceq	r0, r0, r6, lsr r3
    6f68:	01010000 	mrseq	r0, (UNDEF: 1)
    6f6c:	2b090005 	blcs	246f88 <__ccfg+0x226fe0>
    6f70:	03000004 	movweq	r0, #4
    6f74:	00a00337 	adceq	r0, r0, r7, lsr r3
    6f78:	01010000 	mrseq	r0, (UNDEF: 1)
    6f7c:	24090004 	strcs	r0, [r9], #-4
    6f80:	03000004 	movweq	r0, #4
    6f84:	00a00338 	adceq	r0, r0, r8, lsr r3
    6f88:	04010000 	streq	r0, [r1], #-0
    6f8c:	150a0000 	strne	r0, [sl, #-0]
    6f90:	03000004 	movweq	r0, #4
    6f94:	00a0073a 	adceq	r0, r0, sl, lsr r7
    6f98:	0a010000 	beq	46fa0 <__ccfg+0x26ff8>
    6f9c:	0000004c 	andeq	r0, r0, ip, asr #32
    6fa0:	a0033c03 	andge	r3, r3, r3, lsl #24
    6fa4:	02000000 	andeq	r0, r0, #0
    6fa8:	0000790a 	andeq	r7, r0, sl, lsl #18
    6fac:	033d0300 	teqeq	sp, #0, 6
    6fb0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6fb4:	01610a03 	cmneq	r1, r3, lsl #20
    6fb8:	3f030000 	svccc	0x00030000
    6fbc:	0000b108 	andeq	fp, r0, r8, lsl #2
    6fc0:	03000400 	movweq	r0, #1024	; 0x400
    6fc4:	00000454 	andeq	r0, r0, r4, asr r4
    6fc8:	e0034103 	and	r4, r3, r3, lsl #2
    6fcc:	06000000 	streq	r0, [r0], -r0
    6fd0:	0000016e 	andeq	r0, r0, lr, ror #2
    6fd4:	0002b50b 	andeq	fp, r2, fp, lsl #10
    6fd8:	1a430300 	bne	10c7be0 <__ccfg+0x10a7c38>
    6fdc:	0000017a 	andeq	r0, r0, sl, ror r1
    6fe0:	210b0101 	tstcs	fp, r1, lsl #2
    6fe4:	03000003 	movweq	r0, #3
    6fe8:	019b0e45 	orrseq	r0, fp, r5, asr #28
    6fec:	01010000 	mrseq	r0, (UNDEF: 1)
    6ff0:	01a10407 			; <UNDEFINED> instruction: 0x01a10407
    6ff4:	01020000 	mrseq	r0, (UNDEF: 2)
    6ff8:	0003be08 	andeq	fp, r3, r8, lsl #28
    6ffc:	01a10500 			; <UNDEFINED> instruction: 0x01a10500
    7000:	2f0b0000 	svccs	0x000b0000
    7004:	03000003 	movweq	r0, #3
    7008:	019b1e45 	orrseq	r1, fp, r5, asr #28
    700c:	01010000 	mrseq	r0, (UNDEF: 1)
    7010:	8f040808 	svchi	0x00040808
    7014:	0001ec09 	andeq	lr, r1, r9, lsl #24
    7018:	02c80a00 	sbceq	r0, r8, #0, 20
    701c:	90040000 	andls	r0, r4, r0
    7020:	0000670b 	andeq	r6, r0, fp, lsl #14
    7024:	2d0a0000 	stccs	0, cr0, [sl, #-0]
    7028:	04000006 	streq	r0, [r0], #-6
    702c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    7030:	0a040000 	beq	107038 <__ccfg+0xe7090>
    7034:	0000049c 	muleq	r0, ip, r4
    7038:	ac109204 	lfmge	f1, 1, [r0], {4}
    703c:	06000000 	streq	r0, [r0], -r0
    7040:	04320300 	ldrteq	r0, [r2], #-768	; 0xfffffd00
    7044:	93040000 	movwls	r0, #16384	; 0x4000
    7048:	0001bb03 	andeq	fp, r1, r3, lsl #22
    704c:	01ec0c00 	mvneq	r0, r0, lsl #24
    7050:	02030000 	andeq	r0, r3, #0
    7054:	000d0000 	andeq	r0, sp, r0
    7058:	0000420b 	andeq	r4, r0, fp, lsl #4
    705c:	0f990400 	svceq	0x00990400
    7060:	000001f8 	strdeq	r0, [r0], -r8
    7064:	01080101 	tsteq	r8, r1, lsl #2
    7068:	3b099105 	blcc	26b484 <__ccfg+0x24b4dc>
    706c:	09000002 	stmdbeq	r0, {r1}
    7070:	0000048f 	andeq	r0, r0, pc, lsl #9
    7074:	a0079305 	andge	r9, r7, r5, lsl #6
    7078:	01000000 	mrseq	r0, (UNDEF: 0)
    707c:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    7080:	0000003d 	andeq	r0, r0, sp, lsr r0
    7084:	a0039405 	andge	r9, r3, r5, lsl #8
    7088:	01000000 	mrseq	r0, (UNDEF: 0)
    708c:	00000001 	andeq	r0, r0, r1
    7090:	00028603 	andeq	r8, r2, r3, lsl #12
    7094:	03960500 	orrseq	r0, r6, #0, 10
    7098:	00000211 	andeq	r0, r0, r1, lsl r2
    709c:	00023b05 	andeq	r3, r2, r5, lsl #22
    70a0:	02470c00 	subeq	r0, r7, #0, 24
    70a4:	02570000 	subseq	r0, r7, #0
    70a8:	000d0000 	andeq	r0, sp, r0
    70ac:	00024c05 	andeq	r4, r2, r5, lsl #24
    70b0:	02eb0b00 	rsceq	r0, fp, #0, 22
    70b4:	9c050000 	stcls	0, cr0, [r5], {-0}
    70b8:	00025717 	andeq	r5, r2, r7, lsl r7
    70bc:	0c010100 	stfeqs	f0, [r1], {-0}
    70c0:	0000009b 	muleq	r0, fp, r0
    70c4:	00000275 	andeq	r0, r0, r5, ror r2
    70c8:	6a05000d 	bvs	147104 <__ccfg+0x12715c>
    70cc:	0b000002 	bleq	70dc <__exidx_end+0x4260>
    70d0:	000003a7 	andeq	r0, r0, r7, lsr #7
    70d4:	75130606 	ldrvc	r0, [r3, #-1542]	; 0xfffff9fa
    70d8:	01000002 	tsteq	r0, r2
    70dc:	01410b01 	cmpeq	r1, r1, lsl #22
    70e0:	c3040000 	movwgt	r0, #16384	; 0x4000
    70e4:	0000b10e 	andeq	fp, r0, lr, lsl #2
    70e8:	0e010100 	adfeqs	f0, f1, f0
    70ec:	000004a9 	andeq	r0, r0, r9, lsr #9
    70f0:	10016e07 	andne	r6, r1, r7, lsl #28
    70f4:	000002a3 	andeq	r0, r0, r3, lsr #5
    70f8:	02a90407 	adceq	r0, r9, #117440512	; 0x7000000
    70fc:	010f0000 	mrseq	r0, CPSR
    7100:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    7104:	00008f10 	andeq	r8, r0, r0, lsl pc
    7108:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    710c:	c0000001 	andgt	r0, r0, r1
    7110:	0d000002 	stceq	0, cr0, [r0, #-8]
    7114:	02b50500 	adcseq	r0, r5, #0, 10
    7118:	64110000 	ldrvs	r0, [r1], #-0
    711c:	07000004 	streq	r0, [r0, -r4]
    7120:	c016017f 	andsgt	r0, r6, pc, ror r1
    7124:	01000002 	tsteq	r0, r2
    7128:	039f1101 	orrseq	r1, pc, #1073741824	; 0x40000000
    712c:	82070000 	andhi	r0, r7, #0
    7130:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    7134:	01010000 	mrseq	r0, (UNDEF: 1)
    7138:	00049411 	andeq	r9, r4, r1, lsl r4
    713c:	02d80700 	sbcseq	r0, r8, #0, 14
    7140:	0000b10e 	andeq	fp, r0, lr, lsl #2
    7144:	12010100 	andne	r0, r1, #0, 2
    7148:	03030708 	movweq	r0, #14088	; 0x3708
    714c:	00031909 	andeq	r1, r3, r9, lsl #18
    7150:	22341300 	eorscs	r1, r4, #0, 6
    7154:	07070000 	streq	r0, [r7, -r0]
    7158:	008f0703 	addeq	r0, pc, r3, lsl #14
    715c:	13000000 	movwne	r0, #0
    7160:	0000057f 	andeq	r0, r0, pc, ror r5
    7164:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    7168:	000000c2 	andeq	r0, r0, r2, asr #1
    716c:	660e0004 	strvs	r0, [lr], -r4
    7170:	07000002 	streq	r0, [r0, -r2]
    7174:	f2030309 	vcgt.s8	d0, d3, d9
    7178:	14000002 	strne	r0, [r0], #-2
    717c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    7180:	030b0730 	movweq	r0, #46896	; 0xb730
    7184:	00038908 	andeq	r8, r3, r8, lsl #18
    7188:	04b11300 	ldrteq	r1, [r1], #768	; 0x300
    718c:	14070000 	strne	r0, [r7], #-0
    7190:	008f0803 	addeq	r0, pc, r3, lsl #16
    7194:	13000000 	movwne	r0, #0
    7198:	000002d2 	ldrdeq	r0, [r0], -r2
    719c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    71a0:	0000008f 	andeq	r0, r0, pc, lsl #1
    71a4:	04ac1302 	strteq	r1, [ip], #770	; 0x302
    71a8:	16070000 	strne	r0, [r7], -r0
    71ac:	02960b03 	addseq	r0, r6, #3072	; 0xc00
    71b0:	13040000 	movwne	r0, #16384	; 0x4000
    71b4:	00000f7f 	andeq	r0, r0, pc, ror pc
    71b8:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    71bc:	000000c2 	andeq	r0, r0, r2, asr #1
    71c0:	045d1308 	ldrbeq	r1, [sp], #-776	; 0xfffffcf8
    71c4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    71c8:	03890f03 	orreq	r0, r9, #3, 30
    71cc:	130c0000 	movwne	r0, #49152	; 0xc000
    71d0:	000002cd 	andeq	r0, r0, sp, asr #5
    71d4:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    71d8:	00000399 	muleq	r0, r9, r3
    71dc:	190c002c 	stmdbne	ip, {r2, r3, r5}
    71e0:	99000003 	stmdbls	r0, {r0, r1}
    71e4:	15000003 	strne	r0, [r0, #-3]
    71e8:	00000088 	andeq	r0, r0, r8, lsl #1
    71ec:	04070003 	streq	r0, [r7], #-3
    71f0:	00000326 	andeq	r0, r0, r6, lsr #6
    71f4:	0004c30e 	andeq	ip, r4, lr, lsl #6
    71f8:	031c0700 	tsteq	ip, #0, 14
    71fc:	0003261b 	andeq	r2, r3, fp, lsl r6
    7200:	03951100 	orrseq	r1, r5, #0, 2
    7204:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    7208:	03bb1403 			; <UNDEFINED> instruction: 0x03bb1403
    720c:	01010000 	mrseq	r0, (UNDEF: 1)
    7210:	039f0407 	orrseq	r0, pc, #117440512	; 0x7000000
    7214:	06160000 	ldreq	r0, [r6], -r0
    7218:	01000014 	tsteq	r0, r4, lsl r0
    721c:	019b070d 	orrseq	r0, fp, sp, lsl #14
    7220:	05010000 	streq	r0, [r1, #-0]
    7224:	00007003 	andeq	r7, r0, r3
    7228:	4e011720 	cdpmi	7, 0, cr1, cr1, cr0, {1}
    722c:	01000015 	tsteq	r0, r5, lsl r0
    7230:	34010123 	strcc	r0, [r1], #-291	; 0xfffffedd
    7234:	50000019 	andpl	r0, r0, r9, lsl r0
    7238:	0100001a 	tsteq	r0, sl, lsl r0
    723c:	00cb189c 	smulleq	r1, fp, ip, r8
    7240:	23010000 	movwcs	r0, #4096	; 0x1000
    7244:	00008f01 	andeq	r8, r0, r1, lsl #30
    7248:	0024e400 	eoreq	lr, r4, r0, lsl #8
    724c:	0f7f1900 	svceq	0x007f1900
    7250:	23010000 	movwcs	r0, #4096	; 0x1000
    7254:	0000ce01 	andeq	ip, r0, r1, lsl #28
    7258:	00250200 	eoreq	r0, r5, r0, lsl #4
    725c:	0c801a00 	vstmiaeq	r0, {s2-s1}
    7260:	701b0000 	andsvc	r0, fp, r0
    7264:	01007274 	tsteq	r0, r4, ror r2
    7268:	019b0f28 	orrseq	r0, fp, r8, lsr #30
    726c:	03050000 	movweq	r0, #20480	; 0x5000
    7270:	20000078 	andcs	r0, r0, r8, ror r0
    7274:	6e656c1b 	mcrvs	12, 3, r6, cr5, cr11, {0}
    7278:	0d290100 	stfeqs	f0, [r9, #-0]
    727c:	00000081 	andeq	r0, r0, r1, lsl #1
    7280:	00740305 	rsbseq	r0, r4, r5, lsl #6
    7284:	31192000 	tstcc	r9, r0
    7288:	01000015 	tsteq	r0, r5, lsl r0
    728c:	0081062a 	addeq	r0, r1, sl, lsr #12
    7290:	25580000 	ldrbcs	r0, [r8, #-0]
    7294:	00000000 	andeq	r0, r0, r0
    7298:	0005f000 	andeq	pc, r5, r0
    729c:	eb000300 	bl	7ea4 <__exidx_end+0x5028>
    72a0:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    72a4:	00017201 	andeq	r7, r1, r1, lsl #4
    72a8:	159c0c00 	ldrne	r0, [ip, #3072]	; 0xc00
    72ac:	00d30000 	sbcseq	r0, r3, r0
    72b0:	0d280000 	stceq	0, cr0, [r8, #-0]
    72b4:	00000000 	andeq	r0, r0, r0
    72b8:	51060000 	mrspl	r0, (UNDEF: 6)
    72bc:	01020000 	mrseq	r0, (UNDEF: 2)
    72c0:	0003b706 	andeq	fp, r3, r6, lsl #14
    72c4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    72c8:	000003f1 	strdeq	r0, [r0], -r1
    72cc:	b0050402 	andlt	r0, r5, r2, lsl #8
    72d0:	02000000 	andeq	r0, r0, #0
    72d4:	00ab0508 	adceq	r0, fp, r8, lsl #10
    72d8:	3c030000 	stccc	0, cr0, [r3], {-0}
    72dc:	02000022 	andeq	r0, r0, #34	; 0x22
    72e0:	004d182e 	subeq	r1, sp, lr, lsr #16
    72e4:	01020000 	mrseq	r0, (UNDEF: 2)
    72e8:	0003b508 	andeq	fp, r3, r8, lsl #10
    72ec:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    72f0:	31020000 	mrscc	r0, (UNDEF: 2)
    72f4:	00006019 	andeq	r6, r0, r9, lsl r0
    72f8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    72fc:	00000273 	andeq	r0, r0, r3, ror r2
    7300:	0017f303 	andseq	pc, r7, r3, lsl #6
    7304:	19340200 	ldmdbne	r4!, {r9}
    7308:	00000073 	andeq	r0, r0, r3, ror r0
    730c:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    7310:	02000000 	andeq	r0, r0, #0
    7314:	00800708 	addeq	r0, r0, r8, lsl #14
    7318:	04040000 	streq	r0, [r4], #-0
    731c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7320:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7324:	0000008a 	andeq	r0, r0, sl, lsl #1
    7328:	000b8603 	andeq	r8, fp, r3, lsl #12
    732c:	1b280300 	blne	a07f34 <__ccfg+0x9e7f8c>
    7330:	0000009b 	muleq	r0, fp, r0
    7334:	000a9c05 	andeq	r9, sl, r5, lsl #24
    7338:	00090400 	andeq	r0, r9, r0, lsl #8
    733c:	000000b3 	strheq	r0, [r0], -r3
    7340:	000c3c06 	andeq	r3, ip, r6, lsl #24
    7344:	0000b300 	andeq	fp, r0, r0, lsl #6
    7348:	00010000 	andeq	r0, r1, r0
    734c:	9e030407 	cdpls	4, 0, cr0, cr3, cr7, {0}
    7350:	0300000a 	movweq	r0, #10
    7354:	008f1863 	addeq	r1, pc, r3, ror #16
    7358:	00030000 	andeq	r0, r3, r0
    735c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7360:	00541227 	subseq	r1, r4, r7, lsr #4
    7364:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7368:	03000000 	movweq	r0, #0
    736c:	000013f8 	strdeq	r1, [r0], -r8
    7370:	41122b04 	tstmi	r2, r4, lsl #22
    7374:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7378:	000000d2 	ldrdeq	r0, [r0], -r2
    737c:	00165103 	andseq	r5, r6, r3, lsl #2
    7380:	122c0400 	eorne	r0, ip, #0, 8
    7384:	00000067 	andeq	r0, r0, r7, rrx
    7388:	0000e308 	andeq	lr, r0, r8, lsl #6
    738c:	02a60300 	adceq	r0, r6, #0, 6
    7390:	2d040000 	stccs	0, cr0, [r4, #-0]
    7394:	00006712 	andeq	r6, r0, r2, lsl r7
    7398:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    739c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    73a0:	00010c10 	andeq	r0, r1, r0, lsl ip
    73a4:	c1040a00 	tstgt	r4, r0, lsl #20
    73a8:	0b000000 	bleq	73b0 <__exidx_end+0x4534>
    73ac:	09320408 	ldmdbeq	r2!, {r3, sl}
    73b0:	000001a0 	andeq	r0, r0, r0, lsr #3
    73b4:	0002c10c 	andeq	ip, r2, ip, lsl #2
    73b8:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    73bc:	000000d2 	ldrdeq	r0, [r0], -r2
    73c0:	00070101 	andeq	r0, r7, r1, lsl #2
    73c4:	0000a40c 	andeq	sl, r0, ip, lsl #8
    73c8:	03350400 	teqeq	r5, #0, 8
    73cc:	000000d2 	ldrdeq	r0, [r0], -r2
    73d0:	00060101 	andeq	r0, r6, r1, lsl #2
    73d4:	00028f0c 	andeq	r8, r2, ip, lsl #30
    73d8:	03360400 	teqeq	r6, #0, 8
    73dc:	000000d2 	ldrdeq	r0, [r0], -r2
    73e0:	00050101 	andeq	r0, r5, r1, lsl #2
    73e4:	00042b0c 	andeq	r2, r4, ip, lsl #22
    73e8:	03370400 	teqeq	r7, #0, 8
    73ec:	000000d2 	ldrdeq	r0, [r0], -r2
    73f0:	00040101 	andeq	r0, r4, r1, lsl #2
    73f4:	0004240c 	andeq	r2, r4, ip, lsl #8
    73f8:	03380400 	teqeq	r8, #0, 8
    73fc:	000000d2 	ldrdeq	r0, [r0], -r2
    7400:	00000401 	andeq	r0, r0, r1, lsl #8
    7404:	0004150d 	andeq	r1, r4, sp, lsl #10
    7408:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    740c:	000000d2 	ldrdeq	r0, [r0], -r2
    7410:	004c0d01 	subeq	r0, ip, r1, lsl #26
    7414:	3c040000 	stccc	0, cr0, [r4], {-0}
    7418:	0000d203 	andeq	sp, r0, r3, lsl #4
    741c:	790d0200 	stmdbvc	sp, {r9}
    7420:	04000000 	streq	r0, [r0], #-0
    7424:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    7428:	0d030000 	stceq	0, cr0, [r3, #-0]
    742c:	00000161 	andeq	r0, r0, r1, ror #2
    7430:	e3083f04 	movw	r3, #36612	; 0x8f04
    7434:	04000000 	streq	r0, [r0], #-0
    7438:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    743c:	41040000 	mrsmi	r0, (UNDEF: 4)
    7440:	00011203 	andeq	r1, r1, r3, lsl #4
    7444:	01a00900 	lsleq	r0, r0, #18
    7448:	b50e0000 	strlt	r0, [lr, #-0]
    744c:	04000002 	streq	r0, [r0], #-2
    7450:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    7454:	01010000 	mrseq	r0, (UNDEF: 1)
    7458:	0003210e 	andeq	r2, r3, lr, lsl #2
    745c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7460:	000001cd 	andeq	r0, r0, sp, asr #3
    7464:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7468:	000001d3 	ldrdeq	r0, [r0], -r3
    746c:	be080102 	adflte	f0, f0, f2
    7470:	08000003 	stmdaeq	r0, {r0, r1}
    7474:	000001d3 	ldrdeq	r0, [r0], -r3
    7478:	00032f0e 	andeq	r2, r3, lr, lsl #30
    747c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    7480:	000001cd 	andeq	r0, r0, sp, asr #3
    7484:	080b0101 	stmdaeq	fp, {r0, r8}
    7488:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    748c:	0d000002 	stceq	0, cr0, [r0, #-8]
    7490:	000002c8 	andeq	r0, r0, r8, asr #5
    7494:	670b9005 	strvs	r9, [fp, -r5]
    7498:	00000000 	andeq	r0, r0, r0
    749c:	00062d0d 	andeq	r2, r6, sp, lsl #26
    74a0:	08910500 	ldmeq	r1, {r8, sl}
    74a4:	000000c1 	andeq	r0, r0, r1, asr #1
    74a8:	049c0d04 	ldreq	r0, [ip], #3332	; 0xd04
    74ac:	92050000 	andls	r0, r5, #0
    74b0:	0000de10 	andeq	sp, r0, r0, lsl lr
    74b4:	03000600 	movweq	r0, #1536	; 0x600
    74b8:	00000432 	andeq	r0, r0, r2, lsr r4
    74bc:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    74c0:	0f000001 	svceq	0x00000001
    74c4:	0000021e 	andeq	r0, r0, lr, lsl r2
    74c8:	00000235 	andeq	r0, r0, r5, lsr r2
    74cc:	420e0010 	andmi	r0, lr, #16
    74d0:	05000000 	streq	r0, [r0, #-0]
    74d4:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    74d8:	01010000 	mrseq	r0, (UNDEF: 1)
    74dc:	9106010b 	tstls	r6, fp, lsl #2
    74e0:	00026d09 	andeq	r6, r2, r9, lsl #26
    74e4:	048f0c00 	streq	r0, [pc], #3072	; 74ec <__exidx_end+0x4670>
    74e8:	93060000 	movwls	r0, #24576	; 0x6000
    74ec:	0000d207 	andeq	sp, r0, r7, lsl #4
    74f0:	01070100 	mrseq	r0, (UNDEF: 23)
    74f4:	003d0c00 	eorseq	r0, sp, r0, lsl #24
    74f8:	94060000 	strls	r0, [r6], #-0
    74fc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7500:	00010100 	andeq	r0, r1, r0, lsl #2
    7504:	86030000 	strhi	r0, [r3], -r0
    7508:	06000002 	streq	r0, [r0], -r2
    750c:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    7510:	6d080000 	stcvs	0, cr0, [r8, #-0]
    7514:	0f000002 	svceq	0x00000002
    7518:	00000279 	andeq	r0, r0, r9, ror r2
    751c:	00000289 	andeq	r0, r0, r9, lsl #5
    7520:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    7524:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7528:	000002eb 	andeq	r0, r0, fp, ror #5
    752c:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    7530:	01000002 	tsteq	r0, r2
    7534:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    7538:	02a70000 	adceq	r0, r7, #0
    753c:	00100000 	andseq	r0, r0, r0
    7540:	00029c08 	andeq	r9, r2, r8, lsl #24
    7544:	03a70e00 			; <UNDEFINED> instruction: 0x03a70e00
    7548:	06070000 	streq	r0, [r7], -r0
    754c:	0002a713 	andeq	sl, r2, r3, lsl r7
    7550:	0e010100 	adfeqs	f0, f1, f0
    7554:	00000141 	andeq	r0, r0, r1, asr #2
    7558:	e30ec305 	movw	ip, #58117	; 0xe305
    755c:	01000000 	mrseq	r0, (UNDEF: 0)
    7560:	04a91101 	strteq	r1, [r9], #257	; 0x101
    7564:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    7568:	02d51001 	sbcseq	r1, r5, #1
    756c:	040a0000 	streq	r0, [sl], #-0
    7570:	000002db 	ldrdeq	r0, [r0], -fp
    7574:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    7578:	c1130000 	tstgt	r3, r0
    757c:	00000000 	andeq	r0, r0, r0
    7580:	0001da0f 	andeq	sp, r1, pc, lsl #20
    7584:	0002f200 	andeq	pc, r2, r0, lsl #4
    7588:	08001000 	stmdaeq	r0, {ip}
    758c:	000002e7 	andeq	r0, r0, r7, ror #5
    7590:	00046414 	andeq	r6, r4, r4, lsl r4
    7594:	017f0800 	cmneq	pc, r0, lsl #16
    7598:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    759c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    75a0:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    75a4:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    75a8:	000000ef 	andeq	r0, r0, pc, ror #1
    75ac:	94140101 	ldrls	r0, [r4], #-257	; 0xfffffeff
    75b0:	08000004 	stmdaeq	r0, {r2}
    75b4:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    75b8:	01000000 	mrseq	r0, (UNDEF: 0)
    75bc:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    75c0:	4b090303 	blmi	2481d4 <__ccfg+0x22822c>
    75c4:	16000003 	strne	r0, [r0], -r3
    75c8:	00002234 	andeq	r2, r0, r4, lsr r2
    75cc:	07030708 	streq	r0, [r3, -r8, lsl #14]
    75d0:	000000c1 	andeq	r0, r0, r1, asr #1
    75d4:	057f1600 	ldrbeq	r1, [pc, #-1536]!	; 6fdc <__exidx_end+0x4160>
    75d8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    75dc:	00f40803 	rscseq	r0, r4, r3, lsl #16
    75e0:	00040000 	andeq	r0, r4, r0
    75e4:	00026611 	andeq	r6, r2, r1, lsl r6
    75e8:	03090800 	movweq	r0, #38912	; 0x9800
    75ec:	00032403 	andeq	r2, r3, r3, lsl #8
    75f0:	04b81700 	ldrteq	r1, [r8], #1792	; 0x700
    75f4:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    75f8:	bb08030b 	bllt	20822c <__ccfg+0x1e8284>
    75fc:	16000003 	strne	r0, [r0], -r3
    7600:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    7604:	08031408 	stmdaeq	r3, {r3, sl, ip}
    7608:	000000c1 	andeq	r0, r0, r1, asr #1
    760c:	02d21600 	sbcseq	r1, r2, #0, 12
    7610:	15080000 	strne	r0, [r8, #-0]
    7614:	00c10803 	sbceq	r0, r1, r3, lsl #16
    7618:	16020000 	strne	r0, [r2], -r0
    761c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7620:	0b031608 	bleq	cce48 <__ccfg+0xacea0>
    7624:	000002c8 	andeq	r0, r0, r8, asr #5
    7628:	0f7f1604 	svceq	0x007f1604
    762c:	17080000 	strne	r0, [r8, -r0]
    7630:	00f40903 	rscseq	r0, r4, r3, lsl #18
    7634:	16080000 	strne	r0, [r8], -r0
    7638:	0000045d 	andeq	r0, r0, sp, asr r4
    763c:	0f031808 	svceq	0x00031808
    7640:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7644:	02cd160c 	sbceq	r1, sp, #12, 12	; 0xc00000
    7648:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    764c:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    7650:	002c0000 	eoreq	r0, ip, r0
    7654:	00034b0f 	andeq	r4, r3, pc, lsl #22
    7658:	0003cb00 	andeq	ip, r3, r0, lsl #22
    765c:	00881800 	addeq	r1, r8, r0, lsl #16
    7660:	00030000 	andeq	r0, r3, r0
    7664:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    7668:	c3110000 	tstgt	r1, #0
    766c:	08000004 	stmdaeq	r0, {r2}
    7670:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    7674:	14000003 	strne	r0, [r0], #-3
    7678:	00000395 	muleq	r0, r5, r3
    767c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    7680:	000003ed 	andeq	r0, r0, sp, ror #7
    7684:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7688:	000003d1 	ldrdeq	r0, [r0], -r1
    768c:	15f20119 	ldrbne	r0, [r2, #281]!	; 0x119
    7690:	91010000 	mrsls	r0, (UNDEF: 1)
    7694:	01cd0107 	biceq	r0, sp, r7, lsl #2
    7698:	1ca00000 	stcne	0, cr0, [r0]
    769c:	1cf00000 	ldclne	0, cr0, [r0]
    76a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    76a4:	00000468 	andeq	r0, r0, r8, ror #8
    76a8:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    76ac:	14910100 	ldrne	r0, [r1], #256	; 0x100
    76b0:	000001cd 	andeq	r0, r0, sp, asr #3
    76b4:	00002576 	andeq	r2, r0, r6, ror r5
    76b8:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    76bc:	68259101 	stmdavs	r5!, {r0, r8, ip, pc}
    76c0:	c0000004 	andgt	r0, r0, r4
    76c4:	1a000025 	bne	7760 <__exidx_end+0x48e4>
    76c8:	01007161 	tsteq	r0, r1, ror #2
    76cc:	00b53191 	umlalseq	r3, r5, r1, r1
    76d0:	25ff0000 	ldrbcs	r0, [pc, #0]!	; 76d8 <__exidx_end+0x485c>
    76d4:	661b0000 	ldrvs	r0, [fp], -r0
    76d8:	01006c6d 	tsteq	r0, sp, ror #24
    76dc:	00c10793 	smulleq	r0, r1, r3, r7
    76e0:	26330000 	ldrtcs	r0, [r3], -r0
    76e4:	641b0000 	ldrvs	r0, [fp], #-0
    76e8:	0c930100 	ldfeqs	f0, [r3], {0}
    76ec:	000000c1 	andeq	r0, r0, r1, asr #1
    76f0:	00002651 	andeq	r2, r0, r1, asr r6
    76f4:	0015da1c 	andseq	sp, r5, ip, lsl sl
    76f8:	019e0100 	orrseq	r0, lr, r0, lsl #2
    76fc:	00001cca 	andeq	r1, r0, sl, asr #25
    7700:	da040a00 	ble	109f08 <__ccfg+0xe9f60>
    7704:	1d000001 	stcne	0, cr0, [r0, #-4]
    7708:	0015e501 	andseq	lr, r5, r1, lsl #10
    770c:	06080100 	streq	r0, [r8], -r0, lsl #2
    7710:	0000c101 	andeq	ip, r0, r1, lsl #2
    7714:	001a7000 	andseq	r7, sl, r0
    7718:	001ca000 	andseq	sl, ip, r0
    771c:	1a9c0100 	bne	fe707b24 <_estack+0xde702b24>
    7720:	00736572 	rsbseq	r6, r3, r2, ror r5
    7724:	cd1a0801 	ldcgt	8, cr0, [sl, #-4]
    7728:	64000001 	strvs	r0, [r0], #-1
    772c:	1a000026 	bne	77cc <__exidx_end+0x4950>
    7730:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    7734:	0000c124 	andeq	ip, r0, r4, lsr #2
    7738:	00267700 	eoreq	r7, r6, r0, lsl #14
    773c:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7740:	33080100 	movwcc	r0, #33024	; 0x8100
    7744:	00000468 	andeq	r0, r0, r8, ror #8
    7748:	0000268a 	andeq	r2, r0, sl, lsl #13
    774c:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    7750:	b53f0801 	ldrlt	r0, [pc, #-2049]!	; 6f57 <__exidx_end+0x40db>
    7754:	b3000000 	movwlt	r0, #0
    7758:	1b000026 	blne	77f8 <__exidx_end+0x497c>
    775c:	0a010063 	beq	478f0 <__ccfg+0x27948>
    7760:	0001d307 	andeq	sp, r1, r7, lsl #6
    7764:	00275500 	eoreq	r5, r7, r0, lsl #10
    7768:	00641e00 	rsbeq	r1, r4, r0, lsl #28
    776c:	c1070b01 	tstgt	r7, r1, lsl #22
    7770:	04000000 	streq	r0, [r0], #-0
    7774:	06235491 			; <UNDEFINED> instruction: 0x06235491
    7778:	0015e01f 	andseq	lr, r5, pc, lsl r0
    777c:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    7780:	001a5001 	andseq	r5, sl, r1
    7784:	001a7000 	andseq	r7, sl, r0
    7788:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    778c:	0823007c 	stmdaeq	r3!, {r2, r3, r4, r5, r6}
    7790:	00050906 	andeq	r0, r5, r6, lsl #18
    7794:	00632000 	rsbeq	r2, r3, r0
    7798:	c1120d01 	tstgt	r2, r1, lsl #26
    779c:	01000000 	mrseq	r0, (UNDEF: 0)
    77a0:	45210050 	strmi	r0, [r1, #-80]!	; 0xffffffb0
    77a4:	01006c6f 	tsteq	r0, pc, ror #24
    77a8:	1aaa0188 	bne	fea87dd0 <_estack+0xdea82dd0>
    77ac:	52210000 	eorpl	r0, r1, #0
    77b0:	01007465 	tsteq	r0, r5, ror #8
    77b4:	1b0c018b 	blne	307de8 <__ccfg+0x2e7e40>
    77b8:	d8220000 	stmdale	r2!, {}	; <UNPREDICTABLE>
    77bc:	4500000c 	strmi	r0, [r0, #-12]
    77c0:	23000005 	movwcs	r0, #5
    77c4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    77c8:	c10a3a01 	tstgt	sl, r1, lsl #20
    77cc:	1b000000 	blne	77d4 <__exidx_end+0x4958>
    77d0:	3a010069 	bcc	4797c <__ccfg+0x279d4>
    77d4:	00008113 	andeq	r8, r0, r3, lsl r1
    77d8:	00283b00 	eoreq	r3, r8, r0, lsl #22
    77dc:	b0220000 	eorlt	r0, r2, r0
    77e0:	6d00000c 	stcvs	0, cr0, [r0, #-48]	; 0xffffffd0
    77e4:	1b000005 	blne	7800 <__exidx_end+0x4984>
    77e8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    77ec:	c10a4601 	tstgt	sl, r1, lsl #12
    77f0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    77f4:	1b000028 	blne	789c <__exidx_end+0x4a20>
    77f8:	46010069 	strmi	r0, [r1], -r9, rrx
    77fc:	0000c10f 	andeq	ip, r0, pc, lsl #2
    7800:	00287700 	eoreq	r7, r8, r0, lsl #14
    7804:	10220000 	eorne	r0, r2, r0
    7808:	9500000d 	strls	r0, [r0, #-13]
    780c:	1b000005 	blne	7828 <__exidx_end+0x49ac>
    7810:	006c6176 	rsbeq	r6, ip, r6, ror r1
    7814:	e30c5501 	movw	r5, #50433	; 0xc501
    7818:	a0000000 	andge	r0, r0, r0
    781c:	1b000028 	blne	78c4 <__exidx_end+0x4a48>
    7820:	55010069 	strpl	r0, [r1, #-105]	; 0xffffff97
    7824:	0000e311 	andeq	lr, r0, r1, lsl r3
    7828:	0028b300 	eoreq	fp, r8, r0, lsl #6
    782c:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    7830:	5800001c 	stmdapl	r0, {r2, r3, r4}
    7834:	bf00001c 	svclt	0x0000001c
    7838:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    783c:	006c6176 	rsbeq	r6, ip, r6, ror r1
    7840:	e30c6001 	movw	r6, #49153	; 0xc001
    7844:	01000000 	mrseq	r0, (UNDEF: 0)
    7848:	00691b59 	rsbeq	r1, r9, r9, asr fp
    784c:	810a6101 	tsthi	sl, r1, lsl #2
    7850:	dc000000 	stcle	0, cr0, [r0], {-0}
    7854:	00000028 	andeq	r0, r0, r8, lsr #32
    7858:	000cf822 	andeq	pc, ip, r2, lsr #16
    785c:	0005d900 	andeq	sp, r5, r0, lsl #18
    7860:	61761b00 	cmnvs	r6, r0, lsl #22
    7864:	7101006c 	tstvc	r1, ip, rrx
    7868:	0000c10a 	andeq	ip, r0, sl, lsl #2
    786c:	0028ef00 	eoreq	lr, r8, r0, lsl #30
    7870:	76250000 	strtvc	r0, [r5], -r0
    7874:	9200001c 	andls	r0, r0, #28
    7878:	1b00001c 	blne	78f0 <__exidx_end+0x4a74>
    787c:	01007473 	tsteq	r0, r3, ror r4
    7880:	01cd0b78 	biceq	r0, sp, r8, ror fp
    7884:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    7888:	00000000 	andeq	r0, r0, r0
    788c:	00058f00 	andeq	r8, r5, r0, lsl #30
    7890:	fd000300 	stc2	3, cr0, [r0, #-0]
    7894:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    7898:	00017201 	andeq	r7, r1, r1, lsl #4
    789c:	16050c00 	strne	r0, [r5], -r0, lsl #24
    78a0:	00d30000 	sbcseq	r0, r3, r0
    78a4:	0dd00000 	ldcleq	0, cr0, [r0]
    78a8:	00000000 	andeq	r0, r0, r0
    78ac:	54c70000 	strbpl	r0, [r7], #0
    78b0:	01020000 	mrseq	r0, (UNDEF: 2)
    78b4:	0003b706 	andeq	fp, r3, r6, lsl #14
    78b8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    78bc:	000003f1 	strdeq	r0, [r0], -r1
    78c0:	b0050402 	andlt	r0, r5, r2, lsl #8
    78c4:	02000000 	andeq	r0, r0, #0
    78c8:	00ab0508 	adceq	r0, fp, r8, lsl #10
    78cc:	3c030000 	stccc	0, cr0, [r3], {-0}
    78d0:	02000022 	andeq	r0, r0, #34	; 0x22
    78d4:	004d182e 	subeq	r1, sp, lr, lsr #16
    78d8:	01020000 	mrseq	r0, (UNDEF: 2)
    78dc:	0003b508 	andeq	fp, r3, r8, lsl #10
    78e0:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    78e4:	31020000 	mrscc	r0, (UNDEF: 2)
    78e8:	00006019 	andeq	r6, r0, r9, lsl r0
    78ec:	07020200 	streq	r0, [r2, -r0, lsl #4]
    78f0:	00000273 	andeq	r0, r0, r3, ror r2
    78f4:	0017f303 	andseq	pc, r7, r3, lsl #6
    78f8:	19340200 	ldmdbne	r4!, {r9}
    78fc:	00000073 	andeq	r0, r0, r3, ror r0
    7900:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    7904:	02000000 	andeq	r0, r0, #0
    7908:	00800708 	addeq	r0, r0, r8, lsl #14
    790c:	04040000 	streq	r0, [r4], #-0
    7910:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7914:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7918:	0000008a 	andeq	r0, r0, sl, lsl #1
    791c:	000b8603 	andeq	r8, fp, r3, lsl #12
    7920:	1b280300 	blne	a08528 <__ccfg+0x9e8580>
    7924:	0000009b 	muleq	r0, fp, r0
    7928:	000a9c05 	andeq	r9, sl, r5, lsl #24
    792c:	00090400 	andeq	r0, r9, r0, lsl #8
    7930:	000000b3 	strheq	r0, [r0], -r3
    7934:	000c3c06 	andeq	r3, ip, r6, lsl #24
    7938:	0000b300 	andeq	fp, r0, r0, lsl #6
    793c:	00010000 	andeq	r0, r1, r0
    7940:	9e030407 	cdpls	4, 0, cr0, cr3, cr7, {0}
    7944:	0300000a 	movweq	r0, #10
    7948:	008f1863 	addeq	r1, pc, r3, ror #16
    794c:	1c030000 	stcne	0, cr0, [r3], {-0}
    7950:	04000004 	streq	r0, [r0], #-4
    7954:	00411226 	subeq	r1, r1, r6, lsr #4
    7958:	00030000 	andeq	r0, r3, r0
    795c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7960:	00541227 	subseq	r1, r4, r7, lsr #4
    7964:	cd080000 	stcgt	0, cr0, [r8, #-0]
    7968:	03000000 	movweq	r0, #0
    796c:	000013f8 	strdeq	r1, [r0], -r8
    7970:	41122b04 	tstmi	r2, r4, lsl #22
    7974:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7978:	000000de 	ldrdeq	r0, [r0], -lr
    797c:	00165103 	andseq	r5, r6, r3, lsl #2
    7980:	122c0400 	eorne	r0, ip, #0, 8
    7984:	00000067 	andeq	r0, r0, r7, rrx
    7988:	0000ef08 	andeq	lr, r0, r8, lsl #30
    798c:	02a60300 	adceq	r0, r6, #0, 6
    7990:	2d040000 	stccs	0, cr0, [r4, #-0]
    7994:	00006712 	andeq	r6, r0, r2, lsl r7
    7998:	cd040a00 	vstrgt	s0, [r4, #-0]
    799c:	0b000000 	bleq	79a4 <__exidx_end+0x4b28>
    79a0:	09320408 	ldmdbeq	r2!, {r3, sl}
    79a4:	000001a0 	andeq	r0, r0, r0, lsr #3
    79a8:	0002c10c 	andeq	ip, r2, ip, lsl #2
    79ac:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    79b0:	000000de 	ldrdeq	r0, [r0], -lr
    79b4:	00070101 	andeq	r0, r7, r1, lsl #2
    79b8:	0000a40c 	andeq	sl, r0, ip, lsl #8
    79bc:	03350400 	teqeq	r5, #0, 8
    79c0:	000000de 	ldrdeq	r0, [r0], -lr
    79c4:	00060101 	andeq	r0, r6, r1, lsl #2
    79c8:	00028f0c 	andeq	r8, r2, ip, lsl #30
    79cc:	03360400 	teqeq	r6, #0, 8
    79d0:	000000de 	ldrdeq	r0, [r0], -lr
    79d4:	00050101 	andeq	r0, r5, r1, lsl #2
    79d8:	00042b0c 	andeq	r2, r4, ip, lsl #22
    79dc:	03370400 	teqeq	r7, #0, 8
    79e0:	000000de 	ldrdeq	r0, [r0], -lr
    79e4:	00040101 	andeq	r0, r4, r1, lsl #2
    79e8:	0004240c 	andeq	r2, r4, ip, lsl #8
    79ec:	03380400 	teqeq	r8, #0, 8
    79f0:	000000de 	ldrdeq	r0, [r0], -lr
    79f4:	00000401 	andeq	r0, r0, r1, lsl #8
    79f8:	0004150d 	andeq	r1, r4, sp, lsl #10
    79fc:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    7a00:	000000de 	ldrdeq	r0, [r0], -lr
    7a04:	004c0d01 	subeq	r0, ip, r1, lsl #26
    7a08:	3c040000 	stccc	0, cr0, [r4], {-0}
    7a0c:	0000de03 	andeq	sp, r0, r3, lsl #28
    7a10:	790d0200 	stmdbvc	sp, {r9}
    7a14:	04000000 	streq	r0, [r0], #-0
    7a18:	00de033d 	sbcseq	r0, lr, sp, lsr r3
    7a1c:	0d030000 	stceq	0, cr0, [r3, #-0]
    7a20:	00000161 	andeq	r0, r0, r1, ror #2
    7a24:	ef083f04 	svc	0x00083f04
    7a28:	04000000 	streq	r0, [r0], #-0
    7a2c:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    7a30:	41040000 	mrsmi	r0, (UNDEF: 4)
    7a34:	00011203 	andeq	r1, r1, r3, lsl #4
    7a38:	01a00900 	lsleq	r0, r0, #18
    7a3c:	b50e0000 	strlt	r0, [lr, #-0]
    7a40:	04000002 	streq	r0, [r0], #-2
    7a44:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    7a48:	01010000 	mrseq	r0, (UNDEF: 1)
    7a4c:	0003210e 	andeq	r2, r3, lr, lsl #2
    7a50:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7a54:	000001cd 	andeq	r0, r0, sp, asr #3
    7a58:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7a5c:	000001d3 	ldrdeq	r0, [r0], -r3
    7a60:	be080102 	adflte	f0, f0, f2
    7a64:	08000003 	stmdaeq	r0, {r0, r1}
    7a68:	000001d3 	ldrdeq	r0, [r0], -r3
    7a6c:	00032f0e 	andeq	r2, r3, lr, lsl #30
    7a70:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    7a74:	000001cd 	andeq	r0, r0, sp, asr #3
    7a78:	080b0101 	stmdaeq	fp, {r0, r8}
    7a7c:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    7a80:	0d000002 	stceq	0, cr0, [r0, #-8]
    7a84:	000002c8 	andeq	r0, r0, r8, asr #5
    7a88:	670b9005 	strvs	r9, [fp, -r5]
    7a8c:	00000000 	andeq	r0, r0, r0
    7a90:	00062d0d 	andeq	r2, r6, sp, lsl #26
    7a94:	08910500 	ldmeq	r1, {r8, sl}
    7a98:	000000cd 	andeq	r0, r0, sp, asr #1
    7a9c:	049c0d04 	ldreq	r0, [ip], #3332	; 0xd04
    7aa0:	92050000 	andls	r0, r5, #0
    7aa4:	0000ea10 	andeq	lr, r0, r0, lsl sl
    7aa8:	03000600 	movweq	r0, #1536	; 0x600
    7aac:	00000432 	andeq	r0, r0, r2, lsr r4
    7ab0:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    7ab4:	0f000001 	svceq	0x00000001
    7ab8:	0000021e 	andeq	r0, r0, lr, lsl r2
    7abc:	00000235 	andeq	r0, r0, r5, lsr r2
    7ac0:	420e0010 	andmi	r0, lr, #16
    7ac4:	05000000 	streq	r0, [r0, #-0]
    7ac8:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    7acc:	01010000 	mrseq	r0, (UNDEF: 1)
    7ad0:	9106010b 	tstls	r6, fp, lsl #2
    7ad4:	00026d09 	andeq	r6, r2, r9, lsl #26
    7ad8:	048f0c00 	streq	r0, [pc], #3072	; 7ae0 <__exidx_end+0x4c64>
    7adc:	93060000 	movwls	r0, #24576	; 0x6000
    7ae0:	0000de07 	andeq	sp, r0, r7, lsl #28
    7ae4:	01070100 	mrseq	r0, (UNDEF: 23)
    7ae8:	003d0c00 	eorseq	r0, sp, r0, lsl #24
    7aec:	94060000 	strls	r0, [r6], #-0
    7af0:	0000de03 	andeq	sp, r0, r3, lsl #28
    7af4:	00010100 	andeq	r0, r1, r0, lsl #2
    7af8:	86030000 	strhi	r0, [r3], -r0
    7afc:	06000002 	streq	r0, [r0], -r2
    7b00:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    7b04:	6d080000 	stcvs	0, cr0, [r8, #-0]
    7b08:	0f000002 	svceq	0x00000002
    7b0c:	00000279 	andeq	r0, r0, r9, ror r2
    7b10:	00000289 	andeq	r0, r0, r9, lsl #5
    7b14:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    7b18:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7b1c:	000002eb 	andeq	r0, r0, fp, ror #5
    7b20:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    7b24:	01000002 	tsteq	r0, r2
    7b28:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    7b2c:	02a70000 	adceq	r0, r7, #0
    7b30:	00100000 	andseq	r0, r0, r0
    7b34:	00029c08 	andeq	r9, r2, r8, lsl #24
    7b38:	03a70e00 			; <UNDEFINED> instruction: 0x03a70e00
    7b3c:	06070000 	streq	r0, [r7], -r0
    7b40:	0002a713 	andeq	sl, r2, r3, lsl r7
    7b44:	0e010100 	adfeqs	f0, f1, f0
    7b48:	00000141 	andeq	r0, r0, r1, asr #2
    7b4c:	ef0ec305 	svc	0x000ec305
    7b50:	01000000 	mrseq	r0, (UNDEF: 0)
    7b54:	04a91101 	strteq	r1, [r9], #257	; 0x101
    7b58:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    7b5c:	02d51001 	sbcseq	r1, r5, #1
    7b60:	040a0000 	streq	r0, [sl], #-0
    7b64:	000002db 	ldrdeq	r0, [r0], -fp
    7b68:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    7b6c:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    7b70:	00000000 	andeq	r0, r0, r0
    7b74:	0001da0f 	andeq	sp, r1, pc, lsl #20
    7b78:	0002f200 	andeq	pc, r2, r0, lsl #4
    7b7c:	08001000 	stmdaeq	r0, {ip}
    7b80:	000002e7 	andeq	r0, r0, r7, ror #5
    7b84:	00046414 	andeq	r6, r4, r4, lsl r4
    7b88:	017f0800 	cmneq	pc, r0, lsl #16
    7b8c:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    7b90:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7b94:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    7b98:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    7b9c:	000000fb 	strdeq	r0, [r0], -fp
    7ba0:	94140101 	ldrls	r0, [r4], #-257	; 0xfffffeff
    7ba4:	08000004 	stmdaeq	r0, {r2}
    7ba8:	ef0e02d8 	svc	0x000e02d8
    7bac:	01000000 	mrseq	r0, (UNDEF: 0)
    7bb0:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    7bb4:	4b090303 	blmi	2487c8 <__ccfg+0x228820>
    7bb8:	16000003 	strne	r0, [r0], -r3
    7bbc:	00002234 	andeq	r2, r0, r4, lsr r2
    7bc0:	07030708 	streq	r0, [r3, -r8, lsl #14]
    7bc4:	000000cd 	andeq	r0, r0, sp, asr #1
    7bc8:	057f1600 	ldrbeq	r1, [pc, #-1536]!	; 75d0 <__exidx_end+0x4754>
    7bcc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    7bd0:	01000803 	tsteq	r0, r3, lsl #16
    7bd4:	00040000 	andeq	r0, r4, r0
    7bd8:	00026611 	andeq	r6, r2, r1, lsl r6
    7bdc:	03090800 	movweq	r0, #38912	; 0x9800
    7be0:	00032403 	andeq	r2, r3, r3, lsl #8
    7be4:	04b81700 	ldrteq	r1, [r8], #1792	; 0x700
    7be8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    7bec:	bb08030b 	bllt	208820 <__ccfg+0x1e8878>
    7bf0:	16000003 	strne	r0, [r0], -r3
    7bf4:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    7bf8:	08031408 	stmdaeq	r3, {r3, sl, ip}
    7bfc:	000000cd 	andeq	r0, r0, sp, asr #1
    7c00:	02d21600 	sbcseq	r1, r2, #0, 12
    7c04:	15080000 	strne	r0, [r8, #-0]
    7c08:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    7c0c:	16020000 	strne	r0, [r2], -r0
    7c10:	000004ac 	andeq	r0, r0, ip, lsr #9
    7c14:	0b031608 	bleq	cd43c <__ccfg+0xad494>
    7c18:	000002c8 	andeq	r0, r0, r8, asr #5
    7c1c:	0f7f1604 	svceq	0x007f1604
    7c20:	17080000 	strne	r0, [r8, -r0]
    7c24:	01000903 	tsteq	r0, r3, lsl #18
    7c28:	16080000 	strne	r0, [r8], -r0
    7c2c:	0000045d 	andeq	r0, r0, sp, asr r4
    7c30:	0f031808 	svceq	0x00031808
    7c34:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7c38:	02cd160c 	sbceq	r1, sp, #12, 12	; 0xc00000
    7c3c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    7c40:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    7c44:	002c0000 	eoreq	r0, ip, r0
    7c48:	00034b0f 	andeq	r4, r3, pc, lsl #22
    7c4c:	0003cb00 	andeq	ip, r3, r0, lsl #22
    7c50:	00881800 	addeq	r1, r8, r0, lsl #16
    7c54:	00030000 	andeq	r0, r3, r0
    7c58:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    7c5c:	c3110000 	tstgt	r1, #0
    7c60:	08000004 	stmdaeq	r0, {r2}
    7c64:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    7c68:	14000003 	strne	r0, [r0], #-3
    7c6c:	00000395 	muleq	r0, r5, r3
    7c70:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    7c74:	000003ed 	andeq	r0, r0, sp, ror #7
    7c78:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7c7c:	000003d1 	ldrdeq	r0, [r0], -r1
    7c80:	16430119 			; <UNDEFINED> instruction: 0x16430119
    7c84:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7c88:	00810105 	addeq	r0, r1, r5, lsl #2
    7c8c:	1cf00000 	ldclne	0, cr0, [r0]
    7c90:	20800000 	addcs	r0, r0, r0
    7c94:	9c010000 	stcls	0, cr0, [r1], {-0}
    7c98:	00000586 	andeq	r0, r0, r6, lsl #11
    7c9c:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
    7ca0:	18080100 	stmdane	r8, {r8}
    7ca4:	00000586 	andeq	r0, r0, r6, lsl #11
    7ca8:	00002922 	andeq	r2, r0, r2, lsr #18
    7cac:	746d661a 	strbtvc	r6, [sp], #-1562	; 0xfffff9e6
    7cb0:	29080100 	stmdbcs	r8, {r8}
    7cb4:	00000586 	andeq	r0, r0, r6, lsl #11
    7cb8:	00002b19 	andeq	r2, r0, r9, lsl fp
    7cbc:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    7cc0:	b5360801 	ldrlt	r0, [r6, #-2049]!	; 0xfffff7ff
    7cc4:	4d000000 	stcmi	0, cr0, [r0, #-0]
    7cc8:	1b00002b 	blne	7d7c <__exidx_end+0x4f00>
    7ccc:	0100636e 	tsteq	r0, lr, ror #6
    7cd0:	0081060a 	addeq	r0, r1, sl, lsl #12
    7cd4:	2be60000 	blcs	ff987cdc <_estack+0xdf982cdc>
    7cd8:	f81c0000 			; <UNDEFINED> instruction: 0xf81c0000
    7cdc:	01000015 	tsteq	r0, r5, lsl r0
    7ce0:	491c114e 	ldmdbmi	ip, {r1, r2, r3, r6, r8, ip}
    7ce4:	01000016 	tsteq	r0, r6, lsl r0
    7ce8:	b21d1655 	andslt	r1, sp, #89128960	; 0x5500000
    7cec:	2200001d 	andcs	r0, r0, #29
    7cf0:	8800001e 	stmdahi	r0, {r1, r2, r3, r4}
    7cf4:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7cf8:	00706176 	rsbseq	r6, r0, r6, ror r1
    7cfc:	0c114e01 	ldceq	14, cr4, [r1], {1}
    7d00:	01000001 	tsteq	r0, r1
    7d04:	666d1b56 			; <UNDEFINED> instruction: 0x666d1b56
    7d08:	114e0100 	mrsne	r0, (UNDEF: 94)
    7d0c:	000000c1 	andeq	r0, r0, r1, asr #1
    7d10:	00002c67 	andeq	r2, r0, r7, ror #24
    7d14:	1e221d00 	cdpne	13, 2, cr1, cr2, cr0, {0}
    7d18:	1e6a0000 	cdpne	0, 6, cr0, cr10, cr0, {0}
    7d1c:	04a40000 	strteq	r0, [r4], #0
    7d20:	761e0000 	ldrvc	r0, [lr], -r0
    7d24:	01007061 	tsteq	r0, r1, rrx
    7d28:	010c114f 	tsteq	ip, pc, asr #2
    7d2c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7d30:	0d801f00 	stceq	15, cr1, [r0]
    7d34:	04d50000 	ldrbeq	r0, [r5], #0
    7d38:	761e0000 	ldrvc	r0, [lr], -r0
    7d3c:	01007061 	tsteq	r0, r1, rrx
    7d40:	010c1150 	tsteq	ip, r0, asr r1
    7d44:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7d48:	00636420 	rsbeq	r6, r3, r0, lsr #8
    7d4c:	81115001 	tsthi	r1, r1
    7d50:	1b000000 	blne	7d58 <__exidx_end+0x4edc>
    7d54:	50010063 	andpl	r0, r1, r3, rrx
    7d58:	0001d311 	andeq	sp, r1, r1, lsl r3
    7d5c:	002c8500 	eoreq	r8, ip, r0, lsl #10
    7d60:	981f0000 	ldmdals	pc, {}	; <UNPREDICTABLE>
    7d64:	fc00000d 	stc2	0, cr0, [r0], {13}
    7d68:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7d6c:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d70:	8c165501 	cfldr32hi	mvfx5, [r6], {1}
    7d74:	01000005 	tsteq	r0, r5
    7d78:	666d1b5e 			; <UNDEFINED> instruction: 0x666d1b5e
    7d7c:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    7d80:	000000c1 	andeq	r0, r0, r1, asr #1
    7d84:	00002ca3 	andeq	r2, r0, r3, lsr #25
    7d88:	0d481f00 	stcleq	15, cr1, [r8, #-0]
    7d8c:	05140000 	ldreq	r0, [r4, #-0]
    7d90:	761e0000 	ldrvc	r0, [lr], -r0
    7d94:	01007061 	tsteq	r0, r1, rrx
    7d98:	058c1656 	streq	r1, [ip, #1622]	; 0x656
    7d9c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7da0:	0db01f00 	ldceq	15, cr1, [r0]
    7da4:	05450000 	strbeq	r0, [r5, #-0]
    7da8:	761e0000 	ldrvc	r0, [lr], -r0
    7dac:	01007061 	tsteq	r0, r1, rrx
    7db0:	058c1657 	streq	r1, [ip, #1623]	; 0x657
    7db4:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7db8:	00636420 	rsbeq	r6, r3, r0, lsr #8
    7dbc:	81165701 	tsthi	r6, r1, lsl #14
    7dc0:	1b000000 	blne	7dc8 <__exidx_end+0x4f4c>
    7dc4:	57010063 	strpl	r0, [r1, -r3, rrx]
    7dc8:	0001d316 	andeq	sp, r1, r6, lsl r3
    7dcc:	002cc100 	eoreq	ip, ip, r0, lsl #2
    7dd0:	321d0000 	andscc	r0, sp, #0
    7dd4:	46000020 	strmi	r0, [r0], -r0, lsr #32
    7dd8:	6f000020 	svcvs	0x00000020
    7ddc:	1b000005 	blne	7df8 <__exidx_end+0x4f7c>
    7de0:	5c010063 	stcpl	0, cr0, [r1], {99}	; 0x63
    7de4:	0001d309 	andeq	sp, r1, r9, lsl #6
    7de8:	002cdf00 	eoreq	sp, ip, r0, lsl #30
    7dec:	61731e00 	cmnvs	r3, r0, lsl #28
    7df0:	5c010070 	stcpl	0, cr0, [r1], {112}	; 0x70
    7df4:	0001cd0d 	andeq	ip, r1, sp, lsl #26
    7df8:	00560100 	subseq	r0, r6, r0, lsl #2
    7dfc:	000d6021 	andeq	r6, sp, r1, lsr #32
    7e00:	61731b00 	cmnvs	r3, r0, lsl #22
    7e04:	66010070 			; <UNDEFINED> instruction: 0x66010070
    7e08:	0001cd0a 	andeq	ip, r1, sl, lsl #26
    7e0c:	002cf200 	eoreq	pc, ip, r0, lsl #4
    7e10:	0a000000 	beq	7e18 <__exidx_end+0x4f9c>
    7e14:	0001da04 	andeq	sp, r1, r4, lsl #20
    7e18:	ef040a00 	svc	0x00040a00
    7e1c:	00000000 	andeq	r0, r0, r0
    7e20:	000000d5 	ldrdeq	r0, [r0], -r5
    7e24:	24b90004 	ldrtcs	r0, [r9], #4
    7e28:	01040000 	mrseq	r0, (UNDEF: 4)
    7e2c:	00001690 	muleq	r0, r0, r6
    7e30:	00174901 	andseq	r4, r7, r1, lsl #18
    7e34:	00178500 	andseq	r8, r7, r0, lsl #10
    7e38:	000de000 	andeq	lr, sp, r0
    7e3c:	00000000 	andeq	r0, r0, r0
    7e40:	00579100 	subseq	r9, r7, r0, lsl #2
    7e44:	17400200 	strbne	r0, [r0, -r0, lsl #4]
    7e48:	1b020000 	blne	87e50 <__ccfg+0x67ea8>
    7e4c:	00000030 	andeq	r0, r0, r0, lsr r0
    7e50:	b7060103 	strlt	r0, [r6, -r3, lsl #2]
    7e54:	03000003 	movweq	r0, #3
    7e58:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    7e5c:	02030000 	andeq	r0, r3, #0
    7e60:	0003f105 	andeq	pc, r3, r5, lsl #2
    7e64:	07020300 	streq	r0, [r2, -r0, lsl #6]
    7e68:	00000273 	andeq	r0, r0, r3, ror r2
    7e6c:	00168602 	andseq	r8, r6, r2, lsl #12
    7e70:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    7e74:	03000000 	movweq	r0, #0
    7e78:	00b00504 	adcseq	r0, r0, r4, lsl #10
    7e7c:	04030000 	streq	r0, [r3], #-0
    7e80:	00008507 	andeq	r8, r0, r7, lsl #10
    7e84:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    7e88:	000000ab 	andeq	r0, r0, fp, lsr #1
    7e8c:	80070803 	andhi	r0, r7, r3, lsl #16
    7e90:	04000000 	streq	r0, [r0], #-0
    7e94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7e98:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    7e9c:	00008a07 	andeq	r8, r0, r7, lsl #20
    7ea0:	17420200 	strbne	r0, [r2, -r0, lsl #4]
    7ea4:	13030000 	movwne	r0, #12288	; 0x3000
    7ea8:	00000025 	andeq	r0, r0, r5, lsr #32
    7eac:	00168802 	andseq	r8, r6, r2, lsl #16
    7eb0:	4c1f0300 	ldcmi	3, cr0, [pc], {-0}
    7eb4:	05000000 	streq	r0, [r0, #-0]
    7eb8:	00001657 	andeq	r1, r0, r7, asr r6
    7ebc:	008caa04 	addeq	sl, ip, r4, lsl #20
    7ec0:	20800000 	addcs	r0, r0, r0
    7ec4:	00300000 	eorseq	r0, r0, r0
    7ec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ecc:	00177a06 	andseq	r7, r7, r6, lsl #20
    7ed0:	8c3e0100 	ldfhis	f0, [lr], #-0
    7ed4:	10000000 	andne	r0, r0, r0
    7ed8:	0600002d 	streq	r0, [r0], -sp, lsr #32
    7edc:	0000176b 	andeq	r1, r0, fp, ror #14
    7ee0:	008c3f01 	addeq	r3, ip, r1, lsl #30
    7ee4:	2d290000 	stccs	0, cr0, [r9, #-0]
    7ee8:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
    7eec:	01000016 	tsteq	r0, r6, lsl r0
    7ef0:	00008140 	andeq	r8, r0, r0, asr #2
    7ef4:	00510100 	subseq	r0, r1, r0, lsl #2
    7ef8:	00014300 	andeq	r4, r1, r0, lsl #6
    7efc:	28000400 	stmdacs	r0, {sl}
    7f00:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7f04:	00169001 	andseq	r9, r6, r1
    7f08:	18960100 	ldmne	r6, {r8}
    7f0c:	17850000 	strne	r0, [r5, r0]
    7f10:	0df00000 	ldcleq	0, cr0, [r0]
    7f14:	00000000 	andeq	r0, r0, r0
    7f18:	58fc0000 	ldmpl	ip!, {}^	; <UNPREDICTABLE>
    7f1c:	01020000 	mrseq	r0, (UNDEF: 2)
    7f20:	0003b706 	andeq	fp, r3, r6, lsl #14
    7f24:	08010200 	stmdaeq	r1, {r9}
    7f28:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    7f2c:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    7f30:	02000003 	andeq	r0, r0, #3
    7f34:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    7f38:	04020000 	streq	r0, [r2], #-0
    7f3c:	0000b005 	andeq	fp, r0, r5
    7f40:	17f10300 	ldrbne	r0, [r1, r0, lsl #6]!
    7f44:	41020000 	mrsmi	r0, (UNDEF: 2)
    7f48:	00000053 	andeq	r0, r0, r3, asr r0
    7f4c:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    7f50:	02000000 	andeq	r0, r0, #0
    7f54:	00ab0508 	adceq	r0, fp, r8, lsl #10
    7f58:	40030000 	andmi	r0, r3, r0
    7f5c:	02000018 	andeq	r0, r0, #24
    7f60:	00006c5b 	andeq	r6, r0, fp, asr ip
    7f64:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7f68:	00000080 	andeq	r0, r0, r0, lsl #1
    7f6c:	69050404 	stmdbvs	r5, {r2, sl}
    7f70:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7f74:	008a0704 	addeq	r0, sl, r4, lsl #14
    7f78:	f3030000 	vhadd.u8	d0, d3, d0
    7f7c:	03000017 	movweq	r0, #23
    7f80:	00004820 	andeq	r4, r0, r0, lsr #16
    7f84:	18420300 	stmdane	r2, {r8, r9}^
    7f88:	26030000 	strcs	r0, [r3], -r0
    7f8c:	00000061 	andeq	r0, r0, r1, rrx
    7f90:	00180b05 	andseq	r0, r8, r5, lsl #22
    7f94:	03450400 	movteq	r0, #21504	; 0x5400
    7f98:	00000081 	andeq	r0, r0, r1, lsl #1
    7f9c:	00000000 	andeq	r0, r0, r0
    7fa0:	00000020 	andeq	r0, r0, r0, lsr #32
    7fa4:	00dd9c01 	sbcseq	r9, sp, r1, lsl #24
    7fa8:	fc060000 	stc2	0, cr0, [r6], {-0}
    7fac:	01000017 	tsteq	r0, r7, lsl r0
    7fb0:	00008140 	andeq	r8, r0, r0, asr #2
    7fb4:	002d5e00 	eoreq	r5, sp, r0, lsl #28
    7fb8:	184b0600 	stmdane	fp, {r9, sl}^
    7fbc:	41010000 	mrsmi	r0, (UNDEF: 1)
    7fc0:	00000081 	andeq	r0, r0, r1, lsl #1
    7fc4:	00002d71 	andeq	r2, r0, r1, ror sp
    7fc8:	00182e07 	andseq	r2, r8, r7, lsl #28
    7fcc:	81420100 	mrshi	r0, (UNDEF: 82)
    7fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fd4:	5d050052 	stcpl	0, cr0, [r5, #-328]	; 0xfffffeb8
    7fd8:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    7fdc:	008c0353 	addeq	r0, ip, r3, asr r3
    7fe0:	20b00000 	adcscs	r0, r0, r0
    7fe4:	00180000 	andseq	r0, r8, r0
    7fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fec:	0000012f 	andeq	r0, r0, pc, lsr #2
    7ff0:	59010808 	stmdbpl	r1, {r3, fp}
    7ff4:	00000116 	andeq	r0, r0, r6, lsl r1
    7ff8:	0017e509 	andseq	lr, r7, r9, lsl #10
    7ffc:	8c5a0100 	ldfhie	f0, [sl], {-0}
    8000:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8004:	00001889 	andeq	r1, r0, r9, lsl #17
    8008:	012f5b01 			; <UNDEFINED> instruction: 0x012f5b01
    800c:	0a000000 	beq	8014 <__exidx_end+0x5198>
    8010:	0000187e 	andeq	r1, r0, lr, ror r8
    8014:	00f75c01 	rscseq	r5, r7, r1, lsl #24
    8018:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    801c:	01000018 	tsteq	r0, r8, lsl r0
    8020:	0000815d 	andeq	r8, r0, sp, asr r1
    8024:	00510100 	subseq	r0, r1, r0, lsl #2
    8028:	0000810b 	andeq	r8, r0, fp, lsl #2
    802c:	00013f00 	andeq	r3, r1, r0, lsl #30
    8030:	013f0c00 	teqeq	pc, r0, lsl #24
    8034:	00010000 	andeq	r0, r1, r0
    8038:	b5070402 	strlt	r0, [r7, #-1026]	; 0xfffffbfe
    803c:	00000018 	andeq	r0, r0, r8, lsl r0
    8040:	00000136 	andeq	r0, r0, r6, lsr r1
    8044:	25d20004 	ldrbcs	r0, [r2, #4]
    8048:	01040000 	mrseq	r0, (UNDEF: 4)
    804c:	00001690 	muleq	r0, r0, r6
    8050:	00191101 	andseq	r1, r9, r1, lsl #2
    8054:	00178500 	andseq	r8, r7, r0, lsl #10
    8058:	000e0800 	andeq	r0, lr, r0, lsl #16
    805c:	00000000 	andeq	r0, r0, r0
    8060:	005aa900 	subseq	sl, sl, r0, lsl #18
    8064:	06010200 	streq	r0, [r1], -r0, lsl #4
    8068:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    806c:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    8070:	02000003 	andeq	r0, r0, #3
    8074:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    8078:	02020000 	andeq	r0, r2, #0
    807c:	00027307 	andeq	r7, r2, r7, lsl #6
    8080:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8084:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    8088:	0017f103 	andseq	pc, r7, r3, lsl #2
    808c:	53410200 	movtpl	r0, #4608	; 0x1200
    8090:	02000000 	andeq	r0, r0, #0
    8094:	00850704 	addeq	r0, r5, r4, lsl #14
    8098:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    809c:	0000ab05 	andeq	sl, r0, r5, lsl #22
    80a0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    80a4:	00000080 	andeq	r0, r0, r0, lsl #1
    80a8:	69050404 	stmdbvs	r5, {r2, sl}
    80ac:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    80b0:	008a0704 	addeq	r0, sl, r4, lsl #14
    80b4:	f3030000 	vhadd.u8	d0, d3, d0
    80b8:	03000017 	movweq	r0, #23
    80bc:	00004820 	andeq	r4, r0, r0, lsr #16
    80c0:	18f30500 	ldmne	r3!, {r8, sl}^
    80c4:	6a040000 	bvs	1080cc <__ccfg+0xe8124>
    80c8:	00000076 	andeq	r0, r0, r6, ror r0
    80cc:	000020c8 	andeq	r2, r0, r8, asr #1
    80d0:	00000008 	andeq	r0, r0, r8
    80d4:	00a69c01 	adceq	r9, r6, r1, lsl #24
    80d8:	e1060000 	mrs	r0, (UNDEF: 6)
    80dc:	01000018 	tsteq	r0, r8, lsl r0
    80e0:	00007677 	andeq	r7, r0, r7, ror r6
    80e4:	2c050000 	stccs	0, cr0, [r5], {-0}
    80e8:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    80ec:	00007678 	andeq	r7, r0, r8, ror r6
    80f0:	00000000 	andeq	r0, r0, r0
    80f4:	00000600 	andeq	r0, r0, r0, lsl #12
    80f8:	cb9c0100 	blgt	fe708500 <_estack+0xde703500>
    80fc:	06000000 	streq	r0, [r0], -r0
    8100:	000018e1 	andeq	r1, r0, r1, ror #17
    8104:	0076c201 	rsbseq	ip, r6, r1, lsl #4
    8108:	05000000 	streq	r0, [r0, #-0]
    810c:	00001902 	andeq	r1, r0, r2, lsl #18
    8110:	00768404 	rsbseq	r8, r6, r4, lsl #8
    8114:	20d00000 	sbcscs	r0, r0, r0
    8118:	00080000 	andeq	r0, r8, r0
    811c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8120:	000000f1 	strdeq	r0, [r0], -r1
    8124:	0018e107 	andseq	lr, r8, r7, lsl #2
    8128:	010f0100 	mrseq	r0, (UNDEF: 31)
    812c:	00000076 	andeq	r0, r0, r6, ror r0
    8130:	18be0800 	ldmne	lr!, {fp}
    8134:	5b040000 	blpl	10813c <__ccfg+0xe8194>
    8138:	00007601 	andeq	r7, r0, r1, lsl #12
    813c:	00000000 	andeq	r0, r0, r0
    8140:	00000600 	andeq	r0, r0, r0, lsl #12
    8144:	189c0100 	ldmne	ip, {r8}
    8148:	07000001 	streq	r0, [r0, -r1]
    814c:	000018e1 	andeq	r1, r0, r1, ror #17
    8150:	76015a01 	strvc	r5, [r1], -r1, lsl #20
    8154:	00000000 	andeq	r0, r0, r0
    8158:	0018d209 	andseq	sp, r8, r9, lsl #4
    815c:	016c0400 	cmneq	ip, r0, lsl #8
    8160:	00000000 	andeq	r0, r0, r0
    8164:	00000008 	andeq	r0, r0, r8
    8168:	e90a9c01 	stmdb	sl, {r0, sl, fp, ip, pc}
    816c:	01000018 	tsteq	r0, r8, lsl r0
    8170:	0076019e 			; <UNDEFINED> instruction: 0x0076019e
    8174:	50010000 	andpl	r0, r1, r0
    8178:	02070000 	andeq	r0, r7, #0
    817c:	00040000 	andeq	r0, r4, r0
    8180:	00002682 	andeq	r2, r0, r2, lsl #13
    8184:	16900104 	ldrne	r0, [r0], r4, lsl #2
    8188:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    818c:	85000019 	strhi	r0, [r0, #-25]	; 0xffffffe7
    8190:	38000017 	stmdacc	r0, {r0, r1, r2, r4}
    8194:	0000000e 	andeq	r0, r0, lr
    8198:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    819c:	0200005c 	andeq	r0, r0, #92	; 0x5c
    81a0:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    81a4:	01020000 	mrseq	r0, (UNDEF: 2)
    81a8:	0003b508 	andeq	fp, r3, r8, lsl #10
    81ac:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    81b0:	000003f1 	strdeq	r0, [r0], -r1
    81b4:	73070202 	movwvc	r0, #29186	; 0x7202
    81b8:	02000002 	andeq	r0, r0, #2
    81bc:	00b00504 	adcseq	r0, r0, r4, lsl #10
    81c0:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    81c4:	03000017 	movweq	r0, #23
    81c8:	00005341 	andeq	r5, r0, r1, asr #6
    81cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    81d0:	00000085 	andeq	r0, r0, r5, lsl #1
    81d4:	ab050802 	blge	14a1e4 <__ccfg+0x12a23c>
    81d8:	02000000 	andeq	r0, r0, #0
    81dc:	00800708 	addeq	r0, r0, r8, lsl #14
    81e0:	04040000 	streq	r0, [r4], #-0
    81e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    81e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    81ec:	0000008a 	andeq	r0, r0, sl, lsl #1
    81f0:	0017f303 	andseq	pc, r7, r3, lsl #6
    81f4:	48200400 	stmdami	r0!, {sl}
    81f8:	05000000 	streq	r0, [r0, #-0]
    81fc:	00001a56 	andeq	r1, r0, r6, asr sl
    8200:	03033002 	movweq	r3, #12290	; 0x3002
    8204:	001ac106 	andseq	ip, sl, r6, lsl #2
    8208:	01fd0100 	mvnseq	r0, r0, lsl #2
    820c:	001a6905 	andseq	r6, sl, r5, lsl #18
    8210:	01820100 	orreq	r0, r2, r0, lsl #2
    8214:	19440701 	stmdbne	r4, {r0, r8, r9, sl}^
    8218:	0d010000 	stceq	0, cr0, [r1, #-0]
    821c:	0020d801 	eoreq	sp, r0, r1, lsl #16
    8220:	0000d400 	andeq	sp, r0, r0, lsl #8
    8224:	6d9c0100 	ldfvss	f0, [ip]
    8228:	08000001 	stmdaeq	r0, {r0}
    822c:	00001a44 	andeq	r1, r0, r4, asr #20
    8230:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    8234:	84000000 	strhi	r0, [r0], #-0
    8238:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    823c:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
    8240:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    8244:	b0000000 	andlt	r0, r0, r0
    8248:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    824c:	0000193d 	andeq	r1, r0, sp, lsr r9
    8250:	76011001 	strvc	r1, [r1], -r1
    8254:	c3000000 	movwgt	r0, #0
    8258:	0a00002d 	beq	8314 <__exidx_end+0x5498>
    825c:	00000081 	andeq	r0, r0, r1, lsl #1
    8260:	0000210a 	andeq	r2, r0, sl, lsl #2
    8264:	00000006 	andeq	r0, r0, r6
    8268:	0b013601 	bleq	55a74 <__ccfg+0x35acc>
    826c:	00002130 	andeq	r2, r0, r0, lsr r1
    8270:	0000002a 	andeq	r0, r0, sl, lsr #32
    8274:	0000011f 	andeq	r0, r0, pc, lsl r1
    8278:	001b3609 	andseq	r3, fp, r9, lsl #12
    827c:	01530100 	cmpeq	r3, r0, lsl #2
    8280:	00000076 	andeq	r0, r0, r6, ror r0
    8284:	00002ddc 	ldrdeq	r2, [r0], -ip
    8288:	001a9209 	andseq	r9, sl, r9, lsl #4
    828c:	01540100 	cmpeq	r4, r0, lsl #2
    8290:	00000076 	andeq	r0, r0, r6, ror r0
    8294:	00002def 	andeq	r2, r0, pc, ror #27
    8298:	211a0c00 	tstcs	sl, r0, lsl #24
    829c:	01c30000 	biceq	r0, r3, r0
    82a0:	01330000 	teqeq	r3, r0
    82a4:	010d0000 	mrseq	r0, (UNDEF: 13)
    82a8:	00740250 	rsbseq	r0, r4, r0, asr r2
    82ac:	21220c00 			; <UNDEFINED> instruction: 0x21220c00
    82b0:	01d40000 	bicseq	r0, r4, r0
    82b4:	014d0000 	mrseq	r0, (UNDEF: 77)
    82b8:	010d0000 	mrseq	r0, (UNDEF: 13)
    82bc:	00740251 	rsbseq	r0, r4, r1, asr r2
    82c0:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    82c4:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    82c8:	00002160 	andeq	r2, r0, r0, ror #2
    82cc:	000001ea 	andeq	r0, r0, sl, ror #3
    82d0:	00000161 	andeq	r0, r0, r1, ror #2
    82d4:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    82d8:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    82dc:	0000216a 	andeq	r2, r0, sl, ror #2
    82e0:	0150010d 	cmpeq	r0, sp, lsl #2
    82e4:	0f000032 	svceq	0x00000032
    82e8:	00001a7c 	andeq	r1, r0, ip, ror sl
    82ec:	21ac5f07 			; <UNDEFINED> instruction: 0x21ac5f07
    82f0:	00a40000 	adceq	r0, r4, r0
    82f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    82f8:	000001c3 	andeq	r0, r0, r3, asr #3
    82fc:	001a4410 	andseq	r4, sl, r0, lsl r4
    8300:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    8304:	1a000000 	bne	830c <__exidx_end+0x5490>
    8308:	1000002e 	andne	r0, r0, lr, lsr #32
    830c:	00001a9d 	muleq	r0, sp, sl
    8310:	00767301 	rsbseq	r7, r6, r1, lsl #6
    8314:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    8318:	bc110000 	ldclt	0, cr0, [r1], {-0}
    831c:	fb000021 	blx	83aa <__exidx_end+0x552e>
    8320:	11000001 	tstne	r0, r1
    8324:	000021d0 	ldrdeq	r2, [r0], -r0
    8328:	00000203 	andeq	r0, r0, r3, lsl #4
    832c:	0021e012 	eoreq	lr, r1, r2, lsl r0
    8330:	00009b00 	andeq	r9, r0, r0, lsl #22
    8334:	50010d00 	andpl	r0, r1, r0, lsl #26
    8338:	00007402 	andeq	r7, r0, r2, lsl #8
    833c:	19691300 	stmdbne	r9!, {r8, r9, ip}^
    8340:	6c050000 	stcvs	0, cr0, [r5], {-0}
    8344:	000001d4 	ldrdeq	r0, [r0], -r4
    8348:	00007614 	andeq	r7, r0, r4, lsl r6
    834c:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    8350:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    8354:	0001ea73 	andeq	lr, r1, r3, ror sl
    8358:	00761400 	rsbseq	r1, r6, r0, lsl #8
    835c:	76140000 	ldrvc	r0, [r4], -r0
    8360:	00000000 	andeq	r0, r0, r0
    8364:	0019c913 	andseq	ip, r9, r3, lsl r9
    8368:	fb7a0500 	blx	1e89772 <__ccfg+0x1e697ca>
    836c:	14000001 	strne	r0, [r0], #-1
    8370:	00000076 	andeq	r0, r0, r6, ror r0
    8374:	1af91500 	bne	ffe4d77c <_estack+0xdfe4877c>
    8378:	43060000 	movwmi	r0, #24576	; 0x6000
    837c:	1a161602 	bne	58db8c <__ccfg+0x56dbe4>
    8380:	fd050000 	stc2	0, cr0, [r5, #-0]
    8384:	000b1700 	andeq	r1, fp, r0, lsl #14
    8388:	c4000400 	strgt	r0, [r0], #-1024	; 0xfffffc00
    838c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    8390:	00169001 	andseq	r9, r6, r1
    8394:	1d910100 	ldfnes	f0, [r1]
    8398:	17850000 	strne	r0, [r5, r0]
    839c:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
    83a0:	00000000 	andeq	r0, r0, r0
    83a4:	5e360000 	cdppl	0, 3, cr0, cr6, cr0, {0}
    83a8:	01020000 	mrseq	r0, (UNDEF: 2)
    83ac:	0003b706 	andeq	fp, r3, r6, lsl #14
    83b0:	08010200 	stmdaeq	r1, {r9}
    83b4:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    83b8:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    83bc:	02000003 	andeq	r0, r0, #3
    83c0:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    83c4:	86030000 	strhi	r0, [r3], -r0
    83c8:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    83cc:	00004c3f 	andeq	r4, r0, pc, lsr ip
    83d0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    83d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    83d8:	0017f103 	andseq	pc, r7, r3, lsl #2
    83dc:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    83e0:	02000000 	andeq	r0, r0, #0
    83e4:	00850704 	addeq	r0, r5, r4, lsl #14
    83e8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    83ec:	0000ab05 	andeq	sl, r0, r5, lsl #22
    83f0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    83f4:	00000080 	andeq	r0, r0, r0, lsl #1
    83f8:	69050404 	stmdbvs	r5, {r2, sl}
    83fc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8400:	008a0704 	addeq	r0, sl, r4, lsl #14
    8404:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    8408:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    840c:	0000411f 	andeq	r4, r0, pc, lsl r1
    8410:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    8414:	20050000 	andcs	r0, r5, r0
    8418:	00000053 	andeq	r0, r0, r3, asr r0
    841c:	001e2405 	andseq	r2, lr, r5, lsl #8
    8420:	81e90200 	mvnhi	r0, r0, lsl #4
    8424:	03000000 	movweq	r0, #0
    8428:	000000be 	strheq	r0, [r0], -lr
    842c:	001b7406 	andseq	r7, fp, r6, lsl #8
    8430:	8ce90200 	sfmhi	f0, 2, [r9]
    8434:	07000000 	streq	r0, [r0, -r0]
    8438:	00001e7d 	andeq	r1, r0, sp, ror lr
    843c:	0081ef02 	addeq	lr, r1, r2, lsl #30
    8440:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8444:	00001ba9 	andeq	r1, r0, r9, lsr #23
    8448:	008cab02 	addeq	sl, ip, r2, lsl #22
    844c:	e7010000 	str	r0, [r1, -r0]
    8450:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8454:	00001a44 	andeq	r1, r0, r4, asr #20
    8458:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    845c:	0a000000 	beq	8464 <__exidx_end+0x55e8>
    8460:	00001f1e 	andeq	r1, r0, lr, lsl pc
    8464:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    8468:	00000000 	andeq	r0, r0, r0
    846c:	001e5c08 	andseq	r5, lr, r8, lsl #24
    8470:	8c810200 	sfmhi	f0, 4, [r1], {0}
    8474:	01000000 	mrseq	r0, (UNDEF: 0)
    8478:	00000110 	andeq	r0, r0, r0, lsl r1
    847c:	001a4409 	andseq	r4, sl, r9, lsl #8
    8480:	033c0100 	teqeq	ip, #0, 2
    8484:	0000008c 	andeq	r0, r0, ip, lsl #1
    8488:	001ecd0a 	andseq	ip, lr, sl, lsl #26
    848c:	033e0100 	teqeq	lr, #0, 2
    8490:	0000008c 	andeq	r0, r0, ip, lsl #1
    8494:	1d0a0800 	stcne	8, cr0, [sl, #-0]
    8498:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    849c:	0000008c 	andeq	r0, r0, ip, lsl #1
    84a0:	00013901 	andeq	r3, r1, r1, lsl #18
    84a4:	1a440900 	bne	110a8ac <__ccfg+0x10ea904>
    84a8:	4f010000 	svcmi	0x00010000
    84ac:	00008c03 	andeq	r8, r0, r3, lsl #24
    84b0:	1e410a00 	vmlane.f32	s1, s2, s0
    84b4:	51010000 	mrspl	r0, (UNDEF: 1)
    84b8:	00008c03 	andeq	r8, r0, r3, lsl #24
    84bc:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    84c0:	0200001c 	andeq	r0, r0, #28
    84c4:	00008cc8 	andeq	r8, r0, r8, asr #25
    84c8:	016e0100 	cmneq	lr, r0, lsl #2
    84cc:	44090000 	strmi	r0, [r9], #-0
    84d0:	0100001a 	tsteq	r0, sl, lsl r0
    84d4:	008c0362 	addeq	r0, ip, r2, ror #6
    84d8:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
    84dc:	0100001b 	tsteq	r0, fp, lsl r0
    84e0:	008c0364 	addeq	r0, ip, r4, ror #6
    84e4:	3f0a0000 	svccc	0x000a0000
    84e8:	0100001d 	tsteq	r0, sp, lsl r0
    84ec:	008c0365 	addeq	r0, ip, r5, ror #6
    84f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84f4:	00001d71 	andeq	r1, r0, r1, ror sp
    84f8:	008cb202 	addeq	fp, ip, r2, lsl #4
    84fc:	a3010000 	movwge	r0, #4096	; 0x1000
    8500:	09000001 	stmdbeq	r0, {r0}
    8504:	00001a44 	andeq	r1, r0, r4, asr #20
    8508:	8c039401 	cfstrshi	mvf9, [r3], {1}
    850c:	0a000000 	beq	8514 <__exidx_end+0x5698>
    8510:	00001c8d 	andeq	r1, r0, sp, lsl #25
    8514:	8c039601 	stchi	6, cr9, [r3], {1}
    8518:	0a000000 	beq	8520 <__exidx_end+0x56a4>
    851c:	00001d3f 	andeq	r1, r0, pc, lsr sp
    8520:	8c039701 	stchi	7, cr9, [r3], {1}
    8524:	00000000 	andeq	r0, r0, r0
    8528:	001c3c08 	andseq	r3, ip, r8, lsl #24
    852c:	8cb90200 	lfmhi	f0, 4, [r9]
    8530:	01000000 	mrseq	r0, (UNDEF: 0)
    8534:	000001cc 	andeq	r0, r0, ip, asr #3
    8538:	001a4409 	andseq	r4, sl, r9, lsl #8
    853c:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    8540:	0000008c 	andeq	r0, r0, ip, lsl #1
    8544:	001d490a 	andseq	r4, sp, sl, lsl #18
    8548:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    854c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8550:	1de70800 	stclne	8, cr0, [r7]
    8554:	df020000 	svcle	0x00020000
    8558:	0000008c 	andeq	r0, r0, ip, lsl #1
    855c:	0001f501 	andeq	pc, r1, r1, lsl #10
    8560:	1a440900 	bne	110a968 <__ccfg+0x10ea9c0>
    8564:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    8568:	00008c03 	andeq	r8, r0, r3, lsl #24
    856c:	1f3e0a00 	svcne	0x003e0a00
    8570:	ca010000 	bgt	48578 <__ccfg+0x285d0>
    8574:	00008c03 	andeq	r8, r0, r3, lsl #24
    8578:	a7080000 	strge	r0, [r8, -r0]
    857c:	0200001e 	andeq	r0, r0, #30
    8580:	00008cd7 	ldrdeq	r8, [r0], -r7
    8584:	02120100 	andseq	r0, r2, #0, 2
    8588:	f10a0000 	cpsie	,#0
    858c:	0100001f 	tsteq	r0, pc, lsl r0
    8590:	008c0283 	addeq	r0, ip, r3, lsl #5
    8594:	0b000000 	bleq	859c <__exidx_end+0x5720>
    8598:	0000084b 	andeq	r0, r0, fp, asr #16
    859c:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    85a0:	00001fce 	andeq	r1, r0, lr, asr #31
    85a4:	50010f02 	andpl	r0, r1, r2, lsl #30
    85a8:	7c000022 	stcvc	0, cr0, [r0], {34}	; 0x22
    85ac:	01000000 	mrseq	r0, (UNDEF: 0)
    85b0:	0002c49c 	muleq	r2, ip, r4
    85b4:	1ab00d00 	bne	fec0b9bc <_estack+0xdec069bc>
    85b8:	7f010000 	svcvc	0x00010000
    85bc:	0000008c 	andeq	r0, r0, ip, lsl #1
    85c0:	00002e40 	andeq	r2, r0, r0, asr #28
    85c4:	001fe607 	andseq	lr, pc, r7, lsl #12
    85c8:	8c810100 	stfhis	f0, [r1], {0}
    85cc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    85d0:	00001d66 	andeq	r1, r0, r6, ror #26
    85d4:	00818201 	addeq	r8, r1, r1, lsl #4
    85d8:	52010000 	andpl	r0, r1, #0
    85dc:	001bd90f 	andseq	sp, fp, pc, lsl #18
    85e0:	81830100 	orrhi	r0, r3, r0, lsl #2
    85e4:	61000000 	mrsvs	r0, (UNDEF: 0)
    85e8:	0f00002e 	svceq	0x0000002e
    85ec:	00001ca7 	andeq	r1, r0, r7, lsr #25
    85f0:	00818401 	addeq	r8, r1, r1, lsl #8
    85f4:	2e740000 	cdpcs	0, 7, cr0, cr4, cr0, {0}
    85f8:	97100000 	ldrls	r0, [r0, -r0]
    85fc:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    8600:	50000022 	andpl	r0, r0, r2, lsr #32
    8604:	0100000e 	tsteq	r0, lr
    8608:	00029b97 	muleq	r2, r7, fp
    860c:	00a71100 	adceq	r1, r7, r0, lsl #2
    8610:	50120000 	andspl	r0, r2, r0
    8614:	1300000e 	movwne	r0, #14
    8618:	000000b2 	strheq	r0, [r0], -r2
    861c:	00005201 	andeq	r5, r0, r1, lsl #4
    8620:	00009714 	andeq	r9, r0, r4, lsl r7
    8624:	00226800 	eoreq	r6, r2, r0, lsl #16
    8628:	00000600 	andeq	r0, r0, r0, lsl #12
    862c:	11980100 	orrsne	r0, r8, r0, lsl #2
    8630:	000000a7 	andeq	r0, r0, r7, lsr #1
    8634:	00226815 	eoreq	r6, r2, r5, lsl r8
    8638:	00000600 	andeq	r0, r0, r0, lsl #12
    863c:	00b21600 	adcseq	r1, r2, r0, lsl #12
    8640:	2ea20000 	cdpcs	0, 10, cr0, cr2, cr0, {0}
    8644:	00000000 	andeq	r0, r0, r0
    8648:	19691700 	stmdbne	r9!, {r8, r9, sl, ip}^
    864c:	6c020000 	stcvs	0, cr0, [r2], {-0}
    8650:	000022cc 	andeq	r2, r0, ip, asr #5
    8654:	000000ac 	andeq	r0, r0, ip, lsr #1
    8658:	03439c01 	movteq	r9, #15361	; 0x3c01
    865c:	b00d0000 	andlt	r0, sp, r0
    8660:	0100001a 	tsteq	r0, sl, lsl r0
    8664:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    8668:	002eb500 	eoreq	fp, lr, r0, lsl #10
    866c:	1f000f00 	svcne	0x00000f00
    8670:	c1010000 	mrsgt	r0, (UNDEF: 1)
    8674:	00000081 	andeq	r0, r0, r1, lsl #1
    8678:	00002ee9 	andeq	r2, r0, r9, ror #29
    867c:	0020160f 	eoreq	r1, r0, pc, lsl #12
    8680:	81c20100 	bichi	r0, r2, r0, lsl #2
    8684:	12000000 	andne	r0, r0, #0
    8688:	1800002f 	stmdane	r0, {r0, r1, r2, r3, r5}
    868c:	00000097 	muleq	r0, r7, r0
    8690:	00002302 	andeq	r2, r0, r2, lsl #6
    8694:	00000006 	andeq	r0, r0, r6
    8698:	0332ee01 	teqeq	r2, #1, 28
    869c:	a7110000 	ldrge	r0, [r1, -r0]
    86a0:	15000000 	strne	r0, [r0, #-0]
    86a4:	00002302 	andeq	r2, r0, r2, lsl #6
    86a8:	00000006 	andeq	r0, r0, r6
    86ac:	0000b216 	andeq	fp, r0, r6, lsl r2
    86b0:	002f3900 	eoreq	r3, pc, r0, lsl #18
    86b4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    86b8:	000022f0 	strdeq	r2, [r0], -r0
    86bc:	0000021a 	andeq	r0, r0, sl, lsl r2
    86c0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    86c4:	00000074 	andeq	r0, r0, r4, ror r0
    86c8:	001b841b 	andseq	r8, fp, fp, lsl r4
    86cc:	8ca40200 	sfmhi	f0, 4, [r4]
    86d0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    86d4:	5c000023 	stcpl	0, cr0, [r0], {35}	; 0x23
    86d8:	01000000 	mrseq	r0, (UNDEF: 0)
    86dc:	0003bd9c 	muleq	r3, ip, sp
    86e0:	1ab01c00 	bne	fec0f6e8 <_estack+0xdec0a6e8>
    86e4:	1f010000 	svcne	0x00010000
    86e8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86ec:	002f4c00 	eoreq	r4, pc, r0, lsl #24
    86f0:	1e981d00 	cdpne	13, 9, cr1, cr8, cr0, {0}
    86f4:	21010000 	mrscs	r0, (UNDEF: 1)
    86f8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86fc:	002f6d00 	eoreq	r6, pc, r0, lsl #26
    8700:	1fb21d00 	svcne	0x00b21d00
    8704:	22010000 	andcs	r0, r1, #0
    8708:	00008c02 	andeq	r8, r0, r2, lsl #24
    870c:	002f8000 	eoreq	r8, pc, r0
    8710:	1fc01d00 	svcne	0x00c01d00
    8714:	23010000 	movwcs	r0, #4096	; 0x1000
    8718:	00008c02 	andeq	r8, r0, r2, lsl #24
    871c:	002fce00 	eoreq	ip, pc, r0, lsl #28
    8720:	1fff1d00 	svcne	0x00ff1d00
    8724:	24010000 	strcs	r0, [r1], #-0
    8728:	00008102 	andeq	r8, r0, r2, lsl #2
    872c:	00303600 	eorseq	r3, r0, r0, lsl #12
    8730:	1ff11d00 	svcne	0x00f11d00
    8734:	25010000 	strcs	r0, [r1, #-0]
    8738:	00008c02 	andeq	r8, r0, r2, lsl #24
    873c:	00305500 	eorseq	r5, r0, r0, lsl #10
    8740:	bc1b0000 	ldclt	0, cr0, [fp], {-0}
    8744:	0200001d 	andeq	r0, r0, #29
    8748:	00008cc1 	andeq	r8, r0, r1, asr #25
    874c:	0023d400 	eoreq	sp, r3, r0, lsl #8
    8750:	00001800 	andeq	r1, r0, r0, lsl #16
    8754:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    8758:	1d000003 	stcne	0, cr0, [r0, #-12]
    875c:	00001ff1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    8760:	8c026701 	stchi	7, cr6, [r2], {1}
    8764:	7a000000 	bvc	876c <__exidx_end+0x58f0>
    8768:	00000030 	andeq	r0, r0, r0, lsr r0
    876c:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
    8770:	00000000 	andeq	r0, r0, r0
    8774:	00001000 	andeq	r1, r0, r0
    8778:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    877c:	16000004 	strne	r0, [r0], -r4
    8780:	00000205 	andeq	r0, r0, r5, lsl #4
    8784:	000030a1 	andeq	r3, r0, r1, lsr #1
    8788:	1cea1b00 	vstmiane	sl!, {d17-d16}
    878c:	9d020000 	stcls	0, cr0, [r2, #-0]
    8790:	0000008c 	andeq	r0, r0, ip, lsl #1
    8794:	000023ec 	andeq	r2, r0, ip, ror #7
    8798:	00000010 	andeq	r0, r0, r0, lsl r0
    879c:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
    87a0:	f11d0000 			; <UNDEFINED> instruction: 0xf11d0000
    87a4:	0100001f 	tsteq	r0, pc, lsl r0
    87a8:	008c0297 	umulleq	r0, ip, r7, r2
    87ac:	30ba0000 	adcscc	r0, sl, r0
    87b0:	981d0000 	ldmdals	sp, {}	; <UNPREDICTABLE>
    87b4:	0100001e 	tsteq	r0, lr, lsl r0
    87b8:	008c0298 	umulleq	r0, ip, r8, r2
    87bc:	30db0000 	sbcscc	r0, fp, r0
    87c0:	1b000000 	blne	87c8 <__exidx_end+0x594c>
    87c4:	00001cca 	andeq	r1, r0, sl, asr #25
    87c8:	008c9602 	addeq	r9, ip, r2, lsl #12
    87cc:	23fc0000 	mvnscs	r0, #0
    87d0:	00140000 	andseq	r0, r4, r0
    87d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    87d8:	00000478 	andeq	r0, r0, r8, ror r4
    87dc:	001ff11d 	andseq	pc, pc, sp, lsl r1	; <UNPREDICTABLE>
    87e0:	02ba0100 	adcseq	r0, sl, #0, 2
    87e4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87e8:	000030ee 	andeq	r3, r0, lr, ror #1
    87ec:	001e981d 	andseq	r9, lr, sp, lsl r8
    87f0:	02bb0100 	adcseq	r0, fp, #0, 2
    87f4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87f8:	0000310f 	andeq	r3, r0, pc, lsl #2
    87fc:	1f911b00 	svcne	0x00911b00
    8800:	8f020000 	svchi	0x00020000
    8804:	0000008c 	andeq	r0, r0, ip, lsl #1
    8808:	00002410 	andeq	r2, r0, r0, lsl r4
    880c:	00000064 	andeq	r0, r0, r4, rrx
    8810:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
    8814:	441c0000 	ldrmi	r0, [ip], #-0
    8818:	0100001a 	tsteq	r0, sl, lsl r0
    881c:	008c02db 	ldrdeq	r0, [ip], fp
    8820:	31220000 			; <UNDEFINED> instruction: 0x31220000
    8824:	f11d0000 			; <UNDEFINED> instruction: 0xf11d0000
    8828:	0100001f 	tsteq	r0, pc, lsl r0
    882c:	008c02dd 	ldrdeq	r0, [ip], sp
    8830:	31430000 	mrscc	r0, (UNDEF: 67)
    8834:	981d0000 	ldmdals	sp, {}	; <UNPREDICTABLE>
    8838:	0100001e 	tsteq	r0, lr, lsl r0
    883c:	008c02de 	ldrdeq	r0, [ip], lr
    8840:	31770000 	cmncc	r7, r0
    8844:	f21d0000 	vhadd.s16	d0, d13, d0
    8848:	0100001b 	tsteq	r0, fp, lsl r0
    884c:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
    8850:	318a0000 	orrcc	r0, sl, r0
    8854:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    8858:	0100001f 	tsteq	r0, pc, lsl r0
    885c:	008c02e0 	addeq	r0, ip, r0, ror #5
    8860:	31b80000 			; <UNDEFINED> instruction: 0x31b80000
    8864:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    8868:	0100001e 	tsteq	r0, lr, lsl r0
    886c:	008c02e1 	addeq	r0, ip, r1, ror #5
    8870:	621d0000 	andsvs	r0, sp, #0
    8874:	0100001c 	tsteq	r0, ip, lsl r0
    8878:	008102e2 	addeq	r0, r1, r2, ror #5
    887c:	31e60000 	mvncc	r0, r0
    8880:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8884:	000000be 	strheq	r0, [r0], -lr
    8888:	00002474 	andeq	r2, r0, r4, ror r4
    888c:	00000014 	andeq	r0, r0, r4, lsl r0
    8890:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    8894:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    8898:	61000000 	mrsvs	r0, (UNDEF: 0)
    889c:	16000032 			; <UNDEFINED> instruction: 0x16000032
    88a0:	000000da 	ldrdeq	r0, [r0], -sl
    88a4:	00003282 	andeq	r3, r0, r2, lsl #5
    88a8:	00247615 	eoreq	r7, r4, r5, lsl r6
    88ac:	00000a00 	andeq	r0, r0, r0, lsl #20
    88b0:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    88b4:	32a10000 	adccc	r0, r1, #0
    88b8:	76150000 	ldrvc	r0, [r5], -r0
    88bc:	0a000024 	beq	8954 <__exidx_end+0x5ad8>
    88c0:	16000000 	strne	r0, [r0], -r0
    88c4:	000000da 	ldrdeq	r0, [r0], -sl
    88c8:	000032c2 	andeq	r3, r0, r2, asr #5
    88cc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    88d0:	000000e7 	andeq	r0, r0, r7, ror #1
    88d4:	00002488 	andeq	r2, r0, r8, lsl #9
    88d8:	00000014 	andeq	r0, r0, r4, lsl r0
    88dc:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    88e0:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    88e4:	d5000000 	strle	r0, [r0, #-0]
    88e8:	16000032 			; <UNDEFINED> instruction: 0x16000032
    88ec:	00000103 	andeq	r0, r0, r3, lsl #2
    88f0:	000032f6 	strdeq	r3, [r0], -r6
    88f4:	00248a15 	eoreq	r8, r4, r5, lsl sl
    88f8:	00000a00 	andeq	r0, r0, r0, lsl #20
    88fc:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    8900:	33150000 	tstcc	r5, #0
    8904:	8a150000 	bhi	54890c <__ccfg+0x528964>
    8908:	0a000024 	beq	89a0 <__exidx_end+0x5b24>
    890c:	16000000 	strne	r0, [r0], -r0
    8910:	00000103 	andeq	r0, r0, r3, lsl #2
    8914:	00003336 	andeq	r3, r0, r6, lsr r3
    8918:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    891c:	00000110 	andeq	r0, r0, r0, lsl r1
    8920:	0000249c 	muleq	r0, ip, r4
    8924:	00000014 	andeq	r0, r0, r4, lsl r0
    8928:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
    892c:	201f0000 	andscs	r0, pc, r0
    8930:	49000001 	stmdbmi	r0, {r0}
    8934:	16000033 			; <UNDEFINED> instruction: 0x16000033
    8938:	0000012c 	andeq	r0, r0, ip, lsr #2
    893c:	0000336a 	andeq	r3, r0, sl, ror #6
    8940:	00249e15 	eoreq	r9, r4, r5, lsl lr
    8944:	00000a00 	andeq	r0, r0, r0, lsl #20
    8948:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    894c:	33890000 	orrcc	r0, r9, #0
    8950:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    8954:	0a000024 	beq	89ec <__exidx_end+0x5b70>
    8958:	16000000 	strne	r0, [r0], -r0
    895c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8960:	000033aa 	andeq	r3, r0, sl, lsr #7
    8964:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8968:	00000139 	andeq	r0, r0, r9, lsr r1
    896c:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    8970:	00000028 	andeq	r0, r0, r8, lsr #32
    8974:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    8978:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    897c:	bd000001 	stclt	0, cr0, [r0, #-4]
    8980:	16000033 			; <UNDEFINED> instruction: 0x16000033
    8984:	00000155 	andeq	r0, r0, r5, asr r1
    8988:	000033de 	ldrdeq	r3, [r0], -lr
    898c:	00016120 	andeq	r6, r1, r0, lsr #2
    8990:	24b21500 	ldrtcs	r1, [r2], #1280	; 0x500
    8994:	001c0000 	andseq	r0, ip, r0
    8998:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    899c:	fd000001 	stc2	0, cr0, [r0, #-4]
    89a0:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    89a4:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    89a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    89ac:	00015516 	andeq	r5, r1, r6, lsl r5
    89b0:	00341e00 	eorseq	r1, r4, r0, lsl #28
    89b4:	01611600 	cmneq	r1, r0, lsl #12
    89b8:	344b0000 	strbcc	r0, [fp], #-0
    89bc:	00000000 	andeq	r0, r0, r0
    89c0:	1c171b00 			; <UNDEFINED> instruction: 0x1c171b00
    89c4:	cf020000 	svcgt	0x00020000
    89c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    89cc:	000024d8 	ldrdeq	r2, [r0], -r8
    89d0:	00000010 	andeq	r0, r0, r0, lsl r0
    89d4:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    89d8:	b11d0000 	tstlt	sp, r0
    89dc:	0100001c 	tsteq	r0, ip, lsl r0
    89e0:	008c0384 	addeq	r0, ip, r4, lsl #7
    89e4:	345e0000 	ldrbcc	r0, [lr], #-0
    89e8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    89ec:	0000016e 	andeq	r0, r0, lr, ror #2
    89f0:	000024e8 	andeq	r2, r0, r8, ror #9
    89f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    89f8:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
    89fc:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    8a00:	79000001 	stmdbvc	r0, {r0}
    8a04:	16000034 			; <UNDEFINED> instruction: 0x16000034
    8a08:	0000018a 	andeq	r0, r0, sl, lsl #3
    8a0c:	0000349a 	muleq	r0, sl, r4
    8a10:	00019620 	andeq	r9, r1, r0, lsr #12
    8a14:	24ea1500 	strbtcs	r1, [sl], #1280	; 0x500
    8a18:	001e0000 	andseq	r0, lr, r0
    8a1c:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    8a20:	bd000001 	stclt	0, cr0, [r0, #-4]
    8a24:	15000034 	strne	r0, [r0, #-52]	; 0xffffffcc
    8a28:	000024ea 	andeq	r2, r0, sl, ror #9
    8a2c:	0000001e 	andeq	r0, r0, lr, lsl r0
    8a30:	00018a16 	andeq	r8, r1, r6, lsl sl
    8a34:	0034de00 	eorseq	sp, r4, r0, lsl #28
    8a38:	01961600 	orrseq	r1, r6, r0, lsl #12
    8a3c:	350b0000 	strcc	r0, [fp, #-0]
    8a40:	00000000 	andeq	r0, r0, r0
    8a44:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
    8a48:	25140000 	ldrcs	r0, [r4, #-0]
    8a4c:	00140000 	andseq	r0, r4, r0
    8a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a54:	0000070c 	andeq	r0, r0, ip, lsl #14
    8a58:	0001b31f 	andeq	fp, r1, pc, lsl r3
    8a5c:	00351e00 	eorseq	r1, r5, r0, lsl #28
    8a60:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    8a64:	353f0000 	ldrcc	r0, [pc, #-0]!	; 8a6c <__exidx_end+0x5bf0>
    8a68:	16150000 	ldrne	r0, [r5], -r0
    8a6c:	0a000025 	beq	8b08 <__exidx_end+0x5c8c>
    8a70:	1f000000 	svcne	0x00000000
    8a74:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    8a78:	0000355e 	andeq	r3, r0, lr, asr r5
    8a7c:	00251615 	eoreq	r1, r5, r5, lsl r6
    8a80:	00000a00 	andeq	r0, r0, r0, lsl #20
    8a84:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    8a88:	357f0000 	ldrbcc	r0, [pc, #-0]!	; 8a90 <__exidx_end+0x5c14>
    8a8c:	00000000 	andeq	r0, r0, r0
    8a90:	01cc1e00 	biceq	r1, ip, r0, lsl #28
    8a94:	25280000 	strcs	r0, [r8, #-0]!
    8a98:	00140000 	andseq	r0, r4, r0
    8a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8aa0:	00000758 	andeq	r0, r0, r8, asr r7
    8aa4:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    8aa8:	00359200 	eorseq	r9, r5, r0, lsl #4
    8aac:	01e81600 	mvneq	r1, r0, lsl #12
    8ab0:	35b30000 	ldrcc	r0, [r3, #0]!
    8ab4:	2a150000 	bcs	548abc <__ccfg+0x528b14>
    8ab8:	0a000025 	beq	8b54 <__exidx_end+0x5cd8>
    8abc:	1f000000 	svcne	0x00000000
    8ac0:	000001dc 	ldrdeq	r0, [r0], -ip
    8ac4:	000035d2 	ldrdeq	r3, [r0], -r2
    8ac8:	00252a15 	eoreq	r2, r5, r5, lsl sl
    8acc:	00000a00 	andeq	r0, r0, r0, lsl #20
    8ad0:	01e81600 	mvneq	r1, r0, lsl #12
    8ad4:	35f30000 	ldrbcc	r0, [r3, #0]!
    8ad8:	00000000 	andeq	r0, r0, r0
    8adc:	19991700 	ldmibne	r9, {r8, r9, sl, ip}
    8ae0:	73020000 	movwvc	r0, #8192	; 0x2000
    8ae4:	0000253c 	andeq	r2, r0, ip, lsr r5
    8ae8:	00000110 	andeq	r0, r0, r0, lsl r1
    8aec:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    8af0:	441c0000 	ldrmi	r0, [ip], #-0
    8af4:	0100001a 	tsteq	r0, sl, lsl r0
    8af8:	008c0127 	addeq	r0, ip, r7, lsr #2
    8afc:	36060000 	strcc	r0, [r6], -r0
    8b00:	b01c0000 	andslt	r0, ip, r0
    8b04:	0100001a 	tsteq	r0, sl, lsl r0
    8b08:	008c0127 	addeq	r0, ip, r7, lsr #2
    8b0c:	36320000 	ldrtcc	r0, [r2], -r0
    8b10:	1b1d0000 	blne	748b18 <__ccfg+0x728b70>
    8b14:	0100001e 	tsteq	r0, lr, lsl r0
    8b18:	008c0129 	addeq	r0, ip, r9, lsr #2
    8b1c:	36530000 	ldrbcc	r0, [r3], -r0
    8b20:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    8b24:	6c000001 	stcvs	0, cr0, [r0], {1}
    8b28:	68000025 	stmdavs	r0, {r0, r2, r5}
    8b2c:	0100000e 	tsteq	r0, lr
    8b30:	07c10140 	strbeq	r0, [r1, r0, asr #2]
    8b34:	68120000 	ldmdavs	r2, {}	; <UNPREDICTABLE>
    8b38:	1600000e 	strne	r0, [r0], -lr
    8b3c:	00000205 	andeq	r0, r0, r5, lsl #4
    8b40:	00003721 	andeq	r3, r0, r1, lsr #14
    8b44:	46220000 	strtmi	r0, [r2], -r0
    8b48:	43000025 	movwmi	r0, #37	; 0x25
    8b4c:	d6000003 	strle	r0, [r0], -r3
    8b50:	1a000007 	bne	8b74 <__exidx_end+0x5cf8>
    8b54:	f3035001 	vhadd.u8	d5, d3, d1
    8b58:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    8b5c:	00002552 	andeq	r2, r0, r2, asr r5
    8b60:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b64:	000007ef 	andeq	r0, r0, pc, ror #15
    8b68:	0151011a 	cmpeq	r1, sl, lsl r1
    8b6c:	50011a48 	andpl	r1, r1, r8, asr #20
    8b70:	00007402 	andeq	r7, r0, r2, lsl #8
    8b74:	00255623 	eoreq	r5, r5, r3, lsr #12
    8b78:	0003bd00 	andeq	fp, r3, r0, lsl #26
    8b7c:	256c2400 	strbcs	r2, [ip, #-1024]!	; 0xfffffc00
    8b80:	76020000 	strvc	r0, [r2], -r0
    8b84:	00081d00 	andeq	r1, r8, r0, lsl #26
    8b88:	53011a00 	movwpl	r1, #6656	; 0x1a00
    8b8c:	011a3001 	tsteq	sl, r1
    8b90:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    8b94:	51011a03 	tstpl	r1, r3, lsl #20
    8b98:	1a2c0802 	bne	b0aba8 <__ccfg+0xaeac00>
    8b9c:	74025001 	strvc	r5, [r2], #-1
    8ba0:	7c220000 	stcvc	0, cr0, [r2], #-0
    8ba4:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8ba8:	3600000a 	strcc	r0, [r0], -sl
    8bac:	1a000008 	bne	8bd4 <__exidx_end+0x5d58>
    8bb0:	4c015101 	stfmis	f5, [r1], {1}
    8bb4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bb8:	23000074 	movwcs	r0, #116	; 0x74
    8bbc:	00002580 	andeq	r2, r0, r0, lsl #11
    8bc0:	00000404 	andeq	r0, r0, r4, lsl #8
    8bc4:	00258a22 	eoreq	r8, r5, r2, lsr #20
    8bc8:	000ad600 	andeq	sp, sl, r0, lsl #12
    8bcc:	00085800 	andeq	r5, r8, r0, lsl #16
    8bd0:	51011a00 	tstpl	r1, r0, lsl #20
    8bd4:	011a4401 	tsteq	sl, r1, lsl #8
    8bd8:	00740250 	rsbseq	r0, r4, r0, asr r2
    8bdc:	258e2300 	strcs	r2, [lr, #768]	; 0x300
    8be0:	043e0000 	ldrteq	r0, [lr], #-0
    8be4:	98220000 	stmdals	r2!, {}	; <UNPREDICTABLE>
    8be8:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8bec:	7a00000a 	bvc	8c1c <__exidx_end+0x5da0>
    8bf0:	1a000008 	bne	8c18 <__exidx_end+0x5d9c>
    8bf4:	40015101 	andmi	r5, r1, r1, lsl #2
    8bf8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bfc:	22000074 	andcs	r0, r0, #116	; 0x74
    8c00:	0000259e 	muleq	r0, lr, r5
    8c04:	00000478 	andeq	r0, r0, r8, ror r4
    8c08:	0000088e 	andeq	r0, r0, lr, lsl #17
    8c0c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c10:	22000075 	andcs	r0, r0, #117	; 0x75
    8c14:	000025a8 	andeq	r2, r0, r8, lsr #11
    8c18:	00000ad6 	ldrdeq	r0, [r0], -r6
    8c1c:	000008a7 	andeq	r0, r0, r7, lsr #17
    8c20:	0151011a 	cmpeq	r1, sl, lsl r1
    8c24:	50011a3c 	andpl	r1, r1, ip, lsr sl
    8c28:	00007402 	andeq	r7, r0, r2, lsl #8
    8c2c:	0025ae22 	eoreq	sl, r5, r2, lsr #28
    8c30:	0000e700 	andeq	lr, r0, r0, lsl #14
    8c34:	0008bb00 	andeq	fp, r8, r0, lsl #22
    8c38:	50011a00 	andpl	r1, r1, r0, lsl #20
    8c3c:	00007502 	andeq	r7, r0, r2, lsl #10
    8c40:	0025c022 	eoreq	ip, r5, r2, lsr #32
    8c44:	00011000 	andeq	r1, r1, r0
    8c48:	0008cf00 	andeq	ip, r8, r0, lsl #30
    8c4c:	50011a00 	andpl	r1, r1, r0, lsl #20
    8c50:	00007502 	andeq	r7, r0, r2, lsl #10
    8c54:	0025ce22 	eoreq	ip, r5, r2, lsr #28
    8c58:	00013900 	andeq	r3, r1, r0, lsl #18
    8c5c:	0008e300 	andeq	lr, r8, r0, lsl #6
    8c60:	50011a00 	andpl	r1, r1, r0, lsl #20
    8c64:	00007502 	andeq	r7, r0, r2, lsl #10
    8c68:	0025d822 	eoreq	sp, r5, r2, lsr #16
    8c6c:	000ad600 	andeq	sp, sl, r0, lsl #12
    8c70:	0008fd00 	andeq	pc, r8, r0, lsl #26
    8c74:	51011a00 	tstpl	r1, r0, lsl #20
    8c78:	1a280802 	bne	a0ac88 <__ccfg+0x9eace0>
    8c7c:	74025001 	strvc	r5, [r2], #-1
    8c80:	de220000 	cdple	0, 2, cr0, cr2, cr0, {0}
    8c84:	be000025 	cdplt	0, 0, cr0, cr0, cr5, {1}
    8c88:	11000000 	mrsne	r0, (UNDEF: 0)
    8c8c:	1a000009 	bne	8cb8 <__exidx_end+0x5e3c>
    8c90:	75025001 	strvc	r5, [r2, #-1]
    8c94:	f0220000 			; <UNDEFINED> instruction: 0xf0220000
    8c98:	a3000025 	movwge	r0, #37	; 0x25
    8c9c:	25000001 	strcs	r0, [r0, #-1]
    8ca0:	1a000009 	bne	8ccc <__exidx_end+0x5e50>
    8ca4:	75025001 	strvc	r5, [r2, #-1]
    8ca8:	02220000 	eoreq	r0, r2, #0
    8cac:	cc000026 	stcgt	0, cr0, [r0], {38}	; 0x26
    8cb0:	39000001 	stmdbcc	r0, {r0}
    8cb4:	1a000009 	bne	8ce0 <__exidx_end+0x5e64>
    8cb8:	75025001 	strvc	r5, [r2, #-1]
    8cbc:	16220000 	strtne	r0, [r2], -r0
    8cc0:	6e000026 	cdpvs	0, 0, cr0, cr0, cr6, {1}
    8cc4:	4d000001 	stcmi	0, cr0, [r0, #-4]
    8cc8:	1a000009 	bne	8cf4 <__exidx_end+0x5e78>
    8ccc:	75025001 	strvc	r5, [r2, #-1]
    8cd0:	20190000 	andscs	r0, r9, r0
    8cd4:	d6000026 	strle	r0, [r0], -r6, lsr #32
    8cd8:	1a00000a 	bne	8d08 <__exidx_end+0x5e8c>
    8cdc:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    8ce0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8ce4:	00000074 	andeq	r0, r0, r4, ror r0
    8ce8:	001a1617 	andseq	r1, sl, r7, lsl r6
    8cec:	4cfd0200 	lfmmi	f0, 2, [sp]
    8cf0:	64000026 	strvs	r0, [r0], #-38	; 0xffffffda
    8cf4:	01000000 	mrseq	r0, (UNDEF: 0)
    8cf8:	0009899c 	muleq	r9, ip, r9
    8cfc:	1be51d00 	blne	ff950104 <_estack+0xdf94b104>
    8d00:	eb010000 	bl	48d08 <__ccfg+0x28d60>
    8d04:	00008c03 	andeq	r8, r0, r3, lsl #24
    8d08:	00373a00 	eorseq	r3, r7, r0, lsl #20
    8d0c:	730c0000 	movwvc	r0, #49152	; 0xc000
    8d10:	0200001f 	andeq	r0, r0, #31
    8d14:	26b00106 	ldrtcs	r0, [r0], r6, lsl #2
    8d18:	00280000 	eoreq	r0, r8, r0
    8d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d20:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    8d24:	001db21c 	andseq	fp, sp, ip, lsl r2
    8d28:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
    8d2c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8d30:	00003755 	andeq	r3, r0, r5, asr r7
    8d34:	19c91700 	stmibne	r9, {r8, r9, sl, ip}^
    8d38:	7a020000 	bvc	88d40 <__ccfg+0x68d98>
    8d3c:	000026d8 	ldrdeq	r2, [r0], -r8
    8d40:	00000150 	andeq	r0, r0, r0, asr r1
    8d44:	0ad69c01 	beq	ff5afd50 <_estack+0xdf5aad50>
    8d48:	b01c0000 	andslt	r0, ip, r0
    8d4c:	0100001a 	tsteq	r0, sl, lsl r0
    8d50:	008c019b 	umulleq	r0, ip, fp, r1
    8d54:	37760000 	ldrbcc	r0, [r6, -r0]!
    8d58:	111d0000 	tstne	sp, r0
    8d5c:	0100001f 	tsteq	r0, pc, lsl r0
    8d60:	008c019d 	umulleq	r0, ip, sp, r1
    8d64:	37d10000 	ldrbcc	r0, [r1, r0]
    8d68:	1b1d0000 	blne	748d70 <__ccfg+0x728dc8>
    8d6c:	0100001e 	tsteq	r0, lr, lsl r0
    8d70:	008c019e 	umulleq	r0, ip, lr, r1
    8d74:	37e40000 	strbcc	r0, [r4, r0]!
    8d78:	651d0000 	ldrvs	r0, [sp, #-0]
    8d7c:	0100001b 	tsteq	r0, fp, lsl r0
    8d80:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
    8d84:	37f70000 	ldrbcc	r0, [r7, r0]!
    8d88:	401d0000 	andsmi	r0, sp, r0
    8d8c:	0100001b 	tsteq	r0, fp, lsl r0
    8d90:	008c01a0 	addeq	r0, ip, r0, lsr #3
    8d94:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    8d98:	12250000 	eorne	r0, r5, #0
    8d9c:	ea000002 	b	8dac <__exidx_end+0x5f30>
    8da0:	3e000027 	cdpcc	0, 0, cr0, cr0, cr7, {1}
    8da4:	01000000 	mrseq	r0, (UNDEF: 0)
    8da8:	62230216 	eorvs	r0, r3, #1610612737	; 0x60000001
    8dac:	3c000027 	stccc	0, cr0, [r0], {39}	; 0x27
    8db0:	22000006 	andcs	r0, r0, #6
    8db4:	00002784 	andeq	r2, r0, r4, lsl #15
    8db8:	00000af2 	strdeq	r0, [r0], -r2
    8dbc:	00000a46 	andeq	r0, r0, r6, asr #20
    8dc0:	0151011a 	cmpeq	r1, sl, lsl r1
    8dc4:	50011a31 	andpl	r1, r1, r1, lsr sl
    8dc8:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8dcc:	0000278a 	andeq	r2, r0, sl, lsl #15
    8dd0:	00000989 	andeq	r0, r0, r9, lsl #19
    8dd4:	00000a5d 	andeq	r0, r0, sp, asr sl
    8dd8:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    8ddc:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
    8de0:	90230000 	eorls	r0, r3, r0
    8de4:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    8de8:	2200000b 	andcs	r0, r0, #11
    8dec:	0000279a 	muleq	r0, sl, r7
    8df0:	00000af2 	strdeq	r0, [r0], -r2
    8df4:	00000a7f 	andeq	r0, r0, pc, ror sl
    8df8:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8dfc:	011a0074 	tsteq	sl, r4, ror r0
    8e00:	00340150 	eorseq	r0, r4, r0, asr r1
    8e04:	0027a022 	eoreq	sl, r7, r2, lsr #32
    8e08:	000b0800 	andeq	r0, fp, r0, lsl #16
    8e0c:	000a9200 	andeq	r9, sl, r0, lsl #4
    8e10:	50011a00 	andpl	r1, r1, r0, lsl #20
    8e14:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8e18:	000027b0 			; <UNDEFINED> instruction: 0x000027b0
    8e1c:	00000989 	andeq	r0, r0, r9, lsl #19
    8e20:	00000aac 	andeq	r0, r0, ip, lsr #21
    8e24:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
    8e28:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
    8e2c:	1a00ffff 	bne	48e30 <__ccfg+0x28e88>
    8e30:	27c02600 	strbcs	r2, [r0, r0, lsl #12]
    8e34:	0acc0000 	beq	ff308e3c <_estack+0xdf303e3c>
    8e38:	011a0000 	tsteq	sl, r0
    8e3c:	000c0552 	andeq	r0, ip, r2, asr r5
    8e40:	1a600060 	bne	1808fc8 <__ccfg+0x17e9020>
    8e44:	37015101 	strcc	r5, [r1, -r1, lsl #2]
    8e48:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
    8e4c:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    8e50:	27d62300 	ldrbcs	r2, [r6, r0, lsl #6]
    8e54:	0af20000 	beq	ffc88e5c <_estack+0xdfc83e5c>
    8e58:	27000000 	strcs	r0, [r0, -r0]
    8e5c:	00001d2b 	andeq	r1, r0, fp, lsr #26
    8e60:	f201ca06 	vpmax.s8	d12, d1, d6
    8e64:	2800000a 	stmdacs	r0, {r1, r3}
    8e68:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e6c:	00008c28 	andeq	r8, r0, r8, lsr #24
    8e70:	008c2800 	addeq	r2, ip, r0, lsl #16
    8e74:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    8e78:	00001b4d 	andeq	r1, r0, sp, asr #22
    8e7c:	0b08f907 	bleq	2472a0 <__ccfg+0x2272f8>
    8e80:	8c280000 	stchi	0, cr0, [r8], #-0
    8e84:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8e88:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e8c:	1ee82a00 	vfmane.f32	s5, s16, s0
    8e90:	10070000 	andne	r0, r7, r0
    8e94:	00008c01 	andeq	r8, r0, r1, lsl #24
    8e98:	008c2800 	addeq	r2, ip, r0, lsl #16
    8e9c:	00000000 	andeq	r0, r0, r0
    8ea0:	00000923 	andeq	r0, r0, r3, lsr #18
    8ea4:	2a250004 	bcs	948ebc <__ccfg+0x928f14>
    8ea8:	01040000 	mrseq	r0, (UNDEF: 4)
    8eac:	00001690 	muleq	r0, r0, r6
    8eb0:	0020fb01 	eoreq	pc, r0, r1, lsl #22
    8eb4:	00178500 	andseq	r8, r7, r0, lsl #10
    8eb8:	000f5800 	andeq	r5, pc, r0, lsl #16
    8ebc:	00000000 	andeq	r0, r0, r0
    8ec0:	00629100 	rsbeq	r9, r2, r0, lsl #2
    8ec4:	17400200 	strbne	r0, [r0, -r0, lsl #4]
    8ec8:	1b060000 	blne	188ed0 <__ccfg+0x168f28>
    8ecc:	00000030 	andeq	r0, r0, r0, lsr r0
    8ed0:	b7060103 	strlt	r0, [r6, -r3, lsl #2]
    8ed4:	02000003 	andeq	r0, r0, #3
    8ed8:	0000223a 	andeq	r2, r0, sl, lsr r2
    8edc:	00421d06 	subeq	r1, r2, r6, lsl #26
    8ee0:	01030000 	mrseq	r0, (UNDEF: 3)
    8ee4:	0003b508 	andeq	fp, r3, r8, lsl #10
    8ee8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    8eec:	000003f1 	strdeq	r0, [r0], -r1
    8ef0:	00212802 	eoreq	r2, r1, r2, lsl #16
    8ef4:	5b2b0600 	blpl	aca6fc <__ccfg+0xaaa754>
    8ef8:	03000000 	movweq	r0, #0
    8efc:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    8f00:	86020000 	strhi	r0, [r2], -r0
    8f04:	06000016 			; <UNDEFINED> instruction: 0x06000016
    8f08:	00006d3f 	andeq	r6, r0, pc, lsr sp
    8f0c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    8f10:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    8f14:	0017f102 	andseq	pc, r7, r2, lsl #2
    8f18:	7f410600 	svcvc	0x00410600
    8f1c:	03000000 	movweq	r0, #0
    8f20:	00850704 	addeq	r0, r5, r4, lsl #14
    8f24:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8f28:	0000ab05 	andeq	sl, r0, r5, lsl #22
    8f2c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    8f30:	00000080 	andeq	r0, r0, r0, lsl #1
    8f34:	69050404 	stmdbvs	r5, {r2, sl}
    8f38:	0300746e 	movweq	r7, #1134	; 0x46e
    8f3c:	008a0704 	addeq	r0, sl, r4, lsl #14
    8f40:	42020000 	andmi	r0, r2, #0
    8f44:	07000017 	smladeq	r0, r7, r0, r0
    8f48:	00002513 	andeq	r2, r0, r3, lsl r5
    8f4c:	223c0200 	eorscs	r0, ip, #0, 4
    8f50:	14070000 	strne	r0, [r7], #-0
    8f54:	00000037 	andeq	r0, r0, r7, lsr r0
    8f58:	00212a02 	eoreq	r2, r1, r2, lsl #20
    8f5c:	501a0700 	andspl	r0, sl, r0, lsl #14
    8f60:	02000000 	andeq	r0, r0, #0
    8f64:	00001688 	andeq	r1, r0, r8, lsl #13
    8f68:	00621f07 	rsbeq	r1, r2, r7, lsl #30
    8f6c:	f3020000 	vhadd.u8	d0, d2, d0
    8f70:	07000017 	smladeq	r0, r7, r0, r0
    8f74:	00007420 	andeq	r7, r0, r0, lsr #8
    8f78:	23130200 	tstcs	r3, #0, 4
    8f7c:	33080000 	movwcc	r0, #32768	; 0x8000
    8f80:	000000e4 	andeq	r0, r0, r4, ror #1
    8f84:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    8f88:	05060000 	streq	r0, [r6, #-0]
    8f8c:	0000f104 	andeq	pc, r0, r4, lsl #2
    8f90:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    8f94:	ad080000 	stcge	0, cr0, [r8, #-0]
    8f98:	00000000 	andeq	r0, r0, r0
    8f9c:	00238902 	eoreq	r8, r3, r2, lsl #18
    8fa0:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    8fa4:	05000001 	streq	r0, [r0, #-1]
    8fa8:	00010d04 	andeq	r0, r1, r4, lsl #26
    8fac:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    8fb0:	01260000 			; <UNDEFINED> instruction: 0x01260000
    8fb4:	26080000 	strcs	r0, [r8], -r0
    8fb8:	08000001 	stmdaeq	r0, {r0}
    8fbc:	000000ce 	andeq	r0, r0, lr, asr #1
    8fc0:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8fc4:	04050000 	streq	r0, [r5], #-0
    8fc8:	000000ad 	andeq	r0, r0, sp, lsr #1
    8fcc:	0024b202 	eoreq	fp, r4, r2, lsl #4
    8fd0:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
    8fd4:	05000001 	streq	r0, [r0, #-1]
    8fd8:	00013d04 	andeq	r3, r1, r4, lsl #26
    8fdc:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    8fe0:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    8fe4:	09000025 	stmdbeq	r0, {r0, r2, r5}
    8fe8:	00013748 	andeq	r3, r1, r8, asr #14
    8fec:	22640200 	rsbcs	r0, r4, #0, 4
    8ff0:	4a090000 	bmi	248ff8 <__ccfg+0x229050>
    8ff4:	00000158 	andeq	r0, r0, r8, asr r1
    8ff8:	015e0405 	cmpeq	lr, r5, lsl #8
    8ffc:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    9000:	6d000000 	stcvs	0, cr0, [r0, #-0]
    9004:	08000001 	stmdaeq	r0, {r0}
    9008:	000000ce 	andeq	r0, r0, lr, asr #1
    900c:	21ca0200 	biccs	r0, sl, r0, lsl #4
    9010:	4c090000 	stcmi	0, cr0, [r9], {-0}
    9014:	00000137 	andeq	r0, r0, r7, lsr r1
    9018:	00213302 	eoreq	r3, r1, r2, lsl #6
    901c:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
    9020:	02000001 	andeq	r0, r0, #1
    9024:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    9028:	00e45109 	rsceq	r5, r4, r9, lsl #2
    902c:	36020000 	strcc	r0, [r2], -r0
    9030:	09000020 	stmdbeq	r0, {r5}
    9034:	00019953 	andeq	r9, r1, r3, asr r9
    9038:	9f040500 	svcls	0x00040500
    903c:	09000001 	stmdbeq	r0, {r0}
    9040:	000000ce 	andeq	r0, r0, lr, asr #1
    9044:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    9048:	0001b808 	andeq	fp, r1, r8, lsl #16
    904c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    9050:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    9054:	00000000 	andeq	r0, r0, r0
    9058:	00b80405 	adcseq	r0, r8, r5, lsl #8
    905c:	ad020000 	stcge	0, cr0, [r2, #-0]
    9060:	09000023 	stmdbeq	r0, {r0, r1, r5}
    9064:	0001c957 	andeq	ip, r1, r7, asr r9
    9068:	cf040500 	svcgt	0x00040500
    906c:	09000001 	stmdbeq	r0, {r0}
    9070:	000000ce 	andeq	r0, r0, lr, asr #1
    9074:	000001e3 	andeq	r0, r0, r3, ror #3
    9078:	0001e308 	andeq	lr, r1, r8, lsl #6
    907c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    9080:	05000000 	streq	r0, [r0, #-0]
    9084:	0000ce04 	andeq	ip, r0, r4, lsl #28
    9088:	21ed0200 	mvncs	r0, r0, lsl #4
    908c:	5a090000 	bpl	249094 <__ccfg+0x2290ec>
    9090:	000001c9 	andeq	r0, r0, r9, asr #3
    9094:	0022b602 	eoreq	fp, r2, r2, lsl #12
    9098:	c95d0900 	ldmdbgt	sp, {r8, fp}^
    909c:	02000001 	andeq	r0, r0, #1
    90a0:	00002048 	andeq	r2, r0, r8, asr #32
    90a4:	01c96009 	biceq	r6, r9, r9
    90a8:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    90ac:	09000023 	stmdbeq	r0, {r0, r1, r5}
    90b0:	0000e463 	andeq	lr, r0, r3, ror #8
    90b4:	206e0200 	rsbcs	r0, lr, r0, lsl #4
    90b8:	65090000 	strvs	r0, [r9, #-0]
    90bc:	00000220 	andeq	r0, r0, r0, lsr #4
    90c0:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    90c4:	31070000 	mrscc	r0, (UNDEF: 7)
    90c8:	08000002 	stmdaeq	r0, {r1}
    90cc:	000000ce 	andeq	r0, r0, lr, asr #1
    90d0:	252f0200 	strcs	r0, [pc, #-512]!	; 8ed8 <__exidx_end+0x605c>
    90d4:	67090000 	strvs	r0, [r9, -r0]
    90d8:	00000220 	andeq	r0, r0, r0, lsr #4
    90dc:	00232402 	eoreq	r2, r3, r2, lsl #8
    90e0:	eb690900 	bl	1a4b4e8 <__ccfg+0x1a2b540>
    90e4:	02000000 	andeq	r0, r0, #0
    90e8:	000024fd 	strdeq	r2, [r0], -sp
    90ec:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
    90f0:	d2020000 	andle	r0, r2, #0
    90f4:	09000022 	stmdbeq	r0, {r1, r5}
    90f8:	0000eb6d 	andeq	lr, r0, sp, ror #22
    90fc:	22e40200 	rsccs	r0, r4, #0, 4
    9100:	6f090000 	svcvs	0x00090000
    9104:	000000eb 	andeq	r0, r0, fp, ror #1
    9108:	7a094c0b 	bvc	25c13c <__ccfg+0x23c194>
    910c:	00000355 	andeq	r0, r0, r5, asr r3
    9110:	0022880c 	eoreq	r8, r2, ip, lsl #16
    9114:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
    9118:	00000000 	andeq	r0, r0, r0
    911c:	0024f00c 	eoreq	pc, r4, ip
    9120:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
    9124:	04000001 	streq	r0, [r0], #-1
    9128:	0022ac0c 	eoreq	sl, r2, ip, lsl #24
    912c:	427e0900 	rsbsmi	r0, lr, #0, 18
    9130:	08000001 	stmdaeq	r0, {r0}
    9134:	0024170c 	eoreq	r1, r4, ip, lsl #14
    9138:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
    913c:	0c000001 	stceq	0, cr0, [r0], {1}
    9140:	0024290c 	eoreq	r2, r4, ip, lsl #18
    9144:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
    9148:	10000001 	andne	r0, r0, r1
    914c:	00243b0c 	eoreq	r3, r4, ip, lsl #22
    9150:	78810900 	stmvc	r1, {r8, fp}
    9154:	14000001 	strne	r0, [r0], #-1
    9158:	0021860c 	eoreq	r8, r1, ip, lsl #12
    915c:	83820900 	orrhi	r0, r2, #0, 18
    9160:	18000001 	stmdane	r0, {r0}
    9164:	0022a10c 	eoreq	sl, r2, ip, lsl #2
    9168:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
    916c:	1c000001 	stcne	0, cr0, [r0], {1}
    9170:	0023f20c 	eoreq	pc, r3, ip, lsl #4
    9174:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
    9178:	20000001 	andcs	r0, r0, r1
    917c:	0022290c 	eoreq	r2, r2, ip, lsl #18
    9180:	e9850900 	stmib	r5, {r8, fp}
    9184:	24000001 	strcs	r0, [r0], #-1
    9188:	0022440c 	eoreq	r4, r2, ip, lsl #8
    918c:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
    9190:	28000001 	stmdacs	r0, {r0}
    9194:	00245f0c 	eoreq	r5, r4, ip, lsl #30
    9198:	ff870900 			; <UNDEFINED> instruction: 0xff870900
    919c:	2c000001 	stccs	0, cr0, [r0], {1}
    91a0:	0021db0c 	eoreq	sp, r1, ip, lsl #22
    91a4:	15880900 	strne	r0, [r8, #2304]	; 0x900
    91a8:	30000002 	andcc	r0, r0, r2
    91ac:	00244d0c 	eoreq	r4, r4, ip, lsl #26
    91b0:	31890900 	orrcc	r0, r9, r0, lsl #18
    91b4:	34000002 	strcc	r0, [r0], #-2
    91b8:	00228e0c 	eoreq	r8, r2, ip, lsl #28
    91bc:	0a8a0900 	beq	fe28b5c4 <_estack+0xde2865c4>
    91c0:	38000002 	stmdacc	r0, {r1}
    91c4:	0023020c 	eoreq	r0, r3, ip, lsl #4
    91c8:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
    91cc:	3c000002 	stccc	0, cr0, [r0], {2}
    91d0:	0024080c 	eoreq	r0, r4, ip, lsl #16
    91d4:	478c0900 	strmi	r0, [ip, r0, lsl #18]
    91d8:	40000002 	andmi	r0, r0, r2
    91dc:	0022030c 	eoreq	r0, r2, ip, lsl #6
    91e0:	528d0900 	addpl	r0, sp, #0, 18
    91e4:	44000002 	strmi	r0, [r0], #-2
    91e8:	00205f0c 	eoreq	r5, r0, ip, lsl #30
    91ec:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
    91f0:	48000002 	stmdami	r0, {r1}
    91f4:	23630200 	cmncs	r3, #0, 4
    91f8:	8f090000 	svchi	0x00090000
    91fc:	00000268 	andeq	r0, r0, r8, ror #4
    9200:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
    9204:	00000399 	muleq	r0, r9, r3
    9208:	0023a60c 	eoreq	sl, r3, ip, lsl #12
    920c:	ce4f0100 	dvfgte	f0, f7, f0
    9210:	00000000 	andeq	r0, r0, r0
    9214:	0024730c 	eoreq	r7, r4, ip, lsl #6
    9218:	b8500100 	ldmdalt	r0, {r8}^
    921c:	04000000 	streq	r0, [r0], #-0
    9220:	0022320c 	eoreq	r3, r2, ip, lsl #4
    9224:	ad510100 	ldfgee	f0, [r1, #-0]
    9228:	06000000 	streq	r0, [r0], -r0
    922c:	0021710c 	eoreq	r7, r1, ip, lsl #2
    9230:	a2520100 	subsge	r0, r2, #0, 2
    9234:	07000000 	streq	r0, [r0, -r0]
    9238:	249f0200 	ldrcs	r0, [pc], #512	; 9240 <__exidx_end+0x63c4>
    923c:	53010000 	movwpl	r0, #4096	; 0x1000
    9240:	00000360 	andeq	r0, r0, r0, ror #6
    9244:	0005700d 	andeq	r7, r5, sp
    9248:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    924c:	0003be03 	andeq	fp, r3, r3, lsl #28
    9250:	052a0e00 	streq	r0, [sl, #-3584]!	; 0xfffff200
    9254:	dc020000 	stcle	0, cr0, [r2], {-0}
    9258:	0000ce01 	andeq	ip, r0, r1, lsl #28
    925c:	850f0000 	strhi	r0, [pc, #-0]	; 9264 <__exidx_end+0x63e8>
    9260:	02000005 	andeq	r0, r0, #5
    9264:	00ce022c 	sbceq	r0, lr, ip, lsr #4
    9268:	10030000 	andne	r0, r3, r0
    926c:	0000068f 	andeq	r0, r0, pc, lsl #13
    9270:	03022a04 	movweq	r2, #10756	; 0x2a04
    9274:	001e2411 	andseq	r2, lr, r1, lsl r4
    9278:	c3e90500 	mvngt	r0, #0, 10
    927c:	03000000 	movweq	r0, #0
    9280:	000003fb 	strdeq	r0, [r0], -fp
    9284:	001b7412 	andseq	r7, fp, r2, lsl r4
    9288:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
    928c:	13000000 	movwne	r0, #0
    9290:	00001e7d 	andeq	r1, r0, sp, ror lr
    9294:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
    9298:	0d000000 	stceq	0, cr0, [r0, #-0]
    929c:	00002192 	muleq	r0, r2, r1
    92a0:	03025c04 	movweq	r5, #11268	; 0x2c04
    92a4:	00000415 	andeq	r0, r0, r5, lsl r4
    92a8:	0021600e 	eoreq	r6, r1, lr
    92ac:	025c0400 	subseq	r0, ip, #0, 8
    92b0:	000000ce 	andeq	r0, r0, lr, asr #1
    92b4:	23771000 	cmncs	r7, #0
    92b8:	40030000 	andmi	r0, r3, r0
    92bc:	330f0301 	movwcc	r0, #62209	; 0xf301
    92c0:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    92c4:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
    92c8:	03030000 	movweq	r0, #12288	; 0x3000
    92cc:	0bf80201 	bleq	ffe09ad8 <_estack+0xdfe04ad8>
    92d0:	bb140000 	bllt	5092d8 <__ccfg+0x4e9330>
    92d4:	0a000023 	beq	9368 <__exidx_end+0x64ec>
    92d8:	0000009e 	muleq	r0, lr, r0
    92dc:	0000f400 	andeq	pc, r0, r0, lsl #8
    92e0:	cd9c0100 	ldfgts	f0, [ip]
    92e4:	15000005 	strne	r0, [r0, #-5]
    92e8:	00002221 	andeq	r2, r0, r1, lsr #4
    92ec:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
    92f0:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    92f4:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
    92f8:	01000021 	tsteq	r0, r1, lsr #32
    92fc:	0000ce7c 	andeq	ip, r0, ip, ror lr
    9300:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
    9304:	000003a4 	andeq	r0, r0, r4, lsr #7
    9308:	00000000 	andeq	r0, r0, r0
    930c:	00000f28 	andeq	r0, r0, r8, lsr #30
    9310:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
    9314:	b1180000 	tstlt	r8, r0
    9318:	01000003 	tsteq	r0, r3
    931c:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
    9320:	00000000 	andeq	r0, r0, r0
    9324:	00040000 	andeq	r0, r4, r0
    9328:	82010000 	andhi	r0, r1, #0
    932c:	0004151a 	andeq	r1, r4, sl, lsl r5
    9330:	00000000 	andeq	r0, r0, r0
    9334:	00000800 	andeq	r0, r0, r0, lsl #16
    9338:	a9a10100 	stmibge	r1!, {r8}
    933c:	1b000004 	blne	9354 <__exidx_end+0x64d8>
    9340:	00000000 	andeq	r0, r0, r0
    9344:	000008de 	ldrdeq	r0, [r0], -lr
    9348:	03cb1900 	biceq	r1, fp, #0, 18
    934c:	00000000 	andeq	r0, r0, r0
    9350:	00060000 	andeq	r0, r6, r0
    9354:	b1010000 	mrslt	r0, (UNDEF: 1)
    9358:	00041e19 	andeq	r1, r4, r9, lsl lr
    935c:	00000000 	andeq	r0, r0, r0
    9360:	00000400 	andeq	r0, r0, r0, lsl #8
    9364:	1ab20100 	bne	fec8976c <_estack+0xdec8476c>
    9368:	000003fb 	strdeq	r0, [r0], -fp
    936c:	00000000 	andeq	r0, r0, r0
    9370:	0000000a 	andeq	r0, r0, sl
    9374:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
    9378:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    937c:	11000004 	tstne	r0, r4
    9380:	03cb1900 	biceq	r1, fp, #0, 18
    9384:	00000000 	andeq	r0, r0, r0
    9388:	00040000 	andeq	r0, r4, r0
    938c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    9390:	00041e19 	andeq	r1, r4, r9, lsl lr
    9394:	00000000 	andeq	r0, r0, r0
    9398:	00000200 	andeq	r0, r0, r0, lsl #4
    939c:	19ba0100 	ldmibne	sl!, {r8}
    93a0:	000003cb 	andeq	r0, r0, fp, asr #7
    93a4:	00000000 	andeq	r0, r0, r0
    93a8:	00000006 	andeq	r0, r0, r6
    93ac:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
    93b0:	00000004 	andeq	r0, r0, r4
    93b4:	02000000 	andeq	r0, r0, #0
    93b8:	01000000 	mrseq	r0, (UNDEF: 0)
    93bc:	00001cd0 	ldrdeq	r1, [r0], -r0
    93c0:	052e0000 	streq	r0, [lr, #-0]!
    93c4:	011d0000 	tsteq	sp, r0
    93c8:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    93cc:	001c0007 	andseq	r0, ip, r7
    93d0:	3f000000 	svccc	0x00000000
    93d4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    93d8:	0a035001 	beq	dd3e4 <__ccfg+0xbd43c>
    93dc:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
    93e0:	00000000 	andeq	r0, r0, r0
    93e4:	000008ef 	andeq	r0, r0, pc, ror #17
    93e8:	00000557 	andeq	r0, r0, r7, asr r5
    93ec:	0151011d 	cmpeq	r1, sp, lsl r1
    93f0:	50011d31 	andpl	r1, r1, r1, lsr sp
    93f4:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
    93f8:	00000000 	andeq	r0, r0, r0
    93fc:	000008ef 	andeq	r0, r0, pc, ror #17
    9400:	0000056f 	andeq	r0, r0, pc, ror #10
    9404:	0151011d 	cmpeq	r1, sp, lsl r1
    9408:	50011d33 	andpl	r1, r1, r3, lsr sp
    940c:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
    9410:	00000000 	andeq	r0, r0, r0
    9414:	00000905 	andeq	r0, r0, r5, lsl #18
    9418:	00000582 	andeq	r0, r0, r2, lsl #11
    941c:	0150011d 	cmpeq	r0, sp, lsl r1
    9420:	001c0031 	andseq	r0, ip, r1, lsr r0
    9424:	91000000 	mrsls	r0, (UNDEF: 0)
    9428:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    942c:	37015001 	strcc	r5, [r1, -r1]
    9430:	00001c00 	andeq	r1, r0, r0, lsl #24
    9434:	05a00000 	streq	r0, [r0, #0]!
    9438:	011d0000 	tsteq	sp, r0
    943c:	00370150 	eorseq	r0, r7, r0, asr r1
    9440:	0000001c 	andeq	r0, r0, ip, lsl r0
    9444:	0005b000 	andeq	fp, r5, r0
    9448:	50011d00 	andpl	r1, r1, r0, lsl #26
    944c:	00007602 	andeq	r7, r0, r2, lsl #12
    9450:	0000001c 	andeq	r0, r0, ip, lsl r0
    9454:	0005c000 	andeq	ip, r5, r0
    9458:	50011d00 	andpl	r1, r1, r0, lsl #26
    945c:	00007602 	andeq	r7, r0, r2, lsl #12
    9460:	0000001f 	andeq	r0, r0, pc, lsl r0
    9464:	50011d00 	andpl	r1, r1, r0, lsl #26
    9468:	00007602 	andeq	r7, r0, r2, lsl #12
    946c:	20d32000 	sbcscs	r2, r3, r0
    9470:	010a0000 	mrseq	r0, (UNDEF: 10)
    9474:	00282801 	eoreq	r2, r8, r1, lsl #16
    9478:	00022000 	andeq	r2, r2, r0
    947c:	c89c0100 	ldmgt	ip, {r8}
    9480:	21000007 	tstcs	r0, r7
    9484:	000022f4 	strdeq	r2, [r0], -r4
    9488:	00ceda01 	sbceq	sp, lr, r1, lsl #20
    948c:	38530000 	ldmdacc	r3, {}^	; <UNPREDICTABLE>
    9490:	57150000 	ldrpl	r0, [r5, -r0]
    9494:	01000020 	tsteq	r0, r0, lsr #32
    9498:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
    949c:	00387f00 	eorseq	r7, r8, r0, lsl #30
    94a0:	233f1500 	teqcs	pc, #0, 10
    94a4:	dd010000 	stcle	0, cr0, [r1, #-0]
    94a8:	000000c3 	andeq	r0, r0, r3, asr #1
    94ac:	0000389d 	muleq	r0, sp, r8
    94b0:	00227515 	eoreq	r7, r2, r5, lsl r5
    94b4:	c3de0100 	bicsgt	r0, lr, #0, 2
    94b8:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    94bc:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    94c0:	00002491 	muleq	r0, r1, r4
    94c4:	00c3df01 	sbceq	sp, r3, r1, lsl #30
    94c8:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    94cc:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    94d0:	01000020 	tsteq	r0, r0, lsr #32
    94d4:	0000c3e0 	andeq	ip, r0, r0, ror #7
    94d8:	00393300 	eorseq	r3, r9, r0, lsl #6
    94dc:	207f2200 	rsbscs	r2, pc, r0, lsl #4
    94e0:	e1010000 	mrs	r0, (UNDEF: 1)
    94e4:	000000c3 	andeq	r0, r0, r3, asr #1
    94e8:	b0155301 	andslt	r5, r5, r1, lsl #6
    94ec:	0100001a 	tsteq	r0, sl, lsl r0
    94f0:	0000cee2 	andeq	ip, r0, r2, ror #29
    94f4:	00394600 	eorseq	r4, r9, r0, lsl #12
    94f8:	236e1500 	cmncs	lr, #0, 10
    94fc:	e3010000 	movw	r0, #4096	; 0x1000
    9500:	000000ce 	andeq	r0, r0, lr, asr #1
    9504:	00003959 	andeq	r3, r0, r9, asr r9
    9508:	00209315 	eoreq	r9, r0, r5, lsl r3
    950c:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
    9510:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    9514:	23000039 	movwcs	r0, #57	; 0x39
    9518:	01006964 	tsteq	r0, r4, ror #18
    951c:	0000cee5 	andeq	ip, r0, r5, ror #29
    9520:	00398b00 	eorseq	r8, r9, r0, lsl #22
    9524:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
    9528:	e6010069 	str	r0, [r1], -r9, rrx
    952c:	000000ce 	andeq	r0, r0, lr, asr #1
    9530:	000039c1 	andeq	r3, r0, r1, asr #19
    9534:	00697423 	rsbeq	r7, r9, r3, lsr #8
    9538:	00cee701 	sbceq	lr, lr, r1, lsl #14
    953c:	39f70000 	ldmibcc	r7!, {}^	; <UNPREDICTABLE>
    9540:	63230000 			; <UNDEFINED> instruction: 0x63230000
    9544:	e8010064 	stmda	r1, {r2, r5, r6}
    9548:	000000ce 	andeq	r0, r0, lr, asr #1
    954c:	00003a67 	andeq	r3, r0, r7, ror #20
    9550:	006c6323 	rsbeq	r6, ip, r3, lsr #6
    9554:	00cee901 	sbceq	lr, lr, r1, lsl #18
    9558:	3a7a0000 	bcc	1e89560 <__ccfg+0x1e695b8>
    955c:	a4150000 	ldrge	r0, [r5], #-0
    9560:	01000020 	tsteq	r0, r0, lsr #32
    9564:	0000ceea 	andeq	ip, r0, sl, ror #29
    9568:	003a8d00 	eorseq	r8, sl, r0, lsl #26
    956c:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    9570:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
    9574:	fb130000 	blx	4c957e <__ccfg+0x4a95d6>
    9578:	01000021 	tsteq	r0, r1, lsr #32
    957c:	0000ceec 	andeq	ip, r0, ip, ror #29
    9580:	21a81500 			; <UNDEFINED> instruction: 0x21a81500
    9584:	ed010000 	stc	0, cr0, [r1, #-0]
    9588:	000000ce 	andeq	r0, r0, lr, asr #1
    958c:	00003aab 	andeq	r3, r0, fp, lsr #21
    9590:	00216c15 	eoreq	r6, r1, r5, lsl ip
    9594:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
    9598:	d4000000 	strle	r0, [r0], #-0
    959c:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    95a0:	000021a3 	andeq	r2, r0, r3, lsr #3
    95a4:	00ceef01 	sbceq	lr, lr, r1, lsl #30
    95a8:	3af30000 	bcc	ffcc95b0 <_estack+0xdfcc45b0>
    95ac:	fb150000 	blx	5495b6 <__ccfg+0x52960e>
    95b0:	01000023 	tsteq	r0, r3, lsr #32
    95b4:	0007c8f0 	strdeq	ip, [r7], -r0
    95b8:	003b3700 	eorseq	r3, fp, r0, lsl #14
    95bc:	28562500 	ldmdacs	r6, {r8, sl, sp}^
    95c0:	00120000 	andseq	r0, r2, r0
    95c4:	073b0000 	ldreq	r0, [fp, -r0]!
    95c8:	4b260000 	blmi	9895d0 <__ccfg+0x969628>
    95cc:	01000023 	tsteq	r0, r3, lsr #32
    95d0:	00c3010a 	sbceq	r0, r3, sl, lsl #2
    95d4:	3b4f0000 	blcc	13c95dc <__ccfg+0x13a9634>
    95d8:	27000000 	strcs	r0, [r0, -r0]
    95dc:	000003d4 	ldrdeq	r0, [r0], -r4
    95e0:	0000287c 	andeq	r2, r0, ip, ror r8
    95e4:	00000006 	andeq	r0, r0, r6
    95e8:	68011101 	stmdavs	r1, {r0, r8, ip}
    95ec:	28000007 	stmdacs	r0, {r0, r1, r2}
    95f0:	000003e4 	andeq	r0, r0, r4, ror #7
    95f4:	00287c29 	eoreq	r7, r8, r9, lsr #24
    95f8:	00000600 	andeq	r0, r0, r0, lsl #12
    95fc:	03ef2a00 	mvneq	r2, #0, 20
    9600:	3b620000 	blcc	1889608 <__ccfg+0x1869660>
    9604:	00000000 	andeq	r0, r0, r0
    9608:	0003d427 	andeq	sp, r3, r7, lsr #8
    960c:	00289400 	eoreq	r9, r8, r0, lsl #8
    9610:	00000600 	andeq	r0, r0, r0, lsl #12
    9614:	011b0100 	tsteq	fp, r0, lsl #2
    9618:	00000795 	muleq	r0, r5, r7
    961c:	0003e428 	andeq	lr, r3, r8, lsr #8
    9620:	28942900 	ldmcs	r4, {r8, fp, sp}
    9624:	00060000 	andeq	r0, r6, r0
    9628:	ef2a0000 	svc	0x002a0000
    962c:	75000003 	strvc	r0, [r0, #-3]
    9630:	0000003b 	andeq	r0, r0, fp, lsr r0
    9634:	03d42b00 	bicseq	r2, r4, #0, 22
    9638:	289e0000 	ldmcs	lr, {}	; <UNPREDICTABLE>
    963c:	0f400000 	svceq	0x00400000
    9640:	1f010000 	svcne	0x00010000
    9644:	0007be01 	andeq	fp, r7, r1, lsl #28
    9648:	03e42800 	mvneq	r2, #0, 16
    964c:	402c0000 	eormi	r0, ip, r0
    9650:	2a00000f 	bcs	9694 <__exidx_end+0x6818>
    9654:	000003ef 	andeq	r0, r0, pc, ror #7
    9658:	00003b88 	andeq	r3, r0, r8, lsl #23
    965c:	481b0000 	ldmdami	fp, {}	; <UNPREDICTABLE>
    9660:	1b000028 	blne	9708 <__exidx_end+0x688c>
    9664:	00000009 	andeq	r0, r0, r9
    9668:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
    966c:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
    9670:	20000000 	andcs	r0, r0, r0
    9674:	000020a9 	andeq	r2, r0, r9, lsr #1
    9678:	4801170a 	stmdami	r1, {r1, r3, r8, r9, sl, ip}
    967c:	6000002a 	andvs	r0, r0, sl, lsr #32
    9680:	01000000 	mrseq	r0, (UNDEF: 0)
    9684:	0008339c 	muleq	r8, ip, r3
    9688:	20572600 	subscs	r2, r7, r0, lsl #12
    968c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    9690:	0000c301 	andeq	ip, r0, r1, lsl #6
    9694:	003b9b00 	eorseq	r9, fp, r0, lsl #22
    9698:	224e2600 	subcs	r2, lr, #0, 12
    969c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    96a0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96a4:	003bc600 	eorseq	ip, fp, r0, lsl #12
    96a8:	22172600 	andscs	r2, r7, #0, 12
    96ac:	ba010000 	blt	496b4 <__ccfg+0x2970c>
    96b0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96b4:	003bd900 	eorseq	sp, fp, r0, lsl #18
    96b8:	21a82600 			; <UNDEFINED> instruction: 0x21a82600
    96bc:	bb010000 	bllt	496c4 <__ccfg+0x2971c>
    96c0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96c4:	003c0000 	eorseq	r0, ip, r0
    96c8:	2a561b00 	bcs	15902d0 <__ccfg+0x1570328>
    96cc:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    96d0:	20000000 	andcs	r0, r0, r0
    96d4:	000024c3 	andeq	r2, r0, r3, asr #9
    96d8:	0001290a 	andeq	r2, r1, sl, lsl #18
    96dc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    96e0:	01000000 	mrseq	r0, (UNDEF: 0)
    96e4:	00088a9c 	muleq	r8, ip, sl
    96e8:	22c52600 	sbccs	r2, r5, #0, 12
    96ec:	e7010000 	str	r0, [r1, -r0]
    96f0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96f4:	003c2900 	eorseq	r2, ip, r0, lsl #18
    96f8:	24842600 	strcs	r2, [r4], #1536	; 0x600
    96fc:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    9700:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9704:	003c3c00 	eorseq	r3, ip, r0, lsl #24
    9708:	1ab02600 	bne	fec12f10 <_estack+0xdec0df10>
    970c:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    9710:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9714:	003c4f00 	eorseq	r4, ip, r0, lsl #30
    9718:	23962600 	orrscs	r2, r6, #0, 12
    971c:	ea010000 	b	49724 <__ccfg+0x2977c>
    9720:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9724:	003c6200 	eorseq	r6, ip, r0, lsl #4
    9728:	442e0000 	strtmi	r0, [lr], #-0
    972c:	0a000021 	beq	97b8 <__exidx_end+0x693c>
    9730:	00ce0142 	sbceq	r0, lr, r2, asr #2
    9734:	2aa80000 	bcs	fea0973c <_estack+0xdea0473c>
    9738:	00180000 	andseq	r0, r8, r0
    973c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9740:	00250d22 	eoreq	r0, r5, r2, lsr #26
    9744:	99550100 	ldmdbls	r5, {r8}^
    9748:	05000003 	streq	r0, [r0, #-3]
    974c:	00007c03 	andeq	r7, r0, r3, lsl #24
    9750:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
    9754:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
    9758:	c1300000 	teqgt	r0, r0
    975c:	0c000008 	stceq	0, cr0, [r0], {8}
    9760:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9764:	000018b5 			; <UNDEFINED> instruction: 0x000018b5
    9768:	00235322 	eoreq	r5, r3, r2, lsr #6
    976c:	d9610100 	stmdble	r1!, {r8}^
    9770:	05000008 	streq	r0, [r0, #-8]
    9774:	00000003 	andeq	r0, r0, r3
    9778:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
    977c:	1b310000 	blne	c49784 <__ccfg+0xc297dc>
    9780:	09000021 	stmdbeq	r0, {r0, r5}
    9784:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
    9788:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    978c:	31000000 	mrscc	r0, (UNDEF: 0)
    9790:	00001b4d 	andeq	r1, r0, sp, asr #22
    9794:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
    9798:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    979c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    97a0:	000000ce 	andeq	r0, r0, lr, asr #1
    97a4:	1ee83200 	cdpne	2, 14, cr3, cr8, cr0, {0}
    97a8:	10030000 	andne	r0, r3, r0
    97ac:	0000ce01 	andeq	ip, r0, r1, lsl #28
    97b0:	00091b00 	andeq	r1, r9, r0, lsl #22
    97b4:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    97b8:	33000000 	movwcc	r0, #0
    97bc:	00001657 	andeq	r1, r0, r7, asr r6
    97c0:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
    97c4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    97c8:	04000003 	streq	r0, [r0], #-3
    97cc:	002cdf00 	eoreq	sp, ip, r0, lsl #30
    97d0:	90010400 	andls	r0, r1, r0, lsl #8
    97d4:	01000016 	tsteq	r0, r6, lsl r0
    97d8:	00002816 	andeq	r2, r0, r6, lsl r8
    97dc:	00001785 	andeq	r1, r0, r5, lsl #15
    97e0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    97e4:	00000000 	andeq	r0, r0, r0
    97e8:	000065fa 	strdeq	r6, [r0], -sl
    97ec:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    97f0:	02000003 	andeq	r0, r0, #3
    97f4:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    97f8:	02020000 	andeq	r0, r2, #0
    97fc:	0003f105 	andeq	pc, r3, r5, lsl #2
    9800:	07020200 	streq	r0, [r2, -r0, lsl #4]
    9804:	00000273 	andeq	r0, r0, r3, ror r2
    9808:	b0050402 	andlt	r0, r5, r2, lsl #8
    980c:	03000000 	movweq	r0, #0
    9810:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    9814:	00534103 	subseq	r4, r3, r3, lsl #2
    9818:	04020000 	streq	r0, [r2], #-0
    981c:	00008507 	andeq	r8, r0, r7, lsl #10
    9820:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    9824:	000000ab 	andeq	r0, r0, fp, lsr #1
    9828:	80070802 	andhi	r0, r7, r2, lsl #16
    982c:	04000000 	streq	r0, [r0], #-0
    9830:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    9834:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    9838:	00008a07 	andeq	r8, r0, r7, lsl #20
    983c:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    9840:	20040000 	andcs	r0, r4, r0
    9844:	00000048 	andeq	r0, r0, r8, asr #32
    9848:	63020105 	movwvs	r0, #8453	; 0x2105
    984c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9850:	00275006 	eoreq	r5, r7, r6
    9854:	90060000 	andls	r0, r6, r0
    9858:	02000027 	andeq	r0, r0, #39	; 0x27
    985c:	00270006 	eoreq	r0, r7, r6
    9860:	40060400 	andmi	r0, r6, r0, lsl #8
    9864:	08000025 	stmdaeq	r0, {r0, r2, r5}
    9868:	26ec0300 	strbtcs	r0, [ip], r0, lsl #6
    986c:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    9870:	00000081 	andeq	r0, r0, r1, lsl #1
    9874:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
    9878:	000000da 	ldrdeq	r0, [r0], -sl
    987c:	00280606 	eoreq	r0, r8, r6, lsl #12
    9880:	58067f00 	stmdapl	r6, {r8, r9, sl, fp, ip, sp, lr}
    9884:	00000025 	andeq	r0, r0, r5, lsr #32
    9888:	0028b706 	eoreq	fp, r8, r6, lsl #14
    988c:	44060100 	strmi	r0, [r6], #-256	; 0xffffff00
    9890:	02000027 	andeq	r0, r0, #39	; 0x27
    9894:	0028a906 	eoreq	sl, r8, r6, lsl #18
    9898:	3d060300 	stccc	3, cr0, [r6, #-0]
    989c:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    98a0:	28c30300 	stmiacs	r3, {r8, r9}^
    98a4:	ac020000 	stcge	0, cr0, [r2], {-0}
    98a8:	000000ad 	andeq	r0, r0, sp, lsr #1
    98ac:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
    98b0:	00012501 	andeq	r2, r1, r1, lsl #10
    98b4:	271a0600 	ldrcs	r0, [sl, -r0, lsl #12]
    98b8:	067f0000 	ldrbteq	r0, [pc], -r0
    98bc:	00002608 	andeq	r2, r0, r8, lsl #12
    98c0:	26640600 	strbtcs	r0, [r4], -r0, lsl #12
    98c4:	06010000 	streq	r0, [r1], -r0
    98c8:	000026a0 	andeq	r2, r0, r0, lsr #13
    98cc:	27eb0602 	strbcs	r0, [fp, r2, lsl #12]!
    98d0:	06030000 	streq	r0, [r3], -r0
    98d4:	00002564 	andeq	r2, r0, r4, ror #10
    98d8:	262c0604 	strtcs	r0, [ip], -r4, lsl #12
    98dc:	06050000 	streq	r0, [r5], -r0
    98e0:	000027c5 	andeq	r2, r0, r5, asr #15
    98e4:	27d80606 	ldrbcs	r0, [r8, r6, lsl #12]
    98e8:	00070000 	andeq	r0, r7, r0
    98ec:	0025f008 	eoreq	pc, r5, r8
    98f0:	01470200 	mrseq	r0, (UNDEF: 103)
    98f4:	000000e5 	andeq	r0, r0, r5, ror #1
    98f8:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
    98fc:	00015f01 	andeq	r5, r1, r1, lsl #30
    9900:	26910600 	ldrcs	r0, [r1], r0, lsl #12
    9904:	067f0000 	ldrbteq	r0, [pc], -r0
    9908:	000026ba 			; <UNDEFINED> instruction: 0x000026ba
    990c:	27360600 	ldrcs	r0, [r6, -r0, lsl #12]!
    9910:	06010000 	streq	r0, [r1], -r0
    9914:	0000257d 	andeq	r2, r0, sp, ror r5
    9918:	27a00602 	strcs	r0, [r0, r2, lsl #12]!
    991c:	06030000 	streq	r0, [r3], -r0
    9920:	00002653 	andeq	r2, r0, r3, asr r6
    9924:	19080004 	stmdbne	r8, {r2}
    9928:	02000026 	andeq	r0, r0, #38	; 0x26
    992c:	01310160 	teqeq	r1, r0, ror #2
    9930:	01070000 	mrseq	r0, (UNDEF: 7)
    9934:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
    9938:	06000001 	streq	r0, [r0], -r1
    993c:	000026d0 	ldrdeq	r2, [r0], -r0
    9940:	27fc067f 			; <UNDEFINED> instruction: 0x27fc067f
    9944:	060a0000 	streq	r0, [sl], -r0
    9948:	00002761 	andeq	r2, r0, r1, ror #14
    994c:	27860614 	usada8cs	r6, r4, r6, r0
    9950:	06150000 	ldreq	r0, [r5], -r0
    9954:	0000272c 	andeq	r2, r0, ip, lsr #14
    9958:	27b20616 			; <UNDEFINED> instruction: 0x27b20616
    995c:	00170000 	andseq	r0, r7, r0
    9960:	0025fb08 	eoreq	pc, r5, r8, lsl #22
    9964:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
    9968:	0000016b 	andeq	r0, r0, fp, ror #2
    996c:	00284209 	eoreq	r4, r8, r9, lsl #4
    9970:	01070200 	mrseq	r0, (UNDEF: 39)
    9974:	00000076 	andeq	r0, r0, r6, ror r0
    9978:	258f0a03 	strcs	r0, [pc, #2563]	; a383 <__exidx_end+0x7507>
    997c:	6a020000 	bvs	89984 <__ccfg+0x699dc>
    9980:	00015f01 	andeq	r5, r1, r1, lsl #30
    9984:	01da0100 	bicseq	r0, sl, r0, lsl #2
    9988:	c80b0000 	stmdagt	fp, {}	; <UNPREDICTABLE>
    998c:	01000026 	tsteq	r0, r6, lsr #32
    9990:	00015f68 	andeq	r5, r1, r8, ror #30
    9994:	25750b00 	ldrbcs	r0, [r5, #-2816]!	; 0xfffff500
    9998:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    999c:	00000076 	andeq	r0, r0, r6, ror r0
    99a0:	28f00900 	ldmcs	r0!, {r8, fp}^
    99a4:	32020000 	andcc	r0, r2, #0
    99a8:	00007601 	andeq	r7, r0, r1, lsl #12
    99ac:	820c0300 	andhi	r0, ip, #0, 6
    99b0:	02000028 	andeq	r0, r0, #40	; 0x28
    99b4:	0000a272 	andeq	sl, r0, r2, ror r2
    99b8:	00000000 	andeq	r0, r0, r0
    99bc:	00001000 	andeq	r1, r0, r0
    99c0:	0d9c0100 	ldfeqs	f0, [ip]
    99c4:	000025ac 	andeq	r2, r0, ip, lsr #11
    99c8:	00dab602 	sbcseq	fp, sl, r2, lsl #12
    99cc:	00000000 	andeq	r0, r0, r0
    99d0:	00180000 	andseq	r0, r8, r0
    99d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    99d8:	00000225 	andeq	r0, r0, r5, lsr #4
    99dc:	0025e70e 	eoreq	lr, r5, lr, lsl #14
    99e0:	da520100 	ble	1489de8 <__ccfg+0x1469e40>
    99e4:	75000000 	strvc	r0, [r0, #-0]
    99e8:	0000003c 	andeq	r0, r0, ip, lsr r0
    99ec:	0001b20f 	andeq	fp, r1, pc, lsl #4
    99f0:	002ac000 	eoreq	ip, sl, r0
    99f4:	00004c00 	andeq	r4, r0, r0, lsl #24
    99f8:	6e9c0100 	fmlvse	f0, f4, f0
    99fc:	10000002 	andne	r0, r0, r2
    9a00:	000001c3 	andeq	r0, r0, r3, asr #3
    9a04:	00003c9d 	muleq	r0, sp, ip
    9a08:	0001ce10 	andeq	ip, r1, r0, lsl lr
    9a0c:	003cbd00 	eorseq	fp, ip, r0, lsl #26
    9a10:	2ad01100 	bcs	ff40de18 <_estack+0xdf408e18>
    9a14:	000e0000 	andeq	r0, lr, r0
    9a18:	c3120000 	tstgt	r2, #0
    9a1c:	12000001 	andne	r0, r0, #1
    9a20:	000001ce 	andeq	r0, r0, lr, asr #3
    9a24:	0001a513 	andeq	sl, r1, r3, lsl r5
    9a28:	002ad000 	eoreq	sp, sl, r0
    9a2c:	00000400 	andeq	r0, r0, r0, lsl #8
    9a30:	00700100 	rsbseq	r0, r0, r0, lsl #2
    9a34:	276b1400 	strbcs	r1, [fp, -r0, lsl #8]!
    9a38:	51020000 	mrspl	r0, (UNDEF: 2)
    9a3c:	00012501 	andeq	r2, r1, r1, lsl #10
    9a40:	00000000 	andeq	r0, r0, r0
    9a44:	00003000 	andeq	r3, r0, r0
    9a48:	ca9c0100 	bgt	fe709e50 <_estack+0xde704e50>
    9a4c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    9a50:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
    9a54:	01258501 			; <UNDEFINED> instruction: 0x01258501
    9a58:	3cf10000 	ldclcc	0, cr0, [r1]
    9a5c:	360b0000 	strcc	r0, [fp], -r0
    9a60:	01000028 	tsteq	r0, r8, lsr #32
    9a64:	00007686 	andeq	r7, r0, r6, lsl #13
    9a68:	26de0e00 	ldrbcs	r0, [lr], r0, lsl #28
    9a6c:	87010000 	strhi	r0, [r1, -r0]
    9a70:	00000076 	andeq	r0, r0, r6, ror r0
    9a74:	00003d11 	andeq	r3, r0, r1, lsl sp
    9a78:	0001da13 	andeq	sp, r1, r3, lsl sl
    9a7c:	00000000 	andeq	r0, r0, r0
    9a80:	00000400 	andeq	r0, r0, r0, lsl #8
    9a84:	15860100 	strne	r0, [r6, #256]	; 0x100
    9a88:	00000000 	andeq	r0, r0, r0
    9a8c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9a90:	28601600 	stmdacs	r0!, {r9, sl, ip}^
    9a94:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    9a98:	00007601 	andeq	r7, r0, r1, lsl #12
    9a9c:	02e80300 	rsceq	r0, r8, #0, 6
    9aa0:	4a170000 	bmi	5c9aa8 <__ccfg+0x5a9b00>
    9aa4:	02000026 	andeq	r0, r0, #38	; 0x26
    9aa8:	0076011b 	rsbseq	r0, r6, fp, lsl r1
    9aac:	14000000 	strne	r0, [r0], #-0
    9ab0:	000025ca 	andeq	r2, r0, sl, asr #11
    9ab4:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
    9ab8:	0c000001 	stceq	0, cr0, [r0], {1}
    9abc:	6c00002b 	stcvs	0, cr0, [r0], {43}	; 0x2b
    9ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    9ac4:	0003659c 	muleq	r3, ip, r5
    9ac8:	26260e00 	strtcs	r0, [r6], -r0, lsl #28
    9acc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9ad0:	00000199 	muleq	r0, r9, r1
    9ad4:	00003d24 	andeq	r3, r0, r4, lsr #26
    9ad8:	0026b10b 	eoreq	fp, r6, fp, lsl #2
    9adc:	76a90100 	strtvc	r0, [r9], r0, lsl #2
    9ae0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9ae4:	00002877 	andeq	r2, r0, r7, ror r8
    9ae8:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
    9aec:	54010000 	strpl	r0, [r1], #-0
    9af0:	0001a519 	andeq	sl, r1, r9, lsl r5
    9af4:	002b0e00 	eoreq	r0, fp, r0, lsl #28
    9af8:	000f8800 	andeq	r8, pc, r0, lsl #16
    9afc:	1aa90100 	bne	fea49f04 <_estack+0xdea44f04>
    9b00:	000002ca 	andeq	r0, r0, sl, asr #5
    9b04:	00002b12 	andeq	r2, r0, r2, lsl fp
    9b08:	00000fa0 	andeq	r0, r0, r0, lsr #31
    9b0c:	035baa01 	cmpeq	fp, #4096	; 0x1000
    9b10:	a01b0000 	andsge	r0, fp, r0
    9b14:	1000000f 	andne	r0, r0, pc
    9b18:	000002db 	ldrdeq	r0, [r0], -fp
    9b1c:	00003d81 	andeq	r3, r0, r1, lsl #27
    9b20:	26150000 	ldrcs	r0, [r5], -r0
    9b24:	b200002b 	andlt	r0, r0, #43	; 0x2b
    9b28:	00000001 	andeq	r0, r0, r1
    9b2c:	00267509 	eoreq	r7, r6, r9, lsl #10
    9b30:	01830200 	orreq	r0, r3, r0, lsl #4
    9b34:	00000372 	andeq	r0, r0, r2, ror r3
    9b38:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    9b3c:	00000bf8 	strdeq	r0, [r0], -r8
    9b40:	0028d109 	eoreq	sp, r8, r9, lsl #2
    9b44:	01f00200 	mvnseq	r0, r0, lsl #4
    9b48:	00000372 	andeq	r0, r0, r2, ror r3
    9b4c:	1af91c03 	bne	ffe50b60 <_estack+0xdfe4bb60>
    9b50:	43020000 	movwmi	r0, #8192	; 0x2000
    9b54:	002b7802 	eoreq	r7, fp, r2, lsl #16
    9b58:	00001600 	andeq	r1, r0, r0, lsl #12
    9b5c:	1d9c0100 	ldfnes	f0, [ip]
    9b60:	00000365 	andeq	r0, r0, r5, ror #6
    9b64:	00002b7a 	andeq	r2, r0, sl, ror fp
    9b68:	00000004 	andeq	r0, r0, r4
    9b6c:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
    9b70:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
    9b74:	b200002b 	andlt	r0, r0, #43	; 0x2b
    9b78:	00000001 	andeq	r0, r0, r1
    9b7c:	0003791e 	andeq	r7, r3, lr, lsl r9
    9b80:	002b8200 	eoreq	r8, fp, r0, lsl #4
    9b84:	00000400 	andeq	r0, r0, r0, lsl #8
    9b88:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
    9b8c:	00002b86 	andeq	r2, r0, r6, lsl #23
    9b90:	000002e8 	andeq	r0, r0, r8, ror #5
    9b94:	a7000000 	strge	r0, [r0, -r0]
    9b98:	04000005 	streq	r0, [r0], #-5
    9b9c:	002ead00 	eoreq	sl, lr, r0, lsl #26
    9ba0:	90010400 	andls	r0, r1, r0, lsl #8
    9ba4:	01000016 	tsteq	r0, r6, lsl r0
    9ba8:	000029c8 	andeq	r2, r0, r8, asr #19
    9bac:	00001785 	andeq	r1, r0, r5, lsl #15
    9bb0:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9bb4:	00000000 	andeq	r0, r0, r0
    9bb8:	00006829 	andeq	r6, r0, r9, lsr #16
    9bbc:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    9bc0:	03000003 	movweq	r0, #3
    9bc4:	0000223a 	andeq	r2, r0, sl, lsr r2
    9bc8:	00371d03 	eorseq	r1, r7, r3, lsl #26
    9bcc:	01020000 	mrseq	r0, (UNDEF: 2)
    9bd0:	0003b508 	andeq	fp, r3, r8, lsl #10
    9bd4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    9bd8:	000003f1 	strdeq	r0, [r0], -r1
    9bdc:	00212803 	eoreq	r2, r1, r3, lsl #16
    9be0:	502b0300 	eorpl	r0, fp, r0, lsl #6
    9be4:	02000000 	andeq	r0, r0, #0
    9be8:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    9bec:	04020000 	streq	r0, [r2], #-0
    9bf0:	0000b005 	andeq	fp, r0, r5
    9bf4:	17f10300 	ldrbne	r0, [r1, r0, lsl #6]!
    9bf8:	41030000 	mrsmi	r0, (UNDEF: 3)
    9bfc:	00000069 	andeq	r0, r0, r9, rrx
    9c00:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    9c04:	02000000 	andeq	r0, r0, #0
    9c08:	00ab0508 	adceq	r0, fp, r8, lsl #10
    9c0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9c10:	00008007 	andeq	r8, r0, r7
    9c14:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    9c18:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9c1c:	8a070402 	bhi	1cac2c <__ccfg+0x1aac84>
    9c20:	03000000 	movweq	r0, #0
    9c24:	0000223c 	andeq	r2, r0, ip, lsr r2
    9c28:	002c1404 	eoreq	r1, ip, r4, lsl #8
    9c2c:	2a030000 	bcs	c9c34 <__ccfg+0xa9c8c>
    9c30:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    9c34:	0000451a 	andeq	r4, r0, sl, lsl r5
    9c38:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    9c3c:	20040000 	andcs	r0, r4, r0
    9c40:	0000005e 	andeq	r0, r0, lr, asr r0
    9c44:	00294105 	eoreq	r4, r9, r5, lsl #2
    9c48:	03890100 	orreq	r0, r9, #0, 2
    9c4c:	000000e6 	andeq	r0, r0, r6, ror #1
    9c50:	00292306 	eoreq	r2, r9, r6, lsl #6
    9c54:	a2890100 	addge	r0, r9, #0, 2
    9c58:	06000000 	streq	r0, [r0], -r0
    9c5c:	00002994 	muleq	r0, r4, r9
    9c60:	00a28901 	adceq	r8, r2, r1, lsl #18
    9c64:	04060000 	streq	r0, [r6], #-0
    9c68:	0100002a 	tsteq	r0, sl, lsr #32
    9c6c:	0000a289 	andeq	sl, r0, r9, lsl #5
    9c70:	29f80700 	ldmibcs	r8!, {r8, r9, sl}^
    9c74:	8c010000 	stchi	0, cr0, [r1], {-0}
    9c78:	000000e6 	andeq	r0, r0, r6, ror #1
    9c7c:	02010200 	andeq	r0, r1, #0, 4
    9c80:	00000bf8 	strdeq	r0, [r0], -r8
    9c84:	0029a208 	eoreq	sl, r9, r8, lsl #4
    9c88:	a2a90100 	adcge	r0, r9, #0, 2
    9c8c:	03000000 	movweq	r0, #0
    9c90:	0000012a 	andeq	r0, r0, sl, lsr #2
    9c94:	00292306 	eoreq	r2, r9, r6, lsl #6
    9c98:	a2a90100 	adcge	r0, r9, #0, 2
    9c9c:	06000000 	streq	r0, [r0], -r0
    9ca0:	00002a04 	andeq	r2, r0, r4, lsl #20
    9ca4:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9ca8:	3c070000 	stccc	0, cr0, [r7], {-0}
    9cac:	01000029 	tsteq	r0, r9, lsr #32
    9cb0:	0000a2ab 	andeq	sl, r0, fp, lsr #5
    9cb4:	29f80700 	ldmibcs	r8!, {r8, r9, sl}^
    9cb8:	ad010000 	stcge	0, cr0, [r1, #-0]
    9cbc:	000000e6 	andeq	r0, r0, r6, ror #1
    9cc0:	00ad0900 	adceq	r0, sp, r0, lsl #18
    9cc4:	2b900000 	blcs	fe409ccc <_estack+0xde404ccc>
    9cc8:	00280000 	eoreq	r0, r8, r0
    9ccc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9cd0:	00000171 	andeq	r0, r0, r1, ror r1
    9cd4:	0000b90a 	andeq	fp, r0, sl, lsl #18
    9cd8:	003d9400 	eorseq	r9, sp, r0, lsl #8
    9cdc:	00c40a00 	sbceq	r0, r4, r0, lsl #20
    9ce0:	3dd90000 	ldclcc	0, cr0, [r9]
    9ce4:	da0b0000 	ble	2c9cec <__ccfg+0x2a9d44>
    9ce8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9cec:	0c00003e 	stceq	0, cr0, [r0], {62}	; 0x3e
    9cf0:	000000cf 	andeq	r0, r0, pc, asr #1
    9cf4:	2b9a0d04 	blcs	fe68d10c <_estack+0xde68810c>
    9cf8:	05940000 	ldreq	r0, [r4]
    9cfc:	b20e0000 	andlt	r0, lr, #0
    9d00:	9f00002b 	svcls	0x0000002b
    9d04:	00000005 	andeq	r0, r0, r5
    9d08:	001d2b0f 	andseq	r2, sp, pc, lsl #22
    9d0c:	01ca0100 	biceq	r0, sl, r0, lsl #2
    9d10:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    9d14:	00000008 	andeq	r0, r0, r8
    9d18:	01d19c01 	bicseq	r9, r1, r1, lsl #24
    9d1c:	71100000 	tstvc	r0, r0
    9d20:	02000007 	andeq	r0, r0, #7
    9d24:	0000a242 	andeq	sl, r0, r2, asr #4
    9d28:	003e4400 	eorseq	r4, lr, r0, lsl #8
    9d2c:	29031000 	stmdbcs	r3, {ip}
    9d30:	42020000 	andmi	r0, r2, #0
    9d34:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d38:	00003e65 	andeq	r3, r0, r5, ror #28
    9d3c:	00299a10 	eoreq	r9, r9, r0, lsl sl
    9d40:	a2430200 	subge	r0, r3, #0, 4
    9d44:	86000000 	strhi	r0, [r0], -r0
    9d48:	1100003e 	tstne	r0, lr, lsr r0
    9d4c:	00002bc0 	andeq	r2, r0, r0, asr #23
    9d50:	0000012a 	andeq	r0, r0, sl, lsr #2
    9d54:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
    9d58:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
    9d5c:	f3075001 	vhadd.u8	d5, d7, d1
    9d60:	01f35001 	mvnseq	r5, r1
    9d64:	00002251 	andeq	r2, r0, r1, asr r2
    9d68:	0029b40f 	eoreq	fp, r9, pc, lsl #8
    9d6c:	01df0100 	bicseq	r0, pc, r0, lsl #2
    9d70:	00000000 	andeq	r0, r0, r0
    9d74:	00000022 	andeq	r0, r0, r2, lsr #32
    9d78:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
    9d7c:	71100000 	tstvc	r0, r0
    9d80:	02000007 	andeq	r0, r0, #7
    9d84:	0000a257 	andeq	sl, r0, r7, asr r2
    9d88:	003ea700 	eorseq	sl, lr, r0, lsl #14
    9d8c:	29031000 	stmdbcs	r3, {ip}
    9d90:	57020000 	strpl	r0, [r2, -r0]
    9d94:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d98:	00003ec8 	andeq	r3, r0, r8, asr #29
    9d9c:	0029e310 	eoreq	lr, r9, r0, lsl r3
    9da0:	a2580200 	subsge	r0, r8, #0, 4
    9da4:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    9da8:	1000003e 	andne	r0, r0, lr, lsr r0
    9dac:	0000295d 	andeq	r2, r0, sp, asr r9
    9db0:	00a25802 	adceq	r5, r2, r2, lsl #16
    9db4:	3f340000 	svccc	0x00340000
    9db8:	ec130000 	ldc	0, cr0, [r3], {-0}
    9dbc:	02000029 	andeq	r0, r0, #41	; 0x29
    9dc0:	0000a25a 	andeq	sl, r0, sl, asr r2
    9dc4:	003f5500 	eorseq	r5, pc, r0, lsl #10
    9dc8:	29681300 	stmdbcs	r8!, {r8, r9, ip}^
    9dcc:	5b020000 	blpl	89dd4 <__ccfg+0x69e2c>
    9dd0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9dd4:	00003fe9 	andeq	r3, r0, r9, ror #31
    9dd8:	00000011 	andeq	r0, r0, r1, lsl r0
    9ddc:	00012a00 	andeq	r2, r1, r0, lsl #20
    9de0:	51011200 	mrspl	r1, R9_usr
    9de4:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
    9de8:	01f32540 	mvnseq	r2, r0, asr #10
    9dec:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    9df0:	2e302540 	cfneg32cs	mvfx2, mvfx0
    9df4:	16000128 	strne	r0, [r0], -r8, lsr #2
    9df8:	30244013 	eorcc	r4, r4, r3, lsl r0
    9dfc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9e00:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9e04:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9e08:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9e0c:	13160001 	tstne	r6, #1
    9e10:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9e14:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    9e18:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9e1c:	f3131600 	vmax.u16	d1, d3, d0
    9e20:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    9e24:	16000128 	strne	r0, [r0], -r8, lsr #2
    9e28:	01122113 	tsteq	r2, r3, lsl r1
    9e2c:	01f35150 	mvnseq	r5, r0, asr r1
    9e30:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e34:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9e38:	01f30480 	mvnseq	r0, r0, lsl #9
    9e3c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e40:	f3225001 	vhadd.u32	d5, d2, d1
    9e44:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e48:	01282930 			; <UNDEFINED> instruction: 0x01282930
    9e4c:	23131600 	tstcs	r3, #0, 12
    9e50:	01f30484 	mvnseq	r0, r4, lsl #9
    9e54:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e58:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9e5c:	01f30480 	mvnseq	r0, r0, lsl #9
    9e60:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e64:	f3225001 	vhadd.u32	d5, d2, d1
    9e68:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e6c:	01282930 			; <UNDEFINED> instruction: 0x01282930
    9e70:	f3131600 	vmax.u16	d1, d3, d0
    9e74:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e78:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9e7c:	00131600 	andseq	r1, r3, r0, lsl #12
    9e80:	297b0f00 	ldmdbcs	fp!, {r8, r9, sl, fp}^
    9e84:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    9e88:	00000001 	andeq	r0, r0, r1
    9e8c:	00002e00 	andeq	r2, r0, r0, lsl #28
    9e90:	1f9c0100 	svcne	0x009c0100
    9e94:	10000004 	andne	r0, r0, r4
    9e98:	00000771 	andeq	r0, r0, r1, ror r7
    9e9c:	00a28302 	adceq	r8, r2, r2, lsl #6
    9ea0:	40350000 	eorsmi	r0, r5, r0
    9ea4:	03100000 	tsteq	r0, #0
    9ea8:	02000029 	andeq	r0, r0, #41	; 0x29
    9eac:	0000a283 	andeq	sl, r0, r3, lsl #5
    9eb0:	00405600 	subeq	r5, r0, r0, lsl #12
    9eb4:	29e31000 	stmibcs	r3!, {ip}^
    9eb8:	84020000 	strhi	r0, [r2], #-0
    9ebc:	000000a2 	andeq	r0, r0, r2, lsr #1
    9ec0:	00004077 	andeq	r4, r0, r7, ror r0
    9ec4:	00297110 	eoreq	r7, r9, r0, lsl r1
    9ec8:	a2840200 	addge	r0, r4, #0, 4
    9ecc:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    9ed0:	10000040 	andne	r0, r0, r0, asr #32
    9ed4:	00002968 	andeq	r2, r0, r8, ror #18
    9ed8:	00978502 	addseq	r8, r7, r2, lsl #10
    9edc:	41190000 	tstmi	r9, r0
    9ee0:	ec130000 	ldc	0, cr0, [r3], {-0}
    9ee4:	02000029 	andeq	r0, r0, #41	; 0x29
    9ee8:	0000a287 	andeq	sl, r0, r7, lsl #5
    9eec:	00413900 	subeq	r3, r1, r0, lsl #18
    9ef0:	295d1300 	ldmdbcs	sp, {r8, r9, ip}^
    9ef4:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    9ef8:	000000a2 	andeq	r0, r0, r2, lsr #1
    9efc:	000041df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    9f00:	00000011 	andeq	r0, r0, r1, lsl r0
    9f04:	00012a00 	andeq	r2, r1, r0, lsl #20
    9f08:	51011200 	mrspl	r1, R9_usr
    9f0c:	5201f340 	andpl	pc, r1, #64, 6
    9f10:	01f32540 	mvnseq	r2, r0, asr #10
    9f14:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    9f18:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f1c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f20:	01282b80 	smlawbeq	r8, r0, fp, r2
    9f24:	40131600 	andsmi	r1, r3, r0, lsl #12
    9f28:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
    9f2c:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    9f30:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    9f34:	01f31c40 	mvnseq	r1, r0, asr #24
    9f38:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    9f3c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f40:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f44:	01282b80 	smlawbeq	r8, r0, fp, r2
    9f48:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    9f4c:	50011221 	andpl	r1, r1, r1, lsr #4
    9f50:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
    9f54:	01f32431 	mvnseq	r2, r1, lsr r4
    9f58:	80232250 	eorhi	r2, r3, r0, asr r2
    9f5c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9f60:	01f32431 	mvnseq	r2, r1, lsr r4
    9f64:	01f32250 	mvnseq	r2, r0, asr r2
    9f68:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9f6c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9f70:	282c8000 	stmdacs	ip!, {pc}
    9f74:	13160001 	tstne	r6, #1
    9f78:	f3048423 	vshl.u8	d8, d19, d4
    9f7c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9f80:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9f84:	f3048023 	vhadd.u8	d8, d4, d19
    9f88:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9f8c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9f90:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9f94:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9f98:	8000000f 	andhi	r0, r0, pc
    9f9c:	0001282c 	andeq	r2, r1, ip, lsr #16
    9fa0:	01f31316 	mvnseq	r1, r6, lsl r3
    9fa4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9fa8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9fac:	282b8000 	stmdacs	fp!, {pc}
    9fb0:	13160001 	tstne	r6, #1
    9fb4:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    9fb8:	01000029 	tsteq	r0, r9, lsr #32
    9fbc:	00970208 	addseq	r0, r7, r8, lsl #4
    9fc0:	00000000 	andeq	r0, r0, r0
    9fc4:	00340000 	eorseq	r0, r4, r0
    9fc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fcc:	000004d2 	ldrdeq	r0, [r0], -r2
    9fd0:	00077110 	andeq	r7, r7, r0, lsl r1
    9fd4:	a2af0200 	adcge	r0, pc, #0, 4
    9fd8:	3f000000 	svccc	0x00000000
    9fdc:	10000042 	andne	r0, r0, r2, asr #32
    9fe0:	00002903 	andeq	r2, r0, r3, lsl #18
    9fe4:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9fe8:	42600000 	rsbmi	r0, r0, #0
    9fec:	e3100000 	tst	r0, #0
    9ff0:	02000029 	andeq	r0, r0, #41	; 0x29
    9ff4:	0000a2af 	andeq	sl, r0, pc, lsr #5
    9ff8:	00428100 	subeq	r8, r2, r0, lsl #2
    9ffc:	29ec1300 	stmibcs	ip!, {r8, r9, ip}^
    a000:	b1020000 	mrslt	r0, (UNDEF: 2)
    a004:	000000a2 	andeq	r0, r0, r2, lsr #1
    a008:	000042be 			; <UNDEFINED> instruction: 0x000042be
    a00c:	00295413 	eoreq	r5, r9, r3, lsl r4
    a010:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
    a014:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    a018:	15000042 	strne	r0, [r0, #-66]	; 0xffffffbe
    a01c:	000000ed 	andeq	r0, r0, sp, ror #1
    a020:	00000000 	andeq	r0, r0, r0
    a024:	0000001a 	andeq	r0, r0, sl, lsl r0
    a028:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
    a02c:	02000001 	andeq	r0, r0, #1
    a030:	0000fd0a 	andeq	pc, r0, sl, lsl #26
    a034:	00431000 	subeq	r1, r3, r0
    a038:	00001600 	andeq	r1, r0, r0, lsl #12
    a03c:	001a0000 	andseq	r0, sl, r0
    a040:	130b0000 	movwne	r0, #45056	; 0xb000
    a044:	4a000001 	bmi	a050 <__exidx_end+0x71d4>
    a048:	0b000043 	bleq	a15c <__exidx_end+0x72e0>
    a04c:	0000011e 	andeq	r0, r0, lr, lsl r1
    a050:	00004363 	andeq	r4, r0, r3, ror #6
    a054:	0000000d 	andeq	r0, r0, sp
    a058:	00059400 	andeq	r9, r5, r0, lsl #8
    a05c:	00000d00 	andeq	r0, r0, r0, lsl #26
    a060:	059f0000 	ldreq	r0, [pc]	; a068 <__exidx_end+0x71ec>
    a064:	00000000 	andeq	r0, r0, r0
    a068:	290b1400 	stmdbcs	fp, {sl, ip}
    a06c:	1d010000 	stcne	0, cr0, [r1, #-0]
    a070:	00009702 	andeq	r9, r0, r2, lsl #14
    a074:	00000000 	andeq	r0, r0, r0
    a078:	00004000 	andeq	r4, r0, r0
    a07c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    a080:	10000005 	andne	r0, r0, r5
    a084:	00000771 	andeq	r0, r0, r1, ror r7
    a088:	00a2dd02 	adceq	sp, r2, r2, lsl #26
    a08c:	437a0000 	cmnmi	sl, #0
    a090:	03100000 	tsteq	r0, #0
    a094:	02000029 	andeq	r0, r0, #41	; 0x29
    a098:	0000a2dd 	ldrdeq	sl, [r0], -sp
    a09c:	00439b00 	subeq	r9, r3, r0, lsl #22
    a0a0:	29e31000 	stmibcs	r3!, {ip}^
    a0a4:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    a0a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    a0ac:	000043bc 			; <UNDEFINED> instruction: 0x000043bc
    a0b0:	00297110 	eoreq	r7, r9, r0, lsl r1
    a0b4:	a2de0200 	sbcsge	r0, lr, #0, 4
    a0b8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    a0bc:	13000043 	movwne	r0, #67	; 0x43
    a0c0:	000029ec 	andeq	r2, r0, ip, ror #19
    a0c4:	00a2e002 	adceq	lr, r2, r2
    a0c8:	44420000 	strbmi	r0, [r2], #-0
    a0cc:	54130000 	ldrpl	r0, [r3], #-0
    a0d0:	02000029 	andeq	r0, r0, #41	; 0x29
    a0d4:	000097e1 	andeq	r9, r0, r1, ror #15
    a0d8:	00449d00 	subeq	r9, r4, r0, lsl #26
    a0dc:	00ed1500 	rsceq	r1, sp, r0, lsl #10
    a0e0:	00000000 	andeq	r0, r0, r0
    a0e4:	001a0000 	andseq	r0, sl, r0
    a0e8:	fa020000 	blx	8a0f0 <__ccfg+0x6a148>
    a0ec:	0001080c 	andeq	r0, r1, ip, lsl #16
    a0f0:	fd0a0200 	stc2	2, cr0, [sl, #-0]
    a0f4:	c0000000 	andgt	r0, r0, r0
    a0f8:	16000044 	strne	r0, [r0], -r4, asr #32
    a0fc:	00000000 	andeq	r0, r0, r0
    a100:	0000001a 	andeq	r0, r0, sl, lsl r0
    a104:	0001130b 	andeq	r1, r1, fp, lsl #6
    a108:	00450000 	subeq	r0, r5, r0
    a10c:	011e0b00 	tsteq	lr, r0, lsl #22
    a110:	45190000 	ldrmi	r0, [r9, #-0]
    a114:	000d0000 	andeq	r0, sp, r0
    a118:	94000000 	strls	r0, [r0], #-0
    a11c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    a120:	00000000 	andeq	r0, r0, r0
    a124:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    a128:	17000000 	strne	r0, [r0, -r0]
    a12c:	000018f3 	strdeq	r1, [r0], -r3
    a130:	00a26a05 	adceq	r6, r2, r5, lsl #20
    a134:	02170000 	andseq	r0, r7, #0
    a138:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    a13c:	0000a284 	andeq	sl, r0, r4, lsl #5
    a140:	08bf0000 	ldmeq	pc!, {}	; <UNPREDICTABLE>
    a144:	00040000 	andeq	r0, r4, r0
    a148:	00003001 	andeq	r3, r0, r1
    a14c:	16900104 	ldrne	r0, [r0], r4, lsl #2
    a150:	91010000 	mrsls	r0, (UNDEF: 1)
    a154:	8500002a 	strhi	r0, [r0, #-42]	; 0xffffffd6
    a158:	40000017 	andmi	r0, r0, r7, lsl r0
    a15c:	00000010 	andeq	r0, r0, r0, lsl r0
    a160:	4b000000 	blmi	a168 <__exidx_end+0x72ec>
    a164:	0200006a 	andeq	r0, r0, #106	; 0x6a
    a168:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    a16c:	3a030000 	bcc	ca174 <__ccfg+0xaa1cc>
    a170:	03000022 	movweq	r0, #34	; 0x22
    a174:	0000371d 	andeq	r3, r0, sp, lsl r7
    a178:	08010200 	stmdaeq	r1, {r9}
    a17c:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    a180:	002ca703 	eoreq	sl, ip, r3, lsl #14
    a184:	49290300 	stmdbmi	r9!, {r8, r9}
    a188:	02000000 	andeq	r0, r0, #0
    a18c:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    a190:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a194:	03000021 	movweq	r0, #33	; 0x21
    a198:	00005b2b 	andeq	r5, r0, fp, lsr #22
    a19c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a1a0:	00000273 	andeq	r0, r0, r3, ror r2
    a1a4:	00168603 	andseq	r8, r6, r3, lsl #12
    a1a8:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; a1b0 <__exidx_end+0x7334>
    a1ac:	02000000 	andeq	r0, r0, #0
    a1b0:	00b00504 	adcseq	r0, r0, r4, lsl #10
    a1b4:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    a1b8:	03000017 	movweq	r0, #23
    a1bc:	00007f41 	andeq	r7, r0, r1, asr #30
    a1c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a1c4:	00000085 	andeq	r0, r0, r5, lsl #1
    a1c8:	ab050802 	blge	14c1d8 <__ccfg+0x12c230>
    a1cc:	02000000 	andeq	r0, r0, #0
    a1d0:	00800708 	addeq	r0, r0, r8, lsl #14
    a1d4:	04040000 	streq	r0, [r4], #-0
    a1d8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a1dc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a1e0:	0000008a 	andeq	r0, r0, sl, lsl #1
    a1e4:	00223c03 	eoreq	r3, r2, r3, lsl #24
    a1e8:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    a1ec:	03000000 	movweq	r0, #0
    a1f0:	00002ca9 	andeq	r2, r0, r9, lsr #25
    a1f4:	003e1904 	eorseq	r1, lr, r4, lsl #18
    a1f8:	2a030000 	bcs	ca200 <__ccfg+0xaa258>
    a1fc:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    a200:	0000501a 	andeq	r5, r0, sl, lsl r0
    a204:	16880300 	strne	r0, [r8], r0, lsl #6
    a208:	1f040000 	svcne	0x00040000
    a20c:	00000062 	andeq	r0, r0, r2, rrx
    a210:	0017f303 	andseq	pc, r7, r3, lsl #6
    a214:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    a218:	03000000 	movweq	r0, #0
    a21c:	00002313 	andeq	r2, r0, r3, lsl r3
    a220:	00e43305 	rsceq	r3, r4, r5, lsl #6
    a224:	04050000 	streq	r0, [r5], #-0
    a228:	000000ea 	andeq	r0, r0, sl, ror #1
    a22c:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
    a230:	07000000 	streq	r0, [r0, -r0]
    a234:	000000fc 	strdeq	r0, [r0], -ip
    a238:	0000a208 	andeq	sl, r0, r8, lsl #4
    a23c:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    a240:	06000023 	streq	r0, [r0], -r3, lsr #32
    a244:	00010742 	andeq	r0, r1, r2, asr #14
    a248:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
    a24c:	09000001 	stmdbeq	r0, {r0}
    a250:	000000ce 	andeq	r0, r0, lr, asr #1
    a254:	00000126 	andeq	r0, r0, r6, lsr #2
    a258:	00012608 	andeq	r2, r1, r8, lsl #12
    a25c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a260:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a264:	00000000 	andeq	r0, r0, r0
    a268:	00a20405 	adceq	r0, r2, r5, lsl #8
    a26c:	b2030000 	andlt	r0, r3, #0
    a270:	06000024 	streq	r0, [r0], -r4, lsr #32
    a274:	00013746 	andeq	r3, r1, r6, asr #14
    a278:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
    a27c:	0a000001 	beq	a288 <__exidx_end+0x740c>
    a280:	000000ce 	andeq	r0, r0, lr, asr #1
    a284:	00251e03 	eoreq	r1, r5, r3, lsl #28
    a288:	37480600 	strbcc	r0, [r8, -r0, lsl #12]
    a28c:	03000001 	movweq	r0, #1
    a290:	00002264 	andeq	r2, r0, r4, ror #4
    a294:	01584a06 	cmpeq	r8, r6, lsl #20
    a298:	04050000 	streq	r0, [r5], #-0
    a29c:	0000015e 	andeq	r0, r0, lr, asr r1
    a2a0:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a2a4:	00016d00 	andeq	r6, r1, r0, lsl #26
    a2a8:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a2ac:	03000000 	movweq	r0, #0
    a2b0:	000021ca 	andeq	r2, r0, sl, asr #3
    a2b4:	01374c06 	teqeq	r7, r6, lsl #24
    a2b8:	33030000 	movwcc	r0, #12288	; 0x3000
    a2bc:	06000021 	streq	r0, [r0], -r1, lsr #32
    a2c0:	0001074e 	andeq	r0, r1, lr, asr #14
    a2c4:	21ba0300 			; <UNDEFINED> instruction: 0x21ba0300
    a2c8:	51060000 	mrspl	r0, (UNDEF: 6)
    a2cc:	000000e4 	andeq	r0, r0, r4, ror #1
    a2d0:	00203603 	eoreq	r3, r0, r3, lsl #12
    a2d4:	99530600 	ldmdbls	r3, {r9, sl}^
    a2d8:	05000001 	streq	r0, [r0, #-1]
    a2dc:	00019f04 	andeq	r9, r1, r4, lsl #30
    a2e0:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a2e4:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    a2e8:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    a2ec:	08000001 	stmdaeq	r0, {r0}
    a2f0:	000000b8 	strheq	r0, [r0], -r8
    a2f4:	0000b808 	andeq	fp, r0, r8, lsl #16
    a2f8:	04050000 	streq	r0, [r5], #-0
    a2fc:	000000b8 	strheq	r0, [r0], -r8
    a300:	0023ad03 	eoreq	sl, r3, r3, lsl #26
    a304:	c9570600 	ldmdbgt	r7, {r9, sl}^
    a308:	05000001 	streq	r0, [r0, #-1]
    a30c:	0001cf04 	andeq	ip, r1, r4, lsl #30
    a310:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a314:	01e30000 	mvneq	r0, r0
    a318:	e3080000 	movw	r0, #32768	; 0x8000
    a31c:	08000001 	stmdaeq	r0, {r0}
    a320:	000000ce 	andeq	r0, r0, lr, asr #1
    a324:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    a328:	03000000 	movweq	r0, #0
    a32c:	000021ed 	andeq	r2, r0, sp, ror #3
    a330:	01c95a06 	biceq	r5, r9, r6, lsl #20
    a334:	b6030000 	strlt	r0, [r3], -r0
    a338:	06000022 	streq	r0, [r0], -r2, lsr #32
    a33c:	0001c95d 	andeq	ip, r1, sp, asr r9
    a340:	20480300 	subcs	r0, r8, r0, lsl #6
    a344:	60060000 	andvs	r0, r6, r0
    a348:	000001c9 	andeq	r0, r0, r9, asr #3
    a34c:	0023d803 	eoreq	sp, r3, r3, lsl #16
    a350:	e4630600 	strbt	r0, [r3], #-1536	; 0xfffffa00
    a354:	03000000 	movweq	r0, #0
    a358:	0000206e 	andeq	r2, r0, lr, rrx
    a35c:	02206506 	eoreq	r6, r0, #25165824	; 0x1800000
    a360:	04050000 	streq	r0, [r5], #-0
    a364:	00000226 	andeq	r0, r0, r6, lsr #4
    a368:	00023107 	andeq	r3, r2, r7, lsl #2
    a36c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a370:	03000000 	movweq	r0, #0
    a374:	0000252f 	andeq	r2, r0, pc, lsr #10
    a378:	02206706 	eoreq	r6, r0, #1572864	; 0x180000
    a37c:	24030000 	strcs	r0, [r3], #-0
    a380:	06000023 	streq	r0, [r0], -r3, lsr #32
    a384:	0000eb69 	andeq	lr, r0, r9, ror #22
    a388:	24fd0300 	ldrbtcs	r0, [sp], #768	; 0x300
    a38c:	6b060000 	blvs	18a394 <__ccfg+0x16a3ec>
    a390:	000000eb 	andeq	r0, r0, fp, ror #1
    a394:	0022d203 	eoreq	sp, r2, r3, lsl #4
    a398:	eb6d0600 	bl	1b4bba0 <__ccfg+0x1b2bbf8>
    a39c:	03000000 	movweq	r0, #0
    a3a0:	000022e4 	andeq	r2, r0, r4, ror #5
    a3a4:	00eb6f06 	rsceq	r6, fp, r6, lsl #30
    a3a8:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    a3ac:	03557a06 	cmpeq	r5, #24576	; 0x6000
    a3b0:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    a3b4:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3b8:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
    a3bc:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    a3c0:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3c4:	00012c7d 	andeq	r2, r1, sp, ror ip
    a3c8:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
    a3cc:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3d0:	0001427e 	andeq	r4, r1, lr, ror r2
    a3d4:	170c0800 	strne	r0, [ip, -r0, lsl #16]
    a3d8:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3dc:	00014d7f 	andeq	r4, r1, pc, ror sp
    a3e0:	290c0c00 	stmdbcs	ip, {sl, fp}
    a3e4:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3e8:	00016d80 	andeq	r6, r1, r0, lsl #27
    a3ec:	3b0c1000 	blcc	30e3f4 <__ccfg+0x2ee44c>
    a3f0:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3f4:	00017881 	andeq	r7, r1, r1, lsl #17
    a3f8:	860c1400 	strhi	r1, [ip], -r0, lsl #8
    a3fc:	06000021 	streq	r0, [r0], -r1, lsr #32
    a400:	00018382 	andeq	r8, r1, r2, lsl #7
    a404:	a10c1800 	tstge	ip, r0, lsl #16
    a408:	06000022 	streq	r0, [r0], -r2, lsr #32
    a40c:	00018e83 	andeq	r8, r1, r3, lsl #29
    a410:	f20c1c00 			; <UNDEFINED> instruction: 0xf20c1c00
    a414:	06000023 	streq	r0, [r0], -r3, lsr #32
    a418:	0001be84 	andeq	fp, r1, r4, lsl #29
    a41c:	290c2000 	stmdbcs	ip, {sp}
    a420:	06000022 	streq	r0, [r0], -r2, lsr #32
    a424:	0001e985 	andeq	lr, r1, r5, lsl #19
    a428:	440c2400 	strmi	r2, [ip], #-1024	; 0xfffffc00
    a42c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a430:	0001f486 	andeq	pc, r1, r6, lsl #9
    a434:	5f0c2800 	svcpl	0x000c2800
    a438:	06000024 	streq	r0, [r0], -r4, lsr #32
    a43c:	0001ff87 	andeq	pc, r1, r7, lsl #31
    a440:	db0c2c00 	blle	315448 <__ccfg+0x2f54a0>
    a444:	06000021 	streq	r0, [r0], -r1, lsr #32
    a448:	00021588 	andeq	r1, r2, r8, lsl #11
    a44c:	4d0c3000 	stcmi	0, cr3, [ip, #-0]
    a450:	06000024 	streq	r0, [r0], -r4, lsr #32
    a454:	00023189 	andeq	r3, r2, r9, lsl #3
    a458:	8e0c3400 	cfcpyshi	mvf3, mvf12
    a45c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a460:	00020a8a 	andeq	r0, r2, sl, lsl #21
    a464:	020c3800 	andeq	r3, ip, #0, 16
    a468:	06000023 	streq	r0, [r0], -r3, lsr #32
    a46c:	00023c8b 	andeq	r3, r2, fp, lsl #25
    a470:	080c3c00 	stmdaeq	ip, {sl, fp, ip, sp}
    a474:	06000024 	streq	r0, [r0], -r4, lsr #32
    a478:	0002478c 	andeq	r4, r2, ip, lsl #15
    a47c:	030c4000 	movweq	r4, #49152	; 0xc000
    a480:	06000022 	streq	r0, [r0], -r2, lsr #32
    a484:	0002528d 	andeq	r5, r2, sp, lsl #5
    a488:	5f0c4400 	svcpl	0x000c4400
    a48c:	06000020 	streq	r0, [r0], -r0, lsr #32
    a490:	00025d8e 	andeq	r5, r2, lr, lsl #27
    a494:	03004800 	movweq	r4, #2048	; 0x800
    a498:	00002363 	andeq	r2, r0, r3, ror #6
    a49c:	02688f06 	rsbeq	r8, r8, #6, 30
    a4a0:	140b0000 	strne	r0, [fp], #-0
    a4a4:	03a55401 			; <UNDEFINED> instruction: 0x03a55401
    a4a8:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    a4ac:	0100002a 	tsteq	r0, sl, lsr #32
    a4b0:	0000ce55 	andeq	ip, r0, r5, asr lr
    a4b4:	de0c0000 	cdple	0, 0, cr0, cr12, cr0, {0}
    a4b8:	0100002b 	tsteq	r0, fp, lsr #32
    a4bc:	0000ce56 	andeq	ip, r0, r6, asr lr
    a4c0:	120c0400 	andne	r0, ip, #0, 8
    a4c4:	0100002a 	tsteq	r0, sl, lsr #32
    a4c8:	0000ce57 	andeq	ip, r0, r7, asr lr
    a4cc:	ac0c0800 	stcge	8, cr0, [ip], {-0}
    a4d0:	0100002a 	tsteq	r0, sl, lsr #32
    a4d4:	0000ce58 	andeq	ip, r0, r8, asr lr
    a4d8:	420c0c00 	andmi	r0, ip, #0, 24
    a4dc:	0100002a 	tsteq	r0, sl, lsr #32
    a4e0:	0000c359 	andeq	ip, r0, r9, asr r3
    a4e4:	03001000 	movweq	r1, #0
    a4e8:	00002c09 	andeq	r2, r0, r9, lsl #24
    a4ec:	03605a01 	cmneq	r0, #4096	; 0x1000
    a4f0:	4d0d0000 	stcmi	0, cr0, [sp, #-0]
    a4f4:	0200001b 	andeq	r0, r0, #27
    a4f8:	03d301f9 	bicseq	r0, r3, #1073741886	; 0x4000003e
    a4fc:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    a500:	0100002c 	tsteq	r0, ip, lsr #32
    a504:	0000ce65 	andeq	ip, r0, r5, ror #28
    a508:	2a0a0e00 	bcs	28dd10 <__ccfg+0x26dd68>
    a50c:	65010000 	strvs	r0, [r1, #-0]
    a510:	000000ce 	andeq	r0, r0, lr, asr #1
    a514:	1ee80f00 	cdpne	15, 14, cr0, cr8, cr0, {0}
    a518:	10020000 	andne	r0, r2, r0
    a51c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a520:	03fb0100 	mvnseq	r0, #0, 2
    a524:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    a528:	0100002c 	tsteq	r0, ip, lsr #32
    a52c:	0000cea0 	andeq	ip, r0, r0, lsr #29
    a530:	2c971000 	ldccs	0, cr1, [r7], {0}
    a534:	a2010000 	andge	r0, r1, #0
    a538:	000000ce 	andeq	r0, r0, lr, asr #1
    a53c:	03b01100 	movseq	r1, #0, 2
    a540:	2bc00000 	blcs	ff00a548 <_estack+0xdf005548>
    a544:	005c0000 	subseq	r0, ip, r0
    a548:	9c010000 	stcls	0, cr0, [r1], {-0}
    a54c:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    a550:	0003bc12 	andeq	fp, r3, r2, lsl ip
    a554:	00453000 	subeq	r3, r5, r0
    a558:	03c71200 	biceq	r1, r7, #0, 4
    a55c:	455c0000 	ldrbmi	r0, [ip, #-0]
    a560:	fa130000 	blx	4ca568 <__ccfg+0x4aa5c0>
    a564:	1400002b 	strne	r0, [r0], #-43	; 0xffffffd5
    a568:	61000000 	mrsvs	r0, (UNDEF: 0)
    a56c:	12000004 	andne	r0, r0, #4
    a570:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    a574:	00004588 	andeq	r4, r0, r8, lsl #11
    a578:	0003c712 	andeq	ip, r3, r2, lsl r7
    a57c:	00459b00 	subeq	r9, r5, r0, lsl #22
    a580:	2c0e1400 	cfstrscs	mvf1, [lr], {-0}
    a584:	74020000 	strvc	r0, [r2], #-0
    a588:	53011500 	movwpl	r1, #5376	; 0x1500
    a58c:	01153201 	tsteq	r5, r1, lsl #4
    a590:	153c0152 	ldrne	r0, [ip, #-338]!	; 0xfffffeae
    a594:	30015101 	andcc	r5, r1, r1, lsl #2
    a598:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a59c:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a5a0:	16000040 	strne	r0, [r0], -r0, asr #32
    a5a4:	00002bde 	ldrdeq	r2, [r0], -lr
    a5a8:	8d007602 	stchi	6, cr7, [r0, #-8]
    a5ac:	15000004 	strne	r0, [r0, #-4]
    a5b0:	30015301 	andcc	r5, r1, r1, lsl #6
    a5b4:	01520115 	cmpeq	r2, r5, lsl r1
    a5b8:	51011531 	tstpl	r1, r1, lsr r5
    a5bc:	01153001 	tsteq	r5, r1
    a5c0:	000c0550 	andeq	r0, ip, r0, asr r5
    a5c4:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    a5c8:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    a5cc:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
    a5d0:	00002bf6 	strdeq	r2, [r0], -r6
    a5d4:	15007602 	strne	r7, [r0, #-1538]	; 0xfffff9fe
    a5d8:	31015301 	tstcc	r1, r1, lsl #6
    a5dc:	01520115 	cmpeq	r2, r5, lsl r1
    a5e0:	51011532 	tstpl	r1, r2, lsr r5
    a5e4:	01153001 	tsteq	r5, r1
    a5e8:	000c0550 	andeq	r0, ip, r0, asr r5
    a5ec:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    a5f0:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    a5f4:	00000074 	andeq	r0, r0, r4, ror r0
    a5f8:	0003d311 	andeq	sp, r3, r1, lsl r3
    a5fc:	002c1c00 	eoreq	r1, ip, r0, lsl #24
    a600:	00002c00 	andeq	r2, r0, r0, lsl #24
    a604:	0d9c0100 	ldfeqs	f0, [ip]
    a608:	12000005 	andne	r0, r0, #5
    a60c:	000003e4 	andeq	r0, r0, r4, ror #7
    a610:	000045bc 			; <UNDEFINED> instruction: 0x000045bc
    a614:	0003ef17 	andeq	lr, r3, r7, lsl pc
    a618:	18500100 	ldmdane	r0, {r8}^
    a61c:	00001028 	andeq	r1, r0, r8, lsr #32
    a620:	000004f4 	strdeq	r0, [r0], -r4
    a624:	0003e419 	andeq	lr, r3, r9, lsl r4
    a628:	281a0400 	ldmdacs	sl, {sl}
    a62c:	1b000010 	blne	a674 <__exidx_end+0x77f8>
    a630:	000003ef 	andeq	r0, r0, pc, ror #7
    a634:	3c140000 	ldccc	0, cr0, [r4], {-0}
    a638:	0200002c 	andeq	r0, r0, #44	; 0x2c
    a63c:	01150074 	tsteq	r5, r4, ror r0
    a640:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    a644:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a648:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a64c:	1c000040 	stcne	0, cr0, [r0], {64}	; 0x40
    a650:	00002d12 	andeq	r2, r0, r2, lsl sp
    a654:	ce018402 	cdpgt	4, 0, cr8, cr1, cr2, {0}
    a658:	00000000 	andeq	r0, r0, r0
    a65c:	90000000 	andls	r0, r0, r0
    a660:	01000000 	mrseq	r0, (UNDEF: 0)
    a664:	0005769c 	muleq	r5, ip, r6
    a668:	2c181d00 	ldccs	13, cr1, [r8], {-0}
    a66c:	c2010000 	andgt	r0, r1, #0
    a670:	000000ce 	andeq	r0, r0, lr, asr #1
    a674:	000045dd 	ldrdeq	r4, [r0], -sp
    a678:	002b961e 	eoreq	r9, fp, lr, lsl r6
    a67c:	cec40100 	polgts	f0, f4, f0
    a680:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a684:	1e000046 	cdpne	0, 0, cr0, cr0, cr6, {2}
    a688:	00002baf 	andeq	r2, r0, pc, lsr #23
    a68c:	00c3c501 	sbceq	ip, r3, r1, lsl #10
    a690:	461c0000 	ldrmi	r0, [ip], -r0
    a694:	4e1e0000 	cdpmi	0, 1, cr0, cr14, cr0, {0}
    a698:	0100002a 	tsteq	r0, sl, lsr #32
    a69c:	0000cec6 	andeq	ip, r0, r6, asr #29
    a6a0:	00464300 	subeq	r4, r6, r0, lsl #6
    a6a4:	00001f00 	andeq	r1, r0, r0, lsl #30
    a6a8:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a6ac:	001f0000 	andseq	r0, pc, r0
    a6b0:	aa000000 	bge	a6b8 <__exidx_end+0x783c>
    a6b4:	00000008 	andeq	r0, r0, r8
    a6b8:	002ad520 	eoreq	sp, sl, r0, lsr #10
    a6bc:	01910200 	orrseq	r0, r1, r0, lsl #4
    a6c0:	00000000 	andeq	r0, r0, r0
    a6c4:	00000018 	andeq	r0, r0, r8, lsl r0
    a6c8:	05ae9c01 	streq	r9, [lr, #3073]!	; 0xc01
    a6cc:	00210000 	eoreq	r0, r1, r0
    a6d0:	b0000000 	andlt	r0, r0, r0
    a6d4:	a4000003 	strge	r0, [r0], #-3
    a6d8:	15000005 	strne	r0, [r0, #-5]
    a6dc:	31015101 	tstcc	r1, r1, lsl #2
    a6e0:	01500115 	cmpeq	r0, r5, lsl r1
    a6e4:	001f0033 	andseq	r0, pc, r3, lsr r0	; <UNPREDICTABLE>
    a6e8:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a6ec:	00000008 	andeq	r0, r0, r8
    a6f0:	002bed22 	eoreq	lr, fp, r2, lsr #26
    a6f4:	01220200 			; <UNDEFINED> instruction: 0x01220200
    a6f8:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    a6fc:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    a700:	00000bf8 	strdeq	r0, [r0], -r8
    a704:	00237723 	eoreq	r7, r3, r3, lsr #14
    a708:	01400200 	mrseq	r0, (UNDEF: 96)
    a70c:	2a201c03 	bcs	811720 <__ccfg+0x7f1778>
    a710:	a1020000 	mrsge	r0, (UNDEF: 2)
    a714:	0005bb01 	andeq	fp, r5, r1, lsl #22
    a718:	00000000 	andeq	r0, r0, r0
    a71c:	00006000 	andeq	r6, r0, r0
    a720:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    a724:	24000006 	strcs	r0, [r0], #-6
    a728:	00002bce 	andeq	r2, r0, lr, asr #23
    a72c:	ce010201 	cdpgt	2, 0, cr0, cr1, cr1, {0}
    a730:	97000000 	strls	r0, [r0, -r0]
    a734:	24000046 	strcs	r0, [r0], #-70	; 0xffffffba
    a738:	00002c4a 	andeq	r2, r0, sl, asr #24
    a73c:	ce010301 	cdpgt	3, 0, cr0, cr1, cr1, {0}
    a740:	aa000000 	bge	a748 <__exidx_end+0x78cc>
    a744:	25000046 	strcs	r0, [r0, #-70]	; 0xffffffba
    a748:	000005ae 	andeq	r0, r0, lr, lsr #11
    a74c:	00000000 	andeq	r0, r0, r0
    a750:	00000010 	andeq	r0, r0, r0, lsl r0
    a754:	3c010901 			; <UNDEFINED> instruction: 0x3c010901
    a758:	14000006 	strne	r0, [r0], #-6
    a75c:	00000000 	andeq	r0, r0, r0
    a760:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    a764:	30015301 	andcc	r5, r1, r1, lsl #6
    a768:	01520115 	cmpeq	r2, r5, lsl r1
    a76c:	51011531 	tstpl	r1, r1, lsr r5
    a770:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    a774:	0c055001 	stceq	0, cr5, [r5], {1}
    a778:	400ca000 	andmi	sl, ip, r0
    a77c:	c2250000 	eorgt	r0, r5, #0
    a780:	00000005 	andeq	r0, r0, r5
    a784:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a788:	01000000 	mrseq	r0, (UNDEF: 0)
    a78c:	065a010a 	ldrbeq	r0, [sl], -sl, lsl #2
    a790:	001f0000 	andseq	r0, pc, r0
    a794:	b5000000 	strlt	r0, [r0, #-0]
    a798:	00000008 	andeq	r0, r0, r8
    a79c:	00000021 	andeq	r0, r0, r1, lsr #32
    a7a0:	0003d300 	andeq	sp, r3, r0, lsl #6
    a7a4:	00066d00 	andeq	r6, r6, r0, lsl #26
    a7a8:	50011500 	andpl	r1, r1, r0, lsl #10
    a7ac:	1f003101 	svcne	0x00003101
    a7b0:	00000000 	andeq	r0, r0, r0
    a7b4:	0000089e 	muleq	r0, lr, r8
    a7b8:	2af52000 	bcs	ffd527c0 <_estack+0xdfd4d7c0>
    a7bc:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    a7c0:	00000001 	andeq	r0, r0, r1
    a7c4:	00003400 	andeq	r3, r0, r0, lsl #8
    a7c8:	e99c0100 	ldmib	ip, {r8}
    a7cc:	25000006 	strcs	r0, [r0, #-6]
    a7d0:	000005c2 	andeq	r0, r0, r2, asr #11
    a7d4:	00000000 	andeq	r0, r0, r0
    a7d8:	00000008 	andeq	r0, r0, r8
    a7dc:	ab012f01 	blge	563e8 <__ccfg+0x36440>
    a7e0:	1f000006 	svcne	0x00000006
    a7e4:	00000000 	andeq	r0, r0, r0
    a7e8:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    a7ec:	00002100 	andeq	r2, r0, r0, lsl #2
    a7f0:	03b00000 	movseq	r0, #0
    a7f4:	06c30000 	strbeq	r0, [r3], r0
    a7f8:	01150000 	tsteq	r5, r0
    a7fc:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a800:	33015001 	movwcc	r5, #4097	; 0x1001
    a804:	00002100 	andeq	r2, r0, r0, lsl #2
    a808:	03d30000 	bicseq	r0, r3, #0
    a80c:	06d60000 	ldrbeq	r0, [r6], r0
    a810:	01150000 	tsteq	r5, r0
    a814:	00310150 	eorseq	r0, r1, r0, asr r1
    a818:	0000001f 	andeq	r0, r0, pc, lsl r0
    a81c:	00089e00 	andeq	r9, r8, r0, lsl #28
    a820:	00001f00 	andeq	r1, r0, r0, lsl #30
    a824:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    a828:	1c000000 	stcne	0, cr0, [r0], {-0}
    a82c:	00002b1a 	andeq	r2, r0, sl, lsl fp
    a830:	c301f202 	movwgt	pc, #4610	; 0x1202	; <UNPREDICTABLE>
    a834:	00000000 	andeq	r0, r0, r0
    a838:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a83c:	01000000 	mrseq	r0, (UNDEF: 0)
    a840:	00079a9c 	muleq	r7, ip, sl
    a844:	2c372600 	ldccs	6, cr2, [r7], #-0
    a848:	3c010000 	stccc	0, cr0, [r1], {-0}
    a84c:	0000c301 	andeq	ip, r0, r1, lsl #6
    a850:	0046bd00 	subeq	fp, r6, r0, lsl #26
    a854:	2bc42700 	blcs	ff11445c <_estack+0xdf10f45c>
    a858:	3f010000 	svccc	0x00010000
    a85c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a860:	27510100 	ldrbcs	r0, [r1, -r0, lsl #2]
    a864:	00002d2d 	andeq	r2, r0, sp, lsr #26
    a868:	c3014101 	movwgt	r4, #4353	; 0x1101
    a86c:	05000000 	streq	r0, [r0, #-0]
    a870:	26400071 			; <UNDEFINED> instruction: 0x26400071
    a874:	2a61279f 	bcs	18546f8 <__ccfg+0x1834750>
    a878:	43010000 	movwmi	r0, #4096	; 0x1000
    a87c:	0000c301 	andeq	ip, r0, r1, lsl #6
    a880:	00710700 	rsbseq	r0, r1, r0, lsl #14
    a884:	26482440 	strbcs	r2, [r8], -r0, asr #8
    a888:	2a69279f 	bcs	1a5470c <__ccfg+0x1a34764>
    a88c:	45010000 	strmi	r0, [r1, #-0]
    a890:	0000c301 	andeq	ip, r0, r1, lsl #6
    a894:	00710700 	rsbseq	r0, r1, r0, lsl #14
    a898:	26482448 	strbcs	r2, [r8], -r8, asr #8
    a89c:	2a71249f 	bcs	1c53b20 <__ccfg+0x1c33b78>
    a8a0:	47010000 	strmi	r0, [r1, -r0]
    a8a4:	0000c301 	andeq	ip, r0, r1, lsl #6
    a8a8:	0046eb00 	subeq	lr, r6, r0, lsl #22
    a8ac:	2abe2400 	bcs	fef938b4 <_estack+0xdef8e8b4>
    a8b0:	56010000 	strpl	r0, [r1], -r0
    a8b4:	0000c301 	andeq	ip, r0, r1, lsl #6
    a8b8:	00470400 	subeq	r0, r7, r0, lsl #8
    a8bc:	2b692400 	blcs	1a538c4 <__ccfg+0x1a3391c>
    a8c0:	57010000 	strpl	r0, [r1, -r0]
    a8c4:	0000c301 	andeq	ip, r0, r1, lsl #6
    a8c8:	00472700 	subeq	r2, r7, r0, lsl #14
    a8cc:	00642800 	rsbeq	r2, r4, r0, lsl #16
    a8d0:	c3015801 	movwgt	r5, #6145	; 0x1801
    a8d4:	50000000 	andpl	r0, r0, r0
    a8d8:	00000047 	andeq	r0, r0, r7, asr #32
    a8dc:	002c5b1c 	eoreq	r5, ip, ip, lsl fp
    a8e0:	020e0200 	andeq	r0, lr, #0, 4
    a8e4:	000000ad 	andeq	r0, r0, sp, lsr #1
    a8e8:	00000000 	andeq	r0, r0, r0
    a8ec:	0000000c 	andeq	r0, r0, ip
    a8f0:	07d59c01 	ldrbeq	r9, [r5, r1, lsl #24]
    a8f4:	82260000 	eorhi	r0, r6, #0
    a8f8:	0100002b 	tsteq	r0, fp, lsr #32
    a8fc:	00c30163 	sbceq	r0, r3, r3, ror #2
    a900:	47ca0000 	strbmi	r0, [sl, r0]
    a904:	b1240000 			; <UNDEFINED> instruction: 0xb1240000
    a908:	0100002c 	tsteq	r0, ip, lsr #32
    a90c:	00c30185 	sbceq	r0, r3, r5, lsl #3
    a910:	47eb0000 	strbmi	r0, [fp, r0]!
    a914:	1c000000 	stcne	0, cr0, [r0], {-0}
    a918:	00002b44 	andeq	r2, r0, r4, asr #22
    a91c:	ce01c202 	cdpgt	2, 0, cr12, cr1, cr2, {0}
    a920:	00000000 	andeq	r0, r0, r0
    a924:	34000000 	strcc	r0, [r0], #-0
    a928:	01000000 	mrseq	r0, (UNDEF: 0)
    a92c:	0008429c 	muleq	r8, ip, r2
    a930:	2d042400 	cfstrscs	mvf2, [r4, #-0]
    a934:	92010000 	andls	r0, r1, #0
    a938:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a93c:	00482b00 	subeq	r2, r8, r0, lsl #22
    a940:	2c402400 	cfstrdcs	mvd2, [r0], {-0}
    a944:	93010000 	movwls	r0, #4096	; 0x1000
    a948:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a94c:	00484d00 	subeq	r4, r8, r0, lsl #26
    a950:	22172400 	andscs	r2, r7, #0, 8
    a954:	94010000 	strls	r0, [r1], #-0
    a958:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a95c:	00486000 	subeq	r6, r8, r0
    a960:	2aec2400 	bcs	ffb13968 <_estack+0xdfb0e968>
    a964:	95010000 	strls	r0, [r1, #-0]
    a968:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a96c:	00488300 	subeq	r8, r8, r0, lsl #6
    a970:	00001f00 	andeq	r1, r0, r0, lsl #30
    a974:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a978:	001f0000 	andseq	r0, pc, r0
    a97c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a980:	00000008 	andeq	r0, r0, r8
    a984:	002cd01c 	eoreq	sp, ip, ip, lsl r0
    a988:	01d30200 	bicseq	r0, r3, r0, lsl #4
    a98c:	000000ce 	andeq	r0, r0, lr, asr #1
    a990:	00000000 	andeq	r0, r0, r0
    a994:	0000001c 	andeq	r0, r0, ip, lsl r0
    a998:	088d9c01 	stmeq	sp, {r0, sl, fp, ip, pc}
    a99c:	fe240000 	cdp2	0, 2, cr0, cr4, cr0, {0}
    a9a0:	0100002b 	tsteq	r0, fp, lsr #32
    a9a4:	00ce01b7 	strheq	r0, [lr], #23
    a9a8:	489f0000 	ldmmi	pc, {}	; <UNPREDICTABLE>
    a9ac:	c2240000 	eorgt	r0, r4, #0
    a9b0:	0100002c 	tsteq	r0, ip, lsr #32
    a9b4:	00ce01b8 	strheq	r0, [lr], #24
    a9b8:	48b20000 	ldmmi	r2!, {}	; <UNPREDICTABLE>
    a9bc:	c8240000 	stmdagt	r4!, {}	; <UNPREDICTABLE>
    a9c0:	0100002a 	tsteq	r0, sl, lsr #32
    a9c4:	00ce01b9 	strheq	r0, [lr], #25
    a9c8:	48cd0000 	stmiami	sp, {}^	; <UNPREDICTABLE>
    a9cc:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    a9d0:	00002b75 	andeq	r2, r0, r5, ror fp
    a9d4:	03a55c01 			; <UNDEFINED> instruction: 0x03a55c01
    a9d8:	03050000 	movweq	r0, #20480	; 0x5000
    a9dc:	00000000 	andeq	r0, r0, r0
    a9e0:	00180b2a 	andseq	r0, r8, sl, lsr #22
    a9e4:	03450700 	movteq	r0, #22272	; 0x5700
    a9e8:	000000ce 	andeq	r0, r0, lr, asr #1
    a9ec:	0016572b 	andseq	r5, r6, fp, lsr #14
    a9f0:	c3aa0800 			; <UNDEFINED> instruction: 0xc3aa0800
    a9f4:	2c000000 	stccs	0, cr0, [r0], {-0}
    a9f8:	0000211b 	andeq	r2, r0, fp, lsl r1
    a9fc:	d9089906 	stmdble	r8, {r1, r2, r8, fp, ip, pc}
    aa00:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
    return (time * SECOND)/1000;
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
}
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
      40:	13490035 	movtne	r0, #36917	; 0x9035
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0xe48>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
			wwait (st, 50);
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
			curr += 0x1000;
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
		if (from >= EE_SIZE || upto < from)
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
			upto = EE_SIZE - 1;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	0a020c3f 	beq	83224 <__ccfg+0x6327c>
     124:	34170000 	ldrcc	r0, [r7], #-0
            ch = redCharacter;
     128:	3a080300 	bcc	200d30 <__ccfg+0x1e0d88>
            onTime = redOn;
     12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     130:	3f13490b 	svccc	0x0013490b
            offTime = greenOff;
     134:	000a020c 	andeq	r0, sl, ip, lsl #4
        ledFlag = 1 - ledFlag;
     138:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    return (time * SECOND)/1000;
     13c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        ledFlag = 1 - ledFlag;
     140:	0b3b0b3a 	bleq	ec2e30 <__ccfg+0xea2e88>
    return (time * SECOND)/1000;
     144:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     148:	01120111 	tsteq	r2, r1, lsl r1
     14c:	13010a40 	movwne	r0, #6720	; 0x1a40
     150:	05190000 	ldreq	r0, [r9, #-0]
        offTime = adjustTime(offTime);
     154:	3a0e0300 	bcc	380d5c <__ccfg+0x360db4>
        onTime = adjustTime(onTime);
     158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     15c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	1a000006 	bne	180 <_Min_Stack_Size+0x80>
     164:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
        if(onTime > 0){
     16c:	01110b39 	tsteq	r1, r9, lsr fp
            if(On)
     170:	0b1b0000 	bleq	6c0178 <__ccfg+0x6a01d0>
     174:	00065501 	andeq	r5, r6, r1, lsl #10
     178:	00341c00 	eorseq	r1, r4, r0, lsl #24
                leds(led,1);
     17c:	0b3a0e03 	bleq	e83990 <__ccfg+0xe639e8>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     180:	0b390b3b 	bleq	e42e74 <__ccfg+0xe22ecc>
                leds(led,0);
     184:	0a021349 	beq	84eb0 <__ccfg+0x64f08>
     188:	0b1d0000 	bleq	740190 <__ccfg+0x7201e8>
     18c:	01065501 	tsteq	r6, r1, lsl #10
     190:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
            delay(onTime, OFF_PERIOD);
     194:	0111010b 	tsteq	r1, fp, lsl #2
            delay(offTime, Check_PERIOD);
     198:	13010112 	movwne	r0, #4370	; 0x1112
            led = greenLed;
     19c:	341f0000 	ldrcc	r0, [pc], #-0	; 1a4 <_Min_Stack_Size+0xa4>
     1a0:	3a080300 	bcc	200da8 <__ccfg+0x1e0e00>
            ch = greenCharacter;
     1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            onTime = greenOn;
     1a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1ac:	2000000a 	andcs	r0, r0, sl
            offTime = greenOff;
     1b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
                leds(led,0);
     1b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
     1b8:	0b590b58 	bleq	1642f20 <__ccfg+0x1622f78>
     1bc:	13010b57 	movwne	r0, #6999	; 0x1b57
     1c0:	05210000 	streq	r0, [r1, #-0]!
     1c4:	00133100 	andseq	r3, r3, r0, lsl #2
            proceed OFF_PERIOD;
     1c8:	011d2200 	tsteq	sp, r0, lsl #4
     1cc:	01111331 	tsteq	r1, r1, lsr r3
        when(&On, Check_PERIOD);
     1d0:	0b580112 	bleq	1600620 <__ccfg+0x15e0678>
     1d4:	0b570b59 	bleq	15c2f40 <__ccfg+0x15a2f98>
        release;
     1d8:	34230000 	strtcc	r0, [r3], #-0
        leds(led,0);
     1dc:	3a0e0300 	bcc	380de4 <__ccfg+0x360e3c>
     1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1e8:	24000006 	strcs	r0, [r0], #-6
            proceed Check_PERIOD;
     1ec:	08030034 	stmdaeq	r3, {r2, r4, r5}
}
     1f0:	0b3b0b3a 	bleq	ec2ee0 <__ccfg+0xea2f38>
     1f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1f8:	1d250000 	stcne	0, cr0, [r5, #-0]
     1fc:	11133101 	tstne	r3, r1, lsl #2
     200:	58011201 	stmdapl	r1, {r0, r9, ip}
     204:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     208:	0013010b 	andseq	r0, r3, fp, lsl #2
     20c:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     210:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
     218:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     21c:	0b201349 	bleq	804f48 <__ccfg+0x7e4fa0>
     220:	00001301 	andeq	r1, r0, r1, lsl #6
     224:	03000527 	movweq	r0, #1319	; 0x527
     228:	3b0b3a0e 	blcc	2cea68 <__ccfg+0x2aeac0>
     22c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     230:	28000013 	stmdacs	r0, {r0, r1, r4}
     234:	0e03012e 	adfeqsp	f0, f3, #0.5
     238:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     23c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     240:	13010b20 	movwne	r0, #6944	; 0x1b20
    word numbers[] = {0, 0, 0, 0};
     244:	05290000 	streq	r0, [r9, #-0]!
    int numbersIndex = 0;
     248:	3a0e0300 	bcc	380e50 <__ccfg+0x360ea8>
    word numbers[] = {0, 0, 0, 0};
     24c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	0013490b 	andseq	r4, r3, fp, lsl #18
        if(settingsInput[i] == ' ') {
     254:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     258:	01111331 	tsteq	r1, r1, lsr r3
            numbers[numbersIndex] = number;
     25c:	0a400112 	beq	10006ac <__ccfg+0xfe0704>
     260:	052b0000 	streq	r0, [fp, #-0]!
            number = 0;
     264:	02133100 	andseq	r3, r3, #0, 2
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	00000006 	andeq	r0, r0, r6
    redOn = numbers[0];
     26c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     270:	030b130e 	movweq	r1, #45838	; 0xb30e
    redOff = numbers[1];
     274:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     278:	10011106 	andne	r1, r1, r6, lsl #2
    greenOn = numbers[2];
     27c:	02000006 	andeq	r0, r0, #6
     280:	0b0b0024 	bleq	2c0318 <__ccfg+0x2a0370>
    greenOff = numbers[3];
     284:	0e030b3e 	vmoveq.16	d3[0], r0
     288:	16030000 	strne	r0, [r3], -r0
}
     28c:	3a0e0300 	bcc	380e94 <__ccfg+0x360eec>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     294:	0013490b 	andseq	r4, r3, fp, lsl #18
            number = number * 10;
     298:	00240400 	eoreq	r0, r4, r0, lsl #8
            number += settingsInput[i] - 48;
     29c:	0b3e0b0b 	bleq	f82ed0 <__ccfg+0xf62f28>
     2a0:	00000803 	andeq	r0, r0, r3, lsl #16
     2a4:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     2a8:	06000013 			; <UNDEFINED> instruction: 0x06000013
     2ac:	13490035 	movtne	r0, #36917	; 0x9035
     2b0:	0f070000 	svceq	0x00070000
fsm root {
     2b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     2b8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     2bc:	0b0b0113 	bleq	2c0710 <__ccfg+0x2a0768>
     2c0:	0b3b0b3a 	bleq	ec2fb0 <__ccfg+0xea3008>
     2c4:	13010b39 	movwne	r0, #6969	; 0x1b39
     2c8:	0d090000 	stceq	0, cr0, [r9, #-0]
     2cc:	3a0e0300 	bcc	380ed4 <__ccfg+0x360f2c>
        ser_outf(Initial, "Enter your name: ");
     2d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2d4:	0b13490b 	bleq	4d2708 <__ccfg+0x4b2760>
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     2dc:	000b380b 	andeq	r3, fp, fp, lsl #16
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	000d0a00 	andeq	r0, sp, r0, lsl #20
     2e4:	0b3a0e03 	bleq	e83af8 <__ccfg+0xe63b50>
     2e8:	0b390b3b 	bleq	e42fdc <__ccfg+0xe23034>
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	0b381349 	bleq	e05018 <__ccfg+0xde5070>
     2f0:	340b0000 	strcc	r0, [fp], #-0
        if (choice == 'A' || choice == 'a'){
     2f4:	3a0e0300 	bcc	380efc <__ccfg+0x360f54>
     2f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2fc:	3f13490b 	svccc	0x0013490b
            proceed Adjust_Intervals;
     300:	000c3c0c 	andeq	r3, ip, ip, lsl #24
            proceed Monitor;
     304:	01010c00 	tsteq	r1, r0, lsl #24
        proceed Show_Menu;
     308:	13011349 	movwne	r1, #4937	; 0x1349
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	210d0000 	mrscs	r0, (UNDEF: 13)
     310:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     31c:	13490b39 	movtne	r0, #39737	; 0x9b39
        processSettingsInput(settings);
     320:	150f0000 	strne	r0, [pc, #-0]	; 328 <root+0x74>
        if(!blinkerRunning) {
     324:	010c2701 	tsteq	ip, r1, lsl #14
     328:	10000013 	andne	r0, r0, r3, lsl r0
            blinkerCode = runfsm blinker;
     32c:	13490005 	movtne	r0, #36869	; 0x9005
     330:	34110000 	ldrcc	r0, [r1], #-0
            blinkerRunning = YES;
     334:	3a0e0300 	bcc	380f3c <__ccfg+0x360f94>
        On = YES;
     338:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     33c:	3f13490b 	svccc	0x0013490b
        trigger(&On);
     340:	000c3c0c 	andeq	r3, ip, ip, lsl #24
        proceed Show_Menu;
     344:	01131200 	tsteq	r3, r0, lsl #4
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	0b3a0b0b 	bleq	e82f7c <__ccfg+0xe62fd4>
     34c:	0b39053b 	bleq	e41840 <__ccfg+0xe21898>
     350:	00001301 	andeq	r1, r0, r1, lsl #6
     354:	03000d13 	movweq	r0, #3347	; 0xd13
     358:	3b0b3a0e 	blcc	2ceb98 <__ccfg+0x2aebf0>
     35c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     360:	000b3813 	andeq	r3, fp, r3, lsl r8
        proceed Show_Menu;
     364:	01131400 	tsteq	r3, r0, lsl #8
     368:	0b0b0e03 	bleq	2c3b7c <__ccfg+0x2a3bd4>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     370:	13010b39 	movwne	r0, #6969	; 0x1b39
        displayCycle = YES;
     374:	21150000 	tstcs	r5, r0
        ser_inf(Await_Stop, "%c", &ch);
     378:	2f134900 	svccs	0x00134900
     37c:	1600000b 	strne	r0, [r0], -fp
     380:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        if(ch == 'S' || ch == 's'){
     384:	0b3b0b3a 	bleq	ec3074 <__ccfg+0xea30cc>
     388:	13490b39 	movtne	r0, #39737	; 0x9b39
     38c:	34170000 	ldrcc	r0, [r7], #-0
            displayCycle = NO;
     390:	3a0e0300 	bcc	380f98 <__ccfg+0x360ff0>
     394:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            proceed Show_Menu;
     398:	3f13490b 	svccc	0x0013490b
        proceed Monitor;
     39c:	000a020c 	andeq	r0, sl, ip, lsl #4
        On = NO;
     3a0:	00341800 	eorseq	r1, r4, r0, lsl #16
     3a4:	0b3a0e03 	bleq	e83bb8 <__ccfg+0xe63c10>
        if(blinkerCode != 0x0) {
     3a8:	0b39053b 	bleq	e4189c <__ccfg+0xe218f4>
            killall(blinkerCode);
     3ac:	0a021349 	beq	850d8 <__ccfg+0x65130>
     3b0:	34190000 	ldrcc	r0, [r9], #-0
        proceed Show_Menu;
     3b4:	3a134700 	bcc	4d1fbc <__ccfg+0x4b2014>
     3b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        leds_all(0);
     3bc:	000a020b 	andeq	r0, sl, fp, lsl #4
     3c0:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     3c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        proceed Show_Menu;
     3c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     3cc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
        } else if (choice == 'S' || choice == 's') {
     3d0:	01111349 	tsteq	r1, r9, asr #6
            proceed Stop;
     3d4:	0a400112 	beq	1000824 <__ccfg+0xfe087c>
        } else if (choice == 'V' || choice == 'v') {
     3d8:	00001301 	andeq	r1, r0, r1, lsl #6
            proceed View_Settings;
     3dc:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
        } else if (choice == 'M' || choice == 'm') {
     3e0:	00130106 	andseq	r0, r3, r6, lsl #2
            proceed Monitor;
     3e4:	00341c00 	eorseq	r1, r4, r0, lsl #24
     3e8:	0b3a0803 	bleq	e823fc <__ccfg+0xe62454>
     3ec:	0b39053b 	bleq	e418e0 <__ccfg+0xe21938>
     3f0:	00001349 	andeq	r1, r0, r9, asr #6
     3f4:	31001d1d 	tstcc	r0, sp, lsl sp
     3f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3fc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     400:	000b5705 	andeq	r5, fp, r5, lsl #14
     404:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     408:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     40c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     410:	01110b39 	tsteq	r1, r9, lsr fp
     414:	0a400112 	beq	1000864 <__ccfg+0xfe08bc>
     418:	00001301 	andeq	r1, r0, r1, lsl #6
     41c:	03000a1f 	movweq	r0, #2591	; 0xa1f
     420:	3b0b3a0e 	blcc	2cec60 <__ccfg+0x2aecb8>
     424:	000b390b 	andeq	r3, fp, fp, lsl #18
     428:	011d2000 	tsteq	sp, r0
     42c:	01521331 	cmpeq	r2, r1, lsr r3
     430:	0b580655 	bleq	1601d8c <__ccfg+0x15e1de4>
     434:	0b570559 	bleq	15c19a0 <__ccfg+0x15a19f8>
static void devinit_uart (int devnum) {
     438:	00001301 	andeq	r1, r0, r1, lsl #6
	adddevfunc (ioreq_uart_a, devnum);
     43c:	31000521 	tstcc	r0, r1, lsr #10
     440:	22000013 	andcs	r0, r0, #19
void udelay (volatile word n) {
     444:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     448:	06550152 			; <UNDEFINED> instruction: 0x06550152
	while (n) {
     44c:	0b590b58 	bleq	16431b4 <__ccfg+0x162320c>
     450:	13010b57 	movwne	r0, #6999	; 0x1b57
}
     454:	0b230000 	bleq	8c045c <__ccfg+0x8a04b4>
	while (n--);
     458:	00065501 	andeq	r5, r6, r1, lsl #10
     45c:	000a2400 	andeq	r2, sl, r0, lsl #8
     460:	01111331 	tsteq	r1, r1, lsr r3
		n--;
     464:	1d250000 	stcne	0, cr0, [r5, #-0]
     468:	52133100 	andspl	r3, r3, #0, 2
     46c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
void mdelay (volatile word n) {
     470:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     474:	2600000b 	strcs	r0, [r0], -fp
	while (n) {
     478:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     47c:	01120111 	tsteq	r2, r1, lsl r1
}
     480:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		udelay (999);
     484:	13010b57 	movwne	r0, #6999	; 0x1b57
     488:	1d270000 	stcne	0, cr0, [r7, #-0]
		n--;
     48c:	11133101 	tstne	r3, r1, lsl #2
     490:	58011201 	stmdapl	r1, {r0, r9, ip}
     494:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     498:	2800000b 	stmdacs	r0, {r0, r1, r3}
void __pi_ondomain (lword d) {
     49c:	1331001d 	teqne	r1, #29
     4a0:	01120111 	tsteq	r2, r1, lsl r1
		if (__pi_systat.effpdm > 1)
     4a4:	0b590b58 	bleq	164320c <__ccfg+0x1623264>
     4a8:	00000b57 	andeq	r0, r0, r7, asr fp
			__pi_systat.effpdm = 1;
     4ac:	03003429 	movweq	r3, #1065	; 0x429
	PRCMPowerDomainOn (d);
     4b0:	3b0b3a08 	blcc	2cecd8 <__ccfg+0x2aed30>
     4b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     4b8:	00060213 	andeq	r0, r6, r3, lsl r2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4bc:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     4c0:	0b3a0e03 	bleq	e83cd4 <__ccfg+0xe63d2c>
     4c4:	0b39053b 	bleq	e419b8 <__ccfg+0xe21a10>
	__pi_systat.ondmns |= d;
     4c8:	13010b20 	movwne	r0, #6944	; 0x1b20
     4cc:	0a2b0000 	beq	ac04d4 <__ccfg+0xaa052c>
}
     4d0:	3a0e0300 	bcc	3810d8 <__ccfg+0x361130>
     4d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pi_syserror (word ec, const char *m) {
     4d8:	2c00000b 	stccs	0, cr0, [r0], {11}
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 42c <root+0x178>
     4e0:	0b3a0e03 	bleq	e83cf4 <__ccfg+0xe63d4c>
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	0b39053b 	bleq	e419d8 <__ccfg+0xe21a30>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	01110c27 	tsteq	r1, r7, lsr #24
     4ec:	0a400112 	beq	100093c <__ccfg+0xfe0994>
     4f0:	00001301 	andeq	r1, r0, r1, lsl #6
		all_leds_blink;
     4f4:	0300052d 	movweq	r0, #1325	; 0x52d
     4f8:	3b0b3a0e 	blcc	2ced38 <__ccfg+0x2aed90>
     4fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     500:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     504:	010b2e00 	tsteq	fp, r0, lsl #28
     508:	01120111 	tsteq	r2, r1, lsl r1
     50c:	00001301 	andeq	r1, r0, r1, lsl #6
     510:	3100342f 	tstcc	r0, pc, lsr #8
     514:	30000013 	andcc	r0, r0, r3, lsl r0
     518:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
	while (1) {
     51c:	00000655 	andeq	r0, r0, r5, asr r6
     520:	31003431 	tstcc	r0, r1, lsr r4
     524:	00060213 	andeq	r0, r6, r3, lsl r2
     528:	011d3200 	tsteq	sp, r0, lsl #4
void tci_run_delay_timer () {
     52c:	01521331 	cmpeq	r2, r1, lsr r3
	setdel = __pi_mintk - __pi_old;
     530:	0b580655 	bleq	1601e8c <__ccfg+0x15e1ee4>
     534:	0b570b59 	bleq	15c32a0 <__ccfg+0x15a32f8>
     538:	1d330000 	ldcne	0, cr0, [r3, #-0]
     53c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     544:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     548:	3400000b 	strcc	r0, [r0], #-11
     54c:	08030005 	stmdaeq	r3, {r0, r2}
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	sti_tim;
     554:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     558:	00000a02 	andeq	r0, r0, r2, lsl #20
     55c:	31000535 	tstcc	r0, r5, lsr r5
     560:	00060213 	andeq	r0, r6, r3, lsl r2
     564:	00343600 	eorseq	r3, r4, r0, lsl #12
     568:	0b3a0803 	bleq	e8257c <__ccfg+0xe625d4>
	cli_aux;
     56c:	0b390b3b 	bleq	e43260 <__ccfg+0xe232b8>
     570:	06021349 	streq	r1, [r2], -r9, asr #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	0b370000 	bleq	dc057c <__ccfg+0xda05d4>
     578:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     57c:	38000001 	stmdacc	r0, {r0}
     580:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	sti_aux;
     584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     588:	0b200b39 	bleq	803274 <__ccfg+0x7e32cc>
     58c:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
     590:	3a0e0301 	bcc	38119c <__ccfg+0x3611f4>
void AONRTCIntHandler () {
     594:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	110c270b 	tstne	ip, fp, lsl #14
     59c:	40011201 	andmi	r1, r1, r1, lsl #4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	0013010a 	andseq	r0, r3, sl, lsl #2
		if (__pi_utims [0] == 0)
     5a4:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
     5a8:	0b3a0e03 	bleq	e83dbc <__ccfg+0xe63e14>
		if (*(__pi_utims [0])) {
     5ac:	0b39053b 	bleq	e41aa0 <__ccfg+0xe21af8>
     5b0:	13490c27 	movtne	r0, #39975	; 0x9c27
			(*(__pi_utims [0]))--;
     5b4:	01120111 	tsteq	r2, r1, lsl r1
		if (__pi_utims [1] == 0)
     5b8:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (*(__pi_utims [1])) {
     5bc:	053b0000 	ldreq	r0, [fp, #-0]!
			aux_timer_inactive = 0;
     5c0:	3a080300 	bcc	2011c8 <__ccfg+0x1e1220>
			(*(__pi_utims [1]))--;
     5c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (__pi_utims [2] == 0)
     5c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (*(__pi_utims [2])) {
     5cc:	3c000006 	stccc	0, cr0, [r0], {6}
			(*(__pi_utims [2]))--;
     5d0:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (__pi_utims [3] != 0) {
     5d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (*(__pi_utims [3])) {
     5d8:	01110b39 	tsteq	r1, r9, lsr fp
				aux_timer_inactive = 0;
     5dc:	0a400112 	beq	1000a2c <__ccfg+0xfe0a84>
				(*(__pi_utims [3]))--;
     5e0:	00001301 	andeq	r1, r0, r1, lsl #6
	if (__pi_systat.ledsts) {
     5e4:	3f012e3d 	svccc	0x00012e3d
     5e8:	3a0e030c 	bcc	381220 <__ccfg+0x361278>
		if (__pi_systat.ledblc++ == 0) {
     5ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			if (__pi_systat.ledblk) {
     5f4:	010b2013 	tsteq	fp, r3, lsl r0
     5f8:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     5fc:	08030005 	stmdaeq	r3, {r0, r2}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     604:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (__pi_systat.ledsts & 0x2)
     608:	0a3f0000 	beq	fc0610 <__ccfg+0xfa0668>
     60c:	3a080300 	bcc	201214 <__ccfg+0x1e126c>
     610:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (__pi_systat.ledsts & 0x4)
     614:	4000000b 	andmi	r0, r0, fp
				__pi_systat.ledblk = 0;
     618:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     61c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (__pi_systat.fstblk)
     620:	13490b39 	movtne	r0, #39737	; 0x9b39
     624:	00000602 	andeq	r0, r0, r2, lsl #12
				__pi_systat.ledblc = 200;
     628:	03000a41 	movweq	r0, #2625	; 0xa41
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	3b0b3a08 	blcc	2cee54 <__ccfg+0x2aeeac>
		cli_tim;
     630:	110b3905 	tstne	fp, r5, lsl #18
		__pi_new += setdel;
     634:	42000001 	andmi	r0, r0, #1
     638:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		setdel = 0;
     63c:	01120111 	tsteq	r2, r1, lsl r1
		RISE_N_SHINE;
     640:	0b590b58 	bleq	16433a8 <__ccfg+0x1623400>
		__pi_new += setdel;
     644:	13010b57 	movwne	r0, #6999	; 0x1b57
		RISE_N_SHINE;
     648:	1d430000 	stclne	0, cr0, [r3, #-0]
     64c:	11133101 	tstne	r3, r1, lsl #2
		aux_timer_inactive = 1;
     650:	58011201 	stmdapl	r1, {r0, r9, ip}
     654:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
				if (__pi_systat.ledsts & 0x1)
     658:	4400000b 	strmi	r0, [r0], #-11
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65c:	0e03012e 	adfeqsp	f0, f3, #0.5
     660:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (__pi_systat.ledsts & 0x2)
     664:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     668:	0b201349 	bleq	805394 <__ccfg+0x7e53ec>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
				if (__pi_systat.ledsts & 0x8)
     670:	03002e45 	movweq	r2, #3653	; 0xe45
				__pi_systat.ledblk = 1;
     674:	3b0b3a0e 	blcc	2ceeb4 <__ccfg+0x2aef0c>
     678:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (aux_timer_inactive) {
     67c:	000b2013 	andeq	r2, fp, r3, lsl r0
			cli_aux;
     680:	012e4600 			; <UNDEFINED> instruction: 0x012e4600
     684:	0b3a0e03 	bleq	e83e98 <__ccfg+0xe63ef0>
     688:	0b390b3b 	bleq	e4337c <__ccfg+0xe233d4>
     68c:	13010b20 	movwne	r0, #6944	; 0x1b20
     690:	34470000 	strbcc	r0, [r7], #-0
     694:	3a080300 	bcc	20129c <__ccfg+0x1e12f4>
     698:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     69c:	0013490b 	andseq	r4, r3, fp, lsl #18
     6a0:	010b4800 	tsteq	fp, r0, lsl #16
     6a4:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
word tci_update_delay_ticks (Boolean force) {
     6a8:	030c3f01 	movweq	r3, #52993	; 0xcf01
	cli_tim;
     6ac:	3b0b3a0e 	blcc	2ceeec <__ccfg+0x2aef44>
     6b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	if (setdel) {
     6b4:	1201110c 	andne	r1, r1, #12, 2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	010a4001 	tsteq	sl, r1
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	4a000013 	bmi	710 <__pi_uart_setrate+0x18>
     6c0:	08030005 	stmdaeq	r3, {r0, r2}
     6c4:	0b3b0b3a 	bleq	ec33b4 <__ccfg+0xea340c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	13490b39 	movtne	r0, #39737	; 0x9b39
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	00000602 	andeq	r0, r0, r2, lsl #12
	return NO;
     6d0:	0300344b 	movweq	r3, #1099	; 0x44b
			setdel = 0;
     6d4:	3b0b3a0e 	blcc	2cef14 <__ccfg+0x2aef6c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     6dc:	000a0213 	andeq	r0, sl, r3, lsl r2
}
     6e0:	000a4c00 	andeq	r4, sl, r0, lsl #24
		sti_tim;
     6e4:	0b3a0e03 	bleq	e83ef8 <__ccfg+0xe63f50>
		return YES;
     6e8:	0b390b3b 	bleq	e433dc <__ccfg+0xe23434>
     6ec:	00000111 	andeq	r0, r0, r1, lsl r1
     6f0:	31001d4d 	tstcc	r0, sp, asr #26
     6f4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	UARTDisable (UART0_BASE);
     6fc:	000b570b 	andeq	r5, fp, fp, lsl #14
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	002e4e00 	eoreq	r4, lr, r0, lsl #28
	UARTDisable (UART0_BASE);
     704:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	UARTConfigSetExpClk (UART0_BASE,
     708:	0b3b0b3a 	bleq	ec33f8 <__ccfg+0xea3450>
     70c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     710:	01120111 	tsteq	r2, r1, lsl r1
     714:	00000a40 	andeq	r0, r0, r0, asr #20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	0300054f 	movweq	r0, #1359	; 0x54f
     71c:	3b0b3a08 	blcc	2cef44 <__ccfg+0x2aef9c>
     720:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	000a0213 	andeq	r0, sl, r3, lsl r2
     728:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
     72c:	0b3a0e03 	bleq	e83f40 <__ccfg+0xe63f98>
	urates [0] = rate;
     730:	0b390b3b 	bleq	e43424 <__ccfg+0xe2347c>
}
     734:	0b200c27 	bleq	8037d8 <__ccfg+0x7e3830>
     738:	00001301 	andeq	r1, r0, r1, lsl #6
     73c:	03000551 	movweq	r0, #1361	; 0x551
     740:	3b0b3a08 	blcc	2cef68 <__ccfg+0x2aefc0>
     744:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     748:	52000013 	andpl	r0, r0, #19
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	0e03012e 	adfeqsp	f0, f3, #0.5
     750:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     754:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	13010b20 	movwne	r0, #6944	; 0x1b20
     75c:	05530000 	ldrbeq	r0, [r3, #-0]
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	3a0e0300 	bcc	381368 <__ccfg+0x3613c0>
     764:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	0013490b 	andseq	r4, r3, fp, lsl #18
     76c:	002e5400 	eoreq	r5, lr, r0, lsl #8
     770:	0b3a0e03 	bleq	e83f84 <__ccfg+0xe63fdc>
     774:	0b390b3b 	bleq	e43468 <__ccfg+0xe234c0>
     778:	0b200c27 	bleq	80381c <__ccfg+0x7e3874>
     77c:	2e550000 	cdpcs	0, 5, cr0, cr5, cr0, {0}
     780:	3a0e0301 	bcc	38138c <__ccfg+0x3613e4>
	switch (operation) {
     784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     78c:	010b2013 	tsteq	fp, r3, lsl r0
     790:	56000013 			; <UNDEFINED> instruction: 0x56000013
     794:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     798:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				*buf++ = uart_a_read;
     79c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7a0:	00000b20 	andeq	r0, r0, r0, lsr #22
			while (len && uart_a_char_available) {
     7a4:	03002e57 	movweq	r2, #3671	; 0xe57
     7a8:	3b0b3a0e 	blcc	2cefe8 <__ccfg+0x2af040>
     7ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			if (len != operation) {
     7b0:	2013490c 	andscs	r4, r3, ip, lsl #18
}
     7b4:	5800000b 	stmdapl	r0, {r0, r1, r3}
     7b8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
			uart_a_disable_int;
     7bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (uart_a_char_available) {
     7c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*buf++ = uart_a_read;
     7c4:	0b201349 	bleq	8054f0 <__ccfg+0x7e5548>
			uart_a_disable_int;
     7c8:	2e590000 	cdpcs	0, 5, cr0, cr9, cr0, {0}
     7cc:	11133101 	tstne	r3, r1, lsl #2
			if (uart_a_char_available) {
     7d0:	40011201 	andmi	r1, r1, r1, lsl #4
     7d4:	0000000a 	andeq	r0, r0, sl
				uart_a_enable_int;
     7d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     7dc:	030b130e 	movweq	r1, #45838	; 0xb30e
				goto Redo_rx;
     7e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	10011106 	andne	r1, r1, r6, lsl #2
     7e8:	02000006 	andeq	r0, r0, #6
			return -2;
     7ec:	0b0b0024 	bleq	2c0884 <__ccfg+0x2a08dc>
     7f0:	0e030b3e 	vmoveq.16	d3[0], r0
				uart_a_write (*buf);
     7f4:	16030000 	strne	r0, [r3], -r0
     7f8:	3a0e0300 	bcc	381400 <__ccfg+0x361458>
			while (len && uart_a_room_in_tx) {
     7fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     800:	0013490b 	andseq	r4, r3, fp, lsl #18
     804:	00240400 	eoreq	r0, r4, r0, lsl #8
			if (len != operation) {
     808:	0b3e0b0b 	bleq	f8343c <__ccfg+0xf63494>
			uart_a_disable_int;
     80c:	00000803 	andeq	r0, r0, r3, lsl #16
     810:	03011305 	movweq	r1, #4869	; 0x1305
			if (uart_a_room_in_tx) {
     814:	3a0b0b0e 	bcc	2c3454 <__ccfg+0x2a34ac>
     818:	010b3b0b 	tsteq	fp, fp, lsl #22
				uart_a_enable_int;
     81c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     820:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				*buf++ = uart_a_read;
     824:	0b381349 	bleq	e05550 <__ccfg+0xde55a8>
			if (uart_a_room_in_tx) {
     828:	00000c34 	andeq	r0, r0, r4, lsr ip
				uart_a_write (*buf);
     82c:	0b000f07 	bleq	4450 <__exidx_end+0x15d4>
     830:	0800000b 	stmdaeq	r0, {r0, r1, r3}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	13490026 	movtne	r0, #36902	; 0x9026
     838:	35090000 	strcc	r0, [r9, #-0]
			uart_a_enable_int;
     83c:	00134900 	andseq	r4, r3, r0, lsl #18
     840:	000f0a00 	andeq	r0, pc, r0, lsl #20
     844:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			return 0;
     848:	130b0000 	movwne	r0, #45056	; 0xb000
			if (len == UART_CNTRL_SETRATE) {
     84c:	3a0b0b01 	bcc	2c3458 <__ccfg+0x2a34b0>
				if (__pi_uart_setrate (*((word*)buf),
     850:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     854:	0013010b 	andseq	r0, r3, fp, lsl #2
     858:	000d0c00 	andeq	r0, sp, r0, lsl #24
				syserror (EREQPAR, "uar");
     85c:	0b3a0e03 	bleq	e84070 <__ccfg+0xe640c8>
			syserror (ENOOPER, "uai");
     860:	0b390b3b 	bleq	e43554 <__ccfg+0xe235ac>
			if (len == UART_CNTRL_GETRATE) {
     864:	0b0b1349 	bleq	2c5590 <__ccfg+0x2a55e8>
				return 1;
     868:	0b0c0b0d 	bleq	3034a4 <__ccfg+0x2e34fc>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	00000b38 	andeq	r0, r0, r8, lsr fp
			syserror (ENOOPER, "uai");
     870:	03000d0d 	movweq	r0, #3341	; 0xd0d
     874:	3b0b3a0e 	blcc	2cf0b4 <__ccfg+0x2af10c>
     878:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     87c:	000b3813 	andeq	r3, fp, r3, lsl r8
     880:	00340e00 	eorseq	r0, r4, r0, lsl #28
     884:	0b3a0e03 	bleq	e84098 <__ccfg+0xe640f0>
     888:	0b390b3b 	bleq	e4357c <__ccfg+0xe235d4>
     88c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 770 <reinit_uart+0x24>
     890:	00000c3c 	andeq	r0, r0, ip, lsr ip
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
void UART0IntHandler () {
     898:	00130113 	andseq	r0, r3, r3, lsl r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	00211000 	eoreq	r1, r1, r0
     8a0:	16110000 	ldrne	r0, [r1], -r0
     8a4:	3a0e0300 	bcc	3814ac <__ccfg+0x361504>
     8a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8ac:	0013490b 	andseq	r4, r3, fp, lsl #18
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	01151200 	tsteq	r5, r0, lsl #4
     8b4:	13010c27 	movwne	r0, #7207	; 0x1c27
		RISE_N_SHINE;
     8b8:	05130000 	ldreq	r0, [r3, #-0]
     8bc:	00134900 	andseq	r4, r3, r0, lsl #18
		i_trigger (devevent (UART_A, READ));
     8c0:	00341400 	eorseq	r1, r4, r0, lsl #8
     8c4:	0b3a0e03 	bleq	e840d8 <__ccfg+0xe64130>
     8c8:	0b39053b 	bleq	e41dbc <__ccfg+0xe21e14>
     8cc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 7b0 <ioreq_uart_a+0x2c>
     8d0:	00000c3c 	andeq	r0, r0, ip, lsr ip
     8d4:	0b011315 	bleq	45530 <__ccfg+0x25588>
     8d8:	3b0b3a0b 	blcc	2cf10c <__ccfg+0x2af164>
     8dc:	010b3905 	tsteq	fp, r5, lsl #18
     8e0:	16000013 			; <UNDEFINED> instruction: 0x16000013
     8e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8ec:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	00000b38 	andeq	r0, r0, r8, lsr fp
     8f4:	03011317 	movweq	r1, #4887	; 0x1317
     8f8:	3a0b0b0e 	bcc	2c3538 <__ccfg+0x2a3590>
		i_trigger (devevent (UART_A, WRITE));
     8fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	0013010b 	andseq	r0, r3, fp, lsl #2
     904:	00211800 	eoreq	r1, r1, r0, lsl #16
		RISE_N_SHINE;
     908:	0b2f1349 	bleq	bc5634 <__ccfg+0xba568c>
     90c:	15190000 	ldrne	r0, [r9, #-0]
     910:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		i_trigger (devevent (UART_A, WRITE));
     914:	00130113 	andseq	r0, r3, r3, lsl r1
     918:	00341a00 	eorseq	r1, r4, r0, lsl #20
     91c:	0b3a1347 	bleq	e85640 <__ccfg+0xe65698>
     920:	0b390b3b 	bleq	e43614 <__ccfg+0xe2366c>
     924:	00000a02 	andeq	r0, r0, r2, lsl #20
     928:	0300341b 	movweq	r3, #1051	; 0x41b
     92c:	3b0b3a0e 	blcc	2cf16c <__ccfg+0x2af1c4>
     930:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     934:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     938:	1c00000a 	stcne	0, cr0, [r0], {10}
     93c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
}
     940:	0b3b0b3a 	bleq	ec3630 <__ccfg+0xea3688>
     944:	13490b39 	movtne	r0, #39737	; 0x9b39
     948:	00000a02 	andeq	r0, r0, r2, lsl #20
     94c:	0300341d 	movweq	r3, #1053	; 0x41d
     950:	3b0b3a0e 	blcc	2cf190 <__ccfg+0x2af1e8>
void __buttons_setirq (int val) {
     954:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	000a0213 	andeq	r0, sl, r3, lsl r2
     95c:	002e1e00 	eoreq	r1, lr, r0, lsl #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     964:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     968:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	01111349 	tsteq	r1, r9, asr #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	0a400112 	beq	1000dc0 <__ccfg+0xfe0e18>
     974:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     978:	030c3f01 	movweq	r3, #52993	; 0xcf01
     97c:	3b0b3a0e 	blcc	2cf1bc <__ccfg+0x2af214>
     980:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     984:	1201110c 	andne	r1, r1, #12, 2
}
     988:	010a4001 	tsteq	sl, r1
     98c:	20000013 	andcs	r0, r0, r3, lsl r0
     990:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     994:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pinlist_setirq (int val) {
     998:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (i = 0; i < N_PINLIST; i++) {
     99c:	00000602 	andeq	r0, r0, r2, lsl #12
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a0:	00001821 	andeq	r1, r0, r1, lsr #16
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9a4:	00342200 	eorseq	r2, r4, r0, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	0b3a0803 	bleq	e829bc <__ccfg+0xe62a14>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	0b39053b 	bleq	e41ea0 <__ccfg+0xe21ef8>
     9b0:	06021349 	streq	r1, [r2], -r9, asr #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	34230000 	strtcc	r0, [r3], #-0
     9b8:	3a080300 	bcc	2015c0 <__ccfg+0x1e1618>
     9bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     9c4:	2400000a 	strcs	r0, [r0], #-10
     9c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     9cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9d0:	13490b39 	movtne	r0, #39737	; 0x9b39
void GPIOIntHandler () {
     9d4:	0a250000 	beq	9409dc <__ccfg+0x920a34>
if (buttons_int) {
     9d8:	3a0e0300 	bcc	3815e0 <__ccfg+0x361638>
     9dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	buttons_disable ();
     9e0:	0001110b 	andeq	r1, r1, fp, lsl #2
     9e4:	010b2600 	tsteq	fp, r0, lsl #12
	i_trigger ((aword)&__button_list);
     9e8:	01120111 	tsteq	r2, r1, lsl r1
     9ec:	00001301 	andeq	r1, r0, r1, lsl #6
     9f0:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
     9f4:	00130106 	andseq	r0, r3, r6, lsl #2
     9f8:	011d2800 	tsteq	sp, r0, lsl #16
     9fc:	01521331 	cmpeq	r2, r1, lsr r3
     a00:	0b580655 	bleq	160235c <__ccfg+0x15e23b4>
     a04:	0b570559 	bleq	15c1f70 <__ccfg+0x15a1fc8>
     a08:	05290000 	streq	r0, [r9, #-0]!
     a0c:	00133100 	andseq	r3, r3, r0, lsl #2
     a10:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
	RISE_N_SHINE;
     a14:	0b3a0e03 	bleq	e84228 <__ccfg+0xe64280>
     a18:	0b39053b 	bleq	e41f0c <__ccfg+0xe21f64>
     a1c:	01110c27 	tsteq	r1, r7, lsr #24
if (pin_sensor_int) {
     a20:	0a400112 	beq	1000e70 <__ccfg+0xfe0ec8>
     a24:	00001301 	andeq	r1, r0, r1, lsl #6
	i_trigger ((aword)(&__input_pins));
     a28:	0300052b 	movweq	r0, #1323	; 0x52b
     a2c:	3b0b3a08 	blcc	2cf254 <__ccfg+0x2af2ac>
     a30:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a34:	00060213 	andeq	r0, r6, r3, lsl r2
     a38:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     a3c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     a40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a44:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     a48:	01111349 	tsteq	r1, r9, asr #6
     a4c:	0a400112 	beq	1000e9c <__ccfg+0xfe0ef4>
     a50:	00001301 	andeq	r1, r0, r1, lsl #6
	__pinsen_disable_and_clear;
     a54:	0300342d 	movweq	r3, #1069	; 0x42d
	RISE_N_SHINE;
     a58:	3b0b3a0e 	blcc	2cf298 <__ccfg+0x2af2f0>
     a5c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a60:	00060213 	andeq	r0, r6, r3, lsl r2
}
     a64:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     a68:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     a6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a70:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     a74:	13010b20 	movwne	r0, #6944	; 0x1b20
void system_init () {
     a78:	052f0000 	streq	r0, [pc, #-0]!	; a80 <system_init+0x8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	3a080300 	bcc	201684 <__ccfg+0x1e16dc>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	0013490b 	andseq	r4, r3, fp, lsl #18
     a88:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
     a8c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a94:	01110b39 	tsteq	r1, r9, lsr fp
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	0a400112 	beq	1000ee8 <__ccfg+0xfe0f40>
     a9c:	00001301 	andeq	r1, r0, r1, lsl #6
     aa0:	3f012e31 	svccc	0x00012e31
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	3a08030c 	bcc	2016dc <__ccfg+0x1e1734>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab4:	010a4001 	tsteq	sl, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	32000013 	andcc	r0, r0, #19
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	08030005 	stmdaeq	r3, {r0, r2}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	13490b39 	movtne	r0, #39737	; 0x9b39
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	00000a02 	andeq	r0, r0, r2, lsl #20
     acc:	3f002e33 	svccc	0x00002e33
     ad0:	3a0e030c 	bcc	381708 <__ccfg+0x361760>
     ad4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (port_confs [i] & 0x80)
     ad8:	110c270b 	tstne	ip, fp, lsl #14
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	40011201 	andmi	r1, r1, r1, lsl #4
     ae0:	3400000a 	strcc	r0, [r0], #-10
		if (port_confs [i] & 0x40)
     ae4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     aec:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     af0:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af4:	03000535 	movweq	r0, #1333	; 0x535
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	3b0b3a0e 	blcc	2cf338 <__ccfg+0x2af390>
	all_leds_blink;
     afc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b00:	36000013 			; <UNDEFINED> instruction: 0x36000013
     b04:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     b08:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     b0c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     b10:	3b0b3a0e 	blcc	2cf350 <__ccfg+0x2af3a8>
     b14:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	010b200c 	tsteq	fp, ip
     b1c:	38000013 	stmdacc	r0, {r0, r1, r4}
     b20:	08030005 	stmdaeq	r3, {r0, r2}
     b24:	0b3b0b3a 	bleq	ec3814 <__ccfg+0xea386c>
     b28:	13490b39 	movtne	r0, #39737	; 0x9b39
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2c:	05390000 	ldreq	r0, [r9, #-0]!
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	3a0e0300 	bcc	381738 <__ccfg+0x361790>
     b34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	IntEnable (INT_AON_RTC_COMB);
     b38:	0013490b 	andseq	r4, r3, fp, lsl #18
     b3c:	00343a00 	eorseq	r3, r4, r0, lsl #20
     b40:	0b3a0803 	bleq	e82b54 <__ccfg+0xe62bac>
	__pi_malloc_init ();
     b44:	0b390b3b 	bleq	e43838 <__ccfg+0xe23890>
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	00001349 	andeq	r1, r0, r9, asr #6
     b4c:	03000a3b 	movweq	r0, #2619	; 0xa3b
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	3b0b3a08 	blcc	2cf378 <__ccfg+0x2af3d0>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	000b3905 	andeq	r3, fp, r5, lsl #18
     b58:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     b5c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	0b3b0b3a 	bleq	ec3850 <__ccfg+0xea38a8>
     b64:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	01120111 	tsteq	r2, r1, lsl r1
     b6c:	13010a40 	movwne	r0, #6720	; 0x1a40
     b70:	053d0000 	ldreq	r0, [sp, #-0]!
	urates [0] = UART_RATE / 100;
     b74:	3a080300 	bcc	20177c <__ccfg+0x1e17d4>
     b78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	reinit_uart ();
     b7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	EXTRA_INITIALIZERS;
     b80:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
     b84:	08030034 	stmdaeq	r3, {r2, r4, r5}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b88:	0b3b0b3a 	bleq	ec3878 <__ccfg+0xea38d0>
     b8c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b90:	00000602 	andeq	r0, r0, r2, lsl #12
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	3f002e3f 	svccc	0x00002e3f
     b98:	3a0e030c 	bcc	3817d0 <__ccfg+0x361828>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba0:	110c270b 	tstne	ip, fp, lsl #14
			devinit [i] . init (devinit [i] . param);
     ba4:	40011201 	andmi	r1, r1, r1, lsl #4
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	4000000a 	andmi	r0, r0, sl
     bac:	0e03012e 	adfeqsp	f0, f3, #0.5
     bb0:	0b3b0b3a 	bleq	ec38a0 <__ccfg+0xea38f8>
	IntEnable (INT_UART0_COMB);
     bb4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     bb8:	0b201349 	bleq	8058e4 <__ccfg+0x7e593c>
}
     bbc:	00001301 	andeq	r1, r0, r1, lsl #6
	tci_run_auxiliary_timer ();
     bc0:	03012e41 	movweq	r2, #7745	; 0x1e41
		diag ("");
     bc4:	3b0b3a0e 	blcc	2cf404 <__ccfg+0x2af45c>
     bc8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	2013490c 	andscs	r4, r3, ip, lsl #18
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	0013010b 	andseq	r0, r3, fp, lsl #2
		diag ("Leftover RAM: %d bytes",
     bd4:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     bd8:	01111331 	tsteq	r1, r1, lsr r3
     bdc:	0a400112 	beq	100102c <__ccfg+0xfe1084>
     be0:	00001301 	andeq	r1, r0, r1, lsl #6
     be4:	31000543 	tstcc	r0, r3, asr #10
     be8:	00060213 	andeq	r0, r6, r3, lsl r2
     bec:	00344400 	eorseq	r4, r4, r0, lsl #8
     bf0:	06021331 			; <UNDEFINED> instruction: 0x06021331
     bf4:	1d450000 	stclne	0, cr0, [r5, #-0]
     bf8:	11133101 	tstne	r3, r1, lsl #2
     bfc:	58011201 	stmdapl	r1, {r0, r9, ip}
     c00:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     c04:	4600000b 	strmi	r0, [r0], -fp
     c08:	13310034 	teqne	r1, #52	; 0x34
     c0c:	1d470000 	stclne	0, cr0, [r7, #-0]
     c10:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     c14:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     c18:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     c1c:	4800000b 	stmdami	r0, {r0, r1, r3}
     c20:	1331000a 	teqne	r1, #10
     c24:	00000111 	andeq	r0, r0, r1, lsl r1
     c28:	31011d49 	tstcc	r1, r9, asr #26
     c2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
__attribute__ ((noreturn)) void __pi_release () {
     c30:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     c34:	000b5705 	andeq	r5, fp, r5, lsl #14
     c38:	012e4a00 			; <UNDEFINED> instruction: 0x012e4a00
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	01111331 	tsteq	r1, r1, lsr r3
	check_stack_overflow;
     c40:	0a400112 	beq	1001090 <__ccfg+0xfe10e8>
     c44:	01000000 	mrseq	r0, (UNDEF: 0)
     c48:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	update_n_wake (MAX_WORD, NO);
     c4c:	0e030b13 	vmoveq.32	d3[0], r0
     c50:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     c54:	06100111 			; <UNDEFINED> instruction: 0x06100111
	for_all_tasks (__pi_curr) {
     c58:	24020000 	strcs	r0, [r2], #-0
     c5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     c60:	000e030b 	andeq	r0, lr, fp, lsl #6
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	00160300 	andseq	r0, r6, r0, lsl #6
	__SLEEP;
     c68:	0b3a0e03 	bleq	e8447c <__ccfg+0xe644d4>
     c6c:	0b390b3b 	bleq	e43960 <__ccfg+0xe239b8>
     c70:	00001349 	andeq	r1, r0, r9, asr #6
     c74:	0b002404 	bleq	9c8c <__exidx_end+0x6e10>
	system_event_count ++;
     c78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c7c:	05000008 	streq	r0, [r0, #-8]
	switch (__pi_systat.effpdm) {
     c80:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     c84:	0b3a0b0b 	bleq	e838b8 <__ccfg+0xe63910>
     c88:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c8c:	0d060000 	stceq	0, cr0, [r6, #-0]
			__WFI ();
     c90:	490e0300 	stmdbmi	lr, {r8, r9}
     c94:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     c98:	0700000c 	streq	r0, [r0, -ip]
	check_stack_overflow;
     c9c:	0b0b000f 	bleq	2c0ce0 <__ccfg+0x2a0d38>
     ca0:	26080000 	strcs	r0, [r8], -r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	00134900 	andseq	r4, r3, r0, lsl #18
     ca8:	00350900 	eorseq	r0, r5, r0, lsl #18
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	00001349 	andeq	r1, r0, r9, asr #6
			goto Redo;
     cb0:	0b000f0a 	bleq	48e0 <__exidx_end+0x1a64>
	for_all_tasks (__pi_curr) {
     cb4:	0013490b 	andseq	r4, r3, fp, lsl #18
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	01130b00 	tsteq	r3, r0, lsl #22
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	0b3a0b0b 	bleq	e838f0 <__ccfg+0xe63948>
     cc0:	0b390b3b 	bleq	e439b4 <__ccfg+0xe23a0c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc4:	00001301 	andeq	r1, r0, r1, lsl #6
     cc8:	03000d0c 	movweq	r0, #3340	; 0xd0c
     ccc:	3b0b3a0e 	blcc	2cf50c <__ccfg+0x2af564>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cd4:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     cdc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
			__WFI ();
     ce0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce4:	0b3b0b3a 	bleq	ec39d4 <__ccfg+0xea3a2c>
     ce8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     cec:	00000b38 	andeq	r0, r0, r8, lsr fp
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cf0:	0300340e 	movweq	r3, #1038	; 0x40e
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf4:	3b0b3a0e 	blcc	2cf534 <__ccfg+0x2af58c>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cfc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d00:	0f00000c 	svceq	0x0000000c
     d04:	13490101 	movtne	r0, #37121	; 0x9101
     d08:	00001301 	andeq	r1, r0, r1, lsl #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0c:	00002110 	andeq	r2, r0, r0, lsl r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	00161100 	andseq	r1, r6, r0, lsl #2
     d14:	0b3a0e03 	bleq	e84528 <__ccfg+0xe64580>
     d18:	0b39053b 	bleq	e4220c <__ccfg+0xe22264>
     d1c:	00001349 	andeq	r1, r0, r9, asr #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	27011512 	smladcs	r1, r2, r5, r1
     d24:	0013010c 	andseq	r0, r3, ip, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	00051300 	andeq	r1, r5, r0, lsl #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	00001349 	andeq	r1, r0, r9, asr #6
     d30:	03003414 	movweq	r3, #1044	; 0x414
     d34:	3b0b3a0e 	blcc	2cf574 <__ccfg+0x2af5cc>
     d38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     d3c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			SysCtrlSetRechargeBeforePowerDown
     d40:	1500000c 	strne	r0, [r0, #-12]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d44:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	13011349 	movwne	r1, #4937	; 0x1349
     d4c:	13160000 	tstne	r6, #0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	0b0e0301 	bleq	38195c <__ccfg+0x3619b4>
     d54:	3b0b3a0b 	blcc	2cf588 <__ccfg+0x2af5e0>
     d58:	010b390b 	tsteq	fp, fp, lsl #18
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5c:	17000013 	smladne	r0, r3, r0, r0
     d60:	0b0b0117 	bleq	2c11c4 <__ccfg+0x2a121c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	0b3b0b3a 	bleq	ec3a54 <__ccfg+0xea3aac>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	13010b39 	movwne	r0, #6969	; 0x1b39
     d6c:	0d180000 	ldceq	0, cr0, [r8, #-0]
     d70:	3a0e0300 	bcc	381978 <__ccfg+0x3619d0>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (!(AONWUCPowerStatusGet () &
     d78:	0013490b 	andseq	r4, r3, fp, lsl #18
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	000d1900 	andeq	r1, sp, r0, lsl #18
     d80:	0b3a0803 	bleq	e82d94 <__ccfg+0xe62dec>
     d84:	0b390b3b 	bleq	e43a78 <__ccfg+0xe23ad0>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	00001349 	andeq	r1, r0, r9, asr #6
     d8c:	03000d1a 	movweq	r0, #3354	; 0xd1a
     d90:	3b0b3a08 	blcc	2cf5b8 <__ccfg+0x2af610>
     d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	000b3813 	andeq	r3, fp, r3, lsl r8
     d9c:	01131b00 	tsteq	r3, r0, lsl #22
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     da0:	0b3a0b0b 	bleq	e839d4 <__ccfg+0xe63a2c>
     da4:	0b39053b 	bleq	e42298 <__ccfg+0xe222f0>
			SysCtrlAdjustRechargeAfterPowerDown ();
     da8:	00001301 	andeq	r1, r0, r1, lsl #6
			reinit_uart ();
     dac:	03000d1c 	movweq	r0, #3356	; 0xd1c
     db0:	3b0b3a0e 	blcc	2cf5f0 <__ccfg+0x2af648>
     db4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     db8:	000b3813 	andeq	r3, fp, r3, lsl r8
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dbc:	01131d00 	tsteq	r3, r0, lsl #26
     dc0:	0b0b0e03 	bleq	2c45d4 <__ccfg+0x2a462c>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     dc8:	13010b39 	movwne	r0, #6969	; 0x1b39
     dcc:	211e0000 	tstcs	lr, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	2f134900 	svccs	0x00134900
     dd4:	1f00000b 	svcne	0x0000000b
     dd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ddc:	0b3b0b3a 	bleq	ec3acc <__ccfg+0xea3b24>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	00000a02 	andeq	r0, r0, r2, lsl #20
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	3f002e20 	svccc	0x00002e20
     dec:	3a0e030c 	bcc	381a24 <__ccfg+0x361a7c>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df4:	110c270b 	tstne	ip, fp, lsl #14
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	40011201 	andmi	r1, r1, r1, lsl #4
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	2100000a 	tstcs	r0, sl
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e00:	0c3f012e 	ldfeqs	f0, [pc], #-184	; d50 <__pi_release+0x120>
     e04:	0b3a0e03 	bleq	e84618 <__ccfg+0xe64670>
			PRCMPowerDomainOff (
     e08:	0b39053b 	bleq	e422fc <__ccfg+0xe22354>
     e0c:	13490c27 	movtne	r0, #39975	; 0x9c27
	__SLEEP;
     e10:	01120111 	tsteq	r2, r1, lsl r1
     e14:	13010a40 	movwne	r0, #6720	; 0x1a40
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	05220000 	streq	r0, [r2, #-0]!
	goto Redo;
     e1c:	3a080300 	bcc	201a24 <__ccfg+0x1e1a7c>
     e20:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e28:	23000006 	movwcs	r0, #6
     e2c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     e30:	06550152 			; <UNDEFINED> instruction: 0x06550152
     e34:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     e38:	00000b57 	andeq	r0, r0, r7, asr fp
     e3c:	31000524 	tstcc	r0, r4, lsr #10
     e40:	00060213 	andeq	r0, r6, r3, lsl r2
     e44:	010b2500 	tsteq	fp, r0, lsl #10
     e48:	00000655 	andeq	r0, r0, r5, asr r6
     e4c:	31003426 	tstcc	r0, r6, lsr #8
     e50:	00060213 	andeq	r0, r6, r3, lsl r2
     e54:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     e58:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e60:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     e64:	01120111 	tsteq	r2, r1, lsl r1
     e68:	13010a40 	movwne	r0, #6720	; 0x1a40
     e6c:	34280000 	strtcc	r0, [r8], #-0
     e70:	3a080300 	bcc	201a78 <__ccfg+0x1e1ad0>
     e74:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e7c:	29000006 	stmdbcs	r0, {r1, r2}
     e80:	08030034 	stmdaeq	r3, {r2, r4, r5}
     e84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
int main (void) {
     e88:	13490b39 	movtne	r0, #39737	; 0x9b39
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	342a0000 	strtcc	r0, [sl], #-0
     e90:	3a080300 	bcc	201a98 <__ccfg+0x1e1af0>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	system_init ();
     e9c:	2b00000a 	blcs	ecc <main+0x44>
	tcv_init ();
     ea0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ea8:	13490b39 	movtne	r0, #39737	; 0x9b39
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	00000602 	andeq	r0, r0, r2, lsl #12
     eb0:	3f012e2c 	svccc	0x00012e2c
     eb4:	3a0e030c 	bcc	381aec <__ccfg+0x361b44>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ebc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	delay (16, 0);
     ec0:	010b2013 	tsteq	fp, r3, lsl r0
     ec4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     ec8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	__pi_release ();
     ecc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ed0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ed4:	052e0000 	streq	r0, [lr, #-0]!
     ed8:	3a080300 	bcc	201ae0 <__ccfg+0x1e1b38>
     edc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee0:	0013490b 	andseq	r4, r3, fp, lsl #18
     ee4:	010b2f00 	tsteq	fp, r0, lsl #30
static void killev (__pi_pcb_t *pid) {
     ee8:	01120111 	tsteq	r2, r1, lsl r1
	wfun = (aword)(pid->code);
     eec:	34300000 	ldrtcc	r0, [r0], #-0
	for_all_tasks (i) {
     ef0:	3a0e0300 	bcc	381af8 <__ccfg+0x361b50>
		for (j = 0; j < nevents (i); j++) {
     ef4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ef8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     efc:	3100000a 	tstcc	r0, sl
			    || i->Events [j] . Event == wfun
     f00:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		for (j = 0; j < nevents (i); j++) {
     f04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (i->Events [j] . Event == (aword)pid
     f08:	01110b39 	tsteq	r1, r9, lsr fp
     f0c:	1d320000 	ldcne	0, cr0, [r2, #-0]
     f10:	11133101 	tstne	r3, r1, lsl #2
				wakeupev (i, j);
     f14:	58011201 	stmdapl	r1, {r0, r9, ip}
     f18:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	for_all_tasks (i) {
     f1c:	3300000b 	movwcc	r0, #11
}
     f20:	13310005 	teqne	r1, #5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	05340000 	ldreq	r0, [r4, #-0]!
static void qfree (aword *ch) {
     f28:	3a080300 	bcc	201b30 <__ccfg+0x1e1b88>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	cc = (aword*)(mpools + MA_NP);
     f30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	m_setnextp (ch, chunk);
     f34:	3500000a 	strcc	r0, [r0, #-10]
	m_setnextp (cc, ch);
     f38:	00000018 	andeq	r0, r0, r8, lsl r0
}
     f3c:	03003436 	movweq	r3, #1078	; 0x436
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f40:	3b0b3a0e 	blcc	2cf780 <__ccfg+0x2af7d8>
     f44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f48:	37000013 	smladcc	r0, r3, r0, r0
			m_setnextp (cc, m_nextp (chunk));
     f4c:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f54:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f58:	01111349 	tsteq	r1, r9, asr #6
     f5c:	0a400112 	beq	10013ac <__ccfg+0xfe1404>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	00001301 	andeq	r1, r0, r1, lsl #6
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	03012e38 	movweq	r2, #7736	; 0x1e38
     f68:	3b0b3a08 	blcc	2cf790 <__ccfg+0x2af7e8>
     f6c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			m_setnextp (cc, m_nextp (chunk));
     f70:	1201110c 	andne	r1, r1, #12, 2
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	010a4001 	tsteq	sl, r1
     f78:	39000013 	stmdbcc	r0, {r0, r1, r4}
     f7c:	0e03012e 	adfeqsp	f0, f3, #0.5
     f80:	0b3b0b3a 	bleq	ec3c70 <__ccfg+0xea3cc8>
     f84:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f88:	13010b20 	movwne	r0, #6944	; 0x1b20
			if (m_size (chunk) >= m_size (ch))
     f8c:	053a0000 	ldreq	r0, [sl, #-0]!
     f90:	3a080300 	bcc	201b98 <__ccfg+0x1e1bf0>
     f94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		chunk = m_nextp (chunk))
     f98:	0013490b 	andseq	r4, r3, fp, lsl #18
     f9c:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
     fa0:	0b3a0e03 	bleq	e847b4 <__ccfg+0xe6480c>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	0b390b3b 	bleq	e43c98 <__ccfg+0xe23cf0>
	diag_wait (a);
     fa8:	13490c27 	movtne	r0, #39975	; 0x9c27
	diag_wchar (c, a);
     fac:	13010b20 	movwne	r0, #6944	; 0x1b20
     fb0:	343c0000 	ldrtcc	r0, [ip], #-0
}
     fb4:	3a080300 	bcc	201bbc <__ccfg+0x1e1c14>
     fb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	syserror (ESTATE, "state");
     fbc:	0013490b 	andseq	r4, r3, fp, lsl #18
     fc0:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
     fc4:	0b3a0803 	bleq	e82fd8 <__ccfg+0xe63030>
     fc8:	0b390b3b 	bleq	e43cbc <__ccfg+0xe23d14>
void update_n_wake (word min, Boolean force) {
     fcc:	0b200c27 	bleq	804070 <__ccfg+0x7e40c8>
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	00001301 	andeq	r1, r0, r1, lsl #6
     fd4:	31012e3e 	tstcc	r1, lr, lsr lr
     fd8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fdc:	010a4001 	tsteq	sl, r1
     fe0:	3f000013 	svccc	0x00000013
     fe4:	13310005 	teqne	r1, #5
     fe8:	00000a02 	andeq	r0, r0, r2, lsl #20
     fec:	31011d40 	tstcc	r1, r0, asr #26
     ff0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ff4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     ff8:	000b570b 	andeq	r5, fp, fp, lsl #14
     ffc:	011d4100 	tsteq	sp, r0, lsl #2
    1000:	01521331 	cmpeq	r2, r1, lsr r3
    1004:	0b580655 	bleq	1602960 <__ccfg+0x15e29b8>
    1008:	0b570b59 	bleq	15c3d74 <__ccfg+0x15a3dcc>
    100c:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
		for_all_tasks (i) {
    1010:	11133101 	tstne	r3, r1, lsl #2
	__pi_mintk = znew + min;
    1014:	40011201 	andmi	r1, r1, r1, lsl #4
    1018:	4300000a 	movwmi	r0, #10
			if (!twaiting (i))
    101c:	13310034 	teqne	r1, #52	; 0x34
    1020:	01000000 	mrseq	r0, (UNDEF: 0)
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1024:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1028:	0e030b13 	vmoveq.32	d3[0], r0
    102c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1030:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1034:	24020000 	strcs	r0, [r2], #-0
    1038:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    103c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1040:	00160300 	andseq	r0, r6, r0, lsl #6
    1044:	0b3a0e03 	bleq	e84858 <__ccfg+0xe648b0>
    1048:	0b390b3b 	bleq	e43d3c <__ccfg+0xe23d94>
    104c:	00001349 	andeq	r1, r0, r9, asr #6
    1050:	0b002404 	bleq	a068 <__exidx_end+0x71ec>
				wakeuptm (i);
    1054:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1058:	05000008 	streq	r0, [r0, #-8]
		for_all_tasks (i) {
    105c:	0b0b000f 	bleq	2c10a0 <__ccfg+0x2a10f8>
				d = i->Timer - znew;
    1060:	00001349 	andeq	r1, r0, r9, asr #6
    1064:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    1068:	07000013 	smladeq	r0, r3, r0, r0
		if ((word)(__pi_mintk - znew) < min) 
    106c:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
    1070:	34080000 	strcc	r0, [r8], #-0
    1074:	3a0e0300 	bcc	381c7c <__ccfg+0x361cd4>
	__pi_old = znew;
    1078:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    107c:	3f13490b 	svccc	0x0013490b
	TCI_RUN_DELAY_TIMER;
    1080:	000c3c0c 	andeq	r3, ip, ip, lsl #24
}
    1084:	01010900 	tsteq	r1, r0, lsl #18
    1088:	13011349 	movwne	r1, #4937	; 0x1349
    108c:	210a0000 	mrscs	r0, (UNDEF: 10)
    1090:	2f134900 	svccs	0x00134900
    1094:	0b00000b 	bleq	10c8 <__pi_wait+0x1c>
void proceed (word state) {
    1098:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	prcdstate (__pi_curr, state);
    109c:	0b3b0b3a 	bleq	ec3d8c <__ccfg+0xea3de4>
    10a0:	13490b39 	movtne	r0, #39737	; 0x9b39
	release;
    10a4:	0a020c3f 	beq	841a8 <__ccfg+0x64200>
    10a8:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
void __pi_wait (aword event, word state) {
    10ac:	3a0e0300 	bcc	381cb4 <__ccfg+0x361d0c>
	sint j = nevents (__pi_curr);
    10b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	110c270b 	tstne	ip, fp, lsl #14
    10b8:	40011201 	andmi	r1, r1, r1, lsl #4
    10bc:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
		syserror (ENEVENTS, "sw");
    10c0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1010 <update_n_wake+0x44>
    10c4:	0b3a0e03 	bleq	e848d8 <__ccfg+0xe64930>
	setestate (__pi_curr->Events [j], state, event);
    10c8:	0b390b3b 	bleq	e43dbc <__ccfg+0xe23e14>
	incwait (__pi_curr);
    10cc:	01110c27 	tsteq	r1, r7, lsr #24
	setestate (__pi_curr->Events [j], state, event);
    10d0:	0a400112 	beq	1001520 <__ccfg+0xfe1578>
}
    10d4:	340e0000 	strcc	r0, [lr], #-0
    10d8:	3a0e0300 	bcc	381ce0 <__ccfg+0x361d38>
    10dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pi_trigger (aword event) {
    10e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	for_all_tasks (i) {
    10e4:	00000006 	andeq	r0, r0, r6
		for (j = 0; j < nevents (i); j++) {
    10e8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    10ec:	030b130e 	movweq	r1, #45838	; 0xb30e
    10f0:	100e1b0e 	andne	r1, lr, lr, lsl #22
    10f4:	02000006 	andeq	r0, r0, #6
			if (i->Events [j] . Event == event) {
    10f8:	0b0b0024 	bleq	2c1190 <__ccfg+0x2a11e8>
    10fc:	0e030b3e 	vmoveq.16	d3[0], r0
    1100:	16030000 	strne	r0, [r3], -r0
				wakeupev (i, j);
    1104:	3a0e0300 	bcc	381d0c <__ccfg+0x361d64>
    1108:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i) {
    110c:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    1110:	00240400 	eoreq	r0, r4, r0, lsl #8
aword __pi_join (aword pid, word st) {
    1114:	0b3e0b0b 	bleq	f83d48 <__ccfg+0xf63da0>
	for_all_tasks (i) {
    1118:	00000803 	andeq	r0, r0, r3, lsl #16
    111c:	0b011305 	bleq	45d38 <__ccfg+0x25d90>
	return 0;
    1120:	3b0b3a0b 	blcc	2cf954 <__ccfg+0x2af9ac>
		if ((aword)i == pid) {
    1124:	010b390b 	tsteq	fp, fp, lsl #18
			__pi_wait (pid, st);
    1128:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
    112c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	for_all_tasks (i) {
    1130:	0b3b0b3a 	bleq	ec3e20 <__ccfg+0xea3e78>
    1134:	13490b39 	movtne	r0, #39737	; 0x9b39
void delay (word d, word state) {
    1138:	00000b38 	andeq	r0, r0, r8, lsr fp
	settstate (__pi_curr, state);
    113c:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    1140:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1148:	0b3b0b3a 	bleq	ec3e38 <__ccfg+0xea3e90>
	update_n_wake (d, YES);
    114c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1150:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	__pi_curr->Timer = __pi_old + d;
    1154:	35090000 	strcc	r0, [r9, #-0]
    1158:	00134900 	andseq	r4, r3, r0, lsl #18
	inctimer (__pi_curr);
    115c:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1160:	0b3a0e03 	bleq	e84974 <__ccfg+0xe649cc>
    1164:	0b390b3b 	bleq	e43e58 <__ccfg+0xe23eb0>
}
    1168:	0b0b1349 	bleq	2c5e94 <__ccfg+0x2a5eec>
    116c:	0b0c0b0d 	bleq	303da8 <__ccfg+0x2e3e00>
	if (fun == NULL)
    1170:	00000b38 	andeq	r0, r0, r8, lsr fp
		return (int) __pi_curr;
    1174:	0b000f0b 	bleq	4da8 <__exidx_end+0x1f2c>
    1178:	0013490b 	andseq	r4, r3, fp, lsl #18
	for_all_tasks (i)
    117c:	01010c00 	tsteq	r1, r0, lsl #24
}
    1180:	13011349 	movwne	r1, #4937	; 0x1349
		if (i->code == fun)
    1184:	210d0000 	mrscs	r0, (UNDEF: 13)
	for_all_tasks (i)
    1188:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    118c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1190:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
int __pi_strlen (const char *s) {
    1194:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	150f0000 	strne	r0, [pc, #-0]	; 11a0 <__pi_strlen+0xc>
}
    119c:	010c2701 	tsteq	ip, r1, lsl #14
	for (i = 0; *(s+i) != '\0'; i++);
    11a0:	10000013 	andne	r0, r0, r3, lsl r0
	while (n--)
    11a4:	13490005 	movtne	r0, #36869	; 0x9005
    11a8:	34110000 	ldrcc	r0, [r1], #-0
		*dest++ = *src++;
    11ac:	3a0e0300 	bcc	381db4 <__ccfg+0x361e0c>
    11b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11b4:	3f13490b 	svccc	0x0013490b
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		syserror (EREQPAR, "addv");
    11bc:	01131200 	tsteq	r3, r0, lsl #4
		syserror (ERESOURCE, "addv");
    11c0:	0b3a0b0b 	bleq	e83df4 <__ccfg+0xe63e4c>
	if (ioreq [loc] != NULL)
    11c4:	0b39053b 	bleq	e426b8 <__ccfg+0xe22710>
    11c8:	00001301 	andeq	r1, r0, r1, lsl #6
		syserror (ERESOURCE, "addv");
    11cc:	03000d13 	movweq	r0, #3347	; 0xd13
	ioreq [loc] = rf;
    11d0:	3b0b3a0e 	blcc	2cfa10 <__ccfg+0x2afa68>
}
    11d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    11d8:	000b3813 	andeq	r3, fp, r3, lsl r8
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	01131400 	tsteq	r3, r0, lsl #8
    11e0:	0b0b0e03 	bleq	2c49f4 <__ccfg+0x2a4a4c>
    11e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11e8:	13010b39 	movwne	r0, #6969	; 0x1b39
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ec:	21150000 	tstcs	r5, r0
    11f0:	2f134900 	svccs	0x00134900
    11f4:	1600000b 	strne	r0, [r0], -fp
		syserror (ENODEVICE, "io");
    11f8:	13470034 	movtne	r0, #28724	; 0x7034
    11fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (len == 0)
    1200:	0a020b39 	beq	83eec <__ccfg+0x63f44>
	ret = (ioreq [dev]) (operation, buf, len);
    1204:	01000000 	mrseq	r0, (UNDEF: 0)
    1208:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	if (ret >= 0)
    120c:	0e030b13 	vmoveq.32	d3[0], r0
	if (ret == -1) {
    1210:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1214:	06100111 			; <UNDEFINED> instruction: 0x06100111
		if (retry == WNONE)
    1218:	24020000 	strcs	r0, [r2], #-0
		iowait (dev, operation, retry);
    121c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1220:	000e030b 	andeq	r0, lr, fp, lsl #6
    1224:	00160300 	andseq	r0, r6, r0, lsl #6
			release;
    1228:	0b3a0e03 	bleq	e84a3c <__ccfg+0xe64a94>
	if (ret == -2) {
    122c:	0b390b3b 	bleq	e43f20 <__ccfg+0xe23f78>
		if (retry != WNONE) {
    1230:	00001349 	andeq	r1, r0, r9, asr #6
    1234:	0b002404 	bleq	a24c <__exidx_end+0x73d0>
			iowait (dev, operation, retry);
    1238:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    123c:	05000008 	streq	r0, [r0, #-8]
			(ioreq [dev]) (NONE, buf, len);
    1240:	13490026 	movtne	r0, #36902	; 0x9026
    1244:	35060000 	strcc	r0, [r6, #-0]
    1248:	00134900 	andseq	r4, r3, r0, lsl #18
		(ioreq [dev]) (NONE, buf, len);
    124c:	000f0700 	andeq	r0, pc, r0, lsl #14
    1250:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1254:	13080000 	movwne	r0, #32768	; 0x8000
}
    1258:	3a0b0b01 	bcc	2c3e64 <__ccfg+0x2a3ebc>
	if (retry != WNONE) {
    125c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		delay (-ret - 2, retry);
    1260:	0013010b 	andseq	r0, r3, fp, lsl #2
    1264:	000d0900 	andeq	r0, sp, r0, lsl #18
    1268:	0b3a0e03 	bleq	e84a7c <__ccfg+0xe64ad4>
    126c:	0b390b3b 	bleq	e43f60 <__ccfg+0xe23fb8>
		release;
    1270:	0b0b1349 	bleq	2c5f9c <__ccfg+0x2a5ff4>
    1274:	0b0c0b0d 	bleq	303eb0 <__ccfg+0x2e3f08>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	00000b38 	andeq	r0, r0, r8, lsr fp
    127c:	03000d0a 	movweq	r0, #3338	; 0xd0a
    1280:	3b0b3a0e 	blcc	2cfac0 <__ccfg+0x2afb18>
    1284:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1288:	000b3813 	andeq	r3, fp, r3, lsl r8
		syserror (ERESOURCE, "mal1");
    128c:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1290:	0b3a0e03 	bleq	e84aa4 <__ccfg+0xe64afc>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1294:	0b390b3b 	bleq	e43f88 <__ccfg+0xe23fe0>
    1298:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 117c <running+0xc>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a0:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a4:	00130113 	andseq	r0, r3, r3, lsl r1
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a8:	00210d00 	eoreq	r0, r1, r0, lsl #26
    12ac:	160e0000 	strne	r0, [lr], -r0
}
    12b0:	3a0e0300 	bcc	381eb8 <__ccfg+0x361f10>
    12b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    12bc:	01150f00 	tsteq	r5, r0, lsl #30
    12c0:	13010c27 	movwne	r0, #7207	; 0x1c27
    12c4:	05100000 	ldreq	r0, [r0, #-0]
void __pi_free (aword *ch) {
    12c8:	00134900 	andseq	r4, r3, r0, lsl #18
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	00341100 	eorseq	r1, r4, r0, lsl #2
    12d0:	0b3a0e03 	bleq	e84ae4 <__ccfg+0xe64b3c>
		syserror (EMALLOC, "malg");
    12d4:	0b39053b 	bleq	e427c8 <__ccfg+0xe22820>
    12d8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 11bc <adddevfunc+0x4>
	mcfree [MA_NP] += m_size (ch);
    12dc:	00000c3c 	andeq	r0, r0, ip, lsr ip
		m_size (ch) ^= MALLOC_UMASK;
    12e0:	0b011312 	bleq	45f30 <__ccfg+0x25f88>
    12e4:	3b0b3a0b 	blcc	2cfb18 <__ccfg+0x2afb70>
	mcfree [MA_NP] += m_size (ch);
    12e8:	010b3905 	tsteq	fp, r5, lsl #18
	QFREE;
    12ec:	13000013 	movwne	r0, #19
	if (mevent [MA_NP] . nwait) {
    12f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    12f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		trigger ((aword)(&(mevent [MA_NP])));
    12f8:	13490b39 	movtne	r0, #39737	; 0x9b39
		mevent [MA_NP] . nwait --;
    12fc:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    1300:	03011314 	movweq	r1, #4884	; 0x1314
    1304:	3a0b0b0e 	bcc	2c3f44 <__ccfg+0x2a3f9c>
    1308:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    130c:	0013010b 	andseq	r0, r3, fp, lsl #2
void kill (aword pid) {
    1310:	00211500 	eoreq	r1, r1, r0, lsl #10
		pid = (aword) __pi_curr;
    1314:	0b2f1349 	bleq	bc6040 <__ccfg+0xba6098>
	j = NULL;
    1318:	34160000 	ldrcc	r0, [r6], #-0
	for_all_tasks (i) {
    131c:	3a134700 	bcc	4d2f24 <__ccfg+0x4b2f7c>
	syserror (EREQPAR, "kpi");
    1320:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1324:	000a020b 	andeq	r0, sl, fp, lsl #4
		if ((aword)i == pid) {
    1328:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    132c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				__PCB = i->Next;
    1330:	0b3b0b3a 	bleq	ec4020 <__ccfg+0xea4078>
			killev (i);
    1334:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			ufree (i);
    1338:	01120111 	tsteq	r2, r1, lsl r1
			if (i == __pi_curr)
    133c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1340:	05180000 	ldreq	r0, [r8, #-0]
				release;
    1344:	3a080300 	bcc	201f4c <__ccfg+0x1e1fa4>
				j->Next = i->Next;
    1348:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    134c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1350:	19000006 	stmdbne	r0, {r1, r2}
}
    1354:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1358:	0b3b0b3a 	bleq	ec4048 <__ccfg+0xea40a0>
    135c:	13490b39 	movtne	r0, #39737	; 0x9b39
void killall (fsmcode fun) {
    1360:	00000602 	andeq	r0, r0, r2, lsl #12
	j = NULL;
    1364:	0300341a 	movweq	r3, #1050	; 0x41a
	for (i = __PCB; i != NULL; ) {
    1368:	3b0b3a08 	blcc	2cfb90 <__ccfg+0x2afbe8>
			if (i == __pi_curr)
    136c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (i = __PCB; i != NULL; ) {
    1370:	1b000013 	blne	13c4 <__pi_malloc+0xc>
	if (rel)
    1374:	08030034 	stmdaeq	r3, {r2, r4, r5}
		release;
    1378:	0b3b0b3a 	bleq	ec4068 <__ccfg+0xea40c0>
		if (i->code == fun) {
    137c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1380:	00000602 	andeq	r0, r0, r2, lsl #12
			if (j == NULL)
    1384:	31001d1c 	tstcc	r0, ip, lsl sp
				__PCB = k;
    1388:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			if (i == __pi_curr)
    138c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
				rel = YES;
    1390:	000b570b 	andeq	r5, fp, fp, lsl #14
			killev (i);
    1394:	011d1d00 	tsteq	sp, r0, lsl #26
			ufree (i);
    1398:	01521331 	cmpeq	r2, r1, lsr r3
			i = k;
    139c:	0b580655 	bleq	1602cf8 <__ccfg+0x15e2d50>
    13a0:	0b570b59 	bleq	15c410c <__ccfg+0x15a4164>
				j->Next = k;
    13a4:	051e0000 	ldreq	r0, [lr, #-0]
    13a8:	02133100 	andseq	r3, r3, #0, 2
}
    13ac:	1f000006 	svcne	0x00000006
    13b0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1300 <__pi_free+0x38>
    13b4:	0b3a0e03 	bleq	e84bc8 <__ccfg+0xe64c20>
	if (size < 8)
    13b8:	0b390b3b 	bleq	e440ac <__ccfg+0xe24104>
		_size = 2;
    13bc:	01120111 	tsteq	r2, r1, lsl r1
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c0:	00000a40 	andeq	r0, r0, r0, asr #20
		_size = (((aword)size) + 3) >> 2;
    13c4:	03002e20 	movweq	r2, #3616	; 0xe20
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	3b0b3a0e 	blcc	2cfc08 <__ccfg+0x2afc60>
		_size = (((aword)size) + 3) >> 2;
    13cc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		if (mevent [MA_NP] . nfail != 255)
    13d0:	000b200c 	andeq	r2, fp, ip
    13d4:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
			mevent [MA_NP] . nfail ++;
    13d8:	0b3a0e03 	bleq	e84bec <__ccfg+0xe64c44>
		mnfree [MA_NP] = 0;
    13dc:	0b390b3b 	bleq	e440d0 <__ccfg+0xe24128>
    13e0:	13490c27 	movtne	r0, #39975	; 0x9c27
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	00000b20 	andeq	r0, r0, r0, lsr #22
    13e8:	03000522 	movweq	r0, #1314	; 0x522
			syserror (EMALLOC, "malc");
    13ec:	3b0b3a0e 	blcc	2cfc2c <__ccfg+0x2afc84>
    13f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (m_size (chunk) >= _size)
    13f4:	00000013 	andeq	r0, r0, r3, lsl r0
    13f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
		chunk = m_nextp (chunk)) {
    13fc:	030b130e 	movweq	r1, #45838	; 0xb30e
		m_setnextp (cc, m_nextp (chunk));
    1400:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1404:	10011106 	andne	r1, r1, r6, lsl #2
    1408:	02000006 	andeq	r0, r0, #6
			m_size (chunk) = _size;
    140c:	0b0b0024 	bleq	2c14a4 <__ccfg+0x2a14fc>
			cc = chunk + _size + m_hdrlen;
    1410:	0e030b3e 	vmoveq.16	d3[0], r0
    1414:	16030000 	strne	r0, [r3], -r0
			m_size (cc) = waste - m_hdrlen;
    1418:	3a0e0300 	bcc	382020 <__ccfg+0x362078>
			QFREE;
    141c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		mevent [MA_NP] . nfail = 0;
    1420:	0013490b 	andseq	r4, r3, fp, lsl #18
		mcfree [MA_NP] -= m_size (chunk);
    1424:	00240400 	eoreq	r0, r4, r0, lsl #8
    1428:	0b3e0b0b 	bleq	f8405c <__ccfg+0xf640b4>
    142c:	00000803 	andeq	r0, r0, r3, lsl #16
    1430:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
		m_size (chunk) |= MALLOC_UMASK;
    1434:	06000013 			; <UNDEFINED> instruction: 0x06000013
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1438:	13490035 	movtne	r0, #36917	; 0x9035
		m_size (chunk) |= MALLOC_UMASK;
    143c:	13070000 	movwne	r0, #28672	; 0x7000
			mnfree [MA_NP] = mcfree [MA_NP];
    1440:	3a0b0b01 	bcc	2c404c <__ccfg+0x2a40a4>
}
    1444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1448:	0013010b 	andseq	r0, r3, fp, lsl #2
    144c:	000d0800 	andeq	r0, sp, r0, lsl #16
    1450:	0b3a0e03 	bleq	e84c64 <__ccfg+0xe64cbc>
    1454:	0b390b3b 	bleq	e44148 <__ccfg+0xe241a0>
    1458:	0b0b1349 	bleq	2c6184 <__ccfg+0x2a61dc>
    145c:	0b0c0b0d 	bleq	304098 <__ccfg+0x2e40f0>
aword __pi_fork (fsmcode func, aword data) {
    1460:	00000b38 	andeq	r0, r0, r8, lsr fp
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1464:	03000d09 	movweq	r0, #3337	; 0xd09
    1468:	3b0b3a0e 	blcc	2cfca8 <__ccfg+0x2afd00>
    146c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if ((j = __PCB) == NULL)
    1470:	000b3813 	andeq	r3, fp, r3, lsl r8
	i->Next = NULL;
    1474:	00340a00 	eorseq	r0, r4, r0, lsl #20
	i->data = data;
    1478:	0b3a0e03 	bleq	e84c8c <__ccfg+0xe64ce4>
		if ((j = __PCB) == NULL)
    147c:	0b390b3b 	bleq	e44170 <__ccfg+0xe241c8>
}
    1480:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1364 <killall+0x4>
			for (; j->Next != NULL; j = j->Next);
    1484:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1488:	0b000f0b 	bleq	50bc <__exidx_end+0x2240>
	return (aword) i;
    148c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1490:	01010c00 	tsteq	r1, r0, lsl #24
	if (mevent [MA_NP] . nwait != 255)
    1494:	13011349 	movwne	r1, #4937	; 0x1349
    1498:	210d0000 	mrscs	r0, (UNDEF: 13)
    149c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
		mevent [MA_NP] . nwait ++;
    14a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	wait ((aword)(&(mevent [MA_NP])), state);
    14a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14a8:	13490b39 	movtne	r0, #39737	; 0x9b39
void diag (const char *mess, ...) {
    14ac:	150f0000 	strne	r0, [pc, #-0]	; 14b4 <diag+0x8>
    14b0:	010c2701 	tsteq	ip, r1, lsl #14
    14b4:	10000013 	andne	r0, r0, r3, lsl r0
	diag_disable_int (a, is);
    14b8:	13490005 	movtne	r0, #36869	; 0x9005
    14bc:	34110000 	ldrcc	r0, [r1], #-0
    14c0:	3a0e0300 	bcc	3820c8 <__ccfg+0x362120>
				d = (bc == 16) ? 10000 : 1000000000;
    14c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_disable_int (a, is);
    14c8:	3f13490b 	svccc	0x0013490b
	while (*mess != '\0') {
    14cc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	dgout ('\r');
    14d0:	01131200 	tsteq	r3, r0, lsl #4
	dgout ('\n');
    14d4:	0b3a0b0b 	bleq	e84108 <__ccfg+0xe64160>
    14d8:	0b39053b 	bleq	e429cc <__ccfg+0xe22a24>
    14dc:	00001301 	andeq	r1, r0, r1, lsl #6
	diag_wait (a);
    14e0:	03000d13 	movweq	r0, #3347	; 0xd13
	diag_enable_int (a, is);
    14e4:	3b0b3a0e 	blcc	2cfd24 <__ccfg+0x2afd7c>
    14e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    14ec:	000b3813 	andeq	r3, fp, r3, lsl r8
    14f0:	01131400 	tsteq	r3, r0, lsl #8
    14f4:	0b0b0e03 	bleq	2c4d08 <__ccfg+0x2a4d60>
		if (*mess == '%') {
    14f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14fc:	13010b39 	movwne	r0, #6969	; 0x1b39
			if (*mess == 'l') {
    1500:	21150000 	tstcs	r5, r0
    1504:	2f134900 	svccs	0x00134900
				mess++;
    1508:	1600000b 	strne	r0, [r0], -fp
				val = va_arg (ap, lword);
    150c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				bc = 32;
    1510:	0b3b0b3a 	bleq	ec4200 <__ccfg+0xea4258>
				bc = 16;
    1514:	13490b39 	movtne	r0, #39737	; 0x9b39
			switch (*mess) {
    1518:	00000a02 	andeq	r0, r0, r2, lsl #20
    151c:	47003417 	smladmi	r0, r7, r4, r3
    1520:	3b0b3a13 	blcc	2cfd74 <__ccfg+0x2afdcc>
				dgout ('%');
    1524:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    1528:	1800000a 	stmdane	r0, {r1, r3}
				dgout (*mess);
    152c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 147c <__pi_fork+0x1c>
    1530:	0b3a0e03 	bleq	e84d44 <__ccfg+0xe64d9c>
			switch (*mess) {
    1534:	0b390b3b 	bleq	e44228 <__ccfg+0xe24280>
					v = __pi_hex_enc_table [
    1538:	01110c27 	tsteq	r1, r7, lsr #24
					i += 4;
    153c:	0a400112 	beq	100198c <__ccfg+0xfe19e4>
					(val >> (bc - i)) & 0xf];
    1540:	00001301 	andeq	r1, r0, r1, lsl #6
    1544:	03000519 	movweq	r0, #1305	; 0x519
					dgout (v);
    1548:	3b0b3a08 	blcc	2cfd70 <__ccfg+0x2afdc8>
    154c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				while (i < bc) {
    1550:	00060213 	andeq	r0, r6, r3, lsl r2
			mess++;
    1554:	00051a00 	andeq	r1, r5, r0, lsl #20
					d /= 10;
    1558:	0b3a0e03 	bleq	e84d6c <__ccfg+0xe64dc4>
				if ((val >> (bc - 1)) & 1) {
    155c:	0b390b3b 	bleq	e44250 <__ccfg+0xe242a8>
    1560:	06021349 	streq	r1, [r2], -r9, asr #6
					dgout ('-');
    1564:	0a1b0000 	beq	6c156c <__ccfg+0x6a15c4>
    1568:	3a0e0300 	bcc	382170 <__ccfg+0x3621c8>
						val |= 0xffff0000;
    156c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1570:	0001110b 	andeq	r1, r1, fp, lsl #2
    1574:	011d1c00 	tsteq	sp, r0, lsl #24
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	01521331 	cmpeq	r2, r1, lsr r3
    157c:	0b580655 	bleq	1602ed8 <__ccfg+0x15e2f30>
    1580:	0b570b59 	bleq	15c42ec <__ccfg+0x15a4344>
					v = (word) (val / d);
    1584:	00001301 	andeq	r1, r0, r1, lsl #6
					if (v || d == 1) break;
    1588:	3100051d 	tstcc	r0, sp, lsl r5
    158c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
					d /= 10;
    1590:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				d = (bc == 16) ? 10000 : 1000000000;
    1594:	06550152 			; <UNDEFINED> instruction: 0x06550152
					dgout (v + '0');
    1598:	0b590b58 	bleq	1644300 <__ccfg+0x1624358>
    159c:	00000b57 	andeq	r0, r0, r7, asr fp
    15a0:	03012e1f 	movweq	r2, #7711	; 0x1e1f
					d /= 10;
    15a4:	3b0b3a0e 	blcc	2cfde4 <__ccfg+0x2afe3c>
					val = val - (v * d);
    15a8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
					if (d == 0) break;
    15ac:	2013490c 	andscs	r4, r3, ip, lsl #18
					v = (word) (val / d);
    15b0:	2000000b 	andcs	r0, r0, fp
    15b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
				if (bc == 16)
    15b8:	0b3b0b3a 	bleq	ec42a8 <__ccfg+0xea4300>
				d = (bc == 16) ? 10000 : 1000000000;
    15bc:	13490b39 	movtne	r0, #39737	; 0x9b39
					val &= 0xffff;
    15c0:	01000000 	mrseq	r0, (UNDEF: 0)
					dgout (*s);
    15c4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
					s++;
    15c8:	0e030b13 	vmoveq.32	d3[0], r0
				while (*s != '\0') {
    15cc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    15d0:	06100111 			; <UNDEFINED> instruction: 0x06100111
			dgout (*mess++);
    15d4:	24020000 	strcs	r0, [r2], #-0
    15d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    15dc:	000e030b 	andeq	r0, lr, fp, lsl #6
    15e0:	00160300 	andseq	r0, r6, r0, lsl #6
    15e4:	0b3a0e03 	bleq	e84df8 <__ccfg+0xe64e50>
}
    15e8:	0b390b3b 	bleq	e442dc <__ccfg+0xe24334>
    while(1)
    15ec:	00001349 	andeq	r1, r0, r9, asr #6
{
    15f0:	0b002404 	bleq	a608 <__exidx_end+0x778c>
    SetupTrimDevice();
    15f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    pui32Src = &_etext;
    15f8:	05000008 	streq	r0, [r0, #-8]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15fc:	13490026 	movtne	r0, #36902	; 0x9026
    __asm("    ldr     r0, =_bss\n"
    1600:	35060000 	strcc	r0, [r6, #-0]
    1604:	00134900 	andseq	r4, r3, r0, lsl #18
    1608:	01130700 	tsteq	r3, r0, lsl #14
    160c:	0b3a0b0b 	bleq	e84240 <__ccfg+0xe64298>
    1610:	0b390b3b 	bleq	e44304 <__ccfg+0xe2435c>
   main();
    1614:	00001301 	andeq	r1, r0, r1, lsl #6
    FaultISR();
    1618:	03000d08 	movweq	r0, #3336	; 0xd08
        *pui32Dest++ = *pui32Src++;
    161c:	3b0b3a0e 	blcc	2cfe5c <__ccfg+0x2afeb4>
    1620:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1624:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1628:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    162c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1630:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1634:	0b3b0b3a 	bleq	ec4324 <__ccfg+0xea437c>
    1638:	13490b39 	movtne	r0, #39737	; 0x9b39
static byte get_byte () {
    163c:	00000b38 	andeq	r0, r0, r8, lsr fp
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1640:	0300340a 	movweq	r3, #1034	; 0x40a
    1644:	3b0b3a0e 	blcc	2cfe84 <__ccfg+0x2afedc>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1648:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    164c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		if (ee_inp)
    1650:	0b00000c 	bleq	1688 <put_byte+0x18>
			b |= 1;
    1654:	0b0b000f 	bleq	2c1698 <__ccfg+0x2a16f0>
    1658:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    165c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	for (b = 0, i = 0; i < 8; i++) {
    1660:	00130113 	andseq	r0, r3, r3, lsl r1
}
    1664:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1668:	160e0000 	strne	r0, [lr], -r0
    166c:	3a0e0300 	bcc	382274 <__ccfg+0x3622cc>
static void put_byte (byte b) {
    1670:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1674:	0013490b 	andseq	r4, r3, fp, lsl #18
    1678:	01150f00 	tsteq	r5, r0, lsl #30
    167c:	13010c27 	movwne	r0, #7207	; 0x1c27
		if (b & 0x80)
    1680:	05100000 	ldreq	r0, [r0, #-0]
    1684:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1688:	00341100 	eorseq	r1, r4, r0, lsl #2
	for (i = 0; i < 8; i++) {
    168c:	0b3a0e03 	bleq	e84ea0 <__ccfg+0xe64ef8>
		b <<= 1;
    1690:	0b39053b 	bleq	e42b84 <__ccfg+0xe22bdc>
	for (i = 0; i < 8; i++) {
    1694:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1578 <diag+0xcc>
}
    1698:	00000c3c 	andeq	r0, r0, ip, lsr ip
    169c:	0b011312 	bleq	462ec <__ccfg+0x26344>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    16a0:	3b0b3a0b 	blcc	2cfed4 <__ccfg+0x2aff2c>
    16a4:	010b3905 	tsteq	fp, r5, lsl #18
	put_byte (cmd);
    16a8:	13000013 	movwne	r0, #19
    16ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    16b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16b4:	13490b39 	movtne	r0, #39737	; 0x9b39
static void wwait (word st, word del) {
    16b8:	00000b38 	andeq	r0, r0, r8, lsr fp
    16bc:	03011314 	movweq	r1, #4884	; 0x1314
    16c0:	3a0b0b0e 	bcc	2c4300 <__ccfg+0x2a4358>
	while (dopen && (rdsr () & 1)) {
    16c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    16cc:	00211500 	eoreq	r1, r1, r0, lsl #10
    16d0:	0b2f1349 	bleq	bc63fc <__ccfg+0xba6454>
	put_byte (CMD_RDSR);
    16d4:	34160000 	ldrcc	r0, [r6], #-0
	r = get_byte ();
    16d8:	3a0e0300 	bcc	3822e0 <__ccfg+0x362338>
    16dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (dopen && (rdsr () & 1)) {
    16e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    16e4:	1700000a 	strne	r0, [r0, -sl]
		if (st == WNONE)
    16e8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1638 <zero_loop+0x30>
    16ec:	0b3a0e03 	bleq	e84f00 <__ccfg+0xe64f58>
			mdelay (1);
    16f0:	0b390b3b 	bleq	e443e4 <__ccfg+0xe2443c>
    16f4:	01120111 	tsteq	r2, r1, lsl r1
			delay (del, st);
    16f8:	00000a40 	andeq	r0, r0, r0, asr #20
    16fc:	3f012e18 	svccc	0x00012e18
			release;
    1700:	3a0e030c 	bcc	382338 <__ccfg+0x362390>
    1704:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1708:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
static void ready () {
    170c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (dopen) {
    1710:	010a4001 	tsteq	sl, r1
		wwait (WNONE, 1);
    1714:	19000013 	stmdbne	r0, {r0, r1, r4}
    1718:	08030005 	stmdaeq	r3, {r0, r2}
    171c:	0b3b0b3a 	bleq	ec440c <__ccfg+0xea4464>
	dstat = 0;
    1720:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1724:	00000602 	andeq	r0, r0, r2, lsl #12
    1728:	0300051a 	movweq	r0, #1306	; 0x51a
    172c:	3b0b3a08 	blcc	2cff54 <__ccfg+0x2affac>
	udelay (1);
    1730:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1734:	000a0213 	andeq	r0, sl, r3, lsl r2
	udelay (1);
    1738:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
		dopen = DOPEN_TEMP;
    173c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1744:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1748:	01111349 	tsteq	r1, r9, asr #6
static void cclose () {
    174c:	0a400112 	beq	1001b9c <__ccfg+0xfe1bf4>
	if (dopen == DOPEN_TEMP) {
    1750:	00001301 	andeq	r1, r0, r1, lsl #6
    1754:	0300051c 	movweq	r0, #1308	; 0x51c
		wwait (WNONE, 1);
    1758:	3b0b3a08 	blcc	2cff80 <__ccfg+0x2affd8>
    175c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	cmd_0 (CMD_DP);
    1760:	00060213 	andeq	r0, r6, r3, lsl r2
    1764:	002e1d00 	eoreq	r1, lr, r0, lsl #26
		dopen = 0;
    1768:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
}
    176c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
word ee_open () {
    1770:	01110b39 	tsteq	r1, r9, lsr fp
	ready ();
    1774:	0a400112 	beq	1001bc4 <__ccfg+0xfe1c1c>
	dopen = DOPEN_PERM;
    1778:	341e0000 	ldrcc	r0, [lr], #-0
    177c:	3a080300 	bcc	202384 <__ccfg+0x1e23dc>
}
    1780:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (dopen) {
    1784:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1788:	1f000006 	svcne	0x00000006
		dopen = DOPEN_TEMP;
    178c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		cclose ();
    1790:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1794:	01110b39 	tsteq	r1, r9, lsr fp
int ser_in (word st, char *buf, int len) {
    1798:	1d200000 	stcne	0, cr0, [r0, #-0]
    179c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	if (len == 0)
    17a0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	if (__inpline == NULL) {
    17a4:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		if ((prcs = running (__inserial)) == 0) {
    17a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    17ac:	00052100 	andeq	r2, r5, r0, lsl #2
			prcs = runthread (__inserial);
    17b0:	00001331 	andeq	r1, r0, r1, lsr r3
    17b4:	31011d22 	tstcc	r1, r2, lsr #26
			if (prcs == 0) {
    17b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				npwait (st);
    17bc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		release;
    17c0:	000b5705 	andeq	r5, fp, r5, lsl #14
		join (prcs, st);
    17c4:	00052300 	andeq	r2, r5, r0, lsl #6
    17c8:	0b3a0e03 	bleq	e84fdc <__ccfg+0xe65034>
	if (*__inpline == NULL) // bin cmd
    17cc:	0b390b3b 	bleq	e444c0 <__ccfg+0xe24518>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17d0:	06021349 	streq	r1, [r2], -r9, asr #6
	if (prcs >= len)
    17d4:	0a240000 	beq	9017dc <__ccfg+0x8e1834>
		prcs = len-1;
    17d8:	3a0e0300 	bcc	3823e0 <__ccfg+0x362438>
	memcpy (buf, __inpline, prcs);
    17dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e0:	0001110b 	andeq	r1, r1, fp, lsl #2
    17e4:	011d2500 	tsteq	sp, r0, lsl #10
	ufree (__inpline);
    17e8:	01521331 	cmpeq	r2, r1, lsr r3
	__inpline = NULL;
    17ec:	0b580655 	bleq	1603148 <__ccfg+0x15e31a0>
	if (*buf) // if it's NULL, it's a bin cmd
    17f0:	0b570b59 	bleq	15c455c <__ccfg+0x15a45b4>
		buf [prcs] = '\0';
    17f4:	05260000 	streq	r0, [r6, #-0]!
}
    17f8:	02133100 	andseq	r3, r3, #0, 2
		prcs = strlen (__inpline);
    17fc:	27000006 	strcs	r0, [r0, -r6]
    1800:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		return 0;
    1804:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1808:	0b590b58 	bleq	1644570 <__ccfg+0x16245c8>
    180c:	13010b57 	movwne	r0, #6999	; 0x1b57
int ser_outf (word st, const char *m, ...) {
    1810:	1d280000 	stcne	0, cr0, [r8, #-0]
    1814:	11133101 	tstne	r3, r1, lsl #2
	if ((prcs = running (__outserial)) != 0) {
    1818:	58011201 	stmdapl	r1, {r0, r9, ip}
    181c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		join (prcs, st);
    1820:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    1824:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1774 <ee_open+0x4>
		release;
    1828:	0b3a0e03 	bleq	e8503c <__ccfg+0xe65094>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    182c:	0b390b3b 	bleq	e44520 <__ccfg+0xe24578>
    1830:	01111349 	tsteq	r1, r9, asr #6
    1834:	0a400112 	beq	1001c84 <__ccfg+0xfe1cdc>
		umwait (st);
    1838:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    183c:	3a0e0301 	bcc	382448 <__ccfg+0x3624a0>
	if (runstrand (__outserial, buf) == 0) {
    1840:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1844:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1848:	010a4001 	tsteq	sl, r1
		ufree (buf);
    184c:	2b000013 	blcs	18a0 <ser_inf+0x3c>
		npwait (st);
    1850:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
    1854:	0b3b0b3a 	bleq	ec4544 <__ccfg+0xea459c>
    1858:	0b200b39 	bleq	804544 <__ccfg+0x7e459c>
    185c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    1860:	3a0e0301 	bcc	38246c <__ccfg+0x3624c4>
int ser_inf (word st, const char *fmt, ...) {
    1864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1868:	110c270b 	tstne	ip, fp, lsl #14
	if (fmt == NULL)
    186c:	40011201 	andmi	r1, r1, r1, lsl #4
	if (__inpline == NULL) {
    1870:	0013010a 	andseq	r0, r3, sl, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    1874:	010b2d00 	tsteq	fp, r0, lsl #26
    1878:	00000655 	andeq	r0, r0, r5, asr r6
			prcs = runthread (__inserial);
    187c:	3100342e 	tstcc	r0, lr, lsr #8
    1880:	00060213 	andeq	r0, r6, r3, lsl r2
			if (prcs == 0) {
    1884:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
				npwait (st);
    1888:	0b3a0e03 	bleq	e8509c <__ccfg+0xe650f4>
		release;
    188c:	0b390b3b 	bleq	e44580 <__ccfg+0xe245d8>
		join (prcs, st);
    1890:	0b201349 	bleq	8065bc <__ccfg+0x7e6614>
    1894:	00001301 	andeq	r1, r0, r1, lsl #6
	va_start (ap, fmt);
    1898:	03003430 	movweq	r3, #1072	; 0x430
	prcs = vscan (__inpline, fmt, ap);
    189c:	3b0b3a08 	blcc	2d00c4 <__ccfg+0x2b011c>
    18a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	ufree (__inpline);
    18a4:	31000013 	tstcc	r0, r3, lsl r0
	__inpline = NULL;
    18a8:	0e03012e 	adfeqsp	f0, f3, #0.5
}
    18ac:	0b3b0b3a 	bleq	ec459c <__ccfg+0xea45f4>
    18b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    18b4:	13010b20 	movwne	r0, #6944	; 0x1b20
		return 0;
    18b8:	05320000 	ldreq	r0, [r2, #-0]!
    18bc:	3a080300 	bcc	2024c4 <__ccfg+0x1e251c>
    18c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
strand (__outserial, const char*)
    18c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    18c8:	011d3300 	tsteq	sp, r0, lsl #6
    18cc:	01111331 	tsteq	r1, r1, lsr r3
    18d0:	0b580112 	bleq	1601d20 <__ccfg+0x15e1d78>
endstrand
    18d4:	0b570b59 	bleq	15c4640 <__ccfg+0x15a4698>
    18d8:	00001301 	andeq	r1, r0, r1, lsl #6
	ptr = data;
    18dc:	03012e34 	movweq	r2, #7732	; 0x1e34
    18e0:	3b0b3a0e 	blcc	2d0120 <__ccfg+0x2b0178>
	if (*ptr)
    18e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		len = strlen (ptr);
    18e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    18ec:	010a4001 	tsteq	sl, r1
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18f0:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    18f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    18f8:	0b3b0b3a 	bleq	ec45e8 <__ccfg+0xea4640>
    18fc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1900:	00000602 	andeq	r0, r0, r2, lsl #12
	len -= quant;
    1904:	03012e36 	movweq	r2, #7734	; 0x1e36
    1908:	3b0b3a0e 	blcc	2d0148 <__ccfg+0x2b01a0>
    190c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	if (len == 0) {
    1910:	010b200c 	tsteq	fp, ip
		ufree (data);
    1914:	37000013 	smladcc	r0, r3, r0, r0
		finish;
    1918:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    191c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1920:	13490b39 	movtne	r0, #39737	; 0x9b39
    1924:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1928:	3a0e0301 	bcc	382534 <__ccfg+0x36258c>
    192c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1930:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
strand (__inserial, address)
    1934:	010b2013 	tsteq	fp, r3, lsl r0
    1938:	39000013 	stmdbcc	r0, {r0, r1, r4}
    193c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1940:	0b3b0b3a 	bleq	ec4630 <__ccfg+0xea4688>
    1944:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (__inpline != NULL)
    1948:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    194c:	11133101 	tstne	r3, r1, lsl #2
		finish;
    1950:	40011201 	andmi	r1, r1, r1, lsl #4
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1954:	3b00000a 	blcc	1984 <__inserial+0x50>
    1958:	1331001d 	teqne	r1, #29
    195c:	01120111 	tsteq	r2, r1, lsl r1
    1960:	0b590b58 	bleq	16446c8 <__ccfg+0x1624720>
		umwait (IM_INIT);
    1964:	00000b57 	andeq	r0, r0, r7, asr fp
		release;
    1968:	01110100 	tsteq	r1, r0, lsl #2
	savedata (data);
    196c:	0b130e25 	bleq	4c5208 <__ccfg+0x4a5260>
	len = MAX_LINE_LENGTH;
    1970:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	io (IM_READ, __cport, READ, ptr, 1);
    1974:	01110655 	tsteq	r1, r5, asr r6
    1978:	00000610 	andeq	r0, r0, r0, lsl r6
    197c:	0b002402 	bleq	a98c <__exidx_end+0x7b10>
    1980:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	if (ptr == (char*) data) { // new line
    1984:	0300000e 	movweq	r0, #14
    1988:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		if (*ptr == '\0') { // bin cmd
    198c:	0b3b0b3a 	bleq	ec467c <__ccfg+0xea46d4>
			proceed (IM_BIN);
    1990:	13490b39 	movtne	r0, #39737	; 0x9b39
    1994:	24040000 	strcs	r0, [r4], #-0
		if (*ptr < 0x20)
    1998:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    199c:	0008030b 	andeq	r0, r8, fp, lsl #6
			proceed (IM_READ);
    19a0:	00260500 	eoreq	r0, r6, r0, lsl #10
    19a4:	00001349 	andeq	r1, r0, r9, asr #6
	if (*ptr == '\n' || *ptr == '\r') {
    19a8:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    19ac:	07000013 	smladeq	r0, r3, r0, r0
    19b0:	0b0b0113 	bleq	2c1e04 <__ccfg+0x2a1e5c>
		*ptr = '\0';
    19b4:	0b3b0b3a 	bleq	ec46a4 <__ccfg+0xea46fc>
		__inpline = (char*)data;
    19b8:	13010b39 	movwne	r0, #6969	; 0x1b39
		finish;
    19bc:	0d080000 	stceq	0, cr0, [r8, #-0]
	if (len) {
    19c0:	3a0e0300 	bcc	3825c8 <__ccfg+0x362620>
		ptr++;
    19c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19c8:	0b13490b 	bleq	4d3dfc <__ccfg+0x4b3e54>
		len--;
    19cc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	proceed (IM_READ);
    19d0:	000b380b 	andeq	r3, fp, fp, lsl #16
	io (IM_BIN, __cport, READ, ptr, 1);
    19d4:	000d0900 	andeq	r0, sp, r0, lsl #18
    19d8:	0b3a0e03 	bleq	e851ec <__ccfg+0xe65244>
    19dc:	0b390b3b 	bleq	e446d0 <__ccfg+0xe24728>
    19e0:	0b381349 	bleq	e0670c <__ccfg+0xde6764>
    19e4:	340a0000 	strcc	r0, [sl], #-0
	len -= 2;
    19e8:	3a0e0300 	bcc	3825f0 <__ccfg+0x362648>
	if (len > *ptr + 1) // 1 for 0x04
    19ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19f0:	3f13490b 	svccc	0x0013490b
		len = *ptr + 1;
    19f4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    19f8:	000f0b00 	andeq	r0, pc, r0, lsl #22
	ptr++;
    19fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a00:	010c0000 	mrseq	r0, (UNDEF: 12)
    1a04:	01134901 	tsteq	r3, r1, lsl #18
    1a08:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1a0c:	00000021 	andeq	r0, r0, r1, lsr #32
    1a10:	0300160e 	movweq	r1, #1550	; 0x60e
    1a14:	3b0b3a0e 	blcc	2d0254 <__ccfg+0x2b02ac>
	len -= quant;
    1a18:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		__inpline = (char*)data;
    1a1c:	0f000013 	svceq	0x00000013
		finish;
    1a20:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	ptr += quant;
    1a24:	00001301 	andeq	r1, r0, r1, lsl #6
    1a28:	49000510 	stmdbmi	r0, {r4, r8, sl}
endstrand
    1a2c:	11000013 	tstne	r0, r3, lsl r0
    1a30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	proceed (IM_BINL);
    1a34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
endstrand
    1a38:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a3c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1a40:	13120000 	tstne	r2, #0
    1a44:	3a0b0b01 	bcc	2c4650 <__ccfg+0x2a46a8>
    1a48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (res && (d < n))
    1a50:	000d1300 	andeq	r1, sp, r0, lsl #6
    1a54:	0b3a0e03 	bleq	e85268 <__ccfg+0xe652c0>
    1a58:	0b39053b 	bleq	e42f4c <__ccfg+0xe22fa4>
    1a5c:	0b381349 	bleq	e06788 <__ccfg+0xde67e0>
			res [d] = (char) c;
    1a60:	13140000 	tstne	r4, #0
		d++;
    1a64:	0b0e0301 	bleq	382670 <__ccfg+0x3626c8>
    1a68:	3b0b3a0b 	blcc	2d029c <__ccfg+0x2b02f4>
    1a6c:	010b3905 	tsteq	fp, r5, lsl #18
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a70:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1a74:	13490021 	movtne	r0, #36897	; 0x9021
    1a78:	00000b2f 	andeq	r0, r0, pc, lsr #22
				enci (10000);
    1a7c:	3f012e16 	svccc	0x00012e16
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a80:	3a0e030c 	bcc	3826b8 <__ccfg+0x362710>
    1a84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	d = 0;
    1a88:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		c = *fm++;
    1a8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		if (c == '\\') {
    1a90:	000a4001 	andeq	r4, sl, r1
			if ((c = *fm++) == '\0') {
    1a94:	00051700 	andeq	r1, r5, r0, lsl #14
    1a98:	0b3a0803 	bleq	e83aac <__ccfg+0xe63b04>
				outc ('\\');
    1a9c:	0b390b3b 	bleq	e44790 <__ccfg+0xe247e8>
			if ((c = *fm++) == '\0') {
    1aa0:	06021349 	streq	r1, [r2], -r9, asr #6
				outc ('\\');
    1aa4:	34180000 	ldrcc	r0, [r8], #-0
    1aa8:	3a0e0300 	bcc	3826b0 <__ccfg+0x362708>
			outc (c);
    1aac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ab0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if (c == '\0')
    1ab4:	00000006 	andeq	r0, r0, r6
    1ab8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			outc (c);
    1abc:	030b130e 	movweq	r1, #45838	; 0xb30e
				outc (val);
    1ac0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				val = (word) va_arg (ap, aword);
    1ac4:	10011106 	andne	r1, r1, r6, lsl #2
		if (c == '%') {
    1ac8:	02000006 	andeq	r0, r0, #6
    1acc:	0b0b0024 	bleq	2c1b64 <__ccfg+0x2a1bbc>
			c = *fm++;
    1ad0:	0e030b3e 	vmoveq.16	d3[0], r0
			switch (c) {
    1ad4:	16030000 	strne	r0, [r3], -r0
    1ad8:	3a0e0300 	bcc	3826e0 <__ccfg+0x362738>
    1adc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ae0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ae4:	00240400 	eoreq	r0, r4, r0, lsl #8
    1ae8:	0b3e0b0b 	bleq	f8471c <__ccfg+0xf64774>
    1aec:	00000803 	andeq	r0, r0, r3, lsl #16
    1af0:	03011305 	movweq	r1, #4869	; 0x1305
				outc ('%');
    1af4:	3a0b0b0e 	bcc	2c4734 <__ccfg+0x2a478c>
    1af8:	010b3b0b 	tsteq	fp, fp, lsl #22
				outc (c);
    1afc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1b00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b04:	0b381349 	bleq	e06830 <__ccfg+0xde6888>
				if (c == '\0')
    1b08:	00000c34 	andeq	r0, r0, r4, lsr ip
				return d;
    1b0c:	0b000f07 	bleq	5730 <__exidx_end+0x28b4>
}
    1b10:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1b14:	13490026 	movtne	r0, #36902	; 0x9026
			switch (c) {
    1b18:	35090000 	strcc	r0, [r9, #-0]
    1b1c:	00134900 	andseq	r4, r3, r0, lsl #18
    1b20:	01130a00 	tsteq	r3, r0, lsl #20
				for (i = 12; ; i -= 4) {
    1b24:	0b3a0b0b 	bleq	e84758 <__ccfg+0xe647b0>
				val = (word) va_arg (ap, aword);
    1b28:	0b390b3b 	bleq	e4481c <__ccfg+0xe24874>
						[ (val >> i) & 0xf ]);
    1b2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b30:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1b34:	3b0b3a0e 	blcc	2d0374 <__ccfg+0x2b03cc>
					outc (__pi_hex_enc_table
    1b38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b3c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
					if (i == 0)
    1b40:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1b44:	0c00000b 	stceq	0, cr0, [r0], {11}
				for (i = 12; ; i -= 4) {
    1b48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				val = (word) va_arg (ap, aword);
    1b4c:	0b3b0b3a 	bleq	ec483c <__ccfg+0xea4894>
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	13490b39 	movtne	r0, #39737	; 0x9b39
				val = (word) va_arg (ap, aword);
    1b54:	00000b38 	andeq	r0, r0, r8, lsr fp
				if (c == 'd' && (val & 0x8000) != 0) {
    1b58:	0300340d 	movweq	r3, #1037	; 0x40d
    1b5c:	3b0b3a0e 	blcc	2d039c <__ccfg+0x2b03f4>
					outc ('-');
    1b60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b64:	3c0c3f13 	stccc	15, cr3, [ip], {19}
					val = (~val) + 1;
    1b68:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1b6c:	0b0b000f 	bleq	2c1bb0 <__ccfg+0x2a1c08>
				for (i = 12; ; i -= 4) {
    1b70:	00001349 	andeq	r1, r0, r9, asr #6
				enci (10000);
    1b74:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1b78:	00130113 	andseq	r0, r3, r3, lsl r1
    1b7c:	00211000 	eoreq	r1, r1, r0
    1b80:	16110000 	ldrne	r0, [r1], -r0
    1b84:	3a0e0300 	bcc	38278c <__ccfg+0x3627e4>
    1b88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b90:	01151200 	tsteq	r5, r0, lsl #4
    1b94:	13010c27 	movwne	r0, #7207	; 0x1c27
    1b98:	05130000 	ldreq	r0, [r3, #-0]
    1b9c:	00134900 	andseq	r4, r3, r0, lsl #18
    1ba0:	00341400 	eorseq	r1, r4, r0, lsl #8
    1ba4:	0b3a0e03 	bleq	e853b8 <__ccfg+0xe65410>
    1ba8:	0b39053b 	bleq	e4309c <__ccfg+0xe230f4>
    1bac:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1a90 <__pi_vfparse+0x20>
    1bb0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1bb4:	0b011315 	bleq	46810 <__ccfg+0x26868>
    1bb8:	3b0b3a0b 	blcc	2d03ec <__ccfg+0x2b0444>
				if (c == 'd' || c == 'u') {
    1bbc:	010b3905 	tsteq	fp, r5, lsl #18
    1bc0:	16000013 			; <UNDEFINED> instruction: 0x16000013
					if (c == 'd' &&
    1bc4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					val = va_arg (ap, lword);
    1bc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					fm++;
    1bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
					if (c == 'd' &&
    1bd0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1bd4:	03011317 	movweq	r1, #4887	; 0x1317
						outc ('-');
    1bd8:	3a0b0b0e 	bcc	2c4818 <__ccfg+0x2a4870>
    1bdc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
						val = (~val) + 1;
    1be0:	0013010b 	andseq	r0, r3, fp, lsl #2
				enci (10000);
    1be4:	00211800 	eoreq	r1, r1, r0, lsl #16
					enci (1000000000UL);
    1be8:	0b2f1349 	bleq	bc6914 <__ccfg+0xba696c>
    1bec:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1bf0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1bf4:	3b0b3a0e 	blcc	2d0434 <__ccfg+0x2b048c>
    1bf8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1bfc:	1113490c 	tstne	r3, ip, lsl #18
    1c00:	40011201 	andmi	r1, r1, r1, lsl #4
    1c04:	0013010a 	andseq	r0, r3, sl, lsl #2
    1c08:	00051a00 	andeq	r1, r5, r0, lsl #20
    1c0c:	0b3a0803 	bleq	e83c20 <__ccfg+0xe63c78>
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
    1c14:	06021349 	streq	r1, [r2], -r9, asr #6
    1c18:	051b0000 	ldreq	r0, [fp, #-0]
    1c1c:	3a080300 	bcc	202824 <__ccfg+0x1e287c>
    1c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c28:	1c00000a 	stcne	0, cr0, [r0], {10}
				} else if (c == 'x') {
    1c2c:	00000018 	andeq	r0, r0, r8, lsl r0
					for (i = 28; ; i -= 4) {
    1c30:	0300341d 	movweq	r3, #1053	; 0x41d
					val = va_arg (ap, lword);
    1c34:	3b0b3a0e 	blcc	2d0474 <__ccfg+0x2b04cc>
							[ (val >> i) & 0xf ]);
    1c38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c3c:	00060213 	andeq	r0, r6, r3, lsl r2
						outc (__pi_hex_enc_table
    1c40:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1c44:	0b3a0803 	bleq	e83c58 <__ccfg+0xe63cb0>
    1c48:	0b390b3b 	bleq	e4493c <__ccfg+0xe24994>
						if (i == 0)
    1c4c:	06021349 	streq	r1, [r2], -r9, asr #6
    1c50:	341f0000 	ldrcc	r0, [pc], #-0	; 1c58 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1c54:	3a080300 	bcc	20285c <__ccfg+0x1e28b4>
					outc ('%');
    1c58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c60:	0000000a 	andeq	r0, r0, sl
					outc ('l');
    1c64:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1c68:	030b130e 	movweq	r1, #45838	; 0xb30e
				val = (word) va_arg (ap, aword);
    1c6c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				outc (val);
    1c70:	10011106 	andne	r1, r1, r6, lsl #2
    1c74:	02000006 	andeq	r0, r0, #6
				while (*st != '\0') {
    1c78:	0b0b0024 	bleq	2c1d10 <__ccfg+0x2a1d68>
    1c7c:	0e030b3e 	vmoveq.16	d3[0], r0
    1c80:	16030000 	strne	r0, [r3], -r0
    1c84:	3a0e0300 	bcc	38288c <__ccfg+0x3628e4>
					outc (*st);
    1c88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c8c:	0013490b 	andseq	r4, r3, fp, lsl #18
					st++;
    1c90:	00240400 	eoreq	r0, r4, r0, lsl #8
		c = *fm++;
    1c94:	0b3e0b0b 	bleq	f848c8 <__ccfg+0xf64920>
    1c98:	00000803 	andeq	r0, r0, r3, lsl #16
    1c9c:	03011305 	movweq	r1, #4869	; 0x1305
char *vform (char *res, const char *fm, va_list aq) {
    1ca0:	3a0b0b0e 	bcc	2c48e0 <__ccfg+0x2a4938>
    1ca4:	010b3b0b 	tsteq	fp, fp, lsl #22
	if (res != NULL) {
    1ca8:	06000013 			; <UNDEFINED> instruction: 0x06000013
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1cb0:	0b381349 	bleq	e069dc <__ccfg+0xde6a34>
    1cb4:	00000c34 	andeq	r0, r0, r4, lsr ip
}
    1cb8:	0b000f07 	bleq	58dc <__exidx_end+0x2a60>
    1cbc:	0800000b 	stmdaeq	r0, {r0, r1, r3}
	fml = strlen (fm) + 17;
    1cc0:	13490026 	movtne	r0, #36902	; 0x9026
    1cc4:	35090000 	strcc	r0, [r9, #-0]
    1cc8:	00134900 	andseq	r4, r3, r0, lsl #18
	if ((res = (char*) umalloc (fml)) == NULL)
    1ccc:	01130a00 	tsteq	r3, r0, lsl #20
    1cd0:	0b3a0b0b 	bleq	e84904 <__ccfg+0xe6495c>
    1cd4:	0b390b3b 	bleq	e449c8 <__ccfg+0xe24a20>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd8:	00001301 	andeq	r1, r0, r1, lsl #6
    1cdc:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1ce0:	3b0b3a0e 	blcc	2d0520 <__ccfg+0x2b0578>
    1ce4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		ufree (res);
    1ce8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		goto Again;
    1cec:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	if (buf == NULL || fmt == NULL)
    1cf0:	0c00000b 	stceq	0, cr0, [r0], {11}
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cf4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (buf == NULL || fmt == NULL)
    1cf8:	0b3b0b3a 	bleq	ec49e8 <__ccfg+0xea4a40>
    1cfc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d00:	00000b38 	andeq	r0, r0, r8, lsr fp
		    	    case 'u': scanu (lword); break;
    1d04:	0300340d 	movweq	r3, #1037	; 0x40d
			while (isspace (*buf)) buf++;
    1d08:	3b0b3a0e 	blcc	2d0548 <__ccfg+0x2b05a0>
    1d0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	while (*fmt != '\0') {
    1d10:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		if (*fmt++ != '%')
    1d14:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
		switch (*fmt++) {
    1d18:	0b0b000f 	bleq	2c1d5c <__ccfg+0x2a1db4>
    1d1c:	00001349 	andeq	r1, r0, r9, asr #6
    1d20:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1d24:	00130113 	andseq	r0, r3, r3, lsl r1
    1d28:	00211000 	eoreq	r1, r1, r0
    1d2c:	16110000 	ldrne	r0, [r1], -r0
    1d30:	3a0e0300 	bcc	382938 <__ccfg+0x362990>
}
    1d34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		switch (*fmt++) {
    1d38:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d3c:	01151200 	tsteq	r5, r0, lsl #4
    1d40:	13010c27 	movwne	r0, #7207	; 0x1c27
    1d44:	05130000 	ldreq	r0, [r3, #-0]
			while (isspace (*buf)) buf++;
    1d48:	00134900 	andseq	r4, r3, r0, lsl #18
    1d4c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1d50:	0b3a0e03 	bleq	e85564 <__ccfg+0xe655bc>
    1d54:	0b39053b 	bleq	e43248 <__ccfg+0xe232a0>
    1d58:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1c3c <__pi_vfparse+0x1cc>
    1d5c:	00000c3c 	andeq	r0, r0, ip, lsr ip
			if (*buf == '\0')
    1d60:	0b011315 	bleq	469bc <__ccfg+0x26a14>
			if (*buf != ',') {
    1d64:	3b0b3a0b 	blcc	2d0598 <__ccfg+0x2b05f0>
			sap = va_arg (ap, char*);
    1d68:	010b3905 	tsteq	fp, r5, lsl #18
			nc++;
    1d6c:	16000013 			; <UNDEFINED> instruction: 0x16000013
			if (*buf != ',') {
    1d70:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				while (!isspace (*buf) && *buf != ',' &&
    1d74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d78:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d7c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d80:	03011317 	movweq	r1, #4887	; 0x1317
    1d84:	3a0b0b0e 	bcc	2c49c4 <__ccfg+0x2a4a1c>
    1d88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d8c:	0013010b 	andseq	r0, r3, fp, lsl #2
			while (isspace (*buf)) buf++;
    1d90:	00211800 	eoreq	r1, r1, r0, lsl #16
    1d94:	0b2f1349 	bleq	bc6ac0 <__ccfg+0xba6b18>
    1d98:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1d9c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1da0:	3b0b3a0e 	blcc	2d05e0 <__ccfg+0x2b0638>
			if (*buf == ',') buf++;
    1da4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1da8:	1113490c 	tstne	r3, ip, lsl #18
			*sap = '\0';
    1dac:	40011201 	andmi	r1, r1, r1, lsl #4
			break;
    1db0:	0013010a 	andseq	r0, r3, sl, lsl #2
		    case 'd': scani (word); break;
    1db4:	00051a00 	andeq	r1, r5, r0, lsl #20
    1db8:	0b3a0803 	bleq	e83dcc <__ccfg+0xe63e24>
    1dbc:	0b390b3b 	bleq	e44ab0 <__ccfg+0xe24b08>
    1dc0:	06021349 	streq	r1, [r2], -r9, asr #6
    1dc4:	051b0000 	ldreq	r0, [fp, #-0]
    1dc8:	3a080300 	bcc	2029d0 <__ccfg+0x1e2a28>
    1dcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dd0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1dd4:	1c00000a 	stcne	0, cr0, [r0], {10}
    1dd8:	00000018 	andeq	r0, r0, r8, lsl r0
    1ddc:	0300341d 	movweq	r3, #1053	; 0x41d
    1de0:	3b0b3a0e 	blcc	2d0620 <__ccfg+0x2b0678>
    1de4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1de8:	00060213 	andeq	r0, r6, r3, lsl r2
    1dec:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1df0:	0b3a0803 	bleq	e83e04 <__ccfg+0xe63e5c>
    1df4:	0b390b3b 	bleq	e44ae8 <__ccfg+0xe24b40>
    1df8:	0a021349 	beq	86b24 <__ccfg+0x66b7c>
    1dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    1e00:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1e04:	0e030b13 	vmoveq.32	d3[0], r0
    1e08:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1e0c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1e10:	24020000 	strcs	r0, [r2], #-0
    1e14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e18:	000e030b 	andeq	r0, lr, fp, lsl #6
    1e1c:	00160300 	andseq	r0, r6, r0, lsl #6
    1e20:	0b3a0e03 	bleq	e85634 <__ccfg+0xe6568c>
		    case 'u': scanu (word); break;
    1e24:	0b390b3b 	bleq	e44b18 <__ccfg+0xe24b70>
    1e28:	00001349 	andeq	r1, r0, r9, asr #6
    1e2c:	0b002404 	bleq	ae44 <__exidx_end+0x7fc8>
    1e30:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e34:	05000008 	streq	r0, [r0, #-8]
    1e38:	13490026 	movtne	r0, #36902	; 0x9026
    1e3c:	35060000 	strcc	r0, [r6, #-0]
    1e40:	00134900 	andseq	r4, r3, r0, lsl #18
    1e44:	01130700 	tsteq	r3, r0, lsl #14
    1e48:	0b3a0b0b 	bleq	e84a7c <__ccfg+0xe64ad4>
    1e4c:	0b390b3b 	bleq	e44b40 <__ccfg+0xe24b98>
    1e50:	00001301 	andeq	r1, r0, r1, lsl #6
    1e54:	03000d08 	movweq	r0, #3336	; 0xd08
    1e58:	3b0b3a0e 	blcc	2d0698 <__ccfg+0x2b06f0>
    1e5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e60:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1e64:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1e68:	0900000b 	stmdbeq	r0, {r0, r1, r3}
		    case 'x': scanx (word); break;
    1e6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e70:	0b3b0b3a 	bleq	ec4b60 <__ccfg+0xea4bb8>
    1e74:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e78:	00000b38 	andeq	r0, r0, r8, lsr fp
    1e7c:	0300340a 	movweq	r3, #1034	; 0x40a
    1e80:	3b0b3a0e 	blcc	2d06c0 <__ccfg+0x2b0718>
    1e84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e88:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1e8c:	0b00000c 	bleq	1ec4 <vscan+0x1d4>
    1e90:	0b0b000f 	bleq	2c1ed4 <__ccfg+0x2a1f2c>
    1e94:	00001349 	andeq	r1, r0, r9, asr #6
    1e98:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1e9c:	00130113 	andseq	r0, r3, r3, lsl r1
    1ea0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1ea4:	160e0000 	strne	r0, [lr], -r0
    1ea8:	3a0e0300 	bcc	382ab0 <__ccfg+0x362b08>
    1eac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1eb0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1eb4:	01150f00 	tsteq	r5, r0, lsl #30
    1eb8:	13010c27 	movwne	r0, #7207	; 0x1c27
    1ebc:	05100000 	ldreq	r0, [r0, #-0]
    1ec0:	00134900 	andseq	r4, r3, r0, lsl #18
    1ec4:	00341100 	eorseq	r1, r4, r0, lsl #2
    1ec8:	0b3a0e03 	bleq	e856dc <__ccfg+0xe65734>
    1ecc:	0b39053b 	bleq	e433c0 <__ccfg+0xe23418>
    1ed0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1db4 <vscan+0xc4>
    1ed4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1ed8:	0b011312 	bleq	46b28 <__ccfg+0x26b80>
    1edc:	3b0b3a0b 	blcc	2d0710 <__ccfg+0x2b0768>
    1ee0:	010b3905 	tsteq	fp, r5, lsl #18
			switch (*fmt++) {
    1ee4:	13000013 	movwne	r0, #19
    1ee8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1eec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ef0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ef4:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ef8:	03011314 	movweq	r1, #4884	; 0x1314
		    	    case 'd': scani (lword); break;
    1efc:	3a0b0b0e 	bcc	2c4b3c <__ccfg+0x2a4b94>
    1f00:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f04:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f08:	00211500 	eoreq	r1, r1, r0, lsl #10
    1f0c:	0b2f1349 	bleq	bc6c38 <__ccfg+0xba6c90>
    1f10:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1f14:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1f18:	3b0b3a0e 	blcc	2d0758 <__ccfg+0x2b07b0>
    1f1c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1f20:	1201110c 	andne	r1, r1, #12, 2
    1f24:	010a4001 	tsteq	sl, r1
    1f28:	17000013 	smladne	r0, r3, r0, r0
    1f2c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1f30:	0b3b0b3a 	bleq	ec4c20 <__ccfg+0xea4c78>
    1f34:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f38:	00000602 	andeq	r0, r0, r2, lsl #12
    1f3c:	03003418 	movweq	r3, #1048	; 0x418
    1f40:	3b0b3a0e 	blcc	2d0780 <__ccfg+0x2b07d8>
    1f44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f48:	00060213 	andeq	r0, r6, r3, lsl r2
    1f4c:	000a1900 	andeq	r1, sl, r0, lsl #18
    1f50:	0b3a0e03 	bleq	e85764 <__ccfg+0xe657bc>
    1f54:	0b390b3b 	bleq	e44c48 <__ccfg+0xe24ca0>
		    	    case 'x': scanx (lword); break;
    1f58:	0b1a0000 	bleq	681f60 <__ccfg+0x661fb8>
    1f5c:	00065501 	andeq	r5, r6, r1, lsl #10
    1f60:	00341b00 	eorseq	r1, r4, r0, lsl #22
    1f64:	0b3a0803 	bleq	e83f78 <__ccfg+0xe63fd0>
    1f68:	0b390b3b 	bleq	e44c5c <__ccfg+0xe24cb4>
    1f6c:	0a021349 	beq	86c98 <__ccfg+0x66cf0>
    1f70:	01000000 	mrseq	r0, (UNDEF: 0)
    1f74:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1f78:	0e030b13 	vmoveq.32	d3[0], r0
    1f7c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1f80:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1f84:	24020000 	strcs	r0, [r2], #-0
    1f88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1f8c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1f90:	00160300 	andseq	r0, r6, r0, lsl #6
    1f94:	0b3a0e03 	bleq	e857a8 <__ccfg+0xe65800>
    1f98:	0b390b3b 	bleq	e44c8c <__ccfg+0xe24ce4>
    1f9c:	00001349 	andeq	r1, r0, r9, asr #6
    1fa0:	0b002404 	bleq	afb8 <__exidx_end+0x813c>
    1fa4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1fa8:	05000008 	streq	r0, [r0, #-8]
    1fac:	13490026 	movtne	r0, #36902	; 0x9026
    1fb0:	35060000 	strcc	r0, [r6, #-0]
    1fb4:	00134900 	andseq	r4, r3, r0, lsl #18
    1fb8:	000f0700 	andeq	r0, pc, r0, lsl #14
    1fbc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1fc0:	13080000 	movwne	r0, #32768	; 0x8000
    1fc4:	3a0b0b01 	bcc	2c4bd0 <__ccfg+0x2a4c28>
		    	    case 'd': scani (lword); break;
    1fc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fcc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1fd0:	000d0900 	andeq	r0, sp, r0, lsl #18
    1fd4:	0b3a0e03 	bleq	e857e8 <__ccfg+0xe65840>
    1fd8:	0b390b3b 	bleq	e44ccc <__ccfg+0xe24d24>
    1fdc:	0b0b1349 	bleq	2c6d08 <__ccfg+0x2a6d60>
    1fe0:	0b0c0b0d 	bleq	304c1c <__ccfg+0x2e4c74>
		    	    case 'u': scanu (lword); break;
    1fe4:	00000b38 	andeq	r0, r0, r8, lsr fp
    1fe8:	03000d0a 	movweq	r0, #3338	; 0xd0a
    1fec:	3b0b3a0e 	blcc	2d082c <__ccfg+0x2b0884>
    1ff0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ff4:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ff8:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1ffc:	0b3a0e03 	bleq	e85810 <__ccfg+0xe65868>
    2000:	0b390b3b 	bleq	e44cf4 <__ccfg+0xe24d4c>
    2004:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1ee8 <vscan+0x1f8>
    2008:	00000c3c 	andeq	r0, r0, ip, lsr ip
    200c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    2010:	00130113 	andseq	r0, r3, r3, lsl r1
    2014:	00210d00 	eoreq	r0, r1, r0, lsl #26
    2018:	160e0000 	strne	r0, [lr], -r0
    201c:	3a0e0300 	bcc	382c24 <__ccfg+0x362c7c>
    2020:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2024:	0013490b 	andseq	r4, r3, fp, lsl #18
    2028:	01150f00 	tsteq	r5, r0, lsl #30
		    	    case 'x': scanx (lword); break;
    202c:	13010c27 	movwne	r0, #7207	; 0x1c27
    2030:	05100000 	ldreq	r0, [r0, #-0]
			if ((c = *buf++) == '\0')
    2034:	00134900 	andseq	r4, r3, r0, lsl #18
    2038:	00341100 	eorseq	r1, r4, r0, lsl #2
			sap = va_arg (ap, char*);
    203c:	0b3a0e03 	bleq	e85850 <__ccfg+0xe658a8>
			nc++;
    2040:	0b39053b 	bleq	e43534 <__ccfg+0xe2358c>
			break;
    2044:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f28 <vscan+0x238>
			while (isspace (*buf)) buf++;
    2048:	00000c3c 	andeq	r0, r0, ip, lsr ip
    204c:	0b011312 	bleq	46c9c <__ccfg+0x26cf4>
    2050:	3b0b3a0b 	blcc	2d0884 <__ccfg+0x2b08dc>
						*sap++ = *buf++;
    2054:	010b3905 	tsteq	fp, r5, lsl #18
    2058:	13000013 	movwne	r0, #19
			while (isspace (*buf)) buf++;
    205c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2060:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2064:	13490b39 	movtne	r0, #39737	; 0x9b39
		return 0;
    2068:	00000b38 	andeq	r0, r0, r8, lsr fp
    206c:	03011314 	movweq	r1, #4884	; 0x1314
		    case 'x': scanx (word); break;
    2070:	3a0b0b0e 	bcc	2c4cb0 <__ccfg+0x2a4d08>
    2074:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		    	    case 'x': scanx (lword); break;
    2078:	0013010b 	andseq	r0, r3, fp, lsl #2
    207c:	00211500 	eoreq	r1, r1, r0, lsl #10
    2080:	0b2f1349 	bleq	bc6dac <__ccfg+0xba6e04>
    2084:	34160000 	ldrcc	r0, [r6], #-0
    2088:	3a0e0300 	bcc	382c90 <__ccfg+0x362ce8>
    208c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2090:	3f13490b 	svccc	0x0013490b
    2094:	000a020c 	andeq	r0, sl, ip, lsl #4
    2098:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    209c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    20a0:	0b3b0b3a 	bleq	ec4d90 <__ccfg+0xea4de8>
    20a4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    20a8:	01120111 	tsteq	r2, r1, lsl r1
    20ac:	00000a40 	andeq	r0, r0, r0, asr #20
    20b0:	03000518 	movweq	r0, #1304	; 0x518
    20b4:	3b0b3a0e 	blcc	2d08f4 <__ccfg+0x2b094c>
    20b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20bc:	00060213 	andeq	r0, r6, r3, lsl r2
    20c0:	00341900 	eorseq	r1, r4, r0, lsl #18
    20c4:	0b3a0e03 	bleq	e858d8 <__ccfg+0xe65930>
    20c8:	0b390b3b 	bleq	e44dbc <__ccfg+0xe24e14>
    20cc:	06021349 	streq	r1, [r2], -r9, asr #6
    20d0:	0b1a0000 	bleq	6820d8 <__ccfg+0x662130>
    20d4:	00065501 	andeq	r5, r6, r1, lsl #10
    20d8:	00341b00 	eorseq	r1, r4, r0, lsl #22
    20dc:	0b3a0803 	bleq	e840f0 <__ccfg+0xe64148>
    20e0:	0b390b3b 	bleq	e44dd4 <__ccfg+0xe24e2c>
    20e4:	0a021349 	beq	86e10 <__ccfg+0x66e68>
    20e8:	01000000 	mrseq	r0, (UNDEF: 0)
    20ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    20f0:	0e030b13 	vmoveq.32	d3[0], r0
    20f4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    20f8:	06100111 			; <UNDEFINED> instruction: 0x06100111
    20fc:	24020000 	strcs	r0, [r2], #-0
    2100:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2104:	000e030b 	andeq	r0, lr, fp, lsl #6
    2108:	00160300 	andseq	r0, r6, r0, lsl #6
    210c:	0b3a0e03 	bleq	e85920 <__ccfg+0xe65978>
    2110:	0b390b3b 	bleq	e44e04 <__ccfg+0xe24e5c>
    2114:	00001349 	andeq	r1, r0, r9, asr #6
    2118:	0b002404 	bleq	b130 <__exidx_end+0x82b4>
    211c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2120:	05000008 	streq	r0, [r0, #-8]
    2124:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2128:	0b3a0b0b 	bleq	e84d5c <__ccfg+0xe64db4>
    212c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2130:	0d060000 	stceq	0, cr0, [r6, #-0]
    2134:	490e0300 	stmdbmi	lr, {r8, r9}
    2138:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    213c:	0700000c 	streq	r0, [r0, -ip]
    2140:	0b0b000f 	bleq	2c2184 <__ccfg+0x2a21dc>
    2144:	26080000 	strcs	r0, [r8], -r0
    2148:	00134900 	andseq	r4, r3, r0, lsl #18
    214c:	00350900 	eorseq	r0, r5, r0, lsl #18
    2150:	00001349 	andeq	r1, r0, r9, asr #6
    2154:	0b000f0a 	bleq	5d84 <__exidx_end+0x2f08>
    2158:	0013490b 	andseq	r4, r3, fp, lsl #18
    215c:	01130b00 	tsteq	r3, r0, lsl #22
    2160:	0b3a0b0b 	bleq	e84d94 <__ccfg+0xe64dec>
    2164:	0b390b3b 	bleq	e44e58 <__ccfg+0xe24eb0>
    2168:	00001301 	andeq	r1, r0, r1, lsl #6
    216c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2170:	3b0b3a0e 	blcc	2d09b0 <__ccfg+0x2b0a08>
    2174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2178:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    217c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2180:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2184:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2188:	0b3b0b3a 	bleq	ec4e78 <__ccfg+0xea4ed0>
    218c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2190:	00000b38 	andeq	r0, r0, r8, lsr fp
    2194:	0300340e 	movweq	r3, #1038	; 0x40e
    2198:	3b0b3a0e 	blcc	2d09d8 <__ccfg+0x2b0a30>
    219c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    21a0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    21a4:	0f00000c 	svceq	0x0000000c
    21a8:	13490101 	movtne	r0, #37121	; 0x9101
    21ac:	00001301 	andeq	r1, r0, r1, lsl #6
    21b0:	00002110 	andeq	r2, r0, r0, lsl r1
    21b4:	00161100 	andseq	r1, r6, r0, lsl #2
    21b8:	0b3a0e03 	bleq	e859cc <__ccfg+0xe65a24>
    21bc:	0b39053b 	bleq	e436b0 <__ccfg+0xe23708>
    21c0:	00001349 	andeq	r1, r0, r9, asr #6
    21c4:	27011512 	smladcs	r1, r2, r5, r1
    21c8:	0013010c 	andseq	r0, r3, ip, lsl #2
    21cc:	00051300 	andeq	r1, r5, r0, lsl #6
    21d0:	00001349 	andeq	r1, r0, r9, asr #6
    21d4:	03003414 	movweq	r3, #1044	; 0x414
    21d8:	3b0b3a0e 	blcc	2d0a18 <__ccfg+0x2b0a70>
    21dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21e0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    21e4:	1500000c 	strne	r0, [r0, #-12]
    21e8:	0b0b0113 	bleq	2c263c <__ccfg+0x2a2694>
    21ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21f0:	13010b39 	movwne	r0, #6969	; 0x1b39
    21f4:	0d160000 	ldceq	0, cr0, [r6, #-0]
    21f8:	3a0e0300 	bcc	382e00 <__ccfg+0x362e58>
    21fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2200:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2204:	1700000b 	strne	r0, [r0, -fp]
    2208:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    220c:	0b3a0b0b 	bleq	e84e40 <__ccfg+0xe64e98>
    2210:	0b39053b 	bleq	e43704 <__ccfg+0xe2375c>
    2214:	00001301 	andeq	r1, r0, r1, lsl #6
    2218:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    221c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2220:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    2224:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2228:	0b3b0b3a 	bleq	ec4f18 <__ccfg+0xea4f70>
    222c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2230:	01111349 	tsteq	r1, r9, asr #6
    2234:	0a400112 	beq	1002684 <__ccfg+0xfe26dc>
    2238:	00001301 	andeq	r1, r0, r1, lsl #6
    223c:	0300051a 	movweq	r0, #1306	; 0x51a
    2240:	3b0b3a08 	blcc	2d0a68 <__ccfg+0x2b0ac0>
    2244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2248:	00060213 	andeq	r0, r6, r3, lsl r2
    224c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2250:	0b3a0803 	bleq	e84264 <__ccfg+0xe642bc>
    2254:	0b390b3b 	bleq	e44f48 <__ccfg+0xe24fa0>
    2258:	06021349 	streq	r1, [r2], -r9, asr #6
    225c:	0a1c0000 	beq	702264 <__ccfg+0x6e22bc>
    2260:	3a0e0300 	bcc	382e68 <__ccfg+0x362ec0>
    2264:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2268:	0001110b 	andeq	r1, r1, fp, lsl #2
    226c:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
    2270:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2274:	0b3b0b3a 	bleq	ec4f64 <__ccfg+0xea4fbc>
    2278:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    227c:	01111349 	tsteq	r1, r9, asr #6
    2280:	0a400112 	beq	10026d0 <__ccfg+0xfe2728>
    2284:	341e0000 	ldrcc	r0, [lr], #-0
    2288:	3a080300 	bcc	202e90 <__ccfg+0x1e2ee8>
    228c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2294:	1f00000a 	svcne	0x0000000a
    2298:	0e03012e 	adfeqsp	f0, f3, #0.5
    229c:	0b3b0b3a 	bleq	ec4f8c <__ccfg+0xea4fe4>
    22a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    22a4:	01120111 	tsteq	r2, r1, lsl r1
    22a8:	0a480a40 	beq	1204bb0 <__ccfg+0x11e4c08>
    22ac:	00001301 	andeq	r1, r0, r1, lsl #6
    22b0:	03000520 	movweq	r0, #1312	; 0x520
    22b4:	3b0b3a08 	blcc	2d0adc <__ccfg+0x2b0b34>
    22b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    22bc:	000a0213 	andeq	r0, sl, r3, lsl r2
    22c0:	000a2100 	andeq	r2, sl, r0, lsl #2
    22c4:	0b3a0803 	bleq	e842d8 <__ccfg+0xe64330>
    22c8:	0b390b3b 	bleq	e44fbc <__ccfg+0xe25014>
    22cc:	00000111 	andeq	r0, r0, r1, lsl r1
    22d0:	55010b22 	strpl	r0, [r1, #-2850]	; 0xfffff4de
    22d4:	00130106 	andseq	r0, r3, r6, lsl #2
    22d8:	00342300 	eorseq	r2, r4, r0, lsl #6
    22dc:	0b3a0803 	bleq	e842f0 <__ccfg+0xe64348>
    22e0:	0b390b3b 	bleq	e44fd4 <__ccfg+0xe2502c>
    22e4:	00001349 	andeq	r1, r0, r9, asr #6
    22e8:	11010b24 	tstne	r1, r4, lsr #22
    22ec:	01011201 	tsteq	r1, r1, lsl #4
    22f0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    22f4:	0111010b 	tsteq	r1, fp, lsl #2
    22f8:	00000112 	andeq	r0, r0, r2, lsl r1
    22fc:	01110100 	tsteq	r1, r0, lsl #2
    2300:	0b130e25 	bleq	4c5b9c <__ccfg+0x4a5bf4>
    2304:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2308:	01110655 	tsteq	r1, r5, asr r6
    230c:	00000610 	andeq	r0, r0, r0, lsl r6
    2310:	0b002402 	bleq	b320 <__exidx_end+0x84a4>
    2314:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2318:	0300000e 	movweq	r0, #14
    231c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2320:	0b3b0b3a 	bleq	ec5010 <__ccfg+0xea5068>
    2324:	13490b39 	movtne	r0, #39737	; 0x9b39
    2328:	24040000 	strcs	r0, [r4], #-0
    232c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2330:	0008030b 	andeq	r0, r8, fp, lsl #6
    2334:	01130500 	tsteq	r3, r0, lsl #10
    2338:	0b0b0e03 	bleq	2c5b4c <__ccfg+0x2a5ba4>
    233c:	0b3b0b3a 	bleq	ec502c <__ccfg+0xea5084>
    2340:	00001301 	andeq	r1, r0, r1, lsl #6
    2344:	03000d06 	movweq	r0, #3334	; 0xd06
    2348:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    234c:	000c340b 	andeq	r3, ip, fp, lsl #8
    2350:	000f0700 	andeq	r0, pc, r0, lsl #14
    2354:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2358:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    235c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2360:	13490035 	movtne	r0, #36917	; 0x9035
    2364:	0f0a0000 	svceq	0x000a0000
    2368:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    236c:	0b000013 	bleq	23c0 <NOROM_SetupGetTrimForAnabypassValue1+0x48>
    2370:	0b0b0113 	bleq	2c27c4 <__ccfg+0x2a281c>
    2374:	0b3b0b3a 	bleq	ec5064 <__ccfg+0xea50bc>
    2378:	13010b39 	movwne	r0, #6969	; 0x1b39
    237c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2380:	3a0e0300 	bcc	382f88 <__ccfg+0x362fe0>
    2384:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2388:	0b13490b 	bleq	4d47bc <__ccfg+0x4b4814>
    238c:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2390:	000b380b 	andeq	r3, fp, fp, lsl #16
    2394:	000d0d00 	andeq	r0, sp, r0, lsl #26
    2398:	0b3a0e03 	bleq	e85bac <__ccfg+0xe65c04>
    239c:	0b390b3b 	bleq	e45090 <__ccfg+0xe250e8>
    23a0:	0b381349 	bleq	e070cc <__ccfg+0xde7124>
    23a4:	340e0000 	strcc	r0, [lr], #-0
    23a8:	3a0e0300 	bcc	382fb0 <__ccfg+0x363008>
    23ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23b0:	3f13490b 	svccc	0x0013490b
    23b4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    23b8:	01010f00 	tsteq	r1, r0, lsl #30
    23bc:	13011349 	movwne	r1, #4937	; 0x1349
    23c0:	21100000 	tstcs	r0, r0
    23c4:	11000000 	mrsne	r0, (UNDEF: 0)
    23c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    23cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23d0:	13490b39 	movtne	r0, #39737	; 0x9b39
    23d4:	15120000 	ldrne	r0, [r2, #-0]
    23d8:	010c2701 	tsteq	ip, r1, lsl #14
    23dc:	13000013 	movwne	r0, #19
    23e0:	13490005 	movtne	r0, #36869	; 0x9005
    23e4:	34140000 	ldrcc	r0, [r4], #-0
    23e8:	3a0e0300 	bcc	382ff0 <__ccfg+0x363048>
    23ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23f0:	3f13490b 	svccc	0x0013490b
    23f4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    23f8:	01131500 	tsteq	r3, r0, lsl #10
    23fc:	0b3a0b0b 	bleq	e85030 <__ccfg+0xe65088>
    2400:	0b39053b 	bleq	e438f4 <__ccfg+0xe2394c>
    2404:	00001301 	andeq	r1, r0, r1, lsl #6
    2408:	03000d16 	movweq	r0, #3350	; 0xd16
    240c:	3b0b3a0e 	blcc	2d0c4c <__ccfg+0x2b0ca4>
    2410:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2414:	000b3813 	andeq	r3, fp, r3, lsl r8
    2418:	01131700 	tsteq	r3, r0, lsl #14
    241c:	0b0b0e03 	bleq	2c5c30 <__ccfg+0x2a5c88>
    2420:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2424:	13010b39 	movwne	r0, #6969	; 0x1b39
    2428:	21180000 	tstcs	r8, r0
    242c:	2f134900 	svccs	0x00134900
    2430:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2434:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2384 <NOROM_SetupGetTrimForAnabypassValue1+0xc>
    2438:	0b3a0e03 	bleq	e85c4c <__ccfg+0xe65ca4>
    243c:	0b390b3b 	bleq	e45130 <__ccfg+0xe25188>
    2440:	13490c27 	movtne	r0, #39975	; 0x9c27
    2444:	01120111 	tsteq	r2, r1, lsl r1
    2448:	13010a40 	movwne	r0, #6720	; 0x1a40
    244c:	051a0000 	ldreq	r0, [sl, #-0]
    2450:	3a080300 	bcc	203058 <__ccfg+0x1e30b0>
    2454:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2458:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    245c:	1b000006 	blne	247c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x8>
    2460:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2464:	0b3b0b3a 	bleq	ec5154 <__ccfg+0xea51ac>
    2468:	13490b39 	movtne	r0, #39737	; 0x9b39
    246c:	00000602 	andeq	r0, r0, r2, lsl #12
    2470:	03000a1c 	movweq	r0, #2588	; 0xa1c
    2474:	3b0b3a0e 	blcc	2d0cb4 <__ccfg+0x2b0d0c>
    2478:	000b390b 	andeq	r3, fp, fp, lsl #18
    247c:	010b1d00 	tsteq	fp, r0, lsl #26
    2480:	01120111 	tsteq	r2, r1, lsl r1
    2484:	00001301 	andeq	r1, r0, r1, lsl #6
    2488:	0300341e 	movweq	r3, #1054	; 0x41e
    248c:	3b0b3a08 	blcc	2d0cb4 <__ccfg+0x2b0d0c>
    2490:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2494:	000a0213 	andeq	r0, sl, r3, lsl r2
    2498:	010b1f00 	tsteq	fp, r0, lsl #30
    249c:	13010655 	movwne	r0, #5717	; 0x1655
    24a0:	34200000 	strtcc	r0, [r0], #-0
    24a4:	3a080300 	bcc	2030ac <__ccfg+0x1e3104>
    24a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    24b0:	010b2100 	mrseq	r2, (UNDEF: 27)
    24b4:	00000655 	andeq	r0, r0, r5, asr r6
    24b8:	01110100 	tsteq	r1, r0, lsl #2
    24bc:	0b130e25 	bleq	4c5d58 <__ccfg+0x4a5db0>
    24c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    24c4:	01111755 	tsteq	r1, r5, asr r7
    24c8:	00001710 	andeq	r1, r0, r0, lsl r7
    24cc:	03001602 	movweq	r1, #1538	; 0x602
    24d0:	3b0b3a0e 	blcc	2d0d10 <__ccfg+0x2b0d68>
    24d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    24d8:	00240300 	eoreq	r0, r4, r0, lsl #6
    24dc:	0b3e0b0b 	bleq	f85110 <__ccfg+0xf65168>
    24e0:	00000e03 	andeq	r0, r0, r3, lsl #28
    24e4:	0b002404 	bleq	b4fc <__exidx_end+0x8680>
    24e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    24ec:	05000008 	streq	r0, [r0, #-8]
    24f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24f4:	0b3a0e03 	bleq	e85d08 <__ccfg+0xe65d60>
    24f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    24fc:	01111349 	tsteq	r1, r9, asr #6
    2500:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2504:	00194297 	mulseq	r9, r7, r2
    2508:	00340600 	eorseq	r0, r4, r0, lsl #12
    250c:	0b3a0e03 	bleq	e85d20 <__ccfg+0xe65d78>
    2510:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2514:	00001702 	andeq	r1, r0, r2, lsl #14
    2518:	03003407 	movweq	r3, #1031	; 0x407
    251c:	3b0b3a0e 	blcc	2d0d5c <__ccfg+0x2b0db4>
    2520:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2524:	00000018 	andeq	r0, r0, r8, lsl r0
    2528:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    252c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2530:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2534:	10011117 	andne	r1, r1, r7, lsl r1
    2538:	02000017 	andeq	r0, r0, #23
    253c:	0b0b0024 	bleq	2c25d4 <__ccfg+0x2a262c>
    2540:	0e030b3e 	vmoveq.16	d3[0], r0
    2544:	16030000 	strne	r0, [r3], -r0
    2548:	3a0e0300 	bcc	383150 <__ccfg+0x3631a8>
    254c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2550:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2554:	0b0b0024 	bleq	2c25ec <__ccfg+0x2a2644>
    2558:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    255c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2560:	03193f01 	tsteq	r9, #1, 30
    2564:	3b0b3a0e 	blcc	2d0da4 <__ccfg+0x2b0dfc>
    2568:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    256c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2570:	97184006 	ldrls	r4, [r8, -r6]
    2574:	13011942 	movwne	r1, #6466	; 0x1942
    2578:	34060000 	strcc	r0, [r6], #-0
    257c:	3a0e0300 	bcc	383184 <__ccfg+0x3631dc>
    2580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2584:	00170213 	andseq	r0, r7, r3, lsl r2
    2588:	00340700 	eorseq	r0, r4, r0, lsl #14
    258c:	0b3a0e03 	bleq	e85da0 <__ccfg+0xe65df8>
    2590:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2594:	00001802 	andeq	r1, r0, r2, lsl #16
    2598:	0b011708 	bleq	481c0 <__ccfg+0x28218>
    259c:	3b0b3a0b 	blcc	2d0dd0 <__ccfg+0x2b0e28>
    25a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    25a4:	000d0900 	andeq	r0, sp, r0, lsl #18
    25a8:	0b3a0e03 	bleq	e85dbc <__ccfg+0xe65e14>
    25ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25b0:	340a0000 	strcc	r0, [sl], #-0
    25b4:	3a0e0300 	bcc	3831bc <__ccfg+0x363214>
    25b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25bc:	0b000013 	bleq	2610 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xd4>
    25c0:	13490101 	movtne	r0, #37121	; 0x9101
    25c4:	00001301 	andeq	r1, r0, r1, lsl #6
    25c8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    25cc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    25d0:	11010000 	mrsne	r0, (UNDEF: 1)
    25d4:	130e2501 	movwne	r2, #58625	; 0xe501
    25d8:	1b0e030b 	blne	38320c <__ccfg+0x363264>
    25dc:	1117550e 	tstne	r7, lr, lsl #10
    25e0:	00171001 	andseq	r1, r7, r1
    25e4:	00240200 	eoreq	r0, r4, r0, lsl #4
    25e8:	0b3e0b0b 	bleq	f8521c <__ccfg+0xf65274>
    25ec:	00000e03 	andeq	r0, r0, r3, lsl #28
    25f0:	03001603 	movweq	r1, #1539	; 0x603
    25f4:	3b0b3a0e 	blcc	2d0e34 <__ccfg+0x2b0e8c>
    25f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    25fc:	00240400 	eoreq	r0, r4, r0, lsl #8
    2600:	0b3e0b0b 	bleq	f85234 <__ccfg+0xf6528c>
    2604:	00000803 	andeq	r0, r0, r3, lsl #16
    2608:	3f012e05 	svccc	0x00012e05
    260c:	3a0e0319 	bcc	383278 <__ccfg+0x3632d0>
    2610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2614:	11134919 	tstne	r3, r9, lsl r9
    2618:	40061201 	andmi	r1, r6, r1, lsl #4
    261c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2620:	00001301 	andeq	r1, r0, r1, lsl #6
    2624:	03003406 	movweq	r3, #1030	; 0x406
    2628:	3b0b3a0e 	blcc	2d0e68 <__ccfg+0x2b0ec0>
    262c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2630:	00340700 	eorseq	r0, r4, r0, lsl #14
    2634:	0b3a0e03 	bleq	e85e48 <__ccfg+0xe65ea0>
    2638:	1349053b 	movtne	r0, #38203	; 0x953b
    263c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2640:	03193f01 	tsteq	r9, #1, 30
    2644:	3b0b3a0e 	blcc	2d0e84 <__ccfg+0x2b0edc>
    2648:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    264c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2650:	97184006 	ldrls	r4, [r8, -r6]
    2654:	13011942 	movwne	r1, #6466	; 0x1942
    2658:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    265c:	03193f01 	tsteq	r9, #1, 30
    2660:	3b0b3a0e 	blcc	2d0ea0 <__ccfg+0x2b0ef8>
    2664:	11192705 	tstne	r9, r5, lsl #14
    2668:	40061201 	andmi	r1, r6, r1, lsl #4
    266c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2670:	050a0000 	streq	r0, [sl, #-0]
    2674:	3a0e0300 	bcc	38327c <__ccfg+0x3632d4>
    2678:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    267c:	00180213 	andseq	r0, r8, r3, lsl r2
    2680:	11010000 	mrsne	r0, (UNDEF: 1)
    2684:	130e2501 	movwne	r2, #58625	; 0xe501
    2688:	1b0e030b 	blne	3832bc <__ccfg+0x363314>
    268c:	1117550e 	tstne	r7, lr, lsl #10
    2690:	00171001 	andseq	r1, r7, r1
    2694:	00240200 	eoreq	r0, r4, r0, lsl #4
    2698:	0b3e0b0b 	bleq	f852cc <__ccfg+0xf65324>
    269c:	00000e03 	andeq	r0, r0, r3, lsl #28
    26a0:	03001603 	movweq	r1, #1539	; 0x603
    26a4:	3b0b3a0e 	blcc	2d0ee4 <__ccfg+0x2b0f3c>
    26a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    26ac:	00240400 	eoreq	r0, r4, r0, lsl #8
    26b0:	0b3e0b0b 	bleq	f852e4 <__ccfg+0xf6533c>
    26b4:	00000803 	andeq	r0, r0, r3, lsl #16
    26b8:	03002e05 	movweq	r2, #3589	; 0xe05
    26bc:	3b0b3a0e 	blcc	2d0efc <__ccfg+0x2b0f54>
    26c0:	20192705 	andscs	r2, r9, r5, lsl #14
    26c4:	0600000b 	streq	r0, [r0], -fp
    26c8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    26cc:	0b3b0b3a 	bleq	ec53bc <__ccfg+0xea5414>
    26d0:	0b201927 	bleq	808b74 <__ccfg+0x7e8bcc>
    26d4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    26d8:	3a0e0301 	bcc	3832e4 <__ccfg+0x36333c>
    26dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    26e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    26e4:	97184006 	ldrls	r4, [r8, -r6]
    26e8:	13011942 	movwne	r1, #6466	; 0x1942
    26ec:	05080000 	streq	r0, [r8, #-0]
    26f0:	3a0e0300 	bcc	3832f8 <__ccfg+0x363350>
    26f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26f8:	00170213 	andseq	r0, r7, r3, lsl r2
    26fc:	00340900 	eorseq	r0, r4, r0, lsl #18
    2700:	0b3a0e03 	bleq	e85f14 <__ccfg+0xe65f6c>
    2704:	1349053b 	movtne	r0, #38203	; 0x953b
    2708:	00001702 	andeq	r1, r0, r2, lsl #14
    270c:	31001d0a 	tstcc	r0, sl, lsl #26
    2710:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2714:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2718:	0b000005 	bleq	2734 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x5c>
    271c:	0111010b 	tsteq	r1, fp, lsl #2
    2720:	13010612 	movwne	r0, #5650	; 0x1612
    2724:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
    2728:	11010182 	smlabbne	r1, r2, r1, r0
    272c:	01133101 	tsteq	r3, r1, lsl #2
    2730:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2734:	0001828a 	andeq	r8, r1, sl, lsl #5
    2738:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    273c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    2740:	01018289 	smlabbeq	r1, r9, r2, r8
    2744:	00000111 	andeq	r0, r0, r1, lsl r1
    2748:	3f012e0f 	svccc	0x00012e0f
    274c:	3a0e0319 	bcc	3833b8 <__ccfg+0x363410>
    2750:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2754:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2758:	97184006 	ldrls	r4, [r8, -r6]
    275c:	13011942 	movwne	r1, #6466	; 0x1942
    2760:	34100000 	ldrcc	r0, [r0], #-0
    2764:	3a0e0300 	bcc	38336c <__ccfg+0x3633c4>
    2768:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    276c:	00170213 	andseq	r0, r7, r3, lsl r2
    2770:	82891100 	addhi	r1, r9, #0, 2
    2774:	01110001 	tsteq	r1, r1
    2778:	00001331 	andeq	r1, r0, r1, lsr r3
    277c:	01828912 	orreq	r8, r2, r2, lsl r9
    2780:	31011101 	tstcc	r1, r1, lsl #2
    2784:	13000013 	movwne	r0, #19
    2788:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    278c:	0b3a0e03 	bleq	e85fa0 <__ccfg+0xe65ff8>
    2790:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2794:	1301193c 	movwne	r1, #6460	; 0x193c
    2798:	05140000 	ldreq	r0, [r4, #-0]
    279c:	00134900 	andseq	r4, r3, r0, lsl #18
    27a0:	002e1500 	eoreq	r1, lr, r0, lsl #10
    27a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    27a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    27ac:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    27b0:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    27b4:	03193f00 	tsteq	r9, #0, 30
    27b8:	3b0b3a0e 	blcc	2d0ff8 <__ccfg+0x2b1050>
    27bc:	3c19270b 	ldccc	7, cr2, [r9], {11}
    27c0:	00000019 	andeq	r0, r0, r9, lsl r0
    27c4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    27c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    27cc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    27d0:	10011117 	andne	r1, r1, r7, lsl r1
    27d4:	02000017 	andeq	r0, r0, #23
    27d8:	0b0b0024 	bleq	2c2870 <__ccfg+0x2a28c8>
    27dc:	0e030b3e 	vmoveq.16	d3[0], r0
    27e0:	16030000 	strne	r0, [r3], -r0
    27e4:	3a0e0300 	bcc	3833ec <__ccfg+0x363444>
    27e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27ec:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    27f0:	0b0b0024 	bleq	2c2888 <__ccfg+0x2a28e0>
    27f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    27f8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    27fc:	3a0e0301 	bcc	383408 <__ccfg+0x363460>
    2800:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2804:	20134919 	andscs	r4, r3, r9, lsl r9
    2808:	0013010b 	andseq	r0, r3, fp, lsl #2
    280c:	00050600 	andeq	r0, r5, r0, lsl #12
    2810:	0b3a0e03 	bleq	e86024 <__ccfg+0xe6607c>
    2814:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2818:	34070000 	strcc	r0, [r7], #-0
    281c:	3a0e0300 	bcc	383424 <__ccfg+0x36347c>
    2820:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2824:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2828:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    282c:	0b3a0e03 	bleq	e86040 <__ccfg+0xe66098>
    2830:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2834:	0b201349 	bleq	807560 <__ccfg+0x7e75b8>
    2838:	00001301 	andeq	r1, r0, r1, lsl #6
    283c:	03000509 	movweq	r0, #1289	; 0x509
    2840:	3b0b3a0e 	blcc	2d1080 <__ccfg+0x2b10d8>
    2844:	00134905 	andseq	r4, r3, r5, lsl #18
    2848:	00340a00 	eorseq	r0, r4, r0, lsl #20
    284c:	0b3a0e03 	bleq	e86060 <__ccfg+0xe660b8>
    2850:	1349053b 	movtne	r0, #38203	; 0x953b
    2854:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    2858:	3a0e0300 	bcc	383460 <__ccfg+0x3634b8>
    285c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2860:	000b2019 	andeq	r2, fp, r9, lsl r0
    2864:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
    2868:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    286c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2870:	01111927 	tsteq	r1, r7, lsr #18
    2874:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2878:	01194297 			; <UNDEFINED> instruction: 0x01194297
    287c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2880:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2884:	0b3b0b3a 	bleq	ec5574 <__ccfg+0xea55cc>
    2888:	17021349 	strne	r1, [r2, -r9, asr #6]
    288c:	340e0000 	strcc	r0, [lr], #-0
    2890:	3a0e0300 	bcc	383498 <__ccfg+0x3634f0>
    2894:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2898:	00180213 	andseq	r0, r8, r3, lsl r2
    289c:	00340f00 	eorseq	r0, r4, r0, lsl #30
    28a0:	0b3a0e03 	bleq	e860b4 <__ccfg+0xe6610c>
    28a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28a8:	00001702 	andeq	r1, r0, r2, lsl #14
    28ac:	31011d10 	tstcc	r1, r0, lsl sp
    28b0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    28b4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    28b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    28bc:	00051100 	andeq	r1, r5, r0, lsl #2
    28c0:	00001331 	andeq	r1, r0, r1, lsr r3
    28c4:	55010b12 	strpl	r0, [r1, #-2834]	; 0xfffff4ee
    28c8:	13000017 	movwne	r0, #23
    28cc:	13310034 	teqne	r1, #52	; 0x34
    28d0:	00001802 	andeq	r1, r0, r2, lsl #16
    28d4:	31011d14 	tstcc	r1, r4, lsl sp
    28d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    28dc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    28e0:	1500000b 	strne	r0, [r0, #-11]
    28e4:	0111010b 	tsteq	r1, fp, lsl #2
    28e8:	00000612 	andeq	r0, r0, r2, lsl r6
    28ec:	31003416 	tstcc	r0, r6, lsl r4
    28f0:	00170213 	andseq	r0, r7, r3, lsl r2
    28f4:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    28f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    28fc:	0b3b0b3a 	bleq	ec55ec <__ccfg+0xea5644>
    2900:	01111927 	tsteq	r1, r7, lsr #18
    2904:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2908:	01194297 			; <UNDEFINED> instruction: 0x01194297
    290c:	18000013 	stmdane	r0, {r0, r1, r4}
    2910:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2914:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2918:	0b590b58 	bleq	1645680 <__ccfg+0x16256d8>
    291c:	00001301 	andeq	r1, r0, r1, lsl #6
    2920:	01828919 	orreq	r8, r2, r9, lsl r9
    2924:	31011101 	tstcc	r1, r1, lsl #2
    2928:	1a000013 	bne	297c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x154>
    292c:	0001828a 	andeq	r8, r1, sl, lsl #5
    2930:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2934:	1b000018 	blne	299c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x174>
    2938:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2944:	01111349 	tsteq	r1, r9, asr #6
    2948:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    294c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2950:	1c000013 	stcne	0, cr0, [r0], {19}
    2954:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2958:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    295c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2960:	341d0000 	ldrcc	r0, [sp], #-0
    2964:	3a0e0300 	bcc	38356c <__ccfg+0x3635c4>
    2968:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    296c:	00170213 	andseq	r0, r7, r3, lsl r2
    2970:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    2974:	01111331 	tsteq	r1, r1, lsr r3
    2978:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    297c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2980:	1f000013 	svcne	0x00000013
    2984:	13310005 	teqne	r1, #5
    2988:	00001702 	andeq	r1, r0, r2, lsl #14
    298c:	31003420 	tstcc	r0, r0, lsr #8
    2990:	21000013 	tstcs	r0, r3, lsl r0
    2994:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2998:	17550152 			; <UNDEFINED> instruction: 0x17550152
    299c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    29a0:	00001301 	andeq	r1, r0, r1, lsl #6
    29a4:	01828922 	orreq	r8, r2, r2, lsr #18
    29a8:	31011101 	tstcc	r1, r1, lsl #2
    29ac:	00130113 	andseq	r0, r3, r3, lsl r1
    29b0:	82892300 	addhi	r2, r9, #0, 6
    29b4:	01110001 	tsteq	r1, r1
    29b8:	00001331 	andeq	r1, r0, r1, lsr r3
    29bc:	01828924 	orreq	r8, r2, r4, lsr #18
    29c0:	93011101 	movwls	r1, #4353	; 0x1101
    29c4:	13011842 	movwne	r1, #6210	; 0x1842
    29c8:	1d250000 	stcne	0, cr0, [r5, #-0]
    29cc:	11133100 	tstne	r3, r0, lsl #2
    29d0:	58061201 	stmdapl	r6, {r0, r9, ip}
    29d4:	0005590b 	andeq	r5, r5, fp, lsl #18
    29d8:	82892600 	addhi	r2, r9, #0, 12
    29dc:	01110101 	tsteq	r1, r1, lsl #2
    29e0:	00001301 	andeq	r1, r0, r1, lsl #6
    29e4:	3f012e27 	svccc	0x00012e27
    29e8:	3a0e0319 	bcc	383654 <__ccfg+0x3636ac>
    29ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    29f0:	01193c19 	tsteq	r9, r9, lsl ip
    29f4:	28000013 	stmdacs	r0, {r0, r1, r4}
    29f8:	13490005 	movtne	r0, #36869	; 0x9005
    29fc:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    2a00:	03193f01 	tsteq	r9, #1, 30
    2a04:	3b0b3a0e 	blcc	2d1244 <__ccfg+0x2b129c>
    2a08:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2a0c:	00130119 	andseq	r0, r3, r9, lsl r1
    2a10:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    2a14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a1c:	13491927 	movtne	r1, #39207	; 0x9927
    2a20:	0000193c 	andeq	r1, r0, ip, lsr r9
    2a24:	01110100 	tsteq	r1, r0, lsl #2
    2a28:	0b130e25 	bleq	4c62c4 <__ccfg+0x4a631c>
    2a2c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2a30:	01111755 	tsteq	r1, r5, asr r7
    2a34:	00001710 	andeq	r1, r0, r0, lsl r7
    2a38:	03001602 	movweq	r1, #1538	; 0x602
    2a3c:	3b0b3a0e 	blcc	2d127c <__ccfg+0x2b12d4>
    2a40:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a44:	00240300 	eoreq	r0, r4, r0, lsl #6
    2a48:	0b3e0b0b 	bleq	f8567c <__ccfg+0xf656d4>
    2a4c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2a50:	0b002404 	bleq	ba68 <__exidx_end+0x8bec>
    2a54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a58:	05000008 	streq	r0, [r0, #-8]
    2a5c:	0b0b000f 	bleq	2c2aa0 <__ccfg+0x2a2af8>
    2a60:	00001349 	andeq	r1, r0, r9, asr #6
    2a64:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    2a68:	07000019 	smladeq	r0, r9, r0, r0
    2a6c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2a70:	00001301 	andeq	r1, r0, r1, lsl #6
    2a74:	49000508 	stmdbmi	r0, {r3, r8, sl}
    2a78:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2a7c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2a80:	13011349 	movwne	r1, #4937	; 0x1349
    2a84:	150a0000 	strne	r0, [sl, #-0]
    2a88:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    2a8c:	0b000013 	bleq	2ae0 <NOROM_ChipInfo_GetChipFamily+0x20>
    2a90:	0b0b0113 	bleq	2c2ee4 <__ccfg+0x2a2f3c>
    2a94:	0b3b0b3a 	bleq	ec5784 <__ccfg+0xea57dc>
    2a98:	00001301 	andeq	r1, r0, r1, lsl #6
    2a9c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2aa0:	3b0b3a0e 	blcc	2d12e0 <__ccfg+0x2b1338>
    2aa4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2aa8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2aac:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ab0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ab4:	0b201927 	bleq	808f58 <__ccfg+0x7e8fb0>
    2ab8:	00001301 	andeq	r1, r0, r1, lsl #6
    2abc:	0300050e 	movweq	r0, #1294	; 0x50e
    2ac0:	3b0b3a0e 	blcc	2d1300 <__ccfg+0x2b1358>
    2ac4:	00134905 	andseq	r4, r3, r5, lsl #18
    2ac8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    2acc:	0b3a0e03 	bleq	e862e0 <__ccfg+0xe66338>
    2ad0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ad4:	0b201349 	bleq	807800 <__ccfg+0x7e7858>
    2ad8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    2adc:	3a0e0300 	bcc	3836e4 <__ccfg+0x36373c>
    2ae0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ae4:	000b2019 	andeq	r2, fp, r9, lsl r0
    2ae8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    2aec:	0b3a0e03 	bleq	e86300 <__ccfg+0xe66358>
    2af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2af4:	0b201349 	bleq	807820 <__ccfg+0x7e7878>
    2af8:	00001301 	andeq	r1, r0, r1, lsl #6
    2afc:	03000512 	movweq	r0, #1298	; 0x512
    2b00:	3b0b3a0e 	blcc	2d1340 <__ccfg+0x2b1398>
    2b04:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b08:	00341300 	eorseq	r1, r4, r0, lsl #6
    2b0c:	0b3a0e03 	bleq	e86320 <__ccfg+0xe66378>
    2b10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b14:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2b18:	03193f01 	tsteq	r9, #1, 30
    2b1c:	3b0b3a0e 	blcc	2d135c <__ccfg+0x2b13b4>
    2b20:	1119270b 	tstne	r9, fp, lsl #14
    2b24:	40061201 	andmi	r1, r6, r1, lsl #4
    2b28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2b2c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b30:	03003415 	movweq	r3, #1045	; 0x415
    2b34:	3b0b3a0e 	blcc	2d1374 <__ccfg+0x2b13cc>
    2b38:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b3c:	16000017 			; <UNDEFINED> instruction: 0x16000017
    2b40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b44:	0b3b0b3a 	bleq	ec5834 <__ccfg+0xea588c>
    2b48:	051c1349 	ldreq	r1, [ip, #-841]	; 0xfffffcb7
    2b4c:	1d170000 	ldcne	0, cr0, [r7, #-0]
    2b50:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2b54:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2b58:	010b590b 	tsteq	fp, fp, lsl #18
    2b5c:	18000013 	stmdane	r0, {r0, r1, r4}
    2b60:	13310005 	teqne	r1, #5
    2b64:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2b68:	31001d19 	tstcc	r0, r9, lsl sp
    2b6c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2b70:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2b74:	1a00000b 	bne	2ba8 <AuxAdiDdiSafeWrite.constprop.1+0x18>
    2b78:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2b7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b80:	0b590b58 	bleq	16458e8 <__ccfg+0x1625940>
    2b84:	00001301 	andeq	r1, r0, r1, lsl #6
    2b88:	0182891b 	orreq	r8, r2, fp, lsl r9
    2b8c:	31011100 	mrscc	r1, (UNDEF: 17)
    2b90:	1c000013 	stcne	0, cr0, [r0], {19}
    2b94:	01018289 	smlabbeq	r1, r9, r2, r8
    2b98:	13010111 	movwne	r0, #4369	; 0x1111
    2b9c:	8a1d0000 	bhi	742ba4 <__ccfg+0x722bfc>
    2ba0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2ba4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2ba8:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    2bac:	11010182 	smlabbne	r1, r2, r1, r0
    2bb0:	01133101 	tsteq	r3, r1, lsl #2
    2bb4:	1f000013 	svcne	0x00000013
    2bb8:	01018289 	smlabbeq	r1, r9, r2, r8
    2bbc:	00000111 	andeq	r0, r0, r1, lsl r1
    2bc0:	3f012e20 	svccc	0x00012e20
    2bc4:	3a0e0319 	bcc	383830 <__ccfg+0x363888>
    2bc8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2bcc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2bd0:	97184006 	ldrls	r4, [r8, -r6]
    2bd4:	13011942 	movwne	r1, #6466	; 0x1942
    2bd8:	05210000 	streq	r0, [r1, #-0]!
    2bdc:	3a0e0300 	bcc	3837e4 <__ccfg+0x36383c>
    2be0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2be4:	00170213 	andseq	r0, r7, r3, lsl r2
    2be8:	00342200 	eorseq	r2, r4, r0, lsl #4
    2bec:	0b3a0e03 	bleq	e86400 <__ccfg+0xe66458>
    2bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bf4:	00001802 	andeq	r1, r0, r2, lsl #16
    2bf8:	03003423 	movweq	r3, #1059	; 0x423
    2bfc:	3b0b3a08 	blcc	2d1424 <__ccfg+0x2b147c>
    2c00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c04:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    2c08:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c0c:	0b3b0b3a 	bleq	ec58fc <__ccfg+0xea5954>
    2c10:	00001349 	andeq	r1, r0, r9, asr #6
    2c14:	11010b25 	tstne	r1, r5, lsr #22
    2c18:	01061201 	tsteq	r6, r1, lsl #4
    2c1c:	26000013 			; <UNDEFINED> instruction: 0x26000013
    2c20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2c24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c28:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c2c:	1d270000 	stcne	0, cr0, [r7, #-0]
    2c30:	11133101 	tstne	r3, r1, lsl #2
    2c34:	58061201 	stmdapl	r6, {r0, r9, ip}
    2c38:	0105590b 	tsteq	r5, fp, lsl #18
    2c3c:	28000013 	stmdacs	r0, {r0, r1, r4}
    2c40:	13310005 	teqne	r1, #5
    2c44:	0b290000 	bleq	a42c4c <__ccfg+0xa22ca4>
    2c48:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2c4c:	2a000006 	bcs	2c6c <NOROM_OSCClockSourceGet+0x50>
    2c50:	13310034 	teqne	r1, #52	; 0x34
    2c54:	00001702 	andeq	r1, r0, r2, lsl #14
    2c58:	31011d2b 	tstcc	r1, fp, lsr #26
    2c5c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2c60:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2c64:	00130105 	andseq	r0, r3, r5, lsl #2
    2c68:	010b2c00 	tsteq	fp, r0, lsl #24
    2c6c:	00001755 	andeq	r1, r0, r5, asr r7
    2c70:	4900262d 	stmdbmi	r0, {r0, r2, r3, r5, r9, sl, sp}
    2c74:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    2c78:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2c7c:	0b3a0e03 	bleq	e86490 <__ccfg+0xe664e8>
    2c80:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2c84:	01111349 	tsteq	r1, r9, asr #6
    2c88:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2c8c:	00194297 	mulseq	r9, r7, r2
    2c90:	01012f00 	tsteq	r1, r0, lsl #30
    2c94:	13011349 	movwne	r1, #4937	; 0x1349
    2c98:	21300000 	teqcs	r0, r0
    2c9c:	2f134900 	svccs	0x00134900
    2ca0:	3100000b 	tstcc	r0, fp
    2ca4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ca8:	0b3a0e03 	bleq	e864bc <__ccfg+0xe66514>
    2cac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2cb0:	1301193c 	movwne	r1, #6460	; 0x193c
    2cb4:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
    2cb8:	03193f01 	tsteq	r9, #1, 30
    2cbc:	3b0b3a0e 	blcc	2d14fc <__ccfg+0x2b1554>
    2cc0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2cc4:	01193c13 	tsteq	r9, r3, lsl ip
    2cc8:	33000013 	movwcc	r0, #19
    2ccc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2cd0:	0b3a0e03 	bleq	e864e4 <__ccfg+0xe6653c>
    2cd4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2cd8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ce4:	0e030b13 	vmoveq.32	d3[0], r0
    2ce8:	17550e1b 	smmlane	r5, fp, lr, r0
    2cec:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2cf0:	24020000 	strcs	r0, [r2], #-0
    2cf4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2cf8:	000e030b 	andeq	r0, lr, fp, lsl #6
    2cfc:	00160300 	andseq	r0, r6, r0, lsl #6
    2d00:	0b3a0e03 	bleq	e86514 <__ccfg+0xe6656c>
    2d04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d08:	24040000 	strcs	r0, [r4], #-0
    2d0c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2d10:	0008030b 	andeq	r0, r8, fp, lsl #6
    2d14:	01040500 	tsteq	r4, r0, lsl #10
    2d18:	0b3a0b0b 	bleq	e8594c <__ccfg+0xe659a4>
    2d1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2d20:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    2d24:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    2d28:	0700000d 	streq	r0, [r0, -sp]
    2d2c:	0b0b0104 	bleq	2c3144 <__ccfg+0x2a319c>
    2d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d34:	00001301 	andeq	r1, r0, r1, lsl #6
    2d38:	03001608 	movweq	r1, #1544	; 0x608
    2d3c:	3b0b3a0e 	blcc	2d157c <__ccfg+0x2b15d4>
    2d40:	00134905 	andseq	r4, r3, r5, lsl #18
    2d44:	002e0900 	eoreq	r0, lr, r0, lsl #18
    2d48:	0b3a0e03 	bleq	e8655c <__ccfg+0xe665b4>
    2d4c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2d50:	0b201349 	bleq	807a7c <__ccfg+0x7e7ad4>
    2d54:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    2d58:	03193f01 	tsteq	r9, #1, 30
    2d5c:	3b0b3a0e 	blcc	2d159c <__ccfg+0x2b15f4>
    2d60:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d64:	010b2013 	tsteq	fp, r3, lsl r0
    2d68:	0b000013 	bleq	2dbc <NOROM_OSCClockSourceGet+0x1a0>
    2d6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d70:	0b3b0b3a 	bleq	ec5a60 <__ccfg+0xea5ab8>
    2d74:	00001349 	andeq	r1, r0, r9, asr #6
    2d78:	3f002e0c 	svccc	0x00002e0c
    2d7c:	3a0e0319 	bcc	3839e8 <__ccfg+0x363a40>
    2d80:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d84:	11134919 	tstne	r3, r9, lsl r9
    2d88:	40061201 	andmi	r1, r6, r1, lsl #4
    2d8c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2d90:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    2d94:	03193f01 	tsteq	r9, #1, 30
    2d98:	3b0b3a0e 	blcc	2d15d8 <__ccfg+0x2b1630>
    2d9c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2da0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2da4:	97184006 	ldrls	r4, [r8, -r6]
    2da8:	13011942 	movwne	r1, #6466	; 0x1942
    2dac:	340e0000 	strcc	r0, [lr], #-0
    2db0:	3a0e0300 	bcc	3839b8 <__ccfg+0x363a10>
    2db4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2db8:	00170213 	andseq	r0, r7, r3, lsl r2
    2dbc:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    2dc0:	01111331 	tsteq	r1, r1, lsr r3
    2dc4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2dc8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2dcc:	10000013 	andne	r0, r0, r3, lsl r0
    2dd0:	13310034 	teqne	r1, #52	; 0x34
    2dd4:	00001702 	andeq	r1, r0, r2, lsl #14
    2dd8:	11010b11 	tstne	r1, r1, lsl fp
    2ddc:	00061201 	andeq	r1, r6, r1, lsl #4
    2de0:	00341200 	eorseq	r1, r4, r0, lsl #4
    2de4:	00001331 	andeq	r1, r0, r1, lsr r3
    2de8:	31001d13 	tstcc	r0, r3, lsl sp
    2dec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2df0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2df4:	1400000b 	strne	r0, [r0], #-11
    2df8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2dfc:	0b3a0e03 	bleq	e86610 <__ccfg+0xe66668>
    2e00:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e04:	01111349 	tsteq	r1, r9, asr #6
    2e08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2e0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2e10:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2e14:	00018289 	andeq	r8, r1, r9, lsl #5
    2e18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2e1c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    2e20:	3a0e0301 	bcc	383a2c <__ccfg+0x363a84>
    2e24:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2e28:	20134919 	andscs	r4, r3, r9, lsl r9
    2e2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e30:	00341700 	eorseq	r1, r4, r0, lsl #14
    2e34:	0b3a0e03 	bleq	e86648 <__ccfg+0xe666a0>
    2e38:	1349053b 	movtne	r0, #38203	; 0x953b
    2e3c:	34180000 	ldrcc	r0, [r8], #-0
    2e40:	3a0e0300 	bcc	383a48 <__ccfg+0x363aa0>
    2e44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e48:	00180213 	andseq	r0, r8, r3, lsl r2
    2e4c:	001d1900 	andseq	r1, sp, r0, lsl #18
    2e50:	01521331 	cmpeq	r2, r1, lsr r3
    2e54:	0b581755 	bleq	1608bb0 <__ccfg+0x15e8c08>
    2e58:	00000b59 	andeq	r0, r0, r9, asr fp
    2e5c:	31011d1a 	tstcc	r1, sl, lsl sp
    2e60:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2e64:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2e68:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e6c:	010b1b00 	tsteq	fp, r0, lsl #22
    2e70:	00001755 	andeq	r1, r0, r5, asr r7
    2e74:	3f012e1c 	svccc	0x00012e1c
    2e78:	3a0e0319 	bcc	383ae4 <__ccfg+0x363b3c>
    2e7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2e80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2e84:	97184006 	ldrls	r4, [r8, -r6]
    2e88:	00001942 	andeq	r1, r0, r2, asr #18
    2e8c:	31011d1d 	tstcc	r1, sp, lsl sp
    2e90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e94:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2e98:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e9c:	011d1e00 	tsteq	sp, r0, lsl #28
    2ea0:	01111331 	tsteq	r1, r1, lsr r3
    2ea4:	0b580612 	bleq	16046f4 <__ccfg+0x15e474c>
    2ea8:	00000b59 	andeq	r0, r0, r9, asr fp
    2eac:	01110100 	tsteq	r1, r0, lsl #2
    2eb0:	0b130e25 	bleq	4c674c <__ccfg+0x4a67a4>
    2eb4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2eb8:	01111755 	tsteq	r1, r5, asr r7
    2ebc:	00001710 	andeq	r1, r0, r0, lsl r7
    2ec0:	0b002402 	bleq	bed0 <__exidx_end+0x9054>
    2ec4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ec8:	0300000e 	movweq	r0, #14
    2ecc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2ed0:	0b3b0b3a 	bleq	ec5bc0 <__ccfg+0xea5c18>
    2ed4:	00001349 	andeq	r1, r0, r9, asr #6
    2ed8:	0b002404 	bleq	bef0 <__exidx_end+0x9074>
    2edc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ee0:	05000008 	streq	r0, [r0, #-8]
    2ee4:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ee8:	0b3b0b3a 	bleq	ec5bd8 <__ccfg+0xea5c30>
    2eec:	0b201927 	bleq	809390 <__ccfg+0x7e93e8>
    2ef0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ef4:	03000506 	movweq	r0, #1286	; 0x506
    2ef8:	3b0b3a0e 	blcc	2d1738 <__ccfg+0x2b1790>
    2efc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f00:	00340700 	eorseq	r0, r4, r0, lsl #14
    2f04:	0b3a0e03 	bleq	e86718 <__ccfg+0xe66770>
    2f08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f0c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2f10:	3a0e0301 	bcc	383b1c <__ccfg+0x363b74>
    2f14:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2f18:	20134919 	andscs	r4, r3, r9, lsl r9
    2f1c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f20:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2f24:	01111331 	tsteq	r1, r1, lsr r3
    2f28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f2c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2f30:	0a000013 	beq	2f84 <__exidx_end+0x108>
    2f34:	13310005 	teqne	r1, #5
    2f38:	00001702 	andeq	r1, r0, r2, lsl #14
    2f3c:	3100340b 	tstcc	r0, fp, lsl #8
    2f40:	00170213 	andseq	r0, r7, r3, lsl r2
    2f44:	00050c00 	andeq	r0, r5, r0, lsl #24
    2f48:	0b1c1331 	bleq	707c14 <__ccfg+0x6e7c6c>
    2f4c:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    2f50:	11000182 	smlabbne	r0, r2, r1, r0
    2f54:	00133101 	andseq	r3, r3, r1, lsl #2
    2f58:	82890e00 	addhi	r0, r9, #0, 28
    2f5c:	01110001 	tsteq	r1, r1
    2f60:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2f64:	0f000013 	svceq	0x00000013
    2f68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2f6c:	0b3a0e03 	bleq	e86780 <__ccfg+0xe667d8>
    2f70:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2f74:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f78:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2f7c:	00130119 	andseq	r0, r3, r9, lsl r1
    2f80:	00051000 	andeq	r1, r5, r0
    2f84:	0b3a0e03 	bleq	e86798 <__ccfg+0xe667f0>
    2f88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f8c:	00001702 	andeq	r1, r0, r2, lsl #14
    2f90:	01828911 	orreq	r8, r2, r1, lsl r9
    2f94:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    2f98:	13311942 	teqne	r1, #1081344	; 0x108000
    2f9c:	8a120000 	bhi	482fa4 <__ccfg+0x462ffc>
    2fa0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2fa4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2fa8:	34130000 	ldrcc	r0, [r3], #-0
    2fac:	3a0e0300 	bcc	383bb4 <__ccfg+0x363c0c>
    2fb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fb4:	00170213 	andseq	r0, r7, r3, lsl r2
    2fb8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2fbc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2fc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fc4:	13491927 	movtne	r1, #39207	; 0x9927
    2fc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2fcc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2fd0:	00130119 	andseq	r0, r3, r9, lsl r1
    2fd4:	011d1500 	tsteq	sp, r0, lsl #10
    2fd8:	01111331 	tsteq	r1, r1, lsr r3
    2fdc:	0b580612 	bleq	160482c <__ccfg+0x15e4884>
    2fe0:	00000b59 	andeq	r0, r0, r9, asr fp
    2fe4:	11010b16 	tstne	r1, r6, lsl fp
    2fe8:	00061201 	andeq	r1, r6, r1, lsl #4
    2fec:	002e1700 	eoreq	r1, lr, r0, lsl #14
    2ff0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2ff4:	0b3b0b3a 	bleq	ec5ce4 <__ccfg+0xea5d3c>
    2ff8:	13491927 	movtne	r1, #39207	; 0x9927
    2ffc:	0000193c 	andeq	r1, r0, ip, lsr r9
    3000:	01110100 	tsteq	r1, r0, lsl #2
    3004:	0b130e25 	bleq	4c68a0 <__ccfg+0x4a68f8>
    3008:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    300c:	01111755 	tsteq	r1, r5, asr r7
    3010:	00001710 	andeq	r1, r0, r0, lsl r7
    3014:	0b002402 	bleq	c024 <__exidx_end+0x91a8>
    3018:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    301c:	0300000e 	movweq	r0, #14
    3020:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3024:	0b3b0b3a 	bleq	ec5d14 <__ccfg+0xea5d6c>
    3028:	00001349 	andeq	r1, r0, r9, asr #6
    302c:	0b002404 	bleq	c044 <__exidx_end+0x91c8>
    3030:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3034:	05000008 	streq	r0, [r0, #-8]
    3038:	0b0b000f 	bleq	2c307c <__ccfg+0x2a30d4>
    303c:	00001349 	andeq	r1, r0, r9, asr #6
    3040:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    3044:	07000019 	smladeq	r0, r9, r0, r0
    3048:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    304c:	00001301 	andeq	r1, r0, r1, lsl #6
    3050:	49000508 	stmdbmi	r0, {r3, r8, sl}
    3054:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3058:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    305c:	13011349 	movwne	r1, #4937	; 0x1349
    3060:	150a0000 	strne	r0, [sl, #-0]
    3064:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3068:	0b000013 	bleq	30bc <__exidx_end+0x240>
    306c:	0b0b0113 	bleq	2c34c0 <__ccfg+0x2a3518>
    3070:	0b3b0b3a 	bleq	ec5d60 <__ccfg+0xea5db8>
    3074:	00001301 	andeq	r1, r0, r1, lsl #6
    3078:	03000d0c 	movweq	r0, #3340	; 0xd0c
    307c:	3b0b3a0e 	blcc	2d18bc <__ccfg+0x2b1914>
    3080:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3084:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3088:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    308c:	0b3a0e03 	bleq	e868a0 <__ccfg+0xe668f8>
    3090:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3094:	13010b20 	movwne	r0, #6944	; 0x1b20
    3098:	050e0000 	streq	r0, [lr, #-0]
    309c:	3a0e0300 	bcc	383ca4 <__ccfg+0x363cfc>
    30a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30a4:	0f000013 	svceq	0x00000013
    30a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    30ac:	0b3a0e03 	bleq	e868c0 <__ccfg+0xe66918>
    30b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    30b4:	0b201349 	bleq	807de0 <__ccfg+0x7e7e38>
    30b8:	00001301 	andeq	r1, r0, r1, lsl #6
    30bc:	03003410 	movweq	r3, #1040	; 0x410
    30c0:	3b0b3a0e 	blcc	2d1900 <__ccfg+0x2b1958>
    30c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    30c8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    30cc:	01111331 	tsteq	r1, r1, lsr r3
    30d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    30d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    30d8:	12000013 	andne	r0, r0, #19
    30dc:	13310005 	teqne	r1, #5
    30e0:	00001702 	andeq	r1, r0, r2, lsl #14
    30e4:	11010b13 	tstne	r1, r3, lsl fp
    30e8:	01061201 	tsteq	r6, r1, lsl #4
    30ec:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    30f0:	01018289 	smlabbeq	r1, r9, r2, r8
    30f4:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    30f8:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    30fc:	0001828a 	andeq	r8, r1, sl, lsl #5
    3100:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3104:	16000018 			; <UNDEFINED> instruction: 0x16000018
    3108:	01018289 	smlabbeq	r1, r9, r2, r8
    310c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3110:	00130118 	andseq	r0, r3, r8, lsl r1
    3114:	00341700 	eorseq	r1, r4, r0, lsl #14
    3118:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    311c:	0b180000 	bleq	603124 <__ccfg+0x5e317c>
    3120:	01175501 	tsteq	r7, r1, lsl #10
    3124:	19000013 	stmdbne	r0, {r0, r1, r4}
    3128:	13310005 	teqne	r1, #5
    312c:	00000b1c 	andeq	r0, r0, ip, lsl fp
    3130:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    3134:	1b000017 	blne	3198 <__exidx_end+0x31c>
    3138:	13310034 	teqne	r1, #52	; 0x34
    313c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    3140:	03193f01 	tsteq	r9, #1, 30
    3144:	3b0b3a0e 	blcc	2d1984 <__ccfg+0x2b19dc>
    3148:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    314c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3150:	97184006 	ldrls	r4, [r8, -r6]
    3154:	13011942 	movwne	r1, #6466	; 0x1942
    3158:	051d0000 	ldreq	r0, [sp, #-0]
    315c:	3a0e0300 	bcc	383d64 <__ccfg+0x363dbc>
    3160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3164:	00170213 	andseq	r0, r7, r3, lsl r2
    3168:	00341e00 	eorseq	r1, r4, r0, lsl #28
    316c:	0b3a0e03 	bleq	e86980 <__ccfg+0xe669d8>
    3170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3174:	00001702 	andeq	r1, r0, r2, lsl #14
    3178:	0182891f 	orreq	r8, r2, pc, lsl r9
    317c:	31011100 	mrscc	r1, (UNDEF: 17)
    3180:	20000013 	andcs	r0, r0, r3, lsl r0
    3184:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3188:	0b3a0e03 	bleq	e8699c <__ccfg+0xe669f4>
    318c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3190:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3194:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3198:	00130119 	andseq	r0, r3, r9, lsl r1
    319c:	82892100 	addhi	r2, r9, #0, 2
    31a0:	01110101 	tsteq	r1, r1, lsl #2
    31a4:	13011331 	movwne	r1, #4913	; 0x1331
    31a8:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    31ac:	3a0e0300 	bcc	383db4 <__ccfg+0x363e0c>
    31b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    31b4:	20134919 	andscs	r4, r3, r9, lsl r9
    31b8:	2300000b 	movwcs	r0, #11
    31bc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    31c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    31c4:	0b201927 	bleq	809668 <__ccfg+0x7e96c0>
    31c8:	34240000 	strtcc	r0, [r4], #-0
    31cc:	3a0e0300 	bcc	383dd4 <__ccfg+0x363e2c>
    31d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    31d4:	00170213 	andseq	r0, r7, r3, lsl r2
    31d8:	011d2500 	tsteq	sp, r0, lsl #10
    31dc:	01111331 	tsteq	r1, r1, lsr r3
    31e0:	0b580612 	bleq	1604a30 <__ccfg+0x15e4a88>
    31e4:	13010559 	movwne	r0, #5465	; 0x1559
    31e8:	05260000 	streq	r0, [r6, #-0]!
    31ec:	3a0e0300 	bcc	383df4 <__ccfg+0x363e4c>
    31f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    31f4:	00170213 	andseq	r0, r7, r3, lsl r2
    31f8:	00342700 	eorseq	r2, r4, r0, lsl #14
    31fc:	0b3a0e03 	bleq	e86a10 <__ccfg+0xe66a68>
    3200:	1349053b 	movtne	r0, #38203	; 0x953b
    3204:	00001802 	andeq	r1, r0, r2, lsl #16
    3208:	03003428 	movweq	r3, #1064	; 0x428
    320c:	3b0b3a08 	blcc	2d1a34 <__ccfg+0x2b1a8c>
    3210:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3214:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    3218:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    321c:	0b3b0b3a 	bleq	ec5f0c <__ccfg+0xea5f64>
    3220:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3224:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    3228:	03193f00 	tsteq	r9, #0, 30
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
    3230:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3234:	00193c13 	andseq	r3, r9, r3, lsl ip
    3238:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    323c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3240:	0b3b0b3a 	bleq	ec5f30 <__ccfg+0xea5f88>
    3244:	13491927 	movtne	r1, #39207	; 0x9927
    3248:	0000193c 	andeq	r1, r0, ip, lsr r9
    324c:	3f012e2c 	svccc	0x00012e2c
    3250:	3a0e0319 	bcc	383ebc <__ccfg+0x363f14>
    3254:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3258:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
       4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    return (time * SECOND)/1000;
       8:	e8500001 	ldmda	r0, {r0}^
}
       c:	eb000003 	bl	20 <g_pfnVectors+0x20>
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	02440000 	subeq	r0, r4, #0
      20:	02520000 	subseq	r0, r2, #0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	00025200 	andeq	r5, r2, r0, lsl #4
      34:	0002b400 	andeq	fp, r2, r0, lsl #8
      38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
      44:	00000252 	andeq	r0, r0, r2, asr r2
      48:	00000264 	andeq	r0, r0, r4, ror #4
      4c:	68530001 	ldmdavs	r3, {r0}^
      50:	72000002 	andvc	r0, r0, #2
      54:	01000002 	tsteq	r0, r2
		release;
      58:	02905300 	addseq	r5, r0, #0, 6
      5c:	029c0000 	addseq	r0, ip, #0
      60:	00010000 	andeq	r0, r1, r0
      64:	0002a253 	andeq	sl, r2, r3, asr r2
      68:	0002b400 	andeq	fp, r2, r0, lsl #8
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      78:	000000c8 	andeq	r0, r0, r8, asr #1
      7c:	000000fc 	strdeq	r0, [r0], -ip
      80:	10500001 	subsne	r0, r0, r1
      84:	22000001 	andcs	r0, r0, #1
      88:	01000001 	tsteq	r0, r1
      8c:	019c5000 	orrseq	r5, ip, r0
	descriptors [fd] = s;
      90:	019e0000 	orrseq	r0, lr, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	0001da50 	andeq	sp, r1, r0, asr sl
	if (s == NULL)
      9c:	0001ec00 	andeq	lr, r1, r0, lsl #24
		syserror (EMALLOC, "tcv05");
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
      a4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      a8:	000001f7 	strdeq	r0, [r0], -r7
      ac:	00500001 	subseq	r0, r0, r1
	...
      bc:	01000000 	mrseq	r0, (UNDEF: 0)
      c0:	00005000 	andeq	r5, r0, r0
	...
      d0:	00010000 	andeq	r0, r1, r0
      d4:	00000050 	andeq	r0, r0, r0, asr r0
	...
      e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      f0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
			wwait (st, 50);
      f4:	00000ac2 	andeq	r0, r0, r2, asr #21
			curr += 0x1000;
      f8:	f2560001 	vhadd.s16	d16, d6, d1
      fc:	f600000a 			; <UNDEFINED> instruction: 0xf600000a
		if (from >= EE_SIZE || upto < from)
     100:	0100000a 	tsteq	r0, sl
     104:	00005600 	andeq	r5, r0, r0, lsl #12
			upto = EE_SIZE - 1;
     108:	00000000 	andeq	r0, r0, r0
     10c:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
     110:	09aa0000 	stmibeq	sl!, {}	; <UNPREDICTABLE>
     114:	00010000 	andeq	r0, r1, r0
     118:	0009c052 	andeq	ip, r9, r2, asr r0
     11c:	0009d400 	andeq	sp, r9, r0, lsl #8
     120:	52000100 	andpl	r0, r0, #0, 2
	...
            onTime = redOn;
     12c:	000009ae 	andeq	r0, r0, lr, lsr #19
     130:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
            offTime = greenOff;
     134:	00530001 	subseq	r0, r3, r1
        ledFlag = 1 - ledFlag;
     138:	00000000 	andeq	r0, r0, r0
    return (time * SECOND)/1000;
     13c:	64000000 	strvs	r0, [r0], #-0
        ledFlag = 1 - ledFlag;
     140:	6e000009 	cdpvs	0, 0, cr0, cr0, cr9, {0}
    return (time * SECOND)/1000;
     144:	01000009 	tsteq	r0, r9
     148:	00005300 	andeq	r5, r0, r0, lsl #6
     14c:	00000000 	andeq	r0, r0, r0
     150:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
        offTime = adjustTime(offTime);
     154:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
        onTime = adjustTime(onTime);
     158:	00010000 	andeq	r0, r1, r0
     15c:	00000053 	andeq	r0, r0, r3, asr r0
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	00000000 	andeq	r0, r0, r0
     164:	0009fa00 	andeq	pc, r9, r0, lsl #20
     168:	000a0400 	andeq	r0, sl, r0, lsl #8
        if(onTime > 0){
     16c:	53000100 	movwpl	r0, #256	; 0x100
	...
            if(On)
     178:	000009ec 	andeq	r0, r0, ip, ror #19
                leds(led,1);
     17c:	00000a16 	andeq	r0, r0, r6, lsl sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     180:	00520001 	subseq	r0, r2, r1
                leds(led,0);
     184:	00000000 	andeq	r0, r0, r0
     188:	3a000000 	bcc	190 <_Min_Stack_Size+0x90>
     18c:	4400000a 	strmi	r0, [r0], #-10
     190:	0100000a 	tsteq	r0, sl
            delay(onTime, OFF_PERIOD);
     194:	00005300 	andeq	r5, r0, r0, lsl #6
            delay(offTime, Check_PERIOD);
     198:	00000000 	andeq	r0, r0, r0
            led = greenLed;
     19c:	0a2c0000 	beq	b001a4 <__ccfg+0xae01fc>
     1a0:	0a620000 	beq	18801a8 <__ccfg+0x1860200>
            ch = greenCharacter;
     1a4:	00010000 	andeq	r0, r1, r0
            onTime = greenOn;
     1a8:	00000050 	andeq	r0, r0, r0, asr r0
     1ac:	00000000 	andeq	r0, r0, r0
            offTime = greenOff;
     1b0:	0008d200 	andeq	sp, r8, r0, lsl #4
                leds(led,0);
     1b4:	0008dc00 	andeq	sp, r8, r0, lsl #24
     1b8:	53000100 	movwpl	r0, #256	; 0x100
	...
     1c4:	000008c4 	andeq	r0, r0, r4, asr #17
            proceed OFF_PERIOD;
     1c8:	000008ee 	andeq	r0, r0, lr, ror #17
     1cc:	00520001 	subseq	r0, r2, r1
        when(&On, Check_PERIOD);
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	24000000 	strcs	r0, [r0], #-0
        release;
     1d8:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
        leds(led,0);
     1dc:	01000009 	tsteq	r0, r9
     1e0:	00005300 	andeq	r5, r0, r0, lsl #6
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	09160000 	ldmdbeq	r6, {}	; <UNPREDICTABLE>
            proceed Check_PERIOD;
     1ec:	093e0000 	ldmdbeq	lr!, {}	; <UNPREDICTABLE>
}
     1f0:	00010000 	andeq	r0, r1, r0
     1f4:	00000052 	andeq	r0, r0, r2, asr r0
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00043800 	andeq	r3, r4, r0, lsl #16
     200:	00043c00 	andeq	r3, r4, r0, lsl #24
     204:	50000100 	andpl	r0, r0, r0, lsl #2
     208:	0000043c 	andeq	r0, r0, ip, lsr r4
     20c:	0000043f 	andeq	r0, r0, pc, lsr r4
     210:	00510001 	subseq	r0, r1, r1
     214:	00000000 	andeq	r0, r0, r0
     218:	84000000 	strhi	r0, [r0], #-0
     21c:	86000007 	strhi	r0, [r0], -r7
     220:	01000007 	tsteq	r0, r7
     224:	00005000 	andeq	r5, r0, r0
     228:	00000000 	andeq	r0, r0, r0
     22c:	07840000 	streq	r0, [r4, r0]
     230:	079a0000 	ldreq	r0, [sl, r0]
     234:	00010000 	andeq	r0, r1, r0
     238:	00079a51 	andeq	r9, r7, r1, asr sl
     23c:	00079e00 	andeq	r9, r7, r0, lsl #28
     240:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    word numbers[] = {0, 0, 0, 0};
     244:	000007a4 	andeq	r0, r0, r4, lsr #15
    int numbersIndex = 0;
     248:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    word numbers[] = {0, 0, 0, 0};
     24c:	ba550001 	blt	1540258 <__ccfg+0x15202b0>
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	c8000007 	stmdagt	r0, {r0, r1, r2}
        if(settingsInput[i] == ' ') {
     254:	01000007 	tsteq	r0, r7
     258:	07c85100 	strbeq	r5, [r8, r0, lsl #2]
            numbers[numbersIndex] = number;
     25c:	07f60000 	ldrbeq	r0, [r6, r0]!
     260:	00010000 	andeq	r0, r1, r0
            number = 0;
     264:	0007fc55 	andeq	pc, r7, r5, asr ip	; <UNPREDICTABLE>
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	00082400 	andeq	r2, r8, r0, lsl #8
    redOn = numbers[0];
     26c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     270:	00000824 	andeq	r0, r0, r4, lsr #16
    redOff = numbers[1];
     274:	00000832 	andeq	r0, r0, r2, lsr r8
     278:	32510001 	subscc	r0, r1, #1
    greenOn = numbers[2];
     27c:	3c000008 	stccc	0, cr0, [r0], {8}
     280:	01000008 	tsteq	r0, r8
    greenOff = numbers[3];
     284:	083c5500 	ldmdaeq	ip!, {r8, sl, ip, lr}
     288:	08470000 	stmdaeq	r7, {}^	; <UNPREDICTABLE>
}
     28c:	00010000 	andeq	r0, r1, r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	00084751 	andeq	r4, r8, r1, asr r7
     294:	00084a00 	andeq	r4, r8, r0, lsl #20
            number = number * 10;
     298:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
            number += settingsInput[i] - 48;
     29c:	0000084a 	andeq	r0, r0, sl, asr #16
     2a0:	00000850 	andeq	r0, r0, r0, asr r8
     2a4:	50510001 	subspl	r0, r1, r1
     2a8:	62000008 	andvs	r0, r0, #8
     2ac:	01000008 	tsteq	r0, r8
     2b0:	08625500 	stmdaeq	r2!, {r8, sl, ip, lr}^
fsm root {
     2b4:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     2b8:	00010000 	andeq	r0, r1, r0
     2bc:	00087451 	andeq	r7, r8, r1, asr r4
     2c0:	00089400 	andeq	r9, r8, r0, lsl #8
     2c4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
        ser_outf(Initial, "Enter your name: ");
     2d0:	00000784 	andeq	r0, r0, r4, lsl #15
     2d4:	0000079a 	muleq	r0, sl, r7
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	9a520001 	bls	14802e4 <__ccfg+0x146033c>
     2dc:	a0000007 	andge	r0, r0, r7
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	01000007 	tsteq	r0, r7
     2e4:	07a45600 	streq	r5, [r4, r0, lsl #12]!
     2e8:	07b40000 	ldreq	r0, [r4, r0]!
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	00010000 	andeq	r0, r1, r0
     2f0:	0007ba56 	andeq	fp, r7, r6, asr sl
        if (choice == 'A' || choice == 'a'){
     2f4:	0007c800 	andeq	ip, r7, r0, lsl #16
     2f8:	52000100 	andpl	r0, r0, #0, 2
     2fc:	000007c8 	andeq	r0, r0, r8, asr #15
            proceed Adjust_Intervals;
     300:	000007f8 	strdeq	r0, [r0], -r8
            proceed Monitor;
     304:	fc560001 	mrrc2	0, 0, r0, r6, cr1
        proceed Show_Menu;
     308:	24000007 	strcs	r0, [r0], #-7
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	01000008 	tsteq	r0, r8
     310:	08245600 	stmdaeq	r4!, {r9, sl, ip, lr}
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	08320000 	ldmdaeq	r2!, {}	; <UNPREDICTABLE>
     318:	00010000 	andeq	r0, r1, r0
     31c:	00083252 	andeq	r3, r8, r2, asr r2
        processSettingsInput(settings);
     320:	00083c00 	andeq	r3, r8, r0, lsl #24
        if(!blinkerRunning) {
     324:	56000100 	strpl	r0, [r0], -r0, lsl #2
     328:	0000083c 	andeq	r0, r0, ip, lsr r8
            blinkerCode = runfsm blinker;
     32c:	00000847 	andeq	r0, r0, r7, asr #16
     330:	4a520001 	bmi	148033c <__ccfg+0x1460394>
            blinkerRunning = YES;
     334:	55000008 	strpl	r0, [r0, #-8]
        On = YES;
     338:	01000008 	tsteq	r0, r8
     33c:	08555200 	ldmdaeq	r5, {r9, ip, lr}^
        trigger(&On);
     340:	08620000 	stmdaeq	r2!, {}^	; <UNPREDICTABLE>
        proceed Show_Menu;
     344:	00010000 	andeq	r0, r1, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	00086254 	andeq	r6, r8, r4, asr r2
     34c:	00089400 	andeq	r9, r8, r0, lsl #8
     350:	52000100 	andpl	r0, r0, #0, 2
	...
     35c:	000006f8 	strdeq	r0, [r0], -r8
     360:	00000706 	andeq	r0, r0, r6, lsl #14
        proceed Show_Menu;
     364:	00500001 	subseq	r0, r0, r1
     368:	00000000 	andeq	r0, r0, r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     370:	07000006 	streq	r0, [r0, -r6]
        displayCycle = YES;
     374:	01000007 	tsteq	r0, r7
        ser_inf(Await_Stop, "%c", &ch);
     378:	00005100 	andeq	r5, r0, r0, lsl #2
     37c:	00000000 	andeq	r0, r0, r0
     380:	06a80000 	strteq	r0, [r8], r0
        if(ch == 'S' || ch == 's'){
     384:	06bf0000 	ldrteq	r0, [pc], r0
     388:	00010000 	andeq	r0, r1, r0
     38c:	0006e250 	andeq	lr, r6, r0, asr r2
            displayCycle = NO;
     390:	0006f800 	andeq	pc, r6, r0, lsl #16
     394:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        On = NO;
     3a0:	0000059e 	muleq	r0, lr, r5
     3a4:	000005ae 	andeq	r0, r0, lr, lsr #11
        if(blinkerCode != 0x0) {
     3a8:	ae520001 	cdpge	0, 5, cr0, cr2, cr1, {0}
            killall(blinkerCode);
     3ac:	b6000005 	strlt	r0, [r0], -r5
     3b0:	05000005 	streq	r0, [r0, #-5]
        proceed Show_Menu;
     3b4:	20040c00 	andcs	r0, r4, r0, lsl #24
     3b8:	06504009 	ldrbeq	r4, [r0], -r9
        leds_all(0);
     3bc:	06540000 	ldrbeq	r0, [r4], -r0
     3c0:	00050000 	andeq	r0, r5, r0
     3c4:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
        proceed Show_Menu;
     3c8:	00065440 	andeq	r5, r6, r0, asr #8
     3cc:	00065600 	andeq	r5, r6, r0, lsl #12
        } else if (choice == 'S' || choice == 's') {
     3d0:	52000100 	andpl	r0, r0, #0, 2
            proceed Stop;
     3d4:	00000656 	andeq	r0, r0, r6, asr r6
        } else if (choice == 'V' || choice == 'v') {
     3d8:	00000658 	andeq	r0, r0, r8, asr r6
            proceed View_Settings;
     3dc:	040c0005 	streq	r0, [ip], #-5
        } else if (choice == 'M' || choice == 'm') {
     3e0:	00400920 	subeq	r0, r0, r0, lsr #18
            proceed Monitor;
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     3ec:	c2000005 	andgt	r0, r0, #5
     3f0:	01000005 	tsteq	r0, r5
     3f4:	05c65200 	strbeq	r5, [r6, #512]	; 0x200
     3f8:	05d00000 	ldrbeq	r0, [r0]
     3fc:	00010000 	andeq	r0, r1, r0
     400:	0005d452 	andeq	sp, r5, r2, asr r4
     404:	0005de00 	andeq	sp, r5, r0, lsl #28
     408:	52000100 	andpl	r0, r0, #0, 2
     40c:	000005e2 	andeq	r0, r0, r2, ror #11
     410:	000005ee 	andeq	r0, r0, lr, ror #11
     414:	7a520001 	bvc	1480420 <__ccfg+0x1460478>
     418:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
     41c:	01000006 	tsteq	r0, r6
     420:	00005200 	andeq	r5, r0, r0, lsl #4
     424:	00000000 	andeq	r0, r0, r0
     428:	053e0000 	ldreq	r0, [lr, #-0]!
     42c:	05500000 	ldrbeq	r0, [r0, #-0]
     430:	00010000 	andeq	r0, r1, r0
     434:	00000054 	andeq	r0, r0, r4, asr r0
static void devinit_uart (int devnum) {
     438:	00000000 	andeq	r0, r0, r0
	adddevfunc (ioreq_uart_a, devnum);
     43c:	0004d800 	andeq	sp, r4, r0, lsl #16
     440:	0004e000 	andeq	lr, r4, r0
void udelay (volatile word n) {
     444:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (n) {
     450:	000004d8 	ldrdeq	r0, [r0], -r8
}
     454:	000004de 	ldrdeq	r0, [r0], -lr
	while (n--);
     458:	de510001 	cdple	0, 5, cr0, cr1, cr1, {0}
     45c:	e3000004 	movw	r0, #4
     460:	01000004 	tsteq	r0, r4
		n--;
     464:	00005200 	andeq	r5, r0, r0, lsl #4
	...
void mdelay (volatile word n) {
     474:	00010000 	andeq	r0, r1, r0
	while (n) {
     478:	00000050 	andeq	r0, r0, r0, asr r0
	...
		udelay (999);
     488:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		n--;
     494:	00510001 	subseq	r0, r1, r1
	...
		if (__pi_systat.effpdm > 1)
     4a4:	01000000 	mrseq	r0, (UNDEF: 0)
     4a8:	00005200 	andeq	r5, r0, r0, lsl #4
			__pi_systat.effpdm = 1;
     4ac:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
     4b0:	00010000 	andeq	r0, r1, r0
     4b4:	00000054 	andeq	r0, r0, r4, asr r0
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     4d0:	00540001 	subseq	r0, r4, r1
     4d4:	00000000 	andeq	r0, r0, r0
void __pi_syserror (word ec, const char *m) {
     4d8:	9c000000 	stcls	0, cr0, [r0], {-0}
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	b4000004 	strlt	r0, [r0], #-4
     4e0:	01000004 	tsteq	r0, r4
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	04b45000 	ldrteq	r5, [r4], #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	04cc0000 	strbeq	r0, [ip], #0
     4ec:	00010000 	andeq	r0, r1, r0
     4f0:	00000054 	andeq	r0, r0, r4, asr r0
		all_leds_blink;
     4f4:	00000000 	andeq	r0, r0, r0
     4f8:	00047000 	andeq	r7, r4, r0
     4fc:	00047600 	andeq	r7, r4, r0, lsl #12
     500:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     514:	00500001 	subseq	r0, r0, r1
     518:	00000000 	andeq	r0, r0, r0
	while (1) {
     51c:	ac000000 	stcge	0, cr0, [r0], {-0}
     520:	ca000014 	bgt	578 <tci_run_auxiliary_timer+0xc>
     524:	02000014 	andeq	r0, r0, #20
     528:	ca709100 	bgt	1c24930 <__ccfg+0x1c04988>
void tci_run_delay_timer () {
     52c:	f2000014 	vqadd.s8	d0, d0, d4
	setdel = __pi_mintk - __pi_old;
     530:	01000014 	tsteq	r0, r4, lsl r0
     534:	14f65400 	ldrbtne	r5, [r6], #1024	; 0x400
     538:	14fe0000 	ldrbtne	r0, [lr], #0
     53c:	00010000 	andeq	r0, r1, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	00150c54 	andseq	r0, r5, r4, asr ip
     544:	00155600 	andseq	r5, r5, r0, lsl #12
     548:	56000100 	strpl	r0, [r0], -r0, lsl #2
     54c:	0000155a 	andeq	r1, r0, sl, asr r5
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	000015d2 	ldrdeq	r1, [r0], -r2
	sti_tim;
     554:	00560001 	subseq	r0, r6, r1
}
     558:	00000000 	andeq	r0, r0, r0
     55c:	16000000 	strne	r0, [r0], -r0
     560:	54000015 	strpl	r0, [r0], #-21	; 0xffffffeb
     564:	01000015 	tsteq	r0, r5, lsl r0
     568:	155a5100 	ldrbne	r5, [sl, #-256]	; 0xffffff00
	cli_aux;
     56c:	156c0000 	strbne	r0, [ip, #-0]!
     570:	00010000 	andeq	r0, r1, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	00157851 	andseq	r7, r5, r1, asr r8
     578:	00158200 	andseq	r8, r5, r0, lsl #4
     57c:	51000100 	mrspl	r0, (UNDEF: 16)
     580:	00001594 	muleq	r0, r4, r5
	sti_aux;
     584:	00001598 	muleq	r0, r8, r5
}
     588:	b8510001 	ldmdalt	r1, {r0}^
     58c:	bc000015 	stclt	0, cr0, [r0], {21}
     590:	01000015 	tsteq	r0, r5, lsl r0
void AONRTCIntHandler () {
     594:	00005100 	andeq	r5, r0, r0, lsl #2
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	00000000 	andeq	r0, r0, r0
     59c:	15160000 	ldrne	r0, [r6, #-0]
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	15540000 	ldrbne	r0, [r4, #-0]
		if (__pi_utims [0] == 0)
     5a4:	00010000 	andeq	r0, r1, r0
     5a8:	00155a55 	andseq	r5, r5, r5, asr sl
		if (*(__pi_utims [0])) {
     5ac:	00158200 	andseq	r8, r5, r0, lsl #4
     5b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			(*(__pi_utims [0]))--;
     5b4:	00001594 	muleq	r0, r4, r5
		if (__pi_utims [1] == 0)
     5b8:	00001598 	muleq	r0, r8, r5
		if (*(__pi_utims [1])) {
     5bc:	b8550001 	ldmdalt	r5, {r0}^
			aux_timer_inactive = 0;
     5c0:	d2000015 	andle	r0, r0, #21
			(*(__pi_utims [1]))--;
     5c4:	01000015 	tsteq	r0, r5, lsl r0
		if (__pi_utims [2] == 0)
     5c8:	00005500 	andeq	r5, r0, r0, lsl #10
		if (*(__pi_utims [2])) {
     5cc:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [2]))--;
     5d0:	15880000 	strne	r0, [r8]
		if (__pi_utims [3] != 0) {
     5d4:	15940000 	ldrne	r0, [r4]
			if (*(__pi_utims [3])) {
     5d8:	00010000 	andeq	r0, r1, r0
				aux_timer_inactive = 0;
     5dc:	00159855 	andseq	r9, r5, r5, asr r8
				(*(__pi_utims [3]))--;
     5e0:	0015b200 	andseq	fp, r5, r0, lsl #4
	if (__pi_systat.ledsts) {
     5e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     5e8:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
		if (__pi_systat.ledblc++ == 0) {
     5ec:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
     5f0:	00550001 	subseq	r0, r5, r1
			if (__pi_systat.ledblk) {
     5f4:	00000000 	andeq	r0, r0, r0
     5f8:	3c000000 	stccc	0, cr0, [r0], {-0}
     5fc:	54000015 	strpl	r0, [r0], #-21	; 0xffffffeb
     600:	01000015 	tsteq	r0, r5, lsl r0
     604:	00005400 	andeq	r5, r0, r0, lsl #8
				if (__pi_systat.ledsts & 0x2)
     608:	00000000 	andeq	r0, r0, r0
     60c:	15820000 	strne	r0, [r2]
     610:	15940000 	ldrne	r0, [r4]
				if (__pi_systat.ledsts & 0x4)
     614:	00010000 	andeq	r0, r1, r0
				__pi_systat.ledblk = 0;
     618:	00159854 	andseq	r9, r5, r4, asr r8
     61c:	0015ac00 	andseq	sl, r5, r0, lsl #24
			if (__pi_systat.fstblk)
     620:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     624:	000015ac 	andeq	r1, r0, ip, lsr #11
				__pi_systat.ledblc = 200;
     628:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	00530001 	subseq	r0, r3, r1
		cli_tim;
     630:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
     634:	c4000000 	strgt	r0, [r0], #-0
     638:	d2000015 	andle	r0, r0, #21
		setdel = 0;
     63c:	01000015 	tsteq	r0, r5, lsl r0
		RISE_N_SHINE;
     640:	00005100 	andeq	r5, r0, r0, lsl #2
		__pi_new += setdel;
     644:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     648:	0fa40000 	svceq	0x00a40000
     64c:	0fb00000 	svceq	0x00b00000
		aux_timer_inactive = 1;
     650:	00010000 	andeq	r0, r1, r0
     654:	00000050 	andeq	r0, r0, r0, asr r0
	...
				if (__pi_systat.ledsts & 0x2)
     664:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (__pi_systat.ledsts & 0x8)
     670:	00500001 	subseq	r0, r0, r1
	...
			cli_aux;
     680:	01000000 	mrseq	r0, (UNDEF: 0)
     684:	00005100 	andeq	r5, r0, r0, lsl #2
     688:	00000000 	andeq	r0, r0, r0
     68c:	00010000 	andeq	r0, r1, r0
     690:	00000051 	andeq	r0, r0, r1, asr r0
	...
     6a0:	52000100 	andpl	r0, r0, #0, 2
	...
	cli_tim;
     6ac:	00520001 	subseq	r0, r2, r1
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
     6c0:	00005300 	andeq	r5, r0, r0, lsl #6
     6c4:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00010000 	andeq	r0, r1, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	00000053 	andeq	r0, r0, r3, asr r0
	return NO;
     6d0:	00000000 	andeq	r0, r0, r0
			setdel = 0;
     6d4:	53000100 	movwpl	r0, #256	; 0x100
	...
		return YES;
     6e8:	00500001 	subseq	r0, r0, r1
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	94000000 	strls	r0, [r0], #-0
     6f4:	9c000014 	stcls	0, cr0, [r0], {20}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	01000014 	tsteq	r0, r4, lsl r0
	UARTDisable (UART0_BASE);
     6fc:	00005000 	andeq	r5, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     704:	13b80000 			; <UNDEFINED> instruction: 0x13b80000
	UARTConfigSetExpClk (UART0_BASE,
     708:	13be0000 			; <UNDEFINED> instruction: 0x13be0000
     70c:	00010000 	andeq	r0, r1, r0
     710:	00000050 	andeq	r0, r0, r0, asr r0
     714:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	0013ce00 	andseq	ip, r3, r0, lsl #28
     71c:	0013fa00 	andseq	pc, r3, r0, lsl #20
     720:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	000013fa 	strdeq	r1, [r0], -sl
     728:	00001400 	andeq	r1, r0, r0, lsl #8
     72c:	00520001 	subseq	r0, r2, r1
	urates [0] = rate;
     730:	48000014 	stmdami	r0, {r2, r4}
}
     734:	01000014 	tsteq	r0, r4, lsl r0
     738:	14485400 	strbne	r5, [r8], #-1024	; 0xfffffc00
     73c:	14600000 	strbtne	r0, [r0], #-0
     740:	00010000 	andeq	r0, r1, r0
     744:	00000050 	andeq	r0, r0, r0, asr r0
     748:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	0013fa00 	andseq	pc, r3, r0, lsl #20
     750:	0013fe00 	andseq	pc, r3, r0, lsl #28
     754:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	000013fe 	strdeq	r1, [r0], -lr
     75c:	00001400 	andeq	r1, r0, r0, lsl #8
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	16530001 	ldrbne	r0, [r3], -r1
     764:	1f000014 	svcne	0x00000014
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	01000014 	tsteq	r0, r4, lsl r0
     76c:	00005000 	andeq	r5, r0, r0
     770:	00000000 	andeq	r0, r0, r0
     774:	14080000 	strne	r0, [r8], #-0
     778:	14180000 	ldrne	r0, [r8], #-0
     77c:	00010000 	andeq	r0, r1, r0
     780:	00000053 	andeq	r0, r0, r3, asr r0
	switch (operation) {
     784:	00000000 	andeq	r0, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	0013ce00 	andseq	ip, r3, r0, lsl #28
     78c:	0013ec00 	andseq	lr, r3, r0, lsl #24
     790:	50000100 	andpl	r0, r0, r0, lsl #2
     794:	000013f2 	strdeq	r1, [r0], -r2
     798:	00001412 	andeq	r1, r0, r2, lsl r4
				*buf++ = uart_a_read;
     79c:	12500001 	subsne	r0, r0, #1
     7a0:	1c000014 	stcne	0, cr0, [r0], {20}
			while (len && uart_a_char_available) {
     7a4:	02000014 	andeq	r0, r0, #20
     7a8:	007c7400 	rsbseq	r7, ip, r0, lsl #8
     7ac:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     7b0:	24000000 	strcs	r0, [r0], #-0
}
     7b4:	5200000f 	andpl	r0, r0, #15
     7b8:	0100000f 	tsteq	r0, pc
			uart_a_disable_int;
     7bc:	0f605000 	svceq	0x00605000
			if (uart_a_char_available) {
     7c0:	0fa40000 	svceq	0x00a40000
				*buf++ = uart_a_read;
     7c4:	00010000 	andeq	r0, r1, r0
			uart_a_disable_int;
     7c8:	00000050 	andeq	r0, r0, r0, asr r0
     7cc:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
     7d0:	000f2c00 	andeq	r2, pc, r0, lsl #24
     7d4:	000f3800 	andeq	r3, pc, r0, lsl #16
				uart_a_enable_int;
     7d8:	53000100 	movwpl	r0, #256	; 0x100
     7dc:	00000f38 	andeq	r0, r0, r8, lsr pc
				goto Redo_rx;
     7e0:	00000f3a 	andeq	r0, r0, sl, lsr pc
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	00700002 	rsbseq	r0, r0, r2
     7e8:	00000f3e 	andeq	r0, r0, lr, lsr pc
			return -2;
     7ec:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
     7f0:	96530001 	ldrbls	r0, [r3], -r1
				uart_a_write (*buf);
     7f4:	9a00000f 	bls	838 <ioreq_uart_a+0xb4>
     7f8:	0200000f 	andeq	r0, r0, #15
			while (len && uart_a_room_in_tx) {
     7fc:	9a007300 	bls	1d404 <__exidx_end+0x1a588>
     800:	a400000f 	strge	r0, [r0], #-15
     804:	0100000f 	tsteq	r0, pc
			if (len != operation) {
     808:	00005300 	andeq	r5, r0, r0, lsl #6
			uart_a_disable_int;
     80c:	00000000 	andeq	r0, r0, r0
     810:	0f2c0000 	svceq	0x002c0000
			if (uart_a_room_in_tx) {
     814:	0f2e0000 	svceq	0x002e0000
     818:	00010000 	andeq	r0, r1, r0
				uart_a_enable_int;
     81c:	000f3e52 	andeq	r3, pc, r2, asr lr	; <UNPREDICTABLE>
     820:	000f7e00 	andeq	r7, pc, r0, lsl #28
				*buf++ = uart_a_read;
     824:	52000100 	andpl	r0, r0, #0, 2
			if (uart_a_room_in_tx) {
     828:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
				uart_a_write (*buf);
     82c:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
     830:	9a530001 	bls	14c083c <__ccfg+0x14a0894>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	a400000f 	strge	r0, [r0], #-15
     838:	0100000f 	tsteq	r0, pc
			uart_a_enable_int;
     83c:	00005200 	andeq	r5, r0, r0, lsl #4
     840:	00000000 	andeq	r0, r0, r0
     844:	12880000 	addne	r0, r8, #0
			return 0;
     848:	12900000 	addsne	r0, r0, #0
			if (len == UART_CNTRL_SETRATE) {
     84c:	00010000 	andeq	r0, r1, r0
				if (__pi_uart_setrate (*((word*)buf),
     850:	00129451 	andseq	r9, r2, r1, asr r4
     854:	00129600 	andseq	r9, r2, r0, lsl #12
     858:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (len == UART_CNTRL_GETRATE) {
     864:	000011dc 	ldrdeq	r1, [r0], -ip
				return 1;
     868:	000011f8 	strdeq	r1, [r0], -r8
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
			syserror (ENOOPER, "uai");
     870:	0a000011 	beq	8bc <UART0IntHandler+0x28>
     874:	01000012 	tsteq	r0, r2, lsl r0
     878:	00005000 	andeq	r5, r0, r0
     87c:	00000000 	andeq	r0, r0, r0
     880:	11dc0000 	bicsne	r0, ip, r0
     884:	11fa0000 	mvnsne	r0, r0
     888:	00010000 	andeq	r0, r1, r0
     88c:	0011fe51 	andseq	pc, r1, r1, asr lr	; <UNPREDICTABLE>
     890:	00120800 	andseq	r0, r2, r0, lsl #16
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a0:	000011dc 	ldrdeq	r1, [r0], -ip
     8a4:	000011fd 	strdeq	r1, [r0], -sp
     8a8:	fe520001 	cdp2	0, 5, cr0, cr2, cr1, {0}
     8ac:	06000011 			; <UNDEFINED> instruction: 0x06000011
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	01000012 	tsteq	r0, r2, lsl r0
     8b4:	00005200 	andeq	r5, r0, r0, lsl #4
		RISE_N_SHINE;
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	11dc0000 	bicsne	r0, ip, r0
		i_trigger (devevent (UART_A, READ));
     8c0:	11f40000 	mvnsne	r0, r0
     8c4:	00010000 	andeq	r0, r1, r0
     8c8:	0011f453 	andseq	pc, r1, r3, asr r4	; <UNPREDICTABLE>
     8cc:	00127800 	andseq	r7, r2, r0, lsl #16
     8d0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     8dc:	000011dc 	ldrdeq	r1, [r0], -ip
     8e0:	0000125c 	andeq	r1, r0, ip, asr r2
     8e4:	00910002 	addseq	r0, r1, r2
     8e8:	0000125c 	andeq	r1, r0, ip, asr r2
     8ec:	00001278 	andeq	r1, r0, r8, ror r2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	00910002 	addseq	r0, r1, r2
	...
		i_trigger (devevent (UART_A, WRITE));
     8fc:	0000120c 	andeq	r1, r0, ip, lsl #4
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	00001222 	andeq	r1, r0, r2, lsr #4
     904:	2a500001 	bcs	1400910 <__ccfg+0x13e0968>
		RISE_N_SHINE;
     908:	3c000012 	stccc	0, cr0, [r0], {18}
     90c:	01000012 	tsteq	r0, r2, lsl r0
     910:	124c5000 	subne	r5, ip, #0
		i_trigger (devevent (UART_A, WRITE));
     914:	12540000 	subsne	r0, r4, #0
     918:	00010000 	andeq	r0, r1, r0
     91c:	00125c50 	andseq	r5, r2, r0, asr ip
     920:	00126400 	andseq	r6, r2, r0, lsl #8
     924:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     930:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
     934:	000011be 			; <UNDEFINED> instruction: 0x000011be
     938:	c4500001 	ldrbgt	r0, [r0], #-1
     93c:	cc000011 	stcgt	0, cr0, [r0], {17}
}
     940:	01000011 	tsteq	r0, r1, lsl r0
     944:	11d05000 	bicsne	r5, r0, r0
     948:	11dc0000 	bicsne	r0, ip, r0
     94c:	00010000 	andeq	r0, r1, r0
     950:	00000050 	andeq	r0, r0, r0, asr r0
void __buttons_setirq (int val) {
     954:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	0011b800 	andseq	fp, r1, r0, lsl #16
     95c:	0011c000 	andseq	ip, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	51000100 	mrspl	r0, (UNDEF: 16)
     964:	000011c4 	andeq	r1, r0, r4, asr #3
     968:	000011ce 	andeq	r1, r0, lr, asr #3
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	d0510001 	subsle	r0, r1, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	dc000011 	stcle	0, cr0, [r0], {17}
     974:	01000011 	tsteq	r0, r1, lsl r0
     978:	00005100 	andeq	r5, r0, r0, lsl #2
	...
}
     988:	00010000 	andeq	r0, r1, r0
     98c:	00000050 	andeq	r0, r0, r0, asr r0
     990:	00000000 	andeq	r0, r0, r0
     994:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	00520001 	subseq	r0, r2, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	a2000000 	andge	r0, r0, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	a4000011 	strge	r0, [r0], #-17	; 0xffffffef
     9b8:	01000011 	tsteq	r0, r1, lsl r0
     9bc:	00005000 	andeq	r5, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	00000000 	andeq	r0, r0, r0
}
     9c4:	11a20000 			; <UNDEFINED> instruction: 0x11a20000
     9c8:	11ac0000 			; <UNDEFINED> instruction: 0x11ac0000
     9cc:	00010000 	andeq	r0, r1, r0
     9d0:	0011b051 	andseq	fp, r1, r1, asr r0
void GPIOIntHandler () {
     9d4:	0011b600 	andseq	fp, r1, r0, lsl #12
if (buttons_int) {
     9d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	buttons_disable ();
     9e4:	000011a2 	andeq	r1, r0, r2, lsr #3
	i_trigger ((aword)&__button_list);
     9e8:	000011a6 	andeq	r1, r0, r6, lsr #3
     9ec:	00520001 	subseq	r0, r2, r1
	...
     9fc:	01000000 	mrseq	r0, (UNDEF: 0)
     a00:	00005000 	andeq	r5, r0, r0
	...
     a10:	00010000 	andeq	r0, r1, r0
	RISE_N_SHINE;
     a14:	00000051 	andeq	r0, r0, r1, asr r0
	...
if (pin_sensor_int) {
     a24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	i_trigger ((aword)(&__input_pins));
     a30:	00500001 	subseq	r0, r0, r1
	...
     a40:	01000000 	mrseq	r0, (UNDEF: 0)
     a44:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	__pinsen_disable_and_clear;
     a54:	00010000 	andeq	r0, r1, r0
	RISE_N_SHINE;
     a58:	00000050 	andeq	r0, r0, r0, asr r0
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     a74:	00510001 	subseq	r0, r1, r1
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	01000000 	mrseq	r0, (UNDEF: 0)
     a88:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	00010000 	andeq	r0, r1, r0
     a9c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	00510001 	subseq	r0, r1, r1
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	94000000 	strls	r0, [r0], #-0
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	98000011 	stmdals	r0, {r0, r4}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	01000011 	tsteq	r0, r1, lsl r0
     acc:	11985000 	orrsne	r5, r8, r0
     ad0:	11a20000 			; <UNDEFINED> instruction: 0x11a20000
     ad4:	00010000 	andeq	r0, r1, r0
		if (port_confs [i] & 0x80)
     ad8:	00000053 	andeq	r0, r0, r3, asr r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	00119800 	andseq	r9, r1, r0, lsl #16
		if (port_confs [i] & 0x40)
     ae4:	0011a200 	andseq	sl, r1, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	all_leds_blink;
     afc:	00500001 	subseq	r0, r0, r1
     b00:	00000000 	andeq	r0, r0, r0
     b04:	01000000 	mrseq	r0, (UNDEF: 0)
     b08:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	00010000 	andeq	r0, r1, r0
     b1c:	00000052 	andeq	r0, r0, r2, asr r0
     b20:	00000000 	andeq	r0, r0, r0
     b24:	52000100 	andpl	r0, r0, #0, 2
	...
	IntEnable (INT_AON_RTC_COMB);
     b38:	00500001 	subseq	r0, r0, r1
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	70000000 	andvc	r0, r0, r0
	__pi_malloc_init ();
     b44:	78000011 	stmdavc	r0, {r0, r4}
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	01000011 	tsteq	r0, r1, lsl r0
     b4c:	117a5000 	cmnne	sl, r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	117e0000 	cmnne	lr, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	00010000 	andeq	r0, r1, r0
     b58:	00117e50 	andseq	r7, r1, r0, asr lr
     b5c:	00119400 	andseq	r9, r1, r0, lsl #8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	53000100 	movwpl	r0, #256	; 0x100
	...
	urates [0] = UART_RATE / 100;
     b74:	00500001 	subseq	r0, r0, r1
     b78:	00000000 	andeq	r0, r0, r0
	reinit_uart ();
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
	EXTRA_INITIALIZERS;
     b80:	00005000 	andeq	r5, r0, r0
	...
     b90:	00010000 	andeq	r0, r1, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	00000050 	andeq	r0, r0, r0, asr r0
     b98:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	00001360 	andeq	r1, r0, r0, ror #6
     bac:	00001372 	andeq	r1, r0, r2, ror r3
     bb0:	72500001 	subsvc	r0, r0, #1
	IntEnable (INT_UART0_COMB);
     bb4:	ae000013 	mcrge	0, 0, r0, cr0, cr3, {0}
     bb8:	01000013 	tsteq	r0, r3, lsl r0
}
     bbc:	00005700 	andeq	r5, r0, r0, lsl #14
	tci_run_auxiliary_timer ();
     bc0:	00000000 	andeq	r0, r0, r0
		diag ("");
     bc4:	13720000 	cmnne	r2, #0
     bc8:	13ae0000 			; <UNDEFINED> instruction: 0x13ae0000
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	00010000 	andeq	r0, r1, r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	00000056 	andeq	r0, r0, r6, asr r0
		diag ("Leftover RAM: %d bytes",
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	00137200 	andseq	r7, r3, r0, lsl #4
     bdc:	00137900 	andseq	r7, r3, r0, lsl #18
     be0:	50000100 	andpl	r0, r0, r0, lsl #2
     be4:	0000137a 	andeq	r1, r0, sl, ror r3
     be8:	0000139b 	muleq	r0, fp, r3
     bec:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     bf0:	9e000013 	mcrls	0, 0, r0, cr0, cr3, {0}
     bf4:	01000013 	tsteq	r0, r3, lsl r0
     bf8:	13a45800 			; <UNDEFINED> instruction: 0x13a45800
     bfc:	13b80000 			; <UNDEFINED> instruction: 0x13b80000
     c00:	00010000 	andeq	r0, r1, r0
     c04:	00000050 	andeq	r0, r0, r0, asr r0
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	00137200 	andseq	r7, r3, r0, lsl #4
     c10:	00139e00 	andseq	r9, r3, r0, lsl #28
     c14:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     c18:	000013a4 	andeq	r1, r0, r4, lsr #7
     c1c:	000013ae 	andeq	r1, r0, lr, lsr #7
     c20:	00540001 	subseq	r0, r4, r1
     c24:	00000000 	andeq	r0, r0, r0
     c28:	84000000 	strhi	r0, [r0], #-0
     c2c:	9e000013 	mcrls	0, 0, r0, cr0, cr3, {0}
__attribute__ ((noreturn)) void __pi_release () {
     c30:	01000013 	tsteq	r0, r3, lsl r0
     c34:	13a45800 			; <UNDEFINED> instruction: 0x13a45800
     c38:	13aa0000 			; <UNDEFINED> instruction: 0x13aa0000
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	00010000 	andeq	r0, r1, r0
	check_stack_overflow;
     c40:	00000058 	andeq	r0, r0, r8, asr r0
     c44:	00000000 	andeq	r0, r0, r0
     c48:	00131000 	andseq	r1, r3, r0
	update_n_wake (MAX_WORD, NO);
     c4c:	00131800 	andseq	r1, r3, r0, lsl #16
     c50:	50000100 	andpl	r0, r0, r0, lsl #2
     c54:	00001318 	andeq	r1, r0, r8, lsl r3
	for_all_tasks (__pi_curr) {
     c58:	00001322 	andeq	r1, r0, r2, lsr #6
     c5c:	28500001 	ldmdacs	r0, {r0}^
     c60:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	01000013 	tsteq	r0, r3, lsl r0
	__SLEEP;
     c68:	13485000 	movtne	r5, #32768	; 0x8000
     c6c:	13520000 	cmpne	r2, #0
     c70:	00010000 	andeq	r0, r1, r0
     c74:	00000050 	andeq	r0, r0, r0, asr r0
	system_event_count ++;
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	00131e00 	andseq	r1, r3, r0, lsl #28
	switch (__pi_systat.effpdm) {
     c80:	00135000 	andseq	r5, r3, r0
     c84:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     c88:	00001350 	andeq	r1, r0, r0, asr r3
     c8c:	00001352 	andeq	r1, r0, r2, asr r3
			__WFI ();
     c90:	52520001 	subspl	r0, r2, #1
     c94:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
     c98:	01000013 	tsteq	r0, r3, lsl r0
	check_stack_overflow;
     c9c:	00005400 	andeq	r5, r0, r0, lsl #8
     ca0:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	0eee0000 	cdpeq	0, 14, cr0, cr14, cr0, {0}
     ca8:	0f200000 	svceq	0x00200000
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	00010000 	andeq	r0, r1, r0
			goto Redo;
     cb0:	00000056 	andeq	r0, r0, r6, asr r0
	for_all_tasks (__pi_curr) {
     cb4:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	000f0400 	andeq	r0, pc, r0, lsl #8
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	000f0e00 	andeq	r0, pc, r0, lsl #28
     cc0:	53000100 	movwpl	r0, #256	; 0x100
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cd4:	00500001 	subseq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	01000000 	mrseq	r0, (UNDEF: 0)
			__WFI ();
     ce0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cf0:	00010000 	andeq	r0, r1, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf4:	00000050 	andeq	r0, r0, r0, asr r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d08:	00001138 	andeq	r1, r0, r8, lsr r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0c:	00001151 	andeq	r1, r0, r1, asr r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	00500001 	subseq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d14:	00000000 	andeq	r0, r0, r0
     d18:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d1c:	4e000011 	mcrmi	0, 0, r0, cr0, cr1, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	01000011 	tsteq	r0, r1, lsl r0
     d24:	00005100 	andeq	r5, r0, r0, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	11140000 	tstne	r4, r0
     d30:	11280000 			; <UNDEFINED> instruction: 0x11280000
     d34:	00010000 	andeq	r0, r1, r0
     d38:	00112850 	andseq	r2, r1, r0, asr r8
     d3c:	00112c00 	andseq	r2, r1, r0, lsl #24
			SysCtrlSetRechargeBeforePowerDown
     d40:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     d44:	00001130 	andeq	r1, r0, r0, lsr r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	00001138 	andeq	r1, r0, r8, lsr r1
     d4c:	00500001 	subseq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	00000000 	andeq	r0, r0, r0
     d54:	14000000 	strne	r0, [r0], #-0
     d58:	2b000011 	blcs	da4 <__pi_release+0x174>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5c:	01000011 	tsteq	r0, r1, lsl r0
     d60:	11305100 	teqne	r0, r0, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	11380000 	teqne	r8, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	00010000 	andeq	r0, r1, r0
     d6c:	00000051 	andeq	r0, r0, r1, asr r0
     d70:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	00111c00 	andseq	r1, r1, r0, lsl #24
			while (!(AONWUCPowerStatusGet () &
     d78:	00112b00 	andseq	r2, r1, r0, lsl #22
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	53000100 	movwpl	r0, #256	; 0x100
     d80:	00001130 	andeq	r1, r0, r0, lsr r1
     d84:	00001138 	andeq	r1, r0, r8, lsr r1
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	00530001 	subseq	r0, r3, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	01000000 	mrseq	r0, (UNDEF: 0)
     d9c:	00005000 	andeq	r5, r0, r0
	...
			reinit_uart ();
     dac:	00010000 	andeq	r0, r1, r0
     db0:	00000051 	andeq	r0, r0, r1, asr r0
     db4:	00000000 	andeq	r0, r0, r0
}
     db8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dcc:	00520001 	subseq	r0, r2, r1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	01000000 	mrseq	r0, (UNDEF: 0)
     dd8:	00005200 	andeq	r5, r0, r0, lsl #4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ddc:	00000000 	andeq	r0, r0, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	10f40000 	rscsne	r0, r4, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	10fe0000 	rscsne	r0, lr, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	00010000 	andeq	r0, r1, r0
     dec:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	00000000 	andeq	r0, r0, r0
     df4:	00109800 	andseq	r9, r0, r0, lsl #16
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	00109e00 	andseq	r9, r0, r0, lsl #28
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			PRCMPowerDomainOff (
     e08:	00001460 	andeq	r1, r0, r0, ror #8
     e0c:	00001466 	andeq	r1, r0, r6, ror #8
	__SLEEP;
     e10:	66500001 	ldrbvs	r0, [r0], -r1
     e14:	94000014 	strls	r0, [r0], #-20	; 0xffffffec
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	01000014 	tsteq	r0, r4, lsl r0
	goto Redo;
     e1c:	00005500 	andeq	r5, r0, r0, lsl #10
     e20:	00000000 	andeq	r0, r0, r0
     e24:	14600000 	strbtne	r0, [r0], #-0
     e28:	146b0000 	strbtne	r0, [fp], #-0
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	00146b51 	andseq	r6, r4, r1, asr fp
     e34:	00149400 	andseq	r9, r4, r0, lsl #8
     e38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     e44:	0000147c 	andeq	r1, r0, ip, ror r4
     e48:	00001480 	andeq	r1, r0, r0, lsl #9
     e4c:	82530001 	subshi	r0, r3, #1
     e50:	86000014 			; <UNDEFINED> instruction: 0x86000014
     e54:	01000014 	tsteq	r0, r4, lsl r0
     e58:	14865300 	strne	r5, [r6], #768	; 0x300
     e5c:	14940000 	ldrne	r0, [r4], #0
     e60:	00010000 	andeq	r0, r1, r0
     e64:	00000052 	andeq	r0, r0, r2, asr r0
	...
     e74:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int main (void) {
     e88:	00510001 	subseq	r0, r1, r1
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	01000000 	mrseq	r0, (UNDEF: 0)
	system_init ();
     e9c:	00005000 	andeq	r5, r0, r0
	tcv_init ();
     ea0:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	00010000 	andeq	r0, r1, r0
     ea8:	00000050 	andeq	r0, r0, r0, asr r0
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	53000100 	movwpl	r0, #256	; 0x100
	...
	delay (16, 0);
     ec4:	00530001 	subseq	r0, r3, r1
	...
	__pi_release ();
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005000 	andeq	r5, r0, r0
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	00010000 	andeq	r0, r1, r0
     ee4:	00000053 	andeq	r0, r0, r3, asr r0
static void killev (__pi_pcb_t *pid) {
     ee8:	00000000 	andeq	r0, r0, r0
	wfun = (aword)(pid->code);
     eec:	53000100 	movwpl	r0, #256	; 0x100
	...
			    || i->Events [j] . Event == wfun
     f00:	00500001 	subseq	r0, r0, r1
		for (j = 0; j < nevents (i); j++) {
     f04:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == (aword)pid
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
     f0c:	00005000 	andeq	r5, r0, r0
	...
	for_all_tasks (i) {
     f1c:	00010000 	andeq	r0, r1, r0
}
     f20:	00000050 	andeq	r0, r0, r0, asr r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	00000000 	andeq	r0, r0, r0
static void qfree (aword *ch) {
     f28:	53000100 	movwpl	r0, #256	; 0x100
	...
	m_setnextp (ch, chunk);
     f34:	00530001 	subseq	r0, r3, r1
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f44:	01000000 	mrseq	r0, (UNDEF: 0)
     f48:	00005000 	andeq	r5, r0, r0
			m_setnextp (cc, m_nextp (chunk));
     f4c:	00000000 	andeq	r0, r0, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	00010000 	andeq	r0, r1, r0
     f54:	00000050 	andeq	r0, r0, r0, asr r0
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	53000100 	movwpl	r0, #256	; 0x100
	...
			m_setnextp (cc, m_nextp (chunk));
     f70:	00000fcc 	andeq	r0, r0, ip, asr #31
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	00000fd2 	ldrdeq	r0, [r0], -r2
     f78:	00500001 	subseq	r0, r0, r1
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	cc000000 	stcgt	0, cr0, [r0], {-0}
     f84:	d500000f 	strle	r0, [r0, #-15]
     f88:	0100000f 	tsteq	r0, pc
			if (m_size (chunk) >= m_size (ch))
     f8c:	00005100 	andeq	r5, r0, r0, lsl #2
     f90:	00000000 	andeq	r0, r0, r0
     f94:	0fda0000 	svceq	0x00da0000
		chunk = m_nextp (chunk))
     f98:	10180000 	andsne	r0, r8, r0
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00101c54 	andseq	r1, r0, r4, asr ip
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	00106a00 	andseq	r6, r0, r0, lsl #20
	diag_wait (a);
     fa8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	diag_wchar (c, a);
     fac:	0000106c 	andeq	r1, r0, ip, rrx
     fb0:	00001076 	andeq	r1, r0, r6, ror r0
}
     fb4:	00540001 	subseq	r0, r4, r1
     fb8:	00000000 	andeq	r0, r0, r0
	syserror (ESTATE, "state");
     fbc:	12000000 	andne	r0, r0, #0
     fc0:	14000010 	strne	r0, [r0], #-16
     fc4:	01000010 	tsteq	r0, r0, lsl r0
     fc8:	101c5000 	andsne	r5, ip, r0
void update_n_wake (word min, Boolean force) {
     fcc:	106c0000 	rsbne	r0, ip, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	00010000 	andeq	r0, r1, r0
     fd4:	00000050 	andeq	r0, r0, r0, asr r0
     fd8:	00000000 	andeq	r0, r0, r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fdc:	0010ac00 	andseq	sl, r0, r0, lsl #24
     fe0:	0010c000 	andseq	ip, r0, r0
     fe4:	50000100 	andpl	r0, r0, r0, lsl #2
     fe8:	000010c6 	andeq	r1, r0, r6, asr #1
     fec:	000010e0 	andeq	r1, r0, r0, ror #1
     ff0:	00500001 	subseq	r0, r0, r1
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	ac000000 	stcge	0, cr0, [r0], {-0}
     ffc:	c2000010 	andgt	r0, r0, #16
    1000:	01000010 	tsteq	r0, r0, lsl r0
    1004:	10c65100 	sbcne	r5, r6, r0, lsl #2
    1008:	10cc0000 	sbcne	r0, ip, r0
    100c:	00010000 	andeq	r0, r1, r0
		for_all_tasks (i) {
    1010:	00000051 	andeq	r0, r0, r1, asr r0
	__pi_mintk = znew + min;
    1014:	00000000 	andeq	r0, r0, r0
    1018:	0010be00 	andseq	fp, r0, r0, lsl #28
			if (!twaiting (i))
    101c:	0010c000 	andseq	ip, r0, r0
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    102c:	000010be 	strheq	r1, [r0], -lr
    1030:	000010c2 	andeq	r1, r0, r2, asr #1
    1034:	00510001 	subseq	r0, r1, r1
    1038:	00000000 	andeq	r0, r0, r0
    103c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1040:	d6000012 			; <UNDEFINED> instruction: 0xd6000012
    1044:	01000012 	tsteq	r0, r2, lsl r0
    1048:	12dc5000 	sbcsne	r5, ip, #0
    104c:	12ef0000 	rscne	r0, pc, #0
    1050:	00010000 	andeq	r0, r1, r0
				wakeuptm (i);
    1054:	00000050 	andeq	r0, r0, r0, asr r0
    1058:	00000000 	andeq	r0, r0, r0
		for_all_tasks (i) {
    105c:	0012d400 	andseq	sp, r2, r0, lsl #8
				d = i->Timer - znew;
    1060:	0012d600 	andseq	sp, r2, r0, lsl #12
    1064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_old = znew;
    1078:	00500001 	subseq	r0, r0, r1
}
    107c:	00000000 	andeq	r0, r0, r0
	TCI_RUN_DELAY_TIMER;
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1084:	00005000 	andeq	r5, r0, r0
	...
    1094:	00010000 	andeq	r0, r1, r0
void proceed (word state) {
    1098:	00000055 	andeq	r0, r0, r5, asr r0
	...
	release;
    10a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	00500001 	subseq	r0, r0, r1
	...
		syserror (ENEVENTS, "sw");
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
	setestate (__pi_curr->Events [j], state, event);
    10c8:	00005000 	andeq	r5, r0, r0
	incwait (__pi_curr);
    10cc:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    10d0:	00010000 	andeq	r0, r1, r0
}
    10d4:	00000050 	andeq	r0, r0, r0, asr r0
    10d8:	00000000 	andeq	r0, r0, r0
    10dc:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
	...
		for (j = 0; j < nevents (i); j++) {
    10f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == event) {
    10fc:	00500001 	subseq	r0, r0, r1
	...
	for_all_tasks (i) {
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1110:	00005400 	andeq	r5, r0, r0, lsl #8
aword __pi_join (aword pid, word st) {
    1114:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1118:	00010000 	andeq	r0, r1, r0
    111c:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    112c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void delay (word d, word state) {
    1138:	00500001 	subseq	r0, r0, r1
	...
	settstate (__pi_curr, state);
    1148:	01000000 	mrseq	r0, (UNDEF: 0)
	update_n_wake (d, YES);
    114c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	inctimer (__pi_curr);
    115c:	00010000 	andeq	r0, r1, r0
    1160:	00000050 	andeq	r0, r0, r0, asr r0
    1164:	00000000 	andeq	r0, r0, r0
}
    1168:	73000200 	movwvc	r0, #512	; 0x200
	...
	for_all_tasks (i)
    117c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1188:	00500001 	subseq	r0, r0, r1
	...
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	01000000 	mrseq	r0, (UNDEF: 0)
}
    119c:	00005100 	andeq	r5, r0, r0, lsl #2
	for (i = 0; *(s+i) != '\0'; i++);
    11a0:	00000000 	andeq	r0, r0, r0
	while (n--)
    11a4:	00010000 	andeq	r0, r1, r0
    11a8:	00000051 	andeq	r0, r0, r1, asr r0
	...
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (ioreq [loc] != NULL)
    11c4:	00530001 	subseq	r0, r3, r1
	...
}
    11d4:	01000000 	mrseq	r0, (UNDEF: 0)
    11d8:	00005000 	andeq	r5, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00010000 	andeq	r0, r1, r0
    11e4:	00000050 	andeq	r0, r0, r0, asr r0
    11e8:	00000000 	andeq	r0, r0, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ec:	73000200 	movwvc	r0, #512	; 0x200
	...
	if (len == 0)
    1200:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (ret >= 0)
    120c:	00550001 	subseq	r0, r5, r1
	if (ret == -1) {
    1210:	00000000 	andeq	r0, r0, r0
    1214:	01000000 	mrseq	r0, (UNDEF: 0)
		if (retry == WNONE)
    1218:	00005000 	andeq	r5, r0, r0
		iowait (dev, operation, retry);
    121c:	00000000 	andeq	r0, r0, r0
    1220:	00010000 	andeq	r0, r1, r0
    1224:	00000055 	andeq	r0, r0, r5, asr r0
	...
		if (retry != WNONE) {
    1234:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			(ioreq [dev]) (NONE, buf, len);
    1240:	00570001 	subseq	r0, r7, r1
    1244:	00000000 	andeq	r0, r0, r0
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
		(ioreq [dev]) (NONE, buf, len);
    124c:	00005100 	andeq	r5, r0, r0, lsl #2
    1250:	00000000 	andeq	r0, r0, r0
    1254:	00010000 	andeq	r0, r1, r0
}
    1258:	00000057 	andeq	r0, r0, r7, asr r0
	...
		delay (-ret - 2, retry);
    1268:	52000100 	andpl	r0, r0, #0, 2
	...
		release;
    1274:	00540001 	subseq	r0, r4, r1
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	00000000 	andeq	r0, r0, r0
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
    1280:	00005200 	andeq	r5, r0, r0, lsl #4
    1284:	00000000 	andeq	r0, r0, r0
    1288:	00010000 	andeq	r0, r1, r0
		syserror (ERESOURCE, "mal1");
    128c:	00000054 	andeq	r0, r0, r4, asr r0
	...
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a8:	00510001 	subseq	r0, r1, r1
	...
}
    12b8:	01000000 	mrseq	r0, (UNDEF: 0)
    12bc:	00005000 	andeq	r5, r0, r0
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	00010000 	andeq	r0, r1, r0
    12d0:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "malg");
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	QFREE;
    12ec:	00510001 	subseq	r0, r1, r1
	if (mevent [MA_NP] . nwait) {
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
		trigger ((aword)(&(mevent [MA_NP])));
    12f8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
}
    1308:	00010000 	andeq	r0, r1, r0
    130c:	00000052 	andeq	r0, r0, r2, asr r0
void kill (aword pid) {
    1310:	00000000 	andeq	r0, r0, r0
		pid = (aword) __pi_curr;
    1314:	52000100 	andpl	r0, r0, #0, 2
	...
		if ((aword)i == pid) {
    1328:	00500001 	subseq	r0, r0, r1
    132c:	00000000 	andeq	r0, r0, r0
				__PCB = i->Next;
    1330:	07000000 	streq	r0, [r0, -r0]
			killev (i);
    1334:	32007400 	andcc	r7, r0, #0, 8
			ufree (i);
    1338:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	...
				release;
    1344:	00500001 	subseq	r0, r0, r1
	...
}
    1354:	01000000 	mrseq	r0, (UNDEF: 0)
    1358:	00005000 	andeq	r5, r0, r0
	...
	for (i = __PCB; i != NULL; ) {
    1368:	00010000 	andeq	r0, r1, r0
			if (i == __pi_curr)
    136c:	00000051 	andeq	r0, r0, r1, asr r0
	...
		if (i->code == fun) {
    137c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				__PCB = k;
    1388:	00550001 	subseq	r0, r5, r1
	...
			ufree (i);
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
			i = k;
    139c:	00005100 	andeq	r5, r0, r0, lsl #2
    13a0:	00000000 	andeq	r0, r0, r0
				j->Next = k;
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	00000056 	andeq	r0, r0, r6, asr r0
	...
	if (size < 8)
    13b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		_size = (((aword)size) + 3) >> 2;
    13c4:	00540001 	subseq	r0, r4, r1
	...
		if (mevent [MA_NP] . nfail != 255)
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
			mevent [MA_NP] . nfail ++;
    13d8:	00005000 	andeq	r5, r0, r0
		mnfree [MA_NP] = 0;
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	00010000 	andeq	r0, r1, r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (m_size (chunk) >= _size)
    13f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		m_setnextp (cc, m_nextp (chunk));
    1400:	00510001 	subseq	r0, r1, r1
	...
			cc = chunk + _size + m_hdrlen;
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
    1414:	00005000 	andeq	r5, r0, r0
			m_size (cc) = waste - m_hdrlen;
    1418:	00000000 	andeq	r0, r0, r0
			QFREE;
    141c:	00010000 	andeq	r0, r1, r0
		mevent [MA_NP] . nfail = 0;
    1420:	00000050 	andeq	r0, r0, r0, asr r0
	...
		mcfree [MA_NP] -= m_size (chunk);
    1430:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		m_size (chunk) |= MALLOC_UMASK;
    143c:	00510001 	subseq	r0, r1, r1
	...
}
    144c:	01000000 	mrseq	r0, (UNDEF: 0)
    1450:	00005000 	andeq	r5, r0, r0
    1454:	00000000 	andeq	r0, r0, r0
    1458:	00010000 	andeq	r0, r1, r0
    145c:	00000050 	andeq	r0, r0, r0, asr r0
aword __pi_fork (fsmcode func, aword data) {
    1460:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1464:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((j = __PCB) == NULL)
    1470:	00500001 	subseq	r0, r0, r1
	i->Next = NULL;
    1474:	00000000 	andeq	r0, r0, r0
	i->data = data;
    1478:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((j = __PCB) == NULL)
    147c:	00005000 	andeq	r5, r0, r0
	...
	return (aword) i;
    148c:	00010000 	andeq	r0, r1, r0
    1490:	00000051 	andeq	r0, r0, r1, asr r0
	if (mevent [MA_NP] . nwait != 255)
    1494:	00000000 	andeq	r0, r0, r0
    1498:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	wait ((aword)(&(mevent [MA_NP])), state);
    14a4:	00510001 	subseq	r0, r1, r1
	...
void diag (const char *mess, ...) {
    14b4:	01000000 	mrseq	r0, (UNDEF: 0)
	diag_disable_int (a, is);
    14b8:	00005200 	andeq	r5, r0, r0, lsl #4
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	00010000 	andeq	r0, r1, r0
				d = (bc == 16) ? 10000 : 1000000000;
    14c4:	00000052 	andeq	r0, r0, r2, asr r0
	diag_disable_int (a, is);
    14c8:	00000000 	andeq	r0, r0, r0
	while (*mess != '\0') {
    14cc:	52000100 	andpl	r0, r0, #0, 2
	...
	diag_wait (a);
    14e0:	00500001 	subseq	r0, r0, r1
	...
}
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
    14f4:	00005000 	andeq	r5, r0, r0
		if (*mess == '%') {
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	00010000 	andeq	r0, r1, r0
			if (*mess == 'l') {
    1500:	00000050 	andeq	r0, r0, r0, asr r0
	...
				bc = 32;
    1510:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (*mess) {
    151c:	00540001 	subseq	r0, r4, r1
	...
				dgout (*mess);
    152c:	01000000 	mrseq	r0, (UNDEF: 0)
    1530:	00005100 	andeq	r5, r0, r0, lsl #2
	...
					(val >> (bc - i)) & 0xf];
    1540:	00010000 	andeq	r0, r1, r0
    1544:	00000052 	andeq	r0, r0, r2, asr r0
					dgout (v);
    1548:	00000000 	andeq	r0, r0, r0
    154c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				if ((val >> (bc - 1)) & 1) {
    1560:	00500001 	subseq	r0, r0, r1
					dgout ('-');
    1564:	00000000 	andeq	r0, r0, r0
    1568:	01000000 	mrseq	r0, (UNDEF: 0)
						val |= 0xffff0000;
    156c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
				d = (bc == 16) ? 10000 : 1000000000;
    157c:	00010000 	andeq	r0, r1, r0
    1580:	00000051 	andeq	r0, r0, r1, asr r0
					v = (word) (val / d);
    1584:	00000000 	andeq	r0, r0, r0
					if (v || d == 1) break;
    1588:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					dgout (v + '0');
    159c:	00520001 	subseq	r0, r2, r1
    15a0:	00000000 	andeq	r0, r0, r0
					d /= 10;
    15a4:	01000000 	mrseq	r0, (UNDEF: 0)
					val = val - (v * d);
    15a8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
				if (bc == 16)
    15b8:	00010000 	andeq	r0, r1, r0
				d = (bc == 16) ? 10000 : 1000000000;
    15bc:	00000050 	andeq	r0, r0, r0, asr r0
					val &= 0xffff;
    15c0:	00000000 	andeq	r0, r0, r0
					dgout (*s);
    15c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			dgout (*mess++);
    15d8:	00510001 	subseq	r0, r1, r1
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	01000000 	mrseq	r0, (UNDEF: 0)
    15e4:	00005100 	andeq	r5, r0, r0, lsl #2
}
    15e8:	00000000 	andeq	r0, r0, r0
    while(1)
    15ec:	00010000 	andeq	r0, r1, r0
{
    15f0:	00000051 	andeq	r0, r0, r1, asr r0
	...
    __asm("    ldr     r0, =_bss\n"
    1600:	52000100 	andpl	r0, r0, #0, 2
	...
    160c:	00540001 	subseq	r0, r4, r1
    1610:	00000000 	andeq	r0, r0, r0
   main();
    1614:	01000000 	mrseq	r0, (UNDEF: 0)
    FaultISR();
    1618:	00005200 	andeq	r5, r0, r0, lsl #4
        *pui32Dest++ = *pui32Src++;
    161c:	00000000 	andeq	r0, r0, r0
    1620:	00010000 	andeq	r0, r1, r0
    1624:	00000054 	andeq	r0, r0, r4, asr r0
    1628:	00000000 	andeq	r0, r0, r0
    162c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1638:	00540001 	subseq	r0, r4, r1
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1648:	01000000 	mrseq	r0, (UNDEF: 0)
    164c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    165c:	00010000 	andeq	r0, r1, r0
	for (b = 0, i = 0; i < 8; i++) {
    1660:	00000050 	andeq	r0, r0, r0, asr r0
}
    1664:	00000000 	andeq	r0, r0, r0
    1668:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    167c:	00500001 	subseq	r0, r0, r1
		if (b & 0x80)
    1680:	00000000 	andeq	r0, r0, r0
    1684:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1688:	00005000 	andeq	r5, r0, r0
	for (i = 0; i < 8; i++) {
    168c:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    1690:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < 8; i++) {
    1694:	00000050 	andeq	r0, r0, r0, asr r0
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    16a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    16b0:	00500001 	subseq	r0, r0, r1
    16b4:	00000000 	andeq	r0, r0, r0
static void wwait (word st, word del) {
    16b8:	01000000 	mrseq	r0, (UNDEF: 0)
    16bc:	00005000 	andeq	r5, r0, r0
    16c0:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    16c4:	00010000 	andeq	r0, r1, r0
    16c8:	00000050 	andeq	r0, r0, r0, asr r0
	...
	r = get_byte ();
    16d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    16e4:	00510001 	subseq	r0, r1, r1
		if (st == WNONE)
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	01000000 	mrseq	r0, (UNDEF: 0)
			mdelay (1);
    16f0:	00005100 	andeq	r5, r0, r0, lsl #2
    16f4:	00000000 	andeq	r0, r0, r0
			delay (del, st);
    16f8:	00010000 	andeq	r0, r1, r0
    16fc:	00000051 	andeq	r0, r0, r1, asr r0
	...
static void ready () {
    170c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		wwait (WNONE, 1);
    1718:	0070000a 	rsbseq	r0, r0, sl
    171c:	00032432 	andeq	r2, r3, r2, lsr r4
	dstat = 0;
    1720:	22000000 	andcs	r0, r0, #0
	...
    172c:	00540001 	subseq	r0, r4, r1
	udelay (1);
    1730:	00000000 	andeq	r0, r0, r0
    1734:	0a000000 	beq	173c <ready+0x30>
	udelay (1);
    1738:	32007000 	andcc	r7, r0, #0
		dopen = DOPEN_TEMP;
    173c:	00000324 	andeq	r0, r0, r4, lsr #6
    1740:	00220000 	eoreq	r0, r2, r0
    1744:	00000000 	andeq	r0, r0, r0
    1748:	01000000 	mrseq	r0, (UNDEF: 0)
static void cclose () {
    174c:	00005400 	andeq	r5, r0, r0, lsl #8
	if (dopen == DOPEN_TEMP) {
    1750:	00000000 	andeq	r0, r0, r0
    1754:	000a0000 	andeq	r0, sl, r0
		wwait (WNONE, 1);
    1758:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    175c:	00000003 	andeq	r0, r0, r3
	cmd_0 (CMD_DP);
    1760:	00002200 	andeq	r2, r0, r0, lsl #4
	...
word ee_open () {
    1770:	00010000 	andeq	r0, r1, r0
	ready ();
    1774:	00000055 	andeq	r0, r0, r5, asr r0
	dopen = DOPEN_PERM;
    1778:	00000000 	andeq	r0, r0, r0
    177c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		cclose ();
    1790:	00540001 	subseq	r0, r4, r1
}
    1794:	00000000 	andeq	r0, r0, r0
int ser_in (word st, char *buf, int len) {
    1798:	01000000 	mrseq	r0, (UNDEF: 0)
    179c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
		if ((prcs = running (__inserial)) == 0) {
    17ac:	00010000 	andeq	r0, r1, r0
			prcs = runthread (__inserial);
    17b0:	00000050 	andeq	r0, r0, r0, asr r0
    17b4:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    17b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		join (prcs, st);
    17c4:	00500001 	subseq	r0, r0, r1
	...
	if (prcs >= len)
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
		prcs = len-1;
    17d8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	ufree (__inpline);
    17e8:	00010000 	andeq	r0, r1, r0
	__inpline = NULL;
    17ec:	00000050 	andeq	r0, r0, r0, asr r0
	...
		prcs = strlen (__inpline);
    17fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		return 0;
    1808:	00500001 	subseq	r0, r0, r1
    180c:	00000000 	andeq	r0, r0, r0
int ser_outf (word st, const char *m, ...) {
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
    1814:	00005000 	andeq	r5, r0, r0
	if ((prcs = running (__outserial)) != 0) {
    1818:	00000000 	andeq	r0, r0, r0
    181c:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    1820:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1830:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		umwait (st);
    183c:	00510001 	subseq	r0, r1, r1
	if (runstrand (__outserial, buf) == 0) {
    1840:	00000000 	andeq	r0, r0, r0
    1844:	01000000 	mrseq	r0, (UNDEF: 0)
    1848:	00005100 	andeq	r5, r0, r0, lsl #2
	...
}
    1858:	00010000 	andeq	r0, r1, r0
    185c:	00000053 	andeq	r0, r0, r3, asr r0
    1860:	00000000 	andeq	r0, r0, r0
int ser_inf (word st, const char *fmt, ...) {
    1864:	70000a00 	andvc	r0, r0, r0, lsl #20
    1868:	03243200 			; <UNDEFINED> instruction: 0x03243200
	if (fmt == NULL)
    186c:	00000000 	andeq	r0, r0, r0
	if (__inpline == NULL) {
    1870:	00000022 	andeq	r0, r0, r2, lsr #32
		if ((prcs = running (__inserial)) == 0) {
    1874:	00000000 	andeq	r0, r0, r0
    1878:	53000100 	movwpl	r0, #256	; 0x100
	...
			if (prcs == 0) {
    1884:	0070000a 	rsbseq	r0, r0, sl
				npwait (st);
    1888:	00032432 	andeq	r2, r3, r2, lsr r4
		release;
    188c:	22000000 	andcs	r0, r0, #0
	...
	va_start (ap, fmt);
    1898:	00530001 	subseq	r0, r3, r1
	prcs = vscan (__inpline, fmt, ap);
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	0a000000 	beq	18a8 <ser_inf+0x44>
	ufree (__inpline);
    18a4:	32007000 	andcc	r7, r0, #0
	__inpline = NULL;
    18a8:	00000324 	andeq	r0, r0, r4, lsr #6
}
    18ac:	00220000 	eoreq	r0, r2, r0
	...
		return 0;
    18bc:	01000000 	mrseq	r0, (UNDEF: 0)
    18c0:	00005000 	andeq	r5, r0, r0
strand (__outserial, const char*)
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	00010000 	andeq	r0, r1, r0
    18cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
	ptr = data;
    18dc:	53000100 	movwpl	r0, #256	; 0x100
	...
		len = strlen (ptr);
    18e8:	00530001 	subseq	r0, r3, r1
    18ec:	00000000 	andeq	r0, r0, r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18f0:	01000000 	mrseq	r0, (UNDEF: 0)
    18f4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	len -= quant;
    1904:	00010000 	andeq	r0, r1, r0
    1908:	00000052 	andeq	r0, r0, r2, asr r0
    190c:	00000000 	andeq	r0, r0, r0
	if (len == 0) {
    1910:	52000100 	andpl	r0, r0, #0, 2
	...
		finish;
    191c:	00520001 	subseq	r0, r2, r1
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1920:	00000000 	andeq	r0, r0, r0
    1924:	01000000 	mrseq	r0, (UNDEF: 0)
    1928:	00005200 	andeq	r5, r0, r0, lsl #4
	...
strand (__inserial, address)
    1938:	00010000 	andeq	r0, r1, r0
    193c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (__inpline != NULL)
    194c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1958:	00510001 	subseq	r0, r1, r1
    195c:	00000000 	andeq	r0, r0, r0
    1960:	01000000 	mrseq	r0, (UNDEF: 0)
		umwait (IM_INIT);
    1964:	00005100 	andeq	r5, r0, r0, lsl #2
		release;
    1968:	00000000 	andeq	r0, r0, r0
	savedata (data);
    196c:	00010000 	andeq	r0, r1, r0
	len = MAX_LINE_LENGTH;
    1970:	00000051 	andeq	r0, r0, r1, asr r0
	io (IM_READ, __cport, READ, ptr, 1);
    1974:	00000000 	andeq	r0, r0, r0
    1978:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (*ptr == '\0') { // bin cmd
    198c:	00550001 	subseq	r0, r5, r1
	...
		if (*ptr < 0x20)
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
			proceed (IM_READ);
    19a0:	00005400 	andeq	r5, r0, r0, lsl #8
    19a4:	00000000 	andeq	r0, r0, r0
	if (*ptr == '\n' || *ptr == '\r') {
    19a8:	00010000 	andeq	r0, r1, r0
    19ac:	00000050 	andeq	r0, r0, r0, asr r0
    19b0:	00000000 	andeq	r0, r0, r0
		*ptr = '\0';
    19b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		ptr++;
    19c8:	00500001 	subseq	r0, r0, r1
		len--;
    19cc:	00000000 	andeq	r0, r0, r0
	proceed (IM_READ);
    19d0:	01000000 	mrseq	r0, (UNDEF: 0)
	io (IM_BIN, __cport, READ, ptr, 1);
    19d4:	00005000 	andeq	r5, r0, r0
    19d8:	00000000 	andeq	r0, r0, r0
    19dc:	00070000 	andeq	r0, r7, r0
    19e0:	24320071 	ldrtcs	r0, [r2], #-113	; 0xffffff8f
    19e4:	00220072 	eoreq	r0, r2, r2, ror r0
	len -= 2;
    19e8:	00000000 	andeq	r0, r0, r0
	if (len > *ptr + 1) // 1 for 0x04
    19ec:	01000000 	mrseq	r0, (UNDEF: 0)
    19f0:	00005000 	andeq	r5, r0, r0
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a00:	00010000 	andeq	r0, r1, r0
    1a04:	00000050 	andeq	r0, r0, r0, asr r0
    1a08:	00000000 	andeq	r0, r0, r0
    1a0c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		finish;
    1a20:	00500001 	subseq	r0, r0, r1
	ptr += quant;
    1a24:	00000000 	andeq	r0, r0, r0
    1a28:	01000000 	mrseq	r0, (UNDEF: 0)
endstrand
    1a2c:	00005000 	andeq	r5, r0, r0
	...
    1a3c:	00010000 	andeq	r0, r1, r0
    1a40:	00000051 	andeq	r0, r0, r1, asr r0
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (res && (d < n))
    1a54:	00510001 	subseq	r0, r1, r1
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	01000000 	mrseq	r0, (UNDEF: 0)
			res [d] = (char) c;
    1a60:	00005500 	andeq	r5, r0, r0, lsl #10
		d++;
    1a64:	00000000 	andeq	r0, r0, r0
    1a68:	00010000 	andeq	r0, r1, r0
    1a6c:	00000051 	andeq	r0, r0, r1, asr r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	d = 0;
    1a88:	00560001 	subseq	r0, r6, r1
	...
			if ((c = *fm++) == '\0') {
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
				outc ('\\');
    1a9c:	00005000 	andeq	r5, r0, r0
	...
			outc (c);
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	00000050 	andeq	r0, r0, r0, asr r0
			if (c == '\0')
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				val = (word) va_arg (ap, aword);
    1ac4:	00500001 	subseq	r0, r0, r1
	...
			switch (c) {
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad8:	00005100 	andeq	r5, r0, r0, lsl #2
    1adc:	00000000 	andeq	r0, r0, r0
    1ae0:	00010000 	andeq	r0, r1, r0
    1ae4:	00000057 	andeq	r0, r0, r7, asr r0
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				outc ('%');
    1af8:	00570001 	subseq	r0, r7, r1
				outc (c);
    1afc:	00000000 	andeq	r0, r0, r0
    1b00:	01000000 	mrseq	r0, (UNDEF: 0)
    1b04:	00005700 	andeq	r5, r0, r0, lsl #14
				if (c == '\0')
    1b08:	00000000 	andeq	r0, r0, r0
				return d;
    1b0c:	00010000 	andeq	r0, r1, r0
}
    1b10:	00000051 	andeq	r0, r0, r1, asr r0
    1b14:	00000000 	andeq	r0, r0, r0
			switch (c) {
    1b18:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
						[ (val >> i) & 0xf ]);
    1b2c:	78910002 	ldmvc	r1, {r1}
	...
					outc (__pi_hex_enc_table
    1b38:	78910002 	ldmvc	r1, {r1}
	...
					if (i == 0)
    1b44:	78910002 	ldmvc	r1, {r1}
	...
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	78910002 	ldmvc	r1, {r1}
	...
					outc ('-');
    1b64:	00560001 	subseq	r0, r6, r1
					val = (~val) + 1;
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	01000000 	mrseq	r0, (UNDEF: 0)
				for (i = 12; ; i -= 4) {
    1b70:	00005600 	andeq	r5, r0, r0, lsl #12
	...
				enci (10000);
    1b80:	00010000 	andeq	r0, r1, r0
    1b84:	00000050 	andeq	r0, r0, r0, asr r0
    1b88:	00000000 	andeq	r0, r0, r0
    1b8c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1b98:	00500001 	subseq	r0, r0, r1
    1b9c:	00000000 	andeq	r0, r0, r0
    1ba0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ba4:	00005400 	andeq	r5, r0, r0, lsl #8
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	00010000 	andeq	r0, r1, r0
    1bb0:	00000050 	andeq	r0, r0, r0, asr r0
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					fm++;
    1bcc:	00500001 	subseq	r0, r0, r1
					if (c == 'd' &&
    1bd0:	00000000 	andeq	r0, r0, r0
    1bd4:	01000000 	mrseq	r0, (UNDEF: 0)
						outc ('-');
    1bd8:	00005000 	andeq	r5, r0, r0
    1bdc:	00000000 	andeq	r0, r0, r0
						val = (~val) + 1;
    1be0:	00010000 	andeq	r0, r1, r0
				enci (10000);
    1be4:	00000050 	andeq	r0, r0, r0, asr r0
	...
					enci (1000000000UL);
    1bf4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1c00:	00500001 	subseq	r0, r0, r1
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	01000000 	mrseq	r0, (UNDEF: 0)
    1c0c:	00005400 	andeq	r5, r0, r0, lsl #8
    1c10:	00000000 	andeq	r0, r0, r0
    1c14:	00010000 	andeq	r0, r1, r0
    1c18:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1c28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
							[ (val >> i) & 0xf ]);
    1c3c:	00500001 	subseq	r0, r0, r1
	...
						if (i == 0)
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00005000 	andeq	r5, r0, r0
	...
					outc ('%');
    1c60:	00010000 	andeq	r0, r1, r0
					outc ('l');
    1c64:	00000050 	andeq	r0, r0, r0, asr r0
    1c68:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1c6c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				while (*st != '\0') {
    1c78:	00500001 	subseq	r0, r0, r1
    1c7c:	00000000 	andeq	r0, r0, r0
    1c80:	01000000 	mrseq	r0, (UNDEF: 0)
    1c84:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		c = *fm++;
    1c94:	00010000 	andeq	r0, r1, r0
    1c98:	00000051 	andeq	r0, r0, r1, asr r0
    1c9c:	00000000 	andeq	r0, r0, r0
char *vform (char *res, const char *fm, va_list aq) {
    1ca0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	00510001 	subseq	r0, r1, r1
    1cb0:	00000000 	andeq	r0, r0, r0
    1cb4:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1cb8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	fml = strlen (fm) + 17;
    1cc8:	00010000 	andeq	r0, r1, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    1ccc:	00000050 	andeq	r0, r0, r0, asr r0
    1cd0:	00000000 	andeq	r0, r0, r0
    1cd4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		ufree (res);
    1ce8:	00510001 	subseq	r0, r1, r1
		goto Again;
    1cec:	00000000 	andeq	r0, r0, r0
	if (buf == NULL || fmt == NULL)
    1cf0:	01000000 	mrseq	r0, (UNDEF: 0)
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cf4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
		    	    case 'u': scanu (lword); break;
    1d04:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    1d08:	00000050 	andeq	r0, r0, r0, asr r0
    1d0c:	00000000 	andeq	r0, r0, r0
	while (*fmt != '\0') {
    1d10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		switch (*fmt++) {
    1d1c:	00510001 	subseq	r0, r1, r1
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	01000000 	mrseq	r0, (UNDEF: 0)
    1d28:	00005000 	andeq	r5, r0, r0
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	00010000 	andeq	r0, r1, r0
}
    1d34:	00000054 	andeq	r0, r0, r4, asr r0
		switch (*fmt++) {
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (isspace (*buf)) buf++;
    1d48:	00500001 	subseq	r0, r0, r1
	...
    1d58:	01000000 	mrseq	r0, (UNDEF: 0)
    1d5c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			nc++;
    1d6c:	00010000 	andeq	r0, r1, r0
			if (*buf != ',') {
    1d70:	00000050 	andeq	r0, r0, r0, asr r0
				while (!isspace (*buf) && *buf != ',' &&
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1d8c:	00500001 	subseq	r0, r0, r1
			while (isspace (*buf)) buf++;
    1d90:	00000000 	andeq	r0, r0, r0
    1d94:	01000000 	mrseq	r0, (UNDEF: 0)
    1d98:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			if (*buf == ',') buf++;
    1da8:	00010000 	andeq	r0, r1, r0
			*sap = '\0';
    1dac:	00000051 	andeq	r0, r0, r1, asr r0
			break;
    1db0:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    1db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dc0:	00500001 	subseq	r0, r0, r1
	...
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	00005200 	andeq	r5, r0, r0, lsl #4
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	00010000 	andeq	r0, r1, r0
    1de0:	00000051 	andeq	r0, r0, r1, asr r0
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1dfc:	00500001 	subseq	r0, r0, r1
	...
    1e0c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e10:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1e20:	00010000 	andeq	r0, r1, r0
		    case 'u': scanu (word); break;
    1e24:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1e34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e40:	00560001 	subseq	r0, r6, r1
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	01000000 	mrseq	r0, (UNDEF: 0)
    1e4c:	00005100 	andeq	r5, r0, r0, lsl #2
    1e50:	00000000 	andeq	r0, r0, r0
    1e54:	00010000 	andeq	r0, r1, r0
    1e58:	00000056 	andeq	r0, r0, r6, asr r0
    1e5c:	00000000 	andeq	r0, r0, r0
    1e60:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		    case 'x': scanx (word); break;
    1e6c:	00560001 	subseq	r0, r6, r1
    1e70:	00000000 	andeq	r0, r0, r0
    1e74:	01000000 	mrseq	r0, (UNDEF: 0)
    1e78:	00005100 	andeq	r5, r0, r0, lsl #2
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	00010000 	andeq	r0, r1, r0
    1e84:	00000056 	andeq	r0, r0, r6, asr r0
	...
    1e94:	52000100 	andpl	r0, r0, #0, 2
	...
    1ea0:	00550001 	subseq	r0, r5, r1
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	00005200 	andeq	r5, r0, r0, lsl #4
    1eb0:	00000000 	andeq	r0, r0, r0
    1eb4:	00010000 	andeq	r0, r1, r0
    1eb8:	00000055 	andeq	r0, r0, r5, asr r0
    1ebc:	00000000 	andeq	r0, r0, r0
    1ec0:	52000100 	andpl	r0, r0, #0, 2
	...
    1ecc:	00550001 	subseq	r0, r5, r1
	...
    1edc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ee0:	00005000 	andeq	r5, r0, r0
			switch (*fmt++) {
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	00010000 	andeq	r0, r1, r0
    1eec:	00000050 	andeq	r0, r0, r0, asr r0
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		    	    case 'd': scani (lword); break;
    1f00:	00500001 	subseq	r0, r0, r1
	...
    1f10:	01000000 	mrseq	r0, (UNDEF: 0)
    1f14:	00005100 	andeq	r5, r0, r0, lsl #2
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	15fc0000 	ldrbne	r0, [ip, #0]!
    1f20:	16150000 	ldrne	r0, [r5], -r0
    1f24:	00010000 	andeq	r0, r1, r0
    1f28:	00162052 	andseq	r2, r6, r2, asr r0
    1f2c:	00163400 	andseq	r3, r6, r0, lsl #8
    1f30:	52000100 	andpl	r0, r0, #0, 2
	...
    1f3c:	000015fc 	strdeq	r1, [r0], -ip
    1f40:	00001615 	andeq	r1, r0, r5, lsl r6
    1f44:	24530001 	ldrbcs	r0, [r3], #-1
    1f48:	34000016 	strcc	r0, [r0], #-22	; 0xffffffea
    1f4c:	01000016 	tsteq	r0, r6, lsl r0
    1f50:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		    	    case 'x': scanx (lword); break;
    1f60:	00010000 	andeq	r0, r1, r0
    1f64:	00000050 	andeq	r0, r0, r0, asr r0
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f80:	00510001 	subseq	r0, r1, r1
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	01000000 	mrseq	r0, (UNDEF: 0)
    1f8c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	00000052 	andeq	r0, r0, r2, asr r0
    1fa4:	00000000 	andeq	r0, r0, r0
    1fa8:	52000100 	andpl	r0, r0, #0, 2
	...
    1fbc:	00510001 	subseq	r0, r1, r1
	...
		    	    case 'd': scani (lword); break;
    1fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd0:	00005000 	andeq	r5, r0, r0
	...
    1fe0:	00010000 	andeq	r0, r1, r0
		    	    case 'u': scanu (lword); break;
    1fe4:	00000050 	andeq	r0, r0, r0, asr r0
    1fe8:	00000000 	andeq	r0, r0, r0
    1fec:	03000500 	movweq	r0, #1280	; 0x500
	...
    1ffc:	00500001 	subseq	r0, r0, r1
    2000:	00000000 	andeq	r0, r0, r0
    2004:	05000000 	streq	r0, [r0, #-0]
    2008:	00000300 	andeq	r0, r0, r0, lsl #6
	...
    201c:	00010000 	andeq	r0, r1, r0
    2020:	00000050 	andeq	r0, r0, r0, asr r0
    2024:	00000000 	andeq	r0, r0, r0
    2028:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if ((c = *buf++) == '\0')
    2034:	00500001 	subseq	r0, r0, r1
    2038:	00000000 	andeq	r0, r0, r0
			sap = va_arg (ap, char*);
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
			nc++;
    2040:	00005000 	andeq	r5, r0, r0
	...
			while (isspace (*buf)) buf++;
    2050:	00010000 	andeq	r0, r1, r0
						*sap++ = *buf++;
    2054:	00000050 	andeq	r0, r0, r0, asr r0
	...
			while (isspace (*buf)) buf++;
    2064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    2078:	00500001 	subseq	r0, r0, r1
	...
    2088:	01000000 	mrseq	r0, (UNDEF: 0)
    208c:	00005100 	andeq	r5, r0, r0, lsl #2
    2090:	00000000 	andeq	r0, r0, r0
    2094:	00010000 	andeq	r0, r1, r0
    2098:	00000056 	andeq	r0, r0, r6, asr r0
	...
    20a8:	52000100 	andpl	r0, r0, #0, 2
	...
    20bc:	00530001 	subseq	r0, r3, r1
	...
    20cc:	01000000 	mrseq	r0, (UNDEF: 0)
    20d0:	00005400 	andeq	r5, r0, r0, lsl #8
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	00010000 	andeq	r0, r1, r0
    20dc:	00000054 	andeq	r0, r0, r4, asr r0
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    20f8:	00500001 	subseq	r0, r0, r1
    20fc:	00000000 	andeq	r0, r0, r0
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	00005000 	andeq	r5, r0, r0
	...
    2114:	00010000 	andeq	r0, r1, r0
    2118:	00000051 	andeq	r0, r0, r1, asr r0
    211c:	00000000 	andeq	r0, r0, r0
    2120:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    212c:	00510001 	subseq	r0, r1, r1
	...
    213c:	01000000 	mrseq	r0, (UNDEF: 0)
    2140:	00005200 	andeq	r5, r0, r0, lsl #4
    2144:	00000000 	andeq	r0, r0, r0
    2148:	00010000 	andeq	r0, r1, r0
    214c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    215c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2170:	00500001 	subseq	r0, r0, r1
	...
    2180:	01000000 	mrseq	r0, (UNDEF: 0)
    2184:	00005000 	andeq	r5, r0, r0
    2188:	00000000 	andeq	r0, r0, r0
    218c:	00010000 	andeq	r0, r1, r0
    2190:	00000055 	andeq	r0, r0, r5, asr r0
    2194:	00000000 	andeq	r0, r0, r0
    2198:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21ac:	00510001 	subseq	r0, r1, r1
    21b0:	00000000 	andeq	r0, r0, r0
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	00005600 	andeq	r5, r0, r0, lsl #12
    21bc:	00000000 	andeq	r0, r0, r0
    21c0:	00010000 	andeq	r0, r1, r0
    21c4:	00000056 	andeq	r0, r0, r6, asr r0
    21c8:	00000000 	andeq	r0, r0, r0
    21cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    21e0:	00520001 	subseq	r0, r2, r1
    21e4:	00000000 	andeq	r0, r0, r0
    21e8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ec:	00005200 	andeq	r5, r0, r0, lsl #4
    21f0:	00000000 	andeq	r0, r0, r0
    21f4:	16b80000 	ldrtne	r0, [r8], r0
    21f8:	16c80000 	strbne	r0, [r8], r0
    21fc:	00010000 	andeq	r0, r1, r0
    2200:	00000050 	andeq	r0, r0, r0, asr r0
    2204:	00000000 	andeq	r0, r0, r0
    2208:	0016b800 	andseq	fp, r6, r0, lsl #16
    220c:	0016c800 	andseq	ip, r6, r0, lsl #16
    2210:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    221c:	000016da 	ldrdeq	r1, [r0], -sl
    2220:	000016de 	ldrdeq	r1, [r0], -lr
    2224:	00500001 	subseq	r0, r0, r1
    2228:	00000000 	andeq	r0, r0, r0
    222c:	a0000000 	andge	r0, r0, r0
    2230:	ab000016 	blge	2290 <NOROM_SetupSetVddrLevel+0x40>
    2234:	01000016 	tsteq	r0, r6, lsl r0
    2238:	00005000 	andeq	r5, r0, r0
    223c:	00000000 	andeq	r0, r0, r0
    2240:	16700000 	ldrbtne	r0, [r0], -r0
    2244:	168c0000 	strne	r0, [ip], r0
    2248:	00010000 	andeq	r0, r1, r0
    224c:	00169450 	andseq	r9, r6, r0, asr r4
    2250:	0016a000 	andseq	sl, r6, r0
    2254:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2260:	0000164c 	andeq	r1, r0, ip, asr #12
    2264:	00001650 	andeq	r1, r0, r0, asr r6
    2268:	54500001 	ldrbpl	r0, [r0], #-1
    226c:	70000016 	andvc	r0, r0, r6, lsl r0
    2270:	01000016 	tsteq	r0, r6, lsl r0
    2274:	00005000 	andeq	r5, r0, r0
    2278:	00000000 	andeq	r0, r0, r0
    227c:	17980000 	ldrne	r0, [r8, r0]
    2280:	17a60000 	strne	r0, [r6, r0]!
    2284:	00010000 	andeq	r0, r1, r0
    2288:	00180250 	andseq	r0, r8, r0, asr r2
    228c:	00181000 	andseq	r1, r8, r0
    2290:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    229c:	00001798 	muleq	r0, r8, r7
    22a0:	000017ad 	andeq	r1, r0, sp, lsr #15
    22a4:	ad510001 	ldclge	0, cr0, [r1, #-4]
    22a8:	cc000017 	stcgt	0, cr0, [r0], {23}
    22ac:	01000017 	tsteq	r0, r7, lsl r0
    22b0:	17cc5700 	strbne	r5, [ip, r0, lsl #14]
    22b4:	17d40000 	ldrbne	r0, [r4, r0]
    22b8:	00010000 	andeq	r0, r1, r0
    22bc:	0017d451 	andseq	sp, r7, r1, asr r4
    22c0:	0017fa00 	andseq	pc, r7, r0, lsl #20
    22c4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    22c8:	000017fa 	strdeq	r1, [r0], -sl
    22cc:	000017fd 	strdeq	r1, [r0], -sp
    22d0:	fd510001 	ldc2l	0, cr0, [r1, #-4]
    22d4:	02000017 	andeq	r0, r0, #23
    22d8:	01000018 	tsteq	r0, r8, lsl r0
    22dc:	18025700 	stmdane	r2, {r8, r9, sl, ip, lr}
    22e0:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    22e4:	00010000 	andeq	r0, r1, r0
    22e8:	00000051 	andeq	r0, r0, r1, asr r0
    22ec:	00000000 	andeq	r0, r0, r0
    22f0:	00179800 	andseq	r9, r7, r0, lsl #16
    22f4:	0017ad00 	andseq	sl, r7, r0, lsl #26
    22f8:	52000100 	andpl	r0, r0, #0, 2
    22fc:	000017ad 	andeq	r1, r0, sp, lsr #15
    2300:	000017cc 	andeq	r1, r0, ip, asr #15
    2304:	cc550001 	mrrcgt	0, 0, r0, r5, cr1
    2308:	d4000017 	strle	r0, [r0], #-23	; 0xffffffe9
    230c:	01000017 	tsteq	r0, r7, lsl r0
    2310:	17d45200 	ldrbne	r5, [r4, r0, lsl #4]
    2314:	17fa0000 	ldrbne	r0, [sl, r0]!
    2318:	00010000 	andeq	r0, r1, r0
    231c:	0017fa55 	andseq	pc, r7, r5, asr sl	; <UNPREDICTABLE>
    2320:	0017fd00 	andseq	pc, r7, r0, lsl #26
    2324:	52000100 	andpl	r0, r0, #0, 2
    2328:	000017fd 	strdeq	r1, [r0], -sp
    232c:	00001802 	andeq	r1, r0, r2, lsl #16
    2330:	02550001 	subseq	r0, r5, #1
    2334:	10000018 	andne	r0, r0, r8, lsl r0
    2338:	01000018 	tsteq	r0, r8, lsl r0
    233c:	00005200 	andeq	r5, r0, r0, lsl #4
    2340:	00000000 	andeq	r0, r0, r0
    2344:	17ae0000 	strne	r0, [lr, r0]!
    2348:	17b40000 	ldrne	r0, [r4, r0]!
    234c:	00010000 	andeq	r0, r1, r0
    2350:	0017b450 	andseq	fp, r7, r0, asr r4
    2354:	0017b700 	andseq	fp, r7, r0, lsl #14
    2358:	51000100 	mrspl	r0, (UNDEF: 16)
    235c:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    2360:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    2364:	c4500001 	ldrbgt	r0, [r0], #-1
    2368:	c9000017 	stmdbgt	r0, {r0, r1, r2, r4}
    236c:	01000017 	tsteq	r0, r7, lsl r0
    2370:	17d45000 	ldrbne	r5, [r4, r0]
    2374:	17f60000 	ldrbne	r0, [r6, r0]!
    2378:	00010000 	andeq	r0, r1, r0
    237c:	00180054 	andseq	r0, r8, r4, asr r0
    2380:	00180200 	andseq	r0, r8, r0, lsl #4
    2384:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2390:	00001810 	andeq	r1, r0, r0, lsl r8
    2394:	00001818 	andeq	r1, r0, r8, lsl r8
    2398:	00500001 	subseq	r0, r0, r1
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    23a4:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
    23a8:	01000018 	tsteq	r0, r8, lsl r0
    23ac:	18255000 	stmdane	r5!, {ip, lr}
    23b0:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    23b4:	00010000 	andeq	r0, r1, r0
    23b8:	00182a56 	andseq	r2, r8, r6, asr sl
    23bc:	00183300 	andseq	r3, r8, r0, lsl #6
    23c0:	50000100 	andpl	r0, r0, r0, lsl #2
    23c4:	00001833 	andeq	r1, r0, r3, lsr r8
    23c8:	0000185a 	andeq	r1, r0, sl, asr r8
    23cc:	5a560001 	bpl	15823d8 <__ccfg+0x1562430>
    23d0:	64000018 	strvs	r0, [r0], #-24	; 0xffffffe8
    23d4:	01000018 	tsteq	r0, r8, lsl r0
    23d8:	00005000 	andeq	r5, r0, r0
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    23e4:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    23e8:	00010000 	andeq	r0, r1, r0
    23ec:	00183850 	andseq	r3, r8, r0, asr r8
    23f0:	00184000 	andseq	r4, r8, r0
    23f4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    23f8:	00001840 	andeq	r1, r0, r0, asr #16
    23fc:	00001844 	andeq	r1, r0, r4, asr #16
    2400:	44500001 	ldrbmi	r0, [r0], #-1
    2404:	5a000018 	bpl	246c <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>
    2408:	01000018 	tsteq	r0, r8, lsl r0
    240c:	00005500 	andeq	r5, r0, r0, lsl #10
    2410:	00000000 	andeq	r0, r0, r0
    2414:	18640000 	stmdane	r4!, {}^	; <UNPREDICTABLE>
    2418:	18720000 	ldmdane	r2!, {}^	; <UNPREDICTABLE>
    241c:	00010000 	andeq	r0, r1, r0
    2420:	0018b850 	andseq	fp, r8, r0, asr r8
    2424:	0018c400 	andseq	ip, r8, r0, lsl #8
    2428:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2434:	0000187a 	andeq	r1, r0, sl, ror r8
    2438:	00001880 	andeq	r1, r0, r0, lsl #17
    243c:	80500001 	subshi	r0, r0, r1
    2440:	83000018 	movwhi	r0, #24
    2444:	01000018 	tsteq	r0, r8, lsl r0
    2448:	18845100 	stmne	r4, {r8, ip, lr}
    244c:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    2450:	00010000 	andeq	r0, r1, r0
    2454:	00189050 	andseq	r9, r8, r0, asr r0
    2458:	00189500 	andseq	r9, r8, r0, lsl #10
    245c:	50000100 	andpl	r0, r0, r0, lsl #2
    2460:	000018a2 	andeq	r1, r0, r2, lsr #17
    2464:	000018a4 	andeq	r1, r0, r4, lsr #17
    2468:	a4500001 	ldrbge	r0, [r0], #-1
    246c:	ac000018 	stcge	0, cr0, [r0], {24}
    2470:	01000018 	tsteq	r0, r8, lsl r0
    2474:	00005400 	andeq	r5, r0, r0, lsl #8
    2478:	00000000 	andeq	r0, r0, r0
    247c:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    2480:	18db0000 	ldmne	fp, {}^	; <UNPREDICTABLE>
    2484:	00010000 	andeq	r0, r1, r0
    2488:	0018dc50 	andseq	sp, r8, r0, asr ip
    248c:	0018e800 	andseq	lr, r8, r0, lsl #16
    2490:	50000100 	andpl	r0, r0, r0, lsl #2
    2494:	00001920 	andeq	r1, r0, r0, lsr #18
    2498:	00001934 	andeq	r1, r0, r4, lsr r9
    249c:	00500001 	subseq	r0, r0, r1
    24a0:	00000000 	andeq	r0, r0, r0
    24a4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    24a8:	d8000018 	stmdale	r0, {r3, r4}
    24ac:	01000018 	tsteq	r0, r8, lsl r0
    24b0:	18d85500 	ldmne	r8, {r8, sl, ip, lr}^
    24b4:	18db0000 	ldmne	fp, {}^	; <UNPREDICTABLE>
    24b8:	00020000 	andeq	r0, r2, r0
    24bc:	18dc0873 	ldmne	ip, {r0, r1, r4, r5, r6, fp}^
    24c0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
    24c4:	00010000 	andeq	r0, r1, r0
    24c8:	00000055 	andeq	r0, r0, r5, asr r0
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	00190200 	andseq	r0, r9, r0, lsl #4
    24d4:	00191400 	andseq	r1, r9, r0, lsl #8
    24d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    24e4:	00001934 	andeq	r1, r0, r4, lsr r9
    24e8:	00001950 	andeq	r1, r0, r0, asr r9
    24ec:	36500001 	ldrbcc	r0, [r0], -r1
    24f0:	3f00001a 	svccc	0x0000001a
    24f4:	0100001a 	tsteq	r0, sl, lsl r0
    24f8:	00005000 	andeq	r5, r0, r0
    24fc:	00000000 	andeq	r0, r0, r0
    2500:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    2504:	195e0000 	ldmdbne	lr, {}^	; <UNPREDICTABLE>
    2508:	00010000 	andeq	r0, r1, r0
    250c:	00195e54 	andseq	r5, r9, r4, asr lr
    2510:	00196500 	andseq	r6, r9, r0, lsl #10
    2514:	50000100 	andpl	r0, r0, r0, lsl #2
    2518:	00001965 	andeq	r1, r0, r5, ror #18
    251c:	0000196a 	andeq	r1, r0, sl, ror #18
    2520:	6a540001 	bvs	150252c <__ccfg+0x14e2584>
    2524:	74000019 	strvc	r0, [r0], #-25	; 0xffffffe7
    2528:	01000019 	tsteq	r0, r9, lsl r0
    252c:	19745000 	ldmdbne	r4!, {ip, lr}^
    2530:	1a320000 	bne	c82538 <__ccfg+0xc62590>
    2534:	00010000 	andeq	r0, r1, r0
    2538:	001a3654 	andseq	r3, sl, r4, asr r6
    253c:	001a3c00 	andseq	r3, sl, r0, lsl #24
    2540:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2544:	00001a3c 	andeq	r1, r0, ip, lsr sl
    2548:	00001a3f 	andeq	r1, r0, pc, lsr sl
    254c:	08720002 	ldmdaeq	r2!, {r1}^
	...
    2558:	00001a16 	andeq	r1, r0, r6, lsl sl
    255c:	00001a18 	andeq	r1, r0, r8, lsl sl
    2560:	18500001 	ldmdane	r0, {r0}^
    2564:	3200001a 	andcc	r0, r0, #26
    2568:	0100001a 	tsteq	r0, sl, lsl r0
    256c:	00005600 	andeq	r5, r0, r0, lsl #12
    2570:	00000000 	andeq	r0, r0, r0
    2574:	1ca00000 	stcne	0, cr0, [r0]
    2578:	1cb70000 	ldcne	0, cr0, [r7]
    257c:	00010000 	andeq	r0, r1, r0
    2580:	001cb750 	andseq	fp, ip, r0, asr r7
    2584:	001cbe00 	andseq	fp, ip, r0, lsl #28
    2588:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    258c:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    2590:	00001cc0 	andeq	r1, r0, r0, asr #25
    2594:	c0500001 	subsgt	r0, r0, r1
    2598:	d000001c 	andle	r0, r0, ip, lsl r0
    259c:	0100001c 	tsteq	r0, ip, lsl r0
    25a0:	1cd05400 	cfldrdne	mvd5, [r0], {0}
    25a4:	1cdf0000 	ldclne	0, cr0, [pc], {0}
    25a8:	00010000 	andeq	r0, r1, r0
    25ac:	001cdf50 	andseq	sp, ip, r0, asr pc
    25b0:	001cf000 	andseq	pc, ip, r0
    25b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    25c0:	00001ca0 	andeq	r1, r0, r0, lsr #25
    25c4:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    25c8:	b4510001 	ldrblt	r0, [r1], #-1
    25cc:	b700001c 	smladlt	r0, ip, r0, r0
    25d0:	0100001c 	tsteq	r0, ip, lsl r0
    25d4:	1cb75200 	lfmne	f5, 4, [r7]
    25d8:	1cbe0000 	ldcne	0, cr0, [lr]
    25dc:	00010000 	andeq	r0, r1, r0
    25e0:	001cbe56 	andseq	fp, ip, r6, asr lr
    25e4:	001cc300 	andseq	ip, ip, r0, lsl #6
    25e8:	51000100 	mrspl	r0, (UNDEF: 16)
    25ec:	00001cc3 	andeq	r1, r0, r3, asr #25
    25f0:	00001cf0 	strdeq	r1, [r0], -r0
    25f4:	00560001 	subseq	r0, r6, r1
    25f8:	00000000 	andeq	r0, r0, r0
    25fc:	a0000000 	andge	r0, r0, r0
    2600:	a800001c 	stmdage	r0, {r2, r3, r4}
    2604:	0100001c 	tsteq	r0, ip, lsl r0
    2608:	1cac5200 	sfmne	f5, 4, [ip]
    260c:	1cb00000 	ldcne	0, cr0, [r0]
    2610:	00010000 	andeq	r0, r1, r0
    2614:	001cb852 	andseq	fp, ip, r2, asr r8
    2618:	001cbe00 	andseq	fp, ip, r0, lsl #28
    261c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2620:	00001cca 	andeq	r1, r0, sl, asr #25
    2624:	00001cf0 	strdeq	r1, [r0], -r0
    2628:	00570001 	subseq	r0, r7, r1
    262c:	00000000 	andeq	r0, r0, r0
    2630:	ca000000 	bgt	2638 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>
    2634:	ec00001c 	stc	0, cr0, [r0], {28}
    2638:	0100001c 	tsteq	r0, ip, lsl r0
    263c:	1cec5500 	cfstr64ne	mvdx5, [ip]
    2640:	1cf00000 	ldclne	0, cr0, [r0]
    2644:	00010000 	andeq	r0, r1, r0
    2648:	00000058 	andeq	r0, r0, r8, asr r0
    264c:	00000000 	andeq	r0, r0, r0
    2650:	001ce400 	andseq	lr, ip, r0, lsl #8
    2654:	001ce800 	andseq	lr, ip, r0, lsl #16
    2658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2664:	00001a70 	andeq	r1, r0, r0, ror sl
    2668:	00001a8a 	andeq	r1, r0, sl, lsl #21
    266c:	00500001 	subseq	r0, r0, r1
    2670:	00000000 	andeq	r0, r0, r0
    2674:	70000000 	andvc	r0, r0, r0
    2678:	8a00001a 	bhi	26e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x10>
    267c:	0100001a 	tsteq	r0, sl, lsl r0
    2680:	00005100 	andeq	r5, r0, r0, lsl #2
    2684:	00000000 	andeq	r0, r0, r0
    2688:	1a700000 	bne	1c02690 <__ccfg+0x1be26e8>
    268c:	1a8a0000 	bne	fe282694 <_estack+0xde27d694>
    2690:	00010000 	andeq	r0, r1, r0
    2694:	001a9a52 	andseq	r9, sl, r2, asr sl
    2698:	001ac600 	andseq	ip, sl, r0, lsl #12
    269c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    26a0:	00001ad4 	ldrdeq	r1, [r0], -r4
    26a4:	00001c92 	muleq	r0, r2, ip
    26a8:	00550001 	subseq	r0, r5, r1
    26ac:	00000000 	andeq	r0, r0, r0
    26b0:	70000000 	andvc	r0, r0, r0
    26b4:	7400001a 	strvc	r0, [r0], #-26	; 0xffffffe6
    26b8:	0100001a 	tsteq	r0, sl, lsl r0
    26bc:	1a765300 	bne	1d972c4 <__ccfg+0x1d7731c>
    26c0:	1a780000 	bne	1e026c8 <__ccfg+0x1de2720>
    26c4:	00030000 	andeq	r0, r3, r0
    26c8:	78049353 	stmdavc	r4, {r0, r1, r4, r6, r8, r9, ip, pc}
    26cc:	c200001a 	andgt	r0, r0, #26
    26d0:	0300001a 	movweq	r0, #26
    26d4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26d8:	00001ac2 	andeq	r1, r0, r2, asr #21
    26dc:	00001b16 	andeq	r1, r0, r6, lsl fp
    26e0:	93540003 	cmpls	r4, #3
    26e4:	001b1604 	andseq	r1, fp, r4, lsl #12
    26e8:	001b2200 	andseq	r2, fp, r0, lsl #4
    26ec:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    26f0:	1b2a0493 	blne	a83944 <__ccfg+0xa6399c>
    26f4:	1b4c0000 	blne	13026fc <__ccfg+0x12e2754>
    26f8:	00030000 	andeq	r0, r3, r0
    26fc:	50049354 	andpl	r9, r4, r4, asr r3
    2700:	ca00001b 	bgt	2774 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x9c>
    2704:	0300001b 	movweq	r0, #27
    2708:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    270c:	00001bd0 	ldrdeq	r1, [r0], -r0
    2710:	00001be4 	andeq	r1, r0, r4, ror #23
    2714:	93540003 	cmpls	r4, #3
    2718:	001c2a04 	andseq	r2, ip, r4, lsl #20
    271c:	001c3600 	andseq	r3, ip, r0, lsl #12
    2720:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2724:	1c580493 	cfldrdne	mvd0, [r8], {147}	; 0x93
    2728:	1c6a0000 	stclne	0, cr0, [sl], #-0
    272c:	00030000 	andeq	r0, r3, r0
    2730:	6e049354 	mcrvs	3, 0, r9, cr4, cr4, {2}
    2734:	7600001c 			; <UNDEFINED> instruction: 0x7600001c
    2738:	0300001c 	movweq	r0, #28
    273c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2740:	00001c7a 	andeq	r1, r0, sl, ror ip
    2744:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2748:	93540003 	cmpls	r4, #3
    274c:	00000004 	andeq	r0, r0, r4
    2750:	00000000 	andeq	r0, r0, r0
    2754:	001a8e00 	andseq	r8, sl, r0, lsl #28
    2758:	001a9800 	andseq	r9, sl, r0, lsl #16
    275c:	59000100 	stmdbpl	r0, {r8}
    2760:	00001a98 	muleq	r0, r8, sl
    2764:	00001a9a 	muleq	r0, sl, sl
    2768:	00720002 	rsbseq	r0, r2, r2
    276c:	00001a9a 	muleq	r0, sl, sl
    2770:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
    2774:	c6590001 	ldrbgt	r0, [r9], -r1
    2778:	d400001a 	strle	r0, [r0], #-26	; 0xffffffe6
    277c:	0100001a 	tsteq	r0, sl, lsl r0
    2780:	1ad45900 	bne	ff518b88 <_estack+0xdf513b88>
    2784:	1b0c0000 	blne	30278c <__ccfg+0x2e27e4>
    2788:	00010000 	andeq	r0, r1, r0
    278c:	001b1658 	andseq	r1, fp, r8, asr r6
    2790:	001b2600 	andseq	r2, fp, r0, lsl #12
    2794:	58000100 	stmdapl	r0, {r8}
    2798:	00001b26 	andeq	r1, r0, r6, lsr #22
    279c:	00001b2e 	andeq	r1, r0, lr, lsr #22
    27a0:	01720002 	cmneq	r2, r2
    27a4:	00001b4c 	andeq	r1, r0, ip, asr #22
    27a8:	00001b76 	andeq	r1, r0, r6, ror fp
    27ac:	7a580001 	bvc	16027b8 <__ccfg+0x15e2810>
    27b0:	7e00001b 	mcrvc	0, 0, r0, cr0, cr11, {0}
    27b4:	0100001b 	tsteq	r0, fp, lsl r0
    27b8:	1b885000 	blne	fe2167c0 <_estack+0xde2117c0>
    27bc:	1b920000 	blne	fe4827c4 <_estack+0xde47d7c4>
    27c0:	00010000 	andeq	r0, r1, r0
    27c4:	001bb250 	andseq	fp, fp, r0, asr r2
    27c8:	001bb400 	andseq	fp, fp, r0, lsl #8
    27cc:	50000100 	andpl	r0, r0, r0, lsl #2
    27d0:	00001bba 			; <UNDEFINED> instruction: 0x00001bba
    27d4:	00001bbc 			; <UNDEFINED> instruction: 0x00001bbc
    27d8:	bc580001 	mrrclt	0, 0, r0, r8, cr1
    27dc:	df00001b 	svcle	0x0000001b
    27e0:	0100001b 	tsteq	r0, fp, lsl r0
    27e4:	1bee5300 	blne	ffb973ec <_estack+0xdfb923ec>
    27e8:	1bf20000 	blne	ffc827f0 <_estack+0xdfc7d7f0>
    27ec:	00010000 	andeq	r0, r1, r0
    27f0:	001bfc59 	andseq	pc, fp, r9, asr ip	; <UNPREDICTABLE>
    27f4:	001c1c00 	andseq	r1, ip, r0, lsl #24
    27f8:	59000100 	stmdbpl	r0, {r8}
    27fc:	00001c22 	andeq	r1, r0, r2, lsr #24
    2800:	00001c24 	andeq	r1, r0, r4, lsr #24
    2804:	2a590001 	bcs	1642810 <__ccfg+0x1622868>
    2808:	3800001c 	stmdacc	r0, {r2, r3, r4}
    280c:	0100001c 	tsteq	r0, ip, lsl r0
    2810:	1c585300 	mrrcne	3, 0, r5, r8, cr0
    2814:	1c610000 	stclne	0, cr0, [r1], #-0
    2818:	00010000 	andeq	r0, r1, r0
    281c:	001c6a53 	andseq	r6, ip, r3, asr sl
    2820:	001c7e00 	andseq	r7, ip, r0, lsl #28
    2824:	58000100 	stmdapl	r0, {r8}
    2828:	00001c92 	muleq	r0, r2, ip
    282c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2830:	00590001 	subseq	r0, r9, r1
    2834:	00000000 	andeq	r0, r0, r0
    2838:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    283c:	4c00001b 	stcmi	0, cr0, [r0], {27}
    2840:	0100001b 	tsteq	r0, fp, lsl r0
    2844:	00005800 	andeq	r5, r0, r0, lsl #16
    2848:	00000000 	andeq	r0, r0, r0
    284c:	1b580000 	blne	1602854 <__ccfg+0x15e28ac>
    2850:	1b6c0000 	blne	1b02858 <__ccfg+0x1ae28b0>
    2854:	00010000 	andeq	r0, r1, r0
    2858:	001b7059 	andseq	r7, fp, r9, asr r0
    285c:	001b9e00 	andseq	r9, fp, r0, lsl #28
    2860:	59000100 	stmdbpl	r0, {r8}
    2864:	00001ba6 	andeq	r1, r0, r6, lsr #23
    2868:	00001bba 			; <UNDEFINED> instruction: 0x00001bba
    286c:	00590001 	subseq	r0, r9, r1
    2870:	00000000 	andeq	r0, r0, r0
    2874:	76000000 	strvc	r0, [r0], -r0
    2878:	a800001b 	stmdage	r0, {r0, r1, r3, r4}
    287c:	0100001b 	tsteq	r0, fp, lsl r0
    2880:	1ba85800 	blne	fea18888 <_estack+0xdea13888>
    2884:	1bb40000 	blne	fed0288c <_estack+0xdecfd88c>
    2888:	00010000 	andeq	r0, r1, r0
    288c:	001bb453 	andseq	fp, fp, r3, asr r4
    2890:	001bba00 	andseq	fp, fp, r0, lsl #20
    2894:	58000100 	stmdapl	r0, {r8}
	...
    28a0:	00001be4 	andeq	r1, r0, r4, ror #23
    28a4:	00001c2a 	andeq	r1, r0, sl, lsr #24
    28a8:	005a0001 	subseq	r0, sl, r1
    28ac:	00000000 	andeq	r0, r0, r0
    28b0:	ea000000 	b	28b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    28b4:	1400001b 	strne	r0, [r0], #-27	; 0xffffffe5
    28b8:	0100001c 	tsteq	r0, ip, lsl r0
    28bc:	1c145800 	ldcne	8, cr5, [r4], {-0}
    28c0:	1c240000 	stcne	0, cr0, [r4], #-0
    28c4:	00010000 	andeq	r0, r1, r0
    28c8:	001c2453 	andseq	r2, ip, r3, asr r4
    28cc:	001c2a00 	andseq	r2, ip, r0, lsl #20
    28d0:	58000100 	stmdapl	r0, {r8}
	...
    28dc:	00001c38 	andeq	r1, r0, r8, lsr ip
    28e0:	00001c58 	andeq	r1, r0, r8, asr ip
    28e4:	00580001 	subseq	r0, r8, r1
    28e8:	00000000 	andeq	r0, r0, r0
    28ec:	6a000000 	bvs	28f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xcc>
    28f0:	6e00001c 	mcrvs	0, 0, r0, cr0, cr12, {0}
    28f4:	0200001c 	andeq	r0, r0, #28
    28f8:	6e007400 	cfcpysvs	mvf7, mvf0
    28fc:	7600001c 			; <UNDEFINED> instruction: 0x7600001c
    2900:	0200001c 	andeq	r0, r0, #28
    2904:	007c7400 	rsbseq	r7, ip, r0, lsl #8
    2908:	00000000 	andeq	r0, r0, r0
    290c:	82000000 	andhi	r0, r0, #0
    2910:	9000001c 	andls	r0, r0, ip, lsl r0
    2914:	0100001c 	tsteq	r0, ip, lsl r0
    2918:	00005800 	andeq	r5, r0, r0, lsl #16
    291c:	00000000 	andeq	r0, r0, r0
    2920:	1cf00000 	ldclne	0, cr0, [r0]
    2924:	1d0c0000 	stcne	0, cr0, [ip, #-0]
    2928:	00010000 	andeq	r0, r1, r0
    292c:	001d4a50 	andseq	r4, sp, r0, asr sl
    2930:	001d5c00 	andseq	r5, sp, r0, lsl #24
    2934:	53000100 	movwpl	r0, #256	; 0x100
    2938:	00001d5c 	andeq	r1, r0, ip, asr sp
    293c:	00001d70 	andeq	r1, r0, r0, ror sp
    2940:	72560001 	subsvc	r0, r6, #1
    2944:	8e00001d 	mcrhi	0, 0, r0, cr0, cr13, {0}
    2948:	0100001d 	tsteq	r0, sp, lsl r0
    294c:	1da05600 	stcne	6, cr5, [r0]
    2950:	1dac0000 	stcne	0, cr0, [ip]
    2954:	00010000 	andeq	r0, r1, r0
    2958:	001dac56 	andseq	sl, sp, r6, asr ip
    295c:	001db200 	andseq	fp, sp, r0, lsl #4
    2960:	53000100 	movwpl	r0, #256	; 0x100
    2964:	00001db8 			; <UNDEFINED> instruction: 0x00001db8
    2968:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    296c:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    2970:	cc00001d 	stcgt	0, cr0, [r0], {29}
    2974:	0100001d 	tsteq	r0, sp, lsl r0
    2978:	1dcc5e00 	stclne	14, cr5, [ip]
    297c:	1de20000 	stclne	0, cr0, [r2]
    2980:	00010000 	andeq	r0, r1, r0
    2984:	001de253 	andseq	lr, sp, r3, asr r2
    2988:	001dea00 	andseq	lr, sp, r0, lsl #20
    298c:	5e000100 	adfpls	f0, f0, f0
    2990:	00001df0 	strdeq	r1, [r0], -r0
    2994:	00001e0c 	andeq	r1, r0, ip, lsl #28
    2998:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    299c:	1200001e 	andne	r0, r0, #30
    29a0:	0100001e 	tsteq	r0, lr, lsl r0
    29a4:	1e125e00 	cdpne	14, 1, cr5, cr2, cr0, {0}
    29a8:	1e140000 	cdpne	0, 1, cr0, cr4, cr0, {0}
    29ac:	00010000 	andeq	r0, r1, r0
    29b0:	001e2053 	andseq	r2, lr, r3, asr r0
    29b4:	001e2200 	andseq	r2, lr, r0, lsl #4
    29b8:	5e000100 	adfpls	f0, f0, f0
    29bc:	00001e22 	andeq	r1, r0, r2, lsr #28
    29c0:	00001e36 	andeq	r1, r0, r6, lsr lr
    29c4:	36530001 	ldrbcc	r0, [r3], -r1
    29c8:	4600001e 			; <UNDEFINED> instruction: 0x4600001e
    29cc:	0100001e 	tsteq	r0, lr, lsl r0
    29d0:	1e465600 	cdpne	6, 4, cr5, cr6, cr0, {0}
    29d4:	1e5a0000 	cdpne	0, 5, cr0, cr10, cr0, {0}
    29d8:	00010000 	andeq	r0, r1, r0
    29dc:	001e6853 	andseq	r6, lr, r3, asr r8
    29e0:	001e6a00 	andseq	r6, lr, r0, lsl #20
    29e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    29e8:	00001e6a 	andeq	r1, r0, sl, ror #28
    29ec:	00001e82 	andeq	r1, r0, r2, lsl #29
    29f0:	82530001 	subshi	r0, r3, #1
    29f4:	9c00001e 	stcls	0, cr0, [r0], {30}
    29f8:	0100001e 	tsteq	r0, lr, lsl r0
    29fc:	1ea25600 	cdpne	6, 10, cr5, cr2, cr0, {0}
    2a00:	1ec40000 	cdpne	0, 12, cr0, cr4, cr0, {0}
    2a04:	00010000 	andeq	r0, r1, r0
    2a08:	001ec453 	andseq	ip, lr, r3, asr r4
    2a0c:	001ed600 	andseq	sp, lr, r0, lsl #12
    2a10:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a14:	00001efc 	strdeq	r1, [r0], -ip
    2a18:	00001f00 	andeq	r1, r0, r0, lsl #30
    2a1c:	00530001 	subseq	r0, r3, r1
    2a20:	1000001f 	andne	r0, r0, pc, lsl r0
    2a24:	0100001f 	tsteq	r0, pc, lsl r0
    2a28:	1f105800 	svcne	0x00105800
    2a2c:	1f200000 	svcne	0x00200000
    2a30:	00010000 	andeq	r0, r1, r0
    2a34:	001f2053 	andseq	r2, pc, r3, asr r0	; <UNPREDICTABLE>
    2a38:	001f2a00 	andseq	r2, pc, r0, lsl #20
    2a3c:	58000100 	stmdapl	r0, {r8}
    2a40:	00001f30 	andeq	r1, r0, r0, lsr pc
    2a44:	00001f52 	andeq	r1, r0, r2, asr pc
    2a48:	58530001 	ldmdapl	r3, {r0}^
    2a4c:	6800001f 	stmdavs	r0, {r0, r1, r2, r3, r4}
    2a50:	0100001f 	tsteq	r0, pc, lsl r0
    2a54:	1f685300 	svcne	0x00685300
    2a58:	1f820000 	svcne	0x00820000
    2a5c:	00010000 	andeq	r0, r1, r0
    2a60:	001f8856 	andseq	r8, pc, r6, asr r8	; <UNPREDICTABLE>
    2a64:	001fa800 	andseq	sl, pc, r0, lsl #16
    2a68:	53000100 	movwpl	r0, #256	; 0x100
    2a6c:	00001fa8 	andeq	r1, r0, r8, lsr #31
    2a70:	00001fba 			; <UNDEFINED> instruction: 0x00001fba
    2a74:	ce560001 	cdpgt	0, 5, cr0, cr6, cr1, {0}
    2a78:	d200001f 	andle	r0, r0, #31
    2a7c:	0100001f 	tsteq	r0, pc, lsl r0
    2a80:	1fd25800 	svcne	0x00d25800
    2a84:	1fd60000 	svcne	0x00d60000
    2a88:	00010000 	andeq	r0, r1, r0
    2a8c:	001fe053 	andseq	lr, pc, r3, asr r0	; <UNPREDICTABLE>
    2a90:	001fe200 	andseq	lr, pc, r0, lsl #4
    2a94:	58000100 	stmdapl	r0, {r8}
    2a98:	00001fe2 	andeq	r1, r0, r2, ror #31
    2a9c:	00001ff8 	strdeq	r1, [r0], -r8
    2aa0:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    2aa4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    2aa8:	01000020 	tsteq	r0, r0, lsr #32
    2aac:	20085600 	andcs	r5, r8, r0, lsl #12
    2ab0:	201e0000 	andscs	r0, lr, r0
    2ab4:	00010000 	andeq	r0, r1, r0
    2ab8:	00202853 	eoreq	r2, r0, r3, asr r8
    2abc:	00202a00 	eoreq	r2, r0, r0, lsl #20
    2ac0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2ac4:	0000202a 	andeq	r2, r0, sl, lsr #32
    2ac8:	00002032 	andeq	r2, r0, r2, lsr r0
    2acc:	36530001 	ldrbcc	r0, [r3], -r1
    2ad0:	46000020 	strmi	r0, [r0], -r0, lsr #32
    2ad4:	01000020 	tsteq	r0, r0, lsr #32
    2ad8:	20465300 	subcs	r5, r6, r0, lsl #6
    2adc:	20540000 	subscs	r0, r4, r0
    2ae0:	00010000 	andeq	r0, r1, r0
    2ae4:	00205456 	eoreq	r5, r0, r6, asr r4
    2ae8:	00205a00 	eoreq	r5, r0, r0, lsl #20
    2aec:	58000100 	stmdapl	r0, {r8}
    2af0:	0000205a 	andeq	r2, r0, sl, asr r0
    2af4:	00002066 	andeq	r2, r0, r6, rrx
    2af8:	66560001 	ldrbvs	r0, [r6], -r1
    2afc:	6e000020 	cdpvs	0, 0, cr0, cr0, cr0, {1}
    2b00:	01000020 	tsteq	r0, r0, lsr #32
    2b04:	206e5000 	rsbcs	r5, lr, r0
    2b08:	20800000 	addcs	r0, r0, r0
    2b0c:	00010000 	andeq	r0, r1, r0
    2b10:	00000053 	andeq	r0, r0, r3, asr r0
    2b14:	00000000 	andeq	r0, r0, r0
    2b18:	001cf000 	andseq	pc, ip, r0
    2b1c:	001d0e00 	andseq	r0, sp, r0, lsl #28
    2b20:	51000100 	mrspl	r0, (UNDEF: 16)
    2b24:	00001d0e 	andeq	r1, r0, lr, lsl #26
    2b28:	00001d14 	andeq	r1, r0, r4, lsl sp
    2b2c:	14560001 	ldrbne	r0, [r6], #-1
    2b30:	3200001d 	andcc	r0, r0, #29
    2b34:	0100001d 	tsteq	r0, sp, lsl r0
    2b38:	1d385100 	ldfnes	f5, [r8, #-0]
    2b3c:	20800000 	addcs	r0, r0, r0
    2b40:	00010000 	andeq	r0, r1, r0
    2b44:	00000051 	andeq	r0, r0, r1, asr r0
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	001cf000 	andseq	pc, ip, r0
    2b50:	001cf000 	andseq	pc, ip, r0
    2b54:	52000100 	andpl	r0, r0, #0, 2
    2b58:	00001cf0 	strdeq	r1, [r0], -r0
    2b5c:	00001d0c 	andeq	r1, r0, ip, lsl #26
    2b60:	93520003 	cmpls	r2, #3
    2b64:	001db204 	andseq	fp, sp, r4, lsl #4
    2b68:	001de600 	andseq	lr, sp, r0, lsl #12
    2b6c:	52000100 	andpl	r0, r0, #0, 2
    2b70:	00001e0c 	andeq	r1, r0, ip, lsl #28
    2b74:	00001e12 	andeq	r1, r0, r2, lsl lr
    2b78:	22520001 	subscs	r0, r2, #1
    2b7c:	3c00001e 	stccc	0, cr0, [r0], {30}
    2b80:	0100001e 	tsteq	r0, lr, lsl r0
    2b84:	1e6a5200 	cdpne	2, 6, cr5, cr10, cr0, {0}
    2b88:	1e920000 	cdpne	0, 9, cr0, cr2, cr0, {0}
    2b8c:	00010000 	andeq	r0, r1, r0
    2b90:	001ee452 	andseq	lr, lr, r2, asr r4
    2b94:	001f2400 	andseq	r2, pc, r0, lsl #8
    2b98:	52000100 	andpl	r0, r0, #0, 2
    2b9c:	00001f52 	andeq	r1, r0, r2, asr pc
    2ba0:	00001f78 	andeq	r1, r0, r8, ror pc
    2ba4:	c8520001 	ldmdagt	r2, {r0}^
    2ba8:	d200001f 	andle	r0, r0, #31
    2bac:	0100001f 	tsteq	r0, pc, lsl r0
    2bb0:	1fe25200 	svcne	0x00e25200
    2bb4:	1ffe0000 	svcne	0x00fe0000
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	00202a52 	eoreq	r2, r0, r2, asr sl
    2bc0:	00204000 	eoreq	r4, r0, r0
    2bc4:	52000100 	andpl	r0, r0, #0, 2
    2bc8:	00002046 	andeq	r2, r0, r6, asr #32
    2bcc:	00002054 	andeq	r2, r0, r4, asr r0
    2bd0:	66520001 	ldrbvs	r0, [r2], -r1
    2bd4:	6e000020 	cdpvs	0, 0, cr0, cr0, cr0, {1}
    2bd8:	01000020 	tsteq	r0, r0, lsr #32
    2bdc:	00005200 	andeq	r5, r0, r0, lsl #4
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	1d6e0000 	stclne	0, cr0, [lr, #-0]
    2be8:	1d700000 	ldclne	0, cr0, [r0, #-0]
    2bec:	00010000 	andeq	r0, r1, r0
    2bf0:	001de854 	andseq	lr, sp, r4, asr r8
    2bf4:	001e0c00 	andseq	r0, lr, r0, lsl #24
    2bf8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bfc:	00001e12 	andeq	r1, r0, r2, lsl lr
    2c00:	00001e22 	andeq	r1, r0, r2, lsr #28
    2c04:	3e540001 	cdpcc	0, 5, cr0, cr4, cr1, {0}
    2c08:	6a00001e 	bvs	2c88 <NOROM_OSCClockSourceGet+0x6c>
    2c0c:	0100001e 	tsteq	r0, lr, lsl r0
    2c10:	1e945400 	cdpne	4, 9, cr5, cr4, cr0, {0}
    2c14:	1ee40000 	cdpne	0, 14, cr0, cr4, cr0, {0}
    2c18:	00010000 	andeq	r0, r1, r0
    2c1c:	001f2654 	andseq	r2, pc, r4, asr r6	; <UNPREDICTABLE>
    2c20:	001f5200 	andseq	r5, pc, r0, lsl #4
    2c24:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c28:	00001f7a 	andeq	r1, r0, sl, ror pc
    2c2c:	00001fc8 	andeq	r1, r0, r8, asr #31
    2c30:	d2540001 	subsle	r0, r4, #1
    2c34:	e200001f 	and	r0, r0, #31
    2c38:	0100001f 	tsteq	r0, pc, lsl r0
    2c3c:	20005400 	andcs	r5, r0, r0, lsl #8
    2c40:	202a0000 	eorcs	r0, sl, r0
    2c44:	00010000 	andeq	r0, r1, r0
    2c48:	00204254 	eoreq	r4, r0, r4, asr r2
    2c4c:	00204600 	eoreq	r4, r0, r0, lsl #12
    2c50:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c54:	0000206e 	andeq	r2, r0, lr, rrx
    2c58:	00002080 	andeq	r2, r0, r0, lsl #1
    2c5c:	00540001 	subseq	r0, r4, r1
    2c60:	00000000 	andeq	r0, r0, r0
    2c64:	e2000000 	and	r0, r0, #0
    2c68:	0c00001d 	stceq	0, cr0, [r0], {29}
    2c6c:	0100001e 	tsteq	r0, lr, lsl r0
    2c70:	1e125800 	cdpne	8, 1, cr5, cr2, cr0, {0}
    2c74:	1e220000 	cdpne	0, 2, cr0, cr2, cr0, {0}
    2c78:	00010000 	andeq	r0, r1, r0
    2c7c:	00000058 	andeq	r0, r0, r8, asr r0
    2c80:	00000000 	andeq	r0, r0, r0
    2c84:	001ec400 	andseq	ip, lr, r0, lsl #8
    2c88:	001ed600 	andseq	sp, lr, r0, lsl #12
    2c8c:	59000100 	stmdbpl	r0, {r8}
    2c90:	00001ed6 	ldrdeq	r1, [r0], -r6
    2c94:	00001ede 	ldrdeq	r1, [r0], -lr
    2c98:	00500001 	subseq	r0, r0, r1
    2c9c:	00000000 	andeq	r0, r0, r0
    2ca0:	20000000 	andcs	r0, r0, r0
    2ca4:	4a00001f 	bmi	2d28 <NOROM_OSCClockSourceGet+0x10c>
    2ca8:	0100001f 	tsteq	r0, pc, lsl r0
    2cac:	1fd25000 	svcne	0x00d25000
    2cb0:	1fe20000 	svcne	0x00e20000
    2cb4:	00010000 	andeq	r0, r1, r0
    2cb8:	00000050 	andeq	r0, r0, r0, asr r0
    2cbc:	00000000 	andeq	r0, r0, r0
    2cc0:	001fa800 	andseq	sl, pc, r0, lsl #16
    2cc4:	001fba00 	andseq	fp, pc, r0, lsl #20
    2cc8:	59000100 	stmdbpl	r0, {r8}
    2ccc:	00001fba 			; <UNDEFINED> instruction: 0x00001fba
    2cd0:	00001fc2 	andeq	r1, r0, r2, asr #31
    2cd4:	00500001 	subseq	r0, r0, r1
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	36000000 	strcc	r0, [r0], -r0
    2ce0:	46000020 	strmi	r0, [r0], -r0, lsr #32
    2ce4:	01000020 	tsteq	r0, r0, lsr #32
    2ce8:	00005000 	andeq	r5, r0, r0
    2cec:	00000000 	andeq	r0, r0, r0
    2cf0:	1d720000 	ldclne	0, cr0, [r2, #-0]
    2cf4:	1d8e0000 	stcne	0, cr0, [lr]
    2cf8:	00010000 	andeq	r0, r1, r0
    2cfc:	0020585e 	eoreq	r5, r0, lr, asr r8
    2d00:	00205a00 	eoreq	r5, r0, r0, lsl #20
    2d04:	5e000100 	adfpls	f0, f0, f0
	...
    2d10:	00002084 	andeq	r2, r0, r4, lsl #1
    2d14:	00002096 	muleq	r0, r6, r0
    2d18:	00700007 	rsbseq	r0, r0, r7
    2d1c:	263f243f 			; <UNDEFINED> instruction: 0x263f243f
    2d20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d24:	00000000 	andeq	r0, r0, r0
    2d28:	00208c00 	eoreq	r8, r0, r0, lsl #24
    2d2c:	00209400 	eoreq	r9, r0, r0, lsl #8
    2d30:	72000d00 	andvc	r0, r0, #0, 26
    2d34:	00717a80 	rsbseq	r7, r1, r0, lsl #21
    2d38:	26482448 	strbcs	r2, [r8], -r8, asr #8
    2d3c:	9f26341e 	svcls	0x0026341e
    2d40:	00002094 	muleq	r0, r4, r0
    2d44:	000020b0 	strheq	r2, [r0], -r0
    2d48:	0071000c 	rsbseq	r0, r1, ip
    2d4c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    2d50:	341e0072 	ldrcc	r0, [lr], #-114	; 0xffffff8e
    2d54:	00009f26 	andeq	r9, r0, r6, lsr #30
	...
    2d64:	00010000 	andeq	r0, r1, r0
    2d68:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2d78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2d84:	000020d8 	ldrdeq	r2, [r0], -r8
    2d88:	00002116 	andeq	r2, r0, r6, lsl r1
    2d8c:	16500001 	ldrbne	r0, [r0], -r1
    2d90:	78000021 	stmdavc	r0, {r0, r5}
    2d94:	01000021 	tsteq	r0, r1, lsr #32
    2d98:	21785500 	cmncs	r8, r0, lsl #10
    2d9c:	21ac0000 			; <UNDEFINED> instruction: 0x21ac0000
    2da0:	00040000 	andeq	r0, r4, r0
    2da4:	9f5001f3 	svcls	0x005001f3
	...
    2db0:	00002114 	andeq	r2, r0, r4, lsl r1
    2db4:	00002178 	andeq	r2, r0, r8, ror r1
    2db8:	00540001 	subseq	r0, r4, r1
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	2a000000 	bcs	2dc8 <NOROM_OSCClockSourceGet+0x1ac>
    2dc4:	2c000021 	stccs	0, cr0, [r0], {33}	; 0x21
    2dc8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    2dcc:	0a007300 	beq	1f9d4 <__exidx_end+0x1cb58>
    2dd0:	9f1affff 	svcls	0x001affff
	...
    2ddc:	0000213a 	andeq	r2, r0, sl, lsr r1
    2de0:	00002154 	andeq	r2, r0, r4, asr r1
    2de4:	00530001 	subseq	r0, r3, r1
    2de8:	00000000 	andeq	r0, r0, r0
    2dec:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    2df0:	4a000021 	bmi	2e7c <__exidx_end>
    2df4:	01000021 	tsteq	r0, r1, lsr #32
    2df8:	214a5200 	mrscs	r5, (UNDEF: 106)
    2dfc:	214e0000 	mrscs	r0, (UNDEF: 78)
    2e00:	00030000 	andeq	r0, r3, r0
    2e04:	4e9f0671 	mrcmi	6, 4, r0, cr15, cr1, {3}
    2e08:	56000021 	strpl	r0, [r0], -r1, lsr #32
    2e0c:	01000021 	tsteq	r0, r1, lsr #32
    2e10:	00005200 	andeq	r5, r0, r0, lsl #4
    2e14:	00000000 	andeq	r0, r0, r0
    2e18:	21b20000 			; <UNDEFINED> instruction: 0x21b20000
    2e1c:	222c0000 	eorcs	r0, ip, #0
    2e20:	00010000 	andeq	r0, r1, r0
    2e24:	00000054 	andeq	r0, r0, r4, asr r0
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	00221800 	eoreq	r1, r2, r0, lsl #16
    2e30:	00222200 	eoreq	r2, r2, r0, lsl #4
    2e34:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e40:	00002250 	andeq	r2, r0, r0, asr r2
    2e44:	00002276 	andeq	r2, r0, r6, ror r2
    2e48:	76500001 	ldrbvc	r0, [r0], -r1
    2e4c:	cc000022 	stcgt	0, cr0, [r0], {34}	; 0x22
    2e50:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    2e54:	5001f300 	andpl	pc, r1, r0, lsl #6
    2e58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e5c:	00000000 	andeq	r0, r0, r0
    2e60:	00227800 	eoreq	r7, r2, r0, lsl #16
    2e64:	0022ac00 	eoreq	sl, r2, r0, lsl #24
    2e68:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e74:	0000227c 	andeq	r2, r0, ip, ror r2
    2e78:	0000228a 	andeq	r2, r0, sl, lsl #5
    2e7c:	8a510001 	bhi	1442e88 <__ccfg+0x1422ee0>
    2e80:	8c000022 	stchi	0, cr0, [r0], {34}	; 0x22
    2e84:	06000022 	streq	r0, [r0], -r2, lsr #32
    2e88:	73007200 	movwvc	r7, #512	; 0x200
    2e8c:	8c9f1c00 	ldchi	12, cr1, [pc], {0}
    2e90:	92000022 	andls	r0, r0, #34	; 0x22
    2e94:	01000022 	tsteq	r0, r2, lsr #32
    2e98:	00005100 	andeq	r5, r0, r0, lsl #2
    2e9c:	00000000 	andeq	r0, r0, r0
    2ea0:	22680000 	rsbcs	r0, r8, #0
    2ea4:	227a0000 	rsbscs	r0, sl, #0
    2ea8:	00010000 	andeq	r0, r1, r0
    2eac:	00000053 	andeq	r0, r0, r3, asr r0
    2eb0:	00000000 	andeq	r0, r0, r0
    2eb4:	0022cc00 	eoreq	ip, r2, r0, lsl #24
    2eb8:	0022ef00 	eoreq	lr, r2, r0, lsl #30
    2ebc:	50000100 	andpl	r0, r0, r0, lsl #2
    2ec0:	000022ef 	andeq	r2, r0, pc, ror #5
    2ec4:	000022fa 	strdeq	r2, [r0], -sl
    2ec8:	fa540001 	blx	1502ed4 <__ccfg+0x14e2f2c>
    2ecc:	02000022 	andeq	r0, r0, #34	; 0x22
    2ed0:	01000023 	tsteq	r0, r3, lsr #32
    2ed4:	23025000 	movwcs	r5, #8192	; 0x2000
    2ed8:	234e0000 	movtcs	r0, #57344	; 0xe000
    2edc:	00010000 	andeq	r0, r1, r0
    2ee0:	00000054 	andeq	r0, r0, r4, asr r0
    2ee4:	00000000 	andeq	r0, r0, r0
    2ee8:	00230800 	eoreq	r0, r3, r0, lsl #16
    2eec:	00230c00 	eoreq	r0, r3, r0, lsl #24
    2ef0:	53000100 	movwpl	r0, #256	; 0x100
    2ef4:	0000230e 	andeq	r2, r0, lr, lsl #6
    2ef8:	0000231c 	andeq	r2, r0, ip, lsl r3
    2efc:	1e530001 	cdpne	0, 5, cr0, cr3, cr1, {0}
    2f00:	26000023 	strcs	r0, [r0], -r3, lsr #32
    2f04:	01000023 	tsteq	r0, r3, lsr #32
    2f08:	00005300 	andeq	r5, r0, r0, lsl #6
    2f0c:	00000000 	andeq	r0, r0, r0
    2f10:	23080000 	movwcs	r0, #32768	; 0x8000
    2f14:	233c0000 	teqcs	ip, #0
    2f18:	00050000 	andeq	r0, r5, r0
    2f1c:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    2f20:	00233c9f 	mlaeq	r3, pc, ip, r3	; <UNPREDICTABLE>
    2f24:	00237800 	eoreq	r7, r3, r0, lsl #16
    2f28:	f3000600 	vmax.u8	d0, d0, d0
    2f2c:	264c5001 	strbcs	r5, [ip], -r1
    2f30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	00230200 	eoreq	r0, r3, r0, lsl #4
    2f3c:	00230c00 	eoreq	r0, r3, r0, lsl #24
    2f40:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f4c:	00002378 	andeq	r2, r0, r8, ror r3
    2f50:	0000238c 	andeq	r2, r0, ip, lsl #7
    2f54:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2f58:	d4000023 	strle	r0, [r0], #-35	; 0xffffffdd
    2f5c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    2f60:	5001f300 	andpl	pc, r1, r0, lsl #6
    2f64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f68:	00000000 	andeq	r0, r0, r0
    2f6c:	00237e00 	eoreq	r7, r3, r0, lsl #28
    2f70:	00238600 	eoreq	r8, r3, r0, lsl #12
    2f74:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f80:	00002382 	andeq	r2, r0, r2, lsl #7
    2f84:	00002394 	muleq	r0, r4, r3
    2f88:	94520001 	ldrbls	r0, [r2], #-1
    2f8c:	96000023 	strls	r0, [r0], -r3, lsr #32
    2f90:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    2f94:	31007200 	mrscc	r7, R8_usr
    2f98:	23969f25 	orrscs	r9, r6, #37, 30	; 0x94
    2f9c:	239c0000 	orrscs	r0, ip, #0
    2fa0:	00010000 	andeq	r0, r1, r0
    2fa4:	0023a052 	eoreq	sl, r3, r2, asr r0
    2fa8:	0023b200 	eoreq	fp, r3, r0, lsl #4
    2fac:	52000100 	andpl	r0, r0, #0, 2
    2fb0:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    2fb4:	000023c0 	andeq	r2, r0, r0, asr #7
    2fb8:	c2520001 	subsgt	r0, r2, #1
    2fbc:	d4000023 	strle	r0, [r0], #-35	; 0xffffffdd
    2fc0:	01000023 	tsteq	r0, r3, lsr #32
    2fc4:	00005200 	andeq	r5, r0, r0, lsl #4
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	23860000 	orrcs	r0, r6, #0
    2fd0:	23900000 	orrscs	r0, r0, #0
    2fd4:	00010000 	andeq	r0, r1, r0
    2fd8:	00239053 	eoreq	r9, r3, r3, asr r0
    2fdc:	00239200 	eoreq	r9, r3, r0, lsl #4
    2fe0:	73000500 	movwvc	r0, #1280	; 0x500
    2fe4:	9f253100 	svcls	0x00253100
    2fe8:	00002392 	muleq	r0, r2, r3
    2fec:	00002394 	muleq	r0, r4, r3
    2ff0:	94530001 	ldrbls	r0, [r3], #-1
    2ff4:	a0000023 	andge	r0, r0, r3, lsr #32
    2ff8:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    2ffc:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3000:	0023a09f 	mlaeq	r3, pc, r0, sl	; <UNPREDICTABLE>
    3004:	0023a600 	eoreq	sl, r3, r0, lsl #12
    3008:	53000100 	movwpl	r0, #256	; 0x100
    300c:	000023aa 	andeq	r2, r0, sl, lsr #7
    3010:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
    3014:	b0530001 	subslt	r0, r3, r1
    3018:	c2000023 	andgt	r0, r0, #35	; 0x23
    301c:	02000023 	andeq	r0, r0, #35	; 0x23
    3020:	c29f3100 	addsgt	r3, pc, #0, 2
    3024:	d4000023 	strle	r0, [r0], #-35	; 0xffffffdd
    3028:	01000023 	tsteq	r0, r3, lsr #32
    302c:	00005300 	andeq	r5, r0, r0, lsl #6
    3030:	00000000 	andeq	r0, r0, r0
    3034:	23860000 	orrcs	r0, r6, #0
    3038:	238c0000 	orrcs	r0, ip, #0
    303c:	00020000 	andeq	r0, r2, r0
    3040:	238c9f30 	orrcs	r9, ip, #48, 30	; 0xc0
    3044:	23c80000 	biccs	r0, r8, #0
    3048:	00010000 	andeq	r0, r1, r0
    304c:	00000050 	andeq	r0, r0, r0, asr r0
    3050:	00000000 	andeq	r0, r0, r0
    3054:	0023c800 	eoreq	ip, r3, r0, lsl #16
    3058:	0023cc00 	eoreq	ip, r3, r0, lsl #24
    305c:	72000800 	andvc	r0, r0, #0, 16
    3060:	73244000 			; <UNDEFINED> instruction: 0x73244000
    3064:	cc9f2100 	ldfgts	f2, [pc], {0}
    3068:	d4000023 	strle	r0, [r0], #-35	; 0xffffffdd
    306c:	01000023 	tsteq	r0, r3, lsr #32
    3070:	00005000 	andeq	r5, r0, r0
    3074:	00000000 	andeq	r0, r0, r0
    3078:	23de0000 	bicscs	r0, lr, #0
    307c:	23e20000 	mvncs	r0, #0
    3080:	000a0000 	andeq	r0, sl, r0
    3084:	1a330070 	bne	cc324c <__ccfg+0xca32a4>
    3088:	00732438 	rsbseq	r2, r3, r8, lsr r4
    308c:	23e69f21 	mvncs	r9, #33, 30	; 0x84
    3090:	23ec0000 	mvncs	r0, #0
    3094:	00010000 	andeq	r0, r1, r0
    3098:	00000050 	andeq	r0, r0, r0, asr r0
	...
    30a8:	70000700 	andvc	r0, r0, r0, lsl #14
    30ac:	3fff0a00 	svccc	0x00ff0a00
    30b0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    30b4:	00000000 	andeq	r0, r0, r0
    30b8:	23f00000 	mvnscs	r0, #0
    30bc:	23f40000 	mvnscs	r0, #0
    30c0:	000f0000 	andeq	r0, pc, r0
    30c4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    30c8:	1100701a 	tstne	r0, sl, lsl r0
    30cc:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    30d0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    30d4:	00000000 	andeq	r0, r0, r0
    30d8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    30dc:	f4000023 	vst4.8	{d0-d3}, [r0 :128], r3
    30e0:	01000023 	tsteq	r0, r3, lsr #32
    30e4:	00005000 	andeq	r5, r0, r0
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	24000000 	strcs	r0, [r0], #-0
    30f0:	24040000 	strcs	r0, [r4], #-0
    30f4:	000f0000 	andeq	r0, pc, r0
    30f8:	3f080070 	svccc	0x00080070
    30fc:	0c00701a 	stceq	0, cr7, [r0], {26}
    3100:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    3104:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
	...
    3110:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3114:	01000024 	tsteq	r0, r4, lsr #32
    3118:	00005000 	andeq	r5, r0, r0
    311c:	00000000 	andeq	r0, r0, r0
    3120:	24100000 	ldrcs	r0, [r0], #-0
    3124:	24660000 	strbtcs	r0, [r6], #-0
    3128:	00010000 	andeq	r0, r1, r0
    312c:	00246650 	eoreq	r6, r4, r0, asr r6
    3130:	00247400 	eoreq	r7, r4, r0, lsl #8
    3134:	f3000400 	vshl.u8	d0, d0, d0
    3138:	009f5001 	addseq	r5, pc, r1
    313c:	00000000 	andeq	r0, r0, r0
    3140:	50000000 	andpl	r0, r0, r0
    3144:	58000024 	stmdapl	r0, {r2, r5}
    3148:	17000024 	strne	r0, [r0, -r4, lsr #32]
    314c:	0a007400 	beq	20154 <__ccfg+0x1ac>
    3150:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    3154:	1af00800 	bne	ffc0515c <_estack+0xdfc0015c>
    3158:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    315c:	00732124 	rsbseq	r2, r3, r4, lsr #2
    3160:	9f212440 	svcls	0x00212440
    3164:	0000245c 	andeq	r2, r0, ip, asr r4
    3168:	00002474 	andeq	r2, r0, r4, ror r4
    316c:	00530001 	subseq	r0, r3, r1
    3170:	00000000 	andeq	r0, r0, r0
    3174:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3178:	62000024 	andvs	r0, r0, #36	; 0x24
    317c:	01000024 	tsteq	r0, r4, lsr #32
    3180:	00005400 	andeq	r5, r0, r0, lsl #8
    3184:	00000000 	andeq	r0, r0, r0
    3188:	241e0000 	ldrcs	r0, [lr], #-0
    318c:	24320000 	ldrtcs	r0, [r2], #-0
    3190:	00010000 	andeq	r0, r1, r0
    3194:	00243252 	eoreq	r3, r4, r2, asr r2
    3198:	00243e00 	eoreq	r3, r4, r0, lsl #28
    319c:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    31a0:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    31a4:	0024509f 	mlaeq	r4, pc, r0, r5	; <UNPREDICTABLE>
    31a8:	00245800 	eoreq	r5, r4, r0, lsl #16
    31ac:	52000100 	andpl	r0, r0, #0, 2
	...
    31b8:	00002426 	andeq	r2, r0, r6, lsr #8
    31bc:	00002444 	andeq	r2, r0, r4, asr #8
    31c0:	44530001 	ldrbmi	r0, [r3], #-1
    31c4:	50000024 	andpl	r0, r0, r4, lsr #32
    31c8:	06000024 	streq	r0, [r0], -r4, lsr #32
    31cc:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    31d0:	509f24f0 			; <UNDEFINED> instruction: 0x509f24f0
    31d4:	5c000024 	stcpl	0, cr0, [r0], {36}	; 0x24
    31d8:	01000024 	tsteq	r0, r4, lsr #32
    31dc:	00005300 	andeq	r5, r0, r0, lsl #6
    31e0:	00000000 	andeq	r0, r0, r0
    31e4:	24300000 	ldrtcs	r0, [r0], #-0
    31e8:	24320000 	ldrtcs	r0, [r2], #-0
    31ec:	00060000 	andeq	r0, r6, r0
    31f0:	00720076 	rsbseq	r0, r2, r6, ror r0
    31f4:	24329f22 	ldrtcs	r9, [r2], #-3874	; 0xfffff0de
    31f8:	243a0000 	ldrtcs	r0, [sl], #-0
    31fc:	00010000 	andeq	r0, r1, r0
    3200:	00243a52 	eoreq	r3, r4, r2, asr sl
    3204:	00243c00 	eoreq	r3, r4, r0, lsl #24
    3208:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    320c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3210:	9f220076 	svcls	0x00220076
    3214:	0000243c 	andeq	r2, r0, ip, lsr r4
    3218:	0000243e 	andeq	r2, r0, lr, lsr r4
    321c:	42550001 	subsmi	r0, r5, #1
    3220:	44000024 	strmi	r0, [r0], #-36	; 0xffffffdc
    3224:	06000024 	streq	r0, [r0], -r4, lsr #32
    3228:	73007100 	movwvc	r7, #256	; 0x100
    322c:	449f2200 	ldrmi	r2, [pc], #512	; 3234 <__exidx_end+0x3b8>
    3230:	4c000024 	stcmi	0, cr0, [r0], {36}	; 0x24
    3234:	01000024 	tsteq	r0, r4, lsr #32
    3238:	244c5300 	strbcs	r5, [ip], #-768	; 0xfffffd00
    323c:	244e0000 	strbcs	r0, [lr], #-0
    3240:	00090000 	andeq	r0, r9, r0
    3244:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3248:	22007124 	andcs	r7, r0, #36, 2
    324c:	00244e9f 	mlaeq	r4, pc, lr, r4	; <UNPREDICTABLE>
    3250:	00245000 	eoreq	r5, r4, r0
    3254:	30000200 	andcc	r0, r0, r0, lsl #4
    3258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    325c:	00000000 	andeq	r0, r0, r0
    3260:	00247400 	eoreq	r7, r4, r0, lsl #8
    3264:	00247c00 	eoreq	r7, r4, r0, lsl #24
    3268:	50000100 	andpl	r0, r0, r0, lsl #2
    326c:	0000247c 	andeq	r2, r0, ip, ror r4
    3270:	00002488 	andeq	r2, r0, r8, lsl #9
    3274:	01f30004 	mvnseq	r0, r4
    3278:	00009f50 	andeq	r9, r0, r0, asr pc
    327c:	00000000 	andeq	r0, r0, r0
    3280:	24740000 	ldrbtcs	r0, [r4], #-0
    3284:	24820000 	strcs	r0, [r2], #0
    3288:	00020000 	andeq	r0, r2, r0
    328c:	24829f30 	strcs	r9, [r2], #3888	; 0xf30
    3290:	24880000 	strcs	r0, [r8], #0
    3294:	00010000 	andeq	r0, r1, r0
    3298:	00000050 	andeq	r0, r0, r0, asr r0
    329c:	00000000 	andeq	r0, r0, r0
    32a0:	00247600 	eoreq	r7, r4, r0, lsl #12
    32a4:	00247c00 	eoreq	r7, r4, r0, lsl #24
    32a8:	50000100 	andpl	r0, r0, r0, lsl #2
    32ac:	0000247c 	andeq	r2, r0, ip, ror r4
    32b0:	00002488 	andeq	r2, r0, r8, lsl #9
    32b4:	01f30004 	mvnseq	r0, r4
    32b8:	00009f50 	andeq	r9, r0, r0, asr pc
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	24800000 	strcs	r0, [r0], #0
    32c4:	24820000 	strcs	r0, [r2], #0
    32c8:	00010000 	andeq	r0, r1, r0
    32cc:	00000050 	andeq	r0, r0, r0, asr r0
    32d0:	00000000 	andeq	r0, r0, r0
    32d4:	00248800 	eoreq	r8, r4, r0, lsl #16
    32d8:	00249000 	eoreq	r9, r4, r0
    32dc:	50000100 	andpl	r0, r0, r0, lsl #2
    32e0:	00002490 	muleq	r0, r0, r4
    32e4:	0000249c 	muleq	r0, ip, r4
    32e8:	01f30004 	mvnseq	r0, r4
    32ec:	00009f50 	andeq	r9, r0, r0, asr pc
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	24880000 	strcs	r0, [r8], #0
    32f8:	24960000 	ldrcs	r0, [r6], #0
    32fc:	00020000 	andeq	r0, r2, r0
    3300:	24969f31 	ldrcs	r9, [r6], #3889	; 0xf31
    3304:	249c0000 	ldrcs	r0, [ip], #0
    3308:	00010000 	andeq	r0, r1, r0
    330c:	00000050 	andeq	r0, r0, r0, asr r0
    3310:	00000000 	andeq	r0, r0, r0
    3314:	00248a00 	eoreq	r8, r4, r0, lsl #20
    3318:	00249000 	eoreq	r9, r4, r0
    331c:	50000100 	andpl	r0, r0, r0, lsl #2
    3320:	00002490 	muleq	r0, r0, r4
    3324:	0000249c 	muleq	r0, ip, r4
    3328:	01f30004 	mvnseq	r0, r4
    332c:	00009f50 	andeq	r9, r0, r0, asr pc
    3330:	00000000 	andeq	r0, r0, r0
    3334:	24940000 	ldrcs	r0, [r4], #0
    3338:	24960000 	ldrcs	r0, [r6], #0
    333c:	00010000 	andeq	r0, r1, r0
    3340:	00000050 	andeq	r0, r0, r0, asr r0
    3344:	00000000 	andeq	r0, r0, r0
    3348:	00249c00 	eoreq	r9, r4, r0, lsl #24
    334c:	0024a400 	eoreq	sl, r4, r0, lsl #8
    3350:	50000100 	andpl	r0, r0, r0, lsl #2
    3354:	000024a4 	andeq	r2, r0, r4, lsr #9
    3358:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    335c:	01f30004 	mvnseq	r0, r4
    3360:	00009f50 	andeq	r9, r0, r0, asr pc
    3364:	00000000 	andeq	r0, r0, r0
    3368:	249c0000 	ldrcs	r0, [ip], #0
    336c:	24aa0000 	strtcs	r0, [sl], #0
    3370:	00020000 	andeq	r0, r2, r0
    3374:	24aa9f31 	strtcs	r9, [sl], #3889	; 0xf31
    3378:	24b00000 	ldrtcs	r0, [r0], #0
    337c:	00010000 	andeq	r0, r1, r0
    3380:	00000050 	andeq	r0, r0, r0, asr r0
    3384:	00000000 	andeq	r0, r0, r0
    3388:	00249e00 	eoreq	r9, r4, r0, lsl #28
    338c:	0024a400 	eoreq	sl, r4, r0, lsl #8
    3390:	50000100 	andpl	r0, r0, r0, lsl #2
    3394:	000024a4 	andeq	r2, r0, r4, lsr #9
    3398:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    339c:	01f30004 	mvnseq	r0, r4
    33a0:	00009f50 	andeq	r9, r0, r0, asr pc
    33a4:	00000000 	andeq	r0, r0, r0
    33a8:	24a80000 	strtcs	r0, [r8], #0
    33ac:	24aa0000 	strtcs	r0, [sl], #0
    33b0:	00010000 	andeq	r0, r1, r0
    33b4:	00000050 	andeq	r0, r0, r0, asr r0
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	0024b000 	eoreq	fp, r4, r0
    33c0:	0024bc00 	eoreq	fp, r4, r0, lsl #24
    33c4:	50000100 	andpl	r0, r0, r0, lsl #2
    33c8:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    33cc:	000024d8 	ldrdeq	r2, [r0], -r8
    33d0:	01f30004 	mvnseq	r0, r4
    33d4:	00009f50 	andeq	r9, r0, r0, asr pc
    33d8:	00000000 	andeq	r0, r0, r0
    33dc:	24b00000 	ldrtcs	r0, [r0], #0
    33e0:	24d20000 	ldrbcs	r0, [r2], #0
    33e4:	00020000 	andeq	r0, r2, r0
    33e8:	24d29f30 	ldrbcs	r9, [r2], #3888	; 0xf30
    33ec:	24d80000 	ldrbcs	r0, [r8], #0
    33f0:	00010000 	andeq	r0, r1, r0
    33f4:	00000050 	andeq	r0, r0, r0, asr r0
    33f8:	00000000 	andeq	r0, r0, r0
    33fc:	0024b200 	eoreq	fp, r4, r0, lsl #4
    3400:	0024bc00 	eoreq	fp, r4, r0, lsl #24
    3404:	50000100 	andpl	r0, r0, r0, lsl #2
    3408:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    340c:	000024d8 	ldrdeq	r2, [r0], -r8
    3410:	01f30004 	mvnseq	r0, r4
    3414:	00009f50 	andeq	r9, r0, r0, asr pc
    3418:	00000000 	andeq	r0, r0, r0
    341c:	24c40000 	strbcs	r0, [r4], #0
    3420:	24cc0000 	strbcs	r0, [ip], #0
    3424:	00100000 	andseq	r0, r0, r0
    3428:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    342c:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    3430:	00722432 	rsbseq	r2, r2, r2, lsr r4
    3434:	9f212438 	svcls	0x00212438
    3438:	000024ce 	andeq	r2, r0, lr, asr #9
    343c:	000024d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    3440:	00500001 	subseq	r0, r0, r1
    3444:	00000000 	andeq	r0, r0, r0
    3448:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    344c:	cc000024 	stcgt	0, cr0, [r0], {36}	; 0x24
    3450:	01000024 	tsteq	r0, r4, lsr #32
    3454:	00005300 	andeq	r5, r0, r0, lsl #6
    3458:	00000000 	andeq	r0, r0, r0
    345c:	24dc0000 	ldrbcs	r0, [ip], #0
    3460:	24e00000 	strbtcs	r0, [r0], #0
    3464:	00090000 	andeq	r0, r9, r0
    3468:	40480070 	submi	r0, r8, r0, ror r0
    346c:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    3470:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3474:	00000000 	andeq	r0, r0, r0
    3478:	0024e800 	eoreq	lr, r4, r0, lsl #16
    347c:	0024f400 	eoreq	pc, r4, r0, lsl #8
    3480:	50000100 	andpl	r0, r0, r0, lsl #2
    3484:	000024f4 	strdeq	r2, [r0], -r4
    3488:	00002514 	andeq	r2, r0, r4, lsl r5
    348c:	01f30004 	mvnseq	r0, r4
    3490:	00009f50 	andeq	r9, r0, r0, asr pc
    3494:	00000000 	andeq	r0, r0, r0
    3498:	24e80000 	strbtcs	r0, [r8], #0
    349c:	250a0000 	strcs	r0, [sl, #-0]
    34a0:	00060000 	andeq	r0, r6, r0
    34a4:	3f80000c 	svccc	0x0080000c
    34a8:	250a9f40 	strcs	r9, [sl, #-3904]	; 0xfffff0c0
    34ac:	25140000 	ldrcs	r0, [r4, #-0]
    34b0:	00010000 	andeq	r0, r1, r0
    34b4:	00000050 	andeq	r0, r0, r0, asr r0
    34b8:	00000000 	andeq	r0, r0, r0
    34bc:	0024ea00 	eoreq	lr, r4, r0, lsl #20
    34c0:	0024f400 	eoreq	pc, r4, r0, lsl #8
    34c4:	50000100 	andpl	r0, r0, r0, lsl #2
    34c8:	000024f4 	strdeq	r2, [r0], -r4
    34cc:	00002514 	andeq	r2, r0, r4, lsl r5
    34d0:	01f30004 	mvnseq	r0, r4
    34d4:	00009f50 	andeq	r9, r0, r0, asr pc
    34d8:	00000000 	andeq	r0, r0, r0
    34dc:	24f80000 	ldrbtcs	r0, [r8], #0
    34e0:	24fe0000 	ldrbtcs	r0, [lr], #0
    34e4:	00100000 	andseq	r0, r0, r0
    34e8:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    34ec:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    34f0:	00722440 	rsbseq	r2, r2, r0, asr #8
    34f4:	9f212446 	svcls	0x00212446
    34f8:	00002508 	andeq	r2, r0, r8, lsl #10
    34fc:	0000250a 	andeq	r2, r0, sl, lsl #10
    3500:	00500001 	subseq	r0, r0, r1
    3504:	00000000 	andeq	r0, r0, r0
    3508:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    350c:	fe000024 	cdp2	0, 0, cr0, cr0, cr4, {1}
    3510:	01000024 	tsteq	r0, r4, lsr #32
    3514:	00005300 	andeq	r5, r0, r0, lsl #6
    3518:	00000000 	andeq	r0, r0, r0
    351c:	25140000 	ldrcs	r0, [r4, #-0]
    3520:	251c0000 	ldrcs	r0, [ip, #-0]
    3524:	00010000 	andeq	r0, r1, r0
    3528:	00251c50 	eoreq	r1, r5, r0, asr ip
    352c:	00252800 	eoreq	r2, r5, r0, lsl #16
    3530:	f3000400 	vshl.u8	d0, d0, d0
    3534:	009f5001 	addseq	r5, pc, r1
    3538:	00000000 	andeq	r0, r0, r0
    353c:	14000000 	strne	r0, [r0], #-0
    3540:	22000025 	andcs	r0, r0, #37	; 0x25
    3544:	02000025 	andeq	r0, r0, #37	; 0x25
    3548:	229f3000 	addscs	r3, pc, #0
    354c:	28000025 	stmdacs	r0, {r0, r2, r5}
    3550:	01000025 	tsteq	r0, r5, lsr #32
    3554:	00005000 	andeq	r5, r0, r0
    3558:	00000000 	andeq	r0, r0, r0
    355c:	25160000 	ldrcs	r0, [r6, #-0]
    3560:	251c0000 	ldrcs	r0, [ip, #-0]
    3564:	00010000 	andeq	r0, r1, r0
    3568:	00251c50 	eoreq	r1, r5, r0, asr ip
    356c:	00252800 	eoreq	r2, r5, r0, lsl #16
    3570:	f3000400 	vshl.u8	d0, d0, d0
    3574:	009f5001 	addseq	r5, pc, r1
    3578:	00000000 	andeq	r0, r0, r0
    357c:	20000000 	andcs	r0, r0, r0
    3580:	22000025 	andcs	r0, r0, #37	; 0x25
    3584:	01000025 	tsteq	r0, r5, lsr #32
    3588:	00005000 	andeq	r5, r0, r0
    358c:	00000000 	andeq	r0, r0, r0
    3590:	25280000 	strcs	r0, [r8, #-0]!
    3594:	25300000 	ldrcs	r0, [r0, #-0]!
    3598:	00010000 	andeq	r0, r1, r0
    359c:	00253050 	eoreq	r3, r5, r0, asr r0
    35a0:	00253c00 	eoreq	r3, r5, r0, lsl #24
    35a4:	f3000400 	vshl.u8	d0, d0, d0
    35a8:	009f5001 	addseq	r5, pc, r1
    35ac:	00000000 	andeq	r0, r0, r0
    35b0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    35b4:	36000025 	strcc	r0, [r0], -r5, lsr #32
    35b8:	02000025 	andeq	r0, r0, #37	; 0x25
    35bc:	369f3000 	ldrcc	r3, [pc], r0
    35c0:	3c000025 	stccc	0, cr0, [r0], {37}	; 0x25
    35c4:	01000025 	tsteq	r0, r5, lsr #32
    35c8:	00005000 	andeq	r5, r0, r0
    35cc:	00000000 	andeq	r0, r0, r0
    35d0:	252a0000 	strcs	r0, [sl, #-0]!
    35d4:	25300000 	ldrcs	r0, [r0, #-0]!
    35d8:	00010000 	andeq	r0, r1, r0
    35dc:	00253050 	eoreq	r3, r5, r0, asr r0
    35e0:	00253c00 	eoreq	r3, r5, r0, lsl #24
    35e4:	f3000400 	vshl.u8	d0, d0, d0
    35e8:	009f5001 	addseq	r5, pc, r1
    35ec:	00000000 	andeq	r0, r0, r0
    35f0:	34000000 	strcc	r0, [r0], #-0
    35f4:	36000025 	strcc	r0, [r0], -r5, lsr #32
    35f8:	01000025 	tsteq	r0, r5, lsr #32
    35fc:	00005000 	andeq	r5, r0, r0
    3600:	00000000 	andeq	r0, r0, r0
    3604:	253c0000 	ldrcs	r0, [ip, #-0]!
    3608:	25420000 	strbcs	r0, [r2, #-0]
    360c:	00010000 	andeq	r0, r1, r0
    3610:	00254250 	eoreq	r4, r5, r0, asr r2
    3614:	00262c00 	eoreq	r2, r6, r0, lsl #24
    3618:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    361c:	0000262c 	andeq	r2, r0, ip, lsr #12
    3620:	0000264c 	andeq	r2, r0, ip, asr #12
    3624:	01f30004 	mvnseq	r0, r4
    3628:	00009f50 	andeq	r9, r0, r0, asr pc
    362c:	00000000 	andeq	r0, r0, r0
    3630:	253c0000 	ldrcs	r0, [ip, #-0]!
    3634:	25450000 	strbcs	r0, [r5, #-0]
    3638:	00010000 	andeq	r0, r1, r0
    363c:	00254551 	eoreq	r4, r5, r1, asr r5
    3640:	00264c00 	eoreq	r4, r6, r0, lsl #24
    3644:	f3000400 	vshl.u8	d0, d0, d0
    3648:	009f5101 	addseq	r5, pc, r1, lsl #2
    364c:	00000000 	andeq	r0, r0, r0
    3650:	4a000000 	bmi	3658 <__exidx_end+0x7dc>
    3654:	4e000025 	cdpmi	0, 0, cr0, cr0, cr5, {1}
    3658:	01000025 	tsteq	r0, r5, lsr #32
    365c:	254e5000 	strbcs	r5, [lr, #-0]
    3660:	25510000 	ldrbcs	r0, [r1, #-0]
    3664:	00010000 	andeq	r0, r1, r0
    3668:	00255652 	eoreq	r5, r5, r2, asr r6
    366c:	00255a00 	eoreq	r5, r5, r0, lsl #20
    3670:	50000100 	andpl	r0, r0, r0, lsl #2
    3674:	00002584 	andeq	r2, r0, r4, lsl #11
    3678:	00002586 	andeq	r2, r0, r6, lsl #11
    367c:	86500001 	ldrbhi	r0, [r0], -r1
    3680:	89000025 	stmdbhi	r0, {r0, r2, r5}
    3684:	01000025 	tsteq	r0, r5, lsr #32
    3688:	25925200 	ldrcs	r5, [r2, #512]	; 0x200
    368c:	25940000 	ldrcs	r0, [r4]
    3690:	00010000 	andeq	r0, r1, r0
    3694:	00259450 	eoreq	r9, r5, r0, asr r4
    3698:	00259700 	eoreq	r9, r5, r0, lsl #14
    369c:	52000100 	andpl	r0, r0, #0, 2
    36a0:	000025a2 	andeq	r2, r0, r2, lsr #11
    36a4:	000025a4 	andeq	r2, r0, r4, lsr #11
    36a8:	a4500001 	ldrbge	r0, [r0], #-1
    36ac:	a7000025 	strge	r0, [r0, -r5, lsr #32]
    36b0:	01000025 	tsteq	r0, r5, lsr #32
    36b4:	25ae5200 	strcs	r5, [lr, #512]!	; 0x200
    36b8:	25b00000 	ldrcs	r0, [r0, #0]!
    36bc:	00010000 	andeq	r0, r1, r0
    36c0:	0025c050 	eoreq	ip, r5, r0, asr r0
    36c4:	0025c400 	eoreq	ip, r5, r0, lsl #8
    36c8:	50000100 	andpl	r0, r0, r0, lsl #2
    36cc:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    36d0:	000025d4 	ldrdeq	r2, [r0], -r4
    36d4:	d4500001 	ldrble	r0, [r0], #-1
    36d8:	d7000025 	strle	r0, [r0, -r5, lsr #32]
    36dc:	01000025 	tsteq	r0, r5, lsr #32
    36e0:	25de5200 	ldrbcs	r5, [lr, #512]	; 0x200
    36e4:	25e00000 	strbcs	r0, [r0, #0]!
    36e8:	00010000 	andeq	r0, r1, r0
    36ec:	0025f050 	eoreq	pc, r5, r0, asr r0	; <UNPREDICTABLE>
    36f0:	0025f200 	eoreq	pc, r5, r0, lsl #4
    36f4:	50000100 	andpl	r0, r0, r0, lsl #2
    36f8:	00002602 	andeq	r2, r0, r2, lsl #12
    36fc:	00002606 	andeq	r2, r0, r6, lsl #12
    3700:	1a500001 	bne	140370c <__ccfg+0x13e3764>
    3704:	1c000026 	stcne	0, cr0, [r0], {38}	; 0x26
    3708:	01000026 	tsteq	r0, r6, lsr #32
    370c:	261c5000 	ldrcs	r5, [ip], -r0
    3710:	261f0000 	ldrcs	r0, [pc], -r0
    3714:	00010000 	andeq	r0, r1, r0
    3718:	00000052 	andeq	r0, r0, r2, asr r0
    371c:	00000000 	andeq	r0, r0, r0
    3720:	00257200 	eoreq	r7, r5, r0, lsl #4
    3724:	00257800 	eoreq	r7, r5, r0, lsl #16
    3728:	72000700 	andvc	r0, r0, #0, 14
    372c:	3fff0a00 	svccc	0x00ff0a00
    3730:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3734:	00000000 	andeq	r0, r0, r0
    3738:	26660000 	strbtcs	r0, [r6], -r0
    373c:	26700000 	ldrbtcs	r0, [r0], -r0
    3740:	00090000 	andeq	r0, r9, r0
    3744:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    3748:	21200000 			; <UNDEFINED> instruction: 0x21200000
    374c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3750:	00000000 	andeq	r0, r0, r0
    3754:	0026b000 	eoreq	fp, r6, r0
    3758:	0026b800 	eoreq	fp, r6, r0, lsl #16
    375c:	50000100 	andpl	r0, r0, r0, lsl #2
    3760:	000026b8 			; <UNDEFINED> instruction: 0x000026b8
    3764:	000026d8 	ldrdeq	r2, [r0], -r8
    3768:	01f30004 	mvnseq	r0, r4
    376c:	00009f50 	andeq	r9, r0, r0, asr pc
    3770:	00000000 	andeq	r0, r0, r0
    3774:	26d80000 	ldrbcs	r0, [r8], r0
    3778:	27000000 	strcs	r0, [r0, -r0]
    377c:	00010000 	andeq	r0, r1, r0
    3780:	00270050 	eoreq	r0, r7, r0, asr r0
    3784:	00274000 	eoreq	r4, r7, r0
    3788:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    378c:	00002740 	andeq	r2, r0, r0, asr #14
    3790:	00002748 	andeq	r2, r0, r8, asr #14
    3794:	48500001 	ldmdami	r0, {r0}^
    3798:	92000027 	andls	r0, r0, #39	; 0x27
    379c:	01000027 	tsteq	r0, r7, lsr #32
    37a0:	27925400 	ldrcs	r5, [r2, r0, lsl #8]
    37a4:	27ce0000 	strbcs	r0, [lr, r0]
    37a8:	00040000 	andeq	r0, r4, r0
    37ac:	9f5001f3 	svcls	0x005001f3
    37b0:	000027ce 	andeq	r2, r0, lr, asr #15
    37b4:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    37b8:	d2540001 	subsle	r0, r4, #1
    37bc:	28000027 	stmdacs	r0, {r0, r1, r2, r5}
    37c0:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    37c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    37c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37cc:	00000000 	andeq	r0, r0, r0
    37d0:	0026ee00 	eoreq	lr, r6, r0, lsl #28
    37d4:	00273000 	eoreq	r3, r7, r0
    37d8:	53000100 	movwpl	r0, #256	; 0x100
	...
    37e4:	00002762 	andeq	r2, r0, r2, ror #14
    37e8:	00002768 	andeq	r2, r0, r8, ror #14
    37ec:	00500001 	subseq	r0, r0, r1
    37f0:	00000000 	andeq	r0, r0, r0
    37f4:	92000000 	andls	r0, r0, #0
    37f8:	94000027 	strls	r0, [r0], #-39	; 0xffffffd9
    37fc:	01000027 	tsteq	r0, r7, lsr #32
    3800:	27945000 	ldrcs	r5, [r4, r0]
    3804:	27a80000 	strcs	r0, [r8, r0]!
    3808:	00010000 	andeq	r0, r1, r0
    380c:	00000054 	andeq	r0, r0, r4, asr r0
    3810:	00000000 	andeq	r0, r0, r0
    3814:	0027a800 	eoreq	sl, r7, r0, lsl #16
    3818:	0027c800 	eoreq	ip, r7, r0, lsl #16
    381c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3830:	00550001 	subseq	r0, r5, r1
    3834:	00000000 	andeq	r0, r0, r0
    3838:	03000000 	movweq	r0, #0
    383c:	9f7f7500 	svcls	0x007f7500
	...
    3848:	00550001 	subseq	r0, r5, r1
    384c:	00000000 	andeq	r0, r0, r0
    3850:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3854:	47000028 	strmi	r0, [r0, -r8, lsr #32]
    3858:	01000028 	tsteq	r0, r8, lsr #32
    385c:	28475000 	stmdacs	r7, {ip, lr}^
    3860:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    3864:	00010000 	andeq	r0, r1, r0
    3868:	00290857 	eoreq	r0, r9, r7, asr r8
    386c:	002a4800 	eoreq	r4, sl, r0, lsl #16
    3870:	f3000400 	vshl.u8	d0, d0, d0
    3874:	009f5001 	addseq	r5, pc, r1
    3878:	00000000 	andeq	r0, r0, r0
    387c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    3880:	c8000028 	stmdagt	r0, {r3, r5}
    3884:	01000029 	tsteq	r0, r9, lsr #32
    3888:	29ca5000 	stmibcs	sl, {ip, lr}^
    388c:	2a040000 	bcs	103894 <__ccfg+0xe38ec>
    3890:	00010000 	andeq	r0, r1, r0
    3894:	00000050 	andeq	r0, r0, r0, asr r0
    3898:	00000000 	andeq	r0, r0, r0
    389c:	0028f000 	eoreq	pc, r8, r0
    38a0:	0028f400 	eoreq	pc, r8, r0, lsl #8
    38a4:	70000300 	andvc	r0, r0, r0, lsl #6
    38a8:	28f49f71 	ldmcs	r4!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    38ac:	28fa0000 	ldmcs	sl!, {}^	; <UNPREDICTABLE>
    38b0:	00010000 	andeq	r0, r1, r0
    38b4:	0028fa51 	eoreq	pc, r8, r1, asr sl	; <UNPREDICTABLE>
    38b8:	00291a00 	eoreq	r1, r9, r0, lsl #20
    38bc:	91000200 	mrsls	r0, R8_usr
    38c0:	00291a54 	eoreq	r1, r9, r4, asr sl
    38c4:	00292600 	eoreq	r2, r9, r0, lsl #12
    38c8:	51000100 	mrspl	r0, (UNDEF: 16)
    38cc:	00002926 	andeq	r2, r0, r6, lsr #18
    38d0:	00002928 	andeq	r2, r0, r8, lsr #18
    38d4:	54910002 	ldrpl	r0, [r1], #2
    38d8:	00002928 	andeq	r2, r0, r8, lsr #18
    38dc:	0000292a 	andeq	r2, r0, sl, lsr #18
    38e0:	2a510001 	bcs	14438ec <__ccfg+0x1423944>
    38e4:	d0000029 	andle	r0, r0, r9, lsr #32
    38e8:	02000029 	andeq	r0, r0, #41	; 0x29
    38ec:	00549100 	subseq	r9, r4, r0, lsl #2
    38f0:	00000000 	andeq	r0, r0, r0
    38f4:	54000000 	strpl	r0, [r0], #-0
    38f8:	ae000028 	cdpge	0, 0, cr0, cr0, cr8, {1}
    38fc:	01000028 	tsteq	r0, r8, lsr #32
    3900:	28b65100 	ldmcs	r6!, {r8, ip, lr}
    3904:	28b80000 	ldmcs	r8!, {}	; <UNPREDICTABLE>
    3908:	00010000 	andeq	r0, r1, r0
    390c:	00000051 	andeq	r0, r0, r1, asr r0
    3910:	00000000 	andeq	r0, r0, r0
    3914:	0028a600 	eoreq	sl, r8, r0, lsl #12
    3918:	0028b400 	eoreq	fp, r8, r0, lsl #8
    391c:	52000100 	andpl	r0, r0, #0, 2
    3920:	000028b6 			; <UNDEFINED> instruction: 0x000028b6
    3924:	00002998 	muleq	r0, r8, r9
    3928:	00520001 	subseq	r0, r2, r1
    392c:	00000000 	andeq	r0, r0, r0
    3930:	a6000000 	strge	r0, [r0], -r0
    3934:	8e000028 	cdphi	0, 0, cr0, cr0, cr8, {1}
    3938:	01000029 	tsteq	r0, r9, lsr #32
    393c:	00005300 	andeq	r5, r0, r0, lsl #6
    3940:	00000000 	andeq	r0, r0, r0
    3944:	284c0000 	stmdacs	ip, {}^	; <UNPREDICTABLE>
    3948:	29a20000 	stmibcs	r2!, {}	; <UNPREDICTABLE>
    394c:	00010000 	andeq	r0, r1, r0
    3950:	00000055 	andeq	r0, r0, r5, asr r0
    3954:	00000000 	andeq	r0, r0, r0
    3958:	00284800 	eoreq	r4, r8, r0, lsl #16
    395c:	0028d000 	eoreq	sp, r8, r0
    3960:	30000200 	andcc	r0, r0, r0, lsl #4
    3964:	0028d09f 	mlaeq	r8, pc, r0, sp	; <UNPREDICTABLE>
    3968:	002a0400 	eoreq	r0, sl, r0, lsl #8
    396c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3978:	000028c8 	andeq	r2, r0, r8, asr #17
    397c:	000028d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    3980:	00510001 	subseq	r0, r1, r1
    3984:	00000000 	andeq	r0, r0, r0
    3988:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    398c:	40000028 	andmi	r0, r0, r8, lsr #32
    3990:	02000029 	andeq	r0, r0, #41	; 0x29
    3994:	409f3000 	addsmi	r3, pc, r0
    3998:	60000029 	andvs	r0, r0, r9, lsr #32
    399c:	01000029 	tsteq	r0, r9, lsr #32
    39a0:	29605100 	stmdbcs	r0!, {r8, ip, lr}^
    39a4:	29660000 	stmdbcs	r6!, {}^	; <UNPREDICTABLE>
    39a8:	00020000 	andeq	r0, r2, r0
    39ac:	29669f30 	stmdbcs	r6!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    39b0:	29a00000 	stmibcs	r0!, {}	; <UNPREDICTABLE>
    39b4:	00010000 	andeq	r0, r1, r0
    39b8:	00000051 	andeq	r0, r0, r1, asr r0
    39bc:	00000000 	andeq	r0, r0, r0
    39c0:	00291c00 	eoreq	r1, r9, r0, lsl #24
    39c4:	00292000 	eoreq	r2, r9, r0
    39c8:	5e000100 	adfpls	f0, f0, f0
    39cc:	00002928 	andeq	r2, r0, r8, lsr #18
    39d0:	0000292a 	andeq	r2, r0, sl, lsr #18
    39d4:	2a5e0001 	bcs	17839e0 <__ccfg+0x1763a38>
    39d8:	30000029 	andcc	r0, r0, r9, lsr #32
    39dc:	01000029 	tsteq	r0, r9, lsr #32
    39e0:	29305100 	ldmdbcs	r0!, {r8, ip, lr}
    39e4:	29380000 	ldmdbcs	r8!, {}	; <UNPREDICTABLE>
    39e8:	00030000 	andeq	r0, r3, r0
    39ec:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    39f0:	00000000 	andeq	r0, r0, r0
    39f4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    39f8:	1a000028 	bne	3aa0 <__exidx_end+0xc24>
    39fc:	02000029 	andeq	r0, r0, #41	; 0x29
    3a00:	1a9f3000 	bne	fe7cfa08 <_estack+0xde7caa08>
    3a04:	24000029 	strcs	r0, [r0], #-41	; 0xffffffd7
    3a08:	01000029 	tsteq	r0, r9, lsr #32
    3a0c:	29245e00 	stmdbcs	r4!, {r9, sl, fp, ip, lr}
    3a10:	29260000 	stmdbcs	r6!, {}	; <UNPREDICTABLE>
    3a14:	00050000 	andeq	r0, r5, r0
    3a18:	26380071 			; <UNDEFINED> instruction: 0x26380071
    3a1c:	0029269f 	mlaeq	r9, pc, r6, r2	; <UNPREDICTABLE>
    3a20:	00292800 	eoreq	r2, r9, r0, lsl #16
    3a24:	91000600 	tstls	r0, r0, lsl #12
    3a28:	26380654 			; <UNDEFINED> instruction: 0x26380654
    3a2c:	0029289f 	mlaeq	r9, pc, r8, r2	; <UNPREDICTABLE>
    3a30:	00292a00 	eoreq	r2, r9, r0, lsl #20
    3a34:	5e000100 	adfpls	f0, f0, f0
    3a38:	0000292a 	andeq	r2, r0, sl, lsr #18
    3a3c:	00002960 	andeq	r2, r0, r0, ror #18
    3a40:	54910006 	ldrpl	r0, [r1], #6
    3a44:	9f263806 	svcls	0x00263806
    3a48:	00002960 	andeq	r2, r0, r0, ror #18
    3a4c:	00002966 	andeq	r2, r0, r6, ror #18
    3a50:	9f300002 	svcls	0x00300002
    3a54:	00002966 	andeq	r2, r0, r6, ror #18
    3a58:	000029d0 	ldrdeq	r2, [r0], -r0
    3a5c:	005e0001 	subseq	r0, lr, r1
    3a60:	00000000 	andeq	r0, r0, r0
    3a64:	3c000000 	stccc	0, cr0, [r0], {-0}
    3a68:	60000029 	andvs	r0, r0, r9, lsr #32
    3a6c:	01000029 	tsteq	r0, r9, lsr #32
    3a70:	00005c00 	andeq	r5, r0, r0, lsl #24
    3a74:	00000000 	andeq	r0, r0, r0
    3a78:	296a0000 	stmdbcs	sl!, {}^	; <UNPREDICTABLE>
    3a7c:	29d00000 	ldmibcs	r0, {}^	; <UNPREDICTABLE>
    3a80:	00010000 	andeq	r0, r1, r0
    3a84:	0000005a 	andeq	r0, r0, sl, asr r0
    3a88:	00000000 	andeq	r0, r0, r0
    3a8c:	00296e00 	eoreq	r6, r9, r0, lsl #28
    3a90:	0029aa00 	eoreq	sl, r9, r0, lsl #20
    3a94:	5c000100 	stfpls	f0, [r0], {-0}
    3a98:	000029aa 	andeq	r2, r0, sl, lsr #19
    3a9c:	000029ae 	andeq	r2, r0, lr, lsr #19
    3aa0:	00510001 	subseq	r0, r1, r1
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    3aac:	b8000029 	stmdalt	r0, {r0, r3, r5}
    3ab0:	17000029 	strne	r0, [r0, -r9, lsr #32]
    3ab4:	12007100 	andne	r7, r0, #0, 2
    3ab8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3abc:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    3ac0:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3ac4:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3ac8:	9f131600 	svcls	0x00131600
	...
    3ad4:	000029d8 	ldrdeq	r2, [r0], -r8
    3ad8:	000029e4 	andeq	r2, r0, r4, ror #19
    3adc:	9f300002 	svcls	0x00300002
    3ae0:	000029e4 	andeq	r2, r0, r4, ror #19
    3ae4:	00002a04 	andeq	r2, r0, r4, lsl #20
    3ae8:	00510001 	subseq	r0, r1, r1
    3aec:	00000000 	andeq	r0, r0, r0
    3af0:	da000000 	ble	3af8 <__exidx_end+0xc7c>
    3af4:	dc000029 	stcle	0, cr0, [r0], {41}	; 0x29
    3af8:	01000029 	tsteq	r0, r9, lsr #32
    3afc:	29dc5300 	ldmibcs	ip, {r8, r9, ip, lr}^
    3b00:	29e40000 	stmibcs	r4!, {}^	; <UNPREDICTABLE>
    3b04:	00020000 	andeq	r0, r2, r0
    3b08:	29e49f4f 	stmibcs	r4!, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, pc}^
    3b0c:	29f40000 	ldmibcs	r4!, {}^	; <UNPREDICTABLE>
    3b10:	00010000 	andeq	r0, r1, r0
    3b14:	0029f453 	eoreq	pc, r9, r3, asr r4	; <UNPREDICTABLE>
    3b18:	0029f800 	eoreq	pc, r9, r0, lsl #16
    3b1c:	73000500 	movwvc	r0, #1280	; 0x500
    3b20:	9f253400 	svcls	0x00253400
    3b24:	000029f8 	strdeq	r2, [r0], -r8
    3b28:	000029fc 	strdeq	r2, [r0], -ip
    3b2c:	00530001 	subseq	r0, r3, r1
    3b30:	00000000 	andeq	r0, r0, r0
    3b34:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    3b38:	d0000028 	andle	r0, r0, r8, lsr #32
    3b3c:	06000029 	streq	r0, [r0], -r9, lsr #32
    3b40:	139c0c00 	orrsne	r0, ip, #0, 24
    3b44:	009f5000 	addseq	r5, pc, r0
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    3b50:	68000028 	stmdavs	r0, {r3, r5}
    3b54:	01000028 	tsteq	r0, r8, lsr #32
    3b58:	00005300 	andeq	r5, r0, r0, lsl #6
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	287c0000 	ldmdacs	ip!, {}^	; <UNPREDICTABLE>
    3b64:	28880000 	stmcs	r8, {}	; <UNPREDICTABLE>
    3b68:	00010000 	andeq	r0, r1, r0
    3b6c:	00000052 	andeq	r0, r0, r2, asr r0
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	00289200 	eoreq	r9, r8, r0, lsl #4
    3b78:	00289e00 	eoreq	r9, r8, r0, lsl #28
    3b7c:	52000100 	andpl	r0, r0, #0, 2
	...
    3b88:	0000289e 	muleq	r0, lr, r8
    3b8c:	0000298e 	andeq	r2, r0, lr, lsl #19
    3b90:	00530001 	subseq	r0, r3, r1
    3b94:	00000000 	andeq	r0, r0, r0
    3b98:	56000000 	strpl	r0, [r0], -r0
    3b9c:	6000002a 	andvs	r0, r0, sl, lsr #32
    3ba0:	0100002a 	tsteq	r0, sl, lsr #32
    3ba4:	2a605000 	bcs	1817bac <__ccfg+0x17f7c04>
    3ba8:	2a6a0000 	bcs	1a83bb0 <__ccfg+0x1a63c08>
    3bac:	000e0000 	andeq	r0, lr, r0
    3bb0:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    3bb4:	2b141680 	blcs	5095bc <__ccfg+0x4e9614>
    3bb8:	16000128 	strne	r0, [r0], -r8, lsr #2
    3bbc:	00009f13 	andeq	r9, r0, r3, lsl pc
    3bc0:	00000000 	andeq	r0, r0, r0
    3bc4:	2a500000 	bcs	1403bcc <__ccfg+0x13e3c24>
    3bc8:	2a7c0000 	bcs	1f03bd0 <__ccfg+0x1ee3c28>
    3bcc:	00010000 	andeq	r0, r1, r0
    3bd0:	00000054 	andeq	r0, r0, r4, asr r0
    3bd4:	00000000 	andeq	r0, r0, r0
    3bd8:	002a8000 	eoreq	r8, sl, r0
    3bdc:	002a8600 	eoreq	r8, sl, r0, lsl #12
    3be0:	73001500 	movwvc	r1, #1280	; 0x500
    3be4:	4b401200 	blmi	10083ec <__ccfg+0xfe8444>
    3be8:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    3bec:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3bf0:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3bf4:	9f131600 	svcls	0x00131600
	...
    3c00:	00002a8c 	andeq	r2, r0, ip, lsl #21
    3c04:	00002a96 	muleq	r0, r6, sl
    3c08:	00740017 	rsbseq	r0, r4, r7, lsl r0
    3c0c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3c10:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    3c14:	4b401416 	blmi	1008c74 <__ccfg+0xfe8ccc>
    3c18:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3c1c:	13160001 	tstne	r6, #1
    3c20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3c30:	52000100 	andpl	r0, r0, #0, 2
	...
    3c44:	00500001 	subseq	r0, r0, r1
	...
    3c54:	01000000 	mrseq	r0, (UNDEF: 0)
    3c58:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3c68:	00010000 	andeq	r0, r1, r0
    3c6c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3c7c:	70001600 	andvc	r1, r0, r0, lsl #12
    3c80:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    3c84:	244b4000 	strbcs	r4, [fp], #-0
    3c88:	00050c22 	andeq	r0, r5, r2, lsr #24
    3c8c:	282d8000 	stmdacs	sp!, {pc}
    3c90:	13160001 	tstne	r6, #1
    3c94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	002ac000 	eoreq	ip, sl, r0
    3ca0:	002b0200 	eoreq	r0, fp, r0, lsl #4
    3ca4:	09000300 	stmdbeq	r0, {r8, r9}
    3ca8:	2b029fff 	blcs	abcac <__ccfg+0x8bd04>
    3cac:	2b0c0000 	blcs	303cb4 <__ccfg+0x2e3d0c>
    3cb0:	00010000 	andeq	r0, r1, r0
    3cb4:	00000050 	andeq	r0, r0, r0, asr r0
    3cb8:	00000000 	andeq	r0, r0, r0
    3cbc:	002acc00 	eoreq	ip, sl, r0, lsl #24
    3cc0:	002ada00 	eoreq	sp, sl, r0, lsl #20
    3cc4:	50000100 	andpl	r0, r0, r0, lsl #2
    3cc8:	00002ade 	ldrdeq	r2, [r0], -lr
    3ccc:	00002afa 	strdeq	r2, [r0], -sl
    3cd0:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3cd4:	fe00002a 	cdp2	0, 0, cr0, cr0, cr10, {1}
    3cd8:	0100002a 	tsteq	r0, sl, lsr #32
    3cdc:	2b005000 	blcs	17ce4 <__exidx_end+0x14e68>
    3ce0:	2b020000 	blcs	83ce8 <__ccfg+0x63d40>
    3ce4:	00010000 	andeq	r0, r1, r0
    3ce8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3cf8:	09000300 	stmdbeq	r0, {r8, r9}
    3cfc:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    3d00:	00000000 	andeq	r0, r0, r0
    3d04:	00010000 	andeq	r0, r1, r0
    3d08:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3d18:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3d24:	00002b0c 	andeq	r2, r0, ip, lsl #22
    3d28:	00002b46 	andeq	r2, r0, r6, asr #22
    3d2c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3d30:	002b469f 	mlaeq	fp, pc, r6, r4	; <UNPREDICTABLE>
    3d34:	002b4a00 	eoreq	r4, fp, r0, lsl #20
    3d38:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    3d3c:	002b4a9f 	mlaeq	fp, pc, sl, r4	; <UNPREDICTABLE>
    3d40:	002b4e00 	eoreq	r4, fp, r0, lsl #28
    3d44:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    3d48:	002b4e9f 	mlaeq	fp, pc, lr, r4	; <UNPREDICTABLE>
    3d4c:	002b6c00 	eoreq	r6, fp, r0, lsl #24
    3d50:	09000300 	stmdbeq	r0, {r8, r9}
    3d54:	2b6c9fff 	blcs	1b2bd58 <__ccfg+0x1b0bdb0>
    3d58:	2b6e0000 	blcs	1b83d60 <__ccfg+0x1b63db8>
    3d5c:	00010000 	andeq	r0, r1, r0
    3d60:	002b6e50 	eoreq	r6, fp, r0, asr lr
    3d64:	002b7000 	eoreq	r7, fp, r0
    3d68:	09000300 	stmdbeq	r0, {r8, r9}
    3d6c:	2b709fff 	blcs	1c2bd70 <__ccfg+0x1c0bdc8>
    3d70:	2b780000 	blcs	1e03d78 <__ccfg+0x1de3dd0>
    3d74:	00010000 	andeq	r0, r1, r0
    3d78:	00000050 	andeq	r0, r0, r0, asr r0
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	002b1c00 	eoreq	r1, fp, r0, lsl #24
    3d84:	002b7400 	eoreq	r7, fp, r0, lsl #8
    3d88:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3d94:	00002b90 	muleq	r0, r0, fp
    3d98:	00002b99 	muleq	r0, r9, fp
    3d9c:	99500001 	ldmdbls	r0, {r0}^
    3da0:	ae00002b 	cdpge	0, 0, cr0, cr0, cr11, {1}
    3da4:	0100002b 	tsteq	r0, fp, lsr #32
    3da8:	2bae5400 	blcs	feb98db0 <_estack+0xdeb93db0>
    3dac:	2bb20000 	blcs	fec83db4 <_estack+0xdec7edb4>
    3db0:	00040000 	andeq	r0, r4, r0
    3db4:	9f5001f3 	svcls	0x005001f3
    3db8:	00002bb2 			; <UNDEFINED> instruction: 0x00002bb2
    3dbc:	00002bb4 			; <UNDEFINED> instruction: 0x00002bb4
    3dc0:	b4540001 	ldrblt	r0, [r4], #-1
    3dc4:	b800002b 	stmdalt	r0, {r0, r1, r3, r5}
    3dc8:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    3dcc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3dd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	002b9000 	eoreq	r9, fp, r0
    3ddc:	002b9900 	eoreq	r9, fp, r0, lsl #18
    3de0:	51000100 	mrspl	r0, (UNDEF: 16)
    3de4:	00002b99 	muleq	r0, r9, fp
    3de8:	00002bae 	andeq	r2, r0, lr, lsr #23
    3dec:	ae550001 	cdpge	0, 5, cr0, cr5, cr1, {0}
    3df0:	b200002b 	andlt	r0, r0, #43	; 0x2b
    3df4:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    3df8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3dfc:	002bb29f 	mlaeq	fp, pc, r2, fp	; <UNPREDICTABLE>
    3e00:	002bb400 	eoreq	fp, fp, r0, lsl #8
    3e04:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3e08:	00002bb4 			; <UNDEFINED> instruction: 0x00002bb4
    3e0c:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    3e10:	01f30004 	mvnseq	r0, r4
    3e14:	00009f51 	andeq	r9, r0, r1, asr pc
    3e18:	00000000 	andeq	r0, r0, r0
    3e1c:	2b9a0000 	blcs	fe683e24 <_estack+0xde67ee24>
    3e20:	2bb10000 	blcs	fec43e28 <_estack+0xdec3ee28>
    3e24:	00050000 	andeq	r0, r5, r0
    3e28:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    3e2c:	002bb29f 	mlaeq	fp, pc, r2, fp	; <UNPREDICTABLE>
    3e30:	002bb800 	eoreq	fp, fp, r0, lsl #16
    3e34:	70000500 	andvc	r0, r0, r0, lsl #10
    3e38:	9f293000 	svcls	0x00293000
	...
    3e44:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    3e48:	00002bba 			; <UNDEFINED> instruction: 0x00002bba
    3e4c:	ba500001 	blt	1403e58 <__ccfg+0x13e3eb0>
    3e50:	c000002b 	andgt	r0, r0, fp, lsr #32
    3e54:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    3e58:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e60:	00000000 	andeq	r0, r0, r0
    3e64:	002bb800 	eoreq	fp, fp, r0, lsl #16
    3e68:	002bbc00 	eoreq	fp, fp, r0, lsl #24
    3e6c:	51000100 	mrspl	r0, (UNDEF: 16)
    3e70:	00002bbc 			; <UNDEFINED> instruction: 0x00002bbc
    3e74:	00002bc0 	andeq	r2, r0, r0, asr #23
    3e78:	01f30004 	mvnseq	r0, r4
    3e7c:	00009f51 	andeq	r9, r0, r1, asr pc
    3e80:	00000000 	andeq	r0, r0, r0
    3e84:	2bb80000 	blcs	fee03e8c <_estack+0xdedfee8c>
    3e88:	2bbf0000 	blcs	fefc3e90 <_estack+0xdefbee90>
    3e8c:	00010000 	andeq	r0, r1, r0
    3e90:	002bbf52 	eoreq	fp, fp, r2, asr pc
    3e94:	002bc000 	eoreq	ip, fp, r0
    3e98:	f3000400 	vshl.u8	d0, d0, d0
    3e9c:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    3eac:	01000000 	mrseq	r0, (UNDEF: 0)
    3eb0:	00005000 	andeq	r5, r0, r0
    3eb4:	00000000 	andeq	r0, r0, r0
    3eb8:	00040000 	andeq	r0, r4, r0
    3ebc:	9f5001f3 	svcls	0x005001f3
	...
    3ed0:	00510001 	subseq	r0, r1, r1
    3ed4:	00000000 	andeq	r0, r0, r0
    3ed8:	04000000 	streq	r0, [r0], #-0
    3edc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3ee0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ef0:	52000100 	andpl	r0, r0, #0, 2
	...
    3efc:	01f30004 	mvnseq	r0, r4
    3f00:	00009f52 	andeq	r9, r0, r2, asr pc
    3f04:	00000000 	andeq	r0, r0, r0
    3f08:	00010000 	andeq	r0, r1, r0
    3f0c:	00000052 	andeq	r0, r0, r2, asr r0
    3f10:	00000000 	andeq	r0, r0, r0
    3f14:	f3001500 	vrshl.u8	d1, d0, d0
    3f18:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f1c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    3f20:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f24:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    3f28:	9f131600 	svcls	0x00131600
	...
    3f3c:	00530001 	subseq	r0, r3, r1
    3f40:	00000000 	andeq	r0, r0, r0
    3f44:	04000000 	streq	r0, [r0], #-0
    3f48:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f5c:	70000400 	andvc	r0, r0, r0, lsl #8
    3f60:	009f0480 	addseq	r0, pc, r0, lsl #9
    3f64:	00000000 	andeq	r0, r0, r0
    3f68:	0d000000 	stceq	0, cr0, [r0, #-0]
    3f6c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3f70:	01f32431 	mvnseq	r2, r1, lsr r4
    3f74:	80232250 	eorhi	r2, r3, r0, asr r2
    3f78:	00009f04 	andeq	r9, r0, r4, lsl #30
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	00010000 	andeq	r0, r1, r0
    3f84:	00000050 	andeq	r0, r0, r0, asr r0
    3f88:	00000000 	andeq	r0, r0, r0
    3f8c:	f3005200 	vhsub.u8	d5, d0, d0
    3f90:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3f94:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3f98:	f3048023 	vhadd.u8	d8, d4, d19
    3f9c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fa0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fa4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fa8:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    3fac:	13160001 	tstne	r6, #1
    3fb0:	f3048423 	vshl.u8	d8, d19, d4
    3fb4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fb8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fbc:	f3048023 	vhadd.u8	d8, d4, d19
    3fc0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fc4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fc8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fcc:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    3fd0:	13160001 	tstne	r6, #1
    3fd4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fd8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    3fdc:	13160001 	tstne	r6, #1
    3fe0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ff0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ffc:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    4000:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4004:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4008:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    400c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4010:	f3131600 	vmax.u16	d1, d3, d0
    4014:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4018:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    401c:	0001282e 	andeq	r2, r1, lr, lsr #16
    4020:	01f31316 	mvnseq	r1, r6, lsl r3
    4024:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    4028:	13160001 	tstne	r6, #1
    402c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    403c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4048:	01f30004 	mvnseq	r0, r4
    404c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    405c:	00010000 	andeq	r0, r1, r0
    4060:	00000051 	andeq	r0, r0, r1, asr r0
    4064:	00000000 	andeq	r0, r0, r0
    4068:	f3000400 	vshl.u8	d0, d0, d0
    406c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    407c:	01000000 	mrseq	r0, (UNDEF: 0)
    4080:	00005200 	andeq	r5, r0, r0, lsl #4
    4084:	00000000 	andeq	r0, r0, r0
    4088:	00040000 	andeq	r0, r4, r0
    408c:	9f5201f3 	svcls	0x005201f3
	...
    4098:	00520001 	subseq	r0, r2, r1
    409c:	00000000 	andeq	r0, r0, r0
    40a0:	1b000000 	blne	40a8 <__exidx_end+0x122c>
    40a4:	5201f300 	andpl	pc, r1, #0, 6
    40a8:	01f32540 	mvnseq	r2, r0, asr #10
    40ac:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    40b0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    40b4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    40b8:	01282b80 	smlawbeq	r8, r0, fp, r2
    40bc:	9f131600 	svcls	0x00131600
	...
    40d0:	00530001 	subseq	r0, r3, r1
    40d4:	00000000 	andeq	r0, r0, r0
    40d8:	04000000 	streq	r0, [r0], #-0
    40dc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    40e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40e4:	00000000 	andeq	r0, r0, r0
    40e8:	53000100 	movwpl	r0, #256	; 0x100
	...
    40f4:	01f3001b 	mvnseq	r0, fp, lsl r0
    40f8:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    40fc:	01f35301 	mvnseq	r5, r1, lsl #6
    4100:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4104:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4108:	282b8000 	stmdacs	fp!, {pc}
    410c:	13160001 	tstne	r6, #1
    4110:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4120:	91000200 	mrsls	r0, R8_usr
	...
    412c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    4140:	70000400 	andvc	r0, r0, r0, lsl #8
    4144:	009f0480 	addseq	r0, pc, r0, lsl #9
    4148:	00000000 	andeq	r0, r0, r0
    414c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4150:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4154:	01f32431 	mvnseq	r2, r1, lsr r4
    4158:	80232250 	eorhi	r2, r3, r0, asr r2
    415c:	00009f04 	andeq	r9, r0, r4, lsl #30
    4160:	00000000 	andeq	r0, r0, r0
    4164:	00010000 	andeq	r0, r1, r0
    4168:	00000050 	andeq	r0, r0, r0, asr r0
    416c:	00000000 	andeq	r0, r0, r0
    4170:	f3006400 	vshl.u8	d6, d0, d0
    4174:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4178:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    417c:	f3048023 	vhadd.u8	d8, d4, d19
    4180:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4184:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4188:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    418c:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4190:	8000000f 	andhi	r0, r0, pc
    4194:	0001282c 	andeq	r2, r1, ip, lsr #16
    4198:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    419c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41a0:	01f32431 	mvnseq	r2, r1, lsr r4
    41a4:	80232250 	eorhi	r2, r3, r0, asr r2
    41a8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41ac:	01f32431 	mvnseq	r2, r1, lsr r4
    41b0:	01f32250 	mvnseq	r2, r0, asr r2
    41b4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    41b8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    41bc:	282c8000 	stmdacs	ip!, {pc}
    41c0:	13160001 	tstne	r6, #1
    41c4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    41c8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    41cc:	8000000f 	andhi	r0, r0, pc
    41d0:	0001282b 	andeq	r2, r1, fp, lsr #16
    41d4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    41e4:	0a000000 	beq	41ec <__exidx_end+0x1370>
    41e8:	0a007400 	beq	211f0 <__ccfg+0x1248>
    41ec:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    41f0:	009f2400 	addseq	r2, pc, r0, lsl #8
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    41fc:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    4200:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4204:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    420c:	00000000 	andeq	r0, r0, r0
    4210:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    4214:	0a029400 	beq	a921c <__ccfg+0x89274>
    4218:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    421c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4220:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4224:	4b405301 	blmi	1018e30 <__ccfg+0xff8e88>
    4228:	0f0c2224 	svceq	0x000c2224
    422c:	2b800000 	blcs	fe004234 <_estack+0xddfff234>
    4230:	16000128 	strne	r0, [r0], -r8, lsr #2
    4234:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    4244:	01000000 	mrseq	r0, (UNDEF: 0)
    4248:	00005000 	andeq	r5, r0, r0
    424c:	00000000 	andeq	r0, r0, r0
    4250:	00040000 	andeq	r0, r4, r0
    4254:	9f5001f3 	svcls	0x005001f3
	...
    4268:	00510001 	subseq	r0, r1, r1
    426c:	00000000 	andeq	r0, r0, r0
    4270:	04000000 	streq	r0, [r0], #-0
    4274:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4278:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4288:	52000100 	andpl	r0, r0, #0, 2
	...
    4294:	00540001 	subseq	r0, r4, r1
    4298:	00000000 	andeq	r0, r0, r0
    429c:	15000000 	strne	r0, [r0, #-0]
    42a0:	5201f300 	andpl	pc, r1, #0, 6
    42a4:	01f32540 	mvnseq	r2, r0, asr #10
    42a8:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    42ac:	2e302540 	cfneg32cs	mvfx2, mvfx0
    42b0:	16000128 	strne	r0, [r0], -r8, lsr #2
    42b4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    42c4:	00010000 	andeq	r0, r1, r0
    42c8:	00000055 	andeq	r0, r0, r5, asr r0
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	f3001d00 	vpadd.f32	d1, d0, d0
    42d4:	01f35001 	mvnseq	r5, r1
    42d8:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    42dc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    42e0:	f3225101 	vrhadd.u32	d5, d2, d1
    42e4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    42e8:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    42ec:	9f131600 	svcls	0x00131600
	...
    4300:	00750006 	rsbseq	r0, r5, r6
    4304:	9f1a0074 	svcls	0x001a0074
	...
    4318:	00550001 	subseq	r0, r5, r1
    431c:	00000000 	andeq	r0, r0, r0
    4320:	1d000000 	stcne	0, cr0, [r0, #-0]
    4324:	5001f300 	andpl	pc, r1, r0, lsl #6
    4328:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    432c:	01f30223 	mvnseq	r0, r3, lsr #4
    4330:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4334:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4338:	2e302540 	cfneg32cs	mvfx2, mvfx0
    433c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4340:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4350:	00070000 	andeq	r0, r7, r0
    4354:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    4358:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    4368:	05000000 	streq	r0, [r0, #-0]
    436c:	30007000 	andcc	r7, r0, r0
    4370:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    4380:	00010000 	andeq	r0, r1, r0
    4384:	00000050 	andeq	r0, r0, r0, asr r0
    4388:	00000000 	andeq	r0, r0, r0
    438c:	f3000400 	vshl.u8	d0, d0, d0
    4390:	009f5001 	addseq	r5, pc, r1
	...
    43a0:	01000000 	mrseq	r0, (UNDEF: 0)
    43a4:	00005100 	andeq	r5, r0, r0, lsl #2
    43a8:	00000000 	andeq	r0, r0, r0
    43ac:	00040000 	andeq	r0, r4, r0
    43b0:	9f5101f3 	svcls	0x005101f3
	...
    43c4:	00520001 	subseq	r0, r2, r1
    43c8:	00000000 	andeq	r0, r0, r0
    43cc:	01000000 	mrseq	r0, (UNDEF: 0)
    43d0:	00005400 	andeq	r5, r0, r0, lsl #8
    43d4:	00000000 	andeq	r0, r0, r0
    43d8:	001b0000 	andseq	r0, fp, r0
    43dc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    43e0:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    43e4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    43e8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    43ec:	8000000f 	andhi	r0, r0, pc
    43f0:	0001282b 	andeq	r2, r1, fp, lsr #16
    43f4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4404:	01000000 	mrseq	r0, (UNDEF: 0)
    4408:	00005300 	andeq	r5, r0, r0, lsl #6
    440c:	00000000 	andeq	r0, r0, r0
    4410:	00010000 	andeq	r0, r1, r0
    4414:	00000055 	andeq	r0, r0, r5, asr r0
    4418:	00000000 	andeq	r0, r0, r0
    441c:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4420:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4424:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4428:	4b405301 	blmi	1019034 <__ccfg+0xff908c>
    442c:	0f0c2224 	svceq	0x000c2224
    4430:	2b800000 	blcs	fe004438 <_estack+0xddfff438>
    4434:	16000128 	strne	r0, [r0], -r8, lsr #2
    4438:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4448:	00010000 	andeq	r0, r1, r0
    444c:	00000056 	andeq	r0, r0, r6, asr r0
    4450:	00000000 	andeq	r0, r0, r0
    4454:	70000600 	andvc	r0, r0, r0, lsl #12
    4458:	22007100 	andcs	r7, r0, #0, 2
    445c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4460:	00000000 	andeq	r0, r0, r0
    4464:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4470:	01f30023 	mvnseq	r0, r3, lsr #32
    4474:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4478:	f3022322 	vcgt.u8	d2, d2, d18
    447c:	01f35001 	mvnseq	r5, r1
    4480:	01f32251 	mvnseq	r2, r1, asr r2
    4484:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4488:	000f0c22 	andeq	r0, pc, r2, lsr #24
    448c:	282b8000 	stmdacs	fp!, {pc}
    4490:	13160001 	tstne	r6, #1
    4494:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    44a4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    44a8:	1a007400 	bne	214b0 <__ccfg+0x1508>
    44ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44b0:	00000000 	andeq	r0, r0, r0
    44b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44c8:	00560001 	subseq	r0, r6, r1
    44cc:	00000000 	andeq	r0, r0, r0
    44d0:	23000000 	movwcs	r0, #0
    44d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    44d8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    44dc:	01f30223 	mvnseq	r0, r3, lsr #4
    44e0:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    44e4:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    44e8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    44ec:	00000f0c 	andeq	r0, r0, ip, lsl #30
    44f0:	01282b80 	smlawbeq	r8, r0, fp, r2
    44f4:	9f131600 	svcls	0x00131600
	...
    4508:	00760007 	rsbseq	r0, r6, r7
    450c:	1affff0a 	bne	413c <__exidx_end+0x12c0>
    4510:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4520:	70000500 	andvc	r0, r0, r0, lsl #10
    4524:	9f293000 	svcls	0x00293000
	...
    4530:	00002bc0 	andeq	r2, r0, r0, asr #23
    4534:	00002bd8 	ldrdeq	r2, [r0], -r8
    4538:	d8500001 	ldmdale	r0, {r0}^
    453c:	1200002b 	andne	r0, r0, #43	; 0x2b
    4540:	0100002c 	tsteq	r0, ip, lsr #32
    4544:	2c125500 	cfldr32cs	mvfx5, [r2], {-0}
    4548:	2c1c0000 	ldccs	0, cr0, [ip], {-0}
    454c:	00040000 	andeq	r0, r4, r0
    4550:	9f5001f3 	svcls	0x005001f3
	...
    455c:	00002bc0 	andeq	r2, r0, r0, asr #23
    4560:	00002bc6 	andeq	r2, r0, r6, asr #23
    4564:	c6510001 	ldrbgt	r0, [r1], -r1
    4568:	fe00002b 	cdp2	0, 0, cr0, cr0, cr11, {1}
    456c:	0100002b 	tsteq	r0, fp, lsr #32
    4570:	2bfe5400 	blcs	fff99578 <_estack+0xdff94578>
    4574:	2c1c0000 	ldccs	0, cr0, [ip], {-0}
    4578:	00040000 	andeq	r0, r4, r0
    457c:	9f5101f3 	svcls	0x005101f3
	...
    4588:	00002bfa 	strdeq	r2, [r0], -sl
    458c:	00002c0e 	andeq	r2, r0, lr, lsl #24
    4590:	00550001 	subseq	r0, r5, r1
    4594:	00000000 	andeq	r0, r0, r0
    4598:	fa000000 	blx	45a0 <__exidx_end+0x1724>
    459c:	fe00002b 	cdp2	0, 0, cr0, cr0, cr11, {1}
    45a0:	0100002b 	tsteq	r0, fp, lsr #32
    45a4:	2bfe5400 	blcs	fff995ac <_estack+0xdff945ac>
    45a8:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    45ac:	00040000 	andeq	r0, r4, r0
    45b0:	9f5101f3 	svcls	0x005101f3
	...
    45bc:	00002c1c 	andeq	r2, r0, ip, lsl ip
    45c0:	00002c3a 	andeq	r2, r0, sl, lsr ip
    45c4:	3a500001 	bcc	14045d0 <__ccfg+0x13e4628>
    45c8:	4800002c 	stmdami	r0, {r2, r3, r5}
    45cc:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    45d0:	5001f300 	andpl	pc, r1, r0, lsl #6
    45d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    45e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    45f0:	00560001 	subseq	r0, r6, r1
    45f4:	00000000 	andeq	r0, r0, r0
    45f8:	04000000 	streq	r0, [r0], #-0
    45fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    4600:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4610:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4624:	00700007 	rsbseq	r0, r0, r7
    4628:	191c0073 	ldmdbne	ip, {r0, r1, r4, r5, r6}
    462c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4630:	00000000 	andeq	r0, r0, r0
    4634:	70000400 	andvc	r0, r0, r0, lsl #8
    4638:	009f1900 	addseq	r1, pc, r0, lsl #18
	...
    4648:	04000000 	streq	r0, [r0], #-0
    464c:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    4650:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4654:	00000000 	andeq	r0, r0, r0
    4658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4664:	00720005 	rsbseq	r0, r2, r5
    4668:	009f2540 	addseq	r2, pc, r0, asr #10
    466c:	00000000 	andeq	r0, r0, r0
    4670:	01000000 	mrseq	r0, (UNDEF: 0)
    4674:	00005000 	andeq	r5, r0, r0
    4678:	00000000 	andeq	r0, r0, r0
    467c:	00040000 	andeq	r0, r4, r0
    4680:	9f07d00a 	svcls	0x0007d00a
	...
    468c:	00500001 	subseq	r0, r0, r1
	...
    469c:	01000000 	mrseq	r0, (UNDEF: 0)
    46a0:	00005000 	andeq	r5, r0, r0
	...
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	00000053 	andeq	r0, r0, r3, asr r0
	...
    46c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46d0:	1b700003 	blne	1c046e4 <__ccfg+0x1be473c>
    46d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46d8:	00000000 	andeq	r0, r0, r0
    46dc:	f3000400 	vshl.u8	d0, d0, d0
    46e0:	009f5001 	addseq	r5, pc, r1
	...
    46f0:	07000000 	streq	r0, [r0, -r0]
    46f4:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    46f8:	9f264824 	svcls	0x00264824
	...
    470c:	00500001 	subseq	r0, r0, r1
    4710:	00000000 	andeq	r0, r0, r0
    4714:	06000000 	streq	r0, [r0], -r0
    4718:	5001f300 	andpl	pc, r1, r0, lsl #6
    471c:	009f1c4b 	addseq	r1, pc, fp, asr #24
	...
    472c:	01000000 	mrseq	r0, (UNDEF: 0)
    4730:	00005500 	andeq	r5, r0, r0, lsl #10
    4734:	00000000 	andeq	r0, r0, r0
    4738:	000c0000 	andeq	r0, ip, r0
    473c:	4b5001f3 	blmi	1404f10 <__ccfg+0x13e4f68>
    4740:	5001f31c 	andpl	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
    4744:	9f1e1c4b 	svcls	0x001e1c4b
	...
    4758:	0071002c 	rsbseq	r0, r1, ip, lsr #32
    475c:	00712640 	rsbseq	r2, r1, r0, asr #12
    4760:	26482440 	strbcs	r2, [r8], -r0, asr #8
    4764:	331e0070 	tstcc	lr, #112	; 0x70
    4768:	00712226 	rsbseq	r2, r1, r6, lsr #4
    476c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    4770:	3a1e0075 	bcc	78494c <__ccfg+0x7649a4>
    4774:	00742226 	rsbseq	r2, r4, r6, lsr #4
    4778:	26482448 	strbcs	r2, [r8], -r8, asr #8
    477c:	701e0075 	andsvc	r0, lr, r5, ror r0
    4780:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    4784:	00009f22 	andeq	r9, r0, r2, lsr #30
    4788:	00000000 	andeq	r0, r0, r0
    478c:	00320000 	eorseq	r0, r2, r0
    4790:	26400071 			; <UNDEFINED> instruction: 0x26400071
    4794:	4b5001f3 	blmi	1404f68 <__ccfg+0x13e4fc0>
    4798:	4000711c 	andmi	r7, r0, ip, lsl r1
    479c:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    47a0:	71222633 			; <UNDEFINED> instruction: 0x71222633
    47a4:	48244800 	stmdami	r4!, {fp, lr}
    47a8:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    47ac:	f322263a 	vmin.u32	d2, d2, d26
    47b0:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    47b4:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    47b8:	751e2648 	ldrvc	r2, [lr, #-1608]	; 0xfffff9b8
    47bc:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    47c0:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
    47d0:	00010000 	andeq	r0, r1, r0
    47d4:	00000050 	andeq	r0, r0, r0, asr r0
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	f3000400 	vshl.u8	d0, d0, d0
    47e0:	009f5001 	addseq	r5, pc, r1
	...
    47f0:	0b000000 	bleq	47f8 <__exidx_end+0x197c>
    47f4:	70007000 	andvc	r7, r0, r0
    47f8:	26461e00 	strbcs	r1, [r6], -r0, lsl #28
    47fc:	9f1c0070 	svcls	0x001c0070
	...
    4808:	00500001 	subseq	r0, r0, r1
    480c:	00000000 	andeq	r0, r0, r0
    4810:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4814:	5001f300 	andpl	pc, r1, r0, lsl #6
    4818:	1e5001f3 	mrcne	1, 2, r0, cr0, cr3, {7}
    481c:	01f32646 	mvnseq	r2, r6, asr #12
    4820:	009f1c50 	addseq	r1, pc, r0, asr ip	; <UNPREDICTABLE>
	...
    4830:	01000000 	mrseq	r0, (UNDEF: 0)
    4834:	00005500 	andeq	r5, r0, r0, lsl #10
    4838:	00000000 	andeq	r0, r0, r0
    483c:	00050000 	andeq	r0, r5, r0
    4840:	0910380c 	ldmdbeq	r0, {r2, r3, fp, ip, sp}
    4844:	00000040 	andeq	r0, r0, r0, asr #32
	...
    4854:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4868:	00700006 	rsbseq	r0, r0, r6
    486c:	9f1c0076 	svcls	0x001c0076
	...
    4878:	00500001 	subseq	r0, r0, r1
	...
    4888:	0a000000 	beq	4890 <__exidx_end+0x1a14>
    488c:	08007000 	stmdaeq	r0, {ip, sp, lr}
    4890:	1a2444fc 	bne	915c88 <__ccfg+0x8f5ce0>
    4894:	009f2546 	addseq	r2, pc, r6, asr #10
	...
    48a4:	01000000 	mrseq	r0, (UNDEF: 0)
    48a8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    48b8:	00090000 	andeq	r0, r9, r0
    48bc:	000a0073 	andeq	r0, sl, r3, ror r0
    48c0:	253a1afc 	ldrcs	r1, [sl, #-2812]!	; 0xfffff504
    48c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    48d4:	73000a00 	movwvc	r0, #2560	; 0xa00
    48d8:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    48dc:	25421a24 	strbcs	r1, [r2, #-2596]	; 0xfffff5dc
    48e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48e4:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
    return (time * SECOND)/1000;
   8:	00040000 	andeq	r0, r4, r0
}
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	0000017c 	andeq	r0, r0, ip, ror r1
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000e 	andeq	r0, r0, lr
  20:	00000244 	andeq	r0, r0, r4, asr #4
  24:	00000070 	andeq	r0, r0, r0, ror r0
  28:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
  2c:	00000184 	andeq	r0, r0, r4, lsl #3
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	08280002 	stmdaeq	r8!, {r1}
}
  40:	00040000 	andeq	r0, r4, r0
  44:	00000000 	andeq	r0, r0, r0
  48:	00000438 	andeq	r0, r0, r8, lsr r4
  4c:	0000000c 	andeq	r0, r0, ip
  50:	00000444 	andeq	r0, r0, r4, asr #8
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	00000470 	andeq	r0, r0, r0, ror r4
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
  60:	0000049c 	muleq	r0, ip, r4
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	000004d8 	ldrdeq	r0, [r0], -r8
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	0000052c 	andeq	r0, r0, ip, lsr #10
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	0000056c 	andeq	r0, r0, ip, ror #10
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	descriptors [fd] = s;
  90:	00000594 	muleq	r0, r4, r5
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	000006a8 	andeq	r0, r0, r8, lsr #13
	if (s == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	000006f8 	strdeq	r0, [r0], -r8
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	0000074c 	andeq	r0, r0, ip, asr #14
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	00000784 	andeq	r0, r0, r4, lsl #15
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	00000894 	muleq	r0, r4, r8
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	00000954 	andeq	r0, r0, r4, asr r9
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	00000998 	muleq	r0, r8, r9
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	000009d4 	ldrdeq	r0, [r0], -r4
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	00000a78 	andeq	r0, r0, r8, ror sl
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
			curr += 0x1000;
  f8:	00000c30 	andeq	r0, r0, r0, lsr ip
  fc:	00000258 	andeq	r0, r0, r8, asr r2
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
			upto = EE_SIZE - 1;
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	00000e88 	andeq	r0, r0, r8, lsl #29
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1cb80002 	ldcne	0, cr0, [r8], #8
            ch = redCharacter;
 128:	00040000 	andeq	r0, r4, r0
            onTime = redOn;
 12c:	00000000 	andeq	r0, r0, r0
 130:	00000ee8 	andeq	r0, r0, r8, ror #29
            offTime = greenOff;
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
        ledFlag = 1 - ledFlag;
 138:	00000f24 	andeq	r0, r0, r4, lsr #30
    return (time * SECOND)/1000;
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
        ledFlag = 1 - ledFlag;
 140:	00000fa4 	andeq	r0, r0, r4, lsr #31
    return (time * SECOND)/1000;
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
 150:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
        offTime = adjustTime(offTime);
 154:	00000010 	andeq	r0, r0, r0, lsl r0
        onTime = adjustTime(onTime);
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
            ser_outf(Check_PERIOD, "%c ", ch);
 160:	00000000 	andeq	r0, r0, r0
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000000 	andeq	r0, r0, r0
        if(onTime > 0){
 16c:	00000006 	andeq	r0, r0, r6
            if(On)
 170:	00000fcc 	andeq	r0, r0, ip, asr #31
 174:	000000cc 	andeq	r0, r0, ip, asr #1
 178:	00001098 	muleq	r0, r8, r0
                leds(led,1);
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 180:	000010ac 	andeq	r1, r0, ip, lsr #1
                leds(led,0);
 184:	00000034 	andeq	r0, r0, r4, lsr r0
 188:	000010e0 	andeq	r1, r0, r0, ror #1
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	00000000 	andeq	r0, r0, r0
            delay(onTime, OFF_PERIOD);
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
            delay(offTime, Check_PERIOD);
 198:	00001114 	andeq	r1, r0, r4, lsl r1
            led = greenLed;
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	00001138 	andeq	r1, r0, r8, lsr r1
            ch = greenCharacter;
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
            onTime = greenOn;
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
            offTime = greenOff;
 1b0:	00000000 	andeq	r0, r0, r0
                leds(led,0);
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	00001170 	andeq	r1, r0, r0, ror r1
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
            proceed OFF_PERIOD;
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
        when(&On, Check_PERIOD);
 1d0:	00001194 	muleq	r0, r4, r1
 1d4:	0000000e 	andeq	r0, r0, lr
        release;
 1d8:	00000000 	andeq	r0, r0, r0
        leds(led,0);
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
            proceed Check_PERIOD;
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
}
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
 1f8:	000011a2 	andeq	r1, r0, r2, lsr #3
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	0000000e 	andeq	r0, r0, lr
 208:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	000011dc 	ldrdeq	r1, [r0], -ip
 214:	0000009c 	muleq	r0, ip, r0
 218:	00001278 	andeq	r1, r0, r8, ror r2
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	000012c8 	andeq	r1, r0, r8, asr #5
 224:	00000048 	andeq	r0, r0, r8, asr #32
 228:	00001310 	andeq	r1, r0, r0, lsl r3
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	00001360 	andeq	r1, r0, r0, ror #6
 234:	00000058 	andeq	r0, r0, r8, asr r0
 238:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
 240:	00001460 	andeq	r1, r0, r0, ror #8
    word numbers[] = {0, 0, 0, 0};
 244:	00000034 	andeq	r0, r0, r4, lsr r0
    int numbersIndex = 0;
 248:	00001494 	muleq	r0, r4, r4
    word numbers[] = {0, 0, 0, 0};
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 250:	00000000 	andeq	r0, r0, r0
        if(settingsInput[i] == ' ') {
 254:	00000030 	andeq	r0, r0, r0, lsr r0
 258:	00000000 	andeq	r0, r0, r0
            numbers[numbersIndex] = number;
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
 260:	000014ac 	andeq	r1, r0, ip, lsr #9
            number = 0;
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 268:	00000000 	andeq	r0, r0, r0
    redOn = numbers[0];
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
    redOff = numbers[1];
 278:	00000104 	andeq	r0, r0, r4, lsl #2
    greenOn = numbers[2];
 27c:	2edb0002 	cdpcs	0, 13, cr0, cr11, cr2, {0}
 280:	00040000 	andeq	r0, r4, r0
	...
}
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 290:	00000000 	andeq	r0, r0, r0
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
            number = number * 10;
 298:	00000000 	andeq	r0, r0, r0
            number += settingsInput[i] - 48;
 29c:	0000000e 	andeq	r0, r0, lr
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
 2b0:	00000000 	andeq	r0, r0, r0
fsm root {
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_outf(Initial, "Enter your name: ");
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
        ser_in(Get_Name, username, NAME_LENGTH);
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
        ser_outf(Show_Menu, "Welcome %s\n\r"
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
 2e8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Choice, "%c", &choice);
 2ec:	000000bc 	strheq	r0, [r0], -ip
 2f0:	00000000 	andeq	r0, r0, r0
        if (choice == 'A' || choice == 'a'){
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
            proceed Adjust_Intervals;
 300:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
 304:	0000000a 	andeq	r0, r0, sl
        proceed Show_Menu;
 308:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
 310:	00000000 	andeq	r0, r0, r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
 31c:	00000040 	andeq	r0, r0, r0, asr #32
        processSettingsInput(settings);
 320:	00000000 	andeq	r0, r0, r0
        if(!blinkerRunning) {
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	00000000 	andeq	r0, r0, r0
            blinkerCode = runfsm blinker;
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
 330:	00000000 	andeq	r0, r0, r0
            blinkerRunning = YES;
 334:	00000006 	andeq	r0, r0, r6
        On = YES;
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000068 	andeq	r0, r0, r8, rrx
        trigger(&On);
 340:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 344:	00000050 	andeq	r0, r0, r0, asr r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00000000 	andeq	r0, r0, r0
 354:	00000040 	andeq	r0, r0, r0, asr #32
 358:	00000000 	andeq	r0, r0, r0
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	000015e8 	andeq	r1, r0, r8, ror #11
        displayCycle = YES;
 374:	00000002 	andeq	r0, r0, r2
	...
        ser_inf(Await_Stop, "%c", &ch);
 380:	00000034 	andeq	r0, r0, r4, lsr r0
        if(ch == 'S' || ch == 's'){
 384:	42120002 	andsmi	r0, r2, #2
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
            displayCycle = NO;
 390:	000015ea 	andeq	r1, r0, sl, ror #11
 394:	00000002 	andeq	r0, r0, r2
            proceed Show_Menu;
 398:	000015ec 	andeq	r1, r0, ip, ror #11
        proceed Monitor;
 39c:	00000002 	andeq	r0, r0, r2
        On = NO;
 3a0:	000015ee 	andeq	r1, r0, lr, ror #11
 3a4:	00000002 	andeq	r0, r0, r2
        if(blinkerCode != 0x0) {
 3a8:	000015f0 	strdeq	r1, [r0], -r0
            killall(blinkerCode);
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
        leds_all(0);
 3bc:	438a0002 	orrmi	r0, sl, #2
 3c0:	00040000 	andeq	r0, r4, r0
	...
        } else if (choice == 'S' || choice == 's') {
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
            proceed Stop;
 3d4:	48c50002 	stmiami	r5, {r1}^
        } else if (choice == 'V' || choice == 'v') {
 3d8:	00040000 	andeq	r0, r4, r0
	...
            proceed Monitor;
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
 3fc:	4dc90002 	stclmi	0, cr0, [r9, #8]
 400:	00040000 	andeq	r0, r4, r0
	...
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
 410:	00000000 	andeq	r0, r0, r0
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
 424:	52c30002 	sbcpl	r0, r3, #2
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	0000163c 	andeq	r1, r0, ip, lsr r6
 434:	00000034 	andeq	r0, r0, r4, lsr r0
static void devinit_uart (int devnum) {
 438:	00001670 	andeq	r1, r0, r0, ror r6
	adddevfunc (ioreq_uart_a, devnum);
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
 440:	000016a0 	andeq	r1, r0, r0, lsr #13
void udelay (volatile word n) {
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
	while (n) {
 44c:	00000054 	andeq	r0, r0, r4, asr r0
 450:	0000170c 	andeq	r1, r0, ip, lsl #14
}
 454:	00000040 	andeq	r0, r0, r0, asr #32
	while (n--);
 458:	0000174c 	andeq	r1, r0, ip, asr #14
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	00001770 	andeq	r1, r0, r0, ror r7
		n--;
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	00001784 	andeq	r1, r0, r4, lsl #15
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
void mdelay (volatile word n) {
 470:	00000000 	andeq	r0, r0, r0
 474:	00000064 	andeq	r0, r0, r4, rrx
	while (n) {
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
}
 480:	00000000 	andeq	r0, r0, r0
		udelay (999);
 484:	000000ec 	andeq	r0, r0, ip, ror #1
 488:	00000000 	andeq	r0, r0, r0
		n--;
 48c:	00000002 	andeq	r0, r0, r2
 490:	00000000 	andeq	r0, r0, r0
 494:	00000004 	andeq	r0, r0, r4
 498:	00000000 	andeq	r0, r0, r0
void __pi_ondomain (lword d) {
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
	PRCMPowerDomainOn (d);
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	5d6e0002 	stclpl	0, cr0, [lr, #-8]!
 4b8:	00040000 	andeq	r0, r4, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 4bc:	00000000 	andeq	r0, r0, r0
 4c0:	00001798 	muleq	r0, r8, r7
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
}
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	61840002 	orrvs	r0, r4, r2
void __pi_syserror (word ec, const char *m) {
 4d8:	00040000 	andeq	r0, r4, r0
	diag ("SYSERR: %x, %s", ec, m);
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	00001810 	andeq	r1, r0, r0, lsl r8
  __ASM volatile ("cpsid i" : : : "memory");
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
		all_leds_blink;
 4f4:	65d40002 	ldrbvs	r0, [r4, #2]
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	00001864 	andeq	r1, r0, r4, ror #16
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	6a240002 	bvs	900524 <__ccfg+0x8e057c>
 518:	00040000 	andeq	r0, r4, r0
	while (1) {
 51c:	00000000 	andeq	r0, r0, r0
 520:	000018c4 	andeq	r1, r0, r4, asr #17
 524:	00000070 	andeq	r0, r0, r0, ror r0
	...
	setdel = __pi_mintk - __pi_old;
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	6e550002 	cdpvs	0, 5, cr0, cr5, cr2, {0}
 538:	00040000 	andeq	r0, r4, r0
 53c:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 540:	00001934 	andeq	r1, r0, r4, lsr r9
 544:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 550:	0000002c 	andeq	r0, r0, ip, lsr #32
	sti_tim;
 554:	72990002 	addsvc	r0, r9, #2
}
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
 560:	00001a50 	andeq	r1, r0, r0, asr sl
 564:	00000020 	andeq	r0, r0, r0, lsr #32
 568:	00001a70 	andeq	r1, r0, r0, ror sl
	cli_aux;
 56c:	00000230 	andeq	r0, r0, r0, lsr r2
 570:	00001ca0 	andeq	r1, r0, r0, lsr #25
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 574:	00000050 	andeq	r0, r0, r0, asr r0
	...
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
	sti_aux;
 584:	788d0002 	stmvc	sp, {r1}
}
 588:	00040000 	andeq	r0, r4, r0
 58c:	00000000 	andeq	r0, r0, r0
 590:	00001cf0 	strdeq	r1, [r0], -r0
void AONRTCIntHandler () {
 594:	00000390 	muleq	r0, r0, r3
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
		if (__pi_utims [0] == 0)
 5a4:	7e200002 	cdpvc	0, 2, cr0, cr0, cr2, {0}
 5a8:	00040000 	andeq	r0, r4, r0
		if (*(__pi_utims [0])) {
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	00002080 	andeq	r2, r0, r0, lsl #1
			(*(__pi_utims [0]))--;
 5b4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
			aux_timer_inactive = 0;
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
			(*(__pi_utims [1]))--;
 5c4:	7ef90002 	cdpvc	0, 15, cr0, cr9, cr2, {0}
		if (__pi_utims [2] == 0)
 5c8:	00040000 	andeq	r0, r4, r0
	...
		if (__pi_utims [3] != 0) {
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
			if (*(__pi_utims [3])) {
 5d8:	000020b0 	strheq	r2, [r0], -r0
				aux_timer_inactive = 0;
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	if (__pi_systat.ledsts) {
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
		if (__pi_systat.ledblc++ == 0) {
 5ec:	80400002 	subhi	r0, r0, r2
 5f0:	00040000 	andeq	r0, r4, r0
			if (__pi_systat.ledblk) {
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	000020c8 	andeq	r2, r0, r8, asr #1
 5fc:	00000008 	andeq	r0, r0, r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 600:	00000000 	andeq	r0, r0, r0
 604:	00000006 	andeq	r0, r0, r6
				if (__pi_systat.ledsts & 0x2)
 608:	000020d0 	ldrdeq	r2, [r0], -r0
 60c:	00000008 	andeq	r0, r0, r8
 610:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
 614:	00000006 	andeq	r0, r0, r6
				__pi_systat.ledblk = 0;
 618:	00000000 	andeq	r0, r0, r0
 61c:	00000008 	andeq	r0, r0, r8
	...
				__pi_systat.ledblc = 200;
 628:	00000024 	andeq	r0, r0, r4, lsr #32
	if (events & AON_RTC_EVFLAGS_CH0) {
 62c:	817a0002 	cmnhi	sl, r2
		cli_tim;
 630:	00040000 	andeq	r0, r4, r0
		__pi_new += setdel;
 634:	00000000 	andeq	r0, r0, r0
 638:	000020d8 	ldrdeq	r2, [r0], -r8
		setdel = 0;
 63c:	000000d4 	ldrdeq	r0, [r0], -r4
		RISE_N_SHINE;
 640:	000021ac 	andeq	r2, r0, ip, lsr #3
		__pi_new += setdel;
 644:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
		aux_timer_inactive = 1;
 650:	000000b4 	strheq	r0, [r0], -r4
 654:	83850002 	orrhi	r0, r5, #2
				if (__pi_systat.ledsts & 0x1)
 658:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 65c:	00000000 	andeq	r0, r0, r0
 660:	00002250 	andeq	r2, r0, r0, asr r2
				if (__pi_systat.ledsts & 0x2)
 664:	0000007c 	andeq	r0, r0, ip, ror r0
 668:	000022cc 	andeq	r2, r0, ip, asr #5
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
				if (__pi_systat.ledsts & 0x8)
 670:	00002378 	andeq	r2, r0, r8, ror r3
				__pi_systat.ledblk = 1;
 674:	0000005c 	andeq	r0, r0, ip, asr r0
 678:	000023d4 	ldrdeq	r2, [r0], -r4
		if (aux_timer_inactive) {
 67c:	00000018 	andeq	r0, r0, r8, lsl r0
			cli_aux;
 680:	00000000 	andeq	r0, r0, r0
 684:	00000010 	andeq	r0, r0, r0, lsl r0
 688:	000023ec 	andeq	r2, r0, ip, ror #7
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
 690:	000023fc 	strdeq	r2, [r0], -ip
 694:	00000014 	andeq	r0, r0, r4, lsl r0
 698:	00002410 	andeq	r2, r0, r0, lsl r4
 69c:	00000064 	andeq	r0, r0, r4, rrx
 6a0:	00002474 	andeq	r2, r0, r4, ror r4
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
word tci_update_delay_ticks (Boolean force) {
 6a8:	00002488 	andeq	r2, r0, r8, lsl #9
	cli_tim;
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
 6b0:	0000249c 	muleq	r0, ip, r4
	if (setdel) {
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6b8:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 6bc:	00000028 	andeq	r0, r0, r8, lsr #32
 6c0:	000024d8 	ldrdeq	r2, [r0], -r8
 6c4:	00000010 	andeq	r0, r0, r0, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6c8:	000024e8 	andeq	r2, r0, r8, ror #9
				AON_RTC_O_CH0CMP)) - gettav ());
 6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
	return NO;
 6d0:	00002514 	andeq	r2, r0, r4, lsl r5
			setdel = 0;
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6d8:	00002528 	andeq	r2, r0, r8, lsr #10
 6dc:	00000014 	andeq	r0, r0, r4, lsl r0
}
 6e0:	0000253c 	andeq	r2, r0, ip, lsr r5
		sti_tim;
 6e4:	00000110 	andeq	r0, r0, r0, lsl r1
		return YES;
 6e8:	0000264c 	andeq	r2, r0, ip, asr #12
 6ec:	00000064 	andeq	r0, r0, r4, rrx
 6f0:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
 6f4:	00000028 	andeq	r0, r0, r8, lsr #32
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6f8:	000026d8 	ldrdeq	r2, [r0], -r8
	UARTDisable (UART0_BASE);
 6fc:	00000150 	andeq	r0, r0, r0, asr r1
	...
	UARTConfigSetExpClk (UART0_BASE,
 708:	0000003c 	andeq	r0, r0, ip, lsr r0
 70c:	8ea00002 	cdphi	0, 10, cr0, cr0, cr2, {0}
 710:	00040000 	andeq	r0, r4, r0
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 71c:	000000f4 	strdeq	r0, [r0], -r4
 720:	00002828 	andeq	r2, r0, r8, lsr #16
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 724:	00000220 	andeq	r0, r0, r0, lsr #4
 728:	00002a48 	andeq	r2, r0, r8, asr #20
 72c:	00000060 	andeq	r0, r0, r0, rrx
	urates [0] = rate;
 730:	00000000 	andeq	r0, r0, r0
}
 734:	00000078 	andeq	r0, r0, r8, ror r0
 738:	00002aa8 	andeq	r2, r0, r8, lsr #21
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 748:	00000044 	andeq	r0, r0, r4, asr #32
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 74c:	97c70002 	strbls	r0, [r7, r2]
 750:	00040000 	andeq	r0, r4, r0
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 75c:	00000010 	andeq	r0, r0, r0, lsl r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 760:	00000000 	andeq	r0, r0, r0
 764:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
 768:	00002ac0 	andeq	r2, r0, r0, asr #21
 76c:	0000004c 	andeq	r0, r0, ip, asr #32
 770:	00000000 	andeq	r0, r0, r0
 774:	00000030 	andeq	r0, r0, r0, lsr r0
 778:	00002b0c 	andeq	r2, r0, ip, lsl #22
 77c:	0000006c 	andeq	r0, r0, ip, rrx
 780:	00002b78 	andeq	r2, r0, r8, ror fp
	switch (operation) {
 784:	00000016 	andeq	r0, r0, r6, lsl r0
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
 790:	00000044 	andeq	r0, r0, r4, asr #32
 794:	9b970002 	blls	fe5c07a4 <_estack+0xde5bb7a4>
 798:	00040000 	andeq	r0, r4, r0
				*buf++ = uart_a_read;
 79c:	00000000 	andeq	r0, r0, r0
 7a0:	00002b90 	muleq	r0, r0, fp
			while (len && uart_a_char_available) {
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
 7a8:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
 7ac:	00000008 	andeq	r0, r0, r8
			if (len != operation) {
 7b0:	00000000 	andeq	r0, r0, r0
}
 7b4:	00000022 	andeq	r0, r0, r2, lsr #32
 7b8:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 7bc:	0000002e 	andeq	r0, r0, lr, lsr #32
			if (uart_a_char_available) {
 7c0:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
 7c4:	00000034 	andeq	r0, r0, r4, lsr r0
			uart_a_disable_int;
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
				uart_a_enable_int;
 7d8:	00000064 	andeq	r0, r0, r4, rrx
 7dc:	a1420002 	cmpge	r2, r2
				goto Redo_rx;
 7e0:	00040000 	andeq	r0, r4, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00002bc0 	andeq	r2, r0, r0, asr #23
			return -2;
 7ec:	0000005c 	andeq	r0, r0, ip, asr r0
 7f0:	00002c1c 	andeq	r2, r0, ip, lsl ip
				uart_a_write (*buf);
 7f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7f8:	00000000 	andeq	r0, r0, r0
			while (len && uart_a_room_in_tx) {
 7fc:	00000090 	muleq	r0, r0, r0
 800:	00000000 	andeq	r0, r0, r0
 804:	00000018 	andeq	r0, r0, r8, lsl r0
			if (len != operation) {
 808:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 80c:	00000060 	andeq	r0, r0, r0, rrx
 810:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
 814:	00000034 	andeq	r0, r0, r4, lsr r0
 818:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 81c:	00000038 	andeq	r0, r0, r8, lsr r0
 820:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
 824:	0000000c 	andeq	r0, r0, ip
			if (uart_a_room_in_tx) {
 828:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
 82c:	00000034 	andeq	r0, r0, r4, lsr r0
 830:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    return (time * SECOND)/1000;
       8:	000001f4 	strdeq	r0, [r0], -r4
}
       c:	00000244 	andeq	r0, r0, r4, asr #4
	...
      18:	0000013c 	andeq	r0, r0, ip, lsr r1
      1c:	00000140 	andeq	r0, r0, r0, asr #2
      20:	00000142 	andeq	r0, r0, r2, asr #2
      24:	00000142 	andeq	r0, r0, r2, asr #2
      28:	00000144 	andeq	r0, r0, r4, asr #2
      2c:	00000146 	andeq	r0, r0, r6, asr #2
      30:	0000014c 	andeq	r0, r0, ip, asr #2
      34:	00000152 	andeq	r0, r0, r2, asr r1
	...
      40:	00000142 	andeq	r0, r0, r2, asr #2
      44:	00000144 	andeq	r0, r0, r4, asr #2
      48:	00000146 	andeq	r0, r0, r6, asr #2
      4c:	0000014c 	andeq	r0, r0, ip, asr #2
      50:	0000015e 	andeq	r0, r0, lr, asr r1
      54:	0000015e 	andeq	r0, r0, lr, asr r1
	...
      60:	0000024e 	andeq	r0, r0, lr, asr #4
      64:	0000026c 	andeq	r0, r0, ip, ror #4
      68:	00000290 	muleq	r0, r0, r2
      6c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
	...
      78:	000002ce 	andeq	r0, r0, lr, asr #5
      7c:	000003cc 	andeq	r0, r0, ip, asr #7
      80:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      84:	000003ec 	andeq	r0, r0, ip, ror #7
	...
	descriptors [fd] = s;
      90:	000002ea 	andeq	r0, r0, sl, ror #5
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0000030c 	andeq	r0, r0, ip, lsl #6
      98:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	if (s == NULL)
      9c:	000003e8 	andeq	r0, r0, r8, ror #7
	...
		syserror (EMALLOC, "tcv05");
      a8:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
      ac:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
      b0:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
      b4:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
	...
      c0:	000000c8 	andeq	r0, r0, r8, asr #1
      c4:	00000244 	andeq	r0, r0, r4, asr #4
      c8:	00000001 	andeq	r0, r0, r1
      cc:	00000001 	andeq	r0, r0, r1
      d0:	00000244 	andeq	r0, r0, r4, asr #4
      d4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
      d8:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
      dc:	00000438 	andeq	r0, r0, r8, lsr r4
	...
      e8:	000004e6 	andeq	r0, r0, r6, ror #9
      ec:	000004ec 	andeq	r0, r0, ip, ror #9
      f0:	000004ec 	andeq	r0, r0, ip, ror #9
			wwait (st, 50);
      f4:	000004ec 	andeq	r0, r0, ip, ror #9
			curr += 0x1000;
      f8:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	000004f2 	strdeq	r0, [r0], -r2
	...
			upto = EE_SIZE - 1;
     108:	000004ec 	andeq	r0, r0, ip, ror #9
     10c:	000004ee 	andeq	r0, r0, lr, ror #9
     110:	000004f2 	strdeq	r0, [r0], -r2
     114:	000004f4 	strdeq	r0, [r0], -r4
	...
     120:	00000504 	andeq	r0, r0, r4, lsl #10
     124:	00000506 	andeq	r0, r0, r6, lsl #10
            ch = redCharacter;
     128:	00000508 	andeq	r0, r0, r8, lsl #10
            onTime = redOn;
     12c:	0000050a 	andeq	r0, r0, sl, lsl #10
	...
        ledFlag = 1 - ledFlag;
     138:	0000053e 	andeq	r0, r0, lr, lsr r5
    return (time * SECOND)/1000;
     13c:	00000542 	andeq	r0, r0, r2, asr #10
        ledFlag = 1 - ledFlag;
     140:	00000544 	andeq	r0, r0, r4, asr #10
    return (time * SECOND)/1000;
     144:	00000546 	andeq	r0, r0, r6, asr #10
     148:	00000548 	andeq	r0, r0, r8, asr #10
     14c:	00000550 	andeq	r0, r0, r0, asr r5
	...
        onTime = adjustTime(onTime);
     158:	00000574 	andeq	r0, r0, r4, ror r5
     15c:	0000057a 	andeq	r0, r0, sl, ror r5
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	0000057c 	andeq	r0, r0, ip, ror r5
     164:	00000582 	andeq	r0, r0, r2, lsl #11
	...
            if(On)
     170:	000005a4 	andeq	r0, r0, r4, lsr #11
     174:	0000062a 	andeq	r0, r0, sl, lsr #12
     178:	00000650 	andeq	r0, r0, r0, asr r6
                leds(led,1);
     17c:	000006a8 	andeq	r0, r0, r8, lsr #13
	...
                leds(led,0);
     188:	00000718 	andeq	r0, r0, r8, lsl r7
     18c:	0000071a 	andeq	r0, r0, sl, lsl r7
     190:	0000071c 	andeq	r0, r0, ip, lsl r7
            delay(onTime, OFF_PERIOD);
     194:	00000730 	andeq	r0, r0, r0, lsr r7
	...
            led = greenLed;
     1a0:	0000074c 	andeq	r0, r0, ip, asr #14
            ch = greenCharacter;
     1a4:	0000074e 	andeq	r0, r0, lr, asr #14
            onTime = greenOn;
     1a8:	00000750 	andeq	r0, r0, r0, asr r7
     1ac:	00000758 	andeq	r0, r0, r8, asr r7
	...
                leds(led,0);
     1b8:	00000894 	muleq	r0, r4, r8
     1bc:	00000898 	muleq	r0, r8, r8
     1c0:	0000089a 	muleq	r0, sl, r8
     1c4:	0000089c 	muleq	r0, ip, r8
            proceed OFF_PERIOD;
     1c8:	0000089e 	muleq	r0, lr, r8
     1cc:	000008a0 	andeq	r0, r0, r0, lsr #17
	...
        release;
     1d8:	000008fc 	strdeq	r0, [r0], -ip
        leds(led,0);
     1dc:	00000900 	andeq	r0, r0, r0, lsl #18
     1e0:	00000912 	andeq	r0, r0, r2, lsl r9
     1e4:	0000093e 	andeq	r0, r0, lr, lsr r9
	...
}
     1f0:	00000954 	andeq	r0, r0, r4, asr r9
     1f4:	00000954 	andeq	r0, r0, r4, asr r9
     1f8:	00000956 	andeq	r0, r0, r6, asr r9
     1fc:	00000958 	andeq	r0, r0, r8, asr r9
	...
     208:	00000958 	andeq	r0, r0, r8, asr r9
     20c:	0000095a 	andeq	r0, r0, sl, asr r9
     210:	0000095c 	andeq	r0, r0, ip, asr r9
     214:	0000095e 	andeq	r0, r0, lr, asr r9
     218:	00000964 	andeq	r0, r0, r4, ror #18
     21c:	0000096a 	andeq	r0, r0, sl, ror #18
     220:	00000974 	andeq	r0, r0, r4, ror r9
     224:	00000976 	andeq	r0, r0, r6, ror r9
     228:	00000982 	andeq	r0, r0, r2, lsl #19
     22c:	00000984 	andeq	r0, r0, r4, lsl #19
	...
     238:	00000998 	muleq	r0, r8, r9
     23c:	00000998 	muleq	r0, r8, r9
     240:	0000099a 	muleq	r0, sl, r9
    word numbers[] = {0, 0, 0, 0};
     244:	0000099c 	muleq	r0, ip, r9
	...
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	0000099e 	muleq	r0, lr, r9
        if(settingsInput[i] == ' ') {
     254:	000009a0 	andeq	r0, r0, r0, lsr #19
     258:	000009a2 	andeq	r0, r0, r2, lsr #19
            numbers[numbersIndex] = number;
     25c:	000009a4 	andeq	r0, r0, r4, lsr #19
     260:	000009ae 	andeq	r0, r0, lr, lsr #19
            number = 0;
     264:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    redOn = numbers[0];
     26c:	000009be 			; <UNDEFINED> instruction: 0x000009be
	...
    redOff = numbers[1];
     278:	00000aa2 	andeq	r0, r0, r2, lsr #21
    greenOn = numbers[2];
     27c:	00000aa4 	andeq	r0, r0, r4, lsr #21
     280:	00000aa6 	andeq	r0, r0, r6, lsr #21
    greenOff = numbers[3];
     284:	00000aaa 	andeq	r0, r0, sl, lsr #21
     288:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
}
     28c:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
	...
            number = number * 10;
     298:	00000aa4 	andeq	r0, r0, r4, lsr #21
            number += settingsInput[i] - 48;
     29c:	00000aa6 	andeq	r0, r0, r6, lsr #21
     2a0:	00000aaa 	andeq	r0, r0, sl, lsr #21
     2a4:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     2a8:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     2ac:	00000af6 	strdeq	r0, [r0], -r6
	...
fsm root {
     2b8:	00000aae 	andeq	r0, r0, lr, lsr #21
     2bc:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     2c0:	00000ada 	ldrdeq	r0, [r0], -sl
     2c4:	00000ae2 	andeq	r0, r0, r2, ror #21
	...
        ser_outf(Initial, "Enter your name: ");
     2d0:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     2d4:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	00000aee 	andeq	r0, r0, lr, ror #21
     2dc:	00000af2 	strdeq	r0, [r0], -r2
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e8:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     2f0:	00000ae8 	andeq	r0, r0, r8, ror #21
        if (choice == 'A' || choice == 'a'){
     2f4:	00000aee 	andeq	r0, r0, lr, ror #21
	...
            proceed Adjust_Intervals;
     300:	00000af6 	strdeq	r0, [r0], -r6
            proceed Monitor;
     304:	00000af8 	strdeq	r0, [r0], -r8
        proceed Show_Menu;
     308:	00000afa 	strdeq	r0, [r0], -sl
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	00000afc 	strdeq	r0, [r0], -ip
     310:	00000afe 	strdeq	r0, [r0], -lr
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	00000b00 	andeq	r0, r0, r0, lsl #22
	...
        processSettingsInput(settings);
     320:	00000af8 	strdeq	r0, [r0], -r8
        if(!blinkerRunning) {
     324:	00000afa 	strdeq	r0, [r0], -sl
     328:	00000b00 	andeq	r0, r0, r0, lsl #22
            blinkerCode = runfsm blinker;
     32c:	00000b02 	andeq	r0, r0, r2, lsl #22
	...
        On = YES;
     338:	00000b12 	andeq	r0, r0, r2, lsl fp
     33c:	00000b14 	andeq	r0, r0, r4, lsl fp
        trigger(&On);
     340:	00000b16 	andeq	r0, r0, r6, lsl fp
        proceed Show_Menu;
     344:	00000b18 	andeq	r0, r0, r8, lsl fp
	...
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     350:	00000b2a 	andeq	r0, r0, sl, lsr #22
     354:	00000b2c 	andeq	r0, r0, ip, lsr #22
     358:	00000b2e 	andeq	r0, r0, lr, lsr #22
     35c:	00000b30 	andeq	r0, r0, r0, lsr fp
	...
        proceed Show_Menu;
     368:	00000b72 	andeq	r0, r0, r2, ror fp
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	00000b72 	andeq	r0, r0, r2, ror fp
     370:	00000b76 	andeq	r0, r0, r6, ror fp
        displayCycle = YES;
     374:	00000b78 	andeq	r0, r0, r8, ror fp
	...
        ser_inf(Await_Stop, "%c", &ch);
     380:	00000ba8 	andeq	r0, r0, r8, lsr #23
        if(ch == 'S' || ch == 's'){
     384:	00000baa 	andeq	r0, r0, sl, lsr #23
     388:	00000bac 	andeq	r0, r0, ip, lsr #23
     38c:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
	...
            proceed Show_Menu;
     398:	00000c30 	andeq	r0, r0, r0, lsr ip
        proceed Monitor;
     39c:	00000c30 	andeq	r0, r0, r0, lsr ip
        On = NO;
     3a0:	00000c36 	andeq	r0, r0, r6, lsr ip
     3a4:	00000c38 	andeq	r0, r0, r8, lsr ip
        if(blinkerCode != 0x0) {
     3a8:	00000c3a 	andeq	r0, r0, sl, lsr ip
            killall(blinkerCode);
     3ac:	00000c3e 	andeq	r0, r0, lr, lsr ip
	...
     3b8:	00000c4a 	andeq	r0, r0, sl, asr #24
        leds_all(0);
     3bc:	00000c4c 	andeq	r0, r0, ip, asr #24
     3c0:	00000c62 	andeq	r0, r0, r2, ror #24
     3c4:	00000c64 	andeq	r0, r0, r4, ror #24
        proceed Show_Menu;
     3c8:	00000c76 	andeq	r0, r0, r6, ror ip
     3cc:	00000c92 	muleq	r0, r2, ip
        } else if (choice == 'S' || choice == 's') {
     3d0:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
            proceed Stop;
     3d4:	00000e10 	andeq	r0, r0, r0, lsl lr
	...
        } else if (choice == 'M' || choice == 'm') {
     3e0:	00000c4a 	andeq	r0, r0, sl, asr #24
            proceed Monitor;
     3e4:	00000c4c 	andeq	r0, r0, ip, asr #24
     3e8:	00000cea 	andeq	r0, r0, sl, ror #25
     3ec:	00000cee 	andeq	r0, r0, lr, ror #25
	...
     3f8:	00000cee 	andeq	r0, r0, lr, ror #25
     3fc:	00000cee 	andeq	r0, r0, lr, ror #25
     400:	00000cf2 	strdeq	r0, [r0], -r2
     404:	00000cf6 	strdeq	r0, [r0], -r6
     408:	00000cfa 	strdeq	r0, [r0], -sl
     40c:	00000cfc 	strdeq	r0, [r0], -ip
	...
     418:	00000cee 	andeq	r0, r0, lr, ror #25
     41c:	00000cf2 	strdeq	r0, [r0], -r2
     420:	00000d08 	andeq	r0, r0, r8, lsl #26
     424:	00000d0a 	andeq	r0, r0, sl, lsl #26
     428:	00000d0e 	andeq	r0, r0, lr, lsl #26
     42c:	00000d12 	andeq	r0, r0, r2, lsl sp
	...
static void devinit_uart (int devnum) {
     438:	00000cf6 	strdeq	r0, [r0], -r6
	adddevfunc (ioreq_uart_a, devnum);
     43c:	00000cfa 	strdeq	r0, [r0], -sl
     440:	00000cfc 	strdeq	r0, [r0], -ip
void udelay (volatile word n) {
     444:	00000cfe 	strdeq	r0, [r0], -lr
     448:	00000d02 	andeq	r0, r0, r2, lsl #26
	while (n) {
     44c:	00000d06 	andeq	r0, r0, r6, lsl #26
	...
	while (n--);
     458:	00000d0a 	andeq	r0, r0, sl, lsl #26
     45c:	00000d0e 	andeq	r0, r0, lr, lsl #26
     460:	00000d28 	andeq	r0, r0, r8, lsr #26
		n--;
     464:	00000d2c 	andeq	r0, r0, ip, lsr #26
     468:	00000d2e 	andeq	r0, r0, lr, lsr #26
     46c:	00000d36 	andeq	r0, r0, r6, lsr sp
	...
	while (n) {
     478:	00000d20 	andeq	r0, r0, r0, lsr #26
     47c:	00000d22 	andeq	r0, r0, r2, lsr #26
}
     480:	00000d24 	andeq	r0, r0, r4, lsr #26
		udelay (999);
     484:	00000d28 	andeq	r0, r0, r8, lsr #26
	...
		n--;
     490:	00000d64 	andeq	r0, r0, r4, ror #26
     494:	00000d68 	andeq	r0, r0, r8, ror #26
     498:	00000d6a 	andeq	r0, r0, sl, ror #26
void __pi_ondomain (lword d) {
     49c:	00000d72 	andeq	r0, r0, r2, ror sp
	...
		if (__pi_systat.effpdm > 1)
     4a8:	00000d68 	andeq	r0, r0, r8, ror #26
			__pi_systat.effpdm = 1;
     4ac:	00000d6a 	andeq	r0, r0, sl, ror #26
	PRCMPowerDomainOn (d);
     4b0:	00000d76 	andeq	r0, r0, r6, ror sp
     4b4:	00000d78 	andeq	r0, r0, r8, ror sp
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4c0:	00000d96 	muleq	r0, r6, sp
     4c4:	00000d98 	muleq	r0, r8, sp
	__pi_systat.ondmns |= d;
     4c8:	00000d9a 	muleq	r0, sl, sp
     4cc:	00000d9c 	muleq	r0, ip, sp
	...
void __pi_syserror (word ec, const char *m) {
     4d8:	00000d98 	muleq	r0, r8, sp
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	00000d9a 	muleq	r0, sl, sp
     4e0:	00000d9c 	muleq	r0, ip, sp
     4e4:	00000da0 	andeq	r0, r0, r0, lsr #27
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f0:	00000df6 	strdeq	r0, [r0], -r6
		all_leds_blink;
     4f4:	00000df8 	strdeq	r0, [r0], -r8
     4f8:	00000df8 	strdeq	r0, [r0], -r8
     4fc:	00000dfa 	strdeq	r0, [r0], -sl
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     508:	00000dfe 	strdeq	r0, [r0], -lr
     50c:	00000e02 	andeq	r0, r0, r2, lsl #28
     510:	00000e04 	andeq	r0, r0, r4, lsl #28
     514:	00000e06 	andeq	r0, r0, r6, lsl #28
	...
	while (1) {
     520:	00000001 	andeq	r0, r0, r1
     524:	00000001 	andeq	r0, r0, r1
     528:	00000001 	andeq	r0, r0, r1
void tci_run_delay_timer () {
     52c:	00000001 	andeq	r0, r0, r1
	...
	setdel = __pi_mintk - __pi_old;
     538:	00000e88 	andeq	r0, r0, r8, lsl #29
     53c:	00000e88 	andeq	r0, r0, r8, lsl #29
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	00000e8c 	andeq	r0, r0, ip, lsl #29
     544:	00000e98 	muleq	r0, r8, lr
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	00000438 	andeq	r0, r0, r8, lsr r4
	sti_tim;
     554:	00000444 	andeq	r0, r0, r4, asr #8
}
     558:	00000444 	andeq	r0, r0, r4, asr #8
     55c:	00000470 	andeq	r0, r0, r0, ror r4
     560:	00000470 	andeq	r0, r0, r0, ror r4
     564:	0000049a 	muleq	r0, sl, r4
     568:	0000049c 	muleq	r0, ip, r4
	cli_aux;
     56c:	000004d8 	ldrdeq	r0, [r0], -r8
     570:	00000001 	andeq	r0, r0, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	00000001 	andeq	r0, r0, r1
     578:	00000001 	andeq	r0, r0, r1
     57c:	00000001 	andeq	r0, r0, r1
     580:	000004d8 	ldrdeq	r0, [r0], -r8
	sti_aux;
     584:	0000052c 	andeq	r0, r0, ip, lsr #10
}
     588:	0000052c 	andeq	r0, r0, ip, lsr #10
     58c:	0000056c 	andeq	r0, r0, ip, ror #10
     590:	0000056c 	andeq	r0, r0, ip, ror #10
void AONRTCIntHandler () {
     594:	00000594 	muleq	r0, r4, r5
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	00000594 	muleq	r0, r4, r5
     59c:	000006a8 	andeq	r0, r0, r8, lsr #13
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	000006a8 	andeq	r0, r0, r8, lsr #13
		if (__pi_utims [0] == 0)
     5a4:	000006f8 	strdeq	r0, [r0], -r8
     5a8:	000006f8 	strdeq	r0, [r0], -r8
		if (*(__pi_utims [0])) {
     5ac:	0000074c 	andeq	r0, r0, ip, asr #14
     5b0:	0000074c 	andeq	r0, r0, ip, asr #14
			(*(__pi_utims [0]))--;
     5b4:	00000784 	andeq	r0, r0, r4, lsl #15
		if (__pi_utims [1] == 0)
     5b8:	00000784 	andeq	r0, r0, r4, lsl #15
		if (*(__pi_utims [1])) {
     5bc:	00000894 	muleq	r0, r4, r8
			aux_timer_inactive = 0;
     5c0:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [1]))--;
     5c4:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [2] == 0)
     5c8:	00000894 	muleq	r0, r4, r8
		if (*(__pi_utims [2])) {
     5cc:	00000954 	andeq	r0, r0, r4, asr r9
			(*(__pi_utims [2]))--;
     5d0:	00000954 	andeq	r0, r0, r4, asr r9
		if (__pi_utims [3] != 0) {
     5d4:	00000998 	muleq	r0, r8, r9
			if (*(__pi_utims [3])) {
     5d8:	00000998 	muleq	r0, r8, r9
				aux_timer_inactive = 0;
     5dc:	000009d4 	ldrdeq	r0, [r0], -r4
				(*(__pi_utims [3]))--;
     5e0:	000009d4 	ldrdeq	r0, [r0], -r4
	if (__pi_systat.ledsts) {
     5e4:	00000a78 	andeq	r0, r0, r8, ror sl
     5e8:	00000a78 	andeq	r0, r0, r8, ror sl
		if (__pi_systat.ledblc++ == 0) {
     5ec:	00000c30 	andeq	r0, r0, r0, lsr ip
     5f0:	00000001 	andeq	r0, r0, r1
			if (__pi_systat.ledblk) {
     5f4:	00000001 	andeq	r0, r0, r1
     5f8:	00000001 	andeq	r0, r0, r1
     5fc:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	00000c30 	andeq	r0, r0, r0, lsr ip
     604:	00000e88 	andeq	r0, r0, r8, lsl #29
				if (__pi_systat.ledsts & 0x2)
     608:	00000001 	andeq	r0, r0, r1
     60c:	00000001 	andeq	r0, r0, r1
     610:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x4)
     614:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 0;
     618:	00000e88 	andeq	r0, r0, r8, lsl #29
     61c:	00000ee8 	andeq	r0, r0, r8, ror #29
	...
				__pi_systat.ledblc = 200;
     628:	00000fa4 	andeq	r0, r0, r4, lsr #31
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	00000fa6 	andeq	r0, r0, r6, lsr #31
		cli_tim;
     630:	00000fa6 	andeq	r0, r0, r6, lsr #31
		__pi_new += setdel;
     634:	00000fa8 	andeq	r0, r0, r8, lsr #31
	...
		RISE_N_SHINE;
     640:	00000fda 	ldrdeq	r0, [r0], -sl
		__pi_new += setdel;
     644:	0000107c 	andeq	r1, r0, ip, ror r0
		RISE_N_SHINE;
     648:	00001080 	andeq	r1, r0, r0, lsl #1
     64c:	00001084 	andeq	r1, r0, r4, lsl #1
	...
				if (__pi_systat.ledsts & 0x1)
     658:	00001470 	andeq	r1, r0, r0, ror r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65c:	00001472 	andeq	r1, r0, r2, ror r4
     660:	00001476 	andeq	r1, r0, r6, ror r4
				if (__pi_systat.ledsts & 0x2)
     664:	00001478 	andeq	r1, r0, r8, ror r4
     668:	0000147c 	andeq	r1, r0, ip, ror r4
     66c:	00001480 	andeq	r1, r0, r0, lsl #9
				if (__pi_systat.ledsts & 0x8)
     670:	00001482 	andeq	r1, r0, r2, lsl #9
				__pi_systat.ledblk = 1;
     674:	0000148c 	andeq	r1, r0, ip, lsl #9
	...
			cli_aux;
     680:	000014be 			; <UNDEFINED> instruction: 0x000014be
     684:	000014c0 	andeq	r1, r0, r0, asr #9
     688:	000014c2 	andeq	r1, r0, r2, asr #9
     68c:	000014c6 	andeq	r1, r0, r6, asr #9
     690:	00001556 	andeq	r1, r0, r6, asr r5
     694:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
     698:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
     69c:	000015c0 	andeq	r1, r0, r0, asr #11
     6a0:	000015c2 	andeq	r1, r0, r2, asr #11
     6a4:	000015c4 	andeq	r1, r0, r4, asr #11
	...
	cli_tim;
     6b0:	000014da 	ldrdeq	r1, [r0], -sl
	if (setdel) {
     6b4:	000014dc 	ldrdeq	r1, [r0], -ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	000014dc 	ldrdeq	r1, [r0], -ip
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	000014de 	ldrdeq	r1, [r0], -lr
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00000ee8 	andeq	r0, r0, r8, ror #29
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	00000f24 	andeq	r0, r0, r4, lsr #30
	return NO;
     6d0:	00000f24 	andeq	r0, r0, r4, lsr #30
			setdel = 0;
     6d4:	00000fa4 	andeq	r0, r0, r4, lsr #31
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	00000fa4 	andeq	r0, r0, r4, lsr #31
     6dc:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
}
     6e0:	00000001 	andeq	r0, r0, r1
		sti_tim;
     6e4:	00000001 	andeq	r0, r0, r1
		return YES;
     6e8:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     6ec:	00000fcc 	andeq	r0, r0, ip, asr #31
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     6fc:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     704:	00000001 	andeq	r0, r0, r1
	UARTConfigSetExpClk (UART0_BASE,
     708:	00000fcc 	andeq	r0, r0, ip, asr #31
     70c:	00001098 	muleq	r0, r8, r0
     710:	00001098 	muleq	r0, r8, r0
     714:	000010ac 	andeq	r1, r0, ip, lsr #1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	000010ac 	andeq	r1, r0, ip, lsr #1
     71c:	000010e0 	andeq	r1, r0, r0, ror #1
     720:	000010e0 	andeq	r1, r0, r0, ror #1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	00001114 	andeq	r1, r0, r4, lsl r1
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
	urates [0] = rate;
     730:	00001114 	andeq	r1, r0, r4, lsl r1
}
     734:	00001138 	andeq	r1, r0, r8, lsr r1
     738:	00001138 	andeq	r1, r0, r8, lsr r1
     73c:	00001170 	andeq	r1, r0, r0, ror r1
     740:	00000001 	andeq	r0, r0, r1
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	00000001 	andeq	r0, r0, r1
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	00001170 	andeq	r1, r0, r0, ror r1
     75c:	00001194 	muleq	r0, r4, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	00000001 	andeq	r0, r0, r1
     764:	00000001 	andeq	r0, r0, r1
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	00001194 	muleq	r0, r4, r1
     76c:	000011a2 	andeq	r1, r0, r2, lsr #3
     770:	00000001 	andeq	r0, r0, r1
     774:	00000001 	andeq	r0, r0, r1
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
     780:	00000001 	andeq	r0, r0, r1
	switch (operation) {
     784:	00000001 	andeq	r0, r0, r1
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	00000001 	andeq	r0, r0, r1
     78c:	00000001 	andeq	r0, r0, r1
     790:	000011a2 	andeq	r1, r0, r2, lsr #3
     794:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     798:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     79c:	00000001 	andeq	r0, r0, r1
     7a0:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
			while (len && uart_a_char_available) {
     7a4:	000011dc 	ldrdeq	r1, [r0], -ip
     7a8:	000011dc 	ldrdeq	r1, [r0], -ip
     7ac:	00001278 	andeq	r1, r0, r8, ror r2
			if (len != operation) {
     7b0:	00001278 	andeq	r1, r0, r8, ror r2
}
     7b4:	000012c8 	andeq	r1, r0, r8, asr #5
     7b8:	000012c8 	andeq	r1, r0, r8, asr #5
			uart_a_disable_int;
     7bc:	00001310 	andeq	r1, r0, r0, lsl r3
			if (uart_a_char_available) {
     7c0:	00001310 	andeq	r1, r0, r0, lsl r3
				*buf++ = uart_a_read;
     7c4:	00001360 	andeq	r1, r0, r0, ror #6
			uart_a_disable_int;
     7c8:	00001360 	andeq	r1, r0, r0, ror #6
     7cc:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
			if (uart_a_char_available) {
     7d0:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
     7d4:	00001460 	andeq	r1, r0, r0, ror #8
				uart_a_enable_int;
     7d8:	00001460 	andeq	r1, r0, r0, ror #8
     7dc:	00001494 	muleq	r0, r4, r4
				goto Redo_rx;
     7e0:	00001494 	muleq	r0, r4, r4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	000014ac 	andeq	r1, r0, ip, lsr #9
     7e8:	00000001 	andeq	r0, r0, r1
			return -2;
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     7f4:	00000001 	andeq	r0, r0, r1
     7f8:	000014ac 	andeq	r1, r0, ip, lsr #9
			while (len && uart_a_room_in_tx) {
     7fc:	000015e8 	andeq	r1, r0, r8, ror #11
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
	...
			uart_a_disable_int;
     810:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     81c:	00000001 	andeq	r0, r0, r1
     820:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     824:	00000001 	andeq	r0, r0, r1
	...
				uart_a_write (*buf);
     830:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	00000001 	andeq	r0, r0, r1
     838:	00000001 	andeq	r0, r0, r1
			uart_a_enable_int;
     83c:	00000001 	andeq	r0, r0, r1
	...
			return 0;
     848:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     84c:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
				syserror (EREQPAR, "uar");
     85c:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     860:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     864:	00000001 	andeq	r0, r0, r1
				return 1;
     868:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
     898:	00000001 	andeq	r0, r0, r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     8c0:	00000001 	andeq	r0, r0, r1
     8c4:	00000001 	andeq	r0, r0, r1
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     8fc:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     908:	00000001 	andeq	r0, r0, r1
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     914:	00000001 	andeq	r0, r0, r1
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
     930:	000015e8 	andeq	r1, r0, r8, ror #11
     934:	000015ea 	andeq	r1, r0, sl, ror #11
	...
}
     940:	000015ea 	andeq	r1, r0, sl, ror #11
     944:	000015ec 	andeq	r1, r0, ip, ror #11
     948:	000015ec 	andeq	r1, r0, ip, ror #11
     94c:	000015ee 	andeq	r1, r0, lr, ror #11
     950:	000015ee 	andeq	r1, r0, lr, ror #11
void __buttons_setirq (int val) {
     954:	000015f0 	strdeq	r1, [r0], -r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	000015f0 	strdeq	r1, [r0], -r0
     95c:	00001634 	andeq	r1, r0, r4, lsr r6
	...
     968:	00000001 	andeq	r0, r0, r1
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
	...
}
     990:	00000001 	andeq	r0, r0, r1
     994:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     998:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     99c:	00000001 	andeq	r0, r0, r1
	...
     9a8:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	00000001 	andeq	r0, r0, r1
}
     9c4:	00000001 	andeq	r0, r0, r1
	...
     9d0:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     9d4:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     9d8:	00000001 	andeq	r0, r0, r1
     9dc:	00000001 	andeq	r0, r0, r1
	...
	i_trigger ((aword)&__button_list);
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
     9f8:	00000001 	andeq	r0, r0, r1
     9fc:	00000001 	andeq	r0, r0, r1
	...
     a08:	00000001 	andeq	r0, r0, r1
     a0c:	00000001 	andeq	r0, r0, r1
     a10:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     a14:	00000001 	andeq	r0, r0, r1
	...
if (pin_sensor_int) {
     a20:	00001640 	andeq	r1, r0, r0, asr #12
     a24:	00001644 	andeq	r1, r0, r4, asr #12
	i_trigger ((aword)(&__input_pins));
     a28:	0000164a 	andeq	r1, r0, sl, asr #12
     a2c:	0000164c 	andeq	r1, r0, ip, asr #12
     a30:	0000165a 	andeq	r1, r0, sl, asr r6
     a34:	0000165a 	andeq	r1, r0, sl, asr r6
     a38:	0000165c 	andeq	r1, r0, ip, asr r6
     a3c:	0000165e 	andeq	r1, r0, lr, asr r6
	...
     a48:	00001646 	andeq	r1, r0, r6, asr #12
     a4c:	00001648 	andeq	r1, r0, r8, asr #12
     a50:	0000165e 	andeq	r1, r0, lr, asr r6
	__pinsen_disable_and_clear;
     a54:	00001660 	andeq	r1, r0, r0, ror #12
	...
	RISE_N_SHINE;
     a60:	00001648 	andeq	r1, r0, r8, asr #12
}
     a64:	0000164a 	andeq	r1, r0, sl, asr #12
     a68:	0000164c 	andeq	r1, r0, ip, asr #12
     a6c:	0000164e 	andeq	r1, r0, lr, asr #12
     a70:	00001654 	andeq	r1, r0, r4, asr r6
     a74:	00001654 	andeq	r1, r0, r4, asr r6
	...
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a80:	00001678 	andeq	r1, r0, r8, ror r6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	00001680 	andeq	r1, r0, r0, lsl #13
     a88:	0000168a 	andeq	r1, r0, sl, lsl #13
     a8c:	0000168a 	andeq	r1, r0, sl, lsl #13
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a90:	0000168e 	andeq	r1, r0, lr, lsl #13
     a94:	00001690 	muleq	r0, r0, r6
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	00001690 	muleq	r0, r0, r6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	00001690 	muleq	r0, r0, r6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa8:	00001692 	muleq	r0, r2, r6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	00001694 	muleq	r0, r4, r6
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	000016a0 	andeq	r1, r0, r0, lsr #13
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	000016a2 	andeq	r1, r0, r2, lsr #13
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	000016a4 	andeq	r1, r0, r4, lsr #13
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	000016a8 	andeq	r1, r0, r8, lsr #13
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad0:	000016c0 	andeq	r1, r0, r0, asr #13
     ad4:	000016c2 	andeq	r1, r0, r2, asr #13
		if (port_confs [i] & 0x80)
     ad8:	000016c6 	andeq	r1, r0, r6, asr #13
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	000016c8 	andeq	r1, r0, r8, asr #13
     ae0:	000016ce 	andeq	r1, r0, lr, asr #13
		if (port_confs [i] & 0x40)
     ae4:	000016de 	ldrdeq	r1, [r0], -lr
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     af0:	000016c0 	andeq	r1, r0, r0, asr #13
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af4:	000016c2 	andeq	r1, r0, r2, asr #13
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	000016c6 	andeq	r1, r0, r6, asr #13
	all_leds_blink;
     afc:	000016c8 	andeq	r1, r0, r8, asr #13
     b00:	000016ce 	andeq	r1, r0, lr, asr #13
     b04:	000016ce 	andeq	r1, r0, lr, asr #13
     b08:	000016d0 	ldrdeq	r1, [r0], -r0
     b0c:	000016d2 	ldrdeq	r1, [r0], -r2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	00001726 	andeq	r1, r0, r6, lsr #14
     b1c:	0000172a 	andeq	r1, r0, sl, lsr #14
     b20:	0000172c 	andeq	r1, r0, ip, lsr #14
     b24:	0000172e 	andeq	r1, r0, lr, lsr #14
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	00001732 	andeq	r1, r0, r2, lsr r7
     b34:	00001732 	andeq	r1, r0, r2, lsr r7
	IntEnable (INT_AON_RTC_COMB);
     b38:	00001734 	andeq	r1, r0, r4, lsr r7
     b3c:	00001736 	andeq	r1, r0, r6, lsr r7
	...
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	00000001 	andeq	r0, r0, r1
     b4c:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	00000001 	andeq	r0, r0, r1
     b64:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	00000001 	andeq	r0, r0, r1
     b6c:	00000001 	andeq	r0, r0, r1
	...
	urates [0] = UART_RATE / 100;
     b78:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     b7c:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
     b80:	00000001 	andeq	r0, r0, r1
     b84:	00000001 	andeq	r0, r0, r1
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b90:	00000001 	andeq	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	00000001 	andeq	r0, r0, r1
     b98:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	0000163c 	andeq	r1, r0, ip, lsr r6
     bac:	00001670 	andeq	r1, r0, r0, ror r6
     bb0:	00001670 	andeq	r1, r0, r0, ror r6
	IntEnable (INT_UART0_COMB);
     bb4:	000016a0 	andeq	r1, r0, r0, lsr #13
     bb8:	000016a0 	andeq	r1, r0, r0, lsr #13
}
     bbc:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
	tci_run_auxiliary_timer ();
     bc0:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
		diag ("");
     bc4:	0000170c 	andeq	r1, r0, ip, lsl #14
     bc8:	0000170c 	andeq	r1, r0, ip, lsl #14
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	0000174c 	andeq	r1, r0, ip, asr #14
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	0000174c 	andeq	r1, r0, ip, asr #14
		diag ("Leftover RAM: %d bytes",
     bd4:	00001770 	andeq	r1, r0, r0, ror r7
     bd8:	00001770 	andeq	r1, r0, r0, ror r7
     bdc:	00001784 	andeq	r1, r0, r4, lsl #15
     be0:	00001784 	andeq	r1, r0, r4, lsl #15
     be4:	00001798 	muleq	r0, r8, r7
     be8:	00000001 	andeq	r0, r0, r1
     bec:	00000001 	andeq	r0, r0, r1
     bf0:	00000001 	andeq	r0, r0, r1
     bf4:	00000001 	andeq	r0, r0, r1
     bf8:	00000001 	andeq	r0, r0, r1
     bfc:	00000001 	andeq	r0, r0, r1
     c00:	00000001 	andeq	r0, r0, r1
     c04:	00000001 	andeq	r0, r0, r1
     c08:	00000001 	andeq	r0, r0, r1
     c0c:	00000001 	andeq	r0, r0, r1
     c10:	00000001 	andeq	r0, r0, r1
     c14:	00000001 	andeq	r0, r0, r1
     c18:	00000001 	andeq	r0, r0, r1
     c1c:	00000001 	andeq	r0, r0, r1
	...
     c28:	00001798 	muleq	r0, r8, r7
     c2c:	00001810 	andeq	r1, r0, r0, lsl r8
	...
__attribute__ ((noreturn)) void __pi_release () {
     c38:	00001810 	andeq	r1, r0, r0, lsl r8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	00001864 	andeq	r1, r0, r4, ror #16
	...
	check_stack_overflow;
     c48:	00001864 	andeq	r1, r0, r4, ror #16
	update_n_wake (MAX_WORD, NO);
     c4c:	000018c4 	andeq	r1, r0, r4, asr #17
	...
	for_all_tasks (__pi_curr) {
     c58:	000018d2 	ldrdeq	r1, [r0], -r2
     c5c:	000018d2 	ldrdeq	r1, [r0], -r2
     c60:	000018d8 	ldrdeq	r1, [r0], -r8
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	00001934 	andeq	r1, r0, r4, lsr r9
	...
	__SLEEP;
     c70:	000018c4 	andeq	r1, r0, r4, asr #17
     c74:	00001934 	andeq	r1, r0, r4, lsr r9
	...
	switch (__pi_systat.effpdm) {
     c80:	00001948 	andeq	r1, r0, r8, asr #18
     c84:	00001a2c 	andeq	r1, r0, ip, lsr #20
     c88:	00001a32 	andeq	r1, r0, r2, lsr sl
     c8c:	00001a36 	andeq	r1, r0, r6, lsr sl
			__WFI ();
     c90:	00001a3c 	andeq	r1, r0, ip, lsr sl
     c94:	00001a50 	andeq	r1, r0, r0, asr sl
	...
	check_stack_overflow;
     ca0:	00001934 	andeq	r1, r0, r4, lsr r9
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	00001a50 	andeq	r1, r0, r0, asr sl
	...
			goto Redo;
     cb0:	00001a7c 	andeq	r1, r0, ip, ror sl
	for_all_tasks (__pi_curr) {
     cb4:	00001a7e 	andeq	r1, r0, lr, ror sl
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	00001b4c 	andeq	r1, r0, ip, asr #22
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	00001b70 	andeq	r1, r0, r0, ror fp
     cc0:	00001b72 	andeq	r1, r0, r2, ror fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc4:	00001bba 			; <UNDEFINED> instruction: 0x00001bba
     cc8:	00001be4 	andeq	r1, r0, r4, ror #23
     ccc:	00001be6 	andeq	r1, r0, r6, ror #23
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	00001a7e 	andeq	r1, r0, lr, ror sl
     cdc:	00001a80 	andeq	r1, r0, r0, lsl #21
			__WFI ();
     ce0:	00001b22 	andeq	r1, r0, r2, lsr #22
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce4:	00001b4c 	andeq	r1, r0, ip, asr #22
     ce8:	00001b70 	andeq	r1, r0, r0, ror fp
}
     cec:	00001b72 	andeq	r1, r0, r2, ror fp
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
     cfc:	00001ac6 	andeq	r1, r0, r6, asr #21
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d00:	00001c6a 	andeq	r1, r0, sl, ror #24
     d04:	00001c76 	andeq	r1, r0, r6, ror ip
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	00001bc4 	andeq	r1, r0, r4, asr #23
     d14:	00001be4 	andeq	r1, r0, r4, ror #23
     d18:	00001be6 	andeq	r1, r0, r6, ror #23
     d1c:	00001c2a 	andeq	r1, r0, sl, lsr #24
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	00001a50 	andeq	r1, r0, r0, asr sl
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	00001a70 	andeq	r1, r0, r0, ror sl
     d30:	00001a70 	andeq	r1, r0, r0, ror sl
     d34:	00001ca0 	andeq	r1, r0, r0, lsr #25
     d38:	00001ca0 	andeq	r1, r0, r0, lsr #25
     d3c:	00001cf0 	strdeq	r1, [r0], -r0
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	00001d04 	andeq	r1, r0, r4, lsl #26
     d4c:	00001d08 	andeq	r1, r0, r8, lsl #26
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	00001fe2 	andeq	r1, r0, r2, ror #31
     d54:	0000202a 	andeq	r2, r0, sl, lsr #32
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d60:	00001d08 	andeq	r1, r0, r8, lsl #26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	00001d0e 	andeq	r1, r0, lr, lsl #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	00001d46 	andeq	r1, r0, r6, asr #26
     d6c:	00001db2 			; <UNDEFINED> instruction: 0x00001db2
     d70:	00002046 	andeq	r2, r0, r6, asr #32
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	00002066 	andeq	r2, r0, r6, rrx
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d80:	00001e6a 	andeq	r1, r0, sl, ror #28
     d84:	00001ee4 	andeq	r1, r0, r4, ror #29
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	0000206e 	andeq	r2, r0, lr, rrx
     d8c:	00002076 	andeq	r2, r0, r6, ror r0
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	00001efc 	strdeq	r1, [r0], -ip
     d9c:	00001f52 	andeq	r1, r0, r2, asr pc
     da0:	00001fc8 	andeq	r1, r0, r8, asr #31
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da4:	00001fe2 	andeq	r1, r0, r2, ror #31
	...
     db0:	00001f58 	andeq	r1, r0, r8, asr pc
     db4:	00001fc8 	andeq	r1, r0, r8, asr #31
}
     db8:	0000202a 	andeq	r2, r0, sl, lsr #32
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dbc:	00002032 	andeq	r2, r0, r2, lsr r0
     dc0:	00002076 	andeq	r2, r0, r6, ror r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	00002080 	andeq	r2, r0, r0, lsl #1
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	00001cf0 	strdeq	r1, [r0], -r0
     dd4:	00002080 	andeq	r2, r0, r0, lsl #1
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	00002080 	andeq	r2, r0, r0, lsl #1
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	000020b0 	strheq	r2, [r0], -r0
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	000020b0 	strheq	r2, [r0], -r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	000020c8 	andeq	r2, r0, r8, asr #1
	...
			PRCMPowerDomainOff (
     e08:	000020c8 	andeq	r2, r0, r8, asr #1
     e0c:	000020d0 	ldrdeq	r2, [r0], -r0
	__SLEEP;
     e10:	00000001 	andeq	r0, r0, r1
     e14:	00000001 	andeq	r0, r0, r1
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	000020d0 	ldrdeq	r2, [r0], -r0
	goto Redo;
     e1c:	000020d8 	ldrdeq	r2, [r0], -r8
     e20:	00000001 	andeq	r0, r0, r1
     e24:	00000001 	andeq	r0, r0, r1
     e28:	00000001 	andeq	r0, r0, r1
     e2c:	00000001 	andeq	r0, r0, r1
	...
     e38:	000020d8 	ldrdeq	r2, [r0], -r8
     e3c:	000021ac 	andeq	r2, r0, ip, lsr #3
     e40:	000021ac 	andeq	r2, r0, ip, lsr #3
     e44:	00002250 	andeq	r2, r0, r0, asr r2
	...
     e50:	0000225e 	andeq	r2, r0, lr, asr r2
     e54:	00002260 	andeq	r2, r0, r0, ror #4
     e58:	00002264 	andeq	r2, r0, r4, ror #4
     e5c:	00002268 	andeq	r2, r0, r8, ror #4
	...
     e68:	0000256c 	andeq	r2, r0, ip, ror #10
     e6c:	0000256e 	andeq	r2, r0, lr, ror #10
     e70:	00002570 	andeq	r2, r0, r0, ror r5
     e74:	00002572 	andeq	r2, r0, r2, ror r5
	...
     e80:	00002250 	andeq	r2, r0, r0, asr r2
     e84:	000022cc 	andeq	r2, r0, ip, asr #5
int main (void) {
     e88:	000022cc 	andeq	r2, r0, ip, asr #5
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	00002378 	andeq	r2, r0, r8, ror r3
     e90:	00002378 	andeq	r2, r0, r8, ror r3
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	000023d4 	ldrdeq	r2, [r0], -r4
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	000023d4 	ldrdeq	r2, [r0], -r4
	system_init ();
     e9c:	000023ec 	andeq	r2, r0, ip, ror #7
	tcv_init ();
     ea0:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	00000001 	andeq	r0, r0, r1
     ea8:	000023ec 	andeq	r2, r0, ip, ror #7
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	000023fc 	strdeq	r2, [r0], -ip
     eb0:	000023fc 	strdeq	r2, [r0], -ip
     eb4:	00002410 	andeq	r2, r0, r0, lsl r4
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	00002410 	andeq	r2, r0, r0, lsl r4
     ebc:	00002474 	andeq	r2, r0, r4, ror r4
	delay (16, 0);
     ec0:	00002474 	andeq	r2, r0, r4, ror r4
     ec4:	00002488 	andeq	r2, r0, r8, lsl #9
     ec8:	00002488 	andeq	r2, r0, r8, lsl #9
	__pi_release ();
     ecc:	0000249c 	muleq	r0, ip, r4
     ed0:	0000249c 	muleq	r0, ip, r4
     ed4:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
     ed8:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
     edc:	000024d8 	ldrdeq	r2, [r0], -r8
     ee0:	000024d8 	ldrdeq	r2, [r0], -r8
     ee4:	000024e8 	andeq	r2, r0, r8, ror #9
static void killev (__pi_pcb_t *pid) {
     ee8:	000024e8 	andeq	r2, r0, r8, ror #9
	wfun = (aword)(pid->code);
     eec:	00002514 	andeq	r2, r0, r4, lsl r5
	for_all_tasks (i) {
     ef0:	00002514 	andeq	r2, r0, r4, lsl r5
		for (j = 0; j < nevents (i); j++) {
     ef4:	00002528 	andeq	r2, r0, r8, lsr #10
     ef8:	00002528 	andeq	r2, r0, r8, lsr #10
     efc:	0000253c 	andeq	r2, r0, ip, lsr r5
			    || i->Events [j] . Event == wfun
     f00:	0000253c 	andeq	r2, r0, ip, lsr r5
		for (j = 0; j < nevents (i); j++) {
     f04:	0000264c 	andeq	r2, r0, ip, asr #12
			if (i->Events [j] . Event == (aword)pid
     f08:	0000264c 	andeq	r2, r0, ip, asr #12
     f0c:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
     f10:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
				wakeupev (i, j);
     f14:	000026d8 	ldrdeq	r2, [r0], -r8
     f18:	000026d8 	ldrdeq	r2, [r0], -r8
	for_all_tasks (i) {
     f1c:	00002828 	andeq	r2, r0, r8, lsr #16
	...
static void qfree (aword *ch) {
     f28:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2c:	00000001 	andeq	r0, r0, r1
	cc = (aword*)(mpools + MA_NP);
     f30:	00000001 	andeq	r0, r0, r1
	m_setnextp (ch, chunk);
     f34:	00000001 	andeq	r0, r0, r1
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f40:	0000289e 	muleq	r0, lr, r8
     f44:	000028a0 	andeq	r2, r0, r0, lsr #17
     f48:	000028a2 	andeq	r2, r0, r2, lsr #17
			m_setnextp (cc, m_nextp (chunk));
     f4c:	000028a6 	andeq	r2, r0, r6, lsr #17
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     f58:	00000001 	andeq	r0, r0, r1
     f5c:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	00002828 	andeq	r2, r0, r8, lsr #16
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	00002a48 	andeq	r2, r0, r8, asr #20
     f68:	00002a48 	andeq	r2, r0, r8, asr #20
     f6c:	00002aa8 	andeq	r2, r0, r8, lsr #21
			m_setnextp (cc, m_nextp (chunk));
     f70:	00000001 	andeq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	00000001 	andeq	r0, r0, r1
     f78:	00002aa8 	andeq	r2, r0, r8, lsr #21
     f7c:	00002ac0 	andeq	r2, r0, r0, asr #21
	...
     f88:	00002b0e 	andeq	r2, r0, lr, lsl #22
			if (m_size (chunk) >= m_size (ch))
     f8c:	00002b12 	andeq	r2, r0, r2, lsl fp
     f90:	00002b18 	andeq	r2, r0, r8, lsl fp
     f94:	00002b1a 	andeq	r2, r0, sl, lsl fp
	...
		chunk = m_nextp (chunk))
     fa0:	00002b12 	andeq	r2, r0, r2, lsl fp
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	00002b18 	andeq	r2, r0, r8, lsl fp
	diag_wait (a);
     fa8:	00002b1a 	andeq	r2, r0, sl, lsl fp
	diag_wchar (c, a);
     fac:	00002b22 	andeq	r2, r0, r2, lsr #22
	...
}
     fb8:	00000001 	andeq	r0, r0, r1
	syserror (ESTATE, "state");
     fbc:	00000001 	andeq	r0, r0, r1
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	00000001 	andeq	r0, r0, r1
     fc8:	00002ac0 	andeq	r2, r0, r0, asr #21
void update_n_wake (word min, Boolean force) {
     fcc:	00002b0c 	andeq	r2, r0, ip, lsl #22
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	00000001 	andeq	r0, r0, r1
     fd4:	00000001 	andeq	r0, r0, r1
     fd8:	00002b0c 	andeq	r2, r0, ip, lsl #22
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fdc:	00002b78 	andeq	r2, r0, r8, ror fp
     fe0:	00002b78 	andeq	r2, r0, r8, ror fp
     fe4:	00002b8e 	andeq	r2, r0, lr, lsl #23
	...
     ff0:	00002b90 	muleq	r0, r0, fp
     ff4:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
     ff8:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
     ffc:	00002bc0 	andeq	r2, r0, r0, asr #23
    1000:	00000001 	andeq	r0, r0, r1
    1004:	00000001 	andeq	r0, r0, r1
    1008:	00000001 	andeq	r0, r0, r1
    100c:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
    1010:	00000001 	andeq	r0, r0, r1
	__pi_mintk = znew + min;
    1014:	00000001 	andeq	r0, r0, r1
    1018:	00000001 	andeq	r0, r0, r1
			if (!twaiting (i))
    101c:	00000001 	andeq	r0, r0, r1
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1028:	00002c22 	andeq	r2, r0, r2, lsr #24
    102c:	00002c32 	andeq	r2, r0, r2, lsr ip
    1030:	00002c38 	andeq	r2, r0, r8, lsr ip
    1034:	00002c3a 	andeq	r2, r0, sl, lsr ip
	...
    1040:	00002bc0 	andeq	r2, r0, r0, asr #23
    1044:	00002c1c 	andeq	r2, r0, ip, lsl ip
    1048:	00002c1c 	andeq	r2, r0, ip, lsl ip
    104c:	00002c48 	andeq	r2, r0, r8, asr #24
    1050:	00000001 	andeq	r0, r0, r1
				wakeuptm (i);
    1054:	00000001 	andeq	r0, r0, r1
    1058:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
    105c:	00000001 	andeq	r0, r0, r1
				d = i->Timer - znew;
    1060:	00000001 	andeq	r0, r0, r1
    1064:	00000001 	andeq	r0, r0, r1
    1068:	00000001 	andeq	r0, r0, r1
		if ((word)(__pi_mintk - znew) < min) 
    106c:	00000001 	andeq	r0, r0, r1
    1070:	00000001 	andeq	r0, r0, r1
    1074:	00000001 	andeq	r0, r0, r1
	__pi_old = znew;
    1078:	00000001 	andeq	r0, r0, r1
}
    107c:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
    1080:	00000001 	andeq	r0, r0, r1
}
    1084:	00000001 	andeq	r0, r0, r1
    1088:	00000001 	andeq	r0, r0, r1
    108c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000533 	andeq	r0, r0, r3, lsr r5
       4:	01380003 	teqeq	r8, r3
    return (time * SECOND)/1000;
       8:	01020000 	mrseq	r0, (UNDEF: 2)
}
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
      40:	2f534f63 	svccs	0x00534f63
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
            ch = redCharacter;
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
            onTime = redOn;
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     130:	0300682e 	movweq	r6, #2094	; 0x82e
            offTime = greenOff;
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
        ledFlag = 1 - ledFlag;
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    return (time * SECOND)/1000;
     13c:	00040068 	andeq	r0, r4, r8, rrx
        ledFlag = 1 - ledFlag;
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
    return (time * SECOND)/1000;
     144:	c8020500 	stmdagt	r2, {r8, sl}
     148:	03000000 	movweq	r0, #0
     14c:	1f050133 	svcne	0x00050133
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
        offTime = adjustTime(offTime);
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
        onTime = adjustTime(onTime);
     158:	03060905 	movweq	r0, #26885	; 0x6905
     15c:	0e054a31 			; <UNDEFINED> instruction: 0x0e054a31
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	011e0501 	tsteq	lr, r1, lsl #10
     164:	01062805 	tsteq	r6, r5, lsl #16
     168:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
        if(onTime > 0){
     16c:	052e0630 	streq	r0, [lr, #-1584]!	; 0xfffff9d0
            if(On)
     170:	02040135 	andeq	r0, r4, #1073741837	; 0x4000000d
     174:	f4030505 	vst3.8	{d0,d2,d4}, [r3], r5
     178:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
                leds(led,1);
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     180:	06480501 	strbeq	r0, [r8], -r1, lsl #10
                leds(led,0);
     184:	2e7e8703 	cdpcs	7, 7, cr8, cr14, cr3, {0}
     188:	01065b05 	tsteq	r6, r5, lsl #22
     18c:	4a01b705 	bmi	6dda8 <__ccfg+0x4de00>
     190:	0601ca05 	streq	ip, [r1], -r5, lsl #20
            delay(onTime, OFF_PERIOD);
     194:	0293054a 	addseq	r0, r3, #310378496	; 0x12800000
            delay(offTime, Check_PERIOD);
     198:	02980501 	addseq	r0, r8, #4194304	; 0x400000
            led = greenLed;
     19c:	02a00501 	adceq	r0, r0, #4194304	; 0x400000
     1a0:	06f90501 	ldrbteq	r0, [r9], r1, lsl #10
            ch = greenCharacter;
     1a4:	15090501 	strne	r0, [r9, #-1281]	; 0xfffffaff
            onTime = greenOn;
     1a8:	01060d05 	tsteq	r6, r5, lsl #26
     1ac:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
            offTime = greenOff;
     1b0:	052f060d 	streq	r0, [pc, #-1549]!	; fffffbab <_estack+0xdfffabab>
                leds(led,0);
     1b4:	14055b09 	strne	r5, [r5], #-2825	; 0xfffff4f7
     1b8:	0b050106 	bleq	1405d8 <__ccfg+0x120630>
     1bc:	060d052e 	streq	r0, [sp], -lr, lsr #10
     1c0:	0305052f 	movweq	r0, #21807	; 0x552f
     1c4:	14133c48 	ldrne	r3, [r3], #-3144	; 0xfffff3b8
            proceed OFF_PERIOD;
     1c8:	16090513 			; <UNDEFINED> instruction: 0x16090513
     1cc:	01061405 	tsteq	r6, r5, lsl #8
        when(&On, Check_PERIOD);
     1d0:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     1d4:	052f060d 	streq	r0, [pc, #-1549]!	; fffffbcf <_estack+0xdfffabcf>
        release;
     1d8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
        leds(led,0);
     1dc:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     1e0:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     1e4:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     1e8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
            proceed Check_PERIOD;
     1ec:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
}
     1f0:	25010615 	strcs	r0, [r1, #-1557]	; 0xfffff9eb
     1f4:	09052a24 	stmdbeq	r5, {r2, r5, r9, fp, sp}
     1f8:	19052406 	stmdbne	r5, {r1, r2, sl, sp}
     1fc:	01660306 	cmneq	r6, r6, lsl #6
     200:	1a031105 	bne	c461c <__ccfg+0xa4674>
     204:	0609052e 	streq	r0, [r9], -lr, lsr #10
     208:	03050523 	movweq	r0, #21795	; 0x5523
     20c:	12050163 	andne	r0, r5, #-1073741800	; 0xc0000018
     210:	19050106 	stmdbne	r5, {r1, r2, r8}
     214:	2e12053c 	mrccs	5, 0, r0, cr2, cr12, {1}
     218:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
     21c:	2e1e0311 	mrccs	3, 0, r0, cr14, cr1, {0}
     220:	05310d05 	ldreq	r0, [r1, #-3333]!	; 0xfffff2fb
     224:	0c051c10 	stceq	12, cr1, [r5], {16}
     228:	1c100524 	cfldr32ne	mvfx0, [r0], {36}	; 0x24
     22c:	21060905 	tstcs	r6, r5, lsl #18
     230:	62030505 	andvs	r0, r3, #20971520	; 0x1400000
     234:	03090501 	movweq	r0, #38145	; 0x9501
     238:	0c050121 	stfeqs	f0, [r5], {33}	; 0x21
     23c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     240:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    word numbers[] = {0, 0, 0, 0};
     244:	060b055a 			; <UNDEFINED> instruction: 0x060b055a
    int numbersIndex = 0;
     248:	060d0501 	streq	r0, [sp], -r1, lsl #10
    word numbers[] = {0, 0, 0, 0};
     24c:	0610053e 			; <UNDEFINED> instruction: 0x0610053e
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	2e0f0501 	cfsh32cs	mvfx0, mvfx15, #1
        if(settingsInput[i] == ' ') {
     254:	4b061105 	blmi	184670 <__ccfg+0x1646c8>
     258:	05011605 	streq	r1, [r1, #-1541]	; 0xfffff9fb
            numbers[numbersIndex] = number;
     25c:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
     260:	050102c6 	streq	r0, [r1, #-710]	; 0xfffffd3a
            number = 0;
     264:	05220629 	streq	r0, [r2, #-1577]!	; 0xfffff9d7
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	05200638 	streq	r0, [r0, #-1592]!	; 0xfffff9c8
    redOn = numbers[0];
     26c:	0204013d 	andeq	r0, r4, #1073741839	; 0x4000000f
     270:	80030505 	andhi	r0, r3, r5, lsl #10
    redOff = numbers[1];
     274:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
     278:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
    greenOn = numbers[2];
     27c:	06500501 	ldrbeq	r0, [r0], -r1, lsl #10
     280:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    greenOff = numbers[3];
     284:	01066305 	tsteq	r6, r5, lsl #6
     288:	4a01bf05 	bmi	6fea4 <__ccfg+0x4fefc>
}
     28c:	0601d205 	streq	sp, [r1], -r5, lsl #4
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	0781054a 	streq	r0, [r1, sl, asr #10]
     294:	150d0501 	strne	r0, [sp, #-1281]	; 0xfffffaff
            number = number * 10;
     298:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
            number += settingsInput[i] - 48;
     29c:	3c560306 	mrrccc	3, 0, r0, r6, cr6
     2a0:	01061105 	tsteq	r6, r5, lsl #2
     2a4:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     2a8:	01061005 	tsteq	r6, r5
     2ac:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     2b0:	01061405 	tsteq	r6, r5, lsl #8
fsm root {
     2b4:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     2b8:	01061505 	tsteq	r6, r5, lsl #10
     2bc:	03061105 	movweq	r1, #24837	; 0x6105
     2c0:	16052e13 			; <UNDEFINED> instruction: 0x16052e13
     2c4:	01260501 			; <UNDEFINED> instruction: 0x01260501
     2c8:	2e018205 	cdpcs	2, 0, cr8, cr1, cr5, {0}
     2cc:	06018505 	streq	r8, [r1], -r5, lsl #10
        ser_outf(Initial, "Enter your name: ");
     2d0:	01940501 	orrseq	r0, r4, r1, lsl #10
     2d4:	99052e06 	stmdbls	r5, {r1, r2, r9, sl, fp, sp}
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     2dc:	80030505 	andhi	r0, r3, r5, lsl #10
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
     2e4:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     2e8:	01ac0501 			; <UNDEFINED> instruction: 0x01ac0501
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
     2f0:	01bf052e 			; <UNDEFINED> instruction: 0x01bf052e
        if (choice == 'A' || choice == 'a'){
     2f4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     2f8:	09055d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, lr}
     2fc:	7a054b3f 	bvc	153000 <__ccfg+0x133058>
            proceed Adjust_Intervals;
     300:	067d0531 			; <UNDEFINED> instruction: 0x067d0531
            proceed Monitor;
     304:	018c0501 	orreq	r0, ip, r1, lsl #10
        proceed Show_Menu;
     308:	91052e06 	tstls	r5, r6, lsl #28
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     310:	f4030505 	vst3.8	{d0,d2,d4}, [r3], r5
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     318:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     31c:	01a40501 			; <UNDEFINED> instruction: 0x01a40501
        processSettingsInput(settings);
     320:	7e870306 	cdpvc	3, 8, cr0, cr7, cr6, {0}
        if(!blinkerRunning) {
     324:	01b7052e 			; <UNDEFINED> instruction: 0x01b7052e
     328:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
            blinkerCode = runfsm blinker;
     32c:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
     330:	05320105 	ldreq	r0, [r2, #-261]!	; 0xfffffefb
            blinkerRunning = YES;
     334:	01050113 	tsteq	r5, r3, lsl r1
        On = YES;
     338:	13050106 	movwne	r0, #20742	; 0x5106
     33c:	0028022e 	eoreq	r0, r8, lr, lsr #4
        trigger(&On);
     340:	1c050101 	stfnes	f0, [r5], {1}
        proceed Show_Menu;
     344:	00020500 	andeq	r0, r2, r0, lsl #10
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	03000000 	movweq	r0, #0
     34c:	0505012e 	streq	r0, [r5, #-302]	; 0xfffffed2
     350:	06190513 			; <UNDEFINED> instruction: 0x06190513
     354:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
     358:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
     35c:	02022f01 	andeq	r2, r2, #1, 30
     360:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
        proceed Show_Menu;
     364:	02050030 	andeq	r0, r5, #48	; 0x30
     368:	00000244 	andeq	r0, r0, r4, asr #4
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	0100fb03 	tsteq	r0, r3, lsl #22	; <UNPREDICTABLE>
     370:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
        displayCycle = YES;
     374:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
        ser_inf(Await_Stop, "%c", &ch);
     378:	09051f30 	stmdbeq	r5, {r4, r5, r8, r9, sl, fp, ip}
     37c:	1f0a0522 	svcne	0x000a0522
     380:	2f060505 	svccs	0x00060505
        if(ch == 'S' || ch == 's'){
     384:	0a051514 	beq	1457dc <__ccfg+0x125834>
     388:	01150501 	tsteq	r5, r1, lsl #10
     38c:	052f0905 	streq	r0, [pc, #-2309]!	; fffffa8f <_estack+0xdfffaa8f>
            displayCycle = NO;
     390:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
     394:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
            proceed Show_Menu;
     398:	23053006 	movwcs	r3, #20486	; 0x5006
        proceed Monitor;
     39c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
        On = NO;
     3a0:	05135906 	ldreq	r5, [r3, #-2310]	; 0xfffff6fa
     3a4:	05110614 	ldreq	r0, [r1, #-1556]	; 0xfffff9ec
        if(blinkerCode != 0x0) {
     3a8:	1d052119 	stfnes	f2, [r5, #-100]	; 0xffffff9c
            killall(blinkerCode);
     3ac:	15051b06 	strne	r1, [r5, #-2822]	; 0xfffff4fa
     3b0:	06050501 	streq	r0, [r5], -r1, lsl #10
        proceed Show_Menu;
     3b4:	0d030601 	stceq	6, cr0, [r3, #-4]
     3b8:	060b052e 	streq	r0, [fp], -lr, lsr #10
        leds_all(0);
     3bc:	06050501 	streq	r0, [r5], -r1, lsl #10
     3c0:	060c054b 	streq	r0, [ip], -fp, asr #10
     3c4:	06050501 	streq	r0, [r5], -r1, lsl #10
        proceed Show_Menu;
     3c8:	060d054c 	streq	r0, [sp], -ip, asr #10
     3cc:	06050501 	streq	r0, [r5], -r1, lsl #10
        } else if (choice == 'S' || choice == 's') {
     3d0:	060e054b 	streq	r0, [lr], -fp, asr #10
            proceed Stop;
     3d4:	4b010501 	blmi	417e0 <__ccfg+0x21838>
        } else if (choice == 'V' || choice == 'v') {
     3d8:	03061005 	movweq	r1, #24581	; 0x6005
            proceed View_Settings;
     3dc:	2c052e74 	stccs	14, cr2, [r5], {116}	; 0x74
        } else if (choice == 'M' || choice == 'm') {
     3e0:	13050106 	movwne	r0, #20742	; 0x5106
            proceed Monitor;
     3e4:	060d0520 	streq	r0, [sp], -r0, lsr #10
     3e8:	06140530 			; <UNDEFINED> instruction: 0x06140530
     3ec:	060d0501 	streq	r0, [sp], -r1, lsl #10
     3f0:	0614053d 			; <UNDEFINED> instruction: 0x0614053d
     3f4:	000c0201 	andeq	r0, ip, r1, lsl #4
     3f8:	1a050101 	bne	140804 <__ccfg+0x12085c>
     3fc:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
     400:	03000002 	movweq	r0, #2
     404:	05010197 	streq	r0, [r1, #-407]	; 0xfffffe69
     408:	1a05011c 	bne	140880 <__ccfg+0x1208d8>
     40c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     410:	1414ca06 	ldrne	ip, [r4], #-2566	; 0xfffff5fa
     414:	4d150905 	vldrmi.16	s0, [r5, #-10]	; <UNPREDICTABLE>
     418:	5809035b 	stmdapl	r9, {r0, r1, r3, r4, r6, r8, r9}
     41c:	0c055a14 			; <UNDEFINED> instruction: 0x0c055a14
     420:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     424:	26066706 	strcs	r6, [r6], -r6, lsl #14
     428:	31060905 	tstcc	r6, r5, lsl #18
     42c:	5a144d3f 	bpl	513930 <__ccfg+0x4f3988>
     430:	060c0540 	streq	r0, [ip], -r0, asr #10
     434:	200b0501 	andcs	r0, fp, r1, lsl #10
static void devinit_uart (int devnum) {
     438:	30060d05 	andcc	r0, r6, r5, lsl #26
	adddevfunc (ioreq_uart_a, devnum);
     43c:	01061b05 	tsteq	r6, r5, lsl #22
     440:	053c1905 	ldreq	r1, [ip, #-2309]!	; 0xfffff6fb
void udelay (volatile word n) {
     444:	052f060d 	streq	r0, [pc, #-1549]!	; fffffe3f <_estack+0xdfffae3f>
     448:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
	while (n) {
     44c:	05310609 	ldreq	r0, [r1, #-1545]!	; 0xfffff9f7
     450:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
}
     454:	303e0609 	eorscc	r0, lr, r9, lsl #12
	while (n--);
     458:	4b3fdd3f 	blmi	ff795c <__ccfg+0xfd79b4>
     45c:	01061605 	tsteq	r6, r5, lsl #12
     460:	3f060905 	svccc	0x00060905
		n--;
     464:	0b055b13 	bleq	1570b8 <__ccfg+0x137110>
     468:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     46c:	1a056706 	bne	15a08c <__ccfg+0x13a0e4>
void mdelay (volatile word n) {
     470:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     474:	1f1a052f 	svcne	0x001a052f
	while (n) {
     478:	21060d05 	tstcs	r6, r5, lsl #26
     47c:	3f310905 	svccc	0x00310905
}
     480:	01060c05 	tsteq	r6, r5, lsl #24
		udelay (999);
     484:	3f060905 	svccc	0x00060905
     488:	01061805 	tsteq	r6, r5, lsl #16
		n--;
     48c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     490:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     494:	0e053209 	cdpeq	2, 0, cr3, cr5, cr9, {0}
     498:	011e0501 	tsteq	lr, r1, lsl #10
void __pi_ondomain (lword d) {
     49c:	04012305 	streq	r2, [r1], #-773	; 0xfffffcfb
     4a0:	03050502 	movweq	r0, #21762	; 0x5502
		if (__pi_systat.effpdm > 1)
     4a4:	170100de 			; <UNDEFINED> instruction: 0x170100de
     4a8:	01063e05 	tsteq	r6, r5, lsl #28
			__pi_systat.effpdm = 1;
     4ac:	09050104 	stmdbeq	r5, {r2, r8}
	PRCMPowerDomainOn (d);
     4b0:	2e7f9f03 	cdpcs	15, 7, cr9, cr15, cr3, {0}
     4b4:	3e050204 	cdpcc	2, 0, cr0, cr5, cr4, {0}
     4b8:	2000e103 	andcs	lr, r0, r3, lsl #2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4bc:	36050104 	strcc	r0, [r5], -r4, lsl #2
     4c0:	7f9d0306 	svcvc	0x009d0306
     4c4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
	__pi_systat.ondmns |= d;
     4c8:	00de0305 	sbcseq	r0, lr, r5, lsl #6
     4cc:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
}
     4d0:	01040106 	tsteq	r4, r6, lsl #2
     4d4:	03064905 	movweq	r4, #26885	; 0x6905
void __pi_syserror (word ec, const char *m) {
     4d8:	052e7f9d 	streq	r7, [lr, #-3997]!	; 0xfffff063
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	5605014e 	strpl	r0, [r5], -lr, asr #2
     4e0:	015b0501 	cmpeq	fp, r1, lsl #10
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	05016005 	streq	r6, [r1, #-5]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	6d050168 	stfvss	f0, [r5, #-416]	; 0xfffffe60
     4ec:	01800501 	orreq	r0, r0, r1, lsl #10
     4f0:	93050106 	movwls	r0, #20742	; 0x5106
		all_leds_blink;
     4f4:	05660601 	strbeq	r0, [r6, #-1537]!	; 0xfffff9ff
     4f8:	050103d3 	streq	r0, [r1, #-979]	; 0xfffffc2d
     4fc:	01051409 	tsteq	r5, r9, lsl #8
     500:	0501062f 	streq	r0, [r1, #-1583]	; 0xfffff9d1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     504:	b8030610 	stmdalt	r3, {r4, r9, sl}
     508:	13052e7f 	movwne	r2, #24191	; 0x5e7f
     50c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     510:	10052f06 	andne	r2, r5, r6, lsl #30
     514:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     518:	060d0501 	streq	r0, [sp], -r1, lsl #10
	while (1) {
     51c:	2f10052f 	svccs	0x0010052f
     520:	01061305 	tsteq	r6, r5, lsl #6
     524:	2f060d05 	svccs	0x00060d05
     528:	c3031305 	movwgt	r1, #13061	; 0x3305
void tci_run_delay_timer () {
     52c:	01052e00 	tsteq	r5, r0, lsl #28
	setdel = __pi_mintk - __pi_old;
     530:	26022e06 	strcs	r2, [r2], -r6, lsl #28
     534:	5c010100 	stfpls	f0, [r1], {-0}
     538:	03000015 	movweq	r0, #21
     53c:	00029b00 	andeq	r9, r2, r0, lsl #22
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	fb010200 	blx	40d4a <__ccfg+0x20da2>
     544:	01000d0e 	tsteq	r0, lr, lsl #26
     548:	00010101 	andeq	r0, r1, r1, lsl #2
     54c:	00010000 	andeq	r0, r1, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
	sti_tim;
     554:	2f656d6f 	svccs	0x00656d6f
}
     558:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     55c:	442f6e69 	strtmi	r6, [pc], #-3689	; 564 <tci_run_delay_timer+0x38>
     560:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     564:	4f2f706f 	svcmi	0x002f706f
     568:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	cli_aux;
     56c:	502f5445 	eorpl	r5, pc, r5, asr #8
     570:	534f4349 	movtpl	r4, #62281	; 0xf349
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	6369502f 	cmnvs	r9, #47	; 0x2f
     578:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     57c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     580:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
	sti_aux;
     584:	2f656d6f 	svccs	0x00656d6f
}
     588:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     58c:	442f6e69 	strtmi	r6, [pc], #-3689	; 594 <AONRTCIntHandler>
     590:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
void AONRTCIntHandler () {
     594:	4f2f706f 	svcmi	0x002f706f
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     59c:	502f5445 	eorpl	r5, pc, r5, asr #8
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	534f4349 	movtpl	r4, #62281	; 0xf349
		if (__pi_utims [0] == 0)
     5a4:	6369502f 	cmnvs	r9, #47	; 0x2f
     5a8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		if (*(__pi_utims [0])) {
     5ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     5b0:	43432f58 	movtmi	r2, #16216	; 0x3f58
			(*(__pi_utims [0]))--;
     5b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
		if (__pi_utims [1] == 0)
     5b8:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
		if (*(__pi_utims [1])) {
     5bc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
			aux_timer_inactive = 0;
     5c0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
			(*(__pi_utims [1]))--;
     5c4:	2f006269 	svccs	0x00006269
		if (__pi_utims [2] == 0)
     5c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (*(__pi_utims [2])) {
     5cc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
			(*(__pi_utims [2]))--;
     5d0:	2f6e6974 	svccs	0x006e6974
		if (__pi_utims [3] != 0) {
     5d4:	6b736544 	blvs	1cd9aec <__ccfg+0x1cb9b44>
			if (*(__pi_utims [3])) {
     5d8:	2f706f74 	svccs	0x00706f74
				aux_timer_inactive = 0;
     5dc:	4f534c4f 	svcmi	0x00534c4f
				(*(__pi_utims [3]))--;
     5e0:	2f54454e 	svccs	0x0054454e
	if (__pi_systat.ledsts) {
     5e4:	4f434950 	svcmi	0x00434950
     5e8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		if (__pi_systat.ledblc++ == 0) {
     5ec:	2f534f63 	svccs	0x00534f63
     5f0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			if (__pi_systat.ledblk) {
     5f4:	4f492f73 	svcmi	0x00492f73
     5f8:	6f682f00 	svcvs	0x00682f00
     5fc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 450 <udelay+0xc>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     604:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				if (__pi_systat.ledsts & 0x2)
     608:	6f746b73 	svcvs	0x00746b73
     60c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     610:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				if (__pi_systat.ledsts & 0x4)
     614:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				__pi_systat.ledblk = 0;
     618:	2f534f43 	svccs	0x00534f43
     61c:	4f636950 	svcmi	0x00636950
			if (__pi_systat.fstblk)
     620:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
     624:	2f736269 	svccs	0x00736269
				__pi_systat.ledblc = 200;
     628:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	0073726f 	rsbseq	r7, r3, pc, ror #4
		cli_tim;
     630:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 57c <tci_run_auxiliary_timer+0x10>
		__pi_new += setdel;
     634:	616d2f65 	cmnvs	sp, r5, ror #30
     638:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		setdel = 0;
     63c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		RISE_N_SHINE;
     640:	706f746b 	rsbvc	r7, pc, fp, ror #8
		__pi_new += setdel;
     644:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		RISE_N_SHINE;
     648:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     64c:	4349502f 	movtmi	r5, #36911	; 0x902f
		aux_timer_inactive = 1;
     650:	502f534f 	eorpl	r5, pc, pc, asr #6
     654:	534f6369 	movtpl	r6, #62313	; 0xf369
				if (__pi_systat.ledsts & 0x1)
     658:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65c:	006c656e 	rsbeq	r6, ip, lr, ror #10
     660:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
				if (__pi_systat.ledsts & 0x2)
     664:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     668:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     66c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
				if (__pi_systat.ledsts & 0x8)
     670:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
				__pi_systat.ledblk = 1;
     674:	61652d65 	cmnvs	r5, r5, ror #26
     678:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
		if (aux_timer_inactive) {
     67c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
			cli_aux;
     680:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     684:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     688:	6f682f00 	svcvs	0x00682f00
     68c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4e0 <__pi_syserror+0x8>
     690:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     694:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     698:	6f746b73 	svcvs	0x00746b73
     69c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     6a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     6a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
word tci_update_delay_ticks (Boolean force) {
     6a8:	2f534f43 	svccs	0x00534f43
	cli_tim;
     6ac:	4f636950 	svcmi	0x00636950
     6b0:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
	if (setdel) {
     6b4:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	00010063 	andeq	r0, r1, r3, rrx
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	73797300 	cmnvc	r9, #0, 6
     6c0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     6c4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	63000002 	movwvs	r0, #2
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
	return NO;
     6d0:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
			setdel = 0;
     6d4:	0100682e 	tsteq	r0, lr, lsr #16
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	70670000 	rsbvc	r0, r7, r0
     6dc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
}
     6e0:	00000200 	andeq	r0, r0, r0, lsl #4
		sti_tim;
     6e4:	5f717269 	svcpl	0x00717269
		return YES;
     6e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     6ec:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
     6f0:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
     6f4:	00000300 	andeq	r0, r0, r0, lsl #6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
	UARTDisable (UART0_BASE);
     6fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	72690000 	rsbvc	r0, r9, #0
	UARTDisable (UART0_BASE);
     704:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
	UARTConfigSetExpClk (UART0_BASE,
     708:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     70c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     710:	69000003 	stmdbvs	r0, {r0, r1}
     714:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	735f6e69 	cmpvc	pc, #1680	; 0x690
     71c:	6f736e65 	svcvs	0x00736e65
     720:	00682e72 	rsbeq	r2, r8, r2, ror lr
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	70000004 	andvc	r0, r0, r4
     728:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     72c:	00020068 	andeq	r0, r2, r8, rrx
	urates [0] = rate;
     730:	6e6f6100 	powvse	f6, f7, f0
}
     734:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     738:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     73c:	77700000 	ldrbvc	r0, [r0, -r0]!
     740:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
     744:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     748:	00000200 	andeq	r0, r0, r0, lsl #4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	5f6e6f61 	svcpl	0x006e6f61
     750:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     754:	00020068 	andeq	r0, r2, r8, rrx
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
     75c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     764:	00000500 	andeq	r0, r0, r0, lsl #10
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	5f6e6f61 	svcpl	0x006e6f61
     76c:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
     770:	00020068 	andeq	r0, r2, r8, rrx
     774:	6e6f6100 	powvse	f6, f7, f0
     778:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     77c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
     780:	00020068 	andeq	r0, r2, r8, rrx
	switch (operation) {
     784:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     78c:	00060068 	andeq	r0, r6, r8, rrx
     790:	63726100 	cmnvs	r2, #0, 2
     794:	00682e68 	rsbeq	r2, r8, r8, ror #28
     798:	6d000001 	stcvs	0, cr0, [r0, #-4]
				*buf++ = uart_a_read;
     79c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
     7a0:	00010068 	andeq	r0, r1, r8, rrx
			while (len && uart_a_char_available) {
     7a4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     7a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
			if (len != operation) {
     7b0:	62000001 	andvs	r0, r0, #1
}
     7b4:	6f747475 	svcvs	0x00747475
     7b8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
			uart_a_disable_int;
     7bc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
			if (uart_a_char_available) {
     7c0:	00000100 	andeq	r0, r0, r0, lsl #2
				*buf++ = uart_a_read;
     7c4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
			uart_a_disable_int;
     7c8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     7cc:	6b000007 	blvs	7f0 <ioreq_uart_a+0x6c>
			if (uart_a_char_available) {
     7d0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     7d4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
				uart_a_enable_int;
     7d8:	00000005 	andeq	r0, r0, r5
     7dc:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
				goto Redo_rx;
     7e0:	00043802 	andeq	r3, r4, r2, lsl #16
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
     7e8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			return -2;
     7ec:	10062705 	andne	r2, r6, r5, lsl #14
     7f0:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
				uart_a_write (*buf);
     7f4:	01010005 	tsteq	r1, r5
     7f8:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
			while (len && uart_a_room_in_tx) {
     7fc:	00044402 	andeq	r4, r4, r2, lsl #8
     800:	01180300 	tsteq	r8, r0, lsl #6
     804:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
			if (len != operation) {
     808:	09050108 	stmdbeq	r5, {r3, r8}
			uart_a_disable_int;
     80c:	08050106 	stmdaeq	r5, {r1, r2, r8}
     810:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
			if (uart_a_room_in_tx) {
     814:	2b060305 	blcs	181430 <__ccfg+0x161488>
     818:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
				uart_a_enable_int;
     81c:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
     820:	060a0501 	streq	r0, [sl], -r1, lsl #10
				*buf++ = uart_a_read;
     824:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
			if (uart_a_room_in_tx) {
     828:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
				uart_a_write (*buf);
     82c:	01060405 	tsteq	r6, r5, lsl #8
     830:	01000702 	tsteq	r0, r2, lsl #14
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	001f0501 	andseq	r0, pc, r1, lsl #10
     838:	04700205 	ldrbteq	r0, [r0], #-517	; 0xfffffdfb
			uart_a_enable_int;
     83c:	1f030000 	svcne	0x00030000
     840:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     844:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
			return 0;
     848:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
			if (len == UART_CNTRL_SETRATE) {
     84c:	01053c08 	tsteq	r5, r8, lsl #24
				if (__pi_uart_setrate (*((word*)buf),
     850:	06030524 	streq	r0, [r3], -r4, lsr #10
     854:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
     858:	07020106 	streq	r0, [r2, -r6, lsl #2]
				syserror (EREQPAR, "uar");
     85c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			syserror (ENOOPER, "uai");
     860:	0205001e 	andeq	r0, r5, #30
			if (len == UART_CNTRL_GETRATE) {
     864:	0000049c 	muleq	r0, ip, r4
				return 1;
     868:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
			syserror (ENOOPER, "uai");
     870:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
     874:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
     878:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
     87c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     880:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     884:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
     888:	17052106 	strne	r2, [r5, -r6, lsl #2]
     88c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     890:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
void UART0IntHandler () {
     898:	06090501 	streq	r0, [r9], -r1, lsl #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	4a080501 	bmi	201ca8 <__ccfg+0x1e1d00>
     8a0:	30060205 	andcc	r0, r6, r5, lsl #4
     8a4:	01061505 	tsteq	r6, r5, lsl #10
     8a8:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     8ac:	01010005 	tsteq	r1, r5
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     8b4:	00000002 	andeq	r0, r0, r2
		RISE_N_SHINE;
     8b8:	013a0300 	teqeq	sl, r0, lsl #6
     8bc:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
		i_trigger (devevent (UART_A, READ));
     8c0:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
     8c4:	1f052502 	svcne	0x00052502
     8c8:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     8cc:	3c053d06 	stccc	13, cr3, [r5], {6}
     8d0:	01080501 	tsteq	r8, r1, lsl #10
     8d4:	01060905 	tsteq	r6, r5, lsl #18
     8d8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     8dc:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
     8e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     8e4:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
     8e8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     8ec:	06052027 	streq	r2, [r5], -r7, lsr #32
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	06040520 	streq	r0, [r4], -r0, lsr #10
     8f4:	06240521 	strteq	r0, [r4], -r1, lsr #10
     8f8:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
		i_trigger (devevent (UART_A, WRITE));
     8fc:	23060205 	movwcs	r0, #25093	; 0x6205
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	01061505 	tsteq	r6, r5, lsl #10
     904:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
		RISE_N_SHINE;
     908:	01010005 	tsteq	r1, r5
     90c:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
     910:	00000002 	andeq	r0, r0, r2
		i_trigger (devevent (UART_A, WRITE));
     914:	00ce0300 	sbceq	r0, lr, r0, lsl #6
     918:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     91c:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
     920:	06220205 	strteq	r0, [r2], -r5, lsl #4
     924:	03053633 	movweq	r3, #22067	; 0x5633
     928:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
     92c:	01f00304 	mvnseq	r0, r4, lsl #6
     930:	5c053001 	stcpl	0, cr3, [r5], {1}
     934:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     938:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
     93c:	0502100a 	streq	r1, [r2, #-10]
}
     940:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     944:	0205002d 	andeq	r0, r5, #45	; 0x2d
     948:	000004d8 	ldrdeq	r0, [r0], -r8
     94c:	01019703 	tsteq	r1, r3, lsl #14
     950:	01140205 	tsteq	r4, r5, lsl #4
void __buttons_setirq (int val) {
     954:	2d051701 	stccs	7, cr1, [r5, #-4]
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	01790306 	cmneq	r9, r6, lsl #6
     95c:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
     964:	03030503 	movweq	r0, #13571	; 0x3503
     968:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	062d0504 	strteq	r0, [sp], -r4, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	2001cb03 	andcs	ip, r1, r3, lsl #22
     974:	02050104 	andeq	r0, r5, #4, 2
     978:	7f8f0306 	svcvc	0x008f0306
     97c:	1303053c 	movwne	r0, #13628	; 0x353c
     980:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     984:	eb032905 	bl	cada0 <__ccfg+0xaadf8>
}
     988:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     98c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     990:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     994:	7f900303 	svcvc	0x00900303
void __pinlist_setirq (int val) {
     998:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	for (i = 0; i < N_PINLIST; i++) {
     99c:	00f0032d 	rscseq	r0, r0, sp, lsr #6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9a4:	90030603 	andls	r0, r3, r3, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	eb032905 	bl	cadc8 <__ccfg+0xaae20>
     9b0:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     9b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     9bc:	90030603 	andls	r0, r3, r3, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	0101207f 	tsteq	r1, pc, ror r0
}
     9c4:	01010101 	tsteq	r1, r1, lsl #2
     9c8:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
     9cc:	29050404 	stmdbcs	r5, {r2, sl}
     9d0:	0101a103 	tsteq	r1, r3, lsl #2
void GPIOIntHandler () {
     9d4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
if (buttons_int) {
     9d8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     9dc:	03030501 	movweq	r0, #13569	; 0x3501
	buttons_disable ();
     9e0:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
     9e4:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	i_trigger ((aword)&__button_list);
     9e8:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
     9ec:	06030501 	streq	r0, [r3], -r1, lsl #10
     9f0:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     9f4:	29050404 	stmdbcs	r5, {r2, sl}
     9f8:	0101a103 	tsteq	r1, r3, lsl #2
     9fc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     a00:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     a04:	06030501 	streq	r0, [r3], -r1, lsl #10
     a08:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     a0c:	01010101 	tsteq	r1, r1, lsl #2
     a10:	01580101 	cmpeq	r8, r1, lsl #2
	RISE_N_SHINE;
     a14:	1108052e 	tstne	r8, lr, lsr #10
     a18:	01000902 	tsteq	r0, r2, lsl #18
     a1c:	001d0501 	andseq	r0, sp, r1, lsl #10
if (pin_sensor_int) {
     a20:	052c0205 	streq	r0, [ip, #-517]!	; 0xfffffdfb
     a24:	9d030000 	stcls	0, cr0, [r3, #-0]
	i_trigger ((aword)(&__input_pins));
     a28:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     a2c:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
     a30:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
     a34:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     a38:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
     a3c:	0602052e 	streq	r0, [r2], -lr, lsr #10
     a40:	01760323 	cmneq	r6, r3, lsr #6
     a44:	01061105 	tsteq	r6, r5, lsl #2
     a48:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
     a4c:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
     a50:	2a052073 	bcs	148c24 <__ccfg+0x128c7c>
	__pinsen_disable_and_clear;
     a54:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
	RISE_N_SHINE;
     a58:	2076032f 	rsbscs	r0, r6, pc, lsr #6
     a5c:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     a60:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
}
     a64:	23060205 	movwcs	r0, #25093	; 0x6205
     a68:	2f060105 	svccs	0x00060105
     a6c:	01000b02 	tsteq	r0, r2, lsl #22
     a70:	00210501 	eoreq	r0, r1, r1, lsl #10
     a74:	056c0205 	strbeq	r0, [ip, #-517]!	; 0xfffffdfb
void system_init () {
     a78:	aa030000 	bge	c0a80 <__ccfg+0xa0ad8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a80:	06210517 			; <UNDEFINED> instruction: 0x06210517
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     a88:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
     a8c:	03140205 	tsteq	r4, #1342177280	; 0x50000000
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a90:	11050169 	tstne	r5, r9, ror #2
     a94:	2f050106 	svccs	0x00050106
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     a9c:	2f052017 	svccs	0x00052017
     aa0:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	2a052e36 	bcs	14c384 <__ccfg+0x12c3dc>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa8:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	01052e09 	tsteq	r5, r9, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab4:	06021306 	streq	r1, [r2], -r6, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	0205001a 	andeq	r0, r5, #26
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	00000594 	muleq	r0, r4, r5
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	0102b703 	tsteq	r2, r3, lsl #14
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
     acc:	0e061a05 	vmlaeq.f32	s2, s12, s10
     ad0:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
     ad4:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
		if (port_confs [i] & 0x80)
     ad8:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	2b051406 	blcs	145afc <__ccfg+0x125b54>
     ae0:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
		if (port_confs [i] & 0x40)
     ae4:	06050522 	streq	r0, [r5], -r2, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	06030501 	streq	r0, [r3], -r1, lsl #10
     aec:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     af0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af4:	03052e06 	movweq	r2, #24070	; 0x5e06
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	07053006 	streq	r3, [r5, -r6]
	all_leds_blink;
     afc:	06050106 	streq	r0, [r5], -r6, lsl #2
     b00:	06040520 	streq	r0, [r4], -r0, lsr #10
     b04:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     b08:	06040501 	streq	r0, [r4], -r1, lsl #10
     b0c:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     b10:	06030501 	streq	r0, [r3], -r1, lsl #10
     b14:	06120522 	ldreq	r0, [r2], -r2, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	20060501 	andcs	r0, r6, r1, lsl #10
     b1c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     b20:	01060705 	tsteq	r6, r5, lsl #14
     b24:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b28:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2c:	1f130617 	svcne	0x00130617
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	2f060405 	svccs	0x00060405
     b34:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
	IntEnable (INT_AON_RTC_COMB);
     b38:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     b3c:	03052006 	movweq	r2, #20486	; 0x5006
     b40:	07052206 	streq	r2, [r5, -r6, lsl #4]
	__pi_malloc_init ();
     b44:	06050106 	streq	r0, [r5], -r6, lsl #2
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	06040520 	streq	r0, [r4], -r0, lsr #10
     b4c:	06170521 	ldreq	r0, [r7], -r1, lsr #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	03052f06 	movweq	r2, #24326	; 0x5f06
     b58:	06120514 			; <UNDEFINED> instruction: 0x06120514
     b5c:	20060501 	andcs	r0, r6, r1, lsl #10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	21060405 	tstcs	r6, r5, lsl #8
     b64:	01060805 	tsteq	r6, r5, lsl #16
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     b6c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     b70:	1f130618 	svcne	0x00130618
	urates [0] = UART_RATE / 100;
     b74:	2f060505 	svccs	0x00060505
     b78:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
	reinit_uart ();
     b7c:	017da303 	cmneq	sp, r3, lsl #6
	EXTRA_INITIALIZERS;
     b80:	01061105 	tsteq	r6, r5, lsl #2
     b84:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b88:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
     b8c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     b90:	06052019 			; <UNDEFINED> instruction: 0x06052019
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
     b98:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	20070501 	andcs	r0, r7, r1, lsl #10
     ba0:	052f1405 	streq	r1, [pc, #-1029]!	; 7a3 <ioreq_uart_a+0x1f>
			devinit [i] . init (devinit [i] . param);
     ba4:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
     bac:	06050106 	streq	r0, [r5], -r6, lsl #2
     bb0:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
	IntEnable (INT_UART0_COMB);
     bb4:	96032905 	strls	r2, [r3], -r5, lsl #18
     bb8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
}
     bbc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	tci_run_auxiliary_timer ();
     bc0:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
		diag ("");
     bc4:	e6030605 	str	r0, [r3], -r5, lsl #12
     bc8:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	08050106 	stmdaeq	r5, {r1, r2, r8}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	06060520 	streq	r0, [r6], -r0, lsr #10
		diag ("Leftover RAM: %d bytes",
     bd4:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     bd8:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
     bdc:	17050501 	strne	r0, [r5, -r1, lsl #10]
     be0:	01062d05 	tsteq	r6, r5, lsl #26
     be4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     be8:	7de80306 	stclvc	3, cr0, [r8, #24]!
     bec:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     bf0:	06060501 	streq	r0, [r6], -r1, lsl #10
     bf4:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     bf8:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     bfc:	06050106 	streq	r0, [r5], -r6, lsl #2
     c00:	01012106 	tsteq	r1, r6, lsl #2
     c04:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     c08:	03010618 	movweq	r0, #5656	; 0x1618
     c0c:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
     c10:	13052206 	movwne	r2, #20998	; 0x5206
     c14:	07050106 	streq	r0, [r5, -r6, lsl #2]
     c18:	06050520 	streq	r0, [r5], -r0, lsr #10
     c1c:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
     c20:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     c24:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
     c28:	02052e02 	andeq	r2, r5, #2, 28
     c2c:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
__attribute__ ((noreturn)) void __pi_release () {
     c30:	06030501 	streq	r0, [r3], -r1, lsl #10
     c34:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
     c38:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	0c052206 	sfmeq	f2, 4, [r5], {6}
	check_stack_overflow;
     c40:	0a050106 	beq	141060 <__ccfg+0x1210b8>
     c44:	1f0c052f 	svcne	0x000c052f
     c48:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
	update_n_wake (MAX_WORD, NO);
     c4c:	03051e0c 	movweq	r1, #24076	; 0x5e0c
     c50:	01132f06 	tsteq	r3, r6, lsl #30
     c54:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
	for_all_tasks (__pi_curr) {
     c58:	13060105 	movwne	r0, #24837	; 0x6105
     c5c:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
     c60:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
	__SLEEP;
     c68:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
     c6c:	06050106 	streq	r0, [r5], -r6, lsl #2
     c70:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     c74:	c2032905 	andgt	r2, r3, #81920	; 0x14000
	system_event_count ++;
     c78:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     c7c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	switch (__pi_systat.effpdm) {
     c80:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     c84:	ba030605 	blt	c24a0 <__ccfg+0xa24f8>
     c88:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     c8c:	08050106 	stmdaeq	r5, {r1, r2, r8}
			__WFI ();
     c90:	06060520 	streq	r0, [r6], -r0, lsr #10
     c94:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     c98:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
	check_stack_overflow;
     c9c:	17050501 	strne	r0, [r5, -r1, lsl #10]
     ca0:	01062d05 	tsteq	r6, r5, lsl #26
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     ca8:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	0614054a 	ldreq	r0, [r4], -sl, asr #10
			goto Redo;
     cb0:	06060501 	streq	r0, [r6], -r1, lsl #10
	for_all_tasks (__pi_curr) {
     cb4:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	06050106 	streq	r0, [r5], -r6, lsl #2
     cc0:	01012106 	tsteq	r1, r6, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc4:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     cc8:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
     ccc:	06030501 	streq	r0, [r3], -r1, lsl #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cd0:	4a02ce03 	bmi	b44e4 <__ccfg+0x9453c>
     cd4:	01060605 	tsteq	r6, r5, lsl #12
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	30060405 	andcc	r0, r6, r5, lsl #8
     cdc:	01001502 	tsteq	r0, r2, lsl #10
			__WFI ();
     ce0:	002d0501 	eoreq	r0, sp, r1, lsl #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce4:	06a80205 	strteq	r0, [r8], r5, lsl #4
     ce8:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
}
     cec:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cf0:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf4:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	052f0605 	streq	r0, [pc, #-1541]!	; 6fb <__pi_uart_setrate+0x3>
     cfc:	21061f02 	tstcs	r6, r2, lsl #30
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d00:	01060605 	tsteq	r6, r5, lsl #12
     d04:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     d08:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0c:	06060520 	streq	r0, [r6], -r0, lsr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	06040501 	streq	r0, [r4], -r1, lsl #10
     d14:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
     d18:	06020501 	streq	r0, [r2], -r1, lsl #10
     d1c:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	01061005 	tsteq	r6, r5
     d24:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	0187031a 	orreq	r0, r7, sl, lsl r3
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
     d30:	1f170520 	svcne	0x00170520
     d34:	0a030905 	beq	c3150 <__ccfg+0xa31a8>
     d38:	030d0520 	movweq	r0, #54560	; 0xd520
     d3c:	0b052076 	bleq	148f1c <__ccfg+0x128f74>
			SysCtrlSetRechargeBeforePowerDown
     d40:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d44:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	06010513 			; <UNDEFINED> instruction: 0x06010513
     d4c:	06030519 			; <UNDEFINED> instruction: 0x06030519
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	0a052f29 	beq	14c9fc <__ccfg+0x12ca54>
     d54:	09020106 	stmdbeq	r2, {r1, r2, r8}
     d58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5c:	02050033 	andeq	r0, r5, #51	; 0x33
     d60:	000006f8 	strdeq	r0, [r0], -r8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	0105d303 	tsteq	r5, r3, lsl #6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
     d6c:	03063305 	movweq	r3, #25349	; 0x6305
     d70:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	03330527 	teqeq	r3, #163577856	; 0x9c00000
			while (!(AONWUCPowerStatusGet () &
     d78:	02053c79 	andeq	r3, r5, #30976	; 0x7900
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
     d80:	03050502 	movweq	r0, #21762	; 0x5502
     d84:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	06020501 	streq	r0, [r2], -r1, lsl #10
     d8c:	0104ab03 	tsteq	r4, r3, lsl #22
     d90:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
     d94:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	017dd903 	cmneq	sp, r3, lsl #18
     d9c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     da0:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     da4:	03010501 	movweq	r0, #5377	; 0x1501
			SysCtrlAdjustRechargeAfterPowerDown ();
     da8:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
			reinit_uart ();
     dac:	03230506 			; <UNDEFINED> instruction: 0x03230506
     db0:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
     db4:	054f0605 	strbeq	r0, [pc, #-1541]	; 7b7 <ioreq_uart_a+0x33>
}
     db8:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dbc:	06020501 	streq	r0, [r2], -r1, lsl #10
     dc0:	66029e03 	strvs	r9, [r2], -r3, lsl #28
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	01060d05 	tsteq	r6, r5, lsl #26
     dc8:	2f060205 	svccs	0x00060205
     dcc:	13060105 	movwne	r0, #24837	; 0x6105
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	01000c02 	tsteq	r0, r2, lsl #24
     dd4:	001c0501 	andseq	r0, ip, r1, lsl #10
     dd8:	074c0205 	strbeq	r0, [ip, -r5, lsl #4]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ddc:	ef030000 	svc	0x00030000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
     dec:	17050501 	strne	r0, [r5, -r1, lsl #10]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	01062305 	tsteq	r6, r5, lsl #6
     df4:	02050104 	andeq	r0, r5, #4, 2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	20028803 	andcs	r8, r2, r3, lsl #16
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	23050604 	movwcs	r0, #22020	; 0x5604
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e00:	207df803 	rsbscs	pc, sp, r3, lsl #16
     e04:	02050104 	andeq	r0, r5, #4, 2
			PRCMPowerDomainOff (
     e08:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
     e0c:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
	__SLEEP;
     e10:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
     e14:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	17050517 	smladne	r5, r7, r5, r0
	goto Redo;
     e1c:	01062305 	tsteq	r6, r5, lsl #6
     e20:	02050104 	andeq	r0, r5, #4, 2
     e24:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
     e28:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
     e2c:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
     e30:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
     e34:	01062405 	tsteq	r6, r5, lsl #8
     e38:	02050104 	andeq	r0, r5, #4, 2
     e3c:	7db20306 	ldcvc	3, cr0, [r2, #24]!
     e40:	000e0258 	andeq	r0, lr, r8, asr r2
     e44:	3d050101 	stfccs	f0, [r5, #-4]
     e48:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
     e4c:	03000007 	movweq	r0, #7
     e50:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
     e54:	3d051402 	cfstrscc	mvf1, [r5, #-8]
     e58:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
     e5c:	0b030605 	bleq	c2678 <__ccfg+0xa26d0>
     e60:	060e0582 	streq	r0, [lr], -r2, lsl #11
     e64:	2f080501 	svccs	0x00080501
     e68:	051f0e05 	ldreq	r0, [pc, #-3589]	; 6b <g_pfnVectors+0x6b>
     e6c:	052f0605 	streq	r0, [pc, #-1541]!	; 86f <ioreq_uart_a+0xeb>
     e70:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
     e74:	0f052006 	svceq	0x00052006
     e78:	0604052e 	streq	r0, [r4], -lr, lsr #10
     e7c:	06070534 			; <UNDEFINED> instruction: 0x06070534
     e80:	06050501 	streq	r0, [r5], -r1, lsl #10
     e84:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
int main (void) {
     e88:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	20340301 	eorscs	r0, r4, r1, lsl #6
     e90:	a0030905 	andge	r0, r3, r5, lsl #18
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
	system_init ();
     e9c:	0e052108 	adfeqs	f2, f5, #0.0
	tcv_init ();
     ea0:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	0b030604 	bleq	c26bc <__ccfg+0xa2714>
     ea8:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	07050106 	streq	r0, [r5, -r6, lsl #2]
     eb0:	0605052e 	streq	r0, [r5], -lr, lsr #10
     eb4:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	060b0524 	streq	r0, [fp], -r4, lsr #10
     ebc:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
	delay (16, 0);
     ec0:	21062d04 	tstcs	r6, r4, lsl #26
     ec4:	01060b05 	tsteq	r6, r5, lsl #22
     ec8:	03060505 	movweq	r0, #25861	; 0x6505
	__pi_release ();
     ecc:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
     ed0:	05053006 	streq	r3, [r5, #-6]
     ed4:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
     ed8:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
     edc:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
     ee0:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     ee4:	07053506 	streq	r3, [r5, -r6, lsl #10]
static void killev (__pi_pcb_t *pid) {
     ee8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	wfun = (aword)(pid->code);
     eec:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
	for_all_tasks (i) {
     ef0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		for (j = 0; j < nevents (i); j++) {
     ef4:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
     ef8:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
     efc:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
			    || i->Events [j] . Event == wfun
     f00:	03040520 	movweq	r0, #17696	; 0x4520
		for (j = 0; j < nevents (i); j++) {
     f04:	08052030 	stmdaeq	r5, {r4, r5, sp}
			if (i->Events [j] . Event == (aword)pid
     f08:	03050521 	movweq	r0, #21793	; 0x5521
     f0c:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
     f10:	3c110306 	ldccc	3, cr0, [r1], {6}
				wakeupev (i, j);
     f14:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
     f18:	1f04053d 	svcne	0x0004053d
	for_all_tasks (i) {
     f1c:	0b052f06 	bleq	14cb3c <__ccfg+0x12cb94>
}
     f20:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	07052506 	streq	r2, [r5, -r6, lsl #10]
static void qfree (aword *ch) {
     f28:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
	cc = (aword*)(mpools + MA_NP);
     f30:	08050106 	stmdaeq	r5, {r1, r2, r8}
	m_setnextp (ch, chunk);
     f34:	0605054a 	streq	r0, [r5], -sl, asr #10
	m_setnextp (cc, ch);
     f38:	06040531 			; <UNDEFINED> instruction: 0x06040531
}
     f3c:	062e1603 	strteq	r1, [lr], -r3, lsl #12
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f40:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
     f44:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     f48:	052f0605 	streq	r0, [pc, #-1541]!	; 94b <UART0IntHandler+0xb7>
			m_setnextp (cc, m_nextp (chunk));
     f4c:	7f880302 	svcvc	0x00880302
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	06100501 	ldreq	r0, [r0], -r1, lsl #10
     f54:	030c0501 	movweq	r0, #50433	; 0xc501
     f58:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
     f5c:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	0c052f06 	stceq	15, cr2, [r5], {6}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     f68:	20110306 	andscs	r0, r1, r6, lsl #6
     f6c:	01001202 	tsteq	r0, r2, lsl #4
			m_setnextp (cc, m_nextp (chunk));
     f70:	002b0501 	eoreq	r0, fp, r1, lsl #10
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	00000205 	andeq	r0, r0, r5, lsl #4
     f78:	ea030000 	b	c0f80 <__ccfg+0xa0fd8>
     f7c:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
     f80:	06010514 			; <UNDEFINED> instruction: 0x06010514
     f84:	00060213 	andeq	r0, r6, r3, lsl r2
     f88:	19050101 	stmdbne	r5, {r0, r8}
			if (m_size (chunk) >= m_size (ch))
     f8c:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
     f90:	03000008 	movweq	r0, #8
     f94:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
		chunk = m_nextp (chunk))
     f98:	06041402 	streq	r1, [r4], -r2, lsl #8
     f9c:	12032405 	andne	r2, r3, #83886080	; 0x5000000
     fa0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	01062205 	tsteq	r6, r5, lsl #4
	diag_wait (a);
     fa8:	19050104 	stmdbne	r5, {r2, r8}
	diag_wchar (c, a);
     fac:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
     fb0:	03220506 			; <UNDEFINED> instruction: 0x03220506
}
     fb4:	01042019 	tsteq	r4, r9, lsl r0
     fb8:	6b030605 	blvs	c27d4 <__ccfg+0xa282c>
	syserror (ESTATE, "state");
     fbc:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
     fc0:	20150322 	andscs	r0, r5, r2, lsr #6
     fc4:	02050104 	andeq	r0, r5, #4, 2
     fc8:	206b0306 	rsbcs	r0, fp, r6, lsl #6
void update_n_wake (word min, Boolean force) {
     fcc:	01060605 	tsteq	r6, r5, lsl #12
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     fd4:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
     fd8:	0603052e 	streq	r0, [r3], -lr, lsr #10
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fdc:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
     fe0:	01010113 	tsteq	r1, r3, lsl r1
     fe4:	0620062e 	strteq	r0, [r0], -lr, lsr #12
     fe8:	4a662e66 	bmi	198c988 <__ccfg+0x196c9e0>
     fec:	02052e01 	andeq	r2, r5, #1, 28
     ff0:	06060515 			; <UNDEFINED> instruction: 0x06060515
     ff4:	20050501 	andcs	r0, r5, r1, lsl #10
     ff8:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     ffc:	03052e18 	movweq	r2, #24088	; 0x5e18
    1000:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
    1004:	014b062c 	cmpeq	fp, ip, lsr #12
    1008:	01011358 	tsteq	r1, r8, asr r3
    100c:	20062e01 	andcs	r2, r6, r1, lsl #28
		for_all_tasks (i) {
    1010:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	__pi_mintk = znew + min;
    1014:	0105014a 	tsteq	r5, sl, asr #2
    1018:	0b023206 	bleq	8d838 <__ccfg+0x6d890>
			if (!twaiting (i))
    101c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1020:	02050021 	andeq	r0, r5, #33	; 0x21
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1024:	00000954 	andeq	r0, r0, r4, asr r9
    1028:	0107d903 	tsteq	r7, r3, lsl #18
    102c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    1030:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1034:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    1038:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    103c:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
    1040:	03040106 	movweq	r0, #16646	; 0x4106
    1044:	83030305 	movwhi	r0, #13061	; 0x3305
    1048:	01042079 	tsteq	r4, r9, ror r0
    104c:	03060205 	movweq	r0, #25093	; 0x6205
    1050:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
				wakeuptm (i);
    1054:	0305010e 	movweq	r0, #20750	; 0x510e
    1058:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
		for_all_tasks (i) {
    105c:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
				d = i->Timer - znew;
    1060:	0104017d 	tsteq	r4, sp, ror r1
    1064:	d3030805 	movwle	r0, #14341	; 0x3805
    1068:	04042002 	streq	r2, [r4], #-2
		if ((word)(__pi_mintk - znew) < min) 
    106c:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
    1070:	0104207d 	tsteq	r4, sp, ror r0
    1074:	d3030805 	movwle	r0, #14341	; 0x3805
	__pi_old = znew;
    1078:	03052002 	movweq	r2, #20482	; 0x5002
}
    107c:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
	TCI_RUN_DELAY_TIMER;
    1080:	21060305 	tstcs	r6, r5, lsl #6
}
    1084:	29050404 	stmdbcs	r5, {r2, sl}
    1088:	017da703 	cmneq	sp, r3, lsl #14
    108c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1090:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
    1094:	01042e2d 	tsteq	r4, sp, lsr #28
void proceed (word state) {
    1098:	03060305 	movweq	r0, #25349	; 0x6305
	prcdstate (__pi_curr, state);
    109c:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    10a0:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
	release;
    10a4:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
    10a8:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
void __pi_wait (aword event, word state) {
    10ac:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
	sint j = nevents (__pi_curr);
    10b0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
    10b8:	58410520 	stmdapl	r1, {r5, r8, sl}^
    10bc:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
		syserror (ENEVENTS, "sw");
    10c0:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10c4:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
	setestate (__pi_curr->Events [j], state, event);
    10c8:	03290504 			; <UNDEFINED> instruction: 0x03290504
	incwait (__pi_curr);
    10cc:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
	setestate (__pi_curr->Events [j], state, event);
    10d0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
}
    10d4:	01040106 	tsteq	r4, r6, lsl #2
    10d8:	03060305 	movweq	r0, #25349	; 0x6305
    10dc:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
void __pi_trigger (aword event) {
    10e0:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
	for_all_tasks (i) {
    10e4:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
		for (j = 0; j < nevents (i); j++) {
    10e8:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    10ec:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
    10f0:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
    10f4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			if (i->Events [j] . Event == event) {
    10f8:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
    10fc:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1100:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				wakeupev (i, j);
    1104:	02050021 	andeq	r0, r5, #33	; 0x21
    1108:	00000998 	muleq	r0, r8, r9
	for_all_tasks (i) {
    110c:	0107ec03 	tsteq	r7, r3, lsl #24
}
    1110:	13140205 	tstne	r4, #1342177280	; 0x50000000
aword __pi_join (aword pid, word st) {
    1114:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
	for_all_tasks (i) {
    1118:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
    111c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	return 0;
    1120:	90030621 	andls	r0, r3, r1, lsr #12
		if ((aword)i == pid) {
    1124:	03040107 	movweq	r0, #16647	; 0x4107
			__pi_wait (pid, st);
    1128:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
}
    112c:	01042078 	tsteq	r4, r8, ror r0
	for_all_tasks (i) {
    1130:	03060205 	movweq	r0, #25093	; 0x6205
    1134:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
void delay (word d, word state) {
    1138:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	settstate (__pi_curr, state);
    113c:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
    1140:	9b033305 	blls	cdd5c <__ccfg+0xaddb4>
    1144:	0104207d 	tsteq	r4, sp, ror r0
    1148:	e6030805 	str	r0, [r3], -r5, lsl #16
	update_n_wake (d, YES);
    114c:	04042002 	streq	r2, [r4], #-2
    1150:	9a032d05 	bls	cc56c <__ccfg+0xac5c4>
	__pi_curr->Timer = __pi_old + d;
    1154:	0104207d 	tsteq	r4, sp, ror r0
    1158:	e8030305 	stmda	r3, {r0, r2, r8, r9}
	inctimer (__pi_curr);
    115c:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
    1160:	01060805 	tsteq	r6, r5, lsl #16
    1164:	051f1e05 	ldreq	r1, [pc, #-3589]	; 367 <root+0xb3>
}
    1168:	03052106 	movweq	r2, #20742	; 0x5106
    116c:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
	if (fun == NULL)
    1170:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
		return (int) __pi_curr;
    1174:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    1178:	06330517 			; <UNDEFINED> instruction: 0x06330517
	for_all_tasks (i)
    117c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1180:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
		if (i->code == fun)
    1184:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
	for_all_tasks (i)
    1188:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    118c:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
    1190:	03050104 	movweq	r0, #20740	; 0x5104
int __pi_strlen (const char *s) {
    1194:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	06410520 	strbeq	r0, [r1], -r0, lsr #10
}
    119c:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
    11a0:	010e051d 	tsteq	lr, sp, lsl r5
	while (n--)
    11a4:	01060205 	tsteq	r6, r5, lsl #4
    11a8:	03042606 	movweq	r2, #17926	; 0x4606
		*dest++ = *src++;
    11ac:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
    11b0:	01040178 	tsteq	r4, r8, ror r1
    11b4:	03060105 	movweq	r0, #24837	; 0x6105
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
		syserror (EREQPAR, "addv");
    11bc:	01010008 	tsteq	r1, r8
		syserror (ERESOURCE, "addv");
    11c0:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
	if (ioreq [loc] != NULL)
    11c4:	0009d402 	andeq	sp, r9, r2, lsl #8
    11c8:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
		syserror (ERESOURCE, "addv");
    11cc:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
	ioreq [loc] = rf;
    11d0:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
}
    11d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    11d8:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	07040107 	streq	r0, [r4, -r7, lsl #2]
    11e0:	bb030505 	bllt	c25fc <__ccfg+0xa2654>
    11e4:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
    11e8:	0602052e 	streq	r0, [r2], -lr, lsr #10
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ec:	01013d3d 	tsteq	r1, sp, lsr sp
    11f0:	20063c01 	andcs	r3, r6, r1, lsl #24
    11f4:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
		syserror (ENODEVICE, "io");
    11f8:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
    11fc:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
	if (len == 0)
    1200:	050f0105 	streq	r0, [pc, #-261]	; 1103 <__pi_trigger+0x23>
	ret = (ioreq [dev]) (operation, buf, len);
    1204:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1208:	02052004 	andeq	r2, r5, #4
	if (ret >= 0)
    120c:	01013d06 	tsteq	r1, r6, lsl #26
	if (ret == -1) {
    1210:	20063c01 	andcs	r3, r6, r1, lsl #24
    1214:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
		if (retry == WNONE)
    1218:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		iowait (dev, operation, retry);
    121c:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
    1220:	06010501 	streq	r0, [r1], -r1, lsl #10
    1224:	0107d003 	tsteq	r7, r3
			release;
    1228:	01000b02 	tsteq	r0, r2, lsl #22
	if (ret == -2) {
    122c:	00150501 	andseq	r0, r5, r1, lsl #10
		if (retry != WNONE) {
    1230:	0a780205 	beq	1e01a4c <__ccfg+0x1de1aa4>
    1234:	80030000 	andhi	r0, r3, r0
			iowait (dev, operation, retry);
    1238:	02050108 	andeq	r0, r5, #8, 2
    123c:	06150514 			; <UNDEFINED> instruction: 0x06150514
			(ioreq [dev]) (NONE, buf, len);
    1240:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
    1244:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    1248:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
		(ioreq [dev]) (NONE, buf, len);
    124c:	a7030505 	strge	r0, [r3, -r5, lsl #10]
    1250:	3105017c 	tstcc	r5, ip, ror r1
    1254:	01040106 	tsteq	r4, r6, lsl #2
}
    1258:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
	if (retry != WNONE) {
    125c:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
		delay (-ret - 2, retry);
    1260:	bb033105 	bllt	cd67c <__ccfg+0xad6d4>
    1264:	01042002 	tsteq	r4, r2
    1268:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
    126c:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
		release;
    1270:	9b030505 	blls	c268c <__ccfg+0xa26e4>
    1274:	2d052e02 	stccs	14, cr2, [r5, #-8]
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
    127c:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
    1280:	03310509 	teqeq	r1, #37748736	; 0x2400000
    1284:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
    1288:	06020501 	streq	r0, [r2], -r1, lsl #10
		syserror (ERESOURCE, "mal1");
    128c:	2003dc03 	andcs	sp, r3, r3, lsl #24
    1290:	0179e703 	cmneq	r9, r3, lsl #14
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1294:	01070514 	tsteq	r7, r4, lsl r5
    1298:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a0:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a4:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a8:	2f060305 	svccs	0x00060305
    12ac:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
}
    12b0:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    12b4:	052f0603 	streq	r0, [pc, #-1539]!	; cb9 <__pi_release+0x89>
    12b8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    12bc:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
    12c0:	03290504 			; <UNDEFINED> instruction: 0x03290504
    12c4:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
void __pi_free (aword *ch) {
    12c8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	06380517 			; <UNDEFINED> instruction: 0x06380517
    12d0:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
		syserror (EMALLOC, "malg");
    12d4:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
    12d8:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
	mcfree [MA_NP] += m_size (ch);
    12dc:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		m_size (ch) ^= MALLOC_UMASK;
    12e0:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    12e4:	27032905 	strcs	r2, [r3, -r5, lsl #18]
	mcfree [MA_NP] += m_size (ch);
    12e8:	17050501 	strne	r0, [r5, -r1, lsl #10]
	QFREE;
    12ec:	01062d05 	tsteq	r6, r5, lsl #26
	if (mevent [MA_NP] . nwait) {
    12f0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    12f4:	3c560306 	mrrccc	3, 0, r0, r6, cr6
		trigger ((aword)(&(mevent [MA_NP])));
    12f8:	29050404 	stmdbcs	r5, {r2, sl}
		mevent [MA_NP] . nwait --;
    12fc:	0100db03 	tsteq	r0, r3, lsl #22
}
    1300:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1304:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1308:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    130c:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
void kill (aword pid) {
    1310:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
		pid = (aword) __pi_curr;
    1314:	06010602 	streq	r0, [r1], -r2, lsl #12
	j = NULL;
    1318:	2e069a03 	vmlacs.f32	s18, s12, s6
	for_all_tasks (i) {
    131c:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
	syserror (EREQPAR, "kpi");
    1320:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
    1324:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
		if ((aword)i == pid) {
    1328:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    132c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				__PCB = i->Next;
    1330:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
			killev (i);
    1334:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
			ufree (i);
    1338:	7a9a032d 	bvc	fe681ff4 <_estack+0xde67cff4>
			if (i == __pi_curr)
    133c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1340:	e6030602 	str	r0, [r3], -r2, lsl #12
				release;
    1344:	04042005 	streq	r2, [r4], #-5
				j->Next = i->Next;
    1348:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
    134c:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1350:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
}
    1354:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1358:	e6030602 	str	r0, [r3], -r2, lsl #12
    135c:	01012005 	tsteq	r1, r5
void killall (fsmcode fun) {
    1360:	01010101 	tsteq	r1, r1, lsl #2
	j = NULL;
    1364:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
	for (i = __PCB; i != NULL; ) {
    1368:	29050404 	stmdbcs	r5, {r2, sl}
			if (i == __pi_curr)
    136c:	017acb03 	cmneq	sl, r3, lsl #22
	for (i = __PCB; i != NULL; ) {
    1370:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	if (rel)
    1374:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		release;
    1378:	03020501 	movweq	r0, #9473	; 0x2501
		if (i->code == fun) {
    137c:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
    1380:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
			if (j == NULL)
    1384:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
				__PCB = k;
    1388:	06020501 	streq	r0, [r2], -r1, lsl #10
			if (i == __pi_curr)
    138c:	2005b003 	andcs	fp, r5, r3
				rel = YES;
    1390:	29050404 	stmdbcs	r5, {r2, sl}
			killev (i);
    1394:	017acb03 	cmneq	sl, r3, lsl #22
			ufree (i);
    1398:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			i = k;
    139c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    13a0:	06020501 	streq	r0, [r2], -r1, lsl #10
				j->Next = k;
    13a4:	2005b003 	andcs	fp, r5, r3
    13a8:	01010101 	tsteq	r1, r1, lsl #2
}
    13ac:	23050101 	movwcs	r0, #20737	; 0x5101
    13b0:	01100306 	tsteq	r0, r6, lsl #6
    13b4:	70030205 	andvc	r0, r3, r5, lsl #4
	if (size < 8)
    13b8:	01580620 	cmpeq	r8, r0, lsr #12
		_size = 2;
    13bc:	010d032e 	tsteq	sp, lr, lsr #6
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c0:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
		_size = (((aword)size) + 3) >> 2;
    13c4:	017ecd03 	cmneq	lr, r3, lsl #26
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	01062f05 	tsteq	r6, r5, lsl #30
		_size = (((aword)size) + 3) >> 2;
    13cc:	27050104 	strcs	r0, [r5, -r4, lsl #2]
		if (mevent [MA_NP] . nfail != 255)
    13d0:	2001ba03 	andcs	fp, r1, r3, lsl #20
    13d4:	2f050a04 	svccs	0x00050a04
			mevent [MA_NP] . nfail ++;
    13d8:	207ec603 	rsbscs	ip, lr, r3, lsl #12
		mnfree [MA_NP] = 0;
    13dc:	02050104 	andeq	r0, r5, #4, 2
    13e0:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	06230520 	strteq	r0, [r3], -r0, lsr #10
    13e8:	03020513 	movweq	r0, #9491	; 0x2513
			syserror (EMALLOC, "malc");
    13ec:	2305200c 	movwcs	r2, #20492	; 0x500c
    13f0:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
		if (m_size (chunk) >= _size)
    13f4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    13f8:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
		chunk = m_nextp (chunk)) {
    13fc:	27052802 	strcs	r2, [r5, -r2, lsl #16]
		m_setnextp (cc, m_nextp (chunk));
    1400:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1404:	3f280602 	svccc	0x00280602
    1408:	4a0a0331 	bmi	2820d4 <__ccfg+0x26212c>
			m_size (chunk) = _size;
    140c:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
			cc = chunk + _size + m_hdrlen;
    1410:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
    1414:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
			m_size (cc) = waste - m_hdrlen;
    1418:	017eae03 	cmneq	lr, r3, lsl #28
			QFREE;
    141c:	0d050104 	stfeqs	f0, [r5, #-16]
		mevent [MA_NP] . nfail = 0;
    1420:	01d40306 	bicseq	r0, r4, r6, lsl #6
		mcfree [MA_NP] -= m_size (chunk);
    1424:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    1428:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
    142c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1430:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
		m_size (chunk) |= MALLOC_UMASK;
    1434:	0d052001 	stceq	0, cr2, [r5, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1438:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		m_size (chunk) |= MALLOC_UMASK;
    143c:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
			mnfree [MA_NP] = mcfree [MA_NP];
    1440:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
}
    1444:	0605152e 	streq	r1, [r5], -lr, lsr #10
    1448:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    144c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1450:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
    1454:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
    1458:	030c0401 	movweq	r0, #50177	; 0xc401
    145c:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
aword __pi_fork (fsmcode func, aword data) {
    1460:	0b040106 	bleq	101880 <__ccfg+0xe18d8>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1464:	03060505 	movweq	r0, #25861	; 0x6505
    1468:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
    146c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if ((j = __PCB) == NULL)
    1470:	01044b06 	tsteq	r4, r6, lsl #22
	i->Next = NULL;
    1474:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
	i->data = data;
    1478:	03054a06 	movweq	r4, #23046	; 0x5a06
		if ((j = __PCB) == NULL)
    147c:	13040513 	movwne	r0, #17683	; 0x4513
}
    1480:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
			for (; j->Next != NULL; j = j->Next);
    1484:	cb031902 	blgt	c7894 <__ccfg+0xa78ec>
    1488:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
	return (aword) i;
    148c:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
    1490:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
	if (mevent [MA_NP] . nwait != 255)
    1494:	06230517 			; <UNDEFINED> instruction: 0x06230517
    1498:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    149c:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
		mevent [MA_NP] . nwait ++;
    14a0:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
	wait ((aword)(&(mevent [MA_NP])), state);
    14a4:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
    14a8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
void diag (const char *mess, ...) {
    14ac:	dd030602 	stcle	6, cr0, [r3, #-8]
    14b0:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
    14b4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
	diag_disable_int (a, is);
    14b8:	03052d02 	movweq	r2, #23810	; 0x5d02
    14bc:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
    14c0:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
				d = (bc == 16) ? 10000 : 1000000000;
    14c4:	03051306 	movweq	r1, #21254	; 0x5306
	diag_disable_int (a, is);
    14c8:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
	while (*mess != '\0') {
    14cc:	1f050101 	svcne	0x00050101
	dgout ('\r');
    14d0:	00020500 	andeq	r0, r2, r0, lsl #10
	dgout ('\n');
    14d4:	03000000 	movweq	r0, #0
    14d8:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
    14dc:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
	diag_wait (a);
    14e0:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
	diag_enable_int (a, is);
    14e4:	2c056615 	stccs	6, cr6, [r5], {21}
    14e8:	20150520 	andscs	r0, r5, r0, lsr #10
}
    14ec:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    14f0:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
    14f4:	03022301 	movweq	r2, #8961	; 0x2301
		if (*mess == '%') {
    14f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    14fc:	0205001c 	andeq	r0, r5, #28
			if (*mess == 'l') {
    1500:	00000000 	andeq	r0, r0, r0
    1504:	010adb03 	tsteq	sl, r3, lsl #22
				mess++;
    1508:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
				val = va_arg (ap, lword);
    150c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
				bc = 32;
    1510:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
				bc = 16;
    1514:	07052506 	streq	r2, [r5, -r6, lsl #10]
			switch (*mess) {
    1518:	58060520 	stmdapl	r6, {r5, r8, sl}
    151c:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1520:	01060605 	tsteq	r6, r5, lsl #12
				dgout ('%');
    1524:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
    1528:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
				dgout (*mess);
    152c:	06200602 	strteq	r0, [r0], -r2, lsl #12
    1530:	0601054d 	streq	r0, [r1], -sp, asr #10
			switch (*mess) {
    1534:	00040213 	andeq	r0, r4, r3, lsl r2
					v = __pi_hex_enc_table [
    1538:	31050101 	tstcc	r5, r1, lsl #2
					i += 4;
    153c:	30020500 	andcc	r0, r2, r0, lsl #10
					(val >> (bc - i)) & 0xf];
    1540:	0300000c 	movweq	r0, #12
    1544:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
					dgout (v);
    1548:	03041402 	movweq	r1, #17410	; 0x4402
    154c:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
				while (i < bc) {
    1550:	01040177 	tsteq	r4, r7, ror r1
			mess++;
    1554:	03063105 	movweq	r3, #24837	; 0x6105
					d /= 10;
    1558:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
				if ((val >> (bc - 1)) & 1) {
    155c:	03030503 	movweq	r0, #13571	; 0x3503
    1560:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
					dgout ('-');
    1564:	03310501 	teqeq	r1, #4194304	; 0x400000
    1568:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
						val |= 0xffff0000;
    156c:	03030503 	movweq	r0, #13571	; 0x3503
    1570:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
    1574:	06020501 	streq	r0, [r2], -r1, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
    157c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1580:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
					v = (word) (val / d);
    1584:	01046676 	tsteq	r4, r6, ror r6
					if (v || d == 1) break;
    1588:	03060205 	movweq	r0, #25093	; 0x6205
    158c:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
					d /= 10;
    1590:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
				d = (bc == 16) ? 10000 : 1000000000;
    1594:	19010101 	stmdbne	r1, {r0, r8}
					dgout (v + '0');
    1598:	01044a5b 	tsteq	r4, fp, asr sl
    159c:	03061a05 	movweq	r1, #27141	; 0x6a05
    15a0:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
					d /= 10;
    15a4:	0602050d 	streq	r0, [r2], -sp, lsl #10
					val = val - (v * d);
    15a8:	2076f903 	rsbscs	pc, r6, r3, lsl #18
					if (d == 0) break;
    15ac:	01010101 	tsteq	r1, r1, lsl #2
					v = (word) (val / d);
    15b0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    15b4:	01360303 	teqeq	r6, r3, lsl #6
				if (bc == 16)
    15b8:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
				d = (bc == 16) ? 10000 : 1000000000;
    15bc:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
					val &= 0xffff;
    15c0:	eb030104 	bl	c19d8 <__ccfg+0xa1a30>
					dgout (*s);
    15c4:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
					s++;
    15c8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				while (*s != '\0') {
    15cc:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
    15d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			dgout (*mess++);
    15d4:	20150520 	andscs	r0, r5, r0, lsr #10
    15d8:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    15dc:	216a0604 	cmncs	sl, r4, lsl #12
    15e0:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    15e4:	01778e03 	cmneq	r7, r3, lsl #28
}
    15e8:	03050304 	movweq	r0, #21252	; 0x5304
    while(1)
    15ec:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
{
    15f0:	0302050d 	movweq	r0, #9485	; 0x250d
    SetupTrimDevice();
    15f4:	20202055 	eorcs	r2, r0, r5, asr r0
    pui32Src = &_etext;
    15f8:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15fc:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
    __asm("    ldr     r0, =_bss\n"
    1600:	a6030305 	strge	r0, [r3], -r5, lsl #6
    1604:	10054a75 	andne	r4, r5, r5, ror sl
    1608:	06050106 	streq	r0, [r5], -r6, lsl #2
    160c:	20230520 	eorcs	r0, r3, r0, lsr #10
    1610:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
   main();
    1614:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    FaultISR();
    1618:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
        *pui32Dest++ = *pui32Src++;
    161c:	052f0604 	streq	r0, [pc, #-1540]!	; 1020 <update_n_wake+0x54>
    1620:	01041c02 	tsteq	r4, r2, lsl #24
    1624:	8f030405 	svchi	0x00030405
    1628:	2a052e09 	bcs	14ce54 <__ccfg+0x12ceac>
    162c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1630:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
    1634:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1638:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
static byte get_byte () {
    163c:	017fb203 	cmneq	pc, r3, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1640:	01062905 	tsteq	r6, r5, lsl #18
    1644:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1648:	00d10306 	sbcseq	r0, r1, r6, lsl #6
    164c:	02044d66 	andeq	r4, r4, #6528	; 0x1980
		if (ee_inp)
    1650:	9f030505 	svcls	0x00030505
			b |= 1;
    1654:	01040178 	tsteq	r4, r8, ror r1
    1658:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    165c:	1a052007 	bne	149680 <__ccfg+0x1296d8>
	for (b = 0, i = 0; i < 8; i++) {
    1660:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
    1664:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    1668:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    166c:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
static void put_byte (byte b) {
    1670:	03050502 	movweq	r0, #21762	; 0x5502
    1674:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
    1678:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
    167c:	06040501 	streq	r0, [r4], -r1, lsl #10
		if (b & 0x80)
    1680:	2007f103 	andcs	pc, r7, r3, lsl #2
    1684:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1688:	0178a003 	cmneq	r8, r3
	for (i = 0; i < 8; i++) {
    168c:	31050904 	tstcc	r5, r4, lsl #18
		b <<= 1;
    1690:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
	for (i = 0; i < 8; i++) {
    1694:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
}
    1698:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
    169c:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    16a0:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
    16a4:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
	put_byte (cmd);
    16a8:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
    16ac:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
}
    16b0:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
    16b4:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
static void wwait (word st, word del) {
    16b8:	a0033105 	andge	r3, r3, r5, lsl #2
    16bc:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    16c0:	06520515 			; <UNDEFINED> instruction: 0x06520515
	while (dopen && (rdsr () & 1)) {
    16c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    16c8:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
    16cc:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    16d0:	7a9b0352 	bvc	fe6c2420 <_estack+0xde6bd420>
	put_byte (CMD_RDSR);
    16d4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	r = get_byte ();
    16d8:	e0030604 	and	r0, r3, r4, lsl #12
    16dc:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
	while (dopen && (rdsr () & 1)) {
    16e0:	86030505 	strhi	r0, [r3], -r5, lsl #10
}
    16e4:	01040178 	tsteq	r4, r8, ror r1
		if (st == WNONE)
    16e8:	fc030405 	stc2	4, cr0, [r3], {5}
    16ec:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
			mdelay (1);
    16f0:	ea030505 	b	c2b0c <__ccfg+0xa2b64>
    16f4:	3105017a 	tstcc	r5, sl, ror r1
			delay (del, st);
    16f8:	29050106 	stmdbcs	r5, {r1, r2, r8}
    16fc:	2004b603 	andcs	fp, r4, r3, lsl #12
			release;
    1700:	ca033105 	bgt	cdb1c <__ccfg+0xadb74>
    1704:	01042e7b 	tsteq	r4, fp, ror lr
    1708:	03060405 	movweq	r0, #25605	; 0x6405
static void ready () {
    170c:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
	if (dopen) {
    1710:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
		wwait (WNONE, 1);
    1714:	6a062004 	bvs	18972c <__ccfg+0x169784>
    1718:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    171c:	01799f03 	cmneq	r9, r3, lsl #30
	dstat = 0;
    1720:	01063f05 	tsteq	r6, r5, lsl #30
}
    1724:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1728:	2006ed03 	andcs	lr, r6, r3, lsl #26
    172c:	3f050904 	svccc	0x00050904
	udelay (1);
    1730:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1734:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	udelay (1);
    1738:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
		dopen = DOPEN_TEMP;
    173c:	0309042e 	movweq	r0, #37934	; 0x942e
    1740:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1744:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1748:	03040501 	movweq	r0, #17665	; 0x4501
static void cclose () {
    174c:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
	if (dopen == DOPEN_TEMP) {
    1750:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1754:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
		wwait (WNONE, 1);
    1758:	06040501 	streq	r0, [r4], -r1, lsl #10
    175c:	4a00f303 	bmi	3e370 <__ccfg+0x1e3c8>
	cmd_0 (CMD_DP);
    1760:	0204404d 	andeq	r4, r4, #77	; 0x4d
    1764:	ea030505 	b	c2b80 <__ccfg+0xa2bd8>
		dopen = 0;
    1768:	01040177 	tsteq	r4, r7, ror r1
}
    176c:	99030405 	stmdbls	r3, {r0, r2, sl}
word ee_open () {
    1770:	1a052008 	bne	149798 <__ccfg+0x1297f0>
	ready ();
    1774:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	dopen = DOPEN_PERM;
    1778:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    177c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
}
    1780:	1a052304 	bne	14a398 <__ccfg+0x12a3f0>
	if (dopen) {
    1784:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    1788:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
		dopen = DOPEN_TEMP;
    178c:	017eee03 	cmneq	lr, r3, lsl #28
		cclose ();
    1790:	01062905 	tsteq	r6, r5, lsl #18
}
    1794:	0d050e04 	stceq	14, cr0, [r5, #-16]
int ser_in (word st, char *buf, int len) {
    1798:	2e7bdb03 	vaddcs.f64	d29, d11, d3
    179c:	29050904 	stmdbcs	r5, {r2, r8, fp}
	if (len == 0)
    17a0:	2004a503 	andcs	sl, r4, r3, lsl #10
	if (__inpline == NULL) {
    17a4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		if ((prcs = running (__inserial)) == 0) {
    17a8:	01970306 	orrseq	r0, r7, r6, lsl #6
    17ac:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
			prcs = runthread (__inserial);
    17b0:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    17b4:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
			if (prcs == 0) {
    17b8:	01065205 	tsteq	r6, r5, lsl #4
				npwait (st);
    17bc:	1a050104 	bne	141bd4 <__ccfg+0x121c2c>
		release;
    17c0:	068c0306 	streq	r0, [ip], r6, lsl #6
		join (prcs, st);
    17c4:	110a052e 	tstne	sl, lr, lsr #10
    17c8:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
	if (*__inpline == NULL) // bin cmd
    17cc:	017ac303 	cmneq	sl, r3, lsl #6
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17d0:	01060d05 	tsteq	r6, r5, lsl #26
	if (prcs >= len)
    17d4:	0a050104 	beq	141bec <__ccfg+0x121c44>
		prcs = len-1;
    17d8:	2005bd03 	andcs	fp, r5, r3, lsl #26
	memcpy (buf, __inpline, prcs);
    17dc:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    17e0:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    17e4:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
	ufree (__inpline);
    17e8:	110a0521 	tstne	sl, r1, lsr #10
	__inpline = NULL;
    17ec:	01060b05 	tsteq	r6, r5, lsl #22
	if (*buf) // if it's NULL, it's a bin cmd
    17f0:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
		buf [prcs] = '\0';
    17f4:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
}
    17f8:	03050509 	movweq	r0, #21769	; 0x5509
		prcs = strlen (__inpline);
    17fc:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
    1800:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
		return 0;
    1804:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
    1808:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    180c:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
int ser_outf (word st, const char *m, ...) {
    1810:	06040501 	streq	r0, [r4], -r1, lsl #10
    1814:	2005cb03 	andcs	ip, r5, r3, lsl #22
	if ((prcs = running (__outserial)) != 0) {
    1818:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    181c:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
		join (prcs, st);
    1820:	01063f05 	tsteq	r6, r5, lsl #30
    1824:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		release;
    1828:	07920306 	ldreq	r0, [r2, r6, lsl #6]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    182c:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1830:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
    1834:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		umwait (st);
    1838:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    183c:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
	if (runstrand (__outserial, buf) == 0) {
    1840:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
    1844:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    1848:	01040177 	tsteq	r4, r7, ror r1
		ufree (buf);
    184c:	ba030405 	blt	c2868 <__ccfg+0xa28c0>
		npwait (st);
    1850:	09032008 	stmdbeq	r3, {r3, sp}
}
    1854:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
    1858:	017db003 	cmneq	sp, r3
    185c:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1860:	017ed403 	cmneq	lr, r3, lsl #8
int ser_inf (word st, const char *fmt, ...) {
    1864:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1868:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
	if (fmt == NULL)
    186c:	03010501 	movweq	r0, #5377	; 0x1501
	if (__inpline == NULL) {
    1870:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
		if ((prcs = running (__inserial)) == 0) {
    1874:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
    1878:	055b2002 	ldrbeq	r2, [fp, #-2]
			prcs = runthread (__inserial);
    187c:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    1880:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
			if (prcs == 0) {
    1884:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
				npwait (st);
    1888:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
		release;
    188c:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
		join (prcs, st);
    1890:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
    1894:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
	va_start (ap, fmt);
    1898:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
	prcs = vscan (__inpline, fmt, ap);
    189c:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    18a0:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
	ufree (__inpline);
    18a4:	03050502 	movweq	r0, #21762	; 0x5502
	__inpline = NULL;
    18a8:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
}
    18ac:	03040501 	movweq	r0, #17665	; 0x4501
    18b0:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
    18b4:	0305050e 	movweq	r0, #21774	; 0x550e
		return 0;
    18b8:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
    18bc:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    18c0:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
strand (__outserial, const char*)
    18c4:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
    18c8:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
    18cc:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    18d0:	06040501 	streq	r0, [r4], -r1, lsl #10
endstrand
    18d4:	3c05f703 	stccc	7, cr15, [r5], {3}
    18d8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	ptr = data;
    18dc:	01778503 	cmneq	r7, r3, lsl #10
    18e0:	0d050e04 	stceq	14, cr0, [r5, #-16]
	if (*ptr)
    18e4:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
		len = strlen (ptr);
    18e8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    18ec:	96030639 			; <UNDEFINED> instruction: 0x96030639
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18f0:	0a052006 	beq	149910 <__ccfg+0x129968>
    18f4:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    18f8:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
    18fc:	060d0501 	streq	r0, [sp], -r1, lsl #10
    1900:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	len -= quant;
    1904:	0696030a 	ldreq	r0, [r6], sl, lsl #6
    1908:	06040520 	streq	r0, [r4], -r0, lsr #10
    190c:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
	if (len == 0) {
    1910:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
		ufree (data);
    1914:	06410501 	strbeq	r0, [r1], -r1, lsl #10
		finish;
    1918:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    191c:	08970304 	ldmeq	r7, {r2, r8, r9}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1920:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
    1924:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    1928:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    192c:	97030604 	strls	r0, [r3, -r4, lsl #12]
    1930:	04522008 	ldrbeq	r2, [r2], #-8
strand (__inserial, address)
    1934:	0302050d 	movweq	r0, #9485	; 0x250d
    1938:	4a2075d1 	bmi	81f084 <__ccfg+0x7ff0dc>
    193c:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
    1940:	03030503 	movweq	r0, #13571	; 0x3503
    1944:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
	if (__inpline != NULL)
    1948:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    194c:	37021620 	strcc	r1, [r2, -r0, lsr #12]
		finish;
    1950:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1954:	02050012 	andeq	r0, r5, #18
    1958:	00000000 	andeq	r0, r0, r0
    195c:	0100e103 	tsteq	r0, r3, lsl #2
    1960:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		umwait (IM_INIT);
    1964:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
		release;
    1968:	1f212202 	svcne	0x00212202
	savedata (data);
    196c:	4b2f2106 	blmi	bc9d8c <__ccfg+0xba9de4>
	len = MAX_LINE_LENGTH;
    1970:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
	io (IM_READ, __cport, READ, ptr, 1);
    1974:	06020501 	streq	r0, [r2], -r1, lsl #10
    1978:	0008022f 	andeq	r0, r8, pc, lsr #4
    197c:	3a050101 	bcc	141d88 <__ccfg+0x121de0>
    1980:	00020500 	andeq	r0, r2, r0, lsl #10
	if (ptr == (char*) data) { // new line
    1984:	03000000 	movweq	r0, #0
    1988:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
		if (*ptr == '\0') { // bin cmd
    198c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
			proceed (IM_BIN);
    1990:	200e063a 	andcs	r0, lr, sl, lsr r6
    1994:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
		if (*ptr < 0x20)
    1998:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
    199c:	06030524 	streq	r0, [r3], -r4, lsr #10
			proceed (IM_READ);
    19a0:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
    19a4:	06040501 	streq	r0, [r4], -r1, lsl #10
	if (*ptr == '\n' || *ptr == '\r') {
    19a8:	06120530 			; <UNDEFINED> instruction: 0x06120530
    19ac:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    19b0:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
		*ptr = '\0';
    19b4:	01060905 	tsteq	r6, r5, lsl #18
		__inpline = (char*)data;
    19b8:	2f050f04 	svccs	0x00050f04
		finish;
    19bc:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
	if (len) {
    19c0:	03090501 	movweq	r0, #38145	; 0x9501
		ptr++;
    19c4:	0305206b 	movweq	r2, #20587	; 0x506b
    19c8:	0f042106 	svceq	0x00042106
		len--;
    19cc:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
	proceed (IM_READ);
    19d0:	062f0501 	strteq	r0, [pc], -r1, lsl #10
	io (IM_BIN, __cport, READ, ptr, 1);
    19d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    19d8:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    19dc:	03060405 	movweq	r0, #25605	; 0x6405
    19e0:	0f04206f 	svceq	0x0004206f
    19e4:	c3030505 	movwgt	r0, #13573	; 0x3505
	len -= 2;
    19e8:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
	if (len > *ptr + 1) // 1 for 0x04
    19ec:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    19f0:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
		len = *ptr + 1;
    19f4:	060b0501 	streq	r0, [fp], -r1, lsl #10
    19f8:	017fb603 	cmneq	pc, r3, lsl #12
	ptr++;
    19fc:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a00:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    1a04:	062f050e 	strteq	r0, [pc], -lr, lsl #10
    1a08:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a0c:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    1a10:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1a14:	06053f04 	streq	r3, [r5], -r4, lsl #30
	len -= quant;
    1a18:	0604052b 	streq	r0, [r4], -fp, lsr #10
		__inpline = (char*)data;
    1a1c:	03052f23 	movweq	r2, #24355	; 0x5f23
		finish;
    1a20:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
	ptr += quant;
    1a24:	03051f09 	movweq	r1, #24329	; 0x5f09
    1a28:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
endstrand
    1a2c:	01010009 	tsteq	r1, r9
    1a30:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
	proceed (IM_BINL);
    1a34:	000e8802 	andeq	r8, lr, r2, lsl #16
endstrand
    1a38:	0af10300 	beq	ffc42640 <_estack+0xdfc3d640>
    1a3c:	16030501 	strne	r0, [r3], -r1, lsl #10
    1a40:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    1a44:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
    1a48:	26250520 	strtcs	r0, [r5], -r0, lsr #10
    1a4c:	051f0305 	ldreq	r0, [pc, #-773]	; 174f <cclose+0x3>
		if (res && (d < n))
    1a50:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1a54:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    1a58:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
    1a5c:	0305010f 	movweq	r0, #20751	; 0x510f
			res [d] = (char) c;
    1a60:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		d++;
    1a64:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
    1a68:	06207903 	strteq	r7, [r0], -r3, lsl #18
    1a6c:	5b5b3231 	blpl	16ce338 <__ccfg+0x16ae390>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a70:	01061c05 	tsteq	r6, r5, lsl #24
    1a74:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a78:	0c052302 	stceq	3, cr2, [r5], {2}
				enci (10000);
    1a7c:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a80:	03043e23 	movweq	r3, #20003	; 0x4e23
    1a84:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
	d = 0;
    1a88:	01040175 	tsteq	r4, r5, ror r1
		c = *fm++;
    1a8c:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
		if (c == '\\') {
    1a90:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
			if ((c = *fm++) == '\0') {
    1a94:	e0010100 	and	r0, r1, r0, lsl #2
    1a98:	0300000e 	movweq	r0, #14
				outc ('\\');
    1a9c:	00019000 	andeq	r9, r1, r0
			if ((c = *fm++) == '\0') {
    1aa0:	fb010200 	blx	422aa <__ccfg+0x22302>
				outc ('\\');
    1aa4:	01000d0e 	tsteq	r0, lr, lsl #26
    1aa8:	00010101 	andeq	r0, r1, r1, lsl #2
			outc (c);
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
			if (c == '\0')
    1ab4:	2f656d6f 	svccs	0x00656d6f
    1ab8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
			outc (c);
    1abc:	442f6e69 	strtmi	r6, [pc], #-3689	; 1ac4 <__pi_vfparse+0x54>
				outc (val);
    1ac0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				val = (word) va_arg (ap, aword);
    1ac4:	4f2f706f 	svcmi	0x002f706f
		if (c == '%') {
    1ac8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1acc:	502f5445 	eorpl	r5, pc, r5, asr #8
			c = *fm++;
    1ad0:	534f4349 	movtpl	r4, #62281	; 0xf349
			switch (c) {
    1ad4:	6369502f 	cmnvs	r9, #47	; 0x2f
    1ad8:	6b2f534f 	blvs	bd681c <__ccfg+0xbb6874>
    1adc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1ae0:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    1ae4:	2f656d6f 	svccs	0x00656d6f
    1ae8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1aec:	442f6e69 	strtmi	r6, [pc], #-3689	; 1af4 <__pi_vfparse+0x84>
    1af0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				outc ('%');
    1af4:	4f2f706f 	svcmi	0x002f706f
    1af8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				outc (c);
    1afc:	502f5445 	eorpl	r5, pc, r5, asr #8
    1b00:	534f4349 	movtpl	r4, #62281	; 0xf349
    1b04:	6369502f 	cmnvs	r9, #47	; 0x2f
				if (c == '\0')
    1b08:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
				return d;
    1b0c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
}
    1b10:	43432f58 	movtmi	r2, #16216	; 0x3f58
    1b14:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
			switch (c) {
    1b18:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    1b1c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    1b20:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
				for (i = 12; ; i -= 4) {
    1b24:	2f006269 	svccs	0x00006269
				val = (word) va_arg (ap, aword);
    1b28:	2f727375 	svccs	0x00727375
						[ (val >> i) & 0xf ]);
    1b2c:	2f62696c 	svccs	0x0062696c
    1b30:	2f636367 	svccs	0x00636367
    1b34:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
					outc (__pi_hex_enc_table
    1b38:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1b3c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
					if (i == 0)
    1b40:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    1b44:	2f312e32 	svccs	0x00312e32
				for (i = 12; ; i -= 4) {
    1b48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
				val = (word) va_arg (ap, aword);
    1b4c:	00656475 	rsbeq	r6, r5, r5, ror r4
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a9c <__pi_vfparse+0x2c>
				val = (word) va_arg (ap, aword);
    1b54:	616d2f65 	cmnvs	sp, r5, ror #30
				if (c == 'd' && (val & 0x8000) != 0) {
    1b58:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b5c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
					outc ('-');
    1b60:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b64:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
					val = (~val) + 1;
    1b68:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1b6c:	4349502f 	movtmi	r5, #36911	; 0x902f
				for (i = 12; ; i -= 4) {
    1b70:	502f534f 	eorpl	r5, pc, pc, asr #6
				enci (10000);
    1b74:	534f6369 	movtpl	r6, #62313	; 0xf369
    1b78:	3143432f 	cmpcc	r3, pc, lsr #6
    1b7c:	00585833 	subseq	r5, r8, r3, lsr r8
    1b80:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1acc <__pi_vfparse+0x5c>
    1b84:	616d2f65 	cmnvs	sp, r5, ror #30
    1b88:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b8c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1b90:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b94:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1b98:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1b9c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1ba0:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ba4:	534f6369 	movtpl	r6, #62313	; 0xf369
    1ba8:	656b0000 	strbvs	r0, [fp, #-0]!
    1bac:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1bb0:	0100632e 	tsteq	r0, lr, lsr #6
    1bb4:	61750000 	cmnvs	r5, r0
    1bb8:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
				if (c == 'd' || c == 'u') {
    1bbc:	00000200 	andeq	r0, r0, r0, lsl #4
    1bc0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
					if (c == 'd' &&
    1bc4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
					val = va_arg (ap, lword);
    1bc8:	00000300 	andeq	r0, r0, r0, lsl #6
					fm++;
    1bcc:	61647473 	smcvs	18243	; 0x4743
					if (c == 'd' &&
    1bd0:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    1bd4:	00000300 	andeq	r0, r0, r0, lsl #6
						outc ('-');
    1bd8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1bdc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
						val = (~val) + 1;
    1be0:	616d0000 	cmnvs	sp, r0
				enci (10000);
    1be4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
					enci (1000000000UL);
    1be8:	00000400 	andeq	r0, r0, r0, lsl #8
    1bec:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    1bf0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1bf4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1bf8:	75620000 	strbvc	r0, [r2, #-0]!
    1bfc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1c00:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c04:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1c08:	73000004 	movwvc	r0, #4
    1c0c:	6f697379 	svcvs	0x00697379
    1c10:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1c14:	656b0000 	strbvs	r0, [fp, #-0]!
    1c18:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1c1c:	0100682e 	tsteq	r0, lr, lsr #16
    1c20:	623c0000 	eorsvs	r0, ip, #0
    1c24:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    1c28:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
				} else if (c == 'x') {
    1c2c:	00000000 	andeq	r0, r0, r0
					for (i = 28; ; i -= 4) {
    1c30:	00260500 	eoreq	r0, r6, r0, lsl #10
					val = va_arg (ap, lword);
    1c34:	0ee80205 	cdpeq	2, 14, cr0, cr8, cr5, {0}
							[ (val >> i) & 0xf ]);
    1c38:	c3030000 	movwgt	r0, #12288	; 0x3000
    1c3c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
						outc (__pi_hex_enc_table
    1c40:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    1c44:	03062605 	movweq	r2, #26117	; 0x6605
    1c48:	02050178 	andeq	r0, r5, #120, 2
						if (i == 0)
    1c4c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    1c50:	02051f07 	andeq	r1, r5, #7, 30
					for (i = 28; ; i -= 4) {
    1c54:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
					outc ('%');
    1c58:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1c5c:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    1c60:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
					outc ('l');
    1c64:	2c060f05 	stccs	15, cr0, [r6], {5}
    1c68:	01060305 	tsteq	r6, r5, lsl #6
				val = (word) va_arg (ap, aword);
    1c6c:	2f060405 	svccs	0x00060405
				outc (val);
    1c70:	01061605 	tsteq	r6, r5, lsl #12
    1c74:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
				while (*st != '\0') {
    1c78:	4b310605 	blmi	c43494 <__ccfg+0xc234ec>
    1c7c:	7a030205 	bvc	c2498 <__ccfg+0xa24f0>
    1c80:	06010501 	streq	r0, [r1], -r1, lsl #10
    1c84:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
					outc (*st);
    1c88:	01010003 	tsteq	r1, r3
    1c8c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
					st++;
    1c90:	000f2402 	andeq	r2, pc, r2, lsl #8
		c = *fm++;
    1c94:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    1c98:	03020501 	movweq	r0, #9473	; 0x2501
    1c9c:	1314010d 	tstne	r4, #1073741827	; 0x40000003
char *vform (char *res, const char *fm, va_list aq) {
    1ca0:	01060d05 	tsteq	r6, r5, lsl #26
    1ca4:	70031f05 	andvc	r1, r3, r5, lsl #30
	if (res != NULL) {
    1ca8:	030d0520 	movweq	r0, #54560	; 0xd520
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	1f052e10 	svcne	0x00052e10
    1cb0:	02052006 	andeq	r2, r5, #6
    1cb4:	03060106 	movweq	r0, #24838	; 0x6106
}
    1cb8:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
    1cbc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
	fml = strlen (fm) + 17;
    1cc0:	1f051f05 	svcne	0x00051f05
    1cc4:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1cc8:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
	if ((res = (char*) umalloc (fml)) == NULL)
    1ccc:	060f0521 	streq	r0, [pc], -r1, lsr #10
    1cd0:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
    1cd4:	0f052306 	svceq	0x00052306
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd8:	01050106 	tsteq	r5, r6, lsl #2
    1cdc:	06030524 	streq	r0, [r3], -r4, lsr #10
    1ce0:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    1ce4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
		ufree (res);
    1ce8:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
		goto Again;
    1cec:	05213006 	streq	r3, [r1, #-6]!
	if (buf == NULL || fmt == NULL)
    1cf0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cf4:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
	if (buf == NULL || fmt == NULL)
    1cf8:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    1cfc:	0a050106 	beq	14211c <__ccfg+0x122174>
    1d00:	1f053406 	svcne	0x00053406
		    	    case 'u': scanu (lword); break;
    1d04:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
			while (isspace (*buf)) buf++;
    1d08:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1d0c:	10052f22 	andne	r2, r5, r2, lsr #30
	while (*fmt != '\0') {
    1d10:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if (*fmt++ != '%')
    1d14:	ac0b0306 	stcge	3, cr0, [fp], {6}
		switch (*fmt++) {
    1d18:	01060705 	tsteq	r6, r5, lsl #14
    1d1c:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
    1d20:	13060905 	movwne	r0, #26885	; 0x6905
    1d24:	01000702 	tsteq	r0, r2, lsl #14
    1d28:	001c0501 	andseq	r0, ip, r1, lsl #10
    1d2c:	0fa40205 	svceq	0x00a40205
    1d30:	c6030000 	strgt	r0, [r3], -r0
}
    1d34:	02050108 	andeq	r0, r5, #8, 2
		switch (*fmt++) {
    1d38:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    1d3c:	df03060d 	svcle	0x0003060d
    1d40:	0104017c 	tsteq	r4, ip, ror r1
    1d44:	03060f05 	movweq	r0, #28421	; 0x6f05
			while (isspace (*buf)) buf++;
    1d48:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    1d4c:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    1d50:	da032405 	ble	cad6c <__ccfg+0xaadc4>
    1d54:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    1d58:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    1d5c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			if (*buf == '\0')
    1d60:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
			if (*buf != ',') {
    1d64:	052f0620 	streq	r0, [pc, #-1568]!	; 174c <cclose>
			sap = va_arg (ap, char*);
    1d68:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
			nc++;
    1d6c:	01010005 	tsteq	r1, r5
			if (*buf != ',') {
    1d70:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
				while (!isspace (*buf) && *buf != ',' &&
    1d74:	00000002 	andeq	r0, r0, r2
    1d78:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    1d7c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1d80:	06270514 			; <UNDEFINED> instruction: 0x06270514
    1d84:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    1d88:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
    1d8c:	20062402 	andcs	r2, r6, r2, lsl #8
			while (isspace (*buf)) buf++;
    1d90:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
    1d94:	01060605 	tsteq	r6, r5, lsl #12
    1d98:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    1d9c:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
    1da0:	01000502 	tsteq	r0, r2, lsl #10
			if (*buf == ',') buf++;
    1da4:	001b0501 	andseq	r0, fp, r1, lsl #10
    1da8:	0fbc0205 	svceq	0x00bc0205
			*sap = '\0';
    1dac:	fa030000 	blx	c1db4 <__ccfg+0xa1e0c>
			break;
    1db0:	02050100 	andeq	r0, r5, #0, 2
		    case 'd': scani (word); break;
    1db4:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    1db8:	2102051f 	tstcs	r2, pc, lsl r5
    1dbc:	01000602 	tsteq	r0, r2, lsl #12
    1dc0:	001e0501 	andseq	r0, lr, r1, lsl #10
    1dc4:	00000205 	andeq	r0, r0, r5, lsl #4
    1dc8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    1dcc:	02050100 	andeq	r0, r5, #0, 2
    1dd0:	0e051416 	cfmvdlreq	mvd5, r1
    1dd4:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    1dd8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1ddc:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    1de0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1de4:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1de8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1dec:	1f052e06 	svcne	0x00052e06
    1df0:	20051f06 	andcs	r1, r5, r6, lsl #30
    1df4:	0e050106 	adfeqs	f0, f5, f6
    1df8:	02052006 	andeq	r2, r5, #6
    1dfc:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1e00:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1e04:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    1e08:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1e0c:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1e10:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e14:	02050021 	andeq	r0, r5, #33	; 0x21
    1e18:	00000000 	andeq	r0, r0, r0
    1e1c:	01018e03 	tsteq	r1, r3, lsl #28
    1e20:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
		    case 'u': scanu (word); break;
    1e24:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1e28:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    1e2c:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
    1e30:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    1e34:	01061205 	tsteq	r6, r5, lsl #4
    1e38:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1e3c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1e40:	06054b03 	streq	r4, [r5], -r3, lsl #22
    1e44:	1f050106 	svcne	0x00050106
    1e48:	20052b06 	andcs	r2, r5, r6, lsl #22
    1e4c:	0e050106 	adfeqs	f0, f5, f6
    1e50:	02052006 	andeq	r2, r5, #6
    1e54:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
    1e58:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    1e5c:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
    1e60:	2f030501 	svccs	0x00030501
    1e64:	01061f05 	tsteq	r6, r5, lsl #30
    1e68:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
		    case 'x': scanx (word); break;
    1e6c:	03052012 	movweq	r2, #20498	; 0x5012
    1e70:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1e74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e78:	0b053206 	bleq	14e698 <__ccfg+0x12e6f0>
    1e7c:	0601052e 	streq	r0, [r1], -lr, lsr #10
    1e80:	00070213 	andeq	r0, r7, r3, lsl r2
    1e84:	2a050101 	bcs	142290 <__ccfg+0x1222e8>
    1e88:	00020500 	andeq	r0, r2, r0, lsl #10
    1e8c:	03000000 	movweq	r0, #0
    1e90:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
    1e94:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    1e98:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e9c:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
    1ea0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1ea4:	0205002e 	andeq	r0, r5, #46	; 0x2e
    1ea8:	00000fcc 	andeq	r0, r0, ip, asr #31
    1eac:	0101ae03 	tsteq	r1, r3, lsl #28
    1eb0:	02052006 	andeq	r2, r5, #6
    1eb4:	200e0306 	andcs	r0, lr, r6, lsl #6
    1eb8:	01100313 	tsteq	r0, r3, lsl r3
    1ebc:	01060605 	tsteq	r6, r5, lsl #12
    1ec0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    1ec4:	09030602 	stmdbeq	r3, {r1, r9, sl}
    1ec8:	0606052e 	streq	r0, [r6], -lr, lsr #10
    1ecc:	58050501 	stmdapl	r5, {r0, r8, sl}
    1ed0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    1ed4:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    1ed8:	0302052e 	movweq	r0, #9518	; 0x252e
    1edc:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    1ee0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
			switch (*fmt++) {
    1ee4:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1ee8:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    1eec:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1ef0:	04052007 	streq	r2, [r5], #-7
    1ef4:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    1ef8:	07050106 	streq	r0, [r5, -r6, lsl #2]
		    	    case 'd': scani (lword); break;
    1efc:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    1f00:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    1f04:	0303053e 	movweq	r0, #13630	; 0x353e
    1f08:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    1f0c:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    1f10:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1f14:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1f18:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    1f1c:	17030603 	strne	r0, [r3, -r3, lsl #12]
    1f20:	06070566 	streq	r0, [r7], -r6, ror #10
    1f24:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1f28:	03060205 	movweq	r0, #25093	; 0x6205
    1f2c:	0b053c16 	bleq	150f8c <__ccfg+0x130fe4>
    1f30:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1f34:	01054006 	tsteq	r5, r6
    1f38:	010d0306 	tsteq	sp, r6, lsl #6
    1f3c:	73030205 	movwvc	r0, #12805	; 0x3205
    1f40:	0301052e 	movweq	r0, #5422	; 0x152e
    1f44:	0a022e0d 	beq	8d780 <__ccfg+0x6d7d8>
    1f48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1f4c:	0205001b 	andeq	r0, r5, #27
    1f50:	00001098 	muleq	r0, r8, r0
    1f54:	0102d203 	tsteq	r2, r3, lsl #4
		    	    case 'x': scanx (lword); break;
    1f58:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1f5c:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    1f60:	4b062202 	blmi	18a770 <__ccfg+0x16a7c8>
    1f64:	01000502 	tsteq	r0, r2, lsl #10
    1f68:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1f6c:	10ac0205 	adcne	r0, ip, r5, lsl #4
    1f70:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    1f74:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1f78:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    1f7c:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    1f80:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    1f84:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    1f88:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1f8c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1f90:	06014c02 	streq	r4, [r1], -r2, lsl #24
    1f94:	20061f3d 	andcs	r1, r6, sp, lsr pc
    1f98:	01051320 	tsteq	r5, r0, lsr #6
    1f9c:	06022106 	streq	r2, [r2], -r6, lsl #2
    1fa0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1fa4:	02050021 	andeq	r0, r5, #33	; 0x21
    1fa8:	000010e0 	andeq	r1, r0, r0, ror #1
    1fac:	0102e503 	tsteq	r2, r3, lsl #10
    1fb0:	13160205 	tstne	r6, #1342177280	; 0x50000000
    1fb4:	06210514 			; <UNDEFINED> instruction: 0x06210514
    1fb8:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    1fbc:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
    1fc0:	21061305 	tstcs	r6, r5, lsl #6
    1fc4:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
		    	    case 'd': scani (lword); break;
    1fc8:	0f052013 	svceq	0x00052013
    1fcc:	03054a06 	movweq	r4, #23046	; 0x5a06
    1fd0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1fd4:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    1fd8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1fdc:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    1fe0:	01050d02 	tsteq	r5, r2, lsl #26
		    	    case 'u': scanu (lword); break;
    1fe4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    1fe8:	01000302 	tsteq	r0, r2, lsl #6
    1fec:	002d0501 	eoreq	r0, sp, r1, lsl #10
    1ff0:	00000205 	andeq	r0, r0, r5, lsl #4
    1ff4:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1ff8:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1ffc:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    2000:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    2004:	02052001 	andeq	r2, r5, #1
    2008:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    200c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2010:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    2014:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2018:	01053c02 	tsteq	r5, r2, lsl #24
    201c:	06030533 			; <UNDEFINED> instruction: 0x06030533
    2020:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2024:	1f200501 	svcne	0x00200501
    2028:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
		    	    case 'x': scanx (lword); break;
    202c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2030:	0102641f 	tsteq	r2, pc, lsl r4
			if ((c = *buf++) == '\0')
    2034:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2038:	02050026 	andeq	r0, r5, #38	; 0x26
			sap = va_arg (ap, char*);
    203c:	00001114 	andeq	r1, r0, r4, lsl r1
			nc++;
    2040:	01038703 	tsteq	r3, r3, lsl #14
			break;
    2044:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
			while (isspace (*buf)) buf++;
    2048:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    204c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2050:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
						*sap++ = *buf++;
    2054:	03052806 	movweq	r2, #22534	; 0x5806
    2058:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
			while (isspace (*buf)) buf++;
    205c:	01060605 	tsteq	r6, r5, lsl #12
    2060:	30060405 	andcc	r0, r6, r5, lsl #8
    2064:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
		return 0;
    2068:	06020517 			; <UNDEFINED> instruction: 0x06020517
    206c:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
		    case 'x': scanx (word); break;
    2070:	01010004 	tsteq	r1, r4
    2074:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
		    	    case 'x': scanx (lword); break;
    2078:	00113802 	andseq	r3, r1, r2, lsl #16
    207c:	03990300 	orrseq	r0, r9, #0, 6
    2080:	16020501 	strne	r0, [r2], -r1, lsl #10
    2084:	0e062105 	adfeqs	f2, f6, f5
    2088:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    208c:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    2090:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    2094:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    2098:	20130520 	andscs	r0, r3, r0, lsr #10
    209c:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    20a0:	59060105 	stmdbpl	r6, {r0, r2, r8}
    20a4:	01000502 	tsteq	r0, r2, lsl #10
    20a8:	00140501 	andseq	r0, r4, r1, lsl #10
    20ac:	00000205 	andeq	r0, r0, r5, lsl #4
    20b0:	a7030000 	strge	r0, [r3, -r0]
    20b4:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    20b8:	06010516 			; <UNDEFINED> instruction: 0x06010516
    20bc:	00040267 	andeq	r0, r4, r7, ror #4
    20c0:	18050101 	stmdane	r5, {r0, r8}
    20c4:	00020500 	andeq	r0, r2, r0, lsl #10
    20c8:	03000000 	movweq	r0, #0
    20cc:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    20d0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    20d4:	200e0618 	andcs	r0, lr, r8, lsl r6
    20d8:	06240205 	strteq	r0, [r4], -r5, lsl #4
    20dc:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    20e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    20e4:	06050521 	streq	r0, [r5], -r1, lsr #10
    20e8:	06020501 	streq	r0, [r2], -r1, lsl #10
    20ec:	06120535 			; <UNDEFINED> instruction: 0x06120535
    20f0:	59010501 	stmdbpl	r1, {r0, r8, sl}
    20f4:	03060305 	movweq	r0, #25349	; 0x6305
    20f8:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    20fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2100:	0b052e17 	bleq	14d964 <__ccfg+0x12d9bc>
    2104:	0008023d 	andeq	r0, r8, sp, lsr r2
    2108:	1d050101 	stfnes	f0, [r5, #-4]
    210c:	00020500 	andeq	r0, r2, r0, lsl #10
    2110:	03000000 	movweq	r0, #0
    2114:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    2118:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    211c:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    2120:	03052405 	movweq	r2, #21509	; 0x5405
    2124:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2128:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    212c:	01053206 	tsteq	r5, r6, lsl #4
    2130:	03051306 	movweq	r1, #21254	; 0x5306
    2134:	06022b06 	streq	r2, [r2], -r6, lsl #22
    2138:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    213c:	0205001d 	andeq	r0, r5, #29
    2140:	00001170 	andeq	r1, r0, r0, ror r1
    2144:	01049e03 	tsteq	r4, r3, lsl #28
    2148:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    214c:	01060505 	tsteq	r6, r5, lsl #10
    2150:	2f060305 	svccs	0x00060305
    2154:	01060a05 	tsteq	r6, r5, lsl #20
    2158:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    215c:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2160:	06030525 	streq	r0, [r3], -r5, lsr #10
    2164:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2168:	06020501 	streq	r0, [r2], -r1, lsl #10
    216c:	0006023b 	andeq	r0, r6, fp, lsr r2
    2170:	1d050101 	stfnes	f0, [r5, #-4]
    2174:	00020500 	andeq	r0, r2, r0, lsl #10
    2178:	03000000 	movweq	r0, #0
    217c:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    2180:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2184:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    2188:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    218c:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    2190:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    2194:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    2198:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    219c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    21a0:	06051f02 	streq	r1, [r5], -r2, lsl #30
    21a4:	06040521 	streq	r0, [r4], -r1, lsr #10
    21a8:	06050521 	streq	r0, [r5], -r1, lsr #10
    21ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    21b0:	0004023a 	andeq	r0, r4, sl, lsr r2
    21b4:	21050101 	tstcs	r5, r1, lsl #2
    21b8:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    21bc:	03000011 	movweq	r0, #17
    21c0:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    21c4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    21c8:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    21cc:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    21d0:	02052006 	andeq	r2, r5, #6
    21d4:	01050106 	tsteq	r5, r6, lsl #2
    21d8:	06220531 			; <UNDEFINED> instruction: 0x06220531
    21dc:	011e051d 	tsteq	lr, sp, lsl r5
    21e0:	01061f05 	tsteq	r6, r5, lsl #30
    21e4:	01000202 	tsteq	r0, r2, lsl #4
    21e8:	002b0501 	eoreq	r0, fp, r1, lsl #10
    21ec:	00000205 	andeq	r0, r0, r5, lsl #4
    21f0:	c1030000 	mrsgt	r0, (UNDEF: 3)
    21f4:	02050104 	andeq	r0, r5, #4, 2
    21f8:	20200514 	eorcs	r0, r0, r4, lsl r5
    21fc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2200:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2204:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    2208:	2f01052e 	svccs	0x0001052e
    220c:	01000102 	tsteq	r0, r2, lsl #2
    2210:	00330501 	eorseq	r0, r3, r1, lsl #10
    2214:	00000205 	andeq	r0, r0, r5, lsl #4
    2218:	c6030000 	strgt	r0, [r3], -r0
    221c:	02050104 	andeq	r0, r5, #4, 2
    2220:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2224:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    2228:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    222c:	11052f01 	tstne	r5, r1, lsl #30
    2230:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
    2234:	2f060305 	svccs	0x00060305
    2238:	01060805 	tsteq	r6, r5, lsl #16
    223c:	01000302 	tsteq	r0, r2, lsl #6
    2240:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2244:	00000205 	andeq	r0, r0, r5, lsl #4
    2248:	cd030000 	stcgt	0, cr0, [r3, #-0]
    224c:	02050104 	andeq	r0, r5, #4, 2
    2250:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2254:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    2258:	01010002 	tsteq	r1, r2
    225c:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2260:	00000002 	andeq	r0, r0, r2
    2264:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    2268:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    226c:	01000302 	tsteq	r0, r2, lsl #6
    2270:	00370501 	eorseq	r0, r7, r1, lsl #10
    2274:	11a20205 			; <UNDEFINED> instruction: 0x11a20205
    2278:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    227c:	02050104 	andeq	r0, r5, #4, 2
    2280:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2284:	30060105 	andcc	r0, r6, r5, lsl #2
    2288:	1f060305 	svcne	0x00060305
    228c:	01060d05 	tsteq	r6, r5, lsl #26
    2290:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    2294:	01010003 	tsteq	r1, r3
    2298:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    229c:	00000002 	andeq	r0, r0, r2
    22a0:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    22a4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22a8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    22ac:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    22b0:	051f0603 	ldreq	r0, [pc, #-1539]	; 1cb5 <vform+0x15>
    22b4:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    22b8:	01010003 	tsteq	r1, r3
    22bc:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    22c0:	0011b802 	andseq	fp, r1, r2, lsl #16
    22c4:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    22c8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22cc:	10062b05 	andne	r2, r6, r5, lsl #22
    22d0:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    22d4:	06210603 	strteq	r0, [r1], -r3, lsl #12
    22d8:	06020531 			; <UNDEFINED> instruction: 0x06020531
    22dc:	060c052d 	streq	r0, [ip], -sp, lsr #10
    22e0:	20050501 	andcs	r0, r5, r1, lsl #10
    22e4:	2f060305 	svccs	0x00060305
    22e8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    22ec:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    22f0:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    22f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    22f8:	02050045 	andeq	r0, r5, #69	; 0x45
    22fc:	000011dc 	ldrdeq	r1, [r0], -ip
    2300:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    2304:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2308:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
    230c:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
    2310:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2314:	03054a19 	movweq	r4, #23065	; 0x5a19
    2318:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    231c:	0605054c 	streq	r0, [r5], -ip, asr #10
    2320:	06020501 	streq	r0, [r2], -r1, lsl #10
    2324:	060f0540 	streq	r0, [pc], -r0, asr #10
    2328:	06020501 	streq	r0, [r2], -r1, lsl #10
    232c:	0605054c 	streq	r0, [r5], -ip, asr #10
    2330:	06020501 	streq	r0, [r2], -r1, lsl #10
    2334:	06050531 			; <UNDEFINED> instruction: 0x06050531
    2338:	06030501 	streq	r0, [r3], -r1, lsl #10
    233c:	0606054f 	streq	r0, [r6], -pc, asr #10
    2340:	06030501 	streq	r0, [r3], -r1, lsl #10
    2344:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
    2348:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    234c:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2350:	01060505 	tsteq	r6, r5, lsl #10
    2354:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    2358:	01060605 	tsteq	r6, r5, lsl #12
    235c:	4b060405 	blmi	183378 <__ccfg+0x1633d0>
    2360:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2364:	06030501 	streq	r0, [r3], -r1, lsl #10
    2368:	060a0569 	streq	r0, [sl], -r9, ror #10
    236c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2370:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2374:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    2378:	20290301 	eorcs	r0, r9, r1, lsl #6
    237c:	03060205 	movweq	r0, #25093	; 0x6205
    2380:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2384:	03050106 	movweq	r0, #20742	; 0x5106
    2388:	02752f06 	rsbseq	r2, r5, #6, 30
    238c:	01010005 	tsteq	r1, r5
    2390:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    2394:	00127802 	andseq	r7, r2, r2, lsl #16
    2398:	05ef0300 	strbeq	r0, [pc, #768]!	; 26a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>
    239c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    23a0:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    23a4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    23a8:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    23ac:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    23b0:	580c0520 	stmdapl	ip, {r5, r8, sl}
    23b4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    23b8:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    23bc:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    23c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23c4:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    23c8:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    23cc:	2016052b 	andscs	r0, r6, fp, lsr #10
    23d0:	21060205 	tstcs	r6, r5, lsl #4
    23d4:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    23d8:	31060205 	tstcc	r6, r5, lsl #4
    23dc:	01061a05 	tsteq	r6, r5, lsl #20
    23e0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    23e4:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    23e8:	01000d02 	tsteq	r0, r2, lsl #26
    23ec:	001c0501 	andseq	r0, ip, r1, lsl #10
    23f0:	12c80205 	sbcne	r0, r8, #1342177280	; 0x50000000
    23f4:	fb030000 	blx	c23fe <__ccfg+0xa2456>
    23f8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23fc:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2400:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2404:	03050501 	movweq	r0, #21761	; 0x5501
    2408:	0205200c 	andeq	r2, r5, #12
    240c:	07052506 	streq	r2, [r5, -r6, lsl #10]
    2410:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2414:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2418:	11054c2f 	tstne	r5, pc, lsr #24
    241c:	0f051606 	svceq	0x00051606
    2420:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    2424:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    2428:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    242c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2430:	30300602 	eorscc	r0, r0, r2, lsl #12
    2434:	01061505 	tsteq	r6, r5, lsl #10
    2438:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    243c:	2f2f0603 	svccs	0x002f0603
    2440:	01061a05 	tsteq	r6, r5, lsl #20
    2444:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    2448:	01010008 	tsteq	r1, r8
    244c:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    2450:	00131002 	andseq	r1, r3, r2
    2454:	03d80300 	bicseq	r0, r8, #0, 6
    2458:	16020501 	strne	r0, [r2], -r1, lsl #10
    245c:	06170514 			; <UNDEFINED> instruction: 0x06170514
    2460:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2464:	03052605 	movweq	r2, #22021	; 0x5605
    2468:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    246c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2470:	06020520 	streq	r0, [r2], -r0, lsr #10
    2474:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
    2478:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    247c:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
    2480:	0305200f 	movweq	r2, #20495	; 0x500f
    2484:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    2488:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    248c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2490:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2494:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2498:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    249c:	3d230604 	stccc	6, cr0, [r3, #-16]!
    24a0:	060a052f 	streq	r0, [sl], -pc, lsr #10
    24a4:	20070501 	andcs	r0, r7, r1, lsl #10
    24a8:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    24ac:	060d052a 	streq	r0, [sp], -sl, lsr #10
    24b0:	03010501 	movweq	r0, #5377	; 0x1501
    24b4:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    24b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24bc:	0205001c 	andeq	r0, r5, #28
    24c0:	00001360 	andeq	r1, r0, r0, ror #6
    24c4:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    24c8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    24cc:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    24d0:	7703061c 	smladvc	r3, ip, r6, r0
    24d4:	36040501 	strcc	r0, [r4], -r1, lsl #10
    24d8:	051f0605 	ldreq	r0, [pc, #-1541]	; 1edb <vscan+0x1eb>
    24dc:	1c052209 	sfmne	f2, 4, [r5], {9}
    24e0:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    24e4:	2010030a 	andscs	r0, r0, sl, lsl #6
    24e8:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    24ec:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    24f0:	06020520 	streq	r0, [r2], -r0, lsr #10
    24f4:	11030601 	tstne	r3, r1, lsl #12
    24f8:	06050520 	streq	r0, [r5], -r0, lsr #10
    24fc:	06030501 	streq	r0, [r3], -r1, lsl #10
    2500:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    2504:	01060605 	tsteq	r6, r5, lsl #12
    2508:	59060405 	stmdbpl	r6, {r0, r2, sl}
    250c:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2510:	06050501 	streq	r0, [r5], -r1, lsl #10
    2514:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2518:	06040501 	streq	r0, [r4], -r1, lsl #10
    251c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2520:	2f090501 	svccs	0x00090501
    2524:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    2528:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    252c:	060d0545 	streq	r0, [sp], -r5, asr #10
    2530:	03010501 	movweq	r0, #5377	; 0x1501
    2534:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    2538:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    253c:	02050020 	andeq	r0, r5, #32
    2540:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    2544:	0107a203 	tsteq	r7, r3, lsl #4
    2548:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    254c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2550:	06030501 	streq	r0, [r3], -r1, lsl #10
    2554:	06090525 	streq	r0, [r9], -r5, lsr #10
    2558:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
    255c:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
    2560:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    2564:	2070031a 	rsbscs	r0, r0, sl, lsl r3
    2568:	10030d05 	andne	r0, r3, r5, lsl #26
    256c:	2306052e 	movwcs	r0, #25902	; 0x652e
    2570:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2574:	06020520 	streq	r0, [r2], -r0, lsr #10
    2578:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
    257c:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
    2580:	06010602 	streq	r0, [r1], -r2, lsl #12
    2584:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2588:	01190303 	tsteq	r9, r3, lsl #6
    258c:	01061605 	tsteq	r6, r5, lsl #12
    2590:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2594:	052f0604 	streq	r0, [pc, #-1540]!	; 1f98 <vscan+0x2a8>
    2598:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    259c:	0d030603 	stceq	6, cr0, [r3, #-12]
    25a0:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    25a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    25a8:	06090540 	streq	r0, [r9], -r0, asr #10
    25ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    25b0:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    25b4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    25b8:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    25bc:	06054c03 	streq	r4, [r5], -r3, lsl #24
    25c0:	2e050106 	adfcss	f0, f5, f6
    25c4:	4a7a0306 	bmi	1e831e4 <__ccfg+0x1e6323c>
    25c8:	13060905 	movwne	r0, #26885	; 0x6905
    25cc:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
    25d0:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    25d4:	01060e05 	tsteq	r6, r5, lsl #28
    25d8:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    25dc:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    25e0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    25e4:	052f0604 	streq	r0, [pc, #-1540]!	; 1fe8 <vscan+0x2f8>
    25e8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    25ec:	04052007 	streq	r2, [r5], #-7
    25f0:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    25f4:	10050106 	andne	r0, r5, r6, lsl #2
    25f8:	06040520 	streq	r0, [r4], -r0, lsr #10
    25fc:	2e090530 	cfmv64hrcs	mvdx9, r0
    2600:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2604:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2608:	1a053012 	bne	14e658 <__ccfg+0x12e6b0>
    260c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2610:	06150522 	ldreq	r0, [r5], -r2, lsr #10
    2614:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    2618:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    261c:	01060e05 	tsteq	r6, r5, lsl #28
    2620:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2624:	12052906 	andne	r2, r5, #98304	; 0x18000
    2628:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    262c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2630:	01061305 	tsteq	r6, r5, lsl #6
    2634:	31060305 	tstcc	r6, r5, lsl #6
    2638:	03060105 	movweq	r0, #24837	; 0x6105
    263c:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2640:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2644:	0205002c 	andeq	r0, r5, #44	; 0x2c
    2648:	00001460 	andeq	r1, r0, r0, ror #8
    264c:	0102ab03 	tsteq	r2, r3, lsl #22
    2650:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2654:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    2658:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    265c:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
    2660:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
    2664:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2668:	060a0523 	streq	r0, [sl], -r3, lsr #10
    266c:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2670:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2674:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    2678:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    267c:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2680:	13140305 	tstne	r4, #335544320	; 0x14000000
    2684:	01060605 	tsteq	r6, r5, lsl #12
    2688:	21060405 	tstcs	r6, r5, lsl #8
    268c:	01060a05 	tsteq	r6, r5, lsl #20
    2690:	0f030105 	svceq	0x00030105
    2694:	060b0520 	streq	r0, [fp], -r0, lsr #10
    2698:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    269c:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    26a0:	2f062004 	svccs	0x00062004
    26a4:	01060c05 	tsteq	r6, r5, lsl #24
    26a8:	03060205 	movweq	r0, #25093	; 0x6205
    26ac:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    26b0:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    26b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26b8:	02050020 	andeq	r0, r5, #32
    26bc:	00001494 	muleq	r0, r4, r4
    26c0:	01088103 	tsteq	r8, r3, lsl #2
    26c4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26c8:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    26cc:	03200501 			; <UNDEFINED> instruction: 0x03200501
    26d0:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
    26d4:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    26d8:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    26dc:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    26e0:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    26e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    26e8:	0004023e 	andeq	r0, r4, lr, lsr r2
    26ec:	21050101 	tstcs	r5, r1, lsl #2
    26f0:	00020500 	andeq	r0, r2, r0, lsl #10
    26f4:	03000000 	movweq	r0, #0
    26f8:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    26fc:	01090302 	tsteq	r9, r2, lsl #6
    2700:	03062105 	movweq	r2, #24837	; 0x6105
    2704:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    2708:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    270c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2710:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2714:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    2718:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
    271c:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    2720:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
    2724:	09051402 	stmdbeq	r5, {r1, sl, ip}
    2728:	01050106 	tsteq	r5, r6, lsl #2
    272c:	0006025a 	andeq	r0, r6, sl, asr r2
    2730:	20050101 	andcs	r0, r5, r1, lsl #2
    2734:	00020500 	andeq	r0, r2, r0, lsl #10
    2738:	03000000 	movweq	r0, #0
    273c:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2740:	01090302 	tsteq	r9, r2, lsl #6
    2744:	20051413 	andcs	r1, r5, r3, lsl r4
    2748:	01740306 	cmneq	r4, r6, lsl #6
    274c:	0c031d05 	stceq	13, cr1, [r3], {5}
    2750:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
    2754:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2758:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    275c:	06010602 	streq	r0, [r1], -r2, lsl #12
    2760:	06050524 	streq	r0, [r5], -r4, lsr #10
    2764:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2768:	06070521 	streq	r0, [r7], -r1, lsr #10
    276c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2770:	0609054c 	streq	r0, [r9], -ip, asr #10
    2774:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    2778:	03060305 	movweq	r0, #25349	; 0x6305
    277c:	23052e79 	movwcs	r2, #24185	; 0x5e79
    2780:	06052d06 	streq	r2, [r5], -r6, lsl #26
    2784:	0e054a06 	vmlaeq.f32	s8, s10, s12
    2788:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    278c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2790:	02050023 	andeq	r0, r5, #35	; 0x23
    2794:	000014ac 	andeq	r1, r0, ip, lsr #9
    2798:	01098103 	tsteq	r9, r3, lsl #2
    279c:	13410205 	movtne	r0, #4613	; 0x1205
    27a0:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    27a4:	03062305 	movweq	r2, #25349	; 0x6305
    27a8:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    27ac:	1f3c0c03 	svcne	0x003c0c03
    27b0:	01012106 	tsteq	r1, r6, lsl #2
    27b4:	03060805 	movweq	r0, #26629	; 0x6805
    27b8:	02052028 	andeq	r2, r5, #40	; 0x28
    27bc:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    27c0:	2023031c 	eorcs	r0, r3, ip, lsl r3
    27c4:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    27c8:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    27cc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    27d0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    27d4:	02052008 	andeq	r2, r5, #8
    27d8:	00c70306 	sbceq	r0, r7, r6, lsl #6
    27dc:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    27e0:	060d0502 	streq	r0, [sp], -r2, lsl #10
    27e4:	017bcf03 	cmneq	fp, r3, lsl #30
    27e8:	0f050104 	svceq	0x00050104
    27ec:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    27f0:	01020520 	tsteq	r2, r0, lsr #10
    27f4:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    27f8:	017bca03 	cmneq	fp, r3, lsl #20
    27fc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2800:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    2804:	03020501 	movweq	r0, #9473	; 0x2501
    2808:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    280c:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    2810:	13060105 	movwne	r0, #24837	; 0x6105
    2814:	03060305 	movweq	r0, #25349	; 0x6305
    2818:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    281c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2820:	134b0604 	movtne	r0, #46596	; 0xb604
    2824:	20060705 	andcs	r0, r6, r5, lsl #14
    2828:	4b060505 	blmi	183c44 <__ccfg+0x163c9c>
    282c:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2830:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2834:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    2838:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    283c:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2840:	0f060805 	svceq	0x00060805
    2844:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    2848:	31030505 	tstcc	r3, r5, lsl #10
    284c:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    2850:	4a4e0306 	bmi	1383470 <__ccfg+0x13634c8>
    2854:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    2858:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    285c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2860:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    2864:	11060b05 	tstne	r6, r5, lsl #22
    2868:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    286c:	0b052f06 	bleq	14e48c <__ccfg+0x12e4e4>
    2870:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    2874:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    2878:	03010608 	movweq	r0, #5640	; 0x1608
    287c:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    2880:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2884:	06150513 			; <UNDEFINED> instruction: 0x06150513
    2888:	200e0501 	andcs	r0, lr, r1, lsl #10
    288c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2890:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 2880 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x58>
    2894:	01060905 	tsteq	r6, r5, lsl #18
    2898:	21060705 	tstcs	r6, r5, lsl #14
    289c:	01060b05 	tsteq	r6, r5, lsl #22
    28a0:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    28a4:	01060a05 	tsteq	r6, r5, lsl #20
    28a8:	23060505 	movwcs	r0, #25861	; 0x6505
    28ac:	01061c05 	tsteq	r6, r5, lsl #24
    28b0:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    28b4:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    28b8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    28bc:	06052e08 	streq	r2, [r5], -r8, lsl #28
    28c0:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    28c4:	0c050106 	stfeqs	f0, [r5], {6}
    28c8:	06060520 	streq	r0, [r6], -r0, lsr #10
    28cc:	0608052f 	streq	r0, [r8], -pc, lsr #10
    28d0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    28d4:	0608052a 	streq	r0, [r8], -sl, lsr #10
    28d8:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    28dc:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    28e0:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    28e4:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    28e8:	051f0805 	ldreq	r0, [pc, #-2053]	; 20eb <TrimAfterColdResetWakeupFromShutDown+0x13>
    28ec:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    28f0:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    28f4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    28f8:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    28fc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2900:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    2904:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    2908:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    290c:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    2910:	06080520 	streq	r0, [r8], -r0, lsr #10
    2914:	06060501 	streq	r0, [r6], -r1, lsl #10
    2918:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    291c:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    2920:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
    2924:	03060505 	movweq	r0, #25861	; 0x6505
    2928:	0605206e 	streq	r2, [r5], -lr, rrx
    292c:	2f201703 	svccs	0x00201703
    2930:	01060705 	tsteq	r6, r5, lsl #14
    2934:	1e060b05 	vmlane.f64	d0, d6, d5
    2938:	01060c05 	tsteq	r6, r5, lsl #24
    293c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2940:	0c030604 	stceq	6, cr0, [r3], {4}
    2944:	000b023c 	andeq	r0, fp, ip, lsr r2
    2948:	0f050101 	svceq	0x00050101
    294c:	00020500 	andeq	r0, r2, r0, lsl #10
    2950:	03000000 	movweq	r0, #0
    2954:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    2958:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    295c:	18050106 	stmdane	r5, {r1, r2, r8}
    2960:	2025052e 	eorcs	r0, r5, lr, lsr #10
    2964:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    2968:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    296c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2970:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
    2974:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    2978:	b7010100 	strlt	r0, [r1, -r0, lsl #2]
    297c:	0300000c 	movweq	r0, #12
    2980:	0001a100 	andeq	sl, r1, r0, lsl #2
    2984:	fb010200 	blx	4318e <__ccfg+0x231e6>
    2988:	01000d0e 	tsteq	r0, lr, lsl #26
    298c:	00010101 	andeq	r0, r1, r1, lsl #2
    2990:	00010000 	andeq	r0, r1, r0
    2994:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2998:	2f656d6f 	svccs	0x00656d6f
    299c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    29a0:	442f6e69 	strtmi	r6, [pc], #-3689	; 29a8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x180>
    29a4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    29a8:	4f2f706f 	svcmi	0x002f706f
    29ac:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    29b0:	502f5445 	eorpl	r5, pc, r5, asr #8
    29b4:	534f4349 	movtpl	r4, #62281	; 0xf349
    29b8:	6369502f 	cmnvs	r9, #47	; 0x2f
    29bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    29c0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    29c4:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    29c8:	2f004974 	svccs	0x00004974
    29cc:	2f727375 	svccs	0x00727375
    29d0:	2f62696c 	svccs	0x0062696c
    29d4:	2f636367 	svccs	0x00636367
    29d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    29dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    29e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    29e4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    29e8:	2f312e32 	svccs	0x00312e32
    29ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    29f0:	00656475 	rsbeq	r6, r5, r5, ror r4
    29f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2940 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x118>
    29f8:	616d2f65 	cmnvs	sp, r5, ror #30
    29fc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a00:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a04:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a08:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a0c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a10:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a14:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a18:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a1c:	3143432f 	cmpcc	r3, pc, lsr #6
    2a20:	00585833 	subseq	r5, r8, r3, lsr r8
    2a24:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2970 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x148>
    2a28:	616d2f65 	cmnvs	sp, r5, ror #30
    2a2c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a30:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a34:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a38:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a3c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a40:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a44:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a48:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a4c:	6f682f00 	svcvs	0x00682f00
    2a50:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 28a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x7c>
    2a54:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2a58:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2a5c:	6f746b73 	svcvs	0x00746b73
    2a60:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2a64:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2a68:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a6c:	2f534f43 	svccs	0x00534f43
    2a70:	4f636950 	svcmi	0x00636950
    2a74:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    2a78:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2a7c:	63740000 	cmnvs	r4, #0
    2a80:	00632e76 	rsbeq	r2, r3, r6, ror lr
    2a84:	73000001 	movwvc	r0, #1
    2a88:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2a8c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2a90:	73000002 	movwvc	r0, #2
    2a94:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2a98:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2a9c:	61000002 	tstvs	r0, r2
    2aa0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    2aa4:	00030068 	andeq	r0, r3, r8, rrx
    2aa8:	63616d00 	cmnvs	r1, #0, 26
    2aac:	00682e68 	rsbeq	r2, r8, r8, ror #28
    2ab0:	70000003 	andvc	r0, r0, r3
    2ab4:	5f736e69 	svcpl	0x00736e69
    2ab8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2abc:	00030068 	andeq	r0, r3, r8, rrx
    2ac0:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    2ac4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    2ac8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2acc:	0300682e 	movweq	r6, #2094	; 0x82e
    2ad0:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    2ad4:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    2ad8:	00040068 	andeq	r0, r4, r8, rrx
    2adc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2ae0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2ae4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2ae8:	6b000001 	blvs	2af4 <NOROM_ChipInfo_GetChipFamily+0x34>
    2aec:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2af0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    2af4:	74000005 	strvc	r0, [r0], #-5
    2af8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    2afc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2b00:	00000100 	andeq	r0, r0, r0, lsl #2
    2b04:	5f766374 	svcpl	0x00766374
    2b08:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    2b0c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2b10:	00682e61 	rsbeq	r2, r8, r1, ror #28
    2b14:	3c000001 	stccc	0, cr0, [r0], {1}
    2b18:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2b1c:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    2b20:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b24:	31050000 	mrscc	r0, (UNDEF: 5)
    2b28:	00020500 	andeq	r0, r2, r0, lsl #10
    2b2c:	03000000 	movweq	r0, #0
    2b30:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    2b34:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    2b38:	03063105 	movweq	r3, #24837	; 0x6105
    2b3c:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    2b40:	16052607 	strne	r2, [r5], -r7, lsl #12
    2b44:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    2b48:	26060205 	strcs	r0, [r6], -r5, lsl #4
    2b4c:	13061a05 	movwne	r1, #27141	; 0x6a05
    2b50:	051f0e05 	ldreq	r0, [pc, #-3589]	; 1d53 <vscan+0x63>
    2b54:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2b58:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2b5c:	0c030602 	stceq	6, cr0, [r3], {2}
    2b60:	06010520 	streq	r0, [r1], -r0, lsr #10
    2b64:	00010216 	andeq	r0, r1, r6, lsl r2
    2b68:	2e050101 	adfcss	f0, f5, f1
    2b6c:	00020500 	andeq	r0, r2, r0, lsl #10
    2b70:	03000000 	movweq	r0, #0
    2b74:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    2b78:	06051602 	streq	r1, [r5], -r2, lsl #12
    2b7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2b80:	06030520 	streq	r0, [r3], -r0, lsr #10
    2b84:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    2b88:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    2b8c:	21060305 	tstcs	r6, r5, lsl #6
    2b90:	01062905 	tsteq	r6, r5, lsl #18
    2b94:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    2b98:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b9c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2ba0:	01024c01 	tsteq	r2, r1, lsl #24
    2ba4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2ba8:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2bac:	00000000 	andeq	r0, r0, r0
    2bb0:	01028303 	tsteq	r2, r3, lsl #6
    2bb4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2bb8:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    2bbc:	2f062402 	svccs	0x00062402
    2bc0:	01130101 	tsteq	r3, r1, lsl #2
    2bc4:	01051401 	tsteq	r5, r1, lsl #8
    2bc8:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    2bcc:	0002022d 	andeq	r0, r2, sp, lsr #4
    2bd0:	3a050101 	bcc	142fdc <__ccfg+0x123034>
    2bd4:	00020500 	andeq	r0, r2, r0, lsl #10
    2bd8:	03000000 	movweq	r0, #0
    2bdc:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    2be0:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    2be4:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    2be8:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    2bec:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    2bf0:	20062402 	andcs	r2, r6, r2, lsl #8
    2bf4:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    2bf8:	03050106 	movweq	r0, #20742	; 0x5106
    2bfc:	02053d06 	andeq	r3, r5, #384	; 0x180
    2c00:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2c04:	20050501 	andcs	r0, r5, r1, lsl #10
    2c08:	30060305 	andcc	r0, r6, r5, lsl #6
    2c0c:	01061705 	tsteq	r6, r5, lsl #14
    2c10:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    2c14:	052f0603 	streq	r0, [pc, #-1539]!	; 2619 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xdd>
    2c18:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2c1c:	03052011 	movweq	r2, #20497	; 0x5011
    2c20:	0b052106 	bleq	14b040 <__ccfg+0x12b098>
    2c24:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c28:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    2c2c:	01050106 	tsteq	r5, r6, lsl #2
    2c30:	0603054b 	streq	r0, [r3], -fp, asr #10
    2c34:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    2c38:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    2c3c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c40:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2c44:	03052014 	movweq	r2, #20500	; 0x5014
    2c48:	11052106 	tstne	r5, r6, lsl #2
    2c4c:	03050106 	movweq	r0, #20742	; 0x5106
    2c50:	0b052106 	bleq	14b070 <__ccfg+0x12b0c8>
    2c54:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    2c58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c5c:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2c60:	00000000 	andeq	r0, r0, r0
    2c64:	0101df03 	tsteq	r1, r3, lsl #30
    2c68:	02052006 	andeq	r2, r5, #6
    2c6c:	20090306 	andcs	r0, r9, r6, lsl #6
    2c70:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
    2c74:	01061b05 	tsteq	r6, r5, lsl #22
    2c78:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2c7c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2c80:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2c84:	133c7903 	teqne	ip, #49152	; 0xc000
    2c88:	03060105 	movweq	r0, #24837	; 0x6105
    2c8c:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    2c90:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    2c94:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    2c98:	06040501 	streq	r0, [r4], -r1, lsl #10
    2c9c:	2e90014c 	fmlcssm	f0, f0, #4.0
    2ca0:	01055b13 	tsteq	r5, r3, lsl fp
    2ca4:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    2ca8:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    2cac:	0c023601 	stceq	6, cr3, [r2], {1}
    2cb0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2cb4:	02050031 	andeq	r0, r5, #49	; 0x31
    2cb8:	00000000 	andeq	r0, r0, r0
    2cbc:	0102ba03 	tsteq	r2, r3, lsl #20
    2cc0:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    2cc4:	03063105 	movweq	r3, #24837	; 0x6105
    2cc8:	06050178 			; <UNDEFINED> instruction: 0x06050178
    2ccc:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2cd0:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    2cd4:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    2cd8:	03050106 	movweq	r0, #20742	; 0x5106
    2cdc:	06012f06 	streq	r2, [r1], -r6, lsl #30
    2ce0:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    2ce4:	133b0621 	teqne	fp, #34603008	; 0x2100000
    2ce8:	4a660601 	bmi	19844f4 <__ccfg+0x196454c>
    2cec:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2cf0:	03060105 	movweq	r0, #24837	; 0x6105
    2cf4:	03053c09 	movweq	r3, #23561	; 0x5c09
    2cf8:	062e7703 	strteq	r7, [lr], -r3, lsl #14
    2cfc:	06010536 			; <UNDEFINED> instruction: 0x06010536
    2d00:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
    2d04:	01000b02 	tsteq	r0, r2, lsl #22
    2d08:	004a0501 	subeq	r0, sl, r1, lsl #10
    2d0c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d10:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2d14:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2d18:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    2d1c:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    2d20:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    2d24:	0b030505 	bleq	c4140 <__ccfg+0xa4198>
    2d28:	034a053c 	movteq	r0, #42300	; 0xa53c
    2d2c:	02052075 	andeq	r2, r5, #117	; 0x75
    2d30:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
    2d34:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2d38:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    2d3c:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    2d40:	053c3005 	ldreq	r3, [ip, #-5]!
    2d44:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    2d48:	03054b06 	movweq	r4, #23302	; 0x5b06
    2d4c:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    2d50:	03060205 	movweq	r0, #25093	; 0x6205
    2d54:	13132e6e 	tstne	r3, #1760	; 0x6e0
    2d58:	06120517 			; <UNDEFINED> instruction: 0x06120517
    2d5c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2d60:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
    2d64:	20060a05 	andcs	r0, r6, r5, lsl #20
    2d68:	2f060305 	svccs	0x00060305
    2d6c:	01061305 	tsteq	r6, r5, lsl #6
    2d70:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2d74:	051f0622 	ldreq	r0, [pc, #-1570]	; 275a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x82>
    2d78:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    2d7c:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    2d80:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    2d84:	0105330a 	tsteq	r5, sl, lsl #6
    2d88:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    2d8c:	73030602 	movwvc	r0, #13826	; 0x3602
    2d90:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    2d94:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    2d98:	2f060205 	svccs	0x00060205
    2d9c:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    2da0:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    2da4:	0114132f 	tsteq	r4, pc, lsr #6
    2da8:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    2dac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2db0:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    2db4:	13053206 	movwne	r3, #20998	; 0x5206
    2db8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dbc:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2dc0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dc4:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    2dc8:	06130515 			; <UNDEFINED> instruction: 0x06130515
    2dcc:	06020501 	streq	r0, [r2], -r1, lsl #10
    2dd0:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    2dd4:	06030501 	streq	r0, [r3], -r1, lsl #10
    2dd8:	0010023d 	andseq	r0, r0, sp, lsr r2
    2ddc:	3a050101 	bcc	1431e8 <__ccfg+0x123240>
    2de0:	00020500 	andeq	r0, r2, r0, lsl #10
    2de4:	03000000 	movweq	r0, #0
    2de8:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    2dec:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2df0:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    2df4:	0205201b 	andeq	r2, r5, #27
    2df8:	4a062025 	bmi	18ae94 <__ccfg+0x16aeec>
    2dfc:	03062706 	movweq	r2, #26374	; 0x6706
    2e00:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    2e04:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    2e08:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2e0c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2e10:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2e14:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    2e18:	13410603 	movtne	r0, #5635	; 0x1603
    2e1c:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    2e20:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2e24:	02052008 	andeq	r2, r5, #8
    2e28:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    2e2c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2e30:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2e34:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    2e38:	0101000b 	tsteq	r1, fp
    2e3c:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    2e40:	00000002 	andeq	r0, r0, r2
    2e44:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    2e48:	16020501 	strne	r0, [r2], -r1, lsl #10
    2e4c:	01060505 	tsteq	r6, r5, lsl #10
    2e50:	052f0f05 	streq	r0, [pc, #-3845]!	; 1f53 <vscan+0x263>
    2e54:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    2e58:	06020521 	streq	r0, [r2], -r1, lsr #10
    2e5c:	06100531 			; <UNDEFINED> instruction: 0x06100531
    2e60:	06020501 	streq	r0, [r2], -r1, lsl #10
    2e64:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2e68:	2b0a0501 	blcs	284274 <__ccfg+0x2642cc>
    2e6c:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    2e70:	01010004 	tsteq	r1, r4
    2e74:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    2e78:	00000002 	andeq	r0, r0, r2
    2e7c:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    2e80:	19020501 	stmdbne	r2, {r0, r8, sl}
    2e84:	01141313 	tsteq	r4, r3, lsl r3
    2e88:	03063c05 	movweq	r3, #27653	; 0x6c05
    2e8c:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    2e90:	200b0302 	andcs	r0, fp, r2, lsl #6
    2e94:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2e98:	06201303 	strteq	r1, [r0], -r3, lsl #6
    2e9c:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    2ea0:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2ea4:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ea8:	06050521 	streq	r0, [r5], -r1, lsr #10
    2eac:	06030501 	streq	r0, [r3], -r1, lsl #10
    2eb0:	06060530 			; <UNDEFINED> instruction: 0x06060530
    2eb4:	06040501 	streq	r0, [r4], -r1, lsl #10
    2eb8:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    2ebc:	01013d33 	tsteq	r1, r3, lsr sp
    2ec0:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    2ec4:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    2ec8:	06013006 	streq	r3, [r1], -r6
    2ecc:	2e064a4a 	vmlscs.f32	s8, s12, s20
    2ed0:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    2ed4:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    2ed8:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    2edc:	01052306 	tsteq	r5, r6, lsl #6
    2ee0:	0a051306 	beq	147b00 <__ccfg+0x127b58>
    2ee4:	022e7003 	eoreq	r7, lr, #3
    2ee8:	0101000b 	tsteq	r1, fp
    2eec:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2ef0:	00000002 	andeq	r0, r0, r2
    2ef4:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    2ef8:	16020501 	strne	r0, [r2], -r1, lsl #10
    2efc:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2f00:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2f04:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2f08:	20090302 	andcs	r0, r9, r2, lsl #6
    2f0c:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2f10:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2f14:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2f18:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2f1c:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2f20:	20050501 	andcs	r0, r5, r1, lsl #10
    2f24:	2f060305 	svccs	0x00060305
    2f28:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2f2c:	01061b05 	tsteq	r6, r5, lsl #22
    2f30:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2f34:	0a030603 	beq	c4748 <__ccfg+0xa47a0>
    2f38:	06050520 	streq	r0, [r5], -r0, lsr #10
    2f3c:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2f40:	200b030a 	andcs	r0, fp, sl, lsl #6
    2f44:	20061a05 	andcs	r1, r6, r5, lsl #20
    2f48:	01060305 	tsteq	r6, r5, lsl #6
    2f4c:	2f060405 	svccs	0x00060405
    2f50:	11062c05 	tstne	r6, r5, lsl #24
    2f54:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2f58:	051f062a 	ldreq	r0, [pc, #-1578]	; 2936 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10e>
    2f5c:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    2f60:	01062105 	tsteq	r6, r5, lsl #2
    2f64:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2f68:	052f0603 	streq	r0, [pc, #-1539]!	; 296d <NOROM_SysCtrlSetRechargeBeforePowerDown+0x145>
    2f6c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2f70:	20052006 	andcs	r2, r5, r6
    2f74:	20060520 	andcs	r0, r6, r0, lsr #10
    2f78:	33060205 	movwcc	r0, #25093	; 0x6205
    2f7c:	06050513 			; <UNDEFINED> instruction: 0x06050513
    2f80:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f84:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    2f88:	0a050f06 	beq	146ba8 <__ccfg+0x126c00>
    2f8c:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    2f90:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f94:	03010501 	movweq	r0, #5377	; 0x1501
    2f98:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    2f9c:	20740306 	rsbscs	r0, r4, r6, lsl #6
    2fa0:	01060805 	tsteq	r6, r5, lsl #16
    2fa4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2fa8:	052f0605 	streq	r0, [pc, #-1541]!	; 29ab <NOROM_SysCtrlSetRechargeBeforePowerDown+0x183>
    2fac:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    2fb0:	2a052207 	bcs	14b7d4 <__ccfg+0x12b82c>
    2fb4:	0a021e06 	beq	8a7d4 <__ccfg+0x6a82c>
    2fb8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fbc:	02050038 	andeq	r0, r5, #56	; 0x38
    2fc0:	00000000 	andeq	r0, r0, r0
    2fc4:	0105a303 	tsteq	r5, r3, lsl #6
    2fc8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2fcc:	01141313 	tsteq	r4, r3, lsl r3
    2fd0:	03063805 	movweq	r3, #26629	; 0x6805
    2fd4:	02052077 	andeq	r2, r5, #119	; 0x77
    2fd8:	20200903 	eorcs	r0, r0, r3, lsl #18
    2fdc:	03054a06 	movweq	r4, #23046	; 0x5a06
    2fe0:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2fe4:	03060205 	movweq	r0, #25093	; 0x6205
    2fe8:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    2fec:	01061a05 	tsteq	r6, r5, lsl #20
    2ff0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2ff4:	052f0603 	streq	r0, [pc, #-1539]!	; 29f9 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d1>
    2ff8:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    2ffc:	1b050106 	blne	14341c <__ccfg+0x123474>
    3000:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    3004:	0305206b 	movweq	r2, #20587	; 0x506b
    3008:	7cb30306 	ldcvc	3, cr0, [r3], #24
    300c:	06050520 	streq	r0, [r5], -r0, lsr #10
    3010:	06030501 	streq	r0, [r3], -r1, lsl #10
    3014:	06060521 	streq	r0, [r6], -r1, lsr #10
    3018:	06030501 	streq	r0, [r3], -r1, lsl #10
    301c:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3020:	01061305 	tsteq	r6, r5, lsl #6
    3024:	20060f05 	andcs	r0, r6, r5, lsl #30
    3028:	13060505 	movwne	r0, #25861	; 0x6505
    302c:	03060905 	movweq	r0, #26885	; 0x6905
    3030:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    3034:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    3038:	0305200c 	movweq	r2, #20492	; 0x500c
    303c:	20052f06 	andcs	r2, r5, r6, lsl #30
    3040:	06050106 	streq	r0, [r5], -r6, lsl #2
    3044:	20200520 	eorcs	r0, r0, r0, lsr #10
    3048:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    304c:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3050:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3054:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    3058:	0a030601 	beq	c4864 <__ccfg+0xa48bc>
    305c:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    3060:	06090521 	streq	r0, [r9], -r1, lsr #10
    3064:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    3068:	06020520 	streq	r0, [r2], -r0, lsr #10
    306c:	03010501 	movweq	r0, #5377	; 0x1501
    3070:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3074:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    3078:	01061e05 	tsteq	r6, r5, lsl #28
    307c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3080:	2f300604 	svccs	0x00300604
    3084:	01060605 	tsteq	r6, r5, lsl #12
    3088:	21060405 	tstcs	r6, r5, lsl #8
    308c:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    3090:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    3094:	0101000a 	tsteq	r1, sl
    3098:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    309c:	00000002 	andeq	r0, r0, r2
    30a0:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    30a4:	13020501 	movwne	r0, #9473	; 0x2501
    30a8:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    30ac:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    30b0:	20207a03 	eorcs	r7, r0, r3, lsl #20
    30b4:	20420205 	subcs	r0, r2, r5, lsl #4
    30b8:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    30bc:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    30c0:	4a580601 	bmi	16048cc <__ccfg+0x15e4924>
    30c4:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    30c8:	01060e05 	tsteq	r6, r5, lsl #28
    30cc:	2f060205 	svccs	0x00060205
    30d0:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    30d4:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    30d8:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    30dc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    30e0:	03052e05 	movweq	r2, #24069	; 0x5e05
    30e4:	06052206 	streq	r2, [r5], -r6, lsl #4
    30e8:	0a050106 	beq	143508 <__ccfg+0x123560>
    30ec:	0301054e 	movweq	r0, #5454	; 0x154e
    30f0:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    30f4:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    30f8:	0117033d 	tsteq	r7, sp, lsr r3
    30fc:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3100:	2e3c012e 	rsfcsep	f0, f4, #0.5
    3104:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3108:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    310c:	0b054a17 	bleq	155970 <__ccfg+0x1359c8>
    3110:	58050520 	stmdapl	r5, {r5, r8, sl}
    3114:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    3118:	01060605 	tsteq	r6, r5, lsl #12
    311c:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    3120:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3124:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    3128:	052f0602 	streq	r0, [pc, #-1538]!	; 2b2e <NOROM_ChipInfo_GetHwRevision+0x22>
    312c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3130:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3134:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3138:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    313c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3140:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2233 <NOROM_SetupTrimDevice+0x87>
    3144:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    3148:	01060905 	tsteq	r6, r5, lsl #18
    314c:	01000c02 	tsteq	r0, r2, lsl #24
    3150:	00440501 	subeq	r0, r4, r1, lsl #10
    3154:	00000205 	andeq	r0, r0, r5, lsl #4
    3158:	87030000 	strhi	r0, [r3, -r0]
    315c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3160:	06440516 			; <UNDEFINED> instruction: 0x06440516
    3164:	0205200e 	andeq	r2, r5, #14
    3168:	1a052606 	bne	14c988 <__ccfg+0x12c9e0>
    316c:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    3170:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3174:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3178:	0605054a 	streq	r0, [r5], -sl, asr #10
    317c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3180:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3184:	03050106 	movweq	r0, #20742	; 0x5106
    3188:	16056706 	strne	r6, [r5], -r6, lsl #14
    318c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3190:	01055b06 	tsteq	r5, r6, lsl #22
    3194:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3198:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    319c:	0205004b 	andeq	r0, r5, #75	; 0x4b
    31a0:	00000000 	andeq	r0, r0, r0
    31a4:	01069903 	tsteq	r6, r3, lsl #18
    31a8:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    31ac:	03064b05 	movweq	r4, #27397	; 0x6b05
    31b0:	1a05017a 	bne	1437a0 <__ccfg+0x1237f8>
    31b4:	034b0526 	movteq	r0, #46374	; 0xb526
    31b8:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    31bc:	4a090306 	bmi	243ddc <__ccfg+0x223e34>
    31c0:	01060505 	tsteq	r6, r5, lsl #10
    31c4:	2f060305 	svccs	0x00060305
    31c8:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31cc:	06030501 	streq	r0, [r3], -r1, lsl #10
    31d0:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    31d8:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    31dc:	00020213 	andeq	r0, r2, r3, lsl r2
    31e0:	31050101 	tstcc	r5, r1, lsl #2
    31e4:	00020500 	andeq	r0, r2, r0, lsl #10
    31e8:	03000000 	movweq	r0, #0
    31ec:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    31f0:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    31f4:	03050106 	movweq	r0, #20742	; 0x5106
    31f8:	01052106 	tsteq	r5, r6, lsl #2
    31fc:	01023d06 	tsteq	r2, r6, lsl #26
    3200:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3204:	02050048 	andeq	r0, r5, #72	; 0x48
    3208:	00000000 	andeq	r0, r0, r0
    320c:	0106d103 	tsteq	r6, r3, lsl #2
    3210:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3214:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    3218:	01240602 			; <UNDEFINED> instruction: 0x01240602
    321c:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3220:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3224:	4a4a0620 	bmi	1284aac <__ccfg+0x1264b04>
    3228:	06010513 			; <UNDEFINED> instruction: 0x06010513
    322c:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3230:	01000602 	tsteq	r0, r2, lsl #12
    3234:	00460501 	subeq	r0, r6, r1, lsl #10
    3238:	00000205 	andeq	r0, r0, r5, lsl #4
    323c:	b2030000 	andlt	r0, r3, #0
    3240:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3244:	06460517 			; <UNDEFINED> instruction: 0x06460517
    3248:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    324c:	2f060305 	svccs	0x00060305
    3250:	01060605 	tsteq	r6, r5, lsl #12
    3254:	30060305 	andcc	r0, r6, r5, lsl #6
    3258:	01060605 	tsteq	r6, r5, lsl #12
    325c:	2f060405 	svccs	0x00060405
    3260:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3264:	06040501 	streq	r0, [r4], -r1, lsl #10
    3268:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    326c:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3270:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3274:	01060c05 	tsteq	r6, r5, lsl #24
    3278:	09030105 	stmdbeq	r3, {r0, r2, r8}
    327c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3280:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3284:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3288:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    328c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3290:	014c0602 	cmpeq	ip, r2, lsl #12
    3294:	4a062e06 	bmi	18eab4 <__ccfg+0x16eb0c>
    3298:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    329c:	01050106 	tsteq	r5, r6, lsl #2
    32a0:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    32a4:	71030b05 	tstvc	r3, r5, lsl #22
    32a8:	000b023c 	andeq	r0, fp, ip, lsr r2
    32ac:	3d050101 	stfccs	f0, [r5, #-4]
    32b0:	00020500 	andeq	r0, r2, r0, lsl #10
    32b4:	03000000 	movweq	r0, #0
    32b8:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    32bc:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    32c0:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    32c4:	06202402 	strteq	r2, [r0], -r2, lsl #8
    32c8:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    32cc:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    32d0:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    32d4:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    32d8:	43052e22 	movwmi	r2, #24098	; 0x5e22
    32dc:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    32e0:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    32e4:	01010005 	tsteq	r1, r5
    32e8:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    32ec:	00000002 	andeq	r0, r0, r2
    32f0:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    32f4:	16020501 	strne	r0, [r2], -r1, lsl #10
    32f8:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    32fc:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3300:	4a4a0620 	bmi	1284b88 <__ccfg+0x1264be0>
    3304:	06220513 			; <UNDEFINED> instruction: 0x06220513
    3308:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    330c:	01000502 	tsteq	r0, r2, lsl #10
    3310:	00400501 	subeq	r0, r0, r1, lsl #10
    3314:	00000205 	andeq	r0, r0, r5, lsl #4
    3318:	ea030000 	b	c3320 <__ccfg+0xa3378>
    331c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3320:	40051416 	andmi	r1, r5, r6, lsl r4
    3324:	017a0306 	cmneq	sl, r6, lsl #6
    3328:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    332c:	7a034005 	bvc	d3348 <__ccfg+0xb33a0>
    3330:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3334:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3338:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    333c:	01061105 	tsteq	r6, r5, lsl #2
    3340:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3344:	02051d11 	andeq	r1, r5, #1088	; 0x440
    3348:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    334c:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3350:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3354:	01060905 	tsteq	r6, r5, lsl #18
    3358:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    335c:	01010002 	tsteq	r1, r2
    3360:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3364:	00000002 	andeq	r0, r0, r2
    3368:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    336c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3370:	01000302 	tsteq	r0, r2, lsl #6
    3374:	00450501 	subeq	r0, r5, r1, lsl #10
    3378:	00000205 	andeq	r0, r0, r5, lsl #4
    337c:	85030000 	strhi	r0, [r3, #-0]
    3380:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3384:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    3388:	017a0306 	cmneq	sl, r6, lsl #6
    338c:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3390:	31060305 	tstcc	r6, r5, lsl #6
    3394:	01060605 	tsteq	r6, r5, lsl #12
    3398:	2f060405 	svccs	0x00060405
    339c:	2f060305 	svccs	0x00060305
    33a0:	06012e06 	streq	r2, [r1], -r6, lsl #28
    33a4:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    33a8:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    33ac:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    33b0:	0a052e06 	beq	14ebd0 <__ccfg+0x12ec28>
    33b4:	27010535 	smladxcs	r1, r5, r5, r0
    33b8:	03060405 	movweq	r0, #25605	; 0x6405
    33bc:	20052073 	andcs	r2, r5, r3, ror r0
    33c0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    33c4:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    33c8:	30060405 	andcc	r0, r6, r5, lsl #8
    33cc:	01061d05 	tsteq	r6, r5, lsl #26
    33d0:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    33d4:	060b052f 	streq	r0, [fp], -pc, lsr #10
    33d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    33dc:	060b0541 	streq	r0, [fp], -r1, asr #10
    33e0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    33e4:	2f060305 	svccs	0x00060305
    33e8:	01060a05 	tsteq	r6, r5, lsl #20
    33ec:	01000902 	tsteq	r0, r2, lsl #18
    33f0:	00480501 	subeq	r0, r8, r1, lsl #10
    33f4:	00000205 	andeq	r0, r0, r5, lsl #4
    33f8:	86030000 	strhi	r0, [r3], -r0
    33fc:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3400:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3404:	48050106 	stmdami	r5, {r1, r2, r8}
    3408:	20207803 	eorcs	r7, r0, r3, lsl #16
    340c:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3410:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3414:	06030520 	streq	r0, [r3], -r0, lsr #10
    3418:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    341c:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3420:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3424:	052f0602 	streq	r0, [pc, #-1538]!	; 2e2a <port_confs+0x2e>
    3428:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    342c:	11052221 	tstne	r5, r1, lsr #4
    3430:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3434:	06210530 			; <UNDEFINED> instruction: 0x06210530
    3438:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    343c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3440:	01060505 	tsteq	r6, r5, lsl #10
    3444:	21060305 	tstcs	r6, r5, lsl #6
    3448:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    344c:	13060105 	movwne	r0, #24837	; 0x6105
    3450:	01000b02 	tsteq	r0, r2, lsl #22
    3454:	00440501 	subeq	r0, r4, r1, lsl #10
    3458:	00000205 	andeq	r0, r0, r5, lsl #4
    345c:	a0030000 	andge	r0, r3, r0
    3460:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3464:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    3468:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    346c:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3470:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3474:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    3478:	03020520 	movweq	r0, #9504	; 0x2520
    347c:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3480:	0603054a 	streq	r0, [r3], -sl, asr #10
    3484:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3488:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    348c:	0f054706 	svceq	0x00054706
    3490:	06050106 	streq	r0, [r5], -r6, lsl #2
    3494:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    3498:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    349c:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    34a0:	0a050106 	beq	1438c0 <__ccfg+0x123918>
    34a4:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    34a8:	200d0301 	andcs	r0, sp, r1, lsl #6
    34ac:	03060305 	movweq	r0, #25349	; 0x6305
    34b0:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    34b4:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    34b8:	06050106 	streq	r0, [r5], -r6, lsl #2
    34bc:	06020574 			; <UNDEFINED> instruction: 0x06020574
    34c0:	06050542 	streq	r0, [r5], -r2, asr #10
    34c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    34c8:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    34cc:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    34d0:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    34d4:	02052006 	andeq	r2, r5, #6
    34d8:	0b052306 	bleq	14c0f8 <__ccfg+0x12c150>
    34dc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    34e0:	0602054a 	streq	r0, [r2], -sl, asr #10
    34e4:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    34e8:	0a020106 	beq	83908 <__ccfg+0x63960>
    34ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34f0:	0205003e 	andeq	r0, r5, #62	; 0x3e
    34f4:	00000000 	andeq	r0, r0, r0
    34f8:	0109d103 	tsteq	r9, r3, lsl #2
    34fc:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3500:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3504:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3508:	20280205 	eorcs	r0, r8, r5, lsl #4
    350c:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3510:	01060505 	tsteq	r6, r5, lsl #10
    3514:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3518:	01060405 	tsteq	r6, r5, lsl #8
    351c:	21060205 	tstcs	r6, r5, lsl #4
    3520:	01060505 	tsteq	r6, r5, lsl #10
    3524:	33060205 	movwcc	r0, #25093	; 0x6205
    3528:	01060a05 	tsteq	r6, r5, lsl #20
    352c:	2f060205 	svccs	0x00060205
    3530:	1301012f 	movwne	r0, #4399	; 0x112f
    3534:	01060905 	tsteq	r6, r5, lsl #18
    3538:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    353c:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3540:	01000902 	tsteq	r0, r2, lsl #18
    3544:	00340501 	eorseq	r0, r4, r1, lsl #10
    3548:	00000205 	andeq	r0, r0, r5, lsl #4
    354c:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3550:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3554:	01141316 	tsteq	r4, r6, lsl r3
    3558:	03063405 	movweq	r3, #25605	; 0x6405
    355c:	02052079 	andeq	r2, r5, #121	; 0x79
    3560:	4a062027 	bmi	18b604 <__ccfg+0x16b65c>
    3564:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    3568:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    356c:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3570:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3574:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3578:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    357c:	0a052306 	beq	14c19c <__ccfg+0x12c1f4>
    3580:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3584:	21010530 	tstcs	r1, r0, lsr r5
    3588:	01000702 	tsteq	r0, r2, lsl #14
    358c:	00350501 	eorseq	r0, r5, r1, lsl #10
    3590:	00000205 	andeq	r0, r0, r5, lsl #4
    3594:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    3598:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    359c:	06350516 			; <UNDEFINED> instruction: 0x06350516
    35a0:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    35a4:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    35a8:	01300602 	teqeq	r0, r2, lsl #12
    35ac:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    35b0:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    35b4:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    35b8:	06022c02 	streq	r2, [r2], -r2, lsl #24
    35bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35c0:	02050032 	andeq	r0, r5, #50	; 0x32
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	010a8403 	tsteq	sl, r3, lsl #8
    35cc:	01160205 	tsteq	r6, r5, lsl #4
    35d0:	1c063205 	sfmne	f3, 4, [r6], {5}
    35d4:	20240205 	eorcs	r0, r4, r5, lsl #4
    35d8:	134a4a06 	movtne	r4, #43526	; 0xaa06
    35dc:	03060a05 	movweq	r0, #27141	; 0x6a05
    35e0:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    35e4:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    35e8:	06020520 	streq	r0, [r2], -r0, lsr #10
    35ec:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    35f0:	03051413 	movweq	r1, #21523	; 0x5413
    35f4:	06050513 			; <UNDEFINED> instruction: 0x06050513
    35f8:	06030501 	streq	r0, [r3], -r1, lsl #10
    35fc:	06060521 	streq	r0, [r6], -r1, lsr #10
    3600:	06030501 	streq	r0, [r3], -r1, lsl #10
    3604:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3608:	01061305 	tsteq	r6, r5, lsl #6
    360c:	20060f05 	andcs	r0, r6, r5, lsl #30
    3610:	13060505 	movwne	r0, #25861	; 0x6505
    3614:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    3618:	08022008 	stmdaeq	r2, {r3, sp}
    361c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3620:	02050028 	andeq	r0, r5, #40	; 0x28
    3624:	000015e8 	andeq	r1, r0, r8, ror #11
    3628:	010a8c03 	tsteq	sl, r3, lsl #24
    362c:	1a030105 	bne	c3a48 <__ccfg+0xa3aa0>
    3630:	00010201 	andeq	r0, r1, r1, lsl #4
    3634:	01230101 			; <UNDEFINED> instruction: 0x01230101
    3638:	00030000 	andeq	r0, r3, r0
    363c:	00000089 	andeq	r0, r0, r9, lsl #1
    3640:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3644:	0101000d 	tsteq	r1, sp
    3648:	00000101 	andeq	r0, r0, r1, lsl #2
    364c:	00000100 	andeq	r0, r0, r0, lsl #2
    3650:	6f682f01 	svcvs	0x00682f01
    3654:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 34a8 <__exidx_end+0x62c>
    3658:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    365c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3660:	6f746b73 	svcvs	0x00746b73
    3664:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3668:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    366c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3670:	2f534f43 	svccs	0x00534f43
    3674:	4f636950 	svcmi	0x00636950
    3678:	43432f53 	movtmi	r2, #16211	; 0x3f53
    367c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3680:	73752f00 	cmnvc	r5, #0, 30
    3684:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3688:	63672f62 	cmnvs	r7, #392	; 0x188
    368c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3690:	6f6e2d6d 	svcvs	0x006e2d6d
    3694:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3698:	2f696261 	svccs	0x00696261
    369c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    36a0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    36a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    36a8:	73000065 	movwvc	r0, #101	; 0x65
    36ac:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    36b0:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    36b4:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    36b8:	00000100 	andeq	r0, r0, r0, lsl #2
    36bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    36c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    36c4:	00000200 	andeq	r0, r0, r0, lsl #4
    36c8:	00010500 	andeq	r0, r1, r0, lsl #10
    36cc:	15ea0205 	strbne	r0, [sl, #517]!	; 0x205
    36d0:	84030000 	strhi	r0, [r3], #-0
    36d4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    36d8:	0a051416 	beq	148738 <__ccfg+0x128790>
    36dc:	00010210 	andeq	r0, r1, r0, lsl r2
    36e0:	01050101 	tsteq	r5, r1, lsl #2
    36e4:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    36e8:	03000015 	movweq	r0, #21
    36ec:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    36f0:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    36f4:	0102100a 	tsteq	r2, sl
    36f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36fc:	02050001 	andeq	r0, r5, #1
    3700:	000015ee 	andeq	r1, r0, lr, ror #11
    3704:	0102a803 	tsteq	r2, r3, lsl #16
    3708:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    370c:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3710:	01010001 	tsteq	r1, r1
    3714:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3718:	0015f002 	andseq	pc, r5, r2
    371c:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3720:	13050501 	movwne	r0, #21761	; 0x5501
    3724:	06010517 			; <UNDEFINED> instruction: 0x06010517
    3728:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    372c:	33062605 	movwcc	r2, #26117	; 0x6605
    3730:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3734:	2105051f 	tstcs	r5, pc, lsl r5
    3738:	20061d05 	andcs	r1, r6, r5, lsl #26
    373c:	01060505 	tsteq	r6, r5, lsl #10
    3740:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3744:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    3748:	01053305 	tsteq	r5, r5, lsl #6
    374c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3750:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3754:	01061605 	tsteq	r6, r5, lsl #12
    3758:	01001002 	tsteq	r0, r2
    375c:	00018501 	andeq	r8, r1, r1, lsl #10
    3760:	7f000300 	svcvc	0x00000300
    3764:	02000001 	andeq	r0, r0, #1
    3768:	0d0efb01 	vstreq	d15, [lr, #-4]
    376c:	01010100 	mrseq	r0, (UNDEF: 17)
    3770:	00000001 	andeq	r0, r0, r1
    3774:	01000001 	tsteq	r0, r1
    3778:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    377c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3780:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3784:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3788:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    378c:	61652d65 	cmnvs	r5, r5, ror #26
    3790:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3794:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3798:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    379c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    37a0:	6f682f00 	svcvs	0x00682f00
    37a4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 35f8 <__exidx_end+0x77c>
    37a8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37ac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37b0:	6f746b73 	svcvs	0x00746b73
    37b4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37b8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37bc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37c0:	2f534f43 	svccs	0x00534f43
    37c4:	4f636950 	svcmi	0x00636950
    37c8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    37cc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37d0:	3143432f 	cmpcc	r3, pc, lsr #6
    37d4:	57585833 	smmlarpl	r8, r3, r8, r5
    37d8:	2f455241 	svccs	0x00455241
    37dc:	00636e69 	rsbeq	r6, r3, r9, ror #28
    37e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 372c <__exidx_end+0x8b0>
    37e4:	616d2f65 	cmnvs	sp, r5, ror #30
    37e8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    37ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    37f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    37f4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    37f8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    37fc:	4349502f 	movtmi	r5, #36911	; 0x902f
    3800:	502f534f 	eorpl	r5, pc, pc, asr #6
    3804:	534f6369 	movtpl	r6, #62313	; 0xf369
    3808:	3143432f 	cmpcc	r3, pc, lsr #6
    380c:	00585833 	subseq	r5, r8, r3, lsr r8
    3810:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 375c <__exidx_end+0x8e0>
    3814:	616d2f65 	cmnvs	sp, r5, ror #30
    3818:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    381c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3820:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3824:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3828:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    382c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3830:	502f534f 	eorpl	r5, pc, pc, asr #6
    3834:	534f6369 	movtpl	r6, #62313	; 0xf369
    3838:	6f682f00 	svcvs	0x00682f00
    383c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3690 <__exidx_end+0x814>
    3840:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3844:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3848:	6f746b73 	svcvs	0x00746b73
    384c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3850:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3854:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3858:	2f534f43 	svccs	0x00534f43
    385c:	4f636950 	svcmi	0x00636950
    3860:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3864:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3868:	74730000 	ldrbtvc	r0, [r3], #-0
    386c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3870:	0100682e 	tsteq	r0, lr, lsr #16
    3874:	77680000 	strbvc	r0, [r8, -r0]!
    3878:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    387c:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3880:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    3884:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    3888:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    388c:	00020068 	andeq	r0, r2, r8, rrx
    3890:	63726100 	cmnvs	r2, #0, 2
    3894:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3898:	6d000003 	stcvs	0, cr0, [r0, #-12]
    389c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    38a0:	00030068 	andeq	r0, r3, r8, rrx
    38a4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    38a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    38b0:	62000003 	andvs	r0, r0, #3
    38b4:	6f747475 	svcvs	0x00747475
    38b8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    38bc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    38c0:	00000300 	andeq	r0, r0, r0, lsl #6
    38c4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    38c8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    38cc:	6b000004 	blvs	38e4 <__exidx_end+0xa68>
    38d0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    38d4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    38d8:	63000005 	movwvs	r0, #5
    38dc:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    38e0:	00030063 	andeq	r0, r3, r3, rrx
    38e4:	02990000 	addseq	r0, r9, #0
    38e8:	00030000 	andeq	r0, r3, r0
    38ec:	000001c0 	andeq	r0, r0, r0, asr #3
    38f0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    38f4:	0101000d 	tsteq	r1, sp
    38f8:	00000101 	andeq	r0, r0, r1, lsl #2
    38fc:	00000100 	andeq	r0, r0, r0, lsl #2
    3900:	6f682f01 	svcvs	0x00682f01
    3904:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3758 <__exidx_end+0x8dc>
    3908:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    390c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3910:	6f746b73 	svcvs	0x00746b73
    3914:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3918:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    391c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3920:	2f534f43 	svccs	0x00534f43
    3924:	4f636950 	svcmi	0x00636950
    3928:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    392c:	2f736269 	svccs	0x00736269
    3930:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    3934:	0073726f 	rsbseq	r7, r3, pc, ror #4
    3938:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3884 <__exidx_end+0xa08>
    393c:	616d2f65 	cmnvs	sp, r5, ror #30
    3940:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3944:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3948:	706f746b 	rsbvc	r7, pc, fp, ror #8
    394c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3950:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3954:	4349502f 	movtmi	r5, #36911	; 0x902f
    3958:	502f534f 	eorpl	r5, pc, pc, asr #6
    395c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3960:	3143432f 	cmpcc	r3, pc, lsr #6
    3964:	00585833 	subseq	r5, r8, r3, lsr r8
    3968:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 38b4 <__exidx_end+0xa38>
    396c:	616d2f65 	cmnvs	sp, r5, ror #30
    3970:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3974:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3978:	706f746b 	rsbvc	r7, pc, fp, ror #8
    397c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3980:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3984:	4349502f 	movtmi	r5, #36911	; 0x902f
    3988:	502f534f 	eorpl	r5, pc, pc, asr #6
    398c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3990:	3143432f 	cmpcc	r3, pc, lsr #6
    3994:	2f585833 	svccs	0x00585833
    3998:	33314343 	teqcc	r1, #201326593	; 0xc000001
    399c:	41575858 	cmpmi	r7, r8, asr r8
    39a0:	642f4552 	strtvs	r4, [pc], #-1362	; 39a8 <__exidx_end+0xb2c>
    39a4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    39a8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    39ac:	73752f00 	cmnvc	r5, #0, 30
    39b0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    39b4:	63672f62 	cmnvs	r7, #392	; 0x188
    39b8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    39bc:	6f6e2d6d 	svcvs	0x006e2d6d
    39c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    39c4:	2f696261 	svccs	0x00696261
    39c8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    39cc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    39d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    39d4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    39d8:	2f656d6f 	svccs	0x00656d6f
    39dc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    39e0:	442f6e69 	strtmi	r6, [pc], #-3689	; 39e8 <__exidx_end+0xb6c>
    39e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    39e8:	4f2f706f 	svcmi	0x002f706f
    39ec:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    39f0:	502f5445 	eorpl	r5, pc, r5, asr #8
    39f4:	534f4349 	movtpl	r4, #62281	; 0xf349
    39f8:	6369502f 	cmnvs	r9, #47	; 0x2f
    39fc:	2f00534f 	svccs	0x0000534f
    3a00:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3a04:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3a08:	2f6e6974 	svccs	0x006e6974
    3a0c:	6b736544 	blvs	1cdcf24 <__ccfg+0x1cbcf7c>
    3a10:	2f706f74 	svccs	0x00706f74
    3a14:	4f534c4f 	svcmi	0x00534c4f
    3a18:	2f54454e 	svccs	0x0054454e
    3a1c:	4f434950 	svcmi	0x00434950
    3a20:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3a24:	2f534f63 	svccs	0x00534f63
    3a28:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3a2c:	00006c65 	andeq	r6, r0, r5, ror #24
    3a30:	5f6e6970 	svcpl	0x006e6970
    3a34:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    3a38:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    3a3c:	00000100 	andeq	r0, r0, r0, lsl #2
    3a40:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    3a44:	63675f73 	cmnvs	r7, #460	; 0x1cc
    3a48:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3a4c:	67000002 	strvs	r0, [r0, -r2]
    3a50:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3a54:	00030068 	andeq	r0, r3, r8, rrx
    3a58:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3a5c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3a60:	00040068 	andeq	r0, r4, r8, rrx
    3a64:	63726100 	cmnvs	r2, #0, 2
    3a68:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3a6c:	6d000002 	stcvs	0, cr0, [r0, #-8]
    3a70:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3a74:	00020068 	andeq	r0, r2, r8, rrx
    3a78:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3a7c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3a84:	62000002 	andvs	r0, r0, #2
    3a88:	6f747475 	svcvs	0x00747475
    3a8c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3a90:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3a94:	00000200 	andeq	r0, r0, r0, lsl #4
    3a98:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3a9c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3aa0:	6b000005 	blvs	3abc <__exidx_end+0xc40>
    3aa4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3aa8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3aac:	00000006 	andeq	r0, r0, r6
    3ab0:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    3ab4:	00000002 	andeq	r0, r0, r2
    3ab8:	010e0300 	mrseq	r0, ELR_hyp
    3abc:	01011b05 	tsteq	r1, r5, lsl #22
    3ac0:	06010501 	streq	r0, [r1], -r1, lsl #10
    3ac4:	00010201 	andeq	r0, r1, r1, lsl #4
    3ac8:	3f050101 	svccc	0x00050101
    3acc:	00020500 	andeq	r0, r2, r0, lsl #10
    3ad0:	03000000 	movweq	r0, #0
    3ad4:	02050110 	andeq	r0, r5, #16, 2
    3ad8:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    3adc:	03063f05 	movweq	r3, #28421	; 0x6f05
    3ae0:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    3ae4:	03052605 	movweq	r2, #22021	; 0x5605
    3ae8:	06052206 	streq	r2, [r5], -r6, lsl #4
    3aec:	03050106 	movweq	r0, #20742	; 0x5106
    3af0:	02044d06 	andeq	r4, r4, #384	; 0x180
    3af4:	0100c103 	tsteq	r0, r3, lsl #2
    3af8:	40030104 	andmi	r0, r3, r4, lsl #2
    3afc:	044b3d20 	strbeq	r3, [fp], #-3360	; 0xfffff2e0
    3b00:	01330302 	teqeq	r3, r2, lsl #6
    3b04:	4e030104 	adfmis	f0, f3, f4
    3b08:	31020520 	tstcc	r2, r0, lsr #10
    3b0c:	01060705 	tsteq	r6, r5, lsl #14
    3b10:	0f050304 	svceq	0x00050304
    3b14:	2e018b03 	vmlacs.f64	d8, d1, d3
    3b18:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3b1c:	207ef503 	rsbscs	pc, lr, r3, lsl #10
    3b20:	21060205 	tstcs	r6, r5, lsl #4
    3b24:	05130b05 	ldreq	r0, [r3, #-2821]	; 0xfffff4fb
    3b28:	03041303 	movweq	r1, #17155	; 0x4303
    3b2c:	83032905 	movwhi	r2, #14597	; 0x3905
    3b30:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3b34:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3b38:	f803060b 			; <UNDEFINED> instruction: 0xf803060b
    3b3c:	0304017e 	movweq	r0, #16766	; 0x417e
    3b40:	88030f05 	stmdahi	r3, {r0, r2, r8, r9, sl, fp}
    3b44:	01042001 	tsteq	r4, r1
    3b48:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b4c:	0304207e 	movweq	r2, #16510	; 0x407e
    3b50:	88033305 	stmdahi	r3, {r0, r2, r8, r9, ip, sp}
    3b54:	42052e01 	andmi	r2, r5, #1, 28
    3b58:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3b5c:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3b60:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    3b64:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    3b68:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    3b6c:	2208051e 	andcs	r0, r8, #125829120	; 0x7800000
    3b70:	1f063a05 	svcne	0x00063a05
    3b74:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
    3b78:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    3b7c:	06022301 	streq	r2, [r2], -r1, lsl #6
    3b80:	3c010100 	stfccs	f0, [r1], {-0}
    3b84:	03000003 	movweq	r0, #3
    3b88:	0001a900 	andeq	sl, r1, r0, lsl #18
    3b8c:	fb010200 	blx	44396 <__ccfg+0x243ee>
    3b90:	01000d0e 	tsteq	r0, lr, lsl #26
    3b94:	00010101 	andeq	r0, r1, r1, lsl #2
    3b98:	00010000 	andeq	r0, r1, r0
    3b9c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ba0:	2f656d6f 	svccs	0x00656d6f
    3ba4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3ba8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3bb0 <__exidx_end+0xd34>
    3bac:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3bb0:	4f2f706f 	svcmi	0x002f706f
    3bb4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3bb8:	502f5445 	eorpl	r5, pc, r5, asr #8
    3bbc:	534f4349 	movtpl	r4, #62281	; 0xf349
    3bc0:	6369502f 	cmnvs	r9, #47	; 0x2f
    3bc4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bc8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3bcc:	004f492f 	subeq	r4, pc, pc, lsr #18
    3bd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b1c <__exidx_end+0xca0>
    3bd4:	616d2f65 	cmnvs	sp, r5, ror #30
    3bd8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3bdc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3be0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3be4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3be8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3bec:	4349502f 	movtmi	r5, #36911	; 0x902f
    3bf0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bf4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3bf8:	3143432f 	cmpcc	r3, pc, lsr #6
    3bfc:	2f585833 	svccs	0x00585833
    3c00:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3c04:	41575858 	cmpmi	r7, r8, asr r8
    3c08:	642f4552 	strtvs	r4, [pc], #-1362	; 3c10 <__exidx_end+0xd94>
    3c0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3c10:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3c14:	73752f00 	cmnvc	r5, #0, 30
    3c18:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3c1c:	63672f62 	cmnvs	r7, #392	; 0x188
    3c20:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3c24:	6f6e2d6d 	svcvs	0x006e2d6d
    3c28:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3c2c:	2f696261 	svccs	0x00696261
    3c30:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3c34:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3c38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c3c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3c40:	2f656d6f 	svccs	0x00656d6f
    3c44:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c48:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c50 <__exidx_end+0xdd4>
    3c4c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c50:	4f2f706f 	svcmi	0x002f706f
    3c54:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c58:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c5c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c60:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c64:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3c68:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3c6c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3c70:	2f656d6f 	svccs	0x00656d6f
    3c74:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c78:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c80 <__exidx_end+0xe04>
    3c7c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c80:	4f2f706f 	svcmi	0x002f706f
    3c84:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c88:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c8c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c90:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c94:	2f00534f 	svccs	0x0000534f
    3c98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c9c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ca0:	2f6e6974 	svccs	0x006e6974
    3ca4:	6b736544 	blvs	1cdd1bc <__ccfg+0x1cbd214>
    3ca8:	2f706f74 	svccs	0x00706f74
    3cac:	4f534c4f 	svcmi	0x00534c4f
    3cb0:	2f54454e 	svccs	0x0054454e
    3cb4:	4f434950 	svcmi	0x00434950
    3cb8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3cbc:	2f534f63 	svccs	0x00534f63
    3cc0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3cc4:	00006c65 	andeq	r6, r0, r5, ror #24
    3cc8:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3ccc:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    3cd0:	00010063 	andeq	r0, r1, r3, rrx
    3cd4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3cd8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3cdc:	73000002 	movwvc	r0, #2
    3ce0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3ce4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3ce8:	61000003 	tstvs	r0, r3
    3cec:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3cf0:	00040068 	andeq	r0, r4, r8, rrx
    3cf4:	63616d00 	cmnvs	r1, #0, 26
    3cf8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3cfc:	70000004 	andvc	r0, r0, r4
    3d00:	5f736e69 	svcpl	0x00736e69
    3d04:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3d08:	00040068 	andeq	r0, r4, r8, rrx
    3d0c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3d10:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3d14:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d18:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3d1c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3d20:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3d24:	00050068 	andeq	r0, r5, r8, rrx
    3d28:	72656b00 	rsbvc	r6, r5, #0, 22
    3d2c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3d30:	00060068 	andeq	r0, r6, r8, rrx
    3d34:	01050000 	mrseq	r0, (UNDEF: 5)
    3d38:	00020500 	andeq	r0, r2, r0, lsl #10
    3d3c:	03000000 	movweq	r0, #0
    3d40:	0601011b 			; <UNDEFINED> instruction: 0x0601011b
    3d44:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3d48:	060e056a 	streq	r0, [lr], -sl, ror #10
    3d4c:	20050501 	andcs	r0, r5, r1, lsl #10
    3d50:	31060305 	tstcc	r6, r5, lsl #6
    3d54:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    3d58:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3d5c:	01870302 	orreq	r0, r7, r2, lsl #6
    3d60:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3d64:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3d68:	1c0f0520 	cfstr32ne	mvfx0, [pc], {32}
    3d6c:	20061405 	andcs	r1, r6, r5, lsl #8
    3d70:	01061c05 	tsteq	r6, r5, lsl #24
    3d74:	06200205 	strteq	r0, [r0], -r5, lsl #4
    3d78:	4b2e1103 	blmi	b8818c <__ccfg+0xb681e4>
    3d7c:	0303053d 	movweq	r0, #13629	; 0x353d
    3d80:	02042e71 	andeq	r2, r4, #1808	; 0x710
    3d84:	fe032905 	vseleq.f16	s4, s6, s10
    3d88:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3d8c:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3d90:	fd030607 	stc2	6, cr0, [r3, #-28]	; 0xffffffe4
    3d94:	0204017e 	andeq	r0, r4, #-2147483617	; 0x8000001f
    3d98:	83030f05 	movwhi	r0, #16133	; 0x3f05
    3d9c:	01042e01 	tsteq	r4, r1, lsl #28
    3da0:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3da4:	0204207e 	andeq	r2, r4, #126	; 0x7e
    3da8:	83033305 	movwhi	r3, #13061	; 0x3305
    3dac:	01042001 	tsteq	r4, r1
    3db0:	fd030605 	stc2	6, cr0, [r3, #-20]	; 0xffffffec
    3db4:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    3db8:	05053006 	streq	r3, [r5, #-6]
    3dbc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3dc0:	03054006 	movweq	r4, #20486	; 0x5006
    3dc4:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
    3dc8:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3dcc:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    3dd0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3dd4:	16030602 	strne	r0, [r3], -r2, lsl #12
    3dd8:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    3ddc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3de0:	eb030629 	bl	c568c <__ccfg+0xa56e4>
    3de4:	05055800 	streq	r5, [r5, #-2048]	; 0xfffff800
    3de8:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    3dec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3df0:	7f900307 	svcvc	0x00900307
    3df4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3df8:	00f0030f 	rscseq	r0, r0, pc, lsl #6
    3dfc:	20330520 	eorscs	r0, r3, r0, lsr #10
    3e00:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3e04:	207f9003 	rsbscs	r9, pc, r3
    3e08:	31060205 	tstcc	r6, r5, lsl #4
    3e0c:	01060505 	tsteq	r6, r5, lsl #10
    3e10:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    3e14:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
    3e18:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3e1c:	06290502 	strteq	r0, [r9], -r2, lsl #10
    3e20:	3c00df03 	stccc	15, cr13, [r0], {3}
    3e24:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3e28:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3e2c:	03070501 	movweq	r0, #29953	; 0x7501
    3e30:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e34:	030f0502 	movweq	r0, #62722	; 0xf502
    3e38:	042e00e4 	strteq	r0, [lr], #-228	; 0xffffff1c
    3e3c:	03070501 	movweq	r0, #29953	; 0x7501
    3e40:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e44:	03330502 	teqeq	r3, #8388608	; 0x800000
    3e48:	042000e4 	strteq	r0, [r0], #-228	; 0xffffff1c
    3e4c:	03050501 	movweq	r0, #21761	; 0x5501
    3e50:	05207f9c 	streq	r7, [r0, #-3996]!	; 0xfffff064
    3e54:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e58:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3e5c:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3e60:	03053106 	movweq	r3, #20742	; 0x5106
    3e64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e68:	01052206 	tsteq	r5, r6, lsl #4
    3e6c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    3e70:	0601052c 	streq	r0, [r1], -ip, lsr #10
    3e74:	000c024c 	andeq	r0, ip, ip, asr #4
    3e78:	29050101 	stmdbcs	r5, {r0, r8}
    3e7c:	00020500 	andeq	r0, r2, r0, lsl #10
    3e80:	03000000 	movweq	r0, #0
    3e84:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    3e88:	0f051602 	svceq	0x00051602
    3e8c:	29050106 	stmdbcs	r5, {r1, r2, r8}
    3e90:	240f051c 	strcs	r0, [pc], #-1308	; 3e98 <__exidx_end+0x101c>
    3e94:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3e98:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3e9c:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    3ea0:	2e780303 	cdpcs	3, 7, cr0, cr8, cr3, {0}
    3ea4:	40060205 	andmi	r0, r6, r5, lsl #4
    3ea8:	01060705 	tsteq	r6, r5, lsl #14
    3eac:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    3eb0:	2f2f0603 	svccs	0x002f0603
    3eb4:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    3eb8:	052c0305 	streq	r0, [ip, #-773]!	; 0xfffffcfb
    3ebc:	06023e01 	streq	r3, [r2], -r1, lsl #28
    3ec0:	31010100 	mrscc	r0, (UNDEF: 17)
    3ec4:	03000009 	movweq	r0, #9
    3ec8:	0001cc00 	andeq	ip, r1, r0, lsl #24
    3ecc:	fb010200 	blx	446d6 <__ccfg+0x2472e>
    3ed0:	01000d0e 	tsteq	r0, lr, lsl #26
    3ed4:	00010101 	andeq	r0, r1, r1, lsl #2
    3ed8:	00010000 	andeq	r0, r1, r0
    3edc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ee0:	2f656d6f 	svccs	0x00656d6f
    3ee4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3ee8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3ef0 <__exidx_end+0x1074>
    3eec:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3ef0:	4f2f706f 	svcmi	0x002f706f
    3ef4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3ef8:	502f5445 	eorpl	r5, pc, r5, asr #8
    3efc:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f00:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f04:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f08:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3f0c:	6f74532f 	svcvs	0x0074532f
    3f10:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3f14:	6f682f00 	svcvs	0x00682f00
    3f18:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3d6c <__exidx_end+0xef0>
    3f1c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3f20:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3f24:	6f746b73 	svcvs	0x00746b73
    3f28:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3f2c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3f30:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3f34:	2f534f43 	svccs	0x00534f43
    3f38:	4f636950 	svcmi	0x00636950
    3f3c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3f40:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f44:	3143432f 	cmpcc	r3, pc, lsr #6
    3f48:	57585833 	smmlarpl	r8, r3, r8, r5
    3f4c:	2f455241 	svccs	0x00455241
    3f50:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3f54:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3f58:	752f0062 	strvc	r0, [pc, #-98]!	; 3efe <__exidx_end+0x1082>
    3f5c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3d98 <__exidx_end+0xf1c>
    3f60:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3f64:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3f68:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3f6c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3f70:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3f74:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3f78:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3f7c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3f80:	2f006564 	svccs	0x00006564
    3f84:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3f88:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3f8c:	2f6e6974 	svccs	0x006e6974
    3f90:	6b736544 	blvs	1cdd4a8 <__ccfg+0x1cbd500>
    3f94:	2f706f74 	svccs	0x00706f74
    3f98:	4f534c4f 	svcmi	0x00534c4f
    3f9c:	2f54454e 	svccs	0x0054454e
    3fa0:	4f434950 	svcmi	0x00434950
    3fa4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fa8:	2f534f63 	svccs	0x00534f63
    3fac:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fb0:	2f005858 	svccs	0x00005858
    3fb4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fb8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fbc:	2f6e6974 	svccs	0x006e6974
    3fc0:	6b736544 	blvs	1cdd4d8 <__ccfg+0x1cbd530>
    3fc4:	2f706f74 	svccs	0x00706f74
    3fc8:	4f534c4f 	svcmi	0x00534c4f
    3fcc:	2f54454e 	svccs	0x0054454e
    3fd0:	4f434950 	svcmi	0x00434950
    3fd4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fd8:	00534f63 	subseq	r4, r3, r3, ror #30
    3fdc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f28 <__exidx_end+0x10ac>
    3fe0:	616d2f65 	cmnvs	sp, r5, ror #30
    3fe4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3fe8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fec:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ff0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ff4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3ff8:	4349502f 	movtmi	r5, #36911	; 0x902f
    3ffc:	502f534f 	eorpl	r5, pc, pc, asr #6
    4000:	534f6369 	movtpl	r6, #62313	; 0xf369
    4004:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4008:	006c656e 	rsbeq	r6, ip, lr, ror #10
    400c:	6f747300 	svcvs	0x00747300
    4010:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4014:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    4018:	30387235 	eorscc	r7, r8, r5, lsr r2
    401c:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    4020:	00000100 	andeq	r0, r0, r0, lsl #2
    4024:	6f697067 	svcvs	0x00697067
    4028:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    402c:	74730000 	ldrbtvc	r0, [r3], #-0
    4030:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4034:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    4038:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 3e80 <__exidx_end+0x1004>
    403c:	0100682e 	tsteq	r0, lr, lsr #16
    4040:	74730000 	ldrbtvc	r0, [r3], #-0
    4044:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4048:	0300682e 	movweq	r6, #2094	; 0x82e
    404c:	72610000 	rsbvc	r0, r1, #0
    4050:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4054:	00000400 	andeq	r0, r0, r0, lsl #8
    4058:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    405c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4060:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4064:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4068:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    406c:	00000400 	andeq	r0, r0, r0, lsl #8
    4070:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4074:	5f736e6f 	svcpl	0x00736e6f
    4078:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    407c:	00040068 	andeq	r0, r4, r8, rrx
    4080:	73797300 	cmnvc	r9, #0, 6
    4084:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4088:	00000500 	andeq	r0, r0, r0, lsl #10
    408c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4090:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4094:	00000600 	andeq	r0, r0, r0, lsl #12
    4098:	00190500 	andseq	r0, r9, r0, lsl #10
    409c:	163c0205 	ldrtne	r0, [ip], -r5, lsl #4
    40a0:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    40a4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    40a8:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    40ac:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    40b0:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    40b4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40b8:	20028a03 	andcs	r8, r2, r3, lsl #20
    40bc:	19050104 	stmdbne	r5, {r2, r8}
    40c0:	2e7df103 	expcse	f7, f3
    40c4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40c8:	2002c503 	andcs	ip, r2, r3, lsl #10
    40cc:	d0030f05 	andle	r0, r3, r5, lsl #30
    40d0:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    40d4:	2000fa03 	andcs	pc, r0, r3, lsl #20
    40d8:	03050104 	movweq	r0, #20740	; 0x5104
    40dc:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    40e0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    40e4:	8f03060f 	svchi	0x0003060f
    40e8:	01040101 	tsteq	r4, r1, lsl #2
    40ec:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    40f0:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    40f4:	1f050521 	svcne	0x00050521
    40f8:	21060305 	tstcs	r6, r5, lsl #6
    40fc:	29050204 	stmdbcs	r5, {r2, r9}
    4100:	01018903 	tsteq	r1, r3, lsl #18
    4104:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4108:	03040501 	movweq	r0, #17665	; 0x4501
    410c:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    4110:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4114:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    4118:	03290502 			; <UNDEFINED> instruction: 0x03290502
    411c:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4120:	01041705 	tsteq	r4, r5, lsl #14
    4124:	03060205 	movweq	r0, #25093	; 0x6205
    4128:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    412c:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4130:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4134:	06030501 	streq	r0, [r3], -r1, lsl #10
    4138:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    413c:	29050204 	stmdbcs	r5, {r2, r9}
    4140:	0102b603 	tsteq	r2, r3, lsl #12
    4144:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4148:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    414c:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4150:	207dc003 	rsbscs	ip, sp, r3
    4154:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    4158:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    415c:	20090301 	andcs	r0, r9, r1, lsl #6
    4160:	01000702 	tsteq	r0, r2, lsl #14
    4164:	001f0501 	andseq	r0, pc, r1, lsl #10
    4168:	16700205 	ldrbtne	r0, [r0], -r5, lsl #4
    416c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4170:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4174:	010e0514 	tsteq	lr, r4, lsl r5
    4178:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    417c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4180:	01ff032d 	mvnseq	r0, sp, lsr #6
    4184:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    4188:	86030603 	strhi	r0, [r3], -r3, lsl #12
    418c:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    4190:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4194:	02042f06 	andeq	r2, r4, #6, 30
    4198:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    419c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41a0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41a8:	89030604 	stmdbhi	r3, {r2, r9, sl}
    41ac:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    41b0:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    41b4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41b8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41bc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41c0:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    41c4:	0204207d 	andeq	r2, r4, #125	; 0x7d
    41c8:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    41cc:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41d0:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41d4:	017e8c03 	cmneq	lr, r3, lsl #24
    41d8:	79030205 	stmdbvc	r3, {r0, r2, r9}
    41dc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    41e0:	01fb032d 	mvnseq	r0, sp, lsr #6
    41e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41e8:	8b030603 	blhi	c59fc <__ccfg+0xa5a54>
    41ec:	0204207e 	andeq	r2, r4, #126	; 0x7e
    41f0:	a6032905 	strge	r2, [r3], -r5, lsl #18
    41f4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41f8:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41fc:	017dd603 	cmneq	sp, r3, lsl #12
    4200:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4204:	2002aa03 	andcs	sl, r2, r3, lsl #20
    4208:	03050104 	movweq	r0, #20740	; 0x5104
    420c:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4210:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    4214:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    4218:	06020501 	streq	r0, [r2], -r1, lsl #10
    421c:	03010501 	movweq	r0, #5377	; 0x1501
    4220:	05022009 	streq	r2, [r2, #-9]
    4224:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4228:	0205001e 	andeq	r0, r5, #30
    422c:	000016a0 	andeq	r1, r0, r0, lsr #13
    4230:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4234:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    4238:	cf032905 	svcgt	0x00032905
    423c:	3d050103 	stfccs	f0, [r5, #-12]
    4240:	17050514 	smladne	r5, r4, r5, r0
    4244:	01063805 	tsteq	r6, r5, lsl #16
    4248:	1e050104 	adfnes	f0, f5, f4
    424c:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4250:	38050204 	stmdacc	r5, {r2, r9}
    4254:	2003d803 	andcs	sp, r3, r3, lsl #16
    4258:	02050104 	andeq	r0, r5, #4, 2
    425c:	7cab0306 	stcvc	3, cr0, [fp], #24
    4260:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4264:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    4268:	3d050103 	stfccs	f0, [r5, #-12]
    426c:	17050514 	smladne	r5, r4, r5, r0
    4270:	01063805 	tsteq	r6, r5, lsl #16
    4274:	01050104 	tsteq	r5, r4, lsl #2
    4278:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    427c:	01000402 	tsteq	r0, r2, lsl #8
    4280:	00270501 	eoreq	r0, r7, r1, lsl #10
    4284:	16b80205 	ldrtne	r0, [r8], r5, lsl #4
    4288:	d7030000 	strle	r0, [r3, -r0]
    428c:	02050100 	andeq	r0, r5, #0, 2
    4290:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4294:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    4298:	ba033805 	blt	d22b4 <__ccfg+0xb230c>
    429c:	01042e03 	tsteq	r4, r3, lsl #28
    42a0:	ca030905 	bgt	c66bc <__ccfg+0xa6714>
    42a4:	0204207c 	andeq	r2, r4, #124	; 0x7c
    42a8:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    42ac:	01042e03 	tsteq	r4, r3, lsl #28
    42b0:	03060805 	movweq	r0, #26629	; 0x6805
    42b4:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    42b8:	3c730302 	ldclcc	3, cr0, [r3], #-8
    42bc:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    42c0:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    42c4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42c8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    42d0:	017cc003 	cmneq	ip, r3
    42d4:	38050204 	stmdacc	r5, {r2, r9}
    42d8:	2003c003 	andcs	ip, r3, r3
    42dc:	02050104 	andeq	r0, r5, #4, 2
    42e0:	7cc00306 	stclvc	3, cr0, [r0], {6}
    42e4:	06052f20 	streq	r2, [r5], -r0, lsr #30
    42e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    42ec:	02042f06 	andeq	r2, r4, #6, 30
    42f0:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    42f4:	3d050103 	stfccs	f0, [r5, #-12]
    42f8:	17050514 	smladne	r5, r4, r5, r0
    42fc:	01063805 	tsteq	r6, r5, lsl #16
    4300:	02050104 	andeq	r0, r5, #4, 2
    4304:	7cc30306 	stclvc	3, cr0, [r3], {6}
    4308:	060f052e 	streq	r0, [pc], -lr, lsr #10
    430c:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4310:	03060305 	movweq	r0, #25349	; 0x6305
    4314:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    4318:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    431c:	4b4c4b06 	blmi	1316f3c <__ccfg+0x12f6f94>
    4320:	01000702 	tsteq	r0, r2, lsl #14
    4324:	00160501 	andseq	r0, r6, r1, lsl #10
    4328:	170c0205 	strne	r0, [ip, -r5, lsl #4]
    432c:	81030000 	mrshi	r0, (UNDEF: 3)
    4330:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4334:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4338:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    433c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4340:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4344:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    4348:	01050106 	tsteq	r5, r6, lsl #2
    434c:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4350:	0302051b 	movweq	r0, #9499	; 0x251b
    4354:	01010166 	tsteq	r1, r6, ror #2
    4358:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    435c:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4360:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4364:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4368:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    436c:	03020501 	movweq	r0, #9473	; 0x2501
    4370:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4374:	03380502 	teqeq	r8, #8388608	; 0x800000
    4378:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    437c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4380:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4384:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4388:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    438c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4390:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4394:	06020501 	streq	r0, [r2], -r1, lsl #10
    4398:	017ce303 	cmneq	ip, r3, lsl #6
    439c:	38050204 	stmdacc	r5, {r2, r9}
    43a0:	20039d03 	andcs	r9, r3, r3, lsl #26
    43a4:	02050104 	andeq	r0, r5, #4, 2
    43a8:	7ce30306 	stclvc	3, cr0, [r3], #24
    43ac:	03030520 	movweq	r0, #13600	; 0x3520
    43b0:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    43b4:	09020106 	stmdbeq	r2, {r1, r2, r8}
    43b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43bc:	02050017 	andeq	r0, r5, #23
    43c0:	0000174c 	andeq	r1, r0, ip, asr #14
    43c4:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    43c8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    43cc:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    43d0:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    43d4:	06030520 	streq	r0, [r3], -r0, lsr #10
    43d8:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    43dc:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    43e0:	3c130303 	ldccc	3, cr0, [r3], {3}
    43e4:	01060905 	tsteq	r6, r5, lsl #18
    43e8:	2f060305 	svccs	0x00060305
    43ec:	01050101 	tsteq	r5, r1, lsl #2
    43f0:	03021406 	movweq	r1, #9222	; 0x2406
    43f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43f8:	02050011 	andeq	r0, r5, #17
    43fc:	00001770 	andeq	r1, r0, r0, ror r7
    4400:	01019203 	tsteq	r1, r3, lsl #4
    4404:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4408:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    440c:	2f062402 	svccs	0x00062402
    4410:	01060805 	tsteq	r6, r5, lsl #16
    4414:	0e030105 	adfeqs	f0, f3, f5
    4418:	0308052e 	movweq	r0, #34094	; 0x852e
    441c:	02052072 	andeq	r2, r5, #114	; 0x72
    4420:	200d0306 	andcs	r0, sp, r6, lsl #6
    4424:	13060105 	movwne	r0, #24837	; 0x6105
    4428:	01000302 	tsteq	r0, r2, lsl #6
    442c:	00120501 	andseq	r0, r2, r1, lsl #10
    4430:	17840205 	strne	r0, [r4, r5, lsl #4]
    4434:	a7030000 	strge	r0, [r3, -r0]
    4438:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    443c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4440:	20050501 	andcs	r0, r5, r1, lsl #10
    4444:	2f060305 	svccs	0x00060305
    4448:	01060905 	tsteq	r6, r5, lsl #18
    444c:	2f060305 	svccs	0x00060305
    4450:	30060105 	andcc	r0, r6, r5, lsl #2
    4454:	01000302 	tsteq	r0, r2, lsl #6
    4458:	002b0501 	eoreq	r0, fp, r1, lsl #10
    445c:	00000205 	andeq	r0, r0, r5, lsl #4
    4460:	af030000 	svcge	0x00030000
    4464:	20060101 	andcs	r0, r6, r1, lsl #2
    4468:	30060205 	andcc	r0, r6, r5, lsl #4
    446c:	01060505 	tsteq	r6, r5, lsl #10
    4470:	31060205 	tstcc	r6, r5, lsl #4
    4474:	01060505 	tsteq	r6, r5, lsl #10
    4478:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    447c:	02052012 	andeq	r2, r5, #18
    4480:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4484:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4488:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    448c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4490:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4494:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4498:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    449c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    44a0:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    44a4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    44a8:	aa030602 	bge	c5cb8 <__ccfg+0xa5d10>
    44ac:	4b2f207d 	blmi	bcc6a8 <__ccfg+0xbac700>
    44b0:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    44b4:	31020520 	tstcc	r2, r0, lsr #10
    44b8:	29050204 	stmdbcs	r5, {r2, r9}
    44bc:	0102c703 	tsteq	r2, r3, lsl #14
    44c0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    44c4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    44c8:	01040106 	tsteq	r4, r6, lsl #2
    44cc:	03060205 	movweq	r0, #25093	; 0x6205
    44d0:	302e7db4 	strhtcc	r7, [lr], -r4
    44d4:	13060105 	movwne	r0, #24837	; 0x6105
    44d8:	03060305 	movweq	r0, #25349	; 0x6305
    44dc:	0a052e79 	beq	14fec8 <__ccfg+0x12ff20>
    44e0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    44e4:	030a052e 	movweq	r0, #42286	; 0xa52e
    44e8:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    44ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    44f0:	02050031 	andeq	r0, r5, #49	; 0x31
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	0101ca03 	tsteq	r1, r3, lsl #20
    44fc:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4500:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4504:	3105220c 	tstcc	r5, ip, lsl #4
    4508:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    450c:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4510:	03053005 	movweq	r3, #20485	; 0x5005
    4514:	06053206 	streq	r3, [r5], -r6, lsl #4
    4518:	17050106 	strne	r0, [r5, -r6, lsl #2]
    451c:	20060520 	andcs	r0, r6, r0, lsr #10
    4520:	30060305 	andcc	r0, r6, r5, lsl #6
    4524:	01060605 	tsteq	r6, r5, lsl #12
    4528:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    452c:	30320603 	eorscc	r0, r2, r3, lsl #12
    4530:	0a030405 	beq	c554c <__ccfg+0xa55a4>
    4534:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    4538:	20090501 	andcs	r0, r9, r1, lsl #10
    453c:	05201005 	streq	r1, [r0, #-5]!
    4540:	04052009 	streq	r2, [r5], #-9
    4544:	11052206 	tstne	r5, r6, lsl #4
    4548:	09050106 	stmdbeq	r5, {r1, r2, r8}
    454c:	201f0520 	andscs	r0, pc, r0, lsr #10
    4550:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4554:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    4558:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    455c:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4560:	0b053106 	bleq	150980 <__ccfg+0x1309d8>
    4564:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4568:	052f2f06 	streq	r2, [pc, #-3846]!	; 366a <__exidx_end+0x7ee>
    456c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4570:	20310301 	eorscs	r0, r1, r1, lsl #6
    4574:	03060405 	movweq	r0, #25605	; 0x6405
    4578:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    457c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4580:	20250520 	eorcs	r0, r5, r0, lsr #10
    4584:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    4588:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    458c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4590:	0b052804 	bleq	14e5a8 <__ccfg+0x12e600>
    4594:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    4598:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    459c:	03063805 	movweq	r3, #26629	; 0x6805
    45a0:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    45a4:	03040501 	movweq	r0, #17665	; 0x4501
    45a8:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    45ac:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    45b0:	0204207e 	andeq	r2, r4, #126	; 0x7e
    45b4:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    45b8:	3d050103 	stfccs	f0, [r5, #-12]
    45bc:	17050514 	smladne	r5, r4, r5, r0
    45c0:	01063805 	tsteq	r6, r5, lsl #16
    45c4:	02050104 	andeq	r0, r5, #4, 2
    45c8:	7cb20306 	ldcvc	3, cr0, [r2], #24
    45cc:	4b4b2f20 	blmi	12d0254 <__ccfg+0x12b02ac>
    45d0:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    45d4:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    45d8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    45dc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45e0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    45e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    45e8:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    45ec:	03060b05 	movweq	r0, #27397	; 0x6b05
    45f0:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    45f4:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    45f8:	01061305 	tsteq	r6, r5, lsl #6
    45fc:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4600:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4604:	06050520 	streq	r0, [r5], -r0, lsr #10
    4608:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    460c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4610:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4614:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    4618:	03060405 	movweq	r0, #25605	; 0x6405
    461c:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4620:	03010609 	movweq	r0, #5641	; 0x1609
    4624:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    4628:	6b032106 	blvs	cca48 <__ccfg+0xacaa0>
    462c:	0b035920 	bleq	daab4 <__ccfg+0xbab0c>
    4630:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4634:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4638:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    463c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4640:	ba030603 	blt	c5e54 <__ccfg+0xa5eac>
    4644:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    4648:	09050106 	stmdbeq	r5, {r1, r2, r8}
    464c:	0100083b 	tsteq	r0, fp, lsr r8
    4650:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4654:	00000205 	andeq	r0, r0, r5, lsl #4
    4658:	a0030000 	andge	r0, r3, r0
    465c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4660:	3b051414 	blcc	1496b8 <__ccfg+0x129710>
    4664:	0c050e06 	stceq	14, cr0, [r5], {6}
    4668:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    466c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4670:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4674:	06030532 			; <UNDEFINED> instruction: 0x06030532
    4678:	06060532 			; <UNDEFINED> instruction: 0x06060532
    467c:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4680:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4684:	053f0603 	ldreq	r0, [pc, #-1539]!	; 4089 <__exidx_end+0x120d>
    4688:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    468c:	052f0603 	streq	r0, [pc, #-1539]!	; 4091 <__exidx_end+0x1215>
    4690:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4694:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    4698:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    469c:	2f300603 	svccs	0x00300603
    46a0:	01060905 	tsteq	r6, r5, lsl #18
    46a4:	30060305 	andcc	r0, r6, r5, lsl #6
    46a8:	01060c05 	tsteq	r6, r5, lsl #24
    46ac:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    46b0:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    46b4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    46b8:	2f210604 	svccs	0x00210604
    46bc:	03060105 	movweq	r0, #24837	; 0x6105
    46c0:	03050122 	movweq	r0, #20770	; 0x5122
    46c4:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    46c8:	01061105 	tsteq	r6, r5, lsl #2
    46cc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    46d0:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    46d4:	304a0624 	subcc	r0, sl, r4, lsr #12
    46d8:	29050204 	stmdbcs	r5, {r2, r9}
    46dc:	0101c803 	tsteq	r1, r3, lsl #16
    46e0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    46e4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    46e8:	01040106 	tsteq	r4, r6, lsl #2
    46ec:	b3030305 	movwlt	r0, #13061	; 0x3305
    46f0:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    46f4:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    46f8:	01042001 	tsteq	r4, r1
    46fc:	03060305 	movweq	r0, #25349	; 0x6305
    4700:	2f2e7eb3 	svccs	0x002e7eb3
    4704:	01061905 	tsteq	r6, r5, lsl #18
    4708:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    470c:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4710:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4714:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    4718:	2308052e 	movwcs	r0, #34094	; 0x852e
    471c:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4720:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4724:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4728:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    472c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4730:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4734:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4738:	c1030602 	tstgt	r3, r2, lsl #12
    473c:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4740:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4744:	054b4006 	strbeq	r4, [fp, #-6]
    4748:	20730304 	rsbscs	r0, r3, r4, lsl #6
    474c:	01061305 	tsteq	r6, r5, lsl #6
    4750:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4754:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    4758:	06040501 	streq	r0, [r4], -r1, lsl #10
    475c:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4760:	030b0501 	movweq	r0, #46337	; 0xb501
    4764:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    4768:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    476c:	02050012 	andeq	r0, r5, #18
    4770:	00000000 	andeq	r0, r0, r0
    4774:	0102da03 	tsteq	r2, r3, lsl #20
    4778:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    477c:	01010001 	tsteq	r1, r1
    4780:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4784:	00000002 	andeq	r0, r0, r2
    4788:	02df0300 	sbcseq	r0, pc, #0, 6
    478c:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    4790:	13060105 	movwne	r0, #24837	; 0x6105
    4794:	01000202 	tsteq	r0, r2, lsl #4
    4798:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    479c:	02050029 	andeq	r0, r5, #41	; 0x29
    47a0:	00000000 	andeq	r0, r0, r0
    47a4:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    47a8:	01060505 	tsteq	r6, r5, lsl #10
    47ac:	21060305 	tstcs	r6, r5, lsl #6
    47b0:	01060705 	tsteq	r6, r5, lsl #14
    47b4:	30060205 	andcc	r0, r6, r5, lsl #4
    47b8:	01060505 	tsteq	r6, r5, lsl #10
    47bc:	21060305 	tstcs	r6, r5, lsl #6
    47c0:	01060805 	tsteq	r6, r5, lsl #16
    47c4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    47c8:	13060105 	movwne	r0, #24837	; 0x6105
    47cc:	01000302 	tsteq	r0, r2, lsl #6
    47d0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    47d4:	02050017 	andeq	r0, r5, #23
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    47e0:	17051402 	strne	r1, [r5, -r2, lsl #8]
    47e4:	02051006 	andeq	r1, r5, #6
    47e8:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    47ec:	13060105 	movwne	r0, #24837	; 0x6105
    47f0:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    47f4:	01010002 	tsteq	r1, r2
    47f8:	000001c1 	andeq	r0, r0, r1, asr #3
    47fc:	01210003 			; <UNDEFINED> instruction: 0x01210003
    4800:	01020000 	mrseq	r0, (UNDEF: 2)
    4804:	000d0efb 	strdeq	r0, [sp], -fp
    4808:	01010101 	tsteq	r1, r1, lsl #2
    480c:	01000000 	mrseq	r0, (UNDEF: 0)
    4810:	2f010000 	svccs	0x00010000
    4814:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4818:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    481c:	2f6e6974 	svccs	0x006e6974
    4820:	6b736544 	blvs	1cddd38 <__ccfg+0x1cbdd90>
    4824:	2f706f74 	svccs	0x00706f74
    4828:	4f534c4f 	svcmi	0x00534c4f
    482c:	2f54454e 	svccs	0x0054454e
    4830:	4f434950 	svcmi	0x00434950
    4834:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4838:	2f534f63 	svccs	0x00534f63
    483c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4840:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4844:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4848:	73752f00 	cmnvc	r5, #0, 30
    484c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4850:	63672f62 	cmnvs	r7, #392	; 0x188
    4854:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4858:	6f6e2d6d 	svcvs	0x006e2d6d
    485c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4860:	2f696261 	svccs	0x00696261
    4864:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4868:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    486c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4870:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4874:	2f656d6f 	svccs	0x00656d6f
    4878:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    487c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4884 <__exidx_end+0x1a08>
    4880:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4884:	4f2f706f 	svcmi	0x002f706f
    4888:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    488c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4890:	534f4349 	movtpl	r4, #62281	; 0xf349
    4894:	6369502f 	cmnvs	r9, #47	; 0x2f
    4898:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    489c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    48a0:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    48a4:	2f656d6f 	svccs	0x00656d6f
    48a8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    48ac:	442f6e69 	strtmi	r6, [pc], #-3689	; 48b4 <__exidx_end+0x1a38>
    48b0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    48b4:	4f2f706f 	svcmi	0x002f706f
    48b8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    48bc:	502f5445 	eorpl	r5, pc, r5, asr #8
    48c0:	534f4349 	movtpl	r4, #62281	; 0xf349
    48c4:	6369502f 	cmnvs	r9, #47	; 0x2f
    48c8:	0000534f 	andeq	r5, r0, pc, asr #6
    48cc:	5f726573 	svcpl	0x00726573
    48d0:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    48d4:	00000100 	andeq	r0, r0, r0, lsl #2
    48d8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    48dc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    48e0:	00000200 	andeq	r0, r0, r0, lsl #4
    48e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    48e8:	0300682e 	movweq	r6, #2094	; 0x82e
    48ec:	616d0000 	cmnvs	sp, r0
    48f0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    48f4:	00000300 	andeq	r0, r0, r0, lsl #6
    48f8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    48fc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4900:	0300682e 	movweq	r6, #2094	; 0x82e
    4904:	75620000 	strbvc	r0, [r2, #-0]!
    4908:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    490c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4910:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4914:	73000003 	movwvc	r0, #3
    4918:	6f697379 	svcvs	0x00697379
    491c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4920:	05000000 	streq	r0, [r0, #-0]
    4924:	0205002a 	andeq	r0, r5, #42	; 0x2a
    4928:	00001798 	muleq	r0, r8, r7
    492c:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    4930:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    4934:	7a03062a 	bvc	c61e4 <__ccfg+0xa623c>
    4938:	05052001 	streq	r2, [r5, #-1]
    493c:	06020534 			; <UNDEFINED> instruction: 0x06020534
    4940:	06100532 			; <UNDEFINED> instruction: 0x06100532
    4944:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4948:	21060305 	tstcs	r6, r5, lsl #6
    494c:	01060f05 	tsteq	r6, r5, lsl #30
    4950:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4954:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4958:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    495c:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4960:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4964:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4968:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    496c:	054f0205 	strbeq	r0, [pc, #-517]	; 476f <__exidx_end+0x18f3>
    4970:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4974:	052f0603 	streq	r0, [pc, #-1539]!	; 4379 <__exidx_end+0x14fd>
    4978:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    497c:	02052008 	andeq	r2, r5, #8
    4980:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    4984:	03050106 	movweq	r0, #20742	; 0x5106
    4988:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    498c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4990:	3d593e06 	ldclcc	14, cr3, [r9, #-24]	; 0xffffffe8
    4994:	01060c05 	tsteq	r6, r5, lsl #24
    4998:	2f060205 	svccs	0x00060205
    499c:	01060505 	tsteq	r6, r5, lsl #10
    49a0:	2f060305 	svccs	0x00060305
    49a4:	01060e05 	tsteq	r6, r5, lsl #28
    49a8:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
    49ac:	75030603 	strvc	r0, [r3, #-1539]	; 0xfffff9fd
    49b0:	060a052e 	streq	r0, [sl], -lr, lsr #10
    49b4:	4a6e0301 	bmi	1b855c0 <__ccfg+0x1b65618>
    49b8:	01000702 	tsteq	r0, r2, lsl #14
    49bc:	00019e01 	andeq	r9, r1, r1, lsl #28
    49c0:	3d000300 	stccc	3, cr0, [r0, #-0]
    49c4:	02000001 	andeq	r0, r0, #1
    49c8:	0d0efb01 	vstreq	d15, [lr, #-4]
    49cc:	01010100 	mrseq	r0, (UNDEF: 17)
    49d0:	00000001 	andeq	r0, r0, r1
    49d4:	01000001 	tsteq	r0, r1
    49d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4924 <__exidx_end+0x1aa8>
    49dc:	616d2f65 	cmnvs	sp, r5, ror #30
    49e0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    49e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    49e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    49ec:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    49f0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    49f4:	4349502f 	movtmi	r5, #36911	; 0x902f
    49f8:	502f534f 	eorpl	r5, pc, pc, asr #6
    49fc:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a00:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4a04:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4a08:	61697265 	cmnvs	r9, r5, ror #4
    4a0c:	752f006c 	strvc	r0, [pc, #-108]!	; 49a8 <__exidx_end+0x1b2c>
    4a10:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 484c <__exidx_end+0x19d0>
    4a14:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4a18:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4a1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4a20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4a24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4a28:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4a2c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4a30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4a34:	2f006564 	svccs	0x00006564
    4a38:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a3c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a40:	2f6e6974 	svccs	0x006e6974
    4a44:	6b736544 	blvs	1cddf5c <__ccfg+0x1cbdfb4>
    4a48:	2f706f74 	svccs	0x00706f74
    4a4c:	4f534c4f 	svcmi	0x00534c4f
    4a50:	2f54454e 	svccs	0x0054454e
    4a54:	4f434950 	svcmi	0x00434950
    4a58:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a5c:	2f534f63 	svccs	0x00534f63
    4a60:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4a64:	2f005858 	svccs	0x00005858
    4a68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a6c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a70:	2f6e6974 	svccs	0x006e6974
    4a74:	6b736544 	blvs	1cddf8c <__ccfg+0x1cbdfe4>
    4a78:	2f706f74 	svccs	0x00706f74
    4a7c:	4f534c4f 	svcmi	0x00534c4f
    4a80:	2f54454e 	svccs	0x0054454e
    4a84:	4f434950 	svcmi	0x00434950
    4a88:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a8c:	00534f63 	subseq	r4, r3, r3, ror #30
    4a90:	72657300 	rsbvc	r7, r5, #0, 6
    4a94:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4a98:	00632e66 	rsbeq	r2, r3, r6, ror #28
    4a9c:	73000001 	movwvc	r0, #1
    4aa0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4aa4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4aa8:	73000002 	movwvc	r0, #2
    4aac:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    4ab0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4ab4:	61000002 	tstvs	r0, r2
    4ab8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4abc:	00030068 	andeq	r0, r3, r8, rrx
    4ac0:	63616d00 	cmnvs	r1, #0, 26
    4ac4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4ac8:	70000003 	andvc	r0, r0, r3
    4acc:	5f736e69 	svcpl	0x00736e69
    4ad0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4ad4:	00030068 	andeq	r0, r3, r8, rrx
    4ad8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4adc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4ae0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4ae4:	0300682e 	movweq	r6, #2094	; 0x82e
    4ae8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4aec:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4af0:	00040068 	andeq	r0, r4, r8, rrx
    4af4:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4af8:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4afc:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4b00:	00000000 	andeq	r0, r0, r0
    4b04:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    4b08:	00181002 	andseq	r1, r8, r2
    4b0c:	010b0300 	mrseq	r0, (UNDEF: 59)
    4b10:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4b14:	2c051413 	cfstrscs	mvf1, [r5], {19}
    4b18:	017a0306 	cmneq	sl, r6, lsl #6
    4b1c:	260e052e 	strcs	r0, [lr], -lr, lsr #10
    4b20:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    4b24:	3d300603 	ldccc	6, cr0, [r0, #-12]!
    4b28:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    4b2c:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
    4b30:	22060d05 	andcs	r0, r6, #320	; 0x140
    4b34:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    4b38:	060d0522 	streq	r0, [sp], -r2, lsr #10
    4b3c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4b40:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4b44:	054e0205 	strbeq	r0, [lr, #-517]	; 0xfffffdfb
    4b48:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4b4c:	03054a05 	movweq	r4, #23045	; 0x5a05
    4b50:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4b54:	01052402 	tsteq	r5, r2, lsl #8
    4b58:	09021306 	stmdbeq	r2, {r1, r2, r8, r9, ip}
    4b5c:	af010100 	svcge	0x00010100
    4b60:	03000001 	movweq	r0, #1
    4b64:	00013c00 	andeq	r3, r1, r0, lsl #24
    4b68:	fb010200 	blx	45372 <__ccfg+0x253ca>
    4b6c:	01000d0e 	tsteq	r0, lr, lsl #26
    4b70:	00010101 	andeq	r0, r1, r1, lsl #2
    4b74:	00010000 	andeq	r0, r1, r0
    4b78:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4b7c:	2f656d6f 	svccs	0x00656d6f
    4b80:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4b84:	442f6e69 	strtmi	r6, [pc], #-3689	; 4b8c <__exidx_end+0x1d10>
    4b88:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4b8c:	4f2f706f 	svcmi	0x002f706f
    4b90:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4b94:	502f5445 	eorpl	r5, pc, r5, asr #8
    4b98:	534f4349 	movtpl	r4, #62281	; 0xf349
    4b9c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4ba0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4ba4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4ba8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4bac:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4bb0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4bb4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4bb8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4bbc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4bc0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4bc4:	61652d65 	cmnvs	r5, r5, ror #26
    4bc8:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4bcc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4bd0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4bd4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4bd8:	6f682f00 	svcvs	0x00682f00
    4bdc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a30 <__exidx_end+0x1bb4>
    4be0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4be4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4be8:	6f746b73 	svcvs	0x00746b73
    4bec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4bf0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4bf4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4bf8:	2f534f43 	svccs	0x00534f43
    4bfc:	4f636950 	svcmi	0x00636950
    4c00:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4c04:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4c08:	6f682f00 	svcvs	0x00682f00
    4c0c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a60 <__exidx_end+0x1be4>
    4c10:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4c14:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4c18:	6f746b73 	svcvs	0x00746b73
    4c1c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4c20:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4c24:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4c28:	2f534f43 	svccs	0x00534f43
    4c2c:	4f636950 	svcmi	0x00636950
    4c30:	73000053 	movwvc	r0, #83	; 0x53
    4c34:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4c38:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    4c3c:	00000100 	andeq	r0, r0, r0, lsl #2
    4c40:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4c44:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4c48:	00000200 	andeq	r0, r0, r0, lsl #4
    4c4c:	61647473 	smcvs	18243	; 0x4743
    4c50:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4c54:	00000200 	andeq	r0, r0, r0, lsl #4
    4c58:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4c5c:	0300682e 	movweq	r6, #2094	; 0x82e
    4c60:	616d0000 	cmnvs	sp, r0
    4c64:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4c68:	00000300 	andeq	r0, r0, r0, lsl #6
    4c6c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4c70:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4c74:	0300682e 	movweq	r6, #2094	; 0x82e
    4c78:	75620000 	strbvc	r0, [r2, #-0]!
    4c7c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4c80:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c84:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c88:	73000003 	movwvc	r0, #3
    4c8c:	6f697379 	svcvs	0x00697379
    4c90:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4c94:	623c0000 	eorsvs	r0, ip, #0
    4c98:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4c9c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4ca0:	00000000 	andeq	r0, r0, r0
    4ca4:	002d0500 	eoreq	r0, sp, r0, lsl #10
    4ca8:	18640205 	stmdane	r4!, {r0, r2, r9}^
    4cac:	0d030000 	stceq	0, cr0, [r3, #-0]
    4cb0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    4cb4:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    4cb8:	01780306 	cmneq	r8, r6, lsl #6
    4cbc:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    4cc0:	23060205 	movwcs	r0, #25093	; 0x6205
    4cc4:	01061005 	tsteq	r6, r5
    4cc8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ccc:	052f0603 	streq	r0, [pc, #-1539]!	; 46d1 <__exidx_end+0x1855>
    4cd0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4cd4:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4cd8:	0b052106 	bleq	14d0f8 <__ccfg+0x12d150>
    4cdc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4ce0:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4ce4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4ce8:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4cec:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    4cf0:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    4cf4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4cf8:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    4cfc:	01060c05 	tsteq	r6, r5, lsl #24
    4d00:	30060205 	andcc	r0, r6, r5, lsl #4
    4d04:	13060105 	movwne	r0, #24837	; 0x6105
    4d08:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    4d0c:	00060266 	andeq	r0, r6, r6, ror #4
    4d10:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    4d14:	00030000 	andeq	r0, r3, r0
    4d18:	00000126 	andeq	r0, r0, r6, lsr #2
    4d1c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d20:	0101000d 	tsteq	r1, sp
    4d24:	00000101 	andeq	r0, r0, r1, lsl #2
    4d28:	00000100 	andeq	r0, r0, r0, lsl #2
    4d2c:	6f682f01 	svcvs	0x00682f01
    4d30:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b84 <__exidx_end+0x1d08>
    4d34:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d38:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d3c:	6f746b73 	svcvs	0x00746b73
    4d40:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d44:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d48:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d4c:	2f534f43 	svccs	0x00534f43
    4d50:	4f636950 	svcmi	0x00636950
    4d54:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4d58:	2f736269 	svccs	0x00736269
    4d5c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4d60:	2f006c61 	svccs	0x00006c61
    4d64:	2f727375 	svccs	0x00727375
    4d68:	2f62696c 	svccs	0x0062696c
    4d6c:	2f636367 	svccs	0x00636367
    4d70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d7c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4d80:	2f312e32 	svccs	0x00312e32
    4d84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d88:	00656475 	rsbeq	r6, r5, r5, ror r4
    4d8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4cd8 <__exidx_end+0x1e5c>
    4d90:	616d2f65 	cmnvs	sp, r5, ror #30
    4d94:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d98:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4d9c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4da0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4da4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4da8:	4349502f 	movtmi	r5, #36911	; 0x902f
    4dac:	502f534f 	eorpl	r5, pc, pc, asr #6
    4db0:	534f6369 	movtpl	r6, #62313	; 0xf369
    4db4:	3143432f 	cmpcc	r3, pc, lsr #6
    4db8:	00585833 	subseq	r5, r8, r3, lsr r8
    4dbc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4d08 <__exidx_end+0x1e8c>
    4dc0:	616d2f65 	cmnvs	sp, r5, ror #30
    4dc4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4dc8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4dcc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4dd0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4dd4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4dd8:	4349502f 	movtmi	r5, #36911	; 0x902f
    4ddc:	502f534f 	eorpl	r5, pc, pc, asr #6
    4de0:	534f6369 	movtpl	r6, #62313	; 0xf369
    4de4:	5f5f0000 	svcpl	0x005f0000
    4de8:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    4dec:	61697265 	cmnvs	r9, r5, ror #4
    4df0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4df4:	73000001 	movwvc	r0, #1
    4df8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4dfc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4e00:	61000002 	tstvs	r0, r2
    4e04:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4e08:	00030068 	andeq	r0, r3, r8, rrx
    4e0c:	63616d00 	cmnvs	r1, #0, 26
    4e10:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4e14:	70000003 	andvc	r0, r0, r3
    4e18:	5f736e69 	svcpl	0x00736e69
    4e1c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4e20:	00030068 	andeq	r0, r3, r8, rrx
    4e24:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4e28:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4e2c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4e30:	0300682e 	movweq	r6, #2094	; 0x82e
    4e34:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4e38:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4e3c:	00040068 	andeq	r0, r4, r8, rrx
    4e40:	01050000 	mrseq	r0, (UNDEF: 5)
    4e44:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    4e48:	03000018 	movweq	r0, #24
    4e4c:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    4e50:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    4e54:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    4e58:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    4e5c:	01151313 	tsteq	r5, r3, lsl r3
    4e60:	06051301 	streq	r1, [r5], -r1, lsl #6
    4e64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4e68:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    4e6c:	03050106 	movweq	r0, #20742	; 0x5106
    4e70:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4e74:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4e78:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    4e7c:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    4e80:	01060a05 	tsteq	r6, r5, lsl #20
    4e84:	83060205 	movwhi	r0, #25093	; 0x6205
    4e88:	01060605 	tsteq	r6, r5, lsl #12
    4e8c:	1f211f21 	svcne	0x00211f21
    4e90:	21060205 	tstcs	r6, r5, lsl #4
    4e94:	01060605 	tsteq	r6, r5, lsl #12
    4e98:	21060205 	tstcs	r6, r5, lsl #4
    4e9c:	01060505 	tsteq	r6, r5, lsl #10
    4ea0:	30060305 	andcc	r0, r6, r5, lsl #6
    4ea4:	4a74033d 	bmi	1d05ba0 <__ccfg+0x1ce5bf8>
    4ea8:	01060d05 	tsteq	r6, r5, lsl #26
    4eac:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    4eb0:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    4eb4:	4b010100 	blmi	452bc <__ccfg+0x25314>
    4eb8:	03000002 	movweq	r0, #2
    4ebc:	00012500 	andeq	r2, r1, r0, lsl #10
    4ec0:	fb010200 	blx	456ca <__ccfg+0x25722>
    4ec4:	01000d0e 	tsteq	r0, lr, lsl #26
    4ec8:	00010101 	andeq	r0, r1, r1, lsl #2
    4ecc:	00010000 	andeq	r0, r1, r0
    4ed0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4ed4:	2f656d6f 	svccs	0x00656d6f
    4ed8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4edc:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ee4 <__exidx_end+0x2068>
    4ee0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ee4:	4f2f706f 	svcmi	0x002f706f
    4ee8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4eec:	502f5445 	eorpl	r5, pc, r5, asr #8
    4ef0:	534f4349 	movtpl	r4, #62281	; 0xf349
    4ef4:	6369502f 	cmnvs	r9, #47	; 0x2f
    4ef8:	502f534f 	eorpl	r5, pc, pc, asr #6
    4efc:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4f00:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4f04:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4f08:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4f0c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4f10:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4f14:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4f18:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4f1c:	61652d65 	cmnvs	r5, r5, ror #26
    4f20:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4f24:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4f28:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4f2c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4f30:	6f682f00 	svcvs	0x00682f00
    4f34:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4d88 <__exidx_end+0x1f0c>
    4f38:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f3c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f40:	6f746b73 	svcvs	0x00746b73
    4f44:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f48:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f4c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f50:	2f534f43 	svccs	0x00534f43
    4f54:	4f636950 	svcmi	0x00636950
    4f58:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4f5c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4f60:	6f682f00 	svcvs	0x00682f00
    4f64:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4db8 <__exidx_end+0x1f3c>
    4f68:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f6c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f70:	6f746b73 	svcvs	0x00746b73
    4f74:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f78:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f7c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f80:	2f534f43 	svccs	0x00534f43
    4f84:	4f636950 	svcmi	0x00636950
    4f88:	5f000053 	svcpl	0x00000053
    4f8c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    4f90:	61697265 	cmnvs	r9, r5, ror #4
    4f94:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4f98:	73000001 	movwvc	r0, #1
    4f9c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4fa0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4fa4:	61000002 	tstvs	r0, r2
    4fa8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4fac:	00030068 	andeq	r0, r3, r8, rrx
    4fb0:	63616d00 	cmnvs	r1, #0, 26
    4fb4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4fb8:	70000003 	andvc	r0, r0, r3
    4fbc:	5f736e69 	svcpl	0x00736e69
    4fc0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4fc4:	00030068 	andeq	r0, r3, r8, rrx
    4fc8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4fcc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4fd0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4fd4:	0300682e 	movweq	r6, #2094	; 0x82e
    4fd8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4fdc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4fe0:	00040068 	andeq	r0, r4, r8, rrx
    4fe4:	01050000 	mrseq	r0, (UNDEF: 5)
    4fe8:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    4fec:	03000019 	movweq	r0, #25
    4ff0:	06010122 	streq	r0, [r1], -r2, lsr #2
    4ff4:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    4ff8:	13136b02 	tstne	r3, #2048	; 0x800
    4ffc:	06100516 			; <UNDEFINED> instruction: 0x06100516
    5000:	20050501 	andcs	r0, r5, r1, lsl #10
    5004:	30060305 	andcc	r0, r6, r5, lsl #6
    5008:	053f0205 	ldreq	r0, [pc, #-517]!	; 4e0b <__exidx_end+0x1f8f>
    500c:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    5010:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    5014:	200b0520 	andcs	r0, fp, r0, lsr #10
    5018:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    501c:	2f240603 	svccs	0x00240603
    5020:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    5024:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5028:	2f061f02 	svccs	0x00061f02
    502c:	01060605 	tsteq	r6, r5, lsl #12
    5030:	30060205 	andcc	r0, r6, r5, lsl #4
    5034:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    5038:	01060505 	tsteq	r6, r5, lsl #10
    503c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    5040:	01060605 	tsteq	r6, r5, lsl #12
    5044:	2f060405 	svccs	0x00060405
    5048:	01060705 	tsteq	r6, r5, lsl #14
    504c:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    5050:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    5054:	03052106 	movweq	r2, #20742	; 0x5106
    5058:	06070531 			; <UNDEFINED> instruction: 0x06070531
    505c:	20060501 	andcs	r0, r6, r1, lsl #10
    5060:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5064:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    5068:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    506c:	13052e05 	movwne	r2, #24069	; 0x5e05
    5070:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5074:	0608052f 	streq	r0, [r8], -pc, lsr #10
    5078:	06030501 	streq	r0, [r3], -r1, lsl #10
    507c:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5080:	06030501 	streq	r0, [r3], -r1, lsl #10
    5084:	3102052f 	tstcc	r2, pc, lsr #10
    5088:	01060605 	tsteq	r6, r5, lsl #12
    508c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5090:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5094:	21010606 	tstcs	r1, r6, lsl #12
    5098:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    509c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    50a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    50a4:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    50a8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50ac:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    50b0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    50b4:	07053c11 	smladeq	r5, r1, ip, r3
    50b8:	06020521 	streq	r0, [r2], -r1, lsr #10
    50bc:	0605054b 	streq	r0, [r5], -fp, asr #10
    50c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    50c4:	060a0524 	streq	r0, [sl], -r4, lsr #10
    50c8:	9f060501 	svcls	0x00060501
    50cc:	051f0a05 	ldreq	r0, [pc, #-2565]	; 46cf <__exidx_end+0x1853>
    50d0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    50d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50d8:	052f0602 	streq	r0, [pc, #-1538]!	; 4ade <__exidx_end+0x1c62>
    50dc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    50e0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    50e4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    50e8:	052f0603 	streq	r0, [pc, #-1539]!	; 4aed <__exidx_end+0x1c71>
    50ec:	06053002 	streq	r3, [r5], -r2
    50f0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    50f4:	01053d06 	tsteq	r5, r6, lsl #26
    50f8:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    50fc:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    5100:	000d0230 	andeq	r0, sp, r0, lsr r2
    5104:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    5108:	00030000 	andeq	r0, r3, r0
    510c:	0000013a 	andeq	r0, r0, sl, lsr r1
    5110:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5114:	0101000d 	tsteq	r1, sp
    5118:	00000101 	andeq	r0, r0, r1, lsl #2
    511c:	00000100 	andeq	r0, r0, r0, lsl #2
    5120:	6f682f01 	svcvs	0x00682f01
    5124:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4f78 <__exidx_end+0x20fc>
    5128:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    512c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5130:	6f746b73 	svcvs	0x00746b73
    5134:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5138:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    513c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5140:	2f534f43 	svccs	0x00534f43
    5144:	4f636950 	svcmi	0x00636950
    5148:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    514c:	2f736269 	svccs	0x00736269
    5150:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5154:	2f006c61 	svccs	0x00006c61
    5158:	2f727375 	svccs	0x00727375
    515c:	2f62696c 	svccs	0x0062696c
    5160:	2f636367 	svccs	0x00636367
    5164:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5168:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    516c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5170:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5174:	2f312e32 	svccs	0x00312e32
    5178:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    517c:	00656475 	rsbeq	r6, r5, r5, ror r4
    5180:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50cc <__exidx_end+0x2250>
    5184:	616d2f65 	cmnvs	sp, r5, ror #30
    5188:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    518c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5190:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5194:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5198:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    519c:	4349502f 	movtmi	r5, #36911	; 0x902f
    51a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    51a4:	534f6369 	movtpl	r6, #62313	; 0xf369
    51a8:	3143432f 	cmpcc	r3, pc, lsr #6
    51ac:	00585833 	subseq	r5, r8, r3, lsr r8
    51b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50fc <__exidx_end+0x2280>
    51b4:	616d2f65 	cmnvs	sp, r5, ror #30
    51b8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    51bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51c4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51c8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51cc:	4349502f 	movtmi	r5, #36911	; 0x902f
    51d0:	502f534f 	eorpl	r5, pc, pc, asr #6
    51d4:	534f6369 	movtpl	r6, #62313	; 0xf369
    51d8:	66760000 	ldrbtvs	r0, [r6], -r0
    51dc:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    51e0:	00010063 	andeq	r0, r1, r3, rrx
    51e4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51e8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    51ec:	00020068 	andeq	r0, r2, r8, rrx
    51f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51f4:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    51f8:	00020068 	andeq	r0, r2, r8, rrx
    51fc:	63726100 	cmnvs	r2, #0, 2
    5200:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5204:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5208:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    520c:	00030068 	andeq	r0, r3, r8, rrx
    5210:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5214:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5218:	00682e73 	rsbeq	r2, r8, r3, ror lr
    521c:	62000003 	andvs	r0, r0, #3
    5220:	6f747475 	svcvs	0x00747475
    5224:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5228:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    522c:	00000300 	andeq	r0, r0, r0, lsl #6
    5230:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5234:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5238:	3c000004 	stccc	0, cr0, [r0], {4}
    523c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5240:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5244:	0000003e 	andeq	r0, r0, lr, lsr r0
    5248:	15050000 	strne	r0, [r5, #-0]
    524c:	50020500 	andpl	r0, r2, r0, lsl #10
    5250:	0300001a 	movweq	r0, #26
    5254:	0305010c 	movweq	r0, #20748	; 0x510c
    5258:	06060513 			; <UNDEFINED> instruction: 0x06060513
    525c:	580b0501 	stmdapl	fp, {r0, r8, sl}
    5260:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5264:	01060e05 	tsteq	r6, r5, lsl #28
    5268:	30060305 	andcc	r0, r6, r5, lsl #6
    526c:	01060405 	tsteq	r6, r5, lsl #8
    5270:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    5274:	01010001 	tsteq	r1, r1
    5278:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    527c:	001a7002 	andseq	r7, sl, r2
    5280:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    5284:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5288:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    528c:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    5290:	03070520 	movweq	r0, #29984	; 0x7520
    5294:	06052071 			; <UNDEFINED> instruction: 0x06052071
    5298:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    529c:	133e0602 	teqne	lr, #2097152	; 0x200000
    52a0:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    52a4:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    52a8:	06040501 	streq	r0, [r4], -r1, lsl #10
    52ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    52b0:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    52b4:	01060505 	tsteq	r6, r5, lsl #10
    52b8:	30060305 	andcc	r0, r6, r5, lsl #6
    52bc:	01060605 	tsteq	r6, r5, lsl #12
    52c0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    52c4:	01060b05 	tsteq	r6, r5, lsl #22
    52c8:	052e1005 	streq	r1, [lr, #-5]!
    52cc:	07052105 	streq	r2, [r5, -r5, lsl #2]
    52d0:	0605052d 	streq	r0, [r5], -sp, lsr #10
    52d4:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    52d8:	0100da03 	tsteq	r0, r3, lsl #20
    52dc:	06070559 			; <UNDEFINED> instruction: 0x06070559
    52e0:	06040501 	streq	r0, [r4], -r1, lsl #10
    52e4:	4a7fa703 	bmi	1feeef8 <__ccfg+0x1fcef50>
    52e8:	03060505 	movweq	r0, #25861	; 0x6505
    52ec:	062000c2 	strteq	r0, [r0], -r2, asr #1
    52f0:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    52f4:	06030510 			; <UNDEFINED> instruction: 0x06030510
    52f8:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    52fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5300:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    5304:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5308:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    530c:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    5310:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    5314:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    5318:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    531c:	3c090306 	stccc	3, cr0, [r9], {6}
    5320:	01060c05 	tsteq	r6, r5, lsl #24
    5324:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    5328:	7fa90304 	svcvc	0x00a90304
    532c:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    5330:	010f0568 	tsteq	pc, r8, ror #10
    5334:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    5338:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    533c:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    5340:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    5344:	06051406 	streq	r1, [r5], -r6, lsl #8
    5348:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    534c:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    5350:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    5354:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    5358:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    535c:	16053906 	strne	r3, [r5], -r6, lsl #18
    5360:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5364:	06052e06 	streq	r2, [r5], -r6, lsl #28
    5368:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    536c:	20090306 	andcs	r0, r9, r6, lsl #6
    5370:	06120513 			; <UNDEFINED> instruction: 0x06120513
    5374:	2f080501 	svccs	0x00080501
    5378:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    537c:	052f0605 	streq	r0, [pc, #-1541]!	; 4d7f <__exidx_end+0x1f03>
    5380:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5384:	06052012 			; <UNDEFINED> instruction: 0x06052012
    5388:	05593006 	ldrbeq	r3, [r9, #-6]
    538c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5390:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    5394:	6f03060c 	svcvs	0x0003060c
    5398:	03050501 	movweq	r0, #21761	; 0x5501
    539c:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    53a0:	3c062e01 	stccc	14, cr2, [r6], {1}
    53a4:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    53a8:	4a202082 	bmi	80d5b8 <__ccfg+0x7ed610>
    53ac:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    53b0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    53b4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    53b8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    53bc:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    53c0:	05133006 	ldreq	r3, [r3, #-6]
    53c4:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    53c8:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    53cc:	0606052d 	streq	r0, [r6], -sp, lsr #10
    53d0:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    53d4:	13050106 	movwne	r0, #20742	; 0x5106
    53d8:	06070520 	streq	r0, [r7], -r0, lsr #10
    53dc:	0b05593f 	bleq	15b8e0 <__ccfg+0x13b938>
    53e0:	06050106 	streq	r0, [r5], -r6, lsl #2
    53e4:	05053006 	streq	r3, [r5, #-6]
    53e8:	016f0306 	cmneq	pc, r6, lsl #6
    53ec:	11030605 	tstne	r3, r5, lsl #12
    53f0:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    53f4:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    53f8:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    53fc:	20582e01 	subscs	r2, r8, r1, lsl #28
    5400:	210c052e 	tstcs	ip, lr, lsr #10
    5404:	01060f05 	tsteq	r6, r5, lsl #30
    5408:	2f060605 	svccs	0x00060605
    540c:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    5410:	0a051406 	beq	14a430 <__ccfg+0x12a488>
    5414:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    5418:	21060605 	tstcs	r6, r5, lsl #12
    541c:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    5420:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    5424:	07052e15 	smladeq	r5, r5, lr, r2
    5428:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    542c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5430:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    5434:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    5438:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    543c:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    5440:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    5444:	134f0505 	movtne	r0, #62725	; 0xf505
    5448:	06090513 			; <UNDEFINED> instruction: 0x06090513
    544c:	2f050511 	svccs	0x00050511
    5450:	13134f06 	tstne	r3, #6, 30
    5454:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    5458:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    545c:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    5460:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    5464:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    5468:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    546c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5470:	02050035 	andeq	r0, r5, #53	; 0x35
    5474:	00001ca0 	andeq	r1, r0, r0, lsr #25
    5478:	01019003 	tsteq	r1, r3
    547c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5480:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    5484:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    5488:	30060305 	andcc	r0, r6, r5, lsl #6
    548c:	06010567 	streq	r0, [r1], -r7, ror #10
    5490:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    5494:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    5498:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    549c:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    54a0:	3f060205 	svccc	0x00060205
    54a4:	01061505 	tsteq	r6, r5, lsl #10
    54a8:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    54ac:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    54b0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    54b4:	0b055805 	bleq	15b4d0 <__ccfg+0x13b528>
    54b8:	20050520 	andcs	r0, r5, r0, lsr #10
    54bc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    54c0:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    54c4:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    54c8:	03000002 	movweq	r0, #2
    54cc:	00013a00 	andeq	r3, r1, r0, lsl #20
    54d0:	fb010200 	blx	45cda <__ccfg+0x25d32>
    54d4:	01000d0e 	tsteq	r0, lr, lsl #26
    54d8:	00010101 	andeq	r0, r1, r1, lsl #2
    54dc:	00010000 	andeq	r0, r1, r0
    54e0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    54e4:	2f656d6f 	svccs	0x00656d6f
    54e8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    54ec:	442f6e69 	strtmi	r6, [pc], #-3689	; 54f4 <__exidx_end+0x2678>
    54f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    54f4:	4f2f706f 	svcmi	0x002f706f
    54f8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    54fc:	502f5445 	eorpl	r5, pc, r5, asr #8
    5500:	534f4349 	movtpl	r4, #62281	; 0xf349
    5504:	6369502f 	cmnvs	r9, #47	; 0x2f
    5508:	502f534f 	eorpl	r5, pc, pc, asr #6
    550c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5510:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    5514:	006c6169 	rsbeq	r6, ip, r9, ror #2
    5518:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    551c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5520:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5524:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5528:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    552c:	61652d65 	cmnvs	r5, r5, ror #26
    5530:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5534:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    5538:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    553c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5540:	6f682f00 	svcvs	0x00682f00
    5544:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5398 <__exidx_end+0x251c>
    5548:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    554c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5550:	6f746b73 	svcvs	0x00746b73
    5554:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5558:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    555c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5560:	2f534f43 	svccs	0x00534f43
    5564:	4f636950 	svcmi	0x00636950
    5568:	43432f53 	movtmi	r2, #16211	; 0x3f53
    556c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5570:	6f682f00 	svcvs	0x00682f00
    5574:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 53c8 <__exidx_end+0x254c>
    5578:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    557c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5580:	6f746b73 	svcvs	0x00746b73
    5584:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5588:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    558c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5590:	2f534f43 	svccs	0x00534f43
    5594:	4f636950 	svcmi	0x00636950
    5598:	76000053 			; <UNDEFINED> instruction: 0x76000053
    559c:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    55a0:	0100632e 	tsteq	r0, lr, lsr #6
    55a4:	74730000 	ldrbtvc	r0, [r3], #-0
    55a8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    55ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55b0:	74730000 	ldrbtvc	r0, [r3], #-0
    55b4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    55b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55bc:	72610000 	rsbvc	r0, r1, #0
    55c0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    55c4:	00000300 	andeq	r0, r0, r0, lsl #6
    55c8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    55cc:	0300682e 	movweq	r6, #2094	; 0x82e
    55d0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    55d4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55d8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55dc:	00000300 	andeq	r0, r0, r0, lsl #6
    55e0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    55e4:	5f736e6f 	svcpl	0x00736e6f
    55e8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    55ec:	00030068 	andeq	r0, r3, r8, rrx
    55f0:	73797300 	cmnvc	r9, #0, 6
    55f4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    55f8:	00000400 	andeq	r0, r0, r0, lsl #8
    55fc:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5600:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    5604:	00003e6e 	andeq	r3, r0, lr, ror #28
    5608:	05000000 	streq	r0, [r0, #-0]
    560c:	0205003a 	andeq	r0, r5, #58	; 0x3a
    5610:	00001cf0 	strdeq	r1, [r0], -r0
    5614:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    5618:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    561c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5620:	2044033a 	subcs	r0, r4, sl, lsr r3
    5624:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    5628:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    562c:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    5630:	200e0316 	andcs	r0, lr, r6, lsl r3
    5634:	11030b05 	tstne	r3, r5, lsl #22
    5638:	0608052e 	streq	r0, [r8], -lr, lsr #10
    563c:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    5640:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5644:	03052e08 	movweq	r2, #24072	; 0x5e08
    5648:	06052106 	streq	r2, [r5], -r6, lsl #2
    564c:	03050106 	movweq	r0, #20742	; 0x5106
    5650:	0b053006 	bleq	151670 <__ccfg+0x1316c8>
    5654:	0f050106 	svceq	0x00050106
    5658:	20030520 	andcs	r0, r3, r0, lsr #10
    565c:	2e030105 	adfcss	f0, f3, f5
    5660:	030305ac 	movweq	r0, #13740	; 0x35ac
    5664:	0b053c52 	bleq	1547b4 <__ccfg+0x13480c>
    5668:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    566c:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    5670:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5674:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    5678:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    567c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5680:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    5684:	06051e08 	streq	r1, [r5], -r8, lsl #28
    5688:	0604052d 	streq	r0, [r4], -sp, lsr #10
    568c:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    5690:	0b050106 	bleq	145ab0 <__ccfg+0x125b08>
    5694:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    5698:	0c050106 	stfeqs	f0, [r5], {6}
    569c:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    56a0:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    56a4:	0a054e0b 	beq	158ed8 <__ccfg+0x138f30>
    56a8:	0b053c06 	bleq	1546c8 <__ccfg+0x134720>
    56ac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56b0:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    56b4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56b8:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    56bc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56c0:	11052f06 	tstne	r5, r6, lsl #30
    56c4:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    56c8:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    56cc:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    56d0:	013c6606 	teqeq	ip, r6, lsl #12
    56d4:	06010620 	streq	r0, [r1], -r0, lsr #12
    56d8:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    56dc:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    56e0:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    56e4:	01062e01 	tsteq	r6, r1, lsl #28
    56e8:	90822e06 	addls	r2, r2, r6, lsl #28
    56ec:	90064a21 	andls	r4, r6, r1, lsr #20
    56f0:	013c5806 	teqeq	ip, r6, lsl #16
    56f4:	2e06012e 	adfcssp	f0, f6, #0.5
    56f8:	82063c06 	andhi	r3, r6, #1536	; 0x600
    56fc:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    5700:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    5704:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    5708:	20100501 	andscs	r0, r0, r1, lsl #10
    570c:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    5710:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    5714:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    5718:	013c3c06 	teqeq	ip, r6, lsl #24
    571c:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5720:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    5724:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    5728:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    572c:	3c062e06 	stccc	14, cr2, [r6], {6}
    5730:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    5734:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    5738:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    573c:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    5740:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    5744:	2e060106 	adfcss	f0, f6, f6
    5748:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    574c:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    5750:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5754:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    5758:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    575c:	06051306 	streq	r1, [r5], -r6, lsl #6
    5760:	0604052d 	streq	r0, [r4], -sp, lsr #10
    5764:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    5768:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    576c:	0b052106 	bleq	14db8c <__ccfg+0x12dbe4>
    5770:	07052406 	streq	r2, [r5, -r6, lsl #8]
    5774:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    5778:	01060e05 	tsteq	r6, r5, lsl #28
    577c:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    5780:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    5784:	0a031105 	beq	c9ba0 <__ccfg+0xa9bf8>
    5788:	5116054a 	tstpl	r6, sl, asr #10
    578c:	01000502 	tsteq	r0, r2, lsl #10
    5790:	00016701 	andeq	r6, r1, r1, lsl #14
    5794:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    5798:	02000001 	andeq	r0, r0, #1
    579c:	0d0efb01 	vstreq	d15, [lr, #-4]
    57a0:	01010100 	mrseq	r0, (UNDEF: 17)
    57a4:	00000001 	andeq	r0, r0, r1
    57a8:	01000001 	tsteq	r0, r1
    57ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    57b0:	2f2e2e2f 	svccs	0x002e2e2f
    57b4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 57bc <__exidx_end+0x2940>
    57b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    57bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    57c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    57c4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    57c8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    57cc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    57d0:	31303030 	teqcc	r0, r0, lsr r0
    57d4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    57d8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    57dc:	61746562 	cmnvs	r4, r2, ror #10
    57e0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    57e4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    57e8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5620 <__exidx_end+0x27a4>
    57ec:	6f635c73 	svcvs	0x00635c73
    57f0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    57f4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    57f8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    57fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5800:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5804:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5808:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    580c:	3130322d 	teqcc	r0, sp, lsr #4
    5810:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5814:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5818:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    581c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5820:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5824:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5828:	616d5c65 	cmnvs	sp, r5, ror #24
    582c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5830:	3a630065 	bcc	18c59cc <__ccfg+0x18a5a24>
    5834:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5838:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    583c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5840:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5844:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5848:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    584c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5850:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5854:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5858:	6f6f745c 	svcvs	0x006f745c
    585c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5860:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5864:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5868:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    586c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5870:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5874:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5878:	5f342d69 	svcpl	0x00342d69
    587c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5880:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5884:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5888:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    588c:	61652d65 	cmnvs	r5, r5, ror #26
    5890:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5894:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5898:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    589c:	00007379 	andeq	r7, r0, r9, ror r3
    58a0:	5f6e6f61 	svcpl	0x006e6f61
    58a4:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    58a8:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    58ac:	00000100 	andeq	r0, r0, r0, lsl #2
    58b0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    58b4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    58b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    58bc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    58c0:	00000200 	andeq	r0, r0, r0, lsl #4
    58c4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    58c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    58cc:	00030068 	andeq	r0, r3, r8, rrx
    58d0:	6e6f6100 	powvse	f6, f7, f0
    58d4:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    58d8:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    58dc:	00010068 	andeq	r0, r1, r8, rrx
    58e0:	05000000 	streq	r0, [r0, #-0]
    58e4:	00208002 	eoreq	r8, r0, r2
    58e8:	013c0300 	teqeq	ip, r0, lsl #6
    58ec:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    58f0:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    58f4:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    58f8:	01010009 	tsteq	r1, r9
    58fc:	000001a9 	andeq	r0, r0, r9, lsr #3
    5900:	01410002 	cmpeq	r1, r2
    5904:	01020000 	mrseq	r0, (UNDEF: 2)
    5908:	000d0efb 	strdeq	r0, [sp], -fp
    590c:	01010101 	tsteq	r1, r1, lsl #2
    5910:	01000000 	mrseq	r0, (UNDEF: 0)
    5914:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5918:	2f2e2e2f 	svccs	0x002e2e2f
    591c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5920:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    5924:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5928:	0062696c 	rsbeq	r6, r2, ip, ror #18
    592c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5930:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5934:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5938:	302e302e 	eorcc	r3, lr, lr, lsr #32
    593c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5940:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5944:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5948:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    594c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5950:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5954:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5958:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 57f0 <__exidx_end+0x2974>
    595c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5960:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5964:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5968:	6f6e2d6d 	svcvs	0x006e2d6d
    596c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5970:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5974:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5978:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    597c:	615c3371 	cmpvs	ip, r1, ror r3
    5980:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5984:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5988:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    598c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5990:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5994:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    5998:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    599c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    59a0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    59a4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    59a8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    59ac:	31303030 	teqcc	r0, r0, lsr r0
    59b0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    59b4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    59b8:	61746562 	cmnvs	r4, r2, ror #10
    59bc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    59c0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    59c4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 57fc <__exidx_end+0x2980>
    59c8:	6f635c73 	svcvs	0x00635c73
    59cc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    59d0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    59d4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    59d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    59dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    59e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    59e4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    59e8:	3130322d 	teqcc	r0, sp, lsr #4
    59ec:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    59f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    59f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    59f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    59fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5a00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5a04:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    5a08:	61000073 	tstvs	r0, r3, ror r0
    5a0c:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    5a10:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    5a14:	00000100 	andeq	r0, r0, r0, lsl #2
    5a18:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5a1c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5a20:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5a24:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5a28:	00000200 	andeq	r0, r0, r0, lsl #4
    5a2c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5a30:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5a34:	00030068 	andeq	r0, r3, r8, rrx
    5a38:	6e6f6100 	powvse	f6, f7, f0
    5a3c:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    5a40:	0100682e 	tsteq	r0, lr, lsr #16
    5a44:	00000000 	andeq	r0, r0, r0
    5a48:	00000205 	andeq	r0, r0, r5, lsl #4
    5a4c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    5a50:	04020001 	streq	r0, [r2], #-1
    5a54:	010a0301 	tsteq	sl, r1, lsl #6
    5a58:	01040200 	mrseq	r0, R12_usr
    5a5c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a60:	02001f01 	andeq	r1, r0, #1, 30
    5a64:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a68:	21010402 	tstcs	r1, r2, lsl #8
    5a6c:	01040200 	mrseq	r0, R12_usr
    5a70:	02213021 	eoreq	r3, r1, #33	; 0x21
    5a74:	01010008 	tsteq	r1, r8
    5a78:	b0020500 	andlt	r0, r2, r0, lsl #10
    5a7c:	03000020 	movweq	r0, #32
    5a80:	000100d7 	ldrdeq	r0, [r1], -r7
    5a84:	03010402 	movweq	r0, #5122	; 0x1402
    5a88:	0200010c 	andeq	r0, r0, #12, 2
    5a8c:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a90:	1f010402 	svcne	0x00010402
    5a94:	01040200 	mrseq	r0, R12_usr
    5a98:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a9c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5aa0:	31210104 			; <UNDEFINED> instruction: 0x31210104
    5aa4:	01000502 	tsteq	r0, r2, lsl #10
    5aa8:	00019c01 	andeq	r9, r1, r1, lsl #24
    5aac:	39000200 	stmdbcc	r0, {r9}
    5ab0:	02000001 	andeq	r0, r0, #1
    5ab4:	0d0efb01 	vstreq	d15, [lr, #-4]
    5ab8:	01010100 	mrseq	r0, (UNDEF: 17)
    5abc:	00000001 	andeq	r0, r0, r1
    5ac0:	01000001 	tsteq	r0, r1
    5ac4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ac8:	2f2e2e2f 	svccs	0x002e2e2f
    5acc:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5ad4 <__exidx_end+0x2c58>
    5ad0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5ad4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5ad8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5adc:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5ae0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5ae4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5ae8:	31303030 	teqcc	r0, r0, lsr r0
    5aec:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5af0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5af4:	61746562 	cmnvs	r4, r2, ror #10
    5af8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5afc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5b00:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5938 <__exidx_end+0x2abc>
    5b04:	6f635c73 	svcvs	0x00635c73
    5b08:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5b0c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5b10:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5b14:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5b18:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5b1c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5b20:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5b24:	3130322d 	teqcc	r0, sp, lsr #4
    5b28:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5b2c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b30:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b34:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b38:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5b3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5b40:	616d5c65 	cmnvs	sp, r5, ror #24
    5b44:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5b48:	3a630065 	bcc	18c5ce4 <__ccfg+0x18a5d3c>
    5b4c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5b50:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5b54:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5b58:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5b5c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5b60:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5b64:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5b68:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5b6c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5b70:	6f6f745c 	svcvs	0x006f745c
    5b74:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5b78:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5b7c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5b80:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5b84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b88:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b8c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b90:	5f342d69 	svcpl	0x00342d69
    5b94:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5b98:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5b9c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ba0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ba4:	61652d65 	cmnvs	r5, r5, ror #26
    5ba8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5bac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5bb0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5bb4:	00007379 	andeq	r7, r0, r9, ror r3
    5bb8:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    5bbc:	00010063 	andeq	r0, r1, r3, rrx
    5bc0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5bc4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5bc8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5bcc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5bd0:	00020068 	andeq	r0, r2, r8, rrx
    5bd4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5bd8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5bdc:	0300682e 	movweq	r6, #2094	; 0x82e
    5be0:	70630000 	rsbvc	r0, r3, r0
    5be4:	00682e75 	rsbeq	r2, r8, r5, ror lr
    5be8:	00000001 	andeq	r0, r0, r1
    5bec:	c8020500 	stmdagt	r2, {r8, sl}
    5bf0:	03000020 	movweq	r0, #32
    5bf4:	030100f5 	movweq	r0, #4341	; 0x10f5
    5bf8:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    5bfc:	00010100 	andeq	r0, r1, r0, lsl #2
    5c00:	00000205 	andeq	r0, r0, r5, lsl #4
    5c04:	c0030000 	andgt	r0, r3, r0
    5c08:	11030101 	tstne	r3, r1, lsl #2
    5c0c:	00030201 	andeq	r0, r3, r1, lsl #4
    5c10:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5c14:	0020d002 	eoreq	sp, r0, r2
    5c18:	028d0300 	addeq	r0, sp, #0, 6
    5c1c:	01120301 	tsteq	r2, r1, lsl #6
    5c20:	01000402 	tsteq	r0, r2, lsl #8
    5c24:	02050001 	andeq	r0, r5, #1
    5c28:	00000000 	andeq	r0, r0, r0
    5c2c:	0102d803 	tsteq	r2, r3, lsl #16
    5c30:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    5c34:	01010003 	tsteq	r1, r3
    5c38:	00020500 	andeq	r0, r2, r0, lsl #10
    5c3c:	03000000 	movweq	r0, #0
    5c40:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    5c44:	01000402 	tsteq	r0, r2, lsl #8
    5c48:	0001e901 	andeq	lr, r1, r1, lsl #18
    5c4c:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    5c50:	02000001 	andeq	r0, r0, #1
    5c54:	0d0efb01 	vstreq	d15, [lr, #-4]
    5c58:	01010100 	mrseq	r0, (UNDEF: 17)
    5c5c:	00000001 	andeq	r0, r0, r1
    5c60:	01000001 	tsteq	r0, r1
    5c64:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c68:	2f2e2e2f 	svccs	0x002e2e2f
    5c6c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5c74 <__exidx_end+0x2df8>
    5c70:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5c74:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5c78:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5c7c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5c80:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5c84:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5c88:	31303030 	teqcc	r0, r0, lsr r0
    5c8c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5c90:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5c94:	61746562 	cmnvs	r4, r2, ror #10
    5c98:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5c9c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5ca0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5ad8 <__exidx_end+0x2c5c>
    5ca4:	6f635c73 	svcvs	0x00635c73
    5ca8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5cac:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5cb0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5cb4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5cb8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5cbc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5cc0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5cc4:	3130322d 	teqcc	r0, sp, lsr #4
    5cc8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5ccc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5cd0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5cd4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5cd8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5cdc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5ce0:	616d5c65 	cmnvs	sp, r5, ror #24
    5ce4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5ce8:	3a630065 	bcc	18c5e84 <__ccfg+0x18a5edc>
    5cec:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5cf0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5cf4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5cf8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5cfc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5d00:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5d04:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5d08:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5d0c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5d10:	6f6f745c 	svcvs	0x006f745c
    5d14:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5d18:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5d1c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5d20:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5d24:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5d28:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5d2c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5d30:	5f342d69 	svcpl	0x00342d69
    5d34:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5d38:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5d3c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5d40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5d44:	61652d65 	cmnvs	r5, r5, ror #26
    5d48:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5d4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5d50:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5d54:	00007379 	andeq	r7, r0, r9, ror r3
    5d58:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5d5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
    5d60:	61000001 	tstvs	r0, r1
    5d64:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    5d68:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    5d6c:	00000100 	andeq	r0, r0, r0, lsl #2
    5d70:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5d74:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5d78:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5d7c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5d80:	00000200 	andeq	r0, r0, r0, lsl #4
    5d84:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5d88:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5d8c:	00030068 	andeq	r0, r3, r8, rrx
    5d90:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5d94:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5d98:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5d9c:	00000100 	andeq	r0, r0, r0, lsl #2
    5da0:	70696863 	rsbvc	r6, r9, r3, ror #16
    5da4:	6f666e69 	svcvs	0x00666e69
    5da8:	0100682e 	tsteq	r0, lr, lsr #16
    5dac:	65730000 	ldrbvs	r0, [r3, #-0]!
    5db0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    5db4:	00010068 	andeq	r0, r1, r8, rrx
    5db8:	05000000 	streq	r0, [r0, #-0]
    5dbc:	0020d802 	eoreq	sp, r0, r2, lsl #16
    5dc0:	028d0300 	addeq	r0, sp, #0, 6
    5dc4:	0a032001 	beq	cddd0 <__ccfg+0xade28>
    5dc8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5dcc:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    5dd0:	1f212d43 	svcne	0x00212d43
    5dd4:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    5dd8:	01046604 	tsteq	r4, r4, lsl #12
    5ddc:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    5de0:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    5de4:	2f3d2d4a 	svccs	0x003d2d4a
    5de8:	2f2f1f2f 	svccs	0x002f1f2f
    5dec:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    5df0:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    5df4:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    5df8:	0101001e 	tsteq	r1, lr, lsl r0
    5dfc:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    5e00:	03000021 	movweq	r0, #33	; 0x21
    5e04:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    5e08:	41334330 	teqmi	r3, r0, lsr r3
    5e0c:	333c0903 	teqcc	ip, #49152	; 0xc000
    5e10:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    5e14:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    5e18:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    5e1c:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    5e20:	03496742 	movteq	r6, #38722	; 0x9742
    5e24:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    5e28:	004b6924 	subeq	r6, fp, r4, lsr #18
    5e2c:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    5e30:	0013024d 	andseq	r0, r3, sp, asr #4
    5e34:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    5e38:	00020000 	andeq	r0, r2, r0
    5e3c:	00000165 	andeq	r0, r0, r5, ror #2
    5e40:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e44:	0101000d 	tsteq	r1, sp
    5e48:	00000101 	andeq	r0, r0, r1, lsl #2
    5e4c:	00000100 	andeq	r0, r0, r0, lsl #2
    5e50:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5e54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e58:	2f2e2e2f 	svccs	0x002e2e2f
    5e5c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5e60:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5e64:	3a630062 	bcc	18c5ff4 <__ccfg+0x18a604c>
    5e68:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5e6c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5e70:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5e74:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5e78:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5e7c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5e80:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5e84:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5e88:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5e8c:	6f6f745c 	svcvs	0x006f745c
    5e90:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5e94:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5e98:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5e9c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5ea0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5ea4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ea8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5eac:	5f342d69 	svcpl	0x00342d69
    5eb0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5eb4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5eb8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ebc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ec0:	61652d65 	cmnvs	r5, r5, ror #26
    5ec4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5ec8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5ecc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5ed0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5ed4:	6300656e 	movwvs	r6, #1390	; 0x56e
    5ed8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5edc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5ee0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5ee4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5ee8:	5f393130 	svcpl	0x00393130
    5eec:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5ef0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5ef4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5ef8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5efc:	6f745c36 	svcvs	0x00745c36
    5f00:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5f04:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5f08:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5f0c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5f10:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5f14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5f18:	61652d65 	cmnvs	r5, r5, ror #26
    5f1c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5f20:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5f24:	71353130 	teqvc	r5, r0, lsr r1
    5f28:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5f2c:	6f6e2d6d 	svcvs	0x006e2d6d
    5f30:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5f34:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5f38:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5f3c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5f40:	00737973 	rsbseq	r7, r3, r3, ror r9
    5f44:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5f48:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5f4c:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    5f50:	00000100 	andeq	r0, r0, r0, lsl #2
    5f54:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5f58:	6f725f70 	svcvs	0x00725f70
    5f5c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5f60:	73000001 	movwvc	r0, #1
    5f64:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    5f68:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    5f6c:	00010068 	andeq	r0, r1, r8, rrx
    5f70:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5f74:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5f78:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5f7c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5f80:	00020068 	andeq	r0, r2, r8, rrx
    5f84:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5f88:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5f8c:	0300682e 	movweq	r6, #2094	; 0x82e
    5f90:	64640000 	strbtvs	r0, [r4], #-0
    5f94:	00682e69 	rsbeq	r2, r8, r9, ror #28
    5f98:	6f000001 	svcvs	0x00000001
    5f9c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    5fa0:	00000100 	andeq	r0, r0, r0, lsl #2
    5fa4:	02050000 	andeq	r0, r5, #0
    5fa8:	00002250 	andeq	r2, r0, r0, asr r2
    5fac:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    5fb0:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    5fb4:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    5fb8:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    5fbc:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    5fc0:	01042000 	mrseq	r2, (UNDEF: 4)
    5fc4:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    5fc8:	d9030204 	stmdble	r3, {r2, r9}
    5fcc:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    5fd0:	ac030104 	stfges	f0, [r3], {4}
    5fd4:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    5fd8:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    5fdc:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    5fe0:	03587803 	cmpeq	r8, #196608	; 0x30000
    5fe4:	7303200d 	movwvc	r2, #12301	; 0x300d
    5fe8:	2010033c 	andscs	r0, r0, ip, lsr r3
    5fec:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5ff0:	01000d02 	tsteq	r0, r2, lsl #26
    5ff4:	02050001 	andeq	r0, r5, #1
    5ff8:	000022cc 	andeq	r2, r0, ip, asr #5
    5ffc:	0101bf03 	tsteq	r1, r3, lsl #30
    6000:	4a78031a 	bmi	1e06c70 <__ccfg+0x1de6cc8>
    6004:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    6008:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    600c:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    6010:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    6014:	3002042d 	andcc	r0, r2, sp, lsr #8
    6018:	03010421 	movweq	r0, #5153	; 0x1421
    601c:	2f3d2e0b 	svccs	0x003d2e0b
    6020:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    6024:	302c4d66 	eorcc	r4, ip, r6, ror #26
    6028:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    602c:	01001502 	tsteq	r0, r2, lsl #10
    6030:	02050001 	andeq	r0, r5, #1
    6034:	00002378 	andeq	r2, r0, r8, ror r3
    6038:	01049f03 	tsteq	r4, r3, lsl #30
    603c:	03010c03 	movweq	r0, #7171	; 0x1c03
    6040:	77032009 	strvc	r2, [r3, -r9]
    6044:	33312120 	teqcc	r1, #32, 2
    6048:	31303027 	teqcc	r0, r7, lsr #32
    604c:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    6050:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    6054:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    6058:	03207603 			; <UNDEFINED> instruction: 0x03207603
    605c:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    6060:	00010100 	andeq	r0, r1, r0, lsl #2
    6064:	23d40205 	bicscs	r0, r4, #1342177280	; 0x50000000
    6068:	e5030000 	str	r0, [r3, #-0]
    606c:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    6070:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    6074:	00050233 	andeq	r0, r5, r3, lsr r2
    6078:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    607c:	00000002 	andeq	r0, r0, r2
    6080:	05810300 	streq	r0, [r1, #768]	; 0x300
    6084:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    6088:	01010006 	tsteq	r1, r6
    608c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    6090:	03000023 	movweq	r0, #35	; 0x23
    6094:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    6098:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    609c:	01010006 	tsteq	r1, r6
    60a0:	fc020500 	stc2	5, cr0, [r2], {-0}
    60a4:	03000023 	movweq	r0, #35	; 0x23
    60a8:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    60ac:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    60b0:	01010008 	tsteq	r1, r8
    60b4:	10020500 	andne	r0, r2, r0, lsl #10
    60b8:	03000024 	movweq	r0, #36	; 0x24
    60bc:	030105db 	movweq	r0, #5595	; 0x15db
    60c0:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    60c4:	20770320 	rsbscs	r0, r7, r0, lsr #6
    60c8:	03200903 			; <UNDEFINED> instruction: 0x03200903
    60cc:	2a352079 	bcs	d4e2b8 <__ccfg+0xd2e310>
    60d0:	30312232 	eorscc	r2, r1, r2, lsr r2
    60d4:	30274732 	eorcc	r4, r7, r2, lsr r7
    60d8:	17034732 	smladxne	r3, r2, r7, r4
    60dc:	3a36372e 	bcc	d93d9c <__ccfg+0xd73df4>
    60e0:	00080227 	andeq	r0, r8, r7, lsr #4
    60e4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    60e8:	00247402 	eoreq	r7, r4, r2, lsl #8
    60ec:	06a90300 	strteq	r0, [r9], r0, lsl #6
    60f0:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    60f4:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    60f8:	01010003 	tsteq	r1, r3
    60fc:	88020500 	stmdahi	r2, {r8, sl}
    6100:	03000024 	movweq	r0, #36	; 0x24
    6104:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    6108:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    610c:	00030220 	andeq	r0, r3, r0, lsr #4
    6110:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6114:	00249c02 	eoreq	r9, r4, r2, lsl #24
    6118:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    611c:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6120:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    6124:	01010003 	tsteq	r1, r3
    6128:	b0020500 	andlt	r0, r2, r0, lsl #10
    612c:	03000024 	movweq	r0, #36	; 0x24
    6130:	160106e2 	strne	r0, [r1], -r2, ror #13
    6134:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    6138:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    613c:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    6140:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    6144:	01010003 	tsteq	r1, r3
    6148:	d8020500 	stmdale	r2, {r8, sl}
    614c:	03000024 	movweq	r0, #36	; 0x24
    6150:	16010782 	strne	r0, [r1], -r2, lsl #15
    6154:	00060233 	andeq	r0, r6, r3, lsr r2
    6158:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    615c:	0024e802 	eoreq	lr, r4, r2, lsl #16
    6160:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    6164:	43211601 			; <UNDEFINED> instruction: 0x43211601
    6168:	03333429 	teqeq	r3, #687865856	; 0x29000000
    616c:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    6170:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    6174:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    6178:	00010100 	andeq	r0, r1, r0, lsl #2
    617c:	25140205 	ldrcs	r0, [r4, #-517]	; 0xfffffdfb
    6180:	b4030000 	strlt	r0, [r3], #-0
    6184:	21150107 	tstcs	r5, r7, lsl #2
    6188:	20090355 	andcs	r0, r9, r5, asr r3
    618c:	01000302 	tsteq	r0, r2, lsl #6
    6190:	02050001 	andeq	r0, r5, #1
    6194:	00002528 	andeq	r2, r0, r8, lsr #10
    6198:	0107c803 	tsteq	r7, r3, lsl #16
    619c:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    61a0:	0302200a 	movweq	r2, #8202	; 0x200a
    61a4:	00010100 	andeq	r0, r1, r0, lsl #2
    61a8:	253c0205 	ldrcs	r0, [ip, #-517]!	; 0xfffffdfb
    61ac:	a7030000 	strge	r0, [r3, -r0]
    61b0:	03200102 			; <UNDEFINED> instruction: 0x03200102
    61b4:	1f3d2009 	svcne	0x003d2009
    61b8:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    61bc:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    61c0:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    61c4:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    61c8:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    61cc:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61d0:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61d4:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    61d8:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    61dc:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    61e0:	033d3c09 	teqeq	sp, #2304	; 0x900
    61e4:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    61e8:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    61ec:	40211f3d 	eormi	r1, r1, sp, lsr pc
    61f0:	0012024b 	andseq	r0, r2, fp, asr #4
    61f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    61f8:	00264c02 	eoreq	r4, r6, r2, lsl #24
    61fc:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    6200:	04020001 	streq	r0, [r2], #-1
    6204:	200e0301 	andcs	r0, lr, r1, lsl #6
    6208:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    620c:	4b684d1d 	blmi	1a19688 <__ccfg+0x19f96e0>
    6210:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    6214:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    6218:	315b3d01 	cmpcc	fp, r1, lsl #26
    621c:	01000b02 	tsteq	r0, r2, lsl #22
    6220:	02050001 	andeq	r0, r5, #1
    6224:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
    6228:	01089303 	tsteq	r8, r3, lsl #6
    622c:	2f010903 	svccs	0x00010903
    6230:	0022212d 	eoreq	r2, r2, sp, lsr #2
    6234:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6238:	0007024b 	andeq	r0, r7, fp, asr #4
    623c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6240:	0026d802 	eoreq	sp, r6, r2, lsl #16
    6244:	039b0300 	orrseq	r0, fp, #0, 6
    6248:	01090301 	tsteq	r9, r1, lsl #6
    624c:	203c7703 	eorscs	r7, ip, r3, lsl #14
    6250:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    6254:	0a033130 	beq	d271c <__ccfg+0xb2774>
    6258:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    625c:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 6144 <__exidx_end+0x32c8>
    6260:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    6264:	5226501c 	eorpl	r5, r6, #28
    6268:	2f4d4f3d 	svccs	0x004d4f3d
    626c:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    6270:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    6274:	5b4b0104 	blpl	12c668c <__ccfg+0x12a66e4>
    6278:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    627c:	4a09033f 	bmi	246f80 <__ccfg+0x226fd8>
    6280:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    6284:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    6288:	4a7db903 	bmi	1f7469c <__ccfg+0x1f546f4>
    628c:	01001f02 	tsteq	r0, r2, lsl #30
    6290:	00036501 	andeq	r6, r3, r1, lsl #10
    6294:	a8000200 	stmdage	r0, {r9}
    6298:	02000001 	andeq	r0, r0, #1
    629c:	0d0efb01 	vstreq	d15, [lr, #-4]
    62a0:	01010100 	mrseq	r0, (UNDEF: 17)
    62a4:	00000001 	andeq	r0, r0, r1
    62a8:	01000001 	tsteq	r0, r1
    62ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    62b0:	2f2e2e2f 	svccs	0x002e2e2f
    62b4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 62bc <__exidx_end+0x3440>
    62b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    62bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    62c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    62c4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    62c8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    62cc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    62d0:	31303030 	teqcc	r0, r0, lsr r0
    62d4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    62d8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    62dc:	61746562 	cmnvs	r4, r2, ror #10
    62e0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    62e4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    62e8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6120 <__exidx_end+0x32a4>
    62ec:	6f635c73 	svcvs	0x00635c73
    62f0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    62f4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    62f8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    62fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6300:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6304:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6308:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    630c:	3130322d 	teqcc	r0, sp, lsr #4
    6310:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6314:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6318:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    631c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6320:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6324:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6328:	616d5c65 	cmnvs	sp, r5, ror #24
    632c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6330:	3a630065 	bcc	18c64cc <__ccfg+0x18a6524>
    6334:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6338:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    633c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6340:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6344:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6348:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    634c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6350:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6354:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6358:	6f6f745c 	svcvs	0x006f745c
    635c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6360:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6364:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6368:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    636c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6370:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6374:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6378:	5f342d69 	svcpl	0x00342d69
    637c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6380:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6384:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6388:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    638c:	61652d65 	cmnvs	r5, r5, ror #26
    6390:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6394:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6398:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    639c:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    63a0:	2f2e2e2f 	svccs	0x002e2e2f
    63a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    63a8:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    63ac:	73000063 	movwvc	r0, #99	; 0x63
    63b0:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    63b4:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    63b8:	00010063 	andeq	r0, r1, r3, rrx
    63bc:	6e6f6100 	powvse	f6, f7, f0
    63c0:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    63c4:	0100682e 	tsteq	r0, lr, lsr #16
    63c8:	736f0000 	cmnvc	pc, #0
    63cc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    63d0:	70000001 	andvc	r0, r0, r1
    63d4:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    63d8:	00010068 	andeq	r0, r1, r8, rrx
    63dc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    63e0:	725f7075 	subsvc	r7, pc, #117	; 0x75
    63e4:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    63e8:	00000100 	andeq	r0, r0, r0, lsl #2
    63ec:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    63f0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    63f4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    63f8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    63fc:	00000200 	andeq	r0, r0, r0, lsl #4
    6400:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6404:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6408:	00030068 	andeq	r0, r3, r8, rrx
    640c:	5f776800 	svcpl	0x00776800
    6410:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6414:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6418:	72000004 	andvc	r0, r0, #4
    641c:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6420:	00000100 	andeq	r0, r0, r0, lsl #2
    6424:	5f737973 	svcpl	0x00737973
    6428:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    642c:	0100682e 	tsteq	r0, lr, lsr #16
    6430:	6f610000 	svcvs	0x00610000
    6434:	61625f6e 	cmnvs	r2, lr, ror #30
    6438:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    643c:	0100682e 	tsteq	r0, lr, lsr #16
    6440:	00000000 	andeq	r0, r0, r0
    6444:	00000205 	andeq	r0, r0, r5, lsl #4
    6448:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    644c:	02040100 	andeq	r0, r4, #0, 2
    6450:	0102e903 	tsteq	r2, r3, lsl #18
    6454:	97030104 	strls	r0, [r3, -r4, lsl #2]
    6458:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    645c:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    6460:	01040200 	mrseq	r0, R12_usr
    6464:	2000ce03 	andcs	ip, r0, r3, lsl #28
    6468:	02000104 	andeq	r0, r0, #4, 2
    646c:	d1030104 	tstle	r3, r4, lsl #2
    6470:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    6474:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6478:	4b896701 	blmi	fe260084 <_estack+0xde25b084>
    647c:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    6480:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    6484:	03010458 	movweq	r0, #5208	; 0x1458
    6488:	004a7ee4 	subeq	r7, sl, r4, ror #29
    648c:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    6490:	81030404 	tsthi	r3, r4, lsl #8
    6494:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    6498:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    649c:	0001043c 	andeq	r0, r1, ip, lsr r4
    64a0:	03010402 	movweq	r0, #5122	; 0x1402
    64a4:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    64a8:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    64ac:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    64b0:	00204203 	eoreq	r4, r0, r3, lsl #4
    64b4:	03010402 	movweq	r0, #5122	; 0x1402
    64b8:	01042e14 	tsteq	r4, r4, lsl lr
    64bc:	01040200 	mrseq	r0, R12_usr
    64c0:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    64c4:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    64c8:	4b83281b 	blmi	fe0d053c <_estack+0xde0cb53c>
    64cc:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    64d0:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    64d4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    64d8:	3c140301 	ldccc	3, cr0, [r4], {1}
    64dc:	02000104 	andeq	r0, r0, #4, 2
    64e0:	8d030104 	stfhis	f0, [r3, #-16]
    64e4:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    64e8:	01010017 	tsteq	r1, r7, lsl r0
    64ec:	28020500 	stmdacs	r2, {r8, sl}
    64f0:	03000028 	movweq	r0, #40	; 0x28
    64f4:	030101da 	movweq	r0, #4570	; 0x11da
    64f8:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    64fc:	201d0320 	andscs	r0, sp, r0, lsr #6
    6500:	32412f59 	subcc	r2, r1, #356	; 0x164
    6504:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    6508:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    650c:	0305041b 	movweq	r0, #21531	; 0x541b
    6510:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    6514:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    6518:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    651c:	50030504 	andpl	r0, r3, r4, lsl #10
    6520:	01042120 	tsteq	r4, r0, lsr #2
    6524:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    6528:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    652c:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    6530:	03050420 	movweq	r0, #21536	; 0x5420
    6534:	0104204d 	tsteq	r4, sp, asr #32
    6538:	2f2e3403 	svccs	0x002e3403
    653c:	2f692365 	svccs	0x00692365
    6540:	213e214d 	teqcs	lr, sp, asr #2
    6544:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    6548:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    654c:	ca4a0f03 	bgt	128a160 <__ccfg+0x126a1b8>
    6550:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    6554:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    6558:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    655c:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    6560:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    6564:	31312026 	teqcc	r1, r6, lsr #32
    6568:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    656c:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    6570:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    6574:	03200903 			; <UNDEFINED> instruction: 0x03200903
    6578:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    657c:	7103213c 	tstvc	r3, ip, lsr r1
    6580:	3c0f0320 	stccc	3, cr0, [pc], {32}
    6584:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    6588:	23212265 			; <UNDEFINED> instruction: 0x23212265
    658c:	20780328 	rsbscs	r0, r8, r8, lsr #6
    6590:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    6594:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    6598:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    659c:	01010021 	tsteq	r1, r1, lsr #32
    65a0:	48020500 	stmdami	r2, {r8, sl}
    65a4:	0300002a 	movweq	r0, #42	; 0x2a
    65a8:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    65ac:	a22f2240 	eorge	r2, pc, #64, 4
    65b0:	2a404e24 	bcs	1019e48 <__ccfg+0xff9ea0>
    65b4:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    65b8:	00010100 	andeq	r0, r1, r0, lsl #2
    65bc:	00000205 	andeq	r0, r0, r5, lsl #4
    65c0:	e5030000 	str	r0, [r3, #-0]
    65c4:	0c030103 	stfeqs	f0, [r3], {3}
    65c8:	30282f20 	eorcc	r2, r8, r0, lsr #30
    65cc:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    65d0:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    65d4:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    65d8:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    65dc:	1e224b2f 	vmulne.f64	d4, d2, d31
    65e0:	000c023e 	andeq	r0, ip, lr, lsr r2
    65e4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    65e8:	002aa802 	eoreq	sl, sl, r2, lsl #16
    65ec:	04a60300 	strteq	r0, [r6], #768	; 0x300
    65f0:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    65f4:	00040226 	andeq	r0, r4, r6, lsr #4
    65f8:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    65fc:	00020000 	andeq	r0, r2, r0
    6600:	00000143 	andeq	r0, r0, r3, asr #2
    6604:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6608:	0101000d 	tsteq	r1, sp
    660c:	00000101 	andeq	r0, r0, r1, lsl #2
    6610:	00000100 	andeq	r0, r0, r0, lsl #2
    6614:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6618:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    661c:	2f2e2e2f 	svccs	0x002e2e2f
    6620:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6624:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6628:	3a630062 	bcc	18c67b8 <__ccfg+0x18a6810>
    662c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6630:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6634:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6638:	3030302e 	eorscc	r3, r0, lr, lsr #32
    663c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6640:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6644:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6648:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    664c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6650:	6f6f745c 	svcvs	0x006f745c
    6654:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6658:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    665c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6660:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6664:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6668:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    666c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6670:	5f342d69 	svcpl	0x00342d69
    6674:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6678:	33713531 	cmncc	r1, #205520896	; 0xc400000
    667c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6680:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6684:	61652d65 	cmnvs	r5, r5, ror #26
    6688:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    668c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6690:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6694:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6698:	6300656e 	movwvs	r6, #1390	; 0x56e
    669c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    66a0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    66a4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    66a8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    66ac:	5f393130 	svcpl	0x00393130
    66b0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    66b4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    66b8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    66bc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    66c0:	6f745c36 	svcvs	0x00745c36
    66c4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    66c8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    66cc:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    66d0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    66d4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    66d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    66dc:	61652d65 	cmnvs	r5, r5, ror #26
    66e0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    66e4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    66e8:	71353130 	teqvc	r5, r0, lsr r1
    66ec:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    66f0:	6f6e2d6d 	svcvs	0x006e2d6d
    66f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    66f8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    66fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6700:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6704:	00737973 	rsbseq	r7, r3, r3, ror r9
    6708:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    670c:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    6710:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    6714:	63000001 	movwvs	r0, #1
    6718:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    671c:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    6720:	00010068 	andeq	r0, r1, r8, rrx
    6724:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6728:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    672c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6730:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6734:	00020068 	andeq	r0, r2, r8, rrx
    6738:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    673c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6740:	0300682e 	movweq	r6, #2094	; 0x82e
    6744:	00000000 	andeq	r0, r0, r0
    6748:	00000205 	andeq	r0, r0, r5, lsl #4
    674c:	c4030000 	strgt	r0, [r3], #-0
    6750:	2f130100 	svccs	0x00130100
    6754:	01000602 	tsteq	r0, r2, lsl #12
    6758:	02050001 	andeq	r0, r5, #1
    675c:	00000000 	andeq	r0, r0, r0
    6760:	0100d003 	tsteq	r0, r3
    6764:	0a032f14 	beq	d23bc <__ccfg+0xb2414>
    6768:	0008022e 	andeq	r0, r8, lr, lsr #4
    676c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6770:	002ac002 	eoreq	ip, sl, r2
    6774:	00e60300 	rsceq	r0, r6, r0, lsl #6
    6778:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    677c:	9b030204 	blls	c6f94 <__ccfg+0xa6fec>
    6780:	01042e01 	tsteq	r4, r1, lsl #28
    6784:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    6788:	4b4b4c23 	blmi	12d981c <__ccfg+0x12b9874>
    678c:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    6790:	01010005 	tsteq	r1, r5
    6794:	00020500 	andeq	r0, r2, r0, lsl #10
    6798:	03000000 	movweq	r0, #0
    679c:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    67a0:	01b00302 	lslseq	r0, r2, #6
    67a4:	03010420 	movweq	r0, #5152	; 0x1420
    67a8:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    67ac:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    67b0:	4a0a033c 	bmi	2874a8 <__ccfg+0x267500>
    67b4:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    67b8:	01000502 	tsteq	r0, r2, lsl #10
    67bc:	02050001 	andeq	r0, r5, #1
    67c0:	00002b0c 	andeq	r2, r0, ip, lsl #22
    67c4:	0101a603 	tsteq	r1, r3, lsl #12
    67c8:	e3030204 	movw	r0, #12804	; 0x3204
    67cc:	11032000 	mrsne	r2, (UNDEF: 3)
    67d0:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 6720 <__exidx_end+0x38a4>
    67d4:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    67d8:	8c030104 	stfhis	f0, [r3], {4}
    67dc:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    67e0:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    67e4:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    67e8:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    67ec:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    67f0:	30032064 	andcc	r2, r3, r4, rrx
    67f4:	00040220 	andeq	r0, r4, r0, lsr #4
    67f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    67fc:	002b7802 	eoreq	r7, fp, r2, lsl #16
    6800:	01e00300 	mvneq	r0, r0, lsl #6
    6804:	03020401 	movweq	r0, #9217	; 0x2401
    6808:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    680c:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    6810:	0302042e 	movweq	r0, #9262	; 0x242e
    6814:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    6818:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    681c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6820:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    6824:	01000202 	tsteq	r0, r2, lsl #4
    6828:	00021e01 	andeq	r1, r2, r1, lsl #28
    682c:	42000200 	andmi	r0, r0, #0, 4
    6830:	02000001 	andeq	r0, r0, #1
    6834:	0d0efb01 	vstreq	d15, [lr, #-4]
    6838:	01010100 	mrseq	r0, (UNDEF: 17)
    683c:	00000001 	andeq	r0, r0, r1
    6840:	01000001 	tsteq	r0, r1
    6844:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6848:	2f2e2e2f 	svccs	0x002e2e2f
    684c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6854 <__exidx_end+0x39d8>
    6850:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6854:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6858:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    685c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6860:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6864:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6868:	31303030 	teqcc	r0, r0, lsr r0
    686c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6870:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6874:	61746562 	cmnvs	r4, r2, ror #10
    6878:	63635c32 	cmnvs	r3, #12800	; 0x3200
    687c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6880:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 66b8 <__exidx_end+0x383c>
    6884:	6f635c73 	svcvs	0x00635c73
    6888:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    688c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6890:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6894:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6898:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    689c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    68a0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    68a4:	3130322d 	teqcc	r0, sp, lsr #4
    68a8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    68ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    68b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    68b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    68b8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    68bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    68c0:	616d5c65 	cmnvs	sp, r5, ror #24
    68c4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    68c8:	3a630065 	bcc	18c6a64 <__ccfg+0x18a6abc>
    68cc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    68d0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    68d4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    68d8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    68dc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    68e0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    68e4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    68e8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    68ec:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    68f0:	6f6f745c 	svcvs	0x006f745c
    68f4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    68f8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    68fc:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6900:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6904:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6908:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    690c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6910:	5f342d69 	svcpl	0x00342d69
    6914:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6918:	33713531 	cmncc	r1, #205520896	; 0xc400000
    691c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6920:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6924:	61652d65 	cmnvs	r5, r5, ror #26
    6928:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    692c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6930:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6934:	00007379 	andeq	r7, r0, r9, ror r3
    6938:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    693c:	00010068 	andeq	r0, r1, r8, rrx
    6940:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    6944:	0100632e 	tsteq	r0, lr, lsr #6
    6948:	645f0000 	ldrbvs	r0, [pc], #-0	; 6950 <__exidx_end+0x3ad4>
    694c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6950:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6958 <__exidx_end+0x3adc>
    6954:	73657079 	cmnvc	r5, #121	; 0x79
    6958:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    695c:	735f0000 	cmpvc	pc, #0
    6960:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6964:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6968:	63000003 	movwvs	r0, #3
    696c:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    6970:	00000100 	andeq	r0, r0, r0, lsl #2
    6974:	02050000 	andeq	r0, r5, #0
    6978:	00002b90 	muleq	r0, r0, fp
    697c:	01018803 	tsteq	r1, r3, lsl #16
    6980:	50303120 	eorspl	r3, r0, r0, lsr #2
    6984:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    6988:	0005022c 	andeq	r0, r5, ip, lsr #4
    698c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6990:	b8020500 	stmdalt	r2, {r8, sl}
    6994:	0300002b 	movweq	r0, #43	; 0x2b
    6998:	030100c3 	movweq	r0, #4291	; 0x10c3
    699c:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    69a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    69a4:	02050002 	andeq	r0, r5, #2
    69a8:	00000000 	andeq	r0, r0, r0
    69ac:	0100d803 	tsteq	r0, r3, lsl #16
    69b0:	33010e03 	movwcc	r0, #7683	; 0x1e03
    69b4:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    69b8:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    69bc:	01010004 	tsteq	r1, r4
    69c0:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69c4:	00000002 	andeq	r0, r0, r2
    69c8:	01850300 	orreq	r0, r5, r0, lsl #6
    69cc:	20110301 	andscs	r0, r1, r1, lsl #6
    69d0:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    69d4:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    69d8:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    69dc:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    69e0:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    69e4:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    69e8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    69ec:	02050002 	andeq	r0, r5, #2
    69f0:	00000000 	andeq	r0, r0, r0
    69f4:	0101af03 	tsteq	r1, r3, lsl #30
    69f8:	1b201103 	blne	80ae0c <__ccfg+0x7eae64>
    69fc:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    6a00:	042f2013 	strteq	r2, [pc], #-19	; 6a08 <__exidx_end+0x3b8c>
    6a04:	20690301 	rsbcs	r0, r9, r1, lsl #6
    6a08:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a0c:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a10:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    6a14:	01000502 	tsteq	r0, r2, lsl #10
    6a18:	00020401 	andeq	r0, r2, r1, lsl #8
    6a1c:	00000205 	andeq	r0, r0, r5, lsl #4
    6a20:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    6a24:	11030101 	tstne	r3, r1, lsl #2
    6a28:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    6a2c:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    6a30:	0104302d 	tsteq	r4, sp, lsr #32
    6a34:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    6a38:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a3c:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a40:	00c80302 	sbceq	r0, r8, r2, lsl #6
    6a44:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    6a48:	d6010100 	strle	r0, [r1], -r0, lsl #2
    6a4c:	02000002 	andeq	r0, r0, #2
    6a50:	00017c00 	andeq	r7, r1, r0, lsl #24
    6a54:	fb010200 	blx	4725e <__ccfg+0x272b6>
    6a58:	01000d0e 	tsteq	r0, lr, lsl #26
    6a5c:	00010101 	andeq	r0, r1, r1, lsl #2
    6a60:	00010000 	andeq	r0, r1, r0
    6a64:	2f2e0100 	svccs	0x002e0100
    6a68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a70:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6a74:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6a78:	63006269 	movwvs	r6, #617	; 0x269
    6a7c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6a80:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a84:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6a88:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6a8c:	5f393130 	svcpl	0x00393130
    6a90:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6a94:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6a98:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6a9c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6aa0:	6f745c36 	svcvs	0x00745c36
    6aa4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6aa8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6aac:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6ab0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6ab4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6ab8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6abc:	61652d65 	cmnvs	r5, r5, ror #26
    6ac0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6ac4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6ac8:	71353130 	teqvc	r5, r0, lsr r1
    6acc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6ad0:	6f6e2d6d 	svcvs	0x006e2d6d
    6ad4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6ad8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6adc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6ae0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6ae4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6ae8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6aec:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6af0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6af4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6af8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6afc:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6b00:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6b04:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6b08:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6b0c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6b10:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6b14:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6b18:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 69b0 <__exidx_end+0x3b34>
    6b1c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6b20:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6b24:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6b28:	6f6e2d6d 	svcvs	0x006e2d6d
    6b2c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6b30:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6b34:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6b38:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6b3c:	615c3371 	cmpvs	ip, r1, ror r3
    6b40:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b44:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b48:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b4c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6b50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6b54:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6b58:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6b5c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b60:	2f2e2e2f 	svccs	0x002e2e2f
    6b64:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6b68:	63736f00 	cmnvs	r3, #0, 30
    6b6c:	0100632e 	tsteq	r0, lr, lsr #6
    6b70:	736f0000 	cmnvc	pc, #0
    6b74:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6b78:	5f000001 	svcpl	0x00000001
    6b7c:	61666564 	cmnvs	r6, r4, ror #10
    6b80:	5f746c75 	svcpl	0x00746c75
    6b84:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b88:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b8c:	5f000002 	svcpl	0x00000002
    6b90:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6b94:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6b98:	00000300 	andeq	r0, r0, r0, lsl #6
    6b9c:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6ba4 <__exidx_end+0x3d28>
    6ba0:	73657079 	cmnvc	r5, #121	; 0x79
    6ba4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6ba8:	6f720000 	svcvs	0x00720000
    6bac:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6bb0:	61000001 	tstvs	r0, r1
    6bb4:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    6bb8:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    6bbc:	00000100 	andeq	r0, r0, r0, lsl #2
    6bc0:	5f6e6f61 	svcpl	0x006e6f61
    6bc4:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6bc8:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6bcc:	00000100 	andeq	r0, r0, r0, lsl #2
    6bd0:	02050000 	andeq	r0, r5, #0
    6bd4:	00002bc0 	andeq	r2, r0, r0, asr #23
    6bd8:	0100e503 	tsteq	r0, r3, lsl #10
    6bdc:	200f0320 	andcs	r0, pc, r0, lsr #6
    6be0:	03207103 			; <UNDEFINED> instruction: 0x03207103
    6be4:	0325200f 			; <UNDEFINED> instruction: 0x0325200f
    6be8:	03309e09 	teqeq	r0, #9, 28	; 0x90
    6bec:	a3339e09 	teqge	r3, #9, 28	; 0x90
    6bf0:	01000702 	tsteq	r0, r2, lsl #14
    6bf4:	02050001 	andeq	r0, r5, #1
    6bf8:	00002c1c 	andeq	r2, r0, ip, lsl ip
    6bfc:	0101a003 	tsteq	r1, r3
    6c00:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    6c04:	3c7a0388 	ldclcc	3, cr0, [sl], #-544	; 0xfffffde0
    6c08:	06022526 	streq	r2, [r2], -r6, lsr #10
    6c0c:	00010100 	andeq	r0, r1, r0, lsl #2
    6c10:	00000205 	andeq	r0, r0, r5, lsl #4
    6c14:	c2030000 	andgt	r0, r3, #0
    6c18:	25200101 	strcs	r0, [r0, #-257]!	; 0xfffffeff
    6c1c:	79033491 	stmdbvc	r3, {r0, r4, r7, sl, ip, sp}
    6c20:	7a03272e 	bvc	d08e0 <__ccfg+0xb0938>
    6c24:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    6c28:	7a030104 	bvc	c7040 <__ccfg+0xa7098>
    6c2c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6c30:	2d305001 	ldccs	0, cr5, [r0, #-4]!
    6c34:	4b241f30 	blmi	90e8fc <__ccfg+0x8ee954>
    6c38:	3d341f3d 	ldccc	15, cr1, [r4, #-244]!	; 0xffffff0c
    6c3c:	6d03326c 	sfmvs	f3, 4, [r3, #-432]	; 0xfffffe50
    6c40:	3c100366 	ldccc	3, cr0, [r0], {102}	; 0x66
    6c44:	00090226 	andeq	r0, r9, r6, lsr #4
    6c48:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6c4c:	00000002 	andeq	r0, r0, r2
    6c50:	01f30300 	mvnseq	r0, r0, lsl #6
    6c54:	024b2101 	subeq	r2, fp, #1073741824	; 0x40000000
    6c58:	01010007 	tsteq	r1, r7
    6c5c:	00020500 	andeq	r0, r2, r0, lsl #10
    6c60:	03000000 	movweq	r0, #0
    6c64:	24010280 	strcs	r0, [r1], #-640	; 0xfffffd80
    6c68:	22030204 	andcs	r0, r3, #4, 4	; 0x40000000
    6c6c:	03010458 	movweq	r0, #5208	; 0x1458
    6c70:	02048262 	andeq	r8, r4, #536870918	; 0x20000006
    6c74:	04203c03 	strteq	r3, [r0], #-3075	; 0xfffff3fd
    6c78:	4a4a0301 	bmi	1287884 <__ccfg+0x12678dc>
    6c7c:	3d211f3d 	stccc	15, cr1, [r1, #-244]!	; 0xffffff0c
    6c80:	1f30221f 	svcne	0x0030221f
    6c84:	02232230 	eoreq	r2, r3, #48, 4
    6c88:	0101000c 	tsteq	r1, ip
    6c8c:	00020500 	andeq	r0, r2, r0, lsl #10
    6c90:	03000000 	movweq	r0, #0
    6c94:	250102a3 	strcs	r0, [r1, #-675]	; 0xfffffd5d
    6c98:	0302044f 	movweq	r0, #9295	; 0x244f
    6c9c:	01044a17 	tsteq	r4, r7, lsl sl
    6ca0:	4b4a6d03 	blmi	12a20b4 <__ccfg+0x128210c>
    6ca4:	01000902 	tsteq	r0, r2, lsl #18
    6ca8:	02050001 	andeq	r0, r5, #1
    6cac:	00000000 	andeq	r0, r0, r0
    6cb0:	0102bc03 	tsteq	r2, r3, lsl #24
    6cb4:	20170322 	andscs	r0, r7, r2, lsr #6
    6cb8:	28206903 	stmdacs	r0!, {r0, r1, r8, fp, sp, lr}
    6cbc:	033c1003 	teqeq	ip, #3
    6cc0:	15032e6c 	strne	r2, [r3, #-3692]	; 0xfffff194
    6cc4:	586d032e 	stmdapl	sp!, {r1, r2, r3, r5, r8, r9}^
    6cc8:	03201303 			; <UNDEFINED> instruction: 0x03201303
    6ccc:	1103206f 	tstne	r3, pc, rrx
    6cd0:	06023f20 	streq	r3, [r2], -r0, lsr #30
    6cd4:	00010100 	andeq	r0, r1, r0, lsl #2
    6cd8:	00000205 	andeq	r0, r0, r5, lsl #4
    6cdc:	e3030000 	movw	r0, #12288	; 0x3000
    6ce0:	21030102 	tstcs	r3, r2, lsl #2
    6ce4:	02024d01 	andeq	r4, r2, #1, 26	; 0x40
    6ce8:	00010100 	andeq	r0, r1, r0, lsl #2
    6cec:	00000205 	andeq	r0, r0, r5, lsl #4
    6cf0:	90030000 	andls	r0, r3, r0
    6cf4:	10030103 	andne	r0, r3, r3, lsl #2
    6cf8:	211f2120 	tstcs	pc, r0, lsr #2
    6cfc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6d00:	02003e01 	andeq	r3, r0, #1, 28
    6d04:	3d3d0104 	ldfccs	f0, [sp, #-16]!
    6d08:	02341d31 	eorseq	r1, r4, #3136	; 0xc40
    6d0c:	01010007 	tsteq	r1, r7
    6d10:	00020500 	andeq	r0, r2, r0, lsl #10
    6d14:	03000000 	movweq	r0, #0
    6d18:	170103b5 			; <UNDEFINED> instruction: 0x170103b5
    6d1c:	3d332c31 	ldccc	12, cr2, [r3, #-196]!	; 0xffffff3c
    6d20:	01000502 	tsteq	r0, r2, lsl #10
    6d24:	Address 0x0000000000006d24 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
    return (time * SECOND)/1000;
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
}
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
      34:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
      38:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
      3c:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
}
      40:	5f5f0065 	svcpl	0x005f0065
      44:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6dc <_estack+0xdfffa6dc>
      48:	00747261 	rsbseq	r7, r4, r1, ror #4
      4c:	70716572 	rsbsvc	r6, r1, r2, ror r5
      50:	72006d64 	andvc	r6, r0, #100, 26	; 0x1900
      54:	654c6465 	strbvs	r6, [ip, #-1125]	; 0xfffffb9b
		release;
      58:	5f5f0064 	svcpl	0x005f0064
      5c:	616c7473 	smcvs	51011	; 0xc743
      60:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
      64:	614e5f74 	hvcvs	58868	; 0xe5f4
      68:	7300656d 	movwvc	r6, #1389	; 0x56d
      6c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
      70:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
      74:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
      78:	66666500 	strbtvs	r6, [r6], -r0, lsl #10
      7c:	006d6470 	rsbeq	r6, sp, r0, ror r4
      80:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      84:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      88:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
      8c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	descriptors [fd] = s;
      90:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
      98:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
	if (s == NULL)
      9c:	6e497372 	mcrvs	3, 2, r7, cr9, cr2, {3}
		syserror (EMALLOC, "tcv05");
      a0:	00786564 	rsbseq	r6, r8, r4, ror #10
      a4:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
      a8:	6c006e70 	stcvs	14, cr6, [r0], {112}	; 0x70
      ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      b8:	735f5f00 	cmpvc	pc, #0, 30
      bc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      c0:	6f68535f 	svcvs	0x0068535f
      c4:	654d5f77 	strbvs	r5, [sp, #-3959]	; 0xfffff089
      c8:	5f00756e 	svcpl	0x0000756e
      cc:	5f69705f 	svcpl	0x0069705f
      d0:	2f007473 	svccs	0x00007473
      d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      d8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      dc:	2f6e6974 	svccs	0x006e6974
      e0:	6b736544 	blvs	1cd95f8 <__ccfg+0x1cb9650>
      e4:	2f706f74 	svccs	0x00706f74
      e8:	4f534c4f 	svcmi	0x00534c4f
      ec:	2f54454e 	svccs	0x0054454e
      f0:	4f434950 	svcmi	0x00434950
			wwait (st, 50);
      f4:	70412f53 	subvc	r2, r1, r3, asr pc
			curr += 0x1000;
      f8:	432f7370 			; <UNDEFINED> instruction: 0x432f7370
      fc:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
		if (from >= EE_SIZE || upto < from)
     100:	4c5f3436 	cfldrdmi	mvd3, [pc], {54}	; 0x36
     104:	00366261 	eorseq	r6, r6, r1, ror #4
			upto = EE_SIZE - 1;
     108:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     10c:	5f62616c 	svcpl	0x0062616c
     110:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     114:	6c425f74 	mcrrvs	15, 7, r5, r2, cr4
     118:	656b6e69 	strbvs	r6, [fp, #-3689]!	; 0xfffff197
     11c:	5f5f0072 	svcpl	0x005f0072
     120:	616c7473 	smcvs	51011	; 0xc743
     124:	464f5f62 	strbmi	r5, [pc], -r2, ror #30
            ch = redCharacter;
     128:	45505f46 	ldrbmi	r5, [r0, #-3910]	; 0xfffff0ba
            onTime = redOn;
     12c:	444f4952 	strbmi	r4, [pc], #-2386	; 134 <_Min_Stack_Size+0x34>
     130:	735f5f00 	cmpvc	pc, #0, 30
            offTime = greenOff;
     134:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
        ledFlag = 1 - ledFlag;
     138:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    return (time * SECOND)/1000;
     13c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
        ledFlag = 1 - ledFlag;
     140:	73797300 	cmnvc	r9, #0, 6
    return (time * SECOND)/1000;
     144:	5f6d6574 	svcpl	0x006d6574
     148:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     14c:	6f635f74 	svcvs	0x00635f74
     150:	00746e75 	rsbseq	r6, r4, r5, ror lr
        offTime = adjustTime(offTime);
     154:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        onTime = adjustTime(onTime);
     158:	5f62616c 	svcpl	0x0062616c
     15c:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	646e6f00 	strbtvs	r6, [lr], #-3840	; 0xfffff100
     164:	00736e6d 	rsbseq	r6, r3, sp, ror #28
     168:	4e6f6964 	vnmulmi.f16	s13, s30, s9	; <UNPREDICTABLE>
        if(onTime > 0){
     16c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
            if(On)
     170:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
     174:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
     178:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
                leds(led,1);
     17c:	20312e32 	eorscs	r2, r1, r2, lsr lr
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     180:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
                leds(led,0);
     184:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
     188:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
     18c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     190:	5b202965 	blpl	80a72c <__ccfg+0x7ea784>
            delay(onTime, OFF_PERIOD);
     194:	2f4d5241 	svccs	0x004d5241
            delay(offTime, Check_PERIOD);
     198:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
            led = greenLed;
     19c:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
     1a0:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
            ch = greenCharacter;
     1a4:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
            onTime = greenOn;
     1a8:	6f697369 	svcvs	0x00697369
     1ac:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
            offTime = greenOff;
     1b0:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
                leds(led,0);
     1b4:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     1b8:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     1bc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
     1c0:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     1c4:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
            proceed OFF_PERIOD;
     1c8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     1cc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
        when(&On, Check_PERIOD);
     1d0:	616f6c66 	cmnvs	pc, r6, ror #24
     1d4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
        release;
     1d8:	6f733d69 	svcvs	0x00733d69
        leds(led,0);
     1dc:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
     1e0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     1e4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     1e8:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
            proceed Check_PERIOD;
     1ec:	672d206d 	strvs	r2, [sp, -sp, rrx]!
}
     1f0:	64672d20 	strbtvs	r2, [r7], #-3360	; 0xfffff2e0
     1f4:	66726177 			; <UNDEFINED> instruction: 0x66726177
     1f8:	2d20332d 	stccs	3, cr3, [r0, #-180]!	; 0xffffff4c
     1fc:	72747367 	rsbsvc	r7, r4, #-1677721599	; 0x9c000001
     200:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     204:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     208:	4f2d2066 	svcmi	0x002d2066
     20c:	732d2073 			; <UNDEFINED> instruction: 0x732d2073
     210:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     214:	2d203939 			; <UNDEFINED> instruction: 0x2d203939
     218:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
     21c:	6f697463 	svcvs	0x00697463
     220:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
     224:	6f697463 	svcvs	0x00697463
     228:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
     22c:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
     230:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
     234:	6f697463 	svcvs	0x00697463
     238:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
     23c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ac <g_pfnVectors+0xac>
     240:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    word numbers[] = {0, 0, 0, 0};
     244:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
    int numbersIndex = 0;
     248:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
    word numbers[] = {0, 0, 0, 0};
     24c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	7361662d 	cmnvc	r1, #47185920	; 0x2d00000
        if(settingsInput[i] == ' ') {
     254:	662d206d 	strtvs	r2, [sp], -sp, rrx
     258:	2d78616d 	ldfcse	f6, [r8, #-436]!	; 0xfffffe4c
            numbers[numbersIndex] = number;
     25c:	6f727265 	svcvs	0x00727265
     260:	313d7372 	teqcc	sp, r2, ror r3
            number = 0;
     264:	5f5f0030 	svcpl	0x005f0030
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	655f6970 	ldrbvs	r6, [pc, #-2416]	; fffff900 <_estack+0xdfffa900>
    redOn = numbers[0];
     26c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     270:	7300745f 	movwvc	r7, #1119	; 0x45f
    redOff = numbers[1];
     274:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     278:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
    greenOn = numbers[2];
     27c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     280:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    greenOff = numbers[3];
     284:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
     288:	646f696e 	strbtvs	r6, [pc], #-2414	; 290 <processSettingsInput+0x4c>
}
     28c:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
     294:	756e006b 	strbvc	r0, [lr, #-107]!	; 0xffffff95
            number = number * 10;
     298:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
            number += settingsInput[i] - 48;
     29c:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
     2a0:	654c6e65 	strbvs	r6, [ip, #-3685]	; 0xfffff19b
     2a4:	77610064 	strbvc	r0, [r1, -r4, rrx]!
     2a8:	0064726f 	rsbeq	r7, r4, pc, ror #4
     2ac:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     2b0:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
fsm root {
     2b4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     2b8:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     2bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     2c0:	6d647000 	stclvs	0, cr7, [r4, #-0]
     2c4:	0065646f 	rsbeq	r6, r5, pc, ror #8
     2c8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
     2cc:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
        ser_outf(Initial, "Enter your name: ");
     2d0:	69540074 	ldmdbvs	r4, {r2, r4, r5, r6}^
     2d4:	0072656d 	rsbseq	r6, r2, sp, ror #10
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
     2dc:	006e4f6e 	rsbeq	r4, lr, lr, ror #30
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	504d544b 	subpl	r5, sp, fp, asr #8
     2e4:	7070612f 	rsbsvc	r6, r0, pc, lsr #2
     2e8:	5f00632e 	svcpl	0x0000632e
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	706e695f 	rsbvc	r6, lr, pc, asr r9
     2f0:	705f7475 	subsvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
        if (choice == 'A' || choice == 'a'){
     2f4:	00736e69 	rsbseq	r6, r3, r9, ror #28
     2f8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     2fc:	5f62616c 	svcpl	0x0062616c
            proceed Adjust_Intervals;
     300:	69617741 	stmdbvs	r1!, {r0, r6, r8, r9, sl, ip, sp, lr}^
            proceed Monitor;
     304:	74535f74 	ldrbvc	r5, [r3], #-3956	; 0xfffff08c
        proceed Show_Menu;
     308:	7200706f 	andvc	r7, r0, #111	; 0x6f
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	68436465 	stmdavs	r3, {r0, r2, r5, r6, sl, sp, lr}^
     310:	63617261 	cmnvs	r1, #268435462	; 0x10000006
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	00726574 	rsbseq	r6, r2, r4, ror r5
     318:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
     31c:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
        processSettingsInput(settings);
     320:	625f5f00 	subsvs	r5, pc, #0, 30
        if(!blinkerRunning) {
     324:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
     328:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
            blinkerCode = runfsm blinker;
     32c:	5f005f5f 	svcpl	0x00005f5f
     330:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
            blinkerRunning = YES;
     334:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
        On = YES;
     338:	70005f5f 	andvc	r5, r0, pc, asr pc
     33c:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
        trigger(&On);
     340:	65537373 	ldrbvs	r7, [r3, #-883]	; 0xfffffc8d
        proceed Show_Menu;
     344:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	6e497367 	cdpvs	3, 4, cr7, cr9, cr7, {3}
     34c:	00747570 	rsbseq	r7, r4, r0, ror r5
     350:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
     354:	0072656b 	rsbseq	r6, r2, fp, ror #10
     358:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
     35c:	73676e69 	cmnvc	r7, #1680	; 0x690
     360:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
        proceed Show_Menu;
     364:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     368:	735f5f00 	cmpvc	pc, #0, 30
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     370:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
        displayCycle = YES;
     374:	746e495f 	strbtvc	r4, [lr], #-2399	; 0xfffff6a1
        ser_inf(Await_Stop, "%c", &ch);
     378:	61767265 	cmnvs	r6, r5, ror #4
     37c:	5f00736c 	svcpl	0x0000736c
     380:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        if(ch == 'S' || ch == 's'){
     384:	565f6261 	ldrbpl	r6, [pc], -r1, ror #4
     388:	5f776569 	svcpl	0x00776569
     38c:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
            displayCycle = NO;
     390:	73676e69 	cmnvc	r7, #1680	; 0x690
     394:	705f5f00 	subsvc	r5, pc, r0, lsl #30
            proceed Show_Menu;
     398:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
        proceed Monitor;
     39c:	68007272 	stmdavs	r0, {r1, r4, r5, r6, r9, ip, sp, lr}
        On = NO;
     3a0:	5f74736f 	svcpl	0x0074736f
     3a4:	5f006469 	svcpl	0x00006469
        if(blinkerCode != 0x0) {
     3a8:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
            killall(blinkerCode);
     3ac:	5f6e6f74 	svcpl	0x006e6f74
     3b0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
        proceed Show_Menu;
     3b4:	736e7500 	cmnvc	lr, #0, 10
     3b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
        leds_all(0);
     3bc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     3c0:	47007261 	strmi	r7, [r0, -r1, ror #4]
     3c4:	5f4f4950 	svcpl	0x004f4950
        proceed Show_Menu;
     3c8:	61656c63 	cmnvs	r5, r3, ror #24
     3cc:	6f694472 	svcvs	0x00694472
        } else if (choice == 'S' || choice == 's') {
     3d0:	546e6f00 	strbtpl	r6, [lr], #-3840	; 0xfffff100
            proceed Stop;
     3d4:	00656d69 	rsbeq	r6, r5, r9, ror #26
        } else if (choice == 'V' || choice == 'v') {
     3d8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
            proceed View_Settings;
     3dc:	5f62616c 	svcpl	0x0062616c
        } else if (choice == 'M' || choice == 'm') {
     3e0:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
            proceed Monitor;
     3e4:	495f7473 	ldmdbmi	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     3e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     3ec:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
     3f0:	6f687300 	svcvs	0x00687300
     3f4:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     3f8:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
     3fc:	664f6465 	strbvs	r6, [pc], -r5, ror #8
     400:	756e0066 	strbvc	r0, [lr, #-102]!	; 0xffffff9a
     404:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     408:	64610073 	strbtvs	r0, [r1], #-115	; 0xffffff8d
     40c:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
     410:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     414:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     418:	00636c62 	rsbeq	r6, r3, r2, ror #24
     41c:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 31c <root+0x68>
     420:	006e6165 	rsbeq	r6, lr, r5, ror #2
     424:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     428:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
     42c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     430:	6175006b 	cmnvs	r5, fp, rrx
     434:	745f7472 	ldrbvc	r7, [pc], #-1138	; 43c <devinit_uart+0x4>
static void devinit_uart (int devnum) {
     438:	735f5f00 	cmpvc	pc, #0, 30
	adddevfunc (ioreq_uart_a, devnum);
     43c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     440:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
void udelay (volatile word n) {
     444:	6f68435f 	svcvs	0x0068435f
     448:	00656369 	rsbeq	r6, r5, r9, ror #6
	while (n) {
     44c:	4664656c 	strbtmi	r6, [r4], -ip, ror #10
     450:	0067616c 	rsbeq	r6, r7, ip, ror #2
}
     454:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
	while (n--);
     458:	745f7461 	ldrbvc	r7, [pc], #-1121	; 460 <udelay+0x1c>
     45c:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
     460:	0073746e 	rsbseq	r7, r3, lr, ror #8
		n--;
     464:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     468:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     46c:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
void mdelay (volatile word n) {
     470:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     474:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
	while (n) {
     478:	6e4f6465 	cdpvs	4, 4, cr6, cr15, cr5, {3}
     47c:	73696400 	cmnvc	r9, #0, 8
}
     480:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
		udelay (999);
     484:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     488:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
		n--;
     48c:	7000656d 	andvc	r6, r0, sp, ror #10
     490:	006d756e 	rsbeq	r7, sp, lr, ror #10
     494:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     498:	0079706f 	rsbseq	r7, r9, pc, rrx
void __pi_ondomain (lword d) {
     49c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     4a0:	68630073 	stmdavs	r3!, {r0, r1, r4, r5, r6}^
		if (__pi_systat.effpdm > 1)
     4a4:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
     4a8:	6d736600 	ldclvs	6, cr6, [r3, #-0]
			__pi_systat.effpdm = 1;
     4ac:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
	PRCMPowerDomainOn (d);
     4b0:	61745300 	cmnvs	r4, r0, lsl #6
     4b4:	00737574 	rsbseq	r7, r3, r4, ror r5
     4b8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4bc:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     4c0:	5f00735f 	svcpl	0x0000735f
     4c4:	5f69705f 	svcpl	0x0069705f
	__pi_systat.ondmns |= d;
     4c8:	5f626370 	svcpl	0x00626370
     4cc:	72670074 	rsbvc	r0, r7, #116	; 0x74
}
     4d0:	436e6565 	cmnmi	lr, #423624704	; 0x19400000
     4d4:	61726168 	cmnvs	r2, r8, ror #2
void __pi_syserror (word ec, const char *m) {
     4d8:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
     4e0:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	00676e69 	rsbeq	r6, r7, r9, ror #28
     4ec:	746f6f72 	strbtvc	r6, [pc], #-3954	; 4f4 <__pi_syserror+0x1c>
     4f0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		all_leds_blink;
     4f4:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4f8:	006b746e 	rsbeq	r7, fp, lr, ror #8
     4fc:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     500:	50470074 	subpl	r0, r7, r4, ror r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     504:	735f4f49 	cmpvc	pc, #292	; 0x124
     508:	754f7465 	strbvc	r7, [pc, #-1125]	; ab <g_pfnVectors+0xab>
     50c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     510:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     514:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
     518:	4f41006f 	svcmi	0x0041006f
	while (1) {
     51c:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     520:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
     524:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     528:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
void tci_run_delay_timer () {
     52c:	6f4d3233 	svcvs	0x004d3233
	setdel = __pi_mintk - __pi_old;
     530:	5f006564 	svcpl	0x00006564
     534:	5f69705f 	svcpl	0x0069705f
     538:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
     53c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
     544:	76617474 			; <UNDEFINED> instruction: 0x76617474
     548:	61727500 	cmnvs	r2, r0, lsl #10
     54c:	00736574 	rsbseq	r6, r3, r4, ror r5
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
	sti_tim;
     554:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
}
     558:	7172695f 	cmnvc	r2, pc, asr r9
     55c:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
     560:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
     564:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     568:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
	cli_aux;
     56c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     570:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
     578:	6b615778 	blvs	1856360 <__ccfg+0x18363b8>
     57c:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
     580:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
	sti_aux;
     584:	4e4f4100 	dvfmie	f4, f7, f0
}
     588:	50435557 	subpl	r5, r3, r7, asr r5
     58c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     590:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
void AONRTCIntHandler () {
     594:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	41550074 	cmpmi	r5, r4, ror r0
     59c:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
		if (__pi_utims [0] == 0)
     5a4:	73007261 	movwvc	r7, #609	; 0x261
     5a8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
		if (*(__pi_utims [0])) {
     5ac:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
     5b0:	41007469 	tstmi	r0, r9, ror #8
			(*(__pi_utims [0]))--;
     5b4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
		if (__pi_utims [1] == 0)
     5b8:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
		if (*(__pi_utims [1])) {
     5bc:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
			aux_timer_inactive = 0;
     5c0:	616e456e 	cmnvs	lr, lr, ror #10
			(*(__pi_utims [1]))--;
     5c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
		if (__pi_utims [2] == 0)
     5c8:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
		if (*(__pi_utims [2])) {
     5cc:	50006c65 	andpl	r6, r0, r5, ror #24
			(*(__pi_utims [2]))--;
     5d0:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
		if (__pi_utims [3] != 0) {
     5d4:	6f507563 	svcvs	0x00507563
			if (*(__pi_utims [3])) {
     5d8:	4f726577 	svcmi	0x00726577
				aux_timer_inactive = 0;
     5dc:	5f006666 	svcpl	0x00006666
				(*(__pi_utims [3]))--;
     5e0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	if (__pi_systat.ledsts) {
     5e4:	50534d5f 	subspl	r4, r3, pc, asr sp
     5e8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
		if (__pi_systat.ledblc++ == 0) {
     5ec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     5f0:	5f00745f 	svcpl	0x0000745f
			if (__pi_systat.ledblk) {
     5f4:	5f69705f 	svcpl	0x0069705f
     5f8:	6f646e6f 	svcvs	0x00646e6f
     5fc:	6e69616d 	powvsez	f6, f1, #5.0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	52415500 	subpl	r5, r1, #0, 10
     604:	46774854 			; <UNDEFINED> instruction: 0x46774854
				if (__pi_systat.ledsts & 0x2)
     608:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     60c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     610:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
				if (__pi_systat.ledsts & 0x4)
     614:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
				__pi_systat.ledblk = 0;
     618:	5f5f0065 	svcpl	0x005f0065
     61c:	00424350 	subeq	r4, r2, r0, asr r3
			if (__pi_systat.fstblk)
     620:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     624:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
				__pi_systat.ledblc = 200;
     628:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
		cli_tim;
     630:	4f410065 	svcmi	0x00410065
		__pi_new += setdel;
     634:	434f494e 	movtmi	r4, #63822	; 0xf94e
     638:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
		setdel = 0;
     63c:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
		RISE_N_SHINE;
     640:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
		__pi_new += setdel;
     644:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
		RISE_N_SHINE;
     648:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
     64c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
		aux_timer_inactive = 1;
     650:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
     654:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
				if (__pi_systat.ledsts & 0x1)
     658:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65c:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
     660:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
				if (__pi_systat.ledsts & 0x2)
     664:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
     668:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
     66c:	6f6c436c 	svcvs	0x006c436c
				if (__pi_systat.ledsts & 0x8)
     670:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
				__pi_systat.ledblk = 1;
     674:	52500074 	subspl	r0, r0, #116	; 0x74
     678:	61434d43 	cmpvs	r3, r3, asr #26
		if (aux_timer_inactive) {
     67c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
			cli_aux;
     680:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
     684:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     688:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     68c:	5000656c 	andpl	r6, r0, ip, ror #10
     690:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
     694:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     698:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     69c:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
     6a0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     6a4:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
word tci_update_delay_ticks (Boolean force) {
     6a8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	cli_tim;
     6ac:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     6b0:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
	if (setdel) {
     6b4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	73747075 	cmnvc	r4, #117	; 0x75
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	52415500 	subpl	r5, r1, #0, 10
     6c0:	46494654 			; <UNDEFINED> instruction: 0x46494654
     6c4:	616e454f 	cmnvs	lr, pc, asr #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00656c62 	rsbeq	r6, r5, r2, ror #24
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	return NO;
     6d0:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
			setdel = 0;
     6d4:	7367616c 	cmnvc	r7, #108, 2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     6dc:	61755f69 	cmnvs	r5, r9, ror #30
}
     6e0:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
		sti_tim;
     6e4:	61727465 	cmnvs	r2, r5, ror #8
		return YES;
     6e8:	50006574 	andpl	r6, r0, r4, ror r5
     6ec:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     6f0:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     6f4:	72464f49 	subvc	r4, r6, #292	; 0x124
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
	UARTDisable (UART0_BASE);
     6fc:	61736944 	cmnvs	r3, r4, asr #18
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	00656c62 	rsbeq	r6, r5, r2, ror #24
	UARTDisable (UART0_BASE);
     704:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
	UARTConfigSetExpClk (UART0_BASE,
     708:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     70c:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
     710:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     714:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     71c:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     720:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	6f6d7265 	svcvs	0x006d7265
     728:	6f006564 	svcvs	0x00006564
     72c:	61726570 	cmnvs	r2, r0, ror r5
	urates [0] = rate;
     730:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
}
     734:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
     738:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     73c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     740:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
     744:	00657669 	rsbeq	r7, r5, r9, ror #12
     748:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     750:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
     754:	5f6f6465 	svcpl	0x006f6465
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	5f007874 	svcpl	0x00007874
     75c:	5f69705f 	svcpl	0x0069705f
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	00646c6f 	rsbeq	r6, r4, pc, ror #24
     764:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
     76c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     770:	33697500 	cmncc	r9, #0, 10
     774:	73614232 	cmnvc	r1, #536870915	; 0x20000003
     778:	5f5f0065 	svcpl	0x005f0065
     77c:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
     780:	615f6966 	cmpvs	pc, r6, ror #18
	switch (operation) {
     784:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
     78c:	4e4f4100 	dvfmie	f4, f7, f0
     790:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
     794:	6156636e 	cmpvs	r6, lr, ror #6
     798:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
				*buf++ = uart_a_read;
     79c:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
     7a0:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
			while (len && uart_a_char_available) {
     7a4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
     7a8:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
     7ac:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
			if (len != operation) {
     7b0:	61755f74 	cmnvs	r5, r4, ror pc
}
     7b4:	41007472 	tstmi	r0, r2, ror r4
     7b8:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
			uart_a_disable_int;
     7bc:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
			if (uart_a_char_available) {
     7c0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
				*buf++ = uart_a_read;
     7c4:	0072656c 	rsbseq	r6, r2, ip, ror #10
			uart_a_disable_int;
     7c8:	61726170 	cmnvs	r2, r0, ror r1
     7cc:	6374006d 	cmnvs	r4, #109	; 0x6d
			if (uart_a_char_available) {
     7d0:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     7d4:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
				uart_a_enable_int;
     7d8:	5f79616c 	svcpl	0x0079616c
     7dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
				goto Redo_rx;
     7e0:	5f5f0072 	svcpl	0x005f0072
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
     7e8:	61656c65 	cmnvs	r5, r5, ror #24
			return -2;
     7ec:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
     7f0:	006f6465 	rsbeq	r6, pc, r5, ror #8
				uart_a_write (*buf);
     7f4:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
     7f8:	5f74696e 	svcpl	0x0074696e
			while (len && uart_a_room_in_tx) {
     7fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     800:	726f6600 	rsbvc	r6, pc, #0, 12
     804:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
			if (len != operation) {
     808:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
			uart_a_disable_int;
     80c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     810:	50470065 	subpl	r0, r7, r5, rrx
			if (uart_a_room_in_tx) {
     814:	635f4f49 	cmpvs	pc, #292	; 0x124
     818:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
				uart_a_enable_int;
     81c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     820:	6f694474 	svcvs	0x00694474
				*buf++ = uart_a_read;
     824:	625f5f00 	subsvs	r5, pc, #0, 30
			if (uart_a_room_in_tx) {
     828:	6f747475 	svcvs	0x00747475
				uart_a_write (*buf);
     82c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     830:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
     838:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
			uart_a_enable_int;
     83c:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 844 <ioreq_uart_a+0xc0>
     840:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     844:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
			return 0;
     848:	53007172 	movwpl	r7, #370	; 0x172
			if (len == UART_CNTRL_SETRATE) {
     84c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
				if (__pi_uart_setrate (*((word*)buf),
     850:	6f416c72 	svcvs	0x00416c72
     854:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
     858:	5f5f0063 	svcpl	0x005f0063
				syserror (EREQPAR, "uar");
     85c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
			syserror (ENOOPER, "uai");
     860:	6b636174 	blvs	18d8e38 <__ccfg+0x18b8e90>
			if (len == UART_CNTRL_GETRATE) {
     864:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
				return 1;
     868:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
			syserror (ENOOPER, "uai");
     870:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
     874:	61696c69 	cmnvs	r9, r9, ror #24
     878:	745f7972 	ldrbvc	r7, [pc], #-2418	; 880 <ioreq_uart_a+0xfc>
     87c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     880:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     884:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     888:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
     88c:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
     890:	50470071 	subpl	r0, r7, r1, ror r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
void UART0IntHandler () {
     898:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     8a0:	52415500 	subpl	r5, r1, #0, 10
     8a4:	46494654 			; <UNDEFINED> instruction: 0x46494654
     8a8:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
     8ac:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
     8b4:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
		RISE_N_SHINE;
     8b8:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
     8bc:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
		i_trigger (devevent (UART_A, READ));
     8c0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     8c4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     8c8:	00766174 	rsbseq	r6, r6, r4, ror r1
     8cc:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     8d0:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
     8d4:	616c6564 	cmnvs	ip, r4, ror #10
     8d8:	4f410079 	svcmi	0x00410079
     8dc:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     8e0:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
     8e4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     8e8:	5f00656c 	svcpl	0x0000656c
     8ec:	5f69705f 	svcpl	0x0069705f
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	0077656e 	rsbseq	r6, r7, lr, ror #10
     8f4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     8f8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
		i_trigger (devevent (UART_A, WRITE));
     8fc:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
     904:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
		RISE_N_SHINE;
     908:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     90c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     910:	4100656c 	tstmi	r0, ip, ror #10
		i_trigger (devevent (UART_A, WRITE));
     914:	61424e4f 	cmpvs	r2, pc, asr #28
     918:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     91c:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
     920:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
     924:	61746c6f 	cmnvs	r4, pc, ror #24
     928:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
     92c:	6f690074 	svcvs	0x00690074
     930:	5f716572 	svcpl	0x00716572
     934:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     938:	5f00615f 	svcpl	0x0000615f
     93c:	5f69705f 	svcpl	0x0069705f
}
     940:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     944:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
     948:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     94c:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     950:	5f007469 	svcpl	0x00007469
void __buttons_setirq (int val) {
     954:	5f69705f 	svcpl	0x0069705f
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
     95c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     964:	006d756e 	rsbeq	r7, sp, lr, ror #10
     968:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 8b4 <UART0IntHandler+0x20>
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	616d2f65 	cmnvs	sp, r5, ror #30
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     974:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     978:	706f746b 	rsbvc	r7, pc, fp, ror #8
     97c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     980:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     984:	4349502f 	movtmi	r5, #36911	; 0x902f
}
     988:	502f534f 	eorpl	r5, pc, pc, asr #6
     98c:	534f6369 	movtpl	r6, #62313	; 0xf369
     990:	3143432f 	cmpcc	r3, pc, lsr #6
     994:	2f585833 	svccs	0x00585833
void __pinlist_setirq (int val) {
     998:	6e69616d 	powvsez	f6, f1, #5.0
	for (i = 0; i < N_PINLIST; i++) {
     99c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a0:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9a4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	6142746e 	cmpvs	r2, lr, ror #8
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     9b0:	41550079 	cmpmi	r5, r9, ror r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     9b8:	616e4574 	smcvs	58452	; 0xe454
     9bc:	00656c62 	rsbeq	r6, r5, r2, ror #24
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
}
     9c4:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
     9c8:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
     9cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9d0:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
void GPIOIntHandler () {
     9d4:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
if (buttons_int) {
     9d8:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     9dc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
	buttons_disable ();
     9e0:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
     9e4:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
	i_trigger ((aword)&__button_list);
     9e8:	00746c61 	rsbseq	r6, r4, r1, ror #24
     9ec:	4f706f74 	svcmi	0x00706f74
     9f0:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
     9f4:	6174536e 	cmnvs	r4, lr, ror #6
     9f8:	5f006b63 	svcpl	0x00006b63
     9fc:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
     a00:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
     a04:	30545241 	subscc	r5, r4, r1, asr #4
     a08:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     a0c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     a10:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
	RISE_N_SHINE;
     a14:	53706565 	cmnpl	r0, #423624704	; 0x19400000
     a18:	7065656c 	rsbvc	r6, r5, ip, ror #10
     a1c:	726f7000 	rsbvc	r7, pc, #0
if (pin_sensor_int) {
     a20:	6f635f74 	svcvs	0x00635f74
     a24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	i_trigger ((aword)(&__input_pins));
     a28:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     a2c:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
     a30:	5f657461 	svcpl	0x00657461
     a34:	616c6564 	cmnvs	ip, r4, ror #10
     a38:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a3c:	00736b63 	rsbseq	r6, r3, r3, ror #22
     a40:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
     a44:	00657275 	rsbeq	r7, r5, r5, ror r2
     a48:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
     a4c:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
     a50:	00745f6e 	rsbseq	r5, r4, lr, ror #30
	__pinsen_disable_and_clear;
     a54:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
	RISE_N_SHINE;
     a58:	5f007665 	svcpl	0x00007665
     a5c:	5f69705f 	svcpl	0x0069705f
     a60:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
}
     a64:	5f007970 	svcpl	0x00007970
     a68:	5f69705f 	svcpl	0x0069705f
     a6c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     a70:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
     a74:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
void system_init () {
     a78:	66710074 			; <UNDEFINED> instruction: 0x66710074
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	00656572 	rsbeq	r6, r5, r2, ror r5
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a80:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	5f5f0071 	svcpl	0x005f0071
     a88:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     a8c:	006b726f 	rsbeq	r7, fp, pc, ror #4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a90:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a94:	6f706d00 	svcvs	0x00706d00
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	00736c6f 	rsbseq	r6, r3, pc, ror #24
     a9c:	61765f5f 	cmnvs	r6, pc, asr pc
     aa0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	74750074 	ldrbtvc	r0, [r5], #-116	; 0xffffff8c
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	52415500 	subpl	r5, r1, #0, 10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab4:	73754254 	cmnvc	r5, #84, 4	; 0x40000005
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	5f5f0079 	svcpl	0x005f0079
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 9e4 <GPIOIntHandler+0x10>	; <UNPREDICTABLE>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	6f6c6c61 	svcvs	0x006c6c61
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	2f007469 	svccs	0x00007469
     acc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     ad0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     ad4:	2f6e6974 	svccs	0x006e6974
		if (port_confs [i] & 0x80)
     ad8:	6b736544 	blvs	1cd9ff0 <__ccfg+0x1cba048>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	2f706f74 	svccs	0x00706f74
     ae0:	4f534c4f 	svcmi	0x00534c4f
		if (port_confs [i] & 0x40)
     ae4:	2f54454e 	svccs	0x0054454e
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	4f434950 	svcmi	0x00434950
     aec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     af0:	2f534f63 	svccs	0x00534f63
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	6b2f6c65 	blvs	bdbc94 <__ccfg+0xbbbcec>
	all_leds_blink;
     afc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     b00:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     b04:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     b08:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     b0c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     b10:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b14:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     b1c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b20:	616d5f69 	cmnvs	sp, r9, ror #30
     b24:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
     b28:	72630065 	rsbvc	r0, r3, #101	; 0x65
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2c:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
     b34:	006b6863 	rsbeq	r6, fp, r3, ror #16
	IntEnable (INT_AON_RTC_COMB);
     b38:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
     b3c:	70006565 	andvc	r6, r0, r5, ror #10
     b40:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
	__pi_malloc_init ();
     b44:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	006e656c 	rsbeq	r6, lr, ip, ror #10
     b4c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
     b58:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
     b5c:	76656464 	strbtvc	r6, [r5], -r4, ror #8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     b64:	64697000 	strbtvs	r7, [r9], #-0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	00726576 	rsbseq	r6, r2, r6, ror r5
     b6c:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
     b70:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	urates [0] = UART_RATE / 100;
     b74:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     b78:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
	reinit_uart ();
     b7c:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
	EXTRA_INITIALIZERS;
     b80:	5f746e65 	svcpl	0x00746e65
     b84:	5f5f0074 	svcpl	0x005f0074
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b88:	63756e67 	cmnvs	r5, #1648	; 0x670
     b8c:	5f61765f 	svcpl	0x0061765f
     b90:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
     b98:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
     ba0:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
			devinit [i] . init (devinit [i] . param);
     ba4:	00797274 	rsbseq	r7, r9, r4, ror r2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
     bac:	73656d00 	cmnvc	r5, #0, 26
     bb0:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
	IntEnable (INT_UART0_COMB);
     bb4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     bb8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
     bbc:	61625f69 	cmnvs	r2, r9, ror #30
	tci_run_auxiliary_timer ();
     bc0:	61747364 	cmnvs	r4, r4, ror #6
		diag ("");
     bc4:	5f006574 	svcpl	0x00006574
     bc8:	5f69705f 	svcpl	0x0069705f
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		diag ("Leftover RAM: %d bytes",
     bd4:	61775f69 	cmnvs	r7, r9, ror #30
     bd8:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
     bdc:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
     be0:	6b00646e 	blvs	19da0 <__exidx_end+0x16f24>
     be4:	616c6c69 	cmnvs	ip, r9, ror #24
     be8:	5f006c6c 	svcpl	0x00006c6c
     bec:	5f69705f 	svcpl	0x0069705f
     bf0:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
     bf4:	00656572 	rsbeq	r6, r5, r2, ror r5
     bf8:	6f6f425f 	svcvs	0x006f425f
     bfc:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
     c00:	006b6e75 	rsbeq	r6, fp, r5, ror lr
     c04:	61647075 	smcvs	18181	; 0x4705
     c08:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
     c0c:	6b61775f 	blvs	185e990 <__ccfg+0x183e9e8>
     c10:	5f5f0065 	svcpl	0x005f0065
     c14:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     c18:	00646565 	rsbeq	r6, r4, r5, ror #10
     c1c:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
     c20:	0065646f 	rsbeq	r6, r5, pc, ror #8
     c24:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
     c28:	5f5f0074 	svcpl	0x005f0074
     c2c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; b54 <system_init+0xdc>	; <UNPREDICTABLE>
__attribute__ ((noreturn)) void __pi_release () {
     c30:	70636d65 	rsbvc	r6, r3, r5, ror #26
     c34:	67640079 			; <UNDEFINED> instruction: 0x67640079
     c38:	0074756f 	rsbseq	r7, r4, pc, ror #10
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	70615f5f 	rsbvc	r5, r1, pc, asr pc
	check_stack_overflow;
     c40:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c44:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     c48:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	update_n_wake (MAX_WORD, NO);
     c4c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     c50:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
     c54:	666e006e 	strbtvs	r0, [lr], -lr, rrx
	for_all_tasks (__pi_curr) {
     c58:	006c6961 	rsbeq	r6, ip, r1, ror #18
     c5c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c60:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
	__SLEEP;
     c68:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
     c6c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c70:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
     c74:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
	system_event_count ++;
     c78:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c7c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
	switch (__pi_systat.effpdm) {
     c80:	70636e72 	rsbvc	r6, r3, r2, ror lr
     c84:	5f5f0079 	svcpl	0x005f0079
     c88:	6a5f6970 	bvs	17db250 <__ccfg+0x17bb2a8>
     c8c:	006e696f 	rsbeq	r6, lr, pc, ror #18
			__WFI ();
     c90:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     c94:	645f7265 	ldrbvs	r7, [pc], #-613	; c9c <__pi_release+0x6c>
     c98:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
	check_stack_overflow;
     c9c:	5f5f0065 	svcpl	0x005f0065
     ca0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
     ca8:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	715f7663 	cmpvc	pc, r3, ror #12
			goto Redo;
     cb0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
	for_all_tasks (__pi_curr) {
     cb4:	65727000 	ldrbvs	r7, [r2, #-0]!
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	5f5f0076 	svcpl	0x005f0076
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	5f766374 	svcpl	0x00766374
     cc0:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc4:	00745f72 	rsbseq	r5, r4, r2, ror pc
     cc8:	70766374 	rsbsvc	r6, r6, r4, ror r3
     ccc:	745f7968 	ldrbvc	r7, [pc], #-2408	; cd4 <__pi_release+0xa4>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cd0:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
     cd4:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     cdc:	2f006c6f 	svccs	0x00006c6f
			__WFI ();
     ce0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     ce8:	2f6e6974 	svccs	0x006e6974
}
     cec:	6b736544 	blvs	1cda204 <__ccfg+0x1cba25c>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cf0:	2f706f74 	svccs	0x00706f74
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf4:	4f534c4f 	svcmi	0x00534c4f
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	2f54454e 	svccs	0x0054454e
     cfc:	4f434950 	svcmi	0x00434950
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d00:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     d04:	2f534f63 	svccs	0x00534f63
     d08:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0c:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	2f497465 	svccs	0x00497465
     d14:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
     d18:	63740063 	cmnvs	r4, #99	; 0x63
     d1c:	645f7076 	ldrbvs	r7, [pc], #-118	; d24 <__pi_release+0xf4>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	6f707369 	svcvs	0x00707369
     d24:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
     d30:	656e0067 	strbvs	r0, [lr, #-103]!	; 0xffffff99
     d34:	63007478 	movwvs	r7, #1144	; 0x478
     d38:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
     d3c:	745f6e75 	ldrbvc	r6, [pc], #-3701	; d44 <__pi_release+0x114>
			SysCtrlSetRechargeBeforePowerDown
     d40:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d44:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
     d4c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
     d54:	63740074 	cmnvs	r4, #116	; 0x74
     d58:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5c:	74006f66 	strvc	r6, [r0], #-3942	; 0xfffff09a
     d60:	6f5f7663 	svcvs	0x005f7663
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	006e6570 	rsbeq	r6, lr, r0, ror r5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	5f766374 	svcpl	0x00766374
     d6c:	706f7264 	rsbvc	r7, pc, r4, ror #4
     d70:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
			while (!(AONWUCPowerStatusGet () &
     d78:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	00797470 	rsbseq	r7, r9, r0, ror r4
     d80:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d84:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 424 <root+0x170>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
     d8c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d90:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
     d94:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
     d9c:	73657565 	cmnvc	r5, #423624704	; 0x19400000
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     da0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; da8 <__pi_release+0x178>
     da4:	715f7663 	cmpvc	pc, r3, ror #12
			SysCtrlAdjustRechargeAfterPowerDown ();
     da8:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
			reinit_uart ();
     dac:	5f00735f 	svcpl	0x0000735f
     db0:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
     db4:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
}
     db8:	745f6d65 	ldrbvc	r6, [pc], #-3429	; dc0 <__pi_release+0x190>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dbc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; dc4 <__pi_release+0x194>
     dc0:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     dc8:	00745f6b 	rsbseq	r5, r4, fp, ror #30
     dcc:	70747461 	rsbsvc	r7, r4, r1, ror #8
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
     dd4:	00746e65 	rsbseq	r6, r4, r5, ror #28
     dd8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ddc:	72450065 	subvc	r0, r5, #101	; 0x65
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	0074725f 	rsbseq	r7, r4, pc, asr r2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	5f766374 	svcpl	0x00766374
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	006f6c63 	rsbeq	r6, pc, r3, ror #24
     dec:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
     df4:	0073726f 	rsbseq	r7, r3, pc, ror #4
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	5f766374 	svcpl	0x00766374
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e00:	63740065 	cmnvs	r4, #101	; 0x65
     e04:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
			PRCMPowerDomainOff (
     e08:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
     e0c:	6f5f7663 	svcvs	0x005f7663
	__SLEEP;
     e10:	74007475 	strvc	r7, [r0], #-1141	; 0xfffffb8b
     e14:	5f707663 	svcpl	0x00707663
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	0077656e 	rsbseq	r6, r7, lr, ror #10
	goto Redo;
     e1c:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
     e20:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
     e24:	745f7663 	ldrbvc	r7, [pc], #-1635	; e2c <__pi_release+0x1fc>
     e28:	7000746d 	andvc	r7, r0, sp, ror #8
     e2c:	00737274 	rsbseq	r7, r3, r4, ror r2
     e30:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     e34:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     e38:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e3c:	706e775f 	rsbvc	r7, lr, pc, asr r7
     e40:	63740073 	cmnvs	r4, #115	; 0x73
     e44:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
     e48:	00657469 	rsbeq	r7, r5, r9, ror #8
     e4c:	5f766374 	svcpl	0x00766374
     e50:	00766372 	rsbseq	r6, r6, r2, ror r3
     e54:	5f766374 	svcpl	0x00766374
     e58:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     e5c:	5f5f0065 	svcpl	0x005f0065
     e60:	5f766374 	svcpl	0x00766374
     e64:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
     e68:	5f637365 	svcpl	0x00637365
     e6c:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
     e70:	70007379 	andvc	r7, r0, r9, ror r3
     e74:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
     e78:	006c6163 	rsbeq	r6, ip, r3, ror #2
     e7c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
     e80:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     e84:	00646575 	rsbeq	r6, r4, r5, ror r5
int main (void) {
     e88:	5f766374 	svcpl	0x00766374
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     e90:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	63740074 	cmnvs	r4, #116	; 0x74
	system_init ();
     e9c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
	tcv_init ();
     ea0:	6573006d 	ldrbvs	r0, [r3, #-109]!	; 0xffffff93
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	6f697373 	svcvs	0x00697373
     ea8:	6374006e 	cmnvs	r4, #110	; 0x6e
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	635f7076 	cmpvs	pc, #118	; 0x76
     eb0:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
     eb4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
     ebc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	delay (16, 0);
     ec0:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
     ec4:	63740064 	cmnvs	r4, #100	; 0x64
     ec8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
	__pi_release ();
     ecc:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     ed0:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     ed4:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
     ed8:	006e7265 	rsbeq	r7, lr, r5, ror #4
     edc:	5f766374 	svcpl	0x00766374
     ee0:	0065706f 	rsbeq	r7, r5, pc, rrx
     ee4:	5f766374 	svcpl	0x00766374
static void killev (__pi_pcb_t *pid) {
     ee8:	00746d78 	rsbseq	r6, r4, r8, ror sp
	wfun = (aword)(pid->code);
     eec:	61766374 	cmnvs	r6, r4, ror r3
	for_all_tasks (i) {
     ef0:	745f7064 	ldrbvc	r7, [pc], #-100	; ef8 <killev+0x10>
		for (j = 0; j < nevents (i); j++) {
     ef4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     ef8:	756c705f 	strbvc	r7, [ip, #-95]!	; 0xffffffa1
     efc:	65680067 	strbvs	r0, [r8, #-103]!	; 0xffffff99
			    || i->Events [j] . Event == wfun
     f00:	61006461 	tstvs	r0, r1, ror #8
		for (j = 0; j < nevents (i); j++) {
     f04:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
			if (i->Events [j] . Event == (aword)pid
     f08:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
     f0c:	5f5f0073 	svcpl	0x005f0073
     f10:	5f766374 	svcpl	0x00766374
				wakeupev (i, j);
     f14:	61656871 	smcvs	22145	; 0x5681
     f18:	00745f64 	rsbseq	r5, r4, r4, ror #30
	for_all_tasks (i) {
     f1c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
}
     f20:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
static void qfree (aword *ch) {
     f28:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2c:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
	cc = (aword*)(mpools + MA_NP);
     f30:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
	m_setnextp (ch, chunk);
     f34:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
	m_setnextp (cc, ch);
     f38:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
}
     f3c:	63725f79 	cmnvs	r2, #484	; 0x1e4
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f40:	71620076 	smcvc	8198	; 0x2006
     f44:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     f48:	756c7000 	strbvc	r7, [ip, #-0]!
			m_setnextp (cc, m_nextp (chunk));
     f4c:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f58 <qfree+0x34>
     f54:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     f58:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     f5c:	00735f6b 	rsbseq	r5, r3, fp, ror #30
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
     f68:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     f6c:	6f635f70 	svcvs	0x00635f70
			m_setnextp (cc, m_nextp (chunk));
     f70:	6f72746e 	svcvs	0x0072746e
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	655f006c 	ldrbvs	r0, [pc, #-108]	; f10 <killev+0x28>
     f78:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     f7c:	645f006b 	ldrbvs	r0, [pc], #-107	; f84 <qfree+0x60>
     f80:	00617461 	rsbeq	r7, r1, r1, ror #8
     f84:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
     f88:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
			if (m_size (chunk) >= m_size (ch))
     f8c:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
     f90:	5349746c 	movtpl	r7, #37996	; 0x946c
     f94:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
		chunk = m_nextp (chunk))
     f98:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f9c:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
     fa0:	61485253 	cmpvs	r8, r3, asr r2
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	diag_wait (a);
     fa8:	655f0072 	ldrbvs	r0, [pc, #-114]	; f3e <qfree+0x1a>
	diag_wchar (c, a);
     fac:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     fb0:	62655f00 	rsbvs	r5, r5, #0, 30
}
     fb4:	2f007373 	svccs	0x00007373
     fb8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	syserror (ESTATE, "state");
     fbc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     fc0:	2f6e6974 	svccs	0x006e6974
     fc4:	6b736544 	blvs	1cda4dc <__ccfg+0x1cba534>
     fc8:	2f706f74 	svccs	0x00706f74
void update_n_wake (word min, Boolean force) {
     fcc:	4f534c4f 	svcmi	0x00534c4f
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	2f54454e 	svccs	0x0054454e
     fd4:	4f434950 	svcmi	0x00434950
     fd8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fdc:	2f534f63 	svccs	0x00534f63
     fe0:	33314343 	teqcc	r1, #201326593	; 0xc000001
     fe4:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
     fe8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     fec:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
     ff0:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     ff4:	73625f00 	cmnvc	r2, #0, 30
     ff8:	655f0073 	ldrbvs	r0, [pc, #-115]	; f8d <qfree+0x69>
     ffc:	61746164 	cmnvs	r4, r4, ror #2
    1000:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
    1004:	61666544 	cmnvs	r6, r4, asr #10
    1008:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    100c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
		for_all_tasks (i) {
    1010:	67007265 	strvs	r7, [r0, -r5, ror #4]
	__pi_mintk = znew + min;
    1014:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    1018:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
			if (!twaiting (i))
    101c:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1020:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1024:	73654432 	cmnvc	r5, #838860800	; 0x32000000
    1028:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
    102c:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1030:	43005253 	movwmi	r5, #595	; 0x253
    1034:	5f474643 	svcpl	0x00474643
    1038:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
    103c:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
    1040:	00305f44 	eorseq	r5, r0, r4, asr #30
    1044:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1048:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    104c:	4f4c5f54 	svcmi	0x004c5f54
    1050:	315f4441 	cmpcc	pc, r1, asr #8
				wakeuptm (i);
    1054:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1058:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
		for_all_tasks (i) {
    105c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
				d = i->Timer - znew;
    1060:	00474946 	subeq	r4, r7, r6, asr #18
    1064:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1068:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
		if ((word)(__pi_mintk - znew) < min) 
    106c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
    1070:	00544553 	subseq	r4, r4, r3, asr r5
    1074:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	__pi_old = znew;
    1078:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1080 <update_n_wake+0xb4>
}
    107c:	4f435f45 	svcmi	0x00435f45
	TCI_RUN_DELAY_TIMER;
    1080:	5f00464e 	svcpl	0x0000464e
}
    1084:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    1088:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
    108c:	2f656d6f 	svccs	0x00656d6f
    1090:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1094:	442f6e69 	strtmi	r6, [pc], #-3689	; 109c <proceed+0x4>
void proceed (word state) {
    1098:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	prcdstate (__pi_curr, state);
    109c:	4f2f706f 	svcmi	0x002f706f
    10a0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	release;
    10a4:	502f5445 	eorpl	r5, pc, r5, asr #8
    10a8:	534f4349 	movtpl	r4, #62281	; 0xf349
void __pi_wait (aword event, word state) {
    10ac:	6369502f 	cmnvs	r9, #47	; 0x2f
	sint j = nevents (__pi_curr);
    10b0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    10b8:	63632f58 	cmnvs	r3, #88, 30	; 0x160
    10bc:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
		syserror (ENEVENTS, "sw");
    10c0:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10c4:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	setestate (__pi_curr->Events [j], state, event);
    10c8:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
	incwait (__pi_curr);
    10cc:	445f444e 	ldrbmi	r4, [pc], #-1102	; 10d4 <__pi_wait+0x28>
	setestate (__pi_curr->Events [j], state, event);
    10d0:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
}
    10d4:	5347414c 	movtpl	r4, #29004	; 0x714c
    10d8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10dc:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
void __pi_trigger (aword event) {
    10e0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fd4 <update_n_wake+0x8>
	for_all_tasks (i) {
    10e4:	305f4341 	subscc	r4, pc, r1, asr #6
		for (j = 0; j < nevents (i); j++) {
    10e8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10ec:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    10f0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fe4 <update_n_wake+0x18>
    10f4:	315f4341 	cmpcc	pc, r1, asr #6
			if (i->Events [j] . Event == event) {
    10f8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10fc:	4f4d5f47 	svcmi	0x004d5f47
    1100:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
				wakeupev (i, j);
    1104:	5f464e4f 	svcpl	0x00464e4f
    1108:	43430031 	movtmi	r0, #12337	; 0x3031
	for_all_tasks (i) {
    110c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
}
    1110:	5f474643 	svcpl	0x00474643
aword __pi_join (aword pid, word st) {
    1114:	5f504154 	svcpl	0x00504154
	for_all_tasks (i) {
    1118:	5f504144 	svcpl	0x00504144
    111c:	43430030 	movtmi	r0, #12336	; 0x3030
	return 0;
    1120:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
		if ((aword)i == pid) {
    1124:	5f474643 	svcpl	0x00474643
			__pi_wait (pid, st);
    1128:	5f504154 	svcpl	0x00504154
}
    112c:	5f504144 	svcpl	0x00504144
	for_all_tasks (i) {
    1130:	63630031 	cmnvs	r3, #49	; 0x31
    1134:	745f6766 	ldrbvc	r6, [pc], #-1894	; 113c <delay+0x4>
void delay (word d, word state) {
    1138:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	settstate (__pi_curr, state);
    113c:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1140:	505f4746 	subspl	r4, pc, r6, asr #14
    1144:	5f544f52 	svcpl	0x00544f52
    1148:	5f373231 	svcpl	0x00373231
	update_n_wake (d, YES);
    114c:	43003639 	movwmi	r3, #1593	; 0x639
    1150:	5f474643 	svcpl	0x00474643
	__pi_curr->Timer = __pi_old + d;
    1154:	53415245 	movtpl	r5, #4677	; 0x1245
    1158:	4f435f45 	svcmi	0x00435f45
	inctimer (__pi_curr);
    115c:	4300464e 	movwmi	r4, #1614	; 0x64e
    1160:	5f474643 	svcpl	0x00474643
    1164:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    1168:	4f52505f 	svcmi	0x0052505f
    116c:	31335f54 	teqcc	r3, r4, asr pc
	if (fun == NULL)
    1170:	4300305f 	movwmi	r3, #95	; 0x5f
		return (int) __pi_curr;
    1174:	5f474643 	svcpl	0x00474643
    1178:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
	for_all_tasks (i)
    117c:	41565f45 	cmpmi	r6, r5, asr #30
}
    1180:	5f44494c 	svcpl	0x0044494c
		if (i->code == fun)
    1184:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
	for_all_tasks (i)
    1188:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    118c:	52465f47 	subpl	r5, r6, #284	; 0x11c
    1190:	4f5f5145 	svcmi	0x005f5145
int __pi_strlen (const char *s) {
    1194:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	43430054 	movtmi	r0, #12372	; 0x3054
}
    119c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	for (i = 0; *(s+i) != '\0'; i++);
    11a0:	5f474643 	svcpl	0x00474643
	while (n--)
    11a4:	544f5250 	strbpl	r5, [pc], #-592	; 11ac <__pi_memcpy+0xa>
    11a8:	5f33365f 	svcpl	0x0033365f
		*dest++ = *src++;
    11ac:	43003233 	movwmi	r3, #563	; 0x233
    11b0:	5f474643 	svcpl	0x00474643
    11b4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		syserror (EREQPAR, "addv");
    11bc:	4300305f 	movwmi	r3, #95	; 0x5f
		syserror (ERESOURCE, "addv");
    11c0:	5f474643 	svcpl	0x00474643
	if (ioreq [loc] != NULL)
    11c4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    11c8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		syserror (ERESOURCE, "addv");
    11cc:	4300315f 	movwmi	r3, #351	; 0x15f
	ioreq [loc] = rf;
    11d0:	5f474643 	svcpl	0x00474643
}
    11d4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11d8:	4f52505f 	svcmi	0x0052505f
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
    11e0:	0034365f 	eorseq	r3, r4, pc, asr r6
    11e4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11e8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ec:	5f464c5f 	svcpl	0x00464c5f
    11f0:	004b4c43 	subeq	r4, fp, r3, asr #24
    11f4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		syserror (ENODEVICE, "io");
    11f8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    11fc:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	if (len == 0)
    1200:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
	ret = (ioreq [dev]) (operation, buf, len);
    1204:	534e4f49 	movtpl	r4, #61257	; 0xef49
    1208:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
	if (ret >= 0)
    120c:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
	if (ret == -1) {
    1210:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    1214:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
		if (retry == WNONE)
    1218:	70006b6e 	andvc	r6, r0, lr, ror #22
		iowait (dev, operation, retry);
    121c:	735f6e69 	cmpvc	pc, #1680	; 0x690
    1220:	6f736e65 	svcvs	0x00736e65
    1224:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
			release;
    1228:	70006461 	andvc	r6, r0, r1, ror #8
	if (ret == -2) {
    122c:	735f6e69 	cmpvc	pc, #1680	; 0x690
		if (retry != WNONE) {
    1230:	6f736e65 	svcvs	0x00736e65
    1234:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
			iowait (dev, operation, retry);
    1238:	2f007469 	svccs	0x00007469
    123c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			(ioreq [dev]) (NONE, buf, len);
    1240:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1244:	2f6e6974 	svccs	0x006e6974
    1248:	6b736544 	blvs	1cda760 <__ccfg+0x1cba7b8>
		(ioreq [dev]) (NONE, buf, len);
    124c:	2f706f74 	svccs	0x00706f74
    1250:	4f534c4f 	svcmi	0x00534c4f
    1254:	2f54454e 	svccs	0x0054454e
}
    1258:	4f434950 	svcmi	0x00434950
	if (retry != WNONE) {
    125c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		delay (-ret - 2, retry);
    1260:	2f534f63 	svccs	0x00534f63
    1264:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1268:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    126c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		release;
    1270:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1274:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    127c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    1280:	006d7265 	rsbeq	r7, sp, r5, ror #4
    1284:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
    1288:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		syserror (ERESOURCE, "mal1");
    128c:	6f626544 	svcvs	0x00626544
    1290:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1294:	6f682f00 	svcvs	0x00682f00
    1298:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 10ec <__pi_trigger+0xc>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a4:	6f746b73 	svcvs	0x00746b73
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    12ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
}
    12b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    12b4:	2f534f43 	svccs	0x00534f43
    12b8:	4f636950 	svcmi	0x00636950
    12bc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    12c0:	2f736269 	svccs	0x00736269
    12c4:	622f4f49 	eorvs	r4, pc, #292	; 0x124
void __pi_free (aword *ch) {
    12c8:	6f747475 	svcvs	0x00747475
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    12d0:	75627000 	strbvc	r7, [r2, #-0]!
		syserror (EMALLOC, "malg");
    12d4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12d8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	mcfree [MA_NP] += m_size (ch);
    12dc:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
		m_size (ch) ^= MALLOC_UMASK;
    12e0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12e4:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
	mcfree [MA_NP] += m_size (ch);
    12e8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	QFREE;
    12ec:	63615f73 	cmnvs	r1, #460	; 0x1cc
	if (mevent [MA_NP] . nwait) {
    12f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    12f4:	6f434500 	svcvs	0x00434500
		trigger ((aword)(&(mevent [MA_NP])));
    12f8:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
		mevent [MA_NP] . nwait --;
    12fc:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
}
    1300:	655f7469 	ldrbvs	r7, [pc, #-1129]	; e9f <main+0x17>
    1304:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    1308:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
    130c:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
void kill (aword pid) {
    1310:	00305f64 	eorseq	r5, r0, r4, ror #30
		pid = (aword) __pi_curr;
    1314:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
	j = NULL;
    1318:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	for_all_tasks (i) {
    131c:	5f656500 	svcpl	0x00656500
	syserror (EREQPAR, "kpi");
    1320:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    1324:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
		if ((aword)i == pid) {
    1328:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    132c:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
				__PCB = i->Next;
    1330:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
			killev (i);
    1334:	5f656500 	svcpl	0x00656500
			ufree (i);
    1338:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
			if (i == __pi_curr)
    133c:	6f435700 	svcvs	0x00435700
    1340:	6300746e 	movwvs	r7, #1134	; 0x46e
				release;
    1344:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
				j->Next = i->Next;
    1348:	73616c00 	cmnvc	r1, #0, 24
    134c:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
    1350:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
}
    1354:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
    1358:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    135c:	6600636e 	strvs	r6, [r0], -lr, ror #6
void killall (fsmcode fun) {
    1360:	006d6f72 	rsbeq	r6, sp, r2, ror pc
	j = NULL;
    1364:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
	for (i = __PCB; i != NULL; ) {
    1368:	00646165 	rsbeq	r6, r4, r5, ror #2
			if (i == __pi_curr)
    136c:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
	for (i = __PCB; i != NULL; ) {
    1370:	6f682f00 	svcvs	0x00682f00
	if (rel)
    1374:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 11c8 <adddevfunc+0x10>
		release;
    1378:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		if (i->code == fun) {
    137c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1380:	6f746b73 	svcvs	0x00746b73
			if (j == NULL)
    1384:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				__PCB = k;
    1388:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			if (i == __pi_curr)
    138c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				rel = YES;
    1390:	2f534f43 	svccs	0x00534f43
			killev (i);
    1394:	4f636950 	svcmi	0x00636950
			ufree (i);
    1398:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			i = k;
    139c:	2f736269 	svccs	0x00736269
    13a0:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
				j->Next = k;
    13a4:	2f656761 	svccs	0x00656761
    13a8:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
}
    13ac:	5f656761 	svcpl	0x00656761
    13b0:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    13b4:	33303872 	teqcc	r0, #7471104	; 0x720000
	if (size < 8)
    13b8:	00632e35 	rsbeq	r2, r3, r5, lsr lr
		_size = 2;
    13bc:	6f6c6363 	svcvs	0x006c6363
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c0:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
		_size = (((aword)size) + 3) >> 2;
    13c4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	706f6300 	rsbvc	r6, pc, r0, lsl #6
		_size = (((aword)size) + 3) >> 2;
    13cc:	63006e65 	movwvs	r6, #3685	; 0xe65
		if (mevent [MA_NP] . nfail != 255)
    13d0:	00727470 	rsbseq	r7, r2, r0, ror r4
    13d4:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
			mevent [MA_NP] . nfail ++;
    13d8:	00657a69 	rsbeq	r7, r5, r9, ror #20
		mnfree [MA_NP] = 0;
    13dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    13e0:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13e8:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
			syserror (EMALLOC, "malc");
    13ec:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
    13f0:	00746961 	rsbseq	r6, r4, r1, ror #18
		if (m_size (chunk) >= _size)
    13f4:	5f746567 	svcpl	0x00746567
    13f8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
		chunk = m_nextp (chunk)) {
    13fc:	74757000 	ldrbtvc	r7, [r5], #-0
		m_setnextp (cc, m_nextp (chunk));
    1400:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1404:	5f5f0065 	svcpl	0x005f0065
    1408:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
			m_size (chunk) = _size;
    140c:	00656e69 	rsbeq	r6, r5, r9, ror #28
			cc = chunk + _size + m_hdrlen;
    1410:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 135c <kill+0x4c>
    1414:	616d2f65 	cmnvs	sp, r5, ror #30
			m_size (cc) = waste - m_hdrlen;
    1418:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			QFREE;
    141c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		mevent [MA_NP] . nfail = 0;
    1420:	706f746b 	rsbvc	r7, pc, fp, ror #8
		mcfree [MA_NP] -= m_size (chunk);
    1424:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1428:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    142c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1430:	502f534f 	eorpl	r5, pc, pc, asr #6
		m_size (chunk) |= MALLOC_UMASK;
    1434:	534f6369 	movtpl	r6, #62313	; 0xf369
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1438:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		m_size (chunk) |= MALLOC_UMASK;
    143c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
			mnfree [MA_NP] = mcfree [MA_NP];
    1440:	61697265 	cmnvs	r9, r5, ror #4
}
    1444:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1448:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    144c:	7300632e 	movwvc	r6, #814	; 0x32e
    1450:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1454:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
    1458:	73007363 	movwvc	r7, #867	; 0x363
    145c:	6f5f7265 	svcvs	0x005f7265
aword __pi_fork (fsmcode func, aword data) {
    1460:	00667475 	rsbeq	r7, r6, r5, ror r4
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1464:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13b0 <killall+0x50>
    1468:	616d2f65 	cmnvs	sp, r5, ror #30
    146c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		if ((j = __PCB) == NULL)
    1470:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	i->Next = NULL;
    1474:	706f746b 	rsbvc	r7, pc, fp, ror #8
	i->data = data;
    1478:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if ((j = __PCB) == NULL)
    147c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
    1480:	4349502f 	movtmi	r5, #36911	; 0x902f
			for (; j->Next != NULL; j = j->Next);
    1484:	502f534f 	eorpl	r5, pc, pc, asr #6
    1488:	534f6369 	movtpl	r6, #62313	; 0xf369
	return (aword) i;
    148c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1490:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	if (mevent [MA_NP] . nwait != 255)
    1494:	61697265 	cmnvs	r9, r5, ror #4
    1498:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    149c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 532 <tci_run_delay_timer+0x6>
		mevent [MA_NP] . nwait ++;
    14a0:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
	wait ((aword)(&(mevent [MA_NP])), state);
    14a4:	6f682f00 	svcvs	0x00682f00
    14a8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 12fc <__pi_free+0x34>
void diag (const char *mess, ...) {
    14ac:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    14b0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    14b4:	6f746b73 	svcvs	0x00746b73
	diag_disable_int (a, is);
    14b8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    14bc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    14c0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				d = (bc == 16) ? 10000 : 1000000000;
    14c4:	2f534f43 	svccs	0x00534f43
	diag_disable_int (a, is);
    14c8:	4f636950 	svcmi	0x00636950
	while (*mess != '\0') {
    14cc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	dgout ('\r');
    14d0:	2f736269 	svccs	0x00736269
	dgout ('\n');
    14d4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    14d8:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
    14dc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	diag_wait (a);
    14e0:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
	diag_enable_int (a, is);
    14e4:	72657300 	rsbvc	r7, r5, #0, 6
    14e8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
}
    14ec:	6f682f00 	svcvs	0x00682f00
    14f0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1344 <kill+0x34>
    14f4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		if (*mess == '%') {
    14f8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    14fc:	6f746b73 	svcvs	0x00746b73
			if (*mess == 'l') {
    1500:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1504:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				mess++;
    1508:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				val = va_arg (ap, lword);
    150c:	2f534f43 	svccs	0x00534f43
				bc = 32;
    1510:	4f636950 	svcmi	0x00636950
				bc = 16;
    1514:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			switch (*mess) {
    1518:	2f736269 	svccs	0x00736269
    151c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1520:	5f2f6c61 	svcpl	0x002f6c61
				dgout ('%');
    1524:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1528:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
				dgout (*mess);
    152c:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    1530:	61757100 	cmnvs	r5, r0, lsl #2
			switch (*mess) {
    1534:	5f00746e 	svcpl	0x0000746e
					v = __pi_hex_enc_table [
    1538:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
					i += 4;
    153c:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
					(val >> (bc - i)) & 0xf];
    1540:	5f006c61 	svcpl	0x00006c61
    1544:	5f4d4f5f 	svcpl	0x004d4f5f
					dgout (v);
    1548:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
    154c:	5f5f0045 	svcpl	0x005f0045
				while (i < bc) {
    1550:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
			mess++;
    1554:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
					d /= 10;
    1558:	6f682f00 	svcvs	0x00682f00
				if ((val >> (bc - 1)) & 1) {
    155c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 13b0 <killall+0x50>
    1560:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
					dgout ('-');
    1564:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1568:	6f746b73 	svcvs	0x00746b73
						val |= 0xffff0000;
    156c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1570:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1574:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	2f534f43 	svccs	0x00534f43
    157c:	4f636950 	svcmi	0x00636950
    1580:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
					v = (word) (val / d);
    1584:	2f736269 	svccs	0x00736269
					if (v || d == 1) break;
    1588:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    158c:	5f2f6c61 	svcpl	0x002f6c61
					d /= 10;
    1590:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
				d = (bc == 16) ? 10000 : 1000000000;
    1594:	61697265 	cmnvs	r9, r5, ror #4
					dgout (v + '0');
    1598:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    159c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14e8 <diag+0x3c>
    15a0:	616d2f65 	cmnvs	sp, r5, ror #30
					d /= 10;
    15a4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
					val = val - (v * d);
    15a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
					if (d == 0) break;
    15ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
					v = (word) (val / d);
    15b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    15b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				if (bc == 16)
    15b8:	4349502f 	movtmi	r5, #36911	; 0x902f
				d = (bc == 16) ? 10000 : 1000000000;
    15bc:	502f534f 	eorpl	r5, pc, pc, asr #6
					val &= 0xffff;
    15c0:	534f6369 	movtpl	r6, #62313	; 0xf369
					dgout (*s);
    15c4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
					s++;
    15c8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
				while (*s != '\0') {
    15cc:	61697265 	cmnvs	r9, r5, ror #4
    15d0:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
			dgout (*mess++);
    15d4:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    15d8:	67410063 	strbvs	r0, [r1, -r3, rrx]
    15dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
    15e0:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
    15e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
    15e8:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    while(1)
    15ec:	73726170 	cmnvc	r2, #112, 2
{
    15f0:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
    SetupTrimDevice();
    15f4:	006d726f 	rsbeq	r7, sp, pc, ror #4
    pui32Src = &_etext;
    15f8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15fc:	5f645f79 	svcpl	0x00645f79
    __asm("    ldr     r0, =_bss\n"
    1600:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    1604:	6f682f00 	svcvs	0x00682f00
    1608:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 145c <__pi_malloc+0xa4>
    160c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1610:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
   main();
    1614:	6f746b73 	svcvs	0x00746b73
    FaultISR();
    1618:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
        *pui32Dest++ = *pui32Src++;
    161c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1620:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1624:	2f534f43 	svccs	0x00534f43
    1628:	4f636950 	svcmi	0x00636950
    162c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1630:	2f736269 	svccs	0x00736269
    1634:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1638:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
static byte get_byte () {
    163c:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1640:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    1644:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1648:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    164c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1654 <get_byte+0x18>
		if (ee_inp)
    1650:	6f776c5f 	svcvs	0x00776c5f
			b |= 1;
    1654:	4e006472 	mcrmi	4, 0, r6, cr0, cr2, {3}
    1658:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1524 <diag+0x78>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    165c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
	for (b = 0, i = 0; i < 8; i++) {
    1660:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
}
    1664:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
    1668:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
    166c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
static void put_byte (byte b) {
    1670:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    1674:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    1678:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 1680 <put_byte+0x10>
    167c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
		if (b & 0x80)
    1680:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
    1684:	5f5f0065 	svcpl	0x005f0065
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1688:	33746e69 	cmncc	r4, #1680	; 0x690
	for (i = 0; i < 8; i++) {
    168c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
		b <<= 1;
    1690:	20554e47 	subscs	r4, r5, r7, asr #28
	for (i = 0; i < 8; i++) {
    1694:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
}
    1698:	20332e39 	eorscs	r2, r3, r9, lsr lr
    169c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    16a0:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
    16a4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
	put_byte (cmd);
    16a8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    16ac:	5b202965 	blpl	80bc48 <__ccfg+0x7ebca0>
}
    16b0:	2f4d5241 	svccs	0x004d5241
    16b4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
static void wwait (word st, word del) {
    16b8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
    16bc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    16c0:	6172622d 	cmnvs	r2, sp, lsr #4
	while (dopen && (rdsr () & 1)) {
    16c4:	2068636e 	rsbcs	r6, r8, lr, ror #6
    16c8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    16cc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    16d0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
	put_byte (CMD_RDSR);
    16d4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	r = get_byte ();
    16d8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    16dc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
	while (dopen && (rdsr () & 1)) {
    16e0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
}
    16e4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
		if (st == WNONE)
    16e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    16ec:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
			mdelay (1);
    16f0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    16f4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
			delay (del, st);
    16f8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
    16fc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
			release;
    1700:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    1704:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    1708:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
static void ready () {
    170c:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
	if (dopen) {
    1710:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
		wwait (WNONE, 1);
    1714:	662d2067 	strtvs	r2, [sp], -r7, rrx
    1718:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    171c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	dstat = 0;
    1720:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
}
    1724:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1728:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    172c:	61746164 	cmnvs	r4, r4, ror #2
	udelay (1);
    1730:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    1734:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	udelay (1);
    1738:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
		dopen = DOPEN_TEMP;
    173c:	006d7361 	rsbeq	r7, sp, r1, ror #6
    1740:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1744:	745f3874 	ldrbvc	r3, [pc], #-2164	; 174c <cclose>
    1748:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
static void cclose () {
    174c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	if (dopen == DOPEN_TEMP) {
    1750:	2f2e2e2f 	svccs	0x002e2e2f
    1754:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		wwait (WNONE, 1);
    1758:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    175c:	6f612f62 	svcvs	0x00612f62
	cmd_0 (CMD_DP);
    1760:	61625f6e 	cmnvs	r2, lr, ror #30
    1764:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
		dopen = 0;
    1768:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
}
    176c:	43706d65 	cmnmi	r0, #6464	; 0x1940
word ee_open () {
    1770:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
	ready ();
    1774:	6f697463 	svcvs	0x00697463
	dopen = DOPEN_PERM;
    1778:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
    177c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
}
    1780:	706d6554 	rsbvc	r6, sp, r4, asr r5
	if (dopen) {
    1784:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    1788:	6b6e654a 	blvs	1b9acb8 <__ccfg+0x1b7ad10>
		dopen = DOPEN_TEMP;
    178c:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
		cclose ();
    1790:	73626f6a 	cmnvc	r2, #424	; 0x1a8
}
    1794:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
int ser_in (word st, char *buf, int len) {
    1798:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    179c:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
	if (len == 0)
    17a0:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
	if (__inpline == NULL) {
    17a4:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
		if ((prcs = running (__inserial)) == 0) {
    17a8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    17ac:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
			prcs = runthread (__inserial);
    17b0:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 17b8 <ser_in+0x20>
    17b4:	73656c75 	cmnvc	r5, #29952	; 0x7500
			if (prcs == 0) {
    17b8:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
				npwait (st);
    17bc:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
		release;
    17c0:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
		join (prcs, st);
    17c4:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    17c8:	325f6168 	subscc	r6, pc, #104, 2
	if (*__inpline == NULL) // bin cmd
    17cc:	655f305f 	ldrbvs	r3, [pc, #-95]	; 1775 <ee_open+0x5>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17d0:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
	if (prcs >= len)
    17d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		prcs = len-1;
    17d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	memcpy (buf, __inpline, prcs);
    17dc:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
    17e0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    17e4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
	ufree (__inpline);
    17e8:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
	__inpline = NULL;
    17ec:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	if (*buf) // if it's NULL, it's a bin cmd
    17f0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 8f8 <UART0IntHandler+0x64>
		buf [prcs] = '\0';
    17f4:	33746e69 	cmncc	r4, #1680	; 0x690
}
    17f8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
		prcs = strlen (__inpline);
    17fc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1800:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
		return 0;
    1804:	53746e65 	cmnpl	r4, #1616	; 0x650
    1808:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    180c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 16d8 <wwait+0x20>
int ser_outf (word st, const char *m, ...) {
    1810:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    1814:	43435452 	movtmi	r5, #13394	; 0x3452
	if ((prcs = running (__outserial)) != 0) {
    1818:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    181c:	6f43746e 	svcvs	0x0043746e
		join (prcs, st);
    1820:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    1824:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
		release;
    1828:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
	if ((buf = vform (NULL, m, ap)) == NULL) {
    182c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    1830:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
    1834:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
		umwait (st);
    1838:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
    183c:	00646165 	rsbeq	r6, r4, r5, ror #2
	if (runstrand (__outserial, buf) == 0) {
    1840:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1844:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
    1848:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
		ufree (buf);
    184c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
		npwait (st);
    1850:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
}
    1854:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
    1858:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    185c:	524f4e00 	subpl	r4, pc, #0, 28
    1860:	415f4d4f 	cmpmi	pc, pc, asr #26
int ser_inf (word st, const char *fmt, ...) {
    1864:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    1868:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
	if (fmt == NULL)
    186c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	if (__inpline == NULL) {
    1870:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
		if ((prcs = running (__inserial)) == 0) {
    1874:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1878:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
			prcs = runthread (__inserial);
    187c:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    1880:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
			if (prcs == 0) {
    1884:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
				npwait (st);
    1888:	63657300 	cmnvs	r5, #0, 6
		release;
    188c:	53646e41 	cmnpl	r4, #1040	; 0x410
		join (prcs, st);
    1890:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1894:	2f2e0063 	svccs	0x002e0063
	va_start (ap, fmt);
    1898:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	prcs = vscan (__inpline, fmt, ap);
    189c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    18a0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	ufree (__inpline);
    18a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	__inpline = NULL;
    18a8:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
}
    18ac:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    18b0:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    18b4:	7a697300 	bvc	1a5e4bc <__ccfg+0x1a3e514>
		return 0;
    18b8:	70797465 	rsbsvc	r7, r9, r5, ror #8
    18bc:	4f4e0065 	svcmi	0x004e0065
    18c0:	5f4d4f52 	svcpl	0x004d4f52
strand (__outserial, const char*)
    18c4:	62555043 	subsvs	r5, r5, #67	; 0x43
    18c8:	70657361 	rsbvc	r7, r5, r1, ror #6
    18cc:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
    18d0:	4f4e0074 	svcmi	0x004e0074
endstrand
    18d4:	5f4d4f52 	svcpl	0x004d4f52
    18d8:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
	ptr = data;
    18dc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    18e0:	33697500 	cmncc	r9, #0, 10
	if (*ptr)
    18e4:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
		len = strlen (ptr);
    18e8:	33697500 	cmncc	r9, #0, 10
    18ec:	756f4332 	strbvc	r4, [pc, #-818]!	; 15c2 <diag+0x116>
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18f0:	4e00746e 	cdpmi	4, 0, cr7, cr0, cr14, {3}
    18f4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 17c0 <ser_in+0x28>
    18f8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    18fc:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    1900:	4f4e0064 	svcmi	0x004e0064
	len -= quant;
    1904:	5f4d4f52 	svcpl	0x004d4f52
    1908:	63555043 	cmpvs	r5, #67	; 0x43
    190c:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
	if (len == 0) {
    1910:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
		ufree (data);
    1914:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		finish;
    1918:	2f2e2e2f 	svccs	0x002e2e2f
    191c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1920:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1924:	70632f62 	rsbvc	r2, r3, r2, ror #30
    1928:	00632e75 	rsbeq	r2, r3, r5, ror lr
    192c:	4f524f4e 	svcmi	0x00524f4e
    1930:	50435f4d 	subpl	r5, r3, sp, asr #30
strand (__inserial, address)
    1934:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
    1938:	6b73616d 	blvs	1cd9ef4 <__ccfg+0x1cb9f4c>
    193c:	31706d00 	cmncc	r0, r0, lsl #26
    1940:	00766572 	rsbseq	r6, r6, r2, ror r5
    1944:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
	if (__inpline != NULL)
    1948:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    194c:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 178c <ee_close+0x8>
		finish;
    1950:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1954:	61577465 	cmpvs	r7, r5, ror #8
    1958:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    195c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 184c <ser_outf+0x3c>
    1960:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
		umwait (IM_INIT);
    1964:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		release;
    1968:	524f4e00 	subpl	r4, pc, #0, 28
	savedata (data);
    196c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
	len = MAX_LINE_LENGTH;
    1970:	70757465 	rsbsvc	r7, r5, r5, ror #8
	io (IM_READ, __cport, READ, ptr, 1);
    1974:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1978:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17b8 <ser_in+0x20>
    197c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1980:	61577465 	cmpvs	r7, r5, ror #8
	if (ptr == (char*) data) { // new line
    1984:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1988:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1878 <ser_inf+0x14>
		if (*ptr == '\0') { // bin cmd
    198c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
			proceed (IM_BIN);
    1990:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1994:	31676643 	cmncc	r7, r3, asr #12
		if (*ptr < 0x20)
    1998:	524f4e00 	subpl	r4, pc, #0, 28
    199c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
			proceed (IM_READ);
    19a0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    19a4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
	if (*ptr == '\n' || *ptr == '\r') {
    19a8:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17e8 <ser_in+0x50>
    19ac:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    19b0:	61577465 	cmpvs	r7, r5, ror #8
		*ptr = '\0';
    19b4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		__inpline = (char*)data;
    19b8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 18a8 <ser_inf+0x44>
		finish;
    19bc:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
	if (len) {
    19c0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		ptr++;
    19c4:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    19c8:	524f4e00 	subpl	r4, pc, #0, 28
		len--;
    19cc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
	proceed (IM_READ);
    19d0:	70757465 	rsbsvc	r7, r5, r5, ror #8
	io (IM_BIN, __cport, READ, ptr, 1);
    19d4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    19d8:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1818 <ser_outf+0x8>
    19dc:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    19e0:	61577465 	cmpvs	r7, r5, ror #8
    19e4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
	len -= 2;
    19e8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 18d8 <__outserial+0x14>
	if (len > *ptr + 1) // 1 for 0x04
    19ec:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    19f0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		len = *ptr + 1;
    19f4:	33676643 	cmncc	r7, #70254592	; 0x4300000
    19f8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
	ptr++;
    19fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a00:	2f2e2e2f 	svccs	0x002e2e2f
    1a04:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1a08:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1a0c:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    1a10:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    1a14:	4f4e0063 	svcmi	0x004e0063
	len -= quant;
    1a18:	5f4d4f52 	svcpl	0x004d4f52
		__inpline = (char*)data;
    1a1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
		finish;
    1a20:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
	ptr += quant;
    1a24:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    1a28:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1a30 <__inserial+0xfc>
endstrand
    1a2c:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    1a30:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
	proceed (IM_BINL);
    1a34:	6f54676e 	svcvs	0x0054676e
endstrand
    1a38:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    1a3c:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    1a40:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1a44:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1a48:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1a4c:	76655231 			; <UNDEFINED> instruction: 0x76655231
		if (res && (d < n))
    1a50:	6f697369 	svcvs	0x00697369
    1a54:	4f41006e 	svcmi	0x0041006e
    1a58:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    1a5c:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
			res [d] = (char) c;
    1a60:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
		d++;
    1a64:	66664f72 	uqsub16vs	r4, r6, r2
    1a68:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    1a6c:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a70:	6f437265 	svcvs	0x00437265
    1a74:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    1a78:	00746573 	rsbseq	r6, r4, r3, ror r5
				enci (10000);
    1a7c:	4f524f4e 	svcmi	0x00524f4e
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a80:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1a84:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
	d = 0;
    1a88:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
		c = *fm++;
    1a8c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
		if (c == '\\') {
    1a90:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
			if ((c = *fm++) == '\0') {
    1a94:	5f6d6972 	svcpl	0x006d6972
    1a98:	67696475 			; <UNDEFINED> instruction: 0x67696475
				outc ('\\');
    1a9c:	33697500 	cmncc	r9, #0, 10
			if ((c = *fm++) == '\0') {
    1aa0:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
				outc ('\\');
    1aa4:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    1aa8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
			outc (c);
    1aac:	006c7463 	rsbeq	r7, ip, r3, ror #8
    1ab0:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
			if (c == '\0')
    1ab4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1abc <__pi_vfparse+0x4c>
    1ab8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
			outc (c);
    1abc:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
				outc (val);
    1ac0:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
				val = (word) va_arg (ap, aword);
    1ac4:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
		if (c == '%') {
    1ac8:	6f437265 	svcvs	0x00437265
    1acc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
			c = *fm++;
    1ad0:	57746573 			; <UNDEFINED> instruction: 0x57746573
			switch (c) {
    1ad4:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1ad8:	6f724670 	svcvs	0x00724670
    1adc:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    1ae0:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    1ae4:	6b61576e 	blvs	18578a4 <__ccfg+0x18378fc>
    1ae8:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    1aec:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    1af0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
				outc ('%');
    1af4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1af8:	524f4e00 	subpl	r4, pc, #0, 28
				outc (c);
    1afc:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 1b04 <__pi_vfparse+0x94>
    1b00:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
    1b04:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
				if (c == '\0')
    1b08:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
				return d;
    1b0c:	6f46746c 	svcvs	0x0046746c
}
    1b10:	31434372 	hvccc	13362	; 0x3432
    1b14:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
			switch (c) {
    1b18:	76655277 			; <UNDEFINED> instruction: 0x76655277
    1b1c:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    1b20:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
				for (i = 12; ; i -= 4) {
    1b24:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    1b28:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
						[ (val >> i) & 0xf ]);
    1b2c:	6f695666 	svcvs	0x00695666
    1b30:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    1b34:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
					outc (__pi_hex_enc_table
    1b38:	5f6d6972 	svcpl	0x006d6972
    1b3c:	00646f62 	rsbeq	r6, r4, r2, ror #30
					if (i == 0)
    1b40:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1b44:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
				for (i = 12; ; i -= 4) {
    1b48:	6b6c4366 	blvs	1b128e8 <__ccfg+0x1af2940>
				val = (word) va_arg (ap, aword);
    1b4c:	524f4e00 	subpl	r4, pc, #0, 28
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	4f5f4d4f 	svcmi	0x005f4d4f
				val = (word) va_arg (ap, aword);
    1b54:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
				if (c == 'd' && (val & 0x8000) != 0) {
    1b58:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1b5c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
					outc ('-');
    1b60:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    1b64:	72756300 	rsbsvc	r6, r5, #0, 6
					val = (~val) + 1;
    1b68:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1b6c:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
				for (i = 12; ; i -= 4) {
    1b70:	006b636f 	rsbeq	r6, fp, pc, ror #6
				enci (10000);
    1b74:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1b78:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1b7c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1b80:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1b84:	4f524f4e 	svcmi	0x00524f4e
    1b88:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b8c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1b90:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1b94:	6f466d69 	svcvs	0x00466d69
    1b98:	616e4172 	smcvs	58386	; 0xe412
    1b9c:	61707962 	cmnvs	r0, r2, ror #18
    1ba0:	61567373 	cmpvs	r6, r3, ror r3
    1ba4:	3165756c 	cmncc	r5, ip, ror #10
    1ba8:	524f4e00 	subpl	r4, pc, #0, 28
    1bac:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1bb0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1bb4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1bb8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
				if (c == 'd' || c == 'u') {
    1bbc:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
    1bc0:	6f4c726c 	svcvs	0x004c726c
					if (c == 'd' &&
    1bc4:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
					val = va_arg (ap, lword);
    1bc8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
					fm++;
    1bcc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
					if (c == 'd' &&
    1bd0:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1a08 <__inserial+0xd4>
    1bd4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
						outc ('-');
    1bd8:	72756300 	rsbsvc	r6, r5, #0, 6
    1bdc:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
						val = (~val) + 1;
    1be0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				enci (10000);
    1be4:	6d697600 	stclvs	6, cr7, [r9, #-0]
					enci (1000000000UL);
    1be8:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    1bec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1bf0:	62690030 	rsbvs	r0, r9, #48	; 0x30
    1bf4:	4f736169 	svcmi	0x00736169
    1bf8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1bfc:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    1c00:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1c04:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1c08:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1c0c:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    1c10:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    1c14:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1c18:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1ae4 <__pi_vfparse+0x74>
    1c1c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1c20:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1c24:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1c28:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
				} else if (c == 'x') {
    1c2c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
					for (i = 28; ; i -= 4) {
    1c30:	61466648 	cmpvs	r6, r8, asr #12
					val = va_arg (ap, lword);
    1c34:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
							[ (val >> i) & 0xf ]);
    1c38:	00747261 	rsbseq	r7, r4, r1, ror #4
    1c3c:	4f524f4e 	svcmi	0x00524f4e
						outc (__pi_hex_enc_table
    1c40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1c44:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1c48:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
						if (i == 0)
    1c4c:	6f466d69 	svcvs	0x00466d69
    1c50:	4f635272 	svcmi	0x00635272
					for (i = 28; ; i -= 4) {
    1c54:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
					outc ('%');
    1c58:	61694249 	cmnvs	r9, r9, asr #4
    1c5c:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    1c60:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
					outc ('l');
    1c64:	4161746c 	cmnmi	r1, ip, ror #8
    1c68:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
				val = (word) va_arg (ap, aword);
    1c6c:	4f4e0074 	svcmi	0x004e0074
				outc (val);
    1c70:	5f4d4f52 	svcpl	0x004d4f52
    1c74:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
				while (*st != '\0') {
    1c78:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c7c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c80:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1c84:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
					outc (*st);
    1c88:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    1c8c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
					st++;
    1c90:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		c = *fm++;
    1c94:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    1c98:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    1c9c:	66437478 			; <UNDEFINED> instruction: 0x66437478
char *vform (char *res, const char *fm, va_list aq) {
    1ca0:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    1ca4:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
	if (res != NULL) {
    1ca8:	61746c65 	cmnvs	r4, r5, ror #24
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cb0:	33697500 	cmncc	r9, #0, 10
    1cb4:	736f5832 	cmnvc	pc, #3276800	; 0x320000
}
    1cb8:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    1cbc:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
	fml = strlen (fm) + 17;
    1cc0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1cc4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1cc8:	4f4e0065 	svcmi	0x004e0065
	if ((res = (char*) umalloc (fml)) == NULL)
    1ccc:	5f4d4f52 	svcpl	0x004d4f52
    1cd0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cd4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cdc:	41726f46 	cmnmi	r2, r6, asr #30
    1ce0:	6f63706d 	svcvs	0x0063706d
    1ce4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
		ufree (res);
    1ce8:	4f4e0031 	svcmi	0x004e0031
		goto Again;
    1cec:	5f4d4f52 	svcpl	0x004d4f52
	if (buf == NULL || fmt == NULL)
    1cf0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cf4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
	if (buf == NULL || fmt == NULL)
    1cf8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cfc:	41726f46 	cmnmi	r2, r6, asr #30
    1d00:	6f63706d 	svcvs	0x0063706d
		    	    case 'u': scanu (lword); break;
    1d04:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
			while (isspace (*buf)) buf++;
    1d08:	4f4e0032 	svcmi	0x004e0032
    1d0c:	5f4d4f52 	svcpl	0x004d4f52
	while (*fmt != '\0') {
    1d10:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
		if (*fmt++ != '%')
    1d14:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
		switch (*fmt++) {
    1d18:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d1c:	41726f46 	cmnmi	r2, r6, asr #30
    1d20:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1d24:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1d28:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    1d2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bf8 <__pi_vfparse+0x188>
    1d30:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
}
    1d34:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
		switch (*fmt++) {
    1d38:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    1d3c:	66006574 			; <UNDEFINED> instruction: 0x66006574
    1d40:	31676663 	cmncc	r7, r3, ror #12
    1d44:	61746144 	cmnvs	r4, r4, asr #2
			while (isspace (*buf)) buf++;
    1d48:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1d4c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d50:	734f6352 	movtvc	r6, #62290	; 0xf352
    1d54:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    1d58:	73616942 	cmnvc	r1, #1081344	; 0x108000
    1d5c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			if (*buf == '\0')
    1d60:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
			if (*buf != ',') {
    1d64:	61740065 	cmnvs	r4, r5, rrx
			sap = va_arg (ap, char*);
    1d68:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
			nc++;
    1d6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			if (*buf != ',') {
    1d70:	524f4e00 	subpl	r4, pc, #0, 28
				while (!isspace (*buf) && *buf != ',' &&
    1d74:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1d78:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1d7c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1d80:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1d84:	6152726f 	cmpvs	r2, pc, ror #4
    1d88:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    1d8c:	67664374 			; <UNDEFINED> instruction: 0x67664374
			while (isspace (*buf)) buf++;
    1d90:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1d94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d98:	2f2e2e2f 	svccs	0x002e2e2f
    1d9c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1da0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			if (*buf == ',') buf++;
    1da4:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    1da8:	5f707574 	svcpl	0x00707574
			*sap = '\0';
    1dac:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
			break;
    1db0:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
		    case 'd': scani (word); break;
    1db4:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1db8:	00636e49 	rsbeq	r6, r3, r9, asr #28
    1dbc:	4f524f4e 	svcmi	0x00524f4e
    1dc0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1dc4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1dc8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1dcc:	6f466d69 	svcvs	0x00466d69
    1dd0:	4f635272 	svcmi	0x00635272
    1dd4:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1dd8:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    1ddc:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    1de0:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    1de4:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    1de8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1cb4 <vform+0x14>
    1dec:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1df0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1df4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1df8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1dfc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1e00:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    1e04:	616c7567 	cmnvs	ip, r7, ror #10
    1e08:	41726f74 	cmnmi	r2, r4, ror pc
    1e0c:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    1e10:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    1e14:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    1e18:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    1e1c:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    1e20:	006d6972 	rsbeq	r6, sp, r2, ror r9
		    case 'u': scanu (word); break;
    1e24:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1e28:	67695370 			; <UNDEFINED> instruction: 0x67695370
    1e2c:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    1e30:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    1e34:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1e38:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1e3c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e40:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e44:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e48:	41726f46 	cmnmi	r2, r6, asr #30
    1e4c:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e50:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1e54:	61566e45 	cmpvs	r6, r5, asr #28
    1e58:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1e5c:	4f524f4e 	svcmi	0x00524f4e
    1e60:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1e64:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1e68:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
		    case 'x': scanx (word); break;
    1e6c:	6f466d69 	svcvs	0x00466d69
    1e70:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1e74:	6f4d6853 	svcvs	0x004d6853
    1e78:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    1e7c:	32336900 	eorscc	r6, r3, #0, 18
    1e80:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    1e84:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    1e88:	61567264 	cmpvs	r6, r4, ror #4
    1e8c:	6f6d006c 	svcvs	0x006d006c
    1e90:	6f436564 	svcvs	0x00436564
    1e94:	0031666e 	eorseq	r6, r1, lr, ror #12
    1e98:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1e9c:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1ea0:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    1ea4:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1ea8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1d74 <vscan+0x84>
    1eac:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1eb0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1eb4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1eb8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1ebc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1ec0:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    1ec4:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    1ec8:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    1ecc:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1ed0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ed4:	41726f46 	cmnmi	r2, r6, asr #30
    1ed8:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1edc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ee0:	61566e45 	cmpvs	r6, r5, asr #28
			switch (*fmt++) {
    1ee4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1ee8:	4f524f4e 	svcmi	0x00524f4e
    1eec:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1ef0:	6f6c4343 	svcvs	0x006c4343
    1ef4:	6f536b63 	svcvs	0x00536b63
    1ef8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
		    	    case 'd': scani (lword); break;
    1efc:	00746547 	rsbseq	r6, r4, r7, asr #10
    1f00:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1f04:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    1f08:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1f0c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1f10:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    1f14:	734f3167 	movtvc	r3, #61799	; 0xf167
    1f18:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    1f1c:	62640066 	rsbvs	r0, r4, #102	; 0x66
    1f20:	6f4c726c 	svcvs	0x004c726c
    1f24:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f28:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1f2c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1f30:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1d68 <vscan+0x78>
    1f34:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1f38:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1f3c:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    1f40:	6f466d69 	svcvs	0x00466d69
    1f44:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1f48:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1f4c:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1f50:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1f54:	43646e41 	cmnmi	r4, #1040	; 0x410
		    	    case 'x': scanx (lword); break;
    1f58:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    1f5c:	61527277 	cmpvs	r2, r7, ror r2
    1f60:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    1f64:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1f68:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    1f6c:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    1f70:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1f74:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1e40 <vscan+0x150>
    1f78:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1f7c:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    1f80:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    1f84:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    1f88:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1f8c:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    1f90:	524f4e00 	subpl	r4, pc, #0, 28
    1f94:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f98:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f9c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1fa0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1fa4:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    1fa8:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1df0 <vscan+0x100>
    1fac:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    1fb0:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    1fb4:	6f583233 	svcvs	0x00583233
    1fb8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1fbc:	00776f52 	rsbseq	r6, r7, r2, asr pc
    1fc0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1fc4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		    	    case 'd': scani (lword); break;
    1fc8:	6f436648 	svcvs	0x00436648
    1fcc:	4f4e006c 	svcmi	0x004e006c
    1fd0:	5f4d4f52 	svcpl	0x004d4f52
    1fd4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1fd8:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    1fdc:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1fe0:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
		    	    case 'u': scanu (lword); break;
    1fe4:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    1fe8:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    1fec:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    1ff0:	33697500 	cmncc	r9, #0, 10
    1ff4:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    1ff8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1ffc:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    2000:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2004:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 1e40 <vscan+0x150>
    2008:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    200c:	4161746c 	cmnmi	r1, ip, ror #8
    2010:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    2014:	33690074 	cmncc	r9, #116	; 0x74
    2018:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    201c:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    2020:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    2024:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2028:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
		    	    case 'x': scanx (lword); break;
    202c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2030:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
			if ((c = *buf++) == '\0')
    2034:	50460065 	subpl	r0, r6, r5, rrx
    2038:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
			sap = va_arg (ap, char*);
    203c:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
			nc++;
    2040:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
			break;
    2044:	00545f32 	subseq	r5, r4, r2, lsr pc
			while (isspace (*buf)) buf++;
    2048:	52545046 	subspl	r5, r4, #70	; 0x46
    204c:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
    2050:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
						*sap++ = *buf++;
    2054:	6300545f 	movwvs	r5, #1119	; 0x45f
    2058:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
			while (isspace (*buf)) buf++;
    205c:	5300706d 	movwpl	r7, #109	; 0x6d
    2060:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2064:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1e9c <vscan+0x1ac>
		return 0;
    2068:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    206c:	50460066 	subpl	r0, r6, r6, rrx
		    case 'x': scanx (word); break;
    2070:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2074:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
		    	    case 'x': scanx (lword); break;
    2078:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    207c:	6400545f 	strvs	r5, [r0], #-1119	; 0xfffffba1
    2080:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    2084:	41726464 	cmnmi	r2, r4, ror #8
    2088:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    208c:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    2090:	70007065 	andvc	r7, r0, r5, rrx
    2094:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    2098:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    209c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    20a0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    20a4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    20a8:	524f4e00 	subpl	r4, pc, #0, 28
    20ac:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    20b0:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    20b4:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    20b8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    20bc:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    20c0:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    20c4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    20c8:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    20cc:	6f447265 	svcvs	0x00447265
    20d0:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    20d4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1fa0 <vscan+0x2b0>
    20d8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    20dc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    20e0:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    20e4:	61686365 	cmnvs	r8, r5, ror #6
    20e8:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    20ec:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    20f0:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    20f4:	6f447265 	svcvs	0x00447265
    20f8:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    20fc:	2f2e2e2f 	svccs	0x002e2e2f
    2100:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2104:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2108:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    210c:	2f62696c 	svccs	0x0062696c
    2110:	5f737973 	svcpl	0x00737973
    2114:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    2118:	5300632e 	movwpl	r6, #814	; 0x32e
    211c:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    2120:	56697061 	strbtpl	r7, [r9], -r1, rrx
    2124:	0064696f 	rsbeq	r6, r4, pc, ror #18
    2128:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    212c:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    2130:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    2134:	5f525450 	svcpl	0x00525450
    2138:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    213c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2140:	00545f33 	subseq	r5, r4, r3, lsr pc
    2144:	4f524f4e 	svcmi	0x00524f4e
    2148:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    214c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    2150:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    2154:	6f537465 	svcvs	0x00537465
    2158:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    215c:	00746547 	rsbseq	r6, r4, r7, asr #10
    2160:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2164:	616d6f44 	cmnvs	sp, r4, asr #30
    2168:	00736e69 	rsbseq	r6, r3, r9, ror #28
    216c:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    2170:	54647000 	strbtpl	r7, [r4], #-0
    2174:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2178:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    217c:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    2180:	6b636f6c 	blvs	18ddf38 <__ccfg+0x18bdf90>
    2184:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
    2188:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    218c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2190:	52500065 	subspl	r0, r0, #101	; 0x65
    2194:	6f444d43 	svcvs	0x00444d43
    2198:	6e69616d 	powvsez	f6, f1, #5.0
    219c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    21a0:	7000656c 	andvc	r6, r0, ip, ror #10
    21a4:	004d7265 	subeq	r7, sp, r5, ror #4
    21a8:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    21ac:	61686365 	cmnvs	r8, r5, ror #6
    21b0:	50656772 	rsbpl	r6, r5, r2, ror r7
    21b4:	6f697265 	svcvs	0x00697265
    21b8:	50460064 	subpl	r0, r6, r4, rrx
    21bc:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    21c0:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    21c4:	5f564544 	svcpl	0x00564544
    21c8:	50460054 	subpl	r0, r6, r4, asr r0
    21cc:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    21d0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    21d4:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    21d8:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    21dc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    21e0:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    21e4:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    21e8:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    21ec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    21f0:	414d5f52 	cmpmi	sp, r2, asr pc
    21f4:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    21f8:	7600545f 			; <UNDEFINED> instruction: 0x7600545f
    21fc:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    2200:	53007061 	movwpl	r7, #97	; 0x61
    2204:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2208:	43444174 	movtmi	r4, #16756	; 0x4174
    220c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2210:	706e4942 	rsbvc	r4, lr, r2, asr #18
    2214:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    2218:	61746c65 	cmnvs	r4, r5, ror #24
    221c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2220:	33697500 	cmncc	r9, #0, 10
    2224:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    2228:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    222c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2230:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    2234:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2238:	5f5f0065 	svcpl	0x005f0065
    223c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2240:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2244:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2248:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    224c:	6f6c0065 	svcvs	0x006c0065
    2250:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    2254:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    2258:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    225c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2260:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2264:	52545046 	subspl	r5, r4, #70	; 0x46
    2268:	5345525f 	movtpl	r5, #21087	; 0x525f
    226c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2270:	545f3144 	ldrbpl	r3, [pc], #-324	; 2278 <NOROM_SetupSetVddrLevel+0x28>
    2274:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2278:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    227c:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    2280:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    2284:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2288:	33637243 	cmncc	r3, #805306372	; 0x30000004
    228c:	46480032 			; <UNDEFINED> instruction: 0x46480032
    2290:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2294:	61536563 	cmpvs	r3, r3, ror #10
    2298:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    229c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    22a0:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    22a4:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    22a8:	00323372 	eorseq	r3, r2, r2, ror r3
    22ac:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    22b0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    22b4:	50460064 	subpl	r0, r6, r4, rrx
    22b8:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2170 <TrimAfterColdResetWakeupFromShutDown+0x98>
    22bc:	564e4145 	strbpl	r4, [lr], -r5, asr #2
    22c0:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 22c8 <NOROM_SetupSetVddrLevel+0x78>
    22c4:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    22c8:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    22cc:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2108 <TrimAfterColdResetWakeupFromShutDown+0x30>
    22d0:	50460064 	subpl	r0, r6, r4, rrx
    22d4:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
    22d8:	4f434344 	svcmi	0x00434344
    22dc:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    22e0:	00545f4e 	subseq	r5, r4, lr, asr #30
    22e4:	52545046 	subspl	r5, r4, #70	; 0x46
    22e8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2174 <TrimAfterColdResetWakeupFromShutDown+0x9c>
    22ec:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    22f0:	00545f46 	subseq	r5, r4, r6, asr #30
    22f4:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    22f8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    22fc:	646f4d72 	strbtvs	r4, [pc], #-3442	; 2304 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x38>
    2300:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    2304:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2308:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    230c:	706e4941 	rsbvc	r4, lr, r1, asr #18
    2310:	46007475 			; <UNDEFINED> instruction: 0x46007475
    2314:	5f525450 	svcpl	0x00525450
    2318:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    231c:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    2320:	00545f44 	subseq	r5, r4, r4, asr #30
    2324:	52545046 	subspl	r5, r4, #70	; 0x46
    2328:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 21b4 <NOROM_SetupTrimDevice+0x8>
    232c:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    2330:	5000545f 	andpl	r5, r0, pc, asr r4
    2334:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    2338:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    233c:	73007465 	movwvc	r7, #1125	; 0x465
    2340:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    2344:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    2348:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    234c:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    2350:	67006174 	smlsdxvs	r0, r4, r1, r6
    2354:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2358:	6f4d3233 	svcvs	0x004d3233
    235c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    2360:	48004743 	stmdami	r0, {r0, r1, r6, r8, r9, sl, lr}
    2364:	5f445241 	svcpl	0x00445241
    2368:	5f495041 	svcpl	0x00495041
    236c:	75630054 	strbvc	r0, [r3, #-84]!	; 0xffffffac
    2370:	61745372 	cmnvs	r4, r2, ror r3
    2374:	4f006574 	svcmi	0x00006574
    2378:	66484353 			; <UNDEFINED> instruction: 0x66484353
    237c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2380:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2384:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2388:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    238c:	52435f52 	subpl	r5, r3, #328	; 0x148
    2390:	5f323343 	svcpl	0x00323343
    2394:	6f610054 	svcvs	0x00610054
    2398:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    239c:	506c7463 	rsbpl	r7, ip, r3, ror #8
    23a0:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    23a4:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    23a8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    23ac:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    23b0:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    23b4:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    23b8:	4e00545f 	cfmvsrmi	mvf0, r5
    23bc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2288 <NOROM_SetupSetVddrLevel+0x38>
    23c0:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    23c4:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    23c8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    23cc:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    23d0:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    23d4:	00676e69 	rsbeq	r6, r7, r9, ror #28
    23d8:	52545046 	subspl	r5, r4, #70	; 0x46
    23dc:	5346485f 	movtpl	r4, #26719	; 0x685f
    23e0:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    23e4:	46415345 	strbmi	r5, [r1], -r5, asr #6
    23e8:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    23ec:	5f484354 	svcpl	0x00484354
    23f0:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    23f4:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    23f8:	70006575 	andvc	r6, r0, r5, ror r5
    23fc:	6b6f6f4c 	blvs	1bde134 <__ccfg+0x1bbe18c>
    2400:	61547075 	cmpvs	r4, r5, ror r0
    2404:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2408:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    240c:	6f437463 	svcvs	0x00437463
    2410:	5241706d 	subpl	r7, r1, #109	; 0x6d
    2414:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    2418:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    241c:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2420:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2424:	316e6f69 	cmncc	lr, r9, ror #30
    2428:	73655200 	cmnvc	r5, #0, 4
    242c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2430:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2434:	6f697461 	svcvs	0x00697461
    2438:	5200326e 	andpl	r3, r0, #-536870906	; 0xe0000006
    243c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2440:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2444:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2448:	336e6f69 	cmncc	lr, #420	; 0x1a4
    244c:	73655200 	cmnvc	r5, #0, 4
    2450:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2454:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2458:	6f697461 	svcvs	0x00697461
    245c:	5300356e 	movwpl	r3, #1390	; 0x56e
    2460:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    2464:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2468:	6f697461 	svcvs	0x00697461
    246c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2470:	70006575 	andvc	r6, r0, r5, ror r5
    2474:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    2478:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    247c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2480:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2484:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    2488:	6f6d7461 	svcvs	0x006d7461
    248c:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    2490:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    2494:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    2498:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    249c:	50007065 	andpl	r7, r0, r5, rrx
    24a0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    24a4:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    24a8:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    24ac:	5f736c61 	svcpl	0x00736c61
    24b0:	50460074 	subpl	r0, r6, r4, ror r0
    24b4:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    24b8:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    24bc:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    24c0:	4e00545f 	cfmvsrmi	mvf0, r5
    24c4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2390 <NOROM_SetupGetTrimForAnabypassValue1+0x18>
    24c8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    24cc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    24d0:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    24d4:	6f565f43 	svcvs	0x00565f43
    24d8:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    24dc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24e0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    24e4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    24e8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    24ec:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    24f0:	73616c46 	cmnvc	r1, #17920	; 0x4600
    24f4:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    24f8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    24fc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2500:	4f435f52 	svcmi	0x00435f52
    2504:	5241504d 	subpl	r5, r1, #77	; 0x4d
    2508:	545f4645 	ldrbpl	r4, [pc], #-1605	; 2510 <NOROM_SetupGetTrimForRadcExtCfg+0x28>
    250c:	776f7000 	strbvc	r7, [pc, -r0]!
    2510:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    2514:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    2518:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    251c:	50460073 	subpl	r0, r6, r3, ror r0
    2520:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2524:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2528:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    252c:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2530:	5f525450 	svcpl	0x00525450
    2534:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2538:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    253c:	00545f35 	subseq	r5, r4, r5, lsr pc
    2540:	544f5250 	strbpl	r5, [pc], #-592	; 2548 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc>
    2544:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2548:	5f544942 	svcpl	0x00544942
    254c:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    2550:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    2554:	00797261 	rsbseq	r7, r9, r1, ror #4
    2558:	4b434150 	blmi	10d2aa0 <__ccfg+0x10b2af8>
    255c:	5f454741 	svcpl	0x00454741
    2560:	00347834 	eorseq	r7, r4, r4, lsr r8
    2564:	50494843 	subpl	r4, r9, r3, asr #16
    2568:	5059545f 	subspl	r5, r9, pc, asr r4
    256c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2570:	30343632 	eorscc	r3, r4, r2, lsr r6
    2574:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    2578:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    257c:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2580:	5f594c49 	svcpl	0x00594c49
    2584:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2588:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    258c:	4e007a69 	vmlsmi.f32	s14, s0, s19
    2590:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 245c <NOROM_SetupGetTrimForAmpcompCtrl+0x4c>
    2594:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2598:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    259c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    25a0:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    25a4:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    25a8:	00796c69 	rsbseq	r6, r9, r9, ror #24
    25ac:	4f524f4e 	svcmi	0x00524f4e
    25b0:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    25b4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    25b8:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    25bc:	61507465 	cmpvs	r0, r5, ror #8
    25c0:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    25c4:	70795465 	rsbsvc	r5, r9, r5, ror #8
    25c8:	4f4e0065 	svcmi	0x004e0065
    25cc:	5f4d4f52 	svcpl	0x004d4f52
    25d0:	70696843 	rsbvc	r6, r9, r3, asr #16
    25d4:	6f666e49 	svcvs	0x00666e49
    25d8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    25dc:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    25e0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    25e4:	70006e6f 	andvc	r6, r0, pc, ror #28
    25e8:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    25ec:	00657079 	rsbeq	r7, r5, r9, ror r0
    25f0:	70696843 	rsbvc	r6, r9, r3, asr #16
    25f4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    25f8:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    25fc:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2600:	6f697369 	svcvs	0x00697369
    2604:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    2608:	50494843 	subpl	r4, r9, r3, asr #16
    260c:	5059545f 	subspl	r5, r9, pc, asr r4
    2610:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2614:	30313331 	eorscc	r3, r1, r1, lsr r3
    2618:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    261c:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    2620:	5f796c69 	svcpl	0x00796c69
    2624:	77680074 			; <UNDEFINED> instruction: 0x77680074
    2628:	00766552 	rsbseq	r6, r6, r2, asr r5
    262c:	50494843 	subpl	r4, r9, r3, asr #16
    2630:	5059545f 	subspl	r5, r9, pc, asr r4
    2634:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2638:	30353632 	eorscc	r3, r5, r2, lsr r6
    263c:	43415000 	movtmi	r5, #4096	; 0x1000
    2640:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2644:	5343575f 	movtpl	r5, #14175	; 0x375f
    2648:	696d0050 	stmdbvs	sp!, {r4, r6}^
    264c:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    2650:	46007665 	strmi	r7, [r0], -r5, ror #12
    2654:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2658:	43435f59 	movtmi	r5, #16217	; 0x3f59
    265c:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    2660:	0032525f 	eorseq	r5, r2, pc, asr r2
    2664:	50494843 	subpl	r4, r9, r3, asr #16
    2668:	5059545f 	subspl	r5, r9, pc, asr r4
    266c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2670:	30353331 	eorscc	r3, r5, r1, lsr r3
    2674:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2678:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    267c:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2680:	61467069 	cmpvs	r6, r9, rrx
    2684:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2688:	43437349 	movtmi	r7, #13129	; 0x3349
    268c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2690:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2694:	5f594c49 	svcpl	0x00594c49
    2698:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    269c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    26a0:	50494843 	subpl	r4, r9, r3, asr #16
    26a4:	5059545f 	subspl	r5, r9, pc, asr r4
    26a8:	43435f45 	movtmi	r5, #16197	; 0x3f45
    26ac:	30323632 	eorscc	r3, r2, r2, lsr r6
    26b0:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    26b4:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    26b8:	41460076 	hvcmi	24582	; 0x6006
    26bc:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    26c0:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    26c4:	00787836 	rsbseq	r7, r8, r6, lsr r8
    26c8:	70696863 	rsbvc	r6, r9, r3, ror #16
    26cc:	006d6146 	rsbeq	r6, sp, r6, asr #2
    26d0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    26d4:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    26d8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    26dc:	6366006e 	cmnvs	r6, #110	; 0x6e
    26e0:	50316766 	eorspl	r6, r1, r6, ror #14
    26e4:	6f746f72 	svcvs	0x00746f72
    26e8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    26ec:	746f7250 	strbtvc	r7, [pc], #-592	; 26f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x1c>
    26f0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    26f4:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    26f8:	6f746365 	svcvs	0x00746365
    26fc:	00745f72 	rsbseq	r5, r4, r2, ror pc
    2700:	544f5250 	strbpl	r5, [pc], #-592	; 2708 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x30>
    2704:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2708:	5f544942 	svcpl	0x00544942
    270c:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    2710:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    2714:	5f35315f 	svcpl	0x0035315f
    2718:	48430034 	stmdami	r3, {r2, r4, r5}^
    271c:	545f5049 	ldrbpl	r5, [pc], #-73	; 2724 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x4c>
    2720:	5f455059 	svcpl	0x00455059
    2724:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    2728:	006e776f 	rsbeq	r7, lr, pc, ror #14
    272c:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2730:	5f325f56 	svcpl	0x00325f56
    2734:	41460032 	cmpmi	r6, r2, lsr r0
    2738:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    273c:	3143435f 	cmpcc	r3, pc, asr r3
    2740:	00787833 	rsbseq	r7, r8, r3, lsr r8
    2744:	4b434150 	blmi	10d2c8c <__ccfg+0x10b2ce4>
    2748:	5f454741 	svcpl	0x00454741
    274c:	00377837 	eorseq	r7, r7, r7, lsr r8
    2750:	544f5250 	strbpl	r5, [pc], #-592	; 2758 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x80>
    2754:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2758:	6b6e555f 	blvs	1b97cdc <__ccfg+0x1b77d34>
    275c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    2760:	52574800 	subspl	r4, r7, #0, 16
    2764:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2768:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    276c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2638 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>
    2770:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2774:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2778:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    277c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2780:	70795470 	rsbsvc	r5, r9, r0, ror r4
    2784:	57480065 	strbpl	r0, [r8, -r5, rrx]
    2788:	5f564552 	svcpl	0x00564552
    278c:	00315f32 	eorseq	r5, r1, r2, lsr pc
    2790:	544f5250 	strbpl	r5, [pc], #-592	; 2798 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc0>
    2794:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2798:	5f544942 	svcpl	0x00544942
    279c:	00454c42 	subeq	r4, r5, r2, asr #24
    27a0:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    27a4:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    27a8:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    27ac:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    27b0:	57480061 	strbpl	r0, [r8, -r1, rrx]
    27b4:	5f564552 	svcpl	0x00564552
    27b8:	00335f32 	eorseq	r5, r3, r2, lsr pc
    27bc:	70696863 	rsbvc	r6, r9, r3, ror #16
    27c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    27c4:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    27c8:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    27cc:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    27d0:	4f545355 	svcmi	0x00545355
    27d4:	00305f4d 	eorseq	r5, r0, sp, asr #30
    27d8:	50494843 	subpl	r4, r9, r3, asr #16
    27dc:	5059545f 	subspl	r5, r9, pc, asr r4
    27e0:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    27e4:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 26a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>
    27e8:	4300315f 	movwmi	r3, #351	; 0x15f
    27ec:	5f504948 	svcpl	0x00504948
    27f0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    27f4:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    27f8:	00303336 	eorseq	r3, r0, r6, lsr r3
    27fc:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2800:	5f315f56 	svcpl	0x00315f56
    2804:	41500030 	cmpmi	r0, r0, lsr r0
    2808:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    280c:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    2810:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    2814:	2f2e006e 	svccs	0x002e006e
    2818:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    281c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2820:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2824:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2828:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    282c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2830:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    2834:	63660063 	cmnvs	r6, #99	; 0x63
    2838:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    283c:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2840:	68430064 	stmdavs	r3, {r2, r5, r6}^
    2844:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2848:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    284c:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    2850:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2854:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    2858:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    285c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2860:	70696843 	rsbvc	r6, r9, r3, asr #16
    2864:	6f666e49 	svcvs	0x00666e49
    2868:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    286c:	6f6e694d 	svcvs	0x006e694d
    2870:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    2874:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    2878:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    287c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2880:	4f4e0076 	svcmi	0x004e0076
    2884:	5f4d4f52 	svcpl	0x004d4f52
    2888:	70696843 	rsbvc	r6, r9, r3, asr #16
    288c:	6f666e49 	svcvs	0x00666e49
    2890:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2894:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2898:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    289c:	6f725064 	svcvs	0x00725064
    28a0:	6f636f74 	svcvs	0x00636f74
    28a4:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    28a8:	43415000 	movtmi	r5, #4096	; 0x1000
    28ac:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    28b0:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    28b4:	50005245 	andpl	r5, r0, r5, asr #4
    28b8:	414b4341 	cmpmi	fp, r1, asr #6
    28bc:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 237d <NOROM_SetupGetTrimForAnabypassValue1+0x5>
    28c0:	50003578 	andpl	r3, r0, r8, ror r5
    28c4:	616b6361 	cmnvs	fp, r1, ror #6
    28c8:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    28cc:	745f6570 	ldrbvc	r6, [pc], #-1392	; 28d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xac>
    28d0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    28d4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    28d8:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    28dc:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    28e0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    28e4:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    28e8:	5f514554 	svcpl	0x00514554
    28ec:	00305f32 	eorseq	r5, r0, r2, lsr pc
    28f0:	70696843 	rsbvc	r6, r9, r3, asr #16
    28f4:	6f666e49 	svcvs	0x00666e49
    28f8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    28fc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    2900:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    2904:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    2908:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    290c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 27d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x100>
    2910:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2914:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2918:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    291c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    2920:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    2924:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2928:	524f4e00 	subpl	r4, pc, #0, 28
    292c:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 2934 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10c>
    2930:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    2934:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    2938:	00646165 	rsbeq	r6, r4, r5, ror #2
    293c:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    2940:	78754100 	ldmdavc	r5!, {r8, lr}^
    2944:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    2948:	61536964 	cmpvs	r3, r4, ror #18
    294c:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    2950:	00657469 	rsbeq	r7, r5, r9, ror #8
    2954:	36316975 			; <UNDEFINED> instruction: 0x36316975
    2958:	61746144 	cmnvs	r4, r4, asr #2
    295c:	33697500 	cmncc	r9, #0, 10
    2960:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    2964:	00617461 	rsbeq	r7, r1, r1, ror #8
    2968:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    296c:	61746144 	cmnvs	r4, r4, asr #2
    2970:	33697500 	cmncc	r9, #0, 10
    2974:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    2978:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    297c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2848 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20>
    2980:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2984:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2988:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    298c:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    2990:	00657469 	rsbeq	r7, r5, r9, ror #8
    2994:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    2998:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    299c:	61563233 	cmpvs	r6, r3, lsr r2
    29a0:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    29a4:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    29a8:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    29ac:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    29b0:	00646165 	rsbeq	r6, r4, r5, ror #2
    29b4:	4f524f4e 	svcmi	0x00524f4e
    29b8:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    29bc:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    29c0:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    29c4:	00657469 	rsbeq	r7, r5, r9, ror #8
    29c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29cc:	2f2e2e2f 	svccs	0x002e2e2f
    29d0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 29d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b0>
    29d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    29d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    29dc:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    29e0:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    29e4:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    29e8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    29ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29f0:	41676552 	cmnmi	r7, r2, asr r5
    29f4:	00726464 	rsbseq	r6, r2, r4, ror #8
    29f8:	71724962 	cmnvc	r2, r2, ror #18
    29fc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2a00:	0064656c 	rsbeq	r6, r4, ip, ror #10
    2a04:	7a69536e 	bvc	1a577c4 <__ccfg+0x1a3781c>
    2a08:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    2a0c:	734f3233 	movtvc	r3, #62003	; 0xf233
    2a10:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    2a14:	6f58656d 	svcvs	0x0058656d
    2a18:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2a1c:	0056435f 	subseq	r4, r6, pc, asr r3
    2a20:	4f524f4e 	svcmi	0x00524f4e
    2a24:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2a28:	5f464843 	svcpl	0x00464843
    2a2c:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    2a30:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    2a34:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    2a38:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2a3c:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2a40:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2a44:	6f58706d 	svcvs	0x0058706d
    2a48:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2a4c:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    2a50:	61745377 	cmnvs	r4, r7, ror r3
    2a54:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a58:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a5c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a60:	72617000 	rsbvc	r7, r1, #0
    2a64:	31506d61 	cmpcc	r0, r1, ror #26
    2a68:	72617000 	rsbvc	r7, r1, #0
    2a6c:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2a70:	72617000 	rsbvc	r7, r1, #0
    2a74:	33506d61 	cmpcc	r0, #6208	; 0x1840
    2a78:	65727000 	ldrbvs	r7, [r2, #-0]!
    2a7c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 210e <TrimAfterColdResetWakeupFromShutDown+0x36>
    2a80:	61745373 	cmnvs	r4, r3, ror r3
    2a84:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a88:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a8c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a90:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2a94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a98:	2f2e2e2f 	svccs	0x002e2e2f
    2a9c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2aa0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2aa4:	736f2f62 	cmnvc	pc, #392	; 0x188
    2aa8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2aac:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2ab0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2ab4:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2ab8:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2abc:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2ac0:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2ac4:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2ac8:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    2acc:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2ad0:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2ad4:	524f4e00 	subpl	r4, pc, #0, 28
    2ad8:	4f5f4d4f 	svcmi	0x005f4d4f
    2adc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2ae0:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2ae4:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2ae8:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2aec:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
    2af0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2af4:	524f4e00 	subpl	r4, pc, #0, 28
    2af8:	4f5f4d4f 	svcmi	0x005f4d4f
    2afc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2b00:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2b04:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2b08:	4f63526f 	svcmi	0x0063526f
    2b0c:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2b10:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2b14:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2b18:	4f4e0063 	svcmi	0x004e0063
    2b1c:	5f4d4f52 	svcpl	0x004d4f52
    2b20:	5f43534f 	svcpl	0x0043534f
    2b24:	534f5048 	movtpl	r5, #61512	; 0xf048
    2b28:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2b2c:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2b30:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2b34:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2b38:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    2b3c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2b40:	00746547 	rsbseq	r6, r4, r7, asr #10
    2b44:	4f524f4e 	svcmi	0x00524f4e
    2b48:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2b4c:	5f464843 	svcpl	0x00464843
    2b50:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2b54:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2b58:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2b5c:	416c6174 	smcmi	50708	; 0xc614
    2b60:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b64:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2b68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2b6c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2b70:	32586174 	subscc	r6, r8, #116, 2
    2b74:	63736f00 	cmnvs	r3, #0, 30
    2b78:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2b7c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2b80:	50480073 	subpl	r0, r8, r3, ror r0
    2b84:	5f43534f 	svcpl	0x0043534f
    2b88:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    2b8c:	4f716572 	svcmi	0x00716572
    2b90:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b94:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2b98:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b9c:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    2ba0:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2ba4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2ba8:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    2bac:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
    2bb0:	61746c65 	cmnvs	r4, r5, ror #24
    2bb4:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2bb8:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2bbc:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2bc0:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    2bc4:	50746966 	rsbspl	r6, r4, r6, ror #18
    2bc8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2bcc:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2bd0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2bd4:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2bd8:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2bdc:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    2be0:	6f58656d 	svcvs	0x0058656d
    2be4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2be8:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    2bec:	43534f00 	cmpmi	r3, #0, 30
    2bf0:	6f536648 	svcvs	0x00536648
    2bf4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2bf8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2bfc:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    2c00:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2a48 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
    2c04:	31685470 	smccc	34112	; 0x8540
    2c08:	63734f00 	cmnvs	r3, #0, 30
    2c0c:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2c10:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2c14:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2c18:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2c1c:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2c20:	6b61576c 	blvs	18589d8 <__ccfg+0x1838a30>
    2c24:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    2c28:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2c2c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c30:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2c34:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
    2c38:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2c3c:	00436765 	subeq	r6, r3, r5, ror #14
    2c40:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2c44:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    2c48:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2c4c:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
    2c50:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2c54:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
    2c58:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
    2c5c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b28 <NOROM_ChipInfo_GetHwRevision+0x1c>
    2c60:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2c64:	4f50485f 	svcmi	0x0050485f
    2c68:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2c6c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2c70:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2c74:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2c78:	4f79636e 	svcmi	0x0079636e
    2c7c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c80:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
    2c84:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    2c88:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
    2c8c:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    2c90:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
    2c94:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
    2c98:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2c9c:	6b636f6c 	blvs	18dea54 <__ccfg+0x18beaac>
    2ca0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2ca4:	5f006563 	svcpl	0x00006563
    2ca8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2cac:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2cb4 <NOROM_OSCClockSourceGet+0x98>
    2cb0:	43667200 	cmnmi	r6, #0, 4
    2cb4:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2cb8:	4f716572 	svcmi	0x00716572
    2cbc:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2cc0:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    2cc4:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    2cc8:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2ccc:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2cd0:	4f524f4e 	svcmi	0x00524f4e
    2cd4:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2cd8:	5f464843 	svcpl	0x00464843
    2cdc:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2ce0:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2ce4:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
    2ce8:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    2cec:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    2cf0:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    2cf4:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2cf8:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2cfc:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2d00:	00656475 	rsbeq	r6, r5, r5, ror r4
    2d04:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
    2d08:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    2d0c:	706f4367 	rsbvc	r4, pc, r7, ror #6
    2d10:	4f4e0079 	svcmi	0x004e0079
    2d14:	5f4d4f52 	svcpl	0x004d4f52
    2d18:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2d1c:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
    2d20:	61745374 	cmnvs	r4, r4, ror r3
    2d24:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2d28:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2d2c:	72617000 	rsbvc	r7, r1, #0
    2d30:	30506d61 	subscc	r6, r0, r1, ror #26
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
    return (time * SECOND)/1000;
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
}
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
    return (time * SECOND)/1000;
   8:	01006962 	tsteq	r0, r2, ror #18
}
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    return (time * SECOND)/1000;
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000020 	andeq	r0, r0, r0, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	0000017c 	andeq	r0, r0, ip, ror r1
      20:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      24:	86038504 	strhi	r8, [r3], -r4, lsl #10
      28:	02018e02 	andeq	r8, r1, #2, 28
      2c:	c5c6ce95 	strbgt	ip, [r6, #3733]	; 0xe95
      30:	00000ec4 	andeq	r0, r0, r4, asr #29
      34:	0000000c 	andeq	r0, r0, ip
	...
      40:	0000000e 	andeq	r0, r0, lr
      44:	0000001c 	andeq	r0, r0, ip, lsl r0
      48:	00000000 	andeq	r0, r0, r0
      4c:	00000244 	andeq	r0, r0, r4, asr #4
      50:	00000070 	andeq	r0, r0, r0, ror r0
      54:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
      58:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      5c:	0e0a6301 	cdpeq	3, 0, cr6, cr10, cr1, {0}
      60:	000b410c 	andeq	r4, fp, ip, lsl #2
      64:	00000020 	andeq	r0, r0, r0, lsr #32
      68:	00000000 	andeq	r0, r0, r0
      6c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
      70:	00000184 	andeq	r0, r0, r4, lsl #3
      74:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      78:	41018e02 	tstmi	r1, r2, lsl #28
      7c:	8b02480e 	blhi	920bc <__ccfg+0x72114>
      80:	41080e0a 	tstmi	r8, sl, lsl #28
      84:	0000000b 	andeq	r0, r0, fp
      88:	0000000c 	andeq	r0, r0, ip
      8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	descriptors [fd] = s;
      90:	7c020001 	stcvc	0, cr0, [r2], {1}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      98:	0000000c 	andeq	r0, r0, ip
	if (s == NULL)
      9c:	00000088 	andeq	r0, r0, r8, lsl #1
		syserror (EMALLOC, "tcv05");
      a0:	00000438 	andeq	r0, r0, r8, lsr r4
      a4:	0000000c 	andeq	r0, r0, ip
      a8:	00000018 	andeq	r0, r0, r8, lsl r0
      ac:	00000088 	andeq	r0, r0, r8, lsl #1
      b0:	00000444 	andeq	r0, r0, r4, asr #8
      b4:	0000002c 	andeq	r0, r0, ip, lsr #32
      b8:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      bc:	41000e0a 	tstmi	r0, sl, lsl #28
      c0:	0000000b 	andeq	r0, r0, fp
      c4:	00000018 	andeq	r0, r0, r8, lsl r0
      c8:	00000088 	andeq	r0, r0, r8, lsl #1
      cc:	00000470 	andeq	r0, r0, r0, ror r4
      d0:	0000002a 	andeq	r0, r0, sl, lsr #32
      d4:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      d8:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      dc:	000b4204 	andeq	r4, fp, r4, lsl #4
      e0:	00000018 	andeq	r0, r0, r8, lsl r0
      e4:	00000088 	andeq	r0, r0, r8, lsl #1
      e8:	0000049c 	muleq	r0, ip, r4
      ec:	0000003c 	andeq	r0, r0, ip, lsr r0
      f0:	83100e41 	tsthi	r0, #1040	; 0x410
			wwait (st, 50);
      f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			curr += 0x1000;
      f8:	00018e02 	andeq	r8, r1, r2, lsl #28
      fc:	00000018 	andeq	r0, r0, r8, lsl r0
		if (from >= EE_SIZE || upto < from)
     100:	00000088 	andeq	r0, r0, r8, lsl #1
     104:	00000000 	andeq	r0, r0, r0
			upto = EE_SIZE - 1;
     108:	00000040 	andeq	r0, r0, r0, asr #32
     10c:	83100e41 	tsthi	r0, #1040	; 0x410
     110:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
     11c:	00000088 	andeq	r0, r0, r8, lsl #1
     120:	00000000 	andeq	r0, r0, r0
     124:	00000020 	andeq	r0, r0, r0, lsr #32
            ch = redCharacter;
     128:	83080e42 	movwhi	r0, #36418	; 0x8e42
            onTime = redOn;
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
     130:	00000014 	andeq	r0, r0, r4, lsl r0
            offTime = greenOff;
     134:	00000088 	andeq	r0, r0, r8, lsl #1
        ledFlag = 1 - ledFlag;
     138:	000004d8 	ldrdeq	r0, [r0], -r8
    return (time * SECOND)/1000;
     13c:	00000054 	andeq	r0, r0, r4, asr r0
        ledFlag = 1 - ledFlag;
     140:	87080e42 	strhi	r0, [r8, -r2, asr #28]
    return (time * SECOND)/1000;
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	00000014 	andeq	r0, r0, r4, lsl r0
     14c:	00000088 	andeq	r0, r0, r8, lsl #1
     150:	0000052c 	andeq	r0, r0, ip, lsr #10
        offTime = adjustTime(offTime);
     154:	00000040 	andeq	r0, r0, r0, asr #32
        onTime = adjustTime(onTime);
     158:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     15c:	00018e02 	andeq	r8, r1, r2, lsl #28
            ser_outf(Check_PERIOD, "%c ", ch);
     160:	00000014 	andeq	r0, r0, r4, lsl r0
     164:	00000088 	andeq	r0, r0, r8, lsl #1
     168:	0000056c 	andeq	r0, r0, ip, ror #10
        if(onTime > 0){
     16c:	00000028 	andeq	r0, r0, r8, lsr #32
            if(On)
     170:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     174:	00018e02 	andeq	r8, r1, r2, lsl #28
     178:	00000014 	andeq	r0, r0, r4, lsl r0
                leds(led,1);
     17c:	00000088 	andeq	r0, r0, r8, lsl #1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     180:	00000594 	muleq	r0, r4, r5
                leds(led,0);
     184:	00000114 	andeq	r0, r0, r4, lsl r1
     188:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     18c:	00018e02 	andeq	r8, r1, r2, lsl #28
     190:	0000001c 	andeq	r0, r0, ip, lsl r0
            delay(onTime, OFF_PERIOD);
     194:	00000088 	andeq	r0, r0, r8, lsl #1
            delay(offTime, Check_PERIOD);
     198:	000006a8 	andeq	r0, r0, r8, lsr #13
            led = greenLed;
     19c:	00000050 	andeq	r0, r0, r0, asr r0
     1a0:	83180e41 	tsthi	r8, #1040	; 0x410
            ch = greenCharacter;
     1a4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
            onTime = greenOn;
     1a8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     1ac:	00018e02 	andeq	r8, r1, r2, lsl #28
            offTime = greenOff;
     1b0:	00000018 	andeq	r0, r0, r8, lsl r0
                leds(led,0);
     1b4:	00000088 	andeq	r0, r0, r8, lsl #1
     1b8:	000006f8 	strdeq	r0, [r0], -r8
     1bc:	00000054 	andeq	r0, r0, r4, asr r0
     1c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     1c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
            proceed OFF_PERIOD;
     1c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     1cc:	0000000c 	andeq	r0, r0, ip
        when(&On, Check_PERIOD);
     1d0:	00000088 	andeq	r0, r0, r8, lsl #1
     1d4:	0000074c 	andeq	r0, r0, ip, asr #14
        release;
     1d8:	00000038 	andeq	r0, r0, r8, lsr r0
        leds(led,0);
     1dc:	00000020 	andeq	r0, r0, r0, lsr #32
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
     1e4:	00000784 	andeq	r0, r0, r4, lsl #15
     1e8:	00000110 	andeq	r0, r0, r0, lsl r1
            proceed Check_PERIOD;
     1ec:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
}
     1f0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1f4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1f8:	89038804 	stmdbhi	r3, {r2, fp, pc}
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000088 	andeq	r0, r0, r8, lsl #1
     208:	00000000 	andeq	r0, r0, r0
     20c:	0000000c 	andeq	r0, r0, ip
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	00000088 	andeq	r0, r0, r8, lsl #1
     218:	00000894 	muleq	r0, r4, r8
     21c:	000000c0 	andeq	r0, r0, r0, asr #1
     220:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     224:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     228:	00000001 	andeq	r0, r0, r1
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
     230:	00000088 	andeq	r0, r0, r8, lsl #1
     234:	00000954 	andeq	r0, r0, r4, asr r9
     238:	00000044 	andeq	r0, r0, r4, asr #32
     23c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     240:	86038504 	strhi	r8, [r3], -r4, lsl #10
    word numbers[] = {0, 0, 0, 0};
     244:	00018e02 	andeq	r8, r1, r2, lsl #28
    int numbersIndex = 0;
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
    word numbers[] = {0, 0, 0, 0};
     24c:	00000088 	andeq	r0, r0, r8, lsl #1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     250:	00000998 	muleq	r0, r8, r9
        if(settingsInput[i] == ' ') {
     254:	0000003c 	andeq	r0, r0, ip, lsr r0
     258:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
            numbers[numbersIndex] = number;
     25c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     260:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
            number = 0;
     264:	00000001 	andeq	r0, r0, r1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     268:	00000018 	andeq	r0, r0, r8, lsl r0
    redOn = numbers[0];
     26c:	00000088 	andeq	r0, r0, r8, lsl #1
     270:	000009d4 	ldrdeq	r0, [r0], -r4
    redOff = numbers[1];
     274:	000000a4 	andeq	r0, r0, r4, lsr #1
     278:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    greenOn = numbers[2];
     27c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
    greenOff = numbers[3];
     284:	00000030 	andeq	r0, r0, r0, lsr r0
     288:	00000088 	andeq	r0, r0, r8, lsl #1
}
     28c:	00000a78 	andeq	r0, r0, r8, ror sl
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     290:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     294:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
            number = number * 10;
     298:	86078508 	strhi	r8, [r7], -r8, lsl #10
            number += settingsInput[i] - 48;
     29c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2a0:	8a038904 	bhi	e26b8 <__ccfg+0xc2710>
     2a4:	02018e02 	andeq	r8, r1, #2, 28
     2a8:	cace0aa2 	bgt	ff382d38 <_estack+0xdf37dd38>
     2ac:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2b0:	000ec4c5 	andeq	ip, lr, r5, asr #9
fsm root {
     2b4:	00000b42 	andeq	r0, r0, r2, asr #22
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	00000088 	andeq	r0, r0, r8, lsl #1
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	00000024 	andeq	r0, r0, r4, lsr #32
     2c8:	0000000c 	andeq	r0, r0, ip
     2cc:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_outf(Initial, "Enter your name: ");
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	00000028 	andeq	r0, r0, r8, lsr #32
        ser_in(Get_Name, username, NAME_LENGTH);
     2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2dc:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	00000c30 	andeq	r0, r0, r0, lsr ip
     2e4:	00000258 	andeq	r0, r0, r8, asr r2
     2e8:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        ser_inf(Get_Choice, "%c", &choice);
     2ec:	8e028b03 	vmlahi.f64	d8, d2, d3
     2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
        if (choice == 'A' || choice == 'a'){
     2f4:	00070d42 	andeq	r0, r7, r2, asr #26
     2f8:	00000014 	andeq	r0, r0, r4, lsl r0
     2fc:	00000088 	andeq	r0, r0, r8, lsl #1
            proceed Adjust_Intervals;
     300:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
     304:	00000030 	andeq	r0, r0, r0, lsr r0
        proceed Show_Menu;
     308:	83080e42 	movwhi	r0, #36418	; 0x8e42
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     30c:	00018e02 	andeq	r8, r1, r2, lsl #28
     310:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     314:	00000088 	andeq	r0, r0, r8, lsl #1
     318:	00000000 	andeq	r0, r0, r0
     31c:	0000005c 	andeq	r0, r0, ip, asr r0
        processSettingsInput(settings);
     320:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        if(!blinkerRunning) {
     324:	86038504 	strhi	r8, [r3], -r4, lsl #10
     328:	00018e02 	andeq	r8, r1, r2, lsl #28
            blinkerCode = runfsm blinker;
     32c:	00000014 	andeq	r0, r0, r4, lsl r0
     330:	00000088 	andeq	r0, r0, r8, lsl #1
            blinkerRunning = YES;
     334:	00000e88 	andeq	r0, r0, r8, lsl #29
        On = YES;
     338:	00000060 	andeq	r0, r0, r0, rrx
     33c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        trigger(&On);
     340:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Show_Menu;
     344:	0000000c 	andeq	r0, r0, ip
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     34c:	7c020001 	stcvc	0, cr0, [r2], {1}
     350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     354:	00000018 	andeq	r0, r0, r8, lsl r0
     358:	00000344 	andeq	r0, r0, r4, asr #6
     35c:	00000ee8 	andeq	r0, r0, r8, ror #29
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
        proceed Show_Menu;
     364:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     368:	86038504 	strhi	r8, [r3], -r4, lsl #10
        ser_outf(Monitor, "Monitor (press S to stop): ");
     36c:	00018e02 	andeq	r8, r1, r2, lsl #28
     370:	00000018 	andeq	r0, r0, r8, lsl r0
        displayCycle = YES;
     374:	00000344 	andeq	r0, r0, r4, asr #6
        ser_inf(Await_Stop, "%c", &ch);
     378:	00000f24 	andeq	r0, r0, r4, lsr #30
     37c:	00000080 	andeq	r0, r0, r0, lsl #1
     380:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
        if(ch == 'S' || ch == 's'){
     384:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     388:	00000001 	andeq	r0, r0, r1
     38c:	0000000c 	andeq	r0, r0, ip
            displayCycle = NO;
     390:	00000344 	andeq	r0, r0, r4, asr #6
     394:	00000fa4 	andeq	r0, r0, r4, lsr #31
            proceed Show_Menu;
     398:	00000018 	andeq	r0, r0, r8, lsl r0
        proceed Monitor;
     39c:	00000014 	andeq	r0, r0, r4, lsl r0
        On = NO;
     3a0:	00000344 	andeq	r0, r0, r4, asr #6
     3a4:	00000000 	andeq	r0, r0, r0
        if(blinkerCode != 0x0) {
     3a8:	00000024 	andeq	r0, r0, r4, lsr #32
            killall(blinkerCode);
     3ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Show_Menu;
     3b4:	00000014 	andeq	r0, r0, r4, lsl r0
     3b8:	00000344 	andeq	r0, r0, r4, asr #6
        leds_all(0);
     3bc:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     3c0:	00000010 	andeq	r0, r0, r0, lsl r0
     3c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
        proceed Show_Menu;
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3cc:	00000014 	andeq	r0, r0, r4, lsl r0
        } else if (choice == 'S' || choice == 's') {
     3d0:	00000344 	andeq	r0, r0, r4, asr #6
            proceed Stop;
     3d4:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'V' || choice == 'v') {
     3d8:	0000002c 	andeq	r0, r0, ip, lsr #32
            proceed View_Settings;
     3dc:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
        } else if (choice == 'M' || choice == 'm') {
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Monitor;
     3e4:	00000014 	andeq	r0, r0, r4, lsl r0
     3e8:	00000344 	andeq	r0, r0, r4, asr #6
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0000004c 	andeq	r0, r0, ip, asr #32
     3f4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3fc:	0000000c 	andeq	r0, r0, ip
     400:	00000344 	andeq	r0, r0, r4, asr #6
     404:	00000000 	andeq	r0, r0, r0
     408:	00000006 	andeq	r0, r0, r6
     40c:	00000028 	andeq	r0, r0, r8, lsr #32
     410:	00000344 	andeq	r0, r0, r4, asr #6
     414:	00000fcc 	andeq	r0, r0, ip, asr #31
     418:	000000cc 	andeq	r0, r0, ip, asr #1
     41c:	83180e41 	tsthi	r8, #1040	; 0x410
     420:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     424:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     428:	02018e02 	andeq	r8, r1, #2, 28
     42c:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     430:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     434:	0b42000e 	bleq	1080474 <__ccfg+0x10604cc>
static void devinit_uart (int devnum) {
     438:	00000014 	andeq	r0, r0, r4, lsl r0
	adddevfunc (ioreq_uart_a, devnum);
     43c:	00000344 	andeq	r0, r0, r4, asr #6
     440:	00001098 	muleq	r0, r8, r0
void udelay (volatile word n) {
     444:	00000014 	andeq	r0, r0, r4, lsl r0
     448:	83080e41 	movwhi	r0, #36417	; 0x8e41
	while (n) {
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
     450:	00000014 	andeq	r0, r0, r4, lsl r0
}
     454:	00000344 	andeq	r0, r0, r4, asr #6
	while (n--);
     458:	000010ac 	andeq	r1, r0, ip, lsr #1
     45c:	00000034 	andeq	r0, r0, r4, lsr r0
     460:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		n--;
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
     468:	00000018 	andeq	r0, r0, r8, lsl r0
     46c:	00000344 	andeq	r0, r0, r4, asr #6
void mdelay (volatile word n) {
     470:	000010e0 	andeq	r1, r0, r0, ror #1
     474:	00000034 	andeq	r0, r0, r4, lsr r0
	while (n) {
     478:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     47c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
}
     480:	00000001 	andeq	r0, r0, r1
		udelay (999);
     484:	00000018 	andeq	r0, r0, r8, lsl r0
     488:	00000344 	andeq	r0, r0, r4, asr #6
		n--;
     48c:	00000000 	andeq	r0, r0, r0
     490:	0000002c 	andeq	r0, r0, ip, lsr #32
     494:	83100e41 	tsthi	r0, #1040	; 0x410
     498:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
void __pi_ondomain (lword d) {
     49c:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.effpdm > 1)
     4a4:	00000344 	andeq	r0, r0, r4, asr #6
     4a8:	00001114 	andeq	r1, r0, r4, lsl r1
			__pi_systat.effpdm = 1;
     4ac:	00000024 	andeq	r0, r0, r4, lsr #32
	PRCMPowerDomainOn (d);
     4b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b8:	00000018 	andeq	r0, r0, r8, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4bc:	00000344 	andeq	r0, r0, r4, asr #6
     4c0:	00001138 	andeq	r1, r0, r8, lsr r1
     4c4:	00000038 	andeq	r0, r0, r8, lsr r0
	__pi_systat.ondmns |= d;
     4c8:	83100e41 	tsthi	r0, #1040	; 0x410
     4cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     4d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d4:	0000000c 	andeq	r0, r0, ip
void __pi_syserror (word ec, const char *m) {
     4d8:	00000344 	andeq	r0, r0, r4, asr #6
	diag ("SYSERR: %x, %s", ec, m);
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	00000344 	andeq	r0, r0, r4, asr #6
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	00000040 	andeq	r0, r0, r0, asr #32
		all_leds_blink;
     4f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
     500:	00000344 	andeq	r0, r0, r4, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     504:	00000000 	andeq	r0, r0, r0
     508:	00000018 	andeq	r0, r0, r8, lsl r0
     50c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
     514:	0000000c 	andeq	r0, r0, ip
     518:	00000344 	andeq	r0, r0, r4, asr #6
	while (1) {
     51c:	00001170 	andeq	r1, r0, r0, ror r1
     520:	00000024 	andeq	r0, r0, r4, lsr #32
     524:	0000000c 	andeq	r0, r0, ip
     528:	00000344 	andeq	r0, r0, r4, asr #6
void tci_run_delay_timer () {
     52c:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
     530:	00000020 	andeq	r0, r0, r0, lsr #32
     534:	0000000c 	andeq	r0, r0, ip
     538:	00000344 	andeq	r0, r0, r4, asr #6
     53c:	00001194 	muleq	r0, r4, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	0000000e 	andeq	r0, r0, lr
     544:	0000000c 	andeq	r0, r0, ip
     548:	00000344 	andeq	r0, r0, r4, asr #6
     54c:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     550:	00000010 	andeq	r0, r0, r0, lsl r0
	sti_tim;
     554:	0000000c 	andeq	r0, r0, ip
}
     558:	00000344 	andeq	r0, r0, r4, asr #6
     55c:	00000000 	andeq	r0, r0, r0
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
     564:	0000000c 	andeq	r0, r0, ip
     568:	00000344 	andeq	r0, r0, r4, asr #6
	cli_aux;
     56c:	00000000 	andeq	r0, r0, r0
     570:	00000010 	andeq	r0, r0, r0, lsl r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	0000000c 	andeq	r0, r0, ip
     578:	00000344 	andeq	r0, r0, r4, asr #6
     57c:	00000000 	andeq	r0, r0, r0
     580:	00000006 	andeq	r0, r0, r6
	sti_aux;
     584:	0000000c 	andeq	r0, r0, ip
}
     588:	00000344 	andeq	r0, r0, r4, asr #6
     58c:	000011a2 	andeq	r1, r0, r2, lsr #3
     590:	00000014 	andeq	r0, r0, r4, lsl r0
void AONRTCIntHandler () {
     594:	0000000c 	andeq	r0, r0, ip
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     598:	00000344 	andeq	r0, r0, r4, asr #6
     59c:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5a0:	0000000e 	andeq	r0, r0, lr
		if (__pi_utims [0] == 0)
     5a4:	00000014 	andeq	r0, r0, r4, lsl r0
     5a8:	00000344 	andeq	r0, r0, r4, asr #6
		if (*(__pi_utims [0])) {
     5ac:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
     5b0:	00000024 	andeq	r0, r0, r4, lsr #32
			(*(__pi_utims [0]))--;
     5b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
		if (__pi_utims [1] == 0)
     5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [1])) {
     5bc:	00000020 	andeq	r0, r0, r0, lsr #32
			aux_timer_inactive = 0;
     5c0:	00000344 	andeq	r0, r0, r4, asr #6
			(*(__pi_utims [1]))--;
     5c4:	000011dc 	ldrdeq	r1, [r0], -ip
		if (__pi_utims [2] == 0)
     5c8:	0000009c 	muleq	r0, ip, r0
		if (*(__pi_utims [2])) {
     5cc:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			(*(__pi_utims [2]))--;
     5d0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		if (__pi_utims [3] != 0) {
     5d4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			if (*(__pi_utims [3])) {
     5d8:	89038804 	stmdbhi	r3, {r2, fp, pc}
				aux_timer_inactive = 0;
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
				(*(__pi_utims [3]))--;
     5e0:	00000014 	andeq	r0, r0, r4, lsl r0
	if (__pi_systat.ledsts) {
     5e4:	00000344 	andeq	r0, r0, r4, asr #6
     5e8:	00001278 	andeq	r1, r0, r8, ror r2
		if (__pi_systat.ledblc++ == 0) {
     5ec:	00000050 	andeq	r0, r0, r0, asr r0
     5f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
			if (__pi_systat.ledblk) {
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f8:	00000014 	andeq	r0, r0, r4, lsl r0
     5fc:	00000344 	andeq	r0, r0, r4, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     600:	000012c8 	andeq	r1, r0, r8, asr #5
     604:	00000048 	andeq	r0, r0, r8, asr #32
				if (__pi_systat.ledsts & 0x2)
     608:	83080e41 	movwhi	r0, #36417	; 0x8e41
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
     610:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x4)
     614:	00000344 	andeq	r0, r0, r4, asr #6
				__pi_systat.ledblk = 0;
     618:	00001310 	andeq	r1, r0, r0, lsl r3
     61c:	00000050 	andeq	r0, r0, r0, asr r0
			if (__pi_systat.fstblk)
     620:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     624:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblc = 200;
     628:	00000020 	andeq	r0, r0, r0, lsr #32
	if (events & AON_RTC_EVFLAGS_CH0) {
     62c:	00000344 	andeq	r0, r0, r4, asr #6
		cli_tim;
     630:	00001360 	andeq	r1, r0, r0, ror #6
		__pi_new += setdel;
     634:	00000058 	andeq	r0, r0, r8, asr r0
     638:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		setdel = 0;
     63c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		RISE_N_SHINE;
     640:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		__pi_new += setdel;
     644:	89038804 	stmdbhi	r3, {r2, fp, pc}
		RISE_N_SHINE;
     648:	00018e02 	andeq	r8, r1, r2, lsl #28
     64c:	00000018 	andeq	r0, r0, r8, lsl r0
		aux_timer_inactive = 1;
     650:	00000344 	andeq	r0, r0, r4, asr #6
     654:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
				if (__pi_systat.ledsts & 0x1)
     658:	000000a8 	andeq	r0, r0, r8, lsr #1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     65c:	83100e44 	tsthi	r0, #68, 28	; 0x440
     660:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				if (__pi_systat.ledsts & 0x2)
     664:	00018e02 	andeq	r8, r1, r2, lsl #28
     668:	00000018 	andeq	r0, r0, r8, lsl r0
     66c:	00000344 	andeq	r0, r0, r4, asr #6
				if (__pi_systat.ledsts & 0x8)
     670:	00001460 	andeq	r1, r0, r0, ror #8
				__pi_systat.ledblk = 1;
     674:	00000034 	andeq	r0, r0, r4, lsr r0
     678:	83100e41 	tsthi	r0, #1040	; 0x410
		if (aux_timer_inactive) {
     67c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			cli_aux;
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
     684:	0000000c 	andeq	r0, r0, ip
     688:	00000344 	andeq	r0, r0, r4, asr #6
     68c:	00001494 	muleq	r0, r4, r4
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	00000344 	andeq	r0, r0, r4, asr #6
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	00000030 	andeq	r0, r0, r0, lsr r0
     6a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
word tci_update_delay_ticks (Boolean force) {
     6a8:	00018e02 	andeq	r8, r1, r2, lsl #28
	cli_tim;
     6ac:	00000014 	andeq	r0, r0, r4, lsl r0
     6b0:	00000344 	andeq	r0, r0, r4, asr #6
	if (setdel) {
     6b4:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b8:	00000038 	andeq	r0, r0, r8, lsr r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c4:	00000040 	andeq	r0, r0, r0, asr #32
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00000344 	andeq	r0, r0, r4, asr #6
				AON_RTC_O_CH0CMP)) - gettav ());
     6cc:	000014ac 	andeq	r1, r0, ip, lsr #9
	return NO;
     6d0:	0000013c 	andeq	r0, r0, ip, lsr r1
			setdel = 0;
     6d4:	80100e41 	andshi	r0, r0, r1, asr #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	82038104 	andhi	r8, r3, #4, 2
     6dc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
}
     6e0:	0b84380e 	bleq	fe10e720 <_estack+0xde109720>
		sti_tim;
     6e4:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
		return YES;
     6e8:	07880887 	streq	r0, [r8, r7, lsl #17]
     6ec:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     6f0:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     6f4:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
	UARTDisable (UART0_BASE);
     6fc:	c341100e 	movtgt	r1, #4110	; 0x100e
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     700:	0ec0c1c2 	acseqdm	f4, f2
	UARTDisable (UART0_BASE);
     704:	000b4100 	andeq	r4, fp, r0, lsl #2
	UARTConfigSetExpClk (UART0_BASE,
     708:	0000000c 	andeq	r0, r0, ip
     70c:	00000344 	andeq	r0, r0, r4, asr #6
     710:	00000000 	andeq	r0, r0, r0
     714:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     718:	0000000c 	andeq	r0, r0, ip
     71c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     720:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     724:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     728:	00000014 	andeq	r0, r0, r4, lsl r0
     72c:	00000718 	andeq	r0, r0, r8, lsl r7
	urates [0] = rate;
     730:	00000000 	andeq	r0, r0, r0
}
     734:	00000016 	andeq	r0, r0, r6, lsl r0
     738:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
     740:	0000000c 	andeq	r0, r0, ip
     744:	00000718 	andeq	r0, r0, r8, lsl r7
     748:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     74c:	0000001a 	andeq	r0, r0, sl, lsl r0
     750:	00000018 	andeq	r0, r0, r8, lsl r0
     754:	00000718 	andeq	r0, r0, r8, lsl r7
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     758:	00000000 	andeq	r0, r0, r0
     75c:	0000000e 	andeq	r0, r0, lr
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     760:	83080e41 	movwhi	r0, #36417	; 0x8e41
     764:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
	__pi_uart_setrate (urates [0], __pi_uart);
     768:	000ec3ce 	andeq	ip, lr, lr, asr #7
     76c:	00000018 	andeq	r0, r0, r8, lsl r0
     770:	00000718 	andeq	r0, r0, r8, lsl r7
     774:	00000000 	andeq	r0, r0, r0
     778:	0000004c 	andeq	r0, r0, ip, asr #32
     77c:	83100e41 	tsthi	r0, #1040	; 0x410
     780:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	switch (operation) {
     784:	00018e02 	andeq	r8, r1, r2, lsl #28
static int ioreq_uart_a (int operation, char *buf, int len) {
     788:	00000020 	andeq	r0, r0, r0, lsr #32
     78c:	00000718 	andeq	r0, r0, r8, lsl r7
     790:	00000000 	andeq	r0, r0, r0
     794:	0000008c 	andeq	r0, r0, ip, lsl #1
     798:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				*buf++ = uart_a_read;
     79c:	5f018e02 	svcpl	0x00018e02
     7a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			while (len && uart_a_char_available) {
     7a4:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     7a8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7ac:	00000020 	andeq	r0, r0, r0, lsr #32
			if (len != operation) {
     7b0:	00000718 	andeq	r0, r0, r8, lsl r7
}
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	00000070 	andeq	r0, r0, r0, ror r0
			uart_a_disable_int;
     7bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			if (uart_a_char_available) {
     7c0:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
				*buf++ = uart_a_read;
     7c4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			uart_a_disable_int;
     7c8:	430b4200 	movwmi	r4, #45568	; 0xb200
     7cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
			if (uart_a_char_available) {
     7d0:	0000003c 	andeq	r0, r0, ip, lsr r0
     7d4:	00000718 	andeq	r0, r0, r8, lsl r7
				uart_a_enable_int;
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	000000c0 	andeq	r0, r0, r0, asr #1
				goto Redo_rx;
     7e0:	82080e41 	andhi	r0, r8, #1040	; 0x410
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7e4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7e8:	0a84300e 	beq	fe10c828 <_estack+0xde107828>
			return -2;
     7ec:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
     7f0:	06880787 	streq	r0, [r8], r7, lsl #15
				uart_a_write (*buf);
     7f4:	048a0589 	streq	r0, [sl], #1417	; 0x589
     7f8:	0a6b038e 	beq	1ac1638 <__ccfg+0x1aa1690>
			while (len && uart_a_room_in_tx) {
     7fc:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     800:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     804:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
			if (len != operation) {
     808:	c2c34108 	sbcgt	r4, r3, #8, 2
			uart_a_disable_int;
     80c:	0b41000e 	bleq	104084c <__ccfg+0x10208a4>
     810:	0000001c 	andeq	r0, r0, ip, lsl r0
			if (uart_a_room_in_tx) {
     814:	00000718 	andeq	r0, r0, r8, lsl r7
     818:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
     81c:	0000006c 	andeq	r0, r0, ip, rrx
     820:	83180e42 	tsthi	r8, #1056	; 0x420
				*buf++ = uart_a_read;
     824:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			if (uart_a_room_in_tx) {
     828:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				uart_a_write (*buf);
     82c:	00018e02 	andeq	r8, r1, r2, lsl #28
     830:	0000000c 	andeq	r0, r0, ip
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     834:	00000718 	andeq	r0, r0, r8, lsl r7
     838:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
     83c:	00000024 	andeq	r0, r0, r4, lsr #32
     840:	00000018 	andeq	r0, r0, r8, lsl r0
     844:	00000718 	andeq	r0, r0, r8, lsl r7
			return 0;
     848:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_SETRATE) {
     84c:	00000080 	andeq	r0, r0, r0, lsl #1
				if (__pi_uart_setrate (*((word*)buf),
     850:	83100e42 	tsthi	r0, #1056	; 0x420
     854:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     858:	00018e02 	andeq	r8, r1, r2, lsl #28
				syserror (EREQPAR, "uar");
     85c:	00000014 	andeq	r0, r0, r4, lsl r0
			syserror (ENOOPER, "uai");
     860:	00000718 	andeq	r0, r0, r8, lsl r7
			if (len == UART_CNTRL_GETRATE) {
     864:	00000000 	andeq	r0, r0, r0
				return 1;
     868:	00000070 	andeq	r0, r0, r0, ror r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     86c:	83080e42 	movwhi	r0, #36418	; 0x8e42
			syserror (ENOOPER, "uai");
     870:	00018e02 	andeq	r8, r1, r2, lsl #28
     874:	00000018 	andeq	r0, r0, r8, lsl r0
     878:	00000718 	andeq	r0, r0, r8, lsl r7
     87c:	00000000 	andeq	r0, r0, r0
     880:	00000078 	andeq	r0, r0, r8, ror r0
     884:	83100e42 	tsthi	r0, #1056	; 0x420
     888:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     88c:	00018e02 	andeq	r8, r1, r2, lsl #28
     890:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     894:	00000718 	andeq	r0, r0, r8, lsl r7
void UART0IntHandler () {
     898:	00000000 	andeq	r0, r0, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     89c:	000000bc 	strheq	r0, [r0], -ip
     8a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     8a4:	86048505 	strhi	r8, [r4], -r5, lsl #10
     8a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     8ac:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8b0:	000b4114 	andeq	r4, fp, r4, lsl r1
     8b4:	00000018 	andeq	r0, r0, r8, lsl r0
		RISE_N_SHINE;
     8b8:	00000718 	andeq	r0, r0, r8, lsl r7
     8bc:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, READ));
     8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c4:	83100e41 	tsthi	r0, #1040	; 0x410
     8c8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d0:	00000018 	andeq	r0, r0, r8, lsl r0
     8d4:	00000718 	andeq	r0, r0, r8, lsl r7
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00000038 	andeq	r0, r0, r8, lsr r0
     8e0:	83100e41 	tsthi	r0, #1040	; 0x410
     8e4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8ec:	0000000c 	andeq	r0, r0, ip
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	00000718 	andeq	r0, r0, r8, lsl r7
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	0000000a 	andeq	r0, r0, sl
		i_trigger (devevent (UART_A, WRITE));
     8fc:	00000018 	andeq	r0, r0, r8, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     900:	00000718 	andeq	r0, r0, r8, lsl r7
     904:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     908:	0000002c 	andeq	r0, r0, ip, lsr #32
     90c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     910:	4c018e02 	stcmi	14, cr8, [r1], {2}
		i_trigger (devevent (UART_A, WRITE));
     914:	000ec4ce 	andeq	ip, lr, lr, asr #9
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000718 	andeq	r0, r0, r8, lsl r7
     920:	00000000 	andeq	r0, r0, r0
     924:	00000060 	andeq	r0, r0, r0, rrx
     928:	83080e41 	movwhi	r0, #36417	; 0x8e41
     92c:	61018e02 	tstvs	r1, r2, lsl #28
     930:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     934:	000b4300 	andeq	r4, fp, r0, lsl #6
     938:	00000014 	andeq	r0, r0, r4, lsl r0
     93c:	00000718 	andeq	r0, r0, r8, lsl r7
}
     940:	00000000 	andeq	r0, r0, r0
     944:	00000040 	andeq	r0, r0, r0, asr #32
     948:	83080e42 	movwhi	r0, #36418	; 0x8e42
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
     950:	00000014 	andeq	r0, r0, r4, lsl r0
void __buttons_setirq (int val) {
     954:	00000718 	andeq	r0, r0, r8, lsl r7
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     958:	00000000 	andeq	r0, r0, r0
     95c:	0000002c 	andeq	r0, r0, ip, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
     968:	0000001c 	andeq	r0, r0, ip, lsl r0
		bn = BUTTON_GPIO (__button_list [i]);
     96c:	00000718 	andeq	r0, r0, r8, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	00000000 	andeq	r0, r0, r0
     974:	0000003c 	andeq	r0, r0, ip, lsr r0
     978:	83180e41 	tsthi	r8, #1040	; 0x410
     97c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     980:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     984:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     988:	0000000c 	andeq	r0, r0, ip
     98c:	00000718 	andeq	r0, r0, r8, lsl r7
     990:	00000000 	andeq	r0, r0, r0
     994:	00000006 	andeq	r0, r0, r6
void __pinlist_setirq (int val) {
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     99c:	00000718 	andeq	r0, r0, r8, lsl r7
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a0:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9a4:	00000068 	andeq	r0, r0, r8, rrx
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	83180e41 	tsthi	r8, #1040	; 0x410
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     9b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9b8:	00000014 	andeq	r0, r0, r4, lsl r0
     9bc:	00000718 	andeq	r0, r0, r8, lsl r7
	for (i = 0; i < N_PINLIST; i++) {
     9c0:	00000000 	andeq	r0, r0, r0
}
     9c4:	00000050 	andeq	r0, r0, r0, asr r0
     9c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     9cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
void GPIOIntHandler () {
     9d4:	00000718 	andeq	r0, r0, r8, lsl r7
if (buttons_int) {
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	0000009c 	muleq	r0, ip, r0
	buttons_disable ();
     9e0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9e4:	86088509 	strhi	r8, [r8], -r9, lsl #10
	i_trigger ((aword)&__button_list);
     9e8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9ec:	8a048905 	bhi	122e08 <__ccfg+0x102e60>
     9f0:	8e028b03 	vmlahi.f64	d8, d2, d3
     9f4:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9f8:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     9fc:	00000b42 	andeq	r0, r0, r2, asr #22
     a00:	00000014 	andeq	r0, r0, r4, lsl r0
     a04:	00000718 	andeq	r0, r0, r8, lsl r7
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	00000040 	andeq	r0, r0, r0, asr #32
     a10:	83080e42 	movwhi	r0, #36418	; 0x8e42
	RISE_N_SHINE;
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
     a18:	00000014 	andeq	r0, r0, r4, lsl r0
     a1c:	00000718 	andeq	r0, r0, r8, lsl r7
if (pin_sensor_int) {
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00000034 	andeq	r0, r0, r4, lsr r0
	i_trigger ((aword)(&__input_pins));
     a28:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a30:	00000018 	andeq	r0, r0, r8, lsl r0
     a34:	00000718 	andeq	r0, r0, r8, lsl r7
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	0000003c 	andeq	r0, r0, ip, lsr r0
     a40:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a44:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a48:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a4c:	00000018 	andeq	r0, r0, r8, lsl r0
     a50:	00000718 	andeq	r0, r0, r8, lsl r7
	__pinsen_disable_and_clear;
     a54:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
     a58:	0000003c 	andeq	r0, r0, ip, lsr r0
     a5c:	83100e42 	tsthi	r0, #1056	; 0x420
     a60:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     a64:	00018e02 	andeq	r8, r1, r2, lsl #28
     a68:	0000000c 	andeq	r0, r0, ip
     a6c:	00000718 	andeq	r0, r0, r8, lsl r7
     a70:	000015e8 	andeq	r1, r0, r8, ror #11
     a74:	00000002 	andeq	r0, r0, r2
void system_init () {
     a78:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a80:	7c020001 	stcvc	0, cr0, [r2], {1}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a88:	0000000c 	andeq	r0, r0, ip
     a8c:	00000a78 	andeq	r0, r0, r8, ror sl
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a90:	000015ea 	andeq	r1, r0, sl, ror #11
     a94:	00000002 	andeq	r0, r0, r2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	00000a78 	andeq	r0, r0, r8, ror sl
     aa0:	000015ec 	andeq	r1, r0, ip, ror #11
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa4:	00000002 	andeq	r0, r0, r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa8:	0000000c 	andeq	r0, r0, ip
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aac:	00000a78 	andeq	r0, r0, r8, ror sl
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	000015ee 	andeq	r1, r0, lr, ror #11
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab4:	00000002 	andeq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab8:	00000014 	andeq	r0, r0, r4, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	00000a78 	andeq	r0, r0, r8, ror sl
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac0:	000015f0 	strdeq	r1, [r0], -r0
		pin = (port_confs [i] >> 19) & 0x1f;
     ac4:	00000044 	andeq	r0, r0, r4, asr #32
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     acc:	00018e02 	andeq	r8, r1, r2, lsl #28
     ad0:	0000000c 	andeq	r0, r0, ip
     ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (port_confs [i] & 0x80)
     ad8:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     adc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ae0:	0000000c 	andeq	r0, r0, ip
		if (port_confs [i] & 0x40)
     ae4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	00000002 	andeq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     af0:	00000018 	andeq	r0, r0, r8, lsl r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     af4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	00000000 	andeq	r0, r0, r0
	all_leds_blink;
     afc:	00000058 	andeq	r0, r0, r8, asr r0
     b00:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b04:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b08:	00018e02 	andeq	r8, r1, r2, lsl #28
     b0c:	0000000c 	andeq	r0, r0, ip
     b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b14:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     b20:	00000b0c 	andeq	r0, r0, ip, lsl #22
     b24:	00000000 	andeq	r0, r0, r0
     b28:	000000cc 	andeq	r0, r0, ip, asr #1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2c:	83100e42 	tsthi	r0, #1056	; 0x420
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b30:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b34:	02018e02 	andeq	r8, r1, #2, 28
	IntEnable (INT_AON_RTC_COMB);
     b38:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
     b3c:	000ec3c4 	andeq	ip, lr, r4, asr #7
     b40:	ce420b44 	vmlsgt.f64	d16, d2, d4
	__pi_malloc_init ();
     b44:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	IntEnable (INT_AON_GPIO_EDGE);
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	00000024 	andeq	r0, r0, r4, lsr #32
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b50:	00000b0c 	andeq	r0, r0, ip, lsl #22
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b54:	00000000 	andeq	r0, r0, r0
     b58:	00000038 	andeq	r0, r0, r8, lsr r0
     b5c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b60:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b64:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	4a0b4300 	bmi	2d1770 <__ccfg+0x2b17c8>
     b6c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b70:	000b4300 	andeq	r4, fp, r0, lsl #6
	urates [0] = UART_RATE / 100;
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	reinit_uart ();
     b7c:	7c020001 	stcvc	0, cr0, [r2], {1}
	EXTRA_INITIALIZERS;
     b80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b84:	00000018 	andeq	r0, r0, r8, lsl r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b88:	00000b74 	andeq	r0, r0, r4, ror fp
     b8c:	0000163c 	andeq	r1, r0, ip, lsr r6
     b90:	00000034 	andeq	r0, r0, r4, lsr r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b94:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     b98:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     ba0:	00000018 	andeq	r0, r0, r8, lsl r0
			devinit [i] . init (devinit [i] . param);
     ba4:	00000b74 	andeq	r0, r0, r4, ror fp
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba8:	00001670 	andeq	r1, r0, r0, ror r6
     bac:	00000030 	andeq	r0, r0, r0, lsr r0
     bb0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	IntEnable (INT_UART0_COMB);
     bb4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     bb8:	00000001 	andeq	r0, r0, r1
}
     bbc:	00000014 	andeq	r0, r0, r4, lsl r0
	tci_run_auxiliary_timer ();
     bc0:	00000b74 	andeq	r0, r0, r4, ror fp
		diag ("");
     bc4:	000016a0 	andeq	r1, r0, r0, lsr #13
     bc8:	00000018 	andeq	r0, r0, r8, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bcc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
		diag ("Leftover RAM: %d bytes",
     bd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd8:	00000b74 	andeq	r0, r0, r4, ror fp
     bdc:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
     be0:	00000054 	andeq	r0, r0, r4, asr r0
     be4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     be8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bf0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	00000b74 	andeq	r0, r0, r4, ror fp
     bfc:	0000170c 	andeq	r1, r0, ip, lsl #14
     c00:	00000040 	andeq	r0, r0, r0, asr #32
     c04:	83180e41 	tsthi	r8, #1040	; 0x410
     c08:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c0c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	00000014 	andeq	r0, r0, r4, lsl r0
     c18:	00000b74 	andeq	r0, r0, r4, ror fp
     c1c:	0000174c 	andeq	r1, r0, ip, asr #14
     c20:	00000024 	andeq	r0, r0, r4, lsr #32
     c24:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
__attribute__ ((noreturn)) void __pi_release () {
     c30:	00000b74 	andeq	r0, r0, r4, ror fp
     c34:	00001770 	andeq	r1, r0, r0, ror r7
     c38:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c3c:	83080e41 	movwhi	r0, #36417	; 0x8e41
	check_stack_overflow;
     c40:	00018e02 	andeq	r8, r1, r2, lsl #28
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	00000b74 	andeq	r0, r0, r4, ror fp
	update_n_wake (MAX_WORD, NO);
     c4c:	00001784 	andeq	r1, r0, r4, lsl #15
     c50:	00000014 	andeq	r0, r0, r4, lsl r0
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (__pi_curr) {
     c58:	00000b74 	andeq	r0, r0, r4, ror fp
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	00000064 	andeq	r0, r0, r4, rrx
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	83180e41 	tsthi	r8, #1040	; 0x410
	__SLEEP;
     c68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c70:	00018e02 	andeq	r8, r1, r2, lsl #28
     c74:	0000001c 	andeq	r0, r0, ip, lsl r0
	system_event_count ++;
     c78:	00000b74 	andeq	r0, r0, r4, ror fp
     c7c:	00000000 	andeq	r0, r0, r0
	switch (__pi_systat.effpdm) {
     c80:	00000128 	andeq	r0, r0, r8, lsr #2
     c84:	83180e41 	tsthi	r8, #1040	; 0x410
     c88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			__WFI ();
     c90:	00018e02 	andeq	r8, r1, r2, lsl #28
     c94:	00000024 	andeq	r0, r0, r4, lsr #32
     c98:	00000b74 	andeq	r0, r0, r4, ror fp
	check_stack_overflow;
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	000000ec 	andeq	r0, r0, ip, ror #1
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     ca4:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     ca8:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
			(__pi_curr->code) (tstate (__pi_curr));
     cac:	87078608 	strhi	r8, [r7, -r8, lsl #12]
			goto Redo;
     cb0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
	for_all_tasks (__pi_curr) {
     cb4:	8b038a04 	blhi	e34cc <__ccfg+0xc3524>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	00000b74 	andeq	r0, r0, r4, ror fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	00000002 	andeq	r0, r0, r2
     ccc:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cd0:	00000b74 	andeq	r0, r0, r4, ror fp
     cd4:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd8:	00000004 	andeq	r0, r0, r4
     cdc:	0000000c 	andeq	r0, r0, ip
			__WFI ();
     ce0:	00000b74 	andeq	r0, r0, r4, ror fp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ce4:	00000000 	andeq	r0, r0, r0
     ce8:	00000014 	andeq	r0, r0, r4, lsl r0
}
     cec:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cf0:	00000b74 	andeq	r0, r0, r4, ror fp
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cf4:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf8:	0000001a 	andeq	r0, r0, sl, lsl r0
     cfc:	83080e41 	movwhi	r0, #36417	; 0x8e41
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d00:	4a018e02 	bmi	64510 <__ccfg+0x44568>
     d04:	000ec3ce 	andeq	ip, lr, lr, asr #7
     d08:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d10:	7c020001 	stcvc	0, cr0, [r2], {1}
     d14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
     d1c:	00000d08 	andeq	r0, r0, r8, lsl #26
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d20:	00001798 	muleq	r0, r8, r7
     d24:	00000078 	andeq	r0, r0, r8, ror r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d28:	83180e41 	tsthi	r8, #1040	; 0x410
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d2c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d30:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	0000000c 	andeq	r0, r0, ip
     d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			SysCtrlSetRechargeBeforePowerDown
     d40:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d48:	00000030 	andeq	r0, r0, r0, lsr r0
     d4c:	00000d38 	andeq	r0, r0, r8, lsr sp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d50:	00001810 	andeq	r1, r0, r0, lsl r8
     d54:	00000054 	andeq	r0, r0, r4, asr r0
     d58:	810c0e41 	tsthi	ip, r1, asr #28
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d5c:	83028203 	movwhi	r8, #8707	; 0x2203
     d60:	280e4101 	stmdacs	lr, {r0, r8, lr}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d64:	06850784 	streq	r0, [r5], r4, lsl #15
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d68:	048e0586 	streq	r0, [lr], #1414	; 0x586
     d6c:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     d70:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d74:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
			while (!(AONWUCPowerStatusGet () &
     d78:	000ec1c2 	andeq	ip, lr, r2, asr #3
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d7c:	0000000c 	andeq	r0, r0, ip
     d80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d84:	7c020001 	stcvc	0, cr0, [r2], {1}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d8c:	00000030 	andeq	r0, r0, r0, lsr r0
     d90:	00000d7c 	andeq	r0, r0, ip, ror sp
     d94:	00001864 	andeq	r1, r0, r4, ror #16
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d98:	00000060 	andeq	r0, r0, r0, rrx
     d9c:	810c0e41 	tsthi	ip, r1, asr #28
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     da0:	83028203 	movwhi	r8, #8707	; 0x2203
     da4:	200e4101 	andcs	r4, lr, r1, lsl #2
			SysCtrlAdjustRechargeAfterPowerDown ();
     da8:	05850684 	streq	r0, [r5, #1668]	; 0x684
			reinit_uart ();
     dac:	0a64048e 	beq	1901fec <__ccfg+0x18e2044>
     db0:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     db4:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
}
     db8:	c1c2c341 	bicgt	ip, r2, r1, asr #6
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dbc:	0b41000e 	bleq	1040dfc <__ccfg+0x1020e54>
     dc0:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dc8:	7c020001 	stcvc	0, cr0, [r2], {1}
     dcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dd0:	00000028 	andeq	r0, r0, r8, lsr #32
     dd4:	00000dc0 	andeq	r0, r0, r0, asr #27
     dd8:	000018c4 	andeq	r1, r0, r4, asr #17
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ddc:	00000070 	andeq	r0, r0, r0, ror r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     de0:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     de4:	86048505 	strhi	r8, [r4], -r5, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     dec:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     df0:	c7ce4214 	bfigt	r4, r4, #4, #11
     df4:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df8:	000b4200 	andeq	r4, fp, r0, lsl #4
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dfc:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e04:	7c020001 	stcvc	0, cr0, [r2], {1}
			PRCMPowerDomainOff (
     e08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e0c:	00000028 	andeq	r0, r0, r8, lsr #32
	__SLEEP;
     e10:	00000dfc 	strdeq	r0, [r0], -ip
     e14:	00001934 	andeq	r1, r0, r4, lsr r9
  __ASM volatile ("cpsie i" : : : "memory");
     e18:	0000011c 	andeq	r0, r0, ip, lsl r1
	goto Redo;
     e1c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     e20:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e24:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e28:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
     e2c:	c7ce4214 	bfigt	r4, r4, #4, #11
     e30:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e34:	00000000 	andeq	r0, r0, r0
     e38:	0000000c 	andeq	r0, r0, ip
     e3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e40:	7c020001 	stcvc	0, cr0, [r2], {1}
     e44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	00000e38 	andeq	r0, r0, r8, lsr lr
     e50:	00001a50 	andeq	r1, r0, r0, asr sl
     e54:	00000020 	andeq	r0, r0, r0, lsr #32
     e58:	00000028 	andeq	r0, r0, r8, lsr #32
     e5c:	00000e38 	andeq	r0, r0, r8, lsr lr
     e60:	00001a70 	andeq	r1, r0, r0, ror sl
     e64:	00000230 	andeq	r0, r0, r0, lsr r2
     e68:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
     e6c:	86078508 	strhi	r8, [r7], -r8, lsl #10
     e70:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     e74:	8a038904 	bhi	e328c <__ccfg+0xc32e4>
     e78:	02018e02 	andeq	r8, r1, #2, 28
     e7c:	200e0a4f 	andcs	r0, lr, pc, asr #20
     e80:	00000b42 	andeq	r0, r0, r2, asr #22
     e84:	0000001c 	andeq	r0, r0, ip, lsl r0
int main (void) {
     e88:	00000e38 	andeq	r0, r0, r8, lsr lr
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e8c:	00001ca0 	andeq	r1, r0, r0, lsr #25
     e90:	00000050 	andeq	r0, r0, r0, asr r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e94:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e98:	86058506 	strhi	r8, [r5], -r6, lsl #10
	system_init ();
     e9c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	tcv_init ();
     ea0:	00018e02 	andeq	r8, r1, r2, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ea4:	0000000c 	andeq	r0, r0, ip
     ea8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	7c020001 	stcvc	0, cr0, [r2], {1}
     eb0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     eb4:	00000020 	andeq	r0, r0, r0, lsr #32
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb8:	00000ea4 	andeq	r0, r0, r4, lsr #29
     ebc:	00001cf0 	strdeq	r1, [r0], -r0
	delay (16, 0);
     ec0:	00000390 	muleq	r0, r0, r3
     ec4:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     ec8:	86068507 	strhi	r8, [r6], -r7, lsl #10
	__pi_release ();
     ecc:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     ed0:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
     ed4:	00000001 	andeq	r0, r0, r1
     ed8:	0000000c 	andeq	r0, r0, ip
     edc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ee0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ee4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ee8:	0000000c 	andeq	r0, r0, ip
	wfun = (aword)(pid->code);
     eec:	00000ed8 	ldrdeq	r0, [r0], -r8
	for_all_tasks (i) {
     ef0:	00002080 	andeq	r2, r0, r0, lsl #1
		for (j = 0; j < nevents (i); j++) {
     ef4:	00000030 	andeq	r0, r0, r0, lsr r0
     ef8:	0000000c 	andeq	r0, r0, ip
     efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			    || i->Events [j] . Event == wfun
     f00:	7c020001 	stcvc	0, cr0, [r2], {1}
		for (j = 0; j < nevents (i); j++) {
     f04:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f08:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == (aword)pid
     f0c:	00000ef8 	strdeq	r0, [r0], -r8
     f10:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
     f14:	00000020 	andeq	r0, r0, r0, lsr #32
     f18:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
     f1c:	00000ef8 	strdeq	r0, [r0], -r8
}
     f20:	000020b0 	strheq	r2, [r0], -r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	00000018 	andeq	r0, r0, r8, lsl r0
static void qfree (aword *ch) {
     f28:	0000000c 	andeq	r0, r0, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	cc = (aword*)(mpools + MA_NP);
     f30:	7c020001 	stcvc	0, cr0, [r2], {1}
	m_setnextp (ch, chunk);
     f34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f38:	0000000c 	andeq	r0, r0, ip
}
     f3c:	00000f28 	andeq	r0, r0, r8, lsr #30
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f40:	000020c8 	andeq	r2, r0, r8, asr #1
     f44:	00000008 	andeq	r0, r0, r8
     f48:	0000000c 	andeq	r0, r0, ip
			m_setnextp (cc, m_nextp (chunk));
     f4c:	00000f28 	andeq	r0, r0, r8, lsr #30
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	00000000 	andeq	r0, r0, r0
     f54:	00000006 	andeq	r0, r0, r6
     f58:	0000000c 	andeq	r0, r0, ip
     f5c:	00000f28 	andeq	r0, r0, r8, lsr #30
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f60:	000020d0 	ldrdeq	r2, [r0], -r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f64:	00000008 	andeq	r0, r0, r8
     f68:	0000000c 	andeq	r0, r0, ip
     f6c:	00000f28 	andeq	r0, r0, r8, lsr #30
			m_setnextp (cc, m_nextp (chunk));
     f70:	00000000 	andeq	r0, r0, r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     f74:	00000006 	andeq	r0, r0, r6
     f78:	0000000c 	andeq	r0, r0, ip
     f7c:	00000f28 	andeq	r0, r0, r8, lsr #30
     f80:	00000000 	andeq	r0, r0, r0
     f84:	00000008 	andeq	r0, r0, r8
     f88:	0000000c 	andeq	r0, r0, ip
			if (m_size (chunk) >= m_size (ch))
     f8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f90:	7c020001 	stcvc	0, cr0, [r2], {1}
     f94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f98:	00000018 	andeq	r0, r0, r8, lsl r0
		chunk = m_nextp (chunk))
     f9c:	00000f88 	andeq	r0, r0, r8, lsl #31
     fa0:	000020d8 	ldrdeq	r2, [r0], -r8
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     fa4:	000000d4 	ldrdeq	r0, [r0], -r4
	diag_wait (a);
     fa8:	83100e41 	tsthi	r0, #1040	; 0x410
	diag_wchar (c, a);
     fac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     fb0:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     fb4:	00000014 	andeq	r0, r0, r4, lsl r0
     fb8:	00000f88 	andeq	r0, r0, r8, lsl #31
	syserror (ESTATE, "state");
     fbc:	000021ac 	andeq	r2, r0, ip, lsr #3
     fc0:	000000a4 	andeq	r0, r0, r4, lsr #1
     fc4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     fc8:	00018e02 	andeq	r8, r1, r2, lsl #28
void update_n_wake (word min, Boolean force) {
     fcc:	0000000c 	andeq	r0, r0, ip
	if (TCI_UPDATE_DELAY_TICKS (force))
     fd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fd4:	7c020001 	stcvc	0, cr0, [r2], {1}
     fd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fdc:	00000018 	andeq	r0, r0, r8, lsl r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fe0:	00000fcc 	andeq	r0, r0, ip, asr #31
     fe4:	00002250 	andeq	r2, r0, r0, asr r2
     fe8:	0000007c 	andeq	r0, r0, ip, ror r0
     fec:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     ff0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	00000014 	andeq	r0, r0, r4, lsl r0
     ffc:	00000fcc 	andeq	r0, r0, ip, asr #31
    1000:	000022cc 	andeq	r2, r0, ip, asr #5
    1004:	000000ac 	andeq	r0, r0, ip, lsr #1
    1008:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    100c:	00018e02 	andeq	r8, r1, r2, lsl #28
		for_all_tasks (i) {
    1010:	0000000c 	andeq	r0, r0, ip
	__pi_mintk = znew + min;
    1014:	00000fcc 	andeq	r0, r0, ip, asr #31
    1018:	00002378 	andeq	r2, r0, r8, ror r3
			if (!twaiting (i))
    101c:	0000005c 	andeq	r0, r0, ip, asr r0
    1020:	0000000c 	andeq	r0, r0, ip
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1024:	00000fcc 	andeq	r0, r0, ip, asr #31
    1028:	000023d4 	ldrdeq	r2, [r0], -r4
    102c:	00000018 	andeq	r0, r0, r8, lsl r0
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000fcc 	andeq	r0, r0, ip, asr #31
    1038:	00000000 	andeq	r0, r0, r0
    103c:	00000010 	andeq	r0, r0, r0, lsl r0
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000fcc 	andeq	r0, r0, ip, asr #31
    1048:	000023ec 	andeq	r2, r0, ip, ror #7
    104c:	00000010 	andeq	r0, r0, r0, lsl r0
    1050:	0000000c 	andeq	r0, r0, ip
				wakeuptm (i);
    1054:	00000fcc 	andeq	r0, r0, ip, asr #31
    1058:	000023fc 	strdeq	r2, [r0], -ip
		for_all_tasks (i) {
    105c:	00000014 	andeq	r0, r0, r4, lsl r0
				d = i->Timer - znew;
    1060:	00000018 	andeq	r0, r0, r8, lsl r0
    1064:	00000fcc 	andeq	r0, r0, ip, asr #31
    1068:	00002410 	andeq	r2, r0, r0, lsl r4
		if ((word)(__pi_mintk - znew) < min) 
    106c:	00000064 	andeq	r0, r0, r4, rrx
    1070:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1074:	86038504 	strhi	r8, [r3], -r4, lsl #10
	__pi_old = znew;
    1078:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    107c:	0000000c 	andeq	r0, r0, ip
	TCI_RUN_DELAY_TIMER;
    1080:	00000fcc 	andeq	r0, r0, ip, asr #31
}
    1084:	00002474 	andeq	r2, r0, r4, ror r4
    1088:	00000014 	andeq	r0, r0, r4, lsl r0
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	00000fcc 	andeq	r0, r0, ip, asr #31
    1094:	00002488 	andeq	r2, r0, r8, lsl #9
void proceed (word state) {
    1098:	00000014 	andeq	r0, r0, r4, lsl r0
	prcdstate (__pi_curr, state);
    109c:	0000000c 	andeq	r0, r0, ip
    10a0:	00000fcc 	andeq	r0, r0, ip, asr #31
	release;
    10a4:	0000249c 	muleq	r0, ip, r4
    10a8:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_wait (aword event, word state) {
    10ac:	0000000c 	andeq	r0, r0, ip
	sint j = nevents (__pi_curr);
    10b0:	00000fcc 	andeq	r0, r0, ip, asr #31
	if (j >= MAX_EVENTS_PER_TASK)
    10b4:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    10b8:	00000028 	andeq	r0, r0, r8, lsr #32
    10bc:	0000000c 	andeq	r0, r0, ip
		syserror (ENEVENTS, "sw");
    10c0:	00000fcc 	andeq	r0, r0, ip, asr #31
    10c4:	000024d8 	ldrdeq	r2, [r0], -r8
	setestate (__pi_curr->Events [j], state, event);
    10c8:	00000010 	andeq	r0, r0, r0, lsl r0
	incwait (__pi_curr);
    10cc:	0000000c 	andeq	r0, r0, ip
	setestate (__pi_curr->Events [j], state, event);
    10d0:	00000fcc 	andeq	r0, r0, ip, asr #31
}
    10d4:	000024e8 	andeq	r2, r0, r8, ror #9
    10d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    10dc:	0000000c 	andeq	r0, r0, ip
void __pi_trigger (aword event) {
    10e0:	00000fcc 	andeq	r0, r0, ip, asr #31
	for_all_tasks (i) {
    10e4:	00002514 	andeq	r2, r0, r4, lsl r5
		for (j = 0; j < nevents (i); j++) {
    10e8:	00000014 	andeq	r0, r0, r4, lsl r0
    10ec:	0000000c 	andeq	r0, r0, ip
    10f0:	00000fcc 	andeq	r0, r0, ip, asr #31
    10f4:	00002528 	andeq	r2, r0, r8, lsr #10
			if (i->Events [j] . Event == event) {
    10f8:	00000014 	andeq	r0, r0, r4, lsl r0
    10fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1100:	00000fcc 	andeq	r0, r0, ip, asr #31
				wakeupev (i, j);
    1104:	0000253c 	andeq	r2, r0, ip, lsr r5
    1108:	00000110 	andeq	r0, r0, r0, lsl r1
	for_all_tasks (i) {
    110c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
}
    1110:	86038504 	strhi	r8, [r3], -r4, lsl #10
aword __pi_join (aword pid, word st) {
    1114:	02018e02 	andeq	r8, r1, #2, 28
	for_all_tasks (i) {
    1118:	00100e76 	andseq	r0, r0, r6, ror lr
    111c:	00000018 	andeq	r0, r0, r8, lsl r0
	return 0;
    1120:	00000fcc 	andeq	r0, r0, ip, asr #31
		if ((aword)i == pid) {
    1124:	0000264c 	andeq	r2, r0, ip, asr #12
			__pi_wait (pid, st);
    1128:	00000064 	andeq	r0, r0, r4, rrx
}
    112c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	for_all_tasks (i) {
    1130:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1134:	00000001 	andeq	r0, r0, r1
void delay (word d, word state) {
    1138:	0000000c 	andeq	r0, r0, ip
	settstate (__pi_curr, state);
    113c:	00000fcc 	andeq	r0, r0, ip, asr #31
    1140:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
    1144:	00000028 	andeq	r0, r0, r8, lsr #32
    1148:	00000014 	andeq	r0, r0, r4, lsl r0
	update_n_wake (d, YES);
    114c:	00000fcc 	andeq	r0, r0, ip, asr #31
    1150:	000026d8 	ldrdeq	r2, [r0], -r8
	__pi_curr->Timer = __pi_old + d;
    1154:	00000150 	andeq	r0, r0, r0, asr r1
    1158:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	inctimer (__pi_curr);
    115c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    1168:	7c020001 	stcvc	0, cr0, [r2], {1}
    116c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1170:	0000001c 	andeq	r0, r0, ip, lsl r0
		return (int) __pi_curr;
    1174:	00001160 	andeq	r1, r0, r0, ror #2
    1178:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i)
    117c:	000000f4 	strdeq	r0, [r0], -r4
}
    1180:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
		if (i->code == fun)
    1184:	86058506 	strhi	r8, [r5], -r6, lsl #10
	for_all_tasks (i)
    1188:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    118c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1190:	00000028 	andeq	r0, r0, r8, lsr #32
int __pi_strlen (const char *s) {
    1194:	00001160 	andeq	r1, r0, r0, ror #2
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	00002828 	andeq	r2, r0, r8, lsr #16
}
    119c:	00000220 	andeq	r0, r0, r0, lsr #4
	for (i = 0; *(s+i) != '\0'; i++);
    11a0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
	while (n--)
    11a4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11a8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
		*dest++ = *src++;
    11ac:	8a048905 	bhi	1235c8 <__ccfg+0x103620>
    11b0:	8e028b03 	vmlahi.f64	d8, d2, d3
    11b4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
void adddevfunc (devreqfun_t rf, int loc) {
    11b8:	00000024 	andeq	r0, r0, r4, lsr #32
		syserror (EREQPAR, "addv");
    11bc:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ERESOURCE, "addv");
    11c0:	00001160 	andeq	r1, r0, r0, ror #2
	if (ioreq [loc] != NULL)
    11c4:	00002a48 	andeq	r2, r0, r8, asr #20
    11c8:	00000060 	andeq	r0, r0, r0, rrx
		syserror (ERESOURCE, "addv");
    11cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	ioreq [loc] = rf;
    11d0:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    11d4:	00000014 	andeq	r0, r0, r4, lsl r0
    11d8:	00001160 	andeq	r1, r0, r0, ror #2
sint io (word retry, word dev, word operation, char *buf, word len) {
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00000078 	andeq	r0, r0, r8, ror r0
    11e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11e8:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	00001160 	andeq	r1, r0, r0, ror #2
    11f4:	00002aa8 	andeq	r2, r0, r8, lsr #21
		syserror (ENODEVICE, "io");
    11f8:	00000018 	andeq	r0, r0, r8, lsl r0
    11fc:	0000000c 	andeq	r0, r0, ip
	if (len == 0)
    1200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	ret = (ioreq [dev]) (operation, buf, len);
    1204:	7c020001 	stcvc	0, cr0, [r2], {1}
    1208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    120c:	0000000c 	andeq	r0, r0, ip
	if (ret == -1) {
    1210:	000011fc 	strdeq	r1, [r0], -ip
    1214:	00000000 	andeq	r0, r0, r0
		if (retry == WNONE)
    1218:	00000010 	andeq	r0, r0, r0, lsl r0
		iowait (dev, operation, retry);
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	000011fc 	strdeq	r1, [r0], -ip
    1224:	00000000 	andeq	r0, r0, r0
			release;
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
	if (ret == -2) {
    122c:	0000000c 	andeq	r0, r0, ip
		if (retry != WNONE) {
    1230:	000011fc 	strdeq	r1, [r0], -ip
    1234:	00002ac0 	andeq	r2, r0, r0, asr #21
			iowait (dev, operation, retry);
    1238:	0000004c 	andeq	r0, r0, ip, asr #32
    123c:	00000014 	andeq	r0, r0, r4, lsl r0
			(ioreq [dev]) (NONE, buf, len);
    1240:	000011fc 	strdeq	r1, [r0], -ip
    1244:	00000000 	andeq	r0, r0, r0
    1248:	00000030 	andeq	r0, r0, r0, lsr r0
		(ioreq [dev]) (NONE, buf, len);
    124c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1250:	00018e02 	andeq	r8, r1, r2, lsl #28
    1254:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1258:	000011fc 	strdeq	r1, [r0], -ip
	if (retry != WNONE) {
    125c:	00002b0c 	andeq	r2, r0, ip, lsl #22
		delay (-ret - 2, retry);
    1260:	0000006c 	andeq	r0, r0, ip, rrx
    1264:	83100e41 	tsthi	r0, #1040	; 0x410
    1268:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    126c:	00018e02 	andeq	r8, r1, r2, lsl #28
		release;
    1270:	00000014 	andeq	r0, r0, r4, lsl r0
    1274:	000011fc 	strdeq	r1, [r0], -ip
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1278:	00002b78 	andeq	r2, r0, r8, ror fp
    127c:	00000016 	andeq	r0, r0, r6, lsl r0
    1280:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1284:	00018e02 	andeq	r8, r1, r2, lsl #28
    1288:	0000000c 	andeq	r0, r0, ip
		syserror (ERESOURCE, "mal1");
    128c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1290:	7c020001 	stcvc	0, cr0, [r2], {1}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1294:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1298:	00000024 	andeq	r0, r0, r4, lsr #32
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	00001288 	andeq	r1, r0, r8, lsl #5
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a0:	00002b90 	muleq	r0, r0, fp
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a4:	00000028 	andeq	r0, r0, r8, lsr #32
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a8:	83100e41 	tsthi	r0, #1040	; 0x410
    12ac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
    12b0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    12b4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    12b8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    12bc:	0000000b 	andeq	r0, r0, fp
    12c0:	0000000c 	andeq	r0, r0, ip
    12c4:	00001288 	andeq	r1, r0, r8, lsl #5
void __pi_free (aword *ch) {
    12c8:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12cc:	00000008 	andeq	r0, r0, r8
    12d0:	0000000c 	andeq	r0, r0, ip
		syserror (EMALLOC, "malg");
    12d4:	00001288 	andeq	r1, r0, r8, lsl #5
    12d8:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    12dc:	00000022 	andeq	r0, r0, r2, lsr #32
		m_size (ch) ^= MALLOC_UMASK;
    12e0:	00000018 	andeq	r0, r0, r8, lsl r0
    12e4:	00001288 	andeq	r1, r0, r8, lsl #5
	mcfree [MA_NP] += m_size (ch);
    12e8:	00000000 	andeq	r0, r0, r0
	QFREE;
    12ec:	0000002e 	andeq	r0, r0, lr, lsr #32
	if (mevent [MA_NP] . nwait) {
    12f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    12f4:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
		trigger ((aword)(&(mevent [MA_NP])));
    12f8:	000ec4ce 	andeq	ip, lr, lr, asr #9
		mevent [MA_NP] . nwait --;
    12fc:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1300:	00001288 	andeq	r1, r0, r8, lsl #5
    1304:	00000000 	andeq	r0, r0, r0
    1308:	00000034 	andeq	r0, r0, r4, lsr r0
    130c:	83100e41 	tsthi	r0, #1040	; 0x410
void kill (aword pid) {
    1310:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		pid = (aword) __pi_curr;
    1314:	00018e02 	andeq	r8, r1, r2, lsl #28
	j = NULL;
    1318:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (i) {
    131c:	00001288 	andeq	r1, r0, r8, lsl #5
	syserror (EREQPAR, "kpi");
    1320:	00000000 	andeq	r0, r0, r0
    1324:	00000040 	andeq	r0, r0, r0, asr #32
		if ((aword)i == pid) {
    1328:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    132c:	86038504 	strhi	r8, [r3], -r4, lsl #10
				__PCB = i->Next;
    1330:	00018e02 	andeq	r8, r1, r2, lsl #28
			killev (i);
    1334:	0000000c 	andeq	r0, r0, ip
			ufree (i);
    1338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (i == __pi_curr)
    133c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1340:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1344:	0000001c 	andeq	r0, r0, ip, lsl r0
				j->Next = i->Next;
    1348:	00001334 	andeq	r1, r0, r4, lsr r3
    134c:	00002bc0 	andeq	r2, r0, r0, asr #23
    1350:	0000005c 	andeq	r0, r0, ip, asr r0
}
    1354:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1358:	86038504 	strhi	r8, [r3], -r4, lsl #10
    135c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
void killall (fsmcode fun) {
    1360:	0000100e 	andeq	r1, r0, lr
	j = NULL;
    1364:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = __PCB; i != NULL; ) {
    1368:	00001334 	andeq	r1, r0, r4, lsr r3
			if (i == __pi_curr)
    136c:	00002c1c 	andeq	r2, r0, ip, lsl ip
	for (i = __PCB; i != NULL; ) {
    1370:	0000002c 	andeq	r0, r0, ip, lsr #32
	if (rel)
    1374:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		release;
    1378:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (i->code == fun) {
    137c:	00000018 	andeq	r0, r0, r8, lsl r0
    1380:	00001334 	andeq	r1, r0, r4, lsr r3
			if (j == NULL)
    1384:	00000000 	andeq	r0, r0, r0
				__PCB = k;
    1388:	00000090 	muleq	r0, r0, r0
			if (i == __pi_curr)
    138c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				rel = YES;
    1390:	86038504 	strhi	r8, [r3], -r4, lsl #10
			killev (i);
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
			ufree (i);
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
			i = k;
    139c:	00001334 	andeq	r1, r0, r4, lsr r3
    13a0:	00000000 	andeq	r0, r0, r0
				j->Next = k;
    13a4:	00000018 	andeq	r0, r0, r8, lsl r0
    13a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
    13b4:	00001334 	andeq	r1, r0, r4, lsr r3
	if (size < 8)
    13b8:	00000000 	andeq	r0, r0, r0
		_size = 2;
    13bc:	00000060 	andeq	r0, r0, r0, rrx
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		_size = (((aword)size) + 3) >> 2;
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	00000014 	andeq	r0, r0, r4, lsl r0
		_size = (((aword)size) + 3) >> 2;
    13cc:	00001334 	andeq	r1, r0, r4, lsr r3
		if (mevent [MA_NP] . nfail != 255)
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	00000034 	andeq	r0, r0, r4, lsr r0
			mevent [MA_NP] . nfail ++;
    13d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		mnfree [MA_NP] = 0;
    13dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    13e0:	00000018 	andeq	r0, r0, r8, lsl r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    13e4:	00001334 	andeq	r1, r0, r4, lsr r3
    13e8:	00000000 	andeq	r0, r0, r0
			syserror (EMALLOC, "malc");
    13ec:	00000038 	andeq	r0, r0, r8, lsr r0
    13f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		if (m_size (chunk) >= _size)
    13f4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13f8:	00000001 	andeq	r0, r0, r1
		chunk = m_nextp (chunk)) {
    13fc:	0000000c 	andeq	r0, r0, ip
		m_setnextp (cc, m_nextp (chunk));
    1400:	00001334 	andeq	r1, r0, r4, lsr r3
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1404:	00000000 	andeq	r0, r0, r0
    1408:	0000000c 	andeq	r0, r0, ip
			m_size (chunk) = _size;
    140c:	00000018 	andeq	r0, r0, r8, lsl r0
			cc = chunk + _size + m_hdrlen;
    1410:	00001334 	andeq	r1, r0, r4, lsr r3
    1414:	00000000 	andeq	r0, r0, r0
			m_size (cc) = waste - m_hdrlen;
    1418:	00000034 	andeq	r0, r0, r4, lsr r0
			QFREE;
    141c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		mevent [MA_NP] . nfail = 0;
    1420:	86038504 	strhi	r8, [r3], -r4, lsl #10
		mcfree [MA_NP] -= m_size (chunk);
    1424:	00018e02 	andeq	r8, r1, r2, lsl #28
    1428:	0000000c 	andeq	r0, r0, ip
    142c:	00001334 	andeq	r1, r0, r4, lsr r3
    1430:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
