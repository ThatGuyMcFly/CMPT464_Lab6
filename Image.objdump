
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000013ed 	andeq	r1, r0, sp, ror #7
		// Called to issue a wait request
		if (st == WNONE)
       8:	000013e7 	andeq	r1, r0, r7, ror #7
       c:	000013e9 	andeq	r1, r0, r9, ror #7
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000013eb 	andeq	r1, r0, fp, ror #7
      14:	000013eb 	andeq	r1, r0, fp, ror #7
		when (&__input_pins, st);
      18:	000013eb 	andeq	r1, r0, fp, ror #7
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000013eb 	andeq	r1, r0, fp, ror #7
      30:	000013eb 	andeq	r1, r0, fp, ror #7
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000013eb 	andeq	r1, r0, fp, ror #7
      3c:	000013eb 	andeq	r1, r0, fp, ror #7
      40:	00000829 	andeq	r0, r0, r9, lsr #16
      44:	000013eb 	andeq	r1, r0, fp, ror #7
      48:	000013eb 	andeq	r1, r0, fp, ror #7
}
      4c:	000013eb 	andeq	r1, r0, fp, ror #7
      50:	000003e9 	andeq	r0, r0, r9, ror #7
      54:	000006e9 	andeq	r0, r0, r9, ror #13
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000013eb 	andeq	r1, r0, fp, ror #7
	    pbutton++) {
      5c:	000013eb 	andeq	r1, r0, fp, ror #7
      60:	000013eb 	andeq	r1, r0, fp, ror #7
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000013eb 	andeq	r1, r0, fp, ror #7
      68:	000013eb 	andeq	r1, r0, fp, ror #7
      6c:	000013eb 	andeq	r1, r0, fp, ror #7
      70:	000013eb 	andeq	r1, r0, fp, ror #7
      74:	000013eb 	andeq	r1, r0, fp, ror #7
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000013eb 	andeq	r1, r0, fp, ror #7
      7c:	000013eb 	andeq	r1, r0, fp, ror #7
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000013eb 	andeq	r1, r0, fp, ror #7
      84:	000013eb 	andeq	r1, r0, fp, ror #7
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000013eb 	andeq	r1, r0, fp, ror #7
      8c:	000013eb 	andeq	r1, r0, fp, ror #7
      90:	000013eb 	andeq	r1, r0, fp, ror #7
      94:	000013eb 	andeq	r1, r0, fp, ror #7
      98:	000013eb 	andeq	r1, r0, fp, ror #7
		goto Done;

	if (baction == NULL)
      9c:	000013eb 	andeq	r1, r0, fp, ror #7
      a0:	000013eb 	andeq	r1, r0, fp, ror #7
		goto Term;

	(*baction) (pbutton);
      a4:	000013eb 	andeq	r1, r0, fp, ror #7

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000013eb 	andeq	r1, r0, fp, ror #7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000013eb 	andeq	r1, r0, fp, ror #7
      b0:	000013eb 	andeq	r1, r0, fp, ror #7
endthread
      b4:	000013eb 	andeq	r1, r0, fp, ror #7
      b8:	000013eb 	andeq	r1, r0, fp, ror #7
      bc:	000013eb 	andeq	r1, r0, fp, ror #7
      c0:	000013eb 	andeq	r1, r0, fp, ror #7
      c4:	000013eb 	andeq	r1, r0, fp, ror #7

000000c8 <initCycles>:
      c8:	2252      	movs	r2, #82	; 0x52
      ca:	4b0d      	ldr	r3, [pc, #52]	; (100 <_Min_Stack_Size>)
            leds(cycles[cyclesIndex].led, 1);
            if(displayCycle) {
                ser_outf(Check_PERIOD, "%c ", cycles[cyclesIndex].letter);
            }
        else
            leds(cycles[cyclesIndex].led, 0);
      cc:	b570      	push	{r4, r5, r6, lr}
      ce:	711a      	strb	r2, [r3, #4]
      d0:	2201      	movs	r2, #1
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      d2:	2600      	movs	r6, #0
      d4:	4d0b      	ldr	r5, [pc, #44]	; (104 <_Min_Stack_Size+0x4>)
      d6:	e9c3 6602 	strd	r6, r6, [r3, #8]
      da:	602a      	str	r2, [r5, #0]
      dc:	2247      	movs	r2, #71	; 0x47
      de:	4c0a      	ldr	r4, [pc, #40]	; (108 <_Min_Stack_Size+0x8>)
      e0:	e9c5 6602 	strd	r6, r6, [r5, #8]
      e4:	601e      	str	r6, [r3, #0]
      e6:	712a      	strb	r2, [r5, #4]
      e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
      ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
      f2:	3410      	adds	r4, #16
      f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      f8:	4b04      	ldr	r3, [pc, #16]	; (10c <_Min_Stack_Size+0xc>)
        delay(cycles[cyclesIndex].onTime * MS,OFF_PERIOD);
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        leds(cycles[cyclesIndex].led, 0);
      fa:	601e      	str	r6, [r3, #0]
      fc:	bd70      	pop	{r4, r5, r6, pc}
      fe:	bf00      	nop
     100:	20000064 	andcs	r0, r0, r4, rrx
     104:	20000054 	andcs	r0, r0, r4, asr r0
     108:	20000074 	andcs	r0, r0, r4, ror r0
        cyclesIndex = (cyclesIndex + 1) % 2;
        
        delay(offTime * MS,Check_PERIOD);
        when(&On, Check_PERIOD);
        release;
}
     10c:	20000094 	mulcs	r0, r4, r0

00000110 <processSettingsInput>:
     110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     112:	4604      	mov	r4, r0
     114:	f000 ff68 	bl	fe8 <__pi_strlen>
     118:	2300      	movs	r3, #0
     11a:	4619      	mov	r1, r3
     11c:	2800      	cmp	r0, #0
     11e:	da0b      	bge.n	138 <processSettingsInput+0x28>
     120:	2000      	movs	r0, #0
     122:	4b0d      	ldr	r3, [pc, #52]	; (158 <processSettingsInput+0x48>)
     124:	9a03      	ldr	r2, [sp, #12]
     126:	609a      	str	r2, [r3, #8]
     128:	9a02      	ldr	r2, [sp, #8]
     12a:	60da      	str	r2, [r3, #12]
     12c:	4b0b      	ldr	r3, [pc, #44]	; (15c <processSettingsInput+0x4c>)
     12e:	9a01      	ldr	r2, [sp, #4]
     130:	60d8      	str	r0, [r3, #12]
     132:	609a      	str	r2, [r3, #8]

    greenCycle.onTime = numbers[0];
    greenCycle.offTime = number;

    return 0;    
}
     134:	b004      	add	sp, #16
     136:	bd10      	pop	{r4, pc}
        if(settingsInput[i] == ' ') {
     138:	5c22      	ldrb	r2, [r4, r0]
     13a:	2a20      	cmp	r2, #32
     13c:	d107      	bne.n	14e <processSettingsInput+0x3e>
            numbers[numbersIndex] = number;
     13e:	aa04      	add	r2, sp, #16
     140:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     144:	f842 1c0c 	str.w	r1, [r2, #-12]
            numbersIndex++;
     148:	3301      	adds	r3, #1
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14a:	3001      	adds	r0, #1
     14c:	e7e6      	b.n	11c <processSettingsInput+0xc>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     14e:	3a30      	subs	r2, #48	; 0x30
     150:	2a09      	cmp	r2, #9
     152:	d9fa      	bls.n	14a <processSettingsInput+0x3a>
            return 1;
     154:	2001      	movs	r0, #1
     156:	e7ed      	b.n	134 <processSettingsInput+0x24>
     158:	20000064 	andcs	r0, r0, r4, rrx
     15c:	20000054 	andcs	r0, r0, r4, asr r0

00000160 <root>:

fsm root {
     160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     162:	2809      	cmp	r0, #9
     164:	d879      	bhi.n	25a <root+0xfa>
     166:	e8df f000 	tbb	[pc, r0]
     16a:	15100b05 	ldrne	r0, [r0, #-2821]	; 0xfffff4fb
     16e:	44362b27 	ldrtmi	r2, [r6], #-2855	; 0xfffff4d9
     172:	f7ff534b 			; <UNDEFINED> instruction: 0xf7ff534b

    char username[NAME_LENGTH];
    char * settings;
        
    state Initial:
        initCycles();
     176:	ffa8 2000 	vaddl.u32	q1, d8, d0

        ser_outf(Initial, "Enter your name: ");
     17a:	4939      	ldr	r1, [pc, #228]	; (260 <root+0x100>)
     17c:	f001 fa46 	bl	160c <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	2214      	movs	r2, #20
     182:	2001      	movs	r0, #1
     184:	4937      	ldr	r1, [pc, #220]	; (264 <root+0x104>)
     186:	f001 fa05 	bl	1594 <ser_in>
        //runfsm blinker;

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18a:	2002      	movs	r0, #2
     18c:	4a35      	ldr	r2, [pc, #212]	; (264 <root+0x104>)
     18e:	4936      	ldr	r1, [pc, #216]	; (268 <root+0x108>)
     190:	f001 fa3c 	bl	160c <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     194:	2003      	movs	r0, #3
     196:	4935      	ldr	r1, [pc, #212]	; (26c <root+0x10c>)
     198:	f10d 020f 	add.w	r2, sp, #15
     19c:	f001 fa60 	bl	1660 <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     1a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     1a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     1a8:	2b41      	cmp	r3, #65	; 0x41
     1aa:	d14a      	bne.n	242 <root+0xe2>
            proceed Adjust_Intervals;
     1ac:	2004      	movs	r0, #4
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     1ae:	f000 fe9d 	bl	eec <proceed>
        }

        proceed Get_Choice;
     1b2:	2003      	movs	r0, #3
     1b4:	f000 fe9a 	bl	eec <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	2000      	movs	r0, #0
     1ba:	492d      	ldr	r1, [pc, #180]	; (270 <root+0x110>)
     1bc:	f001 fa26 	bl	160c <ser_outf>

    state Set_Intervals:
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	2214      	movs	r2, #20
     1c2:	2100      	movs	r1, #0
     1c4:	2001      	movs	r0, #1
     1c6:	f001 f9e5 	bl	1594 <ser_in>

        processSettingsInput(settings);
     1ca:	2000      	movs	r0, #0
     1cc:	f7ff ffa0 	bl	110 <processSettingsInput>

        proceed Show_Menu;
     1d0:	2002      	movs	r0, #2
     1d2:	f000 fe8b 	bl	eec <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d6:	4a27      	ldr	r2, [pc, #156]	; (274 <root+0x114>)
     1d8:	2006      	movs	r0, #6
     1da:	69d3      	ldr	r3, [r2, #28]
     1dc:	4926      	ldr	r1, [pc, #152]	; (278 <root+0x118>)
     1de:	9301      	str	r3, [sp, #4]
     1e0:	6993      	ldr	r3, [r2, #24]
     1e2:	9300      	str	r3, [sp, #0]
     1e4:	68d3      	ldr	r3, [r2, #12]
     1e6:	6892      	ldr	r2, [r2, #8]
     1e8:	f001 fa10 	bl	160c <ser_outf>
            cycles[0].offTime,
            cycles[1].onTime,
            cycles[1].offTime
        );

        proceed Show_Menu;
     1ec:	2002      	movs	r0, #2
     1ee:	f000 fe7d 	bl	eec <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f2:	2007      	movs	r0, #7
     1f4:	4921      	ldr	r1, [pc, #132]	; (27c <root+0x11c>)
     1f6:	f001 fa09 	bl	160c <ser_outf>
        displayCycle = YES;
     1fa:	2201      	movs	r2, #1
     1fc:	4b20      	ldr	r3, [pc, #128]	; (280 <root+0x120>)
     1fe:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", ch);
     200:	2200      	movs	r2, #0
     202:	2008      	movs	r0, #8
     204:	4919      	ldr	r1, [pc, #100]	; (26c <root+0x10c>)
     206:	f001 fa2b 	bl	1660 <ser_inf>
        if(ch == 'S' || ch == 's'){
            displayCycle = NO;
            proceed Show_Menu;
        }
        
        proceed Await_Stop;
     20a:	2008      	movs	r0, #8
     20c:	f000 fe6e 	bl	eec <proceed>
     210:	2380      	movs	r3, #128	; 0x80
     212:	481c      	ldr	r0, [pc, #112]	; (284 <root+0x124>)
     214:	6003      	str	r3, [r0, #0]

    state Stop:
        leds(1, 0);
     216:	4b1c      	ldr	r3, [pc, #112]	; (288 <root+0x128>)
     218:	781a      	ldrb	r2, [r3, #0]
     21a:	7819      	ldrb	r1, [r3, #0]
     21c:	0912      	lsrs	r2, r2, #4
     21e:	f002 020d 	and.w	r2, r2, #13
     222:	f362 1107 	bfi	r1, r2, #4, #4
     226:	2240      	movs	r2, #64	; 0x40
     228:	7019      	strb	r1, [r3, #0]
     22a:	6002      	str	r2, [r0, #0]
        leds(0, 0);
     22c:	781a      	ldrb	r2, [r3, #0]
     22e:	7819      	ldrb	r1, [r3, #0]
     230:	0912      	lsrs	r2, r2, #4
     232:	f002 020e 	and.w	r2, r2, #14
     236:	f362 1107 	bfi	r1, r2, #4, #4
     23a:	7019      	strb	r1, [r3, #0]
     23c:	b005      	add	sp, #20
     23e:	f85d fb04 	ldr.w	pc, [sp], #4
        } else if (choice == 'S' || choice == 's') {
     242:	2b53      	cmp	r3, #83	; 0x53
     244:	d101      	bne.n	24a <root+0xea>
            proceed Stop;
     246:	2009      	movs	r0, #9
     248:	e7b1      	b.n	1ae <root+0x4e>
        } else if (choice == 'V' || choice == 'v') {
     24a:	2b56      	cmp	r3, #86	; 0x56
     24c:	d101      	bne.n	252 <root+0xf2>
            proceed View_Settings;
     24e:	2006      	movs	r0, #6
     250:	e7ad      	b.n	1ae <root+0x4e>
        } else if (choice == 'M' || choice == 'm') {
     252:	2b4d      	cmp	r3, #77	; 0x4d
     254:	d1ad      	bne.n	1b2 <root+0x52>
            proceed Monitor;
     256:	2007      	movs	r0, #7
     258:	e7a9      	b.n	1ae <root+0x4e>
     25a:	f000 fdd9 	bl	e10 <__pi_badstate>
     25e:	e7ed      	b.n	23c <root+0xdc>
     260:	00002a44 	andeq	r2, r0, r4, asr #20
     264:	20000001 	andcs	r0, r0, r1
     268:	00002a56 	andeq	r2, r0, r6, asr sl
     26c:	00002ae7 	andeq	r2, r0, r7, ror #21
     270:	00002aea 	andeq	r2, r0, sl, ror #21
     274:	20000074 	andcs	r0, r0, r4, ror r0
     278:	00002b1d 	andeq	r2, r0, sp, lsl fp
     27c:	00002b58 	andeq	r2, r0, r8, asr fp
     280:	20000000 	andcs	r0, r0, r0
     284:	400220a0 	andmi	r2, r2, r0, lsr #1
     288:	200000ac 	andcs	r0, r0, ip, lsr #1

0000028c <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     28c:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     28e:	4801      	ldr	r0, [pc, #4]	; (294 <devinit_uart+0x8>)
     290:	f000 bebc 	b.w	100c <adddevfunc>
     294:	000005d9 	ldrdeq	r0, [r0], -r9

00000298 <udelay>:
void udelay (volatile word n) {
     298:	b082      	sub	sp, #8
     29a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     29e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2a2:	b29b      	uxth	r3, r3
     2a4:	b90b      	cbnz	r3, 2aa <udelay+0x12>
}
     2a6:	b002      	add	sp, #8
     2a8:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     2aa:	2304      	movs	r3, #4
	while (n--);
     2ac:	461a      	mov	r2, r3
     2ae:	3b01      	subs	r3, #1
     2b0:	b29b      	uxth	r3, r3
     2b2:	2a00      	cmp	r2, #0
     2b4:	d1fa      	bne.n	2ac <udelay+0x14>
		n--;
     2b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2ba:	3b01      	subs	r3, #1
     2bc:	b29b      	uxth	r3, r3
     2be:	f8ad 3006 	strh.w	r3, [sp, #6]
     2c2:	e7ec      	b.n	29e <udelay+0x6>

000002c4 <mdelay>:
void mdelay (volatile word n) {
     2c4:	b507      	push	{r0, r1, r2, lr}
     2c6:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     2ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2ce:	b29b      	uxth	r3, r3
     2d0:	b913      	cbnz	r3, 2d8 <mdelay+0x14>
}
     2d2:	b003      	add	sp, #12
     2d4:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     2d8:	f240 30e7 	movw	r0, #999	; 0x3e7
     2dc:	f7ff ffdc 	bl	298 <udelay>
		n--;
     2e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2e4:	3b01      	subs	r3, #1
     2e6:	b29b      	uxth	r3, r3
     2e8:	f8ad 3006 	strh.w	r3, [sp, #6]
     2ec:	e7ed      	b.n	2ca <mdelay+0x6>
	...

000002f0 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     2f0:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     2f2:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     2f4:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     2f6:	d505      	bpl.n	304 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     2f8:	4b0a      	ldr	r3, [pc, #40]	; (324 <__pi_ondomain+0x34>)
     2fa:	78da      	ldrb	r2, [r3, #3]
     2fc:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     2fe:	bf84      	itt	hi
     300:	2201      	movhi	r2, #1
     302:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     304:	4d08      	ldr	r5, [pc, #32]	; (328 <__pi_ondomain+0x38>)
     306:	4620      	mov	r0, r4
     308:	682b      	ldr	r3, [r5, #0]
     30a:	695b      	ldr	r3, [r3, #20]
     30c:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     30e:	682b      	ldr	r3, [r5, #0]
     310:	4620      	mov	r0, r4
     312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     314:	4798      	blx	r3
     316:	2801      	cmp	r0, #1
     318:	d1f9      	bne.n	30e <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     31a:	4b02      	ldr	r3, [pc, #8]	; (324 <__pi_ondomain+0x34>)
     31c:	6858      	ldr	r0, [r3, #4]
     31e:	4304      	orrs	r4, r0
     320:	605c      	str	r4, [r3, #4]
}
     322:	bd38      	pop	{r3, r4, r5, pc}
     324:	200000ac 	andcs	r0, r0, ip, lsr #1
     328:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

0000032c <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     32c:	460a      	mov	r2, r1
     32e:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     330:	4601      	mov	r1, r0
     332:	480f      	ldr	r0, [pc, #60]	; (370 <__pi_syserror+0x44>)
     334:	f000 ffb8 	bl	12a8 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     338:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33a:	2540      	movs	r5, #64	; 0x40
     33c:	462f      	mov	r7, r5
     33e:	4e0d      	ldr	r6, [pc, #52]	; (374 <__pi_syserror+0x48>)
     340:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     342:	490d      	ldr	r1, [pc, #52]	; (378 <__pi_syserror+0x4c>)
     344:	6037      	str	r7, [r6, #0]
     346:	6034      	str	r4, [r6, #0]
     348:	780b      	ldrb	r3, [r1, #0]
     34a:	780b      	ldrb	r3, [r1, #0]
     34c:	20c8      	movs	r0, #200	; 0xc8
     34e:	f36f 1307 	bfc	r3, #4, #4
     352:	700b      	strb	r3, [r1, #0]
     354:	f7ff ffb6 	bl	2c4 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	4b08      	ldr	r3, [pc, #32]	; (37c <__pi_syserror+0x50>)
     35a:	20c8      	movs	r0, #200	; 0xc8
     35c:	601d      	str	r5, [r3, #0]
     35e:	601c      	str	r4, [r3, #0]
     360:	780b      	ldrb	r3, [r1, #0]
     362:	780b      	ldrb	r3, [r1, #0]
     364:	f36f 1307 	bfc	r3, #4, #4
     368:	700b      	strb	r3, [r1, #0]
     36a:	f7ff ffab 	bl	2c4 <mdelay>
	while (1) {
     36e:	e7e7      	b.n	340 <__pi_syserror+0x14>
     370:	00002b74 	andeq	r2, r0, r4, ror fp
     374:	40022090 	mulmi	r2, r0, r0
     378:	200000ac 	andcs	r0, r0, ip, lsr #1
     37c:	400220a0 	andmi	r2, r2, r0, lsr #1

00000380 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     380:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     382:	4b0a      	ldr	r3, [pc, #40]	; (3ac <tci_run_delay_timer+0x2c>)
     384:	881c      	ldrh	r4, [r3, #0]
     386:	4b0a      	ldr	r3, [pc, #40]	; (3b0 <tci_run_delay_timer+0x30>)
     388:	8818      	ldrh	r0, [r3, #0]
     38a:	4b0a      	ldr	r3, [pc, #40]	; (3b4 <tci_run_delay_timer+0x34>)
     38c:	1b00      	subs	r0, r0, r4
     38e:	b284      	uxth	r4, r0
     390:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     392:	f001 fd8b 	bl	1eac <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     396:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     398:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     39a:	4b07      	ldr	r3, [pc, #28]	; (3b8 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     39c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     3a0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	6018      	str	r0, [r3, #0]
	sti_tim;
     3a6:	4b05      	ldr	r3, [pc, #20]	; (3bc <tci_run_delay_timer+0x3c>)
     3a8:	601a      	str	r2, [r3, #0]
}
     3aa:	bd10      	pop	{r4, pc}
     3ac:	200000aa 	andcs	r0, r0, sl, lsr #1
     3b0:	200000a8 	andcs	r0, r0, r8, lsr #1
     3b4:	20000016 	andcs	r0, r0, r6, lsl r0
     3b8:	40092018 	andmi	r2, r9, r8, lsl r0
     3bc:	43240280 			; <UNDEFINED> instruction: 0x43240280

000003c0 <tci_run_auxiliary_timer>:
	cli_aux;
     3c0:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     3c2:	b510      	push	{r4, lr}
	cli_aux;
     3c4:	4c06      	ldr	r4, [pc, #24]	; (3e0 <tci_run_auxiliary_timer+0x20>)
     3c6:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	f001 fd70 	bl	1eac <NOROM_AONRTCCurrent64BitValueGet>
     3cc:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     3d4:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     3d6:	6018      	str	r0, [r3, #0]
	sti_aux;
     3d8:	2301      	movs	r3, #1
     3da:	6023      	str	r3, [r4, #0]
}
     3dc:	bd10      	pop	{r4, pc}
     3de:	bf00      	nop
     3e0:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     3e4:	40092020 	andmi	r2, r9, r0, lsr #32

000003e8 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     3e8:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ea:	4b3b      	ldr	r3, [pc, #236]	; (4d8 <AONRTCIntHandler+0xf0>)
     3ec:	6818      	ldr	r0, [r3, #0]
     3ee:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     3f2:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     3f6:	d542      	bpl.n	47e <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     3f8:	4b38      	ldr	r3, [pc, #224]	; (4dc <AONRTCIntHandler+0xf4>)
     3fa:	6819      	ldr	r1, [r3, #0]
     3fc:	2900      	cmp	r1, #0
     3fe:	d053      	beq.n	4a8 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     400:	880a      	ldrh	r2, [r1, #0]
     402:	2a00      	cmp	r2, #0
     404:	d04e      	beq.n	4a4 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     406:	3a01      	subs	r2, #1
     408:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     40a:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     40c:	685c      	ldr	r4, [r3, #4]
     40e:	b194      	cbz	r4, 436 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     410:	8821      	ldrh	r1, [r4, #0]
     412:	b111      	cbz	r1, 41a <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     414:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     416:	3901      	subs	r1, #1
     418:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     41a:	689c      	ldr	r4, [r3, #8]
     41c:	b15c      	cbz	r4, 436 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     41e:	8821      	ldrh	r1, [r4, #0]
     420:	b111      	cbz	r1, 428 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     422:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     424:	3901      	subs	r1, #1
     426:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     428:	68d9      	ldr	r1, [r3, #12]
     42a:	b121      	cbz	r1, 436 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     42c:	880b      	ldrh	r3, [r1, #0]
     42e:	b113      	cbz	r3, 436 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     430:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     432:	3b01      	subs	r3, #1
     434:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     436:	4b2a      	ldr	r3, [pc, #168]	; (4e0 <AONRTCIntHandler+0xf8>)
     438:	7819      	ldrb	r1, [r3, #0]
     43a:	0909      	lsrs	r1, r1, #4
     43c:	d047      	beq.n	4ce <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     43e:	7859      	ldrb	r1, [r3, #1]
     440:	1c4a      	adds	r2, r1, #1
     442:	b2d2      	uxtb	r2, r2
     444:	705a      	strb	r2, [r3, #1]
     446:	b9d1      	cbnz	r1, 47e <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     448:	781a      	ldrb	r2, [r3, #0]
     44a:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     44e:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     450:	d02c      	beq.n	4ac <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     452:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	bf42      	ittt	mi
     456:	2140      	movmi	r1, #64	; 0x40
     458:	4a22      	ldrmi	r2, [pc, #136]	; (4e4 <AONRTCIntHandler+0xfc>)
     45a:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     45c:	781a      	ldrb	r2, [r3, #0]
     45e:	0692      	lsls	r2, r2, #26
     460:	bf42      	ittt	mi
     462:	2180      	movmi	r1, #128	; 0x80
     464:	4a1f      	ldrmi	r2, [pc, #124]	; (4e4 <AONRTCIntHandler+0xfc>)
     466:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     468:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     46a:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     46c:	781a      	ldrb	r2, [r3, #0]
     46e:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     472:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     474:	781a      	ldrb	r2, [r3, #0]
     476:	0752      	lsls	r2, r2, #29
     478:	d501      	bpl.n	47e <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     47a:	22c8      	movs	r2, #200	; 0xc8
     47c:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     47e:	07c3      	lsls	r3, r0, #31
     480:	d50f      	bpl.n	4a2 <AONRTCIntHandler+0xba>
		cli_tim;
     482:	2100      	movs	r1, #0
     484:	4b18      	ldr	r3, [pc, #96]	; (4e8 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     486:	4a19      	ldr	r2, [pc, #100]	; (4ec <AONRTCIntHandler+0x104>)
     488:	4819      	ldr	r0, [pc, #100]	; (4f0 <AONRTCIntHandler+0x108>)
		cli_tim;
     48a:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     48c:	8803      	ldrh	r3, [r0, #0]
     48e:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     490:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     492:	4423      	add	r3, r4
		RISE_N_SHINE;
     494:	4a12      	ldr	r2, [pc, #72]	; (4e0 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     496:	b29b      	uxth	r3, r3
     498:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     49a:	7813      	ldrb	r3, [r2, #0]
     49c:	f043 0302 	orr.w	r3, r3, #2
     4a0:	7013      	strb	r3, [r2, #0]
}
     4a2:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     4a4:	2201      	movs	r2, #1
     4a6:	e7b1      	b.n	40c <AONRTCIntHandler+0x24>
     4a8:	2201      	movs	r2, #1
     4aa:	e7c4      	b.n	436 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     4ac:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4ae:	bf42      	ittt	mi
     4b0:	2140      	movmi	r1, #64	; 0x40
     4b2:	4a10      	ldrmi	r2, [pc, #64]	; (4f4 <AONRTCIntHandler+0x10c>)
     4b4:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     4b6:	781a      	ldrb	r2, [r3, #0]
     4b8:	0691      	lsls	r1, r2, #26
     4ba:	bf42      	ittt	mi
     4bc:	2180      	movmi	r1, #128	; 0x80
     4be:	4a0d      	ldrmi	r2, [pc, #52]	; (4f4 <AONRTCIntHandler+0x10c>)
     4c0:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     4c2:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     4c4:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     4c6:	781a      	ldrb	r2, [r3, #0]
     4c8:	f042 0208 	orr.w	r2, r2, #8
     4cc:	e7d1      	b.n	472 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     4ce:	2a00      	cmp	r2, #0
     4d0:	d0d5      	beq.n	47e <AONRTCIntHandler+0x96>
			cli_aux;
     4d2:	4b09      	ldr	r3, [pc, #36]	; (4f8 <AONRTCIntHandler+0x110>)
     4d4:	6019      	str	r1, [r3, #0]
     4d6:	e7d2      	b.n	47e <AONRTCIntHandler+0x96>
     4d8:	40092004 	andmi	r2, r9, r4
     4dc:	200000b8 	strhcs	r0, [r0], -r8
     4e0:	200000ac 	andcs	r0, r0, ip, lsr #1
     4e4:	40022090 	mulmi	r2, r0, r0
     4e8:	43240280 			; <UNDEFINED> instruction: 0x43240280
     4ec:	20000016 	andcs	r0, r0, r6, lsl r0
     4f0:	200000b4 	strhcs	r0, [r0], -r4
     4f4:	400220a0 	andmi	r2, r2, r0, lsr #1
     4f8:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

000004fc <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     4fe:	2600      	movs	r6, #0
     500:	4b0e      	ldr	r3, [pc, #56]	; (53c <tci_update_delay_ticks+0x40>)
	if (setdel) {
     502:	4f0f      	ldr	r7, [pc, #60]	; (540 <tci_update_delay_ticks+0x44>)
	cli_tim;
     504:	601e      	str	r6, [r3, #0]
	if (setdel) {
     506:	883d      	ldrh	r5, [r7, #0]
     508:	b19d      	cbz	r5, 532 <tci_update_delay_ticks+0x36>
		if (force) {
     50a:	b1a0      	cbz	r0, 536 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	4b0d      	ldr	r3, [pc, #52]	; (544 <tci_update_delay_ticks+0x48>)
     50e:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	f001 fccc 	bl	1eac <NOROM_AONRTCCurrent64BitValueGet>
     514:	0d80      	lsrs	r0, r0, #22
     516:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51a:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     51e:	b280      	uxth	r0, r0
     520:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     522:	1b2c      	subs	r4, r5, r4
	return NO;
     524:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     526:	4b08      	ldr	r3, [pc, #32]	; (548 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     528:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52a:	881a      	ldrh	r2, [r3, #0]
     52c:	4414      	add	r4, r2
     52e:	b2a4      	uxth	r4, r4
     530:	801c      	strh	r4, [r3, #0]
}
     532:	4628      	mov	r0, r5
     534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     536:	2501      	movs	r5, #1
     538:	601d      	str	r5, [r3, #0]
		return YES;
     53a:	e7fa      	b.n	532 <tci_update_delay_ticks+0x36>
     53c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     540:	20000016 	andcs	r0, r0, r6, lsl r0
     544:	40092018 	andmi	r2, r9, r8, lsl r0
     548:	200000b4 	strhcs	r0, [r0], -r4

0000054c <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     54e:	4e0f      	ldr	r6, [pc, #60]	; (58c <__pi_uart_setrate+0x40>)
     550:	4d0f      	ldr	r5, [pc, #60]	; (590 <__pi_uart_setrate+0x44>)
     552:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     556:	68db      	ldr	r3, [r3, #12]
     558:	4628      	mov	r0, r5
     55a:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     55c:	2264      	movs	r2, #100	; 0x64
     55e:	6833      	ldr	r3, [r6, #0]
     560:	4628      	mov	r0, r5
     562:	4362      	muls	r2, r4
     564:	685e      	ldr	r6, [r3, #4]
     566:	490b      	ldr	r1, [pc, #44]	; (594 <__pi_uart_setrate+0x48>)
     568:	2360      	movs	r3, #96	; 0x60
     56a:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	4a0a      	ldr	r2, [pc, #40]	; (598 <__pi_uart_setrate+0x4c>)
}
     56e:	2001      	movs	r0, #1
     570:	6813      	ldr	r3, [r2, #0]
     572:	f043 0310 	orr.w	r3, r3, #16
     576:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	6853      	ldr	r3, [r2, #4]
     57a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     57e:	f043 0301 	orr.w	r3, r3, #1
     582:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     584:	4b05      	ldr	r3, [pc, #20]	; (59c <__pi_uart_setrate+0x50>)
     586:	801c      	strh	r4, [r3, #0]
}
     588:	bd70      	pop	{r4, r5, r6, pc}
     58a:	bf00      	nop
     58c:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     590:	40001000 	andmi	r1, r0, r0
     594:	02dc6c00 	sbcseq	r6, ip, #0, 24
     598:	4000102c 	andmi	r1, r0, ip, lsr #32
     59c:	20000018 	andcs	r0, r0, r8, lsl r0

000005a0 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	4a08      	ldr	r2, [pc, #32]	; (5c4 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     5a2:	4909      	ldr	r1, [pc, #36]	; (5c8 <reinit_uart+0x28>)
     5a4:	6813      	ldr	r3, [r2, #0]
     5a6:	f043 0310 	orr.w	r3, r3, #16
     5aa:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	2212      	movs	r2, #18
     5ae:	4b07      	ldr	r3, [pc, #28]	; (5cc <reinit_uart+0x2c>)
     5b0:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b2:	4a07      	ldr	r2, [pc, #28]	; (5d0 <reinit_uart+0x30>)
     5b4:	6813      	ldr	r3, [r2, #0]
     5b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     5ba:	6013      	str	r3, [r2, #0]
     5bc:	4b05      	ldr	r3, [pc, #20]	; (5d4 <reinit_uart+0x34>)
     5be:	8818      	ldrh	r0, [r3, #0]
     5c0:	f7ff bfc4 	b.w	54c <__pi_uart_setrate>
     5c4:	4000102c 	andmi	r1, r0, ip, lsr #32
     5c8:	20000098 	mulcs	r0, r8, r0
     5cc:	40001034 	andmi	r1, r0, r4, lsr r0
     5d0:	40001030 	andmi	r1, r0, r0, lsr r0
     5d4:	20000018 	andcs	r0, r0, r8, lsl r0

000005d8 <ioreq_uart_a>:
	switch (operation) {
     5d8:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     5da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5de:	460d      	mov	r5, r1
     5e0:	4614      	mov	r4, r2
     5e2:	2803      	cmp	r0, #3
     5e4:	d86e      	bhi.n	6c4 <ioreq_uart_a+0xec>
     5e6:	e8df f000 	tbb	[pc, r0]
     5ea:	5a471253 	bpl	11c4f3e <__ccfg+0x11a4f96>
				*buf++ = uart_a_read;
     5ee:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     5f2:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     5f4:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     5f8:	b11e      	cbz	r6, 602 <ioreq_uart_a+0x2a>
     5fa:	f8d8 3000 	ldr.w	r3, [r8]
     5fe:	06d8      	lsls	r0, r3, #27
     600:	d5f5      	bpl.n	5ee <ioreq_uart_a+0x16>
			if (len != operation) {
     602:	42a6      	cmp	r6, r4
     604:	d00a      	beq.n	61c <ioreq_uart_a+0x44>
				return operation - len;
     606:	1ba4      	subs	r4, r4, r6
}
     608:	4620      	mov	r0, r4
     60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     60e:	4616      	mov	r6, r2
			uart_a_disable_int;
     610:	4f2e      	ldr	r7, [pc, #184]	; (6cc <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     612:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6e0 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     616:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6e4 <ioreq_uart_a+0x10c>
     61a:	e7ed      	b.n	5f8 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     61c:	683b      	ldr	r3, [r7, #0]
     61e:	2015      	movs	r0, #21
     620:	695b      	ldr	r3, [r3, #20]
     622:	4798      	blx	r3
			if (uart_a_char_available) {
     624:	f8d8 3000 	ldr.w	r3, [r8]
     628:	06d9      	lsls	r1, r3, #27
     62a:	d404      	bmi.n	636 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     62c:	683b      	ldr	r3, [r7, #0]
     62e:	2015      	movs	r0, #21
     630:	691b      	ldr	r3, [r3, #16]
     632:	4798      	blx	r3
				goto Redo_rx;
     634:	e7e0      	b.n	5f8 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     636:	4a26      	ldr	r2, [pc, #152]	; (6d0 <ioreq_uart_a+0xf8>)
     638:	7993      	ldrb	r3, [r2, #6]
     63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     63e:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     642:	7193      	strb	r3, [r2, #6]
			return -2;
     644:	e7e0      	b.n	608 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     646:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     64a:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     64c:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     650:	b11e      	cbz	r6, 65a <ioreq_uart_a+0x82>
     652:	f8d8 3000 	ldr.w	r3, [r8]
     656:	069a      	lsls	r2, r3, #26
     658:	d5f5      	bpl.n	646 <ioreq_uart_a+0x6e>
			if (len != operation) {
     65a:	42a6      	cmp	r6, r4
     65c:	d1d3      	bne.n	606 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     65e:	683b      	ldr	r3, [r7, #0]
     660:	2015      	movs	r0, #21
     662:	695b      	ldr	r3, [r3, #20]
     664:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     666:	f8d8 3000 	ldr.w	r3, [r8]
     66a:	069b      	lsls	r3, r3, #26
     66c:	d40b      	bmi.n	686 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     66e:	683b      	ldr	r3, [r7, #0]
     670:	2015      	movs	r0, #21
     672:	691b      	ldr	r3, [r3, #16]
     674:	4798      	blx	r3
				goto Redo_tx;
     676:	e7eb      	b.n	650 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     678:	4616      	mov	r6, r2
			uart_a_disable_int;
     67a:	4f14      	ldr	r7, [pc, #80]	; (6cc <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     67c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 6e0 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     680:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6e4 <ioreq_uart_a+0x10c>
     684:	e7e4      	b.n	650 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     686:	4a12      	ldr	r2, [pc, #72]	; (6d0 <ioreq_uart_a+0xf8>)
     688:	7993      	ldrb	r3, [r2, #6]
     68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     68e:	e7d6      	b.n	63e <ioreq_uart_a+0x66>
			uart_a_enable_int;
     690:	4b0e      	ldr	r3, [pc, #56]	; (6cc <ioreq_uart_a+0xf4>)
     692:	2015      	movs	r0, #21
     694:	681b      	ldr	r3, [r3, #0]
			return 0;
     696:	2400      	movs	r4, #0
			uart_a_enable_int;
     698:	691b      	ldr	r3, [r3, #16]
     69a:	4798      	blx	r3
			return 0;
     69c:	e7b4      	b.n	608 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     69e:	2a01      	cmp	r2, #1
     6a0:	d109      	bne.n	6b6 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     6a2:	490b      	ldr	r1, [pc, #44]	; (6d0 <ioreq_uart_a+0xf8>)
     6a4:	8828      	ldrh	r0, [r5, #0]
     6a6:	f7ff ff51 	bl	54c <__pi_uart_setrate>
     6aa:	2800      	cmp	r0, #0
     6ac:	d1ac      	bne.n	608 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     6ae:	2003      	movs	r0, #3
     6b0:	4908      	ldr	r1, [pc, #32]	; (6d4 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     6b2:	f7ff fe3b 	bl	32c <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     6b6:	2a02      	cmp	r2, #2
     6b8:	d104      	bne.n	6c4 <ioreq_uart_a+0xec>
	return urates [0];
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <ioreq_uart_a+0x100>)
				return 1;
     6bc:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6be:	881b      	ldrh	r3, [r3, #0]
     6c0:	800b      	strh	r3, [r1, #0]
				return 1;
     6c2:	e7a1      	b.n	608 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     6c4:	2002      	movs	r0, #2
     6c6:	4905      	ldr	r1, [pc, #20]	; (6dc <ioreq_uart_a+0x104>)
     6c8:	e7f3      	b.n	6b2 <ioreq_uart_a+0xda>
     6ca:	bf00      	nop
     6cc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     6d0:	20000098 	mulcs	r0, r8, r0
     6d4:	00002b83 	andeq	r2, r0, r3, lsl #23
     6d8:	20000018 	andcs	r0, r0, r8, lsl r0
     6dc:	00002b87 	andeq	r2, r0, r7, lsl #23
     6e0:	40001018 	andmi	r1, r0, r8, lsl r0
     6e4:	40001000 	andmi	r1, r0, r0

000006e8 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     6ec:	b530      	push	{r4, r5, lr}
     6ee:	4b29      	ldr	r3, [pc, #164]	; (794 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	4c29      	ldr	r4, [pc, #164]	; (798 <UART0IntHandler+0xb0>)
     6f2:	601a      	str	r2, [r3, #0]
     6f4:	6822      	ldr	r2, [r4, #0]
     6f6:	06d5      	lsls	r5, r2, #27
     6f8:	d423      	bmi.n	742 <UART0IntHandler+0x5a>
     6fa:	4b28      	ldr	r3, [pc, #160]	; (79c <UART0IntHandler+0xb4>)
     6fc:	799a      	ldrb	r2, [r3, #6]
     6fe:	0610      	lsls	r0, r2, #24
     700:	d51f      	bpl.n	742 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     702:	799a      	ldrb	r2, [r3, #6]
     704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     708:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     70a:	4a25      	ldr	r2, [pc, #148]	; (7a0 <UART0IntHandler+0xb8>)
     70c:	7813      	ldrb	r3, [r2, #0]
     70e:	f043 0302 	orr.w	r3, r3, #2
     712:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     714:	4b23      	ldr	r3, [pc, #140]	; (7a4 <UART0IntHandler+0xbc>)
     716:	681a      	ldr	r2, [r3, #0]
     718:	b19a      	cbz	r2, 742 <UART0IntHandler+0x5a>
     71a:	4610      	mov	r0, r2
     71c:	2300      	movs	r3, #0
     71e:	f830 1b10 	ldrh.w	r1, [r0], #16
     722:	f001 0107 	and.w	r1, r1, #7
     726:	4299      	cmp	r1, r3
     728:	dd09      	ble.n	73e <UART0IntHandler+0x56>
     72a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     72e:	3301      	adds	r3, #1
     730:	f515 7f81 	cmn.w	r5, #258	; 0x102
     734:	d1f7      	bne.n	726 <UART0IntHandler+0x3e>
     736:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     73a:	889b      	ldrh	r3, [r3, #4]
     73c:	8013      	strh	r3, [r2, #0]
     73e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     740:	e7ea      	b.n	718 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     742:	6823      	ldr	r3, [r4, #0]
     744:	0699      	lsls	r1, r3, #26
     746:	d424      	bmi.n	792 <UART0IntHandler+0xaa>
     748:	4b14      	ldr	r3, [pc, #80]	; (79c <UART0IntHandler+0xb4>)
     74a:	799a      	ldrb	r2, [r3, #6]
     74c:	0652      	lsls	r2, r2, #25
     74e:	d520      	bpl.n	792 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     750:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	799a      	ldrb	r2, [r3, #6]
     756:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     75a:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     75c:	4a10      	ldr	r2, [pc, #64]	; (7a0 <UART0IntHandler+0xb8>)
     75e:	7813      	ldrb	r3, [r2, #0]
     760:	f043 0302 	orr.w	r3, r3, #2
     764:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     766:	4b0f      	ldr	r3, [pc, #60]	; (7a4 <UART0IntHandler+0xbc>)
     768:	681a      	ldr	r2, [r3, #0]
     76a:	b192      	cbz	r2, 792 <UART0IntHandler+0xaa>
     76c:	4610      	mov	r0, r2
     76e:	2300      	movs	r3, #0
     770:	f830 1b10 	ldrh.w	r1, [r0], #16
     774:	f001 0107 	and.w	r1, r1, #7
     778:	4299      	cmp	r1, r3
     77a:	dd08      	ble.n	78e <UART0IntHandler+0xa6>
     77c:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     780:	3301      	adds	r3, #1
     782:	42a5      	cmp	r5, r4
     784:	d1f8      	bne.n	778 <UART0IntHandler+0x90>
     786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     78a:	889b      	ldrh	r3, [r3, #4]
     78c:	8013      	strh	r3, [r2, #0]
     78e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     790:	e7eb      	b.n	76a <UART0IntHandler+0x82>
	}

	RTNI;
}
     792:	bd30      	pop	{r4, r5, pc}
     794:	40001044 	andmi	r1, r0, r4, asr #32
     798:	40001018 	andmi	r1, r0, r8, lsl r0
     79c:	20000098 	mulcs	r0, r8, r0
     7a0:	200000ac 	andcs	r0, r0, ip, lsr #1
     7a4:	2000001c 	andcs	r0, r0, ip, lsl r0

000007a8 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     7a8:	b570      	push	{r4, r5, r6, lr}
     7aa:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     7ae:	4e0c      	ldr	r6, [pc, #48]	; (7e0 <__buttons_setirq+0x38>)
     7b0:	4d0c      	ldr	r5, [pc, #48]	; (7e4 <__buttons_setirq+0x3c>)
     7b2:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	4c0c      	ldr	r4, [pc, #48]	; (7e8 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     7b6:	0a1b      	lsrs	r3, r3, #8
     7b8:	fa01 f203 	lsl.w	r2, r1, r3
     7bc:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7be:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c2:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     7c6:	0a1b      	lsrs	r3, r3, #8
     7c8:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7ca:	01db      	lsls	r3, r3, #7
     7cc:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     7d0:	4322      	orrs	r2, r4
     7d2:	4323      	orrs	r3, r4
     7d4:	6010      	str	r0, [r2, #0]
     7d6:	6029      	str	r1, [r5, #0]
     7d8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     7da:	b662      	cpsie	i
			val;
	}
	sti;
}
     7dc:	bd70      	pop	{r4, r5, r6, pc}
     7de:	bf00      	nop
     7e0:	00002c70 	andeq	r2, r0, r0, ror ip
     7e4:	400220e0 	andmi	r2, r2, r0, ror #1
     7e8:	42000048 	andmi	r0, r0, #72	; 0x48

000007ec <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     7ee:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	2200      	movs	r2, #0
     7f2:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	4f09      	ldr	r7, [pc, #36]	; (81c <__pinlist_setirq+0x30>)
     7f6:	4c0a      	ldr	r4, [pc, #40]	; (820 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	490a      	ldr	r1, [pc, #40]	; (824 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7fa:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     802:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     806:	01db      	lsls	r3, r3, #7
     808:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     80c:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     80e:	2a04      	cmp	r2, #4
     810:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     812:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     814:	d1f1      	bne.n	7fa <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     816:	b662      	cpsie	i
			val;
	}
	sti;
}
     818:	bdf0      	pop	{r4, r5, r6, r7, pc}
     81a:	bf00      	nop
     81c:	00002c6c 	andeq	r2, r0, ip, ror #24
     820:	400220e0 	andmi	r2, r2, r0, ror #1
     824:	42000048 	andmi	r0, r0, #72	; 0x48

00000828 <GPIOIntHandler>:
void GPIOIntHandler () {
     828:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     82a:	4c23      	ldr	r4, [pc, #140]	; (8b8 <GPIOIntHandler+0x90>)
     82c:	6822      	ldr	r2, [r4, #0]
     82e:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     832:	d01e      	beq.n	872 <GPIOIntHandler+0x4a>
	buttons_disable ();
     834:	2000      	movs	r0, #0
     836:	f7ff ffb7 	bl	7a8 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     83a:	4b20      	ldr	r3, [pc, #128]	; (8bc <GPIOIntHandler+0x94>)
     83c:	4d20      	ldr	r5, [pc, #128]	; (8c0 <GPIOIntHandler+0x98>)
     83e:	681a      	ldr	r2, [r3, #0]
     840:	b192      	cbz	r2, 868 <GPIOIntHandler+0x40>
     842:	4610      	mov	r0, r2
     844:	2300      	movs	r3, #0
     846:	f830 1b10 	ldrh.w	r1, [r0], #16
     84a:	f001 0107 	and.w	r1, r1, #7
     84e:	4299      	cmp	r1, r3
     850:	dd08      	ble.n	864 <GPIOIntHandler+0x3c>
     852:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     856:	3301      	adds	r3, #1
     858:	42ae      	cmp	r6, r5
     85a:	d1f8      	bne.n	84e <GPIOIntHandler+0x26>
     85c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     860:	889b      	ldrh	r3, [r3, #4]
     862:	8013      	strh	r3, [r2, #0]
     864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     866:	e7eb      	b.n	840 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     868:	4a16      	ldr	r2, [pc, #88]	; (8c4 <GPIOIntHandler+0x9c>)
     86a:	7813      	ldrb	r3, [r2, #0]
     86c:	f043 0302 	orr.w	r3, r3, #2
     870:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     872:	6823      	ldr	r3, [r4, #0]
     874:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     878:	d01d      	beq.n	8b6 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     87a:	4b10      	ldr	r3, [pc, #64]	; (8bc <GPIOIntHandler+0x94>)
     87c:	4c12      	ldr	r4, [pc, #72]	; (8c8 <GPIOIntHandler+0xa0>)
     87e:	6818      	ldr	r0, [r3, #0]
     880:	b190      	cbz	r0, 8a8 <GPIOIntHandler+0x80>
     882:	4601      	mov	r1, r0
     884:	2300      	movs	r3, #0
     886:	f831 2b10 	ldrh.w	r2, [r1], #16
     88a:	f002 0207 	and.w	r2, r2, #7
     88e:	429a      	cmp	r2, r3
     890:	dd08      	ble.n	8a4 <GPIOIntHandler+0x7c>
     892:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     896:	3301      	adds	r3, #1
     898:	42a5      	cmp	r5, r4
     89a:	d1f8      	bne.n	88e <GPIOIntHandler+0x66>
     89c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     8a0:	889b      	ldrh	r3, [r3, #4]
     8a2:	8003      	strh	r3, [r0, #0]
     8a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     8a6:	e7eb      	b.n	880 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     8a8:	f7ff ffa0 	bl	7ec <__pinlist_setirq>
	RISE_N_SHINE;
     8ac:	4a05      	ldr	r2, [pc, #20]	; (8c4 <GPIOIntHandler+0x9c>)
     8ae:	7813      	ldrb	r3, [r2, #0]
     8b0:	f043 0302 	orr.w	r3, r3, #2
     8b4:	7013      	strb	r3, [r2, #0]
}
     8b6:	bd70      	pop	{r4, r5, r6, pc}
     8b8:	400220e0 	andmi	r2, r2, r0, ror #1
     8bc:	2000001c 	andcs	r0, r0, ip, lsl r0
     8c0:	00002c70 	andeq	r2, r0, r0, ror ip
     8c4:	200000ac 	andcs	r0, r0, ip, lsr #1
     8c8:	00002c6c 	andeq	r2, r0, ip, ror #24

000008cc <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	4c58      	ldr	r4, [pc, #352]	; (a34 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d2:	2004      	movs	r0, #4
     8d4:	f7ff fd0c 	bl	2f0 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	6823      	ldr	r3, [r4, #0]
     8da:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8de:	69db      	ldr	r3, [r3, #28]
     8e0:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e2:	6823      	ldr	r3, [r4, #0]
     8e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     8ea:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	6823      	ldr	r3, [r4, #0]
     8ee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     8f4:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8f6:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	2600      	movs	r6, #0
     8fa:	4c4f      	ldr	r4, [pc, #316]	; (a38 <system_init+0x16c>)
     8fc:	4f4f      	ldr	r7, [pc, #316]	; (a3c <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     8fe:	f8df c17c 	ldr.w	ip, [pc, #380]	; a7c <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     902:	f8df e17c 	ldr.w	lr, [pc, #380]	; a80 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     906:	f8df 8140 	ldr.w	r8, [pc, #320]	; a48 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     90a:	f8df 9134 	ldr.w	r9, [pc, #308]	; a40 <system_init+0x174>
     90e:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     916:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91a:	0091      	lsls	r1, r2, #2
     91c:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     920:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     924:	ea05 0a0c 	and.w	sl, r5, ip
     928:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     92c:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     92e:	bf44      	itt	mi
     930:	ea41 010e 	orrmi.w	r1, r1, lr
     934:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     936:	fa03 f202 	lsl.w	r2, r3, r2
     93a:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	bf4c      	ite	mi
     93e:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     942:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     946:	2e11      	cmp	r6, #17
     948:	d1e2      	bne.n	910 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94a:	2540      	movs	r5, #64	; 0x40
     94c:	2680      	movs	r6, #128	; 0x80
     94e:	4b3c      	ldr	r3, [pc, #240]	; (a40 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     950:	493c      	ldr	r1, [pc, #240]	; (a44 <system_init+0x178>)
     952:	601d      	str	r5, [r3, #0]
     954:	601e      	str	r6, [r3, #0]
     956:	780b      	ldrb	r3, [r1, #0]
     958:	780b      	ldrb	r3, [r1, #0]
     95a:	20c8      	movs	r0, #200	; 0xc8
     95c:	f36f 1307 	bfc	r3, #4, #4
     960:	700b      	strb	r3, [r1, #0]
     962:	f7ff fcaf 	bl	2c4 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     966:	4b38      	ldr	r3, [pc, #224]	; (a48 <system_init+0x17c>)
     968:	20c8      	movs	r0, #200	; 0xc8
     96a:	601d      	str	r5, [r3, #0]
     96c:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     96e:	2601      	movs	r6, #1
	all_leds_blink;
     970:	780b      	ldrb	r3, [r1, #0]
     972:	780b      	ldrb	r3, [r1, #0]
     974:	f36f 1307 	bfc	r3, #4, #4
     978:	700b      	strb	r3, [r1, #0]
     97a:	f7ff fca3 	bl	2c4 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     97e:	4b33      	ldr	r3, [pc, #204]	; (a4c <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	4a33      	ldr	r2, [pc, #204]	; (a50 <system_init+0x184>)
     982:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	4b33      	ldr	r3, [pc, #204]	; (a54 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     986:	4d34      	ldr	r5, [pc, #208]	; (a58 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     988:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98a:	4b34      	ldr	r3, [pc, #208]	; (a5c <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     98c:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98e:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     990:	682b      	ldr	r3, [r5, #0]
     992:	691b      	ldr	r3, [r3, #16]
     994:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     996:	f000 fb99 	bl	10cc <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     99a:	682b      	ldr	r3, [r5, #0]
     99c:	2010      	movs	r0, #16
     99e:	691b      	ldr	r3, [r3, #16]
     9a0:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a2:	2002      	movs	r0, #2
     9a4:	f7ff fca4 	bl	2f0 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	68ab      	ldr	r3, [r5, #8]
     9aa:	f44f 7000 	mov.w	r0, #512	; 0x200
     9ae:	69db      	ldr	r3, [r3, #28]
     9b0:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b2:	68ab      	ldr	r3, [r5, #8]
     9b4:	f44f 7000 	mov.w	r0, #512	; 0x200
     9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     9ba:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	68ab      	ldr	r3, [r5, #8]
     9be:	f44f 7000 	mov.w	r0, #512	; 0x200
     9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9c4:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     9c6:	2260      	movs	r2, #96	; 0x60
     9c8:	4b25      	ldr	r3, [pc, #148]	; (a60 <system_init+0x194>)
     9ca:	6026      	str	r6, [r4, #0]
     9cc:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     9ce:	f7ff fde7 	bl	5a0 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     9d2:	f000 fdcb 	bl	156c <ee_open>
     9d6:	f000 fdd3 	bl	1580 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9da:	f001 ff63 	bl	28a4 <NOROM_SysCtrlResetSourceGet>
     9de:	2808      	cmp	r0, #8
     9e0:	d11a      	bne.n	a18 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     9e2:	4b20      	ldr	r3, [pc, #128]	; (a64 <system_init+0x198>)
     9e4:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     9ea:	3b04      	subs	r3, #4
     9ec:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     9f2:	3324      	adds	r3, #36	; 0x24
     9f4:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     9f6:	2000      	movs	r0, #0
     9f8:	f7ff fc48 	bl	28c <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	4a1a      	ldr	r2, [pc, #104]	; (a68 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     9fe:	2015      	movs	r0, #21
     a00:	6813      	ldr	r3, [r2, #0]
     a02:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     a06:	6013      	str	r3, [r2, #0]
     a08:	4b13      	ldr	r3, [pc, #76]	; (a58 <system_init+0x18c>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	691b      	ldr	r3, [r3, #16]
     a0e:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     a10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     a14:	f7ff bcd4 	b.w	3c0 <tci_run_auxiliary_timer>
		diag ("");
     a18:	4814      	ldr	r0, [pc, #80]	; (a6c <system_init+0x1a0>)
     a1a:	f000 fc45 	bl	12a8 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a1e:	4814      	ldr	r0, [pc, #80]	; (a70 <system_init+0x1a4>)
     a20:	f000 fc42 	bl	12a8 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	4913      	ldr	r1, [pc, #76]	; (a74 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     a26:	4814      	ldr	r0, [pc, #80]	; (a78 <system_init+0x1ac>)
     a28:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     a2c:	b289      	uxth	r1, r1
     a2e:	f000 fc3b 	bl	12a8 <diag>
     a32:	e7e0      	b.n	9f6 <system_init+0x12a>
     a34:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     a38:	60082028 	andvs	r2, r8, r8, lsr #32
     a3c:	00002bf4 	strdeq	r2, [r0], -r4
     a40:	40022090 	mulmi	r2, r0, r0
     a44:	200000ac 	andcs	r0, r0, ip, lsr #1
     a48:	400220a0 	andmi	r2, r2, r0, lsr #1
     a4c:	40092024 	andmi	r2, r9, r4, lsr #32
     a50:	00050003 	andeq	r0, r5, r3
     a54:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     a58:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     a5c:	40092000 	andmi	r2, r9, r0
     a60:	20000018 	andcs	r0, r0, r8, lsl r0
     a64:	4009400c 	andmi	r4, r9, ip
     a68:	40001038 	andmi	r1, r0, r8, lsr r0
     a6c:	00002b57 	andeq	r2, r0, r7, asr fp
     a70:	00002b8b 	andeq	r2, r0, fp, lsl #23
     a74:	200000cc 	andcs	r0, r0, ip, asr #1
     a78:	00002bd7 	ldrdeq	r2, [r0], -r7
     a7c:	7f077f3f 	svcvc	0x00077f3f
     a80:	42441a00 	submi	r1, r4, #0, 20

00000a84 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     a84:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     a88:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a8a:	4b79      	ldr	r3, [pc, #484]	; (c70 <__pi_release+0x1ec>)
     a8c:	af00      	add	r7, sp, #0
     a8e:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     a92:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     a96:	681a      	ldr	r2, [r3, #0]
     a98:	4b76      	ldr	r3, [pc, #472]	; (c74 <__pi_release+0x1f0>)
     a9a:	429a      	cmp	r2, r3
     a9c:	d127      	bne.n	aee <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a9e:	4e76      	ldr	r6, [pc, #472]	; (c78 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     aa0:	2100      	movs	r1, #0
     aa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
     aa6:	f000 f9bb 	bl	e20 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     aaa:	4a74      	ldr	r2, [pc, #464]	; (c7c <__pi_release+0x1f8>)
     aac:	4b74      	ldr	r3, [pc, #464]	; (c80 <__pi_release+0x1fc>)
     aae:	6812      	ldr	r2, [r2, #0]
     ab0:	601a      	str	r2, [r3, #0]
     ab2:	681a      	ldr	r2, [r3, #0]
     ab4:	b9fa      	cbnz	r2, af6 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ab6:	4c73      	ldr	r4, [pc, #460]	; (c84 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     ab8:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     aba:	4d73      	ldr	r5, [pc, #460]	; (c88 <__pi_release+0x204>)
     abc:	782b      	ldrb	r3, [r5, #0]
     abe:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ac2:	0798      	lsls	r0, r3, #30
     ac4:	607a      	str	r2, [r7, #4]
     ac6:	f100 80cd 	bmi.w	c64 <__pi_release+0x1e0>
	system_event_count ++;
     aca:	4a70      	ldr	r2, [pc, #448]	; (c8c <__pi_release+0x208>)
     acc:	6813      	ldr	r3, [r2, #0]
     ace:	3301      	adds	r3, #1
     ad0:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     ad2:	78ea      	ldrb	r2, [r5, #3]
     ad4:	2a01      	cmp	r2, #1
     ad6:	b2d3      	uxtb	r3, r2
     ad8:	d017      	beq.n	b0a <__pi_release+0x86>
     ada:	2b02      	cmp	r3, #2
     adc:	d031      	beq.n	b42 <__pi_release+0xbe>
     ade:	2b00      	cmp	r3, #0
     ae0:	f040 8095 	bne.w	c0e <__pi_release+0x18a>
			__WFI ();
     ae4:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     ae6:	b662      	cpsie	i
     ae8:	bf00      	nop
     aea:	bf00      	nop
     aec:	e7e4      	b.n	ab8 <__pi_release+0x34>
	check_stack_overflow;
     aee:	200b      	movs	r0, #11
     af0:	4967      	ldr	r1, [pc, #412]	; (c90 <__pi_release+0x20c>)
     af2:	f7ff fc1b 	bl	32c <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af6:	6851      	ldr	r1, [r2, #4]
     af8:	b129      	cbz	r1, b06 <__pi_release+0x82>
     afa:	8810      	ldrh	r0, [r2, #0]
     afc:	0704      	lsls	r4, r0, #28
     afe:	d102      	bne.n	b06 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	0900      	lsrs	r0, r0, #4
     b02:	4788      	blx	r1
			goto Redo;
     b04:	e7cc      	b.n	aa0 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     b06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     b08:	e7d2      	b.n	ab0 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b0a:	4a62      	ldr	r2, [pc, #392]	; (c94 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b0e:	6813      	ldr	r3, [r2, #0]
     b10:	f043 0301 	orr.w	r3, r3, #1
     b14:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b16:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     b1a:	f043 0303 	orr.w	r3, r3, #3
     b1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b22:	4b5d      	ldr	r3, [pc, #372]	; (c98 <__pi_release+0x214>)
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	699b      	ldr	r3, [r3, #24]
     b28:	4798      	blx	r3
     b2a:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b2c:	6823      	ldr	r3, [r4, #0]
     b2e:	f043 0304 	orr.w	r3, r3, #4
     b32:	6023      	str	r3, [r4, #0]
			__WFI ();
     b34:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b36:	6823      	ldr	r3, [r4, #0]
     b38:	f023 0304 	bic.w	r3, r3, #4
     b3c:	6023      	str	r3, [r4, #0]
     b3e:	6833      	ldr	r3, [r6, #0]
}
     b40:	e7d1      	b.n	ae6 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b42:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b46:	687a      	ldr	r2, [r7, #4]
     b48:	4b54      	ldr	r3, [pc, #336]	; (c9c <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4a:	f8df b188 	ldr.w	fp, [pc, #392]	; cd4 <__pi_release+0x250>
     b4e:	601a      	str	r2, [r3, #0]
     b50:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b52:	f8df a144 	ldr.w	sl, [pc, #324]	; c98 <__pi_release+0x214>
     b56:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b5a:	6833      	ldr	r3, [r6, #0]
     b5c:	4b50      	ldr	r3, [pc, #320]	; (ca0 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b5e:	f8df 9178 	ldr.w	r9, [pc, #376]	; cd8 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b62:	f8c3 8000 	str.w	r8, [r3]
     b66:	6868      	ldr	r0, [r5, #4]
     b68:	f8da 3000 	ldr.w	r3, [sl]
     b6c:	f040 0020 	orr.w	r0, r0, #32
     b70:	699b      	ldr	r3, [r3, #24]
     b72:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	4b4b      	ldr	r3, [pc, #300]	; (ca4 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b76:	2103      	movs	r1, #3
     b78:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	f8d9 3000 	ldr.w	r3, [r9]
     b80:	4849      	ldr	r0, [pc, #292]	; (ca8 <__pi_release+0x224>)
     b82:	f023 0303 	bic.w	r3, r3, #3
     b86:	f8c9 3000 	str.w	r3, [r9]
     b8a:	4b48      	ldr	r3, [pc, #288]	; (cac <__pi_release+0x228>)
     b8c:	681a      	ldr	r2, [r3, #0]
     b8e:	6852      	ldr	r2, [r2, #4]
     b90:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     b92:	6878      	ldr	r0, [r7, #4]
     b94:	f001 fd46 	bl	2624 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     b98:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9a:	6822      	ldr	r2, [r4, #0]
     b9c:	f042 0204 	orr.w	r2, r2, #4
     ba0:	6022      	str	r2, [r4, #0]
			__WFI ();
     ba2:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ba6:	4b41      	ldr	r3, [pc, #260]	; (cac <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba8:	f022 0204 	bic.w	r2, r2, #4
     bac:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	4641      	mov	r1, r8
     bb2:	685b      	ldr	r3, [r3, #4]
     bb4:	483c      	ldr	r0, [pc, #240]	; (ca8 <__pi_release+0x224>)
     bb6:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	4a3c      	ldr	r2, [pc, #240]	; (cb0 <__pi_release+0x22c>)
     bbe:	f043 0303 	orr.w	r3, r3, #3
     bc2:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc6:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bca:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     bcc:	0699      	lsls	r1, r3, #26
     bce:	d5fc      	bpl.n	bca <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	f8da 3000 	ldr.w	r3, [sl]
     bd4:	6868      	ldr	r0, [r5, #4]
     bd6:	695b      	ldr	r3, [r3, #20]
     bd8:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bda:	4d2f      	ldr	r5, [pc, #188]	; (c98 <__pi_release+0x214>)
     bdc:	4b2a      	ldr	r3, [pc, #168]	; (c88 <__pi_release+0x204>)
     bde:	6858      	ldr	r0, [r3, #4]
     be0:	682b      	ldr	r3, [r5, #0]
     be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     be4:	4798      	blx	r3
     be6:	2801      	cmp	r0, #1
     be8:	d1f8      	bne.n	bdc <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     bea:	4b2d      	ldr	r3, [pc, #180]	; (ca0 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	4a2d      	ldr	r2, [pc, #180]	; (ca4 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     bee:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf0:	2300      	movs	r3, #0
     bf2:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bf4:	4b29      	ldr	r3, [pc, #164]	; (c9c <__pi_release+0x218>)
     bf6:	6018      	str	r0, [r3, #0]
     bf8:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfa:	f001 fe23 	bl	2844 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     bfe:	f7ff fccf 	bl	5a0 <reinit_uart>
     c02:	4a2c      	ldr	r2, [pc, #176]	; (cb4 <__pi_release+0x230>)
     c04:	6813      	ldr	r3, [r2, #0]
     c06:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     c0a:	6013      	str	r3, [r2, #0]
}
     c0c:	e76b      	b.n	ae6 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c0e:	4b2a      	ldr	r3, [pc, #168]	; (cb8 <__pi_release+0x234>)
     c10:	2001      	movs	r0, #1
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	68db      	ldr	r3, [r3, #12]
     c16:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	4a28      	ldr	r2, [pc, #160]	; (cbc <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c1a:	4929      	ldr	r1, [pc, #164]	; (cc0 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c1c:	6813      	ldr	r3, [r2, #0]
     c1e:	f023 0301 	bic.w	r3, r3, #1
     c22:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c24:	4b27      	ldr	r3, [pc, #156]	; (cc4 <__pi_release+0x240>)
     c26:	681a      	ldr	r2, [r3, #0]
     c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     c2c:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c2e:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     c32:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	604a      	str	r2, [r1, #4]
     c36:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	687a      	ldr	r2, [r7, #4]
     c3a:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c3c:	687a      	ldr	r2, [r7, #4]
     c3e:	4b22      	ldr	r3, [pc, #136]	; (cc8 <__pi_release+0x244>)
     c40:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c42:	2201      	movs	r2, #1
     c44:	4b21      	ldr	r3, [pc, #132]	; (ccc <__pi_release+0x248>)
     c46:	601a      	str	r2, [r3, #0]
     c48:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4a:	4a19      	ldr	r2, [pc, #100]	; (cb0 <__pi_release+0x22c>)
     c4c:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c4e:	069b      	lsls	r3, r3, #26
     c50:	d4fc      	bmi.n	c4c <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c52:	2201      	movs	r2, #1
     c54:	4b1e      	ldr	r3, [pc, #120]	; (cd0 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     c56:	2037      	movs	r0, #55	; 0x37
     c58:	601a      	str	r2, [r3, #0]
     c5a:	4b0f      	ldr	r3, [pc, #60]	; (c98 <__pi_release+0x214>)
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	699b      	ldr	r3, [r3, #24]
     c60:	4798      	blx	r3
			goto DeepSleep;
     c62:	e763      	b.n	b2c <__pi_release+0xa8>
	__SLEEP;
     c64:	782b      	ldrb	r3, [r5, #0]
     c66:	f36f 0341 	bfc	r3, #1, #1
     c6a:	702b      	strb	r3, [r5, #0]
     c6c:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     c6e:	e717      	b.n	aa0 <__pi_release+0x1c>
     c70:	20005000 	andcs	r5, r0, r0
     c74:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     c78:	4009202c 	andmi	r2, r9, ip, lsr #32
     c7c:	2000001c 	andcs	r0, r0, ip, lsl r0
     c80:	200000c8 	andcs	r0, r0, r8, asr #1
     c84:	e000ed10 	and	lr, r0, r0, lsl sp
     c88:	200000ac 	andcs	r0, r0, ip, lsr #1
     c8c:	200000a0 	andcs	r0, r0, r0, lsr #1
     c90:	00002bee 	andeq	r2, r0, lr, ror #23
     c94:	4008218c 	andmi	r2, r8, ip, lsl #3
     c98:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     c9c:	4009400c 	andmi	r4, r9, ip
     ca0:	60082028 	andvs	r2, r8, r8, lsr #32
     ca4:	43040180 	movwmi	r0, #16768	; 0x4180
     ca8:	40034000 	andmi	r4, r3, r0
     cac:	100001d8 	ldrdne	r0, [r0], -r8
     cb0:	40091014 	andmi	r1, r9, r4, lsl r0
     cb4:	40001038 	andmi	r1, r0, r8, lsr r0
     cb8:	100001a0 	andne	r0, r0, r0, lsr #3
     cbc:	40091010 	andmi	r1, r9, r0, lsl r0
     cc0:	40093000 	andmi	r3, r9, r0
     cc4:	40091040 	andmi	r1, r9, r0, asr #32
     cc8:	43220420 			; <UNDEFINED> instruction: 0x43220420
     ccc:	40091018 	andmi	r1, r9, r8, lsl r0
     cd0:	43040188 	movwmi	r0, #16776	; 0x4188
     cd4:	43220200 			; <UNDEFINED> instruction: 0x43220200
     cd8:	40082224 	andmi	r2, r8, r4, lsr #4

00000cdc <main>:

#include "scheduler.h"

}

int main (void) {
     cdc:	b510      	push	{r4, lr}
     cde:	4b11      	ldr	r3, [pc, #68]	; (d24 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	4911      	ldr	r1, [pc, #68]	; (d28 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce2:	4a12      	ldr	r2, [pc, #72]	; (d2c <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce4:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	4293      	cmp	r3, r2
     cea:	d1fb      	bne.n	ce4 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	4c10      	ldr	r4, [pc, #64]	; (d30 <main+0x54>)
	system_init ();
     cee:	f7ff fded 	bl	8cc <system_init>
	tcv_init ();
     cf2:	f000 fb77 	bl	13e4 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf6:	6823      	ldr	r3, [r4, #0]
     cf8:	2129      	movs	r1, #41	; 0x29
     cfa:	2000      	movs	r0, #0
     cfc:	681b      	ldr	r3, [r3, #0]
     cfe:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	6823      	ldr	r3, [r4, #0]
     d02:	2120      	movs	r1, #32
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	2001      	movs	r0, #1
     d08:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0a:	2100      	movs	r1, #0
     d0c:	4809      	ldr	r0, [pc, #36]	; (d34 <main+0x58>)
     d0e:	f000 faa5 	bl	125c <__pi_fork>
     d12:	4b09      	ldr	r3, [pc, #36]	; (d38 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     d14:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d16:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     d18:	2010      	movs	r0, #16
     d1a:	f000 f937 	bl	f8c <delay>
     d1e:	b662      	cpsie	i

	sti;

	__pi_release ();
     d20:	f7ff feb0 	bl	a84 <__pi_release>
     d24:	20004bfc 	strdcs	r4, [r0], -ip
     d28:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     d2c:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     d30:	10000184 	andne	r0, r0, r4, lsl #3
     d34:	00000161 	andeq	r0, r0, r1, ror #2
     d38:	200000c8 	andcs	r0, r0, r8, asr #1

00000d3c <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     d3c:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     d3e:	4b0d      	ldr	r3, [pc, #52]	; (d74 <killev+0x38>)
	wfun = (aword)(pid->code);
     d40:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     d42:	681a      	ldr	r2, [r3, #0]
     d44:	b1aa      	cbz	r2, d72 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     d46:	4614      	mov	r4, r2
     d48:	f834 1b10 	ldrh.w	r1, [r4], #16
     d4c:	2300      	movs	r3, #0
     d4e:	f001 0107 	and.w	r1, r1, #7
     d52:	e001      	b.n	d58 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     d54:	42b5      	cmp	r5, r6
     d56:	d006      	beq.n	d66 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     d58:	4299      	cmp	r1, r3
     d5a:	dd08      	ble.n	d6e <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     d5c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     d60:	3301      	adds	r3, #1
     d62:	42a8      	cmp	r0, r5
     d64:	d1f6      	bne.n	d54 <killev+0x18>
			    ) {
				wakeupev (i, j);
     d66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     d6a:	889b      	ldrh	r3, [r3, #4]
     d6c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     d6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     d70:	e7e8      	b.n	d44 <killev+0x8>
				break;
			}
		}
	}
}
     d72:	bd70      	pop	{r4, r5, r6, pc}
     d74:	2000001c 	andcs	r0, r0, ip, lsl r0

00000d78 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	4a1d      	ldr	r2, [pc, #116]	; (df0 <qfree+0x78>)
static void qfree (aword *ch) {
     d7a:	b530      	push	{r4, r5, lr}
     d7c:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d7e:	6813      	ldr	r3, [r2, #0]
     d80:	b93b      	cbnz	r3, d92 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     d82:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     d84:	4a1a      	ldr	r2, [pc, #104]	; (df0 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     d86:	bb53      	cbnz	r3, dde <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     d88:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     d8a:	4b1a      	ldr	r3, [pc, #104]	; (df4 <qfree+0x7c>)
	m_setnextp (cc, ch);
     d8c:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     d8e:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     d90:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d92:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     d96:	3101      	adds	r1, #1
     d98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     d9c:	4288      	cmp	r0, r1
     d9e:	d10b      	bne.n	db8 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     da0:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     da2:	f850 0c04 	ldr.w	r0, [r0, #-4]
     da6:	f853 1c04 	ldr.w	r1, [r3, #-4]
     daa:	4401      	add	r1, r0
     dac:	4618      	mov	r0, r3
     dae:	3101      	adds	r1, #1
     db0:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	e7e3      	b.n	d80 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     db8:	f850 1c04 	ldr.w	r1, [r0, #-4]
     dbc:	3101      	adds	r1, #1
     dbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     dc2:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     dc4:	bf03      	ittte	eq
     dc6:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     dcc:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     dd0:	461a      	movne	r2, r3
     dd2:	bf02      	ittt	eq
     dd4:	1949      	addeq	r1, r1, r5
     dd6:	3101      	addeq	r1, #1
     dd8:	f840 1c04 	streq.w	r1, [r0, #-4]
     ddc:	e7ea      	b.n	db4 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     dde:	f853 4c04 	ldr.w	r4, [r3, #-4]
     de2:	f850 1c04 	ldr.w	r1, [r0, #-4]
     de6:	428c      	cmp	r4, r1
     de8:	d2ce      	bcs.n	d88 <qfree+0x10>
		chunk = m_nextp (chunk))
     dea:	461a      	mov	r2, r3
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	e7ca      	b.n	d86 <qfree+0xe>
     df0:	20000030 	andcs	r0, r0, r0, lsr r0
     df4:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000df8 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	4a03      	ldr	r2, [pc, #12]	; (e08 <dgout+0x10>)
     dfa:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     dfc:	071b      	lsls	r3, r3, #28
     dfe:	d4fc      	bmi.n	dfa <dgout+0x2>
	diag_wchar (c, a);
     e00:	4b02      	ldr	r3, [pc, #8]	; (e0c <dgout+0x14>)
     e02:	b2c0      	uxtb	r0, r0
     e04:	6018      	str	r0, [r3, #0]
}
     e06:	4770      	bx	lr
     e08:	40001018 	andmi	r1, r0, r8, lsl r0
     e0c:	40001000 	andmi	r1, r0, r0

00000e10 <__pi_badstate>:
	syserror (ESTATE, "state");
     e10:	2007      	movs	r0, #7
void __pi_badstate (void) {
     e12:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     e14:	4901      	ldr	r1, [pc, #4]	; (e1c <__pi_badstate+0xc>)
     e16:	f7ff fa89 	bl	32c <__pi_syserror>
     e1a:	bf00      	nop
     e1c:	00002c38 	andeq	r2, r0, r8, lsr ip

00000e20 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e22:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	4608      	mov	r0, r1
     e26:	f7ff fb69 	bl	4fc <tci_update_delay_ticks>
     e2a:	2800      	cmp	r0, #0
     e2c:	d154      	bne.n	ed8 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e2e:	4b2b      	ldr	r3, [pc, #172]	; (edc <update_n_wake+0xbc>)
     e30:	4d2b      	ldr	r5, [pc, #172]	; (ee0 <update_n_wake+0xc0>)
     e32:	8819      	ldrh	r1, [r3, #0]
     e34:	882a      	ldrh	r2, [r5, #0]
     e36:	b289      	uxth	r1, r1
     e38:	428a      	cmp	r2, r1
     e3a:	492a      	ldr	r1, [pc, #168]	; (ee4 <update_n_wake+0xc4>)
     e3c:	d803      	bhi.n	e46 <update_n_wake+0x26>
     e3e:	8808      	ldrh	r0, [r1, #0]
     e40:	b280      	uxth	r0, r0
     e42:	4282      	cmp	r2, r0
     e44:	d20d      	bcs.n	e62 <update_n_wake+0x42>
     e46:	881e      	ldrh	r6, [r3, #0]
     e48:	8808      	ldrh	r0, [r1, #0]
     e4a:	b2b6      	uxth	r6, r6
     e4c:	b280      	uxth	r0, r0
     e4e:	4286      	cmp	r6, r0
     e50:	d236      	bcs.n	ec0 <update_n_wake+0xa0>
     e52:	8818      	ldrh	r0, [r3, #0]
     e54:	b280      	uxth	r0, r0
     e56:	4282      	cmp	r2, r0
     e58:	d903      	bls.n	e62 <update_n_wake+0x42>
     e5a:	8808      	ldrh	r0, [r1, #0]
     e5c:	b280      	uxth	r0, r0
     e5e:	4282      	cmp	r2, r0
     e60:	d32e      	bcc.n	ec0 <update_n_wake+0xa0>
		for_all_tasks (i) {
     e62:	4a21      	ldr	r2, [pc, #132]	; (ee8 <update_n_wake+0xc8>)
     e64:	6810      	ldr	r0, [r2, #0]
     e66:	b918      	cbnz	r0, e70 <update_n_wake+0x50>
	__pi_mintk = znew + min;
     e68:	8818      	ldrh	r0, [r3, #0]
     e6a:	4404      	add	r4, r0
     e6c:	802c      	strh	r4, [r5, #0]
     e6e:	e02c      	b.n	eca <update_n_wake+0xaa>
			if (!twaiting (i))
     e70:	8806      	ldrh	r6, [r0, #0]
     e72:	0732      	lsls	r2, r6, #28
     e74:	d51b      	bpl.n	eae <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e76:	881f      	ldrh	r7, [r3, #0]
     e78:	8842      	ldrh	r2, [r0, #2]
     e7a:	b2bf      	uxth	r7, r7
     e7c:	42ba      	cmp	r2, r7
     e7e:	d803      	bhi.n	e88 <update_n_wake+0x68>
     e80:	880f      	ldrh	r7, [r1, #0]
     e82:	b2bf      	uxth	r7, r7
     e84:	42ba      	cmp	r2, r7
     e86:	d20f      	bcs.n	ea8 <update_n_wake+0x88>
     e88:	f8b3 c000 	ldrh.w	ip, [r3]
     e8c:	880f      	ldrh	r7, [r1, #0]
     e8e:	fa1f fc8c 	uxth.w	ip, ip
     e92:	b2bf      	uxth	r7, r7
     e94:	45bc      	cmp	ip, r7
     e96:	d20c      	bcs.n	eb2 <update_n_wake+0x92>
     e98:	881f      	ldrh	r7, [r3, #0]
     e9a:	b2bf      	uxth	r7, r7
     e9c:	42ba      	cmp	r2, r7
     e9e:	d903      	bls.n	ea8 <update_n_wake+0x88>
     ea0:	880f      	ldrh	r7, [r1, #0]
     ea2:	b2bf      	uxth	r7, r7
     ea4:	42ba      	cmp	r2, r7
     ea6:	d304      	bcc.n	eb2 <update_n_wake+0x92>
				wakeuptm (i);
     ea8:	f026 060f 	bic.w	r6, r6, #15
     eac:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
     eae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     eb0:	e7d9      	b.n	e66 <update_n_wake+0x46>
				d = i->Timer - znew;
     eb2:	881e      	ldrh	r6, [r3, #0]
     eb4:	1b92      	subs	r2, r2, r6
     eb6:	b292      	uxth	r2, r2
     eb8:	4294      	cmp	r4, r2
     eba:	bf28      	it	cs
     ebc:	4614      	movcs	r4, r2
     ebe:	e7f6      	b.n	eae <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	8818      	ldrh	r0, [r3, #0]
     ec2:	1a12      	subs	r2, r2, r0
     ec4:	b292      	uxth	r2, r2
     ec6:	4294      	cmp	r4, r2
     ec8:	d9ce      	bls.n	e68 <update_n_wake+0x48>
	__pi_old = znew;
     eca:	881b      	ldrh	r3, [r3, #0]
     ecc:	b29b      	uxth	r3, r3
     ece:	800b      	strh	r3, [r1, #0]
}
     ed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
     ed4:	f7ff ba54 	b.w	380 <tci_run_delay_timer>
}
     ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eda:	bf00      	nop
     edc:	200000b4 	strhcs	r0, [r0], -r4
     ee0:	200000a8 	andcs	r0, r0, r8, lsr #1
     ee4:	200000aa 	andcs	r0, r0, sl, lsr #1
     ee8:	2000001c 	andcs	r0, r0, ip, lsl r0

00000eec <proceed>:
void proceed (word state) {
     eec:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <proceed+0x10>)
     ef0:	0100      	lsls	r0, r0, #4
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	8018      	strh	r0, [r3, #0]
	release;
     ef6:	f7ff fdc5 	bl	a84 <__pi_release>
     efa:	bf00      	nop
     efc:	200000c8 	andcs	r0, r0, r8, asr #1

00000f00 <__pi_wait>:
void __pi_wait (aword event, word state) {
     f00:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
     f02:	4b0a      	ldr	r3, [pc, #40]	; (f2c <__pi_wait+0x2c>)
     f04:	681c      	ldr	r4, [r3, #0]
     f06:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
     f08:	f013 0f04 	tst.w	r3, #4
     f0c:	f003 0207 	and.w	r2, r3, #7
     f10:	d003      	beq.n	f1a <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
     f12:	2005      	movs	r0, #5
     f14:	4906      	ldr	r1, [pc, #24]	; (f30 <__pi_wait+0x30>)
     f16:	f7ff fa09 	bl	32c <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
     f1a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     f1e:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
     f20:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
     f22:	8191      	strh	r1, [r2, #12]
     f24:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
     f26:	8023      	strh	r3, [r4, #0]
}
     f28:	bd10      	pop	{r4, pc}
     f2a:	bf00      	nop
     f2c:	200000c8 	andcs	r0, r0, r8, asr #1
     f30:	00002c3e 	andeq	r2, r0, lr, lsr ip

00000f34 <__pi_trigger>:
void __pi_trigger (aword event) {
     f34:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
     f36:	4b0b      	ldr	r3, [pc, #44]	; (f64 <__pi_trigger+0x30>)
     f38:	681a      	ldr	r2, [r3, #0]
     f3a:	b192      	cbz	r2, f62 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
     f3c:	4614      	mov	r4, r2
     f3e:	2300      	movs	r3, #0
     f40:	f834 1b10 	ldrh.w	r1, [r4], #16
     f44:	f001 0107 	and.w	r1, r1, #7
     f48:	4299      	cmp	r1, r3
     f4a:	dd08      	ble.n	f5e <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
     f4c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f50:	3301      	adds	r3, #1
     f52:	4285      	cmp	r5, r0
     f54:	d1f8      	bne.n	f48 <__pi_trigger+0x14>
				wakeupev (i, j);
     f56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f5a:	889b      	ldrh	r3, [r3, #4]
     f5c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f60:	e7eb      	b.n	f3a <__pi_trigger+0x6>
}
     f62:	bd30      	pop	{r4, r5, pc}
     f64:	2000001c 	andcs	r0, r0, ip, lsl r0

00000f68 <__pi_join>:
aword __pi_join (aword pid, word st) {
     f68:	b510      	push	{r4, lr}
     f6a:	4604      	mov	r4, r0
	for_all_tasks (i) {
     f6c:	4b06      	ldr	r3, [pc, #24]	; (f88 <__pi_join+0x20>)
     f6e:	681b      	ldr	r3, [r3, #0]
     f70:	b90b      	cbnz	r3, f76 <__pi_join+0xe>
	return 0;
     f72:	461c      	mov	r4, r3
     f74:	e004      	b.n	f80 <__pi_join+0x18>
		if ((aword)i == pid) {
     f76:	42a3      	cmp	r3, r4
     f78:	d104      	bne.n	f84 <__pi_join+0x1c>
			__pi_wait (pid, st);
     f7a:	4620      	mov	r0, r4
     f7c:	f7ff ffc0 	bl	f00 <__pi_wait>
}
     f80:	4620      	mov	r0, r4
     f82:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
     f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f86:	e7f3      	b.n	f70 <__pi_join+0x8>
     f88:	2000001c 	andcs	r0, r0, ip, lsl r0

00000f8c <delay>:
void delay (word d, word state) {
     f8c:	b538      	push	{r3, r4, r5, lr}
     f8e:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
     f90:	4d0a      	ldr	r5, [pc, #40]	; (fbc <delay+0x30>)
     f92:	682a      	ldr	r2, [r5, #0]
     f94:	8813      	ldrh	r3, [r2, #0]
     f96:	f003 0307 	and.w	r3, r3, #7
     f9a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     f9e:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
     fa0:	2101      	movs	r1, #1
     fa2:	f7ff ff3d 	bl	e20 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
     fa6:	4b06      	ldr	r3, [pc, #24]	; (fc0 <delay+0x34>)
     fa8:	8818      	ldrh	r0, [r3, #0]
     faa:	682b      	ldr	r3, [r5, #0]
     fac:	4404      	add	r4, r0
     fae:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
     fb0:	682a      	ldr	r2, [r5, #0]
     fb2:	8813      	ldrh	r3, [r2, #0]
     fb4:	f043 0308 	orr.w	r3, r3, #8
     fb8:	8013      	strh	r3, [r2, #0]
}
     fba:	bd38      	pop	{r3, r4, r5, pc}
     fbc:	200000c8 	andcs	r0, r0, r8, asr #1
     fc0:	200000aa 	andcs	r0, r0, sl, lsr #1

00000fc4 <running>:
	if (fun == NULL)
     fc4:	4603      	mov	r3, r0
     fc6:	b910      	cbnz	r0, fce <running+0xa>
		return (int) __pi_curr;
     fc8:	4b05      	ldr	r3, [pc, #20]	; (fe0 <running+0x1c>)
     fca:	6818      	ldr	r0, [r3, #0]
     fcc:	4770      	bx	lr
	for_all_tasks (i)
     fce:	4a05      	ldr	r2, [pc, #20]	; (fe4 <running+0x20>)
     fd0:	6810      	ldr	r0, [r2, #0]
     fd2:	b900      	cbnz	r0, fd6 <running+0x12>
}
     fd4:	4770      	bx	lr
		if (i->code == fun)
     fd6:	6842      	ldr	r2, [r0, #4]
     fd8:	429a      	cmp	r2, r3
     fda:	d0fb      	beq.n	fd4 <running+0x10>
	for_all_tasks (i)
     fdc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     fde:	e7f8      	b.n	fd2 <running+0xe>
     fe0:	200000c8 	andcs	r0, r0, r8, asr #1
     fe4:	2000001c 	andcs	r0, r0, ip, lsl r0

00000fe8 <__pi_strlen>:
int __pi_strlen (const char *s) {
     fe8:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
     fea:	2000      	movs	r0, #0
     fec:	5c1a      	ldrb	r2, [r3, r0]
     fee:	b902      	cbnz	r2, ff2 <__pi_strlen+0xa>
}
     ff0:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
     ff2:	3001      	adds	r0, #1
     ff4:	e7fa      	b.n	fec <__pi_strlen+0x4>

00000ff6 <__pi_memcpy>:
	while (n--)
     ff6:	3801      	subs	r0, #1
     ff8:	440a      	add	r2, r1
     ffa:	4291      	cmp	r1, r2
     ffc:	d100      	bne.n	1000 <__pi_memcpy+0xa>
}
     ffe:	4770      	bx	lr
		*dest++ = *src++;
    1000:	f811 3b01 	ldrb.w	r3, [r1], #1
    1004:	f800 3f01 	strb.w	r3, [r0, #1]!
    1008:	e7f7      	b.n	ffa <__pi_memcpy+0x4>
	...

0000100c <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    100c:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    100e:	b119      	cbz	r1, 1018 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1010:	2003      	movs	r0, #3
    1012:	4905      	ldr	r1, [pc, #20]	; (1028 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1014:	f7ff f98a 	bl	32c <__pi_syserror>
	if (ioreq [loc] != NULL)
    1018:	4b04      	ldr	r3, [pc, #16]	; (102c <adddevfunc+0x20>)
    101a:	681a      	ldr	r2, [r3, #0]
    101c:	b112      	cbz	r2, 1024 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    101e:	2004      	movs	r0, #4
    1020:	4901      	ldr	r1, [pc, #4]	; (1028 <adddevfunc+0x1c>)
    1022:	e7f7      	b.n	1014 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1024:	6018      	str	r0, [r3, #0]
}
    1026:	bd08      	pop	{r3, pc}
    1028:	00002c41 	andeq	r2, r0, r1, asr #24
    102c:	20000020 	andcs	r0, r0, r0, lsr #32

00001030 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1034:	4604      	mov	r4, r0
    1036:	4616      	mov	r6, r2
    1038:	461d      	mov	r5, r3
    103a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    103e:	b921      	cbnz	r1, 104a <io+0x1a>
    1040:	f8df 9084 	ldr.w	r9, [pc, #132]	; 10c8 <io+0x98>
    1044:	f8d9 3000 	ldr.w	r3, [r9]
    1048:	b91b      	cbnz	r3, 1052 <io+0x22>
		syserror (ENODEVICE, "io");
    104a:	2001      	movs	r0, #1
    104c:	491d      	ldr	r1, [pc, #116]	; (10c4 <io+0x94>)
    104e:	f7ff f96d 	bl	32c <__pi_syserror>
	if (len == 0)
    1052:	f1b8 0f00 	cmp.w	r8, #0
    1056:	d028      	beq.n	10aa <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	4642      	mov	r2, r8
    105a:	4629      	mov	r1, r5
    105c:	4630      	mov	r0, r6
    105e:	4798      	blx	r3
	if (ret >= 0)
    1060:	2800      	cmp	r0, #0
    1062:	da23      	bge.n	10ac <io+0x7c>
	if (ret == -1) {
    1064:	1c41      	adds	r1, r0, #1
    1066:	f64f 73ff 	movw	r3, #65535	; 0xffff
    106a:	d108      	bne.n	107e <io+0x4e>
		if (retry == WNONE)
    106c:	429c      	cmp	r4, r3
    106e:	d01c      	beq.n	10aa <io+0x7a>
		iowait (dev, operation, retry);
    1070:	4621      	mov	r1, r4
    1072:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1076:	f7ff ff43 	bl	f00 <__pi_wait>
			release;
    107a:	f7ff fd03 	bl	a84 <__pi_release>
	if (ret == -2) {
    107e:	1c82      	adds	r2, r0, #2
    1080:	d116      	bne.n	10b0 <io+0x80>
		if (retry != WNONE) {
    1082:	429c      	cmp	r4, r3
    1084:	f8d9 9000 	ldr.w	r9, [r9]
    1088:	d00a      	beq.n	10a0 <io+0x70>
			iowait (dev, operation, retry);
    108a:	4621      	mov	r1, r4
    108c:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1090:	f7ff ff36 	bl	f00 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1094:	4642      	mov	r2, r8
    1096:	4629      	mov	r1, r5
    1098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    109c:	47c8      	blx	r9
    109e:	e7ec      	b.n	107a <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    10a0:	4642      	mov	r2, r8
    10a2:	4629      	mov	r1, r5
    10a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10a8:	47c8      	blx	r9
		return 0;
    10aa:	2000      	movs	r0, #0
}
    10ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    10b0:	429c      	cmp	r4, r3
    10b2:	d0fa      	beq.n	10aa <io+0x7a>
		delay (-ret - 2, retry);
    10b4:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    10b8:	30fe      	adds	r0, #254	; 0xfe
    10ba:	4621      	mov	r1, r4
    10bc:	b280      	uxth	r0, r0
    10be:	f7ff ff65 	bl	f8c <delay>
		release;
    10c2:	e7da      	b.n	107a <io+0x4a>
    10c4:	00002c46 	andeq	r2, r0, r6, asr #24
    10c8:	20000020 	andcs	r0, r0, r0, lsr #32

000010cc <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	4a0d      	ldr	r2, [pc, #52]	; (1104 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    10ce:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d0:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    10d4:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    10d8:	089b      	lsrs	r3, r3, #2
    10da:	1e59      	subs	r1, r3, #1
    10dc:	29ff      	cmp	r1, #255	; 0xff
    10de:	d803      	bhi.n	10e8 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    10e0:	2004      	movs	r0, #4
    10e2:	4909      	ldr	r1, [pc, #36]	; (1108 <__pi_malloc_init+0x3c>)
    10e4:	f7ff f922 	bl	32c <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	4908      	ldr	r1, [pc, #32]	; (110c <__pi_malloc_init+0x40>)
    10ea:	1d10      	adds	r0, r2, #4
    10ec:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10ee:	2000      	movs	r0, #0
    10f0:	4907      	ldr	r1, [pc, #28]	; (1110 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f2:	3b02      	subs	r3, #2
    10f4:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f6:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    10fa:	4a06      	ldr	r2, [pc, #24]	; (1114 <__pi_malloc_init+0x48>)
    10fc:	6013      	str	r3, [r2, #0]
    10fe:	4a06      	ldr	r2, [pc, #24]	; (1118 <__pi_malloc_init+0x4c>)
    1100:	6013      	str	r3, [r2, #0]
}
    1102:	bd08      	pop	{r3, pc}
    1104:	200000cc 	andcs	r0, r0, ip, asr #1
    1108:	00002c49 	andeq	r2, r0, r9, asr #24
    110c:	20000030 	andcs	r0, r0, r0, lsr r0
    1110:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1114:	20000024 	andcs	r0, r0, r4, lsr #32
    1118:	2000002c 	andcs	r0, r0, ip, lsr #32

0000111c <__pi_free>:
void __pi_free (aword *ch) {
    111c:	b508      	push	{r3, lr}
	if (ch == NULL)
    111e:	b1c8      	cbz	r0, 1154 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1120:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1124:	2b00      	cmp	r3, #0
    1126:	db03      	blt.n	1130 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1128:	2006      	movs	r0, #6
    112a:	490b      	ldr	r1, [pc, #44]	; (1158 <__pi_free+0x3c>)
    112c:	f7ff f8fe 	bl	32c <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1130:	490a      	ldr	r1, [pc, #40]	; (115c <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1132:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1136:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1138:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    113c:	4413      	add	r3, r2
    113e:	600b      	str	r3, [r1, #0]
	QFREE;
    1140:	f7ff fe1a 	bl	d78 <qfree>
	if (mevent [MA_NP] . nwait) {
    1144:	4806      	ldr	r0, [pc, #24]	; (1160 <__pi_free+0x44>)
    1146:	7803      	ldrb	r3, [r0, #0]
    1148:	b123      	cbz	r3, 1154 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    114a:	f7ff fef3 	bl	f34 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    114e:	7803      	ldrb	r3, [r0, #0]
    1150:	3b01      	subs	r3, #1
    1152:	7003      	strb	r3, [r0, #0]
}
    1154:	bd08      	pop	{r3, pc}
    1156:	bf00      	nop
    1158:	00002c4e 	andeq	r2, r0, lr, asr #24
    115c:	20000024 	andcs	r0, r0, r4, lsr #32
    1160:	20000028 	andcs	r0, r0, r8, lsr #32

00001164 <kill>:
void kill (aword pid) {
    1164:	b510      	push	{r4, lr}
	if (pid == 0)
    1166:	b908      	cbnz	r0, 116c <kill+0x8>
		pid = (aword) __pi_curr;
    1168:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <kill+0x44>)
    116a:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    116c:	2200      	movs	r2, #0
	for_all_tasks (i) {
    116e:	4b0f      	ldr	r3, [pc, #60]	; (11ac <kill+0x48>)
    1170:	681c      	ldr	r4, [r3, #0]
    1172:	b91c      	cbnz	r4, 117c <kill+0x18>
	syserror (EREQPAR, "kpi");
    1174:	2003      	movs	r0, #3
    1176:	490e      	ldr	r1, [pc, #56]	; (11b0 <kill+0x4c>)
    1178:	f7ff f8d8 	bl	32c <__pi_syserror>
		if ((aword)i == pid) {
    117c:	4284      	cmp	r4, r0
    117e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1180:	d10e      	bne.n	11a0 <kill+0x3c>
			if (j == NULL)
    1182:	b95a      	cbnz	r2, 119c <kill+0x38>
				__PCB = i->Next;
    1184:	6019      	str	r1, [r3, #0]
			killev (i);
    1186:	4620      	mov	r0, r4
    1188:	f7ff fdd8 	bl	d3c <killev>
			ufree (i);
    118c:	f7ff ffc6 	bl	111c <__pi_free>
			if (i == __pi_curr)
    1190:	4b05      	ldr	r3, [pc, #20]	; (11a8 <kill+0x44>)
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	42a3      	cmp	r3, r4
    1196:	d106      	bne.n	11a6 <kill+0x42>
				release;
    1198:	f7ff fc74 	bl	a84 <__pi_release>
				j->Next = i->Next;
    119c:	62d1      	str	r1, [r2, #44]	; 0x2c
    119e:	e7f2      	b.n	1186 <kill+0x22>
    11a0:	4622      	mov	r2, r4
    11a2:	460c      	mov	r4, r1
    11a4:	e7e5      	b.n	1172 <kill+0xe>
}
    11a6:	bd10      	pop	{r4, pc}
    11a8:	200000c8 	andcs	r0, r0, r8, asr #1
    11ac:	2000001c 	andcs	r0, r0, ip, lsl r0
    11b0:	00002c53 	andeq	r2, r0, r3, asr ip

000011b4 <__pi_malloc>:
	if (size < 8)
    11b4:	2807      	cmp	r0, #7
		_size = 2;
    11b6:	bf98      	it	ls
    11b8:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    11ba:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	4b21      	ldr	r3, [pc, #132]	; (1244 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    11be:	bf88      	it	hi
    11c0:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c2:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    11c4:	4920      	ldr	r1, [pc, #128]	; (1248 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    11c6:	bf88      	it	hi
    11c8:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11ca:	b94c      	cbnz	r4, 11e0 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    11cc:	4a1f      	ldr	r2, [pc, #124]	; (124c <__pi_malloc+0x98>)
    11ce:	7853      	ldrb	r3, [r2, #1]
    11d0:	2bff      	cmp	r3, #255	; 0xff
    11d2:	d001      	beq.n	11d8 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    11d4:	3301      	adds	r3, #1
    11d6:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    11d8:	2200      	movs	r2, #0
    11da:	4b1d      	ldr	r3, [pc, #116]	; (1250 <__pi_malloc+0x9c>)
    11dc:	601a      	str	r2, [r3, #0]
	return chunk;
    11de:	e02f      	b.n	1240 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    11e0:	6862      	ldr	r2, [r4, #4]
    11e2:	428a      	cmp	r2, r1
    11e4:	d003      	beq.n	11ee <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    11e6:	2006      	movs	r0, #6
    11e8:	491a      	ldr	r1, [pc, #104]	; (1254 <__pi_malloc+0xa0>)
    11ea:	f7ff f89f 	bl	32c <__pi_syserror>
		if (m_size (chunk) >= _size)
    11ee:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    11f2:	4285      	cmp	r5, r0
    11f4:	d202      	bcs.n	11fc <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    11f6:	4623      	mov	r3, r4
    11f8:	4614      	mov	r4, r2
    11fa:	e7e6      	b.n	11ca <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    11fc:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    11fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1202:	1a1b      	subs	r3, r3, r0
    1204:	2b08      	cmp	r3, #8
    1206:	d909      	bls.n	121c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1208:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    120c:	3001      	adds	r0, #1
    120e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1212:	3b01      	subs	r3, #1
    1214:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1218:	f7ff fdae 	bl	d78 <qfree>
		mevent [MA_NP] . nfail = 0;
    121c:	2200      	movs	r2, #0
    121e:	4b0b      	ldr	r3, [pc, #44]	; (124c <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1220:	490d      	ldr	r1, [pc, #52]	; (1258 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1222:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1224:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1228:	680b      	ldr	r3, [r1, #0]
    122a:	1a9b      	subs	r3, r3, r2
    122c:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    122e:	4908      	ldr	r1, [pc, #32]	; (1250 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1230:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1236:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    123a:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	bf38      	it	cc
    123e:	600b      	strcc	r3, [r1, #0]
}
    1240:	4620      	mov	r0, r4
    1242:	bd38      	pop	{r3, r4, r5, pc}
    1244:	20000030 	andcs	r0, r0, r0, lsr r0
    1248:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    124c:	20000028 	andcs	r0, r0, r8, lsr #32
    1250:	2000002c 	andcs	r0, r0, ip, lsr #32
    1254:	00002c57 	andeq	r2, r0, r7, asr ip
    1258:	20000024 	andcs	r0, r0, r4, lsr #32

0000125c <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    125c:	b538      	push	{r3, r4, r5, lr}
    125e:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1262:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1264:	f7ff ffa6 	bl	11b4 <__pi_malloc>
    1268:	2300      	movs	r3, #0
    126a:	b138      	cbz	r0, 127c <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    126c:	4a07      	ldr	r2, [pc, #28]	; (128c <__pi_fork+0x30>)
	i->Status = 0;
    126e:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1270:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1272:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1274:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1278:	b90b      	cbnz	r3, 127e <__pi_fork+0x22>
			__PCB = i;
    127a:	6010      	str	r0, [r2, #0]
}
    127c:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    127e:	461a      	mov	r2, r3
    1280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1282:	2b00      	cmp	r3, #0
    1284:	d1fb      	bne.n	127e <__pi_fork+0x22>
			j->Next = i;
    1286:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1288:	e7f8      	b.n	127c <__pi_fork+0x20>
    128a:	bf00      	nop
    128c:	2000001c 	andcs	r0, r0, ip, lsl r0

00001290 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1290:	4a04      	ldr	r2, [pc, #16]	; (12a4 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1292:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1294:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1296:	4803      	ldr	r0, [pc, #12]	; (12a4 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1298:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    129a:	bf1c      	itt	ne
    129c:	3301      	addne	r3, #1
    129e:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	f7ff be2e 	b.w	f00 <__pi_wait>
    12a4:	20000028 	andcs	r0, r0, r8, lsr #32

000012a8 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    12a8:	b40f      	push	{r0, r1, r2, r3}
    12aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    12ae:	ab0a      	add	r3, sp, #40	; 0x28
    12b0:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    12b4:	2015      	movs	r0, #21
	va_start (ap, mess);
    12b6:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    12b8:	4b46      	ldr	r3, [pc, #280]	; (13d4 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    12ba:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    12bc:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    12be:	f8df 811c 	ldr.w	r8, [pc, #284]	; 13dc <diag+0x134>
	diag_disable_int (a, is);
    12c2:	695b      	ldr	r3, [r3, #20]
    12c4:	4798      	blx	r3
	while (*mess != '\0') {
    12c6:	7820      	ldrb	r0, [r4, #0]
    12c8:	b998      	cbnz	r0, 12f2 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    12ca:	200d      	movs	r0, #13
    12cc:	f7ff fd94 	bl	df8 <dgout>
	dgout ('\n');
    12d0:	200a      	movs	r0, #10
    12d2:	f7ff fd91 	bl	df8 <dgout>
    12d6:	4a40      	ldr	r2, [pc, #256]	; (13d8 <diag+0x130>)
    12d8:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    12da:	071b      	lsls	r3, r3, #28
    12dc:	d4fc      	bmi.n	12d8 <diag+0x30>
	diag_enable_int (a, is);
    12de:	4b3d      	ldr	r3, [pc, #244]	; (13d4 <diag+0x12c>)
    12e0:	2015      	movs	r0, #21
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	691b      	ldr	r3, [r3, #16]
    12e6:	4798      	blx	r3
}
    12e8:	b003      	add	sp, #12
    12ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12ee:	b004      	add	sp, #16
    12f0:	4770      	bx	lr
		if (*mess == '%') {
    12f2:	2825      	cmp	r0, #37	; 0x25
    12f4:	f104 0601 	add.w	r6, r4, #1
    12f8:	d169      	bne.n	13ce <diag+0x126>
			if (*mess == 'l') {
    12fa:	9b01      	ldr	r3, [sp, #4]
    12fc:	7862      	ldrb	r2, [r4, #1]
    12fe:	f853 1b04 	ldr.w	r1, [r3], #4
    1302:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1304:	bf08      	it	eq
    1306:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1308:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    130a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    130c:	bf0c      	ite	eq
    130e:	2520      	moveq	r5, #32
				bc = 16;
    1310:	2510      	movne	r5, #16
			switch (*mess) {
    1312:	2b75      	cmp	r3, #117	; 0x75
    1314:	d04e      	beq.n	13b4 <diag+0x10c>
    1316:	d80a      	bhi.n	132e <diag+0x86>
    1318:	2b64      	cmp	r3, #100	; 0x64
    131a:	d01c      	beq.n	1356 <diag+0xae>
    131c:	2b73      	cmp	r3, #115	; 0x73
    131e:	d052      	beq.n	13c6 <diag+0x11e>
				dgout ('%');
    1320:	2025      	movs	r0, #37	; 0x25
    1322:	f7ff fd69 	bl	df8 <dgout>
				dgout (*mess);
    1326:	7830      	ldrb	r0, [r6, #0]
    1328:	f7ff fd66 	bl	df8 <dgout>
    132c:	e010      	b.n	1350 <diag+0xa8>
			switch (*mess) {
    132e:	2b78      	cmp	r3, #120	; 0x78
    1330:	d1f6      	bne.n	1320 <diag+0x78>
    1332:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1334:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 13e0 <diag+0x138>
					i += 4;
    1338:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    133a:	1b2b      	subs	r3, r5, r4
    133c:	fa21 f303 	lsr.w	r3, r1, r3
    1340:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1344:	f819 0003 	ldrb.w	r0, [r9, r3]
    1348:	f7ff fd56 	bl	df8 <dgout>
				while (i < bc) {
    134c:	42a5      	cmp	r5, r4
    134e:	dcf3      	bgt.n	1338 <diag+0x90>
			mess++;
    1350:	3601      	adds	r6, #1
					d /= 10;
    1352:	4634      	mov	r4, r6
    1354:	e7b7      	b.n	12c6 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1356:	1e6b      	subs	r3, r5, #1
    1358:	fa21 f303 	lsr.w	r3, r1, r3
    135c:	07da      	lsls	r2, r3, #31
    135e:	d509      	bpl.n	1374 <diag+0xcc>
					dgout ('-');
    1360:	202d      	movs	r0, #45	; 0x2d
    1362:	f7ff fd49 	bl	df8 <dgout>
					if (bc == 16)
    1366:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1368:	bf04      	itt	eq
    136a:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    136e:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1372:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1374:	f242 7410 	movw	r4, #10000	; 0x2710
    1378:	2d10      	cmp	r5, #16
    137a:	bf18      	it	ne
    137c:	4644      	movne	r4, r8
					v = (word) (val / d);
    137e:	fbb1 f5f4 	udiv	r5, r1, r4
    1382:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1384:	b935      	cbnz	r5, 1394 <diag+0xec>
    1386:	2c01      	cmp	r4, #1
    1388:	d004      	beq.n	1394 <diag+0xec>
					d /= 10;
    138a:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    138e:	e7f6      	b.n	137e <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1390:	4c12      	ldr	r4, [pc, #72]	; (13dc <diag+0x134>)
    1392:	e7f4      	b.n	137e <diag+0xd6>
					dgout (v + '0');
    1394:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1398:	b280      	uxth	r0, r0
    139a:	f7ff fd2d 	bl	df8 <dgout>
					if (d == 0) break;
    139e:	2c09      	cmp	r4, #9
					d /= 10;
    13a0:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    13a4:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    13a8:	d9d2      	bls.n	1350 <diag+0xa8>
					v = (word) (val / d);
    13aa:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    13ae:	461c      	mov	r4, r3
					v = (word) (val / d);
    13b0:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    13b2:	e7ef      	b.n	1394 <diag+0xec>
				if (bc == 16)
    13b4:	2d10      	cmp	r5, #16
    13b6:	d1eb      	bne.n	1390 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    13bc:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    13be:	e7de      	b.n	137e <diag+0xd6>
					dgout (*s);
    13c0:	f7ff fd1a 	bl	df8 <dgout>
					s++;
    13c4:	3101      	adds	r1, #1
				while (*s != '\0') {
    13c6:	7808      	ldrb	r0, [r1, #0]
    13c8:	2800      	cmp	r0, #0
    13ca:	d1f9      	bne.n	13c0 <diag+0x118>
    13cc:	e7c0      	b.n	1350 <diag+0xa8>
			dgout (*mess++);
    13ce:	f7ff fd13 	bl	df8 <dgout>
    13d2:	e7be      	b.n	1352 <diag+0xaa>
    13d4:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    13d8:	40001018 	andmi	r1, r0, r8, lsl r0
    13dc:	3b9aca00 	blcc	fe6b3be4 <_estack+0xde6aebe4>
    13e0:	00002c5c 	andeq	r2, r0, ip, asr ip

000013e4 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    13e4:	4770      	bx	lr

000013e6 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    13e6:	e7fe      	b.n	13e6 <NmiSR>

000013e8 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    13e8:	e7fe      	b.n	13e8 <FaultISR>

000013ea <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    13ea:	e7fe      	b.n	13ea <AONIntHandler>

000013ec <ResetISR>:
{
    13ec:	b508      	push	{r3, lr}
    SetupTrimDevice();
    13ee:	f000 fddb 	bl	1fa8 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f2:	4b0c      	ldr	r3, [pc, #48]	; (1424 <zero_loop+0x20>)
    pui32Src = &_etext;
    13f4:	4a0c      	ldr	r2, [pc, #48]	; (1428 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f6:	490d      	ldr	r1, [pc, #52]	; (142c <zero_loop+0x28>)
    13f8:	428b      	cmp	r3, r1
    13fa:	d30d      	bcc.n	1418 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    13fc:	480c      	ldr	r0, [pc, #48]	; (1430 <zero_loop+0x2c>)
    13fe:	490d      	ldr	r1, [pc, #52]	; (1434 <zero_loop+0x30>)
    1400:	f04f 0200 	mov.w	r2, #0

00001404 <zero_loop>:
    1404:	4288      	cmp	r0, r1
    1406:	bfb8      	it	lt
    1408:	f840 2b04 	strlt.w	r2, [r0], #4
    140c:	dbfa      	blt.n	1404 <zero_loop>
   main();
    140e:	f7ff fc65 	bl	cdc <main>
    FaultISR();
    1412:	f7ff ffe9 	bl	13e8 <FaultISR>
}
    1416:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1418:	f852 0b04 	ldr.w	r0, [r2], #4
    141c:	f843 0b04 	str.w	r0, [r3], #4
    1420:	e7ea      	b.n	13f8 <ResetISR+0xc>
    1422:	bf00      	nop
    1424:	20000000 	andcs	r0, r0, r0
    1428:	00002c74 	andeq	r2, r0, r4, ror ip
    142c:	20000000 	andcs	r0, r0, r0
    1430:	20000000 	andcs	r0, r0, r0
    1434:	200000cc 	andcs	r0, r0, ip, asr #1

00001438 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1438:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    143a:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1440:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1442:	4907      	ldr	r1, [pc, #28]	; (1460 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1444:	4d07      	ldr	r5, [pc, #28]	; (1464 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1446:	4c08      	ldr	r4, [pc, #32]	; (1468 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1448:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    144a:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    144c:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    144e:	b2c0      	uxtb	r0, r0
			b |= 1;
    1450:	bf48      	it	mi
    1452:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1456:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1458:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    145a:	600a      	str	r2, [r1, #0]
    145c:	d1f4      	bne.n	1448 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    145e:	bd70      	pop	{r4, r5, r6, pc}
    1460:	400220a0 	andmi	r2, r2, r0, lsr #1
    1464:	400220c0 	andmi	r2, r2, r0, asr #1
    1468:	40022090 	mulmi	r2, r0, r0

0000146c <put_byte>:

static void put_byte (byte b) {
    146c:	b530      	push	{r4, r5, lr}
    146e:	2308      	movs	r3, #8
    1470:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1474:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1478:	4c06      	ldr	r4, [pc, #24]	; (1494 <put_byte+0x28>)
    147a:	4a07      	ldr	r2, [pc, #28]	; (1498 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    147c:	f010 0f80 	tst.w	r0, #128	; 0x80
    1480:	bf14      	ite	ne
    1482:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1484:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1486:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1488:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    148a:	6021      	str	r1, [r4, #0]
		b <<= 1;
    148c:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    148e:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1490:	d1f4      	bne.n	147c <put_byte+0x10>
	}
}
    1492:	bd30      	pop	{r4, r5, pc}
    1494:	40022090 	mulmi	r2, r0, r0
    1498:	400220a0 	andmi	r2, r2, r0, lsr #1

0000149c <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    149c:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    149e:	b510      	push	{r4, lr}
    14a0:	4c03      	ldr	r4, [pc, #12]	; (14b0 <cmd_0+0x14>)
    14a2:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    14a4:	f7ff ffe2 	bl	146c <put_byte>
    14a8:	2300      	movs	r3, #0
    14aa:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    14ac:	bd10      	pop	{r4, pc}
    14ae:	bf00      	nop
    14b0:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000014b4 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    14b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14b8:	4604      	mov	r4, r0
    14ba:	460d      	mov	r5, r1
    14bc:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    14be:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1504 <wwait+0x50>
    14c2:	4e0f      	ldr	r6, [pc, #60]	; (1500 <wwait+0x4c>)
    14c4:	f898 3000 	ldrb.w	r3, [r8]
    14c8:	b14b      	cbz	r3, 14de <wwait+0x2a>
	put_byte (CMD_RDSR);
    14ca:	2005      	movs	r0, #5
    14cc:	6037      	str	r7, [r6, #0]
    14ce:	f7ff ffcd 	bl	146c <put_byte>
	r = get_byte ();
    14d2:	f7ff ffb1 	bl	1438 <get_byte>
    14d6:	2300      	movs	r3, #0
    14d8:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    14da:	07c3      	lsls	r3, r0, #31
    14dc:	d401      	bmi.n	14e2 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    14de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    14e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    14e6:	429c      	cmp	r4, r3
    14e8:	d103      	bne.n	14f2 <wwait+0x3e>
			mdelay (1);
    14ea:	2001      	movs	r0, #1
    14ec:	f7fe feea 	bl	2c4 <mdelay>
    14f0:	e7e8      	b.n	14c4 <wwait+0x10>
			delay (del, st);
    14f2:	4621      	mov	r1, r4
    14f4:	4628      	mov	r0, r5
    14f6:	f7ff fd49 	bl	f8c <delay>
			release;
    14fa:	f7ff fac3 	bl	a84 <__pi_release>
    14fe:	bf00      	nop
    1500:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1504:	20000034 	andcs	r0, r0, r4, lsr r0

00001508 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    150a:	4d0c      	ldr	r5, [pc, #48]	; (153c <ready+0x34>)
    150c:	782f      	ldrb	r7, [r5, #0]
    150e:	b147      	cbz	r7, 1522 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1510:	2101      	movs	r1, #1
    1512:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1516:	f7ff ffcd 	bl	14b4 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    151a:	2200      	movs	r2, #0
    151c:	4b08      	ldr	r3, [pc, #32]	; (1540 <ready+0x38>)
    151e:	701a      	strb	r2, [r3, #0]
}
    1520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1522:	2401      	movs	r4, #1
    1524:	4e07      	ldr	r6, [pc, #28]	; (1544 <ready+0x3c>)
	udelay (1);
    1526:	4620      	mov	r0, r4
    1528:	6034      	str	r4, [r6, #0]
    152a:	f7fe feb5 	bl	298 <udelay>
	udelay (1);
    152e:	4620      	mov	r0, r4
    1530:	6037      	str	r7, [r6, #0]
    1532:	f7fe feb1 	bl	298 <udelay>
		dopen = DOPEN_TEMP;
    1536:	2302      	movs	r3, #2
    1538:	702b      	strb	r3, [r5, #0]
    153a:	e7ee      	b.n	151a <ready+0x12>
    153c:	20000034 	andcs	r0, r0, r4, lsr r0
    1540:	20000035 	andcs	r0, r0, r5, lsr r0
    1544:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001548 <cclose>:
static void cclose () {
    1548:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    154a:	4c07      	ldr	r4, [pc, #28]	; (1568 <cclose+0x20>)
    154c:	7823      	ldrb	r3, [r4, #0]
    154e:	2b02      	cmp	r3, #2
    1550:	d109      	bne.n	1566 <cclose+0x1e>
		wwait (WNONE, 1);
    1552:	2101      	movs	r1, #1
    1554:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1558:	f7ff ffac 	bl	14b4 <wwait>
	cmd_0 (CMD_DP);
    155c:	20b9      	movs	r0, #185	; 0xb9
    155e:	f7ff ff9d 	bl	149c <cmd_0>
		dopen = 0;
    1562:	2300      	movs	r3, #0
    1564:	7023      	strb	r3, [r4, #0]
}
    1566:	bd10      	pop	{r4, pc}
    1568:	20000034 	andcs	r0, r0, r4, lsr r0

0000156c <ee_open>:

// ============================================================================

word ee_open () {
    156c:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    156e:	f7ff ffcb 	bl	1508 <ready>
	dopen = DOPEN_PERM;
    1572:	2201      	movs	r2, #1
    1574:	4b01      	ldr	r3, [pc, #4]	; (157c <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1576:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1578:	701a      	strb	r2, [r3, #0]
}
    157a:	bd08      	pop	{r3, pc}
    157c:	20000034 	andcs	r0, r0, r4, lsr r0

00001580 <ee_close>:

void ee_close () {

	if (dopen) {
    1580:	4b03      	ldr	r3, [pc, #12]	; (1590 <ee_close+0x10>)
    1582:	781a      	ldrb	r2, [r3, #0]
    1584:	b11a      	cbz	r2, 158e <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1586:	2202      	movs	r2, #2
    1588:	701a      	strb	r2, [r3, #0]
		cclose ();
    158a:	f7ff bfdd 	b.w	1548 <cclose>
	}
}
    158e:	4770      	bx	lr
    1590:	20000034 	andcs	r0, r0, r4, lsr r0

00001594 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1596:	4604      	mov	r4, r0
    1598:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    159a:	4615      	mov	r5, r2
    159c:	b37a      	cbz	r2, 15fe <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    159e:	4e19      	ldr	r6, [pc, #100]	; (1604 <ser_in+0x70>)
    15a0:	6830      	ldr	r0, [r6, #0]
    15a2:	b988      	cbnz	r0, 15c8 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    15a4:	4818      	ldr	r0, [pc, #96]	; (1608 <ser_in+0x74>)
    15a6:	f7ff fd0d 	bl	fc4 <running>
    15aa:	b948      	cbnz	r0, 15c0 <ser_in+0x2c>
			prcs = runthread (__inserial);
    15ac:	4601      	mov	r1, r0
    15ae:	4816      	ldr	r0, [pc, #88]	; (1608 <ser_in+0x74>)
    15b0:	f7ff fe54 	bl	125c <__pi_fork>
			if (prcs == 0) {
    15b4:	b920      	cbnz	r0, 15c0 <ser_in+0x2c>
				npwait (st);
    15b6:	4620      	mov	r0, r4
    15b8:	f7ff fe6a 	bl	1290 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    15bc:	f7ff fa62 	bl	a84 <__pi_release>
		join (prcs, st);
    15c0:	4621      	mov	r1, r4
    15c2:	f7ff fcd1 	bl	f68 <__pi_join>
    15c6:	e7f9      	b.n	15bc <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    15c8:	7803      	ldrb	r3, [r0, #0]
    15ca:	b9a3      	cbnz	r3, 15f6 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15cc:	7844      	ldrb	r4, [r0, #1]
    15ce:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    15d0:	42ac      	cmp	r4, r5
		prcs = len-1;
    15d2:	bfa8      	it	ge
    15d4:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    15d8:	4622      	mov	r2, r4
    15da:	4638      	mov	r0, r7
    15dc:	6831      	ldr	r1, [r6, #0]
    15de:	f7ff fd0a 	bl	ff6 <__pi_memcpy>
	ufree (__inpline);
    15e2:	6830      	ldr	r0, [r6, #0]
    15e4:	f7ff fd9a 	bl	111c <__pi_free>
	__inpline = NULL;
    15e8:	2300      	movs	r3, #0
    15ea:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    15ec:	783a      	ldrb	r2, [r7, #0]
    15ee:	b102      	cbz	r2, 15f2 <ser_in+0x5e>
		buf [prcs] = '\0';
    15f0:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    15f2:	4620      	mov	r0, r4
    15f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    15f6:	f7ff fcf7 	bl	fe8 <__pi_strlen>
    15fa:	4604      	mov	r4, r0
    15fc:	e7e8      	b.n	15d0 <ser_in+0x3c>
		return 0;
    15fe:	4614      	mov	r4, r2
    1600:	e7f7      	b.n	15f2 <ser_in+0x5e>
    1602:	bf00      	nop
    1604:	20000040 	andcs	r0, r0, r0, asr #32
    1608:	00001731 	andeq	r1, r0, r1, lsr r7

0000160c <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    160c:	b40e      	push	{r1, r2, r3}
    160e:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1610:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1612:	4812      	ldr	r0, [pc, #72]	; (165c <ser_outf+0x50>)
    1614:	f7ff fcd6 	bl	fc4 <running>
    1618:	4606      	mov	r6, r0
    161a:	b120      	cbz	r0, 1626 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    161c:	4621      	mov	r1, r4
    161e:	f7ff fca3 	bl	f68 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1622:	f7ff fa2f 	bl	a84 <__pi_release>
	va_start (ap, m);
    1626:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1628:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    162a:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    162c:	f000 fa36 	bl	1a9c <vform>
    1630:	4605      	mov	r5, r0
    1632:	b918      	cbnz	r0, 163c <ser_outf+0x30>
		umwait (st);
    1634:	4620      	mov	r0, r4
    1636:	f7ff fe2b 	bl	1290 <__pi_waitmem>
    163a:	e7f2      	b.n	1622 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    163c:	4601      	mov	r1, r0
    163e:	4807      	ldr	r0, [pc, #28]	; (165c <ser_outf+0x50>)
    1640:	f7ff fe0c 	bl	125c <__pi_fork>
    1644:	b918      	cbnz	r0, 164e <ser_outf+0x42>
		ufree (buf);
    1646:	4628      	mov	r0, r5
    1648:	f7ff fd68 	bl	111c <__pi_free>
		npwait (st);
    164c:	e7f2      	b.n	1634 <ser_outf+0x28>
		release;
	}

	return 0;
}
    164e:	4630      	mov	r0, r6
    1650:	b003      	add	sp, #12
    1652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1656:	b003      	add	sp, #12
    1658:	4770      	bx	lr
    165a:	bf00      	nop
    165c:	000016c1 	andeq	r1, r0, r1, asr #13

00001660 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1660:	b40e      	push	{r1, r2, r3}
    1662:	b533      	push	{r0, r1, r4, r5, lr}
    1664:	9905      	ldr	r1, [sp, #20]
    1666:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1668:	b321      	cbz	r1, 16b4 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    166a:	4d13      	ldr	r5, [pc, #76]	; (16b8 <ser_inf+0x58>)
    166c:	6828      	ldr	r0, [r5, #0]
    166e:	b988      	cbnz	r0, 1694 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1670:	4812      	ldr	r0, [pc, #72]	; (16bc <ser_inf+0x5c>)
    1672:	f7ff fca7 	bl	fc4 <running>
    1676:	b948      	cbnz	r0, 168c <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1678:	4601      	mov	r1, r0
    167a:	4810      	ldr	r0, [pc, #64]	; (16bc <ser_inf+0x5c>)
    167c:	f7ff fdee 	bl	125c <__pi_fork>
			if (prcs == 0) {
    1680:	b920      	cbnz	r0, 168c <ser_inf+0x2c>
				npwait (st);
    1682:	4620      	mov	r0, r4
    1684:	f7ff fe04 	bl	1290 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1688:	f7ff f9fc 	bl	a84 <__pi_release>
		join (prcs, st);
    168c:	4621      	mov	r1, r4
    168e:	f7ff fc6b 	bl	f68 <__pi_join>
    1692:	e7f9      	b.n	1688 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1694:	aa06      	add	r2, sp, #24
    1696:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1698:	f000 fa28 	bl	1aec <vscan>
    169c:	4604      	mov	r4, r0

	ufree (__inpline);
    169e:	6828      	ldr	r0, [r5, #0]
    16a0:	f7ff fd3c 	bl	111c <__pi_free>
	__inpline = NULL;
    16a4:	2300      	movs	r3, #0
    16a6:	602b      	str	r3, [r5, #0]

	return prcs;
}
    16a8:	4620      	mov	r0, r4
    16aa:	b002      	add	sp, #8
    16ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    16b0:	b003      	add	sp, #12
    16b2:	4770      	bx	lr
		return 0;
    16b4:	460c      	mov	r4, r1
    16b6:	e7f7      	b.n	16a8 <ser_inf+0x48>
    16b8:	20000040 	andcs	r0, r0, r0, asr #32
    16bc:	00001731 	andeq	r1, r0, r1, lsr r7

000016c0 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    16c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16c2:	4b18      	ldr	r3, [pc, #96]	; (1724 <__outserial+0x64>)
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	689d      	ldr	r5, [r3, #8]
    16c8:	b130      	cbz	r0, 16d8 <__outserial+0x18>
    16ca:	280a      	cmp	r0, #10
    16cc:	d00d      	beq.n	16ea <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    16ce:	b003      	add	sp, #12
    16d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16d4:	f7ff bb9c 	b.w	e10 <__pi_badstate>
	ptr = data;
    16d8:	4b13      	ldr	r3, [pc, #76]	; (1728 <__outserial+0x68>)
    16da:	4c14      	ldr	r4, [pc, #80]	; (172c <__outserial+0x6c>)
    16dc:	601d      	str	r5, [r3, #0]
	if (*ptr)
    16de:	782b      	ldrb	r3, [r5, #0]
    16e0:	b1e3      	cbz	r3, 171c <__outserial+0x5c>
		len = strlen (ptr);
    16e2:	4628      	mov	r0, r5
    16e4:	f7ff fc80 	bl	fe8 <__pi_strlen>
    16e8:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16ea:	4e0f      	ldr	r6, [pc, #60]	; (1728 <__outserial+0x68>)
    16ec:	4f0f      	ldr	r7, [pc, #60]	; (172c <__outserial+0x6c>)
    16ee:	883b      	ldrh	r3, [r7, #0]
    16f0:	2201      	movs	r2, #1
    16f2:	9300      	str	r3, [sp, #0]
    16f4:	2100      	movs	r1, #0
    16f6:	6833      	ldr	r3, [r6, #0]
    16f8:	200a      	movs	r0, #10
    16fa:	f7ff fc99 	bl	1030 <io>
	ptr += quant;
    16fe:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1700:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    1702:	4403      	add	r3, r0
	len -= quant;
    1704:	1a24      	subs	r4, r4, r0
	ptr += quant;
    1706:	6033      	str	r3, [r6, #0]
	len -= quant;
    1708:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    170a:	2c00      	cmp	r4, #0
    170c:	d1ef      	bne.n	16ee <__outserial+0x2e>
		ufree (data);
    170e:	4628      	mov	r0, r5
    1710:	f7ff fd04 	bl	111c <__pi_free>
		finish;
    1714:	4620      	mov	r0, r4
    1716:	f7ff fd25 	bl	1164 <kill>
    171a:	e7e8      	b.n	16ee <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    171c:	786b      	ldrb	r3, [r5, #1]
    171e:	3303      	adds	r3, #3
    1720:	6023      	str	r3, [r4, #0]
    1722:	e7e2      	b.n	16ea <__outserial+0x2a>
    1724:	200000c8 	andcs	r0, r0, r8, asr #1
    1728:	2000003c 	andcs	r0, r0, ip, lsr r0
    172c:	20000038 	andcs	r0, r0, r8, lsr r0

00001730 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    1730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1732:	4d42      	ldr	r5, [pc, #264]	; (183c <__inserial+0x10c>)
    1734:	682a      	ldr	r2, [r5, #0]
    1736:	6894      	ldr	r4, [r2, #8]
    1738:	2803      	cmp	r0, #3
    173a:	d87a      	bhi.n	1832 <__inserial+0x102>
    173c:	e8df f000 	tbb	[pc, r0]
    1740:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    1744:	4b3e      	ldr	r3, [pc, #248]	; (1840 <__inserial+0x110>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	b113      	cbz	r3, 1750 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    174a:	2000      	movs	r0, #0
    174c:	f7ff fd0a 	bl	1164 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1750:	2040      	movs	r0, #64	; 0x40
    1752:	f7ff fd2f 	bl	11b4 <__pi_malloc>
    1756:	4b3b      	ldr	r3, [pc, #236]	; (1844 <__inserial+0x114>)
    1758:	4604      	mov	r4, r0
    175a:	6018      	str	r0, [r3, #0]
    175c:	b918      	cbnz	r0, 1766 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    175e:	f7ff fd97 	bl	1290 <__pi_waitmem>
		release;
    1762:	f7ff f98f 	bl	a84 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    1766:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    1768:	682b      	ldr	r3, [r5, #0]
    176a:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    176c:	4b36      	ldr	r3, [pc, #216]	; (1848 <__inserial+0x118>)
    176e:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    1770:	2001      	movs	r0, #1
    1772:	2200      	movs	r2, #0
    1774:	4d33      	ldr	r5, [pc, #204]	; (1844 <__inserial+0x114>)
    1776:	9000      	str	r0, [sp, #0]
    1778:	682b      	ldr	r3, [r5, #0]
    177a:	4611      	mov	r1, r2
    177c:	f7ff fc58 	bl	1030 <io>
	if (ptr == (char*) data) { // new line
    1780:	682b      	ldr	r3, [r5, #0]
    1782:	42a3      	cmp	r3, r4
    1784:	d10d      	bne.n	17a2 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    1786:	7823      	ldrb	r3, [r4, #0]
    1788:	b923      	cbnz	r3, 1794 <__inserial+0x64>
			ptr++;
    178a:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    178c:	2002      	movs	r0, #2
			ptr++;
    178e:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    1790:	f7ff fbac 	bl	eec <proceed>
		}

		if (*ptr < 0x20)
    1794:	682b      	ldr	r3, [r5, #0]
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	2b1f      	cmp	r3, #31
    179a:	d802      	bhi.n	17a2 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    179c:	2001      	movs	r0, #1
    179e:	f7ff fba5 	bl	eec <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    17a2:	682b      	ldr	r3, [r5, #0]
    17a4:	781a      	ldrb	r2, [r3, #0]
    17a6:	2a0a      	cmp	r2, #10
    17a8:	d001      	beq.n	17ae <__inserial+0x7e>
    17aa:	2a0d      	cmp	r2, #13
    17ac:	d105      	bne.n	17ba <__inserial+0x8a>
		*ptr = '\0';
    17ae:	2000      	movs	r0, #0
    17b0:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    17b2:	4b23      	ldr	r3, [pc, #140]	; (1840 <__inserial+0x110>)
    17b4:	601c      	str	r4, [r3, #0]
		finish;
    17b6:	f7ff fcd5 	bl	1164 <kill>
	}

	if (len) {
    17ba:	4923      	ldr	r1, [pc, #140]	; (1848 <__inserial+0x118>)
    17bc:	680b      	ldr	r3, [r1, #0]
    17be:	b123      	cbz	r3, 17ca <__inserial+0x9a>
		ptr++;
    17c0:	682a      	ldr	r2, [r5, #0]
		len--;
    17c2:	3b01      	subs	r3, #1
		ptr++;
    17c4:	3201      	adds	r2, #1
    17c6:	602a      	str	r2, [r5, #0]
		len--;
    17c8:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    17ca:	2001      	movs	r0, #1
    17cc:	f7ff fb8e 	bl	eec <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    17d0:	2301      	movs	r3, #1
    17d2:	2200      	movs	r2, #0
    17d4:	4d1b      	ldr	r5, [pc, #108]	; (1844 <__inserial+0x114>)
    17d6:	9300      	str	r3, [sp, #0]
    17d8:	4611      	mov	r1, r2
    17da:	682b      	ldr	r3, [r5, #0]
    17dc:	2002      	movs	r0, #2
    17de:	f7ff fc27 	bl	1030 <io>
	len -= 2;
    17e2:	4819      	ldr	r0, [pc, #100]	; (1848 <__inserial+0x118>)
    17e4:	6803      	ldr	r3, [r0, #0]
    17e6:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    17e8:	682b      	ldr	r3, [r5, #0]
    17ea:	f813 1b01 	ldrb.w	r1, [r3], #1
    17ee:	3101      	adds	r1, #1
		len = *ptr + 1;
    17f0:	4291      	cmp	r1, r2
    17f2:	bfd4      	ite	le
    17f4:	6001      	strle	r1, [r0, #0]
    17f6:	6002      	strgt	r2, [r0, #0]
	ptr++;
    17f8:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    17fa:	2200      	movs	r2, #0
    17fc:	4f12      	ldr	r7, [pc, #72]	; (1848 <__inserial+0x118>)
    17fe:	4d11      	ldr	r5, [pc, #68]	; (1844 <__inserial+0x114>)
    1800:	883b      	ldrh	r3, [r7, #0]
    1802:	4611      	mov	r1, r2
    1804:	9300      	str	r3, [sp, #0]
    1806:	682b      	ldr	r3, [r5, #0]
    1808:	2003      	movs	r0, #3
    180a:	f7ff fc11 	bl	1030 <io>
	len -= quant;
    180e:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1810:	4606      	mov	r6, r0
	len -= quant;
    1812:	1a18      	subs	r0, r3, r0
    1814:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1816:	b918      	cbnz	r0, 1820 <__inserial+0xf0>
		__inpline = (char*)data;
    1818:	4b09      	ldr	r3, [pc, #36]	; (1840 <__inserial+0x110>)
    181a:	601c      	str	r4, [r3, #0]
		finish;
    181c:	f7ff fca2 	bl	1164 <kill>
	}
	ptr += quant;
    1820:	6828      	ldr	r0, [r5, #0]
    1822:	4430      	add	r0, r6
    1824:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    1826:	2003      	movs	r0, #3

endstrand
    1828:	b003      	add	sp, #12
    182a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    182e:	f7ff bb5d 	b.w	eec <proceed>
endstrand
    1832:	b003      	add	sp, #12
    1834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1838:	f7ff baea 	b.w	e10 <__pi_badstate>
    183c:	200000c8 	andcs	r0, r0, r8, asr #1
    1840:	20000040 	andcs	r0, r0, r0, asr #32
    1844:	20000048 	andcs	r0, r0, r8, asr #32
    1848:	20000044 	andcs	r0, r0, r4, asr #32

0000184c <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    184c:	f8dc 2000 	ldr.w	r2, [ip]
    1850:	b132      	cbz	r2, 1860 <outc.5724+0x14>
    1852:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1856:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    185a:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    185c:	bf88      	it	hi
    185e:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    1860:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1864:	3301      	adds	r3, #1
    1866:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    186a:	4770      	bx	lr

0000186c <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    186c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1870:	461c      	mov	r4, r3
    1872:	ab0c      	add	r3, sp, #48	; 0x30
    1874:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    1876:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1878:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    187a:	4f86      	ldr	r7, [pc, #536]	; (1a94 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	9001      	str	r0, [sp, #4]
    187e:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    1882:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1886:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    188a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    188e:	d118      	bne.n	18c2 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    1890:	f892 9001 	ldrb.w	r9, [r2, #1]
    1894:	1c95      	adds	r5, r2, #2
				outc ('\\');
    1896:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    189a:	f1b9 0f00 	cmp.w	r9, #0
    189e:	d10b      	bne.n	18b8 <__pi_vfparse+0x4c>
				outc ('\\');
    18a0:	205c      	movs	r0, #92	; 0x5c
    18a2:	f7ff ffd3 	bl	184c <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    18a6:	4648      	mov	r0, r9
    18a8:	f10d 0c04 	add.w	ip, sp, #4
    18ac:	f7ff ffce 	bl	184c <outc.5724>
			if (c == '\0')
    18b0:	f1b9 0f00 	cmp.w	r9, #0
    18b4:	d103      	bne.n	18be <__pi_vfparse+0x52>
    18b6:	e027      	b.n	1908 <__pi_vfparse+0x9c>
			outc (c);
    18b8:	4648      	mov	r0, r9
				outc (val);
    18ba:	f7ff ffc7 	bl	184c <outc.5724>
				val = (word) va_arg (ap, aword);
    18be:	462a      	mov	r2, r5
    18c0:	e7e1      	b.n	1886 <__pi_vfparse+0x1a>
		if (c == '%') {
    18c2:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    18c6:	f040 80e2 	bne.w	1a8e <__pi_vfparse+0x222>
			c = *fm++;
    18ca:	f892 8001 	ldrb.w	r8, [r2, #1]
    18ce:	1c95      	adds	r5, r2, #2
			switch (c) {
    18d0:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    18d4:	f000 80cd 	beq.w	1a72 <__pi_vfparse+0x206>
    18d8:	d81b      	bhi.n	1912 <__pi_vfparse+0xa6>
    18da:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    18de:	d033      	beq.n	1948 <__pi_vfparse+0xdc>
    18e0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    18e4:	d067      	beq.n	19b6 <__pi_vfparse+0x14a>
    18e6:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    18ea:	f000 80bc 	beq.w	1a66 <__pi_vfparse+0x1fa>
				outc ('%');
    18ee:	2025      	movs	r0, #37	; 0x25
    18f0:	f10d 0c04 	add.w	ip, sp, #4
    18f4:	f7ff ffaa 	bl	184c <outc.5724>
				outc (c);
    18f8:	4640      	mov	r0, r8
    18fa:	f10d 0c04 	add.w	ip, sp, #4
    18fe:	f7ff ffa5 	bl	184c <outc.5724>
				if (c == '\0')
    1902:	f1b8 0f00 	cmp.w	r8, #0
    1906:	d1da      	bne.n	18be <__pi_vfparse+0x52>
Ret:
				return d;
    1908:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    190c:	b004      	add	sp, #16
    190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1912:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1916:	d017      	beq.n	1948 <__pi_vfparse+0xdc>
    1918:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    191c:	d1e7      	bne.n	18ee <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    191e:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1922:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1926:	fa1f f983 	uxth.w	r9, r3
    192a:	fa49 f308 	asr.w	r3, r9, r8
    192e:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1932:	5cf8      	ldrb	r0, [r7, r3]
    1934:	f10d 0c04 	add.w	ip, sp, #4
    1938:	f7ff ff88 	bl	184c <outc.5724>
					if (i == 0)
    193c:	f1b8 0f00 	cmp.w	r8, #0
    1940:	d0bd      	beq.n	18be <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1942:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1946:	e7f0      	b.n	192a <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1948:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    194c:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1950:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1954:	d10a      	bne.n	196c <__pi_vfparse+0x100>
    1956:	041b      	lsls	r3, r3, #16
    1958:	d508      	bpl.n	196c <__pi_vfparse+0x100>
					outc ('-');
    195a:	202d      	movs	r0, #45	; 0x2d
    195c:	f10d 0c04 	add.w	ip, sp, #4
    1960:	f7ff ff74 	bl	184c <outc.5724>
					val = (~val) + 1;
    1964:	f1c9 0900 	rsb	r9, r9, #0
    1968:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    196c:	2305      	movs	r3, #5
				enci (10000);
    196e:	f242 7810 	movw	r8, #10000	; 0x2710
    1972:	fbb9 f0f8 	udiv	r0, r9, r8
    1976:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    197a:	d103      	bne.n	1984 <__pi_vfparse+0x118>
    197c:	3b01      	subs	r3, #1
    197e:	d117      	bne.n	19b0 <__pi_vfparse+0x144>
    1980:	f04f 0801 	mov.w	r8, #1
    1984:	fa1f fa80 	uxth.w	sl, r0
    1988:	f10d 0c04 	add.w	ip, sp, #4
    198c:	3030      	adds	r0, #48	; 0x30
    198e:	f7ff ff5d 	bl	184c <outc.5724>
    1992:	fbb8 f3f6 	udiv	r3, r8, r6
    1996:	fb08 991a 	mls	r9, r8, sl, r9
    199a:	f1b8 0f09 	cmp.w	r8, #9
    199e:	fa1f f989 	uxth.w	r9, r9
    19a2:	b29b      	uxth	r3, r3
    19a4:	d98b      	bls.n	18be <__pi_vfparse+0x52>
    19a6:	fbb9 f0f3 	udiv	r0, r9, r3
    19aa:	4698      	mov	r8, r3
    19ac:	b2c0      	uxtb	r0, r0
    19ae:	e7e9      	b.n	1984 <__pi_vfparse+0x118>
    19b0:	fbb8 f8f6 	udiv	r8, r8, r6
    19b4:	e7dd      	b.n	1972 <__pi_vfparse+0x106>
				c = *fm;
    19b6:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    19b8:	2b64      	cmp	r3, #100	; 0x64
    19ba:	d001      	beq.n	19c0 <__pi_vfparse+0x154>
    19bc:	2b75      	cmp	r3, #117	; 0x75
    19be:	d132      	bne.n	1a26 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    19c0:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    19c2:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    19c6:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    19ca:	d109      	bne.n	19e0 <__pi_vfparse+0x174>
    19cc:	f1ba 0f00 	cmp.w	sl, #0
    19d0:	da06      	bge.n	19e0 <__pi_vfparse+0x174>
						outc ('-');
    19d2:	202d      	movs	r0, #45	; 0x2d
    19d4:	f10d 0c04 	add.w	ip, sp, #4
    19d8:	f7ff ff38 	bl	184c <outc.5724>
						val = (~val) + 1;
    19dc:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    19e0:	230a      	movs	r3, #10
					enci (1000000000UL);
    19e2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1a98 <__pi_vfparse+0x22c>
    19e6:	fbba f9f8 	udiv	r9, sl, r8
    19ea:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    19ee:	d103      	bne.n	19f8 <__pi_vfparse+0x18c>
    19f0:	3b01      	subs	r3, #1
    19f2:	d115      	bne.n	1a20 <__pi_vfparse+0x1b4>
    19f4:	f04f 0801 	mov.w	r8, #1
    19f8:	f10d 0c04 	add.w	ip, sp, #4
    19fc:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1a00:	f7ff ff24 	bl	184c <outc.5724>
    1a04:	f1b8 0f09 	cmp.w	r8, #9
    1a08:	fbb8 f3f6 	udiv	r3, r8, r6
    1a0c:	fb08 aa19 	mls	sl, r8, r9, sl
    1a10:	f67f af55 	bls.w	18be <__pi_vfparse+0x52>
    1a14:	fbba f9f3 	udiv	r9, sl, r3
    1a18:	4698      	mov	r8, r3
    1a1a:	fa5f f989 	uxtb.w	r9, r9
    1a1e:	e7eb      	b.n	19f8 <__pi_vfparse+0x18c>
    1a20:	fbb8 f8f6 	udiv	r8, r8, r6
    1a24:	e7df      	b.n	19e6 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1a26:	2b78      	cmp	r3, #120	; 0x78
    1a28:	d114      	bne.n	1a54 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1a2a:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1a2e:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1a32:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1a34:	fa29 f308 	lsr.w	r3, r9, r8
    1a38:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1a3c:	5cf8      	ldrb	r0, [r7, r3]
    1a3e:	f10d 0c04 	add.w	ip, sp, #4
    1a42:	f7ff ff03 	bl	184c <outc.5724>
						if (i == 0)
    1a46:	f1b8 0f00 	cmp.w	r8, #0
    1a4a:	f43f af38 	beq.w	18be <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1a4e:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1a52:	e7ef      	b.n	1a34 <__pi_vfparse+0x1c8>
					outc ('%');
    1a54:	4648      	mov	r0, r9
    1a56:	f10d 0c04 	add.w	ip, sp, #4
    1a5a:	f7ff fef7 	bl	184c <outc.5724>
					outc ('l');
    1a5e:	4640      	mov	r0, r8
    1a60:	f10d 0c04 	add.w	ip, sp, #4
    1a64:	e729      	b.n	18ba <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1a66:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1a6a:	f10d 0c04 	add.w	ip, sp, #4
    1a6e:	b280      	uxth	r0, r0
    1a70:	e723      	b.n	18ba <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1a72:	f854 3b04 	ldr.w	r3, [r4], #4
    1a76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1a7a:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1a7e:	2800      	cmp	r0, #0
    1a80:	f43f af1d 	beq.w	18be <__pi_vfparse+0x52>
					outc (*st);
    1a84:	f10d 0c04 	add.w	ip, sp, #4
    1a88:	f7ff fee0 	bl	184c <outc.5724>
					st++;
    1a8c:	e7f5      	b.n	1a7a <__pi_vfparse+0x20e>
		c = *fm++;
    1a8e:	1c55      	adds	r5, r2, #1
    1a90:	e709      	b.n	18a6 <__pi_vfparse+0x3a>
    1a92:	bf00      	nop
    1a94:	00002c5c 	andeq	r2, r0, ip, asr ip
    1a98:	3b9aca00 	blcc	fe6b42a0 <_estack+0xde6af2a0>

00001a9c <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1aa0:	460e      	mov	r6, r1
    1aa2:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1aa4:	4604      	mov	r4, r0
    1aa6:	b140      	cbz	r0, 1aba <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1aa8:	4613      	mov	r3, r2
    1aaa:	460a      	mov	r2, r1
    1aac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1ab0:	f7ff fedc 	bl	186c <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1ab4:	4620      	mov	r0, r4
    1ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1aba:	4608      	mov	r0, r1
    1abc:	f7ff fa94 	bl	fe8 <__pi_strlen>
    1ac0:	f100 0511 	add.w	r5, r0, #17
    1ac4:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1ac6:	4628      	mov	r0, r5
    1ac8:	f7ff fb74 	bl	11b4 <__pi_malloc>
    1acc:	4604      	mov	r4, r0
    1ace:	2800      	cmp	r0, #0
    1ad0:	d0f0      	beq.n	1ab4 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ad2:	463b      	mov	r3, r7
    1ad4:	4632      	mov	r2, r6
    1ad6:	4629      	mov	r1, r5
    1ad8:	f7ff fec8 	bl	186c <__pi_vfparse>
    1adc:	4285      	cmp	r5, r0
    1ade:	4680      	mov	r8, r0
    1ae0:	d2e8      	bcs.n	1ab4 <vform+0x18>
		ufree (res);
    1ae2:	4620      	mov	r0, r4
    1ae4:	f7ff fb1a 	bl	111c <__pi_free>
		goto Again;
    1ae8:	4645      	mov	r5, r8
    1aea:	e7ec      	b.n	1ac6 <vform+0x2a>

00001aec <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1aec:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1af2:	2800      	cmp	r0, #0
    1af4:	f000 81b5 	beq.w	1e62 <vscan+0x376>
    1af8:	2900      	cmp	r1, #0
    1afa:	f000 81b4 	beq.w	1e66 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1afe:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1b00:	270a      	movs	r7, #10
    1b02:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1b04:	f8df c370 	ldr.w	ip, [pc, #880]	; 1e78 <vscan+0x38c>
    1b08:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1b0a:	f811 0b01 	ldrb.w	r0, [r1], #1
    1b0e:	b170      	cbz	r0, 1b2e <vscan+0x42>
		if (*fmt++ != '%')
    1b10:	2825      	cmp	r0, #37	; 0x25
    1b12:	d1f9      	bne.n	1b08 <vscan+0x1c>
		switch (*fmt++) {
    1b14:	7870      	ldrb	r0, [r6, #1]
    1b16:	1cb1      	adds	r1, r6, #2
    1b18:	286c      	cmp	r0, #108	; 0x6c
    1b1a:	f000 80e1 	beq.w	1ce0 <vscan+0x1f4>
    1b1e:	d809      	bhi.n	1b34 <vscan+0x48>
    1b20:	2863      	cmp	r0, #99	; 0x63
    1b22:	f000 8184 	beq.w	1e2e <vscan+0x342>
    1b26:	2864      	cmp	r0, #100	; 0x64
    1b28:	d043      	beq.n	1bb2 <vscan+0xc6>
    1b2a:	2800      	cmp	r0, #0
    1b2c:	d1ec      	bne.n	1b08 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1b2e:	4620      	mov	r0, r4
    1b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1b34:	2875      	cmp	r0, #117	; 0x75
    1b36:	d074      	beq.n	1c22 <vscan+0x136>
    1b38:	2878      	cmp	r0, #120	; 0x78
    1b3a:	f000 8098 	beq.w	1c6e <vscan+0x182>
    1b3e:	2873      	cmp	r0, #115	; 0x73
    1b40:	d1e2      	bne.n	1b08 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1b42:	7818      	ldrb	r0, [r3, #0]
    1b44:	461e      	mov	r6, r3
    1b46:	f1a0 0e09 	sub.w	lr, r0, #9
    1b4a:	fa5f fe8e 	uxtb.w	lr, lr
    1b4e:	f1be 0f17 	cmp.w	lr, #23
    1b52:	4698      	mov	r8, r3
    1b54:	f103 0301 	add.w	r3, r3, #1
    1b58:	f240 8173 	bls.w	1e42 <vscan+0x356>
			if (*buf == '\0')
    1b5c:	2800      	cmp	r0, #0
    1b5e:	d0e6      	beq.n	1b2e <vscan+0x42>
			if (*buf != ',') {
    1b60:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1b62:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1b66:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1b6a:	d00e      	beq.n	1b8a <vscan+0x9e>
    1b6c:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1b6e:	f818 3b01 	ldrb.w	r3, [r8], #1
    1b72:	f1a3 0009 	sub.w	r0, r3, #9
    1b76:	2801      	cmp	r0, #1
    1b78:	d907      	bls.n	1b8a <vscan+0x9e>
    1b7a:	2b0d      	cmp	r3, #13
    1b7c:	d005      	beq.n	1b8a <vscan+0x9e>
    1b7e:	2b2c      	cmp	r3, #44	; 0x2c
    1b80:	d003      	beq.n	1b8a <vscan+0x9e>
    1b82:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1b86:	f040 8163 	bne.w	1e50 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1b8a:	f896 8000 	ldrb.w	r8, [r6]
    1b8e:	4633      	mov	r3, r6
    1b90:	f1a8 0009 	sub.w	r0, r8, #9
    1b94:	b2c0      	uxtb	r0, r0
    1b96:	2817      	cmp	r0, #23
    1b98:	f106 0601 	add.w	r6, r6, #1
    1b9c:	f240 815b 	bls.w	1e56 <vscan+0x36a>
			if (*buf == ',') buf++;
    1ba0:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1ba4:	bf08      	it	eq
    1ba6:	4633      	moveq	r3, r6
			*sap = '\0';
    1ba8:	f88e 5000 	strb.w	r5, [lr]
			break;
    1bac:	e7ac      	b.n	1b08 <vscan+0x1c>
		    case 'd': scani (word); break;
    1bae:	2e00      	cmp	r6, #0
    1bb0:	d0bd      	beq.n	1b2e <vscan+0x42>
    1bb2:	469e      	mov	lr, r3
    1bb4:	f813 6b01 	ldrb.w	r6, [r3], #1
    1bb8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1bbc:	2809      	cmp	r0, #9
    1bbe:	d923      	bls.n	1c08 <vscan+0x11c>
    1bc0:	2e2d      	cmp	r6, #45	; 0x2d
    1bc2:	d001      	beq.n	1bc8 <vscan+0xdc>
    1bc4:	2e2b      	cmp	r6, #43	; 0x2b
    1bc6:	d1f2      	bne.n	1bae <vscan+0xc2>
    1bc8:	7818      	ldrb	r0, [r3, #0]
    1bca:	469e      	mov	lr, r3
    1bcc:	3830      	subs	r0, #48	; 0x30
    1bce:	2809      	cmp	r0, #9
    1bd0:	d8ef      	bhi.n	1bb2 <vscan+0xc6>
    1bd2:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1bd6:	f1d9 0800 	rsbs	r8, r9, #0
    1bda:	eb48 0809 	adc.w	r8, r8, r9
    1bde:	f852 6b04 	ldr.w	r6, [r2], #4
    1be2:	3401      	adds	r4, #1
    1be4:	8035      	strh	r5, [r6, #0]
    1be6:	f89e 0000 	ldrb.w	r0, [lr]
    1bea:	4673      	mov	r3, lr
    1bec:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1bf0:	f1b9 0f09 	cmp.w	r9, #9
    1bf4:	f10e 0e01 	add.w	lr, lr, #1
    1bf8:	d909      	bls.n	1c0e <vscan+0x122>
    1bfa:	f1b8 0f00 	cmp.w	r8, #0
    1bfe:	d183      	bne.n	1b08 <vscan+0x1c>
    1c00:	8830      	ldrh	r0, [r6, #0]
    1c02:	4240      	negs	r0, r0
    1c04:	8030      	strh	r0, [r6, #0]
    1c06:	e77f      	b.n	1b08 <vscan+0x1c>
    1c08:	f04f 0800 	mov.w	r8, #0
    1c0c:	e7e7      	b.n	1bde <vscan+0xf2>
    1c0e:	8833      	ldrh	r3, [r6, #0]
    1c10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c14:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1c18:	3030      	adds	r0, #48	; 0x30
    1c1a:	8030      	strh	r0, [r6, #0]
    1c1c:	e7e3      	b.n	1be6 <vscan+0xfa>
		    case 'u': scanu (word); break;
    1c1e:	2800      	cmp	r0, #0
    1c20:	d085      	beq.n	1b2e <vscan+0x42>
    1c22:	7818      	ldrb	r0, [r3, #0]
    1c24:	461e      	mov	r6, r3
    1c26:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1c2a:	f1be 0f09 	cmp.w	lr, #9
    1c2e:	f103 0301 	add.w	r3, r3, #1
    1c32:	d8f4      	bhi.n	1c1e <vscan+0x132>
    1c34:	f852 eb04 	ldr.w	lr, [r2], #4
    1c38:	3401      	adds	r4, #1
    1c3a:	f8ae 5000 	strh.w	r5, [lr]
    1c3e:	7830      	ldrb	r0, [r6, #0]
    1c40:	4633      	mov	r3, r6
    1c42:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1c46:	f1b8 0f09 	cmp.w	r8, #9
    1c4a:	f106 0601 	add.w	r6, r6, #1
    1c4e:	f63f af5b 	bhi.w	1b08 <vscan+0x1c>
    1c52:	f8be 3000 	ldrh.w	r3, [lr]
    1c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c5a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1c5e:	3830      	subs	r0, #48	; 0x30
    1c60:	f8ae 0000 	strh.w	r0, [lr]
    1c64:	e7eb      	b.n	1c3e <vscan+0x152>
		    case 'x': scanx (word); break;
    1c66:	f1be 0f00 	cmp.w	lr, #0
    1c6a:	f43f af60 	beq.w	1b2e <vscan+0x42>
    1c6e:	f893 e000 	ldrb.w	lr, [r3]
    1c72:	461e      	mov	r6, r3
    1c74:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1c78:	2809      	cmp	r0, #9
    1c7a:	f103 0301 	add.w	r3, r3, #1
    1c7e:	d904      	bls.n	1c8a <vscan+0x19e>
    1c80:	f02e 0020 	bic.w	r0, lr, #32
    1c84:	3841      	subs	r0, #65	; 0x41
    1c86:	2805      	cmp	r0, #5
    1c88:	d8ed      	bhi.n	1c66 <vscan+0x17a>
    1c8a:	f852 eb04 	ldr.w	lr, [r2], #4
    1c8e:	3401      	adds	r4, #1
    1c90:	f8ae 5000 	strh.w	r5, [lr]
    1c94:	f106 0805 	add.w	r8, r6, #5
    1c98:	f896 9000 	ldrb.w	r9, [r6]
    1c9c:	4633      	mov	r3, r6
    1c9e:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1ca2:	b2c0      	uxtb	r0, r0
    1ca4:	2809      	cmp	r0, #9
    1ca6:	f106 0601 	add.w	r6, r6, #1
    1caa:	f240 80de 	bls.w	1e6a <vscan+0x37e>
    1cae:	f029 0020 	bic.w	r0, r9, #32
    1cb2:	3841      	subs	r0, #65	; 0x41
    1cb4:	2805      	cmp	r0, #5
    1cb6:	f63f af27 	bhi.w	1b08 <vscan+0x1c>
    1cba:	4546      	cmp	r6, r8
    1cbc:	f43f af24 	beq.w	1b08 <vscan+0x1c>
    1cc0:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1cc4:	2b05      	cmp	r3, #5
    1cc6:	bf94      	ite	ls
    1cc8:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1ccc:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1cd0:	b2c0      	uxtb	r0, r0
    1cd2:	f8be 3000 	ldrh.w	r3, [lr]
    1cd6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1cda:	f8ae 0000 	strh.w	r0, [lr]
    1cde:	e7db      	b.n	1c98 <vscan+0x1ac>
			switch (*fmt++) {
    1ce0:	78b0      	ldrb	r0, [r6, #2]
    1ce2:	1cf1      	adds	r1, r6, #3
    1ce4:	2875      	cmp	r0, #117	; 0x75
    1ce6:	d07d      	beq.n	1de4 <vscan+0x2f8>
    1ce8:	d831      	bhi.n	1d4e <vscan+0x262>
    1cea:	2800      	cmp	r0, #0
    1cec:	f43f af1f 	beq.w	1b2e <vscan+0x42>
    1cf0:	2864      	cmp	r0, #100	; 0x64
    1cf2:	f47f af09 	bne.w	1b08 <vscan+0x1c>
    1cf6:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1cf8:	f813 6b01 	ldrb.w	r6, [r3], #1
    1cfc:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1d00:	2809      	cmp	r0, #9
    1d02:	d962      	bls.n	1dca <vscan+0x2de>
    1d04:	2e2d      	cmp	r6, #45	; 0x2d
    1d06:	d001      	beq.n	1d0c <vscan+0x220>
    1d08:	2e2b      	cmp	r6, #43	; 0x2b
    1d0a:	d15b      	bne.n	1dc4 <vscan+0x2d8>
    1d0c:	7818      	ldrb	r0, [r3, #0]
    1d0e:	4698      	mov	r8, r3
    1d10:	3830      	subs	r0, #48	; 0x30
    1d12:	2809      	cmp	r0, #9
    1d14:	d8ef      	bhi.n	1cf6 <vscan+0x20a>
    1d16:	3e2d      	subs	r6, #45	; 0x2d
    1d18:	4270      	negs	r0, r6
    1d1a:	4170      	adcs	r0, r6
    1d1c:	f852 eb04 	ldr.w	lr, [r2], #4
    1d20:	3401      	adds	r4, #1
    1d22:	f8ce 5000 	str.w	r5, [lr]
    1d26:	f898 6000 	ldrb.w	r6, [r8]
    1d2a:	4643      	mov	r3, r8
    1d2c:	3e30      	subs	r6, #48	; 0x30
    1d2e:	fa5f f986 	uxtb.w	r9, r6
    1d32:	f1b9 0f09 	cmp.w	r9, #9
    1d36:	f108 0801 	add.w	r8, r8, #1
    1d3a:	d948      	bls.n	1dce <vscan+0x2e2>
    1d3c:	2800      	cmp	r0, #0
    1d3e:	f47f aee3 	bne.w	1b08 <vscan+0x1c>
    1d42:	f8de 0000 	ldr.w	r0, [lr]
    1d46:	4240      	negs	r0, r0
    1d48:	f8ce 0000 	str.w	r0, [lr]
    1d4c:	e6dc      	b.n	1b08 <vscan+0x1c>
    1d4e:	2878      	cmp	r0, #120	; 0x78
    1d50:	f47f aeda 	bne.w	1b08 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1d54:	f893 e000 	ldrb.w	lr, [r3]
    1d58:	461e      	mov	r6, r3
    1d5a:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1d5e:	2809      	cmp	r0, #9
    1d60:	f103 0301 	add.w	r3, r3, #1
    1d64:	d904      	bls.n	1d70 <vscan+0x284>
    1d66:	f02e 0020 	bic.w	r0, lr, #32
    1d6a:	3841      	subs	r0, #65	; 0x41
    1d6c:	2805      	cmp	r0, #5
    1d6e:	d85a      	bhi.n	1e26 <vscan+0x33a>
    1d70:	f852 eb04 	ldr.w	lr, [r2], #4
    1d74:	3401      	adds	r4, #1
    1d76:	f8ce 5000 	str.w	r5, [lr]
    1d7a:	f106 0809 	add.w	r8, r6, #9
    1d7e:	f896 9000 	ldrb.w	r9, [r6]
    1d82:	4633      	mov	r3, r6
    1d84:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1d88:	b2c0      	uxtb	r0, r0
    1d8a:	2809      	cmp	r0, #9
    1d8c:	f106 0601 	add.w	r6, r6, #1
    1d90:	d96f      	bls.n	1e72 <vscan+0x386>
    1d92:	f029 0020 	bic.w	r0, r9, #32
    1d96:	3841      	subs	r0, #65	; 0x41
    1d98:	2805      	cmp	r0, #5
    1d9a:	f63f aeb5 	bhi.w	1b08 <vscan+0x1c>
    1d9e:	4546      	cmp	r6, r8
    1da0:	f43f aeb2 	beq.w	1b08 <vscan+0x1c>
    1da4:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1da8:	2b05      	cmp	r3, #5
    1daa:	bf94      	ite	ls
    1dac:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1db0:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1db4:	b2c0      	uxtb	r0, r0
    1db6:	f8de 3000 	ldr.w	r3, [lr]
    1dba:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1dbe:	f8ce 0000 	str.w	r0, [lr]
    1dc2:	e7dc      	b.n	1d7e <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1dc4:	2e00      	cmp	r6, #0
    1dc6:	d196      	bne.n	1cf6 <vscan+0x20a>
    1dc8:	e6b1      	b.n	1b2e <vscan+0x42>
    1dca:	2000      	movs	r0, #0
    1dcc:	e7a6      	b.n	1d1c <vscan+0x230>
    1dce:	f8de 3000 	ldr.w	r3, [lr]
    1dd2:	b2b6      	uxth	r6, r6
    1dd4:	437b      	muls	r3, r7
    1dd6:	1b9e      	subs	r6, r3, r6
    1dd8:	f8ce 6000 	str.w	r6, [lr]
    1ddc:	e7a3      	b.n	1d26 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1dde:	2800      	cmp	r0, #0
    1de0:	f43f aea5 	beq.w	1b2e <vscan+0x42>
    1de4:	7818      	ldrb	r0, [r3, #0]
    1de6:	461e      	mov	r6, r3
    1de8:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1dec:	f1be 0f09 	cmp.w	lr, #9
    1df0:	f103 0301 	add.w	r3, r3, #1
    1df4:	d8f3      	bhi.n	1dde <vscan+0x2f2>
    1df6:	f852 eb04 	ldr.w	lr, [r2], #4
    1dfa:	3401      	adds	r4, #1
    1dfc:	f8ce 5000 	str.w	r5, [lr]
    1e00:	7830      	ldrb	r0, [r6, #0]
    1e02:	4633      	mov	r3, r6
    1e04:	3830      	subs	r0, #48	; 0x30
    1e06:	fa5f f880 	uxtb.w	r8, r0
    1e0a:	f1b8 0f09 	cmp.w	r8, #9
    1e0e:	f106 0601 	add.w	r6, r6, #1
    1e12:	f63f ae79 	bhi.w	1b08 <vscan+0x1c>
    1e16:	f8de 3000 	ldr.w	r3, [lr]
    1e1a:	b280      	uxth	r0, r0
    1e1c:	fb07 0003 	mla	r0, r7, r3, r0
    1e20:	f8ce 0000 	str.w	r0, [lr]
    1e24:	e7ec      	b.n	1e00 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    1e26:	f1be 0f00 	cmp.w	lr, #0
    1e2a:	d193      	bne.n	1d54 <vscan+0x268>
    1e2c:	e67f      	b.n	1b2e <vscan+0x42>
			if ((c = *buf++) == '\0')
    1e2e:	f813 0b01 	ldrb.w	r0, [r3], #1
    1e32:	2800      	cmp	r0, #0
    1e34:	f43f ae7b 	beq.w	1b2e <vscan+0x42>
			sap = va_arg (ap, char*);
    1e38:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    1e3c:	3401      	adds	r4, #1
			*sap = c;
    1e3e:	7030      	strb	r0, [r6, #0]
			break;
    1e40:	e662      	b.n	1b08 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1e42:	fa2c fe0e 	lsr.w	lr, ip, lr
    1e46:	f01e 0f01 	tst.w	lr, #1
    1e4a:	f47f ae7a 	bne.w	1b42 <vscan+0x56>
    1e4e:	e687      	b.n	1b60 <vscan+0x74>
						*sap++ = *buf++;
    1e50:	f80e 3b01 	strb.w	r3, [lr], #1
    1e54:	e68a      	b.n	1b6c <vscan+0x80>
			while (isspace (*buf)) buf++;
    1e56:	fa2c f000 	lsr.w	r0, ip, r0
    1e5a:	07c0      	lsls	r0, r0, #31
    1e5c:	f53f ae95 	bmi.w	1b8a <vscan+0x9e>
    1e60:	e6a2      	b.n	1ba8 <vscan+0xbc>
		return 0;
    1e62:	4604      	mov	r4, r0
    1e64:	e663      	b.n	1b2e <vscan+0x42>
    1e66:	460c      	mov	r4, r1
    1e68:	e661      	b.n	1b2e <vscan+0x42>
		    case 'x': scanx (word); break;
    1e6a:	4546      	cmp	r6, r8
    1e6c:	f47f af31 	bne.w	1cd2 <vscan+0x1e6>
    1e70:	e64a      	b.n	1b08 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1e72:	4546      	cmp	r6, r8
    1e74:	d19f      	bne.n	1db6 <vscan+0x2ca>
    1e76:	e647      	b.n	1b08 <vscan+0x1c>
    1e78:	00800013 	addeq	r0, r0, r3, lsl r0

00001e7c <NOROM_AONBatMonTemperatureGetDegC>:
    1e7c:	4b08      	ldr	r3, [pc, #32]	; (1ea0 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    1e7e:	6818      	ldr	r0, [r3, #0]
    1e80:	4b08      	ldr	r3, [pc, #32]	; (1ea4 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    1e82:	7819      	ldrb	r1, [r3, #0]
    1e84:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    1e86:	681a      	ldr	r2, [r3, #0]
    1e88:	f340 0310 	sbfx	r3, r0, #0, #17
    1e8c:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    1e90:	b248      	sxtb	r0, r1
    1e92:	4350      	muls	r0, r2
    1e94:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    1e98:	3080      	adds	r0, #128	; 0x80
    1e9a:	1200      	asrs	r0, r0, #8
    1e9c:	4770      	bx	lr
    1e9e:	bf00      	nop
    1ea0:	40095030 	andmi	r5, r9, r0, lsr r0
    1ea4:	5000130c 	andpl	r1, r0, ip, lsl #6
    1ea8:	40095028 	andmi	r5, r9, r8, lsr #32

00001eac <NOROM_AONRTCCurrent64BitValueGet>:
    1eac:	4b03      	ldr	r3, [pc, #12]	; (1ebc <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    1eae:	4904      	ldr	r1, [pc, #16]	; (1ec0 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    1eb0:	681a      	ldr	r2, [r3, #0]
    1eb2:	6808      	ldr	r0, [r1, #0]
    1eb4:	6819      	ldr	r1, [r3, #0]
    1eb6:	4291      	cmp	r1, r2
    1eb8:	d1f8      	bne.n	1eac <NOROM_AONRTCCurrent64BitValueGet>
    1eba:	4770      	bx	lr
    1ebc:	40092008 	andmi	r2, r9, r8
    1ec0:	4009200c 	andmi	r2, r9, ip

00001ec4 <NOROM_CPUcpsid>:
    1ec4:	f3ef 8010 	mrs	r0, PRIMASK
    1ec8:	b672      	cpsid	i
    1eca:	4770      	bx	lr

00001ecc <NOROM_CPUcpsie>:
    1ecc:	f3ef 8010 	mrs	r0, PRIMASK
    1ed0:	b662      	cpsie	i
    1ed2:	4770      	bx	lr

00001ed4 <TrimAfterColdResetWakeupFromShutDown>:
    1ed4:	b538      	push	{r3, r4, r5, lr}
    1ed6:	4605      	mov	r5, r0
    1ed8:	4b26      	ldr	r3, [pc, #152]	; (1f74 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    1eda:	2201      	movs	r2, #1
    1edc:	601a      	str	r2, [r3, #0]
    1ede:	4b26      	ldr	r3, [pc, #152]	; (1f78 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d0fb      	beq.n	1ede <TrimAfterColdResetWakeupFromShutDown+0xa>
    1ee6:	4b25      	ldr	r3, [pc, #148]	; (1f7c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1ee8:	22c0      	movs	r2, #192	; 0xc0
    1eea:	601a      	str	r2, [r3, #0]
    1eec:	4b24      	ldr	r3, [pc, #144]	; (1f80 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	079b      	lsls	r3, r3, #30
    1ef2:	bf5f      	itttt	pl
    1ef4:	4b23      	ldrpl	r3, [pc, #140]	; (1f84 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    1ef6:	4a24      	ldrpl	r2, [pc, #144]	; (1f88 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    1ef8:	681b      	ldrpl	r3, [r3, #0]
    1efa:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    1efe:	bf5c      	itt	pl
    1f00:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    1f04:	7013      	strbpl	r3, [r2, #0]
    1f06:	4b21      	ldr	r3, [pc, #132]	; (1f8c <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    1f08:	2200      	movs	r2, #0
    1f0a:	601a      	str	r2, [r3, #0]
    1f0c:	4b20      	ldr	r3, [pc, #128]	; (1f90 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    1f0e:	681c      	ldr	r4, [r3, #0]
    1f10:	4620      	mov	r0, r4
    1f12:	f000 f8d9 	bl	20c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    1f16:	4628      	mov	r0, r5
    1f18:	4621      	mov	r1, r4
    1f1a:	f000 fa0d 	bl	2338 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    1f1e:	f240 221d 	movw	r2, #541	; 0x21d
    1f22:	4b1c      	ldr	r3, [pc, #112]	; (1f94 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    1f24:	681b      	ldr	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	4293      	cmp	r3, r2
    1f2a:	d814      	bhi.n	1f56 <TrimAfterColdResetWakeupFromShutDown+0x82>
    1f2c:	4a1a      	ldr	r2, [pc, #104]	; (1f98 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    1f2e:	6813      	ldr	r3, [r2, #0]
    1f30:	6812      	ldr	r2, [r2, #0]
    1f32:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1f36:	f3c2 4203 	ubfx	r2, r2, #16, #4
    1f3a:	b103      	cbz	r3, 1f3e <TrimAfterColdResetWakeupFromShutDown+0x6a>
    1f3c:	3b01      	subs	r3, #1
    1f3e:	1f91      	subs	r1, r2, #6
    1f40:	2901      	cmp	r1, #1
    1f42:	bf86      	itte	hi
    1f44:	3202      	addhi	r2, #2
    1f46:	f002 020f 	andhi.w	r2, r2, #15
    1f4a:	2207      	movls	r2, #7
    1f4c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    1f50:	4a12      	ldr	r2, [pc, #72]	; (1f9c <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    1f52:	b2db      	uxtb	r3, r3
    1f54:	7013      	strb	r3, [r2, #0]
    1f56:	4620      	mov	r0, r4
    1f58:	f000 fabc 	bl	24d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    1f5c:	4b10      	ldr	r3, [pc, #64]	; (1fa0 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    1f5e:	2002      	movs	r0, #2
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	68db      	ldr	r3, [r3, #12]
    1f64:	4798      	blx	r3
    1f66:	4b05      	ldr	r3, [pc, #20]	; (1f7c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1f68:	2240      	movs	r2, #64	; 0x40
    1f6a:	601a      	str	r2, [r3, #0]
    1f6c:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    1f6e:	2201      	movs	r2, #1
    1f70:	601a      	str	r2, [r3, #0]
    1f72:	bd38      	pop	{r3, r4, r5, pc}
    1f74:	40091010 	andmi	r1, r9, r0, lsl r0
    1f78:	43220294 			; <UNDEFINED> instruction: 0x43220294
    1f7c:	400c6000 	andmi	r6, ip, r0
    1f80:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    1f84:	50003fac 	andpl	r3, r0, ip, lsr #31
    1f88:	40086256 	andmi	r6, r8, r6, asr r2
    1f8c:	40091040 	andmi	r1, r9, r0, asr #32
    1f90:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    1f94:	50001314 	andpl	r1, r0, r4, lsl r3
    1f98:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    1f9c:	40086002 	andmi	r6, r8, r2
    1fa0:	100001a0 	andne	r0, r0, r0, lsr #3
    1fa4:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00001fa8 <NOROM_SetupTrimDevice>:
    1fa8:	b510      	push	{r4, lr}
    1faa:	4b1f      	ldr	r3, [pc, #124]	; (2028 <NOROM_SetupTrimDevice+0x80>)
    1fac:	681c      	ldr	r4, [r3, #0]
    1fae:	1c63      	adds	r3, r4, #1
    1fb0:	bf08      	it	eq
    1fb2:	2400      	moveq	r4, #0
    1fb4:	f000 fcde 	bl	2974 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    1fb8:	4b1c      	ldr	r3, [pc, #112]	; (202c <NOROM_SetupTrimDevice+0x84>)
    1fba:	2200      	movs	r2, #0
    1fbc:	601a      	str	r2, [r3, #0]
    1fbe:	4a1c      	ldr	r2, [pc, #112]	; (2030 <NOROM_SetupTrimDevice+0x88>)
    1fc0:	2301      	movs	r3, #1
    1fc2:	6013      	str	r3, [r2, #0]
    1fc4:	4a1b      	ldr	r2, [pc, #108]	; (2034 <NOROM_SetupTrimDevice+0x8c>)
    1fc6:	6013      	str	r3, [r2, #0]
    1fc8:	f000 fa3e 	bl	2448 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    1fcc:	4b1a      	ldr	r3, [pc, #104]	; (2038 <NOROM_SetupTrimDevice+0x90>)
    1fce:	681b      	ldr	r3, [r3, #0]
    1fd0:	b123      	cbz	r3, 1fdc <NOROM_SetupTrimDevice+0x34>
    1fd2:	4b1a      	ldr	r3, [pc, #104]	; (203c <NOROM_SetupTrimDevice+0x94>)
    1fd4:	4620      	mov	r0, r4
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	f7ff ff7c 	bl	1ed4 <TrimAfterColdResetWakeupFromShutDown>
    1fdc:	4b18      	ldr	r3, [pc, #96]	; (2040 <NOROM_SetupTrimDevice+0x98>)
    1fde:	2200      	movs	r2, #0
    1fe0:	601a      	str	r2, [r3, #0]
    1fe2:	4a18      	ldr	r2, [pc, #96]	; (2044 <NOROM_SetupTrimDevice+0x9c>)
    1fe4:	6813      	ldr	r3, [r2, #0]
    1fe6:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    1fea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1fee:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    1ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1ff6:	6013      	str	r3, [r2, #0]
    1ff8:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    1ffc:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    2000:	6813      	ldr	r3, [r2, #0]
    2002:	f3c3 3301 	ubfx	r3, r3, #12, #2
    2006:	2b01      	cmp	r3, #1
    2008:	bf01      	itttt	eq
    200a:	6813      	ldreq	r3, [r2, #0]
    200c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    2010:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2014:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2018:	bf04      	itt	eq
    201a:	6011      	streq	r1, [r2, #0]
    201c:	6013      	streq	r3, [r2, #0]
    201e:	4b0a      	ldr	r3, [pc, #40]	; (2048 <NOROM_SetupTrimDevice+0xa0>)
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	2b00      	cmp	r3, #0
    2024:	d1fb      	bne.n	201e <NOROM_SetupTrimDevice+0x76>
    2026:	bd10      	pop	{r4, pc}
    2028:	5000131c 	andpl	r1, r0, ip, lsl r3
    202c:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    2030:	400c605c 	andmi	r6, ip, ip, asr r0
    2034:	43042208 	movwmi	r2, #16904	; 0x4208
    2038:	43280180 			; <UNDEFINED> instruction: 0x43280180
    203c:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    2040:	4008218c 	andmi	r2, r8, ip, lsl #3
    2044:	40032048 	andmi	r2, r3, r8, asr #32
    2048:	4268000c 	rsbmi	r0, r8, #12

0000204c <NOROM_SetupSetVddrLevel>:
    204c:	b530      	push	{r4, r5, lr}
    204e:	4b19      	ldr	r3, [pc, #100]	; (20b4 <NOROM_SetupSetVddrLevel+0x68>)
    2050:	681a      	ldr	r2, [r3, #0]
    2052:	4b19      	ldr	r3, [pc, #100]	; (20b8 <NOROM_SetupSetVddrLevel+0x6c>)
    2054:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2058:	781b      	ldrb	r3, [r3, #0]
    205a:	2a15      	cmp	r2, #21
    205c:	f003 031f 	and.w	r3, r3, #31
    2060:	bf88      	it	hi
    2062:	3a20      	subhi	r2, #32
    2064:	2b15      	cmp	r3, #21
    2066:	bf88      	it	hi
    2068:	3b20      	subhi	r3, #32
    206a:	4293      	cmp	r3, r2
    206c:	d020      	beq.n	20b0 <NOROM_SetupSetVddrLevel+0x64>
    206e:	4913      	ldr	r1, [pc, #76]	; (20bc <NOROM_SetupSetVddrLevel+0x70>)
    2070:	2000      	movs	r0, #0
    2072:	6008      	str	r0, [r1, #0]
    2074:	4608      	mov	r0, r1
    2076:	1ad1      	subs	r1, r2, r3
    2078:	2902      	cmp	r1, #2
    207a:	dc05      	bgt.n	2088 <NOROM_SetupSetVddrLevel+0x3c>
    207c:	f06f 0401 	mvn.w	r4, #1
    2080:	42a1      	cmp	r1, r4
    2082:	bfb8      	it	lt
    2084:	4621      	movlt	r1, r4
    2086:	e000      	b.n	208a <NOROM_SetupSetVddrLevel+0x3e>
    2088:	2102      	movs	r1, #2
    208a:	440b      	add	r3, r1
    208c:	490c      	ldr	r1, [pc, #48]	; (20c0 <NOROM_SetupSetVddrLevel+0x74>)
    208e:	4d0d      	ldr	r5, [pc, #52]	; (20c4 <NOROM_SetupSetVddrLevel+0x78>)
    2090:	680c      	ldr	r4, [r1, #0]
    2092:	f003 041f 	and.w	r4, r3, #31
    2096:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    209a:	802c      	strh	r4, [r5, #0]
    209c:	4293      	cmp	r3, r2
    209e:	f04f 0401 	mov.w	r4, #1
    20a2:	600c      	str	r4, [r1, #0]
    20a4:	d1e7      	bne.n	2076 <NOROM_SetupSetVddrLevel+0x2a>
    20a6:	680b      	ldr	r3, [r1, #0]
    20a8:	600c      	str	r4, [r1, #0]
    20aa:	680b      	ldr	r3, [r1, #0]
    20ac:	6004      	str	r4, [r0, #0]
    20ae:	680b      	ldr	r3, [r1, #0]
    20b0:	bd30      	pop	{r4, r5, pc}
    20b2:	bf00      	nop
    20b4:	50001388 	andpl	r1, r0, r8, lsl #7
    20b8:	40086206 	andmi	r6, r8, r6, lsl #4
    20bc:	43200098 			; <UNDEFINED> instruction: 0x43200098
    20c0:	4009202c 	andmi	r2, r9, ip, lsr #32
    20c4:	4008626c 	andmi	r6, r8, ip, ror #4

000020c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    20c8:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    20cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    20d0:	b510      	push	{r4, lr}
    20d2:	4604      	mov	r4, r0
    20d4:	d10f      	bne.n	20f6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    20d6:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    20da:	4a1e      	ldr	r2, [pc, #120]	; (2154 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    20dc:	2380      	movs	r3, #128	; 0x80
    20de:	7013      	strb	r3, [r2, #0]
    20e0:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    20e4:	f802 3c10 	strb.w	r3, [r2, #-16]
    20e8:	f7ff ffb0 	bl	204c <NOROM_SetupSetVddrLevel>
    20ec:	4b1a      	ldr	r3, [pc, #104]	; (2158 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    20ee:	681b      	ldr	r3, [r3, #0]
    20f0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    20f4:	e003      	b.n	20fe <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    20f6:	4b19      	ldr	r3, [pc, #100]	; (215c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	f3c3 6304 	ubfx	r3, r3, #24, #5
    20fe:	2b15      	cmp	r3, #21
    2100:	bf88      	it	hi
    2102:	3b20      	subhi	r3, #32
    2104:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2108:	3301      	adds	r3, #1
    210a:	2b15      	cmp	r3, #21
    210c:	dc05      	bgt.n	211a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    210e:	f06f 0209 	mvn.w	r2, #9
    2112:	4293      	cmp	r3, r2
    2114:	bfb8      	it	lt
    2116:	4613      	movlt	r3, r2
    2118:	e000      	b.n	211c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    211a:	2315      	movs	r3, #21
    211c:	4a10      	ldr	r2, [pc, #64]	; (2160 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    211e:	f003 031f 	and.w	r3, r3, #31
    2122:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    2126:	8013      	strh	r3, [r2, #0]
    2128:	4b0e      	ldr	r3, [pc, #56]	; (2164 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    212a:	681b      	ldr	r3, [r3, #0]
    212c:	f013 0302 	ands.w	r3, r3, #2
    2130:	bf0a      	itet	eq
    2132:	4a0d      	ldreq	r2, [pc, #52]	; (2168 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    2134:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    2138:	6013      	streq	r3, [r2, #0]
    213a:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    213e:	4a0b      	ldr	r2, [pc, #44]	; (216c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    2140:	f083 0301 	eor.w	r3, r3, #1
    2144:	6013      	str	r3, [r2, #0]
    2146:	f3c4 6480 	ubfx	r4, r4, #26, #1
    214a:	4b09      	ldr	r3, [pc, #36]	; (2170 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    214c:	f084 0401 	eor.w	r4, r4, #1
    2150:	601c      	str	r4, [r3, #0]
    2152:	bd10      	pop	{r4, pc}
    2154:	40086225 	andmi	r6, r8, r5, lsr #4
    2158:	50001388 	andpl	r1, r0, r8, lsl #7
    215c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2160:	4008626e 	andmi	r6, r8, lr, ror #4
    2164:	40090000 	andmi	r0, r9, r0
    2168:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    216c:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    2170:	43200008 			; <UNDEFINED> instruction: 0x43200008

00002174 <NOROM_SetupGetTrimForAnabypassValue1>:
    2174:	4b15      	ldr	r3, [pc, #84]	; (21cc <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    2176:	0381      	lsls	r1, r0, #14
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	f3c3 6283 	ubfx	r2, r3, #26, #4
    217e:	f3c3 238f 	ubfx	r3, r3, #10, #16
    2182:	d41f      	bmi.n	21c4 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2184:	f340 2007 	sbfx	r0, r0, #8, #8
    2188:	2800      	cmp	r0, #0
    218a:	da19      	bge.n	21c0 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    218c:	085b      	lsrs	r3, r3, #1
    218e:	d105      	bne.n	219c <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    2190:	0852      	lsrs	r2, r2, #1
    2192:	bf06      	itte	eq
    2194:	2301      	moveq	r3, #1
    2196:	461a      	moveq	r2, r3
    2198:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    219c:	3001      	adds	r0, #1
    219e:	e7f3      	b.n	2188 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    21a0:	005b      	lsls	r3, r3, #1
    21a2:	f043 0301 	orr.w	r3, r3, #1
    21a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    21aa:	d308      	bcc.n	21be <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    21ac:	0052      	lsls	r2, r2, #1
    21ae:	f042 0201 	orr.w	r2, r2, #1
    21b2:	2a0f      	cmp	r2, #15
    21b4:	bf86      	itte	hi
    21b6:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    21ba:	220f      	movhi	r2, #15
    21bc:	2301      	movls	r3, #1
    21be:	3801      	subs	r0, #1
    21c0:	2800      	cmp	r0, #0
    21c2:	d1ed      	bne.n	21a0 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    21c4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    21c8:	4770      	bx	lr
    21ca:	bf00      	nop
    21cc:	50001350 	andpl	r1, r0, r0, asr r3

000021d0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    21d0:	4a04      	ldr	r2, [pc, #16]	; (21e4 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    21d2:	6813      	ldr	r3, [r2, #0]
    21d4:	6810      	ldr	r0, [r2, #0]
    21d6:	f3c3 0387 	ubfx	r3, r3, #2, #8
    21da:	f000 0003 	and.w	r0, r0, #3
    21de:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    21e2:	4770      	bx	lr
    21e4:	50001350 	andpl	r1, r0, r0, asr r3

000021e8 <NOROM_SetupGetTrimForAmpcompTh2>:
    21e8:	4b02      	ldr	r3, [pc, #8]	; (21f4 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    21ea:	6818      	ldr	r0, [r3, #0]
    21ec:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    21f0:	4770      	bx	lr
    21f2:	bf00      	nop
    21f4:	50001374 	andpl	r1, r0, r4, ror r3

000021f8 <NOROM_SetupGetTrimForAmpcompTh1>:
    21f8:	4b03      	ldr	r3, [pc, #12]	; (2208 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    21fa:	6818      	ldr	r0, [r3, #0]
    21fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2200:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2204:	4770      	bx	lr
    2206:	bf00      	nop
    2208:	50001370 	andpl	r1, r0, r0, ror r3

0000220c <NOROM_SetupGetTrimForAmpcompCtrl>:
    220c:	b570      	push	{r4, r5, r6, lr}
    220e:	4b15      	ldr	r3, [pc, #84]	; (2264 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    2210:	4915      	ldr	r1, [pc, #84]	; (2268 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    2212:	681c      	ldr	r4, [r3, #0]
    2214:	6809      	ldr	r1, [r1, #0]
    2216:	f3c4 5203 	ubfx	r2, r4, #20, #4
    221a:	f011 0501 	ands.w	r5, r1, #1
    221e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    2222:	d113      	bne.n	224c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2224:	4911      	ldr	r1, [pc, #68]	; (226c <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    2226:	6809      	ldr	r1, [r1, #0]
    2228:	f341 2603 	sbfx	r6, r1, #8, #4
    222c:	18b2      	adds	r2, r6, r2
    222e:	d403      	bmi.n	2238 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2230:	2a0f      	cmp	r2, #15
    2232:	bfa8      	it	ge
    2234:	220f      	movge	r2, #15
    2236:	e000      	b.n	223a <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    2238:	462a      	mov	r2, r5
    223a:	f341 3103 	sbfx	r1, r1, #12, #4
    223e:	18cb      	adds	r3, r1, r3
    2240:	d403      	bmi.n	224a <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    2242:	2b0f      	cmp	r3, #15
    2244:	bfa8      	it	ge
    2246:	230f      	movge	r3, #15
    2248:	e000      	b.n	224c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    224a:	2300      	movs	r3, #0
    224c:	b2a1      	uxth	r1, r4
    224e:	2821      	cmp	r0, #33	; 0x21
    2250:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    2254:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2258:	bf84      	itt	hi
    225a:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    225e:	4323      	orrhi	r3, r4
    2260:	4618      	mov	r0, r3
    2262:	bd70      	pop	{r4, r5, r6, pc}
    2264:	50001378 	andpl	r1, r0, r8, ror r3
    2268:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    226c:	50003fac 	andpl	r3, r0, ip, lsr #31

00002270 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    2270:	281f      	cmp	r0, #31
    2272:	bf83      	ittte	hi
    2274:	4b02      	ldrhi	r3, [pc, #8]	; (2280 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    2276:	6818      	ldrhi	r0, [r3, #0]
    2278:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    227c:	2000      	movls	r0, #0
    227e:	4770      	bx	lr
    2280:	50001398 	mulpl	r0, r8, r3

00002284 <NOROM_SetupGetTrimForAdcShModeEn>:
    2284:	2821      	cmp	r0, #33	; 0x21
    2286:	bf83      	ittte	hi
    2288:	4b02      	ldrhi	r3, [pc, #8]	; (2294 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    228a:	6818      	ldrhi	r0, [r3, #0]
    228c:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    2290:	2001      	movls	r0, #1
    2292:	4770      	bx	lr
    2294:	5000138c 	andpl	r1, r0, ip, lsl #7

00002298 <NOROM_SetupGetTrimForAdcShVbufEn>:
    2298:	2821      	cmp	r0, #33	; 0x21
    229a:	bf83      	ittte	hi
    229c:	4b02      	ldrhi	r3, [pc, #8]	; (22a8 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    229e:	6818      	ldrhi	r0, [r3, #0]
    22a0:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    22a4:	2001      	movls	r0, #1
    22a6:	4770      	bx	lr
    22a8:	5000138c 	andpl	r1, r0, ip, lsl #7

000022ac <NOROM_SetupGetTrimForXoscHfCtl>:
    22ac:	281f      	cmp	r0, #31
    22ae:	bf81      	itttt	hi
    22b0:	4b07      	ldrhi	r3, [pc, #28]	; (22d0 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    22b2:	681b      	ldrhi	r3, [r3, #0]
    22b4:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    22b8:	0080      	lslhi	r0, r0, #2
    22ba:	bf81      	itttt	hi
    22bc:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    22c0:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    22c4:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    22c8:	4318      	orrhi	r0, r3
    22ca:	bf98      	it	ls
    22cc:	2000      	movls	r0, #0
    22ce:	4770      	bx	lr
    22d0:	50001398 	mulpl	r0, r8, r3

000022d4 <NOROM_SetupGetTrimForXoscHfFastStart>:
    22d4:	4b02      	ldr	r3, [pc, #8]	; (22e0 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    22d6:	6818      	ldr	r0, [r3, #0]
    22d8:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    22dc:	4770      	bx	lr
    22de:	bf00      	nop
    22e0:	5000138c 	andpl	r1, r0, ip, lsl #7

000022e4 <NOROM_SetupGetTrimForRadcExtCfg>:
    22e4:	281f      	cmp	r0, #31
    22e6:	bf81      	itttt	hi
    22e8:	4b07      	ldrhi	r3, [pc, #28]	; (2308 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    22ea:	681b      	ldrhi	r3, [r3, #0]
    22ec:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    22f0:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    22f4:	bf81      	itttt	hi
    22f6:	0400      	lslhi	r0, r0, #16
    22f8:	031b      	lslhi	r3, r3, #12
    22fa:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    22fe:	b29b      	uxthhi	r3, r3
    2300:	bf8c      	ite	hi
    2302:	4318      	orrhi	r0, r3
    2304:	4801      	ldrls	r0, [pc, #4]	; (230c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    2306:	4770      	bx	lr
    2308:	50001398 	mulpl	r0, r8, r3
    230c:	403f8000 	eorsmi	r8, pc, r0

00002310 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    2310:	2821      	cmp	r0, #33	; 0x21
    2312:	bf83      	ittte	hi
    2314:	4b02      	ldrhi	r3, [pc, #8]	; (2320 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    2316:	6818      	ldrhi	r0, [r3, #0]
    2318:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    231c:	2000      	movls	r0, #0
    231e:	4770      	bx	lr
    2320:	5000138c 	andpl	r1, r0, ip, lsl #7

00002324 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    2324:	2821      	cmp	r0, #33	; 0x21
    2326:	bf83      	ittte	hi
    2328:	4b02      	ldrhi	r3, [pc, #8]	; (2334 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    232a:	6818      	ldrhi	r0, [r3, #0]
    232c:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    2330:	2000      	movls	r0, #0
    2332:	4770      	bx	lr
    2334:	5000138c 	andpl	r1, r0, ip, lsl #7

00002338 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    2338:	b573      	push	{r0, r1, r4, r5, r6, lr}
    233a:	4605      	mov	r5, r0
    233c:	4608      	mov	r0, r1
    233e:	f7ff ff19 	bl	2174 <NOROM_SetupGetTrimForAnabypassValue1>
    2342:	4c39      	ldr	r4, [pc, #228]	; (2428 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    2344:	4602      	mov	r2, r0
    2346:	2118      	movs	r1, #24
    2348:	4620      	mov	r0, r4
    234a:	f000 fb33 	bl	29b4 <NOROM_DDI32RegWrite>
    234e:	f7ff ff3f 	bl	21d0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    2352:	4b36      	ldr	r3, [pc, #216]	; (242c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    2354:	b280      	uxth	r0, r0
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	9000      	str	r0, [sp, #0]
    235a:	685e      	ldr	r6, [r3, #4]
    235c:	4620      	mov	r0, r4
    235e:	212c      	movs	r1, #44	; 0x2c
    2360:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2364:	2300      	movs	r3, #0
    2366:	47b0      	blx	r6
    2368:	4b31      	ldr	r3, [pc, #196]	; (2430 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    236a:	4620      	mov	r0, r4
    236c:	681a      	ldr	r2, [r3, #0]
    236e:	211c      	movs	r1, #28
    2370:	f3c2 020d 	ubfx	r2, r2, #0, #14
    2374:	f000 fb1e 	bl	29b4 <NOROM_DDI32RegWrite>
    2378:	f7ff ff36 	bl	21e8 <NOROM_SetupGetTrimForAmpcompTh2>
    237c:	2114      	movs	r1, #20
    237e:	4602      	mov	r2, r0
    2380:	4620      	mov	r0, r4
    2382:	f000 fb17 	bl	29b4 <NOROM_DDI32RegWrite>
    2386:	f7ff ff37 	bl	21f8 <NOROM_SetupGetTrimForAmpcompTh1>
    238a:	2110      	movs	r1, #16
    238c:	4602      	mov	r2, r0
    238e:	4620      	mov	r0, r4
    2390:	f000 fb10 	bl	29b4 <NOROM_DDI32RegWrite>
    2394:	4628      	mov	r0, r5
    2396:	f7ff ff39 	bl	220c <NOROM_SetupGetTrimForAmpcompCtrl>
    239a:	210c      	movs	r1, #12
    239c:	4602      	mov	r2, r0
    239e:	4620      	mov	r0, r4
    23a0:	f000 fb08 	bl	29b4 <NOROM_DDI32RegWrite>
    23a4:	4628      	mov	r0, r5
    23a6:	f7ff ff6d 	bl	2284 <NOROM_SetupGetTrimForAdcShModeEn>
    23aa:	0040      	lsls	r0, r0, #1
    23ac:	4e21      	ldr	r6, [pc, #132]	; (2434 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    23ae:	f040 0020 	orr.w	r0, r0, #32
    23b2:	b2c0      	uxtb	r0, r0
    23b4:	7030      	strb	r0, [r6, #0]
    23b6:	4628      	mov	r0, r5
    23b8:	f7ff ff6e 	bl	2298 <NOROM_SetupGetTrimForAdcShVbufEn>
    23bc:	f040 0010 	orr.w	r0, r0, #16
    23c0:	b2c0      	uxtb	r0, r0
    23c2:	7030      	strb	r0, [r6, #0]
    23c4:	4628      	mov	r0, r5
    23c6:	f7ff ff71 	bl	22ac <NOROM_SetupGetTrimForXoscHfCtl>
    23ca:	2128      	movs	r1, #40	; 0x28
    23cc:	4602      	mov	r2, r0
    23ce:	4620      	mov	r0, r4
    23d0:	f000 faf0 	bl	29b4 <NOROM_DDI32RegWrite>
    23d4:	4628      	mov	r0, r5
    23d6:	f7ff ff4b 	bl	2270 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    23da:	0040      	lsls	r0, r0, #1
    23dc:	4b16      	ldr	r3, [pc, #88]	; (2438 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    23de:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    23e2:	b2c0      	uxtb	r0, r0
    23e4:	7018      	strb	r0, [r3, #0]
    23e6:	4628      	mov	r0, r5
    23e8:	f7ff ff92 	bl	2310 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    23ec:	00c0      	lsls	r0, r0, #3
    23ee:	4b13      	ldr	r3, [pc, #76]	; (243c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    23f0:	f060 007f 	orn	r0, r0, #127	; 0x7f
    23f4:	b2c0      	uxtb	r0, r0
    23f6:	7018      	strb	r0, [r3, #0]
    23f8:	4628      	mov	r0, r5
    23fa:	f7ff ff93 	bl	2324 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    23fe:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    2402:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    2406:	4b0e      	ldr	r3, [pc, #56]	; (2440 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2408:	b280      	uxth	r0, r0
    240a:	8018      	strh	r0, [r3, #0]
    240c:	4628      	mov	r0, r5
    240e:	f7ff ff69 	bl	22e4 <NOROM_SetupGetTrimForRadcExtCfg>
    2412:	2108      	movs	r1, #8
    2414:	4602      	mov	r2, r0
    2416:	4620      	mov	r0, r4
    2418:	f000 facc 	bl	29b4 <NOROM_DDI32RegWrite>
    241c:	4b09      	ldr	r3, [pc, #36]	; (2444 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    241e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2422:	601a      	str	r2, [r3, #0]
    2424:	b002      	add	sp, #8
    2426:	bd70      	pop	{r4, r5, r6, pc}
    2428:	400ca000 	andmi	sl, ip, r0
    242c:	100001a4 	andne	r0, r0, r4, lsr #3
    2430:	5000137c 	andpl	r1, r0, ip, ror r3
    2434:	400ca149 	andmi	sl, ip, r9, asr #2
    2438:	400ca14c 	andmi	sl, ip, ip, asr #2
    243c:	400ca141 	andmi	sl, ip, r1, asr #2
    2440:	400ca1dc 	ldrdmi	sl, [ip], -ip
    2444:	400ca040 	andmi	sl, ip, r0, asr #32

00002448 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    2448:	b530      	push	{r4, r5, lr}
    244a:	4b14      	ldr	r3, [pc, #80]	; (249c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	2b00      	cmp	r3, #0
    2450:	d1fb      	bne.n	244a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    2452:	4a13      	ldr	r2, [pc, #76]	; (24a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    2454:	4913      	ldr	r1, [pc, #76]	; (24a4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    2456:	6813      	ldr	r3, [r2, #0]
    2458:	6809      	ldr	r1, [r1, #0]
    245a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    245e:	f023 0307 	bic.w	r3, r3, #7
    2462:	f011 0f04 	tst.w	r1, #4
    2466:	4614      	mov	r4, r2
    2468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    246c:	d003      	beq.n	2476 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    246e:	f043 0305 	orr.w	r3, r3, #5
    2472:	6013      	str	r3, [r2, #0]
    2474:	bd30      	pop	{r4, r5, pc}
    2476:	490c      	ldr	r1, [pc, #48]	; (24a8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    2478:	f043 0004 	orr.w	r0, r3, #4
    247c:	680d      	ldr	r5, [r1, #0]
    247e:	07ad      	lsls	r5, r5, #30
    2480:	d009      	beq.n	2496 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    2482:	f043 0307 	orr.w	r3, r3, #7
    2486:	6013      	str	r3, [r2, #0]
    2488:	680b      	ldr	r3, [r1, #0]
    248a:	f003 0303 	and.w	r3, r3, #3
    248e:	2b03      	cmp	r3, #3
    2490:	d1fa      	bne.n	2488 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    2492:	6020      	str	r0, [r4, #0]
    2494:	bd30      	pop	{r4, r5, pc}
    2496:	6010      	str	r0, [r2, #0]
    2498:	bd30      	pop	{r4, r5, pc}
    249a:	bf00      	nop
    249c:	4268000c 	rsbmi	r0, r8, #12
    24a0:	40034004 	andmi	r4, r3, r4
    24a4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    24a8:	40034000 	andmi	r4, r3, r0

000024ac <NOROM_SetupSetAonRtcSubSecInc>:
    24ac:	4b07      	ldr	r3, [pc, #28]	; (24cc <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    24ae:	b282      	uxth	r2, r0
    24b0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    24b4:	601a      	str	r2, [r3, #0]
    24b6:	6058      	str	r0, [r3, #4]
    24b8:	2201      	movs	r2, #1
    24ba:	3308      	adds	r3, #8
    24bc:	601a      	str	r2, [r3, #0]
    24be:	4a04      	ldr	r2, [pc, #16]	; (24d0 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    24c0:	6812      	ldr	r2, [r2, #0]
    24c2:	2a00      	cmp	r2, #0
    24c4:	d0fb      	beq.n	24be <NOROM_SetupSetAonRtcSubSecInc+0x12>
    24c6:	2200      	movs	r2, #0
    24c8:	601a      	str	r2, [r3, #0]
    24ca:	4770      	bx	lr
    24cc:	400c603c 	andmi	r6, ip, ip, lsr r0
    24d0:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000024d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    24d4:	f3c0 4381 	ubfx	r3, r0, #18, #2
    24d8:	2b01      	cmp	r3, #1
    24da:	b510      	push	{r4, lr}
    24dc:	4604      	mov	r4, r0
    24de:	d002      	beq.n	24e6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    24e0:	2b02      	cmp	r3, #2
    24e2:	d02f      	beq.n	2544 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    24e4:	e02a      	b.n	253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24e6:	4b42      	ldr	r3, [pc, #264]	; (25f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	039a      	lsls	r2, r3, #14
    24ec:	d426      	bmi.n	253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24ee:	4a41      	ldr	r2, [pc, #260]	; (25f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    24f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    24f4:	6011      	str	r1, [r2, #0]
    24f6:	4940      	ldr	r1, [pc, #256]	; (25f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    24f8:	f3c3 3003 	ubfx	r0, r3, #12, #4
    24fc:	680a      	ldr	r2, [r1, #0]
    24fe:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    2502:	4302      	orrs	r2, r0
    2504:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2508:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    250c:	600a      	str	r2, [r1, #0]
    250e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    2512:	f3c3 2003 	ubfx	r0, r3, #8, #4
    2516:	f022 020f 	bic.w	r2, r2, #15
    251a:	4302      	orrs	r2, r0
    251c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    2520:	f841 2c01 	str.w	r2, [r1, #-1]
    2524:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2528:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    252c:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    2530:	4313      	orrs	r3, r2
    2532:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2536:	f841 3c02 	str.w	r3, [r1, #-2]
    253a:	e003      	b.n	2544 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    253c:	4b2d      	ldr	r3, [pc, #180]	; (25f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    253e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2542:	601a      	str	r2, [r3, #0]
    2544:	4b2d      	ldr	r3, [pc, #180]	; (25fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    2546:	681b      	ldr	r3, [r3, #0]
    2548:	071b      	lsls	r3, r3, #28
    254a:	bf5e      	ittt	pl
    254c:	4b2c      	ldrpl	r3, [pc, #176]	; (2600 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    254e:	2240      	movpl	r2, #64	; 0x40
    2550:	601a      	strpl	r2, [r3, #0]
    2552:	4b2c      	ldr	r3, [pc, #176]	; (2604 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    2554:	f44f 7200 	mov.w	r2, #512	; 0x200
    2558:	601a      	str	r2, [r3, #0]
    255a:	f7ff febb 	bl	22d4 <NOROM_SetupGetTrimForXoscHfFastStart>
    255e:	4b2a      	ldr	r3, [pc, #168]	; (2608 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    2560:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    2564:	b2c0      	uxtb	r0, r0
    2566:	7018      	strb	r0, [r3, #0]
    2568:	f3c4 5081 	ubfx	r0, r4, #22, #2
    256c:	2801      	cmp	r0, #1
    256e:	d00b      	beq.n	2588 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    2570:	d302      	bcc.n	2578 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    2572:	2802      	cmp	r0, #2
    2574:	d026      	beq.n	25c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    2576:	e028      	b.n	25ca <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    2578:	2004      	movs	r0, #4
    257a:	2101      	movs	r1, #1
    257c:	f000 fa1e 	bl	29bc <NOROM_OSCClockSourceSet>
    2580:	4822      	ldr	r0, [pc, #136]	; (260c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    2582:	f7ff ff93 	bl	24ac <NOROM_SetupSetAonRtcSubSecInc>
    2586:	e024      	b.n	25d2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2588:	f000 fa46 	bl	2a18 <NOROM_OSCClockSourceGet>
    258c:	4604      	mov	r4, r0
    258e:	2004      	movs	r0, #4
    2590:	4621      	mov	r1, r4
    2592:	f000 fa13 	bl	29bc <NOROM_OSCClockSourceSet>
    2596:	2004      	movs	r0, #4
    2598:	f000 fa3e 	bl	2a18 <NOROM_OSCClockSourceGet>
    259c:	42a0      	cmp	r0, r4
    259e:	d1fa      	bne.n	2596 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    25a0:	4b1b      	ldr	r3, [pc, #108]	; (2610 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    25a2:	681c      	ldr	r4, [r3, #0]
    25a4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    25a8:	f7ff ff80 	bl	24ac <NOROM_SetupSetAonRtcSubSecInc>
    25ac:	4b19      	ldr	r3, [pc, #100]	; (2614 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    25ae:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	0e20      	lsrs	r0, r4, #24
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	2107      	movs	r1, #7
    25ba:	4798      	blx	r3
    25bc:	4b0d      	ldr	r3, [pc, #52]	; (25f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    25be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25c2:	601a      	str	r2, [r3, #0]
    25c4:	2004      	movs	r0, #4
    25c6:	2103      	movs	r1, #3
    25c8:	e001      	b.n	25ce <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    25ca:	2004      	movs	r0, #4
    25cc:	2102      	movs	r1, #2
    25ce:	f000 f9f5 	bl	29bc <NOROM_OSCClockSourceSet>
    25d2:	4b11      	ldr	r3, [pc, #68]	; (2618 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    25d4:	4a11      	ldr	r2, [pc, #68]	; (261c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    25dc:	7013      	strb	r3, [r2, #0]
    25de:	f647 0218 	movw	r2, #30744	; 0x7818
    25e2:	4b0f      	ldr	r3, [pc, #60]	; (2620 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    25e4:	801a      	strh	r2, [r3, #0]
    25e6:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    25ea:	3b44      	subs	r3, #68	; 0x44
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	bd10      	pop	{r4, pc}
    25f0:	5000138c 	andpl	r1, r0, ip, lsl #7
    25f4:	400ca040 	andmi	sl, ip, r0, asr #32
    25f8:	4008600c 	andmi	r6, r8, ip
    25fc:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2600:	400ca068 	andmi	sl, ip, r8, rrx
    2604:	400ca080 	andmi	sl, ip, r0, lsl #1
    2608:	400ca108 	andmi	sl, ip, r8, lsl #2
    260c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    2610:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2614:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2618:	5000136c 	andpl	r1, r0, ip, ror #6
    261c:	400cb00b 	andmi	fp, ip, fp
    2620:	400cb070 	andmi	fp, ip, r0, ror r0

00002624 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    2624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2628:	4b77      	ldr	r3, [pc, #476]	; (2808 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    262a:	4607      	mov	r7, r0
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	4e77      	ldr	r6, [pc, #476]	; (280c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2630:	f013 0f02 	tst.w	r3, #2
    2634:	d004      	beq.n	2640 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    2636:	2308      	movs	r3, #8
    2638:	71b3      	strb	r3, [r6, #6]
    263a:	4a75      	ldr	r2, [pc, #468]	; (2810 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    263c:	4b75      	ldr	r3, [pc, #468]	; (2814 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    263e:	e0df      	b.n	2800 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    2640:	f7ff fc1c 	bl	1e7c <NOROM_AONBatMonTemperatureGetDegC>
    2644:	4b74      	ldr	r3, [pc, #464]	; (2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    2646:	681d      	ldr	r5, [r3, #0]
    2648:	172a      	asrs	r2, r5, #28
    264a:	02ac      	lsls	r4, r5, #10
    264c:	f102 0101 	add.w	r1, r2, #1
    2650:	d408      	bmi.n	2664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    2652:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    2656:	10db      	asrs	r3, r3, #3
    2658:	2b08      	cmp	r3, #8
    265a:	bfa8      	it	ge
    265c:	2308      	movge	r3, #8
    265e:	4299      	cmp	r1, r3
    2660:	bfb8      	it	lt
    2662:	4619      	movlt	r1, r3
    2664:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    2668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    266c:	d10a      	bne.n	2684 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    266e:	4b6b      	ldr	r3, [pc, #428]	; (281c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    2670:	681a      	ldr	r2, [r3, #0]
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	f3c2 2204 	ubfx	r2, r2, #8, #5
    2678:	2a15      	cmp	r2, #21
    267a:	bf88      	it	hi
    267c:	3a20      	subhi	r2, #32
    267e:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2682:	e00a      	b.n	269a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2684:	4b66      	ldr	r3, [pc, #408]	; (2820 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2686:	681a      	ldr	r2, [r3, #0]
    2688:	4b66      	ldr	r3, [pc, #408]	; (2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    268a:	f3c2 6204 	ubfx	r2, r2, #24, #5
    268e:	681b      	ldr	r3, [r3, #0]
    2690:	2a15      	cmp	r2, #21
    2692:	bf88      	it	hi
    2694:	3a20      	subhi	r2, #32
    2696:	f3c3 4304 	ubfx	r3, r3, #16, #5
    269a:	2b15      	cmp	r3, #21
    269c:	440a      	add	r2, r1
    269e:	bf88      	it	hi
    26a0:	3b20      	subhi	r3, #32
    26a2:	2a15      	cmp	r2, #21
    26a4:	dc05      	bgt.n	26b2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    26a6:	f06f 0109 	mvn.w	r1, #9
    26aa:	428a      	cmp	r2, r1
    26ac:	bfb8      	it	lt
    26ae:	460a      	movlt	r2, r1
    26b0:	e000      	b.n	26b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    26b2:	2215      	movs	r2, #21
    26b4:	4c5c      	ldr	r4, [pc, #368]	; (2828 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    26b6:	f002 011f 	and.w	r1, r2, #31
    26ba:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    26be:	8021      	strh	r1, [r4, #0]
    26c0:	495a      	ldr	r1, [pc, #360]	; (282c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    26c2:	6809      	ldr	r1, [r1, #0]
    26c4:	f011 0403 	ands.w	r4, r1, #3
    26c8:	bf18      	it	ne
    26ca:	2401      	movne	r4, #1
    26cc:	0749      	lsls	r1, r1, #29
    26ce:	bf48      	it	mi
    26d0:	f044 0402 	orrmi.w	r4, r4, #2
    26d4:	b10f      	cbz	r7, 26da <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    26d6:	f044 0404 	orr.w	r4, r4, #4
    26da:	f996 1007 	ldrsb.w	r1, [r6, #7]
    26de:	1a41      	subs	r1, r0, r1
    26e0:	2904      	cmp	r1, #4
    26e2:	dc03      	bgt.n	26ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    26e4:	4949      	ldr	r1, [pc, #292]	; (280c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    26e6:	7989      	ldrb	r1, [r1, #6]
    26e8:	428c      	cmp	r4, r1
    26ea:	d06f      	beq.n	27cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    26ec:	f1b0 010f 	subs.w	r1, r0, #15
    26f0:	9101      	str	r1, [sp, #4]
    26f2:	f004 0101 	and.w	r1, r4, #1
    26f6:	f8df a144 	ldr.w	sl, [pc, #324]	; 283c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    26fa:	f004 0904 	and.w	r9, r4, #4
    26fe:	f004 0802 	and.w	r8, r4, #2
    2702:	460f      	mov	r7, r1
    2704:	d42a      	bmi.n	275c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2706:	9901      	ldr	r1, [sp, #4]
    2708:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    270c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    2710:	f1be 0f07 	cmp.w	lr, #7
    2714:	9101      	str	r1, [sp, #4]
    2716:	d801      	bhi.n	271c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2718:	d104      	bne.n	2724 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    271a:	e001      	b.n	2720 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    271c:	f04f 0e07 	mov.w	lr, #7
    2720:	2106      	movs	r1, #6
    2722:	e000      	b.n	2726 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    2724:	4671      	mov	r1, lr
    2726:	f8df b118 	ldr.w	fp, [pc, #280]	; 2840 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    272a:	3101      	adds	r1, #1
    272c:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    2730:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    2734:	ebc1 0c0c 	rsb	ip, r1, ip
    2738:	fa5f f18c 	uxtb.w	r1, ip
    273c:	f1b9 0f00 	cmp.w	r9, #0
    2740:	d002      	beq.n	2748 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    2742:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    2746:	4459      	add	r1, fp
    2748:	f1b8 0f00 	cmp.w	r8, #0
    274c:	d002      	beq.n	2754 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    274e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    2752:	4459      	add	r1, fp
    2754:	b12f      	cbz	r7, 2762 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2756:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    275a:	e002      	b.n	2762 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    275c:	f04f 0e00 	mov.w	lr, #0
    2760:	4671      	mov	r1, lr
    2762:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    2766:	fa5f fc8a 	uxtb.w	ip, sl
    276a:	f1b9 0f00 	cmp.w	r9, #0
    276e:	d002      	beq.n	2776 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    2770:	f3ca 2907 	ubfx	r9, sl, #8, #8
    2774:	44cc      	add	ip, r9
    2776:	f1b8 0f00 	cmp.w	r8, #0
    277a:	d002      	beq.n	2782 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    277c:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2780:	44c4      	add	ip, r8
    2782:	b10f      	cbz	r7, 2788 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2784:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2788:	1a9b      	subs	r3, r3, r2
    278a:	2b01      	cmp	r3, #1
    278c:	bfb8      	it	lt
    278e:	2301      	movlt	r3, #1
    2790:	9f01      	ldr	r7, [sp, #4]
    2792:	2234      	movs	r2, #52	; 0x34
    2794:	4353      	muls	r3, r2
    2796:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    279a:	4379      	muls	r1, r7
    279c:	b2ed      	uxtb	r5, r5
    279e:	436b      	muls	r3, r5
    27a0:	3180      	adds	r1, #128	; 0x80
    27a2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    27a6:	fbb3 f1f1 	udiv	r1, r3, r1
    27aa:	f64f 7cff 	movw	ip, #65535	; 0xffff
    27ae:	4561      	cmp	r1, ip
    27b0:	bf28      	it	cs
    27b2:	4661      	movcs	r1, ip
    27b4:	287f      	cmp	r0, #127	; 0x7f
    27b6:	80b1      	strh	r1, [r6, #4]
    27b8:	dc05      	bgt.n	27c6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    27ba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    27be:	4298      	cmp	r0, r3
    27c0:	bfb8      	it	lt
    27c2:	4618      	movlt	r0, r3
    27c4:	e000      	b.n	27c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    27c6:	207f      	movs	r0, #127	; 0x7f
    27c8:	71f0      	strb	r0, [r6, #7]
    27ca:	71b4      	strb	r4, [r6, #6]
    27cc:	4b18      	ldr	r3, [pc, #96]	; (2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    27ce:	2100      	movs	r1, #0
    27d0:	681b      	ldr	r3, [r3, #0]
    27d2:	6033      	str	r3, [r6, #0]
    27d4:	88b3      	ldrh	r3, [r6, #4]
    27d6:	2b1e      	cmp	r3, #30
    27d8:	bf9e      	ittt	ls
    27da:	4a0c      	ldrls	r2, [pc, #48]	; (280c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    27dc:	231f      	movls	r3, #31
    27de:	8093      	strhls	r3, [r2, #4]
    27e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27e4:	d302      	bcc.n	27ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    27e6:	085b      	lsrs	r3, r3, #1
    27e8:	3101      	adds	r1, #1
    27ea:	e7f9      	b.n	27e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    27ec:	4a11      	ldr	r2, [pc, #68]	; (2834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    27ee:	3b0f      	subs	r3, #15
    27f0:	430a      	orrs	r2, r1
    27f2:	091b      	lsrs	r3, r3, #4
    27f4:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    27f8:	4a06      	ldr	r2, [pc, #24]	; (2814 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    27fa:	6013      	str	r3, [r2, #0]
    27fc:	4b0e      	ldr	r3, [pc, #56]	; (2838 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    27fe:	2200      	movs	r2, #0
    2800:	601a      	str	r2, [r3, #0]
    2802:	b003      	add	sp, #12
    2804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2808:	40090000 	andmi	r0, r9, r0
    280c:	2000004c 	andcs	r0, r0, ip, asr #32
    2810:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2814:	40091030 	andmi	r1, r9, r0, lsr r0
    2818:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    281c:	50001388 	andpl	r1, r0, r8, lsl #7
    2820:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2824:	5000113c 	andpl	r1, r0, ip, lsr r1
    2828:	4008626e 	andmi	r6, r8, lr, ror #4
    282c:	40082224 	andmi	r2, r8, r4, lsr #4
    2830:	40092008 	andmi	r2, r9, r8
    2834:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2838:	40091034 	andmi	r1, r9, r4, lsr r0
    283c:	5000139c 	mulpl	r0, ip, r3
    2840:	50001398 	mulpl	r0, r8, r3

00002844 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2844:	b510      	push	{r4, lr}
    2846:	4b14      	ldr	r3, [pc, #80]	; (2898 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2848:	681c      	ldr	r4, [r3, #0]
    284a:	b2a4      	uxth	r4, r4
    284c:	b314      	cbz	r4, 2894 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    284e:	f7ff fb15 	bl	1e7c <NOROM_AONBatMonTemperatureGetDegC>
    2852:	4b12      	ldr	r3, [pc, #72]	; (289c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2854:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2858:	4290      	cmp	r0, r2
    285a:	da05      	bge.n	2868 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    285c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2860:	4290      	cmp	r0, r2
    2862:	bfb8      	it	lt
    2864:	4610      	movlt	r0, r2
    2866:	71d8      	strb	r0, [r3, #7]
    2868:	889a      	ldrh	r2, [r3, #4]
    286a:	490c      	ldr	r1, [pc, #48]	; (289c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    286c:	4294      	cmp	r4, r2
    286e:	d310      	bcc.n	2892 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2870:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    2872:	6808      	ldr	r0, [r1, #0]
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	1aa4      	subs	r4, r4, r2
    2878:	3302      	adds	r3, #2
    287a:	1a1b      	subs	r3, r3, r0
    287c:	2b1f      	cmp	r3, #31
    287e:	bf28      	it	cs
    2880:	231f      	movcs	r3, #31
    2882:	085b      	lsrs	r3, r3, #1
    2884:	40dc      	lsrs	r4, r3
    2886:	4414      	add	r4, r2
    2888:	f64f 72ff 	movw	r2, #65535	; 0xffff
    288c:	4294      	cmp	r4, r2
    288e:	bf28      	it	cs
    2890:	4614      	movcs	r4, r2
    2892:	808c      	strh	r4, [r1, #4]
    2894:	bd10      	pop	{r4, pc}
    2896:	bf00      	nop
    2898:	40091034 	andmi	r1, r9, r4, lsr r0
    289c:	2000004c 	andcs	r0, r0, ip, asr #32
    28a0:	40092008 	andmi	r2, r9, r8

000028a4 <NOROM_SysCtrlResetSourceGet>:
    28a4:	4b04      	ldr	r3, [pc, #16]	; (28b8 <NOROM_SysCtrlResetSourceGet+0x14>)
    28a6:	681a      	ldr	r2, [r3, #0]
    28a8:	0412      	lsls	r2, r2, #16
    28aa:	bf5a      	itte	pl
    28ac:	6818      	ldrpl	r0, [r3, #0]
    28ae:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    28b2:	2008      	movmi	r0, #8
    28b4:	4770      	bx	lr
    28b6:	bf00      	nop
    28b8:	40090004 	andmi	r0, r9, r4

000028bc <NOROM_ChipInfo_GetChipFamily>:
    28bc:	f64b 129a 	movw	r2, #47514	; 0xb99a
    28c0:	4b10      	ldr	r3, [pc, #64]	; (2904 <NOROM_ChipInfo_GetChipFamily+0x48>)
    28c2:	6818      	ldr	r0, [r3, #0]
    28c4:	f3c0 300f 	ubfx	r0, r0, #12, #16
    28c8:	4290      	cmp	r0, r2
    28ca:	d106      	bne.n	28da <NOROM_ChipInfo_GetChipFamily+0x1e>
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	0f1b      	lsrs	r3, r3, #28
    28d0:	2b0b      	cmp	r3, #11
    28d2:	bf0c      	ite	eq
    28d4:	2004      	moveq	r0, #4
    28d6:	2000      	movne	r0, #0
    28d8:	e011      	b.n	28fe <NOROM_ChipInfo_GetChipFamily+0x42>
    28da:	f64b 13be 	movw	r3, #47550	; 0xb9be
    28de:	4298      	cmp	r0, r3
    28e0:	d00a      	beq.n	28f8 <NOROM_ChipInfo_GetChipFamily+0x3c>
    28e2:	f64b 3341 	movw	r3, #47937	; 0xbb41
    28e6:	4298      	cmp	r0, r3
    28e8:	d008      	beq.n	28fc <NOROM_ChipInfo_GetChipFamily+0x40>
    28ea:	f64b 3320 	movw	r3, #47904	; 0xbb20
    28ee:	4298      	cmp	r0, r3
    28f0:	bf14      	ite	ne
    28f2:	20ff      	movne	r0, #255	; 0xff
    28f4:	2002      	moveq	r0, #2
    28f6:	e002      	b.n	28fe <NOROM_ChipInfo_GetChipFamily+0x42>
    28f8:	2001      	movs	r0, #1
    28fa:	e000      	b.n	28fe <NOROM_ChipInfo_GetChipFamily+0x42>
    28fc:	2003      	movs	r0, #3
    28fe:	b240      	sxtb	r0, r0
    2900:	4770      	bx	lr
    2902:	bf00      	nop
    2904:	50001318 	andpl	r1, r0, r8, lsl r3

00002908 <NOROM_ChipInfo_GetHwRevision>:
    2908:	b538      	push	{r3, r4, r5, lr}
    290a:	4b19      	ldr	r3, [pc, #100]	; (2970 <NOROM_ChipInfo_GetHwRevision+0x68>)
    290c:	681d      	ldr	r5, [r3, #0]
    290e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2912:	6818      	ldr	r0, [r3, #0]
    2914:	0f2d      	lsrs	r5, r5, #28
    2916:	b2c4      	uxtb	r4, r0
    2918:	2c80      	cmp	r4, #128	; 0x80
    291a:	bf28      	it	cs
    291c:	2400      	movcs	r4, #0
    291e:	f7ff ffcd 	bl	28bc <NOROM_ChipInfo_GetChipFamily>
    2922:	2804      	cmp	r0, #4
    2924:	d821      	bhi.n	296a <NOROM_ChipInfo_GetHwRevision+0x62>
    2926:	e8df f000 	tbb	[pc, r0]
    292a:	1b1b1303 	blne	6c753e <__ccfg+0x6a7596>
    292e:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2932:	2d07      	cmp	r5, #7
    2934:	d819      	bhi.n	296a <NOROM_ChipInfo_GetHwRevision+0x62>
    2936:	e8df f005 	tbb	[pc, r5]
    293a:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    293e:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2942:	2014      	movs	r0, #20
    2944:	e012      	b.n	296c <NOROM_ChipInfo_GetHwRevision+0x64>
    2946:	2015      	movs	r0, #21
    2948:	e010      	b.n	296c <NOROM_ChipInfo_GetHwRevision+0x64>
    294a:	f104 0016 	add.w	r0, r4, #22
    294e:	e00a      	b.n	2966 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2950:	b125      	cbz	r5, 295c <NOROM_ChipInfo_GetHwRevision+0x54>
    2952:	2d02      	cmp	r5, #2
    2954:	d109      	bne.n	296a <NOROM_ChipInfo_GetHwRevision+0x62>
    2956:	f104 0014 	add.w	r0, r4, #20
    295a:	e004      	b.n	2966 <NOROM_ChipInfo_GetHwRevision+0x5e>
    295c:	200a      	movs	r0, #10
    295e:	e005      	b.n	296c <NOROM_ChipInfo_GetHwRevision+0x64>
    2960:	b91d      	cbnz	r5, 296a <NOROM_ChipInfo_GetHwRevision+0x62>
    2962:	f104 000a 	add.w	r0, r4, #10
    2966:	b2c0      	uxtb	r0, r0
    2968:	e000      	b.n	296c <NOROM_ChipInfo_GetHwRevision+0x64>
    296a:	20ff      	movs	r0, #255	; 0xff
    296c:	b240      	sxtb	r0, r0
    296e:	bd38      	pop	{r3, r4, r5, pc}
    2970:	50001318 	andpl	r1, r0, r8, lsl r3

00002974 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2974:	b508      	push	{r3, lr}
    2976:	f7ff ffa1 	bl	28bc <NOROM_ChipInfo_GetChipFamily>
    297a:	2801      	cmp	r0, #1
    297c:	d103      	bne.n	2986 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    297e:	f7ff ffc3 	bl	2908 <NOROM_ChipInfo_GetHwRevision>
    2982:	2813      	cmp	r0, #19
    2984:	dc00      	bgt.n	2988 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2986:	e7fe      	b.n	2986 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2988:	bd08      	pop	{r3, pc}
	...

0000298c <AuxAdiDdiSafeWrite.constprop.1>:
    298c:	b538      	push	{r3, r4, r5, lr}
    298e:	4604      	mov	r4, r0
    2990:	460d      	mov	r5, r1
    2992:	f7ff fa97 	bl	1ec4 <NOROM_CPUcpsid>
    2996:	4b06      	ldr	r3, [pc, #24]	; (29b0 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2998:	681a      	ldr	r2, [r3, #0]
    299a:	2a00      	cmp	r2, #0
    299c:	d0fb      	beq.n	2996 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    299e:	2201      	movs	r2, #1
    29a0:	6025      	str	r5, [r4, #0]
    29a2:	601a      	str	r2, [r3, #0]
    29a4:	b918      	cbnz	r0, 29ae <AuxAdiDdiSafeWrite.constprop.1+0x22>
    29a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    29aa:	f7ff ba8f 	b.w	1ecc <NOROM_CPUcpsie>
    29ae:	bd38      	pop	{r3, r4, r5, pc}
    29b0:	400c8000 	andmi	r8, ip, r0

000029b4 <NOROM_DDI32RegWrite>:
    29b4:	4408      	add	r0, r1
    29b6:	4611      	mov	r1, r2
    29b8:	f7ff bfe8 	b.w	298c <AuxAdiDdiSafeWrite.constprop.1>

000029bc <NOROM_OSCClockSourceSet>:
    29bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    29be:	460c      	mov	r4, r1
    29c0:	07c1      	lsls	r1, r0, #31
    29c2:	4605      	mov	r5, r0
    29c4:	d509      	bpl.n	29da <NOROM_OSCClockSourceSet+0x1e>
    29c6:	4b12      	ldr	r3, [pc, #72]	; (2a10 <NOROM_OSCClockSourceSet+0x54>)
    29c8:	b2a2      	uxth	r2, r4
    29ca:	681b      	ldr	r3, [r3, #0]
    29cc:	2100      	movs	r1, #0
    29ce:	9200      	str	r2, [sp, #0]
    29d0:	685e      	ldr	r6, [r3, #4]
    29d2:	4810      	ldr	r0, [pc, #64]	; (2a14 <NOROM_OSCClockSourceSet+0x58>)
    29d4:	2201      	movs	r2, #1
    29d6:	460b      	mov	r3, r1
    29d8:	47b0      	blx	r6
    29da:	07aa      	lsls	r2, r5, #30
    29dc:	d509      	bpl.n	29f2 <NOROM_OSCClockSourceSet+0x36>
    29de:	4b0c      	ldr	r3, [pc, #48]	; (2a10 <NOROM_OSCClockSourceSet+0x54>)
    29e0:	b2a2      	uxth	r2, r4
    29e2:	681b      	ldr	r3, [r3, #0]
    29e4:	9200      	str	r2, [sp, #0]
    29e6:	685e      	ldr	r6, [r3, #4]
    29e8:	480a      	ldr	r0, [pc, #40]	; (2a14 <NOROM_OSCClockSourceSet+0x58>)
    29ea:	2100      	movs	r1, #0
    29ec:	2202      	movs	r2, #2
    29ee:	2301      	movs	r3, #1
    29f0:	47b0      	blx	r6
    29f2:	076b      	lsls	r3, r5, #29
    29f4:	d509      	bpl.n	2a0a <NOROM_OSCClockSourceSet+0x4e>
    29f6:	4b06      	ldr	r3, [pc, #24]	; (2a10 <NOROM_OSCClockSourceSet+0x54>)
    29f8:	b2a4      	uxth	r4, r4
    29fa:	681b      	ldr	r3, [r3, #0]
    29fc:	9400      	str	r4, [sp, #0]
    29fe:	685c      	ldr	r4, [r3, #4]
    2a00:	4804      	ldr	r0, [pc, #16]	; (2a14 <NOROM_OSCClockSourceSet+0x58>)
    2a02:	2100      	movs	r1, #0
    2a04:	220c      	movs	r2, #12
    2a06:	2302      	movs	r3, #2
    2a08:	47a0      	blx	r4
    2a0a:	b002      	add	sp, #8
    2a0c:	bd70      	pop	{r4, r5, r6, pc}
    2a0e:	bf00      	nop
    2a10:	100001a4 	andne	r0, r0, r4, lsr #3
    2a14:	400ca000 	andmi	sl, ip, r0

00002a18 <NOROM_OSCClockSourceGet>:
    2a18:	b510      	push	{r4, lr}
    2a1a:	4b08      	ldr	r3, [pc, #32]	; (2a3c <NOROM_OSCClockSourceGet+0x24>)
    2a1c:	2804      	cmp	r0, #4
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	f04f 0134 	mov.w	r1, #52	; 0x34
    2a24:	68dc      	ldr	r4, [r3, #12]
    2a26:	bf07      	ittee	eq
    2a28:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2a2c:	231d      	moveq	r3, #29
    2a2e:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2a32:	231c      	movne	r3, #28
    2a34:	4802      	ldr	r0, [pc, #8]	; (2a40 <NOROM_OSCClockSourceGet+0x28>)
    2a36:	47a0      	blx	r4
    2a38:	bd10      	pop	{r4, pc}
    2a3a:	bf00      	nop
    2a3c:	100001a4 	andne	r0, r0, r4, lsr #3
    2a40:	400ca000 	andmi	sl, ip, r0
    2a44:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2a48:	6f792072 	svcvs	0x00792072
    2a4c:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2a50:	3a656d61 	bcc	195dfdc <__ccfg+0x193e034>
    2a54:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2a58:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 28b0 <NOROM_SysCtrlResetSourceGet+0xc>
    2a5c:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2a60:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2a64:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2a68:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2a6c:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2a70:	20656874 	rsbcs	r6, r5, r4, ror r8
    2a74:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2a78:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2a7c:	706f2067 	rsbvc	r2, pc, r7, rrx
    2a80:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2a84:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2a88:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2a8c:	6a642941 	bvs	190cf98 <__ccfg+0x18ecff0>
    2a90:	20747375 	rsbscs	r7, r4, r5, ror r3
    2a94:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2a98:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2a9c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2aa0:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2aa4:	0a747261 	beq	1d1f430 <__ccfg+0x1cff488>
    2aa8:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2aac:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2ab0:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2ab4:	6f697461 	svcvs	0x00697461
    2ab8:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2abc:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2ac0:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2ac4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2ac8:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2acc:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2ad0:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2ad4:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2ad8:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2adc:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2ae0:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2ae4:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2ae8:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2aec:	20726574 	rsbscs	r6, r2, r4, ror r5
    2af0:	20656874 	rsbcs	r6, r5, r4, ror r8
    2af4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2af8:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2afc:	52282073 	eorpl	r2, r8, #115	; 0x73
    2b00:	4f206465 	svcmi	0x00206465
    2b04:	4f202c4e 	svcmi	0x00202c4e
    2b08:	202c4646 	eorcs	r4, ip, r6, asr #12
    2b0c:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2b10:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2b14:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2b18:	203a2946 	eorscs	r2, sl, r6, asr #18
    2b1c:	65522800 	ldrbvs	r2, [r2, #-2048]	; 0xfffff800
    2b20:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2b24:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2b28:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2b2c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2b30:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2b34:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2b38:	6e692029 	cdpvs	0, 6, cr2, cr9, cr9, {1}
    2b3c:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2b40:	3a736c61 	bcc	1cddccc <__ccfg+0x1cbdd24>
    2b44:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
    2b48:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b4c:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b50:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b54:	000d0a29 	andeq	r0, sp, r9, lsr #20
    2b58:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    2b5c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    2b60:	65727028 	ldrbvs	r7, [r2, #-40]!	; 0xffffffd8
    2b64:	53207373 			; <UNDEFINED> instruction: 0x53207373
    2b68:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    2b6c:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2b70:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2b74:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    2b78:	203a5252 	eorscs	r5, sl, r2, asr r2
    2b7c:	202c7825 	eorcs	r7, ip, r5, lsr #16
    2b80:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    2b84:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    2b88:	50006961 	andpl	r6, r0, r1, ror #18
    2b8c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2b90:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    2b94:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    2b98:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    2b9c:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    2ba0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2ba4:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2ba8:	434e5541 	movtmi	r5, #58689	; 0xe541
    2bac:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    2bb0:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    2bb4:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    2bb8:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    2bbc:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 2b44 <NOROM_OSCClockSourceGet+0x12c>
    2bc0:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2bc4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2bc8:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    2bcc:	30303220 	eorscc	r3, r0, r0, lsr #4
    2bd0:	30322d32 	eorscc	r2, r2, r2, lsr sp
    2bd4:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    2bd8:	6f746665 	svcvs	0x00746665
    2bdc:	20726576 	rsbscs	r6, r2, r6, ror r5
    2be0:	3a4d4152 	bcc	1353130 <__ccfg+0x1333188>
    2be4:	20642520 	rsbcs	r2, r4, r0, lsr #10
    2be8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2bec:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2bf0:	00000000 	andeq	r0, r0, r0

00002bf4 <port_confs>:
    2bf4:	00306080 	eorseq	r6, r0, r0, lsl #1
    2bf8:	00386080 	eorseq	r6, r8, r0, lsl #1
    2bfc:	00186010 	andseq	r6, r8, r0, lsl r0
    2c00:	2010400f 	andscs	r4, r0, pc
    2c04:	30694000 	rsbcc	r4, r9, r0
    2c08:	30714000 	rsbscc	r4, r1, r0
    2c0c:	00b86008 	adcseq	r6, r8, r8
    2c10:	60c94000 	sbcvs	r4, r9, r0
    2c14:	60d14000 	sbcsvs	r4, r1, r0
    2c18:	60d94000 	sbcsvs	r4, r9, r0
    2c1c:	60e14000 	rscvs	r4, r1, r0
    2c20:	00096380 	andeq	r6, r9, r0, lsl #7
    2c24:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2c28:	20402000 	subcs	r2, r0, r0
    2c2c:	00486080 	subeq	r6, r8, r0, lsl #1
    2c30:	00506080 	subseq	r6, r0, r0, lsl #1
    2c34:	00a06000 	adceq	r6, r0, r0
    2c38:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2c3c:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2c40:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2c44:	6f690076 	svcvs	0x00690076
    2c48:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2c4c:	616d0031 	cmnvs	sp, r1, lsr r0
    2c50:	6b00676c 	blvs	1ca08 <__exidx_end+0x19d94>
    2c54:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2c58:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002c5c <__pi_hex_enc_table>:
    2c5c:	33323130 	teqcc	r2, #48, 2
    2c60:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2c64:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2c68:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002c6c <__input_pins>:
    2c6c:	9c9b9a99 	vldmials	fp, {s18-s170}

00002c70 <__button_list>:
    2c70:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .bss:

20000000 <displayCycle>:
	...

20000001 <username.5768>:
	...

20000016 <setdel>:
	...

20000018 <urates>:
static word urates [N_UARTS];
20000018:	00000000 	andeq	r0, r0, r0

2000001c <__PCB>:
2000001c:	00000000 	andeq	r0, r0, r0

20000020 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000020:	00000000 	andeq	r0, r0, r0

20000024 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000024:	00000000 	andeq	r0, r0, r0

20000028 <mevent>:
20000028:	00000000 	andeq	r0, r0, r0

2000002c <mnfree>:
2000002c:	00000000 	andeq	r0, r0, r0

20000030 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000030:	00000000 	andeq	r0, r0, r0

20000034 <dopen>:
	...

20000035 <dstat>:
20000035:	 	andeq	r0, r0, r0

20000038 <len.5699>:
20000038:	00000000 	andeq	r0, r0, r0

2000003c <ptr.5698>:
2000003c:	00000000 	andeq	r0, r0, r0

20000040 <__inpline>:
char *__inpline = NULL;
20000040:	00000000 	andeq	r0, r0, r0

20000044 <len.5700>:
20000044:	00000000 	andeq	r0, r0, r0

20000048 <ptr.5699>:
20000048:	00000000 	andeq	r0, r0, r0

2000004c <powerQualGlobals>:
	...

20000054 <greenCycle>:
	...

20000064 <redCycle>:
	...

20000074 <cycles>:
	...

20000094 <cyclesIndex>:
int cyclesIndex;
20000094:	00000000 	andeq	r0, r0, r0

20000098 <__pi_uart>:
	...

200000a0 <system_event_count>:
200000a0:	00000000 	andeq	r0, r0, r0

200000a4 <entropy>:
200000a4:	00000000 	andeq	r0, r0, r0

200000a8 <__pi_mintk>:
	...

200000aa <__pi_old>:
	...

200000ac <__pi_systat>:
	...

200000b4 <__pi_new>:
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <__pi_utims>:
	...

200000c8 <__pi_curr>:
200000c8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000cc <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000077d 	andeq	r0, r0, sp, ror r7
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000170 	andeq	r0, r0, r0, ror r1
      10:	0002e20c 	andeq	lr, r2, ip, lsl #4
      14:	0000c000 	andeq	ip, r0, r0
      18:	00009000 	andeq	r9, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000003a3 	andeq	r0, r0, r3, lsr #7
      2c:	dd050202 	sfmle	f0, 4, [r5, #-8]
      30:	02000003 	andeq	r0, r0, #3
      34:	009d0504 	addseq	r0, sp, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00009805 	andeq	r9, r0, r5, lsl #16
			i = k;
      40:	21fc0300 	mvnscs	r0, r0, lsl #6
				j->Next = k;
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
}
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	000003a1 	andeq	r0, r0, r1, lsr #7
      54:	0020ea03 	eoreq	lr, r0, r3, lsl #20
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	71070202 	tstvc	r7, r2, lsl #4
      64:	03000002 	movweq	r0, #2
      68:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00720704 	rsbseq	r0, r2, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00006d07 	andeq	r6, r0, r7, lsl #26
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	77070402 	strvc	r0, [r7, -r2, lsl #8]
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	000003fd 	strdeq	r0, [r0], -sp
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	000015c0 	andeq	r1, r0, r0, asr #11
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013b803 	andseq	fp, r3, r3, lsl #16
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	16110300 	ldrne	r0, [r1], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	a7030000 	strge	r0, [r3, -r0]
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	000002c2 	andeq	r0, r0, r2, asr #5
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	00000091 	muleq	r0, r1, r0
			curr += 0x1000;
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (from >= EE_SIZE || upto < from)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	00000299 	muleq	r0, r9, r2
			upto = EE_SIZE - 1;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
     114:	0000040c 	andeq	r0, r0, ip, lsl #8
     118:	ac033704 	stcge	7, cr3, [r3], {4}
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
     124:	00000405 	andeq	r0, r0, r5, lsl #8
}
     128:	ac033804 	stcge	8, cr3, [r3], {4}
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
     130:	09000004 	stmdbeq	r0, {r2}
}
     134:	000003f6 	strdeq	r0, [r0], -r6
        if(settingsInput[i] == ' ') {
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
            numbers[numbersIndex] = number;
     140:	00004009 	andeq	r4, r0, r9
     144:	033c0400 	teqeq	ip, #0, 8
            numbersIndex++;
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	00660902 	rsbeq	r0, r6, r2, lsl #18
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
            return 1;
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
     158:	54090300 	strpl	r0, [r9], #-768	; 0xfffffd00
     15c:	04000001 	streq	r0, [r0], #-1
fsm root {
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
     164:	00040000 	andeq	r0, r4, r0
     168:	00043403 	andeq	r3, r4, r3, lsl #8
     16c:	03410400 	movteq	r0, #5120	; 0x1400
     170:	000000da 	ldrdeq	r0, [r0], -sl
        initCycles();
     174:	00016806 	andeq	r6, r1, r6, lsl #16
        ser_outf(Initial, "Enter your name: ");
     178:	02b60a00 	adcseq	r0, r6, #0, 20
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
     188:	0000030d 	andeq	r0, r0, sp, lsl #6
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
     190:	01000001 	tsteq	r0, r1
        ser_inf(Get_Choice, "%c", &choice);
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
     198:	02000001 	andeq	r0, r0, #1
     19c:	03aa0801 			; <UNDEFINED> instruction: 0x03aa0801
        if (choice == 'A' || choice == 'a'){
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
     1a4:	0a000001 	beq	1b0 <root+0x50>
     1a8:	0000031b 	andeq	r0, r0, fp, lsl r3
            proceed Adjust_Intervals;
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
            proceed Monitor;
     1b0:	01000001 	tsteq	r0, r1
        proceed Get_Choice;
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
     1bc:	d2090000 	andle	r0, r9, #0
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	05000002 	streq	r0, [r0, #-2]
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
        processSettingsInput(settings);
     1cc:	000005ed 	andeq	r0, r0, sp, ror #11
        proceed Show_Menu;
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
     1d4:	04000000 	streq	r0, [r0], #-0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d8:	00047109 	andeq	r7, r4, r9, lsl #2
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
     1e0:	000000b8 	strheq	r0, [r0], -r8
     1e4:	13030006 	movwne	r0, #12294	; 0x3006
     1e8:	05000004 	streq	r0, [r0, #-4]
        proceed Show_Menu;
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
     1f0:	e60c0000 	str	r0, [ip], -r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
        displayCycle = YES;
     1fc:	00360a00 	eorseq	r0, r6, r0, lsl #20
        ser_inf(Await_Stop, "%c", ch);
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
     208:	07010100 	streq	r0, [r1, -r0, lsl #2]
        proceed Await_Stop;
     20c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     210:	00000235 	andeq	r0, r0, r5, lsr r2
     214:	00046408 	andeq	r6, r4, r8, lsl #8
        leds(1, 0);
     218:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     21c:	000000ac 	andeq	r0, r0, ip, lsr #1
     220:	00010701 	andeq	r0, r1, r1, lsl #14
     224:	00003108 	andeq	r3, r0, r8, lsl #2
     228:	03940600 	orrseq	r0, r4, #0, 12
        leds(0, 0);
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
     230:	00000101 	andeq	r0, r0, r1, lsl #2
     234:	02840300 	addeq	r0, r4, #0, 6
     238:	96060000 	strls	r0, [r6], -r0
     23c:	00020b03 	andeq	r0, r2, r3, lsl #22
     240:	02350500 	eorseq	r0, r5, #0, 10
        } else if (choice == 'S' || choice == 's') {
     244:	410c0000 	mrsmi	r0, (UNDEF: 12)
            proceed Stop;
     248:	51000002 	tstpl	r0, r2
        } else if (choice == 'V' || choice == 'v') {
     24c:	0d000002 	stceq	0, cr0, [r0, #-8]
            proceed View_Settings;
     250:	02460500 	subeq	r0, r6, #0, 10
        } else if (choice == 'M' || choice == 'm') {
     254:	ed0a0000 	stc	0, cr0, [sl, #-0]
            proceed Monitor;
     258:	06000002 	streq	r0, [r0], -r2
     25c:	0251179c 	subseq	r1, r1, #156, 14	; 0x2700000
     260:	01010000 	mrseq	r0, (UNDEF: 1)
     264:	0000a70c 	andeq	sl, r0, ip, lsl #14
     268:	00026f00 	andeq	r6, r2, r0, lsl #30
     26c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     270:	00000264 	andeq	r0, r0, r4, ror #4
     274:	0003930a 	andeq	r9, r3, sl, lsl #6
     278:	13060700 	movwne	r0, #26368	; 0x6700
     27c:	0000026f 	andeq	r0, r0, pc, ror #4
     280:	340a0101 	strcc	r0, [sl], #-257	; 0xfffffeff
     284:	05000001 	streq	r0, [r0, #-1]
     288:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
static void devinit_uart (int devnum) {
     28c:	01010000 	mrseq	r0, (UNDEF: 1)
	adddevfunc (ioreq_uart_a, devnum);
     290:	00047e0e 	andeq	r7, r4, lr, lsl #28
     294:	016e0800 	cmneq	lr, r0, lsl #16
void udelay (volatile word n) {
     298:	00029d10 	andeq	r9, r2, r0, lsl sp
     29c:	a3040b00 	movwge	r0, #19200	; 0x4b00
	while (n) {
     2a0:	0f000002 	svceq	0x00000002
     2a4:	0002af01 	andeq	sl, r2, r1, lsl #30
}
     2a8:	009b1000 	addseq	r1, fp, r0
	while (n--);
     2ac:	0c000000 	stceq	0, cr0, [r0], {-0}
     2b0:	000001a2 	andeq	r0, r0, r2, lsr #3
     2b4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
		n--;
     2b8:	af05000d 	svcge	0x0005000d
     2bc:	11000002 	tstne	r0, r2
     2c0:	00000444 	andeq	r0, r0, r4, asr #8
void mdelay (volatile word n) {
     2c4:	13017f08 	movwne	r7, #7944	; 0x1f08
     2c8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
	while (n) {
     2cc:	8b110101 	blhi	4406d8 <__ccfg+0x420730>
     2d0:	08000003 	stmdaeq	r0, {r0, r1}
}
     2d4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
		udelay (999);
     2d8:	01000000 	mrseq	r0, (UNDEF: 0)
     2dc:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
		n--;
     2e0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     2e4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
     2e8:	01010000 	mrseq	r0, (UNDEF: 1)
     2ec:	03080812 	movweq	r0, #34834	; 0x8812
void __pi_ondomain (lword d) {
     2f0:	03130903 	tsteq	r3, #49152	; 0xc000
     2f4:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
		if (__pi_systat.effpdm > 1)
     2f8:	08000021 	stmdaeq	r0, {r0, r5}
     2fc:	9b070307 	blls	1c0f20 <__ccfg+0x1a0f78>
			__pi_systat.effpdm = 1;
     300:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
     304:	00053f13 	andeq	r3, r5, r3, lsl pc
     308:	03080800 	movweq	r0, #34816	; 0x8800
     30c:	0000ce08 	andeq	ip, r0, r8, lsl #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	0e000400 	cfcpyseq	mvf0, mvf0
     314:	00000264 	andeq	r0, r0, r4, ror #4
     318:	03030908 	movweq	r0, #14600	; 0x3908
	__pi_systat.ondmns |= d;
     31c:	000002ec 	andeq	r0, r0, ip, ror #5
     320:	00048d14 	andeq	r8, r4, r4, lsl sp
}
     324:	0b083000 	bleq	20c32c <__ccfg+0x1ec384>
     328:	03830803 	orreq	r0, r3, #196608	; 0x30000
void __pi_syserror (word ec, const char *m) {
     32c:	86130000 	ldrhi	r0, [r3], -r0
	diag ("SYSERR: %x, %s", ec, m);
     330:	08000004 	stmdaeq	r0, {r2}
     334:	9b070314 	blls	1c0f8c <__ccfg+0x1a0fe4>
  __ASM volatile ("cpsid i" : : : "memory");
     338:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	0002dc13 	andeq	sp, r2, r3, lsl ip
     340:	03150800 	tsteq	r5, #0, 16
     344:	00009b07 	andeq	r9, r0, r7, lsl #22
		all_leds_blink;
     348:	81130200 	tsthi	r3, r0, lsl #4
     34c:	08000004 	stmdaeq	r0, {r2}
     350:	900a0316 	andls	r0, sl, r6, lsl r3
     354:	04000002 	streq	r0, [r0], #-2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
     35c:	03170800 	tsteq	r7, #0, 16
     360:	0000ce08 	andeq	ip, r0, r8, lsl #28
     364:	3d130800 	ldccc	8, cr0, [r3, #-0]
     368:	08000004 	stmdaeq	r0, {r2}
     36c:	830f0318 	movwhi	r0, #62232	; 0xf318
	while (1) {
     370:	0c000003 	stceq	0, cr0, [r0], {3}
     374:	0002d713 	andeq	sp, r2, r3, lsl r7
     378:	03190800 	tsteq	r9, #0, 16
     37c:	00039315 	andeq	r9, r3, r5, lsl r3
void tci_run_delay_timer () {
     380:	0c002c00 	stceq	12, cr2, [r0], {-0}
	setdel = __pi_mintk - __pi_old;
     384:	00000313 	andeq	r0, r0, r3, lsl r3
     388:	00000393 	muleq	r0, r3, r3
     38c:	00008815 	andeq	r8, r0, r5, lsl r8
     390:	0b000300 	bleq	f98 <delay+0xc>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	00032004 	andeq	r2, r3, r4
     398:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
     39c:	1c080000 	stcne	0, cr0, [r8], {-0}
     3a0:	03201b03 			; <UNDEFINED> instruction: 0x03201b03
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	81110000 	tsthi	r1, r0
	sti_tim;
     3a8:	08000003 	stmdaeq	r0, {r0, r1}
}
     3ac:	b514031e 	ldrlt	r0, [r4, #-798]	; 0xfffffce2
     3b0:	01000003 	tsteq	r0, r3
     3b4:	99040b01 	stmdbls	r4, {r0, r8, r9, fp}
     3b8:	07000003 	streq	r0, [r0, -r3]
     3bc:	090b0110 	stmdbeq	fp, {r4, r8}
	cli_aux;
     3c0:	000003f9 	strdeq	r0, [r0], -r9
     3c4:	64656c16 	strbtvs	r6, [r5], #-3094	; 0xfffff3ea
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	090c0100 	stmdbeq	ip, {r8}
     3cc:	00000081 	andeq	r0, r0, r1, lsl #1
     3d0:	042d0900 	strteq	r0, [sp], #-2304	; 0xfffff700
     3d4:	0d010000 	stceq	0, cr0, [r1, #-0]
	sti_aux;
     3d8:	00019b0a 	andeq	r9, r1, sl, lsl #22
}
     3dc:	bd090400 	cfstrslt	mvf0, [r9, #-0]
     3e0:	01000003 	tsteq	r0, r3
     3e4:	0081090e 	addeq	r0, r1, lr, lsl #18
void AONRTCIntHandler () {
     3e8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	0000034d 	andeq	r0, r0, sp, asr #6
     3f0:	81090f01 	tsthi	r9, r1, lsl #30
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	0c000000 	stceq	0, cr0, [r0], {-0}
		if (__pi_utims [0] == 0)
     3f8:	04a30300 	strteq	r0, [r3], #768	; 0x300
     3fc:	10010000 	andne	r0, r1, r0
		if (*(__pi_utims [0])) {
     400:	0003bb03 	andeq	fp, r3, r3, lsl #22
     404:	015b1700 	cmpeq	fp, r0, lsl #14
			(*(__pi_utims [0]))--;
     408:	12010000 	andne	r0, r1, #0
		if (__pi_utims [1] == 0)
     40c:	0003f90a 	andeq	pc, r3, sl, lsl #18
		if (*(__pi_utims [1])) {
     410:	03050100 	movweq	r0, #20736	; 0x5100
			aux_timer_inactive = 0;
     414:	20000054 	andcs	r0, r0, r4, asr r0
			(*(__pi_utims [1]))--;
     418:	0002c917 	andeq	ip, r2, r7, lsl r9
		if (__pi_utims [2] == 0)
     41c:	0a130100 	beq	4c0824 <__ccfg+0x4a087c>
		if (*(__pi_utims [2])) {
     420:	000003f9 	strdeq	r0, [r0], -r9
			(*(__pi_utims [2]))--;
     424:	64030501 	strvs	r0, [r3], #-1281	; 0xfffffaff
		if (__pi_utims [3] != 0) {
     428:	0c200000 	stceq	0, cr0, [r0], #-0
			if (*(__pi_utims [3])) {
     42c:	000003f9 	strdeq	r0, [r0], -r9
				aux_timer_inactive = 0;
     430:	0000043b 	andeq	r0, r0, fp, lsr r4
				(*(__pi_utims [3]))--;
     434:	00008815 	andeq	r8, r0, r5, lsl r8
	if (__pi_systat.ledsts) {
     438:	17000100 	strne	r0, [r0, -r0, lsl #2]
     43c:	000003e7 	andeq	r0, r0, r7, ror #7
		if (__pi_systat.ledblc++ == 0) {
     440:	2b0a1501 	blcs	28584c <__ccfg+0x2658a4>
     444:	01000004 	tsteq	r0, r4
			if (__pi_systat.ledblk) {
     448:	00740305 	rsbseq	r0, r4, r5, lsl #6
     44c:	8d172000 	ldchi	0, cr2, [r7, #-0]
     450:	01000002 	tsteq	r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	00810517 	addeq	r0, r1, r7, lsl r5
     458:	05010000 	streq	r0, [r1, #-0]
				if (__pi_systat.ledsts & 0x2)
     45c:	00009403 	andeq	r9, r0, r3, lsl #8
     460:	6e4f1820 	cdpvs	8, 4, cr1, cr15, cr0, {1}
     464:	09190100 	ldmdbeq	r9, {r8}
				if (__pi_systat.ledsts & 0x4)
     468:	0000008f 	andeq	r0, r0, pc, lsl #1
				__pi_systat.ledblk = 0;
     46c:	00030501 	andeq	r0, r3, r1, lsl #10
     470:	17000000 	strne	r0, [r0, -r0]
			if (__pi_systat.fstblk)
     474:	00000457 	andeq	r0, r0, r7, asr r4
     478:	8f091a01 	svchi	0x00091a01
				__pi_systat.ledblc = 200;
     47c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (events & AON_RTC_EVFLAGS_CH0) {
     480:	00000305 	andeq	r0, r0, r5, lsl #6
		cli_tim;
     484:	01192000 	tsteq	r9, r0
		__pi_new += setdel;
     488:	000004ac 	andeq	r0, r0, ip, lsr #9
     48c:	01066301 	tsteq	r6, r1, lsl #6
		setdel = 0;
     490:	00000160 	andeq	r0, r0, r0, ror #2
		RISE_N_SHINE;
     494:	0000028c 	andeq	r0, r0, ip, lsl #5
		__pi_new += setdel;
     498:	05ad9c01 	streq	r9, [sp, #3073]!	; 0xc01
		RISE_N_SHINE;
     49c:	b81a0000 	ldmdalt	sl, {}	; <UNPREDICTABLE>
     4a0:	01000000 	mrseq	r0, (UNDEF: 0)
		aux_timer_inactive = 1;
     4a4:	009b1163 	addseq	r1, fp, r3, ror #2
     4a8:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x1)
     4ac:	241b0000 	ldrcs	r0, [fp], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4b0:	01000001 	tsteq	r0, r1
     4b4:	01741468 	cmneq	r4, r8, ror #8
				if (__pi_systat.ledsts & 0x2)
     4b8:	471b0000 	ldrmi	r0, [fp, -r0]
     4bc:	01000000 	mrseq	r0, (UNDEF: 0)
     4c0:	0180176d 	orreq	r1, r0, sp, ror #14
				if (__pi_systat.ledsts & 0x8)
     4c4:	a61b0000 	ldrge	r0, [fp], -r0
				__pi_systat.ledblk = 1;
     4c8:	01000000 	mrseq	r0, (UNDEF: 0)
     4cc:	018a1871 	orreq	r1, sl, r1, ror r8
		if (aux_timer_inactive) {
     4d0:	1a1b0000 	bne	6c04d8 <__ccfg+0x6a0530>
			cli_aux;
     4d4:	01000004 	tsteq	r0, r4
     4d8:	0194197a 	orrseq	r1, r4, sl, ror r9
     4dc:	c41b0000 	ldrgt	r0, [fp], #-0
     4e0:	01000003 	tsteq	r0, r3
     4e4:	01b81f8b 			; <UNDEFINED> instruction: 0x01b81f8b
     4e8:	551b0000 	ldrpl	r0, [fp, #-0]
     4ec:	01000003 	tsteq	r0, r3
     4f0:	01c01c8e 	biceq	r1, r0, lr, lsl #25
     4f4:	6b1b0000 	blvs	6c04fc <__ccfg+0x6a0554>
     4f8:	01000003 	tsteq	r0, r3
word tci_update_delay_ticks (Boolean force) {
     4fc:	01d61c95 			; <UNDEFINED> instruction: 0x01d61c95
	cli_tim;
     500:	001b0000 	andseq	r0, fp, r0
     504:	01000000 	mrseq	r0, (UNDEF: 0)
	if (setdel) {
     508:	01f2169f 			; <UNDEFINED> instruction: 0x01f2169f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	fa1b0000 	blx	6c0514 <__ccfg+0x6a056c>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	01000002 	tsteq	r0, r2
     514:	020019a3 	andeq	r1, r0, #2670592	; 0x28c000
     518:	471b0000 	ldrmi	r0, [fp, -r0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	01000001 	tsteq	r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     520:	021013ae 	andseq	r1, r0, #-1207959550	; 0xb8000002
	return NO;
     524:	481c0000 	ldmdami	ip, {}	; <UNPREDICTABLE>
			setdel = 0;
     528:	1d000000 	stcne	0, cr0, [r0, #-0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	000002ad 	andeq	r0, r0, sp, lsr #5
     530:	ad116501 	cfldr32ge	mvfx6, [r1, #-4]
}
     534:	05000005 	streq	r0, [r0, #-5]
		sti_tim;
     538:	00000103 	andeq	r0, r0, r3, lsl #2
		return YES;
     53c:	03441e20 	movteq	r1, #20000	; 0x4e20
     540:	66010000 	strvs	r0, [r1], -r0
     544:	00019512 	andeq	r9, r1, r2, lsl r5
     548:	00601f00 	rsbeq	r1, r0, r0, lsl #30
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	05620000 	strbeq	r0, [r2, #-0]!
	UARTDisable (UART0_BASE);
     550:	771d0000 	ldrvc	r0, [sp, -r0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	01000004 	tsteq	r0, r4
	UARTDisable (UART0_BASE);
     558:	019b0e7b 	orrseq	r0, fp, fp, ror lr
	UARTConfigSetExpClk (UART0_BASE,
     55c:	91020000 	mrsls	r0, (UNDEF: 2)
     560:	00200077 	eoreq	r0, r0, r7, ror r0
     564:	10000002 	andne	r0, r0, r2
     568:	7b000002 	blvc	578 <__pi_uart_setrate+0x2c>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	21000005 	tstcs	r0, r5
     570:	01006863 	tsteq	r0, r3, ror #16
     574:	019b0ea4 	orrseq	r0, fp, r4, lsr #29
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	22000000 	andcs	r0, r0, #0
     57c:	0000074a 	andeq	r0, r0, sl, asr #14
     580:	00000210 	andeq	r0, r0, r0, lsl r2
	urates [0] = rate;
     584:	00000216 	andeq	r0, r0, r6, lsl r2
}
     588:	958daf01 	strls	sl, [sp, #3841]	; 0xf01
     58c:	23000005 	movwcs	r0, #5
     590:	00000759 	andeq	r0, r0, r9, asr r7
     594:	074a2400 	strbeq	r2, [sl, -r0, lsl #8]
     598:	02260000 	eoreq	r0, r6, #0
     59c:	00780000 	rsbseq	r0, r8, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	b0010000 	andlt	r0, r1, r0
     5a4:	07592333 	smmlareq	r9, r3, r3, r2
     5a8:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	019b0c00 	orrseq	r0, fp, r0, lsl #24
     5b0:	05bd0000 	ldreq	r0, [sp, #0]!
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
     5b8:	13000000 	movwne	r0, #0
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	27012500 	strcs	r2, [r1, -r0, lsl #10]
     5c0:	01000003 	tsteq	r0, r3
     5c4:	81010545 	tsthi	r1, r5, asr #10
     5c8:	10000000 	andne	r0, r0, r0
     5cc:	60000001 	andvs	r0, r0, r1
     5d0:	01000001 	tsteq	r0, r1
     5d4:	0006369c 	muleq	r6, ip, r6
	switch (operation) {
     5d8:	00581a00 	subseq	r1, r8, r0, lsl #20
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	45010000 	strmi	r0, [r1, #-0]
     5e0:	00019521 	andeq	r9, r1, r1, lsr #10
     5e4:	00001e00 	andeq	r1, r0, r0, lsl #28
     5e8:	03ee1d00 	mvneq	r1, #0, 26
     5ec:	46010000 	strmi	r0, [r1], -r0
				*buf++ = uart_a_read;
     5f0:	00063609 	andeq	r3, r6, r9, lsl #12
     5f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
			while (len && uart_a_char_available) {
     5f8:	00008426 	andeq	r8, r0, r6, lsr #8
     5fc:	09470100 	stmdbeq	r7, {r8}^
     600:	00000081 	andeq	r0, r0, r1, lsl #1
			if (len != operation) {
     604:	0000003c 	andeq	r0, r0, ip, lsr r0
}
     608:	0002a027 	andeq	sl, r2, r7, lsr #32
     60c:	09490100 	stmdbeq	r9, {r8}^
			uart_a_disable_int;
     610:	00000081 	andeq	r0, r0, r1, lsl #1
			if (uart_a_char_available) {
     614:	01001e00 	tsteq	r0, r0, lsl #28
				*buf++ = uart_a_read;
     618:	4a010000 	bmi	40620 <__ccfg+0x20678>
			uart_a_disable_int;
     61c:	00008109 	andeq	r8, r0, r9, lsl #2
     620:	00201c00 	eoreq	r1, r0, r0, lsl #24
			if (uart_a_char_available) {
     624:	69280000 	stmdbvs	r8!, {}	; <UNPREDICTABLE>
     628:	0e4c0100 	dvfeqe	f0, f4, f0
				uart_a_enable_int;
     62c:	00000081 	andeq	r0, r0, r1, lsl #1
     630:	0000005a 	andeq	r0, r0, sl, asr r0
				goto Redo_rx;
     634:	810c0000 	mrshi	r0, (UNDEF: 12)
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	46000000 	strmi	r0, [r0], -r0
     63c:	15000006 	strne	r0, [r0, #-6]
			return -2;
     640:	00000088 	andeq	r0, r0, r8, lsl #1
     644:	01290002 			; <UNDEFINED> instruction: 0x01290002
				uart_a_write (*buf);
     648:	000000f5 	strdeq	r0, [r0], -r5
     64c:	c8063401 	stmdagt	r6, {r0, sl, ip, sp}
			while (len && uart_a_room_in_tx) {
     650:	10000000 	andne	r0, r0, r0
     654:	01000001 	tsteq	r0, r1
     658:	3c01199c 			; <UNDEFINED> instruction: 0x3c01199c
			if (len != operation) {
     65c:	01000003 	tsteq	r0, r3
			uart_a_disable_int;
     660:	0001061c 	andeq	r0, r1, ip, lsl r6
     664:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
     668:	01000000 	mrseq	r0, (UNDEF: 0)
     66c:	00074a9c 	muleq	r7, ip, sl
				uart_a_enable_int;
     670:	00b81a00 	adcseq	r1, r8, r0, lsl #20
     674:	1c010000 	stcne	0, cr0, [r1], {-0}
				*buf++ = uart_a_read;
     678:	00009b14 	andeq	r9, r0, r4, lsl fp
			if (uart_a_room_in_tx) {
     67c:	00007800 	andeq	r7, r0, r0, lsl #16
				uart_a_write (*buf);
     680:	00101b00 	andseq	r1, r0, r0, lsl #22
     684:	1d010000 	stcne	0, cr0, [r1, #-0]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	00000019 	andeq	r0, r0, r9, lsl r0
     68c:	01111b00 	tsteq	r1, r0, lsl #22
			uart_a_enable_int;
     690:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     694:	00000019 	andeq	r0, r0, r9, lsl r0
     698:	00001f00 	andeq	r1, r0, r0, lsl #30
			return 0;
     69c:	06e30000 	strbteq	r0, [r3], r0
			if (len == UART_CNTRL_SETRATE) {
     6a0:	4d260000 	stcmi	0, cr0, [r6, #-0]
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	01000003 	tsteq	r0, r3
     6a8:	00810d2b 	addeq	r0, r1, fp, lsr #26
     6ac:	00ac0000 	adceq	r0, ip, r0
				syserror (EREQPAR, "uar");
     6b0:	4a220000 	bmi	8806b8 <__ccfg+0x860710>
			syserror (ENOOPER, "uai");
     6b4:	00000007 	andeq	r0, r0, r7
			if (len == UART_CNTRL_GETRATE) {
     6b8:	00000000 	andeq	r0, r0, r0
				return 1;
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6c0:	06cc4929 	strbeq	r4, [ip], r9, lsr #18
			syserror (ENOOPER, "uai");
     6c4:	59230000 	stmdbpl	r3!, {}	; <UNPREDICTABLE>
     6c8:	00000007 	andeq	r0, r0, r7
     6cc:	00074a2a 	andeq	r4, r7, sl, lsr #20
	...
     6d8:	b9290100 	stmdblt	r9!, {r8}
     6dc:	00075923 	andeq	r5, r7, r3, lsr #18
     6e0:	2b000000 	blcs	6e8 <UART0IntHandler>
     6e4:	00000767 	andeq	r0, r0, r7, ror #14
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	01bd1f01 			; <UNDEFINED> instruction: 0x01bd1f01
     6f4:	000006fe 	strdeq	r0, [r0], -lr
     6f8:	00077223 	andeq	r7, r7, r3, lsr #4
     6fc:	672b0000 	strvs	r0, [fp, -r0]!
     700:	00000007 	andeq	r0, r0, r7
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	00000000 	andeq	r0, r0, r0
     708:	01000000 	mrseq	r0, (UNDEF: 0)
		RISE_N_SHINE;
     70c:	19022c1f 	stmdbne	r2, {r0, r1, r2, r3, r4, sl, fp, sp}
     710:	23000007 	movwcs	r0, #7
		i_trigger (devevent (UART_A, READ));
     714:	00000772 	andeq	r0, r0, r2, ror r7
     718:	074a2200 	strbeq	r2, [sl, -r0, lsl #4]
	...
     724:	24010000 	strcs	r0, [r1], #-0
     728:	0007334d 	andeq	r3, r7, sp, asr #6
     72c:	07592300 	ldrbeq	r2, [r9, -r0, lsl #6]
     730:	2a000000 	bcs	738 <UART0IntHandler+0x50>
     734:	0000074a 	andeq	r0, r0, sl, asr #14
	...
     740:	23bd2401 			; <UNDEFINED> instruction: 0x23bd2401
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	00000759 	andeq	r0, r0, r9, asr r7
     748:	af2c0000 	svcge	0x002c0000
     74c:	02000003 	andeq	r0, r0, #3
		i_trigger (devevent (UART_A, WRITE));
     750:	01010154 	tsteq	r1, r4, asr r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	00076703 	andeq	r6, r7, r3, lsl #14
     758:	01662d00 	cmneq	r6, r0, lsl #26
		RISE_N_SHINE;
     75c:	54020000 	strpl	r0, [r2], #-0
     760:	00671901 	rsbeq	r1, r7, r1, lsl #18
     764:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
		i_trigger (devevent (UART_A, WRITE));
     768:	00000025 	andeq	r0, r0, r5, lsr #32
     76c:	01011e02 	tsteq	r1, r2, lsl #28
     770:	662d0301 	strtvs	r0, [sp], -r1, lsl #6
     774:	02000001 	andeq	r0, r0, #1
     778:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
     77c:	00000000 	andeq	r0, r0, r0
     780:	00148c00 	andseq	r8, r4, r0, lsl #24
     784:	b3000300 	movwlt	r0, #768	; 0x300
     788:	04000002 	streq	r0, [r0], #-2
     78c:	00017001 	andeq	r7, r1, r1
     790:	09280c00 	stmdbeq	r8!, {sl, fp}
}
     794:	00c00000 	sbceq	r0, r0, r0
     798:	05200000 	streq	r0, [r0, #-0]!
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	051b0000 	ldreq	r0, [fp, #-0]
     7a4:	01020000 	mrseq	r0, (UNDEF: 2)
void __buttons_setirq (int val) {
     7a8:	0003a306 	andeq	sl, r3, r6, lsl #6
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     7b0:	000003dd 	ldrdeq	r0, [r0], -sp
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	00164803 	andseq	r4, r6, r3, lsl #16
     7b8:	18281000 	stmdane	r8!, {ip}
     7bc:	0000003f 	andeq	r0, r0, pc, lsr r0
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	9d050402 	cfstrsls	mvf0, [r5, #-8]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	02000000 	andeq	r0, r0, #0
     7c8:	00980508 	addseq	r0, r8, r8, lsl #10
     7cc:	fc030000 	stc2	0, cr0, [r3], {-0}
     7d0:	10000021 	andne	r0, r0, r1, lsr #32
     7d4:	0059182e 	subseq	r1, r9, lr, lsr #16
     7d8:	01020000 	mrseq	r0, (UNDEF: 2)
}
     7dc:	0003a108 	andeq	sl, r3, r8, lsl #2
     7e0:	20ea0300 	rsccs	r0, sl, r0, lsl #6
     7e4:	31100000 	tstcc	r0, r0
     7e8:	00006c19 	andeq	r6, r0, r9, lsl ip
void __pinlist_setirq (int val) {
     7ec:	07020200 	streq	r0, [r2, -r0, lsl #4]
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	00000271 	andeq	r0, r0, r1, ror r2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	0017b303 	andseq	fp, r7, r3, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	19341000 	ldmdbne	r4!, {ip}
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	0000007f 	andeq	r0, r0, pc, ror r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
     804:	02000000 	andeq	r0, r0, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	006d0708 	rsbeq	r0, sp, r8, lsl #14
     80c:	04040000 	streq	r0, [r4], #-0
     810:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
	for (i = 0; i < N_PINLIST; i++) {
     814:	07040200 	streq	r0, [r4, -r0, lsl #4]
}
     818:	00000077 	andeq	r0, r0, r7, ror r0
     81c:	0003fd03 	andeq	pc, r3, r3, lsl #26
     820:	12261100 	eorne	r1, r6, #0, 2
     824:	0000004d 	andeq	r0, r0, sp, asr #32
void GPIOIntHandler () {
     828:	0015c003 	andseq	ip, r5, r3
if (buttons_int) {
     82c:	12271100 	eorne	r1, r7, #0, 2
     830:	00000060 	andeq	r0, r0, r0, rrx
	buttons_disable ();
     834:	0000a705 	andeq	sl, r0, r5, lsl #14
     838:	00a70600 	adceq	r0, r7, r0, lsl #12
	i_trigger ((aword)&__button_list);
     83c:	06030000 	streq	r0, [r3], -r0
     840:	11000009 	tstne	r0, r9
     844:	00331228 	eorseq	r1, r3, r8, lsr #4
     848:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
     84c:	11000013 	tstne	r0, r3, lsl r0
     850:	004d122b 	subeq	r1, sp, fp, lsr #4
     854:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
     858:	05000000 	streq	r0, [r0, #-0]
     85c:	000000c9 	andeq	r0, r0, r9, asr #1
     860:	00161103 	andseq	r1, r6, r3, lsl #2
     864:	122c1100 	eorne	r1, ip, #0, 2
	RISE_N_SHINE;
     868:	00000073 	andeq	r0, r0, r3, ror r0
     86c:	0000df05 	andeq	sp, r0, r5, lsl #30
     870:	02a70300 	adceq	r0, r7, #0, 6
if (pin_sensor_int) {
     874:	2d110000 	ldccs	0, cr0, [r1, #-0]
     878:	00007312 	andeq	r7, r0, r2, lsl r3
	i_trigger ((aword)(&__input_pins));
     87c:	07620300 	strbeq	r0, [r2, -r0, lsl #6]!
     880:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     884:	00010810 	andeq	r0, r1, r0, lsl r8
     888:	a7040700 	strge	r0, [r4, -r0, lsl #14]
     88c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     890:	09321108 	ldmdbeq	r2!, {r3, r8, ip}
     894:	0000019c 	muleq	r0, ip, r1
     898:	0002c209 	andeq	ip, r2, r9, lsl #4
     89c:	07341100 	ldreq	r1, [r4, -r0, lsl #2]!
     8a0:	000000c9 	andeq	r0, r0, r9, asr #1
     8a4:	00070101 	andeq	r0, r7, r1, lsl #2
	__pinsen_disable_and_clear;
     8a8:	00009109 	andeq	r9, r0, r9, lsl #2
	RISE_N_SHINE;
     8ac:	03351100 	teqeq	r5, #0, 2
     8b0:	000000c9 	andeq	r0, r0, r9, asr #1
     8b4:	00060101 	andeq	r0, r6, r1, lsl #2
}
     8b8:	00029909 	andeq	r9, r2, r9, lsl #18
     8bc:	03361100 	teqeq	r6, #0, 2
     8c0:	000000c9 	andeq	r0, r0, r9, asr #1
     8c4:	00050101 	andeq	r0, r5, r1, lsl #2
     8c8:	00040c09 	andeq	r0, r4, r9, lsl #24
void system_init () {
     8cc:	03371100 	teqeq	r7, #0, 2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	000000c9 	andeq	r0, r0, r9, asr #1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	00040101 	andeq	r0, r4, r1, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	00040509 	andeq	r0, r4, r9, lsl #10
     8dc:	03381100 	teqeq	r8, #0, 2
     8e0:	000000c9 	andeq	r0, r0, r9, asr #1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	00000401 	andeq	r0, r0, r1, lsl #8
     8e8:	0003f60a 	andeq	pc, r3, sl, lsl #12
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	073a1100 	ldreq	r1, [sl, -r0, lsl #2]!
     8f0:	000000c9 	andeq	r0, r0, r9, asr #1
     8f4:	00400a01 	subeq	r0, r0, r1, lsl #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	3c110000 	ldccc	0, cr0, [r1], {-0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	0000c903 	andeq	ip, r0, r3, lsl #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	660a0200 	strvs	r0, [sl], -r0, lsl #4
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	11000000 	mrsne	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     908:	00c9033d 	sbceq	r0, r9, sp, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     90c:	0a030000 	beq	c0914 <__ccfg+0xa096c>
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	00000154 	andeq	r0, r0, r4, asr r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	df083f11 	svcle	0x00083f11
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	04000000 	streq	r0, [r0], #-0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
     920:	41110000 	tstmi	r1, r0
     924:	00010e03 	andeq	r0, r1, r3, lsl #28
     928:	019c0600 	orrseq	r0, ip, r0, lsl #12
		if (port_confs [i] & 0x80)
     92c:	b60b0000 	strlt	r0, [fp], -r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     930:	11000002 	tstne	r0, r2
     934:	01a81a43 			; <UNDEFINED> instruction: 0x01a81a43
		if (port_confs [i] & 0x40)
     938:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	00030d0b 	andeq	r0, r3, fp, lsl #26
     940:	0e451100 	dvfeqs	f1, f5, f0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     944:	000001c9 	andeq	r0, r0, r9, asr #3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	000001cf 	andeq	r0, r0, pc, asr #3
	all_leds_blink;
     950:	aa080102 	bge	200d60 <__ccfg+0x1e0db8>
     954:	05000003 	streq	r0, [r0, #-3]
     958:	000001cf 	andeq	r0, r0, pc, asr #3
     95c:	00031b0b 	andeq	r1, r3, fp, lsl #22
     960:	1e451100 	dvfnes	f1, f5, f0
     964:	000001c9 	andeq	r0, r0, r9, asr #3
     968:	08080101 	stmdaeq	r8, {r0, r8}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	1a098f12 	bne	2645bc <__ccfg+0x244614>
     970:	0a000002 	beq	980 <system_init+0xb4>
     974:	000002d2 	ldrdeq	r0, [r0], -r2
     978:	730b9012 	movwvc	r9, #45074	; 0xb012
     97c:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	0005ed0a 	andeq	lr, r5, sl, lsl #26
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	08911200 	ldmeq	r1, {r9, ip}
     988:	000000a7 	andeq	r0, r0, r7, lsr #1
	IntEnable (INT_AON_RTC_COMB);
     98c:	04710a04 	ldrbteq	r0, [r1], #-2564	; 0xfffff5fc
     990:	92120000 	andsls	r0, r2, #0
     994:	0000d510 	andeq	sp, r0, r0, lsl r5
	__pi_malloc_init ();
     998:	03000600 	movweq	r0, #1536	; 0x600
	IntEnable (INT_AON_GPIO_EDGE);
     99c:	00000413 	andeq	r0, r0, r3, lsl r4
     9a0:	e9039312 	stmdb	r3, {r1, r4, r8, r9, ip, pc}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	05000001 	streq	r0, [r0, #-1]
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	0000021a 	andeq	r0, r0, sl, lsl r2
     9ac:	00021a0c 	andeq	r1, r2, ip, lsl #20
     9b0:	00023600 	andeq	r3, r2, r0, lsl #12
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b4:	0b000d00 	bleq	3dbc <__exidx_end+0x1148>
     9b8:	00000036 	andeq	r0, r0, r6, lsr r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	2b0f9912 	blcs	3e6e0c <__ccfg+0x3c6e64>
     9c0:	01000002 	tsteq	r0, r2
     9c4:	da040701 	ble	1025d0 <__ccfg+0xe2628>
	urates [0] = UART_RATE / 100;
     9c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9cc:	09911301 	ldmibeq	r1, {r0, r8, r9, ip}
	reinit_uart ();
     9d0:	00000274 	andeq	r0, r0, r4, ror r2
	EXTRA_INITIALIZERS;
     9d4:	00046409 	andeq	r6, r4, r9, lsl #8
     9d8:	07931300 	ldreq	r1, [r3, r0, lsl #6]
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	000000c9 	andeq	r0, r0, r9, asr #1
     9e0:	00010701 	andeq	r0, r1, r1, lsl #14
     9e4:	00003109 	andeq	r3, r0, r9, lsl #2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e8:	03941300 	orrseq	r1, r4, #0, 6
     9ec:	000000c9 	andeq	r0, r0, r9, asr #1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9f0:	00000101 	andeq	r0, r0, r1, lsl #2
     9f4:	02840300 	addeq	r0, r4, #0, 6
			devinit [i] . init (devinit [i] . param);
     9f8:	96130000 	ldrls	r0, [r3], -r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	00024a03 	andeq	r4, r2, r3, lsl #20
     a00:	02740500 	rsbseq	r0, r4, #0, 10
     a04:	800c0000 	andhi	r0, ip, r0
	IntEnable (INT_UART0_COMB);
     a08:	90000002 	andls	r0, r0, r2
     a0c:	0d000002 	stceq	0, cr0, [r0, #-8]
}
     a10:	02850500 	addeq	r0, r5, #0, 10
	tci_run_auxiliary_timer ();
     a14:	ed0b0000 	stc	0, cr0, [fp, #-0]
		diag ("");
     a18:	13000002 	movwne	r0, #2
     a1c:	0290179c 	addseq	r1, r0, #156, 14	; 0x2700000
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a20:	01010000 	mrseq	r0, (UNDEF: 1)
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	0000b30c 	andeq	fp, r0, ip, lsl #6
		diag ("Leftover RAM: %d bytes",
     a28:	0002ae00 	andeq	sl, r2, r0, lsl #28
     a2c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     a30:	000002a3 	andeq	r0, r0, r3, lsr #5
     a34:	0003930b 	andeq	r9, r3, fp, lsl #6
     a38:	13061400 	movwne	r1, #25600	; 0x6400
     a3c:	000002ae 	andeq	r0, r0, lr, lsr #5
     a40:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
     a44:	12000001 	andne	r0, r0, #1
     a48:	00df0ec3 	sbcseq	r0, pc, r3, asr #29
     a4c:	01010000 	mrseq	r0, (UNDEF: 1)
     a50:	00047e0e 	andeq	r7, r4, lr, lsl #28
     a54:	016e1500 	cmneq	lr, r0, lsl #10
     a58:	0002dc10 	andeq	sp, r2, r0, lsl ip
     a5c:	e2040700 	and	r0, r4, #0, 14
     a60:	0f000002 	svceq	0x00000002
     a64:	0002ee01 	andeq	lr, r2, r1, lsl #28
     a68:	00a71000 	adceq	r1, r7, r0
     a6c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a70:	000001d6 	ldrdeq	r0, [r0], -r6
     a74:	000002f9 	strdeq	r0, [r0], -r9
     a78:	ee05000d 	cdp	0, 0, cr0, cr5, cr13, {0}
     a7c:	11000002 	tstne	r0, r2
     a80:	00000444 	andeq	r0, r0, r4, asr #8
__attribute__ ((noreturn)) void __pi_release () {
     a84:	16017f15 			; <UNDEFINED> instruction: 0x16017f15
     a88:	000002f9 	strdeq	r0, [r0], -r9
     a8c:	8b110101 	blhi	440e98 <__ccfg+0x420ef0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a90:	15000003 	strne	r0, [r0, #-3]
	check_stack_overflow;
     a94:	eb140182 	bl	5010a4 <__ccfg+0x4e10fc>
     a98:	01000000 	mrseq	r0, (UNDEF: 0)
     a9c:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
	update_n_wake (MAX_WORD, NO);
     aa0:	d8150000 	ldmdale	r5, {}	; <UNPREDICTABLE>
     aa4:	00df0e02 	sbcseq	r0, pc, r2, lsl #28
     aa8:	01010000 	mrseq	r0, (UNDEF: 1)
	for_all_tasks (__pi_curr) {
     aac:	03150812 	tsteq	r5, #1179648	; 0x120000
     ab0:	03520903 	cmpeq	r2, #49152	; 0xc000
     ab4:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
  __ASM volatile ("cpsid i" : : : "memory");
     ab8:	15000021 	strne	r0, [r0, #-33]	; 0xffffffdf
	__SLEEP;
     abc:	a7070307 	strge	r0, [r7, -r7, lsl #6]
     ac0:	00000000 	andeq	r0, r0, r0
     ac4:	00053f13 	andeq	r3, r5, r3, lsl pc
     ac8:	03081500 	movweq	r1, #34048	; 0x8500
	system_event_count ++;
     acc:	0000f008 	andeq	pc, r0, r8
     ad0:	0e000400 	cfcpyseq	mvf0, mvf0
	switch (__pi_systat.effpdm) {
     ad4:	00000264 	andeq	r0, r0, r4, ror #4
     ad8:	03030915 	movweq	r0, #14613	; 0x3915
     adc:	0000032b 	andeq	r0, r0, fp, lsr #6
     ae0:	00048d14 	andeq	r8, r4, r4, lsl sp
			__WFI ();
     ae4:	0b153000 	bleq	54caec <__ccfg+0x52cb44>
     ae8:	03c20803 	biceq	r0, r2, #196608	; 0x30000
     aec:	86130000 	ldrhi	r0, [r3], -r0
	check_stack_overflow;
     af0:	15000004 	strne	r0, [r0, #-4]
     af4:	a7080314 	smladge	r8, r4, r3, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af8:	00000000 	andeq	r0, r0, r0
     afc:	0002dc13 	andeq	sp, r2, r3, lsl ip
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	03151500 	tsteq	r5, #0, 10
			goto Redo;
     b04:	0000a708 	andeq	sl, r0, r8, lsl #14
	for_all_tasks (__pi_curr) {
     b08:	81130200 	tsthi	r3, r0, lsl #4
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	15000004 	strne	r0, [r0, #-4]
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b10:	cf0b0316 	svcgt	0x000b0316
     b14:	04000002 	streq	r0, [r0], #-2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
     b1c:	03171500 	tsteq	r7, #0, 10
     b20:	0000f009 	andeq	pc, r0, r9
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b24:	3d130800 	ldccc	8, cr0, [r3, #-0]
     b28:	15000004 	strne	r0, [r0, #-4]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b2c:	c20f0318 	andgt	r0, pc, #24, 6	; 0x60000000
     b30:	0c000003 	stceq	0, cr0, [r0], {3}
			__WFI ();
     b34:	0002d713 	andeq	sp, r2, r3, lsl r7
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	03191500 	tsteq	r9, #0, 10
     b3c:	0003d215 	andeq	sp, r3, r5, lsl r2
}
     b40:	0c002c00 	stceq	12, cr2, [r0], {-0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b44:	00000352 	andeq	r0, r0, r2, asr r3
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b48:	000003d2 	ldrdeq	r0, [r0], -r2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4c:	00009415 	andeq	r9, r0, r5, lsl r4
     b50:	07000300 	streq	r0, [r0, -r0, lsl #6]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	00035f04 	andeq	r5, r3, r4, lsl #30
     b58:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
     b5c:	1c150000 	ldcne	0, cr0, [r5], {-0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	035f1b03 	cmpeq	pc, #3072	; 0xc00
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	81110000 	tsthi	r1, r0
     b68:	15000003 	strne	r0, [r0, #-3]
     b6c:	f414031e 			; <UNDEFINED> instruction: 0xf414031e
     b70:	01000003 	tsteq	r0, r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	d8040701 	stmdale	r4, {r0, r8, r9, sl}
     b78:	0b000003 	bleq	b8c <__pi_release+0x108>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b80:	a7131d16 			; <UNDEFINED> instruction: 0xa7131d16
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	071b0b01 	ldreq	r0, [fp, -r1, lsl #22]
     b8c:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
     b90:	0000b81a 	andeq	fp, r0, sl, lsl r8
			SysCtrlSetRechargeBeforePowerDown
     b94:	0b010100 	bleq	40f9c <__ccfg+0x20ff4>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b98:	000008ab 	andeq	r0, r0, fp, lsr #17
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9c:	b8241e16 	stmdalt	r4!, {r1, r2, r4, r9, sl, fp, ip}
     ba0:	01000000 	mrseq	r0, (UNDEF: 0)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	05da0b01 	ldrbeq	r0, [sl, #2817]	; 0xb01
     ba8:	22160000 	andscs	r0, r6, #0
     bac:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	03010100 	movweq	r0, #4352	; 0x1100
     bb4:	00000523 	andeq	r0, r0, r3, lsr #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	3e104316 	mrccc	3, 0, r4, cr0, cr6, {0}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	07000004 	streq	r0, [r0, -r4]
     bc0:	00044404 	andeq	r4, r4, r4, lsl #8
     bc4:	50010f00 	andpl	r0, r1, r0, lsl #30
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc8:	10000004 	andne	r0, r0, r4
			while (!(AONWUCPowerStatusGet () &
     bcc:	0000008d 	andeq	r0, r0, sp, lsl #1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	16080800 	strne	r0, [r8], -r0, lsl #16
     bd4:	04740946 	ldrbteq	r0, [r4], #-2374	; 0xfffff6ba
     bd8:	860a0000 	strhi	r0, [sl], -r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bdc:	1600000a 	strne	r0, [r0], -sl
     be0:	04320f4a 	ldrteq	r0, [r2], #-3914	; 0xfffff0b6
     be4:	0a000000 	beq	bec <__pi_release+0x168>
     be8:	00000788 	andeq	r0, r0, r8, lsl #15
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	8d074b16 	vstrhi	d4, [r7, #-88]	; 0xffffffa8
     bf0:	04000000 	streq	r0, [r0], #-0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bf4:	05a90300 	streq	r0, [r9, #768]!	; 0x300
     bf8:	4c160000 	ldcmi	0, cr0, [r6], {-0}
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfc:	00045003 	andeq	r5, r4, r3
			reinit_uart ();
     c00:	04740500 	ldrbteq	r0, [r4], #-1280	; 0xfffffb00
     c04:	fc0c0000 	stc2	0, cr0, [ip], {-0}
     c08:	95000000 	strls	r0, [r0, #-0]
}
     c0c:	15000004 	strne	r0, [r0, #-4]
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c10:	00000094 	muleq	r0, r4, r0
     c14:	fb0b0003 	blx	2c0c2a <__ccfg+0x2a0c82>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	01000008 	tsteq	r0, r8
     c1c:	0485120d 	streq	r1, [r5], #525	; 0x20d
     c20:	01010000 	mrseq	r0, (UNDEF: 1)
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c24:	0004800c 	andeq	r8, r4, ip
     c28:	0004b300 	andeq	fp, r4, r0, lsl #6
     c2c:	00941500 	addseq	r1, r4, r0, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c30:	00010000 	andeq	r0, r1, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	0004a305 	andeq	sl, r4, r5, lsl #6
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	090b1600 	stmdbeq	fp, {r9, sl, ip}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c3c:	cf010000 	svcgt	0x00010000
     c40:	0004b318 	andeq	fp, r4, r8, lsl r3
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c44:	00eb0c00 	rsceq	r0, fp, r0, lsl #24
     c48:	04d40000 	ldrbeq	r0, [r4], #0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4c:	94150000 	ldrls	r0, [r5], #-0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	10000000 	andne	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	04c40500 	strbeq	r0, [r4], #1280	; 0x500
     c58:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
			PRCMPowerDomainOff (
     c5c:	01000007 	tsteq	r0, r7
     c60:	04d40dec 	ldrbeq	r0, [r4], #3564	; 0xdec
	__SLEEP;
     c64:	05010000 	streq	r0, [r1, #-0]
     c68:	002bf403 	eoreq	pc, fp, r3, lsl #8
  __ASM volatile ("cpsie i" : : : "memory");
     c6c:	05881800 	streq	r1, [r8, #2048]	; 0x800
	goto Redo;
     c70:	0c010000 	stceq	0, cr0, [r1], {-0}
     c74:	00a70d01 	adceq	r0, r7, r1, lsl #26
     c78:	03050000 	movweq	r0, #20480	; 0x5000
     c7c:	20000016 	andcs	r0, r0, r6, lsl r0
     c80:	00023619 	andeq	r3, r2, r9, lsl r6
     c84:	02d00100 	sbcseq	r0, r0, #0, 2
     c88:	98030508 	stmdals	r3, {r3, r8, sl}
     c8c:	0c200000 	stceq	0, cr0, [r0], #-0
     c90:	000000a7 	andeq	r0, r0, r7, lsr #1
     c94:	0000051e 	andeq	r0, r0, lr, lsl r5
     c98:	00009415 	andeq	r9, r0, r5, lsl r4
     c9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ca0:	00000509 	andeq	r0, r0, r9, lsl #10
     ca4:	0d02d201 	sfmeq	f5, 1, [r2, #-4]
     ca8:	0000050e 	andeq	r0, r0, lr, lsl #10
     cac:	00180305 	andseq	r0, r8, r5, lsl #6
     cb0:	c1192000 	tstgt	r9, r0
     cb4:	01000002 	tsteq	r0, r2
     cb8:	0507048c 	streq	r0, [r7, #-1164]	; 0xfffffb74
     cbc:	0000a003 	andeq	sl, r0, r3
     cc0:	fd011a20 	stc2	10, cr1, [r1, #-128]	; 0xffffff80	; <UNPREDICTABLE>
     cc4:	01000004 	tsteq	r0, r4
     cc8:	01050572 	tsteq	r5, r2, ror r5
     ccc:	0000008d 	andeq	r0, r0, sp, lsl #1
     cd0:	00000cdc 	ldrdeq	r0, [r0], -ip
     cd4:	00000d3c 	andeq	r0, r0, ip, lsr sp
     cd8:	05849c01 	streq	r9, [r4, #3073]	; 0xc01
int main (void) {
     cdc:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	72000005 	andvc	r0, r0, #5
     ce4:	1c000005 	stcne	0, cr0, [r0], {5}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	76010069 	strvc	r0, [r1], -r9, rrx
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	00bd1105 	adcseq	r1, sp, r5, lsl #2
	system_init ();
     cf0:	1d000000 	stcne	0, cr0, [r0, #-0]
	tcv_init ();
     cf4:	000011f7 	strdeq	r1, [r0], -r7
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	00000d1e 	andeq	r0, r0, lr, lsl sp
     cfc:	00000d20 	andeq	r0, r0, r0, lsr #26
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	02058d01 	andeq	r8, r5, #1, 26	; 0x40
     d04:	a2011e00 	andge	r1, r1, #0, 28
     d08:	01000007 	tsteq	r0, r7
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	84210568 	strthi	r0, [r1], #-1384	; 0xfffffa98
     d10:	dc00000a 	stcle	0, cr0, [r0], {10}
	delay (16, 0);
     d14:	0100000c 	tsteq	r0, ip
     d18:	0007e49c 	muleq	r7, ip, r4
     d1c:	07af1f00 	streq	r1, [pc, r0, lsl #30]!
	__pi_release ();
     d20:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
     d24:	11d02001 	bicsne	r2, r0, r1
     d28:	0a840000 	beq	fe100d30 <_estack+0xde0fbd30>
     d2c:	03680000 	cmneq	r8, #0
     d30:	6a010000 	bvs	40d38 <__ccfg+0x20d90>
     d34:	05bf0205 	ldreq	r0, [pc, #517]!	; f41 <__pi_trigger+0xd>
     d38:	df210000 	svcle	0x00210000
static void killev (__pi_pcb_t *pid) {
     d3c:	00000011 	andeq	r0, r0, r1, lsl r0
	wfun = (aword)(pid->code);
     d40:	00081222 	andeq	r1, r8, r2, lsr #4
	for_all_tasks (i) {
     d44:	000a9e00 	andeq	r9, sl, r0, lsl #28
		for (j = 0; j < nevents (i); j++) {
     d48:	00038800 	andeq	r8, r3, r0, lsl #16
     d4c:	02270d00 	eoreq	r0, r7, #0, 26
     d50:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
			    || i->Events [j] . Event == wfun
     d54:	00038823 	andeq	r8, r3, r3, lsr #16
		for (j = 0; j < nevents (i); j++) {
     d58:	08202400 	stmdaeq	r0!, {sl, sp}
			if (i->Events [j] . Event == (aword)pid
     d5c:	0b2c0000 	bleq	b00d64 <__ccfg+0xae0dbc>
     d60:	5c250000 	stcpl	0, cr0, [r5], #-0
     d64:	9e000012 	mcrls	0, 0, r0, cr0, cr2, {0}
				wakeupev (i, j);
     d68:	b000000a 	andlt	r0, r0, sl
     d6c:	01000003 	tsteq	r0, r3
	for_all_tasks (i) {
     d70:	1d0404b3 	cfstrsne	mvf0, [r4, #-716]	; 0xfffffd34
}
     d74:	00001438 	andeq	r1, r0, r8, lsr r4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	00000b16 	andeq	r0, r0, r6, lsl fp
static void qfree (aword *ch) {
     d7c:	00000b22 	andeq	r0, r0, r2, lsr #22
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	0404a401 	streq	sl, [r4], #-1025	; 0xfffffbff
	cc = (aword*)(mpools + MA_NP);
     d84:	00125c1d 	andseq	r5, r2, sp, lsl ip
	m_setnextp (ch, chunk);
     d88:	000b2a00 	andeq	r2, fp, r0, lsl #20
	m_setnextp (cc, ch);
     d8c:	000b2c00 	andeq	r2, fp, r0, lsl #24
}
     d90:	04aa0100 	strteq	r0, [sl], #256	; 0x100
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	12c02504 	sbcne	r2, r0, #4, 10	; 0x1000000
     d98:	0b420000 	bleq	1080da0 <__ccfg+0x1060df8>
     d9c:	03c80000 	biceq	r0, r8, #0
			m_setnextp (cc, m_nextp (chunk));
     da0:	bb010000 	bllt	40da8 <__ccfg+0x20e00>
			m_size (chunk) += m_hdrlen + m_size (ch);
     da4:	43250404 			; <UNDEFINED> instruction: 0x43250404
     da8:	42000014 	andmi	r0, r0, #20
     dac:	e800000b 	stmda	r0, {r0, r1, r3}
     db0:	01000003 	tsteq	r0, r3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	200404c5 	andcs	r0, r4, r5, asr #9
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     db8:	0000128e 	andeq	r1, r0, lr, lsl #5
     dbc:	00000b4a 	andeq	r0, r0, sl, asr #22
     dc0:	00000408 	andeq	r0, r0, r8, lsl #8
			m_setnextp (cc, m_nextp (chunk));
     dc4:	0404c001 	streq	ip, [r4], #-1
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	00000651 	andeq	r0, r0, r1, asr r6
     dcc:	00129d21 	andseq	r9, r2, r1, lsr #26
     dd0:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
     dd4:	5a000012 	bpl	e24 <update_n_wake+0x4>
     dd8:	5c00000b 	stcpl	0, cr0, [r0], {11}
     ddc:	0100000b 	tsteq	r0, fp
			if (m_size (chunk) >= m_size (ch))
     de0:	250404c3 	strcs	r0, [r4, #-1219]	; 0xfffffb3d
     de4:	0000142d 	andeq	r1, r0, sp, lsr #8
     de8:	00000b5e 	andeq	r0, r0, lr, asr fp
		chunk = m_nextp (chunk))
     dec:	00000428 	andeq	r0, r0, r8, lsr #8
     df0:	0404d501 	streq	sp, [r4], #-1281	; 0xfffffaff
     df4:	00144e20 	andseq	r4, r4, r0, lsr #28
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	000b7400 	andeq	r7, fp, r0, lsl #8
	diag_wait (a);
     dfc:	00044800 	andeq	r4, r4, r0, lsl #16
	diag_wchar (c, a);
     e00:	04cc0100 	strbeq	r0, [ip], #256	; 0x100
     e04:	00068e04 	andeq	r8, r6, r4, lsl #28
}
     e08:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
     e0c:	1d000000 	stcne	0, cr0, [r0, #-0]
	syserror (ESTATE, "state");
     e10:	0000125c 	andeq	r1, r0, ip, asr r2
     e14:	00000b98 	muleq	r0, r8, fp
     e18:	00000b9a 	muleq	r0, sl, fp
     e1c:	0404df01 	streq	sp, [r4], #-3841	; 0xfffff0ff
void update_n_wake (word min, Boolean force) {
     e20:	00143825 	andseq	r3, r4, r5, lsr #16
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	000bb800 	andeq	fp, fp, r0, lsl #16
     e28:	00046000 	andeq	r6, r4, r0
     e2c:	04e80100 	strbteq	r0, [r8], #256	; 0x100
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e30:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
     e34:	0bbc0000 	bleq	fef00e3c <_estack+0xdeefbe3c>
     e38:	04780000 	ldrbteq	r0, [r8], #-0
     e3c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
     e40:	8e260d04 	cdphi	13, 2, cr0, cr6, cr4, {0}
     e44:	c6000012 			; <UNDEFINED> instruction: 0xc6000012
     e48:	ca00000b 	bgt	e7c <update_n_wake+0x5c>
     e4c:	0100000b 	tsteq	r0, fp
     e50:	dc0404ed 	cfstrsle	mvf0, [r4], {237}	; 0xed
     e54:	21000006 	tstcs	r0, r6
     e58:	0000129d 	muleq	r0, sp, r2
     e5c:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
     e60:	0bea0000 	bleq	ffa80e68 <_estack+0xdfa7be68>
		for_all_tasks (i) {
     e64:	04900000 	ldreq	r0, [r0], #0
	__pi_mintk = znew + min;
     e68:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
     e6c:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
			if (!twaiting (i))
     e70:	ec000014 	stc	0, cr0, [r0], {20}
     e74:	a800000b 	stmdage	r0, {r0, r1, r3}
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	01000004 	tsteq	r0, r4
     e7c:	080404fa 	stmdaeq	r4, {r1, r3, r4, r5, r6, r7, sl}
     e80:	21000007 	tstcs	r0, r7
     e84:	0000145d 	andeq	r1, r0, sp, asr r4
     e88:	12b61d00 	adcsne	r1, r6, #0, 26
     e8c:	0bf40000 	bleq	ffd00e94 <_estack+0xdfcfbe94>
     e90:	0bf80000 	bleq	ffe00e98 <_estack+0xdfdfbe98>
     e94:	fd010000 	stc2	0, cr0, [r1, #-0]
     e98:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
     e9c:	f8000012 			; <UNDEFINED> instruction: 0xf8000012
     ea0:	fa00000b 	blx	ed4 <update_n_wake+0xb4>
     ea4:	0100000b 	tsteq	r0, fp
				wakeuptm (i);
     ea8:	26040500 	strcs	r0, [r4], -r0, lsl #10
     eac:	00000b95 	muleq	r0, r5, fp
		for_all_tasks (i) {
     eb0:	00000c02 	andeq	r0, r0, r2, lsl #24
				d = i->Timer - znew;
     eb4:	00000c0e 	andeq	r0, r0, lr, lsl #24
     eb8:	04050d01 	streq	r0, [r5], #-3329	; 0xfffff2ff
     ebc:	0000075c 	andeq	r0, r0, ip, asr r7
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	00131127 	andseq	r1, r3, r7, lsr #2
     ec4:	000c0200 	andeq	r0, ip, r0, lsl #4
     ec8:	000c0c00 	andeq	r0, ip, r0, lsl #24
	__pi_old = znew;
     ecc:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
}
     ed0:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
	TCI_RUN_DELAY_TIMER;
     ed4:	20210000 	eorcs	r0, r1, r0
}
     ed8:	00000013 	andeq	r0, r0, r3, lsl r0
     edc:	125c1d00 	subsne	r1, ip, #0, 26
     ee0:	0c360000 	ldceq	0, cr0, [r6], #-0
     ee4:	0c380000 	ldceq	0, cr0, [r8], #-0
     ee8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
void proceed (word state) {
     eec:	741d0405 	ldrvc	r0, [sp], #-1029	; 0xfffffbfb
	prcdstate (__pi_curr, state);
     ef0:	38000012 	stmdacc	r0, {r1, r4}
     ef4:	4800000c 	stmdami	r0, {r2, r3}
	release;
     ef8:	0100000c 	tsteq	r0, ip
     efc:	1d040541 	cfstr32ne	mvfx0, [r4, #-260]	; 0xfffffefc
void __pi_wait (aword event, word state) {
     f00:	0000125c 	andeq	r1, r0, ip, asr r2
	sint j = nevents (__pi_curr);
     f04:	00000c48 	andeq	r0, r0, r8, asr #24
	if (j >= MAX_EVENTS_PER_TASK)
     f08:	00000c4a 	andeq	r0, r0, sl, asr #24
     f0c:	04054401 	streq	r4, [r5], #-1025	; 0xfffffbff
     f10:	00127f25 	andseq	r7, r2, r5, lsr #30
		syserror (ENEVENTS, "sw");
     f14:	000c4a00 	andeq	r4, ip, r0, lsl #20
     f18:	0004c000 	andeq	ip, r4, r0
	setestate (__pi_curr->Events [j], state, event);
     f1c:	05470100 	strbeq	r0, [r7, #-256]	; 0xffffff00
	incwait (__pi_curr);
     f20:	146b250b 	strbtne	r2, [fp], #-1291	; 0xfffffaf5
	setestate (__pi_curr->Events [j], state, event);
     f24:	0c520000 	mraeq	r0, r2, acc0
}
     f28:	04d80000 	ldrbeq	r0, [r8], #0
     f2c:	4b010000 	blmi	40f34 <__ccfg+0x20f8c>
     f30:	00000405 	andeq	r0, r0, r5, lsl #8
void __pi_trigger (aword event) {
     f34:	0011ed28 	andseq	lr, r1, r8, lsr #26
	for_all_tasks (i) {
     f38:	000ab800 	andeq	fp, sl, r0, lsl #16
		for (j = 0; j < nevents (i); j++) {
     f3c:	000aba00 	andeq	fp, sl, r0, lsl #20
     f40:	02270d00 	eoreq	r0, r7, #0, 26
     f44:	0011f728 	andseq	pc, r1, r8, lsr #14
     f48:	000ae600 	andeq	lr, sl, r0, lsl #12
			if (i->Events [j] . Event == event) {
     f4c:	000ae800 	andeq	lr, sl, r0, lsl #16
     f50:	02270d00 	eoreq	r0, r7, #0, 26
     f54:	0011f728 	andseq	pc, r1, r8, lsr #14
				wakeupev (i, j);
     f58:	000c6c00 	andeq	r6, ip, r0, lsl #24
     f5c:	000c6e00 	andeq	r6, ip, r0, lsl #28
	for_all_tasks (i) {
     f60:	02270d00 	eoreq	r0, r7, #0, 26
}
     f64:	1a011a00 	bne	4776c <__ccfg+0x277c4>
aword __pi_join (aword pid, word st) {
     f68:	01000008 	tsteq	r0, r8
	for_all_tasks (i) {
     f6c:	0106055c 	tsteq	r6, ip, asr r5
     f70:	000000a7 	andeq	r0, r0, r7, lsr #1
	...
			__pi_wait (pid, st);
     f7c:	08129c01 	ldmdaeq	r2, {r0, sl, fp, ip, pc}
}
     f80:	73290000 			; <UNDEFINED> instruction: 0x73290000
	for_all_tasks (i) {
     f84:	5e010063 	cdppl	0, 0, cr0, cr1, cr3, {3}
     f88:	00a70705 	adceq	r0, r7, r5, lsl #14
void delay (word d, word state) {
     f8c:	00e20000 	rsceq	r0, r2, r0
	settstate (__pi_curr, state);
     f90:	2a000000 	bcs	f98 <delay+0xc>
     f94:	0000073a 	andeq	r0, r0, sl, lsr r7
     f98:	14048e01 	strne	r8, [r4], #-3585	; 0xfffff1ff
     f9c:	00082a03 	andeq	r2, r8, r3, lsl #20
	update_n_wake (d, YES);
     fa0:	09d32b00 	ldmibeq	r3, {r8, r9, fp, sp}^
     fa4:	ad010000 	stcge	0, cr0, [r1, #-0]
	__pi_curr->Timer = __pi_old + d;
     fa8:	2c000104 	stfcss	f0, [r0], {4}
     fac:	0006de01 	andeq	sp, r6, r1, lsl #28
	inctimer (__pi_curr);
     fb0:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
     fb4:	00000106 	andeq	r0, r0, r6, lsl #2
     fb8:	00000000 	andeq	r0, r0, r0
}
     fbc:	9c010000 	stcls	0, cr0, [r1], {-0}
     fc0:	00000855 	andeq	r0, r0, r5, asr r8
	if (fun == NULL)
     fc4:	0002c42d 	andeq	ip, r2, sp, lsr #8
		return (int) __pi_curr;
     fc8:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
     fcc:	0000a719 	andeq	sl, r0, r9, lsl r7
	for_all_tasks (i)
     fd0:	0000f500 	andeq	pc, r0, r0, lsl #10
}
     fd4:	011e0000 	tsteq	lr, r0
		if (i->code == fun)
     fd8:	00000567 	andeq	r0, r0, r7, ror #10
	for_all_tasks (i)
     fdc:	06040101 	streq	r0, [r4], -r1, lsl #2
     fe0:	000008cc 	andeq	r0, r0, ip, asr #17
     fe4:	00000a84 	andeq	r0, r0, r4, lsl #21
int __pi_strlen (const char *s) {
     fe8:	0a1e9c01 	beq	7a7ff4 <__ccfg+0x78804c>
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	f62e0000 			; <UNDEFINED> instruction: 0xf62e0000
}
     ff0:	fc000009 	stc2	0, cr0, [r0], {9}
	for (i = 0; *(s+i) != '\0'; i++);
     ff4:	86000009 	strhi	r0, [r0], -r9
	while (n--)
     ff8:	1c000008 	stcne	0, cr0, [r0], {8}
     ffc:	6b010069 	blvs	411a8 <__ccfg+0x21200>
		*dest++ = *src++;
    1000:	008d0b04 	addeq	r0, sp, r4, lsl #22
    1004:	25000000 	strcs	r0, [r0, #-0]
    1008:	00001443 	andeq	r1, r0, r3, asr #8
void adddevfunc (devreqfun_t rf, int loc) {
    100c:	000008f6 	strdeq	r0, [r0], -r6
		syserror (EREQPAR, "addv");
    1010:	00000248 	andeq	r0, r0, r8, asr #4
		syserror (ERESOURCE, "addv");
    1014:	02040801 	andeq	r0, r4, #65536	; 0x10000
	if (ioreq [loc] != NULL)
    1018:	000f5420 	andeq	r5, pc, r0, lsr #8
    101c:	0008f800 	andeq	pc, r8, r0, lsl #16
		syserror (ERESOURCE, "addv");
    1020:	00026800 	andeq	r6, r2, r0, lsl #16
	ioreq [loc] = rf;
    1024:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
}
    1028:	00091a02 	andeq	r1, r9, r2, lsl #20
    102c:	02682300 	rsbeq	r2, r8, #0, 6
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
    1034:	3000000f 	andcc	r0, r0, pc
    1038:	00000f6d 	andeq	r0, r0, sp, ror #30
    103c:	00000268 	andeq	r0, r0, r8, ror #4
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1040:	000f6e31 	andeq	r6, pc, r1, lsr lr	; <UNPREDICTABLE>
    1044:	00010800 	andeq	r0, r1, r0, lsl #16
    1048:	13c92200 	bicne	r2, r9, #0, 4
		syserror (ENODEVICE, "io");
    104c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1050:	02880000 	addeq	r0, r8, #0
	if (len == 0)
    1054:	fa010000 	blx	4105c <__ccfg+0x210b4>
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	0008e704 	andeq	lr, r8, r4, lsl #14
    105c:	13e52100 	mvnne	r2, #0, 2
	if (ret >= 0)
    1060:	d8210000 	stmdale	r1!, {}	; <UNPREDICTABLE>
	if (ret == -1) {
    1064:	00000013 	andeq	r0, r0, r3, lsl r0
    1068:	0013f322 	andseq	pc, r3, r2, lsr #6
		if (retry == WNONE)
    106c:	00090600 	andeq	r0, r9, r0, lsl #12
		iowait (dev, operation, retry);
    1070:	0002a000 	andeq	sl, r2, r0
    1074:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    1078:	00000901 	andeq	r0, r0, r1, lsl #18
			release;
    107c:	00140221 	andseq	r0, r4, r1, lsr #4
	if (ret == -2) {
    1080:	10320000 	eorsne	r0, r2, r0
		if (retry != WNONE) {
    1084:	0a000014 	beq	10dc <__pi_malloc_init+0x10>
    1088:	b8000009 	stmdalt	r0, {r0, r3}
			iowait (dev, operation, retry);
    108c:	01000002 	tsteq	r0, r2
    1090:	1f2104fc 	svcne	0x002104fc
			(ioreq [dev]) (NONE, buf, len);
    1094:	00000014 	andeq	r0, r0, r4, lsl r0
    1098:	20000000 	andcs	r0, r0, r0
    109c:	00001410 	andeq	r1, r0, r0, lsl r4
		(ioreq [dev]) (NONE, buf, len);
    10a0:	0000094a 	andeq	r0, r0, sl, asr #18
    10a4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10a8:	02040e01 	andeq	r0, r4, #1, 28
}
    10ac:	00000935 	andeq	r0, r0, r5, lsr r9
	if (retry != WNONE) {
    10b0:	00141f21 	andseq	r1, r4, r1, lsr #30
		delay (-ret - 2, retry);
    10b4:	10200000 	eorne	r0, r0, r0
    10b8:	4c000014 	stcmi	0, cr0, [r0], {20}
    10bc:	f0000009 			; <UNDEFINED> instruction: 0xf0000009
    10c0:	01000002 	tsteq	r0, r2
		release;
    10c4:	5002040e 	andpl	r0, r2, lr, lsl #8
    10c8:	21000009 	tstcs	r0, r9
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	0000141f 	andeq	r1, r0, pc, lsl r4
    10d0:	13f32000 	mvnsne	r2, #0
    10d4:	09660000 	stmdbeq	r6!, {}^	; <UNPREDICTABLE>
    10d8:	03080000 	movweq	r0, #32768	; 0x8000
    10dc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
		syserror (ERESOURCE, "mal1");
    10e0:	096b0204 	stmdbeq	fp!, {r2, r9}^
    10e4:	02210000 	eoreq	r0, r1, #0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	00000014 	andeq	r0, r0, r4, lsl r0
    10ec:	0013f326 	andseq	pc, r3, r6, lsr #6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f0:	00096c00 	andeq	r6, r9, r0, lsl #24
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f4:	00096e00 	andeq	r6, r9, r0, lsl #28
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f8:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    10fc:	00098602 	andeq	r8, r9, r2, lsl #12
    1100:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
}
    1104:	20000000 	andcs	r0, r0, r0
    1108:	00001234 	andeq	r1, r0, r4, lsr r2
    110c:	0000097e 	andeq	r0, r0, lr, ror r9
    1110:	00000320 	andeq	r0, r0, r0, lsr #6
    1114:	02041b01 	andeq	r1, r4, #1024	; 0x400
    1118:	000009a1 	andeq	r0, r0, r1, lsr #19
void __pi_free (aword *ch) {
    111c:	00124321 	andseq	r4, r2, r1, lsr #6
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1120:	cb260000 	blgt	981128 <__ccfg+0x961180>
    1124:	a800000c 	stmdage	r0, {r2, r3}
		syserror (EMALLOC, "malg");
    1128:	d2000009 	andle	r0, r0, #9
    112c:	01000009 	tsteq	r0, r9
	mcfree [MA_NP] += m_size (ch);
    1130:	c802043e 	stmdagt	r2, {r1, r2, r3, r4, r5, sl}
		m_size (ch) ^= MALLOC_UMASK;
    1134:	25000009 	strcs	r0, [r0, #-9]
    1138:	00001443 	andeq	r1, r0, r3, asr #8
	mcfree [MA_NP] += m_size (ch);
    113c:	000009c6 	andeq	r0, r0, r6, asr #19
	QFREE;
    1140:	00000338 	andeq	r0, r0, r8, lsr r3
	if (mevent [MA_NP] . nwait) {
    1144:	02030101 	andeq	r0, r3, #1073741824	; 0x40000000
    1148:	12ab2600 	adcne	r2, fp, #0, 12
		trigger ((aword)(&(mevent [MA_NP])));
    114c:	09e20000 	stmibeq	r2!, {}^	; <UNPREDICTABLE>
		mevent [MA_NP] . nwait --;
    1150:	09f60000 	ldmibeq	r6!, {}^	; <UNPREDICTABLE>
}
    1154:	51010000 	mrspl	r0, (UNDEF: 1)
    1158:	09ef0304 	stmibeq	pc!, {r2, r8, r9}^	; <UNPREDICTABLE>
    115c:	b61d0000 	ldrlt	r0, [sp], -r0
    1160:	e2000012 	and	r0, r0, #18
void kill (aword pid) {
    1164:	e6000009 	str	r0, [r0], -r9
		pid = (aword) __pi_curr;
    1168:	0b000009 	bleq	1194 <kill+0x30>
	j = NULL;
    116c:	00050114 	andeq	r0, r5, r4, lsl r1
	for_all_tasks (i) {
    1170:	000b9533 	andeq	r9, fp, r3, lsr r5
	syserror (EREQPAR, "kpi");
    1174:	0009fc00 	andeq	pc, r9, r0, lsl #24
    1178:	00035000 	andeq	r5, r3, r0
		if ((aword)i == pid) {
    117c:	04720100 	ldrbteq	r0, [r2], #-256	; 0xffffff00
    1180:	13113302 	tstne	r1, #134217728	; 0x8000000
				__PCB = i->Next;
    1184:	09fc0000 	ldmibeq	ip!, {}^	; <UNPREDICTABLE>
			killev (i);
    1188:	03500000 	cmpeq	r0, #0
			ufree (i);
    118c:	bd010000 	stclt	0, cr0, [r1, #-0]
			if (i == __pi_curr)
    1190:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
    1194:	21000013 	tstcs	r0, r3, lsl r0
				release;
    1198:	00001320 	andeq	r1, r0, r0, lsr #6
				j->Next = i->Next;
    119c:	2c000000 	stccs	0, cr0, [r0], {-0}
    11a0:	00084101 	andeq	r4, r8, r1, lsl #2
    11a4:	03ed0100 	mvneq	r0, #0, 2
}
    11a8:	07ec0106 	strbeq	r0, [ip, r6, lsl #2]!
    11ac:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    11b0:	9c010000 	stcls	0, cr0, [r1], {-0}
	if (size < 8)
    11b4:	00000aa7 	andeq	r0, r0, r7, lsr #21
		_size = 2;
    11b8:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	03ed0100 	mvneq	r0, #0, 2
		_size = (((aword)size) + 3) >> 2;
    11c0:	00008d1c 	andeq	r8, r0, ip, lsl sp
		if (m_magic (chunk) != MALLOC_MAGIC)
    11c4:	29500100 	ldmdbcs	r0, {r8}^
		_size = (((aword)size) + 3) >> 2;
    11c8:	ef010069 	svc	0x00010069
		if (mevent [MA_NP] . nfail != 255)
    11cc:	008d0603 	addeq	r0, sp, r3, lsl #12
    11d0:	01260000 			; <UNDEFINED> instruction: 0x01260000
			mevent [MA_NP] . nfail ++;
    11d4:	62290000 	eorvs	r0, r9, #0
		mnfree [MA_NP] = 0;
    11d8:	f001006e 			; <UNDEFINED> instruction: 0xf001006e
    11dc:	00df0803 	sbcseq	r0, pc, r3, lsl #16
		if (m_magic (chunk) != MALLOC_MAGIC)
    11e0:	01440000 	mrseq	r0, (UNDEF: 68)
    11e4:	ed250000 	stc	0, cr0, [r5, #-0]
			syserror (EMALLOC, "malc");
    11e8:	ec000011 	stc	0, cr0, [r0], {17}
    11ec:	08000007 	stmdaeq	r0, {r0, r1, r2}
		if (m_size (chunk) >= _size)
    11f0:	01000002 	tsteq	r0, r2
    11f4:	200203f2 	strdcs	r0, [r2], -r2
		chunk = m_nextp (chunk)) {
    11f8:	000013ac 	andeq	r1, r0, ip, lsr #7
		m_setnextp (cc, m_nextp (chunk));
    11fc:	000007f2 	strdeq	r0, [r0], -r2
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1200:	00000220 	andeq	r0, r0, r0, lsr #4
    1204:	0303f501 	movweq	pc, #13569	; 0x3501	; <UNPREDICTABLE>
			m_size (chunk) = _size;
    1208:	00000a95 	muleq	r0, r5, sl
			cc = chunk + _size + m_hdrlen;
    120c:	0013bb35 	andseq	fp, r3, r5, lsr fp
    1210:	00014400 	andeq	r4, r1, r0, lsl #8
			m_size (cc) = waste - m_hdrlen;
    1214:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
			QFREE;
    1218:	16000011 			; <UNDEFINED> instruction: 0x16000011
		mevent [MA_NP] . nfail = 0;
    121c:	18000008 	stmdane	r0, {r3}
		mcfree [MA_NP] -= m_size (chunk);
    1220:	01000008 	tsteq	r0, r8
    1224:	000203f9 	strdeq	r0, [r2], -r9
    1228:	07e5012c 	strbeq	r0, [r5, ip, lsr #2]!
    122c:	da010000 	ble	41234 <__ccfg+0x2128c>
		m_size (chunk) |= MALLOC_UMASK;
    1230:	a8010603 	stmdage	r1, {r0, r1, r9, sl}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	ec000007 	stc	0, cr0, [r0], {7}
		m_size (chunk) |= MALLOC_UMASK;
    1238:	01000007 	tsteq	r0, r7
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	000b2c9c 	muleq	fp, ip, ip
}
    1240:	61763400 	cmnvs	r6, r0, lsl #8
    1244:	da01006c 	ble	413fc <__ccfg+0x21454>
    1248:	008d1c03 	addeq	r1, sp, r3, lsl #24
    124c:	50010000 	andpl	r0, r1, r0
    1250:	0100691c 	tsteq	r0, ip, lsl r9
    1254:	8d0603dc 	stchi	3, cr0, [r6, #-880]	; 0xfffffc90
    1258:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
aword __pi_fork (fsmcode func, aword data) {
    125c:	01006e62 	tsteq	r0, r2, ror #28
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	df0803dd 	svcle	0x000803dd
    1264:	57000000 	strpl	r0, [r0, -r0]
    1268:	25000001 	strcs	r0, [r0, #-1]
		if ((j = __PCB) == NULL)
    126c:	000011ed 	andeq	r1, r0, sp, ror #3
	i->Next = NULL;
    1270:	000007a8 	andeq	r0, r0, r8, lsr #15
	i->data = data;
    1274:	000001c0 	andeq	r0, r0, r0, asr #3
		if ((j = __PCB) == NULL)
    1278:	0203df01 	andeq	sp, r3, #1, 30
}
    127c:	0013ac20 	andseq	sl, r3, r0, lsr #24
			for (; j->Next != NULL; j = j->Next);
    1280:	0007ac00 	andeq	sl, r7, r0, lsl #24
    1284:	0001d800 	andeq	sp, r1, r0, lsl #16
	return (aword) i;
    1288:	03e20100 	mvneq	r0, #0, 2
    128c:	000b1a03 	andeq	r1, fp, r3, lsl #20
	if (mevent [MA_NP] . nwait != 255)
    1290:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    1294:	016a0000 	cmneq	sl, r0
    1298:	1d000000 	stcne	0, cr0, [r0, #-0]
		mevent [MA_NP] . nwait ++;
    129c:	000011f7 	strdeq	r1, [r0], -r7
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	000007da 	ldrdeq	r0, [r0], -sl
    12a4:	000007dc 	ldrdeq	r0, [r0], -ip
void diag (const char *mess, ...) {
    12a8:	0203e601 	andeq	lr, r3, #1048576	; 0x100000
    12ac:	52011e00 	andpl	r1, r1, #0, 28
    12b0:	01000008 	tsteq	r0, r8
	diag_disable_int (a, is);
    12b4:	280603c6 	stmdacs	r6, {r1, r2, r6, r7, r8, r9}
    12b8:	cc000008 	stcgt	0, cr0, [r0], {8}
    12bc:	01000008 	tsteq	r0, r8
				d = (bc == 16) ? 10000 : 1000000000;
    12c0:	000b959c 	muleq	fp, ip, r5
	diag_disable_int (a, is);
    12c4:	083a2e00 	ldmdaeq	sl!, {r9, sl, fp, sp}
	while (*mess != '\0') {
    12c8:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
	dgout ('\r');
    12cc:	0b6e0000 	bleq	1b812d4 <__ccfg+0x1b6132c>
	dgout ('\n');
    12d0:	6a360000 	bvs	d812d8 <__ccfg+0xd61330>
    12d4:	02030700 	andeq	r0, r3, #0, 14
    12d8:	0000008d 	andeq	r0, r0, sp, lsl #1
	diag_wait (a);
    12dc:	0000017d 	andeq	r0, r0, sp, ror r1
	diag_enable_int (a, is);
    12e0:	07006936 	smladxeq	r0, r6, r9, r6
    12e4:	03f40203 	mvnseq	r0, #805306368	; 0x30000000
}
    12e8:	01900000 	orrseq	r0, r0, r0
    12ec:	37000000 	strcc	r0, [r0, -r0]
    12f0:	0000087a 	andeq	r0, r0, sl, ror r8
		if (*mess == '%') {
    12f4:	000008a8 	andeq	r0, r0, r8, lsr #17
    12f8:	08006a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, sp, lr}
			if (*mess == 'l') {
    12fc:	008d0202 	addeq	r0, sp, r2, lsl #4
    1300:	01a30000 			; <UNDEFINED> instruction: 0x01a30000
				mess++;
    1304:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
				val = va_arg (ap, lword);
    1308:	02020800 	andeq	r0, r2, #0, 16
				bc = 32;
    130c:	000003f4 	strdeq	r0, [r0], -r4
				bc = 16;
    1310:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
			switch (*mess) {
    1314:	66380000 	ldrtvs	r0, [r8], -r0
    1318:	01000006 	tsteq	r0, r6
    131c:	031403bb 	tsteq	r4, #-335544318	; 0xec000002
				dgout ('%');
    1320:	09c3011e 	stmibeq	r3, {r1, r2, r3, r4, r8}^
    1324:	82010000 	andhi	r0, r1, #0
				dgout (*mess);
    1328:	06e80603 	strbteq	r0, [r8], r3, lsl #12
    132c:	07a80000 	streq	r0, [r8, r0]!
			switch (*mess) {
    1330:	9c010000 	stcls	0, cr0, [r1], {-0}
					v = __pi_hex_enc_table [
    1334:	00000c28 	andeq	r0, r0, r8, lsr #24
					i += 4;
    1338:	0007142e 	andeq	r1, r7, lr, lsr #8
					(val >> (bc - i)) & 0xf];
    133c:	00074200 	andeq	r4, r7, r0, lsl #4
    1340:	000be300 	andeq	lr, fp, r0, lsl #6
					dgout (v);
    1344:	006a2900 	rsbeq	r2, sl, r0, lsl #18
    1348:	03038901 	movweq	r8, #14593	; 0x3901
				while (i < bc) {
    134c:	0000008d 	andeq	r0, r0, sp, lsl #1
			mess++;
    1350:	000001c9 	andeq	r0, r0, r9, asr #3
					d /= 10;
    1354:	01006929 	tsteq	r0, r9, lsr #18
				if ((val >> (bc - 1)) & 1) {
    1358:	f4030389 	vst2.32	{d0-d3}, [r3], r9
    135c:	dc000003 	stcle	0, cr0, [r0], {3}
					dgout ('-');
    1360:	00000001 	andeq	r0, r0, r1
    1364:	0001a81b 	andeq	sl, r1, fp, lsl r8
						val |= 0xffff0000;
    1368:	000c0b00 	andeq	r0, ip, r0, lsl #22
    136c:	006a2900 	rsbeq	r2, sl, r0, lsl #18
    1370:	03038f01 	movweq	r8, #16129	; 0x3f01
				d = (bc == 16) ? 10000 : 1000000000;
    1374:	0000008d 	andeq	r0, r0, sp, lsl #1
    1378:	000001ef 	andeq	r0, r0, pc, ror #3
    137c:	01006929 	tsteq	r0, r9, lsr #18
					v = (word) (val / d);
    1380:	f403038f 	vst2.32	{d0-d3}, [r3]
					if (v || d == 1) break;
    1384:	02000003 	andeq	r0, r0, #3
    1388:	00000002 	andeq	r0, r0, r2
					d /= 10;
    138c:	0012e733 	andseq	lr, r2, r3, lsr r7
				d = (bc == 16) ? 10000 : 1000000000;
    1390:	0006e800 	andeq	lr, r6, r0, lsl #16
					dgout (v + '0');
    1394:	00018800 	andeq	r8, r1, r0, lsl #16
    1398:	03840100 	orreq	r0, r4, #0, 2
    139c:	13032102 	movwne	r2, #12546	; 0x3102
					d /= 10;
    13a0:	f6210000 			; <UNDEFINED> instruction: 0xf6210000
					val = val - (v * d);
    13a4:	00000012 	andeq	r0, r0, r2, lsl r0
					if (d == 0) break;
    13a8:	076a3900 	strbeq	r3, [sl, -r0, lsl #18]!
					v = (word) (val / d);
    13ac:	7d010000 	stcvc	0, cr0, [r1, #-0]
    13b0:	8c010d03 	stchi	13, cr0, [r1], {3}
				if (bc == 16)
    13b4:	98000002 	stmdals	r0, {r1}
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	01000002 	tsteq	r0, r2
					val &= 0xffff;
    13bc:	000c529c 	muleq	ip, ip, r2
					dgout (*s);
    13c0:	09212d00 	stmdbeq	r1!, {r8, sl, fp, sp}
					s++;
    13c4:	7d010000 	stcvc	0, cr0, [r1, #-0]
				while (*s != '\0') {
    13c8:	008d1f03 	addeq	r1, sp, r3, lsl #30
    13cc:	02150000 	andseq	r0, r5, #0
			dgout (*mess++);
    13d0:	3a000000 	bcc	13d8 <diag+0x130>
    13d4:	000008ee 	andeq	r0, r0, lr, ror #17
    13d8:	0c031001 	stceq	0, cr1, [r3], {1}
    13dc:	00008d01 	andeq	r8, r0, r1, lsl #26
    13e0:	0005d800 	andeq	sp, r5, r0, lsl #16
}
    13e4:	0006e800 	andeq	lr, r6, r0, lsl #16
    while(1)
    13e8:	cb9c0100 	blgt	fe7017f0 <_estack+0xde6fc7f0>
{
    13ec:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    SetupTrimDevice();
    13f0:	000006eb 	andeq	r0, r0, fp, ror #13
    pui32Src = &_etext;
    13f4:	1e031001 	cdpne	0, 0, cr1, cr3, cr1, {0}
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f8:	0000008d 	andeq	r0, r0, sp, lsl #1
    __asm("    ldr     r0, =_bss\n"
    13fc:	00000233 	andeq	r0, r0, r3, lsr r2
    1400:	6675623b 			; <UNDEFINED> instruction: 0x6675623b
    1404:	03100100 	tsteq	r0, #0, 2
    1408:	0001c92f 	andeq	ip, r1, pc, lsr #18
    140c:	00024600 	andeq	r4, r2, r0, lsl #12
   main();
    1410:	656c3b00 	strbvs	r3, [ip, #-2816]!	; 0xfffff500
    FaultISR();
    1414:	1001006e 	andne	r0, r1, lr, rrx
        *pui32Dest++ = *pui32Src++;
    1418:	008d3803 	addeq	r3, sp, r3, lsl #16
    141c:	02e80000 	rsceq	r0, r8, #0
    1420:	122b0000 	eorne	r0, fp, #0
    1424:	01000006 	tsteq	r0, r6
    1428:	2b010318 	blcs	42090 <__ccfg+0x220e8>
    142c:	00000713 	andeq	r0, r0, r3, lsl r7
    1430:	01033d01 	tsteq	r3, r1, lsl #26
    1434:	000d4427 	andeq	r4, sp, r7, lsr #8
static byte get_byte () {
    1438:	0006ba00 	andeq	fp, r6, r0, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    143c:	0006bc00 	andeq	fp, r6, r0, lsl #24
    1440:	03650100 	cmneq	r5, #0, 2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1444:	0d582115 	ldfeqe	f2, [r8, #-84]	; 0xffffffac
    1448:	00000000 	andeq	r0, r0, r0
		if (ee_inp)
    144c:	0007b438 	andeq	fp, r7, r8, lsr r4
			b |= 1;
    1450:	02fc0100 	rscseq	r0, ip, #0, 2
    1454:	b53c010d 	ldrlt	r0, [ip, #-269]!	; 0xfffffef3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1458:	01000007 	tsteq	r0, r7
	for (b = 0, i = 0; i < 8; i++) {
    145c:	a00d02f0 	strdge	r0, [sp], -r0	; <UNPREDICTABLE>
}
    1460:	d8000005 	stmdale	r0, {r0, r2}
    1464:	01000005 	tsteq	r0, r5
    1468:	000d449c 	muleq	sp, ip, r4
static void put_byte (byte b) {
    146c:	133b2000 	teqne	fp, #0
    1470:	05a00000 	streq	r0, [r0, #0]!
    1474:	01700000 	cmneq	r0, r0
    1478:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
		if (b & 0x80)
    147c:	0d070202 	sfmeq	f0, 4, [r7, #-8]
    1480:	4a210000 	bmi	841488 <__ccfg+0x8214e0>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1484:	00000013 	andeq	r0, r0, r3, lsl r0
	for (i = 0; i < 8; i++) {
    1488:	00137526 	andseq	r7, r3, r6, lsr #10
		b <<= 1;
    148c:	0005ac00 	andeq	sl, r5, r0, lsl #24
	for (i = 0; i < 8; i++) {
    1490:	0005b200 	andeq	fp, r5, r0, lsl #4
}
    1494:	02f60100 	rscseq	r0, r6, #0, 2
    1498:	000d2c02 	andeq	r2, sp, r2, lsl #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    149c:	139e2100 	orrsne	r2, lr, #0, 2
    14a0:	91210000 			; <UNDEFINED> instruction: 0x91210000
	put_byte (cmd);
    14a4:	21000013 	tstcs	r0, r3, lsl r0
    14a8:	00001384 	andeq	r1, r0, r4, lsl #7
}
    14ac:	12ca2700 	sbcne	r2, sl, #0, 14
    14b0:	05b20000 	ldreq	r0, [r2, #0]!
static void wwait (word st, word del) {
    14b4:	05bc0000 	ldreq	r0, [ip, #0]!
    14b8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    14bc:	d9210202 	stmdble	r1!, {r1, r9}
	while (dopen && (rdsr () & 1)) {
    14c0:	00000012 	andeq	r0, r0, r2, lsl r0
    14c4:	e0013d00 	and	r3, r1, r0, lsl #26
    14c8:	01000005 	tsteq	r0, r5
    14cc:	010602eb 	smlatteq	r6, fp, r2, r0
	put_byte (CMD_RDSR);
    14d0:	000000a7 	andeq	r0, r0, r7, lsr #1
	r = get_byte ();
    14d4:	000d6501 	andeq	r6, sp, r1, lsl #10
    14d8:	61753e00 	cmnvs	r5, r0, lsl #28
	while (dopen && (rdsr () & 1)) {
    14dc:	02eb0100 	rsceq	r0, fp, #0, 2
}
    14e0:	000d6527 	andeq	r6, sp, r7, lsr #10
		if (st == WNONE)
    14e4:	04070000 	streq	r0, [r7], #-0
    14e8:	00000226 	andeq	r0, r0, r6, lsr #4
			mdelay (1);
    14ec:	0699011a 			; <UNDEFINED> instruction: 0x0699011a
    14f0:	d4010000 	strle	r0, [r1], #-0
			delay (del, st);
    14f4:	9b010902 	blls	43904 <__ccfg+0x2395c>
    14f8:	4c000000 	stcmi	0, cr0, [r0], {-0}
			release;
    14fc:	a0000005 	andge	r0, r0, r5
    1500:	01000005 	tsteq	r0, r5
    1504:	000dc19c 	muleq	sp, ip, r1
static void ready () {
    1508:	05ed2d00 	strbeq	r2, [sp, #3328]!	; 0xd00
	if (dopen) {
    150c:	d4010000 	strle	r0, [r1], #-0
		wwait (WNONE, 1);
    1510:	00a72102 	adceq	r2, r7, r2, lsl #2
    1514:	03740000 	cmneq	r4, #0
    1518:	753b0000 	ldrvc	r0, [fp, #-0]!
	dstat = 0;
    151c:	d4010061 	strle	r0, [r1], #-97	; 0xffffff9f
}
    1520:	0dc12f02 	stcleq	15, cr2, [r1, #8]
    1524:	03870000 	orreq	r0, r7, #0
    1528:	58330000 	ldmdapl	r3!, {}	; <UNPREDICTABLE>
	udelay (1);
    152c:	6c000013 	stcvs	0, cr0, [r0], {19}
    1530:	58000005 	stmdapl	r0, {r0, r2}
	udelay (1);
    1534:	01000001 	tsteq	r0, r1
		dopen = DOPEN_TEMP;
    1538:	210202e6 	smlattcs	r2, r6, r2, r0
    153c:	00001367 	andeq	r1, r0, r7, ror #6
    1540:	04070000 	streq	r0, [r7], #-0
    1544:	0000021a 	andeq	r0, r0, sl, lsl r2
static void cclose () {
    1548:	09e9011a 	stmibeq	r9!, {r1, r3, r4, r8}^
	if (dopen == DOPEN_TEMP) {
    154c:	8a010000 	bhi	41554 <__ccfg+0x215ac>
    1550:	a7010601 	strge	r0, [r1, -r1, lsl #12]
		wwait (WNONE, 1);
    1554:	fc000000 	stc2	0, cr0, [r0], {-0}
    1558:	4c000004 	stcmi	0, cr0, [r0], {4}
	cmd_0 (CMD_DP);
    155c:	01000005 	tsteq	r0, r5
    1560:	000e0f9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
		dopen = 0;
    1564:	07c12d00 	strbeq	r2, [r1, r0, lsl #26]
}
    1568:	8a010000 	bhi	41570 <__ccfg+0x215c8>
word ee_open () {
    156c:	009b2601 	addseq	r2, fp, r1, lsl #12
	ready ();
    1570:	039a0000 	orrseq	r0, sl, #0
	dopen = DOPEN_PERM;
    1574:	453f0000 	ldrmi	r0, [pc, #-0]!	; 157c <ee_open+0x10>
    1578:	a4010058 	strge	r0, [r1], #-88	; 0xffffffa8
}
    157c:	461d0101 	ldrmi	r0, [sp], -r1, lsl #2
	if (dopen) {
    1580:	1000000f 	andne	r0, r0, pc
    1584:	1a000005 	bne	15a0 <ser_in+0xc>
		dopen = DOPEN_TEMP;
    1588:	01000005 	tsteq	r0, r5
		cclose ();
    158c:	001a019c 	mulseq	sl, ip, r1
}
    1590:	0777011e 			; <UNDEFINED> instruction: 0x0777011e
int ser_in (word st, char *buf, int len) {
    1594:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1598:	03e80601 	mvneq	r0, #1048576	; 0x100000
	if (len == 0)
    159c:	04fc0000 	ldrbteq	r0, [ip], #0
	if (__inpline == NULL) {
    15a0:	9c010000 	stcls	0, cr0, [r1], {-0}
		if ((prcs = running (__inserial)) == 0) {
    15a4:	00000ec1 	andeq	r0, r0, r1, asr #29
    15a8:	00088c40 	andeq	r8, r8, r0, asr #24
			prcs = runthread (__inserial);
    15ac:	013a0100 	teqeq	sl, r0, lsl #2
    15b0:	0000df08 	andeq	sp, r0, r8, lsl #30
			if (prcs == 0) {
    15b4:	0003b800 	andeq	fp, r3, r0, lsl #16
				npwait (st);
    15b8:	55454100 	strbpl	r4, [r5, #-256]	; 0xffffff00
		release;
    15bc:	68010054 	stmdavs	r1, {r2, r4, r6}
		join (prcs, st);
    15c0:	04360101 	ldrteq	r0, [r6], #-257	; 0xfffffeff
    15c4:	40230000 	eormi	r0, r3, r0
	if (*__inpline == NULL) // bin cmd
    15c8:	40000001 	andmi	r0, r0, r1
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15cc:	000006f5 	strdeq	r0, [r0], -r5
	if (prcs >= len)
    15d0:	0b014701 	bleq	531dc <__ccfg+0x33234>
		prcs = len-1;
    15d4:	0000009b 	muleq	r0, fp, r0
	memcpy (buf, __inpline, prcs);
    15d8:	00000403 	andeq	r0, r0, r3, lsl #8
    15dc:	00141042 	andseq	r1, r4, r2, asr #32
    15e0:	00045400 	andeq	r5, r4, r0, lsl #8
	ufree (__inpline);
    15e4:	00045c00 	andeq	r5, r4, r0, lsl #24
	__inpline = NULL;
    15e8:	060d0500 	streq	r0, [sp], -r0, lsl #10
	if (*buf) // if it's NULL, it's a bin cmd
    15ec:	00000e75 	andeq	r0, r0, r5, ror lr
		buf [prcs] = '\0';
    15f0:	00141f21 	andseq	r1, r4, r1, lsr #30
}
    15f4:	10420000 	subne	r0, r2, r0
		prcs = strlen (__inpline);
    15f8:	60000014 	andvs	r0, r0, r4, lsl r0
    15fc:	68000004 	stmdavs	r0, {r2}
		return 0;
    1600:	05000004 	streq	r0, [r0, #-4]
    1604:	0e8f060f 	cdpeq	6, 8, cr0, cr15, cr15, {0}
    1608:	1f210000 	svcne	0x00210000
int ser_outf (word st, const char *m, ...) {
    160c:	00000014 	andeq	r0, r0, r4, lsl r0
    1610:	0013f342 	andseq	pc, r3, r2, asr #6
	if ((prcs = running (__outserial)) != 0) {
    1614:	0004ae00 	andeq	sl, r4, r0, lsl #28
    1618:	0004b600 	andeq	fp, r4, r0, lsl #12
		join (prcs, st);
    161c:	06170500 	ldreq	r0, [r7], -r0, lsl #10
    1620:	00000ea9 	andeq	r0, r0, r9, lsr #29
		release;
    1624:	00140221 	andseq	r0, r4, r1, lsr #4
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1628:	f3430000 	vhadd.u8	d16, d3, d0
    162c:	ba000013 	blt	1680 <ser_inf+0x20>
    1630:	c2000004 	andgt	r0, r0, #4
		umwait (st);
    1634:	05000004 	streq	r0, [r0, #-4]
    1638:	02210619 	eoreq	r0, r1, #26214400	; 0x1900000
	if (runstrand (__outserial, buf) == 0) {
    163c:	00000014 	andeq	r0, r0, r4, lsl r0
    1640:	011e0000 	tsteq	lr, r0
    1644:	00000829 	andeq	r0, r0, r9, lsr #16
		ufree (buf);
    1648:	06012b01 	streq	r2, [r1], -r1, lsl #22
		npwait (st);
    164c:	000003c0 	andeq	r0, r0, r0, asr #7
}
    1650:	000003e8 	andeq	r0, r0, r8, ror #7
    1654:	0ef19c01 	cdpeq	12, 15, cr9, cr1, cr1, {0}
    1658:	25330000 	ldrcs	r0, [r3, #-0]!
    165c:	c800000f 	stmdagt	r0, {r0, r1, r2, r3}
int ser_inf (word st, const char *fmt, ...) {
    1660:	28000003 	stmdacs	r0, {r0, r1}
    1664:	01000001 	tsteq	r0, r1
	if (fmt == NULL)
    1668:	212c0132 			; <UNDEFINED> instruction: 0x212c0132
	if (__inpline == NULL) {
    166c:	00000f38 	andeq	r0, r0, r8, lsr pc
		if ((prcs = running (__inserial)) == 0) {
    1670:	011e0000 	tsteq	lr, r0
    1674:	0000078e 	andeq	r0, r0, lr, lsl #15
			prcs = runthread (__inserial);
    1678:	06011e01 	streq	r1, [r1], -r1, lsl #28
    167c:	00000380 	andeq	r0, r0, r0, lsl #7
			if (prcs == 0) {
    1680:	000003c0 	andeq	r0, r0, r0, asr #7
				npwait (st);
    1684:	0f259c01 	svceq	0x00259c01
		release;
    1688:	25330000 	ldrcs	r0, [r3, #-0]!
		join (prcs, st);
    168c:	9200000f 	andls	r0, r0, #15
    1690:	08000003 	stmdaeq	r0, {r0, r1}
	va_start (ap, fmt);
    1694:	01000001 	tsteq	r0, r1
	prcs = vscan (__inpline, fmt, ap);
    1698:	352c0125 	strcc	r0, [ip, #-293]!	; 0xfffffedb
    169c:	00000f38 	andeq	r0, r0, r8, lsr pc
	ufree (__inpline);
    16a0:	00000442 	andeq	r0, r0, r2, asr #8
	__inpline = NULL;
    16a4:	85440000 	strbhi	r0, [r4, #-0]
}
    16a8:	01000008 	tsteq	r0, r8
    16ac:	01150117 	tsteq	r5, r7, lsl r1
    16b0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		return 0;
    16b4:	000f4603 	andeq	r4, pc, r3, lsl #12
    16b8:	65643e00 	strbvs	r3, [r4, #-3584]!	; 0xfffff200
    16bc:	1701006c 	strne	r0, [r1, -ip, rrx]
strand (__outserial, const char*)
    16c0:	00a72201 	adceq	r2, r7, r1, lsl #4
    16c4:	45000000 	strmi	r0, [r0, #-0]
    16c8:	00000502 	andeq	r0, r0, r2, lsl #10
    16cc:	14010e01 	strne	r0, [r1], #-3585	; 0xfffff1ff
endstrand
    16d0:	000000a7 	andeq	r0, r0, r7, lsr #1
    16d4:	09dd4603 	ldmibeq	sp, {r0, r1, r9, sl, lr}^
	ptr = data;
    16d8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    16dc:	0f7a0314 	svceq	0x007a0314
	if (*ptr)
    16e0:	70470000 	subvc	r0, r7, r0
		len = strlen (ptr);
    16e4:	01006e69 	tsteq	r0, r9, ror #28
    16e8:	008d06f2 	strdeq	r0, [sp], r2
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16ec:	47480000 	strbmi	r0, [r8, -r0]
    16f0:	f4010069 	vst4.16	{d0-d3}, [r1 :128], r9
    16f4:	00008d0b 	andeq	r8, r0, fp, lsl #26
    16f8:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    16fc:	00091301 	andeq	r1, r9, r1, lsl #6
	len -= quant;
    1700:	06980100 	ldreq	r0, [r8], r0, lsl #2
    1704:	00032c01 	andeq	r2, r3, r1, lsl #24
    1708:	00038000 	andeq	r8, r3, r0
	if (len == 0) {
    170c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
		ufree (data);
    1710:	4a000010 	bmi	1758 <__inserial+0x28>
		finish;
    1714:	01006365 	tsteq	r0, r5, ror #6
    1718:	00a71a98 	umlaleq	r1, r7, r8, sl
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    171c:	04550000 	ldrbeq	r0, [r5], #-0
    1720:	6d4a0000 	stclvs	0, cr0, [sl, #-0]
    1724:	2a980100 	bcs	fe601b2c <_estack+0xde5fcb2c>
    1728:	00001024 	andeq	r1, r0, r4, lsr #32
    172c:	00000468 	andeq	r0, r0, r8, ror #8
strand (__inserial, address)
    1730:	0011ed28 	andseq	lr, r1, r8, lsr #26
    1734:	00033800 	andeq	r3, r3, r0, lsl #16
    1738:	00033a00 	andeq	r3, r3, r0, lsl #20
    173c:	02a80100 	adceq	r0, r8, #0, 2
    1740:	00141022 	andseq	r1, r4, r2, lsr #32
	if (__inpline != NULL)
    1744:	00033a00 	andeq	r3, r3, r0, lsl #20
    1748:	0000b800 	andeq	fp, r0, r0, lsl #16
		finish;
    174c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1750:	00000fd9 	ldrdeq	r0, [r0], -r9
    1754:	00141f21 	andseq	r1, r4, r1, lsr #30
    1758:	10220000 	eorne	r0, r2, r0
    175c:	40000014 	andmi	r0, r0, r4, lsl r0
		umwait (IM_INIT);
    1760:	d8000003 	stmdale	r0, {r0, r1}
		release;
    1764:	01000000 	mrseq	r0, (UNDEF: 0)
	savedata (data);
    1768:	0ff303b8 	svceq	0x00f303b8
	len = MAX_LINE_LENGTH;
    176c:	1f210000 	svcne	0x00210000
	io (IM_READ, __cport, READ, ptr, 1);
    1770:	00000014 	andeq	r0, r0, r4, lsl r0
    1774:	0013f322 	andseq	pc, r3, r2, lsr #6
    1778:	00035800 	andeq	r5, r3, r0, lsl #16
    177c:	0000f000 	andeq	pc, r0, r0
	if (ptr == (char*) data) { // new line
    1780:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    1784:	0000100d 	andeq	r1, r0, sp
		if (*ptr == '\0') { // bin cmd
    1788:	00140221 	andseq	r0, r4, r1, lsr #4
			proceed (IM_BIN);
    178c:	f3430000 	vhadd.u8	d16, d3, d0
    1790:	5e000013 	mcrpl	0, 0, r0, cr0, cr3, {0}
		if (*ptr < 0x20)
    1794:	60000003 	andvs	r0, r0, r3
    1798:	01000003 	tsteq	r0, r3
			proceed (IM_READ);
    179c:	022103b8 	eoreq	r0, r1, #184, 6	; 0xe0000002
    17a0:	00000014 	andeq	r0, r0, r4, lsl r0
	if (*ptr == '\n' || *ptr == '\r') {
    17a4:	d6040700 	strle	r0, [r4], -r0, lsl #14
    17a8:	49000001 	stmdbmi	r0, {r0}
    17ac:	0008b401 	andeq	fp, r8, r1, lsl #8
		*ptr = '\0';
    17b0:	06720100 	ldrbteq	r0, [r2], -r0, lsl #2
		__inpline = (char*)data;
    17b4:	00000001 	andeq	r0, r0, r1
		finish;
    17b8:	00000000 	andeq	r0, r0, r0
	if (len) {
    17bc:	ca9c0100 	bgt	fe701bc4 <_estack+0xde6fcbc4>
		ptr++;
    17c0:	4a000010 	bmi	1808 <__inserial+0xd8>
    17c4:	01007473 	tsteq	r0, r3, ror r4
		len--;
    17c8:	00a71872 	adceq	r1, r7, r2, ror r8
	proceed (IM_READ);
    17cc:	04860000 	streq	r0, [r6], #0
	io (IM_BIN, __cport, READ, ptr, 1);
    17d0:	734a0000 	movtvc	r0, #40960	; 0xa000
    17d4:	01006e65 	tsteq	r0, r5, ror #28
    17d8:	02442872 	subeq	r2, r4, #7471104	; 0x720000
    17dc:	04990000 	ldreq	r0, [r9], #0
    17e0:	764a0000 	strbvc	r0, [sl], -r0
	len -= 2;
    17e4:	01006c61 	tsteq	r0, r1, ror #24
	if (len > *ptr + 1) // 1 for 0x04
    17e8:	00fc3572 	rscseq	r3, ip, r2, ror r5
    17ec:	04b70000 	ldrteq	r0, [r7], #0
		len = *ptr + 1;
    17f0:	1d4b0000 	stclne	0, cr0, [fp, #-0]
    17f4:	01000005 	tsteq	r0, r5
	ptr++;
    17f8:	00c90e74 	sbceq	r0, r9, r4, ror lr
	quant = io (IM_BINL, __cport, READ, ptr, len);
    17fc:	03050000 	movweq	r0, #20480	; 0x5000
    1800:	00000000 	andeq	r0, r0, r0
    1804:	000a004c 	andeq	r0, sl, ip, asr #32
    1808:	01780100 	cmneq	r8, r0, lsl #2
    180c:	00000000 	andeq	r0, r0, r0
    1810:	0012204d 	andseq	r2, r2, sp, asr #32
	len -= quant;
    1814:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    1818:	0004f000 	andeq	pc, r4, r0
		finish;
    181c:	03810100 	orreq	r0, r1, #0, 2
	ptr += quant;
    1820:	00120142 	andseq	r0, r2, r2, asr #2
	...
endstrand
    182c:	127e0100 	rsbsne	r0, lr, #0, 2
	proceed (IM_BINL);
    1830:	000010b9 	strheq	r1, [r0], -r9
endstrand
    1834:	0012132f 	andseq	r1, r2, pc, lsr #6
    1838:	2a280000 	bcs	a01840 <__ccfg+0x9e1898>
    183c:	00000012 	andeq	r0, r0, r2, lsl r0
    1840:	00000000 	andeq	r0, r0, r0
    1844:	01000000 	mrseq	r0, (UNDEF: 0)
    1848:	4e000384 	cdpmi	3, 0, cr0, cr0, cr4, {4}
		if (res && (d < n))
    184c:	0009a701 	andeq	sl, r9, r1, lsl #14
    1850:	06620100 	strbteq	r0, [r2], -r0, lsl #2
    1854:	00000001 	andeq	r0, r0, r1
    1858:	00000000 	andeq	r0, r0, r0
			res [d] = (char) c;
    185c:	499c0100 	ldmibmi	ip, {r8}
		d++;
    1860:	0004bc01 	andeq	fp, r4, r1, lsl #24
    1864:	064f0100 	strbeq	r0, [pc], -r0, lsl #2
    1868:	00000001 	andeq	r0, r0, r1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    186c:	00000000 	andeq	r0, r0, r0
    1870:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    1874:	28000011 	stmdacs	r0, {r0, r4}
				enci (10000);
    1878:	00001251 	andeq	r1, r0, r1, asr r2
	...
	d = 0;
    1884:	00035f01 	andeq	r5, r3, r1, lsl #30
		c = *fm++;
    1888:	04f30149 	ldrbteq	r0, [r3], #329	; 0x149
		if (c == '\\') {
    188c:	3b010000 	blcc	41894 <__ccfg+0x218ec>
			if ((c = *fm++) == '\0') {
    1890:	00000106 	andeq	r0, r0, r6, lsl #2
    1894:	00000000 	andeq	r0, r0, r0
				outc ('\\');
    1898:	9c010000 	stcls	0, cr0, [r1], {-0}
			if ((c = *fm++) == '\0') {
    189c:	0000112e 	andeq	r1, r0, lr, lsr #2
				outc ('\\');
    18a0:	0100644a 	tsteq	r0, sl, asr #8
    18a4:	00df1c3b 	sbcseq	r1, pc, fp, lsr ip	; <UNPREDICTABLE>
			outc (c);
    18a8:	04d50000 	ldrbeq	r0, [r5], #0
    18ac:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
			if (c == '\0')
    18b0:	0005b301 	andeq	fp, r5, r1, lsl #6
    18b4:	062b0100 	strteq	r0, [fp], -r0, lsl #2
			outc (c);
    18b8:	0002f001 	andeq	pc, r2, r1
				outc (val);
    18bc:	00032c00 	andeq	r2, r3, r0, lsl #24
				val = (word) va_arg (ap, aword);
    18c0:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
		if (c == '%') {
    18c4:	4a000011 	bmi	1910 <__pi_vfparse+0xa4>
    18c8:	2b010064 	blcs	41a60 <__ccfg+0x21ab8>
			c = *fm++;
    18cc:	0000df1b 	andeq	sp, r0, fp, lsl pc
			switch (c) {
    18d0:	0004f300 	andeq	pc, r4, r0, lsl #6
    18d4:	01490000 	mrseq	r0, (UNDEF: 73)
    18d8:	000007f6 	strdeq	r0, [r0], -r6
    18dc:	01062001 	tsteq	r6, r1
    18e0:	000002c4 	andeq	r0, r0, r4, asr #5
    18e4:	000002ee 	andeq	r0, r0, lr, ror #5
    18e8:	117c9c01 	cmnne	ip, r1, lsl #24
    18ec:	6e4a0000 	cdpvs	0, 4, cr0, cr10, cr0, {0}
				outc ('%');
    18f0:	1c200100 	stfnes	f0, [r0], #-0
    18f4:	000000b8 	strheq	r0, [r0], -r8
				outc (c);
    18f8:	00000511 	andeq	r0, r0, r1, lsl r5
    18fc:	93014900 	movwls	r4, #6400	; 0x1900
    1900:	01000008 	tsteq	r0, r8
				if (c == '\0')
    1904:	98010619 	stmdals	r1, {r0, r3, r4, r9, sl}
				return d;
    1908:	c4000002 	strgt	r0, [r0], #-2
}
    190c:	01000002 	tsteq	r0, r2
    1910:	0011b79c 	mulseq	r1, ip, r7
			switch (c) {
    1914:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
    1918:	b81c1901 	ldmdalt	ip, {r0, r8, fp, ip}
    191c:	01000000 	mrseq	r0, (UNDEF: 0)
				for (i = 12; ; i -= 4) {
    1920:	11b74350 			; <UNDEFINED> instruction: 0x11b74350
				val = (word) va_arg (ap, aword);
    1924:	02ac0000 	adceq	r0, ip, #0
						[ (val >> i) & 0xf ]);
    1928:	02b60000 	adcseq	r0, r6, #0
    192c:	1b010000 	blne	41934 <__ccfg+0x2198c>
    1930:	11c52103 	bicne	r2, r5, r3, lsl #2
					outc (__pi_hex_enc_table
    1934:	00000000 	andeq	r0, r0, r0
    1938:	0009bb50 	andeq	fp, r9, r0, asr fp
					if (i == 0)
    193c:	14150100 	ldrne	r0, [r5], #-256	; 0xffffff00
    1940:	11d00301 	bicsne	r0, r0, r1, lsl #6
				for (i = 12; ; i -= 4) {
    1944:	6e510000 	cdpvs	0, 5, cr0, cr1, cr0, {0}
				val = (word) va_arg (ap, aword);
    1948:	2b150100 	blcs	541d50 <__ccfg+0x521da8>
				if (c == 'd' && (val & 0x8000) != 0) {
    194c:	000000b8 	strheq	r0, [r0], -r8
				val = (word) va_arg (ap, aword);
    1950:	059f5200 	ldreq	r5, [pc, #512]	; 1b58 <vscan+0x6c>
				if (c == 'd' && (val & 0x8000) != 0) {
    1954:	1a030000 	bne	c195c <__ccfg+0xa19b4>
    1958:	03013501 	movweq	r3, #5377	; 0x1501
					outc ('-');
    195c:	000011ed 	andeq	r1, r0, sp, ror #3
    1960:	0009ac53 	andeq	sl, r9, r3, asr ip
					val = (~val) + 1;
    1964:	011a0300 	tsteq	sl, r0, lsl #6
    1968:	00007348 	andeq	r7, r0, r8, asr #6
				for (i = 12; ; i -= 4) {
    196c:	fd540000 	ldc2l	0, cr0, [r4, #-0]
				enci (10000);
    1970:	03000007 	movweq	r0, #7
    1974:	0301355b 	movweq	r3, #5467	; 0x155b
    1978:	00051054 	andeq	r1, r5, r4, asr r0
    197c:	35500300 	ldrbcc	r0, [r0, #-768]	; 0xfffffd00
    1980:	d3550301 	cmple	r5, #67108864	; 0x4000000
    1984:	0f000008 	svceq	0x00000008
    1988:	730101bf 	movwvc	r0, #4543	; 0x11bf
    198c:	03000000 	movweq	r0, #0
    1990:	00001220 	andeq	r1, r0, r0, lsr #4
    1994:	00095f16 	andeq	r5, r9, r6, lsl pc
    1998:	0ec10f00 	cdpeq	15, 12, cr0, cr1, cr0, {0}
    199c:	00000073 	andeq	r0, r0, r3, ror r0
    19a0:	089a5400 	ldmeq	sl, {sl, ip, lr}
    19a4:	900f0000 	andls	r0, pc, r0
    19a8:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    19ac:	000004da 	ldrdeq	r0, [r0], -sl
    19b0:	01017b0f 	tsteq	r1, pc, lsl #22
    19b4:	074d5203 	strbeq	r5, [sp, -r3, lsl #4]
				if (c == 'd' || c == 'u') {
    19b8:	660a0000 	strvs	r0, [sl], -r0
    19bc:	03010103 	movweq	r0, #4355	; 0x1103
					if (c == 'd' &&
    19c0:	00001251 	andeq	r1, r0, r1, asr r2
					val = va_arg (ap, lword);
    19c4:	00072453 	andeq	r2, r7, r3, asr r4
					fm++;
    19c8:	03660a00 	cmneq	r6, #0, 20
					if (c == 'd' &&
    19cc:	0000731f 	andeq	r7, r0, pc, lsl r3
    19d0:	72560000 	subsvc	r0, r6, #0
						outc ('-');
    19d4:	02000008 	andeq	r0, r0, #8
    19d8:	0101014c 	tsteq	r1, ip, asr #2
						val = (~val) + 1;
    19dc:	080b5403 	stmdaeq	fp, {r0, r1, sl, ip, lr}
				enci (10000);
    19e0:	c4020000 	strgt	r0, [r2], #-0
					enci (1000000000UL);
    19e4:	57030101 	strpl	r0, [r3, -r1, lsl #2]
    19e8:	00000626 	andeq	r0, r0, r6, lsr #12
    19ec:	0101ad02 	tsteq	r1, r2, lsl #26
    19f0:	00000073 	andeq	r0, r0, r3, ror r0
    19f4:	05735603 	ldrbeq	r5, [r3, #-1539]!	; 0xfffff9fd
    19f8:	450e0000 	strmi	r0, [lr, #-0]
    19fc:	03010102 	movweq	r0, #4354	; 0x1102
    1a00:	00054558 	andeq	r4, r5, r8, asr r5
    1a04:	022c0e00 	eoreq	r0, ip, #0, 28
    1a08:	00730101 	rsbseq	r0, r3, r1, lsl #2
    1a0c:	52030000 	andpl	r0, r3, #0
    1a10:	00000530 	andeq	r0, r0, r0, lsr r5
    1a14:	0101dc0e 	tsteq	r1, lr, lsl #24
    1a18:	12ab0301 	adcne	r0, fp, #67108864	; 0x4000000
    1a1c:	ea530000 	b	14c1a24 <__ccfg+0x14a1a7c>
    1a20:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1a24:	731f01dc 	tstvc	pc, #220, 2	; 0x37
				} else if (c == 'x') {
    1a28:	00000000 	andeq	r0, r0, r0
					for (i = 28; ; i -= 4) {
    1a2c:	0006ab56 	andeq	sl, r6, r6, asr fp
					val = va_arg (ap, lword);
    1a30:	010f0b00 	tsteq	pc, r0, lsl #22
							[ (val >> i) & 0xf ]);
    1a34:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    1a38:	000005f2 	strdeq	r0, [r0], -r2
						outc (__pi_hex_enc_table
    1a3c:	0101ed0c 	tsteq	r1, ip, lsl #26
    1a40:	08c05403 	stmiaeq	r0, {r0, r1, sl, ip, lr}^
    1a44:	d60c0000 	strle	r0, [ip], -r0
						if (i == 0)
    1a48:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    1a4c:	000005c1 	andeq	r0, r0, r1, asr #11
					for (i = 28; ; i -= 4) {
    1a50:	01044006 	tsteq	r4, r6
					outc ('%');
    1a54:	12e70301 	rscne	r0, r7, #67108864	; 0x4000000
    1a58:	31530000 	cmpcc	r3, r0
    1a5c:	06000007 	streq	r0, [r0], -r7
					outc ('l');
    1a60:	73240440 			; <UNDEFINED> instruction: 0x73240440
    1a64:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1a68:	00055a52 	andeq	r5, r5, r2, asr sl
				outc (val);
    1a6c:	03910600 	orrseq	r0, r1, #0, 12
    1a70:	11030101 	tstne	r3, r1, lsl #2
				while (*st != '\0') {
    1a74:	53000013 	movwpl	r0, #19
    1a78:	00000731 	andeq	r0, r0, r1, lsr r7
    1a7c:	17039106 	strne	r9, [r3, -r6, lsl #2]
    1a80:	00000073 	andeq	r0, r0, r3, ror r0
					outc (*st);
    1a84:	00068c53 	andeq	r8, r6, r3, asr ip
    1a88:	03910600 	orrseq	r0, r1, #0, 12
					st++;
    1a8c:	0000732a 	andeq	r7, r0, sl, lsr #6
		c = *fm++;
    1a90:	72520000 	subsvc	r0, r2, #0
    1a94:	06000009 	streq	r0, [r0], -r9
    1a98:	0101030c 	tsteq	r1, ip, lsl #6
char *vform (char *res, const char *fm, va_list aq) {
    1a9c:	00133b03 	andseq	r3, r3, r3, lsl #22
    1aa0:	07315300 	ldreq	r5, [r1, -r0, lsl #6]!
	if (res != NULL) {
    1aa4:	0c060000 	stceq	0, cr0, [r6], {-0}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1aa8:	00731803 	rsbseq	r1, r3, r3, lsl #16
    1aac:	8c530000 	mrahi	r0, r3, acc0
    1ab0:	06000006 	streq	r0, [r0], -r6
}
    1ab4:	732b030c 			; <UNDEFINED> instruction: 0x732b030c
    1ab8:	00000000 	andeq	r0, r0, r0
	fml = strlen (fm) + 17;
    1abc:	00067d52 	andeq	r7, r6, r2, asr sp
    1ac0:	01e70600 	mvneq	r0, r0, lsl #12
    1ac4:	58030101 	stmdapl	r3, {r0, r8}
	if ((res = (char*) umalloc (fml)) == NULL)
    1ac8:	53000013 	movwpl	r0, #19
    1acc:	00000731 	andeq	r0, r0, r1, lsr r7
    1ad0:	1901e706 	stmdbne	r1, {r1, r2, r8, r9, sl, sp, lr, pc}
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ad4:	00000073 	andeq	r0, r0, r3, ror r0
    1ad8:	07c75200 	strbeq	r5, [r7, r0, lsl #4]
    1adc:	ba060000 	blt	181ae4 <__ccfg+0x161b3c>
    1ae0:	03010101 	movweq	r0, #4353	; 0x1101
		ufree (res);
    1ae4:	00001375 	andeq	r1, r0, r5, ror r3
		goto Again;
    1ae8:	00073153 	andeq	r3, r7, r3, asr r1
	if (buf == NULL || fmt == NULL)
    1aec:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
int vscan (const char *buf, const char *fmt, va_list ap) {
    1af0:	00007315 	andeq	r7, r0, r5, lsl r3
	if (buf == NULL || fmt == NULL)
    1af4:	61520000 	cmpvs	r2, r0
    1af8:	06000008 	streq	r0, [r0], -r8
    1afc:	01010139 	tsteq	r1, r9, lsr r1
		    	    case 'u': scanu (lword); break;
    1b00:	0013ac03 	andseq	sl, r3, r3, lsl #24
			while (isspace (*buf)) buf++;
    1b04:	07315300 	ldreq	r5, [r1, -r0, lsl #6]!
    1b08:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
	while (*fmt != '\0') {
    1b0c:	00731b01 	rsbseq	r1, r3, r1, lsl #22
		if (*fmt++ != '%')
    1b10:	1a530000 	bne	14c1b18 <__ccfg+0x14a1b70>
		switch (*fmt++) {
    1b14:	06000006 	streq	r0, [r0], -r6
    1b18:	732e0139 			; <UNDEFINED> instruction: 0x732e0139
    1b1c:	53000000 	movwpl	r0, #0
    1b20:	00000606 	andeq	r0, r0, r6, lsl #12
    1b24:	1b013a06 	blne	50344 <__ccfg+0x3039c>
    1b28:	00000073 	andeq	r0, r0, r3, ror r0
    1b2c:	07d25200 	ldrbeq	r5, [r2, r0, lsl #4]
}
    1b30:	84040000 	strhi	r0, [r4], #-0
		switch (*fmt++) {
    1b34:	03010102 	movweq	r0, #4354	; 0x1102
    1b38:	000013c9 	andeq	r1, r0, r9, asr #7
    1b3c:	00016653 	andeq	r6, r1, r3, asr r6
    1b40:	02840400 	addeq	r0, r4, #0, 8
			while (isspace (*buf)) buf++;
    1b44:	0000731e 	andeq	r7, r0, lr, lsl r3
    1b48:	c2520000 	subsgt	r0, r2, #0
    1b4c:	04000004 	streq	r0, [r0], #-4
    1b50:	01010206 	tsteq	r1, r6, lsl #4
    1b54:	0013f303 	andseq	pc, r3, r3, lsl #6
    1b58:	01665300 	cmneq	r6, r0, lsl #6
			if (*buf == '\0')
    1b5c:	06040000 	streq	r0, [r4], -r0
			if (*buf != ',') {
    1b60:	00732302 	rsbseq	r2, r3, r2, lsl #6
			sap = va_arg (ap, char*);
    1b64:	95530000 	ldrbls	r0, [r3, #-0]
			nc++;
    1b68:	04000009 	streq	r0, [r0], #-9
			if (*buf != ',') {
    1b6c:	73370206 	teqvc	r7, #1610612736	; 0x60000000
				while (!isspace (*buf) && *buf != ',' &&
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	0003af52 	andeq	sl, r3, r2, asr pc
    1b78:	01540400 	cmpeq	r4, r0, lsl #8
    1b7c:	10030101 	andne	r0, r3, r1, lsl #2
    1b80:	53000014 	movwpl	r0, #20
    1b84:	00000166 	andeq	r0, r0, r6, ror #2
    1b88:	19015404 	stmdbne	r1, {r2, sl, ip, lr}
			while (isspace (*buf)) buf++;
    1b8c:	00000073 	andeq	r0, r0, r3, ror r0
    1b90:	00255200 	eoreq	r5, r5, r0, lsl #4
    1b94:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    1b98:	03010101 	movweq	r0, #4353	; 0x1101
    1b9c:	0000142d 	andeq	r1, r0, sp, lsr #8
			if (*buf == ',') buf++;
    1ba0:	00016653 	andeq	r6, r1, r3, asr r6
    1ba4:	011e0400 	tsteq	lr, r0, lsl #8
			*sap = '\0';
    1ba8:	00007317 	andeq	r7, r0, r7, lsl r3
			break;
    1bac:	c4560000 	ldrbgt	r0, [r6], #-0
		    case 'd': scani (word); break;
    1bb0:	09000006 	stmdbeq	r0, {r1, r2}
    1bb4:	01010463 	tsteq	r1, r3, ror #8
    1bb8:	06365603 	ldrteq	r5, [r6], -r3, lsl #12
    1bbc:	54090000 	strpl	r0, [r9], #-0
    1bc0:	03010104 	movweq	r0, #4356	; 0x1104
    1bc4:	00064f56 	andeq	r4, r6, r6, asr pc
    1bc8:	022a0900 	eoreq	r0, sl, #0, 18
    1bcc:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    1bd0:	00000980 	andeq	r0, r0, r0, lsl #19
    1bd4:	01016809 	tsteq	r1, r9, lsl #16
    1bd8:	146b0301 	strbtne	r0, [fp], #-769	; 0xfffffcff
    1bdc:	5b530000 	blpl	14c1be4 <__ccfg+0x14a1c3c>
    1be0:	09000006 	stmdbeq	r0, {r1, r2}
    1be4:	731f0168 	tstvc	pc, #104, 2
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	00058f56 	andeq	r8, r5, r6, asr pc
    1bf0:	01320900 	teqeq	r2, r0, lsl #18
    1bf4:	59030101 	stmdbpl	r3, {r0, r8}
    1bf8:	00000d44 	andeq	r0, r0, r4, asr #26
	...
    1c04:	58359c01 	ldmdapl	r5!, {r0, sl, fp, ip, pc}
    1c08:	2400000d 	strcs	r0, [r0], #-13
    1c0c:	00000005 	andeq	r0, r0, r5
    1c10:	00121f00 	andseq	r1, r2, r0, lsl #30
    1c14:	1f000300 	svcne	0x00000300
    1c18:	04000008 	streq	r0, [r0], #-8
    1c1c:	00017001 	andeq	r7, r1, r1
		    case 'u': scanu (word); break;
    1c20:	0a8b0c00 	beq	fe2c4c28 <_estack+0xde2bfc28>
    1c24:	00c00000 	sbceq	r0, r0, r0
    1c28:	06980000 	ldreq	r0, [r8], r0
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	1a7b0000 	bne	1ec1c38 <__ccfg+0x1ea1c90>
    1c34:	01020000 	mrseq	r0, (UNDEF: 2)
    1c38:	0003a306 	andeq	sl, r3, r6, lsl #6
    1c3c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1c40:	000003dd 	ldrdeq	r0, [r0], -sp
    1c44:	00164803 	andseq	r4, r6, r3, lsl #16
    1c48:	18280300 	stmdane	r8!, {r8, r9}
    1c4c:	0000003f 	andeq	r0, r0, pc, lsr r0
    1c50:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    1c54:	02000000 	andeq	r0, r0, #0
    1c58:	00980508 	addseq	r0, r8, r8, lsl #10
    1c5c:	fc030000 	stc2	0, cr0, [r3], {-0}
    1c60:	03000021 	movweq	r0, #33	; 0x21
    1c64:	0059182e 	subseq	r1, r9, lr, lsr #16
		    case 'x': scanx (word); break;
    1c68:	01020000 	mrseq	r0, (UNDEF: 2)
    1c6c:	0003a108 	andeq	sl, r3, r8, lsl #2
    1c70:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    1c74:	31030000 	mrscc	r0, (UNDEF: 3)
    1c78:	00006c19 	andeq	r6, r0, r9, lsl ip
    1c7c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1c80:	00000271 	andeq	r0, r0, r1, ror r2
    1c84:	0017b303 	andseq	fp, r7, r3, lsl #6
    1c88:	19340300 	ldmdbne	r4!, {r8, r9}
    1c8c:	0000007f 	andeq	r0, r0, pc, ror r0
    1c90:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    1c94:	02000000 	andeq	r0, r0, #0
    1c98:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    1c9c:	04040000 	streq	r0, [r4], #-0
    1ca0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1ca4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1ca8:	00000077 	andeq	r0, r0, r7, ror r0
    1cac:	000b4603 	andeq	r4, fp, r3, lsl #12
    1cb0:	1b280400 	blne	a02cb8 <__ccfg+0x9e2d10>
    1cb4:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cb8:	000a5c05 	andeq	r5, sl, r5, lsl #24
    1cbc:	000b0400 	andeq	r0, fp, r0, lsl #8
    1cc0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1cc4:	000bfc06 	andeq	pc, fp, r6, lsl #24
    1cc8:	0000bf00 	andeq	fp, r0, r0, lsl #30
    1ccc:	00010000 	andeq	r0, r1, r0
    1cd0:	5e030407 	cdppl	4, 0, cr0, cr3, cr7, {0}
    1cd4:	0400000a 	streq	r0, [r0], #-10
    1cd8:	009b1863 	addseq	r1, fp, r3, ror #16
    1cdc:	fd030000 	stc2	0, cr0, [r3, #-0]
			switch (*fmt++) {
    1ce0:	05000003 	streq	r0, [r0, #-3]
    1ce4:	004d1226 	subeq	r1, sp, r6, lsr #4
    1ce8:	c0030000 	andgt	r0, r3, r0
    1cec:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    1cf0:	00601227 	rsbeq	r1, r0, r7, lsr #4
    1cf4:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
		    	    case 'd': scani (lword); break;
    1cf8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1cfc:	000000d9 	ldrdeq	r0, [r0], -r9
    1d00:	00090603 	andeq	r0, r9, r3, lsl #12
    1d04:	12280500 	eorne	r0, r8, #0, 10
    1d08:	00000033 	andeq	r0, r0, r3, lsr r0
    1d0c:	0013b803 	andseq	fp, r3, r3, lsl #16
    1d10:	122b0500 	eorne	r0, fp, #0, 10
    1d14:	0000004d 	andeq	r0, r0, sp, asr #32
    1d18:	0000fb09 	andeq	pc, r0, r9, lsl #22
    1d1c:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    1d20:	2c050000 	stccs	0, cr0, [r5], {-0}
    1d24:	00007312 	andeq	r7, r0, r2, lsl r3
    1d28:	010c0800 	tsteq	ip, r0, lsl #16
    1d2c:	a7030000 	strge	r0, [r3, -r0]
    1d30:	05000002 	streq	r0, [r0, #-2]
    1d34:	0073122d 	rsbseq	r1, r3, sp, lsr #4
    1d38:	62030000 	andvs	r0, r3, #0
    1d3c:	05000007 	streq	r0, [r0, #-7]
    1d40:	0135102e 	teqeq	r5, lr, lsr #32
    1d44:	040a0000 	streq	r0, [sl], #-0
    1d48:	000000d9 	ldrdeq	r0, [r0], -r9
    1d4c:	3205080b 	andcc	r0, r5, #720896	; 0xb0000
    1d50:	0001c909 	andeq	ip, r1, r9, lsl #18
		    	    case 'x': scanx (lword); break;
    1d54:	02c20c00 	sbceq	r0, r2, #0, 24
    1d58:	34050000 	strcc	r0, [r5], #-0
    1d5c:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1d60:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1d64:	00910c00 	addseq	r0, r1, r0, lsl #24
    1d68:	35050000 	strcc	r0, [r5, #-0]
    1d6c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1d70:	06010100 	streq	r0, [r1], -r0, lsl #2
    1d74:	02990c00 	addseq	r0, r9, #0, 24
    1d78:	36050000 	strcc	r0, [r5], -r0
    1d7c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1d80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1d84:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    1d88:	37050000 	strcc	r0, [r5, -r0]
    1d8c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1d90:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1d94:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    1d98:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    1d9c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1da0:	00040100 	andeq	r0, r4, r0, lsl #2
    1da4:	03f60d00 	mvnseq	r0, #0, 26
    1da8:	3a050000 	bcc	141db0 <__ccfg+0x121e08>
    1dac:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1db0:	400d0100 	andmi	r0, sp, r0, lsl #2
    1db4:	05000000 	streq	r0, [r0, #-0]
    1db8:	00fb033c 	rscseq	r0, fp, ip, lsr r3
    1dbc:	0d020000 	stceq	0, cr0, [r2, #-0]
    1dc0:	00000066 	andeq	r0, r0, r6, rrx
		    	    case 'd': scani (lword); break;
    1dc4:	fb033d05 	blx	d11e2 <__ccfg+0xb123a>
    1dc8:	03000000 	movweq	r0, #0
    1dcc:	0001540d 	andeq	r5, r1, sp, lsl #8
    1dd0:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    1dd4:	0000010c 	andeq	r0, r0, ip, lsl #2
    1dd8:	34030004 	strcc	r0, [r3], #-4
    1ddc:	05000004 	streq	r0, [r0, #-4]
		    	    case 'u': scanu (lword); break;
    1de0:	013b0341 	teqeq	fp, r1, asr #6
    1de4:	c9090000 	stmdbgt	r9, {}	; <UNPREDICTABLE>
    1de8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1dec:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    1df0:	d51a4305 	ldrle	r4, [sl, #-773]	; 0xfffffcfb
    1df4:	01000001 	tsteq	r0, r1
    1df8:	030d0e01 	movweq	r0, #56833	; 0xde01
    1dfc:	45050000 	strmi	r0, [r5, #-0]
    1e00:	0001f60e 	andeq	pc, r1, lr, lsl #12
    1e04:	0a010100 	beq	4220c <__ccfg+0x22264>
    1e08:	0001fc04 	andeq	pc, r1, r4, lsl #24
    1e0c:	08010200 	stmdaeq	r1, {r9}
    1e10:	000003aa 	andeq	r0, r0, sl, lsr #7
    1e14:	0001fc08 	andeq	pc, r1, r8, lsl #24
    1e18:	031b0e00 	tsteq	fp, #0, 28
    1e1c:	45050000 	strmi	r0, [r5, #-0]
    1e20:	0001f61e 	andeq	pc, r1, lr, lsl r6	; <UNPREDICTABLE>
    1e24:	0b010100 	bleq	4222c <__ccfg+0x22284>
		    	    case 'x': scanx (lword); break;
    1e28:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    1e2c:	00000247 	andeq	r0, r0, r7, asr #4
			if ((c = *buf++) == '\0')
    1e30:	0002d20d 	andeq	sp, r2, sp, lsl #4
    1e34:	0b900600 	bleq	fe40363c <_estack+0xde3fe63c>
			sap = va_arg (ap, char*);
    1e38:	00000073 	andeq	r0, r0, r3, ror r0
			nc++;
    1e3c:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
			break;
    1e40:	91060000 	mrsls	r0, (UNDEF: 6)
			while (isspace (*buf)) buf++;
    1e44:	0000d908 	andeq	sp, r0, r8, lsl #18
    1e48:	710d0400 	tstvc	sp, r0, lsl #8
    1e4c:	06000004 	streq	r0, [r0], -r4
						*sap++ = *buf++;
    1e50:	01071092 	swpeq	r1, r2, [r7]
    1e54:	00060000 	andeq	r0, r6, r0
			while (isspace (*buf)) buf++;
    1e58:	00041303 	andeq	r1, r4, r3, lsl #6
    1e5c:	03930600 	orrseq	r0, r3, #0, 12
    1e60:	00000216 	andeq	r0, r0, r6, lsl r2
		return 0;
    1e64:	0002470f 	andeq	r4, r2, pc, lsl #14
    1e68:	00025e00 	andeq	r5, r2, r0, lsl #28
		    case 'x': scanx (word); break;
    1e6c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    1e70:	00000036 	andeq	r0, r0, r6, lsr r0
		    	    case 'x': scanx (lword); break;
    1e74:	530f9906 	movwpl	r9, #63750	; 0xf906
    1e78:	01000002 	tsteq	r0, r2
    1e7c:	07010b01 	streq	r0, [r1, -r1, lsl #22]
    1e80:	02960991 	addseq	r0, r6, #2375680	; 0x244000
    1e84:	640c0000 	strvs	r0, [ip], #-0
    1e88:	07000004 	streq	r0, [r0, -r4]
    1e8c:	00fb0793 	smlalseq	r0, fp, r3, r7
    1e90:	07010000 	streq	r0, [r1, -r0]
    1e94:	310c0001 	tstcc	ip, r1
    1e98:	07000000 	streq	r0, [r0, -r0]
    1e9c:	00fb0394 	smlalseq	r0, fp, r4, r3
    1ea0:	01010000 	mrseq	r0, (UNDEF: 1)
    1ea4:	03000000 	movweq	r0, #0
    1ea8:	00000284 	andeq	r0, r0, r4, lsl #5
    1eac:	6c039607 	stcvs	6, cr9, [r3], {7}
    1eb0:	08000002 	stmdaeq	r0, {r1}
    1eb4:	00000296 	muleq	r0, r6, r2
    1eb8:	0002a20f 	andeq	sl, r2, pc, lsl #4
    1ebc:	0002b200 	andeq	fp, r2, r0, lsl #4
    1ec0:	08001000 	stmdaeq	r0, {ip}
    1ec4:	000002a7 	andeq	r0, r0, r7, lsr #5
    1ec8:	0002ed0e 	andeq	lr, r2, lr, lsl #26
    1ecc:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    1ed0:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1ed4:	e50f0101 	str	r0, [pc, #-257]	; 1ddb <vscan+0x2ef>
    1ed8:	d0000000 	andle	r0, r0, r0
    1edc:	10000002 	andne	r0, r0, r2
    1ee0:	02c50800 	sbceq	r0, r5, #0, 16
    1ee4:	930e0000 	movwls	r0, #57344	; 0xe000
    1ee8:	08000003 	stmdaeq	r0, {r0, r1}
    1eec:	02d01306 	sbcseq	r1, r0, #402653184	; 0x18000000
    1ef0:	01010000 	mrseq	r0, (UNDEF: 1)
    1ef4:	0001340e 	andeq	r3, r1, lr, lsl #8
    1ef8:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    1efc:	0000010c 	andeq	r0, r0, ip, lsl #2
    1f00:	7e110101 	mufvcs	f0, f1, f1
    1f04:	09000004 	stmdbeq	r0, {r2}
    1f08:	fe10016e 	cdp2	1, 1, cr0, cr0, cr14, {3}
    1f0c:	0a000002 	beq	1f1c <TrimAfterColdResetWakeupFromShutDown+0x48>
    1f10:	00030404 	andeq	r0, r3, r4, lsl #8
    1f14:	10011200 	andne	r1, r1, r0, lsl #4
    1f18:	13000003 	movwne	r0, #3
    1f1c:	000000d9 	ldrdeq	r0, [r0], -r9
    1f20:	02030f00 	andeq	r0, r3, #0, 30
    1f24:	031b0000 	tsteq	fp, #0
    1f28:	00100000 	andseq	r0, r0, r0
    1f2c:	00031008 	andeq	r1, r3, r8
    1f30:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    1f34:	7f090000 	svcvc	0x00090000
    1f38:	031b1601 	tsteq	fp, #1048576	; 0x100000
    1f3c:	01010000 	mrseq	r0, (UNDEF: 1)
    1f40:	00038b14 	andeq	r8, r3, r4, lsl fp
    1f44:	01820900 	orreq	r0, r2, r0, lsl #18
    1f48:	00011814 	andeq	r1, r1, r4, lsl r8
    1f4c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    1f50:	00000469 	andeq	r0, r0, r9, ror #8
    1f54:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    1f58:	0000010c 	andeq	r0, r0, ip, lsl #2
    1f5c:	08150101 	ldmdaeq	r5, {r0, r8}
    1f60:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    1f64:	00000374 	andeq	r0, r0, r4, ror r3
    1f68:	0021f416 	eoreq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    1f6c:	03070900 	movweq	r0, #30976	; 0x7900
    1f70:	0000d907 	andeq	sp, r0, r7, lsl #18
    1f74:	3f160000 	svccc	0x00160000
    1f78:	09000005 	stmdbeq	r0, {r0, r2}
    1f7c:	1d080308 	stcne	3, cr0, [r8, #-32]	; 0xffffffe0
    1f80:	04000001 	streq	r0, [r0], #-1
    1f84:	02641100 	rsbeq	r1, r4, #0, 2
    1f88:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1f8c:	034d0303 	movteq	r0, #54019	; 0xd303
    1f90:	8d170000 	ldchi	0, cr0, [r7, #-0]
    1f94:	30000004 	andcc	r0, r0, r4
    1f98:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    1f9c:	000003e4 	andeq	r0, r0, r4, ror #7
    1fa0:	00048616 	andeq	r8, r4, r6, lsl r6
    1fa4:	03140900 	tsteq	r4, #0, 18
    1fa8:	0000d908 	andeq	sp, r0, r8, lsl #18
    1fac:	dc160000 	ldcle	0, cr0, [r6], {-0}
    1fb0:	09000002 	stmdbeq	r0, {r1}
    1fb4:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    1fb8:	02000000 	andeq	r0, r0, #0
    1fbc:	00048116 	andeq	r8, r4, r6, lsl r1
    1fc0:	03160900 	tsteq	r6, #0, 18
    1fc4:	0002f10b 	andeq	pc, r2, fp, lsl #2
    1fc8:	3f160400 	svccc	0x00160400
    1fcc:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    1fd0:	1d090317 	stcne	3, cr0, [r9, #-92]	; 0xffffffa4
    1fd4:	08000001 	stmdaeq	r0, {r0}
    1fd8:	00043d16 	andeq	r3, r4, r6, lsl sp
    1fdc:	03180900 	tsteq	r8, #0, 18
    1fe0:	0003e40f 	andeq	lr, r3, pc, lsl #8
    1fe4:	d7160c00 	ldrle	r0, [r6, -r0, lsl #24]
    1fe8:	09000002 	stmdbeq	r0, {r1}
    1fec:	f4150319 			; <UNDEFINED> instruction: 0xf4150319
    1ff0:	2c000003 	stccs	0, cr0, [r0], {3}
    1ff4:	03740f00 	cmneq	r4, #0, 30
    1ff8:	03f40000 	mvnseq	r0, #0
    1ffc:	94180000 	ldrls	r0, [r8], #-0
    2000:	03000000 	movweq	r0, #0
    2004:	81040a00 	tsthi	r4, r0, lsl #20
    2008:	11000003 	tstne	r0, r3
    200c:	00000498 	muleq	r0, r8, r4
    2010:	1b031c09 	blne	c903c <__ccfg+0xa9094>
    2014:	00000381 	andeq	r0, r0, r1, lsl #7
    2018:	00038114 	andeq	r8, r3, r4, lsl r1
    201c:	031e0900 	tsteq	lr, #0, 18
    2020:	00041614 	andeq	r1, r4, r4, lsl r6
    2024:	0a010100 	beq	4242c <__ccfg+0x22484>
    2028:	0003fa04 	andeq	pc, r3, r4, lsl #20
    202c:	04b10e00 	ldrteq	r0, [r1], #3584	; 0xe00
    2030:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    2034:	0000d913 	andeq	sp, r0, r3, lsl r9
    2038:	0e010100 	adfeqs	f0, f1, f0
    203c:	0000071b 	andeq	r0, r0, fp, lsl r7
    2040:	ea1a1e0a 	b	689870 <__ccfg+0x6698c8>
    2044:	01000000 	mrseq	r0, (UNDEF: 0)
    2048:	08ab0e01 	stmiaeq	fp!, {r0, r9, sl, fp}
    204c:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2050:	0000ea24 	andeq	lr, r0, r4, lsr #20
    2054:	0e010100 	adfeqs	f0, f1, f0
    2058:	000005da 	ldrdeq	r0, [r0], -sl
    205c:	1614220a 	ldrne	r2, [r4], -sl, lsl #4
    2060:	01000004 	tsteq	r0, r4
    2064:	0a080301 	beq	202c70 <__ccfg+0x1e2cc8>
    2068:	440a0000 	strmi	r0, [sl], #-0
    206c:	0004600f 	andeq	r6, r4, pc
    2070:	66040a00 	strvs	r0, [r4], -r0, lsl #20
    2074:	19000004 	stmdbne	r0, {r2}
    2078:	00008d01 	andeq	r8, r0, r1, lsl #26
    207c:	00048000 	andeq	r8, r4, r0
    2080:	008d1300 	addeq	r1, sp, r0, lsl #6
    2084:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
    2088:	13000001 	movwne	r0, #1
    208c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2090:	033e1a00 	teqeq	lr, #0, 20
    2094:	0c010000 	stceq	0, cr0, [r1], {-0}
    2098:	a4030507 	strge	r0, [r3], #-1287	; 0xfffffaf9
    209c:	1b200000 	blne	8020a4 <__ccfg+0x7e20fc>
    20a0:	00000bd2 	ldrdeq	r0, [r0], -r2
    20a4:	0c071001 	stceq	0, cr1, [r7], {1}
    20a8:	01000001 	tsteq	r0, r1
    20ac:	00000305 	andeq	r0, r0, r5, lsl #6
    20b0:	461a0000 	ldrmi	r0, [sl], -r0
    20b4:	01000004 	tsteq	r0, r4
    20b8:	03050d1a 	movweq	r0, #23834	; 0x5d1a
    20bc:	2000001c 	andcs	r0, r0, ip, lsl r0
    20c0:	0004540f 	andeq	r5, r4, pc, lsl #8
    20c4:	0004bf00 	andeq	fp, r4, r0, lsl #30
    20c8:	00941800 	addseq	r1, r4, r0, lsl #16
    20cc:	00000000 	andeq	r0, r0, r0
    20d0:	000a401c 	andeq	r4, sl, ip, lsl r0
    20d4:	141e0100 	ldrne	r0, [lr], #-256	; 0xffffff00
    20d8:	000004af 	andeq	r0, r0, pc, lsr #9
    20dc:	00200305 	eoreq	r0, r0, r5, lsl #6
    20e0:	da1a2000 	ble	68a0e8 <__ccfg+0x66a140>
    20e4:	01000001 	tsteq	r0, r1
    20e8:	03051322 	movweq	r1, #21282	; 0x5322
    20ec:	200000ac 	andcs	r0, r0, ip, lsr #1
    20f0:	0004071a 	andeq	r0, r4, sl, lsl r7
    20f4:	0d270100 	stfeqs	f0, [r7, #-0]
    20f8:	00c80305 	sbceq	r0, r8, r5, lsl #6
    20fc:	1c1a2000 	ldcne	0, cr2, [sl], {-0}
    2100:	01000004 	tsteq	r0, r4
    2104:	03050730 	movweq	r0, #22320	; 0x5730
    2108:	200000a8 	andcs	r0, r0, r8, lsr #1
    210c:	00042a1a 	andeq	r2, r4, sl, lsl sl
    2110:	0f310100 	svceq	0x00310100
    2114:	00aa0305 	adceq	r0, sl, r5, lsl #6
    2118:	381a2000 	ldmdacc	sl, {sp}
    211c:	01000004 	tsteq	r0, r4
    2120:	03051931 	movweq	r1, #22833	; 0x5931
    2124:	200000b4 	strhcs	r0, [r0], -r4
    2128:	0001290f 	andeq	r2, r1, pc, lsl #18
    212c:	00052700 	andeq	r2, r5, r0, lsl #14
    2130:	00941800 	addseq	r1, r4, r0, lsl #16
    2134:	00030000 	andeq	r0, r3, r0
    2138:	0008fb1b 	andeq	pc, r8, fp, lsl fp	; <UNPREDICTABLE>
    213c:	0a360100 	beq	d82544 <__ccfg+0xd6259c>
    2140:	00000517 	andeq	r0, r0, r7, lsl r5
    2144:	b8030501 	stmdalt	r3, {r0, r8, sl}
    2148:	1a200000 	bne	802150 <__ccfg+0x7e21a8>
    214c:	00000320 	andeq	r0, r0, r0, lsr #6
    2150:	050c3f01 	streq	r3, [ip, #-3841]	; 0xfffff0ff
    2154:	002c5c03 	eoreq	r5, ip, r3, lsl #24
    2158:	032f1a00 			; <UNDEFINED> instruction: 0x032f1a00
    215c:	45010000 	strmi	r0, [r1, #-0]
    2160:	0003050d 	andeq	r0, r3, sp, lsl #10
    2164:	0b000000 	bleq	216c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>
    2168:	09490102 	stmdbeq	r9, {r1, r8}^
    216c:	0000057a 	andeq	r0, r0, sl, ror r5
    2170:	000a340d 	andeq	r3, sl, sp, lsl #8
    2174:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    2178:	000000fb 	strdeq	r0, [r0], -fp
    217c:	0c160d00 	ldceq	13, cr0, [r6], {-0}
    2180:	4b010000 	blmi	42188 <__ccfg+0x221e0>
    2184:	0000fb07 	andeq	pc, r0, r7, lsl #22
    2188:	03000100 	movweq	r0, #256	; 0x100
    218c:	00000b3d 	andeq	r0, r0, sp, lsr fp
    2190:	56034c01 	strpl	r4, [r3], -r1, lsl #24
    2194:	0f000005 	svceq	0x00000005
    2198:	0000057a 	andeq	r0, r0, sl, ror r5
    219c:	00000596 	muleq	r0, r6, r5
    21a0:	00009418 	andeq	r9, r0, r8, lsl r4
    21a4:	1c000000 	stcne	0, cr0, [r0], {-0}
    21a8:	00000b72 	andeq	r0, r0, r2, ror fp
    21ac:	86114e01 	ldrhi	r4, [r1], -r1, lsl #28
    21b0:	05000005 	streq	r0, [r0, #-5]
    21b4:	00002803 	andeq	r2, r0, r3, lsl #16
    21b8:	05b80f20 	ldreq	r0, [r8, #3872]!	; 0xf20
    21bc:	05b80000 	ldreq	r0, [r8, #0]!
    21c0:	94180000 	ldrls	r0, [r8], #-0
    21c4:	00000000 	andeq	r0, r0, r0
    21c8:	1d040a00 	vstrne	s0, [r4, #-0]
    21cc:	1d000001 	stcne	0, cr0, [r0, #-4]
    21d0:	00000a55 	andeq	r0, r0, r5, asr sl
    21d4:	0f02bd01 	svceq	0x0002bd01
    21d8:	000005a8 	andeq	r0, r0, r8, lsr #11
    21dc:	00300305 	eorseq	r0, r0, r5, lsl #6
    21e0:	1d0f2000 	stcne	0, cr2, [pc, #-0]	; 21e8 <NOROM_SetupGetTrimForAmpcompTh2>
    21e4:	e1000001 	tst	r0, r1
    21e8:	18000005 	stmdane	r0, {r0, r2}
    21ec:	00000094 	muleq	r0, r4, r0
    21f0:	f81d0000 			; <UNDEFINED> instruction: 0xf81d0000
    21f4:	0100000a 	tsteq	r0, sl
    21f8:	d10e02c2 	smlabtle	lr, r2, r2, r0
    21fc:	05000005 	streq	r0, [r0, #-5]
    2200:	00002c03 	andeq	r2, r0, r3, lsl #24
    2204:	0b551d20 	bleq	154968c <__ccfg+0x15296e4>
    2208:	c2010000 	andgt	r0, r1, #0
    220c:	05d12602 	ldrbeq	r2, [r1, #1538]	; 0x602
    2210:	03050000 	movweq	r0, #20480	; 0x5000
    2214:	20000024 	andcs	r0, r0, r4, lsr #32
    2218:	0b9e011e 	bleq	fe782698 <_estack+0xde77d698>
    221c:	2f010000 	svccs	0x00010000
    2220:	0c010705 	stceq	7, cr0, [r1], {5}
    2224:	00000001 	andeq	r0, r0, r1
    2228:	00000000 	andeq	r0, r0, r0
    222c:	01000000 	mrseq	r0, (UNDEF: 0)
    2230:	2c011f9c 	stccs	15, cr1, [r1], {156}	; 0x9c
    2234:	0100000b 	tsteq	r0, fp
    2238:	01060482 	smlabbeq	r6, r2, r4, r0
    223c:	000012a8 	andeq	r1, r0, r8, lsr #5
    2240:	000013e4 	andeq	r1, r0, r4, ror #7
    2244:	070e9c01 	streq	r9, [lr, -r1, lsl #24]
    2248:	6d200000 	stcvs	0, cr0, [r0, #-0]
    224c:	0100000b 	tsteq	r0, fp
    2250:	0e180482 	cdpeq	4, 1, cr0, cr8, cr2, {4}
    2254:	37000007 	strcc	r0, [r0, -r7]
    2258:	21000005 	tstcs	r0, r5
    225c:	6c617622 	stclvs	6, cr7, [r1], #-136	; 0xffffff78
    2260:	04870100 	streq	r0, [r7], #256	; 0x100
    2264:	00010c08 	andeq	r0, r1, r8, lsl #24
    2268:	00057700 	andeq	r7, r5, r0, lsl #14
    226c:	70612300 	rsbvc	r2, r1, r0, lsl #6
    2270:	04880100 	streq	r0, [r8], #256	; 0x100
    2274:	0000c10a 	andeq	ip, r0, sl, lsl #2
    2278:	4c910200 	lfmmi	f0, 4, [r1], {0}
    227c:	00636222 	rsbeq	r6, r3, r2, lsr #4
    2280:	07048901 	streq	r8, [r4, -r1, lsl #18]
    2284:	000000ef 	andeq	r0, r0, pc, ror #1
    2288:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    228c:	01007622 	tsteq	r0, r2, lsr #12
    2290:	d907048a 	stmdble	r7, {r1, r3, r7, sl}
    2294:	ea000000 	b	229c <NOROM_SetupGetTrimForAdcShVbufEn+0x4>
    2298:	24000005 	strcs	r0, [r0], #-5
    229c:	01007369 	tsteq	r0, r9, ror #6
    22a0:	fb07048b 	blx	1c34d6 <__ccfg+0x1a352e>
    22a4:	25000000 	strcs	r0, [r0, #-0]
    22a8:	00000c26 	andeq	r0, r0, r6, lsr #24
    22ac:	0104b001 	tsteq	r4, r1
    22b0:	00001374 	andeq	r1, r0, r4, ror r3
    22b4:	00133426 	andseq	r3, r3, r6, lsr #8
    22b8:	00135000 	andseq	r5, r3, r0
    22bc:	0006c000 	andeq	ip, r6, r0
    22c0:	00692200 	rsbeq	r2, r9, r0, lsl #4
    22c4:	0a049f01 	beq	129ed0 <__ccfg+0x109f28>
    22c8:	000000ef 	andeq	r0, r0, pc, ror #1
    22cc:	00000613 	andeq	r0, r0, r3, lsl r6
    22d0:	06502700 	ldrbeq	r2, [r0], -r0, lsl #14
    22d4:	06d90000 	ldrbeq	r0, [r9], r0
    22d8:	64220000 	strtvs	r0, [r2], #-0
    22dc:	04a90100 	strteq	r0, [r9], #256	; 0x100
    22e0:	00010c0b 	andeq	r0, r1, fp, lsl #24
    22e4:	00062600 	andeq	r2, r6, r0, lsl #12
    22e8:	c0260000 	eorgt	r0, r6, r0
    22ec:	ce000013 	mcrgt	0, 0, r0, cr0, cr3, {0}
    22f0:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
    22f4:	22000006 	andcs	r0, r0, #6
    22f8:	c6010073 			; <UNDEFINED> instruction: 0xc6010073
    22fc:	01f60b04 	mvnseq	r0, r4, lsl #22
    2300:	064f0000 	strbeq	r0, [pc], -r0
    2304:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2308:	000010c1 	andeq	r1, r0, r1, asr #1
    230c:	000012d6 	ldrdeq	r1, [r0], -r6
    2310:	00000680 	andeq	r0, r0, r0, lsl #13
    2314:	0204d901 	andeq	sp, r4, #16384	; 0x4000
    2318:	0010d429 	andseq	sp, r0, r9, lsr #8
    231c:	0a000000 	beq	2324 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    2320:	00020304 	andeq	r0, r2, r4, lsl #6
    2324:	0bf62a00 	bleq	ffd8cb2c <_estack+0xdfd87b2c>
    2328:	47010000 	strmi	r0, [r1, -r0]
    232c:	f8010d04 			; <UNDEFINED> instruction: 0xf8010d04
    2330:	1000000d 	andne	r0, r0, sp
    2334:	0100000e 	tsteq	r0, lr
    2338:	0007539c 	muleq	r7, ip, r3
    233c:	00632b00 	rsbeq	r2, r3, r0, lsl #22
    2340:	19044701 	stmdbne	r4, {r0, r8, r9, sl, lr}
    2344:	000000d9 	ldrdeq	r0, [r0], -r9
    2348:	00000662 	andeq	r0, r0, r2, ror #12
    234c:	0010c128 	andseq	ip, r0, r8, lsr #2
    2350:	000df800 	andeq	pc, sp, r0, lsl #16
    2354:	0005f800 	andeq	pc, r5, r0, lsl #16
    2358:	04490100 	strbeq	r0, [r9], #-256	; 0xffffff00
    235c:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    2360:	00000000 	andeq	r0, r0, r0
    2364:	0add012c 	beq	ff74281c <_estack+0xdf73d81c>
    2368:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    236c:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    2378:	01000000 	mrseq	r0, (UNDEF: 0)
    237c:	0007b49c 	muleq	r7, ip, r4
    2380:	636e2b00 	cmnvs	lr, #0, 22
    2384:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    2388:	0001291c 	andeq	r2, r1, ip, lsl r9
    238c:	00067500 	andeq	r7, r6, r0, lsl #10
    2390:	0bbe2d00 	bleq	fef8d798 <_estack+0xdef88798>
    2394:	31010000 	mrscc	r0, (UNDEF: 1)
    2398:	05b80904 	ldreq	r0, [r8, #2308]!	; 0x904
    239c:	06930000 	ldreq	r0, [r3], r0
    23a0:	6d220000 	stcvs	0, cr0, [r2, #-0]
    23a4:	01007861 	tsteq	r0, r1, ror #16
    23a8:	1d080432 	cfstrsne	mvf0, [r8, #-200]	; 0xffffff38
    23ac:	b1000001 	tstlt	r0, r1
    23b0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    23b4:	00000af3 	strdeq	r0, [r0], -r3
    23b8:	0d043201 	sfmeq	f3, 4, [r4, #-4]
    23bc:	0000011d 	andeq	r0, r0, sp, lsl r1
    23c0:	000006cf 	andeq	r0, r0, pc, asr #13
    23c4:	ab012c00 	blge	4d3cc <__ccfg+0x2d424>
    23c8:	0100000b 	tsteq	r0, fp
    23cc:	01060415 	tsteq	r6, r5, lsl r4
    23d0:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    23dc:	07e39c01 	strbeq	r9, [r3, r1, lsl #24]!
    23e0:	6d2b0000 	stcvs	0, cr0, [fp, #-0]
    23e4:	01006e69 	tsteq	r0, r9, ror #28
    23e8:	291c0415 	ldmdbcs	ip, {r0, r2, r4, sl}
    23ec:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    23f0:	00000006 	andeq	r0, r0, r6
    23f4:	0b91011f 	bleq	fe442878 <_estack+0xde43d878>
    23f8:	02010000 	andeq	r0, r1, #0
    23fc:	90010604 	andls	r0, r1, r4, lsl #12
    2400:	a8000012 	stmdage	r0, {r1, r4}
    2404:	01000012 	tsteq	r0, r2, lsl r0
    2408:	00080e9c 	muleq	r8, ip, lr
    240c:	0b812000 	bleq	fe04a414 <_estack+0xde045414>
    2410:	02010000 	andeq	r0, r1, #0
    2414:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2418:	070b0000 	streq	r0, [fp, -r0]
    241c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2420:	000a2701 	andeq	r2, sl, r1, lsl #14
    2424:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    2428:	05b80108 	ldreq	r0, [r8, #264]!	; 0x108
    242c:	11b40000 			; <UNDEFINED> instruction: 0x11b40000
    2430:	125c0000 	subsne	r0, ip, #0
    2434:	9c010000 	stcls	0, cr0, [r1], {-0}
    2438:	00000880 	andeq	r0, r0, r0, lsl #17
    243c:	00139720 	andseq	r9, r3, r0, lsr #14
    2440:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    2444:	0000d91a 	andeq	sp, r0, sl, lsl r9
    2448:	00071e00 	andeq	r1, r7, r0, lsl #28
    244c:	0bbe2d00 	bleq	fef8d854 <_estack+0xdef88854>
    2450:	ab010000 	blge	42458 <__ccfg+0x224b0>
    2454:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    2458:	07310000 	ldreq	r0, [r1, -r0]!
    245c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2460:	ab010063 	blge	425f4 <__ccfg+0x2264c>
    2464:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    2468:	07650000 	strbeq	r0, [r5, -r0]!
    246c:	5c2d0000 	stcpl	0, cr0, [sp], #-0
    2470:	0100000b 	tsteq	r0, fp
    2474:	1d1503ab 	ldcne	3, cr0, [r5, #-684]	; 0xfffffd54
    2478:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    247c:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    2480:	00001396 	muleq	r0, r6, r3
    2484:	0803af01 	stmdaeq	r3, {r0, r8, r9, sl, fp, sp, pc}
    2488:	0000011d 	andeq	r0, r0, sp, lsl r1
    248c:	000007a1 	andeq	r0, r0, r1, lsr #15
    2490:	1c012e00 	stcne	14, cr2, [r1], {-0}
    2494:	0100000c 	tsteq	r0, ip
    2498:	0106037c 	tsteq	r6, ip, ror r3
    249c:	00089d01 	andeq	r9, r8, r1, lsl #26
    24a0:	68632f00 	stmdavs	r3!, {r8, r9, sl, fp, sp}^
    24a4:	037c0100 	cmneq	ip, #0, 2
    24a8:	0005b818 	andeq	fp, r5, r8, lsl r8
    24ac:	3a2a0000 	bcc	a824b4 <__ccfg+0xa6250c>
    24b0:	0100000a 	tsteq	r0, sl
    24b4:	010d034a 	tsteq	sp, sl, asr #6
    24b8:	00000d78 	andeq	r0, r0, r8, ror sp
    24bc:	00000df8 	strdeq	r0, [r0], -r8
    24c0:	08e79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}^
    24c4:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    24c8:	4a010068 	bmi	42670 <__ccfg+0x226c8>
    24cc:	05b81b03 	ldreq	r1, [r8, #2819]!	; 0xb03
    24d0:	07cb0000 	strbeq	r0, [fp, r0]
    24d4:	be2d0000 	cdplt	0, 2, cr0, cr13, cr0, {0}
    24d8:	0100000b 	tsteq	r0, fp
    24dc:	b8090357 	stmdalt	r9, {r0, r1, r2, r4, r6, r8, r9}
    24e0:	e9000005 	stmdb	r0, {r0, r2}
    24e4:	22000007 	andcs	r0, r0, #7
    24e8:	01006363 	tsteq	r0, r3, ror #6
    24ec:	b8110357 	ldmdalt	r1, {r0, r1, r2, r4, r6, r8, r9}
    24f0:	2a000005 	bcs	250c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x38>
    24f4:	00000008 	andeq	r0, r0, r8
    24f8:	0a7a0130 	beq	1e829c0 <__ccfg+0x1e62a18>
    24fc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2500:	10cc0602 	sbcne	r0, ip, r2, lsl #12
    2504:	111c0000 	tstne	ip, r0
    2508:	9c010000 	stcls	0, cr0, [r1], {-0}
    250c:	00000911 	andeq	r0, r0, r1, lsl r9
    2510:	000b072d 	andeq	r0, fp, sp, lsr #14
    2514:	02f50100 	rscseq	r0, r5, #0, 2
    2518:	00011d08 	andeq	r1, r1, r8, lsl #26
    251c:	00085e00 	andeq	r5, r8, r0, lsl #28
    2520:	01310000 	teqeq	r1, r0
    2524:	01006f69 	tsteq	r0, r9, ror #30
    2528:	01060279 	tsteq	r6, r9, ror r2
    252c:	000000ef 	andeq	r0, r0, pc, ror #1
    2530:	00001030 	andeq	r1, r0, r0, lsr r0
    2534:	000010cc 	andeq	r1, r0, ip, asr #1
    2538:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    253c:	62200000 	eorvs	r0, r0, #0
    2540:	0100000b 	tsteq	r0, fp
    2544:	d90f0279 	stmdble	pc, {r0, r3, r4, r5, r6, r9}	; <UNPREDICTABLE>
    2548:	7c000000 	stcvc	0, cr0, [r0], {-0}
    254c:	2b000008 	blcs	2574 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa0>
    2550:	00766564 	rsbseq	r6, r6, r4, ror #10
    2554:	1b027901 	blne	a0960 <__ccfg+0x809b8>
    2558:	000000d9 	ldrdeq	r0, [r0], -r9
    255c:	0000089a 	muleq	r0, sl, r8
    2560:	0006eb20 	andeq	lr, r6, r0, lsr #22
    2564:	02790100 	rsbseq	r0, r9, #0, 2
    2568:	0000d925 	andeq	sp, r0, r5, lsr #18
    256c:	0008b800 	andeq	fp, r8, r0, lsl #16
    2570:	75622b00 	strbvc	r2, [r2, #-2816]!	; 0xfffff500
    2574:	79010066 	stmdbvc	r1, {r1, r2, r5, r6}
    2578:	01f63602 	mvnseq	r3, r2, lsl #12
    257c:	08d60000 	ldmeq	r6, {}^	; <UNPREDICTABLE>
    2580:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    2584:	01006e65 	tsteq	r0, r5, ror #28
    2588:	d9400279 	stmdble	r0, {r0, r3, r4, r5, r6, r9}^
    258c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2590:	22000008 	andcs	r0, r0, #8
    2594:	00746572 	rsbseq	r6, r4, r2, ror r5
    2598:	07027b01 	streq	r7, [r2, -r1, lsl #22]
    259c:	000000ef 	andeq	r0, r0, pc, ror #1
    25a0:	00000914 	andeq	r0, r0, r4, lsl r9
    25a4:	1a011f00 	bne	4a1ac <__ccfg+0x2a204>
    25a8:	0100000b 	tsteq	r0, fp
    25ac:	01060269 	tsteq	r6, r9, ror #4
    25b0:	0000100c 	andeq	r1, r0, ip
    25b4:	00001030 	andeq	r1, r0, r0, lsr r0
    25b8:	09cf9c01 	stmibeq	pc, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    25bc:	722b0000 	eorvc	r0, fp, #0
    25c0:	69010066 	stmdbvs	r1, {r1, r2, r5, r6}
    25c4:	04541e02 	ldrbeq	r1, [r4], #-3586	; 0xfffff1fe
    25c8:	09480000 	stmdbeq	r8, {}^	; <UNPREDICTABLE>
    25cc:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    25d0:	0100636f 	tsteq	r0, pc, ror #6
    25d4:	8d260269 	sfmhi	f0, 4, [r6, #-420]!	; 0xfffffe5c
    25d8:	71000000 	mrsvc	r0, (UNDEF: 0)
    25dc:	00000009 	andeq	r0, r0, r9
    25e0:	0c2d011f 	stfeqs	f0, [sp], #-124	; 0xffffff84
    25e4:	5f010000 	svcpl	0x00010000
    25e8:	00010602 	andeq	r0, r1, r2, lsl #12
    25ec:	00000000 	andeq	r0, r0, r0
    25f0:	01000000 	mrseq	r0, (UNDEF: 0)
    25f4:	000a169c 	muleq	sl, ip, r6
    25f8:	0b682000 	bleq	1a0a600 <__ccfg+0x19ea658>
    25fc:	5f010000 	svcpl	0x00010000
    2600:	01f61902 	mvnseq	r1, r2, lsl #18
    2604:	099a0000 	ldmibeq	sl, {}	; <UNPREDICTABLE>
    2608:	63320000 	teqvs	r2, #0
    260c:	025f0100 	subseq	r0, pc, #0, 2
    2610:	0001fc24 	andeq	pc, r1, r4, lsr #24
    2614:	2b510100 	blcs	1442a1c <__ccfg+0x1422a74>
    2618:	5f01006e 	svcpl	0x0001006e
    261c:	008d2b02 	addeq	r2, sp, r2, lsl #22
    2620:	09b80000 	ldmibeq	r8!, {}	; <UNPREDICTABLE>
    2624:	1f000000 	svcne	0x00000000
    2628:	000bea01 	andeq	lr, fp, r1, lsl #20
    262c:	02590100 	subseq	r0, r9, #0, 2
    2630:	0ff60106 	svceq	0x00f60106
    2634:	100a0000 	andne	r0, sl, r0
    2638:	9c010000 	stcls	0, cr0, [r1], {-0}
    263c:	00000a61 	andeq	r0, r0, r1, ror #20
    2640:	000b6820 	andeq	r6, fp, r0, lsr #16
    2644:	02590100 	subseq	r0, r9, #0, 2
    2648:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    264c:	0009cb00 	andeq	ip, r9, r0, lsl #22
    2650:	72732b00 	rsbsvc	r2, r3, #0, 22
    2654:	59010063 	stmdbpl	r1, {r0, r1, r5, r6}
    2658:	070e2b02 	streq	r2, [lr, -r2, lsl #22]
    265c:	09de0000 	ldmibeq	lr, {}^	; <UNPREDICTABLE>
    2660:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    2664:	02590100 	subseq	r0, r9, #0, 2
    2668:	00008d34 	andeq	r8, r0, r4, lsr sp
    266c:	0009fc00 	andeq	pc, r9, r0, lsl #24
    2670:	011f0000 	tsteq	pc, r0
    2674:	00000c5e 	andeq	r0, r0, lr, asr ip
    2678:	06025401 	streq	r5, [r2], -r1, lsl #8
    267c:	00000001 	andeq	r0, r0, r1
    2680:	00000000 	andeq	r0, r0, r0
    2684:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    2688:	2b00000a 	blcs	26b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x94>
    268c:	54010064 	strpl	r0, [r1], #-100	; 0xffffff9c
    2690:	01f61a02 	mvnseq	r1, r2, lsl #20
    2694:	0a0f0000 	beq	3c269c <__ccfg+0x3a26f4>
    2698:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    269c:	02540100 	subseq	r0, r4, #0, 2
    26a0:	00070e29 	andeq	r0, r7, r9, lsr #28
    26a4:	000a2200 	andeq	r2, sl, r0, lsl #4
    26a8:	006e3200 	rsbeq	r3, lr, r0, lsl #4
    26ac:	30025401 	andcc	r5, r2, r1, lsl #8
    26b0:	0000008d 	andeq	r0, r0, sp, lsl #1
    26b4:	1f005201 	svcne	0x00005201
    26b8:	000b3101 	andeq	r3, fp, r1, lsl #2
    26bc:	024e0100 	subeq	r0, lr, #0, 2
    26c0:	00000106 	andeq	r0, r0, r6, lsl #2
    26c4:	00000000 	andeq	r0, r0, r0
    26c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    26cc:	00000ade 	ldrdeq	r0, [r0], -lr
    26d0:	0100642b 	tsteq	r0, fp, lsr #8
    26d4:	f619024e 			; <UNDEFINED> instruction: 0xf619024e
    26d8:	35000001 	strcc	r0, [r0, #-1]
    26dc:	2b00000a 	blcs	270c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe8>
    26e0:	4e010073 	mcrmi	0, 0, r0, cr1, cr3, {3}
    26e4:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    26e8:	0a530000 	beq	14c26f0 <__ccfg+0x14a2748>
    26ec:	1f000000 	svcne	0x00000000
    26f0:	000c3901 	andeq	r3, ip, r1, lsl #18
    26f4:	02470100 	subeq	r0, r7, #0, 2
    26f8:	00000106 	andeq	r0, r0, r6, lsl #2
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	9c010000 	stcls	0, cr0, [r1], {-0}
    2704:	00000b25 	andeq	r0, r0, r5, lsr #22
    2708:	0100642b 	tsteq	r0, fp, lsr #8
    270c:	f61a0247 			; <UNDEFINED> instruction: 0xf61a0247
    2710:	66000001 	strvs	r0, [r0], -r1
    2714:	2b00000a 	blcs	2744 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x120>
    2718:	47010073 	smlsdxmi	r1, r3, r0, r0
    271c:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    2720:	0a840000 	beq	fe102728 <_estack+0xde0fd728>
    2724:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    2728:	02470100 	subeq	r0, r7, #0, 2
    272c:	00008d30 	andeq	r8, r0, r0, lsr sp
    2730:	000a9700 	andeq	r9, sl, r0, lsl #14
    2734:	011f0000 	tsteq	pc, r0
    2738:	00000a1b 	andeq	r0, r0, fp, lsl sl
    273c:	06024201 	streq	r4, [r2], -r1, lsl #4
    2740:	00000001 	andeq	r0, r0, r1
    2744:	00000000 	andeq	r0, r0, r0
    2748:	5d9c0100 	ldfpls	f0, [ip]
    274c:	2b00000b 	blcs	2780 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15c>
    2750:	42010064 	andmi	r0, r1, #100	; 0x64
    2754:	01f61902 	mvnseq	r1, r2, lsl #18
    2758:	0aaa0000 	beq	fea82760 <_estack+0xdea7d760>
    275c:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2760:	02420100 	subeq	r0, r2, #0, 2
    2764:	00070e28 	andeq	r0, r7, r8, lsr #28
    2768:	000abd00 	andeq	fp, sl, r0, lsl #26
    276c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2770:	00000ad1 	ldrdeq	r0, [r0], -r1
    2774:	05023901 	streq	r3, [r2, #-2305]	; 0xfffff6ff
    2778:	00008d01 	andeq	r8, r0, r1, lsl #26
    277c:	000fe800 	andeq	lr, pc, r0, lsl #16
    2780:	000ff600 	andeq	pc, pc, r0, lsl #12
    2784:	999c0100 	ldmibls	ip, {r8}
    2788:	2b00000b 	blcs	27bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x198>
    278c:	39010073 	stmdbcc	r1, {r0, r1, r4, r5, r6}
    2790:	070e1e02 	streq	r1, [lr, -r2, lsl #28]
    2794:	0adb0000 	beq	ff6c279c <_estack+0xdf6bd79c>
    2798:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    279c:	023b0100 	eorseq	r0, fp, #0, 2
    27a0:	00008d06 	andeq	r8, r0, r6, lsl #26
    27a4:	000af900 	andeq	pc, sl, r0, lsl #18
    27a8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    27ac:	00000aea 	andeq	r0, r0, sl, ror #21
    27b0:	06022d01 	streq	r2, [r2], -r1, lsl #26
    27b4:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    27c0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    27c4:	2b00000b 	blcs	27f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d4>
    27c8:	006e7566 	rsbeq	r7, lr, r6, ror #10
    27cc:	18022d01 	stmdane	r2, {r0, r8, sl, fp, sp}
    27d0:	000002f1 	strdeq	r0, [r0], -r1
    27d4:	00000b0c 	andeq	r0, r0, ip, lsl #22
    27d8:	01006922 	tsteq	r0, r2, lsr #18
    27dc:	160e022f 	strne	r0, [lr], -pc, lsr #4
    27e0:	2a000004 	bcs	27f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d4>
    27e4:	2200000b 	andcs	r0, r0, #11
    27e8:	30010063 	andcc	r0, r1, r3, rrx
    27ec:	00d90702 	sbcseq	r0, r9, r2, lsl #14
    27f0:	0b480000 	bleq	12027f8 <__ccfg+0x11e2850>
    27f4:	2c000000 	stccs	0, cr0, [r0], {-0}
    27f8:	000aeb01 	andeq	lr, sl, r1, lsl #22
    27fc:	021f0100 	andseq	r0, pc, #0, 2
    2800:	011d0107 	tsteq	sp, r7, lsl #2
    2804:	0fc40000 	svceq	0x00c40000
    2808:	0fe80000 	svceq	0x00e80000
    280c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2810:	00000c22 	andeq	r0, r0, r2, lsr #24
    2814:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    2818:	021f0100 	andseq	r0, pc, #0, 2
    281c:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    2820:	000b5b00 	andeq	r5, fp, r0, lsl #22
    2824:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2828:	0e022101 	adfeqs	f2, f2, f1
    282c:	00000416 	andeq	r0, r0, r6, lsl r4
    2830:	2c005001 	stccs	0, cr5, [r0], {1}
    2834:	000bdc01 	andeq	sp, fp, r1, lsl #24
    2838:	02130100 	andseq	r0, r3, #0, 2
    283c:	02f10109 	rscseq	r0, r1, #1073741826	; 0x40000002
	...
    2848:	9c010000 	stcls	0, cr0, [r1], {-0}
    284c:	00000c60 	andeq	r0, r0, r0, ror #24
    2850:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2854:	02130100 	andseq	r0, r3, #0, 2
    2858:	00011d18 	andeq	r1, r1, r8, lsl sp
    285c:	000b8400 	andeq	r8, fp, r0, lsl #8
    2860:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2864:	0e021501 	cfsh32eq	mvfx1, mvfx2, #1
    2868:	00000416 	andeq	r0, r0, r6, lsl r4
    286c:	00000ba2 	andeq	r0, r0, r2, lsr #23
    2870:	a3011f00 	movwge	r1, #7936	; 0x1f00
    2874:	0100000b 	tsteq	r0, fp
    2878:	010601f5 	strdeq	r0, [r6, -r5]
	...
    2884:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    2888:	662b0000 	strtvs	r0, [fp], -r0
    288c:	01006e75 	tsteq	r0, r5, ror lr
    2890:	f11701f5 			; <UNDEFINED> instruction: 0xf11701f5
    2894:	c0000002 	andgt	r0, r0, r2
    2898:	2200000b 	andcs	r0, r0, #11
    289c:	006c6572 	rsbeq	r6, ip, r2, ror r5
    28a0:	0a01f901 	beq	80cac <__ccfg+0x60d04>
    28a4:	000000cd 	andeq	r0, r0, sp, asr #1
    28a8:	00000bde 	ldrdeq	r0, [r0], -lr
    28ac:	01006922 	tsteq	r0, r2, lsr #18
    28b0:	160e01fa 			; <UNDEFINED> instruction: 0x160e01fa
    28b4:	f1000004 	cps	#4
    28b8:	2200000b 	andcs	r0, r0, #11
    28bc:	fa01006a 	blx	42a6c <__ccfg+0x22ac4>
    28c0:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    28c4:	0c250000 	stceq	0, cr0, [r5], #-0
    28c8:	6b220000 	blvs	8828d0 <__ccfg+0x862928>
    28cc:	01fa0100 	mvnseq	r0, r0, lsl #2
    28d0:	00041616 	andeq	r1, r4, r6, lsl r6
    28d4:	000c4300 	andeq	r4, ip, r0, lsl #6
    28d8:	011f0000 	tsteq	pc, r0
    28dc:	00000a50 	andeq	r0, r0, r0, asr sl
    28e0:	0601d901 	streq	sp, [r1], -r1, lsl #18
    28e4:	00116401 	andseq	r6, r1, r1, lsl #8
    28e8:	0011b400 	andseq	fp, r1, r0, lsl #8
    28ec:	0e9c0100 	fmleqe	f0, f4, f0
    28f0:	2b00000d 	blcs	292c <NOROM_ChipInfo_GetHwRevision+0x24>
    28f4:	00646970 	rsbeq	r6, r4, r0, ror r9
    28f8:	1201d901 	andne	sp, r1, #16384	; 0x4000
    28fc:	0000011d 	andeq	r0, r0, sp, lsl r1
    2900:	00000c61 	andeq	r0, r0, r1, ror #24
    2904:	01006922 	tsteq	r0, r2, lsr #18
    2908:	160e01dd 			; <UNDEFINED> instruction: 0x160e01dd
    290c:	95000004 	strls	r0, [r0, #-4]
    2910:	2400000c 	strcs	r0, [r0], #-12
    2914:	dd01006a 	stcle	0, cr0, [r1, #-424]	; 0xfffffe58
    2918:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    291c:	2a000000 	bcs	2924 <NOROM_ChipInfo_GetHwRevision+0x1c>
    2920:	00000a14 	andeq	r0, r0, r4, lsl sl
    2924:	0d01c401 	cfstrseq	mvf12, [r1, #-4]
    2928:	000d3c01 	andeq	r3, sp, r1, lsl #24
    292c:	000d7800 	andeq	r7, sp, r0, lsl #16
    2930:	639c0100 	orrsvs	r0, ip, #0, 2
    2934:	3200000d 	andcc	r0, r0, #13
    2938:	00646970 	rsbeq	r6, r4, r0, ror r9
    293c:	2101c401 	tstcs	r1, r1, lsl #8
    2940:	00000416 	andeq	r0, r0, r6, lsl r4
    2944:	112d5001 			; <UNDEFINED> instruction: 0x112d5001
    2948:	0100000c 	tsteq	r0, ip
    294c:	1d0801c8 	stfnes	f0, [r8, #-800]	; 0xfffffce0
    2950:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    2954:	2200000c 	andcs	r0, r0, #12
    2958:	c901006a 	stmdbgt	r1, {r1, r3, r5, r6}
    295c:	008d0601 	addeq	r0, sp, r1, lsl #12
    2960:	0cd10000 	ldcleq	0, cr0, [r1], {0}
    2964:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2968:	01ca0100 	biceq	r0, sl, r0, lsl #2
    296c:	0004160e 	andeq	r1, r4, lr, lsl #12
    2970:	00520100 	subseq	r0, r2, r0, lsl #2
    2974:	0be4012c 	bleq	ff902e2c <_estack+0xdf8fde2c>
    2978:	b3010000 	movwlt	r0, #4096	; 0x1000
    297c:	d9010601 	stmdble	r1, {r0, r9, sl}
	...
    2988:	01000000 	mrseq	r0, (UNDEF: 0)
    298c:	000da19c 	muleq	sp, ip, r1
    2990:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    2994:	b3010064 	movwlt	r0, #4196	; 0x1064
    2998:	011d1301 	tsteq	sp, r1, lsl #6
    299c:	0ce40000 	stcleq	0, cr0, [r4]
    29a0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    29a4:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    29a8:	0004160e 	andeq	r1, r4, lr, lsl #12
    29ac:	000d0200 	andeq	r0, sp, r0, lsl #4
    29b0:	01330000 	teqeq	r3, r0
    29b4:	00000a33 	andeq	r0, r0, r3, lsr sl
    29b8:	0601a801 	streq	sl, [r1], -r1, lsl #16
    29bc:	00000001 	andeq	r0, r0, r1
    29c0:	00000000 	andeq	r0, r0, r0
    29c4:	1f9c0100 	svcne	0x009c0100
    29c8:	00189b01 	andseq	r9, r8, r1, lsl #22
    29cc:	019a0100 	orrseq	r0, sl, r0, lsl #2
    29d0:	0f8c0106 	svceq	0x008c0106
    29d4:	0fc40000 	svceq	0x00c40000
    29d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29dc:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    29e0:	0100642b 	tsteq	r0, fp, lsr #8
    29e4:	d912019a 	ldmdble	r2, {r1, r3, r4, r7, r8}
    29e8:	20000000 	andcs	r0, r0, r0
    29ec:	2000000d 	andcs	r0, r0, sp
    29f0:	00000b81 	andeq	r0, r0, r1, lsl #23
    29f4:	1a019a01 	bne	69200 <__ccfg+0x49258>
    29f8:	000000d9 	ldrdeq	r0, [r0], -r9
    29fc:	00000d33 	andeq	r0, r0, r3, lsr sp
    2a00:	46012c00 	strmi	r2, [r1], -r0, lsl #24
    2a04:	0100000c 	tsteq	r0, ip
    2a08:	01070188 	smlabbeq	r7, r8, r1, r0
    2a0c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2a10:	00000f68 	andeq	r0, r0, r8, ror #30
    2a14:	00000f8c 	andeq	r0, r0, ip, lsl #31
    2a18:	0e3e9c01 	cdpeq	12, 3, cr9, cr14, cr1, {0}
    2a1c:	702b0000 	eorvc	r0, fp, r0
    2a20:	01006469 	tsteq	r0, r9, ror #8
    2a24:	1d180188 	ldfnes	f0, [r8, #-544]	; 0xfffffde0
    2a28:	46000001 	strmi	r0, [r0], -r1
    2a2c:	2b00000d 	blcs	2a68 <NOROM_OSCClockSourceGet+0x50>
    2a30:	01007473 	tsteq	r0, r3, ror r4
    2a34:	d9220188 	stmdble	r2!, {r3, r7, r8}
    2a38:	6f000000 	svcvs	0x00000000
    2a3c:	2200000d 	andcs	r0, r0, #13
    2a40:	8a010069 	bhi	42bec <__ccfg+0x22c44>
    2a44:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2a48:	0d8d0000 	stceq	0, cr0, [sp]
    2a4c:	1f000000 	svcne	0x00000000
    2a50:	000b0c01 	andeq	r0, fp, r1, lsl #24
    2a54:	01780100 	cmneq	r8, r0, lsl #2
    2a58:	00000106 	andeq	r0, r0, r6, lsl #2
    2a5c:	00000000 	andeq	r0, r0, r0
    2a60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a64:	00000e96 	muleq	r0, r6, lr
    2a68:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2a6c:	01780100 	cmneq	r8, r0, lsl #2
    2a70:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2a74:	000dab00 	andeq	sl, sp, r0, lsl #22
    2a78:	0b732000 	bleq	1ccaa80 <__ccfg+0x1caaad8>
    2a7c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2a80:	011d2601 	tsteq	sp, r1, lsl #12
    2a84:	0dbe0000 	ldceq	0, cr0, [lr]
    2a88:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2a8c:	017c0100 	cmneq	ip, r0, lsl #2
    2a90:	0004160e 	andeq	r1, r4, lr, lsl #12
    2a94:	22500100 	subscs	r0, r0, #0, 2
    2a98:	7d01006a 	stcvc	0, cr0, [r1, #-424]	; 0xfffffe58
    2a9c:	008d0701 	addeq	r0, sp, r1, lsl #14
    2aa0:	0ddc0000 	ldcleq	0, cr0, [ip]
    2aa4:	1f000000 	svcne	0x00000000
    2aa8:	000ac401 	andeq	ip, sl, r1, lsl #8
    2aac:	01660100 	cmneq	r6, r0, lsl #2
    2ab0:	0f340106 	svceq	0x00340106
    2ab4:	0f680000 	svceq	0x00680000
    2ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2abc:	00000edb 	ldrdeq	r0, [r0], -fp
    2ac0:	000b7334 	andeq	r7, fp, r4, lsr r3
    2ac4:	01660100 	cmneq	r6, r0, lsl #2
    2ac8:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2acc:	22500100 	subscs	r0, r0, #0, 2
    2ad0:	6a01006a 	bvs	42c80 <__ccfg+0x22cd8>
    2ad4:	008d0601 	addeq	r0, sp, r1, lsl #12
    2ad8:	0dfa0000 	ldcleq	0, cr0, [sl]
    2adc:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2ae0:	016b0100 	cmneq	fp, r0, lsl #2
    2ae4:	0004160e 	andeq	r1, r4, lr, lsl #12
    2ae8:	00520100 	subseq	r0, r2, r0, lsl #2
    2aec:	0b87012e 	bleq	fe1c2fac <_estack+0xde1bdfac>
    2af0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2af4:	01010601 	tsteq	r1, r1, lsl #12
    2af8:	00000f11 	andeq	r0, r0, r1, lsl pc
    2afc:	000b7335 	andeq	r7, fp, r5, lsr r3
    2b00:	01590100 	cmpeq	r9, r0, lsl #2
    2b04:	00011d17 	andeq	r1, r1, r7, lsl sp
    2b08:	0b813500 	bleq	fe04ff10 <_estack+0xde04af10>
    2b0c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2b10:	00d92301 	sbcseq	r2, r9, r1, lsl #6
    2b14:	6a240000 	bvs	902b1c <__ccfg+0x8e2b74>
    2b18:	015d0100 	cmpeq	sp, r0, lsl #2
    2b1c:	0000ef07 	andeq	lr, r0, r7, lsl #30
    2b20:	011f0000 	tsteq	pc, r0
    2b24:	00000aff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2b28:	06015301 	streq	r5, [r1], -r1, lsl #6
    2b2c:	000eec01 	andeq	lr, lr, r1, lsl #24
    2b30:	000f0000 	andeq	r0, pc, r0
    2b34:	3c9c0100 	ldfccs	f0, [ip], {0}
    2b38:	2000000f 	andcs	r0, r0, pc
    2b3c:	00000b81 	andeq	r0, r0, r1, lsl #23
    2b40:	14015301 	strne	r5, [r1], #-769	; 0xfffffcff
    2b44:	000000d9 	ldrdeq	r0, [r0], -r9
    2b48:	00000e0d 	andeq	r0, r0, sp, lsl #28
    2b4c:	46012c00 	strmi	r2, [r1], -r0, lsl #24
    2b50:	0100000a 	tsteq	r0, sl
    2b54:	0107012c 	tsteq	r7, ip, lsr #2
    2b58:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b5c:	0000125c 	andeq	r1, r0, ip, asr r2
    2b60:	00001290 	muleq	r0, r0, r2
    2b64:	0f9e9c01 	svceq	0x009e9c01
    2b68:	20200000 	eorcs	r0, r0, r0
    2b6c:	0100000b 	tsteq	r0, fp
    2b70:	f11a012c 			; <UNDEFINED> instruction: 0xf11a012c
    2b74:	20000002 	andcs	r0, r0, r2
    2b78:	2000000e 	andcs	r0, r0, lr
    2b7c:	00000f3f 	andeq	r0, r0, pc, lsr pc
    2b80:	26012c01 	strcs	r2, [r1], -r1, lsl #24
    2b84:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b88:	00000e3e 	andeq	r0, r0, lr, lsr lr
    2b8c:	01006923 	tsteq	r0, r3, lsr #18
    2b90:	160e012e 	strne	r0, [lr], -lr, lsr #2
    2b94:	01000004 	tsteq	r0, r4
    2b98:	06283650 			; <UNDEFINED> instruction: 0x06283650
    2b9c:	6a220000 	bvs	882ba4 <__ccfg+0x862bfc>
    2ba0:	013d0100 	teqeq	sp, r0, lsl #2
    2ba4:	0004160f 	andeq	r1, r4, pc, lsl #12
    2ba8:	000e5c00 	andeq	r5, lr, r0, lsl #24
    2bac:	37000000 	strcc	r0, [r0, -r0]
    2bb0:	000bc401 	andeq	ip, fp, r1, lsl #8
    2bb4:	06af0100 	strteq	r0, [pc], r0, lsl #2
    2bb8:	0fe30101 	svceq	0x00e30101
    2bbc:	6d380000 	ldcvs	0, cr0, [r8, #-0]
    2bc0:	01006e69 	tsteq	r0, r9, ror #28
    2bc4:	00d91aaf 	sbcseq	r1, r9, pc, lsr #21
    2bc8:	c1390000 	teqgt	r9, r0
    2bcc:	01000007 	tsteq	r0, r7
    2bd0:	00cd27af 	sbceq	r2, sp, pc, lsr #15
    2bd4:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    2bd8:	0ebd0100 	frdeqe	f0, f5, f0
    2bdc:	00000416 	andeq	r0, r0, r6, lsl r4
    2be0:	0100643a 	tsteq	r0, sl, lsr r4
    2be4:	00d907be 	ldrheq	r0, [r9], #126	; 0x7e
    2be8:	4d3b0000 	ldcmi	0, cr0, [fp, #-0]
    2bec:	01004b4f 	tsteq	r0, pc, asr #22
    2bf0:	00010109 	andeq	r0, r1, r9, lsl #2
    2bf4:	0c01013c 	stfeqs	f0, [r1], {60}	; 0x3c
    2bf8:	a7010000 	strge	r0, [r1, -r0]
    2bfc:	00000106 	andeq	r0, r0, r6, lsl #2
    2c00:	00000000 	andeq	r0, r0, r0
    2c04:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c08:	00001018 	andeq	r1, r0, r8, lsl r0
    2c0c:	0100743d 	tsteq	r0, sp, lsr r4
    2c10:	01291fa7 			; <UNDEFINED> instruction: 0x01291fa7
    2c14:	0e850000 	cdpeq	0, 8, cr0, cr5, cr0, {0}
    2c18:	763d0000 	ldrtvc	r0, [sp], -r0
    2c1c:	27a70100 	strcs	r0, [r7, r0, lsl #2]!
    2c20:	000000d9 	ldrdeq	r0, [r0], -r9
    2c24:	00000e98 	muleq	r0, r8, lr
    2c28:	50013c00 	andpl	r3, r1, r0, lsl #24
    2c2c:	0100000c 	tsteq	r0, ip
    2c30:	0001068f 	andeq	r0, r1, pc, lsl #13
    2c34:	00000000 	andeq	r0, r0, r0
    2c38:	01000000 	mrseq	r0, (UNDEF: 0)
    2c3c:	00104e9c 	mulseq	r0, ip, lr
    2c40:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    2c44:	1d8f0100 	stfnes	f0, [pc]	; 2c4c <port_confs+0x58>
    2c48:	00000129 	andeq	r0, r0, r9, lsr #2
    2c4c:	00000eab 	andeq	r0, r0, fp, lsr #29
    2c50:	0100693e 	tsteq	r0, lr, lsr r9
    2c54:	008d0693 	umulleq	r0, sp, r3, r6
    2c58:	0ec90000 	cdpeq	0, 12, cr0, cr9, cr0, {0}
    2c5c:	3c000000 	stccc	0, cr0, [r0], {-0}
    2c60:	000a6601 	andeq	r6, sl, r1, lsl #12
    2c64:	067f0100 	ldrbteq	r0, [pc], -r0, lsl #2
    2c68:	00000001 	andeq	r0, r0, r1
    2c6c:	00000000 	andeq	r0, r0, r0
    2c70:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    2c74:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2c78:	01007475 	tsteq	r0, r5, ror r4
    2c7c:	01291a7f 			; <UNDEFINED> instruction: 0x01291a7f
    2c80:	0ee70000 	cdpeq	0, 14, cr0, cr7, cr0, {0}
    2c84:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    2c88:	06830100 	streq	r0, [r3], r0, lsl #2
    2c8c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2c90:	00000f10 	andeq	r0, r0, r0, lsl pc
    2c94:	79013f00 	stmdbvc	r1, {r8, r9, sl, fp, ip, sp}
    2c98:	0100000b 	tsteq	r0, fp
    2c9c:	1001067b 	andne	r0, r1, fp, ror r6
    2ca0:	2000000e 	andcs	r0, r0, lr
    2ca4:	0100000e 	tsteq	r0, lr
    2ca8:	0b25409c 	bleq	952f20 <__ccfg+0x932f78>
    2cac:	5f010000 	svcpl	0x00010000
    2cb0:	04160114 	ldreq	r0, [r6], #-276	; 0xfffffeec
    2cb4:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2cb8:	38000010 	stmdacc	r0, {r4}
    2cbc:	00646970 	rsbeq	r6, r4, r0, ror r9
    2cc0:	1d225f01 	stcne	15, cr5, [r2, #-4]!
    2cc4:	3a000001 	bcc	2cd0 <__exidx_end+0x5c>
    2cc8:	61010069 	tstvs	r1, r9, rrx
    2ccc:	00041617 	andeq	r1, r4, r7, lsl r6
    2cd0:	71410000 	mrsvc	r0, (UNDEF: 65)
    2cd4:	0200000a 	andeq	r0, r0, #10
    2cd8:	0101029e 			; <UNDEFINED> instruction: 0x0101029e
    2cdc:	000010e2 	andeq	r1, r0, r2, ror #1
    2ce0:	0010e203 	andseq	lr, r0, r3, lsl #4
    2ce4:	07313500 	ldreq	r3, [r1, -r0, lsl #10]!
    2ce8:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2cec:	00731302 	rsbseq	r1, r3, r2, lsl #6
    2cf0:	02000000 	andeq	r0, r0, #0
    2cf4:	0bb80201 	bleq	fee03500 <_estack+0xdedfe500>
    2cf8:	98420000 	stmdals	r2, {}^	; <UNPREDICTABLE>
    2cfc:	00000010 	andeq	r0, r0, r0, lsl r0
    2d00:	00000000 	andeq	r0, r0, r0
    2d04:	01000000 	mrseq	r0, (UNDEF: 0)
    2d08:	00112e9c 	mulseq	r1, ip, lr
    2d0c:	10aa4300 	adcne	r4, sl, r0, lsl #6
    2d10:	0f2e0000 	svceq	0x002e0000
    2d14:	b6440000 	strblt	r0, [r4], -r0
    2d18:	57000010 	smladpl	r0, r0, r0, r0
    2d1c:	4500000f 	strmi	r0, [r0, #-15]
    2d20:	00001098 	muleq	r0, r8, r0
	...
    2d2c:	43145f01 	tstmi	r4, #1, 30
    2d30:	000010aa 	andeq	r1, r0, sl, lsr #1
    2d34:	00000f75 	andeq	r0, r0, r5, ror pc
    2d38:	0010b646 	andseq	fp, r0, r6, asr #12
    2d3c:	42000000 	andmi	r0, r0, #0
    2d40:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    2d44:	00000e20 	andeq	r0, r0, r0, lsr #28
    2d48:	00000eec 	andeq	r0, r0, ip, ror #29
    2d4c:	119a9c01 	orrsne	r9, sl, r1, lsl #24
    2d50:	ad430000 	stclge	0, cr0, [r3, #-0]
    2d54:	8800000f 	stmdahi	r0, {r0, r1, r2, r3}
    2d58:	4300000f 	movwmi	r0, #15
    2d5c:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    2d60:	00000f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    2d64:	000fc546 	andeq	ip, pc, r6, asr #10
    2d68:	0fcf4600 	svceq	0x00cf4600
    2d6c:	9e470000 	cdpls	0, 4, cr0, cr7, cr0, {0}
    2d70:	2e00000f 	cdpcs	0, 0, cr0, cr0, cr15, {0}
    2d74:	1000000e 	andne	r0, r0, lr
    2d78:	01000006 	tsteq	r0, r6
    2d7c:	b92906af 	stmdblt	r9!, {r0, r1, r2, r3, r5, r7, r9, sl}
    2d80:	4300000f 	movwmi	r0, #15
    2d84:	00000fad 	andeq	r0, r0, sp, lsr #31
    2d88:	00000fae 	andeq	r0, r0, lr, lsr #31
    2d8c:	00061036 	andeq	r1, r6, r6, lsr r0
    2d90:	0fc54400 	svceq	0x00c54400
    2d94:	0fd70000 	svceq	0x00d70000
    2d98:	cf460000 	svcgt	0x00460000
    2d9c:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
    2da0:	00000fd9 	ldrdeq	r0, [r0], -r9
    2da4:	00000eca 	andeq	r0, r0, sl, asr #29
    2da8:	42000000 	andmi	r0, r0, #0
    2dac:	00000edb 	ldrdeq	r0, [r0], -fp
    2db0:	00000f00 	andeq	r0, r0, r0, lsl #30
    2db4:	00000f34 	andeq	r0, r0, r4, lsr pc
    2db8:	11ee9c01 	mvnne	r9, r1, lsl #24
    2dbc:	eb430000 	bl	10c2dc4 <__ccfg+0x10a2e1c>
    2dc0:	f500000e 			; <UNDEFINED> instruction: 0xf500000e
    2dc4:	4300000f 	movwmi	r0, #15
    2dc8:	00000ef8 	strdeq	r0, [r0], -r8
    2dcc:	00001013 	andeq	r1, r0, r3, lsl r0
    2dd0:	000f0546 	andeq	r0, pc, r6, asr #10
    2dd4:	0edb4900 	vfnmseq.f16	s9, s22, s0	; <UNPREDICTABLE>
    2dd8:	0f120000 	svceq	0x00120000
    2ddc:	0f1a0000 	svceq	0x001a0000
    2de0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2de4:	eb430601 	bl	10c45f0 <__ccfg+0x10a4648>
    2de8:	3100000e 	tstcc	r0, lr
    2dec:	43000010 	movwmi	r0, #16
    2df0:	00000ef8 	strdeq	r0, [r0], -r8
    2df4:	00001044 	andeq	r1, r0, r4, asr #32
    2df8:	000f0546 	andeq	r0, pc, r6, asr #10
    2dfc:	4a000000 	bmi	2e04 <__exidx_end+0x190>
    2e00:	00000880 	andeq	r0, r0, r0, lsl #17
    2e04:	0000111c 	andeq	r1, r0, ip, lsl r1
    2e08:	00001164 	andeq	r1, r0, r4, ror #2
    2e0c:	90439c01 	subls	r9, r3, r1, lsl #24
    2e10:	57000008 	strpl	r0, [r0, -r8]
    2e14:	49000010 	stmdbmi	r0, {r4}
    2e18:	00000880 	andeq	r0, r0, r0, lsl #17
    2e1c:	00001128 	andeq	r1, r0, r8, lsr #2
    2e20:	00001130 	andeq	r1, r0, r0, lsr r1
    2e24:	06037c01 	streq	r7, [r3], -r1, lsl #24
    2e28:	00089043 	andeq	r9, r8, r3, asr #32
    2e2c:	00107500 	andseq	r7, r0, r0, lsl #10
    2e30:	00000000 	andeq	r0, r0, r0
    2e34:	00001333 	andeq	r1, r0, r3, lsr r3
    2e38:	0c8e0003 	stceq	0, cr0, [lr], {3}
    2e3c:	01040000 	mrseq	r0, (UNDEF: 4)
    2e40:	00000170 	andeq	r0, r0, r0, ror r1
    2e44:	000c9f0c 	andeq	r9, ip, ip, lsl #30
    2e48:	0000c000 	andeq	ip, r0, r0
    2e4c:	00081800 	andeq	r1, r8, r0, lsl #16
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	00295f00 	eoreq	r5, r9, r0, lsl #30
    2e58:	06010200 	streq	r0, [r1], -r0, lsl #4
    2e5c:	000003a3 	andeq	r0, r0, r3, lsr #7
    2e60:	dd050202 	sfmle	f0, 4, [r5, #-8]
    2e64:	02000003 	andeq	r0, r0, #3
    2e68:	009d0504 	addseq	r0, sp, r4, lsl #10
    2e6c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2e70:	00009805 	andeq	r9, r0, r5, lsl #16
    2e74:	21fc0300 	mvnscs	r0, r0, lsl #6
    2e78:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    2e7c:	00004d18 	andeq	r4, r0, r8, lsl sp
    2e80:	08010200 	stmdaeq	r1, {r9}
    2e84:	000003a1 	andeq	r0, r0, r1, lsr #7
    2e88:	0020ea03 	eoreq	lr, r0, r3, lsl #20
    2e8c:	19310200 	ldmdbne	r1!, {r9}
    2e90:	00000060 	andeq	r0, r0, r0, rrx
    2e94:	71070202 	tstvc	r7, r2, lsl #4
    2e98:	03000002 	movweq	r0, #2
    2e9c:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    2ea0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    2ea4:	02000000 	andeq	r0, r0, #0
    2ea8:	00720704 	rsbseq	r0, r2, r4, lsl #14
    2eac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2eb0:	00006d07 	andeq	r6, r0, r7, lsl #26
    2eb4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2eb8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2ebc:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    2ec0:	03000000 	movweq	r0, #0
    2ec4:	00000b46 	andeq	r0, r0, r6, asr #22
    2ec8:	9b1b2803 	blls	6ccedc <__ccfg+0x6acf34>
    2ecc:	05000000 	streq	r0, [r0, #-0]
    2ed0:	00000a5c 	andeq	r0, r0, ip, asr sl
    2ed4:	b3000d04 	movwlt	r0, #3332	; 0xd04
    2ed8:	06000000 	streq	r0, [r0], -r0
    2edc:	00000bfc 	strdeq	r0, [r0], -ip
    2ee0:	000000b3 	strheq	r0, [r0], -r3
    2ee4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    2ee8:	0a5e0304 	beq	1783b00 <__ccfg+0x1763b58>
    2eec:	63030000 	movwvs	r0, #12288	; 0x3000
    2ef0:	00008f18 	andeq	r8, r0, r8, lsl pc
    2ef4:	03fd0300 	mvnseq	r0, #0, 6
    2ef8:	26040000 	strcs	r0, [r4], -r0
    2efc:	00004112 	andeq	r4, r0, r2, lsl r1
    2f00:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    2f04:	27040000 	strcs	r0, [r4, -r0]
    2f08:	00005412 	andeq	r5, r0, r2, lsl r4
    2f0c:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    2f10:	cd090000 	stcgt	0, cr0, [r9, #-0]
    2f14:	03000000 	movweq	r0, #0
    2f18:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    2f1c:	41122b04 	tstmi	r2, r4, lsl #22
    2f20:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2f24:	000000e3 	andeq	r0, r0, r3, ror #1
    2f28:	0000e308 	andeq	lr, r0, r8, lsl #6
    2f2c:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    2f30:	2c040000 	stccs	0, cr0, [r4], {-0}
    2f34:	00006712 	andeq	r6, r0, r2, lsl r7
    2f38:	00f90800 	rscseq	r0, r9, r0, lsl #16
    2f3c:	a7030000 	strge	r0, [r3, -r0]
    2f40:	04000002 	streq	r0, [r0], #-2
    2f44:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    2f48:	62030000 	andvs	r0, r3, #0
    2f4c:	04000007 	streq	r0, [r0], #-7
    2f50:	0122102e 			; <UNDEFINED> instruction: 0x0122102e
    2f54:	040a0000 	streq	r0, [sl], #-0
    2f58:	000000cd 	andeq	r0, r0, sp, asr #1
    2f5c:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    2f60:	0001b609 	andeq	fp, r1, r9, lsl #12
    2f64:	02c20c00 	sbceq	r0, r2, #0, 24
    2f68:	34040000 	strcc	r0, [r4], #-0
    2f6c:	0000e307 	andeq	lr, r0, r7, lsl #6
    2f70:	07010100 	streq	r0, [r1, -r0, lsl #2]
    2f74:	00910c00 	addseq	r0, r1, r0, lsl #24
    2f78:	35040000 	strcc	r0, [r4, #-0]
    2f7c:	0000e303 	andeq	lr, r0, r3, lsl #6
    2f80:	06010100 	streq	r0, [r1], -r0, lsl #2
    2f84:	02990c00 	addseq	r0, r9, #0, 24
    2f88:	36040000 	strcc	r0, [r4], -r0
    2f8c:	0000e303 	andeq	lr, r0, r3, lsl #6
    2f90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2f94:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    2f98:	37040000 	strcc	r0, [r4, -r0]
    2f9c:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fa0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    2fa4:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    2fa8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    2fac:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fb0:	00040100 	andeq	r0, r4, r0, lsl #2
    2fb4:	03f60d00 	mvnseq	r0, #0, 26
    2fb8:	3a040000 	bcc	102fc0 <__ccfg+0xe3018>
    2fbc:	0000e307 	andeq	lr, r0, r7, lsl #6
    2fc0:	400d0100 	andmi	r0, sp, r0, lsl #2
    2fc4:	04000000 	streq	r0, [r0], #-0
    2fc8:	00e3033c 	rsceq	r0, r3, ip, lsr r3
    2fcc:	0d020000 	stceq	0, cr0, [r2, #-0]
    2fd0:	00000066 	andeq	r0, r0, r6, rrx
    2fd4:	e3033d04 	movw	r3, #15620	; 0x3d04
    2fd8:	03000000 	movweq	r0, #0
    2fdc:	0001540d 	andeq	r5, r1, sp, lsl #8
    2fe0:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    2fe4:	000000f9 	strdeq	r0, [r0], -r9
    2fe8:	34030004 	strcc	r0, [r3], #-4
    2fec:	04000004 	streq	r0, [r0], #-4
    2ff0:	01280341 			; <UNDEFINED> instruction: 0x01280341
    2ff4:	b6090000 	strlt	r0, [r9], -r0
    2ff8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2ffc:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    3000:	c21a4304 	andsgt	r4, sl, #4, 6	; 0x10000000
    3004:	01000001 	tsteq	r0, r1
    3008:	030d0e01 	movweq	r0, #56833	; 0xde01
    300c:	45040000 	strmi	r0, [r4, #-0]
    3010:	0001e30e 	andeq	lr, r1, lr, lsl #6
    3014:	0a010100 	beq	4341c <__ccfg+0x23474>
    3018:	0001e904 	andeq	lr, r1, r4, lsl #18
    301c:	08010200 	stmdaeq	r1, {r9}
    3020:	000003aa 	andeq	r0, r0, sl, lsr #7
    3024:	0001e908 	andeq	lr, r1, r8, lsl #18
    3028:	031b0e00 	tsteq	fp, #0, 28
    302c:	45040000 	strmi	r0, [r4, #-0]
    3030:	0001e31e 	andeq	lr, r1, lr, lsl r3
    3034:	0b010100 	bleq	4343c <__ccfg+0x23494>
    3038:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    303c:	00000234 	andeq	r0, r0, r4, lsr r2
    3040:	0002d20d 	andeq	sp, r2, sp, lsl #4
    3044:	0b900500 	bleq	fe40444c <_estack+0xde3ff44c>
    3048:	00000067 	andeq	r0, r0, r7, rrx
    304c:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
    3050:	91050000 	mrsls	r0, (UNDEF: 5)
    3054:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3058:	710d0400 	tstvc	sp, r0, lsl #8
    305c:	05000004 	streq	r0, [r0, #-4]
    3060:	00ef1092 	smlaleq	r1, pc, r2, r0	; <UNPREDICTABLE>
    3064:	00060000 	andeq	r0, r6, r0
    3068:	00041303 	andeq	r1, r4, r3, lsl #6
    306c:	03930500 	orrseq	r0, r3, #0, 10
    3070:	00000203 	andeq	r0, r0, r3, lsl #4
    3074:	0002340f 	andeq	r3, r2, pc, lsl #8
    3078:	00024b00 	andeq	r4, r2, r0, lsl #22
    307c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    3080:	00000036 	andeq	r0, r0, r6, lsr r0
    3084:	400f9905 	andmi	r9, pc, r5, lsl #18
    3088:	01000002 	tsteq	r0, r2
    308c:	f4040a01 	vst1.8	{d0-d1}, [r4], r1
    3090:	0b000000 	bleq	3098 <__exidx_end+0x424>
    3094:	09910601 	ldmibeq	r1, {r0, r9, sl}
    3098:	00000289 	andeq	r0, r0, r9, lsl #5
    309c:	0004640c 	andeq	r6, r4, ip, lsl #8
    30a0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    30a4:	000000e3 	andeq	r0, r0, r3, ror #1
    30a8:	00010701 	andeq	r0, r1, r1, lsl #14
    30ac:	0000310c 	andeq	r3, r0, ip, lsl #2
    30b0:	03940600 	orrseq	r0, r4, #0, 12
    30b4:	000000e3 	andeq	r0, r0, r3, ror #1
    30b8:	00000101 	andeq	r0, r0, r1, lsl #2
    30bc:	02840300 	addeq	r0, r4, #0, 6
    30c0:	96060000 	strls	r0, [r6], -r0
    30c4:	00025f03 	andeq	r5, r2, r3, lsl #30
    30c8:	02890800 	addeq	r0, r9, #0, 16
    30cc:	950f0000 	strls	r0, [pc, #-0]	; 30d4 <__exidx_end+0x460>
    30d0:	a5000002 	strge	r0, [r0, #-2]
    30d4:	10000002 	andne	r0, r0, r2
    30d8:	029a0800 	addseq	r0, sl, #0, 16
    30dc:	ed0e0000 	stc	0, cr0, [lr, #-0]
    30e0:	06000002 	streq	r0, [r0], -r2
    30e4:	02a5179c 	adceq	r1, r5, #156, 14	; 0x2700000
    30e8:	01010000 	mrseq	r0, (UNDEF: 1)
    30ec:	0000d90f 	andeq	sp, r0, pc, lsl #18
    30f0:	0002c300 	andeq	ip, r2, r0, lsl #6
    30f4:	08001000 	stmdaeq	r0, {ip}
    30f8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    30fc:	0003930e 	andeq	r9, r3, lr, lsl #6
    3100:	13060700 	movwne	r0, #26368	; 0x6700
    3104:	000002c3 	andeq	r0, r0, r3, asr #5
    3108:	340e0101 	strcc	r0, [lr], #-257	; 0xfffffeff
    310c:	05000001 	streq	r0, [r0, #-1]
    3110:	00f90ec3 	rscseq	r0, r9, r3, asr #29
    3114:	01010000 	mrseq	r0, (UNDEF: 1)
    3118:	00047e11 	andeq	r7, r4, r1, lsl lr
    311c:	016e0800 	cmneq	lr, r0, lsl #16
    3120:	0002f110 	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
    3124:	f7040a00 			; <UNDEFINED> instruction: 0xf7040a00
    3128:	12000002 	andne	r0, r0, #2
    312c:	00030301 	andeq	r0, r3, r1, lsl #6
    3130:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    3134:	0f000000 	svceq	0x00000000
    3138:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    313c:	0000030e 	andeq	r0, r0, lr, lsl #6
    3140:	03080010 	movweq	r0, #32784	; 0x8010
    3144:	14000003 	strne	r0, [r0], #-3
    3148:	00000444 	andeq	r0, r0, r4, asr #8
    314c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    3150:	0000030e 	andeq	r0, r0, lr, lsl #6
    3154:	8b140101 	blhi	503560 <__ccfg+0x4e35b8>
    3158:	08000003 	stmdaeq	r0, {r0, r1}
    315c:	05140182 	ldreq	r0, [r4, #-386]	; 0xfffffe7e
    3160:	01000001 	tsteq	r0, r1
    3164:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    3168:	03550908 	cmpeq	r5, #8, 18	; 0x20000
    316c:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    3170:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3174:	00cd070f 	sbceq	r0, sp, pc, lsl #14
    3178:	0d000000 	stceq	0, cr0, [r0, #-0]
    317c:	00000e3c 	andeq	r0, r0, ip, lsr lr
    3180:	cd031009 	stcgt	0, cr1, [r3, #-36]	; 0xffffffdc
    3184:	02000000 	andeq	r0, r0, #0
    3188:	0eac0300 	cdpeq	3, 10, cr0, cr12, cr0, {0}
    318c:	11090000 	mrsne	r0, (UNDEF: 9)
    3190:	00033103 	andeq	r3, r3, r3, lsl #2
    3194:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    3198:	03d30916 	bicseq	r0, r3, #360448	; 0x58000
    319c:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    31a0:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    31a4:	03ed0817 	mvneq	r0, #1507328	; 0x170000
    31a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    31ac:	00000da4 	andeq	r0, r0, r4, lsr #27
    31b0:	08081809 	stmdaeq	r8, {r0, r3, fp, ip}
    31b4:	04000004 	streq	r0, [r0], #-4
    31b8:	000e0c0d 	andeq	r0, lr, sp, lsl #24
    31bc:	08190900 	ldmdaeq	r9, {r8, fp}
    31c0:	0000043e 	andeq	r0, r0, lr, lsr r4
    31c4:	0e5a0d08 	cdpeq	13, 5, cr0, cr10, cr8, {0}
    31c8:	1a090000 	bne	2431d0 <__ccfg+0x223228>
    31cc:	00045908 	andeq	r5, r4, r8, lsl #18
    31d0:	cb0d0c00 	blgt	3461d8 <__ccfg+0x326230>
    31d4:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    31d8:	046f081b 	strbteq	r0, [pc], #-2075	; 31e0 <__exidx_end+0x56c>
    31dc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    31e0:	00000ea4 	andeq	r0, r0, r4, lsr #29
    31e4:	6f081c09 	svcvs	0x00081c09
    31e8:	14000004 	strne	r0, [r0], #-4
    31ec:	000de30d 	andeq	lr, sp, sp, lsl #6
    31f0:	081d0900 	ldmdaeq	sp, {r8, fp}
    31f4:	0000046f 	andeq	r0, r0, pc, ror #8
    31f8:	0d160d18 	ldceq	13, cr0, [r6, #-96]	; 0xffffffa0
    31fc:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    3200:	00008106 	andeq	r8, r0, r6, lsl #2
    3204:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    3208:	00008101 	andeq	r8, r0, r1, lsl #2
    320c:	0003ed00 	andeq	lr, r3, r0, lsl #26
    3210:	00811300 	addeq	r1, r1, r0, lsl #6
    3214:	81130000 	tsthi	r3, r0
    3218:	13000000 	movwne	r0, #0
    321c:	000000b5 	strheq	r0, [r0], -r5
    3220:	d3040a00 	movwle	r0, #18944	; 0x4a00
    3224:	15000003 	strne	r0, [r0, #-3]
    3228:	00008101 	andeq	r8, r0, r1, lsl #2
    322c:	00040800 	andeq	r0, r4, r0, lsl #16
    3230:	00811300 	addeq	r1, r1, r0, lsl #6
    3234:	81130000 	tsthi	r3, r0
    3238:	00000000 	andeq	r0, r0, r0
    323c:	03f3040a 	mvnseq	r0, #167772160	; 0xa000000
    3240:	01150000 	tsteq	r5, r0
    3244:	00000081 	andeq	r0, r0, r1, lsl #1
    3248:	00000432 	andeq	r0, r0, r2, lsr r4
    324c:	00008113 	andeq	r8, r0, r3, lsl r1
    3250:	01161300 	tsteq	r6, r0, lsl #6
    3254:	81130000 	tsthi	r3, r0
    3258:	13000000 	movwne	r0, #0
    325c:	00000432 	andeq	r0, r0, r2, lsr r4
    3260:	00043813 	andeq	r3, r4, r3, lsl r8
    3264:	040a0000 	streq	r0, [sl], #-0
    3268:	00000081 	andeq	r0, r0, r1, lsl #1
    326c:	0355040a 	cmpeq	r5, #167772160	; 0xa000000
    3270:	040a0000 	streq	r0, [sl], #-0
    3274:	0000040e 	andeq	r0, r0, lr, lsl #8
    3278:	00810115 	addeq	r0, r1, r5, lsl r1
    327c:	04590000 	ldrbeq	r0, [r9], #-0
    3280:	16130000 	ldrne	r0, [r3], -r0
    3284:	13000001 	movwne	r0, #1
    3288:	00000438 	andeq	r0, r0, r8, lsr r4
    328c:	44040a00 	strmi	r0, [r4], #-2560	; 0xfffff600
    3290:	15000004 	strne	r0, [r0, #-4]
    3294:	00008101 	andeq	r8, r0, r1, lsl #2
    3298:	00046f00 	andeq	r6, r4, r0, lsl #30
    329c:	01161300 	tsteq	r6, r0, lsl #6
    32a0:	0a000000 	beq	32a8 <__exidx_end+0x634>
    32a4:	00045f04 	andeq	r5, r4, r4, lsl #30
    32a8:	0d010300 	stceq	3, cr0, [r1, #-0]
    32ac:	1f090000 	svcne	0x00090000
    32b0:	00036103 	andeq	r6, r3, r3, lsl #2
    32b4:	04750800 	ldrbteq	r0, [r5], #-2048	; 0xfffff800
    32b8:	61160000 	tstvs	r6, r0
    32bc:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    32c0:	ae082409 	cdpge	4, 0, cr2, cr8, cr9, {0}
    32c4:	0d000004 	stceq	0, cr0, [r0, #-16]
    32c8:	00000cf2 	strdeq	r0, [r0], -r2
    32cc:	ae182509 	cfmul32ge	mvfx2, mvfx8, mvfx9
    32d0:	00000004 	andeq	r0, r0, r4
    32d4:	000c750d 	andeq	r7, ip, sp, lsl #10
    32d8:	06260900 	strteq	r0, [r6], -r0, lsl #18
    32dc:	000004ae 	andeq	r0, r0, lr, lsr #9
    32e0:	040a0004 	streq	r0, [sl], #-4
    32e4:	00000486 	andeq	r0, r0, r6, lsl #9
    32e8:	000d6f03 	andeq	r6, sp, r3, lsl #30
    32ec:	1e290900 	vmulne.f16	s0, s18, s0	; <UNPREDICTABLE>
    32f0:	00000486 	andeq	r0, r0, r6, lsl #9
    32f4:	000ece03 	andeq	ip, lr, r3, lsl #28
    32f8:	1e2a0900 	vmulne.f16	s0, s20, s0	; <UNPREDICTABLE>
    32fc:	00000486 	andeq	r0, r0, r6, lsl #9
    3300:	3f09020b 	svccc	0x0009020b
    3304:	00053602 	andeq	r3, r5, r2, lsl #12
    3308:	0e410c00 	cdpeq	12, 4, cr0, cr1, cr0, {0}
    330c:	40090000 	andmi	r0, r9, r0
    3310:	0000cd09 	andeq	ip, r0, r9, lsl #26
    3314:	0f010200 	svceq	0x00010200
    3318:	0f200c00 	svceq	0x00200c00
    331c:	41090000 	mrsmi	r0, (UNDEF: 9)
    3320:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3324:	0e010200 	cdpeq	2, 0, cr0, cr1, cr0, {0}
    3328:	0d910c00 	ldceq	12, cr0, [r1]
    332c:	42090000 	andmi	r0, r9, #0
    3330:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3334:	0d010200 	sfmeq	f0, 4, [r1, #-0]
    3338:	0e620c00 	cdpeq	12, 6, cr0, cr2, cr0, {0}
    333c:	43090000 	movwmi	r0, #36864	; 0x9000
    3340:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3344:	06070200 	streq	r0, [r7], -r0, lsl #4
    3348:	0edc0c00 	cdpeq	12, 13, cr0, cr12, cr0, {0}
    334c:	44090000 	strmi	r0, [r9], #-0
    3350:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3354:	03030200 	movweq	r0, #12800	; 0x3200
    3358:	0e2e0c00 	cdpeq	12, 2, cr0, cr14, cr0, {0}
    335c:	45090000 	strmi	r0, [r9, #-0]
    3360:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3364:	00030200 	andeq	r0, r3, r0, lsl #4
    3368:	02170000 	andseq	r0, r7, #0
    336c:	56093d09 	strpl	r3, [r9], -r9, lsl #26
    3370:	18000005 	stmdane	r0, {r0, r2}
    3374:	00000d98 	muleq	r0, r8, sp
    3378:	cd073e09 	stcgt	14, cr3, [r7, #-36]	; 0xffffffdc
    337c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3380:	46090062 	strmi	r0, [r9], -r2, rrx
    3384:	0004cc04 	andeq	ip, r4, r4, lsl #24
    3388:	7a030000 	bvc	c3390 <__ccfg+0xa33e8>
    338c:	0900000c 	stmdbeq	r0, {r2, r3}
    3390:	05360347 	ldreq	r0, [r6, #-839]!	; 0xfffffcb9
    3394:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    3398:	84055009 	strhi	r5, [r5], #-9
    339c:	18000005 	stmdane	r0, {r0, r2}
    33a0:	00000f02 	andeq	r0, r0, r2, lsl #30
    33a4:	b4105109 	ldrlt	r5, [r0], #-265	; 0xfffffef7
    33a8:	18000004 	stmdane	r0, {r2}
    33ac:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    33b0:	550b5209 	strpl	r5, [fp, #-521]	; 0xfffffdf7
    33b4:	00000003 	andeq	r0, r0, r3
    33b8:	000f1116 	andeq	r1, pc, r6, lsl r1	; <UNPREDICTABLE>
    33bc:	4c090c00 	stcmi	12, cr0, [r9], {-0}
    33c0:	0005b708 	andeq	fp, r5, r8, lsl #14
    33c4:	00751a00 	rsbseq	r1, r5, r0, lsl #20
    33c8:	62075809 	andvs	r5, r7, #589824	; 0x90000
    33cc:	00000005 	andeq	r0, r0, r5
    33d0:	000ee30d 	andeq	lr, lr, sp, lsl #6
    33d4:	07630900 	strbeq	r0, [r3, -r0, lsl #18]!
    33d8:	000000cd 	andeq	r0, r0, sp, asr #1
    33dc:	0ec30d08 	cdpeq	13, 12, cr0, cr3, cr8, {0}
    33e0:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    33e4:	00055610 	andeq	r5, r5, r0, lsl r6
    33e8:	03000a00 	movweq	r0, #2560	; 0xa00
    33ec:	00000d7d 	andeq	r0, r0, sp, ror sp
    33f0:	841f7909 	ldrhi	r7, [pc], #-2313	; 33f8 <__exidx_end+0x784>
    33f4:	0b000005 	bleq	3410 <__exidx_end+0x79c>
    33f8:	097b090c 	ldmdbeq	fp!, {r2, r3, r8, fp}^
    33fc:	000005e7 	andeq	r0, r0, r7, ror #11
    3400:	000ddc0d 	andeq	sp, sp, sp, lsl #24
    3404:	117f0900 	cmnne	pc, r0, lsl #18
    3408:	000004c0 	andeq	r0, r0, r0, asr #9
    340c:	0e910d00 	cdpeq	13, 9, cr0, cr1, cr0, {0}
    3410:	83090000 	movwhi	r0, #36864	; 0x9000
    3414:	00055611 	andeq	r5, r5, r1, lsl r6
    3418:	03000800 	movweq	r0, #2048	; 0x800
    341c:	00000e1e 	andeq	r0, r0, lr, lsl lr
    3420:	c3039209 	movwgt	r9, #12809	; 0x3209
    3424:	14000005 	strne	r0, [r0], #-5
    3428:	00000469 	andeq	r0, r0, r9, ror #8
    342c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    3430:	000000f9 	strdeq	r0, [r0], -r9
    3434:	081b0101 	ldmdaeq	fp, {r0, r8}
    3438:	09030308 	stmdbeq	r3, {r3, r8, r9}
    343c:	00000629 	andeq	r0, r0, r9, lsr #12
    3440:	0021f41c 	eoreq	pc, r1, ip, lsl r4	; <UNPREDICTABLE>
    3444:	03070800 	movweq	r0, #30720	; 0x7800
    3448:	0000cd07 	andeq	ip, r0, r7, lsl #26
    344c:	3f1c0000 	svccc	0x001c0000
    3450:	08000005 	stmdaeq	r0, {r0, r2}
    3454:	0a080308 	beq	20407c <__ccfg+0x1e40d4>
    3458:	04000001 	streq	r0, [r0], #-1
    345c:	02641100 	rsbeq	r1, r4, #0, 2
    3460:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3464:	06020303 	streq	r0, [r2], -r3, lsl #6
    3468:	8d1d0000 	ldchi	0, cr0, [sp, #-0]
    346c:	30000004 	andcc	r0, r0, r4
    3470:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    3474:	00000699 	muleq	r0, r9, r6
    3478:	0004861c 	andeq	r8, r4, ip, lsl r6
    347c:	03140800 	tsteq	r4, #0, 16
    3480:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3484:	dc1c0000 	ldcle	0, cr0, [ip], {-0}
    3488:	08000002 	stmdaeq	r0, {r1}
    348c:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    3490:	02000000 	andeq	r0, r0, #0
    3494:	0004811c 	andeq	r8, r4, ip, lsl r1
    3498:	03160800 	tsteq	r6, #0, 16
    349c:	0002e40b 	andeq	lr, r2, fp, lsl #8
    34a0:	3f1c0400 	svccc	0x001c0400
    34a4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    34a8:	0a090317 	beq	24410c <__ccfg+0x224164>
    34ac:	08000001 	stmdaeq	r0, {r0}
    34b0:	00043d1c 	andeq	r3, r4, ip, lsl sp
    34b4:	03180800 	tsteq	r8, #0, 16
    34b8:	0006990f 	andeq	r9, r6, pc, lsl #18
    34bc:	d71c0c00 	ldrle	r0, [ip, -r0, lsl #24]
    34c0:	08000002 	stmdaeq	r0, {r1}
    34c4:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    34c8:	2c000006 	stccs	0, cr0, [r0], {6}
    34cc:	06290f00 	strteq	r0, [r9], -r0, lsl #30
    34d0:	06a90000 	strteq	r0, [r9], r0
    34d4:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    34d8:	03000000 	movweq	r0, #0
    34dc:	36040a00 	strcc	r0, [r4], -r0, lsl #20
    34e0:	11000006 	tstne	r0, r6
    34e4:	00000498 	muleq	r0, r8, r4
    34e8:	1b031c08 	blne	ca510 <__ccfg+0xaa568>
    34ec:	00000636 	andeq	r0, r0, r6, lsr r6
    34f0:	00038114 	andeq	r8, r3, r4, lsl r1
    34f4:	031e0800 	tsteq	lr, #0, 16
    34f8:	0006cb14 	andeq	ip, r6, r4, lsl fp
    34fc:	0a010100 	beq	43904 <__ccfg+0x2395c>
    3500:	0006af04 	andeq	sl, r6, r4, lsl #30
    3504:	04b10e00 	ldrteq	r0, [r1], #3584	; 0xe00
    3508:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    350c:	0000cd13 	andeq	ip, r0, r3, lsl sp
    3510:	0e010100 	adfeqs	f0, f1, f0
    3514:	0000071b 	andeq	r0, r0, fp, lsl r7
    3518:	de1a1e0a 	cdple	14, 1, cr1, cr10, cr10, {0}
    351c:	01000000 	mrseq	r0, (UNDEF: 0)
    3520:	08ab0e01 	stmiaeq	fp!, {r0, r9, sl, fp}
    3524:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    3528:	0000de24 	andeq	sp, r0, r4, lsr #28
    352c:	0e010100 	adfeqs	f0, f1, f0
    3530:	000005da 	ldrdeq	r0, [r0], -sl
    3534:	cb14220a 	blgt	50bd64 <__ccfg+0x4ebdbc>
    3538:	01000006 	tsteq	r0, r6
    353c:	0cf70301 	ldcleq	3, cr0, [r7], #4
    3540:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    3544:	0007150f 	andeq	r1, r7, pc, lsl #10
    3548:	1b040a00 	blne	105d50 <__ccfg+0xe5da8>
    354c:	15000007 	strne	r0, [r0, #-7]
    3550:	00008101 	andeq	r8, r0, r1, lsl #2
    3554:	00073000 	andeq	r3, r7, r0
    3558:	00811300 	addeq	r1, r1, r0, lsl #6
    355c:	16130000 	ldrne	r0, [r3], -r0
    3560:	00000001 	andeq	r0, r0, r1
    3564:	0007400f 	andeq	r4, r7, pc
    3568:	00074000 	andeq	r4, r7, r0
    356c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3570:	00070000 	andeq	r0, r7, r0
    3574:	05e7040a 	strbeq	r0, [r7, #1034]!	; 0x40a
    3578:	ac1f0000 	ldcge	0, cr0, [pc], {-0}
    357c:	0c00000d 	stceq	0, cr0, [r0], {13}
    3580:	0730150d 	ldreq	r1, [r0, -sp, lsl #10]!
    3584:	03050000 	movweq	r0, #20480	; 0x5000
    3588:	00000000 	andeq	r0, r0, r0
    358c:	0007090f 	andeq	r0, r7, pc, lsl #18
    3590:	00076800 	andeq	r6, r7, r0, lsl #16
    3594:	00881e00 	addeq	r1, r8, r0, lsl #28
    3598:	00020000 	andeq	r0, r2, r0
    359c:	000e331f 	andeq	r3, lr, pc, lsl r3
    35a0:	14130c00 	ldrne	r0, [r3], #-3072	; 0xfffff400
    35a4:	00000758 	andeq	r0, r0, r8, asr r7
    35a8:	00000305 	andeq	r0, r0, r5, lsl #6
    35ac:	8a0f0000 	bhi	3c35b4 <__ccfg+0x3a360c>
    35b0:	8a000007 	bhi	35d4 <__exidx_end+0x960>
    35b4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    35b8:	00000088 	andeq	r0, r0, r8, lsl #1
    35bc:	040a0002 	streq	r0, [sl], #-2
    35c0:	000004c0 	andeq	r0, r0, r0, asr #9
    35c4:	000d591f 	andeq	r5, sp, pc, lsl r9
    35c8:	13190c00 	tstne	r9, #0, 24
    35cc:	0000077a 	andeq	r0, r0, sl, ror r7
    35d0:	00000305 	andeq	r0, r0, r5, lsl #6
    35d4:	810f0000 	mrshi	r0, CPSR
    35d8:	b2000000 	andlt	r0, r0, #0
    35dc:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    35e0:	00000088 	andeq	r0, r0, r8, lsl #1
    35e4:	311f0002 	tstcc	pc, r2
    35e8:	0c00000d 	stceq	0, cr0, [r0], {13}
    35ec:	07a20f1e 			; <UNDEFINED> instruction: 0x07a20f1e
    35f0:	03050000 	movweq	r0, #20480	; 0x5000
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	0007d40f 	andeq	sp, r7, pc, lsl #8
    35fc:	0007d400 	andeq	sp, r7, r0, lsl #8
    3600:	00881e00 	addeq	r1, r8, r0, lsl #28
    3604:	00020000 	andeq	r0, r2, r0
    3608:	0481040a 	streq	r0, [r1], #1034	; 0x40a
    360c:	091f0000 	ldmdbeq	pc, {}	; <UNPREDICTABLE>
    3610:	0c00000f 	stceq	0, cr0, [r0], {15}
    3614:	07c41b23 	strbeq	r1, [r4, r3, lsr #22]
    3618:	03050000 	movweq	r0, #20480	; 0x5000
    361c:	00000000 	andeq	r0, r0, r0
    3620:	0e510120 	rdfeqsp	f0, f1, f0
    3624:	0d010000 	stceq	0, cr0, [r1, #-0]
    3628:	e4010105 	str	r0, [r1], #-261	; 0xfffffefb
    362c:	e6000013 			; <UNDEFINED> instruction: 0xe6000013
    3630:	01000013 	tsteq	r0, r3, lsl r0
    3634:	4001219c 	mulmi	r1, ip, r1
    3638:	0100000d 	tsteq	r0, sp
    363c:	01010505 	tsteq	r1, r5, lsl #10
    3640:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    364c:	08639c01 	stmdaeq	r3!, {r0, sl, fp, ip, pc}^
    3650:	70220000 	eorvc	r0, r2, r0
    3654:	01007968 	tsteq	r0, r8, ror #18
    3658:	812d0505 			; <UNDEFINED> instruction: 0x812d0505
    365c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3660:	23000010 	movwcs	r0, #16
    3664:	0000114e 	andeq	r1, r0, lr, asr #2
    3668:	00000000 	andeq	r0, r0, r0
    366c:	00000800 	andeq	r0, r0, r0, lsl #16
    3670:	09050a01 	stmdbeq	r5, {r0, r9, fp}
    3674:	00116024 	andseq	r6, r1, r4, lsr #32
    3678:	0010a600 	andseq	sl, r0, r0, lsl #12
    367c:	08002500 	stmdaeq	r0, {r8, sl, sp}
    3680:	6b260000 	blvs	983688 <__ccfg+0x9636e0>
    3684:	b9000011 	stmdblt	r0, {r0, r4}
    3688:	26000010 			; <UNDEFINED> instruction: 0x26000010
    368c:	00001176 	andeq	r1, r0, r6, ror r1
    3690:	000010d7 	ldrdeq	r1, [r0], -r7
    3694:	27000000 	strcs	r0, [r0, -r0]
    3698:	000e8601 	andeq	r8, lr, r1, lsl #12
    369c:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    36a0:	00000101 	andeq	r0, r0, r1, lsl #2
    36a4:	00000000 	andeq	r0, r0, r0
    36a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    36ac:	0000089d 	muleq	r0, sp, r8
    36b0:	746b7022 	strbtvc	r7, [fp], #-34	; 0xffffffde
    36b4:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    36b8:	00011630 	andeq	r1, r1, r0, lsr r6
    36bc:	00110100 	andseq	r0, r1, r0, lsl #2
    36c0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    36c4:	0c04fe01 	stceq	14, cr15, [r4], {1}
    36c8:	0000089d 	muleq	r0, sp, r8
    36cc:	0000111f 	andeq	r1, r0, pc, lsl r1
    36d0:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    36d4:	21000005 	tstcs	r0, r5
    36d8:	000c8801 	andeq	r8, ip, r1, lsl #16
    36dc:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    36e0:	01160101 	tsteq	r6, r1, lsl #2
	...
    36ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    36f0:	000008f1 	strdeq	r0, [r0], -r1
    36f4:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    36f8:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    36fc:	0000812f 	andeq	r8, r0, pc, lsr #2
    3700:	00113d00 	andseq	r3, r1, r0, lsl #26
    3704:	716f2800 	cmnvc	pc, r0, lsl #16
    3708:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    370c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3710:	00115b00 	andseq	r5, r1, r0, lsl #22
    3714:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3718:	0c04ee01 	stceq	14, cr14, [r4], {1}
    371c:	0000089d 	muleq	r0, sp, r8
    3720:	0000116e 	andeq	r1, r0, lr, ror #2
    3724:	0b012100 	bleq	4bb2c <__ccfg+0x2bb84>
    3728:	0100000d 	tsteq	r0, sp
    372c:	010104d2 	ldrdeq	r0, [r1, -r2]
    3730:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    373c:	09509c01 	ldmdbeq	r0, {r0, sl, fp, ip, pc}^
    3740:	70220000 	eorvc	r0, r2, r0
    3744:	01007968 	tsteq	r0, r8, ror #18
    3748:	812f04d2 	ldrdhi	r0, [pc, -r2]!
    374c:	8d000000 	stchi	0, cr0, [r0, #-0]
    3750:	22000011 	andcs	r0, r0, #17
    3754:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3758:	3904d201 	stmdbcc	r4, {r0, r9, ip, lr, pc}
    375c:	00000432 	andeq	r0, r0, r2, lsr r4
    3760:	000011ab 	andeq	r1, r0, fp, lsr #3
    3764:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    3768:	0b04d701 	bleq	139374 <__ccfg+0x1193cc>
    376c:	0000078a 	andeq	r0, r0, sl, lsl #15
    3770:	000011c9 	andeq	r1, r0, r9, asr #3
    3774:	01006228 	tsteq	r0, r8, lsr #4
    3778:	9d0c04d8 	cfstrsls	mvf0, [ip, #-864]	; 0xfffffca0
    377c:	e7000008 	str	r0, [r0, -r8]
    3780:	00000011 	andeq	r0, r0, r1, lsl r0
    3784:	0ef70121 	cdpeq	1, 15, cr0, cr7, cr1, {1}
    3788:	a1010000 	mrsge	r0, (UNDEF: 1)
    378c:	81010104 	tsthi	r1, r4, lsl #2
	...
    3798:	01000000 	mrseq	r0, (UNDEF: 0)
    379c:	0009eb9c 	muleq	r9, ip, fp
    37a0:	68702200 	ldmdavs	r0!, {r9, sp}^
    37a4:	a1010079 	tstge	r1, r9, ror r0
    37a8:	00812b04 	addeq	r2, r1, r4, lsl #22
    37ac:	12110000 	andsne	r0, r1, #0
    37b0:	70220000 	eorvc	r0, r2, r0
    37b4:	04a10100 	strteq	r0, [r1], #256	; 0x100
    37b8:	00011638 	andeq	r1, r1, r8, lsr r6
    37bc:	00124500 	andseq	r4, r2, r0, lsl #10
    37c0:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    37c4:	a101006e 	tstge	r1, lr, rrx
    37c8:	00813f04 	addeq	r3, r1, r4, lsl #30
    37cc:	12790000 	rsbsne	r0, r9, #0
    37d0:	70290000 	eorvc	r0, r9, r0
    37d4:	0100676c 	tsteq	r0, ip, ror #14
    37d8:	810604a6 	smlatbhi	r6, r6, r4, r0
    37dc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    37e0:	00707364 	rsbseq	r7, r0, r4, ror #6
    37e4:	0b04a601 	bleq	12cff0 <__ccfg+0x10d048>
    37e8:	00000081 	andeq	r0, r0, r1, lsl #1
    37ec:	000012ad 	andeq	r1, r0, sp, lsr #5
    37f0:	7365732a 	cmnvc	r5, #-1476395008	; 0xa8000000
    37f4:	04a60100 	strteq	r0, [r6], #256	; 0x100
    37f8:	00008110 	andeq	r8, r0, r0, lsl r1
    37fc:	50910200 	addspl	r0, r1, r0, lsl #4
    3800:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    3804:	0b04a701 	bleq	12d410 <__ccfg+0x10d468>
    3808:	00000355 	andeq	r0, r0, r5, asr r3
    380c:	28549102 	ldmdacs	r4, {r1, r8, ip, pc}^
    3810:	a8010063 	stmdage	r1, {r0, r1, r5, r6}
    3814:	01160a04 	tsteq	r6, r4, lsl #20
    3818:	12cb0000 	sbcne	r0, fp, #0
    381c:	21000000 	mrscs	r0, (UNDEF: 0)
    3820:	000ce701 	andeq	lr, ip, r1, lsl #14
    3824:	04870100 	streq	r0, [r7], #256	; 0x100
    3828:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3834:	9c010000 	stcls	0, cr0, [r1], {-0}
    3838:	00000a4a 	andeq	r0, r0, sl, asr #20
    383c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3840:	04870100 	streq	r0, [r7], #256	; 0x100
    3844:	0000812b 	andeq	r8, r0, fp, lsr #2
    3848:	0012de00 	andseq	sp, r2, r0, lsl #28
    384c:	73702200 	cmnvc	r0, #0, 4
    3850:	04870100 	streq	r0, [r7], #256	; 0x100
    3854:	0007093a 	andeq	r0, r7, sl, lsr r9
    3858:	0012fc00 	andseq	pc, r2, r0, lsl #24
    385c:	0d1a2b00 	vldreq	d2, [sl, #-0]
    3860:	87010000 	strhi	r0, [r1, -r0]
    3864:	00814204 	addeq	r4, r1, r4, lsl #4
    3868:	131a0000 	tstne	sl, #0
    386c:	71280000 			; <UNDEFINED> instruction: 0x71280000
    3870:	048d0100 	streq	r0, [sp], #256	; 0x100
    3874:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3878:	00133800 	andseq	r3, r3, r0, lsl #16
    387c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3880:	00000dd3 	ldrdeq	r0, [r0], -r3
    3884:	01038601 	tsteq	r3, r1, lsl #12
    3888:	00011601 	andeq	r1, r1, r1, lsl #12
    388c:	0a910100 	beq	fe443c94 <_estack+0xde43ec94>
    3890:	972d0000 	strls	r0, [sp, -r0]!
    3894:	01000013 	tsteq	r0, r3, lsl r0
    3898:	812d0386 	smlawbhi	sp, r6, r3, r0
    389c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    38a0:	00707364 	rsbseq	r7, r0, r4, ror #6
    38a4:	37038601 	strcc	r8, [r3, -r1, lsl #12]
    38a8:	00000081 	andeq	r0, r0, r1, lsl #1
    38ac:	7365732e 	cmnvc	r5, #-1207959552	; 0xb8000000
    38b0:	03860100 	orreq	r0, r6, #0, 2
    38b4:	00008140 	andeq	r8, r0, r0, asr #2
    38b8:	00702900 	rsbseq	r2, r0, r0, lsl #18
    38bc:	0c038a01 			; <UNDEFINED> instruction: 0x0c038a01
    38c0:	0000089d 	muleq	r0, sp, r8
    38c4:	da012700 	ble	4d4cc <__ccfg+0x2d524>
    38c8:	0100000c 	tsteq	r0, ip
    38cc:	0101037f 	tsteq	r1, pc, ror r3
	...
    38d8:	0acb9c01 	beq	ff2ea8e4 <_estack+0xdf2e58e4>
    38dc:	70220000 	eorvc	r0, r2, r0
    38e0:	037f0100 	cmneq	pc, #0, 2
    38e4:	00011632 	andeq	r1, r1, r2, lsr r6
    38e8:	00136700 	andseq	r6, r3, r0, lsl #14
    38ec:	73642200 	cmnvc	r4, #0, 4
    38f0:	7f010070 	svcvc	0x00010070
    38f4:	00813903 	addeq	r3, r1, r3, lsl #18
    38f8:	137a0000 	cmnne	sl, #0
    38fc:	21000000 	mrscs	r0, (UNDEF: 0)
    3900:	000e6a01 	andeq	r6, lr, r1, lsl #20
    3904:	036b0100 	cmneq	fp, #0, 2
    3908:	01160101 	tsteq	r6, r1, lsl #2
	...
    3914:	9c010000 	stcls	0, cr0, [r1], {-0}
    3918:	00000b25 	andeq	r0, r0, r5, lsr #22
    391c:	01007022 	tsteq	r0, r2, lsr #32
    3920:	1633036b 	ldrtne	r0, [r3], -fp, ror #6
    3924:	8d000001 	stchi	0, cr0, [r0, #-4]
    3928:	2b000013 	blcs	397c <__exidx_end+0xd08>
    392c:	00000eea 	andeq	r0, r0, sl, ror #29
    3930:	3a036b01 	bcc	de53c <__ccfg+0xbe594>
    3934:	00000081 	andeq	r0, r0, r1, lsl #1
    3938:	000013ab 	andeq	r1, r0, fp, lsr #7
    393c:	00637028 	rsbeq	r7, r3, r8, lsr #32
    3940:	0c036f01 	stceq	15, cr6, [r3], {1}
    3944:	0000089d 	muleq	r0, sp, r8
    3948:	000013c9 	andeq	r1, r0, r9, asr #7
    394c:	00707029 	rsbseq	r7, r0, r9, lsr #32
    3950:	11036f01 	tstne	r3, r1, lsl #30
    3954:	0000089d 	muleq	r0, sp, r8
    3958:	4d012700 	stcmi	7, cr2, [r1, #-0]
    395c:	0100000d 	tsteq	r0, sp
    3960:	01010363 	tsteq	r1, r3, ror #6
	...
    396c:	0b5f9c01 	bleq	17ea978 <__ccfg+0x17ca9d0>
    3970:	70220000 	eorvc	r0, r2, r0
    3974:	03630100 	cmneq	r3, #0, 2
    3978:	00011631 	andeq	r1, r1, r1, lsr r6
    397c:	0013e700 	andseq	lr, r3, r0, lsl #14
    3980:	68702200 	ldmdavs	r0!, {r9, sp}^
    3984:	63010079 	movwvs	r0, #4217	; 0x1079
    3988:	00813803 	addeq	r3, r1, r3, lsl #16
    398c:	14050000 	strne	r0, [r5], #-0
    3990:	27000000 	strcs	r0, [r0, -r0]
    3994:	000e7501 	andeq	r7, lr, r1, lsl #10
    3998:	035a0100 	cmpeq	sl, #0, 2
    399c:	00000101 	andeq	r0, r0, r1, lsl #2
    39a0:	00000000 	andeq	r0, r0, r0
    39a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39a8:	00000b99 	muleq	r0, r9, fp
    39ac:	01007022 	tsteq	r0, r2, lsr #32
    39b0:	1631035a 			; <UNDEFINED> instruction: 0x1631035a
    39b4:	23000001 	movwcs	r0, #1
    39b8:	22000014 	andcs	r0, r0, #20
    39bc:	00736573 	rsbseq	r6, r3, r3, ror r5
    39c0:	38035a01 	stmdacc	r3, {r0, r9, fp, ip, lr}
    39c4:	00000081 	andeq	r0, r0, r1, lsl #1
    39c8:	00001441 	andeq	r1, r0, r1, asr #8
    39cc:	29012c00 	stmdbcs	r1, {sl, fp, sp}
    39d0:	0100000f 	tsteq	r0, pc
    39d4:	01010352 	tsteq	r1, r2, asr r3
    39d8:	00000081 	andeq	r0, r0, r1, lsl #1
    39dc:	000bd501 	andeq	sp, fp, r1, lsl #10
    39e0:	68702e00 	ldmdavs	r0!, {r9, sl, fp, sp}^
    39e4:	52010079 	andpl	r0, r1, #121	; 0x79
    39e8:	00812d03 	addeq	r2, r1, r3, lsl #26
    39ec:	6f2e0000 	svcvs	0x002e0000
    39f0:	01007470 	tsteq	r0, r0, ror r4
    39f4:	81360352 	teqhi	r6, r2, asr r3
    39f8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    39fc:	00677261 	rsbeq	r7, r7, r1, ror #4
    3a00:	43035201 	movwmi	r5, #12801	; 0x3201
    3a04:	00000116 	andeq	r0, r0, r6, lsl r1
    3a08:	93012100 	movwls	r2, #4352	; 0x1100
    3a0c:	0100000c 	tsteq	r0, ip
    3a10:	01010333 	tsteq	r1, r3, lsr r3
    3a14:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3a20:	0c3e9c01 	ldceq	12, cr9, [lr], #-4
    3a24:	66220000 	strtvs	r0, [r2], -r0
    3a28:	33010064 	movwcc	r0, #4196	; 0x1064
    3a2c:	00812c03 	addeq	r2, r1, r3, lsl #24
    3a30:	145f0000 	ldrbne	r0, [pc], #-0	; 3a38 <__exidx_end+0xdc4>
    3a34:	6f220000 	svcvs	0x00220000
    3a38:	01007470 	tsteq	r0, r0, ror r4
    3a3c:	81340333 	teqhi	r4, r3, lsr r3
    3a40:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    3a44:	22000014 	andcs	r0, r0, #20
    3a48:	00677261 	rsbeq	r7, r7, r1, ror #4
    3a4c:	41033301 	tstmi	r3, r1, lsl #6
    3a50:	00000116 	andeq	r0, r0, r6, lsl r1
    3a54:	000014c7 	andeq	r1, r0, r7, asr #9
    3a58:	0000002f 	andeq	r0, r0, pc, lsr #32
    3a5c:	00000000 	andeq	r0, r0, r0
    3a60:	00702800 	rsbseq	r2, r0, r0, lsl #16
    3a64:	15033c01 	strne	r3, [r3, #-3073]	; 0xfffff3ff
    3a68:	000007d4 	ldrdeq	r0, [r0], -r4
    3a6c:	000014f0 	strdeq	r1, [r0], -r0
    3a70:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3a74:	00000d28 	andeq	r0, r0, r8, lsr #26
    3a78:	01032b01 	tsteq	r3, r1, lsl #22
    3a7c:	00000001 	andeq	r0, r0, r1
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    3a88:	2200000c 	andcs	r0, r0, #12
    3a8c:	2b010070 	blcs	43c54 <__ccfg+0x23cac>
    3a90:	01162e03 	tsteq	r6, r3, lsl #28
    3a94:	15030000 	strne	r0, [r3, #-0]
    3a98:	21000000 	mrscs	r0, (UNDEF: 0)
    3a9c:	000e0201 	andeq	r0, lr, r1, lsl #4
    3aa0:	031a0100 	tsteq	sl, #0, 2
    3aa4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ab4:	00000cc1 	andeq	r0, r0, r1, asr #25
    3ab8:	01007022 	tsteq	r0, r2, lsr #32
    3abc:	162e031a 			; <UNDEFINED> instruction: 0x162e031a
    3ac0:	21000001 	tstcs	r0, r1
    3ac4:	22000015 	andcs	r0, r0, #21
    3ac8:	00667562 	rsbeq	r7, r6, r2, ror #10
    3acc:	3d031a01 	vstrcc	s2, [r3, #-4]
    3ad0:	00000259 	andeq	r0, r0, r9, asr r2
    3ad4:	0000153f 	andeq	r1, r0, pc, lsr r5
    3ad8:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3adc:	031a0100 	tsteq	sl, #0, 2
    3ae0:	00008146 	andeq	r8, r0, r6, asr #2
    3ae4:	00155200 	andseq	r5, r5, r0, lsl #4
    3ae8:	00622900 	rsbeq	r2, r2, r0, lsl #18
    3aec:	0c031e01 	stceq	14, cr1, [r3], {1}
    3af0:	0000089d 	muleq	r0, sp, r8
    3af4:	48012100 	stmdami	r1, {r8, sp}
    3af8:	0100000e 	tsteq	r0, lr
    3afc:	01010308 	tsteq	r1, r8, lsl #6
    3b00:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3b0c:	0d1b9c01 	ldceq	12, cr9, [fp, #-4]
    3b10:	70220000 	eorvc	r0, r2, r0
    3b14:	03080100 	movweq	r0, #33024	; 0x8100
    3b18:	0001162d 	andeq	r1, r1, sp, lsr #12
    3b1c:	00157000 	andseq	r7, r5, r0
    3b20:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    3b24:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    3b28:	0d1b3603 	ldceq	6, cr3, [fp, #-12]
    3b2c:	158e0000 	strne	r0, [lr]
    3b30:	6c220000 	stcvs	0, cr0, [r2], #-0
    3b34:	01006e65 	tsteq	r0, r5, ror #28
    3b38:	813f0308 	teqhi	pc, r8, lsl #6
    3b3c:	ac000000 	stcge	0, cr0, [r0], {-0}
    3b40:	29000015 	stmdbcs	r0, {r0, r2, r4}
    3b44:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    3b48:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3b4c:	0a000000 	beq	3b54 <__exidx_end+0xee0>
    3b50:	0000e304 	andeq	lr, r0, r4, lsl #6
    3b54:	f9012100 			; <UNDEFINED> instruction: 0xf9012100
    3b58:	0100000d 	tsteq	r0, sp
    3b5c:	010102cd 	smlabteq	r1, sp, r2, r0
    3b60:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3b6c:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 3b78 <__exidx_end+0xf04>
    3b70:	812b0000 			; <UNDEFINED> instruction: 0x812b0000
    3b74:	0100000b 	tsteq	r0, fp
    3b78:	cd2e02cd 	sfmgt	f0, 4, [lr, #-820]!	; 0xfffffccc
    3b7c:	ca000000 	bgt	3b84 <__exidx_end+0xf10>
    3b80:	22000015 	andcs	r0, r0, #21
    3b84:	01006466 	tsteq	r0, r6, ror #8
    3b88:	813902cd 	teqhi	r9, sp, asr #5
    3b8c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3b90:	2b000015 	blcs	3bec <__exidx_end+0xf78>
    3b94:	00000ee3 	andeq	r0, r0, r3, ror #29
    3b98:	4102cd01 	tstmi	r2, r1, lsl #26
    3b9c:	00000081 	andeq	r0, r0, r1, lsl #1
    3ba0:	00001611 	andeq	r1, r0, r1, lsl r6
    3ba4:	67727522 	ldrbvs	r7, [r2, -r2, lsr #10]!
    3ba8:	02ce0100 	sbceq	r0, lr, #0, 2
    3bac:	0000c111 	andeq	ip, r0, r1, lsl r1
    3bb0:	00165b00 	andseq	r5, r6, r0, lsl #22
    3bb4:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3bb8:	0c02cf01 	stceq	15, cr12, [r2], {1}
    3bbc:	0000089d 	muleq	r0, sp, r8
    3bc0:	0000166e 	andeq	r1, r0, lr, ror #12
    3bc4:	000deb30 	andeq	lr, sp, r0, lsr fp
    3bc8:	02d00100 	sbcseq	r0, r0, #0, 2
    3bcc:	0003550b 	andeq	r5, r3, fp, lsl #10
    3bd0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3bd4:	0100732a 	tsteq	r0, sl, lsr #6
    3bd8:	400d02d1 	ldrdmi	r0, [sp], -r1
    3bdc:	01000007 	tsteq	r0, r7
    3be0:	69652857 	stmdbvs	r5!, {r0, r1, r2, r4, r6, fp, sp}^
    3be4:	d2010064 	andle	r0, r1, #100	; 0x64
    3be8:	00810602 	addeq	r0, r1, r2, lsl #12
    3bec:	168c0000 	strne	r0, [ip], r0
    3bf0:	21000000 	mrscs	r0, (UNDEF: 0)
    3bf4:	000db801 	andeq	fp, sp, r1, lsl #16
    3bf8:	02a40100 	adceq	r0, r4, #0, 2
    3bfc:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3c08:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c0c:	00000e72 	andeq	r0, r0, r2, ror lr
    3c10:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3c14:	2a02a401 	bcs	acc20 <__ccfg+0x8cc78>
    3c18:	00000081 	andeq	r0, r0, r1, lsl #1
    3c1c:	000016b5 			; <UNDEFINED> instruction: 0x000016b5
    3c20:	000eea2b 	andeq	lr, lr, fp, lsr #20
    3c24:	02a40100 	adceq	r0, r4, #0, 2
    3c28:	00008132 	andeq	r8, r0, r2, lsr r1
    3c2c:	0016e900 	andseq	lr, r6, r0, lsl #18
    3c30:	00732800 	rsbseq	r2, r3, r0, lsl #16
    3c34:	0d02a801 	stceq	8, cr10, [r2, #-4]
    3c38:	00000740 	andeq	r0, r0, r0, asr #14
    3c3c:	0000171d 	andeq	r1, r0, sp, lsl r7
    3c40:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    3c44:	0602a901 	streq	sl, [r2], -r1, lsl #18
    3c48:	00000081 	andeq	r0, r0, r1, lsl #1
    3c4c:	00001782 	andeq	r1, r0, r2, lsl #15
    3c50:	00717228 	rsbseq	r7, r1, r8, lsr #4
    3c54:	0b02aa01 	bleq	ae460 <__ccfg+0x8e4b8>
    3c58:	0000078a 	andeq	r0, r0, sl, lsl #15
    3c5c:	000017a0 	andeq	r1, r0, r0, lsr #15
    3c60:	01006228 	tsteq	r0, r8, lsr #4
    3c64:	9d0c02ab 	sfmls	f0, 4, [ip, #-684]	; 0xfffffd54
    3c68:	be000008 	cdplt	0, 0, cr0, cr0, cr8, {0}
    3c6c:	31000017 	tstcc	r0, r7, lsl r0
    3c70:	00000d9e 	muleq	r0, lr, sp
    3c74:	0102c001 	tsteq	r2, r1
    3c78:	00000000 	andeq	r0, r0, r0
    3c7c:	00114e32 	andseq	r4, r1, r2, lsr lr
	...
    3c88:	02bb0100 	adcseq	r0, fp, #0, 2
    3c8c:	1160330a 	cmnne	r0, sl, lsl #6
    3c90:	6b260000 	blvs	983c98 <__ccfg+0x963cf0>
    3c94:	e7000011 	smlad	r0, r1, r0, r0
    3c98:	26000017 			; <UNDEFINED> instruction: 0x26000017
    3c9c:	00001176 	andeq	r1, r0, r6, ror r1
    3ca0:	000017fa 	strdeq	r1, [r0], -sl
    3ca4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3ca8:	00000c6b 	andeq	r0, r0, fp, ror #24
    3cac:	01027d01 	tsteq	r2, r1, lsl #26
    3cb0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3cbc:	ef9c0100 	svc	0x009c0100
    3cc0:	2200000e 	andcs	r0, r0, #14
    3cc4:	01006466 	tsteq	r0, r6, ror #8
    3cc8:	812a027d 			; <UNDEFINED> instruction: 0x812a027d
    3ccc:	0d000000 	stceq	0, cr0, [r0, #-0]
    3cd0:	2b000018 	blcs	3d38 <__exidx_end+0x10c4>
    3cd4:	00000eea 	andeq	r0, r0, sl, ror #29
    3cd8:	32027d01 	andcc	r7, r2, #1, 26	; 0x40
    3cdc:	00000081 	andeq	r0, r0, r1, lsl #1
    3ce0:	00001841 	andeq	r1, r0, r1, asr #16
    3ce4:	01007328 	tsteq	r0, r8, lsr #6
    3ce8:	400d0281 	andmi	r0, sp, r1, lsl #5
    3cec:	6a000007 	bvs	3d10 <__exidx_end+0x109c>
    3cf0:	28000018 	stmdacs	r0, {r3, r4}
    3cf4:	0100716e 	tsteq	r0, lr, ror #2
    3cf8:	81060282 	smlabbhi	r6, r2, r2, r0
    3cfc:	cf000000 	svcgt	0x00000000
    3d00:	28000018 	stmdacs	r0, {r3, r4}
    3d04:	01007172 	tsteq	r0, r2, ror r1
    3d08:	8a0b0283 	bhi	2c471c <__ccfg+0x2a4774>
    3d0c:	ed000007 	stc	0, cr0, [r0, #-28]	; 0xffffffe4
    3d10:	28000018 	stmdacs	r0, {r3, r4}
    3d14:	84010062 	strhi	r0, [r1], #-98	; 0xffffff9e
    3d18:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3d1c:	19160000 	ldmdbne	r6, {}	; <UNPREDICTABLE>
    3d20:	21000000 	mrscs	r0, (UNDEF: 0)
    3d24:	000eef01 	andeq	lr, lr, r1, lsl #30
    3d28:	02560100 	subseq	r0, r6, #0, 2
    3d2c:	01160101 	tsteq	r6, r1, lsl #2
	...
    3d38:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d3c:	00000f5c 	andeq	r0, r0, ip, asr pc
    3d40:	000b812b 	andeq	r8, fp, fp, lsr #2
    3d44:	02560100 	subseq	r0, r6, #0, 2
    3d48:	0000cd2d 	andeq	ip, r0, sp, lsr #26
    3d4c:	00194a00 	andseq	r4, r9, r0, lsl #20
    3d50:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3d54:	02560100 	subseq	r0, r6, #0, 2
    3d58:	00008138 	andeq	r8, r0, r8, lsr r1
    3d5c:	00195d00 	andseq	r5, r9, r0, lsl #26
    3d60:	00702800 	rsbseq	r2, r0, r0, lsl #16
    3d64:	0a025d01 	beq	9b170 <__ccfg+0x7b1c8>
    3d68:	00000116 	andeq	r0, r0, r6, lsl r1
    3d6c:	0000199c 	muleq	r0, ip, r9
    3d70:	01006228 	tsteq	r0, r8, lsr #4
    3d74:	9d0c025e 	sfmls	f0, 4, [ip, #-376]	; 0xfffffe88
    3d78:	af000008 	svcge	0x00000008
    3d7c:	28000019 	stmdacs	r0, {r0, r3, r4}
    3d80:	01007172 	tsteq	r0, r2, ror r1
    3d84:	8a0b025f 	bhi	2c4708 <__ccfg+0x2a4760>
    3d88:	d8000007 	stmdale	r0, {r0, r1, r2}
    3d8c:	00000019 	andeq	r0, r0, r9, lsl r0
    3d90:	0eb50121 	frdeqsp	f0, f5, f1
    3d94:	4a010000 	bmi	43d9c <__ccfg+0x23df4>
    3d98:	81010102 	tsthi	r1, r2, lsl #2
	...
    3da4:	01000000 	mrseq	r0, (UNDEF: 0)
    3da8:	000f999c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    3dac:	726f2200 	rsbvc	r2, pc, #0, 4
    3db0:	4a010064 	bmi	43f48 <__ccfg+0x23fa0>
    3db4:	00812902 	addeq	r2, r1, r2, lsl #18
    3db8:	1a120000 	bne	483dc0 <__ccfg+0x463e18>
    3dbc:	70340000 	eorsvc	r0, r4, r0
    3dc0:	4a01006c 	bmi	43f78 <__ccfg+0x23fd0>
    3dc4:	07d43f02 	ldrbeq	r3, [r4, r2, lsl #30]
    3dc8:	51010000 	mrspl	r0, (UNDEF: 1)
    3dcc:	14012100 	strne	r2, [r1], #-256	; 0xffffff00
    3dd0:	0100000e 	tsteq	r0, lr
    3dd4:	01010229 	tsteq	r1, r9, lsr #4
    3dd8:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3de4:	0ff69c01 	svceq	0x00f69c01
    3de8:	812b0000 			; <UNDEFINED> instruction: 0x812b0000
    3dec:	0100000b 	tsteq	r0, fp
    3df0:	cd2b0229 	sfmgt	f0, 4, [fp, #-164]!	; 0xffffff5c
    3df4:	30000000 	andcc	r0, r0, r0
    3df8:	2200001a 	andcs	r0, r0, #26
    3dfc:	01006466 	tsteq	r0, r6, ror #8
    3e00:	81360229 	teqhi	r6, r9, lsr #4
    3e04:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    3e08:	2800001a 	stmdacs	r0, {r1, r3, r4}
    3e0c:	2b010073 	blcs	43fe0 <__ccfg+0x24038>
    3e10:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3e14:	1a980000 	bne	fe603e1c <_estack+0xde5fee1c>
    3e18:	62280000 	eorvs	r0, r8, #0
    3e1c:	022c0100 	eoreq	r0, ip, #0, 2
    3e20:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3e24:	001aab00 	andseq	sl, sl, r0, lsl #22
    3e28:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3e2c:	00000d1f 	andeq	r0, r0, pc, lsl sp
    3e30:	0101f601 	tsteq	r1, r1, lsl #12	; <UNPREDICTABLE>
    3e34:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3e40:	839c0100 	orrshi	r0, ip, #0, 2
    3e44:	2b000010 	blcs	3e8c <__exidx_end+0x1218>
    3e48:	00000b81 	andeq	r0, r0, r1, lsl #23
    3e4c:	2a01f601 	bcs	81658 <__ccfg+0x616b0>
    3e50:	000000cd 	andeq	r0, r0, sp, asr #1
    3e54:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
    3e58:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3e5c:	01f60100 	mvnseq	r0, r0, lsl #2
    3e60:	00008135 	andeq	r8, r0, r5, lsr r1
    3e64:	001ae700 	andseq	lr, sl, r0, lsl #14
    3e68:	0e812b00 	vdiveq.f64	d2, d1, d0
    3e6c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3e70:	00813e01 	addeq	r3, r1, r1, lsl #28
    3e74:	1b3c0000 	blne	f03e7c <__ccfg+0xee3ed4>
    3e78:	28350000 	ldmdacs	r5!, {}	; <UNPREDICTABLE>
    3e7c:	01006466 	tsteq	r0, r6, ror #8
    3e80:	810601f8 	strdhi	r0, [r6, -r8]
    3e84:	74000000 	strvc	r0, [r0], #-0
    3e88:	3600001b 			; <UNDEFINED> instruction: 0x3600001b
    3e8c:	00000d8c 	andeq	r0, r0, ip, lsl #27
    3e90:	0a01f901 	beq	8229c <__ccfg+0x622f4>
    3e94:	00000556 	andeq	r0, r0, r6, asr r5
    3e98:	01007328 	tsteq	r0, r8, lsr #6
    3e9c:	400d01fa 	strdmi	r0, [sp], -sl
    3ea0:	92000007 	andls	r0, r0, #7
    3ea4:	2a00001b 	bcs	3f18 <__exidx_end+0x12a4>
    3ea8:	01007061 	tsteq	r0, r1, rrx
    3eac:	b50b01fc 	strlt	r0, [fp, #-508]	; 0xfffffe04
    3eb0:	02000000 	andeq	r0, r0, #0
    3eb4:	27005491 			; <UNDEFINED> instruction: 0x27005491
    3eb8:	000dc201 	andeq	ip, sp, r1, lsl #4
    3ebc:	013b0100 	teqeq	fp, r0, lsl #2
    3ec0:	00000101 	andeq	r0, r0, r1, lsl #2
    3ec4:	00000000 	andeq	r0, r0, r0
    3ec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ecc:	000010bb 	strheq	r1, [r0], -fp
    3ed0:	01007022 	tsteq	r0, r2, lsr #32
    3ed4:	162e013b 			; <UNDEFINED> instruction: 0x162e013b
    3ed8:	dc000001 	stcle	0, cr0, [r0], {1}
    3edc:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    3ee0:	41010062 	tstmi	r1, r2, rrx
    3ee4:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    3ee8:	1c050000 	stcne	0, cr0, [r5], {-0}
    3eec:	37000000 	strcc	r0, [r0, -r0]
    3ef0:	00627061 	rsbeq	r7, r2, r1, rrx
    3ef4:	01011401 	tsteq	r1, r1, lsl #8
    3ef8:	00089d01 	andeq	r9, r8, r1, lsl #26
	...
    3f04:	029c0100 	addseq	r0, ip, #0, 2
    3f08:	2b000011 	blcs	3f54 <__exidx_end+0x12e0>
    3f0c:	00001397 	muleq	r0, r7, r3
    3f10:	2b011401 	blcs	48f1c <__ccfg+0x28f74>
    3f14:	000000cd 	andeq	r0, r0, sp, asr #1
    3f18:	00001c39 	andeq	r1, r0, r9, lsr ip
    3f1c:	0100702a 	tsteq	r0, sl, lsr #32
    3f20:	9d0c0119 	stflss	f0, [ip, #-100]	; 0xffffff9c
    3f24:	01000008 	tsteq	r0, r8
    3f28:	73632950 	cmnvc	r3, #80, 18	; 0x140000
    3f2c:	011a0100 	tsteq	sl, r0, lsl #2
    3f30:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3f34:	72380000 	eorsvc	r0, r8, #0
    3f38:	0100706c 	tsteq	r0, ip, rrx
    3f3c:	01010104 	tsteq	r1, r4, lsl #2
	...
    3f48:	112a9c01 			; <UNDEFINED> instruction: 0x112a9c01
    3f4c:	70220000 	eorvc	r0, r2, r0
    3f50:	01040100 	mrseq	r0, (UNDEF: 20)
    3f54:	00089d2b 	andeq	r9, r8, fp, lsr #26
    3f58:	001c4c00 	andseq	r4, ip, r0, lsl #24
    3f5c:	df390000 	svcle	0x00390000
    3f60:	0100000c 	tsteq	r0, ip
    3f64:	010101e0 	smlatteq	r1, r0, r1, r0
    3f68:	0000114e 	andeq	r1, r0, lr, asr #2
    3f6c:	0100703a 	tsteq	r0, sl, lsr r0
    3f70:	089d2fe0 	ldmeq	sp, {r5, r6, r7, r8, r9, sl, fp, sp}
    3f74:	643a0000 	ldrtvs	r0, [sl], #-0
    3f78:	e0010076 	and	r0, r1, r6, ror r0
    3f7c:	00008136 	andeq	r8, r0, r6, lsr r1
    3f80:	3a3b0000 	bcc	ec3f88 <__ccfg+0xea3fe0>
    3f84:	0100000d 	tsteq	r0, sp
    3f88:	810101cf 	smlabthi	r1, pc, r1, r0	; <UNPREDICTABLE>
    3f8c:	01000000 	mrseq	r0, (UNDEF: 0)
    3f90:	00001181 	andeq	r1, r0, r1, lsl #3
    3f94:	00716f3a 	rsbseq	r6, r1, sl, lsr pc
    3f98:	8a2bcf01 	bhi	af7ba4 <__ccfg+0xad7bfc>
    3f9c:	3c000007 	stccc	0, cr0, [r0], {7}
    3fa0:	0100716e 	tsteq	r0, lr, ror #2
    3fa4:	008106d3 	ldrdeq	r0, [r1], r3
    3fa8:	623c0000 	eorsvs	r0, ip, #0
    3fac:	0cd40100 	ldfeqe	f0, [r4], {0}
    3fb0:	0000089d 	muleq	r0, sp, r8
    3fb4:	6e653d00 	cdpvs	13, 6, cr3, cr5, cr0, {0}
    3fb8:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    3fbc:	a4010101 	strge	r0, [r1], #-257	; 0xfffffeff
    3fc0:	3a000011 	bcc	400c <__exidx_end+0x1398>
    3fc4:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    3fc8:	00078a2a 	andeq	r8, r7, sl, lsr #20
    3fcc:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    3fd0:	9d37a801 	ldcls	8, cr10, [r7, #-4]!
    3fd4:	00000008 	andeq	r0, r0, r8
    3fd8:	7165643d 	cmnvc	r5, sp, lsr r4
    3fdc:	017f0100 	cmneq	pc, r0, lsl #2
    3fe0:	11bd0101 			; <UNDEFINED> instruction: 0x11bd0101
    3fe4:	703a0000 	eorsvc	r0, sl, r0
    3fe8:	2b7f0100 	blcs	1fc43f0 <__ccfg+0x1fa4448>
    3fec:	0000089d 	muleq	r0, sp, r8
    3ff0:	11a43e00 			; <UNDEFINED> instruction: 0x11a43e00
	...
    3ffc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4000:	000011f2 	strdeq	r1, [r0], -r2
    4004:	0011b23f 	andseq	fp, r1, pc, lsr r2
    4008:	40500100 	subsmi	r0, r0, r0, lsl #2
    400c:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    4018:	24017f01 	strcs	r7, [r1], #-3841	; 0xfffff0ff
    401c:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4020:	00001c5f 	andeq	r1, r0, pc, asr ip
    4024:	813e0000 	teqhi	lr, r0
    4028:	00000011 	andeq	r0, r0, r1, lsl r0
    402c:	00000000 	andeq	r0, r0, r0
    4030:	01000000 	mrseq	r0, (UNDEF: 0)
    4034:	00123b9c 	mulseq	r2, ip, fp
    4038:	118f2400 	orrne	r2, pc, r0, lsl #8
    403c:	1c720000 	ldclne	0, cr0, [r2], #-0
    4040:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    4044:	a6000011 			; <UNDEFINED> instruction: 0xa6000011
    4048:	4000001c 	andmi	r0, r0, ip, lsl r0
    404c:	00001181 	andeq	r1, r0, r1, lsl #3
	...
    4058:	2401a801 	strcs	sl, [r1], #-2049	; 0xfffff7ff
    405c:	0000118f 	andeq	r1, r0, pc, lsl #3
    4060:	00001cda 	ldrdeq	r1, [r0], -sl
    4064:	00119924 	andseq	r9, r1, r4, lsr #18
    4068:	001cf800 	andseq	pc, ip, r0, lsl #16
    406c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4070:	0000112a 	andeq	r1, r0, sl, lsr #2
	...
    407c:	12809c01 	addne	r9, r0, #256	; 0x100
    4080:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    4084:	16000011 			; <UNDEFINED> instruction: 0x16000011
    4088:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    408c:	00001142 	andeq	r1, r0, r2, asr #2
    4090:	00001d6b 	andeq	r1, r0, fp, ror #26
    4094:	00112a41 	andseq	r2, r1, r1, asr #20
    4098:	00000000 	andeq	r0, r0, r0
    409c:	0007e000 	andeq	lr, r7, r0
    40a0:	01e00100 	mvneq	r0, r0, lsl #2
    40a4:	00114233 	andseq	r4, r1, r3, lsr r2
    40a8:	11382400 	teqne	r8, r0, lsl #8
    40ac:	1d7e0000 	ldclne	0, cr0, [lr, #-0]
    40b0:	00000000 	andeq	r0, r0, r0
    40b4:	000b993e 	andeq	r9, fp, lr, lsr r9
	...
    40c0:	d89c0100 	ldmle	ip, {r8}
    40c4:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    40c8:	00000bad 	andeq	r0, r0, sp, lsr #23
    40cc:	00001d9c 	muleq	r0, ip, sp
    40d0:	000bba24 	andeq	fp, fp, r4, lsr #20
    40d4:	001dba00 	andseq	fp, sp, r0, lsl #20
    40d8:	0bc72400 	bleq	ff1cd0e0 <_estack+0xdf1c80e0>
    40dc:	1de30000 	stclne	0, cr0, [r3]
    40e0:	99320000 	ldmdbls	r2!, {}	; <UNPREDICTABLE>
    40e4:	0000000b 	andeq	r0, r0, fp
    40e8:	00000000 	andeq	r0, r0, r0
    40ec:	01000000 	mrseq	r0, (UNDEF: 0)
    40f0:	33010352 	movwcc	r0, #4946	; 0x1352
    40f4:	00000bad 	andeq	r0, r0, sp, lsr #23
    40f8:	000bba24 	andeq	fp, fp, r4, lsr #20
    40fc:	001e0c00 	andseq	r0, lr, r0, lsl #24
    4100:	0bc72400 	bleq	ff1cd108 <_estack+0xdf1c8108>
    4104:	1e1f0000 	cdpne	0, 1, cr0, cr15, cr0, {0}
    4108:	00000000 	andeq	r0, r0, r0
    410c:	000a4a42 	andeq	r4, sl, r2, asr #20
	...
    4118:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    411c:	00000a5e 	andeq	r0, r0, lr, asr sl
    4120:	00001e32 	andeq	r1, r0, r2, lsr lr
    4124:	000a6b24 	andeq	r6, sl, r4, lsr #22
    4128:	001e4500 	andseq	r4, lr, r0, lsl #10
    412c:	0a782400 	beq	1e0d134 <__ccfg+0x1ded18c>
    4130:	1ea50000 	cdpne	0, 10, cr0, cr5, cr0, {0}
    4134:	85260000 	strhi	r0, [r6, #-0]!
    4138:	ef00000a 	svc	0x0000000a
    413c:	3200001e 	andcc	r0, r0, #30
    4140:	00000a4a 	andeq	r0, r0, sl, asr #20
	...
    414c:	01038601 	tsteq	r3, r1, lsl #12
    4150:	000a5e33 	andeq	r5, sl, r3, lsr lr
    4154:	0a6b2400 	beq	1acd15c <__ccfg+0x1aad1b4>
    4158:	1f230000 	svcne	0x00230000
    415c:	78330000 	ldmdavc	r3!, {}	; <UNPREDICTABLE>
    4160:	4300000a 	movwmi	r0, #10
    4164:	00000a85 	andeq	r0, r0, r5, lsl #21
    4168:	74000000 	strvc	r0, [r0], #-0
    416c:	03000001 	movweq	r0, #1
    4170:	00106a00 	andseq	r6, r0, r0, lsl #20
    4174:	70010400 	andvc	r0, r1, r0, lsl #8
    4178:	0c000001 	stceq	0, cr0, [r0], {1}
    417c:	00000f77 	andeq	r0, r0, r7, ror pc
    4180:	000000c0 	andeq	r0, r0, r0, asr #1
    4184:	00000910 	andeq	r0, r0, r0, lsl r9
    4188:	00000000 	andeq	r0, r0, r0
    418c:	0000361a 	andeq	r3, r0, sl, lsl r6
    4190:	a3060102 	movwge	r0, #24834	; 0x6102
    4194:	02000003 	andeq	r0, r0, #3
    4198:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    419c:	04020000 	streq	r0, [r2], #-0
    41a0:	00009d05 	andeq	r9, r0, r5, lsl #26
    41a4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    41a8:	00000098 	muleq	r0, r8, r0
    41ac:	a1080102 	tstge	r8, r2, lsl #2
    41b0:	02000003 	andeq	r0, r0, #3
    41b4:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    41b8:	b3030000 	movwlt	r0, #12288	; 0x3000
    41bc:	02000017 	andeq	r0, r0, #23
    41c0:	005b1934 	subseq	r1, fp, r4, lsr r9
    41c4:	04020000 	streq	r0, [r2], #-0
    41c8:	00007207 	andeq	r7, r0, r7, lsl #4
    41cc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    41d0:	0000006d 	andeq	r0, r0, sp, rrx
    41d4:	69050404 	stmdbvs	r5, {r2, sl}
    41d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    41dc:	00770704 	rsbseq	r0, r7, r4, lsl #14
    41e0:	04050000 	streq	r0, [r5], #-0
    41e4:	00000082 	andeq	r0, r0, r2, lsl #1
    41e8:	00007706 	andeq	r7, r0, r6, lsl #14
    41ec:	05010700 	streq	r0, [r1, #-1792]	; 0xfffff900
    41f0:	00004f04 	andeq	r4, r0, r4, lsl #30
    41f4:	0f6a0800 	svceq	0x006a0800
    41f8:	7f010000 	svcvc	0x00010000
    41fc:	00004f11 	andeq	r4, r0, r1, lsl pc
    4200:	08010100 	stmdaeq	r1, {r8}
    4204:	00000f3e 	andeq	r0, r0, lr, lsr pc
    4208:	4f118001 	svcmi	0x00118001
    420c:	01000000 	mrseq	r0, (UNDEF: 0)
    4210:	0fba0801 	svceq	0x00ba0801
    4214:	81010000 	mrshi	r0, (UNDEF: 1)
    4218:	00004f11 	andeq	r4, r0, r1, lsl pc
    421c:	08010100 	stmdaeq	r1, {r8}
    4220:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    4224:	4f118201 	svcmi	0x00118201
    4228:	01000000 	mrseq	r0, (UNDEF: 0)
    422c:	0f710801 	svceq	0x00710801
    4230:	83010000 	movwhi	r0, #4096	; 0x1000
    4234:	00004f11 	andeq	r4, r0, r1, lsl pc
    4238:	08010100 	stmdaeq	r1, {r8}
    423c:	00000f36 	andeq	r0, r0, r6, lsr pc
    4240:	4f118401 	svcmi	0x00118401
    4244:	01000000 	mrseq	r0, (UNDEF: 0)
    4248:	007d0901 	rsbseq	r0, sp, r1, lsl #18
    424c:	00ee0000 	rsceq	r0, lr, r0
    4250:	700a0000 	andvc	r0, sl, r0
    4254:	31000000 	mrscc	r0, (UNDEF: 0)
    4258:	00de0600 	sbcseq	r0, lr, r0, lsl #12
    425c:	d30b0000 	movwle	r0, #45056	; 0xb000
    4260:	0100000f 	tsteq	r0, pc
    4264:	00ee0f8e 	rsceq	r0, lr, lr, lsl #31
    4268:	05010000 	streq	r0, [r1, #-0]
    426c:	00000003 	andeq	r0, r0, r3
    4270:	0fc10c00 	svceq	0x00c10c00
    4274:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4278:	ea010101 	b	44684 <__ccfg+0x246dc>
    427c:	ec000013 	stc	0, cr0, [r0], {19}
    4280:	01000013 	tsteq	r0, r3, lsl r0
    4284:	0f4d0c9c 	svceq	0x004d0c9c
    4288:	16010000 	strne	r0, [r1], -r0
    428c:	e8010101 	stmda	r1, {r0, r8}
    4290:	ea000013 	b	42e4 <__exidx_end+0x1670>
    4294:	01000013 	tsteq	r0, r3, lsl r0
    4298:	0f5d0c9c 	svceq	0x005d0c9c
    429c:	04010000 	streq	r0, [r1], #-0
    42a0:	e6010101 	str	r0, [r1], -r1, lsl #2
    42a4:	e8000013 	stmda	r0, {r0, r1, r4}
    42a8:	01000013 	tsteq	r0, r3, lsl r0
    42ac:	ea010d9c 	b	47924 <__ccfg+0x2797c>
    42b0:	0100000f 	tsteq	r0, pc
    42b4:	ec0101d2 	stfs	f0, [r1], {210}	; 0xd2
    42b8:	30000013 	andcc	r0, r0, r3, lsl r0
    42bc:	01000014 	tsteq	r0, r4, lsl r0
    42c0:	0f440e9c 	svceq	0x00440e9c
    42c4:	d4010000 	strle	r0, [r1], #-0
    42c8:	0000840f 	andeq	r8, r0, pc, lsl #8
    42cc:	001f3600 	andseq	r3, pc, r0, lsl #12
    42d0:	0fe00e00 	svceq	0x00e00e00
    42d4:	d4010000 	strle	r0, [r1], #-0
    42d8:	0000841a 	andeq	r8, r0, sl, lsl r4
    42dc:	001f5400 	andseq	r5, pc, r0, lsl #8
    42e0:	37000000 	strcc	r0, [r0, -r0]
    42e4:	03000005 	movweq	r0, #5
    42e8:	00112f00 	andseq	r2, r1, r0, lsl #30
    42ec:	70010400 	andvc	r0, r1, r0, lsl #8
    42f0:	0c000001 	stceq	0, cr0, [r0], {1}
    42f4:	0000104a 	andeq	r1, r0, sl, asr #32
    42f8:	000000c0 	andeq	r0, r0, r0, asr #1
    42fc:	00003741 	andeq	r3, r0, r1, asr #14
    4300:	a3060102 	movwge	r0, #24834	; 0x6102
    4304:	02000003 	andeq	r0, r0, #3
    4308:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    430c:	04020000 	streq	r0, [r2], #-0
    4310:	00009d05 	andeq	r9, r0, r5, lsl #26
    4314:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    4318:	00000098 	muleq	r0, r8, r0
    431c:	0021fc03 	eoreq	pc, r1, r3, lsl #24
    4320:	182e0100 	stmdane	lr!, {r8}
    4324:	00000045 	andeq	r0, r0, r5, asr #32
    4328:	a1080102 	tstge	r8, r2, lsl #2
    432c:	03000003 	movweq	r0, #3
    4330:	000020ea 	andeq	r2, r0, sl, ror #1
    4334:	58193101 	ldmdapl	r9, {r0, r8, ip, sp}
    4338:	02000000 	andeq	r0, r0, #0
    433c:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    4340:	b3030000 	movwlt	r0, #12288	; 0x3000
    4344:	01000017 	tsteq	r0, r7, lsl r0
    4348:	006b1934 	rsbeq	r1, fp, r4, lsr r9
    434c:	04020000 	streq	r0, [r2], #-0
    4350:	00007207 	andeq	r7, r0, r7, lsl #4
    4354:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4358:	0000006d 	andeq	r0, r0, sp, rrx
    435c:	69050404 	stmdbvs	r5, {r2, sl}
    4360:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4364:	00770704 	rsbseq	r0, r7, r4, lsl #14
    4368:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    436c:	af092f02 	svcge	0x00092f02
    4370:	06000001 	streq	r0, [r0], -r1
    4374:	000011a4 	andeq	r1, r0, r4, lsr #3
    4378:	5f103102 	svcpl	0x00103102
    437c:	00000000 	andeq	r0, r0, r0
    4380:	0010b906 	andseq	fp, r0, r6, lsl #18
    4384:	10320200 	eorsne	r0, r2, r0, lsl #4
    4388:	0000005f 	andeq	r0, r0, pc, asr r0
    438c:	10810604 	addne	r0, r1, r4, lsl #12
    4390:	33020000 	movwcc	r0, #8192	; 0x2000
    4394:	00005f10 	andeq	r5, r0, r0, lsl pc
    4398:	34060800 	strcc	r0, [r6], #-2048	; 0xfffff800
    439c:	02000010 	andeq	r0, r0, #16
    43a0:	005f1034 	subseq	r1, pc, r4, lsr r0	; <UNPREDICTABLE>
    43a4:	060c0000 	streq	r0, [ip], -r0
    43a8:	00000ff3 	strdeq	r0, [r0], -r3
    43ac:	5f103502 	svcpl	0x00103502
    43b0:	10000000 	andne	r0, r0, r0
    43b4:	00100406 	andseq	r0, r0, r6, lsl #8
    43b8:	10360200 	eorsne	r0, r6, r0, lsl #4
    43bc:	0000005f 	andeq	r0, r0, pc, asr r0
    43c0:	10240614 	eorne	r0, r4, r4, lsl r6
    43c4:	37020000 	strcc	r0, [r2, -r0]
    43c8:	00005f10 	andeq	r5, r0, r0, lsl pc
    43cc:	49061800 	stmdbmi	r6, {fp, ip}
    43d0:	02000011 	andeq	r0, r0, #17
    43d4:	005f1038 	subseq	r1, pc, r8, lsr r0	; <UNPREDICTABLE>
    43d8:	061c0000 	ldreq	r0, [ip], -r0
    43dc:	00001099 	muleq	r0, r9, r0
    43e0:	5f103902 	svcpl	0x00103902
    43e4:	20000000 	andcs	r0, r0, r0
    43e8:	0010a906 	andseq	sl, r0, r6, lsl #18
    43ec:	103a0200 	eorsne	r0, sl, r0, lsl #4
    43f0:	0000005f 	andeq	r0, r0, pc, asr r0
    43f4:	116f0624 	cmnne	pc, r4, lsr #12
    43f8:	3b020000 	blcc	84400 <__ccfg+0x64458>
    43fc:	00005f10 	andeq	r5, r0, r0, lsl pc
    4400:	7f062800 	svcvc	0x00062800
    4404:	02000011 	andeq	r0, r0, #17
    4408:	005f103c 	subseq	r1, pc, ip, lsr r0	; <UNPREDICTABLE>
    440c:	062c0000 	strteq	r0, [ip], -r0
    4410:	00001015 	andeq	r1, r0, r5, lsl r0
    4414:	5f103d02 	svcpl	0x00103d02
    4418:	30000000 	andcc	r0, r0, r0
    441c:	00110f06 	andseq	r0, r1, r6, lsl #30
    4420:	103e0200 	eorsne	r0, lr, r0, lsl #4
    4424:	0000005f 	andeq	r0, r0, pc, asr r0
    4428:	11b40634 			; <UNDEFINED> instruction: 0x11b40634
    442c:	3f020000 	svccc	0x00020000
    4430:	00005f10 	andeq	r5, r0, r0, lsl pc
    4434:	ca063800 	bgt	19243c <__ccfg+0x172494>
    4438:	02000010 	andeq	r0, r0, #16
    443c:	005f1040 	subseq	r1, pc, r0, asr #32
    4440:	063c0000 	ldrteq	r0, [ip], -r0
    4444:	000010de 	ldrdeq	r1, [r0], -lr
    4448:	5f104102 	svcpl	0x00104102
    444c:	40000000 	andmi	r0, r0, r0
    4450:	00113306 	andseq	r3, r1, r6, lsl #6
    4454:	10420200 	subne	r0, r2, r0, lsl #4
    4458:	0000005f 	andeq	r0, r0, pc, asr r0
    445c:	111f0644 	tstne	pc, r4, asr #12
    4460:	43020000 	movwmi	r0, #8192	; 0x2000
    4464:	00005f10 	andeq	r5, r0, r0, lsl pc
    4468:	5a064800 	bpl	196470 <__ccfg+0x1764c8>
    446c:	02000011 	andeq	r0, r0, #17
    4470:	005f1044 	subseq	r1, pc, r4, asr #32
    4474:	064c0000 	strbeq	r0, [ip], -r0
    4478:	0000118f 	andeq	r1, r0, pc, lsl #3
    447c:	5f104502 	svcpl	0x00104502
    4480:	50000000 	andpl	r0, r0, r0
    4484:	0010f906 	andseq	pc, r0, r6, lsl #18
    4488:	10460200 	subne	r0, r6, r0, lsl #4
    448c:	0000005f 	andeq	r0, r0, pc, asr r0
    4490:	f2030054 	vqadd.s8	q0, <illegal reg q1.5>, q2
    4494:	02000010 	andeq	r0, r0, #16
    4498:	00870347 	addeq	r0, r7, r7, asr #6
    449c:	af070000 	svcge	0x00070000
    44a0:	08000001 	stmdaeq	r0, {r0}
    44a4:	00001043 	andeq	r1, r0, r3, asr #32
    44a8:	bb154e02 	bllt	557cb8 <__ccfg+0x537d10>
    44ac:	01000001 	tsteq	r0, r1
    44b0:	15c00301 	strbne	r0, [r0, #769]	; 0x301
    44b4:	27030000 	strcs	r0, [r3, -r0]
    44b8:	00004c12 	andeq	r4, r0, r2, lsl ip
    44bc:	01ce0700 	biceq	r0, lr, r0, lsl #14
    44c0:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    44c4:	03000001 	movweq	r0, #1
    44c8:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    44cc:	39122b03 	ldmdbcc	r2, {r0, r1, r8, r9, fp, sp}
    44d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    44d4:	000001e4 	andeq	r0, r0, r4, ror #3
    44d8:	00161103 	andseq	r1, r6, r3, lsl #2
    44dc:	122c0300 	eorne	r0, ip, #0, 6
    44e0:	0000005f 	andeq	r0, r0, pc, asr r0
    44e4:	0001f507 	andeq	pc, r1, r7, lsl #10
    44e8:	02a70300 	adceq	r0, r7, #0, 6
    44ec:	2d030000 	stccs	0, cr0, [r3, #-0]
    44f0:	00005f12 	andeq	r5, r0, r2, lsl pc
    44f4:	03080500 	movweq	r0, #34048	; 0x8500
    44f8:	02a00932 	adceq	r0, r0, #819200	; 0xc8000
    44fc:	c20a0000 	andgt	r0, sl, #0
    4500:	03000002 	movweq	r0, #2
    4504:	01e40734 	mvneq	r0, r4, lsr r7
    4508:	01010000 	mrseq	r0, (UNDEF: 1)
    450c:	910a0007 	tstls	sl, r7
    4510:	03000000 	movweq	r0, #0
    4514:	01e40335 	mvneq	r0, r5, lsr r3
    4518:	01010000 	mrseq	r0, (UNDEF: 1)
    451c:	990a0006 	stmdbls	sl, {r1, r2}
    4520:	03000002 	movweq	r0, #2
    4524:	01e40336 	mvneq	r0, r6, lsr r3
    4528:	01010000 	mrseq	r0, (UNDEF: 1)
    452c:	0c0a0005 	stceq	0, cr0, [sl], {5}
    4530:	03000004 	movweq	r0, #4
    4534:	01e40337 	mvneq	r0, r7, lsr r3
    4538:	01010000 	mrseq	r0, (UNDEF: 1)
    453c:	050a0004 	streq	r0, [sl, #-4]
    4540:	03000004 	movweq	r0, #4
    4544:	01e40338 	mvneq	r0, r8, lsr r3
    4548:	04010000 	streq	r0, [r1], #-0
    454c:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    4550:	03000003 	movweq	r0, #3
    4554:	01e4073a 	mvneq	r0, sl, lsr r7
    4558:	06010000 	streq	r0, [r1], -r0
    455c:	00000040 	andeq	r0, r0, r0, asr #32
    4560:	e4033c03 	str	r3, [r3], #-3075	; 0xfffff3fd
    4564:	02000001 	andeq	r0, r0, #1
    4568:	00006606 	andeq	r6, r0, r6, lsl #12
    456c:	033d0300 	teqeq	sp, #0, 6
    4570:	000001e4 	andeq	r0, r0, r4, ror #3
    4574:	01540603 	cmpeq	r4, r3, lsl #12
    4578:	3f030000 	svccc	0x00030000
    457c:	0001f508 	andeq	pc, r1, r8, lsl #10
    4580:	03000400 	movweq	r0, #1024	; 0x400
    4584:	00000434 	andeq	r0, r0, r4, lsr r4
    4588:	12034103 	andne	r4, r3, #-1073741824	; 0xc0000000
    458c:	09000002 	stmdbeq	r0, {r1}
    4590:	000002a0 	andeq	r0, r0, r0, lsr #5
    4594:	0002b608 	andeq	fp, r2, r8, lsl #12
    4598:	1a430300 	bne	10c51a0 <__ccfg+0x10a51f8>
    459c:	000002ac 	andeq	r0, r0, ip, lsr #5
    45a0:	0d080101 	stfeqs	f0, [r8, #-4]
    45a4:	03000003 	movweq	r0, #3
    45a8:	02cd0e45 	sbceq	r0, sp, #1104	; 0x450
    45ac:	01010000 	mrseq	r0, (UNDEF: 1)
    45b0:	02d3040b 	sbcseq	r0, r3, #184549376	; 0xb000000
    45b4:	01020000 	mrseq	r0, (UNDEF: 2)
    45b8:	0003aa08 	andeq	sl, r3, r8, lsl #20
    45bc:	02d30700 	sbcseq	r0, r3, #0, 14
    45c0:	1b080000 	blne	2045c8 <__ccfg+0x1e4620>
    45c4:	03000003 	movweq	r0, #3
    45c8:	02cd1e45 	sbceq	r1, sp, #1104	; 0x450
    45cc:	01010000 	mrseq	r0, (UNDEF: 1)
    45d0:	8f040805 	svchi	0x00040805
    45d4:	00031e09 	andeq	r1, r3, r9, lsl #28
    45d8:	02d20600 	sbcseq	r0, r2, #0, 12
    45dc:	90040000 	andls	r0, r4, r0
    45e0:	00005f0b 	andeq	r5, r0, fp, lsl #30
    45e4:	ed060000 	stc	0, cr0, [r6, #-0]
    45e8:	04000005 	streq	r0, [r0], #-5
    45ec:	01ce0891 			; <UNDEFINED> instruction: 0x01ce0891
    45f0:	06040000 	streq	r0, [r4], -r0
    45f4:	00000471 	andeq	r0, r0, r1, ror r4
    45f8:	f0109204 			; <UNDEFINED> instruction: 0xf0109204
    45fc:	06000001 	streq	r0, [r0], -r1
    4600:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    4604:	93040000 	movwls	r0, #16384	; 0x4000
    4608:	0002ed03 	andeq	lr, r2, r3, lsl #26
    460c:	031e0c00 	tsteq	lr, #0, 24
    4610:	03350000 	teqeq	r5, #0
    4614:	000d0000 	andeq	r0, sp, r0
    4618:	00003608 	andeq	r3, r0, r8, lsl #12
    461c:	0f990400 	svceq	0x00990400
    4620:	0000032a 	andeq	r0, r0, sl, lsr #6
    4624:	01050101 	tsteq	r5, r1, lsl #2
    4628:	6d099105 	stfvsd	f1, [r9, #-20]	; 0xffffffec
    462c:	0a000003 	beq	4640 <__exidx_end+0x19cc>
    4630:	00000464 	andeq	r0, r0, r4, ror #8
    4634:	e4079305 	str	r9, [r7], #-773	; 0xfffffcfb
    4638:	01000001 	tsteq	r0, r1
    463c:	0a000107 	beq	4a60 <__exidx_end+0x1dec>
    4640:	00000031 	andeq	r0, r0, r1, lsr r0
    4644:	e4039405 	str	r9, [r3], #-1029	; 0xfffffbfb
    4648:	01000001 	tsteq	r0, r1
    464c:	00000001 	andeq	r0, r0, r1
    4650:	00028403 	andeq	r8, r2, r3, lsl #8
    4654:	03960500 	orrseq	r0, r6, #0, 10
    4658:	00000343 	andeq	r0, r0, r3, asr #6
    465c:	00036d07 	andeq	r6, r3, r7, lsl #26
    4660:	03790c00 	cmneq	r9, #0, 24
    4664:	03890000 	orreq	r0, r9, #0
    4668:	000d0000 	andeq	r0, sp, r0
    466c:	00037e07 	andeq	r7, r3, r7, lsl #28
    4670:	02ed0800 	rsceq	r0, sp, #0, 16
    4674:	9c050000 	stcls	0, cr0, [r5], {-0}
    4678:	00038917 	andeq	r8, r3, r7, lsl r9
    467c:	0c010100 	stfeqs	f0, [r1], {-0}
    4680:	000001da 	ldrdeq	r0, [r0], -sl
    4684:	000003a7 	andeq	r0, r0, r7, lsr #7
    4688:	9c07000d 	stcls	0, cr0, [r7], {13}
    468c:	08000003 	stmdaeq	r0, {r0, r1}
    4690:	00000393 	muleq	r0, r3, r3
    4694:	a7130606 	ldrge	r0, [r3, -r6, lsl #12]
    4698:	01000003 	tsteq	r0, r3
    469c:	01340801 	teqeq	r4, r1, lsl #16
    46a0:	c3040000 	movwgt	r0, #16384	; 0x4000
    46a4:	0001f50e 	andeq	pc, r1, lr, lsl #10
    46a8:	0e010100 	adfeqs	f0, f1, f0
    46ac:	0000047e 	andeq	r0, r0, lr, ror r4
    46b0:	10016e07 	andne	r6, r1, r7, lsl #28
    46b4:	000003d5 	ldrdeq	r0, [r0], -r5
    46b8:	03db040b 	bicseq	r0, fp, #184549376	; 0xb000000
    46bc:	010f0000 	mrseq	r0, CPSR
    46c0:	000003e7 	andeq	r0, r0, r7, ror #7
    46c4:	0001ce10 	andeq	ip, r1, r0, lsl lr
    46c8:	da0c0000 	ble	3046d0 <__ccfg+0x2e4728>
    46cc:	f2000002 	vhadd.s8	d0, d0, d2
    46d0:	0d000003 	stceq	0, cr0, [r0, #-12]
    46d4:	03e70700 	mvneq	r0, #0, 14
    46d8:	44110000 	ldrmi	r0, [r1], #-0
    46dc:	07000004 	streq	r0, [r0, -r4]
    46e0:	f216017f 	vbic	q0, q3, <illegal reg q15.5>
    46e4:	01000003 	tsteq	r0, r3
    46e8:	038b1101 	orreq	r1, fp, #1073741824	; 0x40000000
    46ec:	82070000 	andhi	r0, r7, #0
    46f0:	02011401 	andeq	r1, r1, #16777216	; 0x1000000
    46f4:	01010000 	mrseq	r0, (UNDEF: 1)
    46f8:	00046911 	andeq	r6, r4, r1, lsl r9
    46fc:	02d80700 	sbcseq	r0, r8, #0, 14
    4700:	0001f50e 	andeq	pc, r1, lr, lsl #10
    4704:	12010100 	andne	r0, r1, #0, 2
    4708:	03030708 	movweq	r0, #14088	; 0x3708
    470c:	00044b09 	andeq	r4, r4, r9, lsl #22
    4710:	21f41300 	mvnscs	r1, r0, lsl #6
    4714:	07070000 	streq	r0, [r7, -r0]
    4718:	01ce0703 	biceq	r0, lr, r3, lsl #14
    471c:	13000000 	movwne	r0, #0
    4720:	0000053f 	andeq	r0, r0, pc, lsr r5
    4724:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    4728:	00000206 	andeq	r0, r0, r6, lsl #4
    472c:	640e0004 	strvs	r0, [lr], #-4
    4730:	07000002 	streq	r0, [r0, -r2]
    4734:	24030309 	strcs	r0, [r3], #-777	; 0xfffffcf7
    4738:	14000004 	strne	r0, [r0], #-4
    473c:	0000048d 	andeq	r0, r0, sp, lsl #9
    4740:	030b0730 	movweq	r0, #46896	; 0xb730
    4744:	0004bb08 	andeq	fp, r4, r8, lsl #22
    4748:	04861300 	streq	r1, [r6], #768	; 0x300
    474c:	14070000 	strne	r0, [r7], #-0
    4750:	01ce0803 	biceq	r0, lr, r3, lsl #16
    4754:	13000000 	movwne	r0, #0
    4758:	000002dc 	ldrdeq	r0, [r0], -ip
    475c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    4760:	000001ce 	andeq	r0, r0, lr, asr #3
    4764:	04811302 	streq	r1, [r1], #770	; 0x302
    4768:	16070000 	strne	r0, [r7], -r0
    476c:	03c80b03 	biceq	r0, r8, #3072	; 0xc00
    4770:	13040000 	movwne	r0, #16384	; 0x4000
    4774:	00000f3f 	andeq	r0, r0, pc, lsr pc
    4778:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    477c:	00000206 	andeq	r0, r0, r6, lsl #4
    4780:	043d1308 	ldrteq	r1, [sp], #-776	; 0xfffffcf8
    4784:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    4788:	04bb0f03 	ldrteq	r0, [fp], #3843	; 0xf03
    478c:	130c0000 	movwne	r0, #49152	; 0xc000
    4790:	000002d7 	ldrdeq	r0, [r0], -r7
    4794:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    4798:	000004cb 	andeq	r0, r0, fp, asr #9
    479c:	4b0c002c 	blmi	304854 <__ccfg+0x2e48ac>
    47a0:	cb000004 	blgt	47b8 <__exidx_end+0x1b44>
    47a4:	15000004 	strne	r0, [r0, #-4]
    47a8:	00000080 	andeq	r0, r0, r0, lsl #1
    47ac:	040b0003 	streq	r0, [fp], #-3
    47b0:	00000458 	andeq	r0, r0, r8, asr r4
    47b4:	0004980e 	andeq	r9, r4, lr, lsl #16
    47b8:	031c0700 	tsteq	ip, #0, 14
    47bc:	0004581b 	andeq	r5, r4, fp, lsl r8
    47c0:	03811100 	orreq	r1, r1, #0, 2
    47c4:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    47c8:	04ed1403 	strbteq	r1, [sp], #1027	; 0x403
    47cc:	01010000 	mrseq	r0, (UNDEF: 1)
    47d0:	04d1040b 	ldrbeq	r0, [r1], #1035	; 0x40b
    47d4:	b1080000 	mrslt	r0, (UNDEF: 8)
    47d8:	08000004 	stmdaeq	r0, {r2}
    47dc:	01ce131d 	biceq	r1, lr, sp, lsl r3
    47e0:	01010000 	mrseq	r0, (UNDEF: 1)
    47e4:	00071b08 	andeq	r1, r7, r8, lsl #22
    47e8:	1a1e0800 	bne	7867f0 <__ccfg+0x766848>
    47ec:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    47f0:	ab080101 	blge	204bfc <__ccfg+0x1e4c54>
    47f4:	08000008 	stmdaeq	r0, {r3}
    47f8:	01df241e 	bicseq	r2, pc, lr, lsl r4	; <UNPREDICTABLE>
    47fc:	01010000 	mrseq	r0, (UNDEF: 1)
    4800:	0005da08 	andeq	sp, r5, r8, lsl #20
    4804:	14220800 	strtne	r0, [r2], #-2048	; 0xfffff800
    4808:	000004ed 	andeq	r0, r0, sp, ror #9
    480c:	c0160101 	andsgt	r0, r6, r1, lsl #2
    4810:	09000001 	stmdbeq	r0, {r0}
    4814:	050e0217 	streq	r0, [lr, #-535]	; 0xfffffde9
    4818:	01ffa803 	mvnseq	sl, r3, lsl #16
    481c:	05000000 	streq	r0, [r0, #-0]
    4820:	00030000 	andeq	r0, r3, r0
    4824:	0000124e 	andeq	r1, r0, lr, asr #4
    4828:	01700104 	cmneq	r0, r4, lsl #2
    482c:	fb0c0000 	blx	304836 <__ccfg+0x2e488e>
    4830:	c0000011 	andgt	r0, r0, r1, lsl r0
    4834:	60000000 	andvs	r0, r0, r0
    4838:	00000009 	andeq	r0, r0, r9
    483c:	ca000000 	bgt	4844 <__exidx_end+0x1bd0>
    4840:	02000038 	andeq	r0, r0, #56	; 0x38
    4844:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    4848:	02020000 	andeq	r0, r2, #0
    484c:	0003dd05 	andeq	sp, r3, r5, lsl #26
    4850:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4854:	0000009d 	muleq	r0, sp, r0
    4858:	98050802 	stmdals	r5, {r1, fp}
    485c:	03000000 	movweq	r0, #0
    4860:	000021fc 	strdeq	r2, [r0], -ip
    4864:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    4868:	02000000 	andeq	r0, r0, #0
    486c:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    4870:	ea030000 	b	c4878 <__ccfg+0xa48d0>
    4874:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    4878:	00601931 	rsbeq	r1, r0, r1, lsr r9
    487c:	02020000 	andeq	r0, r2, #0
    4880:	00027107 	andeq	r7, r2, r7, lsl #2
    4884:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    4888:	34040000 	strcc	r0, [r4], #-0
    488c:	00007319 	andeq	r7, r0, r9, lsl r3
    4890:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4894:	00000072 	andeq	r0, r0, r2, ror r0
    4898:	6d070802 	stcvs	8, cr0, [r7, #-8]
    489c:	04000000 	streq	r0, [r0], #-0
    48a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    48a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    48a8:	00007707 	andeq	r7, r0, r7, lsl #14
    48ac:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    48b0:	27050000 	strcs	r0, [r5, -r0]
    48b4:	00005412 	andeq	r5, r0, r2, lsl r4
    48b8:	008f0500 	addeq	r0, pc, r0, lsl #10
    48bc:	8f060000 	svchi	0x00060000
    48c0:	03000000 	movweq	r0, #0
    48c4:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    48c8:	41122b05 	tstmi	r2, r5, lsl #22
    48cc:	06000000 	streq	r0, [r0], -r0
    48d0:	000000a5 	andeq	r0, r0, r5, lsr #1
    48d4:	0000a505 	andeq	sl, r0, r5, lsl #10
    48d8:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    48dc:	2c050000 	stccs	0, cr0, [r5], {-0}
    48e0:	00006712 	andeq	r6, r0, r2, lsl r7
    48e4:	00bb0500 	adcseq	r0, fp, r0, lsl #10
    48e8:	a7030000 	strge	r0, [r3, -r0]
    48ec:	05000002 	streq	r0, [r0, #-2]
    48f0:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    48f4:	62030000 	andvs	r0, r3, #0
    48f8:	05000007 	streq	r0, [r0, #-7]
    48fc:	00e4102e 	rsceq	r1, r4, lr, lsr #32
    4900:	04070000 	streq	r0, [r7], #-0
    4904:	0000008f 	andeq	r0, r0, pc, lsl #1
    4908:	32050808 	andcc	r0, r5, #8, 16	; 0x80000
    490c:	00017809 	andeq	r7, r1, r9, lsl #16
    4910:	02c20900 	sbceq	r0, r2, #0, 18
    4914:	34050000 	strcc	r0, [r5], #-0
    4918:	0000a507 	andeq	sl, r0, r7, lsl #10
    491c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4920:	00910900 	addseq	r0, r1, r0, lsl #18
    4924:	35050000 	strcc	r0, [r5, #-0]
    4928:	0000a503 	andeq	sl, r0, r3, lsl #10
    492c:	06010100 	streq	r0, [r1], -r0, lsl #2
    4930:	02990900 	addseq	r0, r9, #0, 18
    4934:	36050000 	strcc	r0, [r5], -r0
    4938:	0000a503 	andeq	sl, r0, r3, lsl #10
    493c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4940:	040c0900 	streq	r0, [ip], #-2304	; 0xfffff700
    4944:	37050000 	strcc	r0, [r5, -r0]
    4948:	0000a503 	andeq	sl, r0, r3, lsl #10
    494c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4950:	04050900 	streq	r0, [r5], #-2304	; 0xfffff700
    4954:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    4958:	0000a503 	andeq	sl, r0, r3, lsl #10
    495c:	00040100 	andeq	r0, r4, r0, lsl #2
    4960:	03f60a00 	mvnseq	r0, #0, 20
    4964:	3a050000 	bcc	14496c <__ccfg+0x1249c4>
    4968:	0000a507 	andeq	sl, r0, r7, lsl #10
    496c:	400a0100 	andmi	r0, sl, r0, lsl #2
    4970:	05000000 	streq	r0, [r0, #-0]
    4974:	00a5033c 	adceq	r0, r5, ip, lsr r3
    4978:	0a020000 	beq	84980 <__ccfg+0x649d8>
    497c:	00000066 	andeq	r0, r0, r6, rrx
    4980:	a5033d05 	strge	r3, [r3, #-3333]	; 0xfffff2fb
    4984:	03000000 	movweq	r0, #0
    4988:	0001540a 	andeq	r5, r1, sl, lsl #8
    498c:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    4990:	000000bb 	strheq	r0, [r0], -fp
    4994:	34030004 	strcc	r0, [r3], #-4
    4998:	05000004 	streq	r0, [r0, #-4]
    499c:	00ea0341 	rsceq	r0, sl, r1, asr #6
    49a0:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    49a4:	0b000001 	bleq	49b0 <__exidx_end+0x1d3c>
    49a8:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    49ac:	841a4305 	ldrhi	r4, [sl], #-773	; 0xfffffcfb
    49b0:	01000001 	tsteq	r0, r1
    49b4:	030d0b01 	movweq	r0, #56065	; 0xdb01
    49b8:	45050000 	strmi	r0, [r5, #-0]
    49bc:	0001a50e 	andeq	sl, r1, lr, lsl #10
    49c0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    49c4:	0001ab04 	andeq	sl, r1, r4, lsl #22
    49c8:	08010200 	stmdaeq	r1, {r9}
    49cc:	000003aa 	andeq	r0, r0, sl, lsr #7
    49d0:	0001ab05 	andeq	sl, r1, r5, lsl #22
    49d4:	031b0b00 	tsteq	fp, #0, 22
    49d8:	45050000 	strmi	r0, [r5, #-0]
    49dc:	0001a51e 	andeq	sl, r1, lr, lsl r5
    49e0:	08010100 	stmdaeq	r1, {r8}
    49e4:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    49e8:	000001f6 	strdeq	r0, [r0], -r6
    49ec:	0002d20a 	andeq	sp, r2, sl, lsl #4
    49f0:	0b900600 	bleq	fe4061f8 <_estack+0xde4011f8>
    49f4:	00000067 	andeq	r0, r0, r7, rrx
    49f8:	05ed0a00 	strbeq	r0, [sp, #2560]!	; 0xa00
    49fc:	91060000 	mrsls	r0, (UNDEF: 6)
    4a00:	00008f08 	andeq	r8, r0, r8, lsl #30
    4a04:	710a0400 	tstvc	sl, r0, lsl #8
    4a08:	06000004 	streq	r0, [r0], -r4
    4a0c:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    4a10:	00060000 	andeq	r0, r6, r0
    4a14:	00041303 	andeq	r1, r4, r3, lsl #6
    4a18:	03930600 	orrseq	r0, r3, #0, 12
    4a1c:	000001c5 	andeq	r0, r0, r5, asr #3
    4a20:	0001f60c 	andeq	pc, r1, ip, lsl #12
    4a24:	00020d00 	andeq	r0, r2, r0, lsl #26
    4a28:	0b000d00 	bleq	7e30 <__exidx_end+0x51bc>
    4a2c:	00000036 	andeq	r0, r0, r6, lsr r0
    4a30:	020f9906 	andeq	r9, pc, #98304	; 0x18000
    4a34:	01000002 	tsteq	r0, r2
    4a38:	b6040701 	strlt	r0, [r4], -r1, lsl #14
    4a3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4a40:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    4a44:	0000024b 	andeq	r0, r0, fp, asr #4
    4a48:	00046409 	andeq	r6, r4, r9, lsl #8
    4a4c:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    4a50:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a54:	00010701 	andeq	r0, r1, r1, lsl #14
    4a58:	00003109 	andeq	r3, r0, r9, lsl #2
    4a5c:	03940700 	orrseq	r0, r4, #0, 14
    4a60:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a64:	00000101 	andeq	r0, r0, r1, lsl #2
    4a68:	02840300 	addeq	r0, r4, #0, 6
    4a6c:	96070000 	strls	r0, [r7], -r0
    4a70:	00022103 	andeq	r2, r2, r3, lsl #2
    4a74:	024b0500 	subeq	r0, fp, #0, 10
    4a78:	570c0000 	strpl	r0, [ip, -r0]
    4a7c:	67000002 	strvs	r0, [r0, -r2]
    4a80:	0d000002 	stceq	0, cr0, [r0, #-8]
    4a84:	025c0500 	subseq	r0, ip, #0, 10
    4a88:	ed0b0000 	stc	0, cr0, [fp, #-0]
    4a8c:	07000002 	streq	r0, [r0, -r2]
    4a90:	0267179c 	rsbeq	r1, r7, #156, 14	; 0x2700000
    4a94:	01010000 	mrseq	r0, (UNDEF: 1)
    4a98:	00009b0c 	andeq	r9, r0, ip, lsl #22
    4a9c:	00028500 	andeq	r8, r2, r0, lsl #10
    4aa0:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4aa4:	0000027a 	andeq	r0, r0, sl, ror r2
    4aa8:	0003930b 	andeq	r9, r3, fp, lsl #6
    4aac:	13060800 	movwne	r0, #26624	; 0x6800
    4ab0:	00000285 	andeq	r0, r0, r5, lsl #5
    4ab4:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
    4ab8:	06000001 	streq	r0, [r0], -r1
    4abc:	00bb0ec3 	adcseq	r0, fp, r3, asr #29
    4ac0:	01010000 	mrseq	r0, (UNDEF: 1)
    4ac4:	00047e0e 	andeq	r7, r4, lr, lsl #28
    4ac8:	016e0900 	cmneq	lr, r0, lsl #18
    4acc:	0002b310 	andeq	fp, r2, r0, lsl r3
    4ad0:	b9040700 	stmdblt	r4, {r8, r9, sl}
    4ad4:	0f000002 	svceq	0x00000002
    4ad8:	0002c501 	andeq	ip, r2, r1, lsl #10
    4adc:	008f1000 	addeq	r1, pc, r0
    4ae0:	0c000000 	stceq	0, cr0, [r0], {-0}
    4ae4:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    4ae8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4aec:	c505000d 	strgt	r0, [r5, #-13]
    4af0:	11000002 	tstne	r0, r2
    4af4:	00000444 	andeq	r0, r0, r4, asr #8
    4af8:	16017f09 	strne	r7, [r1], -r9, lsl #30
    4afc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4b00:	8b110101 	blhi	444f0c <__ccfg+0x424f64>
    4b04:	09000003 	stmdbeq	r0, {r0, r1}
    4b08:	c7140182 	ldrgt	r0, [r4, -r2, lsl #3]
    4b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b10:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
    4b14:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    4b18:	00bb0e02 	adcseq	r0, fp, r2, lsl #28
    4b1c:	01010000 	mrseq	r0, (UNDEF: 1)
    4b20:	03090812 	movweq	r0, #38930	; 0x9812
    4b24:	03290903 			; <UNDEFINED> instruction: 0x03290903
    4b28:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    4b2c:	09000021 	stmdbeq	r0, {r0, r5}
    4b30:	8f070307 	svchi	0x00070307
    4b34:	00000000 	andeq	r0, r0, r0
    4b38:	00053f13 	andeq	r3, r5, r3, lsl pc
    4b3c:	03080900 	movweq	r0, #35072	; 0x8900
    4b40:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4b44:	0e000400 	cfcpyseq	mvf0, mvf0
    4b48:	00000264 	andeq	r0, r0, r4, ror #4
    4b4c:	03030909 	movweq	r0, #14601	; 0x3909
    4b50:	00000302 	andeq	r0, r0, r2, lsl #6
    4b54:	00048d14 	andeq	r8, r4, r4, lsl sp
    4b58:	0b093000 	bleq	250b60 <__ccfg+0x230bb8>
    4b5c:	03990803 	orrseq	r0, r9, #196608	; 0x30000
    4b60:	86130000 	ldrhi	r0, [r3], -r0
    4b64:	09000004 	stmdbeq	r0, {r2}
    4b68:	8f080314 	svchi	0x00080314
    4b6c:	00000000 	andeq	r0, r0, r0
    4b70:	0002dc13 	andeq	sp, r2, r3, lsl ip
    4b74:	03150900 	tsteq	r5, #0, 18
    4b78:	00008f08 	andeq	r8, r0, r8, lsl #30
    4b7c:	81130200 	tsthi	r3, r0, lsl #4
    4b80:	09000004 	stmdbeq	r0, {r2}
    4b84:	a60b0316 			; <UNDEFINED> instruction: 0xa60b0316
    4b88:	04000002 	streq	r0, [r0], #-2
    4b8c:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
    4b90:	03170900 	tsteq	r7, #0, 18
    4b94:	0000cc09 	andeq	ip, r0, r9, lsl #24
    4b98:	3d130800 	ldccc	8, cr0, [r3, #-0]
    4b9c:	09000004 	stmdbeq	r0, {r2}
    4ba0:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    4ba4:	0c000003 	stceq	0, cr0, [r0], {3}
    4ba8:	0002d713 	andeq	sp, r2, r3, lsl r7
    4bac:	03190900 	tsteq	r9, #0, 18
    4bb0:	0003a915 	andeq	sl, r3, r5, lsl r9
    4bb4:	0c002c00 	stceq	12, cr2, [r0], {-0}
    4bb8:	00000329 	andeq	r0, r0, r9, lsr #6
    4bbc:	000003a9 	andeq	r0, r0, r9, lsr #7
    4bc0:	00008815 	andeq	r8, r0, r5, lsl r8
    4bc4:	07000300 	streq	r0, [r0, -r0, lsl #6]
    4bc8:	00033604 	andeq	r3, r3, r4, lsl #12
    4bcc:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
    4bd0:	1c090000 	stcne	0, cr0, [r9], {-0}
    4bd4:	03361b03 	teqeq	r6, #3072	; 0xc00
    4bd8:	81110000 	tsthi	r1, r0
    4bdc:	09000003 	stmdbeq	r0, {r0, r1}
    4be0:	cb14031e 	blgt	505860 <__ccfg+0x4e58b8>
    4be4:	01000003 	tsteq	r0, r3
    4be8:	af040701 	svcge	0x00040701
    4bec:	0b000003 	bleq	4c00 <__exidx_end+0x1f8c>
    4bf0:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    4bf4:	8f131d0a 	svchi	0x00131d0a
    4bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    4bfc:	071b0b01 	ldreq	r0, [fp, -r1, lsl #22]
    4c00:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    4c04:	0000a01a 	andeq	sl, r0, sl, lsl r0
    4c08:	0b010100 	bleq	45010 <__ccfg+0x25068>
    4c0c:	000008ab 	andeq	r0, r0, fp, lsr #17
    4c10:	a0241e0a 	eorge	r1, r4, sl, lsl #28
    4c14:	01000000 	mrseq	r0, (UNDEF: 0)
    4c18:	05da0b01 	ldrbeq	r0, [sl, #2817]	; 0xb01
    4c1c:	220a0000 	andcs	r0, sl, #0
    4c20:	0003cb14 	andeq	ip, r3, r4, lsl fp
    4c24:	16010100 	strne	r0, [r1], -r0, lsl #2
    4c28:	0000026c 	andeq	r0, r0, ip, ror #4
    4c2c:	05100d01 	ldreq	r0, [r0, #-3329]	; 0xfffff2ff
    4c30:	002c6c03 	eoreq	r6, ip, r3, lsl #24
    4c34:	db011700 	blle	4a83c <__ccfg+0x2a894>
    4c38:	01000011 	tsteq	r0, r1, lsl r0
    4c3c:	00010611 	andeq	r0, r1, r1, lsl r6
    4c40:	00000000 	andeq	r0, r0, r0
    4c44:	01000000 	mrseq	r0, (UNDEF: 0)
    4c48:	0004bb9c 	muleq	r4, ip, fp
    4c4c:	74731800 	ldrbtvc	r1, [r3], #-2048	; 0xfffff800
    4c50:	1c110100 	ldfnes	f0, [r1], {-0}
    4c54:	0000008f 	andeq	r0, r0, pc, lsl #1
    4c58:	00001f72 	andeq	r1, r0, r2, ror pc
    4c5c:	0011d619 	andseq	sp, r1, r9, lsl r6
    4c60:	2c110100 	ldfcss	f0, [r1], {-0}
    4c64:	0000021b 	andeq	r0, r0, fp, lsl r2
    4c68:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    4c6c:	6c617618 	stclvs	6, cr7, [r1], #-96	; 0xffffffa0
    4c70:	3a110100 	bcc	445078 <__ccfg+0x4250d0>
    4c74:	000000d8 	ldrdeq	r0, [r0], -r8
    4c78:	00001fae 	andeq	r1, r0, lr, lsr #31
    4c7c:	0100701a 	tsteq	r0, sl, lsl r0
    4c80:	04bb1213 	ldrteq	r1, [fp], #531	; 0x213
    4c84:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    4c88:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    4c8c:	0000008f 	andeq	r0, r0, pc, lsl #1
    4c90:	00001fcc 	andeq	r1, r0, ip, asr #31
    4c94:	0100761a 	tsteq	r0, sl, lsl r6
    4c98:	00a50715 	adceq	r0, r5, r5, lsl r7
    4c9c:	d41c0000 	ldrle	r0, [ip], #-0
    4ca0:	00000004 	andeq	r0, r0, r4
    4ca4:	00000000 	andeq	r0, r0, r0
    4ca8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cac:	de1c031c 	mrcle	3, 0, r0, cr12, cr12, {0}
    4cb0:	00000004 	andeq	r0, r0, r4
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cbc:	e81d031f 	ldmda	sp, {r0, r1, r2, r3, r4, r8, r9}
    4cc0:	00000004 	andeq	r0, r0, r4
    4cc4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4cc8:	01000009 	tsteq	r0, r9
    4ccc:	f61e0b26 			; <UNDEFINED> instruction: 0xf61e0b26
    4cd0:	df000004 	svcle	0x00000004
    4cd4:	0000001f 	andeq	r0, r0, pc, lsl r0
    4cd8:	57040700 	strpl	r0, [r4, -r0, lsl #14]
    4cdc:	1f000002 	svcne	0x00000002
    4ce0:	0011eb01 	andseq	lr, r1, r1, lsl #22
    4ce4:	060f0100 	streq	r0, [pc], -r0, lsl #2
	...
    4cf0:	fd209c01 	stc2	12, cr9, [r0, #-4]!
    4cf4:	02000007 	andeq	r0, r0, #7
    4cf8:	0301355b 	movweq	r3, #5467	; 0x155b
    4cfc:	00051020 	andeq	r1, r5, r0, lsr #32
    4d00:	35500200 	ldrbcc	r0, [r0, #-512]	; 0xfffffe00
    4d04:	c9210301 	stmdbgt	r1!, {r0, r8, r9}
    4d08:	03000011 	movweq	r0, #17
    4d0c:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    4d10:	03000000 	movweq	r0, #0
    4d14:	00016622 	andeq	r6, r1, r2, lsr #12
    4d18:	18a40300 	stmiane	r4!, {r8, r9}
    4d1c:	00000067 	andeq	r0, r0, r7, rrx
    4d20:	04f60000 	ldrbteq	r0, [r6], #0
    4d24:	00030000 	andeq	r0, r3, r0
    4d28:	0000143f 	andeq	r1, r0, pc, lsr r4
    4d2c:	01700104 	cmneq	r0, r4, lsl #2
    4d30:	550c0000 	strpl	r0, [ip, #-0]
    4d34:	c0000012 	andgt	r0, r0, r2, lsl r0
    4d38:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4d3c:	00000009 	andeq	r0, r0, r9
    4d40:	67000000 	strvs	r0, [r0, -r0]
    4d44:	0200003b 	andeq	r0, r0, #59	; 0x3b
    4d48:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    4d4c:	02020000 	andeq	r0, r2, #0
    4d50:	0003dd05 	andeq	sp, r3, r5, lsl #26
    4d54:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4d58:	0000009d 	muleq	r0, sp, r0
    4d5c:	98050802 	stmdals	r5, {r1, fp}
    4d60:	03000000 	movweq	r0, #0
    4d64:	000021fc 	strdeq	r2, [r0], -ip
    4d68:	4d182e03 	ldcmi	14, cr2, [r8, #-12]
    4d6c:	02000000 	andeq	r0, r0, #0
    4d70:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    4d74:	ea030000 	b	c4d7c <__ccfg+0xa4dd4>
    4d78:	03000020 	movweq	r0, #32
    4d7c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    4d80:	02020000 	andeq	r0, r2, #0
    4d84:	00027107 	andeq	r7, r2, r7, lsl #2
    4d88:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    4d8c:	34030000 	strcc	r0, [r3], #-0
    4d90:	00007319 	andeq	r7, r0, r9, lsl r3
    4d94:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4d98:	00000072 	andeq	r0, r0, r2, ror r0
    4d9c:	6d070802 	stcvs	8, cr0, [r7, #-8]
    4da0:	04000000 	streq	r0, [r0], #-0
    4da4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4da8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4dac:	00007707 	andeq	r7, r0, r7, lsl #14
    4db0:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    4db4:	27040000 	strcs	r0, [r4, -r0]
    4db8:	00005412 	andeq	r5, r0, r2, lsl r4
    4dbc:	008f0500 	addeq	r0, pc, r0, lsl #10
    4dc0:	8f060000 	svchi	0x00060000
    4dc4:	03000000 	movweq	r0, #0
    4dc8:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    4dcc:	41122b04 	tstmi	r2, r4, lsl #22
    4dd0:	06000000 	streq	r0, [r0], -r0
    4dd4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4dd8:	00161103 	andseq	r1, r6, r3, lsl #2
    4ddc:	122c0400 	eorne	r0, ip, #0, 8
    4de0:	00000067 	andeq	r0, r0, r7, rrx
    4de4:	0000b605 	andeq	fp, r0, r5, lsl #12
    4de8:	02a70300 	adceq	r0, r7, #0, 6
    4dec:	2d040000 	stccs	0, cr0, [r4, #-0]
    4df0:	00006712 	andeq	r6, r0, r2, lsl r7
    4df4:	04080700 	streq	r0, [r8], #-1792	; 0xfffff900
    4df8:	01610932 	cmneq	r1, r2, lsr r9
    4dfc:	c2080000 	andgt	r0, r8, #0
    4e00:	04000002 	streq	r0, [r0], #-2
    4e04:	00a50734 	adceq	r0, r5, r4, lsr r7
    4e08:	01010000 	mrseq	r0, (UNDEF: 1)
    4e0c:	91080007 	tstls	r8, r7
    4e10:	04000000 	streq	r0, [r0], #-0
    4e14:	00a50335 	adceq	r0, r5, r5, lsr r3
    4e18:	01010000 	mrseq	r0, (UNDEF: 1)
    4e1c:	99080006 	stmdbls	r8, {r1, r2}
    4e20:	04000002 	streq	r0, [r0], #-2
    4e24:	00a50336 	adceq	r0, r5, r6, lsr r3
    4e28:	01010000 	mrseq	r0, (UNDEF: 1)
    4e2c:	0c080005 	stceq	0, cr0, [r8], {5}
    4e30:	04000004 	streq	r0, [r0], #-4
    4e34:	00a50337 	adceq	r0, r5, r7, lsr r3
    4e38:	01010000 	mrseq	r0, (UNDEF: 1)
    4e3c:	05080004 	streq	r0, [r8, #-4]
    4e40:	04000004 	streq	r0, [r0], #-4
    4e44:	00a50338 	adceq	r0, r5, r8, lsr r3
    4e48:	04010000 	streq	r0, [r1], #-0
    4e4c:	f6090000 			; <UNDEFINED> instruction: 0xf6090000
    4e50:	04000003 	streq	r0, [r0], #-3
    4e54:	00a5073a 	adceq	r0, r5, sl, lsr r7
    4e58:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4e5c:	00000040 	andeq	r0, r0, r0, asr #32
    4e60:	a5033c04 	strge	r3, [r3, #-3076]	; 0xfffff3fc
    4e64:	02000000 	andeq	r0, r0, #0
    4e68:	00006609 	andeq	r6, r0, r9, lsl #12
    4e6c:	033d0400 	teqeq	sp, #0, 8
    4e70:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e74:	01540903 	cmpeq	r4, r3, lsl #18
    4e78:	3f040000 	svccc	0x00040000
    4e7c:	0000b608 	andeq	fp, r0, r8, lsl #12
    4e80:	03000400 	movweq	r0, #1024	; 0x400
    4e84:	00000434 	andeq	r0, r0, r4, lsr r4
    4e88:	d3034104 	movwle	r4, #12548	; 0x3104
    4e8c:	06000000 	streq	r0, [r0], -r0
    4e90:	00000161 	andeq	r0, r0, r1, ror #2
    4e94:	0002b60a 	andeq	fp, r2, sl, lsl #12
    4e98:	1a430400 	bne	10c5ea0 <__ccfg+0x10a5ef8>
    4e9c:	0000016d 	andeq	r0, r0, sp, ror #2
    4ea0:	0d0a0101 	stfeqs	f0, [sl, #-4]
    4ea4:	04000003 	streq	r0, [r0], #-3
    4ea8:	018e0e45 	orreq	r0, lr, r5, asr #28
    4eac:	01010000 	mrseq	r0, (UNDEF: 1)
    4eb0:	0194040b 	orrseq	r0, r4, fp, lsl #8
    4eb4:	01020000 	mrseq	r0, (UNDEF: 2)
    4eb8:	0003aa08 	andeq	sl, r3, r8, lsl #20
    4ebc:	01940500 	orrseq	r0, r4, r0, lsl #10
    4ec0:	1b0a0000 	blne	284ec8 <__ccfg+0x264f20>
    4ec4:	04000003 	streq	r0, [r0], #-3
    4ec8:	018e1e45 	orreq	r1, lr, r5, asr #28
    4ecc:	01010000 	mrseq	r0, (UNDEF: 1)
    4ed0:	8f050807 	svchi	0x00050807
    4ed4:	0001df09 	andeq	sp, r1, r9, lsl #30
    4ed8:	02d20900 	sbcseq	r0, r2, #0, 18
    4edc:	90050000 	andls	r0, r5, r0
    4ee0:	0000670b 	andeq	r6, r0, fp, lsl #14
    4ee4:	ed090000 	stc	0, cr0, [r9, #-0]
    4ee8:	05000005 	streq	r0, [r0, #-5]
    4eec:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    4ef0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4ef4:	00000471 	andeq	r0, r0, r1, ror r4
    4ef8:	b1109205 	tstlt	r0, r5, lsl #4
    4efc:	06000000 	streq	r0, [r0], -r0
    4f00:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    4f04:	93050000 	movwls	r0, #20480	; 0x5000
    4f08:	0001ae03 	andeq	sl, r1, r3, lsl #28
    4f0c:	01df0c00 	bicseq	r0, pc, r0, lsl #24
    4f10:	01f60000 	mvnseq	r0, r0
    4f14:	000d0000 	andeq	r0, sp, r0
    4f18:	0000360a 	andeq	r3, r0, sl, lsl #12
    4f1c:	0f990500 	svceq	0x00990500
    4f20:	000001eb 	andeq	r0, r0, fp, ror #3
    4f24:	01070101 	tsteq	r7, r1, lsl #2
    4f28:	2e099106 	mvfcse	f1, f6
    4f2c:	08000002 	stmdaeq	r0, {r1}
    4f30:	00000464 	andeq	r0, r0, r4, ror #8
    4f34:	a5079306 	strge	r9, [r7, #-774]	; 0xfffffcfa
    4f38:	01000000 	mrseq	r0, (UNDEF: 0)
    4f3c:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    4f40:	00000031 	andeq	r0, r0, r1, lsr r0
    4f44:	a5039406 	strge	r9, [r3, #-1030]	; 0xfffffbfa
    4f48:	01000000 	mrseq	r0, (UNDEF: 0)
    4f4c:	00000001 	andeq	r0, r0, r1
    4f50:	00028403 	andeq	r8, r2, r3, lsl #8
    4f54:	03960600 	orrseq	r0, r6, #0, 12
    4f58:	00000204 	andeq	r0, r0, r4, lsl #4
    4f5c:	00022e05 	andeq	r2, r2, r5, lsl #28
    4f60:	023a0c00 	eorseq	r0, sl, #0, 24
    4f64:	024a0000 	subeq	r0, sl, #0
    4f68:	000d0000 	andeq	r0, sp, r0
    4f6c:	00023f05 	andeq	r3, r2, r5, lsl #30
    4f70:	02ed0a00 	rsceq	r0, sp, #0, 20
    4f74:	9c060000 	stcls	0, cr0, [r6], {-0}
    4f78:	00024a17 	andeq	r4, r2, r7, lsl sl
    4f7c:	0c010100 	stfeqs	f0, [r1], {-0}
    4f80:	0000009b 	muleq	r0, fp, r0
    4f84:	00000268 	andeq	r0, r0, r8, ror #4
    4f88:	5d05000d 	stcpl	0, cr0, [r5, #-52]	; 0xffffffcc
    4f8c:	0a000002 	beq	4f9c <__exidx_end+0x2328>
    4f90:	00000393 	muleq	r0, r3, r3
    4f94:	68130607 	ldmdavs	r3, {r0, r1, r2, r9, sl}
    4f98:	01000002 	tsteq	r0, r2
    4f9c:	01340a01 	teqeq	r4, r1, lsl #20
    4fa0:	c3050000 	movwgt	r0, #20480	; 0x5000
    4fa4:	0000b60e 	andeq	fp, r0, lr, lsl #12
    4fa8:	0e010100 	adfeqs	f0, f1, f0
    4fac:	0000047e 	andeq	r0, r0, lr, ror r4
    4fb0:	10016e08 	andne	r6, r1, r8, lsl #28
    4fb4:	00000296 	muleq	r0, r6, r2
    4fb8:	029c040b 	addseq	r0, ip, #184549376	; 0xb000000
    4fbc:	010f0000 	mrseq	r0, CPSR
    4fc0:	000002a8 	andeq	r0, r0, r8, lsr #5
    4fc4:	00008f10 	andeq	r8, r0, r0, lsl pc
    4fc8:	9b0c0000 	blls	304fd0 <__ccfg+0x2e5028>
    4fcc:	b3000001 	movwlt	r0, #1
    4fd0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4fd4:	02a80500 	adceq	r0, r8, #0, 10
    4fd8:	44110000 	ldrmi	r0, [r1], #-0
    4fdc:	08000004 	stmdaeq	r0, {r2}
    4fe0:	b316017f 	tstlt	r6, #-1073741793	; 0xc000001f
    4fe4:	01000002 	tsteq	r0, r2
    4fe8:	038b1101 	orreq	r1, fp, #1073741824	; 0x40000000
    4fec:	82080000 	andhi	r0, r8, #0
    4ff0:	00c21401 	sbceq	r1, r2, r1, lsl #8
    4ff4:	01010000 	mrseq	r0, (UNDEF: 1)
    4ff8:	00046911 	andeq	r6, r4, r1, lsl r9
    4ffc:	02d80800 	sbcseq	r0, r8, #0, 16
    5000:	0000b60e 	andeq	fp, r0, lr, lsl #12
    5004:	12010100 	andne	r0, r1, #0, 2
    5008:	03030808 	movweq	r0, #14344	; 0x3808
    500c:	00030c09 	andeq	r0, r3, r9, lsl #24
    5010:	21f41300 	mvnscs	r1, r0, lsl #6
    5014:	07080000 	streq	r0, [r8, -r0]
    5018:	008f0703 	addeq	r0, pc, r3, lsl #14
    501c:	13000000 	movwne	r0, #0
    5020:	0000053f 	andeq	r0, r0, pc, lsr r5
    5024:	08030808 	stmdaeq	r3, {r3, fp}
    5028:	000000c7 	andeq	r0, r0, r7, asr #1
    502c:	640e0004 	strvs	r0, [lr], #-4
    5030:	08000002 	stmdaeq	r0, {r1}
    5034:	e5030309 	str	r0, [r3, #-777]	; 0xfffffcf7
    5038:	14000002 	strne	r0, [r0], #-2
    503c:	0000048d 	andeq	r0, r0, sp, lsl #9
    5040:	030b0830 	movweq	r0, #47152	; 0xb830
    5044:	00037c08 	andeq	r7, r3, r8, lsl #24
    5048:	04861300 	streq	r1, [r6], #768	; 0x300
    504c:	14080000 	strne	r0, [r8], #-0
    5050:	008f0803 	addeq	r0, pc, r3, lsl #16
    5054:	13000000 	movwne	r0, #0
    5058:	000002dc 	ldrdeq	r0, [r0], -ip
    505c:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    5060:	0000008f 	andeq	r0, r0, pc, lsl #1
    5064:	04811302 	streq	r1, [r1], #770	; 0x302
    5068:	16080000 	strne	r0, [r8], -r0
    506c:	02890b03 	addeq	r0, r9, #3072	; 0xc00
    5070:	13040000 	movwne	r0, #16384	; 0x4000
    5074:	00000f3f 	andeq	r0, r0, pc, lsr pc
    5078:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    507c:	000000c7 	andeq	r0, r0, r7, asr #1
    5080:	043d1308 	ldrteq	r1, [sp], #-776	; 0xfffffcf8
    5084:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    5088:	037c0f03 	cmneq	ip, #3, 30
    508c:	130c0000 	movwne	r0, #49152	; 0xc000
    5090:	000002d7 	ldrdeq	r0, [r0], -r7
    5094:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    5098:	0000038c 	andeq	r0, r0, ip, lsl #7
    509c:	0c0c002c 	stceq	0, cr0, [ip], {44}	; 0x2c
    50a0:	8c000003 	stchi	0, cr0, [r0], {3}
    50a4:	15000003 	strne	r0, [r0, #-3]
    50a8:	00000088 	andeq	r0, r0, r8, lsl #1
    50ac:	040b0003 	streq	r0, [fp], #-3
    50b0:	00000319 	andeq	r0, r0, r9, lsl r3
    50b4:	0004980e 	andeq	r9, r4, lr, lsl #16
    50b8:	031c0800 	tsteq	ip, #0, 16
    50bc:	0003191b 	andeq	r1, r3, fp, lsl r9
    50c0:	03811100 	orreq	r1, r1, #0, 2
    50c4:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    50c8:	03ae1403 			; <UNDEFINED> instruction: 0x03ae1403
    50cc:	01010000 	mrseq	r0, (UNDEF: 1)
    50d0:	0392040b 	orrseq	r0, r2, #184549376	; 0xb000000
    50d4:	b10a0000 	mrslt	r0, (UNDEF: 10)
    50d8:	09000004 	stmdbeq	r0, {r2}
    50dc:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    50e0:	01010000 	mrseq	r0, (UNDEF: 1)
    50e4:	00071b0a 	andeq	r1, r7, sl, lsl #22
    50e8:	1a1e0900 	bne	7874f0 <__ccfg+0x767548>
    50ec:	000000a0 	andeq	r0, r0, r0, lsr #1
    50f0:	ab0a0101 	blge	2854fc <__ccfg+0x265554>
    50f4:	09000008 	stmdbeq	r0, {r3}
    50f8:	00a0241e 	adceq	r2, r0, lr, lsl r4
    50fc:	01010000 	mrseq	r0, (UNDEF: 1)
    5100:	0005da0a 	andeq	sp, r5, sl, lsl #20
    5104:	14220900 	strtne	r0, [r2], #-2304	; 0xfffff700
    5108:	000003ae 	andeq	r0, r0, lr, lsr #7
    510c:	44160101 	ldrmi	r0, [r6], #-257	; 0xfffffeff
    5110:	01000012 	tsteq	r0, r2, lsl r0
    5114:	02960f08 	addseq	r0, r6, #8, 30
    5118:	03050000 	movweq	r0, #20480	; 0x5000
    511c:	00000000 	andeq	r0, r0, r0
    5120:	00129116 	andseq	r9, r2, r6, lsl r1
    5124:	0d090100 	stfeqs	f0, [r9, #-0]
    5128:	0000008f 	andeq	r0, r0, pc, lsl #1
    512c:	00000305 	andeq	r0, r0, r5, lsl #6
    5130:	6d170000 	ldcvs	0, cr0, [r7, #-0]
    5134:	01000002 	tsteq	r0, r2
    5138:	03050c0a 	movweq	r0, #23562	; 0x5c0a
    513c:	00002c70 	andeq	r2, r0, r0, ror ip
    5140:	12a60118 	adcne	r0, r6, #24, 2
    5144:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    5148:	00000106 	andeq	r0, r0, r6, lsl #2
    514c:	00000000 	andeq	r0, r0, r0
    5150:	9c010000 	stcls	0, cr0, [r1], {-0}
    5154:	00000447 	andeq	r0, r0, r7, asr #8
    5158:	74636119 	strbtvc	r6, [r3], #-281	; 0xfffffee7
    515c:	1d580100 	ldfnee	f0, [r8, #-0]
    5160:	00000296 	muleq	r0, r6, r2
    5164:	00001ff2 	strdeq	r1, [r0], -r2
    5168:	99011800 	stmdbls	r1, {fp, ip}
    516c:	01000012 	tsteq	r0, r2, lsl r0
    5170:	0001011c 	andeq	r0, r1, ip, lsl r1
    5174:	00000000 	andeq	r0, r0, r0
    5178:	01000000 	mrseq	r0, (UNDEF: 0)
    517c:	0004de9c 	muleq	r4, ip, lr
    5180:	00b81a00 	adcseq	r1, r8, r0, lsl #20
    5184:	1c010000 	stcne	0, cr0, [r1], {-0}
    5188:	00008f01 	andeq	r8, r0, r1, lsl #30
    518c:	00202e00 	eoreq	r2, r0, r0, lsl #28
    5190:	123f1b00 	eorsne	r1, pc, #0, 22
    5194:	21010000 	mrscs	r0, (UNDEF: 1)
    5198:	00000001 	andeq	r0, r0, r1
    519c:	124c1b00 	subne	r1, ip, #0, 22
    51a0:	30010000 	andcc	r0, r1, r0
    51a4:	00000001 	andeq	r0, r0, r1
    51a8:	13a31b00 			; <UNDEFINED> instruction: 0x13a31b00
    51ac:	37010000 	strcc	r0, [r1, -r0]
    51b0:	00000001 	andeq	r0, r0, r1
    51b4:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    51b8:	00000000 	andeq	r0, r0, r0
    51bc:	09780000 	ldmdbeq	r8!, {}^	; <UNPREDICTABLE>
    51c0:	2b010000 	blcs	451c8 <__ccfg+0x25220>
    51c4:	0004ad07 	andeq	sl, r4, r7, lsl #26
    51c8:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    51cc:	1c000000 	stcne	0, cr0, [r0], {-0}
    51d0:	000004de 	ldrdeq	r0, [r0], -lr
    51d4:	00000000 	andeq	r0, r0, r0
    51d8:	000009a0 	andeq	r0, r0, r0, lsr #19
    51dc:	c7073e01 	strgt	r3, [r7, -r1, lsl #28]
    51e0:	1d000004 	stcne	0, cr0, [r0, #-16]
    51e4:	000004ec 	andeq	r0, r0, ip, ror #9
    51e8:	04de1e00 	ldrbeq	r1, [lr], #3584	; 0xe00
    51ec:	00000000 	andeq	r0, r0, r0
    51f0:	09b80000 	ldmibeq	r8!, {}	; <UNPREDICTABLE>
    51f4:	4a010000 	bmi	451fc <__ccfg+0x25254>
    51f8:	04ec1d07 	strbteq	r1, [ip], #3335	; 0xd07
    51fc:	00000000 	andeq	r0, r0, r0
    5200:	0011c91f 	andseq	ip, r1, pc, lsl r9
    5204:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    5208:	00006701 	andeq	r6, r0, r1, lsl #14
    520c:	66200300 	strtvs	r0, [r0], -r0, lsl #6
    5210:	02000001 	andeq	r0, r0, #1
    5214:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    5218:	00000000 	andeq	r0, r0, r0
    521c:	00000aa7 	andeq	r0, r0, r7, lsr #21
    5220:	160a0003 	strne	r0, [sl], -r3
    5224:	01040000 	mrseq	r0, (UNDEF: 4)
    5228:	00000170 	andeq	r0, r0, r0, ror r1
    522c:	0013310c 	andseq	r3, r3, ip, lsl #2
    5230:	0000c000 	andeq	ip, r0, r0
    5234:	000b7800 	andeq	r7, fp, r0, lsl #16
    5238:	00000000 	andeq	r0, r0, r0
    523c:	003ea700 	eorseq	sl, lr, r0, lsl #14
    5240:	06010200 	streq	r0, [r1], -r0, lsl #4
    5244:	000003a3 	andeq	r0, r0, r3, lsr #7
    5248:	dd050202 	sfmle	f0, 4, [r5, #-8]
    524c:	02000003 	andeq	r0, r0, #3
    5250:	009d0504 	addseq	r0, sp, r4, lsl #10
    5254:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5258:	00009805 	andeq	r9, r0, r5, lsl #16
    525c:	21fc0300 	mvnscs	r0, r0, lsl #6
    5260:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    5264:	00004d18 	andeq	r4, r0, r8, lsl sp
    5268:	08010200 	stmdaeq	r1, {r9}
    526c:	000003a1 	andeq	r0, r0, r1, lsr #7
    5270:	0020ea03 	eoreq	lr, r0, r3, lsl #20
    5274:	19310400 	ldmdbne	r1!, {sl}
    5278:	00000060 	andeq	r0, r0, r0, rrx
    527c:	71070202 	tstvc	r7, r2, lsl #4
    5280:	03000002 	movweq	r0, #2
    5284:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    5288:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    528c:	02000000 	andeq	r0, r0, #0
    5290:	00720704 	rsbseq	r0, r2, r4, lsl #14
    5294:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5298:	00006d07 	andeq	r6, r0, r7, lsl #26
    529c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    52a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    52a4:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    52a8:	03000000 	movweq	r0, #0
    52ac:	000003fd 	strdeq	r0, [r0], -sp
    52b0:	41122605 	tstmi	r2, r5, lsl #12
    52b4:	03000000 	movweq	r0, #0
    52b8:	000015c0 	andeq	r1, r0, r0, asr #11
    52bc:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    52c0:	05000000 	streq	r0, [r0, #-0]
    52c4:	0000009b 	muleq	r0, fp, r0
    52c8:	00009b06 	andeq	r9, r0, r6, lsl #22
    52cc:	13b80300 			; <UNDEFINED> instruction: 0x13b80300
    52d0:	2b050000 	blcs	1452d8 <__ccfg+0x125330>
    52d4:	00004112 	andeq	r4, r0, r2, lsl r1
    52d8:	00b10600 	adcseq	r0, r1, r0, lsl #12
    52dc:	b1050000 	mrslt	r0, (UNDEF: 5)
    52e0:	03000000 	movweq	r0, #0
    52e4:	00001611 	andeq	r1, r0, r1, lsl r6
    52e8:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    52ec:	05000000 	streq	r0, [r0, #-0]
    52f0:	000000c7 	andeq	r0, r0, r7, asr #1
    52f4:	0002a703 	andeq	sl, r2, r3, lsl #14
    52f8:	122d0500 	eorne	r0, sp, #0, 10
    52fc:	00000067 	andeq	r0, r0, r7, rrx
    5300:	32050807 	andcc	r0, r5, #458752	; 0x70000
    5304:	00017209 	andeq	r7, r1, r9, lsl #4
    5308:	02c20800 	sbceq	r0, r2, #0, 16
    530c:	34050000 	strcc	r0, [r5], #-0
    5310:	0000b107 	andeq	fp, r0, r7, lsl #2
    5314:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5318:	00910800 	addseq	r0, r1, r0, lsl #16
    531c:	35050000 	strcc	r0, [r5, #-0]
    5320:	0000b103 	andeq	fp, r0, r3, lsl #2
    5324:	06010100 	streq	r0, [r1], -r0, lsl #2
    5328:	02990800 	addseq	r0, r9, #0, 16
    532c:	36050000 	strcc	r0, [r5], -r0
    5330:	0000b103 	andeq	fp, r0, r3, lsl #2
    5334:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5338:	040c0800 	streq	r0, [ip], #-2048	; 0xfffff800
    533c:	37050000 	strcc	r0, [r5, -r0]
    5340:	0000b103 	andeq	fp, r0, r3, lsl #2
    5344:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5348:	04050800 	streq	r0, [r5], #-2048	; 0xfffff800
    534c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    5350:	0000b103 	andeq	fp, r0, r3, lsl #2
    5354:	00040100 	andeq	r0, r4, r0, lsl #2
    5358:	03f60900 	mvnseq	r0, #0, 18
    535c:	3a050000 	bcc	145364 <__ccfg+0x1253bc>
    5360:	0000b107 	andeq	fp, r0, r7, lsl #2
    5364:	40090100 	andmi	r0, r9, r0, lsl #2
    5368:	05000000 	streq	r0, [r0, #-0]
    536c:	00b1033c 	adcseq	r0, r1, ip, lsr r3
    5370:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5374:	00000066 	andeq	r0, r0, r6, rrx
    5378:	b1033d05 	tstlt	r3, r5, lsl #26
    537c:	03000000 	movweq	r0, #0
    5380:	00015409 	andeq	r5, r1, r9, lsl #8
    5384:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    5388:	000000c7 	andeq	r0, r0, r7, asr #1
    538c:	34030004 	strcc	r0, [r3], #-4
    5390:	05000004 	streq	r0, [r0, #-4]
    5394:	00e40341 	rsceq	r0, r4, r1, asr #6
    5398:	72060000 	andvc	r0, r6, #0
    539c:	0a000001 	beq	53a8 <__exidx_end+0x2734>
    53a0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    53a4:	7e1a4305 	cdpvc	3, 1, cr4, cr10, cr5, {0}
    53a8:	01000001 	tsteq	r0, r1
    53ac:	030d0a01 	movweq	r0, #55809	; 0xda01
    53b0:	45050000 	strmi	r0, [r5, #-0]
    53b4:	00019f0e 	andeq	r9, r1, lr, lsl #30
    53b8:	0b010100 	bleq	457c0 <__ccfg+0x25818>
    53bc:	0001a504 	andeq	sl, r1, r4, lsl #10
    53c0:	08010200 	stmdaeq	r1, {r9}
    53c4:	000003aa 	andeq	r0, r0, sl, lsr #7
    53c8:	0001a505 	andeq	sl, r1, r5, lsl #10
    53cc:	031b0a00 	tsteq	fp, #0, 20
    53d0:	45050000 	strmi	r0, [r5, #-0]
    53d4:	00019f1e 	andeq	r9, r1, lr, lsl pc
    53d8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    53dc:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    53e0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    53e4:	0002d209 	andeq	sp, r2, r9, lsl #4
    53e8:	0b900600 	bleq	fe406bf0 <_estack+0xde401bf0>
    53ec:	00000067 	andeq	r0, r0, r7, rrx
    53f0:	05ed0900 	strbeq	r0, [sp, #2304]!	; 0x900
    53f4:	91060000 	mrsls	r0, (UNDEF: 6)
    53f8:	00009b08 	andeq	r9, r0, r8, lsl #22
    53fc:	71090400 	tstvc	r9, r0, lsl #8
    5400:	06000004 	streq	r0, [r0], -r4
    5404:	00bd1092 	umlalseq	r1, sp, r2, r0
    5408:	00060000 	andeq	r0, r6, r0
    540c:	00041303 	andeq	r1, r4, r3, lsl #6
    5410:	03930600 	orrseq	r0, r3, #0, 12
    5414:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    5418:	0001f00c 	andeq	pc, r1, ip
    541c:	00020700 	andeq	r0, r2, r0, lsl #14
    5420:	0a000d00 	beq	8828 <__exidx_end+0x5bb4>
    5424:	00000036 	andeq	r0, r0, r6, lsr r0
    5428:	fc0f9906 	stc2	9, cr9, [pc], {6}	; <UNPREDICTABLE>
    542c:	01000001 	tsteq	r0, r1
    5430:	c2040b01 	andgt	r0, r4, #1024	; 0x400
    5434:	07000000 	streq	r0, [r0, -r0]
    5438:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    543c:	00000245 	andeq	r0, r0, r5, asr #4
    5440:	00046408 	andeq	r6, r4, r8, lsl #8
    5444:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    5448:	000000b1 	strheq	r0, [r0], -r1
    544c:	00010701 	andeq	r0, r1, r1, lsl #14
    5450:	00003108 	andeq	r3, r0, r8, lsl #2
    5454:	03940700 	orrseq	r0, r4, #0, 14
    5458:	000000b1 	strheq	r0, [r0], -r1
    545c:	00000101 	andeq	r0, r0, r1, lsl #2
    5460:	02840300 	addeq	r0, r4, #0, 6
    5464:	96070000 	strls	r0, [r7], -r0
    5468:	00021b03 	andeq	r1, r2, r3, lsl #22
    546c:	02450500 	subeq	r0, r5, #0, 10
    5470:	510c0000 	mrspl	r0, (UNDEF: 12)
    5474:	61000002 	tstvs	r0, r2
    5478:	0d000002 	stceq	0, cr0, [r0, #-8]
    547c:	02560500 	subseq	r0, r6, #0, 10
    5480:	ed0a0000 	stc	0, cr0, [sl, #-0]
    5484:	07000002 	streq	r0, [r0, -r2]
    5488:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
    548c:	01010000 	mrseq	r0, (UNDEF: 1)
    5490:	0000a70c 	andeq	sl, r0, ip, lsl #14
    5494:	00027f00 	andeq	r7, r2, r0, lsl #30
    5498:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    549c:	00000274 	andeq	r0, r0, r4, ror r2
    54a0:	0003930a 	andeq	r9, r3, sl, lsl #6
    54a4:	13060800 	movwne	r0, #26624	; 0x6800
    54a8:	0000027f 	andeq	r0, r0, pc, ror r2
    54ac:	340a0101 	strcc	r0, [sl], #-257	; 0xfffffeff
    54b0:	06000001 	streq	r0, [r0], -r1
    54b4:	00c70ec3 	sbceq	r0, r7, r3, asr #29
    54b8:	01010000 	mrseq	r0, (UNDEF: 1)
    54bc:	00047e0e 	andeq	r7, r4, lr, lsl #28
    54c0:	016e0900 	cmneq	lr, r0, lsl #18
    54c4:	0002ad10 	andeq	sl, r2, r0, lsl sp
    54c8:	b3040b00 	movwlt	r0, #19200	; 0x4b00
    54cc:	0f000002 	svceq	0x00000002
    54d0:	0002bf01 	andeq	fp, r2, r1, lsl #30
    54d4:	009b1000 	addseq	r1, fp, r0
    54d8:	0c000000 	stceq	0, cr0, [r0], {-0}
    54dc:	000001ac 	andeq	r0, r0, ip, lsr #3
    54e0:	000002ca 	andeq	r0, r0, sl, asr #5
    54e4:	bf05000d 	svclt	0x0005000d
    54e8:	11000002 	tstne	r0, r2
    54ec:	00000444 	andeq	r0, r0, r4, asr #8
    54f0:	16017f09 	strne	r7, [r1], -r9, lsl #30
    54f4:	000002ca 	andeq	r0, r0, sl, asr #5
    54f8:	8b110101 	blhi	445904 <__ccfg+0x42595c>
    54fc:	09000003 	stmdbeq	r0, {r0, r1}
    5500:	d3140182 	tstle	r4, #-2147483616	; 0x80000020
    5504:	01000000 	mrseq	r0, (UNDEF: 0)
    5508:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
    550c:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    5510:	00c70e02 	sbceq	r0, r7, r2, lsl #28
    5514:	01010000 	mrseq	r0, (UNDEF: 1)
    5518:	03090812 	movweq	r0, #38930	; 0x9812
    551c:	03230903 			; <UNDEFINED> instruction: 0x03230903
    5520:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    5524:	09000021 	stmdbeq	r0, {r0, r5}
    5528:	9b070307 	blls	1c614c <__ccfg+0x1a61a4>
    552c:	00000000 	andeq	r0, r0, r0
    5530:	00053f13 	andeq	r3, r5, r3, lsl pc
    5534:	03080900 	movweq	r0, #35072	; 0x8900
    5538:	0000d808 	andeq	sp, r0, r8, lsl #16
    553c:	0e000400 	cfcpyseq	mvf0, mvf0
    5540:	00000264 	andeq	r0, r0, r4, ror #4
    5544:	03030909 	movweq	r0, #14601	; 0x3909
    5548:	000002fc 	strdeq	r0, [r0], -ip
    554c:	00048d14 	andeq	r8, r4, r4, lsl sp
    5550:	0b093000 	bleq	251558 <__ccfg+0x2315b0>
    5554:	03930803 	orrseq	r0, r3, #196608	; 0x30000
    5558:	86130000 	ldrhi	r0, [r3], -r0
    555c:	09000004 	stmdbeq	r0, {r2}
    5560:	9b080314 	blls	2061b8 <__ccfg+0x1e6210>
    5564:	00000000 	andeq	r0, r0, r0
    5568:	0002dc13 	andeq	sp, r2, r3, lsl ip
    556c:	03150900 	tsteq	r5, #0, 18
    5570:	00009b08 	andeq	r9, r0, r8, lsl #22
    5574:	81130200 	tsthi	r3, r0, lsl #4
    5578:	09000004 	stmdbeq	r0, {r2}
    557c:	a00b0316 	andge	r0, fp, r6, lsl r3
    5580:	04000002 	streq	r0, [r0], #-2
    5584:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
    5588:	03170900 	tsteq	r7, #0, 18
    558c:	0000d809 	andeq	sp, r0, r9, lsl #16
    5590:	3d130800 	ldccc	8, cr0, [r3, #-0]
    5594:	09000004 	stmdbeq	r0, {r2}
    5598:	930f0318 	movwls	r0, #62232	; 0xf318
    559c:	0c000003 	stceq	0, cr0, [r0], {3}
    55a0:	0002d713 	andeq	sp, r2, r3, lsl r7
    55a4:	03190900 	tsteq	r9, #0, 18
    55a8:	0003a315 	andeq	sl, r3, r5, lsl r3
    55ac:	0c002c00 	stceq	12, cr2, [r0], {-0}
    55b0:	00000323 	andeq	r0, r0, r3, lsr #6
    55b4:	000003a3 	andeq	r0, r0, r3, lsr #7
    55b8:	00008815 	andeq	r8, r0, r5, lsl r8
    55bc:	0b000300 	bleq	61c4 <__exidx_end+0x3550>
    55c0:	00033004 	andeq	r3, r3, r4
    55c4:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
    55c8:	1c090000 	stcne	0, cr0, [r9], {-0}
    55cc:	03301b03 	teqeq	r0, #3072	; 0xc00
    55d0:	81110000 	tsthi	r1, r0
    55d4:	09000003 	stmdbeq	r0, {r0, r1}
    55d8:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
    55dc:	01000003 	tsteq	r0, r3
    55e0:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
    55e4:	0a000003 	beq	55f8 <__exidx_end+0x2984>
    55e8:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    55ec:	9b131d0a 	blls	4cca1c <__ccfg+0x4aca74>
    55f0:	01000000 	mrseq	r0, (UNDEF: 0)
    55f4:	071b0a01 	ldreq	r0, [fp, -r1, lsl #20]
    55f8:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    55fc:	0000ac1a 	andeq	sl, r0, sl, lsl ip
    5600:	0a010100 	beq	45a08 <__ccfg+0x25a60>
    5604:	000008ab 	andeq	r0, r0, fp, lsr #17
    5608:	ac241e0a 	stcge	14, cr1, [r4], #-40	; 0xffffffd8
    560c:	01000000 	mrseq	r0, (UNDEF: 0)
    5610:	05da0a01 	ldrbeq	r0, [sl, #2561]	; 0xa01
    5614:	220a0000 	andcs	r0, sl, #0
    5618:	0003c514 	andeq	ip, r3, r4, lsl r5
    561c:	16010100 	strne	r0, [r1], -r0, lsl #2
    5620:	00000386 	andeq	r0, r0, r6, lsl #7
    5624:	c70f0f01 	strgt	r0, [pc, -r1, lsl #30]
    5628:	05000000 	streq	r0, [r0, #-0]
    562c:	00000003 	andeq	r0, r0, r3
    5630:	13091600 	movwne	r1, #38400	; 0x9600
    5634:	0f010000 	svceq	0x00010000
    5638:	0000c715 	andeq	ip, r0, r5, lsl r7
    563c:	00030500 	andeq	r0, r3, r0, lsl #10
    5640:	16000000 	strne	r0, [r0], -r0
    5644:	0000138f 	andeq	r1, r0, pc, lsl #7
    5648:	15141001 	ldrne	r1, [r4, #-1]
    564c:	05000002 	streq	r0, [r0, #-2]
    5650:	00000003 	andeq	r0, r0, r3
    5654:	12ef1600 	rscne	r1, pc, #0, 12
    5658:	12010000 	andne	r0, r1, #0
    565c:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5660:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    5664:	16200000 	strtne	r0, [r0], -r0
    5668:	00001383 	andeq	r1, r0, r3, lsl #7
    566c:	b1031301 	tstlt	r3, r1, lsl #6
    5670:	05000000 	streq	r0, [r0, #-0]
    5674:	00003503 	andeq	r3, r0, r3, lsl #10
    5678:	0be51620 	bleq	ff94af00 <_estack+0xdf945f00>
    567c:	15010000 	strne	r0, [r1, #-0]
    5680:	00009b0d 	andeq	r9, r0, sp, lsl #22
    5684:	00030500 	andeq	r0, r3, r0, lsl #10
    5688:	17000000 	strne	r0, [r0, -r0]
    568c:	0012bb01 	andseq	fp, r2, r1, lsl #22
    5690:	06130300 	ldreq	r0, [r3], -r0, lsl #6
	...
    569c:	01189c01 	tsteq	r8, r1, lsl #24
    56a0:	00001394 	muleq	r0, r4, r3
    56a4:	01070803 	tsteq	r7, r3, lsl #16
    56a8:	000000c7 	andeq	r0, r0, r7, asr #1
	...
    56b4:	04bc9c01 	ldrteq	r9, [ip], #3073	; 0xc01
    56b8:	65190000 	ldrvs	r0, [r9, #-0]
    56bc:	08030072 	stmdaeq	r3, {r1, r4, r5, r6}
    56c0:	0004bc19 	andeq	fp, r4, r9, lsl ip
    56c4:	00206200 	eoreq	r6, r0, r0, lsl #4
    56c8:	72651a00 	rsbvc	r1, r5, #0, 20
    56cc:	08030075 	stmdaeq	r3, {r0, r2, r4, r5, r6}
    56d0:	0004c224 	andeq	ip, r4, r4, lsr #4
    56d4:	00510100 	subseq	r0, r1, r0, lsl #2
    56d8:	008f040b 	addeq	r0, pc, fp, lsl #8
    56dc:	040b0000 	streq	r0, [fp], #-0
    56e0:	000000c7 	andeq	r0, r0, r7, asr #1
    56e4:	1317011b 	tstne	r7, #-1073741818	; 0xc0000006
    56e8:	60010000 	andvs	r0, r1, r0
    56ec:	9b010601 	blls	46ef8 <__ccfg+0x26f50>
	...
    56f8:	01000000 	mrseq	r0, (UNDEF: 0)
    56fc:	0004f69c 	muleq	r4, ip, r6
    5700:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    5704:	01600100 	cmneq	r0, r0, lsl #2
    5708:	00009b14 	andeq	r9, r0, r4, lsl fp
    570c:	00207500 	eoreq	r7, r0, r0, lsl #10
    5710:	011d0000 	tsteq	sp, r0
    5714:	0000130e 	andeq	r1, r0, lr, lsl #6
    5718:	06015b01 	streq	r5, [r1], -r1, lsl #22
	...
    5724:	011b9c01 	tsteq	fp, r1, lsl #24
    5728:	000012e6 	andeq	r1, r0, r6, ror #5
    572c:	06012101 	streq	r2, [r1], -r1, lsl #2
    5730:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    573c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    5740:	1c000005 	stcne	0, cr0, [r0], {5}
    5744:	01007473 	tsteq	r0, r3, ror r4
    5748:	9b150121 	blls	545bd4 <__ccfg+0x525c2c>
    574c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    5750:	1c000020 	stcne	0, cr0, [r0], {32}
    5754:	21010061 	tstcs	r1, r1, rrx
    5758:	00c71f01 	sbceq	r1, r7, r1, lsl #30
    575c:	209b0000 	addscs	r0, fp, r0
    5760:	731c0000 	tstvc	ip, #0
    5764:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5768:	0002152e 	andeq	r1, r2, lr, lsr #10
    576c:	0020b900 	eoreq	fp, r0, r0, lsl #18
    5770:	656c1c00 	strbvs	r1, [ip, #-3072]!	; 0xfffff400
    5774:	2101006e 	tstcs	r1, lr, rrx
    5778:	009b3601 	addseq	r3, fp, r1, lsl #12
    577c:	20cc0000 	sbccs	r0, ip, r0
    5780:	621e0000 	andsvs	r0, lr, #0
    5784:	2301006c 	movwcs	r0, #4204	; 0x106c
    5788:	009b0701 	addseq	r0, fp, r1, lsl #14
    578c:	20df0000 	sbcscs	r0, pc, r0
    5790:	fd1f0000 	ldc2	0, cr0, [pc, #-0]	; 5798 <__exidx_end+0x2b24>
    5794:	01000012 	tsteq	r0, r2, lsl r0
    5798:	00010132 	andeq	r0, r1, r2, lsr r1
    579c:	20000000 	andcs	r0, r0, r0
    57a0:	000009f6 	strdeq	r0, [r0], -r6
    57a4:	00000000 	andeq	r0, r0, r0
    57a8:	00000b60 	andeq	r0, r0, r0, ror #22
    57ac:	03014301 	movweq	r4, #4865	; 0x1301
    57b0:	000005a3 	andeq	r0, r0, r3, lsr #11
    57b4:	000a1221 	andeq	r1, sl, r1, lsr #4
    57b8:	0a052100 	beq	14dbc0 <__ccfg+0x12dc18>
    57bc:	22000000 	andcs	r0, r0, #0
    57c0:	000009f6 	strdeq	r0, [r0], -r6
	...
    57cc:	03015001 	movweq	r5, #4097	; 0x1001
    57d0:	000a1221 	andeq	r1, sl, r1, lsr #4
    57d4:	0a052100 	beq	14dbdc <__ccfg+0x12dc34>
    57d8:	00000000 	andeq	r0, r0, r0
    57dc:	12dd0118 	sbcsne	r0, sp, #24, 2
    57e0:	cb010000 	blgt	457e8 <__ccfg+0x25840>
    57e4:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    57f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    57f4:	00000681 	andeq	r0, r0, r1, lsl #13
    57f8:	00747319 	rsbseq	r7, r4, r9, lsl r3
    57fc:	9b15cb01 	blls	578408 <__ccfg+0x558460>
    5800:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5804:	23000021 	movwcs	r0, #33	; 0x21
    5808:	0000131f 	andeq	r1, r0, pc, lsl r3
    580c:	c71fcb01 	ldrgt	ip, [pc, -r1, lsl #22]
    5810:	26000000 	strcs	r0, [r0], -r0
    5814:	23000021 	movwcs	r0, #33	; 0x21
    5818:	000012c9 	andeq	r1, r0, r9, asr #5
    581c:	c72bcb01 	strgt	ip, [fp, -r1, lsl #22]!
    5820:	4f000000 	svcmi	0x00000000
    5824:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    5828:	000012b5 			; <UNDEFINED> instruction: 0x000012b5
    582c:	0001e601 	andeq	lr, r1, r1, lsl #12
    5830:	24000000 	strcs	r0, [r0], #-0
    5834:	000013a2 	andeq	r1, r0, r2, lsr #7
    5838:	0001ea01 	andeq	lr, r1, r1, lsl #20
    583c:	25000000 	strcs	r0, [r0, #-0]
    5840:	0000085e 	andeq	r0, r0, lr, asr r8
    5844:	00000000 	andeq	r0, r0, r0
    5848:	00000b30 	andeq	r0, r0, r0, lsr fp
    584c:	2604fc01 	strcs	pc, [r4], -r1, lsl #24
    5850:	00000878 	andeq	r0, r0, r8, ror r8
    5854:	0000216d 	andeq	r2, r0, sp, ror #2
    5858:	00086c26 	andeq	r6, r8, r6, lsr #24
    585c:	00218000 	eoreq	r8, r1, r0
    5860:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5864:	00000000 	andeq	r0, r0, r0
    5868:	0b480000 	bleq	1205870 <__ccfg+0x11e58c8>
    586c:	43010000 	movwmi	r0, #4096	; 0x1000
    5870:	00066402 	andeq	r6, r6, r2, lsl #8
    5874:	0a122100 	beq	48dc7c <__ccfg+0x46dcd4>
    5878:	05210000 	streq	r0, [r1, #-0]!
    587c:	0000000a 	andeq	r0, r0, sl
    5880:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    588c:	02480100 	subeq	r0, r8, #0, 2
    5890:	000a1221 	andeq	r1, sl, r1, lsr #4
    5894:	0a052100 	beq	14dc9c <__ccfg+0x12dcf4>
    5898:	00000000 	andeq	r0, r0, r0
    589c:	24011800 	strcs	r1, [r1], #-2048	; 0xfffff800
    58a0:	01000013 	tsteq	r0, r3, lsl r0
    58a4:	9b0106b0 	blls	4736c <__ccfg+0x273c4>
	...
    58b0:	01000000 	mrseq	r0, (UNDEF: 0)
    58b4:	0007049c 	muleq	r7, ip, r4
    58b8:	00611900 	rsbeq	r1, r1, r0, lsl #18
    58bc:	c715b001 	ldrgt	fp, [r5, -r1]
    58c0:	93000000 	movwls	r0, #0
    58c4:	19000021 	stmdbne	r0, {r0, r5}
    58c8:	b0010073 	andlt	r0, r1, r3, ror r0
    58cc:	0007041e 	andeq	r0, r7, lr, lsl r4
    58d0:	0021bc00 	eoreq	fp, r1, r0, lsl #24
    58d4:	656c1900 	strbvs	r1, [ip, #-2304]!	; 0xfffff700
    58d8:	b001006e 	andlt	r0, r1, lr, rrx
    58dc:	00009b26 	andeq	r9, r0, r6, lsr #22
    58e0:	0021f000 	eoreq	pc, r1, r0
    58e4:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    58e8:	00000000 	andeq	r0, r0, r0
    58ec:	0b180000 	bleq	6058f4 <__ccfg+0x5e594c>
    58f0:	ba010000 	blt	458f8 <__ccfg+0x25950>
    58f4:	0006e802 	andeq	lr, r6, r2, lsl #16
    58f8:	0a122100 	beq	48dd00 <__ccfg+0x46dd58>
    58fc:	05210000 	streq	r0, [r1, #-0]!
    5900:	0000000a 	andeq	r0, r0, sl
    5904:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    5910:	02c40100 	sbceq	r0, r4, #0, 2
    5914:	000a1221 	andeq	r1, sl, r1, lsr #4
    5918:	0a052100 	beq	14dd20 <__ccfg+0x12dd78>
    591c:	00000000 	andeq	r0, r0, r0
    5920:	00b1040b 	adcseq	r0, r1, fp, lsl #8
    5924:	01170000 	tsteq	r7, r0
    5928:	000012d4 	ldrdeq	r1, [r0], -r4
    592c:	8006a801 	andhi	sl, r6, r1, lsl #16
    5930:	94000015 	strls	r0, [r0], #-21	; 0xffffffeb
    5934:	01000015 	tsteq	r0, r5, lsl r0
    5938:	f501299c 			; <UNDEFINED> instruction: 0xf501299c
    593c:	01000012 	tsteq	r0, r2, lsl r0
    5940:	009b0693 	umullseq	r0, fp, r3, r6
    5944:	156c0000 	strbne	r0, [ip, #-0]!
    5948:	15800000 	strne	r0, [r0]
    594c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5950:	00139c2a 	andseq	r9, r3, sl, lsr #24
    5954:	0d820100 	stfeqs	f0, [r2]
    5958:	00001508 	andeq	r1, r0, r8, lsl #10
    595c:	00001548 	andeq	r1, r0, r8, asr #10
    5960:	07969c01 	ldreq	r9, [r6, r1, lsl #24]
    5964:	9f280000 	svcls	0x00280000
    5968:	22000007 	andcs	r0, r0, #7
    596c:	36000015 			; <UNDEFINED> instruction: 0x36000015
    5970:	01000015 	tsteq	r0, r5, lsl r0
    5974:	f627038a 			; <UNDEFINED> instruction: 0xf627038a
    5978:	22000009 	andcs	r0, r0, #9
    597c:	e8000015 	stmda	r0, {r0, r2, r4}
    5980:	0100000a 	tsteq	r0, sl
    5984:	07790272 			; <UNDEFINED> instruction: 0x07790272
    5988:	12210000 	eorne	r0, r1, #0
    598c:	2100000a 	tstcs	r0, sl
    5990:	00000a05 	andeq	r0, r0, r5, lsl #20
    5994:	09f62500 	ldmibeq	r6!, {r8, sl, sp}^
    5998:	152e0000 	strne	r0, [lr, #-0]!
    599c:	0b000000 	bleq	59a4 <__exidx_end+0x2d30>
    59a0:	74010000 	strvc	r0, [r1], #-0
    59a4:	0a122102 	beq	48ddb4 <__ccfg+0x46de0c>
    59a8:	05210000 	streq	r0, [r1, #-0]!
    59ac:	0000000a 	andeq	r0, r0, sl
    59b0:	7c2b0000 	stcvc	0, cr0, [fp], #-0
    59b4:	01000013 	tsteq	r0, r3, lsl r0
    59b8:	2b010d78 	blcs	48fa0 <__ccfg+0x28ff8>
    59bc:	00001389 	andeq	r1, r0, r9, lsl #7
    59c0:	010d6d01 	tsteq	sp, r1, lsl #26
    59c4:	0013a82b 	andseq	sl, r3, fp, lsr #16
    59c8:	0d660100 	stfeqe	f0, [r6, #-0]
    59cc:	13ae2c01 			; <UNDEFINED> instruction: 0x13ae2c01
    59d0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    59d4:	14b4010d 	ldrtne	r0, [r4], #269	; 0x10d
    59d8:	15080000 	strne	r0, [r8, #-0]
    59dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    59e0:	00000842 	andeq	r0, r0, r2, asr #16
    59e4:	00747319 	rsbseq	r7, r4, r9, lsl r3
    59e8:	9b195801 	blls	65b9f4 <__ccfg+0x63ba4c>
    59ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    59f0:	19000022 	stmdbne	r0, {r1, r5}
    59f4:	006c6564 	rsbeq	r6, ip, r4, ror #10
    59f8:	9b225801 	blls	89ba04 <__ccfg+0x87ba5c>
    59fc:	21000000 	mrscs	r0, (UNDEF: 0)
    5a00:	25000022 	strcs	r0, [r0, #-34]	; 0xffffffde
    5a04:	00000842 	andeq	r0, r0, r2, asr #16
    5a08:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
    5a0c:	00000aa0 	andeq	r0, r0, r0, lsr #21
    5a10:	2d135c01 	ldccs	12, cr5, [r3, #-4]
    5a14:	00000aa0 	andeq	r0, r0, r0, lsr #21
    5a18:	0008532e 	andeq	r5, r8, lr, lsr #6
    5a1c:	00223400 	eoreq	r3, r2, r0, lsl #8
    5a20:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5a24:	14bc0000 	ldrtne	r0, [ip], #0
    5a28:	0ac00000 	beq	ff005a30 <_estack+0xdf000a30>
    5a2c:	51010000 	mrspl	r0, (UNDEF: 1)
    5a30:	00082402 	andeq	r2, r8, r2, lsl #8
    5a34:	0a122100 	beq	48de3c <__ccfg+0x46de94>
    5a38:	05210000 	streq	r0, [r1, #-0]!
    5a3c:	0000000a 	andeq	r0, r0, sl
    5a40:	0009f628 	andeq	pc, r9, r8, lsr #12
    5a44:	0014d600 	andseq	sp, r4, r0, lsl #12
    5a48:	0014da00 	andseq	sp, r4, r0, lsl #20
    5a4c:	02540100 	subseq	r0, r4, #0, 2
    5a50:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a54:	0a052100 	beq	14de5c <__ccfg+0x12deb4>
    5a58:	00000000 	andeq	r0, r0, r0
    5a5c:	2c2f0000 	stccs	0, cr0, [pc], #-0	; 5a64 <__exidx_end+0x2df0>
    5a60:	01000013 	tsteq	r0, r3, lsl r0
    5a64:	00b10d4b 	adcseq	r0, r1, fp, asr #26
    5a68:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    5a6c:	30000008 	andcc	r0, r0, r8
    5a70:	4f010072 	svcmi	0x00010072
    5a74:	0000b107 	andeq	fp, r0, r7, lsl #2
    5a78:	03310000 	teqeq	r1, #0
    5a7c:	01000013 	tsteq	r0, r3, lsl r0
    5a80:	01010d41 	tsteq	r1, r1, asr #26
    5a84:	00000883 	andeq	r0, r0, r3, lsl #17
    5a88:	646d6332 	strbtvs	r6, [sp], #-818	; 0xfffffcce
    5a8c:	19410100 	stmdbne	r1, {r8}^
    5a90:	000000b1 	strheq	r0, [r0], -r1
    5a94:	01006132 	tsteq	r0, r2, lsr r1
    5a98:	00c72441 	sbceq	r2, r7, r1, asr #8
    5a9c:	2c000000 	stccs	0, cr0, [r0], {-0}
    5aa0:	000012ce 	andeq	r1, r0, lr, asr #5
    5aa4:	010d3a01 	tsteq	sp, r1, lsl #20
    5aa8:	0000149c 	muleq	r0, ip, r4
    5aac:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    5ab0:	08e59c01 	stmiaeq	r5!, {r0, sl, fp, ip, pc}^
    5ab4:	63190000 	tstvs	r9, #0
    5ab8:	0100646d 	tsteq	r0, sp, ror #8
    5abc:	00b1193a 	adcseq	r1, r1, sl, lsr r9
    5ac0:	22470000 	subcs	r0, r7, #0
    5ac4:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    5ac8:	9c000009 	stcls	0, cr0, [r0], {9}
    5acc:	88000014 	stmdahi	r0, {r2, r4}
    5ad0:	0100000a 	tsteq	r0, sl
    5ad4:	08c9023c 	stmiaeq	r9, {r2, r3, r4, r5, r9}^
    5ad8:	12210000 	eorne	r0, r1, #0
    5adc:	2100000a 	tstcs	r0, sl
    5ae0:	00000a05 	andeq	r0, r0, r5, lsl #20
    5ae4:	09f62800 	ldmibeq	r6!, {fp, sp}^
    5ae8:	14a80000 	strtne	r0, [r8], #0
    5aec:	14ac0000 	strtne	r0, [ip], #0
    5af0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5af4:	0a122102 	beq	48df04 <__ccfg+0x46df5c>
    5af8:	05210000 	streq	r0, [r1, #-0]!
    5afc:	0000000a 	andeq	r0, r0, sl
    5b00:	13bd2c00 			; <UNDEFINED> instruction: 0x13bd2c00
    5b04:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    5b08:	146c010d 	strbtne	r0, [ip], #-269	; 0xfffffef3
    5b0c:	149c0000 	ldrne	r0, [ip], #0
    5b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b14:	00000979 	andeq	r0, r0, r9, ror r9
    5b18:	01006219 	tsteq	r0, r9, lsl r2
    5b1c:	00b11c29 	adcseq	r1, r1, r9, lsr #24
    5b20:	225a0000 	subscs	r0, sl, #0
    5b24:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    5b28:	062b0100 	strteq	r0, [fp], -r0, lsl #2
    5b2c:	00000081 	andeq	r0, r0, r1, lsl #1
    5b30:	000a3d27 	andeq	r3, sl, r7, lsr #26
    5b34:	00147400 	andseq	r7, r4, r0, lsl #8
    5b38:	000a5000 	andeq	r5, sl, r0
    5b3c:	03320100 	teqeq	r2, #0, 2
    5b40:	0000092e 	andeq	r0, r0, lr, lsr #18
    5b44:	000a4c21 	andeq	r4, sl, r1, lsr #24
    5b48:	3d330000 	ldccc	0, cr0, [r3, #-0]
    5b4c:	8000000a 	andhi	r0, r0, sl
    5b50:	84000014 	strhi	r0, [r0], #-20	; 0xffffffec
    5b54:	01000014 	tsteq	r0, r4, lsl r0
    5b58:	0948042f 	stmdbeq	r8, {r0, r1, r2, r3, r5, sl}^
    5b5c:	4c210000 	stcmi	0, cr0, [r1], #-0
    5b60:	0000000a 	andeq	r0, r0, sl
    5b64:	000a2033 	andeq	r2, sl, r3, lsr r0
    5b68:	00148400 	andseq	r8, r4, r0, lsl #8
    5b6c:	00148600 	andseq	r8, r4, r0, lsl #12
    5b70:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    5b74:	00000962 	andeq	r0, r0, r2, ror #18
    5b78:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5b7c:	20250000 	eorcs	r0, r5, r0
    5b80:	8c00000a 	stchi	0, cr0, [r0], {10}
    5b84:	70000014 	andvc	r0, r0, r4, lsl r0
    5b88:	0100000a 	tsteq	r0, sl
    5b8c:	2f210333 	svccs	0x00210333
    5b90:	0000000a 	andeq	r0, r0, sl
    5b94:	13b43400 			; <UNDEFINED> instruction: 0x13b43400
    5b98:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5b9c:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5ba0:	00143800 	andseq	r3, r4, r0, lsl #16
    5ba4:	00146c00 	andseq	r6, r4, r0, lsl #24
    5ba8:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5bac:	30000009 	andcc	r0, r0, r9
    5bb0:	1b010069 	blne	45d5c <__ccfg+0x25db4>
    5bb4:	00008106 	andeq	r8, r0, r6, lsl #2
    5bb8:	00623500 	rsbeq	r3, r2, r0, lsl #10
    5bbc:	b1071c01 	tstlt	r7, r1, lsl #24
    5bc0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5bc4:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    5bc8:	00000a3d 	andeq	r0, r0, sp, lsr sl
    5bcc:	0000143c 	andeq	r1, r0, ip, lsr r4
    5bd0:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5bd4:	c5032201 	strgt	r2, [r3, #-513]	; 0xfffffdff
    5bd8:	21000009 	tstcs	r0, r9
    5bdc:	00000a4c 	andeq	r0, r0, ip, asr #20
    5be0:	0a202700 	beq	80f7e8 <__ccfg+0x7ef840>
    5be4:	14420000 	strbne	r0, [r2], #-0
    5be8:	0a180000 	beq	605bf0 <__ccfg+0x5e5c48>
    5bec:	23010000 	movwcs	r0, #4096	; 0x1000
    5bf0:	0009df03 	andeq	sp, r9, r3, lsl #30
    5bf4:	0a2f2100 	beq	bcdffc <__ccfg+0xbae054>
    5bf8:	25000000 	strcs	r0, [r0, #-0]
    5bfc:	00000a5a 	andeq	r0, r0, sl, asr sl
    5c00:	00001444 	andeq	r1, r0, r4, asr #8
    5c04:	00000a30 	andeq	r0, r0, r0, lsr sl
    5c08:	21072001 	tstcs	r7, r1
    5c0c:	00000a6c 	andeq	r0, r0, ip, ror #20
    5c10:	c2360000 	eorsgt	r0, r6, #0
    5c14:	02000004 	andeq	r0, r0, #4
    5c18:	01010206 	tsteq	r1, r6, lsl #4
    5c1c:	000a2003 	andeq	r2, sl, r3
    5c20:	01663700 	cmneq	r6, r0, lsl #14
    5c24:	06020000 	streq	r0, [r2], -r0
    5c28:	00672302 	rsbeq	r2, r7, r2, lsl #6
    5c2c:	95370000 	ldrls	r0, [r7, #-0]!
    5c30:	02000009 	andeq	r0, r0, #9
    5c34:	67370206 	ldrvs	r0, [r7, -r6, lsl #4]!
    5c38:	00000000 	andeq	r0, r0, r0
    5c3c:	0003af36 	andeq	sl, r3, r6, lsr pc
    5c40:	01540200 	cmpeq	r4, r0, lsl #4
    5c44:	3d030101 	stfccs	f0, [r3, #-4]
    5c48:	3700000a 	strcc	r0, [r0, -sl]
    5c4c:	00000166 	andeq	r0, r0, r6, ror #2
    5c50:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
    5c54:	00000067 	andeq	r0, r0, r7, rrx
    5c58:	00253600 	eoreq	r3, r5, r0, lsl #12
    5c5c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    5c60:	03010101 	movweq	r0, #4353	; 0x1101
    5c64:	00000a5a 	andeq	r0, r0, sl, asr sl
    5c68:	00016637 	andeq	r6, r1, r7, lsr r6
    5c6c:	011e0200 	tsteq	lr, r0, lsl #4
    5c70:	00006717 	andeq	r6, r0, r7, lsl r7
    5c74:	c9380000 	ldmdbgt	r8!, {}	; <UNPREDICTABLE>
    5c78:	02000011 	andeq	r0, r0, #17
    5c7c:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    5c80:	03000000 	movweq	r0, #0
    5c84:	00000a79 	andeq	r0, r0, r9, ror sl
    5c88:	00016639 	andeq	r6, r1, r9, lsr r6
    5c8c:	18a40200 	stmiane	r4!, {r9}
    5c90:	00000067 	andeq	r0, r0, r7, rrx
    5c94:	07963a00 	ldreq	r3, [r6, r0, lsl #20]
    5c98:	15480000 	strbne	r0, [r8, #-0]
    5c9c:	156c0000 	strbne	r0, [ip, #-0]!
    5ca0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ca4:	00079628 	andeq	r9, r7, r8, lsr #12
    5ca8:	00155200 	andseq	r5, r5, r0, lsl #4
    5cac:	00156600 	andseq	r6, r5, r0, lsl #12
    5cb0:	0d780100 	ldfeqe	f0, [r8, #-0]
    5cb4:	0007a83b 	andeq	sl, r7, fp, lsr r8
    5cb8:	00155c00 	andseq	r5, r5, r0, lsl #24
    5cbc:	00156200 	andseq	r6, r5, r0, lsl #4
    5cc0:	037c0100 	cmneq	ip, #0, 2
    5cc4:	12000000 	andne	r0, r0, #0
    5cc8:	03000004 	movweq	r0, #4
    5ccc:	0019b000 	andseq	fp, r9, r0
    5cd0:	70010400 	andvc	r0, r1, r0, lsl #8
    5cd4:	0c000001 	stceq	0, cr0, [r0], {1}
    5cd8:	000013d0 	ldrdeq	r1, [r0], -r0
    5cdc:	000000c0 	andeq	r0, r0, r0, asr #1
    5ce0:	00000bf8 	strdeq	r0, [r0], -r8
    5ce4:	00000000 	andeq	r0, r0, r0
    5ce8:	000047dc 	ldrdeq	r4, [r0], -ip
    5cec:	a3060102 	movwge	r0, #24834	; 0x6102
    5cf0:	02000003 	andeq	r0, r0, #3
    5cf4:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    5cf8:	04020000 	streq	r0, [r2], #-0
    5cfc:	00009d05 	andeq	r9, r0, r5, lsl #26
    5d00:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5d04:	00000098 	muleq	r0, r8, r0
    5d08:	0021fc03 	eoreq	pc, r1, r3, lsl #24
    5d0c:	182e0200 	stmdane	lr!, {r9}
    5d10:	0000004d 	andeq	r0, r0, sp, asr #32
    5d14:	a1080102 	tstge	r8, r2, lsl #2
    5d18:	03000003 	movweq	r0, #3
    5d1c:	000020ea 	andeq	r2, r0, sl, ror #1
    5d20:	60193102 	andsvs	r3, r9, r2, lsl #2
    5d24:	02000000 	andeq	r0, r0, #0
    5d28:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    5d2c:	b3030000 	movwlt	r0, #12288	; 0x3000
    5d30:	02000017 	andeq	r0, r0, #23
    5d34:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5d38:	04020000 	streq	r0, [r2], #-0
    5d3c:	00007207 	andeq	r7, r0, r7, lsl #4
    5d40:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5d44:	0000006d 	andeq	r0, r0, sp, rrx
    5d48:	69050404 	stmdbvs	r5, {r2, sl}
    5d4c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5d50:	00770704 	rsbseq	r0, r7, r4, lsl #14
    5d54:	c0030000 	andgt	r0, r3, r0
    5d58:	03000015 	movweq	r0, #21
    5d5c:	00541227 	subseq	r1, r4, r7, lsr #4
    5d60:	8f050000 	svchi	0x00050000
    5d64:	03000000 	movweq	r0, #0
    5d68:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    5d6c:	41122b03 	tstmi	r2, r3, lsl #22
    5d70:	06000000 	streq	r0, [r0], -r0
    5d74:	000000a0 	andeq	r0, r0, r0, lsr #1
    5d78:	00161103 	andseq	r1, r6, r3, lsl #2
    5d7c:	122c0300 	eorne	r0, ip, #0, 6
    5d80:	00000067 	andeq	r0, r0, r7, rrx
    5d84:	0000b105 	andeq	fp, r0, r5, lsl #2
    5d88:	02a70300 	adceq	r0, r7, #0, 6
    5d8c:	2d030000 	stccs	0, cr0, [r3, #-0]
    5d90:	00006712 	andeq	r6, r0, r2, lsl r7
    5d94:	03080700 	movweq	r0, #34560	; 0x8700
    5d98:	015c0932 	cmpeq	ip, r2, lsr r9
    5d9c:	c2080000 	andgt	r0, r8, #0
    5da0:	03000002 	movweq	r0, #2
    5da4:	00a00734 	adceq	r0, r0, r4, lsr r7
    5da8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dac:	91080007 	tstls	r8, r7
    5db0:	03000000 	movweq	r0, #0
    5db4:	00a00335 	adceq	r0, r0, r5, lsr r3
    5db8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dbc:	99080006 	stmdbls	r8, {r1, r2}
    5dc0:	03000002 	movweq	r0, #2
    5dc4:	00a00336 	adceq	r0, r0, r6, lsr r3
    5dc8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dcc:	0c080005 	stceq	0, cr0, [r8], {5}
    5dd0:	03000004 	movweq	r0, #4
    5dd4:	00a00337 	adceq	r0, r0, r7, lsr r3
    5dd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5ddc:	05080004 	streq	r0, [r8, #-4]
    5de0:	03000004 	movweq	r0, #4
    5de4:	00a00338 	adceq	r0, r0, r8, lsr r3
    5de8:	04010000 	streq	r0, [r1], #-0
    5dec:	f6090000 			; <UNDEFINED> instruction: 0xf6090000
    5df0:	03000003 	movweq	r0, #3
    5df4:	00a0073a 	adceq	r0, r0, sl, lsr r7
    5df8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    5dfc:	00000040 	andeq	r0, r0, r0, asr #32
    5e00:	a0033c03 	andge	r3, r3, r3, lsl #24
    5e04:	02000000 	andeq	r0, r0, #0
    5e08:	00006609 	andeq	r6, r0, r9, lsl #12
    5e0c:	033d0300 	teqeq	sp, #0, 6
    5e10:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e14:	01540903 	cmpeq	r4, r3, lsl #18
    5e18:	3f030000 	svccc	0x00030000
    5e1c:	0000b108 	andeq	fp, r0, r8, lsl #2
    5e20:	03000400 	movweq	r0, #1024	; 0x400
    5e24:	00000434 	andeq	r0, r0, r4, lsr r4
    5e28:	ce034103 	adfgts	f4, f3, f3
    5e2c:	06000000 	streq	r0, [r0], -r0
    5e30:	0000015c 	andeq	r0, r0, ip, asr r1
    5e34:	0002b60a 	andeq	fp, r2, sl, lsl #12
    5e38:	1a430300 	bne	10c6a40 <__ccfg+0x10a6a98>
    5e3c:	00000168 	andeq	r0, r0, r8, ror #2
    5e40:	0d0a0101 	stfeqs	f0, [sl, #-4]
    5e44:	03000003 	movweq	r0, #3
    5e48:	01890e45 	orreq	r0, r9, r5, asr #28
    5e4c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e50:	018f040b 	orreq	r0, pc, fp, lsl #8
    5e54:	01020000 	mrseq	r0, (UNDEF: 2)
    5e58:	0003aa08 	andeq	sl, r3, r8, lsl #20
    5e5c:	018f0500 	orreq	r0, pc, r0, lsl #10
    5e60:	1b0a0000 	blne	285e68 <__ccfg+0x265ec0>
    5e64:	03000003 	movweq	r0, #3
    5e68:	01891e45 	orreq	r1, r9, r5, asr #28
    5e6c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e70:	8f040807 	svchi	0x00040807
    5e74:	0001da09 	andeq	sp, r1, r9, lsl #20
    5e78:	02d20900 	sbcseq	r0, r2, #0, 18
    5e7c:	90040000 	andls	r0, r4, r0
    5e80:	0000670b 	andeq	r6, r0, fp, lsl #14
    5e84:	ed090000 	stc	0, cr0, [r9, #-0]
    5e88:	04000005 	streq	r0, [r0], #-5
    5e8c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    5e90:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    5e94:	00000471 	andeq	r0, r0, r1, ror r4
    5e98:	ac109204 	lfmge	f1, 1, [r0], {4}
    5e9c:	06000000 	streq	r0, [r0], -r0
    5ea0:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    5ea4:	93040000 	movwls	r0, #16384	; 0x4000
    5ea8:	0001a903 	andeq	sl, r1, r3, lsl #18
    5eac:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    5eb0:	01f10000 	mvnseq	r0, r0
    5eb4:	000d0000 	andeq	r0, sp, r0
    5eb8:	0000360a 	andeq	r3, r0, sl, lsl #12
    5ebc:	0f990400 	svceq	0x00990400
    5ec0:	000001e6 	andeq	r0, r0, r6, ror #3
    5ec4:	01070101 	tsteq	r7, r1, lsl #2
    5ec8:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    5ecc:	08000002 	stmdaeq	r0, {r1}
    5ed0:	00000464 	andeq	r0, r0, r4, ror #8
    5ed4:	a0079305 	andge	r9, r7, r5, lsl #6
    5ed8:	01000000 	mrseq	r0, (UNDEF: 0)
    5edc:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    5ee0:	00000031 	andeq	r0, r0, r1, lsr r0
    5ee4:	a0039405 	andge	r9, r3, r5, lsl #8
    5ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    5eec:	00000001 	andeq	r0, r0, r1
    5ef0:	00028403 	andeq	r8, r2, r3, lsl #8
    5ef4:	03960500 	orrseq	r0, r6, #0, 10
    5ef8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5efc:	00022905 	andeq	r2, r2, r5, lsl #18
    5f00:	02350c00 	eorseq	r0, r5, #0, 24
    5f04:	02450000 	subeq	r0, r5, #0
    5f08:	000d0000 	andeq	r0, sp, r0
    5f0c:	00023a05 	andeq	r3, r2, r5, lsl #20
    5f10:	02ed0a00 	rsceq	r0, sp, #0, 20
    5f14:	9c050000 	stcls	0, cr0, [r5], {-0}
    5f18:	00024517 	andeq	r4, r2, r7, lsl r5
    5f1c:	0c010100 	stfeqs	f0, [r1], {-0}
    5f20:	0000009b 	muleq	r0, fp, r0
    5f24:	00000263 	andeq	r0, r0, r3, ror #4
    5f28:	5805000d 	stmdapl	r5, {r0, r2, r3}
    5f2c:	0a000002 	beq	5f3c <__exidx_end+0x32c8>
    5f30:	00000393 	muleq	r0, r3, r3
    5f34:	63130606 	tstvs	r3, #6291456	; 0x600000
    5f38:	01000002 	tsteq	r0, r2
    5f3c:	01340a01 	teqeq	r4, r1, lsl #20
    5f40:	c3040000 	movwgt	r0, #16384	; 0x4000
    5f44:	0000b10e 	andeq	fp, r0, lr, lsl #2
    5f48:	0e010100 	adfeqs	f0, f1, f0
    5f4c:	0000047e 	andeq	r0, r0, lr, ror r4
    5f50:	10016e07 	andne	r6, r1, r7, lsl #28
    5f54:	00000291 	muleq	r0, r1, r2
    5f58:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    5f5c:	010f0000 	mrseq	r0, CPSR
    5f60:	000002a3 	andeq	r0, r0, r3, lsr #5
    5f64:	00008f10 	andeq	r8, r0, r0, lsl pc
    5f68:	960c0000 	strls	r0, [ip], -r0
    5f6c:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    5f70:	0d000002 	stceq	0, cr0, [r0, #-8]
    5f74:	02a30500 	adceq	r0, r3, #0, 10
    5f78:	44110000 	ldrmi	r0, [r1], #-0
    5f7c:	07000004 	streq	r0, [r0, -r4]
    5f80:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    5f84:	01000002 	tsteq	r0, r2
    5f88:	038b1101 	orreq	r1, fp, #1073741824	; 0x40000000
    5f8c:	82070000 	andhi	r0, r7, #0
    5f90:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    5f94:	01010000 	mrseq	r0, (UNDEF: 1)
    5f98:	00046911 	andeq	r6, r4, r1, lsl r9
    5f9c:	02d80700 	sbcseq	r0, r8, #0, 14
    5fa0:	0000b10e 	andeq	fp, r0, lr, lsl #2
    5fa4:	12010100 	andne	r0, r1, #0, 2
    5fa8:	03030708 	movweq	r0, #14088	; 0x3708
    5fac:	00030709 	andeq	r0, r3, r9, lsl #14
    5fb0:	21f41300 	mvnscs	r1, r0, lsl #6
    5fb4:	07070000 	streq	r0, [r7, -r0]
    5fb8:	008f0703 	addeq	r0, pc, r3, lsl #14
    5fbc:	13000000 	movwne	r0, #0
    5fc0:	0000053f 	andeq	r0, r0, pc, lsr r5
    5fc4:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    5fc8:	000000c2 	andeq	r0, r0, r2, asr #1
    5fcc:	640e0004 	strvs	r0, [lr], #-4
    5fd0:	07000002 	streq	r0, [r0, -r2]
    5fd4:	e0030309 	and	r0, r3, r9, lsl #6
    5fd8:	14000002 	strne	r0, [r0], #-2
    5fdc:	0000048d 	andeq	r0, r0, sp, lsl #9
    5fe0:	030b0730 	movweq	r0, #46896	; 0xb730
    5fe4:	00037708 	andeq	r7, r3, r8, lsl #14
    5fe8:	04861300 	streq	r1, [r6], #768	; 0x300
    5fec:	14070000 	strne	r0, [r7], #-0
    5ff0:	008f0803 	addeq	r0, pc, r3, lsl #16
    5ff4:	13000000 	movwne	r0, #0
    5ff8:	000002dc 	ldrdeq	r0, [r0], -ip
    5ffc:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    6000:	0000008f 	andeq	r0, r0, pc, lsl #1
    6004:	04811302 	streq	r1, [r1], #770	; 0x302
    6008:	16070000 	strne	r0, [r7], -r0
    600c:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    6010:	13040000 	movwne	r0, #16384	; 0x4000
    6014:	00000f3f 	andeq	r0, r0, pc, lsr pc
    6018:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    601c:	000000c2 	andeq	r0, r0, r2, asr #1
    6020:	043d1308 	ldrteq	r1, [sp], #-776	; 0xfffffcf8
    6024:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    6028:	03770f03 	cmneq	r7, #3, 30
    602c:	130c0000 	movwne	r0, #49152	; 0xc000
    6030:	000002d7 	ldrdeq	r0, [r0], -r7
    6034:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    6038:	00000387 	andeq	r0, r0, r7, lsl #7
    603c:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    6040:	87000003 	strhi	r0, [r0, -r3]
    6044:	15000003 	strne	r0, [r0, #-3]
    6048:	00000088 	andeq	r0, r0, r8, lsl #1
    604c:	040b0003 	streq	r0, [fp], #-3
    6050:	00000314 	andeq	r0, r0, r4, lsl r3
    6054:	0004980e 	andeq	r9, r4, lr, lsl #16
    6058:	031c0700 	tsteq	ip, #0, 14
    605c:	0003141b 	andeq	r1, r3, fp, lsl r4
    6060:	03811100 	orreq	r1, r1, #0, 2
    6064:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    6068:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    606c:	01010000 	mrseq	r0, (UNDEF: 1)
    6070:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    6074:	c60a0000 	strgt	r0, [sl], -r0
    6078:	01000013 	tsteq	r0, r3, lsl r0
    607c:	01890e09 	orreq	r0, r9, r9, lsl #28
    6080:	01010000 	mrseq	r0, (UNDEF: 1)
    6084:	140f0116 	strne	r0, [pc], #-278	; 608c <__exidx_end+0x3418>
    6088:	0d010000 	stceq	0, cr0, [r1, #-0]
    608c:	00810105 	addeq	r0, r1, r5, lsl #2
    6090:	15940000 	ldrne	r0, [r4]
    6094:	160c0000 	strne	r0, [ip], -r0
    6098:	9c010000 	stcls	0, cr0, [r1], {-0}
    609c:	00747317 	rsbseq	r7, r4, r7, lsl r3
    60a0:	8f120d01 	svchi	0x00120d01
    60a4:	96000000 	strls	r0, [r0], -r0
    60a8:	17000022 	strne	r0, [r0, -r2, lsr #32]
    60ac:	00667562 	rsbeq	r7, r6, r2, ror #10
    60b0:	891c0d01 	ldmdbhi	ip, {r0, r8, sl, fp}
    60b4:	b4000001 	strlt	r0, [r0], #-1
    60b8:	17000022 	strne	r0, [r0, -r2, lsr #32]
    60bc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    60c0:	81250d01 			; <UNDEFINED> instruction: 0x81250d01
    60c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    60c8:	18000023 	stmdane	r0, {r0, r1, r5}
    60cc:	00001416 	andeq	r1, r0, r6, lsl r4
    60d0:	81061101 	tsthi	r6, r1, lsl #2
    60d4:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    60d8:	00000023 	andeq	r0, r0, r3, lsr #32
    60dc:	00044c00 	andeq	r4, r4, r0, lsl #24
    60e0:	ff000300 			; <UNDEFINED> instruction: 0xff000300
    60e4:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    60e8:	00017001 	andeq	r7, r1, r1
    60ec:	14240c00 	strtne	r0, [r4], #-3072	; 0xfffff400
    60f0:	00c00000 	sbceq	r0, r0, r0
    60f4:	0c080000 	stceq	0, cr0, [r8], {-0}
    60f8:	00000000 	andeq	r0, r0, r0
    60fc:	49a10000 	stmibmi	r1!, {}	; <UNPREDICTABLE>
    6100:	01020000 	mrseq	r0, (UNDEF: 2)
    6104:	0003a306 	andeq	sl, r3, r6, lsl #6
    6108:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    610c:	000003dd 	ldrdeq	r0, [r0], -sp
    6110:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    6114:	02000000 	andeq	r0, r0, #0
    6118:	00980508 	addseq	r0, r8, r8, lsl #10
    611c:	fc030000 	stc2	0, cr0, [r3], {-0}
    6120:	02000021 	andeq	r0, r0, #33	; 0x21
    6124:	004d182e 	subeq	r1, sp, lr, lsr #16
    6128:	01020000 	mrseq	r0, (UNDEF: 2)
    612c:	0003a108 	andeq	sl, r3, r8, lsl #2
    6130:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    6134:	31020000 	mrscc	r0, (UNDEF: 2)
    6138:	00006019 	andeq	r6, r0, r9, lsl r0
    613c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6140:	00000271 	andeq	r0, r0, r1, ror r2
    6144:	0017b303 	andseq	fp, r7, r3, lsl #6
    6148:	19340200 	ldmdbne	r4!, {r9}
    614c:	00000073 	andeq	r0, r0, r3, ror r0
    6150:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    6154:	02000000 	andeq	r0, r0, #0
    6158:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    615c:	04040000 	streq	r0, [r4], #-0
    6160:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6164:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6168:	00000077 	andeq	r0, r0, r7, ror r0
    616c:	000b4603 	andeq	r4, fp, r3, lsl #12
    6170:	1b280300 	blne	a06d78 <__ccfg+0x9e6dd0>
    6174:	0000009b 	muleq	r0, fp, r0
    6178:	000a5c05 	andeq	r5, sl, r5, lsl #24
    617c:	00090400 	andeq	r0, r9, r0, lsl #8
    6180:	000000b3 	strheq	r0, [r0], -r3
    6184:	000bfc06 	andeq	pc, fp, r6, lsl #24
    6188:	0000b300 	andeq	fp, r0, r0, lsl #6
    618c:	00010000 	andeq	r0, r1, r0
    6190:	5e030407 	cdppl	4, 0, cr0, cr3, cr7, {0}
    6194:	0300000a 	movweq	r0, #10
    6198:	008f1863 	addeq	r1, pc, r3, ror #16
    619c:	c0030000 	andgt	r0, r3, r0
    61a0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    61a4:	00541227 	subseq	r1, r4, r7, lsr #4
    61a8:	c1080000 	mrsgt	r0, (UNDEF: 8)
    61ac:	03000000 	movweq	r0, #0
    61b0:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    61b4:	41122b04 	tstmi	r2, r4, lsl #22
    61b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    61bc:	000000d2 	ldrdeq	r0, [r0], -r2
    61c0:	00161103 	andseq	r1, r6, r3, lsl #2
    61c4:	122c0400 	eorne	r0, ip, #0, 8
    61c8:	00000067 	andeq	r0, r0, r7, rrx
    61cc:	0000e308 	andeq	lr, r0, r8, lsl #6
    61d0:	02a70300 	adceq	r0, r7, #0, 6
    61d4:	2d040000 	stccs	0, cr0, [r4, #-0]
    61d8:	00006712 	andeq	r6, r0, r2, lsl r7
    61dc:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    61e0:	018e0932 	orreq	r0, lr, r2, lsr r9
    61e4:	c20b0000 	andgt	r0, fp, #0
    61e8:	04000002 	streq	r0, [r0], #-2
    61ec:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    61f0:	01010000 	mrseq	r0, (UNDEF: 1)
    61f4:	910b0007 	tstls	fp, r7
    61f8:	04000000 	streq	r0, [r0], #-0
    61fc:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6200:	01010000 	mrseq	r0, (UNDEF: 1)
    6204:	990b0006 	stmdbls	fp, {r1, r2}
    6208:	04000002 	streq	r0, [r0], #-2
    620c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6210:	01010000 	mrseq	r0, (UNDEF: 1)
    6214:	0c0b0005 	stceq	0, cr0, [fp], {5}
    6218:	04000004 	streq	r0, [r0], #-4
    621c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6220:	01010000 	mrseq	r0, (UNDEF: 1)
    6224:	050b0004 	streq	r0, [fp, #-4]
    6228:	04000004 	streq	r0, [r0], #-4
    622c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    6230:	04010000 	streq	r0, [r1], #-0
    6234:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    6238:	04000003 	streq	r0, [r0], #-3
    623c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    6240:	0c010000 	stceq	0, cr0, [r1], {-0}
    6244:	00000040 	andeq	r0, r0, r0, asr #32
    6248:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    624c:	02000000 	andeq	r0, r0, #0
    6250:	0000660c 	andeq	r6, r0, ip, lsl #12
    6254:	033d0400 	teqeq	sp, #0, 8
    6258:	000000d2 	ldrdeq	r0, [r0], -r2
    625c:	01540c03 	cmpeq	r4, r3, lsl #24
    6260:	3f040000 	svccc	0x00040000
    6264:	0000e308 	andeq	lr, r0, r8, lsl #6
    6268:	03000400 	movweq	r0, #1024	; 0x400
    626c:	00000434 	andeq	r0, r0, r4, lsr r4
    6270:	00034104 	andeq	r4, r3, r4, lsl #2
    6274:	09000001 	stmdbeq	r0, {r0}
    6278:	0000018e 	andeq	r0, r0, lr, lsl #3
    627c:	0002b60d 	andeq	fp, r2, sp, lsl #12
    6280:	1a430400 	bne	10c7288 <__ccfg+0x10a72e0>
    6284:	0000019a 	muleq	r0, sl, r1
    6288:	0d0d0101 	stfeqs	f0, [sp, #-4]
    628c:	04000003 	streq	r0, [r0], #-3
    6290:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    6294:	01010000 	mrseq	r0, (UNDEF: 1)
    6298:	01c1040e 	biceq	r0, r1, lr, lsl #8
    629c:	01020000 	mrseq	r0, (UNDEF: 2)
    62a0:	0003aa08 	andeq	sl, r3, r8, lsl #20
    62a4:	01c10800 	biceq	r0, r1, r0, lsl #16
    62a8:	1b0d0000 	blne	3462b0 <__ccfg+0x326308>
    62ac:	04000003 	streq	r0, [r0], #-3
    62b0:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    62b4:	01010000 	mrseq	r0, (UNDEF: 1)
    62b8:	8f05080a 	svchi	0x0005080a
    62bc:	00020c09 	andeq	r0, r2, r9, lsl #24
    62c0:	02d20c00 	sbcseq	r0, r2, #0, 24
    62c4:	90050000 	andls	r0, r5, r0
    62c8:	0000670b 	andeq	r6, r0, fp, lsl #14
    62cc:	ed0c0000 	stc	0, cr0, [ip, #-0]
    62d0:	05000005 	streq	r0, [r0, #-5]
    62d4:	00c10891 	smulleq	r0, r1, r1, r8
    62d8:	0c040000 	stceq	0, cr0, [r4], {-0}
    62dc:	00000471 	andeq	r0, r0, r1, ror r4
    62e0:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    62e4:	06000000 	streq	r0, [r0], -r0
    62e8:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    62ec:	93050000 	movwls	r0, #20480	; 0x5000
    62f0:	0001db03 	andeq	sp, r1, r3, lsl #22
    62f4:	020c0f00 	andeq	r0, ip, #0, 30
    62f8:	02230000 	eoreq	r0, r3, #0
    62fc:	00100000 	andseq	r0, r0, r0
    6300:	0000360d 	andeq	r3, r0, sp, lsl #12
    6304:	0f990500 	svceq	0x00990500
    6308:	00000218 	andeq	r0, r0, r8, lsl r2
    630c:	010a0101 	tsteq	sl, r1, lsl #2
    6310:	5b099106 	blpl	26a730 <__ccfg+0x24a788>
    6314:	0b000002 	bleq	6324 <__exidx_end+0x36b0>
    6318:	00000464 	andeq	r0, r0, r4, ror #8
    631c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6320:	01000000 	mrseq	r0, (UNDEF: 0)
    6324:	0b000107 	bleq	6748 <__exidx_end+0x3ad4>
    6328:	00000031 	andeq	r0, r0, r1, lsr r0
    632c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    6330:	01000000 	mrseq	r0, (UNDEF: 0)
    6334:	00000001 	andeq	r0, r0, r1
    6338:	00028403 	andeq	r8, r2, r3, lsl #8
    633c:	03960600 	orrseq	r0, r6, #0, 12
    6340:	00000231 	andeq	r0, r0, r1, lsr r2
    6344:	00025b08 	andeq	r5, r2, r8, lsl #22
    6348:	02670f00 	rsbeq	r0, r7, #0, 30
    634c:	02770000 	rsbseq	r0, r7, #0
    6350:	00100000 	andseq	r0, r0, r0
    6354:	00026c08 	andeq	r6, r2, r8, lsl #24
    6358:	02ed0d00 	rsceq	r0, sp, #0, 26
    635c:	9c060000 	stcls	0, cr0, [r6], {-0}
    6360:	00027717 	andeq	r7, r2, r7, lsl r7
    6364:	0f010100 	svceq	0x00010100
    6368:	000000cd 	andeq	r0, r0, sp, asr #1
    636c:	00000295 	muleq	r0, r5, r2
    6370:	8a080010 	bhi	2063b8 <__ccfg+0x1e6410>
    6374:	0d000002 	stceq	0, cr0, [r0, #-8]
    6378:	00000393 	muleq	r0, r3, r3
    637c:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    6380:	01000002 	tsteq	r0, r2
    6384:	01340d01 	teqeq	r4, r1, lsl #26
    6388:	c3050000 	movwgt	r0, #20480	; 0x5000
    638c:	0000e30e 	andeq	lr, r0, lr, lsl #6
    6390:	11010100 	mrsne	r0, (UNDEF: 17)
    6394:	0000047e 	andeq	r0, r0, lr, ror r4
    6398:	10016e08 	andne	r6, r1, r8, lsl #28
    639c:	000002c3 	andeq	r0, r0, r3, asr #5
    63a0:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    63a4:	01120000 	tsteq	r2, r0
    63a8:	000002d5 	ldrdeq	r0, [r0], -r5
    63ac:	0000c113 	andeq	ip, r0, r3, lsl r1
    63b0:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    63b4:	e0000001 	and	r0, r0, r1
    63b8:	10000002 	andne	r0, r0, r2
    63bc:	02d50800 	sbcseq	r0, r5, #0, 16
    63c0:	44140000 	ldrmi	r0, [r4], #-0
    63c4:	08000004 	stmdaeq	r0, {r2}
    63c8:	e016017f 	ands	r0, r6, pc, ror r1
    63cc:	01000002 	tsteq	r0, r2
    63d0:	038b1401 	orreq	r1, fp, #16777216	; 0x1000000
    63d4:	82080000 	andhi	r0, r8, #0
    63d8:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    63dc:	01010000 	mrseq	r0, (UNDEF: 1)
    63e0:	00046914 	andeq	r6, r4, r4, lsl r9
    63e4:	02d80800 	sbcseq	r0, r8, #0, 16
    63e8:	0000e30e 	andeq	lr, r0, lr, lsl #6
    63ec:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    63f0:	03030808 	movweq	r0, #14344	; 0x3808
    63f4:	00033909 	andeq	r3, r3, r9, lsl #18
    63f8:	21f41600 	mvnscs	r1, r0, lsl #12
    63fc:	07080000 	streq	r0, [r8, -r0]
    6400:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6404:	16000000 	strne	r0, [r0], -r0
    6408:	0000053f 	andeq	r0, r0, pc, lsr r5
    640c:	08030808 	stmdaeq	r3, {r3, fp}
    6410:	000000f4 	strdeq	r0, [r0], -r4
    6414:	64110004 	ldrvs	r0, [r1], #-4
    6418:	08000002 	stmdaeq	r0, {r1}
    641c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6420:	17000003 	strne	r0, [r0, -r3]
    6424:	0000048d 	andeq	r0, r0, sp, lsl #9
    6428:	030b0830 	movweq	r0, #47152	; 0xb830
    642c:	0003a908 	andeq	sl, r3, r8, lsl #18
    6430:	04861600 	streq	r1, [r6], #1536	; 0x600
    6434:	14080000 	strne	r0, [r8], #-0
    6438:	00c10803 	sbceq	r0, r1, r3, lsl #16
    643c:	16000000 	strne	r0, [r0], -r0
    6440:	000002dc 	ldrdeq	r0, [r0], -ip
    6444:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    6448:	000000c1 	andeq	r0, r0, r1, asr #1
    644c:	04811602 	streq	r1, [r1], #1538	; 0x602
    6450:	16080000 	strne	r0, [r8], -r0
    6454:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    6458:	16040000 	strne	r0, [r4], -r0
    645c:	00000f3f 	andeq	r0, r0, pc, lsr pc
    6460:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    6464:	000000f4 	strdeq	r0, [r0], -r4
    6468:	043d1608 	ldrteq	r1, [sp], #-1544	; 0xfffff9f8
    646c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6470:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    6474:	160c0000 	strne	r0, [ip], -r0
    6478:	000002d7 	ldrdeq	r0, [r0], -r7
    647c:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    6480:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    6484:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    6488:	b9000003 	stmdblt	r0, {r0, r1}
    648c:	18000003 	stmdane	r0, {r0, r1}
    6490:	00000088 	andeq	r0, r0, r8, lsl #1
    6494:	040e0003 	streq	r0, [lr], #-3
    6498:	00000346 	andeq	r0, r0, r6, asr #6
    649c:	00049811 	andeq	r9, r4, r1, lsl r8
    64a0:	031c0800 	tsteq	ip, #0, 16
    64a4:	0003461b 	andeq	r4, r3, fp, lsl r6
    64a8:	03811400 	orreq	r1, r1, #0, 8
    64ac:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    64b0:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    64b4:	01010000 	mrseq	r0, (UNDEF: 1)
    64b8:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    64bc:	01190000 	tsteq	r9, r0
    64c0:	0000141b 	andeq	r1, r0, fp, lsl r4
    64c4:	01050c01 	tsteq	r5, r1, lsl #24
    64c8:	00000081 	andeq	r0, r0, r1, lsl #1
    64cc:	0000160c 	andeq	r1, r0, ip, lsl #12
    64d0:	00001660 	andeq	r1, r0, r0, ror #12
    64d4:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    64d8:	731a0000 	tstvc	sl, #0
    64dc:	0c010074 	stceq	0, cr0, [r1], {116}	; 0x74
    64e0:	0000c114 	andeq	ip, r0, r4, lsl r1
    64e4:	0023a800 	eoreq	sl, r3, r0, lsl #16
    64e8:	006d1b00 	rsbeq	r1, sp, r0, lsl #22
    64ec:	49240c01 	stmdbmi	r4!, {r0, sl, fp}
    64f0:	02000004 	andeq	r0, r0, #4
    64f4:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    64f8:	00001416 	andeq	r1, r0, r6, lsl r4
    64fc:	81060e01 	tsthi	r6, r1, lsl #28
    6500:	bb000000 	bllt	6508 <__exidx_end+0x3894>
    6504:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    6508:	00667562 	rsbeq	r7, r6, r2, ror #10
    650c:	bb080f01 	bllt	20a118 <__ccfg+0x1ea170>
    6510:	fa000001 	blx	651c <__exidx_end+0x38a8>
    6514:	1f000023 	svcne	0x00000023
    6518:	01007061 	tsteq	r0, r1, rrx
    651c:	00b50a10 	adcseq	r0, r5, r0, lsl sl
    6520:	91020000 	mrsls	r0, (UNDEF: 2)
    6524:	040e005c 	streq	r0, [lr], #-92	; 0xffffffa4
    6528:	000001c8 	andeq	r0, r0, r8, asr #3
    652c:	00044c00 	andeq	r4, r4, r0, lsl #24
    6530:	ab000300 	blge	7138 <__exidx_end+0x44c4>
    6534:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    6538:	00017001 	andeq	r7, r1, r1
    653c:	14650c00 	strbtne	r0, [r5], #-3072	; 0xfffff400
    6540:	00c00000 	sbceq	r0, r0, r0
    6544:	0c180000 	ldceq	0, cr0, [r8], {-0}
    6548:	00000000 	andeq	r0, r0, r0
    654c:	4b430000 	blmi	10c6554 <__ccfg+0x10a65ac>
    6550:	01020000 	mrseq	r0, (UNDEF: 2)
    6554:	0003a306 	andeq	sl, r3, r6, lsl #6
    6558:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    655c:	000003dd 	ldrdeq	r0, [r0], -sp
    6560:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    6564:	02000000 	andeq	r0, r0, #0
    6568:	00980508 	addseq	r0, r8, r8, lsl #10
    656c:	fc030000 	stc2	0, cr0, [r3], {-0}
    6570:	02000021 	andeq	r0, r0, #33	; 0x21
    6574:	004d182e 	subeq	r1, sp, lr, lsr #16
    6578:	01020000 	mrseq	r0, (UNDEF: 2)
    657c:	0003a108 	andeq	sl, r3, r8, lsl #2
    6580:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    6584:	31020000 	mrscc	r0, (UNDEF: 2)
    6588:	00006019 	andeq	r6, r0, r9, lsl r0
    658c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6590:	00000271 	andeq	r0, r0, r1, ror r2
    6594:	0017b303 	andseq	fp, r7, r3, lsl #6
    6598:	19340200 	ldmdbne	r4!, {r9}
    659c:	00000073 	andeq	r0, r0, r3, ror r0
    65a0:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    65a4:	02000000 	andeq	r0, r0, #0
    65a8:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    65ac:	04040000 	streq	r0, [r4], #-0
    65b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    65b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    65b8:	00000077 	andeq	r0, r0, r7, ror r0
    65bc:	000b4603 	andeq	r4, fp, r3, lsl #12
    65c0:	1b280300 	blne	a071c8 <__ccfg+0x9e7220>
    65c4:	0000009b 	muleq	r0, fp, r0
    65c8:	000a5c05 	andeq	r5, sl, r5, lsl #24
    65cc:	00090400 	andeq	r0, r9, r0, lsl #8
    65d0:	000000b3 	strheq	r0, [r0], -r3
    65d4:	000bfc06 	andeq	pc, fp, r6, lsl #24
    65d8:	0000b300 	andeq	fp, r0, r0, lsl #6
    65dc:	00010000 	andeq	r0, r1, r0
    65e0:	5e030407 	cdppl	4, 0, cr0, cr3, cr7, {0}
    65e4:	0300000a 	movweq	r0, #10
    65e8:	008f1863 	addeq	r1, pc, r3, ror #16
    65ec:	c0030000 	andgt	r0, r3, r0
    65f0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    65f4:	00541227 	subseq	r1, r4, r7, lsr #4
    65f8:	c1080000 	mrsgt	r0, (UNDEF: 8)
    65fc:	03000000 	movweq	r0, #0
    6600:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    6604:	41122b04 	tstmi	r2, r4, lsl #22
    6608:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    660c:	000000d2 	ldrdeq	r0, [r0], -r2
    6610:	00161103 	andseq	r1, r6, r3, lsl #2
    6614:	122c0400 	eorne	r0, ip, #0, 8
    6618:	00000067 	andeq	r0, r0, r7, rrx
    661c:	0000e308 	andeq	lr, r0, r8, lsl #6
    6620:	02a70300 	adceq	r0, r7, #0, 6
    6624:	2d040000 	stccs	0, cr0, [r4, #-0]
    6628:	00006712 	andeq	r6, r0, r2, lsl r7
    662c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    6630:	018e0932 	orreq	r0, lr, r2, lsr r9
    6634:	c20b0000 	andgt	r0, fp, #0
    6638:	04000002 	streq	r0, [r0], #-2
    663c:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6640:	01010000 	mrseq	r0, (UNDEF: 1)
    6644:	910b0007 	tstls	fp, r7
    6648:	04000000 	streq	r0, [r0], #-0
    664c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6650:	01010000 	mrseq	r0, (UNDEF: 1)
    6654:	990b0006 	stmdbls	fp, {r1, r2}
    6658:	04000002 	streq	r0, [r0], #-2
    665c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6660:	01010000 	mrseq	r0, (UNDEF: 1)
    6664:	0c0b0005 	stceq	0, cr0, [fp], {5}
    6668:	04000004 	streq	r0, [r0], #-4
    666c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6670:	01010000 	mrseq	r0, (UNDEF: 1)
    6674:	050b0004 	streq	r0, [fp, #-4]
    6678:	04000004 	streq	r0, [r0], #-4
    667c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    6680:	04010000 	streq	r0, [r1], #-0
    6684:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    6688:	04000003 	streq	r0, [r0], #-3
    668c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    6690:	0c010000 	stceq	0, cr0, [r1], {-0}
    6694:	00000040 	andeq	r0, r0, r0, asr #32
    6698:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    669c:	02000000 	andeq	r0, r0, #0
    66a0:	0000660c 	andeq	r6, r0, ip, lsl #12
    66a4:	033d0400 	teqeq	sp, #0, 8
    66a8:	000000d2 	ldrdeq	r0, [r0], -r2
    66ac:	01540c03 	cmpeq	r4, r3, lsl #24
    66b0:	3f040000 	svccc	0x00040000
    66b4:	0000e308 	andeq	lr, r0, r8, lsl #6
    66b8:	03000400 	movweq	r0, #1024	; 0x400
    66bc:	00000434 	andeq	r0, r0, r4, lsr r4
    66c0:	00034104 	andeq	r4, r3, r4, lsl #2
    66c4:	09000001 	stmdbeq	r0, {r0}
    66c8:	0000018e 	andeq	r0, r0, lr, lsl #3
    66cc:	0002b60d 	andeq	fp, r2, sp, lsl #12
    66d0:	1a430400 	bne	10c76d8 <__ccfg+0x10a7730>
    66d4:	0000019a 	muleq	r0, sl, r1
    66d8:	0d0d0101 	stfeqs	f0, [sp, #-4]
    66dc:	04000003 	streq	r0, [r0], #-3
    66e0:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    66e4:	01010000 	mrseq	r0, (UNDEF: 1)
    66e8:	01c1040e 	biceq	r0, r1, lr, lsl #8
    66ec:	01020000 	mrseq	r0, (UNDEF: 2)
    66f0:	0003aa08 	andeq	sl, r3, r8, lsl #20
    66f4:	01c10800 	biceq	r0, r1, r0, lsl #16
    66f8:	1b0d0000 	blne	346700 <__ccfg+0x326758>
    66fc:	04000003 	streq	r0, [r0], #-3
    6700:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    6704:	01010000 	mrseq	r0, (UNDEF: 1)
    6708:	8f05080a 	svchi	0x0005080a
    670c:	00020c09 	andeq	r0, r2, r9, lsl #24
    6710:	02d20c00 	sbcseq	r0, r2, #0, 24
    6714:	90050000 	andls	r0, r5, r0
    6718:	0000670b 	andeq	r6, r0, fp, lsl #14
    671c:	ed0c0000 	stc	0, cr0, [ip, #-0]
    6720:	05000005 	streq	r0, [r0, #-5]
    6724:	00c10891 	smulleq	r0, r1, r1, r8
    6728:	0c040000 	stceq	0, cr0, [r4], {-0}
    672c:	00000471 	andeq	r0, r0, r1, ror r4
    6730:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    6734:	06000000 	streq	r0, [r0], -r0
    6738:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    673c:	93050000 	movwls	r0, #20480	; 0x5000
    6740:	0001db03 	andeq	sp, r1, r3, lsl #22
    6744:	020c0f00 	andeq	r0, ip, #0, 30
    6748:	02230000 	eoreq	r0, r3, #0
    674c:	00100000 	andseq	r0, r0, r0
    6750:	0000360d 	andeq	r3, r0, sp, lsl #12
    6754:	0f990500 	svceq	0x00990500
    6758:	00000218 	andeq	r0, r0, r8, lsl r2
    675c:	010a0101 	tsteq	sl, r1, lsl #2
    6760:	5b099106 	blpl	26ab80 <__ccfg+0x24abd8>
    6764:	0b000002 	bleq	6774 <__exidx_end+0x3b00>
    6768:	00000464 	andeq	r0, r0, r4, ror #8
    676c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6770:	01000000 	mrseq	r0, (UNDEF: 0)
    6774:	0b000107 	bleq	6b98 <__exidx_end+0x3f24>
    6778:	00000031 	andeq	r0, r0, r1, lsr r0
    677c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    6780:	01000000 	mrseq	r0, (UNDEF: 0)
    6784:	00000001 	andeq	r0, r0, r1
    6788:	00028403 	andeq	r8, r2, r3, lsl #8
    678c:	03960600 	orrseq	r0, r6, #0, 12
    6790:	00000231 	andeq	r0, r0, r1, lsr r2
    6794:	00025b08 	andeq	r5, r2, r8, lsl #22
    6798:	02670f00 	rsbeq	r0, r7, #0, 30
    679c:	02770000 	rsbseq	r0, r7, #0
    67a0:	00100000 	andseq	r0, r0, r0
    67a4:	00026c08 	andeq	r6, r2, r8, lsl #24
    67a8:	02ed0d00 	rsceq	r0, sp, #0, 26
    67ac:	9c060000 	stcls	0, cr0, [r6], {-0}
    67b0:	00027717 	andeq	r7, r2, r7, lsl r7
    67b4:	0f010100 	svceq	0x00010100
    67b8:	000000cd 	andeq	r0, r0, sp, asr #1
    67bc:	00000295 	muleq	r0, r5, r2
    67c0:	8a080010 	bhi	206808 <__ccfg+0x1e6860>
    67c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    67c8:	00000393 	muleq	r0, r3, r3
    67cc:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    67d0:	01000002 	tsteq	r0, r2
    67d4:	01340d01 	teqeq	r4, r1, lsl #26
    67d8:	c3050000 	movwgt	r0, #20480	; 0x5000
    67dc:	0000e30e 	andeq	lr, r0, lr, lsl #6
    67e0:	11010100 	mrsne	r0, (UNDEF: 17)
    67e4:	0000047e 	andeq	r0, r0, lr, ror r4
    67e8:	10016e08 	andne	r6, r1, r8, lsl #28
    67ec:	000002c3 	andeq	r0, r0, r3, asr #5
    67f0:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    67f4:	01120000 	tsteq	r2, r0
    67f8:	000002d5 	ldrdeq	r0, [r0], -r5
    67fc:	0000c113 	andeq	ip, r0, r3, lsl r1
    6800:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    6804:	e0000001 	and	r0, r0, r1
    6808:	10000002 	andne	r0, r0, r2
    680c:	02d50800 	sbcseq	r0, r5, #0, 16
    6810:	44140000 	ldrmi	r0, [r4], #-0
    6814:	08000004 	stmdaeq	r0, {r2}
    6818:	e016017f 	ands	r0, r6, pc, ror r1
    681c:	01000002 	tsteq	r0, r2
    6820:	038b1401 	orreq	r1, fp, #16777216	; 0x1000000
    6824:	82080000 	andhi	r0, r8, #0
    6828:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    682c:	01010000 	mrseq	r0, (UNDEF: 1)
    6830:	00046914 	andeq	r6, r4, r4, lsl r9
    6834:	02d80800 	sbcseq	r0, r8, #0, 16
    6838:	0000e30e 	andeq	lr, r0, lr, lsl #6
    683c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6840:	03030808 	movweq	r0, #14344	; 0x3808
    6844:	00033909 	andeq	r3, r3, r9, lsl #18
    6848:	21f41600 	mvnscs	r1, r0, lsl #12
    684c:	07080000 	streq	r0, [r8, -r0]
    6850:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6854:	16000000 	strne	r0, [r0], -r0
    6858:	0000053f 	andeq	r0, r0, pc, lsr r5
    685c:	08030808 	stmdaeq	r3, {r3, fp}
    6860:	000000f4 	strdeq	r0, [r0], -r4
    6864:	64110004 	ldrvs	r0, [r1], #-4
    6868:	08000002 	stmdaeq	r0, {r1}
    686c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6870:	17000003 	strne	r0, [r0, -r3]
    6874:	0000048d 	andeq	r0, r0, sp, lsl #9
    6878:	030b0830 	movweq	r0, #47152	; 0xb830
    687c:	0003a908 	andeq	sl, r3, r8, lsl #18
    6880:	04861600 	streq	r1, [r6], #1536	; 0x600
    6884:	14080000 	strne	r0, [r8], #-0
    6888:	00c10803 	sbceq	r0, r1, r3, lsl #16
    688c:	16000000 	strne	r0, [r0], -r0
    6890:	000002dc 	ldrdeq	r0, [r0], -ip
    6894:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    6898:	000000c1 	andeq	r0, r0, r1, asr #1
    689c:	04811602 	streq	r1, [r1], #1538	; 0x602
    68a0:	16080000 	strne	r0, [r8], -r0
    68a4:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    68a8:	16040000 	strne	r0, [r4], -r0
    68ac:	00000f3f 	andeq	r0, r0, pc, lsr pc
    68b0:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    68b4:	000000f4 	strdeq	r0, [r0], -r4
    68b8:	043d1608 	ldrteq	r1, [sp], #-1544	; 0xfffff9f8
    68bc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    68c0:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    68c4:	160c0000 	strne	r0, [ip], -r0
    68c8:	000002d7 	ldrdeq	r0, [r0], -r7
    68cc:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    68d0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    68d4:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    68d8:	b9000003 	stmdblt	r0, {r0, r1}
    68dc:	18000003 	stmdane	r0, {r0, r1}
    68e0:	00000088 	andeq	r0, r0, r8, lsl #1
    68e4:	040e0003 	streq	r0, [lr], #-3
    68e8:	00000346 	andeq	r0, r0, r6, asr #6
    68ec:	00049811 	andeq	r9, r4, r1, lsl r8
    68f0:	031c0800 	tsteq	ip, #0, 16
    68f4:	0003461b 	andeq	r4, r3, fp, lsl r6
    68f8:	03811400 	orreq	r1, r1, #0, 8
    68fc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    6900:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    6904:	01010000 	mrseq	r0, (UNDEF: 1)
    6908:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    690c:	c60d0000 	strgt	r0, [sp], -r0
    6910:	01000013 	tsteq	r0, r3, lsl r0
    6914:	01bb0e0a 			; <UNDEFINED> instruction: 0x01bb0e0a
    6918:	01010000 	mrseq	r0, (UNDEF: 1)
    691c:	14a50119 	strtne	r0, [r5], #281	; 0x119
    6920:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6924:	00810105 	addeq	r0, r1, r5, lsl #2
    6928:	16600000 	strbtne	r0, [r0], -r0
    692c:	16c00000 	strbne	r0, [r0], r0
    6930:	9c010000 	stcls	0, cr0, [r1], {-0}
    6934:	00000449 	andeq	r0, r0, r9, asr #8
    6938:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    693c:	c1130e01 	tstgt	r3, r1, lsl #28
    6940:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    6944:	1b000024 	blne	69dc <__exidx_end+0x3d68>
    6948:	00746d66 	rsbseq	r6, r4, r6, ror #26
    694c:	49230e01 	stmdbmi	r3!, {r0, r9, sl, fp}
    6950:	02000004 	andeq	r0, r0, #4
    6954:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6958:	00001416 	andeq	r1, r0, r6, lsl r4
    695c:	81061301 	tsthi	r6, r1, lsl #6
    6960:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6964:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    6968:	01007061 	tsteq	r0, r1, rrx
    696c:	00b50a14 	adcseq	r0, r5, r4, lsl sl
    6970:	91020000 	mrsls	r0, (UNDEF: 2)
    6974:	040e0064 	streq	r0, [lr], #-100	; 0xffffff9c
    6978:	000001c8 	andeq	r0, r0, r8, asr #3
    697c:	00042d00 	andeq	r2, r4, r0, lsl #26
    6980:	46000300 	strmi	r0, [r0], -r0, lsl #6
    6984:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    6988:	00017001 	andeq	r7, r1, r1
    698c:	14ad0c00 	strtne	r0, [sp], #3072	; 0xc00
    6990:	00c00000 	sbceq	r0, r0, r0
    6994:	0c400000 	mareq	acc0, r0, r0
    6998:	00000000 	andeq	r0, r0, r0
    699c:	4cf60000 	ldclmi	0, cr0, [r6]
    69a0:	01020000 	mrseq	r0, (UNDEF: 2)
    69a4:	0003a306 	andeq	sl, r3, r6, lsl #6
    69a8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    69ac:	000003dd 	ldrdeq	r0, [r0], -sp
    69b0:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    69b4:	02000000 	andeq	r0, r0, #0
    69b8:	00980508 	addseq	r0, r8, r8, lsl #10
    69bc:	fc030000 	stc2	0, cr0, [r3], {-0}
    69c0:	02000021 	andeq	r0, r0, #33	; 0x21
    69c4:	004d182e 	subeq	r1, sp, lr, lsr #16
    69c8:	01020000 	mrseq	r0, (UNDEF: 2)
    69cc:	0003a108 	andeq	sl, r3, r8, lsl #2
    69d0:	20ea0300 	rsccs	r0, sl, r0, lsl #6
    69d4:	31020000 	mrscc	r0, (UNDEF: 2)
    69d8:	00006019 	andeq	r6, r0, r9, lsl r0
    69dc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    69e0:	00000271 	andeq	r0, r0, r1, ror r2
    69e4:	0017b303 	andseq	fp, r7, r3, lsl #6
    69e8:	19340200 	ldmdbne	r4!, {r9}
    69ec:	00000073 	andeq	r0, r0, r3, ror r0
    69f0:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    69f4:	02000000 	andeq	r0, r0, #0
    69f8:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    69fc:	04040000 	streq	r0, [r4], #-0
    6a00:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6a04:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6a08:	00000077 	andeq	r0, r0, r7, ror r0
    6a0c:	0015c003 	andseq	ip, r5, r3
    6a10:	12270300 	eorne	r0, r7, #0, 6
    6a14:	00000054 	andeq	r0, r0, r4, asr r0
    6a18:	00008f05 	andeq	r8, r0, r5, lsl #30
    6a1c:	13b80300 			; <UNDEFINED> instruction: 0x13b80300
    6a20:	2b030000 	blcs	c6a28 <__ccfg+0xa6a80>
    6a24:	00004112 	andeq	r4, r0, r2, lsl r1
    6a28:	00a00600 	adceq	r0, r0, r0, lsl #12
    6a2c:	11030000 	mrsne	r0, (UNDEF: 3)
    6a30:	03000016 	movweq	r0, #22
    6a34:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6a38:	b1050000 	mrslt	r0, (UNDEF: 5)
    6a3c:	03000000 	movweq	r0, #0
    6a40:	000002a7 	andeq	r0, r0, r7, lsr #5
    6a44:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    6a48:	07000000 	streq	r0, [r0, -r0]
    6a4c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    6a50:	0000015c 	andeq	r0, r0, ip, asr r1
    6a54:	0002c208 	andeq	ip, r2, r8, lsl #4
    6a58:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    6a5c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a60:	00070101 	andeq	r0, r7, r1, lsl #2
    6a64:	00009108 	andeq	r9, r0, r8, lsl #2
    6a68:	03350300 	teqeq	r5, #0, 6
    6a6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a70:	00060101 	andeq	r0, r6, r1, lsl #2
    6a74:	00029908 	andeq	r9, r2, r8, lsl #18
    6a78:	03360300 	teqeq	r6, #0, 6
    6a7c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a80:	00050101 	andeq	r0, r5, r1, lsl #2
    6a84:	00040c08 	andeq	r0, r4, r8, lsl #24
    6a88:	03370300 	teqeq	r7, #0, 6
    6a8c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a90:	00040101 	andeq	r0, r4, r1, lsl #2
    6a94:	00040508 	andeq	r0, r4, r8, lsl #10
    6a98:	03380300 	teqeq	r8, #0, 6
    6a9c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6aa0:	00000401 	andeq	r0, r0, r1, lsl #8
    6aa4:	0003f609 	andeq	pc, r3, r9, lsl #12
    6aa8:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    6aac:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ab0:	00400901 	subeq	r0, r0, r1, lsl #18
    6ab4:	3c030000 	stccc	0, cr0, [r3], {-0}
    6ab8:	0000a003 	andeq	sl, r0, r3
    6abc:	66090200 	strvs	r0, [r9], -r0, lsl #4
    6ac0:	03000000 	movweq	r0, #0
    6ac4:	00a0033d 	adceq	r0, r0, sp, lsr r3
    6ac8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    6acc:	00000154 	andeq	r0, r0, r4, asr r1
    6ad0:	b1083f03 	tstlt	r8, r3, lsl #30
    6ad4:	04000000 	streq	r0, [r0], #-0
    6ad8:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
    6adc:	41030000 	mrsmi	r0, (UNDEF: 3)
    6ae0:	0000ce03 	andeq	ip, r0, r3, lsl #28
    6ae4:	015c0600 	cmpeq	ip, r0, lsl #12
    6ae8:	b60a0000 	strlt	r0, [sl], -r0
    6aec:	03000002 	movweq	r0, #2
    6af0:	01681a43 	cmneq	r8, r3, asr #20
    6af4:	01010000 	mrseq	r0, (UNDEF: 1)
    6af8:	00030d0a 	andeq	r0, r3, sl, lsl #26
    6afc:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    6b00:	00000189 	andeq	r0, r0, r9, lsl #3
    6b04:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6b08:	0000018f 	andeq	r0, r0, pc, lsl #3
    6b0c:	aa080102 	bge	206f1c <__ccfg+0x1e6f74>
    6b10:	05000003 	streq	r0, [r0, #-3]
    6b14:	0000018f 	andeq	r0, r0, pc, lsl #3
    6b18:	00031b0a 	andeq	r1, r3, sl, lsl #22
    6b1c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    6b20:	00000189 	andeq	r0, r0, r9, lsl #3
    6b24:	08070101 	stmdaeq	r7, {r0, r8}
    6b28:	da098f04 	ble	26a740 <__ccfg+0x24a798>
    6b2c:	09000001 	stmdbeq	r0, {r0}
    6b30:	000002d2 	ldrdeq	r0, [r0], -r2
    6b34:	670b9004 	strvs	r9, [fp, -r4]
    6b38:	00000000 	andeq	r0, r0, r0
    6b3c:	0005ed09 	andeq	lr, r5, r9, lsl #26
    6b40:	08910400 	ldmeq	r1, {sl}
    6b44:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b48:	04710904 	ldrbteq	r0, [r1], #-2308	; 0xfffff6fc
    6b4c:	92040000 	andls	r0, r4, #0
    6b50:	0000ac10 	andeq	sl, r0, r0, lsl ip
    6b54:	03000600 	movweq	r0, #1536	; 0x600
    6b58:	00000413 	andeq	r0, r0, r3, lsl r4
    6b5c:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    6b60:	0c000001 	stceq	0, cr0, [r0], {1}
    6b64:	000001da 	ldrdeq	r0, [r0], -sl
    6b68:	000001f1 	strdeq	r0, [r0], -r1
    6b6c:	360a000d 	strcc	r0, [sl], -sp
    6b70:	04000000 	streq	r0, [r0], #-0
    6b74:	01e60f99 	strexheq	r0, r9, [r6]
    6b78:	01010000 	mrseq	r0, (UNDEF: 1)
    6b7c:	91050107 	tstls	r5, r7, lsl #2
    6b80:	00022909 	andeq	r2, r2, r9, lsl #18
    6b84:	04640800 	strbteq	r0, [r4], #-2048	; 0xfffff800
    6b88:	93050000 	movwls	r0, #20480	; 0x5000
    6b8c:	0000a007 	andeq	sl, r0, r7
    6b90:	01070100 	mrseq	r0, (UNDEF: 23)
    6b94:	00310800 	eorseq	r0, r1, r0, lsl #16
    6b98:	94050000 	strls	r0, [r5], #-0
    6b9c:	0000a003 	andeq	sl, r0, r3
    6ba0:	00010100 	andeq	r0, r1, r0, lsl #2
    6ba4:	84030000 	strhi	r0, [r3], #-0
    6ba8:	05000002 	streq	r0, [r0, #-2]
    6bac:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    6bb0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    6bb4:	0c000002 	stceq	0, cr0, [r0], {2}
    6bb8:	00000235 	andeq	r0, r0, r5, lsr r2
    6bbc:	00000245 	andeq	r0, r0, r5, asr #4
    6bc0:	3a05000d 	bcc	146bfc <__ccfg+0x126c54>
    6bc4:	0a000002 	beq	6bd4 <__exidx_end+0x3f60>
    6bc8:	000002ed 	andeq	r0, r0, sp, ror #5
    6bcc:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    6bd0:	01000002 	tsteq	r0, r2
    6bd4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    6bd8:	02630000 	rsbeq	r0, r3, #0
    6bdc:	000d0000 	andeq	r0, sp, r0
    6be0:	00025805 	andeq	r5, r2, r5, lsl #16
    6be4:	03930a00 	orrseq	r0, r3, #0, 20
    6be8:	06060000 	streq	r0, [r6], -r0
    6bec:	00026313 	andeq	r6, r2, r3, lsl r3
    6bf0:	0a010100 	beq	46ff8 <__ccfg+0x27050>
    6bf4:	00000134 	andeq	r0, r0, r4, lsr r1
    6bf8:	b10ec304 	tstlt	lr, r4, lsl #6
    6bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    6c00:	047e0e01 	ldrbteq	r0, [lr], #-3585	; 0xfffff1ff
    6c04:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    6c08:	02911001 	addseq	r1, r1, #1
    6c0c:	040b0000 	streq	r0, [fp], #-0
    6c10:	00000297 	muleq	r0, r7, r2
    6c14:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    6c18:	8f100000 	svchi	0x00100000
    6c1c:	00000000 	andeq	r0, r0, r0
    6c20:	0001960c 	andeq	r9, r1, ip, lsl #12
    6c24:	0002ae00 	andeq	sl, r2, r0, lsl #28
    6c28:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6c2c:	000002a3 	andeq	r0, r0, r3, lsr #5
    6c30:	00044411 	andeq	r4, r4, r1, lsl r4
    6c34:	017f0700 	cmneq	pc, r0, lsl #14
    6c38:	0002ae16 	andeq	sl, r2, r6, lsl lr
    6c3c:	11010100 	mrsne	r0, (UNDEF: 17)
    6c40:	0000038b 	andeq	r0, r0, fp, lsl #7
    6c44:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    6c48:	000000bd 	strheq	r0, [r0], -sp
    6c4c:	69110101 	ldmdbvs	r1, {r0, r8}
    6c50:	07000004 	streq	r0, [r0, -r4]
    6c54:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    6c58:	01000000 	mrseq	r0, (UNDEF: 0)
    6c5c:	07081201 	streq	r1, [r8, -r1, lsl #4]
    6c60:	07090303 	streq	r0, [r9, -r3, lsl #6]
    6c64:	13000003 	movwne	r0, #3
    6c68:	000021f4 	strdeq	r2, [r0], -r4
    6c6c:	07030707 	streq	r0, [r3, -r7, lsl #14]
    6c70:	0000008f 	andeq	r0, r0, pc, lsl #1
    6c74:	053f1300 	ldreq	r1, [pc, #-768]!	; 697c <__exidx_end+0x3d08>
    6c78:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6c7c:	00c20803 	sbceq	r0, r2, r3, lsl #16
    6c80:	00040000 	andeq	r0, r4, r0
    6c84:	0002640e 	andeq	r6, r2, lr, lsl #8
    6c88:	03090700 	movweq	r0, #38656	; 0x9700
    6c8c:	0002e003 	andeq	lr, r2, r3
    6c90:	048d1400 	streq	r1, [sp], #1024	; 0x400
    6c94:	07300000 	ldreq	r0, [r0, -r0]!
    6c98:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    6c9c:	13000003 	movwne	r0, #3
    6ca0:	00000486 	andeq	r0, r0, r6, lsl #9
    6ca4:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6ca8:	0000008f 	andeq	r0, r0, pc, lsl #1
    6cac:	02dc1300 	sbcseq	r1, ip, #0, 6
    6cb0:	15070000 	strne	r0, [r7, #-0]
    6cb4:	008f0803 	addeq	r0, pc, r3, lsl #16
    6cb8:	13020000 	movwne	r0, #8192	; 0x2000
    6cbc:	00000481 	andeq	r0, r0, r1, lsl #9
    6cc0:	0b031607 	bleq	cc4e4 <__ccfg+0xac53c>
    6cc4:	00000284 	andeq	r0, r0, r4, lsl #5
    6cc8:	0f3f1304 	svceq	0x003f1304
    6ccc:	17070000 	strne	r0, [r7, -r0]
    6cd0:	00c20903 	sbceq	r0, r2, r3, lsl #18
    6cd4:	13080000 	movwne	r0, #32768	; 0x8000
    6cd8:	0000043d 	andeq	r0, r0, sp, lsr r4
    6cdc:	0f031807 	svceq	0x00031807
    6ce0:	00000377 	andeq	r0, r0, r7, ror r3
    6ce4:	02d7130c 	sbcseq	r1, r7, #12, 6	; 0x30000000
    6ce8:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    6cec:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    6cf0:	002c0000 	eoreq	r0, ip, r0
    6cf4:	0003070c 	andeq	r0, r3, ip, lsl #14
    6cf8:	00038700 	andeq	r8, r3, r0, lsl #14
    6cfc:	00881500 	addeq	r1, r8, r0, lsl #10
    6d00:	00030000 	andeq	r0, r3, r0
    6d04:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    6d08:	980e0000 	stmdals	lr, {}	; <UNPREDICTABLE>
    6d0c:	07000004 	streq	r0, [r0, -r4]
    6d10:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6d14:	11000003 	tstne	r0, r3
    6d18:	00000381 	andeq	r0, r0, r1, lsl #7
    6d1c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    6d20:	000003a9 	andeq	r0, r0, r9, lsr #7
    6d24:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6d28:	0000038d 	andeq	r0, r0, sp, lsl #7
    6d2c:	14f70116 	ldrbtne	r0, [r7], #278	; 0x116
    6d30:	1d010000 	stcne	0, cr0, [r1, #-0]
    6d34:	16c00101 	strbne	r0, [r0], r1, lsl #2
    6d38:	17300000 	ldrne	r0, [r0, -r0]!
    6d3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d40:	0000042a 	andeq	r0, r0, sl, lsr #8
    6d44:	0000b817 	andeq	fp, r0, r7, lsl r8
    6d48:	011d0100 	tsteq	sp, r0, lsl #2
    6d4c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6d50:	00002496 	muleq	r0, r6, r4
    6d54:	000f3f18 	andeq	r3, pc, r8, lsl pc	; <UNPREDICTABLE>
    6d58:	011d0100 	tsteq	sp, r0, lsl #2
    6d5c:	0000042a 	andeq	r0, r0, sl, lsr #8
    6d60:	000024bf 			; <UNDEFINED> instruction: 0x000024bf
    6d64:	00150319 	andseq	r0, r5, r9, lsl r3
    6d68:	01300100 	teqeq	r0, r0, lsl #2
    6d6c:	000c281a 	andeq	r2, ip, sl, lsl r8
    6d70:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    6d74:	22010072 	andcs	r0, r1, #114	; 0x72
    6d78:	00042a15 	andeq	r2, r4, r5, lsl sl
    6d7c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    6d80:	1b200000 	blne	806d88 <__ccfg+0x7e6de0>
    6d84:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6d88:	810d2301 	tsthi	sp, r1, lsl #6
    6d8c:	05000000 	streq	r0, [r0, #-0]
    6d90:	00003803 	andeq	r3, r0, r3, lsl #16
    6d94:	14f11820 	ldrbtne	r1, [r1], #2080	; 0x820
    6d98:	24010000 	strcs	r0, [r1], #-0
    6d9c:	00008106 	andeq	r8, r0, r6, lsl #2
    6da0:	0024e900 	eoreq	lr, r4, r0, lsl #18
    6da4:	0b000000 	bleq	6dac <__exidx_end+0x4138>
    6da8:	00019604 	andeq	r9, r1, r4, lsl #12
    6dac:	04400000 	strbeq	r0, [r0], #-0
    6db0:	00030000 	andeq	r0, r3, r0
    6db4:	00001fba 			; <UNDEFINED> instruction: 0x00001fba
    6db8:	01700104 	cmneq	r0, r4, lsl #2
    6dbc:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    6dc0:	c0000015 	andgt	r0, r0, r5, lsl r0
    6dc4:	70000000 	andvc	r0, r0, r0
    6dc8:	0000000c 	andeq	r0, r0, ip
    6dcc:	9b000000 	blls	6dd4 <__exidx_end+0x4160>
    6dd0:	0200004e 	andeq	r0, r0, #78	; 0x4e
    6dd4:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    6dd8:	02020000 	andeq	r0, r2, #0
    6ddc:	0003dd05 	andeq	sp, r3, r5, lsl #26
    6de0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6de4:	0000009d 	muleq	r0, sp, r0
    6de8:	98050802 	stmdals	r5, {r1, fp}
    6dec:	03000000 	movweq	r0, #0
    6df0:	000021fc 	strdeq	r2, [r0], -ip
    6df4:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    6df8:	02000000 	andeq	r0, r0, #0
    6dfc:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    6e00:	ea030000 	b	c6e08 <__ccfg+0xa6e60>
    6e04:	02000020 	andeq	r0, r0, #32
    6e08:	00601931 	rsbeq	r1, r0, r1, lsr r9
    6e0c:	02020000 	andeq	r0, r2, #0
    6e10:	00027107 	andeq	r7, r2, r7, lsl #2
    6e14:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    6e18:	34020000 	strcc	r0, [r2], #-0
    6e1c:	00007319 	andeq	r7, r0, r9, lsl r3
    6e20:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6e24:	00000072 	andeq	r0, r0, r2, ror r0
    6e28:	6d070802 	stcvs	8, cr0, [r7, #-8]
    6e2c:	04000000 	streq	r0, [r0], #-0
    6e30:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6e34:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6e38:	00007707 	andeq	r7, r0, r7, lsl #14
    6e3c:	15c00300 	strbne	r0, [r0, #768]	; 0x300
    6e40:	27030000 	strcs	r0, [r3, -r0]
    6e44:	00005412 	andeq	r5, r0, r2, lsl r4
    6e48:	008f0500 	addeq	r0, pc, r0, lsl #10
    6e4c:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    6e50:	03000013 	movweq	r0, #19
    6e54:	0041122b 	subeq	r1, r1, fp, lsr #4
    6e58:	a0060000 	andge	r0, r6, r0
    6e5c:	03000000 	movweq	r0, #0
    6e60:	00001611 	andeq	r1, r0, r1, lsl r6
    6e64:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    6e68:	05000000 	streq	r0, [r0, #-0]
    6e6c:	000000b1 	strheq	r0, [r0], -r1
    6e70:	0002a703 	andeq	sl, r2, r3, lsl #14
    6e74:	122d0300 	eorne	r0, sp, #0, 6
    6e78:	00000067 	andeq	r0, r0, r7, rrx
    6e7c:	00076203 	andeq	r6, r7, r3, lsl #4
    6e80:	102e0300 	eorne	r0, lr, r0, lsl #6
    6e84:	000000da 	ldrdeq	r0, [r0], -sl
    6e88:	008f0407 	addeq	r0, pc, r7, lsl #8
    6e8c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6e90:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    6e94:	09000001 	stmdbeq	r0, {r0}
    6e98:	000002c2 	andeq	r0, r0, r2, asr #5
    6e9c:	a0073403 	andge	r3, r7, r3, lsl #8
    6ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ea4:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    6ea8:	00000091 	muleq	r0, r1, r0
    6eac:	a0033503 	andge	r3, r3, r3, lsl #10
    6eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6eb4:	09000601 	stmdbeq	r0, {r0, r9, sl}
    6eb8:	00000299 	muleq	r0, r9, r2
    6ebc:	a0033603 	andge	r3, r3, r3, lsl #12
    6ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ec4:	09000501 	stmdbeq	r0, {r0, r8, sl}
    6ec8:	0000040c 	andeq	r0, r0, ip, lsl #8
    6ecc:	a0033703 	andge	r3, r3, r3, lsl #14
    6ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ed4:	09000401 	stmdbeq	r0, {r0, sl}
    6ed8:	00000405 	andeq	r0, r0, r5, lsl #8
    6edc:	a0033803 	andge	r3, r3, r3, lsl #16
    6ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ee4:	0a000004 	beq	6efc <__exidx_end+0x4288>
    6ee8:	000003f6 	strdeq	r0, [r0], -r6
    6eec:	a0073a03 	andge	r3, r7, r3, lsl #20
    6ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ef4:	0000400a 	andeq	r4, r0, sl
    6ef8:	033c0300 	teqeq	ip, #0, 6
    6efc:	000000a0 	andeq	r0, r0, r0, lsr #1
    6f00:	00660a02 	rsbeq	r0, r6, r2, lsl #20
    6f04:	3d030000 	stccc	0, cr0, [r3, #-0]
    6f08:	0000a003 	andeq	sl, r0, r3
    6f0c:	540a0300 	strpl	r0, [sl], #-768	; 0xfffffd00
    6f10:	03000001 	movweq	r0, #1
    6f14:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    6f18:	00040000 	andeq	r0, r4, r0
    6f1c:	00043403 	andeq	r3, r4, r3, lsl #8
    6f20:	03410300 	movteq	r0, #4864	; 0x1300
    6f24:	000000e0 	andeq	r0, r0, r0, ror #1
    6f28:	00016e06 	andeq	r6, r1, r6, lsl #28
    6f2c:	02b60b00 	adcseq	r0, r6, #0, 22
    6f30:	43030000 	movwmi	r0, #12288	; 0x3000
    6f34:	00017a1a 	andeq	r7, r1, sl, lsl sl
    6f38:	0b010100 	bleq	47340 <__ccfg+0x27398>
    6f3c:	0000030d 	andeq	r0, r0, sp, lsl #6
    6f40:	9b0e4503 	blls	398354 <__ccfg+0x3783ac>
    6f44:	01000001 	tsteq	r0, r1
    6f48:	a1040701 	tstge	r4, r1, lsl #14
    6f4c:	02000001 	andeq	r0, r0, #1
    6f50:	03aa0801 			; <UNDEFINED> instruction: 0x03aa0801
    6f54:	a1050000 	mrsge	r0, (UNDEF: 5)
    6f58:	0b000001 	bleq	6f64 <__exidx_end+0x42f0>
    6f5c:	0000031b 	andeq	r0, r0, fp, lsl r3
    6f60:	9b1e4503 	blls	798374 <__ccfg+0x7783cc>
    6f64:	01000001 	tsteq	r0, r1
    6f68:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    6f6c:	01ec098f 	mvneq	r0, pc, lsl #19
    6f70:	d20a0000 	andle	r0, sl, #0
    6f74:	04000002 	streq	r0, [r0], #-2
    6f78:	00670b90 	mlseq	r7, r0, fp, r0
    6f7c:	0a000000 	beq	6f84 <__exidx_end+0x4310>
    6f80:	000005ed 	andeq	r0, r0, sp, ror #11
    6f84:	8f089104 	svchi	0x00089104
    6f88:	04000000 	streq	r0, [r0], #-0
    6f8c:	0004710a 	andeq	r7, r4, sl, lsl #2
    6f90:	10920400 	addsne	r0, r2, r0, lsl #8
    6f94:	000000ac 	andeq	r0, r0, ip, lsr #1
    6f98:	13030006 	movwne	r0, #12294	; 0x3006
    6f9c:	04000004 	streq	r0, [r0], #-4
    6fa0:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    6fa4:	ec0c0000 	stc	0, cr0, [ip], {-0}
    6fa8:	03000001 	movweq	r0, #1
    6fac:	0d000002 	stceq	0, cr0, [r0, #-8]
    6fb0:	00360b00 	eorseq	r0, r6, r0, lsl #22
    6fb4:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    6fb8:	0001f80f 	andeq	pc, r1, pc, lsl #16
    6fbc:	08010100 	stmdaeq	r1, {r8}
    6fc0:	09910501 	ldmibeq	r1, {r0, r8, sl}
    6fc4:	0000023b 	andeq	r0, r0, fp, lsr r2
    6fc8:	00046409 	andeq	r6, r4, r9, lsl #8
    6fcc:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    6fd0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6fd4:	00010701 	andeq	r0, r1, r1, lsl #14
    6fd8:	00003109 	andeq	r3, r0, r9, lsl #2
    6fdc:	03940500 	orrseq	r0, r4, #0, 10
    6fe0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6fe4:	00000101 	andeq	r0, r0, r1, lsl #2
    6fe8:	02840300 	addeq	r0, r4, #0, 6
    6fec:	96050000 	strls	r0, [r5], -r0
    6ff0:	00021103 	andeq	r1, r2, r3, lsl #2
    6ff4:	023b0500 	eorseq	r0, fp, #0, 10
    6ff8:	470c0000 	strmi	r0, [ip, -r0]
    6ffc:	57000002 	strpl	r0, [r0, -r2]
    7000:	0d000002 	stceq	0, cr0, [r0, #-8]
    7004:	024c0500 	subeq	r0, ip, #0, 10
    7008:	ed0b0000 	stc	0, cr0, [fp, #-0]
    700c:	05000002 	streq	r0, [r0, #-2]
    7010:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    7014:	01010000 	mrseq	r0, (UNDEF: 1)
    7018:	00009b0c 	andeq	r9, r0, ip, lsl #22
    701c:	00027500 	andeq	r7, r2, r0, lsl #10
    7020:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7024:	0000026a 	andeq	r0, r0, sl, ror #4
    7028:	0003930b 	andeq	r9, r3, fp, lsl #6
    702c:	13060600 	movwne	r0, #26112	; 0x6600
    7030:	00000275 	andeq	r0, r0, r5, ror r2
    7034:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
    7038:	04000001 	streq	r0, [r0], #-1
    703c:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    7040:	01010000 	mrseq	r0, (UNDEF: 1)
    7044:	00047e0e 	andeq	r7, r4, lr, lsl #28
    7048:	016e0700 	cmneq	lr, r0, lsl #14
    704c:	0002a310 	andeq	sl, r2, r0, lsl r3
    7050:	a9040700 	stmdbge	r4, {r8, r9, sl}
    7054:	0f000002 	svceq	0x00000002
    7058:	0002b501 	andeq	fp, r2, r1, lsl #10
    705c:	008f1000 	addeq	r1, pc, r0
    7060:	0c000000 	stceq	0, cr0, [r0], {-0}
    7064:	000001a8 	andeq	r0, r0, r8, lsr #3
    7068:	000002c0 	andeq	r0, r0, r0, asr #5
    706c:	b505000d 	strlt	r0, [r5, #-13]
    7070:	11000002 	tstne	r0, r2
    7074:	00000444 	andeq	r0, r0, r4, asr #8
    7078:	16017f07 	strne	r7, [r1], -r7, lsl #30
    707c:	000002c0 	andeq	r0, r0, r0, asr #5
    7080:	8b110101 	blhi	44748c <__ccfg+0x4274e4>
    7084:	07000003 	streq	r0, [r0, -r3]
    7088:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    708c:	01000000 	mrseq	r0, (UNDEF: 0)
    7090:	04691101 	strbteq	r1, [r9], #-257	; 0xfffffeff
    7094:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    7098:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    709c:	01010000 	mrseq	r0, (UNDEF: 1)
    70a0:	03070812 	movweq	r0, #30738	; 0x7812
    70a4:	03190903 	tsteq	r9, #49152	; 0xc000
    70a8:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
    70ac:	07000021 	streq	r0, [r0, -r1, lsr #32]
    70b0:	8f070307 	svchi	0x00070307
    70b4:	00000000 	andeq	r0, r0, r0
    70b8:	00053f13 	andeq	r3, r5, r3, lsl pc
    70bc:	03080700 	movweq	r0, #34560	; 0x8700
    70c0:	0000c208 	andeq	ip, r0, r8, lsl #4
    70c4:	0e000400 	cfcpyseq	mvf0, mvf0
    70c8:	00000264 	andeq	r0, r0, r4, ror #4
    70cc:	03030907 	movweq	r0, #14599	; 0x3907
    70d0:	000002f2 	strdeq	r0, [r0], -r2
    70d4:	00048d14 	andeq	r8, r4, r4, lsl sp
    70d8:	0b073000 	bleq	1d30e0 <__ccfg+0x1b3138>
    70dc:	03890803 	orreq	r0, r9, #196608	; 0x30000
    70e0:	86130000 	ldrhi	r0, [r3], -r0
    70e4:	07000004 	streq	r0, [r0, -r4]
    70e8:	8f080314 	svchi	0x00080314
    70ec:	00000000 	andeq	r0, r0, r0
    70f0:	0002dc13 	andeq	sp, r2, r3, lsl ip
    70f4:	03150700 	tsteq	r5, #0, 14
    70f8:	00008f08 	andeq	r8, r0, r8, lsl #30
    70fc:	81130200 	tsthi	r3, r0, lsl #4
    7100:	07000004 	streq	r0, [r0, -r4]
    7104:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    7108:	04000002 	streq	r0, [r0], #-2
    710c:	000f3f13 	andeq	r3, pc, r3, lsl pc	; <UNPREDICTABLE>
    7110:	03170700 	tsteq	r7, #0, 14
    7114:	0000c209 	andeq	ip, r0, r9, lsl #4
    7118:	3d130800 	ldccc	8, cr0, [r3, #-0]
    711c:	07000004 	streq	r0, [r0, -r4]
    7120:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7124:	0c000003 	stceq	0, cr0, [r0], {3}
    7128:	0002d713 	andeq	sp, r2, r3, lsl r7
    712c:	03190700 	tsteq	r9, #0, 14
    7130:	00039915 	andeq	r9, r3, r5, lsl r9
    7134:	0c002c00 	stceq	12, cr2, [r0], {-0}
    7138:	00000319 	andeq	r0, r0, r9, lsl r3
    713c:	00000399 	muleq	r0, r9, r3
    7140:	00008815 	andeq	r8, r0, r5, lsl r8
    7144:	07000300 	streq	r0, [r0, -r0, lsl #6]
    7148:	00032604 	andeq	r2, r3, r4, lsl #12
    714c:	04980e00 	ldreq	r0, [r8], #3584	; 0xe00
    7150:	1c070000 	stcne	0, cr0, [r7], {-0}
    7154:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    7158:	81110000 	tsthi	r1, r0
    715c:	07000003 	streq	r0, [r0, -r3]
    7160:	bb14031e 	bllt	507de0 <__ccfg+0x4e7e38>
    7164:	01000003 	tsteq	r0, r3
    7168:	9f040701 	svcls	0x00040701
    716c:	16000003 	strne	r0, [r0], -r3
    7170:	000013c6 	andeq	r1, r0, r6, asr #7
    7174:	9b070d01 	blls	1ca580 <__ccfg+0x1aa5d8>
    7178:	01000001 	tsteq	r0, r1
    717c:	00400305 	subeq	r0, r0, r5, lsl #6
    7180:	01172000 	tsteq	r7, r0
    7184:	0000150e 	andeq	r1, r0, lr, lsl #10
    7188:	01012301 	tsteq	r1, r1, lsl #6
    718c:	00001730 	andeq	r1, r0, r0, lsr r7
    7190:	0000184c 	andeq	r1, r0, ip, asr #16
    7194:	b8189c01 	ldmdalt	r8, {r0, sl, fp, ip, pc}
    7198:	01000000 	mrseq	r0, (UNDEF: 0)
    719c:	008f0123 	addeq	r0, pc, r3, lsr #2
    71a0:	24fc0000 	ldrbtcs	r0, [ip], #0
    71a4:	3f190000 	svccc	0x00190000
    71a8:	0100000f 	tsteq	r0, pc
    71ac:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    71b0:	251a0000 	ldrcs	r0, [sl, #-0]
    71b4:	501a0000 	andspl	r0, sl, r0
    71b8:	1b00000c 	blne	71f0 <__exidx_end+0x457c>
    71bc:	00727470 	rsbseq	r7, r2, r0, ror r4
    71c0:	9b0f2801 	blls	3d11cc <__ccfg+0x3b1224>
    71c4:	05000001 	streq	r0, [r0, #-1]
    71c8:	00004803 	andeq	r4, r0, r3, lsl #16
    71cc:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    71d0:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    71d4:	0000810d 	andeq	r8, r0, sp, lsl #2
    71d8:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    71dc:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    71e0:	000014f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    71e4:	81062a01 	tsthi	r6, r1, lsl #20
    71e8:	70000000 	andvc	r0, r0, r0
    71ec:	00000025 	andeq	r0, r0, r5, lsr #32
    71f0:	05f00000 	ldrbeq	r0, [r0, #0]!
    71f4:	00030000 	andeq	r0, r3, r0
    71f8:	00002132 	andeq	r2, r0, r2, lsr r1
    71fc:	01700104 	cmneq	r0, r4, lsl #2
    7200:	5c0c0000 	stcpl	0, cr0, [ip], {-0}
    7204:	c0000015 	andgt	r0, r0, r5, lsl r0
    7208:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    720c:	0000000c 	andeq	r0, r0, ip
    7210:	ea000000 	b	7218 <__exidx_end+0x45a4>
    7214:	02000050 	andeq	r0, r0, #80	; 0x50
    7218:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    721c:	02020000 	andeq	r0, r2, #0
    7220:	0003dd05 	andeq	sp, r3, r5, lsl #26
    7224:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7228:	0000009d 	muleq	r0, sp, r0
    722c:	98050802 	stmdals	r5, {r1, fp}
    7230:	03000000 	movweq	r0, #0
    7234:	000021fc 	strdeq	r2, [r0], -ip
    7238:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    723c:	02000000 	andeq	r0, r0, #0
    7240:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    7244:	ea030000 	b	c724c <__ccfg+0xa72a4>
    7248:	02000020 	andeq	r0, r0, #32
    724c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7250:	02020000 	andeq	r0, r2, #0
    7254:	00027107 	andeq	r7, r2, r7, lsl #2
    7258:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    725c:	34020000 	strcc	r0, [r2], #-0
    7260:	00007319 	andeq	r7, r0, r9, lsl r3
    7264:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7268:	00000072 	andeq	r0, r0, r2, ror r0
    726c:	6d070802 	stcvs	8, cr0, [r7, #-8]
    7270:	04000000 	streq	r0, [r0], #-0
    7274:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7278:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    727c:	00007707 	andeq	r7, r0, r7, lsl #14
    7280:	0b460300 	bleq	1187e88 <__ccfg+0x1167ee0>
    7284:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    7288:	00009b1b 	andeq	r9, r0, fp, lsl fp
    728c:	0a5c0500 	beq	1708694 <__ccfg+0x16e86ec>
    7290:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7294:	0000b300 	andeq	fp, r0, r0, lsl #6
    7298:	0bfc0600 	bleq	fff08aa0 <_estack+0xdff03aa0>
    729c:	00b30000 	adcseq	r0, r3, r0
    72a0:	01000000 	mrseq	r0, (UNDEF: 0)
    72a4:	03040700 	movweq	r0, #18176	; 0x4700
    72a8:	00000a5e 	andeq	r0, r0, lr, asr sl
    72ac:	8f186303 	svchi	0x00186303
    72b0:	03000000 	movweq	r0, #0
    72b4:	000015c0 	andeq	r1, r0, r0, asr #11
    72b8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    72bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72c0:	000000c1 	andeq	r0, r0, r1, asr #1
    72c4:	0013b803 	andseq	fp, r3, r3, lsl #16
    72c8:	122b0400 	eorne	r0, fp, #0, 8
    72cc:	00000041 	andeq	r0, r0, r1, asr #32
    72d0:	0000d209 	andeq	sp, r0, r9, lsl #4
    72d4:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    72d8:	2c040000 	stccs	0, cr0, [r4], {-0}
    72dc:	00006712 	andeq	r6, r0, r2, lsl r7
    72e0:	00e30800 	rsceq	r0, r3, r0, lsl #16
    72e4:	a7030000 	strge	r0, [r3, -r0]
    72e8:	04000002 	streq	r0, [r0], #-2
    72ec:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    72f0:	62030000 	andvs	r0, r3, #0
    72f4:	04000007 	streq	r0, [r0], #-7
    72f8:	010c102e 	tsteq	ip, lr, lsr #32
    72fc:	040a0000 	streq	r0, [sl], #-0
    7300:	000000c1 	andeq	r0, r0, r1, asr #1
    7304:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    7308:	0001a009 	andeq	sl, r1, r9
    730c:	02c20c00 	sbceq	r0, r2, #0, 24
    7310:	34040000 	strcc	r0, [r4], #-0
    7314:	0000d207 	andeq	sp, r0, r7, lsl #4
    7318:	07010100 	streq	r0, [r1, -r0, lsl #2]
    731c:	00910c00 	addseq	r0, r1, r0, lsl #24
    7320:	35040000 	strcc	r0, [r4, #-0]
    7324:	0000d203 	andeq	sp, r0, r3, lsl #4
    7328:	06010100 	streq	r0, [r1], -r0, lsl #2
    732c:	02990c00 	addseq	r0, r9, #0, 24
    7330:	36040000 	strcc	r0, [r4], -r0
    7334:	0000d203 	andeq	sp, r0, r3, lsl #4
    7338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    733c:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    7340:	37040000 	strcc	r0, [r4, -r0]
    7344:	0000d203 	andeq	sp, r0, r3, lsl #4
    7348:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    734c:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    7350:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7354:	0000d203 	andeq	sp, r0, r3, lsl #4
    7358:	00040100 	andeq	r0, r4, r0, lsl #2
    735c:	03f60d00 	mvnseq	r0, #0, 26
    7360:	3a040000 	bcc	107368 <__ccfg+0xe73c0>
    7364:	0000d207 	andeq	sp, r0, r7, lsl #4
    7368:	400d0100 	andmi	r0, sp, r0, lsl #2
    736c:	04000000 	streq	r0, [r0], #-0
    7370:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7374:	0d020000 	stceq	0, cr0, [r2, #-0]
    7378:	00000066 	andeq	r0, r0, r6, rrx
    737c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7380:	03000000 	movweq	r0, #0
    7384:	0001540d 	andeq	r5, r1, sp, lsl #8
    7388:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    738c:	000000e3 	andeq	r0, r0, r3, ror #1
    7390:	34030004 	strcc	r0, [r3], #-4
    7394:	04000004 	streq	r0, [r0], #-4
    7398:	01120341 	tsteq	r2, r1, asr #6
    739c:	a0090000 	andge	r0, r9, r0
    73a0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    73a4:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    73a8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    73ac:	01000001 	tsteq	r0, r1
    73b0:	030d0e01 	movweq	r0, #56833	; 0xde01
    73b4:	45040000 	strmi	r0, [r4, #-0]
    73b8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    73bc:	0a010100 	beq	477c4 <__ccfg+0x2781c>
    73c0:	0001d304 	andeq	sp, r1, r4, lsl #6
    73c4:	08010200 	stmdaeq	r1, {r9}
    73c8:	000003aa 	andeq	r0, r0, sl, lsr #7
    73cc:	0001d308 	andeq	sp, r1, r8, lsl #6
    73d0:	031b0e00 	tsteq	fp, #0, 28
    73d4:	45040000 	strmi	r0, [r4, #-0]
    73d8:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    73dc:	0b010100 	bleq	477e4 <__ccfg+0x2783c>
    73e0:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    73e4:	0000021e 	andeq	r0, r0, lr, lsl r2
    73e8:	0002d20d 	andeq	sp, r2, sp, lsl #4
    73ec:	0b900500 	bleq	fe4087f4 <_estack+0xde4037f4>
    73f0:	00000067 	andeq	r0, r0, r7, rrx
    73f4:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
    73f8:	91050000 	mrsls	r0, (UNDEF: 5)
    73fc:	0000c108 	andeq	ip, r0, r8, lsl #2
    7400:	710d0400 	tstvc	sp, r0, lsl #8
    7404:	05000004 	streq	r0, [r0, #-4]
    7408:	00de1092 	smullseq	r1, lr, r2, r0
    740c:	00060000 	andeq	r0, r6, r0
    7410:	00041303 	andeq	r1, r4, r3, lsl #6
    7414:	03930500 	orrseq	r0, r3, #0, 10
    7418:	000001ed 	andeq	r0, r0, sp, ror #3
    741c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    7420:	00023500 	andeq	r3, r2, r0, lsl #10
    7424:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    7428:	00000036 	andeq	r0, r0, r6, lsr r0
    742c:	2a0f9905 	bcs	3ed848 <__ccfg+0x3cd8a0>
    7430:	01000002 	tsteq	r0, r2
    7434:	06010b01 	streq	r0, [r1], -r1, lsl #22
    7438:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    743c:	640c0000 	strvs	r0, [ip], #-0
    7440:	06000004 	streq	r0, [r0], -r4
    7444:	00d20793 	smullseq	r0, r2, r3, r7
    7448:	07010000 	streq	r0, [r1, -r0]
    744c:	310c0001 	tstcc	ip, r1
    7450:	06000000 	streq	r0, [r0], -r0
    7454:	00d20394 	smullseq	r0, r2, r4, r3
    7458:	01010000 	mrseq	r0, (UNDEF: 1)
    745c:	03000000 	movweq	r0, #0
    7460:	00000284 	andeq	r0, r0, r4, lsl #5
    7464:	43039606 	movwmi	r9, #13830	; 0x3606
    7468:	08000002 	stmdaeq	r0, {r1}
    746c:	0000026d 	andeq	r0, r0, sp, ror #4
    7470:	0002790f 	andeq	r7, r2, pc, lsl #18
    7474:	00028900 	andeq	r8, r2, r0, lsl #18
    7478:	08001000 	stmdaeq	r0, {ip}
    747c:	0000027e 	andeq	r0, r0, lr, ror r2
    7480:	0002ed0e 	andeq	lr, r2, lr, lsl #26
    7484:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7488:	00000289 	andeq	r0, r0, r9, lsl #5
    748c:	cd0f0101 	stfgts	f0, [pc, #-4]	; 7490 <__exidx_end+0x481c>
    7490:	a7000000 	strge	r0, [r0, -r0]
    7494:	10000002 	andne	r0, r0, r2
    7498:	029c0800 	addseq	r0, ip, #0, 16
    749c:	930e0000 	movwls	r0, #57344	; 0xe000
    74a0:	07000003 	streq	r0, [r0, -r3]
    74a4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    74a8:	01010000 	mrseq	r0, (UNDEF: 1)
    74ac:	0001340e 	andeq	r3, r1, lr, lsl #8
    74b0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    74b4:	000000e3 	andeq	r0, r0, r3, ror #1
    74b8:	7e110101 	mufvcs	f0, f1, f1
    74bc:	08000004 	stmdaeq	r0, {r2}
    74c0:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    74c4:	0a000002 	beq	74d4 <__exidx_end+0x4860>
    74c8:	0002db04 	andeq	sp, r2, r4, lsl #22
    74cc:	e7011200 	str	r1, [r1, -r0, lsl #4]
    74d0:	13000002 	movwne	r0, #2
    74d4:	000000c1 	andeq	r0, r0, r1, asr #1
    74d8:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    74dc:	02f20000 	rscseq	r0, r2, #0
    74e0:	00100000 	andseq	r0, r0, r0
    74e4:	0002e708 	andeq	lr, r2, r8, lsl #14
    74e8:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    74ec:	7f080000 	svcvc	0x00080000
    74f0:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    74f4:	01010000 	mrseq	r0, (UNDEF: 1)
    74f8:	00038b14 	andeq	r8, r3, r4, lsl fp
    74fc:	01820800 	orreq	r0, r2, r0, lsl #16
    7500:	0000ef14 	andeq	lr, r0, r4, lsl pc
    7504:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7508:	00000469 	andeq	r0, r0, r9, ror #8
    750c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7510:	000000e3 	andeq	r0, r0, r3, ror #1
    7514:	08150101 	ldmdaeq	r5, {r0, r8}
    7518:	09030308 	stmdbeq	r3, {r3, r8, r9}
    751c:	0000034b 	andeq	r0, r0, fp, asr #6
    7520:	0021f416 	eoreq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    7524:	03070800 	movweq	r0, #30720	; 0x7800
    7528:	0000c107 	andeq	ip, r0, r7, lsl #2
    752c:	3f160000 	svccc	0x00160000
    7530:	08000005 	stmdaeq	r0, {r0, r2}
    7534:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7538:	04000000 	streq	r0, [r0], #-0
    753c:	02641100 	rsbeq	r1, r4, #0, 2
    7540:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7544:	03240303 			; <UNDEFINED> instruction: 0x03240303
    7548:	8d170000 	ldchi	0, cr0, [r7, #-0]
    754c:	30000004 	andcc	r0, r0, r4
    7550:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7554:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7558:	00048616 	andeq	r8, r4, r6, lsl r6
    755c:	03140800 	tsteq	r4, #0, 16
    7560:	0000c108 	andeq	ip, r0, r8, lsl #2
    7564:	dc160000 	ldcle	0, cr0, [r6], {-0}
    7568:	08000002 	stmdaeq	r0, {r1}
    756c:	c1080315 	tstgt	r8, r5, lsl r3
    7570:	02000000 	andeq	r0, r0, #0
    7574:	00048116 	andeq	r8, r4, r6, lsl r1
    7578:	03160800 	tsteq	r6, #0, 16
    757c:	0002c80b 	andeq	ip, r2, fp, lsl #16
    7580:	3f160400 	svccc	0x00160400
    7584:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7588:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    758c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7590:	00043d16 	andeq	r3, r4, r6, lsl sp
    7594:	03180800 	tsteq	r8, #0, 16
    7598:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    759c:	d7160c00 	ldrle	r0, [r6, -r0, lsl #24]
    75a0:	08000002 	stmdaeq	r0, {r1}
    75a4:	cb150319 	blgt	548210 <__ccfg+0x528268>
    75a8:	2c000003 	stccs	0, cr0, [r0], {3}
    75ac:	034b0f00 	movteq	r0, #48896	; 0xbf00
    75b0:	03cb0000 	biceq	r0, fp, #0
    75b4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    75b8:	03000000 	movweq	r0, #0
    75bc:	58040a00 	stmdapl	r4, {r9, fp}
    75c0:	11000003 	tstne	r0, r3
    75c4:	00000498 	muleq	r0, r8, r4
    75c8:	1b031c08 	blne	ce5f0 <__ccfg+0xae648>
    75cc:	00000358 	andeq	r0, r0, r8, asr r3
    75d0:	00038114 	andeq	r8, r3, r4, lsl r1
    75d4:	031e0800 	tsteq	lr, #0, 16
    75d8:	0003ed14 	andeq	lr, r3, r4, lsl sp
    75dc:	0a010100 	beq	479e4 <__ccfg+0x27a3c>
    75e0:	0003d104 	andeq	sp, r3, r4, lsl #2
    75e4:	b2011900 	andlt	r1, r1, #0, 18
    75e8:	01000015 	tsteq	r0, r5, lsl r0
    75ec:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    75f0:	9c000001 	stcls	0, cr0, [r0], {1}
    75f4:	ec00001a 	stc	0, cr0, [r0], {26}
    75f8:	0100001a 	tsteq	r0, sl, lsl r0
    75fc:	0004689c 	muleq	r4, ip, r8
    7600:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    7604:	91010073 	tstls	r1, r3, ror r0
    7608:	0001cd14 	andeq	ip, r1, r4, lsl sp
    760c:	00258e00 	eoreq	r8, r5, r0, lsl #28
    7610:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7614:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    7618:	00000468 	andeq	r0, r0, r8, ror #8
    761c:	000025d8 	ldrdeq	r2, [r0], -r8
    7620:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    7624:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    7628:	17000000 	strne	r0, [r0, -r0]
    762c:	1b000026 	blne	76cc <__exidx_end+0x4a58>
    7630:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    7634:	c1079301 	tstgt	r7, r1, lsl #6
    7638:	4b000000 	blmi	7640 <__exidx_end+0x49cc>
    763c:	1b000026 	blne	76dc <__exidx_end+0x4a68>
    7640:	93010064 	movwls	r0, #4196	; 0x1064
    7644:	0000c10c 	andeq	ip, r0, ip, lsl #2
    7648:	00266900 	eoreq	r6, r6, r0, lsl #18
    764c:	159a1c00 	ldrne	r1, [sl, #3072]	; 0xc00
    7650:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    7654:	001ac601 	andseq	ip, sl, r1, lsl #12
    7658:	040a0000 	streq	r0, [sl], #-0
    765c:	000001da 	ldrdeq	r0, [r0], -sl
    7660:	15a5011d 	strne	r0, [r5, #285]!	; 0x11d
    7664:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7668:	00c10106 	sbceq	r0, r1, r6, lsl #2
    766c:	186c0000 	stmdane	ip!, {}^	; <UNPREDICTABLE>
    7670:	1a9c0000 	bne	fe707678 <_estack+0xde702678>
    7674:	9c010000 	stcls	0, cr0, [r1], {-0}
    7678:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    767c:	1a080100 	bne	207a84 <__ccfg+0x1e7adc>
    7680:	000001cd 	andeq	r0, r0, sp, asr #3
    7684:	0000267c 	andeq	r2, r0, ip, ror r6
    7688:	01006e1a 	tsteq	r0, sl, lsl lr
    768c:	00c12408 	sbceq	r2, r1, r8, lsl #8
    7690:	268f0000 	strcs	r0, [pc], r0
    7694:	661a0000 	ldrvs	r0, [sl], -r0
    7698:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    769c:	00046833 	andeq	r6, r4, r3, lsr r8
    76a0:	0026a200 	eoreq	sl, r6, r0, lsl #4
    76a4:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    76a8:	3f080100 	svccc	0x00080100
    76ac:	000000b5 	strheq	r0, [r0], -r5
    76b0:	000026cb 	andeq	r2, r0, fp, asr #13
    76b4:	0100631b 	tsteq	r0, fp, lsl r3
    76b8:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    76bc:	276d0000 	strbcs	r0, [sp, -r0]!
    76c0:	641e0000 	ldrvs	r0, [lr], #-0
    76c4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    76c8:	000000c1 	andeq	r0, r0, r1, asr #1
    76cc:	23549104 	cmpcs	r4, #4, 2
    76d0:	15a01f06 	strne	r1, [r0, #3846]!	; 0xf06
    76d4:	0d010000 	stceq	0, cr0, [r1, #-0]
    76d8:	184c0107 	stmdane	ip, {r0, r1, r2, r8}^
    76dc:	186c0000 	stmdane	ip!, {}^	; <UNPREDICTABLE>
    76e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    76e4:	23007c05 	movwcs	r7, #3077	; 0xc05
    76e8:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    76ec:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    76f0:	120d0100 	andne	r0, sp, #0, 2
    76f4:	000000c1 	andeq	r0, r0, r1, asr #1
    76f8:	21005001 	tstcs	r0, r1
    76fc:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    7700:	a6018801 	strge	r8, [r1], -r1, lsl #16
    7704:	21000018 	tstcs	r0, r8, lsl r0
    7708:	00746552 	rsbseq	r6, r4, r2, asr r5
    770c:	08018b01 	stmdaeq	r1, {r0, r8, r9, fp, pc}
    7710:	22000019 	andcs	r0, r0, #25
    7714:	00000ca8 	andeq	r0, r0, r8, lsr #25
    7718:	00000545 	andeq	r0, r0, r5, asr #10
    771c:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    7720:	0a3a0100 	beq	e87b28 <__ccfg+0xe67b80>
    7724:	000000c1 	andeq	r0, r0, r1, asr #1
    7728:	0100691b 	tsteq	r0, fp, lsl r9
    772c:	0081133a 	addeq	r1, r1, sl, lsr r3
    7730:	28530000 	ldmdacs	r3, {}^	; <UNPREDICTABLE>
    7734:	22000000 	andcs	r0, r0, #0
    7738:	00000c80 	andeq	r0, r0, r0, lsl #25
    773c:	0000056d 	andeq	r0, r0, sp, ror #10
    7740:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    7744:	0a460100 	beq	1187b4c <__ccfg+0x1167ba4>
    7748:	000000c1 	andeq	r0, r0, r1, asr #1
    774c:	00002866 	andeq	r2, r0, r6, ror #16
    7750:	0100691b 	tsteq	r0, fp, lsl r9
    7754:	00c10f46 	sbceq	r0, r1, r6, asr #30
    7758:	288f0000 	stmcs	pc, {}	; <UNPREDICTABLE>
    775c:	22000000 	andcs	r0, r0, #0
    7760:	00000ce0 	andeq	r0, r0, r0, ror #25
    7764:	00000595 	muleq	r0, r5, r5
    7768:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    776c:	0c550100 	ldfeqe	f0, [r5], {-0}
    7770:	000000e3 	andeq	r0, r0, r3, ror #1
    7774:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
    7778:	0100691b 	tsteq	r0, fp, lsl r9
    777c:	00e31155 	rsceq	r1, r3, r5, asr r1
    7780:	28cb0000 	stmiacs	fp, {}^	; <UNPREDICTABLE>
    7784:	24000000 	strcs	r0, [r0], #-0
    7788:	00001a2a 	andeq	r1, r0, sl, lsr #20
    778c:	00001a54 	andeq	r1, r0, r4, asr sl
    7790:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    7794:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    7798:	0c600100 	stfeqe	f0, [r0], #-0
    779c:	000000e3 	andeq	r0, r0, r3, ror #1
    77a0:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    77a4:	0a610100 	beq	1847bac <__ccfg+0x1827c04>
    77a8:	00000081 	andeq	r0, r0, r1, lsl #1
    77ac:	000028f4 	strdeq	r2, [r0], -r4
    77b0:	0cc82200 	sfmeq	f2, 2, [r8], {0}
    77b4:	05d90000 	ldrbeq	r0, [r9]
    77b8:	761b0000 	ldrvc	r0, [fp], -r0
    77bc:	01006c61 	tsteq	r0, r1, ror #24
    77c0:	00c10a71 	sbceq	r0, r1, r1, ror sl
    77c4:	29070000 	stmdbcs	r7, {}	; <UNPREDICTABLE>
    77c8:	25000000 	strcs	r0, [r0, #-0]
    77cc:	00001a72 	andeq	r1, r0, r2, ror sl
    77d0:	00001a8e 	andeq	r1, r0, lr, lsl #21
    77d4:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    77d8:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    77dc:	27000001 	strcs	r0, [r0, -r1]
    77e0:	00000029 	andeq	r0, r0, r9, lsr #32
    77e4:	058f0000 	streq	r0, [pc]	; 77ec <__exidx_end+0x4b78>
    77e8:	00030000 	andeq	r0, r3, r0
    77ec:	00002344 	andeq	r2, r0, r4, asr #6
    77f0:	01700104 	cmneq	r0, r4, lsl #2
    77f4:	c50c0000 	strgt	r0, [ip, #-0]
    77f8:	c0000015 	andgt	r0, r0, r5, lsl r0
    77fc:	a0000000 	andge	r0, r0, r0
    7800:	0000000d 	andeq	r0, r0, sp
    7804:	ab000000 	blge	780c <__exidx_end+0x4b98>
    7808:	02000054 	andeq	r0, r0, #84	; 0x54
    780c:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    7810:	02020000 	andeq	r0, r2, #0
    7814:	0003dd05 	andeq	sp, r3, r5, lsl #26
    7818:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    781c:	0000009d 	muleq	r0, sp, r0
    7820:	98050802 	stmdals	r5, {r1, fp}
    7824:	03000000 	movweq	r0, #0
    7828:	000021fc 	strdeq	r2, [r0], -ip
    782c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7830:	02000000 	andeq	r0, r0, #0
    7834:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    7838:	ea030000 	b	c7840 <__ccfg+0xa7898>
    783c:	02000020 	andeq	r0, r0, #32
    7840:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7844:	02020000 	andeq	r0, r2, #0
    7848:	00027107 	andeq	r7, r2, r7, lsl #2
    784c:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    7850:	34020000 	strcc	r0, [r2], #-0
    7854:	00007319 	andeq	r7, r0, r9, lsl r3
    7858:	07040200 	streq	r0, [r4, -r0, lsl #4]
    785c:	00000072 	andeq	r0, r0, r2, ror r0
    7860:	6d070802 	stcvs	8, cr0, [r7, #-8]
    7864:	04000000 	streq	r0, [r0], #-0
    7868:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    786c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7870:	00007707 	andeq	r7, r0, r7, lsl #14
    7874:	0b460300 	bleq	118847c <__ccfg+0x11684d4>
    7878:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    787c:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7880:	0a5c0500 	beq	1708c88 <__ccfg+0x16e8ce0>
    7884:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7888:	0000b300 	andeq	fp, r0, r0, lsl #6
    788c:	0bfc0600 	bleq	fff09094 <_estack+0xdff04094>
    7890:	00b30000 	adcseq	r0, r3, r0
    7894:	01000000 	mrseq	r0, (UNDEF: 0)
    7898:	03040700 	movweq	r0, #18176	; 0x4700
    789c:	00000a5e 	andeq	r0, r0, lr, asr sl
    78a0:	8f186303 	svchi	0x00186303
    78a4:	03000000 	movweq	r0, #0
    78a8:	000003fd 	strdeq	r0, [r0], -sp
    78ac:	41122604 	tstmi	r2, r4, lsl #12
    78b0:	03000000 	movweq	r0, #0
    78b4:	000015c0 	andeq	r1, r0, r0, asr #11
    78b8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    78bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    78c0:	000000cd 	andeq	r0, r0, sp, asr #1
    78c4:	0013b803 	andseq	fp, r3, r3, lsl #16
    78c8:	122b0400 	eorne	r0, fp, #0, 8
    78cc:	00000041 	andeq	r0, r0, r1, asr #32
    78d0:	0000de09 	andeq	sp, r0, r9, lsl #28
    78d4:	16110300 	ldrne	r0, [r1], -r0, lsl #6
    78d8:	2c040000 	stccs	0, cr0, [r4], {-0}
    78dc:	00006712 	andeq	r6, r0, r2, lsl r7
    78e0:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    78e4:	a7030000 	strge	r0, [r3, -r0]
    78e8:	04000002 	streq	r0, [r0], #-2
    78ec:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    78f0:	040a0000 	streq	r0, [sl], #-0
    78f4:	000000cd 	andeq	r0, r0, sp, asr #1
    78f8:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    78fc:	0001a009 	andeq	sl, r1, r9
    7900:	02c20c00 	sbceq	r0, r2, #0, 24
    7904:	34040000 	strcc	r0, [r4], #-0
    7908:	0000de07 	andeq	sp, r0, r7, lsl #28
    790c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7910:	00910c00 	addseq	r0, r1, r0, lsl #24
    7914:	35040000 	strcc	r0, [r4, #-0]
    7918:	0000de03 	andeq	sp, r0, r3, lsl #28
    791c:	06010100 	streq	r0, [r1], -r0, lsl #2
    7920:	02990c00 	addseq	r0, r9, #0, 24
    7924:	36040000 	strcc	r0, [r4], -r0
    7928:	0000de03 	andeq	sp, r0, r3, lsl #28
    792c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7930:	040c0c00 	streq	r0, [ip], #-3072	; 0xfffff400
    7934:	37040000 	strcc	r0, [r4, -r0]
    7938:	0000de03 	andeq	sp, r0, r3, lsl #28
    793c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7940:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    7944:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7948:	0000de03 	andeq	sp, r0, r3, lsl #28
    794c:	00040100 	andeq	r0, r4, r0, lsl #2
    7950:	03f60d00 	mvnseq	r0, #0, 26
    7954:	3a040000 	bcc	10795c <__ccfg+0xe79b4>
    7958:	0000de07 	andeq	sp, r0, r7, lsl #28
    795c:	400d0100 	andmi	r0, sp, r0, lsl #2
    7960:	04000000 	streq	r0, [r0], #-0
    7964:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    7968:	0d020000 	stceq	0, cr0, [r2, #-0]
    796c:	00000066 	andeq	r0, r0, r6, rrx
    7970:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    7974:	03000000 	movweq	r0, #0
    7978:	0001540d 	andeq	r5, r1, sp, lsl #8
    797c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7980:	000000ef 	andeq	r0, r0, pc, ror #1
    7984:	34030004 	strcc	r0, [r3], #-4
    7988:	04000004 	streq	r0, [r0], #-4
    798c:	01120341 	tsteq	r2, r1, asr #6
    7990:	a0090000 	andge	r0, r9, r0
    7994:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7998:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    799c:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    79a0:	01000001 	tsteq	r0, r1
    79a4:	030d0e01 	movweq	r0, #56833	; 0xde01
    79a8:	45040000 	strmi	r0, [r4, #-0]
    79ac:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    79b0:	0a010100 	beq	47db8 <__ccfg+0x27e10>
    79b4:	0001d304 	andeq	sp, r1, r4, lsl #6
    79b8:	08010200 	stmdaeq	r1, {r9}
    79bc:	000003aa 	andeq	r0, r0, sl, lsr #7
    79c0:	0001d308 	andeq	sp, r1, r8, lsl #6
    79c4:	031b0e00 	tsteq	fp, #0, 28
    79c8:	45040000 	strmi	r0, [r4, #-0]
    79cc:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    79d0:	0b010100 	bleq	47dd8 <__ccfg+0x27e30>
    79d4:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    79d8:	0000021e 	andeq	r0, r0, lr, lsl r2
    79dc:	0002d20d 	andeq	sp, r2, sp, lsl #4
    79e0:	0b900500 	bleq	fe408de8 <_estack+0xde403de8>
    79e4:	00000067 	andeq	r0, r0, r7, rrx
    79e8:	05ed0d00 	strbeq	r0, [sp, #3328]!	; 0xd00
    79ec:	91050000 	mrsls	r0, (UNDEF: 5)
    79f0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    79f4:	710d0400 	tstvc	sp, r0, lsl #8
    79f8:	05000004 	streq	r0, [r0, #-4]
    79fc:	00ea1092 	smlaleq	r1, sl, r2, r0
    7a00:	00060000 	andeq	r0, r6, r0
    7a04:	00041303 	andeq	r1, r4, r3, lsl #6
    7a08:	03930500 	orrseq	r0, r3, #0, 10
    7a0c:	000001ed 	andeq	r0, r0, sp, ror #3
    7a10:	00021e0f 	andeq	r1, r2, pc, lsl #28
    7a14:	00023500 	andeq	r3, r2, r0, lsl #10
    7a18:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    7a1c:	00000036 	andeq	r0, r0, r6, lsr r0
    7a20:	2a0f9905 	bcs	3ede3c <__ccfg+0x3cde94>
    7a24:	01000002 	tsteq	r0, r2
    7a28:	06010b01 	streq	r0, [r1], -r1, lsl #22
    7a2c:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    7a30:	640c0000 	strvs	r0, [ip], #-0
    7a34:	06000004 	streq	r0, [r0], -r4
    7a38:	00de0793 	smullseq	r0, lr, r3, r7
    7a3c:	07010000 	streq	r0, [r1, -r0]
    7a40:	310c0001 	tstcc	ip, r1
    7a44:	06000000 	streq	r0, [r0], -r0
    7a48:	00de0394 	smullseq	r0, lr, r4, r3
    7a4c:	01010000 	mrseq	r0, (UNDEF: 1)
    7a50:	03000000 	movweq	r0, #0
    7a54:	00000284 	andeq	r0, r0, r4, lsl #5
    7a58:	43039606 	movwmi	r9, #13830	; 0x3606
    7a5c:	08000002 	stmdaeq	r0, {r1}
    7a60:	0000026d 	andeq	r0, r0, sp, ror #4
    7a64:	0002790f 	andeq	r7, r2, pc, lsl #18
    7a68:	00028900 	andeq	r8, r2, r0, lsl #18
    7a6c:	08001000 	stmdaeq	r0, {ip}
    7a70:	0000027e 	andeq	r0, r0, lr, ror r2
    7a74:	0002ed0e 	andeq	lr, r2, lr, lsl #26
    7a78:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7a7c:	00000289 	andeq	r0, r0, r9, lsl #5
    7a80:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    7a84:	a7000000 	strge	r0, [r0, -r0]
    7a88:	10000002 	andne	r0, r0, r2
    7a8c:	029c0800 	addseq	r0, ip, #0, 16
    7a90:	930e0000 	movwls	r0, #57344	; 0xe000
    7a94:	07000003 	streq	r0, [r0, -r3]
    7a98:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    7a9c:	01010000 	mrseq	r0, (UNDEF: 1)
    7aa0:	0001340e 	andeq	r3, r1, lr, lsl #8
    7aa4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7aa8:	000000ef 	andeq	r0, r0, pc, ror #1
    7aac:	7e110101 	mufvcs	f0, f1, f1
    7ab0:	08000004 	stmdaeq	r0, {r2}
    7ab4:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    7ab8:	0a000002 	beq	7ac8 <__exidx_end+0x4e54>
    7abc:	0002db04 	andeq	sp, r2, r4, lsl #22
    7ac0:	e7011200 	str	r1, [r1, -r0, lsl #4]
    7ac4:	13000002 	movwne	r0, #2
    7ac8:	000000cd 	andeq	r0, r0, sp, asr #1
    7acc:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    7ad0:	02f20000 	rscseq	r0, r2, #0
    7ad4:	00100000 	andseq	r0, r0, r0
    7ad8:	0002e708 	andeq	lr, r2, r8, lsl #14
    7adc:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    7ae0:	7f080000 	svcvc	0x00080000
    7ae4:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    7ae8:	01010000 	mrseq	r0, (UNDEF: 1)
    7aec:	00038b14 	andeq	r8, r3, r4, lsl fp
    7af0:	01820800 	orreq	r0, r2, r0, lsl #16
    7af4:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    7af8:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7afc:	00000469 	andeq	r0, r0, r9, ror #8
    7b00:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7b04:	000000ef 	andeq	r0, r0, pc, ror #1
    7b08:	08150101 	ldmdaeq	r5, {r0, r8}
    7b0c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7b10:	0000034b 	andeq	r0, r0, fp, asr #6
    7b14:	0021f416 	eoreq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    7b18:	03070800 	movweq	r0, #30720	; 0x7800
    7b1c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    7b20:	3f160000 	svccc	0x00160000
    7b24:	08000005 	stmdaeq	r0, {r0, r2}
    7b28:	00080308 	andeq	r0, r8, r8, lsl #6
    7b2c:	04000001 	streq	r0, [r0], #-1
    7b30:	02641100 	rsbeq	r1, r4, #0, 2
    7b34:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7b38:	03240303 			; <UNDEFINED> instruction: 0x03240303
    7b3c:	8d170000 	ldchi	0, cr0, [r7, #-0]
    7b40:	30000004 	andcc	r0, r0, r4
    7b44:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7b48:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7b4c:	00048616 	andeq	r8, r4, r6, lsl r6
    7b50:	03140800 	tsteq	r4, #0, 16
    7b54:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7b58:	dc160000 	ldcle	0, cr0, [r6], {-0}
    7b5c:	08000002 	stmdaeq	r0, {r1}
    7b60:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    7b64:	02000000 	andeq	r0, r0, #0
    7b68:	00048116 	andeq	r8, r4, r6, lsl r1
    7b6c:	03160800 	tsteq	r6, #0, 16
    7b70:	0002c80b 	andeq	ip, r2, fp, lsl #16
    7b74:	3f160400 	svccc	0x00160400
    7b78:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7b7c:	00090317 	andeq	r0, r9, r7, lsl r3
    7b80:	08000001 	stmdaeq	r0, {r0}
    7b84:	00043d16 	andeq	r3, r4, r6, lsl sp
    7b88:	03180800 	tsteq	r8, #0, 16
    7b8c:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    7b90:	d7160c00 	ldrle	r0, [r6, -r0, lsl #24]
    7b94:	08000002 	stmdaeq	r0, {r1}
    7b98:	cb150319 	blgt	548804 <__ccfg+0x52885c>
    7b9c:	2c000003 	stccs	0, cr0, [r0], {3}
    7ba0:	034b0f00 	movteq	r0, #48896	; 0xbf00
    7ba4:	03cb0000 	biceq	r0, fp, #0
    7ba8:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7bac:	03000000 	movweq	r0, #0
    7bb0:	58040a00 	stmdapl	r4, {r9, fp}
    7bb4:	11000003 	tstne	r0, r3
    7bb8:	00000498 	muleq	r0, r8, r4
    7bbc:	1b031c08 	blne	cebe4 <__ccfg+0xaec3c>
    7bc0:	00000358 	andeq	r0, r0, r8, asr r3
    7bc4:	00038114 	andeq	r8, r3, r4, lsl r1
    7bc8:	031e0800 	tsteq	lr, #0, 16
    7bcc:	0003ed14 	andeq	lr, r3, r4, lsl sp
    7bd0:	0a010100 	beq	47fd8 <__ccfg+0x28030>
    7bd4:	0003d104 	andeq	sp, r3, r4, lsl #2
    7bd8:	03011900 	movweq	r1, #6400	; 0x1900
    7bdc:	01000016 	tsteq	r0, r6, lsl r0
    7be0:	81010508 	tsthi	r1, r8, lsl #10
    7be4:	ec000000 	stc	0, cr0, [r0], {-0}
    7be8:	7c00001a 	stcvc	0, cr0, [r0], {26}
    7bec:	0100001e 	tsteq	r0, lr, lsl r0
    7bf0:	0005869c 	muleq	r5, ip, r6
    7bf4:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    7bf8:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    7bfc:	00058618 	andeq	r8, r5, r8, lsl r6
    7c00:	00293a00 	eoreq	r3, r9, r0, lsl #20
    7c04:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7c08:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    7c0c:	00058629 	andeq	r8, r5, r9, lsr #12
    7c10:	002b3100 	eoreq	r3, fp, r0, lsl #2
    7c14:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    7c18:	36080100 	strcc	r0, [r8], -r0, lsl #2
    7c1c:	000000b5 	strheq	r0, [r0], -r5
    7c20:	00002b65 	andeq	r2, r0, r5, ror #22
    7c24:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    7c28:	81060a01 	tsthi	r6, r1, lsl #20
    7c2c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    7c30:	1c00002b 	stcne	0, cr0, [r0], {43}	; 0x2b
    7c34:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    7c38:	1c114e01 	ldcne	14, cr4, [r1], {1}
    7c3c:	00001609 	andeq	r1, r0, r9, lsl #12
    7c40:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    7c44:	00001bae 	andeq	r1, r0, lr, lsr #23
    7c48:	00001c1e 	andeq	r1, r0, lr, lsl ip
    7c4c:	00000488 	andeq	r0, r0, r8, lsl #9
    7c50:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    7c54:	114e0100 	mrsne	r0, (UNDEF: 94)
    7c58:	0000010c 	andeq	r0, r0, ip, lsl #2
    7c5c:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    7c60:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    7c64:	0000c111 	andeq	ip, r0, r1, lsl r1
    7c68:	002c7f00 	eoreq	r7, ip, r0, lsl #30
    7c6c:	1e1d0000 	cdpne	0, 1, cr0, cr13, cr0, {0}
    7c70:	6600001c 			; <UNDEFINED> instruction: 0x6600001c
    7c74:	a400001c 	strge	r0, [r0], #-28	; 0xffffffe4
    7c78:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7c7c:	00706176 	rsbseq	r6, r0, r6, ror r1
    7c80:	0c114f01 	ldceq	15, cr4, [r1], {1}
    7c84:	01000001 	tsteq	r0, r1
    7c88:	501f005e 	andspl	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    7c8c:	d500000d 	strle	r0, [r0, #-13]
    7c90:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7c94:	00706176 	rsbseq	r6, r0, r6, ror r1
    7c98:	0c115001 	ldceq	0, cr5, [r1], {1}
    7c9c:	01000001 	tsteq	r0, r1
    7ca0:	6364205e 	cmnvs	r4, #94	; 0x5e
    7ca4:	11500100 	cmpne	r0, r0, lsl #2
    7ca8:	00000081 	andeq	r0, r0, r1, lsl #1
    7cac:	0100631b 	tsteq	r0, fp, lsl r3
    7cb0:	01d31150 	bicseq	r1, r3, r0, asr r1
    7cb4:	2c9d0000 	ldccs	0, cr0, [sp], {0}
    7cb8:	1f000000 	svcne	0x00000000
    7cbc:	00000d68 	andeq	r0, r0, r8, ror #26
    7cc0:	000004fc 	strdeq	r0, [r0], -ip
    7cc4:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    7cc8:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    7ccc:	0000058c 	andeq	r0, r0, ip, lsl #11
    7cd0:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    7cd4:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    7cd8:	0000c116 	andeq	ip, r0, r6, lsl r1
    7cdc:	002cbb00 	eoreq	fp, ip, r0, lsl #22
    7ce0:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
    7ce4:	1400000d 	strne	r0, [r0], #-13
    7ce8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7cec:	00706176 	rsbseq	r6, r0, r6, ror r1
    7cf0:	8c165601 	ldchi	6, cr5, [r6], {1}
    7cf4:	01000005 	tsteq	r0, r5
    7cf8:	801f005e 	andshi	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    7cfc:	4500000d 	strmi	r0, [r0, #-13]
    7d00:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7d04:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d08:	8c165701 	ldchi	7, cr5, [r6], {1}
    7d0c:	01000005 	tsteq	r0, r5
    7d10:	6364205e 	cmnvs	r4, #94	; 0x5e
    7d14:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    7d18:	00000081 	andeq	r0, r0, r1, lsl #1
    7d1c:	0100631b 	tsteq	r0, fp, lsl r3
    7d20:	01d31657 	bicseq	r1, r3, r7, asr r6
    7d24:	2cd90000 	ldclcs	0, cr0, [r9], {0}
    7d28:	1d000000 	stcne	0, cr0, [r0, #-0]
    7d2c:	00001e2e 	andeq	r1, r0, lr, lsr #28
    7d30:	00001e42 	andeq	r1, r0, r2, asr #28
    7d34:	0000056f 	andeq	r0, r0, pc, ror #10
    7d38:	0100631b 	tsteq	r0, fp, lsl r3
    7d3c:	01d3095c 	bicseq	r0, r3, ip, asr r9
    7d40:	2cf70000 	ldclcs	0, cr0, [r7]
    7d44:	731e0000 	tstvc	lr, #0
    7d48:	01007061 	tsteq	r0, r1, rrx
    7d4c:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    7d50:	56010000 	strpl	r0, [r1], -r0
    7d54:	0d302100 	ldfeqs	f2, [r0, #-0]
    7d58:	731b0000 	tstvc	fp, #0
    7d5c:	01007061 	tsteq	r0, r1, rrx
    7d60:	01cd0a66 	biceq	r0, sp, r6, ror #20
    7d64:	2d0a0000 	stccs	0, cr0, [sl, #-0]
    7d68:	00000000 	andeq	r0, r0, r0
    7d6c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    7d70:	040a0000 	streq	r0, [sl], #-0
    7d74:	000000ef 	andeq	r0, r0, pc, ror #1
    7d78:	0000d500 	andeq	sp, r0, r0, lsl #10
    7d7c:	00000400 	andeq	r0, r0, r0, lsl #8
    7d80:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7d84:	00165001 	andseq	r5, r6, r1
    7d88:	17090100 	strne	r0, [r9, -r0, lsl #2]
    7d8c:	17450000 	strbne	r0, [r5, -r0]
    7d90:	0db00000 	ldceq	0, cr0, [r0]
    7d94:	00000000 	andeq	r0, r0, r0
    7d98:	57750000 	ldrbpl	r0, [r5, -r0]!
    7d9c:	00020000 	andeq	r0, r2, r0
    7da0:	02000017 	andeq	r0, r0, #23
    7da4:	0000301b 	andeq	r3, r0, fp, lsl r0
    7da8:	06010300 	streq	r0, [r1], -r0, lsl #6
    7dac:	000003a3 	andeq	r0, r0, r3, lsr #7
    7db0:	a1080103 	tstge	r8, r3, lsl #2
    7db4:	03000003 	movweq	r0, #3
    7db8:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    7dbc:	02030000 	andeq	r0, r3, #0
    7dc0:	00027107 	andeq	r7, r2, r7, lsl #2
    7dc4:	16460200 	strbne	r0, [r6], -r0, lsl #4
    7dc8:	3f020000 	svccc	0x00020000
    7dcc:	00000057 	andeq	r0, r0, r7, asr r0
    7dd0:	9d050403 	cfstrsls	mvf0, [r5, #-12]
    7dd4:	03000000 	movweq	r0, #0
    7dd8:	00720704 	rsbseq	r0, r2, r4, lsl #14
    7ddc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    7de0:	00009805 	andeq	r9, r0, r5, lsl #16
    7de4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    7de8:	0000006d 	andeq	r0, r0, sp, rrx
    7dec:	69050404 	stmdbvs	r5, {r2, sl}
    7df0:	0300746e 	movweq	r7, #1134	; 0x46e
    7df4:	00770704 	rsbseq	r0, r7, r4, lsl #14
    7df8:	02020000 	andeq	r0, r2, #0
    7dfc:	03000017 	movweq	r0, #23
    7e00:	00002513 	andeq	r2, r0, r3, lsl r5
    7e04:	16480200 	strbne	r0, [r8], -r0, lsl #4
    7e08:	1f030000 	svcne	0x00030000
    7e0c:	0000004c 	andeq	r0, r0, ip, asr #32
    7e10:	00161705 	andseq	r1, r6, r5, lsl #14
    7e14:	8caa0400 	cfstrshi	mvf0, [sl]
    7e18:	7c000000 	stcvc	0, cr0, [r0], {-0}
    7e1c:	3000001e 	andcc	r0, r0, lr, lsl r0
    7e20:	01000000 	mrseq	r0, (UNDEF: 0)
    7e24:	173a069c 			; <UNDEFINED> instruction: 0x173a069c
    7e28:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    7e2c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7e30:	00002d28 	andeq	r2, r0, r8, lsr #26
    7e34:	00172b06 	andseq	r2, r7, r6, lsl #22
    7e38:	8c3f0100 	ldfhis	f0, [pc], #-0	; 7e40 <__exidx_end+0x51cc>
    7e3c:	41000000 	mrsmi	r0, (UNDEF: 0)
    7e40:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    7e44:	00001639 	andeq	r1, r0, r9, lsr r6
    7e48:	00814001 	addeq	r4, r1, r1
    7e4c:	51010000 	mrspl	r0, (UNDEF: 1)
    7e50:	01430000 	mrseq	r0, (UNDEF: 67)
    7e54:	00040000 	andeq	r0, r4, r0
    7e58:	0000256f 	andeq	r2, r0, pc, ror #10
    7e5c:	16500104 	ldrbne	r0, [r0], -r4, lsl #2
    7e60:	56010000 	strpl	r0, [r1], -r0
    7e64:	45000018 	strmi	r0, [r0, #-24]	; 0xffffffe8
    7e68:	c0000017 	andgt	r0, r0, r7, lsl r0
    7e6c:	0000000d 	andeq	r0, r0, sp
    7e70:	e0000000 	and	r0, r0, r0
    7e74:	02000058 	andeq	r0, r0, #88	; 0x58
    7e78:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    7e7c:	01020000 	mrseq	r0, (UNDEF: 2)
    7e80:	0003a108 	andeq	sl, r3, r8, lsl #2
    7e84:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7e88:	000003dd 	ldrdeq	r0, [r0], -sp
    7e8c:	71070202 	tstvc	r7, r2, lsl #4
    7e90:	02000002 	andeq	r0, r0, #2
    7e94:	009d0504 	addseq	r0, sp, r4, lsl #10
    7e98:	b1030000 	mrslt	r0, (UNDEF: 3)
    7e9c:	02000017 	andeq	r0, r0, #23
    7ea0:	00005341 	andeq	r5, r0, r1, asr #6
    7ea4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7ea8:	00000072 	andeq	r0, r0, r2, ror r0
    7eac:	98050802 	stmdals	r5, {r1, fp}
    7eb0:	03000000 	movweq	r0, #0
    7eb4:	00001800 	andeq	r1, r0, r0, lsl #16
    7eb8:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    7ebc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ec0:	00006d07 	andeq	r6, r0, r7, lsl #26
    7ec4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7ec8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7ecc:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    7ed0:	03000000 	movweq	r0, #0
    7ed4:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    7ed8:	00482003 	subeq	r2, r8, r3
    7edc:	02030000 	andeq	r0, r3, #0
    7ee0:	03000018 	movweq	r0, #24
    7ee4:	00006126 	andeq	r6, r0, r6, lsr #2
    7ee8:	17cb0500 	strbne	r0, [fp, r0, lsl #10]
    7eec:	45040000 	strmi	r0, [r4, #-0]
    7ef0:	00008103 	andeq	r8, r0, r3, lsl #2
    7ef4:	00000000 	andeq	r0, r0, r0
    7ef8:	00002000 	andeq	r2, r0, r0
    7efc:	dd9c0100 	ldfles	f0, [ip]
    7f00:	06000000 	streq	r0, [r0], -r0
    7f04:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    7f08:	00814001 	addeq	r4, r1, r1
    7f0c:	2d760000 	ldclcs	0, cr0, [r6, #-0]
    7f10:	0b060000 	bleq	187f18 <__ccfg+0x167f70>
    7f14:	01000018 	tsteq	r0, r8, lsl r0
    7f18:	00008141 	andeq	r8, r0, r1, asr #2
    7f1c:	002d8900 	eoreq	r8, sp, r0, lsl #18
    7f20:	17ee0700 	strbne	r0, [lr, r0, lsl #14]!
    7f24:	42010000 	andmi	r0, r1, #0
    7f28:	00000081 	andeq	r0, r0, r1, lsl #1
    7f2c:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    7f30:	0000181d 	andeq	r1, r0, sp, lsl r8
    7f34:	8c035304 	stchi	3, cr5, [r3], {4}
    7f38:	ac000000 	stcge	0, cr0, [r0], {-0}
    7f3c:	1800001e 	stmdane	r0, {r1, r2, r3, r4}
    7f40:	01000000 	mrseq	r0, (UNDEF: 0)
    7f44:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    7f48:	01080800 	tsteq	r8, r0, lsl #16
    7f4c:	00011659 	andeq	r1, r1, r9, asr r6
    7f50:	17a50900 	strne	r0, [r5, r0, lsl #18]!
    7f54:	5a010000 	bpl	47f5c <__ccfg+0x27fb4>
    7f58:	0000008c 	andeq	r0, r0, ip, lsl #1
    7f5c:	00184909 	andseq	r4, r8, r9, lsl #18
    7f60:	2f5b0100 	svccs	0x005b0100
    7f64:	00000001 	andeq	r0, r0, r1
    7f68:	00183e0a 	andseq	r3, r8, sl, lsl #28
    7f6c:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    7f70:	07000000 	streq	r0, [r0, -r0]
    7f74:	000017ee 	andeq	r1, r0, lr, ror #15
    7f78:	00815d01 	addeq	r5, r1, r1, lsl #26
    7f7c:	51010000 	mrspl	r0, (UNDEF: 1)
    7f80:	00810b00 	addeq	r0, r1, r0, lsl #22
    7f84:	013f0000 	teqeq	pc, r0
    7f88:	3f0c0000 	svccc	0x000c0000
    7f8c:	01000001 	tsteq	r0, r1
    7f90:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7f94:	00001875 	andeq	r1, r0, r5, ror r8
    7f98:	00013600 	andeq	r3, r1, r0, lsl #12
    7f9c:	19000400 	stmdbne	r0, {sl}
    7fa0:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    7fa4:	00165001 	andseq	r5, r6, r1
    7fa8:	18d10100 	ldmne	r1, {r8}^
    7fac:	17450000 	strbne	r0, [r5, -r0]
    7fb0:	0dd80000 	ldcleq	0, cr0, [r8]
    7fb4:	00000000 	andeq	r0, r0, r0
    7fb8:	5a8d0000 	bpl	fe347fc0 <_estack+0xde342fc0>
    7fbc:	01020000 	mrseq	r0, (UNDEF: 2)
    7fc0:	0003a306 	andeq	sl, r3, r6, lsl #6
    7fc4:	08010200 	stmdaeq	r1, {r9}
    7fc8:	000003a1 	andeq	r0, r0, r1, lsr #7
    7fcc:	dd050202 	sfmle	f0, 4, [r5, #-8]
    7fd0:	02000003 	andeq	r0, r0, #3
    7fd4:	02710702 	rsbseq	r0, r1, #524288	; 0x80000
    7fd8:	04020000 	streq	r0, [r2], #-0
    7fdc:	00009d05 	andeq	r9, r0, r5, lsl #26
    7fe0:	17b10300 	ldrne	r0, [r1, r0, lsl #6]!
    7fe4:	41020000 	mrsmi	r0, (UNDEF: 2)
    7fe8:	00000053 	andeq	r0, r0, r3, asr r0
    7fec:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    7ff0:	02000000 	andeq	r0, r0, #0
    7ff4:	00980508 	addseq	r0, r8, r8, lsl #10
    7ff8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ffc:	00006d07 	andeq	r6, r0, r7, lsl #26
    8000:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8004:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8008:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    800c:	03000000 	movweq	r0, #0
    8010:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    8014:	00482003 	subeq	r2, r8, r3
    8018:	b3050000 	movwlt	r0, #20480	; 0x5000
    801c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8020:	0000766a 	andeq	r7, r0, sl, ror #12
    8024:	001ec400 	andseq	ip, lr, r0, lsl #8
    8028:	00000800 	andeq	r0, r0, r0, lsl #16
    802c:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    8030:	06000000 	streq	r0, [r0], -r0
    8034:	000018a1 	andeq	r1, r0, r1, lsr #17
    8038:	00767701 	rsbseq	r7, r6, r1, lsl #14
    803c:	05000000 	streq	r0, [r0, #-0]
    8040:	000018ec 	andeq	r1, r0, ip, ror #17
    8044:	00767804 	rsbseq	r7, r6, r4, lsl #16
    8048:	00000000 	andeq	r0, r0, r0
    804c:	00060000 	andeq	r0, r6, r0
    8050:	9c010000 	stcls	0, cr0, [r1], {-0}
    8054:	000000cb 	andeq	r0, r0, fp, asr #1
    8058:	0018a106 	andseq	sl, r8, r6, lsl #2
    805c:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    8060:	00000000 	andeq	r0, r0, r0
    8064:	0018c205 	andseq	ip, r8, r5, lsl #4
    8068:	76840400 	strvc	r0, [r4], r0, lsl #8
    806c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    8070:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    8074:	01000000 	mrseq	r0, (UNDEF: 0)
    8078:	0000f19c 	muleq	r0, ip, r1
    807c:	18a10700 	stmiane	r1!, {r8, r9, sl}
    8080:	0f010000 	svceq	0x00010000
    8084:	00007601 	andeq	r7, r0, r1, lsl #12
    8088:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    808c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8090:	0076015b 	rsbseq	r0, r6, fp, asr r1
    8094:	00000000 	andeq	r0, r0, r0
    8098:	00060000 	andeq	r0, r6, r0
    809c:	9c010000 	stcls	0, cr0, [r1], {-0}
    80a0:	00000118 	andeq	r0, r0, r8, lsl r1
    80a4:	0018a107 	andseq	sl, r8, r7, lsl #2
    80a8:	015a0100 	cmpeq	sl, r0, lsl #2
    80ac:	00000076 	andeq	r0, r0, r6, ror r0
    80b0:	18920900 	ldmne	r2, {r8, fp}
    80b4:	6c040000 	stcvs	0, cr0, [r4], {-0}
    80b8:	00000001 	andeq	r0, r0, r1
    80bc:	00000800 	andeq	r0, r0, r0, lsl #16
    80c0:	0a9c0100 	beq	fe7084c8 <_estack+0xde7034c8>
    80c4:	000018a9 	andeq	r1, r0, r9, lsr #17
    80c8:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    80cc:	01000000 	mrseq	r0, (UNDEF: 0)
    80d0:	07000050 	smlsdeq	r0, r0, r0, r0
    80d4:	04000002 	streq	r0, [r0], #-2
    80d8:	0026c900 	eoreq	ip, r6, r0, lsl #18
    80dc:	50010400 	andpl	r0, r1, r0, lsl #8
    80e0:	01000016 	tsteq	r0, r6, lsl r0
    80e4:	000019b9 			; <UNDEFINED> instruction: 0x000019b9
    80e8:	00001745 	andeq	r1, r0, r5, asr #14
    80ec:	00000e08 	andeq	r0, r0, r8, lsl #28
    80f0:	00000000 	andeq	r0, r0, r0
    80f4:	00005c2d 	andeq	r5, r0, sp, lsr #24
    80f8:	a3060102 	movwge	r0, #24834	; 0x6102
    80fc:	02000003 	andeq	r0, r0, #3
    8100:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    8104:	02020000 	andeq	r0, r2, #0
    8108:	0003dd05 	andeq	sp, r3, r5, lsl #26
    810c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8110:	00000271 	andeq	r0, r0, r1, ror r2
    8114:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    8118:	03000000 	movweq	r0, #0
    811c:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    8120:	00534103 	subseq	r4, r3, r3, lsl #2
    8124:	04020000 	streq	r0, [r2], #-0
    8128:	00007207 	andeq	r7, r0, r7, lsl #4
    812c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8130:	00000098 	muleq	r0, r8, r0
    8134:	6d070802 	stcvs	8, cr0, [r7, #-8]
    8138:	04000000 	streq	r0, [r0], #-0
    813c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8140:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8144:	00007707 	andeq	r7, r0, r7, lsl #14
    8148:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    814c:	20040000 	andcs	r0, r4, r0
    8150:	00000048 	andeq	r0, r0, r8, asr #32
    8154:	001a1605 	andseq	r1, sl, r5, lsl #12
    8158:	03300200 	teqeq	r0, #0, 4
    815c:	1a810603 	bne	fe049970 <_estack+0xde044970>
    8160:	fd010000 	stc2	0, cr0, [r1, #-0]
    8164:	1a290501 	bne	a49570 <__ccfg+0xa295c8>
    8168:	82010000 	andhi	r0, r1, #0
    816c:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    8170:	01000019 	tsteq	r0, r9, lsl r0
    8174:	1ed4010d 	cdpne	1, 13, cr0, cr4, cr13, {0}
    8178:	00d40000 	sbcseq	r0, r4, r0
    817c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8180:	0000016d 	andeq	r0, r0, sp, ror #2
    8184:	001a0408 	andseq	r0, sl, r8, lsl #8
    8188:	010d0100 	mrseq	r0, (UNDEF: 29)
    818c:	00000076 	andeq	r0, r0, r6, ror r0
    8190:	00002d9c 	muleq	r0, ip, sp
    8194:	001a7009 	andseq	r7, sl, r9
    8198:	010f0100 	mrseq	r0, (UNDEF: 31)
    819c:	00000076 	andeq	r0, r0, r6, ror r0
    81a0:	00002dc8 	andeq	r2, r0, r8, asr #27
    81a4:	0018fd09 	andseq	pc, r8, r9, lsl #26
    81a8:	01100100 	tsteq	r0, r0, lsl #2
    81ac:	00000076 	andeq	r0, r0, r6, ror r0
    81b0:	00002ddb 	ldrdeq	r2, [r0], -fp
    81b4:	0000810a 	andeq	r8, r0, sl, lsl #2
    81b8:	001f0600 	andseq	r0, pc, r0, lsl #12
    81bc:	00000600 	andeq	r0, r0, r0, lsl #12
    81c0:	01360100 	teqeq	r6, r0, lsl #2
    81c4:	001f2c0b 	andseq	r2, pc, fp, lsl #24
    81c8:	00002a00 	andeq	r2, r0, r0, lsl #20
    81cc:	00011f00 	andeq	r1, r1, r0, lsl #30
    81d0:	1af60900 	bne	ffd8a5d8 <_estack+0xdfd855d8>
    81d4:	53010000 	movwpl	r0, #4096	; 0x1000
    81d8:	00007601 	andeq	r7, r0, r1, lsl #12
    81dc:	002df400 	eoreq	pc, sp, r0, lsl #8
    81e0:	1a520900 	bne	148a5e8 <__ccfg+0x146a640>
    81e4:	54010000 	strpl	r0, [r1], #-0
    81e8:	00007601 	andeq	r7, r0, r1, lsl #12
    81ec:	002e0700 	eoreq	r0, lr, r0, lsl #14
    81f0:	160c0000 	strne	r0, [ip], -r0
    81f4:	c300001f 	movwgt	r0, #31
    81f8:	33000001 	movwcc	r0, #1
    81fc:	0d000001 	stceq	0, cr0, [r0, #-4]
    8200:	74025001 	strvc	r5, [r2], #-1
    8204:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    8208:	d400001f 	strle	r0, [r0], #-31	; 0xffffffe1
    820c:	4d000001 	stcmi	0, cr0, [r0, #-4]
    8210:	0d000001 	stceq	0, cr0, [r0, #-4]
    8214:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    8218:	50010d00 	andpl	r0, r1, r0, lsl #26
    821c:	00007502 	andeq	r7, r0, r2, lsl #10
    8220:	001f5c0c 	andseq	r5, pc, ip, lsl #24
    8224:	0001ea00 	andeq	lr, r1, r0, lsl #20
    8228:	00016100 	andeq	r6, r1, r0, lsl #2
    822c:	50010d00 	andpl	r0, r1, r0, lsl #26
    8230:	00007402 	andeq	r7, r0, r2, lsl #8
    8234:	001f660e 	andseq	r6, pc, lr, lsl #12
    8238:	50010d00 	andpl	r0, r1, r0, lsl #26
    823c:	00003201 	andeq	r3, r0, r1, lsl #4
    8240:	001a3c0f 	andseq	r3, sl, pc, lsl #24
    8244:	a85f0700 	ldmdage	pc, {r8, r9, sl}^	; <UNPREDICTABLE>
    8248:	a400001f 	strge	r0, [r0], #-31	; 0xffffffe1
    824c:	01000000 	mrseq	r0, (UNDEF: 0)
    8250:	0001c39c 	muleq	r1, ip, r3
    8254:	1a041000 	bne	10c25c <__ccfg+0xec2b4>
    8258:	72010000 	andvc	r0, r1, #0
    825c:	00000076 	andeq	r0, r0, r6, ror r0
    8260:	00002e32 	andeq	r2, r0, r2, lsr lr
    8264:	001a5d10 	andseq	r5, sl, r0, lsl sp
    8268:	76730100 	ldrbtvc	r0, [r3], -r0, lsl #2
    826c:	45000000 	strmi	r0, [r0, #-0]
    8270:	1100002e 	tstne	r0, lr, lsr #32
    8274:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
    8278:	000001fb 	strdeq	r0, [r0], -fp
    827c:	001fcc11 	andseq	ip, pc, r1, lsl ip	; <UNPREDICTABLE>
    8280:	00020300 	andeq	r0, r2, r0, lsl #6
    8284:	1fdc1200 	svcne	0x00dc1200
    8288:	009b0000 	addseq	r0, fp, r0
    828c:	010d0000 	mrseq	r0, (UNDEF: 13)
    8290:	00740250 	rsbseq	r0, r4, r0, asr r2
    8294:	29130000 	ldmdbcs	r3, {}	; <UNPREDICTABLE>
    8298:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    829c:	0001d46c 	andeq	sp, r1, ip, ror #8
    82a0:	00761400 	rsbseq	r1, r6, r0, lsl #8
    82a4:	13000000 	movwne	r0, #0
    82a8:	00001959 	andeq	r1, r0, r9, asr r9
    82ac:	01ea7305 	mvneq	r7, r5, lsl #6
    82b0:	76140000 	ldrvc	r0, [r4], -r0
    82b4:	14000000 	strne	r0, [r0], #-0
    82b8:	00000076 	andeq	r0, r0, r6, ror r0
    82bc:	19891300 	stmibne	r9, {r8, r9, ip}
    82c0:	7a050000 	bvc	1482c8 <__ccfg+0x128320>
    82c4:	000001fb 	strdeq	r0, [r0], -fp
    82c8:	00007614 	andeq	r7, r0, r4, lsl r6
    82cc:	b9150000 	ldmdblt	r5, {}	; <UNPREDICTABLE>
    82d0:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    82d4:	d6160243 	ldrle	r0, [r6], -r3, asr #4
    82d8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    82dc:	0b1700fd 	bleq	5c86d8 <__ccfg+0x5a8730>
    82e0:	00040000 	andeq	r0, r4, r0
    82e4:	0000280b 	andeq	r2, r0, fp, lsl #16
    82e8:	16500104 	ldrbne	r0, [r0], -r4, lsl #2
    82ec:	51010000 	mrspl	r0, (UNDEF: 1)
    82f0:	4500001d 	strmi	r0, [r0, #-29]	; 0xffffffe3
    82f4:	50000017 	andpl	r0, r0, r7, lsl r0
    82f8:	0000000e 	andeq	r0, r0, lr
    82fc:	1a000000 	bne	8304 <__exidx_end+0x5690>
    8300:	0200005e 	andeq	r0, r0, #94	; 0x5e
    8304:	03a30601 			; <UNDEFINED> instruction: 0x03a30601
    8308:	01020000 	mrseq	r0, (UNDEF: 2)
    830c:	0003a108 	andeq	sl, r3, r8, lsl #2
    8310:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8314:	000003dd 	ldrdeq	r0, [r0], -sp
    8318:	71070202 	tstvc	r7, r2, lsl #4
    831c:	03000002 	movweq	r0, #2
    8320:	00001646 	andeq	r1, r0, r6, asr #12
    8324:	004c3f04 	subeq	r3, ip, r4, lsl #30
    8328:	04020000 	streq	r0, [r2], #-0
    832c:	00009d05 	andeq	r9, r0, r5, lsl #26
    8330:	17b10300 	ldrne	r0, [r1, r0, lsl #6]!
    8334:	41040000 	mrsmi	r0, (UNDEF: 4)
    8338:	0000005e 	andeq	r0, r0, lr, asr r0
    833c:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    8340:	02000000 	andeq	r0, r0, #0
    8344:	00980508 	addseq	r0, r8, r8, lsl #10
    8348:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    834c:	00006d07 	andeq	r6, r0, r7, lsl #26
    8350:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8354:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8358:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    835c:	03000000 	movweq	r0, #0
    8360:	00001648 	andeq	r1, r0, r8, asr #12
    8364:	00411f05 	subeq	r1, r1, r5, lsl #30
    8368:	b3030000 	movwlt	r0, #12288	; 0x3000
    836c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8370:	00005320 	andeq	r5, r0, r0, lsr #6
    8374:	1de40500 	cfstr64ne	mvdx0, [r4]
    8378:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    837c:	00000081 	andeq	r0, r0, r1, lsl #1
    8380:	0000be03 	andeq	fp, r0, r3, lsl #28
    8384:	1b340600 	blne	d09b8c <__ccfg+0xce9be4>
    8388:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    838c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8390:	001e3d07 	andseq	r3, lr, r7, lsl #26
    8394:	81ef0200 	mvnhi	r0, r0, lsl #4
    8398:	00000000 	andeq	r0, r0, r0
    839c:	001b6908 	andseq	r6, fp, r8, lsl #18
    83a0:	8cab0200 	sfmhi	f0, 4, [fp]
    83a4:	01000000 	mrseq	r0, (UNDEF: 0)
    83a8:	000000e7 	andeq	r0, r0, r7, ror #1
    83ac:	001a0409 	andseq	r0, sl, r9, lsl #8
    83b0:	03290100 			; <UNDEFINED> instruction: 0x03290100
    83b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    83b8:	001ede0a 	andseq	sp, lr, sl, lsl #28
    83bc:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    83c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    83c4:	1e1c0800 	cdpne	8, 1, cr0, cr12, cr0, {0}
    83c8:	81020000 	mrshi	r0, (UNDEF: 2)
    83cc:	0000008c 	andeq	r0, r0, ip, lsl #1
    83d0:	00011001 	andeq	r1, r1, r1
    83d4:	1a040900 	bne	10a7dc <__ccfg+0xea834>
    83d8:	3c010000 	stccc	0, cr0, [r1], {-0}
    83dc:	00008c03 	andeq	r8, r0, r3, lsl #24
    83e0:	1e8d0a00 	vdivne.f32	s0, s26, s0
    83e4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    83e8:	00008c03 	andeq	r8, r0, r3, lsl #24
    83ec:	ca080000 	bgt	2083f4 <__ccfg+0x1e844c>
    83f0:	0200001c 	andeq	r0, r0, #28
    83f4:	00008c88 	andeq	r8, r0, r8, lsl #25
    83f8:	01390100 	teqeq	r9, r0, lsl #2
    83fc:	04090000 	streq	r0, [r9], #-0
    8400:	0100001a 	tsteq	r0, sl, lsl r0
    8404:	008c034f 	addeq	r0, ip, pc, asr #6
    8408:	010a0000 	mrseq	r0, (UNDEF: 10)
    840c:	0100001e 	tsteq	r0, lr, lsl r0
    8410:	008c0351 	addeq	r0, ip, r1, asr r3
    8414:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8418:	00001c2e 	andeq	r1, r0, lr, lsr #24
    841c:	008cc802 	addeq	ip, ip, r2, lsl #16
    8420:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    8424:	09000001 	stmdbeq	r0, {r0}
    8428:	00001a04 	andeq	r1, r0, r4, lsl #20
    842c:	8c036201 	sfmhi	f6, 4, [r3], {1}
    8430:	0a000000 	beq	8438 <__exidx_end+0x57c4>
    8434:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    8438:	8c036401 	cfstrshi	mvf6, [r3], {1}
    843c:	0a000000 	beq	8444 <__exidx_end+0x57d0>
    8440:	00001cff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    8444:	8c036501 	cfstr32hi	mvfx6, [r3], {1}
    8448:	00000000 	andeq	r0, r0, r0
    844c:	001d3108 	andseq	r3, sp, r8, lsl #2
    8450:	8cb20200 	lfmhi	f0, 4, [r2]
    8454:	01000000 	mrseq	r0, (UNDEF: 0)
    8458:	000001a3 	andeq	r0, r0, r3, lsr #3
    845c:	001a0409 	andseq	r0, sl, r9, lsl #8
    8460:	03940100 	orrseq	r0, r4, #0, 2
    8464:	0000008c 	andeq	r0, r0, ip, lsl #1
    8468:	001c4d0a 	andseq	r4, ip, sl, lsl #26
    846c:	03960100 	orrseq	r0, r6, #0, 2
    8470:	0000008c 	andeq	r0, r0, ip, lsl #1
    8474:	001cff0a 	andseq	pc, ip, sl, lsl #30
    8478:	03970100 	orrseq	r0, r7, #0, 2
    847c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8480:	1bfc0800 	blne	fff0a488 <_estack+0xdff05488>
    8484:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
    8488:	0000008c 	andeq	r0, r0, ip, lsl #1
    848c:	0001cc01 	andeq	ip, r1, r1, lsl #24
    8490:	1a040900 	bne	10a898 <__ccfg+0xea8f0>
    8494:	b4010000 	strlt	r0, [r1], #-0
    8498:	00008c03 	andeq	r8, r0, r3, lsl #24
    849c:	1d090a00 	vstrne	s0, [r9, #-0]
    84a0:	b6010000 	strlt	r0, [r1], -r0
    84a4:	00008c03 	andeq	r8, r0, r3, lsl #24
    84a8:	a7080000 	strge	r0, [r8, -r0]
    84ac:	0200001d 	andeq	r0, r0, #29
    84b0:	00008cdf 	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
    84b4:	01f50100 	mvnseq	r0, r0, lsl #2
    84b8:	04090000 	streq	r0, [r9], #-0
    84bc:	0100001a 	tsteq	r0, sl, lsl r0
    84c0:	008c03c8 	addeq	r0, ip, r8, asr #7
    84c4:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
    84c8:	0100001e 	tsteq	r0, lr, lsl r0
    84cc:	008c03ca 	addeq	r0, ip, sl, asr #7
    84d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84d4:	00001e67 	andeq	r1, r0, r7, ror #28
    84d8:	008cd702 	addeq	sp, ip, r2, lsl #14
    84dc:	12010000 	andne	r0, r1, #0
    84e0:	0a000002 	beq	84f0 <__exidx_end+0x587c>
    84e4:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    84e8:	8c028301 	stchi	3, cr8, [r2], {1}
    84ec:	00000000 	andeq	r0, r0, r0
    84f0:	00080b0b 	andeq	r0, r8, fp, lsl #22
    84f4:	03c40300 	biceq	r0, r4, #0, 6
    84f8:	001f8e0c 	andseq	r8, pc, ip, lsl #28
    84fc:	010f0200 	mrseq	r0, (UNDEF: 47)
    8500:	0000204c 	andeq	r2, r0, ip, asr #32
    8504:	0000007c 	andeq	r0, r0, ip, ror r0
    8508:	02c49c01 	sbceq	r9, r4, #256	; 0x100
    850c:	700d0000 	andvc	r0, sp, r0
    8510:	0100001a 	tsteq	r0, sl, lsl r0
    8514:	00008c7f 	andeq	r8, r0, pc, ror ip
    8518:	002e5800 	eoreq	r5, lr, r0, lsl #16
    851c:	1fa60700 	svcne	0x00a60700
    8520:	81010000 	mrshi	r0, (UNDEF: 1)
    8524:	0000008c 	andeq	r0, r0, ip, lsl #1
    8528:	001d260e 	andseq	r2, sp, lr, lsl #12
    852c:	81820100 	orrhi	r0, r2, r0, lsl #2
    8530:	01000000 	mrseq	r0, (UNDEF: 0)
    8534:	1b990f52 	blne	fe64c284 <_estack+0xde647284>
    8538:	83010000 	movwhi	r0, #4096	; 0x1000
    853c:	00000081 	andeq	r0, r0, r1, lsl #1
    8540:	00002e79 	andeq	r2, r0, r9, ror lr
    8544:	001c670f 	andseq	r6, ip, pc, lsl #14
    8548:	81840100 	orrhi	r0, r4, r0, lsl #2
    854c:	8c000000 	stchi	0, cr0, [r0], {-0}
    8550:	1000002e 	andne	r0, r0, lr, lsr #32
    8554:	00000097 	muleq	r0, r7, r0
    8558:	0000205a 	andeq	r2, r0, sl, asr r0
    855c:	00000e20 	andeq	r0, r0, r0, lsr #28
    8560:	029b9701 	addseq	r9, fp, #262144	; 0x40000
    8564:	a7110000 	ldrge	r0, [r1, -r0]
    8568:	12000000 	andne	r0, r0, #0
    856c:	00000e20 	andeq	r0, r0, r0, lsr #28
    8570:	0000b213 	andeq	fp, r0, r3, lsl r2
    8574:	00520100 	subseq	r0, r2, r0, lsl #2
    8578:	00971400 	addseq	r1, r7, r0, lsl #8
    857c:	20640000 	rsbcs	r0, r4, r0
    8580:	00060000 	andeq	r0, r6, r0
    8584:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    8588:	0000a711 	andeq	sl, r0, r1, lsl r7
    858c:	20641500 	rsbcs	r1, r4, r0, lsl #10
    8590:	00060000 	andeq	r0, r6, r0
    8594:	b2160000 	andslt	r0, r6, #0
    8598:	ba000000 	blt	85a0 <__exidx_end+0x592c>
    859c:	0000002e 	andeq	r0, r0, lr, lsr #32
    85a0:	29170000 	ldmdbcs	r7, {}	; <UNPREDICTABLE>
    85a4:	02000019 	andeq	r0, r0, #25
    85a8:	0020c86c 	eoreq	ip, r0, ip, ror #16
    85ac:	0000ac00 	andeq	sl, r0, r0, lsl #24
    85b0:	439c0100 	orrsmi	r0, ip, #0, 2
    85b4:	0d000003 	stceq	0, cr0, [r0, #-12]
    85b8:	00001a70 	andeq	r1, r0, r0, ror sl
    85bc:	008cbf01 	addeq	fp, ip, r1, lsl #30
    85c0:	2ecd0000 	cdpcs	0, 12, cr0, cr13, cr0, {0}
    85c4:	c00f0000 	andgt	r0, pc, r0
    85c8:	0100001e 	tsteq	r0, lr, lsl r0
    85cc:	000081c1 	andeq	r8, r0, r1, asr #3
    85d0:	002f0100 	eoreq	r0, pc, r0, lsl #2
    85d4:	1fd60f00 	svcne	0x00d60f00
    85d8:	c2010000 	andgt	r0, r1, #0
    85dc:	00000081 	andeq	r0, r0, r1, lsl #1
    85e0:	00002f2a 	andeq	r2, r0, sl, lsr #30
    85e4:	00009718 	andeq	r9, r0, r8, lsl r7
    85e8:	0020fe00 	eoreq	pc, r0, r0, lsl #28
    85ec:	00000600 	andeq	r0, r0, r0, lsl #12
    85f0:	32ee0100 	rsccc	r0, lr, #0, 2
    85f4:	11000003 	tstne	r0, r3
    85f8:	000000a7 	andeq	r0, r0, r7, lsr #1
    85fc:	0020fe15 	eoreq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
    8600:	00000600 	andeq	r0, r0, r0, lsl #12
    8604:	00b21600 	adcseq	r1, r2, r0, lsl #12
    8608:	2f510000 	svccs	0x00510000
    860c:	00000000 	andeq	r0, r0, r0
    8610:	0020ec19 	eoreq	lr, r0, r9, lsl ip
    8614:	00021a00 	andeq	r1, r2, r0, lsl #20
    8618:	50011a00 	andpl	r1, r1, r0, lsl #20
    861c:	00007402 	andeq	r7, r0, r2, lsl #8
    8620:	1b441b00 	blne	110f228 <__ccfg+0x10ef280>
    8624:	a4020000 	strge	r0, [r2], #-0
    8628:	0000008c 	andeq	r0, r0, ip, lsl #1
    862c:	00002174 	andeq	r2, r0, r4, ror r1
    8630:	0000005c 	andeq	r0, r0, ip, asr r0
    8634:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
    8638:	701c0000 	andsvc	r0, ip, r0
    863c:	0100001a 	tsteq	r0, sl, lsl r0
    8640:	008c021f 	addeq	r0, ip, pc, lsl r2
    8644:	2f640000 	svccs	0x00640000
    8648:	581d0000 	ldmdapl	sp, {}	; <UNPREDICTABLE>
    864c:	0100001e 	tsteq	r0, lr, lsl r0
    8650:	008c0221 	addeq	r0, ip, r1, lsr #4
    8654:	2f850000 	svccs	0x00850000
    8658:	721d0000 	andsvc	r0, sp, #0
    865c:	0100001f 	tsteq	r0, pc, lsl r0
    8660:	008c0222 	addeq	r0, ip, r2, lsr #4
    8664:	2f980000 	svccs	0x00980000
    8668:	801d0000 	andshi	r0, sp, r0
    866c:	0100001f 	tsteq	r0, pc, lsl r0
    8670:	008c0223 	addeq	r0, ip, r3, lsr #4
    8674:	2fe60000 	svccs	0x00e60000
    8678:	bf1d0000 	svclt	0x001d0000
    867c:	0100001f 	tsteq	r0, pc, lsl r0
    8680:	00810224 	addeq	r0, r1, r4, lsr #4
    8684:	304e0000 	subcc	r0, lr, r0
    8688:	b11d0000 	tstlt	sp, r0
    868c:	0100001f 	tsteq	r0, pc, lsl r0
    8690:	008c0225 	addeq	r0, ip, r5, lsr #4
    8694:	306d0000 	rsbcc	r0, sp, r0
    8698:	1b000000 	blne	86a0 <__exidx_end+0x5a2c>
    869c:	00001d7c 	andeq	r1, r0, ip, ror sp
    86a0:	008cc102 	addeq	ip, ip, r2, lsl #2
    86a4:	21d00000 	bicscs	r0, r0, r0
    86a8:	00180000 	andseq	r0, r8, r0
    86ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    86b0:	000003e7 	andeq	r0, r0, r7, ror #7
    86b4:	001fb11d 	andseq	fp, pc, sp, lsl r1	; <UNPREDICTABLE>
    86b8:	02670100 	rsbeq	r0, r7, #0, 2
    86bc:	0000008c 	andeq	r0, r0, ip, lsl #1
    86c0:	00003092 	muleq	r0, r2, r0
    86c4:	01f51e00 	mvnseq	r1, r0, lsl #28
    86c8:	00000000 	andeq	r0, r0, r0
    86cc:	00100000 	andseq	r0, r0, r0
    86d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    86d4:	00000404 	andeq	r0, r0, r4, lsl #8
    86d8:	00020516 	andeq	r0, r2, r6, lsl r5
    86dc:	0030b900 	eorseq	fp, r0, r0, lsl #18
    86e0:	aa1b0000 	bge	6c86e8 <__ccfg+0x6a8740>
    86e4:	0200001c 	andeq	r0, r0, #28
    86e8:	00008c9d 	muleq	r0, sp, ip
    86ec:	0021e800 	eoreq	lr, r1, r0, lsl #16
    86f0:	00001000 	andeq	r1, r0, r0
    86f4:	3e9c0100 	fmlcce	f0, f4, f0
    86f8:	1d000004 	stcne	0, cr0, [r0, #-16]
    86fc:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    8700:	8c029701 	stchi	7, cr9, [r2], {1}
    8704:	d2000000 	andle	r0, r0, #0
    8708:	1d000030 	stcne	0, cr0, [r0, #-192]	; 0xffffff40
    870c:	00001e58 	andeq	r1, r0, r8, asr lr
    8710:	8c029801 	stchi	8, cr9, [r2], {1}
    8714:	f3000000 	vhadd.u8	d0, d0, d0
    8718:	00000030 	andeq	r0, r0, r0, lsr r0
    871c:	001c8a1b 	andseq	r8, ip, fp, lsl sl
    8720:	8c960200 	lfmhi	f0, 4, [r6], {0}
    8724:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    8728:	14000021 	strne	r0, [r0], #-33	; 0xffffffdf
    872c:	01000000 	mrseq	r0, (UNDEF: 0)
    8730:	0004789c 	muleq	r4, ip, r8
    8734:	1fb11d00 	svcne	0x00b11d00
    8738:	ba010000 	blt	48740 <__ccfg+0x28798>
    873c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8740:	00310600 	eorseq	r0, r1, r0, lsl #12
    8744:	1e581d00 	cdpne	13, 5, cr1, cr8, cr0, {0}
    8748:	bb010000 	bllt	48750 <__ccfg+0x287a8>
    874c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8750:	00312700 	eorseq	r2, r1, r0, lsl #14
    8754:	511b0000 	tstpl	fp, r0
    8758:	0200001f 	andeq	r0, r0, #31
    875c:	00008c8f 	andeq	r8, r0, pc, lsl #25
    8760:	00220c00 	eoreq	r0, r2, r0, lsl #24
    8764:	00006400 	andeq	r6, r0, r0, lsl #8
    8768:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    876c:	1c000004 	stcne	0, cr0, [r0], {4}
    8770:	00001a04 	andeq	r1, r0, r4, lsl #20
    8774:	8c02db01 			; <UNDEFINED> instruction: 0x8c02db01
    8778:	3a000000 	bcc	8780 <__exidx_end+0x5b0c>
    877c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    8780:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    8784:	8c02dd01 	stchi	13, cr13, [r2], {1}
    8788:	5b000000 	blpl	8790 <__exidx_end+0x5b1c>
    878c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    8790:	00001e58 	andeq	r1, r0, r8, asr lr
    8794:	8c02de01 	stchi	14, cr13, [r2], {1}
    8798:	8f000000 	svchi	0x00000000
    879c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87a0:	00001bb2 			; <UNDEFINED> instruction: 0x00001bb2
    87a4:	8c02df01 	stchi	15, cr13, [r2], {1}
    87a8:	a2000000 	andge	r0, r0, #0
    87ac:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87b0:	00001f29 	andeq	r1, r0, r9, lsr #30
    87b4:	8c02e001 	stchi	0, cr14, [r2], {1}
    87b8:	d0000000 	andle	r0, r0, r0
    87bc:	0a000031 	beq	8888 <__exidx_end+0x5c14>
    87c0:	00001e4e 	andeq	r1, r0, lr, asr #28
    87c4:	8c02e101 	stfhid	f6, [r2], {1}
    87c8:	1d000000 	stcne	0, cr0, [r0, #-0]
    87cc:	00001c22 	andeq	r1, r0, r2, lsr #24
    87d0:	8102e201 	tsthi	r2, r1, lsl #4
    87d4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    87d8:	00000031 	andeq	r0, r0, r1, lsr r0
    87dc:	0000be1e 	andeq	fp, r0, lr, lsl lr
    87e0:	00227000 	eoreq	r7, r2, r0
    87e4:	00001400 	andeq	r1, r0, r0, lsl #8
    87e8:	4a9c0100 	bmi	fe708bf0 <_estack+0xde703bf0>
    87ec:	1f000005 	svcne	0x00000005
    87f0:	000000ce 	andeq	r0, r0, lr, asr #1
    87f4:	00003279 	andeq	r3, r0, r9, ror r2
    87f8:	0000da16 	andeq	sp, r0, r6, lsl sl
    87fc:	00329a00 	eorseq	r9, r2, r0, lsl #20
    8800:	22721500 	rsbscs	r1, r2, #0, 10
    8804:	000a0000 	andeq	r0, sl, r0
    8808:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    880c:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    8810:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8814:	00002272 	andeq	r2, r0, r2, ror r2
    8818:	0000000a 	andeq	r0, r0, sl
    881c:	0000da16 	andeq	sp, r0, r6, lsl sl
    8820:	0032da00 	eorseq	sp, r2, r0, lsl #20
    8824:	00000000 	andeq	r0, r0, r0
    8828:	0000e71e 	andeq	lr, r0, lr, lsl r7
    882c:	00228400 	eoreq	r8, r2, r0, lsl #8
    8830:	00001400 	andeq	r1, r0, r0, lsl #8
    8834:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    8838:	1f000005 	svcne	0x00000005
    883c:	000000f7 	strdeq	r0, [r0], -r7
    8840:	000032ed 	andeq	r3, r0, sp, ror #5
    8844:	00010316 	andeq	r0, r1, r6, lsl r3
    8848:	00330e00 	eorseq	r0, r3, r0, lsl #28
    884c:	22861500 	addcs	r1, r6, #0, 10
    8850:	000a0000 	andeq	r0, sl, r0
    8854:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    8858:	2d000000 	stccs	0, cr0, [r0, #-0]
    885c:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    8860:	00002286 	andeq	r2, r0, r6, lsl #5
    8864:	0000000a 	andeq	r0, r0, sl
    8868:	00010316 	andeq	r0, r1, r6, lsl r3
    886c:	00334e00 	eorseq	r4, r3, r0, lsl #28
    8870:	00000000 	andeq	r0, r0, r0
    8874:	0001101e 	andeq	r1, r1, lr, lsl r0
    8878:	00229800 	eoreq	r9, r2, r0, lsl #16
    887c:	00001400 	andeq	r1, r0, r0, lsl #8
    8880:	e29c0100 	adds	r0, ip, #0, 2
    8884:	1f000005 	svcne	0x00000005
    8888:	00000120 	andeq	r0, r0, r0, lsr #2
    888c:	00003361 	andeq	r3, r0, r1, ror #6
    8890:	00012c16 	andeq	r2, r1, r6, lsl ip
    8894:	00338200 	eorseq	r8, r3, r0, lsl #4
    8898:	229a1500 	addscs	r1, sl, #0, 10
    889c:	000a0000 	andeq	r0, sl, r0
    88a0:	201f0000 	andscs	r0, pc, r0
    88a4:	a1000001 	tstge	r0, r1
    88a8:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    88ac:	0000229a 	muleq	r0, sl, r2
    88b0:	0000000a 	andeq	r0, r0, sl
    88b4:	00012c16 	andeq	r2, r1, r6, lsl ip
    88b8:	0033c200 	eorseq	ip, r3, r0, lsl #4
    88bc:	00000000 	andeq	r0, r0, r0
    88c0:	0001391e 	andeq	r3, r1, lr, lsl r9
    88c4:	0022ac00 	eoreq	sl, r2, r0, lsl #24
    88c8:	00002800 	andeq	r2, r0, r0, lsl #16
    88cc:	3c9c0100 	ldfccs	f0, [ip], {0}
    88d0:	1f000006 	svcne	0x00000006
    88d4:	00000149 	andeq	r0, r0, r9, asr #2
    88d8:	000033d5 	ldrdeq	r3, [r0], -r5
    88dc:	00015516 	andeq	r5, r1, r6, lsl r5
    88e0:	0033f600 	eorseq	pc, r3, r0, lsl #12
    88e4:	01612000 	cmneq	r1, r0
    88e8:	ae150000 	cdpge	0, 1, cr0, cr5, cr0, {0}
    88ec:	1c000022 	stcne	0, cr0, [r0], {34}	; 0x22
    88f0:	1f000000 	svcne	0x00000000
    88f4:	00000149 	andeq	r0, r0, r9, asr #2
    88f8:	00003415 	andeq	r3, r0, r5, lsl r4
    88fc:	0022ae15 	eoreq	sl, r2, r5, lsl lr
    8900:	00001c00 	andeq	r1, r0, r0, lsl #24
    8904:	01551600 	cmpeq	r5, r0, lsl #12
    8908:	34360000 	ldrtcc	r0, [r6], #-0
    890c:	61160000 	tstvs	r6, r0
    8910:	63000001 	movwvs	r0, #1
    8914:	00000034 	andeq	r0, r0, r4, lsr r0
    8918:	d71b0000 	ldrle	r0, [fp, -r0]
    891c:	0200001b 	andeq	r0, r0, #27
    8920:	00008ccf 	andeq	r8, r0, pc, asr #25
    8924:	0022d400 	eoreq	sp, r2, r0, lsl #8
    8928:	00001000 	andeq	r1, r0, r0
    892c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    8930:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    8934:	00001c71 	andeq	r1, r0, r1, ror ip
    8938:	8c038401 	cfstrshi	mvf8, [r3], {1}
    893c:	76000000 	strvc	r0, [r0], -r0
    8940:	00000034 	andeq	r0, r0, r4, lsr r0
    8944:	00016e1e 	andeq	r6, r1, lr, lsl lr
    8948:	0022e400 	eoreq	lr, r2, r0, lsl #8
    894c:	00002c00 	andeq	r2, r0, r0, lsl #24
    8950:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    8954:	1f000006 	svcne	0x00000006
    8958:	0000017e 	andeq	r0, r0, lr, ror r1
    895c:	00003491 	muleq	r0, r1, r4
    8960:	00018a16 	andeq	r8, r1, r6, lsl sl
    8964:	0034b200 	eorseq	fp, r4, r0, lsl #4
    8968:	01962000 	orrseq	r2, r6, r0
    896c:	e6150000 	ldr	r0, [r5], -r0
    8970:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    8974:	1f000000 	svcne	0x00000000
    8978:	0000017e 	andeq	r0, r0, lr, ror r1
    897c:	000034d5 	ldrdeq	r3, [r0], -r5
    8980:	0022e615 	eoreq	lr, r2, r5, lsl r6
    8984:	00001e00 	andeq	r1, r0, r0, lsl #28
    8988:	018a1600 	orreq	r1, sl, r0, lsl #12
    898c:	34f60000 	ldrbtcc	r0, [r6], #0
    8990:	96160000 	ldrls	r0, [r6], -r0
    8994:	23000001 	movwcs	r0, #1
    8998:	00000035 	andeq	r0, r0, r5, lsr r0
    899c:	a31e0000 	tstge	lr, #0
    89a0:	10000001 	andne	r0, r0, r1
    89a4:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    89a8:	01000000 	mrseq	r0, (UNDEF: 0)
    89ac:	00070c9c 	muleq	r7, ip, ip
    89b0:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
    89b4:	35360000 	ldrcc	r0, [r6, #-0]!
    89b8:	bf160000 	svclt	0x00160000
    89bc:	57000001 	strpl	r0, [r0, -r1]
    89c0:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    89c4:	00002312 	andeq	r2, r0, r2, lsl r3
    89c8:	0000000a 	andeq	r0, r0, sl
    89cc:	0001b31f 	andeq	fp, r1, pc, lsl r3
    89d0:	00357600 	eorseq	r7, r5, r0, lsl #12
    89d4:	23121500 	tstcs	r2, #0, 10
    89d8:	000a0000 	andeq	r0, sl, r0
    89dc:	bf160000 	svclt	0x00160000
    89e0:	97000001 	strls	r0, [r0, -r1]
    89e4:	00000035 	andeq	r0, r0, r5, lsr r0
    89e8:	cc1e0000 	ldcgt	0, cr0, [lr], {-0}
    89ec:	24000001 	strcs	r0, [r0], #-1
    89f0:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    89f4:	01000000 	mrseq	r0, (UNDEF: 0)
    89f8:	0007589c 	muleq	r7, ip, r8
    89fc:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
    8a00:	35aa0000 	strcc	r0, [sl, #0]!
    8a04:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    8a08:	cb000001 	blgt	8a14 <__exidx_end+0x5da0>
    8a0c:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8a10:	00002326 	andeq	r2, r0, r6, lsr #6
    8a14:	0000000a 	andeq	r0, r0, sl
    8a18:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    8a1c:	0035ea00 	eorseq	lr, r5, r0, lsl #20
    8a20:	23261500 			; <UNDEFINED> instruction: 0x23261500
    8a24:	000a0000 	andeq	r0, sl, r0
    8a28:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    8a2c:	0b000001 	bleq	8a38 <__exidx_end+0x5dc4>
    8a30:	00000036 	andeq	r0, r0, r6, lsr r0
    8a34:	59170000 	ldmdbpl	r7, {}	; <UNPREDICTABLE>
    8a38:	02000019 	andeq	r0, r0, #25
    8a3c:	00233873 	eoreq	r3, r3, r3, ror r8
    8a40:	00011000 	andeq	r1, r1, r0
    8a44:	639c0100 	orrsvs	r0, ip, #0, 2
    8a48:	1c000009 	stcne	0, cr0, [r0], {9}
    8a4c:	00001a04 	andeq	r1, r0, r4, lsl #20
    8a50:	8c012701 	stchi	7, cr2, [r1], {1}
    8a54:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8a58:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    8a5c:	00001a70 	andeq	r1, r0, r0, ror sl
    8a60:	8c012701 	stchi	7, cr2, [r1], {1}
    8a64:	4a000000 	bmi	8a6c <__exidx_end+0x5df8>
    8a68:	1d000036 	stcne	0, cr0, [r0, #-216]	; 0xffffff28
    8a6c:	00001ddb 	ldrdeq	r1, [r0], -fp
    8a70:	8c012901 			; <UNDEFINED> instruction: 0x8c012901
    8a74:	6b000000 	blvs	8a7c <__exidx_end+0x5e08>
    8a78:	21000036 	tstcs	r0, r6, lsr r0
    8a7c:	000001f5 	strdeq	r0, [r0], -r5
    8a80:	00002368 	andeq	r2, r0, r8, ror #6
    8a84:	00000e38 	andeq	r0, r0, r8, lsr lr
    8a88:	c1014001 	tstgt	r1, r1
    8a8c:	12000007 	andne	r0, r0, #7
    8a90:	00000e38 	andeq	r0, r0, r8, lsr lr
    8a94:	00020516 	andeq	r0, r2, r6, lsl r5
    8a98:	00373900 	eorseq	r3, r7, r0, lsl #18
    8a9c:	22000000 	andcs	r0, r0, #0
    8aa0:	00002342 	andeq	r2, r0, r2, asr #6
    8aa4:	00000343 	andeq	r0, r0, r3, asr #6
    8aa8:	000007d6 	ldrdeq	r0, [r0], -r6
    8aac:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
    8ab0:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
    8ab4:	00234e22 	eoreq	r4, r3, r2, lsr #28
    8ab8:	000ad600 	andeq	sp, sl, r0, lsl #12
    8abc:	0007ef00 	andeq	lr, r7, r0, lsl #30
    8ac0:	51011a00 	tstpl	r1, r0, lsl #20
    8ac4:	011a4801 	tsteq	sl, r1, lsl #16
    8ac8:	00740250 	rsbseq	r0, r4, r0, asr r2
    8acc:	23522300 	cmpcs	r2, #0, 6
    8ad0:	03bd0000 			; <UNDEFINED> instruction: 0x03bd0000
    8ad4:	68240000 	stmdavs	r4!, {}	; <UNPREDICTABLE>
    8ad8:	02000023 	andeq	r0, r0, #35	; 0x23
    8adc:	081d0076 	ldmdaeq	sp, {r1, r2, r4, r5, r6}
    8ae0:	011a0000 	tsteq	sl, r0
    8ae4:	1a300153 	bne	c09038 <__ccfg+0xbe9090>
    8ae8:	0a035201 	beq	dd2f4 <__ccfg+0xbd34c>
    8aec:	011a03ff 			; <UNDEFINED> instruction: 0x011a03ff
    8af0:	2c080251 	sfmcs	f0, 4, [r8], {81}	; 0x51
    8af4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8af8:	22000074 	andcs	r0, r0, #116	; 0x74
    8afc:	00002378 	andeq	r2, r0, r8, ror r3
    8b00:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b04:	00000836 	andeq	r0, r0, r6, lsr r8
    8b08:	0151011a 	cmpeq	r1, sl, lsl r1
    8b0c:	50011a4c 	andpl	r1, r1, ip, asr #20
    8b10:	00007402 	andeq	r7, r0, r2, lsl #8
    8b14:	00237c23 	eoreq	r7, r3, r3, lsr #24
    8b18:	00040400 	andeq	r0, r4, r0, lsl #8
    8b1c:	23862200 	orrcs	r2, r6, #0, 4
    8b20:	0ad60000 	beq	ff588b28 <_estack+0xdf583b28>
    8b24:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    8b28:	011a0000 	tsteq	sl, r0
    8b2c:	1a440151 	bne	1109078 <__ccfg+0x10e90d0>
    8b30:	74025001 	strvc	r5, [r2], #-1
    8b34:	8a230000 	bhi	8c8b3c <__ccfg+0x8a8b94>
    8b38:	3e000023 	cdpcc	0, 0, cr0, cr0, cr3, {1}
    8b3c:	22000004 	andcs	r0, r0, #4
    8b40:	00002394 	muleq	r0, r4, r3
    8b44:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b48:	0000087a 	andeq	r0, r0, sl, ror r8
    8b4c:	0151011a 	cmpeq	r1, sl, lsl r1
    8b50:	50011a40 	andpl	r1, r1, r0, asr #20
    8b54:	00007402 	andeq	r7, r0, r2, lsl #8
    8b58:	00239a22 	eoreq	r9, r3, r2, lsr #20
    8b5c:	00047800 	andeq	r7, r4, r0, lsl #16
    8b60:	00088e00 	andeq	r8, r8, r0, lsl #28
    8b64:	50011a00 	andpl	r1, r1, r0, lsl #20
    8b68:	00007502 	andeq	r7, r0, r2, lsl #10
    8b6c:	0023a422 	eoreq	sl, r3, r2, lsr #8
    8b70:	000ad600 	andeq	sp, sl, r0, lsl #12
    8b74:	0008a700 	andeq	sl, r8, r0, lsl #14
    8b78:	51011a00 	tstpl	r1, r0, lsl #20
    8b7c:	011a3c01 	tsteq	sl, r1, lsl #24
    8b80:	00740250 	rsbseq	r0, r4, r0, asr r2
    8b84:	23aa2200 			; <UNDEFINED> instruction: 0x23aa2200
    8b88:	00e70000 	rsceq	r0, r7, r0
    8b8c:	08bb0000 	ldmeq	fp!, {}	; <UNPREDICTABLE>
    8b90:	011a0000 	tsteq	sl, r0
    8b94:	00750250 	rsbseq	r0, r5, r0, asr r2
    8b98:	23bc2200 			; <UNDEFINED> instruction: 0x23bc2200
    8b9c:	01100000 	tsteq	r0, r0
    8ba0:	08cf0000 	stmiaeq	pc, {}^	; <UNPREDICTABLE>
    8ba4:	011a0000 	tsteq	sl, r0
    8ba8:	00750250 	rsbseq	r0, r5, r0, asr r2
    8bac:	23ca2200 	biccs	r2, sl, #0, 4
    8bb0:	01390000 	teqeq	r9, r0
    8bb4:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
    8bb8:	011a0000 	tsteq	sl, r0
    8bbc:	00750250 	rsbseq	r0, r5, r0, asr r2
    8bc0:	23d42200 	bicscs	r2, r4, #0, 4
    8bc4:	0ad60000 	beq	ff588bcc <_estack+0xdf583bcc>
    8bc8:	08fd0000 	ldmeq	sp!, {}^	; <UNPREDICTABLE>
    8bcc:	011a0000 	tsteq	sl, r0
    8bd0:	28080251 	stmdacs	r8, {r0, r4, r6, r9}
    8bd4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bd8:	22000074 	andcs	r0, r0, #116	; 0x74
    8bdc:	000023da 	ldrdeq	r2, [r0], -sl
    8be0:	000000be 	strheq	r0, [r0], -lr
    8be4:	00000911 	andeq	r0, r0, r1, lsl r9
    8be8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bec:	22000075 	andcs	r0, r0, #117	; 0x75
    8bf0:	000023ec 	andeq	r2, r0, ip, ror #7
    8bf4:	000001a3 	andeq	r0, r0, r3, lsr #3
    8bf8:	00000925 	andeq	r0, r0, r5, lsr #18
    8bfc:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c00:	22000075 	andcs	r0, r0, #117	; 0x75
    8c04:	000023fe 	strdeq	r2, [r0], -lr
    8c08:	000001cc 	andeq	r0, r0, ip, asr #3
    8c0c:	00000939 	andeq	r0, r0, r9, lsr r9
    8c10:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c14:	22000075 	andcs	r0, r0, #117	; 0x75
    8c18:	00002412 	andeq	r2, r0, r2, lsl r4
    8c1c:	0000016e 	andeq	r0, r0, lr, ror #2
    8c20:	0000094d 	andeq	r0, r0, sp, asr #18
    8c24:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c28:	19000075 	stmdbne	r0, {r0, r2, r4, r5, r6}
    8c2c:	0000241c 	andeq	r2, r0, ip, lsl r4
    8c30:	00000ad6 	ldrdeq	r0, [r0], -r6
    8c34:	0151011a 	cmpeq	r1, sl, lsl r1
    8c38:	50011a38 	andpl	r1, r1, r8, lsr sl
    8c3c:	00007402 	andeq	r7, r0, r2, lsl #8
    8c40:	19d61700 	ldmibne	r6, {r8, r9, sl, ip}^
    8c44:	fd020000 	stc2	0, cr0, [r2, #-0]
    8c48:	00002448 	andeq	r2, r0, r8, asr #8
    8c4c:	00000064 	andeq	r0, r0, r4, rrx
    8c50:	09899c01 	stmibeq	r9, {r0, sl, fp, ip, pc}
    8c54:	a51d0000 	ldrge	r0, [sp, #-0]
    8c58:	0100001b 	tsteq	r0, fp, lsl r0
    8c5c:	008c03eb 	addeq	r0, ip, fp, ror #7
    8c60:	37520000 	ldrbcc	r0, [r2, -r0]
    8c64:	0c000000 	stceq	0, cr0, [r0], {-0}
    8c68:	00001f33 	andeq	r1, r0, r3, lsr pc
    8c6c:	ac010602 	stcge	6, cr0, [r1], {2}
    8c70:	28000024 	stmdacs	r0, {r2, r5}
    8c74:	01000000 	mrseq	r0, (UNDEF: 0)
    8c78:	0009b09c 	muleq	r9, ip, r0
    8c7c:	1d721c00 	ldclne	12, cr1, [r2, #-0]
    8c80:	13010000 	movwne	r0, #4096	; 0x1000
    8c84:	00008c04 	andeq	r8, r0, r4, lsl #24
    8c88:	00376d00 	eorseq	r6, r7, r0, lsl #26
    8c8c:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
    8c90:	02000019 	andeq	r0, r0, #25
    8c94:	0024d47a 	eoreq	sp, r4, sl, ror r4
    8c98:	00015000 	andeq	r5, r1, r0
    8c9c:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    8ca0:	1c00000a 	stcne	0, cr0, [r0], {10}
    8ca4:	00001a70 	andeq	r1, r0, r0, ror sl
    8ca8:	8c019b01 			; <UNDEFINED> instruction: 0x8c019b01
    8cac:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    8cb0:	1d000037 	stcne	0, cr0, [r0, #-220]	; 0xffffff24
    8cb4:	00001ed1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    8cb8:	8c019d01 	stchi	13, cr9, [r1], {1}
    8cbc:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    8cc0:	1d000037 	stcne	0, cr0, [r0, #-220]	; 0xffffff24
    8cc4:	00001ddb 	ldrdeq	r1, [r0], -fp
    8cc8:	8c019e01 	stchi	14, cr9, [r1], {1}
    8ccc:	fc000000 	stc2	0, cr0, [r0], {-0}
    8cd0:	1d000037 	stcne	0, cr0, [r0, #-220]	; 0xffffff24
    8cd4:	00001b25 	andeq	r1, r0, r5, lsr #22
    8cd8:	8c019f01 	stchi	15, cr9, [r1], {1}
    8cdc:	0f000000 	svceq	0x00000000
    8ce0:	1d000038 	stcne	0, cr0, [r0, #-224]	; 0xffffff20
    8ce4:	00001b00 	andeq	r1, r0, r0, lsl #22
    8ce8:	8c01a001 	stchi	0, cr10, [r1], {1}
    8cec:	2d000000 	stccs	0, cr0, [r0, #-0]
    8cf0:	25000038 	strcs	r0, [r0, #-56]	; 0xffffffc8
    8cf4:	00000212 	andeq	r0, r0, r2, lsl r2
    8cf8:	000025e6 	andeq	r2, r0, r6, ror #11
    8cfc:	0000003e 	andeq	r0, r0, lr, lsr r0
    8d00:	23021601 	movwcs	r1, #9729	; 0x2601
    8d04:	0000255e 	andeq	r2, r0, lr, asr r5
    8d08:	0000063c 	andeq	r0, r0, ip, lsr r6
    8d0c:	00258022 	eoreq	r8, r5, r2, lsr #32
    8d10:	000af200 	andeq	pc, sl, r0, lsl #4
    8d14:	000a4600 	andeq	r4, sl, r0, lsl #12
    8d18:	51011a00 	tstpl	r1, r0, lsl #20
    8d1c:	011a3101 	tsteq	sl, r1, lsl #2
    8d20:	00340150 	eorseq	r0, r4, r0, asr r1
    8d24:	00258622 	eoreq	r8, r5, r2, lsr #12
    8d28:	00098900 	andeq	r8, r9, r0, lsl #18
    8d2c:	000a5d00 	andeq	r5, sl, r0, lsl #26
    8d30:	50011a00 	andpl	r1, r1, r0, lsl #20
    8d34:	37bd0c05 	ldrcc	r0, [sp, r5, lsl #24]!
    8d38:	23000086 	movwcs	r0, #134	; 0x86
    8d3c:	0000258c 	andeq	r2, r0, ip, lsl #11
    8d40:	00000b08 	andeq	r0, r0, r8, lsl #22
    8d44:	00259622 	eoreq	r9, r5, r2, lsr #12
    8d48:	000af200 	andeq	pc, sl, r0, lsl #4
    8d4c:	000a7f00 	andeq	r7, sl, r0, lsl #30
    8d50:	51011a00 	tstpl	r1, r0, lsl #20
    8d54:	1a007402 	bne	25d64 <__ccfg+0x5dbc>
    8d58:	34015001 	strcc	r5, [r1], #-1
    8d5c:	259c2200 	ldrcs	r2, [ip, #512]	; 0x200
    8d60:	0b080000 	bleq	208d68 <__ccfg+0x1e8dc0>
    8d64:	0a920000 	beq	fe488d6c <_estack+0xde483d6c>
    8d68:	011a0000 	tsteq	sl, r0
    8d6c:	00340150 	eorseq	r0, r4, r0, asr r1
    8d70:	0025ac22 	eoreq	sl, r5, r2, lsr #24
    8d74:	00098900 	andeq	r8, r9, r0, lsl #18
    8d78:	000aac00 	andeq	sl, sl, r0, lsl #24
    8d7c:	50011a00 	andpl	r1, r1, r0, lsl #20
    8d80:	0c007408 	cfstrseq	mvf7, [r0], {8}
    8d84:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    8d88:	bc26001a 	stclt	0, cr0, [r6], #-104	; 0xffffff98
    8d8c:	cc000025 	stcgt	0, cr0, [r0], {37}	; 0x25
    8d90:	1a00000a 	bne	8dc0 <__exidx_end+0x614c>
    8d94:	0c055201 	sfmeq	f5, 4, [r5], {1}
    8d98:	60006000 	andvs	r6, r0, r0
    8d9c:	0151011a 	cmpeq	r1, sl, lsl r1
    8da0:	50011a37 	andpl	r1, r1, r7, lsr sl
    8da4:	48007404 	stmdami	r0, {r2, sl, ip, sp, lr}
    8da8:	d2230025 	eorle	r0, r3, #37	; 0x25
    8dac:	f2000025 	vhadd.s8	d0, d0, d21
    8db0:	0000000a 	andeq	r0, r0, sl
    8db4:	001ceb27 	andseq	lr, ip, r7, lsr #22
    8db8:	01ca0600 	biceq	r0, sl, r0, lsl #12
    8dbc:	00000af2 	strdeq	r0, [r0], -r2
    8dc0:	00008c28 	andeq	r8, r0, r8, lsr #24
    8dc4:	008c2800 	addeq	r2, ip, r0, lsl #16
    8dc8:	8c280000 	stchi	0, cr0, [r8], #-0
    8dcc:	00000000 	andeq	r0, r0, r0
    8dd0:	001b0d29 	andseq	r0, fp, r9, lsr #26
    8dd4:	08f90700 	ldmeq	r9!, {r8, r9, sl}^
    8dd8:	2800000b 	stmdacs	r0, {r0, r1, r3}
    8ddc:	0000008c 	andeq	r0, r0, ip, lsl #1
    8de0:	00008c28 	andeq	r8, r0, r8, lsr #24
    8de4:	a82a0000 	stmdage	sl!, {}	; <UNPREDICTABLE>
    8de8:	0700001e 	smladeq	r0, lr, r0, r0
    8dec:	008c0110 	addeq	r0, ip, r0, lsl r1
    8df0:	8c280000 	stchi	0, cr0, [r8], #-0
    8df4:	00000000 	andeq	r0, r0, r0
    8df8:	00092300 	andeq	r2, r9, r0, lsl #6
    8dfc:	6c000400 	cfstrsvs	mvf0, [r0], {-0}
    8e00:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    8e04:	00165001 	andseq	r5, r6, r1
    8e08:	20bb0100 	adcscs	r0, fp, r0, lsl #2
    8e0c:	17450000 	strbne	r0, [r5, -r0]
    8e10:	0f280000 	svceq	0x00280000
    8e14:	00000000 	andeq	r0, r0, r0
    8e18:	62750000 	rsbsvs	r0, r5, #0
    8e1c:	00020000 	andeq	r0, r2, r0
    8e20:	06000017 			; <UNDEFINED> instruction: 0x06000017
    8e24:	0000301b 	andeq	r3, r0, fp, lsl r0
    8e28:	06010300 	streq	r0, [r1], -r0, lsl #6
    8e2c:	000003a3 	andeq	r0, r0, r3, lsr #7
    8e30:	0021fa02 	eoreq	pc, r1, r2, lsl #20
    8e34:	421d0600 	andsmi	r0, sp, #0, 12
    8e38:	03000000 	movweq	r0, #0
    8e3c:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    8e40:	02030000 	andeq	r0, r3, #0
    8e44:	0003dd05 	andeq	sp, r3, r5, lsl #26
    8e48:	20e80200 	rsccs	r0, r8, r0, lsl #4
    8e4c:	2b060000 	blcs	188e54 <__ccfg+0x168eac>
    8e50:	0000005b 	andeq	r0, r0, fp, asr r0
    8e54:	71070203 	tstvc	r7, r3, lsl #4
    8e58:	02000002 	andeq	r0, r0, #2
    8e5c:	00001646 	andeq	r1, r0, r6, asr #12
    8e60:	006d3f06 	rsbeq	r3, sp, r6, lsl #30
    8e64:	04030000 	streq	r0, [r3], #-0
    8e68:	00009d05 	andeq	r9, r0, r5, lsl #26
    8e6c:	17b10200 	ldrne	r0, [r1, r0, lsl #4]!
    8e70:	41060000 	mrsmi	r0, (UNDEF: 6)
    8e74:	0000007f 	andeq	r0, r0, pc, ror r0
    8e78:	72070403 	andvc	r0, r7, #50331648	; 0x3000000
    8e7c:	03000000 	movweq	r0, #0
    8e80:	00980508 	addseq	r0, r8, r8, lsl #10
    8e84:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8e88:	00006d07 	andeq	r6, r0, r7, lsl #26
    8e8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8e90:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8e94:	77070403 	strvc	r0, [r7, -r3, lsl #8]
    8e98:	02000000 	andeq	r0, r0, #0
    8e9c:	00001702 	andeq	r1, r0, r2, lsl #14
    8ea0:	00251307 	eoreq	r1, r5, r7, lsl #6
    8ea4:	fc020000 	stc2	0, cr0, [r2], {-0}
    8ea8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    8eac:	00003714 	andeq	r3, r0, r4, lsl r7
    8eb0:	20ea0200 	rsccs	r0, sl, r0, lsl #4
    8eb4:	1a070000 	bne	1c8ebc <__ccfg+0x1a8f14>
    8eb8:	00000050 	andeq	r0, r0, r0, asr r0
    8ebc:	00164802 	andseq	r4, r6, r2, lsl #16
    8ec0:	621f0700 	andsvs	r0, pc, #0, 14
    8ec4:	02000000 	andeq	r0, r0, #0
    8ec8:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    8ecc:	00742007 	rsbseq	r2, r4, r7
    8ed0:	d3020000 	movwle	r0, #8192	; 0x2000
    8ed4:	08000022 	stmdaeq	r0, {r1, r5}
    8ed8:	0000e433 	andeq	lr, r0, r3, lsr r4
    8edc:	ea040500 	b	10a2e4 <__ccfg+0xea33c>
    8ee0:	06000000 	streq	r0, [r0], -r0
    8ee4:	00f10405 	rscseq	r0, r1, r5, lsl #8
    8ee8:	fc070000 	stc2	0, cr0, [r7], {-0}
    8eec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8ef0:	000000ad 	andeq	r0, r0, sp, lsr #1
    8ef4:	23490200 	movtcs	r0, #37376	; 0x9200
    8ef8:	42090000 	andmi	r0, r9, #0
    8efc:	00000107 	andeq	r0, r0, r7, lsl #2
    8f00:	010d0405 	tsteq	sp, r5, lsl #8
    8f04:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8f08:	26000000 	strcs	r0, [r0], -r0
    8f0c:	08000001 	stmdaeq	r0, {r0}
    8f10:	00000126 	andeq	r0, r0, r6, lsr #2
    8f14:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f18:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    8f1c:	05000000 	streq	r0, [r0, #-0]
    8f20:	0000ad04 	andeq	sl, r0, r4, lsl #26
    8f24:	24720200 	ldrbtcs	r0, [r2], #-512	; 0xfffffe00
    8f28:	46090000 	strmi	r0, [r9], -r0
    8f2c:	00000137 	andeq	r0, r0, r7, lsr r1
    8f30:	013d0405 	teqeq	sp, r5, lsl #8
    8f34:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    8f38:	02000000 	andeq	r0, r0, #0
    8f3c:	000024de 	ldrdeq	r2, [r0], -lr
    8f40:	01374809 	teqeq	r7, r9, lsl #16
    8f44:	24020000 	strcs	r0, [r2], #-0
    8f48:	09000022 	stmdbeq	r0, {r1, r5}
    8f4c:	0001584a 	andeq	r5, r1, sl, asr #16
    8f50:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    8f54:	09000001 	stmdbeq	r0, {r0}
    8f58:	000000ce 	andeq	r0, r0, lr, asr #1
    8f5c:	0000016d 	andeq	r0, r0, sp, ror #2
    8f60:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f64:	8a020000 	bhi	88f6c <__ccfg+0x68fc4>
    8f68:	09000021 	stmdbeq	r0, {r0, r5}
    8f6c:	0001374c 	andeq	r3, r1, ip, asr #14
    8f70:	20f30200 	rscscs	r0, r3, r0, lsl #4
    8f74:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    8f78:	00000107 	andeq	r0, r0, r7, lsl #2
    8f7c:	00217a02 	eoreq	r7, r1, r2, lsl #20
    8f80:	e4510900 	ldrb	r0, [r1], #-2304	; 0xfffff700
    8f84:	02000000 	andeq	r0, r0, #0
    8f88:	00001ff6 	strdeq	r1, [r0], -r6
    8f8c:	01995309 	orrseq	r5, r9, r9, lsl #6
    8f90:	04050000 	streq	r0, [r5], #-0
    8f94:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    8f98:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8f9c:	0001b800 	andeq	fp, r1, r0, lsl #16
    8fa0:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    8fa4:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    8fa8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8fac:	000000b8 	strheq	r0, [r0], -r8
    8fb0:	b8040500 	stmdalt	r4, {r8, sl}
    8fb4:	02000000 	andeq	r0, r0, #0
    8fb8:	0000236d 	andeq	r2, r0, sp, ror #6
    8fbc:	01c95709 	biceq	r5, r9, r9, lsl #14
    8fc0:	04050000 	streq	r0, [r5], #-0
    8fc4:	000001cf 	andeq	r0, r0, pc, asr #3
    8fc8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8fcc:	0001e300 	andeq	lr, r1, r0, lsl #6
    8fd0:	01e30800 	mvneq	r0, r0, lsl #16
    8fd4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    8fd8:	00000000 	andeq	r0, r0, r0
    8fdc:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    8fe0:	ad020000 	stcge	0, cr0, [r2, #-0]
    8fe4:	09000021 	stmdbeq	r0, {r0, r5}
    8fe8:	0001c95a 	andeq	ip, r1, sl, asr r9
    8fec:	22760200 	rsbscs	r0, r6, #0, 4
    8ff0:	5d090000 	stcpl	0, cr0, [r9, #-0]
    8ff4:	000001c9 	andeq	r0, r0, r9, asr #3
    8ff8:	00200802 	eoreq	r0, r0, r2, lsl #16
    8ffc:	c9600900 	stmdbgt	r0!, {r8, fp}^
    9000:	02000001 	andeq	r0, r0, #1
    9004:	00002398 	muleq	r0, r8, r3
    9008:	00e46309 	rsceq	r6, r4, r9, lsl #6
    900c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    9010:	09000020 	stmdbeq	r0, {r5}
    9014:	00022065 	andeq	r2, r2, r5, rrx
    9018:	26040500 	strcs	r0, [r4], -r0, lsl #10
    901c:	07000002 	streq	r0, [r0, -r2]
    9020:	00000231 	andeq	r0, r0, r1, lsr r2
    9024:	0000ce08 	andeq	ip, r0, r8, lsl #28
    9028:	ef020000 	svc	0x00020000
    902c:	09000024 	stmdbeq	r0, {r2, r5}
    9030:	00022067 	andeq	r2, r2, r7, rrx
    9034:	22e40200 	rsccs	r0, r4, #0, 4
    9038:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    903c:	000000eb 	andeq	r0, r0, fp, ror #1
    9040:	0024bd02 	eoreq	fp, r4, r2, lsl #26
    9044:	eb6b0900 	bl	1acb44c <__ccfg+0x1aab4a4>
    9048:	02000000 	andeq	r0, r0, #0
    904c:	00002292 	muleq	r0, r2, r2
    9050:	00eb6d09 	rsceq	r6, fp, r9, lsl #26
    9054:	a4020000 	strge	r0, [r2], #-0
    9058:	09000022 	stmdbeq	r0, {r1, r5}
    905c:	0000eb6f 	andeq	lr, r0, pc, ror #22
    9060:	094c0b00 	stmdbeq	ip, {r8, r9, fp}^
    9064:	0003557a 	andeq	r5, r3, sl, ror r5
    9068:	22480c00 	subcs	r0, r8, #0, 24
    906c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    9070:	000000fc 	strdeq	r0, [r0], -ip
    9074:	24b00c00 	ldrtcs	r0, [r0], #3072	; 0xc00
    9078:	7d090000 	stcvc	0, cr0, [r9, #-0]
    907c:	0000012c 	andeq	r0, r0, ip, lsr #2
    9080:	226c0c04 	rsbcs	r0, ip, #4, 24	; 0x400
    9084:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    9088:	00000142 	andeq	r0, r0, r2, asr #2
    908c:	23d70c08 	bicscs	r0, r7, #8, 24	; 0x800
    9090:	7f090000 	svcvc	0x00090000
    9094:	0000014d 	andeq	r0, r0, sp, asr #2
    9098:	23e90c0c 	mvncs	r0, #12, 24	; 0xc00
    909c:	80090000 	andhi	r0, r9, r0
    90a0:	0000016d 	andeq	r0, r0, sp, ror #2
    90a4:	23fb0c10 	mvnscs	r0, #16, 24	; 0x1000
    90a8:	81090000 	mrshi	r0, (UNDEF: 9)
    90ac:	00000178 	andeq	r0, r0, r8, ror r1
    90b0:	21460c14 	cmpcs	r6, r4, lsl ip
    90b4:	82090000 	andhi	r0, r9, #0
    90b8:	00000183 	andeq	r0, r0, r3, lsl #3
    90bc:	22610c18 	rsbcs	r0, r1, #24, 24	; 0x1800
    90c0:	83090000 	movwhi	r0, #36864	; 0x9000
    90c4:	0000018e 	andeq	r0, r0, lr, lsl #3
    90c8:	23b20c1c 			; <UNDEFINED> instruction: 0x23b20c1c
    90cc:	84090000 	strhi	r0, [r9], #-0
    90d0:	000001be 			; <UNDEFINED> instruction: 0x000001be
    90d4:	21e90c20 	mvncs	r0, r0, lsr #24
    90d8:	85090000 	strhi	r0, [r9, #-0]
    90dc:	000001e9 	andeq	r0, r0, r9, ror #3
    90e0:	22040c24 	andcs	r0, r4, #36, 24	; 0x2400
    90e4:	86090000 	strhi	r0, [r9], -r0
    90e8:	000001f4 	strdeq	r0, [r0], -r4
    90ec:	241f0c28 	ldrcs	r0, [pc], #-3112	; 90f4 <__exidx_end+0x6480>
    90f0:	87090000 	strhi	r0, [r9, -r0]
    90f4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    90f8:	219b0c2c 	orrscs	r0, fp, ip, lsr #24
    90fc:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    9100:	00000215 	andeq	r0, r0, r5, lsl r2
    9104:	240d0c30 	strcs	r0, [sp], #-3120	; 0xfffff3d0
    9108:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    910c:	00000231 	andeq	r0, r0, r1, lsr r2
    9110:	224e0c34 	subcs	r0, lr, #52, 24	; 0x3400
    9114:	8a090000 	bhi	24911c <__ccfg+0x229174>
    9118:	0000020a 	andeq	r0, r0, sl, lsl #4
    911c:	22c20c38 	sbccs	r0, r2, #56, 24	; 0x3800
    9120:	8b090000 	blhi	249128 <__ccfg+0x229180>
    9124:	0000023c 	andeq	r0, r0, ip, lsr r2
    9128:	23c80c3c 	biccs	r0, r8, #60, 24	; 0x3c00
    912c:	8c090000 	stchi	0, cr0, [r9], {-0}
    9130:	00000247 	andeq	r0, r0, r7, asr #4
    9134:	21c30c40 	biccs	r0, r3, r0, asr #24
    9138:	8d090000 	stchi	0, cr0, [r9, #-0]
    913c:	00000252 	andeq	r0, r0, r2, asr r2
    9140:	201f0c44 	andscs	r0, pc, r4, asr #24
    9144:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    9148:	0000025d 	andeq	r0, r0, sp, asr r2
    914c:	23020048 	movwcs	r0, #8264	; 0x2048
    9150:	09000023 	stmdbeq	r0, {r0, r1, r5}
    9154:	0002688f 	andeq	r6, r2, pc, lsl #17
    9158:	01080b00 	tsteq	r8, r0, lsl #22
    915c:	0003994e 	andeq	r9, r3, lr, asr #18
    9160:	23660c00 	cmncs	r6, #0, 24
    9164:	4f010000 	svcmi	0x00010000
    9168:	000000ce 	andeq	r0, r0, lr, asr #1
    916c:	24330c00 	ldrtcs	r0, [r3], #-3072	; 0xfffff400
    9170:	50010000 	andpl	r0, r1, r0
    9174:	000000b8 	strheq	r0, [r0], -r8
    9178:	21f20c04 	mvnscs	r0, r4, lsl #24
    917c:	51010000 	mrspl	r0, (UNDEF: 1)
    9180:	000000ad 	andeq	r0, r0, sp, lsr #1
    9184:	21310c06 	teqcs	r1, r6, lsl #24
    9188:	52010000 	andpl	r0, r1, #0
    918c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9190:	5f020007 	svcpl	0x00020007
    9194:	01000024 	tsteq	r0, r4, lsr #32
    9198:	00036053 	andeq	r6, r3, r3, asr r0
    919c:	05300d00 	ldreq	r0, [r0, #-3328]!	; 0xfffff300
    91a0:	dc020000 	stcle	0, cr0, [r2], {-0}
    91a4:	03be0301 			; <UNDEFINED> instruction: 0x03be0301
    91a8:	ea0e0000 	b	3891b0 <__ccfg+0x369208>
    91ac:	02000004 	andeq	r0, r0, #4
    91b0:	00ce01dc 	ldrdeq	r0, [lr], #28
    91b4:	0f000000 	svceq	0x00000000
    91b8:	00000545 	andeq	r0, r0, r5, asr #10
    91bc:	ce022c02 	cdpgt	12, 0, cr2, cr2, cr2, {0}
    91c0:	03000000 	movweq	r0, #0
    91c4:	00064f10 	andeq	r4, r6, r0, lsl pc
    91c8:	022a0400 	eoreq	r0, sl, #0, 8
    91cc:	1de41103 	stfnee	f1, [r4, #12]!
    91d0:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    91d4:	000000c3 	andeq	r0, r0, r3, asr #1
    91d8:	0003fb03 	andeq	pc, r3, r3, lsl #22
    91dc:	1b341200 	blne	d0d9e4 <__ccfg+0xceda3c>
    91e0:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    91e4:	000000ce 	andeq	r0, r0, lr, asr #1
    91e8:	001e3d13 	andseq	r3, lr, r3, lsl sp
    91ec:	c3ef0500 	mvngt	r0, #0, 10
    91f0:	00000000 	andeq	r0, r0, r0
    91f4:	0021520d 	eoreq	r5, r1, sp, lsl #4
    91f8:	025c0400 	subseq	r0, ip, #0, 8
    91fc:	00041503 	andeq	r1, r4, r3, lsl #10
    9200:	21200e00 			; <UNDEFINED> instruction: 0x21200e00
    9204:	5c040000 	stcpl	0, cr0, [r4], {-0}
    9208:	0000ce02 	andeq	ip, r0, r2, lsl #28
    920c:	37100000 	ldrcc	r0, [r0, -r0]
    9210:	03000023 	movweq	r0, #35	; 0x23
    9214:	0f030140 	svceq	0x00030140
    9218:	000022f3 	strdeq	r2, [r0], -r3
    921c:	2b023e04 	blcs	98a34 <__ccfg+0x78a8c>
    9220:	03000004 	movweq	r0, #4
    9224:	b8020103 	stmdalt	r2, {r0, r1, r8}
    9228:	1400000b 	strne	r0, [r0], #-11
    922c:	0000237b 	andeq	r2, r0, fp, ror r3
    9230:	00009e0a 	andeq	r9, r0, sl, lsl #28
    9234:	00f40000 	rscseq	r0, r4, r0
    9238:	9c010000 	stcls	0, cr0, [r1], {-0}
    923c:	000005cd 	andeq	r0, r0, sp, asr #11
    9240:	0021e115 	eoreq	lr, r1, r5, lsl r1
    9244:	ce7b0100 	rpwgte	f0, f3, f0
    9248:	40000000 	andmi	r0, r0, r0
    924c:	16000038 			; <UNDEFINED> instruction: 0x16000038
    9250:	00002138 	andeq	r2, r0, r8, lsr r1
    9254:	00ce7c01 	sbceq	r7, lr, r1, lsl #24
    9258:	07ff0000 	ldrbeq	r0, [pc, r0]!
    925c:	0003a417 	andeq	sl, r3, r7, lsl r4
    9260:	00000000 	andeq	r0, r0, r0
    9264:	000ef800 	andeq	pc, lr, r0, lsl #16
    9268:	7d810100 	stfvcs	f0, [r1]
    926c:	18000004 	stmdane	r0, {r2}
    9270:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    9274:	be190001 	cdplt	0, 1, cr0, cr9, cr1, {0}
    9278:	00000003 	andeq	r0, r0, r3
    927c:	04000000 	streq	r0, [r0], #-0
    9280:	01000000 	mrseq	r0, (UNDEF: 0)
    9284:	04151a82 	ldreq	r1, [r5], #-2690	; 0xfffff57e
    9288:	00000000 	andeq	r0, r0, r0
    928c:	00080000 	andeq	r0, r8, r0
    9290:	a1010000 	mrsge	r0, (UNDEF: 1)
    9294:	000004a9 	andeq	r0, r0, r9, lsr #9
    9298:	0000001b 	andeq	r0, r0, fp, lsl r0
    929c:	0008de00 	andeq	sp, r8, r0, lsl #28
    92a0:	cb190000 	blgt	6492a8 <__ccfg+0x629300>
    92a4:	00000003 	andeq	r0, r0, r3
    92a8:	06000000 	streq	r0, [r0], -r0
    92ac:	01000000 	mrseq	r0, (UNDEF: 0)
    92b0:	041e19b1 	ldreq	r1, [lr], #-2481	; 0xfffff64f
    92b4:	00000000 	andeq	r0, r0, r0
    92b8:	00040000 	andeq	r0, r4, r0
    92bc:	b2010000 	andlt	r0, r1, #0
    92c0:	0003fb1a 	andeq	pc, r3, sl, lsl fp	; <UNPREDICTABLE>
    92c4:	00000000 	andeq	r0, r0, r0
    92c8:	00000a00 	andeq	r0, r0, r0, lsl #20
    92cc:	e1b80100 			; <UNDEFINED> instruction: 0xe1b80100
    92d0:	18000004 	stmdane	r0, {r2}
    92d4:	00000408 	andeq	r0, r0, r8, lsl #8
    92d8:	cb190011 	blgt	649324 <__ccfg+0x62937c>
    92dc:	00000003 	andeq	r0, r0, r3
    92e0:	04000000 	streq	r0, [r0], #-0
    92e4:	01000000 	mrseq	r0, (UNDEF: 0)
    92e8:	041e19b9 	ldreq	r1, [lr], #-2489	; 0xfffff647
    92ec:	00000000 	andeq	r0, r0, r0
    92f0:	00020000 	andeq	r0, r2, r0
    92f4:	ba010000 	blt	492fc <__ccfg+0x29354>
    92f8:	0003cb19 	andeq	ip, r3, r9, lsl fp
    92fc:	00000000 	andeq	r0, r0, r0
    9300:	00000600 	andeq	r0, r0, r0, lsl #12
    9304:	19cf0100 	stmibne	pc, {r8}^	; <UNPREDICTABLE>
    9308:	0000041e 	andeq	r0, r0, lr, lsl r4
    930c:	00000000 	andeq	r0, r0, r0
    9310:	00000002 	andeq	r0, r0, r2
    9314:	001cd001 	andseq	sp, ip, r1
    9318:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    931c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9320:	0a035001 	beq	dd32c <__ccfg+0xbd384>
    9324:	1c0007ff 	stcne	7, cr0, [r0], {255}	; 0xff
    9328:	00000000 	andeq	r0, r0, r0
    932c:	0000053f 	andeq	r0, r0, pc, lsr r5
    9330:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
    9334:	0007ff0a 	andeq	pc, r7, sl, lsl #30
    9338:	0000001e 	andeq	r0, r0, lr, lsl r0
    933c:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9340:	00055700 	andeq	r5, r5, r0, lsl #14
    9344:	51011d00 	tstpl	r1, r0, lsl #26
    9348:	011d3101 	tsteq	sp, r1, lsl #2
    934c:	00330150 	eorseq	r0, r3, r0, asr r1
    9350:	0000001e 	andeq	r0, r0, lr, lsl r0
    9354:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9358:	00056f00 	andeq	r6, r5, r0, lsl #30
    935c:	51011d00 	tstpl	r1, r0, lsl #26
    9360:	011d3301 	tsteq	sp, r1, lsl #6
    9364:	00340150 	eorseq	r0, r4, r0, asr r1
    9368:	0000001e 	andeq	r0, r0, lr, lsl r0
    936c:	00090500 	andeq	r0, r9, r0, lsl #10
    9370:	00058200 	andeq	r8, r5, r0, lsl #4
    9374:	50011d00 	andpl	r1, r1, r0, lsl #26
    9378:	1c003101 	stfnes	f3, [r0], {1}
    937c:	00000000 	andeq	r0, r0, r0
    9380:	00000591 	muleq	r0, r1, r5
    9384:	0150011d 	cmpeq	r0, sp, lsl r1
    9388:	001c0037 	andseq	r0, ip, r7, lsr r0
    938c:	a0000000 	andge	r0, r0, r0
    9390:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9394:	37015001 	strcc	r5, [r1, -r1]
    9398:	00001c00 	andeq	r1, r0, r0, lsl #24
    939c:	05b00000 	ldreq	r0, [r0, #0]!
    93a0:	011d0000 	tsteq	sp, r0
    93a4:	00760250 	rsbseq	r0, r6, r0, asr r2
    93a8:	00001c00 	andeq	r1, r0, r0, lsl #24
    93ac:	05c00000 	strbeq	r0, [r0]
    93b0:	011d0000 	tsteq	sp, r0
    93b4:	00760250 	rsbseq	r0, r6, r0, asr r2
    93b8:	00001f00 	andeq	r1, r0, r0, lsl #30
    93bc:	011d0000 	tsteq	sp, r0
    93c0:	00760250 	rsbseq	r0, r6, r0, asr r2
    93c4:	93200000 	nopls	{0}	; <UNPREDICTABLE>
    93c8:	0a000020 	beq	9450 <__exidx_end+0x67dc>
    93cc:	26240101 	strtcs	r0, [r4], -r1, lsl #2
    93d0:	02200000 	eoreq	r0, r0, #0
    93d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    93d8:	000007c8 	andeq	r0, r0, r8, asr #15
    93dc:	0022b421 	eoreq	fp, r2, r1, lsr #8
    93e0:	ceda0100 	cdpgt	1, 13, cr0, cr10, cr0, {0}
    93e4:	6b000000 	blvs	93ec <__exidx_end+0x6778>
    93e8:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    93ec:	00002017 	andeq	r2, r0, r7, lsl r0
    93f0:	00c3dc01 	sbceq	sp, r3, r1, lsl #24
    93f4:	38970000 	ldmcc	r7, {}	; <UNPREDICTABLE>
    93f8:	ff150000 			; <UNDEFINED> instruction: 0xff150000
    93fc:	01000022 	tsteq	r0, r2, lsr #32
    9400:	0000c3dd 	ldrdeq	ip, [r0], -sp
    9404:	0038b500 	eorseq	fp, r8, r0, lsl #10
    9408:	22351500 	eorscs	r1, r5, #0, 10
    940c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    9410:	000000c3 	andeq	r0, r0, r3, asr #1
    9414:	0000390f 	andeq	r3, r0, pc, lsl #18
    9418:	00245115 	eoreq	r5, r4, r5, lsl r1
    941c:	c3df0100 	bicsgt	r0, pc, #0, 2
    9420:	2d000000 	stccs	0, cr0, [r0, #-0]
    9424:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    9428:	00001fe8 	andeq	r1, r0, r8, ror #31
    942c:	00c3e001 	sbceq	lr, r3, r1
    9430:	394b0000 	stmdbcc	fp, {}^	; <UNPREDICTABLE>
    9434:	3f220000 	svccc	0x00220000
    9438:	01000020 	tsteq	r0, r0, lsr #32
    943c:	0000c3e1 	andeq	ip, r0, r1, ror #7
    9440:	15530100 	ldrbne	r0, [r3, #-256]	; 0xffffff00
    9444:	00001a70 	andeq	r1, r0, r0, ror sl
    9448:	00cee201 	sbceq	lr, lr, r1, lsl #4
    944c:	395e0000 	ldmdbcc	lr, {}^	; <UNPREDICTABLE>
    9450:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    9454:	01000023 	tsteq	r0, r3, lsr #32
    9458:	0000cee3 	andeq	ip, r0, r3, ror #29
    945c:	00397100 	eorseq	r7, r9, r0, lsl #2
    9460:	20531500 	subscs	r1, r3, r0, lsl #10
    9464:	e4010000 	str	r0, [r1], #-0
    9468:	000000ce 	andeq	r0, r0, lr, asr #1
    946c:	00003990 	muleq	r0, r0, r9
    9470:	00696423 	rsbeq	r6, r9, r3, lsr #8
    9474:	00cee501 	sbceq	lr, lr, r1, lsl #10
    9478:	39a30000 	stmibcc	r3!, {}	; <UNPREDICTABLE>
    947c:	64230000 	strtvs	r0, [r3], #-0
    9480:	01006969 	tsteq	r0, r9, ror #18
    9484:	0000cee6 	andeq	ip, r0, r6, ror #29
    9488:	0039d900 	eorseq	sp, r9, r0, lsl #18
    948c:	69742300 	ldmdbvs	r4!, {r8, r9, sp}^
    9490:	cee70100 	cdpgt	1, 14, cr0, cr7, cr0, {0}
    9494:	0f000000 	svceq	0x00000000
    9498:	2300003a 	movwcs	r0, #58	; 0x3a
    949c:	01006463 	tsteq	r0, r3, ror #8
    94a0:	0000cee8 	andeq	ip, r0, r8, ror #29
    94a4:	003a7f00 	eorseq	r7, sl, r0, lsl #30
    94a8:	6c632300 	stclvs	3, cr2, [r3], #-0
    94ac:	cee90100 	cdpgt	1, 14, cr0, cr9, cr0, {0}
    94b0:	92000000 	andls	r0, r0, #0
    94b4:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    94b8:	00002064 	andeq	r2, r0, r4, rrx
    94bc:	00ceea01 	sbceq	lr, lr, r1, lsl #20
    94c0:	3aa50000 	bcc	fe9494c8 <_estack+0xde9444c8>
    94c4:	6b240000 	blvs	9094cc <__ccfg+0x8e9524>
    94c8:	ceeb0100 	cdpgt	1, 14, cr0, cr11, cr0, {0}
    94cc:	13000000 	movwne	r0, #0
    94d0:	000021bb 			; <UNDEFINED> instruction: 0x000021bb
    94d4:	00ceec01 	sbceq	lr, lr, r1, lsl #24
    94d8:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
    94dc:	01000021 	tsteq	r0, r1, lsr #32
    94e0:	0000ceed 	andeq	ip, r0, sp, ror #29
    94e4:	003ac300 	eorseq	ip, sl, r0, lsl #6
    94e8:	212c1500 			; <UNDEFINED> instruction: 0x212c1500
    94ec:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    94f0:	000000ce 	andeq	r0, r0, lr, asr #1
    94f4:	00003aec 	andeq	r3, r0, ip, ror #21
    94f8:	00216315 	eoreq	r6, r1, r5, lsl r3
    94fc:	ceef0100 	cdpgt	1, 14, cr0, cr15, cr0, {0}
    9500:	0b000000 	bleq	9508 <__exidx_end+0x6894>
    9504:	1500003b 	strne	r0, [r0, #-59]	; 0xffffffc5
    9508:	000023bb 			; <UNDEFINED> instruction: 0x000023bb
    950c:	07c8f001 	strbeq	pc, [r8, r1]	; <UNPREDICTABLE>
    9510:	3b4f0000 	blcc	13c9518 <__ccfg+0x13a9570>
    9514:	52250000 	eorpl	r0, r5, #0
    9518:	12000026 	andne	r0, r0, #38	; 0x26
    951c:	3b000000 	blcc	9524 <__exidx_end+0x68b0>
    9520:	26000007 	strcs	r0, [r0], -r7
    9524:	0000230b 	andeq	r2, r0, fp, lsl #6
    9528:	c3010a01 	movwgt	r0, #6657	; 0x1a01
    952c:	67000000 	strvs	r0, [r0, -r0]
    9530:	0000003b 	andeq	r0, r0, fp, lsr r0
    9534:	0003d427 	andeq	sp, r3, r7, lsr #8
    9538:	00267800 	eoreq	r7, r6, r0, lsl #16
    953c:	00000600 	andeq	r0, r0, r0, lsl #12
    9540:	01110100 	tsteq	r1, r0, lsl #2
    9544:	00000768 	andeq	r0, r0, r8, ror #14
    9548:	0003e428 	andeq	lr, r3, r8, lsr #8
    954c:	26782900 	ldrbtcs	r2, [r8], -r0, lsl #18
    9550:	00060000 	andeq	r0, r6, r0
    9554:	ef2a0000 	svc	0x002a0000
    9558:	7a000003 	bvc	956c <__exidx_end+0x68f8>
    955c:	0000003b 	andeq	r0, r0, fp, lsr r0
    9560:	03d42700 	bicseq	r2, r4, #0, 14
    9564:	26900000 	ldrcs	r0, [r0], r0
    9568:	00060000 	andeq	r0, r6, r0
    956c:	1b010000 	blne	49574 <__ccfg+0x295cc>
    9570:	00079501 	andeq	r9, r7, r1, lsl #10
    9574:	03e42800 	mvneq	r2, #0, 16
    9578:	90290000 	eorls	r0, r9, r0
    957c:	06000026 	streq	r0, [r0], -r6, lsr #32
    9580:	2a000000 	bcs	9588 <__exidx_end+0x6914>
    9584:	000003ef 	andeq	r0, r0, pc, ror #7
    9588:	00003b8d 	andeq	r3, r0, sp, lsl #23
    958c:	d42b0000 	strtle	r0, [fp], #-0
    9590:	9a000003 	bls	95a4 <__exidx_end+0x6930>
    9594:	10000026 	andne	r0, r0, r6, lsr #32
    9598:	0100000f 	tsteq	r0, pc
    959c:	07be011f 			; <UNDEFINED> instruction: 0x07be011f
    95a0:	e4280000 	strt	r0, [r8], #-0
    95a4:	2c000003 	stccs	0, cr0, [r0], {3}
    95a8:	00000f10 	andeq	r0, r0, r0, lsl pc
    95ac:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    95b0:	003ba000 	eorseq	sl, fp, r0
    95b4:	1b000000 	blne	95bc <__exidx_end+0x6948>
    95b8:	00002644 	andeq	r2, r0, r4, asr #12
    95bc:	0000091b 	andeq	r0, r0, fp, lsl r9
    95c0:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    95c4:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    95c8:	000000ce 	andeq	r0, r0, lr, asr #1
    95cc:	00206920 	eoreq	r6, r0, r0, lsr #18
    95d0:	01170a00 	tsteq	r7, r0, lsl #20
    95d4:	00002844 	andeq	r2, r0, r4, asr #16
    95d8:	00000060 	andeq	r0, r0, r0, rrx
    95dc:	08339c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}
    95e0:	17260000 	strne	r0, [r6, -r0]!
    95e4:	01000020 	tsteq	r0, r0, lsr #32
    95e8:	00c301b8 	strheq	r0, [r3], #24
    95ec:	3bb30000 	blcc	fecc95f4 <_estack+0xdecc45f4>
    95f0:	0e260000 	cdpeq	0, 2, cr0, cr6, cr0, {0}
    95f4:	01000022 	tsteq	r0, r2, lsr #32
    95f8:	00ce01b9 	strheq	r0, [lr], #25
    95fc:	3bde0000 	blcc	ff789604 <_estack+0xdf784604>
    9600:	d7260000 	strle	r0, [r6, -r0]!
    9604:	01000021 	tsteq	r0, r1, lsr #32
    9608:	00ce01ba 	strheq	r0, [lr], #26
    960c:	3bf10000 	blcc	ffc49614 <_estack+0xdfc44614>
    9610:	68260000 	stmdavs	r6!, {}	; <UNPREDICTABLE>
    9614:	01000021 	tsteq	r0, r1, lsr #32
    9618:	00ce01bb 	strheq	r0, [lr], #27
    961c:	3c180000 	ldccc	0, cr0, [r8], {-0}
    9620:	521b0000 	andspl	r0, fp, #0
    9624:	1b000028 	blne	96cc <__exidx_end+0x6a58>
    9628:	00000009 	andeq	r0, r0, r9
    962c:	00248320 	eoreq	r8, r4, r0, lsr #6
    9630:	01290a00 			; <UNDEFINED> instruction: 0x01290a00
    9634:	00000000 	andeq	r0, r0, r0
    9638:	00000078 	andeq	r0, r0, r8, ror r0
    963c:	088a9c01 	stmeq	sl, {r0, sl, fp, ip, pc}
    9640:	85260000 	strhi	r0, [r6, #-0]!
    9644:	01000022 	tsteq	r0, r2, lsr #32
    9648:	00ce01e7 	sbceq	r0, lr, r7, ror #3
    964c:	3c410000 	marcc	acc0, r0, r1
    9650:	44260000 	strtmi	r0, [r6], #-0
    9654:	01000024 	tsteq	r0, r4, lsr #32
    9658:	00ce01e8 	sbceq	r0, lr, r8, ror #3
    965c:	3c540000 	mracc	r0, r4, acc0
    9660:	70260000 	eorvc	r0, r6, r0
    9664:	0100001a 	tsteq	r0, sl, lsl r0
    9668:	00ce01e9 	sbceq	r0, lr, r9, ror #3
    966c:	3c670000 	stclcc	0, cr0, [r7], #-0
    9670:	56260000 	strtpl	r0, [r6], -r0
    9674:	01000023 	tsteq	r0, r3, lsr #32
    9678:	00ce01ea 	sbceq	r0, lr, sl, ror #3
    967c:	3c7a0000 	ldclcc	0, cr0, [sl], #-0
    9680:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9684:	00002104 	andeq	r2, r0, r4, lsl #2
    9688:	ce01420a 	cdpgt	2, 0, cr4, cr1, cr10, {0}
    968c:	a4000000 	strge	r0, [r0], #-0
    9690:	18000028 	stmdane	r0, {r3, r5}
    9694:	01000000 	mrseq	r0, (UNDEF: 0)
    9698:	24cd229c 	strbcs	r2, [sp], #668	; 0x29c
    969c:	55010000 	strpl	r0, [r1, #-0]
    96a0:	00000399 	muleq	r0, r9, r3
    96a4:	004c0305 	subeq	r0, ip, r5, lsl #6
    96a8:	ce2f2000 	cdpgt	0, 2, cr2, cr15, cr0, {0}
    96ac:	c1000000 	mrsgt	r0, (UNDEF: 0)
    96b0:	30000008 	andcc	r0, r0, r8
    96b4:	000008c1 	andeq	r0, r0, r1, asr #17
    96b8:	0403000c 	streq	r0, [r3], #-12
    96bc:	00187507 	andseq	r7, r8, r7, lsl #10
    96c0:	23132200 	tstcs	r3, #0, 4
    96c4:	61010000 	mrsvs	r0, (UNDEF: 1)
    96c8:	000008d9 	ldrdeq	r0, [r0], -r9
    96cc:	00000305 	andeq	r0, r0, r5, lsl #6
    96d0:	b12d0000 			; <UNDEFINED> instruction: 0xb12d0000
    96d4:	31000008 	tstcc	r0, r8
    96d8:	000020db 	ldrdeq	r2, [r0], -fp
    96dc:	08ef9909 	stmiaeq	pc!, {r0, r3, r8, fp, ip, pc}^	; <UNPREDICTABLE>
    96e0:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    96e4:	00000000 	andeq	r0, r0, r0
    96e8:	001b0d31 	andseq	r0, fp, r1, lsr sp
    96ec:	05f90300 	ldrbeq	r0, [r9, #768]!	; 0x300
    96f0:	08000009 	stmdaeq	r0, {r0, r3}
    96f4:	000000ce 	andeq	r0, r0, lr, asr #1
    96f8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    96fc:	a8320000 	ldmdage	r2!, {}	; <UNPREDICTABLE>
    9700:	0300001e 	movweq	r0, #30
    9704:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    9708:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    970c:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9710:	00000000 	andeq	r0, r0, r0
    9714:	00161733 	andseq	r1, r6, r3, lsr r7
    9718:	c3aa0b00 			; <UNDEFINED> instruction: 0xc3aa0b00
    971c:	00000000 	andeq	r0, r0, r0
    9720:	000003cc 	andeq	r0, r0, ip, asr #7
    9724:	2d260004 	stccs	0, cr0, [r6, #-16]!
    9728:	01040000 	mrseq	r0, (UNDEF: 4)
    972c:	00001650 	andeq	r1, r0, r0, asr r6
    9730:	0027d601 	eoreq	sp, r7, r1, lsl #12
    9734:	00174500 	andseq	r4, r7, r0, lsl #10
    9738:	000f8800 	andeq	r8, pc, r0, lsl #16
    973c:	00000000 	andeq	r0, r0, r0
    9740:	0065de00 	rsbeq	sp, r5, r0, lsl #28
    9744:	06010200 	streq	r0, [r1], -r0, lsl #4
    9748:	000003a3 	andeq	r0, r0, r3, lsr #7
    974c:	a1080102 	tstge	r8, r2, lsl #2
    9750:	02000003 	andeq	r0, r0, #3
    9754:	03dd0502 	bicseq	r0, sp, #8388608	; 0x800000
    9758:	02020000 	andeq	r0, r2, #0
    975c:	00027107 	andeq	r7, r2, r7, lsl #2
    9760:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9764:	0000009d 	muleq	r0, sp, r0
    9768:	0017b103 	andseq	fp, r7, r3, lsl #2
    976c:	53410300 	movtpl	r0, #4864	; 0x1300
    9770:	02000000 	andeq	r0, r0, #0
    9774:	00720704 	rsbseq	r0, r2, r4, lsl #14
    9778:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    977c:	00009805 	andeq	r9, r0, r5, lsl #16
    9780:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9784:	0000006d 	andeq	r0, r0, sp, rrx
    9788:	69050404 	stmdbvs	r5, {r2, sl}
    978c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    9790:	00770704 	rsbseq	r0, r7, r4, lsl #14
    9794:	b3030000 	movwlt	r0, #12288	; 0x3000
    9798:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    979c:	00004820 	andeq	r4, r0, r0, lsr #16
    97a0:	02010500 	andeq	r0, r1, #0, 10
    97a4:	0000a263 	andeq	sl, r0, r3, ror #4
    97a8:	27100600 	ldrcs	r0, [r0, -r0, lsl #12]
    97ac:	06000000 	streq	r0, [r0], -r0
    97b0:	00002750 	andeq	r2, r0, r0, asr r7
    97b4:	26c00602 	strbcs	r0, [r0], r2, lsl #12
    97b8:	06040000 	streq	r0, [r4], -r0
    97bc:	00002500 	andeq	r2, r0, r0, lsl #10
    97c0:	ac030008 	stcge	0, cr0, [r3], {8}
    97c4:	02000026 	andeq	r0, r0, #38	; 0x26
    97c8:	00008168 	andeq	r8, r0, r8, ror #2
    97cc:	02010500 	andeq	r0, r1, #0, 10
    97d0:	0000daa5 	andeq	sp, r0, r5, lsr #21
    97d4:	27c60600 	strbcs	r0, [r6, r0, lsl #12]
    97d8:	067f0000 	ldrbteq	r0, [pc], -r0
    97dc:	00002518 	andeq	r2, r0, r8, lsl r5
    97e0:	28770600 	ldmdacs	r7!, {r9, sl}^
    97e4:	06010000 	streq	r0, [r1], -r0
    97e8:	00002704 	andeq	r2, r0, r4, lsl #14
    97ec:	28690602 	stmdacs	r9!, {r1, r9, sl}^
    97f0:	06030000 	streq	r0, [r3], -r0
    97f4:	000025fd 	strdeq	r2, [r0], -sp
    97f8:	83030004 	movwhi	r0, #12292	; 0x3004
    97fc:	02000028 	andeq	r0, r0, #40	; 0x28
    9800:	0000adac 	andeq	sl, r0, ip, lsr #27
    9804:	02010700 	andeq	r0, r1, #0, 14
    9808:	0125013d 			; <UNDEFINED> instruction: 0x0125013d
    980c:	da060000 	ble	189814 <__ccfg+0x16986c>
    9810:	7f000026 	svcvc	0x00000026
    9814:	0025c806 	eoreq	ip, r5, r6, lsl #16
    9818:	24060000 	strcs	r0, [r6], #-0
    981c:	01000026 	tsteq	r0, r6, lsr #32
    9820:	00266006 	eoreq	r6, r6, r6
    9824:	ab060200 	blge	18a02c <__ccfg+0x16a084>
    9828:	03000027 	movweq	r0, #39	; 0x27
    982c:	00252406 	eoreq	r2, r5, r6, lsl #8
    9830:	ec060400 	cfstrs	mvf0, [r6], {-0}
    9834:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    9838:	00278506 	eoreq	r8, r7, r6, lsl #10
    983c:	98060600 	stmdals	r6, {r9, sl}
    9840:	07000027 	streq	r0, [r0, -r7, lsr #32]
    9844:	25b00800 	ldrcs	r0, [r0, #2048]!	; 0x800
    9848:	47020000 	strmi	r0, [r2, -r0]
    984c:	0000e501 	andeq	lr, r0, r1, lsl #10
    9850:	02010700 	andeq	r0, r1, #0, 14
    9854:	015f0159 	cmpeq	pc, r9, asr r1	; <UNPREDICTABLE>
    9858:	51060000 	mrspl	r0, (UNDEF: 6)
    985c:	7f000026 	svcvc	0x00000026
    9860:	00267a06 	eoreq	r7, r6, r6, lsl #20
    9864:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    9868:	01000026 	tsteq	r0, r6, lsr #32
    986c:	00253d06 	eoreq	r3, r5, r6, lsl #26
    9870:	60060200 	andvs	r0, r6, r0, lsl #4
    9874:	03000027 	movweq	r0, #39	; 0x27
    9878:	00261306 	eoreq	r1, r6, r6, lsl #6
    987c:	08000400 	stmdaeq	r0, {sl}
    9880:	000025d9 	ldrdeq	r2, [r0], -r9
    9884:	31016002 	tstcc	r1, r2
    9888:	07000001 	streq	r0, [r0, -r1]
    988c:	01b80201 			; <UNDEFINED> instruction: 0x01b80201
    9890:	00000199 	muleq	r0, r9, r1
    9894:	00269006 	eoreq	r9, r6, r6
    9898:	bc067f00 	stclt	15, cr7, [r6], {-0}
    989c:	0a000027 	beq	9940 <__exidx_end+0x6ccc>
    98a0:	00272106 	eoreq	r2, r7, r6, lsl #2
    98a4:	46061400 	strmi	r1, [r6], -r0, lsl #8
    98a8:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    98ac:	0026ec06 	eoreq	lr, r6, r6, lsl #24
    98b0:	72061600 	andvc	r1, r6, #0, 12
    98b4:	17000027 	strne	r0, [r0, -r7, lsr #32]
    98b8:	25bb0800 	ldrcs	r0, [fp, #2048]!	; 0x800
    98bc:	bf020000 	svclt	0x00020000
    98c0:	00016b01 	andeq	r6, r1, r1, lsl #22
    98c4:	28020900 	stmdacs	r2, {r8, fp}
    98c8:	07020000 	streq	r0, [r2, -r0]
    98cc:	00007601 	andeq	r7, r0, r1, lsl #12
    98d0:	4f0a0300 	svcmi	0x000a0300
    98d4:	02000025 	andeq	r0, r0, #37	; 0x25
    98d8:	015f016a 	cmpeq	pc, sl, ror #2
    98dc:	da010000 	ble	498e4 <__ccfg+0x2993c>
    98e0:	0b000001 	bleq	98ec <__exidx_end+0x6c78>
    98e4:	00002688 	andeq	r2, r0, r8, lsl #13
    98e8:	015f6801 	cmpeq	pc, r1, lsl #16
    98ec:	350b0000 	strcc	r0, [fp, #-0]
    98f0:	01000025 	tsteq	r0, r5, lsr #32
    98f4:	00007669 	andeq	r7, r0, r9, ror #12
    98f8:	b0090000 	andlt	r0, r9, r0
    98fc:	02000028 	andeq	r0, r0, #40	; 0x28
    9900:	00760132 	rsbseq	r0, r6, r2, lsr r1
    9904:	0c030000 	stceq	0, cr0, [r3], {-0}
    9908:	00002842 	andeq	r2, r0, r2, asr #16
    990c:	00a27202 	adceq	r7, r2, r2, lsl #4
    9910:	00000000 	andeq	r0, r0, r0
    9914:	00100000 	andseq	r0, r0, r0
    9918:	9c010000 	stcls	0, cr0, [r1], {-0}
    991c:	00256c0d 	eoreq	r6, r5, sp, lsl #24
    9920:	dab60200 	ble	fed8a128 <_estack+0xded85128>
    9924:	00000000 	andeq	r0, r0, r0
    9928:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    992c:	01000000 	mrseq	r0, (UNDEF: 0)
    9930:	0002259c 	muleq	r2, ip, r5
    9934:	25a70e00 	strcs	r0, [r7, #3584]!	; 0xe00
    9938:	52010000 	andpl	r0, r1, #0
    993c:	000000da 	ldrdeq	r0, [r0], -sl
    9940:	00003c8d 	andeq	r3, r0, sp, lsl #25
    9944:	01b20f00 			; <UNDEFINED> instruction: 0x01b20f00
    9948:	28bc0000 	ldmcs	ip!, {}	; <UNPREDICTABLE>
    994c:	004c0000 	subeq	r0, ip, r0
    9950:	9c010000 	stcls	0, cr0, [r1], {-0}
    9954:	0000026e 	andeq	r0, r0, lr, ror #4
    9958:	0001c310 	andeq	ip, r1, r0, lsl r3
    995c:	003cb500 	eorseq	fp, ip, r0, lsl #10
    9960:	01ce1000 	biceq	r1, lr, r0
    9964:	3cd50000 	ldclcc	0, cr0, [r5], {0}
    9968:	cc110000 	ldcgt	0, cr0, [r1], {-0}
    996c:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    9970:	12000000 	andne	r0, r0, #0
    9974:	000001c3 	andeq	r0, r0, r3, asr #3
    9978:	0001ce12 	andeq	ip, r1, r2, lsl lr
    997c:	01a51300 			; <UNDEFINED> instruction: 0x01a51300
    9980:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    9984:	00040000 	andeq	r0, r4, r0
    9988:	70010000 	andvc	r0, r1, r0
    998c:	2b140000 	blcs	509994 <__ccfg+0x4e99ec>
    9990:	02000027 	andeq	r0, r0, #39	; 0x27
    9994:	01250151 			; <UNDEFINED> instruction: 0x01250151
    9998:	00000000 	andeq	r0, r0, r0
    999c:	00300000 	eorseq	r0, r0, r0
    99a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    99a4:	000002ca 	andeq	r0, r0, sl, asr #5
    99a8:	00277c0e 	eoreq	r7, r7, lr, lsl #24
    99ac:	25850100 	strcs	r0, [r5, #256]	; 0x100
    99b0:	09000001 	stmdbeq	r0, {r0}
    99b4:	0b00003d 	bleq	9ab0 <__exidx_end+0x6e3c>
    99b8:	000027f6 	strdeq	r2, [r0], -r6
    99bc:	00768601 	rsbseq	r8, r6, r1, lsl #12
    99c0:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
    99c4:	01000026 	tsteq	r0, r6, lsr #32
    99c8:	00007687 	andeq	r7, r0, r7, lsl #13
    99cc:	003d2900 	eorseq	r2, sp, r0, lsl #18
    99d0:	01da1300 	bicseq	r1, sl, r0, lsl #6
    99d4:	00000000 	andeq	r0, r0, r0
    99d8:	00040000 	andeq	r0, r4, r0
    99dc:	86010000 	strhi	r0, [r1], -r0
    99e0:	00000015 	andeq	r0, r0, r5, lsl r0
    99e4:	0001b200 	andeq	fp, r1, r0, lsl #4
    99e8:	20160000 	andscs	r0, r6, r0
    99ec:	02000028 	andeq	r0, r0, #40	; 0x28
    99f0:	00760119 	rsbseq	r0, r6, r9, lsl r1
    99f4:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    99f8:	17000002 	strne	r0, [r0, -r2]
    99fc:	0000260a 	andeq	r2, r0, sl, lsl #12
    9a00:	76011b02 	strvc	r1, [r1], -r2, lsl #22
    9a04:	00000000 	andeq	r0, r0, r0
    9a08:	00258a14 	eoreq	r8, r5, r4, lsl sl
    9a0c:	01c90200 	biceq	r0, r9, r0, lsl #4
    9a10:	00000199 	muleq	r0, r9, r1
    9a14:	00002908 	andeq	r2, r0, r8, lsl #18
    9a18:	0000006c 	andeq	r0, r0, ip, rrx
    9a1c:	03659c01 	cmneq	r5, #256	; 0x100
    9a20:	e60e0000 	str	r0, [lr], -r0
    9a24:	01000025 	tsteq	r0, r5, lsr #32
    9a28:	000199a8 	andeq	r9, r1, r8, lsr #19
    9a2c:	003d3c00 	eorseq	r3, sp, r0, lsl #24
    9a30:	26710b00 	ldrbtcs	r0, [r1], -r0, lsl #22
    9a34:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9a38:	00000076 	andeq	r0, r0, r6, ror r0
    9a3c:	00283718 	eoreq	r3, r8, r8, lsl r7
    9a40:	76aa0100 	strtvc	r0, [sl], r0, lsl #2
    9a44:	01000000 	mrseq	r0, (UNDEF: 0)
    9a48:	01a51954 			; <UNDEFINED> instruction: 0x01a51954
    9a4c:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    9a50:	0f580000 	svceq	0x00580000
    9a54:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9a58:	0002ca1a 	andeq	ip, r2, sl, lsl sl
    9a5c:	00290e00 	eoreq	r0, r9, r0, lsl #28
    9a60:	000f7000 	andeq	r7, pc, r0
    9a64:	5baa0100 	blpl	fea89e6c <_estack+0xdea84e6c>
    9a68:	1b000003 	blne	9a7c <__exidx_end+0x6e08>
    9a6c:	00000f70 	andeq	r0, r0, r0, ror pc
    9a70:	0002db10 	andeq	sp, r2, r0, lsl fp
    9a74:	003d9900 	eorseq	r9, sp, r0, lsl #18
    9a78:	15000000 	strne	r0, [r0, #-0]
    9a7c:	00002922 	andeq	r2, r0, r2, lsr #18
    9a80:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9a84:	26350900 	ldrtcs	r0, [r5], -r0, lsl #18
    9a88:	83020000 	movwhi	r0, #8192	; 0x2000
    9a8c:	00037201 	andeq	r7, r3, r1, lsl #4
    9a90:	01020300 	mrseq	r0, LR_svc
    9a94:	000bb802 	andeq	fp, fp, r2, lsl #16
    9a98:	28910900 	ldmcs	r1, {r8, fp}
    9a9c:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
    9aa0:	00037201 	andeq	r7, r3, r1, lsl #4
    9aa4:	b91c0300 	ldmdblt	ip, {r8, r9}
    9aa8:	0200001a 	andeq	r0, r0, #26
    9aac:	29740243 	ldmdbcs	r4!, {r0, r1, r6, r9}^
    9ab0:	00160000 	andseq	r0, r6, r0
    9ab4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ab8:	0003651d 	andeq	r6, r3, sp, lsl r5
    9abc:	00297600 	eoreq	r7, r9, r0, lsl #12
    9ac0:	00000400 	andeq	r0, r0, r0, lsl #8
    9ac4:	b5e20100 	strblt	r0, [r2, #256]!	; 0x100
    9ac8:	15000003 	strne	r0, [r0, #-3]
    9acc:	0000297a 	andeq	r2, r0, sl, ror r9
    9ad0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9ad4:	03791e00 	cmneq	r9, #0, 28
    9ad8:	297e0000 	ldmdbcs	lr!, {}^	; <UNPREDICTABLE>
    9adc:	00040000 	andeq	r0, r4, r0
    9ae0:	e3010000 	movw	r0, #4096	; 0x1000
    9ae4:	00298215 	eoreq	r8, r9, r5, lsl r2
    9ae8:	0002e800 	andeq	lr, r2, r0, lsl #16
    9aec:	00000000 	andeq	r0, r0, r0
    9af0:	000005a7 	andeq	r0, r0, r7, lsr #11
    9af4:	2ef40004 	cdpcs	0, 15, cr0, cr4, cr4, {0}
    9af8:	01040000 	mrseq	r0, (UNDEF: 4)
    9afc:	00001650 	andeq	r1, r0, r0, asr r6
    9b00:	00298801 	eoreq	r8, r9, r1, lsl #16
    9b04:	00174500 	andseq	r4, r7, r0, lsl #10
    9b08:	000fc000 	andeq	ip, pc, r0
    9b0c:	00000000 	andeq	r0, r0, r0
    9b10:	00680d00 	rsbeq	r0, r8, r0, lsl #26
    9b14:	06010200 	streq	r0, [r1], -r0, lsl #4
    9b18:	000003a3 	andeq	r0, r0, r3, lsr #7
    9b1c:	0021fa03 	eoreq	pc, r1, r3, lsl #20
    9b20:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    9b24:	02000000 	andeq	r0, r0, #0
    9b28:	03a10801 			; <UNDEFINED> instruction: 0x03a10801
    9b2c:	02020000 	andeq	r0, r2, #0
    9b30:	0003dd05 	andeq	sp, r3, r5, lsl #26
    9b34:	20e80300 	rsccs	r0, r8, r0, lsl #6
    9b38:	2b030000 	blcs	c9b40 <__ccfg+0xa9b98>
    9b3c:	00000050 	andeq	r0, r0, r0, asr r0
    9b40:	71070202 	tstvc	r7, r2, lsl #4
    9b44:	02000002 	andeq	r0, r0, #2
    9b48:	009d0504 	addseq	r0, sp, r4, lsl #10
    9b4c:	b1030000 	mrslt	r0, (UNDEF: 3)
    9b50:	03000017 	movweq	r0, #23
    9b54:	00006941 	andeq	r6, r0, r1, asr #18
    9b58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b5c:	00000072 	andeq	r0, r0, r2, ror r0
    9b60:	98050802 	stmdals	r5, {r1, fp}
    9b64:	02000000 	andeq	r0, r0, #0
    9b68:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    9b6c:	04040000 	streq	r0, [r4], #-0
    9b70:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    9b74:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b78:	00000077 	andeq	r0, r0, r7, ror r0
    9b7c:	0021fc03 	eoreq	pc, r1, r3, lsl #24
    9b80:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    9b84:	03000000 	movweq	r0, #0
    9b88:	000020ea 	andeq	r2, r0, sl, ror #1
    9b8c:	00451a04 	subeq	r1, r5, r4, lsl #20
    9b90:	b3030000 	movwlt	r0, #12288	; 0x3000
    9b94:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    9b98:	00005e20 	andeq	r5, r0, r0, lsr #28
    9b9c:	29010500 	stmdbcs	r1, {r8, sl}
    9ba0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9ba4:	0000e603 	andeq	lr, r0, r3, lsl #12
    9ba8:	28e30600 	stmiacs	r3!, {r9, sl}^
    9bac:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9bb0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9bb4:	00295406 	eoreq	r5, r9, r6, lsl #8
    9bb8:	a2890100 	addge	r0, r9, #0, 2
    9bbc:	06000000 	streq	r0, [r0], -r0
    9bc0:	000029c4 	andeq	r2, r0, r4, asr #19
    9bc4:	00a28901 	adceq	r8, r2, r1, lsl #18
    9bc8:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    9bcc:	01000029 	tsteq	r0, r9, lsr #32
    9bd0:	0000e68c 	andeq	lr, r0, ip, lsl #13
    9bd4:	01020000 	mrseq	r0, (UNDEF: 2)
    9bd8:	000bb802 	andeq	fp, fp, r2, lsl #16
    9bdc:	29620800 	stmdbcs	r2!, {fp}^
    9be0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9be4:	000000a2 	andeq	r0, r0, r2, lsr #1
    9be8:	00012a03 	andeq	r2, r1, r3, lsl #20
    9bec:	28e30600 	stmiacs	r3!, {r9, sl}^
    9bf0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9bf4:	000000a2 	andeq	r0, r0, r2, lsr #1
    9bf8:	0029c406 	eoreq	ip, r9, r6, lsl #8
    9bfc:	a2a90100 	adcge	r0, r9, #0, 2
    9c00:	07000000 	streq	r0, [r0, -r0]
    9c04:	000028fc 	strdeq	r2, [r0], -ip
    9c08:	00a2ab01 	adceq	sl, r2, r1, lsl #22
    9c0c:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    9c10:	01000029 	tsteq	r0, r9, lsr #32
    9c14:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    9c18:	ad090000 	stcge	0, cr0, [r9, #-0]
    9c1c:	8c000000 	stchi	0, cr0, [r0], {-0}
    9c20:	28000029 	stmdacs	r0, {r0, r3, r5}
    9c24:	01000000 	mrseq	r0, (UNDEF: 0)
    9c28:	0001719c 	muleq	r1, ip, r1
    9c2c:	00b90a00 	adcseq	r0, r9, r0, lsl #20
    9c30:	3dac0000 	stccc	0, cr0, [ip]
    9c34:	c40a0000 	strgt	r0, [sl], #-0
    9c38:	f1000000 	cps	#0
    9c3c:	0b00003d 	bleq	9d38 <__exidx_end+0x70c4>
    9c40:	000000da 	ldrdeq	r0, [r0], -sl
    9c44:	00003e36 	andeq	r3, r0, r6, lsr lr
    9c48:	0000cf0c 	andeq	ip, r0, ip, lsl #30
    9c4c:	960d0400 	strls	r0, [sp], -r0, lsl #8
    9c50:	94000029 	strls	r0, [r0], #-41	; 0xffffffd7
    9c54:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    9c58:	000029ae 	andeq	r2, r0, lr, lsr #19
    9c5c:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    9c60:	1ceb0f00 	stclne	15, cr0, [fp]
    9c64:	ca010000 	bgt	49c6c <__ccfg+0x29cc4>
    9c68:	0029b401 	eoreq	fp, r9, r1, lsl #8
    9c6c:	00000800 	andeq	r0, r0, r0, lsl #16
    9c70:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    9c74:	10000001 	andne	r0, r0, r1
    9c78:	00000731 	andeq	r0, r0, r1, lsr r7
    9c7c:	00a24202 	adceq	r4, r2, r2, lsl #4
    9c80:	3e5c0000 	cdpcc	0, 5, cr0, cr12, cr0, {0}
    9c84:	c3100000 	tstgt	r0, #0
    9c88:	02000028 	andeq	r0, r0, #40	; 0x28
    9c8c:	0000a242 	andeq	sl, r0, r2, asr #4
    9c90:	003e7d00 	eorseq	r7, lr, r0, lsl #26
    9c94:	295a1000 	ldmdbcs	sl, {ip}^
    9c98:	43020000 	movwmi	r0, #8192	; 0x2000
    9c9c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9ca0:	00003e9e 	muleq	r0, lr, lr
    9ca4:	0029bc11 	eoreq	fp, r9, r1, lsl ip
    9ca8:	00012a00 	andeq	r2, r1, r0, lsl #20
    9cac:	51011200 	mrspl	r1, R9_usr
    9cb0:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    9cb4:	07500112 	smmlaeq	r0, r2, r1, r0
    9cb8:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    9cbc:	00225101 	eoreq	r5, r2, r1, lsl #2
    9cc0:	29740f00 	ldmdbcs	r4!, {r8, r9, sl, fp}^
    9cc4:	df010000 	svcle	0x00010000
    9cc8:	00000001 	andeq	r0, r0, r1
    9ccc:	00002200 	andeq	r2, r0, r0, lsl #4
    9cd0:	ea9c0100 	b	fe70a0d8 <_estack+0xde7050d8>
    9cd4:	10000002 	andne	r0, r0, r2
    9cd8:	00000731 	andeq	r0, r0, r1, lsr r7
    9cdc:	00a25702 	adceq	r5, r2, r2, lsl #14
    9ce0:	3ebf0000 	cdpcc	0, 11, cr0, cr15, cr0, {0}
    9ce4:	c3100000 	tstgt	r0, #0
    9ce8:	02000028 	andeq	r0, r0, #40	; 0x28
    9cec:	0000a257 	andeq	sl, r0, r7, asr r2
    9cf0:	003ee000 	eorseq	lr, lr, r0
    9cf4:	29a31000 	stmibcs	r3!, {ip}
    9cf8:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    9cfc:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d00:	00003f01 	andeq	r3, r0, r1, lsl #30
    9d04:	00291d10 	eoreq	r1, r9, r0, lsl sp
    9d08:	a2580200 	subsge	r0, r8, #0, 4
    9d0c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    9d10:	1300003f 	movwne	r0, #63	; 0x3f
    9d14:	000029ac 	andeq	r2, r0, ip, lsr #19
    9d18:	00a25a02 	adceq	r5, r2, r2, lsl #20
    9d1c:	3f6d0000 	svccc	0x006d0000
    9d20:	28130000 	ldmdacs	r3, {}	; <UNPREDICTABLE>
    9d24:	02000029 	andeq	r0, r0, #41	; 0x29
    9d28:	0000a25b 	andeq	sl, r0, fp, asr r2
    9d2c:	00400100 	subeq	r0, r0, r0, lsl #2
    9d30:	00001100 	andeq	r1, r0, r0, lsl #2
    9d34:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    9d38:	01120000 	tsteq	r2, r0
    9d3c:	01f34551 	mvnseq	r4, r1, asr r5
    9d40:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    9d44:	01f35201 	mvnseq	r5, r1, lsl #4
    9d48:	30254052 	eorcc	r4, r5, r2, asr r0
    9d4c:	0001282e 	andeq	r2, r1, lr, lsr #16
    9d50:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
    9d54:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    9d58:	01f32540 	mvnseq	r2, r0, asr #10
    9d5c:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    9d60:	2e302540 	cfneg32cs	mvfx2, mvfx0
    9d64:	16000128 	strne	r0, [r0], -r8, lsr #2
    9d68:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    9d6c:	01f32540 	mvnseq	r2, r0, asr #10
    9d70:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    9d74:	13160001 	tstne	r6, #1
    9d78:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    9d7c:	00012829 	andeq	r2, r1, r9, lsr #16
    9d80:	12211316 	eorne	r1, r1, #1476395008	; 0x58000000
    9d84:	f3515001 	vhadd.u16	d21, d1, d1
    9d88:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9d8c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9d90:	f3048023 	vhadd.u8	d8, d4, d19
    9d94:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9d98:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9d9c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9da0:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    9da4:	13160001 	tstne	r6, #1
    9da8:	f3048423 	vshl.u8	d8, d19, d4
    9dac:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9db0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9db4:	f3048023 	vhadd.u8	d8, d4, d19
    9db8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9dbc:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9dc0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dc4:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    9dc8:	13160001 	tstne	r6, #1
    9dcc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dd0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9dd4:	13160001 	tstne	r6, #1
    9dd8:	3b0f0000 	blcc	3c9de0 <__ccfg+0x3a9e38>
    9ddc:	01000029 	tsteq	r0, r9, lsr #32
    9de0:	000001f6 	strdeq	r0, [r0], -r6
    9de4:	002e0000 	eoreq	r0, lr, r0
    9de8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9dec:	0000041f 	andeq	r0, r0, pc, lsl r4
    9df0:	00073110 	andeq	r3, r7, r0, lsl r1
    9df4:	a2830200 	addge	r0, r3, #0, 4
    9df8:	4d000000 	stcmi	0, cr0, [r0, #-0]
    9dfc:	10000040 	andne	r0, r0, r0, asr #32
    9e00:	000028c3 	andeq	r2, r0, r3, asr #17
    9e04:	00a28302 	adceq	r8, r2, r2, lsl #6
    9e08:	406e0000 	rsbmi	r0, lr, r0
    9e0c:	a3100000 	tstge	r0, #0
    9e10:	02000029 	andeq	r0, r0, #41	; 0x29
    9e14:	0000a284 	andeq	sl, r0, r4, lsl #5
    9e18:	00408f00 	subeq	r8, r0, r0, lsl #30
    9e1c:	29311000 	ldmdbcs	r1!, {ip}
    9e20:	84020000 	strhi	r0, [r2], #-0
    9e24:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e28:	000040e0 	andeq	r4, r0, r0, ror #1
    9e2c:	00292810 	eoreq	r2, r9, r0, lsl r8
    9e30:	97850200 	strls	r0, [r5, r0, lsl #4]
    9e34:	31000000 	mrscc	r0, (UNDEF: 0)
    9e38:	13000041 	movwne	r0, #65	; 0x41
    9e3c:	000029ac 	andeq	r2, r0, ip, lsr #19
    9e40:	00a28702 	adceq	r8, r2, r2, lsl #14
    9e44:	41510000 	cmpmi	r1, r0
    9e48:	1d130000 	ldcne	0, cr0, [r3, #-0]
    9e4c:	02000029 	andeq	r0, r0, #41	; 0x29
    9e50:	0000a288 	andeq	sl, r0, r8, lsl #5
    9e54:	0041f700 	subeq	pc, r1, r0, lsl #14
    9e58:	00001100 	andeq	r1, r0, r0, lsl #2
    9e5c:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    9e60:	01120000 	tsteq	r2, r0
    9e64:	01f34051 	mvnseq	r4, r1, asr r0
    9e68:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    9e6c:	01f35201 	mvnseq	r5, r1, lsl #4
    9e70:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9e74:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9e78:	282b8000 	stmdacs	fp!, {pc}
    9e7c:	13160001 	tstne	r6, #1
    9e80:	007d2440 	rsbseq	r2, sp, r0, asr #8
    9e84:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    9e88:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    9e8c:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    9e90:	01f35301 	mvnseq	r5, r1, lsl #6
    9e94:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9e98:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9e9c:	282b8000 	stmdacs	fp!, {pc}
    9ea0:	13160001 	tstne	r6, #1
    9ea4:	01122124 	tsteq	r2, r4, lsr #2
    9ea8:	01f36350 	mvnseq	r6, r0, asr r3
    9eac:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9eb0:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9eb4:	01f30480 	mvnseq	r0, r0, lsl #9
    9eb8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9ebc:	f3225001 	vhadd.u32	d5, d2, d1
    9ec0:	4b405301 	blmi	101eacc <__ccfg+0xffeb24>
    9ec4:	0f0c2224 	svceq	0x000c2224
    9ec8:	2c800000 	stccs	0, cr0, [r0], {0}
    9ecc:	16000128 	strne	r0, [r0], -r8, lsr #2
    9ed0:	04842313 	streq	r2, [r4], #787	; 0x313
    9ed4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ed8:	5001f324 	andpl	pc, r1, r4, lsr #6
    9edc:	04802322 	streq	r2, [r0], #802	; 0x322
    9ee0:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ee4:	5001f324 	andpl	pc, r1, r4, lsr #6
    9ee8:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    9eec:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9ef0:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9ef4:	01282c80 	smlawbeq	r8, r0, ip, r2
    9ef8:	f3131600 	vmax.u16	d1, d3, d0
    9efc:	4b405301 	blmi	101eb08 <__ccfg+0xffeb60>
    9f00:	0f0c2224 	svceq	0x000c2224
    9f04:	2b800000 	blcs	fe009f0c <_estack+0xde004f0c>
    9f08:	16000128 	strne	r0, [r0], -r8, lsr #2
    9f0c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    9f10:	000028e9 	andeq	r2, r0, r9, ror #17
    9f14:	97020801 	strls	r0, [r2, -r1, lsl #16]
    9f18:	00000000 	andeq	r0, r0, r0
    9f1c:	34000000 	strcc	r0, [r0], #-0
    9f20:	01000000 	mrseq	r0, (UNDEF: 0)
    9f24:	0004d29c 	muleq	r4, ip, r2
    9f28:	07311000 	ldreq	r1, [r1, -r0]!
    9f2c:	af020000 	svcge	0x00020000
    9f30:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f34:	00004257 	andeq	r4, r0, r7, asr r2
    9f38:	0028c310 	eoreq	ip, r8, r0, lsl r3
    9f3c:	a2af0200 	adcge	r0, pc, #0, 4
    9f40:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    9f44:	10000042 	andne	r0, r0, r2, asr #32
    9f48:	000029a3 	andeq	r2, r0, r3, lsr #19
    9f4c:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9f50:	42990000 	addsmi	r0, r9, #0
    9f54:	ac130000 	ldcge	0, cr0, [r3], {-0}
    9f58:	02000029 	andeq	r0, r0, #41	; 0x29
    9f5c:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    9f60:	0042d600 	subeq	sp, r2, r0, lsl #12
    9f64:	29141300 	ldmdbcs	r4, {r8, r9, ip}
    9f68:	b2020000 	andlt	r0, r2, #0
    9f6c:	00000097 	muleq	r0, r7, r0
    9f70:	00004310 	andeq	r4, r0, r0, lsl r3
    9f74:	0000ed15 	andeq	lr, r0, r5, lsl sp
    9f78:	00000000 	andeq	r0, r0, r0
    9f7c:	00001a00 	andeq	r1, r0, r0, lsl #20
    9f80:	0cca0200 	sfmeq	f0, 2, [sl], {0}
    9f84:	00000108 	andeq	r0, r0, r8, lsl #2
    9f88:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
    9f8c:	43280000 			; <UNDEFINED> instruction: 0x43280000
    9f90:	00160000 	andseq	r0, r6, r0
    9f94:	1a000000 	bne	9f9c <__exidx_end+0x7328>
    9f98:	0b000000 	bleq	9fa0 <__exidx_end+0x732c>
    9f9c:	00000113 	andeq	r0, r0, r3, lsl r1
    9fa0:	00004362 	andeq	r4, r0, r2, ror #6
    9fa4:	00011e0b 	andeq	r1, r1, fp, lsl #28
    9fa8:	00437b00 	subeq	r7, r3, r0, lsl #22
    9fac:	00000d00 	andeq	r0, r0, r0, lsl #26
    9fb0:	05940000 	ldreq	r0, [r4]
    9fb4:	000d0000 	andeq	r0, sp, r0
    9fb8:	9f000000 	svcls	0x00000000
    9fbc:	00000005 	andeq	r0, r0, r5
    9fc0:	cb140000 	blgt	509fc8 <__ccfg+0x4ea020>
    9fc4:	01000028 	tsteq	r0, r8, lsr #32
    9fc8:	0097021d 	addseq	r0, r7, sp, lsl r2
    9fcc:	00000000 	andeq	r0, r0, r0
    9fd0:	00400000 	subeq	r0, r0, r0
    9fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fd8:	00000594 	muleq	r0, r4, r5
    9fdc:	00073110 	andeq	r3, r7, r0, lsl r1
    9fe0:	a2dd0200 	sbcsge	r0, sp, #0, 4
    9fe4:	92000000 	andls	r0, r0, #0
    9fe8:	10000043 	andne	r0, r0, r3, asr #32
    9fec:	000028c3 	andeq	r2, r0, r3, asr #17
    9ff0:	00a2dd02 	adceq	sp, r2, r2, lsl #26
    9ff4:	43b30000 			; <UNDEFINED> instruction: 0x43b30000
    9ff8:	a3100000 	tstge	r0, #0
    9ffc:	02000029 	andeq	r0, r0, #41	; 0x29
    a000:	0000a2de 	ldrdeq	sl, [r0], -lr
    a004:	0043d400 	subeq	sp, r3, r0, lsl #8
    a008:	29311000 	ldmdbcs	r1!, {ip}
    a00c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    a010:	000000a2 	andeq	r0, r0, r2, lsr #1
    a014:	00004417 	andeq	r4, r0, r7, lsl r4
    a018:	0029ac13 	eoreq	sl, r9, r3, lsl ip
    a01c:	a2e00200 	rscge	r0, r0, #0, 4
    a020:	5a000000 	bpl	a028 <__exidx_end+0x73b4>
    a024:	13000044 	movwne	r0, #68	; 0x44
    a028:	00002914 	andeq	r2, r0, r4, lsl r9
    a02c:	0097e102 	addseq	lr, r7, r2, lsl #2
    a030:	44b50000 	ldrtmi	r0, [r5], #0
    a034:	ed150000 	ldc	0, cr0, [r5, #-0]
    a038:	00000000 	andeq	r0, r0, r0
    a03c:	1a000000 	bne	a044 <__exidx_end+0x73d0>
    a040:	02000000 	andeq	r0, r0, #0
    a044:	01080cfa 	strdeq	r0, [r8, -sl]
    a048:	0a020000 	beq	8a050 <__ccfg+0x6a0a8>
    a04c:	000000fd 	strdeq	r0, [r0], -sp
    a050:	000044d8 	ldrdeq	r4, [r0], -r8
    a054:	00000016 	andeq	r0, r0, r6, lsl r0
    a058:	00001a00 	andeq	r1, r0, r0, lsl #20
    a05c:	01130b00 	tsteq	r3, r0, lsl #22
    a060:	45180000 	ldrmi	r0, [r8, #-0]
    a064:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    a068:	31000001 	tstcc	r0, r1
    a06c:	0d000045 	stceq	0, cr0, [r0, #-276]	; 0xfffffeec
    a070:	00000000 	andeq	r0, r0, r0
    a074:	00000594 	muleq	r0, r4, r5
    a078:	0000000d 	andeq	r0, r0, sp
    a07c:	00059f00 	andeq	r9, r5, r0, lsl #30
    a080:	00000000 	andeq	r0, r0, r0
    a084:	0018b317 	andseq	fp, r8, r7, lsl r3
    a088:	a26a0500 	rsbge	r0, sl, #0, 10
    a08c:	17000000 	strne	r0, [r0, -r0]
    a090:	000018c2 	andeq	r1, r0, r2, asr #17
    a094:	00a28405 	adceq	r8, r2, r5, lsl #8
    a098:	bf000000 	svclt	0x00000000
    a09c:	04000008 	streq	r0, [r0], #-8
    a0a0:	00304800 	eorseq	r4, r0, r0, lsl #16
    a0a4:	50010400 	andpl	r0, r1, r0, lsl #8
    a0a8:	01000016 	tsteq	r0, r6, lsl r0
    a0ac:	00002a51 	andeq	r2, r0, r1, asr sl
    a0b0:	00001745 	andeq	r1, r0, r5, asr #14
    a0b4:	00001010 	andeq	r1, r0, r0, lsl r0
    a0b8:	00000000 	andeq	r0, r0, r0
    a0bc:	00006a2f 	andeq	r6, r0, pc, lsr #20
    a0c0:	a3060102 	movwge	r0, #24834	; 0x6102
    a0c4:	03000003 	movweq	r0, #3
    a0c8:	000021fa 	strdeq	r2, [r0], -sl
    a0cc:	00371d03 	eorseq	r1, r7, r3, lsl #26
    a0d0:	01020000 	mrseq	r0, (UNDEF: 2)
    a0d4:	0003a108 	andeq	sl, r3, r8, lsl #2
    a0d8:	2c670300 	stclcs	3, cr0, [r7], #-0
    a0dc:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    a0e0:	00000049 	andeq	r0, r0, r9, asr #32
    a0e4:	dd050202 	sfmle	f0, 4, [r5, #-8]
    a0e8:	03000003 	movweq	r0, #3
    a0ec:	000020e8 	andeq	r2, r0, r8, ror #1
    a0f0:	005b2b03 	subseq	r2, fp, r3, lsl #22
    a0f4:	02020000 	andeq	r0, r2, #0
    a0f8:	00027107 	andeq	r7, r2, r7, lsl #2
    a0fc:	16460300 	strbne	r0, [r6], -r0, lsl #6
    a100:	3f030000 	svccc	0x00030000
    a104:	0000006d 	andeq	r0, r0, sp, rrx
    a108:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    a10c:	03000000 	movweq	r0, #0
    a110:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    a114:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    a118:	04020000 	streq	r0, [r2], #-0
    a11c:	00007207 	andeq	r7, r0, r7, lsl #4
    a120:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    a124:	00000098 	muleq	r0, r8, r0
    a128:	6d070802 	stcvs	8, cr0, [r7, #-8]
    a12c:	04000000 	streq	r0, [r0], #-0
    a130:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a134:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a138:	00007707 	andeq	r7, r0, r7, lsl #14
    a13c:	21fc0300 	mvnscs	r0, r0, lsl #6
    a140:	14040000 	strne	r0, [r4], #-0
    a144:	0000002c 	andeq	r0, r0, ip, lsr #32
    a148:	002c6903 	eoreq	r6, ip, r3, lsl #18
    a14c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    a150:	03000000 	movweq	r0, #0
    a154:	000020ea 	andeq	r2, r0, sl, ror #1
    a158:	00501a04 	subseq	r1, r0, r4, lsl #20
    a15c:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
    a160:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    a164:	0000621f 	andeq	r6, r0, pc, lsl r2
    a168:	17b30300 	ldrne	r0, [r3, r0, lsl #6]!
    a16c:	20040000 	andcs	r0, r4, r0
    a170:	00000074 	andeq	r0, r0, r4, ror r0
    a174:	0022d303 	eoreq	sp, r2, r3, lsl #6
    a178:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    a17c:	05000000 	streq	r0, [r0, #-0]
    a180:	0000ea04 	andeq	lr, r0, r4, lsl #20
    a184:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    a188:	000000f1 	strdeq	r0, [r0], -r1
    a18c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    a190:	00a20800 	adceq	r0, r2, r0, lsl #16
    a194:	03000000 	movweq	r0, #0
    a198:	00002349 	andeq	r2, r0, r9, asr #6
    a19c:	01074206 	tsteq	r7, r6, lsl #4
    a1a0:	04050000 	streq	r0, [r5], #-0
    a1a4:	0000010d 	andeq	r0, r0, sp, lsl #2
    a1a8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a1ac:	00012600 	andeq	r2, r1, r0, lsl #12
    a1b0:	01260800 			; <UNDEFINED> instruction: 0x01260800
    a1b4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a1b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a1bc:	000000ce 	andeq	r0, r0, lr, asr #1
    a1c0:	a2040500 	andge	r0, r4, #0, 10
    a1c4:	03000000 	movweq	r0, #0
    a1c8:	00002472 	andeq	r2, r0, r2, ror r4
    a1cc:	01374606 	teqeq	r7, r6, lsl #12
    a1d0:	04050000 	streq	r0, [r5], #-0
    a1d4:	0000013d 	andeq	r0, r0, sp, lsr r1
    a1d8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    a1dc:	24de0300 	ldrbcs	r0, [lr], #768	; 0x300
    a1e0:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    a1e4:	00000137 	andeq	r0, r0, r7, lsr r1
    a1e8:	00222403 	eoreq	r2, r2, r3, lsl #8
    a1ec:	584a0600 	stmdapl	sl, {r9, sl}^
    a1f0:	05000001 	streq	r0, [r0, #-1]
    a1f4:	00015e04 	andeq	r5, r1, r4, lsl #28
    a1f8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a1fc:	016d0000 	cmneq	sp, r0
    a200:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a204:	00000000 	andeq	r0, r0, r0
    a208:	00218a03 	eoreq	r8, r1, r3, lsl #20
    a20c:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    a210:	03000001 	movweq	r0, #1
    a214:	000020f3 	strdeq	r2, [r0], -r3
    a218:	01074e06 	tsteq	r7, r6, lsl #28
    a21c:	7a030000 	bvc	ca224 <__ccfg+0xaa27c>
    a220:	06000021 	streq	r0, [r0], -r1, lsr #32
    a224:	0000e451 	andeq	lr, r0, r1, asr r4
    a228:	1ff60300 	svcne	0x00f60300
    a22c:	53060000 	movwpl	r0, #24576	; 0x6000
    a230:	00000199 	muleq	r0, r9, r1
    a234:	019f0405 	orrseq	r0, pc, r5, lsl #8
    a238:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a23c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a240:	08000001 	stmdaeq	r0, {r0}
    a244:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    a248:	0000b808 	andeq	fp, r0, r8, lsl #16
    a24c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    a250:	05000000 	streq	r0, [r0, #-0]
    a254:	0000b804 	andeq	fp, r0, r4, lsl #16
    a258:	236d0300 	cmncs	sp, #0, 6
    a25c:	57060000 	strpl	r0, [r6, -r0]
    a260:	000001c9 	andeq	r0, r0, r9, asr #3
    a264:	01cf0405 	biceq	r0, pc, r5, lsl #8
    a268:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a26c:	e3000000 	movw	r0, #0
    a270:	08000001 	stmdaeq	r0, {r0}
    a274:	000001e3 	andeq	r0, r0, r3, ror #3
    a278:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a27c:	04050000 	streq	r0, [r5], #-0
    a280:	000000ce 	andeq	r0, r0, lr, asr #1
    a284:	0021ad03 	eoreq	sl, r1, r3, lsl #26
    a288:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    a28c:	03000001 	movweq	r0, #1
    a290:	00002276 	andeq	r2, r0, r6, ror r2
    a294:	01c95d06 	biceq	r5, r9, r6, lsl #26
    a298:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    a29c:	06000020 	streq	r0, [r0], -r0, lsr #32
    a2a0:	0001c960 	andeq	ip, r1, r0, ror #18
    a2a4:	23980300 	orrscs	r0, r8, #0, 6
    a2a8:	63060000 	movwvs	r0, #24576	; 0x6000
    a2ac:	000000e4 	andeq	r0, r0, r4, ror #1
    a2b0:	00202e03 	eoreq	r2, r0, r3, lsl #28
    a2b4:	20650600 	rsbcs	r0, r5, r0, lsl #12
    a2b8:	05000002 	streq	r0, [r0, #-2]
    a2bc:	00022604 	andeq	r2, r2, r4, lsl #12
    a2c0:	02310700 	eorseq	r0, r1, #0, 14
    a2c4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a2c8:	00000000 	andeq	r0, r0, r0
    a2cc:	0024ef03 	eoreq	lr, r4, r3, lsl #30
    a2d0:	20670600 	rsbcs	r0, r7, r0, lsl #12
    a2d4:	03000002 	movweq	r0, #2
    a2d8:	000022e4 	andeq	r2, r0, r4, ror #5
    a2dc:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    a2e0:	bd030000 	stclt	0, cr0, [r3, #-0]
    a2e4:	06000024 	streq	r0, [r0], -r4, lsr #32
    a2e8:	0000eb6b 	andeq	lr, r0, fp, ror #22
    a2ec:	22920300 	addscs	r0, r2, #0, 6
    a2f0:	6d060000 	stcvs	0, cr0, [r6, #-0]
    a2f4:	000000eb 	andeq	r0, r0, fp, ror #1
    a2f8:	0022a403 	eoreq	sl, r2, r3, lsl #8
    a2fc:	eb6f0600 	bl	1bcbb04 <__ccfg+0x1babb5c>
    a300:	0b000000 	bleq	a308 <__exidx_end+0x7694>
    a304:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    a308:	0c000003 	stceq	0, cr0, [r0], {3}
    a30c:	00002248 	andeq	r2, r0, r8, asr #4
    a310:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    a314:	0c000000 	stceq	0, cr0, [r0], {-0}
    a318:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    a31c:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    a320:	0c040000 	stceq	0, cr0, [r4], {-0}
    a324:	0000226c 	andeq	r2, r0, ip, ror #4
    a328:	01427e06 	cmpeq	r2, r6, lsl #28
    a32c:	0c080000 	stceq	0, cr0, [r8], {-0}
    a330:	000023d7 	ldrdeq	r2, [r0], -r7
    a334:	014d7f06 	cmpeq	sp, r6, lsl #30
    a338:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a33c:	000023e9 	andeq	r2, r0, r9, ror #7
    a340:	016d8006 	cmneq	sp, r6
    a344:	0c100000 	ldceq	0, cr0, [r0], {-0}
    a348:	000023fb 	strdeq	r2, [r0], -fp
    a34c:	01788106 	cmneq	r8, r6, lsl #2
    a350:	0c140000 	ldceq	0, cr0, [r4], {-0}
    a354:	00002146 	andeq	r2, r0, r6, asr #2
    a358:	01838206 	orreq	r8, r3, r6, lsl #4
    a35c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    a360:	00002261 	andeq	r2, r0, r1, ror #4
    a364:	018e8306 	orreq	r8, lr, r6, lsl #6
    a368:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    a36c:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    a370:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    a374:	0c200000 	stceq	0, cr0, [r0], #-0
    a378:	000021e9 	andeq	r2, r0, r9, ror #3
    a37c:	01e98506 	mvneq	r8, r6, lsl #10
    a380:	0c240000 	stceq	0, cr0, [r4], #-0
    a384:	00002204 	andeq	r2, r0, r4, lsl #4
    a388:	01f48606 	mvnseq	r8, r6, lsl #12
    a38c:	0c280000 	stceq	0, cr0, [r8], #-0
    a390:	0000241f 	andeq	r2, r0, pc, lsl r4
    a394:	01ff8706 	mvnseq	r8, r6, lsl #14
    a398:	0c2c0000 	stceq	0, cr0, [ip], #-0
    a39c:	0000219b 	muleq	r0, fp, r1
    a3a0:	02158806 	andseq	r8, r5, #393216	; 0x60000
    a3a4:	0c300000 	ldceq	0, cr0, [r0], #-0
    a3a8:	0000240d 	andeq	r2, r0, sp, lsl #8
    a3ac:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    a3b0:	0c340000 	ldceq	0, cr0, [r4], #-0
    a3b4:	0000224e 	andeq	r2, r0, lr, asr #4
    a3b8:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    a3bc:	0c380000 	ldceq	0, cr0, [r8], #-0
    a3c0:	000022c2 	andeq	r2, r0, r2, asr #5
    a3c4:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    a3c8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    a3cc:	000023c8 	andeq	r2, r0, r8, asr #7
    a3d0:	02478c06 	subeq	r8, r7, #1536	; 0x600
    a3d4:	0c400000 	mareq	acc0, r0, r0
    a3d8:	000021c3 	andeq	r2, r0, r3, asr #3
    a3dc:	02528d06 	subseq	r8, r2, #384	; 0x180
    a3e0:	0c440000 	mareq	acc0, r0, r4
    a3e4:	0000201f 	andeq	r2, r0, pc, lsl r0
    a3e8:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    a3ec:	00480000 	subeq	r0, r8, r0
    a3f0:	00232303 	eoreq	r2, r3, r3, lsl #6
    a3f4:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    a3f8:	0b000002 	bleq	a408 <__exidx_end+0x7794>
    a3fc:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    a400:	0c000003 	stceq	0, cr0, [r0], {3}
    a404:	00002a39 	andeq	r2, r0, r9, lsr sl
    a408:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    a40c:	0c000000 	stceq	0, cr0, [r0], {-0}
    a410:	00002b9e 	muleq	r0, lr, fp
    a414:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    a418:	0c040000 	stceq	0, cr0, [r4], {-0}
    a41c:	000029d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a420:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    a424:	0c080000 	stceq	0, cr0, [r8], {-0}
    a428:	00002a6c 	andeq	r2, r0, ip, ror #20
    a42c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    a430:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a434:	00002a02 	andeq	r2, r0, r2, lsl #20
    a438:	00c35901 	sbceq	r5, r3, r1, lsl #18
    a43c:	00100000 	andseq	r0, r0, r0
    a440:	002bc903 	eoreq	ip, fp, r3, lsl #18
    a444:	605a0100 	subsvs	r0, sl, r0, lsl #2
    a448:	0d000003 	stceq	0, cr0, [r0, #-12]
    a44c:	00001b0d 	andeq	r1, r0, sp, lsl #22
    a450:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    a454:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    a458:	00002bec 	andeq	r2, r0, ip, ror #23
    a45c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    a460:	ca0e0000 	bgt	38a468 <__ccfg+0x36a4c0>
    a464:	01000029 	tsteq	r0, r9, lsr #32
    a468:	0000ce65 	andeq	ip, r0, r5, ror #28
    a46c:	a80f0000 	stmdage	pc, {}	; <UNPREDICTABLE>
    a470:	0200001e 	andeq	r0, r0, #30
    a474:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    a478:	fb010000 	blx	4a482 <__ccfg+0x2a4da>
    a47c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    a480:	00002bec 	andeq	r2, r0, ip, ror #23
    a484:	00cea001 	sbceq	sl, lr, r1
    a488:	57100000 	ldrpl	r0, [r0, -r0]
    a48c:	0100002c 	tsteq	r0, ip, lsr #32
    a490:	0000cea2 	andeq	ip, r0, r2, lsr #29
    a494:	b0110000 	andslt	r0, r1, r0
    a498:	bc000003 	stclt	0, cr0, [r0], {3}
    a49c:	5c000029 	stcpl	0, cr0, [r0], {41}	; 0x29
    a4a0:	01000000 	mrseq	r0, (UNDEF: 0)
    a4a4:	0004b69c 	muleq	r4, ip, r6
    a4a8:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    a4ac:	45480000 	strbmi	r0, [r8, #-0]
    a4b0:	c7120000 	ldrgt	r0, [r2, -r0]
    a4b4:	74000003 	strvc	r0, [r0], #-3
    a4b8:	13000045 	movwne	r0, #69	; 0x45
    a4bc:	000029f6 	strdeq	r2, [r0], -r6
    a4c0:	00000014 	andeq	r0, r0, r4, lsl r0
    a4c4:	00000461 	andeq	r0, r0, r1, ror #8
    a4c8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    a4cc:	0045a000 	subeq	sl, r5, r0
    a4d0:	03c71200 	biceq	r1, r7, #0, 4
    a4d4:	45b30000 	ldrmi	r0, [r3, #0]!
    a4d8:	0a140000 	beq	50a4e0 <__ccfg+0x4ea538>
    a4dc:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a4e0:	01150074 	tsteq	r5, r4, ror r0
    a4e4:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    a4e8:	3c015201 	sfmcc	f5, 4, [r1], {1}
    a4ec:	01510115 	cmpeq	r1, r5, lsl r1
    a4f0:	50011530 	andpl	r1, r1, r0, lsr r5
    a4f4:	a0000c05 	andge	r0, r0, r5, lsl #24
    a4f8:	0000400c 	andeq	r4, r0, ip
    a4fc:	0029da16 	eoreq	sp, r9, r6, lsl sl
    a500:	00760200 	rsbseq	r0, r6, r0, lsl #4
    a504:	0000048d 	andeq	r0, r0, sp, lsl #9
    a508:	01530115 	cmpeq	r3, r5, lsl r1
    a50c:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    a510:	01153101 	tsteq	r5, r1, lsl #2
    a514:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a518:	0c055001 	stceq	0, cr5, [r5], {1}
    a51c:	400ca000 	andmi	sl, ip, r0
    a520:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    a524:	00007402 	andeq	r7, r0, r2, lsl #8
    a528:	0029f214 	eoreq	pc, r9, r4, lsl r2	; <UNPREDICTABLE>
    a52c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    a530:	01530115 	cmpeq	r3, r5, lsl r1
    a534:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    a538:	01153201 	tsteq	r5, r1, lsl #4
    a53c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a540:	0c055001 	stceq	0, cr5, [r5], {1}
    a544:	400ca000 	andmi	sl, ip, r0
    a548:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    a54c:	00007402 	andeq	r7, r0, r2, lsl #8
    a550:	03d31100 	bicseq	r1, r3, #0, 2
    a554:	2a180000 	bcs	60a55c <__ccfg+0x5ea5b4>
    a558:	002c0000 	eoreq	r0, ip, r0
    a55c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a560:	0000050d 	andeq	r0, r0, sp, lsl #10
    a564:	0003e412 	andeq	lr, r3, r2, lsl r4
    a568:	0045d400 	subeq	sp, r5, r0, lsl #8
    a56c:	03ef1700 	mvneq	r1, #0, 14
    a570:	50010000 	andpl	r0, r1, r0
    a574:	000ff818 	andeq	pc, pc, r8, lsl r8	; <UNPREDICTABLE>
    a578:	0004f400 	andeq	pc, r4, r0, lsl #8
    a57c:	03e41900 	mvneq	r1, #0, 18
    a580:	1a040000 	bne	10a588 <__ccfg+0xea5e0>
    a584:	00000ff8 	strdeq	r0, [r0], -r8
    a588:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    a58c:	14000000 	strne	r0, [r0], #-0
    a590:	00002a38 	andeq	r2, r0, r8, lsr sl
    a594:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    a598:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    a59c:	50011534 	andpl	r1, r1, r4, lsr r5
    a5a0:	a0000c05 	andge	r0, r0, r5, lsl #24
    a5a4:	0000400c 	andeq	r4, r0, ip
    a5a8:	002cd21c 	eoreq	sp, ip, ip, lsl r2
    a5ac:	01840200 	orreq	r0, r4, r0, lsl #4
    a5b0:	000000ce 	andeq	r0, r0, lr, asr #1
    a5b4:	00000000 	andeq	r0, r0, r0
    a5b8:	00000090 	muleq	r0, r0, r0
    a5bc:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    a5c0:	d81d0000 	ldmdale	sp, {}	; <UNPREDICTABLE>
    a5c4:	0100002b 	tsteq	r0, fp, lsr #32
    a5c8:	0000cec2 	andeq	ip, r0, r2, asr #29
    a5cc:	0045f500 	subeq	pc, r5, r0, lsl #10
    a5d0:	2b561e00 	blcs	1591dd8 <__ccfg+0x1571e30>
    a5d4:	c4010000 	strgt	r0, [r1], #-0
    a5d8:	000000ce 	andeq	r0, r0, lr, asr #1
    a5dc:	00004621 	andeq	r4, r0, r1, lsr #12
    a5e0:	002b6f1e 	eoreq	r6, fp, lr, lsl pc
    a5e4:	c3c50100 	bicgt	r0, r5, #0, 2
    a5e8:	34000000 	strcc	r0, [r0], #-0
    a5ec:	1e000046 	cdpne	0, 0, cr0, cr0, cr6, {2}
    a5f0:	00002a0e 	andeq	r2, r0, lr, lsl #20
    a5f4:	00cec601 	sbceq	ip, lr, r1, lsl #12
    a5f8:	465b0000 	ldrbmi	r0, [fp], -r0
    a5fc:	001f0000 	andseq	r0, pc, r0
    a600:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a604:	1f000008 	svcne	0x00000008
    a608:	00000000 	andeq	r0, r0, r0
    a60c:	000008aa 	andeq	r0, r0, sl, lsr #17
    a610:	2a952000 	bcs	fe552618 <_estack+0xde54d618>
    a614:	91020000 	mrsls	r0, (UNDEF: 2)
    a618:	00000001 	andeq	r0, r0, r1
    a61c:	00001800 	andeq	r1, r0, r0, lsl #16
    a620:	ae9c0100 	fmlgee	f0, f4, f0
    a624:	21000005 	tstcs	r0, r5
    a628:	00000000 	andeq	r0, r0, r0
    a62c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    a630:	000005a4 	andeq	r0, r0, r4, lsr #11
    a634:	01510115 	cmpeq	r1, r5, lsl r1
    a638:	50011531 	andpl	r1, r1, r1, lsr r5
    a63c:	1f003301 	svcne	0x00003301
    a640:	00000000 	andeq	r0, r0, r0
    a644:	0000089e 	muleq	r0, lr, r8
    a648:	2bad2200 	blcs	feb52e50 <_estack+0xdeb4de50>
    a64c:	22020000 	andcs	r0, r2, #0
    a650:	0005bb01 	andeq	fp, r5, r1, lsl #22
    a654:	01020300 	mrseq	r0, LR_svc
    a658:	000bb802 	andeq	fp, fp, r2, lsl #16
    a65c:	23372300 	teqcs	r7, #0, 6
    a660:	40020000 	andmi	r0, r2, r0
    a664:	e01c0301 	ands	r0, ip, r1, lsl #6
    a668:	02000029 	andeq	r0, r0, #41	; 0x29
    a66c:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    a670:	00000000 	andeq	r0, r0, r0
    a674:	00600000 	rsbeq	r0, r0, r0
    a678:	9c010000 	stcls	0, cr0, [r1], {-0}
    a67c:	00000677 	andeq	r0, r0, r7, ror r6
    a680:	002b8e24 	eoreq	r8, fp, r4, lsr #28
    a684:	01020100 	mrseq	r0, (UNDEF: 18)
    a688:	000000ce 	andeq	r0, r0, lr, asr #1
    a68c:	000046af 	andeq	r4, r0, pc, lsr #13
    a690:	002c0a24 	eoreq	r0, ip, r4, lsr #20
    a694:	01030100 	mrseq	r0, (UNDEF: 19)
    a698:	000000ce 	andeq	r0, r0, lr, asr #1
    a69c:	000046c2 	andeq	r4, r0, r2, asr #13
    a6a0:	0005ae25 	andeq	sl, r5, r5, lsr #28
    a6a4:	00000000 	andeq	r0, r0, r0
    a6a8:	00001000 	andeq	r1, r0, r0
    a6ac:	01090100 	mrseq	r0, (UNDEF: 25)
    a6b0:	0000063c 	andeq	r0, r0, ip, lsr r6
    a6b4:	00000014 	andeq	r0, r0, r4, lsl r0
    a6b8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    a6bc:	01530115 	cmpeq	r3, r5, lsl r1
    a6c0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    a6c4:	01153101 	tsteq	r5, r1, lsl #2
    a6c8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    a6cc:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a6d0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a6d4:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    a6d8:	000005c2 	andeq	r0, r0, r2, asr #11
    a6dc:	00000000 	andeq	r0, r0, r0
    a6e0:	00000008 	andeq	r0, r0, r8
    a6e4:	5a010a01 	bpl	4cef0 <__ccfg+0x2cf48>
    a6e8:	1f000006 	svcne	0x00000006
    a6ec:	00000000 	andeq	r0, r0, r0
    a6f0:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    a6f4:	00002100 	andeq	r2, r0, r0, lsl #2
    a6f8:	03d30000 	bicseq	r0, r3, #0
    a6fc:	066d0000 	strbteq	r0, [sp], -r0
    a700:	01150000 	tsteq	r5, r0
    a704:	00310150 	eorseq	r0, r1, r0, asr r1
    a708:	0000001f 	andeq	r0, r0, pc, lsl r0
    a70c:	00089e00 	andeq	r9, r8, r0, lsl #28
    a710:	b5200000 	strlt	r0, [r0, #-0]!
    a714:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a718:	000001ae 	andeq	r0, r0, lr, lsr #3
    a71c:	00340000 	eorseq	r0, r4, r0
    a720:	9c010000 	stcls	0, cr0, [r1], {-0}
    a724:	000006e9 	andeq	r0, r0, r9, ror #13
    a728:	0005c225 	andeq	ip, r5, r5, lsr #4
    a72c:	00000000 	andeq	r0, r0, r0
    a730:	00000800 	andeq	r0, r0, r0, lsl #16
    a734:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    a738:	000006ab 	andeq	r0, r0, fp, lsr #13
    a73c:	0000001f 	andeq	r0, r0, pc, lsl r0
    a740:	0008b500 	andeq	fp, r8, r0, lsl #10
    a744:	00210000 	eoreq	r0, r1, r0
    a748:	b0000000 	andlt	r0, r0, r0
    a74c:	c3000003 	movwgt	r0, #3
    a750:	15000006 	strne	r0, [r0, #-6]
    a754:	30015101 	andcc	r5, r1, r1, lsl #2
    a758:	01500115 	cmpeq	r0, r5, lsl r1
    a75c:	00210033 	eoreq	r0, r1, r3, lsr r0
    a760:	d3000000 	movwle	r0, #0
    a764:	d6000003 	strle	r0, [r0], -r3
    a768:	15000006 	strne	r0, [r0, #-6]
    a76c:	31015001 	tstcc	r1, r1
    a770:	00001f00 	andeq	r1, r0, r0, lsl #30
    a774:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a778:	001f0000 	andseq	r0, pc, r0
    a77c:	aa000000 	bge	a784 <__exidx_end+0x7b10>
    a780:	00000008 	andeq	r0, r0, r8
    a784:	002ada1c 	eoreq	sp, sl, ip, lsl sl
    a788:	01f20200 	mvnseq	r0, r0, lsl #4
    a78c:	000000c3 	andeq	r0, r0, r3, asr #1
    a790:	00000000 	andeq	r0, r0, r0
    a794:	00000038 	andeq	r0, r0, r8, lsr r0
    a798:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    a79c:	f7260000 			; <UNDEFINED> instruction: 0xf7260000
    a7a0:	0100002b 	tsteq	r0, fp, lsr #32
    a7a4:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    a7a8:	46d50000 	ldrbmi	r0, [r5], r0
    a7ac:	84270000 	strthi	r0, [r7], #-0
    a7b0:	0100002b 	tsteq	r0, fp, lsr #32
    a7b4:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    a7b8:	51010000 	mrspl	r0, (UNDEF: 1)
    a7bc:	002ced27 	eoreq	lr, ip, r7, lsr #26
    a7c0:	01410100 	mrseq	r0, (UNDEF: 81)
    a7c4:	000000c3 	andeq	r0, r0, r3, asr #1
    a7c8:	40007105 	andmi	r7, r0, r5, lsl #2
    a7cc:	21279f26 			; <UNDEFINED> instruction: 0x21279f26
    a7d0:	0100002a 	tsteq	r0, sl, lsr #32
    a7d4:	00c30143 	sbceq	r0, r3, r3, asr #2
    a7d8:	71070000 	mrsvc	r0, (UNDEF: 7)
    a7dc:	48244000 	stmdami	r4!, {lr}
    a7e0:	29279f26 	stmdbcs	r7!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    a7e4:	0100002a 	tsteq	r0, sl, lsr #32
    a7e8:	00c30145 	sbceq	r0, r3, r5, asr #2
    a7ec:	71070000 	mrsvc	r0, (UNDEF: 7)
    a7f0:	48244800 	stmdami	r4!, {fp, lr}
    a7f4:	31249f26 			; <UNDEFINED> instruction: 0x31249f26
    a7f8:	0100002a 	tsteq	r0, sl, lsr #32
    a7fc:	00c30147 	sbceq	r0, r3, r7, asr #2
    a800:	47030000 	strmi	r0, [r3, -r0]
    a804:	7e240000 	cdpvc	0, 2, cr0, cr4, cr0, {0}
    a808:	0100002a 	tsteq	r0, sl, lsr #32
    a80c:	00c30156 	sbceq	r0, r3, r6, asr r1
    a810:	471c0000 	ldrmi	r0, [ip, -r0]
    a814:	29240000 	stmdbcs	r4!, {}	; <UNPREDICTABLE>
    a818:	0100002b 	tsteq	r0, fp, lsr #32
    a81c:	00c30157 	sbceq	r0, r3, r7, asr r1
    a820:	473f0000 	ldrmi	r0, [pc, -r0]!
    a824:	64280000 	strtvs	r0, [r8], #-0
    a828:	01580100 	cmpeq	r8, r0, lsl #2
    a82c:	000000c3 	andeq	r0, r0, r3, asr #1
    a830:	00004768 	andeq	r4, r0, r8, ror #14
    a834:	2c1b1c00 	ldccs	12, cr1, [fp], {-0}
    a838:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    a83c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    a840:	00000000 	andeq	r0, r0, r0
    a844:	00000c00 	andeq	r0, r0, r0, lsl #24
    a848:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    a84c:	26000007 	strcs	r0, [r0], -r7
    a850:	00002b42 	andeq	r2, r0, r2, asr #22
    a854:	c3016301 	movwgt	r6, #4865	; 0x1301
    a858:	e2000000 	and	r0, r0, #0
    a85c:	24000047 	strcs	r0, [r0], #-71	; 0xffffffb9
    a860:	00002c71 	andeq	r2, r0, r1, ror ip
    a864:	c3018501 	movwgt	r8, #5377	; 0x1501
    a868:	03000000 	movweq	r0, #0
    a86c:	00000048 	andeq	r0, r0, r8, asr #32
    a870:	002b041c 	eoreq	r0, fp, ip, lsl r4
    a874:	01c20200 	biceq	r0, r2, r0, lsl #4
    a878:	000000ce 	andeq	r0, r0, lr, asr #1
    a87c:	00000000 	andeq	r0, r0, r0
    a880:	00000034 	andeq	r0, r0, r4, lsr r0
    a884:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    a888:	c4240000 	strtgt	r0, [r4], #-0
    a88c:	0100002c 	tsteq	r0, ip, lsr #32
    a890:	00ce0192 	smulleq	r0, lr, r2, r1
    a894:	48430000 	stmdami	r3, {}^	; <UNPREDICTABLE>
    a898:	00240000 	eoreq	r0, r4, r0
    a89c:	0100002c 	tsteq	r0, ip, lsr #32
    a8a0:	00ce0193 	smulleq	r0, lr, r3, r1
    a8a4:	48650000 	stmdami	r5!, {}^	; <UNPREDICTABLE>
    a8a8:	d7240000 	strle	r0, [r4, -r0]!
    a8ac:	01000021 	tsteq	r0, r1, lsr #32
    a8b0:	00ce0194 	smulleq	r0, lr, r4, r1
    a8b4:	48780000 	ldmdami	r8!, {}^	; <UNPREDICTABLE>
    a8b8:	ac240000 	stcge	0, cr0, [r4], #-0
    a8bc:	0100002a 	tsteq	r0, sl, lsr #32
    a8c0:	00ce0195 	smulleq	r0, lr, r5, r1
    a8c4:	489b0000 	ldmmi	fp, {}	; <UNPREDICTABLE>
    a8c8:	001f0000 	andseq	r0, pc, r0
    a8cc:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a8d0:	1f000008 	svcne	0x00000008
    a8d4:	00000000 	andeq	r0, r0, r0
    a8d8:	0000089e 	muleq	r0, lr, r8
    a8dc:	2c901c00 	ldccs	12, cr1, [r0], {0}
    a8e0:	d3020000 	movwle	r0, #8192	; 0x2000
    a8e4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a8e8:	00000000 	andeq	r0, r0, r0
    a8ec:	00001c00 	andeq	r1, r0, r0, lsl #24
    a8f0:	8d9c0100 	ldfhis	f0, [ip]
    a8f4:	24000008 	strcs	r0, [r0], #-8
    a8f8:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
    a8fc:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    a900:	b7000000 	strlt	r0, [r0, -r0]
    a904:	24000048 	strcs	r0, [r0], #-72	; 0xffffffb8
    a908:	00002c82 	andeq	r2, r0, r2, lsl #25
    a90c:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    a910:	ca000000 	bgt	a918 <__exidx_end+0x7ca4>
    a914:	24000048 	strcs	r0, [r0], #-72	; 0xffffffb8
    a918:	00002a88 	andeq	r2, r0, r8, lsl #21
    a91c:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    a920:	e5000000 	str	r0, [r0, #-0]
    a924:	00000048 	andeq	r0, r0, r8, asr #32
    a928:	002b3529 	eoreq	r3, fp, r9, lsr #10
    a92c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    a930:	05000003 	streq	r0, [r0, #-3]
    a934:	00000003 	andeq	r0, r0, r3
    a938:	17cb2a00 	strbne	r2, [fp, r0, lsl #20]
    a93c:	45070000 	strmi	r0, [r7, #-0]
    a940:	0000ce03 	andeq	ip, r0, r3, lsl #28
    a944:	16172b00 	ldrne	r2, [r7], -r0, lsl #22
    a948:	aa080000 	bge	20a950 <__ccfg+0x1ea9a8>
    a94c:	000000c3 	andeq	r0, r0, r3, asr #1
    a950:	0020db2c 	eoreq	sp, r0, ip, lsr #22
    a954:	08990600 	ldmeq	r9, {r9, sl}
    a958:	000000d9 	ldrdeq	r0, [r0], -r9
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			i = k;
      40:	13490035 	movtne	r0, #36917	; 0x9035
				j->Next = k;
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
}
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0x1050>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      b0:	13490b39 	movtne	r0, #39737	; 0x9b39
      b4:	150f0000 	strne	r0, [pc, #-0]	; bc <g_pfnVectors+0xbc>
      b8:	010c2701 	tsteq	ip, r1, lsl #14
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	13490005 	movtne	r0, #36869	; 0x9005
      c4:	34110000 	ldrcc	r0, [r1], #-0
      c8:	3a0e0300 	bcc	380cd0 <__ccfg+0x360d28>
      cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      d0:	3f13490b 	svccc	0x0013490b
      d4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
      d8:	01131200 	tsteq	r3, r0, lsl #4
      dc:	0b3a0b0b 	bleq	e82d10 <__ccfg+0xe62d68>
      e0:	0b39053b 	bleq	e415d4 <__ccfg+0xe2162c>
      e4:	00001301 	andeq	r1, r0, r1, lsl #6
      e8:	03000d13 	movweq	r0, #3347	; 0xd13
      ec:	3b0b3a0e 	blcc	2ce92c <__ccfg+0x2ae984>
      f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			wwait (st, 50);
      f4:	000b3813 	andeq	r3, fp, r3, lsl r8
			curr += 0x1000;
      f8:	01131400 	tsteq	r3, r0, lsl #8
      fc:	0b0b0e03 	bleq	2c3910 <__ccfg+0x2a3968>
		if (from >= EE_SIZE || upto < from)
     100:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     104:	13010b39 	movwne	r0, #6969	; 0x1b39
			upto = EE_SIZE - 1;
     108:	21150000 	tstcs	r5, r0
     10c:	2f134900 	svccs	0x00134900
     110:	1600000b 	strne	r0, [r0], -fp
     114:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	00000b38 	andeq	r0, r0, r8, lsr fp
     124:	03003417 	movweq	r3, #1047	; 0x417
}
     128:	3b0b3a0e 	blcc	2ce968 <__ccfg+0x2ae9c0>
     12c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     130:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
}
     134:	1800000a 	stmdane	r0, {r1, r3}
        if(settingsInput[i] == ' ') {
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <__ccfg+0xea2e84>
            numbers[numbersIndex] = number;
     140:	13490b39 	movtne	r0, #39737	; 0x9b39
     144:	0a020c3f 	beq	83248 <__ccfg+0x632a0>
            numbersIndex++;
     148:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	030c3f01 	movweq	r3, #52993	; 0xcf01
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     150:	3b0b3a0e 	blcc	2ce990 <__ccfg+0x2ae9e8>
            return 1;
     154:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     158:	1201110c 	andne	r1, r1, #12, 2
     15c:	010a4001 	tsteq	sl, r1
fsm root {
     160:	1a000013 	bne	1b4 <root+0x54>
     164:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
     16c:	13490b39 	movtne	r0, #39737	; 0x9b39
     170:	00000602 	andeq	r0, r0, r2, lsl #12
        initCycles();
     174:	03000a1b 	movweq	r0, #2587	; 0xa1b
        ser_outf(Initial, "Enter your name: ");
     178:	3b0b3a0e 	blcc	2ce9b8 <__ccfg+0x2aea10>
     17c:	110b390b 	tstne	fp, fp, lsl #18
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	1c000001 	stcne	0, cr0, [r0], {1}
     184:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     188:	341d0000 	ldrcc	r0, [sp], #-0
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18c:	3a0e0300 	bcc	380d94 <__ccfg+0x360dec>
     190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        ser_inf(Get_Choice, "%c", &choice);
     194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     198:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     19c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        if (choice == 'A' || choice == 'a'){
     1a0:	0b3b0b3a 	bleq	ec2e90 <__ccfg+0xea2ee8>
     1a4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1a8:	0b1f0000 	bleq	7c01b0 <__ccfg+0x7a0208>
            proceed Adjust_Intervals;
     1ac:	01065501 	tsteq	r6, r1, lsl #10
            proceed Monitor;
     1b0:	20000013 	andcs	r0, r0, r3, lsl r0
        proceed Get_Choice;
     1b4:	0111010b 	tsteq	r1, fp, lsl #2
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	13010112 	movwne	r0, #4370	; 0x1112
     1bc:	34210000 	strtcc	r0, [r1], #-0
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	3a080300 	bcc	200dc8 <__ccfg+0x1e0e20>
     1c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1c8:	0013490b 	andseq	r4, r3, fp, lsl #18
        processSettingsInput(settings);
     1cc:	011d2200 	tsteq	sp, r0, lsl #4
        proceed Show_Menu;
     1d0:	01111331 	tsteq	r1, r1, lsr r3
     1d4:	0b580112 	bleq	1600624 <__ccfg+0x15e067c>
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d8:	0b570b59 	bleq	15c2f44 <__ccfg+0x15a2f9c>
     1dc:	00001301 	andeq	r1, r0, r1, lsl #6
     1e0:	31000523 	tstcc	r0, r3, lsr #10
     1e4:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
     1e8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
        proceed Show_Menu;
     1ec:	06550152 			; <UNDEFINED> instruction: 0x06550152
     1f0:	0b590b58 	bleq	1642f58 <__ccfg+0x1622fb0>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	00000b57 	andeq	r0, r0, r7, asr fp
     1f8:	3f012e25 	svccc	0x00012e25
        displayCycle = YES;
     1fc:	3a0e030c 	bcc	380e34 <__ccfg+0x360e8c>
        ser_inf(Await_Stop, "%c", ch);
     200:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     204:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     208:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
        proceed Await_Stop;
     20c:	010a4001 	tsteq	sl, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     210:	26000013 			; <UNDEFINED> instruction: 0x26000013
     214:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        leds(1, 0);
     218:	0b3b0b3a 	bleq	ec2f08 <__ccfg+0xea2f60>
     21c:	13490b39 	movtne	r0, #39737	; 0x9b39
     220:	00000602 	andeq	r0, r0, r2, lsl #12
     224:	03003427 	movweq	r3, #1063	; 0x427
     228:	3b0b3a0e 	blcc	2cea68 <__ccfg+0x2aeac0>
        leds(0, 0);
     22c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     230:	000b1c13 	andeq	r1, fp, r3, lsl ip
     234:	00342800 	eorseq	r2, r4, r0, lsl #16
     238:	0b3a0803 	bleq	e8224c <__ccfg+0xe622a4>
     23c:	0b390b3b 	bleq	e42f30 <__ccfg+0xe22f88>
     240:	06021349 	streq	r1, [r2], -r9, asr #6
        } else if (choice == 'S' || choice == 's') {
     244:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
            proceed Stop;
     248:	030c3f00 	movweq	r3, #52992	; 0xcf00
        } else if (choice == 'V' || choice == 'v') {
     24c:	3b0b3a0e 	blcc	2cea8c <__ccfg+0x2aeae4>
            proceed View_Settings;
     250:	110b390b 	tstne	fp, fp, lsl #18
        } else if (choice == 'M' || choice == 'm') {
     254:	40011201 	andmi	r1, r1, r1, lsl #4
            proceed Monitor;
     258:	2a00000a 	bcs	288 <root+0x128>
     25c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     260:	01120111 	tsteq	r2, r1, lsl r1
     264:	0b590b58 	bleq	1642fcc <__ccfg+0x1623024>
     268:	00000b57 	andeq	r0, r0, r7, asr fp
     26c:	31011d2b 	tstcc	r1, fp, lsr #26
     270:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     274:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     278:	0105570b 	tsteq	r5, fp, lsl #14
     27c:	2c000013 	stccs	0, cr0, [r0], {19}
     280:	0e03012e 	adfeqsp	f0, f3, #0.5
     284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     288:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
static void devinit_uart (int devnum) {
     28c:	13010b20 	movwne	r0, #6944	; 0x1b20
	adddevfunc (ioreq_uart_a, devnum);
     290:	052d0000 	streq	r0, [sp, #-0]!
     294:	3a0e0300 	bcc	380e9c <__ccfg+0x360ef4>
void udelay (volatile word n) {
     298:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     29c:	0013490b 	andseq	r4, r3, fp, lsl #18
	while (n) {
     2a0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     2a4:	0b3a0e03 	bleq	e83ab8 <__ccfg+0xe63b10>
}
     2a8:	0b39053b 	bleq	e4179c <__ccfg+0xe217f4>
	while (n--);
     2ac:	0b200c27 	bleq	803350 <__ccfg+0x7e33a8>
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		n--;
     2b8:	0e030b13 	vmoveq.32	d3[0], r0
     2bc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     2c0:	06100111 			; <UNDEFINED> instruction: 0x06100111
void mdelay (volatile word n) {
     2c4:	24020000 	strcs	r0, [r2], #-0
     2c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	while (n) {
     2cc:	000e030b 	andeq	r0, lr, fp, lsl #6
     2d0:	00160300 	andseq	r0, r6, r0, lsl #6
}
     2d4:	0b3a0e03 	bleq	e83ae8 <__ccfg+0xe63b40>
		udelay (999);
     2d8:	0b390b3b 	bleq	e42fcc <__ccfg+0xe23024>
     2dc:	00001349 	andeq	r1, r0, r9, asr #6
		n--;
     2e0:	0b002404 	bleq	92f8 <__exidx_end+0x6684>
     2e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     2e8:	05000008 	streq	r0, [r0, #-8]
     2ec:	13490026 	movtne	r0, #36902	; 0x9026
void __pi_ondomain (lword d) {
     2f0:	35060000 	strcc	r0, [r6, #-0]
     2f4:	00134900 	andseq	r4, r3, r0, lsl #18
		if (__pi_systat.effpdm > 1)
     2f8:	000f0700 	andeq	r0, pc, r0, lsl #14
     2fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			__pi_systat.effpdm = 1;
     300:	13080000 	movwne	r0, #32768	; 0x8000
	PRCMPowerDomainOn (d);
     304:	3a0b0b01 	bcc	2c2f10 <__ccfg+0x2a2f68>
     308:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     30c:	0013010b 	andseq	r0, r3, fp, lsl #2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	000d0900 	andeq	r0, sp, r0, lsl #18
     314:	0b3a0e03 	bleq	e83b28 <__ccfg+0xe63b80>
     318:	0b390b3b 	bleq	e4300c <__ccfg+0xe23064>
	__pi_systat.ondmns |= d;
     31c:	0b0b1349 	bleq	2c5048 <__ccfg+0x2a50a0>
     320:	0b0c0b0d 	bleq	302f5c <__ccfg+0x2e2fb4>
}
     324:	00000b38 	andeq	r0, r0, r8, lsr fp
     328:	03000d0a 	movweq	r0, #3338	; 0xd0a
void __pi_syserror (word ec, const char *m) {
     32c:	3b0b3a0e 	blcc	2ceb6c <__ccfg+0x2aebc4>
	diag ("SYSERR: %x, %s", ec, m);
     330:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     334:	000b3813 	andeq	r3, fp, r3, lsl r8
  __ASM volatile ("cpsid i" : : : "memory");
     338:	00340b00 	eorseq	r0, r4, r0, lsl #22
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	0b3a0e03 	bleq	e83b50 <__ccfg+0xe63ba8>
     340:	0b390b3b 	bleq	e43034 <__ccfg+0xe2308c>
     344:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 228 <root+0xc8>
		all_leds_blink;
     348:	00000c3c 	andeq	r0, r0, ip, lsr ip
     34c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     350:	00130113 	andseq	r0, r3, r3, lsl r1
     354:	00210d00 	eoreq	r0, r1, r0, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	160e0000 	strne	r0, [lr], -r0
     35c:	3a0e0300 	bcc	380f64 <__ccfg+0x360fbc>
     360:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     364:	0013490b 	andseq	r4, r3, fp, lsl #18
     368:	01150f00 	tsteq	r5, r0, lsl #30
     36c:	13010c27 	movwne	r0, #7207	; 0x1c27
	while (1) {
     370:	05100000 	ldreq	r0, [r0, #-0]
     374:	00134900 	andseq	r4, r3, r0, lsl #18
     378:	00341100 	eorseq	r1, r4, r0, lsl #2
     37c:	0b3a0e03 	bleq	e83b90 <__ccfg+0xe63be8>
void tci_run_delay_timer () {
     380:	0b39053b 	bleq	e41874 <__ccfg+0xe218cc>
	setdel = __pi_mintk - __pi_old;
     384:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 268 <root+0x108>
     388:	00000c3c 	andeq	r0, r0, ip, lsr ip
     38c:	0b011312 	bleq	44fdc <__ccfg+0x25034>
     390:	3b0b3a0b 	blcc	2cebc4 <__ccfg+0x2aec1c>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	010b3905 	tsteq	fp, r5, lsl #18
     398:	13000013 	movwne	r0, #19
     39c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     3a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	13490b39 	movtne	r0, #39737	; 0x9b39
	sti_tim;
     3a8:	00000b38 	andeq	r0, r0, r8, lsr fp
}
     3ac:	03011314 	movweq	r1, #4884	; 0x1314
     3b0:	3a0b0b0e 	bcc	2c2ff0 <__ccfg+0x2a3048>
     3b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3b8:	0013010b 	andseq	r0, r3, fp, lsl #2
     3bc:	00211500 	eoreq	r1, r1, r0, lsl #10
	cli_aux;
     3c0:	0b2f1349 	bleq	bc50ec <__ccfg+0xba5144>
     3c4:	34160000 	ldrcc	r0, [r6], #-0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	3a0e0300 	bcc	380fd0 <__ccfg+0x361028>
     3cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3d0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3d4:	00341700 	eorseq	r1, r4, r0, lsl #14
	sti_aux;
     3d8:	0b3a0e03 	bleq	e83bec <__ccfg+0xe63c44>
}
     3dc:	0b390b3b 	bleq	e430d0 <__ccfg+0xe23128>
     3e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2c4 <mdelay>
     3e4:	00000a02 	andeq	r0, r0, r2, lsl #20
void AONRTCIntHandler () {
     3e8:	03003418 	movweq	r3, #1048	; 0x418
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	3b0b3a0e 	blcc	2cec2c <__ccfg+0x2aec84>
     3f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	000a0213 	andeq	r0, sl, r3, lsl r2
		if (__pi_utims [0] == 0)
     3f8:	00341900 	eorseq	r1, r4, r0, lsl #18
     3fc:	0b3a1347 	bleq	e85120 <__ccfg+0xe65178>
		if (*(__pi_utims [0])) {
     400:	0b39053b 	bleq	e418f4 <__ccfg+0xe2194c>
     404:	00000a02 	andeq	r0, r0, r2, lsl #20
			(*(__pi_utims [0]))--;
     408:	3f012e1a 	svccc	0x00012e1a
		if (__pi_utims [1] == 0)
     40c:	3a0e030c 	bcc	381044 <__ccfg+0x36109c>
		if (*(__pi_utims [1])) {
     410:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			aux_timer_inactive = 0;
     414:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			(*(__pi_utims [1]))--;
     418:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		if (__pi_utims [2] == 0)
     41c:	010a4001 	tsteq	sl, r1
		if (*(__pi_utims [2])) {
     420:	1b000013 	blne	474 <AONRTCIntHandler+0x8c>
			(*(__pi_utims [2]))--;
     424:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
		if (__pi_utims [3] != 0) {
     428:	00001301 	andeq	r1, r0, r1, lsl #6
			if (*(__pi_utims [3])) {
     42c:	0300341c 	movweq	r3, #1052	; 0x41c
				aux_timer_inactive = 0;
     430:	3b0b3a08 	blcc	2cec58 <__ccfg+0x2aecb0>
				(*(__pi_utims [3]))--;
     434:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (__pi_systat.ledsts) {
     438:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     43c:	1331001d 	teqne	r1, #29
		if (__pi_systat.ledblc++ == 0) {
     440:	01120111 	tsteq	r2, r1, lsl r1
     444:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
			if (__pi_systat.ledblk) {
     448:	00000b57 	andeq	r0, r0, r7, asr fp
     44c:	3f012e1e 	svccc	0x00012e1e
     450:	3a0e030c 	bcc	381088 <__ccfg+0x3610e0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     458:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
				if (__pi_systat.ledsts & 0x2)
     45c:	010a4001 	tsteq	sl, r1
     460:	1f000013 	svcne	0x00000013
     464:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
				if (__pi_systat.ledsts & 0x4)
     468:	0b3b0b3a 	bleq	ec3158 <__ccfg+0xea31b0>
				__pi_systat.ledblk = 0;
     46c:	00000b39 	andeq	r0, r0, r9, lsr fp
     470:	31011d20 	tstcc	r1, r0, lsr #26
			if (__pi_systat.fstblk)
     474:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     478:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				__pi_systat.ledblc = 200;
     47c:	010b5705 	tsteq	fp, r5, lsl #14
	if (events & AON_RTC_EVFLAGS_CH0) {
     480:	21000013 	tstcs	r0, r3, lsl r0
		cli_tim;
     484:	13310005 	teqne	r1, #5
		__pi_new += setdel;
     488:	1d220000 	stcne	0, cr0, [r2, #-0]
     48c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		setdel = 0;
     490:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		RISE_N_SHINE;
     494:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		__pi_new += setdel;
     498:	0013010b 	andseq	r0, r3, fp, lsl #2
		RISE_N_SHINE;
     49c:	010b2300 	mrseq	r2, (UNDEF: 59)
     4a0:	00000655 	andeq	r0, r0, r5, asr r6
		aux_timer_inactive = 1;
     4a4:	31000a24 	tstcc	r0, r4, lsr #20
     4a8:	00011113 	andeq	r1, r1, r3, lsl r1
				if (__pi_systat.ledsts & 0x1)
     4ac:	001d2500 	andseq	r2, sp, r0, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4b0:	01521331 	cmpeq	r2, r1, lsr r3
     4b4:	0b580655 	bleq	1601e10 <__ccfg+0x15e1e68>
				if (__pi_systat.ledsts & 0x2)
     4b8:	0b570559 	bleq	15c1a24 <__ccfg+0x15a1a7c>
     4bc:	1d260000 	stcne	0, cr0, [r6, #-0]
     4c0:	11133101 	tstne	r3, r1, lsl #2
				if (__pi_systat.ledsts & 0x8)
     4c4:	58011201 	stmdapl	r1, {r0, r9, ip}
				__pi_systat.ledblk = 1;
     4c8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     4cc:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (aux_timer_inactive) {
     4d0:	011d2700 	tsteq	sp, r0, lsl #14
			cli_aux;
     4d4:	01111331 	tsteq	r1, r1, lsr r3
     4d8:	0b580112 	bleq	1600928 <__ccfg+0x15e0980>
     4dc:	0b570559 	bleq	15c1a48 <__ccfg+0x15a1aa0>
     4e0:	1d280000 	stcne	0, cr0, [r8, #-0]
     4e4:	11133100 	tstne	r3, r0, lsl #2
     4e8:	58011201 	stmdapl	r1, {r0, r9, ip}
     4ec:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     4f0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     4f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
word tci_update_delay_ticks (Boolean force) {
     4fc:	13490b39 	movtne	r0, #39737	; 0x9b39
	cli_tim;
     500:	00000602 	andeq	r0, r0, r2, lsl #12
     504:	03012e2a 	movweq	r2, #7722	; 0x1e2a
	if (setdel) {
     508:	3b0b3a0e 	blcc	2ced48 <__ccfg+0x2aeda0>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	200b3905 	andcs	r3, fp, r5, lsl #18
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	0013010b 	andseq	r0, r3, fp, lsl #2
     514:	000a2b00 	andeq	r2, sl, r0, lsl #22
     518:	0b3a0e03 	bleq	e83d2c <__ccfg+0xe63d84>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	0b39053b 	bleq	e41a10 <__ccfg+0xe21a68>
				AON_RTC_O_CH0CMP)) - gettav ());
     520:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
	return NO;
     524:	030c3f01 	movweq	r3, #52993	; 0xcf01
			setdel = 0;
     528:	3b0b3a0e 	blcc	2ced68 <__ccfg+0x2aedc0>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     530:	1201110c 	andne	r1, r1, #12, 2
}
     534:	010a4001 	tsteq	sl, r1
		sti_tim;
     538:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
		return YES;
     53c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     540:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     544:	13490b39 	movtne	r0, #39737	; 0x9b39
     548:	00000602 	andeq	r0, r0, r2, lsl #12
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	11010b2e 	tstne	r1, lr, lsr #22
	UARTDisable (UART0_BASE);
     550:	01011201 	tsteq	r1, r1, lsl #4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	2f000013 	svccs	0x00000013
	UARTDisable (UART0_BASE);
     558:	13310034 	teqne	r1, #52	; 0x34
	UARTConfigSetExpClk (UART0_BASE,
     55c:	0b300000 	bleq	c00564 <__ccfg+0xbe05bc>
     560:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
     564:	31000006 	tstcc	r0, r6
     568:	13310034 	teqne	r1, #52	; 0x34
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	00000602 	andeq	r0, r0, r2, lsl #12
     570:	31011d32 	tstcc	r1, r2, lsr sp
     574:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     57c:	000b570b 	andeq	r5, fp, fp, lsl #14
     580:	011d3300 	tsteq	sp, r0, lsl #6
	urates [0] = rate;
     584:	01521331 	cmpeq	r2, r1, lsr r3
}
     588:	0b580655 	bleq	1601ee4 <__ccfg+0x15e1f3c>
     58c:	0b570559 	bleq	15c1af8 <__ccfg+0x15a1b50>
     590:	05340000 	ldreq	r0, [r4, #-0]!
     594:	3a080300 	bcc	20119c <__ccfg+0x1e11f4>
     598:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     59c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	3500000a 	strcc	r0, [r0, #-10]
     5a4:	13310005 	teqne	r1, #5
     5a8:	00000602 	andeq	r0, r0, r2, lsl #12
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	03003436 	movweq	r3, #1078	; 0x436
     5b0:	3b0b3a08 	blcc	2cedd8 <__ccfg+0x2aee30>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     5b8:	00060213 	andeq	r0, r6, r3, lsl r2
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	010b3700 	tsteq	fp, r0, lsl #14
     5c0:	01120111 	tsteq	r2, r1, lsl r1
     5c4:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     5c8:	3a0e0300 	bcc	3811d0 <__ccfg+0x361228>
     5cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5d0:	000b200b 	andeq	r2, fp, fp
     5d4:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
	switch (operation) {
     5d8:	0b3a0e03 	bleq	e83dec <__ccfg+0xe63e44>
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	0b39053b 	bleq	e41ad0 <__ccfg+0xe21b28>
     5e0:	01110c27 	tsteq	r1, r7, lsr #24
     5e4:	0a400112 	beq	1000a34 <__ccfg+0xfe0a8c>
     5e8:	00001301 	andeq	r1, r0, r1, lsl #6
     5ec:	03012e3a 	movweq	r2, #7738	; 0x1e3a
				*buf++ = uart_a_read;
     5f0:	3b0b3a0e 	blcc	2cee30 <__ccfg+0x2aee88>
     5f4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			while (len && uart_a_char_available) {
     5f8:	1113490c 	tstne	r3, ip, lsl #18
     5fc:	40011201 	andmi	r1, r1, r1, lsl #4
     600:	0013010a 	andseq	r0, r3, sl, lsl #2
			if (len != operation) {
     604:	00053b00 	andeq	r3, r5, r0, lsl #22
}
     608:	0b3a0803 	bleq	e8261c <__ccfg+0xe62674>
     60c:	0b39053b 	bleq	e41b00 <__ccfg+0xe21b58>
			uart_a_disable_int;
     610:	06021349 	streq	r1, [r2], -r9, asr #6
			if (uart_a_char_available) {
     614:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
				*buf++ = uart_a_read;
     618:	3a0e0301 	bcc	381224 <__ccfg+0x36127c>
			uart_a_disable_int;
     61c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     620:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
			if (uart_a_char_available) {
     624:	010a4001 	tsteq	sl, r1
     628:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
				uart_a_enable_int;
     62c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 57c <__pi_uart_setrate+0x30>
     630:	0b3a0e03 	bleq	e83e44 <__ccfg+0xe63e9c>
				goto Redo_rx;
     634:	0b39053b 	bleq	e41b28 <__ccfg+0xe21b80>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	13490c27 	movtne	r0, #39975	; 0x9c27
     63c:	13010b20 	movwne	r0, #6944	; 0x1b20
			return -2;
     640:	053e0000 	ldreq	r0, [lr, #-0]!
     644:	3a080300 	bcc	20124c <__ccfg+0x1e12a4>
				uart_a_write (*buf);
     648:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     64c:	0013490b 	andseq	r4, r3, fp, lsl #18
			while (len && uart_a_room_in_tx) {
     650:	000a3f00 	andeq	r3, sl, r0, lsl #30
     654:	0b3a0803 	bleq	e82668 <__ccfg+0xe626c0>
     658:	0b39053b 	bleq	e41b4c <__ccfg+0xe21ba4>
			if (len != operation) {
     65c:	34400000 	strbcc	r0, [r0], #-0
			uart_a_disable_int;
     660:	3a0e0300 	bcc	381268 <__ccfg+0x3612c0>
     664:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (uart_a_room_in_tx) {
     668:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     66c:	41000006 	tstmi	r0, r6
				uart_a_enable_int;
     670:	0803000a 	stmdaeq	r3, {r1, r3}
     674:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				*buf++ = uart_a_read;
     678:	01110b39 	tsteq	r1, r9, lsr fp
			if (uart_a_room_in_tx) {
     67c:	1d420000 	stclne	0, cr0, [r2, #-0]
				uart_a_write (*buf);
     680:	11133101 	tstne	r3, r1, lsl #2
     684:	58011201 	stmdapl	r1, {r0, r9, ip}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     68c:	0013010b 	andseq	r0, r3, fp, lsl #2
			uart_a_enable_int;
     690:	011d4300 	tsteq	sp, r0, lsl #6
     694:	01111331 	tsteq	r1, r1, lsr r3
     698:	0b580112 	bleq	1600ae8 <__ccfg+0x15e0b40>
			return 0;
     69c:	0b570b59 	bleq	15c3408 <__ccfg+0x15a3460>
			if (len == UART_CNTRL_SETRATE) {
     6a0:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	3a0e0301 	bcc	3812b0 <__ccfg+0x361308>
     6a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6ac:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
				syserror (EREQPAR, "uar");
     6b0:	010b2013 	tsteq	fp, r3, lsl r0
			syserror (ENOOPER, "uai");
     6b4:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
			if (len == UART_CNTRL_GETRATE) {
     6b8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				return 1;
     6bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6c0:	13490b39 	movtne	r0, #39737	; 0x9b39
			syserror (ENOOPER, "uai");
     6c4:	00000b20 	andeq	r0, r0, r0, lsr #22
     6c8:	03012e46 	movweq	r2, #7750	; 0x1e46
     6cc:	3b0b3a0e 	blcc	2cef0c <__ccfg+0x2aef64>
     6d0:	200b390b 	andcs	r3, fp, fp, lsl #18
     6d4:	0013010b 	andseq	r0, r3, fp, lsl #2
     6d8:	00344700 	eorseq	r4, r4, r0, lsl #14
     6dc:	0b3a0803 	bleq	e826f0 <__ccfg+0xe62748>
     6e0:	0b390b3b 	bleq	e433d4 <__ccfg+0xe2342c>
     6e4:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	00010b48 	andeq	r0, r1, r8, asr #22
void UART0IntHandler () {
     6ec:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6f4:	0b3b0b3a 	bleq	ec33e4 <__ccfg+0xea343c>
     6f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     6fc:	01120111 	tsteq	r2, r1, lsl r1
     700:	13010a40 	movwne	r0, #6720	; 0x1a40
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	054a0000 	strbeq	r0, [sl, #-0]
     708:	3a080300 	bcc	201310 <__ccfg+0x1e1368>
		RISE_N_SHINE;
     70c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     710:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		i_trigger (devevent (UART_A, READ));
     714:	4b000006 	blmi	734 <UART0IntHandler+0x4c>
     718:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     71c:	0b3b0b3a 	bleq	ec340c <__ccfg+0xea3464>
     720:	13490b39 	movtne	r0, #39737	; 0x9b39
     724:	00000a02 	andeq	r0, r0, r2, lsl #20
     728:	03000a4c 	movweq	r0, #2636	; 0xa4c
     72c:	3b0b3a0e 	blcc	2cef6c <__ccfg+0x2aefc4>
     730:	110b390b 	tstne	fp, fp, lsl #18
     734:	4d000001 	stcmi	0, cr0, [r0, #-4]
     738:	1331001d 	teqne	r1, #29
     73c:	06550152 			; <UNDEFINED> instruction: 0x06550152
     740:	0b590b58 	bleq	16434a8 <__ccfg+0x1623500>
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	00000b57 	andeq	r0, r0, r7, asr fp
     748:	3f002e4e 	svccc	0x00002e4e
     74c:	3a0e030c 	bcc	381384 <__ccfg+0x3613dc>
		i_trigger (devevent (UART_A, WRITE));
     750:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	110c270b 	tstne	ip, fp, lsl #14
     758:	40011201 	andmi	r1, r1, r1, lsl #4
		RISE_N_SHINE;
     75c:	4f00000a 	svcmi	0x0000000a
     760:	08030005 	stmdaeq	r3, {r0, r2}
     764:	0b3b0b3a 	bleq	ec3454 <__ccfg+0xea34ac>
		i_trigger (devevent (UART_A, WRITE));
     768:	13490b39 	movtne	r0, #39737	; 0x9b39
     76c:	00000a02 	andeq	r0, r0, r2, lsl #20
     770:	03012e50 	movweq	r2, #7760	; 0x1e50
     774:	3b0b3a0e 	blcc	2cefb4 <__ccfg+0x2af00c>
     778:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     77c:	010b200c 	tsteq	fp, ip
     780:	51000013 	tstpl	r0, r3, lsl r0
     784:	08030005 	stmdaeq	r3, {r0, r2}
     788:	0b3b0b3a 	bleq	ec3478 <__ccfg+0xea34d0>
     78c:	13490b39 	movtne	r0, #39737	; 0x9b39
     790:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
}
     794:	3a0e0301 	bcc	3813a0 <__ccfg+0x3613f8>
     798:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     79c:	200c270b 	andcs	r2, ip, fp, lsl #14
     7a0:	0013010b 	andseq	r0, r3, fp, lsl #2
     7a4:	00055300 	andeq	r5, r5, r0, lsl #6
void __buttons_setirq (int val) {
     7a8:	0b3a0e03 	bleq	e83fbc <__ccfg+0xe64014>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	0b39053b 	bleq	e41ca0 <__ccfg+0xe21cf8>
     7b0:	00001349 	andeq	r1, r0, r9, asr #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	03002e54 	movweq	r2, #3668	; 0xe54
     7b8:	3b0b3a0e 	blcc	2ceff8 <__ccfg+0x2af050>
     7bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	000b200c 	andeq	r2, fp, ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
     7c8:	0b3a0e03 	bleq	e83fdc <__ccfg+0xe64034>
     7cc:	0b390b3b 	bleq	e434c0 <__ccfg+0xe23518>
     7d0:	13490c27 	movtne	r0, #39975	; 0x9c27
     7d4:	13010b20 	movwne	r0, #6944	; 0x1b20
     7d8:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
}
     7dc:	3a0e0300 	bcc	3813e4 <__ccfg+0x36143c>
     7e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7e4:	200c270b 	andcs	r2, ip, fp, lsl #14
     7e8:	5700000b 	strpl	r0, [r0, -fp]
void __pinlist_setirq (int val) {
     7ec:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	0b3b0b3a 	bleq	ec34e0 <__ccfg+0xea3538>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	0b201349 	bleq	805524 <__ccfg+0x7e557c>
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	3a0e0300 	bcc	381408 <__ccfg+0x361460>
     804:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     80c:	000b2013 	andeq	r2, fp, r3, lsl r0
     810:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
	for (i = 0; i < N_PINLIST; i++) {
     814:	01111331 	tsteq	r1, r1, lsr r3
}
     818:	0a400112 	beq	1000c68 <__ccfg+0xfe0cc0>
     81c:	01000000 	mrseq	r0, (UNDEF: 0)
     820:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     824:	0e030b13 	vmoveq.32	d3[0], r0
void GPIOIntHandler () {
     828:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
if (buttons_int) {
     82c:	06100111 			; <UNDEFINED> instruction: 0x06100111
     830:	24020000 	strcs	r0, [r2], #-0
	buttons_disable ();
     834:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     838:	000e030b 	andeq	r0, lr, fp, lsl #6
	i_trigger ((aword)&__button_list);
     83c:	00160300 	andseq	r0, r6, r0, lsl #6
     840:	0b3a0e03 	bleq	e84054 <__ccfg+0xe640ac>
     844:	0b390b3b 	bleq	e43538 <__ccfg+0xe23590>
     848:	00001349 	andeq	r1, r0, r9, asr #6
     84c:	0b002404 	bleq	9864 <__exidx_end+0x6bf0>
     850:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     854:	05000008 	streq	r0, [r0, #-8]
     858:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     85c:	0b3a0b0b 	bleq	e83490 <__ccfg+0xe634e8>
     860:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     864:	0d060000 	stceq	0, cr0, [r6, #-0]
	RISE_N_SHINE;
     868:	490e0300 	stmdbmi	lr, {r8, r9}
     86c:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     870:	0700000c 	streq	r0, [r0, -ip]
if (pin_sensor_int) {
     874:	0b0b000f 	bleq	2c08b8 <__ccfg+0x2a0910>
     878:	26080000 	strcs	r0, [r8], -r0
	i_trigger ((aword)(&__input_pins));
     87c:	00134900 	andseq	r4, r3, r0, lsl #18
     880:	00350900 	eorseq	r0, r5, r0, lsl #18
     884:	00001349 	andeq	r1, r0, r9, asr #6
     888:	0b000f0a 	bleq	44b8 <__exidx_end+0x1844>
     88c:	0013490b 	andseq	r4, r3, fp, lsl #18
     890:	01130b00 	tsteq	r3, r0, lsl #22
     894:	0b3a0b0b 	bleq	e834c8 <__ccfg+0xe63520>
     898:	0b390b3b 	bleq	e4358c <__ccfg+0xe235e4>
     89c:	00001301 	andeq	r1, r0, r1, lsl #6
     8a0:	03000d0c 	movweq	r0, #3340	; 0xd0c
     8a4:	3b0b3a0e 	blcc	2cf0e4 <__ccfg+0x2af13c>
	__pinsen_disable_and_clear;
     8a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	RISE_N_SHINE;
     8ac:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     8b0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     8b4:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
}
     8b8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8bc:	0b3b0b3a 	bleq	ec35ac <__ccfg+0xea3604>
     8c0:	13490b39 	movtne	r0, #39737	; 0x9b39
     8c4:	00000b38 	andeq	r0, r0, r8, lsr fp
     8c8:	0300340e 	movweq	r3, #1038	; 0x40e
void system_init () {
     8cc:	3b0b3a0e 	blcc	2cf10c <__ccfg+0x2af164>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	0f00000c 	svceq	0x0000000c
     8dc:	13490101 	movtne	r0, #37121	; 0x9101
     8e0:	00001301 	andeq	r1, r0, r1, lsl #6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	00002110 	andeq	r2, r0, r0, lsl r1
     8e8:	00161100 	andseq	r1, r6, r0, lsl #2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	0b3a0e03 	bleq	e84100 <__ccfg+0xe64158>
     8f0:	0b39053b 	bleq	e41de4 <__ccfg+0xe21e3c>
     8f4:	00001349 	andeq	r1, r0, r9, asr #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	27011512 	smladcs	r1, r2, r5, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	0013010c 	andseq	r0, r3, ip, lsl #2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	00051300 	andeq	r1, r5, r0, lsl #6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     908:	03003414 	movweq	r3, #1044	; 0x414
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     90c:	3b0b3a0e 	blcc	2cf14c <__ccfg+0x2af1a4>
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	1500000c 	strne	r0, [r0, #-12]
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	0b0b0113 	bleq	2c0d70 <__ccfg+0x2a0dc8>
     920:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     924:	13010b39 	movwne	r0, #6969	; 0x1b39
     928:	0d160000 	ldceq	0, cr0, [r6, #-0]
		if (port_confs [i] & 0x80)
     92c:	3a0e0300 	bcc	381534 <__ccfg+0x36158c>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     930:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		if (port_confs [i] & 0x40)
     938:	1700000b 	strne	r0, [r0, -fp]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     940:	0b3a0b0b 	bleq	e83574 <__ccfg+0xe635cc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     944:	0b39053b 	bleq	e41e38 <__ccfg+0xe21e90>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
	all_leds_blink;
     950:	000b2f13 	andeq	r2, fp, r3, lsl pc
     954:	01151900 	tsteq	r5, r0, lsl #18
     958:	13490c27 	movtne	r0, #39975	; 0x9c27
     95c:	00001301 	andeq	r1, r0, r1, lsl #6
     960:	4700341a 	smladmi	r0, sl, r4, r3
     964:	3b0b3a13 	blcc	2cf1b8 <__ccfg+0x2af210>
     968:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	1b00000a 	blne	99c <system_init+0xd0>
     970:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     974:	0b3b0b3a 	bleq	ec3664 <__ccfg+0xea36bc>
     978:	13490b39 	movtne	r0, #39737	; 0x9b39
     97c:	0a020c3f 	beq	83a80 <__ccfg+0x63ad8>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	341c0000 	ldrcc	r0, [ip], #-0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	3a0e0300 	bcc	38158c <__ccfg+0x3615e4>
     988:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	IntEnable (INT_AON_RTC_COMB);
     98c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     990:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
     994:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	__pi_malloc_init ();
     998:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	IntEnable (INT_AON_GPIO_EDGE);
     99c:	13490b39 	movtne	r0, #39737	; 0x9b39
     9a0:	00000a02 	andeq	r0, r0, r2, lsl #20
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	3f002e1e 	svccc	0x00002e1e
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	3a0e030c 	bcc	3815e0 <__ccfg+0x361638>
     9ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9b0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9b8:	000a4001 	andeq	r4, sl, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     9c0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     9c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	urates [0] = UART_RATE / 100;
     9c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     9cc:	01120111 	tsteq	r2, r1, lsl r1
	reinit_uart ();
     9d0:	13010a40 	movwne	r0, #6720	; 0x1a40
	EXTRA_INITIALIZERS;
     9d4:	05200000 	streq	r0, [r0, #-0]!
     9d8:	3a0e0300 	bcc	3815e0 <__ccfg+0x361638>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9e4:	21000006 	tstcs	r0, r6
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e8:	00000018 	andeq	r0, r0, r8, lsl r0
     9ec:	03003422 	movweq	r3, #1058	; 0x422
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9f0:	3b0b3a08 	blcc	2cf218 <__ccfg+0x2af270>
     9f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			devinit [i] . init (devinit [i] . param);
     9f8:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	00342300 	eorseq	r2, r4, r0, lsl #6
     a00:	0b3a0803 	bleq	e82a14 <__ccfg+0xe62a6c>
     a04:	0b39053b 	bleq	e41ef8 <__ccfg+0xe21f50>
	IntEnable (INT_UART0_COMB);
     a08:	0a021349 	beq	85734 <__ccfg+0x6578c>
     a0c:	34240000 	strtcc	r0, [r4], #-0
}
     a10:	3a080300 	bcc	201618 <__ccfg+0x1e1670>
	tci_run_auxiliary_timer ();
     a14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		diag ("");
     a18:	0013490b 	andseq	r4, r3, fp, lsl #18
     a1c:	000a2500 	andeq	r2, sl, r0, lsl #10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a20:	0b3a0e03 	bleq	e84234 <__ccfg+0xe6428c>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	0b39053b 	bleq	e41f18 <__ccfg+0xe21f70>
		diag ("Leftover RAM: %d bytes",
     a28:	00000111 	andeq	r0, r0, r1, lsl r1
     a2c:	11010b26 	tstne	r1, r6, lsr #22
     a30:	01011201 	tsteq	r1, r1, lsl #4
     a34:	27000013 	smladcs	r0, r3, r0, r0
     a38:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     a3c:	00001301 	andeq	r1, r0, r1, lsl #6
     a40:	31011d28 	tstcc	r1, r8, lsr #26
     a44:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     a48:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     a4c:	000b5705 	andeq	r5, fp, r5, lsl #14
     a50:	00052900 	andeq	r2, r5, r0, lsl #18
     a54:	00001331 	andeq	r1, r0, r1, lsr r3
     a58:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     a5c:	3b0b3a0e 	blcc	2cf29c <__ccfg+0x2af2f4>
     a60:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     a64:	1201110c 	andne	r1, r1, #12, 2
     a68:	010a4001 	tsteq	sl, r1
     a6c:	2b000013 	blcs	ac0 <__pi_release+0x3c>
     a70:	08030005 	stmdaeq	r3, {r0, r2}
     a74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a78:	13490b39 	movtne	r0, #39737	; 0x9b39
     a7c:	00000602 	andeq	r0, r0, r2, lsl #12
     a80:	3f012e2c 	svccc	0x00012e2c
__attribute__ ((noreturn)) void __pi_release () {
     a84:	3a0e030c 	bcc	3816bc <__ccfg+0x361714>
     a88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a8c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	check_stack_overflow;
     a94:	010a4001 	tsteq	sl, r1
     a98:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     a9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	update_n_wake (MAX_WORD, NO);
     aa0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
     aa8:	00000602 	andeq	r0, r0, r2, lsl #12
	for_all_tasks (__pi_curr) {
     aac:	3f012e2e 	svccc	0x00012e2e
     ab0:	3a0e030c 	bcc	3816e8 <__ccfg+0x361740>
     ab4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  __ASM volatile ("cpsid i" : : : "memory");
     ab8:	200c270b 	andcs	r2, ip, fp, lsl #14
	__SLEEP;
     abc:	0013010b 	andseq	r0, r3, fp, lsl #2
     ac0:	00052f00 	andeq	r2, r5, r0, lsl #30
     ac4:	0b3a0803 	bleq	e82ad8 <__ccfg+0xe62b30>
     ac8:	0b39053b 	bleq	e41fbc <__ccfg+0xe22014>
	system_event_count ++;
     acc:	00001349 	andeq	r1, r0, r9, asr #6
     ad0:	3f012e30 	svccc	0x00012e30
	switch (__pi_systat.effpdm) {
     ad4:	3a0e030c 	bcc	38170c <__ccfg+0x361764>
     ad8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     adc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     ae0:	010a4001 	tsteq	sl, r1
			__WFI ();
     ae4:	31000013 	tstcc	r0, r3, lsl r0
     ae8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; a38 <system_init+0x16c>
     aec:	0b3a0803 	bleq	e82b00 <__ccfg+0xe62b58>
	check_stack_overflow;
     af0:	0b39053b 	bleq	e41fe4 <__ccfg+0xe2203c>
     af4:	13490c27 	movtne	r0, #39975	; 0x9c27
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af8:	01120111 	tsteq	r2, r1, lsl r1
     afc:	13010a40 	movwne	r0, #6720	; 0x1a40
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	05320000 	ldreq	r0, [r2, #-0]!
			goto Redo;
     b04:	3a080300 	bcc	20170c <__ccfg+0x1e1764>
	for_all_tasks (__pi_curr) {
     b08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b10:	3300000a 	movwcc	r0, #10
     b14:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; a64 <system_init+0x198>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	0b3a0e03 	bleq	e8432c <__ccfg+0xe64384>
     b1c:	0b39053b 	bleq	e42010 <__ccfg+0xe22068>
     b20:	01110c27 	tsteq	r1, r7, lsr #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b24:	0a400112 	beq	1000f74 <__ccfg+0xfe0fcc>
     b28:	05340000 	ldreq	r0, [r4, #-0]!
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b2c:	3a0e0300 	bcc	381734 <__ccfg+0x36178c>
     b30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			__WFI ();
     b34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	3500000a 	strcc	r0, [r0, #-10]
     b3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
}
     b40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b44:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b48:	0b360000 	bleq	d80b50 <__ccfg+0xd60ba8>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4c:	00065501 	andeq	r5, r6, r1, lsl #10
     b50:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <__ccfg+0xea38a0>
     b5c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	13010b20 	movwne	r0, #6944	; 0x1b20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	05380000 	ldreq	r0, [r8, #-0]!
     b68:	3a080300 	bcc	201770 <__ccfg+0x1e17c8>
     b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	00053900 	andeq	r3, r5, r0, lsl #18
     b78:	0b3a0e03 	bleq	e8438c <__ccfg+0xe643e4>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	0b390b3b 	bleq	e43870 <__ccfg+0xe238c8>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b80:	00001349 	andeq	r1, r0, r9, asr #6
     b84:	0300343a 	movweq	r3, #1082	; 0x43a
     b88:	3b0b3a08 	blcc	2cf3b0 <__ccfg+0x2af408>
     b8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b90:	3b000013 	blcc	be4 <__pi_release+0x160>
			SysCtrlSetRechargeBeforePowerDown
     b94:	0803000a 	stmdaeq	r3, {r1, r3}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9c:	00000b39 	andeq	r0, r0, r9, lsr fp
     ba0:	3f012e3c 	svccc	0x00012e3c
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	3a0e030c 	bcc	3817dc <__ccfg+0x361834>
     ba8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bac:	110c270b 	tstne	ip, fp, lsl #14
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	40011201 	andmi	r1, r1, r1, lsl #4
     bb4:	0013010a 	andseq	r0, r3, sl, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	00053d00 	andeq	r3, r5, r0, lsl #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	0b3a0803 	bleq	e82bd0 <__ccfg+0xe62c28>
     bc0:	0b390b3b 	bleq	e438b4 <__ccfg+0xe2390c>
     bc4:	06021349 	streq	r1, [r2], -r9, asr #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc8:	343e0000 	ldrtcc	r0, [lr], #-0
			while (!(AONWUCPowerStatusGet () &
     bcc:	3a080300 	bcc	2017d4 <__ccfg+0x1e182c>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bd8:	3f000006 	svccc	0x00000006
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bdc:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; b2c <__pi_release+0xa8>
     be0:	0b3a0e03 	bleq	e843f4 <__ccfg+0xe6444c>
     be4:	0b390b3b 	bleq	e438d8 <__ccfg+0xe23930>
     be8:	01110c27 	tsteq	r1, r7, lsr #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	0a400112 	beq	100103c <__ccfg+0xfe1094>
     bf0:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bf4:	3a0e0301 	bcc	381800 <__ccfg+0x361858>
     bf8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			reinit_uart ();
     c00:	010b2013 	tsteq	fp, r3, lsl r0
     c04:	41000013 	tstmi	r0, r3, lsl r0
     c08:	0e03012e 	adfeqsp	f0, f3, #0.5
}
     c0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c10:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     c14:	0b201349 	bleq	805940 <__ccfg+0x7e5998>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	00001301 	andeq	r1, r0, r1, lsl #6
     c1c:	31012e42 	tstcc	r1, r2, asr #28
     c20:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c24:	010a4001 	tsteq	sl, r1
     c28:	43000013 	movwmi	r0, #19
     c2c:	13310005 	teqne	r1, #5
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c30:	00000602 	andeq	r0, r0, r2, lsl #12
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	31003444 	tstcc	r0, r4, asr #8
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c3c:	011d4500 	tsteq	sp, r0, lsl #10
     c40:	01111331 	tsteq	r1, r1, lsr r3
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c44:	0b580112 	bleq	1601094 <__ccfg+0x15e10ec>
     c48:	0b570b59 	bleq	15c39b4 <__ccfg+0x15a3a0c>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4c:	34460000 	strbcc	r0, [r6], #-0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	00133100 	andseq	r3, r3, r0, lsl #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	011d4700 	tsteq	sp, r0, lsl #14
     c58:	01521331 	cmpeq	r2, r1, lsr r3
			PRCMPowerDomainOff (
     c5c:	0b580655 	bleq	16025b8 <__ccfg+0x15e2610>
     c60:	0b570b59 	bleq	15c39cc <__ccfg+0x15a3a24>
	__SLEEP;
     c64:	0a480000 	beq	1200c6c <__ccfg+0x11e0cc4>
     c68:	11133100 	tstne	r3, r0, lsl #2
  __ASM volatile ("cpsie i" : : : "memory");
     c6c:	49000001 	stmdbmi	r0, {r0}
	goto Redo;
     c70:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c74:	01120111 	tsteq	r2, r1, lsl r1
     c78:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     c7c:	00000b57 	andeq	r0, r0, r7, asr fp
     c80:	31012e4a 	tstcc	r1, sl, asr #28
     c84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c88:	000a4001 	andeq	r4, sl, r1
     c8c:	11010000 	mrsne	r0, (UNDEF: 1)
     c90:	130e2501 	movwne	r2, #58625	; 0xe501
     c94:	1b0e030b 	blne	3818c8 <__ccfg+0x361920>
     c98:	1106550e 	tstne	r6, lr, lsl #10
     c9c:	00061001 	andeq	r1, r6, r1
     ca0:	00240200 	eoreq	r0, r4, r0, lsl #4
     ca4:	0b3e0b0b 	bleq	f838d8 <__ccfg+0xf63930>
     ca8:	00000e03 	andeq	r0, r0, r3, lsl #28
     cac:	03001603 	movweq	r1, #1539	; 0x603
     cb0:	3b0b3a0e 	blcc	2cf4f0 <__ccfg+0x2af548>
     cb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cb8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     cbc:	0b0b0024 	bleq	2c0d54 <__ccfg+0x2a0dac>
     cc0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     cc4:	13050000 	movwne	r0, #20480	; 0x5000
     cc8:	0b0e0301 	bleq	3818d4 <__ccfg+0x36192c>
     ccc:	3b0b3a0b 	blcc	2cf500 <__ccfg+0x2af558>
     cd0:	0013010b 	andseq	r0, r3, fp, lsl #2
     cd4:	000d0600 	andeq	r0, sp, r0, lsl #12
     cd8:	13490e03 	movtne	r0, #40451	; 0x9e03
int main (void) {
     cdc:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	0f070000 	svceq	0x00070000
     ce4:	000b0b00 	andeq	r0, fp, r0, lsl #22
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	00260800 	eoreq	r0, r6, r0, lsl #16
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	00001349 	andeq	r1, r0, r9, asr #6
	system_init ();
     cf0:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	tcv_init ();
     cf4:	0a000013 	beq	d48 <killev+0xc>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	0b0b000f 	bleq	2c0d3c <__ccfg+0x2a0d94>
     cfc:	00001349 	andeq	r1, r0, r9, asr #6
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	0b01130b 	bleq	45934 <__ccfg+0x2598c>
     d04:	3b0b3a0b 	blcc	2cf538 <__ccfg+0x2af590>
     d08:	010b390b 	tsteq	fp, fp, lsl #18
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	0c000013 	stceq	0, cr0, [r0], {19}
     d10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	delay (16, 0);
     d14:	0b3b0b3a 	bleq	ec3a04 <__ccfg+0xea3a5c>
     d18:	13490b39 	movtne	r0, #39737	; 0x9b39
     d1c:	0b0d0b0b 	bleq	343950 <__ccfg+0x3239a8>
	__pi_release ();
     d20:	0b380b0c 	bleq	e03958 <__ccfg+0xde39b0>
     d24:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     d28:	3a0e0300 	bcc	381930 <__ccfg+0x361988>
     d2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d30:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d34:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     d38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
static void killev (__pi_pcb_t *pid) {
     d3c:	0b3b0b3a 	bleq	ec3a2c <__ccfg+0xea3a84>
	wfun = (aword)(pid->code);
     d40:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i) {
     d44:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		for (j = 0; j < nevents (i); j++) {
     d48:	010f0000 	mrseq	r0, CPSR
     d4c:	01134901 	tsteq	r3, r1, lsl #18
     d50:	10000013 	andne	r0, r0, r3, lsl r0
			    || i->Events [j] . Event == wfun
     d54:	00000021 	andeq	r0, r0, r1, lsr #32
		for (j = 0; j < nevents (i); j++) {
     d58:	03001611 	movweq	r1, #1553	; 0x611
			if (i->Events [j] . Event == (aword)pid
     d5c:	3b0b3a0e 	blcc	2cf59c <__ccfg+0x2af5f4>
     d60:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     d64:	12000013 	andne	r0, r0, #19
				wakeupev (i, j);
     d68:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     d6c:	00001301 	andeq	r1, r0, r1, lsl #6
	for_all_tasks (i) {
     d70:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
}
     d74:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
static void qfree (aword *ch) {
     d7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	13490b39 	movtne	r0, #39737	; 0x9b39
	cc = (aword*)(mpools + MA_NP);
     d84:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	m_setnextp (ch, chunk);
     d88:	15150000 	ldrne	r0, [r5, #-0]
	m_setnextp (cc, ch);
     d8c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
}
     d90:	00130113 	andseq	r0, r3, r3, lsl r1
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	01131600 	tsteq	r3, r0, lsl #12
     d98:	0b0b0e03 	bleq	2c45ac <__ccfg+0x2a4604>
     d9c:	0b3b0b3a 	bleq	ec3a8c <__ccfg+0xea3ae4>
			m_setnextp (cc, m_nextp (chunk));
     da0:	13010b39 	movwne	r0, #6969	; 0x1b39
			m_size (chunk) += m_hdrlen + m_size (ch);
     da4:	17170000 	ldrne	r0, [r7, -r0]
     da8:	3a0b0b01 	bcc	2c39b4 <__ccfg+0x2a3a0c>
     dac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db0:	0013010b 	andseq	r0, r3, fp, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	000d1800 	andeq	r1, sp, r0, lsl #16
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     db8:	0b3a0e03 	bleq	e845cc <__ccfg+0xe64624>
     dbc:	0b390b3b 	bleq	e43ab0 <__ccfg+0xe23b08>
     dc0:	00001349 	andeq	r1, r0, r9, asr #6
			m_setnextp (cc, m_nextp (chunk));
     dc4:	03000d19 	movweq	r0, #3353	; 0xd19
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	3b0b3a08 	blcc	2cf5f0 <__ccfg+0x2af648>
     dcc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     dd0:	1a000013 	bne	e24 <update_n_wake+0x4>
     dd4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     dd8:	0b3b0b3a 	bleq	ec3ac8 <__ccfg+0xea3b20>
     ddc:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (m_size (chunk) >= m_size (ch))
     de0:	00000b38 	andeq	r0, r0, r8, lsr fp
     de4:	0b01131b 	bleq	45a58 <__ccfg+0x25ab0>
     de8:	3b0b3a0b 	blcc	2cf61c <__ccfg+0x2af674>
		chunk = m_nextp (chunk))
     dec:	010b3905 	tsteq	fp, r5, lsl #18
     df0:	1c000013 	stcne	0, cr0, [r0], {19}
     df4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	diag_wait (a);
     dfc:	13490b39 	movtne	r0, #39737	; 0x9b39
	diag_wchar (c, a);
     e00:	00000b38 	andeq	r0, r0, r8, lsr fp
     e04:	0301131d 	movweq	r1, #4893	; 0x131d
}
     e08:	3a0b0b0e 	bcc	2c3a48 <__ccfg+0x2a3aa0>
     e0c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	syserror (ESTATE, "state");
     e10:	0013010b 	andseq	r0, r3, fp, lsl #2
     e14:	00211e00 	eoreq	r1, r1, r0, lsl #28
     e18:	0b2f1349 	bleq	bc5b44 <__ccfg+0xba5b9c>
     e1c:	341f0000 	ldrcc	r0, [pc], #-0	; e24 <update_n_wake+0x4>
void update_n_wake (word min, Boolean force) {
     e20:	3a0e0300 	bcc	381a28 <__ccfg+0x361a80>
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e2c:	2000000a 	andcs	r0, r0, sl
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e30:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d80 <qfree+0x8>
     e34:	0b3a0e03 	bleq	e84648 <__ccfg+0xe646a0>
     e38:	0b39053b 	bleq	e4232c <__ccfg+0xe22384>
     e3c:	01110c27 	tsteq	r1, r7, lsr #24
     e40:	0a400112 	beq	1001290 <__ccfg+0xfe12e8>
     e44:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     e48:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e4c:	3b0b3a0e 	blcc	2cf68c <__ccfg+0x2af6e4>
     e50:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     e54:	1113490c 	tstne	r3, ip, lsl #18
     e58:	40011201 	andmi	r1, r1, r1, lsl #4
     e5c:	0013010a 	andseq	r0, r3, sl, lsl #2
     e60:	00052200 	andeq	r2, r5, r0, lsl #4
		for_all_tasks (i) {
     e64:	0b3a0803 	bleq	e82e78 <__ccfg+0xe62ed0>
	__pi_mintk = znew + min;
     e68:	0b39053b 	bleq	e4235c <__ccfg+0xe223b4>
     e6c:	06021349 	streq	r1, [r2], -r9, asr #6
			if (!twaiting (i))
     e70:	1d230000 	stcne	0, cr0, [r3, #-0]
     e74:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     e7c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     e80:	2400000b 	strcs	r0, [r0], #-11
     e84:	13310005 	teqne	r1, #5
     e88:	00000602 	andeq	r0, r0, r2, lsl #12
     e8c:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
     e90:	26000006 	strcs	r0, [r0], -r6
     e94:	13310034 	teqne	r1, #52	; 0x34
     e98:	00000602 	andeq	r0, r0, r2, lsl #12
     e9c:	3f012e27 	svccc	0x00012e27
     ea0:	3a0e030c 	bcc	381ad8 <__ccfg+0x361b30>
     ea4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				wakeuptm (i);
     ea8:	110c270b 	tstne	ip, fp, lsl #14
     eac:	40011201 	andmi	r1, r1, r1, lsl #4
		for_all_tasks (i) {
     eb0:	0013010a 	andseq	r0, r3, sl, lsl #2
				d = i->Timer - znew;
     eb4:	00342800 	eorseq	r2, r4, r0, lsl #16
     eb8:	0b3a0803 	bleq	e82ecc <__ccfg+0xe62f24>
     ebc:	0b39053b 	bleq	e423b0 <__ccfg+0xe22408>
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	06021349 	streq	r1, [r2], -r9, asr #6
     ec4:	34290000 	strtcc	r0, [r9], #-0
     ec8:	3a080300 	bcc	201ad0 <__ccfg+0x1e1b28>
	__pi_old = znew;
     ecc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     ed0:	0013490b 	andseq	r4, r3, fp, lsl #18
	TCI_RUN_DELAY_TIMER;
     ed4:	00342a00 	eorseq	r2, r4, r0, lsl #20
}
     ed8:	0b3a0803 	bleq	e82eec <__ccfg+0xe62f44>
     edc:	0b39053b 	bleq	e423d0 <__ccfg+0xe22428>
     ee0:	0a021349 	beq	85c0c <__ccfg+0x65c64>
     ee4:	052b0000 	streq	r0, [fp, #-0]!
     ee8:	3a0e0300 	bcc	381af0 <__ccfg+0x361b48>
void proceed (word state) {
     eec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	prcdstate (__pi_curr, state);
     ef0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ef4:	2c000006 	stccs	0, cr0, [r0], {6}
	release;
     ef8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; e48 <update_n_wake+0x28>
     efc:	0b3a0e03 	bleq	e84710 <__ccfg+0xe64768>
void __pi_wait (aword event, word state) {
     f00:	0b39053b 	bleq	e423f4 <__ccfg+0xe2244c>
	sint j = nevents (__pi_curr);
     f04:	13490c27 	movtne	r0, #39975	; 0x9c27
	if (j >= MAX_EVENTS_PER_TASK)
     f08:	13010b20 	movwne	r0, #6944	; 0x1b20
     f0c:	052d0000 	streq	r0, [sp, #-0]!
     f10:	3a0e0300 	bcc	381b18 <__ccfg+0x361b70>
		syserror (ENEVENTS, "sw");
     f14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f18:	0013490b 	andseq	r4, r3, fp, lsl #18
	setestate (__pi_curr->Events [j], state, event);
     f1c:	00052e00 	andeq	r2, r5, r0, lsl #28
	incwait (__pi_curr);
     f20:	0b3a0803 	bleq	e82f34 <__ccfg+0xe62f8c>
	setestate (__pi_curr->Events [j], state, event);
     f24:	0b39053b 	bleq	e42418 <__ccfg+0xe22470>
}
     f28:	00001349 	andeq	r1, r0, r9, asr #6
     f2c:	11010b2f 	tstne	r1, pc, lsr #22
     f30:	00011201 	andeq	r1, r1, r1, lsl #4
void __pi_trigger (aword event) {
     f34:	00343000 	eorseq	r3, r4, r0
	for_all_tasks (i) {
     f38:	0b3a0e03 	bleq	e8474c <__ccfg+0xe647a4>
		for (j = 0; j < nevents (i); j++) {
     f3c:	0b39053b 	bleq	e42430 <__ccfg+0xe22488>
     f40:	0a021349 	beq	85c6c <__ccfg+0x65cc4>
     f44:	0a310000 	beq	c40f4c <__ccfg+0xc20fa4>
     f48:	3a0e0300 	bcc	381b50 <__ccfg+0x361ba8>
			if (i->Events [j] . Event == event) {
     f4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f50:	0001110b 	andeq	r1, r1, fp, lsl #2
     f54:	011d3200 	tsteq	sp, r0, lsl #4
				wakeupev (i, j);
     f58:	01111331 	tsteq	r1, r1, lsr r3
     f5c:	0b580112 	bleq	16013ac <__ccfg+0x15e1404>
	for_all_tasks (i) {
     f60:	0b570559 	bleq	15c24cc <__ccfg+0x15a2524>
}
     f64:	05330000 	ldreq	r0, [r3, #-0]!
aword __pi_join (aword pid, word st) {
     f68:	00133100 	andseq	r3, r3, r0, lsl #2
	for_all_tasks (i) {
     f6c:	00053400 	andeq	r3, r5, r0, lsl #8
     f70:	0b3a0803 	bleq	e82f84 <__ccfg+0xe62fdc>
	return 0;
     f74:	0b39053b 	bleq	e42468 <__ccfg+0xe224c0>
		if ((aword)i == pid) {
     f78:	0a021349 	beq	85ca4 <__ccfg+0x65cfc>
			__pi_wait (pid, st);
     f7c:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
}
     f80:	36000000 	strcc	r0, [r0], -r0
	for_all_tasks (i) {
     f84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void delay (word d, word state) {
     f8c:	13490b39 	movtne	r0, #39737	; 0x9b39
	settstate (__pi_curr, state);
     f90:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     f94:	3a080301 	bcc	201ba0 <__ccfg+0x1e1bf8>
     f98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f9c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	update_n_wake (d, YES);
     fa0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fa4:	010a4001 	tsteq	sl, r1
	__pi_curr->Timer = __pi_old + d;
     fa8:	38000013 	stmdacc	r0, {r0, r1, r4}
     fac:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
	inctimer (__pi_curr);
     fb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fb4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     fb8:	01120111 	tsteq	r2, r1, lsl r1
}
     fbc:	13010a40 	movwne	r0, #6720	; 0x1a40
     fc0:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
	if (fun == NULL)
     fc4:	3a0e0301 	bcc	381bd0 <__ccfg+0x361c28>
		return (int) __pi_curr;
     fc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fcc:	200c270b 	andcs	r2, ip, fp, lsl #14
	for_all_tasks (i)
     fd0:	0013010b 	andseq	r0, r3, fp, lsl #2
}
     fd4:	00053a00 	andeq	r3, r5, r0, lsl #20
		if (i->code == fun)
     fd8:	0b3a0803 	bleq	e82fec <__ccfg+0xe63044>
	for_all_tasks (i)
     fdc:	0b390b3b 	bleq	e43cd0 <__ccfg+0xe23d28>
     fe0:	00001349 	andeq	r1, r0, r9, asr #6
     fe4:	03012e3b 	movweq	r2, #7739	; 0x1e3b
int __pi_strlen (const char *s) {
     fe8:	3b0b3a0e 	blcc	2cf828 <__ccfg+0x2af880>
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
     ff0:	2013490c 	andscs	r4, r3, ip, lsl #18
	for (i = 0; *(s+i) != '\0'; i++);
     ff4:	0013010b 	andseq	r0, r3, fp, lsl #2
	while (n--)
     ff8:	00343c00 	eorseq	r3, r4, r0, lsl #24
     ffc:	0b3a0803 	bleq	e83010 <__ccfg+0xe63068>
		*dest++ = *src++;
    1000:	0b390b3b 	bleq	e43cf4 <__ccfg+0xe23d4c>
    1004:	00001349 	andeq	r1, r0, r9, asr #6
    1008:	03012e3d 	movweq	r2, #7741	; 0x1e3d
void adddevfunc (devreqfun_t rf, int loc) {
    100c:	3b0b3a08 	blcc	2cf834 <__ccfg+0x2af88c>
		syserror (EREQPAR, "addv");
    1010:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		syserror (ERESOURCE, "addv");
    1014:	010b200c 	tsteq	fp, ip
	if (ioreq [loc] != NULL)
    1018:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    101c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
		syserror (ERESOURCE, "addv");
    1020:	01120111 	tsteq	r2, r1, lsl r1
	ioreq [loc] = rf;
    1024:	13010a40 	movwne	r0, #6720	; 0x1a40
}
    1028:	053f0000 	ldreq	r0, [pc, #-0]!	; 1030 <io>
    102c:	02133100 	andseq	r3, r3, #0, 2
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	4000000a 	andmi	r0, r0, sl
    1034:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1038:	01120111 	tsteq	r2, r1, lsl r1
    103c:	0b590b58 	bleq	1643da4 <__ccfg+0x1623dfc>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1040:	00000b57 	andeq	r0, r0, r7, asr fp
    1044:	31011d41 	tstcc	r1, r1, asr #26
    1048:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		syserror (ENODEVICE, "io");
    104c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1050:	000b570b 	andeq	r5, fp, fp, lsl #14
	if (len == 0)
    1054:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	01111331 	tsteq	r1, r1, lsr r3
    105c:	0a400112 	beq	10014ac <__ccfg+0xfe1504>
	if (ret >= 0)
    1060:	34430000 	strbcc	r0, [r3], #-0
	if (ret == -1) {
    1064:	00133100 	andseq	r3, r3, r0, lsl #2
    1068:	11010000 	mrsne	r0, (UNDEF: 1)
		if (retry == WNONE)
    106c:	130e2501 	movwne	r2, #58625	; 0xe501
		iowait (dev, operation, retry);
    1070:	1b0e030b 	blne	381ca4 <__ccfg+0x361cfc>
    1074:	1106550e 	tstne	r6, lr, lsl #10
    1078:	00061001 	andeq	r1, r6, r1
			release;
    107c:	00240200 	eoreq	r0, r4, r0, lsl #4
	if (ret == -2) {
    1080:	0b3e0b0b 	bleq	f83cb4 <__ccfg+0xf63d0c>
		if (retry != WNONE) {
    1084:	00000e03 	andeq	r0, r0, r3, lsl #28
    1088:	03001603 	movweq	r1, #1539	; 0x603
			iowait (dev, operation, retry);
    108c:	3b0b3a0e 	blcc	2cf8cc <__ccfg+0x2af924>
    1090:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			(ioreq [dev]) (NONE, buf, len);
    1094:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1098:	0b0b0024 	bleq	2c1130 <__ccfg+0x2a1188>
    109c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		(ioreq [dev]) (NONE, buf, len);
    10a0:	0f050000 	svceq	0x00050000
    10a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    10a8:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
    10ac:	13490026 	movtne	r0, #36902	; 0x9026
	if (retry != WNONE) {
    10b0:	15070000 	strne	r0, [r7, #-0]
		delay (-ret - 2, retry);
    10b4:	000c2700 	andeq	r2, ip, r0, lsl #14
    10b8:	00340800 	eorseq	r0, r4, r0, lsl #16
    10bc:	0b3a0e03 	bleq	e848d0 <__ccfg+0xe64928>
    10c0:	0b390b3b 	bleq	e43db4 <__ccfg+0xe23e0c>
		release;
    10c4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; fa8 <delay+0x1c>
    10c8:	00000c3c 	andeq	r0, r0, ip, lsr ip
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	49010109 	stmdbmi	r1, {r0, r3, r8}
    10d0:	00130113 	andseq	r0, r3, r3, lsl r1
    10d4:	00210a00 	eoreq	r0, r1, r0, lsl #20
    10d8:	0b2f1349 	bleq	bc5e04 <__ccfg+0xba5e5c>
    10dc:	340b0000 	strcc	r0, [fp], #-0
		syserror (ERESOURCE, "mal1");
    10e0:	3a0e0300 	bcc	381ce8 <__ccfg+0x361d40>
    10e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	3f13490b 	svccc	0x0013490b
    10ec:	000a020c 	andeq	r0, sl, ip, lsl #4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f0:	002e0c00 	eoreq	r0, lr, r0, lsl #24
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f4:	0b3a0e03 	bleq	e84908 <__ccfg+0xe64960>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f8:	0b39053b 	bleq	e425ec <__ccfg+0xe22644>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    10fc:	01110c27 	tsteq	r1, r7, lsr #24
    1100:	0a400112 	beq	1001550 <__ccfg+0xfe15a8>
}
    1104:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    1108:	030c3f01 	movweq	r3, #52993	; 0xcf01
    110c:	3b0b3a0e 	blcc	2cf94c <__ccfg+0x2af9a4>
    1110:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1114:	1201110c 	andne	r1, r1, #12, 2
    1118:	000a4001 	andeq	r4, sl, r1
void __pi_free (aword *ch) {
    111c:	00340e00 	eorseq	r0, r4, r0, lsl #28
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1120:	0b3a0e03 	bleq	e84934 <__ccfg+0xe6498c>
    1124:	0b390b3b 	bleq	e43e18 <__ccfg+0xe23e70>
		syserror (EMALLOC, "malg");
    1128:	06021349 	streq	r1, [r2], -r9, asr #6
    112c:	01000000 	mrseq	r0, (UNDEF: 0)
	mcfree [MA_NP] += m_size (ch);
    1130:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		m_size (ch) ^= MALLOC_UMASK;
    1134:	0e030b13 	vmoveq.32	d3[0], r0
    1138:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
	mcfree [MA_NP] += m_size (ch);
    113c:	24020000 	strcs	r0, [r2], #-0
	QFREE;
    1140:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (mevent [MA_NP] . nwait) {
    1144:	000e030b 	andeq	r0, lr, fp, lsl #6
    1148:	00160300 	andseq	r0, r6, r0, lsl #6
		trigger ((aword)(&(mevent [MA_NP])));
    114c:	0b3a0e03 	bleq	e84960 <__ccfg+0xe649b8>
		mevent [MA_NP] . nwait --;
    1150:	0b390b3b 	bleq	e43e44 <__ccfg+0xe23e9c>
}
    1154:	00001349 	andeq	r1, r0, r9, asr #6
    1158:	0b002404 	bleq	a170 <__exidx_end+0x74fc>
    115c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1160:	05000008 	streq	r0, [r0, #-8]
void kill (aword pid) {
    1164:	0b0b0113 	bleq	2c15b8 <__ccfg+0x2a1610>
		pid = (aword) __pi_curr;
    1168:	0b3b0b3a 	bleq	ec3e58 <__ccfg+0xea3eb0>
	j = NULL;
    116c:	13010b39 	movwne	r0, #6969	; 0x1b39
	for_all_tasks (i) {
    1170:	0d060000 	stceq	0, cr0, [r6, #-0]
	syserror (EREQPAR, "kpi");
    1174:	3a0e0300 	bcc	381d7c <__ccfg+0x361dd4>
    1178:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((aword)i == pid) {
    117c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1180:	0700000b 	streq	r0, [r0, -fp]
				__PCB = i->Next;
    1184:	13490026 	movtne	r0, #36902	; 0x9026
			killev (i);
    1188:	34080000 	strcc	r0, [r8], #-0
			ufree (i);
    118c:	3a0e0300 	bcc	381d94 <__ccfg+0x361dec>
			if (i == __pi_curr)
    1190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1194:	3f13490b 	svccc	0x0013490b
				release;
    1198:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				j->Next = i->Next;
    119c:	00350900 	eorseq	r0, r5, r0, lsl #18
    11a0:	00001349 	andeq	r1, r0, r9, asr #6
    11a4:	03000d0a 	movweq	r0, #3338	; 0xd0a
}
    11a8:	3b0b3a0e 	blcc	2cf9e8 <__ccfg+0x2afa40>
    11ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11b0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	if (size < 8)
    11b4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		_size = 2;
    11b8:	0b00000b 	bleq	11ec <__pi_malloc+0x38>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	0b0b000f 	bleq	2c1200 <__ccfg+0x2a1258>
		_size = (((aword)size) + 3) >> 2;
    11c0:	00001349 	andeq	r1, r0, r9, asr #6
		if (m_magic (chunk) != MALLOC_MAGIC)
    11c4:	4901010c 	stmdbmi	r1, {r2, r3, r8}
		_size = (((aword)size) + 3) >> 2;
    11c8:	00130113 	andseq	r0, r3, r3, lsl r1
		if (mevent [MA_NP] . nfail != 255)
    11cc:	00210d00 	eoreq	r0, r1, r0, lsl #26
    11d0:	160e0000 	strne	r0, [lr], -r0
			mevent [MA_NP] . nfail ++;
    11d4:	3a0e0300 	bcc	381ddc <__ccfg+0x361e34>
		mnfree [MA_NP] = 0;
    11d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11dc:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (m_magic (chunk) != MALLOC_MAGIC)
    11e0:	01150f00 	tsteq	r5, r0, lsl #30
    11e4:	13010c27 	movwne	r0, #7207	; 0x1c27
			syserror (EMALLOC, "malc");
    11e8:	05100000 	ldreq	r0, [r0, #-0]
    11ec:	00134900 	andseq	r4, r3, r0, lsl #18
		if (m_size (chunk) >= _size)
    11f0:	00341100 	eorseq	r1, r4, r0, lsl #2
    11f4:	0b3a0e03 	bleq	e84a08 <__ccfg+0xe64a60>
		chunk = m_nextp (chunk)) {
    11f8:	0b39053b 	bleq	e426ec <__ccfg+0xe22744>
		m_setnextp (cc, m_nextp (chunk));
    11fc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 10e0 <__pi_malloc_init+0x14>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1200:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1204:	0b011312 	bleq	45e54 <__ccfg+0x25eac>
			m_size (chunk) = _size;
    1208:	3b0b3a0b 	blcc	2cfa3c <__ccfg+0x2afa94>
			cc = chunk + _size + m_hdrlen;
    120c:	010b3905 	tsteq	fp, r5, lsl #18
    1210:	13000013 	movwne	r0, #19
			m_size (cc) = waste - m_hdrlen;
    1214:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			QFREE;
    1218:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		mevent [MA_NP] . nfail = 0;
    121c:	13490b39 	movtne	r0, #39737	; 0x9b39
		mcfree [MA_NP] -= m_size (chunk);
    1220:	00000b38 	andeq	r0, r0, r8, lsr fp
    1224:	03011314 	movweq	r1, #4884	; 0x1314
    1228:	3a0b0b0e 	bcc	2c3e68 <__ccfg+0x2a3ec0>
    122c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		m_size (chunk) |= MALLOC_UMASK;
    1230:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	00211500 	eoreq	r1, r1, r0, lsl #10
		m_size (chunk) |= MALLOC_UMASK;
    1238:	0b2f1349 	bleq	bc5f64 <__ccfg+0xba5fbc>
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	34160000 	ldrcc	r0, [r6], #-0
}
    1240:	3a134700 	bcc	4d2e48 <__ccfg+0x4b2ea0>
    1244:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1248:	000a020b 	andeq	r0, sl, fp, lsl #4
    124c:	11010000 	mrsne	r0, (UNDEF: 1)
    1250:	130e2501 	movwne	r2, #58625	; 0xe501
    1254:	1b0e030b 	blne	381e88 <__ccfg+0x361ee0>
    1258:	1106550e 	tstne	r6, lr, lsl #10
aword __pi_fork (fsmcode func, aword data) {
    125c:	00061001 	andeq	r1, r6, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	00240200 	eoreq	r0, r4, r0, lsl #4
    1264:	0b3e0b0b 	bleq	f83e98 <__ccfg+0xf63ef0>
    1268:	00000e03 	andeq	r0, r0, r3, lsl #28
		if ((j = __PCB) == NULL)
    126c:	03001603 	movweq	r1, #1539	; 0x603
	i->Next = NULL;
    1270:	3b0b3a0e 	blcc	2cfab0 <__ccfg+0x2afb08>
	i->data = data;
    1274:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if ((j = __PCB) == NULL)
    1278:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
}
    127c:	0b0b0024 	bleq	2c1314 <__ccfg+0x2a136c>
			for (; j->Next != NULL; j = j->Next);
    1280:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1284:	26050000 	strcs	r0, [r5], -r0
	return (aword) i;
    1288:	00134900 	andseq	r4, r3, r0, lsl #18
    128c:	00350600 	eorseq	r0, r5, r0, lsl #12
	if (mevent [MA_NP] . nwait != 255)
    1290:	00001349 	andeq	r1, r0, r9, asr #6
    1294:	0b000f07 	bleq	4eb8 <__exidx_end+0x2244>
    1298:	0013490b 	andseq	r4, r3, fp, lsl #18
		mevent [MA_NP] . nwait ++;
    129c:	01130800 	tsteq	r3, r0, lsl #16
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	0b3a0b0b 	bleq	e83ed4 <__ccfg+0xe63f2c>
    12a4:	0b390b3b 	bleq	e43f98 <__ccfg+0xe23ff0>
void diag (const char *mess, ...) {
    12a8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ac:	03000d09 	movweq	r0, #3337	; 0xd09
    12b0:	3b0b3a0e 	blcc	2cfaf0 <__ccfg+0x2afb48>
	diag_disable_int (a, is);
    12b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    12b8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    12bc:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
				d = (bc == 16) ? 10000 : 1000000000;
    12c0:	0a00000b 	beq	12f4 <diag+0x4c>
	diag_disable_int (a, is);
    12c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	while (*mess != '\0') {
    12c8:	0b3b0b3a 	bleq	ec3fb8 <__ccfg+0xea4010>
	dgout ('\r');
    12cc:	13490b39 	movtne	r0, #39737	; 0x9b39
	dgout ('\n');
    12d0:	00000b38 	andeq	r0, r0, r8, lsr fp
    12d4:	0300340b 	movweq	r3, #1035	; 0x40b
    12d8:	3b0b3a0e 	blcc	2cfb18 <__ccfg+0x2afb70>
	diag_wait (a);
    12dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	diag_enable_int (a, is);
    12e0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    12e4:	0c00000c 	stceq	0, cr0, [r0], {12}
}
    12e8:	13490101 	movtne	r0, #37121	; 0x9101
    12ec:	00001301 	andeq	r1, r0, r1, lsl #6
    12f0:	0000210d 	andeq	r2, r0, sp, lsl #2
		if (*mess == '%') {
    12f4:	00160e00 	andseq	r0, r6, r0, lsl #28
    12f8:	0b3a0e03 	bleq	e84b0c <__ccfg+0xe64b64>
			if (*mess == 'l') {
    12fc:	0b39053b 	bleq	e427f0 <__ccfg+0xe22848>
    1300:	00001349 	andeq	r1, r0, r9, asr #6
				mess++;
    1304:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
				val = va_arg (ap, lword);
    1308:	0013010c 	andseq	r0, r3, ip, lsl #2
				bc = 32;
    130c:	00051000 	andeq	r1, r5, r0
				bc = 16;
    1310:	00001349 	andeq	r1, r0, r9, asr #6
			switch (*mess) {
    1314:	03003411 	movweq	r3, #1041	; 0x411
    1318:	3b0b3a0e 	blcc	2cfb58 <__ccfg+0x2afbb0>
    131c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				dgout ('%');
    1320:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1324:	1200000c 	andne	r0, r0, #12
				dgout (*mess);
    1328:	0b0b0113 	bleq	2c177c <__ccfg+0x2a17d4>
    132c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			switch (*mess) {
    1330:	13010b39 	movwne	r0, #6969	; 0x1b39
					v = __pi_hex_enc_table [
    1334:	0d130000 	ldceq	0, cr0, [r3, #-0]
					i += 4;
    1338:	3a0e0300 	bcc	381f40 <__ccfg+0x361f98>
					(val >> (bc - i)) & 0xf];
    133c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1340:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
					dgout (v);
    1344:	1400000b 	strne	r0, [r0], #-11
    1348:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
				while (i < bc) {
    134c:	0b3a0b0b 	bleq	e83f80 <__ccfg+0xe63fd8>
			mess++;
    1350:	0b39053b 	bleq	e42844 <__ccfg+0xe2289c>
					d /= 10;
    1354:	00001301 	andeq	r1, r0, r1, lsl #6
				if ((val >> (bc - 1)) & 1) {
    1358:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    135c:	000b2f13 	andeq	r2, fp, r3, lsl pc
					dgout ('-');
    1360:	00341600 	eorseq	r1, r4, r0, lsl #12
    1364:	0b3a1347 	bleq	e86088 <__ccfg+0xe660e0>
						val |= 0xffff0000;
    1368:	0b390b3b 	bleq	e4405c <__ccfg+0xe240b4>
    136c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1370:	3f012e17 	svccc	0x00012e17
				d = (bc == 16) ? 10000 : 1000000000;
    1374:	3a0e030c 	bcc	381fac <__ccfg+0x362004>
    1378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    137c:	110c270b 	tstne	ip, fp, lsl #14
					v = (word) (val / d);
    1380:	40011201 	andmi	r1, r1, r1, lsl #4
					if (v || d == 1) break;
    1384:	0013010a 	andseq	r0, r3, sl, lsl #2
    1388:	00051800 	andeq	r1, r5, r0, lsl #16
					d /= 10;
    138c:	0b3a0803 	bleq	e833a0 <__ccfg+0xe633f8>
				d = (bc == 16) ? 10000 : 1000000000;
    1390:	0b390b3b 	bleq	e44084 <__ccfg+0xe240dc>
					dgout (v + '0');
    1394:	06021349 	streq	r1, [r2], -r9, asr #6
    1398:	05190000 	ldreq	r0, [r9, #-0]
    139c:	3a0e0300 	bcc	381fa4 <__ccfg+0x361ffc>
					d /= 10;
    13a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					val = val - (v * d);
    13a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					if (d == 0) break;
    13a8:	1a000006 	bne	13c8 <diag+0x120>
					v = (word) (val / d);
    13ac:	08030034 	stmdaeq	r3, {r2, r4, r5}
    13b0:	0b3b0b3a 	bleq	ec40a0 <__ccfg+0xea40f8>
				if (bc == 16)
    13b4:	13490b39 	movtne	r0, #39737	; 0x9b39
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	341b0000 	ldrcc	r0, [fp], #-0
					val &= 0xffff;
    13bc:	3a080300 	bcc	201fc4 <__ccfg+0x1e201c>
					dgout (*s);
    13c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					s++;
    13c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				while (*s != '\0') {
    13c8:	1c000006 	stcne	0, cr0, [r0], {6}
    13cc:	1331001d 	teqne	r1, #29
			dgout (*mess++);
    13d0:	01120111 	tsteq	r2, r1, lsl r1
    13d4:	0b590b58 	bleq	164413c <__ccfg+0x1624194>
    13d8:	00000b57 	andeq	r0, r0, r7, asr fp
    13dc:	31011d1d 	tstcc	r1, sp, lsl sp
    13e0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
}
    13e4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    while(1)
    13e8:	000b570b 	andeq	r5, fp, fp, lsl #14
{
    13ec:	00051e00 	andeq	r1, r5, r0, lsl #28
    SetupTrimDevice();
    13f0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    pui32Src = &_etext;
    13f4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f8:	030c3f00 	movweq	r3, #52992	; 0xcf00
    __asm("    ldr     r0, =_bss\n"
    13fc:	3b0b3a0e 	blcc	2cfc3c <__ccfg+0x2afc94>
    1400:	110b390b 	tstne	fp, fp, lsl #18
    1404:	40011201 	andmi	r1, r1, r1, lsl #4
    1408:	2000000a 	andcs	r0, r0, sl
    140c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
   main();
    1410:	0b3b0b3a 	bleq	ec4100 <__ccfg+0xea4158>
    FaultISR();
    1414:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
        *pui32Dest++ = *pui32Src++;
    1418:	00000b20 	andeq	r0, r0, r0, lsr #22
    141c:	03012e21 	movweq	r2, #7713	; 0x1e21
    1420:	3b0b3a0e 	blcc	2cfc60 <__ccfg+0x2afcb8>
    1424:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1428:	2013490c 	andscs	r4, r3, ip, lsl #18
    142c:	2200000b 	andcs	r0, r0, #11
    1430:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1434:	0b3b0b3a 	bleq	ec4124 <__ccfg+0xea417c>
static byte get_byte () {
    1438:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    143c:	01000000 	mrseq	r0, (UNDEF: 0)
    1440:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1444:	0e030b13 	vmoveq.32	d3[0], r0
    1448:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		if (ee_inp)
    144c:	06100111 			; <UNDEFINED> instruction: 0x06100111
			b |= 1;
    1450:	24020000 	strcs	r0, [r2], #-0
    1454:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1458:	000e030b 	andeq	r0, lr, fp, lsl #6
	for (b = 0, i = 0; i < 8; i++) {
    145c:	00160300 	andseq	r0, r6, r0, lsl #6
}
    1460:	0b3a0e03 	bleq	e84c74 <__ccfg+0xe64ccc>
    1464:	0b390b3b 	bleq	e44158 <__ccfg+0xe241b0>
    1468:	00001349 	andeq	r1, r0, r9, asr #6
static void put_byte (byte b) {
    146c:	0b002404 	bleq	a484 <__exidx_end+0x7810>
    1470:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1474:	05000008 	streq	r0, [r0, #-8]
    1478:	13490026 	movtne	r0, #36902	; 0x9026
		if (b & 0x80)
    147c:	35060000 	strcc	r0, [r6, #-0]
    1480:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1484:	01130700 	tsteq	r3, r0, lsl #14
	for (i = 0; i < 8; i++) {
    1488:	0b3a0b0b 	bleq	e840bc <__ccfg+0xe64114>
		b <<= 1;
    148c:	0b390b3b 	bleq	e44180 <__ccfg+0xe241d8>
	for (i = 0; i < 8; i++) {
    1490:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1494:	03000d08 	movweq	r0, #3336	; 0xd08
    1498:	3b0b3a0e 	blcc	2cfcd8 <__ccfg+0x2afd30>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    149c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    14a0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	put_byte (cmd);
    14a4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    14a8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
}
    14ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14b0:	0b3b0b3a 	bleq	ec41a0 <__ccfg+0xea41f8>
static void wwait (word st, word del) {
    14b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b8:	00000b38 	andeq	r0, r0, r8, lsr fp
    14bc:	0300340a 	movweq	r3, #1034	; 0x40a
	while (dopen && (rdsr () & 1)) {
    14c0:	3b0b3a0e 	blcc	2cfd00 <__ccfg+0x2afd58>
    14c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    14c8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    14cc:	0b00000c 	bleq	1504 <wwait+0x50>
	put_byte (CMD_RDSR);
    14d0:	0b0b000f 	bleq	2c1514 <__ccfg+0x2a156c>
	r = get_byte ();
    14d4:	00001349 	andeq	r1, r0, r9, asr #6
    14d8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	while (dopen && (rdsr () & 1)) {
    14dc:	00130113 	andseq	r0, r3, r3, lsl r1
}
    14e0:	00210d00 	eoreq	r0, r1, r0, lsl #26
		if (st == WNONE)
    14e4:	160e0000 	strne	r0, [lr], -r0
    14e8:	3a0e0300 	bcc	3820f0 <__ccfg+0x362148>
			mdelay (1);
    14ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f0:	0013490b 	andseq	r4, r3, fp, lsl #18
			delay (del, st);
    14f4:	01150f00 	tsteq	r5, r0, lsl #30
    14f8:	13010c27 	movwne	r0, #7207	; 0x1c27
			release;
    14fc:	05100000 	ldreq	r0, [r0, #-0]
    1500:	00134900 	andseq	r4, r3, r0, lsl #18
    1504:	00341100 	eorseq	r1, r4, r0, lsl #2
static void ready () {
    1508:	0b3a0e03 	bleq	e84d1c <__ccfg+0xe64d74>
	if (dopen) {
    150c:	0b39053b 	bleq	e42a00 <__ccfg+0xe22a58>
		wwait (WNONE, 1);
    1510:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 13f4 <ResetISR+0x8>
    1514:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1518:	0b011312 	bleq	46168 <__ccfg+0x261c0>
	dstat = 0;
    151c:	3b0b3a0b 	blcc	2cfd50 <__ccfg+0x2afda8>
}
    1520:	010b3905 	tsteq	fp, r5, lsl #18
    1524:	13000013 	movwne	r0, #19
    1528:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	udelay (1);
    152c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1530:	13490b39 	movtne	r0, #39737	; 0x9b39
	udelay (1);
    1534:	00000b38 	andeq	r0, r0, r8, lsr fp
		dopen = DOPEN_TEMP;
    1538:	03011314 	movweq	r1, #4884	; 0x1314
    153c:	3a0b0b0e 	bcc	2c417c <__ccfg+0x2a41d4>
    1540:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1544:	0013010b 	andseq	r0, r3, fp, lsl #2
static void cclose () {
    1548:	00211500 	eoreq	r1, r1, r0, lsl #10
	if (dopen == DOPEN_TEMP) {
    154c:	0b2f1349 	bleq	bc6278 <__ccfg+0xba62d0>
    1550:	34160000 	ldrcc	r0, [r6], #-0
		wwait (WNONE, 1);
    1554:	3a0e0300 	bcc	38215c <__ccfg+0x3621b4>
    1558:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	cmd_0 (CMD_DP);
    155c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1560:	1700000a 	strne	r0, [r0, -sl]
		dopen = 0;
    1564:	13470034 	movtne	r0, #28724	; 0x7034
}
    1568:	0b3b0b3a 	bleq	ec4258 <__ccfg+0xea42b0>
word ee_open () {
    156c:	0a020b39 	beq	84258 <__ccfg+0x642b0>
	ready ();
    1570:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
	dopen = DOPEN_PERM;
    1574:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1578:	3b0b3a0e 	blcc	2cfdb8 <__ccfg+0x2afe10>
}
    157c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	if (dopen) {
    1580:	1201110c 	andne	r1, r1, #12, 2
    1584:	010a4001 	tsteq	sl, r1
		dopen = DOPEN_TEMP;
    1588:	19000013 	stmdbne	r0, {r0, r1, r4}
		cclose ();
    158c:	08030005 	stmdaeq	r3, {r0, r2}
}
    1590:	0b3b0b3a 	bleq	ec4280 <__ccfg+0xea42d8>
int ser_in (word st, char *buf, int len) {
    1594:	13490b39 	movtne	r0, #39737	; 0x9b39
    1598:	00000602 	andeq	r0, r0, r2, lsl #12
	if (len == 0)
    159c:	0300051a 	movweq	r0, #1306	; 0x51a
	if (__inpline == NULL) {
    15a0:	3b0b3a0e 	blcc	2cfde0 <__ccfg+0x2afe38>
		if ((prcs = running (__inserial)) == 0) {
    15a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    15a8:	00060213 	andeq	r0, r6, r3, lsl r2
			prcs = runthread (__inserial);
    15ac:	000a1b00 	andeq	r1, sl, r0, lsl #22
    15b0:	0b3a0e03 	bleq	e84dc4 <__ccfg+0xe64e1c>
			if (prcs == 0) {
    15b4:	0b390b3b 	bleq	e442a8 <__ccfg+0xe24300>
				npwait (st);
    15b8:	00000111 	andeq	r0, r0, r1, lsl r1
		release;
    15bc:	31011d1c 	tstcc	r1, ip, lsl sp
		join (prcs, st);
    15c0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    15c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	if (*__inpline == NULL) // bin cmd
    15c8:	010b570b 	tsteq	fp, fp, lsl #14
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15cc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
	if (prcs >= len)
    15d0:	13310005 	teqne	r1, #5
		prcs = len-1;
    15d4:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
	memcpy (buf, __inpline, prcs);
    15d8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    15dc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    15e0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	ufree (__inpline);
    15e4:	1f00000b 	svcne	0x0000000b
	__inpline = NULL;
    15e8:	0e03012e 	adfeqsp	f0, f3, #0.5
	if (*buf) // if it's NULL, it's a bin cmd
    15ec:	0b3b0b3a 	bleq	ec42dc <__ccfg+0xea4334>
		buf [prcs] = '\0';
    15f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    15f4:	0b201349 	bleq	806320 <__ccfg+0x7e6378>
		prcs = strlen (__inpline);
    15f8:	05200000 	streq	r0, [r0, #-0]!
    15fc:	3a0e0300 	bcc	382204 <__ccfg+0x36225c>
		return 0;
    1600:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1604:	0013490b 	andseq	r4, r3, fp, lsl #18
    1608:	11010000 	mrsne	r0, (UNDEF: 1)
int ser_outf (word st, const char *m, ...) {
    160c:	130e2501 	movwne	r2, #58625	; 0xe501
    1610:	1b0e030b 	blne	382244 <__ccfg+0x36229c>
	if ((prcs = running (__outserial)) != 0) {
    1614:	1106550e 	tstne	r6, lr, lsl #10
    1618:	00061001 	andeq	r1, r6, r1
		join (prcs, st);
    161c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1620:	0b3e0b0b 	bleq	f84254 <__ccfg+0xf642ac>
		release;
    1624:	00000e03 	andeq	r0, r0, r3, lsl #28
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1628:	03001603 	movweq	r1, #1539	; 0x603
    162c:	3b0b3a0e 	blcc	2cfe6c <__ccfg+0x2afec4>
    1630:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		umwait (st);
    1634:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1638:	0b0b0024 	bleq	2c16d0 <__ccfg+0x2a1728>
	if (runstrand (__outserial, buf) == 0) {
    163c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1640:	26050000 	strcs	r0, [r5], -r0
    1644:	00134900 	andseq	r4, r3, r0, lsl #18
		ufree (buf);
    1648:	00350600 	eorseq	r0, r5, r0, lsl #12
		npwait (st);
    164c:	00001349 	andeq	r1, r0, r9, asr #6
}
    1650:	0b011307 	bleq	46274 <__ccfg+0x262cc>
    1654:	3b0b3a0b 	blcc	2cfe88 <__ccfg+0x2afee0>
    1658:	010b390b 	tsteq	fp, fp, lsl #18
    165c:	08000013 	stmdaeq	r0, {r0, r1, r4}
int ser_inf (word st, const char *fmt, ...) {
    1660:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1664:	0b3b0b3a 	bleq	ec4354 <__ccfg+0xea43ac>
	if (fmt == NULL)
    1668:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (__inpline == NULL) {
    166c:	0b0d0b0b 	bleq	3442a0 <__ccfg+0x3242f8>
		if ((prcs = running (__inserial)) == 0) {
    1670:	0b380b0c 	bleq	e042a8 <__ccfg+0xde4300>
    1674:	0d090000 	stceq	0, cr0, [r9, #-0]
			prcs = runthread (__inserial);
    1678:	3a0e0300 	bcc	382280 <__ccfg+0x3622d8>
    167c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (prcs == 0) {
    1680:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
				npwait (st);
    1684:	0a00000b 	beq	16b8 <ser_inf+0x58>
		release;
    1688:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		join (prcs, st);
    168c:	0b3b0b3a 	bleq	ec437c <__ccfg+0xea43d4>
    1690:	13490b39 	movtne	r0, #39737	; 0x9b39
	va_start (ap, fmt);
    1694:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	prcs = vscan (__inpline, fmt, ap);
    1698:	0f0b0000 	svceq	0x000b0000
    169c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	ufree (__inpline);
    16a0:	0c000013 	stceq	0, cr0, [r0], {19}
	__inpline = NULL;
    16a4:	13490101 	movtne	r0, #37121	; 0x9101
}
    16a8:	00001301 	andeq	r1, r0, r1, lsl #6
    16ac:	0000210d 	andeq	r2, r0, sp, lsl #2
    16b0:	00160e00 	andseq	r0, r6, r0, lsl #28
		return 0;
    16b4:	0b3a0e03 	bleq	e84ec8 <__ccfg+0xe64f20>
    16b8:	0b39053b 	bleq	e42bac <__ccfg+0xe22c04>
    16bc:	00001349 	andeq	r1, r0, r9, asr #6
strand (__outserial, const char*)
    16c0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    16c4:	0013010c 	andseq	r0, r3, ip, lsl #2
    16c8:	00051000 	andeq	r1, r5, r0
    16cc:	00001349 	andeq	r1, r0, r9, asr #6
endstrand
    16d0:	03003411 	movweq	r3, #1041	; 0x411
    16d4:	3b0b3a0e 	blcc	2cff14 <__ccfg+0x2aff6c>
	ptr = data;
    16d8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    16dc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	if (*ptr)
    16e0:	1200000c 	andne	r0, r0, #12
		len = strlen (ptr);
    16e4:	0b0b0113 	bleq	2c1b38 <__ccfg+0x2a1b90>
    16e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16ec:	13010b39 	movwne	r0, #6969	; 0x1b39
    16f0:	0d130000 	ldceq	0, cr0, [r3, #-0]
    16f4:	3a0e0300 	bcc	3822fc <__ccfg+0x362354>
    16f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	len -= quant;
    1700:	1400000b 	strne	r0, [r0], #-11
    1704:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1708:	0b3a0b0b 	bleq	e8433c <__ccfg+0xe64394>
	if (len == 0) {
    170c:	0b39053b 	bleq	e42c00 <__ccfg+0xe22c58>
		ufree (data);
    1710:	00001301 	andeq	r1, r0, r1, lsl #6
		finish;
    1714:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1718:	000b2f13 	andeq	r2, fp, r3, lsl pc
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    171c:	00341600 	eorseq	r1, r4, r0, lsl #12
    1720:	0b3a0e03 	bleq	e84f34 <__ccfg+0xe64f8c>
    1724:	0b390b3b 	bleq	e44418 <__ccfg+0xe24470>
    1728:	0a021349 	beq	86454 <__ccfg+0x664ac>
    172c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
strand (__inserial, address)
    1730:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1734:	3b0b3a0e 	blcc	2cff74 <__ccfg+0x2affcc>
    1738:	110b390b 	tstne	fp, fp, lsl #18
    173c:	40011201 	andmi	r1, r1, r1, lsl #4
    1740:	1800000a 	stmdane	r0, {r1, r3}
	if (__inpline != NULL)
    1744:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1694 <ser_inf+0x34>
    1748:	0b3a0e03 	bleq	e84f5c <__ccfg+0xe64fb4>
		finish;
    174c:	0b390b3b 	bleq	e44440 <__ccfg+0xe24498>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1750:	13490c27 	movtne	r0, #39975	; 0x9c27
    1754:	01120111 	tsteq	r2, r1, lsl r1
    1758:	13010a40 	movwne	r0, #6720	; 0x1a40
    175c:	05190000 	ldreq	r0, [r9, #-0]
		umwait (IM_INIT);
    1760:	3a080300 	bcc	202368 <__ccfg+0x1e23c0>
		release;
    1764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	savedata (data);
    1768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	len = MAX_LINE_LENGTH;
    176c:	1a000006 	bne	178c <__inserial+0x5c>
	io (IM_READ, __cport, READ, ptr, 1);
    1770:	08030005 	stmdaeq	r3, {r0, r2}
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
    177c:	00000a02 	andeq	r0, r0, r2, lsl #20
	if (ptr == (char*) data) { // new line
    1780:	3f012e1b 	svccc	0x00012e1b
    1784:	3a0e030c 	bcc	3823bc <__ccfg+0x362414>
		if (*ptr == '\0') { // bin cmd
    1788:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			proceed (IM_BIN);
    178c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1790:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		if (*ptr < 0x20)
    1794:	010a4001 	tsteq	sl, r1
    1798:	1c000013 	stcne	0, cr0, [r0], {19}
			proceed (IM_READ);
    179c:	08030005 	stmdaeq	r3, {r0, r2}
    17a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (*ptr == '\n' || *ptr == '\r') {
    17a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17a8:	00000602 	andeq	r0, r0, r2, lsl #12
    17ac:	3f002e1d 	svccc	0x00002e1d
		*ptr = '\0';
    17b0:	3a0e030c 	bcc	3823e8 <__ccfg+0x362440>
		__inpline = (char*)data;
    17b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		finish;
    17b8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
	if (len) {
    17bc:	000a4001 	andeq	r4, sl, r1
		ptr++;
    17c0:	00341e00 	eorseq	r1, r4, r0, lsl #28
    17c4:	0b3a0803 	bleq	e837d8 <__ccfg+0xe63830>
		len--;
    17c8:	0b39053b 	bleq	e42cbc <__ccfg+0xe22d14>
	proceed (IM_READ);
    17cc:	06021349 	streq	r1, [r2], -r9, asr #6
	io (IM_BIN, __cport, READ, ptr, 1);
    17d0:	0a1f0000 	beq	7c17d8 <__ccfg+0x7a1830>
    17d4:	3a0e0300 	bcc	3823dc <__ccfg+0x362434>
    17d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17dc:	0001110b 	andeq	r1, r1, fp, lsl #2
    17e0:	011d2000 	tsteq	sp, r0
	len -= 2;
    17e4:	01521331 	cmpeq	r2, r1, lsr r3
	if (len > *ptr + 1) // 1 for 0x04
    17e8:	0b580655 	bleq	1603144 <__ccfg+0x15e319c>
    17ec:	0b570559 	bleq	15c2d58 <__ccfg+0x15a2db0>
		len = *ptr + 1;
    17f0:	00001301 	andeq	r1, r0, r1, lsl #6
    17f4:	31000521 	tstcc	r0, r1, lsr #10
	ptr++;
    17f8:	22000013 	andcs	r0, r0, #19
	quant = io (IM_BINL, __cport, READ, ptr, len);
    17fc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1800:	01120111 	tsteq	r2, r1, lsl r1
    1804:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1808:	00000b57 	andeq	r0, r0, r7, asr fp
    180c:	03000523 	movweq	r0, #1315	; 0x523
    1810:	3b0b3a0e 	blcc	2d0050 <__ccfg+0x2b00a8>
	len -= quant;
    1814:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		__inpline = (char*)data;
    1818:	00060213 	andeq	r0, r6, r3, lsl r2
		finish;
    181c:	000a2400 	andeq	r2, sl, r0, lsl #8
	ptr += quant;
    1820:	0b3a0e03 	bleq	e85034 <__ccfg+0xe6508c>
    1824:	0b390b3b 	bleq	e44518 <__ccfg+0xe24570>
endstrand
    1828:	00000111 	andeq	r0, r0, r1, lsl r1
    182c:	31011d25 	tstcc	r1, r5, lsr #26
	proceed (IM_BINL);
    1830:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
endstrand
    1834:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1838:	000b570b 	andeq	r5, fp, fp, lsl #14
    183c:	00052600 	andeq	r2, r5, r0, lsl #12
    1840:	06021331 			; <UNDEFINED> instruction: 0x06021331
    1844:	1d270000 	stcne	0, cr0, [r7, #-0]
    1848:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		if (res && (d < n))
    184c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1850:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1854:	0013010b 	andseq	r0, r3, fp, lsl #2
    1858:	011d2800 	tsteq	sp, r0, lsl #16
			res [d] = (char) c;
    185c:	01111331 	tsteq	r1, r1, lsr r3
		d++;
    1860:	0b580112 	bleq	1601cb0 <__ccfg+0x15e1d08>
    1864:	0b570b59 	bleq	15c45d0 <__ccfg+0x15a4628>
    1868:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    186c:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1870:	3b0b3a0e 	blcc	2d00b0 <__ccfg+0x2b0108>
    1874:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				enci (10000);
    1878:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	000a4001 	andeq	r4, sl, r1
    1880:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
	d = 0;
    1884:	0b3a0e03 	bleq	e85098 <__ccfg+0xe650f0>
		c = *fm++;
    1888:	0b390b3b 	bleq	e4457c <__ccfg+0xe245d4>
		if (c == '\\') {
    188c:	01120111 	tsteq	r2, r1, lsl r1
			if ((c = *fm++) == '\0') {
    1890:	13010a40 	movwne	r0, #6720	; 0x1a40
    1894:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
				outc ('\\');
    1898:	3a0e0300 	bcc	3824a0 <__ccfg+0x3624f8>
			if ((c = *fm++) == '\0') {
    189c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc ('\\');
    18a0:	000b200b 	andeq	r2, fp, fp
    18a4:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
			outc (c);
    18a8:	0b3a0e03 	bleq	e850bc <__ccfg+0xe65114>
    18ac:	0b390b3b 	bleq	e445a0 <__ccfg+0xe245f8>
			if (c == '\0')
    18b0:	01110c27 	tsteq	r1, r7, lsr #24
    18b4:	0a400112 	beq	1001d04 <__ccfg+0xfe1d5c>
			outc (c);
    18b8:	00001301 	andeq	r1, r0, r1, lsl #6
				outc (val);
    18bc:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
				val = (word) va_arg (ap, aword);
    18c0:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
		if (c == '%') {
    18c4:	13310034 	teqne	r1, #52	; 0x34
    18c8:	00000602 	andeq	r0, r0, r2, lsl #12
			c = *fm++;
    18cc:	03012e2f 	movweq	r2, #7727	; 0x1e2f
			switch (c) {
    18d0:	3b0b3a0e 	blcc	2d0110 <__ccfg+0x2b0168>
    18d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    18d8:	010b2013 	tsteq	fp, r3, lsl r0
    18dc:	30000013 	andcc	r0, r0, r3, lsl r0
    18e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    18e4:	0b3b0b3a 	bleq	ec45d4 <__ccfg+0xea462c>
    18e8:	13490b39 	movtne	r0, #39737	; 0x9b39
    18ec:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
				outc ('%');
    18f0:	3a0e0301 	bcc	3824fc <__ccfg+0x362554>
    18f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc (c);
    18f8:	200c270b 	andcs	r2, ip, fp, lsl #14
    18fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1900:	00053200 	andeq	r3, r5, r0, lsl #4
				if (c == '\0')
    1904:	0b3a0803 	bleq	e83918 <__ccfg+0xe63970>
				return d;
    1908:	0b390b3b 	bleq	e445fc <__ccfg+0xe24654>
}
    190c:	00001349 	andeq	r1, r0, r9, asr #6
    1910:	31011d33 	tstcc	r1, r3, lsr sp
			switch (c) {
    1914:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1918:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    191c:	010b570b 	tsteq	fp, fp, lsl #14
				for (i = 12; ; i -= 4) {
    1920:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
				val = (word) va_arg (ap, aword);
    1924:	0e03012e 	adfeqsp	f0, f3, #0.5
						[ (val >> i) & 0xf ]);
    1928:	0b3b0b3a 	bleq	ec4618 <__ccfg+0xea4670>
    192c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1930:	01120111 	tsteq	r2, r1, lsl r1
					outc (__pi_hex_enc_table
    1934:	13010a40 	movwne	r0, #6720	; 0x1a40
    1938:	34350000 	ldrtcc	r0, [r5], #-0
					if (i == 0)
    193c:	3a080300 	bcc	202544 <__ccfg+0x1e259c>
    1940:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				for (i = 12; ; i -= 4) {
    1944:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				val = (word) va_arg (ap, aword);
    1948:	36000006 	strcc	r0, [r0], -r6
				if (c == 'd' && (val & 0x8000) != 0) {
    194c:	0e03012e 	adfeqsp	f0, f3, #0.5
				val = (word) va_arg (ap, aword);
    1950:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (c == 'd' && (val & 0x8000) != 0) {
    1954:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1958:	13010b20 	movwne	r0, #6944	; 0x1b20
					outc ('-');
    195c:	05370000 	ldreq	r0, [r7, #-0]!
    1960:	3a0e0300 	bcc	382568 <__ccfg+0x3625c0>
					val = (~val) + 1;
    1964:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1968:	0013490b 	andseq	r4, r3, fp, lsl #18
				for (i = 12; ; i -= 4) {
    196c:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
				enci (10000);
    1970:	0b3a0e03 	bleq	e85184 <__ccfg+0xe651dc>
    1974:	0b390b3b 	bleq	e44668 <__ccfg+0xe246c0>
    1978:	13490c27 	movtne	r0, #39975	; 0x9c27
    197c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1980:	05390000 	ldreq	r0, [r9, #-0]!
    1984:	3a0e0300 	bcc	38258c <__ccfg+0x3625e4>
    1988:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    198c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1990:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
    1994:	01111331 	tsteq	r1, r1, lsr r3
    1998:	0a400112 	beq	1001de8 <__ccfg+0xfe1e40>
    199c:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
    19a0:	11133100 	tstne	r3, r0, lsl #2
    19a4:	58011201 	stmdapl	r1, {r0, r9, ip}
    19a8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    19ac:	0000000b 	andeq	r0, r0, fp
    19b0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    19b4:	030b130e 	movweq	r1, #45838	; 0xb30e
				if (c == 'd' || c == 'u') {
    19b8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    19bc:	10011106 	andne	r1, r1, r6, lsl #2
					if (c == 'd' &&
    19c0:	02000006 	andeq	r0, r0, #6
					val = va_arg (ap, lword);
    19c4:	0b0b0024 	bleq	2c1a5c <__ccfg+0x2a1ab4>
					fm++;
    19c8:	0e030b3e 	vmoveq.16	d3[0], r0
					if (c == 'd' &&
    19cc:	16030000 	strne	r0, [r3], -r0
    19d0:	3a0e0300 	bcc	3825d8 <__ccfg+0x362630>
						outc ('-');
    19d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19d8:	0013490b 	andseq	r4, r3, fp, lsl #18
						val = (~val) + 1;
    19dc:	00240400 	eoreq	r0, r4, r0, lsl #8
				enci (10000);
    19e0:	0b3e0b0b 	bleq	f84614 <__ccfg+0xf6466c>
					enci (1000000000UL);
    19e4:	00000803 	andeq	r0, r0, r3, lsl #16
    19e8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    19ec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    19f0:	13490035 	movtne	r0, #36917	; 0x9035
    19f4:	13070000 	movwne	r0, #28672	; 0x7000
    19f8:	3a0b0b01 	bcc	2c4604 <__ccfg+0x2a465c>
    19fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a00:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a04:	000d0800 	andeq	r0, sp, r0, lsl #16
    1a08:	0b3a0e03 	bleq	e8521c <__ccfg+0xe65274>
    1a0c:	0b390b3b 	bleq	e44700 <__ccfg+0xe24758>
    1a10:	0b0b1349 	bleq	2c673c <__ccfg+0x2a6794>
    1a14:	0b0c0b0d 	bleq	304650 <__ccfg+0x2e46a8>
    1a18:	00000b38 	andeq	r0, r0, r8, lsr fp
    1a1c:	03000d09 	movweq	r0, #3337	; 0xd09
    1a20:	3b0b3a0e 	blcc	2d0260 <__ccfg+0x2b02b8>
    1a24:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				} else if (c == 'x') {
    1a28:	000b3813 	andeq	r3, fp, r3, lsl r8
					for (i = 28; ; i -= 4) {
    1a2c:	00340a00 	eorseq	r0, r4, r0, lsl #20
					val = va_arg (ap, lword);
    1a30:	0b3a0e03 	bleq	e85244 <__ccfg+0xe6529c>
							[ (val >> i) & 0xf ]);
    1a34:	0b390b3b 	bleq	e44728 <__ccfg+0xe24780>
    1a38:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 191c <__pi_vfparse+0xb0>
						outc (__pi_hex_enc_table
    1a3c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1a40:	0b000f0b 	bleq	5674 <__exidx_end+0x2a00>
    1a44:	0013490b 	andseq	r4, r3, fp, lsl #18
						if (i == 0)
    1a48:	01010c00 	tsteq	r1, r0, lsl #24
    1a4c:	13011349 	movwne	r1, #4937	; 0x1349
					for (i = 28; ; i -= 4) {
    1a50:	210d0000 	mrscs	r0, (UNDEF: 13)
					outc ('%');
    1a54:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1a58:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1a5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					outc ('l');
    1a60:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a64:	150f0000 	strne	r0, [pc, #-0]	; 1a6c <__pi_vfparse+0x200>
				val = (word) va_arg (ap, aword);
    1a68:	010c2701 	tsteq	ip, r1, lsl #14
				outc (val);
    1a6c:	10000013 	andne	r0, r0, r3, lsl r0
    1a70:	13490005 	movtne	r0, #36869	; 0x9005
				while (*st != '\0') {
    1a74:	34110000 	ldrcc	r0, [r1], #-0
    1a78:	3a0e0300 	bcc	382680 <__ccfg+0x3626d8>
    1a7c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a80:	3f13490b 	svccc	0x0013490b
					outc (*st);
    1a84:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1a88:	01131200 	tsteq	r3, r0, lsl #4
					st++;
    1a8c:	0b3a0b0b 	bleq	e846c0 <__ccfg+0xe64718>
		c = *fm++;
    1a90:	0b39053b 	bleq	e42f84 <__ccfg+0xe22fdc>
    1a94:	00001301 	andeq	r1, r0, r1, lsl #6
    1a98:	03000d13 	movweq	r0, #3347	; 0xd13
char *vform (char *res, const char *fm, va_list aq) {
    1a9c:	3b0b3a0e 	blcc	2d02dc <__ccfg+0x2b0334>
    1aa0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (res != NULL) {
    1aa4:	000b3813 	andeq	r3, fp, r3, lsl r8
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1aa8:	01131400 	tsteq	r3, r0, lsl #8
    1aac:	0b0b0e03 	bleq	2c52c0 <__ccfg+0x2a5318>
    1ab0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1ab4:	13010b39 	movwne	r0, #6969	; 0x1b39
    1ab8:	21150000 	tstcs	r5, r0
	fml = strlen (fm) + 17;
    1abc:	2f134900 	svccs	0x00134900
    1ac0:	1600000b 	strne	r0, [r0], -fp
    1ac4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1a14 <__pi_vfparse+0x1a8>
	if ((res = (char*) umalloc (fml)) == NULL)
    1ac8:	0b3a0e03 	bleq	e852dc <__ccfg+0xe65334>
    1acc:	0b390b3b 	bleq	e447c0 <__ccfg+0xe24818>
    1ad0:	13490c27 	movtne	r0, #39975	; 0x9c27
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ad4:	01120111 	tsteq	r2, r1, lsl r1
    1ad8:	00000a40 	andeq	r0, r0, r0, asr #20
    1adc:	03000517 	movweq	r0, #1303	; 0x517
    1ae0:	3b0b3a08 	blcc	2d0308 <__ccfg+0x2b0360>
		ufree (res);
    1ae4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		goto Again;
    1ae8:	00060213 	andeq	r0, r6, r3, lsl r2
	if (buf == NULL || fmt == NULL)
    1aec:	00341800 	eorseq	r1, r4, r0, lsl #16
int vscan (const char *buf, const char *fmt, va_list ap) {
    1af0:	0b3a0e03 	bleq	e85304 <__ccfg+0xe6535c>
	if (buf == NULL || fmt == NULL)
    1af4:	0b390b3b 	bleq	e447e8 <__ccfg+0xe24840>
    1af8:	06021349 	streq	r1, [r2], -r9, asr #6
    1afc:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'u': scanu (lword); break;
    1b00:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
			while (isspace (*buf)) buf++;
    1b04:	0e030b13 	vmoveq.32	d3[0], r0
    1b08:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	while (*fmt != '\0') {
    1b0c:	06100111 			; <UNDEFINED> instruction: 0x06100111
		if (*fmt++ != '%')
    1b10:	24020000 	strcs	r0, [r2], #-0
		switch (*fmt++) {
    1b14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b18:	000e030b 	andeq	r0, lr, fp, lsl #6
    1b1c:	00160300 	andseq	r0, r6, r0, lsl #6
    1b20:	0b3a0e03 	bleq	e85334 <__ccfg+0xe6538c>
    1b24:	0b390b3b 	bleq	e44818 <__ccfg+0xe24870>
    1b28:	00001349 	andeq	r1, r0, r9, asr #6
    1b2c:	0b002404 	bleq	ab44 <__exidx_end+0x7ed0>
}
    1b30:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		switch (*fmt++) {
    1b34:	05000008 	streq	r0, [r0, #-8]
    1b38:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1b3c:	0b3a0b0b 	bleq	e84770 <__ccfg+0xe647c8>
    1b40:	13010b3b 	movwne	r0, #6971	; 0x1b3b
			while (isspace (*buf)) buf++;
    1b44:	0d060000 	stceq	0, cr0, [r6, #-0]
    1b48:	490e0300 	stmdbmi	lr, {r8, r9}
    1b4c:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1b50:	0700000c 	streq	r0, [r0, -ip]
    1b54:	0b0b000f 	bleq	2c1b98 <__ccfg+0x2a1bf0>
    1b58:	26080000 	strcs	r0, [r8], -r0
			if (*buf == '\0')
    1b5c:	00134900 	andseq	r4, r3, r0, lsl #18
			if (*buf != ',') {
    1b60:	00350900 	eorseq	r0, r5, r0, lsl #18
			sap = va_arg (ap, char*);
    1b64:	00001349 	andeq	r1, r0, r9, asr #6
			nc++;
    1b68:	0b01130a 	bleq	46798 <__ccfg+0x267f0>
			if (*buf != ',') {
    1b6c:	3b0b3a0b 	blcc	2d03a0 <__ccfg+0x2b03f8>
				while (!isspace (*buf) && *buf != ',' &&
    1b70:	010b390b 	tsteq	fp, fp, lsl #18
    1b74:	0b000013 	bleq	1bc8 <vscan+0xdc>
    1b78:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b7c:	0b3b0b3a 	bleq	ec486c <__ccfg+0xea48c4>
    1b80:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b84:	0b0d0b0b 	bleq	3447b8 <__ccfg+0x324810>
    1b88:	0b380b0c 	bleq	e047c0 <__ccfg+0xde4818>
			while (isspace (*buf)) buf++;
    1b8c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1b90:	3a0e0300 	bcc	382798 <__ccfg+0x3627f0>
    1b94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b98:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1b9c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
			if (*buf == ',') buf++;
    1ba0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ba4:	0b3b0b3a 	bleq	ec4894 <__ccfg+0xea48ec>
			*sap = '\0';
    1ba8:	13490b39 	movtne	r0, #39737	; 0x9b39
			break;
    1bac:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		    case 'd': scani (word); break;
    1bb0:	0f0e0000 	svceq	0x000e0000
    1bb4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1bb8:	0f000013 	svceq	0x00000013
    1bbc:	13490101 	movtne	r0, #37121	; 0x9101
    1bc0:	00001301 	andeq	r1, r0, r1, lsl #6
    1bc4:	00002110 	andeq	r2, r0, r0, lsl r1
    1bc8:	00161100 	andseq	r1, r6, r0, lsl #2
    1bcc:	0b3a0e03 	bleq	e853e0 <__ccfg+0xe65438>
    1bd0:	0b39053b 	bleq	e430c4 <__ccfg+0xe2311c>
    1bd4:	00001349 	andeq	r1, r0, r9, asr #6
    1bd8:	27011512 	smladcs	r1, r2, r5, r1
    1bdc:	0013010c 	andseq	r0, r3, ip, lsl #2
    1be0:	00051300 	andeq	r1, r5, r0, lsl #6
    1be4:	00001349 	andeq	r1, r0, r9, asr #6
    1be8:	03003414 	movweq	r3, #1044	; 0x414
    1bec:	3b0b3a0e 	blcc	2d042c <__ccfg+0x2b0484>
    1bf0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1bf4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1bf8:	1500000c 	strne	r0, [r0, #-12]
    1bfc:	0b0b0113 	bleq	2c2050 <__ccfg+0x2a20a8>
    1c00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c04:	13010b39 	movwne	r0, #6969	; 0x1b39
    1c08:	0d160000 	ldceq	0, cr0, [r6, #-0]
    1c0c:	3a0e0300 	bcc	382814 <__ccfg+0x36286c>
    1c10:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1c18:	1700000b 	strne	r0, [r0, -fp]
    1c1c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		    case 'u': scanu (word); break;
    1c20:	0b3a0b0b 	bleq	e84854 <__ccfg+0xe648ac>
    1c24:	0b39053b 	bleq	e43118 <__ccfg+0xe23170>
    1c28:	00001301 	andeq	r1, r0, r1, lsl #6
    1c2c:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1c30:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1c34:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1c38:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1c3c:	0b3b0b3a 	bleq	ec492c <__ccfg+0xea4984>
    1c40:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1c44:	01111349 	tsteq	r1, r9, asr #6
    1c48:	0a400112 	beq	1002098 <__ccfg+0xfe20f0>
    1c4c:	00001301 	andeq	r1, r0, r1, lsl #6
    1c50:	0300051a 	movweq	r0, #1306	; 0x51a
    1c54:	3b0b3a08 	blcc	2d047c <__ccfg+0x2b04d4>
    1c58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c5c:	00060213 	andeq	r0, r6, r3, lsl r2
    1c60:	00051b00 	andeq	r1, r5, r0, lsl #22
    1c64:	0b3a0803 	bleq	e83c78 <__ccfg+0xe63cd0>
		    case 'x': scanx (word); break;
    1c68:	0b390b3b 	bleq	e4495c <__ccfg+0xe249b4>
    1c6c:	0a021349 	beq	86998 <__ccfg+0x669f0>
    1c70:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1c74:	1d000000 	stcne	0, cr0, [r0, #-0]
    1c78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c7c:	0b3b0b3a 	bleq	ec496c <__ccfg+0xea49c4>
    1c80:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c84:	00000602 	andeq	r0, r0, r2, lsl #12
    1c88:	0300341e 	movweq	r3, #1054	; 0x41e
    1c8c:	3b0b3a08 	blcc	2d04b4 <__ccfg+0x2b050c>
    1c90:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c94:	00060213 	andeq	r0, r6, r3, lsl r2
    1c98:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1c9c:	0b3a0803 	bleq	e83cb0 <__ccfg+0xe63d08>
    1ca0:	0b390b3b 	bleq	e44994 <__ccfg+0xe249ec>
    1ca4:	0a021349 	beq	869d0 <__ccfg+0x66a28>
    1ca8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cac:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1cb0:	0e030b13 	vmoveq.32	d3[0], r0
    1cb4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1cb8:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1cbc:	24020000 	strcs	r0, [r2], #-0
    1cc0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1cc4:	000e030b 	andeq	r0, lr, fp, lsl #6
    1cc8:	00160300 	andseq	r0, r6, r0, lsl #6
    1ccc:	0b3a0e03 	bleq	e854e0 <__ccfg+0xe65538>
    1cd0:	0b390b3b 	bleq	e449c4 <__ccfg+0xe24a1c>
    1cd4:	00001349 	andeq	r1, r0, r9, asr #6
    1cd8:	0b002404 	bleq	acf0 <__exidx_end+0x807c>
    1cdc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			switch (*fmt++) {
    1ce0:	05000008 	streq	r0, [r0, #-8]
    1ce4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1ce8:	0b3a0b0b 	bleq	e8491c <__ccfg+0xe64974>
    1cec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1cf0:	0d060000 	stceq	0, cr0, [r6, #-0]
    1cf4:	490e0300 	stmdbmi	lr, {r8, r9}
		    	    case 'd': scani (lword); break;
    1cf8:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1cfc:	0700000c 	streq	r0, [r0, -ip]
    1d00:	0b0b000f 	bleq	2c1d44 <__ccfg+0x2a1d9c>
    1d04:	26080000 	strcs	r0, [r8], -r0
    1d08:	00134900 	andseq	r4, r3, r0, lsl #18
    1d0c:	00350900 	eorseq	r0, r5, r0, lsl #18
    1d10:	00001349 	andeq	r1, r0, r9, asr #6
    1d14:	0b01130a 	bleq	46944 <__ccfg+0x2699c>
    1d18:	3b0b3a0b 	blcc	2d054c <__ccfg+0x2b05a4>
    1d1c:	010b390b 	tsteq	fp, fp, lsl #18
    1d20:	0b000013 	bleq	1d74 <vscan+0x288>
    1d24:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d28:	0b3b0b3a 	bleq	ec4a18 <__ccfg+0xea4a70>
    1d2c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d30:	0b0d0b0b 	bleq	344964 <__ccfg+0x3249bc>
    1d34:	0b380b0c 	bleq	e0496c <__ccfg+0xde49c4>
    1d38:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1d3c:	3a0e0300 	bcc	382944 <__ccfg+0x36299c>
    1d40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d44:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1d48:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1d4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d50:	0b3b0b3a 	bleq	ec4a40 <__ccfg+0xea4a98>
		    	    case 'x': scanx (lword); break;
    1d54:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d58:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1d5c:	0f0e0000 	svceq	0x000e0000
    1d60:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d64:	0f000013 	svceq	0x00000013
    1d68:	13490101 	movtne	r0, #37121	; 0x9101
    1d6c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d70:	00002110 	andeq	r2, r0, r0, lsl r1
    1d74:	00161100 	andseq	r1, r6, r0, lsl #2
    1d78:	0b3a0e03 	bleq	e8558c <__ccfg+0xe655e4>
    1d7c:	0b39053b 	bleq	e43270 <__ccfg+0xe232c8>
    1d80:	00001349 	andeq	r1, r0, r9, asr #6
    1d84:	27011512 	smladcs	r1, r2, r5, r1
    1d88:	0013010c 	andseq	r0, r3, ip, lsl #2
    1d8c:	00051300 	andeq	r1, r5, r0, lsl #6
    1d90:	00001349 	andeq	r1, r0, r9, asr #6
    1d94:	03003414 	movweq	r3, #1044	; 0x414
    1d98:	3b0b3a0e 	blcc	2d05d8 <__ccfg+0x2b0630>
    1d9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1da0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1da4:	1500000c 	strne	r0, [r0, #-12]
    1da8:	0b0b0113 	bleq	2c21fc <__ccfg+0x2a2254>
    1dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1db0:	13010b39 	movwne	r0, #6969	; 0x1b39
    1db4:	0d160000 	ldceq	0, cr0, [r6, #-0]
    1db8:	3a0e0300 	bcc	3829c0 <__ccfg+0x362a18>
    1dbc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dc0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		    	    case 'd': scani (lword); break;
    1dc4:	1700000b 	strne	r0, [r0, -fp]
    1dc8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1dcc:	0b3a0b0b 	bleq	e84a00 <__ccfg+0xe64a58>
    1dd0:	0b39053b 	bleq	e432c4 <__ccfg+0xe2331c>
    1dd4:	00001301 	andeq	r1, r0, r1, lsl #6
    1dd8:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1ddc:	000b2f13 	andeq	r2, fp, r3, lsl pc
		    	    case 'u': scanu (lword); break;
    1de0:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1de4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1de8:	0b3b0b3a 	bleq	ec4ad8 <__ccfg+0xea4b30>
    1dec:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1df0:	01111349 	tsteq	r1, r9, asr #6
    1df4:	0a400112 	beq	1002244 <__ccfg+0xfe229c>
    1df8:	00001301 	andeq	r1, r0, r1, lsl #6
    1dfc:	0300051a 	movweq	r0, #1306	; 0x51a
    1e00:	3b0b3a08 	blcc	2d0628 <__ccfg+0x2b0680>
    1e04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e08:	00060213 	andeq	r0, r6, r3, lsl r2
    1e0c:	00051b00 	andeq	r1, r5, r0, lsl #22
    1e10:	0b3a0803 	bleq	e83e24 <__ccfg+0xe63e7c>
    1e14:	0b390b3b 	bleq	e44b08 <__ccfg+0xe24b60>
    1e18:	0a021349 	beq	86b44 <__ccfg+0x66b9c>
    1e1c:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1e20:	1d000000 	stcne	0, cr0, [r0, #-0]
    1e24:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    	    case 'x': scanx (lword); break;
    1e28:	0b3b0b3a 	bleq	ec4b18 <__ccfg+0xea4b70>
    1e2c:	13490b39 	movtne	r0, #39737	; 0x9b39
			if ((c = *buf++) == '\0')
    1e30:	00000602 	andeq	r0, r0, r2, lsl #12
    1e34:	0300341e 	movweq	r3, #1054	; 0x41e
			sap = va_arg (ap, char*);
    1e38:	3b0b3a08 	blcc	2d0660 <__ccfg+0x2b06b8>
			nc++;
    1e3c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			break;
    1e40:	000a0213 	andeq	r0, sl, r3, lsl r2
			while (isspace (*buf)) buf++;
    1e44:	11010000 	mrsne	r0, (UNDEF: 1)
    1e48:	130e2501 	movwne	r2, #58625	; 0xe501
    1e4c:	1b0e030b 	blne	382a80 <__ccfg+0x362ad8>
						*sap++ = *buf++;
    1e50:	1106550e 	tstne	r6, lr, lsl #10
    1e54:	00061001 	andeq	r1, r6, r1
			while (isspace (*buf)) buf++;
    1e58:	00240200 	eoreq	r0, r4, r0, lsl #4
    1e5c:	0b3e0b0b 	bleq	f84a90 <__ccfg+0xf64ae8>
    1e60:	00000e03 	andeq	r0, r0, r3, lsl #28
		return 0;
    1e64:	03001603 	movweq	r1, #1539	; 0x603
    1e68:	3b0b3a0e 	blcc	2d06a8 <__ccfg+0x2b0700>
		    case 'x': scanx (word); break;
    1e6c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e70:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		    	    case 'x': scanx (lword); break;
    1e74:	0b0b0024 	bleq	2c1f0c <__ccfg+0x2a1f64>
    1e78:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1e7c:	26050000 	strcs	r0, [r5], -r0
    1e80:	00134900 	andseq	r4, r3, r0, lsl #18
    1e84:	00350600 	eorseq	r0, r5, r0, lsl #12
    1e88:	00001349 	andeq	r1, r0, r9, asr #6
    1e8c:	0b011307 	bleq	46ab0 <__ccfg+0x26b08>
    1e90:	3b0b3a0b 	blcc	2d06c4 <__ccfg+0x2b071c>
    1e94:	010b390b 	tsteq	fp, fp, lsl #18
    1e98:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1e9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ea0:	0b3b0b3a 	bleq	ec4b90 <__ccfg+0xea4be8>
    1ea4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ea8:	0b0d0b0b 	bleq	344adc <__ccfg+0x324b34>
    1eac:	0b380b0c 	bleq	e04ae4 <__ccfg+0xde4b3c>
    1eb0:	0d090000 	stceq	0, cr0, [r9, #-0]
    1eb4:	3a0e0300 	bcc	382abc <__ccfg+0x362b14>
    1eb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ebc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1ec0:	0a00000b 	beq	1ef4 <TrimAfterColdResetWakeupFromShutDown+0x20>
    1ec4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ec8:	0b3b0b3a 	bleq	ec4bb8 <__ccfg+0xea4c10>
    1ecc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ed0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1ed4:	0f0b0000 	svceq	0x000b0000
    1ed8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1edc:	0c000013 	stceq	0, cr0, [r0], {19}
    1ee0:	13490101 	movtne	r0, #37121	; 0x9101
    1ee4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ee8:	0000210d 	andeq	r2, r0, sp, lsl #2
    1eec:	00160e00 	andseq	r0, r6, r0, lsl #28
    1ef0:	0b3a0e03 	bleq	e85704 <__ccfg+0xe6575c>
    1ef4:	0b39053b 	bleq	e433e8 <__ccfg+0xe23440>
    1ef8:	00001349 	andeq	r1, r0, r9, asr #6
    1efc:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1f00:	0013010c 	andseq	r0, r3, ip, lsl #2
    1f04:	00051000 	andeq	r1, r5, r0
    1f08:	00001349 	andeq	r1, r0, r9, asr #6
    1f0c:	03003411 	movweq	r3, #1041	; 0x411
    1f10:	3b0b3a0e 	blcc	2d0750 <__ccfg+0x2b07a8>
    1f14:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1f18:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1f1c:	1200000c 	andne	r0, r0, #12
    1f20:	0b0b0113 	bleq	2c2374 <__ccfg+0x2a23cc>
    1f24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f28:	13010b39 	movwne	r0, #6969	; 0x1b39
    1f2c:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1f30:	3a0e0300 	bcc	382b38 <__ccfg+0x362b90>
    1f34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f38:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f3c:	1400000b 	strne	r0, [r0], #-11
    1f40:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1f44:	0b3a0b0b 	bleq	e84b78 <__ccfg+0xe64bd0>
    1f48:	0b39053b 	bleq	e4343c <__ccfg+0xe23494>
    1f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f50:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1f54:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f58:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1f5c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1f60:	0b3b0b3a 	bleq	ec4c50 <__ccfg+0xea4ca8>
    1f64:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1f68:	01120111 	tsteq	r2, r1, lsl r1
    1f6c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1f70:	05170000 	ldreq	r0, [r7, #-0]
    1f74:	3a0e0300 	bcc	382b7c <__ccfg+0x362bd4>
    1f78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f80:	18000006 	stmdane	r0, {r1, r2}
    1f84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1f88:	0b3b0b3a 	bleq	ec4c78 <__ccfg+0xea4cd0>
    1f8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f90:	00000602 	andeq	r0, r0, r2, lsl #12
    1f94:	03000a19 	movweq	r0, #2585	; 0xa19
    1f98:	3b0b3a0e 	blcc	2d07d8 <__ccfg+0x2b0830>
    1f9c:	000b390b 	andeq	r3, fp, fp, lsl #18
    1fa0:	010b1a00 	tsteq	fp, r0, lsl #20
    1fa4:	00000655 	andeq	r0, r0, r5, asr r6
    1fa8:	0300341b 	movweq	r3, #1051	; 0x41b
    1fac:	3b0b3a08 	blcc	2d07d4 <__ccfg+0x2b082c>
    1fb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fb4:	000a0213 	andeq	r0, sl, r3, lsl r2
    1fb8:	11010000 	mrsne	r0, (UNDEF: 1)
    1fbc:	130e2501 	movwne	r2, #58625	; 0xe501
    1fc0:	1b0e030b 	blne	382bf4 <__ccfg+0x362c4c>
    1fc4:	1106550e 	tstne	r6, lr, lsl #10
    1fc8:	00061001 	andeq	r1, r6, r1
    1fcc:	00240200 	eoreq	r0, r4, r0, lsl #4
    1fd0:	0b3e0b0b 	bleq	f84c04 <__ccfg+0xf64c5c>
    1fd4:	00000e03 	andeq	r0, r0, r3, lsl #28
    1fd8:	03001603 	movweq	r1, #1539	; 0x603
    1fdc:	3b0b3a0e 	blcc	2d081c <__ccfg+0x2b0874>
    1fe0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fe4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1fe8:	0b0b0024 	bleq	2c2080 <__ccfg+0x2a20d8>
    1fec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1ff0:	26050000 	strcs	r0, [r5], -r0
    1ff4:	00134900 	andseq	r4, r3, r0, lsl #18
    1ff8:	00350600 	eorseq	r0, r5, r0, lsl #12
    1ffc:	00001349 	andeq	r1, r0, r9, asr #6
    2000:	0b000f07 	bleq	5c24 <__exidx_end+0x2fb0>
    2004:	0013490b 	andseq	r4, r3, fp, lsl #18
    2008:	01130800 	tsteq	r3, r0, lsl #16
    200c:	0b3a0b0b 	bleq	e84c40 <__ccfg+0xe64c98>
    2010:	0b390b3b 	bleq	e44d04 <__ccfg+0xe24d5c>
    2014:	00001301 	andeq	r1, r0, r1, lsl #6
    2018:	03000d09 	movweq	r0, #3337	; 0xd09
    201c:	3b0b3a0e 	blcc	2d085c <__ccfg+0x2b08b4>
    2020:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2024:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2028:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    202c:	0a00000b 	beq	2060 <NOROM_SetupSetVddrLevel+0x14>
    2030:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2034:	0b3b0b3a 	bleq	ec4d24 <__ccfg+0xea4d7c>
    2038:	13490b39 	movtne	r0, #39737	; 0x9b39
    203c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2040:	0300340b 	movweq	r3, #1035	; 0x40b
    2044:	3b0b3a0e 	blcc	2d0884 <__ccfg+0x2b08dc>
    2048:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    204c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2050:	0c00000c 	stceq	0, cr0, [r0], {12}
    2054:	13490101 	movtne	r0, #37121	; 0x9101
    2058:	00001301 	andeq	r1, r0, r1, lsl #6
    205c:	0000210d 	andeq	r2, r0, sp, lsl #2
    2060:	00160e00 	andseq	r0, r6, r0, lsl #28
    2064:	0b3a0e03 	bleq	e85878 <__ccfg+0xe658d0>
    2068:	0b39053b 	bleq	e4355c <__ccfg+0xe235b4>
    206c:	00001349 	andeq	r1, r0, r9, asr #6
    2070:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    2074:	0013010c 	andseq	r0, r3, ip, lsl #2
    2078:	00051000 	andeq	r1, r5, r0
    207c:	00001349 	andeq	r1, r0, r9, asr #6
    2080:	03003411 	movweq	r3, #1041	; 0x411
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
    2088:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    208c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2090:	1200000c 	andne	r0, r0, #12
    2094:	0b0b0113 	bleq	2c24e8 <__ccfg+0x2a2540>
    2098:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    209c:	13010b39 	movwne	r0, #6969	; 0x1b39
    20a0:	0d130000 	ldceq	0, cr0, [r3, #-0]
    20a4:	3a0e0300 	bcc	382cac <__ccfg+0x362d04>
    20a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20ac:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    20b0:	1400000b 	strne	r0, [r0], #-11
    20b4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    20b8:	0b3a0b0b 	bleq	e84cec <__ccfg+0xe64d44>
    20bc:	0b39053b 	bleq	e435b0 <__ccfg+0xe23608>
    20c0:	00001301 	andeq	r1, r0, r1, lsl #6
    20c4:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    20c8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    20cc:	00341600 	eorseq	r1, r4, r0, lsl #12
    20d0:	0b3a0e03 	bleq	e858e4 <__ccfg+0xe6593c>
    20d4:	0b390b3b 	bleq	e44dc8 <__ccfg+0xe24e20>
    20d8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1fbc <NOROM_SetupTrimDevice+0x14>
    20dc:	00000a02 	andeq	r0, r0, r2, lsl #20
    20e0:	3f012e17 	svccc	0x00012e17
    20e4:	3a0e030c 	bcc	382d1c <__ccfg+0x362d74>
    20e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20ec:	110c270b 	tstne	ip, fp, lsl #14
    20f0:	40011201 	andmi	r1, r1, r1, lsl #4
    20f4:	1800000a 	stmdane	r0, {r1, r3}
    20f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    20fc:	0b3b0b3a 	bleq	ec4dec <__ccfg+0xea4e44>
    2100:	13490b39 	movtne	r0, #39737	; 0x9b39
    2104:	00000602 	andeq	r0, r0, r2, lsl #12
    2108:	03003419 	movweq	r3, #1049	; 0x419
    210c:	3b0b3a0e 	blcc	2d094c <__ccfg+0x2b09a4>
    2110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2114:	00060213 	andeq	r0, r6, r3, lsl r2
    2118:	010b1a00 	tsteq	fp, r0, lsl #20
    211c:	00000655 	andeq	r0, r0, r5, asr r6
    2120:	0300341b 	movweq	r3, #1051	; 0x41b
    2124:	3b0b3a08 	blcc	2d094c <__ccfg+0x2b09a4>
    2128:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    212c:	000a0213 	andeq	r0, sl, r3, lsl r2
    2130:	11010000 	mrsne	r0, (UNDEF: 1)
    2134:	130e2501 	movwne	r2, #58625	; 0xe501
    2138:	1b0e030b 	blne	382d6c <__ccfg+0x362dc4>
    213c:	1106550e 	tstne	r6, lr, lsl #10
    2140:	00061001 	andeq	r1, r6, r1
    2144:	00240200 	eoreq	r0, r4, r0, lsl #4
    2148:	0b3e0b0b 	bleq	f84d7c <__ccfg+0xf64dd4>
    214c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2150:	03001603 	movweq	r1, #1539	; 0x603
    2154:	3b0b3a0e 	blcc	2d0994 <__ccfg+0x2b09ec>
    2158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    215c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2160:	0b0b0024 	bleq	2c21f8 <__ccfg+0x2a2250>
    2164:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2168:	13050000 	movwne	r0, #20480	; 0x5000
    216c:	0b0e0301 	bleq	382d78 <__ccfg+0x362dd0>
    2170:	3b0b3a0b 	blcc	2d09a4 <__ccfg+0x2b09fc>
    2174:	0013010b 	andseq	r0, r3, fp, lsl #2
    2178:	000d0600 	andeq	r0, sp, r0, lsl #12
    217c:	13490e03 	movtne	r0, #40451	; 0x9e03
    2180:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2184:	0f070000 	svceq	0x00070000
    2188:	000b0b00 	andeq	r0, fp, r0, lsl #22
    218c:	00260800 	eoreq	r0, r6, r0, lsl #16
    2190:	00001349 	andeq	r1, r0, r9, asr #6
    2194:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2198:	0a000013 	beq	21ec <NOROM_SetupGetTrimForAmpcompTh2+0x4>
    219c:	0b0b000f 	bleq	2c21e0 <__ccfg+0x2a2238>
    21a0:	00001349 	andeq	r1, r0, r9, asr #6
    21a4:	0b01130b 	bleq	46dd8 <__ccfg+0x26e30>
    21a8:	3b0b3a0b 	blcc	2d09dc <__ccfg+0x2b0a34>
    21ac:	010b390b 	tsteq	fp, fp, lsl #18
    21b0:	0c000013 	stceq	0, cr0, [r0], {19}
    21b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    21b8:	0b3b0b3a 	bleq	ec4ea8 <__ccfg+0xea4f00>
    21bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    21c0:	0b0d0b0b 	bleq	344df4 <__ccfg+0x324e4c>
    21c4:	0b380b0c 	bleq	e04dfc <__ccfg+0xde4e54>
    21c8:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    21cc:	3a0e0300 	bcc	382dd4 <__ccfg+0x362e2c>
    21d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    21d8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    21dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21e0:	0b3b0b3a 	bleq	ec4ed0 <__ccfg+0xea4f28>
    21e4:	13490b39 	movtne	r0, #39737	; 0x9b39
    21e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    21ec:	010f0000 	mrseq	r0, CPSR
    21f0:	01134901 	tsteq	r3, r1, lsl #18
    21f4:	10000013 	andne	r0, r0, r3, lsl r0
    21f8:	00000021 	andeq	r0, r0, r1, lsr #32
    21fc:	03001611 	movweq	r1, #1553	; 0x611
    2200:	3b0b3a0e 	blcc	2d0a40 <__ccfg+0x2b0a98>
    2204:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2208:	12000013 	andne	r0, r0, #19
    220c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2210:	00001301 	andeq	r1, r0, r1, lsl #6
    2214:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2218:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    221c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2224:	13490b39 	movtne	r0, #39737	; 0x9b39
    2228:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    222c:	13150000 	tstne	r5, #0
    2230:	3a0b0b01 	bcc	2c4e3c <__ccfg+0x2a4e94>
    2234:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2238:	0013010b 	andseq	r0, r3, fp, lsl #2
    223c:	000d1600 	andeq	r1, sp, r0, lsl #12
    2240:	0b3a0e03 	bleq	e85a54 <__ccfg+0xe65aac>
    2244:	0b39053b 	bleq	e43738 <__ccfg+0xe23790>
    2248:	0b381349 	bleq	e06f74 <__ccfg+0xde6fcc>
    224c:	13170000 	tstne	r7, #0
    2250:	0b0e0301 	bleq	382e5c <__ccfg+0x362eb4>
    2254:	3b0b3a0b 	blcc	2d0a88 <__ccfg+0x2b0ae0>
    2258:	010b3905 	tsteq	fp, r5, lsl #18
    225c:	18000013 	stmdane	r0, {r0, r1, r4}
    2260:	13490021 	movtne	r0, #36897	; 0x9021
    2264:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2268:	3f012e19 	svccc	0x00012e19
    226c:	3a0e030c 	bcc	382ea4 <__ccfg+0x362efc>
    2270:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2274:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2278:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    227c:	010a4001 	tsteq	sl, r1
    2280:	1a000013 	bne	22d4 <NOROM_SetupGetTrimForXoscHfFastStart>
    2284:	08030005 	stmdaeq	r3, {r0, r2}
    2288:	0b3b0b3a 	bleq	ec4f78 <__ccfg+0xea4fd0>
    228c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2290:	00000602 	andeq	r0, r0, r2, lsl #12
    2294:	0300341b 	movweq	r3, #1051	; 0x41b
    2298:	3b0b3a08 	blcc	2d0ac0 <__ccfg+0x2b0b18>
    229c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    22a0:	00060213 	andeq	r0, r6, r3, lsl r2
    22a4:	000a1c00 	andeq	r1, sl, r0, lsl #24
    22a8:	0b3a0e03 	bleq	e85abc <__ccfg+0xe65b14>
    22ac:	0b390b3b 	bleq	e44fa0 <__ccfg+0xe24ff8>
    22b0:	00000111 	andeq	r0, r0, r1, lsl r1
    22b4:	3f012e1d 	svccc	0x00012e1d
    22b8:	3a0e030c 	bcc	382ef0 <__ccfg+0x362f48>
    22bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22c0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    22c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    22c8:	000a4001 	andeq	r4, sl, r1
    22cc:	00341e00 	eorseq	r1, r4, r0, lsl #28
    22d0:	0b3a0803 	bleq	e842e4 <__ccfg+0xe6433c>
    22d4:	0b390b3b 	bleq	e44fc8 <__ccfg+0xe25020>
    22d8:	0a021349 	beq	87004 <__ccfg+0x6705c>
    22dc:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    22e0:	3a0e0301 	bcc	382eec <__ccfg+0x362f44>
    22e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22e8:	110c270b 	tstne	ip, fp, lsl #14
    22ec:	40011201 	andmi	r1, r1, r1, lsl #4
    22f0:	010a480a 	tsteq	sl, sl, lsl #16
    22f4:	20000013 	andcs	r0, r0, r3, lsl r0
    22f8:	08030005 	stmdaeq	r3, {r0, r2}
    22fc:	0b3b0b3a 	bleq	ec4fec <__ccfg+0xea5044>
    2300:	13490b39 	movtne	r0, #39737	; 0x9b39
    2304:	00000a02 	andeq	r0, r0, r2, lsl #20
    2308:	03000a21 	movweq	r0, #2593	; 0xa21
    230c:	3b0b3a08 	blcc	2d0b34 <__ccfg+0x2b0b8c>
    2310:	110b390b 	tstne	fp, fp, lsl #18
    2314:	22000001 	andcs	r0, r0, #1
    2318:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    231c:	00001301 	andeq	r1, r0, r1, lsl #6
    2320:	03003423 	movweq	r3, #1059	; 0x423
    2324:	3b0b3a08 	blcc	2d0b4c <__ccfg+0x2b0ba4>
    2328:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    232c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    2330:	0111010b 	tsteq	r1, fp, lsl #2
    2334:	13010112 	movwne	r0, #4370	; 0x1112
    2338:	0b250000 	bleq	942340 <__ccfg+0x922398>
    233c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2340:	00000001 	andeq	r0, r0, r1
    2344:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2348:	030b130e 	movweq	r1, #45838	; 0xb30e
    234c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2350:	10011106 	andne	r1, r1, r6, lsl #2
    2354:	02000006 	andeq	r0, r0, #6
    2358:	0b0b0024 	bleq	2c23f0 <__ccfg+0x2a2448>
    235c:	0e030b3e 	vmoveq.16	d3[0], r0
    2360:	16030000 	strne	r0, [r3], -r0
    2364:	3a0e0300 	bcc	382f6c <__ccfg+0x362fc4>
    2368:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    236c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2370:	00240400 	eoreq	r0, r4, r0, lsl #8
    2374:	0b3e0b0b 	bleq	f84fa8 <__ccfg+0xf65000>
    2378:	00000803 	andeq	r0, r0, r3, lsl #16
    237c:	03011305 	movweq	r1, #4869	; 0x1305
    2380:	3a0b0b0e 	bcc	2c4fc0 <__ccfg+0x2a5018>
    2384:	010b3b0b 	tsteq	fp, fp, lsl #22
    2388:	06000013 			; <UNDEFINED> instruction: 0x06000013
    238c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2390:	0b381349 	bleq	e070bc <__ccfg+0xde7114>
    2394:	00000c34 	andeq	r0, r0, r4, lsr ip
    2398:	0b000f07 	bleq	5fbc <__exidx_end+0x3348>
    239c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    23a0:	13490026 	movtne	r0, #36902	; 0x9026
    23a4:	35090000 	strcc	r0, [r9, #-0]
    23a8:	00134900 	andseq	r4, r3, r0, lsl #18
    23ac:	000f0a00 	andeq	r0, pc, r0, lsl #20
    23b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    23b4:	130b0000 	movwne	r0, #45056	; 0xb000
    23b8:	3a0b0b01 	bcc	2c4fc4 <__ccfg+0x2a501c>
    23bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    23c4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    23c8:	0b3a0e03 	bleq	e85bdc <__ccfg+0xe65c34>
    23cc:	0b390b3b 	bleq	e450c0 <__ccfg+0xe25118>
    23d0:	0b0b1349 	bleq	2c70fc <__ccfg+0x2a7154>
    23d4:	0b0c0b0d 	bleq	305010 <__ccfg+0x2e5068>
    23d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    23dc:	03000d0d 	movweq	r0, #3341	; 0xd0d
    23e0:	3b0b3a0e 	blcc	2d0c20 <__ccfg+0x2b0c78>
    23e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    23e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    23ec:	00340e00 	eorseq	r0, r4, r0, lsl #28
    23f0:	0b3a0e03 	bleq	e85c04 <__ccfg+0xe65c5c>
    23f4:	0b390b3b 	bleq	e450e8 <__ccfg+0xe25140>
    23f8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 22dc <NOROM_SetupGetTrimForXoscHfFastStart+0x8>
    23fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2400:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2404:	00130113 	andseq	r0, r3, r3, lsl r1
    2408:	00211000 	eoreq	r1, r1, r0
    240c:	16110000 	ldrne	r0, [r1], -r0
    2410:	3a0e0300 	bcc	383018 <__ccfg+0x363070>
    2414:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2418:	0013490b 	andseq	r4, r3, fp, lsl #18
    241c:	01151200 	tsteq	r5, r0, lsl #4
    2420:	13010c27 	movwne	r0, #7207	; 0x1c27
    2424:	05130000 	ldreq	r0, [r3, #-0]
    2428:	00134900 	andseq	r4, r3, r0, lsl #18
    242c:	00341400 	eorseq	r1, r4, r0, lsl #8
    2430:	0b3a0e03 	bleq	e85c44 <__ccfg+0xe65c9c>
    2434:	0b39053b 	bleq	e43928 <__ccfg+0xe23980>
    2438:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 231c <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0xc>
    243c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2440:	0b011315 	bleq	4709c <__ccfg+0x270f4>
    2444:	3b0b3a0b 	blcc	2d0c78 <__ccfg+0x2b0cd0>
    2448:	010b3905 	tsteq	fp, r5, lsl #18
    244c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2450:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2454:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2458:	13490b39 	movtne	r0, #39737	; 0x9b39
    245c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2460:	03011317 	movweq	r1, #4887	; 0x1317
    2464:	3a0b0b0e 	bcc	2c50a4 <__ccfg+0x2a50fc>
    2468:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    246c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2470:	00211800 	eoreq	r1, r1, r0, lsl #16
    2474:	0b2f1349 	bleq	bc71a0 <__ccfg+0xba71f8>
    2478:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    247c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2480:	3b0b3a0e 	blcc	2d0cc0 <__ccfg+0x2b0d18>
    2484:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2488:	1113490c 	tstne	r3, ip, lsl #18
    248c:	40011201 	andmi	r1, r1, r1, lsl #4
    2490:	0013010a 	andseq	r0, r3, sl, lsl #2
    2494:	00051a00 	andeq	r1, r5, r0, lsl #20
    2498:	0b3a0803 	bleq	e844ac <__ccfg+0xe64504>
    249c:	0b390b3b 	bleq	e45190 <__ccfg+0xe251e8>
    24a0:	06021349 	streq	r1, [r2], -r9, asr #6
    24a4:	341b0000 	ldrcc	r0, [fp], #-0
    24a8:	3a080300 	bcc	2030b0 <__ccfg+0x1e3108>
    24ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    24b4:	1c000006 	stcne	0, cr0, [r0], {6}
    24b8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    24bc:	0b3b0b3a 	bleq	ec51ac <__ccfg+0xea5204>
    24c0:	00000b39 	andeq	r0, r0, r9, lsr fp
    24c4:	11010b1d 	tstne	r1, sp, lsl fp
    24c8:	01011201 	tsteq	r1, r1, lsl #4
    24cc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    24d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    24d4:	0b3b0b3a 	bleq	ec51c4 <__ccfg+0xea521c>
    24d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    24dc:	00000a02 	andeq	r0, r0, r2, lsl #20
    24e0:	55010b1f 	strpl	r0, [r1, #-2847]	; 0xfffff4e1
    24e4:	00130106 	andseq	r0, r3, r6, lsl #2
    24e8:	00342000 	eorseq	r2, r4, r0
    24ec:	0b3a0803 	bleq	e84500 <__ccfg+0xe64558>
    24f0:	0b390b3b 	bleq	e451e4 <__ccfg+0xe2523c>
    24f4:	00001349 	andeq	r1, r0, r9, asr #6
    24f8:	55010b21 	strpl	r0, [r1, #-2849]	; 0xfffff4df
    24fc:	00000006 	andeq	r0, r0, r6
    2500:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2504:	030b130e 	movweq	r1, #45838	; 0xb30e
    2508:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    250c:	10011117 	andne	r1, r1, r7, lsl r1
    2510:	02000017 	andeq	r0, r0, #23
    2514:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2518:	0b3b0b3a 	bleq	ec5208 <__ccfg+0xea5260>
    251c:	00001349 	andeq	r1, r0, r9, asr #6
    2520:	0b002403 	bleq	b534 <__exidx_end+0x88c0>
    2524:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2528:	0400000e 	streq	r0, [r0], #-14
    252c:	0b0b0024 	bleq	2c25c4 <__ccfg+0x2a261c>
    2530:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2534:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2538:	03193f01 	tsteq	r9, #1, 30
    253c:	3b0b3a0e 	blcc	2d0d7c <__ccfg+0x2b0dd4>
    2540:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2544:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2548:	97184006 	ldrls	r4, [r8, -r6]
    254c:	00001942 	andeq	r1, r0, r2, asr #18
    2550:	03003406 	movweq	r3, #1030	; 0x406
    2554:	3b0b3a0e 	blcc	2d0d94 <__ccfg+0x2b0dec>
    2558:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    255c:	07000017 	smladeq	r0, r7, r0, r0
    2560:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2564:	0b3b0b3a 	bleq	ec5254 <__ccfg+0xea52ac>
    2568:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    256c:	01000000 	mrseq	r0, (UNDEF: 0)
    2570:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2574:	0e030b13 	vmoveq.32	d3[0], r0
    2578:	17550e1b 	smmlane	r5, fp, lr, r0
    257c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2580:	24020000 	strcs	r0, [r2], #-0
    2584:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2588:	000e030b 	andeq	r0, lr, fp, lsl #6
    258c:	00160300 	andseq	r0, r6, r0, lsl #6
    2590:	0b3a0e03 	bleq	e85da4 <__ccfg+0xe65dfc>
    2594:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2598:	24040000 	strcs	r0, [r4], #-0
    259c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    25a0:	0008030b 	andeq	r0, r8, fp, lsl #6
    25a4:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    25a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    25ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    25b0:	13491927 	movtne	r1, #39207	; 0x9927
    25b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    25b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    25bc:	00130119 	andseq	r0, r3, r9, lsl r1
    25c0:	00340600 	eorseq	r0, r4, r0, lsl #12
    25c4:	0b3a0e03 	bleq	e85dd8 <__ccfg+0xe65e30>
    25c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25cc:	00001702 	andeq	r1, r0, r2, lsl #14
    25d0:	03003407 	movweq	r3, #1031	; 0x407
    25d4:	3b0b3a0e 	blcc	2d0e14 <__ccfg+0x2b0e6c>
    25d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    25dc:	08000018 	stmdaeq	r0, {r3, r4}
    25e0:	0b0b0117 	bleq	2c2a44 <__ccfg+0x2a2a9c>
    25e4:	0b3b0b3a 	bleq	ec52d4 <__ccfg+0xea532c>
    25e8:	00001301 	andeq	r1, r0, r1, lsl #6
    25ec:	03000d09 	movweq	r0, #3337	; 0xd09
    25f0:	3b0b3a0e 	blcc	2d0e30 <__ccfg+0x2b0e88>
    25f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    25f8:	00340a00 	eorseq	r0, r4, r0, lsl #20
    25fc:	0b3a0e03 	bleq	e85e10 <__ccfg+0xe65e68>
    2600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2604:	010b0000 	mrseq	r0, (UNDEF: 11)
    2608:	01134901 	tsteq	r3, r1, lsl #18
    260c:	0c000013 	stceq	0, cr0, [r0], {19}
    2610:	13490021 	movtne	r0, #36897	; 0x9021
    2614:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2618:	01110100 	tsteq	r1, r0, lsl #2
    261c:	0b130e25 	bleq	4c5eb8 <__ccfg+0x4a5f10>
    2620:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2624:	01111755 	tsteq	r1, r5, asr r7
    2628:	00001710 	andeq	r1, r0, r0, lsl r7
    262c:	0b002402 	bleq	b63c <__exidx_end+0x89c8>
    2630:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2634:	0300000e 	movweq	r0, #14
    2638:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    263c:	0b3b0b3a 	bleq	ec532c <__ccfg+0xea5384>
    2640:	00001349 	andeq	r1, r0, r9, asr #6
    2644:	0b002404 	bleq	b65c <__exidx_end+0x89e8>
    2648:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    264c:	05000008 	streq	r0, [r0, #-8]
    2650:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2654:	0b3a0e03 	bleq	e85e68 <__ccfg+0xe65ec0>
    2658:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    265c:	01111349 	tsteq	r1, r9, asr #6
    2660:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2664:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2668:	06000013 			; <UNDEFINED> instruction: 0x06000013
    266c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2670:	0b3b0b3a 	bleq	ec5360 <__ccfg+0xea53b8>
    2674:	00001349 	andeq	r1, r0, r9, asr #6
    2678:	03003407 	movweq	r3, #1031	; 0x407
    267c:	3b0b3a0e 	blcc	2d0ebc <__ccfg+0x2b0f14>
    2680:	00134905 	andseq	r4, r3, r5, lsl #18
    2684:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2688:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    268c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2690:	13491927 	movtne	r1, #39207	; 0x9927
    2694:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2698:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    269c:	00130119 	andseq	r0, r3, r9, lsl r1
    26a0:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    26a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    26a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26ac:	01111927 	tsteq	r1, r7, lsr #18
    26b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    26b4:	00194297 	mulseq	r9, r7, r2
    26b8:	00050a00 	andeq	r0, r5, r0, lsl #20
    26bc:	0b3a0e03 	bleq	e85ed0 <__ccfg+0xe65f28>
    26c0:	1349053b 	movtne	r0, #38203	; 0x953b
    26c4:	00001802 	andeq	r1, r0, r2, lsl #16
    26c8:	01110100 	tsteq	r1, r0, lsl #2
    26cc:	0b130e25 	bleq	4c5f68 <__ccfg+0x4a5fc0>
    26d0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    26d4:	01111755 	tsteq	r1, r5, asr r7
    26d8:	00001710 	andeq	r1, r0, r0, lsl r7
    26dc:	0b002402 	bleq	b6ec <__exidx_end+0x8a78>
    26e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    26e4:	0300000e 	movweq	r0, #14
    26e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    26ec:	0b3b0b3a 	bleq	ec53dc <__ccfg+0xea5434>
    26f0:	00001349 	andeq	r1, r0, r9, asr #6
    26f4:	0b002404 	bleq	b70c <__exidx_end+0x8a98>
    26f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    26fc:	05000008 	streq	r0, [r0, #-8]
    2700:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    2704:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2708:	0b201927 	bleq	808bac <__ccfg+0x7e8c04>
    270c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2710:	3a0e0300 	bcc	383318 <__ccfg+0x363370>
    2714:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2718:	000b2019 	andeq	r2, fp, r9, lsl r0
    271c:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    2720:	0b3a0e03 	bleq	e85f34 <__ccfg+0xe65f8c>
    2724:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2728:	06120111 			; <UNDEFINED> instruction: 0x06120111
    272c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2730:	00130119 	andseq	r0, r3, r9, lsl r1
    2734:	00050800 	andeq	r0, r5, r0, lsl #16
    2738:	0b3a0e03 	bleq	e85f4c <__ccfg+0xe65fa4>
    273c:	1349053b 	movtne	r0, #38203	; 0x953b
    2740:	00001702 	andeq	r1, r0, r2, lsl #14
    2744:	03003409 	movweq	r3, #1033	; 0x409
    2748:	3b0b3a0e 	blcc	2d0f88 <__ccfg+0x2b0fe0>
    274c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2750:	0a000017 	beq	27b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x190>
    2754:	1331001d 	teqne	r1, #29
    2758:	06120111 			; <UNDEFINED> instruction: 0x06120111
    275c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2760:	0b0b0000 	bleq	2c2768 <__ccfg+0x2a27c0>
    2764:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2768:	00130106 	andseq	r0, r3, r6, lsl #2
    276c:	82890c00 	addhi	r0, r9, #0, 24
    2770:	01110101 	tsteq	r1, r1, lsl #2
    2774:	13011331 	movwne	r1, #4913	; 0x1331
    2778:	8a0d0000 	bhi	342780 <__ccfg+0x3227d8>
    277c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2780:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2784:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    2788:	11010182 	smlabbne	r1, r2, r1, r0
    278c:	0f000001 	svceq	0x00000001
    2790:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2794:	0b3a0e03 	bleq	e85fa8 <__ccfg+0xe66000>
    2798:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    279c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    27a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    27a4:	00130119 	andseq	r0, r3, r9, lsl r1
    27a8:	00341000 	eorseq	r1, r4, r0
    27ac:	0b3a0e03 	bleq	e85fc0 <__ccfg+0xe66018>
    27b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27b4:	00001702 	andeq	r1, r0, r2, lsl #14
    27b8:	01828911 	orreq	r8, r2, r1, lsl r9
    27bc:	31011100 	mrscc	r1, (UNDEF: 17)
    27c0:	12000013 	andne	r0, r0, #19
    27c4:	01018289 	smlabbeq	r1, r9, r2, r8
    27c8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    27cc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    27d0:	03193f01 	tsteq	r9, #1, 30
    27d4:	3b0b3a0e 	blcc	2d1014 <__ccfg+0x2b106c>
    27d8:	3c19270b 	ldccc	7, cr2, [r9], {11}
    27dc:	00130119 	andseq	r0, r3, r9, lsl r1
    27e0:	00051400 	andeq	r1, r5, r0, lsl #8
    27e4:	00001349 	andeq	r1, r0, r9, asr #6
    27e8:	3f002e15 	svccc	0x00002e15
    27ec:	3a0e0319 	bcc	383458 <__ccfg+0x3634b0>
    27f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27f4:	00193c19 	andseq	r3, r9, r9, lsl ip
    27f8:	002e1600 	eoreq	r1, lr, r0, lsl #12
    27fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2800:	0b3b0b3a 	bleq	ec54f0 <__ccfg+0xea5548>
    2804:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2808:	01000000 	mrseq	r0, (UNDEF: 0)
    280c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2810:	0e030b13 	vmoveq.32	d3[0], r0
    2814:	17550e1b 	smmlane	r5, fp, lr, r0
    2818:	17100111 			; <UNDEFINED> instruction: 0x17100111
    281c:	24020000 	strcs	r0, [r2], #-0
    2820:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2824:	000e030b 	andeq	r0, lr, fp, lsl #6
    2828:	00160300 	andseq	r0, r6, r0, lsl #6
    282c:	0b3a0e03 	bleq	e86040 <__ccfg+0xe66098>
    2830:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2834:	24040000 	strcs	r0, [r4], #-0
    2838:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    283c:	0008030b 	andeq	r0, r8, fp, lsl #6
    2840:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2844:	0b3a0e03 	bleq	e86058 <__ccfg+0xe660b0>
    2848:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    284c:	0b201349 	bleq	807578 <__ccfg+0x7e75d0>
    2850:	00001301 	andeq	r1, r0, r1, lsl #6
    2854:	03000506 	movweq	r0, #1286	; 0x506
    2858:	3b0b3a0e 	blcc	2d1098 <__ccfg+0x2b10f0>
    285c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2860:	00340700 	eorseq	r0, r4, r0, lsl #14
    2864:	0b3a0e03 	bleq	e86078 <__ccfg+0xe660d0>
    2868:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    286c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2870:	03193f01 	tsteq	r9, #1, 30
    2874:	3b0b3a0e 	blcc	2d10b4 <__ccfg+0x2b110c>
    2878:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    287c:	010b2013 	tsteq	fp, r3, lsl r0
    2880:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2884:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2888:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    288c:	00001349 	andeq	r1, r0, r9, asr #6
    2890:	0300340a 	movweq	r3, #1034	; 0x40a
    2894:	3b0b3a0e 	blcc	2d10d4 <__ccfg+0x2b112c>
    2898:	00134905 	andseq	r4, r3, r5, lsl #18
    289c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    28a0:	0b3a0e03 	bleq	e860b4 <__ccfg+0xe6610c>
    28a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    28a8:	00000b20 	andeq	r0, r0, r0, lsr #22
    28ac:	3f012e0c 	svccc	0x00012e0c
    28b0:	3a0e0319 	bcc	38351c <__ccfg+0x363574>
    28b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    28b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    28bc:	97184006 	ldrls	r4, [r8, -r6]
    28c0:	13011942 	movwne	r1, #6466	; 0x1942
    28c4:	050d0000 	streq	r0, [sp, #-0]
    28c8:	3a0e0300 	bcc	3834d0 <__ccfg+0x363528>
    28cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28d0:	00170213 	andseq	r0, r7, r3, lsl r2
    28d4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    28d8:	0b3a0e03 	bleq	e860ec <__ccfg+0xe66144>
    28dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28e0:	00001802 	andeq	r1, r0, r2, lsl #16
    28e4:	0300340f 	movweq	r3, #1039	; 0x40f
    28e8:	3b0b3a0e 	blcc	2d1128 <__ccfg+0x2b1180>
    28ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28f0:	10000017 	andne	r0, r0, r7, lsl r0
    28f4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28f8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    28fc:	0b590b58 	bleq	1645664 <__ccfg+0x16256bc>
    2900:	00001301 	andeq	r1, r0, r1, lsl #6
    2904:	31000511 	tstcc	r0, r1, lsl r5
    2908:	12000013 	andne	r0, r0, #19
    290c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2910:	34130000 	ldrcc	r0, [r3], #-0
    2914:	02133100 	andseq	r3, r3, #0, 2
    2918:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    291c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2920:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2924:	0b590b58 	bleq	164568c <__ccfg+0x16256e4>
    2928:	0b150000 	bleq	542930 <__ccfg+0x522988>
    292c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2930:	16000006 	strne	r0, [r0], -r6
    2934:	13310034 	teqne	r1, #52	; 0x34
    2938:	00001702 	andeq	r1, r0, r2, lsl #14
    293c:	3f012e17 	svccc	0x00012e17
    2940:	3a0e0319 	bcc	3835ac <__ccfg+0x363604>
    2944:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2948:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    294c:	97184006 	ldrls	r4, [r8, -r6]
    2950:	13011942 	movwne	r1, #6466	; 0x1942
    2954:	1d180000 	ldcne	0, cr0, [r8, #-0]
    2958:	11133101 	tstne	r3, r1, lsl #2
    295c:	58061201 	stmdapl	r6, {r0, r9, ip}
    2960:	010b590b 	tsteq	fp, fp, lsl #18
    2964:	19000013 	stmdbne	r0, {r0, r1, r4}
    2968:	01018289 	smlabbeq	r1, r9, r2, r8
    296c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2970:	8a1a0000 	bhi	682978 <__ccfg+0x6629d0>
    2974:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2978:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    297c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2980:	03193f01 	tsteq	r9, #1, 30
    2984:	3b0b3a0e 	blcc	2d11c4 <__ccfg+0x2b121c>
    2988:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    298c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2990:	97184006 	ldrls	r4, [r8, -r6]
    2994:	13011942 	movwne	r1, #6466	; 0x1942
    2998:	051c0000 	ldreq	r0, [ip, #-0]
    299c:	3a0e0300 	bcc	3835a4 <__ccfg+0x3635fc>
    29a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29a4:	00170213 	andseq	r0, r7, r3, lsl r2
    29a8:	00341d00 	eorseq	r1, r4, r0, lsl #26
    29ac:	0b3a0e03 	bleq	e861c0 <__ccfg+0xe66218>
    29b0:	1349053b 	movtne	r0, #38203	; 0x953b
    29b4:	00001702 	andeq	r1, r0, r2, lsl #14
    29b8:	31012e1e 	tstcc	r1, lr, lsl lr
    29bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    29c0:	97184006 	ldrls	r4, [r8, -r6]
    29c4:	13011942 	movwne	r1, #6466	; 0x1942
    29c8:	051f0000 	ldreq	r0, [pc, #-0]	; 29d0 <NOROM_OSCClockSourceSet+0x14>
    29cc:	02133100 	andseq	r3, r3, #0, 2
    29d0:	20000017 	andcs	r0, r0, r7, lsl r0
    29d4:	13310034 	teqne	r1, #52	; 0x34
    29d8:	1d210000 	stcne	0, cr0, [r1, #-0]
    29dc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    29e0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    29e4:	0105590b 	tsteq	r5, fp, lsl #18
    29e8:	22000013 	andcs	r0, r0, #19
    29ec:	01018289 	smlabbeq	r1, r9, r2, r8
    29f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    29f4:	00001301 	andeq	r1, r0, r1, lsl #6
    29f8:	01828923 	orreq	r8, r2, r3, lsr #18
    29fc:	31011100 	mrscc	r1, (UNDEF: 17)
    2a00:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    2a04:	01018289 	smlabbeq	r1, r9, r2, r8
    2a08:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    2a0c:	00130118 	andseq	r0, r3, r8, lsl r1
    2a10:	001d2500 	andseq	r2, sp, r0, lsl #10
    2a14:	01111331 	tsteq	r1, r1, lsr r3
    2a18:	0b580612 	bleq	1604268 <__ccfg+0x15e42c0>
    2a1c:	00000559 	andeq	r0, r0, r9, asr r5
    2a20:	01828926 	orreq	r8, r2, r6, lsr #18
    2a24:	01011101 	tsteq	r1, r1, lsl #2
    2a28:	27000013 	smladcs	r0, r3, r0, r0
    2a2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2a30:	0b3a0e03 	bleq	e86244 <__ccfg+0xe6629c>
    2a34:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a38:	1301193c 	movwne	r1, #6460	; 0x193c
    2a3c:	05280000 	streq	r0, [r8, #-0]!
    2a40:	00134900 	andseq	r4, r3, r0, lsl #18
    2a44:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    2a48:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a4c:	0b3b0b3a 	bleq	ec573c <__ccfg+0xea5794>
    2a50:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2a54:	00001301 	andeq	r1, r0, r1, lsl #6
    2a58:	3f012e2a 	svccc	0x00012e2a
    2a5c:	3a0e0319 	bcc	3836c8 <__ccfg+0x363720>
    2a60:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a64:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2a68:	00000019 	andeq	r0, r0, r9, lsl r0
    2a6c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2a70:	030b130e 	movweq	r1, #45838	; 0xb30e
    2a74:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2a78:	10011117 	andne	r1, r1, r7, lsl r1
    2a7c:	02000017 	andeq	r0, r0, #23
    2a80:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a84:	0b3b0b3a 	bleq	ec5774 <__ccfg+0xea57cc>
    2a88:	00001349 	andeq	r1, r0, r9, asr #6
    2a8c:	0b002403 	bleq	baa0 <__exidx_end+0x8e2c>
    2a90:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a94:	0400000e 	streq	r0, [r0], #-14
    2a98:	0b0b0024 	bleq	2c2b30 <__ccfg+0x2a2b88>
    2a9c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2aa0:	0f050000 	svceq	0x00050000
    2aa4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2aa8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2aac:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2ab0:	15070000 	strne	r0, [r7, #-0]
    2ab4:	01192701 	tsteq	r9, r1, lsl #14
    2ab8:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2abc:	13490005 	movtne	r0, #36869	; 0x9005
    2ac0:	15090000 	strne	r0, [r9, #-0]
    2ac4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2ac8:	00130113 	andseq	r0, r3, r3, lsl r1
    2acc:	00150a00 	andseq	r0, r5, r0, lsl #20
    2ad0:	13491927 	movtne	r1, #39207	; 0x9927
    2ad4:	130b0000 	movwne	r0, #45056	; 0xb000
    2ad8:	3a0b0b01 	bcc	2c56e4 <__ccfg+0x2a573c>
    2adc:	010b3b0b 	tsteq	fp, fp, lsl #22
    2ae0:	0c000013 	stceq	0, cr0, [r0], {19}
    2ae4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2ae8:	0b3b0b3a 	bleq	ec57d8 <__ccfg+0xea5830>
    2aec:	0b381349 	bleq	e07818 <__ccfg+0xde7870>
    2af0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    2af4:	3a0e0301 	bcc	383700 <__ccfg+0x363758>
    2af8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2afc:	010b2019 	tsteq	fp, r9, lsl r0
    2b00:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2b04:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2b08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2b0c:	00001349 	andeq	r1, r0, r9, asr #6
    2b10:	03002e0f 	movweq	r2, #3599	; 0xe0f
    2b14:	3b0b3a0e 	blcc	2d1354 <__ccfg+0x2b13ac>
    2b18:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2b1c:	000b2013 	andeq	r2, fp, r3, lsl r0
    2b20:	002e1000 	eoreq	r1, lr, r0
    2b24:	0b3a0e03 	bleq	e86338 <__ccfg+0xe66390>
    2b28:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2b2c:	00000b20 	andeq	r0, r0, r0, lsr #22
    2b30:	03012e11 	movweq	r2, #7697	; 0x1e11
    2b34:	3b0b3a0e 	blcc	2d1374 <__ccfg+0x2b13cc>
    2b38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2b3c:	010b2013 	tsteq	fp, r3, lsl r0
    2b40:	12000013 	andne	r0, r0, #19
    2b44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2b48:	0b3b0b3a 	bleq	ec5838 <__ccfg+0xea5890>
    2b4c:	00001349 	andeq	r1, r0, r9, asr #6
    2b50:	03003413 	movweq	r3, #1043	; 0x413
    2b54:	3b0b3a0e 	blcc	2d1394 <__ccfg+0x2b13ec>
    2b58:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b5c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2b60:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2b64:	0b3b0b3a 	bleq	ec5854 <__ccfg+0xea58ac>
    2b68:	01111927 	tsteq	r1, r7, lsr #18
    2b6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b70:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2b74:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2b78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b7c:	0b3b0b3a 	bleq	ec586c <__ccfg+0xea58c4>
    2b80:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b84:	34160000 	ldrcc	r0, [r6], #-0
    2b88:	3a0e0300 	bcc	383790 <__ccfg+0x3637e8>
    2b8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b90:	00051c13 	andeq	r1, r5, r3, lsl ip
    2b94:	011d1700 	tsteq	sp, r0, lsl #14
    2b98:	01521331 	cmpeq	r2, r1, lsr r3
    2b9c:	0b581755 	bleq	16088f8 <__ccfg+0x15e8950>
    2ba0:	13010b59 	movwne	r0, #7001	; 0x1b59
    2ba4:	05180000 	ldreq	r0, [r8, #-0]
    2ba8:	1c133100 	ldfnes	f3, [r3], {-0}
    2bac:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2bb0:	1331001d 	teqne	r1, #29
    2bb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2bb8:	0b590b58 	bleq	1645920 <__ccfg+0x1625978>
    2bbc:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2bc0:	11133101 	tstne	r3, r1, lsl #2
    2bc4:	58061201 	stmdapl	r6, {r0, r9, ip}
    2bc8:	010b590b 	tsteq	fp, fp, lsl #18
    2bcc:	1b000013 	blne	2c20 <port_confs+0x2c>
    2bd0:	00018289 	andeq	r8, r1, r9, lsl #5
    2bd4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2bd8:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    2bdc:	11010182 	smlabbne	r1, r2, r1, r0
    2be0:	00130101 	andseq	r0, r3, r1, lsl #2
    2be4:	828a1d00 	addhi	r1, sl, #0, 26
    2be8:	18020001 	stmdane	r2, {r0}
    2bec:	00184291 	mulseq	r8, r1, r2
    2bf0:	82891e00 	addhi	r1, r9, #0, 28
    2bf4:	01110101 	tsteq	r1, r1, lsl #2
    2bf8:	13011331 	movwne	r1, #4913	; 0x1331
    2bfc:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    2c00:	11010182 	smlabbne	r1, r2, r1, r0
    2c04:	20000001 	andcs	r0, r0, r1
    2c08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2c0c:	0b3a0e03 	bleq	e86420 <__ccfg+0xe66478>
    2c10:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2c14:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c18:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2c1c:	00130119 	andseq	r0, r3, r9, lsl r1
    2c20:	00052100 	andeq	r2, r5, r0, lsl #2
    2c24:	0b3a0e03 	bleq	e86438 <__ccfg+0xe66490>
    2c28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c2c:	00001702 	andeq	r1, r0, r2, lsl #14
    2c30:	03003422 	movweq	r3, #1058	; 0x422
    2c34:	3b0b3a0e 	blcc	2d1474 <__ccfg+0x2b14cc>
    2c38:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c3c:	23000018 	movwcs	r0, #24
    2c40:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c44:	0b3b0b3a 	bleq	ec5934 <__ccfg+0xea598c>
    2c48:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c4c:	34240000 	strtcc	r0, [r4], #-0
    2c50:	3a080300 	bcc	203858 <__ccfg+0x1e38b0>
    2c54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c58:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    2c5c:	0111010b 	tsteq	r1, fp, lsl #2
    2c60:	13010612 	movwne	r0, #5650	; 0x1612
    2c64:	34260000 	strtcc	r0, [r6], #-0
    2c68:	3a0e0300 	bcc	383870 <__ccfg+0x3638c8>
    2c6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c70:	00170213 	andseq	r0, r7, r3, lsl r2
    2c74:	011d2700 	tsteq	sp, r0, lsl #14
    2c78:	01111331 	tsteq	r1, r1, lsr r3
    2c7c:	0b580612 	bleq	16044cc <__ccfg+0x15e4524>
    2c80:	13010559 	movwne	r0, #5465	; 0x1559
    2c84:	05280000 	streq	r0, [r8, #-0]!
    2c88:	00133100 	andseq	r3, r3, r0, lsl #2
    2c8c:	010b2900 	tsteq	fp, r0, lsl #18
    2c90:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c94:	342a0000 	strtcc	r0, [sl], #-0
    2c98:	02133100 	andseq	r3, r3, #0, 2
    2c9c:	2b000017 	blcs	2d00 <__exidx_end+0x8c>
    2ca0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2ca4:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2ca8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2cac:	00001301 	andeq	r1, r0, r1, lsl #6
    2cb0:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    2cb4:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    2cb8:	13490026 	movtne	r0, #36902	; 0x9026
    2cbc:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    2cc0:	03193f00 	tsteq	r9, #0, 30
    2cc4:	3b0b3a0e 	blcc	2d1504 <__ccfg+0x2b155c>
    2cc8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2ccc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2cd0:	97184006 	ldrls	r4, [r8, -r6]
    2cd4:	00001942 	andeq	r1, r0, r2, asr #18
    2cd8:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    2cdc:	00130113 	andseq	r0, r3, r3, lsl r1
    2ce0:	00213000 	eoreq	r3, r1, r0
    2ce4:	0b2f1349 	bleq	bc7a10 <__ccfg+0xba7a68>
    2ce8:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    2cec:	03193f01 	tsteq	r9, #1, 30
    2cf0:	3b0b3a0e 	blcc	2d1530 <__ccfg+0x2b1588>
    2cf4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2cf8:	00130119 	andseq	r0, r3, r9, lsl r1
    2cfc:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    2d00:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d08:	13491927 	movtne	r1, #39207	; 0x9927
    2d0c:	1301193c 	movwne	r1, #6460	; 0x193c
    2d10:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    2d14:	03193f00 	tsteq	r9, #0, 30
    2d18:	3b0b3a0e 	blcc	2d1558 <__ccfg+0x2b15b0>
    2d1c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2d20:	00193c13 	andseq	r3, r9, r3, lsl ip
    2d24:	11010000 	mrsne	r0, (UNDEF: 1)
    2d28:	130e2501 	movwne	r2, #58625	; 0xe501
    2d2c:	1b0e030b 	blne	383960 <__ccfg+0x3639b8>
    2d30:	1117550e 	tstne	r7, lr, lsl #10
    2d34:	00171001 	andseq	r1, r7, r1
    2d38:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d3c:	0b3e0b0b 	bleq	f85970 <__ccfg+0xf659c8>
    2d40:	00000e03 	andeq	r0, r0, r3, lsl #28
    2d44:	03001603 	movweq	r1, #1539	; 0x603
    2d48:	3b0b3a0e 	blcc	2d1588 <__ccfg+0x2b15e0>
    2d4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d50:	00240400 	eoreq	r0, r4, r0, lsl #8
    2d54:	0b3e0b0b 	bleq	f85988 <__ccfg+0xf659e0>
    2d58:	00000803 	andeq	r0, r0, r3, lsl #16
    2d5c:	0b010405 	bleq	43d78 <__ccfg+0x23dd0>
    2d60:	3b0b3a0b 	blcc	2d1594 <__ccfg+0x2b15ec>
    2d64:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d68:	00280600 	eoreq	r0, r8, r0, lsl #12
    2d6c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2d70:	04070000 	streq	r0, [r7], #-0
    2d74:	3a0b0b01 	bcc	2c5980 <__ccfg+0x2a59d8>
    2d78:	01053b0b 	tsteq	r5, fp, lsl #22
    2d7c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2d80:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2d84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d88:	00001349 	andeq	r1, r0, r9, asr #6
    2d8c:	03002e09 	movweq	r2, #3593	; 0xe09
    2d90:	3b0b3a0e 	blcc	2d15d0 <__ccfg+0x2b1628>
    2d94:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d98:	000b2013 	andeq	r2, fp, r3, lsl r0
    2d9c:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    2da0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2da4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2da8:	13491927 	movtne	r1, #39207	; 0x9927
    2dac:	13010b20 	movwne	r0, #6944	; 0x1b20
    2db0:	340b0000 	strcc	r0, [fp], #-0
    2db4:	3a0e0300 	bcc	3839bc <__ccfg+0x363a14>
    2db8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dbc:	0c000013 	stceq	0, cr0, [r0], {19}
    2dc0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2dc4:	0b3a0e03 	bleq	e865d8 <__ccfg+0xe66630>
    2dc8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2dcc:	01111349 	tsteq	r1, r9, asr #6
    2dd0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2dd4:	00194297 	mulseq	r9, r7, r2
    2dd8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2ddc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2de0:	0b3b0b3a 	bleq	ec5ad0 <__ccfg+0xea5b28>
    2de4:	13491927 	movtne	r1, #39207	; 0x9927
    2de8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2df0:	00130119 	andseq	r0, r3, r9, lsl r1
    2df4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2df8:	0b3a0e03 	bleq	e8660c <__ccfg+0xe66664>
    2dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e00:	00001702 	andeq	r1, r0, r2, lsl #14
    2e04:	31012e0f 	tstcc	r1, pc, lsl #28
    2e08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e0c:	97184006 	ldrls	r4, [r8, -r6]
    2e10:	13011942 	movwne	r1, #6466	; 0x1942
    2e14:	34100000 	ldrcc	r0, [r0], #-0
    2e18:	02133100 	andseq	r3, r3, #0, 2
    2e1c:	11000017 	tstne	r0, r7, lsl r0
    2e20:	0111010b 	tsteq	r1, fp, lsl #2
    2e24:	00000612 	andeq	r0, r0, r2, lsl r6
    2e28:	31003412 	tstcc	r0, r2, lsl r4
    2e2c:	13000013 	movwne	r0, #19
    2e30:	1331001d 	teqne	r1, #29
    2e34:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e38:	0b590b58 	bleq	1645ba0 <__ccfg+0x1625bf8>
    2e3c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2e40:	03193f01 	tsteq	r9, #1, 30
    2e44:	3b0b3a0e 	blcc	2d1684 <__ccfg+0x2b16dc>
    2e48:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2e4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e50:	97184006 	ldrls	r4, [r8, -r6]
    2e54:	13011942 	movwne	r1, #6466	; 0x1942
    2e58:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    2e5c:	11000182 	smlabbne	r0, r2, r1, r0
    2e60:	00133101 	andseq	r3, r3, r1, lsl #2
    2e64:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    2e68:	0b3a0e03 	bleq	e8667c <__ccfg+0xe666d4>
    2e6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e70:	0b201349 	bleq	807b9c <__ccfg+0x7e7bf4>
    2e74:	00001301 	andeq	r1, r0, r1, lsl #6
    2e78:	03003417 	movweq	r3, #1047	; 0x417
    2e7c:	3b0b3a0e 	blcc	2d16bc <__ccfg+0x2b1714>
    2e80:	00134905 	andseq	r4, r3, r5, lsl #18
    2e84:	00341800 	eorseq	r1, r4, r0, lsl #16
    2e88:	0b3a0e03 	bleq	e8669c <__ccfg+0xe666f4>
    2e8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e90:	00001802 	andeq	r1, r0, r2, lsl #16
    2e94:	31001d19 	tstcc	r0, r9, lsl sp
    2e98:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2e9c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2ea0:	1a00000b 	bne	2ed4 <__exidx_end+0x260>
    2ea4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2ea8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2eac:	0b590b58 	bleq	1645c14 <__ccfg+0x1625c6c>
    2eb0:	00001301 	andeq	r1, r0, r1, lsl #6
    2eb4:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    2eb8:	1c000017 	stcne	0, cr0, [r0], {23}
    2ebc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ec0:	0b3a0e03 	bleq	e866d4 <__ccfg+0xe6672c>
    2ec4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ec8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2ecc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2ed0:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    2ed4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2ed8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2edc:	0b590b58 	bleq	1645c44 <__ccfg+0x1625c9c>
    2ee0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ee4:	31011d1e 	tstcc	r1, lr, lsl sp
    2ee8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2eec:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2ef0:	0000000b 	andeq	r0, r0, fp
    2ef4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2ef8:	030b130e 	movweq	r1, #45838	; 0xb30e
    2efc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2f00:	10011117 	andne	r1, r1, r7, lsl r1
    2f04:	02000017 	andeq	r0, r0, #23
    2f08:	0b0b0024 	bleq	2c2fa0 <__ccfg+0x2a2ff8>
    2f0c:	0e030b3e 	vmoveq.16	d3[0], r0
    2f10:	16030000 	strne	r0, [r3], -r0
    2f14:	3a0e0300 	bcc	383b1c <__ccfg+0x363b74>
    2f18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f1c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2f20:	0b0b0024 	bleq	2c2fb8 <__ccfg+0x2a3010>
    2f24:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2f28:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2f2c:	3a0e0301 	bcc	383b38 <__ccfg+0x363b90>
    2f30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2f34:	010b2019 	tsteq	fp, r9, lsl r0
    2f38:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2f3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f40:	0b3b0b3a 	bleq	ec5c30 <__ccfg+0xea5c88>
    2f44:	00001349 	andeq	r1, r0, r9, asr #6
    2f48:	03003407 	movweq	r3, #1031	; 0x407
    2f4c:	3b0b3a0e 	blcc	2d178c <__ccfg+0x2b17e4>
    2f50:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f54:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2f58:	0b3a0e03 	bleq	e8676c <__ccfg+0xe667c4>
    2f5c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f60:	0b201349 	bleq	807c8c <__ccfg+0x7e7ce4>
    2f64:	00001301 	andeq	r1, r0, r1, lsl #6
    2f68:	31012e09 	tstcc	r1, r9, lsl #28
    2f6c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2f70:	97184006 	ldrls	r4, [r8, -r6]
    2f74:	13011942 	movwne	r1, #6466	; 0x1942
    2f78:	050a0000 	streq	r0, [sl, #-0]
    2f7c:	02133100 	andseq	r3, r3, #0, 2
    2f80:	0b000017 	bleq	2fe4 <__exidx_end+0x370>
    2f84:	13310034 	teqne	r1, #52	; 0x34
    2f88:	00001702 	andeq	r1, r0, r2, lsl #14
    2f8c:	3100050c 	tstcc	r0, ip, lsl #10
    2f90:	000b1c13 	andeq	r1, fp, r3, lsl ip
    2f94:	82890d00 	addhi	r0, r9, #0, 26
    2f98:	01110001 	tsteq	r1, r1
    2f9c:	00001331 	andeq	r1, r0, r1, lsr r3
    2fa0:	0182890e 	orreq	r8, r2, lr, lsl #18
    2fa4:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2fa8:	13311942 	teqne	r1, #1081344	; 0x108000
    2fac:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2fb0:	03193f01 	tsteq	r9, #1, 30
    2fb4:	3b0b3a0e 	blcc	2d17f4 <__ccfg+0x2b184c>
    2fb8:	11192705 	tstne	r9, r5, lsl #14
    2fbc:	40061201 	andmi	r1, r6, r1, lsl #4
    2fc0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2fc4:	00001301 	andeq	r1, r0, r1, lsl #6
    2fc8:	03000510 	movweq	r0, #1296	; 0x510
    2fcc:	3b0b3a0e 	blcc	2d180c <__ccfg+0x2b1864>
    2fd0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2fd4:	11000017 	tstne	r0, r7, lsl r0
    2fd8:	01018289 	smlabbeq	r1, r9, r2, r8
    2fdc:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    2fe0:	00133119 	andseq	r3, r3, r9, lsl r1
    2fe4:	828a1200 	addhi	r1, sl, #0, 4
    2fe8:	18020001 	stmdane	r2, {r0}
    2fec:	00184291 	mulseq	r8, r1, r2
    2ff0:	00341300 	eorseq	r1, r4, r0, lsl #6
    2ff4:	0b3a0e03 	bleq	e86808 <__ccfg+0xe66860>
    2ff8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ffc:	00001702 	andeq	r1, r0, r2, lsl #14
    3000:	3f012e14 	svccc	0x00012e14
    3004:	3a0e0319 	bcc	383c70 <__ccfg+0x363cc8>
    3008:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    300c:	11134919 	tstne	r3, r9, lsl r9
    3010:	40061201 	andmi	r1, r6, r1, lsl #4
    3014:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3018:	00001301 	andeq	r1, r0, r1, lsl #6
    301c:	31011d15 	tstcc	r1, r5, lsl sp
    3020:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3024:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3028:	1600000b 	strne	r0, [r0], -fp
    302c:	0111010b 	tsteq	r1, fp, lsl #2
    3030:	00000612 	andeq	r0, r0, r2, lsl r6
    3034:	3f002e17 	svccc	0x00002e17
    3038:	3a0e0319 	bcc	383ca4 <__ccfg+0x363cfc>
    303c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3040:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3044:	00000019 	andeq	r0, r0, r9, lsl r0
    3048:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    304c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3050:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3054:	10011117 	andne	r1, r1, r7, lsl r1
    3058:	02000017 	andeq	r0, r0, #23
    305c:	0b0b0024 	bleq	2c30f4 <__ccfg+0x2a314c>
    3060:	0e030b3e 	vmoveq.16	d3[0], r0
    3064:	16030000 	strne	r0, [r3], -r0
    3068:	3a0e0300 	bcc	383c70 <__ccfg+0x363cc8>
    306c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3070:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3074:	0b0b0024 	bleq	2c310c <__ccfg+0x2a3164>
    3078:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    307c:	0f050000 	svceq	0x00050000
    3080:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3084:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3088:	19270015 	stmdbne	r7!, {r0, r2, r4}
    308c:	15070000 	strne	r0, [r7, #-0]
    3090:	01192701 	tsteq	r9, r1, lsl #14
    3094:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3098:	13490005 	movtne	r0, #36869	; 0x9005
    309c:	15090000 	strne	r0, [r9, #-0]
    30a0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    30a4:	00130113 	andseq	r0, r3, r3, lsl r1
    30a8:	00150a00 	andseq	r0, r5, r0, lsl #20
    30ac:	13491927 	movtne	r1, #39207	; 0x9927
    30b0:	130b0000 	movwne	r0, #45056	; 0xb000
    30b4:	3a0b0b01 	bcc	2c5cc0 <__ccfg+0x2a5d18>
    30b8:	010b3b0b 	tsteq	fp, fp, lsl #22
    30bc:	0c000013 	stceq	0, cr0, [r0], {19}
    30c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30c4:	0b3b0b3a 	bleq	ec5db4 <__ccfg+0xea5e0c>
    30c8:	0b381349 	bleq	e07df4 <__ccfg+0xde7e4c>
    30cc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    30d0:	03193f01 	tsteq	r9, #1, 30
    30d4:	3b0b3a0e 	blcc	2d1914 <__ccfg+0x2b196c>
    30d8:	2019270b 	andscs	r2, r9, fp, lsl #14
    30dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    30e0:	00050e00 	andeq	r0, r5, r0, lsl #28
    30e4:	0b3a0e03 	bleq	e868f8 <__ccfg+0xe66950>
    30e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30ec:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    30f0:	03193f01 	tsteq	r9, #1, 30
    30f4:	3b0b3a0e 	blcc	2d1934 <__ccfg+0x2b198c>
    30f8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    30fc:	010b2013 	tsteq	fp, r3, lsl r0
    3100:	10000013 	andne	r0, r0, r3, lsl r0
    3104:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3108:	0b3b0b3a 	bleq	ec5df8 <__ccfg+0xea5e50>
    310c:	00001349 	andeq	r1, r0, r9, asr #6
    3110:	31012e11 	tstcc	r1, r1, lsl lr
    3114:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3118:	97184006 	ldrls	r4, [r8, -r6]
    311c:	13011942 	movwne	r1, #6466	; 0x1942
    3120:	05120000 	ldreq	r0, [r2, #-0]
    3124:	02133100 	andseq	r3, r3, #0, 2
    3128:	13000017 	movwne	r0, #23
    312c:	0111010b 	tsteq	r1, fp, lsl #2
    3130:	13010612 	movwne	r0, #5650	; 0x1612
    3134:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3138:	11010182 	smlabbne	r1, r2, r1, r0
    313c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3140:	8a150000 	bhi	543148 <__ccfg+0x5231a0>
    3144:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3148:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    314c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3150:	11010182 	smlabbne	r1, r2, r1, r0
    3154:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3158:	00001301 	andeq	r1, r0, r1, lsl #6
    315c:	31003417 	tstcc	r0, r7, lsl r4
    3160:	00180213 	andseq	r0, r8, r3, lsl r2
    3164:	010b1800 	tsteq	fp, r0, lsl #16
    3168:	13011755 	movwne	r1, #5973	; 0x1755
    316c:	05190000 	ldreq	r0, [r9, #-0]
    3170:	1c133100 	ldfnes	f3, [r3], {-0}
    3174:	1a00000b 	bne	31a8 <__exidx_end+0x534>
    3178:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    317c:	341b0000 	ldrcc	r0, [fp], #-0
    3180:	00133100 	andseq	r3, r3, r0, lsl #2
    3184:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    3188:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    318c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3190:	13491927 	movtne	r1, #39207	; 0x9927
    3194:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3198:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    319c:	00130119 	andseq	r0, r3, r9, lsl r1
    31a0:	00051d00 	andeq	r1, r5, r0, lsl #26
    31a4:	0b3a0e03 	bleq	e869b8 <__ccfg+0xe66a10>
    31a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31ac:	00001702 	andeq	r1, r0, r2, lsl #14
    31b0:	0300341e 	movweq	r3, #1054	; 0x41e
    31b4:	3b0b3a0e 	blcc	2d19f4 <__ccfg+0x2b1a4c>
    31b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    31bc:	1f000017 	svcne	0x00000017
    31c0:	00018289 	andeq	r8, r1, r9, lsl #5
    31c4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    31c8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    31cc:	03193f01 	tsteq	r9, #1, 30
    31d0:	3b0b3a0e 	blcc	2d1a10 <__ccfg+0x2b1a68>
    31d4:	11192705 	tstne	r9, r5, lsl #14
    31d8:	40061201 	andmi	r1, r6, r1, lsl #4
    31dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    31e0:	00001301 	andeq	r1, r0, r1, lsl #6
    31e4:	01828921 	orreq	r8, r2, r1, lsr #18
    31e8:	31011101 	tstcc	r1, r1, lsl #2
    31ec:	00130113 	andseq	r0, r3, r3, lsl r1
    31f0:	002e2200 	eoreq	r2, lr, r0, lsl #4
    31f4:	0b3a0e03 	bleq	e86a08 <__ccfg+0xe66a60>
    31f8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31fc:	0b201349 	bleq	807f28 <__ccfg+0x7e7f80>
    3200:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    3204:	3a0e0300 	bcc	383e0c <__ccfg+0x363e64>
    3208:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    320c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3210:	00342400 	eorseq	r2, r4, r0, lsl #8
    3214:	0b3a0e03 	bleq	e86a28 <__ccfg+0xe66a80>
    3218:	1349053b 	movtne	r0, #38203	; 0x953b
    321c:	00001702 	andeq	r1, r0, r2, lsl #14
    3220:	31011d25 	tstcc	r1, r5, lsr #26
    3224:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3228:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    322c:	00130105 	andseq	r0, r3, r5, lsl #2
    3230:	00052600 	andeq	r2, r5, r0, lsl #12
    3234:	0b3a0e03 	bleq	e86a48 <__ccfg+0xe66aa0>
    3238:	1349053b 	movtne	r0, #38203	; 0x953b
    323c:	00001702 	andeq	r1, r0, r2, lsl #14
    3240:	03003427 	movweq	r3, #1063	; 0x427
    3244:	3b0b3a0e 	blcc	2d1a84 <__ccfg+0x2b1adc>
    3248:	02134905 	andseq	r4, r3, #81920	; 0x14000
    324c:	28000018 	stmdacs	r0, {r3, r4}
    3250:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3254:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3258:	17021349 	strne	r1, [r2, -r9, asr #6]
    325c:	34290000 	strtcc	r0, [r9], #-0
    3260:	3a0e0300 	bcc	383e68 <__ccfg+0x363ec0>
    3264:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3268:	00180213 	andseq	r0, r8, r3, lsl r2
    326c:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    3270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3274:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3278:	13491927 	movtne	r1, #39207	; 0x9927
    327c:	0000193c 	andeq	r1, r0, ip, lsr r9
    3280:	3f002e2b 	svccc	0x00002e2b
    3284:	3a0e0319 	bcc	383ef0 <__ccfg+0x363f48>
    3288:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    328c:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3290:	2c000019 	stccs	0, cr0, [r0], {25}
    3294:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3298:	0b3a0e03 	bleq	e86aac <__ccfg+0xe66b04>
    329c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    32a0:	0000193c 	andeq	r1, r0, ip, lsr r9
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000160 	andeq	r0, r0, r0, ror #2
       4:	00000177 	andeq	r0, r0, r7, ror r1
       8:	5a500001 	bpl	1400014 <__ccfg+0x13e006c>
       c:	5d000002 	stcpl	0, cr0, [r0, #-8]
      10:	01000002 	tsteq	r0, r2
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	01100000 	tsteq	r0, r0
      20:	01170000 	tsteq	r7, r0
      24:	00010000 	andeq	r0, r1, r0
      28:	00011750 	andeq	r1, r1, r0, asr r7
      2c:	00016000 	andeq	r6, r1, r0
      30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
      3c:	0000011c 	andeq	r0, r0, ip, lsl r1
			i = k;
      40:	00000124 	andeq	r0, r0, r4, lsr #2
				j->Next = k;
      44:	38530001 	ldmdacc	r3, {r0}^
      48:	60000001 	andvs	r0, r0, r1
}
      4c:	01000001 	tsteq	r0, r1
      50:	00005300 	andeq	r5, r0, r0, lsl #6
      54:	00000000 	andeq	r0, r0, r0
		release;
      58:	01180000 	tsteq	r8, r0
      5c:	01220000 			; <UNDEFINED> instruction: 0x01220000
      60:	00010000 	andeq	r0, r1, r0
      64:	00013850 	andeq	r3, r1, r0, asr r8
      68:	00015600 	andeq	r5, r1, r0, lsl #12
      6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      80:	00500001 	subseq	r0, r0, r1
      84:	00000000 	andeq	r0, r0, r0
      88:	01000000 	mrseq	r0, (UNDEF: 0)
      8c:	00005000 	andeq	r5, r0, r0
	descriptors [fd] = s;
      90:	00000000 	andeq	r0, r0, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	00000050 	andeq	r0, r0, r0, asr r0
	if (s == NULL)
      9c:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "tcv05");
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      b4:	00500001 	subseq	r0, r0, r1
      b8:	00000000 	andeq	r0, r0, r0
      bc:	02000000 	andeq	r0, r0, #0
      c0:	000c7100 	andeq	r7, ip, r0, lsl #2
      c4:	00000000 	andeq	r0, r0, r0
      c8:	0d000000 	stceq	0, cr0, [r0, #-0]
      cc:	00940300 	addseq	r0, r4, r0, lsl #6
      d0:	34062000 	strcc	r2, [r6], #-0
      d4:	22007424 	andcs	r7, r0, #36, 8	; 0x24000000
      d8:	00000c23 	andeq	r0, r0, r3, lsr #24
	...
      e8:	00010000 	andeq	r0, r1, r0
      ec:	00000050 	andeq	r0, r0, r0, asr r0
	...
			curr += 0x1000;
      fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			upto = EE_SIZE - 1;
     108:	00000910 	andeq	r0, r0, r0, lsl r9
     10c:	00000916 	andeq	r0, r0, r6, lsl r9
     110:	46560001 	ldrbmi	r0, [r6], -r1
     114:	4a000009 	bmi	140 <processSettingsInput+0x30>
     118:	01000009 	tsteq	r0, r9
     11c:	00005600 	andeq	r5, r0, r0, lsl #12
     120:	00000000 	andeq	r0, r0, r0
     124:	07fa0000 	ldrbeq	r0, [sl, r0]!
}
     128:	07fe0000 	ldrbeq	r0, [lr, r0]!
     12c:	00010000 	andeq	r0, r1, r0
     130:	00081452 	andeq	r1, r8, r2, asr r4
}
     134:	00082800 	andeq	r2, r8, r0, lsl #16
        if(settingsInput[i] == ' ') {
     138:	52000100 	andpl	r0, r0, #0, 2
	...
            numbers[numbersIndex] = number;
     144:	00000802 	andeq	r0, r0, r2, lsl #16
            numbersIndex++;
     148:	00000808 	andeq	r0, r0, r8, lsl #16
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	00530001 	subseq	r0, r3, r1
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     150:	00000000 	andeq	r0, r0, r0
            return 1;
     154:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     158:	c2000007 	andgt	r0, r0, #7
     15c:	01000007 	tsteq	r0, r7
fsm root {
     160:	00005300 	andeq	r5, r0, r0, lsl #6
     164:	00000000 	andeq	r0, r0, r0
     168:	07b80000 	ldreq	r0, [r8, r0]!
     16c:	07be0000 	ldreq	r0, [lr, r0]!
     170:	00010000 	andeq	r0, r1, r0
        initCycles();
     174:	00000053 	andeq	r0, r0, r3, asr r0
        ser_outf(Initial, "Enter your name: ");
     178:	00000000 	andeq	r0, r0, r0
     17c:	00084e00 	andeq	r4, r8, r0, lsl #28
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	00085800 	andeq	r5, r8, r0, lsl #16
     184:	53000100 	movwpl	r0, #256	; 0x100
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
     190:	00000840 	andeq	r0, r0, r0, asr #16
        ser_inf(Get_Choice, "%c", &choice);
     194:	0000086a 	andeq	r0, r0, sl, ror #16
     198:	00520001 	subseq	r0, r2, r1
     19c:	00000000 	andeq	r0, r0, r0
        if (choice == 'A' || choice == 'a'){
     1a0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     1a4:	98000008 	stmdals	r0, {r3}
     1a8:	01000008 	tsteq	r0, r8
            proceed Adjust_Intervals;
     1ac:	00005300 	andeq	r5, r0, r0, lsl #6
            proceed Monitor;
     1b0:	00000000 	andeq	r0, r0, r0
        proceed Get_Choice;
     1b4:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	08b60000 	ldmeq	r6!, {}	; <UNPREDICTABLE>
     1bc:	00010000 	andeq	r0, r1, r0
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	00000050 	andeq	r0, r0, r0, asr r0
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	00072600 	andeq	r2, r7, r0, lsl #12
        processSettingsInput(settings);
     1cc:	00073000 	andeq	r3, r7, r0
        proceed Show_Menu;
     1d0:	53000100 	movwpl	r0, #256	; 0x100
	...
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1dc:	00000718 	andeq	r0, r0, r8, lsl r7
     1e0:	00000742 	andeq	r0, r0, r2, asr #14
     1e4:	00520001 	subseq	r0, r2, r1
     1e8:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
     1ec:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     1f0:	82000007 	andhi	r0, r0, #7
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	01000007 	tsteq	r0, r7
     1f8:	00005300 	andeq	r5, r0, r0, lsl #6
        displayCycle = YES;
     1fc:	00000000 	andeq	r0, r0, r0
        ser_inf(Await_Stop, "%c", ch);
     200:	076a0000 	strbeq	r0, [sl, -r0]!
     204:	07920000 	ldreq	r0, [r2, r0]
     208:	00010000 	andeq	r0, r1, r0
        proceed Await_Stop;
     20c:	00000052 	andeq	r0, r0, r2, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     210:	00000000 	andeq	r0, r0, r0
     214:	00028c00 	andeq	r8, r2, r0, lsl #24
        leds(1, 0);
     218:	00029000 	andeq	r9, r2, r0
     21c:	50000100 	andpl	r0, r0, r0, lsl #2
     220:	00000290 	muleq	r0, r0, r2
     224:	00000293 	muleq	r0, r3, r2
     228:	00510001 	subseq	r0, r1, r1
        leds(0, 0);
     22c:	00000000 	andeq	r0, r0, r0
     230:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     234:	da000005 	ble	250 <root+0xf0>
     238:	01000005 	tsteq	r0, r5
     23c:	00005000 	andeq	r5, r0, r0
     240:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'S' || choice == 's') {
     244:	05d80000 	ldrbeq	r0, [r8]
            proceed Stop;
     248:	05ee0000 	strbeq	r0, [lr, #0]!
        } else if (choice == 'V' || choice == 'v') {
     24c:	00010000 	andeq	r0, r1, r0
            proceed View_Settings;
     250:	0005ee51 	andeq	lr, r5, r1, asr lr
        } else if (choice == 'M' || choice == 'm') {
     254:	0005f200 	andeq	pc, r5, r0, lsl #4
            proceed Monitor;
     258:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     25c:	000005f8 	strdeq	r0, [r0], -r8
     260:	0000060e 	andeq	r0, r0, lr, lsl #12
     264:	0e550001 	cdpeq	0, 5, cr0, cr5, cr1, {0}
     268:	1c000006 	stcne	0, cr0, [r0], {6}
     26c:	01000006 	tsteq	r0, r6
     270:	061c5100 	ldreq	r5, [ip], -r0, lsl #2
     274:	064a0000 	strbeq	r0, [sl], -r0
     278:	00010000 	andeq	r0, r1, r0
     27c:	00065055 	andeq	r5, r6, r5, asr r0
     280:	00067800 	andeq	r7, r6, r0, lsl #16
     284:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     288:	00000678 	andeq	r0, r0, r8, ror r6
static void devinit_uart (int devnum) {
     28c:	00000686 	andeq	r0, r0, r6, lsl #13
	adddevfunc (ioreq_uart_a, devnum);
     290:	86510001 	ldrbhi	r0, [r1], -r1
     294:	90000006 	andls	r0, r0, r6
void udelay (volatile word n) {
     298:	01000006 	tsteq	r0, r6
     29c:	06905500 	ldreq	r5, [r0], r0, lsl #10
	while (n) {
     2a0:	069b0000 	ldreq	r0, [fp], r0
     2a4:	00010000 	andeq	r0, r1, r0
}
     2a8:	00069b51 	andeq	r9, r6, r1, asr fp
	while (n--);
     2ac:	00069e00 	andeq	r9, r6, r0, lsl #28
     2b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     2b4:	0000069e 	muleq	r0, lr, r6
		n--;
     2b8:	000006a4 	andeq	r0, r0, r4, lsr #13
     2bc:	a4510001 	ldrbge	r0, [r1], #-1
     2c0:	b6000006 	strlt	r0, [r0], -r6
void mdelay (volatile word n) {
     2c4:	01000006 	tsteq	r0, r6
     2c8:	06b65500 	ldrteq	r5, [r6], r0, lsl #10
	while (n) {
     2cc:	06c80000 	strbeq	r0, [r8], r0
     2d0:	00010000 	andeq	r0, r1, r0
}
     2d4:	0006c851 	andeq	ip, r6, r1, asr r8
		udelay (999);
     2d8:	0006e800 	andeq	lr, r6, r0, lsl #16
     2dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		n--;
     2e8:	000005d8 	ldrdeq	r0, [r0], -r8
     2ec:	000005ee 	andeq	r0, r0, lr, ror #11
void __pi_ondomain (lword d) {
     2f0:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
     2f4:	f4000005 	vst4.8	{d0-d3}, [r0], r5
		if (__pi_systat.effpdm > 1)
     2f8:	01000005 	tsteq	r0, r5
     2fc:	05f85600 	ldrbeq	r5, [r8, #1536]!	; 0x600
			__pi_systat.effpdm = 1;
     300:	06080000 	streq	r0, [r8], -r0
	PRCMPowerDomainOn (d);
     304:	00010000 	andeq	r0, r1, r0
     308:	00060e56 	andeq	r0, r6, r6, asr lr
     30c:	00061c00 	andeq	r1, r6, r0, lsl #24
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	52000100 	andpl	r0, r0, #0, 2
     314:	0000061c 	andeq	r0, r0, ip, lsl r6
     318:	0000064c 	andeq	r0, r0, ip, asr #12
	__pi_systat.ondmns |= d;
     31c:	50560001 	subspl	r0, r6, r1
     320:	78000006 	stmdavc	r0, {r1, r2}
}
     324:	01000006 	tsteq	r0, r6
     328:	06785600 	ldrbteq	r5, [r8], -r0, lsl #12
void __pi_syserror (word ec, const char *m) {
     32c:	06860000 	streq	r0, [r6], r0
	diag ("SYSERR: %x, %s", ec, m);
     330:	00010000 	andeq	r0, r1, r0
     334:	00068652 	andeq	r8, r6, r2, asr r6
  __ASM volatile ("cpsid i" : : : "memory");
     338:	00069000 	andeq	r9, r6, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	56000100 	strpl	r0, [r0], -r0, lsl #2
     340:	00000690 	muleq	r0, r0, r6
     344:	0000069b 	muleq	r0, fp, r6
		all_leds_blink;
     348:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
     34c:	a9000006 	stmdbge	r0, {r1, r2}
     350:	01000006 	tsteq	r0, r6
     354:	06a95200 	strteq	r5, [r9], r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	06b60000 	ldrteq	r0, [r6], r0
     35c:	00010000 	andeq	r0, r1, r0
     360:	0006b654 	andeq	fp, r6, r4, asr r6
     364:	0006e800 	andeq	lr, r6, r0, lsl #16
     368:	52000100 	andpl	r0, r0, #0, 2
	...
	while (1) {
     374:	0000054c 	andeq	r0, r0, ip, asr #10
     378:	0000055a 	andeq	r0, r0, sl, asr r5
     37c:	00500001 	subseq	r0, r0, r1
void tci_run_delay_timer () {
     380:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
     384:	4c000000 	stcmi	0, cr0, [r0], {-0}
     388:	5b000005 	blpl	3a4 <tci_run_delay_timer+0x24>
     38c:	01000005 	tsteq	r0, r5
     390:	00005100 	andeq	r5, r0, r0, lsl #2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	00000000 	andeq	r0, r0, r0
     398:	04fc0000 	ldrbteq	r0, [ip], #0
     39c:	05130000 	ldreq	r0, [r3, #-0]
     3a0:	00010000 	andeq	r0, r1, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	00053650 	andeq	r3, r5, r0, asr r6
	sti_tim;
     3a8:	00054c00 	andeq	r4, r5, r0, lsl #24
}
     3ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     3b8:	000003f2 	strdeq	r0, [r0], -r2
     3bc:	00000402 	andeq	r0, r0, r2, lsl #8
	cli_aux;
     3c0:	02520001 	subseq	r0, r2, #1
     3c4:	0a000004 	beq	3dc <tci_run_auxiliary_timer+0x1c>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	05000004 	streq	r0, [r0, #-4]
     3cc:	20040c00 	andcs	r0, r4, r0, lsl #24
     3d0:	04a44009 	strteq	r4, [r4], #9
     3d4:	04a80000 	strteq	r0, [r8], #0
	sti_aux;
     3d8:	00050000 	andeq	r0, r5, r0
}
     3dc:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     3e0:	0004a840 	andeq	sl, r4, r0, asr #16
     3e4:	0004aa00 	andeq	sl, r4, r0, lsl #20
void AONRTCIntHandler () {
     3e8:	52000100 	andpl	r0, r0, #0, 2
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	000004aa 	andeq	r0, r0, sl, lsr #9
     3f0:	000004ac 	andeq	r0, r0, ip, lsr #9
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	040c0005 	streq	r0, [ip], #-5
		if (__pi_utims [0] == 0)
     3f8:	00400920 	subeq	r0, r0, r0, lsr #18
     3fc:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [0])) {
     400:	0c000000 	stceq	0, cr0, [r0], {-0}
     404:	16000004 	strne	r0, [r0], -r4
			(*(__pi_utims [0]))--;
     408:	01000004 	tsteq	r0, r4
		if (__pi_utims [1] == 0)
     40c:	041a5200 	ldreq	r5, [sl], #-512	; 0xfffffe00
		if (*(__pi_utims [1])) {
     410:	04240000 	strteq	r0, [r4], #-0
			aux_timer_inactive = 0;
     414:	00010000 	andeq	r0, r1, r0
			(*(__pi_utims [1]))--;
     418:	00042852 	andeq	r2, r4, r2, asr r8
		if (__pi_utims [2] == 0)
     41c:	00043200 	andeq	r3, r4, r0, lsl #4
		if (*(__pi_utims [2])) {
     420:	52000100 	andpl	r0, r0, #0, 2
			(*(__pi_utims [2]))--;
     424:	00000436 	andeq	r0, r0, r6, lsr r4
		if (__pi_utims [3] != 0) {
     428:	00000442 	andeq	r0, r0, r2, asr #8
			if (*(__pi_utims [3])) {
     42c:	ce520001 	cdpgt	0, 5, cr0, cr2, cr1, {0}
				aux_timer_inactive = 0;
     430:	d2000004 	andle	r0, r0, #4
				(*(__pi_utims [3]))--;
     434:	01000004 	tsteq	r0, r4
	if (__pi_systat.ledsts) {
     438:	00005200 	andeq	r5, r0, r0, lsl #4
     43c:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
     440:	03920000 	orrseq	r0, r2, #0
     444:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
			if (__pi_systat.ledblk) {
     448:	00010000 	andeq	r0, r1, r0
     44c:	00000054 	andeq	r0, r0, r4, asr r0
     450:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	00032c00 	andeq	r2, r3, r0, lsl #24
     458:	00033400 	andeq	r3, r3, r0, lsl #8
				if (__pi_systat.ledsts & 0x2)
     45c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (__pi_systat.ledsts & 0x4)
     468:	0000032c 	andeq	r0, r0, ip, lsr #6
				__pi_systat.ledblk = 0;
     46c:	00000332 	andeq	r0, r0, r2, lsr r3
     470:	32510001 	subscc	r0, r1, #1
			if (__pi_systat.fstblk)
     474:	37000003 	strcc	r0, [r0, -r3]
     478:	01000003 	tsteq	r0, r3
				__pi_systat.ledblc = 200;
     47c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		__pi_new += setdel;
     48c:	00010000 	andeq	r0, r1, r0
		setdel = 0;
     490:	00000050 	andeq	r0, r0, r0, asr r0
	...
		RISE_N_SHINE;
     4a0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				if (__pi_systat.ledsts & 0x1)
     4ac:	00510001 	subseq	r0, r1, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	01000000 	mrseq	r0, (UNDEF: 0)
     4c0:	00005200 	andeq	r5, r0, r0, lsl #4
				if (__pi_systat.ledsts & 0x8)
     4c4:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 1;
     4c8:	00010000 	andeq	r0, r1, r0
     4cc:	00000054 	andeq	r0, r0, r4, asr r0
	...
			cli_aux;
     4dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     4e8:	00540001 	subseq	r0, r4, r1
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     4f4:	08000002 	stmdaeq	r0, {r1}
     4f8:	01000003 	tsteq	r0, r3
word tci_update_delay_ticks (Boolean force) {
     4fc:	03085000 	movweq	r5, #32768	; 0x8000
	cli_tim;
     500:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     504:	00010000 	andeq	r0, r1, r0
	if (setdel) {
     508:	00000054 	andeq	r0, r0, r4, asr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	0002c400 	andeq	ip, r2, r0, lsl #8
     514:	0002ca00 	andeq	ip, r2, r0, lsl #20
     518:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	00500001 	subseq	r0, r0, r1
     530:	00000000 	andeq	r0, r0, r0
}
     534:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
		sti_tim;
     538:	c6000012 			; <UNDEFINED> instruction: 0xc6000012
		return YES;
     53c:	02000012 	andeq	r0, r0, #18
     540:	c6709100 	ldrbtgt	r9, [r0], -r0, lsl #2
     544:	ee000012 	mcr	0, 0, r0, cr0, cr2, {0}
     548:	01000012 	tsteq	r0, r2, lsl r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	12f25400 	rscsne	r5, r2, #0, 8
	UARTDisable (UART0_BASE);
     550:	12fa0000 	rscsne	r0, sl, #0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	00010000 	andeq	r0, r1, r0
	UARTDisable (UART0_BASE);
     558:	00130854 	andseq	r0, r3, r4, asr r8
	UARTConfigSetExpClk (UART0_BASE,
     55c:	00135200 	andseq	r5, r3, r0, lsl #4
     560:	56000100 	strpl	r0, [r0], -r0, lsl #2
     564:	00001356 	andeq	r1, r0, r6, asr r3
     568:	000013ce 	andeq	r1, r0, lr, asr #7
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	00560001 	subseq	r0, r6, r1
     570:	00000000 	andeq	r0, r0, r0
     574:	12000000 	andne	r0, r0, #0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	50000013 	andpl	r0, r0, r3, lsl r0
     57c:	01000013 	tsteq	r0, r3, lsl r0
     580:	13565100 	cmpne	r6, #0, 2
	urates [0] = rate;
     584:	13680000 	cmnne	r8, #0
}
     588:	00010000 	andeq	r0, r1, r0
     58c:	00137451 	andseq	r7, r3, r1, asr r4
     590:	00137e00 	andseq	r7, r3, r0, lsl #28
     594:	51000100 	mrspl	r0, (UNDEF: 16)
     598:	00001390 	muleq	r0, r0, r3
     59c:	00001394 	muleq	r0, r4, r3
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	b4510001 	ldrblt	r0, [r1], #-1
     5a4:	b8000013 	stmdalt	r0, {r0, r1, r4}
     5a8:	01000013 	tsteq	r0, r3, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	00005100 	andeq	r5, r0, r0, lsl #2
     5b0:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	13120000 	tstne	r2, #0
     5b8:	13500000 	cmpne	r0, #0
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	00010000 	andeq	r0, r1, r0
     5c0:	00135655 	andseq	r5, r3, r5, asr r6
     5c4:	00137e00 	andseq	r7, r3, r0, lsl #28
     5c8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     5cc:	00001390 	muleq	r0, r0, r3
     5d0:	00001394 	muleq	r0, r4, r3
     5d4:	b4550001 	ldrblt	r0, [r5], #-1
	switch (operation) {
     5d8:	ce000013 	mcrgt	0, 0, r0, cr0, cr3, {0}
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	01000013 	tsteq	r0, r3, lsl r0
     5e0:	00005500 	andeq	r5, r0, r0, lsl #10
     5e4:	00000000 	andeq	r0, r0, r0
     5e8:	13840000 	orrne	r0, r4, #0
     5ec:	13900000 	orrsne	r0, r0, #0
				*buf++ = uart_a_read;
     5f0:	00010000 	andeq	r0, r1, r0
     5f4:	00139455 	andseq	r9, r3, r5, asr r4
			while (len && uart_a_char_available) {
     5f8:	0013ae00 	andseq	sl, r3, r0, lsl #28
     5fc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     600:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
			if (len != operation) {
     604:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
}
     608:	00550001 	subseq	r0, r5, r1
     60c:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     610:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
			if (uart_a_char_available) {
     614:	50000013 	andpl	r0, r0, r3, lsl r0
				*buf++ = uart_a_read;
     618:	01000013 	tsteq	r0, r3, lsl r0
			uart_a_disable_int;
     61c:	00005400 	andeq	r5, r0, r0, lsl #8
     620:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
     624:	137e0000 	cmnne	lr, #0
     628:	13900000 	orrsne	r0, r0, #0
				uart_a_enable_int;
     62c:	00010000 	andeq	r0, r1, r0
     630:	00139454 	andseq	r9, r3, r4, asr r4
				goto Redo_rx;
     634:	0013a800 	andseq	sl, r3, r0, lsl #16
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     63c:	000013a8 	andeq	r1, r0, r8, lsr #7
			return -2;
     640:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
     644:	00530001 	subseq	r0, r3, r1
				uart_a_write (*buf);
     648:	00000000 	andeq	r0, r0, r0
     64c:	c0000000 	andgt	r0, r0, r0
			while (len && uart_a_room_in_tx) {
     650:	ce000013 	mcrgt	0, 0, r0, cr0, cr3, {0}
     654:	01000013 	tsteq	r0, r3, lsl r0
     658:	00005100 	andeq	r5, r0, r0, lsl #2
			if (len != operation) {
     65c:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     660:	0df80000 	ldcleq	0, cr0, [r8]
     664:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
			if (uart_a_room_in_tx) {
     668:	00010000 	andeq	r0, r1, r0
     66c:	00000050 	andeq	r0, r0, r0, asr r0
	...
     67c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	00500001 	subseq	r0, r0, r1
	...
			uart_a_enable_int;
     698:	01000000 	mrseq	r0, (UNDEF: 0)
			return 0;
     69c:	00005100 	andeq	r5, r0, r0, lsl #2
			if (len == UART_CNTRL_SETRATE) {
     6a0:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	00010000 	andeq	r0, r1, r0
     6a8:	00000051 	andeq	r0, r0, r1, asr r0
	...
			if (len == UART_CNTRL_GETRATE) {
     6b8:	52000100 	andpl	r0, r0, #0, 2
	...
			syserror (ENOOPER, "uai");
     6c4:	00520001 	subseq	r0, r2, r1
	...
     6d4:	01000000 	mrseq	r0, (UNDEF: 0)
     6d8:	00005300 	andeq	r5, r0, r0, lsl #6
     6dc:	00000000 	andeq	r0, r0, r0
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     6ec:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	00500001 	subseq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	00000000 	andeq	r0, r0, r0
     708:	90000000 	andls	r0, r0, r0
		RISE_N_SHINE;
     70c:	98000012 	stmdals	r0, {r1, r4}
     710:	01000012 	tsteq	r0, r2, lsl r0
		i_trigger (devevent (UART_A, READ));
     714:	00005000 	andeq	r5, r0, r0
     718:	00000000 	andeq	r0, r0, r0
     71c:	11b40000 			; <UNDEFINED> instruction: 0x11b40000
     720:	11ba0000 			; <UNDEFINED> instruction: 0x11ba0000
     724:	00010000 	andeq	r0, r1, r0
     728:	00000050 	andeq	r0, r0, r0, asr r0
     72c:	00000000 	andeq	r0, r0, r0
     730:	0011ca00 	andseq	ip, r1, r0, lsl #20
     734:	0011f600 	andseq	pc, r1, r0, lsl #12
     738:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     73c:	000011f6 	strdeq	r1, [r0], -r6
     740:	000011fc 	strdeq	r1, [r0], -ip
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	fc520001 	mrrc2	0, 0, r0, r2, cr1
     748:	44000011 	strmi	r0, [r0], #-17	; 0xffffffef
     74c:	01000012 	tsteq	r0, r2, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     750:	12445400 	subne	r5, r4, #0, 8
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	125c0000 	subsne	r0, ip, #0
     758:	00010000 	andeq	r0, r1, r0
		RISE_N_SHINE;
     75c:	00000050 	andeq	r0, r0, r0, asr r0
     760:	00000000 	andeq	r0, r0, r0
     764:	0011f600 	andseq	pc, r1, r0, lsl #12
		i_trigger (devevent (UART_A, WRITE));
     768:	0011fa00 	andseq	pc, r1, r0, lsl #20
     76c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     770:	000011fa 	strdeq	r1, [r0], -sl
     774:	000011fc 	strdeq	r1, [r0], -ip
     778:	12530001 	subsne	r0, r3, #1
     77c:	1b000012 	blne	7cc <__buttons_setirq+0x24>
     780:	01000012 	tsteq	r0, r2, lsl r0
     784:	00005000 	andeq	r5, r0, r0
     788:	00000000 	andeq	r0, r0, r0
     78c:	12040000 	andne	r0, r4, #0
     790:	12140000 	andsne	r0, r4, #0
}
     794:	00010000 	andeq	r0, r1, r0
     798:	00000053 	andeq	r0, r0, r3, asr r0
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	0011ca00 	andseq	ip, r1, r0, lsl #20
     7a4:	0011e800 	andseq	lr, r1, r0, lsl #16
void __buttons_setirq (int val) {
     7a8:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	000011ee 	andeq	r1, r0, lr, ror #3
     7b0:	0000120e 	andeq	r1, r0, lr, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
     7b8:	18000012 	stmdane	r0, {r1, r4}
     7bc:	02000012 	andeq	r0, r0, #18
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	007c7400 	rsbseq	r7, ip, r0, lsl #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	00000000 	andeq	r0, r0, r0
     7c8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     7cc:	a600000d 	strge	r0, [r0], -sp
     7d0:	0100000d 	tsteq	r0, sp
     7d4:	0db45000 	ldceq	0, cr5, [r4]
     7d8:	0df80000 	ldcleq	0, cr0, [r8]
}
     7dc:	00010000 	andeq	r0, r1, r0
     7e0:	00000050 	andeq	r0, r0, r0, asr r0
     7e4:	00000000 	andeq	r0, r0, r0
     7e8:	000d8000 	andeq	r8, sp, r0
void __pinlist_setirq (int val) {
     7ec:	000d8c00 	andeq	r8, sp, r0, lsl #24
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	53000100 	movwpl	r0, #256	; 0x100
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	00000d8c 	andeq	r0, r0, ip, lsl #27
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	00000d8e 	andeq	r0, r0, lr, lsl #27
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	00700002 	rsbseq	r0, r0, r2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	00000d92 	muleq	r0, r2, sp
     804:	00000dea 	andeq	r0, r0, sl, ror #27
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	ea530001 	b	14c0814 <__ccfg+0x14a086c>
     80c:	ee00000d 	cdp	0, 0, cr0, cr0, cr13, {0}
     810:	0200000d 	andeq	r0, r0, #13
	for (i = 0; i < N_PINLIST; i++) {
     814:	ee007300 	cdp	3, 0, cr7, cr0, cr0, {0}
}
     818:	f800000d 			; <UNDEFINED> instruction: 0xf800000d
     81c:	0100000d 	tsteq	r0, sp
     820:	00005300 	andeq	r5, r0, r0, lsl #6
     824:	00000000 	andeq	r0, r0, r0
void GPIOIntHandler () {
     828:	0d800000 	stceq	0, cr0, [r0]
if (buttons_int) {
     82c:	0d820000 	stceq	0, cr0, [r2]
     830:	00010000 	andeq	r0, r1, r0
	buttons_disable ();
     834:	000d9252 	andeq	r9, sp, r2, asr r2
     838:	000dd200 	andeq	sp, sp, r0, lsl #4
	i_trigger ((aword)&__button_list);
     83c:	52000100 	andpl	r0, r0, #0, 2
     840:	00000dea 	andeq	r0, r0, sl, ror #27
     844:	00000dee 	andeq	r0, r0, lr, ror #27
     848:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
     84c:	f800000d 			; <UNDEFINED> instruction: 0xf800000d
     850:	0100000d 	tsteq	r0, sp
     854:	00005200 	andeq	r5, r0, r0, lsl #4
     858:	00000000 	andeq	r0, r0, r0
     85c:	10dc0000 	sbcsne	r0, ip, r0
     860:	10e40000 	rscne	r0, r4, r0
     864:	00010000 	andeq	r0, r1, r0
	RISE_N_SHINE;
     868:	0010e851 	andseq	lr, r0, r1, asr r8
     86c:	0010ea00 	andseq	lr, r0, r0, lsl #20
     870:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	i_trigger ((aword)(&__input_pins));
     87c:	00001030 	andeq	r1, r0, r0, lsr r0
     880:	0000104c 	andeq	r1, r0, ip, asr #32
     884:	52500001 	subspl	r0, r0, #1
     888:	5e000010 	mcrpl	0, 0, r0, cr0, cr0, {0}
     88c:	01000010 	tsteq	r0, r0, lsl r0
     890:	00005000 	andeq	r5, r0, r0
     894:	00000000 	andeq	r0, r0, r0
     898:	10300000 	eorsne	r0, r0, r0
     89c:	104e0000 	subne	r0, lr, r0
     8a0:	00010000 	andeq	r0, r1, r0
     8a4:	00105251 	andseq	r5, r0, r1, asr r2
	__pinsen_disable_and_clear;
     8a8:	00105c00 	andseq	r5, r0, r0, lsl #24
	RISE_N_SHINE;
     8ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
     8b8:	00001030 	andeq	r1, r0, r0, lsr r0
     8bc:	00001051 	andeq	r1, r0, r1, asr r0
     8c0:	52520001 	subspl	r0, r2, #1
     8c4:	5a000010 	bpl	90c <system_init+0x40>
     8c8:	01000010 	tsteq	r0, r0, lsl r0
void system_init () {
     8cc:	00005200 	andeq	r5, r0, r0, lsl #4
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	00000000 	andeq	r0, r0, r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	10300000 	eorsne	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	10480000 	subne	r0, r8, r0
     8dc:	00010000 	andeq	r0, r1, r0
     8e0:	00104853 	andseq	r4, r0, r3, asr r8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	0010cc00 	andseq	ip, r0, r0, lsl #24
     8e8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f4:	00001030 	andeq	r1, r0, r0, lsr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	000010b0 	strheq	r1, [r0], -r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	00910002 	addseq	r0, r1, r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	000010b0 	strheq	r1, [r0], -r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	000010cc 	andeq	r1, r0, ip, asr #1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     908:	00910002 	addseq	r0, r1, r2
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	00001060 	andeq	r1, r0, r0, rrx
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	00001076 	andeq	r1, r0, r6, ror r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
     920:	90000010 	andls	r0, r0, r0, lsl r0
     924:	01000010 	tsteq	r0, r0, lsl r0
     928:	10a05000 	adcne	r5, r0, r0
		if (port_confs [i] & 0x80)
     92c:	10a80000 	adcne	r0, r8, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     930:	00010000 	andeq	r0, r1, r0
     934:	0010b050 	andseq	fp, r0, r0, asr r0
		if (port_confs [i] & 0x40)
     938:	0010b800 	andseq	fp, r0, r0, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	0000100c 	andeq	r1, r0, ip
     94c:	00001012 	andeq	r1, r0, r2, lsl r0
	all_leds_blink;
     950:	18500001 	ldmdane	r0, {r0}^
     954:	20000010 	andcs	r0, r0, r0, lsl r0
     958:	01000010 	tsteq	r0, r0, lsl r0
     95c:	10245000 	eorne	r5, r4, r0
     960:	10300000 	eorsne	r0, r0, r0
     964:	00010000 	andeq	r0, r1, r0
     968:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	00000000 	andeq	r0, r0, r0
     970:	00100c00 	andseq	r0, r0, r0, lsl #24
     974:	00101400 	andseq	r1, r0, r0, lsl #8
     978:	51000100 	mrspl	r0, (UNDEF: 16)
     97c:	00001018 	andeq	r1, r0, r8, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	00001022 	andeq	r1, r0, r2, lsr #32
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	24510001 	ldrbcs	r0, [r1], #-1
     988:	30000010 	andcc	r0, r0, r0, lsl r0
	IntEnable (INT_AON_RTC_COMB);
     98c:	01000010 	tsteq	r0, r0, lsl r0
     990:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	IntEnable (INT_AON_GPIO_EDGE);
     9a0:	00010000 	andeq	r0, r1, r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	00000050 	andeq	r0, r0, r0, asr r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c0:	00520001 	subseq	r0, r2, r1
     9c4:	00000000 	andeq	r0, r0, r0
	urates [0] = UART_RATE / 100;
     9c8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     9cc:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
	reinit_uart ();
     9d0:	0100000f 	tsteq	r0, pc
	EXTRA_INITIALIZERS;
     9d4:	00005000 	andeq	r5, r0, r0
     9d8:	00000000 	andeq	r0, r0, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	0ff60000 	svceq	0x00f60000
     9e0:	10000000 	andne	r0, r0, r0
     9e4:	00010000 	andeq	r0, r1, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e8:	00100451 	andseq	r0, r0, r1, asr r4
     9ec:	00100a00 	andseq	r0, r0, r0, lsl #20
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9f0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	00000ff6 	strdeq	r0, [r0], -r6
     a00:	00000ffa 	strdeq	r0, [r0], -sl
     a04:	00520001 	subseq	r0, r2, r1
	...
	tci_run_auxiliary_timer ();
     a14:	01000000 	mrseq	r0, (UNDEF: 0)
		diag ("");
     a18:	00005000 	andeq	r5, r0, r0
	...
		diag ("Leftover RAM: %d bytes",
     a28:	00010000 	andeq	r0, r1, r0
     a2c:	00000051 	andeq	r0, r0, r1, asr r0
	...
     a3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a48:	00500001 	subseq	r0, r0, r1
	...
     a58:	01000000 	mrseq	r0, (UNDEF: 0)
     a5c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     a6c:	00010000 	andeq	r0, r1, r0
     a70:	00000050 	andeq	r0, r0, r0, asr r0
     a74:	00000000 	andeq	r0, r0, r0
     a78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
__attribute__ ((noreturn)) void __pi_release () {
     a8c:	00510001 	subseq	r0, r1, r1
	...
	check_stack_overflow;
     a9c:	01000000 	mrseq	r0, (UNDEF: 0)
	update_n_wake (MAX_WORD, NO);
     aa0:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	for_all_tasks (__pi_curr) {
     ab0:	00010000 	andeq	r0, r1, r0
     ab4:	00000050 	andeq	r0, r0, r0, asr r0
	...
	__SLEEP;
     ac4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	system_event_count ++;
     ad0:	00510001 	subseq	r0, r1, r1
	switch (__pi_systat.effpdm) {
     ad4:	00000000 	andeq	r0, r0, r0
     ad8:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     adc:	ec00000f 	stc	0, cr0, [r0], {15}
     ae0:	0100000f 	tsteq	r0, pc
			__WFI ();
     ae4:	0fec5000 	svceq	0x00ec5000
     ae8:	0ff60000 	svceq	0x00f60000
     aec:	00010000 	andeq	r0, r1, r0
	check_stack_overflow;
     af0:	00000053 	andeq	r0, r0, r3, asr r0
     af4:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af8:	000fec00 	andeq	lr, pc, r0, lsl #24
     afc:	000ff600 	andeq	pc, pc, r0, lsl #12
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b14:	00500001 	subseq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	00000000 	andeq	r0, r0, r0
     b1c:	01000000 	mrseq	r0, (UNDEF: 0)
     b20:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b30:	00010000 	andeq	r0, r1, r0
			__WFI ();
     b34:	00000052 	andeq	r0, r0, r2, asr r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	00000000 	andeq	r0, r0, r0
     b3c:	52000100 	andpl	r0, r0, #0, 2
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b50:	00500001 	subseq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	00000000 	andeq	r0, r0, r0
     b58:	c4000000 	strgt	r0, [r0], #-0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b5c:	cc00000f 	stcgt	0, cr0, [r0], {15}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	0100000f 	tsteq	r0, pc
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	0fce5000 	svceq	0x00ce5000
     b68:	0fd20000 	svceq	0x00d20000
     b6c:	00010000 	andeq	r0, r1, r0
     b70:	000fd250 	andeq	sp, pc, r0, asr r2	; <UNPREDICTABLE>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	000fe800 	andeq	lr, pc, r0, lsl #16
     b78:	53000100 	movwpl	r0, #256	; 0x100
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	00500001 	subseq	r0, r0, r1
     b90:	00000000 	andeq	r0, r0, r0
			SysCtrlSetRechargeBeforePowerDown
     b94:	01000000 	mrseq	r0, (UNDEF: 0)
     b98:	00005000 	andeq	r5, r0, r0
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba8:	00010000 	andeq	r0, r1, r0
     bac:	00000050 	andeq	r0, r0, r0, asr r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     bc8:	00500001 	subseq	r0, r0, r1
			while (!(AONWUCPowerStatusGet () &
     bcc:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	01000000 	mrseq	r0, (UNDEF: 0)
     bd4:	00005700 	andeq	r5, r0, r0, lsl #14
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be4:	00010000 	andeq	r0, r1, r0
     be8:	00000056 	andeq	r0, r0, r6, asr r0
	...
     bf8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c04:	00500001 	subseq	r0, r0, r1
     c08:	00000000 	andeq	r0, r0, r0
}
     c0c:	01000000 	mrseq	r0, (UNDEF: 0)
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c10:	00005800 	andeq	r5, r0, r0, lsl #16
     c14:	00000000 	andeq	r0, r0, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	00010000 	andeq	r0, r1, r0
     c1c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c2c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	00540001 	subseq	r0, r4, r1
	...
     c48:	01000000 	mrseq	r0, (UNDEF: 0)
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4c:	00005800 	andeq	r5, r0, r0, lsl #16
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	00010000 	andeq	r0, r1, r0
     c58:	00000058 	andeq	r0, r0, r8, asr r0
			PRCMPowerDomainOff (
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	00116400 	andseq	r6, r1, r0, lsl #8
	__SLEEP;
     c64:	00116c00 	andseq	r6, r1, r0, lsl #24
     c68:	50000100 	andpl	r0, r0, r0, lsl #2
  __ASM volatile ("cpsie i" : : : "memory");
     c6c:	0000116c 	andeq	r1, r0, ip, ror #2
	goto Redo;
     c70:	00001176 	andeq	r1, r0, r6, ror r1
     c74:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     c78:	88000011 	stmdahi	r0, {r0, r4}
     c7c:	01000011 	tsteq	r0, r1, lsl r0
     c80:	119c5000 	orrsne	r5, ip, r0
     c84:	11a60000 			; <UNDEFINED> instruction: 0x11a60000
     c88:	00010000 	andeq	r0, r1, r0
     c8c:	00000050 	andeq	r0, r0, r0, asr r0
     c90:	00000000 	andeq	r0, r0, r0
     c94:	00117200 	andseq	r7, r1, r0, lsl #4
     c98:	0011a400 	andseq	sl, r1, r0, lsl #8
     c9c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     ca0:	000011a4 	andeq	r1, r0, r4, lsr #3
     ca4:	000011a6 	andeq	r1, r0, r6, lsr #3
     ca8:	a6520001 	ldrbge	r0, [r2], -r1
     cac:	a8000011 	stmdage	r0, {r0, r4}
     cb0:	01000011 	tsteq	r0, r1, lsl r0
     cb4:	00005400 	andeq	r5, r0, r0, lsl #8
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	0d420000 	stcleq	0, cr0, [r2, #-0]
     cc0:	0d740000 	ldcleq	0, cr0, [r4, #-0]
     cc4:	00010000 	andeq	r0, r1, r0
     cc8:	00000056 	andeq	r0, r0, r6, asr r0
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	000d5800 	andeq	r5, sp, r0, lsl #16
     cd4:	000d6200 	andeq	r6, sp, r0, lsl #4
     cd8:	53000100 	movwpl	r0, #256	; 0x100
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	00500001 	subseq	r0, r0, r1
	system_init ();
     cf0:	00000000 	andeq	r0, r0, r0
	tcv_init ();
     cf4:	01000000 	mrseq	r0, (UNDEF: 0)
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d08:	00010000 	andeq	r0, r1, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	00000050 	andeq	r0, r0, r0, asr r0
     d10:	00000000 	andeq	r0, r0, r0
	delay (16, 0);
     d14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_release ();
     d20:	00000f8c 	andeq	r0, r0, ip, lsl #31
     d24:	00000fa5 	andeq	r0, r0, r5, lsr #31
     d28:	00500001 	subseq	r0, r0, r1
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	8c000000 	stchi	0, cr0, [r0], {-0}
     d34:	a200000f 	andge	r0, r0, #15
     d38:	0100000f 	tsteq	r0, pc
static void killev (__pi_pcb_t *pid) {
     d3c:	00005100 	andeq	r5, r0, r0, lsl #2
	wfun = (aword)(pid->code);
     d40:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
     d44:	0f680000 	svceq	0x00680000
		for (j = 0; j < nevents (i); j++) {
     d48:	0f7c0000 	svceq	0x007c0000
     d4c:	00010000 	andeq	r0, r1, r0
     d50:	000f7c50 	andeq	r7, pc, r0, asr ip	; <UNPREDICTABLE>
			    || i->Events [j] . Event == wfun
     d54:	000f8000 	andeq	r8, pc, r0
		for (j = 0; j < nevents (i); j++) {
     d58:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			if (i->Events [j] . Event == (aword)pid
     d5c:	00000f84 	andeq	r0, r0, r4, lsl #31
     d60:	00000f8c 	andeq	r0, r0, ip, lsl #31
     d64:	00500001 	subseq	r0, r0, r1
				wakeupev (i, j);
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
	for_all_tasks (i) {
     d70:	7f00000f 	svcvc	0x0000000f
}
     d74:	0100000f 	tsteq	r0, pc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	0f845100 	svceq	0x00845100
static void qfree (aword *ch) {
     d7c:	0f8c0000 	svceq	0x008c0000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	00010000 	andeq	r0, r1, r0
	cc = (aword*)(mpools + MA_NP);
     d84:	00000051 	andeq	r0, r0, r1, asr r0
	m_setnextp (ch, chunk);
     d88:	00000000 	andeq	r0, r0, r0
	m_setnextp (cc, ch);
     d8c:	000f7000 	andeq	r7, pc, r0
}
     d90:	000f7f00 	andeq	r7, pc, r0, lsl #30
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	53000100 	movwpl	r0, #256	; 0x100
     d98:	00000f84 	andeq	r0, r0, r4, lsl #31
     d9c:	00000f8c 	andeq	r0, r0, ip, lsl #31
			m_setnextp (cc, m_nextp (chunk));
     da0:	00530001 	subseq	r0, r3, r1
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	01000000 	mrseq	r0, (UNDEF: 0)
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	00005000 	andeq	r5, r0, r0
	...
			m_setnextp (cc, m_nextp (chunk));
     dc4:	00010000 	andeq	r0, r1, r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	00000051 	andeq	r0, r0, r1, asr r0
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			if (m_size (chunk) >= m_size (ch))
     de4:	00520001 	subseq	r0, r2, r1
     de8:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk))
     dec:	01000000 	mrseq	r0, (UNDEF: 0)
     df0:	00005200 	andeq	r5, r0, r0, lsl #4
     df4:	00000000 	andeq	r0, r0, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	0f480000 	svceq	0x00480000
	diag_wait (a);
     dfc:	0f520000 	svceq	0x00520000
	diag_wchar (c, a);
     e00:	00010000 	andeq	r0, r1, r0
     e04:	00000053 	andeq	r0, r0, r3, asr r0
}
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	000eec00 	andeq	lr, lr, r0, lsl #24
	syserror (ESTATE, "state");
     e10:	000ef200 	andeq	pc, lr, r0, lsl #4
     e14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void update_n_wake (word min, Boolean force) {
     e20:	0000125c 	andeq	r1, r0, ip, asr r2
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	00001262 	andeq	r1, r0, r2, ror #4
     e28:	62500001 	subsvs	r0, r0, #1
     e2c:	90000012 	andls	r0, r0, r2, lsl r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e30:	01000012 	tsteq	r0, r2, lsl r0
     e34:	00005500 	andeq	r5, r0, r0, lsl #10
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	125c0000 	subsne	r0, ip, #0
     e40:	12670000 	rsbne	r0, r7, #0
     e44:	00010000 	andeq	r0, r1, r0
     e48:	00126751 	andseq	r6, r2, r1, asr r7
     e4c:	00129000 	andseq	r9, r2, r0
     e50:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     e5c:	00001278 	andeq	r1, r0, r8, ror r2
     e60:	0000127c 	andeq	r1, r0, ip, ror r2
		for_all_tasks (i) {
     e64:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
	__pi_mintk = znew + min;
     e68:	82000012 	andhi	r0, r0, #18
     e6c:	01000012 	tsteq	r0, r2, lsl r0
			if (!twaiting (i))
     e70:	12825300 	addne	r5, r2, #0, 6
     e74:	12900000 	addsne	r0, r0, #0
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	00010000 	andeq	r0, r1, r0
     e7c:	00000052 	andeq	r0, r0, r2, asr r0
	...
     e8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ea0:	00510001 	subseq	r0, r1, r1
	...
		for_all_tasks (i) {
     eb0:	01000000 	mrseq	r0, (UNDEF: 0)
				d = i->Timer - znew;
     eb4:	00005000 	andeq	r5, r0, r0
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	00010000 	andeq	r0, r1, r0
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
     ed0:	53000100 	movwpl	r0, #256	; 0x100
	...
     edc:	00530001 	subseq	r0, r3, r1
	...
void proceed (word state) {
     eec:	01000000 	mrseq	r0, (UNDEF: 0)
	prcdstate (__pi_curr, state);
     ef0:	00005000 	andeq	r5, r0, r0
     ef4:	00000000 	andeq	r0, r0, r0
	release;
     ef8:	00010000 	andeq	r0, r1, r0
     efc:	00000053 	andeq	r0, r0, r3, asr r0
void __pi_wait (aword event, word state) {
     f00:	00000000 	andeq	r0, r0, r0
	sint j = nevents (__pi_curr);
     f04:	53000100 	movwpl	r0, #256	; 0x100
	...
		syserror (ENEVENTS, "sw");
     f18:	00500001 	subseq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
     f1c:	00000000 	andeq	r0, r0, r0
	incwait (__pi_curr);
     f20:	01000000 	mrseq	r0, (UNDEF: 0)
	setestate (__pi_curr->Events [j], state, event);
     f24:	00005000 	andeq	r5, r0, r0
	...
void __pi_trigger (aword event) {
     f34:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
     f38:	00000050 	andeq	r0, r0, r0, asr r0
		for (j = 0; j < nevents (i); j++) {
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	53000100 	movwpl	r0, #256	; 0x100
	...
			if (i->Events [j] . Event == event) {
     f4c:	00530001 	subseq	r0, r3, r1
	...
				wakeupev (i, j);
     f5c:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
     f60:	00005000 	andeq	r5, r0, r0
}
     f64:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
     f68:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
     f6c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			__pi_wait (pid, st);
     f7c:	53000100 	movwpl	r0, #256	; 0x100
	...
	for_all_tasks (i) {
     f88:	00000e20 	andeq	r0, r0, r0, lsr #28
void delay (word d, word state) {
     f8c:	00000e26 	andeq	r0, r0, r6, lsr #28
	settstate (__pi_curr, state);
     f90:	00500001 	subseq	r0, r0, r1
     f94:	00000000 	andeq	r0, r0, r0
     f98:	20000000 	andcs	r0, r0, r0
     f9c:	2900000e 	stmdbcs	r0, {r1, r2, r3}
	update_n_wake (d, YES);
     fa0:	0100000e 	tsteq	r0, lr
     fa4:	00005100 	andeq	r5, r0, r0, lsl #2
	__pi_curr->Timer = __pi_old + d;
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	0e2e0000 	cdpeq	0, 2, cr0, cr14, cr0, {0}
	inctimer (__pi_curr);
     fb0:	0e6c0000 	cdpeq	0, 6, cr0, cr12, cr0, {0}
     fb4:	00010000 	andeq	r0, r1, r0
     fb8:	000e7054 	andeq	r7, lr, r4, asr r0
}
     fbc:	000ebe00 	andeq	fp, lr, r0, lsl #28
     fc0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	if (fun == NULL)
     fc4:	00000ec0 	andeq	r0, r0, r0, asr #29
		return (int) __pi_curr;
     fc8:	00000eca 	andeq	r0, r0, sl, asr #29
     fcc:	00540001 	subseq	r0, r4, r1
	for_all_tasks (i)
     fd0:	00000000 	andeq	r0, r0, r0
}
     fd4:	66000000 	strvs	r0, [r0], -r0
		if (i->code == fun)
     fd8:	6800000e 	stmdavs	r0, {r1, r2, r3}
	for_all_tasks (i)
     fdc:	0100000e 	tsteq	r0, lr
     fe0:	0e705000 	cdpeq	0, 7, cr5, cr0, cr0, {0}
     fe4:	0ec00000 	cdpeq	0, 12, cr0, cr0, cr0, {0}
int __pi_strlen (const char *s) {
     fe8:	00010000 	andeq	r0, r1, r0
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	00000050 	andeq	r0, r0, r0, asr r0
}
     ff0:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
     ff4:	000f0000 	andeq	r0, pc, r0
	while (n--)
     ff8:	000f1400 	andeq	r1, pc, r0, lsl #8
     ffc:	50000100 	andpl	r0, r0, r0, lsl #2
		*dest++ = *src++;
    1000:	00000f1a 	andeq	r0, r0, sl, lsl pc
    1004:	00000f34 	andeq	r0, r0, r4, lsr pc
    1008:	00500001 	subseq	r0, r0, r1
	...
		syserror (ERESOURCE, "addv");
    1014:	1600000f 	strne	r0, [r0], -pc
	if (ioreq [loc] != NULL)
    1018:	0100000f 	tsteq	r0, pc
    101c:	0f1a5100 	svceq	0x001a5100
		syserror (ERESOURCE, "addv");
    1020:	0f200000 	svceq	0x00200000
	ioreq [loc] = rf;
    1024:	00010000 	andeq	r0, r1, r0
}
    1028:	00000051 	andeq	r0, r0, r1, asr r0
    102c:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	000f1200 	andeq	r1, pc, r0, lsl #4
    1034:	000f1400 	andeq	r1, pc, r0, lsl #8
    1038:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1044:	00000f12 	andeq	r0, r0, r2, lsl pc
    1048:	00000f16 	andeq	r0, r0, r6, lsl pc
		syserror (ENODEVICE, "io");
    104c:	00510001 	subseq	r0, r1, r1
    1050:	00000000 	andeq	r0, r0, r0
	if (len == 0)
    1054:	1c000000 	stcne	0, cr0, [r0], {-0}
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	2a000011 	bcs	10a4 <io+0x74>
    105c:	01000011 	tsteq	r0, r1, lsl r0
	if (ret >= 0)
    1060:	11305000 	teqne	r0, r0
	if (ret == -1) {
    1064:	11430000 	mrsne	r0, (UNDEF: 67)
    1068:	00010000 	andeq	r0, r1, r0
		if (retry == WNONE)
    106c:	00000050 	andeq	r0, r0, r0, asr r0
		iowait (dev, operation, retry);
    1070:	00000000 	andeq	r0, r0, r0
    1074:	00112800 	andseq	r2, r1, r0, lsl #16
    1078:	00112a00 	andseq	r2, r1, r0, lsl #20
			release;
    107c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			iowait (dev, operation, retry);
    1090:	00500001 	subseq	r0, r0, r1
			(ioreq [dev]) (NONE, buf, len);
    1094:	00000000 	andeq	r0, r0, r0
    1098:	01000000 	mrseq	r0, (UNDEF: 0)
    109c:	00005000 	andeq	r5, r0, r0
	...
}
    10ac:	00010000 	andeq	r0, r1, r0
	if (retry != WNONE) {
    10b0:	00000055 	andeq	r0, r0, r5, asr r0
	...
		delay (-ret - 2, retry);
    10c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	00500001 	subseq	r0, r0, r1
	...
    10dc:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (ERESOURCE, "mal1");
    10e0:	00005000 	andeq	r5, r0, r0
    10e4:	00000000 	andeq	r0, r0, r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	00010000 	andeq	r0, r1, r0
    10ec:	00000050 	andeq	r0, r0, r0, asr r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f0:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f4:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
	...
}
    1108:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1114:	00500001 	subseq	r0, r0, r1
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1124:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (EMALLOC, "malg");
    1128:	00005400 	andeq	r5, r0, r0, lsl #8
    112c:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    1130:	00010000 	andeq	r0, r1, r0
		m_size (ch) ^= MALLOC_UMASK;
    1134:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (mevent [MA_NP] . nwait) {
    1144:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		mevent [MA_NP] . nwait --;
    1150:	00500001 	subseq	r0, r0, r1
	...
}
    1160:	01000000 	mrseq	r0, (UNDEF: 0)
void kill (aword pid) {
    1164:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	syserror (EREQPAR, "kpi");
    1174:	00010000 	andeq	r0, r1, r0
    1178:	00000050 	andeq	r0, r0, r0, asr r0
		if ((aword)i == pid) {
    117c:	00000000 	andeq	r0, r0, r0
    1180:	73000200 	movwvc	r0, #512	; 0x200
	...
			if (i == __pi_curr)
    1194:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				j->Next = i->Next;
    11a0:	00500001 	subseq	r0, r0, r1
	...
}
    11b0:	01000000 	mrseq	r0, (UNDEF: 0)
	if (size < 8)
    11b4:	00005100 	andeq	r5, r0, r0, lsl #2
		_size = 2;
    11b8:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	00010000 	andeq	r0, r1, r0
		_size = (((aword)size) + 3) >> 2;
    11c0:	00000051 	andeq	r0, r0, r1, asr r0
	...
		if (mevent [MA_NP] . nfail != 255)
    11d0:	53000100 	movwpl	r0, #256	; 0x100
	...
		mnfree [MA_NP] = 0;
    11dc:	00530001 	subseq	r0, r3, r1
	...
			syserror (EMALLOC, "malc");
    11ec:	01000000 	mrseq	r0, (UNDEF: 0)
		if (m_size (chunk) >= _size)
    11f0:	00005000 	andeq	r5, r0, r0
    11f4:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk)) {
    11f8:	00010000 	andeq	r0, r1, r0
		m_setnextp (cc, m_nextp (chunk));
    11fc:	00000050 	andeq	r0, r0, r0, asr r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1200:	00000000 	andeq	r0, r0, r0
    1204:	73000200 	movwvc	r0, #512	; 0x200
	...
			QFREE;
    1218:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		mcfree [MA_NP] -= m_size (chunk);
    1224:	00550001 	subseq	r0, r5, r1
    1228:	00000000 	andeq	r0, r0, r0
    122c:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (chunk) |= MALLOC_UMASK;
    1230:	00005000 	andeq	r5, r0, r0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    1238:	00010000 	andeq	r0, r1, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	00000055 	andeq	r0, r0, r5, asr r0
	...
}
    124c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1258:	00570001 	subseq	r0, r7, r1
aword __pi_fork (fsmcode func, aword data) {
    125c:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	01000000 	mrseq	r0, (UNDEF: 0)
    1264:	00005100 	andeq	r5, r0, r0, lsl #2
    1268:	00000000 	andeq	r0, r0, r0
		if ((j = __PCB) == NULL)
    126c:	00010000 	andeq	r0, r1, r0
	i->Next = NULL;
    1270:	00000057 	andeq	r0, r0, r7, asr r0
	...
			for (; j->Next != NULL; j = j->Next);
    1280:	52000100 	andpl	r0, r0, #0, 2
	...
	return (aword) i;
    128c:	00540001 	subseq	r0, r4, r1
	if (mevent [MA_NP] . nwait != 255)
    1290:	00000000 	andeq	r0, r0, r0
    1294:	01000000 	mrseq	r0, (UNDEF: 0)
    1298:	00005200 	andeq	r5, r0, r0, lsl #4
		mevent [MA_NP] . nwait ++;
    129c:	00000000 	andeq	r0, r0, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	00010000 	andeq	r0, r1, r0
    12a4:	00000054 	andeq	r0, r0, r4, asr r0
	...
	diag_disable_int (a, is);
    12b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				d = (bc == 16) ? 10000 : 1000000000;
    12c0:	00510001 	subseq	r0, r1, r1
	...
	dgout ('\n');
    12d0:	01000000 	mrseq	r0, (UNDEF: 0)
    12d4:	00005000 	andeq	r5, r0, r0
	...
	diag_enable_int (a, is);
    12e4:	00010000 	andeq	r0, r1, r0
}
    12e8:	00000050 	andeq	r0, r0, r0, asr r0
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				mess++;
    1304:	00510001 	subseq	r0, r1, r1
				val = va_arg (ap, lword);
    1308:	00000000 	andeq	r0, r0, r0
				bc = 32;
    130c:	01000000 	mrseq	r0, (UNDEF: 0)
				bc = 16;
    1310:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				dgout ('%');
    1320:	00010000 	andeq	r0, r1, r0
    1324:	00000052 	andeq	r0, r0, r2, asr r0
				dgout (*mess);
    1328:	00000000 	andeq	r0, r0, r0
    132c:	52000100 	andpl	r0, r0, #0, 2
	...
					(val >> (bc - i)) & 0xf];
    1340:	00500001 	subseq	r0, r0, r1
					dgout (v);
    1344:	00000000 	andeq	r0, r0, r0
    1348:	07000000 	streq	r0, [r0, -r0]
				while (i < bc) {
    134c:	32007400 	andcc	r7, r0, #0, 8
			mess++;
    1350:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	...
				if ((val >> (bc - 1)) & 1) {
    135c:	00500001 	subseq	r0, r0, r1
	...
						val |= 0xffff0000;
    136c:	01000000 	mrseq	r0, (UNDEF: 0)
    1370:	00005000 	andeq	r5, r0, r0
	...
					v = (word) (val / d);
    1380:	00010000 	andeq	r0, r1, r0
					if (v || d == 1) break;
    1384:	00000051 	andeq	r0, r0, r1, asr r0
	...
					dgout (v + '0');
    1394:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					d /= 10;
    13a0:	00550001 	subseq	r0, r5, r1
	...
					v = (word) (val / d);
    13b0:	01000000 	mrseq	r0, (UNDEF: 0)
				if (bc == 16)
    13b4:	00005100 	andeq	r5, r0, r0, lsl #2
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	00000000 	andeq	r0, r0, r0
					val &= 0xffff;
    13bc:	00010000 	andeq	r0, r1, r0
					dgout (*s);
    13c0:	00000056 	andeq	r0, r0, r6, asr r0
	...
			dgout (*mess++);
    13d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    13dc:	00540001 	subseq	r0, r4, r1
	...
{
    13ec:	01000000 	mrseq	r0, (UNDEF: 0)
    SetupTrimDevice();
    13f0:	00005000 	andeq	r5, r0, r0
    pui32Src = &_etext;
    13f4:	00000000 	andeq	r0, r0, r0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f8:	00010000 	andeq	r0, r1, r0
    __asm("    ldr     r0, =_bss\n"
    13fc:	00000050 	andeq	r0, r0, r0, asr r0
	...
    140c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
        *pui32Dest++ = *pui32Src++;
    1418:	00510001 	subseq	r0, r1, r1
	...
    1428:	01000000 	mrseq	r0, (UNDEF: 0)
    142c:	00005000 	andeq	r5, r0, r0
    1430:	00000000 	andeq	r0, r0, r0
    1434:	00010000 	andeq	r0, r1, r0
static byte get_byte () {
    1438:	00000050 	andeq	r0, r0, r0, asr r0
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1448:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			b |= 1;
    1454:	00510001 	subseq	r0, r1, r1
	...
}
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	00005000 	andeq	r5, r0, r0
static void put_byte (byte b) {
    146c:	00000000 	andeq	r0, r0, r0
    1470:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1474:	00000050 	andeq	r0, r0, r0, asr r0
    1478:	00000000 	andeq	r0, r0, r0
		if (b & 0x80)
    147c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (i = 0; i < 8; i++) {
    1488:	00500001 	subseq	r0, r0, r1
		b <<= 1;
    148c:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < 8; i++) {
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1494:	00005000 	andeq	r5, r0, r0
	...
	put_byte (cmd);
    14a4:	00010000 	andeq	r0, r1, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14a8:	00000051 	andeq	r0, r0, r1, asr r0
}
    14ac:	00000000 	andeq	r0, r0, r0
    14b0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    14bc:	00510001 	subseq	r0, r1, r1
	...
    14cc:	01000000 	mrseq	r0, (UNDEF: 0)
	put_byte (CMD_RDSR);
    14d0:	00005200 	andeq	r5, r0, r0, lsl #4
	r = get_byte ();
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	00010000 	andeq	r0, r1, r0
	while (dopen && (rdsr () & 1)) {
    14dc:	00000052 	andeq	r0, r0, r2, asr r0
}
    14e0:	00000000 	andeq	r0, r0, r0
		if (st == WNONE)
    14e4:	52000100 	andpl	r0, r0, #0, 2
	...
			delay (del, st);
    14f8:	00500001 	subseq	r0, r0, r1
	...
static void ready () {
    1508:	01000000 	mrseq	r0, (UNDEF: 0)
	if (dopen) {
    150c:	00005000 	andeq	r5, r0, r0
		wwait (WNONE, 1);
    1510:	00000000 	andeq	r0, r0, r0
    1514:	00010000 	andeq	r0, r1, r0
    1518:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1528:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	udelay (1);
    1534:	00540001 	subseq	r0, r4, r1
	...
		dopen = DOPEN_TEMP;
    1544:	01000000 	mrseq	r0, (UNDEF: 0)
static void cclose () {
    1548:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		wwait (WNONE, 1);
    1558:	00010000 	andeq	r0, r1, r0
	cmd_0 (CMD_DP);
    155c:	00000052 	andeq	r0, r0, r2, asr r0
    1560:	00000000 	andeq	r0, r0, r0
		dopen = 0;
    1564:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	dopen = DOPEN_PERM;
    1578:	00500001 	subseq	r0, r0, r1
}
    157c:	00000000 	andeq	r0, r0, r0
	if (dopen) {
    1580:	01000000 	mrseq	r0, (UNDEF: 0)
    1584:	00005400 	andeq	r5, r0, r0, lsl #8
	...
int ser_in (word st, char *buf, int len) {
    1594:	00010000 	andeq	r0, r1, r0
    1598:	00000051 	andeq	r0, r0, r1, asr r0
	if (len == 0)
    159c:	00000000 	andeq	r0, r0, r0
	if (__inpline == NULL) {
    15a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (prcs == 0) {
    15b4:	00520001 	subseq	r0, r2, r1
				npwait (st);
    15b8:	00000000 	andeq	r0, r0, r0
		release;
    15bc:	01000000 	mrseq	r0, (UNDEF: 0)
		join (prcs, st);
    15c0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	if (prcs >= len)
    15d0:	00010000 	andeq	r0, r1, r0
		prcs = len-1;
    15d4:	00000050 	andeq	r0, r0, r0, asr r0
	memcpy (buf, __inpline, prcs);
    15d8:	00000000 	andeq	r0, r0, r0
    15dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		buf [prcs] = '\0';
    15f0:	00510001 	subseq	r0, r1, r1
}
    15f4:	00000000 	andeq	r0, r0, r0
		prcs = strlen (__inpline);
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	00005100 	andeq	r5, r0, r0, lsl #2
		return 0;
    1600:	00000000 	andeq	r0, r0, r0
    1604:	00010000 	andeq	r0, r1, r0
    1608:	00000051 	andeq	r0, r0, r1, asr r0
	...
	if ((prcs = running (__outserial)) != 0) {
    1618:	52000100 	andpl	r0, r0, #0, 2
	...
		release;
    1624:	00540001 	subseq	r0, r4, r1
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1628:	00000000 	andeq	r0, r0, r0
    162c:	01000000 	mrseq	r0, (UNDEF: 0)
    1630:	00005200 	andeq	r5, r0, r0, lsl #4
		umwait (st);
    1634:	00000000 	andeq	r0, r0, r0
    1638:	00010000 	andeq	r0, r1, r0
	if (runstrand (__outserial, buf) == 0) {
    163c:	00000054 	andeq	r0, r0, r4, asr r0
    1640:	00000000 	andeq	r0, r0, r0
    1644:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1650:	00540001 	subseq	r0, r4, r1
	...
int ser_inf (word st, const char *fmt, ...) {
    1660:	01000000 	mrseq	r0, (UNDEF: 0)
    1664:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		if ((prcs = running (__inserial)) == 0) {
    1674:	00010000 	andeq	r0, r1, r0
			prcs = runthread (__inserial);
    1678:	00000050 	andeq	r0, r0, r0, asr r0
    167c:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    1680:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	va_start (ap, fmt);
    1694:	00500001 	subseq	r0, r0, r1
	prcs = vscan (__inpline, fmt, ap);
    1698:	00000000 	andeq	r0, r0, r0
    169c:	01000000 	mrseq	r0, (UNDEF: 0)
	ufree (__inpline);
    16a0:	00005000 	andeq	r5, r0, r0
	__inpline = NULL;
    16a4:	00000000 	andeq	r0, r0, r0
}
    16a8:	00010000 	andeq	r0, r1, r0
    16ac:	00000050 	andeq	r0, r0, r0, asr r0
	...
		return 0;
    16bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
strand (__outserial, const char*)
    16c8:	00500001 	subseq	r0, r0, r1
    16cc:	00000000 	andeq	r0, r0, r0
endstrand
    16d0:	01000000 	mrseq	r0, (UNDEF: 0)
    16d4:	00005000 	andeq	r5, r0, r0
	ptr = data;
    16d8:	00000000 	andeq	r0, r0, r0
    16dc:	00010000 	andeq	r0, r1, r0
	if (*ptr)
    16e0:	00000050 	andeq	r0, r0, r0, asr r0
	...
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16f0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    16fc:	00510001 	subseq	r0, r1, r1
	len -= quant;
    1700:	00000000 	andeq	r0, r0, r0
    1704:	01000000 	mrseq	r0, (UNDEF: 0)
    1708:	00005100 	andeq	r5, r0, r0, lsl #2
	if (len == 0) {
    170c:	00000000 	andeq	r0, r0, r0
		ufree (data);
    1710:	00010000 	andeq	r0, r1, r0
		finish;
    1714:	00000051 	andeq	r0, r0, r1, asr r0
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1724:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
strand (__inserial, address)
    1730:	0070000a 	rsbseq	r0, r0, sl
    1734:	00032432 	andeq	r2, r3, r2, lsr r4
    1738:	22000000 	andcs	r0, r0, #0
	...
	if (__inpline != NULL)
    1744:	00540001 	subseq	r0, r4, r1
    1748:	00000000 	andeq	r0, r0, r0
		finish;
    174c:	0a000000 	beq	1754 <__inserial+0x24>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1750:	32007000 	andcc	r7, r0, #0
    1754:	00000324 	andeq	r0, r0, r4, lsr #6
    1758:	00220000 	eoreq	r0, r2, r0
    175c:	00000000 	andeq	r0, r0, r0
		umwait (IM_INIT);
    1760:	01000000 	mrseq	r0, (UNDEF: 0)
		release;
    1764:	00005400 	andeq	r5, r0, r0, lsl #8
	savedata (data);
    1768:	00000000 	andeq	r0, r0, r0
	len = MAX_LINE_LENGTH;
    176c:	000a0000 	andeq	r0, sl, r0
	io (IM_READ, __cport, READ, ptr, 1);
    1770:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1774:	00000003 	andeq	r0, r0, r3
    1778:	00002200 	andeq	r2, r0, r0, lsl #4
	...
		if (*ptr == '\0') { // bin cmd
    1788:	00010000 	andeq	r0, r1, r0
			proceed (IM_BIN);
    178c:	00000055 	andeq	r0, r0, r5, asr r0
    1790:	00000000 	andeq	r0, r0, r0
		if (*ptr < 0x20)
    1794:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (*ptr == '\n' || *ptr == '\r') {
    17a8:	00540001 	subseq	r0, r4, r1
    17ac:	00000000 	andeq	r0, r0, r0
		*ptr = '\0';
    17b0:	01000000 	mrseq	r0, (UNDEF: 0)
		__inpline = (char*)data;
    17b4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
		ptr++;
    17c4:	00010000 	andeq	r0, r1, r0
		len--;
    17c8:	00000050 	andeq	r0, r0, r0, asr r0
	proceed (IM_READ);
    17cc:	00000000 	andeq	r0, r0, r0
	io (IM_BIN, __cport, READ, ptr, 1);
    17d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    17dc:	00500001 	subseq	r0, r0, r1
	...
	if (len > *ptr + 1) // 1 for 0x04
    17ec:	01000000 	mrseq	r0, (UNDEF: 0)
		len = *ptr + 1;
    17f0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1800:	00010000 	andeq	r0, r1, r0
    1804:	00000050 	andeq	r0, r0, r0, asr r0
	...
	len -= quant;
    1814:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	ptr += quant;
    1820:	00500001 	subseq	r0, r0, r1
    1824:	00000000 	andeq	r0, r0, r0
endstrand
    1828:	01000000 	mrseq	r0, (UNDEF: 0)
    182c:	00005000 	andeq	r5, r0, r0
	proceed (IM_BINL);
    1830:	00000000 	andeq	r0, r0, r0
endstrand
    1834:	00010000 	andeq	r0, r1, r0
    1838:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1848:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (res && (d < n))
    1854:	00510001 	subseq	r0, r1, r1
    1858:	00000000 	andeq	r0, r0, r0
			res [d] = (char) c;
    185c:	01000000 	mrseq	r0, (UNDEF: 0)
		d++;
    1860:	00005100 	andeq	r5, r0, r0, lsl #2
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1870:	00010000 	andeq	r0, r1, r0
    1874:	00000053 	andeq	r0, r0, r3, asr r0
				enci (10000);
    1878:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	70000a00 	andvc	r0, r0, r0, lsl #20
    1880:	03243200 			; <UNDEFINED> instruction: 0x03243200
	d = 0;
    1884:	00000000 	andeq	r0, r0, r0
		c = *fm++;
    1888:	00000022 	andeq	r0, r0, r2, lsr #32
		if (c == '\\') {
    188c:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    1890:	53000100 	movwpl	r0, #256	; 0x100
	...
    189c:	0070000a 	rsbseq	r0, r0, sl
				outc ('\\');
    18a0:	00032432 	andeq	r2, r3, r2, lsr r4
    18a4:	22000000 	andcs	r0, r0, #0
	...
			if (c == '\0')
    18b0:	00530001 	subseq	r0, r3, r1
    18b4:	00000000 	andeq	r0, r0, r0
			outc (c);
    18b8:	0a000000 	beq	18c0 <__pi_vfparse+0x54>
				outc (val);
    18bc:	32007000 	andcc	r7, r0, #0
				val = (word) va_arg (ap, aword);
    18c0:	00000324 	andeq	r0, r0, r4, lsr #6
		if (c == '%') {
    18c4:	00220000 	eoreq	r0, r2, r0
	...
			switch (c) {
    18d4:	01000000 	mrseq	r0, (UNDEF: 0)
    18d8:	00005000 	andeq	r5, r0, r0
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	00010000 	andeq	r0, r1, r0
    18e4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				outc ('%');
    18f4:	53000100 	movwpl	r0, #256	; 0x100
	...
				outc (c);
    1900:	00530001 	subseq	r0, r3, r1
				if (c == '\0')
    1904:	00000000 	andeq	r0, r0, r0
				return d;
    1908:	01000000 	mrseq	r0, (UNDEF: 0)
}
    190c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			switch (c) {
    191c:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    1920:	00000052 	andeq	r0, r0, r2, asr r0
				val = (word) va_arg (ap, aword);
    1924:	00000000 	andeq	r0, r0, r0
						[ (val >> i) & 0xf ]);
    1928:	52000100 	andpl	r0, r0, #0, 2
	...
					outc (__pi_hex_enc_table
    1934:	00520001 	subseq	r0, r2, r1
    1938:	00000000 	andeq	r0, r0, r0
					if (i == 0)
    193c:	01000000 	mrseq	r0, (UNDEF: 0)
    1940:	00005200 	andeq	r5, r0, r0, lsl #4
	...
				val = (word) va_arg (ap, aword);
    1950:	00010000 	andeq	r0, r1, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    1954:	00000050 	andeq	r0, r0, r0, asr r0
	...
					val = (~val) + 1;
    1964:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				enci (10000);
    1970:	00510001 	subseq	r0, r1, r1
    1974:	00000000 	andeq	r0, r0, r0
    1978:	01000000 	mrseq	r0, (UNDEF: 0)
    197c:	00005100 	andeq	r5, r0, r0, lsl #2
    1980:	00000000 	andeq	r0, r0, r0
    1984:	00010000 	andeq	r0, r1, r0
    1988:	00000051 	andeq	r0, r0, r1, asr r0
    198c:	00000000 	andeq	r0, r0, r0
    1990:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    19a4:	00550001 	subseq	r0, r5, r1
	...
    19b4:	01000000 	mrseq	r0, (UNDEF: 0)
				if (c == 'd' || c == 'u') {
    19b8:	00005400 	andeq	r5, r0, r0, lsl #8
    19bc:	00000000 	andeq	r0, r0, r0
					if (c == 'd' &&
    19c0:	00010000 	andeq	r0, r1, r0
					val = va_arg (ap, lword);
    19c4:	00000050 	andeq	r0, r0, r0, asr r0
					fm++;
    19c8:	00000000 	andeq	r0, r0, r0
					if (c == 'd' &&
    19cc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				enci (10000);
    19e0:	00500001 	subseq	r0, r0, r1
					enci (1000000000UL);
    19e4:	00000000 	andeq	r0, r0, r0
    19e8:	01000000 	mrseq	r0, (UNDEF: 0)
    19ec:	00005000 	andeq	r5, r0, r0
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	00070000 	andeq	r0, r7, r0
    19f8:	24320071 	ldrtcs	r0, [r2], #-113	; 0xffffff8f
    19fc:	00220072 	eoreq	r0, r2, r2, ror r0
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	01000000 	mrseq	r0, (UNDEF: 0)
    1a08:	00005000 	andeq	r5, r0, r0
	...
    1a18:	00010000 	andeq	r0, r1, r0
    1a1c:	00000050 	andeq	r0, r0, r0, asr r0
    1a20:	00000000 	andeq	r0, r0, r0
    1a24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
							[ (val >> i) & 0xf ]);
    1a38:	00500001 	subseq	r0, r0, r1
						outc (__pi_hex_enc_table
    1a3c:	00000000 	andeq	r0, r0, r0
    1a40:	01000000 	mrseq	r0, (UNDEF: 0)
    1a44:	00005000 	andeq	r5, r0, r0
	...
					outc ('%');
    1a54:	00010000 	andeq	r0, r1, r0
    1a58:	00000051 	andeq	r0, r0, r1, asr r0
    1a5c:	00000000 	andeq	r0, r0, r0
					outc ('l');
    1a60:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				outc (val);
    1a6c:	00510001 	subseq	r0, r1, r1
    1a70:	00000000 	andeq	r0, r0, r0
				while (*st != '\0') {
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
    1a78:	00005500 	andeq	r5, r0, r0, lsl #10
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	00010000 	andeq	r0, r1, r0
					outc (*st);
    1a84:	00000051 	andeq	r0, r0, r1, asr r0
    1a88:	00000000 	andeq	r0, r0, r0
					st++;
    1a8c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
char *vform (char *res, const char *fm, va_list aq) {
    1aa0:	00560001 	subseq	r0, r6, r1
	...
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1ab4:	00005000 	andeq	r5, r0, r0
	...
	fml = strlen (fm) + 17;
    1ac4:	00010000 	andeq	r0, r1, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    1ac8:	00000050 	andeq	r0, r0, r0, asr r0
    1acc:	00000000 	andeq	r0, r0, r0
    1ad0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1adc:	00500001 	subseq	r0, r0, r1
	...
	if (buf == NULL || fmt == NULL)
    1aec:	01000000 	mrseq	r0, (UNDEF: 0)
int vscan (const char *buf, const char *fmt, va_list ap) {
    1af0:	00005100 	andeq	r5, r0, r0, lsl #2
	if (buf == NULL || fmt == NULL)
    1af4:	00000000 	andeq	r0, r0, r0
    1af8:	00010000 	andeq	r0, r1, r0
    1afc:	00000057 	andeq	r0, r0, r7, asr r0
		    	    case 'u': scanu (lword); break;
    1b00:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    1b04:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (*fmt++ != '%')
    1b10:	00570001 	subseq	r0, r7, r1
		switch (*fmt++) {
    1b14:	00000000 	andeq	r0, r0, r0
    1b18:	01000000 	mrseq	r0, (UNDEF: 0)
    1b1c:	00005700 	andeq	r5, r0, r0, lsl #14
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	00010000 	andeq	r0, r1, r0
    1b28:	00000051 	andeq	r0, r0, r1, asr r0
    1b2c:	00000000 	andeq	r0, r0, r0
}
    1b30:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
			while (isspace (*buf)) buf++;
    1b44:	78910002 	ldmvc	r1, {r1}
	...
    1b50:	78910002 	ldmvc	r1, {r1}
	...
			if (*buf == '\0')
    1b5c:	78910002 	ldmvc	r1, {r1}
	...
			nc++;
    1b68:	78910002 	ldmvc	r1, {r1}
	...
				while (!isspace (*buf) && *buf != ',' &&
    1b7c:	00560001 	subseq	r0, r6, r1
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	01000000 	mrseq	r0, (UNDEF: 0)
    1b88:	00005600 	andeq	r5, r0, r0, lsl #12
	...
			while (isspace (*buf)) buf++;
    1b98:	00010000 	andeq	r0, r1, r0
    1b9c:	00000050 	andeq	r0, r0, r0, asr r0
			if (*buf == ',') buf++;
    1ba0:	00000000 	andeq	r0, r0, r0
    1ba4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		    case 'd': scani (word); break;
    1bb0:	00500001 	subseq	r0, r0, r1
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bbc:	00005400 	andeq	r5, r0, r0, lsl #8
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	00010000 	andeq	r0, r1, r0
    1bc8:	00000050 	andeq	r0, r0, r0, asr r0
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1be4:	00500001 	subseq	r0, r0, r1
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	01000000 	mrseq	r0, (UNDEF: 0)
    1bf0:	00005000 	andeq	r5, r0, r0
    1bf4:	00000000 	andeq	r0, r0, r0
    1bf8:	00010000 	andeq	r0, r1, r0
    1bfc:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1c0c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1c18:	00500001 	subseq	r0, r0, r1
    1c1c:	00000000 	andeq	r0, r0, r0
		    case 'u': scanu (word); break;
    1c20:	01000000 	mrseq	r0, (UNDEF: 0)
    1c24:	00005400 	andeq	r5, r0, r0, lsl #8
    1c28:	00000000 	andeq	r0, r0, r0
    1c2c:	00010000 	andeq	r0, r1, r0
    1c30:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1c40:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c54:	00500001 	subseq	r0, r0, r1
	...
    1c64:	01000000 	mrseq	r0, (UNDEF: 0)
		    case 'x': scanx (word); break;
    1c68:	00005000 	andeq	r5, r0, r0
	...
    1c78:	00010000 	andeq	r0, r1, r0
    1c7c:	00000050 	andeq	r0, r0, r0, asr r0
    1c80:	00000000 	andeq	r0, r0, r0
    1c84:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1c90:	00500001 	subseq	r0, r0, r1
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	01000000 	mrseq	r0, (UNDEF: 0)
    1c9c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1cac:	00010000 	andeq	r0, r1, r0
    1cb0:	00000051 	andeq	r0, r0, r1, asr r0
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1cc4:	00510001 	subseq	r0, r1, r1
    1cc8:	00000000 	andeq	r0, r0, r0
    1ccc:	01000000 	mrseq	r0, (UNDEF: 0)
    1cd0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
			switch (*fmt++) {
    1ce0:	00010000 	andeq	r0, r1, r0
    1ce4:	00000050 	andeq	r0, r0, r0, asr r0
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		    	    case 'd': scani (lword); break;
    1d00:	00510001 	subseq	r0, r1, r1
    1d04:	00000000 	andeq	r0, r0, r0
    1d08:	01000000 	mrseq	r0, (UNDEF: 0)
    1d0c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1d1c:	00010000 	andeq	r0, r1, r0
    1d20:	00000050 	andeq	r0, r0, r0, asr r0
    1d24:	00000000 	andeq	r0, r0, r0
    1d28:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1d34:	00510001 	subseq	r0, r1, r1
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d40:	00005000 	andeq	r5, r0, r0
    1d44:	00000000 	andeq	r0, r0, r0
    1d48:	00010000 	andeq	r0, r1, r0
    1d4c:	00000054 	andeq	r0, r0, r4, asr r0
    1d50:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    1d54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d60:	00500001 	subseq	r0, r0, r1
	...
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1d84:	00010000 	andeq	r0, r1, r0
    1d88:	00000050 	andeq	r0, r0, r0, asr r0
    1d8c:	00000000 	andeq	r0, r0, r0
    1d90:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1da4:	00500001 	subseq	r0, r0, r1
    1da8:	00000000 	andeq	r0, r0, r0
    1dac:	01000000 	mrseq	r0, (UNDEF: 0)
    1db0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1dc0:	00010000 	andeq	r0, r1, r0
		    	    case 'd': scani (lword); break;
    1dc4:	00000051 	andeq	r0, r0, r1, asr r0
    1dc8:	00000000 	andeq	r0, r0, r0
    1dcc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dd8:	00500001 	subseq	r0, r0, r1
	...
		    	    case 'u': scanu (lword); break;
    1de8:	01000000 	mrseq	r0, (UNDEF: 0)
    1dec:	00005200 	andeq	r5, r0, r0, lsl #4
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	00010000 	andeq	r0, r1, r0
    1df8:	00000051 	andeq	r0, r0, r1, asr r0
    1dfc:	00000000 	andeq	r0, r0, r0
    1e00:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e14:	00500001 	subseq	r0, r0, r1
	...
    1e24:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'x': scanx (lword); break;
    1e28:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			sap = va_arg (ap, char*);
    1e38:	00010000 	andeq	r0, r1, r0
			nc++;
    1e3c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			while (isspace (*buf)) buf++;
    1e4c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (isspace (*buf)) buf++;
    1e58:	00560001 	subseq	r0, r6, r1
    1e5c:	00000000 	andeq	r0, r0, r0
    1e60:	01000000 	mrseq	r0, (UNDEF: 0)
		return 0;
    1e64:	00005100 	andeq	r5, r0, r0, lsl #2
    1e68:	00000000 	andeq	r0, r0, r0
		    case 'x': scanx (word); break;
    1e6c:	00010000 	andeq	r0, r1, r0
    1e70:	00000056 	andeq	r0, r0, r6, asr r0
		    	    case 'x': scanx (lword); break;
    1e74:	00000000 	andeq	r0, r0, r0
    1e78:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e84:	00560001 	subseq	r0, r6, r1
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e90:	00005100 	andeq	r5, r0, r0, lsl #2
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	00010000 	andeq	r0, r1, r0
    1e9c:	00000056 	andeq	r0, r0, r6, asr r0
	...
    1eac:	52000100 	andpl	r0, r0, #0, 2
	...
    1eb8:	00550001 	subseq	r0, r5, r1
    1ebc:	00000000 	andeq	r0, r0, r0
    1ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ec4:	00005200 	andeq	r5, r0, r0, lsl #4
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	00010000 	andeq	r0, r1, r0
    1ed0:	00000055 	andeq	r0, r0, r5, asr r0
    1ed4:	00000000 	andeq	r0, r0, r0
    1ed8:	52000100 	andpl	r0, r0, #0, 2
	...
    1ee4:	00550001 	subseq	r0, r5, r1
	...
    1ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ef8:	00005000 	andeq	r5, r0, r0
    1efc:	00000000 	andeq	r0, r0, r0
    1f00:	00010000 	andeq	r0, r1, r0
    1f04:	00000050 	andeq	r0, r0, r0, asr r0
    1f08:	00000000 	andeq	r0, r0, r0
    1f0c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1f18:	00500001 	subseq	r0, r0, r1
	...
    1f28:	01000000 	mrseq	r0, (UNDEF: 0)
    1f2c:	00005100 	andeq	r5, r0, r0, lsl #2
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	13f80000 	mvnsne	r0, #0
    1f38:	14110000 	ldrne	r0, [r1], #-0
    1f3c:	00010000 	andeq	r0, r1, r0
    1f40:	00141c52 	andseq	r1, r4, r2, asr ip
    1f44:	00143000 	andseq	r3, r4, r0
    1f48:	52000100 	andpl	r0, r0, #0, 2
	...
    1f54:	000013f8 	strdeq	r1, [r0], -r8
    1f58:	00001411 	andeq	r1, r0, r1, lsl r4
    1f5c:	20530001 	subscs	r0, r3, r1
    1f60:	30000014 	andcc	r0, r0, r4, lsl r0
    1f64:	01000014 	tsteq	r0, r4, lsl r0
    1f68:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1f78:	00010000 	andeq	r0, r1, r0
    1f7c:	00000050 	andeq	r0, r0, r0, asr r0
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f98:	00510001 	subseq	r0, r1, r1
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fa4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1fb4:	00010000 	andeq	r0, r1, r0
    1fb8:	00000052 	andeq	r0, r0, r2, asr r0
    1fbc:	00000000 	andeq	r0, r0, r0
    1fc0:	52000100 	andpl	r0, r0, #0, 2
	...
    1fd4:	00510001 	subseq	r0, r1, r1
	...
    1fe4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fe8:	00005000 	andeq	r5, r0, r0
	...
    1ff8:	00010000 	andeq	r0, r1, r0
    1ffc:	00000050 	andeq	r0, r0, r0, asr r0
    2000:	00000000 	andeq	r0, r0, r0
    2004:	03000500 	movweq	r0, #1280	; 0x500
	...
    2014:	00500001 	subseq	r0, r0, r1
    2018:	00000000 	andeq	r0, r0, r0
    201c:	05000000 	streq	r0, [r0, #-0]
    2020:	00000300 	andeq	r0, r0, r0, lsl #6
	...
    2034:	00010000 	andeq	r0, r1, r0
    2038:	00000050 	andeq	r0, r0, r0, asr r0
    203c:	00000000 	andeq	r0, r0, r0
    2040:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    204c:	00500001 	subseq	r0, r0, r1
    2050:	00000000 	andeq	r0, r0, r0
    2054:	01000000 	mrseq	r0, (UNDEF: 0)
    2058:	00005000 	andeq	r5, r0, r0
	...
    2068:	00010000 	andeq	r0, r1, r0
    206c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    207c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2090:	00500001 	subseq	r0, r0, r1
	...
    20a0:	01000000 	mrseq	r0, (UNDEF: 0)
    20a4:	00005100 	andeq	r5, r0, r0, lsl #2
    20a8:	00000000 	andeq	r0, r0, r0
    20ac:	00010000 	andeq	r0, r1, r0
    20b0:	00000056 	andeq	r0, r0, r6, asr r0
	...
    20c0:	52000100 	andpl	r0, r0, #0, 2
	...
    20d4:	00530001 	subseq	r0, r3, r1
	...
    20e4:	01000000 	mrseq	r0, (UNDEF: 0)
    20e8:	00005400 	andeq	r5, r0, r0, lsl #8
    20ec:	00000000 	andeq	r0, r0, r0
    20f0:	00010000 	andeq	r0, r1, r0
    20f4:	00000054 	andeq	r0, r0, r4, asr r0
    20f8:	00000000 	andeq	r0, r0, r0
    20fc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2110:	00500001 	subseq	r0, r0, r1
    2114:	00000000 	andeq	r0, r0, r0
    2118:	01000000 	mrseq	r0, (UNDEF: 0)
    211c:	00005000 	andeq	r5, r0, r0
	...
    212c:	00010000 	andeq	r0, r1, r0
    2130:	00000051 	andeq	r0, r0, r1, asr r0
    2134:	00000000 	andeq	r0, r0, r0
    2138:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2144:	00510001 	subseq	r0, r1, r1
	...
    2154:	01000000 	mrseq	r0, (UNDEF: 0)
    2158:	00005200 	andeq	r5, r0, r0, lsl #4
    215c:	00000000 	andeq	r0, r0, r0
    2160:	00010000 	andeq	r0, r1, r0
    2164:	00000054 	andeq	r0, r0, r4, asr r0
	...
    2174:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2188:	00500001 	subseq	r0, r0, r1
	...
    2198:	01000000 	mrseq	r0, (UNDEF: 0)
    219c:	00005000 	andeq	r5, r0, r0
    21a0:	00000000 	andeq	r0, r0, r0
    21a4:	00010000 	andeq	r0, r1, r0
    21a8:	00000055 	andeq	r0, r0, r5, asr r0
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21c4:	00510001 	subseq	r0, r1, r1
    21c8:	00000000 	andeq	r0, r0, r0
    21cc:	01000000 	mrseq	r0, (UNDEF: 0)
    21d0:	00005600 	andeq	r5, r0, r0, lsl #12
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	00010000 	andeq	r0, r1, r0
    21dc:	00000056 	andeq	r0, r0, r6, asr r0
    21e0:	00000000 	andeq	r0, r0, r0
    21e4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    21f8:	00520001 	subseq	r0, r2, r1
    21fc:	00000000 	andeq	r0, r0, r0
    2200:	01000000 	mrseq	r0, (UNDEF: 0)
    2204:	00005200 	andeq	r5, r0, r0, lsl #4
    2208:	00000000 	andeq	r0, r0, r0
    220c:	14b40000 	ldrtne	r0, [r4], #0
    2210:	14c40000 	strbne	r0, [r4], #0
    2214:	00010000 	andeq	r0, r1, r0
    2218:	00000050 	andeq	r0, r0, r0, asr r0
    221c:	00000000 	andeq	r0, r0, r0
    2220:	0014b400 	andseq	fp, r4, r0, lsl #8
    2224:	0014c400 	andseq	ip, r4, r0, lsl #8
    2228:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2234:	000014d6 	ldrdeq	r1, [r0], -r6
    2238:	000014da 	ldrdeq	r1, [r0], -sl
    223c:	00500001 	subseq	r0, r0, r1
    2240:	00000000 	andeq	r0, r0, r0
    2244:	9c000000 	stcls	0, cr0, [r0], {-0}
    2248:	a7000014 	smladge	r0, r4, r0, r0
    224c:	01000014 	tsteq	r0, r4, lsl r0
    2250:	00005000 	andeq	r5, r0, r0
    2254:	00000000 	andeq	r0, r0, r0
    2258:	146c0000 	strbtne	r0, [ip], #-0
    225c:	14880000 	strne	r0, [r8], #0
    2260:	00010000 	andeq	r0, r1, r0
    2264:	00149050 	andseq	r9, r4, r0, asr r0
    2268:	00149c00 	andseq	r9, r4, r0, lsl #24
    226c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2278:	00001448 	andeq	r1, r0, r8, asr #8
    227c:	0000144c 	andeq	r1, r0, ip, asr #8
    2280:	50500001 	subspl	r0, r0, r1
    2284:	6c000014 	stcvs	0, cr0, [r0], {20}
    2288:	01000014 	tsteq	r0, r4, lsl r0
    228c:	00005000 	andeq	r5, r0, r0
    2290:	00000000 	andeq	r0, r0, r0
    2294:	15940000 	ldrne	r0, [r4]
    2298:	15a20000 	strne	r0, [r2, #0]!
    229c:	00010000 	andeq	r0, r1, r0
    22a0:	0015fe50 	andseq	pc, r5, r0, asr lr	; <UNPREDICTABLE>
    22a4:	00160c00 	andseq	r0, r6, r0, lsl #24
    22a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    22b4:	00001594 	muleq	r0, r4, r5
    22b8:	000015a9 	andeq	r1, r0, r9, lsr #11
    22bc:	a9510001 	ldmdbge	r1, {r0}^
    22c0:	c8000015 	stmdagt	r0, {r0, r2, r4}
    22c4:	01000015 	tsteq	r0, r5, lsl r0
    22c8:	15c85700 	strbne	r5, [r8, #1792]	; 0x700
    22cc:	15d00000 	ldrbne	r0, [r0]
    22d0:	00010000 	andeq	r0, r1, r0
    22d4:	0015d051 	andseq	sp, r5, r1, asr r0
    22d8:	0015f600 	andseq	pc, r5, r0, lsl #12
    22dc:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    22e0:	000015f6 	strdeq	r1, [r0], -r6
    22e4:	000015f9 	strdeq	r1, [r0], -r9
    22e8:	f9510001 			; <UNDEFINED> instruction: 0xf9510001
    22ec:	fe000015 	mcr2	0, 0, r0, cr0, cr5, {0}
    22f0:	01000015 	tsteq	r0, r5, lsl r0
    22f4:	15fe5700 	ldrbne	r5, [lr, #1792]!	; 0x700
    22f8:	160c0000 	strne	r0, [ip], -r0
    22fc:	00010000 	andeq	r0, r1, r0
    2300:	00000051 	andeq	r0, r0, r1, asr r0
    2304:	00000000 	andeq	r0, r0, r0
    2308:	00159400 	andseq	r9, r5, r0, lsl #8
    230c:	0015a900 	andseq	sl, r5, r0, lsl #18
    2310:	52000100 	andpl	r0, r0, #0, 2
    2314:	000015a9 	andeq	r1, r0, r9, lsr #11
    2318:	000015c8 	andeq	r1, r0, r8, asr #11
    231c:	c8550001 	ldmdagt	r5, {r0}^
    2320:	d0000015 	andle	r0, r0, r5, lsl r0
    2324:	01000015 	tsteq	r0, r5, lsl r0
    2328:	15d05200 	ldrbne	r5, [r0, #512]	; 0x200
    232c:	15f60000 	ldrbne	r0, [r6, #0]!
    2330:	00010000 	andeq	r0, r1, r0
    2334:	0015f655 	andseq	pc, r5, r5, asr r6	; <UNPREDICTABLE>
    2338:	0015f900 	andseq	pc, r5, r0, lsl #18
    233c:	52000100 	andpl	r0, r0, #0, 2
    2340:	000015f9 	strdeq	r1, [r0], -r9
    2344:	000015fe 	strdeq	r1, [r0], -lr
    2348:	fe550001 	cdp2	0, 5, cr0, cr5, cr1, {0}
    234c:	0c000015 	stceq	0, cr0, [r0], {21}
    2350:	01000016 	tsteq	r0, r6, lsl r0
    2354:	00005200 	andeq	r5, r0, r0, lsl #4
    2358:	00000000 	andeq	r0, r0, r0
    235c:	15aa0000 	strne	r0, [sl, #0]!
    2360:	15b00000 	ldrne	r0, [r0, #0]!
    2364:	00010000 	andeq	r0, r1, r0
    2368:	0015b050 	andseq	fp, r5, r0, asr r0
    236c:	0015b300 	andseq	fp, r5, r0, lsl #6
    2370:	51000100 	mrspl	r0, (UNDEF: 16)
    2374:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
    2378:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    237c:	c0500001 	subsgt	r0, r0, r1
    2380:	c5000015 	strgt	r0, [r0, #-21]	; 0xffffffeb
    2384:	01000015 	tsteq	r0, r5, lsl r0
    2388:	15d05000 	ldrbne	r5, [r0]
    238c:	15f20000 	ldrbne	r0, [r2, #0]!
    2390:	00010000 	andeq	r0, r1, r0
    2394:	0015fc54 	andseq	pc, r5, r4, asr ip	; <UNPREDICTABLE>
    2398:	0015fe00 	andseq	pc, r5, r0, lsl #28
    239c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    23a8:	0000160c 	andeq	r1, r0, ip, lsl #12
    23ac:	00001614 	andeq	r1, r0, r4, lsl r6
    23b0:	00500001 	subseq	r0, r0, r1
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    23bc:	21000016 	tstcs	r0, r6, lsl r0
    23c0:	01000016 	tsteq	r0, r6, lsl r0
    23c4:	16215000 	strtne	r5, [r1], -r0
    23c8:	16260000 	strtne	r0, [r6], -r0
    23cc:	00010000 	andeq	r0, r1, r0
    23d0:	00162656 	andseq	r2, r6, r6, asr r6
    23d4:	00162f00 	andseq	r2, r6, r0, lsl #30
    23d8:	50000100 	andpl	r0, r0, r0, lsl #2
    23dc:	0000162f 	andeq	r1, r0, pc, lsr #12
    23e0:	00001656 	andeq	r1, r0, r6, asr r6
    23e4:	56560001 	ldrbpl	r0, [r6], -r1
    23e8:	60000016 	andvs	r0, r0, r6, lsl r0
    23ec:	01000016 	tsteq	r0, r6, lsl r0
    23f0:	00005000 	andeq	r5, r0, r0
    23f4:	00000000 	andeq	r0, r0, r0
    23f8:	16300000 	ldrtne	r0, [r0], -r0
    23fc:	16340000 	ldrtne	r0, [r4], -r0
    2400:	00010000 	andeq	r0, r1, r0
    2404:	00163450 	andseq	r3, r6, r0, asr r4
    2408:	00163c00 	andseq	r3, r6, r0, lsl #24
    240c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2410:	0000163c 	andeq	r1, r0, ip, lsr r6
    2414:	00001640 	andeq	r1, r0, r0, asr #12
    2418:	40500001 	subsmi	r0, r0, r1
    241c:	56000016 			; <UNDEFINED> instruction: 0x56000016
    2420:	01000016 	tsteq	r0, r6, lsl r0
    2424:	00005500 	andeq	r5, r0, r0, lsl #10
    2428:	00000000 	andeq	r0, r0, r0
    242c:	16600000 	strbtne	r0, [r0], -r0
    2430:	166e0000 	strbtne	r0, [lr], -r0
    2434:	00010000 	andeq	r0, r1, r0
    2438:	0016b450 	andseq	fp, r6, r0, asr r4
    243c:	0016c000 	andseq	ip, r6, r0
    2440:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    244c:	00001676 	andeq	r1, r0, r6, ror r6
    2450:	0000167c 	andeq	r1, r0, ip, ror r6
    2454:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2458:	7f000016 	svcvc	0x00000016
    245c:	01000016 	tsteq	r0, r6, lsl r0
    2460:	16805100 	strne	r5, [r0], r0, lsl #2
    2464:	16840000 	strne	r0, [r4], r0
    2468:	00010000 	andeq	r0, r1, r0
    246c:	00168c50 	andseq	r8, r6, r0, asr ip
    2470:	00169100 	andseq	r9, r6, r0, lsl #2
    2474:	50000100 	andpl	r0, r0, r0, lsl #2
    2478:	0000169e 	muleq	r0, lr, r6
    247c:	000016a0 	andeq	r1, r0, r0, lsr #13
    2480:	a0500001 	subsge	r0, r0, r1
    2484:	a8000016 	stmdage	r0, {r1, r2, r4}
    2488:	01000016 	tsteq	r0, r6, lsl r0
    248c:	00005400 	andeq	r5, r0, r0, lsl #8
    2490:	00000000 	andeq	r0, r0, r0
    2494:	16c00000 	strbne	r0, [r0], r0
    2498:	16d70000 	ldrbne	r0, [r7], r0
    249c:	00010000 	andeq	r0, r1, r0
    24a0:	0016d850 	andseq	sp, r6, r0, asr r8
    24a4:	0016e400 	andseq	lr, r6, r0, lsl #8
    24a8:	50000100 	andpl	r0, r0, r0, lsl #2
    24ac:	0000171c 	andeq	r1, r0, ip, lsl r7
    24b0:	00001730 	andeq	r1, r0, r0, lsr r7
    24b4:	00500001 	subseq	r0, r0, r1
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    24c0:	d4000016 	strle	r0, [r0], #-22	; 0xffffffea
    24c4:	01000016 	tsteq	r0, r6, lsl r0
    24c8:	16d45500 	ldrbne	r5, [r4], r0, lsl #10
    24cc:	16d70000 	ldrbne	r0, [r7], r0
    24d0:	00020000 	andeq	r0, r2, r0
    24d4:	16d80873 			; <UNDEFINED> instruction: 0x16d80873
    24d8:	17300000 	ldrne	r0, [r0, -r0]!
    24dc:	00010000 	andeq	r0, r1, r0
    24e0:	00000055 	andeq	r0, r0, r5, asr r0
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	0016fe00 	andseq	pc, r6, r0, lsl #28
    24ec:	00171000 	andseq	r1, r7, r0
    24f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    24fc:	00001730 	andeq	r1, r0, r0, lsr r7
    2500:	0000174c 	andeq	r1, r0, ip, asr #14
    2504:	32500001 	subscc	r0, r0, #1
    2508:	3b000018 	blcc	2570 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x9c>
    250c:	01000018 	tsteq	r0, r8, lsl r0
    2510:	00005000 	andeq	r5, r0, r0
    2514:	00000000 	andeq	r0, r0, r0
    2518:	17380000 	ldrne	r0, [r8, -r0]!
    251c:	175a0000 	ldrbne	r0, [sl, -r0]
    2520:	00010000 	andeq	r0, r1, r0
    2524:	00175a54 	andseq	r5, r7, r4, asr sl
    2528:	00176100 	andseq	r6, r7, r0, lsl #2
    252c:	50000100 	andpl	r0, r0, r0, lsl #2
    2530:	00001761 	andeq	r1, r0, r1, ror #14
    2534:	00001766 	andeq	r1, r0, r6, ror #14
    2538:	66540001 	ldrbvs	r0, [r4], -r1
    253c:	70000017 	andvc	r0, r0, r7, lsl r0
    2540:	01000017 	tsteq	r0, r7, lsl r0
    2544:	17705000 	ldrbne	r5, [r0, -r0]!
    2548:	182e0000 	stmdane	lr!, {}	; <UNPREDICTABLE>
    254c:	00010000 	andeq	r0, r1, r0
    2550:	00183254 	andseq	r3, r8, r4, asr r2
    2554:	00183800 	andseq	r3, r8, r0, lsl #16
    2558:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    255c:	00001838 	andeq	r1, r0, r8, lsr r8
    2560:	0000183b 	andeq	r1, r0, fp, lsr r8
    2564:	08720002 	ldmdaeq	r2!, {r1}^
	...
    2570:	00001812 	andeq	r1, r0, r2, lsl r8
    2574:	00001814 	andeq	r1, r0, r4, lsl r8
    2578:	14500001 	ldrbne	r0, [r0], #-1
    257c:	2e000018 	mcrcs	0, 0, r0, cr0, cr8, {0}
    2580:	01000018 	tsteq	r0, r8, lsl r0
    2584:	00005600 	andeq	r5, r0, r0, lsl #12
    2588:	00000000 	andeq	r0, r0, r0
    258c:	1a9c0000 	bne	fe702594 <_estack+0xde6fd594>
    2590:	1ab30000 	bne	fecc2598 <_estack+0xdecbd598>
    2594:	00010000 	andeq	r0, r1, r0
    2598:	001ab350 	andseq	fp, sl, r0, asr r3
    259c:	001aba00 	andseq	fp, sl, r0, lsl #20
    25a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    25a4:	00001aba 			; <UNDEFINED> instruction: 0x00001aba
    25a8:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
    25ac:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    25b0:	cc00001a 	stcgt	0, cr0, [r0], {26}
    25b4:	0100001a 	tsteq	r0, sl, lsl r0
    25b8:	1acc5400 	bne	ff3175c0 <_estack+0xdf3125c0>
    25bc:	1adb0000 	bne	ff6c25c4 <_estack+0xdf6bd5c4>
    25c0:	00010000 	andeq	r0, r1, r0
    25c4:	001adb50 	andseq	sp, sl, r0, asr fp
    25c8:	001aec00 	andseq	lr, sl, r0, lsl #24
    25cc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    25d8:	00001a9c 	muleq	r0, ip, sl
    25dc:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
    25e0:	b0510001 	subslt	r0, r1, r1
    25e4:	b300001a 	movwlt	r0, #26
    25e8:	0100001a 	tsteq	r0, sl, lsl r0
    25ec:	1ab35200 	bne	fecd6df4 <_estack+0xdecd1df4>
    25f0:	1aba0000 	bne	fee825f8 <_estack+0xdee7d5f8>
    25f4:	00010000 	andeq	r0, r1, r0
    25f8:	001aba56 	andseq	fp, sl, r6, asr sl
    25fc:	001abf00 	andseq	fp, sl, r0, lsl #30
    2600:	51000100 	mrspl	r0, (UNDEF: 16)
    2604:	00001abf 			; <UNDEFINED> instruction: 0x00001abf
    2608:	00001aec 	andeq	r1, r0, ip, ror #21
    260c:	00560001 	subseq	r0, r6, r1
    2610:	00000000 	andeq	r0, r0, r0
    2614:	9c000000 	stcls	0, cr0, [r0], {-0}
    2618:	a400001a 	strge	r0, [r0], #-26	; 0xffffffe6
    261c:	0100001a 	tsteq	r0, sl, lsl r0
    2620:	1aa85200 	bne	fea16e28 <_estack+0xdea11e28>
    2624:	1aac0000 	bne	feb0262c <_estack+0xdeafd62c>
    2628:	00010000 	andeq	r0, r1, r0
    262c:	001ab452 	andseq	fp, sl, r2, asr r4
    2630:	001aba00 	andseq	fp, sl, r0, lsl #20
    2634:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2638:	00001ac6 	andeq	r1, r0, r6, asr #21
    263c:	00001aec 	andeq	r1, r0, ip, ror #21
    2640:	00570001 	subseq	r0, r7, r1
    2644:	00000000 	andeq	r0, r0, r0
    2648:	c6000000 	strgt	r0, [r0], -r0
    264c:	e800001a 	stmda	r0, {r1, r3, r4}
    2650:	0100001a 	tsteq	r0, sl, lsl r0
    2654:	1ae85500 	bne	ffa17a5c <_estack+0xdfa12a5c>
    2658:	1aec0000 	bne	ffb02660 <_estack+0xdfafd660>
    265c:	00010000 	andeq	r0, r1, r0
    2660:	00000058 	andeq	r0, r0, r8, asr r0
    2664:	00000000 	andeq	r0, r0, r0
    2668:	001ae000 	andseq	lr, sl, r0
    266c:	001ae400 	andseq	lr, sl, r0, lsl #8
    2670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    267c:	0000186c 	andeq	r1, r0, ip, ror #16
    2680:	00001886 	andeq	r1, r0, r6, lsl #17
    2684:	00500001 	subseq	r0, r0, r1
    2688:	00000000 	andeq	r0, r0, r0
    268c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2690:	86000018 			; <UNDEFINED> instruction: 0x86000018
    2694:	01000018 	tsteq	r0, r8, lsl r0
    2698:	00005100 	andeq	r5, r0, r0, lsl #2
    269c:	00000000 	andeq	r0, r0, r0
    26a0:	186c0000 	stmdane	ip!, {}^	; <UNPREDICTABLE>
    26a4:	18860000 	stmne	r6, {}	; <UNPREDICTABLE>
    26a8:	00010000 	andeq	r0, r1, r0
    26ac:	00189652 	andseq	r9, r8, r2, asr r6
    26b0:	0018c200 	andseq	ip, r8, r0, lsl #4
    26b4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    26b8:	000018d0 	ldrdeq	r1, [r0], -r0
    26bc:	00001a8e 	andeq	r1, r0, lr, lsl #21
    26c0:	00550001 	subseq	r0, r5, r1
    26c4:	00000000 	andeq	r0, r0, r0
    26c8:	6c000000 	stcvs	0, cr0, [r0], {-0}
    26cc:	70000018 	andvc	r0, r0, r8, lsl r0
    26d0:	01000018 	tsteq	r0, r8, lsl r0
    26d4:	18725300 	ldmdane	r2!, {r8, r9, ip, lr}^
    26d8:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    26dc:	00030000 	andeq	r0, r3, r0
    26e0:	74049353 	strvc	r9, [r4], #-851	; 0xfffffcad
    26e4:	be000018 	mcrlt	0, 0, r0, cr0, cr8, {0}
    26e8:	03000018 	movweq	r0, #24
    26ec:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26f0:	000018be 			; <UNDEFINED> instruction: 0x000018be
    26f4:	00001912 	andeq	r1, r0, r2, lsl r9
    26f8:	93540003 	cmpls	r4, #3
    26fc:	00191204 	andseq	r1, r9, r4, lsl #4
    2700:	00191e00 	andseq	r1, r9, r0, lsl #28
    2704:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2708:	19260493 	stmdbne	r6!, {r0, r1, r4, r7, sl}
    270c:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    2710:	00030000 	andeq	r0, r3, r0
    2714:	4c049354 	stcmi	3, cr9, [r4], {84}	; 0x54
    2718:	c6000019 			; <UNDEFINED> instruction: 0xc6000019
    271c:	03000019 	movweq	r0, #25
    2720:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2724:	000019cc 	andeq	r1, r0, ip, asr #19
    2728:	000019e0 	andeq	r1, r0, r0, ror #19
    272c:	93540003 	cmpls	r4, #3
    2730:	001a2604 	andseq	r2, sl, r4, lsl #12
    2734:	001a3200 	andseq	r3, sl, r0, lsl #4
    2738:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    273c:	1a540493 	bne	1503990 <__ccfg+0x14e39e8>
    2740:	1a660000 	bne	1982748 <__ccfg+0x19627a0>
    2744:	00030000 	andeq	r0, r3, r0
    2748:	6a049354 	bvs	1274a0 <__ccfg+0x1074f8>
    274c:	7200001a 	andvc	r0, r0, #26
    2750:	0300001a 	movweq	r0, #26
    2754:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2758:	00001a76 	andeq	r1, r0, r6, ror sl
    275c:	00001a9c 	muleq	r0, ip, sl
    2760:	93540003 	cmpls	r4, #3
    2764:	00000004 	andeq	r0, r0, r4
    2768:	00000000 	andeq	r0, r0, r0
    276c:	00188a00 	andseq	r8, r8, r0, lsl #20
    2770:	00189400 	andseq	r9, r8, r0, lsl #8
    2774:	59000100 	stmdbpl	r0, {r8}
    2778:	00001894 	muleq	r0, r4, r8
    277c:	00001896 	muleq	r0, r6, r8
    2780:	00720002 	rsbseq	r0, r2, r2
    2784:	00001896 	muleq	r0, r6, r8
    2788:	000018ba 			; <UNDEFINED> instruction: 0x000018ba
    278c:	c2590001 	subsgt	r0, r9, #1
    2790:	d0000018 	andle	r0, r0, r8, lsl r0
    2794:	01000018 	tsteq	r0, r8, lsl r0
    2798:	18d05900 	ldmne	r0, {r8, fp, ip, lr}^
    279c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    27a0:	00010000 	andeq	r0, r1, r0
    27a4:	00191258 	andseq	r1, r9, r8, asr r2
    27a8:	00192200 	andseq	r2, r9, r0, lsl #4
    27ac:	58000100 	stmdapl	r0, {r8}
    27b0:	00001922 	andeq	r1, r0, r2, lsr #18
    27b4:	0000192a 	andeq	r1, r0, sl, lsr #18
    27b8:	01720002 	cmneq	r2, r2
    27bc:	00001948 	andeq	r1, r0, r8, asr #18
    27c0:	00001972 	andeq	r1, r0, r2, ror r9
    27c4:	76580001 	ldrbvc	r0, [r8], -r1
    27c8:	7a000019 	bvc	2834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>
    27cc:	01000019 	tsteq	r0, r9, lsl r0
    27d0:	19845000 	stmibne	r4, {ip, lr}
    27d4:	198e0000 	stmibne	lr, {}	; <UNPREDICTABLE>
    27d8:	00010000 	andeq	r0, r1, r0
    27dc:	0019ae50 	andseq	sl, r9, r0, asr lr
    27e0:	0019b000 	andseq	fp, r9, r0
    27e4:	50000100 	andpl	r0, r0, r0, lsl #2
    27e8:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
    27ec:	000019b8 			; <UNDEFINED> instruction: 0x000019b8
    27f0:	b8580001 	ldmdalt	r8, {r0}^
    27f4:	db000019 	blle	2860 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x1c>
    27f8:	01000019 	tsteq	r0, r9, lsl r0
    27fc:	19ea5300 	stmibne	sl!, {r8, r9, ip, lr}^
    2800:	19ee0000 	stmibne	lr!, {}^	; <UNPREDICTABLE>
    2804:	00010000 	andeq	r0, r1, r0
    2808:	0019f859 	andseq	pc, r9, r9, asr r8	; <UNPREDICTABLE>
    280c:	001a1800 	andseq	r1, sl, r0, lsl #16
    2810:	59000100 	stmdbpl	r0, {r8}
    2814:	00001a1e 	andeq	r1, r0, lr, lsl sl
    2818:	00001a20 	andeq	r1, r0, r0, lsr #20
    281c:	26590001 	ldrbcs	r0, [r9], -r1
    2820:	3400001a 	strcc	r0, [r0], #-26	; 0xffffffe6
    2824:	0100001a 	tsteq	r0, sl, lsl r0
    2828:	1a545300 	bne	1517430 <__ccfg+0x14f7488>
    282c:	1a5d0000 	bne	1742834 <__ccfg+0x172288c>
    2830:	00010000 	andeq	r0, r1, r0
    2834:	001a6653 	andseq	r6, sl, r3, asr r6
    2838:	001a7a00 	andseq	r7, sl, r0, lsl #20
    283c:	58000100 	stmdapl	r0, {r8}
    2840:	00001a8e 	andeq	r1, r0, lr, lsl #21
    2844:	00001a9c 	muleq	r0, ip, sl
    2848:	00590001 	subseq	r0, r9, r1
    284c:	00000000 	andeq	r0, r0, r0
    2850:	2a000000 	bcs	2858 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x14>
    2854:	48000019 	stmdami	r0, {r0, r3, r4}
    2858:	01000019 	tsteq	r0, r9, lsl r0
    285c:	00005800 	andeq	r5, r0, r0, lsl #16
    2860:	00000000 	andeq	r0, r0, r0
    2864:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
    2868:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
    286c:	00010000 	andeq	r0, r1, r0
    2870:	00196c59 	andseq	r6, r9, r9, asr ip
    2874:	00199a00 	andseq	r9, r9, r0, lsl #20
    2878:	59000100 	stmdbpl	r0, {r8}
    287c:	000019a2 	andeq	r1, r0, r2, lsr #19
    2880:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
    2884:	00590001 	subseq	r0, r9, r1
    2888:	00000000 	andeq	r0, r0, r0
    288c:	72000000 	andvc	r0, r0, #0
    2890:	a4000019 	strge	r0, [r0], #-25	; 0xffffffe7
    2894:	01000019 	tsteq	r0, r9, lsl r0
    2898:	19a45800 	stmibne	r4!, {fp, ip, lr}
    289c:	19b00000 	ldmibne	r0!, {}	; <UNPREDICTABLE>
    28a0:	00010000 	andeq	r0, r1, r0
    28a4:	0019b053 	andseq	fp, r9, r3, asr r0
    28a8:	0019b600 	andseq	fp, r9, r0, lsl #12
    28ac:	58000100 	stmdapl	r0, {r8}
	...
    28b8:	000019e0 	andeq	r1, r0, r0, ror #19
    28bc:	00001a26 	andeq	r1, r0, r6, lsr #20
    28c0:	005a0001 	subseq	r0, sl, r1
    28c4:	00000000 	andeq	r0, r0, r0
    28c8:	e6000000 	str	r0, [r0], -r0
    28cc:	10000019 	andne	r0, r0, r9, lsl r0
    28d0:	0100001a 	tsteq	r0, sl, lsl r0
    28d4:	1a105800 	bne	4188dc <__ccfg+0x3f8934>
    28d8:	1a200000 	bne	8028e0 <__ccfg+0x7e2938>
    28dc:	00010000 	andeq	r0, r1, r0
    28e0:	001a2053 	andseq	r2, sl, r3, asr r0
    28e4:	001a2600 	andseq	r2, sl, r0, lsl #12
    28e8:	58000100 	stmdapl	r0, {r8}
	...
    28f4:	00001a34 	andeq	r1, r0, r4, lsr sl
    28f8:	00001a54 	andeq	r1, r0, r4, asr sl
    28fc:	00580001 	subseq	r0, r8, r1
    2900:	00000000 	andeq	r0, r0, r0
    2904:	66000000 	strvs	r0, [r0], -r0
    2908:	6a00001a 	bvs	2978 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x4>
    290c:	0200001a 	andeq	r0, r0, #26
    2910:	6a007400 	bvs	1f918 <__exidx_end+0x1cca4>
    2914:	7200001a 	andvc	r0, r0, #26
    2918:	0200001a 	andeq	r0, r0, #26
    291c:	007c7400 	rsbseq	r7, ip, r0, lsl #8
    2920:	00000000 	andeq	r0, r0, r0
    2924:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    2928:	8c00001a 	stchi	0, cr0, [r0], {26}
    292c:	0100001a 	tsteq	r0, sl, lsl r0
    2930:	00005800 	andeq	r5, r0, r0, lsl #16
    2934:	00000000 	andeq	r0, r0, r0
    2938:	1aec0000 	bne	ffb02940 <_estack+0xdfafd940>
    293c:	1b080000 	blne	202944 <__ccfg+0x1e299c>
    2940:	00010000 	andeq	r0, r1, r0
    2944:	001b4650 	andseq	r4, fp, r0, asr r6
    2948:	001b5800 	andseq	r5, fp, r0, lsl #16
    294c:	53000100 	movwpl	r0, #256	; 0x100
    2950:	00001b58 	andeq	r1, r0, r8, asr fp
    2954:	00001b6c 	andeq	r1, r0, ip, ror #22
    2958:	6e560001 	cdpvs	0, 5, cr0, cr6, cr1, {0}
    295c:	8a00001b 	bhi	29d0 <NOROM_OSCClockSourceSet+0x14>
    2960:	0100001b 	tsteq	r0, fp, lsl r0
    2964:	1b9c5600 	blne	fe71816c <_estack+0xde71316c>
    2968:	1ba80000 	blne	fea02970 <_estack+0xde9fd970>
    296c:	00010000 	andeq	r0, r1, r0
    2970:	001ba856 	andseq	sl, fp, r6, asr r8
    2974:	001bae00 	andseq	sl, fp, r0, lsl #28
    2978:	53000100 	movwpl	r0, #256	; 0x100
    297c:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    2980:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
    2984:	b8530001 	ldmdalt	r3, {r0}^
    2988:	c800001b 	stmdagt	r0, {r0, r1, r3, r4}
    298c:	0100001b 	tsteq	r0, fp, lsl r0
    2990:	1bc85e00 	blne	ff21a198 <_estack+0xdf215198>
    2994:	1bde0000 	blne	ff78299c <_estack+0xdf77d99c>
    2998:	00010000 	andeq	r0, r1, r0
    299c:	001bde53 	andseq	sp, fp, r3, asr lr
    29a0:	001be600 	andseq	lr, fp, r0, lsl #12
    29a4:	5e000100 	adfpls	f0, f0, f0
    29a8:	00001bec 	andeq	r1, r0, ip, ror #23
    29ac:	00001c08 	andeq	r1, r0, r8, lsl #24
    29b0:	08530001 	ldmdaeq	r3, {r0}^
    29b4:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    29b8:	0100001c 	tsteq	r0, ip, lsl r0
    29bc:	1c0e5e00 	stcne	14, cr5, [lr], {-0}
    29c0:	1c100000 	ldcne	0, cr0, [r0], {-0}
    29c4:	00010000 	andeq	r0, r1, r0
    29c8:	001c1c53 	andseq	r1, ip, r3, asr ip
    29cc:	001c1e00 	andseq	r1, ip, r0, lsl #28
    29d0:	5e000100 	adfpls	f0, f0, f0
    29d4:	00001c1e 	andeq	r1, r0, lr, lsl ip
    29d8:	00001c32 	andeq	r1, r0, r2, lsr ip
    29dc:	32530001 	subscc	r0, r3, #1
    29e0:	4200001c 	andmi	r0, r0, #28
    29e4:	0100001c 	tsteq	r0, ip, lsl r0
    29e8:	1c425600 	mcrrne	6, 0, r5, r2, cr0
    29ec:	1c560000 	mrane	r0, r6, acc0
    29f0:	00010000 	andeq	r0, r1, r0
    29f4:	001c6453 	andseq	r6, ip, r3, asr r4
    29f8:	001c6600 	andseq	r6, ip, r0, lsl #12
    29fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a00:	00001c66 	andeq	r1, r0, r6, ror #24
    2a04:	00001c7e 	andeq	r1, r0, lr, ror ip
    2a08:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
    2a0c:	9800001c 	stmdals	r0, {r2, r3, r4}
    2a10:	0100001c 	tsteq	r0, ip, lsl r0
    2a14:	1c9e5600 	ldcne	6, cr5, [lr], {0}
    2a18:	1cc00000 	stclne	0, cr0, [r0], {0}
    2a1c:	00010000 	andeq	r0, r1, r0
    2a20:	001cc053 	andseq	ip, ip, r3, asr r0
    2a24:	001cd200 	andseq	sp, ip, r0, lsl #4
    2a28:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a2c:	00001cf8 	strdeq	r1, [r0], -r8
    2a30:	00001cfc 	strdeq	r1, [r0], -ip
    2a34:	fc530001 	mrrc2	0, 0, r0, r3, cr1
    2a38:	0c00001c 	stceq	0, cr0, [r0], {28}
    2a3c:	0100001d 	tsteq	r0, sp, lsl r0
    2a40:	1d0c5800 	stcne	8, cr5, [ip, #-0]
    2a44:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    2a48:	00010000 	andeq	r0, r1, r0
    2a4c:	001d1c53 	andseq	r1, sp, r3, asr ip
    2a50:	001d2600 	andseq	r2, sp, r0, lsl #12
    2a54:	58000100 	stmdapl	r0, {r8}
    2a58:	00001d2c 	andeq	r1, r0, ip, lsr #26
    2a5c:	00001d4e 	andeq	r1, r0, lr, asr #26
    2a60:	54530001 	ldrbpl	r0, [r3], #-1
    2a64:	6400001d 	strvs	r0, [r0], #-29	; 0xffffffe3
    2a68:	0100001d 	tsteq	r0, sp, lsl r0
    2a6c:	1d645300 	stclne	3, cr5, [r4, #-0]
    2a70:	1d7e0000 	ldclne	0, cr0, [lr, #-0]
    2a74:	00010000 	andeq	r0, r1, r0
    2a78:	001d8456 	andseq	r8, sp, r6, asr r4
    2a7c:	001da400 	andseq	sl, sp, r0, lsl #8
    2a80:	53000100 	movwpl	r0, #256	; 0x100
    2a84:	00001da4 	andeq	r1, r0, r4, lsr #27
    2a88:	00001db6 			; <UNDEFINED> instruction: 0x00001db6
    2a8c:	ca560001 	bgt	1582a98 <__ccfg+0x1562af0>
    2a90:	ce00001d 	mcrgt	0, 0, r0, cr0, cr13, {0}
    2a94:	0100001d 	tsteq	r0, sp, lsl r0
    2a98:	1dce5800 	stclne	8, cr5, [lr]
    2a9c:	1dd20000 	ldclne	0, cr0, [r2]
    2aa0:	00010000 	andeq	r0, r1, r0
    2aa4:	001ddc53 	andseq	sp, sp, r3, asr ip
    2aa8:	001dde00 	andseq	sp, sp, r0, lsl #28
    2aac:	58000100 	stmdapl	r0, {r8}
    2ab0:	00001dde 	ldrdeq	r1, [r0], -lr
    2ab4:	00001df4 	strdeq	r1, [r0], -r4
    2ab8:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    2abc:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    2ac0:	0100001e 	tsteq	r0, lr, lsl r0
    2ac4:	1e045600 	cfmadd32ne	mvax0, mvfx5, mvfx4, mvfx0
    2ac8:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
    2acc:	00010000 	andeq	r0, r1, r0
    2ad0:	001e2453 	andseq	r2, lr, r3, asr r4
    2ad4:	001e2600 	andseq	r2, lr, r0, lsl #12
    2ad8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2adc:	00001e26 	andeq	r1, r0, r6, lsr #28
    2ae0:	00001e2e 	andeq	r1, r0, lr, lsr #28
    2ae4:	32530001 	subscc	r0, r3, #1
    2ae8:	4200001e 	andmi	r0, r0, #30
    2aec:	0100001e 	tsteq	r0, lr, lsl r0
    2af0:	1e425300 	cdpne	3, 4, cr5, cr2, cr0, {0}
    2af4:	1e500000 	cdpne	0, 5, cr0, cr0, cr0, {0}
    2af8:	00010000 	andeq	r0, r1, r0
    2afc:	001e5056 	andseq	r5, lr, r6, asr r0
    2b00:	001e5600 	andseq	r5, lr, r0, lsl #12
    2b04:	58000100 	stmdapl	r0, {r8}
    2b08:	00001e56 	andeq	r1, r0, r6, asr lr
    2b0c:	00001e62 	andeq	r1, r0, r2, ror #28
    2b10:	62560001 	subsvs	r0, r6, #1
    2b14:	6a00001e 	bvs	2b94 <NOROM_OSCClockSourceGet+0x17c>
    2b18:	0100001e 	tsteq	r0, lr, lsl r0
    2b1c:	1e6a5000 	cdpne	0, 6, cr5, cr10, cr0, {0}
    2b20:	1e7c0000 	cdpne	0, 7, cr0, cr12, cr0, {0}
    2b24:	00010000 	andeq	r0, r1, r0
    2b28:	00000053 	andeq	r0, r0, r3, asr r0
    2b2c:	00000000 	andeq	r0, r0, r0
    2b30:	001aec00 	andseq	lr, sl, r0, lsl #24
    2b34:	001b0a00 	andseq	r0, fp, r0, lsl #20
    2b38:	51000100 	mrspl	r0, (UNDEF: 16)
    2b3c:	00001b0a 	andeq	r1, r0, sl, lsl #22
    2b40:	00001b10 	andeq	r1, r0, r0, lsl fp
    2b44:	10560001 	subsne	r0, r6, r1
    2b48:	2e00001b 	mcrcs	0, 0, r0, cr0, cr11, {0}
    2b4c:	0100001b 	tsteq	r0, fp, lsl r0
    2b50:	1b345100 	blne	d16f58 <__ccfg+0xcf6fb0>
    2b54:	1e7c0000 	cdpne	0, 7, cr0, cr12, cr0, {0}
    2b58:	00010000 	andeq	r0, r1, r0
    2b5c:	00000051 	andeq	r0, r0, r1, asr r0
    2b60:	00000000 	andeq	r0, r0, r0
    2b64:	001aec00 	andseq	lr, sl, r0, lsl #24
    2b68:	001aec00 	andseq	lr, sl, r0, lsl #24
    2b6c:	52000100 	andpl	r0, r0, #0, 2
    2b70:	00001aec 	andeq	r1, r0, ip, ror #21
    2b74:	00001b08 	andeq	r1, r0, r8, lsl #22
    2b78:	93520003 	cmpls	r2, #3
    2b7c:	001bae04 	andseq	sl, fp, r4, lsl #28
    2b80:	001be200 	andseq	lr, fp, r0, lsl #4
    2b84:	52000100 	andpl	r0, r0, #0, 2
    2b88:	00001c08 	andeq	r1, r0, r8, lsl #24
    2b8c:	00001c0e 	andeq	r1, r0, lr, lsl #24
    2b90:	1e520001 	cdpne	0, 5, cr0, cr2, cr1, {0}
    2b94:	3800001c 	stmdacc	r0, {r2, r3, r4}
    2b98:	0100001c 	tsteq	r0, ip, lsl r0
    2b9c:	1c665200 	sfmne	f5, 2, [r6], #-0
    2ba0:	1c8e0000 	stcne	0, cr0, [lr], {0}
    2ba4:	00010000 	andeq	r0, r1, r0
    2ba8:	001ce052 	andseq	lr, ip, r2, asr r0
    2bac:	001d2000 	andseq	r2, sp, r0
    2bb0:	52000100 	andpl	r0, r0, #0, 2
    2bb4:	00001d4e 	andeq	r1, r0, lr, asr #26
    2bb8:	00001d74 	andeq	r1, r0, r4, ror sp
    2bbc:	c4520001 	ldrbgt	r0, [r2], #-1
    2bc0:	ce00001d 	mcrgt	0, 0, r0, cr0, cr13, {0}
    2bc4:	0100001d 	tsteq	r0, sp, lsl r0
    2bc8:	1dde5200 	lfmne	f5, 2, [lr]
    2bcc:	1dfa0000 	ldclne	0, cr0, [sl]
    2bd0:	00010000 	andeq	r0, r1, r0
    2bd4:	001e2652 	andseq	r2, lr, r2, asr r6
    2bd8:	001e3c00 	andseq	r3, lr, r0, lsl #24
    2bdc:	52000100 	andpl	r0, r0, #0, 2
    2be0:	00001e42 	andeq	r1, r0, r2, asr #28
    2be4:	00001e50 	andeq	r1, r0, r0, asr lr
    2be8:	62520001 	subsvs	r0, r2, #1
    2bec:	6a00001e 	bvs	2c6c <__input_pins>
    2bf0:	0100001e 	tsteq	r0, lr, lsl r0
    2bf4:	00005200 	andeq	r5, r0, r0, lsl #4
    2bf8:	00000000 	andeq	r0, r0, r0
    2bfc:	1b6a0000 	blne	1a82c04 <__ccfg+0x1a62c5c>
    2c00:	1b6c0000 	blne	1b02c08 <__ccfg+0x1ae2c60>
    2c04:	00010000 	andeq	r0, r1, r0
    2c08:	001be454 	andseq	lr, fp, r4, asr r4
    2c0c:	001c0800 	andseq	r0, ip, r0, lsl #16
    2c10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c14:	00001c0e 	andeq	r1, r0, lr, lsl #24
    2c18:	00001c1e 	andeq	r1, r0, lr, lsl ip
    2c1c:	3a540001 	bcc	1502c28 <__ccfg+0x14e2c80>
    2c20:	6600001c 			; <UNDEFINED> instruction: 0x6600001c
    2c24:	0100001c 	tsteq	r0, ip, lsl r0
    2c28:	1c905400 	cfldrsne	mvf5, [r0], {0}
    2c2c:	1ce00000 	stclne	0, cr0, [r0]
    2c30:	00010000 	andeq	r0, r1, r0
    2c34:	001d2254 	andseq	r2, sp, r4, asr r2
    2c38:	001d4e00 	andseq	r4, sp, r0, lsl #28
    2c3c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c40:	00001d76 	andeq	r1, r0, r6, ror sp
    2c44:	00001dc4 	andeq	r1, r0, r4, asr #27
    2c48:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    2c4c:	de00001d 	mcrle	0, 0, r0, cr0, cr13, {0}
    2c50:	0100001d 	tsteq	r0, sp, lsl r0
    2c54:	1dfc5400 	cfldrdne	mvd5, [ip]
    2c58:	1e260000 	cdpne	0, 2, cr0, cr6, cr0, {0}
    2c5c:	00010000 	andeq	r0, r1, r0
    2c60:	001e3e54 	andseq	r3, lr, r4, asr lr
    2c64:	001e4200 	andseq	r4, lr, r0, lsl #4
    2c68:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c6c:	00001e6a 	andeq	r1, r0, sl, ror #28
    2c70:	00001e7c 	andeq	r1, r0, ip, ror lr
    2c74:	00540001 	subseq	r0, r4, r1
    2c78:	00000000 	andeq	r0, r0, r0
    2c7c:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    2c80:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    2c84:	0100001c 	tsteq	r0, ip, lsl r0
    2c88:	1c0e5800 	stcne	8, cr5, [lr], {-0}
    2c8c:	1c1e0000 	ldcne	0, cr0, [lr], {-0}
    2c90:	00010000 	andeq	r0, r1, r0
    2c94:	00000058 	andeq	r0, r0, r8, asr r0
    2c98:	00000000 	andeq	r0, r0, r0
    2c9c:	001cc000 	andseq	ip, ip, r0
    2ca0:	001cd200 	andseq	sp, ip, r0, lsl #4
    2ca4:	59000100 	stmdbpl	r0, {r8}
    2ca8:	00001cd2 	ldrdeq	r1, [r0], -r2
    2cac:	00001cda 	ldrdeq	r1, [r0], -sl
    2cb0:	00500001 	subseq	r0, r0, r1
    2cb4:	00000000 	andeq	r0, r0, r0
    2cb8:	1c000000 	stcne	0, cr0, [r0], {-0}
    2cbc:	4600001d 			; <UNDEFINED> instruction: 0x4600001d
    2cc0:	0100001d 	tsteq	r0, sp, lsl r0
    2cc4:	1dce5000 	stclne	0, cr5, [lr]
    2cc8:	1dde0000 	ldclne	0, cr0, [lr]
    2ccc:	00010000 	andeq	r0, r1, r0
    2cd0:	00000050 	andeq	r0, r0, r0, asr r0
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	001da400 	andseq	sl, sp, r0, lsl #8
    2cdc:	001db600 	andseq	fp, sp, r0, lsl #12
    2ce0:	59000100 	stmdbpl	r0, {r8}
    2ce4:	00001db6 			; <UNDEFINED> instruction: 0x00001db6
    2ce8:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
    2cec:	00500001 	subseq	r0, r0, r1
    2cf0:	00000000 	andeq	r0, r0, r0
    2cf4:	32000000 	andcc	r0, r0, #0
    2cf8:	4200001e 	andmi	r0, r0, #30
    2cfc:	0100001e 	tsteq	r0, lr, lsl r0
    2d00:	00005000 	andeq	r5, r0, r0
    2d04:	00000000 	andeq	r0, r0, r0
    2d08:	1b6e0000 	blne	1b82d10 <__ccfg+0x1b62d68>
    2d0c:	1b8a0000 	blne	fe282d14 <_estack+0xde27dd14>
    2d10:	00010000 	andeq	r0, r1, r0
    2d14:	001e545e 	andseq	r5, lr, lr, asr r4
    2d18:	001e5600 	andseq	r5, lr, r0, lsl #12
    2d1c:	5e000100 	adfpls	f0, f0, f0
	...
    2d28:	00001e80 	andeq	r1, r0, r0, lsl #29
    2d2c:	00001e92 	muleq	r0, r2, lr
    2d30:	00700007 	rsbseq	r0, r0, r7
    2d34:	263f243f 			; <UNDEFINED> instruction: 0x263f243f
    2d38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d3c:	00000000 	andeq	r0, r0, r0
    2d40:	001e8800 	andseq	r8, lr, r0, lsl #16
    2d44:	001e9000 	andseq	r9, lr, r0
    2d48:	72000d00 	andvc	r0, r0, #0, 26
    2d4c:	00717a80 	rsbseq	r7, r1, r0, lsl #21
    2d50:	26482448 	strbcs	r2, [r8], -r8, asr #8
    2d54:	9f26341e 	svcls	0x0026341e
    2d58:	00001e90 	muleq	r0, r0, lr
    2d5c:	00001eac 	andeq	r1, r0, ip, lsr #29
    2d60:	0071000c 	rsbseq	r0, r1, ip
    2d64:	26482448 	strbcs	r2, [r8], -r8, asr #8
    2d68:	341e0072 	ldrcc	r0, [lr], #-114	; 0xffffff8e
    2d6c:	00009f26 	andeq	r9, r0, r6, lsr #30
	...
    2d7c:	00010000 	andeq	r0, r1, r0
    2d80:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2d90:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2d9c:	00001ed4 	ldrdeq	r1, [r0], -r4
    2da0:	00001f12 	andeq	r1, r0, r2, lsl pc
    2da4:	12500001 	subsne	r0, r0, #1
    2da8:	7400001f 	strvc	r0, [r0], #-31	; 0xffffffe1
    2dac:	0100001f 	tsteq	r0, pc, lsl r0
    2db0:	1f745500 	svcne	0x00745500
    2db4:	1fa80000 	svcne	0x00a80000
    2db8:	00040000 	andeq	r0, r4, r0
    2dbc:	9f5001f3 	svcls	0x005001f3
	...
    2dc8:	00001f10 	andeq	r1, r0, r0, lsl pc
    2dcc:	00001f74 	andeq	r1, r0, r4, ror pc
    2dd0:	00540001 	subseq	r0, r4, r1
    2dd4:	00000000 	andeq	r0, r0, r0
    2dd8:	26000000 	strcs	r0, [r0], -r0
    2ddc:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    2de0:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    2de4:	0a007300 	beq	1f9ec <__exidx_end+0x1cd78>
    2de8:	9f1affff 	svcls	0x001affff
	...
    2df4:	00001f36 	andeq	r1, r0, r6, lsr pc
    2df8:	00001f50 	andeq	r1, r0, r0, asr pc
    2dfc:	00530001 	subseq	r0, r3, r1
    2e00:	00000000 	andeq	r0, r0, r0
    2e04:	3a000000 	bcc	2e0c <__exidx_end+0x198>
    2e08:	4600001f 			; <UNDEFINED> instruction: 0x4600001f
    2e0c:	0100001f 	tsteq	r0, pc, lsl r0
    2e10:	1f465200 	svcne	0x00465200
    2e14:	1f4a0000 	svcne	0x004a0000
    2e18:	00030000 	andeq	r0, r3, r0
    2e1c:	4a9f0671 	bmi	fe7c47e8 <_estack+0xde7bf7e8>
    2e20:	5200001f 	andpl	r0, r0, #31
    2e24:	0100001f 	tsteq	r0, pc, lsl r0
    2e28:	00005200 	andeq	r5, r0, r0, lsl #4
    2e2c:	00000000 	andeq	r0, r0, r0
    2e30:	1fae0000 	svcne	0x00ae0000
    2e34:	20280000 	eorcs	r0, r8, r0
    2e38:	00010000 	andeq	r0, r1, r0
    2e3c:	00000054 	andeq	r0, r0, r4, asr r0
    2e40:	00000000 	andeq	r0, r0, r0
    2e44:	00201400 	eoreq	r1, r0, r0, lsl #8
    2e48:	00201e00 	eoreq	r1, r0, r0, lsl #28
    2e4c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e58:	0000204c 	andeq	r2, r0, ip, asr #32
    2e5c:	00002072 	andeq	r2, r0, r2, ror r0
    2e60:	72500001 	subsvc	r0, r0, #1
    2e64:	c8000020 	stmdagt	r0, {r5}
    2e68:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    2e6c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2e70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e74:	00000000 	andeq	r0, r0, r0
    2e78:	00207400 	eoreq	r7, r0, r0, lsl #8
    2e7c:	0020a800 	eoreq	sl, r0, r0, lsl #16
    2e80:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e8c:	00002078 	andeq	r2, r0, r8, ror r0
    2e90:	00002086 	andeq	r2, r0, r6, lsl #1
    2e94:	86510001 	ldrbhi	r0, [r1], -r1
    2e98:	88000020 	stmdahi	r0, {r5}
    2e9c:	06000020 	streq	r0, [r0], -r0, lsr #32
    2ea0:	73007200 	movwvc	r7, #512	; 0x200
    2ea4:	889f1c00 	ldmhi	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    2ea8:	8e000020 	cdphi	0, 0, cr0, cr0, cr0, {1}
    2eac:	01000020 	tsteq	r0, r0, lsr #32
    2eb0:	00005100 	andeq	r5, r0, r0, lsl #2
    2eb4:	00000000 	andeq	r0, r0, r0
    2eb8:	20640000 	rsbcs	r0, r4, r0
    2ebc:	20760000 	rsbscs	r0, r6, r0
    2ec0:	00010000 	andeq	r0, r1, r0
    2ec4:	00000053 	andeq	r0, r0, r3, asr r0
    2ec8:	00000000 	andeq	r0, r0, r0
    2ecc:	0020c800 	eoreq	ip, r0, r0, lsl #16
    2ed0:	0020eb00 	eoreq	lr, r0, r0, lsl #22
    2ed4:	50000100 	andpl	r0, r0, r0, lsl #2
    2ed8:	000020eb 	andeq	r2, r0, fp, ror #1
    2edc:	000020f6 	strdeq	r2, [r0], -r6
    2ee0:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
    2ee4:	fe000020 	cdp2	0, 0, cr0, cr0, cr0, {1}
    2ee8:	01000020 	tsteq	r0, r0, lsr #32
    2eec:	20fe5000 	rscscs	r5, lr, r0
    2ef0:	214a0000 	mrscs	r0, (UNDEF: 74)
    2ef4:	00010000 	andeq	r0, r1, r0
    2ef8:	00000054 	andeq	r0, r0, r4, asr r0
    2efc:	00000000 	andeq	r0, r0, r0
    2f00:	00210400 	eoreq	r0, r1, r0, lsl #8
    2f04:	00210800 	eoreq	r0, r1, r0, lsl #16
    2f08:	53000100 	movwpl	r0, #256	; 0x100
    2f0c:	0000210a 	andeq	r2, r0, sl, lsl #2
    2f10:	00002118 	andeq	r2, r0, r8, lsl r1
    2f14:	1a530001 	bne	14c2f20 <__ccfg+0x14a2f78>
    2f18:	22000021 	andcs	r0, r0, #33	; 0x21
    2f1c:	01000021 	tsteq	r0, r1, lsr #32
    2f20:	00005300 	andeq	r5, r0, r0, lsl #6
    2f24:	00000000 	andeq	r0, r0, r0
    2f28:	21040000 	mrscs	r0, (UNDEF: 4)
    2f2c:	21380000 	teqcs	r8, r0
    2f30:	00050000 	andeq	r0, r5, r0
    2f34:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    2f38:	0021389f 	mlaeq	r1, pc, r8, r3	; <UNPREDICTABLE>
    2f3c:	00217400 	eoreq	r7, r1, r0, lsl #8
    2f40:	f3000600 	vmax.u8	d0, d0, d0
    2f44:	264c5001 	strbcs	r5, [ip], -r1
    2f48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f4c:	00000000 	andeq	r0, r0, r0
    2f50:	0020fe00 	eoreq	pc, r0, r0, lsl #28
    2f54:	00210800 	eoreq	r0, r1, r0, lsl #16
    2f58:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f64:	00002174 	andeq	r2, r0, r4, ror r1
    2f68:	00002188 	andeq	r2, r0, r8, lsl #3
    2f6c:	88500001 	ldmdahi	r0, {r0}^
    2f70:	d0000021 	andle	r0, r0, r1, lsr #32
    2f74:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    2f78:	5001f300 	andpl	pc, r1, r0, lsl #6
    2f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	00217a00 	eoreq	r7, r1, r0, lsl #20
    2f88:	00218200 	eoreq	r8, r1, r0, lsl #4
    2f8c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f98:	0000217e 	andeq	r2, r0, lr, ror r1
    2f9c:	00002190 	muleq	r0, r0, r1
    2fa0:	90520001 	subsls	r0, r2, r1
    2fa4:	92000021 	andls	r0, r0, #33	; 0x21
    2fa8:	05000021 	streq	r0, [r0, #-33]	; 0xffffffdf
    2fac:	31007200 	mrscc	r7, R8_usr
    2fb0:	21929f25 	orrscs	r9, r2, r5, lsr #30
    2fb4:	21980000 	orrscs	r0, r8, r0
    2fb8:	00010000 	andeq	r0, r1, r0
    2fbc:	00219c52 	eoreq	r9, r1, r2, asr ip
    2fc0:	0021ae00 	eoreq	sl, r1, r0, lsl #28
    2fc4:	52000100 	andpl	r0, r0, #0, 2
    2fc8:	000021b2 			; <UNDEFINED> instruction: 0x000021b2
    2fcc:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    2fd0:	be520001 	cdplt	0, 5, cr0, cr2, cr1, {0}
    2fd4:	d0000021 	andle	r0, r0, r1, lsr #32
    2fd8:	01000021 	tsteq	r0, r1, lsr #32
    2fdc:	00005200 	andeq	r5, r0, r0, lsl #4
    2fe0:	00000000 	andeq	r0, r0, r0
    2fe4:	21820000 	orrcs	r0, r2, r0
    2fe8:	218c0000 	orrcs	r0, ip, r0
    2fec:	00010000 	andeq	r0, r1, r0
    2ff0:	00218c53 	eoreq	r8, r1, r3, asr ip
    2ff4:	00218e00 	eoreq	r8, r1, r0, lsl #28
    2ff8:	73000500 	movwvc	r0, #1280	; 0x500
    2ffc:	9f253100 	svcls	0x00253100
    3000:	0000218e 	andeq	r2, r0, lr, lsl #3
    3004:	00002190 	muleq	r0, r0, r1
    3008:	90530001 	subsls	r0, r3, r1
    300c:	9c000021 	stcls	0, cr0, [r0], {33}	; 0x21
    3010:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    3014:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3018:	00219c9f 	mlaeq	r1, pc, ip, r9	; <UNPREDICTABLE>
    301c:	0021a200 	eoreq	sl, r1, r0, lsl #4
    3020:	53000100 	movwpl	r0, #256	; 0x100
    3024:	000021a6 	andeq	r2, r0, r6, lsr #3
    3028:	000021ac 	andeq	r2, r0, ip, lsr #3
    302c:	ac530001 	mrrcge	0, 0, r0, r3, cr1
    3030:	be000021 	cdplt	0, 0, cr0, cr0, cr1, {1}
    3034:	02000021 	andeq	r0, r0, #33	; 0x21
    3038:	be9f3100 	fmllte	f3, f7, f0
    303c:	d0000021 	andle	r0, r0, r1, lsr #32
    3040:	01000021 	tsteq	r0, r1, lsr #32
    3044:	00005300 	andeq	r5, r0, r0, lsl #6
    3048:	00000000 	andeq	r0, r0, r0
    304c:	21820000 	orrcs	r0, r2, r0
    3050:	21880000 	orrcs	r0, r8, r0
    3054:	00020000 	andeq	r0, r2, r0
    3058:	21889f30 	orrcs	r9, r8, r0, lsr pc
    305c:	21c40000 	biccs	r0, r4, r0
    3060:	00010000 	andeq	r0, r1, r0
    3064:	00000050 	andeq	r0, r0, r0, asr r0
    3068:	00000000 	andeq	r0, r0, r0
    306c:	0021c400 	eoreq	ip, r1, r0, lsl #8
    3070:	0021c800 	eoreq	ip, r1, r0, lsl #16
    3074:	72000800 	andvc	r0, r0, #0, 16
    3078:	73244000 			; <UNDEFINED> instruction: 0x73244000
    307c:	c89f2100 	ldmgt	pc, {r8, sp}	; <UNPREDICTABLE>
    3080:	d0000021 	andle	r0, r0, r1, lsr #32
    3084:	01000021 	tsteq	r0, r1, lsr #32
    3088:	00005000 	andeq	r5, r0, r0
    308c:	00000000 	andeq	r0, r0, r0
    3090:	21da0000 	bicscs	r0, sl, r0
    3094:	21de0000 	bicscs	r0, lr, r0
    3098:	000a0000 	andeq	r0, sl, r0
    309c:	1a330070 	bne	cc3264 <__ccfg+0xca32bc>
    30a0:	00732438 	rsbseq	r2, r3, r8, lsr r4
    30a4:	21e29f21 	mvncs	r9, r1, lsr #30
    30a8:	21e80000 	mvncs	r0, r0
    30ac:	00010000 	andeq	r0, r1, r0
    30b0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    30c0:	70000700 	andvc	r0, r0, r0, lsl #14
    30c4:	3fff0a00 	svccc	0x00ff0a00
    30c8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    30cc:	00000000 	andeq	r0, r0, r0
    30d0:	21ec0000 	mvncs	r0, r0
    30d4:	21f00000 	mvnscs	r0, r0
    30d8:	000f0000 	andeq	r0, pc, r0
    30dc:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    30e0:	1100701a 	tstne	r0, sl, lsl r0
    30e4:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    30e8:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    30ec:	00000000 	andeq	r0, r0, r0
    30f0:	ec000000 	stc	0, cr0, [r0], {-0}
    30f4:	f0000021 			; <UNDEFINED> instruction: 0xf0000021
    30f8:	01000021 	tsteq	r0, r1, lsr #32
    30fc:	00005000 	andeq	r5, r0, r0
    3100:	00000000 	andeq	r0, r0, r0
    3104:	21fc0000 	mvnscs	r0, r0
    3108:	22000000 	andcs	r0, r0, #0
    310c:	000f0000 	andeq	r0, pc, r0
    3110:	3f080070 	svccc	0x00080070
    3114:	0c00701a 	stceq	0, cr7, [r0], {26}
    3118:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    311c:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    3120:	00000000 	andeq	r0, r0, r0
    3124:	fc000000 	stc2	0, cr0, [r0], {-0}
    3128:	00000021 	andeq	r0, r0, r1, lsr #32
    312c:	01000022 	tsteq	r0, r2, lsr #32
    3130:	00005000 	andeq	r5, r0, r0
    3134:	00000000 	andeq	r0, r0, r0
    3138:	220c0000 	andcs	r0, ip, #0
    313c:	22620000 	rsbcs	r0, r2, #0
    3140:	00010000 	andeq	r0, r1, r0
    3144:	00226250 	eoreq	r6, r2, r0, asr r2
    3148:	00227000 	eoreq	r7, r2, r0
    314c:	f3000400 	vshl.u8	d0, d0, d0
    3150:	009f5001 	addseq	r5, pc, r1
    3154:	00000000 	andeq	r0, r0, r0
    3158:	4c000000 	stcmi	0, cr0, [r0], {-0}
    315c:	54000022 	strpl	r0, [r0], #-34	; 0xffffffde
    3160:	17000022 	strne	r0, [r0, -r2, lsr #32]
    3164:	0a007400 	beq	2016c <__ccfg+0x1c4>
    3168:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    316c:	1af00800 	bne	ffc05174 <_estack+0xdfc00174>
    3170:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    3174:	00732124 	rsbseq	r2, r3, r4, lsr #2
    3178:	9f212440 	svcls	0x00212440
    317c:	00002258 	andeq	r2, r0, r8, asr r2
    3180:	00002270 	andeq	r2, r0, r0, ror r2
    3184:	00530001 	subseq	r0, r3, r1
    3188:	00000000 	andeq	r0, r0, r0
    318c:	14000000 	strne	r0, [r0], #-0
    3190:	5e000022 	cdppl	0, 0, cr0, cr0, cr2, {1}
    3194:	01000022 	tsteq	r0, r2, lsr #32
    3198:	00005400 	andeq	r5, r0, r0, lsl #8
    319c:	00000000 	andeq	r0, r0, r0
    31a0:	221a0000 	andscs	r0, sl, #0
    31a4:	222e0000 	eorcs	r0, lr, #0
    31a8:	00010000 	andeq	r0, r1, r0
    31ac:	00222e52 	eoreq	r2, r2, r2, asr lr
    31b0:	00223a00 	eoreq	r3, r2, r0, lsl #20
    31b4:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    31b8:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    31bc:	00224c9f 	mlaeq	r2, pc, ip, r4	; <UNPREDICTABLE>
    31c0:	00225400 	eoreq	r5, r2, r0, lsl #8
    31c4:	52000100 	andpl	r0, r0, #0, 2
	...
    31d0:	00002222 	andeq	r2, r0, r2, lsr #4
    31d4:	00002240 	andeq	r2, r0, r0, asr #4
    31d8:	40530001 	subsmi	r0, r3, r1
    31dc:	4c000022 	stcmi	0, cr0, [r0], {34}	; 0x22
    31e0:	06000022 	streq	r0, [r0], -r2, lsr #32
    31e4:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    31e8:	4c9f24f0 	cfldrsmi	mvf2, [pc], {240}	; 0xf0
    31ec:	58000022 	stmdapl	r0, {r1, r5}
    31f0:	01000022 	tsteq	r0, r2, lsr #32
    31f4:	00005300 	andeq	r5, r0, r0, lsl #6
    31f8:	00000000 	andeq	r0, r0, r0
    31fc:	222c0000 	eorcs	r0, ip, #0
    3200:	222e0000 	eorcs	r0, lr, #0
    3204:	00060000 	andeq	r0, r6, r0
    3208:	00720076 	rsbseq	r0, r2, r6, ror r0
    320c:	222e9f22 	eorcs	r9, lr, #34, 30	; 0x88
    3210:	22360000 	eorscs	r0, r6, #0
    3214:	00010000 	andeq	r0, r1, r0
    3218:	00223652 	eoreq	r3, r2, r2, asr r6
    321c:	00223800 	eoreq	r3, r2, r0, lsl #16
    3220:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    3224:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3228:	9f220076 	svcls	0x00220076
    322c:	00002238 	andeq	r2, r0, r8, lsr r2
    3230:	0000223a 	andeq	r2, r0, sl, lsr r2
    3234:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
    3238:	40000022 	andmi	r0, r0, r2, lsr #32
    323c:	06000022 	streq	r0, [r0], -r2, lsr #32
    3240:	73007100 	movwvc	r7, #256	; 0x100
    3244:	409f2200 	addsmi	r2, pc, r0, lsl #4
    3248:	48000022 	stmdami	r0, {r1, r5}
    324c:	01000022 	tsteq	r0, r2, lsr #32
    3250:	22485300 	subcs	r5, r8, #0, 6
    3254:	224a0000 	subcs	r0, sl, #0
    3258:	00090000 	andeq	r0, r9, r0
    325c:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3260:	22007124 	andcs	r7, r0, #36, 2
    3264:	00224a9f 	mlaeq	r2, pc, sl, r4	; <UNPREDICTABLE>
    3268:	00224c00 	eoreq	r4, r2, r0, lsl #24
    326c:	30000200 	andcc	r0, r0, r0, lsl #4
    3270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3274:	00000000 	andeq	r0, r0, r0
    3278:	00227000 	eoreq	r7, r2, r0
    327c:	00227800 	eoreq	r7, r2, r0, lsl #16
    3280:	50000100 	andpl	r0, r0, r0, lsl #2
    3284:	00002278 	andeq	r2, r0, r8, ror r2
    3288:	00002284 	andeq	r2, r0, r4, lsl #5
    328c:	01f30004 	mvnseq	r0, r4
    3290:	00009f50 	andeq	r9, r0, r0, asr pc
    3294:	00000000 	andeq	r0, r0, r0
    3298:	22700000 	rsbscs	r0, r0, #0
    329c:	227e0000 	rsbscs	r0, lr, #0
    32a0:	00020000 	andeq	r0, r2, r0
    32a4:	227e9f30 	rsbscs	r9, lr, #48, 30	; 0xc0
    32a8:	22840000 	addcs	r0, r4, #0
    32ac:	00010000 	andeq	r0, r1, r0
    32b0:	00000050 	andeq	r0, r0, r0, asr r0
    32b4:	00000000 	andeq	r0, r0, r0
    32b8:	00227200 	eoreq	r7, r2, r0, lsl #4
    32bc:	00227800 	eoreq	r7, r2, r0, lsl #16
    32c0:	50000100 	andpl	r0, r0, r0, lsl #2
    32c4:	00002278 	andeq	r2, r0, r8, ror r2
    32c8:	00002284 	andeq	r2, r0, r4, lsl #5
    32cc:	01f30004 	mvnseq	r0, r4
    32d0:	00009f50 	andeq	r9, r0, r0, asr pc
    32d4:	00000000 	andeq	r0, r0, r0
    32d8:	227c0000 	rsbscs	r0, ip, #0
    32dc:	227e0000 	rsbscs	r0, lr, #0
    32e0:	00010000 	andeq	r0, r1, r0
    32e4:	00000050 	andeq	r0, r0, r0, asr r0
    32e8:	00000000 	andeq	r0, r0, r0
    32ec:	00228400 	eoreq	r8, r2, r0, lsl #8
    32f0:	00228c00 	eoreq	r8, r2, r0, lsl #24
    32f4:	50000100 	andpl	r0, r0, r0, lsl #2
    32f8:	0000228c 	andeq	r2, r0, ip, lsl #5
    32fc:	00002298 	muleq	r0, r8, r2
    3300:	01f30004 	mvnseq	r0, r4
    3304:	00009f50 	andeq	r9, r0, r0, asr pc
    3308:	00000000 	andeq	r0, r0, r0
    330c:	22840000 	addcs	r0, r4, #0
    3310:	22920000 	addscs	r0, r2, #0
    3314:	00020000 	andeq	r0, r2, r0
    3318:	22929f31 	addscs	r9, r2, #49, 30	; 0xc4
    331c:	22980000 	addscs	r0, r8, #0
    3320:	00010000 	andeq	r0, r1, r0
    3324:	00000050 	andeq	r0, r0, r0, asr r0
    3328:	00000000 	andeq	r0, r0, r0
    332c:	00228600 	eoreq	r8, r2, r0, lsl #12
    3330:	00228c00 	eoreq	r8, r2, r0, lsl #24
    3334:	50000100 	andpl	r0, r0, r0, lsl #2
    3338:	0000228c 	andeq	r2, r0, ip, lsl #5
    333c:	00002298 	muleq	r0, r8, r2
    3340:	01f30004 	mvnseq	r0, r4
    3344:	00009f50 	andeq	r9, r0, r0, asr pc
    3348:	00000000 	andeq	r0, r0, r0
    334c:	22900000 	addscs	r0, r0, #0
    3350:	22920000 	addscs	r0, r2, #0
    3354:	00010000 	andeq	r0, r1, r0
    3358:	00000050 	andeq	r0, r0, r0, asr r0
    335c:	00000000 	andeq	r0, r0, r0
    3360:	00229800 	eoreq	r9, r2, r0, lsl #16
    3364:	0022a000 	eoreq	sl, r2, r0
    3368:	50000100 	andpl	r0, r0, r0, lsl #2
    336c:	000022a0 	andeq	r2, r0, r0, lsr #5
    3370:	000022ac 	andeq	r2, r0, ip, lsr #5
    3374:	01f30004 	mvnseq	r0, r4
    3378:	00009f50 	andeq	r9, r0, r0, asr pc
    337c:	00000000 	andeq	r0, r0, r0
    3380:	22980000 	addscs	r0, r8, #0
    3384:	22a60000 	adccs	r0, r6, #0
    3388:	00020000 	andeq	r0, r2, r0
    338c:	22a69f31 	adccs	r9, r6, #49, 30	; 0xc4
    3390:	22ac0000 	adccs	r0, ip, #0
    3394:	00010000 	andeq	r0, r1, r0
    3398:	00000050 	andeq	r0, r0, r0, asr r0
    339c:	00000000 	andeq	r0, r0, r0
    33a0:	00229a00 	eoreq	r9, r2, r0, lsl #20
    33a4:	0022a000 	eoreq	sl, r2, r0
    33a8:	50000100 	andpl	r0, r0, r0, lsl #2
    33ac:	000022a0 	andeq	r2, r0, r0, lsr #5
    33b0:	000022ac 	andeq	r2, r0, ip, lsr #5
    33b4:	01f30004 	mvnseq	r0, r4
    33b8:	00009f50 	andeq	r9, r0, r0, asr pc
    33bc:	00000000 	andeq	r0, r0, r0
    33c0:	22a40000 	adccs	r0, r4, #0
    33c4:	22a60000 	adccs	r0, r6, #0
    33c8:	00010000 	andeq	r0, r1, r0
    33cc:	00000050 	andeq	r0, r0, r0, asr r0
    33d0:	00000000 	andeq	r0, r0, r0
    33d4:	0022ac00 	eoreq	sl, r2, r0, lsl #24
    33d8:	0022b800 	eoreq	fp, r2, r0, lsl #16
    33dc:	50000100 	andpl	r0, r0, r0, lsl #2
    33e0:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    33e4:	000022d4 	ldrdeq	r2, [r0], -r4
    33e8:	01f30004 	mvnseq	r0, r4
    33ec:	00009f50 	andeq	r9, r0, r0, asr pc
    33f0:	00000000 	andeq	r0, r0, r0
    33f4:	22ac0000 	adccs	r0, ip, #0
    33f8:	22ce0000 	sbccs	r0, lr, #0
    33fc:	00020000 	andeq	r0, r2, r0
    3400:	22ce9f30 	sbccs	r9, lr, #48, 30	; 0xc0
    3404:	22d40000 	sbcscs	r0, r4, #0
    3408:	00010000 	andeq	r0, r1, r0
    340c:	00000050 	andeq	r0, r0, r0, asr r0
    3410:	00000000 	andeq	r0, r0, r0
    3414:	0022ae00 	eoreq	sl, r2, r0, lsl #28
    3418:	0022b800 	eoreq	fp, r2, r0, lsl #16
    341c:	50000100 	andpl	r0, r0, r0, lsl #2
    3420:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    3424:	000022d4 	ldrdeq	r2, [r0], -r4
    3428:	01f30004 	mvnseq	r0, r4
    342c:	00009f50 	andeq	r9, r0, r0, asr pc
    3430:	00000000 	andeq	r0, r0, r0
    3434:	22c00000 	sbccs	r0, r0, #0
    3438:	22c80000 	sbccs	r0, r8, #0
    343c:	00100000 	andseq	r0, r0, r0
    3440:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    3444:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    3448:	00722432 	rsbseq	r2, r2, r2, lsr r4
    344c:	9f212438 	svcls	0x00212438
    3450:	000022ca 	andeq	r2, r0, sl, asr #5
    3454:	000022ce 	andeq	r2, r0, lr, asr #5
    3458:	00500001 	subseq	r0, r0, r1
    345c:	00000000 	andeq	r0, r0, r0
    3460:	b4000000 	strlt	r0, [r0], #-0
    3464:	c8000022 	stmdagt	r0, {r1, r5}
    3468:	01000022 	tsteq	r0, r2, lsr #32
    346c:	00005300 	andeq	r5, r0, r0, lsl #6
    3470:	00000000 	andeq	r0, r0, r0
    3474:	22d80000 	sbcscs	r0, r8, #0
    3478:	22dc0000 	sbcscs	r0, ip, #0
    347c:	00090000 	andeq	r0, r9, r0
    3480:	40480070 	submi	r0, r8, r0, ror r0
    3484:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    3488:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    348c:	00000000 	andeq	r0, r0, r0
    3490:	0022e400 	eoreq	lr, r2, r0, lsl #8
    3494:	0022f000 	eoreq	pc, r2, r0
    3498:	50000100 	andpl	r0, r0, r0, lsl #2
    349c:	000022f0 	strdeq	r2, [r0], -r0
    34a0:	00002310 	andeq	r2, r0, r0, lsl r3
    34a4:	01f30004 	mvnseq	r0, r4
    34a8:	00009f50 	andeq	r9, r0, r0, asr pc
    34ac:	00000000 	andeq	r0, r0, r0
    34b0:	22e40000 	rsccs	r0, r4, #0
    34b4:	23060000 	movwcs	r0, #24576	; 0x6000
    34b8:	00060000 	andeq	r0, r6, r0
    34bc:	3f80000c 	svccc	0x0080000c
    34c0:	23069f40 	movwcs	r9, #28480	; 0x6f40
    34c4:	23100000 	tstcs	r0, #0
    34c8:	00010000 	andeq	r0, r1, r0
    34cc:	00000050 	andeq	r0, r0, r0, asr r0
    34d0:	00000000 	andeq	r0, r0, r0
    34d4:	0022e600 	eoreq	lr, r2, r0, lsl #12
    34d8:	0022f000 	eoreq	pc, r2, r0
    34dc:	50000100 	andpl	r0, r0, r0, lsl #2
    34e0:	000022f0 	strdeq	r2, [r0], -r0
    34e4:	00002310 	andeq	r2, r0, r0, lsl r3
    34e8:	01f30004 	mvnseq	r0, r4
    34ec:	00009f50 	andeq	r9, r0, r0, asr pc
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	22f40000 	rscscs	r0, r4, #0
    34f8:	22fa0000 	rscscs	r0, sl, #0
    34fc:	00100000 	andseq	r0, r0, r0
    3500:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    3504:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    3508:	00722440 	rsbseq	r2, r2, r0, asr #8
    350c:	9f212446 	svcls	0x00212446
    3510:	00002304 	andeq	r2, r0, r4, lsl #6
    3514:	00002306 	andeq	r2, r0, r6, lsl #6
    3518:	00500001 	subseq	r0, r0, r1
    351c:	00000000 	andeq	r0, r0, r0
    3520:	ec000000 	stc	0, cr0, [r0], {-0}
    3524:	fa000022 	blx	35b4 <__exidx_end+0x940>
    3528:	01000022 	tsteq	r0, r2, lsr #32
    352c:	00005300 	andeq	r5, r0, r0, lsl #6
    3530:	00000000 	andeq	r0, r0, r0
    3534:	23100000 	tstcs	r0, #0
    3538:	23180000 	tstcs	r8, #0
    353c:	00010000 	andeq	r0, r1, r0
    3540:	00231850 	eoreq	r1, r3, r0, asr r8
    3544:	00232400 	eoreq	r2, r3, r0, lsl #8
    3548:	f3000400 	vshl.u8	d0, d0, d0
    354c:	009f5001 	addseq	r5, pc, r1
    3550:	00000000 	andeq	r0, r0, r0
    3554:	10000000 	andne	r0, r0, r0
    3558:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    355c:	02000023 	andeq	r0, r0, #35	; 0x23
    3560:	1e9f3000 	cdpne	0, 9, cr3, cr15, cr0, {0}
    3564:	24000023 	strcs	r0, [r0], #-35	; 0xffffffdd
    3568:	01000023 	tsteq	r0, r3, lsr #32
    356c:	00005000 	andeq	r5, r0, r0
    3570:	00000000 	andeq	r0, r0, r0
    3574:	23120000 	tstcs	r2, #0
    3578:	23180000 	tstcs	r8, #0
    357c:	00010000 	andeq	r0, r1, r0
    3580:	00231850 	eoreq	r1, r3, r0, asr r8
    3584:	00232400 	eoreq	r2, r3, r0, lsl #8
    3588:	f3000400 	vshl.u8	d0, d0, d0
    358c:	009f5001 	addseq	r5, pc, r1
    3590:	00000000 	andeq	r0, r0, r0
    3594:	1c000000 	stcne	0, cr0, [r0], {-0}
    3598:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    359c:	01000023 	tsteq	r0, r3, lsr #32
    35a0:	00005000 	andeq	r5, r0, r0
    35a4:	00000000 	andeq	r0, r0, r0
    35a8:	23240000 			; <UNDEFINED> instruction: 0x23240000
    35ac:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    35b0:	00010000 	andeq	r0, r1, r0
    35b4:	00232c50 	eoreq	r2, r3, r0, asr ip
    35b8:	00233800 	eoreq	r3, r3, r0, lsl #16
    35bc:	f3000400 	vshl.u8	d0, d0, d0
    35c0:	009f5001 	addseq	r5, pc, r1
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	24000000 	strcs	r0, [r0], #-0
    35cc:	32000023 	andcc	r0, r0, #35	; 0x23
    35d0:	02000023 	andeq	r0, r0, #35	; 0x23
    35d4:	329f3000 	addscc	r3, pc, #0
    35d8:	38000023 	stmdacc	r0, {r0, r1, r5}
    35dc:	01000023 	tsteq	r0, r3, lsr #32
    35e0:	00005000 	andeq	r5, r0, r0
    35e4:	00000000 	andeq	r0, r0, r0
    35e8:	23260000 			; <UNDEFINED> instruction: 0x23260000
    35ec:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    35f0:	00010000 	andeq	r0, r1, r0
    35f4:	00232c50 	eoreq	r2, r3, r0, asr ip
    35f8:	00233800 	eoreq	r3, r3, r0, lsl #16
    35fc:	f3000400 	vshl.u8	d0, d0, d0
    3600:	009f5001 	addseq	r5, pc, r1
    3604:	00000000 	andeq	r0, r0, r0
    3608:	30000000 	andcc	r0, r0, r0
    360c:	32000023 	andcc	r0, r0, #35	; 0x23
    3610:	01000023 	tsteq	r0, r3, lsr #32
    3614:	00005000 	andeq	r5, r0, r0
    3618:	00000000 	andeq	r0, r0, r0
    361c:	23380000 	teqcs	r8, #0
    3620:	233e0000 	teqcs	lr, #0
    3624:	00010000 	andeq	r0, r1, r0
    3628:	00233e50 	eoreq	r3, r3, r0, asr lr
    362c:	00242800 	eoreq	r2, r4, r0, lsl #16
    3630:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3634:	00002428 	andeq	r2, r0, r8, lsr #8
    3638:	00002448 	andeq	r2, r0, r8, asr #8
    363c:	01f30004 	mvnseq	r0, r4
    3640:	00009f50 	andeq	r9, r0, r0, asr pc
    3644:	00000000 	andeq	r0, r0, r0
    3648:	23380000 	teqcs	r8, #0
    364c:	23410000 	movtcs	r0, #4096	; 0x1000
    3650:	00010000 	andeq	r0, r1, r0
    3654:	00234151 	eoreq	r4, r3, r1, asr r1
    3658:	00244800 	eoreq	r4, r4, r0, lsl #16
    365c:	f3000400 	vshl.u8	d0, d0, d0
    3660:	009f5101 	addseq	r5, pc, r1, lsl #2
    3664:	00000000 	andeq	r0, r0, r0
    3668:	46000000 	strmi	r0, [r0], -r0
    366c:	4a000023 	bmi	3700 <__exidx_end+0xa8c>
    3670:	01000023 	tsteq	r0, r3, lsr #32
    3674:	234a5000 	movtcs	r5, #40960	; 0xa000
    3678:	234d0000 	movtcs	r0, #53248	; 0xd000
    367c:	00010000 	andeq	r0, r1, r0
    3680:	00235252 	eoreq	r5, r3, r2, asr r2
    3684:	00235600 	eoreq	r5, r3, r0, lsl #12
    3688:	50000100 	andpl	r0, r0, r0, lsl #2
    368c:	00002380 	andeq	r2, r0, r0, lsl #7
    3690:	00002382 	andeq	r2, r0, r2, lsl #7
    3694:	82500001 	subshi	r0, r0, #1
    3698:	85000023 	strhi	r0, [r0, #-35]	; 0xffffffdd
    369c:	01000023 	tsteq	r0, r3, lsr #32
    36a0:	238e5200 	orrcs	r5, lr, #0, 4
    36a4:	23900000 	orrscs	r0, r0, #0
    36a8:	00010000 	andeq	r0, r1, r0
    36ac:	00239050 	eoreq	r9, r3, r0, asr r0
    36b0:	00239300 	eoreq	r9, r3, r0, lsl #6
    36b4:	52000100 	andpl	r0, r0, #0, 2
    36b8:	0000239e 	muleq	r0, lr, r3
    36bc:	000023a0 	andeq	r2, r0, r0, lsr #7
    36c0:	a0500001 	subsge	r0, r0, r1
    36c4:	a3000023 	movwge	r0, #35	; 0x23
    36c8:	01000023 	tsteq	r0, r3, lsr #32
    36cc:	23aa5200 			; <UNDEFINED> instruction: 0x23aa5200
    36d0:	23ac0000 			; <UNDEFINED> instruction: 0x23ac0000
    36d4:	00010000 	andeq	r0, r1, r0
    36d8:	0023bc50 	eoreq	fp, r3, r0, asr ip
    36dc:	0023c000 	eoreq	ip, r3, r0
    36e0:	50000100 	andpl	r0, r0, r0, lsl #2
    36e4:	000023ce 	andeq	r2, r0, lr, asr #7
    36e8:	000023d0 	ldrdeq	r2, [r0], -r0
    36ec:	d0500001 	subsle	r0, r0, r1
    36f0:	d3000023 	movwle	r0, #35	; 0x23
    36f4:	01000023 	tsteq	r0, r3, lsr #32
    36f8:	23da5200 	bicscs	r5, sl, #0, 4
    36fc:	23dc0000 	bicscs	r0, ip, #0
    3700:	00010000 	andeq	r0, r1, r0
    3704:	0023ec50 	eoreq	lr, r3, r0, asr ip
    3708:	0023ee00 	eoreq	lr, r3, r0, lsl #28
    370c:	50000100 	andpl	r0, r0, r0, lsl #2
    3710:	000023fe 	strdeq	r2, [r0], -lr
    3714:	00002402 	andeq	r2, r0, r2, lsl #8
    3718:	16500001 	ldrbne	r0, [r0], -r1
    371c:	18000024 	stmdane	r0, {r2, r5}
    3720:	01000024 	tsteq	r0, r4, lsr #32
    3724:	24185000 	ldrcs	r5, [r8], #-0
    3728:	241b0000 	ldrcs	r0, [fp], #-0
    372c:	00010000 	andeq	r0, r1, r0
    3730:	00000052 	andeq	r0, r0, r2, asr r0
    3734:	00000000 	andeq	r0, r0, r0
    3738:	00236e00 	eoreq	r6, r3, r0, lsl #28
    373c:	00237400 	eoreq	r7, r3, r0, lsl #8
    3740:	72000700 	andvc	r0, r0, #0, 14
    3744:	3fff0a00 	svccc	0x00ff0a00
    3748:	00009f1a 	andeq	r9, r0, sl, lsl pc
    374c:	00000000 	andeq	r0, r0, r0
    3750:	24620000 	strbtcs	r0, [r2], #-0
    3754:	246c0000 	strbtcs	r0, [ip], #-0
    3758:	00090000 	andeq	r0, r9, r0
    375c:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    3760:	21200000 			; <UNDEFINED> instruction: 0x21200000
    3764:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3768:	00000000 	andeq	r0, r0, r0
    376c:	0024ac00 	eoreq	sl, r4, r0, lsl #24
    3770:	0024b400 	eoreq	fp, r4, r0, lsl #8
    3774:	50000100 	andpl	r0, r0, r0, lsl #2
    3778:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    377c:	000024d4 	ldrdeq	r2, [r0], -r4
    3780:	01f30004 	mvnseq	r0, r4
    3784:	00009f50 	andeq	r9, r0, r0, asr pc
    3788:	00000000 	andeq	r0, r0, r0
    378c:	24d40000 	ldrbcs	r0, [r4], #0
    3790:	24fc0000 	ldrbtcs	r0, [ip], #0
    3794:	00010000 	andeq	r0, r1, r0
    3798:	0024fc50 	eoreq	pc, r4, r0, asr ip	; <UNPREDICTABLE>
    379c:	00253c00 	eoreq	r3, r5, r0, lsl #24
    37a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    37a4:	0000253c 	andeq	r2, r0, ip, lsr r5
    37a8:	00002544 	andeq	r2, r0, r4, asr #10
    37ac:	44500001 	ldrbmi	r0, [r0], #-1
    37b0:	8e000025 	cdphi	0, 0, cr0, cr0, cr5, {1}
    37b4:	01000025 	tsteq	r0, r5, lsr #32
    37b8:	258e5400 	strcs	r5, [lr, #1024]	; 0x400
    37bc:	25ca0000 	strbcs	r0, [sl]
    37c0:	00040000 	andeq	r0, r4, r0
    37c4:	9f5001f3 	svcls	0x005001f3
    37c8:	000025ca 	andeq	r2, r0, sl, asr #11
    37cc:	000025ce 	andeq	r2, r0, lr, asr #11
    37d0:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    37d4:	24000025 	strcs	r0, [r0], #-37	; 0xffffffdb
    37d8:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    37dc:	5001f300 	andpl	pc, r1, r0, lsl #6
    37e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37e4:	00000000 	andeq	r0, r0, r0
    37e8:	0024ea00 	eoreq	lr, r4, r0, lsl #20
    37ec:	00252c00 	eoreq	r2, r5, r0, lsl #24
    37f0:	53000100 	movwpl	r0, #256	; 0x100
	...
    37fc:	0000255e 	andeq	r2, r0, lr, asr r5
    3800:	00002564 	andeq	r2, r0, r4, ror #10
    3804:	00500001 	subseq	r0, r0, r1
    3808:	00000000 	andeq	r0, r0, r0
    380c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3810:	90000025 	andls	r0, r0, r5, lsr #32
    3814:	01000025 	tsteq	r0, r5, lsr #32
    3818:	25905000 	ldrcs	r5, [r0]
    381c:	25a40000 	strcs	r0, [r4, #0]!
    3820:	00010000 	andeq	r0, r1, r0
    3824:	00000054 	andeq	r0, r0, r4, asr r0
    3828:	00000000 	andeq	r0, r0, r0
    382c:	0025a400 	eoreq	sl, r5, r0, lsl #8
    3830:	0025c400 	eoreq	ip, r5, r0, lsl #8
    3834:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3848:	00550001 	subseq	r0, r5, r1
    384c:	00000000 	andeq	r0, r0, r0
    3850:	03000000 	movweq	r0, #0
    3854:	9f7f7500 	svcls	0x007f7500
	...
    3860:	00550001 	subseq	r0, r5, r1
    3864:	00000000 	andeq	r0, r0, r0
    3868:	24000000 	strcs	r0, [r0], #-0
    386c:	43000026 	movwmi	r0, #38	; 0x26
    3870:	01000026 	tsteq	r0, r6, lsr #32
    3874:	26435000 	strbcs	r5, [r3], -r0
    3878:	27040000 	strcs	r0, [r4, -r0]
    387c:	00010000 	andeq	r0, r1, r0
    3880:	00270457 	eoreq	r0, r7, r7, asr r4
    3884:	00284400 	eoreq	r4, r8, r0, lsl #8
    3888:	f3000400 	vshl.u8	d0, d0, d0
    388c:	009f5001 	addseq	r5, pc, r1
    3890:	00000000 	andeq	r0, r0, r0
    3894:	44000000 	strmi	r0, [r0], #-0
    3898:	c4000026 	strgt	r0, [r0], #-38	; 0xffffffda
    389c:	01000027 	tsteq	r0, r7, lsr #32
    38a0:	27c65000 	strbcs	r5, [r6, r0]
    38a4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    38a8:	00010000 	andeq	r0, r1, r0
    38ac:	00000050 	andeq	r0, r0, r0, asr r0
    38b0:	00000000 	andeq	r0, r0, r0
    38b4:	0026ec00 	eoreq	lr, r6, r0, lsl #24
    38b8:	0026f000 	eoreq	pc, r6, r0
    38bc:	70000300 	andvc	r0, r0, r0, lsl #6
    38c0:	26f09f71 			; <UNDEFINED> instruction: 0x26f09f71
    38c4:	26f60000 	ldrbtcs	r0, [r6], r0
    38c8:	00010000 	andeq	r0, r1, r0
    38cc:	0026f651 	eoreq	pc, r6, r1, asr r6	; <UNPREDICTABLE>
    38d0:	00271600 	eoreq	r1, r7, r0, lsl #12
    38d4:	91000200 	mrsls	r0, R8_usr
    38d8:	00271654 	eoreq	r1, r7, r4, asr r6
    38dc:	00272200 	eoreq	r2, r7, r0, lsl #4
    38e0:	51000100 	mrspl	r0, (UNDEF: 16)
    38e4:	00002722 	andeq	r2, r0, r2, lsr #14
    38e8:	00002724 	andeq	r2, r0, r4, lsr #14
    38ec:	54910002 	ldrpl	r0, [r1], #2
    38f0:	00002724 	andeq	r2, r0, r4, lsr #14
    38f4:	00002726 	andeq	r2, r0, r6, lsr #14
    38f8:	26510001 	ldrbcs	r0, [r1], -r1
    38fc:	cc000027 	stcgt	0, cr0, [r0], {39}	; 0x27
    3900:	02000027 	andeq	r0, r0, #39	; 0x27
    3904:	00549100 	subseq	r9, r4, r0, lsl #2
    3908:	00000000 	andeq	r0, r0, r0
    390c:	50000000 	andpl	r0, r0, r0
    3910:	aa000026 	bge	39b0 <__exidx_end+0xd3c>
    3914:	01000026 	tsteq	r0, r6, lsr #32
    3918:	26b25100 	ldrtcs	r5, [r2], r0, lsl #2
    391c:	26b40000 	ldrtcs	r0, [r4], r0
    3920:	00010000 	andeq	r0, r1, r0
    3924:	00000051 	andeq	r0, r0, r1, asr r0
    3928:	00000000 	andeq	r0, r0, r0
    392c:	0026a200 	eoreq	sl, r6, r0, lsl #4
    3930:	0026b000 	eoreq	fp, r6, r0
    3934:	52000100 	andpl	r0, r0, #0, 2
    3938:	000026b2 			; <UNDEFINED> instruction: 0x000026b2
    393c:	00002794 	muleq	r0, r4, r7
    3940:	00520001 	subseq	r0, r2, r1
    3944:	00000000 	andeq	r0, r0, r0
    3948:	a2000000 	andge	r0, r0, #0
    394c:	8a000026 	bhi	39ec <__exidx_end+0xd78>
    3950:	01000027 	tsteq	r0, r7, lsr #32
    3954:	00005300 	andeq	r5, r0, r0, lsl #6
    3958:	00000000 	andeq	r0, r0, r0
    395c:	26480000 	strbcs	r0, [r8], -r0
    3960:	279e0000 	ldrcs	r0, [lr, r0]
    3964:	00010000 	andeq	r0, r1, r0
    3968:	00000055 	andeq	r0, r0, r5, asr r0
    396c:	00000000 	andeq	r0, r0, r0
    3970:	00264400 	eoreq	r4, r6, r0, lsl #8
    3974:	0026cc00 	eoreq	ip, r6, r0, lsl #24
    3978:	30000200 	andcc	r0, r0, r0, lsl #4
    397c:	0026cc9f 	mlaeq	r6, pc, ip, ip	; <UNPREDICTABLE>
    3980:	00280000 	eoreq	r0, r8, r0
    3984:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3990:	000026c4 	andeq	r2, r0, r4, asr #13
    3994:	000026ce 	andeq	r2, r0, lr, asr #13
    3998:	00510001 	subseq	r0, r1, r1
    399c:	00000000 	andeq	r0, r0, r0
    39a0:	ec000000 	stc	0, cr0, [r0], {-0}
    39a4:	3c000026 	stccc	0, cr0, [r0], {38}	; 0x26
    39a8:	02000027 	andeq	r0, r0, #39	; 0x27
    39ac:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    39b0:	5c000027 	stcpl	0, cr0, [r0], {39}	; 0x27
    39b4:	01000027 	tsteq	r0, r7, lsr #32
    39b8:	275c5100 	ldrbcs	r5, [ip, -r0, lsl #2]
    39bc:	27620000 	strbcs	r0, [r2, -r0]!
    39c0:	00020000 	andeq	r0, r2, r0
    39c4:	27629f30 			; <UNDEFINED> instruction: 0x27629f30
    39c8:	279c0000 	ldrcs	r0, [ip, r0]
    39cc:	00010000 	andeq	r0, r1, r0
    39d0:	00000051 	andeq	r0, r0, r1, asr r0
    39d4:	00000000 	andeq	r0, r0, r0
    39d8:	00271800 	eoreq	r1, r7, r0, lsl #16
    39dc:	00271c00 	eoreq	r1, r7, r0, lsl #24
    39e0:	5e000100 	adfpls	f0, f0, f0
    39e4:	00002724 	andeq	r2, r0, r4, lsr #14
    39e8:	00002726 	andeq	r2, r0, r6, lsr #14
    39ec:	265e0001 	ldrbcs	r0, [lr], -r1
    39f0:	2c000027 	stccs	0, cr0, [r0], {39}	; 0x27
    39f4:	01000027 	tsteq	r0, r7, lsr #32
    39f8:	272c5100 	strcs	r5, [ip, -r0, lsl #2]!
    39fc:	27340000 	ldrcs	r0, [r4, -r0]!
    3a00:	00030000 	andeq	r0, r3, r0
    3a04:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    3a08:	00000000 	andeq	r0, r0, r0
    3a0c:	ec000000 	stc	0, cr0, [r0], {-0}
    3a10:	16000026 	strne	r0, [r0], -r6, lsr #32
    3a14:	02000027 	andeq	r0, r0, #39	; 0x27
    3a18:	169f3000 	ldrne	r3, [pc], r0
    3a1c:	20000027 	andcs	r0, r0, r7, lsr #32
    3a20:	01000027 	tsteq	r0, r7, lsr #32
    3a24:	27205e00 	strcs	r5, [r0, -r0, lsl #28]!
    3a28:	27220000 	strcs	r0, [r2, -r0]!
    3a2c:	00050000 	andeq	r0, r5, r0
    3a30:	26380071 			; <UNDEFINED> instruction: 0x26380071
    3a34:	0027229f 	mlaeq	r7, pc, r2, r2	; <UNPREDICTABLE>
    3a38:	00272400 	eoreq	r2, r7, r0, lsl #8
    3a3c:	91000600 	tstls	r0, r0, lsl #12
    3a40:	26380654 			; <UNDEFINED> instruction: 0x26380654
    3a44:	0027249f 	mlaeq	r7, pc, r4, r2	; <UNPREDICTABLE>
    3a48:	00272600 	eoreq	r2, r7, r0, lsl #12
    3a4c:	5e000100 	adfpls	f0, f0, f0
    3a50:	00002726 	andeq	r2, r0, r6, lsr #14
    3a54:	0000275c 	andeq	r2, r0, ip, asr r7
    3a58:	54910006 	ldrpl	r0, [r1], #6
    3a5c:	9f263806 	svcls	0x00263806
    3a60:	0000275c 	andeq	r2, r0, ip, asr r7
    3a64:	00002762 	andeq	r2, r0, r2, ror #14
    3a68:	9f300002 	svcls	0x00300002
    3a6c:	00002762 	andeq	r2, r0, r2, ror #14
    3a70:	000027cc 	andeq	r2, r0, ip, asr #15
    3a74:	005e0001 	subseq	r0, lr, r1
    3a78:	00000000 	andeq	r0, r0, r0
    3a7c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3a80:	5c000027 	stcpl	0, cr0, [r0], {39}	; 0x27
    3a84:	01000027 	tsteq	r0, r7, lsr #32
    3a88:	00005c00 	andeq	r5, r0, r0, lsl #24
    3a8c:	00000000 	andeq	r0, r0, r0
    3a90:	27660000 	strbcs	r0, [r6, -r0]!
    3a94:	27cc0000 	strbcs	r0, [ip, r0]
    3a98:	00010000 	andeq	r0, r1, r0
    3a9c:	0000005a 	andeq	r0, r0, sl, asr r0
    3aa0:	00000000 	andeq	r0, r0, r0
    3aa4:	00276a00 	eoreq	r6, r7, r0, lsl #20
    3aa8:	0027a600 	eoreq	sl, r7, r0, lsl #12
    3aac:	5c000100 	stfpls	f0, [r0], {-0}
    3ab0:	000027a6 	andeq	r2, r0, r6, lsr #15
    3ab4:	000027aa 	andeq	r2, r0, sl, lsr #15
    3ab8:	00510001 	subseq	r0, r1, r1
    3abc:	00000000 	andeq	r0, r0, r0
    3ac0:	aa000000 	bge	3ac8 <__exidx_end+0xe54>
    3ac4:	b4000027 	strlt	r0, [r0], #-39	; 0xffffffd9
    3ac8:	17000027 	strne	r0, [r0, -r7, lsr #32]
    3acc:	12007100 	andne	r7, r0, #0, 2
    3ad0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3ad4:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    3ad8:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3adc:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3ae0:	9f131600 	svcls	0x00131600
	...
    3aec:	000027d4 	ldrdeq	r2, [r0], -r4
    3af0:	000027e0 	andeq	r2, r0, r0, ror #15
    3af4:	9f300002 	svcls	0x00300002
    3af8:	000027e0 	andeq	r2, r0, r0, ror #15
    3afc:	00002800 	andeq	r2, r0, r0, lsl #16
    3b00:	00510001 	subseq	r0, r1, r1
    3b04:	00000000 	andeq	r0, r0, r0
    3b08:	d6000000 	strle	r0, [r0], -r0
    3b0c:	d8000027 	stmdale	r0, {r0, r1, r2, r5}
    3b10:	01000027 	tsteq	r0, r7, lsr #32
    3b14:	27d85300 	ldrbcs	r5, [r8, r0, lsl #6]
    3b18:	27e00000 	strbcs	r0, [r0, r0]!
    3b1c:	00020000 	andeq	r0, r2, r0
    3b20:	27e09f4f 	strbcs	r9, [r0, pc, asr #30]!
    3b24:	27f00000 	ldrbcs	r0, [r0, r0]!
    3b28:	00010000 	andeq	r0, r1, r0
    3b2c:	0027f053 	eoreq	pc, r7, r3, asr r0	; <UNPREDICTABLE>
    3b30:	0027f400 	eoreq	pc, r7, r0, lsl #8
    3b34:	73000500 	movwvc	r0, #1280	; 0x500
    3b38:	9f253400 	svcls	0x00253400
    3b3c:	000027f4 	strdeq	r2, [r0], -r4
    3b40:	000027f8 	strdeq	r2, [r0], -r8
    3b44:	00530001 	subseq	r0, r3, r1
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	ec000000 	stc	0, cr0, [r0], {-0}
    3b50:	cc000026 	stcgt	0, cr0, [r0], {38}	; 0x26
    3b54:	06000027 	streq	r0, [r0], -r7, lsr #32
    3b58:	139c0c00 	orrsne	r0, ip, #0, 24
    3b5c:	009f5000 	addseq	r5, pc, r0
    3b60:	00000000 	andeq	r0, r0, r0
    3b64:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    3b68:	64000026 	strvs	r0, [r0], #-38	; 0xffffffda
    3b6c:	01000026 	tsteq	r0, r6, lsr #32
    3b70:	00005300 	andeq	r5, r0, r0, lsl #6
    3b74:	00000000 	andeq	r0, r0, r0
    3b78:	26780000 	ldrbtcs	r0, [r8], -r0
    3b7c:	26840000 	strcs	r0, [r4], r0
    3b80:	00010000 	andeq	r0, r1, r0
    3b84:	00000052 	andeq	r0, r0, r2, asr r0
    3b88:	00000000 	andeq	r0, r0, r0
    3b8c:	00268e00 	eoreq	r8, r6, r0, lsl #28
    3b90:	00269a00 	eoreq	r9, r6, r0, lsl #20
    3b94:	52000100 	andpl	r0, r0, #0, 2
	...
    3ba0:	0000269a 	muleq	r0, sl, r6
    3ba4:	0000278a 	andeq	r2, r0, sl, lsl #15
    3ba8:	00530001 	subseq	r0, r3, r1
    3bac:	00000000 	andeq	r0, r0, r0
    3bb0:	52000000 	andpl	r0, r0, #0
    3bb4:	5c000028 	stcpl	0, cr0, [r0], {40}	; 0x28
    3bb8:	01000028 	tsteq	r0, r8, lsr #32
    3bbc:	285c5000 	ldmdacs	ip, {ip, lr}^
    3bc0:	28660000 	stmdacs	r6!, {}^	; <UNPREDICTABLE>
    3bc4:	000e0000 	andeq	r0, lr, r0
    3bc8:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    3bcc:	2b141680 	blcs	5095d4 <__ccfg+0x4e962c>
    3bd0:	16000128 	strne	r0, [r0], -r8, lsr #2
    3bd4:	00009f13 	andeq	r9, r0, r3, lsl pc
    3bd8:	00000000 	andeq	r0, r0, r0
    3bdc:	284c0000 	stmdacs	ip, {}^	; <UNPREDICTABLE>
    3be0:	28780000 	ldmdacs	r8!, {}^	; <UNPREDICTABLE>
    3be4:	00010000 	andeq	r0, r1, r0
    3be8:	00000054 	andeq	r0, r0, r4, asr r0
    3bec:	00000000 	andeq	r0, r0, r0
    3bf0:	00287c00 	eoreq	r7, r8, r0, lsl #24
    3bf4:	00288200 	eoreq	r8, r8, r0, lsl #4
    3bf8:	73001500 	movwvc	r1, #1280	; 0x500
    3bfc:	4b401200 	blmi	1008404 <__ccfg+0xfe845c>
    3c00:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    3c04:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3c08:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3c0c:	9f131600 	svcls	0x00131600
	...
    3c18:	00002888 	andeq	r2, r0, r8, lsl #17
    3c1c:	00002892 	muleq	r0, r2, r8
    3c20:	00740017 	rsbseq	r0, r4, r7, lsl r0
    3c24:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3c28:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    3c2c:	4b401416 	blmi	1008c8c <__ccfg+0xfe8ce4>
    3c30:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3c34:	13160001 	tstne	r6, #1
    3c38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3c48:	52000100 	andpl	r0, r0, #0, 2
	...
    3c5c:	00500001 	subseq	r0, r0, r1
	...
    3c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c70:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3c80:	00010000 	andeq	r0, r1, r0
    3c84:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3c94:	70001600 	andvc	r1, r0, r0, lsl #12
    3c98:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    3c9c:	244b4000 	strbcs	r4, [fp], #-0
    3ca0:	00050c22 	andeq	r0, r5, r2, lsr #24
    3ca4:	282d8000 	stmdacs	sp!, {pc}
    3ca8:	13160001 	tstne	r6, #1
    3cac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	0028bc00 	eoreq	fp, r8, r0, lsl #24
    3cb8:	0028fe00 	eoreq	pc, r8, r0, lsl #28
    3cbc:	09000300 	stmdbeq	r0, {r8, r9}
    3cc0:	28fe9fff 	ldmcs	lr!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    3cc4:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    3cc8:	00010000 	andeq	r0, r1, r0
    3ccc:	00000050 	andeq	r0, r0, r0, asr r0
    3cd0:	00000000 	andeq	r0, r0, r0
    3cd4:	0028c800 	eoreq	ip, r8, r0, lsl #16
    3cd8:	0028d600 	eoreq	sp, r8, r0, lsl #12
    3cdc:	50000100 	andpl	r0, r0, r0, lsl #2
    3ce0:	000028da 	ldrdeq	r2, [r0], -sl
    3ce4:	000028f6 	strdeq	r2, [r0], -r6
    3ce8:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    3cec:	fa000028 	blx	3d94 <__exidx_end+0x1120>
    3cf0:	01000028 	tsteq	r0, r8, lsr #32
    3cf4:	28fc5000 	ldmcs	ip!, {ip, lr}^
    3cf8:	28fe0000 	ldmcs	lr!, {}^	; <UNPREDICTABLE>
    3cfc:	00010000 	andeq	r0, r1, r0
    3d00:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3d10:	09000300 	stmdbeq	r0, {r8, r9}
    3d14:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    3d18:	00000000 	andeq	r0, r0, r0
    3d1c:	00010000 	andeq	r0, r1, r0
    3d20:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3d30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3d3c:	00002908 	andeq	r2, r0, r8, lsl #18
    3d40:	00002942 	andeq	r2, r0, r2, asr #18
    3d44:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3d48:	0029429f 	mlaeq	r9, pc, r2, r4	; <UNPREDICTABLE>
    3d4c:	00294600 	eoreq	r4, r9, r0, lsl #12
    3d50:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    3d54:	0029469f 	mlaeq	r9, pc, r6, r4	; <UNPREDICTABLE>
    3d58:	00294a00 	eoreq	r4, r9, r0, lsl #20
    3d5c:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    3d60:	00294a9f 	mlaeq	r9, pc, sl, r4	; <UNPREDICTABLE>
    3d64:	00296800 	eoreq	r6, r9, r0, lsl #16
    3d68:	09000300 	stmdbeq	r0, {r8, r9}
    3d6c:	29689fff 	stmdbcs	r8!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    3d70:	296a0000 	stmdbcs	sl!, {}^	; <UNPREDICTABLE>
    3d74:	00010000 	andeq	r0, r1, r0
    3d78:	00296a50 	eoreq	r6, r9, r0, asr sl
    3d7c:	00296c00 	eoreq	r6, r9, r0, lsl #24
    3d80:	09000300 	stmdbeq	r0, {r8, r9}
    3d84:	296c9fff 	stmdbcs	ip!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    3d88:	29740000 	ldmdbcs	r4!, {}^	; <UNPREDICTABLE>
    3d8c:	00010000 	andeq	r0, r1, r0
    3d90:	00000050 	andeq	r0, r0, r0, asr r0
    3d94:	00000000 	andeq	r0, r0, r0
    3d98:	00291800 	eoreq	r1, r9, r0, lsl #16
    3d9c:	00297000 	eoreq	r7, r9, r0
    3da0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3dac:	0000298c 	andeq	r2, r0, ip, lsl #19
    3db0:	00002995 	muleq	r0, r5, r9
    3db4:	95500001 	ldrbls	r0, [r0, #-1]
    3db8:	aa000029 	bge	3e64 <__exidx_end+0x11f0>
    3dbc:	01000029 	tsteq	r0, r9, lsr #32
    3dc0:	29aa5400 	stmibcs	sl!, {sl, ip, lr}
    3dc4:	29ae0000 	stmibcs	lr!, {}	; <UNPREDICTABLE>
    3dc8:	00040000 	andeq	r0, r4, r0
    3dcc:	9f5001f3 	svcls	0x005001f3
    3dd0:	000029ae 	andeq	r2, r0, lr, lsr #19
    3dd4:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    3dd8:	b0540001 	subslt	r0, r4, r1
    3ddc:	b4000029 	strlt	r0, [r0], #-41	; 0xffffffd7
    3de0:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3de4:	5001f300 	andpl	pc, r1, r0, lsl #6
    3de8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3dec:	00000000 	andeq	r0, r0, r0
    3df0:	00298c00 	eoreq	r8, r9, r0, lsl #24
    3df4:	00299500 	eoreq	r9, r9, r0, lsl #10
    3df8:	51000100 	mrspl	r0, (UNDEF: 16)
    3dfc:	00002995 	muleq	r0, r5, r9
    3e00:	000029aa 	andeq	r2, r0, sl, lsr #19
    3e04:	aa550001 	bge	1543e10 <__ccfg+0x1523e68>
    3e08:	ae000029 	cdpge	0, 0, cr0, cr0, cr9, {1}
    3e0c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3e10:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3e14:	0029ae9f 	mlaeq	r9, pc, lr, sl	; <UNPREDICTABLE>
    3e18:	0029b000 	eoreq	fp, r9, r0
    3e1c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3e20:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    3e24:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    3e28:	01f30004 	mvnseq	r0, r4
    3e2c:	00009f51 	andeq	r9, r0, r1, asr pc
    3e30:	00000000 	andeq	r0, r0, r0
    3e34:	29960000 	ldmibcs	r6, {}	; <UNPREDICTABLE>
    3e38:	29ad0000 	stmibcs	sp!, {}	; <UNPREDICTABLE>
    3e3c:	00050000 	andeq	r0, r5, r0
    3e40:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    3e44:	0029ae9f 	mlaeq	r9, pc, lr, sl	; <UNPREDICTABLE>
    3e48:	0029b400 	eoreq	fp, r9, r0, lsl #8
    3e4c:	70000500 	andvc	r0, r0, r0, lsl #10
    3e50:	9f293000 	svcls	0x00293000
	...
    3e5c:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    3e60:	000029b6 			; <UNDEFINED> instruction: 0x000029b6
    3e64:	b6500001 	ldrblt	r0, [r0], -r1
    3e68:	bc000029 	stclt	0, cr0, [r0], {41}	; 0x29
    3e6c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3e70:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e78:	00000000 	andeq	r0, r0, r0
    3e7c:	0029b400 	eoreq	fp, r9, r0, lsl #8
    3e80:	0029b800 	eoreq	fp, r9, r0, lsl #16
    3e84:	51000100 	mrspl	r0, (UNDEF: 16)
    3e88:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    3e8c:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    3e90:	01f30004 	mvnseq	r0, r4
    3e94:	00009f51 	andeq	r9, r0, r1, asr pc
    3e98:	00000000 	andeq	r0, r0, r0
    3e9c:	29b40000 	ldmibcs	r4!, {}	; <UNPREDICTABLE>
    3ea0:	29bb0000 	ldmibcs	fp!, {}	; <UNPREDICTABLE>
    3ea4:	00010000 	andeq	r0, r1, r0
    3ea8:	0029bb52 	eoreq	fp, r9, r2, asr fp
    3eac:	0029bc00 	eoreq	fp, r9, r0, lsl #24
    3eb0:	f3000400 	vshl.u8	d0, d0, d0
    3eb4:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    3ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ec8:	00005000 	andeq	r5, r0, r0
    3ecc:	00000000 	andeq	r0, r0, r0
    3ed0:	00040000 	andeq	r0, r4, r0
    3ed4:	9f5001f3 	svcls	0x005001f3
	...
    3ee8:	00510001 	subseq	r0, r1, r1
    3eec:	00000000 	andeq	r0, r0, r0
    3ef0:	04000000 	streq	r0, [r0], #-0
    3ef4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3ef8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f08:	52000100 	andpl	r0, r0, #0, 2
	...
    3f14:	01f30004 	mvnseq	r0, r4
    3f18:	00009f52 	andeq	r9, r0, r2, asr pc
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	00010000 	andeq	r0, r1, r0
    3f24:	00000052 	andeq	r0, r0, r2, asr r0
    3f28:	00000000 	andeq	r0, r0, r0
    3f2c:	f3001500 	vrshl.u8	d1, d0, d0
    3f30:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f34:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    3f38:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f3c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    3f40:	9f131600 	svcls	0x00131600
	...
    3f54:	00530001 	subseq	r0, r3, r1
    3f58:	00000000 	andeq	r0, r0, r0
    3f5c:	04000000 	streq	r0, [r0], #-0
    3f60:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3f64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f74:	70000400 	andvc	r0, r0, r0, lsl #8
    3f78:	009f0480 	addseq	r0, pc, r0, lsl #9
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	0d000000 	stceq	0, cr0, [r0, #-0]
    3f84:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3f88:	01f32431 	mvnseq	r2, r1, lsr r4
    3f8c:	80232250 	eorhi	r2, r3, r0, asr r2
    3f90:	00009f04 	andeq	r9, r0, r4, lsl #30
    3f94:	00000000 	andeq	r0, r0, r0
    3f98:	00010000 	andeq	r0, r1, r0
    3f9c:	00000050 	andeq	r0, r0, r0, asr r0
    3fa0:	00000000 	andeq	r0, r0, r0
    3fa4:	f3005200 	vhsub.u8	d5, d0, d0
    3fa8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fac:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fb0:	f3048023 	vhadd.u8	d8, d4, d19
    3fb4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fb8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fbc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fc0:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    3fc4:	13160001 	tstne	r6, #1
    3fc8:	f3048423 	vshl.u8	d8, d19, d4
    3fcc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fd0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fd4:	f3048023 	vhadd.u8	d8, d4, d19
    3fd8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fdc:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fe0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fe4:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    3fe8:	13160001 	tstne	r6, #1
    3fec:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3ff0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    3ff4:	13160001 	tstne	r6, #1
    3ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4008:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4014:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    4018:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    401c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4020:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4024:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4028:	f3131600 	vmax.u16	d1, d3, d0
    402c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4030:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    4034:	0001282e 	andeq	r2, r1, lr, lsr #16
    4038:	01f31316 	mvnseq	r1, r6, lsl r3
    403c:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    4040:	13160001 	tstne	r6, #1
    4044:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4054:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4060:	01f30004 	mvnseq	r0, r4
    4064:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4074:	00010000 	andeq	r0, r1, r0
    4078:	00000051 	andeq	r0, r0, r1, asr r0
    407c:	00000000 	andeq	r0, r0, r0
    4080:	f3000400 	vshl.u8	d0, d0, d0
    4084:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4094:	01000000 	mrseq	r0, (UNDEF: 0)
    4098:	00005200 	andeq	r5, r0, r0, lsl #4
    409c:	00000000 	andeq	r0, r0, r0
    40a0:	00040000 	andeq	r0, r4, r0
    40a4:	9f5201f3 	svcls	0x005201f3
	...
    40b0:	00520001 	subseq	r0, r2, r1
    40b4:	00000000 	andeq	r0, r0, r0
    40b8:	1b000000 	blne	40c0 <__exidx_end+0x144c>
    40bc:	5201f300 	andpl	pc, r1, #0, 6
    40c0:	01f32540 	mvnseq	r2, r0, asr #10
    40c4:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    40c8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    40cc:	00000f0c 	andeq	r0, r0, ip, lsl #30
    40d0:	01282b80 	smlawbeq	r8, r0, fp, r2
    40d4:	9f131600 	svcls	0x00131600
	...
    40e8:	00530001 	subseq	r0, r3, r1
    40ec:	00000000 	andeq	r0, r0, r0
    40f0:	04000000 	streq	r0, [r0], #-0
    40f4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    40f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40fc:	00000000 	andeq	r0, r0, r0
    4100:	53000100 	movwpl	r0, #256	; 0x100
	...
    410c:	01f3001b 	mvnseq	r0, fp, lsl r0
    4110:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    4114:	01f35301 	mvnseq	r5, r1, lsl #6
    4118:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    411c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4120:	282b8000 	stmdacs	fp!, {pc}
    4124:	13160001 	tstne	r6, #1
    4128:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4138:	91000200 	mrsls	r0, R8_usr
	...
    4144:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    4158:	70000400 	andvc	r0, r0, r0, lsl #8
    415c:	009f0480 	addseq	r0, pc, r0, lsl #9
    4160:	00000000 	andeq	r0, r0, r0
    4164:	0d000000 	stceq	0, cr0, [r0, #-0]
    4168:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    416c:	01f32431 	mvnseq	r2, r1, lsr r4
    4170:	80232250 	eorhi	r2, r3, r0, asr r2
    4174:	00009f04 	andeq	r9, r0, r4, lsl #30
    4178:	00000000 	andeq	r0, r0, r0
    417c:	00010000 	andeq	r0, r1, r0
    4180:	00000050 	andeq	r0, r0, r0, asr r0
    4184:	00000000 	andeq	r0, r0, r0
    4188:	f3006400 	vshl.u8	d6, d0, d0
    418c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4190:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4194:	f3048023 	vhadd.u8	d8, d4, d19
    4198:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    419c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    41a0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    41a4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    41a8:	8000000f 	andhi	r0, r0, pc
    41ac:	0001282c 	andeq	r2, r1, ip, lsr #16
    41b0:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    41b4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41b8:	01f32431 	mvnseq	r2, r1, lsr r4
    41bc:	80232250 	eorhi	r2, r3, r0, asr r2
    41c0:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41c4:	01f32431 	mvnseq	r2, r1, lsr r4
    41c8:	01f32250 	mvnseq	r2, r0, asr r2
    41cc:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    41d0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    41d4:	282c8000 	stmdacs	ip!, {pc}
    41d8:	13160001 	tstne	r6, #1
    41dc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    41e0:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    41e4:	8000000f 	andhi	r0, r0, pc
    41e8:	0001282b 	andeq	r2, r1, fp, lsr #16
    41ec:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    41fc:	0a000000 	beq	4204 <__exidx_end+0x1590>
    4200:	0a007400 	beq	21208 <__ccfg+0x1260>
    4204:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    4208:	009f2400 	addseq	r2, pc, r0, lsl #8
    420c:	00000000 	andeq	r0, r0, r0
    4210:	0c000000 	stceq	0, cr0, [r0], {-0}
    4214:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    4218:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    421c:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4220:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4224:	00000000 	andeq	r0, r0, r0
    4228:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    422c:	0a029400 	beq	a9234 <__ccfg+0x8928c>
    4230:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    4234:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4238:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    423c:	4b405301 	blmi	1018e48 <__ccfg+0xff8ea0>
    4240:	0f0c2224 	svceq	0x000c2224
    4244:	2b800000 	blcs	fe00424c <_estack+0xddfff24c>
    4248:	16000128 	strne	r0, [r0], -r8, lsr #2
    424c:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    425c:	01000000 	mrseq	r0, (UNDEF: 0)
    4260:	00005000 	andeq	r5, r0, r0
    4264:	00000000 	andeq	r0, r0, r0
    4268:	00040000 	andeq	r0, r4, r0
    426c:	9f5001f3 	svcls	0x005001f3
	...
    4280:	00510001 	subseq	r0, r1, r1
    4284:	00000000 	andeq	r0, r0, r0
    4288:	04000000 	streq	r0, [r0], #-0
    428c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4290:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    42a0:	52000100 	andpl	r0, r0, #0, 2
	...
    42ac:	00540001 	subseq	r0, r4, r1
    42b0:	00000000 	andeq	r0, r0, r0
    42b4:	15000000 	strne	r0, [r0, #-0]
    42b8:	5201f300 	andpl	pc, r1, #0, 6
    42bc:	01f32540 	mvnseq	r2, r0, asr #10
    42c0:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    42c4:	2e302540 	cfneg32cs	mvfx2, mvfx0
    42c8:	16000128 	strne	r0, [r0], -r8, lsr #2
    42cc:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    42dc:	00010000 	andeq	r0, r1, r0
    42e0:	00000055 	andeq	r0, r0, r5, asr r0
    42e4:	00000000 	andeq	r0, r0, r0
    42e8:	f3001d00 	vpadd.f32	d1, d0, d0
    42ec:	01f35001 	mvnseq	r5, r1
    42f0:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    42f4:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    42f8:	f3225101 	vrhadd.u32	d5, d2, d1
    42fc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4300:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4304:	9f131600 	svcls	0x00131600
	...
    4318:	00750006 	rsbseq	r0, r5, r6
    431c:	9f1a0074 	svcls	0x001a0074
	...
    4330:	00550001 	subseq	r0, r5, r1
    4334:	00000000 	andeq	r0, r0, r0
    4338:	1d000000 	stcne	0, cr0, [r0, #-0]
    433c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4340:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4344:	01f30223 	mvnseq	r0, r3, lsr #4
    4348:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    434c:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4350:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4354:	16000128 	strne	r0, [r0], -r8, lsr #2
    4358:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4368:	00070000 	andeq	r0, r7, r0
    436c:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    4370:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    4380:	05000000 	streq	r0, [r0, #-0]
    4384:	30007000 	andcc	r7, r0, r0
    4388:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    4398:	00010000 	andeq	r0, r1, r0
    439c:	00000050 	andeq	r0, r0, r0, asr r0
    43a0:	00000000 	andeq	r0, r0, r0
    43a4:	f3000400 	vshl.u8	d0, d0, d0
    43a8:	009f5001 	addseq	r5, pc, r1
	...
    43b8:	01000000 	mrseq	r0, (UNDEF: 0)
    43bc:	00005100 	andeq	r5, r0, r0, lsl #2
    43c0:	00000000 	andeq	r0, r0, r0
    43c4:	00040000 	andeq	r0, r4, r0
    43c8:	9f5101f3 	svcls	0x005101f3
	...
    43dc:	00520001 	subseq	r0, r2, r1
    43e0:	00000000 	andeq	r0, r0, r0
    43e4:	01000000 	mrseq	r0, (UNDEF: 0)
    43e8:	00005400 	andeq	r5, r0, r0, lsl #8
    43ec:	00000000 	andeq	r0, r0, r0
    43f0:	001b0000 	andseq	r0, fp, r0
    43f4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    43f8:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    43fc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4400:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4404:	8000000f 	andhi	r0, r0, pc
    4408:	0001282b 	andeq	r2, r1, fp, lsr #16
    440c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    441c:	01000000 	mrseq	r0, (UNDEF: 0)
    4420:	00005300 	andeq	r5, r0, r0, lsl #6
    4424:	00000000 	andeq	r0, r0, r0
    4428:	00010000 	andeq	r0, r1, r0
    442c:	00000055 	andeq	r0, r0, r5, asr r0
    4430:	00000000 	andeq	r0, r0, r0
    4434:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4438:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    443c:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4440:	4b405301 	blmi	101904c <__ccfg+0xff90a4>
    4444:	0f0c2224 	svceq	0x000c2224
    4448:	2b800000 	blcs	fe004450 <_estack+0xddfff450>
    444c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4450:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4460:	00010000 	andeq	r0, r1, r0
    4464:	00000056 	andeq	r0, r0, r6, asr r0
    4468:	00000000 	andeq	r0, r0, r0
    446c:	70000600 	andvc	r0, r0, r0, lsl #12
    4470:	22007100 	andcs	r7, r0, #0, 2
    4474:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4478:	00000000 	andeq	r0, r0, r0
    447c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4488:	01f30023 	mvnseq	r0, r3, lsr #32
    448c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4490:	f3022322 	vcgt.u8	d2, d2, d18
    4494:	01f35001 	mvnseq	r5, r1
    4498:	01f32251 	mvnseq	r2, r1, asr r2
    449c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    44a0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    44a4:	282b8000 	stmdacs	fp!, {pc}
    44a8:	13160001 	tstne	r6, #1
    44ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    44bc:	76000600 	strvc	r0, [r0], -r0, lsl #12
    44c0:	1a007400 	bne	214c8 <__ccfg+0x1520>
    44c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44e0:	00560001 	subseq	r0, r6, r1
    44e4:	00000000 	andeq	r0, r0, r0
    44e8:	23000000 	movwcs	r0, #0
    44ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    44f0:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    44f4:	01f30223 	mvnseq	r0, r3, lsr #4
    44f8:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    44fc:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4500:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4504:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4508:	01282b80 	smlawbeq	r8, r0, fp, r2
    450c:	9f131600 	svcls	0x00131600
	...
    4520:	00760007 	rsbseq	r0, r6, r7
    4524:	1affff0a 	bne	4154 <__exidx_end+0x14e0>
    4528:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4538:	70000500 	andvc	r0, r0, r0, lsl #10
    453c:	9f293000 	svcls	0x00293000
	...
    4548:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    454c:	000029d4 	ldrdeq	r2, [r0], -r4
    4550:	d4500001 	ldrble	r0, [r0], #-1
    4554:	0e000029 	cdpeq	0, 0, cr0, cr0, cr9, {1}
    4558:	0100002a 	tsteq	r0, sl, lsr #32
    455c:	2a0e5500 	bcs	399964 <__ccfg+0x3799bc>
    4560:	2a180000 	bcs	604568 <__ccfg+0x5e45c0>
    4564:	00040000 	andeq	r0, r4, r0
    4568:	9f5001f3 	svcls	0x005001f3
	...
    4574:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    4578:	000029c2 	andeq	r2, r0, r2, asr #19
    457c:	c2510001 	subsgt	r0, r1, #1
    4580:	fa000029 	blx	462c <__exidx_end+0x19b8>
    4584:	01000029 	tsteq	r0, r9, lsr #32
    4588:	29fa5400 	ldmibcs	sl!, {sl, ip, lr}^
    458c:	2a180000 	bcs	604594 <__ccfg+0x5e45ec>
    4590:	00040000 	andeq	r0, r4, r0
    4594:	9f5101f3 	svcls	0x005101f3
	...
    45a0:	000029f6 	strdeq	r2, [r0], -r6
    45a4:	00002a0a 	andeq	r2, r0, sl, lsl #20
    45a8:	00550001 	subseq	r0, r5, r1
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    45b4:	fa000029 	blx	4660 <__exidx_end+0x19ec>
    45b8:	01000029 	tsteq	r0, r9, lsr #32
    45bc:	29fa5400 	ldmibcs	sl!, {sl, ip, lr}^
    45c0:	2a0a0000 	bcs	2845c8 <__ccfg+0x264620>
    45c4:	00040000 	andeq	r0, r4, r0
    45c8:	9f5101f3 	svcls	0x005101f3
	...
    45d4:	00002a18 	andeq	r2, r0, r8, lsl sl
    45d8:	00002a36 	andeq	r2, r0, r6, lsr sl
    45dc:	36500001 	ldrbcc	r0, [r0], -r1
    45e0:	4400002a 	strmi	r0, [r0], #-42	; 0xffffffd6
    45e4:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    45e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    45ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    45fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4608:	00560001 	subseq	r0, r6, r1
    460c:	00000000 	andeq	r0, r0, r0
    4610:	04000000 	streq	r0, [r0], #-0
    4614:	5001f300 	andpl	pc, r1, r0, lsl #6
    4618:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4628:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    463c:	00700007 	rsbseq	r0, r0, r7
    4640:	191c0073 	ldmdbne	ip, {r0, r1, r4, r5, r6}
    4644:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4648:	00000000 	andeq	r0, r0, r0
    464c:	70000400 	andvc	r0, r0, r0, lsl #8
    4650:	009f1900 	addseq	r1, pc, r0, lsl #18
	...
    4660:	04000000 	streq	r0, [r0], #-0
    4664:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    4668:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    466c:	00000000 	andeq	r0, r0, r0
    4670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    467c:	00720005 	rsbseq	r0, r2, r5
    4680:	009f2540 	addseq	r2, pc, r0, asr #10
    4684:	00000000 	andeq	r0, r0, r0
    4688:	01000000 	mrseq	r0, (UNDEF: 0)
    468c:	00005000 	andeq	r5, r0, r0
    4690:	00000000 	andeq	r0, r0, r0
    4694:	00040000 	andeq	r0, r4, r0
    4698:	9f07d00a 	svcls	0x0007d00a
	...
    46a4:	00500001 	subseq	r0, r0, r1
	...
    46b4:	01000000 	mrseq	r0, (UNDEF: 0)
    46b8:	00005000 	andeq	r5, r0, r0
	...
    46c8:	00010000 	andeq	r0, r1, r0
    46cc:	00000053 	andeq	r0, r0, r3, asr r0
	...
    46dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46e8:	1b700003 	blne	1c046fc <__ccfg+0x1be4754>
    46ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46f0:	00000000 	andeq	r0, r0, r0
    46f4:	f3000400 	vshl.u8	d0, d0, d0
    46f8:	009f5001 	addseq	r5, pc, r1
	...
    4708:	07000000 	streq	r0, [r0, -r0]
    470c:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    4710:	9f264824 	svcls	0x00264824
	...
    4724:	00500001 	subseq	r0, r0, r1
    4728:	00000000 	andeq	r0, r0, r0
    472c:	06000000 	streq	r0, [r0], -r0
    4730:	5001f300 	andpl	pc, r1, r0, lsl #6
    4734:	009f1c4b 	addseq	r1, pc, fp, asr #24
	...
    4744:	01000000 	mrseq	r0, (UNDEF: 0)
    4748:	00005500 	andeq	r5, r0, r0, lsl #10
    474c:	00000000 	andeq	r0, r0, r0
    4750:	000c0000 	andeq	r0, ip, r0
    4754:	4b5001f3 	blmi	1404f28 <__ccfg+0x13e4f80>
    4758:	5001f31c 	andpl	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
    475c:	9f1e1c4b 	svcls	0x001e1c4b
	...
    4770:	0071002c 	rsbseq	r0, r1, ip, lsr #32
    4774:	00712640 	rsbseq	r2, r1, r0, asr #12
    4778:	26482440 	strbcs	r2, [r8], -r0, asr #8
    477c:	331e0070 	tstcc	lr, #112	; 0x70
    4780:	00712226 	rsbseq	r2, r1, r6, lsr #4
    4784:	26482448 	strbcs	r2, [r8], -r8, asr #8
    4788:	3a1e0075 	bcc	784964 <__ccfg+0x7649bc>
    478c:	00742226 	rsbseq	r2, r4, r6, lsr #4
    4790:	26482448 	strbcs	r2, [r8], -r8, asr #8
    4794:	701e0075 	andsvc	r0, lr, r5, ror r0
    4798:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    479c:	00009f22 	andeq	r9, r0, r2, lsr #30
    47a0:	00000000 	andeq	r0, r0, r0
    47a4:	00320000 	eorseq	r0, r2, r0
    47a8:	26400071 			; <UNDEFINED> instruction: 0x26400071
    47ac:	4b5001f3 	blmi	1404f80 <__ccfg+0x13e4fd8>
    47b0:	4000711c 	andmi	r7, r0, ip, lsl r1
    47b4:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    47b8:	71222633 			; <UNDEFINED> instruction: 0x71222633
    47bc:	48244800 	stmdami	r4!, {fp, lr}
    47c0:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    47c4:	f322263a 	vmin.u32	d2, d2, d26
    47c8:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    47cc:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    47d0:	751e2648 	ldrvc	r2, [lr, #-1608]	; 0xfffff9b8
    47d4:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    47d8:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
    47e8:	00010000 	andeq	r0, r1, r0
    47ec:	00000050 	andeq	r0, r0, r0, asr r0
    47f0:	00000000 	andeq	r0, r0, r0
    47f4:	f3000400 	vshl.u8	d0, d0, d0
    47f8:	009f5001 	addseq	r5, pc, r1
	...
    4808:	0b000000 	bleq	4810 <__exidx_end+0x1b9c>
    480c:	70007000 	andvc	r7, r0, r0
    4810:	26461e00 	strbcs	r1, [r6], -r0, lsl #28
    4814:	9f1c0070 	svcls	0x001c0070
	...
    4820:	00500001 	subseq	r0, r0, r1
    4824:	00000000 	andeq	r0, r0, r0
    4828:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    482c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4830:	1e5001f3 	mrcne	1, 2, r0, cr0, cr3, {7}
    4834:	01f32646 	mvnseq	r2, r6, asr #12
    4838:	009f1c50 	addseq	r1, pc, r0, asr ip	; <UNPREDICTABLE>
	...
    4848:	01000000 	mrseq	r0, (UNDEF: 0)
    484c:	00005500 	andeq	r5, r0, r0, lsl #10
    4850:	00000000 	andeq	r0, r0, r0
    4854:	00050000 	andeq	r0, r5, r0
    4858:	0910380c 	ldmdbeq	r0, {r2, r3, fp, ip, sp}
    485c:	00000040 	andeq	r0, r0, r0, asr #32
	...
    486c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4880:	00700006 	rsbseq	r0, r0, r6
    4884:	9f1c0076 	svcls	0x001c0076
	...
    4890:	00500001 	subseq	r0, r0, r1
	...
    48a0:	0a000000 	beq	48a8 <__exidx_end+0x1c34>
    48a4:	08007000 	stmdaeq	r0, {ip, sp, lr}
    48a8:	1a2444fc 	bne	915ca0 <__ccfg+0x8f5cf8>
    48ac:	009f2546 	addseq	r2, pc, r6, asr #10
	...
    48bc:	01000000 	mrseq	r0, (UNDEF: 0)
    48c0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    48d0:	00090000 	andeq	r0, r9, r0
    48d4:	000a0073 	andeq	r0, sl, r3, ror r0
    48d8:	253a1afc 	ldrcs	r1, [sl, #-2812]!	; 0xfffff504
    48dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    48ec:	73000a00 	movwvc	r0, #2560	; 0xa00
    48f0:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    48f4:	25421a24 	strbcs	r1, [r2, #-2596]	; 0xfffff5dc
    48f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48fc:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	00000134 	andeq	r0, r0, r4, lsr r1
  18:	000000c8 	andeq	r0, r0, r8, asr #1
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	00000110 	andeq	r0, r0, r0, lsl r1
  24:	00000050 	andeq	r0, r0, r0, asr r0
  28:	00000160 	andeq	r0, r0, r0, ror #2
  2c:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	07810002 	streq	r0, [r1, r2]
			i = k;
  40:	00040000 	andeq	r0, r4, r0
				j->Next = k;
  44:	00000000 	andeq	r0, r0, r0
  48:	0000028c 	andeq	r0, r0, ip, lsl #5
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	00000298 	muleq	r0, r8, r2
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	000002c4 	andeq	r0, r0, r4, asr #5
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
  60:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	0000032c 	andeq	r0, r0, ip, lsr #6
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	00000380 	andeq	r0, r0, r0, lsl #7
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	000003c0 	andeq	r0, r0, r0, asr #7
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	descriptors [fd] = s;
  90:	000003e8 	andeq	r0, r0, r8, ror #7
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	000004fc 	strdeq	r0, [r0], -ip
	if (s == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	0000054c 	andeq	r0, r0, ip, asr #10
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	000005a0 	andeq	r0, r0, r0, lsr #11
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	000005d8 	ldrdeq	r0, [r0], -r8
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	000006e8 	andeq	r0, r0, r8, ror #13
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	000007a8 	andeq	r0, r0, r8, lsr #15
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	000007ec 	andeq	r0, r0, ip, ror #15
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	00000828 	andeq	r0, r0, r8, lsr #16
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	000008cc 	andeq	r0, r0, ip, asr #17
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
			curr += 0x1000;
  f8:	00000a84 	andeq	r0, r0, r4, lsl #21
  fc:	00000258 	andeq	r0, r0, r8, asr r2
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
			upto = EE_SIZE - 1;
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	00000cdc 	ldrdeq	r0, [r0], -ip
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1c110002 	ldcne	0, cr0, [r1], {2}
}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00000d3c 	andeq	r0, r0, ip, lsr sp
}
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
        if(settingsInput[i] == ' ') {
 138:	00000d78 	andeq	r0, r0, r8, ror sp
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
            numbers[numbersIndex] = number;
 140:	00000df8 	strdeq	r0, [r0], -r8
 144:	00000018 	andeq	r0, r0, r8, lsl r0
            numbersIndex++;
 148:	00000000 	andeq	r0, r0, r0
    for (int i = strlen(settingsInput); i >= 0; i++) {
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 150:	00000e10 	andeq	r0, r0, r0, lsl lr
            return 1;
 154:	00000010 	andeq	r0, r0, r0, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
fsm root {
 160:	00000000 	andeq	r0, r0, r0
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000000 	andeq	r0, r0, r0
 16c:	00000006 	andeq	r0, r0, r6
 170:	00000e20 	andeq	r0, r0, r0, lsr #28
        initCycles();
 174:	000000cc 	andeq	r0, r0, ip, asr #1
        ser_outf(Initial, "Enter your name: ");
 178:	00000eec 	andeq	r0, r0, ip, ror #29
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_in(Get_Name, username, NAME_LENGTH);
 180:	00000f00 	andeq	r0, r0, r0, lsl #30
 184:	00000034 	andeq	r0, r0, r4, lsr r0
 188:	00000f34 	andeq	r0, r0, r4, lsr pc
        ser_outf(Show_Menu, "Welcome %s\n\r"
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Choice, "%c", &choice);
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	00000f68 	andeq	r0, r0, r8, ror #30
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
        if (choice == 'A' || choice == 'a'){
 1a0:	00000f8c 	andeq	r0, r0, ip, lsl #31
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
 1a8:	00000000 	andeq	r0, r0, r0
            proceed Adjust_Intervals;
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed Monitor;
 1b0:	00000000 	andeq	r0, r0, r0
        proceed Get_Choice;
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_in(Get_Name, settings, NAME_LENGTH);
 1c0:	00000fc4 	andeq	r0, r0, r4, asr #31
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
 1c8:	00000000 	andeq	r0, r0, r0
        processSettingsInput(settings);
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
        proceed Show_Menu;
 1d0:	00000fe8 	andeq	r0, r0, r8, ror #31
 1d4:	0000000e 	andeq	r0, r0, lr
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 1f4:	00000006 	andeq	r0, r0, r6
 1f8:	00000ff6 	strdeq	r0, [r0], -r6
        displayCycle = YES;
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_inf(Await_Stop, "%c", ch);
 200:	00000000 	andeq	r0, r0, r0
 204:	0000000e 	andeq	r0, r0, lr
 208:	0000100c 	andeq	r1, r0, ip
        proceed Await_Stop;
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 210:	00001030 	andeq	r1, r0, r0, lsr r0
 214:	0000009c 	muleq	r0, ip, r0
        leds(1, 0);
 218:	000010cc 	andeq	r1, r0, ip, asr #1
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	0000111c 	andeq	r1, r0, ip, lsl r1
 224:	00000048 	andeq	r0, r0, r8, asr #32
 228:	00001164 	andeq	r1, r0, r4, ror #2
        leds(0, 0);
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000058 	andeq	r0, r0, r8, asr r0
 238:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
 240:	0000125c 	andeq	r1, r0, ip, asr r2
        } else if (choice == 'S' || choice == 's') {
 244:	00000034 	andeq	r0, r0, r4, lsr r0
            proceed Stop;
 248:	00001290 	muleq	r0, r0, r2
        } else if (choice == 'V' || choice == 'v') {
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
            proceed View_Settings;
 250:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'M' || choice == 'm') {
 254:	00000030 	andeq	r0, r0, r0, lsr r0
            proceed Monitor;
 258:	00000000 	andeq	r0, r0, r0
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
 260:	000012a8 	andeq	r1, r0, r8, lsr #5
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
 268:	00000000 	andeq	r0, r0, r0
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 278:	00000104 	andeq	r0, r0, r4, lsl #2
 27c:	2e340002 	cdpcs	0, 3, cr0, cr4, cr2, {0}
 280:	00040000 	andeq	r0, r4, r0
	...
static void devinit_uart (int devnum) {
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
	adddevfunc (ioreq_uart_a, devnum);
 290:	00000000 	andeq	r0, r0, r0
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
void udelay (volatile word n) {
 298:	00000000 	andeq	r0, r0, r0
 29c:	0000000e 	andeq	r0, r0, lr
	while (n) {
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
}
 2a8:	00000000 	andeq	r0, r0, r0
	while (n--);
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
		n--;
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
void mdelay (volatile word n) {
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	00000000 	andeq	r0, r0, r0
	while (n) {
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
 2d0:	00000000 	andeq	r0, r0, r0
}
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
		udelay (999);
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
		n--;
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	000000bc 	strheq	r0, [r0], -ip
void __pi_ondomain (lword d) {
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
		if (__pi_systat.effpdm > 1)
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
			__pi_systat.effpdm = 1;
 300:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
 304:	0000000a 	andeq	r0, r0, sl
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 310:	00000000 	andeq	r0, r0, r0
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
 31c:	00000040 	andeq	r0, r0, r0, asr #32
 320:	00000000 	andeq	r0, r0, r0
}
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	00000000 	andeq	r0, r0, r0
void __pi_syserror (word ec, const char *m) {
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
	diag ("SYSERR: %x, %s", ec, m);
 330:	00000000 	andeq	r0, r0, r0
 334:	00000006 	andeq	r0, r0, r6
  __ASM volatile ("cpsid i" : : : "memory");
 338:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 33c:	00000068 	andeq	r0, r0, r8, rrx
 340:	00000000 	andeq	r0, r0, r0
 344:	00000050 	andeq	r0, r0, r0, asr r0
		all_leds_blink;
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00000000 	andeq	r0, r0, r0
 354:	00000040 	andeq	r0, r0, r0, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 358:	00000000 	andeq	r0, r0, r0
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00000000 	andeq	r0, r0, r0
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
	while (1) {
 370:	000013e4 	andeq	r1, r0, r4, ror #7
 374:	00000002 	andeq	r0, r0, r2
	...
void tci_run_delay_timer () {
 380:	00000034 	andeq	r0, r0, r4, lsr r0
	setdel = __pi_mintk - __pi_old;
 384:	416b0002 	cmnmi	fp, r2
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	000013e6 	andeq	r1, r0, r6, ror #7
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 394:	00000002 	andeq	r0, r0, r2
 398:	000013e8 	andeq	r1, r0, r8, ror #7
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	000013ea 	andeq	r1, r0, sl, ror #7
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 3a4:	00000002 	andeq	r0, r0, r2
	sti_tim;
 3a8:	000013ec 	andeq	r1, r0, ip, ror #7
}
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	42e30002 	rscmi	r0, r3, #2
	cli_aux;
 3c0:	00040000 	andeq	r0, r4, r0
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
 3d4:	481e0002 	ldmdami	lr, {r1}
	sti_aux;
 3d8:	00040000 	andeq	r0, r4, r0
	...
}
 3e4:	00000002 	andeq	r0, r0, r2
void AONRTCIntHandler () {
 3e8:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
		if (__pi_utims [0] == 0)
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
 3fc:	4d220002 	stcmi	0, cr0, [r2, #-8]!
		if (*(__pi_utims [0])) {
 400:	00040000 	andeq	r0, r4, r0
	...
		if (__pi_utims [1] == 0)
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
		if (*(__pi_utims [1])) {
 410:	00000000 	andeq	r0, r0, r0
			aux_timer_inactive = 0;
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
		if (*(__pi_utims [2])) {
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
			(*(__pi_utims [2]))--;
 424:	521c0002 	andspl	r0, ip, #2
		if (__pi_utims [3] != 0) {
 428:	00040000 	andeq	r0, r4, r0
			if (*(__pi_utims [3])) {
 42c:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
 430:	00001438 	andeq	r1, r0, r8, lsr r4
				(*(__pi_utims [3]))--;
 434:	00000034 	andeq	r0, r0, r4, lsr r0
	if (__pi_systat.ledsts) {
 438:	0000146c 	andeq	r1, r0, ip, ror #8
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
		if (__pi_systat.ledblc++ == 0) {
 440:	0000149c 	muleq	r0, ip, r4
 444:	00000018 	andeq	r0, r0, r8, lsl r0
			if (__pi_systat.ledblk) {
 448:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
 44c:	00000054 	andeq	r0, r0, r4, asr r0
 450:	00001508 	andeq	r1, r0, r8, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00001548 	andeq	r1, r0, r8, asr #10
				if (__pi_systat.ledsts & 0x2)
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	0000156c 	andeq	r1, r0, ip, ror #10
 464:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x4)
 468:	00001580 	andeq	r1, r0, r0, lsl #11
				__pi_systat.ledblk = 0;
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.fstblk)
 474:	00000064 	andeq	r0, r0, r4, rrx
 478:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
	if (events & AON_RTC_EVFLAGS_CH0) {
 480:	00000000 	andeq	r0, r0, r0
		cli_tim;
 484:	000000ec 	andeq	r0, r0, ip, ror #1
		__pi_new += setdel;
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000002 	andeq	r0, r0, r2
		setdel = 0;
 490:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 494:	00000004 	andeq	r0, r0, r4
		__pi_new += setdel;
 498:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	00000000 	andeq	r0, r0, r0
		aux_timer_inactive = 1;
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	5cc70002 	stclpl	0, cr0, [r7], {2}
				if (__pi_systat.ledsts & 0x2)
 4b8:	00040000 	andeq	r0, r4, r0
 4bc:	00000000 	andeq	r0, r0, r0
 4c0:	00001594 	muleq	r0, r4, r5
				if (__pi_systat.ledsts & 0x8)
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
		if (aux_timer_inactive) {
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
			cli_aux;
 4d4:	60dd0002 	sbcsvs	r0, sp, r2
 4d8:	00040000 	andeq	r0, r4, r0
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	0000160c 	andeq	r1, r0, ip, lsl #12
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	652d0002 	strvs	r0, [sp, #-2]!
 4f8:	00040000 	andeq	r0, r4, r0
word tci_update_delay_ticks (Boolean force) {
 4fc:	00000000 	andeq	r0, r0, r0
	cli_tim;
 500:	00001660 	andeq	r1, r0, r0, ror #12
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	697d0002 	ldmdbvs	sp!, {r1}^
 518:	00040000 	andeq	r0, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 51c:	00000000 	andeq	r0, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
 520:	000016c0 	andeq	r1, r0, r0, asr #13
	return NO;
 524:	00000070 	andeq	r0, r0, r0, ror r0
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 534:	6dae0002 	stcvs	0, cr0, [lr, #8]!
		sti_tim;
 538:	00040000 	andeq	r0, r4, r0
		return YES;
 53c:	00000000 	andeq	r0, r0, r0
 540:	00001730 	andeq	r1, r0, r0, lsr r7
 544:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
	UARTDisable (UART0_BASE);
 550:	0000002c 	andeq	r0, r0, ip, lsr #32
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 554:	71f20002 	mvnsvc	r0, r2
	UARTDisable (UART0_BASE);
 558:	00040000 	andeq	r0, r4, r0
	UARTConfigSetExpClk (UART0_BASE,
 55c:	00000000 	andeq	r0, r0, r0
 560:	0000184c 	andeq	r1, r0, ip, asr #16
 564:	00000020 	andeq	r0, r0, r0, lsr #32
 568:	0000186c 	andeq	r1, r0, ip, ror #16
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 56c:	00000230 	andeq	r0, r0, r0, lsr r2
 570:	00001a9c 	muleq	r0, ip, sl
 574:	00000050 	andeq	r0, r0, r0, asr r0
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
	urates [0] = rate;
 584:	77e60002 	strbvc	r0, [r6, r2]!
}
 588:	00040000 	andeq	r0, r4, r0
 58c:	00000000 	andeq	r0, r0, r0
 590:	00001aec 	andeq	r1, r0, ip, ror #21
 594:	00000390 	muleq	r0, r0, r3
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	7d790002 	ldclvc	0, cr0, [r9, #-8]!
 5a8:	00040000 	andeq	r0, r4, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	00001e7c 	andeq	r1, r0, ip, ror lr
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 5b4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
	__pi_uart_setrate (urates [0], __pi_uart);
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	7e520002 	cdpvc	0, 5, cr0, cr2, cr2, {0}
 5c8:	00040000 	andeq	r0, r4, r0
	...
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
	switch (operation) {
 5d8:	00001eac 	andeq	r1, r0, ip, lsr #29
static int ioreq_uart_a (int operation, char *buf, int len) {
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ec:	7f990002 	svcvc	0x00990002
				*buf++ = uart_a_read;
 5f0:	00040000 	andeq	r0, r4, r0
 5f4:	00000000 	andeq	r0, r0, r0
			while (len && uart_a_char_available) {
 5f8:	00001ec4 	andeq	r1, r0, r4, asr #29
 5fc:	00000008 	andeq	r0, r0, r8
 600:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
 604:	00000006 	andeq	r0, r0, r6
}
 608:	00001ecc 	andeq	r1, r0, ip, asr #29
 60c:	00000008 	andeq	r0, r0, r8
			uart_a_disable_int;
 610:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
 614:	00000006 	andeq	r0, r0, r6
				*buf++ = uart_a_read;
 618:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 61c:	00000008 	andeq	r0, r0, r8
	...
			if (uart_a_char_available) {
 628:	00000024 	andeq	r0, r0, r4, lsr #32
				uart_a_enable_int;
 62c:	80d30002 	sbcshi	r0, r3, r2
 630:	00040000 	andeq	r0, r4, r0
				goto Redo_rx;
 634:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 638:	00001ed4 	ldrdeq	r1, [r0], -r4
 63c:	000000d4 	ldrdeq	r0, [r0], -r4
			return -2;
 640:	00001fa8 	andeq	r1, r0, r8, lsr #31
 644:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			while (len && uart_a_room_in_tx) {
 650:	000000b4 	strheq	r0, [r0], -r4
 654:	82de0002 	sbcshi	r0, lr, #2
 658:	00040000 	andeq	r0, r4, r0
			if (len != operation) {
 65c:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 660:	0000204c 	andeq	r2, r0, ip, asr #32
 664:	0000007c 	andeq	r0, r0, ip, ror r0
			if (uart_a_room_in_tx) {
 668:	000020c8 	andeq	r2, r0, r8, asr #1
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
				uart_a_enable_int;
 670:	00002174 	andeq	r2, r0, r4, ror r1
 674:	0000005c 	andeq	r0, r0, ip, asr r0
				*buf++ = uart_a_read;
 678:	000021d0 	ldrdeq	r2, [r0], -r0
			if (uart_a_room_in_tx) {
 67c:	00000018 	andeq	r0, r0, r8, lsl r0
				uart_a_write (*buf);
 680:	00000000 	andeq	r0, r0, r0
 684:	00000010 	andeq	r0, r0, r0, lsl r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 688:	000021e8 	andeq	r2, r0, r8, ror #3
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
			uart_a_enable_int;
 690:	000021f8 	strdeq	r2, [r0], -r8
 694:	00000014 	andeq	r0, r0, r4, lsl r0
 698:	0000220c 	andeq	r2, r0, ip, lsl #4
			return 0;
 69c:	00000064 	andeq	r0, r0, r4, rrx
			if (len == UART_CNTRL_SETRATE) {
 6a0:	00002270 	andeq	r2, r0, r0, ror r2
				if (__pi_uart_setrate (*((word*)buf),
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	00002284 	andeq	r2, r0, r4, lsl #5
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
				syserror (EREQPAR, "uar");
 6b0:	00002298 	muleq	r0, r8, r2
			syserror (ENOOPER, "uai");
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
			if (len == UART_CNTRL_GETRATE) {
 6b8:	000022ac 	andeq	r2, r0, ip, lsr #5
				return 1;
 6bc:	00000028 	andeq	r0, r0, r8, lsr #32
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 6c0:	000022d4 	ldrdeq	r2, [r0], -r4
			syserror (ENOOPER, "uai");
 6c4:	00000010 	andeq	r0, r0, r0, lsl r0
 6c8:	000022e4 	andeq	r2, r0, r4, ror #5
 6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
 6d0:	00002310 	andeq	r2, r0, r0, lsl r3
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	00002324 	andeq	r2, r0, r4, lsr #6
 6dc:	00000014 	andeq	r0, r0, r4, lsl r0
 6e0:	00002338 	andeq	r2, r0, r8, lsr r3
 6e4:	00000110 	andeq	r0, r0, r0, lsl r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 6e8:	00002448 	andeq	r2, r0, r8, asr #8
void UART0IntHandler () {
 6ec:	00000064 	andeq	r0, r0, r4, rrx
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 6f0:	000024ac 	andeq	r2, r0, ip, lsr #9
 6f4:	00000028 	andeq	r0, r0, r8, lsr #32
 6f8:	000024d4 	ldrdeq	r2, [r0], -r4
 6fc:	00000150 	andeq	r0, r0, r0, asr r1
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 708:	0000003c 	andeq	r0, r0, ip, lsr r0
		RISE_N_SHINE;
 70c:	8df90002 	ldclhi	0, cr0, [r9, #8]!
 710:	00040000 	andeq	r0, r4, r0
	...
		i_trigger (devevent (UART_A, READ));
 71c:	000000f4 	strdeq	r0, [r0], -r4
 720:	00002624 	andeq	r2, r0, r4, lsr #12
 724:	00000220 	andeq	r0, r0, r0, lsr #4
 728:	00002844 	andeq	r2, r0, r4, asr #16
 72c:	00000060 	andeq	r0, r0, r0, rrx
 730:	00000000 	andeq	r0, r0, r0
 734:	00000078 	andeq	r0, r0, r8, ror r0
 738:	000028a4 	andeq	r2, r0, r4, lsr #17
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 748:	00000044 	andeq	r0, r0, r4, asr #32
 74c:	97200002 	strls	r0, [r0, -r2]!
		i_trigger (devevent (UART_A, WRITE));
 750:	00040000 	andeq	r0, r4, r0
	...
		RISE_N_SHINE;
 75c:	00000010 	andeq	r0, r0, r0, lsl r0
 760:	00000000 	andeq	r0, r0, r0
 764:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, WRITE));
 768:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
 76c:	0000004c 	andeq	r0, r0, ip, asr #32
 770:	00000000 	andeq	r0, r0, r0
 774:	00000030 	andeq	r0, r0, r0, lsr r0
 778:	00002908 	andeq	r2, r0, r8, lsl #18
 77c:	0000006c 	andeq	r0, r0, ip, rrx
 780:	00002974 	andeq	r2, r0, r4, ror r9
 784:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 790:	00000044 	andeq	r0, r0, r4, asr #32
}
 794:	9af00002 	bls	ffc007a4 <_estack+0xdfbfb7a4>
 798:	00040000 	andeq	r0, r4, r0
 79c:	00000000 	andeq	r0, r0, r0
 7a0:	0000298c 	andeq	r2, r0, ip, lsl #19
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
void __buttons_setirq (int val) {
 7a8:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 7ac:	00000008 	andeq	r0, r0, r8
 7b0:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 7b4:	00000022 	andeq	r0, r0, r2, lsr #32
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	0000002e 	andeq	r0, r0, lr, lsr #32
		bn = BUTTON_GPIO (__button_list [i]);
 7c0:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 7c4:	00000034 	andeq	r0, r0, r4, lsr r0
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
 7d8:	00000064 	andeq	r0, r0, r4, rrx
}
 7dc:	a09b0002 	addsge	r0, fp, r2
 7e0:	00040000 	andeq	r0, r4, r0
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
void __pinlist_setirq (int val) {
 7ec:	0000005c 	andeq	r0, r0, ip, asr r0
	for (i = 0; i < N_PINLIST; i++) {
 7f0:	00002a18 	andeq	r2, r0, r8, lsl sl
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 7f4:	0000002c 	andeq	r0, r0, ip, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 7f8:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 7fc:	00000090 	muleq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 800:	00000000 	andeq	r0, r0, r0
 804:	00000018 	andeq	r0, r0, r8, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000060 	andeq	r0, r0, r0, rrx
 810:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 814:	00000034 	andeq	r0, r0, r4, lsr r0
}
 818:	00000000 	andeq	r0, r0, r0
 81c:	00000038 	andeq	r0, r0, r8, lsr r0
 820:	00000000 	andeq	r0, r0, r0
 824:	0000000c 	andeq	r0, r0, ip
void GPIOIntHandler () {
 828:	00000000 	andeq	r0, r0, r0
if (buttons_int) {
 82c:	00000034 	andeq	r0, r0, r4, lsr r0
 830:	00000000 	andeq	r0, r0, r0
	buttons_disable ();
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	00000001 	andeq	r0, r0, r1
       4:	00000001 	andeq	r0, r0, r1
       8:	00000001 	andeq	r0, r0, r1
       c:	00000001 	andeq	r0, r0, r1
      10:	00000001 	andeq	r0, r0, r1
      14:	00000001 	andeq	r0, r0, r1
	...
      20:	00000110 	andeq	r0, r0, r0, lsl r1
      24:	00000110 	andeq	r0, r0, r0, lsl r1
      28:	00000114 	andeq	r0, r0, r4, lsl r1
      2c:	00000118 	andeq	r0, r0, r8, lsl r1
      30:	0000011a 	andeq	r0, r0, sl, lsl r1
      34:	00000120 	andeq	r0, r0, r0, lsr #2
      38:	00000138 	andeq	r0, r0, r8, lsr r1
      3c:	00000160 	andeq	r0, r0, r0, ror #2
	...
				j->Next = k;
      48:	00000174 	andeq	r0, r0, r4, ror r1
}
      4c:	0000023c 	andeq	r0, r0, ip, lsr r2
      50:	00000242 	andeq	r0, r0, r2, asr #4
      54:	0000025e 	andeq	r0, r0, lr, asr r2
	...
      60:	00000194 	muleq	r0, r4, r1
      64:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
      68:	00000242 	andeq	r0, r0, r2, asr #4
      6c:	0000025a 	andeq	r0, r0, sl, asr r2
	...
      78:	00000226 	andeq	r0, r0, r6, lsr #4
      7c:	00000228 	andeq	r0, r0, r8, lsr #4
      80:	0000022a 	andeq	r0, r0, sl, lsr #4
      84:	0000022c 	andeq	r0, r0, ip, lsr #4
	...
	descriptors [fd] = s;
      90:	00000001 	andeq	r0, r0, r1
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00000001 	andeq	r0, r0, r1
      98:	000000c8 	andeq	r0, r0, r8, asr #1
	if (s == NULL)
      9c:	00000110 	andeq	r0, r0, r0, lsl r1
		syserror (EMALLOC, "tcv05");
      a0:	00000110 	andeq	r0, r0, r0, lsl r1
      a4:	00000160 	andeq	r0, r0, r0, ror #2
      a8:	00000160 	andeq	r0, r0, r0, ror #2
      ac:	0000028c 	andeq	r0, r0, ip, lsl #5
	...
      b8:	0000033a 	andeq	r0, r0, sl, lsr r3
      bc:	00000340 	andeq	r0, r0, r0, asr #6
      c0:	00000340 	andeq	r0, r0, r0, asr #6
      c4:	00000340 	andeq	r0, r0, r0, asr #6
      c8:	00000344 	andeq	r0, r0, r4, asr #6
      cc:	00000346 	andeq	r0, r0, r6, asr #6
	...
      d8:	00000340 	andeq	r0, r0, r0, asr #6
      dc:	00000342 	andeq	r0, r0, r2, asr #6
      e0:	00000346 	andeq	r0, r0, r6, asr #6
      e4:	00000348 	andeq	r0, r0, r8, asr #6
	...
      f0:	00000358 	andeq	r0, r0, r8, asr r3
			wwait (st, 50);
      f4:	0000035a 	andeq	r0, r0, sl, asr r3
			curr += 0x1000;
      f8:	0000035c 	andeq	r0, r0, ip, asr r3
      fc:	0000035e 	andeq	r0, r0, lr, asr r3
	...
			upto = EE_SIZE - 1;
     108:	00000392 	muleq	r0, r2, r3
     10c:	00000396 	muleq	r0, r6, r3
     110:	00000398 	muleq	r0, r8, r3
     114:	0000039a 	muleq	r0, sl, r3
     118:	0000039c 	muleq	r0, ip, r3
     11c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
}
     128:	000003c8 	andeq	r0, r0, r8, asr #7
     12c:	000003ce 	andeq	r0, r0, lr, asr #7
     130:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
     134:	000003d6 	ldrdeq	r0, [r0], -r6
	...
            numbers[numbersIndex] = number;
     140:	000003f8 	strdeq	r0, [r0], -r8
     144:	0000047e 	andeq	r0, r0, lr, ror r4
            numbersIndex++;
     148:	000004a4 	andeq	r0, r0, r4, lsr #9
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	000004fc 	strdeq	r0, [r0], -ip
	...
            return 1;
     158:	0000056c 	andeq	r0, r0, ip, ror #10
     15c:	0000056e 	andeq	r0, r0, lr, ror #10
fsm root {
     160:	00000570 	andeq	r0, r0, r0, ror r5
     164:	00000584 	andeq	r0, r0, r4, lsl #11
	...
     170:	000005a0 	andeq	r0, r0, r0, lsr #11
        initCycles();
     174:	000005a2 	andeq	r0, r0, r2, lsr #11
        ser_outf(Initial, "Enter your name: ");
     178:	000005a4 	andeq	r0, r0, r4, lsr #11
     17c:	000005ac 	andeq	r0, r0, ip, lsr #11
	...
        ser_in(Get_Name, username, NAME_LENGTH);
     188:	000006e8 	andeq	r0, r0, r8, ror #13
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18c:	000006ec 	andeq	r0, r0, ip, ror #13
     190:	000006ee 	andeq	r0, r0, lr, ror #13
        ser_inf(Get_Choice, "%c", &choice);
     194:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     198:	000006f2 	strdeq	r0, [r0], -r2
     19c:	000006f4 	strdeq	r0, [r0], -r4
	...
        if (choice == 'A' || choice == 'a'){
     1a8:	00000750 	andeq	r0, r0, r0, asr r7
            proceed Adjust_Intervals;
     1ac:	00000754 	andeq	r0, r0, r4, asr r7
            proceed Monitor;
     1b0:	00000766 	andeq	r0, r0, r6, ror #14
        proceed Get_Choice;
     1b4:	00000792 	muleq	r0, r2, r7
	...
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	000007a8 	andeq	r0, r0, r8, lsr #15
     1c4:	000007a8 	andeq	r0, r0, r8, lsr #15
     1c8:	000007aa 	andeq	r0, r0, sl, lsr #15
        processSettingsInput(settings);
     1cc:	000007ac 	andeq	r0, r0, ip, lsr #15
	...
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d8:	000007ac 	andeq	r0, r0, ip, lsr #15
     1dc:	000007ae 	andeq	r0, r0, lr, lsr #15
     1e0:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     1e4:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
     1e8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
        proceed Show_Menu;
     1ec:	000007be 			; <UNDEFINED> instruction: 0x000007be
     1f0:	000007c8 	andeq	r0, r0, r8, asr #15
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	000007ca 	andeq	r0, r0, sl, asr #15
     1f8:	000007d6 	ldrdeq	r0, [r0], -r6
        displayCycle = YES;
     1fc:	000007d8 	ldrdeq	r0, [r0], -r8
	...
        ser_inf(Await_Stop, "%c", ch);
     208:	000007ec 	andeq	r0, r0, ip, ror #15
        proceed Await_Stop;
     20c:	000007ec 	andeq	r0, r0, ip, ror #15
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     210:	000007ee 	andeq	r0, r0, lr, ror #15
     214:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
        leds(1, 0);
     220:	000007f2 	strdeq	r0, [r0], -r2
     224:	000007f4 	strdeq	r0, [r0], -r4
     228:	000007f6 	strdeq	r0, [r0], -r6
        leds(0, 0);
     22c:	000007f8 	strdeq	r0, [r0], -r8
     230:	00000802 	andeq	r0, r0, r2, lsl #16
     234:	00000806 	andeq	r0, r0, r6, lsl #16
     238:	00000810 	andeq	r0, r0, r0, lsl r8
     23c:	00000812 	andeq	r0, r0, r2, lsl r8
	...
            proceed Stop;
     248:	000008f6 	strdeq	r0, [r0], -r6
        } else if (choice == 'V' || choice == 'v') {
     24c:	000008f8 	strdeq	r0, [r0], -r8
            proceed View_Settings;
     250:	000008fa 	strdeq	r0, [r0], -sl
        } else if (choice == 'M' || choice == 'm') {
     254:	000008fe 	strdeq	r0, [r0], -lr
            proceed Monitor;
     258:	0000090e 	andeq	r0, r0, lr, lsl #18
     25c:	00000910 	andeq	r0, r0, r0, lsl r9
	...
     268:	000008f8 	strdeq	r0, [r0], -r8
     26c:	000008fa 	strdeq	r0, [r0], -sl
     270:	000008fe 	strdeq	r0, [r0], -lr
     274:	0000090e 	andeq	r0, r0, lr, lsl #18
     278:	00000910 	andeq	r0, r0, r0, lsl r9
     27c:	0000094a 	andeq	r0, r0, sl, asr #18
	...
     288:	00000902 	andeq	r0, r0, r2, lsl #18
static void devinit_uart (int devnum) {
     28c:	00000906 	andeq	r0, r0, r6, lsl #18
	adddevfunc (ioreq_uart_a, devnum);
     290:	0000092e 	andeq	r0, r0, lr, lsr #18
     294:	00000936 	andeq	r0, r0, r6, lsr r9
	...
	while (n) {
     2a0:	00000906 	andeq	r0, r0, r6, lsl #18
     2a4:	0000090a 	andeq	r0, r0, sl, lsl #18
}
     2a8:	00000942 	andeq	r0, r0, r2, asr #18
	while (n--);
     2ac:	00000946 	andeq	r0, r0, r6, asr #18
	...
		n--;
     2b8:	0000090a 	andeq	r0, r0, sl, lsl #18
     2bc:	0000090e 	andeq	r0, r0, lr, lsl #18
     2c0:	0000093c 	andeq	r0, r0, ip, lsr r9
void mdelay (volatile word n) {
     2c4:	00000942 	andeq	r0, r0, r2, asr #18
	...
	while (n) {
     2d0:	0000094a 	andeq	r0, r0, sl, asr #18
}
     2d4:	0000094c 	andeq	r0, r0, ip, asr #18
		udelay (999);
     2d8:	0000094e 	andeq	r0, r0, lr, asr #18
     2dc:	00000950 	andeq	r0, r0, r0, asr r9
		n--;
     2e0:	00000952 	andeq	r0, r0, r2, asr r9
     2e4:	00000954 	andeq	r0, r0, r4, asr r9
	...
void __pi_ondomain (lword d) {
     2f0:	0000094c 	andeq	r0, r0, ip, asr #18
     2f4:	0000094e 	andeq	r0, r0, lr, asr #18
		if (__pi_systat.effpdm > 1)
     2f8:	00000954 	andeq	r0, r0, r4, asr r9
     2fc:	00000956 	andeq	r0, r0, r6, asr r9
	...
	PRCMPowerDomainOn (d);
     308:	00000966 	andeq	r0, r0, r6, ror #18
     30c:	00000968 	andeq	r0, r0, r8, ror #18
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	0000096a 	andeq	r0, r0, sl, ror #18
     314:	0000096c 	andeq	r0, r0, ip, ror #18
	...
	__pi_systat.ondmns |= d;
     320:	0000097e 	andeq	r0, r0, lr, ror r9
}
     324:	00000980 	andeq	r0, r0, r0, lsl #19
     328:	00000982 	andeq	r0, r0, r2, lsl #19
void __pi_syserror (word ec, const char *m) {
     32c:	00000984 	andeq	r0, r0, r4, lsl #19
	...
     338:	000009c6 	andeq	r0, r0, r6, asr #19
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	000009c6 	andeq	r0, r0, r6, asr #19
     340:	000009ca 	andeq	r0, r0, sl, asr #19
     344:	000009cc 	andeq	r0, r0, ip, asr #19
	...
		all_leds_blink;
     350:	000009fc 	strdeq	r0, [r0], -ip
     354:	000009fe 	strdeq	r0, [r0], -lr
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	00000a00 	andeq	r0, r0, r0, lsl #20
     35c:	00000a08 	andeq	r0, r0, r8, lsl #20
	...
     368:	00000a84 	andeq	r0, r0, r4, lsl #21
     36c:	00000a84 	andeq	r0, r0, r4, lsl #21
	while (1) {
     370:	00000a8a 	andeq	r0, r0, sl, lsl #21
     374:	00000a8c 	andeq	r0, r0, ip, lsl #21
     378:	00000a8e 	andeq	r0, r0, lr, lsl #21
     37c:	00000a92 	muleq	r0, r2, sl
	...
	setdel = __pi_mintk - __pi_old;
     388:	00000a9e 	muleq	r0, lr, sl
     38c:	00000aa0 	andeq	r0, r0, r0, lsr #21
     390:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
     398:	00000aca 	andeq	r0, r0, sl, asr #21
     39c:	00000ae6 	andeq	r0, r0, r6, ror #21
     3a0:	00000b0a 	andeq	r0, r0, sl, lsl #22
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	00000c64 	andeq	r0, r0, r4, ror #24
	...
}
     3b0:	00000a9e 	muleq	r0, lr, sl
     3b4:	00000aa0 	andeq	r0, r0, r0, lsr #21
     3b8:	00000b3e 	andeq	r0, r0, lr, lsr fp
     3bc:	00000b42 	andeq	r0, r0, r2, asr #22
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	00000b42 	andeq	r0, r0, r2, asr #22
     3cc:	00000b42 	andeq	r0, r0, r2, asr #22
     3d0:	00000b46 	andeq	r0, r0, r6, asr #22
     3d4:	00000b4a 	andeq	r0, r0, sl, asr #22
	sti_aux;
     3d8:	00000b4e 	andeq	r0, r0, lr, asr #22
}
     3dc:	00000b50 	andeq	r0, r0, r0, asr fp
	...
void AONRTCIntHandler () {
     3e8:	00000b42 	andeq	r0, r0, r2, asr #22
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	00000b46 	andeq	r0, r0, r6, asr #22
     3f0:	00000b5c 	andeq	r0, r0, ip, asr fp
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	00000b5e 	andeq	r0, r0, lr, asr fp
		if (__pi_utims [0] == 0)
     3f8:	00000b62 	andeq	r0, r0, r2, ror #22
     3fc:	00000b66 	andeq	r0, r0, r6, ror #22
	...
			(*(__pi_utims [0]))--;
     408:	00000b4a 	andeq	r0, r0, sl, asr #22
		if (__pi_utims [1] == 0)
     40c:	00000b4e 	andeq	r0, r0, lr, asr #22
		if (*(__pi_utims [1])) {
     410:	00000b50 	andeq	r0, r0, r0, asr fp
			aux_timer_inactive = 0;
     414:	00000b52 	andeq	r0, r0, r2, asr fp
			(*(__pi_utims [1]))--;
     418:	00000b56 	andeq	r0, r0, r6, asr fp
		if (__pi_utims [2] == 0)
     41c:	00000b5a 	andeq	r0, r0, sl, asr fp
	...
		if (__pi_utims [3] != 0) {
     428:	00000b5e 	andeq	r0, r0, lr, asr fp
			if (*(__pi_utims [3])) {
     42c:	00000b62 	andeq	r0, r0, r2, ror #22
				aux_timer_inactive = 0;
     430:	00000b7c 	andeq	r0, r0, ip, ror fp
				(*(__pi_utims [3]))--;
     434:	00000b80 	andeq	r0, r0, r0, lsl #23
	if (__pi_systat.ledsts) {
     438:	00000b82 	andeq	r0, r0, r2, lsl #23
     43c:	00000b8a 	andeq	r0, r0, sl, lsl #23
	...
			if (__pi_systat.ledblk) {
     448:	00000b74 	andeq	r0, r0, r4, ror fp
     44c:	00000b76 	andeq	r0, r0, r6, ror fp
     450:	00000b78 	andeq	r0, r0, r8, ror fp
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	00000b7c 	andeq	r0, r0, ip, ror fp
	...
     460:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
     464:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
				if (__pi_systat.ledsts & 0x4)
     468:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
				__pi_systat.ledblk = 0;
     46c:	00000bc6 	andeq	r0, r0, r6, asr #23
	...
			if (__pi_systat.fstblk)
     478:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
				__pi_systat.ledblc = 200;
     47c:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
	if (events & AON_RTC_EVFLAGS_CH0) {
     480:	00000bca 	andeq	r0, r0, sl, asr #23
		cli_tim;
     484:	00000bcc 	andeq	r0, r0, ip, asr #23
	...
		setdel = 0;
     490:	00000bea 	andeq	r0, r0, sl, ror #23
		RISE_N_SHINE;
     494:	00000bec 	andeq	r0, r0, ip, ror #23
		__pi_new += setdel;
     498:	00000bee 	andeq	r0, r0, lr, ror #23
		RISE_N_SHINE;
     49c:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
		aux_timer_inactive = 1;
     4a8:	00000bec 	andeq	r0, r0, ip, ror #23
				if (__pi_systat.ledsts & 0x1)
     4ac:	00000bee 	andeq	r0, r0, lr, ror #23
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4b0:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4b4:	00000bf4 	strdeq	r0, [r0], -r4
	...
     4c0:	00000c4a 	andeq	r0, r0, sl, asr #24
				if (__pi_systat.ledsts & 0x8)
     4c4:	00000c4c 	andeq	r0, r0, ip, asr #24
				__pi_systat.ledblk = 1;
     4c8:	00000c4c 	andeq	r0, r0, ip, asr #24
     4cc:	00000c4e 	andeq	r0, r0, lr, asr #24
	...
			cli_aux;
     4d8:	00000c52 	andeq	r0, r0, r2, asr ip
     4dc:	00000c56 	andeq	r0, r0, r6, asr ip
     4e0:	00000c58 	andeq	r0, r0, r8, asr ip
     4e4:	00000c5a 	andeq	r0, r0, sl, asr ip
	...
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
     4f8:	00000001 	andeq	r0, r0, r1
word tci_update_delay_ticks (Boolean force) {
     4fc:	00000001 	andeq	r0, r0, r1
	...
	if (setdel) {
     508:	00000cdc 	ldrdeq	r0, [r0], -ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	00000cdc 	ldrdeq	r0, [r0], -ip
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	00000ce0 	andeq	r0, r0, r0, ror #25
     514:	00000cec 	andeq	r0, r0, ip, ror #25
	...
				AON_RTC_O_CH0CMP)) - gettav ());
     520:	0000028c 	andeq	r0, r0, ip, lsl #5
	return NO;
     524:	00000298 	muleq	r0, r8, r2
			setdel = 0;
     528:	00000298 	muleq	r0, r8, r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	000002c4 	andeq	r0, r0, r4, asr #5
     530:	000002c4 	andeq	r0, r0, r4, asr #5
}
     534:	000002ee 	andeq	r0, r0, lr, ror #5
		sti_tim;
     538:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		return YES;
     53c:	0000032c 	andeq	r0, r0, ip, lsr #6
     540:	00000001 	andeq	r0, r0, r1
     544:	00000001 	andeq	r0, r0, r1
     548:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     550:	0000032c 	andeq	r0, r0, ip, lsr #6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	00000380 	andeq	r0, r0, r0, lsl #7
	UARTDisable (UART0_BASE);
     558:	00000380 	andeq	r0, r0, r0, lsl #7
	UARTConfigSetExpClk (UART0_BASE,
     55c:	000003c0 	andeq	r0, r0, r0, asr #7
     560:	000003c0 	andeq	r0, r0, r0, asr #7
     564:	000003e8 	andeq	r0, r0, r8, ror #7
     568:	000003e8 	andeq	r0, r0, r8, ror #7
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	000004fc 	strdeq	r0, [r0], -ip
     570:	000004fc 	strdeq	r0, [r0], -ip
     574:	0000054c 	andeq	r0, r0, ip, asr #10
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	0000054c 	andeq	r0, r0, ip, asr #10
     57c:	000005a0 	andeq	r0, r0, r0, lsr #11
     580:	000005a0 	andeq	r0, r0, r0, lsr #11
	urates [0] = rate;
     584:	000005d8 	ldrdeq	r0, [r0], -r8
}
     588:	000005d8 	ldrdeq	r0, [r0], -r8
     58c:	000006e8 	andeq	r0, r0, r8, ror #13
     590:	00000001 	andeq	r0, r0, r1
     594:	00000001 	andeq	r0, r0, r1
     598:	000006e8 	andeq	r0, r0, r8, ror #13
     59c:	000007a8 	andeq	r0, r0, r8, lsr #15
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	000007a8 	andeq	r0, r0, r8, lsr #15
     5a4:	000007ec 	andeq	r0, r0, ip, ror #15
     5a8:	000007ec 	andeq	r0, r0, ip, ror #15
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	00000828 	andeq	r0, r0, r8, lsr #16
     5b0:	00000828 	andeq	r0, r0, r8, lsr #16
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	000008cc 	andeq	r0, r0, ip, asr #17
     5b8:	000008cc 	andeq	r0, r0, ip, asr #17
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	00000a84 	andeq	r0, r0, r4, lsl #21
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
     5c8:	00000001 	andeq	r0, r0, r1
     5cc:	00000001 	andeq	r0, r0, r1
     5d0:	00000a84 	andeq	r0, r0, r4, lsl #21
     5d4:	00000cdc 	ldrdeq	r0, [r0], -ip
	switch (operation) {
     5d8:	00000001 	andeq	r0, r0, r1
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	00000001 	andeq	r0, r0, r1
     5e4:	00000001 	andeq	r0, r0, r1
     5e8:	00000cdc 	ldrdeq	r0, [r0], -ip
     5ec:	00000d3c 	andeq	r0, r0, ip, lsr sp
	...
			while (len && uart_a_char_available) {
     5f8:	00000df8 	strdeq	r0, [r0], -r8
     5fc:	00000dfa 	strdeq	r0, [r0], -sl
     600:	00000dfa 	strdeq	r0, [r0], -sl
			if (len != operation) {
     604:	00000dfc 	strdeq	r0, [r0], -ip
	...
			uart_a_disable_int;
     610:	00000e2e 	andeq	r0, r0, lr, lsr #28
			if (uart_a_char_available) {
     614:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				*buf++ = uart_a_read;
     618:	00000ed4 	ldrdeq	r0, [r0], -r4
			uart_a_disable_int;
     61c:	00000ed8 	ldrdeq	r0, [r0], -r8
	...
			if (uart_a_char_available) {
     628:	0000126c 	andeq	r1, r0, ip, ror #4
				uart_a_enable_int;
     62c:	0000126e 	andeq	r1, r0, lr, ror #4
     630:	00001272 	andeq	r1, r0, r2, ror r2
				goto Redo_rx;
     634:	00001274 	andeq	r1, r0, r4, ror r2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	00001278 	andeq	r1, r0, r8, ror r2
     63c:	0000127c 	andeq	r1, r0, ip, ror r2
			return -2;
     640:	0000127e 	andeq	r1, r0, lr, ror r2
     644:	00001288 	andeq	r1, r0, r8, lsl #5
	...
			while (len && uart_a_room_in_tx) {
     650:	000012ba 			; <UNDEFINED> instruction: 0x000012ba
     654:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
     658:	000012be 			; <UNDEFINED> instruction: 0x000012be
			if (len != operation) {
     65c:	000012c2 	andeq	r1, r0, r2, asr #5
			uart_a_disable_int;
     660:	00001352 	andeq	r1, r0, r2, asr r3
     664:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
			if (uart_a_room_in_tx) {
     668:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
     66c:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
				uart_a_enable_int;
     670:	000013be 			; <UNDEFINED> instruction: 0x000013be
     674:	000013c0 	andeq	r1, r0, r0, asr #7
	...
				uart_a_write (*buf);
     680:	000012d6 	ldrdeq	r1, [r0], -r6
     684:	000012d8 	ldrdeq	r1, [r0], -r8
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	000012d8 	ldrdeq	r1, [r0], -r8
     68c:	000012da 	ldrdeq	r1, [r0], -sl
	...
			uart_a_enable_int;
     698:	00000d3c 	andeq	r0, r0, ip, lsr sp
			return 0;
     69c:	00000d78 	andeq	r0, r0, r8, ror sp
			if (len == UART_CNTRL_SETRATE) {
     6a0:	00000d78 	andeq	r0, r0, r8, ror sp
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	00000df8 	strdeq	r0, [r0], -r8
     6a8:	00000df8 	strdeq	r0, [r0], -r8
     6ac:	00000e10 	andeq	r0, r0, r0, lsl lr
				syserror (EREQPAR, "uar");
     6b0:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     6b4:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     6b8:	00000e10 	andeq	r0, r0, r0, lsl lr
				return 1;
     6bc:	00000e20 	andeq	r0, r0, r0, lsr #28
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6c0:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00000001 	andeq	r0, r0, r1
     6cc:	00000001 	andeq	r0, r0, r1
     6d0:	00000001 	andeq	r0, r0, r1
     6d4:	00000001 	andeq	r0, r0, r1
     6d8:	00000e20 	andeq	r0, r0, r0, lsr #28
     6dc:	00000eec 	andeq	r0, r0, ip, ror #29
     6e0:	00000eec 	andeq	r0, r0, ip, ror #29
     6e4:	00000f00 	andeq	r0, r0, r0, lsl #30
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	00000f00 	andeq	r0, r0, r0, lsl #30
void UART0IntHandler () {
     6ec:	00000f34 	andeq	r0, r0, r4, lsr pc
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	00000f34 	andeq	r0, r0, r4, lsr pc
     6f4:	00000f68 	andeq	r0, r0, r8, ror #30
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
     700:	00000f68 	andeq	r0, r0, r8, ror #30
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	00000f8c 	andeq	r0, r0, ip, lsl #31
     708:	00000f8c 	andeq	r0, r0, ip, lsl #31
		RISE_N_SHINE;
     70c:	00000fc4 	andeq	r0, r0, r4, asr #31
     710:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	00000001 	andeq	r0, r0, r1
     724:	00000001 	andeq	r0, r0, r1
     728:	00000fc4 	andeq	r0, r0, r4, asr #31
     72c:	00000fe8 	andeq	r0, r0, r8, ror #31
     730:	00000001 	andeq	r0, r0, r1
     734:	00000001 	andeq	r0, r0, r1
     738:	00000fe8 	andeq	r0, r0, r8, ror #31
     73c:	00000ff6 	strdeq	r0, [r0], -r6
     740:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     750:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	00000001 	andeq	r0, r0, r1
     758:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     75c:	00000001 	andeq	r0, r0, r1
     760:	00000ff6 	strdeq	r0, [r0], -r6
     764:	0000100a 	andeq	r1, r0, sl
		i_trigger (devevent (UART_A, WRITE));
     768:	00000001 	andeq	r0, r0, r1
     76c:	00000001 	andeq	r0, r0, r1
     770:	0000100c 	andeq	r1, r0, ip
     774:	00001030 	andeq	r1, r0, r0, lsr r0
     778:	00001030 	andeq	r1, r0, r0, lsr r0
     77c:	000010cc 	andeq	r1, r0, ip, asr #1
     780:	000010cc 	andeq	r1, r0, ip, asr #1
     784:	0000111c 	andeq	r1, r0, ip, lsl r1
     788:	0000111c 	andeq	r1, r0, ip, lsl r1
     78c:	00001164 	andeq	r1, r0, r4, ror #2
     790:	00001164 	andeq	r1, r0, r4, ror #2
}
     794:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
     798:	00000001 	andeq	r0, r0, r1
     79c:	00000001 	andeq	r0, r0, r1
     7a0:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
     7a4:	0000125c 	andeq	r1, r0, ip, asr r2
void __buttons_setirq (int val) {
     7a8:	0000125c 	andeq	r1, r0, ip, asr r2
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	00001290 	muleq	r0, r0, r2
     7b0:	00001290 	muleq	r0, r0, r2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	000012a8 	andeq	r1, r0, r8, lsr #5
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	000012a8 	andeq	r1, r0, r8, lsr #5
     7cc:	000013e4 	andeq	r1, r0, r4, ror #7
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	00000001 	andeq	r0, r0, r1
	...
}
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     7ec:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	00000001 	andeq	r0, r0, r1
	...
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
	...
}
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000001 	andeq	r0, r0, r1
     820:	00000001 	andeq	r0, r0, r1
     824:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     828:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
	buttons_disable ();
     834:	00000001 	andeq	r0, r0, r1
     838:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     83c:	00000001 	andeq	r0, r0, r1
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
if (pin_sensor_int) {
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     87c:	00000001 	andeq	r0, r0, r1
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
	__pinsen_disable_and_clear;
     8a8:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
}
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00000001 	andeq	r0, r0, r1
     8c4:	00000001 	andeq	r0, r0, r1
     8c8:	00000001 	andeq	r0, r0, r1
void system_init () {
     8cc:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	000013e4 	andeq	r1, r0, r4, ror #7
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	000013e6 	andeq	r1, r0, r6, ror #7
	...
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	000013e6 	andeq	r1, r0, r6, ror #7
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	000013e8 	andeq	r1, r0, r8, ror #7
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	000013e8 	andeq	r1, r0, r8, ror #7
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	000013ea 	andeq	r1, r0, sl, ror #7
     920:	000013ea 	andeq	r1, r0, sl, ror #7
     924:	000013ec 	andeq	r1, r0, ip, ror #7
     928:	000013ec 	andeq	r1, r0, ip, ror #7
		if (port_confs [i] & 0x80)
     92c:	00001430 	andeq	r1, r0, r0, lsr r4
	...
		if (port_confs [i] & 0x40)
     938:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     944:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
	...
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	00000001 	andeq	r0, r0, r1
	...
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	00000001 	andeq	r0, r0, r1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_RTC_COMB);
     98c:	00000001 	andeq	r0, r0, r1
     990:	00000001 	andeq	r0, r0, r1
     994:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_GPIO_EDGE);
     9a0:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b8:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
	...
	EXTRA_INITIALIZERS;
     9d8:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	00000001 	andeq	r0, r0, r1
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
	...
     9f0:	0000143c 	andeq	r1, r0, ip, lsr r4
     9f4:	00001440 	andeq	r1, r0, r0, asr #8
			devinit [i] . init (devinit [i] . param);
     9f8:	00001446 	andeq	r1, r0, r6, asr #8
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	00001448 	andeq	r1, r0, r8, asr #8
     a00:	00001456 	andeq	r1, r0, r6, asr r4
     a04:	00001456 	andeq	r1, r0, r6, asr r4
	IntEnable (INT_UART0_COMB);
     a08:	00001458 	andeq	r1, r0, r8, asr r4
     a0c:	0000145a 	andeq	r1, r0, sl, asr r4
	...
		diag ("");
     a18:	00001442 	andeq	r1, r0, r2, asr #8
     a1c:	00001444 	andeq	r1, r0, r4, asr #8
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a20:	0000145a 	andeq	r1, r0, sl, asr r4
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	0000145c 	andeq	r1, r0, ip, asr r4
	...
		diag ("Leftover RAM: %d bytes",
     a30:	00001444 	andeq	r1, r0, r4, asr #8
     a34:	00001446 	andeq	r1, r0, r6, asr #8
     a38:	00001448 	andeq	r1, r0, r8, asr #8
     a3c:	0000144a 	andeq	r1, r0, sl, asr #8
     a40:	00001450 	andeq	r1, r0, r0, asr r4
     a44:	00001450 	andeq	r1, r0, r0, asr r4
	...
     a50:	00001474 	andeq	r1, r0, r4, ror r4
     a54:	0000147c 	andeq	r1, r0, ip, ror r4
     a58:	00001486 	andeq	r1, r0, r6, lsl #9
     a5c:	00001486 	andeq	r1, r0, r6, lsl #9
     a60:	0000148a 	andeq	r1, r0, sl, lsl #9
     a64:	0000148c 	andeq	r1, r0, ip, lsl #9
	...
     a70:	0000148c 	andeq	r1, r0, ip, lsl #9
     a74:	0000148c 	andeq	r1, r0, ip, lsl #9
     a78:	0000148e 	andeq	r1, r0, lr, lsl #9
     a7c:	00001490 	muleq	r0, r0, r4
	...
__attribute__ ((noreturn)) void __pi_release () {
     a88:	0000149c 	muleq	r0, ip, r4
     a8c:	0000149e 	muleq	r0, lr, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a90:	000014a0 	andeq	r1, r0, r0, lsr #9
	check_stack_overflow;
     a94:	000014a4 	andeq	r1, r0, r4, lsr #9
	...
	update_n_wake (MAX_WORD, NO);
     aa0:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
     aa4:	000014be 			; <UNDEFINED> instruction: 0x000014be
     aa8:	000014c2 	andeq	r1, r0, r2, asr #9
	for_all_tasks (__pi_curr) {
     aac:	000014c4 	andeq	r1, r0, r4, asr #9
     ab0:	000014ca 	andeq	r1, r0, sl, asr #9
     ab4:	000014da 	ldrdeq	r1, [r0], -sl
	...
	__SLEEP;
     ac0:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
     ac4:	000014be 			; <UNDEFINED> instruction: 0x000014be
     ac8:	000014c2 	andeq	r1, r0, r2, asr #9
	system_event_count ++;
     acc:	000014c4 	andeq	r1, r0, r4, asr #9
     ad0:	000014ca 	andeq	r1, r0, sl, asr #9
	switch (__pi_systat.effpdm) {
     ad4:	000014ca 	andeq	r1, r0, sl, asr #9
     ad8:	000014cc 	andeq	r1, r0, ip, asr #9
     adc:	000014ce 	andeq	r1, r0, lr, asr #9
	...
     ae8:	00001522 	andeq	r1, r0, r2, lsr #10
     aec:	00001526 	andeq	r1, r0, r6, lsr #10
	check_stack_overflow;
     af0:	00001528 	andeq	r1, r0, r8, lsr #10
     af4:	0000152a 	andeq	r1, r0, sl, lsr #10
	...
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	0000152e 	andeq	r1, r0, lr, lsr #10
			goto Redo;
     b04:	0000152e 	andeq	r1, r0, lr, lsr #10
	for_all_tasks (__pi_curr) {
     b08:	00001530 	andeq	r1, r0, r0, lsr r5
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	00001532 	andeq	r1, r0, r2, lsr r5
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	00000001 	andeq	r0, r0, r1
     b1c:	00000001 	andeq	r0, r0, r1
     b20:	00000001 	andeq	r0, r0, r1
     b24:	00000001 	andeq	r0, r0, r1
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b30:	00000001 	andeq	r0, r0, r1
			__WFI ();
     b34:	00000001 	andeq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	00000001 	andeq	r0, r0, r1
     b3c:	00000001 	andeq	r0, r0, r1
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b48:	00000001 	andeq	r0, r0, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4c:	00000001 	andeq	r0, r0, r1
     b50:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	00000001 	andeq	r0, r0, r1
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	00000001 	andeq	r0, r0, r1
     b68:	00000001 	andeq	r0, r0, r1
     b6c:	00000001 	andeq	r0, r0, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b78:	00001438 	andeq	r1, r0, r8, lsr r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	0000146c 	andeq	r1, r0, ip, ror #8
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b80:	0000146c 	andeq	r1, r0, ip, ror #8
     b84:	0000149c 	muleq	r0, ip, r4
     b88:	0000149c 	muleq	r0, ip, r4
     b8c:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
     b90:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
			SysCtrlSetRechargeBeforePowerDown
     b94:	00001508 	andeq	r1, r0, r8, lsl #10
     b98:	00001508 	andeq	r1, r0, r8, lsl #10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9c:	00001548 	andeq	r1, r0, r8, asr #10
     ba0:	00001548 	andeq	r1, r0, r8, asr #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	0000156c 	andeq	r1, r0, ip, ror #10
     ba8:	0000156c 	andeq	r1, r0, ip, ror #10
     bac:	00001580 	andeq	r1, r0, r0, lsl #11
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	00001580 	andeq	r1, r0, r0, lsl #11
     bb4:	00001594 	muleq	r0, r4, r5
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	00000001 	andeq	r0, r0, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000001 	andeq	r0, r0, r1
     bc4:	00000001 	andeq	r0, r0, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc8:	00000001 	andeq	r0, r0, r1
			while (!(AONWUCPowerStatusGet () &
     bcc:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	00000001 	andeq	r0, r0, r1
     bd4:	00000001 	andeq	r0, r0, r1
     bd8:	00000001 	andeq	r0, r0, r1
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bdc:	00000001 	andeq	r0, r0, r1
     be0:	00000001 	andeq	r0, r0, r1
     be4:	00000001 	andeq	r0, r0, r1
     be8:	00000001 	andeq	r0, r0, r1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	00000001 	andeq	r0, r0, r1
	...
     bf8:	00001594 	muleq	r0, r4, r5
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfc:	0000160c 	andeq	r1, r0, ip, lsl #12
	...
     c08:	0000160c 	andeq	r1, r0, ip, lsl #12
}
     c0c:	00001660 	andeq	r1, r0, r0, ror #12
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	00001660 	andeq	r1, r0, r0, ror #12
     c1c:	000016c0 	andeq	r1, r0, r0, asr #13
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c28:	000016ce 	andeq	r1, r0, lr, asr #13
     c2c:	000016ce 	andeq	r1, r0, lr, asr #13
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c30:	000016d4 	ldrdeq	r1, [r0], -r4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	00001730 	andeq	r1, r0, r0, lsr r7
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c40:	000016c0 	andeq	r1, r0, r0, asr #13
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c44:	00001730 	andeq	r1, r0, r0, lsr r7
	...
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	00001744 	andeq	r1, r0, r4, asr #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	00001828 	andeq	r1, r0, r8, lsr #16
     c58:	0000182e 	andeq	r1, r0, lr, lsr #16
			PRCMPowerDomainOff (
     c5c:	00001832 	andeq	r1, r0, r2, lsr r8
     c60:	00001838 	andeq	r1, r0, r8, lsr r8
	__SLEEP;
     c64:	0000184c 	andeq	r1, r0, ip, asr #16
	...
	goto Redo;
     c70:	00001730 	andeq	r1, r0, r0, lsr r7
     c74:	0000184c 	andeq	r1, r0, ip, asr #16
	...
     c80:	00001878 	andeq	r1, r0, r8, ror r8
     c84:	0000187a 	andeq	r1, r0, sl, ror r8
     c88:	00001948 	andeq	r1, r0, r8, asr #18
     c8c:	0000196c 	andeq	r1, r0, ip, ror #18
     c90:	0000196e 	andeq	r1, r0, lr, ror #18
     c94:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
     c98:	000019e0 	andeq	r1, r0, r0, ror #19
     c9c:	000019e2 	andeq	r1, r0, r2, ror #19
	...
     ca8:	0000187a 	andeq	r1, r0, sl, ror r8
     cac:	0000187c 	andeq	r1, r0, ip, ror r8
     cb0:	0000191e 	andeq	r1, r0, lr, lsl r9
     cb4:	00001948 	andeq	r1, r0, r8, asr #18
     cb8:	0000196c 	andeq	r1, r0, ip, ror #18
     cbc:	0000196e 	andeq	r1, r0, lr, ror #18
	...
     cc8:	000018ba 			; <UNDEFINED> instruction: 0x000018ba
     ccc:	000018c2 	andeq	r1, r0, r2, asr #17
     cd0:	00001a66 	andeq	r1, r0, r6, ror #20
     cd4:	00001a72 	andeq	r1, r0, r2, ror sl
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	000019c0 	andeq	r1, r0, r0, asr #19
     ce4:	000019e0 	andeq	r1, r0, r0, ror #19
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	000019e2 	andeq	r1, r0, r2, ror #19
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	00001a26 	andeq	r1, r0, r6, lsr #20
	...
     cf8:	0000184c 	andeq	r1, r0, ip, asr #16
     cfc:	0000186c 	andeq	r1, r0, ip, ror #16
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	0000186c 	andeq	r1, r0, ip, ror #16
     d04:	00001a9c 	muleq	r0, ip, sl
     d08:	00001a9c 	muleq	r0, ip, sl
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	00001aec 	andeq	r1, r0, ip, ror #21
	...
	delay (16, 0);
     d18:	00001b00 	andeq	r1, r0, r0, lsl #22
     d1c:	00001b04 	andeq	r1, r0, r4, lsl #22
	__pi_release ();
     d20:	00001dde 	ldrdeq	r1, [r0], -lr
     d24:	00001e26 	andeq	r1, r0, r6, lsr #28
	...
     d30:	00001b04 	andeq	r1, r0, r4, lsl #22
     d34:	00001b0a 	andeq	r1, r0, sl, lsl #22
     d38:	00001b42 	andeq	r1, r0, r2, asr #22
static void killev (__pi_pcb_t *pid) {
     d3c:	00001bae 	andeq	r1, r0, lr, lsr #23
	wfun = (aword)(pid->code);
     d40:	00001e42 	andeq	r1, r0, r2, asr #28
	for_all_tasks (i) {
     d44:	00001e62 	andeq	r1, r0, r2, ror #28
	...
		for (j = 0; j < nevents (i); j++) {
     d50:	00001c66 	andeq	r1, r0, r6, ror #24
			    || i->Events [j] . Event == wfun
     d54:	00001ce0 	andeq	r1, r0, r0, ror #25
		for (j = 0; j < nevents (i); j++) {
     d58:	00001e6a 	andeq	r1, r0, sl, ror #28
			if (i->Events [j] . Event == (aword)pid
     d5c:	00001e72 	andeq	r1, r0, r2, ror lr
	...
				wakeupev (i, j);
     d68:	00001cf8 	strdeq	r1, [r0], -r8
     d6c:	00001d4e 	andeq	r1, r0, lr, asr #26
	for_all_tasks (i) {
     d70:	00001dc4 	andeq	r1, r0, r4, asr #27
}
     d74:	00001dde 	ldrdeq	r1, [r0], -lr
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	00001d54 	andeq	r1, r0, r4, asr sp
	cc = (aword*)(mpools + MA_NP);
     d84:	00001dc4 	andeq	r1, r0, r4, asr #27
	m_setnextp (ch, chunk);
     d88:	00001e26 	andeq	r1, r0, r6, lsr #28
	m_setnextp (cc, ch);
     d8c:	00001e2e 	andeq	r1, r0, lr, lsr #28
}
     d90:	00001e72 	andeq	r1, r0, r2, ror lr
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	00001e7c 	andeq	r1, r0, ip, ror lr
	...
			m_setnextp (cc, m_nextp (chunk));
     da0:	00001aec 	andeq	r1, r0, ip, ror #21
			m_size (chunk) += m_hdrlen + m_size (ch);
     da4:	00001e7c 	andeq	r1, r0, ip, ror lr
	...
     db0:	00001e7c 	andeq	r1, r0, ip, ror lr
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	00001eac 	andeq	r1, r0, ip, lsr #29
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc0:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     dc4:	00000001 	andeq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	00001eac 	andeq	r1, r0, ip, lsr #29
     dcc:	00001ec4 	andeq	r1, r0, r4, asr #29
	...
     dd8:	00001ec4 	andeq	r1, r0, r4, asr #29
     ddc:	00001ecc 	andeq	r1, r0, ip, asr #29
			if (m_size (chunk) >= m_size (ch))
     de0:	00000001 	andeq	r0, r0, r1
     de4:	00000001 	andeq	r0, r0, r1
     de8:	00001ecc 	andeq	r1, r0, ip, asr #29
		chunk = m_nextp (chunk))
     dec:	00001ed4 	ldrdeq	r1, [r0], -r4
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	00000001 	andeq	r0, r0, r1
	diag_wait (a);
     dfc:	00000001 	andeq	r0, r0, r1
	...
}
     e08:	00001ed4 	ldrdeq	r1, [r0], -r4
     e0c:	00001fa8 	andeq	r1, r0, r8, lsr #31
	syserror (ESTATE, "state");
     e10:	00001fa8 	andeq	r1, r0, r8, lsr #31
     e14:	0000204c 	andeq	r2, r0, ip, asr #32
	...
void update_n_wake (word min, Boolean force) {
     e20:	0000205a 	andeq	r2, r0, sl, asr r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	0000205c 	andeq	r2, r0, ip, asr r0
     e28:	00002060 	andeq	r2, r0, r0, rrx
     e2c:	00002064 	andeq	r2, r0, r4, rrx
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e38:	00002368 	andeq	r2, r0, r8, ror #6
     e3c:	0000236a 	andeq	r2, r0, sl, ror #6
     e40:	0000236c 	andeq	r2, r0, ip, ror #6
     e44:	0000236e 	andeq	r2, r0, lr, ror #6
	...
     e50:	0000204c 	andeq	r2, r0, ip, asr #32
     e54:	000020c8 	andeq	r2, r0, r8, asr #1
     e58:	000020c8 	andeq	r2, r0, r8, asr #1
     e5c:	00002174 	andeq	r2, r0, r4, ror r1
     e60:	00002174 	andeq	r2, r0, r4, ror r1
		for_all_tasks (i) {
     e64:	000021d0 	ldrdeq	r2, [r0], -r0
	__pi_mintk = znew + min;
     e68:	000021d0 	ldrdeq	r2, [r0], -r0
     e6c:	000021e8 	andeq	r2, r0, r8, ror #3
			if (!twaiting (i))
     e70:	00000001 	andeq	r0, r0, r1
     e74:	00000001 	andeq	r0, r0, r1
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	000021e8 	andeq	r2, r0, r8, ror #3
     e7c:	000021f8 	strdeq	r2, [r0], -r8
     e80:	000021f8 	strdeq	r2, [r0], -r8
     e84:	0000220c 	andeq	r2, r0, ip, lsl #4
     e88:	0000220c 	andeq	r2, r0, ip, lsl #4
     e8c:	00002270 	andeq	r2, r0, r0, ror r2
     e90:	00002270 	andeq	r2, r0, r0, ror r2
     e94:	00002284 	andeq	r2, r0, r4, lsl #5
     e98:	00002284 	andeq	r2, r0, r4, lsl #5
     e9c:	00002298 	muleq	r0, r8, r2
     ea0:	00002298 	muleq	r0, r8, r2
     ea4:	000022ac 	andeq	r2, r0, ip, lsr #5
				wakeuptm (i);
     ea8:	000022ac 	andeq	r2, r0, ip, lsr #5
     eac:	000022d4 	ldrdeq	r2, [r0], -r4
		for_all_tasks (i) {
     eb0:	000022d4 	ldrdeq	r2, [r0], -r4
				d = i->Timer - znew;
     eb4:	000022e4 	andeq	r2, r0, r4, ror #5
     eb8:	000022e4 	andeq	r2, r0, r4, ror #5
     ebc:	00002310 	andeq	r2, r0, r0, lsl r3
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	00002310 	andeq	r2, r0, r0, lsl r3
     ec4:	00002324 	andeq	r2, r0, r4, lsr #6
     ec8:	00002324 	andeq	r2, r0, r4, lsr #6
	__pi_old = znew;
     ecc:	00002338 	andeq	r2, r0, r8, lsr r3
}
     ed0:	00002338 	andeq	r2, r0, r8, lsr r3
	TCI_RUN_DELAY_TIMER;
     ed4:	00002448 	andeq	r2, r0, r8, asr #8
}
     ed8:	00002448 	andeq	r2, r0, r8, asr #8
     edc:	000024ac 	andeq	r2, r0, ip, lsr #9
     ee0:	000024ac 	andeq	r2, r0, ip, lsr #9
     ee4:	000024d4 	ldrdeq	r2, [r0], -r4
     ee8:	000024d4 	ldrdeq	r2, [r0], -r4
void proceed (word state) {
     eec:	00002624 	andeq	r2, r0, r4, lsr #12
	...
	release;
     ef8:	00000001 	andeq	r0, r0, r1
     efc:	00000001 	andeq	r0, r0, r1
void __pi_wait (aword event, word state) {
     f00:	00000001 	andeq	r0, r0, r1
	sint j = nevents (__pi_curr);
     f04:	00000001 	andeq	r0, r0, r1
	...
	if (j >= MAX_EVENTS_PER_TASK)
     f10:	0000269a 	muleq	r0, sl, r6
		syserror (ENEVENTS, "sw");
     f14:	0000269c 	muleq	r0, ip, r6
     f18:	0000269e 	muleq	r0, lr, r6
	setestate (__pi_curr->Events [j], state, event);
     f1c:	000026a2 	andeq	r2, r0, r2, lsr #13
	...
}
     f28:	00000001 	andeq	r0, r0, r1
     f2c:	00000001 	andeq	r0, r0, r1
     f30:	00002624 	andeq	r2, r0, r4, lsr #12
void __pi_trigger (aword event) {
     f34:	00002844 	andeq	r2, r0, r4, asr #16
	for_all_tasks (i) {
     f38:	00002844 	andeq	r2, r0, r4, asr #16
		for (j = 0; j < nevents (i); j++) {
     f3c:	000028a4 	andeq	r2, r0, r4, lsr #17
     f40:	00000001 	andeq	r0, r0, r1
     f44:	00000001 	andeq	r0, r0, r1
     f48:	000028a4 	andeq	r2, r0, r4, lsr #17
			if (i->Events [j] . Event == event) {
     f4c:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
	...
				wakeupev (i, j);
     f58:	0000290a 	andeq	r2, r0, sl, lsl #18
     f5c:	0000290e 	andeq	r2, r0, lr, lsl #18
	for_all_tasks (i) {
     f60:	00002914 	andeq	r2, r0, r4, lsl r9
}
     f64:	00002916 	andeq	r2, r0, r6, lsl r9
	...
	for_all_tasks (i) {
     f70:	0000290e 	andeq	r2, r0, lr, lsl #18
	return 0;
     f74:	00002914 	andeq	r2, r0, r4, lsl r9
		if ((aword)i == pid) {
     f78:	00002916 	andeq	r2, r0, r6, lsl r9
			__pi_wait (pid, st);
     f7c:	0000291e 	andeq	r2, r0, lr, lsl r9
	...
	for_all_tasks (i) {
     f88:	00000001 	andeq	r0, r0, r1
void delay (word d, word state) {
     f8c:	00000001 	andeq	r0, r0, r1
	settstate (__pi_curr, state);
     f90:	00000001 	andeq	r0, r0, r1
     f94:	00000001 	andeq	r0, r0, r1
     f98:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
     f9c:	00002908 	andeq	r2, r0, r8, lsl #18
	update_n_wake (d, YES);
     fa0:	00000001 	andeq	r0, r0, r1
     fa4:	00000001 	andeq	r0, r0, r1
	__pi_curr->Timer = __pi_old + d;
     fa8:	00002908 	andeq	r2, r0, r8, lsl #18
     fac:	00002974 	andeq	r2, r0, r4, ror r9
	inctimer (__pi_curr);
     fb0:	00002974 	andeq	r2, r0, r4, ror r9
     fb4:	0000298a 	andeq	r2, r0, sl, lsl #19
	...
}
     fc0:	0000298c 	andeq	r2, r0, ip, lsl #19
	if (fun == NULL)
     fc4:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
		return (int) __pi_curr;
     fc8:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
     fcc:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
	for_all_tasks (i)
     fd0:	00000001 	andeq	r0, r0, r1
}
     fd4:	00000001 	andeq	r0, r0, r1
		if (i->code == fun)
     fd8:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
int __pi_strlen (const char *s) {
     fe8:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	00000001 	andeq	r0, r0, r1
	...
	while (n--)
     ff8:	00002a1e 	andeq	r2, r0, lr, lsl sl
     ffc:	00002a2e 	andeq	r2, r0, lr, lsr #20
		*dest++ = *src++;
    1000:	00002a34 	andeq	r2, r0, r4, lsr sl
    1004:	00002a36 	andeq	r2, r0, r6, lsr sl
	...
		syserror (EREQPAR, "addv");
    1010:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
		syserror (ERESOURCE, "addv");
    1014:	00002a18 	andeq	r2, r0, r8, lsl sl
	if (ioreq [loc] != NULL)
    1018:	00002a18 	andeq	r2, r0, r8, lsl sl
    101c:	00002a44 	andeq	r2, r0, r4, asr #20
		syserror (ERESOURCE, "addv");
    1020:	00000001 	andeq	r0, r0, r1
	ioreq [loc] = rf;
    1024:	00000001 	andeq	r0, r0, r1
}
    1028:	00000001 	andeq	r0, r0, r1
    102c:	00000001 	andeq	r0, r0, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	00000001 	andeq	r0, r0, r1
    1034:	00000001 	andeq	r0, r0, r1
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000001 	andeq	r0, r0, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
		syserror (ENODEVICE, "io");
    104c:	00000001 	andeq	r0, r0, r1
    1050:	00000001 	andeq	r0, r0, r1
	if (len == 0)
    1054:	00000001 	andeq	r0, r0, r1
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	00000001 	andeq	r0, r0, r1
    105c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000517 	andeq	r0, r0, r7, lsl r5
       4:	01380003 	teqeq	r8, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			i = k;
      40:	2f534f63 	svccs	0x00534f63
				j->Next = k;
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
}
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
}
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     130:	0300682e 	movweq	r6, #2094	; 0x82e
}
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
        if(settingsInput[i] == ' ') {
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
     13c:	00040068 	andeq	r0, r4, r8, rrx
            numbers[numbersIndex] = number;
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
     144:	00020500 	andeq	r0, r2, r0, lsl #10
            numbersIndex++;
     148:	03000000 	movweq	r0, #0
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	1f05011b 	svcne	0x0005011b
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
            return 1;
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
     158:	03060905 	movweq	r0, #26885	; 0x6905
     15c:	0e054a0d 	vmlaeq.f32	s8, s10, s26
fsm root {
     160:	011e0501 	tsteq	lr, r1, lsl #10
     164:	01063605 	tsteq	r6, r5, lsl #12
     168:	05742105 	ldrbeq	r2, [r4, #-261]!	; 0xfffffefb
     16c:	052e0644 	streq	r0, [lr, #-1604]!	; 0xfffff9bc
     170:	02040149 	andeq	r0, r4, #1073741842	; 0x40000012
        initCycles();
     174:	b0030505 	andlt	r0, r3, r5, lsl #10
        ser_outf(Initial, "Enter your name: ");
     178:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	065c0501 	ldrbeq	r0, [ip], -r1, lsl #10
     184:	2e7dcb03 	vaddcs.f64	d28, d13, d3
     188:	01066f05 	tsteq	r6, r5, lsl #30
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18c:	4a01df05 	bmi	77da8 <__ccfg+0x57e00>
     190:	0601f205 	streq	pc, [r1], -r5, lsl #4
        ser_inf(Get_Choice, "%c", &choice);
     194:	02e3054a 	rsceq	r0, r3, #310378496	; 0x12800000
     198:	02e80501 	rsceq	r0, r8, #4194304	; 0x400000
     19c:	02f00501 	rscseq	r0, r0, #4194304	; 0x400000
        if (choice == 'A' || choice == 'a'){
     1a0:	08e90501 	stmiaeq	r9!, {r0, r8, sl}^
     1a4:	14090501 	strne	r0, [r9], #-1281	; 0xfffffaff
     1a8:	01062a05 	tsteq	r6, r5, lsl #20
            proceed Adjust_Intervals;
     1ac:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
            proceed Monitor;
     1b0:	053e0609 	ldreq	r0, [lr, #-1545]!	; 0xfffff9f7
        proceed Get_Choice;
     1b4:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	29052209 	stmdbcs	r5, {r0, r3, r9, sp}
     1bc:	3009052c 	andcc	r0, r9, ip, lsr #10
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	052c2905 	streq	r2, [ip, #-2309]!	; 0xfffff6fb
     1c4:	15053009 	strne	r3, [r5, #-9]
     1c8:	0609052c 	streq	r0, [r9], -ip, lsr #10
        processSettingsInput(settings);
     1cc:	2e6f0322 	cdpcs	3, 6, cr0, cr15, cr2, {1}
        proceed Show_Menu;
     1d0:	01060c05 	tsteq	r6, r5, lsl #24
     1d4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d8:	054b060d 	strbeq	r0, [fp, #-1549]	; 0xfffff9f3
     1dc:	82050112 	andhi	r0, r5, #-2147483644	; 0x80000004
     1e0:	92050103 	andls	r0, r5, #-1073741824	; 0xc0000000
     1e4:	aa050103 	bge	1405f8 <__ccfg+0x120650>
     1e8:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
        proceed Show_Menu;
     1ec:	054a0395 	strbeq	r0, [sl, #-917]	; 0xfffffc6b
     1f0:	200603b8 			; <UNDEFINED> instruction: 0x200603b8
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	0103bd05 	tsteq	r3, r5, lsl #26
     1f8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
        displayCycle = YES;
     1fc:	01028403 	tsteq	r2, r3, lsl #8
        ser_inf(Await_Stop, "%c", ch);
     200:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     204:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     208:	030603cf 	movweq	r0, #25551	; 0x63cf
        proceed Await_Stop;
     20c:	052e7df7 	streq	r7, [lr, #-3575]!	; 0xfffff209
     210:	010603e2 	smlatteq	r6, r2, r3, r0
     214:	4a04d105 	bmi	134630 <__ccfg+0x114688>
        leds(1, 0);
     218:	0604e405 	streq	lr, [r4], -r5, lsl #8
     21c:	08ed054a 	stmiaeq	sp!, {r1, r3, r6, r8, sl}^
     220:	130d0501 	movwne	r0, #54529	; 0xd501
     224:	01061005 	tsteq	r6, r5
     228:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
        leds(0, 0);
     22c:	053d0611 	ldreq	r0, [sp, #-1553]!	; 0xfffff9ef
     230:	05010642 	streq	r0, [r1, #-1602]	; 0xfffff9be
     234:	ed052011 	stc	0, cr2, [r5, #-68]	; 0xffffffbc
     238:	055b0608 	ldrbeq	r0, [fp, #-1544]	; 0xfffff9f8
     23c:	22051309 	andcs	r1, r5, #603979776	; 0x24000000
     240:	09052006 	stmdbeq	r5, {r1, r2, sp}
        } else if (choice == 'S' || choice == 's') {
     244:	740a033c 	strvc	r0, [sl], #-828	; 0xfffffcc4
            proceed Stop;
     248:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
        } else if (choice == 'V' || choice == 'v') {
     24c:	6e030481 	cdpvs	4, 0, cr0, cr3, cr1, {4}
            proceed View_Settings;
     250:	0484052e 	streq	r0, [r4], #1326	; 0x52e
        } else if (choice == 'M' || choice == 'm') {
     254:	a7050106 	strge	r0, [r5, -r6, lsl #2]
            proceed Monitor;
     258:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
     25c:	040104ac 	streq	r0, [r1], #-1196	; 0xfffffb54
     260:	03050502 	movweq	r0, #21762	; 0x5502
     264:	17010284 	strne	r0, [r1, -r4, lsl #5]
     268:	01063e05 	tsteq	r6, r5, lsl #28
     26c:	be050104 	adflts	f0, f5, f4
     270:	f7030604 			; <UNDEFINED> instruction: 0xf7030604
     274:	d1052e7d 	tstle	r5, sp, ror lr
     278:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
     27c:	055d060d 	ldrbeq	r0, [sp, #-1549]	; 0xfffff9f3
     280:	22050112 	andcs	r0, r5, #-2147483644	; 0x80000004
     284:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
     288:	2e250501 	cfsh64cs	mvdx0, mvdx5, #1
static void devinit_uart (int devnum) {
     28c:	20064805 	andcs	r4, r6, r5, lsl #16
	adddevfunc (ioreq_uart_a, devnum);
     290:	04014d05 	streq	r4, [r1], #-3333	; 0xfffff2fb
     294:	03050502 	movweq	r0, #21762	; 0x5502
void udelay (volatile word n) {
     298:	170102b5 			; <UNDEFINED> instruction: 0x170102b5
     29c:	01063e05 	tsteq	r6, r5, lsl #28
	while (n) {
     2a0:	60050104 	andvs	r0, r5, r4, lsl #2
     2a4:	7dc60306 	stclvc	3, cr0, [r6, #24]
}
     2a8:	0673052e 	ldrbteq	r0, [r3], -lr, lsr #10
	while (n--);
     2ac:	01e30501 	mvneq	r0, r1, lsl #10
     2b0:	01f6054a 	mvnseq	r0, sl, asr #10
     2b4:	92054a06 	andls	r4, r5, #24576	; 0x6000
		n--;
     2b8:	95052001 	strls	r2, [r5, #-1]
     2bc:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     2c0:	2e0601b8 	mcrcs	1, 0, r0, cr6, cr8, {5}
void mdelay (volatile word n) {
     2c4:	0101bd05 	tsteq	r1, r5, lsl #26
     2c8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	while (n) {
     2cc:	0102b503 	tsteq	r2, r3, lsl #10
     2d0:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
}
     2d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		udelay (999);
     2d8:	030601d0 	movweq	r0, #25040	; 0x61d0
     2dc:	052e7dc6 	streq	r7, [lr, #-3526]!	; 0xfffff23a
		n--;
     2e0:	010601e3 	smlatteq	r6, r3, r1, r0
     2e4:	06018e05 	streq	r8, [r1], -r5, lsl #28
     2e8:	0191055d 	orrseq	r0, r1, sp, asr r5
     2ec:	b4050106 	strlt	r0, [r5], #-262	; 0xfffffefa
void __pi_ondomain (lword d) {
     2f0:	052e0601 	streq	r0, [lr, #-1537]!	; 0xfffff9ff
     2f4:	040101b9 	streq	r0, [r1], #-441	; 0xfffffe47
		if (__pi_systat.effpdm > 1)
     2f8:	03050502 	movweq	r0, #21762	; 0x5502
     2fc:	170102b0 			; <UNDEFINED> instruction: 0x170102b0
			__pi_systat.effpdm = 1;
     300:	01063e05 	tsteq	r6, r5, lsl #28
	PRCMPowerDomainOn (d);
     304:	cc050104 	stfgts	f0, [r5], {4}
     308:	cb030601 	blgt	c1b14 <__ccfg+0xa1b6c>
     30c:	df052e7d 	svcle	0x00052e7d
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     314:	09030601 	stmdbeq	r3, {r0, r9, sl}
     318:	01130558 	tsteq	r3, r8, asr r5
	__pi_systat.ondmns |= d;
     31c:	01060105 	tsteq	r6, r5, lsl #2
     320:	022e1305 	eoreq	r1, lr, #335544320	; 0x14000000
}
     324:	01010012 	tsteq	r1, r2, lsl r0
     328:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
void __pi_syserror (word ec, const char *m) {
     32c:	0000c802 	andeq	ip, r0, r2, lsl #16
	diag ("SYSERR: %x, %s", ec, m);
     330:	01330300 	teqeq	r3, r0, lsl #6
     334:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
  __ASM volatile ("cpsid i" : : : "memory");
     338:	05130615 	ldreq	r0, [r3, #-1557]	; 0xfffff9eb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	13051f12 	movwne	r1, #24338	; 0x5f12
     340:	2215051f 	andscs	r0, r5, #130023424	; 0x7c00000
     344:	05241405 	streq	r1, [r4, #-1029]!	; 0xfffffbfb
		all_leds_blink;
     348:	14051b12 	strne	r1, [r5], #-2834	; 0xfffff4ee
     34c:	1e160525 	cfmul64ne	mvdx0, mvdx6, mvdx5
     350:	05301405 	ldreq	r1, [r0, #-1029]!	; 0xfffffbfb
     354:	0f052117 	svceq	0x00052117
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	1e180524 	cfmul64ne	mvdx0, mvdx8, mvdx4
     35c:	78031205 	stmdavc	r3, {r0, r2, r9, ip}
     360:	0605052e 	streq	r0, [r5], -lr, lsr #10
     364:	13151321 	tstne	r5, #-2080374784	; 0x84000000
     368:	01061705 	tsteq	r6, r5, lsl #14
     36c:	21060505 	tstcs	r6, r5, lsl #10
	while (1) {
     370:	060f0515 			; <UNDEFINED> instruction: 0x060f0515
     374:	06050501 	streq	r0, [r5], -r1, lsl #10
     378:	060f053d 			; <UNDEFINED> instruction: 0x060f053d
     37c:	06050501 	streq	r0, [r5], -r1, lsl #10
void tci_run_delay_timer () {
     380:	0611055a 			; <UNDEFINED> instruction: 0x0611055a
	setdel = __pi_mintk - __pi_old;
     384:	2f010501 	svccs	0x00010501
     388:	01000a02 	tsteq	r0, r2, lsl #20
     38c:	002f0501 	eoreq	r0, pc, r1, lsl #10
     390:	01100205 	tsteq	r0, r5, lsl #4
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	c4030000 	strgt	r0, [r3], #-0
     398:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     39c:	13141313 	tstne	r4, #1275068416	; 0x4c000000
     3a0:	010a0514 	tsteq	sl, r4, lsl r5
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	03062f05 	movweq	r2, #28421	; 0x6f05
	sti_tim;
     3a8:	05200179 	streq	r0, [r0, #-377]!	; 0xfffffe87
}
     3ac:	09052712 	stmdbeq	r5, {r1, r4, r8, r9, sl, sp}
     3b0:	27230529 	strcs	r0, [r3, -r9, lsr #10]!
     3b4:	1e062f05 	cdpne	15, 0, cr2, cr6, cr5, {0}
     3b8:	01060505 	tsteq	r6, r5, lsl #10
     3bc:	2e0e0306 	cdpcs	3, 0, cr0, cr14, cr6, {0}
	cli_aux;
     3c0:	16061805 	strne	r1, [r6], -r5, lsl #16
     3c4:	051c1505 	ldreq	r1, [ip, #-1285]	; 0xfffffafb
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
     3cc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     3d0:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
     3d4:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
	sti_aux;
     3d8:	17052f18 	smladne	r5, r8, pc, r2	; <UNPREDICTABLE>
}
     3dc:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     3e0:	01051421 	tsteq	r5, r1, lsr #8
     3e4:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
void AONRTCIntHandler () {
     3e8:	2e6c0306 	cdpcs	3, 6, cr0, cr12, cr6, {0}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	01061905 	tsteq	r6, r5, lsl #18
     3f0:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	052f060d 	streq	r0, [pc, #-1549]!	; fffffdef <_estack+0xdfffadef>
		if (__pi_utims [0] == 0)
     3f8:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
     3fc:	1359060d 	cmpne	r9, #13631488	; 0xd00000
		if (*(__pi_utims [0])) {
     400:	01061905 	tsteq	r6, r5, lsl #18
     404:	21060d05 	tstcs	r6, r5, lsl #26
			(*(__pi_utims [0]))--;
     408:	050d3705 	streq	r3, [sp, #-1797]	; 0xfffff8fb
		if (__pi_utims [1] == 0)
     40c:	05010638 	streq	r0, [r1, #-1592]	; 0xfffff9c8
		if (*(__pi_utims [1])) {
     410:	05340610 	ldreq	r0, [r4, #-1552]!	; 0xfffff9f0
			aux_timer_inactive = 0;
     414:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
			(*(__pi_utims [1]))--;
     418:	06024014 			; <UNDEFINED> instruction: 0x06024014
		if (__pi_utims [2] == 0)
     41c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (*(__pi_utims [2])) {
     420:	0205001a 	andeq	r0, r5, #26
			(*(__pi_utims [2]))--;
     424:	00000160 	andeq	r0, r0, r0, ror #2
		if (__pi_utims [3] != 0) {
     428:	0100e203 	tsteq	r0, r3, lsl #4
			if (*(__pi_utims [3])) {
     42c:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
				aux_timer_inactive = 0;
     430:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
				(*(__pi_utims [3]))--;
     434:	13a00605 	movne	r0, #5242880	; 0x500000
	if (__pi_systat.ledsts) {
     438:	30150905 	andscc	r0, r5, r5, lsl #18
     43c:	09035c4d 	stmdbeq	r3, {r0, r2, r3, r6, sl, fp, ip, lr}
		if (__pi_systat.ledblc++ == 0) {
     440:	05681458 	strbeq	r1, [r8, #-1112]!	; 0xfffffba8
     444:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
			if (__pi_systat.ledblk) {
     448:	0667060d 	strbteq	r0, [r7], -sp, lsl #12
     44c:	06090526 	streq	r0, [r9], -r6, lsr #10
     450:	5a4d3f31 	bpl	135011c <__ccfg+0x1330174>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	3fb33f3e 	svccc	0x00b33f3e
     458:	0616054b 	ldreq	r0, [r6], -fp, asr #10
				if (__pi_systat.ledsts & 0x2)
     45c:	06090501 	streq	r0, [r9], -r1, lsl #10
     460:	175a133f 	smmlarne	sl, pc, r3, r1	; <UNPREDICTABLE>
     464:	010e053f 	tsteq	lr, pc, lsr r5
				if (__pi_systat.ledsts & 0x4)
     468:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
				__pi_systat.ledblk = 0;
     46c:	88050178 	stmdahi	r5, {r3, r4, r5, r6, r8}
     470:	8d050101 	stfhis	f0, [r5, #-4]
			if (__pi_systat.fstblk)
     474:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     478:	aa030505 	bge	c1894 <__ccfg+0xa18ec>
				__pi_systat.ledblc = 200;
     47c:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
	if (events & AON_RTC_EVFLAGS_CH0) {
     480:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
		cli_tim;
     484:	01a00501 	lsleq	r0, r1, #10
		__pi_new += setdel;
     488:	7ed10306 	cdpvc	3, 13, cr0, cr1, cr6, {0}
     48c:	01b3053c 			; <UNDEFINED> instruction: 0x01b3053c
		setdel = 0;
     490:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
		RISE_N_SHINE;
     494:	af033e05 	svcge	0x00033e05
		__pi_new += setdel;
     498:	01048201 	tsteq	r4, r1, lsl #4
		RISE_N_SHINE;
     49c:	0301b305 	movweq	fp, #4869	; 0x1305
     4a0:	05207ed1 	streq	r7, [r0, #-3793]!	; 0xfffff12f
		aux_timer_inactive = 1;
     4a4:	200601c6 	andcs	r0, r6, r6, asr #3
     4a8:	01028b05 	tsteq	r2, r5, lsl #22
				if (__pi_systat.ledsts & 0x1)
     4ac:	01029005 	tsteq	r2, r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4b0:	01029805 	tsteq	r2, r5, lsl #16
     4b4:	0106e105 	tsteq	r6, r5, lsl #2
				if (__pi_systat.ledsts & 0x2)
     4b8:	05130905 	ldreq	r0, [r3, #-2309]	; 0xfffff6fb
     4bc:	1e05010e 	adfnes	f0, f5, #0.5
     4c0:	012e0501 			; <UNDEFINED> instruction: 0x012e0501
				if (__pi_systat.ledsts & 0x8)
     4c4:	04013305 	streq	r3, [r1], #-773	; 0xfffffcfb
				__pi_systat.ledblk = 1;
     4c8:	03050502 	movweq	r0, #21762	; 0x5502
     4cc:	170101a9 	strne	r0, [r1, -r9, lsr #3]
		if (aux_timer_inactive) {
     4d0:	01063e05 	tsteq	r6, r5, lsl #28
			cli_aux;
     4d4:	46050104 	strmi	r0, [r5], -r4, lsl #2
     4d8:	7ed20306 	cdpvc	3, 13, cr0, cr2, cr6, {0}
     4dc:	06590520 	ldrbeq	r0, [r9], -r0, lsr #10
     4e0:	066c0501 	strbteq	r0, [ip], -r1, lsl #10
     4e4:	06010582 	streq	r0, [r1], -r2, lsl #11
     4e8:	06100513 			; <UNDEFINED> instruction: 0x06100513
     4ec:	053c5003 	ldreq	r5, [ip, #-3]!
     4f0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     4f4:	052f060d 	streq	r0, [pc, #-1549]!	; fffffeef <_estack+0xdfffaeef>
     4f8:	13052f10 	movwne	r2, #24336	; 0x5f10
word tci_update_delay_ticks (Boolean force) {
     4fc:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
	cli_tim;
     500:	10052f06 	andne	r2, r5, r6, lsl #30
     504:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
	if (setdel) {
     508:	060d0501 	streq	r0, [sp], -r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	01052e2b 	tsteq	r5, fp, lsr #28
     514:	17022e06 	strne	r2, [r2, -r6, lsl #28]
     518:	5c010100 	stfpls	f0, [r1], {-0}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	03000015 	movweq	r0, #21
				AON_RTC_O_CH0CMP)) - gettav ());
     520:	00029b00 	andeq	r9, r2, r0, lsl #22
	return NO;
     524:	fb010200 	blx	40d2e <__ccfg+0x20d86>
			setdel = 0;
     528:	01000d0e 	tsteq	r0, lr, lsl #26
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	00010101 	andeq	r0, r1, r1, lsl #2
     530:	00010000 	andeq	r0, r1, r0
}
     534:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
		sti_tim;
     538:	2f656d6f 	svccs	0x00656d6f
		return YES;
     53c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     540:	442f6e69 	strtmi	r6, [pc], #-3689	; 548 <tci_update_delay_ticks+0x4c>
     544:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     548:	4f2f706f 	svcmi	0x002f706f
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	UARTDisable (UART0_BASE);
     550:	502f5445 	eorpl	r5, pc, r5, asr #8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	534f4349 	movtpl	r4, #62281	; 0xf349
	UARTDisable (UART0_BASE);
     558:	6369502f 	cmnvs	r9, #47	; 0x2f
	UARTConfigSetExpClk (UART0_BASE,
     55c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     560:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     564:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
     568:	2f656d6f 	svccs	0x00656d6f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     570:	442f6e69 	strtmi	r6, [pc], #-3689	; 578 <__pi_uart_setrate+0x2c>
     574:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	4f2f706f 	svcmi	0x002f706f
     57c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     580:	502f5445 	eorpl	r5, pc, r5, asr #8
	urates [0] = rate;
     584:	534f4349 	movtpl	r4, #62281	; 0xf349
}
     588:	6369502f 	cmnvs	r9, #47	; 0x2f
     58c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     590:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     594:	43432f58 	movtmi	r2, #16216	; 0x3f58
     598:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     59c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     5a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
     5a8:	2f006269 	svccs	0x00006269
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     5b0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	2f6e6974 	svccs	0x006e6974
     5b8:	6b736544 	blvs	1cd9ad0 <__ccfg+0x1cb9b28>
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	2f706f74 	svccs	0x00706f74
     5c0:	4f534c4f 	svcmi	0x00534c4f
     5c4:	2f54454e 	svccs	0x0054454e
     5c8:	4f434950 	svcmi	0x00434950
     5cc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     5d0:	2f534f63 	svccs	0x00534f63
     5d4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	switch (operation) {
     5d8:	4f492f73 	svcmi	0x00492f73
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	6f682f00 	svcvs	0x00682f00
     5e0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 434 <AONRTCIntHandler+0x4c>
     5e4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     5e8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     5ec:	6f746b73 	svcvs	0x00746b73
				*buf++ = uart_a_read;
     5f0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     5f4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			while (len && uart_a_char_available) {
     5f8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     5fc:	2f534f43 	svccs	0x00534f43
     600:	4f636950 	svcmi	0x00636950
			if (len != operation) {
     604:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
}
     608:	2f736269 	svccs	0x00736269
     60c:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
			uart_a_disable_int;
     610:	0073726f 	rsbseq	r7, r3, pc, ror #4
			if (uart_a_char_available) {
     614:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 560 <__pi_uart_setrate+0x14>
				*buf++ = uart_a_read;
     618:	616d2f65 	cmnvs	sp, r5, ror #30
			uart_a_disable_int;
     61c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     620:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			if (uart_a_char_available) {
     624:	706f746b 	rsbvc	r7, pc, fp, ror #8
     628:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				uart_a_enable_int;
     62c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     630:	4349502f 	movtmi	r5, #36911	; 0x902f
				goto Redo_rx;
     634:	502f534f 	eorpl	r5, pc, pc, asr #6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	534f6369 	movtpl	r6, #62313	; 0xf369
     63c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
			return -2;
     640:	006c656e 	rsbeq	r6, ip, lr, ror #10
     644:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
				uart_a_write (*buf);
     648:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     64c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
			while (len && uart_a_room_in_tx) {
     650:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     654:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     658:	61652d65 	cmnvs	r5, r5, ror #26
			if (len != operation) {
     65c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
			uart_a_disable_int;
     660:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     664:	636e692f 	cmnvs	lr, #770048	; 0xbc000
			if (uart_a_room_in_tx) {
     668:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     66c:	6f682f00 	svcvs	0x00682f00
				uart_a_enable_int;
     670:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4c4 <AONRTCIntHandler+0xdc>
     674:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
				*buf++ = uart_a_read;
     678:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			if (uart_a_room_in_tx) {
     67c:	6f746b73 	svcvs	0x00746b73
				uart_a_write (*buf);
     680:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     684:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     68c:	2f534f43 	svccs	0x00534f43
			uart_a_enable_int;
     690:	4f636950 	svcmi	0x00636950
     694:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     698:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
			return 0;
     69c:	00010063 	andeq	r0, r1, r3, rrx
			if (len == UART_CNTRL_SETRATE) {
     6a0:	73797300 	cmnvc	r9, #0, 6
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     6a8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     6ac:	63000002 	movwvs	r0, #2
				syserror (EREQPAR, "uar");
     6b0:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
			syserror (ENOOPER, "uai");
     6b4:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
			if (len == UART_CNTRL_GETRATE) {
     6b8:	0100682e 	tsteq	r0, lr, lsr #16
				return 1;
     6bc:	70670000 	rsbvc	r0, r7, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6c0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
			syserror (ENOOPER, "uai");
     6c4:	00000200 	andeq	r0, r0, r0, lsl #4
     6c8:	5f717269 	svcpl	0x00717269
     6cc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     6d0:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
     6d4:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
     6d8:	00000300 	andeq	r0, r0, r0, lsl #6
     6dc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     6e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     6e4:	72690000 	rsbvc	r0, r9, #0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
void UART0IntHandler () {
     6ec:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     6f4:	69000003 	stmdbvs	r0, {r0, r1}
     6f8:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
     6fc:	735f6e69 	cmpvc	pc, #1680	; 0x690
     700:	6f736e65 	svcvs	0x00736e65
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	00682e72 	rsbeq	r2, r8, r2, ror lr
     708:	70000004 	andvc	r0, r0, r4
		RISE_N_SHINE;
     70c:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     710:	00020068 	andeq	r0, r2, r8, rrx
		i_trigger (devevent (UART_A, READ));
     714:	6e6f6100 	powvse	f6, f7, f0
     718:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     71c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     720:	77700000 	ldrbvc	r0, [r0, -r0]!
     724:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
     728:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     72c:	00000200 	andeq	r0, r0, r0, lsl #4
     730:	5f6e6f61 	svcpl	0x006e6f61
     734:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     738:	00020068 	andeq	r0, r2, r8, rrx
     73c:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
     740:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     748:	00000500 	andeq	r0, r0, r0, lsl #10
     74c:	5f6e6f61 	svcpl	0x006e6f61
		i_trigger (devevent (UART_A, WRITE));
     750:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	00020068 	andeq	r0, r2, r8, rrx
     758:	6e6f6100 	powvse	f6, f7, f0
		RISE_N_SHINE;
     75c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     760:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
     764:	00020068 	andeq	r0, r2, r8, rrx
		i_trigger (devevent (UART_A, WRITE));
     768:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     76c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     770:	00060068 	andeq	r0, r6, r8, rrx
     774:	63726100 	cmnvs	r2, #0, 2
     778:	00682e68 	rsbeq	r2, r8, r8, ror #28
     77c:	6d000001 	stcvs	0, cr0, [r0, #-4]
     780:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
     784:	00010068 	andeq	r0, r1, r8, rrx
     788:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     78c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     790:	00682e73 	rsbeq	r2, r8, r3, ror lr
}
     794:	62000001 	andvs	r0, r0, #1
     798:	6f747475 	svcvs	0x00747475
     79c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     7a0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     7a4:	00000100 	andeq	r0, r0, r0, lsl #2
void __buttons_setirq (int val) {
     7a8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     7b0:	6b000007 	blvs	7d4 <__buttons_setirq+0x2c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     7b8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     7bc:	00000005 	andeq	r0, r0, r5
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	00028c02 	andeq	r8, r2, r2, lsl #24
     7c8:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
     7cc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     7d0:	10062705 	andne	r2, r6, r5, lsl #14
     7d4:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
     7d8:	01010005 	tsteq	r1, r5
}
     7dc:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     7e0:	00029802 	andeq	r9, r2, r2, lsl #16
     7e4:	01180300 	tsteq	r8, r0, lsl #6
     7e8:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
void __pinlist_setirq (int val) {
     7ec:	09050108 	stmdbeq	r5, {r3, r8}
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	08050106 	stmdaeq	r5, {r1, r2, r8}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	2b060305 	blcs	181414 <__ccfg+0x16146c>
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
     804:	060a0501 	streq	r0, [sl], -r1, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     80c:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     810:	01060405 	tsteq	r6, r5, lsl #8
	for (i = 0; i < N_PINLIST; i++) {
     814:	01000702 	tsteq	r0, r2, lsl #14
}
     818:	001f0501 	andseq	r0, pc, r1, lsl #10
     81c:	02c40205 	sbceq	r0, r4, #1342177280	; 0x50000000
     820:	1f030000 	svcne	0x00030000
     824:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
void GPIOIntHandler () {
     828:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
if (buttons_int) {
     82c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     830:	01053c08 	tsteq	r5, r8, lsl #24
	buttons_disable ();
     834:	06030524 	streq	r0, [r3], -r4, lsr #10
     838:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
	i_trigger ((aword)&__button_list);
     83c:	07020106 	streq	r0, [r2, -r6, lsl #2]
     840:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     844:	0205001e 	andeq	r0, r5, #30
     848:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     84c:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
     850:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
     854:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
     858:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
     85c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
     860:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     864:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	RISE_N_SHINE;
     868:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
     86c:	17052106 	strne	r2, [r5, -r6, lsl #2]
     870:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
if (pin_sensor_int) {
     874:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
     878:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
	i_trigger ((aword)(&__input_pins));
     87c:	06090501 	streq	r0, [r9], -r1, lsl #10
     880:	4a080501 	bmi	201c8c <__ccfg+0x1e1ce4>
     884:	30060205 	andcc	r0, r6, r5, lsl #4
     888:	01061505 	tsteq	r6, r5, lsl #10
     88c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     890:	01010005 	tsteq	r1, r5
     894:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     898:	00000002 	andeq	r0, r0, r2
     89c:	013a0300 	teqeq	sl, r0, lsl #6
     8a0:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
     8a4:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
	__pinsen_disable_and_clear;
     8a8:	1f052502 	svcne	0x00052502
	RISE_N_SHINE;
     8ac:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     8b0:	3c053d06 	stccc	13, cr3, [r5], {6}
     8b4:	01080501 	tsteq	r8, r1, lsl #10
}
     8b8:	01060905 	tsteq	r6, r5, lsl #18
     8bc:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     8c0:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
     8c4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     8c8:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
void system_init () {
     8cc:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	06052027 	streq	r2, [r5], -r7, lsr #32
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	06040520 	streq	r0, [r4], -r0, lsr #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	06240521 	strteq	r0, [r4], -r1, lsr #10
     8dc:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
     8e0:	23060205 	movwcs	r0, #25093	; 0x6205
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	01061505 	tsteq	r6, r5, lsl #10
     8e8:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	01010005 	tsteq	r1, r5
     8f0:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
     8f4:	00000002 	andeq	r0, r0, r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	00ce0300 	sbceq	r0, lr, r0, lsl #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	06220205 	strteq	r0, [r2], -r5, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     908:	03053633 	movweq	r3, #22067	; 0x5633
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     90c:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	01f00304 	mvnseq	r0, r4, lsl #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	5c053001 	stcpl	0, cr3, [r5], {1}
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
     920:	0502100a 	streq	r1, [r2, #-10]
     924:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     928:	0205002d 	andeq	r0, r5, #45	; 0x2d
		if (port_confs [i] & 0x80)
     92c:	0000032c 	andeq	r0, r0, ip, lsr #6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     930:	01019703 	tsteq	r1, r3, lsl #14
     934:	01140205 	tsteq	r4, r5, lsl #4
		if (port_confs [i] & 0x40)
     938:	2d051701 	stccs	7, cr1, [r5, #-4]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	01790306 	cmneq	r9, r6, lsl #6
     940:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     944:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	03030503 	movweq	r0, #13571	; 0x3503
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
	all_leds_blink;
     950:	062d0504 	strteq	r0, [sp], -r4, lsl #10
     954:	2001cb03 	andcs	ip, r1, r3, lsl #22
     958:	02050104 	andeq	r0, r5, #4, 2
     95c:	7f8f0306 	svcvc	0x008f0306
     960:	1303053c 	movwne	r0, #13628	; 0x353c
     964:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     968:	eb032905 	bl	cad84 <__ccfg+0xaaddc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     970:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     974:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     978:	7f900303 	svcvc	0x00900303
     97c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	00f0032d 	rscseq	r0, r0, sp, lsr #6
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     988:	90030603 	andls	r0, r3, r3, lsl #12
	IntEnable (INT_AON_RTC_COMB);
     98c:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     990:	eb032905 	bl	cadac <__ccfg+0xaae04>
     994:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
	__pi_malloc_init ();
     998:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	IntEnable (INT_AON_GPIO_EDGE);
     99c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     9a0:	90030603 	andls	r0, r3, r3, lsl #12
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	0101207f 	tsteq	r1, pc, ror r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	01010101 	tsteq	r1, r1, lsl #2
     9ac:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
     9b0:	29050404 	stmdbcs	r5, {r2, sl}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b4:	0101a103 	tsteq	r1, r3, lsl #2
     9b8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     9c0:	03030501 	movweq	r0, #13569	; 0x3501
     9c4:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
	urates [0] = UART_RATE / 100;
     9c8:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
     9cc:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
	reinit_uart ();
     9d0:	06030501 	streq	r0, [r3], -r1, lsl #10
	EXTRA_INITIALIZERS;
     9d4:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     9d8:	29050404 	stmdbcs	r5, {r2, sl}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	0101a103 	tsteq	r1, r3, lsl #2
     9e0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     9e4:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e8:	06030501 	streq	r0, [r3], -r1, lsl #10
     9ec:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9f0:	01010101 	tsteq	r1, r1, lsl #2
     9f4:	01580101 	cmpeq	r8, r1, lsl #2
			devinit [i] . init (devinit [i] . param);
     9f8:	1108052e 	tstne	r8, lr, lsr #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	01000902 	tsteq	r0, r2, lsl #18
     a00:	001d0501 	andseq	r0, sp, r1, lsl #10
     a04:	03800205 	orreq	r0, r0, #1342177280	; 0x50000000
	IntEnable (INT_UART0_COMB);
     a08:	9d030000 	stcls	0, cr0, [r3, #-0]
     a0c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
}
     a10:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
	tci_run_auxiliary_timer ();
     a14:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
		diag ("");
     a18:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     a1c:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a20:	0602052e 	streq	r0, [r2], -lr, lsr #10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	01760323 	cmneq	r6, r3, lsr #6
		diag ("Leftover RAM: %d bytes",
     a28:	01061105 	tsteq	r6, r5, lsl #2
     a2c:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
     a30:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
     a34:	2a052073 	bcs	148c08 <__ccfg+0x128c60>
     a38:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
     a3c:	2076032f 	rsbscs	r0, r6, pc, lsr #6
     a40:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     a44:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
     a48:	23060205 	movwcs	r0, #25093	; 0x6205
     a4c:	2f060105 	svccs	0x00060105
     a50:	01000b02 	tsteq	r0, r2, lsl #22
     a54:	00210501 	eoreq	r0, r1, r1, lsl #10
     a58:	03c00205 	biceq	r0, r0, #1342177280	; 0x50000000
     a5c:	aa030000 	bge	c0a64 <__ccfg+0xa0abc>
     a60:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     a64:	06210517 			; <UNDEFINED> instruction: 0x06210517
     a68:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     a6c:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
     a70:	03140205 	tsteq	r4, #1342177280	; 0x50000000
     a74:	11050169 	tstne	r5, r9, ror #2
     a78:	2f050106 	svccs	0x00050106
     a7c:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     a80:	2f052017 	svccs	0x00052017
__attribute__ ((noreturn)) void __pi_release () {
     a84:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
     a88:	2a052e36 	bcs	14c368 <__ccfg+0x12c3c0>
     a8c:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a90:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
	check_stack_overflow;
     a94:	01052e09 	tsteq	r5, r9, lsl #28
     a98:	06021306 	streq	r1, [r2], -r6, lsl #6
     a9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	update_n_wake (MAX_WORD, NO);
     aa0:	0205001a 	andeq	r0, r5, #26
     aa4:	000003e8 	andeq	r0, r0, r8, ror #7
     aa8:	0102b703 	tsteq	r2, r3, lsl #14
	for_all_tasks (__pi_curr) {
     aac:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
     ab0:	0e061a05 	vmlaeq.f32	s2, s12, s10
     ab4:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
  __ASM volatile ("cpsid i" : : : "memory");
     ab8:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
	__SLEEP;
     abc:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
     ac0:	2b051406 	blcs	145ae0 <__ccfg+0x125b38>
     ac4:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
     ac8:	06050522 	streq	r0, [r5], -r2, lsr #10
	system_event_count ++;
     acc:	06030501 	streq	r0, [r3], -r1, lsl #10
     ad0:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
	switch (__pi_systat.effpdm) {
     ad4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     ad8:	03052e06 	movweq	r2, #24070	; 0x5e06
     adc:	07053006 	streq	r3, [r5, -r6]
     ae0:	06050106 	streq	r0, [r5], -r6, lsl #2
			__WFI ();
     ae4:	06040520 	streq	r0, [r4], -r0, lsr #10
     ae8:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     aec:	06040501 	streq	r0, [r4], -r1, lsl #10
	check_stack_overflow;
     af0:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     af4:	06030501 	streq	r0, [r3], -r1, lsl #10
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af8:	06120522 	ldreq	r0, [r2], -r2, lsr #10
     afc:	20060501 	andcs	r0, r6, r1, lsl #10
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
			goto Redo;
     b04:	01060705 	tsteq	r6, r5, lsl #14
	for_all_tasks (__pi_curr) {
     b08:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b10:	1f130617 	svcne	0x00130617
     b14:	2f060405 	svccs	0x00060405
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
     b1c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     b20:	03052006 	movweq	r2, #20486	; 0x5006
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b24:	07052206 	streq	r2, [r5, -r6, lsl #4]
     b28:	06050106 	streq	r0, [r5], -r6, lsl #2
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b2c:	06040520 	streq	r0, [r4], -r0, lsr #10
     b30:	06170521 	ldreq	r0, [r7], -r1, lsr #10
			__WFI ();
     b34:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	03052f06 	movweq	r2, #24326	; 0x5f06
     b3c:	06120514 			; <UNDEFINED> instruction: 0x06120514
}
     b40:	20060501 	andcs	r0, r6, r1, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b44:	21060405 	tstcs	r6, r5, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b48:	01060805 	tsteq	r6, r5, lsl #16
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     b50:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	1f130618 	svcne	0x00130618
     b58:	2f060505 	svccs	0x00060505
     b5c:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	017da303 	cmneq	sp, r3, lsl #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	01061105 	tsteq	r6, r5, lsl #2
     b68:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
     b6c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
     b70:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	06052019 			; <UNDEFINED> instruction: 0x06052019
     b78:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	06130521 	ldreq	r0, [r3], -r1, lsr #10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b80:	20070501 	andcs	r0, r7, r1, lsl #10
     b84:	052f1405 	streq	r1, [pc, #-1029]!	; 787 <UART0IntHandler+0x9f>
     b88:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
     b8c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
     b90:	06050106 	streq	r0, [r5], -r6, lsl #2
			SysCtrlSetRechargeBeforePowerDown
     b94:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b98:	96032905 	strls	r2, [r3], -r5, lsl #18
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     ba0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     ba8:	e6030605 	str	r0, [r3], -r5, lsl #12
     bac:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	08050106 	stmdaeq	r5, {r1, r2, r8}
     bb4:	06060520 	streq	r0, [r6], -r0, lsr #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
     bc0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     bc4:	01062d05 	tsteq	r6, r5, lsl #26
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
			while (!(AONWUCPowerStatusGet () &
     bcc:	7de80306 	stclvc	3, cr0, [r8, #24]!
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     bd4:	06060501 	streq	r0, [r6], -r1, lsl #10
     bd8:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bdc:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     be0:	06050106 	streq	r0, [r5], -r6, lsl #2
     be4:	01012106 	tsteq	r1, r6, lsl #2
     be8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	03010618 	movweq	r0, #5656	; 0x1618
     bf0:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bf4:	13052206 	movwne	r2, #20998	; 0x5206
     bf8:	07050106 	streq	r0, [r5, -r6, lsl #2]
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfc:	06050520 	streq	r0, [r5], -r0, lsr #10
			reinit_uart ();
     c00:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
     c04:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     c08:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
}
     c0c:	02052e02 	andeq	r2, r5, #2, 28
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c10:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
     c14:	06030501 	streq	r0, [r3], -r1, lsl #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
     c1c:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
     c20:	0c052206 	sfmeq	f2, 4, [r5], {6}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c24:	0a050106 	beq	141044 <__ccfg+0x12109c>
     c28:	1f0c052f 	svcne	0x000c052f
     c2c:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c30:	03051e0c 	movweq	r1, #24076	; 0x5e0c
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	01132f06 	tsteq	r3, r6, lsl #30
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c3c:	13060105 	movwne	r0, #24837	; 0x6105
     c40:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c44:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
     c48:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4c:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	06050106 	streq	r0, [r5], -r6, lsl #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     c58:	c2032905 	andgt	r2, r3, #81920	; 0x14000
			PRCMPowerDomainOff (
     c5c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     c60:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	__SLEEP;
     c64:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     c68:	ba030605 	blt	c2484 <__ccfg+0xa24dc>
  __ASM volatile ("cpsie i" : : : "memory");
     c6c:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
	goto Redo;
     c70:	08050106 	stmdaeq	r5, {r1, r2, r8}
     c74:	06060520 	streq	r0, [r6], -r0, lsr #10
     c78:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     c7c:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
     c80:	17050501 	strne	r0, [r5, -r1, lsl #10]
     c84:	01062d05 	tsteq	r6, r5, lsl #26
     c88:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     c8c:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
     c90:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     c94:	06060501 	streq	r0, [r6], -r1, lsl #10
     c98:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     c9c:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     ca0:	06050106 	streq	r0, [r5], -r6, lsl #2
     ca4:	01012106 	tsteq	r1, r6, lsl #2
     ca8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     cac:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
     cb0:	06030501 	streq	r0, [r3], -r1, lsl #10
     cb4:	4a02ce03 	bmi	b44c8 <__ccfg+0x94520>
     cb8:	01060605 	tsteq	r6, r5, lsl #12
     cbc:	30060405 	andcc	r0, r6, r5, lsl #8
     cc0:	01001502 	tsteq	r0, r2, lsl #10
     cc4:	002d0501 	eoreq	r0, sp, r1, lsl #10
     cc8:	04fc0205 	ldrbteq	r0, [ip], #517	; 0x205
     ccc:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
     cd0:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
     cd4:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
     cd8:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
int main (void) {
     cdc:	052f0605 	streq	r0, [pc, #-1541]!	; 6df <ioreq_uart_a+0x107>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	21061f02 	tstcs	r6, r2, lsl #30
     ce4:	01060605 	tsteq	r6, r5, lsl #12
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
	system_init ();
     cf0:	06060520 	streq	r0, [r6], -r0, lsr #10
	tcv_init ();
     cf4:	06040501 	streq	r0, [r4], -r1, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
     cfc:	06020501 	streq	r0, [r2], -r1, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
     d04:	01061005 	tsteq	r6, r5
     d08:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	0187031a 	orreq	r0, r7, sl, lsl r3
     d10:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
	delay (16, 0);
     d14:	1f170520 	svcne	0x00170520
     d18:	0a030905 	beq	c3134 <__ccfg+0xa318c>
     d1c:	030d0520 	movweq	r0, #54560	; 0xd520
	__pi_release ();
     d20:	0b052076 	bleq	148f00 <__ccfg+0x128f58>
     d24:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
     d28:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
     d2c:	06010513 			; <UNDEFINED> instruction: 0x06010513
     d30:	06030519 			; <UNDEFINED> instruction: 0x06030519
     d34:	0a052f29 	beq	14c9e0 <__ccfg+0x12ca38>
     d38:	09020106 	stmdbeq	r2, {r1, r2, r8}
static void killev (__pi_pcb_t *pid) {
     d3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	wfun = (aword)(pid->code);
     d40:	02050033 	andeq	r0, r5, #51	; 0x33
	for_all_tasks (i) {
     d44:	0000054c 	andeq	r0, r0, ip, asr #10
		for (j = 0; j < nevents (i); j++) {
     d48:	0105d303 	tsteq	r5, r3, lsl #6
     d4c:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
     d50:	03063305 	movweq	r3, #25349	; 0x6305
			    || i->Events [j] . Event == wfun
     d54:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
		for (j = 0; j < nevents (i); j++) {
     d58:	03330527 	teqeq	r3, #163577856	; 0x9c00000
			if (i->Events [j] . Event == (aword)pid
     d5c:	02053c79 	andeq	r3, r5, #30976	; 0x7900
     d60:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
     d64:	03050502 	movweq	r0, #21762	; 0x5502
				wakeupev (i, j);
     d68:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
     d6c:	06020501 	streq	r0, [r2], -r1, lsl #10
	for_all_tasks (i) {
     d70:	0104ab03 	tsteq	r4, r3, lsl #22
}
     d74:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
static void qfree (aword *ch) {
     d7c:	017dd903 	cmneq	sp, r3, lsl #18
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	cc = (aword*)(mpools + MA_NP);
     d84:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
	m_setnextp (ch, chunk);
     d88:	03010501 	movweq	r0, #5377	; 0x1501
	m_setnextp (cc, ch);
     d8c:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
}
     d90:	03230506 			; <UNDEFINED> instruction: 0x03230506
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
     d98:	054f0605 	strbeq	r0, [pc, #-1541]	; 79b <UART0IntHandler+0xb3>
     d9c:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
			m_setnextp (cc, m_nextp (chunk));
     da0:	06020501 	streq	r0, [r2], -r1, lsl #10
			m_size (chunk) += m_hdrlen + m_size (ch);
     da4:	66029e03 	strvs	r9, [r2], -r3, lsl #28
     da8:	01060d05 	tsteq	r6, r5, lsl #26
     dac:	2f060205 	svccs	0x00060205
     db0:	13060105 	movwne	r0, #24837	; 0x6105
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	01000c02 	tsteq	r0, r2, lsl #24
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     db8:	001c0501 	andseq	r0, ip, r1, lsl #10
     dbc:	05a00205 	streq	r0, [r0, #517]!	; 0x205
     dc0:	ef030000 	svc	0x00030000
			m_setnextp (cc, m_nextp (chunk));
     dc4:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
     dcc:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
     dd0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     dd4:	01062305 	tsteq	r6, r5, lsl #6
     dd8:	02050104 	andeq	r0, r5, #4, 2
     ddc:	20028803 	andcs	r8, r2, r3, lsl #16
			if (m_size (chunk) >= m_size (ch))
     de0:	23050604 	movwcs	r0, #22020	; 0x5604
     de4:	207df803 	rsbscs	pc, sp, r3, lsl #16
     de8:	02050104 	andeq	r0, r5, #4, 2
		chunk = m_nextp (chunk))
     dec:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
     df0:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
     df4:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
	diag_wait (a);
     dfc:	17050517 	smladne	r5, r7, r5, r0
	diag_wchar (c, a);
     e00:	01062305 	tsteq	r6, r5, lsl #6
     e04:	02050104 	andeq	r0, r5, #4, 2
}
     e08:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
     e0c:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
	syserror (ESTATE, "state");
     e10:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
     e14:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
     e18:	01062405 	tsteq	r6, r5, lsl #8
     e1c:	02050104 	andeq	r0, r5, #4, 2
void update_n_wake (word min, Boolean force) {
     e20:	7db20306 	ldcvc	3, cr0, [r2, #24]!
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	000e0258 	andeq	r0, lr, r8, asr r2
     e28:	3d050101 	stfccs	f0, [r5, #-4]
     e2c:	d8020500 	stmdale	r2, {r8, sl}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e30:	03000005 	movweq	r0, #5
     e34:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
     e38:	3d051402 	cfstrscc	mvf1, [r5, #-8]
     e3c:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
     e40:	0b030605 	bleq	c265c <__ccfg+0xa26b4>
     e44:	060e0582 	streq	r0, [lr], -r2, lsl #11
     e48:	2f080501 	svccs	0x00080501
     e4c:	051f0e05 	ldreq	r0, [pc, #-3589]	; 4f <g_pfnVectors+0x4f>
     e50:	052f0605 	streq	r0, [pc, #-1541]!	; 853 <GPIOIntHandler+0x2b>
     e54:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
     e58:	0f052006 	svceq	0x00052006
     e5c:	0604052e 	streq	r0, [r4], -lr, lsr #10
     e60:	06070534 			; <UNDEFINED> instruction: 0x06070534
		for_all_tasks (i) {
     e64:	06050501 	streq	r0, [r5], -r1, lsl #10
	__pi_mintk = znew + min;
     e68:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
     e6c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
			if (!twaiting (i))
     e70:	20340301 	eorscs	r0, r4, r1, lsl #6
     e74:	a0030905 	andge	r0, r3, r5, lsl #18
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
     e7c:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
     e80:	0e052108 	adfeqs	f2, f5, #0.0
     e84:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
     e88:	0b030604 	bleq	c26a0 <__ccfg+0xa26f8>
     e8c:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
     e90:	07050106 	streq	r0, [r5, -r6, lsl #2]
     e94:	0605052e 	streq	r0, [r5], -lr, lsr #10
     e98:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
     e9c:	060b0524 	streq	r0, [fp], -r4, lsr #10
     ea0:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
     ea4:	21062d04 	tstcs	r6, r4, lsl #26
				wakeuptm (i);
     ea8:	01060b05 	tsteq	r6, r5, lsl #22
     eac:	03060505 	movweq	r0, #25861	; 0x6505
		for_all_tasks (i) {
     eb0:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
				d = i->Timer - znew;
     eb4:	05053006 	streq	r3, [r5, #-6]
     eb8:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
     ebc:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
     ec4:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     ec8:	07053506 	streq	r3, [r5, -r6, lsl #10]
	__pi_old = znew;
     ecc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
     ed0:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
	TCI_RUN_DELAY_TIMER;
     ed4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
}
     ed8:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
     edc:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
     ee0:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
     ee4:	03040520 	movweq	r0, #17696	; 0x4520
     ee8:	08052030 	stmdaeq	r5, {r4, r5, sp}
void proceed (word state) {
     eec:	03050521 	movweq	r0, #21793	; 0x5521
	prcdstate (__pi_curr, state);
     ef0:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
     ef4:	3c110306 	ldccc	3, cr0, [r1], {6}
	release;
     ef8:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
     efc:	1f04053d 	svcne	0x0004053d
void __pi_wait (aword event, word state) {
     f00:	0b052f06 	bleq	14cb20 <__ccfg+0x12cb78>
	sint j = nevents (__pi_curr);
     f04:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (j >= MAX_EVENTS_PER_TASK)
     f08:	07052506 	streq	r2, [r5, -r6, lsl #10]
     f0c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     f10:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
		syserror (ENEVENTS, "sw");
     f14:	08050106 	stmdaeq	r5, {r1, r2, r8}
     f18:	0605054a 	streq	r0, [r5], -sl, asr #10
	setestate (__pi_curr->Events [j], state, event);
     f1c:	06040531 			; <UNDEFINED> instruction: 0x06040531
	incwait (__pi_curr);
     f20:	062e1603 	strteq	r1, [lr], -r3, lsl #12
	setestate (__pi_curr->Events [j], state, event);
     f24:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
}
     f28:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     f2c:	052f0605 	streq	r0, [pc, #-1541]!	; 92f <system_init+0x63>
     f30:	7f880302 	svcvc	0x00880302
void __pi_trigger (aword event) {
     f34:	06100501 	ldreq	r0, [r0], -r1, lsl #10
	for_all_tasks (i) {
     f38:	030c0501 	movweq	r0, #50433	; 0xc501
		for (j = 0; j < nevents (i); j++) {
     f3c:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
     f40:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
     f44:	0c052f06 	stceq	15, cr2, [r5], {6}
     f48:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			if (i->Events [j] . Event == event) {
     f4c:	20110306 	andscs	r0, r1, r6, lsl #6
     f50:	01001202 	tsteq	r0, r2, lsl #4
     f54:	002b0501 	eoreq	r0, fp, r1, lsl #10
				wakeupev (i, j);
     f58:	00000205 	andeq	r0, r0, r5, lsl #4
     f5c:	ea030000 	b	c0f64 <__ccfg+0xa0fbc>
	for_all_tasks (i) {
     f60:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
}
     f64:	06010514 			; <UNDEFINED> instruction: 0x06010514
aword __pi_join (aword pid, word st) {
     f68:	00060213 	andeq	r0, r6, r3, lsl r2
	for_all_tasks (i) {
     f6c:	19050101 	stmdbne	r5, {r0, r8}
     f70:	e8020500 	stmda	r2, {r8, sl}
	return 0;
     f74:	03000006 	movweq	r0, #6
		if ((aword)i == pid) {
     f78:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
			__pi_wait (pid, st);
     f7c:	06041402 	streq	r1, [r4], -r2, lsl #8
}
     f80:	12032405 	andne	r2, r3, #83886080	; 0x5000000
	for_all_tasks (i) {
     f84:	17050501 	strne	r0, [r5, -r1, lsl #10]
     f88:	01062205 	tsteq	r6, r5, lsl #4
void delay (word d, word state) {
     f8c:	19050104 	stmdbne	r5, {r2, r8}
	settstate (__pi_curr, state);
     f90:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
     f94:	03220506 			; <UNDEFINED> instruction: 0x03220506
     f98:	01042019 	tsteq	r4, r9, lsl r0
     f9c:	6b030605 	blvs	c27b8 <__ccfg+0xa2810>
	update_n_wake (d, YES);
     fa0:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
     fa4:	20150322 	andscs	r0, r5, r2, lsr #6
	__pi_curr->Timer = __pi_old + d;
     fa8:	02050104 	andeq	r0, r5, #4, 2
     fac:	206b0306 	rsbcs	r0, fp, r6, lsl #6
	inctimer (__pi_curr);
     fb0:	01060605 	tsteq	r6, r5, lsl #12
     fb4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     fb8:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
}
     fbc:	0603052e 	streq	r0, [r3], -lr, lsr #10
     fc0:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
	if (fun == NULL)
     fc4:	01010113 	tsteq	r1, r3, lsl r1
		return (int) __pi_curr;
     fc8:	0620062e 	strteq	r0, [r0], -lr, lsr #12
     fcc:	4a662e66 	bmi	198c96c <__ccfg+0x196c9c4>
	for_all_tasks (i)
     fd0:	02052e01 	andeq	r2, r5, #1, 28
}
     fd4:	06060515 			; <UNDEFINED> instruction: 0x06060515
		if (i->code == fun)
     fd8:	20050501 	andcs	r0, r5, r1, lsl #10
	for_all_tasks (i)
     fdc:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     fe0:	03052e18 	movweq	r2, #24088	; 0x5e18
     fe4:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
int __pi_strlen (const char *s) {
     fe8:	014b062c 	cmpeq	fp, ip, lsr #12
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	01011358 	tsteq	r1, r8, asr r3
}
     ff0:	20062e01 	andcs	r2, r6, r1, lsl #28
	for (i = 0; *(s+i) != '\0'; i++);
     ff4:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	while (n--)
     ff8:	0105014a 	tsteq	r5, sl, asr #2
     ffc:	0b023206 	bleq	8d81c <__ccfg+0x6d874>
		*dest++ = *src++;
    1000:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1004:	02050021 	andeq	r0, r5, #33	; 0x21
    1008:	000007a8 	andeq	r0, r0, r8, lsr #15
void adddevfunc (devreqfun_t rf, int loc) {
    100c:	0107d903 	tsteq	r7, r3, lsl #18
		syserror (EREQPAR, "addv");
    1010:	13140205 	tstne	r4, #1342177280	; 0x50000000
		syserror (ERESOURCE, "addv");
    1014:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
	if (ioreq [loc] != NULL)
    1018:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    101c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (ERESOURCE, "addv");
    1020:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
	ioreq [loc] = rf;
    1024:	03040106 	movweq	r0, #16646	; 0x4106
}
    1028:	83030305 	movwhi	r0, #13061	; 0x3305
    102c:	01042079 	tsteq	r4, r9, ror r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	03060205 	movweq	r0, #25093	; 0x6205
    1034:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
    1038:	0305010e 	movweq	r0, #20750	; 0x510e
    103c:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1040:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
    1044:	0104017d 	tsteq	r4, sp, ror r1
    1048:	d3030805 	movwle	r0, #14341	; 0x3805
		syserror (ENODEVICE, "io");
    104c:	04042002 	streq	r2, [r4], #-2
    1050:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
	if (len == 0)
    1054:	0104207d 	tsteq	r4, sp, ror r0
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	d3030805 	movwle	r0, #14341	; 0x3805
    105c:	03052002 	movweq	r2, #20482	; 0x5002
	if (ret >= 0)
    1060:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
	if (ret == -1) {
    1064:	21060305 	tstcs	r6, r5, lsl #6
    1068:	29050404 	stmdbcs	r5, {r2, sl}
		if (retry == WNONE)
    106c:	017da703 	cmneq	sp, r3, lsl #14
		iowait (dev, operation, retry);
    1070:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1074:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
    1078:	01042e2d 	tsteq	r4, sp, lsr #28
			release;
    107c:	03060305 	movweq	r0, #25349	; 0x6305
	if (ret == -2) {
    1080:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
		if (retry != WNONE) {
    1084:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
    1088:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
			iowait (dev, operation, retry);
    108c:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
    1090:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
			(ioreq [dev]) (NONE, buf, len);
    1094:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1098:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
    109c:	58410520 	stmdapl	r1, {r5, r8, sl}^
		(ioreq [dev]) (NONE, buf, len);
    10a0:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
    10a4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10a8:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
}
    10ac:	03290504 			; <UNDEFINED> instruction: 0x03290504
	if (retry != WNONE) {
    10b0:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
		delay (-ret - 2, retry);
    10b4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    10b8:	01040106 	tsteq	r4, r6, lsl #2
    10bc:	03060305 	movweq	r0, #25349	; 0x6305
    10c0:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
		release;
    10c4:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
    10c8:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    10d0:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
    10d4:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
    10d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    10dc:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
		syserror (ERESOURCE, "mal1");
    10e0:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    10e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	02050021 	andeq	r0, r5, #33	; 0x21
    10ec:	000007ec 	andeq	r0, r0, ip, ror #15
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f0:	0107ec03 	tsteq	r7, r3, lsl #24
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f4:	13140205 	tstne	r4, #1342177280	; 0x50000000
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f8:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    10fc:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
    1100:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1104:	90030621 	andls	r0, r3, r1, lsr #12
    1108:	03040107 	movweq	r0, #16647	; 0x4107
    110c:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
    1110:	01042078 	tsteq	r4, r8, ror r0
    1114:	03060205 	movweq	r0, #25093	; 0x6205
    1118:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
void __pi_free (aword *ch) {
    111c:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1120:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
    1124:	9b033305 	blls	cdd40 <__ccfg+0xadd98>
		syserror (EMALLOC, "malg");
    1128:	0104207d 	tsteq	r4, sp, ror r0
    112c:	e6030805 	str	r0, [r3], -r5, lsl #16
	mcfree [MA_NP] += m_size (ch);
    1130:	04042002 	streq	r2, [r4], #-2
		m_size (ch) ^= MALLOC_UMASK;
    1134:	9a032d05 	bls	cc550 <__ccfg+0xac5a8>
    1138:	0104207d 	tsteq	r4, sp, ror r0
	mcfree [MA_NP] += m_size (ch);
    113c:	e8030305 	stmda	r3, {r0, r2, r8, r9}
	QFREE;
    1140:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
	if (mevent [MA_NP] . nwait) {
    1144:	01060805 	tsteq	r6, r5, lsl #16
    1148:	051f1e05 	ldreq	r1, [pc, #-3589]	; 34b <__pi_syserror+0x1f>
		trigger ((aword)(&(mevent [MA_NP])));
    114c:	03052106 	movweq	r2, #20742	; 0x5106
		mevent [MA_NP] . nwait --;
    1150:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
}
    1154:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
    1158:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    115c:	06330517 			; <UNDEFINED> instruction: 0x06330517
    1160:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
void kill (aword pid) {
    1164:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
		pid = (aword) __pi_curr;
    1168:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
	j = NULL;
    116c:	2d050404 	cfstrscs	mvf0, [r5, #-16]
	for_all_tasks (i) {
    1170:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
	syserror (EREQPAR, "kpi");
    1174:	03050104 	movweq	r0, #20740	; 0x5104
    1178:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
		if ((aword)i == pid) {
    117c:	06410520 	strbeq	r0, [r1], -r0, lsr #10
    1180:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
				__PCB = i->Next;
    1184:	010e051d 	tsteq	lr, sp, lsl r5
			killev (i);
    1188:	01060205 	tsteq	r6, r5, lsl #4
			ufree (i);
    118c:	03042606 	movweq	r2, #17926	; 0x4606
			if (i == __pi_curr)
    1190:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
    1194:	01040178 	tsteq	r4, r8, ror r1
				release;
    1198:	03060105 	movweq	r0, #24837	; 0x6105
				j->Next = i->Next;
    119c:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
    11a0:	01010008 	tsteq	r1, r8
    11a4:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
}
    11a8:	00082802 	andeq	r2, r8, r2, lsl #16
    11ac:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
    11b0:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
	if (size < 8)
    11b4:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
		_size = 2;
    11b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
		_size = (((aword)size) + 3) >> 2;
    11c0:	07040107 	streq	r0, [r4, -r7, lsl #2]
		if (m_magic (chunk) != MALLOC_MAGIC)
    11c4:	bb030505 	bllt	c25e0 <__ccfg+0xa2638>
		_size = (((aword)size) + 3) >> 2;
    11c8:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
		if (mevent [MA_NP] . nfail != 255)
    11cc:	0602052e 	streq	r0, [r2], -lr, lsr #10
    11d0:	01013d3d 	tsteq	r1, sp, lsr sp
			mevent [MA_NP] . nfail ++;
    11d4:	20063c01 	andcs	r3, r6, r1, lsl #24
		mnfree [MA_NP] = 0;
    11d8:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    11dc:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		if (m_magic (chunk) != MALLOC_MAGIC)
    11e0:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    11e4:	050f0105 	streq	r0, [pc, #-261]	; 10e7 <__pi_malloc_init+0x1b>
			syserror (EMALLOC, "malc");
    11e8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    11ec:	02052004 	andeq	r2, r5, #4
		if (m_size (chunk) >= _size)
    11f0:	01013d06 	tsteq	r1, r6, lsl #26
    11f4:	20063c01 	andcs	r3, r6, r1, lsl #24
		chunk = m_nextp (chunk)) {
    11f8:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
		m_setnextp (cc, m_nextp (chunk));
    11fc:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1200:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
    1204:	06010501 	streq	r0, [r1], -r1, lsl #10
			m_size (chunk) = _size;
    1208:	0107d003 	tsteq	r7, r3
			cc = chunk + _size + m_hdrlen;
    120c:	01000b02 	tsteq	r0, r2, lsl #22
    1210:	00150501 	andseq	r0, r5, r1, lsl #10
			m_size (cc) = waste - m_hdrlen;
    1214:	08cc0205 	stmiaeq	ip, {r0, r2, r9}^
			QFREE;
    1218:	80030000 	andhi	r0, r3, r0
		mevent [MA_NP] . nfail = 0;
    121c:	02050108 	andeq	r0, r5, #8, 2
		mcfree [MA_NP] -= m_size (chunk);
    1220:	06150514 			; <UNDEFINED> instruction: 0x06150514
    1224:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
    1228:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    122c:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
		m_size (chunk) |= MALLOC_UMASK;
    1230:	a7030505 	strge	r0, [r3, -r5, lsl #10]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	3105017c 	tstcc	r5, ip, ror r1
		m_size (chunk) |= MALLOC_UMASK;
    1238:	01040106 	tsteq	r4, r6, lsl #2
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
}
    1240:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
    1244:	bb033105 	bllt	cd660 <__ccfg+0xad6b8>
    1248:	01042002 	tsteq	r4, r2
    124c:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
    1250:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
    1254:	9b030505 	blls	c2670 <__ccfg+0xa26c8>
    1258:	2d052e02 	stccs	14, cr2, [r5, #-8]
aword __pi_fork (fsmcode func, aword data) {
    125c:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
    1264:	03310509 	teqeq	r1, #37748736	; 0x2400000
    1268:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
		if ((j = __PCB) == NULL)
    126c:	06020501 	streq	r0, [r2], -r1, lsl #10
	i->Next = NULL;
    1270:	2003dc03 	andcs	sp, r3, r3, lsl #24
	i->data = data;
    1274:	0179e703 	cmneq	r9, r3, lsl #14
		if ((j = __PCB) == NULL)
    1278:	01070514 	tsteq	r7, r4, lsl r5
}
    127c:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
			for (; j->Next != NULL; j = j->Next);
    1280:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
    1284:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
	return (aword) i;
    1288:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
    128c:	2f060305 	svccs	0x00060305
	if (mevent [MA_NP] . nwait != 255)
    1290:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
    1294:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    1298:	052f0603 	streq	r0, [pc, #-1539]!	; c9d <__pi_release+0x219>
		mevent [MA_NP] . nwait ++;
    129c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
    12a4:	03290504 			; <UNDEFINED> instruction: 0x03290504
void diag (const char *mess, ...) {
    12a8:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
    12ac:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    12b0:	06380517 			; <UNDEFINED> instruction: 0x06380517
	diag_disable_int (a, is);
    12b4:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    12b8:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
    12bc:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
				d = (bc == 16) ? 10000 : 1000000000;
    12c0:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
	diag_disable_int (a, is);
    12c4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
	while (*mess != '\0') {
    12c8:	27032905 	strcs	r2, [r3, -r5, lsl #18]
	dgout ('\r');
    12cc:	17050501 	strne	r0, [r5, -r1, lsl #10]
	dgout ('\n');
    12d0:	01062d05 	tsteq	r6, r5, lsl #26
    12d4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    12d8:	3c560306 	mrrccc	3, 0, r0, r6, cr6
	diag_wait (a);
    12dc:	29050404 	stmdbcs	r5, {r2, sl}
	diag_enable_int (a, is);
    12e0:	0100db03 	tsteq	r0, r3, lsl #22
    12e4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
}
    12e8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    12ec:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    12f0:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
		if (*mess == '%') {
    12f4:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
    12f8:	06010602 	streq	r0, [r1], -r2, lsl #12
			if (*mess == 'l') {
    12fc:	2e069a03 	vmlacs.f32	s18, s12, s6
    1300:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
				mess++;
    1304:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
				val = va_arg (ap, lword);
    1308:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
				bc = 32;
    130c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
				bc = 16;
    1310:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			switch (*mess) {
    1314:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
    1318:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    131c:	7a9a032d 	bvc	fe681fd8 <_estack+0xde67cfd8>
				dgout ('%');
    1320:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1324:	e6030602 	str	r0, [r3], -r2, lsl #12
				dgout (*mess);
    1328:	04042005 	streq	r2, [r4], #-5
    132c:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
			switch (*mess) {
    1330:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
					v = __pi_hex_enc_table [
    1334:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
					i += 4;
    1338:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
					(val >> (bc - i)) & 0xf];
    133c:	e6030602 	str	r0, [r3], -r2, lsl #12
    1340:	01012005 	tsteq	r1, r5
					dgout (v);
    1344:	01010101 	tsteq	r1, r1, lsl #2
    1348:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
				while (i < bc) {
    134c:	29050404 	stmdbcs	r5, {r2, sl}
			mess++;
    1350:	017acb03 	cmneq	sl, r3, lsl #22
					d /= 10;
    1354:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
				if ((val >> (bc - 1)) & 1) {
    1358:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    135c:	03020501 	movweq	r0, #9473	; 0x2501
					dgout ('-');
    1360:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
    1364:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
						val |= 0xffff0000;
    1368:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
    136c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1370:	2005b003 	andcs	fp, r5, r3
				d = (bc == 16) ? 10000 : 1000000000;
    1374:	29050404 	stmdbcs	r5, {r2, sl}
    1378:	017acb03 	cmneq	sl, r3, lsl #22
    137c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
					v = (word) (val / d);
    1380:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
					if (v || d == 1) break;
    1384:	06020501 	streq	r0, [r2], -r1, lsl #10
    1388:	2005b003 	andcs	fp, r5, r3
					d /= 10;
    138c:	01010101 	tsteq	r1, r1, lsl #2
				d = (bc == 16) ? 10000 : 1000000000;
    1390:	23050101 	movwcs	r0, #20737	; 0x5101
					dgout (v + '0');
    1394:	01100306 	tsteq	r0, r6, lsl #6
    1398:	70030205 	andvc	r0, r3, r5, lsl #4
    139c:	01580620 	cmpeq	r8, r0, lsr #12
					d /= 10;
    13a0:	010d032e 	tsteq	sp, lr, lsr #6
					val = val - (v * d);
    13a4:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
					if (d == 0) break;
    13a8:	017ecd03 	cmneq	lr, r3, lsl #26
					v = (word) (val / d);
    13ac:	01062f05 	tsteq	r6, r5, lsl #30
    13b0:	27050104 	strcs	r0, [r5, -r4, lsl #2]
				if (bc == 16)
    13b4:	2001ba03 	andcs	fp, r1, r3, lsl #20
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	2f050a04 	svccs	0x00050a04
					val &= 0xffff;
    13bc:	207ec603 	rsbscs	ip, lr, r3, lsl #12
					dgout (*s);
    13c0:	02050104 	andeq	r0, r5, #4, 2
					s++;
    13c4:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
				while (*s != '\0') {
    13c8:	06230520 	strteq	r0, [r3], -r0, lsr #10
    13cc:	03020513 	movweq	r0, #9491	; 0x2513
			dgout (*mess++);
    13d0:	2305200c 	movwcs	r2, #20492	; 0x500c
    13d4:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    13d8:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    13dc:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    13e0:	27052802 	strcs	r2, [r5, -r2, lsl #16]
}
    13e4:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    while(1)
    13e8:	3f280602 	svccc	0x00280602
{
    13ec:	4a0a0331 	bmi	2820b8 <__ccfg+0x262110>
    SetupTrimDevice();
    13f0:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
    pui32Src = &_etext;
    13f4:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f8:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    __asm("    ldr     r0, =_bss\n"
    13fc:	017eae03 	cmneq	lr, r3, lsl #28
    1400:	0d050104 	stfeqs	f0, [r5, #-16]
    1404:	01d40306 	bicseq	r0, r4, r6, lsl #6
    1408:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    140c:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
   main();
    1410:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    FaultISR();
    1414:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
        *pui32Dest++ = *pui32Src++;
    1418:	0d052001 	stceq	0, cr2, [r5, #-4]
    141c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1420:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
    1424:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
    1428:	0605152e 	streq	r1, [r5], -lr, lsr #10
    142c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1430:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1434:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
static byte get_byte () {
    1438:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    143c:	030c0401 	movweq	r0, #50177	; 0xc401
    1440:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1444:	0b040106 	bleq	101864 <__ccfg+0xe18bc>
    1448:	03060505 	movweq	r0, #25861	; 0x6505
		if (ee_inp)
    144c:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
			b |= 1;
    1450:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1454:	01044b06 	tsteq	r4, r6, lsl #22
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1458:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
	for (b = 0, i = 0; i < 8; i++) {
    145c:	03054a06 	movweq	r4, #23046	; 0x5a06
}
    1460:	13040513 	movwne	r0, #17683	; 0x4513
    1464:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
    1468:	cb031902 	blgt	c7878 <__ccfg+0xa78d0>
static void put_byte (byte b) {
    146c:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
    1470:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
    1474:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
    1478:	06230517 			; <UNDEFINED> instruction: 0x06230517
		if (b & 0x80)
    147c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1480:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1484:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
	for (i = 0; i < 8; i++) {
    1488:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
		b <<= 1;
    148c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	for (i = 0; i < 8; i++) {
    1490:	dd030602 	stcle	6, cr0, [r3, #-8]
}
    1494:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
    1498:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    149c:	03052d02 	movweq	r2, #23810	; 0x5d02
    14a0:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
	put_byte (cmd);
    14a4:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
    14a8:	03051306 	movweq	r1, #21254	; 0x5306
}
    14ac:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
    14b0:	1f050101 	svcne	0x00050101
static void wwait (word st, word del) {
    14b4:	00020500 	andeq	r0, r2, r0, lsl #10
    14b8:	03000000 	movweq	r0, #0
    14bc:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
	while (dopen && (rdsr () & 1)) {
    14c0:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
    14c4:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    14c8:	2c056615 	stccs	6, cr6, [r5], {21}
    14cc:	20150520 	andscs	r0, r5, r0, lsr #10
	put_byte (CMD_RDSR);
    14d0:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
	r = get_byte ();
    14d4:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
    14d8:	03022301 	movweq	r2, #8961	; 0x2301
	while (dopen && (rdsr () & 1)) {
    14dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    14e0:	0205001c 	andeq	r0, r5, #28
		if (st == WNONE)
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	010adb03 	tsteq	sl, r3, lsl #22
			mdelay (1);
    14ec:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    14f0:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
			delay (del, st);
    14f4:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
    14f8:	07052506 	streq	r2, [r5, -r6, lsl #10]
			release;
    14fc:	58060520 	stmdapl	r6, {r5, r8, sl}
    1500:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1504:	01060605 	tsteq	r6, r5, lsl #12
static void ready () {
    1508:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
	if (dopen) {
    150c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
		wwait (WNONE, 1);
    1510:	06200602 	strteq	r0, [r0], -r2, lsl #12
    1514:	0601054d 	streq	r0, [r1], -sp, asr #10
    1518:	00040213 	andeq	r0, r4, r3, lsl r2
	dstat = 0;
    151c:	31050101 	tstcc	r5, r1, lsl #2
}
    1520:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    1524:	0300000a 	movweq	r0, #10
    1528:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
	udelay (1);
    152c:	03041402 	movweq	r1, #17410	; 0x4402
    1530:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
	udelay (1);
    1534:	01040177 	tsteq	r4, r7, ror r1
		dopen = DOPEN_TEMP;
    1538:	03063105 	movweq	r3, #24837	; 0x6105
    153c:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
    1540:	03030503 	movweq	r0, #13571	; 0x3503
    1544:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
static void cclose () {
    1548:	03310501 	teqeq	r1, #4194304	; 0x400000
	if (dopen == DOPEN_TEMP) {
    154c:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
    1550:	03030503 	movweq	r0, #13571	; 0x3503
		wwait (WNONE, 1);
    1554:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
    1558:	06020501 	streq	r0, [r2], -r1, lsl #10
	cmd_0 (CMD_DP);
    155c:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
    1560:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
		dopen = 0;
    1564:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
}
    1568:	01046676 	tsteq	r4, r6, ror r6
word ee_open () {
    156c:	03060205 	movweq	r0, #25093	; 0x6205
	ready ();
    1570:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
	dopen = DOPEN_PERM;
    1574:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
    1578:	19010101 	stmdbne	r1, {r0, r8}
}
    157c:	01044a5b 	tsteq	r4, fp, asr sl
	if (dopen) {
    1580:	03061a05 	movweq	r1, #27141	; 0x6a05
    1584:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
		dopen = DOPEN_TEMP;
    1588:	0602050d 	streq	r0, [r2], -sp, lsl #10
		cclose ();
    158c:	2076f903 	rsbscs	pc, r6, r3, lsl #18
}
    1590:	01010101 	tsteq	r1, r1, lsl #2
int ser_in (word st, char *buf, int len) {
    1594:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    1598:	01360303 	teqeq	r6, r3, lsl #6
	if (len == 0)
    159c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	if (__inpline == NULL) {
    15a0:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
		if ((prcs = running (__inserial)) == 0) {
    15a4:	eb030104 	bl	c19bc <__ccfg+0xa1a14>
    15a8:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
			prcs = runthread (__inserial);
    15ac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    15b0:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
			if (prcs == 0) {
    15b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				npwait (st);
    15b8:	20150520 	andscs	r0, r5, r0, lsr #10
		release;
    15bc:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
		join (prcs, st);
    15c0:	216a0604 	cmncs	sl, r4, lsl #12
    15c4:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	if (*__inpline == NULL) // bin cmd
    15c8:	01778e03 	cmneq	r7, r3, lsl #28
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15cc:	03050304 	movweq	r0, #21252	; 0x5304
	if (prcs >= len)
    15d0:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
		prcs = len-1;
    15d4:	0302050d 	movweq	r0, #9485	; 0x250d
	memcpy (buf, __inpline, prcs);
    15d8:	20202055 	eorcs	r2, r0, r5, asr r0
    15dc:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
    15e0:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
	ufree (__inpline);
    15e4:	a6030305 	strge	r0, [r3], -r5, lsl #6
	__inpline = NULL;
    15e8:	10054a75 	andne	r4, r5, r5, ror sl
	if (*buf) // if it's NULL, it's a bin cmd
    15ec:	06050106 	streq	r0, [r5], -r6, lsl #2
		buf [prcs] = '\0';
    15f0:	20230520 	eorcs	r0, r3, r0, lsr #10
}
    15f4:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
		prcs = strlen (__inpline);
    15f8:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    15fc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		return 0;
    1600:	052f0604 	streq	r0, [pc, #-1540]!	; 1004 <__pi_memcpy+0xe>
    1604:	01041c02 	tsteq	r4, r2, lsl #24
    1608:	8f030405 	svchi	0x00030405
int ser_outf (word st, const char *m, ...) {
    160c:	2a052e09 	bcs	14ce38 <__ccfg+0x12ce90>
    1610:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if ((prcs = running (__outserial)) != 0) {
    1614:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
    1618:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
		join (prcs, st);
    161c:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
    1620:	017fb203 	cmneq	pc, r3, lsl #4
		release;
    1624:	01062905 	tsteq	r6, r5, lsl #18
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1628:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    162c:	00d10306 	sbcseq	r0, r1, r6, lsl #6
    1630:	02044d66 	andeq	r4, r4, #6528	; 0x1980
		umwait (st);
    1634:	9f030505 	svcls	0x00030505
    1638:	01040178 	tsteq	r4, r8, ror r1
	if (runstrand (__outserial, buf) == 0) {
    163c:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    1640:	1a052007 	bne	149664 <__ccfg+0x1296bc>
    1644:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		ufree (buf);
    1648:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
		npwait (st);
    164c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
}
    1650:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    1654:	03050502 	movweq	r0, #21762	; 0x5502
    1658:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
    165c:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
int ser_inf (word st, const char *fmt, ...) {
    1660:	06040501 	streq	r0, [r4], -r1, lsl #10
    1664:	2007f103 	andcs	pc, r7, r3, lsl #2
	if (fmt == NULL)
    1668:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
	if (__inpline == NULL) {
    166c:	0178a003 	cmneq	r8, r3
		if ((prcs = running (__inserial)) == 0) {
    1670:	31050904 	tstcc	r5, r4, lsl #18
    1674:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
			prcs = runthread (__inserial);
    1678:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
    167c:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
			if (prcs == 0) {
    1680:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
				npwait (st);
    1684:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
		release;
    1688:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
		join (prcs, st);
    168c:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
    1690:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	va_start (ap, fmt);
    1694:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
	prcs = vscan (__inpline, fmt, ap);
    1698:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
    169c:	a0033105 	andge	r3, r3, r5, lsl #2
	ufree (__inpline);
    16a0:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
	__inpline = NULL;
    16a4:	06520515 			; <UNDEFINED> instruction: 0x06520515
}
    16a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    16ac:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
    16b0:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
		return 0;
    16b4:	7a9b0352 	bvc	fe6c2404 <_estack+0xde6bd404>
    16b8:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    16bc:	e0030604 	and	r0, r3, r4, lsl #12
strand (__outserial, const char*)
    16c0:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
    16c4:	86030505 	strhi	r0, [r3], -r5, lsl #10
    16c8:	01040178 	tsteq	r4, r8, ror r1
    16cc:	fc030405 	stc2	4, cr0, [r3], {5}
endstrand
    16d0:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
    16d4:	ea030505 	b	c2af0 <__ccfg+0xa2b48>
	ptr = data;
    16d8:	3105017a 	tstcc	r5, sl, ror r1
    16dc:	29050106 	stmdbcs	r5, {r1, r2, r8}
	if (*ptr)
    16e0:	2004b603 	andcs	fp, r4, r3, lsl #12
		len = strlen (ptr);
    16e4:	ca033105 	bgt	cdb00 <__ccfg+0xadb58>
    16e8:	01042e7b 	tsteq	r4, fp, ror lr
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16ec:	03060405 	movweq	r0, #25605	; 0x6405
    16f0:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
    16f4:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    16f8:	6a062004 	bvs	189710 <__ccfg+0x169768>
    16fc:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	len -= quant;
    1700:	01799f03 	cmneq	r9, r3, lsl #30
    1704:	01063f05 	tsteq	r6, r5, lsl #30
    1708:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (len == 0) {
    170c:	2006ed03 	andcs	lr, r6, r3, lsl #26
		ufree (data);
    1710:	3f050904 	svccc	0x00050904
		finish;
    1714:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1718:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    171c:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
    1720:	0309042e 	movweq	r0, #37934	; 0x942e
    1724:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1728:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    172c:	03040501 	movweq	r0, #17665	; 0x4501
strand (__inserial, address)
    1730:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
    1734:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1738:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
    173c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1740:	4a00f303 	bmi	3e354 <__ccfg+0x1e3ac>
	if (__inpline != NULL)
    1744:	0204404d 	andeq	r4, r4, #77	; 0x4d
    1748:	ea030505 	b	c2b64 <__ccfg+0xa2bbc>
		finish;
    174c:	01040177 	tsteq	r4, r7, ror r1
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1750:	99030405 	stmdbls	r3, {r0, r2, sl}
    1754:	1a052008 	bne	14977c <__ccfg+0x1297d4>
    1758:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    175c:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
		umwait (IM_INIT);
    1760:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
		release;
    1764:	1a052304 	bne	14a37c <__ccfg+0x12a3d4>
	savedata (data);
    1768:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
	len = MAX_LINE_LENGTH;
    176c:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
	io (IM_READ, __cport, READ, ptr, 1);
    1770:	017eee03 	cmneq	lr, r3, lsl #28
    1774:	01062905 	tsteq	r6, r5, lsl #18
    1778:	0d050e04 	stceq	14, cr0, [r5, #-16]
    177c:	2e7bdb03 	vaddcs.f64	d29, d11, d3
	if (ptr == (char*) data) { // new line
    1780:	29050904 	stmdbcs	r5, {r2, r8, fp}
    1784:	2004a503 	andcs	sl, r4, r3, lsl #10
		if (*ptr == '\0') { // bin cmd
    1788:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
			proceed (IM_BIN);
    178c:	01970306 	orrseq	r0, r7, r6, lsl #6
    1790:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
		if (*ptr < 0x20)
    1794:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    1798:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
			proceed (IM_READ);
    179c:	01065205 	tsteq	r6, r5, lsl #4
    17a0:	1a050104 	bne	141bb8 <__ccfg+0x121c10>
	if (*ptr == '\n' || *ptr == '\r') {
    17a4:	068c0306 	streq	r0, [ip], r6, lsl #6
    17a8:	110a052e 	tstne	sl, lr, lsr #10
    17ac:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		*ptr = '\0';
    17b0:	017ac303 	cmneq	sl, r3, lsl #6
		__inpline = (char*)data;
    17b4:	01060d05 	tsteq	r6, r5, lsl #26
		finish;
    17b8:	0a050104 	beq	141bd0 <__ccfg+0x121c28>
	if (len) {
    17bc:	2005bd03 	andcs	fp, r5, r3, lsl #26
		ptr++;
    17c0:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    17c4:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
		len--;
    17c8:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
	proceed (IM_READ);
    17cc:	110a0521 	tstne	sl, r1, lsr #10
	io (IM_BIN, __cport, READ, ptr, 1);
    17d0:	01060b05 	tsteq	r6, r5, lsl #22
    17d4:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
    17d8:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
    17dc:	03050509 	movweq	r0, #21769	; 0x5509
    17e0:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
	len -= 2;
    17e4:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
	if (len > *ptr + 1) // 1 for 0x04
    17e8:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
    17ec:	03310520 	teqeq	r1, #32, 10	; 0x8000000
		len = *ptr + 1;
    17f0:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
    17f4:	06040501 	streq	r0, [r4], -r1, lsl #10
	ptr++;
    17f8:	2005cb03 	andcs	ip, r5, r3, lsl #22
	quant = io (IM_BINL, __cport, READ, ptr, len);
    17fc:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1800:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
    1804:	01063f05 	tsteq	r6, r5, lsl #30
    1808:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    180c:	07920306 	ldreq	r0, [r2, r6, lsl #6]
    1810:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
	len -= quant;
    1814:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
		__inpline = (char*)data;
    1818:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		finish;
    181c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	ptr += quant;
    1820:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
    1824:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
endstrand
    1828:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    182c:	01040177 	tsteq	r4, r7, ror r1
	proceed (IM_BINL);
    1830:	ba030405 	blt	c284c <__ccfg+0xa28a4>
endstrand
    1834:	09032008 	stmdbeq	r3, {r3, sp}
    1838:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
    183c:	017db003 	cmneq	sp, r3
    1840:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1844:	017ed403 	cmneq	lr, r3, lsl #8
    1848:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		if (res && (d < n))
    184c:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    1850:	03010501 	movweq	r0, #5377	; 0x1501
    1854:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
    1858:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
			res [d] = (char) c;
    185c:	055b2002 	ldrbeq	r2, [fp, #-2]
		d++;
    1860:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    1864:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
    1868:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    186c:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    1870:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    1874:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
				enci (10000);
    1878:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    1880:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
	d = 0;
    1884:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
		c = *fm++;
    1888:	03050502 	movweq	r0, #21762	; 0x5502
		if (c == '\\') {
    188c:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
			if ((c = *fm++) == '\0') {
    1890:	03040501 	movweq	r0, #17665	; 0x4501
    1894:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
				outc ('\\');
    1898:	0305050e 	movweq	r0, #21774	; 0x550e
			if ((c = *fm++) == '\0') {
    189c:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
				outc ('\\');
    18a0:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    18a4:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
			outc (c);
    18a8:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
    18ac:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
			if (c == '\0')
    18b0:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    18b4:	06040501 	streq	r0, [r4], -r1, lsl #10
			outc (c);
    18b8:	3c05f703 	stccc	7, cr15, [r5], {3}
				outc (val);
    18bc:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
				val = (word) va_arg (ap, aword);
    18c0:	01778503 	cmneq	r7, r3, lsl #10
		if (c == '%') {
    18c4:	0d050e04 	stceq	14, cr0, [r5, #-16]
    18c8:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
			c = *fm++;
    18cc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			switch (c) {
    18d0:	96030639 			; <UNDEFINED> instruction: 0x96030639
    18d4:	0a052006 	beq	1498f4 <__ccfg+0x12994c>
    18d8:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    18dc:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
    18e0:	060d0501 	streq	r0, [sp], -r1, lsl #10
    18e4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    18e8:	0696030a 	ldreq	r0, [r6], sl, lsl #6
    18ec:	06040520 	streq	r0, [r4], -r0, lsr #10
				outc ('%');
    18f0:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    18f4:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
				outc (c);
    18f8:	06410501 	strbeq	r0, [r1], -r1, lsl #10
    18fc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1900:	08970304 	ldmeq	r7, {r2, r8, r9}
				if (c == '\0')
    1904:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
				return d;
    1908:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
}
    190c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1910:	97030604 	strls	r0, [r3, -r4, lsl #12]
			switch (c) {
    1914:	04522008 	ldrbeq	r2, [r2], #-8
    1918:	0302050d 	movweq	r0, #9485	; 0x250d
    191c:	4a2075d1 	bmi	81f068 <__ccfg+0x7ff0c0>
				for (i = 12; ; i -= 4) {
    1920:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
				val = (word) va_arg (ap, aword);
    1924:	03030503 	movweq	r0, #13571	; 0x3503
						[ (val >> i) & 0xf ]);
    1928:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
    192c:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    1930:	37021620 	strcc	r1, [r2, -r0, lsr #12]
					outc (__pi_hex_enc_table
    1934:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1938:	02050012 	andeq	r0, r5, #18
					if (i == 0)
    193c:	00000000 	andeq	r0, r0, r0
    1940:	0100e103 	tsteq	r0, r3, lsl #2
				for (i = 12; ; i -= 4) {
    1944:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
				val = (word) va_arg (ap, aword);
    1948:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
				if (c == 'd' && (val & 0x8000) != 0) {
    194c:	1f212202 	svcne	0x00212202
				val = (word) va_arg (ap, aword);
    1950:	4b2f2106 	blmi	bc9d70 <__ccfg+0xba9dc8>
				if (c == 'd' && (val & 0x8000) != 0) {
    1954:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    1958:	06020501 	streq	r0, [r2], -r1, lsl #10
					outc ('-');
    195c:	0008022f 	andeq	r0, r8, pc, lsr #4
    1960:	3a050101 	bcc	141d6c <__ccfg+0x121dc4>
					val = (~val) + 1;
    1964:	00020500 	andeq	r0, r2, r0, lsl #10
    1968:	03000000 	movweq	r0, #0
				for (i = 12; ; i -= 4) {
    196c:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
				enci (10000);
    1970:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1974:	200e063a 	andcs	r0, lr, sl, lsr r6
    1978:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    197c:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
    1980:	06030524 	streq	r0, [r3], -r4, lsr #10
    1984:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
    1988:	06040501 	streq	r0, [r4], -r1, lsl #10
    198c:	06120530 			; <UNDEFINED> instruction: 0x06120530
    1990:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    1994:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    1998:	01060905 	tsteq	r6, r5, lsl #18
    199c:	2f050f04 	svccs	0x00050f04
    19a0:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    19a4:	03090501 	movweq	r0, #38145	; 0x9501
    19a8:	0305206b 	movweq	r2, #20587	; 0x506b
    19ac:	0f042106 	svceq	0x00042106
    19b0:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
    19b4:	062f0501 	strteq	r0, [pc], -r1, lsl #10
				if (c == 'd' || c == 'u') {
    19b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    19bc:	207a0301 	rsbscs	r0, sl, r1, lsl #6
					if (c == 'd' &&
    19c0:	03060405 	movweq	r0, #25605	; 0x6405
					val = va_arg (ap, lword);
    19c4:	0f04206f 	svceq	0x0004206f
					fm++;
    19c8:	c3030505 	movwgt	r0, #13573	; 0x3505
					if (c == 'd' &&
    19cc:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
    19d0:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
						outc ('-');
    19d4:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
    19d8:	060b0501 	streq	r0, [fp], -r1, lsl #10
						val = (~val) + 1;
    19dc:	017fb603 	cmneq	pc, r3, lsl #12
				enci (10000);
    19e0:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
					enci (1000000000UL);
    19e4:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    19e8:	062f050e 	strteq	r0, [pc], -lr, lsl #10
    19ec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    19f0:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    19f4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    19f8:	06053f04 	streq	r3, [r5], -r4, lsl #30
    19fc:	0604052b 	streq	r0, [r4], -fp, lsr #10
    1a00:	03052f23 	movweq	r2, #24355	; 0x5f23
    1a04:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    1a08:	03051f09 	movweq	r1, #24329	; 0x5f09
    1a0c:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
    1a10:	01010009 	tsteq	r1, r9
    1a14:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    1a18:	000cdc02 	andeq	sp, ip, r2, lsl #24
    1a1c:	0af10300 	beq	ffc42624 <_estack+0xdfc3d624>
    1a20:	16030501 	strne	r0, [r3], -r1, lsl #10
    1a24:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
				} else if (c == 'x') {
    1a28:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
					for (i = 28; ; i -= 4) {
    1a2c:	26250520 	strtcs	r0, [r5], -r0, lsr #10
					val = va_arg (ap, lword);
    1a30:	051f0305 	ldreq	r0, [pc, #-773]	; 1733 <__inserial+0x3>
							[ (val >> i) & 0xf ]);
    1a34:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1a38:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
						outc (__pi_hex_enc_table
    1a3c:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
    1a40:	0305010f 	movweq	r0, #20751	; 0x510f
    1a44:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
						if (i == 0)
    1a48:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
    1a4c:	06207903 	strteq	r7, [r0], -r3, lsl #18
					for (i = 28; ; i -= 4) {
    1a50:	5b5b3231 	blpl	16ce31c <__ccfg+0x16ae374>
					outc ('%');
    1a54:	01061c05 	tsteq	r6, r5, lsl #24
    1a58:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a5c:	0c052302 	stceq	3, cr2, [r5], {2}
					outc ('l');
    1a60:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    1a64:	03043e23 	movweq	r3, #20003	; 0x4e23
				val = (word) va_arg (ap, aword);
    1a68:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
				outc (val);
    1a6c:	01040175 	tsteq	r4, r5, ror r1
    1a70:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
				while (*st != '\0') {
    1a74:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
    1a78:	e0010100 	and	r0, r1, r0, lsl #2
    1a7c:	0300000e 	movweq	r0, #14
    1a80:	00019000 	andeq	r9, r1, r0
					outc (*st);
    1a84:	fb010200 	blx	4228e <__ccfg+0x222e6>
    1a88:	01000d0e 	tsteq	r0, lr, lsl #26
					st++;
    1a8c:	00010101 	andeq	r0, r1, r1, lsl #2
		c = *fm++;
    1a90:	00010000 	andeq	r0, r1, r0
    1a94:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1a98:	2f656d6f 	svccs	0x00656d6f
char *vform (char *res, const char *fm, va_list aq) {
    1a9c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1aa0:	442f6e69 	strtmi	r6, [pc], #-3689	; 1aa8 <vform+0xc>
	if (res != NULL) {
    1aa4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1aa8:	4f2f706f 	svcmi	0x002f706f
    1aac:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1ab0:	502f5445 	eorpl	r5, pc, r5, asr #8
}
    1ab4:	534f4349 	movtpl	r4, #62281	; 0xf349
    1ab8:	6369502f 	cmnvs	r9, #47	; 0x2f
	fml = strlen (fm) + 17;
    1abc:	6b2f534f 	blvs	bd6800 <__ccfg+0xbb6858>
    1ac0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1ac4:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
	if ((res = (char*) umalloc (fml)) == NULL)
    1ac8:	2f656d6f 	svccs	0x00656d6f
    1acc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1ad0:	442f6e69 	strtmi	r6, [pc], #-3689	; 1ad8 <vform+0x3c>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ad4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1ad8:	4f2f706f 	svcmi	0x002f706f
    1adc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1ae0:	502f5445 	eorpl	r5, pc, r5, asr #8
		ufree (res);
    1ae4:	534f4349 	movtpl	r4, #62281	; 0xf349
		goto Again;
    1ae8:	6369502f 	cmnvs	r9, #47	; 0x2f
	if (buf == NULL || fmt == NULL)
    1aec:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
int vscan (const char *buf, const char *fmt, va_list ap) {
    1af0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	if (buf == NULL || fmt == NULL)
    1af4:	43432f58 	movtmi	r2, #16216	; 0x3f58
    1af8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1afc:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
		    	    case 'u': scanu (lword); break;
    1b00:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
			while (isspace (*buf)) buf++;
    1b04:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1b08:	2f006269 	svccs	0x00006269
	while (*fmt != '\0') {
    1b0c:	2f727375 	svccs	0x00727375
		if (*fmt++ != '%')
    1b10:	2f62696c 	svccs	0x0062696c
		switch (*fmt++) {
    1b14:	2f636367 	svccs	0x00636367
    1b18:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1b1c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1b20:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1b24:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    1b28:	2f312e32 	svccs	0x00312e32
    1b2c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
}
    1b30:	00656475 	rsbeq	r6, r5, r5, ror r4
		switch (*fmt++) {
    1b34:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a80 <__pi_vfparse+0x214>
    1b38:	616d2f65 	cmnvs	sp, r5, ror #30
    1b3c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b40:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			while (isspace (*buf)) buf++;
    1b44:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b48:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1b4c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1b50:	4349502f 	movtmi	r5, #36911	; 0x902f
    1b54:	502f534f 	eorpl	r5, pc, pc, asr #6
    1b58:	534f6369 	movtpl	r6, #62313	; 0xf369
			if (*buf == '\0')
    1b5c:	3143432f 	cmpcc	r3, pc, lsr #6
			if (*buf != ',') {
    1b60:	00585833 	subseq	r5, r8, r3, lsr r8
			sap = va_arg (ap, char*);
    1b64:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1ab0 <vform+0x14>
			nc++;
    1b68:	616d2f65 	cmnvs	sp, r5, ror #30
			if (*buf != ',') {
    1b6c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				while (!isspace (*buf) && *buf != ',' &&
    1b70:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1b74:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b78:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1b7c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1b80:	4349502f 	movtmi	r5, #36911	; 0x902f
    1b84:	502f534f 	eorpl	r5, pc, pc, asr #6
    1b88:	534f6369 	movtpl	r6, #62313	; 0xf369
			while (isspace (*buf)) buf++;
    1b8c:	656b0000 	strbvs	r0, [fp, #-0]!
    1b90:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1b94:	0100632e 	tsteq	r0, lr, lsr #6
    1b98:	61750000 	cmnvs	r5, r0
    1b9c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
			if (*buf == ',') buf++;
    1ba0:	00000200 	andeq	r0, r0, r0, lsl #4
    1ba4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
			*sap = '\0';
    1ba8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
			break;
    1bac:	00000300 	andeq	r0, r0, r0, lsl #6
		    case 'd': scani (word); break;
    1bb0:	61647473 	smcvs	18243	; 0x4743
    1bb4:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    1bb8:	00000300 	andeq	r0, r0, r0, lsl #6
    1bbc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1bc0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1bc4:	616d0000 	cmnvs	sp, r0
    1bc8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    1bcc:	00000400 	andeq	r0, r0, r0, lsl #8
    1bd0:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    1bd4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1bd8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1bdc:	75620000 	strbvc	r0, [r2, #-0]!
    1be0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1be4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1be8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1bec:	73000004 	movwvc	r0, #4
    1bf0:	6f697379 	svcvs	0x00697379
    1bf4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1bf8:	656b0000 	strbvs	r0, [fp, #-0]!
    1bfc:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1c00:	0100682e 	tsteq	r0, lr, lsr #16
    1c04:	623c0000 	eorsvs	r0, ip, #0
    1c08:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    1c0c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    1c10:	00000000 	andeq	r0, r0, r0
    1c14:	00260500 	eoreq	r0, r6, r0, lsl #10
    1c18:	0d3c0205 	lfmeq	f0, 4, [ip, #-20]!	; 0xffffffec
    1c1c:	c3030000 	movwgt	r0, #12288	; 0x3000
		    case 'u': scanu (word); break;
    1c20:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    1c24:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    1c28:	03062605 	movweq	r2, #26117	; 0x6605
    1c2c:	02050178 	andeq	r0, r5, #120, 2
    1c30:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    1c34:	02051f07 	andeq	r1, r5, #7, 30
    1c38:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
    1c3c:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1c40:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    1c44:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
    1c48:	2c060f05 	stccs	15, cr0, [r6], {5}
    1c4c:	01060305 	tsteq	r6, r5, lsl #6
    1c50:	2f060405 	svccs	0x00060405
    1c54:	01061605 	tsteq	r6, r5, lsl #12
    1c58:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    1c5c:	4b310605 	blmi	c43478 <__ccfg+0xc234d0>
    1c60:	7a030205 	bvc	c247c <__ccfg+0xa24d4>
    1c64:	06010501 	streq	r0, [r1], -r1, lsl #10
		    case 'x': scanx (word); break;
    1c68:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    1c6c:	01010003 	tsteq	r1, r3
    1c70:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    1c74:	000d7802 	andeq	r7, sp, r2, lsl #16
    1c78:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    1c7c:	03020501 	movweq	r0, #9473	; 0x2501
    1c80:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    1c84:	01060d05 	tsteq	r6, r5, lsl #26
    1c88:	70031f05 	andvc	r1, r3, r5, lsl #30
    1c8c:	030d0520 	movweq	r0, #54560	; 0xd520
    1c90:	1f052e10 	svcne	0x00052e10
    1c94:	02052006 	andeq	r2, r5, #6
    1c98:	03060106 	movweq	r0, #24838	; 0x6106
    1c9c:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
    1ca0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1ca4:	1f051f05 	svcne	0x00051f05
    1ca8:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1cac:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
    1cb0:	060f0521 	streq	r0, [pc], -r1, lsr #10
    1cb4:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
    1cb8:	0f052306 	svceq	0x00052306
    1cbc:	01050106 	tsteq	r5, r6, lsl #2
    1cc0:	06030524 	streq	r0, [r3], -r4, lsr #10
    1cc4:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    1cc8:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1ccc:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
    1cd0:	05213006 	streq	r3, [r1, #-6]!
    1cd4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    1cd8:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    1cdc:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
			switch (*fmt++) {
    1ce0:	0a050106 	beq	142100 <__ccfg+0x122158>
    1ce4:	1f053406 	svcne	0x00053406
    1ce8:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1cec:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1cf0:	10052f22 	andne	r2, r5, r2, lsr #30
    1cf4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		    	    case 'd': scani (lword); break;
    1cf8:	ac0b0306 	stcge	3, cr0, [fp], {6}
    1cfc:	01060705 	tsteq	r6, r5, lsl #14
    1d00:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
    1d04:	13060905 	movwne	r0, #26885	; 0x6905
    1d08:	01000702 	tsteq	r0, r2, lsl #14
    1d0c:	001c0501 	andseq	r0, ip, r1, lsl #10
    1d10:	0df80205 	lfmeq	f0, 2, [r8, #20]!
    1d14:	c6030000 	strgt	r0, [r3], -r0
    1d18:	02050108 	andeq	r0, r5, #8, 2
    1d1c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    1d20:	df03060d 	svcle	0x0003060d
    1d24:	0104017c 	tsteq	r4, ip, ror r1
    1d28:	03060f05 	movweq	r0, #28421	; 0x6f05
    1d2c:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    1d30:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    1d34:	da032405 	ble	cad50 <__ccfg+0xaada8>
    1d38:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    1d3c:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    1d40:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1d44:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    1d48:	052f0620 	streq	r0, [pc, #-1568]!	; 1730 <__inserial>
    1d4c:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    1d50:	01010005 	tsteq	r1, r5
		    	    case 'x': scanx (lword); break;
    1d54:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    1d58:	00000002 	andeq	r0, r0, r2
    1d5c:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    1d60:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1d64:	06270514 			; <UNDEFINED> instruction: 0x06270514
    1d68:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    1d6c:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
    1d70:	20062402 	andcs	r2, r6, r2, lsl #8
    1d74:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
    1d78:	01060605 	tsteq	r6, r5, lsl #12
    1d7c:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    1d80:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
    1d84:	01000502 	tsteq	r0, r2, lsl #10
    1d88:	001b0501 	andseq	r0, fp, r1, lsl #10
    1d8c:	0e100205 	cdpeq	2, 1, cr0, cr0, cr5, {0}
    1d90:	fa030000 	blx	c1d98 <__ccfg+0xa1df0>
    1d94:	02050100 	andeq	r0, r5, #0, 2
    1d98:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    1d9c:	2102051f 	tstcs	r2, pc, lsl r5
    1da0:	01000602 	tsteq	r0, r2, lsl #12
    1da4:	001e0501 	andseq	r0, lr, r1, lsl #10
    1da8:	00000205 	andeq	r0, r0, r5, lsl #4
    1dac:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    1db0:	02050100 	andeq	r0, r5, #0, 2
    1db4:	0e051416 	cfmvdlreq	mvd5, r1
    1db8:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    1dbc:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1dc0:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
		    	    case 'd': scani (lword); break;
    1dc4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1dc8:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1dcc:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1dd0:	1f052e06 	svcne	0x00052e06
    1dd4:	20051f06 	andcs	r1, r5, r6, lsl #30
    1dd8:	0e050106 	adfeqs	f0, f5, f6
    1ddc:	02052006 	andeq	r2, r5, #6
		    	    case 'u': scanu (lword); break;
    1de0:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1de4:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1de8:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    1dec:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1df0:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1df4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1df8:	02050021 	andeq	r0, r5, #33	; 0x21
    1dfc:	00000000 	andeq	r0, r0, r0
    1e00:	01018e03 	tsteq	r1, r3, lsl #28
    1e04:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    1e08:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1e0c:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    1e10:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
    1e14:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    1e18:	01061205 	tsteq	r6, r5, lsl #4
    1e1c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1e20:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1e24:	06054b03 	streq	r4, [r5], -r3, lsl #22
		    	    case 'x': scanx (lword); break;
    1e28:	1f050106 	svcne	0x00050106
    1e2c:	20052b06 	andcs	r2, r5, r6, lsl #22
			if ((c = *buf++) == '\0')
    1e30:	0e050106 	adfeqs	f0, f5, f6
    1e34:	02052006 	andeq	r2, r5, #6
			sap = va_arg (ap, char*);
    1e38:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
			nc++;
    1e3c:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
			break;
    1e40:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
			while (isspace (*buf)) buf++;
    1e44:	2f030501 	svccs	0x00030501
    1e48:	01061f05 	tsteq	r6, r5, lsl #30
    1e4c:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
						*sap++ = *buf++;
    1e50:	03052012 	movweq	r2, #20498	; 0x5012
    1e54:	06052f06 	streq	r2, [r5], -r6, lsl #30
			while (isspace (*buf)) buf++;
    1e58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e5c:	0b053206 	bleq	14e67c <__ccfg+0x12e6d4>
    1e60:	0601052e 	streq	r0, [r1], -lr, lsr #10
		return 0;
    1e64:	00070213 	andeq	r0, r7, r3, lsl r2
    1e68:	2a050101 	bcs	142274 <__ccfg+0x1222cc>
		    case 'x': scanx (word); break;
    1e6c:	00020500 	andeq	r0, r2, r0, lsl #10
    1e70:	03000000 	movweq	r0, #0
		    	    case 'x': scanx (lword); break;
    1e74:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
    1e78:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    1e7c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e80:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
    1e84:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e88:	0205002e 	andeq	r0, r5, #46	; 0x2e
    1e8c:	00000e20 	andeq	r0, r0, r0, lsr #28
    1e90:	0101ae03 	tsteq	r1, r3, lsl #28
    1e94:	02052006 	andeq	r2, r5, #6
    1e98:	200e0306 	andcs	r0, lr, r6, lsl #6
    1e9c:	01100313 	tsteq	r0, r3, lsl r3
    1ea0:	01060605 	tsteq	r6, r5, lsl #12
    1ea4:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    1ea8:	09030602 	stmdbeq	r3, {r1, r9, sl}
    1eac:	0606052e 	streq	r0, [r6], -lr, lsr #10
    1eb0:	58050501 	stmdapl	r5, {r0, r8, sl}
    1eb4:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    1eb8:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    1ebc:	0302052e 	movweq	r0, #9518	; 0x252e
    1ec0:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    1ec4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1ec8:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1ecc:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    1ed0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1ed4:	04052007 	streq	r2, [r5], #-7
    1ed8:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    1edc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1ee0:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    1ee4:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    1ee8:	0303053e 	movweq	r0, #13630	; 0x353e
    1eec:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    1ef0:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    1ef4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1ef8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1efc:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    1f00:	17030603 	strne	r0, [r3, -r3, lsl #12]
    1f04:	06070566 	streq	r0, [r7], -r6, ror #10
    1f08:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1f0c:	03060205 	movweq	r0, #25093	; 0x6205
    1f10:	0b053c16 	bleq	150f70 <__ccfg+0x130fc8>
    1f14:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1f18:	01054006 	tsteq	r5, r6
    1f1c:	010d0306 	tsteq	sp, r6, lsl #6
    1f20:	73030205 	movwvc	r0, #12805	; 0x3205
    1f24:	0301052e 	movweq	r0, #5422	; 0x152e
    1f28:	0a022e0d 	beq	8d764 <__ccfg+0x6d7bc>
    1f2c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1f30:	0205001b 	andeq	r0, r5, #27
    1f34:	00000eec 	andeq	r0, r0, ip, ror #29
    1f38:	0102d203 	tsteq	r2, r3, lsl #4
    1f3c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1f40:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    1f44:	4b062202 	blmi	18a754 <__ccfg+0x16a7ac>
    1f48:	01000502 	tsteq	r0, r2, lsl #10
    1f4c:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1f50:	0f000205 	svceq	0x00000205
    1f54:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    1f58:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1f5c:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    1f60:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    1f64:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    1f68:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    1f6c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1f70:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1f74:	06014c02 	streq	r4, [r1], -r2, lsl #24
    1f78:	20061f3d 	andcs	r1, r6, sp, lsr pc
    1f7c:	01051320 	tsteq	r5, r0, lsr #6
    1f80:	06022106 	streq	r2, [r2], -r6, lsl #2
    1f84:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1f88:	02050021 	andeq	r0, r5, #33	; 0x21
    1f8c:	00000f34 	andeq	r0, r0, r4, lsr pc
    1f90:	0102e503 	tsteq	r2, r3, lsl #10
    1f94:	13160205 	tstne	r6, #1342177280	; 0x50000000
    1f98:	06210514 			; <UNDEFINED> instruction: 0x06210514
    1f9c:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    1fa0:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
    1fa4:	21061305 	tstcs	r6, r5, lsl #6
    1fa8:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    1fac:	0f052013 	svceq	0x00052013
    1fb0:	03054a06 	movweq	r4, #23046	; 0x5a06
    1fb4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1fb8:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    1fbc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1fc0:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    1fc4:	01050d02 	tsteq	r5, r2, lsl #26
    1fc8:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    1fcc:	01000302 	tsteq	r0, r2, lsl #6
    1fd0:	002d0501 	eoreq	r0, sp, r1, lsl #10
    1fd4:	00000205 	andeq	r0, r0, r5, lsl #4
    1fd8:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1fdc:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1fe0:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    1fe4:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    1fe8:	02052001 	andeq	r2, r5, #1
    1fec:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    1ff0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1ff4:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    1ff8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1ffc:	01053c02 	tsteq	r5, r2, lsl #24
    2000:	06030533 			; <UNDEFINED> instruction: 0x06030533
    2004:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2008:	1f200501 	svcne	0x00200501
    200c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2010:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2014:	0102641f 	tsteq	r2, pc, lsl r4
    2018:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    201c:	02050026 	andeq	r0, r5, #38	; 0x26
    2020:	00000f68 	andeq	r0, r0, r8, ror #30
    2024:	01038703 	tsteq	r3, r3, lsl #14
    2028:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    202c:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    2030:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2034:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    2038:	03052806 	movweq	r2, #22534	; 0x5806
    203c:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    2040:	01060605 	tsteq	r6, r5, lsl #12
    2044:	30060405 	andcc	r0, r6, r5, lsl #8
    2048:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    204c:	06020517 			; <UNDEFINED> instruction: 0x06020517
    2050:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    2054:	01010004 	tsteq	r1, r4
    2058:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    205c:	000f8c02 	andeq	r8, pc, r2, lsl #24
    2060:	03990300 	orrseq	r0, r9, #0, 6
    2064:	16020501 	strne	r0, [r2], -r1, lsl #10
    2068:	0e062105 	adfeqs	f2, f6, f5
    206c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2070:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    2074:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    2078:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    207c:	20130520 	andscs	r0, r3, r0, lsr #10
    2080:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    2084:	59060105 	stmdbpl	r6, {r0, r2, r8}
    2088:	01000502 	tsteq	r0, r2, lsl #10
    208c:	00140501 	andseq	r0, r4, r1, lsl #10
    2090:	00000205 	andeq	r0, r0, r5, lsl #4
    2094:	a7030000 	strge	r0, [r3, -r0]
    2098:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    209c:	06010516 			; <UNDEFINED> instruction: 0x06010516
    20a0:	00040267 	andeq	r0, r4, r7, ror #4
    20a4:	18050101 	stmdane	r5, {r0, r8}
    20a8:	00020500 	andeq	r0, r2, r0, lsl #10
    20ac:	03000000 	movweq	r0, #0
    20b0:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    20b4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    20b8:	200e0618 	andcs	r0, lr, r8, lsl r6
    20bc:	06240205 	strteq	r0, [r4], -r5, lsl #4
    20c0:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    20c4:	06030501 	streq	r0, [r3], -r1, lsl #10
    20c8:	06050521 	streq	r0, [r5], -r1, lsr #10
    20cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    20d0:	06120535 			; <UNDEFINED> instruction: 0x06120535
    20d4:	59010501 	stmdbpl	r1, {r0, r8, sl}
    20d8:	03060305 	movweq	r0, #25349	; 0x6305
    20dc:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    20e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    20e4:	0b052e17 	bleq	14d948 <__ccfg+0x12d9a0>
    20e8:	0008023d 	andeq	r0, r8, sp, lsr r2
    20ec:	1d050101 	stfnes	f0, [r5, #-4]
    20f0:	00020500 	andeq	r0, r2, r0, lsl #10
    20f4:	03000000 	movweq	r0, #0
    20f8:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    20fc:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2100:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    2104:	03052405 	movweq	r2, #21509	; 0x5405
    2108:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    210c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2110:	01053206 	tsteq	r5, r6, lsl #4
    2114:	03051306 	movweq	r1, #21254	; 0x5306
    2118:	06022b06 	streq	r2, [r2], -r6, lsl #22
    211c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2120:	0205001d 	andeq	r0, r5, #29
    2124:	00000fc4 	andeq	r0, r0, r4, asr #31
    2128:	01049e03 	tsteq	r4, r3, lsl #28
    212c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2130:	01060505 	tsteq	r6, r5, lsl #10
    2134:	2f060305 	svccs	0x00060305
    2138:	01060a05 	tsteq	r6, r5, lsl #20
    213c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    2140:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2144:	06030525 	streq	r0, [r3], -r5, lsr #10
    2148:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    214c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2150:	0006023b 	andeq	r0, r6, fp, lsr r2
    2154:	1d050101 	stfnes	f0, [r5, #-4]
    2158:	00020500 	andeq	r0, r2, r0, lsl #10
    215c:	03000000 	movweq	r0, #0
    2160:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    2164:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2168:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    216c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2170:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    2174:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    2178:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    217c:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    2180:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2184:	06051f02 	streq	r1, [r5], -r2, lsl #30
    2188:	06040521 	streq	r0, [r4], -r1, lsr #10
    218c:	06050521 	streq	r0, [r5], -r1, lsr #10
    2190:	06020501 	streq	r0, [r2], -r1, lsl #10
    2194:	0004023a 	andeq	r0, r4, sl, lsr r2
    2198:	21050101 	tstcs	r5, r1, lsl #2
    219c:	e8020500 	stmda	r2, {r8, sl}
    21a0:	0300000f 	movweq	r0, #15
    21a4:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    21a8:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    21ac:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    21b0:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    21b4:	02052006 	andeq	r2, r5, #6
    21b8:	01050106 	tsteq	r5, r6, lsl #2
    21bc:	06220531 			; <UNDEFINED> instruction: 0x06220531
    21c0:	011e051d 	tsteq	lr, sp, lsl r5
    21c4:	01061f05 	tsteq	r6, r5, lsl #30
    21c8:	01000202 	tsteq	r0, r2, lsl #4
    21cc:	002b0501 	eoreq	r0, fp, r1, lsl #10
    21d0:	00000205 	andeq	r0, r0, r5, lsl #4
    21d4:	c1030000 	mrsgt	r0, (UNDEF: 3)
    21d8:	02050104 	andeq	r0, r5, #4, 2
    21dc:	20200514 	eorcs	r0, r0, r4, lsl r5
    21e0:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    21e4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    21e8:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    21ec:	2f01052e 	svccs	0x0001052e
    21f0:	01000102 	tsteq	r0, r2, lsl #2
    21f4:	00330501 	eorseq	r0, r3, r1, lsl #10
    21f8:	00000205 	andeq	r0, r0, r5, lsl #4
    21fc:	c6030000 	strgt	r0, [r3], -r0
    2200:	02050104 	andeq	r0, r5, #4, 2
    2204:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2208:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    220c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2210:	11052f01 	tstne	r5, r1, lsl #30
    2214:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
    2218:	2f060305 	svccs	0x00060305
    221c:	01060805 	tsteq	r6, r5, lsl #16
    2220:	01000302 	tsteq	r0, r2, lsl #6
    2224:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2228:	00000205 	andeq	r0, r0, r5, lsl #4
    222c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    2230:	02050104 	andeq	r0, r5, #4, 2
    2234:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2238:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    223c:	01010002 	tsteq	r1, r2
    2240:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2244:	00000002 	andeq	r0, r0, r2
    2248:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    224c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2250:	01000302 	tsteq	r0, r2, lsl #6
    2254:	00370501 	eorseq	r0, r7, r1, lsl #10
    2258:	0ff60205 	svceq	0x00f60205
    225c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2260:	02050104 	andeq	r0, r5, #4, 2
    2264:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2268:	30060105 	andcc	r0, r6, r5, lsl #2
    226c:	1f060305 	svcne	0x00060305
    2270:	01060d05 	tsteq	r6, r5, lsl #26
    2274:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    2278:	01010003 	tsteq	r1, r3
    227c:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2280:	00000002 	andeq	r0, r0, r2
    2284:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    2288:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    228c:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2290:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2294:	051f0603 	ldreq	r0, [pc, #-1539]	; 1c99 <vscan+0x1ad>
    2298:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    229c:	01010003 	tsteq	r1, r3
    22a0:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    22a4:	00100c02 	andseq	r0, r0, r2, lsl #24
    22a8:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    22ac:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22b0:	10062b05 	andne	r2, r6, r5, lsl #22
    22b4:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    22b8:	06210603 	strteq	r0, [r1], -r3, lsl #12
    22bc:	06020531 			; <UNDEFINED> instruction: 0x06020531
    22c0:	060c052d 	streq	r0, [ip], -sp, lsr #10
    22c4:	20050501 	andcs	r0, r5, r1, lsl #10
    22c8:	2f060305 	svccs	0x00060305
    22cc:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    22d0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    22d4:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    22d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    22dc:	02050045 	andeq	r0, r5, #69	; 0x45
    22e0:	00001030 	andeq	r1, r0, r0, lsr r0
    22e4:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    22e8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    22ec:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
    22f0:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
    22f4:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    22f8:	03054a19 	movweq	r4, #23065	; 0x5a19
    22fc:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    2300:	0605054c 	streq	r0, [r5], -ip, asr #10
    2304:	06020501 	streq	r0, [r2], -r1, lsl #10
    2308:	060f0540 	streq	r0, [pc], -r0, asr #10
    230c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2310:	0605054c 	streq	r0, [r5], -ip, asr #10
    2314:	06020501 	streq	r0, [r2], -r1, lsl #10
    2318:	06050531 			; <UNDEFINED> instruction: 0x06050531
    231c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2320:	0606054f 	streq	r0, [r6], -pc, asr #10
    2324:	06030501 	streq	r0, [r3], -r1, lsl #10
    2328:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
    232c:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    2330:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2334:	01060505 	tsteq	r6, r5, lsl #10
    2338:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    233c:	01060605 	tsteq	r6, r5, lsl #12
    2340:	4b060405 	blmi	18335c <__ccfg+0x1633b4>
    2344:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2348:	06030501 	streq	r0, [r3], -r1, lsl #10
    234c:	060a0569 	streq	r0, [sl], -r9, ror #10
    2350:	06030501 	streq	r0, [r3], -r1, lsl #10
    2354:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2358:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    235c:	20290301 	eorcs	r0, r9, r1, lsl #6
    2360:	03060205 	movweq	r0, #25093	; 0x6205
    2364:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2368:	03050106 	movweq	r0, #20742	; 0x5106
    236c:	02752f06 	rsbseq	r2, r5, #6, 30
    2370:	01010005 	tsteq	r1, r5
    2374:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    2378:	0010cc02 	andseq	ip, r0, r2, lsl #24
    237c:	05ef0300 	strbeq	r0, [pc, #768]!	; 2684 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    2380:	17020501 	strne	r0, [r2, -r1, lsl #10]
    2384:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    2388:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    238c:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    2390:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    2394:	580c0520 	stmdapl	ip, {r5, r8, sl}
    2398:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    239c:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    23a0:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    23a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23a8:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    23ac:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    23b0:	2016052b 	andscs	r0, r6, fp, lsr #10
    23b4:	21060205 	tstcs	r6, r5, lsl #4
    23b8:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    23bc:	31060205 	tstcc	r6, r5, lsl #4
    23c0:	01061a05 	tsteq	r6, r5, lsl #20
    23c4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    23c8:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    23cc:	01000d02 	tsteq	r0, r2, lsl #26
    23d0:	001c0501 	andseq	r0, ip, r1, lsl #10
    23d4:	111c0205 	tstne	ip, r5, lsl #4
    23d8:	fb030000 	blx	c23e2 <__ccfg+0xa243a>
    23dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23e0:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    23e4:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    23e8:	03050501 	movweq	r0, #21761	; 0x5501
    23ec:	0205200c 	andeq	r2, r5, #12
    23f0:	07052506 	streq	r2, [r5, -r6, lsl #10]
    23f4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    23f8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    23fc:	11054c2f 	tstne	r5, pc, lsr #24
    2400:	0f051606 	svceq	0x00051606
    2404:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    2408:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    240c:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2410:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2414:	30300602 	eorscc	r0, r0, r2, lsl #12
    2418:	01061505 	tsteq	r6, r5, lsl #10
    241c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2420:	2f2f0603 	svccs	0x002f0603
    2424:	01061a05 	tsteq	r6, r5, lsl #20
    2428:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    242c:	01010008 	tsteq	r1, r8
    2430:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    2434:	00116402 	andseq	r6, r1, r2, lsl #8
    2438:	03d80300 	bicseq	r0, r8, #0, 6
    243c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2440:	06170514 			; <UNDEFINED> instruction: 0x06170514
    2444:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2448:	03052605 	movweq	r2, #22021	; 0x5605
    244c:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2450:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2454:	06020520 	streq	r0, [r2], -r0, lsr #10
    2458:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
    245c:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    2460:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
    2464:	0305200f 	movweq	r2, #20495	; 0x500f
    2468:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    246c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2470:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2474:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2478:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    247c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2480:	3d230604 	stccc	6, cr0, [r3, #-16]!
    2484:	060a052f 	streq	r0, [sl], -pc, lsr #10
    2488:	20070501 	andcs	r0, r7, r1, lsl #10
    248c:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    2490:	060d052a 	streq	r0, [sp], -sl, lsr #10
    2494:	03010501 	movweq	r0, #5377	; 0x1501
    2498:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    249c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24a0:	0205001c 	andeq	r0, r5, #28
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    24ac:	13160205 	tstne	r6, #1342177280	; 0x50000000
    24b0:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    24b4:	7703061c 	smladvc	r3, ip, r6, r0
    24b8:	36040501 	strcc	r0, [r4], -r1, lsl #10
    24bc:	051f0605 	ldreq	r0, [pc, #-1541]	; 1ebf <NOROM_AONRTCCurrent64BitValueGet+0x13>
    24c0:	1c052209 	sfmne	f2, 4, [r5], {9}
    24c4:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    24c8:	2010030a 	andscs	r0, r0, sl, lsl #6
    24cc:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    24d0:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    24d4:	06020520 	streq	r0, [r2], -r0, lsr #10
    24d8:	11030601 	tstne	r3, r1, lsl #12
    24dc:	06050520 	streq	r0, [r5], -r0, lsr #10
    24e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    24e4:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    24e8:	01060605 	tsteq	r6, r5, lsl #12
    24ec:	59060405 	stmdbpl	r6, {r0, r2, sl}
    24f0:	06070513 			; <UNDEFINED> instruction: 0x06070513
    24f4:	06050501 	streq	r0, [r5], -r1, lsl #10
    24f8:	060b0521 	streq	r0, [fp], -r1, lsr #10
    24fc:	06040501 	streq	r0, [r4], -r1, lsl #10
    2500:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2504:	2f090501 	svccs	0x00090501
    2508:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    250c:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    2510:	060d0545 	streq	r0, [sp], -r5, asr #10
    2514:	03010501 	movweq	r0, #5377	; 0x1501
    2518:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    251c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2520:	02050020 	andeq	r0, r5, #32
    2524:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
    2528:	0107a203 	tsteq	r7, r3, lsl #4
    252c:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    2530:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2534:	06030501 	streq	r0, [r3], -r1, lsl #10
    2538:	06090525 	streq	r0, [r9], -r5, lsr #10
    253c:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
    2540:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
    2544:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    2548:	2070031a 	rsbscs	r0, r0, sl, lsl r3
    254c:	10030d05 	andne	r0, r3, r5, lsl #26
    2550:	2306052e 	movwcs	r0, #25902	; 0x652e
    2554:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2558:	06020520 	streq	r0, [r2], -r0, lsr #10
    255c:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
    2560:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
    2564:	06010602 	streq	r0, [r1], -r2, lsl #12
    2568:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    256c:	01190303 	tsteq	r9, r3, lsl #6
    2570:	01061605 	tsteq	r6, r5, lsl #12
    2574:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2578:	052f0604 	streq	r0, [pc, #-1540]!	; 1f7c <TrimAfterColdResetWakeupFromShutDown+0xa8>
    257c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2580:	0d030603 	stceq	6, cr0, [r3, #-12]
    2584:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2588:	06020501 	streq	r0, [r2], -r1, lsl #10
    258c:	06090540 	streq	r0, [r9], -r0, asr #10
    2590:	06030501 	streq	r0, [r3], -r1, lsl #10
    2594:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    2598:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    259c:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    25a0:	06054c03 	streq	r4, [r5], -r3, lsl #24
    25a4:	2e050106 	adfcss	f0, f5, f6
    25a8:	4a7a0306 	bmi	1e831c8 <__ccfg+0x1e63220>
    25ac:	13060905 	movwne	r0, #26885	; 0x6905
    25b0:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
    25b4:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    25b8:	01060e05 	tsteq	r6, r5, lsl #28
    25bc:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    25c0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    25c4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    25c8:	052f0604 	streq	r0, [pc, #-1540]!	; 1fcc <NOROM_SetupTrimDevice+0x24>
    25cc:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    25d0:	04052007 	streq	r2, [r5], #-7
    25d4:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    25d8:	10050106 	andne	r0, r5, r6, lsl #2
    25dc:	06040520 	streq	r0, [r4], -r0, lsr #10
    25e0:	2e090530 	cfmv64hrcs	mvdx9, r0
    25e4:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    25e8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    25ec:	1a053012 	bne	14e63c <__ccfg+0x12e694>
    25f0:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    25f4:	06150522 	ldreq	r0, [r5], -r2, lsr #10
    25f8:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    25fc:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2600:	01060e05 	tsteq	r6, r5, lsl #28
    2604:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2608:	12052906 	andne	r2, r5, #98304	; 0x18000
    260c:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    2610:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2614:	01061305 	tsteq	r6, r5, lsl #6
    2618:	31060305 	tstcc	r6, r5, lsl #6
    261c:	03060105 	movweq	r0, #24837	; 0x6105
    2620:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2624:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2628:	0205002c 	andeq	r0, r5, #44	; 0x2c
    262c:	0000125c 	andeq	r1, r0, ip, asr r2
    2630:	0102ab03 	tsteq	r2, r3, lsl #22
    2634:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2638:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    263c:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    2640:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
    2644:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
    2648:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    264c:	060a0523 	streq	r0, [sl], -r3, lsr #10
    2650:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2654:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2658:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    265c:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    2660:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2664:	13140305 	tstne	r4, #335544320	; 0x14000000
    2668:	01060605 	tsteq	r6, r5, lsl #12
    266c:	21060405 	tstcs	r6, r5, lsl #8
    2670:	01060a05 	tsteq	r6, r5, lsl #20
    2674:	0f030105 	svceq	0x00030105
    2678:	060b0520 	streq	r0, [fp], -r0, lsr #10
    267c:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    2680:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    2684:	2f062004 	svccs	0x00062004
    2688:	01060c05 	tsteq	r6, r5, lsl #24
    268c:	03060205 	movweq	r0, #25093	; 0x6205
    2690:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    2694:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    2698:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    269c:	02050020 	andeq	r0, r5, #32
    26a0:	00001290 	muleq	r0, r0, r2
    26a4:	01088103 	tsteq	r8, r3, lsl #2
    26a8:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26ac:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    26b0:	03200501 			; <UNDEFINED> instruction: 0x03200501
    26b4:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
    26b8:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    26bc:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    26c0:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    26c4:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    26c8:	06020501 	streq	r0, [r2], -r1, lsl #10
    26cc:	0004023e 	andeq	r0, r4, lr, lsr r2
    26d0:	21050101 	tstcs	r5, r1, lsl #2
    26d4:	00020500 	andeq	r0, r2, r0, lsl #10
    26d8:	03000000 	movweq	r0, #0
    26dc:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    26e0:	01090302 	tsteq	r9, r2, lsl #6
    26e4:	03062105 	movweq	r2, #24837	; 0x6105
    26e8:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    26ec:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    26f0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    26f4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    26f8:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    26fc:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
    2700:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    2704:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
    2708:	09051402 	stmdbeq	r5, {r1, sl, ip}
    270c:	01050106 	tsteq	r5, r6, lsl #2
    2710:	0006025a 	andeq	r0, r6, sl, asr r2
    2714:	20050101 	andcs	r0, r5, r1, lsl #2
    2718:	00020500 	andeq	r0, r2, r0, lsl #10
    271c:	03000000 	movweq	r0, #0
    2720:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2724:	01090302 	tsteq	r9, r2, lsl #6
    2728:	20051413 	andcs	r1, r5, r3, lsl r4
    272c:	01740306 	cmneq	r4, r6, lsl #6
    2730:	0c031d05 	stceq	13, cr1, [r3], {5}
    2734:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
    2738:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    273c:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    2740:	06010602 	streq	r0, [r1], -r2, lsl #12
    2744:	06050524 	streq	r0, [r5], -r4, lsr #10
    2748:	0603052e 	streq	r0, [r3], -lr, lsr #10
    274c:	06070521 	streq	r0, [r7], -r1, lsr #10
    2750:	06020501 	streq	r0, [r2], -r1, lsl #10
    2754:	0609054c 	streq	r0, [r9], -ip, asr #10
    2758:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    275c:	03060305 	movweq	r0, #25349	; 0x6305
    2760:	23052e79 	movwcs	r2, #24185	; 0x5e79
    2764:	06052d06 	streq	r2, [r5], -r6, lsl #26
    2768:	0e054a06 	vmlaeq.f32	s8, s10, s12
    276c:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    2770:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2774:	02050023 	andeq	r0, r5, #35	; 0x23
    2778:	000012a8 	andeq	r1, r0, r8, lsr #5
    277c:	01098103 	tsteq	r9, r3, lsl #2
    2780:	13410205 	movtne	r0, #4613	; 0x1205
    2784:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2788:	03062305 	movweq	r2, #25349	; 0x6305
    278c:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    2790:	1f3c0c03 	svcne	0x003c0c03
    2794:	01012106 	tsteq	r1, r6, lsl #2
    2798:	03060805 	movweq	r0, #26629	; 0x6805
    279c:	02052028 	andeq	r2, r5, #40	; 0x28
    27a0:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    27a4:	2023031c 	eorcs	r0, r3, ip, lsl r3
    27a8:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    27ac:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    27b0:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    27b4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    27b8:	02052008 	andeq	r2, r5, #8
    27bc:	00c70306 	sbceq	r0, r7, r6, lsl #6
    27c0:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    27c4:	060d0502 	streq	r0, [sp], -r2, lsl #10
    27c8:	017bcf03 	cmneq	fp, r3, lsl #30
    27cc:	0f050104 	svceq	0x00050104
    27d0:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    27d4:	01020520 	tsteq	r2, r0, lsr #10
    27d8:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    27dc:	017bca03 	cmneq	fp, r3, lsl #20
    27e0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    27e4:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    27e8:	03020501 	movweq	r0, #9473	; 0x2501
    27ec:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    27f0:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    27f4:	13060105 	movwne	r0, #24837	; 0x6105
    27f8:	03060305 	movweq	r0, #25349	; 0x6305
    27fc:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    2800:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2804:	134b0604 	movtne	r0, #46596	; 0xb604
    2808:	20060705 	andcs	r0, r6, r5, lsl #14
    280c:	4b060505 	blmi	183c28 <__ccfg+0x163c80>
    2810:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2814:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2818:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    281c:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2820:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2824:	0f060805 	svceq	0x00060805
    2828:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    282c:	31030505 	tstcc	r3, r5, lsl #10
    2830:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    2834:	4a4e0306 	bmi	1383454 <__ccfg+0x13634ac>
    2838:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    283c:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    2840:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2844:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    2848:	11060b05 	tstne	r6, r5, lsl #22
    284c:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    2850:	0b052f06 	bleq	14e470 <__ccfg+0x12e4c8>
    2854:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    2858:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    285c:	03010608 	movweq	r0, #5640	; 0x1608
    2860:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    2864:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2868:	06150513 			; <UNDEFINED> instruction: 0x06150513
    286c:	200e0501 	andcs	r0, lr, r1, lsl #10
    2870:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2874:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 2864 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x20>
    2878:	01060905 	tsteq	r6, r5, lsl #18
    287c:	21060705 	tstcs	r6, r5, lsl #14
    2880:	01060b05 	tsteq	r6, r5, lsl #22
    2884:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    2888:	01060a05 	tsteq	r6, r5, lsl #20
    288c:	23060505 	movwcs	r0, #25861	; 0x6505
    2890:	01061c05 	tsteq	r6, r5, lsl #24
    2894:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    2898:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    289c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    28a0:	06052e08 	streq	r2, [r5], -r8, lsl #28
    28a4:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    28a8:	0c050106 	stfeqs	f0, [r5], {6}
    28ac:	06060520 	streq	r0, [r6], -r0, lsr #10
    28b0:	0608052f 	streq	r0, [r8], -pc, lsr #10
    28b4:	060b0501 	streq	r0, [fp], -r1, lsl #10
    28b8:	0608052a 	streq	r0, [r8], -sl, lsr #10
    28bc:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    28c0:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    28c4:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    28c8:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    28cc:	051f0805 	ldreq	r0, [pc, #-2053]	; 20cf <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x7>
    28d0:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    28d4:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    28d8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    28dc:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    28e0:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    28e4:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    28e8:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    28ec:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    28f0:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    28f4:	06080520 	streq	r0, [r8], -r0, lsr #10
    28f8:	06060501 	streq	r0, [r6], -r1, lsl #10
    28fc:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    2900:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    2904:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
    2908:	03060505 	movweq	r0, #25861	; 0x6505
    290c:	0605206e 	streq	r2, [r5], -lr, rrx
    2910:	2f201703 	svccs	0x00201703
    2914:	01060705 	tsteq	r6, r5, lsl #14
    2918:	1e060b05 	vmlane.f64	d0, d6, d5
    291c:	01060c05 	tsteq	r6, r5, lsl #24
    2920:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2924:	0c030604 	stceq	6, cr0, [r3], {4}
    2928:	000b023c 	andeq	r0, fp, ip, lsr r2
    292c:	0f050101 	svceq	0x00050101
    2930:	00020500 	andeq	r0, r2, r0, lsl #10
    2934:	03000000 	movweq	r0, #0
    2938:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    293c:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    2940:	18050106 	stmdane	r5, {r1, r2, r8}
    2944:	2025052e 	eorcs	r0, r5, lr, lsr #10
    2948:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    294c:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    2950:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2954:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
    2958:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    295c:	b7010100 	strlt	r0, [r1, -r0, lsl #2]
    2960:	0300000c 	movweq	r0, #12
    2964:	0001a100 	andeq	sl, r1, r0, lsl #2
    2968:	fb010200 	blx	43172 <__ccfg+0x231ca>
    296c:	01000d0e 	tsteq	r0, lr, lsl #26
    2970:	00010101 	andeq	r0, r1, r1, lsl #2
    2974:	00010000 	andeq	r0, r1, r0
    2978:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    297c:	2f656d6f 	svccs	0x00656d6f
    2980:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2984:	442f6e69 	strtmi	r6, [pc], #-3689	; 298c <AuxAdiDdiSafeWrite.constprop.1>
    2988:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    298c:	4f2f706f 	svcmi	0x002f706f
    2990:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2994:	502f5445 	eorpl	r5, pc, r5, asr #8
    2998:	534f4349 	movtpl	r4, #62281	; 0xf349
    299c:	6369502f 	cmnvs	r9, #47	; 0x2f
    29a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    29a4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    29a8:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    29ac:	2f004974 	svccs	0x00004974
    29b0:	2f727375 	svccs	0x00727375
    29b4:	2f62696c 	svccs	0x0062696c
    29b8:	2f636367 	svccs	0x00636367
    29bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    29c0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    29c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    29c8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    29cc:	2f312e32 	svccs	0x00312e32
    29d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    29d4:	00656475 	rsbeq	r6, r5, r5, ror r4
    29d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2924 <NOROM_ChipInfo_GetHwRevision+0x1c>
    29dc:	616d2f65 	cmnvs	sp, r5, ror #30
    29e0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    29e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    29e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    29ec:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    29f0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    29f4:	4349502f 	movtmi	r5, #36911	; 0x902f
    29f8:	502f534f 	eorpl	r5, pc, pc, asr #6
    29fc:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a00:	3143432f 	cmpcc	r3, pc, lsr #6
    2a04:	00585833 	subseq	r5, r8, r3, lsr r8
    2a08:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2954 <NOROM_ChipInfo_GetHwRevision+0x4c>
    2a0c:	616d2f65 	cmnvs	sp, r5, ror #30
    2a10:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a14:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a18:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a1c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a20:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a24:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a28:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a2c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a30:	6f682f00 	svcvs	0x00682f00
    2a34:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2888 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x44>
    2a38:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2a3c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2a40:	6f746b73 	svcvs	0x00746b73
    2a44:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2a48:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2a4c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a50:	2f534f43 	svccs	0x00534f43
    2a54:	4f636950 	svcmi	0x00636950
    2a58:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    2a5c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2a60:	63740000 	cmnvs	r4, #0
    2a64:	00632e76 	rsbeq	r2, r3, r6, ror lr
    2a68:	73000001 	movwvc	r0, #1
    2a6c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2a70:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2a74:	73000002 	movwvc	r0, #2
    2a78:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2a7c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2a80:	61000002 	tstvs	r0, r2
    2a84:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    2a88:	00030068 	andeq	r0, r3, r8, rrx
    2a8c:	63616d00 	cmnvs	r1, #0, 26
    2a90:	00682e68 	rsbeq	r2, r8, r8, ror #28
    2a94:	70000003 	andvc	r0, r0, r3
    2a98:	5f736e69 	svcpl	0x00736e69
    2a9c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2aa0:	00030068 	andeq	r0, r3, r8, rrx
    2aa4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    2aa8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    2aac:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2ab0:	0300682e 	movweq	r6, #2094	; 0x82e
    2ab4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    2ab8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    2abc:	00040068 	andeq	r0, r4, r8, rrx
    2ac0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2ac4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2ac8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2acc:	6b000001 	blvs	2ad8 <NOROM_OSCClockSourceGet+0xc0>
    2ad0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2ad4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    2ad8:	74000005 	strvc	r0, [r0], #-5
    2adc:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    2ae0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2ae4:	00000100 	andeq	r0, r0, r0, lsl #2
    2ae8:	5f766374 	svcpl	0x00766374
    2aec:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    2af0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2af4:	00682e61 	rsbeq	r2, r8, r1, ror #28
    2af8:	3c000001 	stccc	0, cr0, [r0], {1}
    2afc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2b00:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    2b04:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b08:	31050000 	mrscc	r0, (UNDEF: 5)
    2b0c:	00020500 	andeq	r0, r2, r0, lsl #10
    2b10:	03000000 	movweq	r0, #0
    2b14:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    2b18:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    2b1c:	03063105 	movweq	r3, #24837	; 0x6105
    2b20:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    2b24:	16052607 	strne	r2, [r5], -r7, lsl #12
    2b28:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    2b2c:	26060205 	strcs	r0, [r6], -r5, lsl #4
    2b30:	13061a05 	movwne	r1, #27141	; 0x6a05
    2b34:	051f0e05 	ldreq	r0, [pc, #-3589]	; 1d37 <vscan+0x24b>
    2b38:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2b3c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2b40:	0c030602 	stceq	6, cr0, [r3], {2}
    2b44:	06010520 	streq	r0, [r1], -r0, lsr #10
    2b48:	00010216 	andeq	r0, r1, r6, lsl r2
    2b4c:	2e050101 	adfcss	f0, f5, f1
    2b50:	00020500 	andeq	r0, r2, r0, lsl #10
    2b54:	03000000 	movweq	r0, #0
    2b58:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    2b5c:	06051602 	streq	r1, [r5], -r2, lsl #12
    2b60:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2b64:	06030520 	streq	r0, [r3], -r0, lsr #10
    2b68:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    2b6c:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    2b70:	21060305 	tstcs	r6, r5, lsl #6
    2b74:	01062905 	tsteq	r6, r5, lsl #18
    2b78:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    2b7c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b80:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2b84:	01024c01 	tsteq	r2, r1, lsl #24
    2b88:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b8c:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2b90:	00000000 	andeq	r0, r0, r0
    2b94:	01028303 	tsteq	r2, r3, lsl #6
    2b98:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2b9c:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    2ba0:	2f062402 	svccs	0x00062402
    2ba4:	01130101 	tsteq	r3, r1, lsl #2
    2ba8:	01051401 	tsteq	r5, r1, lsl #8
    2bac:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    2bb0:	0002022d 	andeq	r0, r2, sp, lsr #4
    2bb4:	3a050101 	bcc	142fc0 <__ccfg+0x123018>
    2bb8:	00020500 	andeq	r0, r2, r0, lsl #10
    2bbc:	03000000 	movweq	r0, #0
    2bc0:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    2bc4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    2bc8:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    2bcc:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    2bd0:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    2bd4:	20062402 	andcs	r2, r6, r2, lsl #8
    2bd8:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    2bdc:	03050106 	movweq	r0, #20742	; 0x5106
    2be0:	02053d06 	andeq	r3, r5, #384	; 0x180
    2be4:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2be8:	20050501 	andcs	r0, r5, r1, lsl #10
    2bec:	30060305 	andcc	r0, r6, r5, lsl #6
    2bf0:	01061705 	tsteq	r6, r5, lsl #14
    2bf4:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    2bf8:	052f0603 	streq	r0, [pc, #-1539]!	; 25fd <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x129>
    2bfc:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2c00:	03052011 	movweq	r2, #20497	; 0x5011
    2c04:	0b052106 	bleq	14b024 <__ccfg+0x12b07c>
    2c08:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c0c:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    2c10:	01050106 	tsteq	r5, r6, lsl #2
    2c14:	0603054b 	streq	r0, [r3], -fp, asr #10
    2c18:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    2c1c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    2c20:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c24:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2c28:	03052014 	movweq	r2, #20500	; 0x5014
    2c2c:	11052106 	tstne	r5, r6, lsl #2
    2c30:	03050106 	movweq	r0, #20742	; 0x5106
    2c34:	0b052106 	bleq	14b054 <__ccfg+0x12b0ac>
    2c38:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    2c3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c40:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	0101df03 	tsteq	r1, r3, lsl #30
    2c4c:	02052006 	andeq	r2, r5, #6
    2c50:	20090306 	andcs	r0, r9, r6, lsl #6
    2c54:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
    2c58:	01061b05 	tsteq	r6, r5, lsl #22
    2c5c:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2c60:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2c64:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2c68:	133c7903 	teqne	ip, #49152	; 0xc000
    2c6c:	03060105 	movweq	r0, #24837	; 0x6105
    2c70:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    2c74:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    2c78:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    2c7c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2c80:	2e90014c 	fmlcssm	f0, f0, #4.0
    2c84:	01055b13 	tsteq	r5, r3, lsl fp
    2c88:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    2c8c:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    2c90:	0c023601 	stceq	6, cr3, [r2], {1}
    2c94:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c98:	02050031 	andeq	r0, r5, #49	; 0x31
    2c9c:	00000000 	andeq	r0, r0, r0
    2ca0:	0102ba03 	tsteq	r2, r3, lsl #20
    2ca4:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    2ca8:	03063105 	movweq	r3, #24837	; 0x6105
    2cac:	06050178 			; <UNDEFINED> instruction: 0x06050178
    2cb0:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2cb4:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    2cb8:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    2cbc:	03050106 	movweq	r0, #20742	; 0x5106
    2cc0:	06012f06 	streq	r2, [r1], -r6, lsl #30
    2cc4:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    2cc8:	133b0621 	teqne	fp, #34603008	; 0x2100000
    2ccc:	4a660601 	bmi	19844d8 <__ccfg+0x1964530>
    2cd0:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2cd4:	03060105 	movweq	r0, #24837	; 0x6105
    2cd8:	03053c09 	movweq	r3, #23561	; 0x5c09
    2cdc:	062e7703 	strteq	r7, [lr], -r3, lsl #14
    2ce0:	06010536 			; <UNDEFINED> instruction: 0x06010536
    2ce4:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
    2ce8:	01000b02 	tsteq	r0, r2, lsl #22
    2cec:	004a0501 	subeq	r0, sl, r1, lsl #10
    2cf0:	00000205 	andeq	r0, r0, r5, lsl #4
    2cf4:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2cf8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2cfc:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    2d00:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    2d04:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    2d08:	0b030505 	bleq	c4124 <__ccfg+0xa417c>
    2d0c:	034a053c 	movteq	r0, #42300	; 0xa53c
    2d10:	02052075 	andeq	r2, r5, #117	; 0x75
    2d14:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
    2d18:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2d1c:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    2d20:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    2d24:	053c3005 	ldreq	r3, [ip, #-5]!
    2d28:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    2d2c:	03054b06 	movweq	r4, #23302	; 0x5b06
    2d30:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    2d34:	03060205 	movweq	r0, #25093	; 0x6205
    2d38:	13132e6e 	tstne	r3, #1760	; 0x6e0
    2d3c:	06120517 			; <UNDEFINED> instruction: 0x06120517
    2d40:	06020501 	streq	r0, [r2], -r1, lsl #10
    2d44:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
    2d48:	20060a05 	andcs	r0, r6, r5, lsl #20
    2d4c:	2f060305 	svccs	0x00060305
    2d50:	01061305 	tsteq	r6, r5, lsl #6
    2d54:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2d58:	051f0622 	ldreq	r0, [pc, #-1570]	; 273e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x11a>
    2d5c:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    2d60:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    2d64:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    2d68:	0105330a 	tsteq	r5, sl, lsl #6
    2d6c:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    2d70:	73030602 	movwvc	r0, #13826	; 0x3602
    2d74:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    2d78:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    2d7c:	2f060205 	svccs	0x00060205
    2d80:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    2d84:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    2d88:	0114132f 	tsteq	r4, pc, lsr #6
    2d8c:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    2d90:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2d94:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    2d98:	13053206 	movwne	r3, #20998	; 0x5206
    2d9c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2da0:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2da4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2da8:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    2dac:	06130515 			; <UNDEFINED> instruction: 0x06130515
    2db0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2db4:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    2db8:	06030501 	streq	r0, [r3], -r1, lsl #10
    2dbc:	0010023d 	andseq	r0, r0, sp, lsr r2
    2dc0:	3a050101 	bcc	1431cc <__ccfg+0x123224>
    2dc4:	00020500 	andeq	r0, r2, r0, lsl #10
    2dc8:	03000000 	movweq	r0, #0
    2dcc:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    2dd0:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2dd4:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    2dd8:	0205201b 	andeq	r2, r5, #27
    2ddc:	4a062025 	bmi	18ae78 <__ccfg+0x16aed0>
    2de0:	03062706 	movweq	r2, #26374	; 0x6706
    2de4:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    2de8:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    2dec:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2df0:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2df4:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2df8:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    2dfc:	13410603 	movtne	r0, #5635	; 0x1603
    2e00:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    2e04:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2e08:	02052008 	andeq	r2, r5, #8
    2e0c:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    2e10:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2e14:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2e18:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    2e1c:	0101000b 	tsteq	r1, fp
    2e20:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    2e24:	00000002 	andeq	r0, r0, r2
    2e28:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    2e2c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2e30:	01060505 	tsteq	r6, r5, lsl #10
    2e34:	052f0f05 	streq	r0, [pc, #-3845]!	; 1f37 <TrimAfterColdResetWakeupFromShutDown+0x63>
    2e38:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    2e3c:	06020521 	streq	r0, [r2], -r1, lsr #10
    2e40:	06100531 			; <UNDEFINED> instruction: 0x06100531
    2e44:	06020501 	streq	r0, [r2], -r1, lsl #10
    2e48:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2e4c:	2b0a0501 	blcs	284258 <__ccfg+0x2642b0>
    2e50:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    2e54:	01010004 	tsteq	r1, r4
    2e58:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    2e5c:	00000002 	andeq	r0, r0, r2
    2e60:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    2e64:	19020501 	stmdbne	r2, {r0, r8, sl}
    2e68:	01141313 	tsteq	r4, r3, lsl r3
    2e6c:	03063c05 	movweq	r3, #27653	; 0x6c05
    2e70:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    2e74:	200b0302 	andcs	r0, fp, r2, lsl #6
    2e78:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2e7c:	06201303 	strteq	r1, [r0], -r3, lsl #6
    2e80:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    2e84:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2e88:	06020501 	streq	r0, [r2], -r1, lsl #10
    2e8c:	06050521 	streq	r0, [r5], -r1, lsr #10
    2e90:	06030501 	streq	r0, [r3], -r1, lsl #10
    2e94:	06060530 			; <UNDEFINED> instruction: 0x06060530
    2e98:	06040501 	streq	r0, [r4], -r1, lsl #10
    2e9c:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    2ea0:	01013d33 	tsteq	r1, r3, lsr sp
    2ea4:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    2ea8:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    2eac:	06013006 	streq	r3, [r1], -r6
    2eb0:	2e064a4a 	vmlscs.f32	s8, s12, s20
    2eb4:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    2eb8:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    2ebc:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    2ec0:	01052306 	tsteq	r5, r6, lsl #6
    2ec4:	0a051306 	beq	147ae4 <__ccfg+0x127b3c>
    2ec8:	022e7003 	eoreq	r7, lr, #3
    2ecc:	0101000b 	tsteq	r1, fp
    2ed0:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2ed4:	00000002 	andeq	r0, r0, r2
    2ed8:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    2edc:	16020501 	strne	r0, [r2], -r1, lsl #10
    2ee0:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2ee4:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2ee8:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2eec:	20090302 	andcs	r0, r9, r2, lsl #6
    2ef0:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2ef4:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2ef8:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2efc:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2f00:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2f04:	20050501 	andcs	r0, r5, r1, lsl #10
    2f08:	2f060305 	svccs	0x00060305
    2f0c:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2f10:	01061b05 	tsteq	r6, r5, lsl #22
    2f14:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2f18:	0a030603 	beq	c472c <__ccfg+0xa4784>
    2f1c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2f20:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2f24:	200b030a 	andcs	r0, fp, sl, lsl #6
    2f28:	20061a05 	andcs	r1, r6, r5, lsl #20
    2f2c:	01060305 	tsteq	r6, r5, lsl #6
    2f30:	2f060405 	svccs	0x00060405
    2f34:	11062c05 	tstne	r6, r5, lsl #24
    2f38:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2f3c:	051f062a 	ldreq	r0, [pc, #-1578]	; 291a <NOROM_ChipInfo_GetHwRevision+0x12>
    2f40:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    2f44:	01062105 	tsteq	r6, r5, lsl #2
    2f48:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2f4c:	052f0603 	streq	r0, [pc, #-1539]!	; 2951 <NOROM_ChipInfo_GetHwRevision+0x49>
    2f50:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2f54:	20052006 	andcs	r2, r5, r6
    2f58:	20060520 	andcs	r0, r6, r0, lsr #10
    2f5c:	33060205 	movwcc	r0, #25093	; 0x6205
    2f60:	06050513 			; <UNDEFINED> instruction: 0x06050513
    2f64:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f68:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    2f6c:	0a050f06 	beq	146b8c <__ccfg+0x126be4>
    2f70:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    2f74:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f78:	03010501 	movweq	r0, #5377	; 0x1501
    2f7c:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    2f80:	20740306 	rsbscs	r0, r4, r6, lsl #6
    2f84:	01060805 	tsteq	r6, r5, lsl #16
    2f88:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2f8c:	052f0605 	streq	r0, [pc, #-1541]!	; 298f <AuxAdiDdiSafeWrite.constprop.1+0x3>
    2f90:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    2f94:	2a052207 	bcs	14b7b8 <__ccfg+0x12b810>
    2f98:	0a021e06 	beq	8a7b8 <__ccfg+0x6a810>
    2f9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fa0:	02050038 	andeq	r0, r5, #56	; 0x38
    2fa4:	00000000 	andeq	r0, r0, r0
    2fa8:	0105a303 	tsteq	r5, r3, lsl #6
    2fac:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2fb0:	01141313 	tsteq	r4, r3, lsl r3
    2fb4:	03063805 	movweq	r3, #26629	; 0x6805
    2fb8:	02052077 	andeq	r2, r5, #119	; 0x77
    2fbc:	20200903 	eorcs	r0, r0, r3, lsl #18
    2fc0:	03054a06 	movweq	r4, #23046	; 0x5a06
    2fc4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2fc8:	03060205 	movweq	r0, #25093	; 0x6205
    2fcc:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    2fd0:	01061a05 	tsteq	r6, r5, lsl #20
    2fd4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2fd8:	052f0603 	streq	r0, [pc, #-1539]!	; 29dd <NOROM_OSCClockSourceSet+0x21>
    2fdc:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    2fe0:	1b050106 	blne	143400 <__ccfg+0x123458>
    2fe4:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    2fe8:	0305206b 	movweq	r2, #20587	; 0x506b
    2fec:	7cb30306 	ldcvc	3, cr0, [r3], #24
    2ff0:	06050520 	streq	r0, [r5], -r0, lsr #10
    2ff4:	06030501 	streq	r0, [r3], -r1, lsl #10
    2ff8:	06060521 	streq	r0, [r6], -r1, lsr #10
    2ffc:	06030501 	streq	r0, [r3], -r1, lsl #10
    3000:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3004:	01061305 	tsteq	r6, r5, lsl #6
    3008:	20060f05 	andcs	r0, r6, r5, lsl #30
    300c:	13060505 	movwne	r0, #25861	; 0x6505
    3010:	03060905 	movweq	r0, #26885	; 0x6905
    3014:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    3018:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    301c:	0305200c 	movweq	r2, #20492	; 0x500c
    3020:	20052f06 	andcs	r2, r5, r6, lsl #30
    3024:	06050106 	streq	r0, [r5], -r6, lsl #2
    3028:	20200520 	eorcs	r0, r0, r0, lsr #10
    302c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3030:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3034:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3038:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    303c:	0a030601 	beq	c4848 <__ccfg+0xa48a0>
    3040:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    3044:	06090521 	streq	r0, [r9], -r1, lsr #10
    3048:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    304c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3050:	03010501 	movweq	r0, #5377	; 0x1501
    3054:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3058:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    305c:	01061e05 	tsteq	r6, r5, lsl #28
    3060:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3064:	2f300604 	svccs	0x00300604
    3068:	01060605 	tsteq	r6, r5, lsl #12
    306c:	21060405 	tstcs	r6, r5, lsl #8
    3070:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    3074:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    3078:	0101000a 	tsteq	r1, sl
    307c:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    3080:	00000002 	andeq	r0, r0, r2
    3084:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    3088:	13020501 	movwne	r0, #9473	; 0x2501
    308c:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    3090:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    3094:	20207a03 	eorcs	r7, r0, r3, lsl #20
    3098:	20420205 	subcs	r0, r2, r5, lsl #4
    309c:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    30a0:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    30a4:	4a580601 	bmi	16048b0 <__ccfg+0x15e4908>
    30a8:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    30ac:	01060e05 	tsteq	r6, r5, lsl #28
    30b0:	2f060205 	svccs	0x00060205
    30b4:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    30b8:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    30bc:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    30c0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    30c4:	03052e05 	movweq	r2, #24069	; 0x5e05
    30c8:	06052206 	streq	r2, [r5], -r6, lsl #4
    30cc:	0a050106 	beq	1434ec <__ccfg+0x123544>
    30d0:	0301054e 	movweq	r0, #5454	; 0x154e
    30d4:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    30d8:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    30dc:	0117033d 	tsteq	r7, sp, lsr r3
    30e0:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    30e4:	2e3c012e 	rsfcsep	f0, f4, #0.5
    30e8:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    30ec:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    30f0:	0b054a17 	bleq	155954 <__ccfg+0x1359ac>
    30f4:	58050520 	stmdapl	r5, {r5, r8, sl}
    30f8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    30fc:	01060605 	tsteq	r6, r5, lsl #12
    3100:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    3104:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3108:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    310c:	052f0602 	streq	r0, [pc, #-1538]!	; 2b12 <NOROM_OSCClockSourceGet+0xfa>
    3110:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3114:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3118:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    311c:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3120:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3124:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2217 <NOROM_SetupGetTrimForAmpcompCtrl+0xb>
    3128:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    312c:	01060905 	tsteq	r6, r5, lsl #18
    3130:	01000c02 	tsteq	r0, r2, lsl #24
    3134:	00440501 	subeq	r0, r4, r1, lsl #10
    3138:	00000205 	andeq	r0, r0, r5, lsl #4
    313c:	87030000 	strhi	r0, [r3, -r0]
    3140:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3144:	06440516 			; <UNDEFINED> instruction: 0x06440516
    3148:	0205200e 	andeq	r2, r5, #14
    314c:	1a052606 	bne	14c96c <__ccfg+0x12c9c4>
    3150:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    3154:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3158:	09030602 	stmdbeq	r3, {r1, r9, sl}
    315c:	0605054a 	streq	r0, [r5], -sl, asr #10
    3160:	06030501 	streq	r0, [r3], -r1, lsl #10
    3164:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3168:	03050106 	movweq	r0, #20742	; 0x5106
    316c:	16056706 	strne	r6, [r5], -r6, lsl #14
    3170:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3174:	01055b06 	tsteq	r5, r6, lsl #22
    3178:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    317c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3180:	0205004b 	andeq	r0, r5, #75	; 0x4b
    3184:	00000000 	andeq	r0, r0, r0
    3188:	01069903 	tsteq	r6, r3, lsl #18
    318c:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    3190:	03064b05 	movweq	r4, #27397	; 0x6b05
    3194:	1a05017a 	bne	143784 <__ccfg+0x1237dc>
    3198:	034b0526 	movteq	r0, #46374	; 0xb526
    319c:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    31a0:	4a090306 	bmi	243dc0 <__ccfg+0x223e18>
    31a4:	01060505 	tsteq	r6, r5, lsl #10
    31a8:	2f060305 	svccs	0x00060305
    31ac:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31b0:	06030501 	streq	r0, [r3], -r1, lsl #10
    31b4:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    31bc:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    31c0:	00020213 	andeq	r0, r2, r3, lsl r2
    31c4:	31050101 	tstcc	r5, r1, lsl #2
    31c8:	00020500 	andeq	r0, r2, r0, lsl #10
    31cc:	03000000 	movweq	r0, #0
    31d0:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    31d4:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    31d8:	03050106 	movweq	r0, #20742	; 0x5106
    31dc:	01052106 	tsteq	r5, r6, lsl #2
    31e0:	01023d06 	tsteq	r2, r6, lsl #26
    31e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    31e8:	02050048 	andeq	r0, r5, #72	; 0x48
    31ec:	00000000 	andeq	r0, r0, r0
    31f0:	0106d103 	tsteq	r6, r3, lsl #2
    31f4:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    31f8:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    31fc:	01240602 			; <UNDEFINED> instruction: 0x01240602
    3200:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3204:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3208:	4a4a0620 	bmi	1284a90 <__ccfg+0x1264ae8>
    320c:	06010513 			; <UNDEFINED> instruction: 0x06010513
    3210:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3214:	01000602 	tsteq	r0, r2, lsl #12
    3218:	00460501 	subeq	r0, r6, r1, lsl #10
    321c:	00000205 	andeq	r0, r0, r5, lsl #4
    3220:	b2030000 	andlt	r0, r3, #0
    3224:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3228:	06460517 			; <UNDEFINED> instruction: 0x06460517
    322c:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    3230:	2f060305 	svccs	0x00060305
    3234:	01060605 	tsteq	r6, r5, lsl #12
    3238:	30060305 	andcc	r0, r6, r5, lsl #6
    323c:	01060605 	tsteq	r6, r5, lsl #12
    3240:	2f060405 	svccs	0x00060405
    3244:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3248:	06040501 	streq	r0, [r4], -r1, lsl #10
    324c:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    3250:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3254:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3258:	01060c05 	tsteq	r6, r5, lsl #24
    325c:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3260:	06030520 	streq	r0, [r3], -r0, lsr #10
    3264:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3268:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    326c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3270:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3274:	014c0602 	cmpeq	ip, r2, lsl #12
    3278:	4a062e06 	bmi	18ea98 <__ccfg+0x16eaf0>
    327c:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    3280:	01050106 	tsteq	r5, r6, lsl #2
    3284:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    3288:	71030b05 	tstvc	r3, r5, lsl #22
    328c:	000b023c 	andeq	r0, fp, ip, lsr r2
    3290:	3d050101 	stfccs	f0, [r5, #-4]
    3294:	00020500 	andeq	r0, r2, r0, lsl #10
    3298:	03000000 	movweq	r0, #0
    329c:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    32a0:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    32a4:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    32a8:	06202402 	strteq	r2, [r0], -r2, lsl #8
    32ac:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    32b0:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    32b4:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    32b8:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    32bc:	43052e22 	movwmi	r2, #24098	; 0x5e22
    32c0:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    32c4:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    32c8:	01010005 	tsteq	r1, r5
    32cc:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    32d0:	00000002 	andeq	r0, r0, r2
    32d4:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    32d8:	16020501 	strne	r0, [r2], -r1, lsl #10
    32dc:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    32e0:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    32e4:	4a4a0620 	bmi	1284b6c <__ccfg+0x1264bc4>
    32e8:	06220513 			; <UNDEFINED> instruction: 0x06220513
    32ec:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    32f0:	01000502 	tsteq	r0, r2, lsl #10
    32f4:	00400501 	subeq	r0, r0, r1, lsl #10
    32f8:	00000205 	andeq	r0, r0, r5, lsl #4
    32fc:	ea030000 	b	c3304 <__ccfg+0xa335c>
    3300:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3304:	40051416 	andmi	r1, r5, r6, lsl r4
    3308:	017a0306 	cmneq	sl, r6, lsl #6
    330c:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3310:	7a034005 	bvc	d332c <__ccfg+0xb3384>
    3314:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3318:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    331c:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3320:	01061105 	tsteq	r6, r5, lsl #2
    3324:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3328:	02051d11 	andeq	r1, r5, #1088	; 0x440
    332c:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3330:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3334:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3338:	01060905 	tsteq	r6, r5, lsl #18
    333c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3340:	01010002 	tsteq	r1, r2
    3344:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3348:	00000002 	andeq	r0, r0, r2
    334c:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    3350:	16020501 	strne	r0, [r2], -r1, lsl #10
    3354:	01000302 	tsteq	r0, r2, lsl #6
    3358:	00450501 	subeq	r0, r5, r1, lsl #10
    335c:	00000205 	andeq	r0, r0, r5, lsl #4
    3360:	85030000 	strhi	r0, [r3, #-0]
    3364:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3368:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    336c:	017a0306 	cmneq	sl, r6, lsl #6
    3370:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3374:	31060305 	tstcc	r6, r5, lsl #6
    3378:	01060605 	tsteq	r6, r5, lsl #12
    337c:	2f060405 	svccs	0x00060405
    3380:	2f060305 	svccs	0x00060305
    3384:	06012e06 	streq	r2, [r1], -r6, lsl #28
    3388:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    338c:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    3390:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3394:	0a052e06 	beq	14ebb4 <__ccfg+0x12ec0c>
    3398:	27010535 	smladxcs	r1, r5, r5, r0
    339c:	03060405 	movweq	r0, #25605	; 0x6405
    33a0:	20052073 	andcs	r2, r5, r3, ror r0
    33a4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    33a8:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    33ac:	30060405 	andcc	r0, r6, r5, lsl #8
    33b0:	01061d05 	tsteq	r6, r5, lsl #26
    33b4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    33b8:	060b052f 	streq	r0, [fp], -pc, lsr #10
    33bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    33c0:	060b0541 	streq	r0, [fp], -r1, asr #10
    33c4:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    33c8:	2f060305 	svccs	0x00060305
    33cc:	01060a05 	tsteq	r6, r5, lsl #20
    33d0:	01000902 	tsteq	r0, r2, lsl #18
    33d4:	00480501 	subeq	r0, r8, r1, lsl #10
    33d8:	00000205 	andeq	r0, r0, r5, lsl #4
    33dc:	86030000 	strhi	r0, [r3], -r0
    33e0:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    33e4:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    33e8:	48050106 	stmdami	r5, {r1, r2, r8}
    33ec:	20207803 	eorcs	r7, r0, r3, lsl #16
    33f0:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    33f4:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    33f8:	06030520 	streq	r0, [r3], -r0, lsr #10
    33fc:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3400:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3404:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3408:	052f0602 	streq	r0, [pc, #-1538]!	; 2e0e <__exidx_end+0x19a>
    340c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3410:	11052221 	tstne	r5, r1, lsr #4
    3414:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3418:	06210530 			; <UNDEFINED> instruction: 0x06210530
    341c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3420:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3424:	01060505 	tsteq	r6, r5, lsl #10
    3428:	21060305 	tstcs	r6, r5, lsl #6
    342c:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3430:	13060105 	movwne	r0, #24837	; 0x6105
    3434:	01000b02 	tsteq	r0, r2, lsl #22
    3438:	00440501 	subeq	r0, r4, r1, lsl #10
    343c:	00000205 	andeq	r0, r0, r5, lsl #4
    3440:	a0030000 	andge	r0, r3, r0
    3444:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3448:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    344c:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    3450:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3454:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3458:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    345c:	03020520 	movweq	r0, #9504	; 0x2520
    3460:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3464:	0603054a 	streq	r0, [r3], -sl, asr #10
    3468:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    346c:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    3470:	0f054706 	svceq	0x00054706
    3474:	06050106 	streq	r0, [r5], -r6, lsl #2
    3478:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    347c:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3480:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    3484:	0a050106 	beq	1438a4 <__ccfg+0x1238fc>
    3488:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    348c:	200d0301 	andcs	r0, sp, r1, lsl #6
    3490:	03060305 	movweq	r0, #25349	; 0x6305
    3494:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    3498:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    349c:	06050106 	streq	r0, [r5], -r6, lsl #2
    34a0:	06020574 			; <UNDEFINED> instruction: 0x06020574
    34a4:	06050542 	streq	r0, [r5], -r2, asr #10
    34a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    34ac:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    34b0:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    34b4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    34b8:	02052006 	andeq	r2, r5, #6
    34bc:	0b052306 	bleq	14c0dc <__ccfg+0x12c134>
    34c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    34c4:	0602054a 	streq	r0, [r2], -sl, asr #10
    34c8:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    34cc:	0a020106 	beq	838ec <__ccfg+0x63944>
    34d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34d4:	0205003e 	andeq	r0, r5, #62	; 0x3e
    34d8:	00000000 	andeq	r0, r0, r0
    34dc:	0109d103 	tsteq	r9, r3, lsl #2
    34e0:	13170205 	tstne	r7, #1342177280	; 0x50000000
    34e4:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    34e8:	20780306 	rsbscs	r0, r8, r6, lsl #6
    34ec:	20280205 	eorcs	r0, r8, r5, lsl #4
    34f0:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    34f4:	01060505 	tsteq	r6, r5, lsl #10
    34f8:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    34fc:	01060405 	tsteq	r6, r5, lsl #8
    3500:	21060205 	tstcs	r6, r5, lsl #4
    3504:	01060505 	tsteq	r6, r5, lsl #10
    3508:	33060205 	movwcc	r0, #25093	; 0x6205
    350c:	01060a05 	tsteq	r6, r5, lsl #20
    3510:	2f060205 	svccs	0x00060205
    3514:	1301012f 	movwne	r0, #4399	; 0x112f
    3518:	01060905 	tsteq	r6, r5, lsl #18
    351c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3520:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3524:	01000902 	tsteq	r0, r2, lsl #18
    3528:	00340501 	eorseq	r0, r4, r1, lsl #10
    352c:	00000205 	andeq	r0, r0, r5, lsl #4
    3530:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3534:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3538:	01141316 	tsteq	r4, r6, lsl r3
    353c:	03063405 	movweq	r3, #25605	; 0x6405
    3540:	02052079 	andeq	r2, r5, #121	; 0x79
    3544:	4a062027 	bmi	18b5e8 <__ccfg+0x16b640>
    3548:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    354c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3550:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3554:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3558:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    355c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3560:	0a052306 	beq	14c180 <__ccfg+0x12c1d8>
    3564:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3568:	21010530 	tstcs	r1, r0, lsr r5
    356c:	01000702 	tsteq	r0, r2, lsl #14
    3570:	00350501 	eorseq	r0, r5, r1, lsl #10
    3574:	00000205 	andeq	r0, r0, r5, lsl #4
    3578:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    357c:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3580:	06350516 			; <UNDEFINED> instruction: 0x06350516
    3584:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    3588:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    358c:	01300602 	teqeq	r0, r2, lsl #12
    3590:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    3594:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    3598:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    359c:	06022c02 	streq	r2, [r2], -r2, lsl #24
    35a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35a4:	02050032 	andeq	r0, r5, #50	; 0x32
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	010a8403 	tsteq	sl, r3, lsl #8
    35b0:	01160205 	tsteq	r6, r5, lsl #4
    35b4:	1c063205 	sfmne	f3, 4, [r6], {5}
    35b8:	20240205 	eorcs	r0, r4, r5, lsl #4
    35bc:	134a4a06 	movtne	r4, #43526	; 0xaa06
    35c0:	03060a05 	movweq	r0, #27141	; 0x6a05
    35c4:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    35c8:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    35cc:	06020520 	streq	r0, [r2], -r0, lsr #10
    35d0:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    35d4:	03051413 	movweq	r1, #21523	; 0x5413
    35d8:	06050513 			; <UNDEFINED> instruction: 0x06050513
    35dc:	06030501 	streq	r0, [r3], -r1, lsl #10
    35e0:	06060521 	streq	r0, [r6], -r1, lsr #10
    35e4:	06030501 	streq	r0, [r3], -r1, lsl #10
    35e8:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    35ec:	01061305 	tsteq	r6, r5, lsl #6
    35f0:	20060f05 	andcs	r0, r6, r5, lsl #30
    35f4:	13060505 	movwne	r0, #25861	; 0x6505
    35f8:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    35fc:	08022008 	stmdaeq	r2, {r3, sp}
    3600:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3604:	02050028 	andeq	r0, r5, #40	; 0x28
    3608:	000013e4 	andeq	r1, r0, r4, ror #7
    360c:	010a8c03 	tsteq	sl, r3, lsl #24
    3610:	1a030105 	bne	c3a2c <__ccfg+0xa3a84>
    3614:	00010201 	andeq	r0, r1, r1, lsl #4
    3618:	01230101 			; <UNDEFINED> instruction: 0x01230101
    361c:	00030000 	andeq	r0, r3, r0
    3620:	00000089 	andeq	r0, r0, r9, lsl #1
    3624:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3628:	0101000d 	tsteq	r1, sp
    362c:	00000101 	andeq	r0, r0, r1, lsl #2
    3630:	00000100 	andeq	r0, r0, r0, lsl #2
    3634:	6f682f01 	svcvs	0x00682f01
    3638:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 348c <__exidx_end+0x818>
    363c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3640:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3644:	6f746b73 	svcvs	0x00746b73
    3648:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    364c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3650:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3654:	2f534f43 	svccs	0x00534f43
    3658:	4f636950 	svcmi	0x00636950
    365c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3660:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3664:	73752f00 	cmnvc	r5, #0, 30
    3668:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    366c:	63672f62 	cmnvs	r7, #392	; 0x188
    3670:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3674:	6f6e2d6d 	svcvs	0x006e2d6d
    3678:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    367c:	2f696261 	svccs	0x00696261
    3680:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3684:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3688:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    368c:	73000065 	movwvc	r0, #101	; 0x65
    3690:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    3694:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    3698:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    369c:	00000100 	andeq	r0, r0, r0, lsl #2
    36a0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    36a4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    36a8:	00000200 	andeq	r0, r0, r0, lsl #4
    36ac:	00010500 	andeq	r0, r1, r0, lsl #10
    36b0:	13e60205 	mvnne	r0, #1342177280	; 0x50000000
    36b4:	84030000 	strhi	r0, [r3], #-0
    36b8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    36bc:	0a051416 	beq	14871c <__ccfg+0x128774>
    36c0:	00010210 	andeq	r0, r1, r0, lsl r2
    36c4:	01050101 	tsteq	r5, r1, lsl #2
    36c8:	e8020500 	stmda	r2, {r8, sl}
    36cc:	03000013 	movweq	r0, #19
    36d0:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    36d4:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    36d8:	0102100a 	tsteq	r2, sl
    36dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36e0:	02050001 	andeq	r0, r5, #1
    36e4:	000013ea 	andeq	r1, r0, sl, ror #7
    36e8:	0102a803 	tsteq	r2, r3, lsl #16
    36ec:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    36f0:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    36f4:	01010001 	tsteq	r1, r1
    36f8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    36fc:	0013ec02 	andseq	lr, r3, r2, lsl #24
    3700:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3704:	13050501 	movwne	r0, #21761	; 0x5501
    3708:	06010517 			; <UNDEFINED> instruction: 0x06010517
    370c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    3710:	33062605 	movwcc	r2, #26117	; 0x6605
    3714:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3718:	2105051f 	tstcs	r5, pc, lsl r5
    371c:	20061d05 	andcs	r1, r6, r5, lsl #26
    3720:	01060505 	tsteq	r6, r5, lsl #10
    3724:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3728:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    372c:	01053305 	tsteq	r5, r5, lsl #6
    3730:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3734:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3738:	01061605 	tsteq	r6, r5, lsl #12
    373c:	01001002 	tsteq	r0, r2
    3740:	00018501 	andeq	r8, r1, r1, lsl #10
    3744:	7f000300 	svcvc	0x00000300
    3748:	02000001 	andeq	r0, r0, #1
    374c:	0d0efb01 	vstreq	d15, [lr, #-4]
    3750:	01010100 	mrseq	r0, (UNDEF: 17)
    3754:	00000001 	andeq	r0, r0, r1
    3758:	01000001 	tsteq	r0, r1
    375c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3760:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3764:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3768:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    376c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3770:	61652d65 	cmnvs	r5, r5, ror #26
    3774:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3778:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    377c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3780:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3784:	6f682f00 	svcvs	0x00682f00
    3788:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 35dc <__exidx_end+0x968>
    378c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3790:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3794:	6f746b73 	svcvs	0x00746b73
    3798:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    379c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37a0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37a4:	2f534f43 	svccs	0x00534f43
    37a8:	4f636950 	svcmi	0x00636950
    37ac:	43432f53 	movtmi	r2, #16211	; 0x3f53
    37b0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37b4:	3143432f 	cmpcc	r3, pc, lsr #6
    37b8:	57585833 	smmlarpl	r8, r3, r8, r5
    37bc:	2f455241 	svccs	0x00455241
    37c0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    37c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3710 <__exidx_end+0xa9c>
    37c8:	616d2f65 	cmnvs	sp, r5, ror #30
    37cc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    37d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    37d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    37d8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    37dc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    37e0:	4349502f 	movtmi	r5, #36911	; 0x902f
    37e4:	502f534f 	eorpl	r5, pc, pc, asr #6
    37e8:	534f6369 	movtpl	r6, #62313	; 0xf369
    37ec:	3143432f 	cmpcc	r3, pc, lsr #6
    37f0:	00585833 	subseq	r5, r8, r3, lsr r8
    37f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3740 <__exidx_end+0xacc>
    37f8:	616d2f65 	cmnvs	sp, r5, ror #30
    37fc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3800:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3804:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3808:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    380c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3810:	4349502f 	movtmi	r5, #36911	; 0x902f
    3814:	502f534f 	eorpl	r5, pc, pc, asr #6
    3818:	534f6369 	movtpl	r6, #62313	; 0xf369
    381c:	6f682f00 	svcvs	0x00682f00
    3820:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3674 <__exidx_end+0xa00>
    3824:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3828:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    382c:	6f746b73 	svcvs	0x00746b73
    3830:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3834:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3838:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    383c:	2f534f43 	svccs	0x00534f43
    3840:	4f636950 	svcmi	0x00636950
    3844:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3848:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    384c:	74730000 	ldrbtvc	r0, [r3], #-0
    3850:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3854:	0100682e 	tsteq	r0, lr, lsr #16
    3858:	77680000 	strbvc	r0, [r8, -r0]!
    385c:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    3860:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3864:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    3868:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    386c:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    3870:	00020068 	andeq	r0, r2, r8, rrx
    3874:	63726100 	cmnvs	r2, #0, 2
    3878:	00682e68 	rsbeq	r2, r8, r8, ror #28
    387c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    3880:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3884:	00030068 	andeq	r0, r3, r8, rrx
    3888:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    388c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3890:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3894:	62000003 	andvs	r0, r0, #3
    3898:	6f747475 	svcvs	0x00747475
    389c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    38a0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    38a4:	00000300 	andeq	r0, r0, r0, lsl #6
    38a8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    38ac:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    38b0:	6b000004 	blvs	38c8 <__exidx_end+0xc54>
    38b4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    38b8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    38bc:	63000005 	movwvs	r0, #5
    38c0:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    38c4:	00030063 	andeq	r0, r3, r3, rrx
    38c8:	02990000 	addseq	r0, r9, #0
    38cc:	00030000 	andeq	r0, r3, r0
    38d0:	000001c0 	andeq	r0, r0, r0, asr #3
    38d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    38d8:	0101000d 	tsteq	r1, sp
    38dc:	00000101 	andeq	r0, r0, r1, lsl #2
    38e0:	00000100 	andeq	r0, r0, r0, lsl #2
    38e4:	6f682f01 	svcvs	0x00682f01
    38e8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 373c <__exidx_end+0xac8>
    38ec:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    38f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    38f4:	6f746b73 	svcvs	0x00746b73
    38f8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    38fc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3900:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3904:	2f534f43 	svccs	0x00534f43
    3908:	4f636950 	svcmi	0x00636950
    390c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3910:	2f736269 	svccs	0x00736269
    3914:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    3918:	0073726f 	rsbseq	r7, r3, pc, ror #4
    391c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3868 <__exidx_end+0xbf4>
    3920:	616d2f65 	cmnvs	sp, r5, ror #30
    3924:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3928:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    392c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3930:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3934:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3938:	4349502f 	movtmi	r5, #36911	; 0x902f
    393c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3940:	534f6369 	movtpl	r6, #62313	; 0xf369
    3944:	3143432f 	cmpcc	r3, pc, lsr #6
    3948:	00585833 	subseq	r5, r8, r3, lsr r8
    394c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3898 <__exidx_end+0xc24>
    3950:	616d2f65 	cmnvs	sp, r5, ror #30
    3954:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3958:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    395c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3960:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3964:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3968:	4349502f 	movtmi	r5, #36911	; 0x902f
    396c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3970:	534f6369 	movtpl	r6, #62313	; 0xf369
    3974:	3143432f 	cmpcc	r3, pc, lsr #6
    3978:	2f585833 	svccs	0x00585833
    397c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3980:	41575858 	cmpmi	r7, r8, asr r8
    3984:	642f4552 	strtvs	r4, [pc], #-1362	; 398c <__exidx_end+0xd18>
    3988:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    398c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3990:	73752f00 	cmnvc	r5, #0, 30
    3994:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3998:	63672f62 	cmnvs	r7, #392	; 0x188
    399c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    39a0:	6f6e2d6d 	svcvs	0x006e2d6d
    39a4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    39a8:	2f696261 	svccs	0x00696261
    39ac:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    39b0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    39b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    39b8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    39bc:	2f656d6f 	svccs	0x00656d6f
    39c0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    39c4:	442f6e69 	strtmi	r6, [pc], #-3689	; 39cc <__exidx_end+0xd58>
    39c8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    39cc:	4f2f706f 	svcmi	0x002f706f
    39d0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    39d4:	502f5445 	eorpl	r5, pc, r5, asr #8
    39d8:	534f4349 	movtpl	r4, #62281	; 0xf349
    39dc:	6369502f 	cmnvs	r9, #47	; 0x2f
    39e0:	2f00534f 	svccs	0x0000534f
    39e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    39e8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    39ec:	2f6e6974 	svccs	0x006e6974
    39f0:	6b736544 	blvs	1cdcf08 <__ccfg+0x1cbcf60>
    39f4:	2f706f74 	svccs	0x00706f74
    39f8:	4f534c4f 	svcmi	0x00534c4f
    39fc:	2f54454e 	svccs	0x0054454e
    3a00:	4f434950 	svcmi	0x00434950
    3a04:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3a08:	2f534f63 	svccs	0x00534f63
    3a0c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3a10:	00006c65 	andeq	r6, r0, r5, ror #24
    3a14:	5f6e6970 	svcpl	0x006e6970
    3a18:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    3a1c:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    3a20:	00000100 	andeq	r0, r0, r0, lsl #2
    3a24:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    3a28:	63675f73 	cmnvs	r7, #460	; 0x1cc
    3a2c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3a30:	67000002 	strvs	r0, [r0, -r2]
    3a34:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3a38:	00030068 	andeq	r0, r3, r8, rrx
    3a3c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3a40:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3a44:	00040068 	andeq	r0, r4, r8, rrx
    3a48:	63726100 	cmnvs	r2, #0, 2
    3a4c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3a50:	6d000002 	stcvs	0, cr0, [r0, #-8]
    3a54:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3a58:	00020068 	andeq	r0, r2, r8, rrx
    3a5c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3a60:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a64:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3a68:	62000002 	andvs	r0, r0, #2
    3a6c:	6f747475 	svcvs	0x00747475
    3a70:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3a74:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3a78:	00000200 	andeq	r0, r0, r0, lsl #4
    3a7c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3a80:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3a84:	6b000005 	blvs	3aa0 <__exidx_end+0xe2c>
    3a88:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3a8c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3a90:	00000006 	andeq	r0, r0, r6
    3a94:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    3a98:	00000002 	andeq	r0, r0, r2
    3a9c:	010e0300 	mrseq	r0, ELR_hyp
    3aa0:	01011b05 	tsteq	r1, r5, lsl #22
    3aa4:	06010501 	streq	r0, [r1], -r1, lsl #10
    3aa8:	00010201 	andeq	r0, r1, r1, lsl #4
    3aac:	3f050101 	svccc	0x00050101
    3ab0:	00020500 	andeq	r0, r2, r0, lsl #10
    3ab4:	03000000 	movweq	r0, #0
    3ab8:	02050110 	andeq	r0, r5, #16, 2
    3abc:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    3ac0:	03063f05 	movweq	r3, #28421	; 0x6f05
    3ac4:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    3ac8:	03052605 	movweq	r2, #22021	; 0x5605
    3acc:	06052206 	streq	r2, [r5], -r6, lsl #4
    3ad0:	03050106 	movweq	r0, #20742	; 0x5106
    3ad4:	02044d06 	andeq	r4, r4, #384	; 0x180
    3ad8:	0100c103 	tsteq	r0, r3, lsl #2
    3adc:	40030104 	andmi	r0, r3, r4, lsl #2
    3ae0:	044b3d20 	strbeq	r3, [fp], #-3360	; 0xfffff2e0
    3ae4:	01330302 	teqeq	r3, r2, lsl #6
    3ae8:	4e030104 	adfmis	f0, f3, f4
    3aec:	31020520 	tstcc	r2, r0, lsr #10
    3af0:	01060705 	tsteq	r6, r5, lsl #14
    3af4:	0f050304 	svceq	0x00050304
    3af8:	2e018b03 	vmlacs.f64	d8, d1, d3
    3afc:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3b00:	207ef503 	rsbscs	pc, lr, r3, lsl #10
    3b04:	21060205 	tstcs	r6, r5, lsl #4
    3b08:	05130b05 	ldreq	r0, [r3, #-2821]	; 0xfffff4fb
    3b0c:	03041303 	movweq	r1, #17155	; 0x4303
    3b10:	83032905 	movwhi	r2, #14597	; 0x3905
    3b14:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3b18:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3b1c:	f803060b 			; <UNDEFINED> instruction: 0xf803060b
    3b20:	0304017e 	movweq	r0, #16766	; 0x417e
    3b24:	88030f05 	stmdahi	r3, {r0, r2, r8, r9, sl, fp}
    3b28:	01042001 	tsteq	r4, r1
    3b2c:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b30:	0304207e 	movweq	r2, #16510	; 0x407e
    3b34:	88033305 	stmdahi	r3, {r0, r2, r8, r9, ip, sp}
    3b38:	42052e01 	andmi	r2, r5, #1, 28
    3b3c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3b40:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3b44:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    3b48:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    3b4c:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    3b50:	2208051e 	andcs	r0, r8, #125829120	; 0x7800000
    3b54:	1f063a05 	svcne	0x00063a05
    3b58:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
    3b5c:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    3b60:	06022301 	streq	r2, [r2], -r1, lsl #6
    3b64:	3c010100 	stfccs	f0, [r1], {-0}
    3b68:	03000003 	movweq	r0, #3
    3b6c:	0001a900 	andeq	sl, r1, r0, lsl #18
    3b70:	fb010200 	blx	4437a <__ccfg+0x243d2>
    3b74:	01000d0e 	tsteq	r0, lr, lsl #26
    3b78:	00010101 	andeq	r0, r1, r1, lsl #2
    3b7c:	00010000 	andeq	r0, r1, r0
    3b80:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3b84:	2f656d6f 	svccs	0x00656d6f
    3b88:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3b8c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3b94 <__exidx_end+0xf20>
    3b90:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3b94:	4f2f706f 	svcmi	0x002f706f
    3b98:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3b9c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ba0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ba4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ba8:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bac:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3bb0:	004f492f 	subeq	r4, pc, pc, lsr #18
    3bb4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b00 <__exidx_end+0xe8c>
    3bb8:	616d2f65 	cmnvs	sp, r5, ror #30
    3bbc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3bc0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3bc4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3bc8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3bcc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3bd0:	4349502f 	movtmi	r5, #36911	; 0x902f
    3bd4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bd8:	534f6369 	movtpl	r6, #62313	; 0xf369
    3bdc:	3143432f 	cmpcc	r3, pc, lsr #6
    3be0:	2f585833 	svccs	0x00585833
    3be4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3be8:	41575858 	cmpmi	r7, r8, asr r8
    3bec:	642f4552 	strtvs	r4, [pc], #-1362	; 3bf4 <__exidx_end+0xf80>
    3bf0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3bf4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3bf8:	73752f00 	cmnvc	r5, #0, 30
    3bfc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3c00:	63672f62 	cmnvs	r7, #392	; 0x188
    3c04:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3c08:	6f6e2d6d 	svcvs	0x006e2d6d
    3c0c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3c10:	2f696261 	svccs	0x00696261
    3c14:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3c18:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3c1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c20:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3c24:	2f656d6f 	svccs	0x00656d6f
    3c28:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c2c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c34 <__exidx_end+0xfc0>
    3c30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c34:	4f2f706f 	svcmi	0x002f706f
    3c38:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c3c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c40:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c44:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c48:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3c4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3c50:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3c54:	2f656d6f 	svccs	0x00656d6f
    3c58:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c5c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c64 <__exidx_end+0xff0>
    3c60:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c64:	4f2f706f 	svcmi	0x002f706f
    3c68:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c6c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c70:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c74:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c78:	2f00534f 	svccs	0x0000534f
    3c7c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c80:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3c84:	2f6e6974 	svccs	0x006e6974
    3c88:	6b736544 	blvs	1cdd1a0 <__ccfg+0x1cbd1f8>
    3c8c:	2f706f74 	svccs	0x00706f74
    3c90:	4f534c4f 	svcmi	0x00534c4f
    3c94:	2f54454e 	svccs	0x0054454e
    3c98:	4f434950 	svcmi	0x00434950
    3c9c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3ca0:	2f534f63 	svccs	0x00534f63
    3ca4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3ca8:	00006c65 	andeq	r6, r0, r5, ror #24
    3cac:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3cb0:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    3cb4:	00010063 	andeq	r0, r1, r3, rrx
    3cb8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3cbc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3cc0:	73000002 	movwvc	r0, #2
    3cc4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3cc8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3ccc:	61000003 	tstvs	r0, r3
    3cd0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3cd4:	00040068 	andeq	r0, r4, r8, rrx
    3cd8:	63616d00 	cmnvs	r1, #0, 26
    3cdc:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3ce0:	70000004 	andvc	r0, r0, r4
    3ce4:	5f736e69 	svcpl	0x00736e69
    3ce8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3cec:	00040068 	andeq	r0, r4, r8, rrx
    3cf0:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3cf4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3cf8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3cfc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3d00:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3d04:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3d08:	00050068 	andeq	r0, r5, r8, rrx
    3d0c:	72656b00 	rsbvc	r6, r5, #0, 22
    3d10:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3d14:	00060068 	andeq	r0, r6, r8, rrx
    3d18:	01050000 	mrseq	r0, (UNDEF: 5)
    3d1c:	00020500 	andeq	r0, r2, r0, lsl #10
    3d20:	03000000 	movweq	r0, #0
    3d24:	0601011b 			; <UNDEFINED> instruction: 0x0601011b
    3d28:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3d2c:	060e056a 	streq	r0, [lr], -sl, ror #10
    3d30:	20050501 	andcs	r0, r5, r1, lsl #10
    3d34:	31060305 	tstcc	r6, r5, lsl #6
    3d38:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    3d3c:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3d40:	01870302 	orreq	r0, r7, r2, lsl #6
    3d44:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3d48:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3d4c:	1c0f0520 	cfstr32ne	mvfx0, [pc], {32}
    3d50:	20061405 	andcs	r1, r6, r5, lsl #8
    3d54:	01061c05 	tsteq	r6, r5, lsl #24
    3d58:	06200205 	strteq	r0, [r0], -r5, lsl #4
    3d5c:	4b2e1103 	blmi	b88170 <__ccfg+0xb681c8>
    3d60:	0303053d 	movweq	r0, #13629	; 0x353d
    3d64:	02042e71 	andeq	r2, r4, #1808	; 0x710
    3d68:	fe032905 	vseleq.f16	s4, s6, s10
    3d6c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3d70:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3d74:	fd030607 	stc2	6, cr0, [r3, #-28]	; 0xffffffe4
    3d78:	0204017e 	andeq	r0, r4, #-2147483617	; 0x8000001f
    3d7c:	83030f05 	movwhi	r0, #16133	; 0x3f05
    3d80:	01042e01 	tsteq	r4, r1, lsl #28
    3d84:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3d88:	0204207e 	andeq	r2, r4, #126	; 0x7e
    3d8c:	83033305 	movwhi	r3, #13061	; 0x3305
    3d90:	01042001 	tsteq	r4, r1
    3d94:	fd030605 	stc2	6, cr0, [r3, #-20]	; 0xffffffec
    3d98:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    3d9c:	05053006 	streq	r3, [r5, #-6]
    3da0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3da4:	03054006 	movweq	r4, #20486	; 0x5006
    3da8:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
    3dac:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3db0:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    3db4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3db8:	16030602 	strne	r0, [r3], -r2, lsl #12
    3dbc:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    3dc0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3dc4:	eb030629 	bl	c5670 <__ccfg+0xa56c8>
    3dc8:	05055800 	streq	r5, [r5, #-2048]	; 0xfffff800
    3dcc:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    3dd0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3dd4:	7f900307 	svcvc	0x00900307
    3dd8:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3ddc:	00f0030f 	rscseq	r0, r0, pc, lsl #6
    3de0:	20330520 	eorscs	r0, r3, r0, lsr #10
    3de4:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3de8:	207f9003 	rsbscs	r9, pc, r3
    3dec:	31060205 	tstcc	r6, r5, lsl #4
    3df0:	01060505 	tsteq	r6, r5, lsl #10
    3df4:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    3df8:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
    3dfc:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3e00:	06290502 	strteq	r0, [r9], -r2, lsl #10
    3e04:	3c00df03 	stccc	15, cr13, [r0], {3}
    3e08:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3e0c:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3e10:	03070501 	movweq	r0, #29953	; 0x7501
    3e14:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e18:	030f0502 	movweq	r0, #62722	; 0xf502
    3e1c:	042e00e4 	strteq	r0, [lr], #-228	; 0xffffff1c
    3e20:	03070501 	movweq	r0, #29953	; 0x7501
    3e24:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e28:	03330502 	teqeq	r3, #8388608	; 0x800000
    3e2c:	042000e4 	strteq	r0, [r0], #-228	; 0xffffff1c
    3e30:	03050501 	movweq	r0, #21761	; 0x5501
    3e34:	05207f9c 	streq	r7, [r0, #-3996]!	; 0xfffff064
    3e38:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e3c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3e40:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3e44:	03053106 	movweq	r3, #20742	; 0x5106
    3e48:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e4c:	01052206 	tsteq	r5, r6, lsl #4
    3e50:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    3e54:	0601052c 	streq	r0, [r1], -ip, lsr #10
    3e58:	000c024c 	andeq	r0, ip, ip, asr #4
    3e5c:	29050101 	stmdbcs	r5, {r0, r8}
    3e60:	00020500 	andeq	r0, r2, r0, lsl #10
    3e64:	03000000 	movweq	r0, #0
    3e68:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    3e6c:	0f051602 	svceq	0x00051602
    3e70:	29050106 	stmdbcs	r5, {r1, r2, r8}
    3e74:	240f051c 	strcs	r0, [pc], #-1308	; 3e7c <__exidx_end+0x1208>
    3e78:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3e7c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3e80:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    3e84:	2e780303 	cdpcs	3, 7, cr0, cr8, cr3, {0}
    3e88:	40060205 	andmi	r0, r6, r5, lsl #4
    3e8c:	01060705 	tsteq	r6, r5, lsl #14
    3e90:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    3e94:	2f2f0603 	svccs	0x002f0603
    3e98:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    3e9c:	052c0305 	streq	r0, [ip, #-773]!	; 0xfffffcfb
    3ea0:	06023e01 	streq	r3, [r2], -r1, lsl #28
    3ea4:	31010100 	mrscc	r0, (UNDEF: 17)
    3ea8:	03000009 	movweq	r0, #9
    3eac:	0001cc00 	andeq	ip, r1, r0, lsl #24
    3eb0:	fb010200 	blx	446ba <__ccfg+0x24712>
    3eb4:	01000d0e 	tsteq	r0, lr, lsl #26
    3eb8:	00010101 	andeq	r0, r1, r1, lsl #2
    3ebc:	00010000 	andeq	r0, r1, r0
    3ec0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ec4:	2f656d6f 	svccs	0x00656d6f
    3ec8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3ecc:	442f6e69 	strtmi	r6, [pc], #-3689	; 3ed4 <__exidx_end+0x1260>
    3ed0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3ed4:	4f2f706f 	svcmi	0x002f706f
    3ed8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3edc:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ee0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ee4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ee8:	502f534f 	eorpl	r5, pc, pc, asr #6
    3eec:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3ef0:	6f74532f 	svcvs	0x0074532f
    3ef4:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3ef8:	6f682f00 	svcvs	0x00682f00
    3efc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3d50 <__exidx_end+0x10dc>
    3f00:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3f04:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3f08:	6f746b73 	svcvs	0x00746b73
    3f0c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3f10:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3f14:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3f18:	2f534f43 	svccs	0x00534f43
    3f1c:	4f636950 	svcmi	0x00636950
    3f20:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3f24:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f28:	3143432f 	cmpcc	r3, pc, lsr #6
    3f2c:	57585833 	smmlarpl	r8, r3, r8, r5
    3f30:	2f455241 	svccs	0x00455241
    3f34:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3f38:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3f3c:	752f0062 	strvc	r0, [pc, #-98]!	; 3ee2 <__exidx_end+0x126e>
    3f40:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3d7c <__exidx_end+0x1108>
    3f44:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3f48:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3f4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3f50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3f54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3f58:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3f5c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3f60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3f64:	2f006564 	svccs	0x00006564
    3f68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3f6c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3f70:	2f6e6974 	svccs	0x006e6974
    3f74:	6b736544 	blvs	1cdd48c <__ccfg+0x1cbd4e4>
    3f78:	2f706f74 	svccs	0x00706f74
    3f7c:	4f534c4f 	svcmi	0x00534c4f
    3f80:	2f54454e 	svccs	0x0054454e
    3f84:	4f434950 	svcmi	0x00434950
    3f88:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3f8c:	2f534f63 	svccs	0x00534f63
    3f90:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f94:	2f005858 	svccs	0x00005858
    3f98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3f9c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fa0:	2f6e6974 	svccs	0x006e6974
    3fa4:	6b736544 	blvs	1cdd4bc <__ccfg+0x1cbd514>
    3fa8:	2f706f74 	svccs	0x00706f74
    3fac:	4f534c4f 	svcmi	0x00534c4f
    3fb0:	2f54454e 	svccs	0x0054454e
    3fb4:	4f434950 	svcmi	0x00434950
    3fb8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fbc:	00534f63 	subseq	r4, r3, r3, ror #30
    3fc0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f0c <__exidx_end+0x1298>
    3fc4:	616d2f65 	cmnvs	sp, r5, ror #30
    3fc8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3fcc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fd0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3fd4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3fd8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3fdc:	4349502f 	movtmi	r5, #36911	; 0x902f
    3fe0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3fe4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3fe8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3fec:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3ff0:	6f747300 	svcvs	0x00747300
    3ff4:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3ff8:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    3ffc:	30387235 	eorscc	r7, r8, r5, lsr r2
    4000:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    4004:	00000100 	andeq	r0, r0, r0, lsl #2
    4008:	6f697067 	svcvs	0x00697067
    400c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4010:	74730000 	ldrbtvc	r0, [r3], #-0
    4014:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4018:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    401c:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 3e64 <__exidx_end+0x11f0>
    4020:	0100682e 	tsteq	r0, lr, lsr #16
    4024:	74730000 	ldrbtvc	r0, [r3], #-0
    4028:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    402c:	0300682e 	movweq	r6, #2094	; 0x82e
    4030:	72610000 	rsbvc	r0, r1, #0
    4034:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4038:	00000400 	andeq	r0, r0, r0, lsl #8
    403c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4040:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4044:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4048:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    404c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4050:	00000400 	andeq	r0, r0, r0, lsl #8
    4054:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4058:	5f736e6f 	svcpl	0x00736e6f
    405c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4060:	00040068 	andeq	r0, r4, r8, rrx
    4064:	73797300 	cmnvc	r9, #0, 6
    4068:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    406c:	00000500 	andeq	r0, r0, r0, lsl #10
    4070:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4074:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4078:	00000600 	andeq	r0, r0, r0, lsl #12
    407c:	00190500 	andseq	r0, r9, r0, lsl #10
    4080:	14380205 	ldrtne	r0, [r8], #-517	; 0xfffffdfb
    4084:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4088:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    408c:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    4090:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    4094:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    4098:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    409c:	20028a03 	andcs	r8, r2, r3, lsl #20
    40a0:	19050104 	stmdbne	r5, {r2, r8}
    40a4:	2e7df103 	expcse	f7, f3
    40a8:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40ac:	2002c503 	andcs	ip, r2, r3, lsl #10
    40b0:	d0030f05 	andle	r0, r3, r5, lsl #30
    40b4:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    40b8:	2000fa03 	andcs	pc, r0, r3, lsl #20
    40bc:	03050104 	movweq	r0, #20740	; 0x5104
    40c0:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    40c4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    40c8:	8f03060f 	svchi	0x0003060f
    40cc:	01040101 	tsteq	r4, r1, lsl #2
    40d0:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    40d4:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    40d8:	1f050521 	svcne	0x00050521
    40dc:	21060305 	tstcs	r6, r5, lsl #6
    40e0:	29050204 	stmdbcs	r5, {r2, r9}
    40e4:	01018903 	tsteq	r1, r3, lsl #18
    40e8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    40ec:	03040501 	movweq	r0, #17665	; 0x4501
    40f0:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    40f4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    40f8:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    40fc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4100:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4104:	01041705 	tsteq	r4, r5, lsl #14
    4108:	03060205 	movweq	r0, #25093	; 0x6205
    410c:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    4110:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4114:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4118:	06030501 	streq	r0, [r3], -r1, lsl #10
    411c:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    4120:	29050204 	stmdbcs	r5, {r2, r9}
    4124:	0102b603 	tsteq	r2, r3, lsl #12
    4128:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    412c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    4130:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4134:	207dc003 	rsbscs	ip, sp, r3
    4138:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    413c:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    4140:	20090301 	andcs	r0, r9, r1, lsl #6
    4144:	01000702 	tsteq	r0, r2, lsl #14
    4148:	001f0501 	andseq	r0, pc, r1, lsl #10
    414c:	146c0205 	strbtne	r0, [ip], #-517	; 0xfffffdfb
    4150:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4154:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4158:	010e0514 	tsteq	lr, r4, lsl r5
    415c:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    4160:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4164:	01ff032d 	mvnseq	r0, sp, lsr #6
    4168:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    416c:	86030603 	strhi	r0, [r3], -r3, lsl #12
    4170:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    4174:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4178:	02042f06 	andeq	r2, r4, #6, 30
    417c:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    4180:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4184:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4188:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    418c:	89030604 	stmdbhi	r3, {r2, r9, sl}
    4190:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    4194:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    4198:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    419c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41a0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41a4:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    41a8:	0204207d 	andeq	r2, r4, #125	; 0x7d
    41ac:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    41b0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41b4:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41b8:	017e8c03 	cmneq	lr, r3, lsl #24
    41bc:	79030205 	stmdbvc	r3, {r0, r2, r9}
    41c0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    41c4:	01fb032d 	mvnseq	r0, sp, lsr #6
    41c8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41cc:	8b030603 	blhi	c59e0 <__ccfg+0xa5a38>
    41d0:	0204207e 	andeq	r2, r4, #126	; 0x7e
    41d4:	a6032905 	strge	r2, [r3], -r5, lsl #18
    41d8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41dc:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41e0:	017dd603 	cmneq	sp, r3, lsl #12
    41e4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    41e8:	2002aa03 	andcs	sl, r2, r3, lsl #20
    41ec:	03050104 	movweq	r0, #20740	; 0x5104
    41f0:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    41f4:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    41f8:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    41fc:	06020501 	streq	r0, [r2], -r1, lsl #10
    4200:	03010501 	movweq	r0, #5377	; 0x1501
    4204:	05022009 	streq	r2, [r2, #-9]
    4208:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    420c:	0205001e 	andeq	r0, r5, #30
    4210:	0000149c 	muleq	r0, ip, r4
    4214:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4218:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    421c:	cf032905 	svcgt	0x00032905
    4220:	3d050103 	stfccs	f0, [r5, #-12]
    4224:	17050514 	smladne	r5, r4, r5, r0
    4228:	01063805 	tsteq	r6, r5, lsl #16
    422c:	1e050104 	adfnes	f0, f5, f4
    4230:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4234:	38050204 	stmdacc	r5, {r2, r9}
    4238:	2003d803 	andcs	sp, r3, r3, lsl #16
    423c:	02050104 	andeq	r0, r5, #4, 2
    4240:	7cab0306 	stcvc	3, cr0, [fp], #24
    4244:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4248:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    424c:	3d050103 	stfccs	f0, [r5, #-12]
    4250:	17050514 	smladne	r5, r4, r5, r0
    4254:	01063805 	tsteq	r6, r5, lsl #16
    4258:	01050104 	tsteq	r5, r4, lsl #2
    425c:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    4260:	01000402 	tsteq	r0, r2, lsl #8
    4264:	00270501 	eoreq	r0, r7, r1, lsl #10
    4268:	14b40205 	ldrtne	r0, [r4], #517	; 0x205
    426c:	d7030000 	strle	r0, [r3, -r0]
    4270:	02050100 	andeq	r0, r5, #0, 2
    4274:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4278:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    427c:	ba033805 	blt	d2298 <__ccfg+0xb22f0>
    4280:	01042e03 	tsteq	r4, r3, lsl #28
    4284:	ca030905 	bgt	c66a0 <__ccfg+0xa66f8>
    4288:	0204207c 	andeq	r2, r4, #124	; 0x7c
    428c:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    4290:	01042e03 	tsteq	r4, r3, lsl #28
    4294:	03060805 	movweq	r0, #26629	; 0x6805
    4298:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    429c:	3c730302 	ldclcc	3, cr0, [r3], #-8
    42a0:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    42a4:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    42a8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42ac:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42b0:	06020501 	streq	r0, [r2], -r1, lsl #10
    42b4:	017cc003 	cmneq	ip, r3
    42b8:	38050204 	stmdacc	r5, {r2, r9}
    42bc:	2003c003 	andcs	ip, r3, r3
    42c0:	02050104 	andeq	r0, r5, #4, 2
    42c4:	7cc00306 	stclvc	3, cr0, [r0], {6}
    42c8:	06052f20 	streq	r2, [r5], -r0, lsr #30
    42cc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    42d0:	02042f06 	andeq	r2, r4, #6, 30
    42d4:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    42d8:	3d050103 	stfccs	f0, [r5, #-12]
    42dc:	17050514 	smladne	r5, r4, r5, r0
    42e0:	01063805 	tsteq	r6, r5, lsl #16
    42e4:	02050104 	andeq	r0, r5, #4, 2
    42e8:	7cc30306 	stclvc	3, cr0, [r3], {6}
    42ec:	060f052e 	streq	r0, [pc], -lr, lsr #10
    42f0:	36010519 			; <UNDEFINED> instruction: 0x36010519
    42f4:	03060305 	movweq	r0, #25349	; 0x6305
    42f8:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    42fc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4300:	4b4c4b06 	blmi	1316f20 <__ccfg+0x12f6f78>
    4304:	01000702 	tsteq	r0, r2, lsl #14
    4308:	00160501 	andseq	r0, r6, r1, lsl #10
    430c:	15080205 	strne	r0, [r8, #-517]	; 0xfffffdfb
    4310:	81030000 	mrshi	r0, (UNDEF: 3)
    4314:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4318:	06160516 			; <UNDEFINED> instruction: 0x06160516
    431c:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4320:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4324:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4328:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    432c:	01050106 	tsteq	r5, r6, lsl #2
    4330:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4334:	0302051b 	movweq	r0, #9499	; 0x251b
    4338:	01010166 	tsteq	r1, r6, ror #2
    433c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4340:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4344:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4348:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    434c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4350:	03020501 	movweq	r0, #9473	; 0x2501
    4354:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4358:	03380502 	teqeq	r8, #8388608	; 0x800000
    435c:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    4360:	06020501 	streq	r0, [r2], -r1, lsl #10
    4364:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4368:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    436c:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    4370:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4374:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4378:	06020501 	streq	r0, [r2], -r1, lsl #10
    437c:	017ce303 	cmneq	ip, r3, lsl #6
    4380:	38050204 	stmdacc	r5, {r2, r9}
    4384:	20039d03 	andcs	r9, r3, r3, lsl #26
    4388:	02050104 	andeq	r0, r5, #4, 2
    438c:	7ce30306 	stclvc	3, cr0, [r3], #24
    4390:	03030520 	movweq	r0, #13600	; 0x3520
    4394:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    4398:	09020106 	stmdbeq	r2, {r1, r2, r8}
    439c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43a0:	02050017 	andeq	r0, r5, #23
    43a4:	00001548 	andeq	r1, r0, r8, asr #10
    43a8:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    43ac:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    43b0:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    43b4:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    43b8:	06030520 	streq	r0, [r3], -r0, lsr #10
    43bc:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    43c0:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    43c4:	3c130303 	ldccc	3, cr0, [r3], {3}
    43c8:	01060905 	tsteq	r6, r5, lsl #18
    43cc:	2f060305 	svccs	0x00060305
    43d0:	01050101 	tsteq	r5, r1, lsl #2
    43d4:	03021406 	movweq	r1, #9222	; 0x2406
    43d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43dc:	02050011 	andeq	r0, r5, #17
    43e0:	0000156c 	andeq	r1, r0, ip, ror #10
    43e4:	01019203 	tsteq	r1, r3, lsl #4
    43e8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    43ec:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    43f0:	2f062402 	svccs	0x00062402
    43f4:	01060805 	tsteq	r6, r5, lsl #16
    43f8:	0e030105 	adfeqs	f0, f3, f5
    43fc:	0308052e 	movweq	r0, #34094	; 0x852e
    4400:	02052072 	andeq	r2, r5, #114	; 0x72
    4404:	200d0306 	andcs	r0, sp, r6, lsl #6
    4408:	13060105 	movwne	r0, #24837	; 0x6105
    440c:	01000302 	tsteq	r0, r2, lsl #6
    4410:	00120501 	andseq	r0, r2, r1, lsl #10
    4414:	15800205 	strne	r0, [r0, #517]	; 0x205
    4418:	a7030000 	strge	r0, [r3, -r0]
    441c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4420:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4424:	20050501 	andcs	r0, r5, r1, lsl #10
    4428:	2f060305 	svccs	0x00060305
    442c:	01060905 	tsteq	r6, r5, lsl #18
    4430:	2f060305 	svccs	0x00060305
    4434:	30060105 	andcc	r0, r6, r5, lsl #2
    4438:	01000302 	tsteq	r0, r2, lsl #6
    443c:	002b0501 	eoreq	r0, fp, r1, lsl #10
    4440:	00000205 	andeq	r0, r0, r5, lsl #4
    4444:	af030000 	svcge	0x00030000
    4448:	20060101 	andcs	r0, r6, r1, lsl #2
    444c:	30060205 	andcc	r0, r6, r5, lsl #4
    4450:	01060505 	tsteq	r6, r5, lsl #10
    4454:	31060205 	tstcc	r6, r5, lsl #4
    4458:	01060505 	tsteq	r6, r5, lsl #10
    445c:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    4460:	02052012 	andeq	r2, r5, #18
    4464:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4468:	03290502 			; <UNDEFINED> instruction: 0x03290502
    446c:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    4470:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4474:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4478:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    447c:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    4480:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4484:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    4488:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    448c:	aa030602 	bge	c5c9c <__ccfg+0xa5cf4>
    4490:	4b2f207d 	blmi	bcc68c <__ccfg+0xbac6e4>
    4494:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4498:	31020520 	tstcc	r2, r0, lsr #10
    449c:	29050204 	stmdbcs	r5, {r2, r9}
    44a0:	0102c703 	tsteq	r2, r3, lsl #14
    44a4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    44a8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    44ac:	01040106 	tsteq	r4, r6, lsl #2
    44b0:	03060205 	movweq	r0, #25093	; 0x6205
    44b4:	302e7db4 	strhtcc	r7, [lr], -r4
    44b8:	13060105 	movwne	r0, #24837	; 0x6105
    44bc:	03060305 	movweq	r0, #25349	; 0x6305
    44c0:	0a052e79 	beq	14feac <__ccfg+0x12ff04>
    44c4:	08050106 	stmdaeq	r5, {r1, r2, r8}
    44c8:	030a052e 	movweq	r0, #42286	; 0xa52e
    44cc:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    44d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    44d4:	02050031 	andeq	r0, r5, #49	; 0x31
    44d8:	00000000 	andeq	r0, r0, r0
    44dc:	0101ca03 	tsteq	r1, r3, lsl #20
    44e0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    44e4:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    44e8:	3105220c 	tstcc	r5, ip, lsl #4
    44ec:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    44f0:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    44f4:	03053005 	movweq	r3, #20485	; 0x5005
    44f8:	06053206 	streq	r3, [r5], -r6, lsl #4
    44fc:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4500:	20060520 	andcs	r0, r6, r0, lsr #10
    4504:	30060305 	andcc	r0, r6, r5, lsl #6
    4508:	01060605 	tsteq	r6, r5, lsl #12
    450c:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4510:	30320603 	eorscc	r0, r2, r3, lsl #12
    4514:	0a030405 	beq	c5530 <__ccfg+0xa5588>
    4518:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    451c:	20090501 	andcs	r0, r9, r1, lsl #10
    4520:	05201005 	streq	r1, [r0, #-5]!
    4524:	04052009 	streq	r2, [r5], #-9
    4528:	11052206 	tstne	r5, r6, lsl #4
    452c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4530:	201f0520 	andscs	r0, pc, r0, lsr #10
    4534:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4538:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    453c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4540:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4544:	0b053106 	bleq	150964 <__ccfg+0x1309bc>
    4548:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    454c:	052f2f06 	streq	r2, [pc, #-3846]!	; 364e <__exidx_end+0x9da>
    4550:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4554:	20310301 	eorscs	r0, r1, r1, lsl #6
    4558:	03060405 	movweq	r0, #25605	; 0x6405
    455c:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    4560:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4564:	20250520 	eorcs	r0, r5, r0, lsr #10
    4568:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    456c:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    4570:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4574:	0b052804 	bleq	14e58c <__ccfg+0x12e5e4>
    4578:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    457c:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    4580:	03063805 	movweq	r3, #26629	; 0x6805
    4584:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    4588:	03040501 	movweq	r0, #17665	; 0x4501
    458c:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    4590:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    4594:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4598:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    459c:	3d050103 	stfccs	f0, [r5, #-12]
    45a0:	17050514 	smladne	r5, r4, r5, r0
    45a4:	01063805 	tsteq	r6, r5, lsl #16
    45a8:	02050104 	andeq	r0, r5, #4, 2
    45ac:	7cb20306 	ldcvc	3, cr0, [r2], #24
    45b0:	4b4b2f20 	blmi	12d0238 <__ccfg+0x12b0290>
    45b4:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    45b8:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    45bc:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    45c0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45c4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    45c8:	06020501 	streq	r0, [r2], -r1, lsl #10
    45cc:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    45d0:	03060b05 	movweq	r0, #27397	; 0x6b05
    45d4:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    45d8:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    45dc:	01061305 	tsteq	r6, r5, lsl #6
    45e0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    45e4:	2205202a 	andcs	r2, r5, #42	; 0x2a
    45e8:	06050520 	streq	r0, [r5], -r0, lsr #10
    45ec:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    45f0:	06050501 	streq	r0, [r5], -r1, lsl #10
    45f4:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    45f8:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    45fc:	03060405 	movweq	r0, #25605	; 0x6405
    4600:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4604:	03010609 	movweq	r0, #5641	; 0x1609
    4608:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    460c:	6b032106 	blvs	cca2c <__ccfg+0xaca84>
    4610:	0b035920 	bleq	daa98 <__ccfg+0xbaaf0>
    4614:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4618:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    461c:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4620:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4624:	ba030603 	blt	c5e38 <__ccfg+0xa5e90>
    4628:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    462c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4630:	0100083b 	tsteq	r0, fp, lsr r8
    4634:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4638:	00000205 	andeq	r0, r0, r5, lsl #4
    463c:	a0030000 	andge	r0, r3, r0
    4640:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4644:	3b051414 	blcc	14969c <__ccfg+0x1296f4>
    4648:	0c050e06 	stceq	14, cr0, [r5], {6}
    464c:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    4650:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4654:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4658:	06030532 			; <UNDEFINED> instruction: 0x06030532
    465c:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4660:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4664:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4668:	053f0603 	ldreq	r0, [pc, #-1539]!	; 406d <__exidx_end+0x13f9>
    466c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4670:	052f0603 	streq	r0, [pc, #-1539]!	; 4075 <__exidx_end+0x1401>
    4674:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4678:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    467c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4680:	2f300603 	svccs	0x00300603
    4684:	01060905 	tsteq	r6, r5, lsl #18
    4688:	30060305 	andcc	r0, r6, r5, lsl #6
    468c:	01060c05 	tsteq	r6, r5, lsl #24
    4690:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4694:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4698:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    469c:	2f210604 	svccs	0x00210604
    46a0:	03060105 	movweq	r0, #24837	; 0x6105
    46a4:	03050122 	movweq	r0, #20770	; 0x5122
    46a8:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    46ac:	01061105 	tsteq	r6, r5, lsl #2
    46b0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    46b4:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    46b8:	304a0624 	subcc	r0, sl, r4, lsr #12
    46bc:	29050204 	stmdbcs	r5, {r2, r9}
    46c0:	0101c803 	tsteq	r1, r3, lsl #16
    46c4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    46c8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    46cc:	01040106 	tsteq	r4, r6, lsl #2
    46d0:	b3030305 	movwlt	r0, #13061	; 0x3305
    46d4:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    46d8:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    46dc:	01042001 	tsteq	r4, r1
    46e0:	03060305 	movweq	r0, #25349	; 0x6305
    46e4:	2f2e7eb3 	svccs	0x002e7eb3
    46e8:	01061905 	tsteq	r6, r5, lsl #18
    46ec:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    46f0:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    46f4:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    46f8:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    46fc:	2308052e 	movwcs	r0, #34094	; 0x852e
    4700:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4704:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4708:	03290502 			; <UNDEFINED> instruction: 0x03290502
    470c:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    4710:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4714:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4718:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    471c:	c1030602 	tstgt	r3, r2, lsl #12
    4720:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4724:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4728:	054b4006 	strbeq	r4, [fp, #-6]
    472c:	20730304 	rsbscs	r0, r3, r4, lsl #6
    4730:	01061305 	tsteq	r6, r5, lsl #6
    4734:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4738:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    473c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4740:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4744:	030b0501 	movweq	r0, #46337	; 0xb501
    4748:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    474c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4750:	02050012 	andeq	r0, r5, #18
    4754:	00000000 	andeq	r0, r0, r0
    4758:	0102da03 	tsteq	r2, r3, lsl #20
    475c:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    4760:	01010001 	tsteq	r1, r1
    4764:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4768:	00000002 	andeq	r0, r0, r2
    476c:	02df0300 	sbcseq	r0, pc, #0, 6
    4770:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    4774:	13060105 	movwne	r0, #24837	; 0x6105
    4778:	01000202 	tsteq	r0, r2, lsl #4
    477c:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4780:	02050029 	andeq	r0, r5, #41	; 0x29
    4784:	00000000 	andeq	r0, r0, r0
    4788:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    478c:	01060505 	tsteq	r6, r5, lsl #10
    4790:	21060305 	tstcs	r6, r5, lsl #6
    4794:	01060705 	tsteq	r6, r5, lsl #14
    4798:	30060205 	andcc	r0, r6, r5, lsl #4
    479c:	01060505 	tsteq	r6, r5, lsl #10
    47a0:	21060305 	tstcs	r6, r5, lsl #6
    47a4:	01060805 	tsteq	r6, r5, lsl #16
    47a8:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    47ac:	13060105 	movwne	r0, #24837	; 0x6105
    47b0:	01000302 	tsteq	r0, r2, lsl #6
    47b4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    47b8:	02050017 	andeq	r0, r5, #23
    47bc:	00000000 	andeq	r0, r0, r0
    47c0:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    47c4:	17051402 	strne	r1, [r5, -r2, lsl #8]
    47c8:	02051006 	andeq	r1, r5, #6
    47cc:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    47d0:	13060105 	movwne	r0, #24837	; 0x6105
    47d4:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    47d8:	01010002 	tsteq	r1, r2
    47dc:	000001c1 	andeq	r0, r0, r1, asr #3
    47e0:	01210003 			; <UNDEFINED> instruction: 0x01210003
    47e4:	01020000 	mrseq	r0, (UNDEF: 2)
    47e8:	000d0efb 	strdeq	r0, [sp], -fp
    47ec:	01010101 	tsteq	r1, r1, lsl #2
    47f0:	01000000 	mrseq	r0, (UNDEF: 0)
    47f4:	2f010000 	svccs	0x00010000
    47f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    47fc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4800:	2f6e6974 	svccs	0x006e6974
    4804:	6b736544 	blvs	1cddd1c <__ccfg+0x1cbdd74>
    4808:	2f706f74 	svccs	0x00706f74
    480c:	4f534c4f 	svcmi	0x00534c4f
    4810:	2f54454e 	svccs	0x0054454e
    4814:	4f434950 	svcmi	0x00434950
    4818:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    481c:	2f534f63 	svccs	0x00534f63
    4820:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4824:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4828:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    482c:	73752f00 	cmnvc	r5, #0, 30
    4830:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4834:	63672f62 	cmnvs	r7, #392	; 0x188
    4838:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    483c:	6f6e2d6d 	svcvs	0x006e2d6d
    4840:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4844:	2f696261 	svccs	0x00696261
    4848:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    484c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4850:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4854:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4858:	2f656d6f 	svccs	0x00656d6f
    485c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4860:	442f6e69 	strtmi	r6, [pc], #-3689	; 4868 <__exidx_end+0x1bf4>
    4864:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4868:	4f2f706f 	svcmi	0x002f706f
    486c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4870:	502f5445 	eorpl	r5, pc, r5, asr #8
    4874:	534f4349 	movtpl	r4, #62281	; 0xf349
    4878:	6369502f 	cmnvs	r9, #47	; 0x2f
    487c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4880:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4884:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4888:	2f656d6f 	svccs	0x00656d6f
    488c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4890:	442f6e69 	strtmi	r6, [pc], #-3689	; 4898 <__exidx_end+0x1c24>
    4894:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4898:	4f2f706f 	svcmi	0x002f706f
    489c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    48a0:	502f5445 	eorpl	r5, pc, r5, asr #8
    48a4:	534f4349 	movtpl	r4, #62281	; 0xf349
    48a8:	6369502f 	cmnvs	r9, #47	; 0x2f
    48ac:	0000534f 	andeq	r5, r0, pc, asr #6
    48b0:	5f726573 	svcpl	0x00726573
    48b4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    48b8:	00000100 	andeq	r0, r0, r0, lsl #2
    48bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    48c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    48c4:	00000200 	andeq	r0, r0, r0, lsl #4
    48c8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    48cc:	0300682e 	movweq	r6, #2094	; 0x82e
    48d0:	616d0000 	cmnvs	sp, r0
    48d4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    48d8:	00000300 	andeq	r0, r0, r0, lsl #6
    48dc:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    48e0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    48e4:	0300682e 	movweq	r6, #2094	; 0x82e
    48e8:	75620000 	strbvc	r0, [r2, #-0]!
    48ec:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    48f0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    48f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    48f8:	73000003 	movwvc	r0, #3
    48fc:	6f697379 	svcvs	0x00697379
    4900:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4904:	05000000 	streq	r0, [r0, #-0]
    4908:	0205002a 	andeq	r0, r5, #42	; 0x2a
    490c:	00001594 	muleq	r0, r4, r5
    4910:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    4914:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    4918:	7a03062a 	bvc	c61c8 <__ccfg+0xa6220>
    491c:	05052001 	streq	r2, [r5, #-1]
    4920:	06020534 			; <UNDEFINED> instruction: 0x06020534
    4924:	06100532 			; <UNDEFINED> instruction: 0x06100532
    4928:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    492c:	21060305 	tstcs	r6, r5, lsl #6
    4930:	01060f05 	tsteq	r6, r5, lsl #30
    4934:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4938:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    493c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4940:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4944:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4948:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    494c:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4950:	054f0205 	strbeq	r0, [pc, #-517]	; 4753 <__exidx_end+0x1adf>
    4954:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4958:	052f0603 	streq	r0, [pc, #-1539]!	; 435d <__exidx_end+0x16e9>
    495c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4960:	02052008 	andeq	r2, r5, #8
    4964:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    4968:	03050106 	movweq	r0, #20742	; 0x5106
    496c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    4970:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4974:	3d593e06 	ldclcc	14, cr3, [r9, #-24]	; 0xffffffe8
    4978:	01060c05 	tsteq	r6, r5, lsl #24
    497c:	2f060205 	svccs	0x00060205
    4980:	01060505 	tsteq	r6, r5, lsl #10
    4984:	2f060305 	svccs	0x00060305
    4988:	01060e05 	tsteq	r6, r5, lsl #28
    498c:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
    4990:	75030603 	strvc	r0, [r3, #-1539]	; 0xfffff9fd
    4994:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4998:	4a6e0301 	bmi	1b855a4 <__ccfg+0x1b655fc>
    499c:	01000702 	tsteq	r0, r2, lsl #14
    49a0:	00019e01 	andeq	r9, r1, r1, lsl #28
    49a4:	3d000300 	stccc	3, cr0, [r0, #-0]
    49a8:	02000001 	andeq	r0, r0, #1
    49ac:	0d0efb01 	vstreq	d15, [lr, #-4]
    49b0:	01010100 	mrseq	r0, (UNDEF: 17)
    49b4:	00000001 	andeq	r0, r0, r1
    49b8:	01000001 	tsteq	r0, r1
    49bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4908 <__exidx_end+0x1c94>
    49c0:	616d2f65 	cmnvs	sp, r5, ror #30
    49c4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    49c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    49cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    49d0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    49d4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    49d8:	4349502f 	movtmi	r5, #36911	; 0x902f
    49dc:	502f534f 	eorpl	r5, pc, pc, asr #6
    49e0:	534f6369 	movtpl	r6, #62313	; 0xf369
    49e4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    49e8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    49ec:	61697265 	cmnvs	r9, r5, ror #4
    49f0:	752f006c 	strvc	r0, [pc, #-108]!	; 498c <__exidx_end+0x1d18>
    49f4:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4830 <__exidx_end+0x1bbc>
    49f8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    49fc:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4a00:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4a04:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4a08:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4a0c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4a10:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4a14:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4a18:	2f006564 	svccs	0x00006564
    4a1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a24:	2f6e6974 	svccs	0x006e6974
    4a28:	6b736544 	blvs	1cddf40 <__ccfg+0x1cbdf98>
    4a2c:	2f706f74 	svccs	0x00706f74
    4a30:	4f534c4f 	svcmi	0x00534c4f
    4a34:	2f54454e 	svccs	0x0054454e
    4a38:	4f434950 	svcmi	0x00434950
    4a3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a40:	2f534f63 	svccs	0x00534f63
    4a44:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4a48:	2f005858 	svccs	0x00005858
    4a4c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a50:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a54:	2f6e6974 	svccs	0x006e6974
    4a58:	6b736544 	blvs	1cddf70 <__ccfg+0x1cbdfc8>
    4a5c:	2f706f74 	svccs	0x00706f74
    4a60:	4f534c4f 	svcmi	0x00534c4f
    4a64:	2f54454e 	svccs	0x0054454e
    4a68:	4f434950 	svcmi	0x00434950
    4a6c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a70:	00534f63 	subseq	r4, r3, r3, ror #30
    4a74:	72657300 	rsbvc	r7, r5, #0, 6
    4a78:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4a7c:	00632e66 	rsbeq	r2, r3, r6, ror #28
    4a80:	73000001 	movwvc	r0, #1
    4a84:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4a88:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4a8c:	73000002 	movwvc	r0, #2
    4a90:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    4a94:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4a98:	61000002 	tstvs	r0, r2
    4a9c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4aa0:	00030068 	andeq	r0, r3, r8, rrx
    4aa4:	63616d00 	cmnvs	r1, #0, 26
    4aa8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4aac:	70000003 	andvc	r0, r0, r3
    4ab0:	5f736e69 	svcpl	0x00736e69
    4ab4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4ab8:	00030068 	andeq	r0, r3, r8, rrx
    4abc:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4ac0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4ac4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4ac8:	0300682e 	movweq	r6, #2094	; 0x82e
    4acc:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4ad0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4ad4:	00040068 	andeq	r0, r4, r8, rrx
    4ad8:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4adc:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4ae0:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4ae4:	00000000 	andeq	r0, r0, r0
    4ae8:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    4aec:	00160c02 	andseq	r0, r6, r2, lsl #24
    4af0:	010b0300 	mrseq	r0, (UNDEF: 59)
    4af4:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4af8:	2c051413 	cfstrscs	mvf1, [r5], {19}
    4afc:	017a0306 	cmneq	sl, r6, lsl #6
    4b00:	260e052e 	strcs	r0, [lr], -lr, lsr #10
    4b04:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    4b08:	3d300603 	ldccc	6, cr0, [r0, #-12]!
    4b0c:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    4b10:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
    4b14:	22060d05 	andcs	r0, r6, #320	; 0x140
    4b18:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    4b1c:	060d0522 	streq	r0, [sp], -r2, lsr #10
    4b20:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4b24:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4b28:	054e0205 	strbeq	r0, [lr, #-517]	; 0xfffffdfb
    4b2c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4b30:	03054a05 	movweq	r4, #23045	; 0x5a05
    4b34:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4b38:	01052402 	tsteq	r5, r2, lsl #8
    4b3c:	09021306 	stmdbeq	r2, {r1, r2, r8, r9, ip}
    4b40:	af010100 	svcge	0x00010100
    4b44:	03000001 	movweq	r0, #1
    4b48:	00013c00 	andeq	r3, r1, r0, lsl #24
    4b4c:	fb010200 	blx	45356 <__ccfg+0x253ae>
    4b50:	01000d0e 	tsteq	r0, lr, lsl #26
    4b54:	00010101 	andeq	r0, r1, r1, lsl #2
    4b58:	00010000 	andeq	r0, r1, r0
    4b5c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4b60:	2f656d6f 	svccs	0x00656d6f
    4b64:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4b68:	442f6e69 	strtmi	r6, [pc], #-3689	; 4b70 <__exidx_end+0x1efc>
    4b6c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4b70:	4f2f706f 	svcmi	0x002f706f
    4b74:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4b78:	502f5445 	eorpl	r5, pc, r5, asr #8
    4b7c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4b80:	6369502f 	cmnvs	r9, #47	; 0x2f
    4b84:	502f534f 	eorpl	r5, pc, pc, asr #6
    4b88:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4b8c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4b90:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4b94:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4b98:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4b9c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4ba0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4ba4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4ba8:	61652d65 	cmnvs	r5, r5, ror #26
    4bac:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4bb0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4bb4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4bb8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4bbc:	6f682f00 	svcvs	0x00682f00
    4bc0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a14 <__exidx_end+0x1da0>
    4bc4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4bc8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4bcc:	6f746b73 	svcvs	0x00746b73
    4bd0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4bd4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4bd8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4bdc:	2f534f43 	svccs	0x00534f43
    4be0:	4f636950 	svcmi	0x00636950
    4be4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4be8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4bec:	6f682f00 	svcvs	0x00682f00
    4bf0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a44 <__exidx_end+0x1dd0>
    4bf4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4bf8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4bfc:	6f746b73 	svcvs	0x00746b73
    4c00:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4c04:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4c08:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4c0c:	2f534f43 	svccs	0x00534f43
    4c10:	4f636950 	svcmi	0x00636950
    4c14:	73000053 	movwvc	r0, #83	; 0x53
    4c18:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4c1c:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    4c20:	00000100 	andeq	r0, r0, r0, lsl #2
    4c24:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4c28:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4c2c:	00000200 	andeq	r0, r0, r0, lsl #4
    4c30:	61647473 	smcvs	18243	; 0x4743
    4c34:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4c38:	00000200 	andeq	r0, r0, r0, lsl #4
    4c3c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4c40:	0300682e 	movweq	r6, #2094	; 0x82e
    4c44:	616d0000 	cmnvs	sp, r0
    4c48:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4c4c:	00000300 	andeq	r0, r0, r0, lsl #6
    4c50:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4c54:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4c58:	0300682e 	movweq	r6, #2094	; 0x82e
    4c5c:	75620000 	strbvc	r0, [r2, #-0]!
    4c60:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4c64:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c68:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c6c:	73000003 	movwvc	r0, #3
    4c70:	6f697379 	svcvs	0x00697379
    4c74:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4c78:	623c0000 	eorsvs	r0, ip, #0
    4c7c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4c80:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	002d0500 	eoreq	r0, sp, r0, lsl #10
    4c8c:	16600205 	strbtne	r0, [r0], -r5, lsl #4
    4c90:	0d030000 	stceq	0, cr0, [r3, #-0]
    4c94:	17020501 	strne	r0, [r2, -r1, lsl #10]
    4c98:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    4c9c:	01780306 	cmneq	r8, r6, lsl #6
    4ca0:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    4ca4:	23060205 	movwcs	r0, #25093	; 0x6205
    4ca8:	01061005 	tsteq	r6, r5
    4cac:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4cb0:	052f0603 	streq	r0, [pc, #-1539]!	; 46b5 <__exidx_end+0x1a41>
    4cb4:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4cb8:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4cbc:	0b052106 	bleq	14d0dc <__ccfg+0x12d134>
    4cc0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4cc4:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4cc8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4ccc:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4cd0:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    4cd4:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    4cd8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4cdc:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    4ce0:	01060c05 	tsteq	r6, r5, lsl #24
    4ce4:	30060205 	andcc	r0, r6, r5, lsl #4
    4ce8:	13060105 	movwne	r0, #24837	; 0x6105
    4cec:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    4cf0:	00060266 	andeq	r0, r6, r6, ror #4
    4cf4:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    4cf8:	00030000 	andeq	r0, r3, r0
    4cfc:	00000126 	andeq	r0, r0, r6, lsr #2
    4d00:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d04:	0101000d 	tsteq	r1, sp
    4d08:	00000101 	andeq	r0, r0, r1, lsl #2
    4d0c:	00000100 	andeq	r0, r0, r0, lsl #2
    4d10:	6f682f01 	svcvs	0x00682f01
    4d14:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b68 <__exidx_end+0x1ef4>
    4d18:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d1c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d20:	6f746b73 	svcvs	0x00746b73
    4d24:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d28:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d2c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d30:	2f534f43 	svccs	0x00534f43
    4d34:	4f636950 	svcmi	0x00636950
    4d38:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4d3c:	2f736269 	svccs	0x00736269
    4d40:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4d44:	2f006c61 	svccs	0x00006c61
    4d48:	2f727375 	svccs	0x00727375
    4d4c:	2f62696c 	svccs	0x0062696c
    4d50:	2f636367 	svccs	0x00636367
    4d54:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d58:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d5c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d60:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4d64:	2f312e32 	svccs	0x00312e32
    4d68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d6c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4d70:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4cbc <__exidx_end+0x2048>
    4d74:	616d2f65 	cmnvs	sp, r5, ror #30
    4d78:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d7c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4d80:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4d84:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4d88:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4d8c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4d90:	502f534f 	eorpl	r5, pc, pc, asr #6
    4d94:	534f6369 	movtpl	r6, #62313	; 0xf369
    4d98:	3143432f 	cmpcc	r3, pc, lsr #6
    4d9c:	00585833 	subseq	r5, r8, r3, lsr r8
    4da0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4cec <__exidx_end+0x2078>
    4da4:	616d2f65 	cmnvs	sp, r5, ror #30
    4da8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4dac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4db0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4db4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4db8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4dbc:	4349502f 	movtmi	r5, #36911	; 0x902f
    4dc0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4dc4:	534f6369 	movtpl	r6, #62313	; 0xf369
    4dc8:	5f5f0000 	svcpl	0x005f0000
    4dcc:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    4dd0:	61697265 	cmnvs	r9, r5, ror #4
    4dd4:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4dd8:	73000001 	movwvc	r0, #1
    4ddc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4de0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4de4:	61000002 	tstvs	r0, r2
    4de8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4dec:	00030068 	andeq	r0, r3, r8, rrx
    4df0:	63616d00 	cmnvs	r1, #0, 26
    4df4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4df8:	70000003 	andvc	r0, r0, r3
    4dfc:	5f736e69 	svcpl	0x00736e69
    4e00:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4e04:	00030068 	andeq	r0, r3, r8, rrx
    4e08:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4e0c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4e10:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4e14:	0300682e 	movweq	r6, #2094	; 0x82e
    4e18:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4e1c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4e20:	00040068 	andeq	r0, r4, r8, rrx
    4e24:	01050000 	mrseq	r0, (UNDEF: 5)
    4e28:	c0020500 	andgt	r0, r2, r0, lsl #10
    4e2c:	03000016 	movweq	r0, #22
    4e30:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    4e34:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    4e38:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    4e3c:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    4e40:	01151313 	tsteq	r5, r3, lsl r3
    4e44:	06051301 	streq	r1, [r5], -r1, lsl #6
    4e48:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4e4c:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    4e50:	03050106 	movweq	r0, #20742	; 0x5106
    4e54:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4e58:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4e5c:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    4e60:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    4e64:	01060a05 	tsteq	r6, r5, lsl #20
    4e68:	83060205 	movwhi	r0, #25093	; 0x6205
    4e6c:	01060605 	tsteq	r6, r5, lsl #12
    4e70:	1f211f21 	svcne	0x00211f21
    4e74:	21060205 	tstcs	r6, r5, lsl #4
    4e78:	01060605 	tsteq	r6, r5, lsl #12
    4e7c:	21060205 	tstcs	r6, r5, lsl #4
    4e80:	01060505 	tsteq	r6, r5, lsl #10
    4e84:	30060305 	andcc	r0, r6, r5, lsl #6
    4e88:	4a74033d 	bmi	1d05b84 <__ccfg+0x1ce5bdc>
    4e8c:	01060d05 	tsteq	r6, r5, lsl #26
    4e90:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    4e94:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    4e98:	4b010100 	blmi	452a0 <__ccfg+0x252f8>
    4e9c:	03000002 	movweq	r0, #2
    4ea0:	00012500 	andeq	r2, r1, r0, lsl #10
    4ea4:	fb010200 	blx	456ae <__ccfg+0x25706>
    4ea8:	01000d0e 	tsteq	r0, lr, lsl #26
    4eac:	00010101 	andeq	r0, r1, r1, lsl #2
    4eb0:	00010000 	andeq	r0, r1, r0
    4eb4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4eb8:	2f656d6f 	svccs	0x00656d6f
    4ebc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4ec0:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ec8 <__exidx_end+0x2254>
    4ec4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ec8:	4f2f706f 	svcmi	0x002f706f
    4ecc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4ed0:	502f5445 	eorpl	r5, pc, r5, asr #8
    4ed4:	534f4349 	movtpl	r4, #62281	; 0xf349
    4ed8:	6369502f 	cmnvs	r9, #47	; 0x2f
    4edc:	502f534f 	eorpl	r5, pc, pc, asr #6
    4ee0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4ee4:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4ee8:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4eec:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4ef0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4ef4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4ef8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4efc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4f00:	61652d65 	cmnvs	r5, r5, ror #26
    4f04:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4f08:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4f0c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4f10:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4f14:	6f682f00 	svcvs	0x00682f00
    4f18:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4d6c <__exidx_end+0x20f8>
    4f1c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f20:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f24:	6f746b73 	svcvs	0x00746b73
    4f28:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f2c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f30:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f34:	2f534f43 	svccs	0x00534f43
    4f38:	4f636950 	svcmi	0x00636950
    4f3c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4f40:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4f44:	6f682f00 	svcvs	0x00682f00
    4f48:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4d9c <__exidx_end+0x2128>
    4f4c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f50:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f54:	6f746b73 	svcvs	0x00746b73
    4f58:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f5c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f60:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f64:	2f534f43 	svccs	0x00534f43
    4f68:	4f636950 	svcmi	0x00636950
    4f6c:	5f000053 	svcpl	0x00000053
    4f70:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    4f74:	61697265 	cmnvs	r9, r5, ror #4
    4f78:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4f7c:	73000001 	movwvc	r0, #1
    4f80:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4f84:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4f88:	61000002 	tstvs	r0, r2
    4f8c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4f90:	00030068 	andeq	r0, r3, r8, rrx
    4f94:	63616d00 	cmnvs	r1, #0, 26
    4f98:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4f9c:	70000003 	andvc	r0, r0, r3
    4fa0:	5f736e69 	svcpl	0x00736e69
    4fa4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4fa8:	00030068 	andeq	r0, r3, r8, rrx
    4fac:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4fb0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4fb4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4fb8:	0300682e 	movweq	r6, #2094	; 0x82e
    4fbc:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4fc0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4fc4:	00040068 	andeq	r0, r4, r8, rrx
    4fc8:	01050000 	mrseq	r0, (UNDEF: 5)
    4fcc:	30020500 	andcc	r0, r2, r0, lsl #10
    4fd0:	03000017 	movweq	r0, #23
    4fd4:	06010122 	streq	r0, [r1], -r2, lsr #2
    4fd8:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    4fdc:	13136b02 	tstne	r3, #2048	; 0x800
    4fe0:	06100516 			; <UNDEFINED> instruction: 0x06100516
    4fe4:	20050501 	andcs	r0, r5, r1, lsl #10
    4fe8:	30060305 	andcc	r0, r6, r5, lsl #6
    4fec:	053f0205 	ldreq	r0, [pc, #-517]!	; 4def <__exidx_end+0x217b>
    4ff0:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    4ff4:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    4ff8:	200b0520 	andcs	r0, fp, r0, lsr #10
    4ffc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5000:	2f240603 	svccs	0x00240603
    5004:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    5008:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    500c:	2f061f02 	svccs	0x00061f02
    5010:	01060605 	tsteq	r6, r5, lsl #12
    5014:	30060205 	andcc	r0, r6, r5, lsl #4
    5018:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    501c:	01060505 	tsteq	r6, r5, lsl #10
    5020:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    5024:	01060605 	tsteq	r6, r5, lsl #12
    5028:	2f060405 	svccs	0x00060405
    502c:	01060705 	tsteq	r6, r5, lsl #14
    5030:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    5034:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    5038:	03052106 	movweq	r2, #20742	; 0x5106
    503c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    5040:	20060501 	andcs	r0, r6, r1, lsl #10
    5044:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5048:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    504c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5050:	13052e05 	movwne	r2, #24069	; 0x5e05
    5054:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5058:	0608052f 	streq	r0, [r8], -pc, lsr #10
    505c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5060:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5064:	06030501 	streq	r0, [r3], -r1, lsl #10
    5068:	3102052f 	tstcc	r2, pc, lsr #10
    506c:	01060605 	tsteq	r6, r5, lsl #12
    5070:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5074:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5078:	21010606 	tstcs	r1, r6, lsl #12
    507c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    5080:	0606052f 	streq	r0, [r6], -pc, lsr #10
    5084:	06020501 	streq	r0, [r2], -r1, lsl #10
    5088:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    508c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5090:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5094:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5098:	07053c11 	smladeq	r5, r1, ip, r3
    509c:	06020521 	streq	r0, [r2], -r1, lsr #10
    50a0:	0605054b 	streq	r0, [r5], -fp, asr #10
    50a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    50a8:	060a0524 	streq	r0, [sl], -r4, lsr #10
    50ac:	9f060501 	svcls	0x00060501
    50b0:	051f0a05 	ldreq	r0, [pc, #-2565]	; 46b3 <__exidx_end+0x1a3f>
    50b4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    50b8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50bc:	052f0602 	streq	r0, [pc, #-1538]!	; 4ac2 <__exidx_end+0x1e4e>
    50c0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    50c4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    50c8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    50cc:	052f0603 	streq	r0, [pc, #-1539]!	; 4ad1 <__exidx_end+0x1e5d>
    50d0:	06053002 	streq	r3, [r5], -r2
    50d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    50d8:	01053d06 	tsteq	r5, r6, lsl #26
    50dc:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    50e0:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    50e4:	000d0230 	andeq	r0, sp, r0, lsr r2
    50e8:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    50ec:	00030000 	andeq	r0, r3, r0
    50f0:	0000013a 	andeq	r0, r0, sl, lsr r1
    50f4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    50f8:	0101000d 	tsteq	r1, sp
    50fc:	00000101 	andeq	r0, r0, r1, lsl #2
    5100:	00000100 	andeq	r0, r0, r0, lsl #2
    5104:	6f682f01 	svcvs	0x00682f01
    5108:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4f5c <__exidx_end+0x22e8>
    510c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5110:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5114:	6f746b73 	svcvs	0x00746b73
    5118:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    511c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5120:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5124:	2f534f43 	svccs	0x00534f43
    5128:	4f636950 	svcmi	0x00636950
    512c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5130:	2f736269 	svccs	0x00736269
    5134:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5138:	2f006c61 	svccs	0x00006c61
    513c:	2f727375 	svccs	0x00727375
    5140:	2f62696c 	svccs	0x0062696c
    5144:	2f636367 	svccs	0x00636367
    5148:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    514c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5150:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5154:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5158:	2f312e32 	svccs	0x00312e32
    515c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5160:	00656475 	rsbeq	r6, r5, r5, ror r4
    5164:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50b0 <__exidx_end+0x243c>
    5168:	616d2f65 	cmnvs	sp, r5, ror #30
    516c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5170:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5174:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5178:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    517c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5180:	4349502f 	movtmi	r5, #36911	; 0x902f
    5184:	502f534f 	eorpl	r5, pc, pc, asr #6
    5188:	534f6369 	movtpl	r6, #62313	; 0xf369
    518c:	3143432f 	cmpcc	r3, pc, lsr #6
    5190:	00585833 	subseq	r5, r8, r3, lsr r8
    5194:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50e0 <__exidx_end+0x246c>
    5198:	616d2f65 	cmnvs	sp, r5, ror #30
    519c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    51a0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51a4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51a8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51ac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51b0:	4349502f 	movtmi	r5, #36911	; 0x902f
    51b4:	502f534f 	eorpl	r5, pc, pc, asr #6
    51b8:	534f6369 	movtpl	r6, #62313	; 0xf369
    51bc:	66760000 	ldrbtvs	r0, [r6], -r0
    51c0:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    51c4:	00010063 	andeq	r0, r1, r3, rrx
    51c8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51cc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    51d0:	00020068 	andeq	r0, r2, r8, rrx
    51d4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51d8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    51dc:	00020068 	andeq	r0, r2, r8, rrx
    51e0:	63726100 	cmnvs	r2, #0, 2
    51e4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    51e8:	6d000003 	stcvs	0, cr0, [r0, #-12]
    51ec:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    51f0:	00030068 	andeq	r0, r3, r8, rrx
    51f4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    51f8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    51fc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5200:	62000003 	andvs	r0, r0, #3
    5204:	6f747475 	svcvs	0x00747475
    5208:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    520c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5210:	00000300 	andeq	r0, r0, r0, lsl #6
    5214:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5218:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    521c:	3c000004 	stccc	0, cr0, [r0], {4}
    5220:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5224:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5228:	0000003e 	andeq	r0, r0, lr, lsr r0
    522c:	15050000 	strne	r0, [r5, #-0]
    5230:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    5234:	03000018 	movweq	r0, #24
    5238:	0305010c 	movweq	r0, #20748	; 0x510c
    523c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    5240:	580b0501 	stmdapl	fp, {r0, r8, sl}
    5244:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5248:	01060e05 	tsteq	r6, r5, lsl #28
    524c:	30060305 	andcc	r0, r6, r5, lsl #6
    5250:	01060405 	tsteq	r6, r5, lsl #8
    5254:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    5258:	01010001 	tsteq	r1, r1
    525c:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    5260:	00186c02 	andseq	r6, r8, r2, lsl #24
    5264:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    5268:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    526c:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    5270:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    5274:	03070520 	movweq	r0, #29984	; 0x7520
    5278:	06052071 			; <UNDEFINED> instruction: 0x06052071
    527c:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    5280:	133e0602 	teqne	lr, #2097152	; 0x200000
    5284:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    5288:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    528c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5290:	06020501 	streq	r0, [r2], -r1, lsl #10
    5294:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    5298:	01060505 	tsteq	r6, r5, lsl #10
    529c:	30060305 	andcc	r0, r6, r5, lsl #6
    52a0:	01060605 	tsteq	r6, r5, lsl #12
    52a4:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    52a8:	01060b05 	tsteq	r6, r5, lsl #22
    52ac:	052e1005 	streq	r1, [lr, #-5]!
    52b0:	07052105 	streq	r2, [r5, -r5, lsl #2]
    52b4:	0605052d 	streq	r0, [r5], -sp, lsr #10
    52b8:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    52bc:	0100da03 	tsteq	r0, r3, lsl #20
    52c0:	06070559 			; <UNDEFINED> instruction: 0x06070559
    52c4:	06040501 	streq	r0, [r4], -r1, lsl #10
    52c8:	4a7fa703 	bmi	1feeedc <__ccfg+0x1fcef34>
    52cc:	03060505 	movweq	r0, #25861	; 0x6505
    52d0:	062000c2 	strteq	r0, [r0], -r2, asr #1
    52d4:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    52d8:	06030510 			; <UNDEFINED> instruction: 0x06030510
    52dc:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    52e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    52e4:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    52e8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    52ec:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    52f0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    52f4:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    52f8:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    52fc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5300:	3c090306 	stccc	3, cr0, [r9], {6}
    5304:	01060c05 	tsteq	r6, r5, lsl #24
    5308:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    530c:	7fa90304 	svcvc	0x00a90304
    5310:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    5314:	010f0568 	tsteq	pc, r8, ror #10
    5318:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    531c:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    5320:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    5324:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    5328:	06051406 	streq	r1, [r5], -r6, lsl #8
    532c:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    5330:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    5334:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    5338:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    533c:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    5340:	16053906 	strne	r3, [r5], -r6, lsl #18
    5344:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5348:	06052e06 	streq	r2, [r5], -r6, lsl #28
    534c:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    5350:	20090306 	andcs	r0, r9, r6, lsl #6
    5354:	06120513 			; <UNDEFINED> instruction: 0x06120513
    5358:	2f080501 	svccs	0x00080501
    535c:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    5360:	052f0605 	streq	r0, [pc, #-1541]!	; 4d63 <__exidx_end+0x20ef>
    5364:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5368:	06052012 			; <UNDEFINED> instruction: 0x06052012
    536c:	05593006 	ldrbeq	r3, [r9, #-6]
    5370:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5374:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    5378:	6f03060c 	svcvs	0x0003060c
    537c:	03050501 	movweq	r0, #21761	; 0x5501
    5380:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    5384:	3c062e01 	stccc	14, cr2, [r6], {1}
    5388:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    538c:	4a202082 	bmi	80d59c <__ccfg+0x7ed5f4>
    5390:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    5394:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5398:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    539c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    53a0:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    53a4:	05133006 	ldreq	r3, [r3, #-6]
    53a8:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    53ac:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    53b0:	0606052d 	streq	r0, [r6], -sp, lsr #10
    53b4:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    53b8:	13050106 	movwne	r0, #20742	; 0x5106
    53bc:	06070520 	streq	r0, [r7], -r0, lsr #10
    53c0:	0b05593f 	bleq	15b8c4 <__ccfg+0x13b91c>
    53c4:	06050106 	streq	r0, [r5], -r6, lsl #2
    53c8:	05053006 	streq	r3, [r5, #-6]
    53cc:	016f0306 	cmneq	pc, r6, lsl #6
    53d0:	11030605 	tstne	r3, r5, lsl #12
    53d4:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    53d8:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    53dc:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    53e0:	20582e01 	subscs	r2, r8, r1, lsl #28
    53e4:	210c052e 	tstcs	ip, lr, lsr #10
    53e8:	01060f05 	tsteq	r6, r5, lsl #30
    53ec:	2f060605 	svccs	0x00060605
    53f0:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    53f4:	0a051406 	beq	14a414 <__ccfg+0x12a46c>
    53f8:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    53fc:	21060605 	tstcs	r6, r5, lsl #12
    5400:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    5404:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    5408:	07052e15 	smladeq	r5, r5, lr, r2
    540c:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    5410:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5414:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    5418:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    541c:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    5420:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    5424:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    5428:	134f0505 	movtne	r0, #62725	; 0xf505
    542c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    5430:	2f050511 	svccs	0x00050511
    5434:	13134f06 	tstne	r3, #6, 30
    5438:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    543c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5440:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    5444:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    5448:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    544c:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    5450:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5454:	02050035 	andeq	r0, r5, #53	; 0x35
    5458:	00001a9c 	muleq	r0, ip, sl
    545c:	01019003 	tsteq	r1, r3
    5460:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5464:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    5468:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    546c:	30060305 	andcc	r0, r6, r5, lsl #6
    5470:	06010567 	streq	r0, [r1], -r7, ror #10
    5474:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    5478:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    547c:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    5480:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    5484:	3f060205 	svccc	0x00060205
    5488:	01061505 	tsteq	r6, r5, lsl #10
    548c:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    5490:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    5494:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5498:	0b055805 	bleq	15b4b4 <__ccfg+0x13b50c>
    549c:	20050520 	andcs	r0, r5, r0, lsr #10
    54a0:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    54a4:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    54a8:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    54ac:	03000002 	movweq	r0, #2
    54b0:	00013a00 	andeq	r3, r1, r0, lsl #20
    54b4:	fb010200 	blx	45cbe <__ccfg+0x25d16>
    54b8:	01000d0e 	tsteq	r0, lr, lsl #26
    54bc:	00010101 	andeq	r0, r1, r1, lsl #2
    54c0:	00010000 	andeq	r0, r1, r0
    54c4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    54c8:	2f656d6f 	svccs	0x00656d6f
    54cc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    54d0:	442f6e69 	strtmi	r6, [pc], #-3689	; 54d8 <__exidx_end+0x2864>
    54d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    54d8:	4f2f706f 	svcmi	0x002f706f
    54dc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    54e0:	502f5445 	eorpl	r5, pc, r5, asr #8
    54e4:	534f4349 	movtpl	r4, #62281	; 0xf349
    54e8:	6369502f 	cmnvs	r9, #47	; 0x2f
    54ec:	502f534f 	eorpl	r5, pc, pc, asr #6
    54f0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    54f4:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    54f8:	006c6169 	rsbeq	r6, ip, r9, ror #2
    54fc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5500:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5504:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5508:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    550c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5510:	61652d65 	cmnvs	r5, r5, ror #26
    5514:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5518:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    551c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5520:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5524:	6f682f00 	svcvs	0x00682f00
    5528:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 537c <__exidx_end+0x2708>
    552c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5530:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5534:	6f746b73 	svcvs	0x00746b73
    5538:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    553c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5540:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5544:	2f534f43 	svccs	0x00534f43
    5548:	4f636950 	svcmi	0x00636950
    554c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5550:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5554:	6f682f00 	svcvs	0x00682f00
    5558:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 53ac <__exidx_end+0x2738>
    555c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5560:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5564:	6f746b73 	svcvs	0x00746b73
    5568:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    556c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5570:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5574:	2f534f43 	svccs	0x00534f43
    5578:	4f636950 	svcmi	0x00636950
    557c:	76000053 			; <UNDEFINED> instruction: 0x76000053
    5580:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    5584:	0100632e 	tsteq	r0, lr, lsr #6
    5588:	74730000 	ldrbtvc	r0, [r3], #-0
    558c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5590:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5594:	74730000 	ldrbtvc	r0, [r3], #-0
    5598:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    559c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55a0:	72610000 	rsbvc	r0, r1, #0
    55a4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    55a8:	00000300 	andeq	r0, r0, r0, lsl #6
    55ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    55b0:	0300682e 	movweq	r6, #2094	; 0x82e
    55b4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    55b8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55bc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55c0:	00000300 	andeq	r0, r0, r0, lsl #6
    55c4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    55c8:	5f736e6f 	svcpl	0x00736e6f
    55cc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    55d0:	00030068 	andeq	r0, r3, r8, rrx
    55d4:	73797300 	cmnvc	r9, #0, 6
    55d8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    55dc:	00000400 	andeq	r0, r0, r0, lsl #8
    55e0:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    55e4:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    55e8:	00003e6e 	andeq	r3, r0, lr, ror #28
    55ec:	05000000 	streq	r0, [r0, #-0]
    55f0:	0205003a 	andeq	r0, r5, #58	; 0x3a
    55f4:	00001aec 	andeq	r1, r0, ip, ror #21
    55f8:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    55fc:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    5600:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5604:	2044033a 	subcs	r0, r4, sl, lsr r3
    5608:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    560c:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    5610:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    5614:	200e0316 	andcs	r0, lr, r6, lsl r3
    5618:	11030b05 	tstne	r3, r5, lsl #22
    561c:	0608052e 	streq	r0, [r8], -lr, lsr #10
    5620:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    5624:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5628:	03052e08 	movweq	r2, #24072	; 0x5e08
    562c:	06052106 	streq	r2, [r5], -r6, lsl #2
    5630:	03050106 	movweq	r0, #20742	; 0x5106
    5634:	0b053006 	bleq	151654 <__ccfg+0x1316ac>
    5638:	0f050106 	svceq	0x00050106
    563c:	20030520 	andcs	r0, r3, r0, lsr #10
    5640:	2e030105 	adfcss	f0, f3, f5
    5644:	030305ac 	movweq	r0, #13740	; 0x35ac
    5648:	0b053c52 	bleq	154798 <__ccfg+0x1347f0>
    564c:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    5650:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    5654:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5658:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    565c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5660:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5664:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    5668:	06051e08 	streq	r1, [r5], -r8, lsl #28
    566c:	0604052d 	streq	r0, [r4], -sp, lsr #10
    5670:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    5674:	0b050106 	bleq	145a94 <__ccfg+0x125aec>
    5678:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    567c:	0c050106 	stfeqs	f0, [r5], {6}
    5680:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    5684:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    5688:	0a054e0b 	beq	158ebc <__ccfg+0x138f14>
    568c:	0b053c06 	bleq	1546ac <__ccfg+0x134704>
    5690:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5694:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    5698:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    569c:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    56a0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56a4:	11052f06 	tstne	r5, r6, lsl #30
    56a8:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    56ac:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    56b0:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    56b4:	013c6606 	teqeq	ip, r6, lsl #12
    56b8:	06010620 	streq	r0, [r1], -r0, lsr #12
    56bc:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    56c0:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    56c4:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    56c8:	01062e01 	tsteq	r6, r1, lsl #28
    56cc:	90822e06 	addls	r2, r2, r6, lsl #28
    56d0:	90064a21 	andls	r4, r6, r1, lsr #20
    56d4:	013c5806 	teqeq	ip, r6, lsl #16
    56d8:	2e06012e 	adfcssp	f0, f6, #0.5
    56dc:	82063c06 	andhi	r3, r6, #1536	; 0x600
    56e0:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    56e4:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    56e8:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    56ec:	20100501 	andscs	r0, r0, r1, lsl #10
    56f0:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    56f4:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    56f8:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    56fc:	013c3c06 	teqeq	ip, r6, lsl #24
    5700:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5704:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    5708:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    570c:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    5710:	3c062e06 	stccc	14, cr2, [r6], {6}
    5714:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    5718:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    571c:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    5720:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    5724:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    5728:	2e060106 	adfcss	f0, f6, f6
    572c:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    5730:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    5734:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5738:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    573c:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    5740:	06051306 	streq	r1, [r5], -r6, lsl #6
    5744:	0604052d 	streq	r0, [r4], -sp, lsr #10
    5748:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    574c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5750:	0b052106 	bleq	14db70 <__ccfg+0x12dbc8>
    5754:	07052406 	streq	r2, [r5, -r6, lsl #8]
    5758:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    575c:	01060e05 	tsteq	r6, r5, lsl #28
    5760:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    5764:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    5768:	0a031105 	beq	c9b84 <__ccfg+0xa9bdc>
    576c:	5116054a 	tstpl	r6, sl, asr #10
    5770:	01000502 	tsteq	r0, r2, lsl #10
    5774:	00016701 	andeq	r6, r1, r1, lsl #14
    5778:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    577c:	02000001 	andeq	r0, r0, #1
    5780:	0d0efb01 	vstreq	d15, [lr, #-4]
    5784:	01010100 	mrseq	r0, (UNDEF: 17)
    5788:	00000001 	andeq	r0, r0, r1
    578c:	01000001 	tsteq	r0, r1
    5790:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5794:	2f2e2e2f 	svccs	0x002e2e2f
    5798:	642f2e2e 	strtvs	r2, [pc], #-3630	; 57a0 <__exidx_end+0x2b2c>
    579c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    57a0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    57a4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    57a8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    57ac:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    57b0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    57b4:	31303030 	teqcc	r0, r0, lsr r0
    57b8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    57bc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    57c0:	61746562 	cmnvs	r4, r2, ror #10
    57c4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    57c8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    57cc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5604 <__exidx_end+0x2990>
    57d0:	6f635c73 	svcvs	0x00635c73
    57d4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    57d8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    57dc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    57e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    57e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    57e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    57ec:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    57f0:	3130322d 	teqcc	r0, sp, lsr #4
    57f4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    57f8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57fc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5800:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5804:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5808:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    580c:	616d5c65 	cmnvs	sp, r5, ror #24
    5810:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5814:	3a630065 	bcc	18c59b0 <__ccfg+0x18a5a08>
    5818:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    581c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5820:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5824:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5828:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    582c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5830:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5834:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5838:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    583c:	6f6f745c 	svcvs	0x006f745c
    5840:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5844:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5848:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    584c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5850:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5854:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5858:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    585c:	5f342d69 	svcpl	0x00342d69
    5860:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5864:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5868:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    586c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5870:	61652d65 	cmnvs	r5, r5, ror #26
    5874:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5878:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    587c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5880:	00007379 	andeq	r7, r0, r9, ror r3
    5884:	5f6e6f61 	svcpl	0x006e6f61
    5888:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    588c:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    5890:	00000100 	andeq	r0, r0, r0, lsl #2
    5894:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5898:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    589c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    58a0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    58a4:	00000200 	andeq	r0, r0, r0, lsl #4
    58a8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    58ac:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    58b0:	00030068 	andeq	r0, r3, r8, rrx
    58b4:	6e6f6100 	powvse	f6, f7, f0
    58b8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    58bc:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    58c0:	00010068 	andeq	r0, r1, r8, rrx
    58c4:	05000000 	streq	r0, [r0, #-0]
    58c8:	001e7c02 	andseq	r7, lr, r2, lsl #24
    58cc:	013c0300 	teqeq	ip, r0, lsl #6
    58d0:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    58d4:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    58d8:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    58dc:	01010009 	tsteq	r1, r9
    58e0:	000001a9 	andeq	r0, r0, r9, lsr #3
    58e4:	01410002 	cmpeq	r1, r2
    58e8:	01020000 	mrseq	r0, (UNDEF: 2)
    58ec:	000d0efb 	strdeq	r0, [sp], -fp
    58f0:	01010101 	tsteq	r1, r1, lsl #2
    58f4:	01000000 	mrseq	r0, (UNDEF: 0)
    58f8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    58fc:	2f2e2e2f 	svccs	0x002e2e2f
    5900:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5904:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    5908:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    590c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5910:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5914:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5918:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    591c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5920:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5924:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5928:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    592c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5930:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5934:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5938:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    593c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 57d4 <__exidx_end+0x2b60>
    5940:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5944:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5948:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    594c:	6f6e2d6d 	svcvs	0x006e2d6d
    5950:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5954:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5958:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    595c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5960:	615c3371 	cmpvs	ip, r1, ror r3
    5964:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5968:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    596c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5970:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5974:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5978:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    597c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5980:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5984:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5988:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    598c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5990:	31303030 	teqcc	r0, r0, lsr r0
    5994:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5998:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    599c:	61746562 	cmnvs	r4, r2, ror #10
    59a0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    59a4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    59a8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 57e0 <__exidx_end+0x2b6c>
    59ac:	6f635c73 	svcvs	0x00635c73
    59b0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    59b4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    59b8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    59bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    59c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    59c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    59c8:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    59cc:	3130322d 	teqcc	r0, sp, lsr #4
    59d0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    59d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    59d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    59dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    59e0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    59e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    59e8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    59ec:	61000073 	tstvs	r0, r3, ror r0
    59f0:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    59f4:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    59f8:	00000100 	andeq	r0, r0, r0, lsl #2
    59fc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5a00:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5a04:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5a08:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5a0c:	00000200 	andeq	r0, r0, r0, lsl #4
    5a10:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5a14:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5a18:	00030068 	andeq	r0, r3, r8, rrx
    5a1c:	6e6f6100 	powvse	f6, f7, f0
    5a20:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    5a24:	0100682e 	tsteq	r0, lr, lsr #16
    5a28:	00000000 	andeq	r0, r0, r0
    5a2c:	00000205 	andeq	r0, r0, r5, lsl #4
    5a30:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    5a34:	04020001 	streq	r0, [r2], #-1
    5a38:	010a0301 	tsteq	sl, r1, lsl #6
    5a3c:	01040200 	mrseq	r0, R12_usr
    5a40:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a44:	02001f01 	andeq	r1, r0, #1, 30
    5a48:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a4c:	21010402 	tstcs	r1, r2, lsl #8
    5a50:	01040200 	mrseq	r0, R12_usr
    5a54:	02213021 	eoreq	r3, r1, #33	; 0x21
    5a58:	01010008 	tsteq	r1, r8
    5a5c:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    5a60:	0300001e 	movweq	r0, #30
    5a64:	000100d7 	ldrdeq	r0, [r1], -r7
    5a68:	03010402 	movweq	r0, #5122	; 0x1402
    5a6c:	0200010c 	andeq	r0, r0, #12, 2
    5a70:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a74:	1f010402 	svcne	0x00010402
    5a78:	01040200 	mrseq	r0, R12_usr
    5a7c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a80:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5a84:	31210104 			; <UNDEFINED> instruction: 0x31210104
    5a88:	01000502 	tsteq	r0, r2, lsl #10
    5a8c:	00019c01 	andeq	r9, r1, r1, lsl #24
    5a90:	39000200 	stmdbcc	r0, {r9}
    5a94:	02000001 	andeq	r0, r0, #1
    5a98:	0d0efb01 	vstreq	d15, [lr, #-4]
    5a9c:	01010100 	mrseq	r0, (UNDEF: 17)
    5aa0:	00000001 	andeq	r0, r0, r1
    5aa4:	01000001 	tsteq	r0, r1
    5aa8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5aac:	2f2e2e2f 	svccs	0x002e2e2f
    5ab0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5ab8 <__exidx_end+0x2e44>
    5ab4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5ab8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5abc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5ac0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5ac4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5ac8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5acc:	31303030 	teqcc	r0, r0, lsr r0
    5ad0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5ad4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5ad8:	61746562 	cmnvs	r4, r2, ror #10
    5adc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5ae0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5ae4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 591c <__exidx_end+0x2ca8>
    5ae8:	6f635c73 	svcvs	0x00635c73
    5aec:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5af0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5af4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5af8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5afc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5b00:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5b04:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5b08:	3130322d 	teqcc	r0, sp, lsr #4
    5b0c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5b10:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b14:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b18:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b1c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5b20:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5b24:	616d5c65 	cmnvs	sp, r5, ror #24
    5b28:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5b2c:	3a630065 	bcc	18c5cc8 <__ccfg+0x18a5d20>
    5b30:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5b34:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5b38:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5b3c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5b40:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5b44:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5b48:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5b4c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5b50:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5b54:	6f6f745c 	svcvs	0x006f745c
    5b58:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5b5c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5b60:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5b64:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5b68:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b6c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b70:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b74:	5f342d69 	svcpl	0x00342d69
    5b78:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5b7c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5b80:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5b84:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5b88:	61652d65 	cmnvs	r5, r5, ror #26
    5b8c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5b90:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5b94:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5b98:	00007379 	andeq	r7, r0, r9, ror r3
    5b9c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    5ba0:	00010063 	andeq	r0, r1, r3, rrx
    5ba4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5ba8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5bac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5bb0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5bb4:	00020068 	andeq	r0, r2, r8, rrx
    5bb8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5bbc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5bc0:	0300682e 	movweq	r6, #2094	; 0x82e
    5bc4:	70630000 	rsbvc	r0, r3, r0
    5bc8:	00682e75 	rsbeq	r2, r8, r5, ror lr
    5bcc:	00000001 	andeq	r0, r0, r1
    5bd0:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    5bd4:	0300001e 	movweq	r0, #30
    5bd8:	030100f5 	movweq	r0, #4341	; 0x10f5
    5bdc:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    5be0:	00010100 	andeq	r0, r1, r0, lsl #2
    5be4:	00000205 	andeq	r0, r0, r5, lsl #4
    5be8:	c0030000 	andgt	r0, r3, r0
    5bec:	11030101 	tstne	r3, r1, lsl #2
    5bf0:	00030201 	andeq	r0, r3, r1, lsl #4
    5bf4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5bf8:	001ecc02 	andseq	ip, lr, r2, lsl #24
    5bfc:	028d0300 	addeq	r0, sp, #0, 6
    5c00:	01120301 	tsteq	r2, r1, lsl #6
    5c04:	01000402 	tsteq	r0, r2, lsl #8
    5c08:	02050001 	andeq	r0, r5, #1
    5c0c:	00000000 	andeq	r0, r0, r0
    5c10:	0102d803 	tsteq	r2, r3, lsl #16
    5c14:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    5c18:	01010003 	tsteq	r1, r3
    5c1c:	00020500 	andeq	r0, r2, r0, lsl #10
    5c20:	03000000 	movweq	r0, #0
    5c24:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    5c28:	01000402 	tsteq	r0, r2, lsl #8
    5c2c:	0001e901 	andeq	lr, r1, r1, lsl #18
    5c30:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    5c34:	02000001 	andeq	r0, r0, #1
    5c38:	0d0efb01 	vstreq	d15, [lr, #-4]
    5c3c:	01010100 	mrseq	r0, (UNDEF: 17)
    5c40:	00000001 	andeq	r0, r0, r1
    5c44:	01000001 	tsteq	r0, r1
    5c48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c4c:	2f2e2e2f 	svccs	0x002e2e2f
    5c50:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5c58 <__exidx_end+0x2fe4>
    5c54:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5c58:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5c5c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5c60:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5c64:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5c68:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5c6c:	31303030 	teqcc	r0, r0, lsr r0
    5c70:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5c74:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5c78:	61746562 	cmnvs	r4, r2, ror #10
    5c7c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5c80:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5c84:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5abc <__exidx_end+0x2e48>
    5c88:	6f635c73 	svcvs	0x00635c73
    5c8c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5c90:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5c94:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5c98:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5c9c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5ca0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5ca4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5ca8:	3130322d 	teqcc	r0, sp, lsr #4
    5cac:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5cb0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5cb4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5cb8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5cbc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5cc0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5cc4:	616d5c65 	cmnvs	sp, r5, ror #24
    5cc8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5ccc:	3a630065 	bcc	18c5e68 <__ccfg+0x18a5ec0>
    5cd0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5cd4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5cd8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5cdc:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5ce0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5ce4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5ce8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5cec:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5cf0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5cf4:	6f6f745c 	svcvs	0x006f745c
    5cf8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5cfc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5d00:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5d04:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5d08:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5d0c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5d10:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5d14:	5f342d69 	svcpl	0x00342d69
    5d18:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5d1c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5d20:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5d24:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5d28:	61652d65 	cmnvs	r5, r5, ror #26
    5d2c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5d30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5d34:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5d38:	00007379 	andeq	r7, r0, r9, ror r3
    5d3c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5d40:	00632e70 	rsbeq	r2, r3, r0, ror lr
    5d44:	61000001 	tstvs	r0, r1
    5d48:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    5d4c:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    5d50:	00000100 	andeq	r0, r0, r0, lsl #2
    5d54:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5d58:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5d5c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5d60:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5d64:	00000200 	andeq	r0, r0, r0, lsl #4
    5d68:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5d6c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5d70:	00030068 	andeq	r0, r3, r8, rrx
    5d74:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5d78:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5d7c:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5d80:	00000100 	andeq	r0, r0, r0, lsl #2
    5d84:	70696863 	rsbvc	r6, r9, r3, ror #16
    5d88:	6f666e69 	svcvs	0x00666e69
    5d8c:	0100682e 	tsteq	r0, lr, lsr #16
    5d90:	65730000 	ldrbvs	r0, [r3, #-0]!
    5d94:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    5d98:	00010068 	andeq	r0, r1, r8, rrx
    5d9c:	05000000 	streq	r0, [r0, #-0]
    5da0:	001ed402 	andseq	sp, lr, r2, lsl #8
    5da4:	028d0300 	addeq	r0, sp, #0, 6
    5da8:	0a032001 	beq	cddb4 <__ccfg+0xade0c>
    5dac:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5db0:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    5db4:	1f212d43 	svcne	0x00212d43
    5db8:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    5dbc:	01046604 	tsteq	r4, r4, lsl #12
    5dc0:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    5dc4:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    5dc8:	2f3d2d4a 	svccs	0x003d2d4a
    5dcc:	2f2f1f2f 	svccs	0x002f1f2f
    5dd0:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    5dd4:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    5dd8:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    5ddc:	0101001e 	tsteq	r1, lr, lsl r0
    5de0:	a8020500 	stmdage	r2, {r8, sl}
    5de4:	0300001f 	movweq	r0, #31
    5de8:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    5dec:	41334330 	teqmi	r3, r0, lsr r3
    5df0:	333c0903 	teqcc	ip, #49152	; 0xc000
    5df4:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    5df8:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    5dfc:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    5e00:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    5e04:	03496742 	movteq	r6, #38722	; 0x9742
    5e08:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    5e0c:	004b6924 	subeq	r6, fp, r4, lsr #18
    5e10:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    5e14:	0013024d 	andseq	r0, r3, sp, asr #4
    5e18:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    5e1c:	00020000 	andeq	r0, r2, r0
    5e20:	00000165 	andeq	r0, r0, r5, ror #2
    5e24:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e28:	0101000d 	tsteq	r1, sp
    5e2c:	00000101 	andeq	r0, r0, r1, lsl #2
    5e30:	00000100 	andeq	r0, r0, r0, lsl #2
    5e34:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5e38:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e3c:	2f2e2e2f 	svccs	0x002e2e2f
    5e40:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5e44:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5e48:	3a630062 	bcc	18c5fd8 <__ccfg+0x18a6030>
    5e4c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5e50:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5e54:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5e58:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5e5c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5e60:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5e64:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5e68:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5e6c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5e70:	6f6f745c 	svcvs	0x006f745c
    5e74:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5e78:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5e7c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5e80:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5e84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5e88:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5e8c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5e90:	5f342d69 	svcpl	0x00342d69
    5e94:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5e98:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5e9c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ea0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ea4:	61652d65 	cmnvs	r5, r5, ror #26
    5ea8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5eac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5eb0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5eb4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5eb8:	6300656e 	movwvs	r6, #1390	; 0x56e
    5ebc:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5ec0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5ec4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5ec8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5ecc:	5f393130 	svcpl	0x00393130
    5ed0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5ed4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5ed8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5edc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5ee0:	6f745c36 	svcvs	0x00745c36
    5ee4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5ee8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5eec:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5ef0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5ef4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5ef8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5efc:	61652d65 	cmnvs	r5, r5, ror #26
    5f00:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5f04:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5f08:	71353130 	teqvc	r5, r0, lsr r1
    5f0c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5f10:	6f6e2d6d 	svcvs	0x006e2d6d
    5f14:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5f18:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5f1c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5f20:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5f24:	00737973 	rsbseq	r7, r3, r3, ror r9
    5f28:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5f2c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5f30:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    5f34:	00000100 	andeq	r0, r0, r0, lsl #2
    5f38:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5f3c:	6f725f70 	svcvs	0x00725f70
    5f40:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5f44:	73000001 	movwvc	r0, #1
    5f48:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    5f4c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    5f50:	00010068 	andeq	r0, r1, r8, rrx
    5f54:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5f58:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5f5c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5f60:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5f64:	00020068 	andeq	r0, r2, r8, rrx
    5f68:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5f6c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5f70:	0300682e 	movweq	r6, #2094	; 0x82e
    5f74:	64640000 	strbtvs	r0, [r4], #-0
    5f78:	00682e69 	rsbeq	r2, r8, r9, ror #28
    5f7c:	6f000001 	svcvs	0x00000001
    5f80:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    5f84:	00000100 	andeq	r0, r0, r0, lsl #2
    5f88:	02050000 	andeq	r0, r5, #0
    5f8c:	0000204c 	andeq	r2, r0, ip, asr #32
    5f90:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    5f94:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    5f98:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    5f9c:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    5fa0:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    5fa4:	01042000 	mrseq	r2, (UNDEF: 4)
    5fa8:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    5fac:	d9030204 	stmdble	r3, {r2, r9}
    5fb0:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    5fb4:	ac030104 	stfges	f0, [r3], {4}
    5fb8:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    5fbc:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    5fc0:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    5fc4:	03587803 	cmpeq	r8, #196608	; 0x30000
    5fc8:	7303200d 	movwvc	r2, #12301	; 0x300d
    5fcc:	2010033c 	andscs	r0, r0, ip, lsr r3
    5fd0:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5fd4:	01000d02 	tsteq	r0, r2, lsl #26
    5fd8:	02050001 	andeq	r0, r5, #1
    5fdc:	000020c8 	andeq	r2, r0, r8, asr #1
    5fe0:	0101bf03 	tsteq	r1, r3, lsl #30
    5fe4:	4a78031a 	bmi	1e06c54 <__ccfg+0x1de6cac>
    5fe8:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    5fec:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    5ff0:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    5ff4:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    5ff8:	3002042d 	andcc	r0, r2, sp, lsr #8
    5ffc:	03010421 	movweq	r0, #5153	; 0x1421
    6000:	2f3d2e0b 	svccs	0x003d2e0b
    6004:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    6008:	302c4d66 	eorcc	r4, ip, r6, ror #26
    600c:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    6010:	01001502 	tsteq	r0, r2, lsl #10
    6014:	02050001 	andeq	r0, r5, #1
    6018:	00002174 	andeq	r2, r0, r4, ror r1
    601c:	01049f03 	tsteq	r4, r3, lsl #30
    6020:	03010c03 	movweq	r0, #7171	; 0x1c03
    6024:	77032009 	strvc	r2, [r3, -r9]
    6028:	33312120 	teqcc	r1, #32, 2
    602c:	31303027 	teqcc	r0, r7, lsr #32
    6030:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    6034:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    6038:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    603c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    6040:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    6044:	00010100 	andeq	r0, r1, r0, lsl #2
    6048:	21d00205 	bicscs	r0, r0, r5, lsl #4
    604c:	e5030000 	str	r0, [r3, #-0]
    6050:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    6054:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    6058:	00050233 	andeq	r0, r5, r3, lsr r2
    605c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6060:	00000002 	andeq	r0, r0, r2
    6064:	05810300 	streq	r0, [r1, #768]	; 0x300
    6068:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    606c:	01010006 	tsteq	r1, r6
    6070:	e8020500 	stmda	r2, {r8, sl}
    6074:	03000021 	movweq	r0, #33	; 0x21
    6078:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    607c:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    6080:	01010006 	tsteq	r1, r6
    6084:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    6088:	03000021 	movweq	r0, #33	; 0x21
    608c:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    6090:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    6094:	01010008 	tsteq	r1, r8
    6098:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    609c:	03000022 	movweq	r0, #34	; 0x22
    60a0:	030105db 	movweq	r0, #5595	; 0x15db
    60a4:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    60a8:	20770320 	rsbscs	r0, r7, r0, lsr #6
    60ac:	03200903 			; <UNDEFINED> instruction: 0x03200903
    60b0:	2a352079 	bcs	d4e29c <__ccfg+0xd2e2f4>
    60b4:	30312232 	eorscc	r2, r1, r2, lsr r2
    60b8:	30274732 	eorcc	r4, r7, r2, lsr r7
    60bc:	17034732 	smladxne	r3, r2, r7, r4
    60c0:	3a36372e 	bcc	d93d80 <__ccfg+0xd73dd8>
    60c4:	00080227 	andeq	r0, r8, r7, lsr #4
    60c8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    60cc:	00227002 	eoreq	r7, r2, r2
    60d0:	06a90300 	strteq	r0, [r9], r0, lsl #6
    60d4:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    60d8:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    60dc:	01010003 	tsteq	r1, r3
    60e0:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    60e4:	03000022 	movweq	r0, #34	; 0x22
    60e8:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    60ec:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    60f0:	00030220 	andeq	r0, r3, r0, lsr #4
    60f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    60f8:	00229802 	eoreq	r9, r2, r2, lsl #16
    60fc:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    6100:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6104:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    6108:	01010003 	tsteq	r1, r3
    610c:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    6110:	03000022 	movweq	r0, #34	; 0x22
    6114:	160106e2 	strne	r0, [r1], -r2, ror #13
    6118:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    611c:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    6120:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    6124:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    6128:	01010003 	tsteq	r1, r3
    612c:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    6130:	03000022 	movweq	r0, #34	; 0x22
    6134:	16010782 	strne	r0, [r1], -r2, lsl #15
    6138:	00060233 	andeq	r0, r6, r3, lsr r2
    613c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6140:	0022e402 	eoreq	lr, r2, r2, lsl #8
    6144:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    6148:	43211601 			; <UNDEFINED> instruction: 0x43211601
    614c:	03333429 	teqeq	r3, #687865856	; 0x29000000
    6150:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    6154:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    6158:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    615c:	00010100 	andeq	r0, r1, r0, lsl #2
    6160:	23100205 	tstcs	r0, #1342177280	; 0x50000000
    6164:	b4030000 	strlt	r0, [r3], #-0
    6168:	21150107 	tstcs	r5, r7, lsl #2
    616c:	20090355 	andcs	r0, r9, r5, asr r3
    6170:	01000302 	tsteq	r0, r2, lsl #6
    6174:	02050001 	andeq	r0, r5, #1
    6178:	00002324 	andeq	r2, r0, r4, lsr #6
    617c:	0107c803 	tsteq	r7, r3, lsl #16
    6180:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    6184:	0302200a 	movweq	r2, #8202	; 0x200a
    6188:	00010100 	andeq	r0, r1, r0, lsl #2
    618c:	23380205 	teqcs	r8, #1342177280	; 0x50000000
    6190:	a7030000 	strge	r0, [r3, -r0]
    6194:	03200102 			; <UNDEFINED> instruction: 0x03200102
    6198:	1f3d2009 	svcne	0x003d2009
    619c:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    61a0:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    61a4:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    61a8:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    61ac:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    61b0:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61b4:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61b8:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    61bc:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    61c0:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    61c4:	033d3c09 	teqeq	sp, #2304	; 0x900
    61c8:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    61cc:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    61d0:	40211f3d 	eormi	r1, r1, sp, lsr pc
    61d4:	0012024b 	andseq	r0, r2, fp, asr #4
    61d8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    61dc:	00244802 	eoreq	r4, r4, r2, lsl #16
    61e0:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    61e4:	04020001 	streq	r0, [r2], #-1
    61e8:	200e0301 	andcs	r0, lr, r1, lsl #6
    61ec:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    61f0:	4b684d1d 	blmi	1a1966c <__ccfg+0x19f96c4>
    61f4:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    61f8:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    61fc:	315b3d01 	cmpcc	fp, r1, lsl #26
    6200:	01000b02 	tsteq	r0, r2, lsl #22
    6204:	02050001 	andeq	r0, r5, #1
    6208:	000024ac 	andeq	r2, r0, ip, lsr #9
    620c:	01089303 	tsteq	r8, r3, lsl #6
    6210:	2f010903 	svccs	0x00010903
    6214:	0022212d 	eoreq	r2, r2, sp, lsr #2
    6218:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    621c:	0007024b 	andeq	r0, r7, fp, asr #4
    6220:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6224:	0024d402 	eoreq	sp, r4, r2, lsl #8
    6228:	039b0300 	orrseq	r0, fp, #0, 6
    622c:	01090301 	tsteq	r9, r1, lsl #6
    6230:	203c7703 	eorscs	r7, ip, r3, lsl #14
    6234:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    6238:	0a033130 	beq	d2700 <__ccfg+0xb2758>
    623c:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    6240:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 6128 <__exidx_end+0x34b4>
    6244:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    6248:	5226501c 	eorpl	r5, r6, #28
    624c:	2f4d4f3d 	svccs	0x004d4f3d
    6250:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    6254:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    6258:	5b4b0104 	blpl	12c6670 <__ccfg+0x12a66c8>
    625c:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    6260:	4a09033f 	bmi	246f64 <__ccfg+0x226fbc>
    6264:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    6268:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    626c:	4a7db903 	bmi	1f74680 <__ccfg+0x1f546d8>
    6270:	01001f02 	tsteq	r0, r2, lsl #30
    6274:	00036501 	andeq	r6, r3, r1, lsl #10
    6278:	a8000200 	stmdage	r0, {r9}
    627c:	02000001 	andeq	r0, r0, #1
    6280:	0d0efb01 	vstreq	d15, [lr, #-4]
    6284:	01010100 	mrseq	r0, (UNDEF: 17)
    6288:	00000001 	andeq	r0, r0, r1
    628c:	01000001 	tsteq	r0, r1
    6290:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6294:	2f2e2e2f 	svccs	0x002e2e2f
    6298:	642f2e2e 	strtvs	r2, [pc], #-3630	; 62a0 <__exidx_end+0x362c>
    629c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    62a0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    62a4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    62a8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    62ac:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    62b0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    62b4:	31303030 	teqcc	r0, r0, lsr r0
    62b8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    62bc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    62c0:	61746562 	cmnvs	r4, r2, ror #10
    62c4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    62c8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    62cc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6104 <__exidx_end+0x3490>
    62d0:	6f635c73 	svcvs	0x00635c73
    62d4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    62d8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    62dc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    62e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    62e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    62e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    62ec:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    62f0:	3130322d 	teqcc	r0, sp, lsr #4
    62f4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    62f8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    62fc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6300:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6304:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6308:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    630c:	616d5c65 	cmnvs	sp, r5, ror #24
    6310:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6314:	3a630065 	bcc	18c64b0 <__ccfg+0x18a6508>
    6318:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    631c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6320:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6324:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6328:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    632c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6330:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6334:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6338:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    633c:	6f6f745c 	svcvs	0x006f745c
    6340:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6344:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6348:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    634c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6350:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6354:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6358:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    635c:	5f342d69 	svcpl	0x00342d69
    6360:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6364:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6368:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    636c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6370:	61652d65 	cmnvs	r5, r5, ror #26
    6374:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6378:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    637c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6380:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    6384:	2f2e2e2f 	svccs	0x002e2e2f
    6388:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    638c:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    6390:	73000063 	movwvc	r0, #99	; 0x63
    6394:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    6398:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    639c:	00010063 	andeq	r0, r1, r3, rrx
    63a0:	6e6f6100 	powvse	f6, f7, f0
    63a4:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    63a8:	0100682e 	tsteq	r0, lr, lsr #16
    63ac:	736f0000 	cmnvc	pc, #0
    63b0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    63b4:	70000001 	andvc	r0, r0, r1
    63b8:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    63bc:	00010068 	andeq	r0, r1, r8, rrx
    63c0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    63c4:	725f7075 	subsvc	r7, pc, #117	; 0x75
    63c8:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    63cc:	00000100 	andeq	r0, r0, r0, lsl #2
    63d0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    63d4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    63d8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    63dc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    63e0:	00000200 	andeq	r0, r0, r0, lsl #4
    63e4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    63e8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    63ec:	00030068 	andeq	r0, r3, r8, rrx
    63f0:	5f776800 	svcpl	0x00776800
    63f4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    63f8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    63fc:	72000004 	andvc	r0, r0, #4
    6400:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6404:	00000100 	andeq	r0, r0, r0, lsl #2
    6408:	5f737973 	svcpl	0x00737973
    640c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    6410:	0100682e 	tsteq	r0, lr, lsr #16
    6414:	6f610000 	svcvs	0x00610000
    6418:	61625f6e 	cmnvs	r2, lr, ror #30
    641c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    6420:	0100682e 	tsteq	r0, lr, lsr #16
    6424:	00000000 	andeq	r0, r0, r0
    6428:	00000205 	andeq	r0, r0, r5, lsl #4
    642c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    6430:	02040100 	andeq	r0, r4, #0, 2
    6434:	0102e903 	tsteq	r2, r3, lsl #18
    6438:	97030104 	strls	r0, [r3, -r4, lsl #2]
    643c:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    6440:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    6444:	01040200 	mrseq	r0, R12_usr
    6448:	2000ce03 	andcs	ip, r0, r3, lsl #28
    644c:	02000104 	andeq	r0, r0, #4, 2
    6450:	d1030104 	tstle	r3, r4, lsl #2
    6454:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    6458:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    645c:	4b896701 	blmi	fe260068 <_estack+0xde25b068>
    6460:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    6464:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    6468:	03010458 	movweq	r0, #5208	; 0x1458
    646c:	004a7ee4 	subeq	r7, sl, r4, ror #29
    6470:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    6474:	81030404 	tsthi	r3, r4, lsl #8
    6478:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    647c:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    6480:	0001043c 	andeq	r0, r1, ip, lsr r4
    6484:	03010402 	movweq	r0, #5122	; 0x1402
    6488:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    648c:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    6490:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    6494:	00204203 	eoreq	r4, r0, r3, lsl #4
    6498:	03010402 	movweq	r0, #5122	; 0x1402
    649c:	01042e14 	tsteq	r4, r4, lsl lr
    64a0:	01040200 	mrseq	r0, R12_usr
    64a4:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    64a8:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    64ac:	4b83281b 	blmi	fe0d0520 <_estack+0xde0cb520>
    64b0:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    64b4:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    64b8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    64bc:	3c140301 	ldccc	3, cr0, [r4], {1}
    64c0:	02000104 	andeq	r0, r0, #4, 2
    64c4:	8d030104 	stfhis	f0, [r3, #-16]
    64c8:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    64cc:	01010017 	tsteq	r1, r7, lsl r0
    64d0:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    64d4:	03000026 	movweq	r0, #38	; 0x26
    64d8:	030101da 	movweq	r0, #4570	; 0x11da
    64dc:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    64e0:	201d0320 	andscs	r0, sp, r0, lsr #6
    64e4:	32412f59 	subcc	r2, r1, #356	; 0x164
    64e8:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    64ec:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    64f0:	0305041b 	movweq	r0, #21531	; 0x541b
    64f4:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    64f8:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    64fc:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    6500:	50030504 	andpl	r0, r3, r4, lsl #10
    6504:	01042120 	tsteq	r4, r0, lsr #2
    6508:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    650c:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    6510:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    6514:	03050420 	movweq	r0, #21536	; 0x5420
    6518:	0104204d 	tsteq	r4, sp, asr #32
    651c:	2f2e3403 	svccs	0x002e3403
    6520:	2f692365 	svccs	0x00692365
    6524:	213e214d 	teqcs	lr, sp, asr #2
    6528:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    652c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    6530:	ca4a0f03 	bgt	128a144 <__ccfg+0x126a19c>
    6534:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    6538:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    653c:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    6540:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    6544:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    6548:	31312026 	teqcc	r1, r6, lsr #32
    654c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    6550:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    6554:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    6558:	03200903 			; <UNDEFINED> instruction: 0x03200903
    655c:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    6560:	7103213c 	tstvc	r3, ip, lsr r1
    6564:	3c0f0320 	stccc	3, cr0, [pc], {32}
    6568:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    656c:	23212265 			; <UNDEFINED> instruction: 0x23212265
    6570:	20780328 	rsbscs	r0, r8, r8, lsr #6
    6574:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    6578:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    657c:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    6580:	01010021 	tsteq	r1, r1, lsr #32
    6584:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    6588:	03000028 	movweq	r0, #40	; 0x28
    658c:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    6590:	a22f2240 	eorge	r2, pc, #64, 4
    6594:	2a404e24 	bcs	1019e2c <__ccfg+0xff9e84>
    6598:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    659c:	00010100 	andeq	r0, r1, r0, lsl #2
    65a0:	00000205 	andeq	r0, r0, r5, lsl #4
    65a4:	e5030000 	str	r0, [r3, #-0]
    65a8:	0c030103 	stfeqs	f0, [r3], {3}
    65ac:	30282f20 	eorcc	r2, r8, r0, lsr #30
    65b0:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    65b4:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    65b8:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    65bc:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    65c0:	1e224b2f 	vmulne.f64	d4, d2, d31
    65c4:	000c023e 	andeq	r0, ip, lr, lsr r2
    65c8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    65cc:	0028a402 	eoreq	sl, r8, r2, lsl #8
    65d0:	04a60300 	strteq	r0, [r6], #768	; 0x300
    65d4:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    65d8:	00040226 	andeq	r0, r4, r6, lsr #4
    65dc:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    65e0:	00020000 	andeq	r0, r2, r0
    65e4:	00000143 	andeq	r0, r0, r3, asr #2
    65e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    65ec:	0101000d 	tsteq	r1, sp
    65f0:	00000101 	andeq	r0, r0, r1, lsl #2
    65f4:	00000100 	andeq	r0, r0, r0, lsl #2
    65f8:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    65fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6600:	2f2e2e2f 	svccs	0x002e2e2f
    6604:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6608:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    660c:	3a630062 	bcc	18c679c <__ccfg+0x18a67f4>
    6610:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6614:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6618:	302e322e 	eorcc	r3, lr, lr, lsr #4
    661c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6620:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6624:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6628:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    662c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6630:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6634:	6f6f745c 	svcvs	0x006f745c
    6638:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    663c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6640:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6644:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6648:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    664c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6650:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6654:	5f342d69 	svcpl	0x00342d69
    6658:	30322d39 	eorscc	r2, r2, r9, lsr sp
    665c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6660:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6664:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6668:	61652d65 	cmnvs	r5, r5, ror #26
    666c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6670:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6674:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6678:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    667c:	6300656e 	movwvs	r6, #1390	; 0x56e
    6680:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6684:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6688:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    668c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6690:	5f393130 	svcpl	0x00393130
    6694:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6698:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    669c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    66a0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    66a4:	6f745c36 	svcvs	0x00745c36
    66a8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    66ac:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    66b0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    66b4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    66b8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    66bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    66c0:	61652d65 	cmnvs	r5, r5, ror #26
    66c4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    66c8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    66cc:	71353130 	teqvc	r5, r0, lsr r1
    66d0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    66d4:	6f6e2d6d 	svcvs	0x006e2d6d
    66d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    66dc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    66e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    66e4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    66e8:	00737973 	rsbseq	r7, r3, r3, ror r9
    66ec:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    66f0:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    66f4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    66f8:	63000001 	movwvs	r0, #1
    66fc:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    6700:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    6704:	00010068 	andeq	r0, r1, r8, rrx
    6708:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    670c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6710:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6714:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6718:	00020068 	andeq	r0, r2, r8, rrx
    671c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6720:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6724:	0300682e 	movweq	r6, #2094	; 0x82e
    6728:	00000000 	andeq	r0, r0, r0
    672c:	00000205 	andeq	r0, r0, r5, lsl #4
    6730:	c4030000 	strgt	r0, [r3], #-0
    6734:	2f130100 	svccs	0x00130100
    6738:	01000602 	tsteq	r0, r2, lsl #12
    673c:	02050001 	andeq	r0, r5, #1
    6740:	00000000 	andeq	r0, r0, r0
    6744:	0100d003 	tsteq	r0, r3
    6748:	0a032f14 	beq	d23a0 <__ccfg+0xb23f8>
    674c:	0008022e 	andeq	r0, r8, lr, lsr #4
    6750:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6754:	0028bc02 	eoreq	fp, r8, r2, lsl #24
    6758:	00e60300 	rsceq	r0, r6, r0, lsl #6
    675c:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    6760:	9b030204 	blls	c6f78 <__ccfg+0xa6fd0>
    6764:	01042e01 	tsteq	r4, r1, lsl #28
    6768:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    676c:	4b4b4c23 	blmi	12d9800 <__ccfg+0x12b9858>
    6770:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    6774:	01010005 	tsteq	r1, r5
    6778:	00020500 	andeq	r0, r2, r0, lsl #10
    677c:	03000000 	movweq	r0, #0
    6780:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    6784:	01b00302 	lslseq	r0, r2, #6
    6788:	03010420 	movweq	r0, #5152	; 0x1420
    678c:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    6790:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    6794:	4a0a033c 	bmi	28748c <__ccfg+0x2674e4>
    6798:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    679c:	01000502 	tsteq	r0, r2, lsl #10
    67a0:	02050001 	andeq	r0, r5, #1
    67a4:	00002908 	andeq	r2, r0, r8, lsl #18
    67a8:	0101a603 	tsteq	r1, r3, lsl #12
    67ac:	e3030204 	movw	r0, #12804	; 0x3204
    67b0:	11032000 	mrsne	r2, (UNDEF: 3)
    67b4:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 6704 <__exidx_end+0x3a90>
    67b8:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    67bc:	8c030104 	stfhis	f0, [r3], {4}
    67c0:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    67c4:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    67c8:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    67cc:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    67d0:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    67d4:	30032064 	andcc	r2, r3, r4, rrx
    67d8:	00040220 	andeq	r0, r4, r0, lsr #4
    67dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    67e0:	00297402 	eoreq	r7, r9, r2, lsl #8
    67e4:	01e00300 	mvneq	r0, r0, lsl #6
    67e8:	03020401 	movweq	r0, #9217	; 0x2401
    67ec:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    67f0:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    67f4:	0302042e 	movweq	r0, #9262	; 0x242e
    67f8:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    67fc:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    6800:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6804:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    6808:	01000202 	tsteq	r0, r2, lsl #4
    680c:	00021e01 	andeq	r1, r2, r1, lsl #28
    6810:	42000200 	andmi	r0, r0, #0, 4
    6814:	02000001 	andeq	r0, r0, #1
    6818:	0d0efb01 	vstreq	d15, [lr, #-4]
    681c:	01010100 	mrseq	r0, (UNDEF: 17)
    6820:	00000001 	andeq	r0, r0, r1
    6824:	01000001 	tsteq	r0, r1
    6828:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    682c:	2f2e2e2f 	svccs	0x002e2e2f
    6830:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6838 <__exidx_end+0x3bc4>
    6834:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6838:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    683c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6840:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6844:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6848:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    684c:	31303030 	teqcc	r0, r0, lsr r0
    6850:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6854:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6858:	61746562 	cmnvs	r4, r2, ror #10
    685c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6860:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6864:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 669c <__exidx_end+0x3a28>
    6868:	6f635c73 	svcvs	0x00635c73
    686c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6870:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6874:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6878:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    687c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6880:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6884:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6888:	3130322d 	teqcc	r0, sp, lsr #4
    688c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6890:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6894:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6898:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    689c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    68a0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    68a4:	616d5c65 	cmnvs	sp, r5, ror #24
    68a8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    68ac:	3a630065 	bcc	18c6a48 <__ccfg+0x18a6aa0>
    68b0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    68b4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    68b8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    68bc:	3030302e 	eorscc	r3, r0, lr, lsr #32
    68c0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    68c4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    68c8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    68cc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    68d0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    68d4:	6f6f745c 	svcvs	0x006f745c
    68d8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    68dc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    68e0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    68e4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    68e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    68ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    68f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    68f4:	5f342d69 	svcpl	0x00342d69
    68f8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    68fc:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6900:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6904:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6908:	61652d65 	cmnvs	r5, r5, ror #26
    690c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6910:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6914:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6918:	00007379 	andeq	r7, r0, r9, ror r3
    691c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    6920:	00010068 	andeq	r0, r1, r8, rrx
    6924:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    6928:	0100632e 	tsteq	r0, lr, lsr #6
    692c:	645f0000 	ldrbvs	r0, [pc], #-0	; 6934 <__exidx_end+0x3cc0>
    6930:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6934:	745f746c 	ldrbvc	r7, [pc], #-1132	; 693c <__exidx_end+0x3cc8>
    6938:	73657079 	cmnvc	r5, #121	; 0x79
    693c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6940:	735f0000 	cmpvc	pc, #0
    6944:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6948:	00682e74 	rsbeq	r2, r8, r4, ror lr
    694c:	63000003 	movwvs	r0, #3
    6950:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    6954:	00000100 	andeq	r0, r0, r0, lsl #2
    6958:	02050000 	andeq	r0, r5, #0
    695c:	0000298c 	andeq	r2, r0, ip, lsl #19
    6960:	01018803 	tsteq	r1, r3, lsl #16
    6964:	50303120 	eorspl	r3, r0, r0, lsr #2
    6968:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    696c:	0005022c 	andeq	r0, r5, ip, lsr #4
    6970:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6974:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    6978:	03000029 	movweq	r0, #41	; 0x29
    697c:	030100c3 	movweq	r0, #4291	; 0x10c3
    6980:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    6984:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6988:	02050002 	andeq	r0, r5, #2
    698c:	00000000 	andeq	r0, r0, r0
    6990:	0100d803 	tsteq	r0, r3, lsl #16
    6994:	33010e03 	movwcc	r0, #7683	; 0x1e03
    6998:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    699c:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    69a0:	01010004 	tsteq	r1, r4
    69a4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69a8:	00000002 	andeq	r0, r0, r2
    69ac:	01850300 	orreq	r0, r5, r0, lsl #6
    69b0:	20110301 	andscs	r0, r1, r1, lsl #6
    69b4:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    69b8:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    69bc:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    69c0:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    69c4:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    69c8:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    69cc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    69d0:	02050002 	andeq	r0, r5, #2
    69d4:	00000000 	andeq	r0, r0, r0
    69d8:	0101af03 	tsteq	r1, r3, lsl #30
    69dc:	1b201103 	blne	80adf0 <__ccfg+0x7eae48>
    69e0:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    69e4:	042f2013 	strteq	r2, [pc], #-19	; 69ec <__exidx_end+0x3d78>
    69e8:	20690301 	rsbcs	r0, r9, r1, lsl #6
    69ec:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    69f0:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    69f4:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    69f8:	01000502 	tsteq	r0, r2, lsl #10
    69fc:	00020401 	andeq	r0, r2, r1, lsl #8
    6a00:	00000205 	andeq	r0, r0, r5, lsl #4
    6a04:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    6a08:	11030101 	tstne	r3, r1, lsl #2
    6a0c:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    6a10:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    6a14:	0104302d 	tsteq	r4, sp, lsr #32
    6a18:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    6a1c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a20:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a24:	00c80302 	sbceq	r0, r8, r2, lsl #6
    6a28:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    6a2c:	d6010100 	strle	r0, [r1], -r0, lsl #2
    6a30:	02000002 	andeq	r0, r0, #2
    6a34:	00017c00 	andeq	r7, r1, r0, lsl #24
    6a38:	fb010200 	blx	47242 <__ccfg+0x2729a>
    6a3c:	01000d0e 	tsteq	r0, lr, lsl #26
    6a40:	00010101 	andeq	r0, r1, r1, lsl #2
    6a44:	00010000 	andeq	r0, r1, r0
    6a48:	2f2e0100 	svccs	0x002e0100
    6a4c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a50:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a54:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6a58:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6a5c:	63006269 	movwvs	r6, #617	; 0x269
    6a60:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6a64:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a68:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6a6c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6a70:	5f393130 	svcpl	0x00393130
    6a74:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6a78:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6a7c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6a80:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6a84:	6f745c36 	svcvs	0x00745c36
    6a88:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6a8c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6a90:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6a94:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6a98:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6a9c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6aa0:	61652d65 	cmnvs	r5, r5, ror #26
    6aa4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6aa8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6aac:	71353130 	teqvc	r5, r0, lsr r1
    6ab0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6ab4:	6f6e2d6d 	svcvs	0x006e2d6d
    6ab8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6abc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6ac0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6ac4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6ac8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6acc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6ad0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6ad4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6ad8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6adc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6ae0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6ae4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6ae8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6aec:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6af0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6af4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6af8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6afc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6994 <__exidx_end+0x3d20>
    6b00:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6b04:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6b08:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6b0c:	6f6e2d6d 	svcvs	0x006e2d6d
    6b10:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6b14:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6b18:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6b1c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6b20:	615c3371 	cmpvs	ip, r1, ror r3
    6b24:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b28:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b2c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b30:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6b34:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6b38:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6b3c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6b40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b44:	2f2e2e2f 	svccs	0x002e2e2f
    6b48:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6b4c:	63736f00 	cmnvs	r3, #0, 30
    6b50:	0100632e 	tsteq	r0, lr, lsr #6
    6b54:	736f0000 	cmnvc	pc, #0
    6b58:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6b5c:	5f000001 	svcpl	0x00000001
    6b60:	61666564 	cmnvs	r6, r4, ror #10
    6b64:	5f746c75 	svcpl	0x00746c75
    6b68:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b6c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b70:	5f000002 	svcpl	0x00000002
    6b74:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6b78:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6b7c:	00000300 	andeq	r0, r0, r0, lsl #6
    6b80:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6b88 <__exidx_end+0x3f14>
    6b84:	73657079 	cmnvc	r5, #121	; 0x79
    6b88:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6b8c:	6f720000 	svcvs	0x00720000
    6b90:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6b94:	61000001 	tstvs	r0, r1
    6b98:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    6b9c:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    6ba0:	00000100 	andeq	r0, r0, r0, lsl #2
    6ba4:	5f6e6f61 	svcpl	0x006e6f61
    6ba8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6bac:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6bb0:	00000100 	andeq	r0, r0, r0, lsl #2
    6bb4:	02050000 	andeq	r0, r5, #0
    6bb8:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    6bbc:	0100e503 	tsteq	r0, r3, lsl #10
    6bc0:	200f0320 	andcs	r0, pc, r0, lsr #6
    6bc4:	03207103 			; <UNDEFINED> instruction: 0x03207103
    6bc8:	0325200f 			; <UNDEFINED> instruction: 0x0325200f
    6bcc:	03309e09 	teqeq	r0, #9, 28	; 0x90
    6bd0:	a3339e09 	teqge	r3, #9, 28	; 0x90
    6bd4:	01000702 	tsteq	r0, r2, lsl #14
    6bd8:	02050001 	andeq	r0, r5, #1
    6bdc:	00002a18 	andeq	r2, r0, r8, lsl sl
    6be0:	0101a003 	tsteq	r1, r3
    6be4:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    6be8:	3c7a0388 	ldclcc	3, cr0, [sl], #-544	; 0xfffffde0
    6bec:	06022526 	streq	r2, [r2], -r6, lsr #10
    6bf0:	00010100 	andeq	r0, r1, r0, lsl #2
    6bf4:	00000205 	andeq	r0, r0, r5, lsl #4
    6bf8:	c2030000 	andgt	r0, r3, #0
    6bfc:	25200101 	strcs	r0, [r0, #-257]!	; 0xfffffeff
    6c00:	79033491 	stmdbvc	r3, {r0, r4, r7, sl, ip, sp}
    6c04:	7a03272e 	bvc	d08c4 <__ccfg+0xb091c>
    6c08:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    6c0c:	7a030104 	bvc	c7024 <__ccfg+0xa707c>
    6c10:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6c14:	2d305001 	ldccs	0, cr5, [r0, #-4]!
    6c18:	4b241f30 	blmi	90e8e0 <__ccfg+0x8ee938>
    6c1c:	3d341f3d 	ldccc	15, cr1, [r4, #-244]!	; 0xffffff0c
    6c20:	6d03326c 	sfmvs	f3, 4, [r3, #-432]	; 0xfffffe50
    6c24:	3c100366 	ldccc	3, cr0, [r0], {102}	; 0x66
    6c28:	00090226 	andeq	r0, r9, r6, lsr #4
    6c2c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6c30:	00000002 	andeq	r0, r0, r2
    6c34:	01f30300 	mvnseq	r0, r0, lsl #6
    6c38:	024b2101 	subeq	r2, fp, #1073741824	; 0x40000000
    6c3c:	01010007 	tsteq	r1, r7
    6c40:	00020500 	andeq	r0, r2, r0, lsl #10
    6c44:	03000000 	movweq	r0, #0
    6c48:	24010280 	strcs	r0, [r1], #-640	; 0xfffffd80
    6c4c:	22030204 	andcs	r0, r3, #4, 4	; 0x40000000
    6c50:	03010458 	movweq	r0, #5208	; 0x1458
    6c54:	02048262 	andeq	r8, r4, #536870918	; 0x20000006
    6c58:	04203c03 	strteq	r3, [r0], #-3075	; 0xfffff3fd
    6c5c:	4a4a0301 	bmi	1287868 <__ccfg+0x12678c0>
    6c60:	3d211f3d 	stccc	15, cr1, [r1, #-244]!	; 0xffffff0c
    6c64:	1f30221f 	svcne	0x0030221f
    6c68:	02232230 	eoreq	r2, r3, #48, 4
    6c6c:	0101000c 	tsteq	r1, ip
    6c70:	00020500 	andeq	r0, r2, r0, lsl #10
    6c74:	03000000 	movweq	r0, #0
    6c78:	250102a3 	strcs	r0, [r1, #-675]	; 0xfffffd5d
    6c7c:	0302044f 	movweq	r0, #9295	; 0x244f
    6c80:	01044a17 	tsteq	r4, r7, lsl sl
    6c84:	4b4a6d03 	blmi	12a2098 <__ccfg+0x12820f0>
    6c88:	01000902 	tsteq	r0, r2, lsl #18
    6c8c:	02050001 	andeq	r0, r5, #1
    6c90:	00000000 	andeq	r0, r0, r0
    6c94:	0102bc03 	tsteq	r2, r3, lsl #24
    6c98:	20170322 	andscs	r0, r7, r2, lsr #6
    6c9c:	28206903 	stmdacs	r0!, {r0, r1, r8, fp, sp, lr}
    6ca0:	033c1003 	teqeq	ip, #3
    6ca4:	15032e6c 	strne	r2, [r3, #-3692]	; 0xfffff194
    6ca8:	586d032e 	stmdapl	sp!, {r1, r2, r3, r5, r8, r9}^
    6cac:	03201303 			; <UNDEFINED> instruction: 0x03201303
    6cb0:	1103206f 	tstne	r3, pc, rrx
    6cb4:	06023f20 	streq	r3, [r2], -r0, lsr #30
    6cb8:	00010100 	andeq	r0, r1, r0, lsl #2
    6cbc:	00000205 	andeq	r0, r0, r5, lsl #4
    6cc0:	e3030000 	movw	r0, #12288	; 0x3000
    6cc4:	21030102 	tstcs	r3, r2, lsl #2
    6cc8:	02024d01 	andeq	r4, r2, #1, 26	; 0x40
    6ccc:	00010100 	andeq	r0, r1, r0, lsl #2
    6cd0:	00000205 	andeq	r0, r0, r5, lsl #4
    6cd4:	90030000 	andls	r0, r3, r0
    6cd8:	10030103 	andne	r0, r3, r3, lsl #2
    6cdc:	211f2120 	tstcs	pc, r0, lsr #2
    6ce0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6ce4:	02003e01 	andeq	r3, r0, #1, 28
    6ce8:	3d3d0104 	ldfccs	f0, [sp, #-16]!
    6cec:	02341d31 	eorseq	r1, r4, #3136	; 0xc40
    6cf0:	01010007 	tsteq	r1, r7
    6cf4:	00020500 	andeq	r0, r2, r0, lsl #10
    6cf8:	03000000 	movweq	r0, #0
    6cfc:	170103b5 			; <UNDEFINED> instruction: 0x170103b5
    6d00:	3d332c31 	ldccc	12, cr2, [r3, #-196]!	; 0xffffff3c
    6d04:	01000502 	tsteq	r0, r2, lsl #10
    6d08:	Address 0x0000000000006d08 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
      34:	5f5f0065 	svcpl	0x005f0065
      38:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6d0 <_estack+0xdfffa6d0>
      3c:	00747261 	rsbseq	r7, r4, r1, ror #4
			i = k;
      40:	70716572 	rsbsvc	r6, r1, r2, ror r5
				j->Next = k;
      44:	5f006d64 	svcpl	0x00006d64
      48:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
      4c:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
      50:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
      54:	00656d61 	rsbeq	r6, r5, r1, ror #26
		release;
      58:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
      5c:	73676e69 	cmnvc	r7, #1680	; 0x690
      60:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
      64:	66650074 			; <UNDEFINED> instruction: 0x66650074
      68:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
      6c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      70:	6f6c2067 	svcvs	0x006c2067
      74:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
      78:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      7c:	2064656e 	rsbcs	r6, r4, lr, ror #10
      80:	00746e69 	rsbseq	r6, r4, r9, ror #28
      84:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
      88:	49737265 	ldmdbmi	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      8c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
	descriptors [fd] = s;
      90:	6e766500 	cdpvs	5, 7, cr6, cr6, cr0, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	006e7074 	rsbeq	r7, lr, r4, ror r0
      98:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
	if (s == NULL)
      9c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		syserror (EMALLOC, "tcv05");
      a0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      a4:	5f5f0074 	svcpl	0x005f0074
      a8:	616c7473 	smcvs	51011	; 0xc743
      ac:	68535f62 	ldmdavs	r3, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      b0:	4d5f776f 	ldclmi	7, cr7, [pc, #-444]	; fffffefc <_estack+0xdfffaefc>
      b4:	00756e65 	rsbseq	r6, r5, r5, ror #28
      b8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      bc:	0074735f 	rsbseq	r7, r4, pc, asr r3
      c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c <g_pfnVectors+0xc>
      c4:	616d2f65 	cmnvs	sp, r5, ror #30
      c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
      d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      dc:	4349502f 	movtmi	r5, #36911	; 0x902f
      e0:	412f534f 			; <UNDEFINED> instruction: 0x412f534f
      e4:	2f737070 	svccs	0x00737070
      e8:	54504d43 	ldrbpl	r4, [r0], #-3395	; 0xfffff2bd
      ec:	5f343634 	svcpl	0x00343634
      f0:	3662614c 	strbtcc	r6, [r2], -ip, asr #2
			wwait (st, 50);
      f4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
			curr += 0x1000;
      f8:	63794374 	cmnvs	r9, #116, 6	; 0xd0000001
      fc:	0073656c 	rsbseq	r6, r3, ip, ror #10
		if (from >= EE_SIZE || upto < from)
     100:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     104:	754d7265 	strbvc	r7, [sp, #-613]	; 0xfffffd9b
			upto = EE_SIZE - 1;
     108:	7069746c 	rsbvc	r7, r9, ip, ror #8
     10c:	7265696c 	rsbvc	r6, r5, #108, 18	; 0x1b0000
     110:	735f5f00 	cmpvc	pc, #0, 30
     114:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     118:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     11c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     120:	00444f49 	subeq	r4, r4, r9, asr #30
     124:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
}
     128:	5f62616c 	svcpl	0x0062616c
     12c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     130:	006c6169 	rsbeq	r6, ip, r9, ror #2
}
     134:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
        if(settingsInput[i] == ' ') {
     138:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff3db <_estack+0xdfffa3db>
     13c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
            numbers[numbersIndex] = number;
     140:	756f635f 	strbvc	r6, [pc, #-863]!	; fffffde9 <_estack+0xdfffade9>
     144:	5f00746e 	svcpl	0x0000746e
            numbersIndex++;
     148:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	535f6261 	cmppl	pc, #268435462	; 0x10000006
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     150:	00706f74 	rsbseq	r6, r0, r4, ror pc
            return 1;
     154:	6d646e6f 	stclvs	14, cr6, [r4, #-444]!	; 0xfffffe44
     158:	6700736e 	strvs	r7, [r0, -lr, ror #6]
     15c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
fsm root {
     160:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     164:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
     168:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!	; 0xfffffe44
     16c:	00726562 	rsbseq	r6, r2, r2, ror #10
     170:	20554e47 	subscs	r4, r5, r7, asr #28
        initCycles();
     174:	20393943 	eorscs	r3, r9, r3, asr #18
        ser_outf(Initial, "Enter your name: ");
     178:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     17c:	30322031 	eorscc	r2, r2, r1, lsr r0
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	30313931 	eorscc	r3, r1, r1, lsr r9
     184:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
     188:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     190:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
        ser_inf(Get_Choice, "%c", &choice);
     194:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
     198:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
     19c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
        if (choice == 'A' || choice == 'a'){
     1a0:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     1a4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     1a8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
            proceed Adjust_Intervals;
     1ac:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
            proceed Monitor;
     1b0:	205d3939 	subscs	r3, sp, r9, lsr r9
        proceed Get_Choice;
     1b4:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	6f633d75 	svcvs	0x00633d75
     1bc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	20336d2d 	eorscs	r6, r3, sp, lsr #26
     1c4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     1c8:	20626d75 	rsbcs	r6, r2, r5, ror sp
        processSettingsInput(settings);
     1cc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
        proceed Show_Menu;
     1d0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     1d4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     1dc:	616d2d20 	cmnvs	sp, r0, lsr #26
     1e0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     1e4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     1e8:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
        proceed Show_Menu;
     1ec:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     1f0:	61776467 	cmnvs	r7, r7, ror #8
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	332d6672 			; <UNDEFINED> instruction: 0x332d6672
     1f8:	73672d20 	cmnvc	r7, #32, 26	; 0x800
        displayCycle = YES;
     1fc:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
        ser_inf(Await_Stop, "%c", ch);
     200:	77642d74 			; <UNDEFINED> instruction: 0x77642d74
     204:	20667261 	rsbcs	r7, r6, r1, ror #4
     208:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
        proceed Await_Stop;
     20c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     210:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     214:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
        leds(1, 0);
     218:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     21c:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
     220:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     224:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     228:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
        leds(0, 0);
     22c:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
     230:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     234:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     238:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     23c:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
     240:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
        } else if (choice == 'S' || choice == 's') {
     244:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
            proceed Stop;
     248:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
        } else if (choice == 'V' || choice == 'v') {
     24c:	662d2067 	strtvs	r2, [sp], -r7, rrx
            proceed View_Settings;
     250:	206d7361 	rsbcs	r7, sp, r1, ror #6
        } else if (choice == 'M' || choice == 'm') {
     254:	616d662d 	cmnvs	sp, sp, lsr #12
            proceed Monitor;
     258:	72652d78 	rsbvc	r2, r5, #120, 26	; 0x1e00
     25c:	73726f72 	cmnvc	r2, #456	; 0x1c8
     260:	0030313d 	eorseq	r3, r0, sp, lsr r1
     264:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     268:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
     26c:	745f746e 	ldrbvc	r7, [pc], #-1134	; 274 <root+0x114>
     270:	6f687300 	svcvs	0x00687300
     274:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     278:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     27c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     280:	00746e69 	rsbseq	r6, r4, r9, ror #28
     284:	696e6970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, sp, lr}^
     288:	745f646f 	ldrbvc	r6, [pc], #-1135	; 290 <devinit_uart+0x4>
static void devinit_uart (int devnum) {
     28c:	63796300 	cmnvs	r9, #0, 6
	adddevfunc (ioreq_uart_a, devnum);
     290:	4973656c 	ldmdbmi	r3!, {r2, r3, r5, r6, r8, sl, sp, lr}^
     294:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
void udelay (volatile word n) {
     298:	74736600 	ldrbtvc	r6, [r3], #-1536	; 0xfffffa00
     29c:	006b6c62 	rsbeq	r6, fp, r2, ror #24
	while (n) {
     2a0:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     2a4:	61007265 	tstvs	r0, r5, ror #4
}
     2a8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
	while (n--);
     2ac:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
     2b0:	6d616e72 	stclvs	14, cr6, [r1, #-456]!	; 0xfffffe38
     2b4:	5f5f0065 	svcpl	0x005f0065
		n--;
     2b8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     2bc:	61747379 	cmnvs	r4, r9, ror r3
     2c0:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
void mdelay (volatile word n) {
     2c4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     2c8:	64657200 	strbtvs	r7, [r5], #-512	; 0xfffffe00
	while (n) {
     2cc:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     2d0:	61620065 	cmnvs	r2, r5, rrx
}
     2d4:	4e006573 	cfrshl64mi	mvdx0, mvdx3, r6
		udelay (999);
     2d8:	00747865 	rsbseq	r7, r4, r5, ror #16
     2dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
		n--;
     2e0:	544b0072 	strbpl	r0, [fp], #-114	; 0xffffff8e
     2e4:	612f504d 			; <UNDEFINED> instruction: 0x612f504d
     2e8:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     2ec:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
void __pi_ondomain (lword d) {
     2f0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     2f4:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
		if (__pi_systat.effpdm > 1)
     2f8:	5f5f0073 	svcpl	0x005f0073
     2fc:	616c7473 	smcvs	51011	; 0xc743
			__pi_systat.effpdm = 1;
     300:	77415f62 	strbvc	r5, [r1, -r2, ror #30]
	PRCMPowerDomainOn (d);
     304:	5f746961 	svcpl	0x00746961
     308:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
     30c:	625f5f00 	subsvs	r5, pc, #0, 30
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
     314:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     318:	5f005f5f 	svcpl	0x00005f5f
	__pi_systat.ondmns |= d;
     31c:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
     320:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
}
     324:	70005f5f 	andvc	r5, r0, pc, asr pc
     328:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
void __pi_syserror (word ec, const char *m) {
     32c:	65537373 	ldrbvs	r7, [r3, #-883]	; 0xfffffc8d
	diag ("SYSERR: %x, %s", ec, m);
     330:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     334:	6e497367 	cdpvs	3, 4, cr7, cr9, cr7, {3}
  __ASM volatile ("cpsid i" : : : "memory");
     338:	00747570 	rsbseq	r7, r4, r0, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
     340:	0072656b 	rsbseq	r6, r2, fp, ror #10
     344:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
		all_leds_blink;
     348:	73676e69 	cmnvc	r7, #1680	; 0x690
     34c:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
     350:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     354:	735f5f00 	cmpvc	pc, #0, 30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     35c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     360:	746e495f 	strbtvc	r4, [lr], #-2399	; 0xfffff6a1
     364:	61767265 	cmnvs	r6, r5, ror #4
     368:	5f00736c 	svcpl	0x0000736c
     36c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
	while (1) {
     370:	565f6261 	ldrbpl	r6, [pc], -r1, ror #4
     374:	5f776569 	svcpl	0x00776569
     378:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
     37c:	73676e69 	cmnvc	r7, #1680	; 0x690
void tci_run_delay_timer () {
     380:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	setdel = __pi_mintk - __pi_old;
     384:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
     388:	68007272 	stmdavs	r0, {r1, r4, r5, r6, r9, ip, sp, lr}
     38c:	5f74736f 	svcpl	0x0074736f
     390:	5f006469 	svcpl	0x00006469
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
     398:	5f6e6f74 	svcpl	0x006e6f74
     39c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     3a0:	736e7500 	cmnvc	lr, #0, 10
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
	sti_tim;
     3a8:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
}
     3ac:	47007261 	strmi	r7, [r0, -r1, ror #4]
     3b0:	5f4f4950 	svcpl	0x004f4950
     3b4:	61656c63 	cmnvs	r5, r3, ror #24
     3b8:	6f694472 	svcvs	0x00694472
     3bc:	546e6f00 	strbtpl	r6, [lr], #-3840	; 0xfffff100
	cli_aux;
     3c0:	00656d69 	rsbeq	r6, r5, r9, ror #26
     3c4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	5f62616c 	svcpl	0x0062616c
     3cc:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     3d0:	495f7473 	ldmdbmi	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     3d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	sti_aux;
     3d8:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
}
     3dc:	6f687300 	svcvs	0x00687300
     3e0:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     3e4:	6300746e 	movwvs	r7, #1134	; 0x46e
void AONRTCIntHandler () {
     3e8:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	756e0073 	strbvc	r0, [lr, #-115]!	; 0xffffff8d
     3f0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	656c0073 	strbvs	r0, [ip, #-115]!	; 0xffffff8d
		if (__pi_utims [0] == 0)
     3f8:	636c6264 	cmnvs	ip, #100, 4	; 0x40000006
     3fc:	6f6f4200 	svcvs	0x006f4200
		if (*(__pi_utims [0])) {
     400:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     404:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
			(*(__pi_utims [0]))--;
     408:	00737473 	rsbseq	r7, r3, r3, ror r4
		if (__pi_utims [1] == 0)
     40c:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
		if (*(__pi_utims [1])) {
     410:	75006b6c 	strvc	r6, [r0, #-2924]	; 0xfffff494
			aux_timer_inactive = 0;
     414:	5f747261 	svcpl	0x00747261
			(*(__pi_utims [1]))--;
     418:	5f5f0074 	svcpl	0x005f0074
		if (__pi_utims [2] == 0)
     41c:	616c7473 	smcvs	51011	; 0xc743
		if (*(__pi_utims [2])) {
     420:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
			(*(__pi_utims [2]))--;
     424:	68435f74 	stmdavs	r3, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		if (__pi_utims [3] != 0) {
     428:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
			if (*(__pi_utims [3])) {
     42c:	74656c00 	strbtvc	r6, [r5], #-3072	; 0xfffff400
				aux_timer_inactive = 0;
     430:	00726574 	rsbseq	r6, r2, r4, ror r5
				(*(__pi_utims [3]))--;
     434:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
	if (__pi_systat.ledsts) {
     438:	745f7461 	ldrbvc	r7, [pc], #-1121	; 440 <AONRTCIntHandler+0x58>
     43c:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
		if (__pi_systat.ledblc++ == 0) {
     440:	0073746e 	rsbseq	r7, r3, lr, ror #8
     444:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			if (__pi_systat.ledblk) {
     448:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     44c:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
     450:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	6400656c 	strvs	r6, [r0], #-1388	; 0xfffffa94
     458:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
				if (__pi_systat.ledsts & 0x2)
     45c:	79437961 	stmdbvc	r3, {r0, r5, r6, r8, fp, ip, sp, lr}^
     460:	00656c63 	rsbeq	r6, r5, r3, ror #24
     464:	6d756e70 	ldclvs	14, cr6, [r5, #-448]!	; 0xfffffe40
				if (__pi_systat.ledsts & 0x4)
     468:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
				__pi_systat.ledblk = 0;
     46c:	79706f72 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     470:	616c6600 	cmnvs	ip, r0, lsl #12
			if (__pi_systat.fstblk)
     474:	63007367 	movwvs	r7, #871	; 0x367
     478:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
				__pi_systat.ledblc = 200;
     47c:	73660065 	cmnvc	r6, #101	; 0x65
	if (events & AON_RTC_EVFLAGS_CH0) {
     480:	646f636d 	strbtvs	r6, [pc], #-877	; 488 <AONRTCIntHandler+0xa0>
		cli_tim;
     484:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
		__pi_new += setdel;
     488:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     48c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		setdel = 0;
     490:	63705f69 	cmnvs	r0, #420	; 0x1a4
		RISE_N_SHINE;
     494:	00735f62 	rsbseq	r5, r3, r2, ror #30
		__pi_new += setdel;
     498:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		RISE_N_SHINE;
     49c:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     4a0:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
		aux_timer_inactive = 1;
     4a4:	79436465 	stmdbvc	r3, {r0, r2, r5, r6, sl, sp, lr}^
     4a8:	00656c63 	rsbeq	r6, r5, r3, ror #24
				if (__pi_systat.ledsts & 0x1)
     4ac:	746f6f72 	strbtvc	r6, [pc], #-3954	; 4b4 <AONRTCIntHandler+0xcc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4b0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     4b4:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
				if (__pi_systat.ledsts & 0x2)
     4b8:	006b746e 	rsbeq	r7, fp, lr, ror #8
     4bc:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     4c0:	50470074 	subpl	r0, r7, r4, ror r0
				if (__pi_systat.ledsts & 0x8)
     4c4:	735f4f49 	cmpvc	pc, #292	; 0x124
				__pi_systat.ledblk = 1;
     4c8:	754f7465 	strbvc	r7, [pc, #-1125]	; 6b <g_pfnVectors+0x6b>
     4cc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
		if (aux_timer_inactive) {
     4d0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
			cli_aux;
     4d4:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
     4d8:	4f41006f 	svcmi	0x0041006f
     4dc:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     4e0:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
     4e4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     4e8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     4ec:	6f4d3233 	svcvs	0x004d3233
     4f0:	5f006564 	svcpl	0x00006564
     4f4:	5f69705f 	svcpl	0x0069705f
     4f8:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
word tci_update_delay_ticks (Boolean force) {
     4fc:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
	cli_tim;
     500:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
     504:	76617474 			; <UNDEFINED> instruction: 0x76617474
	if (setdel) {
     508:	61727500 	cmnvs	r2, r0, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	00736574 	rsbseq	r6, r3, r4, ror r5
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
     514:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     518:	7172695f 	cmnvc	r2, pc, asr r9
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
				AON_RTC_O_CH0CMP)) - gettav ());
     520:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
	return NO;
     524:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
			setdel = 0;
     528:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     530:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
}
     534:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
		sti_tim;
     538:	6b615778 	blvs	1856320 <__ccfg+0x1836378>
		return YES;
     53c:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
     540:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     544:	4e4f4100 	dvfmie	f4, f7, f0
     548:	50435557 	subpl	r5, r3, r7, asr r5
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
	UARTDisable (UART0_BASE);
     550:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
	UARTDisable (UART0_BASE);
     558:	41550074 	cmpmi	r5, r4, ror r0
	UARTConfigSetExpClk (UART0_BASE,
     55c:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     560:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
     564:	73007261 	movwvc	r7, #609	; 0x261
     568:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
     570:	41007469 	tstmi	r0, r9, ror #8
     574:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
     57c:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
     580:	616e456e 	cmnvs	lr, lr, ror #10
	urates [0] = rate;
     584:	00656c62 	rsbeq	r6, r5, r2, ror #24
}
     588:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
     58c:	50006c65 	andpl	r6, r0, r5, ror #24
     590:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
     594:	6f507563 	svcvs	0x00507563
     598:	4f726577 	svcmi	0x00726577
     59c:	5f006666 	svcpl	0x00006666
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     5a4:	50534d5f 	subspl	r4, r3, pc, asr sp
     5a8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     5b0:	5f00745f 	svcpl	0x0000745f
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	5f69705f 	svcpl	0x0069705f
     5b8:	6f646e6f 	svcvs	0x00646e6f
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	6e69616d 	powvsez	f6, f1, #5.0
     5c0:	52415500 	subpl	r5, r1, #0, 10
     5c4:	46774854 			; <UNDEFINED> instruction: 0x46774854
     5c8:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     5cc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     5d0:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     5d4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
	switch (operation) {
     5d8:	5f5f0065 	svcpl	0x005f0065
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	00424350 	subeq	r4, r2, r0, asr r3
     5e0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     5e4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     5e8:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
     5ec:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
				*buf++ = uart_a_read;
     5f0:	4f410065 	svcmi	0x00410065
     5f4:	434f494e 	movtmi	r4, #63822	; 0xf94e
			while (len && uart_a_char_available) {
     5f8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     5fc:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     600:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
			if (len != operation) {
     604:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
}
     608:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
     60c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
			uart_a_disable_int;
     610:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
			if (uart_a_char_available) {
     614:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
				*buf++ = uart_a_read;
     618:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
			uart_a_disable_int;
     61c:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
     620:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
			if (uart_a_char_available) {
     624:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
     628:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
				uart_a_enable_int;
     62c:	6f6c436c 	svcvs	0x006c436c
     630:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
				goto Redo_rx;
     634:	52500074 	subspl	r0, r0, #116	; 0x74
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	61434d43 	cmpvs	r3, r3, asr #26
     63c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
			return -2;
     640:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
     644:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
				uart_a_write (*buf);
     648:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     64c:	5000656c 	andpl	r6, r0, ip, ror #10
			while (len && uart_a_room_in_tx) {
     650:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
     654:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     658:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
			if (len != operation) {
     65c:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
			uart_a_disable_int;
     660:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     664:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
			if (uart_a_room_in_tx) {
     668:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     66c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
				uart_a_enable_int;
     670:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     674:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
				*buf++ = uart_a_read;
     678:	73747075 	cmnvc	r4, #117	; 0x75
			if (uart_a_room_in_tx) {
     67c:	52415500 	subpl	r5, r1, #0, 10
				uart_a_write (*buf);
     680:	46494654 			; <UNDEFINED> instruction: 0x46494654
     684:	616e454f 	cmnvs	lr, pc, asr #10
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	00656c62 	rsbeq	r6, r5, r2, ror #24
     68c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			uart_a_enable_int;
     690:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
     694:	7367616c 	cmnvc	r7, #108, 2
     698:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			return 0;
     69c:	61755f69 	cmnvs	r5, r9, ror #30
			if (len == UART_CNTRL_SETRATE) {
     6a0:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	61727465 	cmnvs	r2, r5, ror #8
     6a8:	50006574 	andpl	r6, r0, r4, ror r5
     6ac:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
				syserror (EREQPAR, "uar");
     6b0:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
			syserror (ENOOPER, "uai");
     6b4:	72464f49 	subvc	r4, r6, #292	; 0x124
			if (len == UART_CNTRL_GETRATE) {
     6b8:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
				return 1;
     6bc:	61736944 	cmnvs	r3, r4, asr #18
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6c0:	00656c62 	rsbeq	r6, r5, r2, ror #24
			syserror (ENOOPER, "uai");
     6c4:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     6c8:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     6cc:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
     6d0:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     6d4:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     6d8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     6dc:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     6e0:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
     6e4:	6f6d7265 	svcvs	0x006d7265
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	6f006564 	svcvs	0x00006564
void UART0IntHandler () {
     6ec:	61726570 	cmnvs	r2, r0, ror r5
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     6f4:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
     6f8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     6fc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     700:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	00657669 	rsbeq	r7, r5, r9, ror #12
     708:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
		RISE_N_SHINE;
     70c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     710:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
		i_trigger (devevent (UART_A, READ));
     714:	5f6f6465 	svcpl	0x006f6465
     718:	5f007874 	svcpl	0x00007874
     71c:	5f69705f 	svcpl	0x0069705f
     720:	00646c6f 	rsbeq	r6, r4, pc, ror #24
     724:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     728:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
     72c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     730:	33697500 	cmncc	r9, #0, 10
     734:	73614232 	cmnvc	r1, #536870915	; 0x20000003
     738:	5f5f0065 	svcpl	0x005f0065
     73c:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
     740:	615f6966 	cmpvs	pc, r6, ror #18
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     748:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
     74c:	4e4f4100 	dvfmie	f4, f7, f0
		i_trigger (devevent (UART_A, WRITE));
     750:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	6156636e 	cmpvs	r6, lr, ror #6
     758:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
		RISE_N_SHINE;
     75c:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
     760:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
     764:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
		i_trigger (devevent (UART_A, WRITE));
     768:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
     76c:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     770:	61755f74 	cmnvs	r5, r4, ror pc
     774:	41007472 	tstmi	r0, r2, ror r4
     778:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     77c:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
     780:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     784:	0072656c 	rsbseq	r6, r2, ip, ror #10
     788:	61726170 	cmnvs	r2, r0, ror r1
     78c:	6374006d 	cmnvs	r4, #109	; 0x6d
     790:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
}
     794:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
     798:	5f79616c 	svcpl	0x0079616c
     79c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     7a0:	5f5f0072 	svcpl	0x005f0072
     7a4:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
void __buttons_setirq (int val) {
     7a8:	61656c65 	cmnvs	r5, r5, ror #24
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
     7b0:	006f6465 	rsbeq	r6, pc, r5, ror #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
     7b8:	5f74696e 	svcpl	0x0074696e
     7bc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	726f6600 	rsbvc	r6, pc, #0, 12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
     7c8:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
     7cc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     7d0:	50470065 	subpl	r0, r7, r5, rrx
     7d4:	635f4f49 	cmpvs	pc, #292	; 0x124
     7d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
}
     7dc:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     7e0:	6f694474 	svcvs	0x00694474
     7e4:	625f5f00 	subsvs	r5, pc, #0, 30
     7e8:	6f747475 	svcvs	0x00747475
void __pinlist_setirq (int val) {
     7ec:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 804 <__pinlist_setirq+0x18>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     804:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	53007172 	movwpl	r7, #370	; 0x172
     80c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
     810:	6f416c72 	svcvs	0x00416c72
	for (i = 0; i < N_PINLIST; i++) {
     814:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
}
     818:	5f5f0063 	svcpl	0x005f0063
     81c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     820:	6b636174 	blvs	18d8df8 <__ccfg+0x18b8e50>
     824:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
void GPIOIntHandler () {
     828:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
if (buttons_int) {
     82c:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
     830:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
	buttons_disable ();
     834:	61696c69 	cmnvs	r9, r9, ror #24
     838:	745f7972 	ldrbvc	r7, [pc], #-2418	; 840 <GPIOIntHandler+0x18>
	i_trigger ((aword)&__button_list);
     83c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     840:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     844:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     848:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
     84c:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
     850:	50470071 	subpl	r0, r7, r1, ror r0
     854:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
     858:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     85c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     860:	52415500 	subpl	r5, r1, #0, 10
     864:	46494654 			; <UNDEFINED> instruction: 0x46494654
	RISE_N_SHINE;
     868:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
     86c:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
     870:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
if (pin_sensor_int) {
     874:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
     878:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
	i_trigger ((aword)(&__input_pins));
     87c:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     880:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     884:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     888:	00766174 	rsbseq	r6, r6, r4, ror r1
     88c:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     890:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
     894:	616c6564 	cmnvs	ip, r4, ror #10
     898:	4f410079 	svcmi	0x00410079
     89c:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     8a0:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
     8a4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	__pinsen_disable_and_clear;
     8a8:	5f00656c 	svcpl	0x0000656c
	RISE_N_SHINE;
     8ac:	5f69705f 	svcpl	0x0069705f
     8b0:	0077656e 	rsbseq	r6, r7, lr, ror #10
     8b4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
}
     8b8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     8bc:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     8c0:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
     8c4:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
     8c8:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
void system_init () {
     8cc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	4100656c 	tstmi	r0, ip, ror #10
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	61424e4f 	cmpvs	r2, pc, asr #28
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     8dc:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
     8e0:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	61746c6f 	cmnvs	r4, pc, ror #24
     8e8:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	6f690074 	svcvs	0x00690074
     8f0:	5f716572 	svcpl	0x00716572
     8f4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	5f00615f 	svcpl	0x0000615f
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	5f69705f 	svcpl	0x0069705f
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     908:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     90c:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	5f007469 	svcpl	0x00007469
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	5f69705f 	svcpl	0x0069705f
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     920:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     924:	006d756e 	rsbeq	r7, sp, lr, ror #10
     928:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 874 <GPIOIntHandler+0x4c>
		if (port_confs [i] & 0x80)
     92c:	616d2f65 	cmnvs	sp, r5, ror #30
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     930:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     934:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		if (port_confs [i] & 0x40)
     938:	706f746b 	rsbvc	r7, pc, fp, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     940:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     944:	4349502f 	movtmi	r5, #36911	; 0x902f
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	502f534f 	eorpl	r5, pc, pc, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	534f6369 	movtpl	r6, #62313	; 0xf369
	all_leds_blink;
     950:	3143432f 	cmpcc	r3, pc, lsr #6
     954:	2f585833 	svccs	0x00585833
     958:	6e69616d 	powvsez	f6, f1, #5.0
     95c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
     960:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
     964:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     968:	6142746e 	cmpvs	r2, lr, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     970:	41550079 	cmpmi	r5, r9, ror r0
     974:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     978:	616e4574 	smcvs	58452	; 0xe454
     97c:	00656c62 	rsbeq	r6, r5, r2, ror #24
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
     988:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
	IntEnable (INT_AON_RTC_COMB);
     98c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     990:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
     994:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
	__pi_malloc_init ();
     998:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
	IntEnable (INT_AON_GPIO_EDGE);
     99c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     9a0:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	00746c61 	rsbseq	r6, r4, r1, ror #24
     9ac:	4f706f74 	svcmi	0x00706f74
     9b0:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b4:	6174536e 	cmnvs	r4, lr, ror #6
     9b8:	5f006b63 	svcpl	0x00006b63
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
     9c0:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
     9c4:	30545241 	subscc	r5, r4, r1, asr #4
	urates [0] = UART_RATE / 100;
     9c8:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     9cc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
	reinit_uart ();
     9d0:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
	EXTRA_INITIALIZERS;
     9d4:	53706565 	cmnpl	r0, #423624704	; 0x19400000
     9d8:	7065656c 	rsbvc	r6, r5, ip, ror #10
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	726f7000 	rsbvc	r7, pc, #0
     9e0:	6f635f74 	svcvs	0x00635f74
     9e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e8:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     9ec:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9f0:	5f657461 	svcpl	0x00657461
     9f4:	616c6564 	cmnvs	ip, r4, ror #10
			devinit [i] . init (devinit [i] . param);
     9f8:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	00736b63 	rsbseq	r6, r3, r3, ror #22
     a00:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
     a04:	00657275 	rsbeq	r7, r5, r5, ror r2
	IntEnable (INT_UART0_COMB);
     a08:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
     a0c:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
}
     a10:	00745f6e 	rsbseq	r5, r4, lr, ror #30
	tci_run_auxiliary_timer ();
     a14:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
		diag ("");
     a18:	5f007665 	svcpl	0x00007665
     a1c:	5f69705f 	svcpl	0x0069705f
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a20:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	5f007970 	svcpl	0x00007970
		diag ("Leftover RAM: %d bytes",
     a28:	5f69705f 	svcpl	0x0069705f
     a2c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     a30:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
     a34:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     a38:	66710074 			; <UNDEFINED> instruction: 0x66710074
     a3c:	00656572 	rsbeq	r6, r5, r2, ror r5
     a40:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
     a44:	5f5f0071 	svcpl	0x005f0071
     a48:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     a4c:	006b726f 	rsbeq	r7, fp, pc, ror #4
     a50:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a54:	6f706d00 	svcvs	0x00706d00
     a58:	00736c6f 	rsbseq	r6, r3, pc, ror #24
     a5c:	61765f5f 	cmnvs	r6, pc, asr pc
     a60:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     a64:	74750074 	ldrbtvc	r0, [r5], #-116	; 0xffffff8c
     a68:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     a6c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     a70:	52415500 	subpl	r5, r1, #0, 10
     a74:	73754254 	cmnvc	r5, #84, 4	; 0x40000005
     a78:	5f5f0079 	svcpl	0x005f0079
     a7c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 9a4 <system_init+0xd8>	; <UNPREDICTABLE>
     a80:	6f6c6c61 	svcvs	0x006c6c61
__attribute__ ((noreturn)) void __pi_release () {
     a84:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
     a88:	2f007469 	svccs	0x00007469
     a8c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a90:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	check_stack_overflow;
     a94:	2f6e6974 	svccs	0x006e6974
     a98:	6b736544 	blvs	1cd9fb0 <__ccfg+0x1cba008>
     a9c:	2f706f74 	svccs	0x00706f74
	update_n_wake (MAX_WORD, NO);
     aa0:	4f534c4f 	svcmi	0x00534c4f
     aa4:	2f54454e 	svccs	0x0054454e
     aa8:	4f434950 	svcmi	0x00434950
	for_all_tasks (__pi_curr) {
     aac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     ab0:	2f534f63 	svccs	0x00534f63
     ab4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
  __ASM volatile ("cpsid i" : : : "memory");
     ab8:	6b2f6c65 	blvs	bdbc54 <__ccfg+0xbbbcac>
	__SLEEP;
     abc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     ac0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     ac4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     ac8:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
	system_event_count ++;
     acc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     ad0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	switch (__pi_systat.effpdm) {
     ad4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     ad8:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     adc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     ae0:	616d5f69 	cmnvs	sp, r9, ror #30
			__WFI ();
     ae4:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
     ae8:	72630065 	rsbvc	r0, r3, #101	; 0x65
     aec:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
	check_stack_overflow;
     af0:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
     af4:	006b6863 	rsbeq	r6, fp, r3, ror #16
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af8:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
     afc:	70006565 	andvc	r6, r0, r5, ror #10
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
			goto Redo;
     b04:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
	for_all_tasks (__pi_curr) {
     b08:	006e656c 	rsbeq	r6, lr, ip, ror #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b10:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     b14:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
     b1c:	76656464 	strbtvc	r6, [r5], -r4, ror #8
     b20:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b24:	64697000 	strbtvs	r7, [r9], #-0
     b28:	00726576 	rsbseq	r6, r2, r6, ror r5
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b2c:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
     b30:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			__WFI ();
     b34:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
     b3c:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
}
     b40:	5f746e65 	svcpl	0x00746e65
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b44:	5f5f0074 	svcpl	0x005f0074
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b48:	63756e67 	cmnvs	r5, #1648	; 0x670
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4c:	5f61765f 	svcpl	0x0061765f
     b50:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
     b58:	00656572 	rsbeq	r6, r5, r2, ror r5
     b5c:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	00797274 	rsbseq	r7, r9, r4, ror r2
     b68:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
     b6c:	73656d00 	cmnvc	r5, #0, 26
     b70:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     b78:	705f5f00 	subsvc	r5, pc, r0, lsl #30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	61625f69 	cmnvs	r2, r9, ror #30
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b80:	61747364 	cmnvs	r4, r4, ror #6
     b84:	5f006574 	svcpl	0x00006574
     b88:	5f69705f 	svcpl	0x0069705f
     b8c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     b90:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			SysCtrlSetRechargeBeforePowerDown
     b94:	61775f69 	cmnvs	r7, r9, ror #30
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b98:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9c:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
     ba0:	6b00646e 	blvs	19d60 <__exidx_end+0x170ec>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	616c6c69 	cmnvs	ip, r9, ror #24
     ba8:	5f006c6c 	svcpl	0x00006c6c
     bac:	5f69705f 	svcpl	0x0069705f
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
     bb4:	00656572 	rsbeq	r6, r5, r2, ror r5
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	6f6f425f 	svcvs	0x006f425f
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
     bc0:	006b6e75 	rsbeq	r6, fp, r5, ror lr
     bc4:	61647075 	smcvs	18181	; 0x4705
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc8:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
			while (!(AONWUCPowerStatusGet () &
     bcc:	6b61775f 	blvs	185e950 <__ccfg+0x183e9a8>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	5f5f0065 	svcpl	0x005f0065
     bd4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     bd8:	00646565 	rsbeq	r6, r4, r5, ror #10
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bdc:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
     be0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     be4:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
     be8:	5f5f0074 	svcpl	0x005f0074
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; b14 <__pi_release+0x90>	; <UNPREDICTABLE>
     bf0:	70636d65 	rsbvc	r6, r3, r5, ror #26
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bf4:	67640079 			; <UNDEFINED> instruction: 0x67640079
     bf8:	0074756f 	rsbseq	r7, r4, pc, ror #10
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfc:	70615f5f 	rsbvc	r5, r1, pc, asr pc
			reinit_uart ();
     c00:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c04:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     c08:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
}
     c0c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c10:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
     c14:	666e006e 	strbtvs	r0, [lr], -lr, rrx
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	006c6961 	rsbeq	r6, ip, r1, ror #18
     c1c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c20:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c24:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
     c28:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
     c2c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c30:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c3c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     c40:	70636e72 	rsbvc	r6, r3, r2, ror lr
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c44:	5f5f0079 	svcpl	0x005f0079
     c48:	6a5f6970 	bvs	17db210 <__ccfg+0x17bb268>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4c:	006e696f 	rsbeq	r6, lr, pc, ror #18
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	645f7265 	ldrbvs	r7, [pc], #-613	; c5c <__pi_release+0x1d8>
     c58:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
			PRCMPowerDomainOff (
     c5c:	5f5f0065 	svcpl	0x005f0065
     c60:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
	__SLEEP;
     c64:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
     c68:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
  __ASM volatile ("cpsie i" : : : "memory");
     c6c:	715f7663 	cmpvc	pc, r3, ror #12
	goto Redo;
     c70:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     c74:	65727000 	ldrbvs	r7, [r2, #-0]!
     c78:	5f5f0076 	svcpl	0x005f0076
     c7c:	5f766374 	svcpl	0x00766374
     c80:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
     c84:	00745f72 	rsbseq	r5, r4, r2, ror pc
     c88:	70766374 	rsbsvc	r6, r6, r4, ror r3
     c8c:	745f7968 	ldrbvc	r7, [pc], #-2408	; c94 <__pi_release+0x210>
     c90:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
     c94:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     c98:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     c9c:	2f006c6f 	svccs	0x00006c6f
     ca0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     ca4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     ca8:	2f6e6974 	svccs	0x006e6974
     cac:	6b736544 	blvs	1cda1c4 <__ccfg+0x1cba21c>
     cb0:	2f706f74 	svccs	0x00706f74
     cb4:	4f534c4f 	svcmi	0x00534c4f
     cb8:	2f54454e 	svccs	0x0054454e
     cbc:	4f434950 	svcmi	0x00434950
     cc0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     cc4:	2f534f63 	svccs	0x00534f63
     cc8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     ccc:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
     cd0:	2f497465 	svccs	0x00497465
     cd4:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
     cd8:	63740063 	cmnvs	r4, #99	; 0x63
int main (void) {
     cdc:	645f7076 	ldrbvs	r7, [pc], #-118	; ce4 <main+0x8>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	6f707369 	svcvs	0x00707369
     ce4:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
	system_init ();
     cf0:	656e0067 	strbvs	r0, [lr, #-103]!	; 0xffffff99
	tcv_init ();
     cf4:	63007478 	movwvs	r7, #1144	; 0x478
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
     cfc:	745f6e75 	ldrbvc	r6, [pc], #-3701	; d04 <main+0x28>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d04:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     d08:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     d10:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
	delay (16, 0);
     d14:	63740074 	cmnvs	r4, #116	; 0x74
     d18:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
     d1c:	74006f66 	strvc	r6, [r0], #-3942	; 0xfffff09a
	__pi_release ();
     d20:	6f5f7663 	svcvs	0x005f7663
     d24:	006e6570 	rsbeq	r6, lr, r0, ror r5
     d28:	5f766374 	svcpl	0x00766374
     d2c:	706f7264 	rsbvc	r7, pc, r4, ror #4
     d30:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
     d34:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
     d38:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
static void killev (__pi_pcb_t *pid) {
     d3c:	00797470 	rsbseq	r7, r9, r0, ror r4
	wfun = (aword)(pid->code);
     d40:	70766374 	rsbsvc	r6, r6, r4, ror r3
	for_all_tasks (i) {
     d44:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 3e4 <tci_run_auxiliary_timer+0x24>
		for (j = 0; j < nevents (i); j++) {
     d48:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
     d4c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d50:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
			    || i->Events [j] . Event == wfun
     d54:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
		for (j = 0; j < nevents (i); j++) {
     d58:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
			if (i->Events [j] . Event == (aword)pid
     d5c:	73657565 	cmnvc	r5, #423624704	; 0x19400000
     d60:	745f5f00 	ldrbvc	r5, [pc], #-3840	; d68 <killev+0x2c>
     d64:	715f7663 	cmpvc	pc, r3, ror #12
				wakeupev (i, j);
     d68:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     d6c:	5f00735f 	svcpl	0x0000735f
	for_all_tasks (i) {
     d70:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
}
     d74:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	745f6d65 	ldrbvc	r6, [pc], #-3429	; d80 <qfree+0x8>
static void qfree (aword *ch) {
     d7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; d84 <qfree+0xc>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	cc = (aword*)(mpools + MA_NP);
     d84:	636f6c62 	cmnvs	pc, #25088	; 0x6200
	m_setnextp (ch, chunk);
     d88:	00745f6b 	rsbseq	r5, r4, fp, ror #30
	m_setnextp (cc, ch);
     d8c:	70747461 	rsbsvc	r7, r4, r1, ror #8
}
     d90:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	00746e65 	rsbseq	r6, r4, r5, ror #28
     d98:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
     d9c:	72450065 	subvc	r0, r5, #101	; 0x65
			m_setnextp (cc, m_nextp (chunk));
     da0:	0074725f 	rsbseq	r7, r4, pc, asr r2
			m_size (chunk) += m_hdrlen + m_size (ch);
     da4:	5f766374 	svcpl	0x00766374
     da8:	006f6c63 	rsbeq	r6, pc, r3, ror #24
     dac:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     db0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	0073726f 	rsbseq	r7, r3, pc, ror #4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     db8:	5f766374 	svcpl	0x00766374
     dbc:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
     dc0:	63740065 	cmnvs	r4, #101	; 0x65
			m_setnextp (cc, m_nextp (chunk));
     dc4:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
     dcc:	6f5f7663 	svcvs	0x005f7663
     dd0:	74007475 	strvc	r7, [r0], #-1141	; 0xfffffb8b
     dd4:	5f707663 	svcpl	0x00707663
     dd8:	0077656e 	rsbseq	r6, r7, lr, ror #10
     ddc:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
			if (m_size (chunk) >= m_size (ch))
     de0:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
     de4:	745f7663 	ldrbvc	r7, [pc], #-1635	; dec <qfree+0x74>
     de8:	7000746d 	andvc	r7, r0, sp, ror #8
		chunk = m_nextp (chunk))
     dec:	00737274 	rsbseq	r7, r3, r4, ror r2
     df0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     df4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	diag_wait (a);
     dfc:	706e775f 	rsbvc	r7, lr, pc, asr r7
	diag_wchar (c, a);
     e00:	63740073 	cmnvs	r4, #115	; 0x73
     e04:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
}
     e08:	00657469 	rsbeq	r7, r5, r9, ror #8
     e0c:	5f766374 	svcpl	0x00766374
	syserror (ESTATE, "state");
     e10:	00766372 	rsbseq	r6, r6, r2, ror r3
     e14:	5f766374 	svcpl	0x00766374
     e18:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     e1c:	5f5f0065 	svcpl	0x005f0065
void update_n_wake (word min, Boolean force) {
     e20:	5f766374 	svcpl	0x00766374
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
     e28:	5f637365 	svcpl	0x00637365
     e2c:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e30:	70007379 	andvc	r7, r0, r9, ror r3
     e34:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
     e38:	006c6163 	rsbeq	r6, ip, r3, ror #2
     e3c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
     e40:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     e44:	00646575 	rsbeq	r6, r4, r5, ror r5
     e48:	5f766374 	svcpl	0x00766374
     e4c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     e50:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e54:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     e58:	63740074 	cmnvs	r4, #116	; 0x74
     e5c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
     e60:	6573006d 	ldrbvs	r0, [r3, #-109]!	; 0xffffff93
		for_all_tasks (i) {
     e64:	6f697373 	svcvs	0x00697373
	__pi_mintk = znew + min;
     e68:	6374006e 	cmnvs	r4, #110	; 0x6e
     e6c:	635f7076 	cmpvs	pc, #118	; 0x76
			if (!twaiting (i))
     e70:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
     e74:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
     e7c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     e80:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
     e84:	63740064 	cmnvs	r4, #100	; 0x64
     e88:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     e8c:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     e90:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     e94:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
     e98:	006e7265 	rsbeq	r7, lr, r5, ror #4
     e9c:	5f766374 	svcpl	0x00766374
     ea0:	0065706f 	rsbeq	r7, r5, pc, rrx
     ea4:	5f766374 	svcpl	0x00766374
				wakeuptm (i);
     ea8:	00746d78 	rsbseq	r6, r4, r8, ror sp
     eac:	61766374 	cmnvs	r6, r4, ror r3
		for_all_tasks (i) {
     eb0:	745f7064 	ldrbvc	r7, [pc], #-100	; eb8 <update_n_wake+0x98>
				d = i->Timer - znew;
     eb4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     eb8:	756c705f 	strbvc	r7, [ip, #-95]!	; 0xffffffa1
     ebc:	65680067 	strbvs	r0, [r8, #-103]!	; 0xffffff99
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	61006461 	tstvs	r0, r1, ror #8
     ec4:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
     ec8:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
	__pi_old = znew;
     ecc:	5f5f0073 	svcpl	0x005f0073
}
     ed0:	5f766374 	svcpl	0x00766374
	TCI_RUN_DELAY_TIMER;
     ed4:	61656871 	smcvs	22145	; 0x5681
}
     ed8:	00745f64 	rsbseq	r5, r4, r4, ror #30
     edc:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     ee0:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
     ee4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     ee8:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
void proceed (word state) {
     eec:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
	prcdstate (__pi_curr, state);
     ef0:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
     ef4:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
	release;
     ef8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     efc:	63725f79 	cmnvs	r2, #484	; 0x1e4
void __pi_wait (aword event, word state) {
     f00:	71620076 	smcvc	8198	; 0x2006
	sint j = nevents (__pi_curr);
     f04:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
	if (j >= MAX_EVENTS_PER_TASK)
     f08:	756c7000 	strbvc	r7, [ip, #-0]!
     f0c:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
     f10:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f18 <__pi_wait+0x18>
		syserror (ENEVENTS, "sw");
     f14:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     f18:	636f6c62 	cmnvs	pc, #25088	; 0x6200
	setestate (__pi_curr->Events [j], state, event);
     f1c:	00735f6b 	rsbseq	r5, r3, fp, ror #30
	incwait (__pi_curr);
     f20:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
	setestate (__pi_curr->Events [j], state, event);
     f24:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
}
     f28:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     f2c:	6f635f70 	svcvs	0x00635f70
     f30:	6f72746e 	svcvs	0x0072746e
void __pi_trigger (aword event) {
     f34:	655f006c 	ldrbvs	r0, [pc, #-108]	; ed0 <update_n_wake+0xb0>
	for_all_tasks (i) {
     f38:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
		for (j = 0; j < nevents (i); j++) {
     f3c:	645f006b 	ldrbvs	r0, [pc], #-107	; f44 <__pi_trigger+0x10>
     f40:	00617461 	rsbeq	r7, r1, r1, ror #8
     f44:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
     f48:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
			if (i->Events [j] . Event == event) {
     f4c:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
     f50:	5349746c 	movtpl	r7, #37996	; 0x946c
     f54:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
				wakeupev (i, j);
     f58:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f5c:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
	for_all_tasks (i) {
     f60:	61485253 	cmpvs	r8, r3, asr r2
}
     f64:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
aword __pi_join (aword pid, word st) {
     f68:	655f0072 	ldrbvs	r0, [pc, #-114]	; efe <proceed+0x12>
	for_all_tasks (i) {
     f6c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     f70:	62655f00 	rsbvs	r5, r5, #0, 30
	return 0;
     f74:	2f007373 	svccs	0x00007373
		if ((aword)i == pid) {
     f78:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			__pi_wait (pid, st);
     f7c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
}
     f80:	2f6e6974 	svccs	0x006e6974
	for_all_tasks (i) {
     f84:	6b736544 	blvs	1cda49c <__ccfg+0x1cba4f4>
     f88:	2f706f74 	svccs	0x00706f74
void delay (word d, word state) {
     f8c:	4f534c4f 	svcmi	0x00534c4f
	settstate (__pi_curr, state);
     f90:	2f54454e 	svccs	0x0054454e
     f94:	4f434950 	svcmi	0x00434950
     f98:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     f9c:	2f534f63 	svccs	0x00534f63
	update_n_wake (d, YES);
     fa0:	33314343 	teqcc	r1, #201326593	; 0xc000001
     fa4:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
	__pi_curr->Timer = __pi_old + d;
     fa8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     fac:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
	inctimer (__pi_curr);
     fb0:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     fb4:	73625f00 	cmnvc	r2, #0, 30
     fb8:	655f0073 	ldrbvs	r0, [pc, #-115]	; f4d <__pi_trigger+0x19>
}
     fbc:	61746164 	cmnvs	r4, r4, ror #2
     fc0:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
	if (fun == NULL)
     fc4:	61666544 	cmnvs	r6, r4, asr #10
		return (int) __pi_curr;
     fc8:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
     fcc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
	for_all_tasks (i)
     fd0:	67007265 	strvs	r7, [r0, -r5, ror #4]
}
     fd4:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
		if (i->code == fun)
     fd8:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
	for_all_tasks (i)
     fdc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     fe0:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
     fe4:	73654432 	cmnvc	r5, #838860800	; 0x32000000
int __pi_strlen (const char *s) {
     fe8:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
}
     ff0:	43005253 	movwmi	r5, #595	; 0x253
	for (i = 0; *(s+i) != '\0'; i++);
     ff4:	5f474643 	svcpl	0x00474643
	while (n--)
     ff8:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
     ffc:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
		*dest++ = *src++;
    1000:	00305f44 	eorseq	r5, r0, r4, asr #30
    1004:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1008:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
void adddevfunc (devreqfun_t rf, int loc) {
    100c:	4f4c5f54 	svcmi	0x004c5f54
		syserror (EREQPAR, "addv");
    1010:	315f4441 	cmpcc	pc, r1, asr #8
		syserror (ERESOURCE, "addv");
    1014:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (ioreq [loc] != NULL)
    1018:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
    101c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
		syserror (ERESOURCE, "addv");
    1020:	00474946 	subeq	r4, r7, r6, asr #18
	ioreq [loc] = rf;
    1024:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    1028:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    102c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	00544553 	subseq	r4, r4, r3, asr r5
    1034:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1038:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1040 <io+0x10>
    103c:	4f435f45 	svcmi	0x00435f45
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1040:	5f00464e 	svcpl	0x0000464e
    1044:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    1048:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
		syserror (ENODEVICE, "io");
    104c:	2f656d6f 	svccs	0x00656d6f
    1050:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	if (len == 0)
    1054:	442f6e69 	strtmi	r6, [pc], #-3689	; 105c <io+0x2c>
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    105c:	4f2f706f 	svcmi	0x002f706f
	if (ret >= 0)
    1060:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	if (ret == -1) {
    1064:	502f5445 	eorpl	r5, pc, r5, asr #8
    1068:	534f4349 	movtpl	r4, #62281	; 0xf349
		if (retry == WNONE)
    106c:	6369502f 	cmnvs	r9, #47	; 0x2f
		iowait (dev, operation, retry);
    1070:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    1074:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    1078:	63632f58 	cmnvs	r3, #88, 30	; 0x160
			release;
    107c:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
	if (ret == -2) {
    1080:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		if (retry != WNONE) {
    1084:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1088:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
			iowait (dev, operation, retry);
    108c:	445f444e 	ldrbmi	r4, [pc], #-1102	; 1094 <io+0x64>
    1090:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
			(ioreq [dev]) (NONE, buf, len);
    1094:	5347414c 	movtpl	r4, #29004	; 0x714c
    1098:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    109c:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		(ioreq [dev]) (NONE, buf, len);
    10a0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; f94 <delay+0x8>
    10a4:	305f4341 	subscc	r4, pc, r1, asr #6
    10a8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    10ac:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
	if (retry != WNONE) {
    10b0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fa4 <delay+0x18>
		delay (-ret - 2, retry);
    10b4:	315f4341 	cmpcc	pc, r1, asr #6
    10b8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10bc:	4f4d5f47 	svcmi	0x004d5f47
    10c0:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
		release;
    10c4:	5f464e4f 	svcpl	0x00464e4f
    10c8:	43430031 	movtmi	r0, #12337	; 0x3031
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    10d0:	5f474643 	svcpl	0x00474643
    10d4:	5f504154 	svcpl	0x00504154
    10d8:	5f504144 	svcpl	0x00504144
    10dc:	43430030 	movtmi	r0, #12336	; 0x3030
		syserror (ERESOURCE, "mal1");
    10e0:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    10e4:	5f474643 	svcpl	0x00474643
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	5f504154 	svcpl	0x00504154
    10ec:	5f504144 	svcpl	0x00504144
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f0:	63630031 	cmnvs	r3, #49	; 0x31
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f4:	745f6766 	ldrbvc	r6, [pc], #-1894	; 10fc <__pi_malloc_init+0x30>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    10fc:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1100:	505f4746 	subspl	r4, pc, r6, asr #14
}
    1104:	5f544f52 	svcpl	0x00544f52
    1108:	5f373231 	svcpl	0x00373231
    110c:	43003639 	movwmi	r3, #1593	; 0x639
    1110:	5f474643 	svcpl	0x00474643
    1114:	53415245 	movtpl	r5, #4677	; 0x1245
    1118:	4f435f45 	svcmi	0x00435f45
void __pi_free (aword *ch) {
    111c:	4300464e 	movwmi	r4, #1614	; 0x64e
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1120:	5f474643 	svcpl	0x00474643
    1124:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		syserror (EMALLOC, "malg");
    1128:	4f52505f 	svcmi	0x0052505f
    112c:	31335f54 	teqcc	r3, r4, asr pc
	mcfree [MA_NP] += m_size (ch);
    1130:	4300305f 	movwmi	r3, #95	; 0x5f
		m_size (ch) ^= MALLOC_UMASK;
    1134:	5f474643 	svcpl	0x00474643
    1138:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
	mcfree [MA_NP] += m_size (ch);
    113c:	41565f45 	cmpmi	r6, r5, asr #30
	QFREE;
    1140:	5f44494c 	svcpl	0x0044494c
	if (mevent [MA_NP] . nwait) {
    1144:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1148:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		trigger ((aword)(&(mevent [MA_NP])));
    114c:	52465f47 	subpl	r5, r6, #284	; 0x11c
		mevent [MA_NP] . nwait --;
    1150:	4f5f5145 	svcmi	0x005f5145
}
    1154:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
    1158:	43430054 	movtmi	r0, #12372	; 0x3054
    115c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1160:	5f474643 	svcpl	0x00474643
void kill (aword pid) {
    1164:	544f5250 	strbpl	r5, [pc], #-592	; 116c <kill+0x8>
		pid = (aword) __pi_curr;
    1168:	5f33365f 	svcpl	0x0033365f
	j = NULL;
    116c:	43003233 	movwmi	r3, #563	; 0x233
	for_all_tasks (i) {
    1170:	5f474643 	svcpl	0x00474643
	syserror (EREQPAR, "kpi");
    1174:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1178:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		if ((aword)i == pid) {
    117c:	4300305f 	movwmi	r3, #95	; 0x5f
    1180:	5f474643 	svcpl	0x00474643
				__PCB = i->Next;
    1184:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
			killev (i);
    1188:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
			ufree (i);
    118c:	4300315f 	movwmi	r3, #351	; 0x15f
			if (i == __pi_curr)
    1190:	5f474643 	svcpl	0x00474643
    1194:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				release;
    1198:	4f52505f 	svcmi	0x0052505f
				j->Next = i->Next;
    119c:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
    11a0:	0034365f 	eorseq	r3, r4, pc, asr r6
    11a4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    11a8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    11ac:	5f464c5f 	svcpl	0x00464c5f
    11b0:	004b4c43 	subeq	r4, fp, r3, asr #24
	if (size < 8)
    11b4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		_size = 2;
    11b8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
		_size = (((aword)size) + 3) >> 2;
    11c0:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
		if (m_magic (chunk) != MALLOC_MAGIC)
    11c4:	534e4f49 	movtpl	r4, #61257	; 0xef49
		_size = (((aword)size) + 3) >> 2;
    11c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
		if (mevent [MA_NP] . nfail != 255)
    11cc:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
    11d0:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
			mevent [MA_NP] . nfail ++;
    11d4:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
		mnfree [MA_NP] = 0;
    11d8:	70006b6e 	andvc	r6, r0, lr, ror #22
    11dc:	735f6e69 	cmpvc	pc, #1680	; 0x690
		if (m_magic (chunk) != MALLOC_MAGIC)
    11e0:	6f736e65 	svcvs	0x00736e65
    11e4:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
			syserror (EMALLOC, "malc");
    11e8:	70006461 	andvc	r6, r0, r1, ror #8
    11ec:	735f6e69 	cmpvc	pc, #1680	; 0x690
		if (m_size (chunk) >= _size)
    11f0:	6f736e65 	svcvs	0x00736e65
    11f4:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
		chunk = m_nextp (chunk)) {
    11f8:	2f007469 	svccs	0x00007469
		m_setnextp (cc, m_nextp (chunk));
    11fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1200:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1204:	2f6e6974 	svccs	0x006e6974
			m_size (chunk) = _size;
    1208:	6b736544 	blvs	1cda720 <__ccfg+0x1cba778>
			cc = chunk + _size + m_hdrlen;
    120c:	2f706f74 	svccs	0x00706f74
    1210:	4f534c4f 	svcmi	0x00534c4f
			m_size (cc) = waste - m_hdrlen;
    1214:	2f54454e 	svccs	0x0054454e
			QFREE;
    1218:	4f434950 	svcmi	0x00434950
		mevent [MA_NP] . nfail = 0;
    121c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		mcfree [MA_NP] -= m_size (chunk);
    1220:	2f534f63 	svccs	0x00534f63
    1224:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1228:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    122c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		m_size (chunk) |= MALLOC_UMASK;
    1230:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
		m_size (chunk) |= MALLOC_UMASK;
    1238:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
}
    1240:	006d7265 	rsbeq	r7, sp, r5, ror #4
    1244:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
    1248:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    124c:	6f626544 	svcvs	0x00626544
    1250:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
    1254:	6f682f00 	svcvs	0x00682f00
    1258:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 10ac <io+0x7c>
aword __pi_fork (fsmcode func, aword data) {
    125c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1264:	6f746b73 	svcvs	0x00746b73
    1268:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if ((j = __PCB) == NULL)
    126c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	i->Next = NULL;
    1270:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	i->data = data;
    1274:	2f534f43 	svccs	0x00534f43
		if ((j = __PCB) == NULL)
    1278:	4f636950 	svcmi	0x00636950
}
    127c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			for (; j->Next != NULL; j = j->Next);
    1280:	2f736269 	svccs	0x00736269
    1284:	622f4f49 	eorvs	r4, pc, #292	; 0x124
	return (aword) i;
    1288:	6f747475 	svcvs	0x00747475
    128c:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
	if (mevent [MA_NP] . nwait != 255)
    1290:	75627000 	strbvc	r7, [r2, #-0]!
    1294:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1298:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		mevent [MA_NP] . nwait ++;
    129c:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12a4:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
void diag (const char *mess, ...) {
    12a8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12ac:	63615f73 	cmnvs	r1, #460	; 0x1cc
    12b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	diag_disable_int (a, is);
    12b4:	6f434500 	svcvs	0x00434500
    12b8:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
    12bc:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
				d = (bc == 16) ? 10000 : 1000000000;
    12c0:	655f7469 	ldrbvs	r7, [pc, #-1129]	; e5f <update_n_wake+0x3f>
	diag_disable_int (a, is);
    12c4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
	while (*mess != '\0') {
    12c8:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
	dgout ('\r');
    12cc:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
	dgout ('\n');
    12d0:	00305f64 	eorseq	r5, r0, r4, ror #30
    12d4:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
    12d8:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	diag_wait (a);
    12dc:	5f656500 	svcpl	0x00656500
	diag_enable_int (a, is);
    12e0:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    12e4:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
}
    12e8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    12ec:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    12f0:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		if (*mess == '%') {
    12f4:	5f656500 	svcpl	0x00656500
    12f8:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
			if (*mess == 'l') {
    12fc:	6f435700 	svcvs	0x00435700
    1300:	6300746e 	movwvs	r7, #1134	; 0x46e
				mess++;
    1304:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
				val = va_arg (ap, lword);
    1308:	73616c00 	cmnvc	r1, #0, 24
				bc = 32;
    130c:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
				bc = 16;
    1310:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
			switch (*mess) {
    1314:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
    1318:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    131c:	6600636e 	strvs	r6, [r0], -lr, ror #6
				dgout ('%');
    1320:	006d6f72 	rsbeq	r6, sp, r2, ror pc
    1324:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
				dgout (*mess);
    1328:	00646165 	rsbeq	r6, r4, r5, ror #2
    132c:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
			switch (*mess) {
    1330:	6f682f00 	svcvs	0x00682f00
					v = __pi_hex_enc_table [
    1334:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1188 <kill+0x24>
					i += 4;
    1338:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
					(val >> (bc - i)) & 0xf];
    133c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1340:	6f746b73 	svcvs	0x00746b73
					dgout (v);
    1344:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1348:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				while (i < bc) {
    134c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			mess++;
    1350:	2f534f43 	svccs	0x00534f43
					d /= 10;
    1354:	4f636950 	svcmi	0x00636950
				if ((val >> (bc - 1)) & 1) {
    1358:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    135c:	2f736269 	svccs	0x00736269
					dgout ('-');
    1360:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    1364:	2f656761 	svccs	0x00656761
						val |= 0xffff0000;
    1368:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    136c:	5f656761 	svcpl	0x00656761
    1370:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
				d = (bc == 16) ? 10000 : 1000000000;
    1374:	33303872 	teqcc	r0, #7471104	; 0x720000
    1378:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    137c:	6f6c6363 	svcvs	0x006c6363
					v = (word) (val / d);
    1380:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
					if (v || d == 1) break;
    1384:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1388:	706f6300 	rsbvc	r6, pc, r0, lsl #6
					d /= 10;
    138c:	63006e65 	movwvs	r6, #3685	; 0xe65
				d = (bc == 16) ? 10000 : 1000000000;
    1390:	00727470 	rsbseq	r7, r2, r0, ror r4
					dgout (v + '0');
    1394:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    1398:	00657a69 	rsbeq	r7, r5, r9, ror #20
    139c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
					d /= 10;
    13a0:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
					val = val - (v * d);
    13a4:	00656e6f 	rsbeq	r6, r5, pc, ror #28
					if (d == 0) break;
    13a8:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
					v = (word) (val / d);
    13ac:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
    13b0:	00746961 	rsbseq	r6, r4, r1, ror #18
				if (bc == 16)
    13b4:	5f746567 	svcpl	0x00746567
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
					val &= 0xffff;
    13bc:	74757000 	ldrbtvc	r7, [r5], #-0
					dgout (*s);
    13c0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
					s++;
    13c4:	5f5f0065 	svcpl	0x005f0065
				while (*s != '\0') {
    13c8:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
    13cc:	00656e69 	rsbeq	r6, r5, r9, ror #28
			dgout (*mess++);
    13d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 131c <diag+0x74>
    13d4:	616d2f65 	cmnvs	sp, r5, ror #30
    13d8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    13dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    13e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
    13e4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    while(1)
    13e8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
{
    13ec:	4349502f 	movtmi	r5, #36911	; 0x902f
    SetupTrimDevice();
    13f0:	502f534f 	eorpl	r5, pc, pc, asr #6
    pui32Src = &_etext;
    13f4:	534f6369 	movtpl	r6, #62313	; 0xf369
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    __asm("    ldr     r0, =_bss\n"
    13fc:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1400:	61697265 	cmnvs	r9, r5, ror #4
    1404:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1408:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    140c:	7300632e 	movwvc	r6, #814	; 0x32e
   main();
    1410:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    FaultISR();
    1414:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
        *pui32Dest++ = *pui32Src++;
    1418:	73007363 	movwvc	r7, #867	; 0x363
    141c:	6f5f7265 	svcvs	0x005f7265
    1420:	00667475 	rsbeq	r7, r6, r5, ror r4
    1424:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1370 <diag+0xc8>
    1428:	616d2f65 	cmnvs	sp, r5, ror #30
    142c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1430:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1434:	706f746b 	rsbvc	r7, pc, fp, ror #8
static byte get_byte () {
    1438:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    143c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1440:	4349502f 	movtmi	r5, #36911	; 0x902f
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1444:	502f534f 	eorpl	r5, pc, pc, asr #6
    1448:	534f6369 	movtpl	r6, #62313	; 0xf369
		if (ee_inp)
    144c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
			b |= 1;
    1450:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1454:	61697265 	cmnvs	r9, r5, ror #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1458:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
	for (b = 0, i = 0; i < 8; i++) {
    145c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 4f2 <AONRTCIntHandler+0x10a>
}
    1460:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    1464:	6f682f00 	svcvs	0x00682f00
    1468:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 12bc <diag+0x14>
static void put_byte (byte b) {
    146c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1470:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1474:	6f746b73 	svcvs	0x00746b73
    1478:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if (b & 0x80)
    147c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1480:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1484:	2f534f43 	svccs	0x00534f43
	for (i = 0; i < 8; i++) {
    1488:	4f636950 	svcmi	0x00636950
		b <<= 1;
    148c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	for (i = 0; i < 8; i++) {
    1490:	2f736269 	svccs	0x00736269
}
    1494:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1498:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    149c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    14a0:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
	put_byte (cmd);
    14a4:	72657300 	rsbvc	r7, r5, #0, 6
    14a8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
}
    14ac:	6f682f00 	svcvs	0x00682f00
    14b0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1304 <diag+0x5c>
static void wwait (word st, word del) {
    14b4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    14b8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    14bc:	6f746b73 	svcvs	0x00746b73
	while (dopen && (rdsr () & 1)) {
    14c0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    14c4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    14c8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    14cc:	2f534f43 	svccs	0x00534f43
	put_byte (CMD_RDSR);
    14d0:	4f636950 	svcmi	0x00636950
	r = get_byte ();
    14d4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    14d8:	2f736269 	svccs	0x00736269
	while (dopen && (rdsr () & 1)) {
    14dc:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
}
    14e0:	5f2f6c61 	svcpl	0x002f6c61
		if (st == WNONE)
    14e4:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    14e8:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			mdelay (1);
    14ec:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    14f0:	61757100 	cmnvs	r5, r0, lsl #2
			delay (del, st);
    14f4:	5f00746e 	svcpl	0x0000746e
    14f8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
			release;
    14fc:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1500:	5f006c61 	svcpl	0x00006c61
    1504:	5f4d4f5f 	svcpl	0x004d4f5f
static void ready () {
    1508:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
	if (dopen) {
    150c:	5f5f0045 	svcpl	0x005f0045
		wwait (WNONE, 1);
    1510:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    1514:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1518:	6f682f00 	svcvs	0x00682f00
	dstat = 0;
    151c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1370 <diag+0xc8>
}
    1520:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1524:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1528:	6f746b73 	svcvs	0x00746b73
	udelay (1);
    152c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1530:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	udelay (1);
    1534:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		dopen = DOPEN_TEMP;
    1538:	2f534f43 	svccs	0x00534f43
    153c:	4f636950 	svcmi	0x00636950
    1540:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1544:	2f736269 	svccs	0x00736269
static void cclose () {
    1548:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	if (dopen == DOPEN_TEMP) {
    154c:	5f2f6c61 	svcpl	0x002f6c61
    1550:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
		wwait (WNONE, 1);
    1554:	61697265 	cmnvs	r9, r5, ror #4
    1558:	00632e6c 	rsbeq	r2, r3, ip, ror #28
	cmd_0 (CMD_DP);
    155c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14a8 <cmd_0+0xc>
    1560:	616d2f65 	cmnvs	sp, r5, ror #30
		dopen = 0;
    1564:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
}
    1568:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
word ee_open () {
    156c:	706f746b 	rsbvc	r7, pc, fp, ror #8
	ready ();
    1570:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	dopen = DOPEN_PERM;
    1574:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1578:	4349502f 	movtmi	r5, #36911	; 0x902f
}
    157c:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (dopen) {
    1580:	534f6369 	movtpl	r6, #62313	; 0xf369
    1584:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		dopen = DOPEN_TEMP;
    1588:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
		cclose ();
    158c:	61697265 	cmnvs	r9, r5, ror #4
}
    1590:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
int ser_in (word st, char *buf, int len) {
    1594:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    1598:	67410063 	strbvs	r0, [r1, -r3, rrx]
	if (len == 0)
    159c:	006e6961 	rsbeq	r6, lr, r1, ror #18
	if (__inpline == NULL) {
    15a0:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
		if ((prcs = running (__inserial)) == 0) {
    15a4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    15a8:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
			prcs = runthread (__inserial);
    15ac:	73726170 	cmnvc	r2, #112, 2
    15b0:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
			if (prcs == 0) {
    15b4:	006d726f 	rsbeq	r7, sp, pc, ror #4
				npwait (st);
    15b8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
		release;
    15bc:	5f645f79 	svcpl	0x00645f79
		join (prcs, st);
    15c0:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    15c4:	6f682f00 	svcvs	0x00682f00
	if (*__inpline == NULL) // bin cmd
    15c8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 141c <zero_loop+0x18>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15cc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	if (prcs >= len)
    15d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		prcs = len-1;
    15d4:	6f746b73 	svcvs	0x00746b73
	memcpy (buf, __inpline, prcs);
    15d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    15dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    15e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	ufree (__inpline);
    15e4:	2f534f43 	svccs	0x00534f43
	__inpline = NULL;
    15e8:	4f636950 	svcmi	0x00636950
	if (*buf) // if it's NULL, it's a bin cmd
    15ec:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
		buf [prcs] = '\0';
    15f0:	2f736269 	svccs	0x00736269
}
    15f4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
		prcs = strlen (__inpline);
    15f8:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
    15fc:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
		return 0;
    1600:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    1604:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    1608:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
int ser_outf (word st, const char *m, ...) {
    160c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1614 <ser_outf+0x8>
    1610:	6f776c5f 	svcvs	0x00776c5f
	if ((prcs = running (__outserial)) != 0) {
    1614:	4e006472 	mcrmi	4, 0, r6, cr0, cr2, {3}
    1618:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 14e4 <wwait+0x30>
		join (prcs, st);
    161c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    1620:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
		release;
    1624:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1628:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
    162c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1630:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
		umwait (st);
    1634:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    1638:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 1640 <ser_outf+0x34>
	if (runstrand (__outserial, buf) == 0) {
    163c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1640:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
    1644:	5f5f0065 	svcpl	0x005f0065
		ufree (buf);
    1648:	33746e69 	cmncc	r4, #1680	; 0x690
		npwait (st);
    164c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
}
    1650:	20554e47 	subscs	r4, r5, r7, asr #28
    1654:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
    1658:	20332e39 	eorscs	r2, r3, r9, lsr lr
    165c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
int ser_inf (word st, const char *fmt, ...) {
    1660:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
    1664:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
	if (fmt == NULL)
    1668:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (__inpline == NULL) {
    166c:	5b202965 	blpl	80bc08 <__ccfg+0x7ebc60>
		if ((prcs = running (__inserial)) == 0) {
    1670:	2f4d5241 	svccs	0x004d5241
    1674:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
			prcs = runthread (__inserial);
    1678:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
    167c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
			if (prcs == 0) {
    1680:	6172622d 	cmnvs	r2, sp, lsr #4
				npwait (st);
    1684:	2068636e 	rsbcs	r6, r8, lr, ror #6
		release;
    1688:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
		join (prcs, st);
    168c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    1690:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
	va_start (ap, fmt);
    1694:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	prcs = vscan (__inpline, fmt, ap);
    1698:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    169c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
	ufree (__inpline);
    16a0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
	__inpline = NULL;
    16a4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
}
    16a8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    16ac:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
    16b0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
		return 0;
    16b4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
    16b8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
    16bc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
strand (__outserial, const char*)
    16c0:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    16c4:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    16c8:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
    16cc:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
endstrand
    16d0:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    16d4:	662d2067 	strtvs	r2, [sp], -r7, rrx
	ptr = data;
    16d8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    16dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if (*ptr)
    16e0:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
		len = strlen (ptr);
    16e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16e8:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16ec:	61746164 	cmnvs	r4, r4, ror #2
    16f0:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    16f4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16f8:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    16fc:	006d7361 	rsbeq	r7, sp, r1, ror #6
	len -= quant;
    1700:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1704:	745f3874 	ldrbvc	r3, [pc], #-2164	; 170c <__outserial+0x4c>
    1708:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
	if (len == 0) {
    170c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		ufree (data);
    1710:	2f2e2e2f 	svccs	0x002e2e2f
		finish;
    1714:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1718:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    171c:	6f612f62 	svcvs	0x00612f62
    1720:	61625f6e 	cmnvs	r2, lr, ror #30
    1724:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    1728:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    172c:	43706d65 	cmnmi	r0, #6464	; 0x1940
strand (__inserial, address)
    1730:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
    1734:	6f697463 	svcvs	0x00697463
    1738:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
    173c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1740:	706d6554 	rsbvc	r6, sp, r4, asr r5
	if (__inpline != NULL)
    1744:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    1748:	6b6e654a 	blvs	1b9ac78 <__ccfg+0x1b7acd0>
		finish;
    174c:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1750:	73626f6a 	cmnvc	r2, #424	; 0x1a8
    1754:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
    1758:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    175c:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
		umwait (IM_INIT);
    1760:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
		release;
    1764:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
	savedata (data);
    1768:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
	len = MAX_LINE_LENGTH;
    176c:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
	io (IM_READ, __cport, READ, ptr, 1);
    1770:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 1778 <__inserial+0x48>
    1774:	73656c75 	cmnvc	r5, #29952	; 0x7500
    1778:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
    177c:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
	if (ptr == (char*) data) { // new line
    1780:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    1784:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
		if (*ptr == '\0') { // bin cmd
    1788:	325f6168 	subscc	r6, pc, #104, 2
			proceed (IM_BIN);
    178c:	655f305f 	ldrbvs	r3, [pc, #-95]	; 1735 <__inserial+0x5>
    1790:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
		if (*ptr < 0x20)
    1794:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1798:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
			proceed (IM_READ);
    179c:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
    17a0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
	if (*ptr == '\n' || *ptr == '\r') {
    17a4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    17a8:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
    17ac:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
		*ptr = '\0';
    17b0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 8b8 <GPIOIntHandler+0x90>
		__inpline = (char*)data;
    17b4:	33746e69 	cmncc	r4, #1680	; 0x690
		finish;
    17b8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
	if (len) {
    17bc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		ptr++;
    17c0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    17c4:	53746e65 	cmnpl	r4, #1616	; 0x650
		len--;
    17c8:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
	proceed (IM_READ);
    17cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1698 <ser_inf+0x38>
	io (IM_BIN, __cport, READ, ptr, 1);
    17d0:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    17d4:	43435452 	movtmi	r5, #13394	; 0x3452
    17d8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    17dc:	6f43746e 	svcvs	0x0043746e
    17e0:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
	len -= 2;
    17e4:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
	if (len > *ptr + 1) // 1 for 0x04
    17e8:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    17ec:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
		len = *ptr + 1;
    17f0:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
    17f4:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
	ptr++;
    17f8:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
	quant = io (IM_BINL, __cport, READ, ptr, len);
    17fc:	00646165 	rsbeq	r6, r4, r5, ror #2
    1800:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1804:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
    1808:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
    180c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    1810:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
	len -= quant;
    1814:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
		__inpline = (char*)data;
    1818:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
		finish;
    181c:	524f4e00 	subpl	r4, pc, #0, 28
	ptr += quant;
    1820:	415f4d4f 	cmpmi	pc, pc, asr #26
    1824:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
endstrand
    1828:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
    182c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	proceed (IM_BINL);
    1830:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
endstrand
    1834:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1838:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    183c:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    1840:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1844:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
    1848:	63657300 	cmnvs	r5, #0, 6
		if (res && (d < n))
    184c:	53646e41 	cmnpl	r4, #1040	; 0x410
    1850:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1854:	2f2e0063 	svccs	0x002e0063
    1858:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
			res [d] = (char) c;
    185c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		d++;
    1860:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    1864:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1868:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    186c:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    1870:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    1874:	7a697300 	bvc	1a5e47c <__ccfg+0x1a3e4d4>
				enci (10000);
    1878:	70797465 	rsbsvc	r7, r9, r5, ror #8
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    187c:	4f4e0065 	svcmi	0x004e0065
    1880:	5f4d4f52 	svcpl	0x004d4f52
	d = 0;
    1884:	62555043 	subsvs	r5, r5, #67	; 0x43
		c = *fm++;
    1888:	70657361 	rsbvc	r7, r5, r1, ror #6
		if (c == '\\') {
    188c:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
			if ((c = *fm++) == '\0') {
    1890:	4f4e0074 	svcmi	0x004e0074
    1894:	5f4d4f52 	svcpl	0x004d4f52
				outc ('\\');
    1898:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
			if ((c = *fm++) == '\0') {
    189c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
				outc ('\\');
    18a0:	33697500 	cmncc	r9, #0, 10
    18a4:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
			outc (c);
    18a8:	33697500 	cmncc	r9, #0, 10
    18ac:	756f4332 	strbvc	r4, [pc, #-818]!	; 1582 <ee_close+0x2>
			if (c == '\0')
    18b0:	4e00746e 	cdpmi	4, 0, cr7, cr0, cr14, {3}
    18b4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1780 <__inserial+0x50>
			outc (c);
    18b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
				outc (val);
    18bc:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
				val = (word) va_arg (ap, aword);
    18c0:	4f4e0064 	svcmi	0x004e0064
		if (c == '%') {
    18c4:	5f4d4f52 	svcpl	0x004d4f52
    18c8:	63555043 	cmpvs	r5, #67	; 0x43
			c = *fm++;
    18cc:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
			switch (c) {
    18d0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    18d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    18d8:	2f2e2e2f 	svccs	0x002e2e2f
    18dc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    18e0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    18e4:	70632f62 	rsbvc	r2, r3, r2, ror #30
    18e8:	00632e75 	rsbeq	r2, r3, r5, ror lr
    18ec:	4f524f4e 	svcmi	0x00524f4e
				outc ('%');
    18f0:	50435f4d 	subpl	r5, r3, sp, asr #30
    18f4:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
				outc (c);
    18f8:	6b73616d 	blvs	1cd9eb4 <__ccfg+0x1cb9f0c>
    18fc:	31706d00 	cmncc	r0, r0, lsl #26
    1900:	00766572 	rsbseq	r6, r6, r2, ror r5
				if (c == '\0')
    1904:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				return d;
    1908:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
}
    190c:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 174c <__inserial+0x1c>
    1910:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
			switch (c) {
    1914:	61577465 	cmpvs	r7, r5, ror #8
    1918:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    191c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 180c <__inserial+0xdc>
				for (i = 12; ; i -= 4) {
    1920:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
				val = (word) va_arg (ap, aword);
    1924:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
						[ (val >> i) & 0xf ]);
    1928:	524f4e00 	subpl	r4, pc, #0, 28
    192c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1930:	70757465 	rsbsvc	r7, r5, r5, ror #8
					outc (__pi_hex_enc_table
    1934:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1938:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1778 <__inserial+0x48>
					if (i == 0)
    193c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1940:	61577465 	cmpvs	r7, r5, ror #8
				for (i = 12; ; i -= 4) {
    1944:	7075656b 	rsbsvc	r6, r5, fp, ror #10
				val = (word) va_arg (ap, aword);
    1948:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1838 <__inserial+0x108>
				if (c == 'd' && (val & 0x8000) != 0) {
    194c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
				val = (word) va_arg (ap, aword);
    1950:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
				if (c == 'd' && (val & 0x8000) != 0) {
    1954:	31676643 	cmncc	r7, r3, asr #12
    1958:	524f4e00 	subpl	r4, pc, #0, 28
					outc ('-');
    195c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1960:	70757465 	rsbsvc	r7, r5, r5, ror #8
					val = (~val) + 1;
    1964:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1968:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17a8 <__inserial+0x78>
				for (i = 12; ; i -= 4) {
    196c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
				enci (10000);
    1970:	61577465 	cmpvs	r7, r5, ror #8
    1974:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1978:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1868 <outc.5724+0x1c>
    197c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    1980:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1984:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    1988:	524f4e00 	subpl	r4, pc, #0, 28
    198c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1990:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1994:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1998:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17d8 <__inserial+0xa8>
    199c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    19a0:	61577465 	cmpvs	r7, r5, ror #8
    19a4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    19a8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1898 <__pi_vfparse+0x2c>
    19ac:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    19b0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    19b4:	33676643 	cmncc	r7, #70254592	; 0x4300000
				if (c == 'd' || c == 'u') {
    19b8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    19bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
					if (c == 'd' &&
    19c0:	2f2e2e2f 	svccs	0x002e2e2f
					val = va_arg (ap, lword);
    19c4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
					fm++;
    19c8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
					if (c == 'd' &&
    19cc:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    19d0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
						outc ('-');
    19d4:	4f4e0063 	svcmi	0x004e0063
    19d8:	5f4d4f52 	svcpl	0x004d4f52
						val = (~val) + 1;
    19dc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
				enci (10000);
    19e0:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
					enci (1000000000UL);
    19e4:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    19e8:	646f4d65 	strbtvs	r4, [pc], #-3429	; 19f0 <__pi_vfparse+0x184>
    19ec:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    19f0:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    19f4:	6f54676e 	svcvs	0x0054676e
    19f8:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    19fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    1a00:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1a04:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1a08:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1a0c:	76655231 			; <UNDEFINED> instruction: 0x76655231
    1a10:	6f697369 	svcvs	0x00697369
    1a14:	4f41006e 	svcmi	0x0041006e
    1a18:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    1a1c:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
    1a20:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1a24:	66664f72 	uqsub16vs	r4, r6, r2
				} else if (c == 'x') {
    1a28:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
					for (i = 28; ; i -= 4) {
    1a2c:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
					val = va_arg (ap, lword);
    1a30:	6f437265 	svcvs	0x00437265
							[ (val >> i) & 0xf ]);
    1a34:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    1a38:	00746573 	rsbseq	r6, r4, r3, ror r5
						outc (__pi_hex_enc_table
    1a3c:	4f524f4e 	svcmi	0x00524f4e
    1a40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1a44:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
						if (i == 0)
    1a48:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
    1a4c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
					for (i = 28; ; i -= 4) {
    1a50:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
					outc ('%');
    1a54:	5f6d6972 	svcpl	0x006d6972
    1a58:	67696475 			; <UNDEFINED> instruction: 0x67696475
    1a5c:	33697500 	cmncc	r9, #0, 10
					outc ('l');
    1a60:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
    1a64:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
				val = (word) va_arg (ap, aword);
    1a68:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
				outc (val);
    1a6c:	006c7463 	rsbeq	r7, ip, r3, ror #8
    1a70:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
				while (*st != '\0') {
    1a74:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1a7c <__pi_vfparse+0x210>
    1a78:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1a7c:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    1a80:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
					outc (*st);
    1a84:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    1a88:	6f437265 	svcvs	0x00437265
					st++;
    1a8c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
		c = *fm++;
    1a90:	57746573 			; <UNDEFINED> instruction: 0x57746573
    1a94:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1a98:	6f724670 	svcvs	0x00724670
char *vform (char *res, const char *fm, va_list aq) {
    1a9c:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    1aa0:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
	if (res != NULL) {
    1aa4:	6b61576e 	blvs	1857864 <__ccfg+0x18378bc>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1aa8:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    1aac:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    1ab0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
}
    1ab4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1ab8:	524f4e00 	subpl	r4, pc, #0, 28
	fml = strlen (fm) + 17;
    1abc:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 1ac4 <vform+0x28>
    1ac0:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
    1ac4:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
	if ((res = (char*) umalloc (fml)) == NULL)
    1ac8:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    1acc:	6f46746c 	svcvs	0x0046746c
    1ad0:	31434372 	hvccc	13362	; 0x3432
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ad4:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
    1ad8:	76655277 			; <UNDEFINED> instruction: 0x76655277
    1adc:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    1ae0:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
		ufree (res);
    1ae4:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		goto Again;
    1ae8:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
	if (buf == NULL || fmt == NULL)
    1aec:	6f695666 	svcvs	0x00695666
int vscan (const char *buf, const char *fmt, va_list ap) {
    1af0:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
	if (buf == NULL || fmt == NULL)
    1af4:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
    1af8:	5f6d6972 	svcpl	0x006d6972
    1afc:	00646f62 	rsbeq	r6, r4, r2, ror #30
		    	    case 'u': scanu (lword); break;
    1b00:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
			while (isspace (*buf)) buf++;
    1b04:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    1b08:	6b6c4366 	blvs	1b128a8 <__ccfg+0x1af2900>
	while (*fmt != '\0') {
    1b0c:	524f4e00 	subpl	r4, pc, #0, 28
		if (*fmt++ != '%')
    1b10:	4f5f4d4f 	svcmi	0x005f4d4f
		switch (*fmt++) {
    1b14:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    1b18:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1b1c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1b20:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    1b24:	72756300 	rsbsvc	r6, r5, #0, 6
    1b28:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1b2c:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
}
    1b30:	006b636f 	rsbeq	r6, fp, pc, ror #6
		switch (*fmt++) {
    1b34:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1b38:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1b3c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1b40:	006c6156 	rsbeq	r6, ip, r6, asr r1
			while (isspace (*buf)) buf++;
    1b44:	4f524f4e 	svcmi	0x00524f4e
    1b48:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b4c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1b50:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1b54:	6f466d69 	svcvs	0x00466d69
    1b58:	616e4172 	smcvs	58386	; 0xe412
			if (*buf == '\0')
    1b5c:	61707962 	cmnvs	r0, r2, ror #18
			if (*buf != ',') {
    1b60:	61567373 	cmpvs	r6, r3, ror r3
			sap = va_arg (ap, char*);
    1b64:	3165756c 	cmncc	r5, ip, ror #10
			nc++;
    1b68:	524f4e00 	subpl	r4, pc, #0, 28
			if (*buf != ',') {
    1b6c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
				while (!isspace (*buf) && *buf != ',' &&
    1b70:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1b74:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1b78:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1b7c:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
    1b80:	6f4c726c 	svcvs	0x004c726c
    1b84:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1b88:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
			while (isspace (*buf)) buf++;
    1b8c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1b90:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 19c8 <__pi_vfparse+0x15c>
    1b94:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1b98:	72756300 	rsbsvc	r6, r5, #0, 6
    1b9c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
			if (*buf == ',') buf++;
    1ba0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ba4:	6d697600 	stclvs	6, cr7, [r9, #-0]
			*sap = '\0';
    1ba8:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
			break;
    1bac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
		    case 'd': scani (word); break;
    1bb0:	62690030 	rsbvs	r0, r9, #48	; 0x30
    1bb4:	4f736169 	svcmi	0x00736169
    1bb8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1bbc:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    1bc0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1bc4:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1bc8:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1bcc:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    1bd0:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    1bd4:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1bd8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1aa4 <vform+0x8>
    1bdc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1be0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1be4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1be8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1bec:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1bf0:	61466648 	cmpvs	r6, r8, asr #12
    1bf4:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    1bf8:	00747261 	rsbseq	r7, r4, r1, ror #4
    1bfc:	4f524f4e 	svcmi	0x00524f4e
    1c00:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1c04:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1c08:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1c0c:	6f466d69 	svcvs	0x00466d69
    1c10:	4f635272 	svcmi	0x00635272
    1c14:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1c18:	61694249 	cmnvs	r9, r9, asr #4
    1c1c:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
		    case 'u': scanu (word); break;
    1c20:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    1c24:	4161746c 	cmnmi	r1, ip, ror #8
    1c28:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    1c2c:	4f4e0074 	svcmi	0x004e0074
    1c30:	5f4d4f52 	svcpl	0x004d4f52
    1c34:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c38:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c3c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c40:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1c44:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1c48:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    1c4c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1c50:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c54:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    1c58:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    1c5c:	66437478 			; <UNDEFINED> instruction: 0x66437478
    1c60:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    1c64:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
		    case 'x': scanx (word); break;
    1c68:	61746c65 	cmnvs	r4, r5, ror #24
    1c6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c70:	33697500 	cmncc	r9, #0, 10
    1c74:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    1c78:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    1c7c:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    1c80:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1c84:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1c88:	4f4e0065 	svcmi	0x004e0065
    1c8c:	5f4d4f52 	svcpl	0x004d4f52
    1c90:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c94:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c98:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c9c:	41726f46 	cmnmi	r2, r6, asr #30
    1ca0:	6f63706d 	svcvs	0x0063706d
    1ca4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1ca8:	4f4e0031 	svcmi	0x004e0031
    1cac:	5f4d4f52 	svcpl	0x004d4f52
    1cb0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cb4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cb8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cbc:	41726f46 	cmnmi	r2, r6, asr #30
    1cc0:	6f63706d 	svcvs	0x0063706d
    1cc4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1cc8:	4f4e0032 	svcmi	0x004e0032
    1ccc:	5f4d4f52 	svcpl	0x004d4f52
    1cd0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cd4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cd8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cdc:	41726f46 	cmnmi	r2, r6, asr #30
			switch (*fmt++) {
    1ce0:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1ce4:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1ce8:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    1cec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bb8 <vscan+0xcc>
    1cf0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1cf4:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
		    	    case 'd': scani (lword); break;
    1cf8:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    1cfc:	66006574 			; <UNDEFINED> instruction: 0x66006574
    1d00:	31676663 	cmncc	r7, r3, ror #12
    1d04:	61746144 	cmnvs	r4, r4, asr #2
    1d08:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1d0c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d10:	734f6352 	movtvc	r6, #62290	; 0xf352
    1d14:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    1d18:	73616942 	cmnvc	r1, #1081344	; 0x108000
    1d1c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d20:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1d24:	61740065 	cmnvs	r4, r5, rrx
    1d28:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    1d2c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d30:	524f4e00 	subpl	r4, pc, #0, 28
    1d34:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1d38:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1d3c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1d40:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1d44:	6152726f 	cmpvs	r2, pc, ror #4
    1d48:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    1d4c:	67664374 			; <UNDEFINED> instruction: 0x67664374
    1d50:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
		    	    case 'x': scanx (lword); break;
    1d54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d58:	2f2e2e2f 	svccs	0x002e2e2f
    1d5c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1d60:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1d64:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    1d68:	5f707574 	svcpl	0x00707574
    1d6c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    1d70:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    1d74:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1d78:	00636e49 	rsbeq	r6, r3, r9, asr #28
    1d7c:	4f524f4e 	svcmi	0x00524f4e
    1d80:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1d84:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1d88:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1d8c:	6f466d69 	svcvs	0x00466d69
    1d90:	4f635272 	svcmi	0x00635272
    1d94:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1d98:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    1d9c:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    1da0:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    1da4:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    1da8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1c74 <vscan+0x188>
    1dac:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1db0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1db4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1db8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1dbc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1dc0:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
		    	    case 'd': scani (lword); break;
    1dc4:	616c7567 	cmnvs	ip, r7, ror #10
    1dc8:	41726f74 	cmnmi	r2, r4, ror pc
    1dcc:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    1dd0:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    1dd4:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    1dd8:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    1ddc:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
		    	    case 'u': scanu (lword); break;
    1de0:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1de4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1de8:	67695370 			; <UNDEFINED> instruction: 0x67695370
    1dec:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    1df0:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    1df4:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1df8:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1dfc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e00:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e04:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e08:	41726f46 	cmnmi	r2, r6, asr #30
    1e0c:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e10:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1e14:	61566e45 	cmpvs	r6, r5, asr #28
    1e18:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1e1c:	4f524f4e 	svcmi	0x00524f4e
    1e20:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1e24:	47707574 			; <UNDEFINED> instruction: 0x47707574
		    	    case 'x': scanx (lword); break;
    1e28:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1e2c:	6f466d69 	svcvs	0x00466d69
			if ((c = *buf++) == '\0')
    1e30:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1e34:	6f4d6853 	svcvs	0x004d6853
			sap = va_arg (ap, char*);
    1e38:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
			nc++;
    1e3c:	32336900 	eorscc	r6, r3, #0, 18
			break;
    1e40:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
			while (isspace (*buf)) buf++;
    1e44:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    1e48:	61567264 	cmpvs	r6, r4, ror #4
    1e4c:	6f6d006c 	svcvs	0x006d006c
						*sap++ = *buf++;
    1e50:	6f436564 	svcvs	0x00436564
    1e54:	0031666e 	eorseq	r6, r1, lr, ror #12
			while (isspace (*buf)) buf++;
    1e58:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1e5c:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1e60:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
		return 0;
    1e64:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1e68:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1d34 <vscan+0x248>
		    case 'x': scanx (word); break;
    1e6c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1e70:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
		    	    case 'x': scanx (lword); break;
    1e74:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e78:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1e7c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1e80:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    1e84:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    1e88:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    1e8c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e90:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e94:	41726f46 	cmnmi	r2, r6, asr #30
    1e98:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e9c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ea0:	61566e45 	cmpvs	r6, r5, asr #28
    1ea4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1ea8:	4f524f4e 	svcmi	0x00524f4e
    1eac:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1eb0:	6f6c4343 	svcvs	0x006c4343
    1eb4:	6f536b63 	svcvs	0x00536b63
    1eb8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ebc:	00746547 	rsbseq	r6, r4, r7, asr #10
    1ec0:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1ec4:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    1ec8:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1ecc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ed0:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    1ed4:	734f3167 	movtvc	r3, #61799	; 0xf167
    1ed8:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    1edc:	62640066 	rsbvs	r0, r4, #102	; 0x66
    1ee0:	6f4c726c 	svcvs	0x004c726c
    1ee4:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1ee8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1eec:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1ef0:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1d28 <vscan+0x23c>
    1ef4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1ef8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1efc:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    1f00:	6f466d69 	svcvs	0x00466d69
    1f04:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1f08:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1f0c:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1f10:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1f14:	43646e41 	cmnmi	r4, #1040	; 0x410
    1f18:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    1f1c:	61527277 	cmpvs	r2, r7, ror r2
    1f20:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    1f24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1f28:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    1f2c:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    1f30:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1f34:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1e00 <vscan+0x314>
    1f38:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1f3c:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    1f40:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    1f44:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    1f48:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1f4c:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    1f50:	524f4e00 	subpl	r4, pc, #0, 28
    1f54:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f58:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f5c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1f60:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1f64:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    1f68:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1db0 <vscan+0x2c4>
    1f6c:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    1f70:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    1f74:	6f583233 	svcvs	0x00583233
    1f78:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1f7c:	00776f52 	rsbseq	r6, r7, r2, asr pc
    1f80:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1f84:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1f88:	6f436648 	svcvs	0x00436648
    1f8c:	4f4e006c 	svcmi	0x004e006c
    1f90:	5f4d4f52 	svcpl	0x004d4f52
    1f94:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1f98:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    1f9c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1fa0:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    1fa4:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    1fa8:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    1fac:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    1fb0:	33697500 	cmncc	r9, #0, 10
    1fb4:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    1fb8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1fbc:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1fc0:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    1fc4:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 1e00 <vscan+0x314>
    1fc8:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    1fcc:	4161746c 	cmnmi	r1, ip, ror #8
    1fd0:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    1fd4:	33690074 	cmncc	r9, #116	; 0x74
    1fd8:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    1fdc:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    1fe0:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    1fe4:	0061746c 	rsbeq	r7, r1, ip, ror #8
    1fe8:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    1fec:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ff0:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    1ff4:	50460065 	subpl	r0, r6, r5, rrx
    1ff8:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
    1ffc:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
    2000:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
    2004:	00545f32 	subseq	r5, r4, r2, lsr pc
    2008:	52545046 	subspl	r5, r4, #70	; 0x46
    200c:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
    2010:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
    2014:	6300545f 	movwvs	r5, #1119	; 0x45f
    2018:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    201c:	5300706d 	movwpl	r7, #109	; 0x6d
    2020:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2024:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1e5c <vscan+0x370>
    2028:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    202c:	50460066 	subpl	r0, r6, r6, rrx
    2030:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2034:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2038:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    203c:	6400545f 	strvs	r5, [r0], #-1119	; 0xfffffba1
    2040:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    2044:	41726464 	cmnmi	r2, r4, ror #8
    2048:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    204c:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    2050:	70007065 	andvc	r7, r0, r5, rrx
    2054:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    2058:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    205c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    2060:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2064:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2068:	524f4e00 	subpl	r4, pc, #0, 28
    206c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2070:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    2074:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    2078:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    207c:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    2080:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    2084:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    2088:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    208c:	6f447265 	svcvs	0x00447265
    2090:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2094:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1f60 <TrimAfterColdResetWakeupFromShutDown+0x8c>
    2098:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    209c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    20a0:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    20a4:	61686365 	cmnvs	r8, r5, ror #6
    20a8:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    20ac:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    20b0:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    20b4:	6f447265 	svcvs	0x00447265
    20b8:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    20bc:	2f2e2e2f 	svccs	0x002e2e2f
    20c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20c4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    20c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    20cc:	2f62696c 	svccs	0x0062696c
    20d0:	5f737973 	svcpl	0x00737973
    20d4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    20d8:	5300632e 	movwpl	r6, #814	; 0x32e
    20dc:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    20e0:	56697061 	strbtpl	r7, [r9], -r1, rrx
    20e4:	0064696f 	rsbeq	r6, r4, pc, ror #18
    20e8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    20ec:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    20f0:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    20f4:	5f525450 	svcpl	0x00525450
    20f8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    20fc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2100:	00545f33 	subseq	r5, r4, r3, lsr pc
    2104:	4f524f4e 	svcmi	0x00524f4e
    2108:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    210c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    2110:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    2114:	6f537465 	svcvs	0x00537465
    2118:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    211c:	00746547 	rsbseq	r6, r4, r7, asr #10
    2120:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2124:	616d6f44 	cmnvs	sp, r4, asr #30
    2128:	00736e69 	rsbseq	r6, r3, r9, ror #28
    212c:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    2130:	54647000 	strbtpl	r7, [r4], #-0
    2134:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2138:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    213c:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    2140:	6b636f6c 	blvs	18ddef8 <__ccfg+0x18bdf50>
    2144:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
    2148:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    214c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2150:	52500065 	subspl	r0, r0, #101	; 0x65
    2154:	6f444d43 	svcvs	0x00444d43
    2158:	6e69616d 	powvsez	f6, f1, #5.0
    215c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2160:	7000656c 	andvc	r6, r0, ip, ror #10
    2164:	004d7265 	subeq	r7, sp, r5, ror #4
    2168:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    216c:	61686365 	cmnvs	r8, r5, ror #6
    2170:	50656772 	rsbpl	r6, r5, r2, ror r7
    2174:	6f697265 	svcvs	0x00697265
    2178:	50460064 	subpl	r0, r6, r4, rrx
    217c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2180:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    2184:	5f564544 	svcpl	0x00564544
    2188:	50460054 	subpl	r0, r6, r4, asr r0
    218c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2190:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2194:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    2198:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    219c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    21a0:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    21a4:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    21a8:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    21ac:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    21b0:	414d5f52 	cmpmi	sp, r2, asr pc
    21b4:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    21b8:	7600545f 			; <UNDEFINED> instruction: 0x7600545f
    21bc:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    21c0:	53007061 	movwpl	r7, #97	; 0x61
    21c4:	63656c65 	cmnvs	r5, #25856	; 0x6500
    21c8:	43444174 	movtmi	r4, #16756	; 0x4174
    21cc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    21d0:	706e4942 	rsbvc	r4, lr, r2, asr #18
    21d4:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    21d8:	61746c65 	cmnvs	r4, r5, ror #24
    21dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    21e0:	33697500 	cmncc	r9, #0, 10
    21e4:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    21e8:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    21ec:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    21f0:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    21f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    21f8:	5f5f0065 	svcpl	0x005f0065
    21fc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2200:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2204:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2208:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    220c:	6f6c0065 	svcvs	0x006c0065
    2210:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    2214:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    2218:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    221c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2220:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2224:	52545046 	subspl	r5, r4, #70	; 0x46
    2228:	5345525f 	movtpl	r5, #21087	; 0x525f
    222c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2230:	545f3144 	ldrbpl	r3, [pc], #-324	; 2238 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2234:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2238:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    223c:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    2240:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    2244:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2248:	33637243 	cmncc	r3, #805306372	; 0x30000004
    224c:	46480032 			; <UNDEFINED> instruction: 0x46480032
    2250:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2254:	61536563 	cmpvs	r3, r3, ror #10
    2258:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    225c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2260:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    2264:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    2268:	00323372 	eorseq	r3, r2, r2, ror r3
    226c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2270:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2274:	50460064 	subpl	r0, r6, r4, rrx
    2278:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2130 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x68>
    227c:	564e4145 	strbpl	r4, [lr], -r5, asr #2
    2280:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2288 <NOROM_SetupGetTrimForAdcShModeEn+0x4>
    2284:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    2288:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    228c:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 20c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    2290:	50460064 	subpl	r0, r6, r4, rrx
    2294:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
    2298:	4f434344 	svcmi	0x00434344
    229c:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    22a0:	00545f4e 	subseq	r5, r4, lr, asr #30
    22a4:	52545046 	subspl	r5, r4, #70	; 0x46
    22a8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2134 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x6c>
    22ac:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    22b0:	00545f46 	subseq	r5, r4, r6, asr #30
    22b4:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    22b8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    22bc:	646f4d72 	strbtvs	r4, [pc], #-3442	; 22c4 <NOROM_SetupGetTrimForXoscHfCtl+0x18>
    22c0:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    22c4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    22c8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    22cc:	706e4941 	rsbvc	r4, lr, r1, asr #18
    22d0:	46007475 			; <UNDEFINED> instruction: 0x46007475
    22d4:	5f525450 	svcpl	0x00525450
    22d8:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    22dc:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    22e0:	00545f44 	subseq	r5, r4, r4, asr #30
    22e4:	52545046 	subspl	r5, r4, #70	; 0x46
    22e8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2174 <NOROM_SetupGetTrimForAnabypassValue1>
    22ec:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    22f0:	5000545f 	andpl	r5, r0, pc, asr r4
    22f4:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    22f8:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    22fc:	73007465 	movwvc	r7, #1125	; 0x465
    2300:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    2304:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    2308:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    230c:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    2310:	67006174 	smlsdxvs	r0, r4, r1, r6
    2314:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2318:	6f4d3233 	svcvs	0x004d3233
    231c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    2320:	48004743 	stmdami	r0, {r0, r1, r6, r8, r9, sl, lr}
    2324:	5f445241 	svcpl	0x00445241
    2328:	5f495041 	svcpl	0x00495041
    232c:	75630054 	strbvc	r0, [r3, #-84]!	; 0xffffffac
    2330:	61745372 	cmnvs	r4, r2, ror r3
    2334:	4f006574 	svcmi	0x00006574
    2338:	66484353 			; <UNDEFINED> instruction: 0x66484353
    233c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2340:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2344:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2348:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    234c:	52435f52 	subpl	r5, r3, #328	; 0x148
    2350:	5f323343 	svcpl	0x00323343
    2354:	6f610054 	svcvs	0x00610054
    2358:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    235c:	506c7463 	rsbpl	r7, ip, r3, ror #8
    2360:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    2364:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    2368:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    236c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2370:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2374:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    2378:	4e00545f 	cfmvsrmi	mvf0, r5
    237c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2248 <NOROM_SetupGetTrimForAmpcompCtrl+0x3c>
    2380:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    2384:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2388:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    238c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    2390:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    2394:	00676e69 	rsbeq	r6, r7, r9, ror #28
    2398:	52545046 	subspl	r5, r4, #70	; 0x46
    239c:	5346485f 	movtpl	r4, #26719	; 0x685f
    23a0:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    23a4:	46415345 	strbmi	r5, [r1], -r5, asr #6
    23a8:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    23ac:	5f484354 	svcpl	0x00484354
    23b0:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    23b4:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    23b8:	70006575 	andvc	r6, r0, r5, ror r5
    23bc:	6b6f6f4c 	blvs	1bde0f4 <__ccfg+0x1bbe14c>
    23c0:	61547075 	cmpvs	r4, r5, ror r0
    23c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    23c8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    23cc:	6f437463 	svcvs	0x00437463
    23d0:	5241706d 	subpl	r7, r1, #109	; 0x6d
    23d4:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    23d8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    23dc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    23e0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    23e4:	316e6f69 	cmncc	lr, r9, ror #30
    23e8:	73655200 	cmnvc	r5, #0, 4
    23ec:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    23f0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    23f4:	6f697461 	svcvs	0x00697461
    23f8:	5200326e 	andpl	r3, r0, #-536870906	; 0xe0000006
    23fc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2400:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2404:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2408:	336e6f69 	cmncc	lr, #420	; 0x1a4
    240c:	73655200 	cmnvc	r5, #0, 4
    2410:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2414:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2418:	6f697461 	svcvs	0x00697461
    241c:	5300356e 	movwpl	r3, #1390	; 0x56e
    2420:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    2424:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2428:	6f697461 	svcvs	0x00697461
    242c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2430:	70006575 	andvc	r6, r0, r5, ror r5
    2434:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    2438:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    243c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2440:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2444:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    2448:	6f6d7461 	svcvs	0x006d7461
    244c:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    2450:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    2454:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    2458:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    245c:	50007065 	andpl	r7, r0, r5, rrx
    2460:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2464:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    2468:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    246c:	5f736c61 	svcpl	0x00736c61
    2470:	50460074 	subpl	r0, r6, r4, ror r0
    2474:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2478:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    247c:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    2480:	4e00545f 	cfmvsrmi	mvf0, r5
    2484:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2350 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x18>
    2488:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    248c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2490:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    2494:	6f565f43 	svcvs	0x00565f43
    2498:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    249c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24a0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    24a4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    24a8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    24ac:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    24b0:	73616c46 	cmnvc	r1, #17920	; 0x4600
    24b4:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    24b8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    24bc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    24c0:	4f435f52 	svcmi	0x00435f52
    24c4:	5241504d 	subpl	r5, r1, #77	; 0x4d
    24c8:	545f4645 	ldrbpl	r4, [pc], #-1605	; 24d0 <NOROM_SetupSetAonRtcSubSecInc+0x24>
    24cc:	776f7000 	strbvc	r7, [pc, -r0]!
    24d0:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    24d4:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    24d8:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    24dc:	50460073 	subpl	r0, r6, r3, ror r0
    24e0:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    24e4:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    24e8:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    24ec:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    24f0:	5f525450 	svcpl	0x00525450
    24f4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    24f8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    24fc:	00545f35 	subseq	r5, r4, r5, lsr pc
    2500:	544f5250 	strbpl	r5, [pc], #-592	; 2508 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x34>
    2504:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2508:	5f544942 	svcpl	0x00544942
    250c:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    2510:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    2514:	00797261 	rsbseq	r7, r9, r1, ror #4
    2518:	4b434150 	blmi	10d2a60 <__ccfg+0x10b2ab8>
    251c:	5f454741 	svcpl	0x00454741
    2520:	00347834 	eorseq	r7, r4, r4, lsr r8
    2524:	50494843 	subpl	r4, r9, r3, asr #16
    2528:	5059545f 	subspl	r5, r9, pc, asr r4
    252c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2530:	30343632 	eorscc	r3, r4, r2, lsr r6
    2534:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    2538:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    253c:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2540:	5f594c49 	svcpl	0x00594c49
    2544:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2548:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    254c:	4e007a69 	vmlsmi.f32	s14, s0, s19
    2550:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 241c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe4>
    2554:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2558:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    255c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    2560:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2564:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    2568:	00796c69 	rsbseq	r6, r9, r9, ror #24
    256c:	4f524f4e 	svcmi	0x00524f4e
    2570:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2574:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2578:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    257c:	61507465 	cmpvs	r0, r5, ror #8
    2580:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    2584:	70795465 	rsbsvc	r5, r9, r5, ror #8
    2588:	4f4e0065 	svcmi	0x004e0065
    258c:	5f4d4f52 	svcpl	0x004d4f52
    2590:	70696843 	rsbvc	r6, r9, r3, asr #16
    2594:	6f666e49 	svcvs	0x00666e49
    2598:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    259c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    25a0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    25a4:	70006e6f 	andvc	r6, r0, pc, ror #28
    25a8:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    25ac:	00657079 	rsbeq	r7, r5, r9, ror r0
    25b0:	70696843 	rsbvc	r6, r9, r3, asr #16
    25b4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    25b8:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    25bc:	76655277 			; <UNDEFINED> instruction: 0x76655277
    25c0:	6f697369 	svcvs	0x00697369
    25c4:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    25c8:	50494843 	subpl	r4, r9, r3, asr #16
    25cc:	5059545f 	subspl	r5, r9, pc, asr r4
    25d0:	43435f45 	movtmi	r5, #16197	; 0x3f45
    25d4:	30313331 	eorscc	r3, r1, r1, lsr r3
    25d8:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    25dc:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    25e0:	5f796c69 	svcpl	0x00796c69
    25e4:	77680074 			; <UNDEFINED> instruction: 0x77680074
    25e8:	00766552 	rsbseq	r6, r6, r2, asr r5
    25ec:	50494843 	subpl	r4, r9, r3, asr #16
    25f0:	5059545f 	subspl	r5, r9, pc, asr r4
    25f4:	43435f45 	movtmi	r5, #16197	; 0x3f45
    25f8:	30353632 	eorscc	r3, r5, r2, lsr r6
    25fc:	43415000 	movtmi	r5, #4096	; 0x1000
    2600:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2604:	5343575f 	movtpl	r5, #14175	; 0x375f
    2608:	696d0050 	stmdbvs	sp!, {r4, r6}^
    260c:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    2610:	46007665 	strmi	r7, [r0], -r5, ror #12
    2614:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2618:	43435f59 	movtmi	r5, #16217	; 0x3f59
    261c:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    2620:	0032525f 	eorseq	r5, r2, pc, asr r2
    2624:	50494843 	subpl	r4, r9, r3, asr #16
    2628:	5059545f 	subspl	r5, r9, pc, asr r4
    262c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2630:	30353331 	eorscc	r3, r5, r1, lsr r3
    2634:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2638:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    263c:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2640:	61467069 	cmpvs	r6, r9, rrx
    2644:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2648:	43437349 	movtmi	r7, #13129	; 0x3349
    264c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2650:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2654:	5f594c49 	svcpl	0x00594c49
    2658:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    265c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2660:	50494843 	subpl	r4, r9, r3, asr #16
    2664:	5059545f 	subspl	r5, r9, pc, asr r4
    2668:	43435f45 	movtmi	r5, #16197	; 0x3f45
    266c:	30323632 	eorscc	r3, r2, r2, lsr r6
    2670:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2674:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    2678:	41460076 	hvcmi	24582	; 0x6006
    267c:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    2680:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    2684:	00787836 	rsbseq	r7, r8, r6, lsr r8
    2688:	70696863 	rsbvc	r6, r9, r3, ror #16
    268c:	006d6146 	rsbeq	r6, sp, r6, asr #2
    2690:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2694:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    2698:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    269c:	6366006e 	cmnvs	r6, #110	; 0x6e
    26a0:	50316766 	eorspl	r6, r1, r6, ror #14
    26a4:	6f746f72 	svcvs	0x00746f72
    26a8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    26ac:	746f7250 	strbtvc	r7, [pc], #-592	; 26b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    26b0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 24fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x28>
    26b4:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    26b8:	6f746365 	svcvs	0x00746365
    26bc:	00745f72 	rsbseq	r5, r4, r2, ror pc
    26c0:	544f5250 	strbpl	r5, [pc], #-592	; 26c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xa4>
    26c4:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    26c8:	5f544942 	svcpl	0x00544942
    26cc:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    26d0:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    26d4:	5f35315f 	svcpl	0x0035315f
    26d8:	48430034 	stmdami	r3, {r2, r4, r5}^
    26dc:	545f5049 	ldrbpl	r5, [pc], #-73	; 26e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc0>
    26e0:	5f455059 	svcpl	0x00455059
    26e4:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    26e8:	006e776f 	rsbeq	r7, lr, pc, ror #14
    26ec:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    26f0:	5f325f56 	svcpl	0x00325f56
    26f4:	41460032 	cmpmi	r6, r2, lsr r0
    26f8:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    26fc:	3143435f 	cmpcc	r3, pc, asr r3
    2700:	00787833 	rsbseq	r7, r8, r3, lsr r8
    2704:	4b434150 	blmi	10d2c4c <__ccfg+0x10b2ca4>
    2708:	5f454741 	svcpl	0x00454741
    270c:	00377837 	eorseq	r7, r7, r7, lsr r8
    2710:	544f5250 	strbpl	r5, [pc], #-592	; 2718 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf4>
    2714:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2718:	6b6e555f 	blvs	1b97c9c <__ccfg+0x1b77cf4>
    271c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    2720:	52574800 	subspl	r4, r7, #0, 16
    2724:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2728:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    272c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 25f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>
    2730:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2734:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2738:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    273c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2740:	70795470 	rsbsvc	r5, r9, r0, ror r4
    2744:	57480065 	strbpl	r0, [r8, -r5, rrx]
    2748:	5f564552 	svcpl	0x00564552
    274c:	00315f32 	eorseq	r5, r1, r2, lsr pc
    2750:	544f5250 	strbpl	r5, [pc], #-592	; 2758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x134>
    2754:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2758:	5f544942 	svcpl	0x00544942
    275c:	00454c42 	subeq	r4, r5, r2, asr #24
    2760:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    2764:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    2768:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    276c:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    2770:	57480061 	strbpl	r0, [r8, -r1, rrx]
    2774:	5f564552 	svcpl	0x00564552
    2778:	00335f32 	eorseq	r5, r3, r2, lsr pc
    277c:	70696863 	rsbvc	r6, r9, r3, ror #16
    2780:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2784:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    2788:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    278c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    2790:	4f545355 	svcmi	0x00545355
    2794:	00305f4d 	eorseq	r5, r0, sp, asr #30
    2798:	50494843 	subpl	r4, r9, r3, asr #16
    279c:	5059545f 	subspl	r5, r9, pc, asr r4
    27a0:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    27a4:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 2660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x3c>
    27a8:	4300315f 	movwmi	r3, #351	; 0x15f
    27ac:	5f504948 	svcpl	0x00504948
    27b0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    27b4:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    27b8:	00303336 	eorseq	r3, r0, r6, lsr r3
    27bc:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    27c0:	5f315f56 	svcpl	0x00315f56
    27c4:	41500030 	cmpmi	r0, r0, lsr r0
    27c8:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    27cc:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    27d0:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    27d4:	2f2e006e 	svccs	0x002e006e
    27d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    27dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    27e0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    27e4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    27e8:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    27ec:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    27f0:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    27f4:	63660063 	cmnvs	r6, #99	; 0x63
    27f8:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    27fc:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2800:	68430064 	stmdavs	r3, {r2, r5, r6}^
    2804:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2808:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    280c:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    2810:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2814:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    2818:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    281c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2820:	70696843 	rsbvc	r6, r9, r3, asr #16
    2824:	6f666e49 	svcvs	0x00666e49
    2828:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    282c:	6f6e694d 	svcvs	0x006e694d
    2830:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    2834:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    2838:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    283c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2840:	4f4e0076 	svcmi	0x004e0076
    2844:	5f4d4f52 	svcpl	0x004d4f52
    2848:	70696843 	rsbvc	r6, r9, r3, asr #16
    284c:	6f666e49 	svcvs	0x00666e49
    2850:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2854:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2858:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    285c:	6f725064 	svcvs	0x00725064
    2860:	6f636f74 	svcvs	0x00636f74
    2864:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    2868:	43415000 	movtmi	r5, #4096	; 0x1000
    286c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2870:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    2874:	50005245 	andpl	r5, r0, r5, asr #4
    2878:	414b4341 	cmpmi	fp, r1, asr #6
    287c:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 233d <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x5>
    2880:	50003578 	andpl	r3, r0, r8, ror r5
    2884:	616b6361 	cmnvs	fp, r1, ror #6
    2888:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    288c:	745f6570 	ldrbvc	r6, [pc], #-1392	; 2894 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    2890:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2894:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2898:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    289c:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    28a0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    28a4:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    28a8:	5f514554 	svcpl	0x00514554
    28ac:	00305f32 	eorseq	r5, r0, r2, lsr pc
    28b0:	70696843 	rsbvc	r6, r9, r3, asr #16
    28b4:	6f666e49 	svcvs	0x00666e49
    28b8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    28bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    28c0:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    28c4:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    28c8:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    28cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2798 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x174>
    28d0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    28d4:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    28d8:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    28dc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    28e0:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    28e4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    28e8:	524f4e00 	subpl	r4, pc, #0, 28
    28ec:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 28f4 <NOROM_ChipInfo_GetChipFamily+0x38>
    28f0:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    28f4:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    28f8:	00646165 	rsbeq	r6, r4, r5, ror #2
    28fc:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    2900:	78754100 	ldmdavc	r5!, {r8, lr}^
    2904:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    2908:	61536964 	cmpvs	r3, r4, ror #18
    290c:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    2910:	00657469 	rsbeq	r7, r5, r9, ror #8
    2914:	36316975 			; <UNDEFINED> instruction: 0x36316975
    2918:	61746144 	cmnvs	r4, r4, asr #2
    291c:	33697500 	cmncc	r9, #0, 10
    2920:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    2924:	00617461 	rsbeq	r7, r1, r1, ror #8
    2928:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    292c:	61746144 	cmnvs	r4, r4, asr #2
    2930:	33697500 	cmncc	r9, #0, 10
    2934:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    2938:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    293c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2808 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>
    2940:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2944:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2948:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    294c:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    2950:	00657469 	rsbeq	r7, r5, r9, ror #8
    2954:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    2958:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    295c:	61563233 	cmpvs	r6, r3, lsr r2
    2960:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    2964:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    2968:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    296c:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    2970:	00646165 	rsbeq	r6, r4, r5, ror #2
    2974:	4f524f4e 	svcmi	0x00524f4e
    2978:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    297c:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    2980:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    2984:	00657469 	rsbeq	r7, r5, r9, ror #8
    2988:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    298c:	2f2e2e2f 	svccs	0x002e2e2f
    2990:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2998 <AuxAdiDdiSafeWrite.constprop.1+0xc>
    2994:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2998:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    299c:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    29a0:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    29a4:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    29a8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    29ac:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29b0:	41676552 	cmnmi	r7, r2, asr r5
    29b4:	00726464 	rsbseq	r6, r2, r4, ror #8
    29b8:	71724962 	cmnvc	r2, r2, ror #18
    29bc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    29c0:	0064656c 	rsbeq	r6, r4, ip, ror #10
    29c4:	7a69536e 	bvc	1a57784 <__ccfg+0x1a377dc>
    29c8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    29cc:	734f3233 	movtvc	r3, #62003	; 0xf233
    29d0:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    29d4:	6f58656d 	svcvs	0x0058656d
    29d8:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    29dc:	0056435f 	subseq	r4, r6, pc, asr r3
    29e0:	4f524f4e 	svcmi	0x00524f4e
    29e4:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    29e8:	5f464843 	svcpl	0x00464843
    29ec:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    29f0:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    29f4:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    29f8:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    29fc:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2a00:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2a04:	6f58706d 	svcvs	0x0058706d
    2a08:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2a0c:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    2a10:	61745377 	cmnvs	r4, r7, ror r3
    2a14:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a18:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a1c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a20:	72617000 	rsbvc	r7, r1, #0
    2a24:	31506d61 	cmpcc	r0, r1, ror #26
    2a28:	72617000 	rsbvc	r7, r1, #0
    2a2c:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2a30:	72617000 	rsbvc	r7, r1, #0
    2a34:	33506d61 	cmpcc	r0, #6208	; 0x1840
    2a38:	65727000 	ldrbvs	r7, [r2, #-0]!
    2a3c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 20ce <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x6>
    2a40:	61745373 	cmnvs	r4, r3, ror r3
    2a44:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a48:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a4c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a50:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2a54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a58:	2f2e2e2f 	svccs	0x002e2e2f
    2a5c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2a60:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2a64:	736f2f62 	cmnvc	pc, #392	; 0x188
    2a68:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2a6c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2a70:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2a74:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2a78:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2a7c:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2a80:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2a84:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2a88:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    2a8c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2a90:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2a94:	524f4e00 	subpl	r4, pc, #0, 28
    2a98:	4f5f4d4f 	svcmi	0x005f4d4f
    2a9c:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2aa0:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2aa4:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2aa8:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2aac:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
    2ab0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2ab4:	524f4e00 	subpl	r4, pc, #0, 28
    2ab8:	4f5f4d4f 	svcmi	0x005f4d4f
    2abc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2ac0:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2ac4:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2ac8:	4f63526f 	svcmi	0x0063526f
    2acc:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2ad0:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2ad4:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2ad8:	4f4e0063 	svcmi	0x004e0063
    2adc:	5f4d4f52 	svcpl	0x004d4f52
    2ae0:	5f43534f 	svcpl	0x0043534f
    2ae4:	534f5048 	movtpl	r5, #61512	; 0xf048
    2ae8:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2aec:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2af0:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2af4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2af8:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    2afc:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2b00:	00746547 	rsbseq	r6, r4, r7, asr #10
    2b04:	4f524f4e 	svcmi	0x00524f4e
    2b08:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2b0c:	5f464843 	svcpl	0x00464843
    2b10:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2b14:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2b18:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2b1c:	416c6174 	smcmi	50708	; 0xc614
    2b20:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b24:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2b28:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2b2c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2b30:	32586174 	subscc	r6, r8, #116, 2
    2b34:	63736f00 	cmnvs	r3, #0, 30
    2b38:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2b3c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2b40:	50480073 	subpl	r0, r8, r3, ror r0
    2b44:	5f43534f 	svcpl	0x0043534f
    2b48:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    2b4c:	4f716572 	svcmi	0x00716572
    2b50:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b54:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2b58:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b5c:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    2b60:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2b64:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2b68:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    2b6c:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
    2b70:	61746c65 	cmnvs	r4, r5, ror #24
    2b74:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2b78:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2b7c:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2b80:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    2b84:	50746966 	rsbspl	r6, r4, r6, ror #18
    2b88:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2b8c:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2b90:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2b94:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2b98:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2b9c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    2ba0:	6f58656d 	svcvs	0x0058656d
    2ba4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2ba8:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    2bac:	43534f00 	cmpmi	r3, #0, 30
    2bb0:	6f536648 	svcvs	0x00536648
    2bb4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2bb8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2bbc:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    2bc0:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2a08 <NOROM_OSCClockSourceSet+0x4c>
    2bc4:	31685470 	smccc	34112	; 0x8540
    2bc8:	63734f00 	cmnvs	r3, #0, 30
    2bcc:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2bd0:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2bd4:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2bd8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2bdc:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2be0:	6b61576c 	blvs	1858998 <__ccfg+0x18389f0>
    2be4:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    2be8:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2bec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2bf0:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2bf4:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
    2bf8:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2bfc:	00436765 	subeq	r6, r3, r5, ror #14
    2c00:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2c04:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    2c08:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2c0c:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
    2c10:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2c14:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
    2c18:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
    2c1c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ae8 <NOROM_OSCClockSourceGet+0xd0>
    2c20:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2c24:	4f50485f 	svcmi	0x0050485f
    2c28:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2c2c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2c30:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2c34:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2c38:	4f79636e 	svcmi	0x0079636e
    2c3c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c40:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
    2c44:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    2c48:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
    2c4c:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    2c50:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
    2c54:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
    2c58:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2c5c:	6b636f6c 	blvs	18dea14 <__ccfg+0x18bea6c>
    2c60:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2c64:	5f006563 	svcpl	0x00006563
    2c68:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2c6c:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2c74 <__exidx_end>
    2c70:	43667200 	cmnmi	r6, #0, 4
    2c74:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2c78:	4f716572 	svcmi	0x00716572
    2c7c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c80:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    2c84:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    2c88:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2c8c:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2c90:	4f524f4e 	svcmi	0x00524f4e
    2c94:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2c98:	5f464843 	svcpl	0x00464843
    2c9c:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2ca0:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2ca4:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
    2ca8:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    2cac:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    2cb0:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    2cb4:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2cb8:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2cbc:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2cc0:	00656475 	rsbeq	r6, r5, r5, ror r4
    2cc4:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
    2cc8:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    2ccc:	706f4367 	rsbvc	r4, pc, r7, ror #6
    2cd0:	4f4e0079 	svcmi	0x004e0079
    2cd4:	5f4d4f52 	svcpl	0x004d4f52
    2cd8:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2cdc:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
    2ce0:	61745374 	cmnvs	r4, r4, ror r3
    2ce4:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2ce8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2cec:	72617000 	rsbvc	r7, r1, #0
    2cf0:	30506d61 	subscc	r6, r0, r1, ror #26
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000020 	andeq	r0, r0, r0, lsr #32
	...
      1c:	00000134 	andeq	r0, r0, r4, lsr r1
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	02018e02 	andeq	r8, r1, #2, 28
      2c:	c4c5ce87 	strbgt	ip, [r5], #3719	; 0xe87
      30:	00000ec3 	andeq	r0, r0, r3, asr #29
      34:	00000018 	andeq	r0, r0, r8, lsl r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	000000c8 	andeq	r0, r0, r8, asr #1
			i = k;
      40:	00000048 	andeq	r0, r0, r8, asr #32
				j->Next = k;
      44:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
      48:	86038504 	strhi	r8, [r3], -r4, lsl #10
}
      4c:	00018e02 	andeq	r8, r1, r2, lsl #28
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	00000110 	andeq	r0, r0, r0, lsl r1
      5c:	00000050 	andeq	r0, r0, r0, asr r0
      60:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
      64:	52018e02 	andpl	r8, r1, #2, 28
      68:	41080e0a 	tstmi	r8, sl, lsl #28
      6c:	0000000b 	andeq	r0, r0, fp
      70:	00000018 	andeq	r0, r0, r8, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	00000160 	andeq	r0, r0, r0, ror #2
      7c:	0000012c 	andeq	r0, r0, ip, lsr #2
      80:	8e180e41 	cdphi	14, 1, cr0, cr8, cr1, {2}
      84:	0a6e0201 	beq	1b80890 <__ccfg+0x1b608e8>
      88:	0b42040e 	bleq	10810c8 <__ccfg+0x1061120>
      8c:	0000000c 	andeq	r0, r0, ip
	descriptors [fd] = s;
      90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	7c020001 	stcvc	0, cr0, [r2], {1}
      98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	if (s == NULL)
      9c:	0000000c 	andeq	r0, r0, ip
		syserror (EMALLOC, "tcv05");
      a0:	0000008c 	andeq	r0, r0, ip, lsl #1
      a4:	0000028c 	andeq	r0, r0, ip, lsl #5
      a8:	0000000c 	andeq	r0, r0, ip
      ac:	00000018 	andeq	r0, r0, r8, lsl r0
      b0:	0000008c 	andeq	r0, r0, ip, lsl #1
      b4:	00000298 	muleq	r0, r8, r2
      b8:	0000002c 	andeq	r0, r0, ip, lsr #32
      bc:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      c0:	41000e0a 	tstmi	r0, sl, lsl #28
      c4:	0000000b 	andeq	r0, r0, fp
      c8:	00000018 	andeq	r0, r0, r8, lsl r0
      cc:	0000008c 	andeq	r0, r0, ip, lsl #1
      d0:	000002c4 	andeq	r0, r0, r4, asr #5
      d4:	0000002a 	andeq	r0, r0, sl, lsr #32
      d8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      dc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      e0:	000b4204 	andeq	r4, fp, r4, lsl #4
      e4:	00000018 	andeq	r0, r0, r8, lsl r0
      e8:	0000008c 	andeq	r0, r0, ip, lsl #1
      ec:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      f0:	0000003c 	andeq	r0, r0, ip, lsr r0
			wwait (st, 50);
      f4:	83100e41 	tsthi	r0, #1040	; 0x410
			curr += 0x1000;
      f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      fc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (from >= EE_SIZE || upto < from)
     100:	00000018 	andeq	r0, r0, r8, lsl r0
     104:	0000008c 	andeq	r0, r0, ip, lsl #1
			upto = EE_SIZE - 1;
     108:	00000000 	andeq	r0, r0, r0
     10c:	00000040 	andeq	r0, r0, r0, asr #32
     110:	83100e41 	tsthi	r0, #1040	; 0x410
     114:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
     11c:	00000014 	andeq	r0, r0, r4, lsl r0
     120:	0000008c 	andeq	r0, r0, ip, lsl #1
     124:	00000000 	andeq	r0, r0, r0
}
     128:	00000020 	andeq	r0, r0, r0, lsr #32
     12c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     130:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     134:	00000014 	andeq	r0, r0, r4, lsl r0
        if(settingsInput[i] == ' ') {
     138:	0000008c 	andeq	r0, r0, ip, lsl #1
     13c:	0000032c 	andeq	r0, r0, ip, lsr #6
            numbers[numbersIndex] = number;
     140:	00000054 	andeq	r0, r0, r4, asr r0
     144:	87080e42 	strhi	r0, [r8, -r2, asr #28]
            numbersIndex++;
     148:	00018e02 	andeq	r8, r1, r2, lsl #28
    for (int i = strlen(settingsInput); i >= 0; i++) {
     14c:	00000014 	andeq	r0, r0, r4, lsl r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     150:	0000008c 	andeq	r0, r0, ip, lsl #1
            return 1;
     154:	00000380 	andeq	r0, r0, r0, lsl #7
     158:	00000040 	andeq	r0, r0, r0, asr #32
     15c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
fsm root {
     160:	00018e02 	andeq	r8, r1, r2, lsl #28
     164:	00000014 	andeq	r0, r0, r4, lsl r0
     168:	0000008c 	andeq	r0, r0, ip, lsl #1
     16c:	000003c0 	andeq	r0, r0, r0, asr #7
     170:	00000028 	andeq	r0, r0, r8, lsr #32
        initCycles();
     174:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
        ser_outf(Initial, "Enter your name: ");
     178:	00018e02 	andeq	r8, r1, r2, lsl #28
     17c:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_in(Get_Name, username, NAME_LENGTH);
     180:	0000008c 	andeq	r0, r0, ip, lsl #1
     184:	000003e8 	andeq	r0, r0, r8, ror #7
     188:	00000114 	andeq	r0, r0, r4, lsl r1
        ser_outf(Show_Menu, "Welcome %s\n\r"
     18c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     190:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_inf(Get_Choice, "%c", &choice);
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	0000008c 	andeq	r0, r0, ip, lsl #1
     19c:	000004fc 	strdeq	r0, [r0], -ip
        if (choice == 'A' || choice == 'a'){
     1a0:	00000050 	andeq	r0, r0, r0, asr r0
     1a4:	83180e41 	tsthi	r8, #1040	; 0x410
     1a8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
            proceed Adjust_Intervals;
     1ac:	87038604 	strhi	r8, [r3, -r4, lsl #12]
            proceed Monitor;
     1b0:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Get_Choice;
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1b8:	0000008c 	andeq	r0, r0, ip, lsl #1
     1bc:	0000054c 	andeq	r0, r0, ip, asr #10
        ser_in(Get_Name, settings, NAME_LENGTH);
     1c0:	00000054 	andeq	r0, r0, r4, asr r0
     1c4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     1c8:	86038504 	strhi	r8, [r3], -r4, lsl #10
        processSettingsInput(settings);
     1cc:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Show_Menu;
     1d0:	0000000c 	andeq	r0, r0, ip
     1d4:	0000008c 	andeq	r0, r0, ip, lsl #1
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1d8:	000005a0 	andeq	r0, r0, r0, lsr #11
     1dc:	00000038 	andeq	r0, r0, r8, lsr r0
     1e0:	00000020 	andeq	r0, r0, r0, lsr #32
     1e4:	0000008c 	andeq	r0, r0, ip, lsl #1
     1e8:	000005d8 	ldrdeq	r0, [r0], -r8
        proceed Show_Menu;
     1ec:	00000110 	andeq	r0, r0, r0, lsl r1
     1f0:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1f4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1f8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
        displayCycle = YES;
     1fc:	89038804 	stmdbhi	r3, {r2, fp, pc}
        ser_inf(Await_Stop, "%c", ch);
     200:	00018e02 	andeq	r8, r1, r2, lsl #28
     204:	0000000c 	andeq	r0, r0, ip
     208:	0000008c 	andeq	r0, r0, ip, lsl #1
        proceed Await_Stop;
     20c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     210:	0000000c 	andeq	r0, r0, ip
     214:	00000018 	andeq	r0, r0, r8, lsl r0
        leds(1, 0);
     218:	0000008c 	andeq	r0, r0, ip, lsl #1
     21c:	000006e8 	andeq	r0, r0, r8, ror #13
     220:	000000c0 	andeq	r0, r0, r0, asr #1
     224:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     228:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
        leds(0, 0);
     22c:	00000001 	andeq	r0, r0, r1
     230:	00000018 	andeq	r0, r0, r8, lsl r0
     234:	0000008c 	andeq	r0, r0, ip, lsl #1
     238:	000007a8 	andeq	r0, r0, r8, lsr #15
     23c:	00000044 	andeq	r0, r0, r4, asr #32
     240:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        } else if (choice == 'S' || choice == 's') {
     244:	86038504 	strhi	r8, [r3], -r4, lsl #10
            proceed Stop;
     248:	00018e02 	andeq	r8, r1, r2, lsl #28
        } else if (choice == 'V' || choice == 'v') {
     24c:	0000001c 	andeq	r0, r0, ip, lsl r0
            proceed View_Settings;
     250:	0000008c 	andeq	r0, r0, ip, lsl #1
        } else if (choice == 'M' || choice == 'm') {
     254:	000007ec 	andeq	r0, r0, ip, ror #15
            proceed Monitor;
     258:	0000003c 	andeq	r0, r0, ip, lsr r0
     25c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     260:	86048505 	strhi	r8, [r4], -r5, lsl #10
     264:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     268:	00000001 	andeq	r0, r0, r1
     26c:	00000018 	andeq	r0, r0, r8, lsl r0
     270:	0000008c 	andeq	r0, r0, ip, lsl #1
     274:	00000828 	andeq	r0, r0, r8, lsr #16
     278:	000000a4 	andeq	r0, r0, r4, lsr #1
     27c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     280:	86038504 	strhi	r8, [r3], -r4, lsl #10
     284:	00018e02 	andeq	r8, r1, r2, lsl #28
     288:	00000030 	andeq	r0, r0, r0, lsr r0
static void devinit_uart (int devnum) {
     28c:	0000008c 	andeq	r0, r0, ip, lsl #1
	adddevfunc (ioreq_uart_a, devnum);
     290:	000008cc 	andeq	r0, r0, ip, asr #17
     294:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
void udelay (volatile word n) {
     298:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     29c:	86078508 	strhi	r8, [r7], -r8, lsl #10
	while (n) {
     2a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2a4:	8a038904 	bhi	e26bc <__ccfg+0xc2714>
}
     2a8:	02018e02 	andeq	r8, r1, #2, 28
	while (n--);
     2ac:	cace0aa2 	bgt	ff382d3c <_estack+0xdf37dd3c>
     2b0:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2b4:	000ec4c5 	andeq	ip, lr, r5, asr #9
		n--;
     2b8:	00000b42 	andeq	r0, r0, r2, asr #22
     2bc:	0000000c 	andeq	r0, r0, ip
     2c0:	0000008c 	andeq	r0, r0, ip, lsl #1
void mdelay (volatile word n) {
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	00000024 	andeq	r0, r0, r4, lsr #32
	while (n) {
     2cc:	0000000c 	andeq	r0, r0, ip
     2d0:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     2d4:	00000000 	andeq	r0, r0, r0
		udelay (999);
     2d8:	00000028 	andeq	r0, r0, r8, lsr #32
     2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
		n--;
     2e0:	0000008c 	andeq	r0, r0, ip, lsl #1
     2e4:	00000a84 	andeq	r0, r0, r4, lsl #21
     2e8:	00000258 	andeq	r0, r0, r8, asr r2
     2ec:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
void __pi_ondomain (lword d) {
     2f0:	8e028b03 	vmlahi.f64	d8, d2, d3
     2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
		if (__pi_systat.effpdm > 1)
     2f8:	00070d42 	andeq	r0, r7, r2, asr #26
     2fc:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_systat.effpdm = 1;
     300:	0000008c 	andeq	r0, r0, ip, lsl #1
	PRCMPowerDomainOn (d);
     304:	00000000 	andeq	r0, r0, r0
     308:	00000030 	andeq	r0, r0, r0, lsr r0
     30c:	83080e42 	movwhi	r0, #36418	; 0x8e42
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     310:	00018e02 	andeq	r8, r1, r2, lsl #28
     314:	00000018 	andeq	r0, r0, r8, lsl r0
     318:	0000008c 	andeq	r0, r0, ip, lsl #1
	__pi_systat.ondmns |= d;
     31c:	00000000 	andeq	r0, r0, r0
     320:	0000005c 	andeq	r0, r0, ip, asr r0
}
     324:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     328:	86038504 	strhi	r8, [r3], -r4, lsl #10
void __pi_syserror (word ec, const char *m) {
     32c:	00018e02 	andeq	r8, r1, r2, lsl #28
	diag ("SYSERR: %x, %s", ec, m);
     330:	00000014 	andeq	r0, r0, r4, lsl r0
     334:	0000008c 	andeq	r0, r0, ip, lsl #1
  __ASM volatile ("cpsid i" : : : "memory");
     338:	00000cdc 	ldrdeq	r0, [r0], -ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     33c:	00000060 	andeq	r0, r0, r0, rrx
     340:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     344:	00018e02 	andeq	r8, r1, r2, lsl #28
		all_leds_blink;
     348:	0000000c 	andeq	r0, r0, ip
     34c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     350:	7c020001 	stcvc	0, cr0, [r2], {1}
     354:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     358:	00000018 	andeq	r0, r0, r8, lsl r0
     35c:	00000348 	andeq	r0, r0, r8, asr #6
     360:	00000d3c 	andeq	r0, r0, ip, lsr sp
     364:	0000003c 	andeq	r0, r0, ip, lsr r0
     368:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     36c:	86038504 	strhi	r8, [r3], -r4, lsl #10
	while (1) {
     370:	00018e02 	andeq	r8, r1, r2, lsl #28
     374:	00000018 	andeq	r0, r0, r8, lsl r0
     378:	00000348 	andeq	r0, r0, r8, asr #6
     37c:	00000d78 	andeq	r0, r0, r8, ror sp
void tci_run_delay_timer () {
     380:	00000080 	andeq	r0, r0, r0, lsl #1
	setdel = __pi_mintk - __pi_old;
     384:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     388:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     38c:	00000001 	andeq	r0, r0, r1
     390:	0000000c 	andeq	r0, r0, ip
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     394:	00000348 	andeq	r0, r0, r8, asr #6
     398:	00000df8 	strdeq	r0, [r0], -r8
     39c:	00000018 	andeq	r0, r0, r8, lsl r0
     3a0:	00000014 	andeq	r0, r0, r4, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a4:	00000348 	andeq	r0, r0, r8, asr #6
	sti_tim;
     3a8:	00000000 	andeq	r0, r0, r0
}
     3ac:	00000024 	andeq	r0, r0, r4, lsr #32
     3b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     3b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     3b8:	00000014 	andeq	r0, r0, r4, lsl r0
     3bc:	00000348 	andeq	r0, r0, r8, asr #6
	cli_aux;
     3c0:	00000e10 	andeq	r0, r0, r0, lsl lr
     3c4:	00000010 	andeq	r0, r0, r0, lsl r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     3d0:	00000014 	andeq	r0, r0, r4, lsl r0
     3d4:	00000348 	andeq	r0, r0, r8, asr #6
	sti_aux;
     3d8:	00000000 	andeq	r0, r0, r0
}
     3dc:	0000002c 	andeq	r0, r0, ip, lsr #32
     3e0:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3e4:	00018e02 	andeq	r8, r1, r2, lsl #28
void AONRTCIntHandler () {
     3e8:	00000014 	andeq	r0, r0, r4, lsl r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3ec:	00000348 	andeq	r0, r0, r8, asr #6
     3f0:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     3f4:	0000004c 	andeq	r0, r0, ip, asr #32
		if (__pi_utims [0] == 0)
     3f8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3fc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [0])) {
     400:	0000000c 	andeq	r0, r0, ip
     404:	00000348 	andeq	r0, r0, r8, asr #6
			(*(__pi_utims [0]))--;
     408:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
     40c:	00000006 	andeq	r0, r0, r6
		if (*(__pi_utims [1])) {
     410:	00000028 	andeq	r0, r0, r8, lsr #32
			aux_timer_inactive = 0;
     414:	00000348 	andeq	r0, r0, r8, asr #6
			(*(__pi_utims [1]))--;
     418:	00000e20 	andeq	r0, r0, r0, lsr #28
		if (__pi_utims [2] == 0)
     41c:	000000cc 	andeq	r0, r0, ip, asr #1
		if (*(__pi_utims [2])) {
     420:	83180e41 	tsthi	r8, #1040	; 0x410
			(*(__pi_utims [2]))--;
     424:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (__pi_utims [3] != 0) {
     428:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			if (*(__pi_utims [3])) {
     42c:	02018e02 	andeq	r8, r1, #2, 28
				aux_timer_inactive = 0;
     430:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
				(*(__pi_utims [3]))--;
     434:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
	if (__pi_systat.ledsts) {
     438:	0b42000e 	bleq	1080478 <__ccfg+0x10604d0>
     43c:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.ledblc++ == 0) {
     440:	00000348 	andeq	r0, r0, r8, asr #6
     444:	00000eec 	andeq	r0, r0, ip, ror #29
			if (__pi_systat.ledblk) {
     448:	00000014 	andeq	r0, r0, r4, lsl r0
     44c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     450:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	00000014 	andeq	r0, r0, r4, lsl r0
     458:	00000348 	andeq	r0, r0, r8, asr #6
				if (__pi_systat.ledsts & 0x2)
     45c:	00000f00 	andeq	r0, r0, r0, lsl #30
     460:	00000034 	andeq	r0, r0, r4, lsr r0
     464:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (__pi_systat.ledsts & 0x4)
     468:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 0;
     46c:	00000018 	andeq	r0, r0, r8, lsl r0
     470:	00000348 	andeq	r0, r0, r8, asr #6
			if (__pi_systat.fstblk)
     474:	00000f34 	andeq	r0, r0, r4, lsr pc
     478:	00000034 	andeq	r0, r0, r4, lsr r0
				__pi_systat.ledblc = 200;
     47c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	if (events & AON_RTC_EVFLAGS_CH0) {
     480:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		cli_tim;
     484:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     488:	00000018 	andeq	r0, r0, r8, lsl r0
     48c:	00000348 	andeq	r0, r0, r8, asr #6
		setdel = 0;
     490:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     494:	0000002c 	andeq	r0, r0, ip, lsr #32
		__pi_new += setdel;
     498:	83100e41 	tsthi	r0, #1040	; 0x410
		RISE_N_SHINE;
     49c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4a0:	00018e02 	andeq	r8, r1, r2, lsl #28
		aux_timer_inactive = 1;
     4a4:	00000014 	andeq	r0, r0, r4, lsl r0
     4a8:	00000348 	andeq	r0, r0, r8, asr #6
				if (__pi_systat.ledsts & 0x1)
     4ac:	00000f68 	andeq	r0, r0, r8, ror #30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4b0:	00000024 	andeq	r0, r0, r4, lsr #32
     4b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (__pi_systat.ledsts & 0x2)
     4b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4bc:	00000018 	andeq	r0, r0, r8, lsl r0
     4c0:	00000348 	andeq	r0, r0, r8, asr #6
				if (__pi_systat.ledsts & 0x8)
     4c4:	00000f8c 	andeq	r0, r0, ip, lsl #31
				__pi_systat.ledblk = 1;
     4c8:	00000038 	andeq	r0, r0, r8, lsr r0
     4cc:	83100e41 	tsthi	r0, #1040	; 0x410
		if (aux_timer_inactive) {
     4d0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			cli_aux;
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	0000000c 	andeq	r0, r0, ip
     4dc:	00000348 	andeq	r0, r0, r8, asr #6
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
     4e8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ec:	00000348 	andeq	r0, r0, r8, asr #6
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00000040 	andeq	r0, r0, r0, asr #32
     4f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
word tci_update_delay_ticks (Boolean force) {
     4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
	cli_tim;
     500:	00000014 	andeq	r0, r0, r4, lsl r0
     504:	00000348 	andeq	r0, r0, r8, asr #6
	if (setdel) {
     508:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     50c:	00000018 	andeq	r0, r0, r8, lsl r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     510:	83080e41 	movwhi	r0, #36417	; 0x8e41
     514:	00018e02 	andeq	r8, r1, r2, lsl #28
     518:	0000000c 	andeq	r0, r0, ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     51c:	00000348 	andeq	r0, r0, r8, asr #6
				AON_RTC_O_CH0CMP)) - gettav ());
     520:	00000fc4 	andeq	r0, r0, r4, asr #31
	return NO;
     524:	00000024 	andeq	r0, r0, r4, lsr #32
			setdel = 0;
     528:	0000000c 	andeq	r0, r0, ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52c:	00000348 	andeq	r0, r0, r8, asr #6
     530:	00000000 	andeq	r0, r0, r0
}
     534:	00000020 	andeq	r0, r0, r0, lsr #32
		sti_tim;
     538:	0000000c 	andeq	r0, r0, ip
		return YES;
     53c:	00000348 	andeq	r0, r0, r8, asr #6
     540:	00000fe8 	andeq	r0, r0, r8, ror #31
     544:	0000000e 	andeq	r0, r0, lr
     548:	0000000c 	andeq	r0, r0, ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     54c:	00000348 	andeq	r0, r0, r8, asr #6
	UARTDisable (UART0_BASE);
     550:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     554:	00000010 	andeq	r0, r0, r0, lsl r0
	UARTDisable (UART0_BASE);
     558:	0000000c 	andeq	r0, r0, ip
	UARTConfigSetExpClk (UART0_BASE,
     55c:	00000348 	andeq	r0, r0, r8, asr #6
     560:	00000000 	andeq	r0, r0, r0
     564:	0000001c 	andeq	r0, r0, ip, lsl r0
     568:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     56c:	00000348 	andeq	r0, r0, r8, asr #6
     570:	00000000 	andeq	r0, r0, r0
     574:	00000010 	andeq	r0, r0, r0, lsl r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     578:	0000000c 	andeq	r0, r0, ip
     57c:	00000348 	andeq	r0, r0, r8, asr #6
     580:	00000000 	andeq	r0, r0, r0
	urates [0] = rate;
     584:	00000006 	andeq	r0, r0, r6
}
     588:	0000000c 	andeq	r0, r0, ip
     58c:	00000348 	andeq	r0, r0, r8, asr #6
     590:	00000ff6 	strdeq	r0, [r0], -r6
     594:	00000014 	andeq	r0, r0, r4, lsl r0
     598:	0000000c 	andeq	r0, r0, ip
     59c:	00000348 	andeq	r0, r0, r8, asr #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	0000000e 	andeq	r0, r0, lr
     5a8:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5ac:	00000348 	andeq	r0, r0, r8, asr #6
     5b0:	0000100c 	andeq	r1, r0, ip
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5b4:	00000024 	andeq	r0, r0, r4, lsr #32
     5b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	__pi_uart_setrate (urates [0], __pi_uart);
     5bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c0:	00000020 	andeq	r0, r0, r0, lsr #32
     5c4:	00000348 	andeq	r0, r0, r8, asr #6
     5c8:	00001030 	andeq	r1, r0, r0, lsr r0
     5cc:	0000009c 	muleq	r0, ip, r0
     5d0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     5d4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
	switch (operation) {
     5d8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
static int ioreq_uart_a (int operation, char *buf, int len) {
     5dc:	89038804 	stmdbhi	r3, {r2, fp, pc}
     5e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e4:	00000014 	andeq	r0, r0, r4, lsl r0
     5e8:	00000348 	andeq	r0, r0, r8, asr #6
     5ec:	000010cc 	andeq	r1, r0, ip, asr #1
				*buf++ = uart_a_read;
     5f0:	00000050 	andeq	r0, r0, r0, asr r0
     5f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
			while (len && uart_a_char_available) {
     5f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5fc:	00000014 	andeq	r0, r0, r4, lsl r0
     600:	00000348 	andeq	r0, r0, r8, asr #6
			if (len != operation) {
     604:	0000111c 	andeq	r1, r0, ip, lsl r1
}
     608:	00000048 	andeq	r0, r0, r8, asr #32
     60c:	83080e41 	movwhi	r0, #36417	; 0x8e41
			uart_a_disable_int;
     610:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (uart_a_char_available) {
     614:	00000014 	andeq	r0, r0, r4, lsl r0
				*buf++ = uart_a_read;
     618:	00000348 	andeq	r0, r0, r8, asr #6
			uart_a_disable_int;
     61c:	00001164 	andeq	r1, r0, r4, ror #2
     620:	00000050 	andeq	r0, r0, r0, asr r0
			if (uart_a_char_available) {
     624:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     628:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_enable_int;
     62c:	00000020 	andeq	r0, r0, r0, lsr #32
     630:	00000348 	andeq	r0, r0, r8, asr #6
				goto Redo_rx;
     634:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     638:	00000058 	andeq	r0, r0, r8, asr r0
     63c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			return -2;
     640:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     644:	87058606 	strhi	r8, [r5, -r6, lsl #12]
				uart_a_write (*buf);
     648:	89038804 	stmdbhi	r3, {r2, fp, pc}
     64c:	00018e02 	andeq	r8, r1, r2, lsl #28
			while (len && uart_a_room_in_tx) {
     650:	00000018 	andeq	r0, r0, r8, lsl r0
     654:	00000348 	andeq	r0, r0, r8, asr #6
     658:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
			if (len != operation) {
     65c:	000000a8 	andeq	r0, r0, r8, lsr #1
			uart_a_disable_int;
     660:	83100e44 	tsthi	r0, #68, 28	; 0x440
     664:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (uart_a_room_in_tx) {
     668:	00018e02 	andeq	r8, r1, r2, lsl #28
     66c:	00000018 	andeq	r0, r0, r8, lsl r0
				uart_a_enable_int;
     670:	00000348 	andeq	r0, r0, r8, asr #6
     674:	0000125c 	andeq	r1, r0, ip, asr r2
				*buf++ = uart_a_read;
     678:	00000034 	andeq	r0, r0, r4, lsr r0
			if (uart_a_room_in_tx) {
     67c:	83100e41 	tsthi	r0, #1040	; 0x410
				uart_a_write (*buf);
     680:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     684:	00018e02 	andeq	r8, r1, r2, lsl #28
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     688:	0000000c 	andeq	r0, r0, ip
     68c:	00000348 	andeq	r0, r0, r8, asr #6
			uart_a_enable_int;
     690:	00001290 	muleq	r0, r0, r2
     694:	00000018 	andeq	r0, r0, r8, lsl r0
     698:	00000014 	andeq	r0, r0, r4, lsl r0
			return 0;
     69c:	00000348 	andeq	r0, r0, r8, asr #6
			if (len == UART_CNTRL_SETRATE) {
     6a0:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
     6a4:	00000030 	andeq	r0, r0, r0, lsr r0
     6a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
				syserror (EREQPAR, "uar");
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
			syserror (ENOOPER, "uai");
     6b4:	00000348 	andeq	r0, r0, r8, asr #6
			if (len == UART_CNTRL_GETRATE) {
     6b8:	00000000 	andeq	r0, r0, r0
				return 1;
     6bc:	00000038 	andeq	r0, r0, r8, lsr r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			syserror (ENOOPER, "uai");
     6c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c8:	00000040 	andeq	r0, r0, r0, asr #32
     6cc:	00000348 	andeq	r0, r0, r8, asr #6
     6d0:	000012a8 	andeq	r1, r0, r8, lsr #5
     6d4:	0000013c 	andeq	r0, r0, ip, lsr r1
     6d8:	80100e41 	andshi	r0, r0, r1, asr #28
     6dc:	82038104 	andhi	r8, r3, #4, 2
     6e0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     6e4:	0b84380e 	bleq	fe10e724 <_estack+0xde109724>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6e8:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
void UART0IntHandler () {
     6ec:	07880887 	streq	r0, [r8, r7, lsl #17]
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6f0:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     6f4:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     6f8:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6fc:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     700:	c341100e 	movtgt	r1, #4110	; 0x100e
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     704:	0ec0c1c2 	acseqdm	f4, f2
     708:	000b4100 	andeq	r4, fp, r0, lsl #2
		RISE_N_SHINE;
     70c:	0000000c 	andeq	r0, r0, ip
     710:	00000348 	andeq	r0, r0, r8, asr #6
		i_trigger (devevent (UART_A, READ));
     714:	00000000 	andeq	r0, r0, r0
     718:	00000024 	andeq	r0, r0, r4, lsr #32
     71c:	0000000c 	andeq	r0, r0, ip
     720:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     724:	7c020001 	stcvc	0, cr0, [r2], {1}
     728:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     72c:	00000014 	andeq	r0, r0, r4, lsl r0
     730:	0000071c 	andeq	r0, r0, ip, lsl r7
     734:	00000000 	andeq	r0, r0, r0
     738:	00000016 	andeq	r0, r0, r6, lsl r0
     73c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     740:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     744:	0000000c 	andeq	r0, r0, ip
     748:	0000071c 	andeq	r0, r0, ip, lsl r7
     74c:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
     750:	0000001a 	andeq	r0, r0, sl, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     754:	00000018 	andeq	r0, r0, r8, lsl r0
     758:	0000071c 	andeq	r0, r0, ip, lsl r7
		RISE_N_SHINE;
     75c:	00000000 	andeq	r0, r0, r0
     760:	0000000e 	andeq	r0, r0, lr
     764:	83080e41 	movwhi	r0, #36417	; 0x8e41
		i_trigger (devevent (UART_A, WRITE));
     768:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     76c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     770:	00000018 	andeq	r0, r0, r8, lsl r0
     774:	0000071c 	andeq	r0, r0, ip, lsl r7
     778:	00000000 	andeq	r0, r0, r0
     77c:	0000004c 	andeq	r0, r0, ip, asr #32
     780:	83100e41 	tsthi	r0, #1040	; 0x410
     784:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     788:	00018e02 	andeq	r8, r1, r2, lsl #28
     78c:	00000020 	andeq	r0, r0, r0, lsr #32
     790:	0000071c 	andeq	r0, r0, ip, lsl r7
}
     794:	00000000 	andeq	r0, r0, r0
     798:	0000008c 	andeq	r0, r0, ip, lsl #1
     79c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7a0:	5f018e02 	svcpl	0x00018e02
     7a4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
void __buttons_setirq (int val) {
     7a8:	560b4200 	strpl	r4, [fp], -r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7ac:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7b0:	00000020 	andeq	r0, r0, r0, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7b4:	0000071c 	andeq	r0, r0, ip, lsl r7
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	00000070 	andeq	r0, r0, r0, ror r0
		bn = BUTTON_GPIO (__button_list [i]);
     7c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c4:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7c8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7cc:	430b4200 	movwmi	r4, #45568	; 0xb200
     7d0:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     7d8:	0000071c 	andeq	r0, r0, ip, lsl r7
}
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	000000c0 	andeq	r0, r0, r0, asr #1
     7e4:	82080e41 	andhi	r0, r8, #1040	; 0x410
     7e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
void __pinlist_setirq (int val) {
     7ec:	0a84300e 	beq	fe10c82c <_estack+0xde10782c>
	for (i = 0; i < N_PINLIST; i++) {
     7f0:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     7f4:	06880787 	streq	r0, [r8], r7, lsl #15
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7f8:	048a0589 	streq	r0, [sl], #1417	; 0x589
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	0a6b038e 	beq	1ac163c <__ccfg+0x1aa1694>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     804:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     808:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     80c:	c2c34108 	sbcgt	r4, r3, #8, 2
     810:	0b41000e 	bleq	1040850 <__ccfg+0x10208a8>
	for (i = 0; i < N_PINLIST; i++) {
     814:	0000001c 	andeq	r0, r0, ip, lsl r0
}
     818:	0000071c 	andeq	r0, r0, ip, lsl r7
     81c:	00000000 	andeq	r0, r0, r0
     820:	0000006c 	andeq	r0, r0, ip, rrx
     824:	83180e42 	tsthi	r8, #1056	; 0x420
void GPIOIntHandler () {
     828:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
if (buttons_int) {
     82c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     830:	00018e02 	andeq	r8, r1, r2, lsl #28
	buttons_disable ();
     834:	0000000c 	andeq	r0, r0, ip
     838:	0000071c 	andeq	r0, r0, ip, lsl r7
	i_trigger ((aword)&__button_list);
     83c:	00000000 	andeq	r0, r0, r0
     840:	00000024 	andeq	r0, r0, r4, lsr #32
     844:	00000018 	andeq	r0, r0, r8, lsl r0
     848:	0000071c 	andeq	r0, r0, ip, lsl r7
     84c:	00000000 	andeq	r0, r0, r0
     850:	00000080 	andeq	r0, r0, r0, lsl #1
     854:	83100e42 	tsthi	r0, #1056	; 0x420
     858:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     85c:	00018e02 	andeq	r8, r1, r2, lsl #28
     860:	00000014 	andeq	r0, r0, r4, lsl r0
     864:	0000071c 	andeq	r0, r0, ip, lsl r7
	RISE_N_SHINE;
     868:	00000000 	andeq	r0, r0, r0
     86c:	00000070 	andeq	r0, r0, r0, ror r0
     870:	83080e42 	movwhi	r0, #36418	; 0x8e42
if (pin_sensor_int) {
     874:	00018e02 	andeq	r8, r1, r2, lsl #28
     878:	00000018 	andeq	r0, r0, r8, lsl r0
	i_trigger ((aword)(&__input_pins));
     87c:	0000071c 	andeq	r0, r0, ip, lsl r7
     880:	00000000 	andeq	r0, r0, r0
     884:	00000078 	andeq	r0, r0, r8, ror r0
     888:	83100e42 	tsthi	r0, #1056	; 0x420
     88c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     890:	00018e02 	andeq	r8, r1, r2, lsl #28
     894:	00000020 	andeq	r0, r0, r0, lsr #32
     898:	0000071c 	andeq	r0, r0, ip, lsl r7
     89c:	00000000 	andeq	r0, r0, r0
     8a0:	000000bc 	strheq	r0, [r0], -ip
     8a4:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
	__pinsen_disable_and_clear;
     8a8:	86048505 	strhi	r8, [r4], -r5, lsl #10
	RISE_N_SHINE;
     8ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     8b0:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     8b4:	000b4114 	andeq	r4, fp, r4, lsl r1
}
     8b8:	00000018 	andeq	r0, r0, r8, lsl r0
     8bc:	0000071c 	andeq	r0, r0, ip, lsl r7
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c8:	83100e41 	tsthi	r0, #1040	; 0x410
void system_init () {
     8cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d0:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8d4:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8d8:	0000071c 	andeq	r0, r0, ip, lsl r7
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	00000038 	andeq	r0, r0, r8, lsr r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8e4:	83100e41 	tsthi	r0, #1040	; 0x410
     8e8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     8f0:	0000000c 	andeq	r0, r0, ip
     8f4:	0000071c 	andeq	r0, r0, ip, lsl r7
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8f8:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     8fc:	0000000a 	andeq	r0, r0, sl
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     900:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     904:	0000071c 	andeq	r0, r0, ip, lsl r7
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     908:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     90c:	0000002c 	andeq	r0, r0, ip, lsr #32
		pin = (port_confs [i] >> 19) & 0x1f;
     910:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     914:	4c018e02 	stcmi	14, cr8, [r1], {2}
		pin = (port_confs [i] >> 19) & 0x1f;
     918:	000ec4ce 	andeq	ip, lr, lr, asr #9
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
     920:	0000071c 	andeq	r0, r0, ip, lsl r7
     924:	00000000 	andeq	r0, r0, r0
     928:	00000060 	andeq	r0, r0, r0, rrx
		if (port_confs [i] & 0x80)
     92c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     930:	61018e02 	tstvs	r1, r2, lsl #28
     934:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
		if (port_confs [i] & 0x40)
     938:	000b4300 	andeq	r4, fp, r0, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     93c:	00000014 	andeq	r0, r0, r4, lsl r0
     940:	0000071c 	andeq	r0, r0, ip, lsl r7
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     944:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     948:	00000040 	andeq	r0, r0, r0, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     94c:	83080e42 	movwhi	r0, #36418	; 0x8e42
	all_leds_blink;
     950:	00018e02 	andeq	r8, r1, r2, lsl #28
     954:	00000014 	andeq	r0, r0, r4, lsl r0
     958:	0000071c 	andeq	r0, r0, ip, lsl r7
     95c:	00000000 	andeq	r0, r0, r0
     960:	0000002c 	andeq	r0, r0, ip, lsr #32
     964:	83080e42 	movwhi	r0, #36418	; 0x8e42
     968:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	0000071c 	andeq	r0, r0, ip, lsl r7
     974:	00000000 	andeq	r0, r0, r0
     978:	0000003c 	andeq	r0, r0, ip, lsr r0
     97c:	83180e41 	tsthi	r8, #1040	; 0x410
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     980:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     984:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     988:	00018e02 	andeq	r8, r1, r2, lsl #28
	IntEnable (INT_AON_RTC_COMB);
     98c:	0000000c 	andeq	r0, r0, ip
     990:	0000071c 	andeq	r0, r0, ip, lsl r7
     994:	00000000 	andeq	r0, r0, r0
	__pi_malloc_init ();
     998:	00000006 	andeq	r0, r0, r6
	IntEnable (INT_AON_GPIO_EDGE);
     99c:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a0:	0000071c 	andeq	r0, r0, ip, lsl r7
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9a4:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9a8:	00000068 	andeq	r0, r0, r8, rrx
     9ac:	83180e41 	tsthi	r8, #1040	; 0x410
     9b0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9b8:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9bc:	00000014 	andeq	r0, r0, r4, lsl r0
     9c0:	0000071c 	andeq	r0, r0, ip, lsl r7
     9c4:	00000000 	andeq	r0, r0, r0
	urates [0] = UART_RATE / 100;
     9c8:	00000050 	andeq	r0, r0, r0, asr r0
     9cc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	reinit_uart ();
     9d0:	00018e02 	andeq	r8, r1, r2, lsl #28
	EXTRA_INITIALIZERS;
     9d4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9d8:	0000071c 	andeq	r0, r0, ip, lsl r7
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	0000009c 	muleq	r0, ip, r0
     9e4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9e8:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9ec:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9f0:	8a048905 	bhi	122e0c <__ccfg+0x102e64>
     9f4:	8e028b03 	vmlahi.f64	d8, d2, d3
			devinit [i] . init (devinit [i] . param);
     9f8:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     9fc:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     a00:	00000b42 	andeq	r0, r0, r2, asr #22
     a04:	00000014 	andeq	r0, r0, r4, lsl r0
	IntEnable (INT_UART0_COMB);
     a08:	0000071c 	andeq	r0, r0, ip, lsl r7
     a0c:	00000000 	andeq	r0, r0, r0
}
     a10:	00000040 	andeq	r0, r0, r0, asr #32
	tci_run_auxiliary_timer ();
     a14:	83080e42 	movwhi	r0, #36418	; 0x8e42
		diag ("");
     a18:	00018e02 	andeq	r8, r1, r2, lsl #28
     a1c:	00000014 	andeq	r0, r0, r4, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a20:	0000071c 	andeq	r0, r0, ip, lsl r7
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a24:	00000000 	andeq	r0, r0, r0
		diag ("Leftover RAM: %d bytes",
     a28:	00000034 	andeq	r0, r0, r4, lsr r0
     a2c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a30:	00018e02 	andeq	r8, r1, r2, lsl #28
     a34:	00000018 	andeq	r0, r0, r8, lsl r0
     a38:	0000071c 	andeq	r0, r0, ip, lsl r7
     a3c:	00000000 	andeq	r0, r0, r0
     a40:	0000003c 	andeq	r0, r0, ip, lsr r0
     a44:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a48:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a4c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a50:	00000018 	andeq	r0, r0, r8, lsl r0
     a54:	0000071c 	andeq	r0, r0, ip, lsl r7
     a58:	00000000 	andeq	r0, r0, r0
     a5c:	0000003c 	andeq	r0, r0, ip, lsr r0
     a60:	83100e42 	tsthi	r0, #1056	; 0x420
     a64:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a68:	00018e02 	andeq	r8, r1, r2, lsl #28
     a6c:	0000000c 	andeq	r0, r0, ip
     a70:	0000071c 	andeq	r0, r0, ip, lsl r7
     a74:	000013e4 	andeq	r1, r0, r4, ror #7
     a78:	00000002 	andeq	r0, r0, r2
     a7c:	0000000c 	andeq	r0, r0, ip
     a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
__attribute__ ((noreturn)) void __pi_release () {
     a84:	7c020001 	stcvc	0, cr0, [r2], {1}
     a88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a8c:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a90:	00000a7c 	andeq	r0, r0, ip, ror sl
	check_stack_overflow;
     a94:	000013e6 	andeq	r1, r0, r6, ror #7
     a98:	00000002 	andeq	r0, r0, r2
     a9c:	0000000c 	andeq	r0, r0, ip
	update_n_wake (MAX_WORD, NO);
     aa0:	00000a7c 	andeq	r0, r0, ip, ror sl
     aa4:	000013e8 	andeq	r1, r0, r8, ror #7
     aa8:	00000002 	andeq	r0, r0, r2
	for_all_tasks (__pi_curr) {
     aac:	0000000c 	andeq	r0, r0, ip
     ab0:	00000a7c 	andeq	r0, r0, ip, ror sl
     ab4:	000013ea 	andeq	r1, r0, sl, ror #7
  __ASM volatile ("cpsid i" : : : "memory");
     ab8:	00000002 	andeq	r0, r0, r2
	__SLEEP;
     abc:	00000014 	andeq	r0, r0, r4, lsl r0
     ac0:	00000a7c 	andeq	r0, r0, ip, ror sl
     ac4:	000013ec 	andeq	r1, r0, ip, ror #7
     ac8:	00000044 	andeq	r0, r0, r4, asr #32
	system_event_count ++;
     acc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ad0:	00018e02 	andeq	r8, r1, r2, lsl #28
	switch (__pi_systat.effpdm) {
     ad4:	0000000c 	andeq	r0, r0, ip
     ad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     adc:	7c020001 	stcvc	0, cr0, [r2], {1}
     ae0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			__WFI ();
     ae4:	0000000c 	andeq	r0, r0, ip
     ae8:	00000ad4 	ldrdeq	r0, [r0], -r4
     aec:	00000000 	andeq	r0, r0, r0
	check_stack_overflow;
     af0:	00000002 	andeq	r0, r0, r2
     af4:	00000018 	andeq	r0, r0, r8, lsl r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     af8:	00000ad4 	ldrdeq	r0, [r0], -r4
     afc:	00000000 	andeq	r0, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
     b00:	00000058 	andeq	r0, r0, r8, asr r0
			goto Redo;
     b04:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	for_all_tasks (__pi_curr) {
     b08:	86038504 	strhi	r8, [r3], -r4, lsl #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b0c:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b10:	0000000c 	andeq	r0, r0, ip
     b14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b18:	7c020001 	stcvc	0, cr0, [r2], {1}
     b1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b20:	0000002c 	andeq	r0, r0, ip, lsr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b24:	00000b10 	andeq	r0, r0, r0, lsl fp
     b28:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b2c:	000000cc 	andeq	r0, r0, ip, asr #1
     b30:	83100e42 	tsthi	r0, #1056	; 0x420
			__WFI ();
     b34:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b38:	02018e02 	andeq	r8, r1, #2, 28
     b3c:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
}
     b40:	000ec3c4 	andeq	ip, lr, r4, asr #7
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b44:	ce420b44 	vmlsgt.f64	d16, d2, d4
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b48:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b4c:	00000000 	andeq	r0, r0, r0
     b50:	00000024 	andeq	r0, r0, r4, lsr #32
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b54:	00000b10 	andeq	r0, r0, r0, lsl fp
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	00000038 	andeq	r0, r0, r8, lsr r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b60:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b64:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b68:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b6c:	4a0b4300 	bmi	2d1774 <__ccfg+0x2b17cc>
     b70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b74:	000b4300 	andeq	r4, fp, r0, lsl #6
     b78:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b80:	7c020001 	stcvc	0, cr0, [r2], {1}
     b84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b88:	00000018 	andeq	r0, r0, r8, lsl r0
     b8c:	00000b78 	andeq	r0, r0, r8, ror fp
     b90:	00001438 	andeq	r1, r0, r8, lsr r4
			SysCtrlSetRechargeBeforePowerDown
     b94:	00000034 	andeq	r0, r0, r4, lsr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b98:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ba0:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ba4:	00000018 	andeq	r0, r0, r8, lsl r0
     ba8:	00000b78 	andeq	r0, r0, r8, ror fp
     bac:	0000146c 	andeq	r1, r0, ip, ror #8
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb0:	00000030 	andeq	r0, r0, r0, lsr r0
     bb4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bb8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000014 	andeq	r0, r0, r4, lsl r0
     bc4:	00000b78 	andeq	r0, r0, r8, ror fp
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bc8:	0000149c 	muleq	r0, ip, r4
			while (!(AONWUCPowerStatusGet () &
     bcc:	00000018 	andeq	r0, r0, r8, lsl r0
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bd0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     bd4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd8:	0000001c 	andeq	r0, r0, ip, lsl r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bdc:	00000b78 	andeq	r0, r0, r8, ror fp
     be0:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
     be4:	00000054 	andeq	r0, r0, r4, asr r0
     be8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bec:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bf0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bf4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
			SysCtrlAdjustRechargeAfterPowerDown ();
     bfc:	00000b78 	andeq	r0, r0, r8, ror fp
			reinit_uart ();
     c00:	00001508 	andeq	r1, r0, r8, lsl #10
     c04:	00000040 	andeq	r0, r0, r0, asr #32
     c08:	83180e41 	tsthi	r8, #1040	; 0x410
}
     c0c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c10:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c18:	00000014 	andeq	r0, r0, r4, lsl r0
     c1c:	00000b78 	andeq	r0, r0, r8, ror fp
     c20:	00001548 	andeq	r1, r0, r8, asr #10
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c24:	00000024 	andeq	r0, r0, r4, lsr #32
     c28:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c2c:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c30:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c34:	00000b78 	andeq	r0, r0, r8, ror fp
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c38:	0000156c 	andeq	r1, r0, ip, ror #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c3c:	00000014 	andeq	r0, r0, r4, lsl r0
     c40:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c44:	00018e02 	andeq	r8, r1, r2, lsl #28
     c48:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c4c:	00000b78 	andeq	r0, r0, r8, ror fp
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c50:	00001580 	andeq	r1, r0, r0, lsl #11
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c54:	00000014 	andeq	r0, r0, r4, lsl r0
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
			PRCMPowerDomainOff (
     c5c:	00000b78 	andeq	r0, r0, r8, ror fp
     c60:	00000000 	andeq	r0, r0, r0
	__SLEEP;
     c64:	00000064 	andeq	r0, r0, r4, rrx
     c68:	83180e41 	tsthi	r8, #1040	; 0x410
  __ASM volatile ("cpsie i" : : : "memory");
     c6c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	goto Redo;
     c70:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c74:	00018e02 	andeq	r8, r1, r2, lsl #28
     c78:	0000001c 	andeq	r0, r0, ip, lsl r0
     c7c:	00000b78 	andeq	r0, r0, r8, ror fp
     c80:	00000000 	andeq	r0, r0, r0
     c84:	00000128 	andeq	r0, r0, r8, lsr #2
     c88:	83180e41 	tsthi	r8, #1040	; 0x410
     c8c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c90:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c94:	00018e02 	andeq	r8, r1, r2, lsl #28
     c98:	00000024 	andeq	r0, r0, r4, lsr #32
     c9c:	00000b78 	andeq	r0, r0, r8, ror fp
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	000000ec 	andeq	r0, r0, ip, ror #1
     ca8:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     cac:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     cb0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     cb4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     cb8:	8b038a04 	blhi	e34d0 <__ccfg+0xc3528>
     cbc:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc0:	0000000c 	andeq	r0, r0, ip
     cc4:	00000b78 	andeq	r0, r0, r8, ror fp
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	00000002 	andeq	r0, r0, r2
     cd0:	0000000c 	andeq	r0, r0, ip
     cd4:	00000b78 	andeq	r0, r0, r8, ror fp
     cd8:	00000000 	andeq	r0, r0, r0
int main (void) {
     cdc:	00000004 	andeq	r0, r0, r4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ce0:	0000000c 	andeq	r0, r0, ip
     ce4:	00000b78 	andeq	r0, r0, r8, ror fp
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ce8:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cec:	00000014 	andeq	r0, r0, r4, lsl r0
	system_init ();
     cf0:	00000018 	andeq	r0, r0, r8, lsl r0
	tcv_init ();
     cf4:	00000b78 	andeq	r0, r0, r8, ror fp
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	0000001a 	andeq	r0, r0, sl, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d00:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d04:	4a018e02 	bmi	64514 <__ccfg+0x4456c>
     d08:	000ec3ce 	andeq	ip, lr, lr, asr #7
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d0c:	0000000c 	andeq	r0, r0, ip
     d10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	delay (16, 0);
     d14:	7c020001 	stcvc	0, cr0, [r2], {1}
     d18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
	__pi_release ();
     d20:	00000d0c 	andeq	r0, r0, ip, lsl #26
     d24:	00001594 	muleq	r0, r4, r5
     d28:	00000078 	andeq	r0, r0, r8, ror r0
     d2c:	83180e41 	tsthi	r8, #1040	; 0x410
     d30:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d34:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d38:	00018e02 	andeq	r8, r1, r2, lsl #28
static void killev (__pi_pcb_t *pid) {
     d3c:	0000000c 	andeq	r0, r0, ip
	wfun = (aword)(pid->code);
     d40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for_all_tasks (i) {
     d44:	7c020001 	stcvc	0, cr0, [r2], {1}
		for (j = 0; j < nevents (i); j++) {
     d48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d4c:	00000030 	andeq	r0, r0, r0, lsr r0
     d50:	00000d3c 	andeq	r0, r0, ip, lsr sp
			    || i->Events [j] . Event == wfun
     d54:	0000160c 	andeq	r1, r0, ip, lsl #12
		for (j = 0; j < nevents (i); j++) {
     d58:	00000054 	andeq	r0, r0, r4, asr r0
			if (i->Events [j] . Event == (aword)pid
     d5c:	810c0e41 	tsthi	ip, r1, asr #28
     d60:	83028203 	movwhi	r8, #8707	; 0x2203
     d64:	280e4101 	stmdacs	lr, {r0, r8, lr}
				wakeupev (i, j);
     d68:	06850784 	streq	r0, [r5], r4, lsl #15
     d6c:	048e0586 	streq	r0, [lr], #1414	; 0x586
	for_all_tasks (i) {
     d70:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
}
     d74:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d78:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
static void qfree (aword *ch) {
     d7c:	000ec1c2 	andeq	ip, lr, r2, asr #3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d80:	0000000c 	andeq	r0, r0, ip
	cc = (aword*)(mpools + MA_NP);
     d84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	m_setnextp (ch, chunk);
     d88:	7c020001 	stcvc	0, cr0, [r2], {1}
	m_setnextp (cc, ch);
     d8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
     d90:	00000030 	andeq	r0, r0, r0, lsr r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d94:	00000d80 	andeq	r0, r0, r0, lsl #27
     d98:	00001660 	andeq	r1, r0, r0, ror #12
     d9c:	00000060 	andeq	r0, r0, r0, rrx
			m_setnextp (cc, m_nextp (chunk));
     da0:	810c0e41 	tsthi	ip, r1, asr #28
			m_size (chunk) += m_hdrlen + m_size (ch);
     da4:	83028203 	movwhi	r8, #8707	; 0x2203
     da8:	200e4101 	andcs	r4, lr, r1, lsl #2
     dac:	05850684 	streq	r0, [r5, #1668]	; 0x684
     db0:	0a64048e 	beq	1901ff0 <__ccfg+0x18e2048>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     db4:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     db8:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     dbc:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     dc0:	0b41000e 	bleq	1040e00 <__ccfg+0x1020e58>
			m_setnextp (cc, m_nextp (chunk));
     dc4:	0000000c 	andeq	r0, r0, ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     dc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dcc:	7c020001 	stcvc	0, cr0, [r2], {1}
     dd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dd4:	00000028 	andeq	r0, r0, r8, lsr #32
     dd8:	00000dc4 	andeq	r0, r0, r4, asr #27
     ddc:	000016c0 	andeq	r1, r0, r0, asr #13
			if (m_size (chunk) >= m_size (ch))
     de0:	00000070 	andeq	r0, r0, r0, ror r0
     de4:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     de8:	86048505 	strhi	r8, [r4], -r5, lsl #10
		chunk = m_nextp (chunk))
     dec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     df0:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     df4:	c7ce4214 	bfigt	r4, r4, #4, #11
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     df8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
	diag_wait (a);
     dfc:	000b4200 	andeq	r4, fp, r0, lsl #4
	diag_wchar (c, a);
     e00:	0000000c 	andeq	r0, r0, ip
     e04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
     e08:	7c020001 	stcvc	0, cr0, [r2], {1}
     e0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	syserror (ESTATE, "state");
     e10:	00000028 	andeq	r0, r0, r8, lsr #32
     e14:	00000e00 	andeq	r0, r0, r0, lsl #28
     e18:	00001730 	andeq	r1, r0, r0, lsr r7
     e1c:	0000011c 	andeq	r0, r0, ip, lsl r1
void update_n_wake (word min, Boolean force) {
     e20:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
	if (TCI_UPDATE_DELAY_TICKS (force))
     e24:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e28:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e2c:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e30:	c7ce4214 	bfigt	r4, r4, #4, #11
     e34:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	0000000c 	andeq	r0, r0, ip
     e40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e44:	7c020001 	stcvc	0, cr0, [r2], {1}
     e48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e4c:	0000000c 	andeq	r0, r0, ip
     e50:	00000e3c 	andeq	r0, r0, ip, lsr lr
     e54:	0000184c 	andeq	r1, r0, ip, asr #16
     e58:	00000020 	andeq	r0, r0, r0, lsr #32
     e5c:	00000028 	andeq	r0, r0, r8, lsr #32
     e60:	00000e3c 	andeq	r0, r0, ip, lsr lr
		for_all_tasks (i) {
     e64:	0000186c 	andeq	r1, r0, ip, ror #16
	__pi_mintk = znew + min;
     e68:	00000230 	andeq	r0, r0, r0, lsr r2
     e6c:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
			if (!twaiting (i))
     e70:	86078508 	strhi	r8, [r7], -r8, lsl #10
     e74:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e78:	8a038904 	bhi	e3290 <__ccfg+0xc32e8>
     e7c:	02018e02 	andeq	r8, r1, #2, 28
     e80:	200e0a4f 	andcs	r0, lr, pc, asr #20
     e84:	00000b42 	andeq	r0, r0, r2, asr #22
     e88:	0000001c 	andeq	r0, r0, ip, lsl r0
     e8c:	00000e3c 	andeq	r0, r0, ip, lsr lr
     e90:	00001a9c 	muleq	r0, ip, sl
     e94:	00000050 	andeq	r0, r0, r0, asr r0
     e98:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     e9c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     ea0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ea4:	00018e02 	andeq	r8, r1, r2, lsl #28
				wakeuptm (i);
     ea8:	0000000c 	andeq	r0, r0, ip
     eac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		for_all_tasks (i) {
     eb0:	7c020001 	stcvc	0, cr0, [r2], {1}
				d = i->Timer - znew;
     eb4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     eb8:	00000020 	andeq	r0, r0, r0, lsr #32
     ebc:	00000ea8 	andeq	r0, r0, r8, lsr #29
		if ((word)(__pi_mintk - znew) < min) 
     ec0:	00001aec 	andeq	r1, r0, ip, ror #21
     ec4:	00000390 	muleq	r0, r0, r3
     ec8:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
	__pi_old = znew;
     ecc:	86068507 	strhi	r8, [r6], -r7, lsl #10
}
     ed0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
	TCI_RUN_DELAY_TIMER;
     ed4:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
}
     ed8:	00000001 	andeq	r0, r0, r1
     edc:	0000000c 	andeq	r0, r0, ip
     ee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ee4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ee8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     eec:	0000000c 	andeq	r0, r0, ip
	prcdstate (__pi_curr, state);
     ef0:	00000edc 	ldrdeq	r0, [r0], -ip
     ef4:	00001e7c 	andeq	r1, r0, ip, ror lr
	release;
     ef8:	00000030 	andeq	r0, r0, r0, lsr r0
     efc:	0000000c 	andeq	r0, r0, ip
void __pi_wait (aword event, word state) {
     f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	sint j = nevents (__pi_curr);
     f04:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (j >= MAX_EVENTS_PER_TASK)
     f08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f0c:	0000000c 	andeq	r0, r0, ip
     f10:	00000efc 	strdeq	r0, [r0], -ip
		syserror (ENEVENTS, "sw");
     f14:	00000000 	andeq	r0, r0, r0
     f18:	00000020 	andeq	r0, r0, r0, lsr #32
	setestate (__pi_curr->Events [j], state, event);
     f1c:	0000000c 	andeq	r0, r0, ip
	incwait (__pi_curr);
     f20:	00000efc 	strdeq	r0, [r0], -ip
	setestate (__pi_curr->Events [j], state, event);
     f24:	00001eac 	andeq	r1, r0, ip, lsr #29
}
     f28:	00000018 	andeq	r0, r0, r8, lsl r0
     f2c:	0000000c 	andeq	r0, r0, ip
     f30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void __pi_trigger (aword event) {
     f34:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (i) {
     f38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f3c:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
     f40:	00000f2c 	andeq	r0, r0, ip, lsr #30
     f44:	00001ec4 	andeq	r1, r0, r4, asr #29
     f48:	00000008 	andeq	r0, r0, r8
			if (i->Events [j] . Event == event) {
     f4c:	0000000c 	andeq	r0, r0, ip
     f50:	00000f2c 	andeq	r0, r0, ip, lsr #30
     f54:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
     f58:	00000006 	andeq	r0, r0, r6
     f5c:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
     f60:	00000f2c 	andeq	r0, r0, ip, lsr #30
}
     f64:	00001ecc 	andeq	r1, r0, ip, asr #29
aword __pi_join (aword pid, word st) {
     f68:	00000008 	andeq	r0, r0, r8
	for_all_tasks (i) {
     f6c:	0000000c 	andeq	r0, r0, ip
     f70:	00000f2c 	andeq	r0, r0, ip, lsr #30
	return 0;
     f74:	00000000 	andeq	r0, r0, r0
		if ((aword)i == pid) {
     f78:	00000006 	andeq	r0, r0, r6
			__pi_wait (pid, st);
     f7c:	0000000c 	andeq	r0, r0, ip
}
     f80:	00000f2c 	andeq	r0, r0, ip, lsr #30
	for_all_tasks (i) {
     f84:	00000000 	andeq	r0, r0, r0
     f88:	00000008 	andeq	r0, r0, r8
void delay (word d, word state) {
     f8c:	0000000c 	andeq	r0, r0, ip
	settstate (__pi_curr, state);
     f90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f94:	7c020001 	stcvc	0, cr0, [r2], {1}
     f98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f9c:	00000018 	andeq	r0, r0, r8, lsl r0
	update_n_wake (d, YES);
     fa0:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fa4:	00001ed4 	ldrdeq	r1, [r0], -r4
	__pi_curr->Timer = __pi_old + d;
     fa8:	000000d4 	ldrdeq	r0, [r0], -r4
     fac:	83100e41 	tsthi	r0, #1040	; 0x410
	inctimer (__pi_curr);
     fb0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     fb4:	00018e02 	andeq	r8, r1, r2, lsl #28
     fb8:	00000014 	andeq	r0, r0, r4, lsl r0
}
     fbc:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fc0:	00001fa8 	andeq	r1, r0, r8, lsr #31
	if (fun == NULL)
     fc4:	000000a4 	andeq	r0, r0, r4, lsr #1
		return (int) __pi_curr;
     fc8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     fcc:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (i)
     fd0:	0000000c 	andeq	r0, r0, ip
}
     fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (i->code == fun)
     fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (i)
     fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fe0:	00000018 	andeq	r0, r0, r8, lsl r0
     fe4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
int __pi_strlen (const char *s) {
     fe8:	0000204c 	andeq	r2, r0, ip, asr #32
	for (i = 0; *(s+i) != '\0'; i++);
     fec:	0000007c 	andeq	r0, r0, ip, ror r0
}
     ff0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	for (i = 0; *(s+i) != '\0'; i++);
     ff4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	while (n--)
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	00000014 	andeq	r0, r0, r4, lsl r0
		*dest++ = *src++;
    1000:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1004:	000020c8 	andeq	r2, r0, r8, asr #1
    1008:	000000ac 	andeq	r0, r0, ip, lsr #1
void adddevfunc (devreqfun_t rf, int loc) {
    100c:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
		syserror (EREQPAR, "addv");
    1010:	00018e02 	andeq	r8, r1, r2, lsl #28
		syserror (ERESOURCE, "addv");
    1014:	0000000c 	andeq	r0, r0, ip
	if (ioreq [loc] != NULL)
    1018:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    101c:	00002174 	andeq	r2, r0, r4, ror r1
		syserror (ERESOURCE, "addv");
    1020:	0000005c 	andeq	r0, r0, ip, asr r0
	ioreq [loc] = rf;
    1024:	0000000c 	andeq	r0, r0, ip
}
    1028:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    102c:	000021d0 	ldrdeq	r2, [r0], -r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1030:	00000018 	andeq	r0, r0, r8, lsl r0
    1034:	0000000c 	andeq	r0, r0, ip
    1038:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    103c:	00000000 	andeq	r0, r0, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1040:	00000010 	andeq	r0, r0, r0, lsl r0
    1044:	0000000c 	andeq	r0, r0, ip
    1048:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		syserror (ENODEVICE, "io");
    104c:	000021e8 	andeq	r2, r0, r8, ror #3
    1050:	00000010 	andeq	r0, r0, r0, lsl r0
	if (len == 0)
    1054:	0000000c 	andeq	r0, r0, ip
	ret = (ioreq [dev]) (operation, buf, len);
    1058:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    105c:	000021f8 	strdeq	r2, [r0], -r8
	if (ret >= 0)
    1060:	00000014 	andeq	r0, r0, r4, lsl r0
	if (ret == -1) {
    1064:	00000018 	andeq	r0, r0, r8, lsl r0
    1068:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (retry == WNONE)
    106c:	0000220c 	andeq	r2, r0, ip, lsl #4
		iowait (dev, operation, retry);
    1070:	00000064 	andeq	r0, r0, r4, rrx
    1074:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1078:	86038504 	strhi	r8, [r3], -r4, lsl #10
			release;
    107c:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (ret == -2) {
    1080:	0000000c 	andeq	r0, r0, ip
		if (retry != WNONE) {
    1084:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1088:	00002270 	andeq	r2, r0, r0, ror r2
			iowait (dev, operation, retry);
    108c:	00000014 	andeq	r0, r0, r4, lsl r0
    1090:	0000000c 	andeq	r0, r0, ip
			(ioreq [dev]) (NONE, buf, len);
    1094:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1098:	00002284 	andeq	r2, r0, r4, lsl #5
    109c:	00000014 	andeq	r0, r0, r4, lsl r0
		(ioreq [dev]) (NONE, buf, len);
    10a0:	0000000c 	andeq	r0, r0, ip
    10a4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10a8:	00002298 	muleq	r0, r8, r2
}
    10ac:	00000014 	andeq	r0, r0, r4, lsl r0
	if (retry != WNONE) {
    10b0:	0000000c 	andeq	r0, r0, ip
		delay (-ret - 2, retry);
    10b4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10b8:	000022ac 	andeq	r2, r0, ip, lsr #5
    10bc:	00000028 	andeq	r0, r0, r8, lsr #32
    10c0:	0000000c 	andeq	r0, r0, ip
		release;
    10c4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10c8:	000022d4 	ldrdeq	r2, [r0], -r4
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10cc:	00000010 	andeq	r0, r0, r0, lsl r0
    10d0:	0000000c 	andeq	r0, r0, ip
    10d4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10d8:	000022e4 	andeq	r2, r0, r4, ror #5
    10dc:	0000002c 	andeq	r0, r0, ip, lsr #32
		syserror (ERESOURCE, "mal1");
    10e0:	0000000c 	andeq	r0, r0, ip
    10e4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10e8:	00002310 	andeq	r2, r0, r0, lsl r3
    10ec:	00000014 	andeq	r0, r0, r4, lsl r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f0:	0000000c 	andeq	r0, r0, ip
	m_size (mpools [0]) = mlen - m_hdrlen;
    10f4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10f8:	00002324 	andeq	r2, r0, r4, lsr #6
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    10fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1100:	0000001c 	andeq	r0, r0, ip, lsl r0
}
    1104:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1108:	00002338 	andeq	r2, r0, r8, lsr r3
    110c:	00000110 	andeq	r0, r0, r0, lsl r1
    1110:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1114:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1118:	02018e02 	andeq	r8, r1, #2, 28
void __pi_free (aword *ch) {
    111c:	00100e76 	andseq	r0, r0, r6, ror lr
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1120:	00000018 	andeq	r0, r0, r8, lsl r0
    1124:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		syserror (EMALLOC, "malg");
    1128:	00002448 	andeq	r2, r0, r8, asr #8
    112c:	00000064 	andeq	r0, r0, r4, rrx
	mcfree [MA_NP] += m_size (ch);
    1130:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		m_size (ch) ^= MALLOC_UMASK;
    1134:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1138:	00000001 	andeq	r0, r0, r1
	mcfree [MA_NP] += m_size (ch);
    113c:	0000000c 	andeq	r0, r0, ip
	QFREE;
    1140:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	if (mevent [MA_NP] . nwait) {
    1144:	000024ac 	andeq	r2, r0, ip, lsr #9
    1148:	00000028 	andeq	r0, r0, r8, lsr #32
		trigger ((aword)(&(mevent [MA_NP])));
    114c:	00000014 	andeq	r0, r0, r4, lsl r0
		mevent [MA_NP] . nwait --;
    1150:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
    1154:	000024d4 	ldrdeq	r2, [r0], -r4
    1158:	00000150 	andeq	r0, r0, r0, asr r1
    115c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1160:	00018e02 	andeq	r8, r1, r2, lsl #28
void kill (aword pid) {
    1164:	0000000c 	andeq	r0, r0, ip
		pid = (aword) __pi_curr;
    1168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	j = NULL;
    116c:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (i) {
    1170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1174:	0000001c 	andeq	r0, r0, ip, lsl r0
	syserror (EREQPAR, "kpi");
    1178:	00001164 	andeq	r1, r0, r4, ror #2
		if ((aword)i == pid) {
    117c:	00000000 	andeq	r0, r0, r0
    1180:	000000f4 	strdeq	r0, [r0], -r4
				__PCB = i->Next;
    1184:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
			killev (i);
    1188:	86058506 	strhi	r8, [r5], -r6, lsl #10
			ufree (i);
    118c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			if (i == __pi_curr)
    1190:	00018e02 	andeq	r8, r1, r2, lsl #28
    1194:	00000028 	andeq	r0, r0, r8, lsr #32
				release;
    1198:	00001164 	andeq	r1, r0, r4, ror #2
				j->Next = i->Next;
    119c:	00002624 	andeq	r2, r0, r4, lsr #12
    11a0:	00000220 	andeq	r0, r0, r0, lsr #4
    11a4:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
}
    11a8:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11ac:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    11b0:	8a048905 	bhi	1235cc <__ccfg+0x103624>
	if (size < 8)
    11b4:	8e028b03 	vmlahi.f64	d8, d2, d3
		_size = 2;
    11b8:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11bc:	00000024 	andeq	r0, r0, r4, lsr #32
		_size = (((aword)size) + 3) >> 2;
    11c0:	00000014 	andeq	r0, r0, r4, lsl r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    11c4:	00001164 	andeq	r1, r0, r4, ror #2
		_size = (((aword)size) + 3) >> 2;
    11c8:	00002844 	andeq	r2, r0, r4, asr #16
		if (mevent [MA_NP] . nfail != 255)
    11cc:	00000060 	andeq	r0, r0, r0, rrx
    11d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			mevent [MA_NP] . nfail ++;
    11d4:	00018e02 	andeq	r8, r1, r2, lsl #28
		mnfree [MA_NP] = 0;
    11d8:	00000014 	andeq	r0, r0, r4, lsl r0
    11dc:	00001164 	andeq	r1, r0, r4, ror #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	00000078 	andeq	r0, r0, r8, ror r0
			syserror (EMALLOC, "malc");
    11e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11ec:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (m_size (chunk) >= _size)
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	00001164 	andeq	r1, r0, r4, ror #2
		chunk = m_nextp (chunk)) {
    11f8:	000028a4 	andeq	r2, r0, r4, lsr #17
		m_setnextp (cc, m_nextp (chunk));
    11fc:	00000018 	andeq	r0, r0, r8, lsl r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1200:	0000000c 	andeq	r0, r0, ip
    1204:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			m_size (chunk) = _size;
    1208:	7c020001 	stcvc	0, cr0, [r2], {1}
			cc = chunk + _size + m_hdrlen;
    120c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1210:	0000000c 	andeq	r0, r0, ip
			m_size (cc) = waste - m_hdrlen;
    1214:	00001200 	andeq	r1, r0, r0, lsl #4
			QFREE;
    1218:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nfail = 0;
    121c:	00000010 	andeq	r0, r0, r0, lsl r0
		mcfree [MA_NP] -= m_size (chunk);
    1220:	0000000c 	andeq	r0, r0, ip
    1224:	00001200 	andeq	r1, r0, r0, lsl #4
    1228:	00000000 	andeq	r0, r0, r0
    122c:	00000018 	andeq	r0, r0, r8, lsl r0
		m_size (chunk) |= MALLOC_UMASK;
    1230:	0000000c 	andeq	r0, r0, ip
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1234:	00001200 	andeq	r1, r0, r0, lsl #4
		m_size (chunk) |= MALLOC_UMASK;
    1238:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
			mnfree [MA_NP] = mcfree [MA_NP];
    123c:	0000004c 	andeq	r0, r0, ip, asr #32
}
    1240:	00000014 	andeq	r0, r0, r4, lsl r0
    1244:	00001200 	andeq	r1, r0, r0, lsl #4
    1248:	00000000 	andeq	r0, r0, r0
    124c:	00000030 	andeq	r0, r0, r0, lsr r0
    1250:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1254:	00018e02 	andeq	r8, r1, r2, lsl #28
    1258:	00000018 	andeq	r0, r0, r8, lsl r0
aword __pi_fork (fsmcode func, aword data) {
    125c:	00001200 	andeq	r1, r0, r0, lsl #4
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1260:	00002908 	andeq	r2, r0, r8, lsl #18
    1264:	0000006c 	andeq	r0, r0, ip, rrx
    1268:	83100e41 	tsthi	r0, #1040	; 0x410
		if ((j = __PCB) == NULL)
    126c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	i->Next = NULL;
    1270:	00018e02 	andeq	r8, r1, r2, lsl #28
	i->data = data;
    1274:	00000014 	andeq	r0, r0, r4, lsl r0
		if ((j = __PCB) == NULL)
    1278:	00001200 	andeq	r1, r0, r0, lsl #4
}
    127c:	00002974 	andeq	r2, r0, r4, ror r9
			for (; j->Next != NULL; j = j->Next);
    1280:	00000016 	andeq	r0, r0, r6, lsl r0
    1284:	83080e41 	movwhi	r0, #36417	; 0x8e41
	return (aword) i;
    1288:	00018e02 	andeq	r8, r1, r2, lsl #28
    128c:	0000000c 	andeq	r0, r0, ip
	if (mevent [MA_NP] . nwait != 255)
    1290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1294:	7c020001 	stcvc	0, cr0, [r2], {1}
    1298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    129c:	00000024 	andeq	r0, r0, r4, lsr #32
	wait ((aword)(&(mevent [MA_NP])), state);
    12a0:	0000128c 	andeq	r1, r0, ip, lsl #5
    12a4:	0000298c 	andeq	r2, r0, ip, lsl #19
void diag (const char *mess, ...) {
    12a8:	00000028 	andeq	r0, r0, r8, lsr #32
    12ac:	83100e41 	tsthi	r0, #1040	; 0x410
    12b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	diag_disable_int (a, is);
    12b4:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    12b8:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    12bc:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
				d = (bc == 16) ? 10000 : 1000000000;
    12c0:	0000000b 	andeq	r0, r0, fp
	diag_disable_int (a, is);
    12c4:	0000000c 	andeq	r0, r0, ip
	while (*mess != '\0') {
    12c8:	0000128c 	andeq	r1, r0, ip, lsl #5
	dgout ('\r');
    12cc:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
	dgout ('\n');
    12d0:	00000008 	andeq	r0, r0, r8
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	0000128c 	andeq	r1, r0, ip, lsl #5
	diag_wait (a);
    12dc:	00000000 	andeq	r0, r0, r0
	diag_enable_int (a, is);
    12e0:	00000022 	andeq	r0, r0, r2, lsr #32
    12e4:	00000018 	andeq	r0, r0, r8, lsl r0
}
    12e8:	0000128c 	andeq	r1, r0, ip, lsl #5
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	0000002e 	andeq	r0, r0, lr, lsr #32
		if (*mess == '%') {
    12f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    12f8:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
			if (*mess == 'l') {
    12fc:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1300:	00000018 	andeq	r0, r0, r8, lsl r0
				mess++;
    1304:	0000128c 	andeq	r1, r0, ip, lsl #5
				val = va_arg (ap, lword);
    1308:	00000000 	andeq	r0, r0, r0
				bc = 32;
    130c:	00000034 	andeq	r0, r0, r4, lsr r0
				bc = 16;
    1310:	83100e41 	tsthi	r0, #1040	; 0x410
			switch (*mess) {
    1314:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1318:	00018e02 	andeq	r8, r1, r2, lsl #28
    131c:	00000018 	andeq	r0, r0, r8, lsl r0
				dgout ('%');
    1320:	0000128c 	andeq	r1, r0, ip, lsl #5
    1324:	00000000 	andeq	r0, r0, r0
				dgout (*mess);
    1328:	00000040 	andeq	r0, r0, r0, asr #32
    132c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			switch (*mess) {
    1330:	86038504 	strhi	r8, [r3], -r4, lsl #10
					v = __pi_hex_enc_table [
    1334:	00018e02 	andeq	r8, r1, r2, lsl #28
					i += 4;
    1338:	0000000c 	andeq	r0, r0, ip
					(val >> (bc - i)) & 0xf];
    133c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1340:	7c020001 	stcvc	0, cr0, [r2], {1}
					dgout (v);
    1344:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1348:	0000001c 	andeq	r0, r0, ip, lsl r0
				while (i < bc) {
    134c:	00001338 	andeq	r1, r0, r8, lsr r3
			mess++;
    1350:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
					d /= 10;
    1354:	0000005c 	andeq	r0, r0, ip, asr r0
				if ((val >> (bc - 1)) & 1) {
    1358:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    135c:	86038504 	strhi	r8, [r3], -r4, lsl #10
					dgout ('-');
    1360:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1364:	0000100e 	andeq	r1, r0, lr
						val |= 0xffff0000;
    1368:	00000014 	andeq	r0, r0, r4, lsl r0
    136c:	00001338 	andeq	r1, r0, r8, lsr r3
    1370:	00002a18 	andeq	r2, r0, r8, lsl sl
				d = (bc == 16) ? 10000 : 1000000000;
    1374:	0000002c 	andeq	r0, r0, ip, lsr #32
    1378:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
					v = (word) (val / d);
    1380:	00000018 	andeq	r0, r0, r8, lsl r0
					if (v || d == 1) break;
    1384:	00001338 	andeq	r1, r0, r8, lsr r3
    1388:	00000000 	andeq	r0, r0, r0
					d /= 10;
    138c:	00000090 	muleq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1390:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					dgout (v + '0');
    1394:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1398:	00018e02 	andeq	r8, r1, r2, lsl #28
    139c:	00000014 	andeq	r0, r0, r4, lsl r0
					d /= 10;
    13a0:	00001338 	andeq	r1, r0, r8, lsr r3
					val = val - (v * d);
    13a4:	00000000 	andeq	r0, r0, r0
					if (d == 0) break;
    13a8:	00000018 	andeq	r0, r0, r8, lsl r0
					v = (word) (val / d);
    13ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
    13b0:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (bc == 16)
    13b4:	00000014 	andeq	r0, r0, r4, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    13b8:	00001338 	andeq	r1, r0, r8, lsr r3
					val &= 0xffff;
    13bc:	00000000 	andeq	r0, r0, r0
					dgout (*s);
    13c0:	00000060 	andeq	r0, r0, r0, rrx
					s++;
    13c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				while (*s != '\0') {
    13c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13cc:	00000014 	andeq	r0, r0, r4, lsl r0
			dgout (*mess++);
    13d0:	00001338 	andeq	r1, r0, r8, lsr r3
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	00000034 	andeq	r0, r0, r4, lsr r0
    13dc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13e0:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    13e4:	00000018 	andeq	r0, r0, r8, lsl r0
    while(1)
    13e8:	00001338 	andeq	r1, r0, r8, lsr r3
{
    13ec:	00000000 	andeq	r0, r0, r0
    SetupTrimDevice();
    13f0:	00000038 	andeq	r0, r0, r8, lsr r0
    pui32Src = &_etext;
    13f4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13f8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    __asm("    ldr     r0, =_bss\n"
    13fc:	00000001 	andeq	r0, r0, r1
    1400:	0000000c 	andeq	r0, r0, ip
    1404:	00001338 	andeq	r1, r0, r8, lsr r3
    1408:	00000000 	andeq	r0, r0, r0
    140c:	0000000c 	andeq	r0, r0, ip
   main();
    1410:	00000018 	andeq	r0, r0, r8, lsl r0
    FaultISR();
    1414:	00001338 	andeq	r1, r0, r8, lsr r3
        *pui32Dest++ = *pui32Src++;
    1418:	00000000 	andeq	r0, r0, r0
    141c:	00000034 	andeq	r0, r0, r4, lsr r0
    1420:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1424:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1428:	00018e02 	andeq	r8, r1, r2, lsl #28
    142c:	0000000c 	andeq	r0, r0, ip
    1430:	00001338 	andeq	r1, r0, r8, lsr r3
    1434:	00000000 	andeq	r0, r0, r0
static byte get_byte () {
    1438:	0000001c 	andeq	r0, r0, ip, lsl r0
