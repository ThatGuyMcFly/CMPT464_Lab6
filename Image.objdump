
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00001505 	andeq	r1, r0, r5, lsl #10
		// Called to issue a wait request
		if (st == WNONE)
       8:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
       c:	00001501 	andeq	r1, r0, r1, lsl #10
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00001503 	andeq	r1, r0, r3, lsl #10
      14:	00001503 	andeq	r1, r0, r3, lsl #10
		when (&__input_pins, st);
      18:	00001503 	andeq	r1, r0, r3, lsl #10
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00001503 	andeq	r1, r0, r3, lsl #10
      30:	00001503 	andeq	r1, r0, r3, lsl #10
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00001503 	andeq	r1, r0, r3, lsl #10
      3c:	00001503 	andeq	r1, r0, r3, lsl #10
      40:	00000941 	andeq	r0, r0, r1, asr #18
      44:	00001503 	andeq	r1, r0, r3, lsl #10
      48:	00001503 	andeq	r1, r0, r3, lsl #10
}
      4c:	00001503 	andeq	r1, r0, r3, lsl #10
      50:	00000501 	andeq	r0, r0, r1, lsl #10
      54:	00000801 	andeq	r0, r0, r1, lsl #16
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00001503 	andeq	r1, r0, r3, lsl #10
	    pbutton++) {
      5c:	00001503 	andeq	r1, r0, r3, lsl #10
      60:	00001503 	andeq	r1, r0, r3, lsl #10
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00001503 	andeq	r1, r0, r3, lsl #10
      68:	00001503 	andeq	r1, r0, r3, lsl #10
      6c:	00001503 	andeq	r1, r0, r3, lsl #10
      70:	00001503 	andeq	r1, r0, r3, lsl #10
      74:	00001503 	andeq	r1, r0, r3, lsl #10
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00001503 	andeq	r1, r0, r3, lsl #10
      7c:	00001503 	andeq	r1, r0, r3, lsl #10
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00001503 	andeq	r1, r0, r3, lsl #10
      84:	00001503 	andeq	r1, r0, r3, lsl #10
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00001503 	andeq	r1, r0, r3, lsl #10
      8c:	00001503 	andeq	r1, r0, r3, lsl #10
      90:	00001503 	andeq	r1, r0, r3, lsl #10
      94:	00001503 	andeq	r1, r0, r3, lsl #10
      98:	00001503 	andeq	r1, r0, r3, lsl #10
		goto Done;

	if (baction == NULL)
      9c:	00001503 	andeq	r1, r0, r3, lsl #10
      a0:	00001503 	andeq	r1, r0, r3, lsl #10
		goto Term;

	(*baction) (pbutton);
      a4:	00001503 	andeq	r1, r0, r3, lsl #10

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00001503 	andeq	r1, r0, r3, lsl #10
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00001503 	andeq	r1, r0, r3, lsl #10
      b0:	00001503 	andeq	r1, r0, r3, lsl #10
endthread
      b4:	00001503 	andeq	r1, r0, r3, lsl #10
      b8:	00001503 	andeq	r1, r0, r3, lsl #10
      bc:	00001503 	andeq	r1, r0, r3, lsl #10
      c0:	00001503 	andeq	r1, r0, r3, lsl #10
      c4:	00001503 	andeq	r1, r0, r3, lsl #10

000000c8 <blinker>:
      c8:	b510      	push	{r4, lr}
      ca:	b1b0      	cbz	r0, fa <blinker+0x32>
// int led = 0;

// word onTime = 0;
// word offTime = 0;

fsm blinker {
      cc:	2801      	cmp	r0, #1
      ce:	d15b      	bne.n	188 <_Min_Stack_Size+0x88>
            delay(onTime, OFF_PERIOD);
        
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        leds(led,0);
      d0:	4b2f      	ldr	r3, [pc, #188]	; (190 <_Min_Stack_Size+0x90>)
      d2:	4a30      	ldr	r2, [pc, #192]	; (194 <_Min_Stack_Size+0x94>)
      d4:	6819      	ldr	r1, [r3, #0]
      d6:	4b30      	ldr	r3, [pc, #192]	; (198 <_Min_Stack_Size+0x98>)
      d8:	2900      	cmp	r1, #0
      da:	d14c      	bne.n	176 <_Min_Stack_Size+0x76>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      dc:	2140      	movs	r1, #64	; 0x40
      de:	6011      	str	r1, [r2, #0]
      e0:	781a      	ldrb	r2, [r3, #0]
      e2:	0912      	lsrs	r2, r2, #4
      e4:	f002 020e 	and.w	r2, r2, #14
      e8:	7819      	ldrb	r1, [r3, #0]
      ea:	f362 1107 	bfi	r1, r2, #4, #4
      ee:	7019      	strb	r1, [r3, #0]
        
        if(offTime > 0)
      f0:	4b2a      	ldr	r3, [pc, #168]	; (19c <_Min_Stack_Size+0x9c>)
      f2:	8818      	ldrh	r0, [r3, #0]
      f4:	b330      	cbz	r0, 144 <_Min_Stack_Size+0x44>
            delay(offTime, Check_PERIOD);
      f6:	2100      	movs	r1, #0
      f8:	e022      	b.n	140 <_Min_Stack_Size+0x40>
        if(ledFlag == 0) {
      fa:	4b29      	ldr	r3, [pc, #164]	; (1a0 <_Min_Stack_Size+0xa0>)
      fc:	4929      	ldr	r1, [pc, #164]	; (1a4 <_Min_Stack_Size+0xa4>)
      fe:	6818      	ldr	r0, [r3, #0]
     100:	4a26      	ldr	r2, [pc, #152]	; (19c <_Min_Stack_Size+0x9c>)
     102:	4b23      	ldr	r3, [pc, #140]	; (190 <_Min_Stack_Size+0x90>)
     104:	bb20      	cbnz	r0, 150 <_Min_Stack_Size+0x50>
            led = redLed;
     106:	4828      	ldr	r0, [pc, #160]	; (1a8 <_Min_Stack_Size+0xa8>)
     108:	6800      	ldr	r0, [r0, #0]
     10a:	6018      	str	r0, [r3, #0]
            onTime = redOn;
     10c:	4827      	ldr	r0, [pc, #156]	; (1ac <_Min_Stack_Size+0xac>)
     10e:	8800      	ldrh	r0, [r0, #0]
     110:	8008      	strh	r0, [r1, #0]
            offTime = redOff;
     112:	4827      	ldr	r0, [pc, #156]	; (1b0 <_Min_Stack_Size+0xb0>)
            offTime = greenOff;
     114:	8800      	ldrh	r0, [r0, #0]
     116:	2440      	movs	r4, #64	; 0x40
     118:	8010      	strh	r0, [r2, #0]
        if(On)
     11a:	681a      	ldr	r2, [r3, #0]
     11c:	4b25      	ldr	r3, [pc, #148]	; (1b4 <_Min_Stack_Size+0xb4>)
     11e:	7818      	ldrb	r0, [r3, #0]
     120:	4b1d      	ldr	r3, [pc, #116]	; (198 <_Min_Stack_Size+0x98>)
     122:	b1e8      	cbz	r0, 160 <_Min_Stack_Size+0x60>
            leds(led,1);
     124:	4824      	ldr	r0, [pc, #144]	; (1b8 <_Min_Stack_Size+0xb8>)
            leds(led,0);
     126:	b9ea      	cbnz	r2, 164 <_Min_Stack_Size+0x64>
     128:	6004      	str	r4, [r0, #0]
     12a:	781a      	ldrb	r2, [r3, #0]
     12c:	0912      	lsrs	r2, r2, #4
     12e:	f002 020e 	and.w	r2, r2, #14
     132:	7818      	ldrb	r0, [r3, #0]
     134:	f362 1007 	bfi	r0, r2, #4, #4
     138:	7018      	strb	r0, [r3, #0]
        if(onTime > 0)
     13a:	8808      	ldrh	r0, [r1, #0]
     13c:	b110      	cbz	r0, 144 <_Min_Stack_Size+0x44>
            delay(onTime, OFF_PERIOD);
     13e:	2101      	movs	r1, #1
     140:	f000 ffb0 	bl	10a4 <delay>
        when(&On, Check_PERIOD);
     144:	2100      	movs	r1, #0
     146:	481b      	ldr	r0, [pc, #108]	; (1b4 <_Min_Stack_Size+0xb4>)
     148:	f000 ff66 	bl	1018 <__pi_wait>
        release;
     14c:	f000 fd26 	bl	b9c <__pi_release>
            led = greenLed;
     150:	481a      	ldr	r0, [pc, #104]	; (1bc <_Min_Stack_Size+0xbc>)
     152:	6800      	ldr	r0, [r0, #0]
     154:	6018      	str	r0, [r3, #0]
            onTime = greenOn;
     156:	481a      	ldr	r0, [pc, #104]	; (1c0 <_Min_Stack_Size+0xc0>)
     158:	8800      	ldrh	r0, [r0, #0]
     15a:	8008      	strh	r0, [r1, #0]
            offTime = greenOff;
     15c:	4819      	ldr	r0, [pc, #100]	; (1c4 <_Min_Stack_Size+0xc4>)
     15e:	e7d9      	b.n	114 <_Min_Stack_Size+0x14>
            leds(led,0);
     160:	480c      	ldr	r0, [pc, #48]	; (194 <_Min_Stack_Size+0x94>)
     162:	e7e0      	b.n	126 <_Min_Stack_Size+0x26>
     164:	2a01      	cmp	r2, #1
     166:	d1e8      	bne.n	13a <_Min_Stack_Size+0x3a>
     168:	2280      	movs	r2, #128	; 0x80
     16a:	6002      	str	r2, [r0, #0]
     16c:	781a      	ldrb	r2, [r3, #0]
     16e:	0912      	lsrs	r2, r2, #4
     170:	f002 020d 	and.w	r2, r2, #13
     174:	e7dd      	b.n	132 <_Min_Stack_Size+0x32>
        leds(led,0);
     176:	2901      	cmp	r1, #1
     178:	d1ba      	bne.n	f0 <blinker+0x28>
     17a:	2180      	movs	r1, #128	; 0x80
     17c:	6011      	str	r1, [r2, #0]
     17e:	781a      	ldrb	r2, [r3, #0]
     180:	0912      	lsrs	r2, r2, #4
     182:	f002 020d 	and.w	r2, r2, #13
     186:	e7af      	b.n	e8 <blinker+0x20>
        
        when(&On, Check_PERIOD);
        release;
}
     188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     18c:	f000 becc 	b.w	f28 <__pi_badstate>
     190:	2000000c 	andcs	r0, r0, ip
     194:	400220a0 	andmi	r2, r2, r0, lsr #1
     198:	20000084 	andcs	r0, r0, r4, lsl #1
     19c:	20000014 	andcs	r0, r0, r4, lsl r0
     1a0:	20000010 	andcs	r0, r0, r0, lsl r0
     1a4:	20000016 	andcs	r0, r0, r6, lsl r0
     1a8:	20000018 	andcs	r0, r0, r8, lsl r0
     1ac:	2000001e 	andcs	r0, r0, lr, lsl r0
     1b0:	2000001c 	andcs	r0, r0, ip, lsl r0
     1b4:	20000004 	andcs	r0, r0, r4
     1b8:	40022090 	mulmi	r2, r0, r0
     1bc:	20000000 	andcs	r0, r0, r0
     1c0:	20000008 	andcs	r0, r0, r8
     1c4:	20000006 	andcs	r0, r0, r6

000001c8 <processSettingsInput>:

void processSettingsInput(char * settingsInput){
    word numbers[4];
    int numbersIndex = 0;

    word number = 0;
     1c8:	2300      	movs	r3, #0
void processSettingsInput(char * settingsInput){
     1ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int numbersIndex = 0;
     1cc:	461c      	mov	r4, r3
     1ce:	1e41      	subs	r1, r0, #1
     1d0:	3031      	adds	r0, #49	; 0x31

    for (int i = 0; i < SETTINGS_LENGTH; i++) {
        if(settingsInput[i] == ' ') {
     1d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     1d6:	2a20      	cmp	r2, #32
     1d8:	d11a      	bne.n	210 <processSettingsInput+0x48>
            numbers[numbersIndex] = number;
     1da:	aa02      	add	r2, sp, #8
     1dc:	eb02 0244 	add.w	r2, r2, r4, lsl #1
     1e0:	f822 3c08 	strh.w	r3, [r2, #-8]
            number = 0;
     1e4:	2300      	movs	r3, #0
            numbersIndex++;
     1e6:	3401      	adds	r4, #1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	4281      	cmp	r1, r0
     1ea:	d1f2      	bne.n	1d2 <processSettingsInput+0xa>
            number = number * 10;
            number += settingsInput[i] - 48;
        }
    }

    redOn = numbers[0];
     1ec:	f8bd 2000 	ldrh.w	r2, [sp]
     1f0:	4b0c      	ldr	r3, [pc, #48]	; (224 <processSettingsInput+0x5c>)
     1f2:	801a      	strh	r2, [r3, #0]
    redOff = numbers[1];
     1f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
     1f8:	4b0b      	ldr	r3, [pc, #44]	; (228 <processSettingsInput+0x60>)
     1fa:	801a      	strh	r2, [r3, #0]

    greenOn = numbers[2];
     1fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     200:	4b0a      	ldr	r3, [pc, #40]	; (22c <processSettingsInput+0x64>)
     202:	801a      	strh	r2, [r3, #0]
    greenOff = numbers[3];
     204:	4b0a      	ldr	r3, [pc, #40]	; (230 <processSettingsInput+0x68>)
     206:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     20a:	801a      	strh	r2, [r3, #0]
}
     20c:	b003      	add	sp, #12
     20e:	bd30      	pop	{r4, r5, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	3a30      	subs	r2, #48	; 0x30
     212:	b2d5      	uxtb	r5, r2
     214:	2d09      	cmp	r5, #9
            number = number * 10;
     216:	bf9e      	ittt	ls
     218:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
            number += settingsInput[i] - 48;
     21c:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
     220:	b29b      	uxthls	r3, r3
     222:	e7e1      	b.n	1e8 <processSettingsInput+0x20>
     224:	2000001e 	andcs	r0, r0, lr, lsl r0
     228:	2000001c 	andcs	r0, r0, ip, lsl r0
     22c:	20000008 	andcs	r0, r0, r8
     230:	20000006 	andcs	r0, r0, r6

00000234 <root>:

fsm root {
     234:	b500      	push	{lr}
     236:	b091      	sub	sp, #68	; 0x44
     238:	280a      	cmp	r0, #10
     23a:	f200 8090 	bhi.w	35e <root+0x12a>
     23e:	e8df f000 	tbb	[pc, r0]
     242:	130f0a06 	movwne	r0, #64006	; 0xfa06
     246:	3d2d2918 			; <UNDEFINED> instruction: 0x3d2d2918
     24a:	0069554e 	rsbeq	r5, r9, lr, asr #10

    char username[NAME_LENGTH];
        
    state Initial:
        ser_outf(Initial, "Enter your name: ");
     24e:	2000      	movs	r0, #0
     250:	4944      	ldr	r1, [pc, #272]	; (364 <root+0x130>)
     252:	f001 fa67 	bl	1724 <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     256:	2214      	movs	r2, #20
     258:	2001      	movs	r0, #1
     25a:	4943      	ldr	r1, [pc, #268]	; (368 <root+0x134>)
     25c:	f001 fa26 	bl	16ac <ser_in>
    
    state Run_Blinker:
        runfsm blinker;
     260:	2100      	movs	r1, #0
     262:	4842      	ldr	r0, [pc, #264]	; (36c <root+0x138>)
     264:	f001 f886 	bl	1374 <__pi_fork>

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	2003      	movs	r0, #3
     26a:	4a3f      	ldr	r2, [pc, #252]	; (368 <root+0x134>)
     26c:	4940      	ldr	r1, [pc, #256]	; (370 <root+0x13c>)
     26e:	f001 fa59 	bl	1724 <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     272:	2004      	movs	r0, #4
     274:	493f      	ldr	r1, [pc, #252]	; (374 <root+0x140>)
     276:	aa03      	add	r2, sp, #12
     278:	f001 fa7e 	bl	1778 <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     27c:	f89d 300c 	ldrb.w	r3, [sp, #12]
     280:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     284:	2b41      	cmp	r3, #65	; 0x41
     286:	d15e      	bne.n	346 <root+0x112>
            proceed Adjust_Intervals;
     288:	2005      	movs	r0, #5
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     28a:	f000 febb 	bl	1004 <proceed>
        }

        proceed Show_Menu;
     28e:	2003      	movs	r0, #3
     290:	f000 feb8 	bl	1004 <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	2000      	movs	r0, #0
     296:	4938      	ldr	r1, [pc, #224]	; (378 <root+0x144>)
     298:	f001 fa44 	bl	1724 <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	2232      	movs	r2, #50	; 0x32
     29e:	a903      	add	r1, sp, #12
     2a0:	2006      	movs	r0, #6
     2a2:	f001 fa03 	bl	16ac <ser_in>

        processSettingsInput(settings);
     2a6:	a803      	add	r0, sp, #12
     2a8:	f7ff ff8e 	bl	1c8 <processSettingsInput>

        On = YES;
     2ac:	2301      	movs	r3, #1
     2ae:	4833      	ldr	r0, [pc, #204]	; (37c <root+0x148>)
     2b0:	7003      	strb	r3, [r0, #0]

        trigger(&On);
     2b2:	f000 fecb 	bl	104c <__pi_trigger>

        proceed Show_Menu;
     2b6:	2003      	movs	r0, #3
     2b8:	f000 fea4 	bl	1004 <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	4b30      	ldr	r3, [pc, #192]	; (380 <root+0x14c>)
     2be:	4a31      	ldr	r2, [pc, #196]	; (384 <root+0x150>)
     2c0:	881b      	ldrh	r3, [r3, #0]
     2c2:	2007      	movs	r0, #7
     2c4:	9301      	str	r3, [sp, #4]
     2c6:	4b30      	ldr	r3, [pc, #192]	; (388 <root+0x154>)
     2c8:	4930      	ldr	r1, [pc, #192]	; (38c <root+0x158>)
     2ca:	881b      	ldrh	r3, [r3, #0]
     2cc:	9300      	str	r3, [sp, #0]
     2ce:	4b30      	ldr	r3, [pc, #192]	; (390 <root+0x15c>)
     2d0:	8812      	ldrh	r2, [r2, #0]
     2d2:	881b      	ldrh	r3, [r3, #0]
     2d4:	f001 fa26 	bl	1724 <ser_outf>
            redOff,
            greenOn,
            greenOff
        );

        proceed Show_Menu;
     2d8:	2003      	movs	r0, #3
     2da:	f000 fe93 	bl	1004 <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2de:	2008      	movs	r0, #8
     2e0:	492c      	ldr	r1, [pc, #176]	; (394 <root+0x160>)
     2e2:	f001 fa1f 	bl	1724 <ser_outf>
        displayCycle = YES;
     2e6:	2201      	movs	r2, #1
     2e8:	4b2b      	ldr	r3, [pc, #172]	; (398 <root+0x164>)
     2ea:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	2009      	movs	r0, #9
     2ee:	4921      	ldr	r1, [pc, #132]	; (374 <root+0x140>)
     2f0:	aa03      	add	r2, sp, #12
     2f2:	f001 fa41 	bl	1778 <ser_inf>
        
        if(ch == 'S' || ch == 's'){
     2f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
     2fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     2fe:	2b53      	cmp	r3, #83	; 0x53
     300:	d105      	bne.n	30e <root+0xda>
            displayCycle = NO;
     302:	2200      	movs	r2, #0
     304:	4b24      	ldr	r3, [pc, #144]	; (398 <root+0x164>)
            proceed Show_Menu;
     306:	2003      	movs	r0, #3
            displayCycle = NO;
     308:	701a      	strb	r2, [r3, #0]
            proceed Show_Menu;
     30a:	f000 fe7b 	bl	1004 <proceed>
        }
        
        proceed Monitor;
     30e:	2008      	movs	r0, #8
     310:	f000 fe78 	bl	1004 <proceed>
     314:	2380      	movs	r3, #128	; 0x80
     316:	4821      	ldr	r0, [pc, #132]	; (39c <root+0x168>)
     318:	6003      	str	r3, [r0, #0]

    state Stop:
        leds(1, 0);
     31a:	4b21      	ldr	r3, [pc, #132]	; (3a0 <root+0x16c>)
     31c:	781a      	ldrb	r2, [r3, #0]
     31e:	7819      	ldrb	r1, [r3, #0]
     320:	0912      	lsrs	r2, r2, #4
     322:	f002 020d 	and.w	r2, r2, #13
     326:	f362 1107 	bfi	r1, r2, #4, #4
     32a:	2240      	movs	r2, #64	; 0x40
     32c:	7019      	strb	r1, [r3, #0]
     32e:	6002      	str	r2, [r0, #0]
        leds(0, 0);
     330:	781a      	ldrb	r2, [r3, #0]
     332:	7819      	ldrb	r1, [r3, #0]
     334:	0912      	lsrs	r2, r2, #4
     336:	f002 020e 	and.w	r2, r2, #14
     33a:	f362 1107 	bfi	r1, r2, #4, #4
     33e:	7019      	strb	r1, [r3, #0]
     340:	b011      	add	sp, #68	; 0x44
     342:	f85d fb04 	ldr.w	pc, [sp], #4
        } else if (choice == 'S' || choice == 's') {
     346:	2b53      	cmp	r3, #83	; 0x53
     348:	d101      	bne.n	34e <root+0x11a>
            proceed Stop;
     34a:	200a      	movs	r0, #10
     34c:	e79d      	b.n	28a <root+0x56>
        } else if (choice == 'V' || choice == 'v') {
     34e:	2b56      	cmp	r3, #86	; 0x56
     350:	d101      	bne.n	356 <root+0x122>
            proceed View_Settings;
     352:	2007      	movs	r0, #7
     354:	e799      	b.n	28a <root+0x56>
        } else if (choice == 'M' || choice == 'm') {
     356:	2b4d      	cmp	r3, #77	; 0x4d
     358:	d199      	bne.n	28e <root+0x5a>
            proceed Monitor;
     35a:	2008      	movs	r0, #8
     35c:	e795      	b.n	28a <root+0x56>
     35e:	f000 fde3 	bl	f28 <__pi_badstate>
     362:	e7ed      	b.n	340 <root+0x10c>
     364:	00002b5c 	andeq	r2, r0, ip, asr fp
     368:	20000020 	andcs	r0, r0, r0, lsr #32
     36c:	000000c9 	andeq	r0, r0, r9, asr #1
     370:	00002b6e 	andeq	r2, r0, lr, ror #22
     374:	00002bff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
     378:	00002c02 	andeq	r2, r0, r2, lsl #24
     37c:	20000004 	andcs	r0, r0, r4
     380:	20000006 	andcs	r0, r0, r6
     384:	2000001e 	andcs	r0, r0, lr, lsl r0
     388:	20000008 	andcs	r0, r0, r8
     38c:	00002c35 	andeq	r2, r0, r5, lsr ip
     390:	2000001c 	andcs	r0, r0, ip, lsl r0
     394:	00002c70 	andeq	r2, r0, r0, ror ip
     398:	20000005 	andcs	r0, r0, r5
     39c:	400220a0 	andmi	r2, r2, r0, lsr #1
     3a0:	20000084 	andcs	r0, r0, r4, lsl #1

000003a4 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     3a4:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     3a6:	4801      	ldr	r0, [pc, #4]	; (3ac <devinit_uart+0x8>)
     3a8:	f000 bebc 	b.w	1124 <adddevfunc>
     3ac:	000006f1 	strdeq	r0, [r0], -r1

000003b0 <udelay>:
void udelay (volatile word n) {
     3b0:	b082      	sub	sp, #8
     3b2:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     3b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3ba:	b29b      	uxth	r3, r3
     3bc:	b90b      	cbnz	r3, 3c2 <udelay+0x12>
}
     3be:	b002      	add	sp, #8
     3c0:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     3c2:	2304      	movs	r3, #4
	while (n--);
     3c4:	461a      	mov	r2, r3
     3c6:	3b01      	subs	r3, #1
     3c8:	b29b      	uxth	r3, r3
     3ca:	2a00      	cmp	r2, #0
     3cc:	d1fa      	bne.n	3c4 <udelay+0x14>
		n--;
     3ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3d2:	3b01      	subs	r3, #1
     3d4:	b29b      	uxth	r3, r3
     3d6:	f8ad 3006 	strh.w	r3, [sp, #6]
     3da:	e7ec      	b.n	3b6 <udelay+0x6>

000003dc <mdelay>:
void mdelay (volatile word n) {
     3dc:	b507      	push	{r0, r1, r2, lr}
     3de:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     3e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3e6:	b29b      	uxth	r3, r3
     3e8:	b913      	cbnz	r3, 3f0 <mdelay+0x14>
}
     3ea:	b003      	add	sp, #12
     3ec:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     3f0:	f240 30e7 	movw	r0, #999	; 0x3e7
     3f4:	f7ff ffdc 	bl	3b0 <udelay>
		n--;
     3f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3fc:	3b01      	subs	r3, #1
     3fe:	b29b      	uxth	r3, r3
     400:	f8ad 3006 	strh.w	r3, [sp, #6]
     404:	e7ed      	b.n	3e2 <mdelay+0x6>
	...

00000408 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     408:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     40a:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     40c:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     40e:	d505      	bpl.n	41c <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     410:	4b0a      	ldr	r3, [pc, #40]	; (43c <__pi_ondomain+0x34>)
     412:	78da      	ldrb	r2, [r3, #3]
     414:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     416:	bf84      	itt	hi
     418:	2201      	movhi	r2, #1
     41a:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     41c:	4d08      	ldr	r5, [pc, #32]	; (440 <__pi_ondomain+0x38>)
     41e:	4620      	mov	r0, r4
     420:	682b      	ldr	r3, [r5, #0]
     422:	695b      	ldr	r3, [r3, #20]
     424:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     426:	682b      	ldr	r3, [r5, #0]
     428:	4620      	mov	r0, r4
     42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     42c:	4798      	blx	r3
     42e:	2801      	cmp	r0, #1
     430:	d1f9      	bne.n	426 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     432:	4b02      	ldr	r3, [pc, #8]	; (43c <__pi_ondomain+0x34>)
     434:	6858      	ldr	r0, [r3, #4]
     436:	4304      	orrs	r4, r0
     438:	605c      	str	r4, [r3, #4]
}
     43a:	bd38      	pop	{r3, r4, r5, pc}
     43c:	20000084 	andcs	r0, r0, r4, lsl #1
     440:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000444 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     444:	460a      	mov	r2, r1
     446:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     448:	4601      	mov	r1, r0
     44a:	480f      	ldr	r0, [pc, #60]	; (488 <__pi_syserror+0x44>)
     44c:	f000 ffb8 	bl	13c0 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     450:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     452:	2540      	movs	r5, #64	; 0x40
     454:	462f      	mov	r7, r5
     456:	4e0d      	ldr	r6, [pc, #52]	; (48c <__pi_syserror+0x48>)
     458:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     45a:	490d      	ldr	r1, [pc, #52]	; (490 <__pi_syserror+0x4c>)
     45c:	6037      	str	r7, [r6, #0]
     45e:	6034      	str	r4, [r6, #0]
     460:	780b      	ldrb	r3, [r1, #0]
     462:	780b      	ldrb	r3, [r1, #0]
     464:	20c8      	movs	r0, #200	; 0xc8
     466:	f36f 1307 	bfc	r3, #4, #4
     46a:	700b      	strb	r3, [r1, #0]
     46c:	f7ff ffb6 	bl	3dc <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	4b08      	ldr	r3, [pc, #32]	; (494 <__pi_syserror+0x50>)
     472:	20c8      	movs	r0, #200	; 0xc8
     474:	601d      	str	r5, [r3, #0]
     476:	601c      	str	r4, [r3, #0]
     478:	780b      	ldrb	r3, [r1, #0]
     47a:	780b      	ldrb	r3, [r1, #0]
     47c:	f36f 1307 	bfc	r3, #4, #4
     480:	700b      	strb	r3, [r1, #0]
     482:	f7ff ffab 	bl	3dc <mdelay>
	while (1) {
     486:	e7e7      	b.n	458 <__pi_syserror+0x14>
     488:	00002c8c 	andeq	r2, r0, ip, lsl #25
     48c:	40022090 	mulmi	r2, r0, r0
     490:	20000084 	andcs	r0, r0, r4, lsl #1
     494:	400220a0 	andmi	r2, r2, r0, lsr #1

00000498 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     498:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     49a:	4b0a      	ldr	r3, [pc, #40]	; (4c4 <tci_run_delay_timer+0x2c>)
     49c:	881c      	ldrh	r4, [r3, #0]
     49e:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <tci_run_delay_timer+0x30>)
     4a0:	8818      	ldrh	r0, [r3, #0]
     4a2:	4b0a      	ldr	r3, [pc, #40]	; (4cc <tci_run_delay_timer+0x34>)
     4a4:	1b00      	subs	r0, r0, r4
     4a6:	b284      	uxth	r4, r0
     4a8:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4aa:	f001 fd8b 	bl	1fc4 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     4ae:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4b0:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4b2:	4b07      	ldr	r3, [pc, #28]	; (4d0 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     4b8:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	6018      	str	r0, [r3, #0]
	sti_tim;
     4be:	4b05      	ldr	r3, [pc, #20]	; (4d4 <tci_run_delay_timer+0x3c>)
     4c0:	601a      	str	r2, [r3, #0]
}
     4c2:	bd10      	pop	{r4, pc}
     4c4:	20000082 	andcs	r0, r0, r2, lsl #1
     4c8:	20000080 	andcs	r0, r0, r0, lsl #1
     4cc:	20000034 	andcs	r0, r0, r4, lsr r0
     4d0:	40092018 	andmi	r2, r9, r8, lsl r0
     4d4:	43240280 			; <UNDEFINED> instruction: 0x43240280

000004d8 <tci_run_auxiliary_timer>:
	cli_aux;
     4d8:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     4da:	b510      	push	{r4, lr}
	cli_aux;
     4dc:	4c06      	ldr	r4, [pc, #24]	; (4f8 <tci_run_auxiliary_timer+0x20>)
     4de:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	f001 fd70 	bl	1fc4 <NOROM_AONRTCCurrent64BitValueGet>
     4e4:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     4e6:	4b05      	ldr	r3, [pc, #20]	; (4fc <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     4ec:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     4ee:	6018      	str	r0, [r3, #0]
	sti_aux;
     4f0:	2301      	movs	r3, #1
     4f2:	6023      	str	r3, [r4, #0]
}
     4f4:	bd10      	pop	{r4, pc}
     4f6:	bf00      	nop
     4f8:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     4fc:	40092020 	andmi	r2, r9, r0, lsr #32

00000500 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     500:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     502:	4b3b      	ldr	r3, [pc, #236]	; (5f0 <AONRTCIntHandler+0xf0>)
     504:	6818      	ldr	r0, [r3, #0]
     506:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     50a:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     50e:	d542      	bpl.n	596 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     510:	4b38      	ldr	r3, [pc, #224]	; (5f4 <AONRTCIntHandler+0xf4>)
     512:	6819      	ldr	r1, [r3, #0]
     514:	2900      	cmp	r1, #0
     516:	d053      	beq.n	5c0 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     518:	880a      	ldrh	r2, [r1, #0]
     51a:	2a00      	cmp	r2, #0
     51c:	d04e      	beq.n	5bc <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     51e:	3a01      	subs	r2, #1
     520:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     522:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     524:	685c      	ldr	r4, [r3, #4]
     526:	b194      	cbz	r4, 54e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     528:	8821      	ldrh	r1, [r4, #0]
     52a:	b111      	cbz	r1, 532 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     52c:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     52e:	3901      	subs	r1, #1
     530:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     532:	689c      	ldr	r4, [r3, #8]
     534:	b15c      	cbz	r4, 54e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     536:	8821      	ldrh	r1, [r4, #0]
     538:	b111      	cbz	r1, 540 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     53a:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     53c:	3901      	subs	r1, #1
     53e:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     540:	68d9      	ldr	r1, [r3, #12]
     542:	b121      	cbz	r1, 54e <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     544:	880b      	ldrh	r3, [r1, #0]
     546:	b113      	cbz	r3, 54e <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     548:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     54a:	3b01      	subs	r3, #1
     54c:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     54e:	4b2a      	ldr	r3, [pc, #168]	; (5f8 <AONRTCIntHandler+0xf8>)
     550:	7819      	ldrb	r1, [r3, #0]
     552:	0909      	lsrs	r1, r1, #4
     554:	d047      	beq.n	5e6 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     556:	7859      	ldrb	r1, [r3, #1]
     558:	1c4a      	adds	r2, r1, #1
     55a:	b2d2      	uxtb	r2, r2
     55c:	705a      	strb	r2, [r3, #1]
     55e:	b9d1      	cbnz	r1, 596 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     560:	781a      	ldrb	r2, [r3, #0]
     562:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     566:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     568:	d02c      	beq.n	5c4 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     56a:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	bf42      	ittt	mi
     56e:	2140      	movmi	r1, #64	; 0x40
     570:	4a22      	ldrmi	r2, [pc, #136]	; (5fc <AONRTCIntHandler+0xfc>)
     572:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     574:	781a      	ldrb	r2, [r3, #0]
     576:	0692      	lsls	r2, r2, #26
     578:	bf42      	ittt	mi
     57a:	2180      	movmi	r1, #128	; 0x80
     57c:	4a1f      	ldrmi	r2, [pc, #124]	; (5fc <AONRTCIntHandler+0xfc>)
     57e:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     580:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     582:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     584:	781a      	ldrb	r2, [r3, #0]
     586:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     58a:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     58c:	781a      	ldrb	r2, [r3, #0]
     58e:	0752      	lsls	r2, r2, #29
     590:	d501      	bpl.n	596 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     592:	22c8      	movs	r2, #200	; 0xc8
     594:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     596:	07c3      	lsls	r3, r0, #31
     598:	d50f      	bpl.n	5ba <AONRTCIntHandler+0xba>
		cli_tim;
     59a:	2100      	movs	r1, #0
     59c:	4b18      	ldr	r3, [pc, #96]	; (600 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     59e:	4a19      	ldr	r2, [pc, #100]	; (604 <AONRTCIntHandler+0x104>)
     5a0:	4819      	ldr	r0, [pc, #100]	; (608 <AONRTCIntHandler+0x108>)
		cli_tim;
     5a2:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     5a4:	8803      	ldrh	r3, [r0, #0]
     5a6:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     5a8:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     5aa:	4423      	add	r3, r4
		RISE_N_SHINE;
     5ac:	4a12      	ldr	r2, [pc, #72]	; (5f8 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     5ae:	b29b      	uxth	r3, r3
     5b0:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     5b2:	7813      	ldrb	r3, [r2, #0]
     5b4:	f043 0302 	orr.w	r3, r3, #2
     5b8:	7013      	strb	r3, [r2, #0]
}
     5ba:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     5bc:	2201      	movs	r2, #1
     5be:	e7b1      	b.n	524 <AONRTCIntHandler+0x24>
     5c0:	2201      	movs	r2, #1
     5c2:	e7c4      	b.n	54e <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     5c4:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c6:	bf42      	ittt	mi
     5c8:	2140      	movmi	r1, #64	; 0x40
     5ca:	4a10      	ldrmi	r2, [pc, #64]	; (60c <AONRTCIntHandler+0x10c>)
     5cc:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     5ce:	781a      	ldrb	r2, [r3, #0]
     5d0:	0691      	lsls	r1, r2, #26
     5d2:	bf42      	ittt	mi
     5d4:	2180      	movmi	r1, #128	; 0x80
     5d6:	4a0d      	ldrmi	r2, [pc, #52]	; (60c <AONRTCIntHandler+0x10c>)
     5d8:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     5da:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     5dc:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     5de:	781a      	ldrb	r2, [r3, #0]
     5e0:	f042 0208 	orr.w	r2, r2, #8
     5e4:	e7d1      	b.n	58a <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     5e6:	2a00      	cmp	r2, #0
     5e8:	d0d5      	beq.n	596 <AONRTCIntHandler+0x96>
			cli_aux;
     5ea:	4b09      	ldr	r3, [pc, #36]	; (610 <AONRTCIntHandler+0x110>)
     5ec:	6019      	str	r1, [r3, #0]
     5ee:	e7d2      	b.n	596 <AONRTCIntHandler+0x96>
     5f0:	40092004 	andmi	r2, r9, r4
     5f4:	20000090 	mulcs	r0, r0, r0
     5f8:	20000084 	andcs	r0, r0, r4, lsl #1
     5fc:	40022090 	mulmi	r2, r0, r0
     600:	43240280 			; <UNDEFINED> instruction: 0x43240280
     604:	20000034 	andcs	r0, r0, r4, lsr r0
     608:	2000008c 	andcs	r0, r0, ip, lsl #1
     60c:	400220a0 	andmi	r2, r2, r0, lsr #1
     610:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000614 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     616:	2600      	movs	r6, #0
     618:	4b0e      	ldr	r3, [pc, #56]	; (654 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     61a:	4f0f      	ldr	r7, [pc, #60]	; (658 <tci_update_delay_ticks+0x44>)
	cli_tim;
     61c:	601e      	str	r6, [r3, #0]
	if (setdel) {
     61e:	883d      	ldrh	r5, [r7, #0]
     620:	b19d      	cbz	r5, 64a <tci_update_delay_ticks+0x36>
		if (force) {
     622:	b1a0      	cbz	r0, 64e <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	4b0d      	ldr	r3, [pc, #52]	; (65c <tci_update_delay_ticks+0x48>)
     626:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	f001 fccc 	bl	1fc4 <NOROM_AONRTCCurrent64BitValueGet>
     62c:	0d80      	lsrs	r0, r0, #22
     62e:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     632:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     636:	b280      	uxth	r0, r0
     638:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     63a:	1b2c      	subs	r4, r5, r4
	return NO;
     63c:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     63e:	4b08      	ldr	r3, [pc, #32]	; (660 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     640:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     642:	881a      	ldrh	r2, [r3, #0]
     644:	4414      	add	r4, r2
     646:	b2a4      	uxth	r4, r4
     648:	801c      	strh	r4, [r3, #0]
}
     64a:	4628      	mov	r0, r5
     64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     64e:	2501      	movs	r5, #1
     650:	601d      	str	r5, [r3, #0]
		return YES;
     652:	e7fa      	b.n	64a <tci_update_delay_ticks+0x36>
     654:	43240280 			; <UNDEFINED> instruction: 0x43240280
     658:	20000034 	andcs	r0, r0, r4, lsr r0
     65c:	40092018 	andmi	r2, r9, r8, lsl r0
     660:	2000008c 	andcs	r0, r0, ip, lsl #1

00000664 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     666:	4e0f      	ldr	r6, [pc, #60]	; (6a4 <__pi_uart_setrate+0x40>)
     668:	4d0f      	ldr	r5, [pc, #60]	; (6a8 <__pi_uart_setrate+0x44>)
     66a:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     66c:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     66e:	68db      	ldr	r3, [r3, #12]
     670:	4628      	mov	r0, r5
     672:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     674:	2264      	movs	r2, #100	; 0x64
     676:	6833      	ldr	r3, [r6, #0]
     678:	4628      	mov	r0, r5
     67a:	4362      	muls	r2, r4
     67c:	685e      	ldr	r6, [r3, #4]
     67e:	490b      	ldr	r1, [pc, #44]	; (6ac <__pi_uart_setrate+0x48>)
     680:	2360      	movs	r3, #96	; 0x60
     682:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	4a0a      	ldr	r2, [pc, #40]	; (6b0 <__pi_uart_setrate+0x4c>)
}
     686:	2001      	movs	r0, #1
     688:	6813      	ldr	r3, [r2, #0]
     68a:	f043 0310 	orr.w	r3, r3, #16
     68e:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	6853      	ldr	r3, [r2, #4]
     692:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     696:	f043 0301 	orr.w	r3, r3, #1
     69a:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     69c:	4b05      	ldr	r3, [pc, #20]	; (6b4 <__pi_uart_setrate+0x50>)
     69e:	801c      	strh	r4, [r3, #0]
}
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	bf00      	nop
     6a4:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     6a8:	40001000 	andmi	r1, r0, r0
     6ac:	02dc6c00 	sbcseq	r6, ip, #0, 24
     6b0:	4000102c 	andmi	r1, r0, ip, lsr #32
     6b4:	20000036 	andcs	r0, r0, r6, lsr r0

000006b8 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	4a08      	ldr	r2, [pc, #32]	; (6dc <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     6ba:	4909      	ldr	r1, [pc, #36]	; (6e0 <reinit_uart+0x28>)
     6bc:	6813      	ldr	r3, [r2, #0]
     6be:	f043 0310 	orr.w	r3, r3, #16
     6c2:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	2212      	movs	r2, #18
     6c6:	4b07      	ldr	r3, [pc, #28]	; (6e4 <reinit_uart+0x2c>)
     6c8:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6ca:	4a07      	ldr	r2, [pc, #28]	; (6e8 <reinit_uart+0x30>)
     6cc:	6813      	ldr	r3, [r2, #0]
     6ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     6d2:	6013      	str	r3, [r2, #0]
     6d4:	4b05      	ldr	r3, [pc, #20]	; (6ec <reinit_uart+0x34>)
     6d6:	8818      	ldrh	r0, [r3, #0]
     6d8:	f7ff bfc4 	b.w	664 <__pi_uart_setrate>
     6dc:	4000102c 	andmi	r1, r0, ip, lsr #32
     6e0:	20000070 	andcs	r0, r0, r0, ror r0
     6e4:	40001034 	andmi	r1, r0, r4, lsr r0
     6e8:	40001030 	andmi	r1, r0, r0, lsr r0
     6ec:	20000036 	andcs	r0, r0, r6, lsr r0

000006f0 <ioreq_uart_a>:
	switch (operation) {
     6f0:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     6f6:	460d      	mov	r5, r1
     6f8:	4614      	mov	r4, r2
     6fa:	2803      	cmp	r0, #3
     6fc:	d86e      	bhi.n	7dc <ioreq_uart_a+0xec>
     6fe:	e8df f000 	tbb	[pc, r0]
     702:	5a471253 	bpl	11c5056 <__ccfg+0x11a50ae>
				*buf++ = uart_a_read;
     706:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     70a:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     70c:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     710:	b11e      	cbz	r6, 71a <ioreq_uart_a+0x2a>
     712:	f8d8 3000 	ldr.w	r3, [r8]
     716:	06d8      	lsls	r0, r3, #27
     718:	d5f5      	bpl.n	706 <ioreq_uart_a+0x16>
			if (len != operation) {
     71a:	42a6      	cmp	r6, r4
     71c:	d00a      	beq.n	734 <ioreq_uart_a+0x44>
				return operation - len;
     71e:	1ba4      	subs	r4, r4, r6
}
     720:	4620      	mov	r0, r4
     722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     726:	4616      	mov	r6, r2
			uart_a_disable_int;
     728:	4f2e      	ldr	r7, [pc, #184]	; (7e4 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     72a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 7f8 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     72e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 7fc <ioreq_uart_a+0x10c>
     732:	e7ed      	b.n	710 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     734:	683b      	ldr	r3, [r7, #0]
     736:	2015      	movs	r0, #21
     738:	695b      	ldr	r3, [r3, #20]
     73a:	4798      	blx	r3
			if (uart_a_char_available) {
     73c:	f8d8 3000 	ldr.w	r3, [r8]
     740:	06d9      	lsls	r1, r3, #27
     742:	d404      	bmi.n	74e <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     744:	683b      	ldr	r3, [r7, #0]
     746:	2015      	movs	r0, #21
     748:	691b      	ldr	r3, [r3, #16]
     74a:	4798      	blx	r3
				goto Redo_rx;
     74c:	e7e0      	b.n	710 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     74e:	4a26      	ldr	r2, [pc, #152]	; (7e8 <ioreq_uart_a+0xf8>)
     750:	7993      	ldrb	r3, [r2, #6]
     752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     756:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     75a:	7193      	strb	r3, [r2, #6]
			return -2;
     75c:	e7e0      	b.n	720 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     75e:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     762:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     764:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     768:	b11e      	cbz	r6, 772 <ioreq_uart_a+0x82>
     76a:	f8d8 3000 	ldr.w	r3, [r8]
     76e:	069a      	lsls	r2, r3, #26
     770:	d5f5      	bpl.n	75e <ioreq_uart_a+0x6e>
			if (len != operation) {
     772:	42a6      	cmp	r6, r4
     774:	d1d3      	bne.n	71e <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     776:	683b      	ldr	r3, [r7, #0]
     778:	2015      	movs	r0, #21
     77a:	695b      	ldr	r3, [r3, #20]
     77c:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     77e:	f8d8 3000 	ldr.w	r3, [r8]
     782:	069b      	lsls	r3, r3, #26
     784:	d40b      	bmi.n	79e <ioreq_uart_a+0xae>
				uart_a_enable_int;
     786:	683b      	ldr	r3, [r7, #0]
     788:	2015      	movs	r0, #21
     78a:	691b      	ldr	r3, [r3, #16]
     78c:	4798      	blx	r3
				goto Redo_tx;
     78e:	e7eb      	b.n	768 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     790:	4616      	mov	r6, r2
			uart_a_disable_int;
     792:	4f14      	ldr	r7, [pc, #80]	; (7e4 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     794:	f8df 8060 	ldr.w	r8, [pc, #96]	; 7f8 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     798:	f8df 9060 	ldr.w	r9, [pc, #96]	; 7fc <ioreq_uart_a+0x10c>
     79c:	e7e4      	b.n	768 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79e:	4a12      	ldr	r2, [pc, #72]	; (7e8 <ioreq_uart_a+0xf8>)
     7a0:	7993      	ldrb	r3, [r2, #6]
     7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7a6:	e7d6      	b.n	756 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     7a8:	4b0e      	ldr	r3, [pc, #56]	; (7e4 <ioreq_uart_a+0xf4>)
     7aa:	2015      	movs	r0, #21
     7ac:	681b      	ldr	r3, [r3, #0]
			return 0;
     7ae:	2400      	movs	r4, #0
			uart_a_enable_int;
     7b0:	691b      	ldr	r3, [r3, #16]
     7b2:	4798      	blx	r3
			return 0;
     7b4:	e7b4      	b.n	720 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     7b6:	2a01      	cmp	r2, #1
     7b8:	d109      	bne.n	7ce <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     7ba:	490b      	ldr	r1, [pc, #44]	; (7e8 <ioreq_uart_a+0xf8>)
     7bc:	8828      	ldrh	r0, [r5, #0]
     7be:	f7ff ff51 	bl	664 <__pi_uart_setrate>
     7c2:	2800      	cmp	r0, #0
     7c4:	d1ac      	bne.n	720 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     7c6:	2003      	movs	r0, #3
     7c8:	4908      	ldr	r1, [pc, #32]	; (7ec <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     7ca:	f7ff fe3b 	bl	444 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     7ce:	2a02      	cmp	r2, #2
     7d0:	d104      	bne.n	7dc <ioreq_uart_a+0xec>
	return urates [0];
     7d2:	4b07      	ldr	r3, [pc, #28]	; (7f0 <ioreq_uart_a+0x100>)
				return 1;
     7d4:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d6:	881b      	ldrh	r3, [r3, #0]
     7d8:	800b      	strh	r3, [r1, #0]
				return 1;
     7da:	e7a1      	b.n	720 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     7dc:	2002      	movs	r0, #2
     7de:	4905      	ldr	r1, [pc, #20]	; (7f4 <ioreq_uart_a+0x104>)
     7e0:	e7f3      	b.n	7ca <ioreq_uart_a+0xda>
     7e2:	bf00      	nop
     7e4:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     7e8:	20000070 	andcs	r0, r0, r0, ror r0
     7ec:	00002c9b 	muleq	r0, fp, ip
     7f0:	20000036 	andcs	r0, r0, r6, lsr r0
     7f4:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     7f8:	40001018 	andmi	r1, r0, r8, lsl r0
     7fc:	40001000 	andmi	r1, r0, r0

00000800 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     804:	b530      	push	{r4, r5, lr}
     806:	4b29      	ldr	r3, [pc, #164]	; (8ac <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	4c29      	ldr	r4, [pc, #164]	; (8b0 <UART0IntHandler+0xb0>)
     80a:	601a      	str	r2, [r3, #0]
     80c:	6822      	ldr	r2, [r4, #0]
     80e:	06d5      	lsls	r5, r2, #27
     810:	d423      	bmi.n	85a <UART0IntHandler+0x5a>
     812:	4b28      	ldr	r3, [pc, #160]	; (8b4 <UART0IntHandler+0xb4>)
     814:	799a      	ldrb	r2, [r3, #6]
     816:	0610      	lsls	r0, r2, #24
     818:	d51f      	bpl.n	85a <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81a:	799a      	ldrb	r2, [r3, #6]
     81c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     820:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     822:	4a25      	ldr	r2, [pc, #148]	; (8b8 <UART0IntHandler+0xb8>)
     824:	7813      	ldrb	r3, [r2, #0]
     826:	f043 0302 	orr.w	r3, r3, #2
     82a:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     82c:	4b23      	ldr	r3, [pc, #140]	; (8bc <UART0IntHandler+0xbc>)
     82e:	681a      	ldr	r2, [r3, #0]
     830:	b19a      	cbz	r2, 85a <UART0IntHandler+0x5a>
     832:	4610      	mov	r0, r2
     834:	2300      	movs	r3, #0
     836:	f830 1b10 	ldrh.w	r1, [r0], #16
     83a:	f001 0107 	and.w	r1, r1, #7
     83e:	4299      	cmp	r1, r3
     840:	dd09      	ble.n	856 <UART0IntHandler+0x56>
     842:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     846:	3301      	adds	r3, #1
     848:	f515 7f81 	cmn.w	r5, #258	; 0x102
     84c:	d1f7      	bne.n	83e <UART0IntHandler+0x3e>
     84e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     852:	889b      	ldrh	r3, [r3, #4]
     854:	8013      	strh	r3, [r2, #0]
     856:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     858:	e7ea      	b.n	830 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85a:	6823      	ldr	r3, [r4, #0]
     85c:	0699      	lsls	r1, r3, #26
     85e:	d424      	bmi.n	8aa <UART0IntHandler+0xaa>
     860:	4b14      	ldr	r3, [pc, #80]	; (8b4 <UART0IntHandler+0xb4>)
     862:	799a      	ldrb	r2, [r3, #6]
     864:	0652      	lsls	r2, r2, #25
     866:	d520      	bpl.n	8aa <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     868:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	799a      	ldrb	r2, [r3, #6]
     86e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     872:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     874:	4a10      	ldr	r2, [pc, #64]	; (8b8 <UART0IntHandler+0xb8>)
     876:	7813      	ldrb	r3, [r2, #0]
     878:	f043 0302 	orr.w	r3, r3, #2
     87c:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     87e:	4b0f      	ldr	r3, [pc, #60]	; (8bc <UART0IntHandler+0xbc>)
     880:	681a      	ldr	r2, [r3, #0]
     882:	b192      	cbz	r2, 8aa <UART0IntHandler+0xaa>
     884:	4610      	mov	r0, r2
     886:	2300      	movs	r3, #0
     888:	f830 1b10 	ldrh.w	r1, [r0], #16
     88c:	f001 0107 	and.w	r1, r1, #7
     890:	4299      	cmp	r1, r3
     892:	dd08      	ble.n	8a6 <UART0IntHandler+0xa6>
     894:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     898:	3301      	adds	r3, #1
     89a:	42a5      	cmp	r5, r4
     89c:	d1f8      	bne.n	890 <UART0IntHandler+0x90>
     89e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8a2:	889b      	ldrh	r3, [r3, #4]
     8a4:	8013      	strh	r3, [r2, #0]
     8a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8a8:	e7eb      	b.n	882 <UART0IntHandler+0x82>
	}

	RTNI;
}
     8aa:	bd30      	pop	{r4, r5, pc}
     8ac:	40001044 	andmi	r1, r0, r4, asr #32
     8b0:	40001018 	andmi	r1, r0, r8, lsl r0
     8b4:	20000070 	andcs	r0, r0, r0, ror r0
     8b8:	20000084 	andcs	r0, r0, r4, lsl #1
     8bc:	20000038 	andcs	r0, r0, r8, lsr r0

000008c0 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     8c6:	4e0c      	ldr	r6, [pc, #48]	; (8f8 <__buttons_setirq+0x38>)
     8c8:	4d0c      	ldr	r5, [pc, #48]	; (8fc <__buttons_setirq+0x3c>)
     8ca:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	4c0c      	ldr	r4, [pc, #48]	; (900 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     8ce:	0a1b      	lsrs	r3, r3, #8
     8d0:	fa01 f203 	lsl.w	r2, r1, r3
     8d4:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8d6:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8da:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     8de:	0a1b      	lsrs	r3, r3, #8
     8e0:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8e2:	01db      	lsls	r3, r3, #7
     8e4:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     8e8:	4322      	orrs	r2, r4
     8ea:	4323      	orrs	r3, r4
     8ec:	6010      	str	r0, [r2, #0]
     8ee:	6029      	str	r1, [r5, #0]
     8f0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     8f2:	b662      	cpsie	i
			val;
	}
	sti;
}
     8f4:	bd70      	pop	{r4, r5, r6, pc}
     8f6:	bf00      	nop
     8f8:	00002d88 	andeq	r2, r0, r8, lsl #27
     8fc:	400220e0 	andmi	r2, r2, r0, ror #1
     900:	42000048 	andmi	r0, r0, #72	; 0x48

00000904 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     904:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     906:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     908:	2200      	movs	r2, #0
     90a:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	4f09      	ldr	r7, [pc, #36]	; (934 <__pinlist_setirq+0x30>)
     90e:	4c0a      	ldr	r4, [pc, #40]	; (938 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	490a      	ldr	r1, [pc, #40]	; (93c <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     912:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     914:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     91a:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     91e:	01db      	lsls	r3, r3, #7
     920:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     924:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     926:	2a04      	cmp	r2, #4
     928:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     92a:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     92c:	d1f1      	bne.n	912 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     92e:	b662      	cpsie	i
			val;
	}
	sti;
}
     930:	bdf0      	pop	{r4, r5, r6, r7, pc}
     932:	bf00      	nop
     934:	00002d84 	andeq	r2, r0, r4, lsl #27
     938:	400220e0 	andmi	r2, r2, r0, ror #1
     93c:	42000048 	andmi	r0, r0, #72	; 0x48

00000940 <GPIOIntHandler>:
void GPIOIntHandler () {
     940:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     942:	4c23      	ldr	r4, [pc, #140]	; (9d0 <GPIOIntHandler+0x90>)
     944:	6822      	ldr	r2, [r4, #0]
     946:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     94a:	d01e      	beq.n	98a <GPIOIntHandler+0x4a>
	buttons_disable ();
     94c:	2000      	movs	r0, #0
     94e:	f7ff ffb7 	bl	8c0 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     952:	4b20      	ldr	r3, [pc, #128]	; (9d4 <GPIOIntHandler+0x94>)
     954:	4d20      	ldr	r5, [pc, #128]	; (9d8 <GPIOIntHandler+0x98>)
     956:	681a      	ldr	r2, [r3, #0]
     958:	b192      	cbz	r2, 980 <GPIOIntHandler+0x40>
     95a:	4610      	mov	r0, r2
     95c:	2300      	movs	r3, #0
     95e:	f830 1b10 	ldrh.w	r1, [r0], #16
     962:	f001 0107 	and.w	r1, r1, #7
     966:	4299      	cmp	r1, r3
     968:	dd08      	ble.n	97c <GPIOIntHandler+0x3c>
     96a:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     96e:	3301      	adds	r3, #1
     970:	42ae      	cmp	r6, r5
     972:	d1f8      	bne.n	966 <GPIOIntHandler+0x26>
     974:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     978:	889b      	ldrh	r3, [r3, #4]
     97a:	8013      	strh	r3, [r2, #0]
     97c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     97e:	e7eb      	b.n	958 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     980:	4a16      	ldr	r2, [pc, #88]	; (9dc <GPIOIntHandler+0x9c>)
     982:	7813      	ldrb	r3, [r2, #0]
     984:	f043 0302 	orr.w	r3, r3, #2
     988:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     98a:	6823      	ldr	r3, [r4, #0]
     98c:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     990:	d01d      	beq.n	9ce <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     992:	4b10      	ldr	r3, [pc, #64]	; (9d4 <GPIOIntHandler+0x94>)
     994:	4c12      	ldr	r4, [pc, #72]	; (9e0 <GPIOIntHandler+0xa0>)
     996:	6818      	ldr	r0, [r3, #0]
     998:	b190      	cbz	r0, 9c0 <GPIOIntHandler+0x80>
     99a:	4601      	mov	r1, r0
     99c:	2300      	movs	r3, #0
     99e:	f831 2b10 	ldrh.w	r2, [r1], #16
     9a2:	f002 0207 	and.w	r2, r2, #7
     9a6:	429a      	cmp	r2, r3
     9a8:	dd08      	ble.n	9bc <GPIOIntHandler+0x7c>
     9aa:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     9ae:	3301      	adds	r3, #1
     9b0:	42a5      	cmp	r5, r4
     9b2:	d1f8      	bne.n	9a6 <GPIOIntHandler+0x66>
     9b4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     9b8:	889b      	ldrh	r3, [r3, #4]
     9ba:	8003      	strh	r3, [r0, #0]
     9bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     9be:	e7eb      	b.n	998 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     9c0:	f7ff ffa0 	bl	904 <__pinlist_setirq>
	RISE_N_SHINE;
     9c4:	4a05      	ldr	r2, [pc, #20]	; (9dc <GPIOIntHandler+0x9c>)
     9c6:	7813      	ldrb	r3, [r2, #0]
     9c8:	f043 0302 	orr.w	r3, r3, #2
     9cc:	7013      	strb	r3, [r2, #0]
}
     9ce:	bd70      	pop	{r4, r5, r6, pc}
     9d0:	400220e0 	andmi	r2, r2, r0, ror #1
     9d4:	20000038 	andcs	r0, r0, r8, lsr r0
     9d8:	00002d88 	andeq	r2, r0, r8, lsl #27
     9dc:	20000084 	andcs	r0, r0, r4, lsl #1
     9e0:	00002d84 	andeq	r2, r0, r4, lsl #27

000009e4 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	4c58      	ldr	r4, [pc, #352]	; (b4c <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ea:	2004      	movs	r0, #4
     9ec:	f7ff fd0c 	bl	408 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	6823      	ldr	r3, [r4, #0]
     9f2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     9f6:	69db      	ldr	r3, [r3, #28]
     9f8:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fa:	6823      	ldr	r3, [r4, #0]
     9fc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a02:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	6823      	ldr	r3, [r4, #0]
     a06:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a0c:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a0e:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	2600      	movs	r6, #0
     a12:	4c4f      	ldr	r4, [pc, #316]	; (b50 <system_init+0x16c>)
     a14:	4f4f      	ldr	r7, [pc, #316]	; (b54 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a16:	f8df c17c 	ldr.w	ip, [pc, #380]	; b94 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1a:	f8df e17c 	ldr.w	lr, [pc, #380]	; b98 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a1e:	f8df 8140 	ldr.w	r8, [pc, #320]	; b60 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a22:	f8df 9134 	ldr.w	r9, [pc, #308]	; b58 <system_init+0x174>
     a26:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     a2e:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a32:	0091      	lsls	r1, r2, #2
     a34:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     a38:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     a3c:	ea05 0a0c 	and.w	sl, r5, ip
     a40:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     a44:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a46:	bf44      	itt	mi
     a48:	ea41 010e 	orrmi.w	r1, r1, lr
     a4c:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     a4e:	fa03 f202 	lsl.w	r2, r3, r2
     a52:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	bf4c      	ite	mi
     a56:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5a:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a5e:	2e11      	cmp	r6, #17
     a60:	d1e2      	bne.n	a28 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a62:	2540      	movs	r5, #64	; 0x40
     a64:	2680      	movs	r6, #128	; 0x80
     a66:	4b3c      	ldr	r3, [pc, #240]	; (b58 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     a68:	493c      	ldr	r1, [pc, #240]	; (b5c <system_init+0x178>)
     a6a:	601d      	str	r5, [r3, #0]
     a6c:	601e      	str	r6, [r3, #0]
     a6e:	780b      	ldrb	r3, [r1, #0]
     a70:	780b      	ldrb	r3, [r1, #0]
     a72:	20c8      	movs	r0, #200	; 0xc8
     a74:	f36f 1307 	bfc	r3, #4, #4
     a78:	700b      	strb	r3, [r1, #0]
     a7a:	f7ff fcaf 	bl	3dc <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a7e:	4b38      	ldr	r3, [pc, #224]	; (b60 <system_init+0x17c>)
     a80:	20c8      	movs	r0, #200	; 0xc8
     a82:	601d      	str	r5, [r3, #0]
     a84:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a86:	2601      	movs	r6, #1
	all_leds_blink;
     a88:	780b      	ldrb	r3, [r1, #0]
     a8a:	780b      	ldrb	r3, [r1, #0]
     a8c:	f36f 1307 	bfc	r3, #4, #4
     a90:	700b      	strb	r3, [r1, #0]
     a92:	f7ff fca3 	bl	3dc <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     a96:	4b33      	ldr	r3, [pc, #204]	; (b64 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	4a33      	ldr	r2, [pc, #204]	; (b68 <system_init+0x184>)
     a9a:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	4b33      	ldr	r3, [pc, #204]	; (b6c <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     a9e:	4d34      	ldr	r5, [pc, #208]	; (b70 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     aa0:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aa2:	4b34      	ldr	r3, [pc, #208]	; (b74 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     aa4:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aa6:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     aa8:	682b      	ldr	r3, [r5, #0]
     aaa:	691b      	ldr	r3, [r3, #16]
     aac:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     aae:	f000 fb99 	bl	11e4 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     ab2:	682b      	ldr	r3, [r5, #0]
     ab4:	2010      	movs	r0, #16
     ab6:	691b      	ldr	r3, [r3, #16]
     ab8:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     aba:	2002      	movs	r0, #2
     abc:	f7ff fca4 	bl	408 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	68ab      	ldr	r3, [r5, #8]
     ac2:	f44f 7000 	mov.w	r0, #512	; 0x200
     ac6:	69db      	ldr	r3, [r3, #28]
     ac8:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     aca:	68ab      	ldr	r3, [r5, #8]
     acc:	f44f 7000 	mov.w	r0, #512	; 0x200
     ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ad2:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	68ab      	ldr	r3, [r5, #8]
     ad6:	f44f 7000 	mov.w	r0, #512	; 0x200
     ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     adc:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     ade:	2260      	movs	r2, #96	; 0x60
     ae0:	4b25      	ldr	r3, [pc, #148]	; (b78 <system_init+0x194>)
     ae2:	6026      	str	r6, [r4, #0]
     ae4:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     ae6:	f7ff fde7 	bl	6b8 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     aea:	f000 fdcb 	bl	1684 <ee_open>
     aee:	f000 fdd3 	bl	1698 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af2:	f001 ff63 	bl	29bc <NOROM_SysCtrlResetSourceGet>
     af6:	2808      	cmp	r0, #8
     af8:	d11a      	bne.n	b30 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     afa:	4b20      	ldr	r3, [pc, #128]	; (b7c <system_init+0x198>)
     afc:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     afe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b02:	3b04      	subs	r3, #4
     b04:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     b0a:	3324      	adds	r3, #36	; 0x24
     b0c:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     b0e:	2000      	movs	r0, #0
     b10:	f7ff fc48 	bl	3a4 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	4a1a      	ldr	r2, [pc, #104]	; (b80 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     b16:	2015      	movs	r0, #21
     b18:	6813      	ldr	r3, [r2, #0]
     b1a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     b1e:	6013      	str	r3, [r2, #0]
     b20:	4b13      	ldr	r3, [pc, #76]	; (b70 <system_init+0x18c>)
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	691b      	ldr	r3, [r3, #16]
     b26:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     b28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     b2c:	f7ff bcd4 	b.w	4d8 <tci_run_auxiliary_timer>
		diag ("");
     b30:	4814      	ldr	r0, [pc, #80]	; (b84 <system_init+0x1a0>)
     b32:	f000 fc45 	bl	13c0 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b36:	4814      	ldr	r0, [pc, #80]	; (b88 <system_init+0x1a4>)
     b38:	f000 fc42 	bl	13c0 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	4913      	ldr	r1, [pc, #76]	; (b8c <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     b3e:	4814      	ldr	r0, [pc, #80]	; (b90 <system_init+0x1ac>)
     b40:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     b44:	b289      	uxth	r1, r1
     b46:	f000 fc3b 	bl	13c0 <diag>
     b4a:	e7e0      	b.n	b0e <system_init+0x12a>
     b4c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     b50:	60082028 	andvs	r2, r8, r8, lsr #32
     b54:	00002d0c 	andeq	r2, r0, ip, lsl #26
     b58:	40022090 	mulmi	r2, r0, r0
     b5c:	20000084 	andcs	r0, r0, r4, lsl #1
     b60:	400220a0 	andmi	r2, r2, r0, lsr #1
     b64:	40092024 	andmi	r2, r9, r4, lsr #32
     b68:	00050003 	andeq	r0, r5, r3
     b6c:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     b70:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     b74:	40092000 	andmi	r2, r9, r0
     b78:	20000036 	andcs	r0, r0, r6, lsr r0
     b7c:	4009400c 	andmi	r4, r9, ip
     b80:	40001038 	andmi	r1, r0, r8, lsr r0
     b84:	00002c6f 	andeq	r2, r0, pc, ror #24
     b88:	00002ca3 	andeq	r2, r0, r3, lsr #25
     b8c:	200000a4 	andcs	r0, r0, r4, lsr #1
     b90:	00002cef 	andeq	r2, r0, pc, ror #25
     b94:	7f077f3f 	svcvc	0x00077f3f
     b98:	42441a00 	submi	r1, r4, #0, 20

00000b9c <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     b9c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     ba0:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba2:	4b79      	ldr	r3, [pc, #484]	; (d88 <__pi_release+0x1ec>)
     ba4:	af00      	add	r7, sp, #0
     ba6:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     baa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     bae:	681a      	ldr	r2, [r3, #0]
     bb0:	4b76      	ldr	r3, [pc, #472]	; (d8c <__pi_release+0x1f0>)
     bb2:	429a      	cmp	r2, r3
     bb4:	d127      	bne.n	c06 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bb6:	4e76      	ldr	r6, [pc, #472]	; (d90 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     bb8:	2100      	movs	r1, #0
     bba:	f64f 70ff 	movw	r0, #65535	; 0xffff
     bbe:	f000 f9bb 	bl	f38 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     bc2:	4a74      	ldr	r2, [pc, #464]	; (d94 <__pi_release+0x1f8>)
     bc4:	4b74      	ldr	r3, [pc, #464]	; (d98 <__pi_release+0x1fc>)
     bc6:	6812      	ldr	r2, [r2, #0]
     bc8:	601a      	str	r2, [r3, #0]
     bca:	681a      	ldr	r2, [r3, #0]
     bcc:	b9fa      	cbnz	r2, c0e <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     bce:	4c73      	ldr	r4, [pc, #460]	; (d9c <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     bd2:	4d73      	ldr	r5, [pc, #460]	; (da0 <__pi_release+0x204>)
     bd4:	782b      	ldrb	r3, [r5, #0]
     bd6:	f3c3 0240 	ubfx	r2, r3, #1, #1
     bda:	0798      	lsls	r0, r3, #30
     bdc:	607a      	str	r2, [r7, #4]
     bde:	f100 80cd 	bmi.w	d7c <__pi_release+0x1e0>
	system_event_count ++;
     be2:	4a70      	ldr	r2, [pc, #448]	; (da4 <__pi_release+0x208>)
     be4:	6813      	ldr	r3, [r2, #0]
     be6:	3301      	adds	r3, #1
     be8:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     bea:	78ea      	ldrb	r2, [r5, #3]
     bec:	2a01      	cmp	r2, #1
     bee:	b2d3      	uxtb	r3, r2
     bf0:	d017      	beq.n	c22 <__pi_release+0x86>
     bf2:	2b02      	cmp	r3, #2
     bf4:	d031      	beq.n	c5a <__pi_release+0xbe>
     bf6:	2b00      	cmp	r3, #0
     bf8:	f040 8095 	bne.w	d26 <__pi_release+0x18a>
			__WFI ();
     bfc:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     bfe:	b662      	cpsie	i
     c00:	bf00      	nop
     c02:	bf00      	nop
     c04:	e7e4      	b.n	bd0 <__pi_release+0x34>
	check_stack_overflow;
     c06:	200b      	movs	r0, #11
     c08:	4967      	ldr	r1, [pc, #412]	; (da8 <__pi_release+0x20c>)
     c0a:	f7ff fc1b 	bl	444 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c0e:	6851      	ldr	r1, [r2, #4]
     c10:	b129      	cbz	r1, c1e <__pi_release+0x82>
     c12:	8810      	ldrh	r0, [r2, #0]
     c14:	0704      	lsls	r4, r0, #28
     c16:	d102      	bne.n	c1e <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	0900      	lsrs	r0, r0, #4
     c1a:	4788      	blx	r1
			goto Redo;
     c1c:	e7cc      	b.n	bb8 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     c1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     c20:	e7d2      	b.n	bc8 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c22:	4a62      	ldr	r2, [pc, #392]	; (dac <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c26:	6813      	ldr	r3, [r2, #0]
     c28:	f043 0301 	orr.w	r3, r3, #1
     c2c:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c2e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     c32:	f043 0303 	orr.w	r3, r3, #3
     c36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3a:	4b5d      	ldr	r3, [pc, #372]	; (db0 <__pi_release+0x214>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	699b      	ldr	r3, [r3, #24]
     c40:	4798      	blx	r3
     c42:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	6823      	ldr	r3, [r4, #0]
     c46:	f043 0304 	orr.w	r3, r3, #4
     c4a:	6023      	str	r3, [r4, #0]
			__WFI ();
     c4c:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c4e:	6823      	ldr	r3, [r4, #0]
     c50:	f023 0304 	bic.w	r3, r3, #4
     c54:	6023      	str	r3, [r4, #0]
     c56:	6833      	ldr	r3, [r6, #0]
}
     c58:	e7d1      	b.n	bfe <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5a:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c5e:	687a      	ldr	r2, [r7, #4]
     c60:	4b54      	ldr	r3, [pc, #336]	; (db4 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c62:	f8df b188 	ldr.w	fp, [pc, #392]	; dec <__pi_release+0x250>
     c66:	601a      	str	r2, [r3, #0]
     c68:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6a:	f8df a144 	ldr.w	sl, [pc, #324]	; db0 <__pi_release+0x214>
     c6e:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c72:	6833      	ldr	r3, [r6, #0]
     c74:	4b50      	ldr	r3, [pc, #320]	; (db8 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c76:	f8df 9178 	ldr.w	r9, [pc, #376]	; df0 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7a:	f8c3 8000 	str.w	r8, [r3]
     c7e:	6868      	ldr	r0, [r5, #4]
     c80:	f8da 3000 	ldr.w	r3, [sl]
     c84:	f040 0020 	orr.w	r0, r0, #32
     c88:	699b      	ldr	r3, [r3, #24]
     c8a:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	4b4b      	ldr	r3, [pc, #300]	; (dbc <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c8e:	2103      	movs	r1, #3
     c90:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	f8d9 3000 	ldr.w	r3, [r9]
     c98:	4849      	ldr	r0, [pc, #292]	; (dc0 <__pi_release+0x224>)
     c9a:	f023 0303 	bic.w	r3, r3, #3
     c9e:	f8c9 3000 	str.w	r3, [r9]
     ca2:	4b48      	ldr	r3, [pc, #288]	; (dc4 <__pi_release+0x228>)
     ca4:	681a      	ldr	r2, [r3, #0]
     ca6:	6852      	ldr	r2, [r2, #4]
     ca8:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     caa:	6878      	ldr	r0, [r7, #4]
     cac:	f001 fd46 	bl	273c <NOROM_SysCtrlSetRechargeBeforePowerDown>
     cb0:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb2:	6822      	ldr	r2, [r4, #0]
     cb4:	f042 0204 	orr.w	r2, r2, #4
     cb8:	6022      	str	r2, [r4, #0]
			__WFI ();
     cba:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cbe:	4b41      	ldr	r3, [pc, #260]	; (dc4 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cc0:	f022 0204 	bic.w	r2, r2, #4
     cc4:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	4641      	mov	r1, r8
     cca:	685b      	ldr	r3, [r3, #4]
     ccc:	483c      	ldr	r0, [pc, #240]	; (dc0 <__pi_release+0x224>)
     cce:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	4a3c      	ldr	r2, [pc, #240]	; (dc8 <__pi_release+0x22c>)
     cd6:	f043 0303 	orr.w	r3, r3, #3
     cda:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cde:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     ce2:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     ce4:	0699      	lsls	r1, r3, #26
     ce6:	d5fc      	bpl.n	ce2 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	f8da 3000 	ldr.w	r3, [sl]
     cec:	6868      	ldr	r0, [r5, #4]
     cee:	695b      	ldr	r3, [r3, #20]
     cf0:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf2:	4d2f      	ldr	r5, [pc, #188]	; (db0 <__pi_release+0x214>)
     cf4:	4b2a      	ldr	r3, [pc, #168]	; (da0 <__pi_release+0x204>)
     cf6:	6858      	ldr	r0, [r3, #4]
     cf8:	682b      	ldr	r3, [r5, #0]
     cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     cfc:	4798      	blx	r3
     cfe:	2801      	cmp	r0, #1
     d00:	d1f8      	bne.n	cf4 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d02:	4b2d      	ldr	r3, [pc, #180]	; (db8 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	4a2d      	ldr	r2, [pc, #180]	; (dbc <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d06:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d08:	2300      	movs	r3, #0
     d0a:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	4b29      	ldr	r3, [pc, #164]	; (db4 <__pi_release+0x218>)
     d0e:	6018      	str	r0, [r3, #0]
     d10:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     d12:	f001 fe23 	bl	295c <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     d16:	f7ff fccf 	bl	6b8 <reinit_uart>
     d1a:	4a2c      	ldr	r2, [pc, #176]	; (dcc <__pi_release+0x230>)
     d1c:	6813      	ldr	r3, [r2, #0]
     d1e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     d22:	6013      	str	r3, [r2, #0]
}
     d24:	e76b      	b.n	bfe <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d26:	4b2a      	ldr	r3, [pc, #168]	; (dd0 <__pi_release+0x234>)
     d28:	2001      	movs	r0, #1
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	68db      	ldr	r3, [r3, #12]
     d2e:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	4a28      	ldr	r2, [pc, #160]	; (dd4 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d32:	4929      	ldr	r1, [pc, #164]	; (dd8 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d34:	6813      	ldr	r3, [r2, #0]
     d36:	f023 0301 	bic.w	r3, r3, #1
     d3a:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	4b27      	ldr	r3, [pc, #156]	; (ddc <__pi_release+0x240>)
     d3e:	681a      	ldr	r2, [r3, #0]
     d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     d44:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d46:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     d4a:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	604a      	str	r2, [r1, #4]
     d4e:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	687a      	ldr	r2, [r7, #4]
     d52:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	687a      	ldr	r2, [r7, #4]
     d56:	4b22      	ldr	r3, [pc, #136]	; (de0 <__pi_release+0x244>)
     d58:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5a:	2201      	movs	r2, #1
     d5c:	4b21      	ldr	r3, [pc, #132]	; (de4 <__pi_release+0x248>)
     d5e:	601a      	str	r2, [r3, #0]
     d60:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d62:	4a19      	ldr	r2, [pc, #100]	; (dc8 <__pi_release+0x22c>)
     d64:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     d66:	069b      	lsls	r3, r3, #26
     d68:	d4fc      	bmi.n	d64 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d6a:	2201      	movs	r2, #1
     d6c:	4b1e      	ldr	r3, [pc, #120]	; (de8 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     d6e:	2037      	movs	r0, #55	; 0x37
     d70:	601a      	str	r2, [r3, #0]
     d72:	4b0f      	ldr	r3, [pc, #60]	; (db0 <__pi_release+0x214>)
     d74:	681b      	ldr	r3, [r3, #0]
     d76:	699b      	ldr	r3, [r3, #24]
     d78:	4798      	blx	r3
			goto DeepSleep;
     d7a:	e763      	b.n	c44 <__pi_release+0xa8>
	__SLEEP;
     d7c:	782b      	ldrb	r3, [r5, #0]
     d7e:	f36f 0341 	bfc	r3, #1, #1
     d82:	702b      	strb	r3, [r5, #0]
     d84:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     d86:	e717      	b.n	bb8 <__pi_release+0x1c>
     d88:	20005000 	andcs	r5, r0, r0
     d8c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     d90:	4009202c 	andmi	r2, r9, ip, lsr #32
     d94:	20000038 	andcs	r0, r0, r8, lsr r0
     d98:	200000a0 	andcs	r0, r0, r0, lsr #1
     d9c:	e000ed10 	and	lr, r0, r0, lsl sp
     da0:	20000084 	andcs	r0, r0, r4, lsl #1
     da4:	20000078 	andcs	r0, r0, r8, ror r0
     da8:	00002d06 	andeq	r2, r0, r6, lsl #26
     dac:	4008218c 	andmi	r2, r8, ip, lsl #3
     db0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     db4:	4009400c 	andmi	r4, r9, ip
     db8:	60082028 	andvs	r2, r8, r8, lsr #32
     dbc:	43040180 	movwmi	r0, #16768	; 0x4180
     dc0:	40034000 	andmi	r4, r3, r0
     dc4:	100001d8 	ldrdne	r0, [r0], -r8
     dc8:	40091014 	andmi	r1, r9, r4, lsl r0
     dcc:	40001038 	andmi	r1, r0, r8, lsr r0
     dd0:	100001a0 	andne	r0, r0, r0, lsr #3
     dd4:	40091010 	andmi	r1, r9, r0, lsl r0
     dd8:	40093000 	andmi	r3, r9, r0
     ddc:	40091040 	andmi	r1, r9, r0, asr #32
     de0:	43220420 			; <UNDEFINED> instruction: 0x43220420
     de4:	40091018 	andmi	r1, r9, r8, lsl r0
     de8:	43040188 	movwmi	r0, #16776	; 0x4188
     dec:	43220200 			; <UNDEFINED> instruction: 0x43220200
     df0:	40082224 	andmi	r2, r8, r4, lsr #4

00000df4 <main>:

#include "scheduler.h"

}

int main (void) {
     df4:	b510      	push	{r4, lr}
     df6:	4b11      	ldr	r3, [pc, #68]	; (e3c <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	4911      	ldr	r1, [pc, #68]	; (e40 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     dfa:	4a12      	ldr	r2, [pc, #72]	; (e44 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     dfc:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	4293      	cmp	r3, r2
     e02:	d1fb      	bne.n	dfc <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	4c10      	ldr	r4, [pc, #64]	; (e48 <main+0x54>)
	system_init ();
     e06:	f7ff fded 	bl	9e4 <system_init>
	tcv_init ();
     e0a:	f000 fb77 	bl	14fc <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e0e:	6823      	ldr	r3, [r4, #0]
     e10:	2129      	movs	r1, #41	; 0x29
     e12:	2000      	movs	r0, #0
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	6823      	ldr	r3, [r4, #0]
     e1a:	2120      	movs	r1, #32
     e1c:	681b      	ldr	r3, [r3, #0]
     e1e:	2001      	movs	r0, #1
     e20:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e22:	2100      	movs	r1, #0
     e24:	4809      	ldr	r0, [pc, #36]	; (e4c <main+0x58>)
     e26:	f000 faa5 	bl	1374 <__pi_fork>
     e2a:	4b09      	ldr	r3, [pc, #36]	; (e50 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     e2c:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e2e:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     e30:	2010      	movs	r0, #16
     e32:	f000 f937 	bl	10a4 <delay>
     e36:	b662      	cpsie	i

	sti;

	__pi_release ();
     e38:	f7ff feb0 	bl	b9c <__pi_release>
     e3c:	20004bfc 	strdcs	r4, [r0], -ip
     e40:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e44:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     e48:	10000184 	andne	r0, r0, r4, lsl #3
     e4c:	00000235 	andeq	r0, r0, r5, lsr r2
     e50:	200000a0 	andcs	r0, r0, r0, lsr #1

00000e54 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     e54:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     e56:	4b0d      	ldr	r3, [pc, #52]	; (e8c <killev+0x38>)
	wfun = (aword)(pid->code);
     e58:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     e5a:	681a      	ldr	r2, [r3, #0]
     e5c:	b1aa      	cbz	r2, e8a <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     e5e:	4614      	mov	r4, r2
     e60:	f834 1b10 	ldrh.w	r1, [r4], #16
     e64:	2300      	movs	r3, #0
     e66:	f001 0107 	and.w	r1, r1, #7
     e6a:	e001      	b.n	e70 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     e6c:	42b5      	cmp	r5, r6
     e6e:	d006      	beq.n	e7e <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     e70:	4299      	cmp	r1, r3
     e72:	dd08      	ble.n	e86 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     e74:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     e78:	3301      	adds	r3, #1
     e7a:	42a8      	cmp	r0, r5
     e7c:	d1f6      	bne.n	e6c <killev+0x18>
			    ) {
				wakeupev (i, j);
     e7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     e82:	889b      	ldrh	r3, [r3, #4]
     e84:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     e86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     e88:	e7e8      	b.n	e5c <killev+0x8>
				break;
			}
		}
	}
}
     e8a:	bd70      	pop	{r4, r5, r6, pc}
     e8c:	20000038 	andcs	r0, r0, r8, lsr r0

00000e90 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	4a1d      	ldr	r2, [pc, #116]	; (f08 <qfree+0x78>)
static void qfree (aword *ch) {
     e92:	b530      	push	{r4, r5, lr}
     e94:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e96:	6813      	ldr	r3, [r2, #0]
     e98:	b93b      	cbnz	r3, eaa <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     e9a:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     e9c:	4a1a      	ldr	r2, [pc, #104]	; (f08 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     e9e:	bb53      	cbnz	r3, ef6 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     ea0:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     ea2:	4b1a      	ldr	r3, [pc, #104]	; (f0c <qfree+0x7c>)
	m_setnextp (cc, ch);
     ea4:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     ea6:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     ea8:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eaa:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     eae:	3101      	adds	r1, #1
     eb0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     eb4:	4288      	cmp	r0, r1
     eb6:	d10b      	bne.n	ed0 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     eb8:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     eba:	f850 0c04 	ldr.w	r0, [r0, #-4]
     ebe:	f853 1c04 	ldr.w	r1, [r3, #-4]
     ec2:	4401      	add	r1, r0
     ec4:	4618      	mov	r0, r3
     ec6:	3101      	adds	r1, #1
     ec8:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	e7e3      	b.n	e98 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed0:	f850 1c04 	ldr.w	r1, [r0, #-4]
     ed4:	3101      	adds	r1, #1
     ed6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     eda:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     edc:	bf03      	ittte	eq
     ede:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     ee4:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     ee8:	461a      	movne	r2, r3
     eea:	bf02      	ittt	eq
     eec:	1949      	addeq	r1, r1, r5
     eee:	3101      	addeq	r1, #1
     ef0:	f840 1c04 	streq.w	r1, [r0, #-4]
     ef4:	e7ea      	b.n	ecc <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     ef6:	f853 4c04 	ldr.w	r4, [r3, #-4]
     efa:	f850 1c04 	ldr.w	r1, [r0, #-4]
     efe:	428c      	cmp	r4, r1
     f00:	d2ce      	bcs.n	ea0 <qfree+0x10>
		chunk = m_nextp (chunk))
     f02:	461a      	mov	r2, r3
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	e7ca      	b.n	e9e <qfree+0xe>
     f08:	2000004c 	andcs	r0, r0, ip, asr #32
     f0c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000f10 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f10:	4a03      	ldr	r2, [pc, #12]	; (f20 <dgout+0x10>)
     f12:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     f14:	071b      	lsls	r3, r3, #28
     f16:	d4fc      	bmi.n	f12 <dgout+0x2>
	diag_wchar (c, a);
     f18:	4b02      	ldr	r3, [pc, #8]	; (f24 <dgout+0x14>)
     f1a:	b2c0      	uxtb	r0, r0
     f1c:	6018      	str	r0, [r3, #0]
}
     f1e:	4770      	bx	lr
     f20:	40001018 	andmi	r1, r0, r8, lsl r0
     f24:	40001000 	andmi	r1, r0, r0

00000f28 <__pi_badstate>:
	syserror (ESTATE, "state");
     f28:	2007      	movs	r0, #7
void __pi_badstate (void) {
     f2a:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     f2c:	4901      	ldr	r1, [pc, #4]	; (f34 <__pi_badstate+0xc>)
     f2e:	f7ff fa89 	bl	444 <__pi_syserror>
     f32:	bf00      	nop
     f34:	00002d50 	andeq	r2, r0, r0, asr sp

00000f38 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f3a:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	4608      	mov	r0, r1
     f3e:	f7ff fb69 	bl	614 <tci_update_delay_ticks>
     f42:	2800      	cmp	r0, #0
     f44:	d154      	bne.n	ff0 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f46:	4b2b      	ldr	r3, [pc, #172]	; (ff4 <update_n_wake+0xbc>)
     f48:	4d2b      	ldr	r5, [pc, #172]	; (ff8 <update_n_wake+0xc0>)
     f4a:	8819      	ldrh	r1, [r3, #0]
     f4c:	882a      	ldrh	r2, [r5, #0]
     f4e:	b289      	uxth	r1, r1
     f50:	428a      	cmp	r2, r1
     f52:	492a      	ldr	r1, [pc, #168]	; (ffc <update_n_wake+0xc4>)
     f54:	d803      	bhi.n	f5e <update_n_wake+0x26>
     f56:	8808      	ldrh	r0, [r1, #0]
     f58:	b280      	uxth	r0, r0
     f5a:	4282      	cmp	r2, r0
     f5c:	d20d      	bcs.n	f7a <update_n_wake+0x42>
     f5e:	881e      	ldrh	r6, [r3, #0]
     f60:	8808      	ldrh	r0, [r1, #0]
     f62:	b2b6      	uxth	r6, r6
     f64:	b280      	uxth	r0, r0
     f66:	4286      	cmp	r6, r0
     f68:	d236      	bcs.n	fd8 <update_n_wake+0xa0>
     f6a:	8818      	ldrh	r0, [r3, #0]
     f6c:	b280      	uxth	r0, r0
     f6e:	4282      	cmp	r2, r0
     f70:	d903      	bls.n	f7a <update_n_wake+0x42>
     f72:	8808      	ldrh	r0, [r1, #0]
     f74:	b280      	uxth	r0, r0
     f76:	4282      	cmp	r2, r0
     f78:	d32e      	bcc.n	fd8 <update_n_wake+0xa0>
		for_all_tasks (i) {
     f7a:	4a21      	ldr	r2, [pc, #132]	; (1000 <update_n_wake+0xc8>)
     f7c:	6810      	ldr	r0, [r2, #0]
     f7e:	b918      	cbnz	r0, f88 <update_n_wake+0x50>
	__pi_mintk = znew + min;
     f80:	8818      	ldrh	r0, [r3, #0]
     f82:	4404      	add	r4, r0
     f84:	802c      	strh	r4, [r5, #0]
     f86:	e02c      	b.n	fe2 <update_n_wake+0xaa>
			if (!twaiting (i))
     f88:	8806      	ldrh	r6, [r0, #0]
     f8a:	0732      	lsls	r2, r6, #28
     f8c:	d51b      	bpl.n	fc6 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f8e:	881f      	ldrh	r7, [r3, #0]
     f90:	8842      	ldrh	r2, [r0, #2]
     f92:	b2bf      	uxth	r7, r7
     f94:	42ba      	cmp	r2, r7
     f96:	d803      	bhi.n	fa0 <update_n_wake+0x68>
     f98:	880f      	ldrh	r7, [r1, #0]
     f9a:	b2bf      	uxth	r7, r7
     f9c:	42ba      	cmp	r2, r7
     f9e:	d20f      	bcs.n	fc0 <update_n_wake+0x88>
     fa0:	f8b3 c000 	ldrh.w	ip, [r3]
     fa4:	880f      	ldrh	r7, [r1, #0]
     fa6:	fa1f fc8c 	uxth.w	ip, ip
     faa:	b2bf      	uxth	r7, r7
     fac:	45bc      	cmp	ip, r7
     fae:	d20c      	bcs.n	fca <update_n_wake+0x92>
     fb0:	881f      	ldrh	r7, [r3, #0]
     fb2:	b2bf      	uxth	r7, r7
     fb4:	42ba      	cmp	r2, r7
     fb6:	d903      	bls.n	fc0 <update_n_wake+0x88>
     fb8:	880f      	ldrh	r7, [r1, #0]
     fba:	b2bf      	uxth	r7, r7
     fbc:	42ba      	cmp	r2, r7
     fbe:	d304      	bcc.n	fca <update_n_wake+0x92>
				wakeuptm (i);
     fc0:	f026 060f 	bic.w	r6, r6, #15
     fc4:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
     fc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     fc8:	e7d9      	b.n	f7e <update_n_wake+0x46>
				d = i->Timer - znew;
     fca:	881e      	ldrh	r6, [r3, #0]
     fcc:	1b92      	subs	r2, r2, r6
     fce:	b292      	uxth	r2, r2
     fd0:	4294      	cmp	r4, r2
     fd2:	bf28      	it	cs
     fd4:	4614      	movcs	r4, r2
     fd6:	e7f6      	b.n	fc6 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	8818      	ldrh	r0, [r3, #0]
     fda:	1a12      	subs	r2, r2, r0
     fdc:	b292      	uxth	r2, r2
     fde:	4294      	cmp	r4, r2
     fe0:	d9ce      	bls.n	f80 <update_n_wake+0x48>
	__pi_old = znew;
     fe2:	881b      	ldrh	r3, [r3, #0]
     fe4:	b29b      	uxth	r3, r3
     fe6:	800b      	strh	r3, [r1, #0]
}
     fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
     fec:	f7ff ba54 	b.w	498 <tci_run_delay_timer>
}
     ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ff2:	bf00      	nop
     ff4:	2000008c 	andcs	r0, r0, ip, lsl #1
     ff8:	20000080 	andcs	r0, r0, r0, lsl #1
     ffc:	20000082 	andcs	r0, r0, r2, lsl #1
    1000:	20000038 	andcs	r0, r0, r8, lsr r0

00001004 <proceed>:
void proceed (word state) {
    1004:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1006:	4b03      	ldr	r3, [pc, #12]	; (1014 <proceed+0x10>)
    1008:	0100      	lsls	r0, r0, #4
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	8018      	strh	r0, [r3, #0]
	release;
    100e:	f7ff fdc5 	bl	b9c <__pi_release>
    1012:	bf00      	nop
    1014:	200000a0 	andcs	r0, r0, r0, lsr #1

00001018 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1018:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <__pi_wait+0x2c>)
    101c:	681c      	ldr	r4, [r3, #0]
    101e:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	f013 0f04 	tst.w	r3, #4
    1024:	f003 0207 	and.w	r2, r3, #7
    1028:	d003      	beq.n	1032 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    102a:	2005      	movs	r0, #5
    102c:	4906      	ldr	r1, [pc, #24]	; (1048 <__pi_wait+0x30>)
    102e:	f7ff fa09 	bl	444 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1032:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1036:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1038:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    103a:	8191      	strh	r1, [r2, #12]
    103c:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    103e:	8023      	strh	r3, [r4, #0]
}
    1040:	bd10      	pop	{r4, pc}
    1042:	bf00      	nop
    1044:	200000a0 	andcs	r0, r0, r0, lsr #1
    1048:	00002d56 	andeq	r2, r0, r6, asr sp

0000104c <__pi_trigger>:
void __pi_trigger (aword event) {
    104c:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    104e:	4b0b      	ldr	r3, [pc, #44]	; (107c <__pi_trigger+0x30>)
    1050:	681a      	ldr	r2, [r3, #0]
    1052:	b192      	cbz	r2, 107a <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1054:	4614      	mov	r4, r2
    1056:	2300      	movs	r3, #0
    1058:	f834 1b10 	ldrh.w	r1, [r4], #16
    105c:	f001 0107 	and.w	r1, r1, #7
    1060:	4299      	cmp	r1, r3
    1062:	dd08      	ble.n	1076 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1064:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1068:	3301      	adds	r3, #1
    106a:	4285      	cmp	r5, r0
    106c:	d1f8      	bne.n	1060 <__pi_trigger+0x14>
				wakeupev (i, j);
    106e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1072:	889b      	ldrh	r3, [r3, #4]
    1074:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1076:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1078:	e7eb      	b.n	1052 <__pi_trigger+0x6>
}
    107a:	bd30      	pop	{r4, r5, pc}
    107c:	20000038 	andcs	r0, r0, r8, lsr r0

00001080 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1080:	b510      	push	{r4, lr}
    1082:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1084:	4b06      	ldr	r3, [pc, #24]	; (10a0 <__pi_join+0x20>)
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	b90b      	cbnz	r3, 108e <__pi_join+0xe>
	return 0;
    108a:	461c      	mov	r4, r3
    108c:	e004      	b.n	1098 <__pi_join+0x18>
		if ((aword)i == pid) {
    108e:	42a3      	cmp	r3, r4
    1090:	d104      	bne.n	109c <__pi_join+0x1c>
			__pi_wait (pid, st);
    1092:	4620      	mov	r0, r4
    1094:	f7ff ffc0 	bl	1018 <__pi_wait>
}
    1098:	4620      	mov	r0, r4
    109a:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    109e:	e7f3      	b.n	1088 <__pi_join+0x8>
    10a0:	20000038 	andcs	r0, r0, r8, lsr r0

000010a4 <delay>:
void delay (word d, word state) {
    10a4:	b538      	push	{r3, r4, r5, lr}
    10a6:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    10a8:	4d0a      	ldr	r5, [pc, #40]	; (10d4 <delay+0x30>)
    10aa:	682a      	ldr	r2, [r5, #0]
    10ac:	8813      	ldrh	r3, [r2, #0]
    10ae:	f003 0307 	and.w	r3, r3, #7
    10b2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    10b6:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff ff3d 	bl	f38 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    10be:	4b06      	ldr	r3, [pc, #24]	; (10d8 <delay+0x34>)
    10c0:	8818      	ldrh	r0, [r3, #0]
    10c2:	682b      	ldr	r3, [r5, #0]
    10c4:	4404      	add	r4, r0
    10c6:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    10c8:	682a      	ldr	r2, [r5, #0]
    10ca:	8813      	ldrh	r3, [r2, #0]
    10cc:	f043 0308 	orr.w	r3, r3, #8
    10d0:	8013      	strh	r3, [r2, #0]
}
    10d2:	bd38      	pop	{r3, r4, r5, pc}
    10d4:	200000a0 	andcs	r0, r0, r0, lsr #1
    10d8:	20000082 	andcs	r0, r0, r2, lsl #1

000010dc <running>:
	if (fun == NULL)
    10dc:	4603      	mov	r3, r0
    10de:	b910      	cbnz	r0, 10e6 <running+0xa>
		return (int) __pi_curr;
    10e0:	4b05      	ldr	r3, [pc, #20]	; (10f8 <running+0x1c>)
    10e2:	6818      	ldr	r0, [r3, #0]
    10e4:	4770      	bx	lr
	for_all_tasks (i)
    10e6:	4a05      	ldr	r2, [pc, #20]	; (10fc <running+0x20>)
    10e8:	6810      	ldr	r0, [r2, #0]
    10ea:	b900      	cbnz	r0, 10ee <running+0x12>
}
    10ec:	4770      	bx	lr
		if (i->code == fun)
    10ee:	6842      	ldr	r2, [r0, #4]
    10f0:	429a      	cmp	r2, r3
    10f2:	d0fb      	beq.n	10ec <running+0x10>
	for_all_tasks (i)
    10f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    10f6:	e7f8      	b.n	10ea <running+0xe>
    10f8:	200000a0 	andcs	r0, r0, r0, lsr #1
    10fc:	20000038 	andcs	r0, r0, r8, lsr r0

00001100 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1100:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1102:	2000      	movs	r0, #0
    1104:	5c1a      	ldrb	r2, [r3, r0]
    1106:	b902      	cbnz	r2, 110a <__pi_strlen+0xa>
}
    1108:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    110a:	3001      	adds	r0, #1
    110c:	e7fa      	b.n	1104 <__pi_strlen+0x4>

0000110e <__pi_memcpy>:
	while (n--)
    110e:	3801      	subs	r0, #1
    1110:	440a      	add	r2, r1
    1112:	4291      	cmp	r1, r2
    1114:	d100      	bne.n	1118 <__pi_memcpy+0xa>
}
    1116:	4770      	bx	lr
		*dest++ = *src++;
    1118:	f811 3b01 	ldrb.w	r3, [r1], #1
    111c:	f800 3f01 	strb.w	r3, [r0, #1]!
    1120:	e7f7      	b.n	1112 <__pi_memcpy+0x4>
	...

00001124 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1126:	b119      	cbz	r1, 1130 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1128:	2003      	movs	r0, #3
    112a:	4905      	ldr	r1, [pc, #20]	; (1140 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    112c:	f7ff f98a 	bl	444 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1130:	4b04      	ldr	r3, [pc, #16]	; (1144 <adddevfunc+0x20>)
    1132:	681a      	ldr	r2, [r3, #0]
    1134:	b112      	cbz	r2, 113c <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1136:	2004      	movs	r0, #4
    1138:	4901      	ldr	r1, [pc, #4]	; (1140 <adddevfunc+0x1c>)
    113a:	e7f7      	b.n	112c <adddevfunc+0x8>
	ioreq [loc] = rf;
    113c:	6018      	str	r0, [r3, #0]
}
    113e:	bd08      	pop	{r3, pc}
    1140:	00002d59 	andeq	r2, r0, r9, asr sp
    1144:	2000003c 	andcs	r0, r0, ip, lsr r0

00001148 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    114c:	4604      	mov	r4, r0
    114e:	4616      	mov	r6, r2
    1150:	461d      	mov	r5, r3
    1152:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1156:	b921      	cbnz	r1, 1162 <io+0x1a>
    1158:	f8df 9084 	ldr.w	r9, [pc, #132]	; 11e0 <io+0x98>
    115c:	f8d9 3000 	ldr.w	r3, [r9]
    1160:	b91b      	cbnz	r3, 116a <io+0x22>
		syserror (ENODEVICE, "io");
    1162:	2001      	movs	r0, #1
    1164:	491d      	ldr	r1, [pc, #116]	; (11dc <io+0x94>)
    1166:	f7ff f96d 	bl	444 <__pi_syserror>
	if (len == 0)
    116a:	f1b8 0f00 	cmp.w	r8, #0
    116e:	d028      	beq.n	11c2 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	4642      	mov	r2, r8
    1172:	4629      	mov	r1, r5
    1174:	4630      	mov	r0, r6
    1176:	4798      	blx	r3
	if (ret >= 0)
    1178:	2800      	cmp	r0, #0
    117a:	da23      	bge.n	11c4 <io+0x7c>
	if (ret == -1) {
    117c:	1c41      	adds	r1, r0, #1
    117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1182:	d108      	bne.n	1196 <io+0x4e>
		if (retry == WNONE)
    1184:	429c      	cmp	r4, r3
    1186:	d01c      	beq.n	11c2 <io+0x7a>
		iowait (dev, operation, retry);
    1188:	4621      	mov	r1, r4
    118a:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    118e:	f7ff ff43 	bl	1018 <__pi_wait>
			release;
    1192:	f7ff fd03 	bl	b9c <__pi_release>
	if (ret == -2) {
    1196:	1c82      	adds	r2, r0, #2
    1198:	d116      	bne.n	11c8 <io+0x80>
		if (retry != WNONE) {
    119a:	429c      	cmp	r4, r3
    119c:	f8d9 9000 	ldr.w	r9, [r9]
    11a0:	d00a      	beq.n	11b8 <io+0x70>
			iowait (dev, operation, retry);
    11a2:	4621      	mov	r1, r4
    11a4:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    11a8:	f7ff ff36 	bl	1018 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    11ac:	4642      	mov	r2, r8
    11ae:	4629      	mov	r1, r5
    11b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    11b4:	47c8      	blx	r9
    11b6:	e7ec      	b.n	1192 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    11b8:	4642      	mov	r2, r8
    11ba:	4629      	mov	r1, r5
    11bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    11c0:	47c8      	blx	r9
		return 0;
    11c2:	2000      	movs	r0, #0
}
    11c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    11c8:	429c      	cmp	r4, r3
    11ca:	d0fa      	beq.n	11c2 <io+0x7a>
		delay (-ret - 2, retry);
    11cc:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    11d0:	30fe      	adds	r0, #254	; 0xfe
    11d2:	4621      	mov	r1, r4
    11d4:	b280      	uxth	r0, r0
    11d6:	f7ff ff65 	bl	10a4 <delay>
		release;
    11da:	e7da      	b.n	1192 <io+0x4a>
    11dc:	00002d5e 	andeq	r2, r0, lr, asr sp
    11e0:	2000003c 	andcs	r0, r0, ip, lsr r0

000011e4 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	4a0d      	ldr	r2, [pc, #52]	; (121c <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    11e6:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e8:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    11ec:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    11f0:	089b      	lsrs	r3, r3, #2
    11f2:	1e59      	subs	r1, r3, #1
    11f4:	29ff      	cmp	r1, #255	; 0xff
    11f6:	d803      	bhi.n	1200 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    11f8:	2004      	movs	r0, #4
    11fa:	4909      	ldr	r1, [pc, #36]	; (1220 <__pi_malloc_init+0x3c>)
    11fc:	f7ff f922 	bl	444 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1200:	4908      	ldr	r1, [pc, #32]	; (1224 <__pi_malloc_init+0x40>)
    1202:	1d10      	adds	r0, r2, #4
    1204:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1206:	2000      	movs	r0, #0
    1208:	4907      	ldr	r1, [pc, #28]	; (1228 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    120a:	3b02      	subs	r3, #2
    120c:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    120e:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1212:	4a06      	ldr	r2, [pc, #24]	; (122c <__pi_malloc_init+0x48>)
    1214:	6013      	str	r3, [r2, #0]
    1216:	4a06      	ldr	r2, [pc, #24]	; (1230 <__pi_malloc_init+0x4c>)
    1218:	6013      	str	r3, [r2, #0]
}
    121a:	bd08      	pop	{r3, pc}
    121c:	200000a4 	andcs	r0, r0, r4, lsr #1
    1220:	00002d61 	andeq	r2, r0, r1, ror #26
    1224:	2000004c 	andcs	r0, r0, ip, asr #32
    1228:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    122c:	20000040 	andcs	r0, r0, r0, asr #32
    1230:	20000048 	andcs	r0, r0, r8, asr #32

00001234 <__pi_free>:
void __pi_free (aword *ch) {
    1234:	b508      	push	{r3, lr}
	if (ch == NULL)
    1236:	b1c8      	cbz	r0, 126c <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1238:	f850 3c04 	ldr.w	r3, [r0, #-4]
    123c:	2b00      	cmp	r3, #0
    123e:	db03      	blt.n	1248 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1240:	2006      	movs	r0, #6
    1242:	490b      	ldr	r1, [pc, #44]	; (1270 <__pi_free+0x3c>)
    1244:	f7ff f8fe 	bl	444 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1248:	490a      	ldr	r1, [pc, #40]	; (1274 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    124a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    124e:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1250:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1254:	4413      	add	r3, r2
    1256:	600b      	str	r3, [r1, #0]
	QFREE;
    1258:	f7ff fe1a 	bl	e90 <qfree>
	if (mevent [MA_NP] . nwait) {
    125c:	4806      	ldr	r0, [pc, #24]	; (1278 <__pi_free+0x44>)
    125e:	7803      	ldrb	r3, [r0, #0]
    1260:	b123      	cbz	r3, 126c <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1262:	f7ff fef3 	bl	104c <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1266:	7803      	ldrb	r3, [r0, #0]
    1268:	3b01      	subs	r3, #1
    126a:	7003      	strb	r3, [r0, #0]
}
    126c:	bd08      	pop	{r3, pc}
    126e:	bf00      	nop
    1270:	00002d66 	andeq	r2, r0, r6, ror #26
    1274:	20000040 	andcs	r0, r0, r0, asr #32
    1278:	20000044 	andcs	r0, r0, r4, asr #32

0000127c <kill>:
void kill (aword pid) {
    127c:	b510      	push	{r4, lr}
	if (pid == 0)
    127e:	b908      	cbnz	r0, 1284 <kill+0x8>
		pid = (aword) __pi_curr;
    1280:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <kill+0x44>)
    1282:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1284:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1286:	4b0f      	ldr	r3, [pc, #60]	; (12c4 <kill+0x48>)
    1288:	681c      	ldr	r4, [r3, #0]
    128a:	b91c      	cbnz	r4, 1294 <kill+0x18>
	syserror (EREQPAR, "kpi");
    128c:	2003      	movs	r0, #3
    128e:	490e      	ldr	r1, [pc, #56]	; (12c8 <kill+0x4c>)
    1290:	f7ff f8d8 	bl	444 <__pi_syserror>
		if ((aword)i == pid) {
    1294:	4284      	cmp	r4, r0
    1296:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1298:	d10e      	bne.n	12b8 <kill+0x3c>
			if (j == NULL)
    129a:	b95a      	cbnz	r2, 12b4 <kill+0x38>
				__PCB = i->Next;
    129c:	6019      	str	r1, [r3, #0]
			killev (i);
    129e:	4620      	mov	r0, r4
    12a0:	f7ff fdd8 	bl	e54 <killev>
			ufree (i);
    12a4:	f7ff ffc6 	bl	1234 <__pi_free>
			if (i == __pi_curr)
    12a8:	4b05      	ldr	r3, [pc, #20]	; (12c0 <kill+0x44>)
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	42a3      	cmp	r3, r4
    12ae:	d106      	bne.n	12be <kill+0x42>
				release;
    12b0:	f7ff fc74 	bl	b9c <__pi_release>
				j->Next = i->Next;
    12b4:	62d1      	str	r1, [r2, #44]	; 0x2c
    12b6:	e7f2      	b.n	129e <kill+0x22>
    12b8:	4622      	mov	r2, r4
    12ba:	460c      	mov	r4, r1
    12bc:	e7e5      	b.n	128a <kill+0xe>
}
    12be:	bd10      	pop	{r4, pc}
    12c0:	200000a0 	andcs	r0, r0, r0, lsr #1
    12c4:	20000038 	andcs	r0, r0, r8, lsr r0
    12c8:	00002d6b 	andeq	r2, r0, fp, ror #26

000012cc <__pi_malloc>:
	if (size < 8)
    12cc:	2807      	cmp	r0, #7
		_size = 2;
    12ce:	bf98      	it	ls
    12d0:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    12d2:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12d4:	4b21      	ldr	r3, [pc, #132]	; (135c <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    12d6:	bf88      	it	hi
    12d8:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12da:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    12dc:	4920      	ldr	r1, [pc, #128]	; (1360 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    12de:	bf88      	it	hi
    12e0:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12e2:	b94c      	cbnz	r4, 12f8 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    12e4:	4a1f      	ldr	r2, [pc, #124]	; (1364 <__pi_malloc+0x98>)
    12e6:	7853      	ldrb	r3, [r2, #1]
    12e8:	2bff      	cmp	r3, #255	; 0xff
    12ea:	d001      	beq.n	12f0 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    12ec:	3301      	adds	r3, #1
    12ee:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    12f0:	2200      	movs	r2, #0
    12f2:	4b1d      	ldr	r3, [pc, #116]	; (1368 <__pi_malloc+0x9c>)
    12f4:	601a      	str	r2, [r3, #0]
	return chunk;
    12f6:	e02f      	b.n	1358 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    12f8:	6862      	ldr	r2, [r4, #4]
    12fa:	428a      	cmp	r2, r1
    12fc:	d003      	beq.n	1306 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    12fe:	2006      	movs	r0, #6
    1300:	491a      	ldr	r1, [pc, #104]	; (136c <__pi_malloc+0xa0>)
    1302:	f7ff f89f 	bl	444 <__pi_syserror>
		if (m_size (chunk) >= _size)
    1306:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    130a:	4285      	cmp	r5, r0
    130c:	d202      	bcs.n	1314 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    130e:	4623      	mov	r3, r4
    1310:	4614      	mov	r4, r2
    1312:	e7e6      	b.n	12e2 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1314:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1316:	f854 3c04 	ldr.w	r3, [r4, #-4]
    131a:	1a1b      	subs	r3, r3, r0
    131c:	2b08      	cmp	r3, #8
    131e:	d909      	bls.n	1334 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1320:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1324:	3001      	adds	r0, #1
    1326:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    132a:	3b01      	subs	r3, #1
    132c:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1330:	f7ff fdae 	bl	e90 <qfree>
		mevent [MA_NP] . nfail = 0;
    1334:	2200      	movs	r2, #0
    1336:	4b0b      	ldr	r3, [pc, #44]	; (1364 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1338:	490d      	ldr	r1, [pc, #52]	; (1370 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    133a:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    133c:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1340:	680b      	ldr	r3, [r1, #0]
    1342:	1a9b      	subs	r3, r3, r2
    1344:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1346:	4908      	ldr	r1, [pc, #32]	; (1368 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1348:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    134c:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    134e:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1352:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	bf38      	it	cc
    1356:	600b      	strcc	r3, [r1, #0]
}
    1358:	4620      	mov	r0, r4
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	2000004c 	andcs	r0, r0, ip, asr #32
    1360:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1364:	20000044 	andcs	r0, r0, r4, asr #32
    1368:	20000048 	andcs	r0, r0, r8, asr #32
    136c:	00002d6f 	andeq	r2, r0, pc, ror #26
    1370:	20000040 	andcs	r0, r0, r0, asr #32

00001374 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1374:	b538      	push	{r3, r4, r5, lr}
    1376:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    137a:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    137c:	f7ff ffa6 	bl	12cc <__pi_malloc>
    1380:	2300      	movs	r3, #0
    1382:	b138      	cbz	r0, 1394 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1384:	4a07      	ldr	r2, [pc, #28]	; (13a4 <__pi_fork+0x30>)
	i->Status = 0;
    1386:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1388:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    138a:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    138c:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1390:	b90b      	cbnz	r3, 1396 <__pi_fork+0x22>
			__PCB = i;
    1392:	6010      	str	r0, [r2, #0]
}
    1394:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1396:	461a      	mov	r2, r3
    1398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    139a:	2b00      	cmp	r3, #0
    139c:	d1fb      	bne.n	1396 <__pi_fork+0x22>
			j->Next = i;
    139e:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    13a0:	e7f8      	b.n	1394 <__pi_fork+0x20>
    13a2:	bf00      	nop
    13a4:	20000038 	andcs	r0, r0, r8, lsr r0

000013a8 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    13a8:	4a04      	ldr	r2, [pc, #16]	; (13bc <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    13aa:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    13ac:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    13ae:	4803      	ldr	r0, [pc, #12]	; (13bc <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    13b0:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    13b2:	bf1c      	itt	ne
    13b4:	3301      	addne	r3, #1
    13b6:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	f7ff be2e 	b.w	1018 <__pi_wait>
    13bc:	20000044 	andcs	r0, r0, r4, asr #32

000013c0 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    13c0:	b40f      	push	{r0, r1, r2, r3}
    13c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    13c6:	ab0a      	add	r3, sp, #40	; 0x28
    13c8:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    13cc:	2015      	movs	r0, #21
	va_start (ap, mess);
    13ce:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    13d0:	4b46      	ldr	r3, [pc, #280]	; (14ec <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    13d2:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    13d4:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    13d6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 14f4 <diag+0x134>
	diag_disable_int (a, is);
    13da:	695b      	ldr	r3, [r3, #20]
    13dc:	4798      	blx	r3
	while (*mess != '\0') {
    13de:	7820      	ldrb	r0, [r4, #0]
    13e0:	b998      	cbnz	r0, 140a <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    13e2:	200d      	movs	r0, #13
    13e4:	f7ff fd94 	bl	f10 <dgout>
	dgout ('\n');
    13e8:	200a      	movs	r0, #10
    13ea:	f7ff fd91 	bl	f10 <dgout>
    13ee:	4a40      	ldr	r2, [pc, #256]	; (14f0 <diag+0x130>)
    13f0:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    13f2:	071b      	lsls	r3, r3, #28
    13f4:	d4fc      	bmi.n	13f0 <diag+0x30>
	diag_enable_int (a, is);
    13f6:	4b3d      	ldr	r3, [pc, #244]	; (14ec <diag+0x12c>)
    13f8:	2015      	movs	r0, #21
    13fa:	681b      	ldr	r3, [r3, #0]
    13fc:	691b      	ldr	r3, [r3, #16]
    13fe:	4798      	blx	r3
}
    1400:	b003      	add	sp, #12
    1402:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1406:	b004      	add	sp, #16
    1408:	4770      	bx	lr
		if (*mess == '%') {
    140a:	2825      	cmp	r0, #37	; 0x25
    140c:	f104 0601 	add.w	r6, r4, #1
    1410:	d169      	bne.n	14e6 <diag+0x126>
			if (*mess == 'l') {
    1412:	9b01      	ldr	r3, [sp, #4]
    1414:	7862      	ldrb	r2, [r4, #1]
    1416:	f853 1b04 	ldr.w	r1, [r3], #4
    141a:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    141c:	bf08      	it	eq
    141e:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1420:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1422:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1424:	bf0c      	ite	eq
    1426:	2520      	moveq	r5, #32
				bc = 16;
    1428:	2510      	movne	r5, #16
			switch (*mess) {
    142a:	2b75      	cmp	r3, #117	; 0x75
    142c:	d04e      	beq.n	14cc <diag+0x10c>
    142e:	d80a      	bhi.n	1446 <diag+0x86>
    1430:	2b64      	cmp	r3, #100	; 0x64
    1432:	d01c      	beq.n	146e <diag+0xae>
    1434:	2b73      	cmp	r3, #115	; 0x73
    1436:	d052      	beq.n	14de <diag+0x11e>
				dgout ('%');
    1438:	2025      	movs	r0, #37	; 0x25
    143a:	f7ff fd69 	bl	f10 <dgout>
				dgout (*mess);
    143e:	7830      	ldrb	r0, [r6, #0]
    1440:	f7ff fd66 	bl	f10 <dgout>
    1444:	e010      	b.n	1468 <diag+0xa8>
			switch (*mess) {
    1446:	2b78      	cmp	r3, #120	; 0x78
    1448:	d1f6      	bne.n	1438 <diag+0x78>
    144a:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    144c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 14f8 <diag+0x138>
					i += 4;
    1450:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1452:	1b2b      	subs	r3, r5, r4
    1454:	fa21 f303 	lsr.w	r3, r1, r3
    1458:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    145c:	f819 0003 	ldrb.w	r0, [r9, r3]
    1460:	f7ff fd56 	bl	f10 <dgout>
				while (i < bc) {
    1464:	42a5      	cmp	r5, r4
    1466:	dcf3      	bgt.n	1450 <diag+0x90>
			mess++;
    1468:	3601      	adds	r6, #1
					d /= 10;
    146a:	4634      	mov	r4, r6
    146c:	e7b7      	b.n	13de <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    146e:	1e6b      	subs	r3, r5, #1
    1470:	fa21 f303 	lsr.w	r3, r1, r3
    1474:	07da      	lsls	r2, r3, #31
    1476:	d509      	bpl.n	148c <diag+0xcc>
					dgout ('-');
    1478:	202d      	movs	r0, #45	; 0x2d
    147a:	f7ff fd49 	bl	f10 <dgout>
					if (bc == 16)
    147e:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1480:	bf04      	itt	eq
    1482:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1486:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    148a:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    148c:	f242 7410 	movw	r4, #10000	; 0x2710
    1490:	2d10      	cmp	r5, #16
    1492:	bf18      	it	ne
    1494:	4644      	movne	r4, r8
					v = (word) (val / d);
    1496:	fbb1 f5f4 	udiv	r5, r1, r4
    149a:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    149c:	b935      	cbnz	r5, 14ac <diag+0xec>
    149e:	2c01      	cmp	r4, #1
    14a0:	d004      	beq.n	14ac <diag+0xec>
					d /= 10;
    14a2:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    14a6:	e7f6      	b.n	1496 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	4c12      	ldr	r4, [pc, #72]	; (14f4 <diag+0x134>)
    14aa:	e7f4      	b.n	1496 <diag+0xd6>
					dgout (v + '0');
    14ac:	f105 0030 	add.w	r0, r5, #48	; 0x30
    14b0:	b280      	uxth	r0, r0
    14b2:	f7ff fd2d 	bl	f10 <dgout>
					if (d == 0) break;
    14b6:	2c09      	cmp	r4, #9
					d /= 10;
    14b8:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    14bc:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    14c0:	d9d2      	bls.n	1468 <diag+0xa8>
					v = (word) (val / d);
    14c2:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    14c6:	461c      	mov	r4, r3
					v = (word) (val / d);
    14c8:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    14ca:	e7ef      	b.n	14ac <diag+0xec>
				if (bc == 16)
    14cc:	2d10      	cmp	r5, #16
    14ce:	d1eb      	bne.n	14a8 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    14d0:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    14d4:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    14d6:	e7de      	b.n	1496 <diag+0xd6>
					dgout (*s);
    14d8:	f7ff fd1a 	bl	f10 <dgout>
					s++;
    14dc:	3101      	adds	r1, #1
				while (*s != '\0') {
    14de:	7808      	ldrb	r0, [r1, #0]
    14e0:	2800      	cmp	r0, #0
    14e2:	d1f9      	bne.n	14d8 <diag+0x118>
    14e4:	e7c0      	b.n	1468 <diag+0xa8>
			dgout (*mess++);
    14e6:	f7ff fd13 	bl	f10 <dgout>
    14ea:	e7be      	b.n	146a <diag+0xaa>
    14ec:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    14f0:	40001018 	andmi	r1, r0, r8, lsl r0
    14f4:	3b9aca00 	blcc	fe6b3cfc <_estack+0xde6aecfc>
    14f8:	00002d74 	andeq	r2, r0, r4, ror sp

000014fc <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    14fc:	4770      	bx	lr

000014fe <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    14fe:	e7fe      	b.n	14fe <NmiSR>

00001500 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1500:	e7fe      	b.n	1500 <FaultISR>

00001502 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    1502:	e7fe      	b.n	1502 <AONIntHandler>

00001504 <ResetISR>:
{
    1504:	b508      	push	{r3, lr}
    SetupTrimDevice();
    1506:	f000 fddb 	bl	20c0 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    150a:	4b0c      	ldr	r3, [pc, #48]	; (153c <zero_loop+0x20>)
    pui32Src = &_etext;
    150c:	4a0c      	ldr	r2, [pc, #48]	; (1540 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    150e:	490d      	ldr	r1, [pc, #52]	; (1544 <zero_loop+0x28>)
    1510:	428b      	cmp	r3, r1
    1512:	d30d      	bcc.n	1530 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1514:	480c      	ldr	r0, [pc, #48]	; (1548 <zero_loop+0x2c>)
    1516:	490d      	ldr	r1, [pc, #52]	; (154c <zero_loop+0x30>)
    1518:	f04f 0200 	mov.w	r2, #0

0000151c <zero_loop>:
    151c:	4288      	cmp	r0, r1
    151e:	bfb8      	it	lt
    1520:	f840 2b04 	strlt.w	r2, [r0], #4
    1524:	dbfa      	blt.n	151c <zero_loop>
   main();
    1526:	f7ff fc65 	bl	df4 <main>
    FaultISR();
    152a:	f7ff ffe9 	bl	1500 <FaultISR>
}
    152e:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1530:	f852 0b04 	ldr.w	r0, [r2], #4
    1534:	f843 0b04 	str.w	r0, [r3], #4
    1538:	e7ea      	b.n	1510 <ResetISR+0xc>
    153a:	bf00      	nop
    153c:	20000000 	andcs	r0, r0, r0
    1540:	00002d8c 	andeq	r2, r0, ip, lsl #27
    1544:	20000004 	andcs	r0, r0, r4
    1548:	20000004 	andcs	r0, r0, r4
    154c:	200000a4 	andcs	r0, r0, r4, lsr #1

00001550 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1550:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1552:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1554:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1558:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    155a:	4907      	ldr	r1, [pc, #28]	; (1578 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    155c:	4d07      	ldr	r5, [pc, #28]	; (157c <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    155e:	4c08      	ldr	r4, [pc, #32]	; (1580 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1560:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1562:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1564:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    1566:	b2c0      	uxtb	r0, r0
			b |= 1;
    1568:	bf48      	it	mi
    156a:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    156e:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1570:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1572:	600a      	str	r2, [r1, #0]
    1574:	d1f4      	bne.n	1560 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1576:	bd70      	pop	{r4, r5, r6, pc}
    1578:	400220a0 	andmi	r2, r2, r0, lsr #1
    157c:	400220c0 	andmi	r2, r2, r0, asr #1
    1580:	40022090 	mulmi	r2, r0, r0

00001584 <put_byte>:

static void put_byte (byte b) {
    1584:	b530      	push	{r4, r5, lr}
    1586:	2308      	movs	r3, #8
    1588:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1590:	4c06      	ldr	r4, [pc, #24]	; (15ac <put_byte+0x28>)
    1592:	4a07      	ldr	r2, [pc, #28]	; (15b0 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1594:	f010 0f80 	tst.w	r0, #128	; 0x80
    1598:	bf14      	ite	ne
    159a:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    159c:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    159e:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    15a0:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15a2:	6021      	str	r1, [r4, #0]
		b <<= 1;
    15a4:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    15a6:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    15a8:	d1f4      	bne.n	1594 <put_byte+0x10>
	}
}
    15aa:	bd30      	pop	{r4, r5, pc}
    15ac:	40022090 	mulmi	r2, r0, r0
    15b0:	400220a0 	andmi	r2, r2, r0, lsr #1

000015b4 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    15b4:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    15b6:	b510      	push	{r4, lr}
    15b8:	4c03      	ldr	r4, [pc, #12]	; (15c8 <cmd_0+0x14>)
    15ba:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    15bc:	f7ff ffe2 	bl	1584 <put_byte>
    15c0:	2300      	movs	r3, #0
    15c2:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    15c4:	bd10      	pop	{r4, pc}
    15c6:	bf00      	nop
    15c8:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000015cc <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    15cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15d0:	4604      	mov	r4, r0
    15d2:	460d      	mov	r5, r1
    15d4:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    15d6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 161c <wwait+0x50>
    15da:	4e0f      	ldr	r6, [pc, #60]	; (1618 <wwait+0x4c>)
    15dc:	f898 3000 	ldrb.w	r3, [r8]
    15e0:	b14b      	cbz	r3, 15f6 <wwait+0x2a>
	put_byte (CMD_RDSR);
    15e2:	2005      	movs	r0, #5
    15e4:	6037      	str	r7, [r6, #0]
    15e6:	f7ff ffcd 	bl	1584 <put_byte>
	r = get_byte ();
    15ea:	f7ff ffb1 	bl	1550 <get_byte>
    15ee:	2300      	movs	r3, #0
    15f0:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    15f2:	07c3      	lsls	r3, r0, #31
    15f4:	d401      	bmi.n	15fa <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    15f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    15fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    15fe:	429c      	cmp	r4, r3
    1600:	d103      	bne.n	160a <wwait+0x3e>
			mdelay (1);
    1602:	2001      	movs	r0, #1
    1604:	f7fe feea 	bl	3dc <mdelay>
    1608:	e7e8      	b.n	15dc <wwait+0x10>
			delay (del, st);
    160a:	4621      	mov	r1, r4
    160c:	4628      	mov	r0, r5
    160e:	f7ff fd49 	bl	10a4 <delay>
			release;
    1612:	f7ff fac3 	bl	b9c <__pi_release>
    1616:	bf00      	nop
    1618:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    161c:	20000050 	andcs	r0, r0, r0, asr r0

00001620 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1622:	4d0c      	ldr	r5, [pc, #48]	; (1654 <ready+0x34>)
    1624:	782f      	ldrb	r7, [r5, #0]
    1626:	b147      	cbz	r7, 163a <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1628:	2101      	movs	r1, #1
    162a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    162e:	f7ff ffcd 	bl	15cc <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1632:	2200      	movs	r2, #0
    1634:	4b08      	ldr	r3, [pc, #32]	; (1658 <ready+0x38>)
    1636:	701a      	strb	r2, [r3, #0]
}
    1638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    163a:	2401      	movs	r4, #1
    163c:	4e07      	ldr	r6, [pc, #28]	; (165c <ready+0x3c>)
	udelay (1);
    163e:	4620      	mov	r0, r4
    1640:	6034      	str	r4, [r6, #0]
    1642:	f7fe feb5 	bl	3b0 <udelay>
	udelay (1);
    1646:	4620      	mov	r0, r4
    1648:	6037      	str	r7, [r6, #0]
    164a:	f7fe feb1 	bl	3b0 <udelay>
		dopen = DOPEN_TEMP;
    164e:	2302      	movs	r3, #2
    1650:	702b      	strb	r3, [r5, #0]
    1652:	e7ee      	b.n	1632 <ready+0x12>
    1654:	20000050 	andcs	r0, r0, r0, asr r0
    1658:	20000051 	andcs	r0, r0, r1, asr r0
    165c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001660 <cclose>:
static void cclose () {
    1660:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1662:	4c07      	ldr	r4, [pc, #28]	; (1680 <cclose+0x20>)
    1664:	7823      	ldrb	r3, [r4, #0]
    1666:	2b02      	cmp	r3, #2
    1668:	d109      	bne.n	167e <cclose+0x1e>
		wwait (WNONE, 1);
    166a:	2101      	movs	r1, #1
    166c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1670:	f7ff ffac 	bl	15cc <wwait>
	cmd_0 (CMD_DP);
    1674:	20b9      	movs	r0, #185	; 0xb9
    1676:	f7ff ff9d 	bl	15b4 <cmd_0>
		dopen = 0;
    167a:	2300      	movs	r3, #0
    167c:	7023      	strb	r3, [r4, #0]
}
    167e:	bd10      	pop	{r4, pc}
    1680:	20000050 	andcs	r0, r0, r0, asr r0

00001684 <ee_open>:

// ============================================================================

word ee_open () {
    1684:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1686:	f7ff ffcb 	bl	1620 <ready>
	dopen = DOPEN_PERM;
    168a:	2201      	movs	r2, #1
    168c:	4b01      	ldr	r3, [pc, #4]	; (1694 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    168e:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1690:	701a      	strb	r2, [r3, #0]
}
    1692:	bd08      	pop	{r3, pc}
    1694:	20000050 	andcs	r0, r0, r0, asr r0

00001698 <ee_close>:

void ee_close () {

	if (dopen) {
    1698:	4b03      	ldr	r3, [pc, #12]	; (16a8 <ee_close+0x10>)
    169a:	781a      	ldrb	r2, [r3, #0]
    169c:	b11a      	cbz	r2, 16a6 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    169e:	2202      	movs	r2, #2
    16a0:	701a      	strb	r2, [r3, #0]
		cclose ();
    16a2:	f7ff bfdd 	b.w	1660 <cclose>
	}
}
    16a6:	4770      	bx	lr
    16a8:	20000050 	andcs	r0, r0, r0, asr r0

000016ac <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    16ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16ae:	4604      	mov	r4, r0
    16b0:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    16b2:	4615      	mov	r5, r2
    16b4:	b37a      	cbz	r2, 1716 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    16b6:	4e19      	ldr	r6, [pc, #100]	; (171c <ser_in+0x70>)
    16b8:	6830      	ldr	r0, [r6, #0]
    16ba:	b988      	cbnz	r0, 16e0 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    16bc:	4818      	ldr	r0, [pc, #96]	; (1720 <ser_in+0x74>)
    16be:	f7ff fd0d 	bl	10dc <running>
    16c2:	b948      	cbnz	r0, 16d8 <ser_in+0x2c>
			prcs = runthread (__inserial);
    16c4:	4601      	mov	r1, r0
    16c6:	4816      	ldr	r0, [pc, #88]	; (1720 <ser_in+0x74>)
    16c8:	f7ff fe54 	bl	1374 <__pi_fork>
			if (prcs == 0) {
    16cc:	b920      	cbnz	r0, 16d8 <ser_in+0x2c>
				npwait (st);
    16ce:	4620      	mov	r0, r4
    16d0:	f7ff fe6a 	bl	13a8 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    16d4:	f7ff fa62 	bl	b9c <__pi_release>
		join (prcs, st);
    16d8:	4621      	mov	r1, r4
    16da:	f7ff fcd1 	bl	1080 <__pi_join>
    16de:	e7f9      	b.n	16d4 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    16e0:	7803      	ldrb	r3, [r0, #0]
    16e2:	b9a3      	cbnz	r3, 170e <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    16e4:	7844      	ldrb	r4, [r0, #1]
    16e6:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    16e8:	42ac      	cmp	r4, r5
		prcs = len-1;
    16ea:	bfa8      	it	ge
    16ec:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    16f0:	4622      	mov	r2, r4
    16f2:	4638      	mov	r0, r7
    16f4:	6831      	ldr	r1, [r6, #0]
    16f6:	f7ff fd0a 	bl	110e <__pi_memcpy>
	ufree (__inpline);
    16fa:	6830      	ldr	r0, [r6, #0]
    16fc:	f7ff fd9a 	bl	1234 <__pi_free>
	__inpline = NULL;
    1700:	2300      	movs	r3, #0
    1702:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    1704:	783a      	ldrb	r2, [r7, #0]
    1706:	b102      	cbz	r2, 170a <ser_in+0x5e>
		buf [prcs] = '\0';
    1708:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    170a:	4620      	mov	r0, r4
    170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    170e:	f7ff fcf7 	bl	1100 <__pi_strlen>
    1712:	4604      	mov	r4, r0
    1714:	e7e8      	b.n	16e8 <ser_in+0x3c>
		return 0;
    1716:	4614      	mov	r4, r2
    1718:	e7f7      	b.n	170a <ser_in+0x5e>
    171a:	bf00      	nop
    171c:	2000005c 	andcs	r0, r0, ip, asr r0
    1720:	00001849 	andeq	r1, r0, r9, asr #16

00001724 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1724:	b40e      	push	{r1, r2, r3}
    1726:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1728:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    172a:	4812      	ldr	r0, [pc, #72]	; (1774 <ser_outf+0x50>)
    172c:	f7ff fcd6 	bl	10dc <running>
    1730:	4606      	mov	r6, r0
    1732:	b120      	cbz	r0, 173e <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1734:	4621      	mov	r1, r4
    1736:	f7ff fca3 	bl	1080 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    173a:	f7ff fa2f 	bl	b9c <__pi_release>
	va_start (ap, m);
    173e:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1740:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1742:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1744:	f000 fa36 	bl	1bb4 <vform>
    1748:	4605      	mov	r5, r0
    174a:	b918      	cbnz	r0, 1754 <ser_outf+0x30>
		umwait (st);
    174c:	4620      	mov	r0, r4
    174e:	f7ff fe2b 	bl	13a8 <__pi_waitmem>
    1752:	e7f2      	b.n	173a <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1754:	4601      	mov	r1, r0
    1756:	4807      	ldr	r0, [pc, #28]	; (1774 <ser_outf+0x50>)
    1758:	f7ff fe0c 	bl	1374 <__pi_fork>
    175c:	b918      	cbnz	r0, 1766 <ser_outf+0x42>
		ufree (buf);
    175e:	4628      	mov	r0, r5
    1760:	f7ff fd68 	bl	1234 <__pi_free>
		npwait (st);
    1764:	e7f2      	b.n	174c <ser_outf+0x28>
		release;
	}

	return 0;
}
    1766:	4630      	mov	r0, r6
    1768:	b003      	add	sp, #12
    176a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    176e:	b003      	add	sp, #12
    1770:	4770      	bx	lr
    1772:	bf00      	nop
    1774:	000017d9 	ldrdeq	r1, [r0], -r9

00001778 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1778:	b40e      	push	{r1, r2, r3}
    177a:	b533      	push	{r0, r1, r4, r5, lr}
    177c:	9905      	ldr	r1, [sp, #20]
    177e:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1780:	b321      	cbz	r1, 17cc <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1782:	4d13      	ldr	r5, [pc, #76]	; (17d0 <ser_inf+0x58>)
    1784:	6828      	ldr	r0, [r5, #0]
    1786:	b988      	cbnz	r0, 17ac <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1788:	4812      	ldr	r0, [pc, #72]	; (17d4 <ser_inf+0x5c>)
    178a:	f7ff fca7 	bl	10dc <running>
    178e:	b948      	cbnz	r0, 17a4 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1790:	4601      	mov	r1, r0
    1792:	4810      	ldr	r0, [pc, #64]	; (17d4 <ser_inf+0x5c>)
    1794:	f7ff fdee 	bl	1374 <__pi_fork>
			if (prcs == 0) {
    1798:	b920      	cbnz	r0, 17a4 <ser_inf+0x2c>
				npwait (st);
    179a:	4620      	mov	r0, r4
    179c:	f7ff fe04 	bl	13a8 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    17a0:	f7ff f9fc 	bl	b9c <__pi_release>
		join (prcs, st);
    17a4:	4621      	mov	r1, r4
    17a6:	f7ff fc6b 	bl	1080 <__pi_join>
    17aa:	e7f9      	b.n	17a0 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    17ac:	aa06      	add	r2, sp, #24
    17ae:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    17b0:	f000 fa28 	bl	1c04 <vscan>
    17b4:	4604      	mov	r4, r0

	ufree (__inpline);
    17b6:	6828      	ldr	r0, [r5, #0]
    17b8:	f7ff fd3c 	bl	1234 <__pi_free>
	__inpline = NULL;
    17bc:	2300      	movs	r3, #0
    17be:	602b      	str	r3, [r5, #0]

	return prcs;
}
    17c0:	4620      	mov	r0, r4
    17c2:	b002      	add	sp, #8
    17c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    17c8:	b003      	add	sp, #12
    17ca:	4770      	bx	lr
		return 0;
    17cc:	460c      	mov	r4, r1
    17ce:	e7f7      	b.n	17c0 <ser_inf+0x48>
    17d0:	2000005c 	andcs	r0, r0, ip, asr r0
    17d4:	00001849 	andeq	r1, r0, r9, asr #16

000017d8 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    17d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17da:	4b18      	ldr	r3, [pc, #96]	; (183c <__outserial+0x64>)
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	689d      	ldr	r5, [r3, #8]
    17e0:	b130      	cbz	r0, 17f0 <__outserial+0x18>
    17e2:	280a      	cmp	r0, #10
    17e4:	d00d      	beq.n	1802 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    17e6:	b003      	add	sp, #12
    17e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17ec:	f7ff bb9c 	b.w	f28 <__pi_badstate>
	ptr = data;
    17f0:	4b13      	ldr	r3, [pc, #76]	; (1840 <__outserial+0x68>)
    17f2:	4c14      	ldr	r4, [pc, #80]	; (1844 <__outserial+0x6c>)
    17f4:	601d      	str	r5, [r3, #0]
	if (*ptr)
    17f6:	782b      	ldrb	r3, [r5, #0]
    17f8:	b1e3      	cbz	r3, 1834 <__outserial+0x5c>
		len = strlen (ptr);
    17fa:	4628      	mov	r0, r5
    17fc:	f7ff fc80 	bl	1100 <__pi_strlen>
    1800:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1802:	4e0f      	ldr	r6, [pc, #60]	; (1840 <__outserial+0x68>)
    1804:	4f0f      	ldr	r7, [pc, #60]	; (1844 <__outserial+0x6c>)
    1806:	883b      	ldrh	r3, [r7, #0]
    1808:	2201      	movs	r2, #1
    180a:	9300      	str	r3, [sp, #0]
    180c:	2100      	movs	r1, #0
    180e:	6833      	ldr	r3, [r6, #0]
    1810:	200a      	movs	r0, #10
    1812:	f7ff fc99 	bl	1148 <io>
	ptr += quant;
    1816:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1818:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    181a:	4403      	add	r3, r0
	len -= quant;
    181c:	1a24      	subs	r4, r4, r0
	ptr += quant;
    181e:	6033      	str	r3, [r6, #0]
	len -= quant;
    1820:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    1822:	2c00      	cmp	r4, #0
    1824:	d1ef      	bne.n	1806 <__outserial+0x2e>
		ufree (data);
    1826:	4628      	mov	r0, r5
    1828:	f7ff fd04 	bl	1234 <__pi_free>
		finish;
    182c:	4620      	mov	r0, r4
    182e:	f7ff fd25 	bl	127c <kill>
    1832:	e7e8      	b.n	1806 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1834:	786b      	ldrb	r3, [r5, #1]
    1836:	3303      	adds	r3, #3
    1838:	6023      	str	r3, [r4, #0]
    183a:	e7e2      	b.n	1802 <__outserial+0x2a>
    183c:	200000a0 	andcs	r0, r0, r0, lsr #1
    1840:	20000058 	andcs	r0, r0, r8, asr r0
    1844:	20000054 	andcs	r0, r0, r4, asr r0

00001848 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    1848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    184a:	4d42      	ldr	r5, [pc, #264]	; (1954 <__inserial+0x10c>)
    184c:	682a      	ldr	r2, [r5, #0]
    184e:	6894      	ldr	r4, [r2, #8]
    1850:	2803      	cmp	r0, #3
    1852:	d87a      	bhi.n	194a <__inserial+0x102>
    1854:	e8df f000 	tbb	[pc, r0]
    1858:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    185c:	4b3e      	ldr	r3, [pc, #248]	; (1958 <__inserial+0x110>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	b113      	cbz	r3, 1868 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    1862:	2000      	movs	r0, #0
    1864:	f7ff fd0a 	bl	127c <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1868:	2040      	movs	r0, #64	; 0x40
    186a:	f7ff fd2f 	bl	12cc <__pi_malloc>
    186e:	4b3b      	ldr	r3, [pc, #236]	; (195c <__inserial+0x114>)
    1870:	4604      	mov	r4, r0
    1872:	6018      	str	r0, [r3, #0]
    1874:	b918      	cbnz	r0, 187e <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    1876:	f7ff fd97 	bl	13a8 <__pi_waitmem>
		release;
    187a:	f7ff f98f 	bl	b9c <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    187e:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    1880:	682b      	ldr	r3, [r5, #0]
    1882:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    1884:	4b36      	ldr	r3, [pc, #216]	; (1960 <__inserial+0x118>)
    1886:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    1888:	2001      	movs	r0, #1
    188a:	2200      	movs	r2, #0
    188c:	4d33      	ldr	r5, [pc, #204]	; (195c <__inserial+0x114>)
    188e:	9000      	str	r0, [sp, #0]
    1890:	682b      	ldr	r3, [r5, #0]
    1892:	4611      	mov	r1, r2
    1894:	f7ff fc58 	bl	1148 <io>
	if (ptr == (char*) data) { // new line
    1898:	682b      	ldr	r3, [r5, #0]
    189a:	42a3      	cmp	r3, r4
    189c:	d10d      	bne.n	18ba <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    189e:	7823      	ldrb	r3, [r4, #0]
    18a0:	b923      	cbnz	r3, 18ac <__inserial+0x64>
			ptr++;
    18a2:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    18a4:	2002      	movs	r0, #2
			ptr++;
    18a6:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    18a8:	f7ff fbac 	bl	1004 <proceed>
		}

		if (*ptr < 0x20)
    18ac:	682b      	ldr	r3, [r5, #0]
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2b1f      	cmp	r3, #31
    18b2:	d802      	bhi.n	18ba <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    18b4:	2001      	movs	r0, #1
    18b6:	f7ff fba5 	bl	1004 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    18ba:	682b      	ldr	r3, [r5, #0]
    18bc:	781a      	ldrb	r2, [r3, #0]
    18be:	2a0a      	cmp	r2, #10
    18c0:	d001      	beq.n	18c6 <__inserial+0x7e>
    18c2:	2a0d      	cmp	r2, #13
    18c4:	d105      	bne.n	18d2 <__inserial+0x8a>
		*ptr = '\0';
    18c6:	2000      	movs	r0, #0
    18c8:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    18ca:	4b23      	ldr	r3, [pc, #140]	; (1958 <__inserial+0x110>)
    18cc:	601c      	str	r4, [r3, #0]
		finish;
    18ce:	f7ff fcd5 	bl	127c <kill>
	}

	if (len) {
    18d2:	4923      	ldr	r1, [pc, #140]	; (1960 <__inserial+0x118>)
    18d4:	680b      	ldr	r3, [r1, #0]
    18d6:	b123      	cbz	r3, 18e2 <__inserial+0x9a>
		ptr++;
    18d8:	682a      	ldr	r2, [r5, #0]
		len--;
    18da:	3b01      	subs	r3, #1
		ptr++;
    18dc:	3201      	adds	r2, #1
    18de:	602a      	str	r2, [r5, #0]
		len--;
    18e0:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    18e2:	2001      	movs	r0, #1
    18e4:	f7ff fb8e 	bl	1004 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    18e8:	2301      	movs	r3, #1
    18ea:	2200      	movs	r2, #0
    18ec:	4d1b      	ldr	r5, [pc, #108]	; (195c <__inserial+0x114>)
    18ee:	9300      	str	r3, [sp, #0]
    18f0:	4611      	mov	r1, r2
    18f2:	682b      	ldr	r3, [r5, #0]
    18f4:	2002      	movs	r0, #2
    18f6:	f7ff fc27 	bl	1148 <io>
	len -= 2;
    18fa:	4819      	ldr	r0, [pc, #100]	; (1960 <__inserial+0x118>)
    18fc:	6803      	ldr	r3, [r0, #0]
    18fe:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    1900:	682b      	ldr	r3, [r5, #0]
    1902:	f813 1b01 	ldrb.w	r1, [r3], #1
    1906:	3101      	adds	r1, #1
		len = *ptr + 1;
    1908:	4291      	cmp	r1, r2
    190a:	bfd4      	ite	le
    190c:	6001      	strle	r1, [r0, #0]
    190e:	6002      	strgt	r2, [r0, #0]
	ptr++;
    1910:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    1912:	2200      	movs	r2, #0
    1914:	4f12      	ldr	r7, [pc, #72]	; (1960 <__inserial+0x118>)
    1916:	4d11      	ldr	r5, [pc, #68]	; (195c <__inserial+0x114>)
    1918:	883b      	ldrh	r3, [r7, #0]
    191a:	4611      	mov	r1, r2
    191c:	9300      	str	r3, [sp, #0]
    191e:	682b      	ldr	r3, [r5, #0]
    1920:	2003      	movs	r0, #3
    1922:	f7ff fc11 	bl	1148 <io>
	len -= quant;
    1926:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1928:	4606      	mov	r6, r0
	len -= quant;
    192a:	1a18      	subs	r0, r3, r0
    192c:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    192e:	b918      	cbnz	r0, 1938 <__inserial+0xf0>
		__inpline = (char*)data;
    1930:	4b09      	ldr	r3, [pc, #36]	; (1958 <__inserial+0x110>)
    1932:	601c      	str	r4, [r3, #0]
		finish;
    1934:	f7ff fca2 	bl	127c <kill>
	}
	ptr += quant;
    1938:	6828      	ldr	r0, [r5, #0]
    193a:	4430      	add	r0, r6
    193c:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    193e:	2003      	movs	r0, #3

endstrand
    1940:	b003      	add	sp, #12
    1942:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    1946:	f7ff bb5d 	b.w	1004 <proceed>
endstrand
    194a:	b003      	add	sp, #12
    194c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1950:	f7ff baea 	b.w	f28 <__pi_badstate>
    1954:	200000a0 	andcs	r0, r0, r0, lsr #1
    1958:	2000005c 	andcs	r0, r0, ip, asr r0
    195c:	20000064 	andcs	r0, r0, r4, rrx
    1960:	20000060 	andcs	r0, r0, r0, rrx

00001964 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    1964:	f8dc 2000 	ldr.w	r2, [ip]
    1968:	b132      	cbz	r2, 1978 <outc.5724+0x14>
    196a:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    196e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    1972:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    1974:	bf88      	it	hi
    1976:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    1978:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    197c:	3301      	adds	r3, #1
    197e:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    1982:	4770      	bx	lr

00001984 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1988:	461c      	mov	r4, r3
    198a:	ab0c      	add	r3, sp, #48	; 0x30
    198c:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    198e:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1990:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    1992:	4f86      	ldr	r7, [pc, #536]	; (1bac <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1994:	9001      	str	r0, [sp, #4]
    1996:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    199a:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    199e:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    19a2:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    19a6:	d118      	bne.n	19da <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    19a8:	f892 9001 	ldrb.w	r9, [r2, #1]
    19ac:	1c95      	adds	r5, r2, #2
				outc ('\\');
    19ae:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    19b2:	f1b9 0f00 	cmp.w	r9, #0
    19b6:	d10b      	bne.n	19d0 <__pi_vfparse+0x4c>
				outc ('\\');
    19b8:	205c      	movs	r0, #92	; 0x5c
    19ba:	f7ff ffd3 	bl	1964 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    19be:	4648      	mov	r0, r9
    19c0:	f10d 0c04 	add.w	ip, sp, #4
    19c4:	f7ff ffce 	bl	1964 <outc.5724>
			if (c == '\0')
    19c8:	f1b9 0f00 	cmp.w	r9, #0
    19cc:	d103      	bne.n	19d6 <__pi_vfparse+0x52>
    19ce:	e027      	b.n	1a20 <__pi_vfparse+0x9c>
			outc (c);
    19d0:	4648      	mov	r0, r9
				outc (val);
    19d2:	f7ff ffc7 	bl	1964 <outc.5724>
				val = (word) va_arg (ap, aword);
    19d6:	462a      	mov	r2, r5
    19d8:	e7e1      	b.n	199e <__pi_vfparse+0x1a>
		if (c == '%') {
    19da:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    19de:	f040 80e2 	bne.w	1ba6 <__pi_vfparse+0x222>
			c = *fm++;
    19e2:	f892 8001 	ldrb.w	r8, [r2, #1]
    19e6:	1c95      	adds	r5, r2, #2
			switch (c) {
    19e8:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    19ec:	f000 80cd 	beq.w	1b8a <__pi_vfparse+0x206>
    19f0:	d81b      	bhi.n	1a2a <__pi_vfparse+0xa6>
    19f2:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    19f6:	d033      	beq.n	1a60 <__pi_vfparse+0xdc>
    19f8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    19fc:	d067      	beq.n	1ace <__pi_vfparse+0x14a>
    19fe:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    1a02:	f000 80bc 	beq.w	1b7e <__pi_vfparse+0x1fa>
				outc ('%');
    1a06:	2025      	movs	r0, #37	; 0x25
    1a08:	f10d 0c04 	add.w	ip, sp, #4
    1a0c:	f7ff ffaa 	bl	1964 <outc.5724>
				outc (c);
    1a10:	4640      	mov	r0, r8
    1a12:	f10d 0c04 	add.w	ip, sp, #4
    1a16:	f7ff ffa5 	bl	1964 <outc.5724>
				if (c == '\0')
    1a1a:	f1b8 0f00 	cmp.w	r8, #0
    1a1e:	d1da      	bne.n	19d6 <__pi_vfparse+0x52>
Ret:
				return d;
    1a20:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1a24:	b004      	add	sp, #16
    1a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1a2a:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1a2e:	d017      	beq.n	1a60 <__pi_vfparse+0xdc>
    1a30:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1a34:	d1e7      	bne.n	1a06 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    1a36:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1a3a:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1a3e:	fa1f f983 	uxth.w	r9, r3
    1a42:	fa49 f308 	asr.w	r3, r9, r8
    1a46:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1a4a:	5cf8      	ldrb	r0, [r7, r3]
    1a4c:	f10d 0c04 	add.w	ip, sp, #4
    1a50:	f7ff ff88 	bl	1964 <outc.5724>
					if (i == 0)
    1a54:	f1b8 0f00 	cmp.w	r8, #0
    1a58:	d0bd      	beq.n	19d6 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1a5a:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1a5e:	e7f0      	b.n	1a42 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1a60:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1a64:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1a68:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1a6c:	d10a      	bne.n	1a84 <__pi_vfparse+0x100>
    1a6e:	041b      	lsls	r3, r3, #16
    1a70:	d508      	bpl.n	1a84 <__pi_vfparse+0x100>
					outc ('-');
    1a72:	202d      	movs	r0, #45	; 0x2d
    1a74:	f10d 0c04 	add.w	ip, sp, #4
    1a78:	f7ff ff74 	bl	1964 <outc.5724>
					val = (~val) + 1;
    1a7c:	f1c9 0900 	rsb	r9, r9, #0
    1a80:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    1a84:	2305      	movs	r3, #5
				enci (10000);
    1a86:	f242 7810 	movw	r8, #10000	; 0x2710
    1a8a:	fbb9 f0f8 	udiv	r0, r9, r8
    1a8e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1a92:	d103      	bne.n	1a9c <__pi_vfparse+0x118>
    1a94:	3b01      	subs	r3, #1
    1a96:	d117      	bne.n	1ac8 <__pi_vfparse+0x144>
    1a98:	f04f 0801 	mov.w	r8, #1
    1a9c:	fa1f fa80 	uxth.w	sl, r0
    1aa0:	f10d 0c04 	add.w	ip, sp, #4
    1aa4:	3030      	adds	r0, #48	; 0x30
    1aa6:	f7ff ff5d 	bl	1964 <outc.5724>
    1aaa:	fbb8 f3f6 	udiv	r3, r8, r6
    1aae:	fb08 991a 	mls	r9, r8, sl, r9
    1ab2:	f1b8 0f09 	cmp.w	r8, #9
    1ab6:	fa1f f989 	uxth.w	r9, r9
    1aba:	b29b      	uxth	r3, r3
    1abc:	d98b      	bls.n	19d6 <__pi_vfparse+0x52>
    1abe:	fbb9 f0f3 	udiv	r0, r9, r3
    1ac2:	4698      	mov	r8, r3
    1ac4:	b2c0      	uxtb	r0, r0
    1ac6:	e7e9      	b.n	1a9c <__pi_vfparse+0x118>
    1ac8:	fbb8 f8f6 	udiv	r8, r8, r6
    1acc:	e7dd      	b.n	1a8a <__pi_vfparse+0x106>
				c = *fm;
    1ace:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    1ad0:	2b64      	cmp	r3, #100	; 0x64
    1ad2:	d001      	beq.n	1ad8 <__pi_vfparse+0x154>
    1ad4:	2b75      	cmp	r3, #117	; 0x75
    1ad6:	d132      	bne.n	1b3e <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    1ad8:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    1ada:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    1ade:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    1ae2:	d109      	bne.n	1af8 <__pi_vfparse+0x174>
    1ae4:	f1ba 0f00 	cmp.w	sl, #0
    1ae8:	da06      	bge.n	1af8 <__pi_vfparse+0x174>
						outc ('-');
    1aea:	202d      	movs	r0, #45	; 0x2d
    1aec:	f10d 0c04 	add.w	ip, sp, #4
    1af0:	f7ff ff38 	bl	1964 <outc.5724>
						val = (~val) + 1;
    1af4:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    1af8:	230a      	movs	r3, #10
					enci (1000000000UL);
    1afa:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1bb0 <__pi_vfparse+0x22c>
    1afe:	fbba f9f8 	udiv	r9, sl, r8
    1b02:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1b06:	d103      	bne.n	1b10 <__pi_vfparse+0x18c>
    1b08:	3b01      	subs	r3, #1
    1b0a:	d115      	bne.n	1b38 <__pi_vfparse+0x1b4>
    1b0c:	f04f 0801 	mov.w	r8, #1
    1b10:	f10d 0c04 	add.w	ip, sp, #4
    1b14:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1b18:	f7ff ff24 	bl	1964 <outc.5724>
    1b1c:	f1b8 0f09 	cmp.w	r8, #9
    1b20:	fbb8 f3f6 	udiv	r3, r8, r6
    1b24:	fb08 aa19 	mls	sl, r8, r9, sl
    1b28:	f67f af55 	bls.w	19d6 <__pi_vfparse+0x52>
    1b2c:	fbba f9f3 	udiv	r9, sl, r3
    1b30:	4698      	mov	r8, r3
    1b32:	fa5f f989 	uxtb.w	r9, r9
    1b36:	e7eb      	b.n	1b10 <__pi_vfparse+0x18c>
    1b38:	fbb8 f8f6 	udiv	r8, r8, r6
    1b3c:	e7df      	b.n	1afe <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1b3e:	2b78      	cmp	r3, #120	; 0x78
    1b40:	d114      	bne.n	1b6c <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1b42:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1b46:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1b4a:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1b4c:	fa29 f308 	lsr.w	r3, r9, r8
    1b50:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1b54:	5cf8      	ldrb	r0, [r7, r3]
    1b56:	f10d 0c04 	add.w	ip, sp, #4
    1b5a:	f7ff ff03 	bl	1964 <outc.5724>
						if (i == 0)
    1b5e:	f1b8 0f00 	cmp.w	r8, #0
    1b62:	f43f af38 	beq.w	19d6 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1b66:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1b6a:	e7ef      	b.n	1b4c <__pi_vfparse+0x1c8>
					outc ('%');
    1b6c:	4648      	mov	r0, r9
    1b6e:	f10d 0c04 	add.w	ip, sp, #4
    1b72:	f7ff fef7 	bl	1964 <outc.5724>
					outc ('l');
    1b76:	4640      	mov	r0, r8
    1b78:	f10d 0c04 	add.w	ip, sp, #4
    1b7c:	e729      	b.n	19d2 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1b7e:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1b82:	f10d 0c04 	add.w	ip, sp, #4
    1b86:	b280      	uxth	r0, r0
    1b88:	e723      	b.n	19d2 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1b8a:	f854 3b04 	ldr.w	r3, [r4], #4
    1b8e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1b92:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1b96:	2800      	cmp	r0, #0
    1b98:	f43f af1d 	beq.w	19d6 <__pi_vfparse+0x52>
					outc (*st);
    1b9c:	f10d 0c04 	add.w	ip, sp, #4
    1ba0:	f7ff fee0 	bl	1964 <outc.5724>
					st++;
    1ba4:	e7f5      	b.n	1b92 <__pi_vfparse+0x20e>
		c = *fm++;
    1ba6:	1c55      	adds	r5, r2, #1
    1ba8:	e709      	b.n	19be <__pi_vfparse+0x3a>
    1baa:	bf00      	nop
    1bac:	00002d74 	andeq	r2, r0, r4, ror sp
    1bb0:	3b9aca00 	blcc	fe6b43b8 <_estack+0xde6af3b8>

00001bb4 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bb8:	460e      	mov	r6, r1
    1bba:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1bbc:	4604      	mov	r4, r0
    1bbe:	b140      	cbz	r0, 1bd2 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1bc0:	4613      	mov	r3, r2
    1bc2:	460a      	mov	r2, r1
    1bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1bc8:	f7ff fedc 	bl	1984 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1bcc:	4620      	mov	r0, r4
    1bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1bd2:	4608      	mov	r0, r1
    1bd4:	f7ff fa94 	bl	1100 <__pi_strlen>
    1bd8:	f100 0511 	add.w	r5, r0, #17
    1bdc:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1bde:	4628      	mov	r0, r5
    1be0:	f7ff fb74 	bl	12cc <__pi_malloc>
    1be4:	4604      	mov	r4, r0
    1be6:	2800      	cmp	r0, #0
    1be8:	d0f0      	beq.n	1bcc <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1bea:	463b      	mov	r3, r7
    1bec:	4632      	mov	r2, r6
    1bee:	4629      	mov	r1, r5
    1bf0:	f7ff fec8 	bl	1984 <__pi_vfparse>
    1bf4:	4285      	cmp	r5, r0
    1bf6:	4680      	mov	r8, r0
    1bf8:	d2e8      	bcs.n	1bcc <vform+0x18>
		ufree (res);
    1bfa:	4620      	mov	r0, r4
    1bfc:	f7ff fb1a 	bl	1234 <__pi_free>
		goto Again;
    1c00:	4645      	mov	r5, r8
    1c02:	e7ec      	b.n	1bde <vform+0x2a>

00001c04 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1c04:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1c0a:	2800      	cmp	r0, #0
    1c0c:	f000 81b5 	beq.w	1f7a <vscan+0x376>
    1c10:	2900      	cmp	r1, #0
    1c12:	f000 81b4 	beq.w	1f7e <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1c16:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1c18:	270a      	movs	r7, #10
    1c1a:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1c1c:	f8df c370 	ldr.w	ip, [pc, #880]	; 1f90 <vscan+0x38c>
    1c20:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1c22:	f811 0b01 	ldrb.w	r0, [r1], #1
    1c26:	b170      	cbz	r0, 1c46 <vscan+0x42>
		if (*fmt++ != '%')
    1c28:	2825      	cmp	r0, #37	; 0x25
    1c2a:	d1f9      	bne.n	1c20 <vscan+0x1c>
		switch (*fmt++) {
    1c2c:	7870      	ldrb	r0, [r6, #1]
    1c2e:	1cb1      	adds	r1, r6, #2
    1c30:	286c      	cmp	r0, #108	; 0x6c
    1c32:	f000 80e1 	beq.w	1df8 <vscan+0x1f4>
    1c36:	d809      	bhi.n	1c4c <vscan+0x48>
    1c38:	2863      	cmp	r0, #99	; 0x63
    1c3a:	f000 8184 	beq.w	1f46 <vscan+0x342>
    1c3e:	2864      	cmp	r0, #100	; 0x64
    1c40:	d043      	beq.n	1cca <vscan+0xc6>
    1c42:	2800      	cmp	r0, #0
    1c44:	d1ec      	bne.n	1c20 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1c46:	4620      	mov	r0, r4
    1c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1c4c:	2875      	cmp	r0, #117	; 0x75
    1c4e:	d074      	beq.n	1d3a <vscan+0x136>
    1c50:	2878      	cmp	r0, #120	; 0x78
    1c52:	f000 8098 	beq.w	1d86 <vscan+0x182>
    1c56:	2873      	cmp	r0, #115	; 0x73
    1c58:	d1e2      	bne.n	1c20 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1c5a:	7818      	ldrb	r0, [r3, #0]
    1c5c:	461e      	mov	r6, r3
    1c5e:	f1a0 0e09 	sub.w	lr, r0, #9
    1c62:	fa5f fe8e 	uxtb.w	lr, lr
    1c66:	f1be 0f17 	cmp.w	lr, #23
    1c6a:	4698      	mov	r8, r3
    1c6c:	f103 0301 	add.w	r3, r3, #1
    1c70:	f240 8173 	bls.w	1f5a <vscan+0x356>
			if (*buf == '\0')
    1c74:	2800      	cmp	r0, #0
    1c76:	d0e6      	beq.n	1c46 <vscan+0x42>
			if (*buf != ',') {
    1c78:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1c7a:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1c7e:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1c82:	d00e      	beq.n	1ca2 <vscan+0x9e>
    1c84:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1c86:	f818 3b01 	ldrb.w	r3, [r8], #1
    1c8a:	f1a3 0009 	sub.w	r0, r3, #9
    1c8e:	2801      	cmp	r0, #1
    1c90:	d907      	bls.n	1ca2 <vscan+0x9e>
    1c92:	2b0d      	cmp	r3, #13
    1c94:	d005      	beq.n	1ca2 <vscan+0x9e>
    1c96:	2b2c      	cmp	r3, #44	; 0x2c
    1c98:	d003      	beq.n	1ca2 <vscan+0x9e>
    1c9a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1c9e:	f040 8163 	bne.w	1f68 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1ca2:	f896 8000 	ldrb.w	r8, [r6]
    1ca6:	4633      	mov	r3, r6
    1ca8:	f1a8 0009 	sub.w	r0, r8, #9
    1cac:	b2c0      	uxtb	r0, r0
    1cae:	2817      	cmp	r0, #23
    1cb0:	f106 0601 	add.w	r6, r6, #1
    1cb4:	f240 815b 	bls.w	1f6e <vscan+0x36a>
			if (*buf == ',') buf++;
    1cb8:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1cbc:	bf08      	it	eq
    1cbe:	4633      	moveq	r3, r6
			*sap = '\0';
    1cc0:	f88e 5000 	strb.w	r5, [lr]
			break;
    1cc4:	e7ac      	b.n	1c20 <vscan+0x1c>
		    case 'd': scani (word); break;
    1cc6:	2e00      	cmp	r6, #0
    1cc8:	d0bd      	beq.n	1c46 <vscan+0x42>
    1cca:	469e      	mov	lr, r3
    1ccc:	f813 6b01 	ldrb.w	r6, [r3], #1
    1cd0:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1cd4:	2809      	cmp	r0, #9
    1cd6:	d923      	bls.n	1d20 <vscan+0x11c>
    1cd8:	2e2d      	cmp	r6, #45	; 0x2d
    1cda:	d001      	beq.n	1ce0 <vscan+0xdc>
    1cdc:	2e2b      	cmp	r6, #43	; 0x2b
    1cde:	d1f2      	bne.n	1cc6 <vscan+0xc2>
    1ce0:	7818      	ldrb	r0, [r3, #0]
    1ce2:	469e      	mov	lr, r3
    1ce4:	3830      	subs	r0, #48	; 0x30
    1ce6:	2809      	cmp	r0, #9
    1ce8:	d8ef      	bhi.n	1cca <vscan+0xc6>
    1cea:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1cee:	f1d9 0800 	rsbs	r8, r9, #0
    1cf2:	eb48 0809 	adc.w	r8, r8, r9
    1cf6:	f852 6b04 	ldr.w	r6, [r2], #4
    1cfa:	3401      	adds	r4, #1
    1cfc:	8035      	strh	r5, [r6, #0]
    1cfe:	f89e 0000 	ldrb.w	r0, [lr]
    1d02:	4673      	mov	r3, lr
    1d04:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1d08:	f1b9 0f09 	cmp.w	r9, #9
    1d0c:	f10e 0e01 	add.w	lr, lr, #1
    1d10:	d909      	bls.n	1d26 <vscan+0x122>
    1d12:	f1b8 0f00 	cmp.w	r8, #0
    1d16:	d183      	bne.n	1c20 <vscan+0x1c>
    1d18:	8830      	ldrh	r0, [r6, #0]
    1d1a:	4240      	negs	r0, r0
    1d1c:	8030      	strh	r0, [r6, #0]
    1d1e:	e77f      	b.n	1c20 <vscan+0x1c>
    1d20:	f04f 0800 	mov.w	r8, #0
    1d24:	e7e7      	b.n	1cf6 <vscan+0xf2>
    1d26:	8833      	ldrh	r3, [r6, #0]
    1d28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d2c:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1d30:	3030      	adds	r0, #48	; 0x30
    1d32:	8030      	strh	r0, [r6, #0]
    1d34:	e7e3      	b.n	1cfe <vscan+0xfa>
		    case 'u': scanu (word); break;
    1d36:	2800      	cmp	r0, #0
    1d38:	d085      	beq.n	1c46 <vscan+0x42>
    1d3a:	7818      	ldrb	r0, [r3, #0]
    1d3c:	461e      	mov	r6, r3
    1d3e:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1d42:	f1be 0f09 	cmp.w	lr, #9
    1d46:	f103 0301 	add.w	r3, r3, #1
    1d4a:	d8f4      	bhi.n	1d36 <vscan+0x132>
    1d4c:	f852 eb04 	ldr.w	lr, [r2], #4
    1d50:	3401      	adds	r4, #1
    1d52:	f8ae 5000 	strh.w	r5, [lr]
    1d56:	7830      	ldrb	r0, [r6, #0]
    1d58:	4633      	mov	r3, r6
    1d5a:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1d5e:	f1b8 0f09 	cmp.w	r8, #9
    1d62:	f106 0601 	add.w	r6, r6, #1
    1d66:	f63f af5b 	bhi.w	1c20 <vscan+0x1c>
    1d6a:	f8be 3000 	ldrh.w	r3, [lr]
    1d6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1d76:	3830      	subs	r0, #48	; 0x30
    1d78:	f8ae 0000 	strh.w	r0, [lr]
    1d7c:	e7eb      	b.n	1d56 <vscan+0x152>
		    case 'x': scanx (word); break;
    1d7e:	f1be 0f00 	cmp.w	lr, #0
    1d82:	f43f af60 	beq.w	1c46 <vscan+0x42>
    1d86:	f893 e000 	ldrb.w	lr, [r3]
    1d8a:	461e      	mov	r6, r3
    1d8c:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1d90:	2809      	cmp	r0, #9
    1d92:	f103 0301 	add.w	r3, r3, #1
    1d96:	d904      	bls.n	1da2 <vscan+0x19e>
    1d98:	f02e 0020 	bic.w	r0, lr, #32
    1d9c:	3841      	subs	r0, #65	; 0x41
    1d9e:	2805      	cmp	r0, #5
    1da0:	d8ed      	bhi.n	1d7e <vscan+0x17a>
    1da2:	f852 eb04 	ldr.w	lr, [r2], #4
    1da6:	3401      	adds	r4, #1
    1da8:	f8ae 5000 	strh.w	r5, [lr]
    1dac:	f106 0805 	add.w	r8, r6, #5
    1db0:	f896 9000 	ldrb.w	r9, [r6]
    1db4:	4633      	mov	r3, r6
    1db6:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1dba:	b2c0      	uxtb	r0, r0
    1dbc:	2809      	cmp	r0, #9
    1dbe:	f106 0601 	add.w	r6, r6, #1
    1dc2:	f240 80de 	bls.w	1f82 <vscan+0x37e>
    1dc6:	f029 0020 	bic.w	r0, r9, #32
    1dca:	3841      	subs	r0, #65	; 0x41
    1dcc:	2805      	cmp	r0, #5
    1dce:	f63f af27 	bhi.w	1c20 <vscan+0x1c>
    1dd2:	4546      	cmp	r6, r8
    1dd4:	f43f af24 	beq.w	1c20 <vscan+0x1c>
    1dd8:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1ddc:	2b05      	cmp	r3, #5
    1dde:	bf94      	ite	ls
    1de0:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1de4:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1de8:	b2c0      	uxtb	r0, r0
    1dea:	f8be 3000 	ldrh.w	r3, [lr]
    1dee:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1df2:	f8ae 0000 	strh.w	r0, [lr]
    1df6:	e7db      	b.n	1db0 <vscan+0x1ac>
			switch (*fmt++) {
    1df8:	78b0      	ldrb	r0, [r6, #2]
    1dfa:	1cf1      	adds	r1, r6, #3
    1dfc:	2875      	cmp	r0, #117	; 0x75
    1dfe:	d07d      	beq.n	1efc <vscan+0x2f8>
    1e00:	d831      	bhi.n	1e66 <vscan+0x262>
    1e02:	2800      	cmp	r0, #0
    1e04:	f43f af1f 	beq.w	1c46 <vscan+0x42>
    1e08:	2864      	cmp	r0, #100	; 0x64
    1e0a:	f47f af09 	bne.w	1c20 <vscan+0x1c>
    1e0e:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1e10:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e14:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1e18:	2809      	cmp	r0, #9
    1e1a:	d962      	bls.n	1ee2 <vscan+0x2de>
    1e1c:	2e2d      	cmp	r6, #45	; 0x2d
    1e1e:	d001      	beq.n	1e24 <vscan+0x220>
    1e20:	2e2b      	cmp	r6, #43	; 0x2b
    1e22:	d15b      	bne.n	1edc <vscan+0x2d8>
    1e24:	7818      	ldrb	r0, [r3, #0]
    1e26:	4698      	mov	r8, r3
    1e28:	3830      	subs	r0, #48	; 0x30
    1e2a:	2809      	cmp	r0, #9
    1e2c:	d8ef      	bhi.n	1e0e <vscan+0x20a>
    1e2e:	3e2d      	subs	r6, #45	; 0x2d
    1e30:	4270      	negs	r0, r6
    1e32:	4170      	adcs	r0, r6
    1e34:	f852 eb04 	ldr.w	lr, [r2], #4
    1e38:	3401      	adds	r4, #1
    1e3a:	f8ce 5000 	str.w	r5, [lr]
    1e3e:	f898 6000 	ldrb.w	r6, [r8]
    1e42:	4643      	mov	r3, r8
    1e44:	3e30      	subs	r6, #48	; 0x30
    1e46:	fa5f f986 	uxtb.w	r9, r6
    1e4a:	f1b9 0f09 	cmp.w	r9, #9
    1e4e:	f108 0801 	add.w	r8, r8, #1
    1e52:	d948      	bls.n	1ee6 <vscan+0x2e2>
    1e54:	2800      	cmp	r0, #0
    1e56:	f47f aee3 	bne.w	1c20 <vscan+0x1c>
    1e5a:	f8de 0000 	ldr.w	r0, [lr]
    1e5e:	4240      	negs	r0, r0
    1e60:	f8ce 0000 	str.w	r0, [lr]
    1e64:	e6dc      	b.n	1c20 <vscan+0x1c>
    1e66:	2878      	cmp	r0, #120	; 0x78
    1e68:	f47f aeda 	bne.w	1c20 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1e6c:	f893 e000 	ldrb.w	lr, [r3]
    1e70:	461e      	mov	r6, r3
    1e72:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1e76:	2809      	cmp	r0, #9
    1e78:	f103 0301 	add.w	r3, r3, #1
    1e7c:	d904      	bls.n	1e88 <vscan+0x284>
    1e7e:	f02e 0020 	bic.w	r0, lr, #32
    1e82:	3841      	subs	r0, #65	; 0x41
    1e84:	2805      	cmp	r0, #5
    1e86:	d85a      	bhi.n	1f3e <vscan+0x33a>
    1e88:	f852 eb04 	ldr.w	lr, [r2], #4
    1e8c:	3401      	adds	r4, #1
    1e8e:	f8ce 5000 	str.w	r5, [lr]
    1e92:	f106 0809 	add.w	r8, r6, #9
    1e96:	f896 9000 	ldrb.w	r9, [r6]
    1e9a:	4633      	mov	r3, r6
    1e9c:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1ea0:	b2c0      	uxtb	r0, r0
    1ea2:	2809      	cmp	r0, #9
    1ea4:	f106 0601 	add.w	r6, r6, #1
    1ea8:	d96f      	bls.n	1f8a <vscan+0x386>
    1eaa:	f029 0020 	bic.w	r0, r9, #32
    1eae:	3841      	subs	r0, #65	; 0x41
    1eb0:	2805      	cmp	r0, #5
    1eb2:	f63f aeb5 	bhi.w	1c20 <vscan+0x1c>
    1eb6:	4546      	cmp	r6, r8
    1eb8:	f43f aeb2 	beq.w	1c20 <vscan+0x1c>
    1ebc:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1ec0:	2b05      	cmp	r3, #5
    1ec2:	bf94      	ite	ls
    1ec4:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1ec8:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1ecc:	b2c0      	uxtb	r0, r0
    1ece:	f8de 3000 	ldr.w	r3, [lr]
    1ed2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1ed6:	f8ce 0000 	str.w	r0, [lr]
    1eda:	e7dc      	b.n	1e96 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1edc:	2e00      	cmp	r6, #0
    1ede:	d196      	bne.n	1e0e <vscan+0x20a>
    1ee0:	e6b1      	b.n	1c46 <vscan+0x42>
    1ee2:	2000      	movs	r0, #0
    1ee4:	e7a6      	b.n	1e34 <vscan+0x230>
    1ee6:	f8de 3000 	ldr.w	r3, [lr]
    1eea:	b2b6      	uxth	r6, r6
    1eec:	437b      	muls	r3, r7
    1eee:	1b9e      	subs	r6, r3, r6
    1ef0:	f8ce 6000 	str.w	r6, [lr]
    1ef4:	e7a3      	b.n	1e3e <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1ef6:	2800      	cmp	r0, #0
    1ef8:	f43f aea5 	beq.w	1c46 <vscan+0x42>
    1efc:	7818      	ldrb	r0, [r3, #0]
    1efe:	461e      	mov	r6, r3
    1f00:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1f04:	f1be 0f09 	cmp.w	lr, #9
    1f08:	f103 0301 	add.w	r3, r3, #1
    1f0c:	d8f3      	bhi.n	1ef6 <vscan+0x2f2>
    1f0e:	f852 eb04 	ldr.w	lr, [r2], #4
    1f12:	3401      	adds	r4, #1
    1f14:	f8ce 5000 	str.w	r5, [lr]
    1f18:	7830      	ldrb	r0, [r6, #0]
    1f1a:	4633      	mov	r3, r6
    1f1c:	3830      	subs	r0, #48	; 0x30
    1f1e:	fa5f f880 	uxtb.w	r8, r0
    1f22:	f1b8 0f09 	cmp.w	r8, #9
    1f26:	f106 0601 	add.w	r6, r6, #1
    1f2a:	f63f ae79 	bhi.w	1c20 <vscan+0x1c>
    1f2e:	f8de 3000 	ldr.w	r3, [lr]
    1f32:	b280      	uxth	r0, r0
    1f34:	fb07 0003 	mla	r0, r7, r3, r0
    1f38:	f8ce 0000 	str.w	r0, [lr]
    1f3c:	e7ec      	b.n	1f18 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    1f3e:	f1be 0f00 	cmp.w	lr, #0
    1f42:	d193      	bne.n	1e6c <vscan+0x268>
    1f44:	e67f      	b.n	1c46 <vscan+0x42>
			if ((c = *buf++) == '\0')
    1f46:	f813 0b01 	ldrb.w	r0, [r3], #1
    1f4a:	2800      	cmp	r0, #0
    1f4c:	f43f ae7b 	beq.w	1c46 <vscan+0x42>
			sap = va_arg (ap, char*);
    1f50:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    1f54:	3401      	adds	r4, #1
			*sap = c;
    1f56:	7030      	strb	r0, [r6, #0]
			break;
    1f58:	e662      	b.n	1c20 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1f5a:	fa2c fe0e 	lsr.w	lr, ip, lr
    1f5e:	f01e 0f01 	tst.w	lr, #1
    1f62:	f47f ae7a 	bne.w	1c5a <vscan+0x56>
    1f66:	e687      	b.n	1c78 <vscan+0x74>
						*sap++ = *buf++;
    1f68:	f80e 3b01 	strb.w	r3, [lr], #1
    1f6c:	e68a      	b.n	1c84 <vscan+0x80>
			while (isspace (*buf)) buf++;
    1f6e:	fa2c f000 	lsr.w	r0, ip, r0
    1f72:	07c0      	lsls	r0, r0, #31
    1f74:	f53f ae95 	bmi.w	1ca2 <vscan+0x9e>
    1f78:	e6a2      	b.n	1cc0 <vscan+0xbc>
		return 0;
    1f7a:	4604      	mov	r4, r0
    1f7c:	e663      	b.n	1c46 <vscan+0x42>
    1f7e:	460c      	mov	r4, r1
    1f80:	e661      	b.n	1c46 <vscan+0x42>
		    case 'x': scanx (word); break;
    1f82:	4546      	cmp	r6, r8
    1f84:	f47f af31 	bne.w	1dea <vscan+0x1e6>
    1f88:	e64a      	b.n	1c20 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1f8a:	4546      	cmp	r6, r8
    1f8c:	d19f      	bne.n	1ece <vscan+0x2ca>
    1f8e:	e647      	b.n	1c20 <vscan+0x1c>
    1f90:	00800013 	addeq	r0, r0, r3, lsl r0

00001f94 <NOROM_AONBatMonTemperatureGetDegC>:
    1f94:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    1f96:	6818      	ldr	r0, [r3, #0]
    1f98:	4b08      	ldr	r3, [pc, #32]	; (1fbc <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    1f9a:	7819      	ldrb	r1, [r3, #0]
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    1f9e:	681a      	ldr	r2, [r3, #0]
    1fa0:	f340 0310 	sbfx	r3, r0, #0, #17
    1fa4:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    1fa8:	b248      	sxtb	r0, r1
    1faa:	4350      	muls	r0, r2
    1fac:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    1fb0:	3080      	adds	r0, #128	; 0x80
    1fb2:	1200      	asrs	r0, r0, #8
    1fb4:	4770      	bx	lr
    1fb6:	bf00      	nop
    1fb8:	40095030 	andmi	r5, r9, r0, lsr r0
    1fbc:	5000130c 	andpl	r1, r0, ip, lsl #6
    1fc0:	40095028 	andmi	r5, r9, r8, lsr #32

00001fc4 <NOROM_AONRTCCurrent64BitValueGet>:
    1fc4:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    1fc6:	4904      	ldr	r1, [pc, #16]	; (1fd8 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    1fc8:	681a      	ldr	r2, [r3, #0]
    1fca:	6808      	ldr	r0, [r1, #0]
    1fcc:	6819      	ldr	r1, [r3, #0]
    1fce:	4291      	cmp	r1, r2
    1fd0:	d1f8      	bne.n	1fc4 <NOROM_AONRTCCurrent64BitValueGet>
    1fd2:	4770      	bx	lr
    1fd4:	40092008 	andmi	r2, r9, r8
    1fd8:	4009200c 	andmi	r2, r9, ip

00001fdc <NOROM_CPUcpsid>:
    1fdc:	f3ef 8010 	mrs	r0, PRIMASK
    1fe0:	b672      	cpsid	i
    1fe2:	4770      	bx	lr

00001fe4 <NOROM_CPUcpsie>:
    1fe4:	f3ef 8010 	mrs	r0, PRIMASK
    1fe8:	b662      	cpsie	i
    1fea:	4770      	bx	lr

00001fec <TrimAfterColdResetWakeupFromShutDown>:
    1fec:	b538      	push	{r3, r4, r5, lr}
    1fee:	4605      	mov	r5, r0
    1ff0:	4b26      	ldr	r3, [pc, #152]	; (208c <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    1ff2:	2201      	movs	r2, #1
    1ff4:	601a      	str	r2, [r3, #0]
    1ff6:	4b26      	ldr	r3, [pc, #152]	; (2090 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d0fb      	beq.n	1ff6 <TrimAfterColdResetWakeupFromShutDown+0xa>
    1ffe:	4b25      	ldr	r3, [pc, #148]	; (2094 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    2000:	22c0      	movs	r2, #192	; 0xc0
    2002:	601a      	str	r2, [r3, #0]
    2004:	4b24      	ldr	r3, [pc, #144]	; (2098 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	079b      	lsls	r3, r3, #30
    200a:	bf5f      	itttt	pl
    200c:	4b23      	ldrpl	r3, [pc, #140]	; (209c <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    200e:	4a24      	ldrpl	r2, [pc, #144]	; (20a0 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    2010:	681b      	ldrpl	r3, [r3, #0]
    2012:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    2016:	bf5c      	itt	pl
    2018:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    201c:	7013      	strbpl	r3, [r2, #0]
    201e:	4b21      	ldr	r3, [pc, #132]	; (20a4 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    2020:	2200      	movs	r2, #0
    2022:	601a      	str	r2, [r3, #0]
    2024:	4b20      	ldr	r3, [pc, #128]	; (20a8 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    2026:	681c      	ldr	r4, [r3, #0]
    2028:	4620      	mov	r0, r4
    202a:	f000 f8d9 	bl	21e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    202e:	4628      	mov	r0, r5
    2030:	4621      	mov	r1, r4
    2032:	f000 fa0d 	bl	2450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    2036:	f240 221d 	movw	r2, #541	; 0x21d
    203a:	4b1c      	ldr	r3, [pc, #112]	; (20ac <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    203c:	681b      	ldr	r3, [r3, #0]
    203e:	b29b      	uxth	r3, r3
    2040:	4293      	cmp	r3, r2
    2042:	d814      	bhi.n	206e <TrimAfterColdResetWakeupFromShutDown+0x82>
    2044:	4a1a      	ldr	r2, [pc, #104]	; (20b0 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    2046:	6813      	ldr	r3, [r2, #0]
    2048:	6812      	ldr	r2, [r2, #0]
    204a:	f3c3 6303 	ubfx	r3, r3, #24, #4
    204e:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2052:	b103      	cbz	r3, 2056 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    2054:	3b01      	subs	r3, #1
    2056:	1f91      	subs	r1, r2, #6
    2058:	2901      	cmp	r1, #1
    205a:	bf86      	itte	hi
    205c:	3202      	addhi	r2, #2
    205e:	f002 020f 	andhi.w	r2, r2, #15
    2062:	2207      	movls	r2, #7
    2064:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    2068:	4a12      	ldr	r2, [pc, #72]	; (20b4 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    206a:	b2db      	uxtb	r3, r3
    206c:	7013      	strb	r3, [r2, #0]
    206e:	4620      	mov	r0, r4
    2070:	f000 fabc 	bl	25ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    2074:	4b10      	ldr	r3, [pc, #64]	; (20b8 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    2076:	2002      	movs	r0, #2
    2078:	681b      	ldr	r3, [r3, #0]
    207a:	68db      	ldr	r3, [r3, #12]
    207c:	4798      	blx	r3
    207e:	4b05      	ldr	r3, [pc, #20]	; (2094 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    2080:	2240      	movs	r2, #64	; 0x40
    2082:	601a      	str	r2, [r3, #0]
    2084:	4b0d      	ldr	r3, [pc, #52]	; (20bc <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    2086:	2201      	movs	r2, #1
    2088:	601a      	str	r2, [r3, #0]
    208a:	bd38      	pop	{r3, r4, r5, pc}
    208c:	40091010 	andmi	r1, r9, r0, lsl r0
    2090:	43220294 			; <UNDEFINED> instruction: 0x43220294
    2094:	400c6000 	andmi	r6, ip, r0
    2098:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    209c:	50003fac 	andpl	r3, r0, ip, lsr #31
    20a0:	40086256 	andmi	r6, r8, r6, asr r2
    20a4:	40091040 	andmi	r1, r9, r0, asr #32
    20a8:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    20ac:	50001314 	andpl	r1, r0, r4, lsl r3
    20b0:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    20b4:	40086002 	andmi	r6, r8, r2
    20b8:	100001a0 	andne	r0, r0, r0, lsr #3
    20bc:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000020c0 <NOROM_SetupTrimDevice>:
    20c0:	b510      	push	{r4, lr}
    20c2:	4b1f      	ldr	r3, [pc, #124]	; (2140 <NOROM_SetupTrimDevice+0x80>)
    20c4:	681c      	ldr	r4, [r3, #0]
    20c6:	1c63      	adds	r3, r4, #1
    20c8:	bf08      	it	eq
    20ca:	2400      	moveq	r4, #0
    20cc:	f000 fcde 	bl	2a8c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    20d0:	4b1c      	ldr	r3, [pc, #112]	; (2144 <NOROM_SetupTrimDevice+0x84>)
    20d2:	2200      	movs	r2, #0
    20d4:	601a      	str	r2, [r3, #0]
    20d6:	4a1c      	ldr	r2, [pc, #112]	; (2148 <NOROM_SetupTrimDevice+0x88>)
    20d8:	2301      	movs	r3, #1
    20da:	6013      	str	r3, [r2, #0]
    20dc:	4a1b      	ldr	r2, [pc, #108]	; (214c <NOROM_SetupTrimDevice+0x8c>)
    20de:	6013      	str	r3, [r2, #0]
    20e0:	f000 fa3e 	bl	2560 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    20e4:	4b1a      	ldr	r3, [pc, #104]	; (2150 <NOROM_SetupTrimDevice+0x90>)
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	b123      	cbz	r3, 20f4 <NOROM_SetupTrimDevice+0x34>
    20ea:	4b1a      	ldr	r3, [pc, #104]	; (2154 <NOROM_SetupTrimDevice+0x94>)
    20ec:	4620      	mov	r0, r4
    20ee:	681b      	ldr	r3, [r3, #0]
    20f0:	f7ff ff7c 	bl	1fec <TrimAfterColdResetWakeupFromShutDown>
    20f4:	4b18      	ldr	r3, [pc, #96]	; (2158 <NOROM_SetupTrimDevice+0x98>)
    20f6:	2200      	movs	r2, #0
    20f8:	601a      	str	r2, [r3, #0]
    20fa:	4a18      	ldr	r2, [pc, #96]	; (215c <NOROM_SetupTrimDevice+0x9c>)
    20fc:	6813      	ldr	r3, [r2, #0]
    20fe:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    2102:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2106:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    210e:	6013      	str	r3, [r2, #0]
    2110:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    2114:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    2118:	6813      	ldr	r3, [r2, #0]
    211a:	f3c3 3301 	ubfx	r3, r3, #12, #2
    211e:	2b01      	cmp	r3, #1
    2120:	bf01      	itttt	eq
    2122:	6813      	ldreq	r3, [r2, #0]
    2124:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    2128:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    212c:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2130:	bf04      	itt	eq
    2132:	6011      	streq	r1, [r2, #0]
    2134:	6013      	streq	r3, [r2, #0]
    2136:	4b0a      	ldr	r3, [pc, #40]	; (2160 <NOROM_SetupTrimDevice+0xa0>)
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	2b00      	cmp	r3, #0
    213c:	d1fb      	bne.n	2136 <NOROM_SetupTrimDevice+0x76>
    213e:	bd10      	pop	{r4, pc}
    2140:	5000131c 	andpl	r1, r0, ip, lsl r3
    2144:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    2148:	400c605c 	andmi	r6, ip, ip, asr r0
    214c:	43042208 	movwmi	r2, #16904	; 0x4208
    2150:	43280180 			; <UNDEFINED> instruction: 0x43280180
    2154:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    2158:	4008218c 	andmi	r2, r8, ip, lsl #3
    215c:	40032048 	andmi	r2, r3, r8, asr #32
    2160:	4268000c 	rsbmi	r0, r8, #12

00002164 <NOROM_SetupSetVddrLevel>:
    2164:	b530      	push	{r4, r5, lr}
    2166:	4b19      	ldr	r3, [pc, #100]	; (21cc <NOROM_SetupSetVddrLevel+0x68>)
    2168:	681a      	ldr	r2, [r3, #0]
    216a:	4b19      	ldr	r3, [pc, #100]	; (21d0 <NOROM_SetupSetVddrLevel+0x6c>)
    216c:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2170:	781b      	ldrb	r3, [r3, #0]
    2172:	2a15      	cmp	r2, #21
    2174:	f003 031f 	and.w	r3, r3, #31
    2178:	bf88      	it	hi
    217a:	3a20      	subhi	r2, #32
    217c:	2b15      	cmp	r3, #21
    217e:	bf88      	it	hi
    2180:	3b20      	subhi	r3, #32
    2182:	4293      	cmp	r3, r2
    2184:	d020      	beq.n	21c8 <NOROM_SetupSetVddrLevel+0x64>
    2186:	4913      	ldr	r1, [pc, #76]	; (21d4 <NOROM_SetupSetVddrLevel+0x70>)
    2188:	2000      	movs	r0, #0
    218a:	6008      	str	r0, [r1, #0]
    218c:	4608      	mov	r0, r1
    218e:	1ad1      	subs	r1, r2, r3
    2190:	2902      	cmp	r1, #2
    2192:	dc05      	bgt.n	21a0 <NOROM_SetupSetVddrLevel+0x3c>
    2194:	f06f 0401 	mvn.w	r4, #1
    2198:	42a1      	cmp	r1, r4
    219a:	bfb8      	it	lt
    219c:	4621      	movlt	r1, r4
    219e:	e000      	b.n	21a2 <NOROM_SetupSetVddrLevel+0x3e>
    21a0:	2102      	movs	r1, #2
    21a2:	440b      	add	r3, r1
    21a4:	490c      	ldr	r1, [pc, #48]	; (21d8 <NOROM_SetupSetVddrLevel+0x74>)
    21a6:	4d0d      	ldr	r5, [pc, #52]	; (21dc <NOROM_SetupSetVddrLevel+0x78>)
    21a8:	680c      	ldr	r4, [r1, #0]
    21aa:	f003 041f 	and.w	r4, r3, #31
    21ae:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    21b2:	802c      	strh	r4, [r5, #0]
    21b4:	4293      	cmp	r3, r2
    21b6:	f04f 0401 	mov.w	r4, #1
    21ba:	600c      	str	r4, [r1, #0]
    21bc:	d1e7      	bne.n	218e <NOROM_SetupSetVddrLevel+0x2a>
    21be:	680b      	ldr	r3, [r1, #0]
    21c0:	600c      	str	r4, [r1, #0]
    21c2:	680b      	ldr	r3, [r1, #0]
    21c4:	6004      	str	r4, [r0, #0]
    21c6:	680b      	ldr	r3, [r1, #0]
    21c8:	bd30      	pop	{r4, r5, pc}
    21ca:	bf00      	nop
    21cc:	50001388 	andpl	r1, r0, r8, lsl #7
    21d0:	40086206 	andmi	r6, r8, r6, lsl #4
    21d4:	43200098 			; <UNDEFINED> instruction: 0x43200098
    21d8:	4009202c 	andmi	r2, r9, ip, lsr #32
    21dc:	4008626c 	andmi	r6, r8, ip, ror #4

000021e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    21e0:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    21e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    21e8:	b510      	push	{r4, lr}
    21ea:	4604      	mov	r4, r0
    21ec:	d10f      	bne.n	220e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    21ee:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    21f2:	4a1e      	ldr	r2, [pc, #120]	; (226c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    21f4:	2380      	movs	r3, #128	; 0x80
    21f6:	7013      	strb	r3, [r2, #0]
    21f8:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    21fc:	f802 3c10 	strb.w	r3, [r2, #-16]
    2200:	f7ff ffb0 	bl	2164 <NOROM_SetupSetVddrLevel>
    2204:	4b1a      	ldr	r3, [pc, #104]	; (2270 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	f3c3 2304 	ubfx	r3, r3, #8, #5
    220c:	e003      	b.n	2216 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    220e:	4b19      	ldr	r3, [pc, #100]	; (2274 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    2210:	681b      	ldr	r3, [r3, #0]
    2212:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2216:	2b15      	cmp	r3, #21
    2218:	bf88      	it	hi
    221a:	3b20      	subhi	r3, #32
    221c:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2220:	3301      	adds	r3, #1
    2222:	2b15      	cmp	r3, #21
    2224:	dc05      	bgt.n	2232 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    2226:	f06f 0209 	mvn.w	r2, #9
    222a:	4293      	cmp	r3, r2
    222c:	bfb8      	it	lt
    222e:	4613      	movlt	r3, r2
    2230:	e000      	b.n	2234 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    2232:	2315      	movs	r3, #21
    2234:	4a10      	ldr	r2, [pc, #64]	; (2278 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    2236:	f003 031f 	and.w	r3, r3, #31
    223a:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    223e:	8013      	strh	r3, [r2, #0]
    2240:	4b0e      	ldr	r3, [pc, #56]	; (227c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    2242:	681b      	ldr	r3, [r3, #0]
    2244:	f013 0302 	ands.w	r3, r3, #2
    2248:	bf0a      	itet	eq
    224a:	4a0d      	ldreq	r2, [pc, #52]	; (2280 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    224c:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    2250:	6013      	streq	r3, [r2, #0]
    2252:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    2256:	4a0b      	ldr	r2, [pc, #44]	; (2284 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    2258:	f083 0301 	eor.w	r3, r3, #1
    225c:	6013      	str	r3, [r2, #0]
    225e:	f3c4 6480 	ubfx	r4, r4, #26, #1
    2262:	4b09      	ldr	r3, [pc, #36]	; (2288 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    2264:	f084 0401 	eor.w	r4, r4, #1
    2268:	601c      	str	r4, [r3, #0]
    226a:	bd10      	pop	{r4, pc}
    226c:	40086225 	andmi	r6, r8, r5, lsr #4
    2270:	50001388 	andpl	r1, r0, r8, lsl #7
    2274:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2278:	4008626e 	andmi	r6, r8, lr, ror #4
    227c:	40090000 	andmi	r0, r9, r0
    2280:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    2284:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    2288:	43200008 			; <UNDEFINED> instruction: 0x43200008

0000228c <NOROM_SetupGetTrimForAnabypassValue1>:
    228c:	4b15      	ldr	r3, [pc, #84]	; (22e4 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    228e:	0381      	lsls	r1, r0, #14
    2290:	681b      	ldr	r3, [r3, #0]
    2292:	f3c3 6283 	ubfx	r2, r3, #26, #4
    2296:	f3c3 238f 	ubfx	r3, r3, #10, #16
    229a:	d41f      	bmi.n	22dc <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    229c:	f340 2007 	sbfx	r0, r0, #8, #8
    22a0:	2800      	cmp	r0, #0
    22a2:	da19      	bge.n	22d8 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    22a4:	085b      	lsrs	r3, r3, #1
    22a6:	d105      	bne.n	22b4 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    22a8:	0852      	lsrs	r2, r2, #1
    22aa:	bf06      	itte	eq
    22ac:	2301      	moveq	r3, #1
    22ae:	461a      	moveq	r2, r3
    22b0:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    22b4:	3001      	adds	r0, #1
    22b6:	e7f3      	b.n	22a0 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    22b8:	005b      	lsls	r3, r3, #1
    22ba:	f043 0301 	orr.w	r3, r3, #1
    22be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    22c2:	d308      	bcc.n	22d6 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    22c4:	0052      	lsls	r2, r2, #1
    22c6:	f042 0201 	orr.w	r2, r2, #1
    22ca:	2a0f      	cmp	r2, #15
    22cc:	bf86      	itte	hi
    22ce:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    22d2:	220f      	movhi	r2, #15
    22d4:	2301      	movls	r3, #1
    22d6:	3801      	subs	r0, #1
    22d8:	2800      	cmp	r0, #0
    22da:	d1ed      	bne.n	22b8 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    22dc:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    22e0:	4770      	bx	lr
    22e2:	bf00      	nop
    22e4:	50001350 	andpl	r1, r0, r0, asr r3

000022e8 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    22e8:	4a04      	ldr	r2, [pc, #16]	; (22fc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    22ea:	6813      	ldr	r3, [r2, #0]
    22ec:	6810      	ldr	r0, [r2, #0]
    22ee:	f3c3 0387 	ubfx	r3, r3, #2, #8
    22f2:	f000 0003 	and.w	r0, r0, #3
    22f6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    22fa:	4770      	bx	lr
    22fc:	50001350 	andpl	r1, r0, r0, asr r3

00002300 <NOROM_SetupGetTrimForAmpcompTh2>:
    2300:	4b02      	ldr	r3, [pc, #8]	; (230c <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    2302:	6818      	ldr	r0, [r3, #0]
    2304:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    2308:	4770      	bx	lr
    230a:	bf00      	nop
    230c:	50001374 	andpl	r1, r0, r4, ror r3

00002310 <NOROM_SetupGetTrimForAmpcompTh1>:
    2310:	4b03      	ldr	r3, [pc, #12]	; (2320 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    2312:	6818      	ldr	r0, [r3, #0]
    2314:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2318:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    231c:	4770      	bx	lr
    231e:	bf00      	nop
    2320:	50001370 	andpl	r1, r0, r0, ror r3

00002324 <NOROM_SetupGetTrimForAmpcompCtrl>:
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	4b15      	ldr	r3, [pc, #84]	; (237c <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    2328:	4915      	ldr	r1, [pc, #84]	; (2380 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    232a:	681c      	ldr	r4, [r3, #0]
    232c:	6809      	ldr	r1, [r1, #0]
    232e:	f3c4 5203 	ubfx	r2, r4, #20, #4
    2332:	f011 0501 	ands.w	r5, r1, #1
    2336:	f3c4 4303 	ubfx	r3, r4, #16, #4
    233a:	d113      	bne.n	2364 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    233c:	4911      	ldr	r1, [pc, #68]	; (2384 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    233e:	6809      	ldr	r1, [r1, #0]
    2340:	f341 2603 	sbfx	r6, r1, #8, #4
    2344:	18b2      	adds	r2, r6, r2
    2346:	d403      	bmi.n	2350 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2348:	2a0f      	cmp	r2, #15
    234a:	bfa8      	it	ge
    234c:	220f      	movge	r2, #15
    234e:	e000      	b.n	2352 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    2350:	462a      	mov	r2, r5
    2352:	f341 3103 	sbfx	r1, r1, #12, #4
    2356:	18cb      	adds	r3, r1, r3
    2358:	d403      	bmi.n	2362 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    235a:	2b0f      	cmp	r3, #15
    235c:	bfa8      	it	ge
    235e:	230f      	movge	r3, #15
    2360:	e000      	b.n	2364 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2362:	2300      	movs	r3, #0
    2364:	b2a1      	uxth	r1, r4
    2366:	2821      	cmp	r0, #33	; 0x21
    2368:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    236c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2370:	bf84      	itt	hi
    2372:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    2376:	4323      	orrhi	r3, r4
    2378:	4618      	mov	r0, r3
    237a:	bd70      	pop	{r4, r5, r6, pc}
    237c:	50001378 	andpl	r1, r0, r8, ror r3
    2380:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2384:	50003fac 	andpl	r3, r0, ip, lsr #31

00002388 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    2388:	281f      	cmp	r0, #31
    238a:	bf83      	ittte	hi
    238c:	4b02      	ldrhi	r3, [pc, #8]	; (2398 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    238e:	6818      	ldrhi	r0, [r3, #0]
    2390:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    2394:	2000      	movls	r0, #0
    2396:	4770      	bx	lr
    2398:	50001398 	mulpl	r0, r8, r3

0000239c <NOROM_SetupGetTrimForAdcShModeEn>:
    239c:	2821      	cmp	r0, #33	; 0x21
    239e:	bf83      	ittte	hi
    23a0:	4b02      	ldrhi	r3, [pc, #8]	; (23ac <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    23a2:	6818      	ldrhi	r0, [r3, #0]
    23a4:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    23a8:	2001      	movls	r0, #1
    23aa:	4770      	bx	lr
    23ac:	5000138c 	andpl	r1, r0, ip, lsl #7

000023b0 <NOROM_SetupGetTrimForAdcShVbufEn>:
    23b0:	2821      	cmp	r0, #33	; 0x21
    23b2:	bf83      	ittte	hi
    23b4:	4b02      	ldrhi	r3, [pc, #8]	; (23c0 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    23b6:	6818      	ldrhi	r0, [r3, #0]
    23b8:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    23bc:	2001      	movls	r0, #1
    23be:	4770      	bx	lr
    23c0:	5000138c 	andpl	r1, r0, ip, lsl #7

000023c4 <NOROM_SetupGetTrimForXoscHfCtl>:
    23c4:	281f      	cmp	r0, #31
    23c6:	bf81      	itttt	hi
    23c8:	4b07      	ldrhi	r3, [pc, #28]	; (23e8 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    23ca:	681b      	ldrhi	r3, [r3, #0]
    23cc:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    23d0:	0080      	lslhi	r0, r0, #2
    23d2:	bf81      	itttt	hi
    23d4:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    23d8:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    23dc:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    23e0:	4318      	orrhi	r0, r3
    23e2:	bf98      	it	ls
    23e4:	2000      	movls	r0, #0
    23e6:	4770      	bx	lr
    23e8:	50001398 	mulpl	r0, r8, r3

000023ec <NOROM_SetupGetTrimForXoscHfFastStart>:
    23ec:	4b02      	ldr	r3, [pc, #8]	; (23f8 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    23ee:	6818      	ldr	r0, [r3, #0]
    23f0:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop
    23f8:	5000138c 	andpl	r1, r0, ip, lsl #7

000023fc <NOROM_SetupGetTrimForRadcExtCfg>:
    23fc:	281f      	cmp	r0, #31
    23fe:	bf81      	itttt	hi
    2400:	4b07      	ldrhi	r3, [pc, #28]	; (2420 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    2402:	681b      	ldrhi	r3, [r3, #0]
    2404:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    2408:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    240c:	bf81      	itttt	hi
    240e:	0400      	lslhi	r0, r0, #16
    2410:	031b      	lslhi	r3, r3, #12
    2412:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    2416:	b29b      	uxthhi	r3, r3
    2418:	bf8c      	ite	hi
    241a:	4318      	orrhi	r0, r3
    241c:	4801      	ldrls	r0, [pc, #4]	; (2424 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    241e:	4770      	bx	lr
    2420:	50001398 	mulpl	r0, r8, r3
    2424:	403f8000 	eorsmi	r8, pc, r0

00002428 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    2428:	2821      	cmp	r0, #33	; 0x21
    242a:	bf83      	ittte	hi
    242c:	4b02      	ldrhi	r3, [pc, #8]	; (2438 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    242e:	6818      	ldrhi	r0, [r3, #0]
    2430:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    2434:	2000      	movls	r0, #0
    2436:	4770      	bx	lr
    2438:	5000138c 	andpl	r1, r0, ip, lsl #7

0000243c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    243c:	2821      	cmp	r0, #33	; 0x21
    243e:	bf83      	ittte	hi
    2440:	4b02      	ldrhi	r3, [pc, #8]	; (244c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    2442:	6818      	ldrhi	r0, [r3, #0]
    2444:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    2448:	2000      	movls	r0, #0
    244a:	4770      	bx	lr
    244c:	5000138c 	andpl	r1, r0, ip, lsl #7

00002450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    2450:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2452:	4605      	mov	r5, r0
    2454:	4608      	mov	r0, r1
    2456:	f7ff ff19 	bl	228c <NOROM_SetupGetTrimForAnabypassValue1>
    245a:	4c39      	ldr	r4, [pc, #228]	; (2540 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    245c:	4602      	mov	r2, r0
    245e:	2118      	movs	r1, #24
    2460:	4620      	mov	r0, r4
    2462:	f000 fb33 	bl	2acc <NOROM_DDI32RegWrite>
    2466:	f7ff ff3f 	bl	22e8 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    246a:	4b36      	ldr	r3, [pc, #216]	; (2544 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    246c:	b280      	uxth	r0, r0
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	9000      	str	r0, [sp, #0]
    2472:	685e      	ldr	r6, [r3, #4]
    2474:	4620      	mov	r0, r4
    2476:	212c      	movs	r1, #44	; 0x2c
    2478:	f240 32ff 	movw	r2, #1023	; 0x3ff
    247c:	2300      	movs	r3, #0
    247e:	47b0      	blx	r6
    2480:	4b31      	ldr	r3, [pc, #196]	; (2548 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    2482:	4620      	mov	r0, r4
    2484:	681a      	ldr	r2, [r3, #0]
    2486:	211c      	movs	r1, #28
    2488:	f3c2 020d 	ubfx	r2, r2, #0, #14
    248c:	f000 fb1e 	bl	2acc <NOROM_DDI32RegWrite>
    2490:	f7ff ff36 	bl	2300 <NOROM_SetupGetTrimForAmpcompTh2>
    2494:	2114      	movs	r1, #20
    2496:	4602      	mov	r2, r0
    2498:	4620      	mov	r0, r4
    249a:	f000 fb17 	bl	2acc <NOROM_DDI32RegWrite>
    249e:	f7ff ff37 	bl	2310 <NOROM_SetupGetTrimForAmpcompTh1>
    24a2:	2110      	movs	r1, #16
    24a4:	4602      	mov	r2, r0
    24a6:	4620      	mov	r0, r4
    24a8:	f000 fb10 	bl	2acc <NOROM_DDI32RegWrite>
    24ac:	4628      	mov	r0, r5
    24ae:	f7ff ff39 	bl	2324 <NOROM_SetupGetTrimForAmpcompCtrl>
    24b2:	210c      	movs	r1, #12
    24b4:	4602      	mov	r2, r0
    24b6:	4620      	mov	r0, r4
    24b8:	f000 fb08 	bl	2acc <NOROM_DDI32RegWrite>
    24bc:	4628      	mov	r0, r5
    24be:	f7ff ff6d 	bl	239c <NOROM_SetupGetTrimForAdcShModeEn>
    24c2:	0040      	lsls	r0, r0, #1
    24c4:	4e21      	ldr	r6, [pc, #132]	; (254c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    24c6:	f040 0020 	orr.w	r0, r0, #32
    24ca:	b2c0      	uxtb	r0, r0
    24cc:	7030      	strb	r0, [r6, #0]
    24ce:	4628      	mov	r0, r5
    24d0:	f7ff ff6e 	bl	23b0 <NOROM_SetupGetTrimForAdcShVbufEn>
    24d4:	f040 0010 	orr.w	r0, r0, #16
    24d8:	b2c0      	uxtb	r0, r0
    24da:	7030      	strb	r0, [r6, #0]
    24dc:	4628      	mov	r0, r5
    24de:	f7ff ff71 	bl	23c4 <NOROM_SetupGetTrimForXoscHfCtl>
    24e2:	2128      	movs	r1, #40	; 0x28
    24e4:	4602      	mov	r2, r0
    24e6:	4620      	mov	r0, r4
    24e8:	f000 faf0 	bl	2acc <NOROM_DDI32RegWrite>
    24ec:	4628      	mov	r0, r5
    24ee:	f7ff ff4b 	bl	2388 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    24f2:	0040      	lsls	r0, r0, #1
    24f4:	4b16      	ldr	r3, [pc, #88]	; (2550 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    24f6:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    24fa:	b2c0      	uxtb	r0, r0
    24fc:	7018      	strb	r0, [r3, #0]
    24fe:	4628      	mov	r0, r5
    2500:	f7ff ff92 	bl	2428 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    2504:	00c0      	lsls	r0, r0, #3
    2506:	4b13      	ldr	r3, [pc, #76]	; (2554 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    2508:	f060 007f 	orn	r0, r0, #127	; 0x7f
    250c:	b2c0      	uxtb	r0, r0
    250e:	7018      	strb	r0, [r3, #0]
    2510:	4628      	mov	r0, r5
    2512:	f7ff ff93 	bl	243c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    2516:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    251a:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    251e:	4b0e      	ldr	r3, [pc, #56]	; (2558 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2520:	b280      	uxth	r0, r0
    2522:	8018      	strh	r0, [r3, #0]
    2524:	4628      	mov	r0, r5
    2526:	f7ff ff69 	bl	23fc <NOROM_SetupGetTrimForRadcExtCfg>
    252a:	2108      	movs	r1, #8
    252c:	4602      	mov	r2, r0
    252e:	4620      	mov	r0, r4
    2530:	f000 facc 	bl	2acc <NOROM_DDI32RegWrite>
    2534:	4b09      	ldr	r3, [pc, #36]	; (255c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    2536:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    253a:	601a      	str	r2, [r3, #0]
    253c:	b002      	add	sp, #8
    253e:	bd70      	pop	{r4, r5, r6, pc}
    2540:	400ca000 	andmi	sl, ip, r0
    2544:	100001a4 	andne	r0, r0, r4, lsr #3
    2548:	5000137c 	andpl	r1, r0, ip, ror r3
    254c:	400ca149 	andmi	sl, ip, r9, asr #2
    2550:	400ca14c 	andmi	sl, ip, ip, asr #2
    2554:	400ca141 	andmi	sl, ip, r1, asr #2
    2558:	400ca1dc 	ldrdmi	sl, [ip], -ip
    255c:	400ca040 	andmi	sl, ip, r0, asr #32

00002560 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    2560:	b530      	push	{r4, r5, lr}
    2562:	4b14      	ldr	r3, [pc, #80]	; (25b4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    2564:	681b      	ldr	r3, [r3, #0]
    2566:	2b00      	cmp	r3, #0
    2568:	d1fb      	bne.n	2562 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    256a:	4a13      	ldr	r2, [pc, #76]	; (25b8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    256c:	4913      	ldr	r1, [pc, #76]	; (25bc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    256e:	6813      	ldr	r3, [r2, #0]
    2570:	6809      	ldr	r1, [r1, #0]
    2572:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    2576:	f023 0307 	bic.w	r3, r3, #7
    257a:	f011 0f04 	tst.w	r1, #4
    257e:	4614      	mov	r4, r2
    2580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2584:	d003      	beq.n	258e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    2586:	f043 0305 	orr.w	r3, r3, #5
    258a:	6013      	str	r3, [r2, #0]
    258c:	bd30      	pop	{r4, r5, pc}
    258e:	490c      	ldr	r1, [pc, #48]	; (25c0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    2590:	f043 0004 	orr.w	r0, r3, #4
    2594:	680d      	ldr	r5, [r1, #0]
    2596:	07ad      	lsls	r5, r5, #30
    2598:	d009      	beq.n	25ae <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    259a:	f043 0307 	orr.w	r3, r3, #7
    259e:	6013      	str	r3, [r2, #0]
    25a0:	680b      	ldr	r3, [r1, #0]
    25a2:	f003 0303 	and.w	r3, r3, #3
    25a6:	2b03      	cmp	r3, #3
    25a8:	d1fa      	bne.n	25a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    25aa:	6020      	str	r0, [r4, #0]
    25ac:	bd30      	pop	{r4, r5, pc}
    25ae:	6010      	str	r0, [r2, #0]
    25b0:	bd30      	pop	{r4, r5, pc}
    25b2:	bf00      	nop
    25b4:	4268000c 	rsbmi	r0, r8, #12
    25b8:	40034004 	andmi	r4, r3, r4
    25bc:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    25c0:	40034000 	andmi	r4, r3, r0

000025c4 <NOROM_SetupSetAonRtcSubSecInc>:
    25c4:	4b07      	ldr	r3, [pc, #28]	; (25e4 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    25c6:	b282      	uxth	r2, r0
    25c8:	f3c0 4007 	ubfx	r0, r0, #16, #8
    25cc:	601a      	str	r2, [r3, #0]
    25ce:	6058      	str	r0, [r3, #4]
    25d0:	2201      	movs	r2, #1
    25d2:	3308      	adds	r3, #8
    25d4:	601a      	str	r2, [r3, #0]
    25d6:	4a04      	ldr	r2, [pc, #16]	; (25e8 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    25d8:	6812      	ldr	r2, [r2, #0]
    25da:	2a00      	cmp	r2, #0
    25dc:	d0fb      	beq.n	25d6 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    25de:	2200      	movs	r2, #0
    25e0:	601a      	str	r2, [r3, #0]
    25e2:	4770      	bx	lr
    25e4:	400c603c 	andmi	r6, ip, ip, lsr r0
    25e8:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000025ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    25ec:	f3c0 4381 	ubfx	r3, r0, #18, #2
    25f0:	2b01      	cmp	r3, #1
    25f2:	b510      	push	{r4, lr}
    25f4:	4604      	mov	r4, r0
    25f6:	d002      	beq.n	25fe <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    25f8:	2b02      	cmp	r3, #2
    25fa:	d02f      	beq.n	265c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    25fc:	e02a      	b.n	2654 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    25fe:	4b42      	ldr	r3, [pc, #264]	; (2708 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    2600:	681b      	ldr	r3, [r3, #0]
    2602:	039a      	lsls	r2, r3, #14
    2604:	d426      	bmi.n	2654 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    2606:	4a41      	ldr	r2, [pc, #260]	; (270c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    2608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    260c:	6011      	str	r1, [r2, #0]
    260e:	4940      	ldr	r1, [pc, #256]	; (2710 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    2610:	f3c3 3003 	ubfx	r0, r3, #12, #4
    2614:	680a      	ldr	r2, [r1, #0]
    2616:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    261a:	4302      	orrs	r2, r0
    261c:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2620:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    2624:	600a      	str	r2, [r1, #0]
    2626:	f851 2c01 	ldr.w	r2, [r1, #-1]
    262a:	f3c3 2003 	ubfx	r0, r3, #8, #4
    262e:	f022 020f 	bic.w	r2, r2, #15
    2632:	4302      	orrs	r2, r0
    2634:	f851 0c01 	ldr.w	r0, [r1, #-1]
    2638:	f841 2c01 	str.w	r2, [r1, #-1]
    263c:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2640:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    2644:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    2648:	4313      	orrs	r3, r2
    264a:	f851 2c02 	ldr.w	r2, [r1, #-2]
    264e:	f841 3c02 	str.w	r3, [r1, #-2]
    2652:	e003      	b.n	265c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    2654:	4b2d      	ldr	r3, [pc, #180]	; (270c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    2656:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    265a:	601a      	str	r2, [r3, #0]
    265c:	4b2d      	ldr	r3, [pc, #180]	; (2714 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    265e:	681b      	ldr	r3, [r3, #0]
    2660:	071b      	lsls	r3, r3, #28
    2662:	bf5e      	ittt	pl
    2664:	4b2c      	ldrpl	r3, [pc, #176]	; (2718 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    2666:	2240      	movpl	r2, #64	; 0x40
    2668:	601a      	strpl	r2, [r3, #0]
    266a:	4b2c      	ldr	r3, [pc, #176]	; (271c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    266c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2670:	601a      	str	r2, [r3, #0]
    2672:	f7ff febb 	bl	23ec <NOROM_SetupGetTrimForXoscHfFastStart>
    2676:	4b2a      	ldr	r3, [pc, #168]	; (2720 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    2678:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    267c:	b2c0      	uxtb	r0, r0
    267e:	7018      	strb	r0, [r3, #0]
    2680:	f3c4 5081 	ubfx	r0, r4, #22, #2
    2684:	2801      	cmp	r0, #1
    2686:	d00b      	beq.n	26a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    2688:	d302      	bcc.n	2690 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    268a:	2802      	cmp	r0, #2
    268c:	d026      	beq.n	26dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    268e:	e028      	b.n	26e2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    2690:	2004      	movs	r0, #4
    2692:	2101      	movs	r1, #1
    2694:	f000 fa1e 	bl	2ad4 <NOROM_OSCClockSourceSet>
    2698:	4822      	ldr	r0, [pc, #136]	; (2724 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    269a:	f7ff ff93 	bl	25c4 <NOROM_SetupSetAonRtcSubSecInc>
    269e:	e024      	b.n	26ea <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    26a0:	f000 fa46 	bl	2b30 <NOROM_OSCClockSourceGet>
    26a4:	4604      	mov	r4, r0
    26a6:	2004      	movs	r0, #4
    26a8:	4621      	mov	r1, r4
    26aa:	f000 fa13 	bl	2ad4 <NOROM_OSCClockSourceSet>
    26ae:	2004      	movs	r0, #4
    26b0:	f000 fa3e 	bl	2b30 <NOROM_OSCClockSourceGet>
    26b4:	42a0      	cmp	r0, r4
    26b6:	d1fa      	bne.n	26ae <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    26b8:	4b1b      	ldr	r3, [pc, #108]	; (2728 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    26ba:	681c      	ldr	r4, [r3, #0]
    26bc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    26c0:	f7ff ff80 	bl	25c4 <NOROM_SetupSetAonRtcSubSecInc>
    26c4:	4b19      	ldr	r3, [pc, #100]	; (272c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    26c6:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	0e20      	lsrs	r0, r4, #24
    26ce:	681b      	ldr	r3, [r3, #0]
    26d0:	2107      	movs	r1, #7
    26d2:	4798      	blx	r3
    26d4:	4b0d      	ldr	r3, [pc, #52]	; (270c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    26d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    26da:	601a      	str	r2, [r3, #0]
    26dc:	2004      	movs	r0, #4
    26de:	2103      	movs	r1, #3
    26e0:	e001      	b.n	26e6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    26e2:	2004      	movs	r0, #4
    26e4:	2102      	movs	r1, #2
    26e6:	f000 f9f5 	bl	2ad4 <NOROM_OSCClockSourceSet>
    26ea:	4b11      	ldr	r3, [pc, #68]	; (2730 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    26ec:	4a11      	ldr	r2, [pc, #68]	; (2734 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    26f4:	7013      	strb	r3, [r2, #0]
    26f6:	f647 0218 	movw	r2, #30744	; 0x7818
    26fa:	4b0f      	ldr	r3, [pc, #60]	; (2738 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    26fc:	801a      	strh	r2, [r3, #0]
    26fe:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    2702:	3b44      	subs	r3, #68	; 0x44
    2704:	681b      	ldr	r3, [r3, #0]
    2706:	bd10      	pop	{r4, pc}
    2708:	5000138c 	andpl	r1, r0, ip, lsl #7
    270c:	400ca040 	andmi	sl, ip, r0, asr #32
    2710:	4008600c 	andmi	r6, r8, ip
    2714:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2718:	400ca068 	andmi	sl, ip, r8, rrx
    271c:	400ca080 	andmi	sl, ip, r0, lsl #1
    2720:	400ca108 	andmi	sl, ip, r8, lsl #2
    2724:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    2728:	50003fa8 	andpl	r3, r0, r8, lsr #31
    272c:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2730:	5000136c 	andpl	r1, r0, ip, ror #6
    2734:	400cb00b 	andmi	fp, ip, fp
    2738:	400cb070 	andmi	fp, ip, r0, ror r0

0000273c <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    273c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2740:	4b77      	ldr	r3, [pc, #476]	; (2920 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    2742:	4607      	mov	r7, r0
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	4e77      	ldr	r6, [pc, #476]	; (2924 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2748:	f013 0f02 	tst.w	r3, #2
    274c:	d004      	beq.n	2758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    274e:	2308      	movs	r3, #8
    2750:	71b3      	strb	r3, [r6, #6]
    2752:	4a75      	ldr	r2, [pc, #468]	; (2928 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    2754:	4b75      	ldr	r3, [pc, #468]	; (292c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    2756:	e0df      	b.n	2918 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    2758:	f7ff fc1c 	bl	1f94 <NOROM_AONBatMonTemperatureGetDegC>
    275c:	4b74      	ldr	r3, [pc, #464]	; (2930 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    275e:	681d      	ldr	r5, [r3, #0]
    2760:	172a      	asrs	r2, r5, #28
    2762:	02ac      	lsls	r4, r5, #10
    2764:	f102 0101 	add.w	r1, r2, #1
    2768:	d408      	bmi.n	277c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    276a:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    276e:	10db      	asrs	r3, r3, #3
    2770:	2b08      	cmp	r3, #8
    2772:	bfa8      	it	ge
    2774:	2308      	movge	r3, #8
    2776:	4299      	cmp	r1, r3
    2778:	bfb8      	it	lt
    277a:	4619      	movlt	r1, r3
    277c:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    2780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2784:	d10a      	bne.n	279c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    2786:	4b6b      	ldr	r3, [pc, #428]	; (2934 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    2788:	681a      	ldr	r2, [r3, #0]
    278a:	681b      	ldr	r3, [r3, #0]
    278c:	f3c2 2204 	ubfx	r2, r2, #8, #5
    2790:	2a15      	cmp	r2, #21
    2792:	bf88      	it	hi
    2794:	3a20      	subhi	r2, #32
    2796:	f3c3 6304 	ubfx	r3, r3, #24, #5
    279a:	e00a      	b.n	27b2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    279c:	4b66      	ldr	r3, [pc, #408]	; (2938 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    279e:	681a      	ldr	r2, [r3, #0]
    27a0:	4b66      	ldr	r3, [pc, #408]	; (293c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    27a2:	f3c2 6204 	ubfx	r2, r2, #24, #5
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	2a15      	cmp	r2, #21
    27aa:	bf88      	it	hi
    27ac:	3a20      	subhi	r2, #32
    27ae:	f3c3 4304 	ubfx	r3, r3, #16, #5
    27b2:	2b15      	cmp	r3, #21
    27b4:	440a      	add	r2, r1
    27b6:	bf88      	it	hi
    27b8:	3b20      	subhi	r3, #32
    27ba:	2a15      	cmp	r2, #21
    27bc:	dc05      	bgt.n	27ca <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    27be:	f06f 0109 	mvn.w	r1, #9
    27c2:	428a      	cmp	r2, r1
    27c4:	bfb8      	it	lt
    27c6:	460a      	movlt	r2, r1
    27c8:	e000      	b.n	27cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    27ca:	2215      	movs	r2, #21
    27cc:	4c5c      	ldr	r4, [pc, #368]	; (2940 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    27ce:	f002 011f 	and.w	r1, r2, #31
    27d2:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    27d6:	8021      	strh	r1, [r4, #0]
    27d8:	495a      	ldr	r1, [pc, #360]	; (2944 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    27da:	6809      	ldr	r1, [r1, #0]
    27dc:	f011 0403 	ands.w	r4, r1, #3
    27e0:	bf18      	it	ne
    27e2:	2401      	movne	r4, #1
    27e4:	0749      	lsls	r1, r1, #29
    27e6:	bf48      	it	mi
    27e8:	f044 0402 	orrmi.w	r4, r4, #2
    27ec:	b10f      	cbz	r7, 27f2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    27ee:	f044 0404 	orr.w	r4, r4, #4
    27f2:	f996 1007 	ldrsb.w	r1, [r6, #7]
    27f6:	1a41      	subs	r1, r0, r1
    27f8:	2904      	cmp	r1, #4
    27fa:	dc03      	bgt.n	2804 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    27fc:	4949      	ldr	r1, [pc, #292]	; (2924 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    27fe:	7989      	ldrb	r1, [r1, #6]
    2800:	428c      	cmp	r4, r1
    2802:	d06f      	beq.n	28e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    2804:	f1b0 010f 	subs.w	r1, r0, #15
    2808:	9101      	str	r1, [sp, #4]
    280a:	f004 0101 	and.w	r1, r4, #1
    280e:	f8df a144 	ldr.w	sl, [pc, #324]	; 2954 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    2812:	f004 0904 	and.w	r9, r4, #4
    2816:	f004 0802 	and.w	r8, r4, #2
    281a:	460f      	mov	r7, r1
    281c:	d42a      	bmi.n	2874 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    281e:	9901      	ldr	r1, [sp, #4]
    2820:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    2824:	ea4f 2e21 	mov.w	lr, r1, asr #8
    2828:	f1be 0f07 	cmp.w	lr, #7
    282c:	9101      	str	r1, [sp, #4]
    282e:	d801      	bhi.n	2834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2830:	d104      	bne.n	283c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    2832:	e001      	b.n	2838 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    2834:	f04f 0e07 	mov.w	lr, #7
    2838:	2106      	movs	r1, #6
    283a:	e000      	b.n	283e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    283c:	4671      	mov	r1, lr
    283e:	f8df b118 	ldr.w	fp, [pc, #280]	; 2958 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    2842:	3101      	adds	r1, #1
    2844:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    2848:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    284c:	ebc1 0c0c 	rsb	ip, r1, ip
    2850:	fa5f f18c 	uxtb.w	r1, ip
    2854:	f1b9 0f00 	cmp.w	r9, #0
    2858:	d002      	beq.n	2860 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    285a:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    285e:	4459      	add	r1, fp
    2860:	f1b8 0f00 	cmp.w	r8, #0
    2864:	d002      	beq.n	286c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    2866:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    286a:	4459      	add	r1, fp
    286c:	b12f      	cbz	r7, 287a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    286e:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    2872:	e002      	b.n	287a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2874:	f04f 0e00 	mov.w	lr, #0
    2878:	4671      	mov	r1, lr
    287a:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    287e:	fa5f fc8a 	uxtb.w	ip, sl
    2882:	f1b9 0f00 	cmp.w	r9, #0
    2886:	d002      	beq.n	288e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    2888:	f3ca 2907 	ubfx	r9, sl, #8, #8
    288c:	44cc      	add	ip, r9
    288e:	f1b8 0f00 	cmp.w	r8, #0
    2892:	d002      	beq.n	289a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    2894:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2898:	44c4      	add	ip, r8
    289a:	b10f      	cbz	r7, 28a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    289c:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    28a0:	1a9b      	subs	r3, r3, r2
    28a2:	2b01      	cmp	r3, #1
    28a4:	bfb8      	it	lt
    28a6:	2301      	movlt	r3, #1
    28a8:	9f01      	ldr	r7, [sp, #4]
    28aa:	2234      	movs	r2, #52	; 0x34
    28ac:	4353      	muls	r3, r2
    28ae:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    28b2:	4379      	muls	r1, r7
    28b4:	b2ed      	uxtb	r5, r5
    28b6:	436b      	muls	r3, r5
    28b8:	3180      	adds	r1, #128	; 0x80
    28ba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    28be:	fbb3 f1f1 	udiv	r1, r3, r1
    28c2:	f64f 7cff 	movw	ip, #65535	; 0xffff
    28c6:	4561      	cmp	r1, ip
    28c8:	bf28      	it	cs
    28ca:	4661      	movcs	r1, ip
    28cc:	287f      	cmp	r0, #127	; 0x7f
    28ce:	80b1      	strh	r1, [r6, #4]
    28d0:	dc05      	bgt.n	28de <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    28d2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    28d6:	4298      	cmp	r0, r3
    28d8:	bfb8      	it	lt
    28da:	4618      	movlt	r0, r3
    28dc:	e000      	b.n	28e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    28de:	207f      	movs	r0, #127	; 0x7f
    28e0:	71f0      	strb	r0, [r6, #7]
    28e2:	71b4      	strb	r4, [r6, #6]
    28e4:	4b18      	ldr	r3, [pc, #96]	; (2948 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    28e6:	2100      	movs	r1, #0
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	6033      	str	r3, [r6, #0]
    28ec:	88b3      	ldrh	r3, [r6, #4]
    28ee:	2b1e      	cmp	r3, #30
    28f0:	bf9e      	ittt	ls
    28f2:	4a0c      	ldrls	r2, [pc, #48]	; (2924 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    28f4:	231f      	movls	r3, #31
    28f6:	8093      	strhls	r3, [r2, #4]
    28f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    28fc:	d302      	bcc.n	2904 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    28fe:	085b      	lsrs	r3, r3, #1
    2900:	3101      	adds	r1, #1
    2902:	e7f9      	b.n	28f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    2904:	4a11      	ldr	r2, [pc, #68]	; (294c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    2906:	3b0f      	subs	r3, #15
    2908:	430a      	orrs	r2, r1
    290a:	091b      	lsrs	r3, r3, #4
    290c:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    2910:	4a06      	ldr	r2, [pc, #24]	; (292c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    2912:	6013      	str	r3, [r2, #0]
    2914:	4b0e      	ldr	r3, [pc, #56]	; (2950 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    2916:	2200      	movs	r2, #0
    2918:	601a      	str	r2, [r3, #0]
    291a:	b003      	add	sp, #12
    291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2920:	40090000 	andmi	r0, r9, r0
    2924:	20000068 	andcs	r0, r0, r8, rrx
    2928:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    292c:	40091030 	andmi	r1, r9, r0, lsr r0
    2930:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2934:	50001388 	andpl	r1, r0, r8, lsl #7
    2938:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    293c:	5000113c 	andpl	r1, r0, ip, lsr r1
    2940:	4008626e 	andmi	r6, r8, lr, ror #4
    2944:	40082224 	andmi	r2, r8, r4, lsr #4
    2948:	40092008 	andmi	r2, r9, r8
    294c:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2950:	40091034 	andmi	r1, r9, r4, lsr r0
    2954:	5000139c 	mulpl	r0, ip, r3
    2958:	50001398 	mulpl	r0, r8, r3

0000295c <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    295c:	b510      	push	{r4, lr}
    295e:	4b14      	ldr	r3, [pc, #80]	; (29b0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2960:	681c      	ldr	r4, [r3, #0]
    2962:	b2a4      	uxth	r4, r4
    2964:	b314      	cbz	r4, 29ac <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    2966:	f7ff fb15 	bl	1f94 <NOROM_AONBatMonTemperatureGetDegC>
    296a:	4b12      	ldr	r3, [pc, #72]	; (29b4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    296c:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2970:	4290      	cmp	r0, r2
    2972:	da05      	bge.n	2980 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    2974:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2978:	4290      	cmp	r0, r2
    297a:	bfb8      	it	lt
    297c:	4610      	movlt	r0, r2
    297e:	71d8      	strb	r0, [r3, #7]
    2980:	889a      	ldrh	r2, [r3, #4]
    2982:	490c      	ldr	r1, [pc, #48]	; (29b4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2984:	4294      	cmp	r4, r2
    2986:	d310      	bcc.n	29aa <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2988:	4b0b      	ldr	r3, [pc, #44]	; (29b8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    298a:	6808      	ldr	r0, [r1, #0]
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	1aa4      	subs	r4, r4, r2
    2990:	3302      	adds	r3, #2
    2992:	1a1b      	subs	r3, r3, r0
    2994:	2b1f      	cmp	r3, #31
    2996:	bf28      	it	cs
    2998:	231f      	movcs	r3, #31
    299a:	085b      	lsrs	r3, r3, #1
    299c:	40dc      	lsrs	r4, r3
    299e:	4414      	add	r4, r2
    29a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    29a4:	4294      	cmp	r4, r2
    29a6:	bf28      	it	cs
    29a8:	4614      	movcs	r4, r2
    29aa:	808c      	strh	r4, [r1, #4]
    29ac:	bd10      	pop	{r4, pc}
    29ae:	bf00      	nop
    29b0:	40091034 	andmi	r1, r9, r4, lsr r0
    29b4:	20000068 	andcs	r0, r0, r8, rrx
    29b8:	40092008 	andmi	r2, r9, r8

000029bc <NOROM_SysCtrlResetSourceGet>:
    29bc:	4b04      	ldr	r3, [pc, #16]	; (29d0 <NOROM_SysCtrlResetSourceGet+0x14>)
    29be:	681a      	ldr	r2, [r3, #0]
    29c0:	0412      	lsls	r2, r2, #16
    29c2:	bf5a      	itte	pl
    29c4:	6818      	ldrpl	r0, [r3, #0]
    29c6:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    29ca:	2008      	movmi	r0, #8
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop
    29d0:	40090004 	andmi	r0, r9, r4

000029d4 <NOROM_ChipInfo_GetChipFamily>:
    29d4:	f64b 129a 	movw	r2, #47514	; 0xb99a
    29d8:	4b10      	ldr	r3, [pc, #64]	; (2a1c <NOROM_ChipInfo_GetChipFamily+0x48>)
    29da:	6818      	ldr	r0, [r3, #0]
    29dc:	f3c0 300f 	ubfx	r0, r0, #12, #16
    29e0:	4290      	cmp	r0, r2
    29e2:	d106      	bne.n	29f2 <NOROM_ChipInfo_GetChipFamily+0x1e>
    29e4:	681b      	ldr	r3, [r3, #0]
    29e6:	0f1b      	lsrs	r3, r3, #28
    29e8:	2b0b      	cmp	r3, #11
    29ea:	bf0c      	ite	eq
    29ec:	2004      	moveq	r0, #4
    29ee:	2000      	movne	r0, #0
    29f0:	e011      	b.n	2a16 <NOROM_ChipInfo_GetChipFamily+0x42>
    29f2:	f64b 13be 	movw	r3, #47550	; 0xb9be
    29f6:	4298      	cmp	r0, r3
    29f8:	d00a      	beq.n	2a10 <NOROM_ChipInfo_GetChipFamily+0x3c>
    29fa:	f64b 3341 	movw	r3, #47937	; 0xbb41
    29fe:	4298      	cmp	r0, r3
    2a00:	d008      	beq.n	2a14 <NOROM_ChipInfo_GetChipFamily+0x40>
    2a02:	f64b 3320 	movw	r3, #47904	; 0xbb20
    2a06:	4298      	cmp	r0, r3
    2a08:	bf14      	ite	ne
    2a0a:	20ff      	movne	r0, #255	; 0xff
    2a0c:	2002      	moveq	r0, #2
    2a0e:	e002      	b.n	2a16 <NOROM_ChipInfo_GetChipFamily+0x42>
    2a10:	2001      	movs	r0, #1
    2a12:	e000      	b.n	2a16 <NOROM_ChipInfo_GetChipFamily+0x42>
    2a14:	2003      	movs	r0, #3
    2a16:	b240      	sxtb	r0, r0
    2a18:	4770      	bx	lr
    2a1a:	bf00      	nop
    2a1c:	50001318 	andpl	r1, r0, r8, lsl r3

00002a20 <NOROM_ChipInfo_GetHwRevision>:
    2a20:	b538      	push	{r3, r4, r5, lr}
    2a22:	4b19      	ldr	r3, [pc, #100]	; (2a88 <NOROM_ChipInfo_GetHwRevision+0x68>)
    2a24:	681d      	ldr	r5, [r3, #0]
    2a26:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2a2a:	6818      	ldr	r0, [r3, #0]
    2a2c:	0f2d      	lsrs	r5, r5, #28
    2a2e:	b2c4      	uxtb	r4, r0
    2a30:	2c80      	cmp	r4, #128	; 0x80
    2a32:	bf28      	it	cs
    2a34:	2400      	movcs	r4, #0
    2a36:	f7ff ffcd 	bl	29d4 <NOROM_ChipInfo_GetChipFamily>
    2a3a:	2804      	cmp	r0, #4
    2a3c:	d821      	bhi.n	2a82 <NOROM_ChipInfo_GetHwRevision+0x62>
    2a3e:	e8df f000 	tbb	[pc, r0]
    2a42:	1b1b1303 	blne	6c7656 <__ccfg+0x6a76ae>
    2a46:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2a4a:	2d07      	cmp	r5, #7
    2a4c:	d819      	bhi.n	2a82 <NOROM_ChipInfo_GetHwRevision+0x62>
    2a4e:	e8df f005 	tbb	[pc, r5]
    2a52:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    2a56:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2a5a:	2014      	movs	r0, #20
    2a5c:	e012      	b.n	2a84 <NOROM_ChipInfo_GetHwRevision+0x64>
    2a5e:	2015      	movs	r0, #21
    2a60:	e010      	b.n	2a84 <NOROM_ChipInfo_GetHwRevision+0x64>
    2a62:	f104 0016 	add.w	r0, r4, #22
    2a66:	e00a      	b.n	2a7e <NOROM_ChipInfo_GetHwRevision+0x5e>
    2a68:	b125      	cbz	r5, 2a74 <NOROM_ChipInfo_GetHwRevision+0x54>
    2a6a:	2d02      	cmp	r5, #2
    2a6c:	d109      	bne.n	2a82 <NOROM_ChipInfo_GetHwRevision+0x62>
    2a6e:	f104 0014 	add.w	r0, r4, #20
    2a72:	e004      	b.n	2a7e <NOROM_ChipInfo_GetHwRevision+0x5e>
    2a74:	200a      	movs	r0, #10
    2a76:	e005      	b.n	2a84 <NOROM_ChipInfo_GetHwRevision+0x64>
    2a78:	b91d      	cbnz	r5, 2a82 <NOROM_ChipInfo_GetHwRevision+0x62>
    2a7a:	f104 000a 	add.w	r0, r4, #10
    2a7e:	b2c0      	uxtb	r0, r0
    2a80:	e000      	b.n	2a84 <NOROM_ChipInfo_GetHwRevision+0x64>
    2a82:	20ff      	movs	r0, #255	; 0xff
    2a84:	b240      	sxtb	r0, r0
    2a86:	bd38      	pop	{r3, r4, r5, pc}
    2a88:	50001318 	andpl	r1, r0, r8, lsl r3

00002a8c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2a8c:	b508      	push	{r3, lr}
    2a8e:	f7ff ffa1 	bl	29d4 <NOROM_ChipInfo_GetChipFamily>
    2a92:	2801      	cmp	r0, #1
    2a94:	d103      	bne.n	2a9e <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2a96:	f7ff ffc3 	bl	2a20 <NOROM_ChipInfo_GetHwRevision>
    2a9a:	2813      	cmp	r0, #19
    2a9c:	dc00      	bgt.n	2aa0 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2a9e:	e7fe      	b.n	2a9e <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2aa0:	bd08      	pop	{r3, pc}
	...

00002aa4 <AuxAdiDdiSafeWrite.constprop.1>:
    2aa4:	b538      	push	{r3, r4, r5, lr}
    2aa6:	4604      	mov	r4, r0
    2aa8:	460d      	mov	r5, r1
    2aaa:	f7ff fa97 	bl	1fdc <NOROM_CPUcpsid>
    2aae:	4b06      	ldr	r3, [pc, #24]	; (2ac8 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2ab0:	681a      	ldr	r2, [r3, #0]
    2ab2:	2a00      	cmp	r2, #0
    2ab4:	d0fb      	beq.n	2aae <AuxAdiDdiSafeWrite.constprop.1+0xa>
    2ab6:	2201      	movs	r2, #1
    2ab8:	6025      	str	r5, [r4, #0]
    2aba:	601a      	str	r2, [r3, #0]
    2abc:	b918      	cbnz	r0, 2ac6 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    2abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2ac2:	f7ff ba8f 	b.w	1fe4 <NOROM_CPUcpsie>
    2ac6:	bd38      	pop	{r3, r4, r5, pc}
    2ac8:	400c8000 	andmi	r8, ip, r0

00002acc <NOROM_DDI32RegWrite>:
    2acc:	4408      	add	r0, r1
    2ace:	4611      	mov	r1, r2
    2ad0:	f7ff bfe8 	b.w	2aa4 <AuxAdiDdiSafeWrite.constprop.1>

00002ad4 <NOROM_OSCClockSourceSet>:
    2ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2ad6:	460c      	mov	r4, r1
    2ad8:	07c1      	lsls	r1, r0, #31
    2ada:	4605      	mov	r5, r0
    2adc:	d509      	bpl.n	2af2 <NOROM_OSCClockSourceSet+0x1e>
    2ade:	4b12      	ldr	r3, [pc, #72]	; (2b28 <NOROM_OSCClockSourceSet+0x54>)
    2ae0:	b2a2      	uxth	r2, r4
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	2100      	movs	r1, #0
    2ae6:	9200      	str	r2, [sp, #0]
    2ae8:	685e      	ldr	r6, [r3, #4]
    2aea:	4810      	ldr	r0, [pc, #64]	; (2b2c <NOROM_OSCClockSourceSet+0x58>)
    2aec:	2201      	movs	r2, #1
    2aee:	460b      	mov	r3, r1
    2af0:	47b0      	blx	r6
    2af2:	07aa      	lsls	r2, r5, #30
    2af4:	d509      	bpl.n	2b0a <NOROM_OSCClockSourceSet+0x36>
    2af6:	4b0c      	ldr	r3, [pc, #48]	; (2b28 <NOROM_OSCClockSourceSet+0x54>)
    2af8:	b2a2      	uxth	r2, r4
    2afa:	681b      	ldr	r3, [r3, #0]
    2afc:	9200      	str	r2, [sp, #0]
    2afe:	685e      	ldr	r6, [r3, #4]
    2b00:	480a      	ldr	r0, [pc, #40]	; (2b2c <NOROM_OSCClockSourceSet+0x58>)
    2b02:	2100      	movs	r1, #0
    2b04:	2202      	movs	r2, #2
    2b06:	2301      	movs	r3, #1
    2b08:	47b0      	blx	r6
    2b0a:	076b      	lsls	r3, r5, #29
    2b0c:	d509      	bpl.n	2b22 <NOROM_OSCClockSourceSet+0x4e>
    2b0e:	4b06      	ldr	r3, [pc, #24]	; (2b28 <NOROM_OSCClockSourceSet+0x54>)
    2b10:	b2a4      	uxth	r4, r4
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	9400      	str	r4, [sp, #0]
    2b16:	685c      	ldr	r4, [r3, #4]
    2b18:	4804      	ldr	r0, [pc, #16]	; (2b2c <NOROM_OSCClockSourceSet+0x58>)
    2b1a:	2100      	movs	r1, #0
    2b1c:	220c      	movs	r2, #12
    2b1e:	2302      	movs	r3, #2
    2b20:	47a0      	blx	r4
    2b22:	b002      	add	sp, #8
    2b24:	bd70      	pop	{r4, r5, r6, pc}
    2b26:	bf00      	nop
    2b28:	100001a4 	andne	r0, r0, r4, lsr #3
    2b2c:	400ca000 	andmi	sl, ip, r0

00002b30 <NOROM_OSCClockSourceGet>:
    2b30:	b510      	push	{r4, lr}
    2b32:	4b08      	ldr	r3, [pc, #32]	; (2b54 <NOROM_OSCClockSourceGet+0x24>)
    2b34:	2804      	cmp	r0, #4
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	f04f 0134 	mov.w	r1, #52	; 0x34
    2b3c:	68dc      	ldr	r4, [r3, #12]
    2b3e:	bf07      	ittee	eq
    2b40:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2b44:	231d      	moveq	r3, #29
    2b46:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2b4a:	231c      	movne	r3, #28
    2b4c:	4802      	ldr	r0, [pc, #8]	; (2b58 <NOROM_OSCClockSourceGet+0x28>)
    2b4e:	47a0      	blx	r4
    2b50:	bd10      	pop	{r4, pc}
    2b52:	bf00      	nop
    2b54:	100001a4 	andne	r0, r0, r4, lsr #3
    2b58:	400ca000 	andmi	sl, ip, r0
    2b5c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2b60:	6f792072 	svcvs	0x00792072
    2b64:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2b68:	3a656d61 	bcc	195e0f4 <__ccfg+0x193e14c>
    2b6c:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2b70:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 29c8 <NOROM_SysCtrlResetSourceGet+0xc>
    2b74:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2b78:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2b7c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2b80:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2b84:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2b88:	20656874 	rsbcs	r6, r5, r4, ror r8
    2b8c:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2b90:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2b94:	706f2067 	rsbvc	r2, pc, r7, rrx
    2b98:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2b9c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2ba0:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2ba4:	6a642941 	bvs	190d0b0 <__ccfg+0x18ed108>
    2ba8:	20747375 	rsbscs	r7, r4, r5, ror r3
    2bac:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2bb0:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2bb4:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2bb8:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2bbc:	0a747261 	beq	1d1f548 <__ccfg+0x1cff5a0>
    2bc0:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2bc4:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2bc8:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2bcc:	6f697461 	svcvs	0x00697461
    2bd0:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2bd4:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2bd8:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2bdc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2be0:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2be4:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2be8:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2bec:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2bf0:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2bf4:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2bf8:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2bfc:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2c00:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2c04:	20726574 	rsbscs	r6, r2, r4, ror r5
    2c08:	20656874 	rsbcs	r6, r5, r4, ror r8
    2c0c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2c10:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2c14:	52282073 	eorpl	r2, r8, #115	; 0x73
    2c18:	4f206465 	svcmi	0x00206465
    2c1c:	4f202c4e 	svcmi	0x00202c4e
    2c20:	202c4646 	eorcs	r4, ip, r6, asr #12
    2c24:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2c28:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2c2c:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2c30:	203a2946 	eorscs	r2, sl, r6, asr #18
    2c34:	65522800 	ldrbvs	r2, [r2, #-2048]	; 0xfffff800
    2c38:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2c3c:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2c40:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2c44:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2c48:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2c4c:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2c50:	6e692029 	cdpvs	0, 6, cr2, cr9, cr9, {1}
    2c54:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2c58:	3a736c61 	bcc	1cddde4 <__ccfg+0x1cbde3c>
    2c5c:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
    2c60:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2c64:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2c68:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2c6c:	000d0a29 	andeq	r0, sp, r9, lsr #20
    2c70:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    2c74:	20726f74 	rsbscs	r6, r2, r4, ror pc
    2c78:	65727028 	ldrbvs	r7, [r2, #-40]!	; 0xffffffd8
    2c7c:	53207373 			; <UNDEFINED> instruction: 0x53207373
    2c80:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    2c84:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2c88:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2c8c:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    2c90:	203a5252 	eorscs	r5, sl, r2, asr r2
    2c94:	202c7825 	eorcs	r7, ip, r5, lsr #16
    2c98:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    2c9c:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    2ca0:	50006961 	andpl	r6, r0, r1, ror #18
    2ca4:	534f6369 	movtpl	r6, #62313	; 0xf369
    2ca8:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    2cac:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    2cb0:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    2cb4:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    2cb8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2cbc:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2cc0:	434e5541 	movtmi	r5, #58689	; 0xe541
    2cc4:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    2cc8:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    2ccc:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    2cd0:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    2cd4:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 2c5c <NOROM_OSCClockSourceGet+0x12c>
    2cd8:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2cdc:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2ce0:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    2ce4:	30303220 	eorscc	r3, r0, r0, lsr #4
    2ce8:	30322d32 	eorscc	r2, r2, r2, lsr sp
    2cec:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    2cf0:	6f746665 	svcvs	0x00746665
    2cf4:	20726576 	rsbscs	r6, r2, r6, ror r5
    2cf8:	3a4d4152 	bcc	1353248 <__ccfg+0x13332a0>
    2cfc:	20642520 	rsbcs	r2, r4, r0, lsr #10
    2d00:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2d04:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2d08:	00000000 	andeq	r0, r0, r0

00002d0c <port_confs>:
    2d0c:	00306080 	eorseq	r6, r0, r0, lsl #1
    2d10:	00386080 	eorseq	r6, r8, r0, lsl #1
    2d14:	00186010 	andseq	r6, r8, r0, lsl r0
    2d18:	2010400f 	andscs	r4, r0, pc
    2d1c:	30694000 	rsbcc	r4, r9, r0
    2d20:	30714000 	rsbscc	r4, r1, r0
    2d24:	00b86008 	adcseq	r6, r8, r8
    2d28:	60c94000 	sbcvs	r4, r9, r0
    2d2c:	60d14000 	sbcsvs	r4, r1, r0
    2d30:	60d94000 	sbcsvs	r4, r9, r0
    2d34:	60e14000 	rscvs	r4, r1, r0
    2d38:	00096380 	andeq	r6, r9, r0, lsl #7
    2d3c:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2d40:	20402000 	subcs	r2, r0, r0
    2d44:	00486080 	subeq	r6, r8, r0, lsl #1
    2d48:	00506080 	subseq	r6, r0, r0, lsl #1
    2d4c:	00a06000 	adceq	r6, r0, r0
    2d50:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2d54:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2d58:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2d5c:	6f690076 	svcvs	0x00690076
    2d60:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2d64:	616d0031 	cmnvs	sp, r1, lsr r0
    2d68:	6b00676c 	blvs	1cb20 <_etext+0x19d94>
    2d6c:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2d70:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002d74 <__pi_hex_enc_table>:
    2d74:	33323130 	teqcc	r2, #48, 2
    2d78:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2d7c:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2d80:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002d84 <__input_pins>:
    2d84:	9c9b9a99 	vldmials	fp, {s18-s170}

00002d88 <__button_list>:
    2d88:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .data:

20000000 <greenLed>:
int greenLed = 1;
20000000:	00000001 	andeq	r0, r0, r1

Disassembly of section .bss:

20000004 <On>:
	...

20000005 <displayCycle>:
	...

20000006 <greenOff>:
	...

20000008 <greenOn>:
word greenOn = 0;
20000008:	00000000 	andeq	r0, r0, r0

2000000c <led.5746>:
2000000c:	00000000 	andeq	r0, r0, r0

20000010 <ledFlag>:
int ledFlag = 0;
20000010:	00000000 	andeq	r0, r0, r0

20000014 <offTime.5749>:
	...

20000016 <onTime.5748>:
	...

20000018 <redLed>:
int redLed = 0;
20000018:	00000000 	andeq	r0, r0, r0

2000001c <redOff>:
	...

2000001e <redOn>:
	...

20000020 <username.5768>:
	...

20000034 <setdel>:
	...

20000036 <urates>:
	...

20000038 <__PCB>:
20000038:	00000000 	andeq	r0, r0, r0

2000003c <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
2000003c:	00000000 	andeq	r0, r0, r0

20000040 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000040:	00000000 	andeq	r0, r0, r0

20000044 <mevent>:
20000044:	00000000 	andeq	r0, r0, r0

20000048 <mnfree>:
20000048:	00000000 	andeq	r0, r0, r0

2000004c <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
2000004c:	00000000 	andeq	r0, r0, r0

20000050 <dopen>:
	...

20000051 <dstat>:
20000051:	 	andeq	r0, r0, r0

20000054 <len.5699>:
20000054:	00000000 	andeq	r0, r0, r0

20000058 <ptr.5698>:
20000058:	00000000 	andeq	r0, r0, r0

2000005c <__inpline>:
char *__inpline = NULL;
2000005c:	00000000 	andeq	r0, r0, r0

20000060 <len.5700>:
20000060:	00000000 	andeq	r0, r0, r0

20000064 <ptr.5699>:
20000064:	00000000 	andeq	r0, r0, r0

20000068 <powerQualGlobals>:
	...

20000070 <__pi_uart>:
	...

20000078 <system_event_count>:
20000078:	00000000 	andeq	r0, r0, r0

2000007c <entropy>:
2000007c:	00000000 	andeq	r0, r0, r0

20000080 <__pi_mintk>:
	...

20000082 <__pi_old>:
	...

20000084 <__pi_systat>:
	...

2000008c <__pi_new>:
2000008c:	00000000 	andeq	r0, r0, r0

20000090 <__pi_utims>:
	...

200000a0 <__pi_curr>:
200000a0:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000a4 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000007e4 	andeq	r0, r0, r4, ror #15
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000016d 	andeq	r0, r0, sp, ror #2
      10:	0002db0c 	andeq	sp, r2, ip, lsl #22
      14:	0000db00 	andeq	sp, r0, r0, lsl #22
      18:	00008800 	andeq	r8, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
      2c:	ec050202 	sfm	f0, 4, [r5], {2}
      30:	02000003 	andeq	r0, r0, #3
      34:	00a40504 	adceq	r0, r4, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00009f05 	andeq	r9, r0, r5, lsl #30
			i = k;
      40:	22180300 	andscs	r0, r8, #0, 6
				j->Next = k;
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
}
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
      54:	00210603 	eoreq	r0, r1, r3, lsl #12
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
      64:	03000002 	movweq	r0, #2
      68:	000017cf 	andeq	r1, r0, pc, asr #15
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00790704 	rsbseq	r0, r9, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00007407 	andeq	r7, r0, r7, lsl #8
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	0000040c 	andeq	r0, r0, ip, lsl #8
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	000015dc 	ldrdeq	r1, [r0], -ip
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013d403 	andseq	sp, r3, r3, lsl #8
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	162d0300 	strtne	r0, [sp], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	a1030000 	mrsge	r0, (UNDEF: 3)
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
        if(offTime > 0)
      f4:	00000098 	muleq	r0, r8, r0
            delay(offTime, Check_PERIOD);
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
        if(ledFlag == 0) {
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	0000028a 	andeq	r0, r0, sl, lsl #5
            led = redLed;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
            onTime = redOn;
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
            offTime = greenOff;
     114:	0000041b 	andeq	r0, r0, fp, lsl r4
     118:	ac033704 	stcge	7, cr3, [r3], {4}
        if(On)
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
            leds(led,1);
     124:	00000414 	andeq	r0, r0, r4, lsl r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     128:	ac033804 	stcge	8, cr3, [r3], {4}
            leds(led,0);
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
     130:	09000004 	stmdbeq	r0, {r2}
     134:	00000405 	andeq	r0, r0, r5, lsl #8
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
        if(onTime > 0)
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
            delay(onTime, OFF_PERIOD);
     140:	00004009 	andeq	r4, r0, r9
        when(&On, Check_PERIOD);
     144:	033c0400 	teqeq	ip, #0, 8
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
        release;
     14c:	006d0902 	rsbeq	r0, sp, r2, lsl #18
            led = greenLed;
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
            onTime = greenOn;
     158:	53090300 	movwpl	r0, #37632	; 0x9300
            offTime = greenOff;
     15c:	04000001 	streq	r0, [r0], #-1
            leds(led,0);
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
     164:	00040000 	andeq	r0, r4, r0
     168:	00044403 	andeq	r4, r4, r3, lsl #8
     16c:	03410400 	movteq	r0, #5120	; 0x1400
     170:	000000da 	ldrdeq	r0, [r0], -sl
     174:	00016806 	andeq	r6, r1, r6, lsl #16
        leds(led,0);
     178:	02b00a00 	adcseq	r0, r0, #0, 20
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
}
     188:	0000031c 	andeq	r0, r0, ip, lsl r3
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
     190:	01000001 	tsteq	r0, r1
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
     198:	02000001 	andeq	r0, r0, #1
     19c:	03b90801 			; <UNDEFINED> instruction: 0x03b90801
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
     1a4:	0a000001 	beq	1b0 <_Min_Stack_Size+0xb0>
     1a8:	0000032a 	andeq	r0, r0, sl, lsr #6
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
     1b0:	01000001 	tsteq	r0, r1
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
     1bc:	c3090000 	movwgt	r0, #36864	; 0x9000
     1c0:	05000002 	streq	r0, [r0, #-2]
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
    word number = 0;
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    int numbersIndex = 0;
     1cc:	00000609 	andeq	r0, r0, r9, lsl #12
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
        if(settingsInput[i] == ' ') {
     1d4:	04000000 	streq	r0, [r0], #-0
     1d8:	00048709 	andeq	r8, r4, r9, lsl #14
            numbers[numbersIndex] = number;
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
     1e0:	000000b8 	strheq	r0, [r0], -r8
            number = 0;
     1e4:	22030006 	andcs	r0, r3, #6
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	05000004 	streq	r0, [r0, #-4]
    redOn = numbers[0];
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
     1f0:	e60c0000 	str	r0, [ip], -r0
    redOff = numbers[1];
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
    greenOn = numbers[2];
     1fc:	00360a00 	eorseq	r0, r6, r0, lsl #20
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    greenOff = numbers[3];
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
     208:	0c010100 	stfeqs	f0, [r1], {-0}
}
     20c:	0000009b 	muleq	r0, fp, r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	0000021b 	andeq	r0, r0, fp, lsl r2
     214:	0000880e 	andeq	r8, r0, lr, lsl #16
            number = number * 10;
     218:	07000300 	streq	r0, [r0, -r0, lsl #6]
            number += settingsInput[i] - 48;
     21c:	09910601 	ldmibeq	r1, {r0, r9, sl}
     220:	00000245 	andeq	r0, r0, r5, asr #4
     224:	00047a08 	andeq	r7, r4, r8, lsl #20
     228:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
     230:	00010701 	andeq	r0, r1, r1, lsl #14
fsm root {
     234:	00003108 	andeq	r3, r0, r8, lsl #2
     238:	03940600 	orrseq	r0, r4, #0, 12
     23c:	000000ac 	andeq	r0, r0, ip, lsr #1
     240:	00000101 	andeq	r0, r0, r1, lsl #2
     244:	02810300 	addeq	r0, r1, #0, 6
     248:	96060000 	strls	r0, [r6], -r0
     24c:	00021b03 	andeq	r1, r2, r3, lsl #22
        ser_outf(Initial, "Enter your name: ");
     250:	02450500 	subeq	r0, r5, #0, 10
     254:	510c0000 	mrspl	r0, (UNDEF: 12)
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	61000002 	tstvs	r0, r2
     25c:	0d000002 	stceq	0, cr0, [r0, #-8]
        runfsm blinker;
     260:	02560500 	subseq	r0, r6, #0, 10
     264:	e60a0000 	str	r0, [sl], -r0
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	06000002 	streq	r0, [r0], -r2
     26c:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
     270:	01010000 	mrseq	r0, (UNDEF: 1)
        ser_inf(Get_Choice, "%c", &choice);
     274:	0000a70c 	andeq	sl, r0, ip, lsl #14
     278:	00027f00 	andeq	r7, r2, r0, lsl #30
        if (choice == 'A' || choice == 'a'){
     27c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     280:	00000274 	andeq	r0, r0, r4, ror r2
     284:	0003a20a 	andeq	sl, r3, sl, lsl #4
            proceed Adjust_Intervals;
     288:	13060700 	movwne	r0, #26368	; 0x6700
            proceed Monitor;
     28c:	0000027f 	andeq	r0, r0, pc, ror r2
        proceed Show_Menu;
     290:	330a0101 	movwcc	r0, #41217	; 0xa101
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	05000001 	streq	r0, [r0, #-1]
     298:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	01010000 	mrseq	r0, (UNDEF: 1)
     2a0:	0004940f 	andeq	r9, r4, pc, lsl #8
     2a4:	016e0800 	cmneq	lr, r0, lsl #16
        processSettingsInput(settings);
     2a8:	0002ad10 	andeq	sl, r2, r0, lsl sp
        On = YES;
     2ac:	b3040b00 	movwlt	r0, #19200	; 0x4b00
     2b0:	10000002 	andne	r0, r0, r2
        trigger(&On);
     2b4:	0002bf01 	andeq	fp, r2, r1, lsl #30
        proceed Show_Menu;
     2b8:	009b1100 	addseq	r1, fp, r0, lsl #2
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2c0:	000001a2 	andeq	r0, r0, r2, lsr #3
     2c4:	000002ca 	andeq	r0, r0, sl, asr #5
     2c8:	bf05000d 	svclt	0x0005000d
     2cc:	12000002 	andne	r0, r0, #2
     2d0:	00000454 	andeq	r0, r0, r4, asr r4
     2d4:	13017f08 	movwne	r7, #7944	; 0x1f08
        proceed Show_Menu;
     2d8:	000002ca 	andeq	r0, r0, sl, asr #5
     2dc:	9a120101 	bls	4806e8 <__ccfg+0x460740>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	08000003 	stmdaeq	r0, {r0, r1}
     2e4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
        displayCycle = YES;
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	047f1201 	ldrbteq	r1, [pc], #-513	; 2f4 <root+0xc0>
     2f0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     2f4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
        if(ch == 'S' || ch == 's'){
     2f8:	01010000 	mrseq	r0, (UNDEF: 1)
     2fc:	03080813 	movweq	r0, #34835	; 0x8813
     300:	03230903 			; <UNDEFINED> instruction: 0x03230903
            displayCycle = NO;
     304:	10140000 	andsne	r0, r4, r0
     308:	08000022 	stmdaeq	r0, {r1, r5}
            proceed Show_Menu;
     30c:	9b070307 	blls	1c0f30 <__ccfg+0x1a0f88>
        proceed Monitor;
     310:	00000000 	andeq	r0, r0, r0
     314:	00055b14 	andeq	r5, r5, r4, lsl fp
     318:	03080800 	movweq	r0, #34816	; 0x8800
        leds(1, 0);
     31c:	0000ce08 	andeq	ip, r0, r8, lsl #28
     320:	0f000400 	svceq	0x00000400
     324:	00000261 	andeq	r0, r0, r1, ror #4
     328:	03030908 	movweq	r0, #14600	; 0x3908
     32c:	000002fc 	strdeq	r0, [r0], -ip
        leds(0, 0);
     330:	0004a315 	andeq	sl, r4, r5, lsl r3
     334:	0b083000 	bleq	20c33c <__ccfg+0x1ec394>
     338:	03930803 	orrseq	r0, r3, #196608	; 0x30000
     33c:	9c140000 	ldcls	0, cr0, [r4], {-0}
     340:	08000004 	stmdaeq	r0, {r2}
     344:	9b070314 	blls	1c0f9c <__ccfg+0x1a0ff4>
        } else if (choice == 'S' || choice == 's') {
     348:	00000000 	andeq	r0, r0, r0
            proceed Stop;
     34c:	0002cd14 	andeq	ip, r2, r4, lsl sp
        } else if (choice == 'V' || choice == 'v') {
     350:	03150800 	tsteq	r5, #0, 16
            proceed View_Settings;
     354:	00009b07 	andeq	r9, r0, r7, lsl #22
        } else if (choice == 'M' || choice == 'm') {
     358:	97140200 	ldrls	r0, [r4, -r0, lsl #4]
            proceed Monitor;
     35c:	08000004 	stmdaeq	r0, {r2}
     360:	a00a0316 	andge	r0, sl, r6, lsl r3
     364:	04000002 	streq	r0, [r0], #-2
     368:	000f5b14 	andeq	r5, pc, r4, lsl fp	; <UNPREDICTABLE>
     36c:	03170800 	tsteq	r7, #0, 16
     370:	0000ce08 	andeq	ip, r0, r8, lsl #28
     374:	4d140800 	ldcmi	8, cr0, [r4, #-0]
     378:	08000004 	stmdaeq	r0, {r2}
     37c:	930f0318 	movwls	r0, #62232	; 0xf318
     380:	0c000003 	stceq	0, cr0, [r0], {3}
     384:	0002c814 	andeq	ip, r2, r4, lsl r8
     388:	03190800 	tsteq	r9, #0, 16
     38c:	0003a315 	andeq	sl, r3, r5, lsl r3
     390:	0c002c00 	stceq	12, cr2, [r0], {-0}
     394:	00000323 	andeq	r0, r0, r3, lsr #6
     398:	000003a3 	andeq	r0, r0, r3, lsr #7
     39c:	0000880e 	andeq	r8, r0, lr, lsl #16
     3a0:	0b000300 	bleq	fa8 <update_n_wake+0x70>
static void devinit_uart (int devnum) {
     3a4:	00033004 	andeq	r3, r3, r4
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	04ae0f00 	strteq	r0, [lr], #3840	; 0xf00
     3ac:	1c080000 	stcne	0, cr0, [r8], {-0}
void udelay (volatile word n) {
     3b0:	03301b03 	teqeq	r0, #3072	; 0xc00
     3b4:	90120000 	andsls	r0, r2, r0
	while (n) {
     3b8:	08000003 	stmdaeq	r0, {r0, r1}
     3bc:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
}
     3c0:	01000003 	tsteq	r0, r3
	while (n--);
     3c4:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
     3c8:	16000003 	strne	r0, [r0], -r3
     3cc:	00000298 	muleq	r0, r8, r2
		n--;
     3d0:	81051801 	tsthi	r5, r1, lsl #16
     3d4:	01000000 	mrseq	r0, (UNDEF: 0)
     3d8:	00000305 	andeq	r0, r0, r5, lsl #6
void mdelay (volatile word n) {
     3dc:	b9162000 	ldmdblt	r6, {sp}
     3e0:	01000004 	tsteq	r0, r4
	while (n) {
     3e4:	019b0619 	orrseq	r0, fp, r9, lsl r6
     3e8:	05010000 	streq	r0, [r1, #-0]
}
     3ec:	00000003 	andeq	r0, r0, r3
		udelay (999);
     3f0:	02d31600 	sbcseq	r1, r3, #0, 12
     3f4:	1a010000 	bne	403fc <__ccfg+0x20454>
		n--;
     3f8:	00009b06 	andeq	r9, r0, r6, lsl #22
     3fc:	03050100 	movweq	r0, #20736	; 0x5100
     400:	20000008 	andcs	r0, r0, r8
     404:	00031316 	andeq	r1, r3, r6, lsl r3
void __pi_ondomain (lword d) {
     408:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
     40c:	0000009b 	muleq	r0, fp, r0
		if (__pi_systat.effpdm > 1)
     410:	06030501 	streq	r0, [r3], -r1, lsl #10
     414:	16200000 	strtne	r0, [r0], -r0
			__pi_systat.effpdm = 1;
     418:	00000047 	andeq	r0, r0, r7, asr #32
	PRCMPowerDomainOn (d);
     41c:	81051d01 	tsthi	r5, r1, lsl #26
     420:	01000000 	mrseq	r0, (UNDEF: 0)
     424:	00180305 	andseq	r0, r8, r5, lsl #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	06162000 	ldreq	r2, [r6], -r0
     42c:	01000003 	tsteq	r0, r3
     430:	019b061e 	orrseq	r0, fp, lr, lsl r6
	__pi_systat.ondmns |= d;
     434:	05010000 	streq	r0, [r1, #-0]
     438:	00000003 	andeq	r0, r0, r3
}
     43c:	04671600 	strbteq	r1, [r7], #-1536	; 0xfffffa00
     440:	1f010000 	svcne	0x00010000
void __pi_syserror (word ec, const char *m) {
     444:	00009b06 	andeq	r9, r0, r6, lsl #22
	diag ("SYSERR: %x, %s", ec, m);
     448:	03050100 	movweq	r0, #20736	; 0x5100
     44c:	2000001e 	andcs	r0, r0, lr, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
     450:	0003f616 	andeq	pc, r3, r6, lsl r6	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	06200100 	strteq	r0, [r0], -r0, lsl #2
     458:	0000009b 	muleq	r0, fp, r0
     45c:	1c030501 	cfstr32ne	mvfx0, [r3], {1}
		all_leds_blink;
     460:	16200000 	strtne	r0, [r0], -r0
     464:	0000043c 	andeq	r0, r0, ip, lsr r4
     468:	81052201 	tsthi	r5, r1, lsl #4
     46c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	00100305 	andseq	r0, r0, r5, lsl #6
     474:	5a162000 	bpl	58847c <__ccfg+0x5684d4>
     478:	01000001 	tsteq	r0, r1
     47c:	00810524 	addeq	r0, r1, r4, lsr #10
     480:	05010000 	streq	r0, [r1, #-0]
     484:	00000003 	andeq	r0, r0, r3
	while (1) {
     488:	6e4f1700 	cdpvs	7, 4, cr1, cr15, cr0, {0}
     48c:	09260100 	stmdbeq	r6!, {r8}
     490:	0000008f 	andeq	r0, r0, pc, lsl #1
     494:	04030501 	streq	r0, [r3], #-1281	; 0xfffffaff
void tci_run_delay_timer () {
     498:	16200000 	strtne	r0, [r0], -r0
	setdel = __pi_mintk - __pi_old;
     49c:	0000046d 	andeq	r0, r0, sp, ror #8
     4a0:	8f092701 	svchi	0x00092701
     4a4:	01000000 	mrseq	r0, (UNDEF: 0)
     4a8:	00050305 	andeq	r0, r5, r5, lsl #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4ac:	01182000 	tsteq	r8, r0
     4b0:	000004c8 	andeq	r0, r0, r8, asr #9
     4b4:	01069701 	tsteq	r6, r1, lsl #14
     4b8:	00000234 	andeq	r0, r0, r4, lsr r2
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	000003a4 	andeq	r0, r0, r4, lsr #7
	sti_tim;
     4c0:	05f59c01 	ldrbeq	r9, [r5, #3073]!	; 0xc01
}
     4c4:	bf190000 	svclt	0x00190000
     4c8:	01000000 	mrseq	r0, (UNDEF: 0)
     4cc:	009b1197 	umullseq	r1, fp, r7, r1
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	231a0000 	tstcs	sl, #0
	cli_aux;
     4d8:	01000001 	tsteq	r0, r1
     4dc:	024e149b 	subeq	r1, lr, #-1694498816	; 0x9b000000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	4e1a0000 	cdpmi	0, 1, cr0, cr10, cr0, {0}
     4e4:	01000000 	mrseq	r0, (UNDEF: 0)
     4e8:	0256179e 	subseq	r1, r6, #41418752	; 0x2780000
     4ec:	c71a0000 	ldrgt	r0, [sl, -r0]
	sti_aux;
     4f0:	01000000 	mrseq	r0, (UNDEF: 0)
}
     4f4:	02601aa1 	rsbeq	r1, r0, #659456	; 0xa1000
     4f8:	ad1a0000 	ldcge	0, cr0, [sl, #-0]
     4fc:	01000000 	mrseq	r0, (UNDEF: 0)
void AONRTCIntHandler () {
     500:	026818a4 	rsbeq	r1, r8, #164, 16	; 0xa40000
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	291a0000 	ldmdbcs	sl, {}	; <UNPREDICTABLE>
     508:	01000004 	tsteq	r0, r4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	027219ad 	rsbseq	r1, r2, #2834432	; 0x2b4000
		if (__pi_utims [0] == 0)
     510:	d31a0000 	tstle	sl, #0
     514:	01000003 	tsteq	r0, r3
		if (*(__pi_utims [0])) {
     518:	02941fbe 	addseq	r1, r4, #760	; 0x2f8
     51c:	641a0000 	ldrvs	r0, [sl], #-0
			(*(__pi_utims [0]))--;
     520:	01000003 	tsteq	r0, r3
		if (__pi_utims [1] == 0)
     524:	029c1cc1 	addseq	r1, ip, #49408	; 0xc100
		if (*(__pi_utims [1])) {
     528:	7a1a0000 	bvc	680530 <__ccfg+0x660588>
			aux_timer_inactive = 0;
     52c:	01000003 	tsteq	r0, r3
			(*(__pi_utims [1]))--;
     530:	02bc1cce 	adcseq	r1, ip, #52736	; 0xce00
		if (__pi_utims [2] == 0)
     534:	001a0000 	andseq	r0, sl, r0
		if (*(__pi_utims [2])) {
     538:	01000000 	mrseq	r0, (UNDEF: 0)
			(*(__pi_utims [2]))--;
     53c:	02de16d8 	sbcseq	r1, lr, #216, 12	; 0xd800000
		if (__pi_utims [3] != 0) {
     540:	f31a0000 	vhadd.u16	d0, d10, d0
			if (*(__pi_utims [3])) {
     544:	01000002 	tsteq	r0, r2
				aux_timer_inactive = 0;
     548:	02ec19dc 	rsceq	r1, ip, #220, 18	; 0x370000
				(*(__pi_utims [3]))--;
     54c:	461a0000 	ldrmi	r0, [sl], -r0
	if (__pi_systat.ledsts) {
     550:	01000001 	tsteq	r0, r1
     554:	031413e7 	tsteq	r4, #-1677721597	; 0x9c000003
		if (__pi_systat.ledblc++ == 0) {
     558:	401b0000 	andsmi	r0, fp, r0
     55c:	1c000000 	stcne	0, cr0, [r0], {-0}
			if (__pi_systat.ledblk) {
     560:	000002a7 	andeq	r0, r0, r7, lsr #5
     564:	f5119901 			; <UNDEFINED> instruction: 0xf5119901
     568:	05000005 	streq	r0, [r0, #-5]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	00002003 	andeq	r2, r0, r3
     570:	00581d20 	subseq	r1, r8, r0, lsr #26
				if (__pi_systat.ledsts & 0x2)
     574:	058a0000 	streq	r0, [sl]
     578:	8d1c0000 	ldchi	0, cr0, [ip, #-0]
     57c:	01000004 	tsteq	r0, r4
				if (__pi_systat.ledsts & 0x4)
     580:	019b0eae 	orrseq	r0, fp, lr, lsr #29
				__pi_systat.ledblk = 0;
     584:	91020000 	mrsls	r0, (UNDEF: 2)
     588:	9c1e0044 	ldcls	0, cr0, [lr], {68}	; 0x44
			if (__pi_systat.fstblk)
     58c:	bc000002 	stclt	0, cr0, [r0], {2}
     590:	a7000002 	strge	r0, [r0, -r2]
				__pi_systat.ledblc = 200;
     594:	1c000005 	stcne	0, cr0, [r0], {5}
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	00000353 	andeq	r0, r0, r3, asr r3
		cli_tim;
     59c:	050ec201 	streq	ip, [lr, #-513]	; 0xfffffdff
		__pi_new += setdel;
     5a0:	02000006 	andeq	r0, r0, #6
     5a4:	1e004491 	mcrne	4, 0, r4, cr0, cr1, {4}
		setdel = 0;
     5a8:	000002ec 	andeq	r0, r0, ip, ror #5
		RISE_N_SHINE;
     5ac:	00000314 	andeq	r0, r0, r4, lsl r3
		__pi_new += setdel;
     5b0:	000005c3 	andeq	r0, r0, r3, asr #11
		RISE_N_SHINE;
     5b4:	0068631f 	rsbeq	r6, r8, pc, lsl r3
     5b8:	9b0edd01 	blls	3b79c4 <__ccfg+0x397a1c>
		aux_timer_inactive = 1;
     5bc:	02000001 	andeq	r0, r0, #1
     5c0:	20004491 	mulcs	r0, r1, r4
				if (__pi_systat.ledsts & 0x1)
     5c4:	000006f4 	strdeq	r0, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	00000314 	andeq	r0, r0, r4, lsl r3
     5cc:	0000031a 	andeq	r0, r0, sl, lsl r3
				if (__pi_systat.ledsts & 0x2)
     5d0:	dd8de801 	stcle	8, cr14, [sp, #4]
     5d4:	21000005 	tstcs	r0, r5
     5d8:	00000703 	andeq	r0, r0, r3, lsl #14
				if (__pi_systat.ledsts & 0x8)
     5dc:	06f42200 	ldrbteq	r2, [r4], r0, lsl #4
				__pi_systat.ledblk = 1;
     5e0:	032a0000 			; <UNDEFINED> instruction: 0x032a0000
     5e4:	00700000 	rsbseq	r0, r0, r0
		if (aux_timer_inactive) {
     5e8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
			cli_aux;
     5ec:	07032133 	smladxeq	r3, r3, r1, r2
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	019b0c00 	orrseq	r0, fp, r0, lsl #24
     5f8:	06050000 	streq	r0, [r5], -r0
     5fc:	880e0000 	stmdahi	lr, {}	; <UNPREDICTABLE>
     600:	13000000 	movwne	r0, #0
     604:	019b0c00 	orrseq	r0, fp, r0, lsl #24
     608:	06150000 	ldreq	r0, [r5], -r0
     60c:	880e0000 	stmdahi	lr, {}	; <UNPREDICTABLE>
     610:	31000000 	mrscc	r0, (UNDEF: 0)
word tci_update_delay_ticks (Boolean force) {
     614:	36011800 	strcc	r1, [r1], -r0, lsl #16
	cli_tim;
     618:	01000003 	tsteq	r0, r3
     61c:	c801067f 	stmdagt	r1, {r0, r1, r2, r3, r4, r5, r6, r9, sl}
	if (setdel) {
     620:	34000001 	strcc	r0, [r0], #-1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	01000002 	tsteq	r0, r2
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	00067d9c 	muleq	r6, ip, sp
     62c:	005f1900 	subseq	r1, pc, r0, lsl #18
     630:	7f010000 	svcvc	0x00010000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     634:	00019522 	andeq	r9, r1, r2, lsr #10
				AON_RTC_O_CH0CMP)) - gettav ());
     638:	00001e00 	andeq	r1, r0, r0, lsl #28
	return NO;
     63c:	03fd1c00 	mvnseq	r1, #0, 24
			setdel = 0;
     640:	80010000 	andhi	r0, r1, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	00020b0a 	andeq	r0, r2, sl, lsl #22
     648:	68910200 	ldmvs	r1, {r9}
}
     64c:	00008b23 	andeq	r8, r0, r3, lsr #22
		sti_tim;
     650:	09810100 	stmibeq	r1, {r8}
		return YES;
     654:	00000081 	andeq	r0, r0, r1, lsl #1
     658:	00000031 	andeq	r0, r0, r1, lsr r0
     65c:	00029123 	andeq	r9, r2, r3, lsr #2
     660:	0a830100 	beq	fe0c0a68 <_estack+0xde0bba68>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	0000009b 	muleq	r0, fp, r0
	UARTDisable (UART0_BASE);
     668:	00000044 	andeq	r0, r0, r4, asr #32
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     66c:	0000201b 	andeq	r2, r0, fp, lsl r0
	UARTDisable (UART0_BASE);
     670:	00692400 	rsbeq	r2, r9, r0, lsl #8
	UARTConfigSetExpClk (UART0_BASE,
     674:	810e8501 	tsthi	lr, r1, lsl #10
     678:	00000000 	andeq	r0, r0, r0
     67c:	4b012500 	blmi	49a84 <__ccfg+0x29adc>
     680:	01000003 	tsteq	r0, r3
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	0101062e 	tsteq	r1, lr, lsr #12
     688:	000006f4 	strdeq	r0, [r0], -r4
     68c:	0000bf26 	andeq	fp, r0, r6, lsr #30
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	142e0100 	strtne	r0, [lr], #-256	; 0xffffff00
     694:	0000009b 	muleq	r0, fp, r0
     698:	0000101a 	andeq	r1, r0, sl, lsl r0
	urates [0] = rate;
     69c:	19350100 	ldmdbne	r5!, {r8}
}
     6a0:	000000fa 	strdeq	r0, [r0], -sl
     6a4:	0001101a 	andeq	r1, r1, sl, lsl r0
     6a8:	194c0100 	stmdbne	ip, {r8}^
     6ac:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6b0:	656c1f27 	strbvs	r1, [ip, #-3879]!	; 0xfffff0d9
     6b4:	2f010064 	svccs	0x00010064
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	00008110 	andeq	r8, r0, r0, lsl r1
     6bc:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     6c0:	24200000 	strtcs	r0, [r0], #-0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	01006863 	tsteq	r0, r3, ror #16
     6c8:	019b1130 	orrseq	r1, fp, r0, lsr r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	cc1c0000 	ldcgt	0, cr0, [ip], {-0}
     6d0:	01000003 	tsteq	r0, r3
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	009b1132 	addseq	r1, fp, r2, lsr r1
     6d8:	03050000 	movweq	r0, #20480	; 0x5000
     6dc:	20000016 	andcs	r0, r0, r6, lsl r0
     6e0:	00035c1c 	andeq	r5, r3, ip, lsl ip
     6e4:	11330100 	teqne	r3, r0, lsl #2
     6e8:	0000009b 	muleq	r0, fp, r0
     6ec:	00140305 	andseq	r0, r4, r5, lsl #6
	switch (operation) {
     6f0:	00002000 	andeq	r2, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	0003be28 	andeq	fp, r3, r8, lsr #28
     6f8:	01540200 	cmpeq	r4, r0, lsl #4
     6fc:	11030101 	tstne	r3, r1, lsl #2
     700:	29000007 	stmdbcs	r0, {r0, r1, r2}
     704:	00000163 	andeq	r0, r0, r3, ror #2
				*buf++ = uart_a_read;
     708:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
     70c:	00000067 	andeq	r0, r0, r7, rrx
			while (len && uart_a_char_available) {
     710:	00252800 	eoreq	r2, r5, r0, lsl #16
     714:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
     718:	03010101 	movweq	r0, #4353	; 0x1101
			if (len != operation) {
     71c:	0000072e 	andeq	r0, r0, lr, lsr #14
}
     720:	00016329 	andeq	r6, r1, r9, lsr #6
     724:	011e0200 	tsteq	lr, r0, lsl #4
			uart_a_disable_int;
     728:	00006717 	andeq	r6, r0, r7, lsl r7
			if (uart_a_char_available) {
     72c:	7d2a0000 	stcvc	0, cr0, [sl, #-0]
				*buf++ = uart_a_read;
     730:	c8000006 	stmdagt	r0, {r1, r2}
			uart_a_disable_int;
     734:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     738:	01000001 	tsteq	r0, r1
			if (uart_a_char_available) {
     73c:	068c2b9c 	pkhbteq	r2, ip, ip, lsl #23
     740:	00780000 	rsbseq	r0, r8, r0
				uart_a_enable_int;
     744:	b02c0000 	eorlt	r0, ip, r0
     748:	00000006 	andeq	r0, r0, r6
				goto Redo_rx;
     74c:	84000000 	strhi	r0, [r0], #-0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	20000007 	andcs	r0, r0, r7
     754:	000006f4 	strdeq	r0, [r0], -r4
			return -2;
     758:	000000dc 	ldrdeq	r0, [r0], -ip
     75c:	000000e0 	andeq	r0, r0, r0, ror #1
				uart_a_write (*buf);
     760:	6d354d01 	ldcvs	13, cr4, [r5, #-4]!
     764:	21000007 	tstcs	r0, r7
			while (len && uart_a_room_in_tx) {
     768:	00000703 	andeq	r0, r0, r3, lsl #14
     76c:	06f42d00 	ldrbteq	r2, [r4], r0, lsl #26
     770:	017a0000 	cmneq	sl, r0
			if (len != operation) {
     774:	017e0000 	cmneq	lr, r0
			uart_a_disable_int;
     778:	4d010000 	stcmi	0, cr0, [r1, #-0]
     77c:	07032191 			; <UNDEFINED> instruction: 0x07032191
			if (uart_a_room_in_tx) {
     780:	00000000 	andeq	r0, r0, r0
     784:	00067d2d 	andeq	r7, r6, sp, lsr #26
				uart_a_enable_int;
     788:	0000fa00 	andeq	pc, r0, r0, lsl #20
     78c:	00017600 	andeq	r7, r1, r0, lsl #12
				*buf++ = uart_a_read;
     790:	062e0100 	strteq	r0, [lr], -r0, lsl #2
			if (uart_a_room_in_tx) {
     794:	00068c21 	andeq	r8, r6, r1, lsr #24
				uart_a_write (*buf);
     798:	06982e00 	ldreq	r2, [r8], r0, lsl #28
     79c:	00fa0000 	rscseq	r0, sl, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7a0:	a42f0000 	strtge	r0, [pc], #-0	; 7a8 <ioreq_uart_a+0xb8>
     7a4:	30000006 	andcc	r0, r0, r6
			uart_a_enable_int;
     7a8:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
     7ac:	000000fa 	strdeq	r0, [r0], -sl
     7b0:	00000176 	andeq	r0, r0, r6, ror r1
			return 0;
     7b4:	0006f420 	andeq	pc, r6, r0, lsr #8
			if (len == UART_CNTRL_SETRATE) {
     7b8:	00012800 	andeq	r2, r1, r0, lsl #16
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	00012a00 	andeq	r2, r1, r0, lsl #20
     7c0:	39450100 	stmdbcc	r5, {r8}^
     7c4:	000007ce 	andeq	r0, r0, lr, asr #15
				syserror (EREQPAR, "uar");
     7c8:	00070321 	andeq	r0, r7, r1, lsr #6
			syserror (ENOOPER, "uai");
     7cc:	f42d0000 	vld4.8	{d0-d3}, [sp], r0
			if (len == UART_CNTRL_GETRATE) {
     7d0:	68000006 	stmdavs	r0, {r1, r2}
				return 1;
     7d4:	6c000001 	stcvs	0, cr0, [r0], {1}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	01000001 	tsteq	r0, r1
			syserror (ENOOPER, "uai");
     7dc:	03219545 			; <UNDEFINED> instruction: 0x03219545
     7e0:	00000007 	andeq	r0, r0, r7
     7e4:	00000000 	andeq	r0, r0, r0
     7e8:	0000148c 	andeq	r1, r0, ip, lsl #9
     7ec:	02930003 	addseq	r0, r3, #3
     7f0:	01040000 	mrseq	r0, (UNDEF: 4)
     7f4:	0000016d 	andeq	r0, r0, sp, ror #2
     7f8:	0009440c 	andeq	r4, r9, ip, lsl #8
     7fc:	0000db00 	andeq	sp, r0, r0, lsl #22
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	00051000 	andeq	r1, r5, r0
void UART0IntHandler () {
     804:	00000000 	andeq	r0, r0, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	00047b00 	andeq	r7, r4, r0, lsl #22
     80c:	06010200 	streq	r0, [r1], -r0, lsl #4
     810:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
     814:	ec050202 	sfm	f0, 4, [r5], {2}
     818:	03000003 	movweq	r0, #3
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	00001664 	andeq	r1, r0, r4, ror #12
     820:	3f182810 	svccc	0x00182810
		RISE_N_SHINE;
     824:	02000000 	andeq	r0, r0, #0
     828:	00a40504 	adceq	r0, r4, r4, lsl #10
		i_trigger (devevent (UART_A, READ));
     82c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     830:	00009f05 	andeq	r9, r0, r5, lsl #30
     834:	22180300 	andscs	r0, r8, #0, 6
     838:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     83c:	00005918 	andeq	r5, r0, r8, lsl r9
     840:	08010200 	stmdaeq	r1, {r9}
     844:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     848:	00210603 	eoreq	r0, r1, r3, lsl #12
     84c:	19311000 	ldmdbne	r1!, {ip}
     850:	0000006c 	andeq	r0, r0, ip, rrx
     854:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
     858:	03000002 	movweq	r0, #2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	000017cf 	andeq	r1, r0, pc, asr #15
     860:	7f193410 	svcvc	0x00193410
     864:	02000000 	andeq	r0, r0, #0
		i_trigger (devevent (UART_A, WRITE));
     868:	00790704 	rsbseq	r0, r9, r4, lsl #14
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     870:	00007407 	andeq	r7, r0, r7, lsl #8
		RISE_N_SHINE;
     874:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     878:	00746e69 	rsbseq	r6, r4, r9, ror #28
     87c:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
		i_trigger (devevent (UART_A, WRITE));
     880:	03000000 	movweq	r0, #0
     884:	0000040c 	andeq	r0, r0, ip, lsl #8
     888:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
     88c:	03000000 	movweq	r0, #0
     890:	000015dc 	ldrdeq	r1, [r0], -ip
     894:	60122711 	andsvs	r2, r2, r1, lsl r7
     898:	05000000 	streq	r0, [r0, #-0]
     89c:	000000a7 	andeq	r0, r0, r7, lsr #1
     8a0:	0000a706 	andeq	sl, r0, r6, lsl #14
     8a4:	09220300 	stmdbeq	r2!, {r8, r9}
     8a8:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
}
     8ac:	00003312 	andeq	r3, r0, r2, lsl r3
     8b0:	13d40300 	bicsne	r0, r4, #0, 6
     8b4:	2b110000 	blcs	4408bc <__ccfg+0x420914>
     8b8:	00004d12 	andeq	r4, r0, r2, lsl sp
     8bc:	00c90600 	sbceq	r0, r9, r0, lsl #12
void __buttons_setirq (int val) {
     8c0:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	03000000 	movweq	r0, #0
     8c8:	0000162d 	andeq	r1, r0, sp, lsr #12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	73122c11 	tstvc	r2, #4352	; 0x1100
     8d0:	05000000 	streq	r0, [r0, #-0]
     8d4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	0002a103 	andeq	sl, r2, r3, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	122d1100 	eorne	r1, sp, #0, 2
     8e0:	00000073 	andeq	r0, r0, r3, ror r0
     8e4:	00077e03 	andeq	r7, r7, r3, lsl #28
     8e8:	102e1100 	eorne	r1, lr, r0, lsl #2
     8ec:	00000108 	andeq	r0, r0, r8, lsl #2
     8f0:	00a70407 	adceq	r0, r7, r7, lsl #8
}
     8f4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     8f8:	9c093211 	sfmls	f3, 4, [r9], {17}
     8fc:	09000001 	stmdbeq	r0, {r0}
     900:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
void __pinlist_setirq (int val) {
     904:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
	for (i = 0; i < N_PINLIST; i++) {
     908:	01000000 	mrseq	r0, (UNDEF: 0)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	00000098 	muleq	r0, r8, r0
	for (i = 0; i < N_PINLIST; i++) {
     914:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	01000000 	mrseq	r0, (UNDEF: 0)
     91c:	09000601 	stmdbeq	r0, {r0, r9, sl}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     920:	0000028a 	andeq	r0, r0, sl, lsl #5
     924:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
     928:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = 0; i < N_PINLIST; i++) {
     92c:	09000501 	stmdbeq	r0, {r0, r8, sl}
}
     930:	0000041b 	andeq	r0, r0, fp, lsl r4
     934:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
     938:	01000000 	mrseq	r0, (UNDEF: 0)
     93c:	09000401 	stmdbeq	r0, {r0, sl}
void GPIOIntHandler () {
     940:	00000414 	andeq	r0, r0, r4, lsl r4
if (buttons_int) {
     944:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
     948:	01000000 	mrseq	r0, (UNDEF: 0)
	buttons_disable ();
     94c:	0a000004 	beq	964 <GPIOIntHandler+0x24>
     950:	00000405 	andeq	r0, r0, r5, lsl #8
	i_trigger ((aword)&__button_list);
     954:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
     958:	01000000 	mrseq	r0, (UNDEF: 0)
     95c:	0000400a 	andeq	r4, r0, sl
     960:	033c1100 	teqeq	ip, #0, 2
     964:	000000c9 	andeq	r0, r0, r9, asr #1
     968:	006d0a02 	rsbeq	r0, sp, r2, lsl #20
     96c:	3d110000 	ldccc	0, cr0, [r1, #-0]
     970:	0000c903 	andeq	ip, r0, r3, lsl #18
     974:	530a0300 	movwpl	r0, #41728	; 0xa300
     978:	11000001 	tstne	r0, r1
     97c:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
	RISE_N_SHINE;
     980:	00040000 	andeq	r0, r4, r0
     984:	00044403 	andeq	r4, r4, r3, lsl #8
     988:	03411100 	movteq	r1, #4352	; 0x1100
if (pin_sensor_int) {
     98c:	0000010e 	andeq	r0, r0, lr, lsl #2
     990:	00019c06 	andeq	r9, r1, r6, lsl #24
	i_trigger ((aword)(&__input_pins));
     994:	02b00b00 	adcseq	r0, r0, #0, 22
     998:	43110000 	tstmi	r1, #0
     99c:	0001a81a 	andeq	sl, r1, sl, lsl r8
     9a0:	0b010100 	bleq	40da8 <__ccfg+0x20e00>
     9a4:	0000031c 	andeq	r0, r0, ip, lsl r3
     9a8:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
     9ac:	01000001 	tsteq	r0, r1
     9b0:	cf040701 	svcgt	0x00040701
     9b4:	02000001 	andeq	r0, r0, #1
     9b8:	03b90801 			; <UNDEFINED> instruction: 0x03b90801
     9bc:	cf050000 	svcgt	0x00050000
	__pinsen_disable_and_clear;
     9c0:	0b000001 	bleq	9cc <GPIOIntHandler+0x8c>
	RISE_N_SHINE;
     9c4:	0000032a 	andeq	r0, r0, sl, lsr #6
     9c8:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
     9cc:	01000001 	tsteq	r0, r1
}
     9d0:	12080801 	andne	r0, r8, #65536	; 0x10000
     9d4:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
     9d8:	c30a0000 	movwgt	r0, #40960	; 0xa000
     9dc:	12000002 	andne	r0, r0, #2
     9e0:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
void system_init () {
     9e4:	0a000000 	beq	9ec <system_init+0x8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	00000609 	andeq	r0, r0, r9, lsl #12
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ec:	a7089112 	smladge	r8, r2, r1, r9
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	04000000 	streq	r0, [r0], #-0
     9f4:	0004870a 	andeq	r8, r4, sl, lsl #14
     9f8:	10921200 	addsne	r1, r2, r0, lsl #4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	000000d5 	ldrdeq	r0, [r0], -r5
     a00:	22030006 	andcs	r0, r3, #6
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	12000004 	andne	r0, r0, #4
     a08:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
     a0c:	1a050000 	bne	140a14 <__ccfg+0x120a6c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	0c000002 	stceq	0, cr0, [r0], {2}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a14:	0000021a 	andeq	r0, r0, sl, lsl r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a18:	00000236 	andeq	r0, r0, r6, lsr r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1c:	360b000d 	strcc	r0, [fp], -sp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a20:	12000000 	andne	r0, r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a24:	022b0f99 	eoreq	r0, fp, #612	; 0x264
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	01010000 	mrseq	r0, (UNDEF: 1)
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	00da0407 	sbcseq	r0, sl, r7, lsl #8
		pin = (port_confs [i] >> 19) & 0x1f;
     a30:	01080000 	mrseq	r0, (UNDEF: 8)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a34:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
     a38:	09000002 	stmdbeq	r0, {r1}
     a3c:	0000047a 	andeq	r0, r0, sl, ror r4
     a40:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
		if (port_confs [i] & 0x80)
     a44:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
     a4c:	00000031 	andeq	r0, r0, r1, lsr r0
		if (port_confs [i] & 0x40)
     a50:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	01000000 	mrseq	r0, (UNDEF: 0)
     a58:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5c:	00028103 	andeq	r8, r2, r3, lsl #2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	03961300 	orrseq	r1, r6, #0, 6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a64:	0000024a 	andeq	r0, r0, sl, asr #4
	all_leds_blink;
     a68:	00027405 	andeq	r7, r2, r5, lsl #8
     a6c:	02800c00 	addeq	r0, r0, #0, 24
     a70:	02900000 	addseq	r0, r0, #0
     a74:	000d0000 	andeq	r0, sp, r0
     a78:	00028505 	andeq	r8, r2, r5, lsl #10
     a7c:	02e60b00 	rsceq	r0, r6, #0, 22
     a80:	9c130000 	ldcls	0, cr0, [r3], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a84:	00029017 	andeq	r9, r2, r7, lsl r0
     a88:	0c010100 	stfeqs	f0, [r1], {-0}
     a8c:	000000b3 	strheq	r0, [r0], -r3
     a90:	000002ae 	andeq	r0, r0, lr, lsr #5
     a94:	a305000d 	movwge	r0, #20493	; 0x500d
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	0b000002 	bleq	aa8 <system_init+0xc4>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	000003a2 	andeq	r0, r0, r2, lsr #7
     aa0:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
	IntEnable (INT_AON_RTC_COMB);
     aa4:	01000002 	tsteq	r0, r2
     aa8:	01330b01 	teqeq	r3, r1, lsl #22
     aac:	c3120000 	tstgt	r2, #0
	__pi_malloc_init ();
     ab0:	0000df0e 	andeq	sp, r0, lr, lsl #30
	IntEnable (INT_AON_GPIO_EDGE);
     ab4:	0e010100 	adfeqs	f0, f1, f0
     ab8:	00000494 	muleq	r0, r4, r4
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	10016e15 	andne	r6, r1, r5, lsl lr
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	000002dc 	ldrdeq	r0, [r0], -ip
     ac4:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
     ac8:	010f0000 	mrseq	r0, CPSR
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     acc:	000002ee 	andeq	r0, r0, lr, ror #5
     ad0:	0000a710 	andeq	sl, r0, r0, lsl r7
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	d60c0000 	strle	r0, [ip], -r0
     ad8:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
     adc:	0d000002 	stceq	0, cr0, [r0, #-8]
	urates [0] = UART_RATE / 100;
     ae0:	02ee0500 	rsceq	r0, lr, #0, 10
     ae4:	54110000 	ldrpl	r0, [r1], #-0
	reinit_uart ();
     ae8:	15000004 	strne	r0, [r0, #-4]
	EXTRA_INITIALIZERS;
     aec:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
     af0:	01000002 	tsteq	r0, r2
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af4:	039a1101 	orrseq	r1, sl, #1073741824	; 0x40000000
     af8:	82150000 	andshi	r0, r5, #0
     afc:	00eb1401 	rsceq	r1, fp, r1, lsl #8
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b00:	01010000 	mrseq	r0, (UNDEF: 1)
     b04:	00047f11 	andeq	r7, r4, r1, lsl pc
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b08:	02d81500 	sbcseq	r1, r8, #0, 10
     b0c:	0000df0e 	andeq	sp, r0, lr, lsl #30
			devinit [i] . init (devinit [i] . param);
     b10:	12010100 	andne	r0, r1, #0, 2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	03031508 	movweq	r1, #13576	; 0x3508
     b18:	00035209 	andeq	r5, r3, r9, lsl #4
     b1c:	22101300 	andscs	r1, r0, #0, 6
	IntEnable (INT_UART0_COMB);
     b20:	07150000 	ldreq	r0, [r5, -r0]
     b24:	00a70703 	adceq	r0, r7, r3, lsl #14
}
     b28:	13000000 	movwne	r0, #0
	tci_run_auxiliary_timer ();
     b2c:	0000055b 	andeq	r0, r0, fp, asr r5
		diag ("");
     b30:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
     b34:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	610e0004 	tstvs	lr, r4
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	15000002 	strne	r0, [r0, #-2]
		diag ("Leftover RAM: %d bytes",
     b40:	2b030309 	blcs	c176c <__ccfg+0xa17c4>
     b44:	14000003 	strne	r0, [r0], #-3
     b48:	000004a3 	andeq	r0, r0, r3, lsr #9
     b4c:	030b1530 	movweq	r1, #46384	; 0xb530
     b50:	0003c208 	andeq	ip, r3, r8, lsl #4
     b54:	049c1300 	ldreq	r1, [ip], #768	; 0x300
     b58:	14150000 	ldrne	r0, [r5], #-0
     b5c:	00a70803 	adceq	r0, r7, r3, lsl #16
     b60:	13000000 	movwne	r0, #0
     b64:	000002cd 	andeq	r0, r0, sp, asr #5
     b68:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
     b6c:	000000a7 	andeq	r0, r0, r7, lsr #1
     b70:	04971302 	ldreq	r1, [r7], #770	; 0x302
     b74:	16150000 	ldrne	r0, [r5], -r0
     b78:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
     b7c:	13040000 	movwne	r0, #16384	; 0x4000
     b80:	00000f5b 	andeq	r0, r0, fp, asr pc
     b84:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
     b88:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b8c:	044d1308 	strbeq	r1, [sp], #-776	; 0xfffffcf8
     b90:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
     b94:	03c20f03 	biceq	r0, r2, #3, 30
     b98:	130c0000 	movwne	r0, #49152	; 0xc000
__attribute__ ((noreturn)) void __pi_release () {
     b9c:	000002c8 	andeq	r0, r0, r8, asr #5
     ba0:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
     ba4:	000003d2 	ldrdeq	r0, [r0], -r2
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba8:	520c002c 	andpl	r0, ip, #44	; 0x2c
	check_stack_overflow;
     bac:	d2000003 	andle	r0, r0, #3
     bb0:	15000003 	strne	r0, [r0, #-3]
     bb4:	00000094 	muleq	r0, r4, r0
	update_n_wake (MAX_WORD, NO);
     bb8:	04070003 	streq	r0, [r7], #-3
     bbc:	0000035f 	andeq	r0, r0, pc, asr r3
     bc0:	0004ae0e 	andeq	sl, r4, lr, lsl #28
	for_all_tasks (__pi_curr) {
     bc4:	031c1500 	tsteq	ip, #0, 10
     bc8:	00035f1b 	andeq	r5, r3, fp, lsl pc
     bcc:	03901100 	orrseq	r1, r0, #0, 2
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
	__SLEEP;
     bd4:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
     bd8:	01010000 	mrseq	r0, (UNDEF: 1)
     bdc:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
     be0:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
	system_event_count ++;
     be4:	16000004 	strne	r0, [r0], -r4
     be8:	00a7131d 	adceq	r1, r7, sp, lsl r3
	switch (__pi_systat.effpdm) {
     bec:	01010000 	mrseq	r0, (UNDEF: 1)
     bf0:	0007370b 	andeq	r3, r7, fp, lsl #14
     bf4:	1a1e1600 	bne	7863fc <__ccfg+0x766454>
     bf8:	000000b8 	strheq	r0, [r0], -r8
			__WFI ();
     bfc:	c70b0101 	strgt	r0, [fp, -r1, lsl #2]
     c00:	16000008 	strne	r0, [r0], -r8
     c04:	00b8241e 	adcseq	r2, r8, lr, lsl r4
	check_stack_overflow;
     c08:	01010000 	mrseq	r0, (UNDEF: 1)
     c0c:	0005f60b 	andeq	pc, r5, fp, lsl #12
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c10:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
     c14:	000003f4 	strdeq	r0, [r0], -r4
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	3f030101 	svccc	0x00030101
			goto Redo;
     c1c:	16000005 	strne	r0, [r0], -r5
	for_all_tasks (__pi_curr) {
     c20:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	04070000 	streq	r0, [r7], #-0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c28:	00000444 	andeq	r0, r0, r4, asr #8
     c2c:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	8d100000 	ldchi	0, cr0, [r0, #-0]
     c34:	00000000 	andeq	r0, r0, r0
     c38:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3c:	00047409 	andeq	r7, r4, r9, lsl #8
     c40:	0aa20a00 	beq	fe883448 <_estack+0xde87e448>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	4a160000 	bmi	580c4c <__ccfg+0x560ca4>
     c48:	0004320f 	andeq	r3, r4, pc, lsl #4
			__WFI ();
     c4c:	a40a0000 	strge	r0, [sl], #-0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c50:	16000007 	strne	r0, [r0], -r7
     c54:	008d074b 	addeq	r0, sp, fp, asr #14
}
     c58:	00040000 	andeq	r0, r4, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5c:	0005c503 	andeq	ip, r5, r3, lsl #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	034c1600 	movteq	r1, #50688	; 0xc600
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	00000450 	andeq	r0, r0, r0, asr r4
     c68:	00047405 	andeq	r7, r4, r5, lsl #8
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6c:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
     c70:	04950000 	ldreq	r0, [r5], #0
     c74:	94150000 	ldrls	r0, [r5], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	03000000 	movweq	r0, #0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	09170b00 	ldmdbeq	r7, {r8, r9, fp}
     c80:	0d010000 	stceq	0, cr0, [r1, #-0]
     c84:	00048512 	andeq	r8, r4, r2, lsl r5
     c88:	0c010100 	stfeqs	f0, [r1], {-0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	00000480 	andeq	r0, r0, r0, lsl #9
     c90:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	00009415 	andeq	r9, r0, r5, lsl r4
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     c9c:	000004a3 	andeq	r0, r0, r3, lsr #9
     ca0:	00092716 	andeq	r2, r9, r6, lsl r7
     ca4:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
     ca8:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
			SysCtrlSetRechargeBeforePowerDown
     cac:	0000eb0c 	andeq	lr, r0, ip, lsl #22
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cb0:	0004d400 	andeq	sp, r4, r0, lsl #8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb4:	00941500 	addseq	r1, r4, r0, lsl #10
     cb8:	00100000 	andseq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	0004c405 	andeq	ip, r4, r5, lsl #8
     cc0:	07241700 	streq	r1, [r4, -r0, lsl #14]!
     cc4:	ec010000 	stc	0, cr0, [r1], {-0}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc8:	0004d40d 	andeq	sp, r4, sp, lsl #8
     ccc:	03050100 	movweq	r0, #20736	; 0x5100
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	00002d0c 	andeq	r2, r0, ip, lsl #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	0005a418 	andeq	sl, r5, r8, lsl r4
     cd8:	010c0100 	mrseq	r0, (UNDEF: 28)
     cdc:	0000a70d 	andeq	sl, r0, sp, lsl #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ce0:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
			while (!(AONWUCPowerStatusGet () &
     ce4:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	00000236 	andeq	r0, r0, r6, lsr r2
     cec:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
     cf0:	00700305 	rsbseq	r0, r0, r5, lsl #6
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	a70c2000 	strge	r2, [ip, -r0]
     cf8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     cfc:	15000005 	strne	r0, [r0, #-5]
     d00:	00000094 	muleq	r0, r4, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	25180000 	ldrcs	r0, [r8, #-0]
     d08:	01000005 	tsteq	r0, r5
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
     d10:	05000005 	streq	r0, [r0, #-5]
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	00003603 	andeq	r3, r0, r3, lsl #12
			reinit_uart ();
     d18:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
     d1c:	8c010000 	stchi	0, cr0, [r1], {-0}
     d20:	03050704 	movweq	r0, #22276	; 0x5704
}
     d24:	20000078 	andcs	r0, r0, r8, ror r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	0519011a 	ldreq	r0, [r9, #-282]	; 0xfffffee6
     d2c:	72010000 	andvc	r0, r1, #0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
     d34:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     d38:	5400000d 	strpl	r0, [r0], #-13
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	0100000e 	tsteq	r0, lr
     d40:	0005849c 	muleq	r5, ip, r4
     d44:	04f81b00 	ldrbteq	r1, [r8], #2816	; 0xb00
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d48:	05720000 	ldrbeq	r0, [r2, #-0]!
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	0000bd11 	andeq	fp, r0, r1, lsl sp
     d58:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	36000011 			; <UNDEFINED> instruction: 0x36000011
     d60:	3800000e 	stmdacc	r0, {r1, r2, r3}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d64:	0100000e 	tsteq	r0, lr
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     d68:	0002058d 	andeq	r0, r2, sp, lsl #11
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d6c:	07be011e 			; <UNDEFINED> instruction: 0x07be011e
     d70:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
			PRCMPowerDomainOff (
     d74:	0b9c2105 	bleq	fe709190 <_estack+0xde704190>
     d78:	0df40000 	ldcleq	0, cr0, [r4]
	__SLEEP;
     d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d80:	000007e4 	andeq	r0, r0, r4, ror #15
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	0007cb1f 	andeq	ip, r7, pc, lsl fp
	goto Redo;
     d88:	01080d00 	tsteq	r8, r0, lsl #26
     d8c:	0011d020 	andseq	sp, r1, r0, lsr #32
     d90:	000b9c00 	andeq	r9, fp, r0, lsl #24
     d94:	00035800 	andeq	r5, r3, r0, lsl #16
     d98:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
     d9c:	0005bf02 	andeq	fp, r5, r2, lsl #30
     da0:	11df2100 	bicsne	r2, pc, r0, lsl #2
     da4:	22000000 	andcs	r0, r0, #0
     da8:	00000812 	andeq	r0, r0, r2, lsl r8
     dac:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
     db0:	00000378 	andeq	r0, r0, r8, ror r3
     db4:	b302270d 	movwlt	r2, #9997	; 0x270d
     db8:	23000007 	movwcs	r0, #7
     dbc:	00000378 	andeq	r0, r0, r8, ror r3
     dc0:	00082024 	andeq	r2, r8, r4, lsr #32
     dc4:	000c4400 	andeq	r4, ip, r0, lsl #8
     dc8:	125c2500 	subsne	r2, ip, #0, 10
     dcc:	0bb60000 	bleq	fed80dd4 <_estack+0xded7bdd4>
     dd0:	03a00000 	moveq	r0, #0
     dd4:	b3010000 	movwlt	r0, #4096	; 0x1000
     dd8:	381d0404 	ldmdacc	sp, {r2, sl}
     ddc:	2e000014 	mcrcs	0, 0, r0, cr0, cr4, {0}
     de0:	3a00000c 	bcc	e18 <main+0x24>
     de4:	0100000c 	tsteq	r0, ip
     de8:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
     dec:	0000125c 	andeq	r1, r0, ip, asr r2
     df0:	00000c42 	andeq	r0, r0, r2, asr #24
int main (void) {
     df4:	00000c44 	andeq	r0, r0, r4, asr #24
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
     dfc:	0012c025 	andseq	ip, r2, r5, lsr #32
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	000c5a00 	andeq	r5, ip, r0, lsl #20
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	0003b800 	andeq	fp, r3, r0, lsl #16
	system_init ();
     e08:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
	tcv_init ();
     e0c:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e10:	0c5a0000 	mraeq	r0, sl, acc0
     e14:	03d80000 	bicseq	r0, r8, #0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	c5010000 	strgt	r0, [r1, #-0]
     e1c:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
     e20:	62000012 	andvs	r0, r0, #18
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e24:	f800000c 			; <UNDEFINED> instruction: 0xf800000c
     e28:	01000003 	tsteq	r0, r3
	delay (16, 0);
     e2c:	510404c0 	smlabtpl	r4, r0, r4, r0
     e30:	21000006 	tstcs	r0, r6
     e34:	0000129d 	muleq	r0, sp, r2
	__pi_release ();
     e38:	125c1d00 	subsne	r1, ip, #0, 26
     e3c:	0c720000 	ldcleq	0, cr0, [r2], #-0
     e40:	0c740000 	ldcleq	0, cr0, [r4], #-0
     e44:	c3010000 	movwgt	r0, #4096	; 0x1000
     e48:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
     e4c:	76000014 			; <UNDEFINED> instruction: 0x76000014
     e50:	1800000c 	stmdane	r0, {r2, r3}
static void killev (__pi_pcb_t *pid) {
     e54:	01000004 	tsteq	r0, r4
	wfun = (aword)(pid->code);
     e58:	200404d5 	ldrdcs	r0, [r4], -r5
	for_all_tasks (i) {
     e5c:	0000144e 	andeq	r1, r0, lr, asr #8
		for (j = 0; j < nevents (i); j++) {
     e60:	00000c8c 	andeq	r0, r0, ip, lsl #25
     e64:	00000438 	andeq	r0, r0, r8, lsr r4
     e68:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
			    || i->Events [j] . Event == wfun
     e6c:	0000068e 	andeq	r0, r0, lr, lsl #13
		for (j = 0; j < nevents (i); j++) {
     e70:	00145d21 	andseq	r5, r4, r1, lsr #26
			if (i->Events [j] . Event == (aword)pid
     e74:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
     e78:	b0000012 	andlt	r0, r0, r2, lsl r0
     e7c:	b200000c 	andlt	r0, r0, #12
				wakeupev (i, j);
     e80:	0100000c 	tsteq	r0, ip
     e84:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
	for_all_tasks (i) {
     e88:	00001438 	andeq	r1, r0, r8, lsr r4
}
     e8c:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	00000450 	andeq	r0, r0, r0, asr r4
static void qfree (aword *ch) {
     e94:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	00127f25 	andseq	r7, r2, r5, lsr #30
	cc = (aword*)(mpools + MA_NP);
     e9c:	000cd400 	andeq	sp, ip, r0, lsl #8
	m_setnextp (ch, chunk);
     ea0:	00046800 	andeq	r6, r4, r0, lsl #16
	m_setnextp (cc, ch);
     ea4:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
}
     ea8:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	0cde0000 	ldcleq	0, cr0, [lr], {0}
     eb0:	0ce20000 	stcleq	0, cr0, [r2]
     eb4:	ed010000 	stc	0, cr0, [r1, #-0]
			m_setnextp (cc, m_nextp (chunk));
     eb8:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
			m_size (chunk) += m_hdrlen + m_size (ch);
     ebc:	9d210000 	stcls	0, cr0, [r1, #-0]
     ec0:	00000012 	andeq	r0, r0, r2, lsl r0
     ec4:	00144325 	andseq	r4, r4, r5, lsr #6
     ec8:	000d0200 	andeq	r0, sp, r0, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	00048000 	andeq	r8, r4, r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed0:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
     ed4:	144e2004 	strbne	r2, [lr], #-4
     ed8:	0d040000 	stceq	0, cr0, [r4, #-0]
			m_setnextp (cc, m_nextp (chunk));
     edc:	04980000 	ldreq	r0, [r8], #0
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	fa010000 	blx	40ee8 <__ccfg+0x20f40>
     ee4:	07080404 	streq	r0, [r8, -r4, lsl #8]
     ee8:	5d210000 	stcpl	0, cr0, [r1, #-0]
     eec:	00000014 	andeq	r0, r0, r4, lsl r0
     ef0:	0012b61d 	andseq	fp, r2, sp, lsl r6
     ef4:	000d0c00 	andeq	r0, sp, r0, lsl #24
			if (m_size (chunk) >= m_size (ch))
     ef8:	000d1000 	andeq	r1, sp, r0
     efc:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
     f00:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
		chunk = m_nextp (chunk))
     f04:	0d100000 	ldceq	0, cr0, [r0, #-0]
     f08:	0d120000 	ldceq	0, cr0, [r2, #-0]
     f0c:	00010000 	andeq	r0, r1, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f10:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
	diag_wait (a);
     f14:	1a00000b 	bne	f48 <update_n_wake+0x10>
	diag_wchar (c, a);
     f18:	2600000d 	strcs	r0, [r0], -sp
     f1c:	0100000d 	tsteq	r0, sp
}
     f20:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
     f24:	27000007 	strcs	r0, [r0, -r7]
	syserror (ESTATE, "state");
     f28:	00001311 	andeq	r1, r0, r1, lsl r3
     f2c:	00000d1a 	andeq	r0, r0, sl, lsl sp
     f30:	00000d24 	andeq	r0, r0, r4, lsr #26
     f34:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
void update_n_wake (word min, Boolean force) {
     f38:	00132d21 	andseq	r2, r3, r1, lsr #26
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	13202100 	nopne	{0}	; <UNPREDICTABLE>
     f40:	00000000 	andeq	r0, r0, r0
     f44:	00125c1d 	andseq	r5, r2, sp, lsl ip
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	000d4e00 	andeq	r4, sp, r0, lsl #28
     f4c:	000d5000 	andeq	r5, sp, r0
     f50:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
     f54:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
     f58:	0d500000 	ldcleq	0, cr0, [r0, #-0]
     f5c:	0d600000 	stcleq	0, cr0, [r0, #-0]
     f60:	41010000 	mrsmi	r0, (UNDEF: 1)
     f64:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
     f68:	60000012 	andvs	r0, r0, r2, lsl r0
     f6c:	6200000d 	andvs	r0, r0, #13
     f70:	0100000d 	tsteq	r0, sp
     f74:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
     f78:	0000127f 	andeq	r1, r0, pc, ror r2
		for_all_tasks (i) {
     f7c:	00000d62 	andeq	r0, r0, r2, ror #26
	__pi_mintk = znew + min;
     f80:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     f84:	0b054701 	bleq	152b90 <__ccfg+0x132be8>
			if (!twaiting (i))
     f88:	00146b25 	andseq	r6, r4, r5, lsr #22
     f8c:	000d6a00 	andeq	r6, sp, r0, lsl #20
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	0004c800 	andeq	ip, r4, r0, lsl #16
     f94:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
     f98:	28000004 	stmdacs	r0, {r2}
     f9c:	000011ed 	andeq	r1, r0, sp, ror #3
     fa0:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fa4:	00000bd2 	ldrdeq	r0, [r0], -r2
     fa8:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
     fac:	000011f7 	strdeq	r1, [r0], -r7
     fb0:	00000bfe 	strdeq	r0, [r0], -lr
     fb4:	00000c00 	andeq	r0, r0, r0, lsl #24
     fb8:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
     fbc:	000011f7 	strdeq	r1, [r0], -r7
				wakeuptm (i);
     fc0:	00000d84 	andeq	r0, r0, r4, lsl #27
     fc4:	00000d86 	andeq	r0, r0, r6, lsl #27
		for_all_tasks (i) {
     fc8:	0002270d 	andeq	r2, r2, sp, lsl #14
				d = i->Timer - znew;
     fcc:	0836011a 	ldmdaeq	r6!, {r1, r3, r4, r8}
     fd0:	5c010000 	stcpl	0, cr0, [r1], {-0}
     fd4:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
		if ((word)(__pi_mintk - znew) < min) 
     fe0:	01000000 	mrseq	r0, (UNDEF: 0)
	__pi_old = znew;
     fe4:	0008129c 	muleq	r8, ip, r2
}
     fe8:	63732900 	cmnvs	r3, #0, 18
	TCI_RUN_DELAY_TIMER;
     fec:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
}
     ff0:	0000a707 	andeq	sl, r0, r7, lsl #14
     ff4:	0000a100 	andeq	sl, r0, r0, lsl #2
     ff8:	562a0000 	strtpl	r0, [sl], -r0
     ffc:	01000007 	tsteq	r0, r7
    1000:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
void proceed (word state) {
    1004:	0000082a 	andeq	r0, r0, sl, lsr #16
	prcdstate (__pi_curr, state);
    1008:	0009ef2b 	andeq	lr, r9, fp, lsr #30
    100c:	04ad0100 	strteq	r0, [sp], #256	; 0x100
	release;
    1010:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
    1014:	000006fa 	strdeq	r0, [r0], -sl
void __pi_wait (aword event, word state) {
    1018:	06047e01 	streq	r7, [r4], -r1, lsl #28
	sint j = nevents (__pi_curr);
    101c:	00000001 	andeq	r0, r0, r1
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	00000000 	andeq	r0, r0, r0
    1024:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    1028:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
		syserror (ENEVENTS, "sw");
    102c:	000002be 			; <UNDEFINED> instruction: 0x000002be
    1030:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
	setestate (__pi_curr->Events [j], state, event);
    1034:	000000a7 	andeq	r0, r0, r7, lsr #1
	incwait (__pi_curr);
    1038:	000000b4 	strheq	r0, [r0], -r4
	setestate (__pi_curr->Events [j], state, event);
    103c:	83011e00 	movwhi	r1, #7680	; 0x1e00
}
    1040:	01000005 	tsteq	r0, r5
    1044:	e4060401 	str	r0, [r6], #-1025	; 0xfffffbff
    1048:	9c000009 	stcls	0, cr0, [r0], {9}
void __pi_trigger (aword event) {
    104c:	0100000b 	tsteq	r0, fp
	for_all_tasks (i) {
    1050:	000a1e9c 	muleq	sl, ip, lr
		for (j = 0; j < nevents (i); j++) {
    1054:	0b0e2e00 	bleq	38c85c <__ccfg+0x36c8b4>
    1058:	0b140000 	bleq	501060 <__ccfg+0x4e10b8>
    105c:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    1060:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
			if (i->Events [j] . Event == event) {
    1064:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
    1068:	00008d0b 	andeq	r8, r0, fp, lsl #26
    106c:	43250000 			; <UNDEFINED> instruction: 0x43250000
				wakeupev (i, j);
    1070:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    1074:	3800000a 	stmdacc	r0, {r1, r3}
	for_all_tasks (i) {
    1078:	01000002 	tsteq	r0, r2
}
    107c:	20020408 	andcs	r0, r2, r8, lsl #8
aword __pi_join (aword pid, word st) {
    1080:	00000f54 	andeq	r0, r0, r4, asr pc
	for_all_tasks (i) {
    1084:	00000a10 	andeq	r0, r0, r0, lsl sl
    1088:	00000258 	andeq	r0, r0, r8, asr r2
	return 0;
    108c:	02040b01 	andeq	r0, r4, #1024	; 0x400
		if ((aword)i == pid) {
    1090:	0000091a 	andeq	r0, r0, sl, lsl r9
			__pi_wait (pid, st);
    1094:	00025823 	andeq	r5, r2, r3, lsr #16
}
    1098:	0f612f00 	svceq	0x00612f00
	for_all_tasks (i) {
    109c:	6d300000 	ldcvs	0, cr0, [r0, #-0]
    10a0:	5800000f 	stmdapl	r0, {r0, r1, r2, r3}
void delay (word d, word state) {
    10a4:	31000002 	tstcc	r0, r2
	settstate (__pi_curr, state);
    10a8:	00000f6e 	andeq	r0, r0, lr, ror #30
    10ac:	000000c7 	andeq	r0, r0, r7, asr #1
    10b0:	0013c922 	andseq	ip, r3, r2, lsr #18
    10b4:	000a1a00 	andeq	r1, sl, r0, lsl #20
	update_n_wake (d, YES);
    10b8:	00027800 	andeq	r7, r2, r0, lsl #16
    10bc:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
	__pi_curr->Timer = __pi_old + d;
    10c0:	000008e7 	andeq	r0, r0, r7, ror #17
    10c4:	0013e521 	andseq	lr, r3, r1, lsr #10
	inctimer (__pi_curr);
    10c8:	13d82100 	bicsne	r2, r8, #0, 2
    10cc:	22000000 	andcs	r0, r0, #0
    10d0:	000013f3 	strdeq	r1, [r0], -r3
}
    10d4:	00000a1e 	andeq	r0, r0, lr, lsl sl
    10d8:	00000290 	muleq	r0, r0, r2
	if (fun == NULL)
    10dc:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
		return (int) __pi_curr;
    10e0:	21000009 	tstcs	r0, r9
    10e4:	00001402 	andeq	r1, r0, r2, lsl #8
	for_all_tasks (i)
    10e8:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
}
    10ec:	0a220000 	beq	8810f4 <__ccfg+0x86114c>
		if (i->code == fun)
    10f0:	02a80000 	adceq	r0, r8, #0
	for_all_tasks (i)
    10f4:	fc010000 	stc2	0, cr0, [r1], {-0}
    10f8:	141f2104 	ldrne	r2, [pc], #-260	; 1100 <__pi_strlen>
    10fc:	00000000 	andeq	r0, r0, r0
int __pi_strlen (const char *s) {
    1100:	10200000 	eorne	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1104:	62000014 	andvs	r0, r0, #20
}
    1108:	c000000a 	andgt	r0, r0, sl
	for (i = 0; *(s+i) != '\0'; i++);
    110c:	01000002 	tsteq	r0, r2
	while (n--)
    1110:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
    1114:	21000009 	tstcs	r0, r9
		*dest++ = *src++;
    1118:	0000141f 	andeq	r1, r0, pc, lsl r4
    111c:	14102000 	ldrne	r2, [r0], #-0
    1120:	0a640000 	beq	1901128 <__ccfg+0x18e1180>
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	02e00000 	rsceq	r0, r0, #0
		syserror (EREQPAR, "addv");
    1128:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
		syserror (ERESOURCE, "addv");
    112c:	09500204 	ldmdbeq	r0, {r2, r9}^
	if (ioreq [loc] != NULL)
    1130:	1f210000 	svcne	0x00210000
    1134:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ERESOURCE, "addv");
    1138:	0013f320 	andseq	pc, r3, r0, lsr #6
	ioreq [loc] = rf;
    113c:	000a7e00 	andeq	r7, sl, r0, lsl #28
}
    1140:	0002f800 	andeq	pc, r2, r0, lsl #16
    1144:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
sint io (word retry, word dev, word operation, char *buf, word len) {
    1148:	00096b02 	andeq	r6, r9, r2, lsl #22
    114c:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    1150:	26000000 	strcs	r0, [r0], -r0
    1154:	000013f3 	strdeq	r1, [r0], -r3
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1158:	00000a84 	andeq	r0, r0, r4, lsl #21
    115c:	00000a86 	andeq	r0, r0, r6, lsl #21
    1160:	02040e01 	andeq	r0, r4, #1, 28
		syserror (ENODEVICE, "io");
    1164:	00000986 	andeq	r0, r0, r6, lsl #19
    1168:	00140221 	andseq	r0, r4, r1, lsr #4
	if (len == 0)
    116c:	34200000 	strtcc	r0, [r0], #-0
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	96000012 			; <UNDEFINED> instruction: 0x96000012
    1174:	1000000a 	andne	r0, r0, sl
	if (ret >= 0)
    1178:	01000003 	tsteq	r0, r3
	if (ret == -1) {
    117c:	a102041b 	tstge	r2, fp, lsl r4
    1180:	21000009 	tstcs	r0, r9
		if (retry == WNONE)
    1184:	00001243 	andeq	r1, r0, r3, asr #4
		iowait (dev, operation, retry);
    1188:	0ccb2600 	stcleq	6, cr2, [fp], {0}
    118c:	0ac00000 	beq	ff001194 <_estack+0xdeffc194>
    1190:	0aea0000 	beq	ffa81198 <_estack+0xdfa7c198>
			release;
    1194:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
	if (ret == -2) {
    1198:	09c80204 	stmibeq	r8, {r2, r9}^
		if (retry != WNONE) {
    119c:	43250000 			; <UNDEFINED> instruction: 0x43250000
    11a0:	de000014 	mcrle	0, 0, r0, cr0, cr4, {0}
			iowait (dev, operation, retry);
    11a4:	2800000a 	stmdacs	r0, {r1, r3}
    11a8:	01000003 	tsteq	r0, r3
			(ioreq [dev]) (NONE, buf, len);
    11ac:	00020301 	andeq	r0, r2, r1, lsl #6
    11b0:	0012ab26 	andseq	sl, r2, r6, lsr #22
    11b4:	000afa00 	andeq	pc, sl, r0, lsl #20
		(ioreq [dev]) (NONE, buf, len);
    11b8:	000b0e00 	andeq	r0, fp, r0, lsl #28
    11bc:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
    11c0:	0009ef03 	andeq	lr, r9, r3, lsl #30
}
    11c4:	12b61d00 	adcsne	r1, r6, #0, 26
	if (retry != WNONE) {
    11c8:	0afa0000 	beq	ffe811d0 <_estack+0xdfe7c1d0>
		delay (-ret - 2, retry);
    11cc:	0afe0000 	beq	fff811d4 <_estack+0xdff7c1d4>
    11d0:	140b0000 	strne	r0, [fp], #-0
    11d4:	33000501 	movwcc	r0, #1281	; 0x501
    11d8:	00000b95 	muleq	r0, r5, fp
		release;
    11dc:	00000b14 	andeq	r0, r0, r4, lsl fp
    11e0:	00000340 	andeq	r0, r0, r0, asr #6
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
    11e8:	00131133 	andseq	r1, r3, r3, lsr r1
    11ec:	000b1400 	andeq	r1, fp, r0, lsl #8
    11f0:	00034000 	andeq	r4, r3, r0
    11f4:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
		syserror (ERESOURCE, "mal1");
    11f8:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
    11fc:	20210000 	eorcs	r0, r1, r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1200:	00000013 	andeq	r0, r0, r3, lsl r0
    1204:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1208:	0000085d 	andeq	r0, r0, sp, asr r8
	m_size (mpools [0]) = mlen - m_hdrlen;
    120c:	0603ed01 	streq	lr, [r3], -r1, lsl #26
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1210:	00090401 	andeq	r0, r9, r1, lsl #8
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1214:	00094000 	andeq	r4, r9, r0
    1218:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
}
    121c:	3400000a 	strcc	r0, [r0], #-10
    1220:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1224:	1c03ed01 	stcne	13, cr14, [r3], {1}
    1228:	0000008d 	andeq	r0, r0, sp, lsl #1
    122c:	69295001 	stmdbvs	r9!, {r0, ip, lr}
    1230:	03ef0100 	mvneq	r0, #0, 2
void __pi_free (aword *ch) {
    1234:	00008d06 	andeq	r8, r0, r6, lsl #26
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1238:	0000e500 	andeq	lr, r0, r0, lsl #10
    123c:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
		syserror (EMALLOC, "malg");
    1240:	03f00100 	mvnseq	r0, #0, 2
    1244:	0000df08 	andeq	sp, r0, r8, lsl #30
	mcfree [MA_NP] += m_size (ch);
    1248:	00010300 	andeq	r0, r1, r0, lsl #6
		m_size (ch) ^= MALLOC_UMASK;
    124c:	11ed2500 	mvnne	r2, r0, lsl #10
    1250:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
	mcfree [MA_NP] += m_size (ch);
    1254:	01f80000 	mvnseq	r0, r0
	QFREE;
    1258:	f2010000 	vhadd.s8	d0, d1, d0
	if (mevent [MA_NP] . nwait) {
    125c:	ac200203 	sfmge	f0, 4, [r0], #-12
    1260:	0a000013 	beq	12b4 <kill+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1264:	10000009 	andne	r0, r0, r9
		mevent [MA_NP] . nwait --;
    1268:	01000002 	tsteq	r0, r2
}
    126c:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
    1270:	3500000a 	strcc	r0, [r0, #-10]
    1274:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    1278:	00000103 	andeq	r0, r0, r3, lsl #2
void kill (aword pid) {
    127c:	11f71d00 	mvnsne	r1, r0, lsl #26
		pid = (aword) __pi_curr;
    1280:	092e0000 	stmdbeq	lr!, {}	; <UNPREDICTABLE>
	j = NULL;
    1284:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
	for_all_tasks (i) {
    1288:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
	syserror (EREQPAR, "kpi");
    128c:	2c000203 	sfmcs	f0, 4, [r0], {3}
    1290:	00080101 	andeq	r0, r8, r1, lsl #2
		if ((aword)i == pid) {
    1294:	03da0100 	bicseq	r0, sl, #0, 2
    1298:	08c00106 	stmiaeq	r0, {r1, r2, r8}^
				__PCB = i->Next;
    129c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
			killev (i);
    12a0:	9c010000 	stcls	0, cr0, [r1], {-0}
			ufree (i);
    12a4:	00000b2c 	andeq	r0, r0, ip, lsr #22
			if (i == __pi_curr)
    12a8:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
    12ac:	03da0100 	bicseq	r0, sl, #0, 2
				release;
    12b0:	00008d1c 	andeq	r8, r0, ip, lsl sp
				j->Next = i->Next;
    12b4:	1c500100 	ldfnee	f0, [r0], {-0}
    12b8:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
    12bc:	008d0603 	addeq	r0, sp, r3, lsl #12
}
    12c0:	62290000 	eorvs	r0, r9, #0
    12c4:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    12c8:	00df0803 	sbcseq	r0, pc, r3, lsl #16
	if (size < 8)
    12cc:	01160000 	tsteq	r6, r0
		_size = 2;
    12d0:	ed250000 	stc	0, cr0, [r5, #-0]
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12d4:	c0000011 	andgt	r0, r0, r1, lsl r0
		_size = (((aword)size) + 3) >> 2;
    12d8:	b0000008 	andlt	r0, r0, r8
		if (m_magic (chunk) != MALLOC_MAGIC)
    12dc:	01000001 	tsteq	r0, r1
		_size = (((aword)size) + 3) >> 2;
    12e0:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
		if (mevent [MA_NP] . nfail != 255)
    12e4:	000013ac 	andeq	r1, r0, ip, lsr #7
    12e8:	000008c4 	andeq	r0, r0, r4, asr #17
			mevent [MA_NP] . nfail ++;
    12ec:	000001c8 	andeq	r0, r0, r8, asr #3
		mnfree [MA_NP] = 0;
    12f0:	0303e201 	movweq	lr, #12801	; 0x3201
    12f4:	00000b1a 	andeq	r0, r0, sl, lsl fp
		if (m_magic (chunk) != MALLOC_MAGIC)
    12f8:	0013bb35 	andseq	fp, r3, r5, lsr fp
    12fc:	00012900 	andeq	r2, r1, r0, lsl #18
			syserror (EMALLOC, "malc");
    1300:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    1304:	f2000011 	vqadd.s8	d0, d0, d1
		if (m_size (chunk) >= _size)
    1308:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    130c:	01000008 	tsteq	r0, r8
		chunk = m_nextp (chunk)) {
    1310:	000203e6 	andeq	r0, r2, r6, ror #7
		m_setnextp (cc, m_nextp (chunk));
    1314:	086e011e 	stmdaeq	lr!, {r1, r2, r3, r4, r8}^
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1318:	c6010000 	strgt	r0, [r1], -r0
    131c:	09400603 	stmdbeq	r0, {r0, r1, r9, sl}^
			m_size (chunk) = _size;
    1320:	09e40000 	stmibeq	r4!, {}^	; <UNPREDICTABLE>
			cc = chunk + _size + m_hdrlen;
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	00000b95 	muleq	r0, r5, fp
			m_size (cc) = waste - m_hdrlen;
    132c:	0009522e 	andeq	r5, r9, lr, lsr #4
			QFREE;
    1330:	00098000 	andeq	r8, r9, r0
		mevent [MA_NP] . nfail = 0;
    1334:	000b6e00 	andeq	r6, fp, r0, lsl #28
		mcfree [MA_NP] -= m_size (chunk);
    1338:	006a3600 	rsbeq	r3, sl, r0, lsl #12
    133c:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
    1340:	3c000000 	stccc	0, cr0, [r0], {-0}
    1344:	36000001 	strcc	r0, [r0], -r1
		m_size (chunk) |= MALLOC_UMASK;
    1348:	03070069 	movweq	r0, #28777	; 0x7069
		if (mnfree [MA_NP] > mcfree [MA_NP])
    134c:	0003f402 	andeq	pc, r3, r2, lsl #8
		m_size (chunk) |= MALLOC_UMASK;
    1350:	00014f00 	andeq	r4, r1, r0, lsl #30
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	92370000 	eorsls	r0, r7, #0
}
    1358:	c0000009 	andgt	r0, r0, r9
    135c:	36000009 	strcc	r0, [r0], -r9
    1360:	0208006a 	andeq	r0, r8, #106	; 0x6a
    1364:	00008d02 	andeq	r8, r0, r2, lsl #26
    1368:	00016200 	andeq	r6, r1, r0, lsl #4
    136c:	00693600 	rsbeq	r3, r9, r0, lsl #12
    1370:	f4020208 	vst1.8	{d0-d3}, [r2], r8
aword __pi_fork (fsmcode func, aword data) {
    1374:	75000003 	strvc	r0, [r0, #-3]
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	00000001 	andeq	r0, r0, r1
    137c:	06823800 	streq	r3, [r2], r0, lsl #16
    1380:	bb010000 	bllt	41388 <__ccfg+0x213e0>
		if ((j = __PCB) == NULL)
    1384:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
	i->Next = NULL;
    1388:	0009df01 	andeq	sp, r9, r1, lsl #30
	i->data = data;
    138c:	03820100 	orreq	r0, r2, #0, 2
		if ((j = __PCB) == NULL)
    1390:	00080006 	andeq	r0, r8, r6
}
    1394:	0008c000 	andeq	ip, r8, r0
			for (; j->Next != NULL; j = j->Next);
    1398:	289c0100 	ldmcs	ip, {r8}
    139c:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
	return (aword) i;
    13a0:	0000082c 	andeq	r0, r0, ip, lsr #16
    13a4:	0000085a 	andeq	r0, r0, sl, asr r8
	if (mevent [MA_NP] . nwait != 255)
    13a8:	00000be3 	andeq	r0, r0, r3, ror #23
    13ac:	01006a29 	tsteq	r0, r9, lsr #20
    13b0:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
		mevent [MA_NP] . nwait ++;
    13b4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	29000001 	stmdbcs	r0, {r0}
    13bc:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
void diag (const char *mess, ...) {
    13c0:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    13c4:	019b0000 	orrseq	r0, fp, r0
    13c8:	1b000000 	blne	13d0 <diag+0x10>
	diag_disable_int (a, is);
    13cc:	00000198 	muleq	r0, r8, r1
    13d0:	00000c0b 	andeq	r0, r0, fp, lsl #24
    13d4:	01006a29 	tsteq	r0, r9, lsr #20
				d = (bc == 16) ? 10000 : 1000000000;
    13d8:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
	diag_disable_int (a, is);
    13dc:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
	while (*mess != '\0') {
    13e0:	29000001 	stmdbcs	r0, {r0}
	dgout ('\r');
    13e4:	8f010069 	svchi	0x00010069
	dgout ('\n');
    13e8:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    13ec:	01c10000 	biceq	r0, r1, r0
    13f0:	33000000 	movwcc	r0, #0
	diag_wait (a);
    13f4:	000012e7 	andeq	r1, r0, r7, ror #5
	diag_enable_int (a, is);
    13f8:	00000800 	andeq	r0, r0, r0, lsl #16
    13fc:	00000178 	andeq	r0, r0, r8, ror r1
}
    1400:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
    1404:	00130321 	andseq	r0, r3, r1, lsr #6
    1408:	12f62100 	rscsne	r2, r6, #0, 2
		if (*mess == '%') {
    140c:	00000000 	andeq	r0, r0, r0
    1410:	00078639 	andeq	r8, r7, r9, lsr r6
			if (*mess == 'l') {
    1414:	037d0100 	cmneq	sp, #0, 2
    1418:	03a4010d 			; <UNDEFINED> instruction: 0x03a4010d
				mess++;
    141c:	03b00000 	movseq	r0, #0
				val = va_arg (ap, lword);
    1420:	9c010000 	stcls	0, cr0, [r1], {-0}
				bc = 32;
    1424:	00000c52 	andeq	r0, r0, r2, asr ip
				bc = 16;
    1428:	00093d2d 	andeq	r3, r9, sp, lsr #26
			switch (*mess) {
    142c:	037d0100 	cmneq	sp, #0, 2
    1430:	00008d1f 	andeq	r8, r0, pc, lsl sp
    1434:	0001d400 	andeq	sp, r1, r0, lsl #8
				dgout ('%');
    1438:	0a3a0000 	beq	e81440 <__ccfg+0xe61498>
    143c:	01000009 	tsteq	r0, r9
				dgout (*mess);
    1440:	010c0310 	tsteq	ip, r0, lsl r3
    1444:	0000008d 	andeq	r0, r0, sp, lsl #1
			switch (*mess) {
    1448:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
					v = __pi_hex_enc_table [
    144c:	00000800 	andeq	r0, r0, r0, lsl #16
					i += 4;
    1450:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
					(val >> (bc - i)) & 0xf];
    1454:	072d0000 	streq	r0, [sp, -r0]!
    1458:	01000007 	tsteq	r0, r7
					dgout (v);
    145c:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
    1460:	f2000000 	vhadd.s8	d0, d0, d0
				while (i < bc) {
    1464:	3b000001 	blcc	1470 <diag+0xb0>
			mess++;
    1468:	00667562 	rsbeq	r7, r6, r2, ror #10
					d /= 10;
    146c:	2f031001 	svccs	0x00031001
				if ((val >> (bc - 1)) & 1) {
    1470:	000001c9 	andeq	r0, r0, r9, asr #3
    1474:	00000205 	andeq	r0, r0, r5, lsl #4
					dgout ('-');
    1478:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
    147c:	03100100 	tsteq	r0, #0, 2
						val |= 0xffff0000;
    1480:	00008d38 	andeq	r8, r0, r8, lsr sp
    1484:	0002a700 	andeq	sl, r2, r0, lsl #14
    1488:	062e2b00 	strteq	r2, [lr], -r0, lsl #22
				d = (bc == 16) ? 10000 : 1000000000;
    148c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1490:	2f2b0103 	svccs	0x002b0103
    1494:	01000007 	tsteq	r0, r7
					v = (word) (val / d);
    1498:	2701033d 	smladxcs	r1, sp, r3, r0
					if (v || d == 1) break;
    149c:	00000d44 	andeq	r0, r0, r4, asr #26
    14a0:	000007d2 	ldrdeq	r0, [r0], -r2
					d /= 10;
    14a4:	000007d4 	ldrdeq	r0, [r0], -r4
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
					dgout (v + '0');
    14ac:	000d5821 	andeq	r5, sp, r1, lsr #16
    14b0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    14b4:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
					d /= 10;
    14b8:	0d02fc01 	stceq	12, cr15, [r2, #-4]
					val = val - (v * d);
    14bc:	07d13c01 	ldrbeq	r3, [r1, r1, lsl #24]
					if (d == 0) break;
    14c0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
					v = (word) (val / d);
    14c4:	06b80d02 	ldrteq	r0, [r8], r2, lsl #26
    14c8:	06f00000 	ldrbteq	r0, [r0], r0
				if (bc == 16)
    14cc:	9c010000 	stcls	0, cr0, [r1], {-0}
				d = (bc == 16) ? 10000 : 1000000000;
    14d0:	00000d44 	andeq	r0, r0, r4, asr #26
					val &= 0xffff;
    14d4:	00133b20 	andseq	r3, r3, r0, lsr #22
					dgout (*s);
    14d8:	0006b800 	andeq	fp, r6, r0, lsl #16
					s++;
    14dc:	00016000 	andeq	r6, r1, r0
				while (*s != '\0') {
    14e0:	02f50100 	rscseq	r0, r5, #0, 2
    14e4:	000d0702 	andeq	r0, sp, r2, lsl #14
			dgout (*mess++);
    14e8:	134a2100 	movtne	r2, #41216	; 0xa100
    14ec:	26000000 	strcs	r0, [r0], -r0
    14f0:	00001375 	andeq	r1, r0, r5, ror r3
    14f4:	000006c4 	andeq	r0, r0, r4, asr #13
    14f8:	000006ca 	andeq	r0, r0, sl, asr #13
}
    14fc:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
    while(1)
    1500:	00000d2c 	andeq	r0, r0, ip, lsr #26
{
    1504:	00139e21 	andseq	r9, r3, r1, lsr #28
    SetupTrimDevice();
    1508:	13912100 	orrsne	r2, r1, #0, 2
    pui32Src = &_etext;
    150c:	84210000 	strthi	r0, [r1], #-0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1510:	00000013 	andeq	r0, r0, r3, lsl r0
    __asm("    ldr     r0, =_bss\n"
    1514:	0012ca27 	andseq	ip, r2, r7, lsr #20
    1518:	0006ca00 	andeq	ip, r6, r0, lsl #20
    151c:	0006d400 	andeq	sp, r6, r0, lsl #8
    1520:	02f70100 	rscseq	r0, r7, #0, 2
    1524:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
   main();
    1528:	00000000 	andeq	r0, r0, r0
    FaultISR();
    152c:	05fc013d 	ldrbeq	r0, [ip, #317]!	; 0x13d
        *pui32Dest++ = *pui32Src++;
    1530:	eb010000 	bl	41538 <__ccfg+0x21590>
    1534:	a7010602 	strge	r0, [r1, -r2, lsl #12]
    1538:	01000000 	mrseq	r0, (UNDEF: 0)
    153c:	00000d65 	andeq	r0, r0, r5, ror #26
    1540:	0061753e 	rsbeq	r7, r1, lr, lsr r5
    1544:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
    1548:	00000d65 	andeq	r0, r0, r5, ror #26
    154c:	26040700 	strcs	r0, [r4], -r0, lsl #14
static byte get_byte () {
    1550:	1a000002 	bne	1560 <get_byte+0x10>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1554:	0006b501 	andeq	fp, r6, r1, lsl #10
    1558:	02d40100 	sbcseq	r0, r4, #0, 2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    155c:	009b0109 	addseq	r0, fp, r9, lsl #2
    1560:	06640000 	strbteq	r0, [r4], -r0
		if (ee_inp)
    1564:	06b80000 	ldrteq	r0, [r8], r0
			b |= 1;
    1568:	9c010000 	stcls	0, cr0, [r1], {-0}
    156c:	00000dc1 	andeq	r0, r0, r1, asr #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1570:	0006092d 	andeq	r0, r6, sp, lsr #18
	for (b = 0, i = 0; i < 8; i++) {
    1574:	02d40100 	sbcseq	r0, r4, #0, 2
}
    1578:	0000a721 	andeq	sl, r0, r1, lsr #14
    157c:	00033300 	andeq	r3, r3, r0, lsl #6
    1580:	61753b00 	cmnvs	r5, r0, lsl #22
static void put_byte (byte b) {
    1584:	02d40100 	sbcseq	r0, r4, #0, 2
    1588:	000dc12f 	andeq	ip, sp, pc, lsr #2
    158c:	00034600 	andeq	r4, r3, r0, lsl #12
    1590:	13583300 	cmpne	r8, #0, 6
		if (b & 0x80)
    1594:	06840000 	streq	r0, [r4], r0
    1598:	01480000 	mrseq	r0, (UNDEF: 72)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    159c:	e6010000 	str	r0, [r1], -r0
	for (i = 0; i < 8; i++) {
    15a0:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
		b <<= 1;
    15a4:	00000013 	andeq	r0, r0, r3, lsl r0
	for (i = 0; i < 8; i++) {
    15a8:	1a040700 	bne	1031b0 <__ccfg+0xe3208>
}
    15ac:	1a000002 	bne	15bc <cmd_0+0x8>
    15b0:	000a0501 	andeq	r0, sl, r1, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    15b4:	018a0100 	orreq	r0, sl, r0, lsl #2
    15b8:	00a70106 	adceq	r0, r7, r6, lsl #2
	put_byte (cmd);
    15bc:	06140000 	ldreq	r0, [r4], -r0
    15c0:	06640000 	strbteq	r0, [r4], -r0
}
    15c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15c8:	00000e0f 	andeq	r0, r0, pc, lsl #28
static void wwait (word st, word del) {
    15cc:	0007dd2d 	andeq	sp, r7, sp, lsr #26
    15d0:	018a0100 	orreq	r0, sl, r0, lsl #2
    15d4:	00009b26 	andeq	r9, r0, r6, lsr #22
	while (dopen && (rdsr () & 1)) {
    15d8:	00035900 	andeq	r5, r3, r0, lsl #18
    15dc:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
    15e0:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    15e4:	0f461d01 	svceq	0x00461d01
	put_byte (CMD_RDSR);
    15e8:	06280000 	strteq	r0, [r8], -r0
	r = get_byte ();
    15ec:	06320000 	ldrteq	r0, [r2], -r0
    15f0:	9c010000 	stcls	0, cr0, [r1], {-0}
	while (dopen && (rdsr () & 1)) {
    15f4:	1e001a01 	vmlane.f32	s2, s0, s2
}
    15f8:	00079301 	andeq	r9, r7, r1, lsl #6
		if (st == WNONE)
    15fc:	01380100 	teqeq	r8, r0, lsl #2
    1600:	00050006 	andeq	r0, r5, r6
			mdelay (1);
    1604:	00061400 	andeq	r1, r6, r0, lsl #8
    1608:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
			delay (del, st);
    160c:	4000000e 	andmi	r0, r0, lr
    1610:	000008a8 	andeq	r0, r0, r8, lsr #17
			release;
    1614:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
    1618:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    161c:	00000377 	andeq	r0, r0, r7, ror r3
static void ready () {
    1620:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
	if (dopen) {
    1624:	01680100 	cmneq	r8, r0, lsl #2
		wwait (WNONE, 1);
    1628:	00054e01 	andeq	r4, r5, r1, lsl #28
    162c:	01302300 	teqeq	r0, r0, lsl #6
    1630:	11400000 	mrsne	r0, (UNDEF: 64)
	dstat = 0;
    1634:	01000007 	tsteq	r0, r7
}
    1638:	9b0b0147 	blls	2c1b5c <__ccfg+0x2a1bb4>
    163c:	c2000000 	andgt	r0, r0, #0
    1640:	42000003 	andmi	r0, r0, #3
	udelay (1);
    1644:	00001410 	andeq	r1, r0, r0, lsl r4
    1648:	0000056c 	andeq	r0, r0, ip, ror #10
	udelay (1);
    164c:	00000574 	andeq	r0, r0, r4, ror r5
		dopen = DOPEN_TEMP;
    1650:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
    1654:	2100000e 	tstcs	r0, lr
    1658:	0000141f 	andeq	r1, r0, pc, lsl r4
    165c:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
static void cclose () {
    1660:	05780000 	ldrbeq	r0, [r8, #-0]!
	if (dopen == DOPEN_TEMP) {
    1664:	05800000 	streq	r0, [r0]
    1668:	0f050000 	svceq	0x00050000
		wwait (WNONE, 1);
    166c:	000e8f06 	andeq	r8, lr, r6, lsl #30
    1670:	141f2100 	ldrne	r2, [pc], #-256	; 1678 <cclose+0x18>
	cmd_0 (CMD_DP);
    1674:	42000000 	andmi	r0, r0, #0
    1678:	000013f3 	strdeq	r1, [r0], -r3
		dopen = 0;
    167c:	000005c6 	andeq	r0, r0, r6, asr #11
}
    1680:	000005ce 	andeq	r0, r0, lr, asr #11
word ee_open () {
    1684:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
	ready ();
    1688:	2100000e 	tstcs	r0, lr
	dopen = DOPEN_PERM;
    168c:	00001402 	andeq	r1, r0, r2, lsl #8
    1690:	13f34300 	mvnsne	r4, #0, 6
}
    1694:	05d20000 	ldrbeq	r0, [r2]
	if (dopen) {
    1698:	05da0000 	ldrbeq	r0, [sl]
    169c:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
		dopen = DOPEN_TEMP;
    16a0:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
		cclose ();
    16a4:	00000000 	andeq	r0, r0, r0
}
    16a8:	45011e00 	strmi	r1, [r1, #-3584]	; 0xfffff200
int ser_in (word st, char *buf, int len) {
    16ac:	01000008 	tsteq	r0, r8
    16b0:	d806012b 	stmdale	r6, {r0, r1, r3, r5, r8}
	if (len == 0)
    16b4:	00000004 	andeq	r0, r0, r4
	if (__inpline == NULL) {
    16b8:	01000005 	tsteq	r0, r5
		if ((prcs = running (__inserial)) == 0) {
    16bc:	000ef19c 	muleq	lr, ip, r1
    16c0:	0f253300 	svceq	0x00253300
			prcs = runthread (__inserial);
    16c4:	04e00000 	strbteq	r0, [r0], #0
    16c8:	01180000 	tsteq	r8, r0
			if (prcs == 0) {
    16cc:	32010000 	andcc	r0, r1, #0
				npwait (st);
    16d0:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
		release;
    16d4:	0000000f 	andeq	r0, r0, pc
		join (prcs, st);
    16d8:	aa011e00 	bge	48ee0 <__ccfg+0x28f38>
    16dc:	01000007 	tsteq	r0, r7
	if (*__inpline == NULL) // bin cmd
    16e0:	9806011e 	stmdals	r6, {r1, r2, r3, r4, r8}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    16e4:	d8000004 	stmdale	r0, {r2}
	if (prcs >= len)
    16e8:	01000004 	tsteq	r0, r4
		prcs = len-1;
    16ec:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
	memcpy (buf, __inpline, prcs);
    16f0:	0f253300 	svceq	0x00253300
    16f4:	04aa0000 	strteq	r0, [sl], #0
    16f8:	00f80000 	rscseq	r0, r8, r0
	ufree (__inpline);
    16fc:	25010000 	strcs	r0, [r1, #-0]
	__inpline = NULL;
    1700:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
	if (*buf) // if it's NULL, it's a bin cmd
    1704:	0100000f 	tsteq	r0, pc
		buf [prcs] = '\0';
    1708:	00000004 	andeq	r0, r0, r4
}
    170c:	08a14400 	stmiaeq	r1!, {sl, lr}
		prcs = strlen (__inpline);
    1710:	17010000 	strne	r0, [r1, -r0]
    1714:	df011501 	svcle	0x00011501
		return 0;
    1718:	03000000 	movweq	r0, #0
    171c:	00000f46 	andeq	r0, r0, r6, asr #30
    1720:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
int ser_outf (word st, const char *m, ...) {
    1724:	01170100 	tsteq	r7, r0, lsl #2
    1728:	0000a722 	andeq	sl, r0, r2, lsr #14
	if ((prcs = running (__outserial)) != 0) {
    172c:	1e450000 	cdpne	0, 4, cr0, cr5, cr0, {0}
    1730:	01000005 	tsteq	r0, r5
		join (prcs, st);
    1734:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
    1738:	03000000 	movweq	r0, #0
		release;
    173c:	0009f946 	andeq	pc, r9, r6, asr #18
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1740:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
    1744:	000f7a03 	andeq	r7, pc, r3, lsl #20
    1748:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
		umwait (st);
    174c:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
    1750:	00008d06 	andeq	r8, r0, r6, lsl #26
	if (runstrand (__outserial, buf) == 0) {
    1754:	69474800 	stmdbvs	r7, {fp, lr}^
    1758:	0bf40100 	bleq	ffd01b60 <_estack+0xdfcfcb60>
    175c:	0000008d 	andeq	r0, r0, sp, lsl #1
		ufree (buf);
    1760:	01490000 	mrseq	r0, (UNDEF: 73)
		npwait (st);
    1764:	0000092f 	andeq	r0, r0, pc, lsr #18
}
    1768:	01069801 	tsteq	r6, r1, lsl #16
    176c:	00000444 	andeq	r0, r0, r4, asr #8
    1770:	00000498 	muleq	r0, r8, r4
    1774:	10249c01 	eorne	r9, r4, r1, lsl #24
int ser_inf (word st, const char *fmt, ...) {
    1778:	654a0000 	strbvs	r0, [sl, #-0]
    177c:	98010063 	stmdals	r1, {r0, r1, r5, r6}
	if (fmt == NULL)
    1780:	0000a71a 	andeq	sl, r0, sl, lsl r7
	if (__inpline == NULL) {
    1784:	00041400 	andeq	r1, r4, r0, lsl #8
		if ((prcs = running (__inserial)) == 0) {
    1788:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
    178c:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
			prcs = runthread (__inserial);
    1790:	27000010 	smladcs	r0, r0, r0, r0
    1794:	28000004 	stmdacs	r0, {r2}
			if (prcs == 0) {
    1798:	000011ed 	andeq	r1, r0, sp, ror #3
				npwait (st);
    179c:	00000450 	andeq	r0, r0, r0, asr r4
		release;
    17a0:	00000452 	andeq	r0, r0, r2, asr r4
		join (prcs, st);
    17a4:	2202a801 	andcs	sl, r2, #65536	; 0x10000
    17a8:	00001410 	andeq	r1, r0, r0, lsl r4
	va_start (ap, fmt);
    17ac:	00000452 	andeq	r0, r0, r2, asr r4
	prcs = vscan (__inpline, fmt, ap);
    17b0:	000000a8 	andeq	r0, r0, r8, lsr #1
    17b4:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
	ufree (__inpline);
    17b8:	2100000f 	tstcs	r0, pc
	__inpline = NULL;
    17bc:	0000141f 	andeq	r1, r0, pc, lsl r4
}
    17c0:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
    17c4:	04580000 	ldrbeq	r0, [r8], #-0
    17c8:	00c80000 	sbceq	r0, r8, r0
		return 0;
    17cc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    17d0:	000ff303 	andeq	pc, pc, r3, lsl #6
    17d4:	141f2100 	ldrne	r2, [pc], #-256	; 17dc <__outserial+0x4>
strand (__outserial, const char*)
    17d8:	22000000 	andcs	r0, r0, #0
    17dc:	000013f3 	strdeq	r1, [r0], -r3
    17e0:	00000470 	andeq	r0, r0, r0, ror r4
    17e4:	000000e0 	andeq	r0, r0, r0, ror #1
endstrand
    17e8:	0d03b801 	stceq	8, cr11, [r3, #-4]
    17ec:	21000010 	tstcs	r0, r0, lsl r0
	ptr = data;
    17f0:	00001402 	andeq	r1, r0, r2, lsl #8
    17f4:	13f34300 	mvnsne	r4, #0, 6
	if (*ptr)
    17f8:	04760000 	ldrbteq	r0, [r6], #-0
		len = strlen (ptr);
    17fc:	04780000 	ldrbteq	r0, [r8], #-0
    1800:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1804:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
    1808:	00000000 	andeq	r0, r0, r0
    180c:	01d60407 	bicseq	r0, r6, r7, lsl #8
    1810:	01490000 	mrseq	r0, (UNDEF: 73)
    1814:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	len -= quant;
    1818:	01067201 	tsteq	r6, r1, lsl #4
	...
	if (len == 0) {
    1824:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
		ufree (data);
    1828:	734a0000 	movtvc	r0, #40960	; 0xa000
		finish;
    182c:	72010074 	andvc	r0, r1, #116	; 0x74
    1830:	0000a718 	andeq	sl, r0, r8, lsl r7
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1834:	00044500 	andeq	r4, r4, r0, lsl #10
    1838:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
    183c:	7201006e 	andvc	r0, r1, #110	; 0x6e
    1840:	00024428 	andeq	r4, r2, r8, lsr #8
    1844:	00045800 	andeq	r5, r4, r0, lsl #16
strand (__inserial, address)
    1848:	61764a00 	cmnvs	r6, r0, lsl #20
    184c:	7201006c 	andvc	r0, r1, #108	; 0x6c
    1850:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
    1854:	00047600 	andeq	r7, r4, r0, lsl #12
    1858:	05394b00 	ldreq	r4, [r9, #-2816]!	; 0xfffff500
	if (__inpline != NULL)
    185c:	74010000 	strvc	r0, [r1], #-0
    1860:	0000c90e 	andeq	ip, r0, lr, lsl #18
		finish;
    1864:	00030500 	andeq	r0, r3, r0, lsl #10
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1868:	4c000000 	stcmi	0, cr0, [r0], {-0}
    186c:	00000a1c 	andeq	r0, r0, ip, lsl sl
    1870:	00017801 	andeq	r7, r1, r1, lsl #16
    1874:	4d000000 	stcmi	0, cr0, [r0, #-0]
		umwait (IM_INIT);
    1878:	00001220 	andeq	r1, r0, r0, lsr #4
		release;
    187c:	00000000 	andeq	r0, r0, r0
	savedata (data);
    1880:	000004e0 	andeq	r0, r0, r0, ror #9
	len = MAX_LINE_LENGTH;
    1884:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
	io (IM_READ, __cport, READ, ptr, 1);
    1888:	00001201 	andeq	r1, r0, r1, lsl #4
	...
    1894:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
	if (ptr == (char*) data) { // new line
    1898:	2f000010 	svccs	0x00000010
    189c:	00001213 	andeq	r1, r0, r3, lsl r2
		if (*ptr == '\0') { // bin cmd
    18a0:	122a2800 	eorne	r2, sl, #0, 16
	...
		if (*ptr < 0x20)
    18ac:	84010000 	strhi	r0, [r1], #-0
    18b0:	014e0003 	cmpeq	lr, r3
			proceed (IM_READ);
    18b4:	000009c3 	andeq	r0, r0, r3, asr #19
    18b8:	01066201 	tsteq	r6, r1, lsl #4
	...
	if (*ptr == '\n' || *ptr == '\r') {
    18c4:	01499c01 	cmpeq	r9, r1, lsl #24
		*ptr = '\0';
    18c8:	000004d8 	ldrdeq	r0, [r0], -r8
		__inpline = (char*)data;
    18cc:	01064f01 	tsteq	r6, r1, lsl #30
	...
		ptr++;
    18d8:	11079c01 	tstne	r7, r1, lsl #24
    18dc:	51280000 			; <UNDEFINED> instruction: 0x51280000
		len--;
    18e0:	00000012 	andeq	r0, r0, r2, lsl r0
	proceed (IM_READ);
    18e4:	00000000 	andeq	r0, r0, r0
	io (IM_BIN, __cport, READ, ptr, 1);
    18e8:	01000000 	mrseq	r0, (UNDEF: 0)
    18ec:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
    18f0:	00050f01 	andeq	r0, r5, r1, lsl #30
    18f4:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    18f8:	00000001 	andeq	r0, r0, r1
	len -= 2;
    18fc:	00000000 	andeq	r0, r0, r0
	if (len > *ptr + 1) // 1 for 0x04
    1900:	2e9c0100 	fmlcse	f0, f4, f0
    1904:	4a000011 	bmi	1950 <__inserial+0x108>
		len = *ptr + 1;
    1908:	3b010064 	blcc	41aa0 <__ccfg+0x21af8>
    190c:	0000df1c 	andeq	sp, r0, ip, lsl pc
	ptr++;
    1910:	00049400 	andeq	r9, r4, r0, lsl #8
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1914:	01490000 	mrseq	r0, (UNDEF: 73)
    1918:	000005cf 	andeq	r0, r0, pc, asr #11
    191c:	01062b01 	tsteq	r6, r1, lsl #22
    1920:	00000408 	andeq	r0, r0, r8, lsl #8
    1924:	00000444 	andeq	r0, r0, r4, asr #8
    1928:	11559c01 	cmpne	r5, r1, lsl #24
	len -= quant;
    192c:	644a0000 	strbvs	r0, [sl], #-0
		__inpline = (char*)data;
    1930:	1b2b0100 	blne	ac1d38 <__ccfg+0xaa1d90>
		finish;
    1934:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	ptr += quant;
    1938:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    193c:	12014900 	andne	r4, r1, #0, 18
endstrand
    1940:	01000008 	tsteq	r0, r8
    1944:	dc010620 	stcle	6, cr0, [r1], {32}
	proceed (IM_BINL);
    1948:	06000003 	streq	r0, [r0], -r3
endstrand
    194c:	01000004 	tsteq	r0, r4
    1950:	00117c9c 	mulseq	r1, ip, ip
    1954:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
    1958:	b81c2001 	ldmdalt	ip, {r0, sp}
    195c:	d0000000 	andle	r0, r0, r0
    1960:	00000004 	andeq	r0, r0, r4
		if (res && (d < n))
    1964:	08af0149 	stmiaeq	pc!, {r0, r3, r6, r8}	; <UNPREDICTABLE>
    1968:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    196c:	03b00106 	movseq	r0, #-2147483647	; 0x80000001
    1970:	03dc0000 	bicseq	r0, ip, #0
			res [d] = (char) c;
    1974:	9c010000 	stcls	0, cr0, [r1], {-0}
		d++;
    1978:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    197c:	01006e4f 	tsteq	r0, pc, asr #28
    1980:	00b81c19 	adcseq	r1, r8, r9, lsl ip
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1984:	50010000 	andpl	r0, r1, r0
    1988:	0011b743 	andseq	fp, r1, r3, asr #14
    198c:	0003c400 	andeq	ip, r3, r0, lsl #8
				enci (10000);
    1990:	0003ce00 	andeq	ip, r3, r0, lsl #28
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1994:	031b0100 	tsteq	fp, #0, 2
    1998:	0011c521 	andseq	ip, r1, r1, lsr #10
	d = 0;
    199c:	50000000 	andpl	r0, r0, r0
		c = *fm++;
    19a0:	000009d7 	ldrdeq	r0, [r0], -r7
		if (c == '\\') {
    19a4:	01141501 	tsteq	r4, r1, lsl #10
			if ((c = *fm++) == '\0') {
    19a8:	0011d003 	andseq	sp, r1, r3
    19ac:	006e5100 	rsbeq	r5, lr, r0, lsl #2
				outc ('\\');
    19b0:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
			if ((c = *fm++) == '\0') {
    19b4:	00000000 	andeq	r0, r0, r0
				outc ('\\');
    19b8:	0005bb52 	andeq	fp, r5, r2, asr fp
    19bc:	011a0300 	tsteq	sl, r0, lsl #6
			outc (c);
    19c0:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
    19c4:	53000011 	movwpl	r0, #17
			if (c == '\0')
    19c8:	000009c8 	andeq	r0, r0, r8, asr #19
    19cc:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
			outc (c);
    19d0:	00000073 	andeq	r0, r0, r3, ror r0
				outc (val);
    19d4:	08195400 	ldmdaeq	r9, {sl, ip, lr}
				val = (word) va_arg (ap, aword);
    19d8:	5b030000 	blpl	c19e0 <__ccfg+0xa1a38>
		if (c == '%') {
    19dc:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
    19e0:	0000052c 	andeq	r0, r0, ip, lsr #10
			c = *fm++;
    19e4:	01355003 	teqeq	r5, r3
			switch (c) {
    19e8:	08ef5503 	stmiaeq	pc!, {r0, r1, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    19ec:	bf0f0000 	svclt	0x000f0000
    19f0:	00730101 	rsbseq	r0, r3, r1, lsl #2
    19f4:	20030000 	andcs	r0, r3, r0
    19f8:	16000012 			; <UNDEFINED> instruction: 0x16000012
    19fc:	0000097b 	andeq	r0, r0, fp, ror r9
    1a00:	730ec10f 	movwvc	ip, #57615	; 0xe10f
    1a04:	00000000 	andeq	r0, r0, r0
				outc ('%');
    1a08:	0008b654 	andeq	fp, r8, r4, asr r6
    1a0c:	01900f00 	orrseq	r0, r0, r0, lsl #30
				outc (c);
    1a10:	f6540301 			; <UNDEFINED> instruction: 0xf6540301
    1a14:	0f000004 	svceq	0x00000004
    1a18:	0301017b 	movweq	r0, #4475	; 0x117b
				if (c == '\0')
    1a1c:	00076952 	andeq	r6, r7, r2, asr r9
				return d;
    1a20:	03660a00 	cmneq	r6, #0, 20
}
    1a24:	51030101 	tstpl	r3, r1, lsl #2
    1a28:	53000012 	movwpl	r0, #18
			switch (c) {
    1a2c:	00000740 	andeq	r0, r0, r0, asr #14
    1a30:	1f03660a 	svcne	0x0003660a
    1a34:	00000073 	andeq	r0, r0, r3, ror r0
				for (i = 12; ; i -= 4) {
    1a38:	088e5600 	stmeq	lr, {r9, sl, ip, lr}
				val = (word) va_arg (ap, aword);
    1a3c:	4c020000 	stcmi	0, cr0, [r2], {-0}
						[ (val >> i) & 0xf ]);
    1a40:	03010101 	movweq	r0, #4353	; 0x1101
    1a44:	00082754 	andeq	r2, r8, r4, asr r7
    1a48:	01c40200 	biceq	r0, r4, r0, lsl #4
					outc (__pi_hex_enc_table
    1a4c:	42570301 	subsmi	r0, r7, #67108864	; 0x4000000
    1a50:	02000006 	andeq	r0, r0, #6
					if (i == 0)
    1a54:	730101ad 	movwvc	r0, #4525	; 0x11ad
    1a58:	03000000 	movweq	r0, #0
				for (i = 12; ; i -= 4) {
    1a5c:	00058f56 	andeq	r8, r5, r6, asr pc
				val = (word) va_arg (ap, aword);
    1a60:	02450e00 	subeq	r0, r5, #0, 28
				if (c == 'd' && (val & 0x8000) != 0) {
    1a64:	58030101 	stmdapl	r3, {r0, r8}
				val = (word) va_arg (ap, aword);
    1a68:	00000561 	andeq	r0, r0, r1, ror #10
				if (c == 'd' && (val & 0x8000) != 0) {
    1a6c:	01022c0e 	tsteq	r2, lr, lsl #24
    1a70:	00007301 	andeq	r7, r0, r1, lsl #6
					outc ('-');
    1a74:	4c520300 	mrrcmi	3, 0, r0, r2, cr0
    1a78:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
					val = (~val) + 1;
    1a7c:	010101dc 	ldrdeq	r0, [r1, -ip]
    1a80:	0012ab03 	andseq	sl, r2, r3, lsl #22
				for (i = 12; ; i -= 4) {
    1a84:	05065300 	streq	r5, [r6, #-768]	; 0xfffffd00
				enci (10000);
    1a88:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    1a8c:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    1a90:	56000000 	strpl	r0, [r0], -r0
    1a94:	000006c7 	andeq	r0, r0, r7, asr #13
    1a98:	01010f0b 	tsteq	r1, fp, lsl #30
    1a9c:	0e540301 	cdpeq	3, 5, cr0, cr4, cr1, {0}
    1aa0:	0c000006 	stceq	0, cr0, [r0], {6}
    1aa4:	030101ed 	movweq	r0, #4589	; 0x11ed
    1aa8:	0008dc54 	andeq	sp, r8, r4, asr ip
    1aac:	01d60c00 	bicseq	r0, r6, r0, lsl #24
    1ab0:	dd520301 	ldclle	3, cr0, [r2, #-4]
    1ab4:	06000005 	streq	r0, [r0], -r5
    1ab8:	01010440 	tsteq	r1, r0, asr #8
    1abc:	0012e703 	andseq	lr, r2, r3, lsl #14
    1ac0:	074d5300 	strbeq	r5, [sp, -r0, lsl #6]
    1ac4:	40060000 	andmi	r0, r6, r0
    1ac8:	00732404 	rsbseq	r2, r3, r4, lsl #8
    1acc:	52000000 	andpl	r0, r0, #0
				if (c == 'd' || c == 'u') {
    1ad0:	00000576 	andeq	r0, r0, r6, ror r5
    1ad4:	01039106 	tsteq	r3, r6, lsl #2
					if (c == 'd' &&
    1ad8:	13110301 	tstne	r1, #67108864	; 0x4000000
					val = va_arg (ap, lword);
    1adc:	4d530000 	ldclmi	0, cr0, [r3, #-0]
					fm++;
    1ae0:	06000007 	streq	r0, [r0], -r7
					if (c == 'd' &&
    1ae4:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    1ae8:	53000000 	movwpl	r0, #0
						outc ('-');
    1aec:	000006a8 	andeq	r0, r0, r8, lsr #13
    1af0:	2a039106 	bcs	e5f10 <__ccfg+0xc5f68>
						val = (~val) + 1;
    1af4:	00000073 	andeq	r0, r0, r3, ror r0
				enci (10000);
    1af8:	098e5200 	stmibeq	lr, {r9, ip, lr}
					enci (1000000000UL);
    1afc:	0c060000 	stceq	0, cr0, [r6], {-0}
    1b00:	03010103 	movweq	r0, #4355	; 0x1103
    1b04:	0000133b 	andeq	r1, r0, fp, lsr r3
    1b08:	00074d53 	andeq	r4, r7, r3, asr sp
    1b0c:	030c0600 	movweq	r0, #50688	; 0xc600
    1b10:	00007318 	andeq	r7, r0, r8, lsl r3
    1b14:	06a85300 	strteq	r5, [r8], r0, lsl #6
    1b18:	0c060000 	stceq	0, cr0, [r6], {-0}
    1b1c:	00732b03 	rsbseq	r2, r3, r3, lsl #22
    1b20:	52000000 	andpl	r0, r0, #0
    1b24:	00000699 	muleq	r0, r9, r6
    1b28:	0101e706 	tsteq	r1, r6, lsl #14
    1b2c:	13580301 	cmpne	r8, #67108864	; 0x4000000
    1b30:	4d530000 	ldclmi	0, cr0, [r3, #-0]
    1b34:	06000007 	streq	r0, [r0], -r7
    1b38:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    1b3c:	00000000 	andeq	r0, r0, r0
				} else if (c == 'x') {
    1b40:	0007e352 	andeq	lr, r7, r2, asr r3
					for (i = 28; ; i -= 4) {
    1b44:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
					val = va_arg (ap, lword);
    1b48:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
							[ (val >> i) & 0xf ]);
    1b4c:	53000013 	movwpl	r0, #19
    1b50:	0000074d 	andeq	r0, r0, sp, asr #14
						outc (__pi_hex_enc_table
    1b54:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
    1b58:	00000073 	andeq	r0, r0, r3, ror r0
    1b5c:	087d5200 	ldmdaeq	sp!, {r9, ip, lr}^
						if (i == 0)
    1b60:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    1b64:	03010101 	movweq	r0, #4353	; 0x1101
					for (i = 28; ; i -= 4) {
    1b68:	000013ac 	andeq	r1, r0, ip, lsr #7
					outc ('%');
    1b6c:	00074d53 	andeq	r4, r7, r3, asr sp
    1b70:	01390600 	teqeq	r9, r0, lsl #12
    1b74:	0000731b 	andeq	r7, r0, fp, lsl r3
					outc ('l');
    1b78:	06365300 	ldrteq	r5, [r6], -r0, lsl #6
    1b7c:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    1b80:	00732e01 	rsbseq	r2, r3, r1, lsl #28
				outc (val);
    1b84:	22530000 	subscs	r0, r3, #0
    1b88:	06000006 	streq	r0, [r0], -r6
				while (*st != '\0') {
    1b8c:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
    1b90:	00000000 	andeq	r0, r0, r0
    1b94:	0007ee52 	andeq	lr, r7, r2, asr lr
    1b98:	02840400 	addeq	r0, r4, #0, 8
					outc (*st);
    1b9c:	c9030101 	stmdbgt	r3, {r0, r8}
    1ba0:	53000013 	movwpl	r0, #19
					st++;
    1ba4:	00000163 	andeq	r0, r0, r3, ror #2
		c = *fm++;
    1ba8:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
    1bac:	00000073 	andeq	r0, r0, r3, ror r0
    1bb0:	04de5200 	ldrbeq	r5, [lr], #512	; 0x200
char *vform (char *res, const char *fm, va_list aq) {
    1bb4:	06040000 	streq	r0, [r4], -r0
    1bb8:	03010102 	movweq	r0, #4354	; 0x1102
	if (res != NULL) {
    1bbc:	000013f3 	strdeq	r1, [r0], -r3
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1bc0:	00016353 	andeq	r6, r1, r3, asr r3
    1bc4:	02060400 	andeq	r0, r6, #0, 8
    1bc8:	00007323 	andeq	r7, r0, r3, lsr #6
}
    1bcc:	09b15300 	ldmibeq	r1!, {r8, r9, ip, lr}
    1bd0:	06040000 	streq	r0, [r4], -r0
	fml = strlen (fm) + 17;
    1bd4:	00733702 	rsbseq	r3, r3, r2, lsl #14
    1bd8:	52000000 	andpl	r0, r0, #0
    1bdc:	000003be 			; <UNDEFINED> instruction: 0x000003be
	if ((res = (char*) umalloc (fml)) == NULL)
    1be0:	01015404 	tsteq	r1, r4, lsl #8
    1be4:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
    1be8:	63530000 	cmpvs	r3, #0
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1bec:	04000001 	streq	r0, [r0], #-1
    1bf0:	73190154 	tstvc	r9, #84, 2
    1bf4:	00000000 	andeq	r0, r0, r0
    1bf8:	00002552 	andeq	r2, r0, r2, asr r5
		ufree (res);
    1bfc:	011e0400 	tsteq	lr, r0, lsl #8
		goto Again;
    1c00:	2d030101 	stfcss	f0, [r3, #-4]
	if (buf == NULL || fmt == NULL)
    1c04:	53000014 	movwpl	r0, #20
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c08:	00000163 	andeq	r0, r0, r3, ror #2
	if (buf == NULL || fmt == NULL)
    1c0c:	17011e04 	strne	r1, [r1, -r4, lsl #28]
    1c10:	00000073 	andeq	r0, r0, r3, ror r0
    1c14:	06e05600 	strbteq	r5, [r0], r0, lsl #12
		    	    case 'u': scanu (lword); break;
    1c18:	63090000 	movwvs	r0, #36864	; 0x9000
			while (isspace (*buf)) buf++;
    1c1c:	03010104 	movweq	r0, #4356	; 0x1104
    1c20:	00065256 	andeq	r5, r6, r6, asr r2
	while (*fmt != '\0') {
    1c24:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
		if (*fmt++ != '%')
    1c28:	56030101 	strpl	r0, [r3], -r1, lsl #2
		switch (*fmt++) {
    1c2c:	0000066b 	andeq	r0, r0, fp, ror #12
    1c30:	01022a09 	tsteq	r2, r9, lsl #20
    1c34:	9c520301 	mrrcls	3, 0, r0, r2, cr1
    1c38:	09000009 	stmdbeq	r0, {r0, r3}
    1c3c:	01010168 	tsteq	r1, r8, ror #2
    1c40:	00146b03 	andseq	r6, r4, r3, lsl #22
    1c44:	06775300 	ldrbteq	r5, [r7], -r0, lsl #6
}
    1c48:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
		switch (*fmt++) {
    1c4c:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    1c50:	56000000 	strpl	r0, [r0], -r0
    1c54:	000005ab 	andeq	r0, r0, fp, lsr #11
    1c58:	01013209 	tsteq	r1, r9, lsl #4
			while (isspace (*buf)) buf++;
    1c5c:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
    1c60:	0000000d 	andeq	r0, r0, sp
    1c64:	00000000 	andeq	r0, r0, r0
    1c68:	01000000 	mrseq	r0, (UNDEF: 0)
    1c6c:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
    1c70:	04e30000 	strbteq	r0, [r3], #0
			if (*buf == '\0')
    1c74:	00000000 	andeq	r0, r0, r0
			if (*buf != ',') {
    1c78:	0000121f 	andeq	r1, r0, pc, lsl r2
			sap = va_arg (ap, char*);
    1c7c:	07ff0003 	ldrbeq	r0, [pc, r3]!
			nc++;
    1c80:	01040000 	mrseq	r0, (UNDEF: 4)
			if (*buf != ',') {
    1c84:	0000016d 	andeq	r0, r0, sp, ror #2
				while (!isspace (*buf) && *buf != ',' &&
    1c88:	000aa70c 	andeq	sl, sl, ip, lsl #14
    1c8c:	0000db00 	andeq	sp, r0, r0, lsl #22
    1c90:	00068800 	andeq	r8, r6, r0, lsl #16
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	0019db00 	andseq	sp, r9, r0, lsl #22
    1c9c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1ca0:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
			while (isspace (*buf)) buf++;
    1ca4:	ec050202 	sfm	f0, 4, [r5], {2}
    1ca8:	03000003 	movweq	r0, #3
    1cac:	00001664 	andeq	r1, r0, r4, ror #12
    1cb0:	3f182803 	svccc	0x00182803
    1cb4:	02000000 	andeq	r0, r0, #0
			if (*buf == ',') buf++;
    1cb8:	00a40504 	adceq	r0, r4, r4, lsl #10
    1cbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
			*sap = '\0';
    1cc0:	00009f05 	andeq	r9, r0, r5, lsl #30
			break;
    1cc4:	22180300 	andscs	r0, r8, #0, 6
		    case 'd': scani (word); break;
    1cc8:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    1ccc:	00005918 	andeq	r5, r0, r8, lsl r9
    1cd0:	08010200 	stmdaeq	r1, {r9}
    1cd4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    1cd8:	00210603 	eoreq	r0, r1, r3, lsl #12
    1cdc:	19310300 	ldmdbne	r1!, {r8, r9}
    1ce0:	0000006c 	andeq	r0, r0, ip, rrx
    1ce4:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
    1ce8:	03000002 	movweq	r0, #2
    1cec:	000017cf 	andeq	r1, r0, pc, asr #15
    1cf0:	7f193403 	svcvc	0x00193403
    1cf4:	02000000 	andeq	r0, r0, #0
    1cf8:	00790704 	rsbseq	r0, r9, r4, lsl #14
    1cfc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1d00:	00007407 	andeq	r7, r0, r7, lsl #8
    1d04:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1d08:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1d0c:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    1d10:	03000000 	movweq	r0, #0
    1d14:	00000b62 	andeq	r0, r0, r2, ror #22
    1d18:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    1d1c:	05000000 	streq	r0, [r0, #-0]
    1d20:	00000a78 	andeq	r0, r0, r8, ror sl
    1d24:	bf000b04 	svclt	0x00000b04
    1d28:	06000000 	streq	r0, [r0], -r0
    1d2c:	00000c18 	andeq	r0, r0, r8, lsl ip
    1d30:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1d34:	07000100 	streq	r0, [r0, -r0, lsl #2]
		    case 'u': scanu (word); break;
    1d38:	0a7a0304 	beq	1e82950 <__ccfg+0x1e629a8>
    1d3c:	63040000 	movwvs	r0, #16384	; 0x4000
    1d40:	00009b18 	andeq	r9, r0, r8, lsl fp
    1d44:	040c0300 	streq	r0, [ip], #-768	; 0xfffffd00
    1d48:	26050000 	strcs	r0, [r5], -r0
    1d4c:	00004d12 	andeq	r4, r0, r2, lsl sp
    1d50:	15dc0300 	ldrbne	r0, [ip, #768]	; 0x300
    1d54:	27050000 	strcs	r0, [r5, -r0]
    1d58:	00006012 	andeq	r6, r0, r2, lsl r0
    1d5c:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    1d60:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    1d64:	03000000 	movweq	r0, #0
    1d68:	00000922 	andeq	r0, r0, r2, lsr #18
    1d6c:	33122805 	tstcc	r2, #327680	; 0x50000
    1d70:	03000000 	movweq	r0, #0
    1d74:	000013d4 	ldrdeq	r1, [r0], -r4
    1d78:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
    1d7c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
		    case 'x': scanx (word); break;
    1d80:	000000fb 	strdeq	r0, [r0], -fp
    1d84:	00162d03 	andseq	r2, r6, r3, lsl #26
    1d88:	122c0500 	eorne	r0, ip, #0, 10
    1d8c:	00000073 	andeq	r0, r0, r3, ror r0
    1d90:	00010c08 	andeq	r0, r1, r8, lsl #24
    1d94:	02a10300 	adceq	r0, r1, #0, 6
    1d98:	2d050000 	stccs	0, cr0, [r5, #-0]
    1d9c:	00007312 	andeq	r7, r0, r2, lsl r3
    1da0:	077e0300 	ldrbeq	r0, [lr, -r0, lsl #6]!
    1da4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1da8:	00013510 	andeq	r3, r1, r0, lsl r5
    1dac:	d9040a00 	stmdble	r4, {r9, fp}
    1db0:	0b000000 	bleq	1db8 <vscan+0x1b4>
    1db4:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    1db8:	000001c9 	andeq	r0, r0, r9, asr #3
    1dbc:	0002bc0c 	andeq	fp, r2, ip, lsl #24
    1dc0:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    1dc4:	000000fb 	strdeq	r0, [r0], -fp
    1dc8:	00070101 	andeq	r0, r7, r1, lsl #2
    1dcc:	0000980c 	andeq	r9, r0, ip, lsl #16
    1dd0:	03350500 	teqeq	r5, #0, 10
    1dd4:	000000fb 	strdeq	r0, [r0], -fp
    1dd8:	00060101 	andeq	r0, r6, r1, lsl #2
    1ddc:	00028a0c 	andeq	r8, r2, ip, lsl #20
    1de0:	03360500 	teqeq	r6, #0, 10
    1de4:	000000fb 	strdeq	r0, [r0], -fp
    1de8:	00050101 	andeq	r0, r5, r1, lsl #2
    1dec:	00041b0c 	andeq	r1, r4, ip, lsl #22
    1df0:	03370500 	teqeq	r7, #0, 10
    1df4:	000000fb 	strdeq	r0, [r0], -fp
			switch (*fmt++) {
    1df8:	00040101 	andeq	r0, r4, r1, lsl #2
    1dfc:	0004140c 	andeq	r1, r4, ip, lsl #8
    1e00:	03380500 	teqeq	r8, #0, 10
    1e04:	000000fb 	strdeq	r0, [r0], -fp
    1e08:	00000401 	andeq	r0, r0, r1, lsl #8
    1e0c:	0004050d 	andeq	r0, r4, sp, lsl #10
		    	    case 'd': scani (lword); break;
    1e10:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    1e14:	000000fb 	strdeq	r0, [r0], -fp
    1e18:	00400d01 	subeq	r0, r0, r1, lsl #26
    1e1c:	3c050000 	stccc	0, cr0, [r5], {-0}
    1e20:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1e24:	6d0d0200 	sfmvs	f0, 4, [sp, #-0]
    1e28:	05000000 	streq	r0, [r0, #-0]
    1e2c:	00fb033d 	rscseq	r0, fp, sp, lsr r3
    1e30:	0d030000 	stceq	0, cr0, [r3, #-0]
    1e34:	00000153 	andeq	r0, r0, r3, asr r1
    1e38:	0c083f05 	stceq	15, cr3, [r8], {5}
    1e3c:	04000001 	streq	r0, [r0], #-1
    1e40:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
    1e44:	41050000 	mrsmi	r0, (UNDEF: 5)
    1e48:	00013b03 	andeq	r3, r1, r3, lsl #22
    1e4c:	01c90900 	biceq	r0, r9, r0, lsl #18
    1e50:	b00e0000 	andlt	r0, lr, r0
    1e54:	05000002 	streq	r0, [r0, #-2]
    1e58:	01d51a43 	bicseq	r1, r5, r3, asr #20
    1e5c:	01010000 	mrseq	r0, (UNDEF: 1)
    1e60:	00031c0e 	andeq	r1, r3, lr, lsl #24
    1e64:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    1e68:	000001f6 	strdeq	r0, [r0], -r6
		    	    case 'x': scanx (lword); break;
    1e6c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    1e70:	000001fc 	strdeq	r0, [r0], -ip
    1e74:	b9080102 	stmdblt	r8, {r1, r8}
    1e78:	08000003 	stmdaeq	r0, {r0, r1}
    1e7c:	000001fc 	strdeq	r0, [r0], -ip
    1e80:	00032a0e 	andeq	r2, r3, lr, lsl #20
    1e84:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    1e88:	000001f6 	strdeq	r0, [r0], -r6
    1e8c:	080b0101 	stmdaeq	fp, {r0, r8}
    1e90:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
    1e94:	0d000002 	stceq	0, cr0, [r0, #-8]
    1e98:	000002c3 	andeq	r0, r0, r3, asr #5
    1e9c:	730b9006 	movwvc	r9, #45062	; 0xb006
    1ea0:	00000000 	andeq	r0, r0, r0
    1ea4:	0006090d 	andeq	r0, r6, sp, lsl #18
    1ea8:	08910600 	ldmeq	r1, {r9, sl}
    1eac:	000000d9 	ldrdeq	r0, [r0], -r9
    1eb0:	04870d04 	streq	r0, [r7], #3332	; 0xd04
    1eb4:	92060000 	andls	r0, r6, #0
    1eb8:	00010710 	andeq	r0, r1, r0, lsl r7
    1ebc:	03000600 	movweq	r0, #1536	; 0x600
    1ec0:	00000422 	andeq	r0, r0, r2, lsr #8
    1ec4:	16039306 	strne	r9, [r3], -r6, lsl #6
    1ec8:	0f000002 	svceq	0x00000002
    1ecc:	00000247 	andeq	r0, r0, r7, asr #4
    1ed0:	0000025e 	andeq	r0, r0, lr, asr r2
    1ed4:	360e0010 			; <UNDEFINED> instruction: 0x360e0010
    1ed8:	06000000 	streq	r0, [r0], -r0
		    	    case 'd': scani (lword); break;
    1edc:	02530f99 	subseq	r0, r3, #612	; 0x264
    1ee0:	01010000 	mrseq	r0, (UNDEF: 1)
    1ee4:	9107010b 	tstls	r7, fp, lsl #2
    1ee8:	00029609 	andeq	r9, r2, r9, lsl #12
    1eec:	047a0c00 	ldrbteq	r0, [sl], #-3072	; 0xfffff400
    1ef0:	93070000 	movwls	r0, #28672	; 0x7000
    1ef4:	0000fb07 	andeq	pc, r0, r7, lsl #22
		    	    case 'u': scanu (lword); break;
    1ef8:	01070100 	mrseq	r0, (UNDEF: 23)
    1efc:	00310c00 	eorseq	r0, r1, r0, lsl #24
    1f00:	94070000 	strls	r0, [r7], #-0
    1f04:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1f08:	00010100 	andeq	r0, r1, r0, lsl #2
    1f0c:	81030000 	mrshi	r0, (UNDEF: 3)
    1f10:	07000002 	streq	r0, [r0, -r2]
    1f14:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
    1f18:	96080000 	strls	r0, [r8], -r0
    1f1c:	0f000002 	svceq	0x00000002
    1f20:	000002a2 	andeq	r0, r0, r2, lsr #5
    1f24:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1f28:	a7080010 	smladge	r8, r0, r0, r0
    1f2c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1f30:	000002e6 	andeq	r0, r0, r6, ror #5
    1f34:	b2179c07 	andslt	r9, r7, #1792	; 0x700
    1f38:	01000002 	tsteq	r0, r2
    1f3c:	00e50f01 	rsceq	r0, r5, r1, lsl #30
		    	    case 'x': scanx (lword); break;
    1f40:	02d00000 	sbcseq	r0, r0, #0
    1f44:	00100000 	andseq	r0, r0, r0
			if ((c = *buf++) == '\0')
    1f48:	0002c508 	andeq	ip, r2, r8, lsl #10
    1f4c:	03a20e00 			; <UNDEFINED> instruction: 0x03a20e00
			sap = va_arg (ap, char*);
    1f50:	06080000 	streq	r0, [r8], -r0
			nc++;
    1f54:	0002d013 	andeq	sp, r2, r3, lsl r0
			break;
    1f58:	0e010100 	adfeqs	f0, f1, f0
			while (isspace (*buf)) buf++;
    1f5c:	00000133 	andeq	r0, r0, r3, lsr r1
    1f60:	0c0ec306 	stceq	3, cr12, [lr], {6}
    1f64:	01000001 	tsteq	r0, r1
						*sap++ = *buf++;
    1f68:	04941101 	ldreq	r1, [r4], #257	; 0x101
    1f6c:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
			while (isspace (*buf)) buf++;
    1f70:	02fe1001 	rscseq	r1, lr, #1
    1f74:	040a0000 	streq	r0, [sl], #-0
    1f78:	00000304 	andeq	r0, r0, r4, lsl #6
		return 0;
    1f7c:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    1f80:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
		    case 'x': scanx (word); break;
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	0002030f 	andeq	r0, r2, pc, lsl #6
		    	    case 'x': scanx (lword); break;
    1f8c:	00031b00 	andeq	r1, r3, r0, lsl #22
    1f90:	08001000 	stmdaeq	r0, {ip}
    1f94:	00000310 	andeq	r0, r0, r0, lsl r3
    1f98:	00045414 	andeq	r5, r4, r4, lsl r4
    1f9c:	017f0900 	cmneq	pc, r0, lsl #18
    1fa0:	00031b16 	andeq	r1, r3, r6, lsl fp
    1fa4:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    1fa8:	0000039a 	muleq	r0, sl, r3
    1fac:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    1fb0:	00000118 	andeq	r0, r0, r8, lsl r1
    1fb4:	7f140101 	svcvc	0x00140101
    1fb8:	09000004 	stmdbeq	r0, {r2}
    1fbc:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
    1fc0:	01000001 	tsteq	r0, r1
    1fc4:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
    1fc8:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
    1fcc:	16000003 	strne	r0, [r0], -r3
    1fd0:	00002210 	andeq	r2, r0, r0, lsl r2
    1fd4:	07030709 	streq	r0, [r3, -r9, lsl #14]
    1fd8:	000000d9 	ldrdeq	r0, [r0], -r9
    1fdc:	055b1600 	ldrbeq	r1, [fp, #-1536]	; 0xfffffa00
    1fe0:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    1fe4:	011d0803 	tsteq	sp, r3, lsl #16
    1fe8:	00040000 	andeq	r0, r4, r0
    1fec:	00026111 	andeq	r6, r2, r1, lsl r1
    1ff0:	03090900 	movweq	r0, #39168	; 0x9900
    1ff4:	00034d03 	andeq	r4, r3, r3, lsl #26
    1ff8:	04a31700 	strteq	r1, [r3], #1792	; 0x700
    1ffc:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    2000:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
    2004:	16000003 	strne	r0, [r0], -r3
    2008:	0000049c 	muleq	r0, ip, r4
    200c:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    2010:	000000d9 	ldrdeq	r0, [r0], -r9
    2014:	02cd1600 	sbceq	r1, sp, #0, 12
    2018:	15090000 	strne	r0, [r9, #-0]
    201c:	00d90803 	sbcseq	r0, r9, r3, lsl #16
    2020:	16020000 	strne	r0, [r2], -r0
    2024:	00000497 	muleq	r0, r7, r4
    2028:	0b031609 	bleq	c7854 <__ccfg+0xa78ac>
    202c:	000002f1 	strdeq	r0, [r0], -r1
    2030:	0f5b1604 	svceq	0x005b1604
    2034:	17090000 	strne	r0, [r9, -r0]
    2038:	011d0903 	tsteq	sp, r3, lsl #18
    203c:	16080000 	strne	r0, [r8], -r0
    2040:	0000044d 	andeq	r0, r0, sp, asr #8
    2044:	0f031809 	svceq	0x00031809
    2048:	000003e4 	andeq	r0, r0, r4, ror #7
    204c:	02c8160c 	sbceq	r1, r8, #12, 12	; 0xc00000
    2050:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    2054:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
    2058:	002c0000 	eoreq	r0, ip, r0
    205c:	0003740f 	andeq	r7, r3, pc, lsl #8
    2060:	0003f400 	andeq	pc, r3, r0, lsl #8
    2064:	00941800 	addseq	r1, r4, r0, lsl #16
    2068:	00030000 	andeq	r0, r3, r0
    206c:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
    2070:	ae110000 	cdpge	0, 1, cr0, cr1, cr0, {0}
    2074:	09000004 	stmdbeq	r0, {r2}
    2078:	811b031c 	tsthi	fp, ip, lsl r3
    207c:	14000003 	strne	r0, [r0], #-3
    2080:	00000390 	muleq	r0, r0, r3
    2084:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    2088:	00000416 	andeq	r0, r0, r6, lsl r4
    208c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    2090:	000003fa 	strdeq	r0, [r0], -sl
    2094:	0004cd0e 	andeq	ip, r4, lr, lsl #26
    2098:	131d0a00 	tstne	sp, #0, 20
    209c:	000000d9 	ldrdeq	r0, [r0], -r9
    20a0:	370e0101 	strcc	r0, [lr, -r1, lsl #2]
    20a4:	0a000007 	beq	20c8 <NOROM_SetupTrimDevice+0x8>
    20a8:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
    20ac:	01010000 	mrseq	r0, (UNDEF: 1)
    20b0:	0008c70e 	andeq	ip, r8, lr, lsl #14
    20b4:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    20b8:	000000ea 	andeq	r0, r0, sl, ror #1
    20bc:	f60e0101 			; <UNDEFINED> instruction: 0xf60e0101
    20c0:	0a000005 	beq	20dc <NOROM_SetupTrimDevice+0x1c>
    20c4:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
    20c8:	01010000 	mrseq	r0, (UNDEF: 1)
    20cc:	000a2403 	andeq	r2, sl, r3, lsl #8
    20d0:	0f440a00 	svceq	0x00440a00
    20d4:	00000460 	andeq	r0, r0, r0, ror #8
    20d8:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
    20dc:	01190000 	tsteq	r9, r0
    20e0:	0000008d 	andeq	r0, r0, sp, lsl #1
    20e4:	00000480 	andeq	r0, r0, r0, lsl #9
    20e8:	00008d13 	andeq	r8, r0, r3, lsl sp
    20ec:	01f61300 	mvnseq	r1, r0, lsl #6
    20f0:	8d130000 	ldchi	0, cr0, [r3, #-0]
    20f4:	00000000 	andeq	r0, r0, r0
    20f8:	00033e1a 	andeq	r3, r3, sl, lsl lr
    20fc:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    2100:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    2104:	ee1b2000 	cdp	0, 1, cr2, cr11, cr0, {0}
    2108:	0100000b 	tsteq	r0, fp
    210c:	010c0710 	tsteq	ip, r0, lsl r7
    2110:	05010000 	streq	r0, [r1, #-0]
    2114:	00000003 	andeq	r0, r0, r3
    2118:	04461a00 	strbeq	r1, [r6], #-2560	; 0xfffff600
    211c:	1a010000 	bne	42124 <__ccfg+0x2217c>
    2120:	3803050d 	stmdacc	r3, {r0, r2, r3, r8, sl}
    2124:	0f200000 	svceq	0x00200000
    2128:	00000454 	andeq	r0, r0, r4, asr r4
    212c:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    2130:	00009418 	andeq	r9, r0, r8, lsl r4
    2134:	1c000000 	stcne	0, cr0, [r0], {-0}
    2138:	00000a5c 	andeq	r0, r0, ip, asr sl
    213c:	af141e01 	svcge	0x00141e01
    2140:	05000004 	streq	r0, [r0, #-4]
    2144:	00003c03 	andeq	r3, r0, r3, lsl #24
    2148:	01da1a20 	bicseq	r1, sl, r0, lsr #20
    214c:	22010000 	andcs	r0, r1, #0
    2150:	84030513 	strhi	r0, [r3], #-1299	; 0xfffffaed
    2154:	1a200000 	bne	80215c <__ccfg+0x7e21b4>
    2158:	00000407 	andeq	r0, r0, r7, lsl #8
    215c:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
    2160:	0000a003 	andeq	sl, r0, r3
    2164:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
    2168:	30010000 	andcc	r0, r1, r0
    216c:	80030507 	andhi	r0, r3, r7, lsl #10
    2170:	1a200000 	bne	802178 <__ccfg+0x7e21d0>
    2174:	0000042a 	andeq	r0, r0, sl, lsr #8
    2178:	050f3101 	streq	r3, [pc, #-257]	; 207f <TrimAfterColdResetWakeupFromShutDown+0x93>
    217c:	00008203 	andeq	r8, r0, r3, lsl #4
    2180:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
    2184:	31010000 	mrscc	r0, (UNDEF: 1)
    2188:	8c030519 	cfstr32hi	mvfx0, [r3], {25}
    218c:	0f200000 	svceq	0x00200000
    2190:	00000129 	andeq	r0, r0, r9, lsr #2
    2194:	00000527 	andeq	r0, r0, r7, lsr #10
    2198:	00009418 	andeq	r9, r0, r8, lsl r4
    219c:	1b000300 	blne	2da4 <__exidx_end+0x18>
    21a0:	00000917 	andeq	r0, r0, r7, lsl r9
    21a4:	170a3601 	strne	r3, [sl, -r1, lsl #12]
    21a8:	01000005 	tsteq	r0, r5
    21ac:	00900305 	addseq	r0, r0, r5, lsl #6
    21b0:	201a2000 	andscs	r2, sl, r0
    21b4:	01000003 	tsteq	r0, r3
    21b8:	03050c3f 	movweq	r0, #23615	; 0x5c3f
    21bc:	00002d74 	andeq	r2, r0, r4, ror sp
    21c0:	00032f1a 	andeq	r2, r3, sl, lsl pc
    21c4:	0d450100 	stfeqe	f0, [r5, #-0]
    21c8:	00000305 	andeq	r0, r0, r5, lsl #6
    21cc:	020b0000 	andeq	r0, fp, #0
    21d0:	7a094901 	bvc	2545dc <__ccfg+0x234634>
    21d4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    21d8:	00000a50 	andeq	r0, r0, r0, asr sl
    21dc:	fb074a01 	blx	1d49ea <__ccfg+0x1b4a42>
    21e0:	00000000 	andeq	r0, r0, r0
    21e4:	000c320d 	andeq	r3, ip, sp, lsl #4
    21e8:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
    21ec:	000000fb 	strdeq	r0, [r0], -fp
    21f0:	59030001 	stmdbpl	r3, {r0}
    21f4:	0100000b 	tsteq	r0, fp
    21f8:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
    21fc:	7a0f0000 	bvc	3c2204 <__ccfg+0x3a225c>
    2200:	96000005 	strls	r0, [r0], -r5
    2204:	18000005 	stmdane	r0, {r0, r2}
    2208:	00000094 	muleq	r0, r4, r0
    220c:	8e1c0000 	cdphi	0, 1, cr0, cr12, cr0, {0}
    2210:	0100000b 	tsteq	r0, fp
    2214:	0586114e 	streq	r1, [r6, #334]	; 0x14e
    2218:	03050000 	movweq	r0, #20480	; 0x5000
    221c:	20000044 	andcs	r0, r0, r4, asr #32
    2220:	0005b80f 	andeq	fp, r5, pc, lsl #16
    2224:	0005b800 	andeq	fp, r5, r0, lsl #16
    2228:	00941800 	addseq	r1, r4, r0, lsl #16
    222c:	00000000 	andeq	r0, r0, r0
    2230:	011d040a 	tsteq	sp, sl, lsl #8
    2234:	711d0000 	tstvc	sp, r0
    2238:	0100000a 	tsteq	r0, sl
    223c:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
    2240:	05000005 	streq	r0, [r0, #-5]
    2244:	00004c03 	andeq	r4, r0, r3, lsl #24
    2248:	011d0f20 	tsteq	sp, r0, lsr #30
    224c:	05e10000 	strbeq	r0, [r1, #0]!
    2250:	94180000 	ldrls	r0, [r8], #-0
    2254:	00000000 	andeq	r0, r0, r0
    2258:	0b141d00 	bleq	509660 <__ccfg+0x4e96b8>
    225c:	c2010000 	andgt	r0, r1, #0
    2260:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
    2264:	03050000 	movweq	r0, #20480	; 0x5000
    2268:	20000048 	andcs	r0, r0, r8, asr #32
    226c:	000b711d 	andeq	r7, fp, sp, lsl r1
    2270:	02c20100 	sbceq	r0, r2, #0, 2
    2274:	0005d126 	andeq	sp, r5, r6, lsr #2
    2278:	40030500 	andmi	r0, r3, r0, lsl #10
    227c:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
    2280:	000bba01 	andeq	fp, fp, r1, lsl #20
    2284:	052f0100 	streq	r0, [pc, #-256]!	; 218c <NOROM_SetupSetVddrLevel+0x28>
    2288:	010c0107 	tsteq	ip, r7, lsl #2
	...
    2294:	9c010000 	stcls	0, cr0, [r1], {-0}
    2298:	0b48011f 	bleq	120271c <__ccfg+0x11e2774>
    229c:	82010000 	andhi	r0, r1, #0
    22a0:	c0010604 	andgt	r0, r1, r4, lsl #12
    22a4:	fc000013 	stc2	0, cr0, [r0], {19}
    22a8:	01000014 	tsteq	r0, r4, lsl r0
    22ac:	00070e9c 	muleq	r7, ip, lr
    22b0:	0b892000 	bleq	fe24a2b8 <_estack+0xde2452b8>
    22b4:	82010000 	andhi	r0, r1, #0
    22b8:	070e1804 	streq	r1, [lr, -r4, lsl #16]
    22bc:	04f60000 	ldrbteq	r0, [r6], #0
    22c0:	22210000 	eorcs	r0, r1, #0
    22c4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    22c8:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    22cc:	0000010c 	andeq	r0, r0, ip, lsl #2
    22d0:	00000536 	andeq	r0, r0, r6, lsr r5
    22d4:	00706123 	rsbseq	r6, r0, r3, lsr #2
    22d8:	0a048801 	beq	1242e4 <__ccfg+0x10433c>
    22dc:	000000c1 	andeq	r0, r0, r1, asr #1
    22e0:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    22e4:	01006362 	tsteq	r0, r2, ror #6
    22e8:	ef070489 	svc	0x00070489
    22ec:	75000000 	strvc	r0, [r0, #-0]
    22f0:	22000005 	andcs	r0, r0, #5
    22f4:	8a010076 	bhi	424d4 <__ccfg+0x2252c>
    22f8:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    22fc:	05a90000 	streq	r0, [r9, #0]!
    2300:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    2304:	8b010073 	blhi	424d8 <__ccfg+0x22530>
    2308:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    230c:	42250000 	eormi	r0, r5, #0
    2310:	0100000c 	tsteq	r0, ip
    2314:	8c0104b0 	cfstrshi	mvf0, [r1], {176}	; 0xb0
    2318:	26000014 			; <UNDEFINED> instruction: 0x26000014
    231c:	0000144c 	andeq	r1, r0, ip, asr #8
    2320:	00001468 	andeq	r1, r0, r8, ror #8
    2324:	000006c0 	andeq	r0, r0, r0, asr #13
    2328:	01006922 	tsteq	r0, r2, lsr #18
    232c:	ef0a049f 	svc	0x000a049f
    2330:	d2000000 	andle	r0, r0, #0
    2334:	00000005 	andeq	r0, r0, r5
    2338:	00064027 	andeq	r4, r6, r7, lsr #32
    233c:	0006d900 	andeq	sp, r6, r0, lsl #18
    2340:	00642200 	rsbeq	r2, r4, r0, lsl #4
    2344:	0b04a901 	bleq	12c750 <__ccfg+0x10c7a8>
    2348:	0000010c 	andeq	r0, r0, ip, lsl #2
    234c:	000005e5 	andeq	r0, r0, r5, ror #11
    2350:	14d82600 	ldrbne	r2, [r8], #1536	; 0x600
    2354:	14e60000 	strbtne	r0, [r6], #0
    2358:	06f60000 	ldrbteq	r0, [r6], r0
    235c:	73220000 			; <UNDEFINED> instruction: 0x73220000
    2360:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    2364:	0001f60b 	andeq	pc, r1, fp, lsl #12
    2368:	00060e00 	andeq	r0, r6, r0, lsl #28
    236c:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2370:	ee000010 	mcr	0, 0, r0, cr0, cr0, {0}
    2374:	70000013 	andvc	r0, r0, r3, lsl r0
    2378:	01000006 	tsteq	r0, r6
    237c:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
    2380:	000010d4 	ldrdeq	r1, [r0], -r4
    2384:	040a0000 	streq	r0, [sl], #-0
    2388:	00000203 	andeq	r0, r0, r3, lsl #4
    238c:	000c122a 	andeq	r1, ip, sl, lsr #4
    2390:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    2394:	0f10010d 	svceq	0x0010010d
    2398:	0f280000 	svceq	0x00280000
    239c:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a0:	00000753 	andeq	r0, r0, r3, asr r7
    23a4:	0100632b 	tsteq	r0, fp, lsr #6
    23a8:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
    23ac:	21000000 	mrscs	r0, (UNDEF: 0)
    23b0:	28000006 	stmdacs	r0, {r1, r2}
    23b4:	000010c1 	andeq	r1, r0, r1, asr #1
    23b8:	00000f10 	andeq	r0, r0, r0, lsl pc
    23bc:	000005e8 	andeq	r0, r0, r8, ror #11
    23c0:	02044901 	andeq	r4, r4, #16384	; 0x4000
    23c4:	0010d429 	andseq	sp, r0, r9, lsr #8
    23c8:	2c000000 	stccs	0, cr0, [r0], {-0}
    23cc:	000af901 	andeq	pc, sl, r1, lsl #18
    23d0:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    23d4:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    23e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    23e4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    23e8:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
    23ec:	1c042801 	stcne	8, cr2, [r4], {1}
    23f0:	00000129 	andeq	r0, r0, r9, lsr #2
    23f4:	00000634 	andeq	r0, r0, r4, lsr r6
    23f8:	000bda2d 	andeq	sp, fp, sp, lsr #20
    23fc:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    2400:	0005b809 	andeq	fp, r5, r9, lsl #16
    2404:	00065200 	andeq	r5, r6, r0, lsl #4
    2408:	616d2200 	cmnvs	sp, r0, lsl #4
    240c:	32010078 	andcc	r0, r1, #120	; 0x78
    2410:	011d0804 	tsteq	sp, r4, lsl #16
    2414:	06700000 	ldrbteq	r0, [r0], -r0
    2418:	0f2d0000 	svceq	0x002d0000
    241c:	0100000b 	tsteq	r0, fp
    2420:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
    2424:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    2428:	00000006 	andeq	r0, r0, r6
    242c:	0bc7012c 	bleq	ff1c28e4 <_estack+0xdf1bd8e4>
    2430:	15010000 	strne	r0, [r1, #-0]
    2434:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    2440:	01000000 	mrseq	r0, (UNDEF: 0)
    2444:	0007e39c 	muleq	r7, ip, r3
    2448:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    244c:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    2450:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    2454:	06b70000 	ldrteq	r0, [r7], r0
    2458:	1f000000 	svcne	0x00000000
    245c:	000bad01 	andeq	sl, fp, r1, lsl #26
    2460:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    2464:	13a80106 			; <UNDEFINED> instruction: 0x13a80106
    2468:	13c00000 	bicne	r0, r0, #0
    246c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2470:	0000080e 	andeq	r0, r0, lr, lsl #16
    2474:	000b9d20 	andeq	r9, fp, r0, lsr #26
    2478:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    247c:	0000d919 	andeq	sp, r0, r9, lsl r9
    2480:	0006ca00 	andeq	ip, r6, r0, lsl #20
    2484:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2488:	00000a43 	andeq	r0, r0, r3, asr #20
    248c:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
    2490:	0005b801 	andeq	fp, r5, r1, lsl #16
    2494:	0012cc00 	andseq	ip, r2, r0, lsl #24
    2498:	00137400 	andseq	r7, r3, r0, lsl #8
    249c:	809c0100 	addshi	r0, ip, r0, lsl #2
    24a0:	20000008 	andcs	r0, r0, r8
    24a4:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    24a8:	1a03a301 	bne	eb0b4 <__ccfg+0xcb10c>
    24ac:	000000d9 	ldrdeq	r0, [r0], -r9
    24b0:	000006dd 	ldrdeq	r0, [r0], -sp
    24b4:	000bda2d 	andeq	sp, fp, sp, lsr #20
    24b8:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    24bc:	0005b809 	andeq	fp, r5, r9, lsl #16
    24c0:	0006f000 	andeq	pc, r6, r0
    24c4:	63632200 	cmnvs	r3, #0, 4
    24c8:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    24cc:	0005b811 	andeq	fp, r5, r1, lsl r8
    24d0:	00072400 	andeq	r2, r7, r0, lsl #8
    24d4:	0b782d00 	bleq	1e0d8dc <__ccfg+0x1ded934>
    24d8:	ab010000 	blge	424e0 <__ccfg+0x22538>
    24dc:	011d1503 	tsteq	sp, r3, lsl #10
    24e0:	074d0000 	strbeq	r0, [sp, -r0]
    24e4:	b22d0000 	eorlt	r0, sp, #0
    24e8:	01000013 	tsteq	r0, r3, lsl r0
    24ec:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
    24f0:	60000001 	andvs	r0, r0, r1
    24f4:	00000007 	andeq	r0, r0, r7
    24f8:	0c38012e 	ldfeqs	f0, [r8], #-184	; 0xffffff48
    24fc:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2500:	01010603 	tsteq	r1, r3, lsl #12
    2504:	0000089d 	muleq	r0, sp, r8
    2508:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    250c:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
    2510:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2514:	0a562a00 	beq	158cd1c <__ccfg+0x156cd74>
    2518:	4a010000 	bmi	42520 <__ccfg+0x22578>
    251c:	90010d03 	andls	r0, r1, r3, lsl #26
    2520:	1000000e 	andne	r0, r0, lr
    2524:	0100000f 	tsteq	r0, pc
    2528:	0008e79c 	muleq	r8, ip, r7
    252c:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    2530:	034a0100 	movteq	r0, #41216	; 0xa100
    2534:	0005b81b 	andeq	fp, r5, fp, lsl r8
    2538:	00078a00 	andeq	r8, r7, r0, lsl #20
    253c:	0bda2d00 	bleq	ff68d944 <_estack+0xdf688944>
    2540:	57010000 	strpl	r0, [r1, -r0]
    2544:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    2548:	07a80000 	streq	r0, [r8, r0]!
    254c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2550:	57010063 	strpl	r0, [r1, -r3, rrx]
    2554:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    2558:	07e90000 	strbeq	r0, [r9, r0]!
    255c:	30000000 	andcc	r0, r0, r0
    2560:	000a9601 	andeq	r9, sl, r1, lsl #12
    2564:	02f00100 	rscseq	r0, r0, #0, 2
    2568:	0011e406 	andseq	lr, r1, r6, lsl #8
    256c:	00123400 	andseq	r3, r2, r0, lsl #8
    2570:	119c0100 	orrsne	r0, ip, r0, lsl #2
    2574:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    2578:	00000b23 	andeq	r0, r0, r3, lsr #22
    257c:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
    2580:	0000011d 	andeq	r0, r0, sp, lsl r1
    2584:	0000081d 	andeq	r0, r0, sp, lsl r8
    2588:	69013100 	stmdbvs	r1, {r8, ip, sp}
    258c:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
    2590:	ef010602 	svc	0x00010602
    2594:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2598:	e4000011 	str	r0, [r0], #-17	; 0xffffffef
    259c:	01000011 	tsteq	r0, r1, lsl r0
    25a0:	0009949c 	muleq	r9, ip, r4
    25a4:	0b7e2000 	bleq	1f8a5ac <__ccfg+0x1f6a604>
    25a8:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    25ac:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    25b0:	083b0000 	ldmdaeq	fp!, {}	; <UNPREDICTABLE>
    25b4:	642b0000 	strtvs	r0, [fp], #-0
    25b8:	01007665 	tsteq	r0, r5, ror #12
    25bc:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    25c0:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    25c4:	20000008 	andcs	r0, r0, r8
    25c8:	00000707 	andeq	r0, r0, r7, lsl #14
    25cc:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    25d0:	000000d9 	ldrdeq	r0, [r0], -r9
    25d4:	00000877 	andeq	r0, r0, r7, ror r8
    25d8:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
    25dc:	02790100 	rsbseq	r0, r9, #0, 2
    25e0:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
    25e4:	00089500 	andeq	r9, r8, r0, lsl #10
    25e8:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
    25ec:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
    25f0:	00d94002 	sbcseq	r4, r9, r2
    25f4:	08b30000 	ldmeq	r3!, {}	; <UNPREDICTABLE>
    25f8:	72220000 	eorvc	r0, r2, #0
    25fc:	01007465 	tsteq	r0, r5, ror #8
    2600:	ef07027b 	svc	0x0007027b
    2604:	d3000000 	movwle	r0, #0
    2608:	00000008 	andeq	r0, r0, r8
    260c:	0b36011f 	bleq	d82a90 <__ccfg+0xd62ae8>
    2610:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    2614:	24010602 	strcs	r0, [r1], #-1538	; 0xfffff9fe
    2618:	48000011 	stmdami	r0, {r0, r4}
    261c:	01000011 	tsteq	r0, r1, lsl r0
    2620:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    2624:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
    2628:	02690100 	rsbeq	r0, r9, #0, 2
    262c:	0004541e 	andeq	r5, r4, lr, lsl r4
    2630:	00090700 	andeq	r0, r9, r0, lsl #14
    2634:	6f6c2b00 	svcvs	0x006c2b00
    2638:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    263c:	008d2602 	addeq	r2, sp, r2, lsl #12
    2640:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    2644:	1f000000 	svcne	0x00000000
    2648:	000c4901 	andeq	r4, ip, r1, lsl #18
    264c:	025f0100 	subseq	r0, pc, #0, 2
    2650:	00000106 	andeq	r0, r0, r6, lsl #2
    2654:	00000000 	andeq	r0, r0, r0
    2658:	9c010000 	stcls	0, cr0, [r1], {-0}
    265c:	00000a16 	andeq	r0, r0, r6, lsl sl
    2660:	000b8420 	andeq	r8, fp, r0, lsr #8
    2664:	025f0100 	subseq	r0, pc, #0, 2
    2668:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    266c:	00095900 	andeq	r5, r9, r0, lsl #18
    2670:	00633200 	rsbeq	r3, r3, r0, lsl #4
    2674:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    2678:	000001fc 	strdeq	r0, [r0], -ip
    267c:	6e2b5101 	sufvse	f5, f3, f1
    2680:	025f0100 	subseq	r0, pc, #0, 2
    2684:	00008d2b 	andeq	r8, r0, fp, lsr #26
    2688:	00097700 	andeq	r7, r9, r0, lsl #14
    268c:	011f0000 	tsteq	pc, r0
    2690:	00000c06 	andeq	r0, r0, r6, lsl #24
    2694:	06025901 	streq	r5, [r2], -r1, lsl #18
    2698:	00110e01 	andseq	r0, r1, r1, lsl #28
    269c:	00112200 	andseq	r2, r1, r0, lsl #4
    26a0:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    26a4:	2000000a 	andcs	r0, r0, sl
    26a8:	00000b84 	andeq	r0, r0, r4, lsl #23
    26ac:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    26b0:	000001f6 	strdeq	r0, [r0], -r6
    26b4:	0000098a 	andeq	r0, r0, sl, lsl #19
    26b8:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    26bc:	02590100 	subseq	r0, r9, #0, 2
    26c0:	00070e2b 	andeq	r0, r7, fp, lsr #28
    26c4:	00099d00 	andeq	r9, r9, r0, lsl #26
    26c8:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    26cc:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    26d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    26d4:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    26d8:	7a011f00 	bvc	4a2e0 <__ccfg+0x2a338>
    26dc:	0100000c 	tsteq	r0, ip
    26e0:	01060254 	tsteq	r6, r4, asr r2
	...
    26ec:	0aa69c01 	beq	fe9a96f8 <_estack+0xde9a46f8>
    26f0:	642b0000 	strtvs	r0, [fp], #-0
    26f4:	02540100 	subseq	r0, r4, #0, 2
    26f8:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    26fc:	0009ce00 	andeq	ip, r9, r0, lsl #28
    2700:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2704:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    2708:	0000070e 	andeq	r0, r0, lr, lsl #14
    270c:	000009e1 	andeq	r0, r0, r1, ror #19
    2710:	01006e32 	tsteq	r0, r2, lsr lr
    2714:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    2718:	01000000 	mrseq	r0, (UNDEF: 0)
    271c:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    2720:	00000b4d 	andeq	r0, r0, sp, asr #22
    2724:	06024e01 	streq	r4, [r2], -r1, lsl #28
    2728:	00000001 	andeq	r0, r0, r1
    272c:	00000000 	andeq	r0, r0, r0
    2730:	de9c0100 	fmllee	f0, f4, f0
    2734:	2b00000a 	blcs	2764 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x28>
    2738:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    273c:	01f61902 	mvnseq	r1, r2, lsl #18
    2740:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
    2744:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2748:	024e0100 	subeq	r0, lr, #0, 2
    274c:	00070e28 	andeq	r0, r7, r8, lsr #28
    2750:	000a1200 	andeq	r1, sl, r0, lsl #4
    2754:	011f0000 	tsteq	pc, r0
    2758:	00000c55 	andeq	r0, r0, r5, asr ip
    275c:	06024701 	streq	r4, [r2], -r1, lsl #14
    2760:	00000001 	andeq	r0, r0, r1
    2764:	00000000 	andeq	r0, r0, r0
    2768:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    276c:	2b00000b 	blcs	27a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x64>
    2770:	47010064 	strmi	r0, [r1, -r4, rrx]
    2774:	01f61a02 	mvnseq	r1, r2, lsl #20
    2778:	0a250000 	beq	942780 <__ccfg+0x9227d8>
    277c:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2780:	02470100 	subeq	r0, r7, #0, 2
    2784:	00070e29 	andeq	r0, r7, r9, lsr #28
    2788:	000a4300 	andeq	r4, sl, r0, lsl #6
    278c:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    2790:	30024701 	andcc	r4, r2, r1, lsl #14
    2794:	0000008d 	andeq	r0, r0, sp, lsl #1
    2798:	00000a56 	andeq	r0, r0, r6, asr sl
    279c:	37011f00 	strcc	r1, [r1, -r0, lsl #30]
    27a0:	0100000a 	tsteq	r0, sl
    27a4:	01060242 	tsteq	r6, r2, asr #4
	...
    27b0:	0b5d9c01 	bleq	17697bc <__ccfg+0x1749814>
    27b4:	642b0000 	strtvs	r0, [fp], #-0
    27b8:	02420100 	subeq	r0, r2, #0, 2
    27bc:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    27c0:	000a6900 	andeq	r6, sl, r0, lsl #18
    27c4:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    27c8:	28024201 	stmdacs	r2, {r0, r9, lr}
    27cc:	0000070e 	andeq	r0, r0, lr, lsl #14
    27d0:	00000a7c 	andeq	r0, r0, ip, ror sl
    27d4:	ed012c00 	stc	12, cr2, [r1, #-0]
    27d8:	0100000a 	tsteq	r0, sl
    27dc:	01050239 	tsteq	r5, r9, lsr r2
    27e0:	0000008d 	andeq	r0, r0, sp, lsl #1
    27e4:	00001100 	andeq	r1, r0, r0, lsl #2
    27e8:	0000110e 	andeq	r1, r0, lr, lsl #2
    27ec:	0b999c01 	bleq	fe6697f8 <_estack+0xde6647f8>
    27f0:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    27f4:	02390100 	eorseq	r0, r9, #0, 2
    27f8:	00070e1e 	andeq	r0, r7, lr, lsl lr
    27fc:	000a9a00 	andeq	r9, sl, r0, lsl #20
    2800:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2804:	06023b01 	streq	r3, [r2], -r1, lsl #22
    2808:	0000008d 	andeq	r0, r0, sp, lsl #1
    280c:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    2810:	06012c00 	streq	r2, [r1], -r0, lsl #24
    2814:	0100000b 	tsteq	r0, fp
    2818:	0106022d 	tsteq	r6, sp, lsr #4
    281c:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    2828:	0be69c01 	bleq	ff9a9834 <_estack+0xdf9a4834>
    282c:	662b0000 	strtvs	r0, [fp], -r0
    2830:	01006e75 	tsteq	r0, r5, ror lr
    2834:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
    2838:	cb000002 	blgt	2848 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10c>
    283c:	2200000a 	andcs	r0, r0, #10
    2840:	2f010069 	svccs	0x00010069
    2844:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    2848:	0ae90000 	beq	ffa42850 <_estack+0xdfa3d850>
    284c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2850:	02300100 	eorseq	r0, r0, #0, 2
    2854:	0000d907 	andeq	sp, r0, r7, lsl #18
    2858:	000b0700 	andeq	r0, fp, r0, lsl #14
    285c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2860:	00000b07 	andeq	r0, r0, r7, lsl #22
    2864:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    2868:	00011d01 	andeq	r1, r1, r1, lsl #26
    286c:	0010dc00 	andseq	sp, r0, r0, lsl #24
    2870:	00110000 	andseq	r0, r1, r0
    2874:	229c0100 	addscs	r0, ip, #0, 2
    2878:	2b00000c 	blcs	28b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x174>
    287c:	006e7566 	rsbeq	r7, lr, r6, ror #10
    2880:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
    2884:	000002f1 	strdeq	r0, [r0], -r1
    2888:	00000b1a 	andeq	r0, r0, sl, lsl fp
    288c:	01006923 	tsteq	r0, r3, lsr #18
    2890:	160e0221 	strne	r0, [lr], -r1, lsr #4
    2894:	01000004 	tsteq	r0, r4
    2898:	012c0050 	qsubeq	r0, r0, ip
    289c:	00000bf8 	strdeq	r0, [r0], -r8
    28a0:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    28a4:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
    28b0:	609c0100 	addsvs	r0, ip, r0, lsl #2
    28b4:	2b00000c 	blcs	28ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b0>
    28b8:	00646970 	rsbeq	r6, r4, r0, ror r9
    28bc:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    28c0:	0000011d 	andeq	r0, r0, sp, lsl r1
    28c4:	00000b43 	andeq	r0, r0, r3, asr #22
    28c8:	01006922 	tsteq	r0, r2, lsr #18
    28cc:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    28d0:	61000004 	tstvs	r0, r4
    28d4:	0000000b 	andeq	r0, r0, fp
    28d8:	0bbf011f 	bleq	fefc2d5c <_estack+0xdefbdd5c>
    28dc:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    28e0:	00010601 	andeq	r0, r1, r1, lsl #12
    28e4:	00000000 	andeq	r0, r0, r0
    28e8:	01000000 	mrseq	r0, (UNDEF: 0)
    28ec:	000cc99c 	muleq	ip, ip, r9
    28f0:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    28f4:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    28f8:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    28fc:	0b7f0000 	bleq	1fc2904 <__ccfg+0x1fa295c>
    2900:	72220000 	eorvc	r0, r2, #0
    2904:	01006c65 	tsteq	r0, r5, ror #24
    2908:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
    290c:	9d000000 	stcls	0, cr0, [r0, #-0]
    2910:	2200000b 	andcs	r0, r0, #11
    2914:	fa010069 	blx	42ac0 <__ccfg+0x22b18>
    2918:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    291c:	0bb00000 	bleq	fec02924 <_estack+0xdebfd924>
    2920:	6a220000 	bvs	882928 <__ccfg+0x862980>
    2924:	01fa0100 	mvnseq	r0, r0, lsl #2
    2928:	00041612 	andeq	r1, r4, r2, lsl r6
    292c:	000be400 	andeq	lr, fp, r0, lsl #8
    2930:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    2934:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    2938:	00000416 	andeq	r0, r0, r6, lsl r4
    293c:	00000c02 	andeq	r0, r0, r2, lsl #24
    2940:	6c011f00 	stcvs	15, cr1, [r1], {-0}
    2944:	0100000a 	tsteq	r0, sl
    2948:	010601d9 	ldrdeq	r0, [r6, -r9]
    294c:	0000127c 	andeq	r1, r0, ip, ror r2
    2950:	000012cc 	andeq	r1, r0, ip, asr #5
    2954:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
    2958:	702b0000 	eorvc	r0, fp, r0
    295c:	01006469 	tsteq	r0, r9, ror #8
    2960:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
    2964:	20000001 	andcs	r0, r0, r1
    2968:	2200000c 	andcs	r0, r0, #12
    296c:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    2970:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2974:	0c540000 	mraeq	r0, r4, acc0
    2978:	6a240000 	bvs	902980 <__ccfg+0x8e29d8>
    297c:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    2980:	00041612 	andeq	r1, r4, r2, lsl r6
    2984:	302a0000 	eorcc	r0, sl, r0
    2988:	0100000a 	tsteq	r0, sl
    298c:	010d01c4 	smlabteq	sp, r4, r1, r0
    2990:	00000e54 	andeq	r0, r0, r4, asr lr
    2994:	00000e90 	muleq	r0, r0, lr
    2998:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
    299c:	70320000 	eorsvc	r0, r2, r0
    29a0:	01006469 	tsteq	r0, r9, ror #8
    29a4:	162101c4 	strtne	r0, [r1], -r4, asr #3
    29a8:	01000004 	tsteq	r0, r4
    29ac:	0c2d2d50 	stceq	13, cr2, [sp], #-320	; 0xfffffec0
    29b0:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    29b4:	011d0801 	tsteq	sp, r1, lsl #16
    29b8:	0c7d0000 	ldcleq	0, cr0, [sp], #-0
    29bc:	6a220000 	bvs	8829c4 <__ccfg+0x862a1c>
    29c0:	01c90100 	biceq	r0, r9, r0, lsl #2
    29c4:	00008d06 	andeq	r8, r0, r6, lsl #26
    29c8:	000c9000 	andeq	r9, ip, r0
    29cc:	00692300 	rsbeq	r2, r9, r0, lsl #6
    29d0:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    29d4:	00000416 	andeq	r0, r0, r6, lsl r4
    29d8:	2c005201 	sfmcs	f5, 4, [r0], {1}
    29dc:	000c0001 	andeq	r0, ip, r1
    29e0:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    29e4:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    29f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    29f4:	00000da1 	andeq	r0, r0, r1, lsr #27
    29f8:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    29fc:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    2a00:	00011d13 	andeq	r1, r1, r3, lsl sp
    2a04:	000ca300 	andeq	sl, ip, r0, lsl #6
    2a08:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2a0c:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    2a10:	00000416 	andeq	r0, r0, r6, lsl r4
    2a14:	00000cc1 	andeq	r0, r0, r1, asr #25
    2a18:	4f013300 	svcmi	0x00013300
    2a1c:	0100000a 	tsteq	r0, sl
    2a20:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    2a2c:	011f9c01 	tsteq	pc, r1, lsl #24
    2a30:	000018b7 			; <UNDEFINED> instruction: 0x000018b7
    2a34:	06019a01 	streq	r9, [r1], -r1, lsl #20
    2a38:	0010a401 	andseq	sl, r0, r1, lsl #8
    2a3c:	0010dc00 	andseq	sp, r0, r0, lsl #24
    2a40:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    2a44:	2b00000d 	blcs	2a80 <NOROM_ChipInfo_GetHwRevision+0x60>
    2a48:	9a010064 	bls	42be0 <__ccfg+0x22c38>
    2a4c:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    2a50:	0cdf0000 	ldcleq	0, cr0, [pc], {0}
    2a54:	9d200000 	stcls	0, cr0, [r0, #-0]
    2a58:	0100000b 	tsteq	r0, fp
    2a5c:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    2a60:	f2000000 	vhadd.s8	d0, d0, d0
    2a64:	0000000c 	andeq	r0, r0, ip
    2a68:	0c62012c 	stfeqe	f0, [r2], #-176	; 0xffffff50
    2a6c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2a70:	1d010701 	stcne	7, cr0, [r1, #-4]
    2a74:	80000001 	andhi	r0, r0, r1
    2a78:	a4000010 	strge	r0, [r0], #-16
    2a7c:	01000010 	tsteq	r0, r0, lsl r0
    2a80:	000e3e9c 	muleq	lr, ip, lr
    2a84:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    2a88:	88010064 	stmdahi	r1, {r2, r5, r6}
    2a8c:	011d1801 	tsteq	sp, r1, lsl #16
    2a90:	0d050000 	stceq	0, cr0, [r5, #-0]
    2a94:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2a98:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    2a9c:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    2aa0:	0d2e0000 	stceq	0, cr0, [lr, #-0]
    2aa4:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2aa8:	018a0100 	orreq	r0, sl, r0, lsl #2
    2aac:	0004160e 	andeq	r1, r4, lr, lsl #12
    2ab0:	000d4c00 	andeq	r4, sp, r0, lsl #24
    2ab4:	011f0000 	tsteq	pc, r0
    2ab8:	00000b28 	andeq	r0, r0, r8, lsr #22
    2abc:	06017801 	streq	r7, [r1], -r1, lsl #16
    2ac0:	00000001 	andeq	r0, r0, r1
    2ac4:	00000000 	andeq	r0, r0, r0
    2ac8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    2acc:	2b00000e 	blcs	2b0c <NOROM_OSCClockSourceSet+0x38>
    2ad0:	00646970 	rsbeq	r6, r4, r0, ror r9
    2ad4:	1b017801 	blne	60ae0 <__ccfg+0x40b38>
    2ad8:	0000011d 	andeq	r0, r0, sp, lsl r1
    2adc:	00000d6a 	andeq	r0, r0, sl, ror #26
    2ae0:	000b8f20 	andeq	r8, fp, r0, lsr #30
    2ae4:	01780100 	cmneq	r8, r0, lsl #2
    2ae8:	00011d26 	andeq	r1, r1, r6, lsr #26
    2aec:	000d7d00 	andeq	r7, sp, r0, lsl #26
    2af0:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2af4:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    2af8:	00000416 	andeq	r0, r0, r6, lsl r4
    2afc:	6a225001 	bvs	896b08 <__ccfg+0x876b60>
    2b00:	017d0100 	cmneq	sp, r0, lsl #2
    2b04:	00008d07 	andeq	r8, r0, r7, lsl #26
    2b08:	000d9b00 	andeq	r9, sp, r0, lsl #22
    2b0c:	011f0000 	tsteq	pc, r0
    2b10:	00000ae0 	andeq	r0, r0, r0, ror #21
    2b14:	06016601 	streq	r6, [r1], -r1, lsl #12
    2b18:	00104c01 	andseq	r4, r0, r1, lsl #24
    2b1c:	00108000 	andseq	r8, r0, r0
    2b20:	db9c0100 	blle	fe702f28 <_estack+0xde6fdf28>
    2b24:	3400000e 	strcc	r0, [r0], #-14
    2b28:	00000b8f 	andeq	r0, r0, pc, lsl #23
    2b2c:	1a016601 	bne	5c338 <__ccfg+0x3c390>
    2b30:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b34:	6a225001 	bvs	896b40 <__ccfg+0x876b98>
    2b38:	016a0100 	cmneq	sl, r0, lsl #2
    2b3c:	00008d06 	andeq	r8, r0, r6, lsl #26
    2b40:	000db900 	andeq	fp, sp, r0, lsl #18
    2b44:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2b48:	0e016b01 	vmlaeq.f64	d6, d1, d1
    2b4c:	00000416 	andeq	r0, r0, r6, lsl r4
    2b50:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    2b54:	000ba301 	andeq	sl, fp, r1, lsl #6
    2b58:	01590100 	cmpeq	r9, r0, lsl #2
    2b5c:	11010106 	tstne	r1, r6, lsl #2
    2b60:	3500000f 	strcc	r0, [r0, #-15]
    2b64:	00000b8f 	andeq	r0, r0, pc, lsl #23
    2b68:	17015901 	strne	r5, [r1, -r1, lsl #18]
    2b6c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b70:	000b9d35 	andeq	r9, fp, r5, lsr sp
    2b74:	01590100 	cmpeq	r9, r0, lsl #2
    2b78:	0000d923 	andeq	sp, r0, r3, lsr #18
    2b7c:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    2b80:	07015d01 	streq	r5, [r1, -r1, lsl #26]
    2b84:	000000ef 	andeq	r0, r0, pc, ror #1
    2b88:	1b011f00 	blne	4a790 <__ccfg+0x2a7e8>
    2b8c:	0100000b 	tsteq	r0, fp
    2b90:	01060153 	tsteq	r6, r3, asr r1
    2b94:	00001004 	andeq	r1, r0, r4
    2b98:	00001018 	andeq	r1, r0, r8, lsl r0
    2b9c:	0f3c9c01 	svceq	0x003c9c01
    2ba0:	9d200000 	stcls	0, cr0, [r0, #-0]
    2ba4:	0100000b 	tsteq	r0, fp
    2ba8:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    2bac:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2bb0:	0000000d 	andeq	r0, r0, sp
    2bb4:	0a62012c 	beq	188306c <__ccfg+0x18630c4>
    2bb8:	2c010000 	stccs	0, cr0, [r1], {-0}
    2bbc:	1d010701 	stcne	7, cr0, [r1, #-4]
    2bc0:	74000001 	strvc	r0, [r0], #-1
    2bc4:	a8000013 	stmdage	r0, {r0, r1, r4}
    2bc8:	01000013 	tsteq	r0, r3, lsl r0
    2bcc:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    2bd0:	0b3c2000 	bleq	f0abd8 <__ccfg+0xeeac30>
    2bd4:	2c010000 	stccs	0, cr0, [r1], {-0}
    2bd8:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    2bdc:	0ddf0000 	ldcleq	0, cr0, [pc]	; 2be4 <NOROM_OSCClockSourceGet+0xb4>
    2be0:	5b200000 	blpl	802be8 <__ccfg+0x7e2c40>
    2be4:	0100000f 	tsteq	r0, pc
    2be8:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    2bec:	fd000001 	stc2	0, cr0, [r0, #-4]
    2bf0:	2300000d 	movwcs	r0, #13
    2bf4:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    2bf8:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2bfc:	50010000 	andpl	r0, r1, r0
    2c00:	00061836 	andeq	r1, r6, r6, lsr r8
    2c04:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    2c08:	0f013d01 	svceq	0x00013d01
    2c0c:	00000416 	andeq	r0, r0, r6, lsl r4
    2c10:	00000e1b 	andeq	r0, r0, fp, lsl lr
    2c14:	01370000 	teqeq	r7, r0
    2c18:	00000be0 	andeq	r0, r0, r0, ror #23
    2c1c:	0106af01 	tsteq	r6, r1, lsl #30
    2c20:	000fe301 	andeq	lr, pc, r1, lsl #6
    2c24:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    2c28:	af01006e 	svcge	0x0001006e
    2c2c:	0000d91a 	andeq	sp, r0, sl, lsl r9
    2c30:	07dd3900 	ldrbeq	r3, [sp, r0, lsl #18]
    2c34:	af010000 	svcge	0x00010000
    2c38:	0000cd27 	andeq	ip, r0, r7, lsr #26
    2c3c:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    2c40:	160ebd01 	strne	fp, [lr], -r1, lsl #26
    2c44:	3a000004 	bcc	2c5c <NOROM_OSCClockSourceGet+0x12c>
    2c48:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    2c4c:	0000d907 	andeq	sp, r0, r7, lsl #18
    2c50:	4f4d3b00 	svcmi	0x004d3b00
    2c54:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    2c58:	3c000101 	stfccs	f0, [r0], {1}
    2c5c:	000c1d01 	andeq	r1, ip, r1, lsl #26
    2c60:	06a70100 	strteq	r0, [r7], r0, lsl #2
    2c64:	00000001 	andeq	r0, r0, r1
    2c68:	00000000 	andeq	r0, r0, r0
    2c6c:	189c0100 	ldmne	ip, {r8}
    2c70:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2c74:	a7010074 	smlsdxge	r1, r4, r0, r0
    2c78:	0001291f 	andeq	r2, r1, pc, lsl r9
    2c7c:	000e4400 	andeq	r4, lr, r0, lsl #8
    2c80:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    2c84:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    2c88:	57000000 	strpl	r0, [r0, -r0]
    2c8c:	0000000e 	andeq	r0, r0, lr
    2c90:	0c6c013c 	stfeqe	f0, [ip], #-240	; 0xffffff10
    2c94:	8f010000 	svchi	0x00010000
    2c98:	00000106 	andeq	r0, r0, r6, lsl #2
    2c9c:	00000000 	andeq	r0, r0, r0
    2ca0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ca4:	0000104e 	andeq	r1, r0, lr, asr #32
    2ca8:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    2cac:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    2cb0:	6a000001 	bvs	2cbc <NOROM_OSCClockSourceGet+0x18c>
    2cb4:	3e00000e 	cdpcc	0, 0, cr0, cr0, cr14, {0}
    2cb8:	93010069 	movwls	r0, #4201	; 0x1069
    2cbc:	00008d06 	andeq	r8, r0, r6, lsl #26
    2cc0:	000e8800 	andeq	r8, lr, r0, lsl #16
    2cc4:	013c0000 	teqeq	ip, r0
    2cc8:	00000a82 	andeq	r0, r0, r2, lsl #21
    2ccc:	01067f01 	tsteq	r6, r1, lsl #30
	...
    2cd8:	10849c01 	addne	r9, r4, r1, lsl #24
    2cdc:	753d0000 	ldrvc	r0, [sp, #-0]!
    2ce0:	7f010074 	svcvc	0x00010074
    2ce4:	0001291a 	andeq	r2, r1, sl, lsl r9
    2ce8:	000ea600 	andeq	sl, lr, r0, lsl #12
    2cec:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    2cf0:	8d068301 	stchi	3, cr8, [r6, #-4]
    2cf4:	cf000000 	svcgt	0x00000000
    2cf8:	0000000e 	andeq	r0, r0, lr
    2cfc:	0b95013f 	bleq	fe543200 <_estack+0xde53e200>
    2d00:	7b010000 	blvc	42d08 <__ccfg+0x22d60>
    2d04:	0f280106 	svceq	0x00280106
    2d08:	0f380000 	svceq	0x00380000
    2d0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d10:	000b4140 	andeq	r4, fp, r0, asr #2
    2d14:	145f0100 	ldrbne	r0, [pc], #-256	; 2d1c <port_confs+0x10>
    2d18:	00041601 	andeq	r1, r4, r1, lsl #12
    2d1c:	10c10100 	sbcne	r0, r1, r0, lsl #2
    2d20:	70380000 	eorsvc	r0, r8, r0
    2d24:	01006469 	tsteq	r0, r9, ror #8
    2d28:	011d225f 	tsteq	sp, pc, asr r2
    2d2c:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    2d30:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    2d34:	00000416 	andeq	r0, r0, r6, lsl r4
    2d38:	0a8d4100 	beq	fe353140 <_estack+0xde34e140>
    2d3c:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2d40:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    2d44:	03000010 	movweq	r0, #16
    2d48:	000010e2 	andeq	r1, r0, r2, ror #1
    2d4c:	00074d35 	andeq	r4, r7, r5, lsr sp
    2d50:	029e0200 	addseq	r0, lr, #0, 4
    2d54:	00007313 	andeq	r7, r0, r3, lsl r3
    2d58:	01020000 	mrseq	r0, (UNDEF: 2)
    2d5c:	000bd402 	andeq	sp, fp, r2, lsl #8
    2d60:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    2d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d70:	0000112e 	andeq	r1, r0, lr, lsr #2
    2d74:	0010aa43 	andseq	sl, r0, r3, asr #20
    2d78:	000eed00 	andeq	lr, lr, r0, lsl #26
    2d7c:	10b64400 	adcsne	r4, r6, r0, lsl #8
    2d80:	0f160000 	svceq	0x00160000
    2d84:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    2d88:	00000010 	andeq	r0, r0, r0, lsl r0
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	01000000 	mrseq	r0, (UNDEF: 0)
    2d94:	aa43145f 	bge	10c7f18 <__ccfg+0x10a7f70>
    2d98:	34000010 	strcc	r0, [r0], #-16
    2d9c:	4600000f 	strmi	r0, [r0], -pc
    2da0:	000010b6 	strheq	r1, [r0], -r6
    2da4:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    2da8:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    2dac:	0400000f 	streq	r0, [r0], #-15
    2db0:	01000010 	tsteq	r0, r0, lsl r0
    2db4:	00119a9c 	mulseq	r1, ip, sl
    2db8:	0fad4300 	svceq	0x00ad4300
    2dbc:	0f470000 	svceq	0x00470000
    2dc0:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    2dc4:	5a00000f 	bpl	2e08 <__exidx_end+0x7c>
    2dc8:	4600000f 	strmi	r0, [r0], -pc
    2dcc:	00000fc5 	andeq	r0, r0, r5, asr #31
    2dd0:	000fcf46 	andeq	ip, pc, r6, asr #30
    2dd4:	0f9e4700 	svceq	0x009e4700
    2dd8:	0f460000 	svceq	0x00460000
    2ddc:	06000000 	streq	r0, [r0], -r0
    2de0:	af010000 	svcge	0x00010000
    2de4:	0fb92906 	svceq	0x00b92906
    2de8:	ad430000 	stclge	0, cr0, [r3, #-0]
    2dec:	6d00000f 	stcvs	0, cr0, [r0, #-60]	; 0xffffffc4
    2df0:	3600000f 	strcc	r0, [r0], -pc
    2df4:	00000600 	andeq	r0, r0, r0, lsl #12
    2df8:	000fc544 	andeq	ip, pc, r4, asr #10
    2dfc:	000f9600 	andeq	r9, pc, r0, lsl #12
    2e00:	0fcf4600 	svceq	0x00cf4600
    2e04:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    2e08:	e200000f 	and	r0, r0, #15
    2e0c:	0000000f 	andeq	r0, r0, pc
    2e10:	db420000 	blle	1082e18 <__ccfg+0x1062e70>
    2e14:	1800000e 	stmdane	r0, {r1, r2, r3}
    2e18:	4c000010 	stcmi	0, cr0, [r0], {16}
    2e1c:	01000010 	tsteq	r0, r0, lsl r0
    2e20:	0011ee9c 	mulseq	r1, ip, lr
    2e24:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    2e28:	0fb40000 	svceq	0x00b40000
    2e2c:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    2e30:	d200000e 	andle	r0, r0, #14
    2e34:	4600000f 	strmi	r0, [r0], -pc
    2e38:	00000f05 	andeq	r0, r0, r5, lsl #30
    2e3c:	000edb49 	andeq	sp, lr, r9, asr #22
    2e40:	00102a00 	andseq	r2, r0, r0, lsl #20
    2e44:	00103200 	andseq	r3, r0, r0, lsl #4
    2e48:	01590100 	cmpeq	r9, r0, lsl #2
    2e4c:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    2e50:	0ff00000 	svceq	0x00f00000	; IMB
    2e54:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    2e58:	0300000e 	movweq	r0, #14
    2e5c:	46000010 			; <UNDEFINED> instruction: 0x46000010
    2e60:	00000f05 	andeq	r0, r0, r5, lsl #30
    2e64:	804a0000 	subhi	r0, sl, r0
    2e68:	34000008 	strcc	r0, [r0], #-8
    2e6c:	7c000012 	stcvc	0, cr0, [r0], {18}
    2e70:	01000012 	tsteq	r0, r2, lsl r0
    2e74:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    2e78:	10160000 	andsne	r0, r6, r0
    2e7c:	80490000 	subhi	r0, r9, r0
    2e80:	40000008 	andmi	r0, r0, r8
    2e84:	48000012 	stmdami	r0, {r1, r4}
    2e88:	01000012 	tsteq	r0, r2, lsl r0
    2e8c:	4306037c 	movwmi	r0, #25468	; 0x637c
    2e90:	00000890 	muleq	r0, r0, r8
    2e94:	00001034 	andeq	r1, r0, r4, lsr r0
    2e98:	33000000 	movwcc	r0, #0
    2e9c:	03000013 	movweq	r0, #19
    2ea0:	000c6e00 	andeq	r6, ip, r0, lsl #28
    2ea4:	6d010400 	cfstrsvs	mvf0, [r1, #-0]
    2ea8:	0c000001 	stceq	0, cr0, [r0], {1}
    2eac:	00000cbb 			; <UNDEFINED> instruction: 0x00000cbb
    2eb0:	000000db 	ldrdeq	r0, [r0], -fp
    2eb4:	00000808 	andeq	r0, r0, r8, lsl #16
    2eb8:	00000000 	andeq	r0, r0, r0
    2ebc:	000028bf 			; <UNDEFINED> instruction: 0x000028bf
    2ec0:	b2060102 	andlt	r0, r6, #-2147483648	; 0x80000000
    2ec4:	02000003 	andeq	r0, r0, #3
    2ec8:	03ec0502 	mvneq	r0, #8388608	; 0x800000
    2ecc:	04020000 	streq	r0, [r2], #-0
    2ed0:	0000a405 	andeq	sl, r0, r5, lsl #8
    2ed4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2ed8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2edc:	00221803 	eoreq	r1, r2, r3, lsl #16
    2ee0:	182e0200 	stmdane	lr!, {r9}
    2ee4:	0000004d 	andeq	r0, r0, sp, asr #32
    2ee8:	b0080102 	andlt	r0, r8, r2, lsl #2
    2eec:	03000003 	movweq	r0, #3
    2ef0:	00002106 	andeq	r2, r0, r6, lsl #2
    2ef4:	60193102 	andsvs	r3, r9, r2, lsl #2
    2ef8:	02000000 	andeq	r0, r0, #0
    2efc:	026e0702 	rsbeq	r0, lr, #524288	; 0x80000
    2f00:	cf030000 	svcgt	0x00030000
    2f04:	02000017 	andeq	r0, r0, #23
    2f08:	00731934 	rsbseq	r1, r3, r4, lsr r9
    2f0c:	04020000 	streq	r0, [r2], #-0
    2f10:	00007907 	andeq	r7, r0, r7, lsl #18
    2f14:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2f18:	00000074 	andeq	r0, r0, r4, ror r0
    2f1c:	69050404 	stmdbvs	r5, {r2, sl}
    2f20:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2f24:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    2f28:	62030000 	andvs	r0, r3, #0
    2f2c:	0300000b 	movweq	r0, #11
    2f30:	009b1b28 	addseq	r1, fp, r8, lsr #22
    2f34:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
    2f38:	0400000a 	streq	r0, [r0], #-10
    2f3c:	00b3000d 	adcseq	r0, r3, sp
    2f40:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2f44:	b300000c 	movwlt	r0, #12
    2f48:	00000000 	andeq	r0, r0, r0
    2f4c:	04070001 	streq	r0, [r7], #-1
    2f50:	000a7a03 	andeq	r7, sl, r3, lsl #20
    2f54:	18630300 	stmdane	r3!, {r8, r9}^
    2f58:	0000008f 	andeq	r0, r0, pc, lsl #1
    2f5c:	00040c03 	andeq	r0, r4, r3, lsl #24
    2f60:	12260400 	eorne	r0, r6, #0, 8
    2f64:	00000041 	andeq	r0, r0, r1, asr #32
    2f68:	0015dc03 	andseq	sp, r5, r3, lsl #24
    2f6c:	12270400 	eorne	r0, r7, #0, 8
    2f70:	00000054 	andeq	r0, r0, r4, asr r0
    2f74:	0000cd08 	andeq	ip, r0, r8, lsl #26
    2f78:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    2f7c:	d4030000 	strle	r0, [r3], #-0
    2f80:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2f84:	0041122b 	subeq	r1, r1, fp, lsr #4
    2f88:	e3090000 	movw	r0, #36864	; 0x9000
    2f8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f90:	000000e3 	andeq	r0, r0, r3, ror #1
    2f94:	00162d03 	andseq	r2, r6, r3, lsl #26
    2f98:	122c0400 	eorne	r0, ip, #0, 8
    2f9c:	00000067 	andeq	r0, r0, r7, rrx
    2fa0:	0000f908 	andeq	pc, r0, r8, lsl #18
    2fa4:	02a10300 	adceq	r0, r1, #0, 6
    2fa8:	2d040000 	stccs	0, cr0, [r4, #-0]
    2fac:	00006712 	andeq	r6, r0, r2, lsl r7
    2fb0:	077e0300 	ldrbeq	r0, [lr, -r0, lsl #6]!
    2fb4:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    2fb8:	00012210 	andeq	r2, r1, r0, lsl r2
    2fbc:	cd040a00 	vstrgt	s0, [r4, #-0]
    2fc0:	0b000000 	bleq	2fc8 <__exidx_end+0x23c>
    2fc4:	09320408 	ldmdbeq	r2!, {r3, sl}
    2fc8:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    2fcc:	0002bc0c 	andeq	fp, r2, ip, lsl #24
    2fd0:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    2fd4:	000000e3 	andeq	r0, r0, r3, ror #1
    2fd8:	00070101 	andeq	r0, r7, r1, lsl #2
    2fdc:	0000980c 	andeq	r9, r0, ip, lsl #16
    2fe0:	03350400 	teqeq	r5, #0, 8
    2fe4:	000000e3 	andeq	r0, r0, r3, ror #1
    2fe8:	00060101 	andeq	r0, r6, r1, lsl #2
    2fec:	00028a0c 	andeq	r8, r2, ip, lsl #20
    2ff0:	03360400 	teqeq	r6, #0, 8
    2ff4:	000000e3 	andeq	r0, r0, r3, ror #1
    2ff8:	00050101 	andeq	r0, r5, r1, lsl #2
    2ffc:	00041b0c 	andeq	r1, r4, ip, lsl #22
    3000:	03370400 	teqeq	r7, #0, 8
    3004:	000000e3 	andeq	r0, r0, r3, ror #1
    3008:	00040101 	andeq	r0, r4, r1, lsl #2
    300c:	0004140c 	andeq	r1, r4, ip, lsl #8
    3010:	03380400 	teqeq	r8, #0, 8
    3014:	000000e3 	andeq	r0, r0, r3, ror #1
    3018:	00000401 	andeq	r0, r0, r1, lsl #8
    301c:	0004050d 	andeq	r0, r4, sp, lsl #10
    3020:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    3024:	000000e3 	andeq	r0, r0, r3, ror #1
    3028:	00400d01 	subeq	r0, r0, r1, lsl #26
    302c:	3c040000 	stccc	0, cr0, [r4], {-0}
    3030:	0000e303 	andeq	lr, r0, r3, lsl #6
    3034:	6d0d0200 	sfmvs	f0, 4, [sp, #-0]
    3038:	04000000 	streq	r0, [r0], #-0
    303c:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    3040:	0d030000 	stceq	0, cr0, [r3, #-0]
    3044:	00000153 	andeq	r0, r0, r3, asr r1
    3048:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    304c:	04000000 	streq	r0, [r0], #-0
    3050:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
    3054:	41040000 	mrsmi	r0, (UNDEF: 4)
    3058:	00012803 	andeq	r2, r1, r3, lsl #16
    305c:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    3060:	b00e0000 	andlt	r0, lr, r0
    3064:	04000002 	streq	r0, [r0], #-2
    3068:	01c21a43 	biceq	r1, r2, r3, asr #20
    306c:	01010000 	mrseq	r0, (UNDEF: 1)
    3070:	00031c0e 	andeq	r1, r3, lr, lsl #24
    3074:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    3078:	000001e3 	andeq	r0, r0, r3, ror #3
    307c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    3080:	000001e9 	andeq	r0, r0, r9, ror #3
    3084:	b9080102 	stmdblt	r8, {r1, r8}
    3088:	08000003 	stmdaeq	r0, {r0, r1}
    308c:	000001e9 	andeq	r0, r0, r9, ror #3
    3090:	00032a0e 	andeq	r2, r3, lr, lsl #20
    3094:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    3098:	000001e3 	andeq	r0, r0, r3, ror #3
    309c:	080b0101 	stmdaeq	fp, {r0, r8}
    30a0:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    30a4:	0d000002 	stceq	0, cr0, [r0, #-8]
    30a8:	000002c3 	andeq	r0, r0, r3, asr #5
    30ac:	670b9005 	strvs	r9, [fp, -r5]
    30b0:	00000000 	andeq	r0, r0, r0
    30b4:	0006090d 	andeq	r0, r6, sp, lsl #18
    30b8:	08910500 	ldmeq	r1, {r8, sl}
    30bc:	000000cd 	andeq	r0, r0, sp, asr #1
    30c0:	04870d04 	streq	r0, [r7], #3332	; 0xd04
    30c4:	92050000 	andls	r0, r5, #0
    30c8:	0000ef10 	andeq	lr, r0, r0, lsl pc
    30cc:	03000600 	movweq	r0, #1536	; 0x600
    30d0:	00000422 	andeq	r0, r0, r2, lsr #8
    30d4:	03039305 	movweq	r9, #13061	; 0x3305
    30d8:	0f000002 	svceq	0x00000002
    30dc:	00000234 	andeq	r0, r0, r4, lsr r2
    30e0:	0000024b 	andeq	r0, r0, fp, asr #4
    30e4:	360e0010 			; <UNDEFINED> instruction: 0x360e0010
    30e8:	05000000 	streq	r0, [r0, #-0]
    30ec:	02400f99 	subeq	r0, r0, #612	; 0x264
    30f0:	01010000 	mrseq	r0, (UNDEF: 1)
    30f4:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    30f8:	010b0000 	mrseq	r0, (UNDEF: 11)
    30fc:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    3100:	0c000002 	stceq	0, cr0, [r0], {2}
    3104:	0000047a 	andeq	r0, r0, sl, ror r4
    3108:	e3079306 	movw	r9, #29446	; 0x7306
    310c:	01000000 	mrseq	r0, (UNDEF: 0)
    3110:	0c000107 	stfeqs	f0, [r0], {7}
    3114:	00000031 	andeq	r0, r0, r1, lsr r0
    3118:	e3039406 	movw	r9, #13318	; 0x3406
    311c:	01000000 	mrseq	r0, (UNDEF: 0)
    3120:	00000001 	andeq	r0, r0, r1
    3124:	00028103 	andeq	r8, r2, r3, lsl #2
    3128:	03960600 	orrseq	r0, r6, #0, 12
    312c:	0000025f 	andeq	r0, r0, pc, asr r2
    3130:	00028908 	andeq	r8, r2, r8, lsl #18
    3134:	02950f00 	addseq	r0, r5, #0, 30
    3138:	02a50000 	adceq	r0, r5, #0
    313c:	00100000 	andseq	r0, r0, r0
    3140:	00029a08 	andeq	r9, r2, r8, lsl #20
    3144:	02e60e00 	rsceq	r0, r6, #0, 28
    3148:	9c060000 	stcls	0, cr0, [r6], {-0}
    314c:	0002a517 	andeq	sl, r2, r7, lsl r5
    3150:	0f010100 	svceq	0x00010100
    3154:	000000d9 	ldrdeq	r0, [r0], -r9
    3158:	000002c3 	andeq	r0, r0, r3, asr #5
    315c:	b8080010 	stmdalt	r8, {r4}
    3160:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3164:	000003a2 	andeq	r0, r0, r2, lsr #7
    3168:	c3130607 	tstgt	r3, #7340032	; 0x700000
    316c:	01000002 	tsteq	r0, r2
    3170:	01330e01 	teqeq	r3, r1, lsl #28
    3174:	c3050000 	movwgt	r0, #20480	; 0x5000
    3178:	0000f90e 	andeq	pc, r0, lr, lsl #18
    317c:	11010100 	mrsne	r0, (UNDEF: 17)
    3180:	00000494 	muleq	r0, r4, r4
    3184:	10016e08 	andne	r6, r1, r8, lsl #28
    3188:	000002f1 	strdeq	r0, [r0], -r1
    318c:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    3190:	01120000 	tsteq	r2, r0
    3194:	00000303 	andeq	r0, r0, r3, lsl #6
    3198:	0000cd13 	andeq	ip, r0, r3, lsl sp
    319c:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    31a0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    31a4:	10000003 	andne	r0, r0, r3
    31a8:	03030800 	movweq	r0, #14336	; 0x3800
    31ac:	54140000 	ldrpl	r0, [r4], #-0
    31b0:	08000004 	stmdaeq	r0, {r2}
    31b4:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    31b8:	01000003 	tsteq	r0, r3
    31bc:	039a1401 	orrseq	r1, sl, #16777216	; 0x1000000
    31c0:	82080000 	andhi	r0, r8, #0
    31c4:	01051401 	tsteq	r5, r1, lsl #8
    31c8:	01010000 	mrseq	r0, (UNDEF: 1)
    31cc:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    31d0:	00035509 	andeq	r5, r3, r9, lsl #10
    31d4:	0eda0d00 	cdpeq	13, 13, cr0, cr10, cr0, {0}
    31d8:	0f090000 	svceq	0x00090000
    31dc:	0000cd07 	andeq	ip, r0, r7, lsl #26
    31e0:	580d0000 	stmdapl	sp, {}	; <UNPREDICTABLE>
    31e4:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    31e8:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    31ec:	00020000 	andeq	r0, r2, r0
    31f0:	000ec803 	andeq	ip, lr, r3, lsl #16
    31f4:	03110900 	tsteq	r1, #0, 18
    31f8:	00000331 	andeq	r0, r0, r1, lsr r3
    31fc:	1609200b 	strne	r2, [r9], -fp
    3200:	0003d309 	andeq	sp, r3, r9, lsl #6
    3204:	0eb80d00 	cdpeq	13, 11, cr0, cr8, cr0, {0}
    3208:	17090000 	strne	r0, [r9, -r0]
    320c:	0003ed08 	andeq	lr, r3, r8, lsl #26
    3210:	c00d0000 	andgt	r0, sp, r0
    3214:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3218:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    321c:	0d040000 	stceq	0, cr0, [r4, #-0]
    3220:	00000e28 	andeq	r0, r0, r8, lsr #28
    3224:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    3228:	08000004 	stmdaeq	r0, {r2}
    322c:	000e760d 	andeq	r7, lr, sp, lsl #12
    3230:	081a0900 	ldmdaeq	sl, {r8, fp}
    3234:	00000459 	andeq	r0, r0, r9, asr r4
    3238:	0de70d0c 	stcleq	13, cr0, [r7, #48]!	; 0x30
    323c:	1b090000 	blne	243244 <__ccfg+0x22329c>
    3240:	00046f08 	andeq	r6, r4, r8, lsl #30
    3244:	c00d1000 	andgt	r1, sp, r0
    3248:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    324c:	046f081c 	strbteq	r0, [pc], #-2076	; 3254 <__exidx_end+0x4c8>
    3250:	0d140000 	ldceq	0, cr0, [r4, #-0]
    3254:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3258:	6f081d09 	svcvs	0x00081d09
    325c:	18000004 	stmdane	r0, {r2}
    3260:	000d320d 	andeq	r3, sp, sp, lsl #4
    3264:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    3268:	00000081 	andeq	r0, r0, r1, lsl #1
    326c:	0115001c 	tsteq	r5, ip, lsl r0
    3270:	00000081 	andeq	r0, r0, r1, lsl #1
    3274:	000003ed 	andeq	r0, r0, sp, ror #7
    3278:	00008113 	andeq	r8, r0, r3, lsl r1
    327c:	00811300 	addeq	r1, r1, r0, lsl #6
    3280:	b5130000 	ldrlt	r0, [r3, #-0]
    3284:	00000000 	andeq	r0, r0, r0
    3288:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    328c:	01150000 	tsteq	r5, r0
    3290:	00000081 	andeq	r0, r0, r1, lsl #1
    3294:	00000408 	andeq	r0, r0, r8, lsl #8
    3298:	00008113 	andeq	r8, r0, r3, lsl r1
    329c:	00811300 	addeq	r1, r1, r0, lsl #6
    32a0:	0a000000 	beq	32a8 <__exidx_end+0x51c>
    32a4:	0003f304 	andeq	pc, r3, r4, lsl #6
    32a8:	81011500 	tsthi	r1, r0, lsl #10
    32ac:	32000000 	andcc	r0, r0, #0
    32b0:	13000004 	movwne	r0, #4
    32b4:	00000081 	andeq	r0, r0, r1, lsl #1
    32b8:	00011613 	andeq	r1, r1, r3, lsl r6
    32bc:	00811300 	addeq	r1, r1, r0, lsl #6
    32c0:	32130000 	andscc	r0, r3, #0
    32c4:	13000004 	movwne	r0, #4
    32c8:	00000438 	andeq	r0, r0, r8, lsr r4
    32cc:	81040a00 	tsthi	r4, r0, lsl #20
    32d0:	0a000000 	beq	32d8 <__exidx_end+0x54c>
    32d4:	00035504 	andeq	r5, r3, r4, lsl #10
    32d8:	0e040a00 	vmlaeq.f32	s0, s8, s0
    32dc:	15000004 	strne	r0, [r0, #-4]
    32e0:	00008101 	andeq	r8, r0, r1, lsl #2
    32e4:	00045900 	andeq	r5, r4, r0, lsl #18
    32e8:	01161300 	tsteq	r6, r0, lsl #6
    32ec:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    32f0:	00000004 	andeq	r0, r0, r4
    32f4:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    32f8:	01150000 	tsteq	r5, r0
    32fc:	00000081 	andeq	r0, r0, r1, lsl #1
    3300:	0000046f 	andeq	r0, r0, pc, ror #8
    3304:	00011613 	andeq	r1, r1, r3, lsl r6
    3308:	040a0000 	streq	r0, [sl], #-0
    330c:	0000045f 	andeq	r0, r0, pc, asr r4
    3310:	000d1d03 	andeq	r1, sp, r3, lsl #26
    3314:	031f0900 	tsteq	pc, #0, 18
    3318:	00000361 	andeq	r0, r0, r1, ror #6
    331c:	00047508 	andeq	r7, r4, r8, lsl #10
    3320:	0d7d1600 	ldcleq	6, cr1, [sp, #-0]
    3324:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3328:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    332c:	0e0d0000 	cdpeq	0, 0, cr0, cr13, cr0, {0}
    3330:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3334:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    3338:	0d000000 	stceq	0, cr0, [r0, #-0]
    333c:	00000c91 	muleq	r0, r1, ip
    3340:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    3344:	04000004 	streq	r0, [r0], #-4
    3348:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    334c:	03000004 	movweq	r0, #4
    3350:	00000d8b 	andeq	r0, r0, fp, lsl #27
    3354:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    3358:	03000004 	movweq	r0, #4
    335c:	00000eea 	andeq	r0, r0, sl, ror #29
    3360:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    3364:	0b000004 	bleq	337c <__exidx_end+0x5f0>
    3368:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    336c:	00000536 	andeq	r0, r0, r6, lsr r5
    3370:	000e5d0c 	andeq	r5, lr, ip, lsl #26
    3374:	09400900 	stmdbeq	r0, {r8, fp}^
    3378:	000000cd 	andeq	r0, r0, sp, asr #1
    337c:	000f0102 	andeq	r0, pc, r2, lsl #2
    3380:	000f3c0c 	andeq	r3, pc, ip, lsl #24
    3384:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    3388:	000000cd 	andeq	r0, r0, sp, asr #1
    338c:	000e0102 	andeq	r0, lr, r2, lsl #2
    3390:	000dad0c 	andeq	sl, sp, ip, lsl #26
    3394:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    3398:	000000cd 	andeq	r0, r0, sp, asr #1
    339c:	000d0102 	andeq	r0, sp, r2, lsl #2
    33a0:	000e7e0c 	andeq	r7, lr, ip, lsl #28
    33a4:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    33a8:	000000cd 	andeq	r0, r0, sp, asr #1
    33ac:	00060702 	andeq	r0, r6, r2, lsl #14
    33b0:	000ef80c 	andeq	pc, lr, ip, lsl #16
    33b4:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    33b8:	000000cd 	andeq	r0, r0, sp, asr #1
    33bc:	00030302 	andeq	r0, r3, r2, lsl #6
    33c0:	000e4a0c 	andeq	r4, lr, ip, lsl #20
    33c4:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    33c8:	000000cd 	andeq	r0, r0, sp, asr #1
    33cc:	00000302 	andeq	r0, r0, r2, lsl #6
    33d0:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    33d4:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    33d8:	b4180000 	ldrlt	r0, [r8], #-0
    33dc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    33e0:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    33e4:	62190000 	andsvs	r0, r9, #0
    33e8:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    33ec:	000004cc 	andeq	r0, r0, ip, asr #9
    33f0:	0c960300 	ldceq	3, cr0, [r6], {0}
    33f4:	47090000 	strmi	r0, [r9, -r0]
    33f8:	00053603 	andeq	r3, r5, r3, lsl #12
    33fc:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    3400:	05840550 	streq	r0, [r4, #1360]	; 0x550
    3404:	1e180000 	cdpne	0, 1, cr0, cr8, cr0, {0}
    3408:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    340c:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    3410:	0c180000 	ldceq	0, cr0, [r8], {-0}
    3414:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3418:	03550b52 	cmpeq	r5, #83968	; 0x14800
    341c:	16000000 	strne	r0, [r0], -r0
    3420:	00000f2d 	andeq	r0, r0, sp, lsr #30
    3424:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    3428:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    342c:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    3430:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    3434:	0d000000 	stceq	0, cr0, [r0, #-0]
    3438:	00000eff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    343c:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    3440:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3444:	000edf0d 	andeq	sp, lr, sp, lsl #30
    3448:	10680900 	rsbne	r0, r8, r0, lsl #18
    344c:	00000556 	andeq	r0, r0, r6, asr r5
    3450:	9903000a 	stmdbls	r3, {r1, r3}
    3454:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3458:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    345c:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    3460:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    3464:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    3468:	00000df8 	strdeq	r0, [r0], -r8
    346c:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    3470:	00000004 	andeq	r0, r0, r4
    3474:	000ead0d 	andeq	sl, lr, sp, lsl #26
    3478:	11830900 	orrne	r0, r3, r0, lsl #18
    347c:	00000556 	andeq	r0, r0, r6, asr r5
    3480:	3a030008 	bcc	c34a8 <__ccfg+0xa3500>
    3484:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3488:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    348c:	7f140000 	svcvc	0x00140000
    3490:	08000004 	stmdaeq	r0, {r2}
    3494:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    3498:	01000000 	mrseq	r0, (UNDEF: 0)
    349c:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    34a0:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    34a4:	1c000006 	stcne	0, cr0, [r0], {6}
    34a8:	00002210 	andeq	r2, r0, r0, lsl r2
    34ac:	07030708 	streq	r0, [r3, -r8, lsl #14]
    34b0:	000000cd 	andeq	r0, r0, sp, asr #1
    34b4:	055b1c00 	ldrbeq	r1, [fp, #-3072]	; 0xfffff400
    34b8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    34bc:	010a0803 	tsteq	sl, r3, lsl #16
    34c0:	00040000 	andeq	r0, r4, r0
    34c4:	00026111 	andeq	r6, r2, r1, lsl r1
    34c8:	03090800 	movweq	r0, #38912	; 0x9800
    34cc:	00060203 	andeq	r0, r6, r3, lsl #4
    34d0:	04a31d00 	strteq	r1, [r3], #3328	; 0xd00
    34d4:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    34d8:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    34dc:	1c000006 	stcne	0, cr0, [r0], {6}
    34e0:	0000049c 	muleq	r0, ip, r4
    34e4:	08031408 	stmdaeq	r3, {r3, sl, ip}
    34e8:	000000cd 	andeq	r0, r0, sp, asr #1
    34ec:	02cd1c00 	sbceq	r1, sp, #0, 24
    34f0:	15080000 	strne	r0, [r8, #-0]
    34f4:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    34f8:	1c020000 	stcne	0, cr0, [r2], {-0}
    34fc:	00000497 	muleq	r0, r7, r4
    3500:	0b031608 	bleq	c8d28 <__ccfg+0xa8d80>
    3504:	000002e4 	andeq	r0, r0, r4, ror #5
    3508:	0f5b1c04 	svceq	0x005b1c04
    350c:	17080000 	strne	r0, [r8, -r0]
    3510:	010a0903 	tsteq	sl, r3, lsl #18
    3514:	1c080000 	stcne	0, cr0, [r8], {-0}
    3518:	0000044d 	andeq	r0, r0, sp, asr #8
    351c:	0f031808 	svceq	0x00031808
    3520:	00000699 	muleq	r0, r9, r6
    3524:	02c81c0c 	sbceq	r1, r8, #12, 24	; 0xc00
    3528:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    352c:	06a91503 	strteq	r1, [r9], r3, lsl #10
    3530:	002c0000 	eoreq	r0, ip, r0
    3534:	0006290f 	andeq	r2, r6, pc, lsl #18
    3538:	0006a900 	andeq	sl, r6, r0, lsl #18
    353c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3540:	00030000 	andeq	r0, r3, r0
    3544:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    3548:	ae110000 	cdpge	0, 1, cr0, cr1, cr0, {0}
    354c:	08000004 	stmdaeq	r0, {r2}
    3550:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    3554:	14000006 	strne	r0, [r0], #-6
    3558:	00000390 	muleq	r0, r0, r3
    355c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    3560:	000006cb 	andeq	r0, r0, fp, asr #13
    3564:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    3568:	000006af 	andeq	r0, r0, pc, lsr #13
    356c:	0004cd0e 	andeq	ip, r4, lr, lsl #26
    3570:	131d0a00 	tstne	sp, #0, 20
    3574:	000000cd 	andeq	r0, r0, sp, asr #1
    3578:	370e0101 	strcc	r0, [lr, -r1, lsl #2]
    357c:	0a000007 	beq	35a0 <__exidx_end+0x814>
    3580:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    3584:	01010000 	mrseq	r0, (UNDEF: 1)
    3588:	0008c70e 	andeq	ip, r8, lr, lsl #14
    358c:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    3590:	000000de 	ldrdeq	r0, [r0], -lr
    3594:	f60e0101 			; <UNDEFINED> instruction: 0xf60e0101
    3598:	0a000005 	beq	35b4 <__exidx_end+0x828>
    359c:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    35a0:	01010000 	mrseq	r0, (UNDEF: 1)
    35a4:	000d1303 	andeq	r1, sp, r3, lsl #6
    35a8:	0f0e0b00 	svceq	0x000e0b00
    35ac:	00000715 	andeq	r0, r0, r5, lsl r7
    35b0:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    35b4:	01150000 	tsteq	r5, r0
    35b8:	00000081 	andeq	r0, r0, r1, lsl #1
    35bc:	00000730 	andeq	r0, r0, r0, lsr r7
    35c0:	00008113 	andeq	r8, r0, r3, lsl r1
    35c4:	01161300 	tsteq	r6, r0, lsl #6
    35c8:	0f000000 	svceq	0x00000000
    35cc:	00000740 	andeq	r0, r0, r0, asr #14
    35d0:	00000740 	andeq	r0, r0, r0, asr #14
    35d4:	0000881e 	andeq	r8, r0, lr, lsl r8
    35d8:	0a000700 	beq	51e0 <__exidx_end+0x2454>
    35dc:	0005e704 	andeq	lr, r5, r4, lsl #14
    35e0:	0dc81f00 	stcleq	15, cr1, [r8]
    35e4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    35e8:	00073015 	andeq	r3, r7, r5, lsl r0
    35ec:	00030500 	andeq	r0, r3, r0, lsl #10
    35f0:	0f000000 	svceq	0x00000000
    35f4:	00000709 	andeq	r0, r0, r9, lsl #14
    35f8:	00000768 	andeq	r0, r0, r8, ror #14
    35fc:	0000881e 	andeq	r8, r0, lr, lsl r8
    3600:	1f000200 	svcne	0x00000200
    3604:	00000e4f 	andeq	r0, r0, pc, asr #28
    3608:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    360c:	05000007 	streq	r0, [r0, #-7]
    3610:	00000003 	andeq	r0, r0, r3
    3614:	078a0f00 	streq	r0, [sl, r0, lsl #30]
    3618:	078a0000 	streq	r0, [sl, r0]
    361c:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    3620:	02000000 	andeq	r0, r0, #0
    3624:	c0040a00 	andgt	r0, r4, r0, lsl #20
    3628:	1f000004 	svcne	0x00000004
    362c:	00000d75 	andeq	r0, r0, r5, ror sp
    3630:	7a13190c 	bvc	4c9a68 <__ccfg+0x4a9ac0>
    3634:	05000007 	streq	r0, [r0, #-7]
    3638:	00000003 	andeq	r0, r0, r3
    363c:	00810f00 	addeq	r0, r1, r0, lsl #30
    3640:	07b20000 	ldreq	r0, [r2, r0]!
    3644:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    3648:	02000000 	andeq	r0, r0, #0
    364c:	0d4d1f00 	stcleq	15, cr1, [sp, #-0]
    3650:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    3654:	0007a20f 	andeq	sl, r7, pc, lsl #4
    3658:	00030500 	andeq	r0, r3, r0, lsl #10
    365c:	0f000000 	svceq	0x00000000
    3660:	000007d4 	ldrdeq	r0, [r0], -r4
    3664:	000007d4 	ldrdeq	r0, [r0], -r4
    3668:	0000881e 	andeq	r8, r0, lr, lsl r8
    366c:	0a000200 	beq	3e74 <__exidx_end+0x10e8>
    3670:	00048104 	andeq	r8, r4, r4, lsl #2
    3674:	0f251f00 	svceq	0x00251f00
    3678:	230c0000 	movwcs	r0, #49152	; 0xc000
    367c:	0007c41b 	andeq	ip, r7, fp, lsl r4
    3680:	00030500 	andeq	r0, r3, r0, lsl #10
    3684:	20000000 	andcs	r0, r0, r0
    3688:	000e6d01 	andeq	r6, lr, r1, lsl #26
    368c:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    3690:	14fc0101 	ldrbtne	r0, [ip], #257	; 0x101
    3694:	14fe0000 	ldrbtne	r0, [lr], #0
    3698:	9c010000 	stcls	0, cr0, [r1], {-0}
    369c:	0d5c0121 	ldfeqe	f0, [ip, #-132]	; 0xffffff7c
    36a0:	05010000 	streq	r0, [r1, #-0]
    36a4:	81010105 	tsthi	r1, r5, lsl #2
	...
    36b0:	01000000 	mrseq	r0, (UNDEF: 0)
    36b4:	0008639c 	muleq	r8, ip, r3
    36b8:	68702200 	ldmdavs	r0!, {r9, sp}^
    36bc:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    36c0:	00812d05 	addeq	r2, r1, r5, lsl #26
    36c4:	10470000 	subne	r0, r7, r0
    36c8:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    36cc:	00000011 	andeq	r0, r0, r1, lsl r0
    36d0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    36d4:	01000007 	tsteq	r0, r7
    36d8:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    36dc:	00001160 	andeq	r1, r0, r0, ror #2
    36e0:	00001065 	andeq	r1, r0, r5, rrx
    36e4:	0007f025 	andeq	pc, r7, r5, lsr #32
    36e8:	116b2600 	cmnne	fp, r0, lsl #12
    36ec:	10780000 	rsbsne	r0, r8, r0
    36f0:	76260000 	strtvc	r0, [r6], -r0
    36f4:	96000011 			; <UNDEFINED> instruction: 0x96000011
    36f8:	00000010 	andeq	r0, r0, r0, lsl r0
    36fc:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3700:	00000ea2 	andeq	r0, r0, r2, lsr #29
    3704:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    3708:	00000001 	andeq	r0, r0, r1
    370c:	00000000 	andeq	r0, r0, r0
    3710:	9d9c0100 	ldflss	f0, [ip]
    3714:	22000008 	andcs	r0, r0, #8
    3718:	00746b70 	rsbseq	r6, r4, r0, ror fp
    371c:	3004fa01 	andcc	pc, r4, r1, lsl #20
    3720:	00000116 	andeq	r0, r0, r6, lsl r1
    3724:	000010c0 	andeq	r1, r0, r0, asr #1
    3728:	01006228 	tsteq	r0, r8, lsr #4
    372c:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    3730:	de000008 	cdple	0, 0, cr0, cr0, cr8, {0}
    3734:	00000010 	andeq	r0, r0, r0, lsl r0
    3738:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    373c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3740:	00000ca4 	andeq	r0, r0, r4, lsr #25
    3744:	0104e901 	tsteq	r4, r1, lsl #18
    3748:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    3754:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    3758:	22000008 	andcs	r0, r0, #8
    375c:	00796870 	rsbseq	r6, r9, r0, ror r8
    3760:	2f04e901 	svccs	0x0004e901
    3764:	00000081 	andeq	r0, r0, r1, lsl #1
    3768:	000010fc 	strdeq	r1, [r0], -ip
    376c:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    3770:	0b04ed01 	bleq	13eb7c <__ccfg+0x11ebd4>
    3774:	0000078a 	andeq	r0, r0, sl, lsl #15
    3778:	0000111a 	andeq	r1, r0, sl, lsl r1
    377c:	01006228 	tsteq	r0, r8, lsr #4
    3780:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    3784:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    3788:	00000011 	andeq	r0, r0, r1, lsl r0
    378c:	0d270121 	stfeqs	f0, [r7, #-132]!	; 0xffffff7c
    3790:	d2010000 	andle	r0, r1, #0
    3794:	16010104 	strne	r0, [r1], -r4, lsl #2
    3798:	00000001 	andeq	r0, r0, r1
    379c:	00000000 	andeq	r0, r0, r0
    37a0:	01000000 	mrseq	r0, (UNDEF: 0)
    37a4:	0009509c 	muleq	r9, ip, r0
    37a8:	68702200 	ldmdavs	r0!, {r9, sp}^
    37ac:	d2010079 	andle	r0, r1, #121	; 0x79
    37b0:	00812f04 	addeq	r2, r1, r4, lsl #30
    37b4:	114c0000 	mrsne	r0, (UNDEF: 76)
    37b8:	6c220000 	stcvs	0, cr0, [r2], #-0
    37bc:	01006e65 	tsteq	r0, r5, ror #28
    37c0:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    37c4:	6a000004 	bvs	37dc <__exidx_end+0xa50>
    37c8:	28000011 	stmdacs	r0, {r0, r4}
    37cc:	0100716f 	tsteq	r0, pc, ror #2
    37d0:	8a0b04d7 	bhi	2c4b34 <__ccfg+0x2a4b8c>
    37d4:	88000007 	stmdahi	r0, {r0, r1, r2}
    37d8:	28000011 	stmdacs	r0, {r0, r4}
    37dc:	d8010062 	stmdale	r1, {r1, r5, r6}
    37e0:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    37e4:	11a60000 			; <UNDEFINED> instruction: 0x11a60000
    37e8:	21000000 	mrscs	r0, (UNDEF: 0)
    37ec:	000f1301 	andeq	r1, pc, r1, lsl #6
    37f0:	04a10100 	strteq	r0, [r1], #256	; 0x100
    37f4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3800:	9c010000 	stcls	0, cr0, [r1], {-0}
    3804:	000009eb 	andeq	r0, r0, fp, ror #19
    3808:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    380c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3810:	0000812b 	andeq	r8, r0, fp, lsr #2
    3814:	0011d000 	andseq	sp, r1, r0
    3818:	00702200 	rsbseq	r2, r0, r0, lsl #4
    381c:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    3820:	00000116 	andeq	r0, r0, r6, lsl r1
    3824:	00001204 	andeq	r1, r0, r4, lsl #4
    3828:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    382c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3830:	0000813f 	andeq	r8, r0, pc, lsr r1
    3834:	00123800 	andseq	r3, r2, r0, lsl #16
    3838:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    383c:	a6010067 	strge	r0, [r1], -r7, rrx
    3840:	00810604 	addeq	r0, r1, r4, lsl #12
    3844:	64280000 	strtvs	r0, [r8], #-0
    3848:	01007073 	tsteq	r0, r3, ror r0
    384c:	810b04a6 	smlatbhi	fp, r6, r4, r0
    3850:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3854:	2a000012 	bcs	38a4 <__exidx_end+0xb18>
    3858:	00736573 	rsbseq	r6, r3, r3, ror r5
    385c:	1004a601 	andne	sl, r4, r1, lsl #12
    3860:	00000081 	andeq	r0, r0, r1, lsl #1
    3864:	2a509102 	bcs	1427c74 <__ccfg+0x1407ccc>
    3868:	01007061 	tsteq	r0, r1, rrx
    386c:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    3870:	02000003 	andeq	r0, r0, #3
    3874:	63285491 			; <UNDEFINED> instruction: 0x63285491
    3878:	04a80100 	strteq	r0, [r8], #256	; 0x100
    387c:	0001160a 	andeq	r1, r1, sl, lsl #12
    3880:	00128a00 	andseq	r8, r2, r0, lsl #20
    3884:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3888:	00000d03 	andeq	r0, r0, r3, lsl #26
    388c:	01048701 	tsteq	r4, r1, lsl #14
    3890:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    389c:	4a9c0100 	bmi	fe703ca4 <_estack+0xde6feca4>
    38a0:	2200000a 	andcs	r0, r0, #10
    38a4:	00796870 	rsbseq	r6, r9, r0, ror r8
    38a8:	2b048701 	blcs	1254b4 <__ccfg+0x10550c>
    38ac:	00000081 	andeq	r0, r0, r1, lsl #1
    38b0:	0000129d 	muleq	r0, sp, r2
    38b4:	00737022 	rsbseq	r7, r3, r2, lsr #32
    38b8:	3a048701 	bcc	1254c4 <__ccfg+0x10551c>
    38bc:	00000709 	andeq	r0, r0, r9, lsl #14
    38c0:	000012bb 			; <UNDEFINED> instruction: 0x000012bb
    38c4:	000d362b 	andeq	r3, sp, fp, lsr #12
    38c8:	04870100 	streq	r0, [r7], #256	; 0x100
    38cc:	00008142 	andeq	r8, r0, r2, asr #2
    38d0:	0012d900 	andseq	sp, r2, r0, lsl #18
    38d4:	00712800 	rsbseq	r2, r1, r0, lsl #16
    38d8:	0b048d01 	bleq	126ce4 <__ccfg+0x106d3c>
    38dc:	0000078a 	andeq	r0, r0, sl, lsl #15
    38e0:	000012f7 	strdeq	r1, [r0], -r7
    38e4:	ef012c00 	svc	0x00012c00
    38e8:	0100000d 	tsteq	r0, sp
    38ec:	01010386 	smlabbeq	r1, r6, r3, r0
    38f0:	00000116 	andeq	r0, r0, r6, lsl r1
    38f4:	000a9101 	andeq	r9, sl, r1, lsl #2
    38f8:	13b32d00 			; <UNDEFINED> instruction: 0x13b32d00
    38fc:	86010000 	strhi	r0, [r1], -r0
    3900:	00812d03 	addeq	r2, r1, r3, lsl #26
    3904:	642e0000 	strtvs	r0, [lr], #-0
    3908:	01007073 	tsteq	r0, r3, ror r0
    390c:	81370386 	teqhi	r7, r6, lsl #7
    3910:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3914:	00736573 	rsbseq	r6, r3, r3, ror r5
    3918:	40038601 	andmi	r8, r3, r1, lsl #12
    391c:	00000081 	andeq	r0, r0, r1, lsl #1
    3920:	01007029 	tsteq	r0, r9, lsr #32
    3924:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    3928:	00000008 	andeq	r0, r0, r8
    392c:	0cf60127 	ldfeqe	f0, [r6], #156	; 0x9c
    3930:	7f010000 	svcvc	0x00010000
    3934:	00010103 	andeq	r0, r1, r3, lsl #2
    3938:	00000000 	andeq	r0, r0, r0
    393c:	01000000 	mrseq	r0, (UNDEF: 0)
    3940:	000acb9c 	muleq	sl, ip, fp
    3944:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3948:	32037f01 	andcc	r7, r3, #1, 30
    394c:	00000116 	andeq	r0, r0, r6, lsl r1
    3950:	00001326 	andeq	r1, r0, r6, lsr #6
    3954:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    3958:	037f0100 	cmneq	pc, #0, 2
    395c:	00008139 	andeq	r8, r0, r9, lsr r1
    3960:	00133900 	andseq	r3, r3, r0, lsl #18
    3964:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3968:	00000e86 	andeq	r0, r0, r6, lsl #29
    396c:	01036b01 	tsteq	r3, r1, lsl #22
    3970:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    397c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    3980:	2200000b 	andcs	r0, r0, #11
    3984:	6b010070 	blvs	43b4c <__ccfg+0x23ba4>
    3988:	01163303 	tsteq	r6, r3, lsl #6
    398c:	134c0000 	movtne	r0, #49152	; 0xc000
    3990:	062b0000 	strteq	r0, [fp], -r0
    3994:	0100000f 	tsteq	r0, pc
    3998:	813a036b 	teqhi	sl, fp, ror #6
    399c:	6a000000 	bvs	39a4 <__exidx_end+0xc18>
    39a0:	28000013 	stmdacs	r0, {r0, r1, r4}
    39a4:	01006370 	tsteq	r0, r0, ror r3
    39a8:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    39ac:	88000008 	stmdahi	r0, {r3}
    39b0:	29000013 	stmdbcs	r0, {r0, r1, r4}
    39b4:	01007070 	tsteq	r0, r0, ror r0
    39b8:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    39bc:	00000008 	andeq	r0, r0, r8
    39c0:	0d690127 	stfeqe	f0, [r9, #-156]!	; 0xffffff64
    39c4:	63010000 	movwvs	r0, #4096	; 0x1000
    39c8:	00010103 	andeq	r0, r1, r3, lsl #2
    39cc:	00000000 	andeq	r0, r0, r0
    39d0:	01000000 	mrseq	r0, (UNDEF: 0)
    39d4:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    39d8:	00702200 	rsbseq	r2, r0, r0, lsl #4
    39dc:	31036301 	tstcc	r3, r1, lsl #6
    39e0:	00000116 	andeq	r0, r0, r6, lsl r1
    39e4:	000013a6 	andeq	r1, r0, r6, lsr #7
    39e8:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    39ec:	03630100 	cmneq	r3, #0, 2
    39f0:	00008138 	andeq	r8, r0, r8, lsr r1
    39f4:	0013c400 	andseq	ip, r3, r0, lsl #8
    39f8:	01270000 			; <UNDEFINED> instruction: 0x01270000
    39fc:	00000e91 	muleq	r0, r1, lr
    3a00:	01035a01 	tsteq	r3, r1, lsl #20
    3a04:	00000001 	andeq	r0, r0, r1
    3a08:	00000000 	andeq	r0, r0, r0
    3a0c:	999c0100 	ldmibls	ip, {r8}
    3a10:	2200000b 	andcs	r0, r0, #11
    3a14:	5a010070 	bpl	43bdc <__ccfg+0x23c34>
    3a18:	01163103 	tsteq	r6, r3, lsl #2
    3a1c:	13e20000 	mvnne	r0, #0
    3a20:	73220000 			; <UNDEFINED> instruction: 0x73220000
    3a24:	01007365 	tsteq	r0, r5, ror #6
    3a28:	8138035a 	teqhi	r8, sl, asr r3
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	00000014 	andeq	r0, r0, r4, lsl r0
    3a34:	0f45012c 	svceq	0x0045012c
    3a38:	52010000 	andpl	r0, r1, #0
    3a3c:	81010103 	tsthi	r1, r3, lsl #2
    3a40:	01000000 	mrseq	r0, (UNDEF: 0)
    3a44:	00000bd5 	ldrdeq	r0, [r0], -r5
    3a48:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    3a4c:	03520100 	cmpeq	r2, #0, 2
    3a50:	0000812d 	andeq	r8, r0, sp, lsr #2
    3a54:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    3a58:	52010074 	andpl	r0, r1, #116	; 0x74
    3a5c:	00813603 	addeq	r3, r1, r3, lsl #12
    3a60:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    3a64:	01006772 	tsteq	r0, r2, ror r7
    3a68:	16430352 			; <UNDEFINED> instruction: 0x16430352
    3a6c:	00000001 	andeq	r0, r0, r1
    3a70:	0caf0121 	stfeqs	f0, [pc], #132	; 3afc <__exidx_end+0xd70>
    3a74:	33010000 	movwcc	r0, #4096	; 0x1000
    3a78:	81010103 	tsthi	r1, r3, lsl #2
	...
    3a84:	01000000 	mrseq	r0, (UNDEF: 0)
    3a88:	000c3e9c 	muleq	ip, ip, lr
    3a8c:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3a90:	03330100 	teqeq	r3, #0, 2
    3a94:	0000812c 	andeq	r8, r0, ip, lsr #2
    3a98:	00141e00 	andseq	r1, r4, r0, lsl #28
    3a9c:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    3aa0:	33010074 	movwcc	r0, #4212	; 0x1074
    3aa4:	00813403 	addeq	r3, r1, r3, lsl #8
    3aa8:	145d0000 	ldrbne	r0, [sp], #-0
    3aac:	61220000 			; <UNDEFINED> instruction: 0x61220000
    3ab0:	01006772 	tsteq	r0, r2, ror r7
    3ab4:	16410333 			; <UNDEFINED> instruction: 0x16410333
    3ab8:	86000001 	strhi	r0, [r0], -r1
    3abc:	2f000014 	svccs	0x00000014
	...
    3ac8:	01007028 	tsteq	r0, r8, lsr #32
    3acc:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    3ad0:	af000007 	svcge	0x00000007
    3ad4:	00000014 	andeq	r0, r0, r4, lsl r0
    3ad8:	44012700 	strmi	r2, [r1], #-1792	; 0xfffff900
    3adc:	0100000d 	tsteq	r0, sp
    3ae0:	0101032b 	tsteq	r1, fp, lsr #6
	...
    3aec:	0c679c01 	stcleq	12, cr9, [r7], #-4
    3af0:	70220000 	eorvc	r0, r2, r0
    3af4:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    3af8:	0001162e 	andeq	r1, r1, lr, lsr #12
    3afc:	0014c200 	andseq	ip, r4, r0, lsl #4
    3b00:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3b04:	00000e1e 	andeq	r0, r0, lr, lsl lr
    3b08:	01031a01 	tsteq	r3, r1, lsl #20
    3b0c:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3b18:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    3b1c:	2200000c 	andcs	r0, r0, #12
    3b20:	1a010070 	bne	43ce8 <__ccfg+0x23d40>
    3b24:	01162e03 	tsteq	r6, r3, lsl #28
    3b28:	14e00000 	strbtne	r0, [r0], #0
    3b2c:	62220000 	eorvs	r0, r2, #0
    3b30:	01006675 	tsteq	r0, r5, ror r6
    3b34:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    3b38:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    3b3c:	22000014 	andcs	r0, r0, #20
    3b40:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3b44:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    3b48:	00000081 	andeq	r0, r0, r1, lsl #1
    3b4c:	00001511 	andeq	r1, r0, r1, lsl r5
    3b50:	01006229 	tsteq	r0, r9, lsr #4
    3b54:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    3b58:	00000008 	andeq	r0, r0, r8
    3b5c:	0e640121 	poweqsp	f0, f4, f1
    3b60:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3b64:	81010103 	tsthi	r1, r3, lsl #2
	...
    3b70:	01000000 	mrseq	r0, (UNDEF: 0)
    3b74:	000d1b9c 	muleq	sp, ip, fp
    3b78:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3b7c:	2d030801 	stccs	8, cr0, [r3, #-4]
    3b80:	00000116 	andeq	r0, r0, r6, lsl r1
    3b84:	0000152f 	andeq	r1, r0, pc, lsr #10
    3b88:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    3b8c:	03080100 	movweq	r0, #33024	; 0x8100
    3b90:	000d1b36 	andeq	r1, sp, r6, lsr fp
    3b94:	00154d00 	andseq	r4, r5, r0, lsl #26
    3b98:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    3b9c:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    3ba0:	00813f03 	addeq	r3, r1, r3, lsl #30
    3ba4:	156b0000 	strbne	r0, [fp, #-0]!
    3ba8:	62290000 	eorvs	r0, r9, #0
    3bac:	030c0100 	movweq	r0, #49408	; 0xc100
    3bb0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3bb4:	040a0000 	streq	r0, [sl], #-0
    3bb8:	000000e3 	andeq	r0, r0, r3, ror #1
    3bbc:	0e150121 	mufeqsp	f0, f5, f1
    3bc0:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3bc4:	16010102 	strne	r0, [r1], -r2, lsl #2
    3bc8:	00000001 	andeq	r0, r0, r1
    3bcc:	00000000 	andeq	r0, r0, r0
    3bd0:	01000000 	mrseq	r0, (UNDEF: 0)
    3bd4:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    3bd8:	0b9d2b00 	bleq	fe74e7e0 <_estack+0xde7497e0>
    3bdc:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3be0:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    3be4:	15890000 	strne	r0, [r9]
    3be8:	66220000 	strtvs	r0, [r2], -r0
    3bec:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    3bf0:	00813902 	addeq	r3, r1, r2, lsl #18
    3bf4:	15a70000 	strne	r0, [r7, #0]!
    3bf8:	ff2b0000 			; <UNDEFINED> instruction: 0xff2b0000
    3bfc:	0100000e 	tsteq	r0, lr
    3c00:	814102cd 	smlalbthi	r0, r1, sp, r2
    3c04:	d0000000 	andle	r0, r0, r0
    3c08:	22000015 	andcs	r0, r0, #21
    3c0c:	00677275 	rsbeq	r7, r7, r5, ror r2
    3c10:	1102ce01 	tstne	r2, r1, lsl #28
    3c14:	000000c1 	andeq	r0, r0, r1, asr #1
    3c18:	0000161a 	andeq	r1, r0, sl, lsl r6
    3c1c:	01006228 	tsteq	r0, r8, lsr #4
    3c20:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    3c24:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    3c28:	30000016 	andcc	r0, r0, r6, lsl r0
    3c2c:	00000e07 	andeq	r0, r0, r7, lsl #28
    3c30:	0b02d001 	bleq	b7c3c <__ccfg+0x97c94>
    3c34:	00000355 	andeq	r0, r0, r5, asr r3
    3c38:	2a649102 	bcs	1928048 <__ccfg+0x19080a0>
    3c3c:	d1010073 	tstle	r1, r3, ror r0
    3c40:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3c44:	57010000 	strpl	r0, [r1, -r0]
    3c48:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    3c4c:	02d20100 	sbcseq	r0, r2, #0, 2
    3c50:	00008106 	andeq	r8, r0, r6, lsl #2
    3c54:	00164b00 	andseq	r4, r6, r0, lsl #22
    3c58:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3c5c:	00000dd4 	ldrdeq	r0, [r0], -r4
    3c60:	0102a401 	tsteq	r2, r1, lsl #8
    3c64:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3c70:	729c0100 	addsvc	r0, ip, #0, 2
    3c74:	2200000e 	andcs	r0, r0, #14
    3c78:	01006466 	tsteq	r0, r6, ror #8
    3c7c:	812a02a4 	smulwbhi	sl, r4, r2
    3c80:	74000000 	strvc	r0, [r0], #-0
    3c84:	2b000016 	blcs	3ce4 <__exidx_end+0xf58>
    3c88:	00000f06 	andeq	r0, r0, r6, lsl #30
    3c8c:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    3c90:	00000081 	andeq	r0, r0, r1, lsl #1
    3c94:	000016a8 	andeq	r1, r0, r8, lsr #13
    3c98:	01007328 	tsteq	r0, r8, lsr #6
    3c9c:	400d02a8 	andmi	r0, sp, r8, lsr #5
    3ca0:	dc000007 	stcle	0, cr0, [r0], {7}
    3ca4:	28000016 	stmdacs	r0, {r1, r2, r4}
    3ca8:	0100716e 	tsteq	r0, lr, ror #2
    3cac:	810602a9 	smlatbhi	r6, r9, r2, r0
    3cb0:	41000000 	mrsmi	r0, (UNDEF: 0)
    3cb4:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3cb8:	01007172 	tsteq	r0, r2, ror r1
    3cbc:	8a0b02aa 	bhi	2c476c <__ccfg+0x2a47c4>
    3cc0:	5f000007 	svcpl	0x00000007
    3cc4:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3cc8:	ab010062 	blge	43e58 <__ccfg+0x23eb0>
    3ccc:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3cd0:	177d0000 	ldrbne	r0, [sp, -r0]!
    3cd4:	ba310000 	blt	c43cdc <__ccfg+0xc23d34>
    3cd8:	0100000d 	tsteq	r0, sp
    3cdc:	000102c0 	andeq	r0, r1, r0, asr #5
    3ce0:	32000000 	andcc	r0, r0, #0
    3ce4:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    3cf0:	0a02bb01 	beq	b28fc <__ccfg+0x92954>
    3cf4:	00116033 	andseq	r6, r1, r3, lsr r0
    3cf8:	116b2600 	cmnne	fp, r0, lsl #12
    3cfc:	17a60000 	strne	r0, [r6, r0]!
    3d00:	76260000 	strtvc	r0, [r6], -r0
    3d04:	b9000011 	stmdblt	r0, {r0, r4}
    3d08:	00000017 	andeq	r0, r0, r7, lsl r0
    3d0c:	87012100 	strhi	r2, [r1, -r0, lsl #2]
    3d10:	0100000c 	tsteq	r0, ip
    3d14:	0101027d 	tsteq	r1, sp, ror r2
    3d18:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3d24:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    3d28:	66220000 	strtvs	r0, [r2], -r0
    3d2c:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    3d30:	00812a02 	addeq	r2, r1, r2, lsl #20
    3d34:	17cc0000 	strbne	r0, [ip, r0]
    3d38:	062b0000 	strteq	r0, [fp], -r0
    3d3c:	0100000f 	tsteq	r0, pc
    3d40:	8132027d 	teqhi	r2, sp, ror r2
    3d44:	00000000 	andeq	r0, r0, r0
    3d48:	28000018 	stmdacs	r0, {r3, r4}
    3d4c:	81010073 	tsthi	r1, r3, ror r0
    3d50:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3d54:	18290000 	stmdane	r9!, {}	; <UNPREDICTABLE>
    3d58:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    3d5c:	82010071 	andhi	r0, r1, #113	; 0x71
    3d60:	00810602 	addeq	r0, r1, r2, lsl #12
    3d64:	188e0000 	stmne	lr, {}	; <UNPREDICTABLE>
    3d68:	72280000 	eorvc	r0, r8, #0
    3d6c:	83010071 	movwhi	r0, #4209	; 0x1071
    3d70:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3d74:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    3d78:	62280000 	eorvs	r0, r8, #0
    3d7c:	02840100 	addeq	r0, r4, #0, 2
    3d80:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3d84:	0018d500 	andseq	sp, r8, r0, lsl #10
    3d88:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3d8c:	00000f0b 	andeq	r0, r0, fp, lsl #30
    3d90:	01025601 	tsteq	r2, r1, lsl #12
    3d94:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    3da0:	5c9c0100 	ldfpls	f0, [ip], {0}
    3da4:	2b00000f 	blcs	3de8 <__exidx_end+0x105c>
    3da8:	00000b9d 	muleq	r0, sp, fp
    3dac:	2d025601 	stccs	6, cr5, [r2, #-4]
    3db0:	000000cd 	andeq	r0, r0, sp, asr #1
    3db4:	00001909 	andeq	r1, r0, r9, lsl #18
    3db8:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3dbc:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    3dc0:	00000081 	andeq	r0, r0, r1, lsl #1
    3dc4:	0000191c 	andeq	r1, r0, ip, lsl r9
    3dc8:	01007028 	tsteq	r0, r8, lsr #32
    3dcc:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    3dd0:	5b000001 	blpl	3ddc <__exidx_end+0x1050>
    3dd4:	28000019 	stmdacs	r0, {r0, r3, r4}
    3dd8:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    3ddc:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3de0:	196e0000 	stmdbne	lr!, {}^	; <UNPREDICTABLE>
    3de4:	72280000 	eorvc	r0, r8, #0
    3de8:	5f010071 	svcpl	0x00010071
    3dec:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3df0:	19970000 	ldmibne	r7, {}	; <UNPREDICTABLE>
    3df4:	21000000 	mrscs	r0, (UNDEF: 0)
    3df8:	000ed101 	andeq	sp, lr, r1, lsl #2
    3dfc:	024a0100 	subeq	r0, sl, #0, 2
    3e00:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3e0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e10:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    3e14:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    3e18:	024a0100 	subeq	r0, sl, #0, 2
    3e1c:	00008129 	andeq	r8, r0, r9, lsr #2
    3e20:	0019d100 	andseq	sp, r9, r0, lsl #2
    3e24:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    3e28:	024a0100 	subeq	r0, sl, #0, 2
    3e2c:	0007d43f 	andeq	sp, r7, pc, lsr r4
    3e30:	00510100 	subseq	r0, r1, r0, lsl #2
    3e34:	0e300121 	rsfeqsp	f0, f0, f1
    3e38:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3e3c:	81010102 	tsthi	r1, r2, lsl #2
	...
    3e48:	01000000 	mrseq	r0, (UNDEF: 0)
    3e4c:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    3e50:	0b9d2b00 	bleq	fe74ea58 <_estack+0xde749a58>
    3e54:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3e58:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    3e5c:	19ef0000 	stmibne	pc!, {}^	; <UNPREDICTABLE>
    3e60:	66220000 	strtvs	r0, [r2], -r0
    3e64:	29010064 	stmdbcs	r1, {r2, r5, r6}
    3e68:	00813602 	addeq	r3, r1, r2, lsl #12
    3e6c:	1a0d0000 	bne	343e74 <__ccfg+0x323ecc>
    3e70:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3e74:	022b0100 	eoreq	r0, fp, #0, 2
    3e78:	0007400d 	andeq	r4, r7, sp
    3e7c:	001a5700 	andseq	r5, sl, r0, lsl #14
    3e80:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3e84:	0c022c01 	stceq	12, cr2, [r2], {1}
    3e88:	0000089d 	muleq	r0, sp, r8
    3e8c:	00001a6a 	andeq	r1, r0, sl, ror #20
    3e90:	3b012100 	blcc	4c298 <__ccfg+0x2c2f0>
    3e94:	0100000d 	tsteq	r0, sp
    3e98:	010101f6 	strdeq	r0, [r1, -r6]
    3e9c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3ea8:	10839c01 	addne	r9, r3, r1, lsl #24
    3eac:	9d2b0000 	stcls	0, cr0, [fp, #-0]
    3eb0:	0100000b 	tsteq	r0, fp
    3eb4:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    3eb8:	7d000000 	stcvc	0, cr0, [r0, #-0]
    3ebc:	2200001a 	andcs	r0, r0, #26
    3ec0:	00796870 	rsbseq	r6, r9, r0, ror r8
    3ec4:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    3ec8:	00000081 	andeq	r0, r0, r1, lsl #1
    3ecc:	00001aa6 	andeq	r1, r0, r6, lsr #21
    3ed0:	000e9d2b 	andeq	r9, lr, fp, lsr #26
    3ed4:	01f60100 	mvnseq	r0, r0, lsl #2
    3ed8:	0000813e 	andeq	r8, r0, lr, lsr r1
    3edc:	001afb00 	andseq	pc, sl, r0, lsl #22
    3ee0:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    3ee4:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    3ee8:	00810601 	addeq	r0, r1, r1, lsl #12
    3eec:	1b330000 	blne	cc3ef4 <__ccfg+0xca3f4c>
    3ef0:	a8360000 	ldmdage	r6!, {}	; <UNPREDICTABLE>
    3ef4:	0100000d 	tsteq	r0, sp
    3ef8:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    3efc:	28000005 	stmdacs	r0, {r0, r2}
    3f00:	fa010073 	blx	440d4 <__ccfg+0x2412c>
    3f04:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    3f08:	1b510000 	blne	1443f10 <__ccfg+0x1423f68>
    3f0c:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    3f10:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    3f14:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    3f18:	91020000 	mrsls	r0, (UNDEF: 2)
    3f1c:	01270054 	qsubeq	r0, r4, r7
    3f20:	00000dde 	ldrdeq	r0, [r0], -lr
    3f24:	01013b01 	tsteq	r1, r1, lsl #22
    3f28:	00000001 	andeq	r0, r0, r1
    3f2c:	00000000 	andeq	r0, r0, r0
    3f30:	bb9c0100 	bllt	fe704338 <_estack+0xde6ff338>
    3f34:	22000010 	andcs	r0, r0, #16
    3f38:	3b010070 	blcc	44100 <__ccfg+0x24158>
    3f3c:	01162e01 	tsteq	r6, r1, lsl #28
    3f40:	1b9b0000 	blne	fe6c3f48 <_estack+0xde6bef48>
    3f44:	62280000 	eorvs	r0, r8, #0
    3f48:	01410100 	mrseq	r0, (UNDEF: 81)
    3f4c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3f50:	001bc400 	andseq	ip, fp, r0, lsl #8
    3f54:	61370000 	teqvs	r7, r0
    3f58:	01006270 	tsteq	r0, r0, ror r2
    3f5c:	01010114 	tsteq	r1, r4, lsl r1
    3f60:	0000089d 	muleq	r0, sp, r8
	...
    3f6c:	11029c01 	tstne	r2, r1, lsl #24
    3f70:	b32b0000 			; <UNDEFINED> instruction: 0xb32b0000
    3f74:	01000013 	tsteq	r0, r3, lsl r0
    3f78:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    3f7c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3f80:	2a00001b 	bcs	3ff4 <__exidx_end+0x1268>
    3f84:	19010070 	stmdbne	r1, {r4, r5, r6}
    3f88:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    3f8c:	50010000 	andpl	r0, r1, r0
    3f90:	00736329 	rsbseq	r6, r3, r9, lsr #6
    3f94:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    3f98:	000000cd 	andeq	r0, r0, sp, asr #1
    3f9c:	6c723800 	ldclvs	8, cr3, [r2], #-0
    3fa0:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    3fa4:	00010101 	andeq	r0, r1, r1, lsl #2
    3fa8:	00000000 	andeq	r0, r0, r0
    3fac:	01000000 	mrseq	r0, (UNDEF: 0)
    3fb0:	00112a9c 	mulseq	r1, ip, sl
    3fb4:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3fb8:	2b010401 	blcs	44fc4 <__ccfg+0x2501c>
    3fbc:	0000089d 	muleq	r0, sp, r8
    3fc0:	00001c0b 	andeq	r1, r0, fp, lsl #24
    3fc4:	0cfb3900 			; <UNDEFINED> instruction: 0x0cfb3900
    3fc8:	e0010000 	and	r0, r1, r0
    3fcc:	4e010101 	adfmis	f0, f1, f1
    3fd0:	3a000011 	bcc	401c <__exidx_end+0x1290>
    3fd4:	e0010070 	and	r0, r1, r0, ror r0
    3fd8:	00089d2f 	andeq	r9, r8, pc, lsr #26
    3fdc:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    3fe0:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    3fe4:	00000081 	andeq	r0, r0, r1, lsl #1
    3fe8:	0d563b00 	vldreq	d19, [r6, #-0]
    3fec:	cf010000 	svcgt	0x00010000
    3ff0:	00810101 	addeq	r0, r1, r1, lsl #2
    3ff4:	81010000 	mrshi	r0, (UNDEF: 1)
    3ff8:	3a000011 	bcc	4044 <__exidx_end+0x12b8>
    3ffc:	0100716f 	tsteq	r0, pc, ror #2
    4000:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    4004:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    4008:	d3010071 	movwle	r0, #4209	; 0x1071
    400c:	00008106 	andeq	r8, r0, r6, lsl #2
    4010:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    4014:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    4018:	00000008 	andeq	r0, r0, r8
    401c:	716e653d 	cmnvc	lr, sp, lsr r5
    4020:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    4024:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    4028:	713a0000 	teqvc	sl, r0
    402c:	2aa80100 	bcs	fea04434 <_estack+0xde9ff434>
    4030:	0000078a 	andeq	r0, r0, sl, lsl #15
    4034:	0100703a 	tsteq	r0, sl, lsr r0
    4038:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    403c:	3d000000 	stccc	0, cr0, [r0, #-0]
    4040:	00716564 	rsbseq	r6, r1, r4, ror #10
    4044:	01017f01 	tsteq	r1, r1, lsl #30
    4048:	0011bd01 	andseq	fp, r1, r1, lsl #26
    404c:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    4050:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    4054:	00000008 	andeq	r0, r0, r8
    4058:	0011a43e 	andseq	sl, r1, lr, lsr r4
	...
    4064:	f29c0100 	vaddw.s16	q0, q6, d0
    4068:	3f000011 	svccc	0x00000011
    406c:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4070:	a4405001 	strbge	r5, [r0], #-1
    4074:	00000011 	andeq	r0, r0, r1, lsl r0
    4078:	00000000 	andeq	r0, r0, r0
    407c:	01000000 	mrseq	r0, (UNDEF: 0)
    4080:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    4084:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    4088:	0000001c 	andeq	r0, r0, ip, lsl r0
    408c:	11813e00 	orrne	r3, r1, r0, lsl #28
	...
    4098:	9c010000 	stcls	0, cr0, [r1], {-0}
    409c:	0000123b 	andeq	r1, r0, fp, lsr r2
    40a0:	00118f24 	andseq	r8, r1, r4, lsr #30
    40a4:	001c3100 	andseq	r3, ip, r0, lsl #2
    40a8:	11992400 	orrsne	r2, r9, r0, lsl #8
    40ac:	1c650000 	stclne	0, cr0, [r5], #-0
    40b0:	81400000 	mrshi	r0, (UNDEF: 64)
    40b4:	00000011 	andeq	r0, r0, r1, lsl r0
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	01000000 	mrseq	r0, (UNDEF: 0)
    40c0:	8f2401a8 	svchi	0x002401a8
    40c4:	99000011 	stmdbls	r0, {r0, r4}
    40c8:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    40cc:	00001199 	muleq	r0, r9, r1
    40d0:	00001cb7 			; <UNDEFINED> instruction: 0x00001cb7
    40d4:	2a3e0000 	bcs	f840dc <__ccfg+0xf64134>
    40d8:	00000011 	andeq	r0, r0, r1, lsl r0
    40dc:	00000000 	andeq	r0, r0, r0
    40e0:	01000000 	mrseq	r0, (UNDEF: 0)
    40e4:	0012809c 	mulseq	r2, ip, r0
    40e8:	11382400 	teqne	r8, r0, lsl #8
    40ec:	1cd50000 	ldclne	0, cr0, [r5], {0}
    40f0:	42240000 	eormi	r0, r4, #0
    40f4:	2a000011 	bcs	4140 <__exidx_end+0x13b4>
    40f8:	4100001d 	tstmi	r0, sp, lsl r0
    40fc:	0000112a 	andeq	r1, r0, sl, lsr #2
    4100:	00000000 	andeq	r0, r0, r0
    4104:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4108:	3301e001 	movwcc	lr, #4097	; 0x1001
    410c:	00001142 	andeq	r1, r0, r2, asr #2
    4110:	00113824 	andseq	r3, r1, r4, lsr #16
    4114:	001d3d00 	andseq	r3, sp, r0, lsl #26
    4118:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    411c:	00000b99 	muleq	r0, r9, fp
	...
    4128:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    412c:	ad240000 	stcge	0, cr0, [r4, #-0]
    4130:	5b00000b 	blpl	4164 <__exidx_end+0x13d8>
    4134:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4138:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    413c:	00001d79 	andeq	r1, r0, r9, ror sp
    4140:	000bc724 	andeq	ip, fp, r4, lsr #14
    4144:	001da200 	andseq	sl, sp, r0, lsl #4
    4148:	0b993200 	bleq	fe650950 <_estack+0xde64b950>
	...
    4154:	52010000 	andpl	r0, r1, #0
    4158:	ad330103 	ldfges	f0, [r3, #-12]!
    415c:	2400000b 	strcs	r0, [r0], #-11
    4160:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4164:	00001dcb 	andeq	r1, r0, fp, asr #27
    4168:	000bc724 	andeq	ip, fp, r4, lsr #14
    416c:	001dde00 	andseq	sp, sp, r0, lsl #28
    4170:	42000000 	andmi	r0, r0, #0
    4174:	00000a4a 	andeq	r0, r0, sl, asr #20
	...
    4180:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    4184:	f100000a 	cps	#10
    4188:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    418c:	00000a6b 	andeq	r0, r0, fp, ror #20
    4190:	00001e04 	andeq	r1, r0, r4, lsl #28
    4194:	000a7824 	andeq	r7, sl, r4, lsr #16
    4198:	001e6400 	andseq	r6, lr, r0, lsl #8
    419c:	0a852600 	beq	fe14d9a4 <_estack+0xde1489a4>
    41a0:	1eae0000 	cdpne	0, 10, cr0, cr14, cr0, {0}
    41a4:	4a320000 	bmi	c841ac <__ccfg+0xc64204>
    41a8:	0000000a 	andeq	r0, r0, sl
    41ac:	00000000 	andeq	r0, r0, r0
    41b0:	01000000 	mrseq	r0, (UNDEF: 0)
    41b4:	33010386 	movwcc	r0, #4998	; 0x1386
    41b8:	00000a5e 	andeq	r0, r0, lr, asr sl
    41bc:	000a6b24 	andeq	r6, sl, r4, lsr #22
    41c0:	001ee200 	andseq	lr, lr, r0, lsl #4
    41c4:	0a783300 	beq	1e10dcc <__ccfg+0x1df0e24>
    41c8:	85430000 	strbhi	r0, [r3, #-0]
    41cc:	0000000a 	andeq	r0, r0, sl
    41d0:	01740000 	cmneq	r4, r0
    41d4:	00030000 	andeq	r0, r3, r0
    41d8:	0000104a 	andeq	r1, r0, sl, asr #32
    41dc:	016d0104 	cmneq	sp, r4, lsl #2
    41e0:	930c0000 	movwls	r0, #49152	; 0xc000
    41e4:	db00000f 	blle	4228 <__exidx_end+0x149c>
    41e8:	00000000 	andeq	r0, r0, r0
    41ec:	00000009 	andeq	r0, r0, r9
    41f0:	7a000000 	bvc	41f8 <__exidx_end+0x146c>
    41f4:	02000035 	andeq	r0, r0, #53	; 0x35
    41f8:	03b20601 			; <UNDEFINED> instruction: 0x03b20601
    41fc:	02020000 	andeq	r0, r2, #0
    4200:	0003ec05 	andeq	lr, r3, r5, lsl #24
    4204:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4208:	000000a4 	andeq	r0, r0, r4, lsr #1
    420c:	9f050802 	svcls	0x00050802
    4210:	02000000 	andeq	r0, r0, #0
    4214:	03b00801 	movseq	r0, #65536	; 0x10000
    4218:	02020000 	andeq	r0, r2, #0
    421c:	00026e07 	andeq	r6, r2, r7, lsl #28
    4220:	17cf0300 	strbne	r0, [pc, r0, lsl #6]
    4224:	34020000 	strcc	r0, [r2], #-0
    4228:	00005b19 	andeq	r5, r0, r9, lsl fp
    422c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4230:	00000079 	andeq	r0, r0, r9, ror r0
    4234:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    4238:	04000000 	streq	r0, [r0], #-0
    423c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4240:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4244:	00007e07 	andeq	r7, r0, r7, lsl #28
    4248:	82040500 	andhi	r0, r4, #0, 10
    424c:	06000000 	streq	r0, [r0], -r0
    4250:	00000077 	andeq	r0, r0, r7, ror r0
    4254:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    4258:	0000004f 	andeq	r0, r0, pc, asr #32
    425c:	000f8608 	andeq	r8, pc, r8, lsl #12
    4260:	117f0100 	cmnne	pc, r0, lsl #2
    4264:	0000004f 	andeq	r0, r0, pc, asr #32
    4268:	5a080101 	bpl	204674 <__ccfg+0x1e46cc>
    426c:	0100000f 	tsteq	r0, pc
    4270:	004f1180 	subeq	r1, pc, r0, lsl #3
    4274:	01010000 	mrseq	r0, (UNDEF: 1)
    4278:	000fd608 	andeq	sp, pc, r8, lsl #12
    427c:	11810100 	orrne	r0, r1, r0, lsl #2
    4280:	0000004f 	andeq	r0, r0, pc, asr #32
    4284:	d1080101 	tstle	r8, r1, lsl #2
    4288:	0100000f 	tsteq	r0, pc
    428c:	004f1182 	subeq	r1, pc, r2, lsl #3
    4290:	01010000 	mrseq	r0, (UNDEF: 1)
    4294:	000f8d08 	andeq	r8, pc, r8, lsl #26
    4298:	11830100 	orrne	r0, r3, r0, lsl #2
    429c:	0000004f 	andeq	r0, r0, pc, asr #32
    42a0:	52080101 	andpl	r0, r8, #1073741824	; 0x40000000
    42a4:	0100000f 	tsteq	r0, pc
    42a8:	004f1184 	subeq	r1, pc, r4, lsl #3
    42ac:	01010000 	mrseq	r0, (UNDEF: 1)
    42b0:	00007d09 	andeq	r7, r0, r9, lsl #26
    42b4:	0000ee00 	andeq	lr, r0, r0, lsl #28
    42b8:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    42bc:	00310000 	eorseq	r0, r1, r0
    42c0:	0000de06 	andeq	sp, r0, r6, lsl #28
    42c4:	0fef0b00 	svceq	0x00ef0b00
    42c8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    42cc:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    42d0:	03050100 	movweq	r0, #20736	; 0x5100
    42d4:	00000000 	andeq	r0, r0, r0
    42d8:	000fdd0c 	andeq	sp, pc, ip, lsl #26
    42dc:	01280100 			; <UNDEFINED> instruction: 0x01280100
    42e0:	15020101 	strne	r0, [r2, #-257]	; 0xfffffeff
    42e4:	15040000 	strne	r0, [r4, #-0]
    42e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    42ec:	000f690c 	andeq	r6, pc, ip, lsl #18
    42f0:	01160100 	tsteq	r6, r0, lsl #2
    42f4:	15000101 	strne	r0, [r0, #-257]	; 0xfffffeff
    42f8:	15020000 	strne	r0, [r2, #-0]
    42fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4300:	000f790c 	andeq	r7, pc, ip, lsl #18
    4304:	01040100 	mrseq	r0, (UNDEF: 20)
    4308:	14fe0101 	ldrbtne	r0, [lr], #257	; 0x101
    430c:	15000000 	strne	r0, [r0, #-0]
    4310:	9c010000 	stcls	0, cr0, [r1], {-0}
    4314:	1006010d 	andne	r0, r6, sp, lsl #2
    4318:	d2010000 	andle	r0, r1, #0
    431c:	15040101 	strne	r0, [r4, #-257]	; 0xfffffeff
    4320:	15480000 	strbne	r0, [r8, #-0]
    4324:	9c010000 	stcls	0, cr0, [r1], {-0}
    4328:	000f600e 	andeq	r6, pc, lr
    432c:	0fd40100 	svceq	0x00d40100
    4330:	00000084 	andeq	r0, r0, r4, lsl #1
    4334:	00001ef5 	strdeq	r1, [r0], -r5
    4338:	000ffc0e 	andeq	pc, pc, lr, lsl #24
    433c:	1ad40100 	bne	ff504744 <_estack+0xdf4ff744>
    4340:	00000084 	andeq	r0, r0, r4, lsl #1
    4344:	00001f13 	andeq	r1, r0, r3, lsl pc
    4348:	05370000 	ldreq	r0, [r7, #-0]!
    434c:	00030000 	andeq	r0, r3, r0
    4350:	0000110f 	andeq	r1, r0, pc, lsl #2
    4354:	016d0104 	cmneq	sp, r4, lsl #2
    4358:	660c0000 	strvs	r0, [ip], -r0
    435c:	db000010 	blle	43a4 <__exidx_end+0x1618>
    4360:	a1000000 	mrsge	r0, (UNDEF: 0)
    4364:	02000036 	andeq	r0, r0, #54	; 0x36
    4368:	03b20601 			; <UNDEFINED> instruction: 0x03b20601
    436c:	02020000 	andeq	r0, r2, #0
    4370:	0003ec05 	andeq	lr, r3, r5, lsl #24
    4374:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4378:	000000a4 	andeq	r0, r0, r4, lsr #1
    437c:	9f050802 	svcls	0x00050802
    4380:	03000000 	movweq	r0, #0
    4384:	00002218 	andeq	r2, r0, r8, lsl r2
    4388:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    438c:	02000000 	andeq	r0, r0, #0
    4390:	03b00801 	movseq	r0, #65536	; 0x10000
    4394:	06030000 	streq	r0, [r3], -r0
    4398:	01000021 	tsteq	r0, r1, lsr #32
    439c:	00581931 	subseq	r1, r8, r1, lsr r9
    43a0:	02020000 	andeq	r0, r2, #0
    43a4:	00026e07 	andeq	r6, r2, r7, lsl #28
    43a8:	17cf0300 	strbne	r0, [pc, r0, lsl #6]
    43ac:	34010000 	strcc	r0, [r1], #-0
    43b0:	00006b19 	andeq	r6, r0, r9, lsl fp
    43b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    43b8:	00000079 	andeq	r0, r0, r9, ror r0
    43bc:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    43c0:	04000000 	streq	r0, [r0], #-0
    43c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    43c8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    43cc:	00007e07 	andeq	r7, r0, r7, lsl #28
    43d0:	02580500 	subseq	r0, r8, #0, 10
    43d4:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    43d8:	c0060000 	andgt	r0, r6, r0
    43dc:	02000011 	andeq	r0, r0, #17
    43e0:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    43e4:	06000000 	streq	r0, [r0], -r0
    43e8:	000010d5 	ldrdeq	r1, [r0], -r5
    43ec:	5f103202 	svcpl	0x00103202
    43f0:	04000000 	streq	r0, [r0], #-0
    43f4:	00109d06 	andseq	r9, r0, r6, lsl #26
    43f8:	10330200 	eorsne	r0, r3, r0, lsl #4
    43fc:	0000005f 	andeq	r0, r0, pc, asr r0
    4400:	10500608 	subsne	r0, r0, r8, lsl #12
    4404:	34020000 	strcc	r0, [r2], #-0
    4408:	00005f10 	andeq	r5, r0, r0, lsl pc
    440c:	0f060c00 	svceq	0x00060c00
    4410:	02000010 	andeq	r0, r0, #16
    4414:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    4418:	06100000 	ldreq	r0, [r0], -r0
    441c:	00001020 	andeq	r1, r0, r0, lsr #32
    4420:	5f103602 	svcpl	0x00103602
    4424:	14000000 	strne	r0, [r0], #-0
    4428:	00104006 	andseq	r4, r0, r6
    442c:	10370200 	eorsne	r0, r7, r0, lsl #4
    4430:	0000005f 	andeq	r0, r0, pc, asr r0
    4434:	11650618 	cmnne	r5, r8, lsl r6
    4438:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    443c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4440:	b5061c00 	strlt	r1, [r6, #-3072]	; 0xfffff400
    4444:	02000010 	andeq	r0, r0, #16
    4448:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    444c:	06200000 	strteq	r0, [r0], -r0
    4450:	000010c5 	andeq	r1, r0, r5, asr #1
    4454:	5f103a02 	svcpl	0x00103a02
    4458:	24000000 	strcs	r0, [r0], #-0
    445c:	00118b06 	andseq	r8, r1, r6, lsl #22
    4460:	103b0200 	eorsne	r0, fp, r0, lsl #4
    4464:	0000005f 	andeq	r0, r0, pc, asr r0
    4468:	119b0628 	orrsne	r0, fp, r8, lsr #12
    446c:	3c020000 	stccc	0, cr0, [r2], {-0}
    4470:	00005f10 	andeq	r5, r0, r0, lsl pc
    4474:	31062c00 	tstcc	r6, r0, lsl #24
    4478:	02000010 	andeq	r0, r0, #16
    447c:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    4480:	06300000 	ldrteq	r0, [r0], -r0
    4484:	0000112b 	andeq	r1, r0, fp, lsr #2
    4488:	5f103e02 	svcpl	0x00103e02
    448c:	34000000 	strcc	r0, [r0], #-0
    4490:	0011d006 	andseq	sp, r1, r6
    4494:	103f0200 	eorsne	r0, pc, r0, lsl #4
    4498:	0000005f 	andeq	r0, r0, pc, asr r0
    449c:	10e60638 	rscne	r0, r6, r8, lsr r6
    44a0:	40020000 	andmi	r0, r2, r0
    44a4:	00005f10 	andeq	r5, r0, r0, lsl pc
    44a8:	fa063c00 	blx	1934b0 <__ccfg+0x173508>
    44ac:	02000010 	andeq	r0, r0, #16
    44b0:	005f1041 	subseq	r1, pc, r1, asr #32
    44b4:	06400000 	strbeq	r0, [r0], -r0
    44b8:	0000114f 	andeq	r1, r0, pc, asr #2
    44bc:	5f104202 	svcpl	0x00104202
    44c0:	44000000 	strmi	r0, [r0], #-0
    44c4:	00113b06 	andseq	r3, r1, r6, lsl #22
    44c8:	10430200 	subne	r0, r3, r0, lsl #4
    44cc:	0000005f 	andeq	r0, r0, pc, asr r0
    44d0:	11760648 	cmnne	r6, r8, asr #12
    44d4:	44020000 	strmi	r0, [r2], #-0
    44d8:	00005f10 	andeq	r5, r0, r0, lsl pc
    44dc:	ab064c00 	blge	1974e4 <__ccfg+0x17753c>
    44e0:	02000011 	andeq	r0, r0, #17
    44e4:	005f1045 	subseq	r1, pc, r5, asr #32
    44e8:	06500000 	ldrbeq	r0, [r0], -r0
    44ec:	00001115 	andeq	r1, r0, r5, lsl r1
    44f0:	5f104602 	svcpl	0x00104602
    44f4:	54000000 	strpl	r0, [r0], #-0
    44f8:	110e0300 	mrsne	r0, ELR_hyp
    44fc:	47020000 	strmi	r0, [r2, -r0]
    4500:	00008703 	andeq	r8, r0, r3, lsl #14
    4504:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    4508:	5f080000 	svcpl	0x00080000
    450c:	02000010 	andeq	r0, r0, #16
    4510:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    4514:	01010000 	mrseq	r0, (UNDEF: 1)
    4518:	0015dc03 	andseq	sp, r5, r3, lsl #24
    451c:	12270300 	eorne	r0, r7, #0, 6
    4520:	0000004c 	andeq	r0, r0, ip, asr #32
    4524:	0001ce07 	andeq	ip, r1, r7, lsl #28
    4528:	01ce0900 	biceq	r0, lr, r0, lsl #18
    452c:	d4030000 	strle	r0, [r3], #-0
    4530:	03000013 	movweq	r0, #19
    4534:	0039122b 	eorseq	r1, r9, fp, lsr #4
    4538:	e4090000 	str	r0, [r9], #-0
    453c:	03000001 	movweq	r0, #1
    4540:	0000162d 	andeq	r1, r0, sp, lsr #12
    4544:	5f122c03 	svcpl	0x00122c03
    4548:	07000000 	streq	r0, [r0, -r0]
    454c:	000001f5 	strdeq	r0, [r0], -r5
    4550:	0002a103 	andeq	sl, r2, r3, lsl #2
    4554:	122d0300 	eorne	r0, sp, #0, 6
    4558:	0000005f 	andeq	r0, r0, pc, asr r0
    455c:	32030805 	andcc	r0, r3, #327680	; 0x50000
    4560:	0002a009 	andeq	sl, r2, r9
    4564:	02bc0a00 	adcseq	r0, ip, #0, 20
    4568:	34030000 	strcc	r0, [r3], #-0
    456c:	0001e407 	andeq	lr, r1, r7, lsl #8
    4570:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4574:	00980a00 	addseq	r0, r8, r0, lsl #20
    4578:	35030000 	strcc	r0, [r3, #-0]
    457c:	0001e403 	andeq	lr, r1, r3, lsl #8
    4580:	06010100 	streq	r0, [r1], -r0, lsl #2
    4584:	028a0a00 	addeq	r0, sl, #0, 20
    4588:	36030000 	strcc	r0, [r3], -r0
    458c:	0001e403 	andeq	lr, r1, r3, lsl #8
    4590:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4594:	041b0a00 	ldreq	r0, [fp], #-2560	; 0xfffff600
    4598:	37030000 	strcc	r0, [r3, -r0]
    459c:	0001e403 	andeq	lr, r1, r3, lsl #8
    45a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    45a4:	04140a00 	ldreq	r0, [r4], #-2560	; 0xfffff600
    45a8:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    45ac:	0001e403 	andeq	lr, r1, r3, lsl #8
    45b0:	00040100 	andeq	r0, r4, r0, lsl #2
    45b4:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    45b8:	3a030000 	bcc	c45c0 <__ccfg+0xa4618>
    45bc:	0001e407 	andeq	lr, r1, r7, lsl #8
    45c0:	40060100 	andmi	r0, r6, r0, lsl #2
    45c4:	03000000 	movweq	r0, #0
    45c8:	01e4033c 	mvneq	r0, ip, lsr r3
    45cc:	06020000 	streq	r0, [r2], -r0
    45d0:	0000006d 	andeq	r0, r0, sp, rrx
    45d4:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    45d8:	03000001 	movweq	r0, #1
    45dc:	00015306 	andeq	r5, r1, r6, lsl #6
    45e0:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    45e4:	000001f5 	strdeq	r0, [r0], -r5
    45e8:	44030004 	strmi	r0, [r3], #-4
    45ec:	03000004 	movweq	r0, #4
    45f0:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    45f4:	a0090000 	andge	r0, r9, r0
    45f8:	08000002 	stmdaeq	r0, {r1}
    45fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    4600:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    4604:	01000002 	tsteq	r0, r2
    4608:	031c0801 	tsteq	ip, #65536	; 0x10000
    460c:	45030000 	strmi	r0, [r3, #-0]
    4610:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    4614:	0b010100 	bleq	44a1c <__ccfg+0x24a74>
    4618:	0002d304 	andeq	sp, r2, r4, lsl #6
    461c:	08010200 	stmdaeq	r1, {r9}
    4620:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    4624:	0002d307 	andeq	sp, r2, r7, lsl #6
    4628:	032a0800 			; <UNDEFINED> instruction: 0x032a0800
    462c:	45030000 	strmi	r0, [r3, #-0]
    4630:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    4634:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4638:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    463c:	0000031e 	andeq	r0, r0, lr, lsl r3
    4640:	0002c306 	andeq	ip, r2, r6, lsl #6
    4644:	0b900400 	bleq	fe40564c <_estack+0xde40064c>
    4648:	0000005f 	andeq	r0, r0, pc, asr r0
    464c:	06090600 	streq	r0, [r9], -r0, lsl #12
    4650:	91040000 	mrsls	r0, (UNDEF: 4)
    4654:	0001ce08 	andeq	ip, r1, r8, lsl #28
    4658:	87060400 	strhi	r0, [r6, -r0, lsl #8]
    465c:	04000004 	streq	r0, [r0], #-4
    4660:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    4664:	00060000 	andeq	r0, r6, r0
    4668:	00042203 	andeq	r2, r4, r3, lsl #4
    466c:	03930400 	orrseq	r0, r3, #0, 8
    4670:	000002ed 	andeq	r0, r0, sp, ror #5
    4674:	00031e0c 	andeq	r1, r3, ip, lsl #28
    4678:	00033500 	andeq	r3, r3, r0, lsl #10
    467c:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    4680:	00000036 	andeq	r0, r0, r6, lsr r0
    4684:	2a0f9904 	bcs	3eaa9c <__ccfg+0x3caaf4>
    4688:	01000003 	tsteq	r0, r3
    468c:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    4690:	036d0991 	cmneq	sp, #2375680	; 0x244000
    4694:	7a0a0000 	bvc	28469c <__ccfg+0x2646f4>
    4698:	05000004 	streq	r0, [r0, #-4]
    469c:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    46a0:	07010000 	streq	r0, [r1, -r0]
    46a4:	310a0001 	tstcc	sl, r1
    46a8:	05000000 	streq	r0, [r0, #-0]
    46ac:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    46b0:	01010000 	mrseq	r0, (UNDEF: 1)
    46b4:	03000000 	movweq	r0, #0
    46b8:	00000281 	andeq	r0, r0, r1, lsl #5
    46bc:	43039605 	movwmi	r9, #13829	; 0x3605
    46c0:	07000003 	streq	r0, [r0, -r3]
    46c4:	0000036d 	andeq	r0, r0, sp, ror #6
    46c8:	0003790c 	andeq	r7, r3, ip, lsl #18
    46cc:	00038900 	andeq	r8, r3, r0, lsl #18
    46d0:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    46d4:	0000037e 	andeq	r0, r0, lr, ror r3
    46d8:	0002e608 	andeq	lr, r2, r8, lsl #12
    46dc:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    46e0:	00000389 	andeq	r0, r0, r9, lsl #7
    46e4:	da0c0101 	ble	304af0 <__ccfg+0x2e4b48>
    46e8:	a7000001 	strge	r0, [r0, -r1]
    46ec:	0d000003 	stceq	0, cr0, [r0, #-12]
    46f0:	039c0700 	orrseq	r0, ip, #0, 14
    46f4:	a2080000 	andge	r0, r8, #0
    46f8:	06000003 	streq	r0, [r0], -r3
    46fc:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    4700:	01010000 	mrseq	r0, (UNDEF: 1)
    4704:	00013308 	andeq	r3, r1, r8, lsl #6
    4708:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    470c:	000001f5 	strdeq	r0, [r0], -r5
    4710:	940e0101 	strls	r0, [lr], #-257	; 0xfffffeff
    4714:	07000004 	streq	r0, [r0, -r4]
    4718:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    471c:	0b000003 	bleq	4730 <__exidx_end+0x19a4>
    4720:	0003db04 	andeq	sp, r3, r4, lsl #22
    4724:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    4728:	10000003 	andne	r0, r0, r3
    472c:	000001ce 	andeq	r0, r0, lr, asr #3
    4730:	02da0c00 	sbcseq	r0, sl, #0, 24
    4734:	03f20000 	mvnseq	r0, #0
    4738:	000d0000 	andeq	r0, sp, r0
    473c:	0003e707 	andeq	lr, r3, r7, lsl #14
    4740:	04541100 	ldrbeq	r1, [r4], #-256	; 0xffffff00
    4744:	7f070000 	svcvc	0x00070000
    4748:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    474c:	01010000 	mrseq	r0, (UNDEF: 1)
    4750:	00039a11 	andeq	r9, r3, r1, lsl sl
    4754:	01820700 	orreq	r0, r2, r0, lsl #14
    4758:	00020114 	andeq	r0, r2, r4, lsl r1
    475c:	11010100 	mrsne	r0, (UNDEF: 17)
    4760:	0000047f 	andeq	r0, r0, pc, ror r4
    4764:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    4768:	000001f5 	strdeq	r0, [r0], -r5
    476c:	08120101 	ldmdaeq	r2, {r0, r8}
    4770:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    4774:	0000044b 	andeq	r0, r0, fp, asr #8
    4778:	00221013 	eoreq	r1, r2, r3, lsl r0
    477c:	03070700 	movweq	r0, #30464	; 0x7700
    4780:	0001ce07 	andeq	ip, r1, r7, lsl #28
    4784:	5b130000 	blpl	4c478c <__ccfg+0x4a47e4>
    4788:	07000005 	streq	r0, [r0, -r5]
    478c:	06080308 	streq	r0, [r8], -r8, lsl #6
    4790:	04000002 	streq	r0, [r0], #-2
    4794:	02610e00 	rsbeq	r0, r1, #0, 28
    4798:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    479c:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    47a0:	a3140000 	tstge	r4, #0
    47a4:	30000004 	andcc	r0, r0, r4
    47a8:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    47ac:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    47b0:	00049c13 	andeq	r9, r4, r3, lsl ip
    47b4:	03140700 	tsteq	r4, #0, 14
    47b8:	0001ce08 	andeq	ip, r1, r8, lsl #28
    47bc:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    47c0:	07000002 	streq	r0, [r0, -r2]
    47c4:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    47c8:	02000001 	andeq	r0, r0, #1
    47cc:	00049713 	andeq	r9, r4, r3, lsl r7
    47d0:	03160700 	tsteq	r6, #0, 14
    47d4:	0003c80b 	andeq	ip, r3, fp, lsl #16
    47d8:	5b130400 	blpl	4c57e0 <__ccfg+0x4a5838>
    47dc:	0700000f 	streq	r0, [r0, -pc]
    47e0:	06090317 			; <UNDEFINED> instruction: 0x06090317
    47e4:	08000002 	stmdaeq	r0, {r1}
    47e8:	00044d13 	andeq	r4, r4, r3, lsl sp
    47ec:	03180700 	tsteq	r8, #0, 14
    47f0:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    47f4:	c8130c00 	ldmdagt	r3, {sl, fp}
    47f8:	07000002 	streq	r0, [r0, -r2]
    47fc:	cb150319 	blgt	545468 <__ccfg+0x5254c0>
    4800:	2c000004 	stccs	0, cr0, [r0], {4}
    4804:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    4808:	04cb0000 	strbeq	r0, [fp], #0
    480c:	80150000 	andshi	r0, r5, r0
    4810:	03000000 	movweq	r0, #0
    4814:	58040b00 	stmdapl	r4, {r8, r9, fp}
    4818:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    481c:	000004ae 	andeq	r0, r0, lr, lsr #9
    4820:	1b031c07 	blne	cb844 <__ccfg+0xab89c>
    4824:	00000458 	andeq	r0, r0, r8, asr r4
    4828:	00039011 	andeq	r9, r3, r1, lsl r0
    482c:	031e0700 	tsteq	lr, #0, 14
    4830:	0004ed14 	andeq	lr, r4, r4, lsl sp
    4834:	0b010100 	bleq	44c3c <__ccfg+0x24c94>
    4838:	0004d104 	andeq	sp, r4, r4, lsl #2
    483c:	04cd0800 	strbeq	r0, [sp], #2048	; 0x800
    4840:	1d080000 	stcne	0, cr0, [r8, #-0]
    4844:	0001ce13 	andeq	ip, r1, r3, lsl lr
    4848:	08010100 	stmdaeq	r1, {r8}
    484c:	00000737 	andeq	r0, r0, r7, lsr r7
    4850:	df1a1e08 	svcle	0x001a1e08
    4854:	01000001 	tsteq	r0, r1
    4858:	08c70801 	stmiaeq	r7, {r0, fp}^
    485c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    4860:	0001df24 	andeq	sp, r1, r4, lsr #30
    4864:	08010100 	stmdaeq	r1, {r8}
    4868:	000005f6 	strdeq	r0, [r0], -r6
    486c:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    4870:	01000004 	tsteq	r0, r4
    4874:	01c01601 	biceq	r1, r0, r1, lsl #12
    4878:	17090000 	strne	r0, [r9, -r0]
    487c:	03050e02 	movweq	r0, #24066	; 0x5e02
    4880:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    4884:	00050000 	andeq	r0, r5, r0
    4888:	2e000300 	cdpcs	3, 0, cr0, cr0, cr0, {0}
    488c:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    4890:	00016d01 	andeq	r6, r1, r1, lsl #26
    4894:	12170c00 	andsne	r0, r7, #0, 24
    4898:	00db0000 	sbcseq	r0, fp, r0
    489c:	09500000 	ldmdbeq	r0, {}^	; <UNPREDICTABLE>
    48a0:	00000000 	andeq	r0, r0, r0
    48a4:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
    48a8:	01020000 	mrseq	r0, (UNDEF: 2)
    48ac:	0003b206 	andeq	fp, r3, r6, lsl #4
    48b0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    48b4:	000003ec 	andeq	r0, r0, ip, ror #7
    48b8:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    48bc:	02000000 	andeq	r0, r0, #0
    48c0:	009f0508 	addseq	r0, pc, r8, lsl #10
    48c4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    48c8:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    48cc:	004d182e 	subeq	r1, sp, lr, lsr #16
    48d0:	01020000 	mrseq	r0, (UNDEF: 2)
    48d4:	0003b008 	andeq	fp, r3, r8
    48d8:	21060300 	mrscs	r0, LR_und
    48dc:	31040000 	mrscc	r0, (UNDEF: 4)
    48e0:	00006019 	andeq	r6, r0, r9, lsl r0
    48e4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    48e8:	0000026e 	andeq	r0, r0, lr, ror #4
    48ec:	0017cf03 	andseq	ip, r7, r3, lsl #30
    48f0:	19340400 	ldmdbne	r4!, {sl}
    48f4:	00000073 	andeq	r0, r0, r3, ror r0
    48f8:	79070402 	stmdbvc	r7, {r1, sl}
    48fc:	02000000 	andeq	r0, r0, #0
    4900:	00740708 	rsbseq	r0, r4, r8, lsl #14
    4904:	04040000 	streq	r0, [r4], #-0
    4908:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    490c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4910:	0000007e 	andeq	r0, r0, lr, ror r0
    4914:	0015dc03 	andseq	sp, r5, r3, lsl #24
    4918:	12270500 	eorne	r0, r7, #0, 10
    491c:	00000054 	andeq	r0, r0, r4, asr r0
    4920:	00008f05 	andeq	r8, r0, r5, lsl #30
    4924:	008f0600 	addeq	r0, pc, r0, lsl #12
    4928:	d4030000 	strle	r0, [r3], #-0
    492c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    4930:	0041122b 	subeq	r1, r1, fp, lsr #4
    4934:	a5060000 	strge	r0, [r6, #-0]
    4938:	05000000 	streq	r0, [r0, #-0]
    493c:	000000a5 	andeq	r0, r0, r5, lsr #1
    4940:	00162d03 	andseq	r2, r6, r3, lsl #26
    4944:	122c0500 	eorne	r0, ip, #0, 10
    4948:	00000067 	andeq	r0, r0, r7, rrx
    494c:	0000bb05 	andeq	fp, r0, r5, lsl #22
    4950:	02a10300 	adceq	r0, r1, #0, 6
    4954:	2d050000 	stccs	0, cr0, [r5, #-0]
    4958:	00006712 	andeq	r6, r0, r2, lsl r7
    495c:	077e0300 	ldrbeq	r0, [lr, -r0, lsl #6]!
    4960:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4964:	0000e410 	andeq	lr, r0, r0, lsl r4
    4968:	8f040700 	svchi	0x00040700
    496c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4970:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    4974:	00000178 	andeq	r0, r0, r8, ror r1
    4978:	0002bc09 	andeq	fp, r2, r9, lsl #24
    497c:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    4980:	000000a5 	andeq	r0, r0, r5, lsr #1
    4984:	00070101 	andeq	r0, r7, r1, lsl #2
    4988:	00009809 	andeq	r9, r0, r9, lsl #16
    498c:	03350500 	teqeq	r5, #0, 10
    4990:	000000a5 	andeq	r0, r0, r5, lsr #1
    4994:	00060101 	andeq	r0, r6, r1, lsl #2
    4998:	00028a09 	andeq	r8, r2, r9, lsl #20
    499c:	03360500 	teqeq	r6, #0, 10
    49a0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49a4:	00050101 	andeq	r0, r5, r1, lsl #2
    49a8:	00041b09 	andeq	r1, r4, r9, lsl #22
    49ac:	03370500 	teqeq	r7, #0, 10
    49b0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49b4:	00040101 	andeq	r0, r4, r1, lsl #2
    49b8:	00041409 	andeq	r1, r4, r9, lsl #8
    49bc:	03380500 	teqeq	r8, #0, 10
    49c0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49c4:	00000401 	andeq	r0, r0, r1, lsl #8
    49c8:	0004050a 	andeq	r0, r4, sl, lsl #10
    49cc:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    49d0:	000000a5 	andeq	r0, r0, r5, lsr #1
    49d4:	00400a01 	subeq	r0, r0, r1, lsl #20
    49d8:	3c050000 	stccc	0, cr0, [r5], {-0}
    49dc:	0000a503 	andeq	sl, r0, r3, lsl #10
    49e0:	6d0a0200 	sfmvs	f0, 4, [sl, #-0]
    49e4:	05000000 	streq	r0, [r0, #-0]
    49e8:	00a5033d 	adceq	r0, r5, sp, lsr r3
    49ec:	0a030000 	beq	c49f4 <__ccfg+0xa4a4c>
    49f0:	00000153 	andeq	r0, r0, r3, asr r1
    49f4:	bb083f05 	bllt	214610 <__ccfg+0x1f4668>
    49f8:	04000000 	streq	r0, [r0], #-0
    49fc:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
    4a00:	41050000 	mrsmi	r0, (UNDEF: 5)
    4a04:	0000ea03 	andeq	lr, r0, r3, lsl #20
    4a08:	01780600 	cmneq	r8, r0, lsl #12
    4a0c:	b00b0000 	andlt	r0, fp, r0
    4a10:	05000002 	streq	r0, [r0, #-2]
    4a14:	01841a43 	orreq	r1, r4, r3, asr #20
    4a18:	01010000 	mrseq	r0, (UNDEF: 1)
    4a1c:	00031c0b 	andeq	r1, r3, fp, lsl #24
    4a20:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    4a24:	000001a5 	andeq	r0, r0, r5, lsr #3
    4a28:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    4a2c:	000001ab 	andeq	r0, r0, fp, lsr #3
    4a30:	b9080102 	stmdblt	r8, {r1, r8}
    4a34:	05000003 	streq	r0, [r0, #-3]
    4a38:	000001ab 	andeq	r0, r0, fp, lsr #3
    4a3c:	00032a0b 	andeq	r2, r3, fp, lsl #20
    4a40:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    4a44:	000001a5 	andeq	r0, r0, r5, lsr #3
    4a48:	08080101 	stmdaeq	r8, {r0, r8}
    4a4c:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    4a50:	0a000001 	beq	4a5c <__exidx_end+0x1cd0>
    4a54:	000002c3 	andeq	r0, r0, r3, asr #5
    4a58:	670b9006 	strvs	r9, [fp, -r6]
    4a5c:	00000000 	andeq	r0, r0, r0
    4a60:	0006090a 	andeq	r0, r6, sl, lsl #18
    4a64:	08910600 	ldmeq	r1, {r9, sl}
    4a68:	0000008f 	andeq	r0, r0, pc, lsl #1
    4a6c:	04870a04 	streq	r0, [r7], #2564	; 0xa04
    4a70:	92060000 	andls	r0, r6, #0
    4a74:	0000b110 	andeq	fp, r0, r0, lsl r1
    4a78:	03000600 	movweq	r0, #1536	; 0x600
    4a7c:	00000422 	andeq	r0, r0, r2, lsr #8
    4a80:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    4a84:	0c000001 	stceq	0, cr0, [r0], {1}
    4a88:	000001f6 	strdeq	r0, [r0], -r6
    4a8c:	0000020d 	andeq	r0, r0, sp, lsl #4
    4a90:	360b000d 	strcc	r0, [fp], -sp
    4a94:	06000000 	streq	r0, [r0], -r0
    4a98:	02020f99 	andeq	r0, r2, #612	; 0x264
    4a9c:	01010000 	mrseq	r0, (UNDEF: 1)
    4aa0:	00b60407 	adcseq	r0, r6, r7, lsl #8
    4aa4:	01080000 	mrseq	r0, (UNDEF: 8)
    4aa8:	4b099107 	blmi	268ecc <__ccfg+0x248f24>
    4aac:	09000002 	stmdbeq	r0, {r1}
    4ab0:	0000047a 	andeq	r0, r0, sl, ror r4
    4ab4:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    4ab8:	01000000 	mrseq	r0, (UNDEF: 0)
    4abc:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    4ac0:	00000031 	andeq	r0, r0, r1, lsr r0
    4ac4:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    4ac8:	01000000 	mrseq	r0, (UNDEF: 0)
    4acc:	00000001 	andeq	r0, r0, r1
    4ad0:	00028103 	andeq	r8, r2, r3, lsl #2
    4ad4:	03960700 	orrseq	r0, r6, #0, 14
    4ad8:	00000221 	andeq	r0, r0, r1, lsr #4
    4adc:	00024b05 	andeq	r4, r2, r5, lsl #22
    4ae0:	02570c00 	subseq	r0, r7, #0, 24
    4ae4:	02670000 	rsbeq	r0, r7, #0
    4ae8:	000d0000 	andeq	r0, sp, r0
    4aec:	00025c05 	andeq	r5, r2, r5, lsl #24
    4af0:	02e60b00 	rsceq	r0, r6, #0, 22
    4af4:	9c070000 	stcls	0, cr0, [r7], {-0}
    4af8:	00026717 	andeq	r6, r2, r7, lsl r7
    4afc:	0c010100 	stfeqs	f0, [r1], {-0}
    4b00:	0000009b 	muleq	r0, fp, r0
    4b04:	00000285 	andeq	r0, r0, r5, lsl #5
    4b08:	7a05000d 	bvc	144b44 <__ccfg+0x124b9c>
    4b0c:	0b000002 	bleq	4b1c <__exidx_end+0x1d90>
    4b10:	000003a2 	andeq	r0, r0, r2, lsr #7
    4b14:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    4b18:	01000002 	tsteq	r0, r2
    4b1c:	01330b01 	teqeq	r3, r1, lsl #22
    4b20:	c3060000 	movwgt	r0, #24576	; 0x6000
    4b24:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    4b28:	0e010100 	adfeqs	f0, f1, f0
    4b2c:	00000494 	muleq	r0, r4, r4
    4b30:	10016e09 	andne	r6, r1, r9, lsl #28
    4b34:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    4b38:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    4b3c:	010f0000 	mrseq	r0, CPSR
    4b40:	000002c5 	andeq	r0, r0, r5, asr #5
    4b44:	00008f10 	andeq	r8, r0, r0, lsl pc
    4b48:	b20c0000 	andlt	r0, ip, #0
    4b4c:	d0000001 	andle	r0, r0, r1
    4b50:	0d000002 	stceq	0, cr0, [r0, #-8]
    4b54:	02c50500 	sbceq	r0, r5, #0, 10
    4b58:	54110000 	ldrpl	r0, [r1], #-0
    4b5c:	09000004 	stmdbeq	r0, {r2}
    4b60:	d016017f 	andsle	r0, r6, pc, ror r1
    4b64:	01000002 	tsteq	r0, r2
    4b68:	039a1101 	orrseq	r1, sl, #1073741824	; 0x40000000
    4b6c:	82090000 	andhi	r0, r9, #0
    4b70:	00c71401 	sbceq	r1, r7, r1, lsl #8
    4b74:	01010000 	mrseq	r0, (UNDEF: 1)
    4b78:	00047f11 	andeq	r7, r4, r1, lsl pc
    4b7c:	02d80900 	sbcseq	r0, r8, #0, 18
    4b80:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    4b84:	12010100 	andne	r0, r1, #0, 2
    4b88:	03030908 	movweq	r0, #14600	; 0x3908
    4b8c:	00032909 	andeq	r2, r3, r9, lsl #18
    4b90:	22101300 	andscs	r1, r0, #0, 6
    4b94:	07090000 	streq	r0, [r9, -r0]
    4b98:	008f0703 	addeq	r0, pc, r3, lsl #14
    4b9c:	13000000 	movwne	r0, #0
    4ba0:	0000055b 	andeq	r0, r0, fp, asr r5
    4ba4:	08030809 	stmdaeq	r3, {r0, r3, fp}
    4ba8:	000000cc 	andeq	r0, r0, ip, asr #1
    4bac:	610e0004 	tstvs	lr, r4
    4bb0:	09000002 	stmdbeq	r0, {r1}
    4bb4:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    4bb8:	14000003 	strne	r0, [r0], #-3
    4bbc:	000004a3 	andeq	r0, r0, r3, lsr #9
    4bc0:	030b0930 	movweq	r0, #47408	; 0xb930
    4bc4:	00039908 	andeq	r9, r3, r8, lsl #18
    4bc8:	049c1300 	ldreq	r1, [ip], #768	; 0x300
    4bcc:	14090000 	strne	r0, [r9], #-0
    4bd0:	008f0803 	addeq	r0, pc, r3, lsl #16
    4bd4:	13000000 	movwne	r0, #0
    4bd8:	000002cd 	andeq	r0, r0, sp, asr #5
    4bdc:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    4be0:	0000008f 	andeq	r0, r0, pc, lsl #1
    4be4:	04971302 	ldreq	r1, [r7], #770	; 0x302
    4be8:	16090000 	strne	r0, [r9], -r0
    4bec:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    4bf0:	13040000 	movwne	r0, #16384	; 0x4000
    4bf4:	00000f5b 	andeq	r0, r0, fp, asr pc
    4bf8:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    4bfc:	000000cc 	andeq	r0, r0, ip, asr #1
    4c00:	044d1308 	strbeq	r1, [sp], #-776	; 0xfffffcf8
    4c04:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    4c08:	03990f03 	orrseq	r0, r9, #3, 30
    4c0c:	130c0000 	movwne	r0, #49152	; 0xc000
    4c10:	000002c8 	andeq	r0, r0, r8, asr #5
    4c14:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    4c18:	000003a9 	andeq	r0, r0, r9, lsr #7
    4c1c:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    4c20:	a9000003 	stmdbge	r0, {r0, r1}
    4c24:	15000003 	strne	r0, [r0, #-3]
    4c28:	00000088 	andeq	r0, r0, r8, lsl #1
    4c2c:	04070003 	streq	r0, [r7], #-3
    4c30:	00000336 	andeq	r0, r0, r6, lsr r3
    4c34:	0004ae0e 	andeq	sl, r4, lr, lsl #28
    4c38:	031c0900 	tsteq	ip, #0, 18
    4c3c:	0003361b 	andeq	r3, r3, fp, lsl r6
    4c40:	03901100 	orrseq	r1, r0, #0, 2
    4c44:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    4c48:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    4c4c:	01010000 	mrseq	r0, (UNDEF: 1)
    4c50:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    4c54:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
    4c58:	0a000004 	beq	4c70 <__exidx_end+0x1ee4>
    4c5c:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    4c60:	01010000 	mrseq	r0, (UNDEF: 1)
    4c64:	0007370b 	andeq	r3, r7, fp, lsl #14
    4c68:	1a1e0a00 	bne	787470 <__ccfg+0x7674c8>
    4c6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    4c70:	c70b0101 	strgt	r0, [fp, -r1, lsl #2]
    4c74:	0a000008 	beq	4c9c <__exidx_end+0x1f10>
    4c78:	00a0241e 	adceq	r2, r0, lr, lsl r4
    4c7c:	01010000 	mrseq	r0, (UNDEF: 1)
    4c80:	0005f60b 	andeq	pc, r5, fp, lsl #12
    4c84:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    4c88:	000003cb 	andeq	r0, r0, fp, asr #7
    4c8c:	6c160101 	ldfvss	f0, [r6], {1}
    4c90:	01000002 	tsteq	r0, r2
    4c94:	0305100d 	movweq	r1, #20493	; 0x500d
    4c98:	00002d84 	andeq	r2, r0, r4, lsl #27
    4c9c:	11f70117 	mvnsne	r0, r7, lsl r1
    4ca0:	11010000 	mrsne	r0, (UNDEF: 1)
    4ca4:	00000106 	andeq	r0, r0, r6, lsl #2
    4ca8:	00000000 	andeq	r0, r0, r0
    4cac:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cb0:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4cb4:	00747318 	rsbseq	r7, r4, r8, lsl r3
    4cb8:	8f1c1101 	svchi	0x001c1101
    4cbc:	31000000 	mrscc	r0, (UNDEF: 0)
    4cc0:	1900001f 	stmdbne	r0, {r0, r1, r2, r3, r4}
    4cc4:	000011f2 	strdeq	r1, [r0], -r2
    4cc8:	1b2c1101 	blne	b090d4 <__ccfg+0xae912c>
    4ccc:	4f000002 	svcmi	0x00000002
    4cd0:	1800001f 	stmdane	r0, {r0, r1, r2, r3, r4}
    4cd4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    4cd8:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    4cdc:	6d000000 	stcvs	0, cr0, [r0, #-0]
    4ce0:	1a00001f 	bne	4d64 <__exidx_end+0x1fd8>
    4ce4:	13010070 	movwne	r0, #4208	; 0x1070
    4ce8:	0004bb12 	andeq	fp, r4, r2, lsl fp
    4cec:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    4cf0:	8f071401 	svchi	0x00071401
    4cf4:	8b000000 	blhi	4cfc <__exidx_end+0x1f70>
    4cf8:	1a00001f 	bne	4d7c <__exidx_end+0x1ff0>
    4cfc:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    4d00:	0000a507 	andeq	sl, r0, r7, lsl #10
    4d04:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    4d10:	1c010000 	stcne	0, cr0, [r1], {-0}
    4d14:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    4d20:	1f010000 	svcne	0x00010000
    4d24:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
    4d30:	26010000 	strcs	r0, [r1], -r0
    4d34:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    4d38:	1f9e0000 	svcne	0x009e0000
    4d3c:	00000000 	andeq	r0, r0, r0
    4d40:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    4d44:	011f0000 	tsteq	pc, r0
    4d48:	00001207 	andeq	r1, r0, r7, lsl #4
    4d4c:	00060f01 	andeq	r0, r6, r1, lsl #30
    4d50:	00000000 	andeq	r0, r0, r0
    4d54:	01000000 	mrseq	r0, (UNDEF: 0)
    4d58:	0819209c 	ldmdaeq	r9, {r2, r3, r4, r7, sp}
    4d5c:	5b020000 	blpl	84d64 <__ccfg+0x64dbc>
    4d60:	20030135 	andcs	r0, r3, r5, lsr r1
    4d64:	0000052c 	andeq	r0, r0, ip, lsr #10
    4d68:	01355002 	teqeq	r5, r2
    4d6c:	11e52103 	mvnne	r2, r3, lsl #2
    4d70:	a4030000 	strge	r0, [r3], #-0
    4d74:	00670101 	rsbeq	r0, r7, r1, lsl #2
    4d78:	22030000 	andcs	r0, r3, #0
    4d7c:	00000163 	andeq	r0, r0, r3, ror #2
    4d80:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    4d84:	00000000 	andeq	r0, r0, r0
    4d88:	0004f600 	andeq	pc, r4, r0, lsl #12
    4d8c:	1f000300 	svcne	0x00000300
    4d90:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    4d94:	00016d01 	andeq	r6, r1, r1, lsl #26
    4d98:	12710c00 	rsbsne	r0, r1, #0, 24
    4d9c:	00db0000 	sbcseq	r0, fp, r0
    4da0:	09c80000 	stmibeq	r8, {}^	; <UNPREDICTABLE>
    4da4:	00000000 	andeq	r0, r0, r0
    4da8:	3ac70000 	bcc	ff1c4db0 <_estack+0xdf1bfdb0>
    4dac:	01020000 	mrseq	r0, (UNDEF: 2)
    4db0:	0003b206 	andeq	fp, r3, r6, lsl #4
    4db4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4db8:	000003ec 	andeq	r0, r0, ip, ror #7
    4dbc:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    4dc0:	02000000 	andeq	r0, r0, #0
    4dc4:	009f0508 	addseq	r0, pc, r8, lsl #10
    4dc8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4dcc:	03000022 	movweq	r0, #34	; 0x22
    4dd0:	004d182e 	subeq	r1, sp, lr, lsr #16
    4dd4:	01020000 	mrseq	r0, (UNDEF: 2)
    4dd8:	0003b008 	andeq	fp, r3, r8
    4ddc:	21060300 	mrscs	r0, LR_und
    4de0:	31030000 	mrscc	r0, (UNDEF: 3)
    4de4:	00006019 	andeq	r6, r0, r9, lsl r0
    4de8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4dec:	0000026e 	andeq	r0, r0, lr, ror #4
    4df0:	0017cf03 	andseq	ip, r7, r3, lsl #30
    4df4:	19340300 	ldmdbne	r4!, {r8, r9}
    4df8:	00000073 	andeq	r0, r0, r3, ror r0
    4dfc:	79070402 	stmdbvc	r7, {r1, sl}
    4e00:	02000000 	andeq	r0, r0, #0
    4e04:	00740708 	rsbseq	r0, r4, r8, lsl #14
    4e08:	04040000 	streq	r0, [r4], #-0
    4e0c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4e10:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4e14:	0000007e 	andeq	r0, r0, lr, ror r0
    4e18:	0015dc03 	andseq	sp, r5, r3, lsl #24
    4e1c:	12270400 	eorne	r0, r7, #0, 8
    4e20:	00000054 	andeq	r0, r0, r4, asr r0
    4e24:	00008f05 	andeq	r8, r0, r5, lsl #30
    4e28:	008f0600 	addeq	r0, pc, r0, lsl #12
    4e2c:	d4030000 	strle	r0, [r3], #-0
    4e30:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4e34:	0041122b 	subeq	r1, r1, fp, lsr #4
    4e38:	a5060000 	strge	r0, [r6, #-0]
    4e3c:	03000000 	movweq	r0, #0
    4e40:	0000162d 	andeq	r1, r0, sp, lsr #12
    4e44:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    4e48:	05000000 	streq	r0, [r0, #-0]
    4e4c:	000000b6 	strheq	r0, [r0], -r6
    4e50:	0002a103 	andeq	sl, r2, r3, lsl #2
    4e54:	122d0400 	eorne	r0, sp, #0, 8
    4e58:	00000067 	andeq	r0, r0, r7, rrx
    4e5c:	32040807 	andcc	r0, r4, #458752	; 0x70000
    4e60:	00016109 	andeq	r6, r1, r9, lsl #2
    4e64:	02bc0800 	adcseq	r0, ip, #0, 16
    4e68:	34040000 	strcc	r0, [r4], #-0
    4e6c:	0000a507 	andeq	sl, r0, r7, lsl #10
    4e70:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4e74:	00980800 	addseq	r0, r8, r0, lsl #16
    4e78:	35040000 	strcc	r0, [r4, #-0]
    4e7c:	0000a503 	andeq	sl, r0, r3, lsl #10
    4e80:	06010100 	streq	r0, [r1], -r0, lsl #2
    4e84:	028a0800 	addeq	r0, sl, #0, 16
    4e88:	36040000 	strcc	r0, [r4], -r0
    4e8c:	0000a503 	andeq	sl, r0, r3, lsl #10
    4e90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4e94:	041b0800 	ldreq	r0, [fp], #-2048	; 0xfffff800
    4e98:	37040000 	strcc	r0, [r4, -r0]
    4e9c:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ea0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4ea4:	04140800 	ldreq	r0, [r4], #-2048	; 0xfffff800
    4ea8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    4eac:	0000a503 	andeq	sl, r0, r3, lsl #10
    4eb0:	00040100 	andeq	r0, r4, r0, lsl #2
    4eb4:	04050900 	streq	r0, [r5], #-2304	; 0xfffff700
    4eb8:	3a040000 	bcc	104ec0 <__ccfg+0xe4f18>
    4ebc:	0000a507 	andeq	sl, r0, r7, lsl #10
    4ec0:	40090100 	andmi	r0, r9, r0, lsl #2
    4ec4:	04000000 	streq	r0, [r0], #-0
    4ec8:	00a5033c 	adceq	r0, r5, ip, lsr r3
    4ecc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    4ed0:	0000006d 	andeq	r0, r0, sp, rrx
    4ed4:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    4ed8:	03000000 	movweq	r0, #0
    4edc:	00015309 	andeq	r5, r1, r9, lsl #6
    4ee0:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    4ee4:	000000b6 	strheq	r0, [r0], -r6
    4ee8:	44030004 	strmi	r0, [r3], #-4
    4eec:	04000004 	streq	r0, [r0], #-4
    4ef0:	00d30341 	sbcseq	r0, r3, r1, asr #6
    4ef4:	61060000 	mrsvs	r0, (UNDEF: 6)
    4ef8:	0a000001 	beq	4f04 <__exidx_end+0x2178>
    4efc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    4f00:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    4f04:	01000001 	tsteq	r0, r1
    4f08:	031c0a01 	tsteq	ip, #4096	; 0x1000
    4f0c:	45040000 	strmi	r0, [r4, #-0]
    4f10:	00018e0e 	andeq	r8, r1, lr, lsl #28
    4f14:	0b010100 	bleq	4531c <__ccfg+0x25374>
    4f18:	00019404 	andeq	r9, r1, r4, lsl #8
    4f1c:	08010200 	stmdaeq	r1, {r9}
    4f20:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    4f24:	00019405 	andeq	r9, r1, r5, lsl #8
    4f28:	032a0a00 			; <UNDEFINED> instruction: 0x032a0a00
    4f2c:	45040000 	strmi	r0, [r4, #-0]
    4f30:	00018e1e 	andeq	r8, r1, lr, lsl lr
    4f34:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4f38:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    4f3c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4f40:	0002c309 	andeq	ip, r2, r9, lsl #6
    4f44:	0b900500 	bleq	fe40634c <_estack+0xde40134c>
    4f48:	00000067 	andeq	r0, r0, r7, rrx
    4f4c:	06090900 	streq	r0, [r9], -r0, lsl #18
    4f50:	91050000 	mrsls	r0, (UNDEF: 5)
    4f54:	00008f08 	andeq	r8, r0, r8, lsl #30
    4f58:	87090400 	strhi	r0, [r9, -r0, lsl #8]
    4f5c:	05000004 	streq	r0, [r0, #-4]
    4f60:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    4f64:	00060000 	andeq	r0, r6, r0
    4f68:	00042203 	andeq	r2, r4, r3, lsl #4
    4f6c:	03930500 	orrseq	r0, r3, #0, 10
    4f70:	000001ae 	andeq	r0, r0, lr, lsr #3
    4f74:	0001df0c 	andeq	sp, r1, ip, lsl #30
    4f78:	0001f600 	andeq	pc, r1, r0, lsl #12
    4f7c:	0a000d00 	beq	8384 <__exidx_end+0x55f8>
    4f80:	00000036 	andeq	r0, r0, r6, lsr r0
    4f84:	eb0f9905 	bl	3eb3a0 <__ccfg+0x3cb3f8>
    4f88:	01000001 	tsteq	r0, r1
    4f8c:	06010701 	streq	r0, [r1], -r1, lsl #14
    4f90:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    4f94:	7a080000 	bvc	204f9c <__ccfg+0x1e4ff4>
    4f98:	06000004 	streq	r0, [r0], -r4
    4f9c:	00a50793 	umlaleq	r0, r5, r3, r7
    4fa0:	07010000 	streq	r0, [r1, -r0]
    4fa4:	31080001 	tstcc	r8, r1
    4fa8:	06000000 	streq	r0, [r0], -r0
    4fac:	00a50394 	umlaleq	r0, r5, r4, r3
    4fb0:	01010000 	mrseq	r0, (UNDEF: 1)
    4fb4:	03000000 	movweq	r0, #0
    4fb8:	00000281 	andeq	r0, r0, r1, lsl #5
    4fbc:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    4fc0:	05000002 	streq	r0, [r0, #-2]
    4fc4:	0000022e 	andeq	r0, r0, lr, lsr #4
    4fc8:	00023a0c 	andeq	r3, r2, ip, lsl #20
    4fcc:	00024a00 	andeq	r4, r2, r0, lsl #20
    4fd0:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4fd4:	0000023f 	andeq	r0, r0, pc, lsr r2
    4fd8:	0002e60a 	andeq	lr, r2, sl, lsl #12
    4fdc:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    4fe0:	0000024a 	andeq	r0, r0, sl, asr #4
    4fe4:	9b0c0101 	blls	3053f0 <__ccfg+0x2e5448>
    4fe8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4fec:	0d000002 	stceq	0, cr0, [r0, #-8]
    4ff0:	025d0500 	subseq	r0, sp, #0, 10
    4ff4:	a20a0000 	andge	r0, sl, #0
    4ff8:	07000003 	streq	r0, [r0, -r3]
    4ffc:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    5000:	01010000 	mrseq	r0, (UNDEF: 1)
    5004:	0001330a 	andeq	r3, r1, sl, lsl #6
    5008:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    500c:	000000b6 	strheq	r0, [r0], -r6
    5010:	940e0101 	strls	r0, [lr], #-257	; 0xfffffeff
    5014:	08000004 	stmdaeq	r0, {r2}
    5018:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    501c:	0b000002 	bleq	502c <__exidx_end+0x22a0>
    5020:	00029c04 	andeq	r9, r2, r4, lsl #24
    5024:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    5028:	10000002 	andne	r0, r0, r2
    502c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5030:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    5034:	02b30000 	adcseq	r0, r3, #0
    5038:	000d0000 	andeq	r0, sp, r0
    503c:	0002a805 	andeq	sl, r2, r5, lsl #16
    5040:	04541100 	ldrbeq	r1, [r4], #-256	; 0xffffff00
    5044:	7f080000 	svcvc	0x00080000
    5048:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    504c:	01010000 	mrseq	r0, (UNDEF: 1)
    5050:	00039a11 	andeq	r9, r3, r1, lsl sl
    5054:	01820800 	orreq	r0, r2, r0, lsl #16
    5058:	0000c214 	andeq	ip, r0, r4, lsl r2
    505c:	11010100 	mrsne	r0, (UNDEF: 17)
    5060:	0000047f 	andeq	r0, r0, pc, ror r4
    5064:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    5068:	000000b6 	strheq	r0, [r0], -r6
    506c:	08120101 	ldmdaeq	r2, {r0, r8}
    5070:	09030308 	stmdbeq	r3, {r3, r8, r9}
    5074:	0000030c 	andeq	r0, r0, ip, lsl #6
    5078:	00221013 	eoreq	r1, r2, r3, lsl r0
    507c:	03070800 	movweq	r0, #30720	; 0x7800
    5080:	00008f07 	andeq	r8, r0, r7, lsl #30
    5084:	5b130000 	blpl	4c508c <__ccfg+0x4a50e4>
    5088:	08000005 	stmdaeq	r0, {r0, r2}
    508c:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    5090:	04000000 	streq	r0, [r0], #-0
    5094:	02610e00 	rsbeq	r0, r1, #0, 28
    5098:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    509c:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    50a0:	a3140000 	tstge	r4, #0
    50a4:	30000004 	andcc	r0, r0, r4
    50a8:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    50ac:	0000037c 	andeq	r0, r0, ip, ror r3
    50b0:	00049c13 	andeq	r9, r4, r3, lsl ip
    50b4:	03140800 	tsteq	r4, #0, 16
    50b8:	00008f08 	andeq	r8, r0, r8, lsl #30
    50bc:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    50c0:	08000002 	stmdaeq	r0, {r1}
    50c4:	8f080315 	svchi	0x00080315
    50c8:	02000000 	andeq	r0, r0, #0
    50cc:	00049713 	andeq	r9, r4, r3, lsl r7
    50d0:	03160800 	tsteq	r6, #0, 16
    50d4:	0002890b 	andeq	r8, r2, fp, lsl #18
    50d8:	5b130400 	blpl	4c60e0 <__ccfg+0x4a6138>
    50dc:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    50e0:	c7090317 	smladgt	r9, r7, r3, r0
    50e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    50e8:	00044d13 	andeq	r4, r4, r3, lsl sp
    50ec:	03180800 	tsteq	r8, #0, 16
    50f0:	00037c0f 	andeq	r7, r3, pc, lsl #24
    50f4:	c8130c00 	ldmdagt	r3, {sl, fp}
    50f8:	08000002 	stmdaeq	r0, {r1}
    50fc:	8c150319 	ldchi	3, cr0, [r5], {25}
    5100:	2c000003 	stccs	0, cr0, [r0], {3}
    5104:	030c0c00 	movweq	r0, #52224	; 0xcc00
    5108:	038c0000 	orreq	r0, ip, #0
    510c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5110:	03000000 	movweq	r0, #0
    5114:	19040b00 	stmdbne	r4, {r8, r9, fp}
    5118:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    511c:	000004ae 	andeq	r0, r0, lr, lsr #9
    5120:	1b031c08 	blne	cc148 <__ccfg+0xac1a0>
    5124:	00000319 	andeq	r0, r0, r9, lsl r3
    5128:	00039011 	andeq	r9, r3, r1, lsl r0
    512c:	031e0800 	tsteq	lr, #0, 16
    5130:	0003ae14 	andeq	sl, r3, r4, lsl lr
    5134:	0b010100 	bleq	4553c <__ccfg+0x25594>
    5138:	00039204 	andeq	r9, r3, r4, lsl #4
    513c:	04cd0a00 	strbeq	r0, [sp], #2560	; 0xa00
    5140:	1d090000 	stcne	0, cr0, [r9, #-0]
    5144:	00008f13 	andeq	r8, r0, r3, lsl pc
    5148:	0a010100 	beq	45550 <__ccfg+0x255a8>
    514c:	00000737 	andeq	r0, r0, r7, lsr r7
    5150:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    5154:	01000000 	mrseq	r0, (UNDEF: 0)
    5158:	08c70a01 	stmiaeq	r7, {r0, r9, fp}^
    515c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5160:	0000a024 	andeq	sl, r0, r4, lsr #32
    5164:	0a010100 	beq	4556c <__ccfg+0x255c4>
    5168:	000005f6 	strdeq	r0, [r0], -r6
    516c:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    5170:	01000003 	tsteq	r0, r3
    5174:	12601601 	rsbne	r1, r0, #1048576	; 0x100000
    5178:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    517c:	0002960f 	andeq	r9, r2, pc, lsl #12
    5180:	00030500 	andeq	r0, r3, r0, lsl #10
    5184:	16000000 	strne	r0, [r0], -r0
    5188:	000012ad 	andeq	r1, r0, sp, lsr #5
    518c:	8f0d0901 	svchi	0x000d0901
    5190:	05000000 	streq	r0, [r0, #-0]
    5194:	00000003 	andeq	r0, r0, r3
    5198:	026d1700 	rsbeq	r1, sp, #0, 14
    519c:	0a010000 	beq	451a4 <__ccfg+0x251fc>
    51a0:	8803050c 	stmdahi	r3, {r2, r3, r8, sl}
    51a4:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    51a8:	0012c201 	andseq	ip, r2, r1, lsl #4
    51ac:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    51b0:	00000001 	andeq	r0, r0, r1
    51b4:	00000000 	andeq	r0, r0, r0
    51b8:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    51bc:	19000004 	stmdbne	r0, {r2}
    51c0:	00746361 	rsbseq	r6, r4, r1, ror #6
    51c4:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    51c8:	b1000002 	tstlt	r0, r2
    51cc:	0000001f 	andeq	r0, r0, pc, lsl r0
    51d0:	12b50118 	adcsne	r0, r5, #24, 2
    51d4:	1c010000 	stcne	0, cr0, [r1], {-0}
    51d8:	00000101 	andeq	r0, r0, r1, lsl #2
    51dc:	00000000 	andeq	r0, r0, r0
    51e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    51e4:	000004de 	ldrdeq	r0, [r0], -lr
    51e8:	0000bf1a 	andeq	fp, r0, sl, lsl pc
    51ec:	011c0100 	tsteq	ip, r0, lsl #2
    51f0:	0000008f 	andeq	r0, r0, pc, lsl #1
    51f4:	00001fed 	andeq	r1, r0, sp, ror #31
    51f8:	00125b1b 	andseq	r5, r2, fp, lsl fp
    51fc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5200:	00000000 	andeq	r0, r0, r0
    5204:	0012681b 	andseq	r6, r2, fp, lsl r8
    5208:	01300100 	teqeq	r0, r0, lsl #2
    520c:	00000000 	andeq	r0, r0, r0
    5210:	0013bf1b 	andseq	fp, r3, fp, lsl pc
    5214:	01370100 	teqeq	r7, r0, lsl #2
    5218:	00000000 	andeq	r0, r0, r0
    521c:	0004de1c 	andeq	sp, r4, ip, lsl lr
    5220:	00000000 	andeq	r0, r0, r0
    5224:	00096800 	andeq	r6, r9, r0, lsl #16
    5228:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    522c:	000004ad 	andeq	r0, r0, sp, lsr #9
    5230:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5234:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    5238:	00000004 	andeq	r0, r0, r4
    523c:	90000000 	andls	r0, r0, r0
    5240:	01000009 	tsteq	r0, r9
    5244:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    5248:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    524c:	00000004 	andeq	r0, r0, r4
    5250:	0004de1e 	andeq	sp, r4, lr, lsl lr
    5254:	00000000 	andeq	r0, r0, r0
    5258:	0009a800 	andeq	sl, r9, r0, lsl #16
    525c:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    5260:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5264:	1f000000 	svcne	0x00000000
    5268:	000011e5 	andeq	r1, r0, r5, ror #3
    526c:	0101a402 	tsteq	r1, r2, lsl #8
    5270:	00000067 	andeq	r0, r0, r7, rrx
    5274:	01632003 	cmneq	r3, r3
    5278:	a4020000 	strge	r0, [r2], #-0
    527c:	00006718 	andeq	r6, r0, r8, lsl r7
    5280:	a7000000 	strge	r0, [r0, -r0]
    5284:	0300000a 	movweq	r0, #10
    5288:	0015ea00 	andseq	lr, r5, r0, lsl #20
    528c:	6d010400 	cfstrsvs	mvf0, [r1, #-0]
    5290:	0c000001 	stceq	0, cr0, [r0], {1}
    5294:	0000134d 	andeq	r1, r0, sp, asr #6
    5298:	000000db 	ldrdeq	r0, [r0], -fp
    529c:	00000b68 	andeq	r0, r0, r8, ror #22
    52a0:	00000000 	andeq	r0, r0, r0
    52a4:	00003e07 	andeq	r3, r0, r7, lsl #28
    52a8:	b2060102 	andlt	r0, r6, #-2147483648	; 0x80000000
    52ac:	02000003 	andeq	r0, r0, #3
    52b0:	03ec0502 	mvneq	r0, #8388608	; 0x800000
    52b4:	04020000 	streq	r0, [r2], #-0
    52b8:	0000a405 	andeq	sl, r0, r5, lsl #8
    52bc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    52c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52c4:	00221803 	eoreq	r1, r2, r3, lsl #16
    52c8:	182e0400 	stmdane	lr!, {sl}
    52cc:	0000004d 	andeq	r0, r0, sp, asr #32
    52d0:	b0080102 	andlt	r0, r8, r2, lsl #2
    52d4:	03000003 	movweq	r0, #3
    52d8:	00002106 	andeq	r2, r0, r6, lsl #2
    52dc:	60193104 	andsvs	r3, r9, r4, lsl #2
    52e0:	02000000 	andeq	r0, r0, #0
    52e4:	026e0702 	rsbeq	r0, lr, #524288	; 0x80000
    52e8:	cf030000 	svcgt	0x00030000
    52ec:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    52f0:	00731934 	rsbseq	r1, r3, r4, lsr r9
    52f4:	04020000 	streq	r0, [r2], #-0
    52f8:	00007907 	andeq	r7, r0, r7, lsl #18
    52fc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5300:	00000074 	andeq	r0, r0, r4, ror r0
    5304:	69050404 	stmdbvs	r5, {r2, sl}
    5308:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    530c:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    5310:	0c030000 	stceq	0, cr0, [r3], {-0}
    5314:	05000004 	streq	r0, [r0, #-4]
    5318:	00411226 	subeq	r1, r1, r6, lsr #4
    531c:	dc030000 	stcle	0, cr0, [r3], {-0}
    5320:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    5324:	00541227 	subseq	r1, r4, r7, lsr #4
    5328:	9b050000 	blls	145330 <__ccfg+0x125388>
    532c:	06000000 	streq	r0, [r0], -r0
    5330:	0000009b 	muleq	r0, fp, r0
    5334:	0013d403 	andseq	sp, r3, r3, lsl #8
    5338:	122b0500 	eorne	r0, fp, #0, 10
    533c:	00000041 	andeq	r0, r0, r1, asr #32
    5340:	0000b106 	andeq	fp, r0, r6, lsl #2
    5344:	00b10500 	adcseq	r0, r1, r0, lsl #10
    5348:	2d030000 	stccs	0, cr0, [r3, #-0]
    534c:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    5350:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5354:	c7050000 	strgt	r0, [r5, -r0]
    5358:	03000000 	movweq	r0, #0
    535c:	000002a1 	andeq	r0, r0, r1, lsr #5
    5360:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5364:	07000000 	streq	r0, [r0, -r0]
    5368:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    536c:	00000172 	andeq	r0, r0, r2, ror r1
    5370:	0002bc08 	andeq	fp, r2, r8, lsl #24
    5374:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    5378:	000000b1 	strheq	r0, [r0], -r1
    537c:	00070101 	andeq	r0, r7, r1, lsl #2
    5380:	00009808 	andeq	r9, r0, r8, lsl #16
    5384:	03350500 	teqeq	r5, #0, 10
    5388:	000000b1 	strheq	r0, [r0], -r1
    538c:	00060101 	andeq	r0, r6, r1, lsl #2
    5390:	00028a08 	andeq	r8, r2, r8, lsl #20
    5394:	03360500 	teqeq	r6, #0, 10
    5398:	000000b1 	strheq	r0, [r0], -r1
    539c:	00050101 	andeq	r0, r5, r1, lsl #2
    53a0:	00041b08 	andeq	r1, r4, r8, lsl #22
    53a4:	03370500 	teqeq	r7, #0, 10
    53a8:	000000b1 	strheq	r0, [r0], -r1
    53ac:	00040101 	andeq	r0, r4, r1, lsl #2
    53b0:	00041408 	andeq	r1, r4, r8, lsl #8
    53b4:	03380500 	teqeq	r8, #0, 10
    53b8:	000000b1 	strheq	r0, [r0], -r1
    53bc:	00000401 	andeq	r0, r0, r1, lsl #8
    53c0:	00040509 	andeq	r0, r4, r9, lsl #10
    53c4:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    53c8:	000000b1 	strheq	r0, [r0], -r1
    53cc:	00400901 	subeq	r0, r0, r1, lsl #18
    53d0:	3c050000 	stccc	0, cr0, [r5], {-0}
    53d4:	0000b103 	andeq	fp, r0, r3, lsl #2
    53d8:	6d090200 	sfmvs	f0, 4, [r9, #-0]
    53dc:	05000000 	streq	r0, [r0, #-0]
    53e0:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    53e4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    53e8:	00000153 	andeq	r0, r0, r3, asr r1
    53ec:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    53f0:	04000000 	streq	r0, [r0], #-0
    53f4:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
    53f8:	41050000 	mrsmi	r0, (UNDEF: 5)
    53fc:	0000e403 	andeq	lr, r0, r3, lsl #8
    5400:	01720600 	cmneq	r2, r0, lsl #12
    5404:	b00a0000 	andlt	r0, sl, r0
    5408:	05000002 	streq	r0, [r0, #-2]
    540c:	017e1a43 	cmneq	lr, r3, asr #20
    5410:	01010000 	mrseq	r0, (UNDEF: 1)
    5414:	00031c0a 	andeq	r1, r3, sl, lsl #24
    5418:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    541c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5420:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5424:	000001a5 	andeq	r0, r0, r5, lsr #3
    5428:	b9080102 	stmdblt	r8, {r1, r8}
    542c:	05000003 	streq	r0, [r0, #-3]
    5430:	000001a5 	andeq	r0, r0, r5, lsr #3
    5434:	00032a0a 	andeq	r2, r3, sl, lsl #20
    5438:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    543c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5440:	08070101 	stmdaeq	r7, {r0, r8}
    5444:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    5448:	09000001 	stmdbeq	r0, {r0}
    544c:	000002c3 	andeq	r0, r0, r3, asr #5
    5450:	670b9006 	strvs	r9, [fp, -r6]
    5454:	00000000 	andeq	r0, r0, r0
    5458:	00060909 	andeq	r0, r6, r9, lsl #18
    545c:	08910600 	ldmeq	r1, {r9, sl}
    5460:	0000009b 	muleq	r0, fp, r0
    5464:	04870904 	streq	r0, [r7], #2308	; 0x904
    5468:	92060000 	andls	r0, r6, #0
    546c:	0000bd10 	andeq	fp, r0, r0, lsl sp
    5470:	03000600 	movweq	r0, #1536	; 0x600
    5474:	00000422 	andeq	r0, r0, r2, lsr #8
    5478:	bf039306 	svclt	0x00039306
    547c:	0c000001 	stceq	0, cr0, [r0], {1}
    5480:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5484:	00000207 	andeq	r0, r0, r7, lsl #4
    5488:	360a000d 	strcc	r0, [sl], -sp
    548c:	06000000 	streq	r0, [r0], -r0
    5490:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    5494:	01010000 	mrseq	r0, (UNDEF: 1)
    5498:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    549c:	01070000 	mrseq	r0, (UNDEF: 7)
    54a0:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    54a4:	08000002 	stmdaeq	r0, {r1}
    54a8:	0000047a 	andeq	r0, r0, sl, ror r4
    54ac:	b1079307 	tstlt	r7, r7, lsl #6
    54b0:	01000000 	mrseq	r0, (UNDEF: 0)
    54b4:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    54b8:	00000031 	andeq	r0, r0, r1, lsr r0
    54bc:	b1039407 	tstlt	r3, r7, lsl #8
    54c0:	01000000 	mrseq	r0, (UNDEF: 0)
    54c4:	00000001 	andeq	r0, r0, r1
    54c8:	00028103 	andeq	r8, r2, r3, lsl #2
    54cc:	03960700 	orrseq	r0, r6, #0, 14
    54d0:	0000021b 	andeq	r0, r0, fp, lsl r2
    54d4:	00024505 	andeq	r4, r2, r5, lsl #10
    54d8:	02510c00 	subseq	r0, r1, #0, 24
    54dc:	02610000 	rsbeq	r0, r1, #0
    54e0:	000d0000 	andeq	r0, sp, r0
    54e4:	00025605 	andeq	r5, r2, r5, lsl #12
    54e8:	02e60a00 	rsceq	r0, r6, #0, 20
    54ec:	9c070000 	stcls	0, cr0, [r7], {-0}
    54f0:	00026117 	andeq	r6, r2, r7, lsl r1
    54f4:	0c010100 	stfeqs	f0, [r1], {-0}
    54f8:	000000a7 	andeq	r0, r0, r7, lsr #1
    54fc:	0000027f 	andeq	r0, r0, pc, ror r2
    5500:	7405000d 	strvc	r0, [r5], #-13
    5504:	0a000002 	beq	5514 <__exidx_end+0x2788>
    5508:	000003a2 	andeq	r0, r0, r2, lsr #7
    550c:	7f130608 	svcvc	0x00130608
    5510:	01000002 	tsteq	r0, r2
    5514:	01330a01 	teqeq	r3, r1, lsl #20
    5518:	c3060000 	movwgt	r0, #24576	; 0x6000
    551c:	0000c70e 	andeq	ip, r0, lr, lsl #14
    5520:	0e010100 	adfeqs	f0, f1, f0
    5524:	00000494 	muleq	r0, r4, r4
    5528:	10016e09 	andne	r6, r1, r9, lsl #28
    552c:	000002ad 	andeq	r0, r0, sp, lsr #5
    5530:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    5534:	010f0000 	mrseq	r0, CPSR
    5538:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    553c:	00009b10 	andeq	r9, r0, r0, lsl fp
    5540:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    5544:	ca000001 	bgt	5550 <__exidx_end+0x27c4>
    5548:	0d000002 	stceq	0, cr0, [r0, #-8]
    554c:	02bf0500 	adcseq	r0, pc, #0, 10
    5550:	54110000 	ldrpl	r0, [r1], #-0
    5554:	09000004 	stmdbeq	r0, {r2}
    5558:	ca16017f 	bgt	585b5c <__ccfg+0x565bb4>
    555c:	01000002 	tsteq	r0, r2
    5560:	039a1101 	orrseq	r1, sl, #1073741824	; 0x40000000
    5564:	82090000 	andhi	r0, r9, #0
    5568:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    556c:	01010000 	mrseq	r0, (UNDEF: 1)
    5570:	00047f11 	andeq	r7, r4, r1, lsl pc
    5574:	02d80900 	sbcseq	r0, r8, #0, 18
    5578:	0000c70e 	andeq	ip, r0, lr, lsl #14
    557c:	12010100 	andne	r0, r1, #0, 2
    5580:	03030908 	movweq	r0, #14600	; 0x3908
    5584:	00032309 	andeq	r2, r3, r9, lsl #6
    5588:	22101300 	andscs	r1, r0, #0, 6
    558c:	07090000 	streq	r0, [r9, -r0]
    5590:	009b0703 	addseq	r0, fp, r3, lsl #14
    5594:	13000000 	movwne	r0, #0
    5598:	0000055b 	andeq	r0, r0, fp, asr r5
    559c:	08030809 	stmdaeq	r3, {r0, r3, fp}
    55a0:	000000d8 	ldrdeq	r0, [r0], -r8
    55a4:	610e0004 	tstvs	lr, r4
    55a8:	09000002 	stmdbeq	r0, {r1}
    55ac:	fc030309 	stc2	3, cr0, [r3], {9}
    55b0:	14000002 	strne	r0, [r0], #-2
    55b4:	000004a3 	andeq	r0, r0, r3, lsr #9
    55b8:	030b0930 	movweq	r0, #47408	; 0xb930
    55bc:	00039308 	andeq	r9, r3, r8, lsl #6
    55c0:	049c1300 	ldreq	r1, [ip], #768	; 0x300
    55c4:	14090000 	strne	r0, [r9], #-0
    55c8:	009b0803 	addseq	r0, fp, r3, lsl #16
    55cc:	13000000 	movwne	r0, #0
    55d0:	000002cd 	andeq	r0, r0, sp, asr #5
    55d4:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    55d8:	0000009b 	muleq	r0, fp, r0
    55dc:	04971302 	ldreq	r1, [r7], #770	; 0x302
    55e0:	16090000 	strne	r0, [r9], -r0
    55e4:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    55e8:	13040000 	movwne	r0, #16384	; 0x4000
    55ec:	00000f5b 	andeq	r0, r0, fp, asr pc
    55f0:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    55f4:	000000d8 	ldrdeq	r0, [r0], -r8
    55f8:	044d1308 	strbeq	r1, [sp], #-776	; 0xfffffcf8
    55fc:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    5600:	03930f03 	orrseq	r0, r3, #3, 30
    5604:	130c0000 	movwne	r0, #49152	; 0xc000
    5608:	000002c8 	andeq	r0, r0, r8, asr #5
    560c:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    5610:	000003a3 	andeq	r0, r0, r3, lsr #7
    5614:	230c002c 	movwcs	r0, #49196	; 0xc02c
    5618:	a3000003 	movwge	r0, #3
    561c:	15000003 	strne	r0, [r0, #-3]
    5620:	00000088 	andeq	r0, r0, r8, lsl #1
    5624:	040b0003 	streq	r0, [fp], #-3
    5628:	00000330 	andeq	r0, r0, r0, lsr r3
    562c:	0004ae0e 	andeq	sl, r4, lr, lsl #28
    5630:	031c0900 	tsteq	ip, #0, 18
    5634:	0003301b 	andeq	r3, r3, fp, lsl r0
    5638:	03901100 	orrseq	r1, r0, #0, 2
    563c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5640:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    5644:	01010000 	mrseq	r0, (UNDEF: 1)
    5648:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    564c:	cd0a0000 	stcgt	0, cr0, [sl, #-0]
    5650:	0a000004 	beq	5668 <__exidx_end+0x28dc>
    5654:	009b131d 	addseq	r1, fp, sp, lsl r3
    5658:	01010000 	mrseq	r0, (UNDEF: 1)
    565c:	0007370a 	andeq	r3, r7, sl, lsl #14
    5660:	1a1e0a00 	bne	787e68 <__ccfg+0x767ec0>
    5664:	000000ac 	andeq	r0, r0, ip, lsr #1
    5668:	c70a0101 	strgt	r0, [sl, -r1, lsl #2]
    566c:	0a000008 	beq	5694 <__exidx_end+0x2908>
    5670:	00ac241e 	adceq	r2, ip, lr, lsl r4
    5674:	01010000 	mrseq	r0, (UNDEF: 1)
    5678:	0005f60a 	andeq	pc, r5, sl, lsl #12
    567c:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    5680:	000003c5 	andeq	r0, r0, r5, asr #7
    5684:	95160101 	ldrls	r0, [r6, #-257]	; 0xfffffeff
    5688:	01000003 	tsteq	r0, r3
    568c:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    5690:	03050000 	movweq	r0, #20480	; 0x5000
    5694:	00000000 	andeq	r0, r0, r0
    5698:	00132516 	andseq	r2, r3, r6, lsl r5
    569c:	150f0100 	strne	r0, [pc, #-256]	; 55a4 <__exidx_end+0x2818>
    56a0:	000000c7 	andeq	r0, r0, r7, asr #1
    56a4:	00000305 	andeq	r0, r0, r5, lsl #6
    56a8:	ab160000 	blge	5856b0 <__ccfg+0x565708>
    56ac:	01000013 	tsteq	r0, r3, lsl r0
    56b0:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    56b4:	03050000 	movweq	r0, #20480	; 0x5000
    56b8:	00000000 	andeq	r0, r0, r0
    56bc:	00130b16 	andseq	r0, r3, r6, lsl fp
    56c0:	0d120100 	ldfeqs	f0, [r2, #-0]
    56c4:	000000b1 	strheq	r0, [r0], -r1
    56c8:	00500305 	subseq	r0, r0, r5, lsl #6
    56cc:	9f162000 	svcls	0x00162000
    56d0:	01000013 	tsteq	r0, r3, lsl r0
    56d4:	00b10313 	adcseq	r0, r1, r3, lsl r3
    56d8:	03050000 	movweq	r0, #20480	; 0x5000
    56dc:	20000051 	andcs	r0, r0, r1, asr r0
    56e0:	000c0116 	andeq	r0, ip, r6, lsl r1
    56e4:	0d150100 	ldfeqs	f0, [r5, #-0]
    56e8:	0000009b 	muleq	r0, fp, r0
    56ec:	00000305 	andeq	r0, r0, r5, lsl #6
    56f0:	01170000 	tsteq	r7, r0
    56f4:	000012d7 	ldrdeq	r1, [r0], -r7
    56f8:	00061303 	andeq	r1, r6, r3, lsl #6
    56fc:	00000000 	andeq	r0, r0, r0
    5700:	01000000 	mrseq	r0, (UNDEF: 0)
    5704:	b001189c 	mullt	r1, ip, r8
    5708:	03000013 	movweq	r0, #19
    570c:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    5718:	01000000 	mrseq	r0, (UNDEF: 0)
    571c:	0004bc9c 	muleq	r4, ip, ip
    5720:	72651900 	rsbvc	r1, r5, #0, 18
    5724:	19080300 	stmdbne	r8, {r8, r9}
    5728:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    572c:	00002021 	andeq	r2, r0, r1, lsr #32
    5730:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    5734:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    5738:	000004c2 	andeq	r0, r0, r2, asr #9
    573c:	0b005101 	bleq	19b48 <__exidx_end+0x16dbc>
    5740:	00008f04 	andeq	r8, r0, r4, lsl #30
    5744:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    5748:	1b000000 	blne	5750 <__exidx_end+0x29c4>
    574c:	00133301 	andseq	r3, r3, r1, lsl #6
    5750:	01600100 	cmneq	r0, r0, lsl #2
    5754:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5760:	9c010000 	stcls	0, cr0, [r1], {-0}
    5764:	000004f6 	strdeq	r0, [r0], -r6
    5768:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    576c:	14016001 	strne	r6, [r1], #-1
    5770:	0000009b 	muleq	r0, fp, r0
    5774:	00002034 	andeq	r2, r0, r4, lsr r0
    5778:	2a011d00 	bcs	4cb80 <__ccfg+0x2cbd8>
    577c:	01000013 	tsteq	r0, r3, lsl r0
    5780:	0006015b 	andeq	r0, r6, fp, asr r1
    5784:	00000000 	andeq	r0, r0, r0
    5788:	01000000 	mrseq	r0, (UNDEF: 0)
    578c:	02011b9c 	andeq	r1, r1, #156, 22	; 0x27000
    5790:	01000013 	tsteq	r0, r3, lsl r0
    5794:	01060121 	tsteq	r6, r1, lsr #2
    5798:	0000009b 	muleq	r0, fp, r0
	...
    57a4:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    57a8:	731c0000 	tstvc	ip, #0
    57ac:	21010074 	tstcs	r1, r4, ror r0
    57b0:	009b1501 	addseq	r1, fp, r1, lsl #10
    57b4:	20470000 	subcs	r0, r7, r0
    57b8:	611c0000 	tstvs	ip, r0
    57bc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    57c0:	0000c71f 	andeq	ip, r0, pc, lsl r7
    57c4:	00205a00 	eoreq	r5, r0, r0, lsl #20
    57c8:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    57cc:	2e012101 	adfcss	f2, f1, f1
    57d0:	00000215 	andeq	r0, r0, r5, lsl r2
    57d4:	00002078 	andeq	r2, r0, r8, ror r0
    57d8:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    57dc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    57e0:	00009b36 	andeq	r9, r0, r6, lsr fp
    57e4:	00208b00 	eoreq	r8, r0, r0, lsl #22
    57e8:	6c621e00 	stclvs	14, cr1, [r2], #-0
    57ec:	01230100 			; <UNDEFINED> instruction: 0x01230100
    57f0:	00009b07 	andeq	r9, r0, r7, lsl #22
    57f4:	00209e00 	eoreq	r9, r0, r0, lsl #28
    57f8:	13191f00 	tstne	r9, #0, 30
    57fc:	32010000 	andcc	r0, r1, #0
    5800:	00000101 	andeq	r0, r0, r1, lsl #2
    5804:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    5808:	00000009 	andeq	r0, r0, r9
    580c:	50000000 	andpl	r0, r0, r0
    5810:	0100000b 	tsteq	r0, fp
    5814:	a3030143 	movwge	r0, #12611	; 0x3143
    5818:	21000005 	tstcs	r0, r5
    581c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5820:	000a0521 	andeq	r0, sl, r1, lsr #10
    5824:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    5828:	00000009 	andeq	r0, r0, r9
    582c:	00000000 	andeq	r0, r0, r0
    5830:	01000000 	mrseq	r0, (UNDEF: 0)
    5834:	21030150 	tstcs	r3, r0, asr r1
    5838:	00000a12 	andeq	r0, r0, r2, lsl sl
    583c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5840:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5844:	0012f901 	andseq	pc, r2, r1, lsl #18
    5848:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    584c:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    5858:	819c0100 	orrshi	r0, ip, r0, lsl #2
    585c:	19000006 	stmdbne	r0, {r1, r2}
    5860:	01007473 	tsteq	r0, r3, ror r4
    5864:	009b15cb 	addseq	r1, fp, fp, asr #11
    5868:	20c70000 	sbccs	r0, r7, r0
    586c:	3b230000 	blcc	8c5874 <__ccfg+0x8a58cc>
    5870:	01000013 	tsteq	r0, r3, lsl r0
    5874:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    5878:	20e50000 	rsccs	r0, r5, r0
    587c:	e5230000 	str	r0, [r3, #-0]!
    5880:	01000012 	tsteq	r0, r2, lsl r0
    5884:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    5888:	210e0000 	mrscs	r0, (UNDEF: 14)
    588c:	d1240000 			; <UNDEFINED> instruction: 0xd1240000
    5890:	01000012 	tsteq	r0, r2, lsl r0
    5894:	000001e6 	andeq	r0, r0, r6, ror #3
    5898:	be240000 	cdplt	0, 2, cr0, cr4, cr0, {0}
    589c:	01000013 	tsteq	r0, r3, lsl r0
    58a0:	000001ea 	andeq	r0, r0, sl, ror #3
    58a4:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    58a8:	00000008 	andeq	r0, r0, r8
    58ac:	20000000 	andcs	r0, r0, r0
    58b0:	0100000b 	tsteq	r0, fp
    58b4:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    58b8:	2c000008 	stccs	0, cr0, [r0], {8}
    58bc:	26000021 	strcs	r0, [r0], -r1, lsr #32
    58c0:	0000086c 	andeq	r0, r0, ip, ror #16
    58c4:	0000213f 	andeq	r2, r0, pc, lsr r1
    58c8:	0009f627 	andeq	pc, r9, r7, lsr #12
    58cc:	00000000 	andeq	r0, r0, r0
    58d0:	000b3800 	andeq	r3, fp, r0, lsl #16
    58d4:	02430100 	subeq	r0, r3, #0, 2
    58d8:	00000664 	andeq	r0, r0, r4, ror #12
    58dc:	000a1221 	andeq	r1, sl, r1, lsr #4
    58e0:	0a052100 	beq	14dce8 <__ccfg+0x12dd40>
    58e4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    58e8:	000009f6 	strdeq	r0, [r0], -r6
	...
    58f4:	21024801 	tstcs	r2, r1, lsl #16
    58f8:	00000a12 	andeq	r0, r0, r2, lsl sl
    58fc:	000a0521 	andeq	r0, sl, r1, lsr #10
    5900:	00000000 	andeq	r0, r0, r0
    5904:	13400118 	movtne	r0, #280	; 0x118
    5908:	b0010000 	andlt	r0, r1, r0
    590c:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5918:	9c010000 	stcls	0, cr0, [r1], {-0}
    591c:	00000704 	andeq	r0, r0, r4, lsl #14
    5920:	01006119 	tsteq	r0, r9, lsl r1
    5924:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    5928:	21520000 	cmpcs	r2, r0
    592c:	73190000 	tstvc	r9, #0
    5930:	1eb00100 	frdnes	f0, f0, f0
    5934:	00000704 	andeq	r0, r0, r4, lsl #14
    5938:	0000217b 	andeq	r2, r0, fp, ror r1
    593c:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    5940:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    5944:	0000009b 	muleq	r0, fp, r0
    5948:	000021af 	andeq	r2, r0, pc, lsr #3
    594c:	0009f627 	andeq	pc, r9, r7, lsr #12
    5950:	00000000 	andeq	r0, r0, r0
    5954:	000b0800 	andeq	r0, fp, r0, lsl #16
    5958:	02ba0100 	adcseq	r0, sl, #0, 2
    595c:	000006e8 	andeq	r0, r0, r8, ror #13
    5960:	000a1221 	andeq	r1, sl, r1, lsr #4
    5964:	0a052100 	beq	14dd6c <__ccfg+0x12ddc4>
    5968:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    596c:	000009f6 	strdeq	r0, [r0], -r6
	...
    5978:	2102c401 	tstcs	r2, r1, lsl #8
    597c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5980:	000a0521 	andeq	r0, sl, r1, lsr #10
    5984:	0b000000 	bleq	598c <__exidx_end+0x2c00>
    5988:	0000b104 	andeq	fp, r0, r4, lsl #2
    598c:	f0011700 			; <UNDEFINED> instruction: 0xf0011700
    5990:	01000012 	tsteq	r0, r2, lsl r0
    5994:	169806a8 	ldrne	r0, [r8], r8, lsr #13
    5998:	16ac0000 	strtne	r0, [ip], r0
    599c:	9c010000 	stcls	0, cr0, [r1], {-0}
    59a0:	13110129 	tstne	r1, #1073741834	; 0x4000000a
    59a4:	93010000 	movwls	r0, #4096	; 0x1000
    59a8:	00009b06 	andeq	r9, r0, r6, lsl #22
    59ac:	00168400 	andseq	r8, r6, r0, lsl #8
    59b0:	00169800 	andseq	r9, r6, r0, lsl #16
    59b4:	2a9c0100 	bcs	fe705dbc <_estack+0xde700dbc>
    59b8:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    59bc:	200d8201 	andcs	r8, sp, r1, lsl #4
    59c0:	60000016 	andvs	r0, r0, r6, lsl r0
    59c4:	01000016 	tsteq	r0, r6, lsl r0
    59c8:	0007969c 	muleq	r7, ip, r6
    59cc:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    59d0:	163a0000 	ldrtne	r0, [sl], -r0
    59d4:	164e0000 	strbne	r0, [lr], -r0
    59d8:	8a010000 	bhi	459e0 <__ccfg+0x25a38>
    59dc:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    59e0:	163a0000 	ldrtne	r0, [sl], -r0
    59e4:	0ad80000 	beq	ff6059ec <_estack+0xdf6009ec>
    59e8:	72010000 	andvc	r0, r1, #0
    59ec:	00077902 	andeq	r7, r7, r2, lsl #18
    59f0:	0a122100 	beq	48ddf8 <__ccfg+0x46de50>
    59f4:	05210000 	streq	r0, [r1, #-0]!
    59f8:	0000000a 	andeq	r0, r0, sl
    59fc:	0009f625 	andeq	pc, r9, r5, lsr #12
    5a00:	00164600 	andseq	r4, r6, r0, lsl #12
    5a04:	000af000 	andeq	pc, sl, r0
    5a08:	02740100 	rsbseq	r0, r4, #0, 2
    5a0c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a10:	0a052100 	beq	14de18 <__ccfg+0x12de70>
    5a14:	00000000 	andeq	r0, r0, r0
    5a18:	13982b00 	orrsne	r2, r8, #0, 22
    5a1c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    5a20:	a52b010d 	strge	r0, [fp, #-269]!	; 0xfffffef3
    5a24:	01000013 	tsteq	r0, r3, lsl r0
    5a28:	2b010d6d 	blcs	48fe4 <__ccfg+0x2903c>
    5a2c:	000013c4 	andeq	r1, r0, r4, asr #7
    5a30:	010d6601 	tsteq	sp, r1, lsl #12
    5a34:	0013ca2c 	andseq	ip, r3, ip, lsr #20
    5a38:	0d580100 	ldfeqe	f0, [r8, #-0]
    5a3c:	0015cc01 	andseq	ip, r5, r1, lsl #24
    5a40:	00162000 	andseq	r2, r6, r0
    5a44:	429c0100 	addsmi	r0, ip, #0, 2
    5a48:	19000008 	stmdbne	r0, {r3}
    5a4c:	01007473 	tsteq	r0, r3, ror r4
    5a50:	009b1958 	addseq	r1, fp, r8, asr r9
    5a54:	21cd0000 	biccs	r0, sp, r0
    5a58:	64190000 	ldrvs	r0, [r9], #-0
    5a5c:	01006c65 	tsteq	r0, r5, ror #24
    5a60:	009b2258 	addseq	r2, fp, r8, asr r2
    5a64:	21e00000 	mvncs	r0, r0
    5a68:	42250000 	eormi	r0, r5, #0
    5a6c:	d4000008 	strle	r0, [r0], #-8
    5a70:	90000015 	andls	r0, r0, r5, lsl r0
    5a74:	0100000a 	tsteq	r0, sl
    5a78:	902d135c 	eorls	r1, sp, ip, asr r3
    5a7c:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    5a80:	00000853 	andeq	r0, r0, r3, asr r8
    5a84:	000021f3 	strdeq	r2, [r0], -r3
    5a88:	0009f627 	andeq	pc, r9, r7, lsr #12
    5a8c:	0015d400 	andseq	sp, r5, r0, lsl #8
    5a90:	000ab000 	andeq	fp, sl, r0
    5a94:	02510100 	subseq	r0, r1, #0, 2
    5a98:	00000824 	andeq	r0, r0, r4, lsr #16
    5a9c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5aa0:	0a052100 	beq	14dea8 <__ccfg+0x12df00>
    5aa4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5aa8:	000009f6 	strdeq	r0, [r0], -r6
    5aac:	000015ee 	andeq	r1, r0, lr, ror #11
    5ab0:	000015f2 	strdeq	r1, [r0], -r2
    5ab4:	21025401 	tstcs	r2, r1, lsl #8
    5ab8:	00000a12 	andeq	r0, r0, r2, lsl sl
    5abc:	000a0521 	andeq	r0, sl, r1, lsr #10
    5ac0:	00000000 	andeq	r0, r0, r0
    5ac4:	13482f00 	movtne	r2, #36608	; 0x8f00
    5ac8:	4b010000 	blmi	45ad0 <__ccfg+0x25b28>
    5acc:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5ad0:	085e0100 	ldmdaeq	lr, {r8}^
    5ad4:	72300000 	eorsvc	r0, r0, #0
    5ad8:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    5adc:	000000b1 	strheq	r0, [r0], -r1
    5ae0:	131f3100 	tstne	pc, #0, 2
    5ae4:	41010000 	mrsmi	r0, (UNDEF: 1)
    5ae8:	8301010d 	movwhi	r0, #4365	; 0x110d
    5aec:	32000008 	andcc	r0, r0, #8
    5af0:	00646d63 	rsbeq	r6, r4, r3, ror #26
    5af4:	b1194101 	tstlt	r9, r1, lsl #2
    5af8:	32000000 	andcc	r0, r0, #0
    5afc:	41010061 	tstmi	r1, r1, rrx
    5b00:	0000c724 	andeq	ip, r0, r4, lsr #14
    5b04:	ea2c0000 	b	b05b0c <__ccfg+0xae5b64>
    5b08:	01000012 	tsteq	r0, r2, lsl r0
    5b0c:	b4010d3a 	strlt	r0, [r1], #-3386	; 0xfffff2c6
    5b10:	cc000015 	stcgt	0, cr0, [r0], {21}
    5b14:	01000015 	tsteq	r0, r5, lsl r0
    5b18:	0008e59c 	muleq	r8, ip, r5
    5b1c:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    5b20:	3a010064 	bcc	45cb8 <__ccfg+0x25d10>
    5b24:	0000b119 	andeq	fp, r0, r9, lsl r1
    5b28:	00220600 	eoreq	r0, r2, r0, lsl #12
    5b2c:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5b30:	15b40000 	ldrne	r0, [r4, #0]!
    5b34:	0a780000 	beq	1e05b3c <__ccfg+0x1de5b94>
    5b38:	3c010000 	stccc	0, cr0, [r1], {-0}
    5b3c:	0008c902 	andeq	ip, r8, r2, lsl #18
    5b40:	0a122100 	beq	48df48 <__ccfg+0x46dfa0>
    5b44:	05210000 	streq	r0, [r1, #-0]!
    5b48:	0000000a 	andeq	r0, r0, sl
    5b4c:	0009f628 	andeq	pc, r9, r8, lsr #12
    5b50:	0015c000 	andseq	ip, r5, r0
    5b54:	0015c400 	andseq	ip, r5, r0, lsl #8
    5b58:	023e0100 	eorseq	r0, lr, #0, 2
    5b5c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5b60:	0a052100 	beq	14df68 <__ccfg+0x12dfc0>
    5b64:	00000000 	andeq	r0, r0, r0
    5b68:	0013d92c 	andseq	sp, r3, ip, lsr #18
    5b6c:	0d290100 	stfeqs	f0, [r9, #-0]
    5b70:	00158401 	andseq	r8, r5, r1, lsl #8
    5b74:	0015b400 	andseq	fp, r5, r0, lsl #8
    5b78:	799c0100 	ldmibvc	ip, {r8}
    5b7c:	19000009 	stmdbne	r0, {r0, r3}
    5b80:	29010062 	stmdbcs	r1, {r1, r5, r6}
    5b84:	0000b11c 	andeq	fp, r0, ip, lsl r1
    5b88:	00221900 	eoreq	r1, r2, r0, lsl #18
    5b8c:	00693000 	rsbeq	r3, r9, r0
    5b90:	81062b01 	tsthi	r6, r1, lsl #22
    5b94:	27000000 	strcs	r0, [r0, -r0]
    5b98:	00000a3d 	andeq	r0, r0, sp, lsr sl
    5b9c:	0000158c 	andeq	r1, r0, ip, lsl #11
    5ba0:	00000a40 	andeq	r0, r0, r0, asr #20
    5ba4:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    5ba8:	21000009 	tstcs	r0, r9
    5bac:	00000a4c 	andeq	r0, r0, ip, asr #20
    5bb0:	0a3d3300 	beq	f527b8 <__ccfg+0xf32810>
    5bb4:	15980000 	ldrne	r0, [r8]
    5bb8:	159c0000 	ldrne	r0, [ip]
    5bbc:	2f010000 	svccs	0x00010000
    5bc0:	00094804 	andeq	r4, r9, r4, lsl #16
    5bc4:	0a4c2100 	beq	130dfcc <__ccfg+0x12ee024>
    5bc8:	33000000 	movwcc	r0, #0
    5bcc:	00000a20 	andeq	r0, r0, r0, lsr #20
    5bd0:	0000159c 	muleq	r0, ip, r5
    5bd4:	0000159e 	muleq	r0, lr, r5
    5bd8:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    5bdc:	21000009 	tstcs	r0, r9
    5be0:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5be4:	0a202500 	beq	80efec <__ccfg+0x7ef044>
    5be8:	15a40000 	strne	r0, [r4, #0]!
    5bec:	0a600000 	beq	1805bf4 <__ccfg+0x17e5c4c>
    5bf0:	33010000 	movwcc	r0, #4096	; 0x1000
    5bf4:	0a2f2103 	beq	bce008 <__ccfg+0xbae060>
    5bf8:	00000000 	andeq	r0, r0, r0
    5bfc:	0013d034 	andseq	sp, r3, r4, lsr r0
    5c00:	0d190100 	ldfeqs	f0, [r9, #-0]
    5c04:	000000b1 	strheq	r0, [r0], -r1
    5c08:	00001550 	andeq	r1, r0, r0, asr r5
    5c0c:	00001584 	andeq	r1, r0, r4, lsl #11
    5c10:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    5c14:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    5c18:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    5c1c:	00000081 	andeq	r0, r0, r1, lsl #1
    5c20:	01006235 	tsteq	r0, r5, lsr r2
    5c24:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    5c28:	22370000 	eorscs	r0, r7, #0
    5c2c:	3d270000 	stccc	0, cr0, [r7, #-0]
    5c30:	5400000a 	strpl	r0, [r0], #-10
    5c34:	e0000015 	and	r0, r0, r5, lsl r0
    5c38:	01000009 	tsteq	r0, r9
    5c3c:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    5c40:	4c210000 	stcmi	0, cr0, [r1], #-0
    5c44:	0000000a 	andeq	r0, r0, sl
    5c48:	000a2027 	andeq	r2, sl, r7, lsr #32
    5c4c:	00155a00 	andseq	r5, r5, r0, lsl #20
    5c50:	000a0800 	andeq	r0, sl, r0, lsl #16
    5c54:	03230100 			; <UNDEFINED> instruction: 0x03230100
    5c58:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5c5c:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5c60:	5a250000 	bpl	945c68 <__ccfg+0x925cc0>
    5c64:	5c00000a 	stcpl	0, cr0, [r0], {10}
    5c68:	20000015 	andcs	r0, r0, r5, lsl r0
    5c6c:	0100000a 	tsteq	r0, sl
    5c70:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    5c74:	0000000a 	andeq	r0, r0, sl
    5c78:	04de3600 	ldrbeq	r3, [lr], #1536	; 0x600
    5c7c:	06020000 	streq	r0, [r2], -r0
    5c80:	03010102 	movweq	r0, #4354	; 0x1102
    5c84:	00000a20 	andeq	r0, r0, r0, lsr #20
    5c88:	00016337 	andeq	r6, r1, r7, lsr r3
    5c8c:	02060200 	andeq	r0, r6, #0, 4
    5c90:	00006723 	andeq	r6, r0, r3, lsr #14
    5c94:	09b13700 	ldmibeq	r1!, {r8, r9, sl, ip, sp}
    5c98:	06020000 	streq	r0, [r2], -r0
    5c9c:	00673702 	rsbeq	r3, r7, r2, lsl #14
    5ca0:	36000000 	strcc	r0, [r0], -r0
    5ca4:	000003be 			; <UNDEFINED> instruction: 0x000003be
    5ca8:	01015402 	tsteq	r1, r2, lsl #8
    5cac:	0a3d0301 	beq	f468b8 <__ccfg+0xf26910>
    5cb0:	63370000 	teqvs	r7, #0
    5cb4:	02000001 	andeq	r0, r0, #1
    5cb8:	67190154 			; <UNDEFINED> instruction: 0x67190154
    5cbc:	00000000 	andeq	r0, r0, r0
    5cc0:	00002536 	andeq	r2, r0, r6, lsr r5
    5cc4:	011e0200 	tsteq	lr, r0, lsl #4
    5cc8:	5a030101 	bpl	c60d4 <__ccfg+0xa612c>
    5ccc:	3700000a 	strcc	r0, [r0, -sl]
    5cd0:	00000163 	andeq	r0, r0, r3, ror #2
    5cd4:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    5cd8:	00000067 	andeq	r0, r0, r7, rrx
    5cdc:	11e53800 	mvnne	r3, r0, lsl #16
    5ce0:	a4020000 	strge	r0, [r2], #-0
    5ce4:	00670101 	rsbeq	r0, r7, r1, lsl #2
    5ce8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    5cec:	3900000a 	stmdbcc	r0, {r1, r3}
    5cf0:	00000163 	andeq	r0, r0, r3, ror #2
    5cf4:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    5cf8:	00000000 	andeq	r0, r0, r0
    5cfc:	0007963a 	andeq	r9, r7, sl, lsr r6
    5d00:	00166000 	andseq	r6, r6, r0
    5d04:	00168400 	andseq	r8, r6, r0, lsl #8
    5d08:	289c0100 	ldmcs	ip, {r8}
    5d0c:	00000796 	muleq	r0, r6, r7
    5d10:	0000166a 	andeq	r1, r0, sl, ror #12
    5d14:	0000167e 	andeq	r1, r0, lr, ror r6
    5d18:	3b0d7801 	blcc	363d24 <__ccfg+0x343d7c>
    5d1c:	000007a8 	andeq	r0, r0, r8, lsr #15
    5d20:	00001674 	andeq	r1, r0, r4, ror r6
    5d24:	0000167a 	andeq	r1, r0, sl, ror r6
    5d28:	00037c01 	andeq	r7, r3, r1, lsl #24
    5d2c:	04120000 	ldreq	r0, [r2], #-0
    5d30:	00030000 	andeq	r0, r3, r0
    5d34:	00001990 	muleq	r0, r0, r9
    5d38:	016d0104 	cmneq	sp, r4, lsl #2
    5d3c:	ec0c0000 	stc	0, cr0, [ip], {-0}
    5d40:	db000013 	blle	5d94 <__exidx_end+0x3008>
    5d44:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    5d48:	0000000b 	andeq	r0, r0, fp
    5d4c:	3c000000 	stccc	0, cr0, [r0], {-0}
    5d50:	02000047 	andeq	r0, r0, #71	; 0x47
    5d54:	03b20601 			; <UNDEFINED> instruction: 0x03b20601
    5d58:	02020000 	andeq	r0, r2, #0
    5d5c:	0003ec05 	andeq	lr, r3, r5, lsl #24
    5d60:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5d64:	000000a4 	andeq	r0, r0, r4, lsr #1
    5d68:	9f050802 	svcls	0x00050802
    5d6c:	03000000 	movweq	r0, #0
    5d70:	00002218 	andeq	r2, r0, r8, lsl r2
    5d74:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    5d78:	02000000 	andeq	r0, r0, #0
    5d7c:	03b00801 	movseq	r0, #65536	; 0x10000
    5d80:	06030000 	streq	r0, [r3], -r0
    5d84:	02000021 	andeq	r0, r0, #33	; 0x21
    5d88:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5d8c:	02020000 	andeq	r0, r2, #0
    5d90:	00026e07 	andeq	r6, r2, r7, lsl #28
    5d94:	17cf0300 	strbne	r0, [pc, r0, lsl #6]
    5d98:	34020000 	strcc	r0, [r2], #-0
    5d9c:	00007319 	andeq	r7, r0, r9, lsl r3
    5da0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5da4:	00000079 	andeq	r0, r0, r9, ror r0
    5da8:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    5dac:	04000000 	streq	r0, [r0], #-0
    5db0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5db4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5db8:	00007e07 	andeq	r7, r0, r7, lsl #28
    5dbc:	15dc0300 	ldrbne	r0, [ip, #768]	; 0x300
    5dc0:	27030000 	strcs	r0, [r3, -r0]
    5dc4:	00005412 	andeq	r5, r0, r2, lsl r4
    5dc8:	008f0500 	addeq	r0, pc, r0, lsl #10
    5dcc:	d4030000 	strle	r0, [r3], #-0
    5dd0:	03000013 	movweq	r0, #19
    5dd4:	0041122b 	subeq	r1, r1, fp, lsr #4
    5dd8:	a0060000 	andge	r0, r6, r0
    5ddc:	03000000 	movweq	r0, #0
    5de0:	0000162d 	andeq	r1, r0, sp, lsr #12
    5de4:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    5de8:	05000000 	streq	r0, [r0, #-0]
    5dec:	000000b1 	strheq	r0, [r0], -r1
    5df0:	0002a103 	andeq	sl, r2, r3, lsl #2
    5df4:	122d0300 	eorne	r0, sp, #0, 6
    5df8:	00000067 	andeq	r0, r0, r7, rrx
    5dfc:	32030807 	andcc	r0, r3, #458752	; 0x70000
    5e00:	00015c09 	andeq	r5, r1, r9, lsl #24
    5e04:	02bc0800 	adcseq	r0, ip, #0, 16
    5e08:	34030000 	strcc	r0, [r3], #-0
    5e0c:	0000a007 	andeq	sl, r0, r7
    5e10:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5e14:	00980800 	addseq	r0, r8, r0, lsl #16
    5e18:	35030000 	strcc	r0, [r3, #-0]
    5e1c:	0000a003 	andeq	sl, r0, r3
    5e20:	06010100 	streq	r0, [r1], -r0, lsl #2
    5e24:	028a0800 	addeq	r0, sl, #0, 16
    5e28:	36030000 	strcc	r0, [r3], -r0
    5e2c:	0000a003 	andeq	sl, r0, r3
    5e30:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5e34:	041b0800 	ldreq	r0, [fp], #-2048	; 0xfffff800
    5e38:	37030000 	strcc	r0, [r3, -r0]
    5e3c:	0000a003 	andeq	sl, r0, r3
    5e40:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5e44:	04140800 	ldreq	r0, [r4], #-2048	; 0xfffff800
    5e48:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5e4c:	0000a003 	andeq	sl, r0, r3
    5e50:	00040100 	andeq	r0, r4, r0, lsl #2
    5e54:	04050900 	streq	r0, [r5], #-2304	; 0xfffff700
    5e58:	3a030000 	bcc	c5e60 <__ccfg+0xa5eb8>
    5e5c:	0000a007 	andeq	sl, r0, r7
    5e60:	40090100 	andmi	r0, r9, r0, lsl #2
    5e64:	03000000 	movweq	r0, #0
    5e68:	00a0033c 	adceq	r0, r0, ip, lsr r3
    5e6c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5e70:	0000006d 	andeq	r0, r0, sp, rrx
    5e74:	a0033d03 	andge	r3, r3, r3, lsl #26
    5e78:	03000000 	movweq	r0, #0
    5e7c:	00015309 	andeq	r5, r1, r9, lsl #6
    5e80:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    5e84:	000000b1 	strheq	r0, [r0], -r1
    5e88:	44030004 	strmi	r0, [r3], #-4
    5e8c:	03000004 	movweq	r0, #4
    5e90:	00ce0341 	sbceq	r0, lr, r1, asr #6
    5e94:	5c060000 	stcpl	0, cr0, [r6], {-0}
    5e98:	0a000001 	beq	5ea4 <__exidx_end+0x3118>
    5e9c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    5ea0:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    5ea4:	01000001 	tsteq	r0, r1
    5ea8:	031c0a01 	tsteq	ip, #4096	; 0x1000
    5eac:	45030000 	strmi	r0, [r3, #-0]
    5eb0:	0001890e 	andeq	r8, r1, lr, lsl #18
    5eb4:	0b010100 	bleq	462bc <__ccfg+0x26314>
    5eb8:	00018f04 	andeq	r8, r1, r4, lsl #30
    5ebc:	08010200 	stmdaeq	r1, {r9}
    5ec0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    5ec4:	00018f05 	andeq	r8, r1, r5, lsl #30
    5ec8:	032a0a00 			; <UNDEFINED> instruction: 0x032a0a00
    5ecc:	45030000 	strmi	r0, [r3, #-0]
    5ed0:	0001891e 	andeq	r8, r1, lr, lsl r9
    5ed4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5ed8:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    5edc:	000001da 	ldrdeq	r0, [r0], -sl
    5ee0:	0002c309 	andeq	ip, r2, r9, lsl #6
    5ee4:	0b900400 	bleq	fe406eec <_estack+0xde401eec>
    5ee8:	00000067 	andeq	r0, r0, r7, rrx
    5eec:	06090900 	streq	r0, [r9], -r0, lsl #18
    5ef0:	91040000 	mrsls	r0, (UNDEF: 4)
    5ef4:	00008f08 	andeq	r8, r0, r8, lsl #30
    5ef8:	87090400 	strhi	r0, [r9, -r0, lsl #8]
    5efc:	04000004 	streq	r0, [r0], #-4
    5f00:	00ac1092 	umlaleq	r1, ip, r2, r0
    5f04:	00060000 	andeq	r0, r6, r0
    5f08:	00042203 	andeq	r2, r4, r3, lsl #4
    5f0c:	03930400 	orrseq	r0, r3, #0, 8
    5f10:	000001a9 	andeq	r0, r0, r9, lsr #3
    5f14:	0001da0c 	andeq	sp, r1, ip, lsl #20
    5f18:	0001f100 	andeq	pc, r1, r0, lsl #2
    5f1c:	0a000d00 	beq	9324 <__exidx_end+0x6598>
    5f20:	00000036 	andeq	r0, r0, r6, lsr r0
    5f24:	e60f9904 	str	r9, [pc], -r4, lsl #18
    5f28:	01000001 	tsteq	r0, r1
    5f2c:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    5f30:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    5f34:	7a080000 	bvc	205f3c <__ccfg+0x1e5f94>
    5f38:	05000004 	streq	r0, [r0, #-4]
    5f3c:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    5f40:	07010000 	streq	r0, [r1, -r0]
    5f44:	31080001 	tstcc	r8, r1
    5f48:	05000000 	streq	r0, [r0, #-0]
    5f4c:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    5f50:	01010000 	mrseq	r0, (UNDEF: 1)
    5f54:	03000000 	movweq	r0, #0
    5f58:	00000281 	andeq	r0, r0, r1, lsl #5
    5f5c:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    5f60:	05000001 	streq	r0, [r0, #-1]
    5f64:	00000229 	andeq	r0, r0, r9, lsr #4
    5f68:	0002350c 	andeq	r3, r2, ip, lsl #10
    5f6c:	00024500 	andeq	r4, r2, r0, lsl #10
    5f70:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5f74:	0000023a 	andeq	r0, r0, sl, lsr r2
    5f78:	0002e60a 	andeq	lr, r2, sl, lsl #12
    5f7c:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    5f80:	00000245 	andeq	r0, r0, r5, asr #4
    5f84:	9b0c0101 	blls	306390 <__ccfg+0x2e63e8>
    5f88:	63000000 	movwvs	r0, #0
    5f8c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5f90:	02580500 	subseq	r0, r8, #0, 10
    5f94:	a20a0000 	andge	r0, sl, #0
    5f98:	06000003 	streq	r0, [r0], -r3
    5f9c:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    5fa0:	01010000 	mrseq	r0, (UNDEF: 1)
    5fa4:	0001330a 	andeq	r3, r1, sl, lsl #6
    5fa8:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    5fac:	000000b1 	strheq	r0, [r0], -r1
    5fb0:	940e0101 	strls	r0, [lr], #-257	; 0xfffffeff
    5fb4:	07000004 	streq	r0, [r0, -r4]
    5fb8:	9110016e 	tstls	r0, lr, ror #2
    5fbc:	0b000002 	bleq	5fcc <__exidx_end+0x3240>
    5fc0:	00029704 	andeq	r9, r2, r4, lsl #14
    5fc4:	a3010f00 	movwge	r0, #7936	; 0x1f00
    5fc8:	10000002 	andne	r0, r0, r2
    5fcc:	0000008f 	andeq	r0, r0, pc, lsl #1
    5fd0:	01960c00 	orrseq	r0, r6, r0, lsl #24
    5fd4:	02ae0000 	adceq	r0, lr, #0
    5fd8:	000d0000 	andeq	r0, sp, r0
    5fdc:	0002a305 	andeq	sl, r2, r5, lsl #6
    5fe0:	04541100 	ldrbeq	r1, [r4], #-256	; 0xffffff00
    5fe4:	7f070000 	svcvc	0x00070000
    5fe8:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    5fec:	01010000 	mrseq	r0, (UNDEF: 1)
    5ff0:	00039a11 	andeq	r9, r3, r1, lsl sl
    5ff4:	01820700 	orreq	r0, r2, r0, lsl #14
    5ff8:	0000bd14 	andeq	fp, r0, r4, lsl sp
    5ffc:	11010100 	mrsne	r0, (UNDEF: 17)
    6000:	0000047f 	andeq	r0, r0, pc, ror r4
    6004:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    6008:	000000b1 	strheq	r0, [r0], -r1
    600c:	08120101 	ldmdaeq	r2, {r0, r8}
    6010:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    6014:	00000307 	andeq	r0, r0, r7, lsl #6
    6018:	00221013 	eoreq	r1, r2, r3, lsl r0
    601c:	03070700 	movweq	r0, #30464	; 0x7700
    6020:	00008f07 	andeq	r8, r0, r7, lsl #30
    6024:	5b130000 	blpl	4c602c <__ccfg+0x4a6084>
    6028:	07000005 	streq	r0, [r0, -r5]
    602c:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    6030:	04000000 	streq	r0, [r0], #-0
    6034:	02610e00 	rsbeq	r0, r1, #0, 28
    6038:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    603c:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    6040:	a3140000 	tstge	r4, #0
    6044:	30000004 	andcc	r0, r0, r4
    6048:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    604c:	00000377 	andeq	r0, r0, r7, ror r3
    6050:	00049c13 	andeq	r9, r4, r3, lsl ip
    6054:	03140700 	tsteq	r4, #0, 14
    6058:	00008f08 	andeq	r8, r0, r8, lsl #30
    605c:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    6060:	07000002 	streq	r0, [r0, -r2]
    6064:	8f080315 	svchi	0x00080315
    6068:	02000000 	andeq	r0, r0, #0
    606c:	00049713 	andeq	r9, r4, r3, lsl r7
    6070:	03160700 	tsteq	r6, #0, 14
    6074:	0002840b 	andeq	r8, r2, fp, lsl #8
    6078:	5b130400 	blpl	4c7080 <__ccfg+0x4a70d8>
    607c:	0700000f 	streq	r0, [r0, -pc]
    6080:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    6084:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6088:	00044d13 	andeq	r4, r4, r3, lsl sp
    608c:	03180700 	tsteq	r8, #0, 14
    6090:	0003770f 	andeq	r7, r3, pc, lsl #14
    6094:	c8130c00 	ldmdagt	r3, {sl, fp}
    6098:	07000002 	streq	r0, [r0, -r2]
    609c:	87150319 			; <UNDEFINED> instruction: 0x87150319
    60a0:	2c000003 	stccs	0, cr0, [r0], {3}
    60a4:	03070c00 	movweq	r0, #31744	; 0x7c00
    60a8:	03870000 	orreq	r0, r7, #0
    60ac:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    60b0:	03000000 	movweq	r0, #0
    60b4:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    60b8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    60bc:	000004ae 	andeq	r0, r0, lr, lsr #9
    60c0:	1b031c07 	blne	cd0e4 <__ccfg+0xad13c>
    60c4:	00000314 	andeq	r0, r0, r4, lsl r3
    60c8:	00039011 	andeq	r9, r3, r1, lsl r0
    60cc:	031e0700 	tsteq	lr, #0, 14
    60d0:	0003a914 	andeq	sl, r3, r4, lsl r9
    60d4:	0b010100 	bleq	464dc <__ccfg+0x26534>
    60d8:	00038d04 	andeq	r8, r3, r4, lsl #26
    60dc:	13e20a00 	mvnne	r0, #0, 20
    60e0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    60e4:	0001890e 	andeq	r8, r1, lr, lsl #18
    60e8:	16010100 	strne	r0, [r1], -r0, lsl #2
    60ec:	00142b01 	andseq	r2, r4, r1, lsl #22
    60f0:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    60f4:	00008101 	andeq	r8, r0, r1, lsl #2
    60f8:	0016ac00 	andseq	sl, r6, r0, lsl #24
    60fc:	00172400 	andseq	r2, r7, r0, lsl #8
    6100:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    6104:	01007473 	tsteq	r0, r3, ror r4
    6108:	008f120d 	addeq	r1, pc, sp, lsl #4
    610c:	22550000 	subscs	r0, r5, #0
    6110:	62170000 	andsvs	r0, r7, #0
    6114:	01006675 	tsteq	r0, r5, ror r6
    6118:	01891c0d 	orreq	r1, r9, sp, lsl #24
    611c:	22730000 	rsbscs	r0, r3, #0
    6120:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    6124:	01006e65 	tsteq	r0, r5, ror #28
    6128:	0081250d 	addeq	r2, r1, sp, lsl #10
    612c:	22c80000 	sbccs	r0, r8, #0
    6130:	32180000 	andscc	r0, r8, #0
    6134:	01000014 	tsteq	r0, r4, lsl r0
    6138:	00810611 	addeq	r0, r1, r1, lsl r6
    613c:	231d0000 	tstcs	sp, #0
    6140:	00000000 	andeq	r0, r0, r0
    6144:	0000044c 	andeq	r0, r0, ip, asr #8
    6148:	1adf0003 	bne	ff7c615c <_estack+0xdf7c115c>
    614c:	01040000 	mrseq	r0, (UNDEF: 4)
    6150:	0000016d 	andeq	r0, r0, sp, ror #2
    6154:	0014400c 	andseq	r4, r4, ip
    6158:	0000db00 	andeq	sp, r0, r0, lsl #22
    615c:	000bf800 	andeq	pc, fp, r0, lsl #16
    6160:	00000000 	andeq	r0, r0, r0
    6164:	00490100 	subeq	r0, r9, r0, lsl #2
    6168:	06010200 	streq	r0, [r1], -r0, lsl #4
    616c:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    6170:	ec050202 	sfm	f0, 4, [r5], {2}
    6174:	02000003 	andeq	r0, r0, #3
    6178:	00a40504 	adceq	r0, r4, r4, lsl #10
    617c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6180:	00009f05 	andeq	r9, r0, r5, lsl #30
    6184:	22180300 	andscs	r0, r8, #0, 6
    6188:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    618c:	00004d18 	andeq	r4, r0, r8, lsl sp
    6190:	08010200 	stmdaeq	r1, {r9}
    6194:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    6198:	00210603 	eoreq	r0, r1, r3, lsl #12
    619c:	19310200 	ldmdbne	r1!, {r9}
    61a0:	00000060 	andeq	r0, r0, r0, rrx
    61a4:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
    61a8:	03000002 	movweq	r0, #2
    61ac:	000017cf 	andeq	r1, r0, pc, asr #15
    61b0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    61b4:	02000000 	andeq	r0, r0, #0
    61b8:	00790704 	rsbseq	r0, r9, r4, lsl #14
    61bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    61c0:	00007407 	andeq	r7, r0, r7, lsl #8
    61c4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    61c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    61cc:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    61d0:	03000000 	movweq	r0, #0
    61d4:	00000b62 	andeq	r0, r0, r2, ror #22
    61d8:	9b1b2803 	blls	6d01ec <__ccfg+0x6b0244>
    61dc:	05000000 	streq	r0, [r0, #-0]
    61e0:	00000a78 	andeq	r0, r0, r8, ror sl
    61e4:	b3000904 	movwlt	r0, #2308	; 0x904
    61e8:	06000000 	streq	r0, [r0], -r0
    61ec:	00000c18 	andeq	r0, r0, r8, lsl ip
    61f0:	000000b3 	strheq	r0, [r0], -r3
    61f4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    61f8:	0a7a0304 	beq	1e86e10 <__ccfg+0x1e66e68>
    61fc:	63030000 	movwvs	r0, #12288	; 0x3000
    6200:	00008f18 	andeq	r8, r0, r8, lsl pc
    6204:	15dc0300 	ldrbne	r0, [ip, #768]	; 0x300
    6208:	27040000 	strcs	r0, [r4, -r0]
    620c:	00005412 	andeq	r5, r0, r2, lsl r4
    6210:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6214:	d4030000 	strle	r0, [r3], #-0
    6218:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    621c:	0041122b 	subeq	r1, r1, fp, lsr #4
    6220:	d2090000 	andle	r0, r9, #0
    6224:	03000000 	movweq	r0, #0
    6228:	0000162d 	andeq	r1, r0, sp, lsr #12
    622c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6234:	000000e3 	andeq	r0, r0, r3, ror #1
    6238:	0002a103 	andeq	sl, r2, r3, lsl #2
    623c:	122d0400 	eorne	r0, sp, #0, 8
    6240:	00000067 	andeq	r0, r0, r7, rrx
    6244:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    6248:	00018e09 	andeq	r8, r1, r9, lsl #28
    624c:	02bc0b00 	adcseq	r0, ip, #0, 22
    6250:	34040000 	strcc	r0, [r4], #-0
    6254:	0000d207 	andeq	sp, r0, r7, lsl #4
    6258:	07010100 	streq	r0, [r1, -r0, lsl #2]
    625c:	00980b00 	addseq	r0, r8, r0, lsl #22
    6260:	35040000 	strcc	r0, [r4, #-0]
    6264:	0000d203 	andeq	sp, r0, r3, lsl #4
    6268:	06010100 	streq	r0, [r1], -r0, lsl #2
    626c:	028a0b00 	addeq	r0, sl, #0, 22
    6270:	36040000 	strcc	r0, [r4], -r0
    6274:	0000d203 	andeq	sp, r0, r3, lsl #4
    6278:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    627c:	041b0b00 	ldreq	r0, [fp], #-2816	; 0xfffff500
    6280:	37040000 	strcc	r0, [r4, -r0]
    6284:	0000d203 	andeq	sp, r0, r3, lsl #4
    6288:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    628c:	04140b00 	ldreq	r0, [r4], #-2816	; 0xfffff500
    6290:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6294:	0000d203 	andeq	sp, r0, r3, lsl #4
    6298:	00040100 	andeq	r0, r4, r0, lsl #2
    629c:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    62a0:	3a040000 	bcc	1062a8 <__ccfg+0xe6300>
    62a4:	0000d207 	andeq	sp, r0, r7, lsl #4
    62a8:	400c0100 	andmi	r0, ip, r0, lsl #2
    62ac:	04000000 	streq	r0, [r0], #-0
    62b0:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    62b4:	0c020000 	stceq	0, cr0, [r2], {-0}
    62b8:	0000006d 	andeq	r0, r0, sp, rrx
    62bc:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    62c0:	03000000 	movweq	r0, #0
    62c4:	0001530c 	andeq	r5, r1, ip, lsl #6
    62c8:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    62cc:	000000e3 	andeq	r0, r0, r3, ror #1
    62d0:	44030004 	strmi	r0, [r3], #-4
    62d4:	04000004 	streq	r0, [r0], #-4
    62d8:	01000341 	tsteq	r0, r1, asr #6
    62dc:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    62e0:	0d000001 	stceq	0, cr0, [r0, #-4]
    62e4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    62e8:	9a1a4304 	bls	696f00 <__ccfg+0x676f58>
    62ec:	01000001 	tsteq	r0, r1
    62f0:	031c0d01 	tsteq	ip, #1, 26	; 0x40
    62f4:	45040000 	strmi	r0, [r4, #-0]
    62f8:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    62fc:	0e010100 	adfeqs	f0, f1, f0
    6300:	0001c104 	andeq	ip, r1, r4, lsl #2
    6304:	08010200 	stmdaeq	r1, {r9}
    6308:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    630c:	0001c108 	andeq	ip, r1, r8, lsl #2
    6310:	032a0d00 			; <UNDEFINED> instruction: 0x032a0d00
    6314:	45040000 	strmi	r0, [r4, #-0]
    6318:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    631c:	0a010100 	beq	46724 <__ccfg+0x2677c>
    6320:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6324:	0000020c 	andeq	r0, r0, ip, lsl #4
    6328:	0002c30c 	andeq	ip, r2, ip, lsl #6
    632c:	0b900500 	bleq	fe407734 <_estack+0xde402734>
    6330:	00000067 	andeq	r0, r0, r7, rrx
    6334:	06090c00 	streq	r0, [r9], -r0, lsl #24
    6338:	91050000 	mrsls	r0, (UNDEF: 5)
    633c:	0000c108 	andeq	ip, r0, r8, lsl #2
    6340:	870c0400 	strhi	r0, [ip, -r0, lsl #8]
    6344:	05000004 	streq	r0, [r0, #-4]
    6348:	00de1092 	smullseq	r1, lr, r2, r0
    634c:	00060000 	andeq	r0, r6, r0
    6350:	00042203 	andeq	r2, r4, r3, lsl #4
    6354:	03930500 	orrseq	r0, r3, #0, 10
    6358:	000001db 	ldrdeq	r0, [r0], -fp
    635c:	00020c0f 	andeq	r0, r2, pc, lsl #24
    6360:	00022300 	andeq	r2, r2, r0, lsl #6
    6364:	0d001000 	stceq	0, cr1, [r0, #-0]
    6368:	00000036 	andeq	r0, r0, r6, lsr r0
    636c:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    6370:	01000002 	tsteq	r0, r2
    6374:	06010a01 	streq	r0, [r1], -r1, lsl #20
    6378:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    637c:	7a0b0000 	bvc	2c6384 <__ccfg+0x2a63dc>
    6380:	06000004 	streq	r0, [r0], -r4
    6384:	00d20793 	smullseq	r0, r2, r3, r7
    6388:	07010000 	streq	r0, [r1, -r0]
    638c:	310b0001 	tstcc	fp, r1
    6390:	06000000 	streq	r0, [r0], -r0
    6394:	00d20394 	smullseq	r0, r2, r4, r3
    6398:	01010000 	mrseq	r0, (UNDEF: 1)
    639c:	03000000 	movweq	r0, #0
    63a0:	00000281 	andeq	r0, r0, r1, lsl #5
    63a4:	31039606 	tstcc	r3, r6, lsl #12
    63a8:	08000002 	stmdaeq	r0, {r1}
    63ac:	0000025b 	andeq	r0, r0, fp, asr r2
    63b0:	0002670f 	andeq	r6, r2, pc, lsl #14
    63b4:	00027700 	andeq	r7, r2, r0, lsl #14
    63b8:	08001000 	stmdaeq	r0, {ip}
    63bc:	0000026c 	andeq	r0, r0, ip, ror #4
    63c0:	0002e60d 	andeq	lr, r2, sp, lsl #12
    63c4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    63c8:	00000277 	andeq	r0, r0, r7, ror r2
    63cc:	cd0f0101 	stfgts	f0, [pc, #-4]	; 63d0 <__exidx_end+0x3644>
    63d0:	95000000 	strls	r0, [r0, #-0]
    63d4:	10000002 	andne	r0, r0, r2
    63d8:	028a0800 	addeq	r0, sl, #0, 16
    63dc:	a20d0000 	andge	r0, sp, #0
    63e0:	07000003 	streq	r0, [r0, -r3]
    63e4:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    63e8:	01010000 	mrseq	r0, (UNDEF: 1)
    63ec:	0001330d 	andeq	r3, r1, sp, lsl #6
    63f0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    63f4:	000000e3 	andeq	r0, r0, r3, ror #1
    63f8:	94110101 	ldrls	r0, [r1], #-257	; 0xfffffeff
    63fc:	08000004 	stmdaeq	r0, {r2}
    6400:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6404:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6408:	0002c904 	andeq	ip, r2, r4, lsl #18
    640c:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    6410:	13000002 	movwne	r0, #2
    6414:	000000c1 	andeq	r0, r0, r1, asr #1
    6418:	01c80f00 	biceq	r0, r8, r0, lsl #30
    641c:	02e00000 	rsceq	r0, r0, #0
    6420:	00100000 	andseq	r0, r0, r0
    6424:	0002d508 	andeq	sp, r2, r8, lsl #10
    6428:	04541400 	ldrbeq	r1, [r4], #-1024	; 0xfffffc00
    642c:	7f080000 	svcvc	0x00080000
    6430:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    6434:	01010000 	mrseq	r0, (UNDEF: 1)
    6438:	00039a14 	andeq	r9, r3, r4, lsl sl
    643c:	01820800 	orreq	r0, r2, r0, lsl #16
    6440:	0000ef14 	andeq	lr, r0, r4, lsl pc
    6444:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6448:	0000047f 	andeq	r0, r0, pc, ror r4
    644c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    6450:	000000e3 	andeq	r0, r0, r3, ror #1
    6454:	08150101 	ldmdaeq	r5, {r0, r8}
    6458:	09030308 	stmdbeq	r3, {r3, r8, r9}
    645c:	00000339 	andeq	r0, r0, r9, lsr r3
    6460:	00221016 	eoreq	r1, r2, r6, lsl r0
    6464:	03070800 	movweq	r0, #30720	; 0x7800
    6468:	0000c107 	andeq	ip, r0, r7, lsl #2
    646c:	5b160000 	blpl	586474 <__ccfg+0x5664cc>
    6470:	08000005 	stmdaeq	r0, {r0, r2}
    6474:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    6478:	04000000 	streq	r0, [r0], #-0
    647c:	02611100 	rsbeq	r1, r1, #0, 2
    6480:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    6484:	03120303 	tsteq	r2, #201326592	; 0xc000000
    6488:	a3170000 	tstge	r7, #0
    648c:	30000004 	andcc	r0, r0, r4
    6490:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    6494:	000003a9 	andeq	r0, r0, r9, lsr #7
    6498:	00049c16 	andeq	r9, r4, r6, lsl ip
    649c:	03140800 	tsteq	r4, #0, 16
    64a0:	0000c108 	andeq	ip, r0, r8, lsl #2
    64a4:	cd160000 	ldcgt	0, cr0, [r6, #-0]
    64a8:	08000002 	stmdaeq	r0, {r1}
    64ac:	c1080315 	tstgt	r8, r5, lsl r3
    64b0:	02000000 	andeq	r0, r0, #0
    64b4:	00049716 	andeq	r9, r4, r6, lsl r7
    64b8:	03160800 	tsteq	r6, #0, 16
    64bc:	0002b60b 	andeq	fp, r2, fp, lsl #12
    64c0:	5b160400 	blpl	5874c8 <__ccfg+0x567520>
    64c4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    64c8:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    64cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    64d0:	00044d16 	andeq	r4, r4, r6, lsl sp
    64d4:	03180800 	tsteq	r8, #0, 16
    64d8:	0003a90f 	andeq	sl, r3, pc, lsl #18
    64dc:	c8160c00 	ldmdagt	r6, {sl, fp}
    64e0:	08000002 	stmdaeq	r0, {r1}
    64e4:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    64e8:	2c000003 	stccs	0, cr0, [r0], {3}
    64ec:	03390f00 	teqeq	r9, #0, 30
    64f0:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    64f4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    64f8:	03000000 	movweq	r0, #0
    64fc:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    6500:	11000003 	tstne	r0, r3
    6504:	000004ae 	andeq	r0, r0, lr, lsr #9
    6508:	1b031c08 	blne	cd530 <__ccfg+0xad588>
    650c:	00000346 	andeq	r0, r0, r6, asr #6
    6510:	00039014 	andeq	r9, r3, r4, lsl r0
    6514:	031e0800 	tsteq	lr, #0, 16
    6518:	0003db14 	andeq	sp, r3, r4, lsl fp
    651c:	0e010100 	adfeqs	f0, f1, f0
    6520:	0003bf04 	andeq	fp, r3, r4, lsl #30
    6524:	37011900 	strcc	r1, [r1, -r0, lsl #18]
    6528:	01000014 	tsteq	r0, r4, lsl r0
    652c:	8101050c 	tsthi	r1, ip, lsl #10
    6530:	24000000 	strcs	r0, [r0], #-0
    6534:	78000017 	stmdavc	r0, {r0, r1, r2, r4}
    6538:	01000017 	tsteq	r0, r7, lsl r0
    653c:	0004499c 	muleq	r4, ip, r9
    6540:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    6544:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    6548:	000000c1 	andeq	r0, r0, r1, asr #1
    654c:	00002367 	andeq	r2, r0, r7, ror #6
    6550:	01006d1b 	tsteq	r0, fp, lsl sp
    6554:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    6558:	91020000 	mrsls	r0, (UNDEF: 2)
    655c:	321d1c74 	andscc	r1, sp, #116, 24	; 0x7400
    6560:	01000014 	tsteq	r0, r4, lsl r0
    6564:	0081060e 	addeq	r0, r1, lr, lsl #12
    6568:	237a0000 	cmncs	sl, #0
    656c:	621e0000 	andsvs	r0, lr, #0
    6570:	01006675 	tsteq	r0, r5, ror r6
    6574:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    6578:	23b90000 			; <UNDEFINED> instruction: 0x23b90000
    657c:	611f0000 	tstvs	pc, r0
    6580:	10010070 	andne	r0, r1, r0, ror r0
    6584:	0000b50a 	andeq	fp, r0, sl, lsl #10
    6588:	5c910200 	lfmpl	f0, 4, [r1], {0}
    658c:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    6590:	00000001 	andeq	r0, r0, r1
    6594:	0000044c 	andeq	r0, r0, ip, asr #8
    6598:	1c8b0003 	stcne	0, cr0, [fp], {3}
    659c:	01040000 	mrseq	r0, (UNDEF: 4)
    65a0:	0000016d 	andeq	r0, r0, sp, ror #2
    65a4:	0014810c 	andseq	r8, r4, ip, lsl #2
    65a8:	0000db00 	andeq	sp, r0, r0, lsl #22
    65ac:	000c0800 	andeq	r0, ip, r0, lsl #16
    65b0:	00000000 	andeq	r0, r0, r0
    65b4:	004aa300 	subeq	sl, sl, r0, lsl #6
    65b8:	06010200 	streq	r0, [r1], -r0, lsl #4
    65bc:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    65c0:	ec050202 	sfm	f0, 4, [r5], {2}
    65c4:	02000003 	andeq	r0, r0, #3
    65c8:	00a40504 	adceq	r0, r4, r4, lsl #10
    65cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    65d0:	00009f05 	andeq	r9, r0, r5, lsl #30
    65d4:	22180300 	andscs	r0, r8, #0, 6
    65d8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    65dc:	00004d18 	andeq	r4, r0, r8, lsl sp
    65e0:	08010200 	stmdaeq	r1, {r9}
    65e4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    65e8:	00210603 	eoreq	r0, r1, r3, lsl #12
    65ec:	19310200 	ldmdbne	r1!, {r9}
    65f0:	00000060 	andeq	r0, r0, r0, rrx
    65f4:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
    65f8:	03000002 	movweq	r0, #2
    65fc:	000017cf 	andeq	r1, r0, pc, asr #15
    6600:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6604:	02000000 	andeq	r0, r0, #0
    6608:	00790704 	rsbseq	r0, r9, r4, lsl #14
    660c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6610:	00007407 	andeq	r7, r0, r7, lsl #8
    6614:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6618:	00746e69 	rsbseq	r6, r4, r9, ror #28
    661c:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    6620:	03000000 	movweq	r0, #0
    6624:	00000b62 	andeq	r0, r0, r2, ror #22
    6628:	9b1b2803 	blls	6d063c <__ccfg+0x6b0694>
    662c:	05000000 	streq	r0, [r0, #-0]
    6630:	00000a78 	andeq	r0, r0, r8, ror sl
    6634:	b3000904 	movwlt	r0, #2308	; 0x904
    6638:	06000000 	streq	r0, [r0], -r0
    663c:	00000c18 	andeq	r0, r0, r8, lsl ip
    6640:	000000b3 	strheq	r0, [r0], -r3
    6644:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6648:	0a7a0304 	beq	1e87260 <__ccfg+0x1e672b8>
    664c:	63030000 	movwvs	r0, #12288	; 0x3000
    6650:	00008f18 	andeq	r8, r0, r8, lsl pc
    6654:	15dc0300 	ldrbne	r0, [ip, #768]	; 0x300
    6658:	27040000 	strcs	r0, [r4, -r0]
    665c:	00005412 	andeq	r5, r0, r2, lsl r4
    6660:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6664:	d4030000 	strle	r0, [r3], #-0
    6668:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    666c:	0041122b 	subeq	r1, r1, fp, lsr #4
    6670:	d2090000 	andle	r0, r9, #0
    6674:	03000000 	movweq	r0, #0
    6678:	0000162d 	andeq	r1, r0, sp, lsr #12
    667c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6680:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6684:	000000e3 	andeq	r0, r0, r3, ror #1
    6688:	0002a103 	andeq	sl, r2, r3, lsl #2
    668c:	122d0400 	eorne	r0, sp, #0, 8
    6690:	00000067 	andeq	r0, r0, r7, rrx
    6694:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    6698:	00018e09 	andeq	r8, r1, r9, lsl #28
    669c:	02bc0b00 	adcseq	r0, ip, #0, 22
    66a0:	34040000 	strcc	r0, [r4], #-0
    66a4:	0000d207 	andeq	sp, r0, r7, lsl #4
    66a8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    66ac:	00980b00 	addseq	r0, r8, r0, lsl #22
    66b0:	35040000 	strcc	r0, [r4, #-0]
    66b4:	0000d203 	andeq	sp, r0, r3, lsl #4
    66b8:	06010100 	streq	r0, [r1], -r0, lsl #2
    66bc:	028a0b00 	addeq	r0, sl, #0, 22
    66c0:	36040000 	strcc	r0, [r4], -r0
    66c4:	0000d203 	andeq	sp, r0, r3, lsl #4
    66c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    66cc:	041b0b00 	ldreq	r0, [fp], #-2816	; 0xfffff500
    66d0:	37040000 	strcc	r0, [r4, -r0]
    66d4:	0000d203 	andeq	sp, r0, r3, lsl #4
    66d8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    66dc:	04140b00 	ldreq	r0, [r4], #-2816	; 0xfffff500
    66e0:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    66e4:	0000d203 	andeq	sp, r0, r3, lsl #4
    66e8:	00040100 	andeq	r0, r4, r0, lsl #2
    66ec:	04050c00 	streq	r0, [r5], #-3072	; 0xfffff400
    66f0:	3a040000 	bcc	1066f8 <__ccfg+0xe6750>
    66f4:	0000d207 	andeq	sp, r0, r7, lsl #4
    66f8:	400c0100 	andmi	r0, ip, r0, lsl #2
    66fc:	04000000 	streq	r0, [r0], #-0
    6700:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    6704:	0c020000 	stceq	0, cr0, [r2], {-0}
    6708:	0000006d 	andeq	r0, r0, sp, rrx
    670c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    6710:	03000000 	movweq	r0, #0
    6714:	0001530c 	andeq	r5, r1, ip, lsl #6
    6718:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    671c:	000000e3 	andeq	r0, r0, r3, ror #1
    6720:	44030004 	strmi	r0, [r3], #-4
    6724:	04000004 	streq	r0, [r0], #-4
    6728:	01000341 	tsteq	r0, r1, asr #6
    672c:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6730:	0d000001 	stceq	0, cr0, [r0, #-4]
    6734:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    6738:	9a1a4304 	bls	697350 <__ccfg+0x6773a8>
    673c:	01000001 	tsteq	r0, r1
    6740:	031c0d01 	tsteq	ip, #1, 26	; 0x40
    6744:	45040000 	strmi	r0, [r4, #-0]
    6748:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    674c:	0e010100 	adfeqs	f0, f1, f0
    6750:	0001c104 	andeq	ip, r1, r4, lsl #2
    6754:	08010200 	stmdaeq	r1, {r9}
    6758:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    675c:	0001c108 	andeq	ip, r1, r8, lsl #2
    6760:	032a0d00 			; <UNDEFINED> instruction: 0x032a0d00
    6764:	45040000 	strmi	r0, [r4, #-0]
    6768:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    676c:	0a010100 	beq	46b74 <__ccfg+0x26bcc>
    6770:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6774:	0000020c 	andeq	r0, r0, ip, lsl #4
    6778:	0002c30c 	andeq	ip, r2, ip, lsl #6
    677c:	0b900500 	bleq	fe407b84 <_estack+0xde402b84>
    6780:	00000067 	andeq	r0, r0, r7, rrx
    6784:	06090c00 	streq	r0, [r9], -r0, lsl #24
    6788:	91050000 	mrsls	r0, (UNDEF: 5)
    678c:	0000c108 	andeq	ip, r0, r8, lsl #2
    6790:	870c0400 	strhi	r0, [ip, -r0, lsl #8]
    6794:	05000004 	streq	r0, [r0, #-4]
    6798:	00de1092 	smullseq	r1, lr, r2, r0
    679c:	00060000 	andeq	r0, r6, r0
    67a0:	00042203 	andeq	r2, r4, r3, lsl #4
    67a4:	03930500 	orrseq	r0, r3, #0, 10
    67a8:	000001db 	ldrdeq	r0, [r0], -fp
    67ac:	00020c0f 	andeq	r0, r2, pc, lsl #24
    67b0:	00022300 	andeq	r2, r2, r0, lsl #6
    67b4:	0d001000 	stceq	0, cr1, [r0, #-0]
    67b8:	00000036 	andeq	r0, r0, r6, lsr r0
    67bc:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    67c0:	01000002 	tsteq	r0, r2
    67c4:	06010a01 	streq	r0, [r1], -r1, lsl #20
    67c8:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    67cc:	7a0b0000 	bvc	2c67d4 <__ccfg+0x2a682c>
    67d0:	06000004 	streq	r0, [r0], -r4
    67d4:	00d20793 	smullseq	r0, r2, r3, r7
    67d8:	07010000 	streq	r0, [r1, -r0]
    67dc:	310b0001 	tstcc	fp, r1
    67e0:	06000000 	streq	r0, [r0], -r0
    67e4:	00d20394 	smullseq	r0, r2, r4, r3
    67e8:	01010000 	mrseq	r0, (UNDEF: 1)
    67ec:	03000000 	movweq	r0, #0
    67f0:	00000281 	andeq	r0, r0, r1, lsl #5
    67f4:	31039606 	tstcc	r3, r6, lsl #12
    67f8:	08000002 	stmdaeq	r0, {r1}
    67fc:	0000025b 	andeq	r0, r0, fp, asr r2
    6800:	0002670f 	andeq	r6, r2, pc, lsl #14
    6804:	00027700 	andeq	r7, r2, r0, lsl #14
    6808:	08001000 	stmdaeq	r0, {ip}
    680c:	0000026c 	andeq	r0, r0, ip, ror #4
    6810:	0002e60d 	andeq	lr, r2, sp, lsl #12
    6814:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    6818:	00000277 	andeq	r0, r0, r7, ror r2
    681c:	cd0f0101 	stfgts	f0, [pc, #-4]	; 6820 <__exidx_end+0x3a94>
    6820:	95000000 	strls	r0, [r0, #-0]
    6824:	10000002 	andne	r0, r0, r2
    6828:	028a0800 	addeq	r0, sl, #0, 16
    682c:	a20d0000 	andge	r0, sp, #0
    6830:	07000003 	streq	r0, [r0, -r3]
    6834:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    6838:	01010000 	mrseq	r0, (UNDEF: 1)
    683c:	0001330d 	andeq	r3, r1, sp, lsl #6
    6840:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6844:	000000e3 	andeq	r0, r0, r3, ror #1
    6848:	94110101 	ldrls	r0, [r1], #-257	; 0xfffffeff
    684c:	08000004 	stmdaeq	r0, {r2}
    6850:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6854:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6858:	0002c904 	andeq	ip, r2, r4, lsl #18
    685c:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    6860:	13000002 	movwne	r0, #2
    6864:	000000c1 	andeq	r0, r0, r1, asr #1
    6868:	01c80f00 	biceq	r0, r8, r0, lsl #30
    686c:	02e00000 	rsceq	r0, r0, #0
    6870:	00100000 	andseq	r0, r0, r0
    6874:	0002d508 	andeq	sp, r2, r8, lsl #10
    6878:	04541400 	ldrbeq	r1, [r4], #-1024	; 0xfffffc00
    687c:	7f080000 	svcvc	0x00080000
    6880:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    6884:	01010000 	mrseq	r0, (UNDEF: 1)
    6888:	00039a14 	andeq	r9, r3, r4, lsl sl
    688c:	01820800 	orreq	r0, r2, r0, lsl #16
    6890:	0000ef14 	andeq	lr, r0, r4, lsl pc
    6894:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6898:	0000047f 	andeq	r0, r0, pc, ror r4
    689c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    68a0:	000000e3 	andeq	r0, r0, r3, ror #1
    68a4:	08150101 	ldmdaeq	r5, {r0, r8}
    68a8:	09030308 	stmdbeq	r3, {r3, r8, r9}
    68ac:	00000339 	andeq	r0, r0, r9, lsr r3
    68b0:	00221016 	eoreq	r1, r2, r6, lsl r0
    68b4:	03070800 	movweq	r0, #30720	; 0x7800
    68b8:	0000c107 	andeq	ip, r0, r7, lsl #2
    68bc:	5b160000 	blpl	5868c4 <__ccfg+0x56691c>
    68c0:	08000005 	stmdaeq	r0, {r0, r2}
    68c4:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    68c8:	04000000 	streq	r0, [r0], #-0
    68cc:	02611100 	rsbeq	r1, r1, #0, 2
    68d0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    68d4:	03120303 	tsteq	r2, #201326592	; 0xc000000
    68d8:	a3170000 	tstge	r7, #0
    68dc:	30000004 	andcc	r0, r0, r4
    68e0:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    68e4:	000003a9 	andeq	r0, r0, r9, lsr #7
    68e8:	00049c16 	andeq	r9, r4, r6, lsl ip
    68ec:	03140800 	tsteq	r4, #0, 16
    68f0:	0000c108 	andeq	ip, r0, r8, lsl #2
    68f4:	cd160000 	ldcgt	0, cr0, [r6, #-0]
    68f8:	08000002 	stmdaeq	r0, {r1}
    68fc:	c1080315 	tstgt	r8, r5, lsl r3
    6900:	02000000 	andeq	r0, r0, #0
    6904:	00049716 	andeq	r9, r4, r6, lsl r7
    6908:	03160800 	tsteq	r6, #0, 16
    690c:	0002b60b 	andeq	fp, r2, fp, lsl #12
    6910:	5b160400 	blpl	587918 <__ccfg+0x567970>
    6914:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    6918:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    691c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6920:	00044d16 	andeq	r4, r4, r6, lsl sp
    6924:	03180800 	tsteq	r8, #0, 16
    6928:	0003a90f 	andeq	sl, r3, pc, lsl #18
    692c:	c8160c00 	ldmdagt	r6, {sl, fp}
    6930:	08000002 	stmdaeq	r0, {r1}
    6934:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    6938:	2c000003 	stccs	0, cr0, [r0], {3}
    693c:	03390f00 	teqeq	r9, #0, 30
    6940:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    6944:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    6948:	03000000 	movweq	r0, #0
    694c:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    6950:	11000003 	tstne	r0, r3
    6954:	000004ae 	andeq	r0, r0, lr, lsr #9
    6958:	1b031c08 	blne	cd980 <__ccfg+0xad9d8>
    695c:	00000346 	andeq	r0, r0, r6, asr #6
    6960:	00039014 	andeq	r9, r3, r4, lsl r0
    6964:	031e0800 	tsteq	lr, #0, 16
    6968:	0003db14 	andeq	sp, r3, r4, lsl fp
    696c:	0e010100 	adfeqs	f0, f1, f0
    6970:	0003bf04 	andeq	fp, r3, r4, lsl #30
    6974:	13e20d00 	mvnne	r0, #0, 26
    6978:	0a010000 	beq	46980 <__ccfg+0x269d8>
    697c:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    6980:	19010100 	stmdbne	r1, {r8}
    6984:	0014c101 	andseq	ip, r4, r1, lsl #2
    6988:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    698c:	00008101 	andeq	r8, r0, r1, lsl #2
    6990:	00177800 	andseq	r7, r7, r0, lsl #16
    6994:	0017d800 	andseq	sp, r7, r0, lsl #16
    6998:	499c0100 	ldmibmi	ip, {r8}
    699c:	1a000004 	bne	69b4 <__exidx_end+0x3c28>
    69a0:	01007473 	tsteq	r0, r3, ror r4
    69a4:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    69a8:	23ed0000 	mvncs	r0, #0
    69ac:	661b0000 	ldrvs	r0, [fp], -r0
    69b0:	0100746d 	tsteq	r0, sp, ror #8
    69b4:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    69b8:	91020000 	mrsls	r0, (UNDEF: 2)
    69bc:	321d1c74 	andscc	r1, sp, #116, 24	; 0x7400
    69c0:	01000014 	tsteq	r0, r4, lsl r0
    69c4:	00810613 	addeq	r0, r1, r3, lsl r6
    69c8:	240b0000 	strcs	r0, [fp], #-0
    69cc:	611e0000 	tstvs	lr, r0
    69d0:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    69d4:	0000b50a 	andeq	fp, r0, sl, lsl #10
    69d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    69dc:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    69e0:	00000001 	andeq	r0, r0, r1
    69e4:	0000042d 	andeq	r0, r0, sp, lsr #8
    69e8:	1e260003 	cdpne	0, 2, cr0, cr6, cr3, {0}
    69ec:	01040000 	mrseq	r0, (UNDEF: 4)
    69f0:	0000016d 	andeq	r0, r0, sp, ror #2
    69f4:	0014c90c 	andseq	ip, r4, ip, lsl #18
    69f8:	0000db00 	andeq	sp, r0, r0, lsl #22
    69fc:	000c3000 	andeq	r3, ip, r0
    6a00:	00000000 	andeq	r0, r0, r0
    6a04:	004c5600 	subeq	r5, ip, r0, lsl #12
    6a08:	06010200 	streq	r0, [r1], -r0, lsl #4
    6a0c:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    6a10:	ec050202 	sfm	f0, 4, [r5], {2}
    6a14:	02000003 	andeq	r0, r0, #3
    6a18:	00a40504 	adceq	r0, r4, r4, lsl #10
    6a1c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6a20:	00009f05 	andeq	r9, r0, r5, lsl #30
    6a24:	22180300 	andscs	r0, r8, #0, 6
    6a28:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6a2c:	00004d18 	andeq	r4, r0, r8, lsl sp
    6a30:	08010200 	stmdaeq	r1, {r9}
    6a34:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    6a38:	00210603 	eoreq	r0, r1, r3, lsl #12
    6a3c:	19310200 	ldmdbne	r1!, {r9}
    6a40:	00000060 	andeq	r0, r0, r0, rrx
    6a44:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
    6a48:	03000002 	movweq	r0, #2
    6a4c:	000017cf 	andeq	r1, r0, pc, asr #15
    6a50:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6a54:	02000000 	andeq	r0, r0, #0
    6a58:	00790704 	rsbseq	r0, r9, r4, lsl #14
    6a5c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6a60:	00007407 	andeq	r7, r0, r7, lsl #8
    6a64:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6a68:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6a6c:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    6a70:	03000000 	movweq	r0, #0
    6a74:	000015dc 	ldrdeq	r1, [r0], -ip
    6a78:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    6a7c:	05000000 	streq	r0, [r0, #-0]
    6a80:	0000008f 	andeq	r0, r0, pc, lsl #1
    6a84:	0013d403 	andseq	sp, r3, r3, lsl #8
    6a88:	122b0300 	eorne	r0, fp, #0, 6
    6a8c:	00000041 	andeq	r0, r0, r1, asr #32
    6a90:	0000a006 	andeq	sl, r0, r6
    6a94:	162d0300 	strtne	r0, [sp], -r0, lsl #6
    6a98:	2c030000 	stccs	0, cr0, [r3], {-0}
    6a9c:	00006712 	andeq	r6, r0, r2, lsl r7
    6aa0:	00b10500 	adcseq	r0, r1, r0, lsl #10
    6aa4:	a1030000 	mrsge	r0, (UNDEF: 3)
    6aa8:	03000002 	movweq	r0, #2
    6aac:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6ab0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6ab4:	5c093203 	sfmpl	f3, 4, [r9], {3}
    6ab8:	08000001 	stmdaeq	r0, {r0}
    6abc:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    6ac0:	a0073403 	andge	r3, r7, r3, lsl #8
    6ac4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ac8:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    6acc:	00000098 	muleq	r0, r8, r0
    6ad0:	a0033503 	andge	r3, r3, r3, lsl #10
    6ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ad8:	08000601 	stmdaeq	r0, {r0, r9, sl}
    6adc:	0000028a 	andeq	r0, r0, sl, lsl #5
    6ae0:	a0033603 	andge	r3, r3, r3, lsl #12
    6ae4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ae8:	08000501 	stmdaeq	r0, {r0, r8, sl}
    6aec:	0000041b 	andeq	r0, r0, fp, lsl r4
    6af0:	a0033703 	andge	r3, r3, r3, lsl #14
    6af4:	01000000 	mrseq	r0, (UNDEF: 0)
    6af8:	08000401 	stmdaeq	r0, {r0, sl}
    6afc:	00000414 	andeq	r0, r0, r4, lsl r4
    6b00:	a0033803 	andge	r3, r3, r3, lsl #16
    6b04:	01000000 	mrseq	r0, (UNDEF: 0)
    6b08:	09000004 	stmdbeq	r0, {r2}
    6b0c:	00000405 	andeq	r0, r0, r5, lsl #8
    6b10:	a0073a03 	andge	r3, r7, r3, lsl #20
    6b14:	01000000 	mrseq	r0, (UNDEF: 0)
    6b18:	00004009 	andeq	r4, r0, r9
    6b1c:	033c0300 	teqeq	ip, #0, 6
    6b20:	000000a0 	andeq	r0, r0, r0, lsr #1
    6b24:	006d0902 	rsbeq	r0, sp, r2, lsl #18
    6b28:	3d030000 	stccc	0, cr0, [r3, #-0]
    6b2c:	0000a003 	andeq	sl, r0, r3
    6b30:	53090300 	movwpl	r0, #37632	; 0x9300
    6b34:	03000001 	movweq	r0, #1
    6b38:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    6b3c:	00040000 	andeq	r0, r4, r0
    6b40:	00044403 	andeq	r4, r4, r3, lsl #8
    6b44:	03410300 	movteq	r0, #4864	; 0x1300
    6b48:	000000ce 	andeq	r0, r0, lr, asr #1
    6b4c:	00015c06 	andeq	r5, r1, r6, lsl #24
    6b50:	02b00a00 	adcseq	r0, r0, #0, 20
    6b54:	43030000 	movwmi	r0, #12288	; 0x3000
    6b58:	0001681a 	andeq	r6, r1, sl, lsl r8
    6b5c:	0a010100 	beq	46f64 <__ccfg+0x26fbc>
    6b60:	0000031c 	andeq	r0, r0, ip, lsl r3
    6b64:	890e4503 	stmdbhi	lr, {r0, r1, r8, sl, lr}
    6b68:	01000001 	tsteq	r0, r1
    6b6c:	8f040b01 	svchi	0x00040b01
    6b70:	02000001 	andeq	r0, r0, #1
    6b74:	03b90801 			; <UNDEFINED> instruction: 0x03b90801
    6b78:	8f050000 	svchi	0x00050000
    6b7c:	0a000001 	beq	6b88 <__exidx_end+0x3dfc>
    6b80:	0000032a 	andeq	r0, r0, sl, lsr #6
    6b84:	891e4503 	ldmdbhi	lr, {r0, r1, r8, sl, lr}
    6b88:	01000001 	tsteq	r0, r1
    6b8c:	04080701 	streq	r0, [r8], #-1793	; 0xfffff8ff
    6b90:	01da098f 	bicseq	r0, sl, pc, lsl #19
    6b94:	c3090000 	movwgt	r0, #36864	; 0x9000
    6b98:	04000002 	streq	r0, [r0], #-2
    6b9c:	00670b90 	mlseq	r7, r0, fp, r0
    6ba0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6ba4:	00000609 	andeq	r0, r0, r9, lsl #12
    6ba8:	8f089104 	svchi	0x00089104
    6bac:	04000000 	streq	r0, [r0], #-0
    6bb0:	00048709 	andeq	r8, r4, r9, lsl #14
    6bb4:	10920400 	addsne	r0, r2, r0, lsl #8
    6bb8:	000000ac 	andeq	r0, r0, ip, lsr #1
    6bbc:	22030006 	andcs	r0, r3, #6
    6bc0:	04000004 	streq	r0, [r0], #-4
    6bc4:	01a90393 			; <UNDEFINED> instruction: 0x01a90393
    6bc8:	da0c0000 	ble	306bd0 <__ccfg+0x2e6c28>
    6bcc:	f1000001 	cps	#1
    6bd0:	0d000001 	stceq	0, cr0, [r0, #-4]
    6bd4:	00360a00 	eorseq	r0, r6, r0, lsl #20
    6bd8:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    6bdc:	0001e60f 	andeq	lr, r1, pc, lsl #12
    6be0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6be4:	09910501 	ldmibeq	r1, {r0, r8, sl}
    6be8:	00000229 	andeq	r0, r0, r9, lsr #4
    6bec:	00047a08 	andeq	r7, r4, r8, lsl #20
    6bf0:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    6bf4:	000000a0 	andeq	r0, r0, r0, lsr #1
    6bf8:	00010701 	andeq	r0, r1, r1, lsl #14
    6bfc:	00003108 	andeq	r3, r0, r8, lsl #2
    6c00:	03940500 	orrseq	r0, r4, #0, 10
    6c04:	000000a0 	andeq	r0, r0, r0, lsr #1
    6c08:	00000101 	andeq	r0, r0, r1, lsl #2
    6c0c:	02810300 	addeq	r0, r1, #0, 6
    6c10:	96050000 	strls	r0, [r5], -r0
    6c14:	0001ff03 	andeq	pc, r1, r3, lsl #30
    6c18:	02290500 	eoreq	r0, r9, #0, 10
    6c1c:	350c0000 	strcc	r0, [ip, #-0]
    6c20:	45000002 	strmi	r0, [r0, #-2]
    6c24:	0d000002 	stceq	0, cr0, [r0, #-8]
    6c28:	023a0500 	eorseq	r0, sl, #0, 10
    6c2c:	e60a0000 	str	r0, [sl], -r0
    6c30:	05000002 	streq	r0, [r0, #-2]
    6c34:	0245179c 	subeq	r1, r5, #156, 14	; 0x2700000
    6c38:	01010000 	mrseq	r0, (UNDEF: 1)
    6c3c:	00009b0c 	andeq	r9, r0, ip, lsl #22
    6c40:	00026300 	andeq	r6, r2, r0, lsl #6
    6c44:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6c48:	00000258 	andeq	r0, r0, r8, asr r2
    6c4c:	0003a20a 	andeq	sl, r3, sl, lsl #4
    6c50:	13060600 	movwne	r0, #26112	; 0x6600
    6c54:	00000263 	andeq	r0, r0, r3, ror #4
    6c58:	330a0101 	movwcc	r0, #41217	; 0xa101
    6c5c:	04000001 	streq	r0, [r0], #-1
    6c60:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    6c64:	01010000 	mrseq	r0, (UNDEF: 1)
    6c68:	0004940e 	andeq	r9, r4, lr, lsl #8
    6c6c:	016e0700 	cmneq	lr, r0, lsl #14
    6c70:	00029110 	andeq	r9, r2, r0, lsl r1
    6c74:	97040b00 	strls	r0, [r4, -r0, lsl #22]
    6c78:	0f000002 	svceq	0x00000002
    6c7c:	0002a301 	andeq	sl, r2, r1, lsl #6
    6c80:	008f1000 	addeq	r1, pc, r0
    6c84:	0c000000 	stceq	0, cr0, [r0], {-0}
    6c88:	00000196 	muleq	r0, r6, r1
    6c8c:	000002ae 	andeq	r0, r0, lr, lsr #5
    6c90:	a305000d 	movwge	r0, #20493	; 0x500d
    6c94:	11000002 	tstne	r0, r2
    6c98:	00000454 	andeq	r0, r0, r4, asr r4
    6c9c:	16017f07 	strne	r7, [r1], -r7, lsl #30
    6ca0:	000002ae 	andeq	r0, r0, lr, lsr #5
    6ca4:	9a110101 	bls	4470b0 <__ccfg+0x427108>
    6ca8:	07000003 	streq	r0, [r0, -r3]
    6cac:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    6cb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cb4:	047f1101 	ldrbteq	r1, [pc], #-257	; 6cbc <__exidx_end+0x3f30>
    6cb8:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    6cbc:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    6cc0:	01010000 	mrseq	r0, (UNDEF: 1)
    6cc4:	03070812 	movweq	r0, #30738	; 0x7812
    6cc8:	03070903 	movweq	r0, #30979	; 0x7903
    6ccc:	10130000 	andsne	r0, r3, r0
    6cd0:	07000022 	streq	r0, [r0, -r2, lsr #32]
    6cd4:	8f070307 	svchi	0x00070307
    6cd8:	00000000 	andeq	r0, r0, r0
    6cdc:	00055b13 	andeq	r5, r5, r3, lsl fp
    6ce0:	03080700 	movweq	r0, #34560	; 0x8700
    6ce4:	0000c208 	andeq	ip, r0, r8, lsl #4
    6ce8:	0e000400 	cfcpyseq	mvf0, mvf0
    6cec:	00000261 	andeq	r0, r0, r1, ror #4
    6cf0:	03030907 	movweq	r0, #14599	; 0x3907
    6cf4:	000002e0 	andeq	r0, r0, r0, ror #5
    6cf8:	0004a314 	andeq	sl, r4, r4, lsl r3
    6cfc:	0b073000 	bleq	1d2d04 <__ccfg+0x1b2d5c>
    6d00:	03770803 	cmneq	r7, #196608	; 0x30000
    6d04:	9c130000 	ldcls	0, cr0, [r3], {-0}
    6d08:	07000004 	streq	r0, [r0, -r4]
    6d0c:	8f080314 	svchi	0x00080314
    6d10:	00000000 	andeq	r0, r0, r0
    6d14:	0002cd13 	andeq	ip, r2, r3, lsl sp
    6d18:	03150700 	tsteq	r5, #0, 14
    6d1c:	00008f08 	andeq	r8, r0, r8, lsl #30
    6d20:	97130200 	ldrls	r0, [r3, -r0, lsl #4]
    6d24:	07000004 	streq	r0, [r0, -r4]
    6d28:	840b0316 	strhi	r0, [fp], #-790	; 0xfffffcea
    6d2c:	04000002 	streq	r0, [r0], #-2
    6d30:	000f5b13 	andeq	r5, pc, r3, lsl fp	; <UNPREDICTABLE>
    6d34:	03170700 	tsteq	r7, #0, 14
    6d38:	0000c209 	andeq	ip, r0, r9, lsl #4
    6d3c:	4d130800 	ldcmi	8, cr0, [r3, #-0]
    6d40:	07000004 	streq	r0, [r0, -r4]
    6d44:	770f0318 	smladvc	pc, r8, r3, r0	; <UNPREDICTABLE>
    6d48:	0c000003 	stceq	0, cr0, [r0], {3}
    6d4c:	0002c813 	andeq	ip, r2, r3, lsl r8
    6d50:	03190700 	tsteq	r9, #0, 14
    6d54:	00038715 	andeq	r8, r3, r5, lsl r7
    6d58:	0c002c00 	stceq	12, cr2, [r0], {-0}
    6d5c:	00000307 	andeq	r0, r0, r7, lsl #6
    6d60:	00000387 	andeq	r0, r0, r7, lsl #7
    6d64:	00008815 	andeq	r8, r0, r5, lsl r8
    6d68:	0b000300 	bleq	7970 <__exidx_end+0x4be4>
    6d6c:	00031404 	andeq	r1, r3, r4, lsl #8
    6d70:	04ae0e00 	strteq	r0, [lr], #3584	; 0xe00
    6d74:	1c070000 	stcne	0, cr0, [r7], {-0}
    6d78:	03141b03 	tsteq	r4, #3072	; 0xc00
    6d7c:	90110000 	andsls	r0, r1, r0
    6d80:	07000003 	streq	r0, [r0, -r3]
    6d84:	a914031e 	ldmdbge	r4, {r1, r2, r3, r4, r8, r9}
    6d88:	01000003 	tsteq	r0, r3
    6d8c:	8d040b01 	vstrhi	d0, [r4, #-4]
    6d90:	16000003 	strne	r0, [r0], -r3
    6d94:	00151301 	andseq	r1, r5, r1, lsl #6
    6d98:	011d0100 	tsteq	sp, r0, lsl #2
    6d9c:	0017d801 	andseq	sp, r7, r1, lsl #16
    6da0:	00184800 	andseq	r4, r8, r0, lsl #16
    6da4:	2a9c0100 	bcs	fe7071ac <_estack+0xde7021ac>
    6da8:	17000004 	strne	r0, [r0, -r4]
    6dac:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    6db0:	8f011d01 	svchi	0x00011d01
    6db4:	55000000 	strpl	r0, [r0, #-0]
    6db8:	18000024 	stmdane	r0, {r2, r5}
    6dbc:	00000f5b 	andeq	r0, r0, fp, asr pc
    6dc0:	2a011d01 	bcs	4e1cc <__ccfg+0x2e224>
    6dc4:	7e000004 	cdpvc	0, 0, cr0, cr0, cr4, {0}
    6dc8:	19000024 	stmdbne	r0, {r2, r5}
    6dcc:	0000151f 	andeq	r1, r0, pc, lsl r5
    6dd0:	1a013001 	bne	52ddc <__ccfg+0x32e34>
    6dd4:	00000c18 	andeq	r0, r0, r8, lsl ip
    6dd8:	7274701b 	rsbsvc	r7, r4, #27
    6ddc:	15220100 	strne	r0, [r2, #-256]!	; 0xffffff00
    6de0:	0000042a 	andeq	r0, r0, sl, lsr #8
    6de4:	00580305 	subseq	r0, r8, r5, lsl #6
    6de8:	6c1b2000 	ldcvs	0, cr2, [fp], {-0}
    6dec:	01006e65 	tsteq	r0, r5, ror #28
    6df0:	00810d23 	addeq	r0, r1, r3, lsr #26
    6df4:	03050000 	movweq	r0, #20480	; 0x5000
    6df8:	20000054 	andcs	r0, r0, r4, asr r0
    6dfc:	00150d18 	andseq	r0, r5, r8, lsl sp
    6e00:	06240100 	strteq	r0, [r4], -r0, lsl #2
    6e04:	00000081 	andeq	r0, r0, r1, lsl #1
    6e08:	000024a8 	andeq	r2, r0, r8, lsr #9
    6e0c:	040b0000 	streq	r0, [fp], #-0
    6e10:	00000196 	muleq	r0, r6, r1
    6e14:	00044000 	andeq	r4, r4, r0
    6e18:	9a000300 	bls	7a20 <__exidx_end+0x4c94>
    6e1c:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    6e20:	00016d01 	andeq	r6, r1, r1, lsl #26
    6e24:	15350c00 	ldrne	r0, [r5, #-3072]!	; 0xfffff400
    6e28:	00db0000 	sbcseq	r0, fp, r0
    6e2c:	0c600000 	stcleq	0, cr0, [r0], #-0
    6e30:	00000000 	andeq	r0, r0, r0
    6e34:	4dfb0000 	ldclmi	0, cr0, [fp]
    6e38:	01020000 	mrseq	r0, (UNDEF: 2)
    6e3c:	0003b206 	andeq	fp, r3, r6, lsl #4
    6e40:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6e44:	000003ec 	andeq	r0, r0, ip, ror #7
    6e48:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    6e4c:	02000000 	andeq	r0, r0, #0
    6e50:	009f0508 	addseq	r0, pc, r8, lsl #10
    6e54:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    6e58:	02000022 	andeq	r0, r0, #34	; 0x22
    6e5c:	004d182e 	subeq	r1, sp, lr, lsr #16
    6e60:	01020000 	mrseq	r0, (UNDEF: 2)
    6e64:	0003b008 	andeq	fp, r3, r8
    6e68:	21060300 	mrscs	r0, LR_und
    6e6c:	31020000 	mrscc	r0, (UNDEF: 2)
    6e70:	00006019 	andeq	r6, r0, r9, lsl r0
    6e74:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6e78:	0000026e 	andeq	r0, r0, lr, ror #4
    6e7c:	0017cf03 	andseq	ip, r7, r3, lsl #30
    6e80:	19340200 	ldmdbne	r4!, {r9}
    6e84:	00000073 	andeq	r0, r0, r3, ror r0
    6e88:	79070402 	stmdbvc	r7, {r1, sl}
    6e8c:	02000000 	andeq	r0, r0, #0
    6e90:	00740708 	rsbseq	r0, r4, r8, lsl #14
    6e94:	04040000 	streq	r0, [r4], #-0
    6e98:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6e9c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6ea0:	0000007e 	andeq	r0, r0, lr, ror r0
    6ea4:	0015dc03 	andseq	sp, r5, r3, lsl #24
    6ea8:	12270300 	eorne	r0, r7, #0, 6
    6eac:	00000054 	andeq	r0, r0, r4, asr r0
    6eb0:	00008f05 	andeq	r8, r0, r5, lsl #30
    6eb4:	13d40300 	bicsne	r0, r4, #0, 6
    6eb8:	2b030000 	blcs	c6ec0 <__ccfg+0xa6f18>
    6ebc:	00004112 	andeq	r4, r0, r2, lsl r1
    6ec0:	00a00600 	adceq	r0, r0, r0, lsl #12
    6ec4:	2d030000 	stccs	0, cr0, [r3, #-0]
    6ec8:	03000016 	movweq	r0, #22
    6ecc:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6ed0:	b1050000 	mrslt	r0, (UNDEF: 5)
    6ed4:	03000000 	movweq	r0, #0
    6ed8:	000002a1 	andeq	r0, r0, r1, lsr #5
    6edc:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    6ee0:	03000000 	movweq	r0, #0
    6ee4:	0000077e 	andeq	r0, r0, lr, ror r7
    6ee8:	da102e03 	ble	4126fc <__ccfg+0x3f2754>
    6eec:	07000000 	streq	r0, [r0, -r0]
    6ef0:	00008f04 	andeq	r8, r0, r4, lsl #30
    6ef4:	03080800 	movweq	r0, #34816	; 0x8800
    6ef8:	016e0932 	cmneq	lr, r2, lsr r9
    6efc:	bc090000 	stclt	0, cr0, [r9], {-0}
    6f00:	03000002 	movweq	r0, #2
    6f04:	00a00734 	adceq	r0, r0, r4, lsr r7
    6f08:	01010000 	mrseq	r0, (UNDEF: 1)
    6f0c:	98090007 	stmdals	r9, {r0, r1, r2}
    6f10:	03000000 	movweq	r0, #0
    6f14:	00a00335 	adceq	r0, r0, r5, lsr r3
    6f18:	01010000 	mrseq	r0, (UNDEF: 1)
    6f1c:	8a090006 	bhi	246f3c <__ccfg+0x226f94>
    6f20:	03000002 	movweq	r0, #2
    6f24:	00a00336 	adceq	r0, r0, r6, lsr r3
    6f28:	01010000 	mrseq	r0, (UNDEF: 1)
    6f2c:	1b090005 	blne	246f48 <__ccfg+0x226fa0>
    6f30:	03000004 	movweq	r0, #4
    6f34:	00a00337 	adceq	r0, r0, r7, lsr r3
    6f38:	01010000 	mrseq	r0, (UNDEF: 1)
    6f3c:	14090004 	strne	r0, [r9], #-4
    6f40:	03000004 	movweq	r0, #4
    6f44:	00a00338 	adceq	r0, r0, r8, lsr r3
    6f48:	04010000 	streq	r0, [r1], #-0
    6f4c:	050a0000 	streq	r0, [sl, #-0]
    6f50:	03000004 	movweq	r0, #4
    6f54:	00a0073a 	adceq	r0, r0, sl, lsr r7
    6f58:	0a010000 	beq	46f60 <__ccfg+0x26fb8>
    6f5c:	00000040 	andeq	r0, r0, r0, asr #32
    6f60:	a0033c03 	andge	r3, r3, r3, lsl #24
    6f64:	02000000 	andeq	r0, r0, #0
    6f68:	00006d0a 	andeq	r6, r0, sl, lsl #26
    6f6c:	033d0300 	teqeq	sp, #0, 6
    6f70:	000000a0 	andeq	r0, r0, r0, lsr #1
    6f74:	01530a03 	cmpeq	r3, r3, lsl #20
    6f78:	3f030000 	svccc	0x00030000
    6f7c:	0000b108 	andeq	fp, r0, r8, lsl #2
    6f80:	03000400 	movweq	r0, #1024	; 0x400
    6f84:	00000444 	andeq	r0, r0, r4, asr #8
    6f88:	e0034103 	and	r4, r3, r3, lsl #2
    6f8c:	06000000 	streq	r0, [r0], -r0
    6f90:	0000016e 	andeq	r0, r0, lr, ror #2
    6f94:	0002b00b 	andeq	fp, r2, fp
    6f98:	1a430300 	bne	10c7ba0 <__ccfg+0x10a7bf8>
    6f9c:	0000017a 	andeq	r0, r0, sl, ror r1
    6fa0:	1c0b0101 	stfnes	f0, [fp], {1}
    6fa4:	03000003 	movweq	r0, #3
    6fa8:	019b0e45 	orrseq	r0, fp, r5, asr #28
    6fac:	01010000 	mrseq	r0, (UNDEF: 1)
    6fb0:	01a10407 			; <UNDEFINED> instruction: 0x01a10407
    6fb4:	01020000 	mrseq	r0, (UNDEF: 2)
    6fb8:	0003b908 	andeq	fp, r3, r8, lsl #18
    6fbc:	01a10500 			; <UNDEFINED> instruction: 0x01a10500
    6fc0:	2a0b0000 	bcs	2c6fc8 <__ccfg+0x2a7020>
    6fc4:	03000003 	movweq	r0, #3
    6fc8:	019b1e45 	orrseq	r1, fp, r5, asr #28
    6fcc:	01010000 	mrseq	r0, (UNDEF: 1)
    6fd0:	8f040808 	svchi	0x00040808
    6fd4:	0001ec09 	andeq	lr, r1, r9, lsl #24
    6fd8:	02c30a00 	sbceq	r0, r3, #0, 20
    6fdc:	90040000 	andls	r0, r4, r0
    6fe0:	0000670b 	andeq	r6, r0, fp, lsl #14
    6fe4:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    6fe8:	04000006 	streq	r0, [r0], #-6
    6fec:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    6ff0:	0a040000 	beq	106ff8 <__ccfg+0xe7050>
    6ff4:	00000487 	andeq	r0, r0, r7, lsl #9
    6ff8:	ac109204 	lfmge	f1, 1, [r0], {4}
    6ffc:	06000000 	streq	r0, [r0], -r0
    7000:	04220300 	strteq	r0, [r2], #-768	; 0xfffffd00
    7004:	93040000 	movwls	r0, #16384	; 0x4000
    7008:	0001bb03 	andeq	fp, r1, r3, lsl #22
    700c:	01ec0c00 	mvneq	r0, r0, lsl #24
    7010:	02030000 	andeq	r0, r3, #0
    7014:	000d0000 	andeq	r0, sp, r0
    7018:	0000360b 	andeq	r3, r0, fp, lsl #12
    701c:	0f990400 	svceq	0x00990400
    7020:	000001f8 	strdeq	r0, [r0], -r8
    7024:	01080101 	tsteq	r8, r1, lsl #2
    7028:	3b099105 	blcc	26b444 <__ccfg+0x24b49c>
    702c:	09000002 	stmdbeq	r0, {r1}
    7030:	0000047a 	andeq	r0, r0, sl, ror r4
    7034:	a0079305 	andge	r9, r7, r5, lsl #6
    7038:	01000000 	mrseq	r0, (UNDEF: 0)
    703c:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    7040:	00000031 	andeq	r0, r0, r1, lsr r0
    7044:	a0039405 	andge	r9, r3, r5, lsl #8
    7048:	01000000 	mrseq	r0, (UNDEF: 0)
    704c:	00000001 	andeq	r0, r0, r1
    7050:	00028103 	andeq	r8, r2, r3, lsl #2
    7054:	03960500 	orrseq	r0, r6, #0, 10
    7058:	00000211 	andeq	r0, r0, r1, lsl r2
    705c:	00023b05 	andeq	r3, r2, r5, lsl #22
    7060:	02470c00 	subeq	r0, r7, #0, 24
    7064:	02570000 	subseq	r0, r7, #0
    7068:	000d0000 	andeq	r0, sp, r0
    706c:	00024c05 	andeq	r4, r2, r5, lsl #24
    7070:	02e60b00 	rsceq	r0, r6, #0, 22
    7074:	9c050000 	stcls	0, cr0, [r5], {-0}
    7078:	00025717 	andeq	r5, r2, r7, lsl r7
    707c:	0c010100 	stfeqs	f0, [r1], {-0}
    7080:	0000009b 	muleq	r0, fp, r0
    7084:	00000275 	andeq	r0, r0, r5, ror r2
    7088:	6a05000d 	bvs	1470c4 <__ccfg+0x12711c>
    708c:	0b000002 	bleq	709c <__exidx_end+0x4310>
    7090:	000003a2 	andeq	r0, r0, r2, lsr #7
    7094:	75130606 	ldrvc	r0, [r3, #-1542]	; 0xfffff9fa
    7098:	01000002 	tsteq	r0, r2
    709c:	01330b01 	teqeq	r3, r1, lsl #22
    70a0:	c3040000 	movwgt	r0, #16384	; 0x4000
    70a4:	0000b10e 	andeq	fp, r0, lr, lsl #2
    70a8:	0e010100 	adfeqs	f0, f1, f0
    70ac:	00000494 	muleq	r0, r4, r4
    70b0:	10016e07 	andne	r6, r1, r7, lsl #28
    70b4:	000002a3 	andeq	r0, r0, r3, lsr #5
    70b8:	02a90407 	adceq	r0, r9, #117440512	; 0x7000000
    70bc:	010f0000 	mrseq	r0, CPSR
    70c0:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    70c4:	00008f10 	andeq	r8, r0, r0, lsl pc
    70c8:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    70cc:	c0000001 	andgt	r0, r0, r1
    70d0:	0d000002 	stceq	0, cr0, [r0, #-8]
    70d4:	02b50500 	adcseq	r0, r5, #0, 10
    70d8:	54110000 	ldrpl	r0, [r1], #-0
    70dc:	07000004 	streq	r0, [r0, -r4]
    70e0:	c016017f 	andsgt	r0, r6, pc, ror r1
    70e4:	01000002 	tsteq	r0, r2
    70e8:	039a1101 	orrseq	r1, sl, #1073741824	; 0x40000000
    70ec:	82070000 	andhi	r0, r7, #0
    70f0:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    70f4:	01010000 	mrseq	r0, (UNDEF: 1)
    70f8:	00047f11 	andeq	r7, r4, r1, lsl pc
    70fc:	02d80700 	sbcseq	r0, r8, #0, 14
    7100:	0000b10e 	andeq	fp, r0, lr, lsl #2
    7104:	12010100 	andne	r0, r1, #0, 2
    7108:	03030708 	movweq	r0, #14088	; 0x3708
    710c:	00031909 	andeq	r1, r3, r9, lsl #18
    7110:	22101300 	andscs	r1, r0, #0, 6
    7114:	07070000 	streq	r0, [r7, -r0]
    7118:	008f0703 	addeq	r0, pc, r3, lsl #14
    711c:	13000000 	movwne	r0, #0
    7120:	0000055b 	andeq	r0, r0, fp, asr r5
    7124:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    7128:	000000c2 	andeq	r0, r0, r2, asr #1
    712c:	610e0004 	tstvs	lr, r4
    7130:	07000002 	streq	r0, [r0, -r2]
    7134:	f2030309 	vcgt.s8	d0, d3, d9
    7138:	14000002 	strne	r0, [r0], #-2
    713c:	000004a3 	andeq	r0, r0, r3, lsr #9
    7140:	030b0730 	movweq	r0, #46896	; 0xb730
    7144:	00038908 	andeq	r8, r3, r8, lsl #18
    7148:	049c1300 	ldreq	r1, [ip], #768	; 0x300
    714c:	14070000 	strne	r0, [r7], #-0
    7150:	008f0803 	addeq	r0, pc, r3, lsl #16
    7154:	13000000 	movwne	r0, #0
    7158:	000002cd 	andeq	r0, r0, sp, asr #5
    715c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    7160:	0000008f 	andeq	r0, r0, pc, lsl #1
    7164:	04971302 	ldreq	r1, [r7], #770	; 0x302
    7168:	16070000 	strne	r0, [r7], -r0
    716c:	02960b03 	addseq	r0, r6, #3072	; 0xc00
    7170:	13040000 	movwne	r0, #16384	; 0x4000
    7174:	00000f5b 	andeq	r0, r0, fp, asr pc
    7178:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    717c:	000000c2 	andeq	r0, r0, r2, asr #1
    7180:	044d1308 	strbeq	r1, [sp], #-776	; 0xfffffcf8
    7184:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    7188:	03890f03 	orreq	r0, r9, #3, 30
    718c:	130c0000 	movwne	r0, #49152	; 0xc000
    7190:	000002c8 	andeq	r0, r0, r8, asr #5
    7194:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    7198:	00000399 	muleq	r0, r9, r3
    719c:	190c002c 	stmdbne	ip, {r2, r3, r5}
    71a0:	99000003 	stmdbls	r0, {r0, r1}
    71a4:	15000003 	strne	r0, [r0, #-3]
    71a8:	00000088 	andeq	r0, r0, r8, lsl #1
    71ac:	04070003 	streq	r0, [r7], #-3
    71b0:	00000326 	andeq	r0, r0, r6, lsr #6
    71b4:	0004ae0e 	andeq	sl, r4, lr, lsl #28
    71b8:	031c0700 	tsteq	ip, #0, 14
    71bc:	0003261b 	andeq	r2, r3, fp, lsl r6
    71c0:	03901100 	orrseq	r1, r0, #0, 2
    71c4:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    71c8:	03bb1403 			; <UNDEFINED> instruction: 0x03bb1403
    71cc:	01010000 	mrseq	r0, (UNDEF: 1)
    71d0:	039f0407 	orrseq	r0, pc, #117440512	; 0x7000000
    71d4:	e2160000 	ands	r0, r6, #0
    71d8:	01000013 	tsteq	r0, r3, lsl r0
    71dc:	019b070d 	orrseq	r0, fp, sp, lsl #14
    71e0:	05010000 	streq	r0, [r1, #-0]
    71e4:	00005c03 	andeq	r5, r0, r3, lsl #24
    71e8:	2a011720 	bcs	4ce70 <__ccfg+0x2cec8>
    71ec:	01000015 	tsteq	r0, r5, lsl r0
    71f0:	48010123 	stmdami	r1, {r0, r1, r5, r8}
    71f4:	64000018 	strvs	r0, [r0], #-24	; 0xffffffe8
    71f8:	01000019 	tsteq	r0, r9, lsl r0
    71fc:	00bf189c 	umlalseq	r1, pc, ip, r8	; <UNPREDICTABLE>
    7200:	23010000 	movwcs	r0, #4096	; 0x1000
    7204:	00008f01 	andeq	r8, r0, r1, lsl #30
    7208:	0024bb00 	eoreq	fp, r4, r0, lsl #22
    720c:	0f5b1900 	svceq	0x005b1900
    7210:	23010000 	movwcs	r0, #4096	; 0x1000
    7214:	0000ce01 	andeq	ip, r0, r1, lsl #28
    7218:	0024d900 	eoreq	sp, r4, r0, lsl #18
    721c:	0c401a00 	mcrreq	10, 0, r1, r0, cr0
    7220:	701b0000 	andsvc	r0, fp, r0
    7224:	01007274 	tsteq	r0, r4, ror r2
    7228:	019b0f28 	orrseq	r0, fp, r8, lsr #30
    722c:	03050000 	movweq	r0, #20480	; 0x5000
    7230:	20000064 	andcs	r0, r0, r4, rrx
    7234:	6e656c1b 	mcrvs	12, 3, r6, cr5, cr11, {0}
    7238:	0d290100 	stfeqs	f0, [r9, #-0]
    723c:	00000081 	andeq	r0, r0, r1, lsl #1
    7240:	00600305 	rsbeq	r0, r0, r5, lsl #6
    7244:	0d192000 	ldceq	0, cr2, [r9, #-0]
    7248:	01000015 	tsteq	r0, r5, lsl r0
    724c:	0081062a 	addeq	r0, r1, sl, lsr #12
    7250:	252f0000 	strcs	r0, [pc, #-0]!	; 7258 <__exidx_end+0x44cc>
    7254:	00000000 	andeq	r0, r0, r0
    7258:	0005f000 	andeq	pc, r5, r0
    725c:	12000300 	andne	r0, r0, #0, 6
    7260:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    7264:	00016d01 	andeq	r6, r1, r1, lsl #26
    7268:	15780c00 	ldrbne	r0, [r8, #-3072]!	; 0xfffff400
    726c:	00db0000 	sbcseq	r0, fp, r0
    7270:	0ce80000 	stcleq	0, cr0, [r8]
    7274:	00000000 	andeq	r0, r0, r0
    7278:	504a0000 	subpl	r0, sl, r0
    727c:	01020000 	mrseq	r0, (UNDEF: 2)
    7280:	0003b206 	andeq	fp, r3, r6, lsl #4
    7284:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7288:	000003ec 	andeq	r0, r0, ip, ror #7
    728c:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    7290:	02000000 	andeq	r0, r0, #0
    7294:	009f0508 	addseq	r0, pc, r8, lsl #10
    7298:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    729c:	02000022 	andeq	r0, r0, #34	; 0x22
    72a0:	004d182e 	subeq	r1, sp, lr, lsr #16
    72a4:	01020000 	mrseq	r0, (UNDEF: 2)
    72a8:	0003b008 	andeq	fp, r3, r8
    72ac:	21060300 	mrscs	r0, LR_und
    72b0:	31020000 	mrscc	r0, (UNDEF: 2)
    72b4:	00006019 	andeq	r6, r0, r9, lsl r0
    72b8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    72bc:	0000026e 	andeq	r0, r0, lr, ror #4
    72c0:	0017cf03 	andseq	ip, r7, r3, lsl #30
    72c4:	19340200 	ldmdbne	r4!, {r9}
    72c8:	00000073 	andeq	r0, r0, r3, ror r0
    72cc:	79070402 	stmdbvc	r7, {r1, sl}
    72d0:	02000000 	andeq	r0, r0, #0
    72d4:	00740708 	rsbseq	r0, r4, r8, lsl #14
    72d8:	04040000 	streq	r0, [r4], #-0
    72dc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    72e0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    72e4:	0000007e 	andeq	r0, r0, lr, ror r0
    72e8:	000b6203 	andeq	r6, fp, r3, lsl #4
    72ec:	1b280300 	blne	a07ef4 <__ccfg+0x9e7f4c>
    72f0:	0000009b 	muleq	r0, fp, r0
    72f4:	000a7805 	andeq	r7, sl, r5, lsl #16
    72f8:	00090400 	andeq	r0, r9, r0, lsl #8
    72fc:	000000b3 	strheq	r0, [r0], -r3
    7300:	000c1806 	andeq	r1, ip, r6, lsl #16
    7304:	0000b300 	andeq	fp, r0, r0, lsl #6
    7308:	00010000 	andeq	r0, r1, r0
    730c:	7a030407 	bvc	c8330 <__ccfg+0xa8388>
    7310:	0300000a 	movweq	r0, #10
    7314:	008f1863 	addeq	r1, pc, r3, ror #16
    7318:	dc030000 	stcle	0, cr0, [r3], {-0}
    731c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    7320:	00541227 	subseq	r1, r4, r7, lsr #4
    7324:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7328:	03000000 	movweq	r0, #0
    732c:	000013d4 	ldrdeq	r1, [r0], -r4
    7330:	41122b04 	tstmi	r2, r4, lsl #22
    7334:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7338:	000000d2 	ldrdeq	r0, [r0], -r2
    733c:	00162d03 	andseq	r2, r6, r3, lsl #26
    7340:	122c0400 	eorne	r0, ip, #0, 8
    7344:	00000067 	andeq	r0, r0, r7, rrx
    7348:	0000e308 	andeq	lr, r0, r8, lsl #6
    734c:	02a10300 	adceq	r0, r1, #0, 6
    7350:	2d040000 	stccs	0, cr0, [r4, #-0]
    7354:	00006712 	andeq	r6, r0, r2, lsl r7
    7358:	077e0300 	ldrbeq	r0, [lr, -r0, lsl #6]!
    735c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    7360:	00010c10 	andeq	r0, r1, r0, lsl ip
    7364:	c1040a00 	tstgt	r4, r0, lsl #20
    7368:	0b000000 	bleq	7370 <__exidx_end+0x45e4>
    736c:	09320408 	ldmdbeq	r2!, {r3, sl}
    7370:	000001a0 	andeq	r0, r0, r0, lsr #3
    7374:	0002bc0c 	andeq	fp, r2, ip, lsl #24
    7378:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    737c:	000000d2 	ldrdeq	r0, [r0], -r2
    7380:	00070101 	andeq	r0, r7, r1, lsl #2
    7384:	0000980c 	andeq	r9, r0, ip, lsl #16
    7388:	03350400 	teqeq	r5, #0, 8
    738c:	000000d2 	ldrdeq	r0, [r0], -r2
    7390:	00060101 	andeq	r0, r6, r1, lsl #2
    7394:	00028a0c 	andeq	r8, r2, ip, lsl #20
    7398:	03360400 	teqeq	r6, #0, 8
    739c:	000000d2 	ldrdeq	r0, [r0], -r2
    73a0:	00050101 	andeq	r0, r5, r1, lsl #2
    73a4:	00041b0c 	andeq	r1, r4, ip, lsl #22
    73a8:	03370400 	teqeq	r7, #0, 8
    73ac:	000000d2 	ldrdeq	r0, [r0], -r2
    73b0:	00040101 	andeq	r0, r4, r1, lsl #2
    73b4:	0004140c 	andeq	r1, r4, ip, lsl #8
    73b8:	03380400 	teqeq	r8, #0, 8
    73bc:	000000d2 	ldrdeq	r0, [r0], -r2
    73c0:	00000401 	andeq	r0, r0, r1, lsl #8
    73c4:	0004050d 	andeq	r0, r4, sp, lsl #10
    73c8:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    73cc:	000000d2 	ldrdeq	r0, [r0], -r2
    73d0:	00400d01 	subeq	r0, r0, r1, lsl #26
    73d4:	3c040000 	stccc	0, cr0, [r4], {-0}
    73d8:	0000d203 	andeq	sp, r0, r3, lsl #4
    73dc:	6d0d0200 	sfmvs	f0, 4, [sp, #-0]
    73e0:	04000000 	streq	r0, [r0], #-0
    73e4:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    73e8:	0d030000 	stceq	0, cr0, [r3, #-0]
    73ec:	00000153 	andeq	r0, r0, r3, asr r1
    73f0:	e3083f04 	movw	r3, #36612	; 0x8f04
    73f4:	04000000 	streq	r0, [r0], #-0
    73f8:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
    73fc:	41040000 	mrsmi	r0, (UNDEF: 4)
    7400:	00011203 	andeq	r1, r1, r3, lsl #4
    7404:	01a00900 	lsleq	r0, r0, #18
    7408:	b00e0000 	andlt	r0, lr, r0
    740c:	04000002 	streq	r0, [r0], #-2
    7410:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    7414:	01010000 	mrseq	r0, (UNDEF: 1)
    7418:	00031c0e 	andeq	r1, r3, lr, lsl #24
    741c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7420:	000001cd 	andeq	r0, r0, sp, asr #3
    7424:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7428:	000001d3 	ldrdeq	r0, [r0], -r3
    742c:	b9080102 	stmdblt	r8, {r1, r8}
    7430:	08000003 	stmdaeq	r0, {r0, r1}
    7434:	000001d3 	ldrdeq	r0, [r0], -r3
    7438:	00032a0e 	andeq	r2, r3, lr, lsl #20
    743c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    7440:	000001cd 	andeq	r0, r0, sp, asr #3
    7444:	080b0101 	stmdaeq	fp, {r0, r8}
    7448:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    744c:	0d000002 	stceq	0, cr0, [r0, #-8]
    7450:	000002c3 	andeq	r0, r0, r3, asr #5
    7454:	670b9005 	strvs	r9, [fp, -r5]
    7458:	00000000 	andeq	r0, r0, r0
    745c:	0006090d 	andeq	r0, r6, sp, lsl #18
    7460:	08910500 	ldmeq	r1, {r8, sl}
    7464:	000000c1 	andeq	r0, r0, r1, asr #1
    7468:	04870d04 	streq	r0, [r7], #3332	; 0xd04
    746c:	92050000 	andls	r0, r5, #0
    7470:	0000de10 	andeq	sp, r0, r0, lsl lr
    7474:	03000600 	movweq	r0, #1536	; 0x600
    7478:	00000422 	andeq	r0, r0, r2, lsr #8
    747c:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    7480:	0f000001 	svceq	0x00000001
    7484:	0000021e 	andeq	r0, r0, lr, lsl r2
    7488:	00000235 	andeq	r0, r0, r5, lsr r2
    748c:	360e0010 			; <UNDEFINED> instruction: 0x360e0010
    7490:	05000000 	streq	r0, [r0, #-0]
    7494:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    7498:	01010000 	mrseq	r0, (UNDEF: 1)
    749c:	9106010b 	tstls	r6, fp, lsl #2
    74a0:	00026d09 	andeq	r6, r2, r9, lsl #26
    74a4:	047a0c00 	ldrbteq	r0, [sl], #-3072	; 0xfffff400
    74a8:	93060000 	movwls	r0, #24576	; 0x6000
    74ac:	0000d207 	andeq	sp, r0, r7, lsl #4
    74b0:	01070100 	mrseq	r0, (UNDEF: 23)
    74b4:	00310c00 	eorseq	r0, r1, r0, lsl #24
    74b8:	94060000 	strls	r0, [r6], #-0
    74bc:	0000d203 	andeq	sp, r0, r3, lsl #4
    74c0:	00010100 	andeq	r0, r1, r0, lsl #2
    74c4:	81030000 	mrshi	r0, (UNDEF: 3)
    74c8:	06000002 	streq	r0, [r0], -r2
    74cc:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    74d0:	6d080000 	stcvs	0, cr0, [r8, #-0]
    74d4:	0f000002 	svceq	0x00000002
    74d8:	00000279 	andeq	r0, r0, r9, ror r2
    74dc:	00000289 	andeq	r0, r0, r9, lsl #5
    74e0:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    74e4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    74e8:	000002e6 	andeq	r0, r0, r6, ror #5
    74ec:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    74f0:	01000002 	tsteq	r0, r2
    74f4:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    74f8:	02a70000 	adceq	r0, r7, #0
    74fc:	00100000 	andseq	r0, r0, r0
    7500:	00029c08 	andeq	r9, r2, r8, lsl #24
    7504:	03a20e00 			; <UNDEFINED> instruction: 0x03a20e00
    7508:	06070000 	streq	r0, [r7], -r0
    750c:	0002a713 	andeq	sl, r2, r3, lsl r7
    7510:	0e010100 	adfeqs	f0, f1, f0
    7514:	00000133 	andeq	r0, r0, r3, lsr r1
    7518:	e30ec305 	movw	ip, #58117	; 0xe305
    751c:	01000000 	mrseq	r0, (UNDEF: 0)
    7520:	04941101 	ldreq	r1, [r4], #257	; 0x101
    7524:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    7528:	02d51001 	sbcseq	r1, r5, #1
    752c:	040a0000 	streq	r0, [sl], #-0
    7530:	000002db 	ldrdeq	r0, [r0], -fp
    7534:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    7538:	c1130000 	tstgt	r3, r0
    753c:	00000000 	andeq	r0, r0, r0
    7540:	0001da0f 	andeq	sp, r1, pc, lsl #20
    7544:	0002f200 	andeq	pc, r2, r0, lsl #4
    7548:	08001000 	stmdaeq	r0, {ip}
    754c:	000002e7 	andeq	r0, r0, r7, ror #5
    7550:	00045414 	andeq	r5, r4, r4, lsl r4
    7554:	017f0800 	cmneq	pc, r0, lsl #16
    7558:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    755c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7560:	0000039a 	muleq	r0, sl, r3
    7564:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    7568:	000000ef 	andeq	r0, r0, pc, ror #1
    756c:	7f140101 	svcvc	0x00140101
    7570:	08000004 	stmdaeq	r0, {r2}
    7574:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    7578:	01000000 	mrseq	r0, (UNDEF: 0)
    757c:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    7580:	4b090303 	blmi	248194 <__ccfg+0x2281ec>
    7584:	16000003 	strne	r0, [r0], -r3
    7588:	00002210 	andeq	r2, r0, r0, lsl r2
    758c:	07030708 	streq	r0, [r3, -r8, lsl #14]
    7590:	000000c1 	andeq	r0, r0, r1, asr #1
    7594:	055b1600 	ldrbeq	r1, [fp, #-1536]	; 0xfffffa00
    7598:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    759c:	00f40803 	rscseq	r0, r4, r3, lsl #16
    75a0:	00040000 	andeq	r0, r4, r0
    75a4:	00026111 	andeq	r6, r2, r1, lsl r1
    75a8:	03090800 	movweq	r0, #38912	; 0x9800
    75ac:	00032403 	andeq	r2, r3, r3, lsl #8
    75b0:	04a31700 	strteq	r1, [r3], #1792	; 0x700
    75b4:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    75b8:	bb08030b 	bllt	2081ec <__ccfg+0x1e8244>
    75bc:	16000003 	strne	r0, [r0], -r3
    75c0:	0000049c 	muleq	r0, ip, r4
    75c4:	08031408 	stmdaeq	r3, {r3, sl, ip}
    75c8:	000000c1 	andeq	r0, r0, r1, asr #1
    75cc:	02cd1600 	sbceq	r1, sp, #0, 12
    75d0:	15080000 	strne	r0, [r8, #-0]
    75d4:	00c10803 	sbceq	r0, r1, r3, lsl #16
    75d8:	16020000 	strne	r0, [r2], -r0
    75dc:	00000497 	muleq	r0, r7, r4
    75e0:	0b031608 	bleq	cce08 <__ccfg+0xace60>
    75e4:	000002c8 	andeq	r0, r0, r8, asr #5
    75e8:	0f5b1604 	svceq	0x005b1604
    75ec:	17080000 	strne	r0, [r8, -r0]
    75f0:	00f40903 	rscseq	r0, r4, r3, lsl #18
    75f4:	16080000 	strne	r0, [r8], -r0
    75f8:	0000044d 	andeq	r0, r0, sp, asr #8
    75fc:	0f031808 	svceq	0x00031808
    7600:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7604:	02c8160c 	sbceq	r1, r8, #12, 12	; 0xc00000
    7608:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    760c:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    7610:	002c0000 	eoreq	r0, ip, r0
    7614:	00034b0f 	andeq	r4, r3, pc, lsl #22
    7618:	0003cb00 	andeq	ip, r3, r0, lsl #22
    761c:	00881800 	addeq	r1, r8, r0, lsl #16
    7620:	00030000 	andeq	r0, r3, r0
    7624:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    7628:	ae110000 	cdpge	0, 1, cr0, cr1, cr0, {0}
    762c:	08000004 	stmdaeq	r0, {r2}
    7630:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    7634:	14000003 	strne	r0, [r0], #-3
    7638:	00000390 	muleq	r0, r0, r3
    763c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    7640:	000003ed 	andeq	r0, r0, sp, ror #7
    7644:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7648:	000003d1 	ldrdeq	r0, [r0], -r1
    764c:	15ce0119 	strbne	r0, [lr, #281]	; 0x119
    7650:	91010000 	mrsls	r0, (UNDEF: 1)
    7654:	01cd0107 	biceq	r0, sp, r7, lsl #2
    7658:	1bb40000 	blne	fed07660 <_estack+0xded02660>
    765c:	1c040000 	stcne	0, cr0, [r4], {-0}
    7660:	9c010000 	stcls	0, cr0, [r1], {-0}
    7664:	00000468 	andeq	r0, r0, r8, ror #8
    7668:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    766c:	14910100 	ldrne	r0, [r1], #256	; 0x100
    7670:	000001cd 	andeq	r0, r0, sp, asr #3
    7674:	0000254d 	andeq	r2, r0, sp, asr #10
    7678:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    767c:	68259101 	stmdavs	r5!, {r0, r8, ip, pc}
    7680:	97000004 	strls	r0, [r0, -r4]
    7684:	1a000025 	bne	7720 <__exidx_end+0x4994>
    7688:	01007161 	tsteq	r0, r1, ror #2
    768c:	00b53191 	umlalseq	r3, r5, r1, r1
    7690:	25d60000 	ldrbcs	r0, [r6]
    7694:	661b0000 	ldrvs	r0, [fp], -r0
    7698:	01006c6d 	tsteq	r0, sp, ror #24
    769c:	00c10793 	smulleq	r0, r1, r3, r7
    76a0:	260a0000 	strcs	r0, [sl], -r0
    76a4:	641b0000 	ldrvs	r0, [fp], #-0
    76a8:	0c930100 	ldfeqs	f0, [r3], {0}
    76ac:	000000c1 	andeq	r0, r0, r1, asr #1
    76b0:	00002628 	andeq	r2, r0, r8, lsr #12
    76b4:	0015b61c 	andseq	fp, r5, ip, lsl r6
    76b8:	019e0100 	orrseq	r0, lr, r0, lsl #2
    76bc:	00001bde 	ldrdeq	r1, [r0], -lr
    76c0:	da040a00 	ble	109ec8 <__ccfg+0xe9f20>
    76c4:	1d000001 	stcne	0, cr0, [r0, #-4]
    76c8:	0015c101 	andseq	ip, r5, r1, lsl #2
    76cc:	06080100 	streq	r0, [r8], -r0, lsl #2
    76d0:	0000c101 	andeq	ip, r0, r1, lsl #2
    76d4:	00198400 	andseq	r8, r9, r0, lsl #8
    76d8:	001bb400 	andseq	fp, fp, r0, lsl #8
    76dc:	1a9c0100 	bne	fe707ae4 <_estack+0xde702ae4>
    76e0:	00736572 	rsbseq	r6, r3, r2, ror r5
    76e4:	cd1a0801 	ldcgt	8, cr0, [sl, #-4]
    76e8:	3b000001 	blcc	76f4 <__exidx_end+0x4968>
    76ec:	1a000026 	bne	778c <__exidx_end+0x4a00>
    76f0:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    76f4:	0000c124 	andeq	ip, r0, r4, lsr #2
    76f8:	00264e00 	eoreq	r4, r6, r0, lsl #28
    76fc:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7700:	33080100 	movwcc	r0, #33024	; 0x8100
    7704:	00000468 	andeq	r0, r0, r8, ror #8
    7708:	00002661 	andeq	r2, r0, r1, ror #12
    770c:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    7710:	b53f0801 	ldrlt	r0, [pc, #-2049]!	; 6f17 <__exidx_end+0x418b>
    7714:	8a000000 	bhi	771c <__exidx_end+0x4990>
    7718:	1b000026 	blne	77b8 <__exidx_end+0x4a2c>
    771c:	0a010063 	beq	478b0 <__ccfg+0x27908>
    7720:	0001d307 	andeq	sp, r1, r7, lsl #6
    7724:	00272c00 	eoreq	r2, r7, r0, lsl #24
    7728:	00641e00 	rsbeq	r1, r4, r0, lsl #28
    772c:	c1070b01 	tstgt	r7, r1, lsl #22
    7730:	04000000 	streq	r0, [r0], #-0
    7734:	06235491 			; <UNDEFINED> instruction: 0x06235491
    7738:	0015bc1f 	andseq	fp, r5, pc, lsl ip
    773c:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    7740:	00196401 	andseq	r6, r9, r1, lsl #8
    7744:	00198400 	andseq	r8, r9, r0, lsl #8
    7748:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    774c:	0823007c 	stmdaeq	r3!, {r2, r3, r4, r5, r6}
    7750:	00050906 	andeq	r0, r5, r6, lsl #18
    7754:	00632000 	rsbeq	r2, r3, r0
    7758:	c1120d01 	tstgt	r2, r1, lsl #26
    775c:	01000000 	mrseq	r0, (UNDEF: 0)
    7760:	45210050 	strmi	r0, [r1, #-80]!	; 0xffffffb0
    7764:	01006c6f 	tsteq	r0, pc, ror #24
    7768:	19be0188 	ldmibne	lr!, {r3, r7, r8}
    776c:	52210000 	eorpl	r0, r1, #0
    7770:	01007465 	tsteq	r0, r5, ror #8
    7774:	1a20018b 	bne	807da8 <__ccfg+0x7e7e00>
    7778:	98220000 	stmdals	r2!, {}	; <UNPREDICTABLE>
    777c:	4500000c 	strmi	r0, [r0, #-12]
    7780:	23000005 	movwcs	r0, #5
    7784:	006c6176 	rsbeq	r6, ip, r6, ror r1
    7788:	c10a3a01 	tstgt	sl, r1, lsl #20
    778c:	1b000000 	blne	7794 <__exidx_end+0x4a08>
    7790:	3a010069 	bcc	4793c <__ccfg+0x27994>
    7794:	00008113 	andeq	r8, r0, r3, lsl r1
    7798:	00281200 	eoreq	r1, r8, r0, lsl #4
    779c:	70220000 	eorvc	r0, r2, r0
    77a0:	6d00000c 	stcvs	0, cr0, [r0, #-48]	; 0xffffffd0
    77a4:	1b000005 	blne	77c0 <__exidx_end+0x4a34>
    77a8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    77ac:	c10a4601 	tstgt	sl, r1, lsl #12
    77b0:	25000000 	strcs	r0, [r0, #-0]
    77b4:	1b000028 	blne	785c <__exidx_end+0x4ad0>
    77b8:	46010069 	strmi	r0, [r1], -r9, rrx
    77bc:	0000c10f 	andeq	ip, r0, pc, lsl #2
    77c0:	00284e00 	eoreq	r4, r8, r0, lsl #28
    77c4:	d0220000 	eorle	r0, r2, r0
    77c8:	9500000c 	strls	r0, [r0, #-12]
    77cc:	1b000005 	blne	77e8 <__exidx_end+0x4a5c>
    77d0:	006c6176 	rsbeq	r6, ip, r6, ror r1
    77d4:	e30c5501 	movw	r5, #50433	; 0xc501
    77d8:	77000000 	strvc	r0, [r0, -r0]
    77dc:	1b000028 	blne	7884 <__exidx_end+0x4af8>
    77e0:	55010069 	strpl	r0, [r1, #-105]	; 0xffffff97
    77e4:	0000e311 	andeq	lr, r0, r1, lsl r3
    77e8:	00288a00 	eoreq	r8, r8, r0, lsl #20
    77ec:	42240000 	eormi	r0, r4, #0
    77f0:	6c00001b 	stcvs	0, cr0, [r0], {27}
    77f4:	bf00001b 	svclt	0x0000001b
    77f8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    77fc:	006c6176 	rsbeq	r6, ip, r6, ror r1
    7800:	e30c6001 	movw	r6, #49153	; 0xc001
    7804:	01000000 	mrseq	r0, (UNDEF: 0)
    7808:	00691b59 	rsbeq	r1, r9, r9, asr fp
    780c:	810a6101 	tsthi	sl, r1, lsl #2
    7810:	b3000000 	movwlt	r0, #0
    7814:	00000028 	andeq	r0, r0, r8, lsr #32
    7818:	000cb822 	andeq	fp, ip, r2, lsr #16
    781c:	0005d900 	andeq	sp, r5, r0, lsl #18
    7820:	61761b00 	cmnvs	r6, r0, lsl #22
    7824:	7101006c 	tstvc	r1, ip, rrx
    7828:	0000c10a 	andeq	ip, r0, sl, lsl #2
    782c:	0028c600 	eoreq	ip, r8, r0, lsl #12
    7830:	8a250000 	bhi	947838 <__ccfg+0x927890>
    7834:	a600001b 			; <UNDEFINED> instruction: 0xa600001b
    7838:	1b00001b 	blne	78ac <__exidx_end+0x4b20>
    783c:	01007473 	tsteq	r0, r3, ror r4
    7840:	01cd0b78 	biceq	r0, sp, r8, ror fp
    7844:	28e60000 	stmiacs	r6!, {}^	; <UNPREDICTABLE>
    7848:	00000000 	andeq	r0, r0, r0
    784c:	00058f00 	andeq	r8, r5, r0, lsl #30
    7850:	24000300 	strcs	r0, [r0], #-768	; 0xfffffd00
    7854:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    7858:	00016d01 	andeq	r6, r1, r1, lsl #26
    785c:	15e10c00 	strbne	r0, [r1, #3072]!	; 0xc00
    7860:	00db0000 	sbcseq	r0, fp, r0
    7864:	0d900000 	ldceq	0, cr0, [r0]
    7868:	00000000 	andeq	r0, r0, r0
    786c:	540b0000 	strpl	r0, [fp], #-0
    7870:	01020000 	mrseq	r0, (UNDEF: 2)
    7874:	0003b206 	andeq	fp, r3, r6, lsl #4
    7878:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    787c:	000003ec 	andeq	r0, r0, ip, ror #7
    7880:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    7884:	02000000 	andeq	r0, r0, #0
    7888:	009f0508 	addseq	r0, pc, r8, lsl #10
    788c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    7890:	02000022 	andeq	r0, r0, #34	; 0x22
    7894:	004d182e 	subeq	r1, sp, lr, lsr #16
    7898:	01020000 	mrseq	r0, (UNDEF: 2)
    789c:	0003b008 	andeq	fp, r3, r8
    78a0:	21060300 	mrscs	r0, LR_und
    78a4:	31020000 	mrscc	r0, (UNDEF: 2)
    78a8:	00006019 	andeq	r6, r0, r9, lsl r0
    78ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    78b0:	0000026e 	andeq	r0, r0, lr, ror #4
    78b4:	0017cf03 	andseq	ip, r7, r3, lsl #30
    78b8:	19340200 	ldmdbne	r4!, {r9}
    78bc:	00000073 	andeq	r0, r0, r3, ror r0
    78c0:	79070402 	stmdbvc	r7, {r1, sl}
    78c4:	02000000 	andeq	r0, r0, #0
    78c8:	00740708 	rsbseq	r0, r4, r8, lsl #14
    78cc:	04040000 	streq	r0, [r4], #-0
    78d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    78d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    78d8:	0000007e 	andeq	r0, r0, lr, ror r0
    78dc:	000b6203 	andeq	r6, fp, r3, lsl #4
    78e0:	1b280300 	blne	a084e8 <__ccfg+0x9e8540>
    78e4:	0000009b 	muleq	r0, fp, r0
    78e8:	000a7805 	andeq	r7, sl, r5, lsl #16
    78ec:	00090400 	andeq	r0, r9, r0, lsl #8
    78f0:	000000b3 	strheq	r0, [r0], -r3
    78f4:	000c1806 	andeq	r1, ip, r6, lsl #16
    78f8:	0000b300 	andeq	fp, r0, r0, lsl #6
    78fc:	00010000 	andeq	r0, r1, r0
    7900:	7a030407 	bvc	c8924 <__ccfg+0xa897c>
    7904:	0300000a 	movweq	r0, #10
    7908:	008f1863 	addeq	r1, pc, r3, ror #16
    790c:	0c030000 	stceq	0, cr0, [r3], {-0}
    7910:	04000004 	streq	r0, [r0], #-4
    7914:	00411226 	subeq	r1, r1, r6, lsr #4
    7918:	dc030000 	stcle	0, cr0, [r3], {-0}
    791c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    7920:	00541227 	subseq	r1, r4, r7, lsr #4
    7924:	cd080000 	stcgt	0, cr0, [r8, #-0]
    7928:	03000000 	movweq	r0, #0
    792c:	000013d4 	ldrdeq	r1, [r0], -r4
    7930:	41122b04 	tstmi	r2, r4, lsl #22
    7934:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7938:	000000de 	ldrdeq	r0, [r0], -lr
    793c:	00162d03 	andseq	r2, r6, r3, lsl #26
    7940:	122c0400 	eorne	r0, ip, #0, 8
    7944:	00000067 	andeq	r0, r0, r7, rrx
    7948:	0000ef08 	andeq	lr, r0, r8, lsl #30
    794c:	02a10300 	adceq	r0, r1, #0, 6
    7950:	2d040000 	stccs	0, cr0, [r4, #-0]
    7954:	00006712 	andeq	r6, r0, r2, lsl r7
    7958:	cd040a00 	vstrgt	s0, [r4, #-0]
    795c:	0b000000 	bleq	7964 <__exidx_end+0x4bd8>
    7960:	09320408 	ldmdbeq	r2!, {r3, sl}
    7964:	000001a0 	andeq	r0, r0, r0, lsr #3
    7968:	0002bc0c 	andeq	fp, r2, ip, lsl #24
    796c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    7970:	000000de 	ldrdeq	r0, [r0], -lr
    7974:	00070101 	andeq	r0, r7, r1, lsl #2
    7978:	0000980c 	andeq	r9, r0, ip, lsl #16
    797c:	03350400 	teqeq	r5, #0, 8
    7980:	000000de 	ldrdeq	r0, [r0], -lr
    7984:	00060101 	andeq	r0, r6, r1, lsl #2
    7988:	00028a0c 	andeq	r8, r2, ip, lsl #20
    798c:	03360400 	teqeq	r6, #0, 8
    7990:	000000de 	ldrdeq	r0, [r0], -lr
    7994:	00050101 	andeq	r0, r5, r1, lsl #2
    7998:	00041b0c 	andeq	r1, r4, ip, lsl #22
    799c:	03370400 	teqeq	r7, #0, 8
    79a0:	000000de 	ldrdeq	r0, [r0], -lr
    79a4:	00040101 	andeq	r0, r4, r1, lsl #2
    79a8:	0004140c 	andeq	r1, r4, ip, lsl #8
    79ac:	03380400 	teqeq	r8, #0, 8
    79b0:	000000de 	ldrdeq	r0, [r0], -lr
    79b4:	00000401 	andeq	r0, r0, r1, lsl #8
    79b8:	0004050d 	andeq	r0, r4, sp, lsl #10
    79bc:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    79c0:	000000de 	ldrdeq	r0, [r0], -lr
    79c4:	00400d01 	subeq	r0, r0, r1, lsl #26
    79c8:	3c040000 	stccc	0, cr0, [r4], {-0}
    79cc:	0000de03 	andeq	sp, r0, r3, lsl #28
    79d0:	6d0d0200 	sfmvs	f0, 4, [sp, #-0]
    79d4:	04000000 	streq	r0, [r0], #-0
    79d8:	00de033d 	sbcseq	r0, lr, sp, lsr r3
    79dc:	0d030000 	stceq	0, cr0, [r3, #-0]
    79e0:	00000153 	andeq	r0, r0, r3, asr r1
    79e4:	ef083f04 	svc	0x00083f04
    79e8:	04000000 	streq	r0, [r0], #-0
    79ec:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
    79f0:	41040000 	mrsmi	r0, (UNDEF: 4)
    79f4:	00011203 	andeq	r1, r1, r3, lsl #4
    79f8:	01a00900 	lsleq	r0, r0, #18
    79fc:	b00e0000 	andlt	r0, lr, r0
    7a00:	04000002 	streq	r0, [r0], #-2
    7a04:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    7a08:	01010000 	mrseq	r0, (UNDEF: 1)
    7a0c:	00031c0e 	andeq	r1, r3, lr, lsl #24
    7a10:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7a14:	000001cd 	andeq	r0, r0, sp, asr #3
    7a18:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7a1c:	000001d3 	ldrdeq	r0, [r0], -r3
    7a20:	b9080102 	stmdblt	r8, {r1, r8}
    7a24:	08000003 	stmdaeq	r0, {r0, r1}
    7a28:	000001d3 	ldrdeq	r0, [r0], -r3
    7a2c:	00032a0e 	andeq	r2, r3, lr, lsl #20
    7a30:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    7a34:	000001cd 	andeq	r0, r0, sp, asr #3
    7a38:	080b0101 	stmdaeq	fp, {r0, r8}
    7a3c:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    7a40:	0d000002 	stceq	0, cr0, [r0, #-8]
    7a44:	000002c3 	andeq	r0, r0, r3, asr #5
    7a48:	670b9005 	strvs	r9, [fp, -r5]
    7a4c:	00000000 	andeq	r0, r0, r0
    7a50:	0006090d 	andeq	r0, r6, sp, lsl #18
    7a54:	08910500 	ldmeq	r1, {r8, sl}
    7a58:	000000cd 	andeq	r0, r0, sp, asr #1
    7a5c:	04870d04 	streq	r0, [r7], #3332	; 0xd04
    7a60:	92050000 	andls	r0, r5, #0
    7a64:	0000ea10 	andeq	lr, r0, r0, lsl sl
    7a68:	03000600 	movweq	r0, #1536	; 0x600
    7a6c:	00000422 	andeq	r0, r0, r2, lsr #8
    7a70:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    7a74:	0f000001 	svceq	0x00000001
    7a78:	0000021e 	andeq	r0, r0, lr, lsl r2
    7a7c:	00000235 	andeq	r0, r0, r5, lsr r2
    7a80:	360e0010 			; <UNDEFINED> instruction: 0x360e0010
    7a84:	05000000 	streq	r0, [r0, #-0]
    7a88:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    7a8c:	01010000 	mrseq	r0, (UNDEF: 1)
    7a90:	9106010b 	tstls	r6, fp, lsl #2
    7a94:	00026d09 	andeq	r6, r2, r9, lsl #26
    7a98:	047a0c00 	ldrbteq	r0, [sl], #-3072	; 0xfffff400
    7a9c:	93060000 	movwls	r0, #24576	; 0x6000
    7aa0:	0000de07 	andeq	sp, r0, r7, lsl #28
    7aa4:	01070100 	mrseq	r0, (UNDEF: 23)
    7aa8:	00310c00 	eorseq	r0, r1, r0, lsl #24
    7aac:	94060000 	strls	r0, [r6], #-0
    7ab0:	0000de03 	andeq	sp, r0, r3, lsl #28
    7ab4:	00010100 	andeq	r0, r1, r0, lsl #2
    7ab8:	81030000 	mrshi	r0, (UNDEF: 3)
    7abc:	06000002 	streq	r0, [r0], -r2
    7ac0:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    7ac4:	6d080000 	stcvs	0, cr0, [r8, #-0]
    7ac8:	0f000002 	svceq	0x00000002
    7acc:	00000279 	andeq	r0, r0, r9, ror r2
    7ad0:	00000289 	andeq	r0, r0, r9, lsl #5
    7ad4:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    7ad8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7adc:	000002e6 	andeq	r0, r0, r6, ror #5
    7ae0:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    7ae4:	01000002 	tsteq	r0, r2
    7ae8:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    7aec:	02a70000 	adceq	r0, r7, #0
    7af0:	00100000 	andseq	r0, r0, r0
    7af4:	00029c08 	andeq	r9, r2, r8, lsl #24
    7af8:	03a20e00 			; <UNDEFINED> instruction: 0x03a20e00
    7afc:	06070000 	streq	r0, [r7], -r0
    7b00:	0002a713 	andeq	sl, r2, r3, lsl r7
    7b04:	0e010100 	adfeqs	f0, f1, f0
    7b08:	00000133 	andeq	r0, r0, r3, lsr r1
    7b0c:	ef0ec305 	svc	0x000ec305
    7b10:	01000000 	mrseq	r0, (UNDEF: 0)
    7b14:	04941101 	ldreq	r1, [r4], #257	; 0x101
    7b18:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    7b1c:	02d51001 	sbcseq	r1, r5, #1
    7b20:	040a0000 	streq	r0, [sl], #-0
    7b24:	000002db 	ldrdeq	r0, [r0], -fp
    7b28:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    7b2c:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    7b30:	00000000 	andeq	r0, r0, r0
    7b34:	0001da0f 	andeq	sp, r1, pc, lsl #20
    7b38:	0002f200 	andeq	pc, r2, r0, lsl #4
    7b3c:	08001000 	stmdaeq	r0, {ip}
    7b40:	000002e7 	andeq	r0, r0, r7, ror #5
    7b44:	00045414 	andeq	r5, r4, r4, lsl r4
    7b48:	017f0800 	cmneq	pc, r0, lsl #16
    7b4c:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    7b50:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7b54:	0000039a 	muleq	r0, sl, r3
    7b58:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    7b5c:	000000fb 	strdeq	r0, [r0], -fp
    7b60:	7f140101 	svcvc	0x00140101
    7b64:	08000004 	stmdaeq	r0, {r2}
    7b68:	ef0e02d8 	svc	0x000e02d8
    7b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7b70:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    7b74:	4b090303 	blmi	248788 <__ccfg+0x2287e0>
    7b78:	16000003 	strne	r0, [r0], -r3
    7b7c:	00002210 	andeq	r2, r0, r0, lsl r2
    7b80:	07030708 	streq	r0, [r3, -r8, lsl #14]
    7b84:	000000cd 	andeq	r0, r0, sp, asr #1
    7b88:	055b1600 	ldrbeq	r1, [fp, #-1536]	; 0xfffffa00
    7b8c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    7b90:	01000803 	tsteq	r0, r3, lsl #16
    7b94:	00040000 	andeq	r0, r4, r0
    7b98:	00026111 	andeq	r6, r2, r1, lsl r1
    7b9c:	03090800 	movweq	r0, #38912	; 0x9800
    7ba0:	00032403 	andeq	r2, r3, r3, lsl #8
    7ba4:	04a31700 	strteq	r1, [r3], #1792	; 0x700
    7ba8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    7bac:	bb08030b 	bllt	2087e0 <__ccfg+0x1e8838>
    7bb0:	16000003 	strne	r0, [r0], -r3
    7bb4:	0000049c 	muleq	r0, ip, r4
    7bb8:	08031408 	stmdaeq	r3, {r3, sl, ip}
    7bbc:	000000cd 	andeq	r0, r0, sp, asr #1
    7bc0:	02cd1600 	sbceq	r1, sp, #0, 12
    7bc4:	15080000 	strne	r0, [r8, #-0]
    7bc8:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    7bcc:	16020000 	strne	r0, [r2], -r0
    7bd0:	00000497 	muleq	r0, r7, r4
    7bd4:	0b031608 	bleq	cd3fc <__ccfg+0xad454>
    7bd8:	000002c8 	andeq	r0, r0, r8, asr #5
    7bdc:	0f5b1604 	svceq	0x005b1604
    7be0:	17080000 	strne	r0, [r8, -r0]
    7be4:	01000903 	tsteq	r0, r3, lsl #18
    7be8:	16080000 	strne	r0, [r8], -r0
    7bec:	0000044d 	andeq	r0, r0, sp, asr #8
    7bf0:	0f031808 	svceq	0x00031808
    7bf4:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7bf8:	02c8160c 	sbceq	r1, r8, #12, 12	; 0xc00000
    7bfc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    7c00:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    7c04:	002c0000 	eoreq	r0, ip, r0
    7c08:	00034b0f 	andeq	r4, r3, pc, lsl #22
    7c0c:	0003cb00 	andeq	ip, r3, r0, lsl #22
    7c10:	00881800 	addeq	r1, r8, r0, lsl #16
    7c14:	00030000 	andeq	r0, r3, r0
    7c18:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    7c1c:	ae110000 	cdpge	0, 1, cr0, cr1, cr0, {0}
    7c20:	08000004 	stmdaeq	r0, {r2}
    7c24:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    7c28:	14000003 	strne	r0, [r0], #-3
    7c2c:	00000390 	muleq	r0, r0, r3
    7c30:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    7c34:	000003ed 	andeq	r0, r0, sp, ror #7
    7c38:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    7c3c:	000003d1 	ldrdeq	r0, [r0], -r1
    7c40:	161f0119 			; <UNDEFINED> instruction: 0x161f0119
    7c44:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7c48:	00810105 	addeq	r0, r1, r5, lsl #2
    7c4c:	1c040000 	stcne	0, cr0, [r4], {-0}
    7c50:	1f940000 	svcne	0x00940000
    7c54:	9c010000 	stcls	0, cr0, [r1], {-0}
    7c58:	00000586 	andeq	r0, r0, r6, lsl #11
    7c5c:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
    7c60:	18080100 	stmdane	r8, {r8}
    7c64:	00000586 	andeq	r0, r0, r6, lsl #11
    7c68:	000028f9 	strdeq	r2, [r0], -r9
    7c6c:	746d661a 	strbtvc	r6, [sp], #-1562	; 0xfffff9e6
    7c70:	29080100 	stmdbcs	r8, {r8}
    7c74:	00000586 	andeq	r0, r0, r6, lsl #11
    7c78:	00002af0 	strdeq	r2, [r0], -r0
    7c7c:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    7c80:	b5360801 	ldrlt	r0, [r6, #-2049]!	; 0xfffff7ff
    7c84:	24000000 	strcs	r0, [r0], #-0
    7c88:	1b00002b 	blne	7d3c <__exidx_end+0x4fb0>
    7c8c:	0100636e 	tsteq	r0, lr, ror #6
    7c90:	0081060a 	addeq	r0, r1, sl, lsl #12
    7c94:	2bbd0000 	blcs	fef47c9c <_estack+0xdef42c9c>
    7c98:	d41c0000 	ldrle	r0, [ip], #-0
    7c9c:	01000015 	tsteq	r0, r5, lsl r0
    7ca0:	251c114e 	ldrcs	r1, [ip, #-334]	; 0xfffffeb2
    7ca4:	01000016 	tsteq	r0, r6, lsl r0
    7ca8:	c61d1655 			; <UNDEFINED> instruction: 0xc61d1655
    7cac:	3600001c 			; <UNDEFINED> instruction: 0x3600001c
    7cb0:	8800001d 	stmdahi	r0, {r0, r2, r3, r4}
    7cb4:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7cb8:	00706176 	rsbseq	r6, r0, r6, ror r1
    7cbc:	0c114e01 	ldceq	14, cr4, [r1], {1}
    7cc0:	01000001 	tsteq	r0, r1
    7cc4:	666d1b56 			; <UNDEFINED> instruction: 0x666d1b56
    7cc8:	114e0100 	mrsne	r0, (UNDEF: 94)
    7ccc:	000000c1 	andeq	r0, r0, r1, asr #1
    7cd0:	00002c3e 	andeq	r2, r0, lr, lsr ip
    7cd4:	1d361d00 	ldcne	13, cr1, [r6, #-0]
    7cd8:	1d7e0000 	ldclne	0, cr0, [lr, #-0]
    7cdc:	04a40000 	strteq	r0, [r4], #0
    7ce0:	761e0000 	ldrvc	r0, [lr], -r0
    7ce4:	01007061 	tsteq	r0, r1, rrx
    7ce8:	010c114f 	tsteq	ip, pc, asr #2
    7cec:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7cf0:	0d401f00 	stcleq	15, cr1, [r0, #-0]
    7cf4:	04d50000 	ldrbeq	r0, [r5], #0
    7cf8:	761e0000 	ldrvc	r0, [lr], -r0
    7cfc:	01007061 	tsteq	r0, r1, rrx
    7d00:	010c1150 	tsteq	ip, r0, asr r1
    7d04:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7d08:	00636420 	rsbeq	r6, r3, r0, lsr #8
    7d0c:	81115001 	tsthi	r1, r1
    7d10:	1b000000 	blne	7d18 <__exidx_end+0x4f8c>
    7d14:	50010063 	andpl	r0, r1, r3, rrx
    7d18:	0001d311 	andeq	sp, r1, r1, lsl r3
    7d1c:	002c5c00 	eoreq	r5, ip, r0, lsl #24
    7d20:	581f0000 	ldmdapl	pc, {}	; <UNPREDICTABLE>
    7d24:	fc00000d 	stc2	0, cr0, [r0], {13}
    7d28:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7d2c:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d30:	8c165501 	cfldr32hi	mvfx5, [r6], {1}
    7d34:	01000005 	tsteq	r0, r5
    7d38:	666d1b5e 			; <UNDEFINED> instruction: 0x666d1b5e
    7d3c:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    7d40:	000000c1 	andeq	r0, r0, r1, asr #1
    7d44:	00002c7a 	andeq	r2, r0, sl, ror ip
    7d48:	0d081f00 	stceq	15, cr1, [r8, #-0]
    7d4c:	05140000 	ldreq	r0, [r4, #-0]
    7d50:	761e0000 	ldrvc	r0, [lr], -r0
    7d54:	01007061 	tsteq	r0, r1, rrx
    7d58:	058c1656 	streq	r1, [ip, #1622]	; 0x656
    7d5c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7d60:	0d701f00 	ldcleq	15, cr1, [r0, #-0]
    7d64:	05450000 	strbeq	r0, [r5, #-0]
    7d68:	761e0000 	ldrvc	r0, [lr], -r0
    7d6c:	01007061 	tsteq	r0, r1, rrx
    7d70:	058c1657 	streq	r1, [ip, #1623]	; 0x657
    7d74:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7d78:	00636420 	rsbeq	r6, r3, r0, lsr #8
    7d7c:	81165701 	tsthi	r6, r1, lsl #14
    7d80:	1b000000 	blne	7d88 <__exidx_end+0x4ffc>
    7d84:	57010063 	strpl	r0, [r1, -r3, rrx]
    7d88:	0001d316 	andeq	sp, r1, r6, lsl r3
    7d8c:	002c9800 	eoreq	r9, ip, r0, lsl #16
    7d90:	461d0000 	ldrmi	r0, [sp], -r0
    7d94:	5a00001f 	bpl	7e18 <__exidx_end+0x508c>
    7d98:	6f00001f 	svcvs	0x0000001f
    7d9c:	1b000005 	blne	7db8 <__exidx_end+0x502c>
    7da0:	5c010063 	stcpl	0, cr0, [r1], {99}	; 0x63
    7da4:	0001d309 	andeq	sp, r1, r9, lsl #6
    7da8:	002cb600 	eoreq	fp, ip, r0, lsl #12
    7dac:	61731e00 	cmnvs	r3, r0, lsl #28
    7db0:	5c010070 	stcpl	0, cr0, [r1], {112}	; 0x70
    7db4:	0001cd0d 	andeq	ip, r1, sp, lsl #26
    7db8:	00560100 	subseq	r0, r6, r0, lsl #2
    7dbc:	000d2021 	andeq	r2, sp, r1, lsr #32
    7dc0:	61731b00 	cmnvs	r3, r0, lsl #22
    7dc4:	66010070 			; <UNDEFINED> instruction: 0x66010070
    7dc8:	0001cd0a 	andeq	ip, r1, sl, lsl #26
    7dcc:	002cc900 	eoreq	ip, ip, r0, lsl #18
    7dd0:	0a000000 	beq	7dd8 <__exidx_end+0x504c>
    7dd4:	0001da04 	andeq	sp, r1, r4, lsl #20
    7dd8:	ef040a00 	svc	0x00040a00
    7ddc:	00000000 	andeq	r0, r0, r0
    7de0:	000000d5 	ldrdeq	r0, [r0], -r5
    7de4:	24e00004 	strbtcs	r0, [r0], #4
    7de8:	01040000 	mrseq	r0, (UNDEF: 4)
    7dec:	0000166c 	andeq	r1, r0, ip, ror #12
    7df0:	00172501 	andseq	r2, r7, r1, lsl #10
    7df4:	00176100 	andseq	r6, r7, r0, lsl #2
    7df8:	000da000 	andeq	sl, sp, r0
    7dfc:	00000000 	andeq	r0, r0, r0
    7e00:	0056d500 	subseq	sp, r6, r0, lsl #10
    7e04:	171c0200 	ldrne	r0, [ip, -r0, lsl #4]
    7e08:	1b020000 	blne	87e10 <__ccfg+0x67e68>
    7e0c:	00000030 	andeq	r0, r0, r0, lsr r0
    7e10:	b2060103 	andlt	r0, r6, #-1073741824	; 0xc0000000
    7e14:	03000003 	movweq	r0, #3
    7e18:	03b00801 	movseq	r0, #65536	; 0x10000
    7e1c:	02030000 	andeq	r0, r3, #0
    7e20:	0003ec05 	andeq	lr, r3, r5, lsl #24
    7e24:	07020300 	streq	r0, [r2, -r0, lsl #6]
    7e28:	0000026e 	andeq	r0, r0, lr, ror #4
    7e2c:	00166202 	andseq	r6, r6, r2, lsl #4
    7e30:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    7e34:	03000000 	movweq	r0, #0
    7e38:	00a40504 	adceq	r0, r4, r4, lsl #10
    7e3c:	04030000 	streq	r0, [r3], #-0
    7e40:	00007907 	andeq	r7, r0, r7, lsl #18
    7e44:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    7e48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7e4c:	74070803 	strvc	r0, [r7], #-2051	; 0xfffff7fd
    7e50:	04000000 	streq	r0, [r0], #-0
    7e54:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7e58:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    7e5c:	00007e07 	andeq	r7, r0, r7, lsl #28
    7e60:	171e0200 	ldrne	r0, [lr, -r0, lsl #4]
    7e64:	13030000 	movwne	r0, #12288	; 0x3000
    7e68:	00000025 	andeq	r0, r0, r5, lsr #32
    7e6c:	00166402 	andseq	r6, r6, r2, lsl #8
    7e70:	4c1f0300 	ldcmi	3, cr0, [pc], {-0}
    7e74:	05000000 	streq	r0, [r0, #-0]
    7e78:	00001633 	andeq	r1, r0, r3, lsr r6
    7e7c:	008caa04 	addeq	sl, ip, r4, lsl #20
    7e80:	1f940000 	svcne	0x00940000
    7e84:	00300000 	eorseq	r0, r0, r0
    7e88:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e8c:	00175606 	andseq	r5, r7, r6, lsl #12
    7e90:	8c3e0100 	ldfhis	f0, [lr], #-0
    7e94:	e7000000 	str	r0, [r0, -r0]
    7e98:	0600002c 	streq	r0, [r0], -ip, lsr #32
    7e9c:	00001747 	andeq	r1, r0, r7, asr #14
    7ea0:	008c3f01 	addeq	r3, ip, r1, lsl #30
    7ea4:	2d000000 	stccs	0, cr0, [r0, #-0]
    7ea8:	55070000 	strpl	r0, [r7, #-0]
    7eac:	01000016 	tsteq	r0, r6, lsl r0
    7eb0:	00008140 	andeq	r8, r0, r0, asr #2
    7eb4:	00510100 	subseq	r0, r1, r0, lsl #2
    7eb8:	00014300 	andeq	r4, r1, r0, lsl #6
    7ebc:	4f000400 	svcmi	0x00000400
    7ec0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7ec4:	00166c01 	andseq	r6, r6, r1, lsl #24
    7ec8:	18720100 	ldmdane	r2!, {r8}^
    7ecc:	17610000 	strbne	r0, [r1, -r0]!
    7ed0:	0db00000 	ldceq	0, cr0, [r0]
    7ed4:	00000000 	andeq	r0, r0, r0
    7ed8:	58400000 	stmdapl	r0, {}^	; <UNPREDICTABLE>
    7edc:	01020000 	mrseq	r0, (UNDEF: 2)
    7ee0:	0003b206 	andeq	fp, r3, r6, lsl #4
    7ee4:	08010200 	stmdaeq	r1, {r9}
    7ee8:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    7eec:	ec050202 	sfm	f0, 4, [r5], {2}
    7ef0:	02000003 	andeq	r0, r0, #3
    7ef4:	026e0702 	rsbeq	r0, lr, #524288	; 0x80000
    7ef8:	04020000 	streq	r0, [r2], #-0
    7efc:	0000a405 	andeq	sl, r0, r5, lsl #8
    7f00:	17cd0300 	strbne	r0, [sp, r0, lsl #6]
    7f04:	41020000 	mrsmi	r0, (UNDEF: 2)
    7f08:	00000053 	andeq	r0, r0, r3, asr r0
    7f0c:	79070402 	stmdbvc	r7, {r1, sl}
    7f10:	02000000 	andeq	r0, r0, #0
    7f14:	009f0508 	addseq	r0, pc, r8, lsl #10
    7f18:	1c030000 	stcne	0, cr0, [r3], {-0}
    7f1c:	02000018 	andeq	r0, r0, #24
    7f20:	00006c5b 	andeq	r6, r0, fp, asr ip
    7f24:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7f28:	00000074 	andeq	r0, r0, r4, ror r0
    7f2c:	69050404 	stmdbvs	r5, {r2, sl}
    7f30:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7f34:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    7f38:	cf030000 	svcgt	0x00030000
    7f3c:	03000017 	movweq	r0, #23
    7f40:	00004820 	andeq	r4, r0, r0, lsr #16
    7f44:	181e0300 	ldmdane	lr, {r8, r9}
    7f48:	26030000 	strcs	r0, [r3], -r0
    7f4c:	00000061 	andeq	r0, r0, r1, rrx
    7f50:	0017e705 	andseq	lr, r7, r5, lsl #14
    7f54:	03450400 	movteq	r0, #21504	; 0x5400
    7f58:	00000081 	andeq	r0, r0, r1, lsl #1
    7f5c:	00000000 	andeq	r0, r0, r0
    7f60:	00000020 	andeq	r0, r0, r0, lsr #32
    7f64:	00dd9c01 	sbcseq	r9, sp, r1, lsl #24
    7f68:	d8060000 	stmdale	r6, {}	; <UNPREDICTABLE>
    7f6c:	01000017 	tsteq	r0, r7, lsl r0
    7f70:	00008140 	andeq	r8, r0, r0, asr #2
    7f74:	002d3500 	eoreq	r3, sp, r0, lsl #10
    7f78:	18270600 	stmdane	r7!, {r9, sl}
    7f7c:	41010000 	mrsmi	r0, (UNDEF: 1)
    7f80:	00000081 	andeq	r0, r0, r1, lsl #1
    7f84:	00002d48 	andeq	r2, r0, r8, asr #26
    7f88:	00180a07 	andseq	r0, r8, r7, lsl #20
    7f8c:	81420100 	mrshi	r0, (UNDEF: 82)
    7f90:	01000000 	mrseq	r0, (UNDEF: 0)
    7f94:	39050052 	stmdbcc	r5, {r1, r4, r6}
    7f98:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    7f9c:	008c0353 	addeq	r0, ip, r3, asr r3
    7fa0:	1fc40000 	svcne	0x00c40000
    7fa4:	00180000 	andseq	r0, r8, r0
    7fa8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fac:	0000012f 	andeq	r0, r0, pc, lsr #2
    7fb0:	59010808 	stmdbpl	r1, {r3, fp}
    7fb4:	00000116 	andeq	r0, r0, r6, lsl r1
    7fb8:	0017c109 	andseq	ip, r7, r9, lsl #2
    7fbc:	8c5a0100 	ldfhie	f0, [sl], {-0}
    7fc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7fc4:	00001865 	andeq	r1, r0, r5, ror #16
    7fc8:	012f5b01 			; <UNDEFINED> instruction: 0x012f5b01
    7fcc:	0a000000 	beq	7fd4 <__exidx_end+0x5248>
    7fd0:	0000185a 	andeq	r1, r0, sl, asr r8
    7fd4:	00f75c01 	rscseq	r5, r7, r1, lsl #24
    7fd8:	0a070000 	beq	1c7fe0 <__ccfg+0x1a8038>
    7fdc:	01000018 	tsteq	r0, r8, lsl r0
    7fe0:	0000815d 	andeq	r8, r0, sp, asr r1
    7fe4:	00510100 	subseq	r0, r1, r0, lsl #2
    7fe8:	0000810b 	andeq	r8, r0, fp, lsl #2
    7fec:	00013f00 	andeq	r3, r1, r0, lsl #30
    7ff0:	013f0c00 	teqeq	pc, r0, lsl #24
    7ff4:	00010000 	andeq	r0, r1, r0
    7ff8:	91070402 	tstls	r7, r2, lsl #8
    7ffc:	00000018 	andeq	r0, r0, r8, lsl r0
    8000:	00000136 	andeq	r0, r0, r6, lsr r1
    8004:	25f90004 	ldrbcs	r0, [r9, #4]!
    8008:	01040000 	mrseq	r0, (UNDEF: 4)
    800c:	0000166c 	andeq	r1, r0, ip, ror #12
    8010:	0018ed01 	andseq	lr, r8, r1, lsl #26
    8014:	00176100 	andseq	r6, r7, r0, lsl #2
    8018:	000dc800 	andeq	ip, sp, r0, lsl #16
    801c:	00000000 	andeq	r0, r0, r0
    8020:	0059ed00 	subseq	lr, r9, r0, lsl #26
    8024:	06010200 	streq	r0, [r1], -r0, lsl #4
    8028:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    802c:	b0080102 	andlt	r0, r8, r2, lsl #2
    8030:	02000003 	andeq	r0, r0, #3
    8034:	03ec0502 	mvneq	r0, #8388608	; 0x800000
    8038:	02020000 	andeq	r0, r2, #0
    803c:	00026e07 	andeq	r6, r2, r7, lsl #28
    8040:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8044:	000000a4 	andeq	r0, r0, r4, lsr #1
    8048:	0017cd03 	andseq	ip, r7, r3, lsl #26
    804c:	53410200 	movtpl	r0, #4608	; 0x1200
    8050:	02000000 	andeq	r0, r0, #0
    8054:	00790704 	rsbseq	r0, r9, r4, lsl #14
    8058:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    805c:	00009f05 	andeq	r9, r0, r5, lsl #30
    8060:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8064:	00000074 	andeq	r0, r0, r4, ror r0
    8068:	69050404 	stmdbvs	r5, {r2, sl}
    806c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8070:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    8074:	cf030000 	svcgt	0x00030000
    8078:	03000017 	movweq	r0, #23
    807c:	00004820 	andeq	r4, r0, r0, lsr #16
    8080:	18cf0500 	stmiane	pc, {r8, sl}^	; <UNPREDICTABLE>
    8084:	6a040000 	bvs	10808c <__ccfg+0xe80e4>
    8088:	00000076 	andeq	r0, r0, r6, ror r0
    808c:	00001fdc 	ldrdeq	r1, [r0], -ip
    8090:	00000008 	andeq	r0, r0, r8
    8094:	00a69c01 	adceq	r9, r6, r1, lsl #24
    8098:	bd060000 	stclt	0, cr0, [r6, #-0]
    809c:	01000018 	tsteq	r0, r8, lsl r0
    80a0:	00007677 	andeq	r7, r0, r7, ror r6
    80a4:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    80a8:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    80ac:	00007678 	andeq	r7, r0, r8, ror r6
    80b0:	00000000 	andeq	r0, r0, r0
    80b4:	00000600 	andeq	r0, r0, r0, lsl #12
    80b8:	cb9c0100 	blgt	fe7084c0 <_estack+0xde7034c0>
    80bc:	06000000 	streq	r0, [r0], -r0
    80c0:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    80c4:	0076c201 	rsbseq	ip, r6, r1, lsl #4
    80c8:	05000000 	streq	r0, [r0, #-0]
    80cc:	000018de 	ldrdeq	r1, [r0], -lr
    80d0:	00768404 	rsbseq	r8, r6, r4, lsl #8
    80d4:	1fe40000 	svcne	0x00e40000
    80d8:	00080000 	andeq	r0, r8, r0
    80dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    80e0:	000000f1 	strdeq	r0, [r0], -r1
    80e4:	0018bd07 	andseq	fp, r8, r7, lsl #26
    80e8:	010f0100 	mrseq	r0, (UNDEF: 31)
    80ec:	00000076 	andeq	r0, r0, r6, ror r0
    80f0:	189a0800 	ldmne	sl, {fp}
    80f4:	5b040000 	blpl	1080fc <__ccfg+0xe8154>
    80f8:	00007601 	andeq	r7, r0, r1, lsl #12
    80fc:	00000000 	andeq	r0, r0, r0
    8100:	00000600 	andeq	r0, r0, r0, lsl #12
    8104:	189c0100 	ldmne	ip, {r8}
    8108:	07000001 	streq	r0, [r0, -r1]
    810c:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    8110:	76015a01 	strvc	r5, [r1], -r1, lsl #20
    8114:	00000000 	andeq	r0, r0, r0
    8118:	0018ae09 	andseq	sl, r8, r9, lsl #28
    811c:	016c0400 	cmneq	ip, r0, lsl #8
    8120:	00000000 	andeq	r0, r0, r0
    8124:	00000008 	andeq	r0, r0, r8
    8128:	c50a9c01 	strgt	r9, [sl, #-3073]	; 0xfffff3ff
    812c:	01000018 	tsteq	r0, r8, lsl r0
    8130:	0076019e 			; <UNDEFINED> instruction: 0x0076019e
    8134:	50010000 	andpl	r0, r1, r0
    8138:	02070000 	andeq	r0, r7, #0
    813c:	00040000 	andeq	r0, r4, r0
    8140:	000026a9 	andeq	r2, r0, r9, lsr #13
    8144:	166c0104 	strbtne	r0, [ip], -r4, lsl #2
    8148:	d5010000 	strle	r0, [r1, #-0]
    814c:	61000019 	tstvs	r0, r9, lsl r0
    8150:	f8000017 			; <UNDEFINED> instruction: 0xf8000017
    8154:	0000000d 	andeq	r0, r0, sp
    8158:	8d000000 	stchi	0, cr0, [r0, #-0]
    815c:	0200005b 	andeq	r0, r0, #91	; 0x5b
    8160:	03b20601 			; <UNDEFINED> instruction: 0x03b20601
    8164:	01020000 	mrseq	r0, (UNDEF: 2)
    8168:	0003b008 	andeq	fp, r3, r8
    816c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8170:	000003ec 	andeq	r0, r0, ip, ror #7
    8174:	6e070202 	cdpvs	2, 0, cr0, cr7, cr2, {0}
    8178:	02000002 	andeq	r0, r0, #2
    817c:	00a40504 	adceq	r0, r4, r4, lsl #10
    8180:	cd030000 	stcgt	0, cr0, [r3, #-0]
    8184:	03000017 	movweq	r0, #23
    8188:	00005341 	andeq	r5, r0, r1, asr #6
    818c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8190:	00000079 	andeq	r0, r0, r9, ror r0
    8194:	9f050802 	svcls	0x00050802
    8198:	02000000 	andeq	r0, r0, #0
    819c:	00740708 	rsbseq	r0, r4, r8, lsl #14
    81a0:	04040000 	streq	r0, [r4], #-0
    81a4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    81a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    81ac:	0000007e 	andeq	r0, r0, lr, ror r0
    81b0:	0017cf03 	andseq	ip, r7, r3, lsl #30
    81b4:	48200400 	stmdami	r0!, {sl}
    81b8:	05000000 	streq	r0, [r0, #-0]
    81bc:	00001a32 	andeq	r1, r0, r2, lsr sl
    81c0:	03033002 	movweq	r3, #12290	; 0x3002
    81c4:	001a9d06 	andseq	r9, sl, r6, lsl #26
    81c8:	01fd0100 	mvnseq	r0, r0, lsl #2
    81cc:	001a4505 	andseq	r4, sl, r5, lsl #10
    81d0:	01820100 	orreq	r0, r2, r0, lsl #2
    81d4:	19200701 	stmdbne	r0!, {r0, r8, r9, sl}
    81d8:	0d010000 	stceq	0, cr0, [r1, #-0]
    81dc:	001fec01 	andseq	lr, pc, r1, lsl #24
    81e0:	0000d400 	andeq	sp, r0, r0, lsl #8
    81e4:	6d9c0100 	ldfvss	f0, [ip]
    81e8:	08000001 	stmdaeq	r0, {r0}
    81ec:	00001a20 	andeq	r1, r0, r0, lsr #20
    81f0:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    81f4:	5b000000 	blpl	81fc <__exidx_end+0x5470>
    81f8:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    81fc:	00001a8c 	andeq	r1, r0, ip, lsl #21
    8200:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    8204:	87000000 	strhi	r0, [r0, -r0]
    8208:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    820c:	00001919 	andeq	r1, r0, r9, lsl r9
    8210:	76011001 	strvc	r1, [r1], -r1
    8214:	9a000000 	bls	821c <__exidx_end+0x5490>
    8218:	0a00002d 	beq	82d4 <__exidx_end+0x5548>
    821c:	00000081 	andeq	r0, r0, r1, lsl #1
    8220:	0000201e 	andeq	r2, r0, lr, lsl r0
    8224:	00000006 	andeq	r0, r0, r6
    8228:	0b013601 	bleq	55a34 <__ccfg+0x35a8c>
    822c:	00002044 	andeq	r2, r0, r4, asr #32
    8230:	0000002a 	andeq	r0, r0, sl, lsr #32
    8234:	0000011f 	andeq	r0, r0, pc, lsl r1
    8238:	001b1209 	andseq	r1, fp, r9, lsl #4
    823c:	01530100 	cmpeq	r3, r0, lsl #2
    8240:	00000076 	andeq	r0, r0, r6, ror r0
    8244:	00002db3 			; <UNDEFINED> instruction: 0x00002db3
    8248:	001a6e09 	andseq	r6, sl, r9, lsl #28
    824c:	01540100 	cmpeq	r4, r0, lsl #2
    8250:	00000076 	andeq	r0, r0, r6, ror r0
    8254:	00002dc6 	andeq	r2, r0, r6, asr #27
    8258:	202e0c00 	eorcs	r0, lr, r0, lsl #24
    825c:	01c30000 	biceq	r0, r3, r0
    8260:	01330000 	teqeq	r3, r0
    8264:	010d0000 	mrseq	r0, (UNDEF: 13)
    8268:	00740250 	rsbseq	r0, r4, r0, asr r2
    826c:	20360c00 	eorscs	r0, r6, r0, lsl #24
    8270:	01d40000 	bicseq	r0, r4, r0
    8274:	014d0000 	mrseq	r0, (UNDEF: 77)
    8278:	010d0000 	mrseq	r0, (UNDEF: 13)
    827c:	00740251 	rsbseq	r0, r4, r1, asr r2
    8280:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    8284:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    8288:	00002074 	andeq	r2, r0, r4, ror r0
    828c:	000001ea 	andeq	r0, r0, sl, ror #3
    8290:	00000161 	andeq	r0, r0, r1, ror #2
    8294:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    8298:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    829c:	0000207e 	andeq	r2, r0, lr, ror r0
    82a0:	0150010d 	cmpeq	r0, sp, lsl #2
    82a4:	0f000032 	svceq	0x00000032
    82a8:	00001a58 	andeq	r1, r0, r8, asr sl
    82ac:	20c05f07 	sbccs	r5, r0, r7, lsl #30
    82b0:	00a40000 	adceq	r0, r4, r0
    82b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    82b8:	000001c3 	andeq	r0, r0, r3, asr #3
    82bc:	001a2010 	andseq	r2, sl, r0, lsl r0
    82c0:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    82c4:	f1000000 	cps	#0
    82c8:	1000002d 	andne	r0, r0, sp, lsr #32
    82cc:	00001a79 	andeq	r1, r0, r9, ror sl
    82d0:	00767301 	rsbseq	r7, r6, r1, lsl #6
    82d4:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    82d8:	d0110000 	andsle	r0, r1, r0
    82dc:	fb000020 	blx	8366 <__exidx_end+0x55da>
    82e0:	11000001 	tstne	r0, r1
    82e4:	000020e4 	andeq	r2, r0, r4, ror #1
    82e8:	00000203 	andeq	r0, r0, r3, lsl #4
    82ec:	0020f412 	eoreq	pc, r0, r2, lsl r4	; <UNPREDICTABLE>
    82f0:	00009b00 	andeq	r9, r0, r0, lsl #22
    82f4:	50010d00 	andpl	r0, r1, r0, lsl #26
    82f8:	00007402 	andeq	r7, r0, r2, lsl #8
    82fc:	19451300 	stmdbne	r5, {r8, r9, ip}^
    8300:	6c050000 	stcvs	0, cr0, [r5], {-0}
    8304:	000001d4 	ldrdeq	r0, [r0], -r4
    8308:	00007614 	andeq	r7, r0, r4, lsl r6
    830c:	75130000 	ldrvc	r0, [r3, #-0]
    8310:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    8314:	0001ea73 	andeq	lr, r1, r3, ror sl
    8318:	00761400 	rsbseq	r1, r6, r0, lsl #8
    831c:	76140000 	ldrvc	r0, [r4], -r0
    8320:	00000000 	andeq	r0, r0, r0
    8324:	0019a513 	andseq	sl, r9, r3, lsl r5
    8328:	fb7a0500 	blx	1e89732 <__ccfg+0x1e6978a>
    832c:	14000001 	strne	r0, [r0], #-1
    8330:	00000076 	andeq	r0, r0, r6, ror r0
    8334:	1ad51500 	bne	ff54d73c <_estack+0xdf54873c>
    8338:	43060000 	movwmi	r0, #24576	; 0x6000
    833c:	19f21602 	ldmibne	r2!, {r1, r9, sl, ip}^
    8340:	fd050000 	stc2	0, cr0, [r5, #-0]
    8344:	000b1700 	andeq	r1, fp, r0, lsl #14
    8348:	eb000400 	bl	9350 <__exidx_end+0x65c4>
    834c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    8350:	00166c01 	andseq	r6, r6, r1, lsl #24
    8354:	1d6d0100 	stfnee	f0, [sp, #-0]
    8358:	17610000 	strbne	r0, [r1, -r0]!
    835c:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    8360:	00000000 	andeq	r0, r0, r0
    8364:	5d7a0000 	ldclpl	0, cr0, [sl, #-0]
    8368:	01020000 	mrseq	r0, (UNDEF: 2)
    836c:	0003b206 	andeq	fp, r3, r6, lsl #4
    8370:	08010200 	stmdaeq	r1, {r9}
    8374:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    8378:	ec050202 	sfm	f0, 4, [r5], {2}
    837c:	02000003 	andeq	r0, r0, #3
    8380:	026e0702 	rsbeq	r0, lr, #524288	; 0x80000
    8384:	62030000 	andvs	r0, r3, #0
    8388:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    838c:	00004c3f 	andeq	r4, r0, pc, lsr ip
    8390:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8394:	000000a4 	andeq	r0, r0, r4, lsr #1
    8398:	0017cd03 	andseq	ip, r7, r3, lsl #26
    839c:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    83a0:	02000000 	andeq	r0, r0, #0
    83a4:	00790704 	rsbseq	r0, r9, r4, lsl #14
    83a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    83ac:	00009f05 	andeq	r9, r0, r5, lsl #30
    83b0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    83b4:	00000074 	andeq	r0, r0, r4, ror r0
    83b8:	69050404 	stmdbvs	r5, {r2, sl}
    83bc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    83c0:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    83c4:	64030000 	strvs	r0, [r3], #-0
    83c8:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    83cc:	0000411f 	andeq	r4, r0, pc, lsl r1
    83d0:	17cf0300 	strbne	r0, [pc, r0, lsl #6]
    83d4:	20050000 	andcs	r0, r5, r0
    83d8:	00000053 	andeq	r0, r0, r3, asr r0
    83dc:	001e0005 	andseq	r0, lr, r5
    83e0:	81e90200 	mvnhi	r0, r0, lsl #4
    83e4:	03000000 	movweq	r0, #0
    83e8:	000000be 	strheq	r0, [r0], -lr
    83ec:	001b5006 	andseq	r5, fp, r6
    83f0:	8ce90200 	sfmhi	f0, 2, [r9]
    83f4:	07000000 	streq	r0, [r0, -r0]
    83f8:	00001e59 	andeq	r1, r0, r9, asr lr
    83fc:	0081ef02 	addeq	lr, r1, r2, lsl #30
    8400:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8404:	00001b85 	andeq	r1, r0, r5, lsl #23
    8408:	008cab02 	addeq	sl, ip, r2, lsl #22
    840c:	e7010000 	str	r0, [r1, -r0]
    8410:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8414:	00001a20 	andeq	r1, r0, r0, lsr #20
    8418:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    841c:	0a000000 	beq	8424 <__exidx_end+0x5698>
    8420:	00001efa 	strdeq	r1, [r0], -sl
    8424:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    8428:	00000000 	andeq	r0, r0, r0
    842c:	001e3808 	andseq	r3, lr, r8, lsl #16
    8430:	8c810200 	sfmhi	f0, 4, [r1], {0}
    8434:	01000000 	mrseq	r0, (UNDEF: 0)
    8438:	00000110 	andeq	r0, r0, r0, lsl r1
    843c:	001a2009 	andseq	r2, sl, r9
    8440:	033c0100 	teqeq	ip, #0, 2
    8444:	0000008c 	andeq	r0, r0, ip, lsl #1
    8448:	001ea90a 	andseq	sl, lr, sl, lsl #18
    844c:	033e0100 	teqeq	lr, #0, 2
    8450:	0000008c 	andeq	r0, r0, ip, lsl #1
    8454:	1ce60800 	stclne	8, cr0, [r6]
    8458:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    845c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8460:	00013901 	andeq	r3, r1, r1, lsl #18
    8464:	1a200900 	bne	80a86c <__ccfg+0x7ea8c4>
    8468:	4f010000 	svcmi	0x00010000
    846c:	00008c03 	andeq	r8, r0, r3, lsl #24
    8470:	1e1d0a00 	vnmlsne.f32	s0, s26, s0
    8474:	51010000 	mrspl	r0, (UNDEF: 1)
    8478:	00008c03 	andeq	r8, r0, r3, lsl #24
    847c:	4a080000 	bmi	208484 <__ccfg+0x1e84dc>
    8480:	0200001c 	andeq	r0, r0, #28
    8484:	00008cc8 	andeq	r8, r0, r8, asr #25
    8488:	016e0100 	cmneq	lr, r0, lsl #2
    848c:	20090000 	andcs	r0, r9, r0
    8490:	0100001a 	tsteq	r0, sl, lsl r0
    8494:	008c0362 	addeq	r0, ip, r2, ror #6
    8498:	da0a0000 	ble	2884a0 <__ccfg+0x2684f8>
    849c:	0100001b 	tsteq	r0, fp, lsl r0
    84a0:	008c0364 	addeq	r0, ip, r4, ror #6
    84a4:	1b0a0000 	blne	2884ac <__ccfg+0x268504>
    84a8:	0100001d 	tsteq	r0, sp, lsl r0
    84ac:	008c0365 	addeq	r0, ip, r5, ror #6
    84b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84b4:	00001d4d 	andeq	r1, r0, sp, asr #26
    84b8:	008cb202 	addeq	fp, ip, r2, lsl #4
    84bc:	a3010000 	movwge	r0, #4096	; 0x1000
    84c0:	09000001 	stmdbeq	r0, {r0}
    84c4:	00001a20 	andeq	r1, r0, r0, lsr #20
    84c8:	8c039401 	cfstrshi	mvf9, [r3], {1}
    84cc:	0a000000 	beq	84d4 <__exidx_end+0x5748>
    84d0:	00001c69 	andeq	r1, r0, r9, ror #24
    84d4:	8c039601 	stchi	6, cr9, [r3], {1}
    84d8:	0a000000 	beq	84e0 <__exidx_end+0x5754>
    84dc:	00001d1b 	andeq	r1, r0, fp, lsl sp
    84e0:	8c039701 	stchi	7, cr9, [r3], {1}
    84e4:	00000000 	andeq	r0, r0, r0
    84e8:	001c1808 	andseq	r1, ip, r8, lsl #16
    84ec:	8cb90200 	lfmhi	f0, 4, [r9]
    84f0:	01000000 	mrseq	r0, (UNDEF: 0)
    84f4:	000001cc 	andeq	r0, r0, ip, asr #3
    84f8:	001a2009 	andseq	r2, sl, r9
    84fc:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    8500:	0000008c 	andeq	r0, r0, ip, lsl #1
    8504:	001d250a 	andseq	r2, sp, sl, lsl #10
    8508:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    850c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8510:	1dc30800 	stclne	8, cr0, [r3]
    8514:	df020000 	svcle	0x00020000
    8518:	0000008c 	andeq	r0, r0, ip, lsl #1
    851c:	0001f501 	andeq	pc, r1, r1, lsl #10
    8520:	1a200900 	bne	80a928 <__ccfg+0x7ea980>
    8524:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    8528:	00008c03 	andeq	r8, r0, r3, lsl #24
    852c:	1f1a0a00 	svcne	0x001a0a00
    8530:	ca010000 	bgt	48538 <__ccfg+0x28590>
    8534:	00008c03 	andeq	r8, r0, r3, lsl #24
    8538:	83080000 	movwhi	r0, #32768	; 0x8000
    853c:	0200001e 	andeq	r0, r0, #30
    8540:	00008cd7 	ldrdeq	r8, [r0], -r7
    8544:	02120100 	andseq	r0, r2, #0, 2
    8548:	cd0a0000 	stcgt	0, cr0, [sl, #-0]
    854c:	0100001f 	tsteq	r0, pc, lsl r0
    8550:	008c0283 	addeq	r0, ip, r3, lsl #5
    8554:	0b000000 	bleq	855c <__exidx_end+0x57d0>
    8558:	00000827 	andeq	r0, r0, r7, lsr #16
    855c:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    8560:	00001faa 	andeq	r1, r0, sl, lsr #31
    8564:	64010f02 	strvs	r0, [r1], #-3842	; 0xfffff0fe
    8568:	7c000021 	stcvc	0, cr0, [r0], {33}	; 0x21
    856c:	01000000 	mrseq	r0, (UNDEF: 0)
    8570:	0002c49c 	muleq	r2, ip, r4
    8574:	1a8c0d00 	bne	fe30b97c <_estack+0xde30697c>
    8578:	7f010000 	svcvc	0x00010000
    857c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8580:	00002e17 	andeq	r2, r0, r7, lsl lr
    8584:	001fc207 	andseq	ip, pc, r7, lsl #4
    8588:	8c810100 	stfhis	f0, [r1], {0}
    858c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8590:	00001d42 	andeq	r1, r0, r2, asr #26
    8594:	00818201 	addeq	r8, r1, r1, lsl #4
    8598:	52010000 	andpl	r0, r1, #0
    859c:	001bb50f 	andseq	fp, fp, pc, lsl #10
    85a0:	81830100 	orrhi	r0, r3, r0, lsl #2
    85a4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    85a8:	0f00002e 	svceq	0x0000002e
    85ac:	00001c83 	andeq	r1, r0, r3, lsl #25
    85b0:	00818401 	addeq	r8, r1, r1, lsl #8
    85b4:	2e4b0000 	cdpcs	0, 4, cr0, cr11, cr0, {0}
    85b8:	97100000 	ldrls	r0, [r0, -r0]
    85bc:	72000000 	andvc	r0, r0, #0
    85c0:	10000021 	andne	r0, r0, r1, lsr #32
    85c4:	0100000e 	tsteq	r0, lr
    85c8:	00029b97 	muleq	r2, r7, fp
    85cc:	00a71100 	adceq	r1, r7, r0, lsl #2
    85d0:	10120000 	andsne	r0, r2, r0
    85d4:	1300000e 	movwne	r0, #14
    85d8:	000000b2 	strheq	r0, [r0], -r2
    85dc:	00005201 	andeq	r5, r0, r1, lsl #4
    85e0:	00009714 	andeq	r9, r0, r4, lsl r7
    85e4:	00217c00 	eoreq	r7, r1, r0, lsl #24
    85e8:	00000600 	andeq	r0, r0, r0, lsl #12
    85ec:	11980100 	orrsne	r0, r8, r0, lsl #2
    85f0:	000000a7 	andeq	r0, r0, r7, lsr #1
    85f4:	00217c15 	eoreq	r7, r1, r5, lsl ip
    85f8:	00000600 	andeq	r0, r0, r0, lsl #12
    85fc:	00b21600 	adcseq	r1, r2, r0, lsl #12
    8600:	2e790000 	cdpcs	0, 7, cr0, cr9, cr0, {0}
    8604:	00000000 	andeq	r0, r0, r0
    8608:	19451700 	stmdbne	r5, {r8, r9, sl, ip}^
    860c:	6c020000 	stcvs	0, cr0, [r2], {-0}
    8610:	000021e0 	andeq	r2, r0, r0, ror #3
    8614:	000000ac 	andeq	r0, r0, ip, lsr #1
    8618:	03439c01 	movteq	r9, #15361	; 0x3c01
    861c:	8c0d0000 	stchi	0, cr0, [sp], {-0}
    8620:	0100001a 	tsteq	r0, sl, lsl r0
    8624:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    8628:	002e8c00 	eoreq	r8, lr, r0, lsl #24
    862c:	1edc0f00 	cdpne	15, 13, cr0, cr12, cr0, {0}
    8630:	c1010000 	mrsgt	r0, (UNDEF: 1)
    8634:	00000081 	andeq	r0, r0, r1, lsl #1
    8638:	00002ec0 	andeq	r2, r0, r0, asr #29
    863c:	001ff20f 	andseq	pc, pc, pc, lsl #4
    8640:	81c20100 	bichi	r0, r2, r0, lsl #2
    8644:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    8648:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    864c:	00000097 	muleq	r0, r7, r0
    8650:	00002216 	andeq	r2, r0, r6, lsl r2
    8654:	00000006 	andeq	r0, r0, r6
    8658:	0332ee01 	teqeq	r2, #1, 28
    865c:	a7110000 	ldrge	r0, [r1, -r0]
    8660:	15000000 	strne	r0, [r0, #-0]
    8664:	00002216 	andeq	r2, r0, r6, lsl r2
    8668:	00000006 	andeq	r0, r0, r6
    866c:	0000b216 	andeq	fp, r0, r6, lsl r2
    8670:	002f1000 	eoreq	r1, pc, r0
    8674:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    8678:	00002204 	andeq	r2, r0, r4, lsl #4
    867c:	0000021a 	andeq	r0, r0, sl, lsl r2
    8680:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8684:	00000074 	andeq	r0, r0, r4, ror r0
    8688:	001b601b 	andseq	r6, fp, fp, lsl r0
    868c:	8ca40200 	sfmhi	f0, 4, [r4]
    8690:	8c000000 	stchi	0, cr0, [r0], {-0}
    8694:	5c000022 	stcpl	0, cr0, [r0], {34}	; 0x22
    8698:	01000000 	mrseq	r0, (UNDEF: 0)
    869c:	0003bd9c 	muleq	r3, ip, sp
    86a0:	1a8c1c00 	bne	fe30f6a8 <_estack+0xde30a6a8>
    86a4:	1f010000 	svcne	0x00010000
    86a8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86ac:	002f2300 	eoreq	r2, pc, r0, lsl #6
    86b0:	1e741d00 	cdpne	13, 7, cr1, cr4, cr0, {0}
    86b4:	21010000 	mrscs	r0, (UNDEF: 1)
    86b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86bc:	002f4400 	eoreq	r4, pc, r0, lsl #8
    86c0:	1f8e1d00 	svcne	0x008e1d00
    86c4:	22010000 	andcs	r0, r1, #0
    86c8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86cc:	002f5700 	eoreq	r5, pc, r0, lsl #14
    86d0:	1f9c1d00 	svcne	0x009c1d00
    86d4:	23010000 	movwcs	r0, #4096	; 0x1000
    86d8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86dc:	002fa500 	eoreq	sl, pc, r0, lsl #10
    86e0:	1fdb1d00 	svcne	0x00db1d00
    86e4:	24010000 	strcs	r0, [r1], #-0
    86e8:	00008102 	andeq	r8, r0, r2, lsl #2
    86ec:	00300d00 	eorseq	r0, r0, r0, lsl #26
    86f0:	1fcd1d00 	svcne	0x00cd1d00
    86f4:	25010000 	strcs	r0, [r1, #-0]
    86f8:	00008c02 	andeq	r8, r0, r2, lsl #24
    86fc:	00302c00 	eorseq	r2, r0, r0, lsl #24
    8700:	981b0000 	ldmdals	fp, {}	; <UNPREDICTABLE>
    8704:	0200001d 	andeq	r0, r0, #29
    8708:	00008cc1 	andeq	r8, r0, r1, asr #25
    870c:	0022e800 	eoreq	lr, r2, r0, lsl #16
    8710:	00001800 	andeq	r1, r0, r0, lsl #16
    8714:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    8718:	1d000003 	stcne	0, cr0, [r0, #-12]
    871c:	00001fcd 	andeq	r1, r0, sp, asr #31
    8720:	8c026701 	stchi	7, cr6, [r2], {1}
    8724:	51000000 	mrspl	r0, (UNDEF: 0)
    8728:	00000030 	andeq	r0, r0, r0, lsr r0
    872c:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
    8730:	00000000 	andeq	r0, r0, r0
    8734:	00001000 	andeq	r1, r0, r0
    8738:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    873c:	16000004 	strne	r0, [r0], -r4
    8740:	00000205 	andeq	r0, r0, r5, lsl #4
    8744:	00003078 	andeq	r3, r0, r8, ror r0
    8748:	1cc61b00 	vstmiane	r6, {d17-d16}
    874c:	9d020000 	stcls	0, cr0, [r2, #-0]
    8750:	0000008c 	andeq	r0, r0, ip, lsl #1
    8754:	00002300 	andeq	r2, r0, r0, lsl #6
    8758:	00000010 	andeq	r0, r0, r0, lsl r0
    875c:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
    8760:	cd1d0000 	ldcgt	0, cr0, [sp, #-0]
    8764:	0100001f 	tsteq	r0, pc, lsl r0
    8768:	008c0297 	umulleq	r0, ip, r7, r2
    876c:	30910000 	addscc	r0, r1, r0
    8770:	741d0000 	ldrvc	r0, [sp], #-0
    8774:	0100001e 	tsteq	r0, lr, lsl r0
    8778:	008c0298 	umulleq	r0, ip, r8, r2
    877c:	30b20000 	adcscc	r0, r2, r0
    8780:	1b000000 	blne	8788 <__exidx_end+0x59fc>
    8784:	00001ca6 	andeq	r1, r0, r6, lsr #25
    8788:	008c9602 	addeq	r9, ip, r2, lsl #12
    878c:	23100000 	tstcs	r0, #0
    8790:	00140000 	andseq	r0, r4, r0
    8794:	9c010000 	stcls	0, cr0, [r1], {-0}
    8798:	00000478 	andeq	r0, r0, r8, ror r4
    879c:	001fcd1d 	andseq	ip, pc, sp, lsl sp	; <UNPREDICTABLE>
    87a0:	02ba0100 	adcseq	r0, sl, #0, 2
    87a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87a8:	000030c5 	andeq	r3, r0, r5, asr #1
    87ac:	001e741d 	andseq	r7, lr, sp, lsl r4
    87b0:	02bb0100 	adcseq	r0, fp, #0, 2
    87b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87b8:	000030e6 	andeq	r3, r0, r6, ror #1
    87bc:	1f6d1b00 	svcne	0x006d1b00
    87c0:	8f020000 	svchi	0x00020000
    87c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87c8:	00002324 	andeq	r2, r0, r4, lsr #6
    87cc:	00000064 	andeq	r0, r0, r4, rrx
    87d0:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
    87d4:	201c0000 	andscs	r0, ip, r0
    87d8:	0100001a 	tsteq	r0, sl, lsl r0
    87dc:	008c02db 	ldrdeq	r0, [ip], fp
    87e0:	30f90000 	rscscc	r0, r9, r0
    87e4:	cd1d0000 	ldcgt	0, cr0, [sp, #-0]
    87e8:	0100001f 	tsteq	r0, pc, lsl r0
    87ec:	008c02dd 	ldrdeq	r0, [ip], sp
    87f0:	311a0000 	tstcc	sl, r0
    87f4:	741d0000 	ldrvc	r0, [sp], #-0
    87f8:	0100001e 	tsteq	r0, lr, lsl r0
    87fc:	008c02de 	ldrdeq	r0, [ip], lr
    8800:	314e0000 	mrscc	r0, (UNDEF: 78)
    8804:	ce1d0000 	cdpgt	0, 1, cr0, cr13, cr0, {0}
    8808:	0100001b 	tsteq	r0, fp, lsl r0
    880c:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
    8810:	31610000 	cmncc	r1, r0
    8814:	451d0000 	ldrmi	r0, [sp, #-0]
    8818:	0100001f 	tsteq	r0, pc, lsl r0
    881c:	008c02e0 	addeq	r0, ip, r0, ror #5
    8820:	318f0000 	orrcc	r0, pc, r0
    8824:	6a0a0000 	bvs	28882c <__ccfg+0x268884>
    8828:	0100001e 	tsteq	r0, lr, lsl r0
    882c:	008c02e1 	addeq	r0, ip, r1, ror #5
    8830:	3e1d0000 	cdpcc	0, 1, cr0, cr13, cr0, {0}
    8834:	0100001c 	tsteq	r0, ip, lsl r0
    8838:	008102e2 	addeq	r0, r1, r2, ror #5
    883c:	31bd0000 			; <UNDEFINED> instruction: 0x31bd0000
    8840:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8844:	000000be 	strheq	r0, [r0], -lr
    8848:	00002388 	andeq	r2, r0, r8, lsl #7
    884c:	00000014 	andeq	r0, r0, r4, lsl r0
    8850:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    8854:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    8858:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    885c:	16000032 			; <UNDEFINED> instruction: 0x16000032
    8860:	000000da 	ldrdeq	r0, [r0], -sl
    8864:	00003259 	andeq	r3, r0, r9, asr r2
    8868:	00238a15 	eoreq	r8, r3, r5, lsl sl
    886c:	00000a00 	andeq	r0, r0, r0, lsl #20
    8870:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    8874:	32780000 	rsbscc	r0, r8, #0
    8878:	8a150000 	bhi	548880 <__ccfg+0x5288d8>
    887c:	0a000023 	beq	8910 <__exidx_end+0x5b84>
    8880:	16000000 	strne	r0, [r0], -r0
    8884:	000000da 	ldrdeq	r0, [r0], -sl
    8888:	00003299 	muleq	r0, r9, r2
    888c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8890:	000000e7 	andeq	r0, r0, r7, ror #1
    8894:	0000239c 	muleq	r0, ip, r3
    8898:	00000014 	andeq	r0, r0, r4, lsl r0
    889c:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    88a0:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    88a4:	ac000000 	stcge	0, cr0, [r0], {-0}
    88a8:	16000032 			; <UNDEFINED> instruction: 0x16000032
    88ac:	00000103 	andeq	r0, r0, r3, lsl #2
    88b0:	000032cd 	andeq	r3, r0, sp, asr #5
    88b4:	00239e15 	eoreq	r9, r3, r5, lsl lr
    88b8:	00000a00 	andeq	r0, r0, r0, lsl #20
    88bc:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    88c0:	32ec0000 	rsccc	r0, ip, #0
    88c4:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    88c8:	0a000023 	beq	895c <__exidx_end+0x5bd0>
    88cc:	16000000 	strne	r0, [r0], -r0
    88d0:	00000103 	andeq	r0, r0, r3, lsl #2
    88d4:	0000330d 	andeq	r3, r0, sp, lsl #6
    88d8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    88dc:	00000110 	andeq	r0, r0, r0, lsl r1
    88e0:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
    88e4:	00000014 	andeq	r0, r0, r4, lsl r0
    88e8:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
    88ec:	201f0000 	andscs	r0, pc, r0
    88f0:	20000001 	andcs	r0, r0, r1
    88f4:	16000033 			; <UNDEFINED> instruction: 0x16000033
    88f8:	0000012c 	andeq	r0, r0, ip, lsr #2
    88fc:	00003341 	andeq	r3, r0, r1, asr #6
    8900:	0023b215 	eoreq	fp, r3, r5, lsl r2
    8904:	00000a00 	andeq	r0, r0, r0, lsl #20
    8908:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    890c:	33600000 	cmncc	r0, #0
    8910:	b2150000 	andslt	r0, r5, #0
    8914:	0a000023 	beq	89a8 <__exidx_end+0x5c1c>
    8918:	16000000 	strne	r0, [r0], -r0
    891c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8920:	00003381 	andeq	r3, r0, r1, lsl #7
    8924:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8928:	00000139 	andeq	r0, r0, r9, lsr r1
    892c:	000023c4 	andeq	r2, r0, r4, asr #7
    8930:	00000028 	andeq	r0, r0, r8, lsr #32
    8934:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    8938:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    893c:	94000001 	strls	r0, [r0], #-1
    8940:	16000033 			; <UNDEFINED> instruction: 0x16000033
    8944:	00000155 	andeq	r0, r0, r5, asr r1
    8948:	000033b5 			; <UNDEFINED> instruction: 0x000033b5
    894c:	00016120 	andeq	r6, r1, r0, lsr #2
    8950:	23c61500 	biccs	r1, r6, #0, 10
    8954:	001c0000 	andseq	r0, ip, r0
    8958:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    895c:	d4000001 	strle	r0, [r0], #-1
    8960:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    8964:	000023c6 	andeq	r2, r0, r6, asr #7
    8968:	0000001c 	andeq	r0, r0, ip, lsl r0
    896c:	00015516 	andeq	r5, r1, r6, lsl r5
    8970:	0033f500 	eorseq	pc, r3, r0, lsl #10
    8974:	01611600 	cmneq	r1, r0, lsl #12
    8978:	34220000 	strtcc	r0, [r2], #-0
    897c:	00000000 	andeq	r0, r0, r0
    8980:	1bf31b00 	blne	ffccf588 <_estack+0xdfcca588>
    8984:	cf020000 	svcgt	0x00020000
    8988:	0000008c 	andeq	r0, r0, ip, lsl #1
    898c:	000023ec 	andeq	r2, r0, ip, ror #7
    8990:	00000010 	andeq	r0, r0, r0, lsl r0
    8994:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    8998:	8d1d0000 	ldchi	0, cr0, [sp, #-0]
    899c:	0100001c 	tsteq	r0, ip, lsl r0
    89a0:	008c0384 	addeq	r0, ip, r4, lsl #7
    89a4:	34350000 	ldrtcc	r0, [r5], #-0
    89a8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    89ac:	0000016e 	andeq	r0, r0, lr, ror #2
    89b0:	000023fc 	strdeq	r2, [r0], -ip
    89b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    89b8:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
    89bc:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    89c0:	50000001 	andpl	r0, r0, r1
    89c4:	16000034 			; <UNDEFINED> instruction: 0x16000034
    89c8:	0000018a 	andeq	r0, r0, sl, lsl #3
    89cc:	00003471 	andeq	r3, r0, r1, ror r4
    89d0:	00019620 	andeq	r9, r1, r0, lsr #12
    89d4:	23fe1500 	mvnscs	r1, #0, 10
    89d8:	001e0000 	andseq	r0, lr, r0
    89dc:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    89e0:	94000001 	strls	r0, [r0], #-1
    89e4:	15000034 	strne	r0, [r0, #-52]	; 0xffffffcc
    89e8:	000023fe 	strdeq	r2, [r0], -lr
    89ec:	0000001e 	andeq	r0, r0, lr, lsl r0
    89f0:	00018a16 	andeq	r8, r1, r6, lsl sl
    89f4:	0034b500 	eorseq	fp, r4, r0, lsl #10
    89f8:	01961600 	orrseq	r1, r6, r0, lsl #12
    89fc:	34e20000 	strbtcc	r0, [r2], #0
    8a00:	00000000 	andeq	r0, r0, r0
    8a04:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
    8a08:	24280000 	strtcs	r0, [r8], #-0
    8a0c:	00140000 	andseq	r0, r4, r0
    8a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a14:	0000070c 	andeq	r0, r0, ip, lsl #14
    8a18:	0001b31f 	andeq	fp, r1, pc, lsl r3
    8a1c:	0034f500 	eorseq	pc, r4, r0, lsl #10
    8a20:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    8a24:	35160000 	ldrcc	r0, [r6, #-0]
    8a28:	2a150000 	bcs	548a30 <__ccfg+0x528a88>
    8a2c:	0a000024 	beq	8ac4 <__exidx_end+0x5d38>
    8a30:	1f000000 	svcne	0x00000000
    8a34:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    8a38:	00003535 	andeq	r3, r0, r5, lsr r5
    8a3c:	00242a15 	eoreq	r2, r4, r5, lsl sl
    8a40:	00000a00 	andeq	r0, r0, r0, lsl #20
    8a44:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    8a48:	35560000 	ldrbcc	r0, [r6, #-0]
    8a4c:	00000000 	andeq	r0, r0, r0
    8a50:	01cc1e00 	biceq	r1, ip, r0, lsl #28
    8a54:	243c0000 	ldrtcs	r0, [ip], #-0
    8a58:	00140000 	andseq	r0, r4, r0
    8a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a60:	00000758 	andeq	r0, r0, r8, asr r7
    8a64:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    8a68:	00356900 	eorseq	r6, r5, r0, lsl #18
    8a6c:	01e81600 	mvneq	r1, r0, lsl #12
    8a70:	358a0000 	strcc	r0, [sl]
    8a74:	3e150000 	cdpcc	0, 1, cr0, cr5, cr0, {0}
    8a78:	0a000024 	beq	8b10 <__exidx_end+0x5d84>
    8a7c:	1f000000 	svcne	0x00000000
    8a80:	000001dc 	ldrdeq	r0, [r0], -ip
    8a84:	000035a9 	andeq	r3, r0, r9, lsr #11
    8a88:	00243e15 	eoreq	r3, r4, r5, lsl lr
    8a8c:	00000a00 	andeq	r0, r0, r0, lsl #20
    8a90:	01e81600 	mvneq	r1, r0, lsl #12
    8a94:	35ca0000 	strbcc	r0, [sl]
    8a98:	00000000 	andeq	r0, r0, r0
    8a9c:	19751700 	ldmdbne	r5!, {r8, r9, sl, ip}^
    8aa0:	73020000 	movwvc	r0, #8192	; 0x2000
    8aa4:	00002450 	andeq	r2, r0, r0, asr r4
    8aa8:	00000110 	andeq	r0, r0, r0, lsl r1
    8aac:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    8ab0:	201c0000 	andscs	r0, ip, r0
    8ab4:	0100001a 	tsteq	r0, sl, lsl r0
    8ab8:	008c0127 	addeq	r0, ip, r7, lsr #2
    8abc:	35dd0000 	ldrbcc	r0, [sp]
    8ac0:	8c1c0000 	ldchi	0, cr0, [ip], {-0}
    8ac4:	0100001a 	tsteq	r0, sl, lsl r0
    8ac8:	008c0127 	addeq	r0, ip, r7, lsr #2
    8acc:	36090000 	strcc	r0, [r9], -r0
    8ad0:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    8ad4:	0100001d 	tsteq	r0, sp, lsl r0
    8ad8:	008c0129 	addeq	r0, ip, r9, lsr #2
    8adc:	362a0000 	strtcc	r0, [sl], -r0
    8ae0:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    8ae4:	80000001 	andhi	r0, r0, r1
    8ae8:	28000024 	stmdacs	r0, {r2, r5}
    8aec:	0100000e 	tsteq	r0, lr
    8af0:	07c10140 	strbeq	r0, [r1, r0, asr #2]
    8af4:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    8af8:	1600000e 	strne	r0, [r0], -lr
    8afc:	00000205 	andeq	r0, r0, r5, lsl #4
    8b00:	000036f8 	strdeq	r3, [r0], -r8
    8b04:	5a220000 	bpl	888b0c <__ccfg+0x868b64>
    8b08:	43000024 	movwmi	r0, #36	; 0x24
    8b0c:	d6000003 	strle	r0, [r0], -r3
    8b10:	1a000007 	bne	8b34 <__exidx_end+0x5da8>
    8b14:	f3035001 	vhadd.u8	d5, d3, d1
    8b18:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    8b1c:	00002466 	andeq	r2, r0, r6, ror #8
    8b20:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b24:	000007ef 	andeq	r0, r0, pc, ror #15
    8b28:	0151011a 	cmpeq	r1, sl, lsl r1
    8b2c:	50011a48 	andpl	r1, r1, r8, asr #20
    8b30:	00007402 	andeq	r7, r0, r2, lsl #8
    8b34:	00246a23 	eoreq	r6, r4, r3, lsr #20
    8b38:	0003bd00 	andeq	fp, r3, r0, lsl #26
    8b3c:	24802400 	strcs	r2, [r0], #1024	; 0x400
    8b40:	76020000 	strvc	r0, [r2], -r0
    8b44:	00081d00 	andeq	r1, r8, r0, lsl #26
    8b48:	53011a00 	movwpl	r1, #6656	; 0x1a00
    8b4c:	011a3001 	tsteq	sl, r1
    8b50:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    8b54:	51011a03 	tstpl	r1, r3, lsl #20
    8b58:	1a2c0802 	bne	b0ab68 <__ccfg+0xaeabc0>
    8b5c:	74025001 	strvc	r5, [r2], #-1
    8b60:	90220000 	eorls	r0, r2, r0
    8b64:	d6000024 	strle	r0, [r0], -r4, lsr #32
    8b68:	3600000a 	strcc	r0, [r0], -sl
    8b6c:	1a000008 	bne	8b94 <__exidx_end+0x5e08>
    8b70:	4c015101 	stfmis	f5, [r1], {1}
    8b74:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8b78:	23000074 	movwcs	r0, #116	; 0x74
    8b7c:	00002494 	muleq	r0, r4, r4
    8b80:	00000404 	andeq	r0, r0, r4, lsl #8
    8b84:	00249e22 	eoreq	r9, r4, r2, lsr #28
    8b88:	000ad600 	andeq	sp, sl, r0, lsl #12
    8b8c:	00085800 	andeq	r5, r8, r0, lsl #16
    8b90:	51011a00 	tstpl	r1, r0, lsl #20
    8b94:	011a4401 	tsteq	sl, r1, lsl #8
    8b98:	00740250 	rsbseq	r0, r4, r0, asr r2
    8b9c:	24a22300 	strtcs	r2, [r2], #768	; 0x300
    8ba0:	043e0000 	ldrteq	r0, [lr], #-0
    8ba4:	ac220000 	stcge	0, cr0, [r2], #-0
    8ba8:	d6000024 	strle	r0, [r0], -r4, lsr #32
    8bac:	7a00000a 	bvc	8bdc <__exidx_end+0x5e50>
    8bb0:	1a000008 	bne	8bd8 <__exidx_end+0x5e4c>
    8bb4:	40015101 	andmi	r5, r1, r1, lsl #2
    8bb8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bbc:	22000074 	andcs	r0, r0, #116	; 0x74
    8bc0:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    8bc4:	00000478 	andeq	r0, r0, r8, ror r4
    8bc8:	0000088e 	andeq	r0, r0, lr, lsl #17
    8bcc:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bd0:	22000075 	andcs	r0, r0, #117	; 0x75
    8bd4:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    8bd8:	00000ad6 	ldrdeq	r0, [r0], -r6
    8bdc:	000008a7 	andeq	r0, r0, r7, lsr #17
    8be0:	0151011a 	cmpeq	r1, sl, lsl r1
    8be4:	50011a3c 	andpl	r1, r1, ip, lsr sl
    8be8:	00007402 	andeq	r7, r0, r2, lsl #8
    8bec:	0024c222 	eoreq	ip, r4, r2, lsr #4
    8bf0:	0000e700 	andeq	lr, r0, r0, lsl #14
    8bf4:	0008bb00 	andeq	fp, r8, r0, lsl #22
    8bf8:	50011a00 	andpl	r1, r1, r0, lsl #20
    8bfc:	00007502 	andeq	r7, r0, r2, lsl #10
    8c00:	0024d422 	eoreq	sp, r4, r2, lsr #8
    8c04:	00011000 	andeq	r1, r1, r0
    8c08:	0008cf00 	andeq	ip, r8, r0, lsl #30
    8c0c:	50011a00 	andpl	r1, r1, r0, lsl #20
    8c10:	00007502 	andeq	r7, r0, r2, lsl #10
    8c14:	0024e222 	eoreq	lr, r4, r2, lsr #4
    8c18:	00013900 	andeq	r3, r1, r0, lsl #18
    8c1c:	0008e300 	andeq	lr, r8, r0, lsl #6
    8c20:	50011a00 	andpl	r1, r1, r0, lsl #20
    8c24:	00007502 	andeq	r7, r0, r2, lsl #10
    8c28:	0024ec22 	eoreq	lr, r4, r2, lsr #24
    8c2c:	000ad600 	andeq	sp, sl, r0, lsl #12
    8c30:	0008fd00 	andeq	pc, r8, r0, lsl #26
    8c34:	51011a00 	tstpl	r1, r0, lsl #20
    8c38:	1a280802 	bne	a0ac48 <__ccfg+0x9eaca0>
    8c3c:	74025001 	strvc	r5, [r2], #-1
    8c40:	f2220000 	vhadd.s32	d0, d2, d0
    8c44:	be000024 	cdplt	0, 0, cr0, cr0, cr4, {1}
    8c48:	11000000 	mrsne	r0, (UNDEF: 0)
    8c4c:	1a000009 	bne	8c78 <__exidx_end+0x5eec>
    8c50:	75025001 	strvc	r5, [r2, #-1]
    8c54:	04220000 	strteq	r0, [r2], #-0
    8c58:	a3000025 	movwge	r0, #37	; 0x25
    8c5c:	25000001 	strcs	r0, [r0, #-1]
    8c60:	1a000009 	bne	8c8c <__exidx_end+0x5f00>
    8c64:	75025001 	strvc	r5, [r2, #-1]
    8c68:	16220000 	strtne	r0, [r2], -r0
    8c6c:	cc000025 	stcgt	0, cr0, [r0], {37}	; 0x25
    8c70:	39000001 	stmdbcc	r0, {r0}
    8c74:	1a000009 	bne	8ca0 <__exidx_end+0x5f14>
    8c78:	75025001 	strvc	r5, [r2, #-1]
    8c7c:	2a220000 	bcs	888c84 <__ccfg+0x868cdc>
    8c80:	6e000025 	cdpvs	0, 0, cr0, cr0, cr5, {1}
    8c84:	4d000001 	stcmi	0, cr0, [r0, #-4]
    8c88:	1a000009 	bne	8cb4 <__exidx_end+0x5f28>
    8c8c:	75025001 	strvc	r5, [r2, #-1]
    8c90:	34190000 	ldrcc	r0, [r9], #-0
    8c94:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8c98:	1a00000a 	bne	8cc8 <__exidx_end+0x5f3c>
    8c9c:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    8ca0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8ca4:	00000074 	andeq	r0, r0, r4, ror r0
    8ca8:	0019f217 	andseq	pc, r9, r7, lsl r2	; <UNPREDICTABLE>
    8cac:	60fd0200 	rscsvs	r0, sp, r0, lsl #4
    8cb0:	64000025 	strvs	r0, [r0], #-37	; 0xffffffdb
    8cb4:	01000000 	mrseq	r0, (UNDEF: 0)
    8cb8:	0009899c 	muleq	r9, ip, r9
    8cbc:	1bc11d00 	blne	ff0500c4 <_estack+0xdf04b0c4>
    8cc0:	eb010000 	bl	48cc8 <__ccfg+0x28d20>
    8cc4:	00008c03 	andeq	r8, r0, r3, lsl #24
    8cc8:	00371100 	eorseq	r1, r7, r0, lsl #2
    8ccc:	4f0c0000 	svcmi	0x000c0000
    8cd0:	0200001f 	andeq	r0, r0, #31
    8cd4:	25c40106 	strbcs	r0, [r4, #262]	; 0x106
    8cd8:	00280000 	eoreq	r0, r8, r0
    8cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ce0:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    8ce4:	001d8e1c 	andseq	r8, sp, ip, lsl lr
    8ce8:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
    8cec:	0000008c 	andeq	r0, r0, ip, lsl #1
    8cf0:	0000372c 	andeq	r3, r0, ip, lsr #14
    8cf4:	19a51700 	stmibne	r5!, {r8, r9, sl, ip}
    8cf8:	7a020000 	bvc	88d00 <__ccfg+0x68d58>
    8cfc:	000025ec 	andeq	r2, r0, ip, ror #11
    8d00:	00000150 	andeq	r0, r0, r0, asr r1
    8d04:	0ad69c01 	beq	ff5afd10 <_estack+0xdf5aad10>
    8d08:	8c1c0000 	ldchi	0, cr0, [ip], {-0}
    8d0c:	0100001a 	tsteq	r0, sl, lsl r0
    8d10:	008c019b 	umulleq	r0, ip, fp, r1
    8d14:	374d0000 	strbcc	r0, [sp, -r0]
    8d18:	ed1d0000 	ldc	0, cr0, [sp, #-0]
    8d1c:	0100001e 	tsteq	r0, lr, lsl r0
    8d20:	008c019d 	umulleq	r0, ip, sp, r1
    8d24:	37a80000 	strcc	r0, [r8, r0]!
    8d28:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    8d2c:	0100001d 	tsteq	r0, sp, lsl r0
    8d30:	008c019e 	umulleq	r0, ip, lr, r1
    8d34:	37bb0000 	ldrcc	r0, [fp, r0]!
    8d38:	411d0000 	tstmi	sp, r0
    8d3c:	0100001b 	tsteq	r0, fp, lsl r0
    8d40:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
    8d44:	37ce0000 	strbcc	r0, [lr, r0]
    8d48:	1c1d0000 	ldcne	0, cr0, [sp], {-0}
    8d4c:	0100001b 	tsteq	r0, fp, lsl r0
    8d50:	008c01a0 	addeq	r0, ip, r0, lsr #3
    8d54:	37ec0000 	strbcc	r0, [ip, r0]!
    8d58:	12250000 	eorne	r0, r5, #0
    8d5c:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    8d60:	3e000026 	cdpcc	0, 0, cr0, cr0, cr6, {1}
    8d64:	01000000 	mrseq	r0, (UNDEF: 0)
    8d68:	76230216 			; <UNDEFINED> instruction: 0x76230216
    8d6c:	3c000026 	stccc	0, cr0, [r0], {38}	; 0x26
    8d70:	22000006 	andcs	r0, r0, #6
    8d74:	00002698 	muleq	r0, r8, r6
    8d78:	00000af2 	strdeq	r0, [r0], -r2
    8d7c:	00000a46 	andeq	r0, r0, r6, asr #20
    8d80:	0151011a 	cmpeq	r1, sl, lsl r1
    8d84:	50011a31 	andpl	r1, r1, r1, lsr sl
    8d88:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8d8c:	0000269e 	muleq	r0, lr, r6
    8d90:	00000989 	andeq	r0, r0, r9, lsl #19
    8d94:	00000a5d 	andeq	r0, r0, sp, asr sl
    8d98:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    8d9c:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
    8da0:	a4230000 	strtge	r0, [r3], #-0
    8da4:	08000026 	stmdaeq	r0, {r1, r2, r5}
    8da8:	2200000b 	andcs	r0, r0, #11
    8dac:	000026ae 	andeq	r2, r0, lr, lsr #13
    8db0:	00000af2 	strdeq	r0, [r0], -r2
    8db4:	00000a7f 	andeq	r0, r0, pc, ror sl
    8db8:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8dbc:	011a0074 	tsteq	sl, r4, ror r0
    8dc0:	00340150 	eorseq	r0, r4, r0, asr r1
    8dc4:	0026b422 	eoreq	fp, r6, r2, lsr #8
    8dc8:	000b0800 	andeq	r0, fp, r0, lsl #16
    8dcc:	000a9200 	andeq	r9, sl, r0, lsl #4
    8dd0:	50011a00 	andpl	r1, r1, r0, lsl #20
    8dd4:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8dd8:	000026c4 	andeq	r2, r0, r4, asr #13
    8ddc:	00000989 	andeq	r0, r0, r9, lsl #19
    8de0:	00000aac 	andeq	r0, r0, ip, lsr #21
    8de4:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
    8de8:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
    8dec:	1a00ffff 	bne	48df0 <__ccfg+0x28e48>
    8df0:	26d42600 	ldrbcs	r2, [r4], r0, lsl #12
    8df4:	0acc0000 	beq	ff308dfc <_estack+0xdf303dfc>
    8df8:	011a0000 	tsteq	sl, r0
    8dfc:	000c0552 	andeq	r0, ip, r2, asr r5
    8e00:	1a600060 	bne	1808f88 <__ccfg+0x17e8fe0>
    8e04:	37015101 	strcc	r5, [r1, -r1, lsl #2]
    8e08:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
    8e0c:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    8e10:	26ea2300 	strbtcs	r2, [sl], r0, lsl #6
    8e14:	0af20000 	beq	ffc88e1c <_estack+0xdfc83e1c>
    8e18:	27000000 	strcs	r0, [r0, -r0]
    8e1c:	00001d07 	andeq	r1, r0, r7, lsl #26
    8e20:	f201ca06 	vpmax.s8	d12, d1, d6
    8e24:	2800000a 	stmdacs	r0, {r1, r3}
    8e28:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e2c:	00008c28 	andeq	r8, r0, r8, lsr #24
    8e30:	008c2800 	addeq	r2, ip, r0, lsl #16
    8e34:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    8e38:	00001b29 	andeq	r1, r0, r9, lsr #22
    8e3c:	0b08f907 	bleq	247260 <__ccfg+0x2272b8>
    8e40:	8c280000 	stchi	0, cr0, [r8], #-0
    8e44:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8e48:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e4c:	1ec42a00 	vdivne.f32	s5, s8, s0
    8e50:	10070000 	andne	r0, r7, r0
    8e54:	00008c01 	andeq	r8, r0, r1, lsl #24
    8e58:	008c2800 	addeq	r2, ip, r0, lsl #16
    8e5c:	00000000 	andeq	r0, r0, r0
    8e60:	00000923 	andeq	r0, r0, r3, lsr #18
    8e64:	2a4c0004 	bcs	1308e7c <__ccfg+0x12e8ed4>
    8e68:	01040000 	mrseq	r0, (UNDEF: 4)
    8e6c:	0000166c 	andeq	r1, r0, ip, ror #12
    8e70:	0020d701 	eoreq	sp, r0, r1, lsl #14
    8e74:	00176100 	andseq	r6, r7, r0, lsl #2
    8e78:	000f1800 	andeq	r1, pc, r0, lsl #16
    8e7c:	00000000 	andeq	r0, r0, r0
    8e80:	0061d500 	rsbeq	sp, r1, r0, lsl #10
    8e84:	171c0200 	ldrne	r0, [ip, -r0, lsl #4]
    8e88:	1b060000 	blne	188e90 <__ccfg+0x168ee8>
    8e8c:	00000030 	andeq	r0, r0, r0, lsr r0
    8e90:	b2060103 	andlt	r0, r6, #-1073741824	; 0xc0000000
    8e94:	02000003 	andeq	r0, r0, #3
    8e98:	00002216 	andeq	r2, r0, r6, lsl r2
    8e9c:	00421d06 	subeq	r1, r2, r6, lsl #26
    8ea0:	01030000 	mrseq	r0, (UNDEF: 3)
    8ea4:	0003b008 	andeq	fp, r3, r8
    8ea8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    8eac:	000003ec 	andeq	r0, r0, ip, ror #7
    8eb0:	00210402 	eoreq	r0, r1, r2, lsl #8
    8eb4:	5b2b0600 	blpl	aca6bc <__ccfg+0xaaa714>
    8eb8:	03000000 	movweq	r0, #0
    8ebc:	026e0702 	rsbeq	r0, lr, #524288	; 0x80000
    8ec0:	62020000 	andvs	r0, r2, #0
    8ec4:	06000016 			; <UNDEFINED> instruction: 0x06000016
    8ec8:	00006d3f 	andeq	r6, r0, pc, lsr sp
    8ecc:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    8ed0:	000000a4 	andeq	r0, r0, r4, lsr #1
    8ed4:	0017cd02 	andseq	ip, r7, r2, lsl #26
    8ed8:	7f410600 	svcvc	0x00410600
    8edc:	03000000 	movweq	r0, #0
    8ee0:	00790704 	rsbseq	r0, r9, r4, lsl #14
    8ee4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8ee8:	00009f05 	andeq	r9, r0, r5, lsl #30
    8eec:	07080300 	streq	r0, [r8, -r0, lsl #6]
    8ef0:	00000074 	andeq	r0, r0, r4, ror r0
    8ef4:	69050404 	stmdbvs	r5, {r2, sl}
    8ef8:	0300746e 	movweq	r7, #1134	; 0x46e
    8efc:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    8f00:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    8f04:	07000017 	smladeq	r0, r7, r0, r0
    8f08:	00002513 	andeq	r2, r0, r3, lsl r5
    8f0c:	22180200 	andscs	r0, r8, #0, 4
    8f10:	14070000 	strne	r0, [r7], #-0
    8f14:	00000037 	andeq	r0, r0, r7, lsr r0
    8f18:	00210602 	eoreq	r0, r1, r2, lsl #12
    8f1c:	501a0700 	andspl	r0, sl, r0, lsl #14
    8f20:	02000000 	andeq	r0, r0, #0
    8f24:	00001664 	andeq	r1, r0, r4, ror #12
    8f28:	00621f07 	rsbeq	r1, r2, r7, lsl #30
    8f2c:	cf020000 	svcgt	0x00020000
    8f30:	07000017 	smladeq	r0, r7, r0, r0
    8f34:	00007420 	andeq	r7, r0, r0, lsr #8
    8f38:	22ef0200 	rsccs	r0, pc, #0, 4
    8f3c:	33080000 	movwcc	r0, #32768	; 0x8000
    8f40:	000000e4 	andeq	r0, r0, r4, ror #1
    8f44:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    8f48:	05060000 	streq	r0, [r6, #-0]
    8f4c:	0000f104 	andeq	pc, r0, r4, lsl #2
    8f50:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    8f54:	ad080000 	stcge	0, cr0, [r8, #-0]
    8f58:	00000000 	andeq	r0, r0, r0
    8f5c:	00236502 	eoreq	r6, r3, r2, lsl #10
    8f60:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    8f64:	05000001 	streq	r0, [r0, #-1]
    8f68:	00010d04 	andeq	r0, r1, r4, lsl #26
    8f6c:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    8f70:	01260000 			; <UNDEFINED> instruction: 0x01260000
    8f74:	26080000 	strcs	r0, [r8], -r0
    8f78:	08000001 	stmdaeq	r0, {r0}
    8f7c:	000000ce 	andeq	r0, r0, lr, asr #1
    8f80:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f84:	04050000 	streq	r0, [r5], #-0
    8f88:	000000ad 	andeq	r0, r0, sp, lsr #1
    8f8c:	00248e02 	eoreq	r8, r4, r2, lsl #28
    8f90:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
    8f94:	05000001 	streq	r0, [r0, #-1]
    8f98:	00013d04 	andeq	r3, r1, r4, lsl #26
    8f9c:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    8fa0:	fa020000 	blx	88fa8 <__ccfg+0x69000>
    8fa4:	09000024 	stmdbeq	r0, {r2, r5}
    8fa8:	00013748 	andeq	r3, r1, r8, asr #14
    8fac:	22400200 	subcs	r0, r0, #0, 4
    8fb0:	4a090000 	bmi	248fb8 <__ccfg+0x229010>
    8fb4:	00000158 	andeq	r0, r0, r8, asr r1
    8fb8:	015e0405 	cmpeq	lr, r5, lsl #8
    8fbc:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8fc0:	6d000000 	stcvs	0, cr0, [r0, #-0]
    8fc4:	08000001 	stmdaeq	r0, {r0}
    8fc8:	000000ce 	andeq	r0, r0, lr, asr #1
    8fcc:	21a60200 			; <UNDEFINED> instruction: 0x21a60200
    8fd0:	4c090000 	stcmi	0, cr0, [r9], {-0}
    8fd4:	00000137 	andeq	r0, r0, r7, lsr r1
    8fd8:	00210f02 	eoreq	r0, r1, r2, lsl #30
    8fdc:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
    8fe0:	02000001 	andeq	r0, r0, #1
    8fe4:	00002196 	muleq	r0, r6, r1
    8fe8:	00e45109 	rsceq	r5, r4, r9, lsl #2
    8fec:	12020000 	andne	r0, r2, #0
    8ff0:	09000020 	stmdbeq	r0, {r5}
    8ff4:	00019953 	andeq	r9, r1, r3, asr r9
    8ff8:	9f040500 	svcls	0x00040500
    8ffc:	09000001 	stmdbeq	r0, {r0}
    9000:	000000ce 	andeq	r0, r0, lr, asr #1
    9004:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    9008:	0001b808 	andeq	fp, r1, r8, lsl #16
    900c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    9010:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    9014:	00000000 	andeq	r0, r0, r0
    9018:	00b80405 	adcseq	r0, r8, r5, lsl #8
    901c:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    9020:	09000023 	stmdbeq	r0, {r0, r1, r5}
    9024:	0001c957 	andeq	ip, r1, r7, asr r9
    9028:	cf040500 	svcgt	0x00040500
    902c:	09000001 	stmdbeq	r0, {r0}
    9030:	000000ce 	andeq	r0, r0, lr, asr #1
    9034:	000001e3 	andeq	r0, r0, r3, ror #3
    9038:	0001e308 	andeq	lr, r1, r8, lsl #6
    903c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    9040:	05000000 	streq	r0, [r0, #-0]
    9044:	0000ce04 	andeq	ip, r0, r4, lsl #28
    9048:	21c90200 	biccs	r0, r9, r0, lsl #4
    904c:	5a090000 	bpl	249054 <__ccfg+0x2290ac>
    9050:	000001c9 	andeq	r0, r0, r9, asr #3
    9054:	00229202 	eoreq	r9, r2, r2, lsl #4
    9058:	c95d0900 	ldmdbgt	sp, {r8, fp}^
    905c:	02000001 	andeq	r0, r0, #1
    9060:	00002024 	andeq	r2, r0, r4, lsr #32
    9064:	01c96009 	biceq	r6, r9, r9
    9068:	b4020000 	strlt	r0, [r2], #-0
    906c:	09000023 	stmdbeq	r0, {r0, r1, r5}
    9070:	0000e463 	andeq	lr, r0, r3, ror #8
    9074:	204a0200 	subcs	r0, sl, r0, lsl #4
    9078:	65090000 	strvs	r0, [r9, #-0]
    907c:	00000220 	andeq	r0, r0, r0, lsr #4
    9080:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    9084:	31070000 	mrscc	r0, (UNDEF: 7)
    9088:	08000002 	stmdaeq	r0, {r1}
    908c:	000000ce 	andeq	r0, r0, lr, asr #1
    9090:	250b0200 	strcs	r0, [fp, #-512]	; 0xfffffe00
    9094:	67090000 	strvs	r0, [r9, -r0]
    9098:	00000220 	andeq	r0, r0, r0, lsr #4
    909c:	00230002 	eoreq	r0, r3, r2
    90a0:	eb690900 	bl	1a4b4a8 <__ccfg+0x1a2b500>
    90a4:	02000000 	andeq	r0, r0, #0
    90a8:	000024d9 	ldrdeq	r2, [r0], -r9
    90ac:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
    90b0:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    90b4:	09000022 	stmdbeq	r0, {r1, r5}
    90b8:	0000eb6d 	andeq	lr, r0, sp, ror #22
    90bc:	22c00200 	sbccs	r0, r0, #0, 4
    90c0:	6f090000 	svcvs	0x00090000
    90c4:	000000eb 	andeq	r0, r0, fp, ror #1
    90c8:	7a094c0b 	bvc	25c0fc <__ccfg+0x23c154>
    90cc:	00000355 	andeq	r0, r0, r5, asr r3
    90d0:	0022640c 	eoreq	r6, r2, ip, lsl #8
    90d4:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
    90d8:	00000000 	andeq	r0, r0, r0
    90dc:	0024cc0c 	eoreq	ip, r4, ip, lsl #24
    90e0:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
    90e4:	04000001 	streq	r0, [r0], #-1
    90e8:	0022880c 	eoreq	r8, r2, ip, lsl #16
    90ec:	427e0900 	rsbsmi	r0, lr, #0, 18
    90f0:	08000001 	stmdaeq	r0, {r0}
    90f4:	0023f30c 	eoreq	pc, r3, ip, lsl #6
    90f8:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
    90fc:	0c000001 	stceq	0, cr0, [r0], {1}
    9100:	0024050c 	eoreq	r0, r4, ip, lsl #10
    9104:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
    9108:	10000001 	andne	r0, r0, r1
    910c:	0024170c 	eoreq	r1, r4, ip, lsl #14
    9110:	78810900 	stmvc	r1, {r8, fp}
    9114:	14000001 	strne	r0, [r0], #-1
    9118:	0021620c 	eoreq	r6, r1, ip, lsl #4
    911c:	83820900 	orrhi	r0, r2, #0, 18
    9120:	18000001 	stmdane	r0, {r0}
    9124:	00227d0c 	eoreq	r7, r2, ip, lsl #26
    9128:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
    912c:	1c000001 	stcne	0, cr0, [r0], {1}
    9130:	0023ce0c 	eoreq	ip, r3, ip, lsl #28
    9134:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
    9138:	20000001 	andcs	r0, r0, r1
    913c:	0022050c 	eoreq	r0, r2, ip, lsl #10
    9140:	e9850900 	stmib	r5, {r8, fp}
    9144:	24000001 	strcs	r0, [r0], #-1
    9148:	0022200c 	eoreq	r2, r2, ip
    914c:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
    9150:	28000001 	stmdacs	r0, {r0}
    9154:	00243b0c 	eoreq	r3, r4, ip, lsl #22
    9158:	ff870900 			; <UNDEFINED> instruction: 0xff870900
    915c:	2c000001 	stccs	0, cr0, [r0], {1}
    9160:	0021b70c 	eoreq	fp, r1, ip, lsl #14
    9164:	15880900 	strne	r0, [r8, #2304]	; 0x900
    9168:	30000002 	andcc	r0, r0, r2
    916c:	0024290c 	eoreq	r2, r4, ip, lsl #18
    9170:	31890900 	orrcc	r0, r9, r0, lsl #18
    9174:	34000002 	strcc	r0, [r0], #-2
    9178:	00226a0c 	eoreq	r6, r2, ip, lsl #20
    917c:	0a8a0900 	beq	fe28b584 <_estack+0xde286584>
    9180:	38000002 	stmdacc	r0, {r1}
    9184:	0022de0c 	eoreq	sp, r2, ip, lsl #28
    9188:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
    918c:	3c000002 	stccc	0, cr0, [r0], {2}
    9190:	0023e40c 	eoreq	lr, r3, ip, lsl #8
    9194:	478c0900 	strmi	r0, [ip, r0, lsl #18]
    9198:	40000002 	andmi	r0, r0, r2
    919c:	0021df0c 	eoreq	sp, r1, ip, lsl #30
    91a0:	528d0900 	addpl	r0, sp, #0, 18
    91a4:	44000002 	strmi	r0, [r0], #-2
    91a8:	00203b0c 	eoreq	r3, r0, ip, lsl #22
    91ac:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
    91b0:	48000002 	stmdami	r0, {r1}
    91b4:	233f0200 	teqcs	pc, #0, 4
    91b8:	8f090000 	svchi	0x00090000
    91bc:	00000268 	andeq	r0, r0, r8, ror #4
    91c0:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
    91c4:	00000399 	muleq	r0, r9, r3
    91c8:	0023820c 	eoreq	r8, r3, ip, lsl #4
    91cc:	ce4f0100 	dvfgte	f0, f7, f0
    91d0:	00000000 	andeq	r0, r0, r0
    91d4:	00244f0c 	eoreq	r4, r4, ip, lsl #30
    91d8:	b8500100 	ldmdalt	r0, {r8}^
    91dc:	04000000 	streq	r0, [r0], #-0
    91e0:	00220e0c 	eoreq	r0, r2, ip, lsl #28
    91e4:	ad510100 	ldfgee	f0, [r1, #-0]
    91e8:	06000000 	streq	r0, [r0], -r0
    91ec:	00214d0c 	eoreq	r4, r1, ip, lsl #26
    91f0:	a2520100 	subsge	r0, r2, #0, 2
    91f4:	07000000 	streq	r0, [r0, -r0]
    91f8:	247b0200 	ldrbtcs	r0, [fp], #-512	; 0xfffffe00
    91fc:	53010000 	movwpl	r0, #4096	; 0x1000
    9200:	00000360 	andeq	r0, r0, r0, ror #6
    9204:	00054c0d 	andeq	r4, r5, sp, lsl #24
    9208:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    920c:	0003be03 	andeq	fp, r3, r3, lsl #28
    9210:	05060e00 	streq	r0, [r6, #-3584]	; 0xfffff200
    9214:	dc020000 	stcle	0, cr0, [r2], {-0}
    9218:	0000ce01 	andeq	ip, r0, r1, lsl #28
    921c:	610f0000 	mrsvs	r0, CPSR
    9220:	02000005 	andeq	r0, r0, #5
    9224:	00ce022c 	sbceq	r0, lr, ip, lsr #4
    9228:	10030000 	andne	r0, r3, r0
    922c:	0000066b 	andeq	r0, r0, fp, ror #12
    9230:	03022a04 	movweq	r2, #10756	; 0x2a04
    9234:	001e0011 	andseq	r0, lr, r1, lsl r0
    9238:	c3e90500 	mvngt	r0, #0, 10
    923c:	03000000 	movweq	r0, #0
    9240:	000003fb 	strdeq	r0, [r0], -fp
    9244:	001b5012 	andseq	r5, fp, r2, lsl r0
    9248:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
    924c:	13000000 	movwne	r0, #0
    9250:	00001e59 	andeq	r1, r0, r9, asr lr
    9254:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
    9258:	0d000000 	stceq	0, cr0, [r0, #-0]
    925c:	0000216e 	andeq	r2, r0, lr, ror #2
    9260:	03025c04 	movweq	r5, #11268	; 0x2c04
    9264:	00000415 	andeq	r0, r0, r5, lsl r4
    9268:	00213c0e 	eoreq	r3, r1, lr, lsl #24
    926c:	025c0400 	subseq	r0, ip, #0, 8
    9270:	000000ce 	andeq	r0, r0, lr, asr #1
    9274:	23531000 	cmpcs	r3, #0
    9278:	40030000 	andmi	r0, r3, r0
    927c:	0f0f0301 	svceq	0x000f0301
    9280:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    9284:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
    9288:	03030000 	movweq	r0, #12288	; 0x3000
    928c:	0bd40201 	bleq	ff509a98 <_estack+0xdf504a98>
    9290:	97140000 	ldrls	r0, [r4, -r0]
    9294:	0a000023 	beq	9328 <__exidx_end+0x659c>
    9298:	0000009e 	muleq	r0, lr, r0
    929c:	0000f400 	andeq	pc, r0, r0, lsl #8
    92a0:	cd9c0100 	ldfgts	f0, [ip]
    92a4:	15000005 	strne	r0, [r0, #-5]
    92a8:	000021fd 	strdeq	r2, [r0], -sp
    92ac:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
    92b0:	37ff0000 	ldrbcc	r0, [pc, r0]!
    92b4:	54160000 	ldrpl	r0, [r6], #-0
    92b8:	01000021 	tsteq	r0, r1, lsr #32
    92bc:	0000ce7c 	andeq	ip, r0, ip, ror lr
    92c0:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
    92c4:	000003a4 	andeq	r0, r0, r4, lsr #7
    92c8:	00000000 	andeq	r0, r0, r0
    92cc:	00000ee8 	andeq	r0, r0, r8, ror #29
    92d0:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
    92d4:	b1180000 	tstlt	r8, r0
    92d8:	01000003 	tsteq	r0, r3
    92dc:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
    92e0:	00000000 	andeq	r0, r0, r0
    92e4:	00040000 	andeq	r0, r4, r0
    92e8:	82010000 	andhi	r0, r1, #0
    92ec:	0004151a 	andeq	r1, r4, sl, lsl r5
    92f0:	00000000 	andeq	r0, r0, r0
    92f4:	00000800 	andeq	r0, r0, r0, lsl #16
    92f8:	a9a10100 	stmibge	r1!, {r8}
    92fc:	1b000004 	blne	9314 <__exidx_end+0x6588>
    9300:	00000000 	andeq	r0, r0, r0
    9304:	000008de 	ldrdeq	r0, [r0], -lr
    9308:	03cb1900 	biceq	r1, fp, #0, 18
    930c:	00000000 	andeq	r0, r0, r0
    9310:	00060000 	andeq	r0, r6, r0
    9314:	b1010000 	mrslt	r0, (UNDEF: 1)
    9318:	00041e19 	andeq	r1, r4, r9, lsl lr
    931c:	00000000 	andeq	r0, r0, r0
    9320:	00000400 	andeq	r0, r0, r0, lsl #8
    9324:	1ab20100 	bne	fec8972c <_estack+0xdec8472c>
    9328:	000003fb 	strdeq	r0, [r0], -fp
    932c:	00000000 	andeq	r0, r0, r0
    9330:	0000000a 	andeq	r0, r0, sl
    9334:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
    9338:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    933c:	11000004 	tstne	r0, r4
    9340:	03cb1900 	biceq	r1, fp, #0, 18
    9344:	00000000 	andeq	r0, r0, r0
    9348:	00040000 	andeq	r0, r4, r0
    934c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    9350:	00041e19 	andeq	r1, r4, r9, lsl lr
    9354:	00000000 	andeq	r0, r0, r0
    9358:	00000200 	andeq	r0, r0, r0, lsl #4
    935c:	19ba0100 	ldmibne	sl!, {r8}
    9360:	000003cb 	andeq	r0, r0, fp, asr #7
    9364:	00000000 	andeq	r0, r0, r0
    9368:	00000006 	andeq	r0, r0, r6
    936c:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
    9370:	00000004 	andeq	r0, r0, r4
    9374:	02000000 	andeq	r0, r0, #0
    9378:	01000000 	mrseq	r0, (UNDEF: 0)
    937c:	00001cd0 	ldrdeq	r1, [r0], -r0
    9380:	052e0000 	streq	r0, [lr, #-0]!
    9384:	011d0000 	tsteq	sp, r0
    9388:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    938c:	001c0007 	andseq	r0, ip, r7
    9390:	3f000000 	svccc	0x00000000
    9394:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9398:	0a035001 	beq	dd3a4 <__ccfg+0xbd3fc>
    939c:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
    93a0:	00000000 	andeq	r0, r0, r0
    93a4:	000008ef 	andeq	r0, r0, pc, ror #17
    93a8:	00000557 	andeq	r0, r0, r7, asr r5
    93ac:	0151011d 	cmpeq	r1, sp, lsl r1
    93b0:	50011d31 	andpl	r1, r1, r1, lsr sp
    93b4:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
    93b8:	00000000 	andeq	r0, r0, r0
    93bc:	000008ef 	andeq	r0, r0, pc, ror #17
    93c0:	0000056f 	andeq	r0, r0, pc, ror #10
    93c4:	0151011d 	cmpeq	r1, sp, lsl r1
    93c8:	50011d33 	andpl	r1, r1, r3, lsr sp
    93cc:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
    93d0:	00000000 	andeq	r0, r0, r0
    93d4:	00000905 	andeq	r0, r0, r5, lsl #18
    93d8:	00000582 	andeq	r0, r0, r2, lsl #11
    93dc:	0150011d 	cmpeq	r0, sp, lsl r1
    93e0:	001c0031 	andseq	r0, ip, r1, lsr r0
    93e4:	91000000 	mrsls	r0, (UNDEF: 0)
    93e8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    93ec:	37015001 	strcc	r5, [r1, -r1]
    93f0:	00001c00 	andeq	r1, r0, r0, lsl #24
    93f4:	05a00000 	streq	r0, [r0, #0]!
    93f8:	011d0000 	tsteq	sp, r0
    93fc:	00370150 	eorseq	r0, r7, r0, asr r1
    9400:	0000001c 	andeq	r0, r0, ip, lsl r0
    9404:	0005b000 	andeq	fp, r5, r0
    9408:	50011d00 	andpl	r1, r1, r0, lsl #26
    940c:	00007602 	andeq	r7, r0, r2, lsl #12
    9410:	0000001c 	andeq	r0, r0, ip, lsl r0
    9414:	0005c000 	andeq	ip, r5, r0
    9418:	50011d00 	andpl	r1, r1, r0, lsl #26
    941c:	00007602 	andeq	r7, r0, r2, lsl #12
    9420:	0000001f 	andeq	r0, r0, pc, lsl r0
    9424:	50011d00 	andpl	r1, r1, r0, lsl #26
    9428:	00007602 	andeq	r7, r0, r2, lsl #12
    942c:	20af2000 	adccs	r2, pc, r0
    9430:	010a0000 	mrseq	r0, (UNDEF: 10)
    9434:	00273c01 	eoreq	r3, r7, r1, lsl #24
    9438:	00022000 	andeq	r2, r2, r0
    943c:	c89c0100 	ldmgt	ip, {r8}
    9440:	21000007 	tstcs	r0, r7
    9444:	000022d0 	ldrdeq	r2, [r0], -r0
    9448:	00ceda01 	sbceq	sp, lr, r1, lsl #20
    944c:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
    9450:	33150000 	tstcc	r5, #0
    9454:	01000020 	tsteq	r0, r0, lsr #32
    9458:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
    945c:	00385600 	eorseq	r5, r8, r0, lsl #12
    9460:	231b1500 	tstcs	fp, #0, 10
    9464:	dd010000 	stcle	0, cr0, [r1, #-0]
    9468:	000000c3 	andeq	r0, r0, r3, asr #1
    946c:	00003874 	andeq	r3, r0, r4, ror r8
    9470:	00225115 	eoreq	r5, r2, r5, lsl r1
    9474:	c3de0100 	bicsgt	r0, lr, #0, 2
    9478:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    947c:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    9480:	0000246d 	andeq	r2, r0, sp, ror #8
    9484:	00c3df01 	sbceq	sp, r3, r1, lsl #30
    9488:	38ec0000 	stmiacc	ip!, {}^	; <UNPREDICTABLE>
    948c:	04150000 	ldreq	r0, [r5], #-0
    9490:	01000020 	tsteq	r0, r0, lsr #32
    9494:	0000c3e0 	andeq	ip, r0, r0, ror #7
    9498:	00390a00 	eorseq	r0, r9, r0, lsl #20
    949c:	205b2200 	subscs	r2, fp, r0, lsl #4
    94a0:	e1010000 	mrs	r0, (UNDEF: 1)
    94a4:	000000c3 	andeq	r0, r0, r3, asr #1
    94a8:	8c155301 	ldchi	3, cr5, [r5], {1}
    94ac:	0100001a 	tsteq	r0, sl, lsl r0
    94b0:	0000cee2 	andeq	ip, r0, r2, ror #29
    94b4:	00391d00 	eorseq	r1, r9, r0, lsl #26
    94b8:	234a1500 	movtcs	r1, #42240	; 0xa500
    94bc:	e3010000 	movw	r0, #4096	; 0x1000
    94c0:	000000ce 	andeq	r0, r0, lr, asr #1
    94c4:	00003930 	andeq	r3, r0, r0, lsr r9
    94c8:	00206f15 	eoreq	r6, r0, r5, lsl pc
    94cc:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
    94d0:	4f000000 	svcmi	0x00000000
    94d4:	23000039 	movwcs	r0, #57	; 0x39
    94d8:	01006964 	tsteq	r0, r4, ror #18
    94dc:	0000cee5 	andeq	ip, r0, r5, ror #29
    94e0:	00396200 	eorseq	r6, r9, r0, lsl #4
    94e4:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
    94e8:	e6010069 	str	r0, [r1], -r9, rrx
    94ec:	000000ce 	andeq	r0, r0, lr, asr #1
    94f0:	00003998 	muleq	r0, r8, r9
    94f4:	00697423 	rsbeq	r7, r9, r3, lsr #8
    94f8:	00cee701 	sbceq	lr, lr, r1, lsl #14
    94fc:	39ce0000 	stmibcc	lr, {}^	; <UNPREDICTABLE>
    9500:	63230000 			; <UNDEFINED> instruction: 0x63230000
    9504:	e8010064 	stmda	r1, {r2, r5, r6}
    9508:	000000ce 	andeq	r0, r0, lr, asr #1
    950c:	00003a3e 	andeq	r3, r0, lr, lsr sl
    9510:	006c6323 	rsbeq	r6, ip, r3, lsr #6
    9514:	00cee901 	sbceq	lr, lr, r1, lsl #18
    9518:	3a510000 	bcc	1449520 <__ccfg+0x1429578>
    951c:	80150000 	andshi	r0, r5, r0
    9520:	01000020 	tsteq	r0, r0, lsr #32
    9524:	0000ceea 	andeq	ip, r0, sl, ror #29
    9528:	003a6400 	eorseq	r6, sl, r0, lsl #8
    952c:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    9530:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
    9534:	d7130000 	ldrle	r0, [r3, -r0]
    9538:	01000021 	tsteq	r0, r1, lsr #32
    953c:	0000ceec 	andeq	ip, r0, ip, ror #29
    9540:	21841500 	orrcs	r1, r4, r0, lsl #10
    9544:	ed010000 	stc	0, cr0, [r1, #-0]
    9548:	000000ce 	andeq	r0, r0, lr, asr #1
    954c:	00003a82 	andeq	r3, r0, r2, lsl #21
    9550:	00214815 	eoreq	r4, r1, r5, lsl r8
    9554:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
    9558:	ab000000 	blge	9560 <__exidx_end+0x67d4>
    955c:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    9560:	0000217f 	andeq	r2, r0, pc, ror r1
    9564:	00ceef01 	sbceq	lr, lr, r1, lsl #30
    9568:	3aca0000 	bcc	ff289570 <_estack+0xdf284570>
    956c:	d7150000 	ldrle	r0, [r5, -r0]
    9570:	01000023 	tsteq	r0, r3, lsr #32
    9574:	0007c8f0 	strdeq	ip, [r7], -r0
    9578:	003b0e00 	eorseq	r0, fp, r0, lsl #28
    957c:	276a2500 	strbcs	r2, [sl, -r0, lsl #10]!
    9580:	00120000 	andseq	r0, r2, r0
    9584:	073b0000 	ldreq	r0, [fp, -r0]!
    9588:	27260000 	strcs	r0, [r6, -r0]!
    958c:	01000023 	tsteq	r0, r3, lsr #32
    9590:	00c3010a 	sbceq	r0, r3, sl, lsl #2
    9594:	3b260000 	blcc	98959c <__ccfg+0x9695f4>
    9598:	27000000 	strcs	r0, [r0, -r0]
    959c:	000003d4 	ldrdeq	r0, [r0], -r4
    95a0:	00002790 	muleq	r0, r0, r7
    95a4:	00000006 	andeq	r0, r0, r6
    95a8:	68011101 	stmdavs	r1, {r0, r8, ip}
    95ac:	28000007 	stmdacs	r0, {r0, r1, r2}
    95b0:	000003e4 	andeq	r0, r0, r4, ror #7
    95b4:	00279029 	eoreq	r9, r7, r9, lsr #32
    95b8:	00000600 	andeq	r0, r0, r0, lsl #12
    95bc:	03ef2a00 	mvneq	r2, #0, 20
    95c0:	3b390000 	blcc	e495c8 <__ccfg+0xe29620>
    95c4:	00000000 	andeq	r0, r0, r0
    95c8:	0003d427 	andeq	sp, r3, r7, lsr #8
    95cc:	0027a800 	eoreq	sl, r7, r0, lsl #16
    95d0:	00000600 	andeq	r0, r0, r0, lsl #12
    95d4:	011b0100 	tsteq	fp, r0, lsl #2
    95d8:	00000795 	muleq	r0, r5, r7
    95dc:	0003e428 	andeq	lr, r3, r8, lsr #8
    95e0:	27a82900 	strcs	r2, [r8, r0, lsl #18]!
    95e4:	00060000 	andeq	r0, r6, r0
    95e8:	ef2a0000 	svc	0x002a0000
    95ec:	4c000003 	stcmi	0, cr0, [r0], {3}
    95f0:	0000003b 	andeq	r0, r0, fp, lsr r0
    95f4:	03d42b00 	bicseq	r2, r4, #0, 22
    95f8:	27b20000 	ldrcs	r0, [r2, r0]!
    95fc:	0f000000 	svceq	0x00000000
    9600:	1f010000 	svcne	0x00010000
    9604:	0007be01 	andeq	fp, r7, r1, lsl #28
    9608:	03e42800 	mvneq	r2, #0, 16
    960c:	002c0000 	eoreq	r0, ip, r0
    9610:	2a00000f 	bcs	9654 <__exidx_end+0x68c8>
    9614:	000003ef 	andeq	r0, r0, pc, ror #7
    9618:	00003b5f 	andeq	r3, r0, pc, asr fp
    961c:	5c1b0000 	ldcpl	0, cr0, [fp], {-0}
    9620:	1b000027 	blne	96c4 <__exidx_end+0x6938>
    9624:	00000009 	andeq	r0, r0, r9
    9628:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
    962c:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
    9630:	20000000 	andcs	r0, r0, r0
    9634:	00002085 	andeq	r2, r0, r5, lsl #1
    9638:	5c01170a 	stcpl	7, cr1, [r1], {10}
    963c:	60000029 	andvs	r0, r0, r9, lsr #32
    9640:	01000000 	mrseq	r0, (UNDEF: 0)
    9644:	0008339c 	muleq	r8, ip, r3
    9648:	20332600 	eorscs	r2, r3, r0, lsl #12
    964c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    9650:	0000c301 	andeq	ip, r0, r1, lsl #6
    9654:	003b7200 	eorseq	r7, fp, r0, lsl #4
    9658:	222a2600 	eorcs	r2, sl, #0, 12
    965c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    9660:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9664:	003b9d00 	eorseq	r9, fp, r0, lsl #26
    9668:	21f32600 	mvnscs	r2, r0, lsl #12
    966c:	ba010000 	blt	49674 <__ccfg+0x296cc>
    9670:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9674:	003bb000 	eorseq	fp, fp, r0
    9678:	21842600 	orrcs	r2, r4, r0, lsl #12
    967c:	bb010000 	bllt	49684 <__ccfg+0x296dc>
    9680:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9684:	003bd700 	eorseq	sp, fp, r0, lsl #14
    9688:	296a1b00 	stmdbcs	sl!, {r8, r9, fp, ip}^
    968c:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    9690:	20000000 	andcs	r0, r0, r0
    9694:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    9698:	0001290a 	andeq	r2, r1, sl, lsl #18
    969c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    96a0:	01000000 	mrseq	r0, (UNDEF: 0)
    96a4:	00088a9c 	muleq	r8, ip, sl
    96a8:	22a12600 	adccs	r2, r1, #0, 12
    96ac:	e7010000 	str	r0, [r1, -r0]
    96b0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96b4:	003c0000 	eorseq	r0, ip, r0
    96b8:	24602600 	strbtcs	r2, [r0], #-1536	; 0xfffffa00
    96bc:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    96c0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96c4:	003c1300 	eorseq	r1, ip, r0, lsl #6
    96c8:	1a8c2600 	bne	fe312ed0 <_estack+0xde30ded0>
    96cc:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    96d0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96d4:	003c2600 	eorseq	r2, ip, r0, lsl #12
    96d8:	23722600 	cmncs	r2, #0, 12
    96dc:	ea010000 	b	496e4 <__ccfg+0x2973c>
    96e0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96e4:	003c3900 	eorseq	r3, ip, r0, lsl #18
    96e8:	202e0000 	eorcs	r0, lr, r0
    96ec:	0a000021 	beq	9778 <__exidx_end+0x69ec>
    96f0:	00ce0142 	sbceq	r0, lr, r2, asr #2
    96f4:	29bc0000 	ldmibcs	ip!, {}	; <UNPREDICTABLE>
    96f8:	00180000 	andseq	r0, r8, r0
    96fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9700:	0024e922 	eoreq	lr, r4, r2, lsr #18
    9704:	99550100 	ldmdbls	r5, {r8}^
    9708:	05000003 	streq	r0, [r0, #-3]
    970c:	00006803 	andeq	r6, r0, r3, lsl #16
    9710:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
    9714:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
    9718:	c1300000 	teqgt	r0, r0
    971c:	0c000008 	stceq	0, cr0, [r0], {8}
    9720:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9724:	00001891 	muleq	r0, r1, r8
    9728:	00232f22 	eoreq	r2, r3, r2, lsr #30
    972c:	d9610100 	stmdble	r1!, {r8}^
    9730:	05000008 	streq	r0, [r0, #-8]
    9734:	00000003 	andeq	r0, r0, r3
    9738:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
    973c:	f7310000 			; <UNDEFINED> instruction: 0xf7310000
    9740:	09000020 	stmdbeq	r0, {r5}
    9744:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
    9748:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    974c:	31000000 	mrscc	r0, (UNDEF: 0)
    9750:	00001b29 	andeq	r1, r0, r9, lsr #22
    9754:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
    9758:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    975c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9760:	000000ce 	andeq	r0, r0, lr, asr #1
    9764:	1ec43200 	cdpne	2, 12, cr3, cr4, cr0, {0}
    9768:	10030000 	andne	r0, r3, r0
    976c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9770:	00091b00 	andeq	r1, r9, r0, lsl #22
    9774:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    9778:	33000000 	movwcc	r0, #0
    977c:	00001633 	andeq	r1, r0, r3, lsr r6
    9780:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
    9784:	cc000000 	stcgt	0, cr0, [r0], {-0}
    9788:	04000003 	streq	r0, [r0], #-3
    978c:	002d0600 	eoreq	r0, sp, r0, lsl #12
    9790:	6c010400 	cfstrsvs	mvf0, [r1], {-0}
    9794:	01000016 	tsteq	r0, r6, lsl r0
    9798:	000027f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    979c:	00001761 	andeq	r1, r0, r1, ror #14
    97a0:	00000f78 	andeq	r0, r0, r8, ror pc
    97a4:	00000000 	andeq	r0, r0, r0
    97a8:	0000653e 	andeq	r6, r0, lr, lsr r5
    97ac:	b2060102 	andlt	r0, r6, #-2147483648	; 0x80000000
    97b0:	02000003 	andeq	r0, r0, #3
    97b4:	03b00801 	movseq	r0, #65536	; 0x10000
    97b8:	02020000 	andeq	r0, r2, #0
    97bc:	0003ec05 	andeq	lr, r3, r5, lsl #24
    97c0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    97c4:	0000026e 	andeq	r0, r0, lr, ror #4
    97c8:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    97cc:	03000000 	movweq	r0, #0
    97d0:	000017cd 	andeq	r1, r0, sp, asr #15
    97d4:	00534103 	subseq	r4, r3, r3, lsl #2
    97d8:	04020000 	streq	r0, [r2], #-0
    97dc:	00007907 	andeq	r7, r0, r7, lsl #18
    97e0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    97e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    97e8:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    97ec:	04000000 	streq	r0, [r0], #-0
    97f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    97f4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    97f8:	00007e07 	andeq	r7, r0, r7, lsl #28
    97fc:	17cf0300 	strbne	r0, [pc, r0, lsl #6]
    9800:	20040000 	andcs	r0, r4, r0
    9804:	00000048 	andeq	r0, r0, r8, asr #32
    9808:	63020105 	movwvs	r0, #8453	; 0x2105
    980c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9810:	00272c06 	eoreq	r2, r7, r6, lsl #24
    9814:	6c060000 	stcvs	0, cr0, [r6], {-0}
    9818:	02000027 	andeq	r0, r0, #39	; 0x27
    981c:	0026dc06 	eoreq	sp, r6, r6, lsl #24
    9820:	1c060400 	cfstrsne	mvf0, [r6], {-0}
    9824:	08000025 	stmdaeq	r0, {r0, r2, r5}
    9828:	26c80300 	strbcs	r0, [r8], r0, lsl #6
    982c:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    9830:	00000081 	andeq	r0, r0, r1, lsl #1
    9834:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
    9838:	000000da 	ldrdeq	r0, [r0], -sl
    983c:	0027e206 	eoreq	lr, r7, r6, lsl #4
    9840:	34067f00 	strcc	r7, [r6], #-3840	; 0xfffff100
    9844:	00000025 	andeq	r0, r0, r5, lsr #32
    9848:	00289306 	eoreq	r9, r8, r6, lsl #6
    984c:	20060100 	andcs	r0, r6, r0, lsl #2
    9850:	02000027 	andeq	r0, r0, #39	; 0x27
    9854:	00288506 	eoreq	r8, r8, r6, lsl #10
    9858:	19060300 	stmdbne	r6, {r8, r9}
    985c:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    9860:	289f0300 	ldmcs	pc, {r8, r9}	; <UNPREDICTABLE>
    9864:	ac020000 	stcge	0, cr0, [r2], {-0}
    9868:	000000ad 	andeq	r0, r0, sp, lsr #1
    986c:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
    9870:	00012501 	andeq	r2, r1, r1, lsl #10
    9874:	26f60600 	ldrbtcs	r0, [r6], r0, lsl #12
    9878:	067f0000 	ldrbteq	r0, [pc], -r0
    987c:	000025e4 	andeq	r2, r0, r4, ror #11
    9880:	26400600 	strbcs	r0, [r0], -r0, lsl #12
    9884:	06010000 	streq	r0, [r1], -r0
    9888:	0000267c 	andeq	r2, r0, ip, ror r6
    988c:	27c70602 	strbcs	r0, [r7, r2, lsl #12]
    9890:	06030000 	streq	r0, [r3], -r0
    9894:	00002540 	andeq	r2, r0, r0, asr #10
    9898:	26080604 	strcs	r0, [r8], -r4, lsl #12
    989c:	06050000 	streq	r0, [r5], -r0
    98a0:	000027a1 	andeq	r2, r0, r1, lsr #15
    98a4:	27b40606 	ldrcs	r0, [r4, r6, lsl #12]!
    98a8:	00070000 	andeq	r0, r7, r0
    98ac:	0025cc08 	eoreq	ip, r5, r8, lsl #24
    98b0:	01470200 	mrseq	r0, (UNDEF: 103)
    98b4:	000000e5 	andeq	r0, r0, r5, ror #1
    98b8:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
    98bc:	00015f01 	andeq	r5, r1, r1, lsl #30
    98c0:	266d0600 	strbtcs	r0, [sp], -r0, lsl #12
    98c4:	067f0000 	ldrbteq	r0, [pc], -r0
    98c8:	00002696 	muleq	r0, r6, r6
    98cc:	27120600 	ldrcs	r0, [r2, -r0, lsl #12]
    98d0:	06010000 	streq	r0, [r1], -r0
    98d4:	00002559 	andeq	r2, r0, r9, asr r5
    98d8:	277c0602 	ldrbcs	r0, [ip, -r2, lsl #12]!
    98dc:	06030000 	streq	r0, [r3], -r0
    98e0:	0000262f 	andeq	r2, r0, pc, lsr #12
    98e4:	f5080004 			; <UNDEFINED> instruction: 0xf5080004
    98e8:	02000025 	andeq	r0, r0, #37	; 0x25
    98ec:	01310160 	teqeq	r1, r0, ror #2
    98f0:	01070000 	mrseq	r0, (UNDEF: 7)
    98f4:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
    98f8:	06000001 	streq	r0, [r0], -r1
    98fc:	000026ac 	andeq	r2, r0, ip, lsr #13
    9900:	27d8067f 			; <UNDEFINED> instruction: 0x27d8067f
    9904:	060a0000 	streq	r0, [sl], -r0
    9908:	0000273d 	andeq	r2, r0, sp, lsr r7
    990c:	27620614 			; <UNDEFINED> instruction: 0x27620614
    9910:	06150000 	ldreq	r0, [r5], -r0
    9914:	00002708 	andeq	r2, r0, r8, lsl #14
    9918:	278e0616 	usada8cs	lr, r6, r6, r0
    991c:	00170000 	andseq	r0, r7, r0
    9920:	0025d708 	eoreq	sp, r5, r8, lsl #14
    9924:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
    9928:	0000016b 	andeq	r0, r0, fp, ror #2
    992c:	00281e09 	eoreq	r1, r8, r9, lsl #28
    9930:	01070200 	mrseq	r0, (UNDEF: 39)
    9934:	00000076 	andeq	r0, r0, r6, ror r0
    9938:	256b0a03 	strbcs	r0, [fp, #-2563]!	; 0xfffff5fd
    993c:	6a020000 	bvs	89944 <__ccfg+0x6999c>
    9940:	00015f01 	andeq	r5, r1, r1, lsl #30
    9944:	01da0100 	bicseq	r0, sl, r0, lsl #2
    9948:	a40b0000 	strge	r0, [fp], #-0
    994c:	01000026 	tsteq	r0, r6, lsr #32
    9950:	00015f68 	andeq	r5, r1, r8, ror #30
    9954:	25510b00 	ldrbcs	r0, [r1, #-2816]	; 0xfffff500
    9958:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    995c:	00000076 	andeq	r0, r0, r6, ror r0
    9960:	28cc0900 	stmiacs	ip, {r8, fp}^
    9964:	32020000 	andcc	r0, r2, #0
    9968:	00007601 	andeq	r7, r0, r1, lsl #12
    996c:	5e0c0300 	cdppl	3, 0, cr0, cr12, cr0, {0}
    9970:	02000028 	andeq	r0, r0, #40	; 0x28
    9974:	0000a272 	andeq	sl, r0, r2, ror r2
    9978:	00000000 	andeq	r0, r0, r0
    997c:	00001000 	andeq	r1, r0, r0
    9980:	0d9c0100 	ldfeqs	f0, [ip]
    9984:	00002588 	andeq	r2, r0, r8, lsl #11
    9988:	00dab602 	sbcseq	fp, sl, r2, lsl #12
    998c:	00000000 	andeq	r0, r0, r0
    9990:	00180000 	andseq	r0, r8, r0
    9994:	9c010000 	stcls	0, cr0, [r1], {-0}
    9998:	00000225 	andeq	r0, r0, r5, lsr #4
    999c:	0025c30e 	eoreq	ip, r5, lr, lsl #6
    99a0:	da520100 	ble	1489da8 <__ccfg+0x1469e00>
    99a4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    99a8:	0000003c 	andeq	r0, r0, ip, lsr r0
    99ac:	0001b20f 	andeq	fp, r1, pc, lsl #4
    99b0:	0029d400 	eoreq	sp, r9, r0, lsl #8
    99b4:	00004c00 	andeq	r4, r0, r0, lsl #24
    99b8:	6e9c0100 	fmlvse	f0, f4, f0
    99bc:	10000002 	andne	r0, r0, r2
    99c0:	000001c3 	andeq	r0, r0, r3, asr #3
    99c4:	00003c74 	andeq	r3, r0, r4, ror ip
    99c8:	0001ce10 	andeq	ip, r1, r0, lsl lr
    99cc:	003c9400 	eorseq	r9, ip, r0, lsl #8
    99d0:	29e41100 	stmibcs	r4!, {r8, ip}^
    99d4:	000e0000 	andeq	r0, lr, r0
    99d8:	c3120000 	tstgt	r2, #0
    99dc:	12000001 	andne	r0, r0, #1
    99e0:	000001ce 	andeq	r0, r0, lr, asr #3
    99e4:	0001a513 	andeq	sl, r1, r3, lsl r5
    99e8:	0029e400 	eoreq	lr, r9, r0, lsl #8
    99ec:	00000400 	andeq	r0, r0, r0, lsl #8
    99f0:	00700100 	rsbseq	r0, r0, r0, lsl #2
    99f4:	27471400 	strbcs	r1, [r7, -r0, lsl #8]
    99f8:	51020000 	mrspl	r0, (UNDEF: 2)
    99fc:	00012501 	andeq	r2, r1, r1, lsl #10
    9a00:	00000000 	andeq	r0, r0, r0
    9a04:	00003000 	andeq	r3, r0, r0
    9a08:	ca9c0100 	bgt	fe709e10 <_estack+0xde704e10>
    9a0c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    9a10:	00002798 	muleq	r0, r8, r7
    9a14:	01258501 			; <UNDEFINED> instruction: 0x01258501
    9a18:	3cc80000 	stclcc	0, cr0, [r8], {0}
    9a1c:	120b0000 	andne	r0, fp, #0
    9a20:	01000028 	tsteq	r0, r8, lsr #32
    9a24:	00007686 	andeq	r7, r0, r6, lsl #13
    9a28:	26ba0e00 	ldrtcs	r0, [sl], r0, lsl #28
    9a2c:	87010000 	strhi	r0, [r1, -r0]
    9a30:	00000076 	andeq	r0, r0, r6, ror r0
    9a34:	00003ce8 	andeq	r3, r0, r8, ror #25
    9a38:	0001da13 	andeq	sp, r1, r3, lsl sl
    9a3c:	00000000 	andeq	r0, r0, r0
    9a40:	00000400 	andeq	r0, r0, r0, lsl #8
    9a44:	15860100 	strne	r0, [r6, #256]	; 0x100
    9a48:	00000000 	andeq	r0, r0, r0
    9a4c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9a50:	283c1600 	ldmdacs	ip!, {r9, sl, ip}
    9a54:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    9a58:	00007601 	andeq	r7, r0, r1, lsl #12
    9a5c:	02e80300 	rsceq	r0, r8, #0, 6
    9a60:	26170000 	ldrcs	r0, [r7], -r0
    9a64:	02000026 	andeq	r0, r0, #38	; 0x26
    9a68:	0076011b 	rsbseq	r0, r6, fp, lsl r1
    9a6c:	14000000 	strne	r0, [r0], #-0
    9a70:	000025a6 	andeq	r2, r0, r6, lsr #11
    9a74:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
    9a78:	20000001 	andcs	r0, r0, r1
    9a7c:	6c00002a 	stcvs	0, cr0, [r0], {42}	; 0x2a
    9a80:	01000000 	mrseq	r0, (UNDEF: 0)
    9a84:	0003659c 	muleq	r3, ip, r5
    9a88:	26020e00 	strcs	r0, [r2], -r0, lsl #28
    9a8c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9a90:	00000199 	muleq	r0, r9, r1
    9a94:	00003cfb 	strdeq	r3, [r0], -fp
    9a98:	00268d0b 	eoreq	r8, r6, fp, lsl #26
    9a9c:	76a90100 	strtvc	r0, [r9], r0, lsl #2
    9aa0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9aa4:	00002853 	andeq	r2, r0, r3, asr r8
    9aa8:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
    9aac:	54010000 	strpl	r0, [r1], #-0
    9ab0:	0001a519 	andeq	sl, r1, r9, lsl r5
    9ab4:	002a2200 	eoreq	r2, sl, r0, lsl #4
    9ab8:	000f4800 	andeq	r4, pc, r0, lsl #16
    9abc:	1aa90100 	bne	fea49ec4 <_estack+0xdea44ec4>
    9ac0:	000002ca 	andeq	r0, r0, sl, asr #5
    9ac4:	00002a26 	andeq	r2, r0, r6, lsr #20
    9ac8:	00000f60 	andeq	r0, r0, r0, ror #30
    9acc:	035baa01 	cmpeq	fp, #4096	; 0x1000
    9ad0:	601b0000 	andsvs	r0, fp, r0
    9ad4:	1000000f 	andne	r0, r0, pc
    9ad8:	000002db 	ldrdeq	r0, [r0], -fp
    9adc:	00003d58 	andeq	r3, r0, r8, asr sp
    9ae0:	3a150000 	bcc	549ae8 <__ccfg+0x529b40>
    9ae4:	b200002a 	andlt	r0, r0, #42	; 0x2a
    9ae8:	00000001 	andeq	r0, r0, r1
    9aec:	00265109 	eoreq	r5, r6, r9, lsl #2
    9af0:	01830200 	orreq	r0, r3, r0, lsl #4
    9af4:	00000372 	andeq	r0, r0, r2, ror r3
    9af8:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    9afc:	00000bd4 	ldrdeq	r0, [r0], -r4
    9b00:	0028ad09 	eoreq	sl, r8, r9, lsl #26
    9b04:	01f00200 	mvnseq	r0, r0, lsl #4
    9b08:	00000372 	andeq	r0, r0, r2, ror r3
    9b0c:	1ad51c03 	bne	ff550b20 <_estack+0xdf54bb20>
    9b10:	43020000 	movwmi	r0, #8192	; 0x2000
    9b14:	002a8c02 	eoreq	r8, sl, r2, lsl #24
    9b18:	00001600 	andeq	r1, r0, r0, lsl #12
    9b1c:	1d9c0100 	ldfnes	f0, [ip]
    9b20:	00000365 	andeq	r0, r0, r5, ror #6
    9b24:	00002a8e 	andeq	r2, r0, lr, lsl #21
    9b28:	00000004 	andeq	r0, r0, r4
    9b2c:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
    9b30:	92150000 	andsls	r0, r5, #0
    9b34:	b200002a 	andlt	r0, r0, #42	; 0x2a
    9b38:	00000001 	andeq	r0, r0, r1
    9b3c:	0003791e 	andeq	r7, r3, lr, lsl r9
    9b40:	002a9600 	eoreq	r9, sl, r0, lsl #12
    9b44:	00000400 	andeq	r0, r0, r0, lsl #8
    9b48:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
    9b4c:	00002a9a 	muleq	r0, sl, sl
    9b50:	000002e8 	andeq	r0, r0, r8, ror #5
    9b54:	a7000000 	strge	r0, [r0, -r0]
    9b58:	04000005 	streq	r0, [r0], #-5
    9b5c:	002ed400 	eoreq	sp, lr, r0, lsl #8
    9b60:	6c010400 	cfstrsvs	mvf0, [r1], {-0}
    9b64:	01000016 	tsteq	r0, r6, lsl r0
    9b68:	000029a4 	andeq	r2, r0, r4, lsr #19
    9b6c:	00001761 	andeq	r1, r0, r1, ror #14
    9b70:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    9b74:	00000000 	andeq	r0, r0, r0
    9b78:	0000676d 	andeq	r6, r0, sp, ror #14
    9b7c:	b2060102 	andlt	r0, r6, #-2147483648	; 0x80000000
    9b80:	03000003 	movweq	r0, #3
    9b84:	00002216 	andeq	r2, r0, r6, lsl r2
    9b88:	00371d03 	eorseq	r1, r7, r3, lsl #26
    9b8c:	01020000 	mrseq	r0, (UNDEF: 2)
    9b90:	0003b008 	andeq	fp, r3, r8
    9b94:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    9b98:	000003ec 	andeq	r0, r0, ip, ror #7
    9b9c:	00210403 	eoreq	r0, r1, r3, lsl #8
    9ba0:	502b0300 	eorpl	r0, fp, r0, lsl #6
    9ba4:	02000000 	andeq	r0, r0, #0
    9ba8:	026e0702 	rsbeq	r0, lr, #524288	; 0x80000
    9bac:	04020000 	streq	r0, [r2], #-0
    9bb0:	0000a405 	andeq	sl, r0, r5, lsl #8
    9bb4:	17cd0300 	strbne	r0, [sp, r0, lsl #6]
    9bb8:	41030000 	mrsmi	r0, (UNDEF: 3)
    9bbc:	00000069 	andeq	r0, r0, r9, rrx
    9bc0:	79070402 	stmdbvc	r7, {r1, sl}
    9bc4:	02000000 	andeq	r0, r0, #0
    9bc8:	009f0508 	addseq	r0, pc, r8, lsl #10
    9bcc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9bd0:	00007407 	andeq	r7, r0, r7, lsl #8
    9bd4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    9bd8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9bdc:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    9be0:	03000000 	movweq	r0, #0
    9be4:	00002218 	andeq	r2, r0, r8, lsl r2
    9be8:	002c1404 	eoreq	r1, ip, r4, lsl #8
    9bec:	06030000 	streq	r0, [r3], -r0
    9bf0:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    9bf4:	0000451a 	andeq	r4, r0, sl, lsl r5
    9bf8:	17cf0300 	strbne	r0, [pc, r0, lsl #6]
    9bfc:	20040000 	andcs	r0, r4, r0
    9c00:	0000005e 	andeq	r0, r0, lr, asr r0
    9c04:	00291d05 	eoreq	r1, r9, r5, lsl #26
    9c08:	03890100 	orreq	r0, r9, #0, 2
    9c0c:	000000e6 	andeq	r0, r0, r6, ror #1
    9c10:	0028ff06 	eoreq	pc, r8, r6, lsl #30
    9c14:	a2890100 	addge	r0, r9, #0, 2
    9c18:	06000000 	streq	r0, [r0], -r0
    9c1c:	00002970 	andeq	r2, r0, r0, ror r9
    9c20:	00a28901 	adceq	r8, r2, r1, lsl #18
    9c24:	e0060000 	and	r0, r6, r0
    9c28:	01000029 	tsteq	r0, r9, lsr #32
    9c2c:	0000a289 	andeq	sl, r0, r9, lsl #5
    9c30:	29d40700 	ldmibcs	r4, {r8, r9, sl}^
    9c34:	8c010000 	stchi	0, cr0, [r1], {-0}
    9c38:	000000e6 	andeq	r0, r0, r6, ror #1
    9c3c:	02010200 	andeq	r0, r1, #0, 4
    9c40:	00000bd4 	ldrdeq	r0, [r0], -r4
    9c44:	00297e08 	eoreq	r7, r9, r8, lsl #28
    9c48:	a2a90100 	adcge	r0, r9, #0, 2
    9c4c:	03000000 	movweq	r0, #0
    9c50:	0000012a 	andeq	r0, r0, sl, lsr #2
    9c54:	0028ff06 	eoreq	pc, r8, r6, lsl #30
    9c58:	a2a90100 	adcge	r0, r9, #0, 2
    9c5c:	06000000 	streq	r0, [r0], -r0
    9c60:	000029e0 	andeq	r2, r0, r0, ror #19
    9c64:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9c68:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    9c6c:	01000029 	tsteq	r0, r9, lsr #32
    9c70:	0000a2ab 	andeq	sl, r0, fp, lsr #5
    9c74:	29d40700 	ldmibcs	r4, {r8, r9, sl}^
    9c78:	ad010000 	stcge	0, cr0, [r1, #-0]
    9c7c:	000000e6 	andeq	r0, r0, r6, ror #1
    9c80:	00ad0900 	adceq	r0, sp, r0, lsl #18
    9c84:	2aa40000 	bcs	fe909c8c <_estack+0xde904c8c>
    9c88:	00280000 	eoreq	r0, r8, r0
    9c8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c90:	00000171 	andeq	r0, r0, r1, ror r1
    9c94:	0000b90a 	andeq	fp, r0, sl, lsl #18
    9c98:	003d6b00 	eorseq	r6, sp, r0, lsl #22
    9c9c:	00c40a00 	sbceq	r0, r4, r0, lsl #20
    9ca0:	3db00000 	ldccc	0, cr0, [r0]
    9ca4:	da0b0000 	ble	2c9cac <__ccfg+0x2a9d04>
    9ca8:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    9cac:	0c00003d 	stceq	0, cr0, [r0], {61}	; 0x3d
    9cb0:	000000cf 	andeq	r0, r0, pc, asr #1
    9cb4:	2aae0d04 	bcs	feb8d0cc <_estack+0xdeb880cc>
    9cb8:	05940000 	ldreq	r0, [r4]
    9cbc:	c60e0000 	strgt	r0, [lr], -r0
    9cc0:	9f00002a 	svcls	0x0000002a
    9cc4:	00000005 	andeq	r0, r0, r5
    9cc8:	001d070f 	andseq	r0, sp, pc, lsl #14
    9ccc:	01ca0100 	biceq	r0, sl, r0, lsl #2
    9cd0:	00002acc 	andeq	r2, r0, ip, asr #21
    9cd4:	00000008 	andeq	r0, r0, r8
    9cd8:	01d19c01 	bicseq	r9, r1, r1, lsl #24
    9cdc:	4d100000 	ldcmi	0, cr0, [r0, #-0]
    9ce0:	02000007 	andeq	r0, r0, #7
    9ce4:	0000a242 	andeq	sl, r0, r2, asr #4
    9ce8:	003e1b00 	eorseq	r1, lr, r0, lsl #22
    9cec:	28df1000 	ldmcs	pc, {ip}^	; <UNPREDICTABLE>
    9cf0:	42020000 	andmi	r0, r2, #0
    9cf4:	000000a2 	andeq	r0, r0, r2, lsr #1
    9cf8:	00003e3c 	andeq	r3, r0, ip, lsr lr
    9cfc:	00297610 	eoreq	r7, r9, r0, lsl r6
    9d00:	a2430200 	subge	r0, r3, #0, 4
    9d04:	5d000000 	stcpl	0, cr0, [r0, #-0]
    9d08:	1100003e 	tstne	r0, lr, lsr r0
    9d0c:	00002ad4 	ldrdeq	r2, [r0], -r4
    9d10:	0000012a 	andeq	r0, r0, sl, lsr #2
    9d14:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
    9d18:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
    9d1c:	f3075001 	vhadd.u8	d5, d7, d1
    9d20:	01f35001 	mvnseq	r5, r1
    9d24:	00002251 	andeq	r2, r0, r1, asr r2
    9d28:	0029900f 	eoreq	r9, r9, pc
    9d2c:	01df0100 	bicseq	r0, pc, r0, lsl #2
    9d30:	00000000 	andeq	r0, r0, r0
    9d34:	00000022 	andeq	r0, r0, r2, lsr #32
    9d38:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
    9d3c:	4d100000 	ldcmi	0, cr0, [r0, #-0]
    9d40:	02000007 	andeq	r0, r0, #7
    9d44:	0000a257 	andeq	sl, r0, r7, asr r2
    9d48:	003e7e00 	eorseq	r7, lr, r0, lsl #28
    9d4c:	28df1000 	ldmcs	pc, {ip}^	; <UNPREDICTABLE>
    9d50:	57020000 	strpl	r0, [r2, -r0]
    9d54:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d58:	00003e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    9d5c:	0029bf10 	eoreq	fp, r9, r0, lsl pc
    9d60:	a2580200 	subsge	r0, r8, #0, 4
    9d64:	c0000000 	andgt	r0, r0, r0
    9d68:	1000003e 	andne	r0, r0, lr, lsr r0
    9d6c:	00002939 	andeq	r2, r0, r9, lsr r9
    9d70:	00a25802 	adceq	r5, r2, r2, lsl #16
    9d74:	3f0b0000 	svccc	0x000b0000
    9d78:	c8130000 	ldmdagt	r3, {}	; <UNPREDICTABLE>
    9d7c:	02000029 	andeq	r0, r0, #41	; 0x29
    9d80:	0000a25a 	andeq	sl, r0, sl, asr r2
    9d84:	003f2c00 	eorseq	r2, pc, r0, lsl #24
    9d88:	29441300 	stmdbcs	r4, {r8, r9, ip}^
    9d8c:	5b020000 	blpl	89d94 <__ccfg+0x69dec>
    9d90:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d94:	00003fc0 	andeq	r3, r0, r0, asr #31
    9d98:	00000011 	andeq	r0, r0, r1, lsl r0
    9d9c:	00012a00 	andeq	r2, r1, r0, lsl #20
    9da0:	51011200 	mrspl	r1, R9_usr
    9da4:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
    9da8:	01f32540 	mvnseq	r2, r0, asr #10
    9dac:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    9db0:	2e302540 	cfneg32cs	mvfx2, mvfx0
    9db4:	16000128 	strne	r0, [r0], -r8, lsr #2
    9db8:	30244013 	eorcc	r4, r4, r3, lsl r0
    9dbc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dc0:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9dc4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dc8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9dcc:	13160001 	tstne	r6, #1
    9dd0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dd4:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    9dd8:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9ddc:	f3131600 	vmax.u16	d1, d3, d0
    9de0:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    9de4:	16000128 	strne	r0, [r0], -r8, lsr #2
    9de8:	01122113 	tsteq	r2, r3, lsl r1
    9dec:	01f35150 	mvnseq	r5, r0, asr r1
    9df0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9df4:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9df8:	01f30480 	mvnseq	r0, r0, lsl #9
    9dfc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e00:	f3225001 	vhadd.u32	d5, d2, d1
    9e04:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e08:	01282930 			; <UNDEFINED> instruction: 0x01282930
    9e0c:	23131600 	tstcs	r3, #0, 12
    9e10:	01f30484 	mvnseq	r0, r4, lsl #9
    9e14:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e18:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9e1c:	01f30480 	mvnseq	r0, r0, lsl #9
    9e20:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9e24:	f3225001 	vhadd.u32	d5, d2, d1
    9e28:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e2c:	01282930 			; <UNDEFINED> instruction: 0x01282930
    9e30:	f3131600 	vmax.u16	d1, d3, d0
    9e34:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e38:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9e3c:	00131600 	andseq	r1, r3, r0, lsl #12
    9e40:	29570f00 	ldmdbcs	r7, {r8, r9, sl, fp}^
    9e44:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    9e48:	00000001 	andeq	r0, r0, r1
    9e4c:	00002e00 	andeq	r2, r0, r0, lsl #28
    9e50:	1f9c0100 	svcne	0x009c0100
    9e54:	10000004 	andne	r0, r0, r4
    9e58:	0000074d 	andeq	r0, r0, sp, asr #14
    9e5c:	00a28302 	adceq	r8, r2, r2, lsl #6
    9e60:	400c0000 	andmi	r0, ip, r0
    9e64:	df100000 	svcle	0x00100000
    9e68:	02000028 	andeq	r0, r0, #40	; 0x28
    9e6c:	0000a283 	andeq	sl, r0, r3, lsl #5
    9e70:	00402d00 	subeq	r2, r0, r0, lsl #26
    9e74:	29bf1000 	ldmibcs	pc!, {ip}	; <UNPREDICTABLE>
    9e78:	84020000 	strhi	r0, [r2], #-0
    9e7c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e80:	0000404e 	andeq	r4, r0, lr, asr #32
    9e84:	00294d10 	eoreq	r4, r9, r0, lsl sp
    9e88:	a2840200 	addge	r0, r4, #0, 4
    9e8c:	9f000000 	svcls	0x00000000
    9e90:	10000040 	andne	r0, r0, r0, asr #32
    9e94:	00002944 	andeq	r2, r0, r4, asr #18
    9e98:	00978502 	addseq	r8, r7, r2, lsl #10
    9e9c:	40f00000 	rscsmi	r0, r0, r0
    9ea0:	c8130000 	ldmdagt	r3, {}	; <UNPREDICTABLE>
    9ea4:	02000029 	andeq	r0, r0, #41	; 0x29
    9ea8:	0000a287 	andeq	sl, r0, r7, lsl #5
    9eac:	00411000 	subeq	r1, r1, r0
    9eb0:	29391300 	ldmdbcs	r9!, {r8, r9, ip}
    9eb4:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    9eb8:	000000a2 	andeq	r0, r0, r2, lsr #1
    9ebc:	000041b6 			; <UNDEFINED> instruction: 0x000041b6
    9ec0:	00000011 	andeq	r0, r0, r1, lsl r0
    9ec4:	00012a00 	andeq	r2, r1, r0, lsl #20
    9ec8:	51011200 	mrspl	r1, R9_usr
    9ecc:	5201f340 	andpl	pc, r1, #64, 6
    9ed0:	01f32540 	mvnseq	r2, r0, asr #10
    9ed4:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    9ed8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9edc:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9ee0:	01282b80 	smlawbeq	r8, r0, fp, r2
    9ee4:	40131600 	andsmi	r1, r3, r0, lsl #12
    9ee8:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
    9eec:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    9ef0:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    9ef4:	01f31c40 	mvnseq	r1, r0, asr #24
    9ef8:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    9efc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f00:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f04:	01282b80 	smlawbeq	r8, r0, fp, r2
    9f08:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    9f0c:	50011221 	andpl	r1, r1, r1, lsr #4
    9f10:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
    9f14:	01f32431 	mvnseq	r2, r1, lsr r4
    9f18:	80232250 	eorhi	r2, r3, r0, asr r2
    9f1c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9f20:	01f32431 	mvnseq	r2, r1, lsr r4
    9f24:	01f32250 	mvnseq	r2, r0, asr r2
    9f28:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9f2c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9f30:	282c8000 	stmdacs	ip!, {pc}
    9f34:	13160001 	tstne	r6, #1
    9f38:	f3048423 	vshl.u8	d8, d19, d4
    9f3c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9f40:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9f44:	f3048023 	vhadd.u8	d8, d4, d19
    9f48:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9f4c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9f50:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9f54:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9f58:	8000000f 	andhi	r0, r0, pc
    9f5c:	0001282c 	andeq	r2, r1, ip, lsr #16
    9f60:	01f31316 	mvnseq	r1, r6, lsl r3
    9f64:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9f68:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9f6c:	282b8000 	stmdacs	fp!, {pc}
    9f70:	13160001 	tstne	r6, #1
    9f74:	05140000 	ldreq	r0, [r4, #-0]
    9f78:	01000029 	tsteq	r0, r9, lsr #32
    9f7c:	00970208 	addseq	r0, r7, r8, lsl #4
    9f80:	00000000 	andeq	r0, r0, r0
    9f84:	00340000 	eorseq	r0, r4, r0
    9f88:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f8c:	000004d2 	ldrdeq	r0, [r0], -r2
    9f90:	00074d10 	andeq	r4, r7, r0, lsl sp
    9f94:	a2af0200 	adcge	r0, pc, #0, 4
    9f98:	16000000 	strne	r0, [r0], -r0
    9f9c:	10000042 	andne	r0, r0, r2, asr #32
    9fa0:	000028df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    9fa4:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9fa8:	42370000 	eorsmi	r0, r7, #0
    9fac:	bf100000 	svclt	0x00100000
    9fb0:	02000029 	andeq	r0, r0, #41	; 0x29
    9fb4:	0000a2af 	andeq	sl, r0, pc, lsr #5
    9fb8:	00425800 	subeq	r5, r2, r0, lsl #16
    9fbc:	29c81300 	stmibcs	r8, {r8, r9, ip}^
    9fc0:	b1020000 	mrslt	r0, (UNDEF: 2)
    9fc4:	000000a2 	andeq	r0, r0, r2, lsr #1
    9fc8:	00004295 	muleq	r0, r5, r2
    9fcc:	00293013 	eoreq	r3, r9, r3, lsl r0
    9fd0:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
    9fd4:	cf000000 	svcgt	0x00000000
    9fd8:	15000042 	strne	r0, [r0, #-66]	; 0xffffffbe
    9fdc:	000000ed 	andeq	r0, r0, sp, ror #1
    9fe0:	00000000 	andeq	r0, r0, r0
    9fe4:	0000001a 	andeq	r0, r0, sl, lsl r0
    9fe8:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
    9fec:	02000001 	andeq	r0, r0, #1
    9ff0:	0000fd0a 	andeq	pc, r0, sl, lsl #26
    9ff4:	0042e700 	subeq	lr, r2, r0, lsl #14
    9ff8:	00001600 	andeq	r1, r0, r0, lsl #12
    9ffc:	001a0000 	andseq	r0, sl, r0
    a000:	130b0000 	movwne	r0, #45056	; 0xb000
    a004:	21000001 	tstcs	r0, r1
    a008:	0b000043 	bleq	a11c <__exidx_end+0x7390>
    a00c:	0000011e 	andeq	r0, r0, lr, lsl r1
    a010:	0000433a 	andeq	r4, r0, sl, lsr r3
    a014:	0000000d 	andeq	r0, r0, sp
    a018:	00059400 	andeq	r9, r5, r0, lsl #8
    a01c:	00000d00 	andeq	r0, r0, r0, lsl #26
    a020:	059f0000 	ldreq	r0, [pc]	; a028 <__exidx_end+0x729c>
    a024:	00000000 	andeq	r0, r0, r0
    a028:	28e71400 	stmiacs	r7!, {sl, ip}^
    a02c:	1d010000 	stcne	0, cr0, [r1, #-0]
    a030:	00009702 	andeq	r9, r0, r2, lsl #14
    a034:	00000000 	andeq	r0, r0, r0
    a038:	00004000 	andeq	r4, r0, r0
    a03c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    a040:	10000005 	andne	r0, r0, r5
    a044:	0000074d 	andeq	r0, r0, sp, asr #14
    a048:	00a2dd02 	adceq	sp, r2, r2, lsl #26
    a04c:	43510000 	cmpmi	r1, #0
    a050:	df100000 	svcle	0x00100000
    a054:	02000028 	andeq	r0, r0, #40	; 0x28
    a058:	0000a2dd 	ldrdeq	sl, [r0], -sp
    a05c:	00437200 	subeq	r7, r3, r0, lsl #4
    a060:	29bf1000 	ldmibcs	pc!, {ip}	; <UNPREDICTABLE>
    a064:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    a068:	000000a2 	andeq	r0, r0, r2, lsr #1
    a06c:	00004393 	muleq	r0, r3, r3
    a070:	00294d10 	eoreq	r4, r9, r0, lsl sp
    a074:	a2de0200 	sbcsge	r0, lr, #0, 4
    a078:	d6000000 	strle	r0, [r0], -r0
    a07c:	13000043 	movwne	r0, #67	; 0x43
    a080:	000029c8 	andeq	r2, r0, r8, asr #19
    a084:	00a2e002 	adceq	lr, r2, r2
    a088:	44190000 	ldrmi	r0, [r9], #-0
    a08c:	30130000 	andscc	r0, r3, r0
    a090:	02000029 	andeq	r0, r0, #41	; 0x29
    a094:	000097e1 	andeq	r9, r0, r1, ror #15
    a098:	00447400 	subeq	r7, r4, r0, lsl #8
    a09c:	00ed1500 	rsceq	r1, sp, r0, lsl #10
    a0a0:	00000000 	andeq	r0, r0, r0
    a0a4:	001a0000 	andseq	r0, sl, r0
    a0a8:	fa020000 	blx	8a0b0 <__ccfg+0x6a108>
    a0ac:	0001080c 	andeq	r0, r1, ip, lsl #16
    a0b0:	fd0a0200 	stc2	2, cr0, [sl, #-0]
    a0b4:	97000000 	strls	r0, [r0, -r0]
    a0b8:	16000044 	strne	r0, [r0], -r4, asr #32
    a0bc:	00000000 	andeq	r0, r0, r0
    a0c0:	0000001a 	andeq	r0, r0, sl, lsl r0
    a0c4:	0001130b 	andeq	r1, r1, fp, lsl #6
    a0c8:	0044d700 	subeq	sp, r4, r0, lsl #14
    a0cc:	011e0b00 	tsteq	lr, r0, lsl #22
    a0d0:	44f00000 	ldrbtmi	r0, [r0], #0
    a0d4:	000d0000 	andeq	r0, sp, r0
    a0d8:	94000000 	strls	r0, [r0], #-0
    a0dc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    a0e0:	00000000 	andeq	r0, r0, r0
    a0e4:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    a0e8:	17000000 	strne	r0, [r0, -r0]
    a0ec:	000018cf 	andeq	r1, r0, pc, asr #17
    a0f0:	00a26a05 	adceq	r6, r2, r5, lsl #20
    a0f4:	de170000 	cdple	0, 1, cr0, cr7, cr0, {0}
    a0f8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    a0fc:	0000a284 	andeq	sl, r0, r4, lsl #5
    a100:	08bf0000 	ldmeq	pc!, {}	; <UNPREDICTABLE>
    a104:	00040000 	andeq	r0, r4, r0
    a108:	00003028 	andeq	r3, r0, r8, lsr #32
    a10c:	166c0104 	strbtne	r0, [ip], -r4, lsl #2
    a110:	6d010000 	stcvs	0, cr0, [r1, #-0]
    a114:	6100002a 	tstvs	r0, sl, lsr #32
    a118:	00000017 	andeq	r0, r0, r7, lsl r0
    a11c:	00000010 	andeq	r0, r0, r0, lsl r0
    a120:	8f000000 	svchi	0x00000000
    a124:	02000069 	andeq	r0, r0, #105	; 0x69
    a128:	03b20601 			; <UNDEFINED> instruction: 0x03b20601
    a12c:	16030000 	strne	r0, [r3], -r0
    a130:	03000022 	movweq	r0, #34	; 0x22
    a134:	0000371d 	andeq	r3, r0, sp, lsl r7
    a138:	08010200 	stmdaeq	r1, {r9}
    a13c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    a140:	002c8303 	eoreq	r8, ip, r3, lsl #6
    a144:	49290300 	stmdbmi	r9!, {r8, r9}
    a148:	02000000 	andeq	r0, r0, #0
    a14c:	03ec0502 	mvneq	r0, #8388608	; 0x800000
    a150:	04030000 	streq	r0, [r3], #-0
    a154:	03000021 	movweq	r0, #33	; 0x21
    a158:	00005b2b 	andeq	r5, r0, fp, lsr #22
    a15c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a160:	0000026e 	andeq	r0, r0, lr, ror #4
    a164:	00166203 	andseq	r6, r6, r3, lsl #4
    a168:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; a170 <__exidx_end+0x73e4>
    a16c:	02000000 	andeq	r0, r0, #0
    a170:	00a40504 	adceq	r0, r4, r4, lsl #10
    a174:	cd030000 	stcgt	0, cr0, [r3, #-0]
    a178:	03000017 	movweq	r0, #23
    a17c:	00007f41 	andeq	r7, r0, r1, asr #30
    a180:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a184:	00000079 	andeq	r0, r0, r9, ror r0
    a188:	9f050802 	svcls	0x00050802
    a18c:	02000000 	andeq	r0, r0, #0
    a190:	00740708 	rsbseq	r0, r4, r8, lsl #14
    a194:	04040000 	streq	r0, [r4], #-0
    a198:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a19c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a1a0:	0000007e 	andeq	r0, r0, lr, ror r0
    a1a4:	00221803 	eoreq	r1, r2, r3, lsl #16
    a1a8:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    a1ac:	03000000 	movweq	r0, #0
    a1b0:	00002c85 	andeq	r2, r0, r5, lsl #25
    a1b4:	003e1904 	eorseq	r1, lr, r4, lsl #18
    a1b8:	06030000 	streq	r0, [r3], -r0
    a1bc:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    a1c0:	0000501a 	andeq	r5, r0, sl, lsl r0
    a1c4:	16640300 	strbtne	r0, [r4], -r0, lsl #6
    a1c8:	1f040000 	svcne	0x00040000
    a1cc:	00000062 	andeq	r0, r0, r2, rrx
    a1d0:	0017cf03 	andseq	ip, r7, r3, lsl #30
    a1d4:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    a1d8:	03000000 	movweq	r0, #0
    a1dc:	000022ef 	andeq	r2, r0, pc, ror #5
    a1e0:	00e43305 	rsceq	r3, r4, r5, lsl #6
    a1e4:	04050000 	streq	r0, [r5], #-0
    a1e8:	000000ea 	andeq	r0, r0, sl, ror #1
    a1ec:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
    a1f0:	07000000 	streq	r0, [r0, -r0]
    a1f4:	000000fc 	strdeq	r0, [r0], -ip
    a1f8:	0000a208 	andeq	sl, r0, r8, lsl #4
    a1fc:	65030000 	strvs	r0, [r3, #-0]
    a200:	06000023 	streq	r0, [r0], -r3, lsr #32
    a204:	00010742 	andeq	r0, r1, r2, asr #14
    a208:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
    a20c:	09000001 	stmdbeq	r0, {r0}
    a210:	000000ce 	andeq	r0, r0, lr, asr #1
    a214:	00000126 	andeq	r0, r0, r6, lsr #2
    a218:	00012608 	andeq	r2, r1, r8, lsl #12
    a21c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a220:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a224:	00000000 	andeq	r0, r0, r0
    a228:	00a20405 	adceq	r0, r2, r5, lsl #8
    a22c:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    a230:	06000024 	streq	r0, [r0], -r4, lsr #32
    a234:	00013746 	andeq	r3, r1, r6, asr #14
    a238:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
    a23c:	0a000001 	beq	a248 <__exidx_end+0x74bc>
    a240:	000000ce 	andeq	r0, r0, lr, asr #1
    a244:	0024fa03 	eoreq	pc, r4, r3, lsl #20
    a248:	37480600 	strbcc	r0, [r8, -r0, lsl #12]
    a24c:	03000001 	movweq	r0, #1
    a250:	00002240 	andeq	r2, r0, r0, asr #4
    a254:	01584a06 	cmpeq	r8, r6, lsl #20
    a258:	04050000 	streq	r0, [r5], #-0
    a25c:	0000015e 	andeq	r0, r0, lr, asr r1
    a260:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a264:	00016d00 	andeq	r6, r1, r0, lsl #26
    a268:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a26c:	03000000 	movweq	r0, #0
    a270:	000021a6 	andeq	r2, r0, r6, lsr #3
    a274:	01374c06 	teqeq	r7, r6, lsl #24
    a278:	0f030000 	svceq	0x00030000
    a27c:	06000021 	streq	r0, [r0], -r1, lsr #32
    a280:	0001074e 	andeq	r0, r1, lr, asr #14
    a284:	21960300 	orrscs	r0, r6, r0, lsl #6
    a288:	51060000 	mrspl	r0, (UNDEF: 6)
    a28c:	000000e4 	andeq	r0, r0, r4, ror #1
    a290:	00201203 	eoreq	r1, r0, r3, lsl #4
    a294:	99530600 	ldmdbls	r3, {r9, sl}^
    a298:	05000001 	streq	r0, [r0, #-1]
    a29c:	00019f04 	andeq	r9, r1, r4, lsl #30
    a2a0:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a2a4:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    a2a8:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    a2ac:	08000001 	stmdaeq	r0, {r0}
    a2b0:	000000b8 	strheq	r0, [r0], -r8
    a2b4:	0000b808 	andeq	fp, r0, r8, lsl #16
    a2b8:	04050000 	streq	r0, [r5], #-0
    a2bc:	000000b8 	strheq	r0, [r0], -r8
    a2c0:	00238903 	eoreq	r8, r3, r3, lsl #18
    a2c4:	c9570600 	ldmdbgt	r7, {r9, sl}^
    a2c8:	05000001 	streq	r0, [r0, #-1]
    a2cc:	0001cf04 	andeq	ip, r1, r4, lsl #30
    a2d0:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a2d4:	01e30000 	mvneq	r0, r0
    a2d8:	e3080000 	movw	r0, #32768	; 0x8000
    a2dc:	08000001 	stmdaeq	r0, {r0}
    a2e0:	000000ce 	andeq	r0, r0, lr, asr #1
    a2e4:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    a2e8:	03000000 	movweq	r0, #0
    a2ec:	000021c9 	andeq	r2, r0, r9, asr #3
    a2f0:	01c95a06 	biceq	r5, r9, r6, lsl #20
    a2f4:	92030000 	andls	r0, r3, #0
    a2f8:	06000022 	streq	r0, [r0], -r2, lsr #32
    a2fc:	0001c95d 	andeq	ip, r1, sp, asr r9
    a300:	20240300 	eorcs	r0, r4, r0, lsl #6
    a304:	60060000 	andvs	r0, r6, r0
    a308:	000001c9 	andeq	r0, r0, r9, asr #3
    a30c:	0023b403 	eoreq	fp, r3, r3, lsl #8
    a310:	e4630600 	strbt	r0, [r3], #-1536	; 0xfffffa00
    a314:	03000000 	movweq	r0, #0
    a318:	0000204a 	andeq	r2, r0, sl, asr #32
    a31c:	02206506 	eoreq	r6, r0, #25165824	; 0x1800000
    a320:	04050000 	streq	r0, [r5], #-0
    a324:	00000226 	andeq	r0, r0, r6, lsr #4
    a328:	00023107 	andeq	r3, r2, r7, lsl #2
    a32c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a330:	03000000 	movweq	r0, #0
    a334:	0000250b 	andeq	r2, r0, fp, lsl #10
    a338:	02206706 	eoreq	r6, r0, #1572864	; 0x180000
    a33c:	00030000 	andeq	r0, r3, r0
    a340:	06000023 	streq	r0, [r0], -r3, lsr #32
    a344:	0000eb69 	andeq	lr, r0, r9, ror #22
    a348:	24d90300 	ldrbcs	r0, [r9], #768	; 0x300
    a34c:	6b060000 	blvs	18a354 <__ccfg+0x16a3ac>
    a350:	000000eb 	andeq	r0, r0, fp, ror #1
    a354:	0022ae03 	eoreq	sl, r2, r3, lsl #28
    a358:	eb6d0600 	bl	1b4bb60 <__ccfg+0x1b2bbb8>
    a35c:	03000000 	movweq	r0, #0
    a360:	000022c0 	andeq	r2, r0, r0, asr #5
    a364:	00eb6f06 	rsceq	r6, fp, r6, lsl #30
    a368:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    a36c:	03557a06 	cmpeq	r5, #24576	; 0x6000
    a370:	640c0000 	strvs	r0, [ip], #-0
    a374:	06000022 	streq	r0, [r0], -r2, lsr #32
    a378:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
    a37c:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    a380:	06000024 	streq	r0, [r0], -r4, lsr #32
    a384:	00012c7d 	andeq	r2, r1, sp, ror ip
    a388:	880c0400 	stmdahi	ip, {sl}
    a38c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a390:	0001427e 	andeq	r4, r1, lr, ror r2
    a394:	f30c0800 	vsub.i8	d0, d12, d0
    a398:	06000023 	streq	r0, [r0], -r3, lsr #32
    a39c:	00014d7f 	andeq	r4, r1, pc, ror sp
    a3a0:	050c0c00 	streq	r0, [ip, #-3072]	; 0xfffff400
    a3a4:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3a8:	00016d80 	andeq	r6, r1, r0, lsl #27
    a3ac:	170c1000 	strne	r1, [ip, -r0]
    a3b0:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3b4:	00017881 	andeq	r7, r1, r1, lsl #17
    a3b8:	620c1400 	andvs	r1, ip, #0, 8
    a3bc:	06000021 	streq	r0, [r0], -r1, lsr #32
    a3c0:	00018382 	andeq	r8, r1, r2, lsl #7
    a3c4:	7d0c1800 	stcvc	8, cr1, [ip, #-0]
    a3c8:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3cc:	00018e83 	andeq	r8, r1, r3, lsl #29
    a3d0:	ce0c1c00 	cdpgt	12, 0, cr1, cr12, cr0, {0}
    a3d4:	06000023 	streq	r0, [r0], -r3, lsr #32
    a3d8:	0001be84 	andeq	fp, r1, r4, lsl #29
    a3dc:	050c2000 	streq	r2, [ip, #-0]
    a3e0:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3e4:	0001e985 	andeq	lr, r1, r5, lsl #19
    a3e8:	200c2400 	andcs	r2, ip, r0, lsl #8
    a3ec:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3f0:	0001f486 	andeq	pc, r1, r6, lsl #9
    a3f4:	3b0c2800 	blcc	3143fc <__ccfg+0x2f4454>
    a3f8:	06000024 	streq	r0, [r0], -r4, lsr #32
    a3fc:	0001ff87 	andeq	pc, r1, r7, lsl #31
    a400:	b70c2c00 	strlt	r2, [ip, -r0, lsl #24]
    a404:	06000021 	streq	r0, [r0], -r1, lsr #32
    a408:	00021588 	andeq	r1, r2, r8, lsl #11
    a40c:	290c3000 	stmdbcs	ip, {ip, sp}
    a410:	06000024 	streq	r0, [r0], -r4, lsr #32
    a414:	00023189 	andeq	r3, r2, r9, lsl #3
    a418:	6a0c3400 	bvs	317420 <__ccfg+0x2f7478>
    a41c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a420:	00020a8a 	andeq	r0, r2, sl, lsl #21
    a424:	de0c3800 	cdple	8, 0, cr3, cr12, cr0, {0}
    a428:	06000022 	streq	r0, [r0], -r2, lsr #32
    a42c:	00023c8b 	andeq	r3, r2, fp, lsl #25
    a430:	e40c3c00 	str	r3, [ip], #-3072	; 0xfffff400
    a434:	06000023 	streq	r0, [r0], -r3, lsr #32
    a438:	0002478c 	andeq	r4, r2, ip, lsl #15
    a43c:	df0c4000 	svcle	0x000c4000
    a440:	06000021 	streq	r0, [r0], -r1, lsr #32
    a444:	0002528d 	andeq	r5, r2, sp, lsl #5
    a448:	3b0c4400 	blcc	31b450 <__ccfg+0x2fb4a8>
    a44c:	06000020 	streq	r0, [r0], -r0, lsr #32
    a450:	00025d8e 	andeq	r5, r2, lr, lsl #27
    a454:	03004800 	movweq	r4, #2048	; 0x800
    a458:	0000233f 	andeq	r2, r0, pc, lsr r3
    a45c:	02688f06 	rsbeq	r8, r8, #6, 30
    a460:	140b0000 	strne	r0, [fp], #-0
    a464:	03a55401 			; <UNDEFINED> instruction: 0x03a55401
    a468:	550c0000 	strpl	r0, [ip, #-0]
    a46c:	0100002a 	tsteq	r0, sl, lsr #32
    a470:	0000ce55 	andeq	ip, r0, r5, asr lr
    a474:	ba0c0000 	blt	30a47c <__ccfg+0x2ea4d4>
    a478:	0100002b 	tsteq	r0, fp, lsr #32
    a47c:	0000ce56 	andeq	ip, r0, r6, asr lr
    a480:	ee0c0400 	cfcpys	mvf0, mvf12
    a484:	01000029 	tsteq	r0, r9, lsr #32
    a488:	0000ce57 	andeq	ip, r0, r7, asr lr
    a48c:	880c0800 	stmdahi	ip, {fp}
    a490:	0100002a 	tsteq	r0, sl, lsr #32
    a494:	0000ce58 	andeq	ip, r0, r8, asr lr
    a498:	1e0c0c00 	cdpne	12, 0, cr0, cr12, cr0, {0}
    a49c:	0100002a 	tsteq	r0, sl, lsr #32
    a4a0:	0000c359 	andeq	ip, r0, r9, asr r3
    a4a4:	03001000 	movweq	r1, #0
    a4a8:	00002be5 	andeq	r2, r0, r5, ror #23
    a4ac:	03605a01 	cmneq	r0, #4096	; 0x1000
    a4b0:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
    a4b4:	0200001b 	andeq	r0, r0, #27
    a4b8:	03d301f9 	bicseq	r0, r3, #1073741886	; 0x4000003e
    a4bc:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    a4c0:	0100002c 	tsteq	r0, ip, lsr #32
    a4c4:	0000ce65 	andeq	ip, r0, r5, ror #28
    a4c8:	29e60e00 	stmibcs	r6!, {r9, sl, fp}^
    a4cc:	65010000 	strvs	r0, [r1, #-0]
    a4d0:	000000ce 	andeq	r0, r0, lr, asr #1
    a4d4:	1ec40f00 	cdpne	15, 12, cr0, cr4, cr0, {0}
    a4d8:	10020000 	andne	r0, r2, r0
    a4dc:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a4e0:	03fb0100 	mvnseq	r0, #0, 2
    a4e4:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    a4e8:	0100002c 	tsteq	r0, ip, lsr #32
    a4ec:	0000cea0 	andeq	ip, r0, r0, lsr #29
    a4f0:	2c731000 	ldclcs	0, cr1, [r3], #-0
    a4f4:	a2010000 	andge	r0, r1, #0
    a4f8:	000000ce 	andeq	r0, r0, lr, asr #1
    a4fc:	03b01100 	movseq	r1, #0, 2
    a500:	2ad40000 	bcs	ff50a508 <_estack+0xdf505508>
    a504:	005c0000 	subseq	r0, ip, r0
    a508:	9c010000 	stcls	0, cr0, [r1], {-0}
    a50c:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    a510:	0003bc12 	andeq	fp, r3, r2, lsl ip
    a514:	00450700 	subeq	r0, r5, r0, lsl #14
    a518:	03c71200 	biceq	r1, r7, #0, 4
    a51c:	45330000 	ldrmi	r0, [r3, #-0]!
    a520:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
    a524:	1400002b 	strne	r0, [r0], #-43	; 0xffffffd5
    a528:	61000000 	mrsvs	r0, (UNDEF: 0)
    a52c:	12000004 	andne	r0, r0, #4
    a530:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    a534:	0000455f 	andeq	r4, r0, pc, asr r5
    a538:	0003c712 	andeq	ip, r3, r2, lsl r7
    a53c:	00457200 	subeq	r7, r5, r0, lsl #4
    a540:	2b221400 	blcs	88f548 <__ccfg+0x86f5a0>
    a544:	74020000 	strvc	r0, [r2], #-0
    a548:	53011500 	movwpl	r1, #5376	; 0x1500
    a54c:	01153201 	tsteq	r5, r1, lsl #4
    a550:	153c0152 	ldrne	r0, [ip, #-338]!	; 0xfffffeae
    a554:	30015101 	andcc	r5, r1, r1, lsl #2
    a558:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a55c:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a560:	16000040 	strne	r0, [r0], -r0, asr #32
    a564:	00002af2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a568:	8d007602 	stchi	6, cr7, [r0, #-8]
    a56c:	15000004 	strne	r0, [r0, #-4]
    a570:	30015301 	andcc	r5, r1, r1, lsl #6
    a574:	01520115 	cmpeq	r2, r5, lsl r1
    a578:	51011531 	tstpl	r1, r1, lsr r5
    a57c:	01153001 	tsteq	r5, r1
    a580:	000c0550 	andeq	r0, ip, r0, asr r5
    a584:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    a588:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    a58c:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
    a590:	00002b0a 	andeq	r2, r0, sl, lsl #22
    a594:	15007602 	strne	r7, [r0, #-1538]	; 0xfffff9fe
    a598:	31015301 	tstcc	r1, r1, lsl #6
    a59c:	01520115 	cmpeq	r2, r5, lsl r1
    a5a0:	51011532 	tstpl	r1, r2, lsr r5
    a5a4:	01153001 	tsteq	r5, r1
    a5a8:	000c0550 	andeq	r0, ip, r0, asr r5
    a5ac:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    a5b0:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    a5b4:	00000074 	andeq	r0, r0, r4, ror r0
    a5b8:	0003d311 	andeq	sp, r3, r1, lsl r3
    a5bc:	002b3000 	eoreq	r3, fp, r0
    a5c0:	00002c00 	andeq	r2, r0, r0, lsl #24
    a5c4:	0d9c0100 	ldfeqs	f0, [ip]
    a5c8:	12000005 	andne	r0, r0, #5
    a5cc:	000003e4 	andeq	r0, r0, r4, ror #7
    a5d0:	00004593 	muleq	r0, r3, r5
    a5d4:	0003ef17 	andeq	lr, r3, r7, lsl pc
    a5d8:	18500100 	ldmdane	r0, {r8}^
    a5dc:	00000fe8 	andeq	r0, r0, r8, ror #31
    a5e0:	000004f4 	strdeq	r0, [r0], -r4
    a5e4:	0003e419 	andeq	lr, r3, r9, lsl r4
    a5e8:	e81a0400 	ldmda	sl, {sl}
    a5ec:	1b00000f 	blne	a630 <__exidx_end+0x78a4>
    a5f0:	000003ef 	andeq	r0, r0, pc, ror #7
    a5f4:	50140000 	andspl	r0, r4, r0
    a5f8:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a5fc:	01150074 	tsteq	r5, r4, ror r0
    a600:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    a604:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a608:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a60c:	1c000040 	stcne	0, cr0, [r0], {64}	; 0x40
    a610:	00002cee 	andeq	r2, r0, lr, ror #25
    a614:	ce018402 	cdpgt	4, 0, cr8, cr1, cr2, {0}
    a618:	00000000 	andeq	r0, r0, r0
    a61c:	90000000 	andls	r0, r0, r0
    a620:	01000000 	mrseq	r0, (UNDEF: 0)
    a624:	0005769c 	muleq	r5, ip, r6
    a628:	2bf41d00 	blcs	ffd11a30 <_estack+0xdfd0ca30>
    a62c:	c2010000 	andgt	r0, r1, #0
    a630:	000000ce 	andeq	r0, r0, lr, asr #1
    a634:	000045b4 			; <UNDEFINED> instruction: 0x000045b4
    a638:	002b721e 	eoreq	r7, fp, lr, lsl r2
    a63c:	cec40100 	polgts	f0, f4, f0
    a640:	e0000000 	and	r0, r0, r0
    a644:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    a648:	00002b8b 	andeq	r2, r0, fp, lsl #23
    a64c:	00c3c501 	sbceq	ip, r3, r1, lsl #10
    a650:	45f30000 	ldrbmi	r0, [r3, #0]!
    a654:	2a1e0000 	bcs	78a65c <__ccfg+0x76a6b4>
    a658:	0100002a 	tsteq	r0, sl, lsr #32
    a65c:	0000cec6 	andeq	ip, r0, r6, asr #29
    a660:	00461a00 	subeq	r1, r6, r0, lsl #20
    a664:	00001f00 	andeq	r1, r0, r0, lsl #30
    a668:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a66c:	001f0000 	andseq	r0, pc, r0
    a670:	aa000000 	bge	a678 <__exidx_end+0x78ec>
    a674:	00000008 	andeq	r0, r0, r8
    a678:	002ab120 	eoreq	fp, sl, r0, lsr #2
    a67c:	01910200 	orrseq	r0, r1, r0, lsl #4
    a680:	00000000 	andeq	r0, r0, r0
    a684:	00000018 	andeq	r0, r0, r8, lsl r0
    a688:	05ae9c01 	streq	r9, [lr, #3073]!	; 0xc01
    a68c:	00210000 	eoreq	r0, r1, r0
    a690:	b0000000 	andlt	r0, r0, r0
    a694:	a4000003 	strge	r0, [r0], #-3
    a698:	15000005 	strne	r0, [r0, #-5]
    a69c:	31015101 	tstcc	r1, r1, lsl #2
    a6a0:	01500115 	cmpeq	r0, r5, lsl r1
    a6a4:	001f0033 	andseq	r0, pc, r3, lsr r0	; <UNPREDICTABLE>
    a6a8:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a6ac:	00000008 	andeq	r0, r0, r8
    a6b0:	002bc922 	eoreq	ip, fp, r2, lsr #18
    a6b4:	01220200 			; <UNDEFINED> instruction: 0x01220200
    a6b8:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    a6bc:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    a6c0:	00000bd4 	ldrdeq	r0, [r0], -r4
    a6c4:	00235323 	eoreq	r5, r3, r3, lsr #6
    a6c8:	01400200 	mrseq	r0, (UNDEF: 96)
    a6cc:	29fc1c03 	ldmibcs	ip!, {r0, r1, sl, fp, ip}^
    a6d0:	a1020000 	mrsge	r0, (UNDEF: 2)
    a6d4:	0005bb01 	andeq	fp, r5, r1, lsl #22
    a6d8:	00000000 	andeq	r0, r0, r0
    a6dc:	00006000 	andeq	r6, r0, r0
    a6e0:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    a6e4:	24000006 	strcs	r0, [r0], #-6
    a6e8:	00002baa 	andeq	r2, r0, sl, lsr #23
    a6ec:	ce010201 	cdpgt	2, 0, cr0, cr1, cr1, {0}
    a6f0:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    a6f4:	24000046 	strcs	r0, [r0], #-70	; 0xffffffba
    a6f8:	00002c26 	andeq	r2, r0, r6, lsr #24
    a6fc:	ce010301 	cdpgt	3, 0, cr0, cr1, cr1, {0}
    a700:	81000000 	mrshi	r0, (UNDEF: 0)
    a704:	25000046 	strcs	r0, [r0, #-70]	; 0xffffffba
    a708:	000005ae 	andeq	r0, r0, lr, lsr #11
    a70c:	00000000 	andeq	r0, r0, r0
    a710:	00000010 	andeq	r0, r0, r0, lsl r0
    a714:	3c010901 			; <UNDEFINED> instruction: 0x3c010901
    a718:	14000006 	strne	r0, [r0], #-6
    a71c:	00000000 	andeq	r0, r0, r0
    a720:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    a724:	30015301 	andcc	r5, r1, r1, lsl #6
    a728:	01520115 	cmpeq	r2, r5, lsl r1
    a72c:	51011531 	tstpl	r1, r1, lsr r5
    a730:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    a734:	0c055001 	stceq	0, cr5, [r5], {1}
    a738:	400ca000 	andmi	sl, ip, r0
    a73c:	c2250000 	eorgt	r0, r5, #0
    a740:	00000005 	andeq	r0, r0, r5
    a744:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a748:	01000000 	mrseq	r0, (UNDEF: 0)
    a74c:	065a010a 	ldrbeq	r0, [sl], -sl, lsl #2
    a750:	001f0000 	andseq	r0, pc, r0
    a754:	b5000000 	strlt	r0, [r0, #-0]
    a758:	00000008 	andeq	r0, r0, r8
    a75c:	00000021 	andeq	r0, r0, r1, lsr #32
    a760:	0003d300 	andeq	sp, r3, r0, lsl #6
    a764:	00066d00 	andeq	r6, r6, r0, lsl #26
    a768:	50011500 	andpl	r1, r1, r0, lsl #10
    a76c:	1f003101 	svcne	0x00003101
    a770:	00000000 	andeq	r0, r0, r0
    a774:	0000089e 	muleq	r0, lr, r8
    a778:	2ad12000 	bcs	ff452780 <_estack+0xdf44d780>
    a77c:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    a780:	00000001 	andeq	r0, r0, r1
    a784:	00003400 	andeq	r3, r0, r0, lsl #8
    a788:	e99c0100 	ldmib	ip, {r8}
    a78c:	25000006 	strcs	r0, [r0, #-6]
    a790:	000005c2 	andeq	r0, r0, r2, asr #11
    a794:	00000000 	andeq	r0, r0, r0
    a798:	00000008 	andeq	r0, r0, r8
    a79c:	ab012f01 	blge	563a8 <__ccfg+0x36400>
    a7a0:	1f000006 	svcne	0x00000006
    a7a4:	00000000 	andeq	r0, r0, r0
    a7a8:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    a7ac:	00002100 	andeq	r2, r0, r0, lsl #2
    a7b0:	03b00000 	movseq	r0, #0
    a7b4:	06c30000 	strbeq	r0, [r3], r0
    a7b8:	01150000 	tsteq	r5, r0
    a7bc:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a7c0:	33015001 	movwcc	r5, #4097	; 0x1001
    a7c4:	00002100 	andeq	r2, r0, r0, lsl #2
    a7c8:	03d30000 	bicseq	r0, r3, #0
    a7cc:	06d60000 	ldrbeq	r0, [r6], r0
    a7d0:	01150000 	tsteq	r5, r0
    a7d4:	00310150 	eorseq	r0, r1, r0, asr r1
    a7d8:	0000001f 	andeq	r0, r0, pc, lsl r0
    a7dc:	00089e00 	andeq	r9, r8, r0, lsl #28
    a7e0:	00001f00 	andeq	r1, r0, r0, lsl #30
    a7e4:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    a7e8:	1c000000 	stcne	0, cr0, [r0], {-0}
    a7ec:	00002af6 	strdeq	r2, [r0], -r6
    a7f0:	c301f202 	movwgt	pc, #4610	; 0x1202	; <UNPREDICTABLE>
    a7f4:	00000000 	andeq	r0, r0, r0
    a7f8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a7fc:	01000000 	mrseq	r0, (UNDEF: 0)
    a800:	00079a9c 	muleq	r7, ip, sl
    a804:	2c132600 	ldccs	6, cr2, [r3], {-0}
    a808:	3c010000 	stccc	0, cr0, [r1], {-0}
    a80c:	0000c301 	andeq	ip, r0, r1, lsl #6
    a810:	00469400 	subeq	r9, r6, r0, lsl #8
    a814:	2ba02700 	blcs	fe81441c <_estack+0xde80f41c>
    a818:	3f010000 	svccc	0x00010000
    a81c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a820:	27510100 	ldrbcs	r0, [r1, -r0, lsl #2]
    a824:	00002d09 	andeq	r2, r0, r9, lsl #26
    a828:	c3014101 	movwgt	r4, #4353	; 0x1101
    a82c:	05000000 	streq	r0, [r0, #-0]
    a830:	26400071 			; <UNDEFINED> instruction: 0x26400071
    a834:	2a3d279f 	bcs	f546b8 <__ccfg+0xf34710>
    a838:	43010000 	movwmi	r0, #4096	; 0x1000
    a83c:	0000c301 	andeq	ip, r0, r1, lsl #6
    a840:	00710700 	rsbseq	r0, r1, r0, lsl #14
    a844:	26482440 	strbcs	r2, [r8], -r0, asr #8
    a848:	2a45279f 	bcs	11546cc <__ccfg+0x1134724>
    a84c:	45010000 	strmi	r0, [r1, #-0]
    a850:	0000c301 	andeq	ip, r0, r1, lsl #6
    a854:	00710700 	rsbseq	r0, r1, r0, lsl #14
    a858:	26482448 	strbcs	r2, [r8], -r8, asr #8
    a85c:	2a4d249f 	bcs	1353ae0 <__ccfg+0x1333b38>
    a860:	47010000 	strmi	r0, [r1, -r0]
    a864:	0000c301 	andeq	ip, r0, r1, lsl #6
    a868:	0046c200 	subeq	ip, r6, r0, lsl #4
    a86c:	2a9a2400 	bcs	fe693874 <_estack+0xde68e874>
    a870:	56010000 	strpl	r0, [r1], -r0
    a874:	0000c301 	andeq	ip, r0, r1, lsl #6
    a878:	0046db00 	subeq	sp, r6, r0, lsl #22
    a87c:	2b452400 	blcs	1153884 <__ccfg+0x11338dc>
    a880:	57010000 	strpl	r0, [r1, -r0]
    a884:	0000c301 	andeq	ip, r0, r1, lsl #6
    a888:	0046fe00 	subeq	pc, r6, r0, lsl #28
    a88c:	00642800 	rsbeq	r2, r4, r0, lsl #16
    a890:	c3015801 	movwgt	r5, #6145	; 0x1801
    a894:	27000000 	strcs	r0, [r0, -r0]
    a898:	00000047 	andeq	r0, r0, r7, asr #32
    a89c:	002c371c 	eoreq	r3, ip, ip, lsl r7
    a8a0:	020e0200 	andeq	r0, lr, #0, 4
    a8a4:	000000ad 	andeq	r0, r0, sp, lsr #1
    a8a8:	00000000 	andeq	r0, r0, r0
    a8ac:	0000000c 	andeq	r0, r0, ip
    a8b0:	07d59c01 	ldrbeq	r9, [r5, r1, lsl #24]
    a8b4:	5e260000 	cdppl	0, 2, cr0, cr6, cr0, {0}
    a8b8:	0100002b 	tsteq	r0, fp, lsr #32
    a8bc:	00c30163 	sbceq	r0, r3, r3, ror #2
    a8c0:	47a10000 	strmi	r0, [r1, r0]!
    a8c4:	8d240000 	stchi	0, cr0, [r4, #-0]
    a8c8:	0100002c 	tsteq	r0, ip, lsr #32
    a8cc:	00c30185 	sbceq	r0, r3, r5, lsl #3
    a8d0:	47c20000 	strbmi	r0, [r2, r0]
    a8d4:	1c000000 	stcne	0, cr0, [r0], {-0}
    a8d8:	00002b20 	andeq	r2, r0, r0, lsr #22
    a8dc:	ce01c202 	cdpgt	2, 0, cr12, cr1, cr2, {0}
    a8e0:	00000000 	andeq	r0, r0, r0
    a8e4:	34000000 	strcc	r0, [r0], #-0
    a8e8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8ec:	0008429c 	muleq	r8, ip, r2
    a8f0:	2ce02400 	cfstrdcs	mvd2, [r0]
    a8f4:	92010000 	andls	r0, r1, #0
    a8f8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a8fc:	00480200 	subeq	r0, r8, r0, lsl #4
    a900:	2c1c2400 	cfldrscs	mvf2, [ip], {-0}
    a904:	93010000 	movwls	r0, #4096	; 0x1000
    a908:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a90c:	00482400 	subeq	r2, r8, r0, lsl #8
    a910:	21f32400 	mvnscs	r2, r0, lsl #8
    a914:	94010000 	strls	r0, [r1], #-0
    a918:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a91c:	00483700 	subeq	r3, r8, r0, lsl #14
    a920:	2ac82400 	bcs	ff213928 <_estack+0xdf20e928>
    a924:	95010000 	strls	r0, [r1, #-0]
    a928:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a92c:	00485a00 	subeq	r5, r8, r0, lsl #20
    a930:	00001f00 	andeq	r1, r0, r0, lsl #30
    a934:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a938:	001f0000 	andseq	r0, pc, r0
    a93c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a940:	00000008 	andeq	r0, r0, r8
    a944:	002cac1c 	eoreq	sl, ip, ip, lsl ip
    a948:	01d30200 	bicseq	r0, r3, r0, lsl #4
    a94c:	000000ce 	andeq	r0, r0, lr, asr #1
    a950:	00000000 	andeq	r0, r0, r0
    a954:	0000001c 	andeq	r0, r0, ip, lsl r0
    a958:	088d9c01 	stmeq	sp, {r0, sl, fp, ip, pc}
    a95c:	da240000 	ble	90a964 <__ccfg+0x8ea9bc>
    a960:	0100002b 	tsteq	r0, fp, lsr #32
    a964:	00ce01b7 	strheq	r0, [lr], #23
    a968:	48760000 	ldmdami	r6!, {}^	; <UNPREDICTABLE>
    a96c:	9e240000 	cdpls	0, 2, cr0, cr4, cr0, {0}
    a970:	0100002c 	tsteq	r0, ip, lsr #32
    a974:	00ce01b8 	strheq	r0, [lr], #24
    a978:	48890000 	stmmi	r9, {}	; <UNPREDICTABLE>
    a97c:	a4240000 	strtge	r0, [r4], #-0
    a980:	0100002a 	tsteq	r0, sl, lsr #32
    a984:	00ce01b9 	strheq	r0, [lr], #25
    a988:	48a40000 	stmiami	r4!, {}	; <UNPREDICTABLE>
    a98c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    a990:	00002b51 	andeq	r2, r0, r1, asr fp
    a994:	03a55c01 			; <UNDEFINED> instruction: 0x03a55c01
    a998:	03050000 	movweq	r0, #20480	; 0x5000
    a99c:	00000000 	andeq	r0, r0, r0
    a9a0:	0017e72a 	andseq	lr, r7, sl, lsr #14
    a9a4:	03450700 	movteq	r0, #22272	; 0x5700
    a9a8:	000000ce 	andeq	r0, r0, lr, asr #1
    a9ac:	0016332b 	andseq	r3, r6, fp, lsr #6
    a9b0:	c3aa0800 			; <UNDEFINED> instruction: 0xc3aa0800
    a9b4:	2c000000 	stccs	0, cr0, [r0], {-0}
    a9b8:	000020f7 	strdeq	r2, [r0], -r7
    a9bc:	d9089906 	stmdble	r8, {r1, r2, r8, fp, ip, pc}
    a9c0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			i = k;
      40:	13490035 	movtne	r0, #36917	; 0x9035
				j->Next = k;
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
}
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0xf38>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
        if(offTime > 0)
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
            delay(offTime, Check_PERIOD);
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
        if(ledFlag == 0) {
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
            led = redLed;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
            onTime = redOn;
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
            offTime = greenOff;
     114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
        if(On)
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	0a020c3f 	beq	83224 <__ccfg+0x6327c>
            leds(led,1);
     124:	34170000 	ldrcc	r0, [r7], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     128:	3a080300 	bcc	200d30 <__ccfg+0x1e0d88>
            leds(led,0);
     12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     130:	3f13490b 	svccc	0x0013490b
     134:	000a020c 	andeq	r0, sl, ip, lsl #4
     138:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
        if(onTime > 0)
     13c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
            delay(onTime, OFF_PERIOD);
     140:	0b3b0b3a 	bleq	ec2e30 <__ccfg+0xea2e88>
        when(&On, Check_PERIOD);
     144:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     148:	01120111 	tsteq	r2, r1, lsl r1
        release;
     14c:	13010a40 	movwne	r0, #6720	; 0x1a40
            led = greenLed;
     150:	05190000 	ldreq	r0, [r9, #-0]
     154:	3a0e0300 	bcc	380d5c <__ccfg+0x360db4>
            onTime = greenOn;
     158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            offTime = greenOff;
     15c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
            leds(led,0);
     160:	1a000006 	bne	180 <_Min_Stack_Size+0x80>
     164:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
     16c:	01110b39 	tsteq	r1, r9, lsr fp
     170:	0b1b0000 	bleq	6c0178 <__ccfg+0x6a01d0>
     174:	00065501 	andeq	r5, r6, r1, lsl #10
        leds(led,0);
     178:	00341c00 	eorseq	r1, r4, r0, lsl #24
     17c:	0b3a0e03 	bleq	e83990 <__ccfg+0xe639e8>
     180:	0b390b3b 	bleq	e42e74 <__ccfg+0xe22ecc>
     184:	0a021349 	beq	84eb0 <__ccfg+0x64f08>
}
     188:	0b1d0000 	bleq	740190 <__ccfg+0x7201e8>
     18c:	01065501 	tsteq	r6, r1, lsl #10
     190:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     194:	0111010b 	tsteq	r1, fp, lsl #2
     198:	13010112 	movwne	r0, #4370	; 0x1112
     19c:	341f0000 	ldrcc	r0, [pc], #-0	; 1a4 <_Min_Stack_Size+0xa4>
     1a0:	3a080300 	bcc	200da8 <__ccfg+0x1e0e00>
     1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1ac:	2000000a 	andcs	r0, r0, sl
     1b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     1b4:	01120111 	tsteq	r2, r1, lsl r1
     1b8:	0b590b58 	bleq	1642f20 <__ccfg+0x1622f78>
     1bc:	13010b57 	movwne	r0, #6999	; 0x1b57
     1c0:	05210000 	streq	r0, [r1, #-0]!
     1c4:	00133100 	andseq	r3, r3, r0, lsl #2
    word number = 0;
     1c8:	011d2200 	tsteq	sp, r0, lsl #4
    int numbersIndex = 0;
     1cc:	01521331 	cmpeq	r2, r1, lsr r3
     1d0:	0b580655 	bleq	1601b2c <__ccfg+0x15e1b84>
        if(settingsInput[i] == ' ') {
     1d4:	0b570b59 	bleq	15c2f40 <__ccfg+0x15a2f98>
     1d8:	34230000 	strtcc	r0, [r3], #-0
            numbers[numbersIndex] = number;
     1dc:	3a0e0300 	bcc	380de4 <__ccfg+0x360e3c>
     1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            number = 0;
     1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	24000006 	strcs	r0, [r0], #-6
    redOn = numbers[0];
     1ec:	08030034 	stmdaeq	r3, {r2, r4, r5}
     1f0:	0b3b0b3a 	bleq	ec2ee0 <__ccfg+0xea2f38>
    redOff = numbers[1];
     1f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1f8:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
    greenOn = numbers[2];
     1fc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     200:	3b0b3a0e 	blcc	2cea40 <__ccfg+0x2aea98>
    greenOff = numbers[3];
     204:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     208:	010b200c 	tsteq	fp, ip
}
     20c:	26000013 			; <UNDEFINED> instruction: 0x26000013
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
            number = number * 10;
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
            number += settingsInput[i] - 48;
     21c:	0b270000 	bleq	9c0224 <__ccfg+0x9a027c>
     220:	28000001 	stmdacs	r0, {r0}
     224:	0e03012e 	adfeqsp	f0, f3, #0.5
     228:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     22c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     230:	13010b20 	movwne	r0, #6944	; 0x1b20
fsm root {
     234:	05290000 	streq	r0, [r9, #-0]!
     238:	3a0e0300 	bcc	380e40 <__ccfg+0x360e98>
     23c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     240:	0013490b 	andseq	r4, r3, fp, lsl #18
     244:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	0a400112 	beq	100069c <__ccfg+0xfe06f4>
        ser_outf(Initial, "Enter your name: ");
     250:	052b0000 	streq	r0, [fp, #-0]!
     254:	02133100 	andseq	r3, r3, #0, 2
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	2c000006 	stccs	0, cr0, [r0], {6}
     25c:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
        runfsm blinker;
     260:	13010655 	movwne	r0, #5717	; 0x1655
     264:	1d2d0000 	stcne	0, cr0, [sp, #-0]
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	11133101 	tstne	r3, r1, lsl #2
     26c:	58011201 	stmdapl	r1, {r0, r9, ip}
     270:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
        ser_inf(Get_Choice, "%c", &choice);
     274:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
     278:	1331000a 	teqne	r1, #10
        if (choice == 'A' || choice == 'a'){
     27c:	00000111 	andeq	r0, r0, r1, lsl r1
     280:	31000a2f 	tstcc	r0, pc, lsr #20
     284:	30000013 	andcc	r0, r0, r3, lsl r0
            proceed Adjust_Intervals;
     288:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
            proceed Monitor;
     28c:	01120111 	tsteq	r2, r1, lsl r1
        proceed Show_Menu;
     290:	01000000 	mrseq	r0, (UNDEF: 0)
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     298:	0e030b13 	vmoveq.32	d3[0], r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     2a0:	06100111 			; <UNDEFINED> instruction: 0x06100111
     2a4:	24020000 	strcs	r0, [r2], #-0
        processSettingsInput(settings);
     2a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
        On = YES;
     2ac:	000e030b 	andeq	r0, lr, fp, lsl #6
     2b0:	00160300 	andseq	r0, r6, r0, lsl #6
        trigger(&On);
     2b4:	0b3a0e03 	bleq	e83ac8 <__ccfg+0xe63b20>
        proceed Show_Menu;
     2b8:	0b390b3b 	bleq	e42fac <__ccfg+0xe23004>
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	00001349 	andeq	r1, r0, r9, asr #6
     2c0:	0b002404 	bleq	92d8 <__exidx_end+0x654c>
     2c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     2c8:	05000008 	streq	r0, [r0, #-8]
     2cc:	13490026 	movtne	r0, #36902	; 0x9026
     2d0:	35060000 	strcc	r0, [r6, #-0]
     2d4:	00134900 	andseq	r4, r3, r0, lsl #18
        proceed Show_Menu;
     2d8:	000f0700 	andeq	r0, pc, r0, lsl #14
     2dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	13080000 	movwne	r0, #32768	; 0x8000
     2e4:	3a0b0b01 	bcc	2c2ef0 <__ccfg+0x2a2f48>
        displayCycle = YES;
     2e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	0013010b 	andseq	r0, r3, fp, lsl #2
     2f0:	000d0900 	andeq	r0, sp, r0, lsl #18
     2f4:	0b3a0e03 	bleq	e83b08 <__ccfg+0xe63b60>
        if(ch == 'S' || ch == 's'){
     2f8:	0b390b3b 	bleq	e42fec <__ccfg+0xe23044>
     2fc:	0b0b1349 	bleq	2c5028 <__ccfg+0x2a5080>
     300:	0b0c0b0d 	bleq	302f3c <__ccfg+0x2e2f94>
            displayCycle = NO;
     304:	00000b38 	andeq	r0, r0, r8, lsr fp
     308:	03000d0a 	movweq	r0, #3338	; 0xd0a
            proceed Show_Menu;
     30c:	3b0b3a0e 	blcc	2ceb4c <__ccfg+0x2aeba4>
        proceed Monitor;
     310:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     314:	000b3813 	andeq	r3, fp, r3, lsl r8
     318:	00340b00 	eorseq	r0, r4, r0, lsl #22
        leds(1, 0);
     31c:	0b3a0e03 	bleq	e83b30 <__ccfg+0xe63b88>
     320:	0b390b3b 	bleq	e43014 <__ccfg+0xe2306c>
     324:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 208 <processSettingsInput+0x40>
     328:	00000c3c 	andeq	r0, r0, ip, lsr ip
     32c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
        leds(0, 0);
     330:	00130113 	andseq	r0, r3, r3, lsl r1
     334:	00210d00 	eoreq	r0, r1, r0, lsl #26
     338:	160e0000 	strne	r0, [lr], -r0
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
     340:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	0013490b 	andseq	r4, r3, fp, lsl #18
        } else if (choice == 'S' || choice == 's') {
     348:	01150f00 	tsteq	r5, r0, lsl #30
            proceed Stop;
     34c:	13010c27 	movwne	r0, #7207	; 0x1c27
        } else if (choice == 'V' || choice == 'v') {
     350:	05100000 	ldreq	r0, [r0, #-0]
            proceed View_Settings;
     354:	00134900 	andseq	r4, r3, r0, lsl #18
        } else if (choice == 'M' || choice == 'm') {
     358:	00341100 	eorseq	r1, r4, r0, lsl #2
            proceed Monitor;
     35c:	0b3a0e03 	bleq	e83b70 <__ccfg+0xe63bc8>
     360:	0b39053b 	bleq	e41854 <__ccfg+0xe218ac>
     364:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 248 <root+0x14>
     368:	00000c3c 	andeq	r0, r0, ip, lsr ip
     36c:	0b011312 	bleq	44fbc <__ccfg+0x25014>
     370:	3b0b3a0b 	blcc	2ceba4 <__ccfg+0x2aebfc>
     374:	010b3905 	tsteq	fp, r5, lsl #18
     378:	13000013 	movwne	r0, #19
     37c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     384:	13490b39 	movtne	r0, #39737	; 0x9b39
     388:	00000b38 	andeq	r0, r0, r8, lsr fp
     38c:	03011314 	movweq	r1, #4884	; 0x1314
     390:	3a0b0b0e 	bcc	2c2fd0 <__ccfg+0x2a3028>
     394:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     398:	0013010b 	andseq	r0, r3, fp, lsl #2
     39c:	00211500 	eoreq	r1, r1, r0, lsl #10
     3a0:	0b2f1349 	bleq	bc50cc <__ccfg+0xba5124>
static void devinit_uart (int devnum) {
     3a4:	34160000 	ldrcc	r0, [r6], #-0
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	3a0e0300 	bcc	380fb0 <__ccfg+0x361008>
     3ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void udelay (volatile word n) {
     3b0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3b4:	00341700 	eorseq	r1, r4, r0, lsl #14
	while (n) {
     3b8:	0b3a0e03 	bleq	e83bcc <__ccfg+0xe63c24>
     3bc:	0b390b3b 	bleq	e430b0 <__ccfg+0xe23108>
}
     3c0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2a4 <root+0x70>
	while (n--);
     3c4:	00000a02 	andeq	r0, r0, r2, lsl #20
     3c8:	03003418 	movweq	r3, #1048	; 0x418
     3cc:	3b0b3a0e 	blcc	2cec0c <__ccfg+0x2aec64>
		n--;
     3d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     3d4:	000a0213 	andeq	r0, sl, r3, lsl r2
     3d8:	00341900 	eorseq	r1, r4, r0, lsl #18
void mdelay (volatile word n) {
     3dc:	0b3a1347 	bleq	e85100 <__ccfg+0xe65158>
     3e0:	0b39053b 	bleq	e418d4 <__ccfg+0xe2192c>
	while (n) {
     3e4:	00000a02 	andeq	r0, r0, r2, lsl #20
     3e8:	3f012e1a 	svccc	0x00012e1a
}
     3ec:	3a0e030c 	bcc	381024 <__ccfg+0x36107c>
		udelay (999);
     3f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		n--;
     3f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3fc:	010a4001 	tsteq	sl, r1
     400:	1b000013 	blne	454 <__pi_syserror+0x10>
     404:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
void __pi_ondomain (lword d) {
     408:	00001301 	andeq	r1, r0, r1, lsl #6
     40c:	0300341c 	movweq	r3, #1052	; 0x41c
		if (__pi_systat.effpdm > 1)
     410:	3b0b3a08 	blcc	2cec38 <__ccfg+0x2aec90>
     414:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			__pi_systat.effpdm = 1;
     418:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
	PRCMPowerDomainOn (d);
     41c:	1331001d 	teqne	r1, #29
     420:	01120111 	tsteq	r2, r1, lsl r1
     424:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	00000b57 	andeq	r0, r0, r7, asr fp
     42c:	3f012e1e 	svccc	0x00012e1e
     430:	3a0e030c 	bcc	381068 <__ccfg+0x3610c0>
	__pi_systat.ondmns |= d;
     434:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     438:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
}
     43c:	010a4001 	tsteq	sl, r1
     440:	1f000013 	svcne	0x00000013
void __pi_syserror (word ec, const char *m) {
     444:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	diag ("SYSERR: %x, %s", ec, m);
     448:	0b3b0b3a 	bleq	ec3138 <__ccfg+0xea3190>
     44c:	00000b39 	andeq	r0, r0, r9, lsr fp
  __ASM volatile ("cpsid i" : : : "memory");
     450:	31011d20 	tstcc	r1, r0, lsr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     458:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     45c:	010b5705 	tsteq	fp, r5, lsl #14
		all_leds_blink;
     460:	21000013 	tstcs	r0, r3, lsl r0
     464:	13310005 	teqne	r1, #5
     468:	1d220000 	stcne	0, cr0, [r2, #-0]
     46c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     474:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     478:	0013010b 	andseq	r0, r3, fp, lsl #2
     47c:	010b2300 	mrseq	r2, (UNDEF: 59)
     480:	00000655 	andeq	r0, r0, r5, asr r6
     484:	31000a24 	tstcc	r0, r4, lsr #20
	while (1) {
     488:	00011113 	andeq	r1, r1, r3, lsl r1
     48c:	001d2500 	andseq	r2, sp, r0, lsl #10
     490:	01521331 	cmpeq	r2, r1, lsr r3
     494:	0b580655 	bleq	1601df0 <__ccfg+0x15e1e48>
void tci_run_delay_timer () {
     498:	0b570559 	bleq	15c1a04 <__ccfg+0x15a1a5c>
	setdel = __pi_mintk - __pi_old;
     49c:	1d260000 	stcne	0, cr0, [r6, #-0]
     4a0:	11133101 	tstne	r3, r1, lsl #2
     4a4:	58011201 	stmdapl	r1, {r0, r9, ip}
     4a8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4ac:	0013010b 	andseq	r0, r3, fp, lsl #2
     4b0:	011d2700 	tsteq	sp, r0, lsl #14
     4b4:	01111331 	tsteq	r1, r1, lsr r3
     4b8:	0b580112 	bleq	1600908 <__ccfg+0x15e0960>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	0b570559 	bleq	15c1a28 <__ccfg+0x15a1a80>
	sti_tim;
     4c0:	1d280000 	stcne	0, cr0, [r8, #-0]
}
     4c4:	11133100 	tstne	r3, r0, lsl #2
     4c8:	58011201 	stmdapl	r1, {r0, r9, ip}
     4cc:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     4d0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     4d4:	08030034 	stmdaeq	r3, {r2, r4, r5}
	cli_aux;
     4d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4dc:	13490b39 	movtne	r0, #39737	; 0x9b39
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	00000602 	andeq	r0, r0, r2, lsl #12
     4e4:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     4e8:	3b0b3a0e 	blcc	2ced28 <__ccfg+0x2aed80>
     4ec:	200b3905 	andcs	r3, fp, r5, lsl #18
	sti_aux;
     4f0:	0013010b 	andseq	r0, r3, fp, lsl #2
}
     4f4:	000a2b00 	andeq	r2, sl, r0, lsl #22
     4f8:	0b3a0e03 	bleq	e83d0c <__ccfg+0xe63d64>
     4fc:	0b39053b 	bleq	e419f0 <__ccfg+0xe21a48>
void AONRTCIntHandler () {
     500:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	030c3f01 	movweq	r3, #52993	; 0xcf01
     508:	3b0b3a0e 	blcc	2ced48 <__ccfg+0x2aeda0>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (__pi_utims [0] == 0)
     510:	1201110c 	andne	r1, r1, #12, 2
     514:	010a4001 	tsteq	sl, r1
		if (*(__pi_utims [0])) {
     518:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     51c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			(*(__pi_utims [0]))--;
     520:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (__pi_utims [1] == 0)
     524:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (*(__pi_utims [1])) {
     528:	00000602 	andeq	r0, r0, r2, lsl #12
			aux_timer_inactive = 0;
     52c:	11010b2e 	tstne	r1, lr, lsr #22
			(*(__pi_utims [1]))--;
     530:	01011201 	tsteq	r1, r1, lsl #4
		if (__pi_utims [2] == 0)
     534:	2f000013 	svccs	0x00000013
		if (*(__pi_utims [2])) {
     538:	13310034 	teqne	r1, #52	; 0x34
			(*(__pi_utims [2]))--;
     53c:	0b300000 	bleq	c00544 <__ccfg+0xbe059c>
		if (__pi_utims [3] != 0) {
     540:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
			if (*(__pi_utims [3])) {
     544:	31000006 	tstcc	r0, r6
				aux_timer_inactive = 0;
     548:	13310034 	teqne	r1, #52	; 0x34
				(*(__pi_utims [3]))--;
     54c:	00000602 	andeq	r0, r0, r2, lsl #12
	if (__pi_systat.ledsts) {
     550:	31011d32 	tstcc	r1, r2, lsr sp
     554:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		if (__pi_systat.ledblc++ == 0) {
     558:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     55c:	000b570b 	andeq	r5, fp, fp, lsl #14
			if (__pi_systat.ledblk) {
     560:	011d3300 	tsteq	sp, r0, lsl #6
     564:	01521331 	cmpeq	r2, r1, lsr r3
     568:	0b580655 	bleq	1601ec4 <__ccfg+0x15e1f1c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	0b570559 	bleq	15c1ad8 <__ccfg+0x15a1b30>
     570:	05340000 	ldreq	r0, [r4, #-0]!
				if (__pi_systat.ledsts & 0x2)
     574:	3a080300 	bcc	20117c <__ccfg+0x1e11d4>
     578:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     57c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				if (__pi_systat.ledsts & 0x4)
     580:	3500000a 	strcc	r0, [r0, #-10]
				__pi_systat.ledblk = 0;
     584:	13310005 	teqne	r1, #5
     588:	00000602 	andeq	r0, r0, r2, lsl #12
			if (__pi_systat.fstblk)
     58c:	03003436 	movweq	r3, #1078	; 0x436
     590:	3b0b3a08 	blcc	2cedb8 <__ccfg+0x2aee10>
				__pi_systat.ledblc = 200;
     594:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	00060213 	andeq	r0, r6, r3, lsl r2
		cli_tim;
     59c:	010b3700 	tsteq	fp, r0, lsl #14
		__pi_new += setdel;
     5a0:	01120111 	tsteq	r2, r1, lsl r1
     5a4:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
		setdel = 0;
     5a8:	3a0e0300 	bcc	3811b0 <__ccfg+0x361208>
		RISE_N_SHINE;
     5ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		__pi_new += setdel;
     5b0:	000b200b 	andeq	r2, fp, fp
		RISE_N_SHINE;
     5b4:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     5b8:	0b3a0e03 	bleq	e83dcc <__ccfg+0xe63e24>
		aux_timer_inactive = 1;
     5bc:	0b39053b 	bleq	e41ab0 <__ccfg+0xe21b08>
     5c0:	01110c27 	tsteq	r1, r7, lsr #24
				if (__pi_systat.ledsts & 0x1)
     5c4:	0a400112 	beq	1000a14 <__ccfg+0xfe0a6c>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	00001301 	andeq	r1, r0, r1, lsl #6
     5cc:	03012e3a 	movweq	r2, #7738	; 0x1e3a
				if (__pi_systat.ledsts & 0x2)
     5d0:	3b0b3a0e 	blcc	2cee10 <__ccfg+0x2aee68>
     5d4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     5d8:	1113490c 	tstne	r3, ip, lsl #18
				if (__pi_systat.ledsts & 0x8)
     5dc:	40011201 	andmi	r1, r1, r1, lsl #4
				__pi_systat.ledblk = 1;
     5e0:	0013010a 	andseq	r0, r3, sl, lsl #2
     5e4:	00053b00 	andeq	r3, r5, r0, lsl #22
		if (aux_timer_inactive) {
     5e8:	0b3a0803 	bleq	e825fc <__ccfg+0xe62654>
			cli_aux;
     5ec:	0b39053b 	bleq	e41ae0 <__ccfg+0xe21b38>
     5f0:	06021349 	streq	r1, [r2], -r9, asr #6
     5f4:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
     5f8:	3a0e0301 	bcc	381204 <__ccfg+0x36125c>
     5fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     600:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     604:	010a4001 	tsteq	sl, r1
     608:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     60c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 55c <AONRTCIntHandler+0x5c>
     610:	0b3a0e03 	bleq	e83e24 <__ccfg+0xe63e7c>
word tci_update_delay_ticks (Boolean force) {
     614:	0b39053b 	bleq	e41b08 <__ccfg+0xe21b60>
	cli_tim;
     618:	13490c27 	movtne	r0, #39975	; 0x9c27
     61c:	13010b20 	movwne	r0, #6944	; 0x1b20
	if (setdel) {
     620:	053e0000 	ldreq	r0, [lr, #-0]!
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	3a080300 	bcc	20122c <__ccfg+0x1e1284>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     62c:	0013490b 	andseq	r4, r3, fp, lsl #18
     630:	000a3f00 	andeq	r3, sl, r0, lsl #30
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     634:	0b3a0803 	bleq	e82648 <__ccfg+0xe626a0>
				AON_RTC_O_CH0CMP)) - gettav ());
     638:	0b39053b 	bleq	e41b2c <__ccfg+0xe21b84>
	return NO;
     63c:	34400000 	strbcc	r0, [r0], #-0
			setdel = 0;
     640:	3a0e0300 	bcc	381248 <__ccfg+0x3612a0>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     648:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     64c:	41000006 	tstmi	r0, r6
		sti_tim;
     650:	0803000a 	stmdaeq	r3, {r1, r3}
		return YES;
     654:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     658:	01110b39 	tsteq	r1, r9, lsr fp
     65c:	1d420000 	stclne	0, cr0, [r2, #-0]
     660:	11133101 	tstne	r3, r1, lsl #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	58011201 	stmdapl	r1, {r0, r9, ip}
	UARTDisable (UART0_BASE);
     668:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     66c:	0013010b 	andseq	r0, r3, fp, lsl #2
	UARTDisable (UART0_BASE);
     670:	011d4300 	tsteq	sp, r0, lsl #6
	UARTConfigSetExpClk (UART0_BASE,
     674:	01111331 	tsteq	r1, r1, lsr r3
     678:	0b580112 	bleq	1600ac8 <__ccfg+0x15e0b20>
     67c:	0b570b59 	bleq	15c33e8 <__ccfg+0x15a3440>
     680:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	3a0e0301 	bcc	381290 <__ccfg+0x3612e8>
     688:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     68c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	010b2013 	tsteq	fp, r3, lsl r0
     694:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
     698:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	urates [0] = rate;
     69c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     6a0:	13490b39 	movtne	r0, #39737	; 0x9b39
     6a4:	00000b20 	andeq	r0, r0, r0, lsr #22
     6a8:	03012e46 	movweq	r2, #7750	; 0x1e46
     6ac:	3b0b3a0e 	blcc	2ceeec <__ccfg+0x2aef44>
     6b0:	200b390b 	andcs	r3, fp, fp, lsl #18
     6b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	00344700 	eorseq	r4, r4, r0, lsl #14
     6bc:	0b3a0803 	bleq	e826d0 <__ccfg+0xe62728>
     6c0:	0b390b3b 	bleq	e433b4 <__ccfg+0xe2340c>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	00001349 	andeq	r1, r0, r9, asr #6
     6c8:	00010b48 	andeq	r0, r1, r8, asr #22
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
     6d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	0b3b0b3a 	bleq	ec33c4 <__ccfg+0xea341c>
     6d8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     6dc:	01120111 	tsteq	r2, r1, lsl r1
     6e0:	13010a40 	movwne	r0, #6720	; 0x1a40
     6e4:	054a0000 	strbeq	r0, [sl, #-0]
     6e8:	3a080300 	bcc	2012f0 <__ccfg+0x1e1348>
     6ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	switch (operation) {
     6f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	4b000006 	blmi	714 <ioreq_uart_a+0x24>
     6f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6fc:	0b3b0b3a 	bleq	ec33ec <__ccfg+0xea3444>
     700:	13490b39 	movtne	r0, #39737	; 0x9b39
     704:	00000a02 	andeq	r0, r0, r2, lsl #20
				*buf++ = uart_a_read;
     708:	03000a4c 	movweq	r0, #2636	; 0xa4c
     70c:	3b0b3a0e 	blcc	2cef4c <__ccfg+0x2aefa4>
			while (len && uart_a_char_available) {
     710:	110b390b 	tstne	fp, fp, lsl #18
     714:	4d000001 	stcmi	0, cr0, [r0, #-4]
     718:	1331001d 	teqne	r1, #29
			if (len != operation) {
     71c:	06550152 			; <UNDEFINED> instruction: 0x06550152
}
     720:	0b590b58 	bleq	1643488 <__ccfg+0x16234e0>
     724:	00000b57 	andeq	r0, r0, r7, asr fp
			uart_a_disable_int;
     728:	3f002e4e 	svccc	0x00002e4e
			if (uart_a_char_available) {
     72c:	3a0e030c 	bcc	381364 <__ccfg+0x3613bc>
				*buf++ = uart_a_read;
     730:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			uart_a_disable_int;
     734:	110c270b 	tstne	ip, fp, lsl #14
     738:	40011201 	andmi	r1, r1, r1, lsl #4
			if (uart_a_char_available) {
     73c:	4f00000a 	svcmi	0x0000000a
     740:	08030005 	stmdaeq	r3, {r0, r2}
				uart_a_enable_int;
     744:	0b3b0b3a 	bleq	ec3434 <__ccfg+0xea348c>
     748:	13490b39 	movtne	r0, #39737	; 0x9b39
				goto Redo_rx;
     74c:	00000a02 	andeq	r0, r0, r2, lsl #20
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	03012e50 	movweq	r2, #7760	; 0x1e50
     754:	3b0b3a0e 	blcc	2cef94 <__ccfg+0x2aefec>
			return -2;
     758:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     75c:	010b200c 	tsteq	fp, ip
				uart_a_write (*buf);
     760:	51000013 	tstpl	r0, r3, lsl r0
     764:	08030005 	stmdaeq	r3, {r0, r2}
			while (len && uart_a_room_in_tx) {
     768:	0b3b0b3a 	bleq	ec3458 <__ccfg+0xea34b0>
     76c:	13490b39 	movtne	r0, #39737	; 0x9b39
     770:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
			if (len != operation) {
     774:	3a0e0301 	bcc	381380 <__ccfg+0x3613d8>
			uart_a_disable_int;
     778:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     77c:	200c270b 	andcs	r2, ip, fp, lsl #14
			if (uart_a_room_in_tx) {
     780:	0013010b 	andseq	r0, r3, fp, lsl #2
     784:	00055300 	andeq	r5, r5, r0, lsl #6
				uart_a_enable_int;
     788:	0b3a0e03 	bleq	e83f9c <__ccfg+0xe63ff4>
     78c:	0b39053b 	bleq	e41c80 <__ccfg+0xe21cd8>
				*buf++ = uart_a_read;
     790:	00001349 	andeq	r1, r0, r9, asr #6
			if (uart_a_room_in_tx) {
     794:	03002e54 	movweq	r2, #3668	; 0xe54
				uart_a_write (*buf);
     798:	3b0b3a0e 	blcc	2cefd8 <__ccfg+0x2af030>
     79c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7a0:	000b200c 	andeq	r2, fp, ip
     7a4:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
			uart_a_enable_int;
     7a8:	0b3a0e03 	bleq	e83fbc <__ccfg+0xe64014>
     7ac:	0b390b3b 	bleq	e434a0 <__ccfg+0xe234f8>
     7b0:	13490c27 	movtne	r0, #39975	; 0x9c27
			return 0;
     7b4:	13010b20 	movwne	r0, #6944	; 0x1b20
			if (len == UART_CNTRL_SETRATE) {
     7b8:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	3a0e0300 	bcc	3813c4 <__ccfg+0x36141c>
     7c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7c4:	200c270b 	andcs	r2, ip, fp, lsl #14
				syserror (EREQPAR, "uar");
     7c8:	5700000b 	strpl	r0, [r0, -fp]
			syserror (ENOOPER, "uai");
     7cc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
			if (len == UART_CNTRL_GETRATE) {
     7d0:	0b3b0b3a 	bleq	ec34c0 <__ccfg+0xea3518>
				return 1;
     7d4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	0b201349 	bleq	805504 <__ccfg+0x7e555c>
			syserror (ENOOPER, "uai");
     7dc:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
     7e0:	3a0e0300 	bcc	3813e8 <__ccfg+0x361440>
     7e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7e8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     7ec:	000b2013 	andeq	r2, fp, r3, lsl r0
     7f0:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
     7f4:	01111331 	tsteq	r1, r1, lsr r3
     7f8:	0a400112 	beq	1000c48 <__ccfg+0xfe0ca0>
     7fc:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
void UART0IntHandler () {
     804:	0e030b13 	vmoveq.32	d3[0], r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     80c:	06100111 			; <UNDEFINED> instruction: 0x06100111
     810:	24020000 	strcs	r0, [r2], #-0
     814:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     818:	000e030b 	andeq	r0, lr, fp, lsl #6
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	00160300 	andseq	r0, r6, r0, lsl #6
     820:	0b3a0e03 	bleq	e84034 <__ccfg+0xe6408c>
		RISE_N_SHINE;
     824:	0b390b3b 	bleq	e43518 <__ccfg+0xe23570>
     828:	00001349 	andeq	r1, r0, r9, asr #6
		i_trigger (devevent (UART_A, READ));
     82c:	0b002404 	bleq	9844 <__exidx_end+0x6ab8>
     830:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     834:	05000008 	streq	r0, [r0, #-8]
     838:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     83c:	0b3a0b0b 	bleq	e83470 <__ccfg+0xe634c8>
     840:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     844:	0d060000 	stceq	0, cr0, [r6, #-0]
     848:	490e0300 	stmdbmi	lr, {r8, r9}
     84c:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     850:	0700000c 	streq	r0, [r0, -ip]
     854:	0b0b000f 	bleq	2c0898 <__ccfg+0x2a08f0>
     858:	26080000 	strcs	r0, [r8], -r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	00134900 	andseq	r4, r3, r0, lsl #18
     860:	00350900 	eorseq	r0, r5, r0, lsl #18
     864:	00001349 	andeq	r1, r0, r9, asr #6
		i_trigger (devevent (UART_A, WRITE));
     868:	0b000f0a 	bleq	4498 <__exidx_end+0x170c>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	0013490b 	andseq	r4, r3, fp, lsl #18
     870:	01130b00 	tsteq	r3, r0, lsl #22
		RISE_N_SHINE;
     874:	0b3a0b0b 	bleq	e834a8 <__ccfg+0xe63500>
     878:	0b390b3b 	bleq	e4356c <__ccfg+0xe235c4>
     87c:	00001301 	andeq	r1, r0, r1, lsl #6
		i_trigger (devevent (UART_A, WRITE));
     880:	03000d0c 	movweq	r0, #3340	; 0xd0c
     884:	3b0b3a0e 	blcc	2cf0c4 <__ccfg+0x2af11c>
     888:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     88c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     890:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     894:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     898:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     89c:	0b3b0b3a 	bleq	ec358c <__ccfg+0xea35e4>
     8a0:	13490b39 	movtne	r0, #39737	; 0x9b39
     8a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     8a8:	0300340e 	movweq	r3, #1038	; 0x40e
}
     8ac:	3b0b3a0e 	blcc	2cf0ec <__ccfg+0x2af144>
     8b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8b4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     8b8:	0f00000c 	svceq	0x0000000c
     8bc:	13490101 	movtne	r0, #37121	; 0x9101
void __buttons_setirq (int val) {
     8c0:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	00002110 	andeq	r2, r0, r0, lsl r1
     8c8:	00161100 	andseq	r1, r6, r0, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	0b3a0e03 	bleq	e840e0 <__ccfg+0xe64138>
     8d0:	0b39053b 	bleq	e41dc4 <__ccfg+0xe21e1c>
     8d4:	00001349 	andeq	r1, r0, r9, asr #6
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	27011512 	smladcs	r1, r2, r5, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	0013010c 	andseq	r0, r3, ip, lsl #2
     8e0:	00051300 	andeq	r1, r5, r0, lsl #6
     8e4:	00001349 	andeq	r1, r0, r9, asr #6
     8e8:	03003414 	movweq	r3, #1044	; 0x414
     8ec:	3b0b3a0e 	blcc	2cf12c <__ccfg+0x2af184>
     8f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     8f4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     8f8:	1500000c 	strne	r0, [r0, #-12]
     8fc:	0b0b0113 	bleq	2c0d50 <__ccfg+0x2a0da8>
     900:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pinlist_setirq (int val) {
     904:	13010b39 	movwne	r0, #6969	; 0x1b39
	for (i = 0; i < N_PINLIST; i++) {
     908:	0d160000 	ldceq	0, cr0, [r6, #-0]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	3a0e0300 	bcc	381514 <__ccfg+0x36156c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (i = 0; i < N_PINLIST; i++) {
     914:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	1700000b 	strne	r0, [r0, -fp]
     91c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     920:	0b3a0b0b 	bleq	e83554 <__ccfg+0xe635ac>
     924:	0b39053b 	bleq	e41e18 <__ccfg+0xe21e70>
     928:	00001301 	andeq	r1, r0, r1, lsl #6
	for (i = 0; i < N_PINLIST; i++) {
     92c:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
}
     930:	000b2f13 	andeq	r2, fp, r3, lsl pc
     934:	01151900 	tsteq	r5, r0, lsl #18
     938:	13490c27 	movtne	r0, #39975	; 0x9c27
     93c:	00001301 	andeq	r1, r0, r1, lsl #6
void GPIOIntHandler () {
     940:	4700341a 	smladmi	r0, sl, r4, r3
if (buttons_int) {
     944:	3b0b3a13 	blcc	2cf198 <__ccfg+0x2af1f0>
     948:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
	buttons_disable ();
     94c:	1b00000a 	blne	97c <GPIOIntHandler+0x3c>
     950:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	i_trigger ((aword)&__button_list);
     954:	0b3b0b3a 	bleq	ec3644 <__ccfg+0xea369c>
     958:	13490b39 	movtne	r0, #39737	; 0x9b39
     95c:	0a020c3f 	beq	83a60 <__ccfg+0x63ab8>
     960:	341c0000 	ldrcc	r0, [ip], #-0
     964:	3a0e0300 	bcc	38156c <__ccfg+0x3615c4>
     968:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     96c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     970:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
     974:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     978:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     97c:	13490b39 	movtne	r0, #39737	; 0x9b39
	RISE_N_SHINE;
     980:	00000a02 	andeq	r0, r0, r2, lsl #20
     984:	3f002e1e 	svccc	0x00002e1e
     988:	3a0e030c 	bcc	3815c0 <__ccfg+0x361618>
if (pin_sensor_int) {
     98c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     990:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	i_trigger ((aword)(&__input_pins));
     994:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     998:	000a4001 	andeq	r4, sl, r1
     99c:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     9a0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     9a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9a8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     9ac:	01120111 	tsteq	r2, r1, lsl r1
     9b0:	13010a40 	movwne	r0, #6720	; 0x1a40
     9b4:	05200000 	streq	r0, [r0, #-0]!
     9b8:	3a0e0300 	bcc	3815c0 <__ccfg+0x361618>
     9bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pinsen_disable_and_clear;
     9c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	RISE_N_SHINE;
     9c4:	21000006 	tstcs	r0, r6
     9c8:	00000018 	andeq	r0, r0, r8, lsl r0
     9cc:	03003422 	movweq	r3, #1058	; 0x422
}
     9d0:	3b0b3a08 	blcc	2cf1f8 <__ccfg+0x2af250>
     9d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     9d8:	00060213 	andeq	r0, r6, r3, lsl r2
     9dc:	00342300 	eorseq	r2, r4, r0, lsl #6
     9e0:	0b3a0803 	bleq	e829f4 <__ccfg+0xe62a4c>
void system_init () {
     9e4:	0b39053b 	bleq	e41ed8 <__ccfg+0xe21f30>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	0a021349 	beq	85714 <__ccfg+0x6576c>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ec:	34240000 	strtcc	r0, [r4], #-0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	3a080300 	bcc	2015f8 <__ccfg+0x1e1650>
     9f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f8:	0013490b 	andseq	r4, r3, fp, lsl #18
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	000a2500 	andeq	r2, sl, r0, lsl #10
     a00:	0b3a0e03 	bleq	e84214 <__ccfg+0xe6426c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	0b39053b 	bleq	e41ef8 <__ccfg+0xe21f50>
     a08:	00000111 	andeq	r0, r0, r1, lsl r1
     a0c:	11010b26 	tstne	r1, r6, lsr #22
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	01011201 	tsteq	r1, r1, lsl #4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a14:	27000013 	smladcs	r0, r3, r0, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a18:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a20:	31011d28 	tstcc	r1, r8, lsr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a24:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	000b5705 	andeq	r5, fp, r5, lsl #14
		pin = (port_confs [i] >> 19) & 0x1f;
     a30:	00052900 	andeq	r2, r5, r0, lsl #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a34:	00001331 	andeq	r1, r0, r1, lsr r3
     a38:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     a3c:	3b0b3a0e 	blcc	2cf27c <__ccfg+0x2af2d4>
     a40:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (port_confs [i] & 0x80)
     a44:	1201110c 	andne	r1, r1, #12, 2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	010a4001 	tsteq	sl, r1
     a4c:	2b000013 	blcs	aa0 <system_init+0xbc>
		if (port_confs [i] & 0x40)
     a50:	08030005 	stmdaeq	r3, {r0, r2}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a58:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5c:	00000602 	andeq	r0, r0, r2, lsl #12
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	3f012e2c 	svccc	0x00012e2c
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a64:	3a0e030c 	bcc	38169c <__ccfg+0x3616f4>
	all_leds_blink;
     a68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a6c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     a70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a74:	010a4001 	tsteq	sl, r1
     a78:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     a7c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a84:	13490b39 	movtne	r0, #39737	; 0x9b39
     a88:	00000602 	andeq	r0, r0, r2, lsl #12
     a8c:	3f012e2e 	svccc	0x00012e2e
     a90:	3a0e030c 	bcc	3816c8 <__ccfg+0x361720>
     a94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	200c270b 	andcs	r2, ip, fp, lsl #14
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	0013010b 	andseq	r0, r3, fp, lsl #2
     aa0:	00052f00 	andeq	r2, r5, r0, lsl #30
	IntEnable (INT_AON_RTC_COMB);
     aa4:	0b3a0803 	bleq	e82ab8 <__ccfg+0xe62b10>
     aa8:	0b39053b 	bleq	e41f9c <__ccfg+0xe21ff4>
     aac:	00001349 	andeq	r1, r0, r9, asr #6
	__pi_malloc_init ();
     ab0:	3f012e30 	svccc	0x00012e30
	IntEnable (INT_AON_GPIO_EDGE);
     ab4:	3a0e030c 	bcc	3816ec <__ccfg+0x361744>
     ab8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	010a4001 	tsteq	sl, r1
     ac4:	31000013 	tstcc	r0, r3, lsl r0
     ac8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; a18 <system_init+0x34>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     acc:	0b3a0803 	bleq	e82ae0 <__ccfg+0xe62b38>
     ad0:	0b39053b 	bleq	e41fc4 <__ccfg+0xe2201c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	13490c27 	movtne	r0, #39975	; 0x9c27
     ad8:	01120111 	tsteq	r2, r1, lsl r1
     adc:	13010a40 	movwne	r0, #6720	; 0x1a40
	urates [0] = UART_RATE / 100;
     ae0:	05320000 	ldreq	r0, [r2, #-0]!
     ae4:	3a080300 	bcc	2016ec <__ccfg+0x1e1744>
	reinit_uart ();
     ae8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	EXTRA_INITIALIZERS;
     aec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     af0:	3300000a 	movwcc	r0, #10
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af4:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; a44 <system_init+0x60>
     af8:	0b3a0e03 	bleq	e8430c <__ccfg+0xe64364>
     afc:	0b39053b 	bleq	e41ff0 <__ccfg+0xe22048>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b00:	01110c27 	tsteq	r1, r7, lsr #24
     b04:	0a400112 	beq	1000f54 <__ccfg+0xfe0fac>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b08:	05340000 	ldreq	r0, [r4, #-0]!
     b0c:	3a0e0300 	bcc	381714 <__ccfg+0x36176c>
			devinit [i] . init (devinit [i] . param);
     b10:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b18:	3500000a 	strcc	r0, [r0, #-10]
     b1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	IntEnable (INT_UART0_COMB);
     b20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b24:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     b28:	0b360000 	bleq	d80b30 <__ccfg+0xd60b88>
	tci_run_auxiliary_timer ();
     b2c:	00065501 	andeq	r5, r6, r1, lsl #10
		diag ("");
     b30:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
     b34:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	0b3b0b3a 	bleq	ec3828 <__ccfg+0xea3880>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		diag ("Leftover RAM: %d bytes",
     b40:	13010b20 	movwne	r0, #6944	; 0x1b20
     b44:	05380000 	ldreq	r0, [r8, #-0]!
     b48:	3a080300 	bcc	201750 <__ccfg+0x1e17a8>
     b4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b50:	0013490b 	andseq	r4, r3, fp, lsl #18
     b54:	00053900 	andeq	r3, r5, r0, lsl #18
     b58:	0b3a0e03 	bleq	e8436c <__ccfg+0xe643c4>
     b5c:	0b390b3b 	bleq	e43850 <__ccfg+0xe238a8>
     b60:	00001349 	andeq	r1, r0, r9, asr #6
     b64:	0300343a 	movweq	r3, #1082	; 0x43a
     b68:	3b0b3a08 	blcc	2cf390 <__ccfg+0x2af3e8>
     b6c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b70:	3b000013 	blcc	bc4 <__pi_release+0x28>
     b74:	0803000a 	stmdaeq	r3, {r1, r3}
     b78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b7c:	00000b39 	andeq	r0, r0, r9, lsr fp
     b80:	3f012e3c 	svccc	0x00012e3c
     b84:	3a0e030c 	bcc	3817bc <__ccfg+0x361814>
     b88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b8c:	110c270b 	tstne	ip, fp, lsl #14
     b90:	40011201 	andmi	r1, r1, r1, lsl #4
     b94:	0013010a 	andseq	r0, r3, sl, lsl #2
     b98:	00053d00 	andeq	r3, r5, r0, lsl #26
__attribute__ ((noreturn)) void __pi_release () {
     b9c:	0b3a0803 	bleq	e82bb0 <__ccfg+0xe62c08>
     ba0:	0b390b3b 	bleq	e43894 <__ccfg+0xe238ec>
     ba4:	06021349 	streq	r1, [r2], -r9, asr #6
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba8:	343e0000 	ldrtcc	r0, [lr], #-0
	check_stack_overflow;
     bac:	3a080300 	bcc	2017b4 <__ccfg+0x1e180c>
     bb0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	update_n_wake (MAX_WORD, NO);
     bb8:	3f000006 	svccc	0x00000006
     bbc:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; b0c <system_init+0x128>
     bc0:	0b3a0e03 	bleq	e843d4 <__ccfg+0xe6442c>
	for_all_tasks (__pi_curr) {
     bc4:	0b390b3b 	bleq	e438b8 <__ccfg+0xe23910>
     bc8:	01110c27 	tsteq	r1, r7, lsr #24
     bcc:	0a400112 	beq	100101c <__ccfg+0xfe1074>
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
	__SLEEP;
     bd4:	3a0e0301 	bcc	3817e0 <__ccfg+0x361838>
     bd8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bdc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     be0:	010b2013 	tsteq	fp, r3, lsl r0
	system_event_count ++;
     be4:	41000013 	tstmi	r0, r3, lsl r0
     be8:	0e03012e 	adfeqsp	f0, f3, #0.5
	switch (__pi_systat.effpdm) {
     bec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bf0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     bf4:	0b201349 	bleq	805920 <__ccfg+0x7e5978>
     bf8:	00001301 	andeq	r1, r0, r1, lsl #6
			__WFI ();
     bfc:	31012e42 	tstcc	r1, r2, asr #28
     c00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c04:	010a4001 	tsteq	sl, r1
	check_stack_overflow;
     c08:	43000013 	movwmi	r0, #19
     c0c:	13310005 	teqne	r1, #5
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c10:	00000602 	andeq	r0, r0, r2, lsl #12
     c14:	31003444 	tstcc	r0, r4, asr #8
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	00060213 	andeq	r0, r6, r3, lsl r2
			goto Redo;
     c1c:	011d4500 	tsteq	sp, r0, lsl #10
	for_all_tasks (__pi_curr) {
     c20:	01111331 	tsteq	r1, r1, lsr r3
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	0b580112 	bleq	1601074 <__ccfg+0x15e10cc>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c28:	0b570b59 	bleq	15c3994 <__ccfg+0x15a39ec>
     c2c:	34460000 	strbcc	r0, [r6], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	00133100 	andseq	r3, r3, r0, lsl #2
     c34:	011d4700 	tsteq	sp, r0, lsl #14
     c38:	01521331 	cmpeq	r2, r1, lsr r3
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3c:	0b580655 	bleq	1602598 <__ccfg+0x15e25f0>
     c40:	0b570b59 	bleq	15c39ac <__ccfg+0x15a3a04>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	0a480000 	beq	1200c4c <__ccfg+0x11e0ca4>
     c48:	11133100 	tstne	r3, r0, lsl #2
			__WFI ();
     c4c:	49000001 	stmdbmi	r0, {r0}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c50:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c54:	01120111 	tsteq	r2, r1, lsl r1
}
     c58:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5c:	00000b57 	andeq	r0, r0, r7, asr fp
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	31012e4a 	tstcc	r1, sl, asr #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c68:	000a4001 	andeq	r4, sl, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6c:	11010000 	mrsne	r0, (UNDEF: 1)
     c70:	130e2501 	movwne	r2, #58625	; 0xe501
     c74:	1b0e030b 	blne	3818a8 <__ccfg+0x361900>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	1106550e 	tstne	r6, lr, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	00061001 	andeq	r1, r6, r1
     c80:	00240200 	eoreq	r0, r4, r0, lsl #4
     c84:	0b3e0b0b 	bleq	f838b8 <__ccfg+0xf63910>
     c88:	00000e03 	andeq	r0, r0, r3, lsl #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	03001603 	movweq	r1, #1539	; 0x603
     c90:	3b0b3a0e 	blcc	2cf4d0 <__ccfg+0x2af528>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     c9c:	0b0b0024 	bleq	2c0d34 <__ccfg+0x2a0d8c>
     ca0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     ca4:	13050000 	movwne	r0, #20480	; 0x5000
     ca8:	0b0e0301 	bleq	3818b4 <__ccfg+0x36190c>
			SysCtrlSetRechargeBeforePowerDown
     cac:	3b0b3a0b 	blcc	2cf4e0 <__ccfg+0x2af538>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cb0:	0013010b 	andseq	r0, r3, fp, lsl #2
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb4:	000d0600 	andeq	r0, sp, r0, lsl #12
     cb8:	13490e03 	movtne	r0, #40451	; 0x9e03
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     cc0:	0f070000 	svceq	0x00070000
     cc4:	000b0b00 	andeq	r0, fp, r0, lsl #22
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc8:	00260800 	eoreq	r0, r6, r0, lsl #16
     ccc:	00001349 	andeq	r1, r0, r9, asr #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	0a000013 	beq	d28 <__pi_release+0x18c>
     cd8:	0b0b000f 	bleq	2c0d1c <__ccfg+0x2a0d74>
     cdc:	00001349 	andeq	r1, r0, r9, asr #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ce0:	0b01130b 	bleq	45914 <__ccfg+0x2596c>
			while (!(AONWUCPowerStatusGet () &
     ce4:	3b0b3a0b 	blcc	2cf518 <__ccfg+0x2af570>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	010b390b 	tsteq	fp, fp, lsl #18
     cec:	0c000013 	stceq	0, cr0, [r0], {19}
     cf0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	0b3b0b3a 	bleq	ec39e4 <__ccfg+0xea3a3c>
     cf8:	13490b39 	movtne	r0, #39737	; 0x9b39
     cfc:	0b0d0b0b 	bleq	343930 <__ccfg+0x323988>
     d00:	0b380b0c 	bleq	e03938 <__ccfg+0xde3990>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     d08:	3a0e0300 	bcc	381910 <__ccfg+0x361968>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d10:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
			reinit_uart ();
     d18:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d1c:	0b3b0b3a 	bleq	ec3a0c <__ccfg+0xea3a64>
     d20:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     d24:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	010f0000 	mrseq	r0, CPSR
     d2c:	01134901 	tsteq	r3, r1, lsl #18
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	10000013 	andne	r0, r0, r3, lsl r0
     d34:	00000021 	andeq	r0, r0, r1, lsr #32
     d38:	03001611 	movweq	r1, #1553	; 0x611
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	3b0b3a0e 	blcc	2cf57c <__ccfg+0x2af5d4>
     d40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     d44:	12000013 	andne	r0, r0, #19
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d48:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     d58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d60:	13490b39 	movtne	r0, #39737	; 0x9b39
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d64:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     d68:	15150000 	ldrne	r0, [r5, #-0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d6c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     d70:	00130113 	andseq	r0, r3, r3, lsl r1
			PRCMPowerDomainOff (
     d74:	01131600 	tsteq	r3, r0, lsl #12
     d78:	0b0b0e03 	bleq	2c458c <__ccfg+0x2a45e4>
	__SLEEP;
     d7c:	0b3b0b3a 	bleq	ec3a6c <__ccfg+0xea3ac4>
     d80:	13010b39 	movwne	r0, #6969	; 0x1b39
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	17170000 	ldrne	r0, [r7, -r0]
	goto Redo;
     d88:	3a0b0b01 	bcc	2c3994 <__ccfg+0x2a39ec>
     d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d90:	0013010b 	andseq	r0, r3, fp, lsl #2
     d94:	000d1800 	andeq	r1, sp, r0, lsl #16
     d98:	0b3a0e03 	bleq	e845ac <__ccfg+0xe64604>
     d9c:	0b390b3b 	bleq	e43a90 <__ccfg+0xe23ae8>
     da0:	00001349 	andeq	r1, r0, r9, asr #6
     da4:	03000d19 	movweq	r0, #3353	; 0xd19
     da8:	3b0b3a08 	blcc	2cf5d0 <__ccfg+0x2af628>
     dac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     db0:	1a000013 	bne	e04 <main+0x10>
     db4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     db8:	0b3b0b3a 	bleq	ec3aa8 <__ccfg+0xea3b00>
     dbc:	13490b39 	movtne	r0, #39737	; 0x9b39
     dc0:	00000b38 	andeq	r0, r0, r8, lsr fp
     dc4:	0b01131b 	bleq	45a38 <__ccfg+0x25a90>
     dc8:	3b0b3a0b 	blcc	2cf5fc <__ccfg+0x2af654>
     dcc:	010b3905 	tsteq	fp, r5, lsl #18
     dd0:	1c000013 	stcne	0, cr0, [r0], {19}
     dd4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     dd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ddc:	13490b39 	movtne	r0, #39737	; 0x9b39
     de0:	00000b38 	andeq	r0, r0, r8, lsr fp
     de4:	0301131d 	movweq	r1, #4893	; 0x131d
     de8:	3a0b0b0e 	bcc	2c3a28 <__ccfg+0x2a3a80>
     dec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df0:	0013010b 	andseq	r0, r3, fp, lsl #2
int main (void) {
     df4:	00211e00 	eoreq	r1, r1, r0, lsl #28
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	0b2f1349 	bleq	bc5b24 <__ccfg+0xba5b7c>
     dfc:	341f0000 	ldrcc	r0, [pc], #-0	; e04 <main+0x10>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	3a0e0300 	bcc	381a08 <__ccfg+0x361a60>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	system_init ();
     e08:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	tcv_init ();
     e0c:	2000000a 	andcs	r0, r0, sl
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e10:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d60 <__pi_release+0x1c4>
     e14:	0b3a0e03 	bleq	e84628 <__ccfg+0xe64680>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	0b39053b 	bleq	e4230c <__ccfg+0xe22364>
     e1c:	01110c27 	tsteq	r1, r7, lsr #24
     e20:	0a400112 	beq	1001270 <__ccfg+0xfe12c8>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e24:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     e28:	030c3f01 	movweq	r3, #52993	; 0xcf01
	delay (16, 0);
     e2c:	3b0b3a0e 	blcc	2cf66c <__ccfg+0x2af6c4>
     e30:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     e34:	1113490c 	tstne	r3, ip, lsl #18
	__pi_release ();
     e38:	40011201 	andmi	r1, r1, r1, lsl #4
     e3c:	0013010a 	andseq	r0, r3, sl, lsl #2
     e40:	00052200 	andeq	r2, r5, r0, lsl #4
     e44:	0b3a0803 	bleq	e82e58 <__ccfg+0xe62eb0>
     e48:	0b39053b 	bleq	e4233c <__ccfg+0xe22394>
     e4c:	06021349 	streq	r1, [r2], -r9, asr #6
     e50:	1d230000 	stcne	0, cr0, [r3, #-0]
static void killev (__pi_pcb_t *pid) {
     e54:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	wfun = (aword)(pid->code);
     e58:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	for_all_tasks (i) {
     e5c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		for (j = 0; j < nevents (i); j++) {
     e60:	2400000b 	strcs	r0, [r0], #-11
     e64:	13310005 	teqne	r1, #5
     e68:	00000602 	andeq	r0, r0, r2, lsl #12
			    || i->Events [j] . Event == wfun
     e6c:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
		for (j = 0; j < nevents (i); j++) {
     e70:	26000006 	strcs	r0, [r0], -r6
			if (i->Events [j] . Event == (aword)pid
     e74:	13310034 	teqne	r1, #52	; 0x34
     e78:	00000602 	andeq	r0, r0, r2, lsl #12
     e7c:	3f012e27 	svccc	0x00012e27
				wakeupev (i, j);
     e80:	3a0e030c 	bcc	381ab8 <__ccfg+0x361b10>
     e84:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i) {
     e88:	110c270b 	tstne	ip, fp, lsl #14
}
     e8c:	40011201 	andmi	r1, r1, r1, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	0013010a 	andseq	r0, r3, sl, lsl #2
static void qfree (aword *ch) {
     e94:	00342800 	eorseq	r2, r4, r0, lsl #16
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	0b3a0803 	bleq	e82eac <__ccfg+0xe62f04>
	cc = (aword*)(mpools + MA_NP);
     e9c:	0b39053b 	bleq	e42390 <__ccfg+0xe223e8>
	m_setnextp (ch, chunk);
     ea0:	06021349 	streq	r1, [r2], -r9, asr #6
	m_setnextp (cc, ch);
     ea4:	34290000 	strtcc	r0, [r9], #-0
}
     ea8:	3a080300 	bcc	201ab0 <__ccfg+0x1e1b08>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     eb0:	0013490b 	andseq	r4, r3, fp, lsl #18
     eb4:	00342a00 	eorseq	r2, r4, r0, lsl #20
			m_setnextp (cc, m_nextp (chunk));
     eb8:	0b3a0803 	bleq	e82ecc <__ccfg+0xe62f24>
			m_size (chunk) += m_hdrlen + m_size (ch);
     ebc:	0b39053b 	bleq	e423b0 <__ccfg+0xe22408>
     ec0:	0a021349 	beq	85bec <__ccfg+0x65c44>
     ec4:	052b0000 	streq	r0, [fp, #-0]!
     ec8:	3a0e0300 	bcc	381ad0 <__ccfg+0x361b28>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ed4:	2c000006 	stccs	0, cr0, [r0], {6}
     ed8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; e28 <main+0x34>
			m_setnextp (cc, m_nextp (chunk));
     edc:	0b3a0e03 	bleq	e846f0 <__ccfg+0xe64748>
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	0b39053b 	bleq	e423d4 <__ccfg+0xe2242c>
     ee4:	13490c27 	movtne	r0, #39975	; 0x9c27
     ee8:	13010b20 	movwne	r0, #6944	; 0x1b20
     eec:	052d0000 	streq	r0, [sp, #-0]!
     ef0:	3a0e0300 	bcc	381af8 <__ccfg+0x361b50>
     ef4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (m_size (chunk) >= m_size (ch))
     ef8:	0013490b 	andseq	r4, r3, fp, lsl #18
     efc:	00052e00 	andeq	r2, r5, r0, lsl #28
     f00:	0b3a0803 	bleq	e82f14 <__ccfg+0xe62f6c>
		chunk = m_nextp (chunk))
     f04:	0b39053b 	bleq	e423f8 <__ccfg+0xe22450>
     f08:	00001349 	andeq	r1, r0, r9, asr #6
     f0c:	11010b2f 	tstne	r1, pc, lsr #22
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f10:	00011201 	andeq	r1, r1, r1, lsl #4
	diag_wait (a);
     f14:	00343000 	eorseq	r3, r4, r0
	diag_wchar (c, a);
     f18:	0b3a0e03 	bleq	e8472c <__ccfg+0xe64784>
     f1c:	0b39053b 	bleq	e42410 <__ccfg+0xe22468>
}
     f20:	0a021349 	beq	85c4c <__ccfg+0x65ca4>
     f24:	0a310000 	beq	c40f2c <__ccfg+0xc20f84>
	syserror (ESTATE, "state");
     f28:	3a0e0300 	bcc	381b30 <__ccfg+0x361b88>
     f2c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f30:	0001110b 	andeq	r1, r1, fp, lsl #2
     f34:	011d3200 	tsteq	sp, r0, lsl #4
void update_n_wake (word min, Boolean force) {
     f38:	01111331 	tsteq	r1, r1, lsr r3
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	0b580112 	bleq	160138c <__ccfg+0x15e13e4>
     f40:	0b570559 	bleq	15c24ac <__ccfg+0x15a2504>
     f44:	05330000 	ldreq	r0, [r3, #-0]!
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	00133100 	andseq	r3, r3, r0, lsl #2
     f4c:	00053400 	andeq	r3, r5, r0, lsl #8
     f50:	0b3a0803 	bleq	e82f64 <__ccfg+0xe62fbc>
     f54:	0b39053b 	bleq	e42448 <__ccfg+0xe224a0>
     f58:	0a021349 	beq	85c84 <__ccfg+0x65cdc>
     f5c:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
     f60:	36000000 	strcc	r0, [r0], -r0
     f64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f6c:	13490b39 	movtne	r0, #39737	; 0x9b39
     f70:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     f74:	3a080301 	bcc	201b80 <__ccfg+0x1e1bd8>
     f78:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		for_all_tasks (i) {
     f7c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	__pi_mintk = znew + min;
     f80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f84:	010a4001 	tsteq	sl, r1
			if (!twaiting (i))
     f88:	38000013 	stmdacc	r0, {r0, r1, r4}
     f8c:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f94:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f98:	01120111 	tsteq	r2, r1, lsl r1
     f9c:	13010a40 	movwne	r0, #6720	; 0x1a40
     fa0:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
     fa4:	3a0e0301 	bcc	381bb0 <__ccfg+0x361c08>
     fa8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fac:	200c270b 	andcs	r2, ip, fp, lsl #14
     fb0:	0013010b 	andseq	r0, r3, fp, lsl #2
     fb4:	00053a00 	andeq	r3, r5, r0, lsl #20
     fb8:	0b3a0803 	bleq	e82fcc <__ccfg+0xe63024>
     fbc:	0b390b3b 	bleq	e43cb0 <__ccfg+0xe23d08>
				wakeuptm (i);
     fc0:	00001349 	andeq	r1, r0, r9, asr #6
     fc4:	03012e3b 	movweq	r2, #7739	; 0x1e3b
		for_all_tasks (i) {
     fc8:	3b0b3a0e 	blcc	2cf808 <__ccfg+0x2af860>
				d = i->Timer - znew;
     fcc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     fd0:	2013490c 	andscs	r4, r3, ip, lsl #18
     fd4:	0013010b 	andseq	r0, r3, fp, lsl #2
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	00343c00 	eorseq	r3, r4, r0, lsl #24
     fdc:	0b3a0803 	bleq	e82ff0 <__ccfg+0xe63048>
     fe0:	0b390b3b 	bleq	e43cd4 <__ccfg+0xe23d2c>
	__pi_old = znew;
     fe4:	00001349 	andeq	r1, r0, r9, asr #6
}
     fe8:	03012e3d 	movweq	r2, #7741	; 0x1e3d
	TCI_RUN_DELAY_TIMER;
     fec:	3b0b3a08 	blcc	2cf814 <__ccfg+0x2af86c>
}
     ff0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     ff4:	010b200c 	tsteq	fp, ip
     ff8:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     ffc:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1000:	01120111 	tsteq	r2, r1, lsl r1
void proceed (word state) {
    1004:	13010a40 	movwne	r0, #6720	; 0x1a40
	prcdstate (__pi_curr, state);
    1008:	053f0000 	ldreq	r0, [pc, #-0]!	; 1010 <proceed+0xc>
    100c:	02133100 	andseq	r3, r3, #0, 2
	release;
    1010:	4000000a 	andmi	r0, r0, sl
    1014:	1331011d 	teqne	r1, #1073741831	; 0x40000007
void __pi_wait (aword event, word state) {
    1018:	01120111 	tsteq	r2, r1, lsl r1
	sint j = nevents (__pi_curr);
    101c:	0b590b58 	bleq	1643d84 <__ccfg+0x1623ddc>
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	00000b57 	andeq	r0, r0, r7, asr fp
    1024:	31011d41 	tstcc	r1, r1, asr #26
    1028:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		syserror (ENEVENTS, "sw");
    102c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1030:	000b570b 	andeq	r5, fp, fp, lsl #14
	setestate (__pi_curr->Events [j], state, event);
    1034:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
	incwait (__pi_curr);
    1038:	01111331 	tsteq	r1, r1, lsr r3
	setestate (__pi_curr->Events [j], state, event);
    103c:	0a400112 	beq	100148c <__ccfg+0xfe14e4>
}
    1040:	34430000 	strbcc	r0, [r3], #-0
    1044:	00133100 	andseq	r3, r3, r0, lsl #2
    1048:	11010000 	mrsne	r0, (UNDEF: 1)
void __pi_trigger (aword event) {
    104c:	130e2501 	movwne	r2, #58625	; 0xe501
	for_all_tasks (i) {
    1050:	1b0e030b 	blne	381c84 <__ccfg+0x361cdc>
		for (j = 0; j < nevents (i); j++) {
    1054:	1106550e 	tstne	r6, lr, lsl #10
    1058:	00061001 	andeq	r1, r6, r1
    105c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1060:	0b3e0b0b 	bleq	f83c94 <__ccfg+0xf63cec>
			if (i->Events [j] . Event == event) {
    1064:	00000e03 	andeq	r0, r0, r3, lsl #28
    1068:	03001603 	movweq	r1, #1539	; 0x603
    106c:	3b0b3a0e 	blcc	2cf8ac <__ccfg+0x2af904>
				wakeupev (i, j);
    1070:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1074:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	for_all_tasks (i) {
    1078:	0b0b0024 	bleq	2c1110 <__ccfg+0x2a1168>
}
    107c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
aword __pi_join (aword pid, word st) {
    1080:	0f050000 	svceq	0x00050000
	for_all_tasks (i) {
    1084:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1088:	06000013 			; <UNDEFINED> instruction: 0x06000013
	return 0;
    108c:	13490026 	movtne	r0, #36902	; 0x9026
		if ((aword)i == pid) {
    1090:	15070000 	strne	r0, [r7, #-0]
			__pi_wait (pid, st);
    1094:	000c2700 	andeq	r2, ip, r0, lsl #14
}
    1098:	00340800 	eorseq	r0, r4, r0, lsl #16
	for_all_tasks (i) {
    109c:	0b3a0e03 	bleq	e848b0 <__ccfg+0xe64908>
    10a0:	0b390b3b 	bleq	e43d94 <__ccfg+0xe23dec>
void delay (word d, word state) {
    10a4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; f88 <update_n_wake+0x50>
	settstate (__pi_curr, state);
    10a8:	00000c3c 	andeq	r0, r0, ip, lsr ip
    10ac:	49010109 	stmdbmi	r1, {r0, r3, r8}
    10b0:	00130113 	andseq	r0, r3, r3, lsl r1
    10b4:	00210a00 	eoreq	r0, r1, r0, lsl #20
	update_n_wake (d, YES);
    10b8:	0b2f1349 	bleq	bc5de4 <__ccfg+0xba5e3c>
    10bc:	340b0000 	strcc	r0, [fp], #-0
	__pi_curr->Timer = __pi_old + d;
    10c0:	3a0e0300 	bcc	381cc8 <__ccfg+0x361d20>
    10c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	inctimer (__pi_curr);
    10c8:	3f13490b 	svccc	0x0013490b
    10cc:	000a020c 	andeq	r0, sl, ip, lsl #4
    10d0:	002e0c00 	eoreq	r0, lr, r0, lsl #24
}
    10d4:	0b3a0e03 	bleq	e848e8 <__ccfg+0xe64940>
    10d8:	0b39053b 	bleq	e425cc <__ccfg+0xe22624>
	if (fun == NULL)
    10dc:	01110c27 	tsteq	r1, r7, lsr #24
		return (int) __pi_curr;
    10e0:	0a400112 	beq	1001530 <__ccfg+0xfe1588>
    10e4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
	for_all_tasks (i)
    10e8:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
    10ec:	3b0b3a0e 	blcc	2cf92c <__ccfg+0x2af984>
		if (i->code == fun)
    10f0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	for_all_tasks (i)
    10f4:	1201110c 	andne	r1, r1, #12, 2
    10f8:	000a4001 	andeq	r4, sl, r1
    10fc:	00340e00 	eorseq	r0, r4, r0, lsl #28
int __pi_strlen (const char *s) {
    1100:	0b3a0e03 	bleq	e84914 <__ccfg+0xe6496c>
	for (i = 0; *(s+i) != '\0'; i++);
    1104:	0b390b3b 	bleq	e43df8 <__ccfg+0xe23e50>
}
    1108:	06021349 	streq	r1, [r2], -r9, asr #6
	for (i = 0; *(s+i) != '\0'; i++);
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
	while (n--)
    1110:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1114:	0e030b13 	vmoveq.32	d3[0], r0
		*dest++ = *src++;
    1118:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
    111c:	24020000 	strcs	r0, [r2], #-0
    1120:	3e0b0b00 	vmlacc.f64	d0, d11, d0
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	000e030b 	andeq	r0, lr, fp, lsl #6
		syserror (EREQPAR, "addv");
    1128:	00160300 	andseq	r0, r6, r0, lsl #6
		syserror (ERESOURCE, "addv");
    112c:	0b3a0e03 	bleq	e84940 <__ccfg+0xe64998>
	if (ioreq [loc] != NULL)
    1130:	0b390b3b 	bleq	e43e24 <__ccfg+0xe23e7c>
    1134:	00001349 	andeq	r1, r0, r9, asr #6
		syserror (ERESOURCE, "addv");
    1138:	0b002404 	bleq	a150 <__exidx_end+0x73c4>
	ioreq [loc] = rf;
    113c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    1140:	05000008 	streq	r0, [r0, #-8]
    1144:	0b0b0113 	bleq	2c1598 <__ccfg+0x2a15f0>
sint io (word retry, word dev, word operation, char *buf, word len) {
    1148:	0b3b0b3a 	bleq	ec3e38 <__ccfg+0xea3e90>
    114c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1150:	0d060000 	stceq	0, cr0, [r6, #-0]
    1154:	3a0e0300 	bcc	381d5c <__ccfg+0x361db4>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    115c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1160:	0700000b 	streq	r0, [r0, -fp]
		syserror (ENODEVICE, "io");
    1164:	13490026 	movtne	r0, #36902	; 0x9026
    1168:	34080000 	strcc	r0, [r8], #-0
	if (len == 0)
    116c:	3a0e0300 	bcc	381d74 <__ccfg+0x361dcc>
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1174:	3f13490b 	svccc	0x0013490b
	if (ret >= 0)
    1178:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	if (ret == -1) {
    117c:	00350900 	eorseq	r0, r5, r0, lsl #18
    1180:	00001349 	andeq	r1, r0, r9, asr #6
		if (retry == WNONE)
    1184:	03000d0a 	movweq	r0, #3338	; 0xd0a
		iowait (dev, operation, retry);
    1188:	3b0b3a0e 	blcc	2cf9c8 <__ccfg+0x2afa20>
    118c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1190:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			release;
    1194:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	if (ret == -2) {
    1198:	0b00000b 	bleq	11cc <io+0x84>
		if (retry != WNONE) {
    119c:	0b0b000f 	bleq	2c11e0 <__ccfg+0x2a1238>
    11a0:	00001349 	andeq	r1, r0, r9, asr #6
			iowait (dev, operation, retry);
    11a4:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    11a8:	00130113 	andseq	r0, r3, r3, lsl r1
			(ioreq [dev]) (NONE, buf, len);
    11ac:	00210d00 	eoreq	r0, r1, r0, lsl #26
    11b0:	160e0000 	strne	r0, [lr], -r0
    11b4:	3a0e0300 	bcc	381dbc <__ccfg+0x361e14>
		(ioreq [dev]) (NONE, buf, len);
    11b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    11c0:	01150f00 	tsteq	r5, r0, lsl #30
}
    11c4:	13010c27 	movwne	r0, #7207	; 0x1c27
	if (retry != WNONE) {
    11c8:	05100000 	ldreq	r0, [r0, #-0]
		delay (-ret - 2, retry);
    11cc:	00134900 	andseq	r4, r3, r0, lsl #18
    11d0:	00341100 	eorseq	r1, r4, r0, lsl #2
    11d4:	0b3a0e03 	bleq	e849e8 <__ccfg+0xe64a40>
    11d8:	0b39053b 	bleq	e426cc <__ccfg+0xe22724>
		release;
    11dc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 10c0 <delay+0x1c>
    11e0:	00000c3c 	andeq	r0, r0, ip, lsr ip
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	0b011312 	bleq	45e34 <__ccfg+0x25e8c>
    11e8:	3b0b3a0b 	blcc	2cfa1c <__ccfg+0x2afa74>
    11ec:	010b3905 	tsteq	fp, r5, lsl #18
    11f0:	13000013 	movwne	r0, #19
    11f4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (ERESOURCE, "mal1");
    11f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11fc:	13490b39 	movtne	r0, #39737	; 0x9b39
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1200:	00000b38 	andeq	r0, r0, r8, lsr fp
    1204:	03011314 	movweq	r1, #4884	; 0x1314
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1208:	3a0b0b0e 	bcc	2c3e48 <__ccfg+0x2a3ea0>
	m_size (mpools [0]) = mlen - m_hdrlen;
    120c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1210:	0013010b 	andseq	r0, r3, fp, lsl #2
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1214:	00211500 	eoreq	r1, r1, r0, lsl #10
    1218:	0b2f1349 	bleq	bc5f44 <__ccfg+0xba5f9c>
}
    121c:	34160000 	ldrcc	r0, [r6], #-0
    1220:	3a134700 	bcc	4d2e28 <__ccfg+0x4b2e80>
    1224:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1228:	000a020b 	andeq	r0, sl, fp, lsl #4
    122c:	11010000 	mrsne	r0, (UNDEF: 1)
    1230:	130e2501 	movwne	r2, #58625	; 0xe501
void __pi_free (aword *ch) {
    1234:	1b0e030b 	blne	381e68 <__ccfg+0x361ec0>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1238:	1106550e 	tstne	r6, lr, lsl #10
    123c:	00061001 	andeq	r1, r6, r1
		syserror (EMALLOC, "malg");
    1240:	00240200 	eoreq	r0, r4, r0, lsl #4
    1244:	0b3e0b0b 	bleq	f83e78 <__ccfg+0xf63ed0>
	mcfree [MA_NP] += m_size (ch);
    1248:	00000e03 	andeq	r0, r0, r3, lsl #28
		m_size (ch) ^= MALLOC_UMASK;
    124c:	03001603 	movweq	r1, #1539	; 0x603
    1250:	3b0b3a0e 	blcc	2cfa90 <__ccfg+0x2afae8>
	mcfree [MA_NP] += m_size (ch);
    1254:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	QFREE;
    1258:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	if (mevent [MA_NP] . nwait) {
    125c:	0b0b0024 	bleq	2c12f4 <__ccfg+0x2a134c>
    1260:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		trigger ((aword)(&(mevent [MA_NP])));
    1264:	26050000 	strcs	r0, [r5], -r0
		mevent [MA_NP] . nwait --;
    1268:	00134900 	andseq	r4, r3, r0, lsl #18
}
    126c:	00350600 	eorseq	r0, r5, r0, lsl #12
    1270:	00001349 	andeq	r1, r0, r9, asr #6
    1274:	0b000f07 	bleq	4e98 <__exidx_end+0x210c>
    1278:	0013490b 	andseq	r4, r3, fp, lsl #18
void kill (aword pid) {
    127c:	01130800 	tsteq	r3, r0, lsl #16
		pid = (aword) __pi_curr;
    1280:	0b3a0b0b 	bleq	e83eb4 <__ccfg+0xe63f0c>
	j = NULL;
    1284:	0b390b3b 	bleq	e43f78 <__ccfg+0xe23fd0>
	for_all_tasks (i) {
    1288:	00001301 	andeq	r1, r0, r1, lsl #6
	syserror (EREQPAR, "kpi");
    128c:	03000d09 	movweq	r0, #3337	; 0xd09
    1290:	3b0b3a0e 	blcc	2cfad0 <__ccfg+0x2afb28>
		if ((aword)i == pid) {
    1294:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1298:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
				__PCB = i->Next;
    129c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			killev (i);
    12a0:	0a00000b 	beq	12d4 <__pi_malloc+0x8>
			ufree (i);
    12a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			if (i == __pi_curr)
    12a8:	0b3b0b3a 	bleq	ec3f98 <__ccfg+0xea3ff0>
    12ac:	13490b39 	movtne	r0, #39737	; 0x9b39
				release;
    12b0:	00000b38 	andeq	r0, r0, r8, lsr fp
				j->Next = i->Next;
    12b4:	0300340b 	movweq	r3, #1035	; 0x40b
    12b8:	3b0b3a0e 	blcc	2cfaf8 <__ccfg+0x2afb50>
    12bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    12c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    12c4:	0c00000c 	stceq	0, cr0, [r0], {12}
    12c8:	13490101 	movtne	r0, #37121	; 0x9101
	if (size < 8)
    12cc:	00001301 	andeq	r1, r0, r1, lsl #6
		_size = 2;
    12d0:	0000210d 	andeq	r2, r0, sp, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12d4:	00160e00 	andseq	r0, r6, r0, lsl #28
		_size = (((aword)size) + 3) >> 2;
    12d8:	0b3a0e03 	bleq	e84aec <__ccfg+0xe64b44>
		if (m_magic (chunk) != MALLOC_MAGIC)
    12dc:	0b39053b 	bleq	e427d0 <__ccfg+0xe22828>
		_size = (((aword)size) + 3) >> 2;
    12e0:	00001349 	andeq	r1, r0, r9, asr #6
		if (mevent [MA_NP] . nfail != 255)
    12e4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    12e8:	0013010c 	andseq	r0, r3, ip, lsl #2
			mevent [MA_NP] . nfail ++;
    12ec:	00051000 	andeq	r1, r5, r0
		mnfree [MA_NP] = 0;
    12f0:	00001349 	andeq	r1, r0, r9, asr #6
    12f4:	03003411 	movweq	r3, #1041	; 0x411
		if (m_magic (chunk) != MALLOC_MAGIC)
    12f8:	3b0b3a0e 	blcc	2cfb38 <__ccfg+0x2afb90>
    12fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			syserror (EMALLOC, "malc");
    1300:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1304:	1200000c 	andne	r0, r0, #12
		if (m_size (chunk) >= _size)
    1308:	0b0b0113 	bleq	2c175c <__ccfg+0x2a17b4>
    130c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		chunk = m_nextp (chunk)) {
    1310:	13010b39 	movwne	r0, #6969	; 0x1b39
		m_setnextp (cc, m_nextp (chunk));
    1314:	0d130000 	ldceq	0, cr0, [r3, #-0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1318:	3a0e0300 	bcc	381f20 <__ccfg+0x361f78>
    131c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			m_size (chunk) = _size;
    1320:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			cc = chunk + _size + m_hdrlen;
    1324:	1400000b 	strne	r0, [r0], #-11
    1328:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			m_size (cc) = waste - m_hdrlen;
    132c:	0b3a0b0b 	bleq	e83f60 <__ccfg+0xe63fb8>
			QFREE;
    1330:	0b39053b 	bleq	e42824 <__ccfg+0xe2287c>
		mevent [MA_NP] . nfail = 0;
    1334:	00001301 	andeq	r1, r0, r1, lsl #6
		mcfree [MA_NP] -= m_size (chunk);
    1338:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    133c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1340:	00341600 	eorseq	r1, r4, r0, lsl #12
    1344:	0b3a1347 	bleq	e86068 <__ccfg+0xe660c0>
		m_size (chunk) |= MALLOC_UMASK;
    1348:	0b390b3b 	bleq	e4403c <__ccfg+0xe24094>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    134c:	00000a02 	andeq	r0, r0, r2, lsl #20
		m_size (chunk) |= MALLOC_UMASK;
    1350:	3f012e17 	svccc	0x00012e17
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	3a0e030c 	bcc	381f8c <__ccfg+0x361fe4>
}
    1358:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    135c:	110c270b 	tstne	ip, fp, lsl #14
    1360:	40011201 	andmi	r1, r1, r1, lsl #4
    1364:	0013010a 	andseq	r0, r3, sl, lsl #2
    1368:	00051800 	andeq	r1, r5, r0, lsl #16
    136c:	0b3a0803 	bleq	e83380 <__ccfg+0xe633d8>
    1370:	0b390b3b 	bleq	e44064 <__ccfg+0xe240bc>
aword __pi_fork (fsmcode func, aword data) {
    1374:	06021349 	streq	r1, [r2], -r9, asr #6
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	05190000 	ldreq	r0, [r9, #-0]
    137c:	3a0e0300 	bcc	381f84 <__ccfg+0x361fdc>
    1380:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((j = __PCB) == NULL)
    1384:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	i->Next = NULL;
    1388:	1a000006 	bne	13a8 <__pi_waitmem>
	i->data = data;
    138c:	08030034 	stmdaeq	r3, {r2, r4, r5}
		if ((j = __PCB) == NULL)
    1390:	0b3b0b3a 	bleq	ec4080 <__ccfg+0xea40d8>
}
    1394:	13490b39 	movtne	r0, #39737	; 0x9b39
			for (; j->Next != NULL; j = j->Next);
    1398:	341b0000 	ldrcc	r0, [fp], #-0
    139c:	3a080300 	bcc	201fa4 <__ccfg+0x1e1ffc>
	return (aword) i;
    13a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (mevent [MA_NP] . nwait != 255)
    13a8:	1c000006 	stcne	0, cr0, [r0], {6}
    13ac:	1331001d 	teqne	r1, #29
    13b0:	01120111 	tsteq	r2, r1, lsl r1
		mevent [MA_NP] . nwait ++;
    13b4:	0b590b58 	bleq	164411c <__ccfg+0x1624174>
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	00000b57 	andeq	r0, r0, r7, asr fp
    13bc:	31011d1d 	tstcc	r1, sp, lsl sp
void diag (const char *mess, ...) {
    13c0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    13c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    13c8:	000b570b 	andeq	r5, fp, fp, lsl #14
	diag_disable_int (a, is);
    13cc:	00051e00 	andeq	r1, r5, r0, lsl #28
    13d0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    13d4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    13d8:	030c3f00 	movweq	r3, #52992	; 0xcf00
	diag_disable_int (a, is);
    13dc:	3b0b3a0e 	blcc	2cfc1c <__ccfg+0x2afc74>
	while (*mess != '\0') {
    13e0:	110b390b 	tstne	fp, fp, lsl #18
	dgout ('\r');
    13e4:	40011201 	andmi	r1, r1, r1, lsl #4
	dgout ('\n');
    13e8:	2000000a 	andcs	r0, r0, sl
    13ec:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    13f0:	0b3b0b3a 	bleq	ec40e0 <__ccfg+0xea4138>
	diag_wait (a);
    13f4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	diag_enable_int (a, is);
    13f8:	00000b20 	andeq	r0, r0, r0, lsr #22
    13fc:	03012e21 	movweq	r2, #7713	; 0x1e21
}
    1400:	3b0b3a0e 	blcc	2cfc40 <__ccfg+0x2afc98>
    1404:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1408:	2013490c 	andscs	r4, r3, ip, lsl #18
		if (*mess == '%') {
    140c:	2200000b 	andcs	r0, r0, #11
    1410:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			if (*mess == 'l') {
    1414:	0b3b0b3a 	bleq	ec4104 <__ccfg+0xea415c>
    1418:	13490b39 	movtne	r0, #39737	; 0x9b39
				mess++;
    141c:	01000000 	mrseq	r0, (UNDEF: 0)
				val = va_arg (ap, lword);
    1420:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
				bc = 32;
    1424:	0e030b13 	vmoveq.32	d3[0], r0
				bc = 16;
    1428:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
			switch (*mess) {
    142c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1430:	24020000 	strcs	r0, [r2], #-0
    1434:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				dgout ('%');
    1438:	000e030b 	andeq	r0, lr, fp, lsl #6
    143c:	00160300 	andseq	r0, r6, r0, lsl #6
				dgout (*mess);
    1440:	0b3a0e03 	bleq	e84c54 <__ccfg+0xe64cac>
    1444:	0b390b3b 	bleq	e44138 <__ccfg+0xe24190>
			switch (*mess) {
    1448:	00001349 	andeq	r1, r0, r9, asr #6
					v = __pi_hex_enc_table [
    144c:	0b002404 	bleq	a464 <__exidx_end+0x76d8>
					i += 4;
    1450:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
					(val >> (bc - i)) & 0xf];
    1454:	05000008 	streq	r0, [r0, #-8]
    1458:	13490026 	movtne	r0, #36902	; 0x9026
					dgout (v);
    145c:	35060000 	strcc	r0, [r6, #-0]
    1460:	00134900 	andseq	r4, r3, r0, lsl #18
				while (i < bc) {
    1464:	01130700 	tsteq	r3, r0, lsl #14
			mess++;
    1468:	0b3a0b0b 	bleq	e8409c <__ccfg+0xe640f4>
					d /= 10;
    146c:	0b390b3b 	bleq	e44160 <__ccfg+0xe241b8>
				if ((val >> (bc - 1)) & 1) {
    1470:	00001301 	andeq	r1, r0, r1, lsl #6
    1474:	03000d08 	movweq	r0, #3336	; 0xd08
					dgout ('-');
    1478:	3b0b3a0e 	blcc	2cfcb8 <__ccfg+0x2afd10>
    147c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
						val |= 0xffff0000;
    1480:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1484:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1488:	0900000b 	stmdbeq	r0, {r0, r1, r3}
				d = (bc == 16) ? 10000 : 1000000000;
    148c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1490:	0b3b0b3a 	bleq	ec4180 <__ccfg+0xea41d8>
    1494:	13490b39 	movtne	r0, #39737	; 0x9b39
					v = (word) (val / d);
    1498:	00000b38 	andeq	r0, r0, r8, lsr fp
					if (v || d == 1) break;
    149c:	0300340a 	movweq	r3, #1034	; 0x40a
    14a0:	3b0b3a0e 	blcc	2cfce0 <__ccfg+0x2afd38>
					d /= 10;
    14a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
					dgout (v + '0');
    14ac:	0b00000c 	bleq	14e4 <diag+0x124>
    14b0:	0b0b000f 	bleq	2c14f4 <__ccfg+0x2a154c>
    14b4:	00001349 	andeq	r1, r0, r9, asr #6
					d /= 10;
    14b8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
					val = val - (v * d);
    14bc:	00130113 	andseq	r0, r3, r3, lsl r1
					if (d == 0) break;
    14c0:	00210d00 	eoreq	r0, r1, r0, lsl #26
					v = (word) (val / d);
    14c4:	160e0000 	strne	r0, [lr], -r0
    14c8:	3a0e0300 	bcc	3820d0 <__ccfg+0x362128>
				if (bc == 16)
    14cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				d = (bc == 16) ? 10000 : 1000000000;
    14d0:	0013490b 	andseq	r4, r3, fp, lsl #18
					val &= 0xffff;
    14d4:	01150f00 	tsteq	r5, r0, lsl #30
					dgout (*s);
    14d8:	13010c27 	movwne	r0, #7207	; 0x1c27
					s++;
    14dc:	05100000 	ldreq	r0, [r0, #-0]
				while (*s != '\0') {
    14e0:	00134900 	andseq	r4, r3, r0, lsl #18
    14e4:	00341100 	eorseq	r1, r4, r0, lsl #2
			dgout (*mess++);
    14e8:	0b3a0e03 	bleq	e84cfc <__ccfg+0xe64d54>
    14ec:	0b39053b 	bleq	e429e0 <__ccfg+0xe22a38>
    14f0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 13d4 <diag+0x14>
    14f4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    14f8:	0b011312 	bleq	46148 <__ccfg+0x261a0>
}
    14fc:	3b0b3a0b 	blcc	2cfd30 <__ccfg+0x2afd88>
    while(1)
    1500:	010b3905 	tsteq	fp, r5, lsl #18
{
    1504:	13000013 	movwne	r0, #19
    SetupTrimDevice();
    1508:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    pui32Src = &_etext;
    150c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1510:	13490b39 	movtne	r0, #39737	; 0x9b39
    __asm("    ldr     r0, =_bss\n"
    1514:	00000b38 	andeq	r0, r0, r8, lsr fp
    1518:	03011314 	movweq	r1, #4884	; 0x1314
    151c:	3a0b0b0e 	bcc	2c415c <__ccfg+0x2a41b4>
    1520:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1524:	0013010b 	andseq	r0, r3, fp, lsl #2
   main();
    1528:	00211500 	eoreq	r1, r1, r0, lsl #10
    FaultISR();
    152c:	0b2f1349 	bleq	bc6258 <__ccfg+0xba62b0>
        *pui32Dest++ = *pui32Src++;
    1530:	34160000 	ldrcc	r0, [r6], #-0
    1534:	3a0e0300 	bcc	38213c <__ccfg+0x362194>
    1538:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    153c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1540:	1700000a 	strne	r0, [r0, -sl]
    1544:	13470034 	movtne	r0, #28724	; 0x7034
    1548:	0b3b0b3a 	bleq	ec4238 <__ccfg+0xea4290>
    154c:	0a020b39 	beq	84238 <__ccfg+0x64290>
static byte get_byte () {
    1550:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1554:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1558:	3b0b3a0e 	blcc	2cfd98 <__ccfg+0x2afdf0>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    155c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1560:	1201110c 	andne	r1, r1, #12, 2
		if (ee_inp)
    1564:	010a4001 	tsteq	sl, r1
			b |= 1;
    1568:	19000013 	stmdbne	r0, {r0, r1, r4}
    156c:	08030005 	stmdaeq	r3, {r0, r2}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1570:	0b3b0b3a 	bleq	ec4260 <__ccfg+0xea42b8>
	for (b = 0, i = 0; i < 8; i++) {
    1574:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1578:	00000602 	andeq	r0, r0, r2, lsl #12
    157c:	0300051a 	movweq	r0, #1306	; 0x51a
    1580:	3b0b3a0e 	blcc	2cfdc0 <__ccfg+0x2afe18>
static void put_byte (byte b) {
    1584:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1588:	00060213 	andeq	r0, r6, r3, lsl r2
    158c:	000a1b00 	andeq	r1, sl, r0, lsl #22
    1590:	0b3a0e03 	bleq	e84da4 <__ccfg+0xe64dfc>
		if (b & 0x80)
    1594:	0b390b3b 	bleq	e44288 <__ccfg+0xe242e0>
    1598:	00000111 	andeq	r0, r0, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    159c:	31011d1c 	tstcc	r1, ip, lsl sp
	for (i = 0; i < 8; i++) {
    15a0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		b <<= 1;
    15a4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	for (i = 0; i < 8; i++) {
    15a8:	010b570b 	tsteq	fp, fp, lsl #14
}
    15ac:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    15b0:	13310005 	teqne	r1, #5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    15b4:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    15b8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	put_byte (cmd);
    15bc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    15c0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
}
    15c4:	1f00000b 	svcne	0x0000000b
    15c8:	0e03012e 	adfeqsp	f0, f3, #0.5
static void wwait (word st, word del) {
    15cc:	0b3b0b3a 	bleq	ec42bc <__ccfg+0xea4314>
    15d0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    15d4:	0b201349 	bleq	806300 <__ccfg+0x7e6358>
	while (dopen && (rdsr () & 1)) {
    15d8:	05200000 	streq	r0, [r0, #-0]!
    15dc:	3a0e0300 	bcc	3821e4 <__ccfg+0x36223c>
    15e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15e4:	0013490b 	andseq	r4, r3, fp, lsl #18
	put_byte (CMD_RDSR);
    15e8:	11010000 	mrsne	r0, (UNDEF: 1)
	r = get_byte ();
    15ec:	130e2501 	movwne	r2, #58625	; 0xe501
    15f0:	1b0e030b 	blne	382224 <__ccfg+0x36227c>
	while (dopen && (rdsr () & 1)) {
    15f4:	1106550e 	tstne	r6, lr, lsl #10
}
    15f8:	00061001 	andeq	r1, r6, r1
		if (st == WNONE)
    15fc:	00240200 	eoreq	r0, r4, r0, lsl #4
    1600:	0b3e0b0b 	bleq	f84234 <__ccfg+0xf6428c>
			mdelay (1);
    1604:	00000e03 	andeq	r0, r0, r3, lsl #28
    1608:	03001603 	movweq	r1, #1539	; 0x603
			delay (del, st);
    160c:	3b0b3a0e 	blcc	2cfe4c <__ccfg+0x2afea4>
    1610:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			release;
    1614:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1618:	0b0b0024 	bleq	2c16b0 <__ccfg+0x2a1708>
    161c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
static void ready () {
    1620:	26050000 	strcs	r0, [r5], -r0
	if (dopen) {
    1624:	00134900 	andseq	r4, r3, r0, lsl #18
		wwait (WNONE, 1);
    1628:	00350600 	eorseq	r0, r5, r0, lsl #12
    162c:	00001349 	andeq	r1, r0, r9, asr #6
    1630:	0b011307 	bleq	46254 <__ccfg+0x262ac>
	dstat = 0;
    1634:	3b0b3a0b 	blcc	2cfe68 <__ccfg+0x2afec0>
}
    1638:	010b390b 	tsteq	fp, fp, lsl #18
    163c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1640:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	udelay (1);
    1644:	0b3b0b3a 	bleq	ec4334 <__ccfg+0xea438c>
    1648:	13490b39 	movtne	r0, #39737	; 0x9b39
	udelay (1);
    164c:	0b0d0b0b 	bleq	344280 <__ccfg+0x3242d8>
		dopen = DOPEN_TEMP;
    1650:	0b380b0c 	bleq	e04288 <__ccfg+0xde42e0>
    1654:	0d090000 	stceq	0, cr0, [r9, #-0]
    1658:	3a0e0300 	bcc	382260 <__ccfg+0x3622b8>
    165c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static void cclose () {
    1660:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if (dopen == DOPEN_TEMP) {
    1664:	0a00000b 	beq	1698 <ee_close>
    1668:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		wwait (WNONE, 1);
    166c:	0b3b0b3a 	bleq	ec435c <__ccfg+0xea43b4>
    1670:	13490b39 	movtne	r0, #39737	; 0x9b39
	cmd_0 (CMD_DP);
    1674:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1678:	0f0b0000 	svceq	0x000b0000
		dopen = 0;
    167c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    1680:	0c000013 	stceq	0, cr0, [r0], {19}
word ee_open () {
    1684:	13490101 	movtne	r0, #37121	; 0x9101
	ready ();
    1688:	00001301 	andeq	r1, r0, r1, lsl #6
	dopen = DOPEN_PERM;
    168c:	0000210d 	andeq	r2, r0, sp, lsl #2
    1690:	00160e00 	andseq	r0, r6, r0, lsl #28
}
    1694:	0b3a0e03 	bleq	e84ea8 <__ccfg+0xe64f00>
	if (dopen) {
    1698:	0b39053b 	bleq	e42b8c <__ccfg+0xe22be4>
    169c:	00001349 	andeq	r1, r0, r9, asr #6
		dopen = DOPEN_TEMP;
    16a0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
		cclose ();
    16a4:	0013010c 	andseq	r0, r3, ip, lsl #2
}
    16a8:	00051000 	andeq	r1, r5, r0
int ser_in (word st, char *buf, int len) {
    16ac:	00001349 	andeq	r1, r0, r9, asr #6
    16b0:	03003411 	movweq	r3, #1041	; 0x411
	if (len == 0)
    16b4:	3b0b3a0e 	blcc	2cfef4 <__ccfg+0x2aff4c>
	if (__inpline == NULL) {
    16b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if ((prcs = running (__inserial)) == 0) {
    16bc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    16c0:	1200000c 	andne	r0, r0, #12
			prcs = runthread (__inserial);
    16c4:	0b0b0113 	bleq	2c1b18 <__ccfg+0x2a1b70>
    16c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (prcs == 0) {
    16cc:	13010b39 	movwne	r0, #6969	; 0x1b39
				npwait (st);
    16d0:	0d130000 	ldceq	0, cr0, [r3, #-0]
		release;
    16d4:	3a0e0300 	bcc	3822dc <__ccfg+0x362334>
		join (prcs, st);
    16d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if (*__inpline == NULL) // bin cmd
    16e0:	1400000b 	strne	r0, [r0], #-11
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    16e4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	if (prcs >= len)
    16e8:	0b3a0b0b 	bleq	e8431c <__ccfg+0xe64374>
		prcs = len-1;
    16ec:	0b39053b 	bleq	e42be0 <__ccfg+0xe22c38>
	memcpy (buf, __inpline, prcs);
    16f0:	00001301 	andeq	r1, r0, r1, lsl #6
    16f4:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    16f8:	000b2f13 	andeq	r2, fp, r3, lsl pc
	ufree (__inpline);
    16fc:	00341600 	eorseq	r1, r4, r0, lsl #12
	__inpline = NULL;
    1700:	0b3a0e03 	bleq	e84f14 <__ccfg+0xe64f6c>
	if (*buf) // if it's NULL, it's a bin cmd
    1704:	0b390b3b 	bleq	e443f8 <__ccfg+0xe24450>
		buf [prcs] = '\0';
    1708:	0a021349 	beq	86434 <__ccfg+0x6648c>
}
    170c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
		prcs = strlen (__inpline);
    1710:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1714:	3b0b3a0e 	blcc	2cff54 <__ccfg+0x2affac>
		return 0;
    1718:	110b390b 	tstne	fp, fp, lsl #18
    171c:	40011201 	andmi	r1, r1, r1, lsl #4
    1720:	1800000a 	stmdane	r0, {r1, r3}
int ser_outf (word st, const char *m, ...) {
    1724:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1674 <cclose+0x14>
    1728:	0b3a0e03 	bleq	e84f3c <__ccfg+0xe64f94>
	if ((prcs = running (__outserial)) != 0) {
    172c:	0b390b3b 	bleq	e44420 <__ccfg+0xe24478>
    1730:	13490c27 	movtne	r0, #39975	; 0x9c27
		join (prcs, st);
    1734:	01120111 	tsteq	r2, r1, lsl r1
    1738:	13010a40 	movwne	r0, #6720	; 0x1a40
		release;
    173c:	05190000 	ldreq	r0, [r9, #-0]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1740:	3a080300 	bcc	202348 <__ccfg+0x1e23a0>
    1744:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1748:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		umwait (st);
    174c:	1a000006 	bne	176c <ser_outf+0x48>
    1750:	08030005 	stmdaeq	r3, {r0, r2}
	if (runstrand (__outserial, buf) == 0) {
    1754:	0b3b0b3a 	bleq	ec4444 <__ccfg+0xea449c>
    1758:	13490b39 	movtne	r0, #39737	; 0x9b39
    175c:	00000a02 	andeq	r0, r0, r2, lsl #20
		ufree (buf);
    1760:	3f012e1b 	svccc	0x00012e1b
		npwait (st);
    1764:	3a0e030c 	bcc	38239c <__ccfg+0x3623f4>
}
    1768:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    176c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1770:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1774:	010a4001 	tsteq	sl, r1
int ser_inf (word st, const char *fmt, ...) {
    1778:	1c000013 	stcne	0, cr0, [r0], {19}
    177c:	08030005 	stmdaeq	r3, {r0, r2}
	if (fmt == NULL)
    1780:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (__inpline == NULL) {
    1784:	13490b39 	movtne	r0, #39737	; 0x9b39
		if ((prcs = running (__inserial)) == 0) {
    1788:	00000602 	andeq	r0, r0, r2, lsl #12
    178c:	3f002e1d 	svccc	0x00002e1d
			prcs = runthread (__inserial);
    1790:	3a0e030c 	bcc	3823c8 <__ccfg+0x362420>
    1794:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (prcs == 0) {
    1798:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
				npwait (st);
    179c:	000a4001 	andeq	r4, sl, r1
		release;
    17a0:	00341e00 	eorseq	r1, r4, r0, lsl #28
		join (prcs, st);
    17a4:	0b3a0803 	bleq	e837b8 <__ccfg+0xe63810>
    17a8:	0b39053b 	bleq	e42c9c <__ccfg+0xe22cf4>
	va_start (ap, fmt);
    17ac:	06021349 	streq	r1, [r2], -r9, asr #6
	prcs = vscan (__inpline, fmt, ap);
    17b0:	0a1f0000 	beq	7c17b8 <__ccfg+0x7a1810>
    17b4:	3a0e0300 	bcc	3823bc <__ccfg+0x362414>
	ufree (__inpline);
    17b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__inpline = NULL;
    17bc:	0001110b 	andeq	r1, r1, fp, lsl #2
}
    17c0:	011d2000 	tsteq	sp, r0
    17c4:	01521331 	cmpeq	r2, r1, lsr r3
    17c8:	0b580655 	bleq	1603124 <__ccfg+0x15e317c>
		return 0;
    17cc:	0b570559 	bleq	15c2d38 <__ccfg+0x15a2d90>
    17d0:	00001301 	andeq	r1, r0, r1, lsl #6
    17d4:	31000521 	tstcc	r0, r1, lsr #10
strand (__outserial, const char*)
    17d8:	22000013 	andcs	r0, r0, #19
    17dc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    17e0:	01120111 	tsteq	r2, r1, lsl r1
    17e4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
endstrand
    17e8:	00000b57 	andeq	r0, r0, r7, asr fp
    17ec:	03000523 	movweq	r0, #1315	; 0x523
	ptr = data;
    17f0:	3b0b3a0e 	blcc	2d0030 <__ccfg+0x2b0088>
    17f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (*ptr)
    17f8:	00060213 	andeq	r0, r6, r3, lsl r2
		len = strlen (ptr);
    17fc:	000a2400 	andeq	r2, sl, r0, lsl #8
    1800:	0b3a0e03 	bleq	e85014 <__ccfg+0xe6506c>
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1804:	0b390b3b 	bleq	e444f8 <__ccfg+0xe24550>
    1808:	00000111 	andeq	r0, r0, r1, lsl r1
    180c:	31011d25 	tstcc	r1, r5, lsr #26
    1810:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1814:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	len -= quant;
    1818:	000b570b 	andeq	r5, fp, fp, lsl #14
    181c:	00052600 	andeq	r2, r5, r0, lsl #12
    1820:	06021331 			; <UNDEFINED> instruction: 0x06021331
	if (len == 0) {
    1824:	1d270000 	stcne	0, cr0, [r7, #-0]
		ufree (data);
    1828:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		finish;
    182c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1830:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1834:	0013010b 	andseq	r0, r3, fp, lsl #2
    1838:	011d2800 	tsteq	sp, r0, lsl #16
    183c:	01111331 	tsteq	r1, r1, lsr r3
    1840:	0b580112 	bleq	1601c90 <__ccfg+0x15e1ce8>
    1844:	0b570b59 	bleq	15c45b0 <__ccfg+0x15a4608>
strand (__inserial, address)
    1848:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    184c:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1850:	3b0b3a0e 	blcc	2d0090 <__ccfg+0x2b00e8>
    1854:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1858:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (__inpline != NULL)
    185c:	000a4001 	andeq	r4, sl, r1
    1860:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
		finish;
    1864:	0b3a0e03 	bleq	e85078 <__ccfg+0xe650d0>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1868:	0b390b3b 	bleq	e4455c <__ccfg+0xe245b4>
    186c:	01120111 	tsteq	r2, r1, lsl r1
    1870:	13010a40 	movwne	r0, #6720	; 0x1a40
    1874:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
		umwait (IM_INIT);
    1878:	3a0e0300 	bcc	382480 <__ccfg+0x3624d8>
		release;
    187c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	savedata (data);
    1880:	000b200b 	andeq	r2, fp, fp
	len = MAX_LINE_LENGTH;
    1884:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
	io (IM_READ, __cport, READ, ptr, 1);
    1888:	0b3a0e03 	bleq	e8509c <__ccfg+0xe650f4>
    188c:	0b390b3b 	bleq	e44580 <__ccfg+0xe245d8>
    1890:	01110c27 	tsteq	r1, r7, lsr #24
    1894:	0a400112 	beq	1001ce4 <__ccfg+0xfe1d3c>
	if (ptr == (char*) data) { // new line
    1898:	00001301 	andeq	r1, r0, r1, lsl #6
    189c:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
		if (*ptr == '\0') { // bin cmd
    18a0:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
			proceed (IM_BIN);
    18a4:	13310034 	teqne	r1, #52	; 0x34
    18a8:	00000602 	andeq	r0, r0, r2, lsl #12
		if (*ptr < 0x20)
    18ac:	03012e2f 	movweq	r2, #7727	; 0x1e2f
    18b0:	3b0b3a0e 	blcc	2d00f0 <__ccfg+0x2b0148>
			proceed (IM_READ);
    18b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    18b8:	010b2013 	tsteq	fp, r3, lsl r0
	if (*ptr == '\n' || *ptr == '\r') {
    18bc:	30000013 	andcc	r0, r0, r3, lsl r0
    18c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    18c4:	0b3b0b3a 	bleq	ec45b4 <__ccfg+0xea460c>
		*ptr = '\0';
    18c8:	13490b39 	movtne	r0, #39737	; 0x9b39
		__inpline = (char*)data;
    18cc:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
		finish;
    18d0:	3a0e0301 	bcc	3824dc <__ccfg+0x362534>
	if (len) {
    18d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ptr++;
    18d8:	200c270b 	andcs	r2, ip, fp, lsl #14
    18dc:	0013010b 	andseq	r0, r3, fp, lsl #2
		len--;
    18e0:	00053200 	andeq	r3, r5, r0, lsl #4
	proceed (IM_READ);
    18e4:	0b3a0803 	bleq	e838f8 <__ccfg+0xe63950>
	io (IM_BIN, __cport, READ, ptr, 1);
    18e8:	0b390b3b 	bleq	e445dc <__ccfg+0xe24634>
    18ec:	00001349 	andeq	r1, r0, r9, asr #6
    18f0:	31011d33 	tstcc	r1, r3, lsr sp
    18f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    18f8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	len -= 2;
    18fc:	010b570b 	tsteq	fp, fp, lsl #14
	if (len > *ptr + 1) // 1 for 0x04
    1900:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    1904:	0e03012e 	adfeqsp	f0, f3, #0.5
		len = *ptr + 1;
    1908:	0b3b0b3a 	bleq	ec45f8 <__ccfg+0xea4650>
    190c:	13490b39 	movtne	r0, #39737	; 0x9b39
	ptr++;
    1910:	01120111 	tsteq	r2, r1, lsl r1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1914:	13010a40 	movwne	r0, #6720	; 0x1a40
    1918:	34350000 	ldrtcc	r0, [r5], #-0
    191c:	3a080300 	bcc	202524 <__ccfg+0x1e257c>
    1920:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1924:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1928:	36000006 	strcc	r0, [r0], -r6
	len -= quant;
    192c:	0e03012e 	adfeqsp	f0, f3, #0.5
		__inpline = (char*)data;
    1930:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		finish;
    1934:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	ptr += quant;
    1938:	13010b20 	movwne	r0, #6944	; 0x1b20
    193c:	05370000 	ldreq	r0, [r7, #-0]!
endstrand
    1940:	3a0e0300 	bcc	382548 <__ccfg+0x3625a0>
    1944:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	proceed (IM_BINL);
    1948:	0013490b 	andseq	r4, r3, fp, lsl #18
endstrand
    194c:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
    1950:	0b3a0e03 	bleq	e85164 <__ccfg+0xe651bc>
    1954:	0b390b3b 	bleq	e44648 <__ccfg+0xe246a0>
    1958:	13490c27 	movtne	r0, #39975	; 0x9c27
    195c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1960:	05390000 	ldreq	r0, [r9, #-0]!
		if (res && (d < n))
    1964:	3a0e0300 	bcc	38256c <__ccfg+0x3625c4>
    1968:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    196c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1970:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
			res [d] = (char) c;
    1974:	01111331 	tsteq	r1, r1, lsr r3
		d++;
    1978:	0a400112 	beq	1001dc8 <__ccfg+0xfe1e20>
    197c:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
    1980:	11133100 	tstne	r3, r0, lsl #2
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1984:	58011201 	stmdapl	r1, {r0, r9, ip}
    1988:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    198c:	0000000b 	andeq	r0, r0, fp
				enci (10000);
    1990:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1994:	030b130e 	movweq	r1, #45838	; 0xb30e
    1998:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	d = 0;
    199c:	10011106 	andne	r1, r1, r6, lsl #2
		c = *fm++;
    19a0:	02000006 	andeq	r0, r0, #6
		if (c == '\\') {
    19a4:	0b0b0024 	bleq	2c1a3c <__ccfg+0x2a1a94>
			if ((c = *fm++) == '\0') {
    19a8:	0e030b3e 	vmoveq.16	d3[0], r0
    19ac:	16030000 	strne	r0, [r3], -r0
				outc ('\\');
    19b0:	3a0e0300 	bcc	3825b8 <__ccfg+0x362610>
			if ((c = *fm++) == '\0') {
    19b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc ('\\');
    19b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    19bc:	00240400 	eoreq	r0, r4, r0, lsl #8
			outc (c);
    19c0:	0b3e0b0b 	bleq	f845f4 <__ccfg+0xf6464c>
    19c4:	00000803 	andeq	r0, r0, r3, lsl #16
			if (c == '\0')
    19c8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    19cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
			outc (c);
    19d0:	13490035 	movtne	r0, #36917	; 0x9035
				outc (val);
    19d4:	13070000 	movwne	r0, #28672	; 0x7000
				val = (word) va_arg (ap, aword);
    19d8:	3a0b0b01 	bcc	2c45e4 <__ccfg+0x2a463c>
		if (c == '%') {
    19dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19e0:	0013010b 	andseq	r0, r3, fp, lsl #2
			c = *fm++;
    19e4:	000d0800 	andeq	r0, sp, r0, lsl #16
			switch (c) {
    19e8:	0b3a0e03 	bleq	e851fc <__ccfg+0xe65254>
    19ec:	0b390b3b 	bleq	e446e0 <__ccfg+0xe24738>
    19f0:	0b0b1349 	bleq	2c671c <__ccfg+0x2a6774>
    19f4:	0b0c0b0d 	bleq	304630 <__ccfg+0x2e4688>
    19f8:	00000b38 	andeq	r0, r0, r8, lsr fp
    19fc:	03000d09 	movweq	r0, #3337	; 0xd09
    1a00:	3b0b3a0e 	blcc	2d0240 <__ccfg+0x2b0298>
    1a04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				outc ('%');
    1a08:	000b3813 	andeq	r3, fp, r3, lsl r8
    1a0c:	00340a00 	eorseq	r0, r4, r0, lsl #20
				outc (c);
    1a10:	0b3a0e03 	bleq	e85224 <__ccfg+0xe6527c>
    1a14:	0b390b3b 	bleq	e44708 <__ccfg+0xe24760>
    1a18:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 18fc <__inserial+0xb4>
				if (c == '\0')
    1a1c:	00000c3c 	andeq	r0, r0, ip, lsr ip
				return d;
    1a20:	0b000f0b 	bleq	5654 <__exidx_end+0x28c8>
}
    1a24:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a28:	01010c00 	tsteq	r1, r0, lsl #24
			switch (c) {
    1a2c:	13011349 	movwne	r1, #4937	; 0x1349
    1a30:	210d0000 	mrscs	r0, (UNDEF: 13)
    1a34:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
				for (i = 12; ; i -= 4) {
    1a38:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
				val = (word) va_arg (ap, aword);
    1a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
						[ (val >> i) & 0xf ]);
    1a40:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a44:	150f0000 	strne	r0, [pc, #-0]	; 1a4c <__pi_vfparse+0xc8>
    1a48:	010c2701 	tsteq	ip, r1, lsl #14
					outc (__pi_hex_enc_table
    1a4c:	10000013 	andne	r0, r0, r3, lsl r0
    1a50:	13490005 	movtne	r0, #36869	; 0x9005
					if (i == 0)
    1a54:	34110000 	ldrcc	r0, [r1], #-0
    1a58:	3a0e0300 	bcc	382660 <__ccfg+0x3626b8>
				for (i = 12; ; i -= 4) {
    1a5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				val = (word) va_arg (ap, aword);
    1a60:	3f13490b 	svccc	0x0013490b
				if (c == 'd' && (val & 0x8000) != 0) {
    1a64:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				val = (word) va_arg (ap, aword);
    1a68:	01131200 	tsteq	r3, r0, lsl #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1a6c:	0b3a0b0b 	bleq	e846a0 <__ccfg+0xe646f8>
    1a70:	0b39053b 	bleq	e42f64 <__ccfg+0xe22fbc>
					outc ('-');
    1a74:	00001301 	andeq	r1, r0, r1, lsl #6
    1a78:	03000d13 	movweq	r0, #3347	; 0xd13
					val = (~val) + 1;
    1a7c:	3b0b3a0e 	blcc	2d02bc <__ccfg+0x2b0314>
    1a80:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				for (i = 12; ; i -= 4) {
    1a84:	000b3813 	andeq	r3, fp, r3, lsl r8
				enci (10000);
    1a88:	01131400 	tsteq	r3, r0, lsl #8
    1a8c:	0b0b0e03 	bleq	2c52a0 <__ccfg+0x2a52f8>
    1a90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a94:	13010b39 	movwne	r0, #6969	; 0x1b39
    1a98:	21150000 	tstcs	r5, r0
    1a9c:	2f134900 	svccs	0x00134900
    1aa0:	1600000b 	strne	r0, [r0], -fp
    1aa4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 19f4 <__pi_vfparse+0x70>
    1aa8:	0b3a0e03 	bleq	e852bc <__ccfg+0xe65314>
    1aac:	0b390b3b 	bleq	e447a0 <__ccfg+0xe247f8>
    1ab0:	13490c27 	movtne	r0, #39975	; 0x9c27
    1ab4:	01120111 	tsteq	r2, r1, lsl r1
    1ab8:	00000a40 	andeq	r0, r0, r0, asr #20
    1abc:	03000517 	movweq	r0, #1303	; 0x517
    1ac0:	3b0b3a08 	blcc	2d02e8 <__ccfg+0x2b0340>
    1ac4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ac8:	00060213 	andeq	r0, r6, r3, lsl r2
    1acc:	00341800 	eorseq	r1, r4, r0, lsl #16
				if (c == 'd' || c == 'u') {
    1ad0:	0b3a0e03 	bleq	e852e4 <__ccfg+0xe6533c>
    1ad4:	0b390b3b 	bleq	e447c8 <__ccfg+0xe24820>
					if (c == 'd' &&
    1ad8:	06021349 	streq	r1, [r2], -r9, asr #6
					val = va_arg (ap, lword);
    1adc:	01000000 	mrseq	r0, (UNDEF: 0)
					fm++;
    1ae0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
					if (c == 'd' &&
    1ae4:	0e030b13 	vmoveq.32	d3[0], r0
    1ae8:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
						outc ('-');
    1aec:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1af0:	24020000 	strcs	r0, [r2], #-0
						val = (~val) + 1;
    1af4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				enci (10000);
    1af8:	000e030b 	andeq	r0, lr, fp, lsl #6
					enci (1000000000UL);
    1afc:	00160300 	andseq	r0, r6, r0, lsl #6
    1b00:	0b3a0e03 	bleq	e85314 <__ccfg+0xe6536c>
    1b04:	0b390b3b 	bleq	e447f8 <__ccfg+0xe24850>
    1b08:	00001349 	andeq	r1, r0, r9, asr #6
    1b0c:	0b002404 	bleq	ab24 <__exidx_end+0x7d98>
    1b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1b14:	05000008 	streq	r0, [r0, #-8]
    1b18:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1b1c:	0b3a0b0b 	bleq	e84750 <__ccfg+0xe647a8>
    1b20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1b24:	0d060000 	stceq	0, cr0, [r6, #-0]
    1b28:	490e0300 	stmdbmi	lr, {r8, r9}
    1b2c:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1b30:	0700000c 	streq	r0, [r0, -ip]
    1b34:	0b0b000f 	bleq	2c1b78 <__ccfg+0x2a1bd0>
    1b38:	26080000 	strcs	r0, [r8], -r0
    1b3c:	00134900 	andseq	r4, r3, r0, lsl #18
				} else if (c == 'x') {
    1b40:	00350900 	eorseq	r0, r5, r0, lsl #18
					for (i = 28; ; i -= 4) {
    1b44:	00001349 	andeq	r1, r0, r9, asr #6
					val = va_arg (ap, lword);
    1b48:	0b01130a 	bleq	46778 <__ccfg+0x267d0>
							[ (val >> i) & 0xf ]);
    1b4c:	3b0b3a0b 	blcc	2d0380 <__ccfg+0x2b03d8>
    1b50:	010b390b 	tsteq	fp, fp, lsl #18
						outc (__pi_hex_enc_table
    1b54:	0b000013 	bleq	1ba8 <__pi_vfparse+0x224>
    1b58:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b5c:	0b3b0b3a 	bleq	ec484c <__ccfg+0xea48a4>
						if (i == 0)
    1b60:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b64:	0b0d0b0b 	bleq	344798 <__ccfg+0x3247f0>
					for (i = 28; ; i -= 4) {
    1b68:	0b380b0c 	bleq	e047a0 <__ccfg+0xde47f8>
					outc ('%');
    1b6c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1b70:	3a0e0300 	bcc	382778 <__ccfg+0x3627d0>
    1b74:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					outc ('l');
    1b78:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1b7c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
				val = (word) va_arg (ap, aword);
    1b80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				outc (val);
    1b84:	0b3b0b3a 	bleq	ec4874 <__ccfg+0xea48cc>
    1b88:	13490b39 	movtne	r0, #39737	; 0x9b39
				while (*st != '\0') {
    1b8c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1b90:	0f0e0000 	svceq	0x000e0000
    1b94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1b98:	0f000013 	svceq	0x00000013
					outc (*st);
    1b9c:	13490101 	movtne	r0, #37121	; 0x9101
    1ba0:	00001301 	andeq	r1, r0, r1, lsl #6
					st++;
    1ba4:	00002110 	andeq	r2, r0, r0, lsl r1
		c = *fm++;
    1ba8:	00161100 	andseq	r1, r6, r0, lsl #2
    1bac:	0b3a0e03 	bleq	e853c0 <__ccfg+0xe65418>
    1bb0:	0b39053b 	bleq	e430a4 <__ccfg+0xe230fc>
char *vform (char *res, const char *fm, va_list aq) {
    1bb4:	00001349 	andeq	r1, r0, r9, asr #6
    1bb8:	27011512 	smladcs	r1, r2, r5, r1
	if (res != NULL) {
    1bbc:	0013010c 	andseq	r0, r3, ip, lsl #2
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1bc0:	00051300 	andeq	r1, r5, r0, lsl #6
    1bc4:	00001349 	andeq	r1, r0, r9, asr #6
    1bc8:	03003414 	movweq	r3, #1044	; 0x414
}
    1bcc:	3b0b3a0e 	blcc	2d040c <__ccfg+0x2b0464>
    1bd0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	fml = strlen (fm) + 17;
    1bd4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1bd8:	1500000c 	strne	r0, [r0, #-12]
    1bdc:	0b0b0113 	bleq	2c2030 <__ccfg+0x2a2088>
	if ((res = (char*) umalloc (fml)) == NULL)
    1be0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1be4:	13010b39 	movwne	r0, #6969	; 0x1b39
    1be8:	0d160000 	ldceq	0, cr0, [r6, #-0]
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1bec:	3a0e0300 	bcc	3827f4 <__ccfg+0x36284c>
    1bf0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bf4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1bf8:	1700000b 	strne	r0, [r0, -fp]
		ufree (res);
    1bfc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		goto Again;
    1c00:	0b3a0b0b 	bleq	e84834 <__ccfg+0xe6488c>
	if (buf == NULL || fmt == NULL)
    1c04:	0b39053b 	bleq	e430f8 <__ccfg+0xe23150>
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c08:	00001301 	andeq	r1, r0, r1, lsl #6
	if (buf == NULL || fmt == NULL)
    1c0c:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1c10:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1c14:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
		    	    case 'u': scanu (lword); break;
    1c18:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			while (isspace (*buf)) buf++;
    1c1c:	0b3b0b3a 	bleq	ec490c <__ccfg+0xea4964>
    1c20:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	while (*fmt != '\0') {
    1c24:	01111349 	tsteq	r1, r9, asr #6
		if (*fmt++ != '%')
    1c28:	0a400112 	beq	1002078 <__ccfg+0xfe20d0>
		switch (*fmt++) {
    1c2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1c30:	0300051a 	movweq	r0, #1306	; 0x51a
    1c34:	3b0b3a08 	blcc	2d045c <__ccfg+0x2b04b4>
    1c38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c3c:	00060213 	andeq	r0, r6, r3, lsl r2
    1c40:	00051b00 	andeq	r1, r5, r0, lsl #22
    1c44:	0b3a0803 	bleq	e83c58 <__ccfg+0xe63cb0>
}
    1c48:	0b390b3b 	bleq	e4493c <__ccfg+0xe24994>
		switch (*fmt++) {
    1c4c:	0a021349 	beq	86978 <__ccfg+0x669d0>
    1c50:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1c54:	1d000000 	stcne	0, cr0, [r0, #-0]
    1c58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			while (isspace (*buf)) buf++;
    1c5c:	0b3b0b3a 	bleq	ec494c <__ccfg+0xea49a4>
    1c60:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c64:	00000602 	andeq	r0, r0, r2, lsl #12
    1c68:	0300341e 	movweq	r3, #1054	; 0x41e
    1c6c:	3b0b3a08 	blcc	2d0494 <__ccfg+0x2b04ec>
    1c70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			if (*buf == '\0')
    1c74:	00060213 	andeq	r0, r6, r3, lsl r2
			if (*buf != ',') {
    1c78:	00341f00 	eorseq	r1, r4, r0, lsl #30
			sap = va_arg (ap, char*);
    1c7c:	0b3a0803 	bleq	e83c90 <__ccfg+0xe63ce8>
			nc++;
    1c80:	0b390b3b 	bleq	e44974 <__ccfg+0xe249cc>
			if (*buf != ',') {
    1c84:	0a021349 	beq	869b0 <__ccfg+0x66a08>
				while (!isspace (*buf) && *buf != ',' &&
    1c88:	01000000 	mrseq	r0, (UNDEF: 0)
    1c8c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1c90:	0e030b13 	vmoveq.32	d3[0], r0
    1c94:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1c98:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1c9c:	24020000 	strcs	r0, [r2], #-0
    1ca0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			while (isspace (*buf)) buf++;
    1ca4:	000e030b 	andeq	r0, lr, fp, lsl #6
    1ca8:	00160300 	andseq	r0, r6, r0, lsl #6
    1cac:	0b3a0e03 	bleq	e854c0 <__ccfg+0xe65518>
    1cb0:	0b390b3b 	bleq	e449a4 <__ccfg+0xe249fc>
    1cb4:	00001349 	andeq	r1, r0, r9, asr #6
			if (*buf == ',') buf++;
    1cb8:	0b002404 	bleq	acd0 <__exidx_end+0x7f44>
    1cbc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			*sap = '\0';
    1cc0:	05000008 	streq	r0, [r0, #-8]
			break;
    1cc4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		    case 'd': scani (word); break;
    1cc8:	0b3a0b0b 	bleq	e848fc <__ccfg+0xe64954>
    1ccc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1cd0:	0d060000 	stceq	0, cr0, [r6, #-0]
    1cd4:	490e0300 	stmdbmi	lr, {r8, r9}
    1cd8:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1cdc:	0700000c 	streq	r0, [r0, -ip]
    1ce0:	0b0b000f 	bleq	2c1d24 <__ccfg+0x2a1d7c>
    1ce4:	26080000 	strcs	r0, [r8], -r0
    1ce8:	00134900 	andseq	r4, r3, r0, lsl #18
    1cec:	00350900 	eorseq	r0, r5, r0, lsl #18
    1cf0:	00001349 	andeq	r1, r0, r9, asr #6
    1cf4:	0b01130a 	bleq	46924 <__ccfg+0x2697c>
    1cf8:	3b0b3a0b 	blcc	2d052c <__ccfg+0x2b0584>
    1cfc:	010b390b 	tsteq	fp, fp, lsl #18
    1d00:	0b000013 	bleq	1d54 <vscan+0x150>
    1d04:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d08:	0b3b0b3a 	bleq	ec49f8 <__ccfg+0xea4a50>
    1d0c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d10:	0b0d0b0b 	bleq	344944 <__ccfg+0x32499c>
    1d14:	0b380b0c 	bleq	e0494c <__ccfg+0xde49a4>
    1d18:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1d1c:	3a0e0300 	bcc	382924 <__ccfg+0x36297c>
    1d20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d24:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1d28:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1d2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d30:	0b3b0b3a 	bleq	ec4a20 <__ccfg+0xea4a78>
    1d34:	13490b39 	movtne	r0, #39737	; 0x9b39
		    case 'u': scanu (word); break;
    1d38:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1d3c:	0f0e0000 	svceq	0x000e0000
    1d40:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d44:	0f000013 	svceq	0x00000013
    1d48:	13490101 	movtne	r0, #37121	; 0x9101
    1d4c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d50:	00002110 	andeq	r2, r0, r0, lsl r1
    1d54:	00161100 	andseq	r1, r6, r0, lsl #2
    1d58:	0b3a0e03 	bleq	e8556c <__ccfg+0xe655c4>
    1d5c:	0b39053b 	bleq	e43250 <__ccfg+0xe232a8>
    1d60:	00001349 	andeq	r1, r0, r9, asr #6
    1d64:	27011512 	smladcs	r1, r2, r5, r1
    1d68:	0013010c 	andseq	r0, r3, ip, lsl #2
    1d6c:	00051300 	andeq	r1, r5, r0, lsl #6
    1d70:	00001349 	andeq	r1, r0, r9, asr #6
    1d74:	03003414 	movweq	r3, #1044	; 0x414
    1d78:	3b0b3a0e 	blcc	2d05b8 <__ccfg+0x2b0610>
    1d7c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		    case 'x': scanx (word); break;
    1d80:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1d84:	1500000c 	strne	r0, [r0, #-12]
    1d88:	0b0b0113 	bleq	2c21dc <__ccfg+0x2a2234>
    1d8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d90:	13010b39 	movwne	r0, #6969	; 0x1b39
    1d94:	0d160000 	ldceq	0, cr0, [r6, #-0]
    1d98:	3a0e0300 	bcc	3829a0 <__ccfg+0x3629f8>
    1d9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1da0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1da4:	1700000b 	strne	r0, [r0, -fp]
    1da8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1dac:	0b3a0b0b 	bleq	e849e0 <__ccfg+0xe64a38>
    1db0:	0b39053b 	bleq	e432a4 <__ccfg+0xe232fc>
    1db4:	00001301 	andeq	r1, r0, r1, lsl #6
    1db8:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1dbc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1dc0:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1dc4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1dc8:	0b3b0b3a 	bleq	ec4ab8 <__ccfg+0xea4b10>
    1dcc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1dd0:	01111349 	tsteq	r1, r9, asr #6
    1dd4:	0a400112 	beq	1002224 <__ccfg+0xfe227c>
    1dd8:	00001301 	andeq	r1, r0, r1, lsl #6
    1ddc:	0300051a 	movweq	r0, #1306	; 0x51a
    1de0:	3b0b3a08 	blcc	2d0608 <__ccfg+0x2b0660>
    1de4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1de8:	00060213 	andeq	r0, r6, r3, lsl r2
    1dec:	00051b00 	andeq	r1, r5, r0, lsl #22
    1df0:	0b3a0803 	bleq	e83e04 <__ccfg+0xe63e5c>
    1df4:	0b390b3b 	bleq	e44ae8 <__ccfg+0xe24b40>
			switch (*fmt++) {
    1df8:	0a021349 	beq	86b24 <__ccfg+0x66b7c>
    1dfc:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1e00:	1d000000 	stcne	0, cr0, [r0, #-0]
    1e04:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e08:	0b3b0b3a 	bleq	ec4af8 <__ccfg+0xea4b50>
    1e0c:	13490b39 	movtne	r0, #39737	; 0x9b39
		    	    case 'd': scani (lword); break;
    1e10:	00000602 	andeq	r0, r0, r2, lsl #12
    1e14:	0300341e 	movweq	r3, #1054	; 0x41e
    1e18:	3b0b3a08 	blcc	2d0640 <__ccfg+0x2b0698>
    1e1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e20:	000a0213 	andeq	r0, sl, r3, lsl r2
    1e24:	11010000 	mrsne	r0, (UNDEF: 1)
    1e28:	130e2501 	movwne	r2, #58625	; 0xe501
    1e2c:	1b0e030b 	blne	382a60 <__ccfg+0x362ab8>
    1e30:	1106550e 	tstne	r6, lr, lsl #10
    1e34:	00061001 	andeq	r1, r6, r1
    1e38:	00240200 	eoreq	r0, r4, r0, lsl #4
    1e3c:	0b3e0b0b 	bleq	f84a70 <__ccfg+0xf64ac8>
    1e40:	00000e03 	andeq	r0, r0, r3, lsl #28
    1e44:	03001603 	movweq	r1, #1539	; 0x603
    1e48:	3b0b3a0e 	blcc	2d0688 <__ccfg+0x2b06e0>
    1e4c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e50:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1e54:	0b0b0024 	bleq	2c1eec <__ccfg+0x2a1f44>
    1e58:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1e5c:	26050000 	strcs	r0, [r5], -r0
    1e60:	00134900 	andseq	r4, r3, r0, lsl #18
    1e64:	00350600 	eorseq	r0, r5, r0, lsl #12
    1e68:	00001349 	andeq	r1, r0, r9, asr #6
		    	    case 'x': scanx (lword); break;
    1e6c:	0b011307 	bleq	46a90 <__ccfg+0x26ae8>
    1e70:	3b0b3a0b 	blcc	2d06a4 <__ccfg+0x2b06fc>
    1e74:	010b390b 	tsteq	fp, fp, lsl #18
    1e78:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1e7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e80:	0b3b0b3a 	bleq	ec4b70 <__ccfg+0xea4bc8>
    1e84:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e88:	0b0d0b0b 	bleq	344abc <__ccfg+0x324b14>
    1e8c:	0b380b0c 	bleq	e04ac4 <__ccfg+0xde4b1c>
    1e90:	0d090000 	stceq	0, cr0, [r9, #-0]
    1e94:	3a0e0300 	bcc	382a9c <__ccfg+0x362af4>
    1e98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1ea0:	0a00000b 	beq	1ed4 <vscan+0x2d0>
    1ea4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ea8:	0b3b0b3a 	bleq	ec4b98 <__ccfg+0xea4bf0>
    1eac:	13490b39 	movtne	r0, #39737	; 0x9b39
    1eb0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1eb4:	0f0b0000 	svceq	0x000b0000
    1eb8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1ebc:	0c000013 	stceq	0, cr0, [r0], {19}
    1ec0:	13490101 	movtne	r0, #37121	; 0x9101
    1ec4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ec8:	0000210d 	andeq	r2, r0, sp, lsl #2
    1ecc:	00160e00 	andseq	r0, r6, r0, lsl #28
    1ed0:	0b3a0e03 	bleq	e856e4 <__ccfg+0xe6573c>
    1ed4:	0b39053b 	bleq	e433c8 <__ccfg+0xe23420>
    1ed8:	00001349 	andeq	r1, r0, r9, asr #6
		    	    case 'd': scani (lword); break;
    1edc:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1ee0:	0013010c 	andseq	r0, r3, ip, lsl #2
    1ee4:	00051000 	andeq	r1, r5, r0
    1ee8:	00001349 	andeq	r1, r0, r9, asr #6
    1eec:	03003411 	movweq	r3, #1041	; 0x411
    1ef0:	3b0b3a0e 	blcc	2d0730 <__ccfg+0x2b0788>
    1ef4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		    	    case 'u': scanu (lword); break;
    1ef8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1efc:	1200000c 	andne	r0, r0, #12
    1f00:	0b0b0113 	bleq	2c2354 <__ccfg+0x2a23ac>
    1f04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f08:	13010b39 	movwne	r0, #6969	; 0x1b39
    1f0c:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1f10:	3a0e0300 	bcc	382b18 <__ccfg+0x362b70>
    1f14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f18:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f1c:	1400000b 	strne	r0, [r0], #-11
    1f20:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1f24:	0b3a0b0b 	bleq	e84b58 <__ccfg+0xe64bb0>
    1f28:	0b39053b 	bleq	e4341c <__ccfg+0xe23474>
    1f2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f30:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1f34:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f38:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1f3c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		    	    case 'x': scanx (lword); break;
    1f40:	0b3b0b3a 	bleq	ec4c30 <__ccfg+0xea4c88>
    1f44:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if ((c = *buf++) == '\0')
    1f48:	01120111 	tsteq	r2, r1, lsl r1
    1f4c:	13010a40 	movwne	r0, #6720	; 0x1a40
			sap = va_arg (ap, char*);
    1f50:	05170000 	ldreq	r0, [r7, #-0]
			nc++;
    1f54:	3a0e0300 	bcc	382b5c <__ccfg+0x362bb4>
			break;
    1f58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (isspace (*buf)) buf++;
    1f5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f60:	18000006 	stmdane	r0, {r1, r2}
    1f64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
						*sap++ = *buf++;
    1f68:	0b3b0b3a 	bleq	ec4c58 <__ccfg+0xea4cb0>
    1f6c:	13490b39 	movtne	r0, #39737	; 0x9b39
			while (isspace (*buf)) buf++;
    1f70:	00000602 	andeq	r0, r0, r2, lsl #12
    1f74:	03000a19 	movweq	r0, #2585	; 0xa19
    1f78:	3b0b3a0e 	blcc	2d07b8 <__ccfg+0x2b0810>
		return 0;
    1f7c:	000b390b 	andeq	r3, fp, fp, lsl #18
    1f80:	010b1a00 	tsteq	fp, r0, lsl #20
		    case 'x': scanx (word); break;
    1f84:	00000655 	andeq	r0, r0, r5, asr r6
    1f88:	0300341b 	movweq	r3, #1051	; 0x41b
		    	    case 'x': scanx (lword); break;
    1f8c:	3b0b3a08 	blcc	2d07b4 <__ccfg+0x2b080c>
    1f90:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f94:	000a0213 	andeq	r0, sl, r3, lsl r2
    1f98:	11010000 	mrsne	r0, (UNDEF: 1)
    1f9c:	130e2501 	movwne	r2, #58625	; 0xe501
    1fa0:	1b0e030b 	blne	382bd4 <__ccfg+0x362c2c>
    1fa4:	1106550e 	tstne	r6, lr, lsl #10
    1fa8:	00061001 	andeq	r1, r6, r1
    1fac:	00240200 	eoreq	r0, r4, r0, lsl #4
    1fb0:	0b3e0b0b 	bleq	f84be4 <__ccfg+0xf64c3c>
    1fb4:	00000e03 	andeq	r0, r0, r3, lsl #28
    1fb8:	03001603 	movweq	r1, #1539	; 0x603
    1fbc:	3b0b3a0e 	blcc	2d07fc <__ccfg+0x2b0854>
    1fc0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fc4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1fc8:	0b0b0024 	bleq	2c2060 <__ccfg+0x2a20b8>
    1fcc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1fd0:	26050000 	strcs	r0, [r5], -r0
    1fd4:	00134900 	andseq	r4, r3, r0, lsl #18
    1fd8:	00350600 	eorseq	r0, r5, r0, lsl #12
    1fdc:	00001349 	andeq	r1, r0, r9, asr #6
    1fe0:	0b000f07 	bleq	5c04 <__exidx_end+0x2e78>
    1fe4:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fe8:	01130800 	tsteq	r3, r0, lsl #16
    1fec:	0b3a0b0b 	bleq	e84c20 <__ccfg+0xe64c78>
    1ff0:	0b390b3b 	bleq	e44ce4 <__ccfg+0xe24d3c>
    1ff4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ff8:	03000d09 	movweq	r0, #3337	; 0xd09
    1ffc:	3b0b3a0e 	blcc	2d083c <__ccfg+0x2b0894>
    2000:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2004:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2008:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    200c:	0a00000b 	beq	2040 <TrimAfterColdResetWakeupFromShutDown+0x54>
    2010:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2014:	0b3b0b3a 	bleq	ec4d04 <__ccfg+0xea4d5c>
    2018:	13490b39 	movtne	r0, #39737	; 0x9b39
    201c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2020:	0300340b 	movweq	r3, #1035	; 0x40b
    2024:	3b0b3a0e 	blcc	2d0864 <__ccfg+0x2b08bc>
    2028:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    202c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2030:	0c00000c 	stceq	0, cr0, [r0], {12}
    2034:	13490101 	movtne	r0, #37121	; 0x9101
    2038:	00001301 	andeq	r1, r0, r1, lsl #6
    203c:	0000210d 	andeq	r2, r0, sp, lsl #2
    2040:	00160e00 	andseq	r0, r6, r0, lsl #28
    2044:	0b3a0e03 	bleq	e85858 <__ccfg+0xe658b0>
    2048:	0b39053b 	bleq	e4353c <__ccfg+0xe23594>
    204c:	00001349 	andeq	r1, r0, r9, asr #6
    2050:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    2054:	0013010c 	andseq	r0, r3, ip, lsl #2
    2058:	00051000 	andeq	r1, r5, r0
    205c:	00001349 	andeq	r1, r0, r9, asr #6
    2060:	03003411 	movweq	r3, #1041	; 0x411
    2064:	3b0b3a0e 	blcc	2d08a4 <__ccfg+0x2b08fc>
    2068:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    206c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2070:	1200000c 	andne	r0, r0, #12
    2074:	0b0b0113 	bleq	2c24c8 <__ccfg+0x2a2520>
    2078:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    207c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2080:	0d130000 	ldceq	0, cr0, [r3, #-0]
    2084:	3a0e0300 	bcc	382c8c <__ccfg+0x362ce4>
    2088:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    208c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2090:	1400000b 	strne	r0, [r0], #-11
    2094:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2098:	0b3a0b0b 	bleq	e84ccc <__ccfg+0xe64d24>
    209c:	0b39053b 	bleq	e43590 <__ccfg+0xe235e8>
    20a0:	00001301 	andeq	r1, r0, r1, lsl #6
    20a4:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    20a8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    20ac:	00341600 	eorseq	r1, r4, r0, lsl #12
    20b0:	0b3a0e03 	bleq	e858c4 <__ccfg+0xe6591c>
    20b4:	0b390b3b 	bleq	e44da8 <__ccfg+0xe24e00>
    20b8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f9c <NOROM_AONBatMonTemperatureGetDegC+0x8>
    20bc:	00000a02 	andeq	r0, r0, r2, lsl #20
    20c0:	3f012e17 	svccc	0x00012e17
    20c4:	3a0e030c 	bcc	382cfc <__ccfg+0x362d54>
    20c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20cc:	110c270b 	tstne	ip, fp, lsl #14
    20d0:	40011201 	andmi	r1, r1, r1, lsl #4
    20d4:	1800000a 	stmdane	r0, {r1, r3}
    20d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    20dc:	0b3b0b3a 	bleq	ec4dcc <__ccfg+0xea4e24>
    20e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    20e4:	00000602 	andeq	r0, r0, r2, lsl #12
    20e8:	03003419 	movweq	r3, #1049	; 0x419
    20ec:	3b0b3a0e 	blcc	2d092c <__ccfg+0x2b0984>
    20f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20f4:	00060213 	andeq	r0, r6, r3, lsl r2
    20f8:	010b1a00 	tsteq	fp, r0, lsl #20
    20fc:	00000655 	andeq	r0, r0, r5, asr r6
    2100:	0300341b 	movweq	r3, #1051	; 0x41b
    2104:	3b0b3a08 	blcc	2d092c <__ccfg+0x2b0984>
    2108:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    210c:	000a0213 	andeq	r0, sl, r3, lsl r2
    2110:	11010000 	mrsne	r0, (UNDEF: 1)
    2114:	130e2501 	movwne	r2, #58625	; 0xe501
    2118:	1b0e030b 	blne	382d4c <__ccfg+0x362da4>
    211c:	1106550e 	tstne	r6, lr, lsl #10
    2120:	00061001 	andeq	r1, r6, r1
    2124:	00240200 	eoreq	r0, r4, r0, lsl #4
    2128:	0b3e0b0b 	bleq	f84d5c <__ccfg+0xf64db4>
    212c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2130:	03001603 	movweq	r1, #1539	; 0x603
    2134:	3b0b3a0e 	blcc	2d0974 <__ccfg+0x2b09cc>
    2138:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    213c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2140:	0b0b0024 	bleq	2c21d8 <__ccfg+0x2a2230>
    2144:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2148:	13050000 	movwne	r0, #20480	; 0x5000
    214c:	0b0e0301 	bleq	382d58 <__ccfg+0x362db0>
    2150:	3b0b3a0b 	blcc	2d0984 <__ccfg+0x2b09dc>
    2154:	0013010b 	andseq	r0, r3, fp, lsl #2
    2158:	000d0600 	andeq	r0, sp, r0, lsl #12
    215c:	13490e03 	movtne	r0, #40451	; 0x9e03
    2160:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2164:	0f070000 	svceq	0x00070000
    2168:	000b0b00 	andeq	r0, fp, r0, lsl #22
    216c:	00260800 	eoreq	r0, r6, r0, lsl #16
    2170:	00001349 	andeq	r1, r0, r9, asr #6
    2174:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2178:	0a000013 	beq	21cc <NOROM_SetupSetVddrLevel+0x68>
    217c:	0b0b000f 	bleq	2c21c0 <__ccfg+0x2a2218>
    2180:	00001349 	andeq	r1, r0, r9, asr #6
    2184:	0b01130b 	bleq	46db8 <__ccfg+0x26e10>
    2188:	3b0b3a0b 	blcc	2d09bc <__ccfg+0x2b0a14>
    218c:	010b390b 	tsteq	fp, fp, lsl #18
    2190:	0c000013 	stceq	0, cr0, [r0], {19}
    2194:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2198:	0b3b0b3a 	bleq	ec4e88 <__ccfg+0xea4ee0>
    219c:	13490b39 	movtne	r0, #39737	; 0x9b39
    21a0:	0b0d0b0b 	bleq	344dd4 <__ccfg+0x324e2c>
    21a4:	0b380b0c 	bleq	e04ddc <__ccfg+0xde4e34>
    21a8:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    21ac:	3a0e0300 	bcc	382db4 <__ccfg+0x362e0c>
    21b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    21b8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    21bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21c0:	0b3b0b3a 	bleq	ec4eb0 <__ccfg+0xea4f08>
    21c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    21c8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    21cc:	010f0000 	mrseq	r0, CPSR
    21d0:	01134901 	tsteq	r3, r1, lsl #18
    21d4:	10000013 	andne	r0, r0, r3, lsl r0
    21d8:	00000021 	andeq	r0, r0, r1, lsr #32
    21dc:	03001611 	movweq	r1, #1553	; 0x611
    21e0:	3b0b3a0e 	blcc	2d0a20 <__ccfg+0x2b0a78>
    21e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21e8:	12000013 	andne	r0, r0, #19
    21ec:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    21f0:	00001301 	andeq	r1, r0, r1, lsl #6
    21f4:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    21f8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    21fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2204:	13490b39 	movtne	r0, #39737	; 0x9b39
    2208:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    220c:	13150000 	tstne	r5, #0
    2210:	3a0b0b01 	bcc	2c4e1c <__ccfg+0x2a4e74>
    2214:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2218:	0013010b 	andseq	r0, r3, fp, lsl #2
    221c:	000d1600 	andeq	r1, sp, r0, lsl #12
    2220:	0b3a0e03 	bleq	e85a34 <__ccfg+0xe65a8c>
    2224:	0b39053b 	bleq	e43718 <__ccfg+0xe23770>
    2228:	0b381349 	bleq	e06f54 <__ccfg+0xde6fac>
    222c:	13170000 	tstne	r7, #0
    2230:	0b0e0301 	bleq	382e3c <__ccfg+0x362e94>
    2234:	3b0b3a0b 	blcc	2d0a68 <__ccfg+0x2b0ac0>
    2238:	010b3905 	tsteq	fp, r5, lsl #18
    223c:	18000013 	stmdane	r0, {r0, r1, r4}
    2240:	13490021 	movtne	r0, #36897	; 0x9021
    2244:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2248:	3f012e19 	svccc	0x00012e19
    224c:	3a0e030c 	bcc	382e84 <__ccfg+0x362edc>
    2250:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2254:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2258:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    225c:	010a4001 	tsteq	sl, r1
    2260:	1a000013 	bne	22b4 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    2264:	08030005 	stmdaeq	r3, {r0, r2}
    2268:	0b3b0b3a 	bleq	ec4f58 <__ccfg+0xea4fb0>
    226c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2270:	00000602 	andeq	r0, r0, r2, lsl #12
    2274:	0300341b 	movweq	r3, #1051	; 0x41b
    2278:	3b0b3a08 	blcc	2d0aa0 <__ccfg+0x2b0af8>
    227c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2280:	00060213 	andeq	r0, r6, r3, lsl r2
    2284:	000a1c00 	andeq	r1, sl, r0, lsl #24
    2288:	0b3a0e03 	bleq	e85a9c <__ccfg+0xe65af4>
    228c:	0b390b3b 	bleq	e44f80 <__ccfg+0xe24fd8>
    2290:	00000111 	andeq	r0, r0, r1, lsl r1
    2294:	3f012e1d 	svccc	0x00012e1d
    2298:	3a0e030c 	bcc	382ed0 <__ccfg+0x362f28>
    229c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22a0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    22a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    22a8:	000a4001 	andeq	r4, sl, r1
    22ac:	00341e00 	eorseq	r1, r4, r0, lsl #28
    22b0:	0b3a0803 	bleq	e842c4 <__ccfg+0xe6431c>
    22b4:	0b390b3b 	bleq	e44fa8 <__ccfg+0xe25000>
    22b8:	0a021349 	beq	86fe4 <__ccfg+0x6703c>
    22bc:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    22c0:	3a0e0301 	bcc	382ecc <__ccfg+0x362f24>
    22c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22c8:	110c270b 	tstne	ip, fp, lsl #14
    22cc:	40011201 	andmi	r1, r1, r1, lsl #4
    22d0:	010a480a 	tsteq	sl, sl, lsl #16
    22d4:	20000013 	andcs	r0, r0, r3, lsl r0
    22d8:	08030005 	stmdaeq	r3, {r0, r2}
    22dc:	0b3b0b3a 	bleq	ec4fcc <__ccfg+0xea5024>
    22e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    22e4:	00000a02 	andeq	r0, r0, r2, lsl #20
    22e8:	03000a21 	movweq	r0, #2593	; 0xa21
    22ec:	3b0b3a08 	blcc	2d0b14 <__ccfg+0x2b0b6c>
    22f0:	110b390b 	tstne	fp, fp, lsl #18
    22f4:	22000001 	andcs	r0, r0, #1
    22f8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    22fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2300:	03003423 	movweq	r3, #1059	; 0x423
    2304:	3b0b3a08 	blcc	2d0b2c <__ccfg+0x2b0b84>
    2308:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    230c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    2310:	0111010b 	tsteq	r1, fp, lsl #2
    2314:	13010112 	movwne	r0, #4370	; 0x1112
    2318:	0b250000 	bleq	942320 <__ccfg+0x922378>
    231c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2320:	00000001 	andeq	r0, r0, r1
    2324:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2328:	030b130e 	movweq	r1, #45838	; 0xb30e
    232c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2330:	10011106 	andne	r1, r1, r6, lsl #2
    2334:	02000006 	andeq	r0, r0, #6
    2338:	0b0b0024 	bleq	2c23d0 <__ccfg+0x2a2428>
    233c:	0e030b3e 	vmoveq.16	d3[0], r0
    2340:	16030000 	strne	r0, [r3], -r0
    2344:	3a0e0300 	bcc	382f4c <__ccfg+0x362fa4>
    2348:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    234c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2350:	00240400 	eoreq	r0, r4, r0, lsl #8
    2354:	0b3e0b0b 	bleq	f84f88 <__ccfg+0xf64fe0>
    2358:	00000803 	andeq	r0, r0, r3, lsl #16
    235c:	03011305 	movweq	r1, #4869	; 0x1305
    2360:	3a0b0b0e 	bcc	2c4fa0 <__ccfg+0x2a4ff8>
    2364:	010b3b0b 	tsteq	fp, fp, lsl #22
    2368:	06000013 			; <UNDEFINED> instruction: 0x06000013
    236c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2370:	0b381349 	bleq	e0709c <__ccfg+0xde70f4>
    2374:	00000c34 	andeq	r0, r0, r4, lsr ip
    2378:	0b000f07 	bleq	5f9c <__exidx_end+0x3210>
    237c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2380:	13490026 	movtne	r0, #36902	; 0x9026
    2384:	35090000 	strcc	r0, [r9, #-0]
    2388:	00134900 	andseq	r4, r3, r0, lsl #18
    238c:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2390:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2394:	130b0000 	movwne	r0, #45056	; 0xb000
    2398:	3a0b0b01 	bcc	2c4fa4 <__ccfg+0x2a4ffc>
    239c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    23a4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    23a8:	0b3a0e03 	bleq	e85bbc <__ccfg+0xe65c14>
    23ac:	0b390b3b 	bleq	e450a0 <__ccfg+0xe250f8>
    23b0:	0b0b1349 	bleq	2c70dc <__ccfg+0x2a7134>
    23b4:	0b0c0b0d 	bleq	304ff0 <__ccfg+0x2e5048>
    23b8:	00000b38 	andeq	r0, r0, r8, lsr fp
    23bc:	03000d0d 	movweq	r0, #3341	; 0xd0d
    23c0:	3b0b3a0e 	blcc	2d0c00 <__ccfg+0x2b0c58>
    23c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    23c8:	000b3813 	andeq	r3, fp, r3, lsl r8
    23cc:	00340e00 	eorseq	r0, r4, r0, lsl #28
    23d0:	0b3a0e03 	bleq	e85be4 <__ccfg+0xe65c3c>
    23d4:	0b390b3b 	bleq	e450c8 <__ccfg+0xe25120>
    23d8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 22bc <NOROM_SetupGetTrimForAnabypassValue1+0x30>
    23dc:	00000c3c 	andeq	r0, r0, ip, lsr ip
    23e0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    23e4:	00130113 	andseq	r0, r3, r3, lsl r1
    23e8:	00211000 	eoreq	r1, r1, r0
    23ec:	16110000 	ldrne	r0, [r1], -r0
    23f0:	3a0e0300 	bcc	382ff8 <__ccfg+0x363050>
    23f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    23fc:	01151200 	tsteq	r5, r0, lsl #4
    2400:	13010c27 	movwne	r0, #7207	; 0x1c27
    2404:	05130000 	ldreq	r0, [r3, #-0]
    2408:	00134900 	andseq	r4, r3, r0, lsl #18
    240c:	00341400 	eorseq	r1, r4, r0, lsl #8
    2410:	0b3a0e03 	bleq	e85c24 <__ccfg+0xe65c7c>
    2414:	0b39053b 	bleq	e43908 <__ccfg+0xe23960>
    2418:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 22fc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>
    241c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2420:	0b011315 	bleq	4707c <__ccfg+0x270d4>
    2424:	3b0b3a0b 	blcc	2d0c58 <__ccfg+0x2b0cb0>
    2428:	010b3905 	tsteq	fp, r5, lsl #18
    242c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2430:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2434:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2438:	13490b39 	movtne	r0, #39737	; 0x9b39
    243c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2440:	03011317 	movweq	r1, #4887	; 0x1317
    2444:	3a0b0b0e 	bcc	2c5084 <__ccfg+0x2a50dc>
    2448:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    244c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2450:	00211800 	eoreq	r1, r1, r0, lsl #16
    2454:	0b2f1349 	bleq	bc7180 <__ccfg+0xba71d8>
    2458:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    245c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2460:	3b0b3a0e 	blcc	2d0ca0 <__ccfg+0x2b0cf8>
    2464:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2468:	1113490c 	tstne	r3, ip, lsl #18
    246c:	40011201 	andmi	r1, r1, r1, lsl #4
    2470:	0013010a 	andseq	r0, r3, sl, lsl #2
    2474:	00051a00 	andeq	r1, r5, r0, lsl #20
    2478:	0b3a0803 	bleq	e8448c <__ccfg+0xe644e4>
    247c:	0b390b3b 	bleq	e45170 <__ccfg+0xe251c8>
    2480:	06021349 	streq	r1, [r2], -r9, asr #6
    2484:	341b0000 	ldrcc	r0, [fp], #-0
    2488:	3a080300 	bcc	203090 <__ccfg+0x1e30e8>
    248c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2490:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2494:	1c000006 	stcne	0, cr0, [r0], {6}
    2498:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    249c:	0b3b0b3a 	bleq	ec518c <__ccfg+0xea51e4>
    24a0:	00000b39 	andeq	r0, r0, r9, lsr fp
    24a4:	11010b1d 	tstne	r1, sp, lsl fp
    24a8:	01011201 	tsteq	r1, r1, lsl #4
    24ac:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    24b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    24b4:	0b3b0b3a 	bleq	ec51a4 <__ccfg+0xea51fc>
    24b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    24bc:	00000a02 	andeq	r0, r0, r2, lsl #20
    24c0:	55010b1f 	strpl	r0, [r1, #-2847]	; 0xfffff4e1
    24c4:	00130106 	andseq	r0, r3, r6, lsl #2
    24c8:	00342000 	eorseq	r2, r4, r0
    24cc:	0b3a0803 	bleq	e844e0 <__ccfg+0xe64538>
    24d0:	0b390b3b 	bleq	e451c4 <__ccfg+0xe2521c>
    24d4:	00001349 	andeq	r1, r0, r9, asr #6
    24d8:	55010b21 	strpl	r0, [r1, #-2849]	; 0xfffff4df
    24dc:	00000006 	andeq	r0, r0, r6
    24e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    24e4:	030b130e 	movweq	r1, #45838	; 0xb30e
    24e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    24ec:	10011117 	andne	r1, r1, r7, lsl r1
    24f0:	02000017 	andeq	r0, r0, #23
    24f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    24f8:	0b3b0b3a 	bleq	ec51e8 <__ccfg+0xea5240>
    24fc:	00001349 	andeq	r1, r0, r9, asr #6
    2500:	0b002403 	bleq	b514 <__exidx_end+0x8788>
    2504:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2508:	0400000e 	streq	r0, [r0], #-14
    250c:	0b0b0024 	bleq	2c25a4 <__ccfg+0x2a25fc>
    2510:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2514:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2518:	03193f01 	tsteq	r9, #1, 30
    251c:	3b0b3a0e 	blcc	2d0d5c <__ccfg+0x2b0db4>
    2520:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2524:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2528:	97184006 	ldrls	r4, [r8, -r6]
    252c:	00001942 	andeq	r1, r0, r2, asr #18
    2530:	03003406 	movweq	r3, #1030	; 0x406
    2534:	3b0b3a0e 	blcc	2d0d74 <__ccfg+0x2b0dcc>
    2538:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    253c:	07000017 	smladeq	r0, r7, r0, r0
    2540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2544:	0b3b0b3a 	bleq	ec5234 <__ccfg+0xea528c>
    2548:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    254c:	01000000 	mrseq	r0, (UNDEF: 0)
    2550:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2554:	0e030b13 	vmoveq.32	d3[0], r0
    2558:	17550e1b 	smmlane	r5, fp, lr, r0
    255c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2560:	24020000 	strcs	r0, [r2], #-0
    2564:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2568:	000e030b 	andeq	r0, lr, fp, lsl #6
    256c:	00160300 	andseq	r0, r6, r0, lsl #6
    2570:	0b3a0e03 	bleq	e85d84 <__ccfg+0xe65ddc>
    2574:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2578:	24040000 	strcs	r0, [r4], #-0
    257c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2580:	0008030b 	andeq	r0, r8, fp, lsl #6
    2584:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2588:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    258c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2590:	13491927 	movtne	r1, #39207	; 0x9927
    2594:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2598:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    259c:	00130119 	andseq	r0, r3, r9, lsl r1
    25a0:	00340600 	eorseq	r0, r4, r0, lsl #12
    25a4:	0b3a0e03 	bleq	e85db8 <__ccfg+0xe65e10>
    25a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25ac:	00001702 	andeq	r1, r0, r2, lsl #14
    25b0:	03003407 	movweq	r3, #1031	; 0x407
    25b4:	3b0b3a0e 	blcc	2d0df4 <__ccfg+0x2b0e4c>
    25b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    25bc:	08000018 	stmdaeq	r0, {r3, r4}
    25c0:	0b0b0117 	bleq	2c2a24 <__ccfg+0x2a2a7c>
    25c4:	0b3b0b3a 	bleq	ec52b4 <__ccfg+0xea530c>
    25c8:	00001301 	andeq	r1, r0, r1, lsl #6
    25cc:	03000d09 	movweq	r0, #3337	; 0xd09
    25d0:	3b0b3a0e 	blcc	2d0e10 <__ccfg+0x2b0e68>
    25d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    25d8:	00340a00 	eorseq	r0, r4, r0, lsl #20
    25dc:	0b3a0e03 	bleq	e85df0 <__ccfg+0xe65e48>
    25e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25e4:	010b0000 	mrseq	r0, (UNDEF: 11)
    25e8:	01134901 	tsteq	r3, r1, lsl #18
    25ec:	0c000013 	stceq	0, cr0, [r0], {19}
    25f0:	13490021 	movtne	r0, #36897	; 0x9021
    25f4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    25f8:	01110100 	tsteq	r1, r0, lsl #2
    25fc:	0b130e25 	bleq	4c5e98 <__ccfg+0x4a5ef0>
    2600:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2604:	01111755 	tsteq	r1, r5, asr r7
    2608:	00001710 	andeq	r1, r0, r0, lsl r7
    260c:	0b002402 	bleq	b61c <__exidx_end+0x8890>
    2610:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2614:	0300000e 	movweq	r0, #14
    2618:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    261c:	0b3b0b3a 	bleq	ec530c <__ccfg+0xea5364>
    2620:	00001349 	andeq	r1, r0, r9, asr #6
    2624:	0b002404 	bleq	b63c <__exidx_end+0x88b0>
    2628:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    262c:	05000008 	streq	r0, [r0, #-8]
    2630:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2634:	0b3a0e03 	bleq	e85e48 <__ccfg+0xe65ea0>
    2638:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    263c:	01111349 	tsteq	r1, r9, asr #6
    2640:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2644:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2648:	06000013 			; <UNDEFINED> instruction: 0x06000013
    264c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2650:	0b3b0b3a 	bleq	ec5340 <__ccfg+0xea5398>
    2654:	00001349 	andeq	r1, r0, r9, asr #6
    2658:	03003407 	movweq	r3, #1031	; 0x407
    265c:	3b0b3a0e 	blcc	2d0e9c <__ccfg+0x2b0ef4>
    2660:	00134905 	andseq	r4, r3, r5, lsl #18
    2664:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2668:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    266c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2670:	13491927 	movtne	r1, #39207	; 0x9927
    2674:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2678:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    267c:	00130119 	andseq	r0, r3, r9, lsl r1
    2680:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2684:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2688:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    268c:	01111927 	tsteq	r1, r7, lsr #18
    2690:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2694:	00194297 	mulseq	r9, r7, r2
    2698:	00050a00 	andeq	r0, r5, r0, lsl #20
    269c:	0b3a0e03 	bleq	e85eb0 <__ccfg+0xe65f08>
    26a0:	1349053b 	movtne	r0, #38203	; 0x953b
    26a4:	00001802 	andeq	r1, r0, r2, lsl #16
    26a8:	01110100 	tsteq	r1, r0, lsl #2
    26ac:	0b130e25 	bleq	4c5f48 <__ccfg+0x4a5fa0>
    26b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    26b4:	01111755 	tsteq	r1, r5, asr r7
    26b8:	00001710 	andeq	r1, r0, r0, lsl r7
    26bc:	0b002402 	bleq	b6cc <__exidx_end+0x8940>
    26c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    26c4:	0300000e 	movweq	r0, #14
    26c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    26cc:	0b3b0b3a 	bleq	ec53bc <__ccfg+0xea5414>
    26d0:	00001349 	andeq	r1, r0, r9, asr #6
    26d4:	0b002404 	bleq	b6ec <__exidx_end+0x8960>
    26d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    26dc:	05000008 	streq	r0, [r0, #-8]
    26e0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    26e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26e8:	0b201927 	bleq	808b8c <__ccfg+0x7e8be4>
    26ec:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    26f0:	3a0e0300 	bcc	3832f8 <__ccfg+0x363350>
    26f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26f8:	000b2019 	andeq	r2, fp, r9, lsl r0
    26fc:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    2700:	0b3a0e03 	bleq	e85f14 <__ccfg+0xe65f6c>
    2704:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2708:	06120111 			; <UNDEFINED> instruction: 0x06120111
    270c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2710:	00130119 	andseq	r0, r3, r9, lsl r1
    2714:	00050800 	andeq	r0, r5, r0, lsl #16
    2718:	0b3a0e03 	bleq	e85f2c <__ccfg+0xe65f84>
    271c:	1349053b 	movtne	r0, #38203	; 0x953b
    2720:	00001702 	andeq	r1, r0, r2, lsl #14
    2724:	03003409 	movweq	r3, #1033	; 0x409
    2728:	3b0b3a0e 	blcc	2d0f68 <__ccfg+0x2b0fc0>
    272c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2730:	0a000017 	beq	2794 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x58>
    2734:	1331001d 	teqne	r1, #29
    2738:	06120111 			; <UNDEFINED> instruction: 0x06120111
    273c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2740:	0b0b0000 	bleq	2c2748 <__ccfg+0x2a27a0>
    2744:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2748:	00130106 	andseq	r0, r3, r6, lsl #2
    274c:	82890c00 	addhi	r0, r9, #0, 24
    2750:	01110101 	tsteq	r1, r1, lsl #2
    2754:	13011331 	movwne	r1, #4913	; 0x1331
    2758:	8a0d0000 	bhi	342760 <__ccfg+0x3227b8>
    275c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2760:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2764:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    2768:	11010182 	smlabbne	r1, r2, r1, r0
    276c:	0f000001 	svceq	0x00000001
    2770:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2774:	0b3a0e03 	bleq	e85f88 <__ccfg+0xe65fe0>
    2778:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    277c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2780:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2784:	00130119 	andseq	r0, r3, r9, lsl r1
    2788:	00341000 	eorseq	r1, r4, r0
    278c:	0b3a0e03 	bleq	e85fa0 <__ccfg+0xe65ff8>
    2790:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2794:	00001702 	andeq	r1, r0, r2, lsl #14
    2798:	01828911 	orreq	r8, r2, r1, lsl r9
    279c:	31011100 	mrscc	r1, (UNDEF: 17)
    27a0:	12000013 	andne	r0, r0, #19
    27a4:	01018289 	smlabbeq	r1, r9, r2, r8
    27a8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    27ac:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    27b0:	03193f01 	tsteq	r9, #1, 30
    27b4:	3b0b3a0e 	blcc	2d0ff4 <__ccfg+0x2b104c>
    27b8:	3c19270b 	ldccc	7, cr2, [r9], {11}
    27bc:	00130119 	andseq	r0, r3, r9, lsl r1
    27c0:	00051400 	andeq	r1, r5, r0, lsl #8
    27c4:	00001349 	andeq	r1, r0, r9, asr #6
    27c8:	3f002e15 	svccc	0x00002e15
    27cc:	3a0e0319 	bcc	383438 <__ccfg+0x363490>
    27d0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27d4:	00193c19 	andseq	r3, r9, r9, lsl ip
    27d8:	002e1600 	eoreq	r1, lr, r0, lsl #12
    27dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    27e0:	0b3b0b3a 	bleq	ec54d0 <__ccfg+0xea5528>
    27e4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    27e8:	01000000 	mrseq	r0, (UNDEF: 0)
    27ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    27f0:	0e030b13 	vmoveq.32	d3[0], r0
    27f4:	17550e1b 	smmlane	r5, fp, lr, r0
    27f8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    27fc:	24020000 	strcs	r0, [r2], #-0
    2800:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2804:	000e030b 	andeq	r0, lr, fp, lsl #6
    2808:	00160300 	andseq	r0, r6, r0, lsl #6
    280c:	0b3a0e03 	bleq	e86020 <__ccfg+0xe66078>
    2810:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2814:	24040000 	strcs	r0, [r4], #-0
    2818:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    281c:	0008030b 	andeq	r0, r8, fp, lsl #6
    2820:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2824:	0b3a0e03 	bleq	e86038 <__ccfg+0xe66090>
    2828:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    282c:	0b201349 	bleq	807558 <__ccfg+0x7e75b0>
    2830:	00001301 	andeq	r1, r0, r1, lsl #6
    2834:	03000506 	movweq	r0, #1286	; 0x506
    2838:	3b0b3a0e 	blcc	2d1078 <__ccfg+0x2b10d0>
    283c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2840:	00340700 	eorseq	r0, r4, r0, lsl #14
    2844:	0b3a0e03 	bleq	e86058 <__ccfg+0xe660b0>
    2848:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    284c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2850:	03193f01 	tsteq	r9, #1, 30
    2854:	3b0b3a0e 	blcc	2d1094 <__ccfg+0x2b10ec>
    2858:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    285c:	010b2013 	tsteq	fp, r3, lsl r0
    2860:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2864:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2868:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    286c:	00001349 	andeq	r1, r0, r9, asr #6
    2870:	0300340a 	movweq	r3, #1034	; 0x40a
    2874:	3b0b3a0e 	blcc	2d10b4 <__ccfg+0x2b110c>
    2878:	00134905 	andseq	r4, r3, r5, lsl #18
    287c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    2880:	0b3a0e03 	bleq	e86094 <__ccfg+0xe660ec>
    2884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2888:	00000b20 	andeq	r0, r0, r0, lsr #22
    288c:	3f012e0c 	svccc	0x00012e0c
    2890:	3a0e0319 	bcc	3834fc <__ccfg+0x363554>
    2894:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2898:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    289c:	97184006 	ldrls	r4, [r8, -r6]
    28a0:	13011942 	movwne	r1, #6466	; 0x1942
    28a4:	050d0000 	streq	r0, [sp, #-0]
    28a8:	3a0e0300 	bcc	3834b0 <__ccfg+0x363508>
    28ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28b0:	00170213 	andseq	r0, r7, r3, lsl r2
    28b4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    28b8:	0b3a0e03 	bleq	e860cc <__ccfg+0xe66124>
    28bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28c0:	00001802 	andeq	r1, r0, r2, lsl #16
    28c4:	0300340f 	movweq	r3, #1039	; 0x40f
    28c8:	3b0b3a0e 	blcc	2d1108 <__ccfg+0x2b1160>
    28cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28d0:	10000017 	andne	r0, r0, r7, lsl r0
    28d4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28d8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    28dc:	0b590b58 	bleq	1645644 <__ccfg+0x162569c>
    28e0:	00001301 	andeq	r1, r0, r1, lsl #6
    28e4:	31000511 	tstcc	r0, r1, lsl r5
    28e8:	12000013 	andne	r0, r0, #19
    28ec:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    28f0:	34130000 	ldrcc	r0, [r3], #-0
    28f4:	02133100 	andseq	r3, r3, #0, 2
    28f8:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    28fc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2900:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2904:	0b590b58 	bleq	164566c <__ccfg+0x16256c4>
    2908:	0b150000 	bleq	542910 <__ccfg+0x522968>
    290c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2910:	16000006 	strne	r0, [r0], -r6
    2914:	13310034 	teqne	r1, #52	; 0x34
    2918:	00001702 	andeq	r1, r0, r2, lsl #14
    291c:	3f012e17 	svccc	0x00012e17
    2920:	3a0e0319 	bcc	38358c <__ccfg+0x3635e4>
    2924:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2928:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    292c:	97184006 	ldrls	r4, [r8, -r6]
    2930:	13011942 	movwne	r1, #6466	; 0x1942
    2934:	1d180000 	ldcne	0, cr0, [r8, #-0]
    2938:	11133101 	tstne	r3, r1, lsl #2
    293c:	58061201 	stmdapl	r6, {r0, r9, ip}
    2940:	010b590b 	tsteq	fp, fp, lsl #18
    2944:	19000013 	stmdbne	r0, {r0, r1, r4}
    2948:	01018289 	smlabbeq	r1, r9, r2, r8
    294c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2950:	8a1a0000 	bhi	682958 <__ccfg+0x6629b0>
    2954:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2958:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    295c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2960:	03193f01 	tsteq	r9, #1, 30
    2964:	3b0b3a0e 	blcc	2d11a4 <__ccfg+0x2b11fc>
    2968:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    296c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2970:	97184006 	ldrls	r4, [r8, -r6]
    2974:	13011942 	movwne	r1, #6466	; 0x1942
    2978:	051c0000 	ldreq	r0, [ip, #-0]
    297c:	3a0e0300 	bcc	383584 <__ccfg+0x3635dc>
    2980:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2984:	00170213 	andseq	r0, r7, r3, lsl r2
    2988:	00341d00 	eorseq	r1, r4, r0, lsl #26
    298c:	0b3a0e03 	bleq	e861a0 <__ccfg+0xe661f8>
    2990:	1349053b 	movtne	r0, #38203	; 0x953b
    2994:	00001702 	andeq	r1, r0, r2, lsl #14
    2998:	31012e1e 	tstcc	r1, lr, lsl lr
    299c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    29a0:	97184006 	ldrls	r4, [r8, -r6]
    29a4:	13011942 	movwne	r1, #6466	; 0x1942
    29a8:	051f0000 	ldreq	r0, [pc, #-0]	; 29b0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>
    29ac:	02133100 	andseq	r3, r3, #0, 2
    29b0:	20000017 	andcs	r0, r0, r7, lsl r0
    29b4:	13310034 	teqne	r1, #52	; 0x34
    29b8:	1d210000 	stcne	0, cr0, [r1, #-0]
    29bc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    29c0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    29c4:	0105590b 	tsteq	r5, fp, lsl #18
    29c8:	22000013 	andcs	r0, r0, #19
    29cc:	01018289 	smlabbeq	r1, r9, r2, r8
    29d0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    29d4:	00001301 	andeq	r1, r0, r1, lsl #6
    29d8:	01828923 	orreq	r8, r2, r3, lsr #18
    29dc:	31011100 	mrscc	r1, (UNDEF: 17)
    29e0:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    29e4:	01018289 	smlabbeq	r1, r9, r2, r8
    29e8:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    29ec:	00130118 	andseq	r0, r3, r8, lsl r1
    29f0:	001d2500 	andseq	r2, sp, r0, lsl #10
    29f4:	01111331 	tsteq	r1, r1, lsr r3
    29f8:	0b580612 	bleq	1604248 <__ccfg+0x15e42a0>
    29fc:	00000559 	andeq	r0, r0, r9, asr r5
    2a00:	01828926 	orreq	r8, r2, r6, lsr #18
    2a04:	01011101 	tsteq	r1, r1, lsl #2
    2a08:	27000013 	smladcs	r0, r3, r0, r0
    2a0c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2a10:	0b3a0e03 	bleq	e86224 <__ccfg+0xe6627c>
    2a14:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a18:	1301193c 	movwne	r1, #6460	; 0x193c
    2a1c:	05280000 	streq	r0, [r8, #-0]!
    2a20:	00134900 	andseq	r4, r3, r0, lsl #18
    2a24:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    2a28:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a2c:	0b3b0b3a 	bleq	ec571c <__ccfg+0xea5774>
    2a30:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2a34:	00001301 	andeq	r1, r0, r1, lsl #6
    2a38:	3f012e2a 	svccc	0x00012e2a
    2a3c:	3a0e0319 	bcc	3836a8 <__ccfg+0x363700>
    2a40:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a44:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2a48:	00000019 	andeq	r0, r0, r9, lsl r0
    2a4c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2a50:	030b130e 	movweq	r1, #45838	; 0xb30e
    2a54:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2a58:	10011117 	andne	r1, r1, r7, lsl r1
    2a5c:	02000017 	andeq	r0, r0, #23
    2a60:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a64:	0b3b0b3a 	bleq	ec5754 <__ccfg+0xea57ac>
    2a68:	00001349 	andeq	r1, r0, r9, asr #6
    2a6c:	0b002403 	bleq	ba80 <__exidx_end+0x8cf4>
    2a70:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a74:	0400000e 	streq	r0, [r0], #-14
    2a78:	0b0b0024 	bleq	2c2b10 <__ccfg+0x2a2b68>
    2a7c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2a80:	0f050000 	svceq	0x00050000
    2a84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2a88:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2a8c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2a90:	15070000 	strne	r0, [r7, #-0]
    2a94:	01192701 	tsteq	r9, r1, lsl #14
    2a98:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2a9c:	13490005 	movtne	r0, #36869	; 0x9005
    2aa0:	15090000 	strne	r0, [r9, #-0]
    2aa4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2aa8:	00130113 	andseq	r0, r3, r3, lsl r1
    2aac:	00150a00 	andseq	r0, r5, r0, lsl #20
    2ab0:	13491927 	movtne	r1, #39207	; 0x9927
    2ab4:	130b0000 	movwne	r0, #45056	; 0xb000
    2ab8:	3a0b0b01 	bcc	2c56c4 <__ccfg+0x2a571c>
    2abc:	010b3b0b 	tsteq	fp, fp, lsl #22
    2ac0:	0c000013 	stceq	0, cr0, [r0], {19}
    2ac4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2ac8:	0b3b0b3a 	bleq	ec57b8 <__ccfg+0xea5810>
    2acc:	0b381349 	bleq	e077f8 <__ccfg+0xde7850>
    2ad0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    2ad4:	3a0e0301 	bcc	3836e0 <__ccfg+0x363738>
    2ad8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2adc:	010b2019 	tsteq	fp, r9, lsl r0
    2ae0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2ae4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2aec:	00001349 	andeq	r1, r0, r9, asr #6
    2af0:	03002e0f 	movweq	r2, #3599	; 0xe0f
    2af4:	3b0b3a0e 	blcc	2d1334 <__ccfg+0x2b138c>
    2af8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2afc:	000b2013 	andeq	r2, fp, r3, lsl r0
    2b00:	002e1000 	eoreq	r1, lr, r0
    2b04:	0b3a0e03 	bleq	e86318 <__ccfg+0xe66370>
    2b08:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2b0c:	00000b20 	andeq	r0, r0, r0, lsr #22
    2b10:	03012e11 	movweq	r2, #7697	; 0x1e11
    2b14:	3b0b3a0e 	blcc	2d1354 <__ccfg+0x2b13ac>
    2b18:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2b1c:	010b2013 	tsteq	fp, r3, lsl r0
    2b20:	12000013 	andne	r0, r0, #19
    2b24:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2b28:	0b3b0b3a 	bleq	ec5818 <__ccfg+0xea5870>
    2b2c:	00001349 	andeq	r1, r0, r9, asr #6
    2b30:	03003413 	movweq	r3, #1043	; 0x413
    2b34:	3b0b3a0e 	blcc	2d1374 <__ccfg+0x2b13cc>
    2b38:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b3c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2b40:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2b44:	0b3b0b3a 	bleq	ec5834 <__ccfg+0xea588c>
    2b48:	01111927 	tsteq	r1, r7, lsr #18
    2b4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b50:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2b54:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2b58:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b5c:	0b3b0b3a 	bleq	ec584c <__ccfg+0xea58a4>
    2b60:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b64:	34160000 	ldrcc	r0, [r6], #-0
    2b68:	3a0e0300 	bcc	383770 <__ccfg+0x3637c8>
    2b6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b70:	00051c13 	andeq	r1, r5, r3, lsl ip
    2b74:	011d1700 	tsteq	sp, r0, lsl #14
    2b78:	01521331 	cmpeq	r2, r1, lsr r3
    2b7c:	0b581755 	bleq	16088d8 <__ccfg+0x15e8930>
    2b80:	13010b59 	movwne	r0, #7001	; 0x1b59
    2b84:	05180000 	ldreq	r0, [r8, #-0]
    2b88:	1c133100 	ldfnes	f3, [r3], {-0}
    2b8c:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2b90:	1331001d 	teqne	r1, #29
    2b94:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b98:	0b590b58 	bleq	1645900 <__ccfg+0x1625958>
    2b9c:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2ba0:	11133101 	tstne	r3, r1, lsl #2
    2ba4:	58061201 	stmdapl	r6, {r0, r9, ip}
    2ba8:	010b590b 	tsteq	fp, fp, lsl #18
    2bac:	1b000013 	blne	2c00 <NOROM_OSCClockSourceGet+0xd0>
    2bb0:	00018289 	andeq	r8, r1, r9, lsl #5
    2bb4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2bb8:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    2bbc:	11010182 	smlabbne	r1, r2, r1, r0
    2bc0:	00130101 	andseq	r0, r3, r1, lsl #2
    2bc4:	828a1d00 	addhi	r1, sl, #0, 26
    2bc8:	18020001 	stmdane	r2, {r0}
    2bcc:	00184291 	mulseq	r8, r1, r2
    2bd0:	82891e00 	addhi	r1, r9, #0, 28
    2bd4:	01110101 	tsteq	r1, r1, lsl #2
    2bd8:	13011331 	movwne	r1, #4913	; 0x1331
    2bdc:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    2be0:	11010182 	smlabbne	r1, r2, r1, r0
    2be4:	20000001 	andcs	r0, r0, r1
    2be8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2bec:	0b3a0e03 	bleq	e86400 <__ccfg+0xe66458>
    2bf0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2bf4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2bf8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2bfc:	00130119 	andseq	r0, r3, r9, lsl r1
    2c00:	00052100 	andeq	r2, r5, r0, lsl #2
    2c04:	0b3a0e03 	bleq	e86418 <__ccfg+0xe66470>
    2c08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c0c:	00001702 	andeq	r1, r0, r2, lsl #14
    2c10:	03003422 	movweq	r3, #1058	; 0x422
    2c14:	3b0b3a0e 	blcc	2d1454 <__ccfg+0x2b14ac>
    2c18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c1c:	23000018 	movwcs	r0, #24
    2c20:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c24:	0b3b0b3a 	bleq	ec5914 <__ccfg+0xea596c>
    2c28:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c2c:	34240000 	strtcc	r0, [r4], #-0
    2c30:	3a080300 	bcc	203838 <__ccfg+0x1e3890>
    2c34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c38:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    2c3c:	0111010b 	tsteq	r1, fp, lsl #2
    2c40:	13010612 	movwne	r0, #5650	; 0x1612
    2c44:	34260000 	strtcc	r0, [r6], #-0
    2c48:	3a0e0300 	bcc	383850 <__ccfg+0x3638a8>
    2c4c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c50:	00170213 	andseq	r0, r7, r3, lsl r2
    2c54:	011d2700 	tsteq	sp, r0, lsl #14
    2c58:	01111331 	tsteq	r1, r1, lsr r3
    2c5c:	0b580612 	bleq	16044ac <__ccfg+0x15e4504>
    2c60:	13010559 	movwne	r0, #5465	; 0x1559
    2c64:	05280000 	streq	r0, [r8, #-0]!
    2c68:	00133100 	andseq	r3, r3, r0, lsl #2
    2c6c:	010b2900 	tsteq	fp, r0, lsl #18
    2c70:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c74:	342a0000 	strtcc	r0, [sl], #-0
    2c78:	02133100 	andseq	r3, r3, #0, 2
    2c7c:	2b000017 	blcs	2ce0 <NOROM_OSCClockSourceGet+0x1b0>
    2c80:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2c84:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2c88:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2c8c:	00001301 	andeq	r1, r0, r1, lsl #6
    2c90:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    2c94:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    2c98:	13490026 	movtne	r0, #36902	; 0x9026
    2c9c:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    2ca0:	03193f00 	tsteq	r9, #0, 30
    2ca4:	3b0b3a0e 	blcc	2d14e4 <__ccfg+0x2b153c>
    2ca8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2cac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2cb0:	97184006 	ldrls	r4, [r8, -r6]
    2cb4:	00001942 	andeq	r1, r0, r2, asr #18
    2cb8:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    2cbc:	00130113 	andseq	r0, r3, r3, lsl r1
    2cc0:	00213000 	eoreq	r3, r1, r0
    2cc4:	0b2f1349 	bleq	bc79f0 <__ccfg+0xba7a48>
    2cc8:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    2ccc:	03193f01 	tsteq	r9, #1, 30
    2cd0:	3b0b3a0e 	blcc	2d1510 <__ccfg+0x2b1568>
    2cd4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2cd8:	00130119 	andseq	r0, r3, r9, lsl r1
    2cdc:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    2ce0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2ce4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ce8:	13491927 	movtne	r1, #39207	; 0x9927
    2cec:	1301193c 	movwne	r1, #6460	; 0x193c
    2cf0:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    2cf4:	03193f00 	tsteq	r9, #0, 30
    2cf8:	3b0b3a0e 	blcc	2d1538 <__ccfg+0x2b1590>
    2cfc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2d00:	00193c13 	andseq	r3, r9, r3, lsl ip
    2d04:	11010000 	mrsne	r0, (UNDEF: 1)
    2d08:	130e2501 	movwne	r2, #58625	; 0xe501
    2d0c:	1b0e030b 	blne	383940 <__ccfg+0x363998>
    2d10:	1117550e 	tstne	r7, lr, lsl #10
    2d14:	00171001 	andseq	r1, r7, r1
    2d18:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d1c:	0b3e0b0b 	bleq	f85950 <__ccfg+0xf659a8>
    2d20:	00000e03 	andeq	r0, r0, r3, lsl #28
    2d24:	03001603 	movweq	r1, #1539	; 0x603
    2d28:	3b0b3a0e 	blcc	2d1568 <__ccfg+0x2b15c0>
    2d2c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d30:	00240400 	eoreq	r0, r4, r0, lsl #8
    2d34:	0b3e0b0b 	bleq	f85968 <__ccfg+0xf659c0>
    2d38:	00000803 	andeq	r0, r0, r3, lsl #16
    2d3c:	0b010405 	bleq	43d58 <__ccfg+0x23db0>
    2d40:	3b0b3a0b 	blcc	2d1574 <__ccfg+0x2b15cc>
    2d44:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d48:	00280600 	eoreq	r0, r8, r0, lsl #12
    2d4c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2d50:	04070000 	streq	r0, [r7], #-0
    2d54:	3a0b0b01 	bcc	2c5960 <__ccfg+0x2a59b8>
    2d58:	01053b0b 	tsteq	r5, fp, lsl #22
    2d5c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2d60:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2d64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d68:	00001349 	andeq	r1, r0, r9, asr #6
    2d6c:	03002e09 	movweq	r2, #3593	; 0xe09
    2d70:	3b0b3a0e 	blcc	2d15b0 <__ccfg+0x2b1608>
    2d74:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d78:	000b2013 	andeq	r2, fp, r3, lsl r0
    2d7c:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    2d80:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d88:	13491927 	movtne	r1, #39207	; 0x9927
    2d8c:	13010b20 	movwne	r0, #6944	; 0x1b20
    2d90:	340b0000 	strcc	r0, [fp], #-0
    2d94:	3a0e0300 	bcc	38399c <__ccfg+0x3639f4>
    2d98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d9c:	0c000013 	stceq	0, cr0, [r0], {19}
    2da0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2da4:	0b3a0e03 	bleq	e865b8 <__ccfg+0xe66610>
    2da8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2dac:	01111349 	tsteq	r1, r9, asr #6
    2db0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2db4:	00194297 	mulseq	r9, r7, r2
    2db8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2dbc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2dc0:	0b3b0b3a 	bleq	ec5ab0 <__ccfg+0xea5b08>
    2dc4:	13491927 	movtne	r1, #39207	; 0x9927
    2dc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dcc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2dd0:	00130119 	andseq	r0, r3, r9, lsl r1
    2dd4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2dd8:	0b3a0e03 	bleq	e865ec <__ccfg+0xe66644>
    2ddc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2de0:	00001702 	andeq	r1, r0, r2, lsl #14
    2de4:	31012e0f 	tstcc	r1, pc, lsl #28
    2de8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2dec:	97184006 	ldrls	r4, [r8, -r6]
    2df0:	13011942 	movwne	r1, #6466	; 0x1942
    2df4:	34100000 	ldrcc	r0, [r0], #-0
    2df8:	02133100 	andseq	r3, r3, #0, 2
    2dfc:	11000017 	tstne	r0, r7, lsl r0
    2e00:	0111010b 	tsteq	r1, fp, lsl #2
    2e04:	00000612 	andeq	r0, r0, r2, lsl r6
    2e08:	31003412 	tstcc	r0, r2, lsl r4
    2e0c:	13000013 	movwne	r0, #19
    2e10:	1331001d 	teqne	r1, #29
    2e14:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e18:	0b590b58 	bleq	1645b80 <__ccfg+0x1625bd8>
    2e1c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2e20:	03193f01 	tsteq	r9, #1, 30
    2e24:	3b0b3a0e 	blcc	2d1664 <__ccfg+0x2b16bc>
    2e28:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2e2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e30:	97184006 	ldrls	r4, [r8, -r6]
    2e34:	13011942 	movwne	r1, #6466	; 0x1942
    2e38:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    2e3c:	11000182 	smlabbne	r0, r2, r1, r0
    2e40:	00133101 	andseq	r3, r3, r1, lsl #2
    2e44:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    2e48:	0b3a0e03 	bleq	e8665c <__ccfg+0xe666b4>
    2e4c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e50:	0b201349 	bleq	807b7c <__ccfg+0x7e7bd4>
    2e54:	00001301 	andeq	r1, r0, r1, lsl #6
    2e58:	03003417 	movweq	r3, #1047	; 0x417
    2e5c:	3b0b3a0e 	blcc	2d169c <__ccfg+0x2b16f4>
    2e60:	00134905 	andseq	r4, r3, r5, lsl #18
    2e64:	00341800 	eorseq	r1, r4, r0, lsl #16
    2e68:	0b3a0e03 	bleq	e8667c <__ccfg+0xe666d4>
    2e6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e70:	00001802 	andeq	r1, r0, r2, lsl #16
    2e74:	31001d19 	tstcc	r0, r9, lsl sp
    2e78:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2e7c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2e80:	1a00000b 	bne	2eb4 <__exidx_end+0x128>
    2e84:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2e88:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2e8c:	0b590b58 	bleq	1645bf4 <__ccfg+0x1625c4c>
    2e90:	00001301 	andeq	r1, r0, r1, lsl #6
    2e94:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    2e98:	1c000017 	stcne	0, cr0, [r0], {23}
    2e9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ea0:	0b3a0e03 	bleq	e866b4 <__ccfg+0xe6670c>
    2ea4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ea8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2eac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2eb0:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    2eb4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2eb8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2ebc:	0b590b58 	bleq	1645c24 <__ccfg+0x1625c7c>
    2ec0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ec4:	31011d1e 	tstcc	r1, lr, lsl sp
    2ec8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2ecc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2ed0:	0000000b 	andeq	r0, r0, fp
    2ed4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2ed8:	030b130e 	movweq	r1, #45838	; 0xb30e
    2edc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2ee0:	10011117 	andne	r1, r1, r7, lsl r1
    2ee4:	02000017 	andeq	r0, r0, #23
    2ee8:	0b0b0024 	bleq	2c2f80 <__ccfg+0x2a2fd8>
    2eec:	0e030b3e 	vmoveq.16	d3[0], r0
    2ef0:	16030000 	strne	r0, [r3], -r0
    2ef4:	3a0e0300 	bcc	383afc <__ccfg+0x363b54>
    2ef8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2efc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2f00:	0b0b0024 	bleq	2c2f98 <__ccfg+0x2a2ff0>
    2f04:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2f08:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2f0c:	3a0e0301 	bcc	383b18 <__ccfg+0x363b70>
    2f10:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2f14:	010b2019 	tsteq	fp, r9, lsl r0
    2f18:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2f1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f20:	0b3b0b3a 	bleq	ec5c10 <__ccfg+0xea5c68>
    2f24:	00001349 	andeq	r1, r0, r9, asr #6
    2f28:	03003407 	movweq	r3, #1031	; 0x407
    2f2c:	3b0b3a0e 	blcc	2d176c <__ccfg+0x2b17c4>
    2f30:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f34:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2f38:	0b3a0e03 	bleq	e8674c <__ccfg+0xe667a4>
    2f3c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f40:	0b201349 	bleq	807c6c <__ccfg+0x7e7cc4>
    2f44:	00001301 	andeq	r1, r0, r1, lsl #6
    2f48:	31012e09 	tstcc	r1, r9, lsl #28
    2f4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2f50:	97184006 	ldrls	r4, [r8, -r6]
    2f54:	13011942 	movwne	r1, #6466	; 0x1942
    2f58:	050a0000 	streq	r0, [sl, #-0]
    2f5c:	02133100 	andseq	r3, r3, #0, 2
    2f60:	0b000017 	bleq	2fc4 <__exidx_end+0x238>
    2f64:	13310034 	teqne	r1, #52	; 0x34
    2f68:	00001702 	andeq	r1, r0, r2, lsl #14
    2f6c:	3100050c 	tstcc	r0, ip, lsl #10
    2f70:	000b1c13 	andeq	r1, fp, r3, lsl ip
    2f74:	82890d00 	addhi	r0, r9, #0, 26
    2f78:	01110001 	tsteq	r1, r1
    2f7c:	00001331 	andeq	r1, r0, r1, lsr r3
    2f80:	0182890e 	orreq	r8, r2, lr, lsl #18
    2f84:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2f88:	13311942 	teqne	r1, #1081344	; 0x108000
    2f8c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2f90:	03193f01 	tsteq	r9, #1, 30
    2f94:	3b0b3a0e 	blcc	2d17d4 <__ccfg+0x2b182c>
    2f98:	11192705 	tstne	r9, r5, lsl #14
    2f9c:	40061201 	andmi	r1, r6, r1, lsl #4
    2fa0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2fa4:	00001301 	andeq	r1, r0, r1, lsl #6
    2fa8:	03000510 	movweq	r0, #1296	; 0x510
    2fac:	3b0b3a0e 	blcc	2d17ec <__ccfg+0x2b1844>
    2fb0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2fb4:	11000017 	tstne	r0, r7, lsl r0
    2fb8:	01018289 	smlabbeq	r1, r9, r2, r8
    2fbc:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    2fc0:	00133119 	andseq	r3, r3, r9, lsl r1
    2fc4:	828a1200 	addhi	r1, sl, #0, 4
    2fc8:	18020001 	stmdane	r2, {r0}
    2fcc:	00184291 	mulseq	r8, r1, r2
    2fd0:	00341300 	eorseq	r1, r4, r0, lsl #6
    2fd4:	0b3a0e03 	bleq	e867e8 <__ccfg+0xe66840>
    2fd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2fdc:	00001702 	andeq	r1, r0, r2, lsl #14
    2fe0:	3f012e14 	svccc	0x00012e14
    2fe4:	3a0e0319 	bcc	383c50 <__ccfg+0x363ca8>
    2fe8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2fec:	11134919 	tstne	r3, r9, lsl r9
    2ff0:	40061201 	andmi	r1, r6, r1, lsl #4
    2ff4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2ff8:	00001301 	andeq	r1, r0, r1, lsl #6
    2ffc:	31011d15 	tstcc	r1, r5, lsl sp
    3000:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3004:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3008:	1600000b 	strne	r0, [r0], -fp
    300c:	0111010b 	tsteq	r1, fp, lsl #2
    3010:	00000612 	andeq	r0, r0, r2, lsl r6
    3014:	3f002e17 	svccc	0x00002e17
    3018:	3a0e0319 	bcc	383c84 <__ccfg+0x363cdc>
    301c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3020:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3024:	00000019 	andeq	r0, r0, r9, lsl r0
    3028:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    302c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3030:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3034:	10011117 	andne	r1, r1, r7, lsl r1
    3038:	02000017 	andeq	r0, r0, #23
    303c:	0b0b0024 	bleq	2c30d4 <__ccfg+0x2a312c>
    3040:	0e030b3e 	vmoveq.16	d3[0], r0
    3044:	16030000 	strne	r0, [r3], -r0
    3048:	3a0e0300 	bcc	383c50 <__ccfg+0x363ca8>
    304c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3050:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3054:	0b0b0024 	bleq	2c30ec <__ccfg+0x2a3144>
    3058:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    305c:	0f050000 	svceq	0x00050000
    3060:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3064:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3068:	19270015 	stmdbne	r7!, {r0, r2, r4}
    306c:	15070000 	strne	r0, [r7, #-0]
    3070:	01192701 	tsteq	r9, r1, lsl #14
    3074:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3078:	13490005 	movtne	r0, #36869	; 0x9005
    307c:	15090000 	strne	r0, [r9, #-0]
    3080:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3084:	00130113 	andseq	r0, r3, r3, lsl r1
    3088:	00150a00 	andseq	r0, r5, r0, lsl #20
    308c:	13491927 	movtne	r1, #39207	; 0x9927
    3090:	130b0000 	movwne	r0, #45056	; 0xb000
    3094:	3a0b0b01 	bcc	2c5ca0 <__ccfg+0x2a5cf8>
    3098:	010b3b0b 	tsteq	fp, fp, lsl #22
    309c:	0c000013 	stceq	0, cr0, [r0], {19}
    30a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30a4:	0b3b0b3a 	bleq	ec5d94 <__ccfg+0xea5dec>
    30a8:	0b381349 	bleq	e07dd4 <__ccfg+0xde7e2c>
    30ac:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    30b0:	03193f01 	tsteq	r9, #1, 30
    30b4:	3b0b3a0e 	blcc	2d18f4 <__ccfg+0x2b194c>
    30b8:	2019270b 	andscs	r2, r9, fp, lsl #14
    30bc:	0013010b 	andseq	r0, r3, fp, lsl #2
    30c0:	00050e00 	andeq	r0, r5, r0, lsl #28
    30c4:	0b3a0e03 	bleq	e868d8 <__ccfg+0xe66930>
    30c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30cc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    30d0:	03193f01 	tsteq	r9, #1, 30
    30d4:	3b0b3a0e 	blcc	2d1914 <__ccfg+0x2b196c>
    30d8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    30dc:	010b2013 	tsteq	fp, r3, lsl r0
    30e0:	10000013 	andne	r0, r0, r3, lsl r0
    30e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30e8:	0b3b0b3a 	bleq	ec5dd8 <__ccfg+0xea5e30>
    30ec:	00001349 	andeq	r1, r0, r9, asr #6
    30f0:	31012e11 	tstcc	r1, r1, lsl lr
    30f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    30f8:	97184006 	ldrls	r4, [r8, -r6]
    30fc:	13011942 	movwne	r1, #6466	; 0x1942
    3100:	05120000 	ldreq	r0, [r2, #-0]
    3104:	02133100 	andseq	r3, r3, #0, 2
    3108:	13000017 	movwne	r0, #23
    310c:	0111010b 	tsteq	r1, fp, lsl #2
    3110:	13010612 	movwne	r0, #5650	; 0x1612
    3114:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3118:	11010182 	smlabbne	r1, r2, r1, r0
    311c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3120:	8a150000 	bhi	543128 <__ccfg+0x523180>
    3124:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3128:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    312c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3130:	11010182 	smlabbne	r1, r2, r1, r0
    3134:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3138:	00001301 	andeq	r1, r0, r1, lsl #6
    313c:	31003417 	tstcc	r0, r7, lsl r4
    3140:	00180213 	andseq	r0, r8, r3, lsl r2
    3144:	010b1800 	tsteq	fp, r0, lsl #16
    3148:	13011755 	movwne	r1, #5973	; 0x1755
    314c:	05190000 	ldreq	r0, [r9, #-0]
    3150:	1c133100 	ldfnes	f3, [r3], {-0}
    3154:	1a00000b 	bne	3188 <__exidx_end+0x3fc>
    3158:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    315c:	341b0000 	ldrcc	r0, [fp], #-0
    3160:	00133100 	andseq	r3, r3, r0, lsl #2
    3164:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    3168:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    316c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3170:	13491927 	movtne	r1, #39207	; 0x9927
    3174:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3178:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    317c:	00130119 	andseq	r0, r3, r9, lsl r1
    3180:	00051d00 	andeq	r1, r5, r0, lsl #26
    3184:	0b3a0e03 	bleq	e86998 <__ccfg+0xe669f0>
    3188:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    318c:	00001702 	andeq	r1, r0, r2, lsl #14
    3190:	0300341e 	movweq	r3, #1054	; 0x41e
    3194:	3b0b3a0e 	blcc	2d19d4 <__ccfg+0x2b1a2c>
    3198:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    319c:	1f000017 	svcne	0x00000017
    31a0:	00018289 	andeq	r8, r1, r9, lsl #5
    31a4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    31a8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    31ac:	03193f01 	tsteq	r9, #1, 30
    31b0:	3b0b3a0e 	blcc	2d19f0 <__ccfg+0x2b1a48>
    31b4:	11192705 	tstne	r9, r5, lsl #14
    31b8:	40061201 	andmi	r1, r6, r1, lsl #4
    31bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    31c0:	00001301 	andeq	r1, r0, r1, lsl #6
    31c4:	01828921 	orreq	r8, r2, r1, lsr #18
    31c8:	31011101 	tstcc	r1, r1, lsl #2
    31cc:	00130113 	andseq	r0, r3, r3, lsl r1
    31d0:	002e2200 	eoreq	r2, lr, r0, lsl #4
    31d4:	0b3a0e03 	bleq	e869e8 <__ccfg+0xe66a40>
    31d8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31dc:	0b201349 	bleq	807f08 <__ccfg+0x7e7f60>
    31e0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    31e4:	3a0e0300 	bcc	383dec <__ccfg+0x363e44>
    31e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    31ec:	000b2019 	andeq	r2, fp, r9, lsl r0
    31f0:	00342400 	eorseq	r2, r4, r0, lsl #8
    31f4:	0b3a0e03 	bleq	e86a08 <__ccfg+0xe66a60>
    31f8:	1349053b 	movtne	r0, #38203	; 0x953b
    31fc:	00001702 	andeq	r1, r0, r2, lsl #14
    3200:	31011d25 	tstcc	r1, r5, lsr #26
    3204:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3208:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    320c:	00130105 	andseq	r0, r3, r5, lsl #2
    3210:	00052600 	andeq	r2, r5, r0, lsl #12
    3214:	0b3a0e03 	bleq	e86a28 <__ccfg+0xe66a80>
    3218:	1349053b 	movtne	r0, #38203	; 0x953b
    321c:	00001702 	andeq	r1, r0, r2, lsl #14
    3220:	03003427 	movweq	r3, #1063	; 0x427
    3224:	3b0b3a0e 	blcc	2d1a64 <__ccfg+0x2b1abc>
    3228:	02134905 	andseq	r4, r3, #81920	; 0x14000
    322c:	28000018 	stmdacs	r0, {r3, r4}
    3230:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3238:	17021349 	strne	r1, [r2, -r9, asr #6]
    323c:	34290000 	strtcc	r0, [r9], #-0
    3240:	3a0e0300 	bcc	383e48 <__ccfg+0x363ea0>
    3244:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3248:	00180213 	andseq	r0, r8, r3, lsl r2
    324c:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    3250:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3254:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3258:	13491927 	movtne	r1, #39207	; 0x9927
    325c:	0000193c 	andeq	r1, r0, ip, lsr r9
    3260:	3f002e2b 	svccc	0x00002e2b
    3264:	3a0e0319 	bcc	383ed0 <__ccfg+0x363f28>
    3268:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    326c:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3270:	2c000019 	stccs	0, cr0, [r0], {25}
    3274:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3278:	0b3a0e03 	bleq	e86a8c <__ccfg+0xe66ae4>
    327c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3280:	0000193c 	andeq	r1, r0, ip, lsr r9
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000234 	andeq	r0, r0, r4, lsr r2
       4:	00000250 	andeq	r0, r0, r0, asr r2
       8:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
       c:	61000003 	tstvs	r0, r3
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	01c80000 	biceq	r0, r8, r0
      20:	01d20000 	bicseq	r0, r2, r0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0001d200 	andeq	sp, r1, r0, lsl #4
      34:	00023400 	andeq	r3, r2, r0, lsl #8
      38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				j->Next = k;
      44:	000001d2 	ldrdeq	r0, [r0], -r2
      48:	000001e4 	andeq	r0, r0, r4, ror #3
}
      4c:	e8530001 	ldmda	r3, {r0}^
      50:	f2000001 	vhadd.s8	d0, d0, d1
      54:	01000001 	tsteq	r0, r1
		release;
      58:	02105300 	andseq	r5, r0, #0, 6
      5c:	021c0000 	andseq	r0, ip, #0
      60:	00010000 	andeq	r0, r1, r0
      64:	00022253 	andeq	r2, r2, r3, asr r2
      68:	00023400 	andeq	r3, r2, r0, lsl #8
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      78:	000000c8 	andeq	r0, r0, r8, asr #1
      7c:	000000f4 	strdeq	r0, [r0], -r4
      80:	fa500001 	blx	140008c <__ccfg+0x13e00e4>
      84:	00000000 	andeq	r0, r0, r0
      88:	01000001 	tsteq	r0, r1
      8c:	01765000 	cmneq	r6, r0
	descriptors [fd] = s;
      90:	018f0000 	orreq	r0, pc, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (EMALLOC, "tcv05");
      a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      bc:	00500001 	subseq	r0, r0, r1
      c0:	00000000 	andeq	r0, r0, r0
      c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
      c8:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
      cc:	0100000a 	tsteq	r0, sl
      d0:	0a5e5600 	beq	17958d8 <__ccfg+0x1775930>
      d4:	0a620000 	beq	18800dc <__ccfg+0x1860134>
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00000056 	andeq	r0, r0, r6, asr r0
      e0:	00000000 	andeq	r0, r0, r0
      e4:	00091200 	andeq	r1, r9, r0, lsl #4
      e8:	00091600 	andeq	r1, r9, r0, lsl #12
      ec:	52000100 	andpl	r0, r0, #0, 2
      f0:	0000092c 	andeq	r0, r0, ip, lsr #18
        if(offTime > 0)
      f4:	00000940 	andeq	r0, r0, r0, asr #18
            delay(offTime, Check_PERIOD);
      f8:	00520001 	subseq	r0, r2, r1
        if(ledFlag == 0) {
      fc:	00000000 	andeq	r0, r0, r0
     100:	1a000000 	bne	108 <_Min_Stack_Size+0x8>
     104:	20000009 	andcs	r0, r0, r9
            led = redLed;
     108:	01000009 	tsteq	r0, r9
            onTime = redOn;
     10c:	00005300 	andeq	r5, r0, r0, lsl #6
     110:	00000000 	andeq	r0, r0, r0
            offTime = greenOff;
     114:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
     118:	08da0000 	ldmeq	sl, {}^	; <UNPREDICTABLE>
        if(On)
     11c:	00010000 	andeq	r0, r1, r0
     120:	00000053 	andeq	r0, r0, r3, asr r0
            leds(led,1);
     124:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     128:	0008d000 	andeq	sp, r8, r0
            leds(led,0);
     12c:	0008d600 	andeq	sp, r8, r0, lsl #12
     130:	53000100 	movwpl	r0, #256	; 0x100
	...
        if(onTime > 0)
     13c:	00000966 	andeq	r0, r0, r6, ror #18
            delay(onTime, OFF_PERIOD);
     140:	00000970 	andeq	r0, r0, r0, ror r9
        when(&On, Check_PERIOD);
     144:	00530001 	subseq	r0, r3, r1
     148:	00000000 	andeq	r0, r0, r0
        release;
     14c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
            led = greenLed;
     150:	82000009 	andhi	r0, r0, #9
     154:	01000009 	tsteq	r0, r9
            onTime = greenOn;
     158:	00005200 	andeq	r5, r0, r0, lsl #4
            offTime = greenOff;
     15c:	00000000 	andeq	r0, r0, r0
            leds(led,0);
     160:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
     164:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
     168:	00010000 	andeq	r0, r1, r0
     16c:	00000053 	andeq	r0, r0, r3, asr r0
     170:	00000000 	andeq	r0, r0, r0
     174:	00099800 	andeq	r9, r9, r0, lsl #16
        leds(led,0);
     178:	0009ce00 	andeq	ip, r9, r0, lsl #28
     17c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     188:	0000083e 	andeq	r0, r0, lr, lsr r8
     18c:	00000848 	andeq	r0, r0, r8, asr #16
     190:	00530001 	subseq	r0, r3, r1
     194:	00000000 	andeq	r0, r0, r0
     198:	30000000 	andcc	r0, r0, r0
     19c:	5a000008 	bpl	1c4 <_Min_Stack_Size+0xc4>
     1a0:	01000008 	tsteq	r0, r8
     1a4:	00005200 	andeq	r5, r0, r0, lsl #4
     1a8:	00000000 	andeq	r0, r0, r0
     1ac:	08900000 	ldmeq	r0, {}	; <UNPREDICTABLE>
     1b0:	089a0000 	ldmeq	sl, {}	; <UNPREDICTABLE>
     1b4:	00010000 	andeq	r0, r1, r0
     1b8:	00000053 	andeq	r0, r0, r3, asr r0
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	00088200 	andeq	r8, r8, r0, lsl #4
     1c4:	0008aa00 	andeq	sl, r8, r0, lsl #20
    word number = 0;
     1c8:	52000100 	andpl	r0, r0, #0, 2
	...
        if(settingsInput[i] == ' ') {
     1d4:	000003a4 	andeq	r0, r0, r4, lsr #7
     1d8:	000003a8 	andeq	r0, r0, r8, lsr #7
            numbers[numbersIndex] = number;
     1dc:	a8500001 	ldmdage	r0, {r0}^
     1e0:	ab000003 	blge	1f4 <processSettingsInput+0x2c>
            number = 0;
     1e4:	01000003 	tsteq	r0, r3
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	00005100 	andeq	r5, r0, r0, lsl #2
    redOn = numbers[0];
     1ec:	00000000 	andeq	r0, r0, r0
     1f0:	06f00000 	ldrbteq	r0, [r0], r0
    redOff = numbers[1];
     1f4:	06f20000 	ldrbteq	r0, [r2], r0
     1f8:	00010000 	andeq	r0, r1, r0
    greenOn = numbers[2];
     1fc:	00000050 	andeq	r0, r0, r0, asr r0
     200:	00000000 	andeq	r0, r0, r0
    greenOff = numbers[3];
     204:	0006f000 	andeq	pc, r6, r0
     208:	00070600 	andeq	r0, r7, r0, lsl #12
}
     20c:	51000100 	mrspl	r0, (UNDEF: 16)
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	00000706 	andeq	r0, r0, r6, lsl #14
     214:	0000070a 	andeq	r0, r0, sl, lsl #14
            number = number * 10;
     218:	10550001 	subsne	r0, r5, r1
            number += settingsInput[i] - 48;
     21c:	26000007 	strcs	r0, [r0], -r7
     220:	01000007 	tsteq	r0, r7
     224:	07265500 	streq	r5, [r6, -r0, lsl #10]!
     228:	07340000 	ldreq	r0, [r4, -r0]!
     22c:	00010000 	andeq	r0, r1, r0
     230:	00073451 	andeq	r3, r7, r1, asr r4
fsm root {
     234:	00076200 	andeq	r6, r7, r0, lsl #4
     238:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     23c:	00000768 	andeq	r0, r0, r8, ror #14
     240:	00000790 	muleq	r0, r0, r7
     244:	90550001 	subsls	r0, r5, r1
     248:	9e000007 	cdpls	0, 0, cr0, cr0, cr7, {0}
     24c:	01000007 	tsteq	r0, r7
        ser_outf(Initial, "Enter your name: ");
     250:	079e5100 	ldreq	r5, [lr, r0, lsl #2]
     254:	07a80000 	streq	r0, [r8, r0]!
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	00010000 	andeq	r0, r1, r0
     25c:	0007a855 	andeq	sl, r7, r5, asr r8
        runfsm blinker;
     260:	0007b300 	andeq	fp, r7, r0, lsl #6
     264:	51000100 	mrspl	r0, (UNDEF: 16)
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
     26c:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     270:	b6550001 	ldrblt	r0, [r5], -r1
        ser_inf(Get_Choice, "%c", &choice);
     274:	bc000007 	stclt	0, cr0, [r0], {7}
     278:	01000007 	tsteq	r0, r7
        if (choice == 'A' || choice == 'a'){
     27c:	07bc5100 	ldreq	r5, [ip, r0, lsl #2]!
     280:	07ce0000 	strbeq	r0, [lr, r0]
     284:	00010000 	andeq	r0, r1, r0
            proceed Adjust_Intervals;
     288:	0007ce55 	andeq	ip, r7, r5, asr lr
            proceed Monitor;
     28c:	0007e000 	andeq	lr, r7, r0
        proceed Show_Menu;
     290:	51000100 	mrspl	r0, (UNDEF: 16)
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	000007e0 	andeq	r0, r0, r0, ror #15
     298:	00000800 	andeq	r0, r0, r0, lsl #16
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	00550001 	subseq	r0, r5, r1
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
        processSettingsInput(settings);
     2a8:	06000006 	streq	r0, [r0], -r6
        On = YES;
     2ac:	01000007 	tsteq	r0, r7
     2b0:	07065200 	streq	r5, [r6, -r0, lsl #4]
        trigger(&On);
     2b4:	070c0000 	streq	r0, [ip, -r0]
        proceed Show_Menu;
     2b8:	00010000 	andeq	r0, r1, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	00071056 	andeq	r1, r7, r6, asr r0
     2c0:	00072000 	andeq	r2, r7, r0
     2c4:	56000100 	strpl	r0, [r0], -r0, lsl #2
     2c8:	00000726 	andeq	r0, r0, r6, lsr #14
     2cc:	00000734 	andeq	r0, r0, r4, lsr r7
     2d0:	34520001 	ldrbcc	r0, [r2], #-1
     2d4:	64000007 	strvs	r0, [r0], #-7
        proceed Show_Menu;
     2d8:	01000007 	tsteq	r0, r7
     2dc:	07685600 	strbeq	r5, [r8, -r0, lsl #12]!
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	07900000 	ldreq	r0, [r0, r0]
     2e4:	00010000 	andeq	r0, r1, r0
        displayCycle = YES;
     2e8:	00079056 	andeq	r9, r7, r6, asr r0
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	00079e00 	andeq	r9, r7, r0, lsl #28
     2f0:	52000100 	andpl	r0, r0, #0, 2
     2f4:	0000079e 	muleq	r0, lr, r7
        if(ch == 'S' || ch == 's'){
     2f8:	000007a8 	andeq	r0, r0, r8, lsr #15
     2fc:	a8560001 	ldmdage	r6, {r0}^
     300:	b3000007 	movwlt	r0, #7
            displayCycle = NO;
     304:	01000007 	tsteq	r0, r7
     308:	07b65200 	ldreq	r5, [r6, r0, lsl #4]!
            proceed Show_Menu;
     30c:	07c10000 	strbeq	r0, [r1, r0]
        proceed Monitor;
     310:	00010000 	andeq	r0, r1, r0
     314:	0007c152 	andeq	ip, r7, r2, asr r1
     318:	0007ce00 	andeq	ip, r7, r0, lsl #28
        leds(1, 0);
     31c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     320:	000007ce 	andeq	r0, r0, lr, asr #15
     324:	00000800 	andeq	r0, r0, r0, lsl #16
     328:	00520001 	subseq	r0, r2, r1
     32c:	00000000 	andeq	r0, r0, r0
        leds(0, 0);
     330:	64000000 	strvs	r0, [r0], #-0
     334:	72000006 	andvc	r0, r0, #6
     338:	01000006 	tsteq	r0, r6
     33c:	00005000 	andeq	r5, r0, r0
     340:	00000000 	andeq	r0, r0, r0
     344:	06640000 	strbteq	r0, [r4], -r0
        } else if (choice == 'S' || choice == 's') {
     348:	06730000 	ldrbteq	r0, [r3], -r0
            proceed Stop;
     34c:	00010000 	andeq	r0, r1, r0
        } else if (choice == 'V' || choice == 'v') {
     350:	00000051 	andeq	r0, r0, r1, asr r0
            proceed View_Settings;
     354:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'M' || choice == 'm') {
     358:	00061400 	andeq	r1, r6, r0, lsl #8
            proceed Monitor;
     35c:	00062b00 	andeq	r2, r6, r0, lsl #22
     360:	50000100 	andpl	r0, r0, r0, lsl #2
     364:	0000064e 	andeq	r0, r0, lr, asr #12
     368:	00000664 	andeq	r0, r0, r4, ror #12
     36c:	00500001 	subseq	r0, r0, r1
     370:	00000000 	andeq	r0, r0, r0
     374:	0a000000 	beq	37c <root+0x148>
     378:	1a000005 	bne	394 <root+0x160>
     37c:	01000005 	tsteq	r0, r5
     380:	051a5200 	ldreq	r5, [sl, #-512]	; 0xfffffe00
     384:	05220000 	streq	r0, [r2, #-0]!
     388:	00050000 	andeq	r0, r5, r0
     38c:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     390:	0005bc40 	andeq	fp, r5, r0, asr #24
     394:	0005c000 	andeq	ip, r5, r0
     398:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     39c:	40092004 	andmi	r2, r9, r4
     3a0:	000005c0 	andeq	r0, r0, r0, asr #11
static void devinit_uart (int devnum) {
     3a4:	000005c2 	andeq	r0, r0, r2, asr #11
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	c2520001 	subsgt	r0, r2, #1
     3ac:	c4000005 	strgt	r0, [r0], #-5
void udelay (volatile word n) {
     3b0:	05000005 	streq	r0, [r0, #-5]
     3b4:	20040c00 	andcs	r0, r4, r0, lsl #24
	while (n) {
     3b8:	00004009 	andeq	r4, r0, r9
     3bc:	00000000 	andeq	r0, r0, r0
}
     3c0:	05240000 	streq	r0, [r4, #-0]!
	while (n--);
     3c4:	052e0000 	streq	r0, [lr, #-0]!
     3c8:	00010000 	andeq	r0, r1, r0
     3cc:	00053252 	andeq	r3, r5, r2, asr r2
		n--;
     3d0:	00053c00 	andeq	r3, r5, r0, lsl #24
     3d4:	52000100 	andpl	r0, r0, #0, 2
     3d8:	00000540 	andeq	r0, r0, r0, asr #10
void mdelay (volatile word n) {
     3dc:	0000054a 	andeq	r0, r0, sl, asr #10
     3e0:	4e520001 	cdpmi	0, 5, cr0, cr2, cr1, {0}
	while (n) {
     3e4:	5a000005 	bpl	400 <mdelay+0x24>
     3e8:	01000005 	tsteq	r0, r5
}
     3ec:	05e65200 	strbeq	r5, [r6, #512]!	; 0x200
		udelay (999);
     3f0:	05ea0000 	strbeq	r0, [sl, #0]!
     3f4:	00010000 	andeq	r0, r1, r0
		n--;
     3f8:	00000052 	andeq	r0, r0, r2, asr r0
     3fc:	00000000 	andeq	r0, r0, r0
     400:	0004aa00 	andeq	sl, r4, r0, lsl #20
     404:	0004bc00 	andeq	fp, r4, r0, lsl #24
void __pi_ondomain (lword d) {
     408:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		if (__pi_systat.effpdm > 1)
     414:	00000444 	andeq	r0, r0, r4, asr #8
			__pi_systat.effpdm = 1;
     418:	0000044c 	andeq	r0, r0, ip, asr #8
	PRCMPowerDomainOn (d);
     41c:	00500001 	subseq	r0, r0, r1
     420:	00000000 	andeq	r0, r0, r0
     424:	44000000 	strmi	r0, [r0], #-0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	4a000004 	bmi	440 <__pi_ondomain+0x38>
     42c:	01000004 	tsteq	r0, r4
     430:	044a5100 	strbeq	r5, [sl], #-256	; 0xffffff00
	__pi_systat.ondmns |= d;
     434:	044f0000 	strbeq	r0, [pc], #-0	; 43c <__pi_ondomain+0x34>
     438:	00010000 	andeq	r0, r1, r0
}
     43c:	00000052 	andeq	r0, r0, r2, asr r0
	...
	diag ("SYSERR: %x, %s", ec, m);
     44c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		all_leds_blink;
     460:	00510001 	subseq	r0, r1, r1
     464:	00000000 	andeq	r0, r0, r0
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     47c:	00010000 	andeq	r0, r1, r0
     480:	00000052 	andeq	r0, r0, r2, asr r0
     484:	00000000 	andeq	r0, r0, r0
	while (1) {
     488:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	setdel = __pi_mintk - __pi_old;
     49c:	00500001 	subseq	r0, r0, r1
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	01000000 	mrseq	r0, (UNDEF: 0)
     4a8:	00005400 	andeq	r5, r0, r0, lsl #8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	04080000 	streq	r0, [r8], #-0
     4b4:	04200000 	strteq	r0, [r0], #-0
     4b8:	00010000 	andeq	r0, r1, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	00042050 	andeq	r2, r4, r0, asr r0
	sti_tim;
     4c0:	00043800 	andeq	r3, r4, r0, lsl #16
}
     4c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     4d0:	000003dc 	ldrdeq	r0, [r0], -ip
     4d4:	000003e2 	andeq	r0, r0, r2, ror #7
	cli_aux;
     4d8:	00500001 	subseq	r0, r0, r1
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e8:	01000000 	mrseq	r0, (UNDEF: 0)
     4ec:	00005000 	andeq	r5, r0, r0
	sti_aux;
     4f0:	00000000 	andeq	r0, r0, r0
}
     4f4:	13c00000 	bicne	r0, r0, #0
     4f8:	13de0000 	bicsne	r0, lr, #0
     4fc:	00020000 	andeq	r0, r2, r0
void AONRTCIntHandler () {
     500:	13de7091 	bicsne	r7, lr, #145	; 0x91
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	14060000 	strne	r0, [r6], #-0
     508:	00010000 	andeq	r0, r1, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	00140a54 	andseq	r0, r4, r4, asr sl
		if (__pi_utims [0] == 0)
     510:	00141200 	andseq	r1, r4, r0, lsl #4
     514:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (*(__pi_utims [0])) {
     518:	00001420 	andeq	r1, r0, r0, lsr #8
     51c:	0000146a 	andeq	r1, r0, sl, ror #8
			(*(__pi_utims [0]))--;
     520:	6e560001 	cdpvs	0, 5, cr0, cr6, cr1, {0}
		if (__pi_utims [1] == 0)
     524:	e6000014 			; <UNDEFINED> instruction: 0xe6000014
		if (*(__pi_utims [1])) {
     528:	01000014 	tsteq	r0, r4, lsl r0
			aux_timer_inactive = 0;
     52c:	00005600 	andeq	r5, r0, r0, lsl #12
			(*(__pi_utims [1]))--;
     530:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     534:	142a0000 	strtne	r0, [sl], #-0
		if (*(__pi_utims [2])) {
     538:	14680000 	strbtne	r0, [r8], #-0
			(*(__pi_utims [2]))--;
     53c:	00010000 	andeq	r0, r1, r0
		if (__pi_utims [3] != 0) {
     540:	00146e51 	andseq	r6, r4, r1, asr lr
			if (*(__pi_utims [3])) {
     544:	00148000 	andseq	r8, r4, r0
				aux_timer_inactive = 0;
     548:	51000100 	mrspl	r0, (UNDEF: 16)
				(*(__pi_utims [3]))--;
     54c:	0000148c 	andeq	r1, r0, ip, lsl #9
	if (__pi_systat.ledsts) {
     550:	00001496 	muleq	r0, r6, r4
     554:	a8510001 	ldmdage	r1, {r0}^
		if (__pi_systat.ledblc++ == 0) {
     558:	ac000014 	stcge	0, cr0, [r0], {20}
     55c:	01000014 	tsteq	r0, r4, lsl r0
			if (__pi_systat.ledblk) {
     560:	14cc5100 	strbne	r5, [ip], #256	; 0x100
     564:	14d00000 	ldrbne	r0, [r0], #0
     568:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	00000051 	andeq	r0, r0, r1, asr r0
     570:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     574:	00142a00 	andseq	r2, r4, r0, lsl #20
     578:	00146800 	andseq	r6, r4, r0, lsl #16
     57c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
				if (__pi_systat.ledsts & 0x4)
     580:	0000146e 	andeq	r1, r0, lr, ror #8
				__pi_systat.ledblk = 0;
     584:	00001496 	muleq	r0, r6, r4
     588:	a8550001 	ldmdage	r5, {r0}^
			if (__pi_systat.fstblk)
     58c:	ac000014 	stcge	0, cr0, [r0], {20}
     590:	01000014 	tsteq	r0, r4, lsl r0
				__pi_systat.ledblc = 200;
     594:	14cc5500 	strbne	r5, [ip], #1280	; 0x500
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	14e60000 	strbtne	r0, [r6], #0
		cli_tim;
     59c:	00010000 	andeq	r0, r1, r0
		__pi_new += setdel;
     5a0:	00000055 	andeq	r0, r0, r5, asr r0
     5a4:	00000000 	andeq	r0, r0, r0
		setdel = 0;
     5a8:	00149c00 	andseq	r9, r4, r0, lsl #24
		RISE_N_SHINE;
     5ac:	0014a800 	andseq	sl, r4, r0, lsl #16
		__pi_new += setdel;
     5b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		RISE_N_SHINE;
     5b4:	000014ac 	andeq	r1, r0, ip, lsr #9
     5b8:	000014c6 	andeq	r1, r0, r6, asr #9
		aux_timer_inactive = 1;
     5bc:	ca550001 	bgt	15405c8 <__ccfg+0x1520620>
     5c0:	cc000014 	stcgt	0, cr0, [r0], {20}
				if (__pi_systat.ledsts & 0x1)
     5c4:	01000014 	tsteq	r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	00005500 	andeq	r5, r0, r0, lsl #10
     5cc:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     5d0:	14500000 	ldrbne	r0, [r0], #-0
     5d4:	14680000 	strbtne	r0, [r8], #-0
     5d8:	00010000 	andeq	r0, r1, r0
				if (__pi_systat.ledsts & 0x8)
     5dc:	00000054 	andeq	r0, r0, r4, asr r0
				__pi_systat.ledblk = 1;
     5e0:	00000000 	andeq	r0, r0, r0
     5e4:	00149600 	andseq	r9, r4, r0, lsl #12
		if (aux_timer_inactive) {
     5e8:	0014a800 	andseq	sl, r4, r0, lsl #16
			cli_aux;
     5ec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     5f0:	000014ac 	andeq	r1, r0, ip, lsr #9
     5f4:	000014c0 	andeq	r1, r0, r0, asr #9
     5f8:	c0540001 	subsgt	r0, r4, r1
     5fc:	cc000014 	stcgt	0, cr0, [r0], {20}
     600:	01000014 	tsteq	r0, r4, lsl r0
     604:	00005300 	andeq	r5, r0, r0, lsl #6
     608:	00000000 	andeq	r0, r0, r0
     60c:	14d80000 	ldrbne	r0, [r8], #0
     610:	14e60000 	strbtne	r0, [r6], #0
word tci_update_delay_ticks (Boolean force) {
     614:	00010000 	andeq	r0, r1, r0
	cli_tim;
     618:	00000051 	andeq	r0, r0, r1, asr r0
     61c:	00000000 	andeq	r0, r0, r0
	if (setdel) {
     620:	000f1000 	andeq	r1, pc, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	000f1c00 	andeq	r1, pc, r0, lsl #24
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	return NO;
     63c:	00500001 	subseq	r0, r0, r1
			setdel = 0;
     640:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	01000000 	mrseq	r0, (UNDEF: 0)
     648:	00005000 	andeq	r5, r0, r0
	...
		return YES;
     658:	00010000 	andeq	r0, r1, r0
     65c:	00000051 	andeq	r0, r0, r1, asr r0
     660:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	UARTConfigSetExpClk (UART0_BASE,
     678:	00520001 	subseq	r0, r2, r1
     67c:	00000000 	andeq	r0, r0, r0
     680:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     694:	00010000 	andeq	r0, r1, r0
     698:	00000053 	andeq	r0, r0, r3, asr r0
	urates [0] = rate;
     69c:	00000000 	andeq	r0, r0, r0
}
     6a0:	53000100 	movwpl	r0, #256	; 0x100
	...
     6ac:	00530001 	subseq	r0, r3, r1
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
     6c0:	00005000 	andeq	r5, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	13a80000 			; <UNDEFINED> instruction: 0x13a80000
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	13b00000 	movsne	r0, #0
     6d0:	00010000 	andeq	r0, r1, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	00000050 	andeq	r0, r0, r0, asr r0
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	0012cc00 	andseq	ip, r2, r0, lsl #24
     6e0:	0012d200 	andseq	sp, r2, r0, lsl #4
     6e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	switch (operation) {
     6f0:	000012e2 	andeq	r1, r0, r2, ror #5
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	0000130e 	andeq	r1, r0, lr, lsl #6
     6f8:	0e540001 	cdpeq	0, 5, cr0, cr4, cr1, {0}
     6fc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     700:	01000013 	tsteq	r0, r3, lsl r0
     704:	13145200 	tstne	r4, #0, 4
				*buf++ = uart_a_read;
     708:	135c0000 	cmpne	ip, #0
     70c:	00010000 	andeq	r0, r1, r0
			while (len && uart_a_char_available) {
     710:	00135c54 	andseq	r5, r3, r4, asr ip
     714:	00137400 	andseq	r7, r3, r0, lsl #8
     718:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     724:	0000130e 	andeq	r1, r0, lr, lsl #6
			uart_a_disable_int;
     728:	00001312 	andeq	r1, r0, r2, lsl r3
			if (uart_a_char_available) {
     72c:	12540001 	subsne	r0, r4, #1
				*buf++ = uart_a_read;
     730:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
			uart_a_disable_int;
     734:	01000013 	tsteq	r0, r3, lsl r0
     738:	132a5300 			; <UNDEFINED> instruction: 0x132a5300
			if (uart_a_char_available) {
     73c:	13330000 	teqne	r3, #0
     740:	00010000 	andeq	r0, r1, r0
				uart_a_enable_int;
     744:	00000050 	andeq	r0, r0, r0, asr r0
     748:	00000000 	andeq	r0, r0, r0
				goto Redo_rx;
     74c:	00131c00 	andseq	r1, r3, r0, lsl #24
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	00132c00 	andseq	r2, r3, r0, lsl #24
     754:	53000100 	movwpl	r0, #256	; 0x100
	...
				uart_a_write (*buf);
     760:	000012e2 	andeq	r1, r0, r2, ror #5
     764:	00001300 	andeq	r1, r0, r0, lsl #6
			while (len && uart_a_room_in_tx) {
     768:	06500001 	ldrbeq	r0, [r0], -r1
     76c:	26000013 			; <UNDEFINED> instruction: 0x26000013
     770:	01000013 	tsteq	r0, r3, lsl r0
			if (len != operation) {
     774:	13265000 			; <UNDEFINED> instruction: 0x13265000
			uart_a_disable_int;
     778:	13300000 	teqne	r0, #0
     77c:	00020000 	andeq	r0, r2, r0
			if (uart_a_room_in_tx) {
     780:	00007c74 	andeq	r7, r0, r4, ror ip
     784:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
     788:	0e900000 	cdpeq	0, 9, cr0, cr0, cr0, {0}
     78c:	0ebe0000 	cdpeq	0, 11, cr0, cr14, cr0, {0}
				*buf++ = uart_a_read;
     790:	00010000 	andeq	r0, r1, r0
			if (uart_a_room_in_tx) {
     794:	000ecc50 	andeq	ip, lr, r0, asr ip
				uart_a_write (*buf);
     798:	000f1000 	andeq	r1, pc, r0
     79c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			uart_a_enable_int;
     7a8:	00000e98 	muleq	r0, r8, lr
     7ac:	00000ea4 	andeq	r0, r0, r4, lsr #29
     7b0:	a4530001 	ldrbge	r0, [r3], #-1
			return 0;
     7b4:	a600000e 	strge	r0, [r0], -lr
			if (len == UART_CNTRL_SETRATE) {
     7b8:	0200000e 	andeq	r0, r0, #14
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	aa007000 	bge	1c7c4 <__exidx_end+0x19a38>
     7c0:	0200000e 	andeq	r0, r0, #14
     7c4:	0100000f 	tsteq	r0, pc
				syserror (EREQPAR, "uar");
     7c8:	0f025300 	svceq	0x00025300
			syserror (ENOOPER, "uai");
     7cc:	0f060000 	svceq	0x00060000
			if (len == UART_CNTRL_GETRATE) {
     7d0:	00020000 	andeq	r0, r2, r0
				return 1;
     7d4:	0f060073 	svceq	0x00060073
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	0f100000 	svceq	0x00100000
			syserror (ENOOPER, "uai");
     7dc:	00010000 	andeq	r0, r1, r0
     7e0:	00000053 	andeq	r0, r0, r3, asr r0
     7e4:	00000000 	andeq	r0, r0, r0
     7e8:	000e9800 	andeq	r9, lr, r0, lsl #16
     7ec:	000e9a00 	andeq	r9, lr, r0, lsl #20
     7f0:	52000100 	andpl	r0, r0, #0, 2
     7f4:	00000eaa 	andeq	r0, r0, sl, lsr #29
     7f8:	00000eea 	andeq	r0, r0, sl, ror #29
     7fc:	02520001 	subseq	r0, r2, #1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	0600000f 	streq	r0, [r0], -pc
void UART0IntHandler () {
     804:	0100000f 	tsteq	r0, pc
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	0f065300 	svceq	0x00065300
     80c:	0f100000 	svceq	0x00100000
     810:	00010000 	andeq	r0, r1, r0
     814:	00000052 	andeq	r0, r0, r2, asr r0
     818:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	0011f400 	andseq	pc, r1, r0, lsl #8
     820:	0011fc00 	andseq	pc, r1, r0, lsl #24
		RISE_N_SHINE;
     824:	51000100 	mrspl	r0, (UNDEF: 16)
     828:	00001200 	andeq	r1, r0, r0, lsl #4
		i_trigger (devevent (UART_A, READ));
     82c:	00001202 	andeq	r1, r0, r2, lsl #4
     830:	00510001 	subseq	r0, r1, r1
     834:	00000000 	andeq	r0, r0, r0
     838:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     83c:	64000011 	strvs	r0, [r0], #-17	; 0xffffffef
     840:	01000011 	tsteq	r0, r1, lsl r0
     844:	116a5000 	cmnne	sl, r0
     848:	11760000 	cmnne	r6, r0
     84c:	00010000 	andeq	r0, r1, r0
     850:	00000050 	andeq	r0, r0, r0, asr r0
     854:	00000000 	andeq	r0, r0, r0
     858:	00114800 	andseq	r4, r1, r0, lsl #16
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	00116600 	andseq	r6, r1, r0, lsl #12
     860:	51000100 	mrspl	r0, (UNDEF: 16)
     864:	0000116a 	andeq	r1, r0, sl, ror #2
		i_trigger (devevent (UART_A, WRITE));
     868:	00001174 	andeq	r1, r0, r4, ror r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	00510001 	subseq	r0, r1, r1
     870:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     874:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     878:	69000011 	stmdbvs	r0, {r0, r4}
     87c:	01000011 	tsteq	r0, r1, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     880:	116a5200 	cmnne	sl, r0, lsl #4
     884:	11720000 	cmnne	r2, r0
     888:	00010000 	andeq	r0, r1, r0
     88c:	00000052 	andeq	r0, r0, r2, asr r0
     890:	00000000 	andeq	r0, r0, r0
     894:	00114800 	andseq	r4, r1, r0, lsl #16
     898:	00116000 	andseq	r6, r1, r0
     89c:	53000100 	movwpl	r0, #256	; 0x100
     8a0:	00001160 	andeq	r1, r0, r0, ror #2
     8a4:	000011e4 	andeq	r1, r0, r4, ror #3
     8a8:	00550001 	subseq	r0, r5, r1
}
     8ac:	00000000 	andeq	r0, r0, r0
     8b0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     8b4:	c8000011 	stmdagt	r0, {r0, r4}
     8b8:	02000011 	andeq	r0, r0, #17
     8bc:	c8009100 	stmdagt	r0, {r8, ip, pc}
void __buttons_setirq (int val) {
     8c0:	e4000011 	str	r0, [r0], #-17	; 0xffffffef
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	02000011 	andeq	r0, r0, #17
     8c8:	00009100 	andeq	r9, r0, r0, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     8d4:	8e000011 	mcrhi	0, 0, r0, cr0, cr1, {0}
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	01000011 	tsteq	r0, r1, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	11965000 	orrsne	r5, r6, r0
     8e0:	11a80000 			; <UNDEFINED> instruction: 0x11a80000
     8e4:	00010000 	andeq	r0, r1, r0
     8e8:	0011b850 	andseq	fp, r1, r0, asr r8
     8ec:	0011c000 	andseq	ip, r1, r0
     8f0:	50000100 	andpl	r0, r0, r0, lsl #2
}
     8f4:	000011c8 	andeq	r1, r0, r8, asr #3
     8f8:	000011d0 	ldrdeq	r1, [r0], -r0
     8fc:	00500001 	subseq	r0, r0, r1
     900:	00000000 	andeq	r0, r0, r0
void __pinlist_setirq (int val) {
     904:	24000000 	strcs	r0, [r0], #-0
	for (i = 0; i < N_PINLIST; i++) {
     908:	2a000011 	bcs	954 <GPIOIntHandler+0x14>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	01000011 	tsteq	r0, r1, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	11305000 	teqne	r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     914:	11380000 	teqne	r8, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	00010000 	andeq	r0, r1, r0
     91c:	00113c50 	andseq	r3, r1, r0, asr ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     920:	00114800 	andseq	r4, r1, r0, lsl #16
     924:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     930:	00001124 	andeq	r1, r0, r4, lsr #2
     934:	0000112c 	andeq	r1, r0, ip, lsr #2
     938:	30510001 	subscc	r0, r1, r1
     93c:	3a000011 	bcc	988 <GPIOIntHandler+0x48>
void GPIOIntHandler () {
     940:	01000011 	tsteq	r0, r1, lsl r0
if (buttons_int) {
     944:	113c5100 	teqne	ip, r0, lsl #2
     948:	11480000 	mrsne	r0, (UNDEF: 72)
	buttons_disable ();
     94c:	00010000 	andeq	r0, r1, r0
     950:	00000051 	andeq	r0, r0, r1, asr r0
	...
	i_trigger ((aword)&__button_list);
     960:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     96c:	00500001 	subseq	r0, r0, r1
	...
     97c:	01000000 	mrseq	r0, (UNDEF: 0)
	RISE_N_SHINE;
     980:	00005200 	andeq	r5, r0, r0, lsl #4
     984:	00000000 	andeq	r0, r0, r0
     988:	110e0000 	mrsne	r0, (UNDEF: 14)
if (pin_sensor_int) {
     98c:	11100000 	tstne	r0, r0
     990:	00010000 	andeq	r0, r1, r0
	i_trigger ((aword)(&__input_pins));
     994:	00000050 	andeq	r0, r0, r0, asr r0
     998:	00000000 	andeq	r0, r0, r0
     99c:	00110e00 	andseq	r0, r1, r0, lsl #28
     9a0:	00111800 	andseq	r1, r1, r0, lsl #16
     9a4:	51000100 	mrspl	r0, (UNDEF: 16)
     9a8:	0000111c 	andeq	r1, r0, ip, lsl r1
     9ac:	00001122 	andeq	r1, r0, r2, lsr #2
     9b0:	00510001 	subseq	r0, r1, r1
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     9bc:	12000011 	andne	r0, r0, #17
	__pinsen_disable_and_clear;
     9c0:	01000011 	tsteq	r0, r1, lsl r0
	RISE_N_SHINE;
     9c4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
}
     9d4:	00010000 	andeq	r0, r1, r0
     9d8:	00000050 	andeq	r0, r0, r0, asr r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	00500001 	subseq	r0, r0, r1
     a00:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	01000000 	mrseq	r0, (UNDEF: 0)
     a08:	00005000 	andeq	r5, r0, r0
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a18:	00010000 	andeq	r0, r1, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1c:	00000051 	andeq	r0, r0, r1, asr r0
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a38:	00500001 	subseq	r0, r0, r1
	...
     a48:	01000000 	mrseq	r0, (UNDEF: 0)
     a4c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5c:	00010000 	andeq	r0, r1, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	00000052 	andeq	r0, r0, r2, asr r0
	...
	all_leds_blink;
     a70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a84:	00510001 	subseq	r0, r1, r1
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	01000000 	mrseq	r0, (UNDEF: 0)
     a90:	00005100 	andeq	r5, r0, r0, lsl #2
     a94:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	11000000 	mrsne	r0, (UNDEF: 0)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	11040000 	mrsne	r0, (UNDEF: 4)
     aa0:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_AON_RTC_COMB);
     aa4:	00110450 	andseq	r0, r1, r0, asr r4
     aa8:	00110e00 	andseq	r0, r1, r0, lsl #28
     aac:	53000100 	movwpl	r0, #256	; 0x100
	...
	IntEnable (INT_AON_GPIO_EDGE);
     ab8:	00001104 	andeq	r1, r0, r4, lsl #2
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	0000110e 	andeq	r1, r0, lr, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	00500001 	subseq	r0, r0, r1
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     ad0:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	00005000 	andeq	r5, r0, r0
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	00010000 	andeq	r0, r1, r0
	urates [0] = UART_RATE / 100;
     ae0:	00000051 	andeq	r0, r0, r1, asr r0
	...
	EXTRA_INITIALIZERS;
     af0:	52000100 	andpl	r0, r0, #0, 2
	...
     afc:	00520001 	subseq	r0, r2, r1
	...
     b0c:	01000000 	mrseq	r0, (UNDEF: 0)
			devinit [i] . init (devinit [i] . param);
     b10:	00005000 	andeq	r5, r0, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	00000000 	andeq	r0, r0, r0
     b18:	10dc0000 	sbcsne	r0, ip, r0
     b1c:	10e40000 	rscne	r0, r4, r0
	IntEnable (INT_UART0_COMB);
     b20:	00010000 	andeq	r0, r1, r0
     b24:	0010e650 	andseq	lr, r0, r0, asr r6
}
     b28:	0010ea00 	andseq	lr, r0, r0, lsl #20
	tci_run_auxiliary_timer ();
     b2c:	50000100 	andpl	r0, r0, r0, lsl #2
		diag ("");
     b30:	000010ea 	andeq	r1, r0, sl, ror #1
     b34:	00001100 	andeq	r1, r0, r0, lsl #2
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	00530001 	subseq	r0, r3, r1
	...
		diag ("Leftover RAM: %d bytes",
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	00005000 	andeq	r5, r0, r0
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00010000 	andeq	r0, r1, r0
     b58:	00000050 	andeq	r0, r0, r0, asr r0
	...
     b68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b74:	00500001 	subseq	r0, r0, r1
	...
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	00005000 	andeq	r5, r0, r0
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	00010000 	andeq	r0, r1, r0
     b94:	00000057 	andeq	r0, r0, r7, asr r0
	...
__attribute__ ((noreturn)) void __pi_release () {
     ba4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	update_n_wake (MAX_WORD, NO);
     bb8:	00500001 	subseq	r0, r0, r1
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (__pi_curr) {
     bc4:	00005000 	andeq	r5, r0, r0
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	00010000 	andeq	r0, r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	00000058 	andeq	r0, r0, r8, asr r0
	__SLEEP;
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	switch (__pi_systat.effpdm) {
     bec:	00540001 	subseq	r0, r4, r1
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	01000000 	mrseq	r0, (UNDEF: 0)
     bf8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	check_stack_overflow;
     c08:	00010000 	andeq	r0, r1, r0
     c0c:	00000058 	andeq	r0, r0, r8, asr r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c10:	00000000 	andeq	r0, r0, r0
     c14:	58000100 	stmdapl	r0, {r8}
	...
	for_all_tasks (__pi_curr) {
     c20:	0000127c 	andeq	r1, r0, ip, ror r2
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	00001284 	andeq	r1, r0, r4, lsl #5
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c28:	84500001 	ldrbhi	r0, [r0], #-1
     c2c:	8e000012 	mcrhi	0, 0, r0, cr0, cr2, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	01000012 	tsteq	r0, r2, lsl r0
     c34:	12945000 	addsne	r5, r4, #0
     c38:	12a00000 	adcne	r0, r0, #0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3c:	00010000 	andeq	r0, r1, r0
     c40:	0012b450 	andseq	fp, r2, r0, asr r4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	0012be00 	andseq	fp, r2, r0, lsl #28
     c48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c54:	0000128a 	andeq	r1, r0, sl, lsl #5
}
     c58:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5c:	bc540001 	mrrclt	0, 0, r0, r4, cr1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	be000012 	mcrlt	0, 0, r0, cr0, cr2, {0}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	01000012 	tsteq	r0, r2, lsl r0
     c68:	12be5200 	adcsne	r5, lr, #0, 4
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6c:	12c00000 	sbcne	r0, r0, #0
     c70:	00010000 	andeq	r0, r1, r0
     c74:	00000054 	andeq	r0, r0, r4, asr r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	000e5a00 	andeq	r5, lr, r0, lsl #20
     c80:	000e8c00 	andeq	r8, lr, r0, lsl #24
     c84:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c90:	00000e70 	andeq	r0, r0, r0, ror lr
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	00000e7a 	andeq	r0, r0, sl, ror lr
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	00530001 	subseq	r0, r3, r1
	...
     ca8:	01000000 	mrseq	r0, (UNDEF: 0)
			SysCtrlSetRechargeBeforePowerDown
     cac:	00005000 	andeq	r5, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cb0:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb4:	00010000 	andeq	r0, r1, r0
     cb8:	00000054 	andeq	r0, r0, r4, asr r0
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	00500001 	subseq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	a4000000 	strge	r0, [r0], #-0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ce0:	bd000010 	stclt	0, cr0, [r0, #-64]	; 0xffffffc0
			while (!(AONWUCPowerStatusGet () &
     ce4:	01000010 	tsteq	r0, r0, lsl r0
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	00005000 	andeq	r5, r0, r0
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	10a40000 	adcne	r0, r4, r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	10ba0000 	adcsne	r0, sl, r0
     cf8:	00010000 	andeq	r0, r1, r0
     cfc:	00000051 	andeq	r0, r0, r1, asr r0
     d00:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	00108000 	andseq	r8, r0, r0
     d08:	00109400 	andseq	r9, r0, r0, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	50000100 	andpl	r0, r0, r0, lsl #2
     d10:	00001094 	muleq	r0, r4, r0
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	00001098 	muleq	r0, r8, r0
			reinit_uart ();
     d18:	9c540001 	mrrcls	0, 0, r0, r4, cr1
     d1c:	a4000010 	strge	r0, [r0], #-16
     d20:	01000010 	tsteq	r0, r0, lsl r0
}
     d24:	00005000 	andeq	r5, r0, r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	10800000 	addne	r0, r0, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	10970000 	addsne	r0, r7, r0
     d34:	00010000 	andeq	r0, r1, r0
     d38:	00109c51 	andseq	r9, r0, r1, asr ip
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	0010a400 	andseq	sl, r0, r0, lsl #8
     d40:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	00001088 	andeq	r1, r0, r8, lsl #1
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	00001097 	muleq	r0, r7, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	9c530001 	mrrcls	0, 0, r0, r3, cr1
     d58:	a4000010 	strge	r0, [r0], #-16
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	01000010 	tsteq	r0, r0, lsl r0
     d60:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d70:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (
     d74:	00000050 	andeq	r0, r0, r0, asr r0
	...
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	goto Redo;
     d90:	00550001 	subseq	r0, r5, r1
	...
     da0:	01000000 	mrseq	r0, (UNDEF: 0)
     da4:	00005200 	andeq	r5, r0, r0, lsl #4
     da8:	00000000 	andeq	r0, r0, r0
     dac:	00010000 	andeq	r0, r1, r0
     db0:	00000052 	andeq	r0, r0, r2, asr r0
     db4:	00000000 	andeq	r0, r0, r0
     db8:	00106000 	andseq	r6, r0, r0
     dbc:	00106a00 	andseq	r6, r0, r0, lsl #20
     dc0:	53000100 	movwpl	r0, #256	; 0x100
	...
     dcc:	00001004 	andeq	r1, r0, r4
     dd0:	0000100a 	andeq	r1, r0, sl
     dd4:	00500001 	subseq	r0, r0, r1
     dd8:	00000000 	andeq	r0, r0, r0
     ddc:	74000000 	strvc	r0, [r0], #-0
     de0:	7a000013 	bvc	e34 <main+0x40>
     de4:	01000013 	tsteq	r0, r3, lsl r0
     de8:	137a5000 	cmnne	sl, #0
     dec:	13a80000 			; <UNDEFINED> instruction: 0x13a80000
     df0:	00010000 	andeq	r0, r1, r0
int main (void) {
     df4:	00000055 	andeq	r0, r0, r5, asr r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	00137400 	andseq	r7, r3, r0, lsl #8
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	00137f00 	andseq	r7, r3, r0, lsl #30
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	51000100 	mrspl	r0, (UNDEF: 16)
	system_init ();
     e08:	0000137f 	andeq	r1, r0, pc, ror r3
	tcv_init ();
     e0c:	000013a8 	andeq	r1, r0, r8, lsr #7
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e10:	00540001 	subseq	r0, r4, r1
     e14:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	90000000 	andls	r0, r0, r0
     e1c:	94000013 	strls	r0, [r0], #-19	; 0xffffffed
     e20:	01000013 	tsteq	r0, r3, lsl r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e24:	13965300 	orrsne	r5, r6, #0, 6
     e28:	139a0000 	orrsne	r0, sl, #0
	delay (16, 0);
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	00139a53 	andseq	r9, r3, r3, asr sl
     e34:	0013a800 	andseq	sl, r3, r0, lsl #16
	__pi_release ();
     e38:	52000100 	andpl	r0, r0, #0, 2
	...
     e4c:	00500001 	subseq	r0, r0, r1
	...
	for_all_tasks (i) {
     e5c:	01000000 	mrseq	r0, (UNDEF: 0)
		for (j = 0; j < nevents (i); j++) {
     e60:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     e70:	00010000 	andeq	r0, r1, r0
			if (i->Events [j] . Event == (aword)pid
     e74:	00000050 	andeq	r0, r0, r0, asr r0
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	00530001 	subseq	r0, r3, r1
static void qfree (aword *ch) {
     e94:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	01000000 	mrseq	r0, (UNDEF: 0)
	cc = (aword*)(mpools + MA_NP);
     e9c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	00010000 	andeq	r0, r1, r0
     eb0:	00000050 	andeq	r0, r0, r0, asr r0
     eb4:	00000000 	andeq	r0, r0, r0
			m_setnextp (cc, m_nextp (chunk));
     eb8:	53000100 	movwpl	r0, #256	; 0x100
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     ec4:	00530001 	subseq	r0, r3, r1
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005000 	andeq	r5, r0, r0
			m_setnextp (cc, m_nextp (chunk));
     edc:	00000000 	andeq	r0, r0, r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	00010000 	andeq	r0, r1, r0
     ee4:	00000050 	andeq	r0, r0, r0, asr r0
	...
     ef4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (m_size (chunk) >= m_size (ch))
     f00:	00530001 	subseq	r0, r3, r1
		chunk = m_nextp (chunk))
     f04:	00000000 	andeq	r0, r0, r0
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
     f0c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	diag_wchar (c, a);
     f1c:	00010000 	andeq	r0, r1, r0
}
     f20:	00000050 	andeq	r0, r0, r0, asr r0
     f24:	00000000 	andeq	r0, r0, r0
	syserror (ESTATE, "state");
     f28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	00530001 	subseq	r0, r3, r1
     f40:	00000000 	andeq	r0, r0, r0
     f44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
     f4c:	0100000f 	tsteq	r0, pc
     f50:	00005000 	andeq	r5, r0, r0
     f54:	00000000 	andeq	r0, r0, r0
     f58:	0f380000 	svceq	0x00380000
     f5c:	0f410000 	svceq	0x00410000
     f60:	00010000 	andeq	r0, r1, r0
     f64:	00000051 	andeq	r0, r0, r1, asr r0
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	000f4600 	andeq	r4, pc, r0, lsl #12
     f70:	000f8400 	andeq	r8, pc, r0, lsl #8
     f74:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     f78:	00000f88 	andeq	r0, r0, r8, lsl #31
		for_all_tasks (i) {
     f7c:	00000fd6 	ldrdeq	r0, [r0], -r6
	__pi_mintk = znew + min;
     f80:	d8540001 	ldmdale	r4, {r0}^
     f84:	e200000f 	and	r0, r0, #15
			if (!twaiting (i))
     f88:	0100000f 	tsteq	r0, pc
     f8c:	00005400 	andeq	r5, r0, r0, lsl #8
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	00000000 	andeq	r0, r0, r0
     f94:	0f7e0000 	svceq	0x007e0000
     f98:	0f800000 	svceq	0x00800000
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	000f8850 	andeq	r8, pc, r0, asr r8	; <UNPREDICTABLE>
     fa4:	000fd800 	andeq	sp, pc, r0, lsl #16
     fa8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fb4:	00001018 	andeq	r1, r0, r8, lsl r0
     fb8:	0000102c 	andeq	r1, r0, ip, lsr #32
     fbc:	32500001 	subscc	r0, r0, #1
				wakeuptm (i);
     fc0:	4c000010 	stcmi	0, cr0, [r0], {16}
     fc4:	01000010 	tsteq	r0, r0, lsl r0
		for_all_tasks (i) {
     fc8:	00005000 	andeq	r5, r0, r0
				d = i->Timer - znew;
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	10180000 	andsne	r0, r8, r0
     fd4:	102e0000 	eorne	r0, lr, r0
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	00010000 	andeq	r0, r1, r0
     fdc:	00103251 	andseq	r3, r0, r1, asr r2
     fe0:	00103800 	andseq	r3, r0, r0, lsl #16
	__pi_old = znew;
     fe4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
     ff0:	0000102a 	andeq	r1, r0, sl, lsr #32
     ff4:	0000102c 	andeq	r1, r0, ip, lsr #32
     ff8:	00500001 	subseq	r0, r0, r1
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	2a000000 	bcs	1008 <proceed+0x4>
void proceed (word state) {
    1004:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
	prcdstate (__pi_curr, state);
    1008:	01000010 	tsteq	r0, r0, lsl r0
    100c:	00005100 	andeq	r5, r0, r0, lsl #2
	release;
    1010:	00000000 	andeq	r0, r0, r0
    1014:	12340000 	eorsne	r0, r4, #0
void __pi_wait (aword event, word state) {
    1018:	12420000 	subne	r0, r2, #0
	sint j = nevents (__pi_curr);
    101c:	00010000 	andeq	r0, r1, r0
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	00124850 	andseq	r4, r2, r0, asr r8
    1024:	00125b00 	andseq	r5, r2, r0, lsl #22
    1028:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	setestate (__pi_curr->Events [j], state, event);
    1034:	00001240 	andeq	r1, r0, r0, asr #4
	incwait (__pi_curr);
    1038:	00001242 	andeq	r1, r0, r2, asr #4
	setestate (__pi_curr->Events [j], state, event);
    103c:	00500001 	subseq	r0, r0, r1
	...
void __pi_trigger (aword event) {
    104c:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
    1050:	00005000 	andeq	r5, r0, r0
		for (j = 0; j < nevents (i); j++) {
    1054:	00000000 	andeq	r0, r0, r0
    1058:	00010000 	andeq	r0, r1, r0
    105c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (i->Events [j] . Event == event) {
    106c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
aword __pi_join (aword pid, word st) {
    1080:	00540001 	subseq	r0, r4, r1
	for_all_tasks (i) {
    1084:	00000000 	andeq	r0, r0, r0
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
	return 0;
    108c:	00005000 	andeq	r5, r0, r0
	...
	for_all_tasks (i) {
    109c:	00010000 	andeq	r0, r1, r0
    10a0:	00000050 	andeq	r0, r0, r0, asr r0
void delay (word d, word state) {
    10a4:	00000000 	andeq	r0, r0, r0
	settstate (__pi_curr, state);
    10a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10b4:	00750002 	rsbseq	r0, r5, r2
	...
	inctimer (__pi_curr);
    10c8:	00500001 	subseq	r0, r0, r1
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	01000000 	mrseq	r0, (UNDEF: 0)
}
    10d4:	00005000 	andeq	r5, r0, r0
	...
		return (int) __pi_curr;
    10e4:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i)
    10e8:	00000054 	andeq	r0, r0, r4, asr r0
}
    10ec:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
    10f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (i = 0; *(s+i) != '\0'; i++);
    1104:	00500001 	subseq	r0, r0, r1
}
    1108:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
	while (n--)
    1110:	00005000 	andeq	r5, r0, r0
	...
		*dest++ = *src++;
    1120:	00010000 	andeq	r0, r1, r0
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	00000053 	andeq	r0, r0, r3, asr r0
	...
	if (ioreq [loc] != NULL)
    1134:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1140:	00730002 	rsbseq	r0, r3, r2
	...
sint io (word retry, word dev, word operation, char *buf, word len) {
    1154:	00500001 	subseq	r0, r0, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1158:	00000000 	andeq	r0, r0, r0
    115c:	01000000 	mrseq	r0, (UNDEF: 0)
    1160:	00005000 	andeq	r5, r0, r0
	...
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	00010000 	andeq	r0, r1, r0
    1174:	00000051 	andeq	r0, r0, r1, asr r0
	if (ret >= 0)
    1178:	00000000 	andeq	r0, r0, r0
	if (ret == -1) {
    117c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		iowait (dev, operation, retry);
    1190:	00530001 	subseq	r0, r3, r1
			release;
    1194:	00000000 	andeq	r0, r0, r0
	if (ret == -2) {
    1198:	01000000 	mrseq	r0, (UNDEF: 0)
		if (retry != WNONE) {
    119c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			(ioreq [dev]) (NONE, buf, len);
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	00000050 	andeq	r0, r0, r0, asr r0
    11b4:	00000000 	andeq	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    11b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    11c4:	00730002 	rsbseq	r0, r3, r2
	...
		delay (-ret - 2, retry);
    11d8:	00500001 	subseq	r0, r0, r1
		release;
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	00005500 	andeq	r5, r0, r0, lsl #10
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00010000 	andeq	r0, r1, r0
    11f0:	00000050 	andeq	r0, r0, r0, asr r0
    11f4:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "mal1");
    11f8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	m_size (mpools [0]) = mlen - m_hdrlen;
    120c:	00510001 	subseq	r0, r1, r1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1210:	00000000 	andeq	r0, r0, r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1214:	01000000 	mrseq	r0, (UNDEF: 0)
    1218:	00005700 	andeq	r5, r0, r0, lsl #14
}
    121c:	00000000 	andeq	r0, r0, r0
    1220:	00010000 	andeq	r0, r1, r0
    1224:	00000051 	andeq	r0, r0, r1, asr r0
    1228:	00000000 	andeq	r0, r0, r0
    122c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
		syserror (EMALLOC, "malg");
    1240:	00520001 	subseq	r0, r2, r1
    1244:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (ch) ^= MALLOC_UMASK;
    124c:	00005400 	andeq	r5, r0, r0, lsl #8
    1250:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    1254:	00010000 	andeq	r0, r1, r0
	QFREE;
    1258:	00000052 	andeq	r0, r0, r2, asr r0
	if (mevent [MA_NP] . nwait) {
    125c:	00000000 	andeq	r0, r0, r0
    1260:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1274:	00500001 	subseq	r0, r0, r1
    1278:	00000000 	andeq	r0, r0, r0
void kill (aword pid) {
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
		pid = (aword) __pi_curr;
    1280:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	syserror (EREQPAR, "kpi");
    1290:	00010000 	andeq	r0, r1, r0
		if ((aword)i == pid) {
    1294:	00000050 	andeq	r0, r0, r0, asr r0
	...
			ufree (i);
    12a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				release;
    12b0:	00540001 	subseq	r0, r4, r1
	...
}
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
    12c4:	00005100 	andeq	r5, r0, r0, lsl #2
    12c8:	00000000 	andeq	r0, r0, r0
	if (size < 8)
    12cc:	00010000 	andeq	r0, r1, r0
		_size = 2;
    12d0:	00000051 	andeq	r0, r0, r1, asr r0
	...
		_size = (((aword)size) + 3) >> 2;
    12e0:	52000100 	andpl	r0, r0, #0, 2
	...
			mevent [MA_NP] . nfail ++;
    12ec:	00520001 	subseq	r0, r2, r1
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
			syserror (EMALLOC, "malc");
    1300:	00005000 	andeq	r5, r0, r0
    1304:	00000000 	andeq	r0, r0, r0
		if (m_size (chunk) >= _size)
    1308:	00070000 	andeq	r0, r7, r0
    130c:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
		chunk = m_nextp (chunk)) {
    1310:	00220072 	eoreq	r0, r2, r2, ror r0
		m_setnextp (cc, m_nextp (chunk));
    1314:	00000000 	andeq	r0, r0, r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1318:	01000000 	mrseq	r0, (UNDEF: 0)
    131c:	00005000 	andeq	r5, r0, r0
	...
			m_size (cc) = waste - m_hdrlen;
    132c:	00010000 	andeq	r0, r1, r0
			QFREE;
    1330:	00000050 	andeq	r0, r0, r0, asr r0
	...
		mcfree [MA_NP] -= m_size (chunk);
    1340:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	00500001 	subseq	r0, r0, r1
}
    1358:	00000000 	andeq	r0, r0, r0
    135c:	01000000 	mrseq	r0, (UNDEF: 0)
    1360:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1370:	00010000 	andeq	r0, r1, r0
aword __pi_fork (fsmcode func, aword data) {
    1374:	00000051 	andeq	r0, r0, r1, asr r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	00000000 	andeq	r0, r0, r0
    137c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		if ((j = __PCB) == NULL)
    1390:	00500001 	subseq	r0, r0, r1
}
    1394:	00000000 	andeq	r0, r0, r0
			for (; j->Next != NULL; j = j->Next);
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
    139c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	if (mevent [MA_NP] . nwait != 255)
    13ac:	00010000 	andeq	r0, r1, r0
    13b0:	00000050 	andeq	r0, r0, r0, asr r0
		mevent [MA_NP] . nwait ++;
    13b4:	00000000 	andeq	r0, r0, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	diag_disable_int (a, is);
    13cc:	00510001 	subseq	r0, r1, r1
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
				d = (bc == 16) ? 10000 : 1000000000;
    13d8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	dgout ('\n');
    13e8:	00010000 	andeq	r0, r1, r0
    13ec:	00000050 	andeq	r0, r0, r0, asr r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    13f0:	00000000 	andeq	r0, r0, r0
	diag_wait (a);
    13f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1408:	00510001 	subseq	r0, r1, r1
		if (*mess == '%') {
    140c:	00000000 	andeq	r0, r0, r0
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
			if (*mess == 'l') {
    1414:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				bc = 32;
    1424:	00010000 	andeq	r0, r1, r0
				bc = 16;
    1428:	00000050 	andeq	r0, r0, r0, asr r0
			switch (*mess) {
    142c:	00000000 	andeq	r0, r0, r0
    1430:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				dgout ('%');
    143c:	00500001 	subseq	r0, r0, r1
				dgout (*mess);
    1440:	00000000 	andeq	r0, r0, r0
    1444:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (*mess) {
    1448:	00005000 	andeq	r5, r0, r0
					v = __pi_hex_enc_table [
    144c:	00000000 	andeq	r0, r0, r0
					i += 4;
    1450:	00010000 	andeq	r0, r1, r0
					(val >> (bc - i)) & 0xf];
    1454:	00000050 	andeq	r0, r0, r0, asr r0
	...
				while (i < bc) {
    1464:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				if ((val >> (bc - 1)) & 1) {
    1470:	00510001 	subseq	r0, r1, r1
    1474:	00000000 	andeq	r0, r0, r0
					dgout ('-');
    1478:	01000000 	mrseq	r0, (UNDEF: 0)
    147c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				d = (bc == 16) ? 10000 : 1000000000;
    148c:	00010000 	andeq	r0, r1, r0
    1490:	00000052 	andeq	r0, r0, r2, asr r0
    1494:	00000000 	andeq	r0, r0, r0
					v = (word) (val / d);
    1498:	52000100 	andpl	r0, r0, #0, 2
	...
					d /= 10;
    14a4:	00520001 	subseq	r0, r2, r1
	...
					dgout (v + '0');
    14b4:	01000000 	mrseq	r0, (UNDEF: 0)
					d /= 10;
    14b8:	00005000 	andeq	r5, r0, r0
	...
					v = (word) (val / d);
    14c8:	00010000 	andeq	r0, r1, r0
				if (bc == 16)
    14cc:	00000050 	andeq	r0, r0, r0, asr r0
				d = (bc == 16) ? 10000 : 1000000000;
    14d0:	00000000 	andeq	r0, r0, r0
					val &= 0xffff;
    14d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			dgout (*mess++);
    14e8:	00500001 	subseq	r0, r0, r1
    14ec:	00000000 	andeq	r0, r0, r0
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
    14f4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
{
    1504:	00010000 	andeq	r0, r1, r0
    SetupTrimDevice();
    1508:	00000051 	andeq	r0, r0, r1, asr r0
	...
    __asm("    ldr     r0, =_bss\n"
    1518:	52000100 	andpl	r0, r0, #0, 2
	...
    1524:	00550001 	subseq	r0, r5, r1
	...
        *pui32Dest++ = *pui32Src++;
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
    1538:	00005000 	andeq	r5, r0, r0
    153c:	00000000 	andeq	r0, r0, r0
    1540:	00010000 	andeq	r0, r1, r0
    1544:	00000054 	andeq	r0, r0, r4, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1554:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1560:	00500001 	subseq	r0, r0, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
	for (b = 0, i = 0; i < 8; i++) {
    1574:	00005200 	andeq	r5, r0, r0, lsl #4
}
    1578:	00000000 	andeq	r0, r0, r0
    157c:	00010000 	andeq	r0, r1, r0
    1580:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1590:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    159c:	00500001 	subseq	r0, r0, r1
	...
}
    15ac:	01000000 	mrseq	r0, (UNDEF: 0)
    15b0:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	00010000 	andeq	r0, r1, r0
	put_byte (cmd);
    15bc:	00000051 	andeq	r0, r0, r1, asr r0
    15c0:	00000000 	andeq	r0, r0, r0
}
    15c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (dopen && (rdsr () & 1)) {
    15d8:	00520001 	subseq	r0, r2, r1
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	01000000 	mrseq	r0, (UNDEF: 0)
    15e4:	00005400 	andeq	r5, r0, r0, lsl #8
	put_byte (CMD_RDSR);
    15e8:	00000000 	andeq	r0, r0, r0
	r = get_byte ();
    15ec:	00010000 	andeq	r0, r1, r0
    15f0:	00000052 	andeq	r0, r0, r2, asr r0
	while (dopen && (rdsr () & 1)) {
    15f4:	00000000 	andeq	r0, r0, r0
}
    15f8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			mdelay (1);
    1604:	00540001 	subseq	r0, r4, r1
    1608:	00000000 	andeq	r0, r0, r0
			delay (del, st);
    160c:	01000000 	mrseq	r0, (UNDEF: 0)
    1610:	00005400 	andeq	r5, r0, r0, lsl #8
	...
static void ready () {
    1620:	00010000 	andeq	r0, r1, r0
	if (dopen) {
    1624:	00000053 	andeq	r0, r0, r3, asr r0
	...
	dstat = 0;
    1634:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1640:	00500001 	subseq	r0, r0, r1
	...
		dopen = DOPEN_TEMP;
    1650:	01000000 	mrseq	r0, (UNDEF: 0)
    1654:	00005000 	andeq	r5, r0, r0
    1658:	00000000 	andeq	r0, r0, r0
    165c:	00010000 	andeq	r0, r1, r0
static void cclose () {
    1660:	00000050 	andeq	r0, r0, r0, asr r0
	if (dopen == DOPEN_TEMP) {
    1664:	00000000 	andeq	r0, r0, r0
    1668:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		dopen = 0;
    167c:	00500001 	subseq	r0, r0, r1
}
    1680:	00000000 	andeq	r0, r0, r0
word ee_open () {
    1684:	01000000 	mrseq	r0, (UNDEF: 0)
	ready ();
    1688:	00005000 	andeq	r5, r0, r0
	dopen = DOPEN_PERM;
    168c:	00000000 	andeq	r0, r0, r0
    1690:	00010000 	andeq	r0, r1, r0
}
    1694:	00000050 	andeq	r0, r0, r0, asr r0
	if (dopen) {
    1698:	00000000 	andeq	r0, r0, r0
    169c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int ser_in (word st, char *buf, int len) {
    16b0:	00510001 	subseq	r0, r1, r1
	if (len == 0)
    16b4:	00000000 	andeq	r0, r0, r0
	if (__inpline == NULL) {
    16b8:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((prcs = running (__inserial)) == 0) {
    16bc:	00005100 	andeq	r5, r0, r0, lsl #2
    16c0:	00000000 	andeq	r0, r0, r0
			prcs = runthread (__inserial);
    16c4:	00010000 	andeq	r0, r1, r0
    16c8:	00000051 	andeq	r0, r0, r1, asr r0
			if (prcs == 0) {
    16cc:	00000000 	andeq	r0, r0, r0
				npwait (st);
    16d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    16e4:	00540001 	subseq	r0, r4, r1
	if (prcs >= len)
    16e8:	00000000 	andeq	r0, r0, r0
		prcs = len-1;
    16ec:	0a000000 	beq	16f4 <ser_in+0x48>
	memcpy (buf, __inpline, prcs);
    16f0:	32007000 	andcc	r7, r0, #0
    16f4:	00000324 	andeq	r0, r0, r4, lsr #6
    16f8:	00220000 	eoreq	r0, r2, r0
	ufree (__inpline);
    16fc:	00000000 	andeq	r0, r0, r0
	__inpline = NULL;
    1700:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*buf) // if it's NULL, it's a bin cmd
    1704:	00005400 	andeq	r5, r0, r0, lsl #8
		buf [prcs] = '\0';
    1708:	00000000 	andeq	r0, r0, r0
}
    170c:	000a0000 	andeq	r0, sl, r0
		prcs = strlen (__inpline);
    1710:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1714:	00000003 	andeq	r0, r0, r3
		return 0;
    1718:	00002200 	andeq	r2, r0, r0, lsl #4
    171c:	00000000 	andeq	r0, r0, r0
    1720:	00010000 	andeq	r0, r1, r0
int ser_outf (word st, const char *m, ...) {
    1724:	00000054 	andeq	r0, r0, r4, asr r0
    1728:	00000000 	andeq	r0, r0, r0
	if ((prcs = running (__outserial)) != 0) {
    172c:	70000a00 	andvc	r0, r0, r0, lsl #20
    1730:	03243200 			; <UNDEFINED> instruction: 0x03243200
		join (prcs, st);
    1734:	00000000 	andeq	r0, r0, r0
    1738:	00000022 	andeq	r0, r0, r2, lsr #32
	...
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1748:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (runstrand (__outserial, buf) == 0) {
    1754:	00550001 	subseq	r0, r5, r1
	...
		npwait (st);
    1764:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1768:	00005400 	andeq	r5, r0, r0, lsl #8
    176c:	00000000 	andeq	r0, r0, r0
    1770:	00010000 	andeq	r0, r1, r0
    1774:	00000054 	andeq	r0, r0, r4, asr r0
	...
	if (__inpline == NULL) {
    1784:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			prcs = runthread (__inserial);
    1790:	00500001 	subseq	r0, r0, r1
    1794:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    1798:	01000000 	mrseq	r0, (UNDEF: 0)
				npwait (st);
    179c:	00005000 	andeq	r5, r0, r0
	...
	va_start (ap, fmt);
    17ac:	00010000 	andeq	r0, r1, r0
	prcs = vscan (__inpline, fmt, ap);
    17b0:	00000055 	andeq	r0, r0, r5, asr r0
	...
}
    17c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		return 0;
    17d4:	00500001 	subseq	r0, r0, r1
strand (__outserial, const char*)
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
    17e0:	00005000 	andeq	r5, r0, r0
    17e4:	00000000 	andeq	r0, r0, r0
endstrand
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00000050 	andeq	r0, r0, r0, asr r0
	ptr = data;
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1808:	00510001 	subseq	r0, r1, r1
    180c:	00000000 	andeq	r0, r0, r0
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
    1814:	00005100 	andeq	r5, r0, r0, lsl #2
	len -= quant;
    1818:	00000000 	andeq	r0, r0, r0
    181c:	00010000 	andeq	r0, r1, r0
    1820:	00000051 	andeq	r0, r0, r1, asr r0
	...
		finish;
    1830:	53000100 	movwpl	r0, #256	; 0x100
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    183c:	0070000a 	rsbseq	r0, r0, sl
    1840:	00032432 	andeq	r2, r3, r2, lsr r4
    1844:	22000000 	andcs	r0, r0, #0
	...
strand (__inserial, address)
    1850:	00530001 	subseq	r0, r3, r1
    1854:	00000000 	andeq	r0, r0, r0
    1858:	0a000000 	beq	1860 <__inserial+0x18>
	if (__inpline != NULL)
    185c:	32007000 	andcc	r7, r0, #0
    1860:	00000324 	andeq	r0, r0, r4, lsr #6
		finish;
    1864:	00220000 	eoreq	r0, r2, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1868:	00000000 	andeq	r0, r0, r0
    186c:	01000000 	mrseq	r0, (UNDEF: 0)
    1870:	00005300 	andeq	r5, r0, r0, lsl #6
    1874:	00000000 	andeq	r0, r0, r0
		umwait (IM_INIT);
    1878:	000a0000 	andeq	r0, sl, r0
		release;
    187c:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	savedata (data);
    1880:	00000003 	andeq	r0, r0, r3
	len = MAX_LINE_LENGTH;
    1884:	00002200 	andeq	r2, r0, r0, lsl #4
	...
	io (IM_READ, __cport, READ, ptr, 1);
    1894:	00010000 	andeq	r0, r1, r0
	if (ptr == (char*) data) { // new line
    1898:	00000050 	andeq	r0, r0, r0, asr r0
    189c:	00000000 	andeq	r0, r0, r0
		if (*ptr == '\0') { // bin cmd
    18a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			proceed (IM_READ);
    18b4:	00530001 	subseq	r0, r3, r1
    18b8:	00000000 	andeq	r0, r0, r0
	if (*ptr == '\n' || *ptr == '\r') {
    18bc:	01000000 	mrseq	r0, (UNDEF: 0)
    18c0:	00005300 	andeq	r5, r0, r0, lsl #6
    18c4:	00000000 	andeq	r0, r0, r0
		*ptr = '\0';
    18c8:	00010000 	andeq	r0, r1, r0
		__inpline = (char*)data;
    18cc:	00000053 	andeq	r0, r0, r3, asr r0
	...
		ptr++;
    18dc:	52000100 	andpl	r0, r0, #0, 2
	...
	io (IM_BIN, __cport, READ, ptr, 1);
    18e8:	00520001 	subseq	r0, r2, r1
    18ec:	00000000 	andeq	r0, r0, r0
    18f0:	01000000 	mrseq	r0, (UNDEF: 0)
    18f4:	00005200 	andeq	r5, r0, r0, lsl #4
    18f8:	00000000 	andeq	r0, r0, r0
	len -= 2;
    18fc:	00010000 	andeq	r0, r1, r0
	if (len > *ptr + 1) // 1 for 0x04
    1900:	00000052 	andeq	r0, r0, r2, asr r0
	...
	ptr++;
    1910:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1924:	00510001 	subseq	r0, r1, r1
    1928:	00000000 	andeq	r0, r0, r0
	len -= quant;
    192c:	01000000 	mrseq	r0, (UNDEF: 0)
		__inpline = (char*)data;
    1930:	00005100 	andeq	r5, r0, r0, lsl #2
		finish;
    1934:	00000000 	andeq	r0, r0, r0
	ptr += quant;
    1938:	00010000 	andeq	r0, r1, r0
    193c:	00000051 	andeq	r0, r0, r1, asr r0
endstrand
    1940:	00000000 	andeq	r0, r0, r0
    1944:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1950:	00510001 	subseq	r0, r1, r1
	...
    1960:	01000000 	mrseq	r0, (UNDEF: 0)
		if (res && (d < n))
    1964:	00005500 	andeq	r5, r0, r0, lsl #10
	...
			res [d] = (char) c;
    1974:	00010000 	andeq	r0, r1, r0
		d++;
    1978:	00000054 	andeq	r0, r0, r4, asr r0
    197c:	00000000 	andeq	r0, r0, r0
    1980:	50000100 	andpl	r0, r0, r0, lsl #2
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    198c:	00540001 	subseq	r0, r4, r1
	...
	d = 0;
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
		c = *fm++;
    19a0:	00005000 	andeq	r5, r0, r0
		if (c == '\\') {
    19a4:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    19a8:	00010000 	andeq	r0, r1, r0
    19ac:	00000050 	andeq	r0, r0, r0, asr r0
				outc ('\\');
    19b0:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    19b4:	71000700 	tstvc	r0, r0, lsl #14
				outc ('\\');
    19b8:	72243200 	eorvc	r3, r4, #0, 4
    19bc:	00002200 	andeq	r2, r0, r0, lsl #4
			outc (c);
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	00010000 	andeq	r0, r1, r0
			if (c == '\0')
    19c8:	00000050 	andeq	r0, r0, r0, asr r0
	...
				val = (word) va_arg (ap, aword);
    19d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			c = *fm++;
    19e4:	00500001 	subseq	r0, r0, r1
	...
			switch (c) {
    19f4:	01000000 	mrseq	r0, (UNDEF: 0)
    19f8:	00005000 	andeq	r5, r0, r0
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	00010000 	andeq	r0, r1, r0
    1a04:	00000050 	andeq	r0, r0, r0, asr r0
	...
				outc (c);
    1a14:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				return d;
    1a20:	00550001 	subseq	r0, r5, r1
}
    1a24:	00000000 	andeq	r0, r0, r0
    1a28:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (c) {
    1a2c:	00005100 	andeq	r5, r0, r0, lsl #2
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    1a38:	00000055 	andeq	r0, r0, r5, asr r0
				val = (word) va_arg (ap, aword);
    1a3c:	00000000 	andeq	r0, r0, r0
						[ (val >> i) & 0xf ]);
    1a40:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					outc (__pi_hex_enc_table
    1a4c:	00550001 	subseq	r0, r5, r1
	...
				for (i = 12; ; i -= 4) {
    1a5c:	01000000 	mrseq	r0, (UNDEF: 0)
				val = (word) va_arg (ap, aword);
    1a60:	00005600 	andeq	r5, r0, r0, lsl #12
	...
				if (c == 'd' && (val & 0x8000) != 0) {
    1a70:	00010000 	andeq	r0, r1, r0
					outc ('-');
    1a74:	00000050 	andeq	r0, r0, r0, asr r0
	...
				for (i = 12; ; i -= 4) {
    1a84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				enci (10000);
    1a90:	00500001 	subseq	r0, r0, r1
    1a94:	00000000 	andeq	r0, r0, r0
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
    1a9c:	00005000 	andeq	r5, r0, r0
	...
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	00000051 	andeq	r0, r0, r1, asr r0
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1ac4:	00510001 	subseq	r0, r1, r1
    1ac8:	00000000 	andeq	r0, r0, r0
    1acc:	01000000 	mrseq	r0, (UNDEF: 0)
				if (c == 'd' || c == 'u') {
    1ad0:	00005700 	andeq	r5, r0, r0, lsl #14
    1ad4:	00000000 	andeq	r0, r0, r0
					if (c == 'd' &&
    1ad8:	00010000 	andeq	r0, r1, r0
					val = va_arg (ap, lword);
    1adc:	00000057 	andeq	r0, r0, r7, asr r0
					fm++;
    1ae0:	00000000 	andeq	r0, r0, r0
					if (c == 'd' &&
    1ae4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
						outc ('-');
    1af0:	00570001 	subseq	r0, r7, r1
	...
					enci (1000000000UL);
    1b00:	02000000 	andeq	r0, r0, #0
    1b04:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1b08:	00000000 	andeq	r0, r0, r0
    1b0c:	02000000 	andeq	r0, r0, #0
    1b10:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1b14:	00000000 	andeq	r0, r0, r0
    1b18:	02000000 	andeq	r0, r0, #0
    1b1c:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	02000000 	andeq	r0, r0, #0
    1b28:	00789100 	rsbseq	r9, r8, r0, lsl #2
	...
    1b38:	01000000 	mrseq	r0, (UNDEF: 0)
    1b3c:	00005600 	andeq	r5, r0, r0, lsl #12
				} else if (c == 'x') {
    1b40:	00000000 	andeq	r0, r0, r0
					for (i = 28; ; i -= 4) {
    1b44:	00010000 	andeq	r0, r1, r0
					val = va_arg (ap, lword);
    1b48:	00000056 	andeq	r0, r0, r6, asr r0
	...
						outc (__pi_hex_enc_table
    1b58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						if (i == 0)
    1b64:	00540001 	subseq	r0, r4, r1
					for (i = 28; ; i -= 4) {
    1b68:	00000000 	andeq	r0, r0, r0
					outc ('%');
    1b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b70:	00005000 	andeq	r5, r0, r0
    1b74:	00000000 	andeq	r0, r0, r0
					outc ('l');
    1b78:	00010000 	andeq	r0, r1, r0
    1b7c:	00000054 	andeq	r0, r0, r4, asr r0
				val = (word) va_arg (ap, aword);
    1b80:	00000000 	andeq	r0, r0, r0
				outc (val);
    1b84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				while (*st != '\0') {
    1b90:	00540001 	subseq	r0, r4, r1
	...
					outc (*st);
    1ba0:	01000000 	mrseq	r0, (UNDEF: 0)
					st++;
    1ba4:	00005000 	andeq	r5, r0, r0
		c = *fm++;
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	00010000 	andeq	r0, r1, r0
    1bb0:	00000050 	andeq	r0, r0, r0, asr r0
char *vform (char *res, const char *fm, va_list aq) {
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1bcc:	00540001 	subseq	r0, r4, r1
    1bd0:	00000000 	andeq	r0, r0, r0
	fml = strlen (fm) + 17;
    1bd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd8:	00005000 	andeq	r5, r0, r0
    1bdc:	00000000 	andeq	r0, r0, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    1be0:	00010000 	andeq	r0, r1, r0
    1be4:	00000054 	andeq	r0, r0, r4, asr r0
    1be8:	00000000 	andeq	r0, r0, r0
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1bec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		goto Again;
    1c00:	00500001 	subseq	r0, r0, r1
	...
	if (buf == NULL || fmt == NULL)
    1c10:	01000000 	mrseq	r0, (UNDEF: 0)
    1c14:	00005000 	andeq	r5, r0, r0
	...
	while (*fmt != '\0') {
    1c24:	00010000 	andeq	r0, r1, r0
		if (*fmt++ != '%')
    1c28:	00000050 	andeq	r0, r0, r0, asr r0
	...
		switch (*fmt++) {
    1c38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c44:	00550001 	subseq	r0, r5, r1
}
    1c48:	00000000 	andeq	r0, r0, r0
		switch (*fmt++) {
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00005000 	andeq	r5, r0, r0
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    1c5c:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1c6c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (*buf != ',') {
    1c78:	00540001 	subseq	r0, r4, r1
			sap = va_arg (ap, char*);
    1c7c:	00000000 	andeq	r0, r0, r0
			nc++;
    1c80:	01000000 	mrseq	r0, (UNDEF: 0)
			if (*buf != ',') {
    1c84:	00005100 	andeq	r5, r0, r0, lsl #2
				while (!isspace (*buf) && *buf != ',' &&
    1c88:	00000000 	andeq	r0, r0, r0
    1c8c:	00010000 	andeq	r0, r1, r0
    1c90:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1ca0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (isspace (*buf)) buf++;
    1cac:	00550001 	subseq	r0, r5, r1
	...
			if (*buf == ',') buf++;
    1cbc:	01000000 	mrseq	r0, (UNDEF: 0)
			*sap = '\0';
    1cc0:	00005100 	andeq	r5, r0, r0, lsl #2
			break;
    1cc4:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    1cc8:	00010000 	andeq	r0, r1, r0
    1ccc:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1cdc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1ce8:	00540001 	subseq	r0, r4, r1
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    1cf4:	00005100 	andeq	r5, r0, r0, lsl #2
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	00010000 	andeq	r0, r1, r0
    1d00:	00000050 	andeq	r0, r0, r0, asr r0
    1d04:	00000000 	andeq	r0, r0, r0
    1d08:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1d14:	00500001 	subseq	r0, r0, r1
    1d18:	00000000 	andeq	r0, r0, r0
    1d1c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d20:	00005000 	andeq	r5, r0, r0
	...
    1d30:	00010000 	andeq	r0, r1, r0
    1d34:	00000051 	andeq	r0, r0, r1, asr r0
	...
		    case 'u': scanu (word); break;
    1d44:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d50:	00540001 	subseq	r0, r4, r1
	...
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
    1d64:	00005000 	andeq	r5, r0, r0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	00010000 	andeq	r0, r1, r0
    1d70:	00000053 	andeq	r0, r0, r3, asr r0
	...
		    case 'x': scanx (word); break;
    1d80:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1d8c:	00500001 	subseq	r0, r0, r1
    1d90:	00000000 	andeq	r0, r0, r0
    1d94:	01000000 	mrseq	r0, (UNDEF: 0)
    1d98:	00005000 	andeq	r5, r0, r0
	...
    1da8:	00010000 	andeq	r0, r1, r0
    1dac:	00000052 	andeq	r0, r0, r2, asr r0
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1dc0:	00510001 	subseq	r0, r1, r1
	...
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	00005000 	andeq	r5, r0, r0
	...
    1de4:	00010000 	andeq	r0, r1, r0
    1de8:	00000051 	andeq	r0, r0, r1, asr r0
	...
			switch (*fmt++) {
    1df8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1e0c:	00510001 	subseq	r0, r1, r1
		    	    case 'd': scani (lword); break;
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	01000000 	mrseq	r0, (UNDEF: 0)
    1e18:	00005600 	andeq	r5, r0, r0, lsl #12
    1e1c:	00000000 	andeq	r0, r0, r0
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00000051 	andeq	r0, r0, r1, asr r0
    1e28:	00000000 	andeq	r0, r0, r0
    1e2c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1e38:	00510001 	subseq	r0, r1, r1
    1e3c:	00000000 	andeq	r0, r0, r0
    1e40:	01000000 	mrseq	r0, (UNDEF: 0)
    1e44:	00005600 	andeq	r5, r0, r0, lsl #12
    1e48:	00000000 	andeq	r0, r0, r0
    1e4c:	00010000 	andeq	r0, r1, r0
    1e50:	00000051 	andeq	r0, r0, r1, asr r0
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    1e6c:	00520001 	subseq	r0, r2, r1
    1e70:	00000000 	andeq	r0, r0, r0
    1e74:	01000000 	mrseq	r0, (UNDEF: 0)
    1e78:	00005500 	andeq	r5, r0, r0, lsl #10
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	00010000 	andeq	r0, r1, r0
    1e84:	00000052 	andeq	r0, r0, r2, asr r0
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1e98:	00520001 	subseq	r0, r2, r1
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1eb4:	00010000 	andeq	r0, r1, r0
    1eb8:	00000050 	andeq	r0, r0, r0, asr r0
    1ebc:	00000000 	andeq	r0, r0, r0
    1ec0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1ecc:	00540001 	subseq	r0, r4, r1
    1ed0:	00000000 	andeq	r0, r0, r0
    1ed4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed8:	00005000 	andeq	r5, r0, r0
	...
		    	    case 'd': scani (lword); break;
    1ee8:	00010000 	andeq	r0, r1, r0
    1eec:	00000051 	andeq	r0, r0, r1, asr r0
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	00151000 	andseq	r1, r5, r0
		    	    case 'u': scanu (lword); break;
    1ef8:	00152900 	andseq	r2, r5, r0, lsl #18
    1efc:	52000100 	andpl	r0, r0, #0, 2
    1f00:	00001534 	andeq	r1, r0, r4, lsr r5
    1f04:	00001548 	andeq	r1, r0, r8, asr #10
    1f08:	00520001 	subseq	r0, r2, r1
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	10000000 	andne	r0, r0, r0
    1f14:	29000015 	stmdbcs	r0, {r0, r2, r4}
    1f18:	01000015 	tsteq	r0, r5, lsl r0
    1f1c:	15385300 	ldrne	r5, [r8, #-768]!	; 0xfffffd00
    1f20:	15480000 	strbne	r0, [r8, #-0]
    1f24:	00010000 	andeq	r0, r1, r0
    1f28:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    1f44:	00500001 	subseq	r0, r0, r1
	...
			nc++;
    1f54:	01000000 	mrseq	r0, (UNDEF: 0)
			break;
    1f58:	00005100 	andeq	r5, r0, r0, lsl #2
			while (isspace (*buf)) buf++;
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	00010000 	andeq	r0, r1, r0
    1f64:	00000051 	andeq	r0, r0, r1, asr r0
	...
			while (isspace (*buf)) buf++;
    1f74:	52000100 	andpl	r0, r0, #0, 2
	...
		return 0;
    1f80:	00520001 	subseq	r0, r2, r1
	...
		    	    case 'x': scanx (lword); break;
    1f90:	01000000 	mrseq	r0, (UNDEF: 0)
    1f94:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1fa4:	00010000 	andeq	r0, r1, r0
    1fa8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1fb8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1fc4:	00030005 	andeq	r0, r3, r5
	...
    1fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd4:	00005000 	andeq	r5, r0, r0
    1fd8:	00000000 	andeq	r0, r0, r0
    1fdc:	00050000 	andeq	r0, r5, r0
    1fe0:	00000003 	andeq	r0, r0, r3
	...
    1ff4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2000:	00500001 	subseq	r0, r0, r1
    2004:	00000000 	andeq	r0, r0, r0
    2008:	01000000 	mrseq	r0, (UNDEF: 0)
    200c:	00005000 	andeq	r5, r0, r0
    2010:	00000000 	andeq	r0, r0, r0
    2014:	00010000 	andeq	r0, r1, r0
    2018:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2028:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    203c:	00500001 	subseq	r0, r0, r1
	...
    204c:	01000000 	mrseq	r0, (UNDEF: 0)
    2050:	00005000 	andeq	r5, r0, r0
	...
    2060:	00010000 	andeq	r0, r1, r0
    2064:	00000051 	andeq	r0, r0, r1, asr r0
    2068:	00000000 	andeq	r0, r0, r0
    206c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2080:	00520001 	subseq	r0, r2, r1
	...
    2090:	01000000 	mrseq	r0, (UNDEF: 0)
    2094:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    20a4:	00010000 	andeq	r0, r1, r0
    20a8:	00000054 	andeq	r0, r0, r4, asr r0
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    20bc:	00540001 	subseq	r0, r4, r1
	...
    20cc:	01000000 	mrseq	r0, (UNDEF: 0)
    20d0:	00005000 	andeq	r5, r0, r0
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	00010000 	andeq	r0, r1, r0
    20dc:	00000050 	andeq	r0, r0, r0, asr r0
	...
    20ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    20f8:	00560001 	subseq	r0, r6, r1
    20fc:	00000000 	andeq	r0, r0, r0
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    2114:	00010000 	andeq	r0, r1, r0
    2118:	00000052 	andeq	r0, r0, r2, asr r0
    211c:	00000000 	andeq	r0, r0, r0
    2120:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2134:	00540001 	subseq	r0, r4, r1
	...
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	00005000 	andeq	r5, r0, r0
	...
    2158:	00010000 	andeq	r0, r1, r0
    215c:	00000050 	andeq	r0, r0, r0, asr r0
    2160:	00000000 	andeq	r0, r0, r0
    2164:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2170:	00500001 	subseq	r0, r0, r1
	...
    2180:	01000000 	mrseq	r0, (UNDEF: 0)
    2184:	00005100 	andeq	r5, r0, r0, lsl #2
    2188:	00000000 	andeq	r0, r0, r0
    218c:	00010000 	andeq	r0, r1, r0
    2190:	00000056 	andeq	r0, r0, r6, asr r0
    2194:	00000000 	andeq	r0, r0, r0
    2198:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    21a4:	00510001 	subseq	r0, r1, r1
	...
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	00005200 	andeq	r5, r0, r0, lsl #4
    21bc:	00000000 	andeq	r0, r0, r0
    21c0:	00010000 	andeq	r0, r1, r0
    21c4:	00000052 	andeq	r0, r0, r2, asr r0
    21c8:	00000000 	andeq	r0, r0, r0
    21cc:	0015cc00 	andseq	ip, r5, r0, lsl #24
    21d0:	0015dc00 	andseq	sp, r5, r0, lsl #24
    21d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21e0:	000015cc 	andeq	r1, r0, ip, asr #11
    21e4:	000015dc 	ldrdeq	r1, [r0], -ip
    21e8:	00510001 	subseq	r0, r1, r1
    21ec:	00000000 	andeq	r0, r0, r0
    21f0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    21f4:	f2000015 	vqadd.s8	d0, d0, d5
    21f8:	01000015 	tsteq	r0, r5, lsl r0
    21fc:	00005000 	andeq	r5, r0, r0
    2200:	00000000 	andeq	r0, r0, r0
    2204:	15b40000 	ldrne	r0, [r4, #0]!
    2208:	15bf0000 	ldrne	r0, [pc, #0]!	; 2210 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x30>
    220c:	00010000 	andeq	r0, r1, r0
    2210:	00000050 	andeq	r0, r0, r0, asr r0
    2214:	00000000 	andeq	r0, r0, r0
    2218:	00158400 	andseq	r8, r5, r0, lsl #8
    221c:	0015a000 	andseq	sl, r5, r0
    2220:	50000100 	andpl	r0, r0, r0, lsl #2
    2224:	000015a8 	andeq	r1, r0, r8, lsr #11
    2228:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
    222c:	00500001 	subseq	r0, r0, r1
    2230:	00000000 	andeq	r0, r0, r0
    2234:	60000000 	andvs	r0, r0, r0
    2238:	64000015 	strvs	r0, [r0], #-21	; 0xffffffeb
    223c:	01000015 	tsteq	r0, r5, lsl r0
    2240:	15685000 	strbne	r5, [r8, #-0]!
    2244:	15840000 	strne	r0, [r4]
    2248:	00010000 	andeq	r0, r1, r0
    224c:	00000050 	andeq	r0, r0, r0, asr r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	0016ac00 	andseq	sl, r6, r0, lsl #24
    2258:	0016ba00 	andseq	fp, r6, r0, lsl #20
    225c:	50000100 	andpl	r0, r0, r0, lsl #2
    2260:	00001716 	andeq	r1, r0, r6, lsl r7
    2264:	00001724 	andeq	r1, r0, r4, lsr #14
    2268:	00500001 	subseq	r0, r0, r1
    226c:	00000000 	andeq	r0, r0, r0
    2270:	ac000000 	stcge	0, cr0, [r0], {-0}
    2274:	c1000016 	tstgt	r0, r6, lsl r0
    2278:	01000016 	tsteq	r0, r6, lsl r0
    227c:	16c15100 	strbne	r5, [r1], r0, lsl #2
    2280:	16e00000 	strbtne	r0, [r0], r0
    2284:	00010000 	andeq	r0, r1, r0
    2288:	0016e057 	andseq	lr, r6, r7, asr r0
    228c:	0016e800 	andseq	lr, r6, r0, lsl #16
    2290:	51000100 	mrspl	r0, (UNDEF: 16)
    2294:	000016e8 	andeq	r1, r0, r8, ror #13
    2298:	0000170e 	andeq	r1, r0, lr, lsl #14
    229c:	0e570001 	cdpeq	0, 5, cr0, cr7, cr1, {0}
    22a0:	11000017 	tstne	r0, r7, lsl r0
    22a4:	01000017 	tsteq	r0, r7, lsl r0
    22a8:	17115100 	ldrne	r5, [r1, -r0, lsl #2]
    22ac:	17160000 	ldrne	r0, [r6, -r0]
    22b0:	00010000 	andeq	r0, r1, r0
    22b4:	00171657 	andseq	r1, r7, r7, asr r6
    22b8:	00172400 	andseq	r2, r7, r0, lsl #8
    22bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22c8:	000016ac 	andeq	r1, r0, ip, lsr #13
    22cc:	000016c1 	andeq	r1, r0, r1, asr #13
    22d0:	c1520001 	cmpgt	r2, r1
    22d4:	e0000016 	and	r0, r0, r6, lsl r0
    22d8:	01000016 	tsteq	r0, r6, lsl r0
    22dc:	16e05500 	strbtne	r5, [r0], r0, lsl #10
    22e0:	16e80000 	strbtne	r0, [r8], r0
    22e4:	00010000 	andeq	r0, r1, r0
    22e8:	0016e852 	andseq	lr, r6, r2, asr r8
    22ec:	00170e00 	andseq	r0, r7, r0, lsl #28
    22f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    22f4:	0000170e 	andeq	r1, r0, lr, lsl #14
    22f8:	00001711 	andeq	r1, r0, r1, lsl r7
    22fc:	11520001 	cmpne	r2, r1
    2300:	16000017 			; <UNDEFINED> instruction: 0x16000017
    2304:	01000017 	tsteq	r0, r7, lsl r0
    2308:	17165500 	ldrne	r5, [r6, -r0, lsl #10]
    230c:	17240000 	strne	r0, [r4, -r0]!
    2310:	00010000 	andeq	r0, r1, r0
    2314:	00000052 	andeq	r0, r0, r2, asr r0
    2318:	00000000 	andeq	r0, r0, r0
    231c:	0016c200 	andseq	ip, r6, r0, lsl #4
    2320:	0016c800 	andseq	ip, r6, r0, lsl #16
    2324:	50000100 	andpl	r0, r0, r0, lsl #2
    2328:	000016c8 	andeq	r1, r0, r8, asr #13
    232c:	000016cb 	andeq	r1, r0, fp, asr #13
    2330:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
    2334:	d0000016 	andle	r0, r0, r6, lsl r0
    2338:	01000016 	tsteq	r0, r6, lsl r0
    233c:	16d85000 	ldrbne	r5, [r8], r0
    2340:	16dd0000 	ldrbne	r0, [sp], r0
    2344:	00010000 	andeq	r0, r1, r0
    2348:	0016e850 	andseq	lr, r6, r0, asr r8
    234c:	00170a00 	andseq	r0, r7, r0, lsl #20
    2350:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2354:	00001714 	andeq	r1, r0, r4, lsl r7
    2358:	00001716 	andeq	r1, r0, r6, lsl r7
    235c:	00500001 	subseq	r0, r0, r1
    2360:	00000000 	andeq	r0, r0, r0
    2364:	24000000 	strcs	r0, [r0], #-0
    2368:	2c000017 	stccs	0, cr0, [r0], {23}
    236c:	01000017 	tsteq	r0, r7, lsl r0
    2370:	00005000 	andeq	r5, r0, r0
    2374:	00000000 	andeq	r0, r0, r0
    2378:	17300000 	ldrne	r0, [r0, -r0]!
    237c:	17390000 	ldrne	r0, [r9, -r0]!
    2380:	00010000 	andeq	r0, r1, r0
    2384:	00173950 	andseq	r3, r7, r0, asr r9
    2388:	00173e00 	andseq	r3, r7, r0, lsl #28
    238c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2390:	0000173e 	andeq	r1, r0, lr, lsr r7
    2394:	00001747 	andeq	r1, r0, r7, asr #14
    2398:	47500001 	ldrbmi	r0, [r0, -r1]
    239c:	6e000017 	mcrvs	0, 0, r0, cr0, cr7, {0}
    23a0:	01000017 	tsteq	r0, r7, lsl r0
    23a4:	176e5600 	strbne	r5, [lr, -r0, lsl #12]!
    23a8:	17780000 	ldrbne	r0, [r8, -r0]!
    23ac:	00010000 	andeq	r0, r1, r0
    23b0:	00000050 	andeq	r0, r0, r0, asr r0
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	00174800 	andseq	r4, r7, r0, lsl #16
    23bc:	00174c00 	andseq	r4, r7, r0, lsl #24
    23c0:	50000100 	andpl	r0, r0, r0, lsl #2
    23c4:	0000174c 	andeq	r1, r0, ip, asr #14
    23c8:	00001754 	andeq	r1, r0, r4, asr r7
    23cc:	54550001 	ldrbpl	r0, [r5], #-1
    23d0:	58000017 	stmdapl	r0, {r0, r1, r2, r4}
    23d4:	01000017 	tsteq	r0, r7, lsl r0
    23d8:	17585000 	ldrbne	r5, [r8, -r0]
    23dc:	176e0000 	strbne	r0, [lr, -r0]!
    23e0:	00010000 	andeq	r0, r1, r0
    23e4:	00000055 	andeq	r0, r0, r5, asr r0
    23e8:	00000000 	andeq	r0, r0, r0
    23ec:	00177800 	andseq	r7, r7, r0, lsl #16
    23f0:	00178600 	andseq	r8, r7, r0, lsl #12
    23f4:	50000100 	andpl	r0, r0, r0, lsl #2
    23f8:	000017cc 	andeq	r1, r0, ip, asr #15
    23fc:	000017d8 	ldrdeq	r1, [r0], -r8
    2400:	00500001 	subseq	r0, r0, r1
    2404:	00000000 	andeq	r0, r0, r0
    2408:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    240c:	94000017 	strls	r0, [r0], #-23	; 0xffffffe9
    2410:	01000017 	tsteq	r0, r7, lsl r0
    2414:	17945000 	ldrne	r5, [r4, r0]
    2418:	17970000 	ldrne	r0, [r7, r0]
    241c:	00010000 	andeq	r0, r1, r0
    2420:	00179851 	andseq	r9, r7, r1, asr r8
    2424:	00179c00 	andseq	r9, r7, r0, lsl #24
    2428:	50000100 	andpl	r0, r0, r0, lsl #2
    242c:	000017a4 	andeq	r1, r0, r4, lsr #15
    2430:	000017a9 	andeq	r1, r0, r9, lsr #15
    2434:	b6500001 	ldrblt	r0, [r0], -r1
    2438:	b8000017 	stmdalt	r0, {r0, r1, r2, r4}
    243c:	01000017 	tsteq	r0, r7, lsl r0
    2440:	17b85000 	ldrne	r5, [r8, r0]!
    2444:	17c00000 	strbne	r0, [r0, r0]
    2448:	00010000 	andeq	r0, r1, r0
    244c:	00000054 	andeq	r0, r0, r4, asr r0
    2450:	00000000 	andeq	r0, r0, r0
    2454:	0017d800 	andseq	sp, r7, r0, lsl #16
    2458:	0017ef00 	andseq	lr, r7, r0, lsl #30
    245c:	50000100 	andpl	r0, r0, r0, lsl #2
    2460:	000017f0 	strdeq	r1, [r0], -r0
    2464:	000017fc 	strdeq	r1, [r0], -ip
    2468:	34500001 	ldrbcc	r0, [r0], #-1
    246c:	48000018 	stmdami	r0, {r3, r4}
    2470:	01000018 	tsteq	r0, r8, lsl r0
    2474:	00005000 	andeq	r5, r0, r0
    2478:	00000000 	andeq	r0, r0, r0
    247c:	17e00000 	strbne	r0, [r0, r0]!
    2480:	17ec0000 	strbne	r0, [ip, r0]!
    2484:	00010000 	andeq	r0, r1, r0
    2488:	0017ec55 	andseq	lr, r7, r5, asr ip
    248c:	0017ef00 	andseq	lr, r7, r0, lsl #30
    2490:	73000200 	movwvc	r0, #512	; 0x200
    2494:	0017f008 	andseq	pc, r7, r8
    2498:	00184800 	andseq	r4, r8, r0, lsl #16
    249c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    24a8:	00001816 	andeq	r1, r0, r6, lsl r8
    24ac:	00001828 	andeq	r1, r0, r8, lsr #16
    24b0:	00500001 	subseq	r0, r0, r1
    24b4:	00000000 	andeq	r0, r0, r0
    24b8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    24bc:	64000018 	strvs	r0, [r0], #-24	; 0xffffffe8
    24c0:	01000018 	tsteq	r0, r8, lsl r0
    24c4:	194a5000 	stmdbne	sl, {ip, lr}^
    24c8:	19530000 	ldmdbne	r3, {}^	; <UNPREDICTABLE>
    24cc:	00010000 	andeq	r0, r1, r0
    24d0:	00000050 	andeq	r0, r0, r0, asr r0
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	00185000 	andseq	r5, r8, r0
    24dc:	00187200 	andseq	r7, r8, r0, lsl #4
    24e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    24e4:	00001872 	andeq	r1, r0, r2, ror r8
    24e8:	00001879 	andeq	r1, r0, r9, ror r8
    24ec:	79500001 	ldmdbvc	r0, {r0}^
    24f0:	7e000018 	mcrvc	0, 0, r0, cr0, cr8, {0}
    24f4:	01000018 	tsteq	r0, r8, lsl r0
    24f8:	187e5400 	ldmdane	lr!, {sl, ip, lr}^
    24fc:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    2500:	00010000 	andeq	r0, r1, r0
    2504:	00188850 	andseq	r8, r8, r0, asr r8
    2508:	00194600 	andseq	r4, r9, r0, lsl #12
    250c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2510:	0000194a 	andeq	r1, r0, sl, asr #18
    2514:	00001950 	andeq	r1, r0, r0, asr r9
    2518:	50540001 	subspl	r0, r4, r1
    251c:	53000019 	movwpl	r0, #25
    2520:	02000019 	andeq	r0, r0, #25
    2524:	00087200 	andeq	r7, r8, r0, lsl #4
    2528:	00000000 	andeq	r0, r0, r0
    252c:	2a000000 	bcs	2534 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe4>
    2530:	2c000019 	stccs	0, cr0, [r0], {25}
    2534:	01000019 	tsteq	r0, r9, lsl r0
    2538:	192c5000 	stmdbne	ip!, {ip, lr}
    253c:	19460000 	stmdbne	r6, {}^	; <UNPREDICTABLE>
    2540:	00010000 	andeq	r0, r1, r0
    2544:	00000056 	andeq	r0, r0, r6, asr r0
    2548:	00000000 	andeq	r0, r0, r0
    254c:	001bb400 	andseq	fp, fp, r0, lsl #8
    2550:	001bcb00 	andseq	ip, fp, r0, lsl #22
    2554:	50000100 	andpl	r0, r0, r0, lsl #2
    2558:	00001bcb 	andeq	r1, r0, fp, asr #23
    255c:	00001bd2 	ldrdeq	r1, [r0], -r2
    2560:	d2540001 	subsle	r0, r4, #1
    2564:	d400001b 	strle	r0, [r0], #-27	; 0xffffffe5
    2568:	0100001b 	tsteq	r0, fp, lsl r0
    256c:	1bd45000 	blne	ff516574 <_estack+0xdf511574>
    2570:	1be40000 	blne	ff902578 <_estack+0xdf8fd578>
    2574:	00010000 	andeq	r0, r1, r0
    2578:	001be454 	andseq	lr, fp, r4, asr r4
    257c:	001bf300 	andseq	pc, fp, r0, lsl #6
    2580:	50000100 	andpl	r0, r0, r0, lsl #2
    2584:	00001bf3 	strdeq	r1, [r0], -r3
    2588:	00001c04 	andeq	r1, r0, r4, lsl #24
    258c:	00540001 	subseq	r0, r4, r1
    2590:	00000000 	andeq	r0, r0, r0
    2594:	b4000000 	strlt	r0, [r0], #-0
    2598:	c800001b 	stmdagt	r0, {r0, r1, r3, r4}
    259c:	0100001b 	tsteq	r0, fp, lsl r0
    25a0:	1bc85100 	blne	ff2169a8 <_estack+0xdf2119a8>
    25a4:	1bcb0000 	blne	ff2c25ac <_estack+0xdf2bd5ac>
    25a8:	00010000 	andeq	r0, r1, r0
    25ac:	001bcb52 	andseq	ip, fp, r2, asr fp
    25b0:	001bd200 	andseq	sp, fp, r0, lsl #4
    25b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    25b8:	00001bd2 	ldrdeq	r1, [r0], -r2
    25bc:	00001bd7 	ldrdeq	r1, [r0], -r7
    25c0:	d7510001 	ldrble	r0, [r1, -r1]
    25c4:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    25c8:	0100001c 	tsteq	r0, ip, lsl r0
    25cc:	00005600 	andeq	r5, r0, r0, lsl #12
    25d0:	00000000 	andeq	r0, r0, r0
    25d4:	1bb40000 	blne	fed025dc <_estack+0xdecfd5dc>
    25d8:	1bbc0000 	blne	fef025e0 <_estack+0xdeefd5e0>
    25dc:	00010000 	andeq	r0, r1, r0
    25e0:	001bc052 	andseq	ip, fp, r2, asr r0
    25e4:	001bc400 	andseq	ip, fp, r0, lsl #8
    25e8:	52000100 	andpl	r0, r0, #0, 2
    25ec:	00001bcc 	andeq	r1, r0, ip, asr #23
    25f0:	00001bd2 	ldrdeq	r1, [r0], -r2
    25f4:	de570001 	cdple	0, 5, cr0, cr7, cr1, {0}
    25f8:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    25fc:	0100001c 	tsteq	r0, ip, lsl r0
    2600:	00005700 	andeq	r5, r0, r0, lsl #14
    2604:	00000000 	andeq	r0, r0, r0
    2608:	1bde0000 	blne	ff782610 <_estack+0xdf77d610>
    260c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2610:	00010000 	andeq	r0, r1, r0
    2614:	001c0055 	andseq	r0, ip, r5, asr r0
    2618:	001c0400 	andseq	r0, ip, r0, lsl #8
    261c:	58000100 	stmdapl	r0, {r8}
	...
    2628:	00001bf8 	strdeq	r1, [r0], -r8
    262c:	00001bfc 	strdeq	r1, [r0], -ip
    2630:	00500001 	subseq	r0, r0, r1
    2634:	00000000 	andeq	r0, r0, r0
    2638:	84000000 	strhi	r0, [r0], #-0
    263c:	9e000019 	mcrls	0, 0, r0, cr0, cr9, {0}
    2640:	01000019 	tsteq	r0, r9, lsl r0
    2644:	00005000 	andeq	r5, r0, r0
    2648:	00000000 	andeq	r0, r0, r0
    264c:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
    2650:	199e0000 	ldmibne	lr, {}	; <UNPREDICTABLE>
    2654:	00010000 	andeq	r0, r1, r0
    2658:	00000051 	andeq	r0, r0, r1, asr r0
    265c:	00000000 	andeq	r0, r0, r0
    2660:	00198400 	andseq	r8, r9, r0, lsl #8
    2664:	00199e00 	andseq	r9, r9, r0, lsl #28
    2668:	52000100 	andpl	r0, r0, #0, 2
    266c:	000019ae 	andeq	r1, r0, lr, lsr #19
    2670:	000019da 	ldrdeq	r1, [r0], -sl
    2674:	e8550001 	ldmda	r5, {r0}^
    2678:	a6000019 			; <UNDEFINED> instruction: 0xa6000019
    267c:	0100001b 	tsteq	r0, fp, lsl r0
    2680:	00005500 	andeq	r5, r0, r0, lsl #10
    2684:	00000000 	andeq	r0, r0, r0
    2688:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
    268c:	19880000 	stmibne	r8, {}	; <UNPREDICTABLE>
    2690:	00010000 	andeq	r0, r1, r0
    2694:	00198a53 	andseq	r8, r9, r3, asr sl
    2698:	00198c00 	andseq	r8, r9, r0, lsl #24
    269c:	53000300 	movwpl	r0, #768	; 0x300
    26a0:	198c0493 	stmibne	ip, {r0, r1, r4, r7, sl}
    26a4:	19d60000 	ldmibne	r6, {}^	; <UNPREDICTABLE>
    26a8:	00030000 	andeq	r0, r3, r0
    26ac:	d6049354 			; <UNDEFINED> instruction: 0xd6049354
    26b0:	2a000019 	bcs	271c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>
    26b4:	0300001a 	movweq	r0, #26
    26b8:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26bc:	00001a2a 	andeq	r1, r0, sl, lsr #20
    26c0:	00001a36 	andeq	r1, r0, r6, lsr sl
    26c4:	93540003 	cmpls	r4, #3
    26c8:	001a3e04 	andseq	r3, sl, r4, lsl #28
    26cc:	001a6000 	andseq	r6, sl, r0
    26d0:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    26d4:	1a640493 	bne	1903928 <__ccfg+0x18e3980>
    26d8:	1ade0000 	bne	ff7826e0 <_estack+0xdf77d6e0>
    26dc:	00030000 	andeq	r0, r3, r0
    26e0:	e4049354 	str	r9, [r4], #-852	; 0xfffffcac
    26e4:	f800001a 			; <UNDEFINED> instruction: 0xf800001a
    26e8:	0300001a 	movweq	r0, #26
    26ec:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26f0:	00001b3e 	andeq	r1, r0, lr, lsr fp
    26f4:	00001b4a 	andeq	r1, r0, sl, asr #22
    26f8:	93540003 	cmpls	r4, #3
    26fc:	001b6c04 	andseq	r6, fp, r4, lsl #24
    2700:	001b7e00 	andseq	r7, fp, r0, lsl #28
    2704:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2708:	1b820493 	blne	fe08395c <_estack+0xde07e95c>
    270c:	1b8a0000 	blne	fe282714 <_estack+0xde27d714>
    2710:	00030000 	andeq	r0, r3, r0
    2714:	8e049354 	mcrhi	3, 0, r9, cr4, cr4, {2}
    2718:	b400001b 	strlt	r0, [r0], #-27	; 0xffffffe5
    271c:	0300001b 	movweq	r0, #27
    2720:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	...
    272c:	000019a2 	andeq	r1, r0, r2, lsr #19
    2730:	000019ac 	andeq	r1, r0, ip, lsr #19
    2734:	ac590001 	mrrcge	0, 0, r0, r9, cr1
    2738:	ae000019 	mcrge	0, 0, r0, cr0, cr9, {0}
    273c:	02000019 	andeq	r0, r0, #25
    2740:	ae007200 	cdpge	2, 0, cr7, cr0, cr0, {0}
    2744:	d2000019 	andle	r0, r0, #25
    2748:	01000019 	tsteq	r0, r9, lsl r0
    274c:	19da5900 	ldmibne	sl, {r8, fp, ip, lr}^
    2750:	19e80000 	stmibne	r8!, {}^	; <UNPREDICTABLE>
    2754:	00010000 	andeq	r0, r1, r0
    2758:	0019e859 	andseq	lr, r9, r9, asr r8
    275c:	001a2000 	andseq	r2, sl, r0
    2760:	58000100 	stmdapl	r0, {r8}
    2764:	00001a2a 	andeq	r1, r0, sl, lsr #20
    2768:	00001a3a 	andeq	r1, r0, sl, lsr sl
    276c:	3a580001 	bcc	1602778 <__ccfg+0x15e27d0>
    2770:	4200001a 	andmi	r0, r0, #26
    2774:	0200001a 	andeq	r0, r0, #26
    2778:	60017200 	andvs	r7, r1, r0, lsl #4
    277c:	8a00001a 	bhi	27ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb0>
    2780:	0100001a 	tsteq	r0, sl, lsl r0
    2784:	1a8e5800 	bne	fe39878c <_estack+0xde39378c>
    2788:	1a920000 	bne	fe482790 <_estack+0xde47d790>
    278c:	00010000 	andeq	r0, r1, r0
    2790:	001a9c50 	andseq	r9, sl, r0, asr ip
    2794:	001aa600 	andseq	sl, sl, r0, lsl #12
    2798:	50000100 	andpl	r0, r0, r0, lsl #2
    279c:	00001ac6 	andeq	r1, r0, r6, asr #21
    27a0:	00001ac8 	andeq	r1, r0, r8, asr #21
    27a4:	ce500001 	cdpgt	0, 5, cr0, cr0, cr1, {0}
    27a8:	d000001a 	andle	r0, r0, sl, lsl r0
    27ac:	0100001a 	tsteq	r0, sl, lsl r0
    27b0:	1ad05800 	bne	ff4187b8 <_estack+0xdf4137b8>
    27b4:	1af30000 	bne	ffcc27bc <_estack+0xdfcbd7bc>
    27b8:	00010000 	andeq	r0, r1, r0
    27bc:	001b0253 	andseq	r0, fp, r3, asr r2
    27c0:	001b0600 	andseq	r0, fp, r0, lsl #12
    27c4:	59000100 	stmdbpl	r0, {r8}
    27c8:	00001b10 	andeq	r1, r0, r0, lsl fp
    27cc:	00001b30 	andeq	r1, r0, r0, lsr fp
    27d0:	36590001 	ldrbcc	r0, [r9], -r1
    27d4:	3800001b 	stmdacc	r0, {r0, r1, r3, r4}
    27d8:	0100001b 	tsteq	r0, fp, lsl r0
    27dc:	1b3e5900 	blne	f98be4 <__ccfg+0xf78c3c>
    27e0:	1b4c0000 	blne	13027e8 <__ccfg+0x12e2840>
    27e4:	00010000 	andeq	r0, r1, r0
    27e8:	001b6c53 	andseq	r6, fp, r3, asr ip
    27ec:	001b7500 	andseq	r7, fp, r0, lsl #10
    27f0:	53000100 	movwpl	r0, #256	; 0x100
    27f4:	00001b7e 	andeq	r1, r0, lr, ror fp
    27f8:	00001b92 	muleq	r0, r2, fp
    27fc:	a6580001 	ldrbge	r0, [r8], -r1
    2800:	b400001b 	strlt	r0, [r0], #-27	; 0xffffffe5
    2804:	0100001b 	tsteq	r0, fp, lsl r0
    2808:	00005900 	andeq	r5, r0, r0, lsl #18
    280c:	00000000 	andeq	r0, r0, r0
    2810:	1a420000 	bne	1082818 <__ccfg+0x1062870>
    2814:	1a600000 	bne	180281c <__ccfg+0x17e2874>
    2818:	00010000 	andeq	r0, r1, r0
    281c:	00000058 	andeq	r0, r0, r8, asr r0
    2820:	00000000 	andeq	r0, r0, r0
    2824:	001a6c00 	andseq	r6, sl, r0, lsl #24
    2828:	001a8000 	andseq	r8, sl, r0
    282c:	59000100 	stmdbpl	r0, {r8}
    2830:	00001a84 	andeq	r1, r0, r4, lsl #21
    2834:	00001ab2 			; <UNDEFINED> instruction: 0x00001ab2
    2838:	ba590001 	blt	1642844 <__ccfg+0x162289c>
    283c:	ce00001a 	mcrgt	0, 0, r0, cr0, cr10, {0}
    2840:	0100001a 	tsteq	r0, sl, lsl r0
    2844:	00005900 	andeq	r5, r0, r0, lsl #18
    2848:	00000000 	andeq	r0, r0, r0
    284c:	1a8a0000 	bne	fe282854 <_estack+0xde27d854>
    2850:	1abc0000 	bne	fef02858 <_estack+0xdeefd858>
    2854:	00010000 	andeq	r0, r1, r0
    2858:	001abc58 	andseq	fp, sl, r8, asr ip
    285c:	001ac800 	andseq	ip, sl, r0, lsl #16
    2860:	53000100 	movwpl	r0, #256	; 0x100
    2864:	00001ac8 	andeq	r1, r0, r8, asr #21
    2868:	00001ace 	andeq	r1, r0, lr, asr #21
    286c:	00580001 	subseq	r0, r8, r1
    2870:	00000000 	andeq	r0, r0, r0
    2874:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2878:	3e00001a 	mcrcc	0, 0, r0, cr0, cr10, {0}
    287c:	0100001b 	tsteq	r0, fp, lsl r0
    2880:	00005a00 	andeq	r5, r0, r0, lsl #20
    2884:	00000000 	andeq	r0, r0, r0
    2888:	1afe0000 	bne	fff82890 <_estack+0xdff7d890>
    288c:	1b280000 	blne	a02894 <__ccfg+0x9e28ec>
    2890:	00010000 	andeq	r0, r1, r0
    2894:	001b2858 	andseq	r2, fp, r8, asr r8
    2898:	001b3800 	andseq	r3, fp, r0, lsl #16
    289c:	53000100 	movwpl	r0, #256	; 0x100
    28a0:	00001b38 	andeq	r1, r0, r8, lsr fp
    28a4:	00001b3e 	andeq	r1, r0, lr, lsr fp
    28a8:	00580001 	subseq	r0, r8, r1
    28ac:	00000000 	andeq	r0, r0, r0
    28b0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    28b4:	6c00001b 	stcvs	0, cr0, [r0], {27}
    28b8:	0100001b 	tsteq	r0, fp, lsl r0
    28bc:	00005800 	andeq	r5, r0, r0, lsl #16
    28c0:	00000000 	andeq	r0, r0, r0
    28c4:	1b7e0000 	blne	1f828cc <__ccfg+0x1f62924>
    28c8:	1b820000 	blne	fe0828d0 <_estack+0xde07d8d0>
    28cc:	00020000 	andeq	r0, r2, r0
    28d0:	1b820074 	blne	fe082aa8 <_estack+0xde07daa8>
    28d4:	1b8a0000 	blne	fe2828dc <_estack+0xde27d8dc>
    28d8:	00020000 	andeq	r0, r2, r0
    28dc:	00007c74 	andeq	r7, r0, r4, ror ip
    28e0:	00000000 	andeq	r0, r0, r0
    28e4:	1b960000 	blne	fe5828ec <_estack+0xde57d8ec>
    28e8:	1ba40000 	blne	fe9028f0 <_estack+0xde8fd8f0>
    28ec:	00010000 	andeq	r0, r1, r0
    28f0:	00000058 	andeq	r0, r0, r8, asr r0
    28f4:	00000000 	andeq	r0, r0, r0
    28f8:	001c0400 	andseq	r0, ip, r0, lsl #8
    28fc:	001c2000 	andseq	r2, ip, r0
    2900:	50000100 	andpl	r0, r0, r0, lsl #2
    2904:	00001c5e 	andeq	r1, r0, lr, asr ip
    2908:	00001c70 	andeq	r1, r0, r0, ror ip
    290c:	70530001 	subsvc	r0, r3, r1
    2910:	8400001c 	strhi	r0, [r0], #-28	; 0xffffffe4
    2914:	0100001c 	tsteq	r0, ip, lsl r0
    2918:	1c865600 	stcne	6, cr5, [r6], {0}
    291c:	1ca20000 	stcne	0, cr0, [r2]
    2920:	00010000 	andeq	r0, r1, r0
    2924:	001cb456 	andseq	fp, ip, r6, asr r4
    2928:	001cc000 	andseq	ip, ip, r0
    292c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2930:	00001cc0 	andeq	r1, r0, r0, asr #25
    2934:	00001cc6 	andeq	r1, r0, r6, asr #25
    2938:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
    293c:	d000001c 	andle	r0, r0, ip, lsl r0
    2940:	0100001c 	tsteq	r0, ip, lsl r0
    2944:	1cd05300 	ldclne	3, cr5, [r0], {0}
    2948:	1ce00000 	stclne	0, cr0, [r0]
    294c:	00010000 	andeq	r0, r1, r0
    2950:	001ce05e 	andseq	lr, ip, lr, asr r0
    2954:	001cf600 	andseq	pc, ip, r0, lsl #12
    2958:	53000100 	movwpl	r0, #256	; 0x100
    295c:	00001cf6 	strdeq	r1, [r0], -r6
    2960:	00001cfe 	strdeq	r1, [r0], -lr
    2964:	045e0001 	ldrbeq	r0, [lr], #-1
    2968:	2000001d 	andcs	r0, r0, sp, lsl r0
    296c:	0100001d 	tsteq	r0, sp, lsl r0
    2970:	1d205300 	stcne	3, cr5, [r0, #-0]
    2974:	1d260000 	stcne	0, cr0, [r6, #-0]
    2978:	00010000 	andeq	r0, r1, r0
    297c:	001d265e 	andseq	r2, sp, lr, asr r6
    2980:	001d2800 	andseq	r2, sp, r0, lsl #16
    2984:	53000100 	movwpl	r0, #256	; 0x100
    2988:	00001d34 	andeq	r1, r0, r4, lsr sp
    298c:	00001d36 	andeq	r1, r0, r6, lsr sp
    2990:	365e0001 	ldrbcc	r0, [lr], -r1
    2994:	4a00001d 	bmi	2a10 <NOROM_ChipInfo_GetChipFamily+0x3c>
    2998:	0100001d 	tsteq	r0, sp, lsl r0
    299c:	1d4a5300 	stclne	3, cr5, [sl, #-0]
    29a0:	1d5a0000 	ldclne	0, cr0, [sl, #-0]
    29a4:	00010000 	andeq	r0, r1, r0
    29a8:	001d5a56 	andseq	r5, sp, r6, asr sl
    29ac:	001d6e00 	andseq	r6, sp, r0, lsl #28
    29b0:	53000100 	movwpl	r0, #256	; 0x100
    29b4:	00001d7c 	andeq	r1, r0, ip, ror sp
    29b8:	00001d7e 	andeq	r1, r0, lr, ror sp
    29bc:	7e560001 	cdpvc	0, 5, cr0, cr6, cr1, {0}
    29c0:	9600001d 			; <UNDEFINED> instruction: 0x9600001d
    29c4:	0100001d 	tsteq	r0, sp, lsl r0
    29c8:	1d965300 	ldcne	3, cr5, [r6]
    29cc:	1db00000 	ldcne	0, cr0, [r0]
    29d0:	00010000 	andeq	r0, r1, r0
    29d4:	001db656 	andseq	fp, sp, r6, asr r6
    29d8:	001dd800 	andseq	sp, sp, r0, lsl #16
    29dc:	53000100 	movwpl	r0, #256	; 0x100
    29e0:	00001dd8 	ldrdeq	r1, [r0], -r8
    29e4:	00001dea 	andeq	r1, r0, sl, ror #27
    29e8:	10560001 	subsne	r0, r6, r1
    29ec:	1400001e 	strne	r0, [r0], #-30	; 0xffffffe2
    29f0:	0100001e 	tsteq	r0, lr, lsl r0
    29f4:	1e145300 	cdpne	3, 1, cr5, cr4, cr0, {0}
    29f8:	1e240000 	cdpne	0, 2, cr0, cr4, cr0, {0}
    29fc:	00010000 	andeq	r0, r1, r0
    2a00:	001e2458 	andseq	r2, lr, r8, asr r4
    2a04:	001e3400 	andseq	r3, lr, r0, lsl #8
    2a08:	53000100 	movwpl	r0, #256	; 0x100
    2a0c:	00001e34 	andeq	r1, r0, r4, lsr lr
    2a10:	00001e3e 	andeq	r1, r0, lr, lsr lr
    2a14:	44580001 	ldrbmi	r0, [r8], #-1
    2a18:	6600001e 			; <UNDEFINED> instruction: 0x6600001e
    2a1c:	0100001e 	tsteq	r0, lr, lsl r0
    2a20:	1e6c5300 	cdpne	3, 6, cr5, cr12, cr0, {0}
    2a24:	1e7c0000 	cdpne	0, 7, cr0, cr12, cr0, {0}
    2a28:	00010000 	andeq	r0, r1, r0
    2a2c:	001e7c53 	andseq	r7, lr, r3, asr ip
    2a30:	001e9600 	andseq	r9, lr, r0, lsl #12
    2a34:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a38:	00001e9c 	muleq	r0, ip, lr
    2a3c:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
    2a40:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    2a44:	ce00001e 	mcrgt	0, 0, r0, cr0, cr14, {0}
    2a48:	0100001e 	tsteq	r0, lr, lsl r0
    2a4c:	1ee25600 	cdpne	6, 14, cr5, cr2, cr0, {0}
    2a50:	1ee60000 	cdpne	0, 14, cr0, cr6, cr0, {0}
    2a54:	00010000 	andeq	r0, r1, r0
    2a58:	001ee658 	andseq	lr, lr, r8, asr r6
    2a5c:	001eea00 	andseq	lr, lr, r0, lsl #20
    2a60:	53000100 	movwpl	r0, #256	; 0x100
    2a64:	00001ef4 	strdeq	r1, [r0], -r4
    2a68:	00001ef6 	strdeq	r1, [r0], -r6
    2a6c:	f6580001 			; <UNDEFINED> instruction: 0xf6580001
    2a70:	0c00001e 	stceq	0, cr0, [r0], {30}
    2a74:	0100001f 	tsteq	r0, pc, lsl r0
    2a78:	1f0c5300 	svcne	0x000c5300
    2a7c:	1f1c0000 	svcne	0x001c0000
    2a80:	00010000 	andeq	r0, r1, r0
    2a84:	001f1c56 	andseq	r1, pc, r6, asr ip	; <UNPREDICTABLE>
    2a88:	001f3200 	andseq	r3, pc, r0, lsl #4
    2a8c:	53000100 	movwpl	r0, #256	; 0x100
    2a90:	00001f3c 	andeq	r1, r0, ip, lsr pc
    2a94:	00001f3e 	andeq	r1, r0, lr, lsr pc
    2a98:	3e560001 	cdpcc	0, 5, cr0, cr6, cr1, {0}
    2a9c:	4600001f 			; <UNDEFINED> instruction: 0x4600001f
    2aa0:	0100001f 	tsteq	r0, pc, lsl r0
    2aa4:	1f4a5300 	svcne	0x004a5300
    2aa8:	1f5a0000 	svcne	0x005a0000
    2aac:	00010000 	andeq	r0, r1, r0
    2ab0:	001f5a53 	andseq	r5, pc, r3, asr sl	; <UNPREDICTABLE>
    2ab4:	001f6800 	andseq	r6, pc, r0, lsl #16
    2ab8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2abc:	00001f68 	andeq	r1, r0, r8, ror #30
    2ac0:	00001f6e 	andeq	r1, r0, lr, ror #30
    2ac4:	6e580001 	cdpvs	0, 5, cr0, cr8, cr1, {0}
    2ac8:	7a00001f 	bvc	2b4c <NOROM_OSCClockSourceGet+0x1c>
    2acc:	0100001f 	tsteq	r0, pc, lsl r0
    2ad0:	1f7a5600 	svcne	0x007a5600
    2ad4:	1f820000 	svcne	0x00820000
    2ad8:	00010000 	andeq	r0, r1, r0
    2adc:	001f8250 	andseq	r8, pc, r0, asr r2	; <UNPREDICTABLE>
    2ae0:	001f9400 	andseq	r9, pc, r0, lsl #8
    2ae4:	53000100 	movwpl	r0, #256	; 0x100
	...
    2af0:	00001c04 	andeq	r1, r0, r4, lsl #24
    2af4:	00001c22 	andeq	r1, r0, r2, lsr #24
    2af8:	22510001 	subscs	r0, r1, #1
    2afc:	2800001c 	stmdacs	r0, {r2, r3, r4}
    2b00:	0100001c 	tsteq	r0, ip, lsl r0
    2b04:	1c285600 	stcne	6, cr5, [r8], #-0
    2b08:	1c460000 	marne	acc0, r0, r6
    2b0c:	00010000 	andeq	r0, r1, r0
    2b10:	001c4c51 	andseq	r4, ip, r1, asr ip
    2b14:	001f9400 	andseq	r9, pc, r0, lsl #8
    2b18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2b24:	00001c04 	andeq	r1, r0, r4, lsl #24
    2b28:	00001c04 	andeq	r1, r0, r4, lsl #24
    2b2c:	04520001 	ldrbeq	r0, [r2], #-1
    2b30:	2000001c 	andcs	r0, r0, ip, lsl r0
    2b34:	0300001c 	movweq	r0, #28
    2b38:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2b3c:	00001cc6 	andeq	r1, r0, r6, asr #25
    2b40:	00001cfa 	strdeq	r1, [r0], -sl
    2b44:	20520001 	subscs	r0, r2, r1
    2b48:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    2b4c:	0100001d 	tsteq	r0, sp, lsl r0
    2b50:	1d365200 	lfmne	f5, 4, [r6, #-0]
    2b54:	1d500000 	ldclne	0, cr0, [r0, #-0]
    2b58:	00010000 	andeq	r0, r1, r0
    2b5c:	001d7e52 	andseq	r7, sp, r2, asr lr
    2b60:	001da600 	andseq	sl, sp, r0, lsl #12
    2b64:	52000100 	andpl	r0, r0, #0, 2
    2b68:	00001df8 	strdeq	r1, [r0], -r8
    2b6c:	00001e38 	andeq	r1, r0, r8, lsr lr
    2b70:	66520001 	ldrbvs	r0, [r2], -r1
    2b74:	8c00001e 	stchi	0, cr0, [r0], {30}
    2b78:	0100001e 	tsteq	r0, lr, lsl r0
    2b7c:	1edc5200 	cdpne	2, 13, cr5, cr12, cr0, {0}
    2b80:	1ee60000 	cdpne	0, 14, cr0, cr6, cr0, {0}
    2b84:	00010000 	andeq	r0, r1, r0
    2b88:	001ef652 	andseq	pc, lr, r2, asr r6	; <UNPREDICTABLE>
    2b8c:	001f1200 	andseq	r1, pc, r0, lsl #4
    2b90:	52000100 	andpl	r0, r0, #0, 2
    2b94:	00001f3e 	andeq	r1, r0, lr, lsr pc
    2b98:	00001f54 	andeq	r1, r0, r4, asr pc
    2b9c:	5a520001 	bpl	1482ba8 <__ccfg+0x1462c00>
    2ba0:	6800001f 	stmdavs	r0, {r0, r1, r2, r3, r4}
    2ba4:	0100001f 	tsteq	r0, pc, lsl r0
    2ba8:	1f7a5200 	svcne	0x007a5200
    2bac:	1f820000 	svcne	0x00820000
    2bb0:	00010000 	andeq	r0, r1, r0
    2bb4:	00000052 	andeq	r0, r0, r2, asr r0
    2bb8:	00000000 	andeq	r0, r0, r0
    2bbc:	001c8200 	andseq	r8, ip, r0, lsl #4
    2bc0:	001c8400 	andseq	r8, ip, r0, lsl #8
    2bc4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bc8:	00001cfc 	strdeq	r1, [r0], -ip
    2bcc:	00001d20 	andeq	r1, r0, r0, lsr #26
    2bd0:	26540001 	ldrbcs	r0, [r4], -r1
    2bd4:	3600001d 			; <UNDEFINED> instruction: 0x3600001d
    2bd8:	0100001d 	tsteq	r0, sp, lsl r0
    2bdc:	1d525400 	cfldrdne	mvd5, [r2, #-0]
    2be0:	1d7e0000 	ldclne	0, cr0, [lr, #-0]
    2be4:	00010000 	andeq	r0, r1, r0
    2be8:	001da854 	andseq	sl, sp, r4, asr r8
    2bec:	001df800 	andseq	pc, sp, r0, lsl #16
    2bf0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bf4:	00001e3a 	andeq	r1, r0, sl, lsr lr
    2bf8:	00001e66 	andeq	r1, r0, r6, ror #28
    2bfc:	8e540001 	cdphi	0, 5, cr0, cr4, cr1, {0}
    2c00:	dc00001e 	stcle	0, cr0, [r0], {30}
    2c04:	0100001e 	tsteq	r0, lr, lsl r0
    2c08:	1ee65400 	cdpne	4, 14, cr5, cr6, cr0, {0}
    2c0c:	1ef60000 	cdpne	0, 15, cr0, cr6, cr0, {0}
    2c10:	00010000 	andeq	r0, r1, r0
    2c14:	001f1454 	andseq	r1, pc, r4, asr r4	; <UNPREDICTABLE>
    2c18:	001f3e00 	andseq	r3, pc, r0, lsl #28
    2c1c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c20:	00001f56 	andeq	r1, r0, r6, asr pc
    2c24:	00001f5a 	andeq	r1, r0, sl, asr pc
    2c28:	82540001 	subshi	r0, r4, #1
    2c2c:	9400001f 	strls	r0, [r0], #-31	; 0xffffffe1
    2c30:	0100001f 	tsteq	r0, pc, lsl r0
    2c34:	00005400 	andeq	r5, r0, r0, lsl #8
    2c38:	00000000 	andeq	r0, r0, r0
    2c3c:	1cf60000 	ldclne	0, cr0, [r6]
    2c40:	1d200000 	stcne	0, cr0, [r0, #-0]
    2c44:	00010000 	andeq	r0, r1, r0
    2c48:	001d2658 	andseq	r2, sp, r8, asr r6
    2c4c:	001d3600 	andseq	r3, sp, r0, lsl #12
    2c50:	58000100 	stmdapl	r0, {r8}
	...
    2c5c:	00001dd8 	ldrdeq	r1, [r0], -r8
    2c60:	00001dea 	andeq	r1, r0, sl, ror #27
    2c64:	ea590001 	b	1642c70 <__ccfg+0x1622cc8>
    2c68:	f200001d 	vqadd.s8	d0, d0, d13
    2c6c:	0100001d 	tsteq	r0, sp, lsl r0
    2c70:	00005000 	andeq	r5, r0, r0
    2c74:	00000000 	andeq	r0, r0, r0
    2c78:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    2c7c:	1e5e0000 	cdpne	0, 5, cr0, cr14, cr0, {0}
    2c80:	00010000 	andeq	r0, r1, r0
    2c84:	001ee650 	andseq	lr, lr, r0, asr r6
    2c88:	001ef600 	andseq	pc, lr, r0, lsl #12
    2c8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2c98:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
    2c9c:	00001ece 	andeq	r1, r0, lr, asr #29
    2ca0:	ce590001 	cdpgt	0, 5, cr0, cr9, cr1, {0}
    2ca4:	d600001e 			; <UNDEFINED> instruction: 0xd600001e
    2ca8:	0100001e 	tsteq	r0, lr, lsl r0
    2cac:	00005000 	andeq	r5, r0, r0
    2cb0:	00000000 	andeq	r0, r0, r0
    2cb4:	1f4a0000 	svcne	0x004a0000
    2cb8:	1f5a0000 	svcne	0x005a0000
    2cbc:	00010000 	andeq	r0, r1, r0
    2cc0:	00000050 	andeq	r0, r0, r0, asr r0
    2cc4:	00000000 	andeq	r0, r0, r0
    2cc8:	001c8600 	andseq	r8, ip, r0, lsl #12
    2ccc:	001ca200 	andseq	sl, ip, r0, lsl #4
    2cd0:	5e000100 	adfpls	f0, f0, f0
    2cd4:	00001f6c 	andeq	r1, r0, ip, ror #30
    2cd8:	00001f6e 	andeq	r1, r0, lr, ror #30
    2cdc:	005e0001 	subseq	r0, lr, r1
    2ce0:	00000000 	andeq	r0, r0, r0
    2ce4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    2ce8:	aa00001f 	bge	2d6c <port_confs+0x60>
    2cec:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    2cf0:	3f007000 	svccc	0x00007000
    2cf4:	9f263f24 	svcls	0x00263f24
	...
    2d00:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2d04:	00001fa8 	andeq	r1, r0, r8, lsr #31
    2d08:	8072000d 	rsbshi	r0, r2, sp
    2d0c:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    2d10:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    2d14:	a89f2634 	ldmge	pc, {r2, r4, r5, r9, sl, sp}	; <UNPREDICTABLE>
    2d18:	c400001f 	strgt	r0, [r0], #-31	; 0xffffffe1
    2d1c:	0c00001f 	stceq	0, cr0, [r0], {31}
    2d20:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    2d24:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    2d28:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    2d2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2d3c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2d50:	00500001 	subseq	r0, r0, r1
    2d54:	00000000 	andeq	r0, r0, r0
    2d58:	ec000000 	stc	0, cr0, [r0], {-0}
    2d5c:	2a00001f 	bcs	2de0 <__exidx_end+0x54>
    2d60:	01000020 	tsteq	r0, r0, lsr #32
    2d64:	202a5000 	eorcs	r5, sl, r0
    2d68:	208c0000 	addcs	r0, ip, r0
    2d6c:	00010000 	andeq	r0, r1, r0
    2d70:	00208c55 	eoreq	r8, r0, r5, asr ip
    2d74:	0020c000 	eoreq	ip, r0, r0
    2d78:	f3000400 	vshl.u8	d0, d0, d0
    2d7c:	009f5001 	addseq	r5, pc, r1
    2d80:	00000000 	andeq	r0, r0, r0
    2d84:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2d88:	8c000020 	stchi	0, cr0, [r0], {32}
    2d8c:	01000020 	tsteq	r0, r0, lsr #32
    2d90:	00005400 	andeq	r5, r0, r0, lsl #8
    2d94:	00000000 	andeq	r0, r0, r0
    2d98:	203e0000 	eorscs	r0, lr, r0
    2d9c:	20400000 	subcs	r0, r0, r0
    2da0:	00070000 	andeq	r0, r7, r0
    2da4:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    2da8:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    2dac:	00000000 	andeq	r0, r0, r0
    2db0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    2db4:	68000020 	stmdavs	r0, {r5}
    2db8:	01000020 	tsteq	r0, r0, lsr #32
    2dbc:	00005300 	andeq	r5, r0, r0, lsl #6
    2dc0:	00000000 	andeq	r0, r0, r0
    2dc4:	20520000 	subscs	r0, r2, r0
    2dc8:	205e0000 	subscs	r0, lr, r0
    2dcc:	00010000 	andeq	r0, r1, r0
    2dd0:	00205e52 	eoreq	r5, r0, r2, asr lr
    2dd4:	00206200 	eoreq	r6, r0, r0, lsl #4
    2dd8:	71000300 	mrsvc	r0, LR_irq
    2ddc:	20629f06 	rsbcs	r9, r2, r6, lsl #30
    2de0:	206a0000 	rsbcs	r0, sl, r0
    2de4:	00010000 	andeq	r0, r1, r0
    2de8:	00000052 	andeq	r0, r0, r2, asr r0
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	0020c600 	eoreq	ip, r0, r0, lsl #12
    2df4:	00214000 	eoreq	r4, r1, r0
    2df8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2e04:	0000212c 	andeq	r2, r0, ip, lsr #2
    2e08:	00002136 	andeq	r2, r0, r6, lsr r1
    2e0c:	00530001 	subseq	r0, r3, r1
    2e10:	00000000 	andeq	r0, r0, r0
    2e14:	64000000 	strvs	r0, [r0], #-0
    2e18:	8a000021 	bhi	2ea4 <__exidx_end+0x118>
    2e1c:	01000021 	tsteq	r0, r1, lsr #32
    2e20:	218a5000 	orrcs	r5, sl, r0
    2e24:	21e00000 	mvncs	r0, r0
    2e28:	00040000 	andeq	r0, r4, r0
    2e2c:	9f5001f3 	svcls	0x005001f3
	...
    2e38:	0000218c 	andeq	r2, r0, ip, lsl #3
    2e3c:	000021c0 	andeq	r2, r0, r0, asr #3
    2e40:	00530001 	subseq	r0, r3, r1
    2e44:	00000000 	andeq	r0, r0, r0
    2e48:	90000000 	andls	r0, r0, r0
    2e4c:	9e000021 	cdpls	0, 0, cr0, cr0, cr1, {1}
    2e50:	01000021 	tsteq	r0, r1, lsr #32
    2e54:	219e5100 	orrscs	r5, lr, r0, lsl #2
    2e58:	21a00000 	movcs	r0, r0
    2e5c:	00060000 	andeq	r0, r6, r0
    2e60:	00730072 	rsbseq	r0, r3, r2, ror r0
    2e64:	21a09f1c 	lslcs	r9, ip, pc
    2e68:	21a60000 			; <UNDEFINED> instruction: 0x21a60000
    2e6c:	00010000 	andeq	r0, r1, r0
    2e70:	00000051 	andeq	r0, r0, r1, asr r0
    2e74:	00000000 	andeq	r0, r0, r0
    2e78:	00217c00 	eoreq	r7, r1, r0, lsl #24
    2e7c:	00218e00 	eoreq	r8, r1, r0, lsl #28
    2e80:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e8c:	000021e0 	andeq	r2, r0, r0, ror #3
    2e90:	00002203 	andeq	r2, r0, r3, lsl #4
    2e94:	03500001 	cmpeq	r0, #1
    2e98:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
    2e9c:	01000022 	tsteq	r0, r2, lsr #32
    2ea0:	220e5400 	andcs	r5, lr, #0, 8
    2ea4:	22160000 	andscs	r0, r6, #0
    2ea8:	00010000 	andeq	r0, r1, r0
    2eac:	00221650 	eoreq	r1, r2, r0, asr r6
    2eb0:	00226200 	eoreq	r6, r2, r0, lsl #4
    2eb4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2ec0:	0000221c 	andeq	r2, r0, ip, lsl r2
    2ec4:	00002220 	andeq	r2, r0, r0, lsr #4
    2ec8:	22530001 	subscs	r0, r3, #1
    2ecc:	30000022 	andcc	r0, r0, r2, lsr #32
    2ed0:	01000022 	tsteq	r0, r2, lsr #32
    2ed4:	22325300 	eorscs	r5, r2, #0, 6
    2ed8:	223a0000 	eorscs	r0, sl, #0
    2edc:	00010000 	andeq	r0, r1, r0
    2ee0:	00000053 	andeq	r0, r0, r3, asr r0
    2ee4:	00000000 	andeq	r0, r0, r0
    2ee8:	00221c00 	eoreq	r1, r2, r0, lsl #24
    2eec:	00225000 	eoreq	r5, r2, r0
    2ef0:	74000500 	strvc	r0, [r0], #-1280	; 0xfffffb00
    2ef4:	9f264c00 	svcls	0x00264c00
    2ef8:	00002250 	andeq	r2, r0, r0, asr r2
    2efc:	0000228c 	andeq	r2, r0, ip, lsl #5
    2f00:	01f30006 	mvnseq	r0, r6
    2f04:	9f264c50 	svcls	0x00264c50
	...
    2f10:	00002216 	andeq	r2, r0, r6, lsl r2
    2f14:	00002220 	andeq	r2, r0, r0, lsr #4
    2f18:	00530001 	subseq	r0, r3, r1
    2f1c:	00000000 	andeq	r0, r0, r0
    2f20:	8c000000 	stchi	0, cr0, [r0], {-0}
    2f24:	a0000022 	andge	r0, r0, r2, lsr #32
    2f28:	01000022 	tsteq	r0, r2, lsr #32
    2f2c:	22a05000 	adccs	r5, r0, #0
    2f30:	22e80000 	rsccs	r0, r8, #0
    2f34:	00040000 	andeq	r0, r4, r0
    2f38:	9f5001f3 	svcls	0x005001f3
	...
    2f44:	00002292 	muleq	r0, r2, r2
    2f48:	0000229a 	muleq	r0, sl, r2
    2f4c:	00530001 	subseq	r0, r3, r1
    2f50:	00000000 	andeq	r0, r0, r0
    2f54:	96000000 	strls	r0, [r0], -r0
    2f58:	a8000022 	stmdage	r0, {r1, r5}
    2f5c:	01000022 	tsteq	r0, r2, lsr #32
    2f60:	22a85200 	adccs	r5, r8, #0, 4
    2f64:	22aa0000 	adccs	r0, sl, #0
    2f68:	00050000 	andeq	r0, r5, r0
    2f6c:	25310072 	ldrcs	r0, [r1, #-114]!	; 0xffffff8e
    2f70:	0022aa9f 	mlaeq	r2, pc, sl, sl	; <UNPREDICTABLE>
    2f74:	0022b000 	eoreq	fp, r2, r0
    2f78:	52000100 	andpl	r0, r0, #0, 2
    2f7c:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    2f80:	000022c6 	andeq	r2, r0, r6, asr #5
    2f84:	ca520001 	bgt	1482f90 <__ccfg+0x1462fe8>
    2f88:	d4000022 	strle	r0, [r0], #-34	; 0xffffffde
    2f8c:	01000022 	tsteq	r0, r2, lsr #32
    2f90:	22d65200 	sbcscs	r5, r6, #0, 4
    2f94:	22e80000 	rsccs	r0, r8, #0
    2f98:	00010000 	andeq	r0, r1, r0
    2f9c:	00000052 	andeq	r0, r0, r2, asr r0
    2fa0:	00000000 	andeq	r0, r0, r0
    2fa4:	00229a00 	eoreq	r9, r2, r0, lsl #20
    2fa8:	0022a400 	eoreq	sl, r2, r0, lsl #8
    2fac:	53000100 	movwpl	r0, #256	; 0x100
    2fb0:	000022a4 	andeq	r2, r0, r4, lsr #5
    2fb4:	000022a6 	andeq	r2, r0, r6, lsr #5
    2fb8:	00730005 	rsbseq	r0, r3, r5
    2fbc:	a69f2531 			; <UNDEFINED> instruction: 0xa69f2531
    2fc0:	a8000022 	stmdage	r0, {r1, r5}
    2fc4:	01000022 	tsteq	r0, r2, lsr #32
    2fc8:	22a85300 	adccs	r5, r8, #0, 6
    2fcc:	22b40000 	adcscs	r0, r4, #0
    2fd0:	00040000 	andeq	r0, r4, r0
    2fd4:	9fffff0a 	svcls	0x00ffff0a
    2fd8:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    2fdc:	000022ba 			; <UNDEFINED> instruction: 0x000022ba
    2fe0:	be530001 	cdplt	0, 5, cr0, cr3, cr1, {0}
    2fe4:	c4000022 	strgt	r0, [r0], #-34	; 0xffffffde
    2fe8:	01000022 	tsteq	r0, r2, lsr #32
    2fec:	22c45300 	sbccs	r5, r4, #0, 6
    2ff0:	22d60000 	sbcscs	r0, r6, #0
    2ff4:	00020000 	andeq	r0, r2, r0
    2ff8:	22d69f31 	sbcscs	r9, r6, #49, 30	; 0xc4
    2ffc:	22e80000 	rsccs	r0, r8, #0
    3000:	00010000 	andeq	r0, r1, r0
    3004:	00000053 	andeq	r0, r0, r3, asr r0
    3008:	00000000 	andeq	r0, r0, r0
    300c:	00229a00 	eoreq	r9, r2, r0, lsl #20
    3010:	0022a000 	eoreq	sl, r2, r0
    3014:	30000200 	andcc	r0, r0, r0, lsl #4
    3018:	0022a09f 	mlaeq	r2, pc, r0, sl	; <UNPREDICTABLE>
    301c:	0022dc00 	eoreq	sp, r2, r0, lsl #24
    3020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    302c:	000022dc 	ldrdeq	r2, [r0], -ip
    3030:	000022e0 	andeq	r2, r0, r0, ror #5
    3034:	00720008 	rsbseq	r0, r2, r8
    3038:	00732440 	rsbseq	r2, r3, r0, asr #8
    303c:	22e09f21 	rsccs	r9, r0, #33, 30	; 0x84
    3040:	22e80000 	rsccs	r0, r8, #0
    3044:	00010000 	andeq	r0, r1, r0
    3048:	00000050 	andeq	r0, r0, r0, asr r0
    304c:	00000000 	andeq	r0, r0, r0
    3050:	0022f200 	eoreq	pc, r2, r0, lsl #4
    3054:	0022f600 	eoreq	pc, r2, r0, lsl #12
    3058:	70000a00 	andvc	r0, r0, r0, lsl #20
    305c:	381a3300 	ldmdacc	sl, {r8, r9, ip, sp}
    3060:	21007324 	tstcs	r0, r4, lsr #6
    3064:	0022fa9f 	mlaeq	r2, pc, sl, pc	; <UNPREDICTABLE>
    3068:	00230000 	eoreq	r0, r3, r0
    306c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3080:	00700007 	rsbseq	r0, r0, r7
    3084:	1a3fff0a 	bne	1002cb4 <__ccfg+0xfe2d0c>
    3088:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    308c:	00000000 	andeq	r0, r0, r0
    3090:	00230400 	eoreq	r0, r3, r0, lsl #8
    3094:	00230800 	eoreq	r0, r3, r0, lsl #16
    3098:	70000f00 	andvc	r0, r0, r0, lsl #30
    309c:	1afc0800 	bne	fff050a4 <_estack+0xdff000a4>
    30a0:	80110070 	andshi	r0, r1, r0, ror r0
    30a4:	1a67f3f8 	bne	1a0008c <__ccfg+0x19e00e4>
    30a8:	00009f21 	andeq	r9, r0, r1, lsr #30
    30ac:	00000000 	andeq	r0, r0, r0
    30b0:	23040000 	movwcs	r0, #16384	; 0x4000
    30b4:	23080000 	movwcs	r0, #32768	; 0x8000
    30b8:	00010000 	andeq	r0, r1, r0
    30bc:	00000050 	andeq	r0, r0, r0, asr r0
    30c0:	00000000 	andeq	r0, r0, r0
    30c4:	00231400 	eoreq	r1, r3, r0, lsl #8
    30c8:	00231800 	eoreq	r1, r3, r0, lsl #16
    30cc:	70000f00 	andvc	r0, r0, r0, lsl #30
    30d0:	1a3f0800 	bne	fc50d8 <__ccfg+0xfa5130>
    30d4:	c00c0070 	andgt	r0, ip, r0, ror r0
    30d8:	1a00fcff 	bne	424dc <__ccfg+0x22534>
    30dc:	00009f21 	andeq	r9, r0, r1, lsr #30
    30e0:	00000000 	andeq	r0, r0, r0
    30e4:	23140000 	tstcs	r4, #0
    30e8:	23180000 	tstcs	r8, #0
    30ec:	00010000 	andeq	r0, r1, r0
    30f0:	00000050 	andeq	r0, r0, r0, asr r0
    30f4:	00000000 	andeq	r0, r0, r0
    30f8:	00232400 	eoreq	r2, r3, r0, lsl #8
    30fc:	00237a00 	eoreq	r7, r3, r0, lsl #20
    3100:	50000100 	andpl	r0, r0, r0, lsl #2
    3104:	0000237a 	andeq	r2, r0, sl, ror r3
    3108:	00002388 	andeq	r2, r0, r8, lsl #7
    310c:	01f30004 	mvnseq	r0, r4
    3110:	00009f50 	andeq	r9, r0, r0, asr pc
    3114:	00000000 	andeq	r0, r0, r0
    3118:	23640000 	cmncs	r4, #0
    311c:	236c0000 	cmncs	ip, #0
    3120:	00170000 	andseq	r0, r7, r0
    3124:	000a0074 	andeq	r0, sl, r4, ror r0
    3128:	00741aff 	ldrshteq	r1, [r4], #-175	; 0xffffff51
    312c:	211af008 	tstcs	sl, r8	; <UNPREDICTABLE>
    3130:	24440072 	strbcs	r0, [r4], #-114	; 0xffffff8e
    3134:	40007321 	andmi	r7, r0, r1, lsr #6
    3138:	709f2124 	addsvc	r2, pc, r4, lsr #2
    313c:	88000023 	stmdahi	r0, {r0, r1, r5}
    3140:	01000023 	tsteq	r0, r3, lsr #32
    3144:	00005300 	andeq	r5, r0, r0, lsl #6
    3148:	00000000 	andeq	r0, r0, r0
    314c:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    3150:	23760000 	cmncs	r6, #0
    3154:	00010000 	andeq	r0, r1, r0
    3158:	00000054 	andeq	r0, r0, r4, asr r0
    315c:	00000000 	andeq	r0, r0, r0
    3160:	00233200 	eoreq	r3, r3, r0, lsl #4
    3164:	00234600 	eoreq	r4, r3, r0, lsl #12
    3168:	52000100 	andpl	r0, r0, #0, 2
    316c:	00002346 	andeq	r2, r0, r6, asr #6
    3170:	00002352 	andeq	r2, r0, r2, asr r3
    3174:	00740006 	rsbseq	r0, r4, r6
    3178:	9f24ec09 	svcls	0x0024ec09
    317c:	00002364 	andeq	r2, r0, r4, ror #6
    3180:	0000236c 	andeq	r2, r0, ip, ror #6
    3184:	00520001 	subseq	r0, r2, r1
    3188:	00000000 	andeq	r0, r0, r0
    318c:	3a000000 	bcc	3194 <__exidx_end+0x408>
    3190:	58000023 	stmdapl	r0, {r0, r1, r5}
    3194:	01000023 	tsteq	r0, r3, lsr #32
    3198:	23585300 	cmpcs	r8, #0, 6
    319c:	23640000 	cmncs	r4, #0
    31a0:	00060000 	andeq	r0, r6, r0
    31a4:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    31a8:	23649f24 	cmncs	r4, #36, 30	; 0x90
    31ac:	23700000 	cmncs	r0, #0
    31b0:	00010000 	andeq	r0, r1, r0
    31b4:	00000053 	andeq	r0, r0, r3, asr r0
    31b8:	00000000 	andeq	r0, r0, r0
    31bc:	00234400 	eoreq	r4, r3, r0, lsl #8
    31c0:	00234600 	eoreq	r4, r3, r0, lsl #12
    31c4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    31c8:	22007200 	andcs	r7, r0, #0, 4
    31cc:	0023469f 	mlaeq	r3, pc, r6, r4	; <UNPREDICTABLE>
    31d0:	00234e00 	eoreq	r4, r3, r0, lsl #28
    31d4:	52000100 	andpl	r0, r0, #0, 2
    31d8:	0000234e 	andeq	r2, r0, lr, asr #6
    31dc:	00002350 	andeq	r2, r0, r0, asr r3
    31e0:	00740009 	rsbseq	r0, r4, r9
    31e4:	7624ec09 	strtvc	lr, [r4], -r9, lsl #24
    31e8:	509f2200 	addspl	r2, pc, r0, lsl #4
    31ec:	52000023 	andpl	r0, r0, #35	; 0x23
    31f0:	01000023 	tsteq	r0, r3, lsr #32
    31f4:	23565500 	cmpcs	r6, #0, 10
    31f8:	23580000 	cmpcs	r8, #0
    31fc:	00060000 	andeq	r0, r6, r0
    3200:	00730071 	rsbseq	r0, r3, r1, ror r0
    3204:	23589f22 	cmpcs	r8, #34, 30	; 0x88
    3208:	23600000 	cmncs	r0, #0
    320c:	00010000 	andeq	r0, r1, r0
    3210:	00236053 	eoreq	r6, r3, r3, asr r0
    3214:	00236200 	eoreq	r6, r3, r0, lsl #4
    3218:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    321c:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    3220:	9f220071 	svcls	0x00220071
    3224:	00002362 	andeq	r2, r0, r2, ror #6
    3228:	00002364 	andeq	r2, r0, r4, ror #6
    322c:	9f300002 	svcls	0x00300002
	...
    3238:	00002388 	andeq	r2, r0, r8, lsl #7
    323c:	00002390 	muleq	r0, r0, r3
    3240:	90500001 	subsls	r0, r0, r1
    3244:	9c000023 	stcls	0, cr0, [r0], {35}	; 0x23
    3248:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    324c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3250:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3254:	00000000 	andeq	r0, r0, r0
    3258:	00238800 	eoreq	r8, r3, r0, lsl #16
    325c:	00239600 	eoreq	r9, r3, r0, lsl #12
    3260:	30000200 	andcc	r0, r0, r0, lsl #4
    3264:	0023969f 	mlaeq	r3, pc, r6, r9	; <UNPREDICTABLE>
    3268:	00239c00 	eoreq	r9, r3, r0, lsl #24
    326c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3278:	0000238a 	andeq	r2, r0, sl, lsl #7
    327c:	00002390 	muleq	r0, r0, r3
    3280:	90500001 	subsls	r0, r0, r1
    3284:	9c000023 	stcls	0, cr0, [r0], {35}	; 0x23
    3288:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    328c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3290:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3294:	00000000 	andeq	r0, r0, r0
    3298:	00239400 	eoreq	r9, r3, r0, lsl #8
    329c:	00239600 	eoreq	r9, r3, r0, lsl #12
    32a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    32ac:	0000239c 	muleq	r0, ip, r3
    32b0:	000023a4 	andeq	r2, r0, r4, lsr #7
    32b4:	a4500001 	ldrbge	r0, [r0], #-1
    32b8:	b0000023 	andlt	r0, r0, r3, lsr #32
    32bc:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    32c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    32c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32c8:	00000000 	andeq	r0, r0, r0
    32cc:	00239c00 	eoreq	r9, r3, r0, lsl #24
    32d0:	0023aa00 	eoreq	sl, r3, r0, lsl #20
    32d4:	31000200 	mrscc	r0, R8_usr
    32d8:	0023aa9f 	mlaeq	r3, pc, sl, sl	; <UNPREDICTABLE>
    32dc:	0023b000 	eoreq	fp, r3, r0
    32e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    32ec:	0000239e 	muleq	r0, lr, r3
    32f0:	000023a4 	andeq	r2, r0, r4, lsr #7
    32f4:	a4500001 	ldrbge	r0, [r0], #-1
    32f8:	b0000023 	andlt	r0, r0, r3, lsr #32
    32fc:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3300:	5001f300 	andpl	pc, r1, r0, lsl #6
    3304:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3308:	00000000 	andeq	r0, r0, r0
    330c:	0023a800 	eoreq	sl, r3, r0, lsl #16
    3310:	0023aa00 	eoreq	sl, r3, r0, lsl #20
    3314:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3320:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
    3324:	000023b8 			; <UNDEFINED> instruction: 0x000023b8
    3328:	b8500001 	ldmdalt	r0, {r0}^
    332c:	c4000023 	strgt	r0, [r0], #-35	; 0xffffffdd
    3330:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3334:	5001f300 	andpl	pc, r1, r0, lsl #6
    3338:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    333c:	00000000 	andeq	r0, r0, r0
    3340:	0023b000 	eoreq	fp, r3, r0
    3344:	0023be00 	eoreq	fp, r3, r0, lsl #28
    3348:	31000200 	mrscc	r0, R8_usr
    334c:	0023be9f 	mlaeq	r3, pc, lr, fp	; <UNPREDICTABLE>
    3350:	0023c400 	eoreq	ip, r3, r0, lsl #8
    3354:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3360:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    3364:	000023b8 			; <UNDEFINED> instruction: 0x000023b8
    3368:	b8500001 	ldmdalt	r0, {r0}^
    336c:	c4000023 	strgt	r0, [r0], #-35	; 0xffffffdd
    3370:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3374:	5001f300 	andpl	pc, r1, r0, lsl #6
    3378:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    337c:	00000000 	andeq	r0, r0, r0
    3380:	0023bc00 	eoreq	fp, r3, r0, lsl #24
    3384:	0023be00 	eoreq	fp, r3, r0, lsl #28
    3388:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3394:	000023c4 	andeq	r2, r0, r4, asr #7
    3398:	000023d0 	ldrdeq	r2, [r0], -r0
    339c:	d0500001 	subsle	r0, r0, r1
    33a0:	ec000023 	stc	0, cr0, [r0], {35}	; 0x23
    33a4:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    33a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    33ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33b0:	00000000 	andeq	r0, r0, r0
    33b4:	0023c400 	eoreq	ip, r3, r0, lsl #8
    33b8:	0023e600 	eoreq	lr, r3, r0, lsl #12
    33bc:	30000200 	andcc	r0, r0, r0, lsl #4
    33c0:	0023e69f 	mlaeq	r3, pc, r6, lr	; <UNPREDICTABLE>
    33c4:	0023ec00 	eoreq	lr, r3, r0, lsl #24
    33c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    33d4:	000023c6 	andeq	r2, r0, r6, asr #7
    33d8:	000023d0 	ldrdeq	r2, [r0], -r0
    33dc:	d0500001 	subsle	r0, r0, r1
    33e0:	ec000023 	stc	0, cr0, [r0], {35}	; 0x23
    33e4:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    33e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    33ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33f0:	00000000 	andeq	r0, r0, r0
    33f4:	0023d800 	eoreq	sp, r3, r0, lsl #16
    33f8:	0023e000 	eoreq	lr, r3, r0
    33fc:	73001000 	movwvc	r1, #0
    3400:	24464c00 	strbcs	r4, [r6], #-3072	; 0xfffff400
    3404:	3225481a 	eorcc	r4, r5, #1703936	; 0x1a0000
    3408:	38007224 	stmdacc	r0, {r2, r5, r9, ip, sp, lr}
    340c:	e29f2124 	adds	r2, pc, #36, 2
    3410:	e6000023 	str	r0, [r0], -r3, lsr #32
    3414:	01000023 	tsteq	r0, r3, lsr #32
    3418:	00005000 	andeq	r5, r0, r0
    341c:	00000000 	andeq	r0, r0, r0
    3420:	23cc0000 	biccs	r0, ip, #0
    3424:	23e00000 	mvncs	r0, #0
    3428:	00010000 	andeq	r0, r1, r0
    342c:	00000053 	andeq	r0, r0, r3, asr r0
    3430:	00000000 	andeq	r0, r0, r0
    3434:	0023f000 	eoreq	pc, r3, r0
    3438:	0023f400 	eoreq	pc, r3, r0, lsl #8
    343c:	70000900 	andvc	r0, r0, r0, lsl #18
    3440:	24404800 	strbcs	r4, [r0], #-2048	; 0xfffff800
    3444:	9f25431a 	svcls	0x0025431a
	...
    3450:	000023fc 	strdeq	r2, [r0], -ip
    3454:	00002408 	andeq	r2, r0, r8, lsl #8
    3458:	08500001 	ldmdaeq	r0, {r0}^
    345c:	28000024 	stmdacs	r0, {r2, r5}
    3460:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    3464:	5001f300 	andpl	pc, r1, r0, lsl #6
    3468:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    346c:	00000000 	andeq	r0, r0, r0
    3470:	0023fc00 	eoreq	pc, r3, r0, lsl #24
    3474:	00241e00 	eoreq	r1, r4, r0, lsl #28
    3478:	0c000600 	stceq	6, cr0, [r0], {-0}
    347c:	403f8000 	eorsmi	r8, pc, r0
    3480:	00241e9f 	mlaeq	r4, pc, lr, r1	; <UNPREDICTABLE>
    3484:	00242800 	eoreq	r2, r4, r0, lsl #16
    3488:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3494:	000023fe 	strdeq	r2, [r0], -lr
    3498:	00002408 	andeq	r2, r0, r8, lsl #8
    349c:	08500001 	ldmdaeq	r0, {r0}^
    34a0:	28000024 	stmdacs	r0, {r2, r5}
    34a4:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    34a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    34ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34b0:	00000000 	andeq	r0, r0, r0
    34b4:	00240c00 	eoreq	r0, r4, r0, lsl #24
    34b8:	00241200 	eoreq	r1, r4, r0, lsl #4
    34bc:	73001000 	movwvc	r1, #0
    34c0:	03f00a00 	mvnseq	r0, #0, 20
    34c4:	4025341a 	eormi	r3, r5, sl, lsl r4
    34c8:	46007224 	strmi	r7, [r0], -r4, lsr #4
    34cc:	1c9f2124 	ldfnes	f2, [pc], {36}	; 0x24
    34d0:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    34d4:	01000024 	tsteq	r0, r4, lsr #32
    34d8:	00005000 	andeq	r5, r0, r0
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	24040000 	strcs	r0, [r4], #-0
    34e4:	24120000 	ldrcs	r0, [r2], #-0
    34e8:	00010000 	andeq	r0, r1, r0
    34ec:	00000053 	andeq	r0, r0, r3, asr r0
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	00242800 	eoreq	r2, r4, r0, lsl #16
    34f8:	00243000 	eoreq	r3, r4, r0
    34fc:	50000100 	andpl	r0, r0, r0, lsl #2
    3500:	00002430 	andeq	r2, r0, r0, lsr r4
    3504:	0000243c 	andeq	r2, r0, ip, lsr r4
    3508:	01f30004 	mvnseq	r0, r4
    350c:	00009f50 	andeq	r9, r0, r0, asr pc
    3510:	00000000 	andeq	r0, r0, r0
    3514:	24280000 	strtcs	r0, [r8], #-0
    3518:	24360000 	ldrtcs	r0, [r6], #-0
    351c:	00020000 	andeq	r0, r2, r0
    3520:	24369f30 	ldrtcs	r9, [r6], #-3888	; 0xfffff0d0
    3524:	243c0000 	ldrtcs	r0, [ip], #-0
    3528:	00010000 	andeq	r0, r1, r0
    352c:	00000050 	andeq	r0, r0, r0, asr r0
    3530:	00000000 	andeq	r0, r0, r0
    3534:	00242a00 	eoreq	r2, r4, r0, lsl #20
    3538:	00243000 	eoreq	r3, r4, r0
    353c:	50000100 	andpl	r0, r0, r0, lsl #2
    3540:	00002430 	andeq	r2, r0, r0, lsr r4
    3544:	0000243c 	andeq	r2, r0, ip, lsr r4
    3548:	01f30004 	mvnseq	r0, r4
    354c:	00009f50 	andeq	r9, r0, r0, asr pc
    3550:	00000000 	andeq	r0, r0, r0
    3554:	24340000 	ldrtcs	r0, [r4], #-0
    3558:	24360000 	ldrtcs	r0, [r6], #-0
    355c:	00010000 	andeq	r0, r1, r0
    3560:	00000050 	andeq	r0, r0, r0, asr r0
    3564:	00000000 	andeq	r0, r0, r0
    3568:	00243c00 	eoreq	r3, r4, r0, lsl #24
    356c:	00244400 	eoreq	r4, r4, r0, lsl #8
    3570:	50000100 	andpl	r0, r0, r0, lsl #2
    3574:	00002444 	andeq	r2, r0, r4, asr #8
    3578:	00002450 	andeq	r2, r0, r0, asr r4
    357c:	01f30004 	mvnseq	r0, r4
    3580:	00009f50 	andeq	r9, r0, r0, asr pc
    3584:	00000000 	andeq	r0, r0, r0
    3588:	243c0000 	ldrtcs	r0, [ip], #-0
    358c:	244a0000 	strbcs	r0, [sl], #-0
    3590:	00020000 	andeq	r0, r2, r0
    3594:	244a9f30 	strbcs	r9, [sl], #-3888	; 0xfffff0d0
    3598:	24500000 	ldrbcs	r0, [r0], #-0
    359c:	00010000 	andeq	r0, r1, r0
    35a0:	00000050 	andeq	r0, r0, r0, asr r0
    35a4:	00000000 	andeq	r0, r0, r0
    35a8:	00243e00 	eoreq	r3, r4, r0, lsl #28
    35ac:	00244400 	eoreq	r4, r4, r0, lsl #8
    35b0:	50000100 	andpl	r0, r0, r0, lsl #2
    35b4:	00002444 	andeq	r2, r0, r4, asr #8
    35b8:	00002450 	andeq	r2, r0, r0, asr r4
    35bc:	01f30004 	mvnseq	r0, r4
    35c0:	00009f50 	andeq	r9, r0, r0, asr pc
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	24480000 	strbcs	r0, [r8], #-0
    35cc:	244a0000 	strbcs	r0, [sl], #-0
    35d0:	00010000 	andeq	r0, r1, r0
    35d4:	00000050 	andeq	r0, r0, r0, asr r0
    35d8:	00000000 	andeq	r0, r0, r0
    35dc:	00245000 	eoreq	r5, r4, r0
    35e0:	00245600 	eoreq	r5, r4, r0, lsl #12
    35e4:	50000100 	andpl	r0, r0, r0, lsl #2
    35e8:	00002456 	andeq	r2, r0, r6, asr r4
    35ec:	00002540 	andeq	r2, r0, r0, asr #10
    35f0:	40550001 	subsmi	r0, r5, r1
    35f4:	60000025 	andvs	r0, r0, r5, lsr #32
    35f8:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    35fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3600:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3604:	00000000 	andeq	r0, r0, r0
    3608:	00245000 	eoreq	r5, r4, r0
    360c:	00245900 	eoreq	r5, r4, r0, lsl #18
    3610:	51000100 	mrspl	r0, (UNDEF: 16)
    3614:	00002459 	andeq	r2, r0, r9, asr r4
    3618:	00002560 	andeq	r2, r0, r0, ror #10
    361c:	01f30004 	mvnseq	r0, r4
    3620:	00009f51 	andeq	r9, r0, r1, asr pc
    3624:	00000000 	andeq	r0, r0, r0
    3628:	245e0000 	ldrbcs	r0, [lr], #-0
    362c:	24620000 	strbtcs	r0, [r2], #-0
    3630:	00010000 	andeq	r0, r1, r0
    3634:	00246250 	eoreq	r6, r4, r0, asr r2
    3638:	00246500 	eoreq	r6, r4, r0, lsl #10
    363c:	52000100 	andpl	r0, r0, #0, 2
    3640:	0000246a 	andeq	r2, r0, sl, ror #8
    3644:	0000246e 	andeq	r2, r0, lr, ror #8
    3648:	98500001 	ldmdals	r0, {r0}^
    364c:	9a000024 	bls	36e4 <__exidx_end+0x958>
    3650:	01000024 	tsteq	r0, r4, lsr #32
    3654:	249a5000 	ldrcs	r5, [sl], #0
    3658:	249d0000 	ldrcs	r0, [sp], #0
    365c:	00010000 	andeq	r0, r1, r0
    3660:	0024a652 	eoreq	sl, r4, r2, asr r6
    3664:	0024a800 	eoreq	sl, r4, r0, lsl #16
    3668:	50000100 	andpl	r0, r0, r0, lsl #2
    366c:	000024a8 	andeq	r2, r0, r8, lsr #9
    3670:	000024ab 	andeq	r2, r0, fp, lsr #9
    3674:	b6520001 	ldrblt	r0, [r2], -r1
    3678:	b8000024 	stmdalt	r0, {r2, r5}
    367c:	01000024 	tsteq	r0, r4, lsr #32
    3680:	24b85000 	ldrtcs	r5, [r8], #0
    3684:	24bb0000 	ldrtcs	r0, [fp], #0
    3688:	00010000 	andeq	r0, r1, r0
    368c:	0024c252 	eoreq	ip, r4, r2, asr r2
    3690:	0024c400 	eoreq	ip, r4, r0, lsl #8
    3694:	50000100 	andpl	r0, r0, r0, lsl #2
    3698:	000024d4 	ldrdeq	r2, [r0], -r4
    369c:	000024d8 	ldrdeq	r2, [r0], -r8
    36a0:	e6500001 	ldrb	r0, [r0], -r1
    36a4:	e8000024 	stmda	r0, {r2, r5}
    36a8:	01000024 	tsteq	r0, r4, lsr #32
    36ac:	24e85000 	strbtcs	r5, [r8], #0
    36b0:	24eb0000 	strbtcs	r0, [fp], #0
    36b4:	00010000 	andeq	r0, r1, r0
    36b8:	0024f252 	eoreq	pc, r4, r2, asr r2	; <UNPREDICTABLE>
    36bc:	0024f400 	eoreq	pc, r4, r0, lsl #8
    36c0:	50000100 	andpl	r0, r0, r0, lsl #2
    36c4:	00002504 	andeq	r2, r0, r4, lsl #10
    36c8:	00002506 	andeq	r2, r0, r6, lsl #10
    36cc:	16500001 	ldrbne	r0, [r0], -r1
    36d0:	1a000025 	bne	376c <__exidx_end+0x9e0>
    36d4:	01000025 	tsteq	r0, r5, lsr #32
    36d8:	252e5000 	strcs	r5, [lr, #-0]!
    36dc:	25300000 	ldrcs	r0, [r0, #-0]!
    36e0:	00010000 	andeq	r0, r1, r0
    36e4:	00253050 	eoreq	r3, r5, r0, asr r0
    36e8:	00253300 	eoreq	r3, r5, r0, lsl #6
    36ec:	52000100 	andpl	r0, r0, #0, 2
	...
    36f8:	00002486 	andeq	r2, r0, r6, lsl #9
    36fc:	0000248c 	andeq	r2, r0, ip, lsl #9
    3700:	00720007 	rsbseq	r0, r2, r7
    3704:	1a3fff0a 	bne	1003334 <__ccfg+0xfe338c>
    3708:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    370c:	00000000 	andeq	r0, r0, r0
    3710:	00257a00 	eoreq	r7, r5, r0, lsl #20
    3714:	00258400 	eoreq	r8, r5, r0, lsl #8
    3718:	73000900 	movwvc	r0, #2304	; 0x900
    371c:	00040c00 	andeq	r0, r4, r0, lsl #24
    3720:	9f212000 	svcls	0x00212000
	...
    372c:	000025c4 	andeq	r2, r0, r4, asr #11
    3730:	000025cc 	andeq	r2, r0, ip, asr #11
    3734:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3738:	ec000025 	stc	0, cr0, [r0], {37}	; 0x25
    373c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    3740:	5001f300 	andpl	pc, r1, r0, lsl #6
    3744:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3748:	00000000 	andeq	r0, r0, r0
    374c:	0025ec00 	eoreq	lr, r5, r0, lsl #24
    3750:	00261400 	eoreq	r1, r6, r0, lsl #8
    3754:	50000100 	andpl	r0, r0, r0, lsl #2
    3758:	00002614 	andeq	r2, r0, r4, lsl r6
    375c:	00002654 	andeq	r2, r0, r4, asr r6
    3760:	54540001 	ldrbpl	r0, [r4], #-1
    3764:	5c000026 	stcpl	0, cr0, [r0], {38}	; 0x26
    3768:	01000026 	tsteq	r0, r6, lsr #32
    376c:	265c5000 	ldrbcs	r5, [ip], -r0
    3770:	26a60000 	strtcs	r0, [r6], r0
    3774:	00010000 	andeq	r0, r1, r0
    3778:	0026a654 	eoreq	sl, r6, r4, asr r6
    377c:	0026e200 	eoreq	lr, r6, r0, lsl #4
    3780:	f3000400 	vshl.u8	d0, d0, d0
    3784:	e29f5001 	adds	r5, pc, #1
    3788:	e6000026 	str	r0, [r0], -r6, lsr #32
    378c:	01000026 	tsteq	r0, r6, lsr #32
    3790:	26e65400 	strbtcs	r5, [r6], r0, lsl #8
    3794:	273c0000 	ldrcs	r0, [ip, -r0]!
    3798:	00040000 	andeq	r0, r4, r0
    379c:	9f5001f3 	svcls	0x005001f3
	...
    37a8:	00002602 	andeq	r2, r0, r2, lsl #12
    37ac:	00002644 	andeq	r2, r0, r4, asr #12
    37b0:	00530001 	subseq	r0, r3, r1
    37b4:	00000000 	andeq	r0, r0, r0
    37b8:	76000000 	strvc	r0, [r0], -r0
    37bc:	7c000026 	stcvc	0, cr0, [r0], {38}	; 0x26
    37c0:	01000026 	tsteq	r0, r6, lsr #32
    37c4:	00005000 	andeq	r5, r0, r0
    37c8:	00000000 	andeq	r0, r0, r0
    37cc:	26a60000 	strtcs	r0, [r6], r0
    37d0:	26a80000 	strtcs	r0, [r8], r0
    37d4:	00010000 	andeq	r0, r1, r0
    37d8:	0026a850 	eoreq	sl, r6, r0, asr r8
    37dc:	0026bc00 	eoreq	fp, r6, r0, lsl #24
    37e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    37ec:	000026bc 			; <UNDEFINED> instruction: 0x000026bc
    37f0:	000026dc 	ldrdeq	r2, [r0], -ip
    37f4:	00540001 	subseq	r0, r4, r1
	...
    3804:	01000000 	mrseq	r0, (UNDEF: 0)
    3808:	00005500 	andeq	r5, r0, r0, lsl #10
    380c:	00000000 	andeq	r0, r0, r0
    3810:	00030000 	andeq	r0, r3, r0
    3814:	009f7f75 	addseq	r7, pc, r5, ror pc	; <UNPREDICTABLE>
    3818:	00000000 	andeq	r0, r0, r0
    381c:	01000000 	mrseq	r0, (UNDEF: 0)
    3820:	00005500 	andeq	r5, r0, r0, lsl #10
    3824:	00000000 	andeq	r0, r0, r0
    3828:	273c0000 	ldrcs	r0, [ip, -r0]!
    382c:	275b0000 	ldrbcs	r0, [fp, -r0]
    3830:	00010000 	andeq	r0, r1, r0
    3834:	00275b50 	eoreq	r5, r7, r0, asr fp
    3838:	00281c00 	eoreq	r1, r8, r0, lsl #24
    383c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    3840:	0000281c 	andeq	r2, r0, ip, lsl r8
    3844:	0000295c 	andeq	r2, r0, ip, asr r9
    3848:	01f30004 	mvnseq	r0, r4
    384c:	00009f50 	andeq	r9, r0, r0, asr pc
    3850:	00000000 	andeq	r0, r0, r0
    3854:	275c0000 	ldrbcs	r0, [ip, -r0]
    3858:	28dc0000 	ldmcs	ip, {}^	; <UNPREDICTABLE>
    385c:	00010000 	andeq	r0, r1, r0
    3860:	0028de50 	eoreq	sp, r8, r0, asr lr
    3864:	00291800 	eoreq	r1, r9, r0, lsl #16
    3868:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3874:	00002804 	andeq	r2, r0, r4, lsl #16
    3878:	00002808 	andeq	r2, r0, r8, lsl #16
    387c:	71700003 	cmnvc	r0, r3
    3880:	0028089f 	mlaeq	r8, pc, r8, r0	; <UNPREDICTABLE>
    3884:	00280e00 	eoreq	r0, r8, r0, lsl #28
    3888:	51000100 	mrspl	r0, (UNDEF: 16)
    388c:	0000280e 	andeq	r2, r0, lr, lsl #16
    3890:	0000282e 	andeq	r2, r0, lr, lsr #16
    3894:	54910002 	ldrpl	r0, [r1], #2
    3898:	0000282e 	andeq	r2, r0, lr, lsr #16
    389c:	0000283a 	andeq	r2, r0, sl, lsr r8
    38a0:	3a510001 	bcc	14438ac <__ccfg+0x1423904>
    38a4:	3c000028 	stccc	0, cr0, [r0], {40}	; 0x28
    38a8:	02000028 	andeq	r0, r0, #40	; 0x28
    38ac:	3c549100 	ldfccp	f1, [r4], {-0}
    38b0:	3e000028 	cdpcc	0, 0, cr0, cr0, cr8, {1}
    38b4:	01000028 	tsteq	r0, r8, lsr #32
    38b8:	283e5100 	ldmdacs	lr!, {r8, ip, lr}
    38bc:	28e40000 	stmiacs	r4!, {}^	; <UNPREDICTABLE>
    38c0:	00020000 	andeq	r0, r2, r0
    38c4:	00005491 	muleq	r0, r1, r4
    38c8:	00000000 	andeq	r0, r0, r0
    38cc:	27680000 	strbcs	r0, [r8, -r0]!
    38d0:	27c20000 	strbcs	r0, [r2, r0]
    38d4:	00010000 	andeq	r0, r1, r0
    38d8:	0027ca51 	eoreq	ip, r7, r1, asr sl
    38dc:	0027cc00 	eoreq	ip, r7, r0, lsl #24
    38e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    38ec:	000027ba 			; <UNDEFINED> instruction: 0x000027ba
    38f0:	000027c8 	andeq	r2, r0, r8, asr #15
    38f4:	ca520001 	bgt	1483900 <__ccfg+0x1463958>
    38f8:	ac000027 	stcge	0, cr0, [r0], {39}	; 0x27
    38fc:	01000028 	tsteq	r0, r8, lsr #32
    3900:	00005200 	andeq	r5, r0, r0, lsl #4
    3904:	00000000 	andeq	r0, r0, r0
    3908:	27ba0000 	ldrcs	r0, [sl, r0]!
    390c:	28a20000 	stmiacs	r2!, {}	; <UNPREDICTABLE>
    3910:	00010000 	andeq	r0, r1, r0
    3914:	00000053 	andeq	r0, r0, r3, asr r0
    3918:	00000000 	andeq	r0, r0, r0
    391c:	00276000 	eoreq	r6, r7, r0
    3920:	0028b600 	eoreq	fp, r8, r0, lsl #12
    3924:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3930:	0000275c 	andeq	r2, r0, ip, asr r7
    3934:	000027e4 	andeq	r2, r0, r4, ror #15
    3938:	9f300002 	svcls	0x00300002
    393c:	000027e4 	andeq	r2, r0, r4, ror #15
    3940:	00002918 	andeq	r2, r0, r8, lsl r9
    3944:	00540001 	subseq	r0, r4, r1
    3948:	00000000 	andeq	r0, r0, r0
    394c:	dc000000 	stcle	0, cr0, [r0], {-0}
    3950:	e6000027 	str	r0, [r0], -r7, lsr #32
    3954:	01000027 	tsteq	r0, r7, lsr #32
    3958:	00005100 	andeq	r5, r0, r0, lsl #2
    395c:	00000000 	andeq	r0, r0, r0
    3960:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    3964:	28540000 	ldmdacs	r4, {}^	; <UNPREDICTABLE>
    3968:	00020000 	andeq	r0, r2, r0
    396c:	28549f30 	ldmdacs	r4, {r4, r5, r8, r9, sl, fp, ip, pc}^
    3970:	28740000 	ldmdacs	r4!, {}^	; <UNPREDICTABLE>
    3974:	00010000 	andeq	r0, r1, r0
    3978:	00287451 	eoreq	r7, r8, r1, asr r4
    397c:	00287a00 	eoreq	r7, r8, r0, lsl #20
    3980:	30000200 	andcc	r0, r0, r0, lsl #4
    3984:	00287a9f 	mlaeq	r8, pc, sl, r7	; <UNPREDICTABLE>
    3988:	0028b400 	eoreq	fp, r8, r0, lsl #8
    398c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3998:	00002830 	andeq	r2, r0, r0, lsr r8
    399c:	00002834 	andeq	r2, r0, r4, lsr r8
    39a0:	3c5e0001 	mrrccc	0, 0, r0, lr, cr1
    39a4:	3e000028 	cdpcc	0, 0, cr0, cr0, cr8, {1}
    39a8:	01000028 	tsteq	r0, r8, lsr #32
    39ac:	283e5e00 	ldmdacs	lr!, {r9, sl, fp, ip, lr}
    39b0:	28440000 	stmdacs	r4, {}^	; <UNPREDICTABLE>
    39b4:	00010000 	andeq	r0, r1, r0
    39b8:	00284451 	eoreq	r4, r8, r1, asr r4
    39bc:	00284c00 	eoreq	r4, r8, r0, lsl #24
    39c0:	71000300 	mrsvc	r0, LR_irq
    39c4:	00009f7f 	andeq	r9, r0, pc, ror pc
    39c8:	00000000 	andeq	r0, r0, r0
    39cc:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    39d0:	282e0000 	stmdacs	lr!, {}	; <UNPREDICTABLE>
    39d4:	00020000 	andeq	r0, r2, r0
    39d8:	282e9f30 	stmdacs	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}
    39dc:	28380000 	ldmdacs	r8!, {}	; <UNPREDICTABLE>
    39e0:	00010000 	andeq	r0, r1, r0
    39e4:	0028385e 	eoreq	r3, r8, lr, asr r8
    39e8:	00283a00 	eoreq	r3, r8, r0, lsl #20
    39ec:	71000500 	tstvc	r0, r0, lsl #10
    39f0:	9f263800 	svcls	0x00263800
    39f4:	0000283a 	andeq	r2, r0, sl, lsr r8
    39f8:	0000283c 	andeq	r2, r0, ip, lsr r8
    39fc:	54910006 	ldrpl	r0, [r1], #6
    3a00:	9f263806 	svcls	0x00263806
    3a04:	0000283c 	andeq	r2, r0, ip, lsr r8
    3a08:	0000283e 	andeq	r2, r0, lr, lsr r8
    3a0c:	3e5e0001 	cdpcc	0, 5, cr0, cr14, cr1, {0}
    3a10:	74000028 	strvc	r0, [r0], #-40	; 0xffffffd8
    3a14:	06000028 	streq	r0, [r0], -r8, lsr #32
    3a18:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    3a1c:	749f2638 	ldrvc	r2, [pc], #1592	; 3a24 <__exidx_end+0xc98>
    3a20:	7a000028 	bvc	3ac8 <__exidx_end+0xd3c>
    3a24:	02000028 	andeq	r0, r0, #40	; 0x28
    3a28:	7a9f3000 	bvc	fe7cfa30 <_estack+0xde7caa30>
    3a2c:	e4000028 	str	r0, [r0], #-40	; 0xffffffd8
    3a30:	01000028 	tsteq	r0, r8, lsr #32
    3a34:	00005e00 	andeq	r5, r0, r0, lsl #28
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	28500000 	ldmdacs	r0, {}^	; <UNPREDICTABLE>
    3a40:	28740000 	ldmdacs	r4!, {}^	; <UNPREDICTABLE>
    3a44:	00010000 	andeq	r0, r1, r0
    3a48:	0000005c 	andeq	r0, r0, ip, asr r0
    3a4c:	00000000 	andeq	r0, r0, r0
    3a50:	00287e00 	eoreq	r7, r8, r0, lsl #28
    3a54:	0028e400 	eoreq	lr, r8, r0, lsl #8
    3a58:	5a000100 	bpl	3e60 <__exidx_end+0x10d4>
	...
    3a64:	00002882 	andeq	r2, r0, r2, lsl #17
    3a68:	000028be 			; <UNDEFINED> instruction: 0x000028be
    3a6c:	be5c0001 	cdplt	0, 5, cr0, cr12, cr1, {0}
    3a70:	c2000028 	andgt	r0, r0, #40	; 0x28
    3a74:	01000028 	tsteq	r0, r8, lsr #32
    3a78:	00005100 	andeq	r5, r0, r0, lsl #2
    3a7c:	00000000 	andeq	r0, r0, r0
    3a80:	28c20000 	stmiacs	r2, {}^	; <UNPREDICTABLE>
    3a84:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    3a88:	00170000 	andseq	r0, r7, r0
    3a8c:	40120071 	andsmi	r0, r2, r1, ror r0
    3a90:	0a22244b 	beq	88cbc4 <__ccfg+0x86cc1c>
    3a94:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    3a98:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3a9c:	0001282d 	andeq	r2, r1, sp, lsr #16
    3aa0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	ec000000 	stc	0, cr0, [r0], {-0}
    3aac:	f8000028 			; <UNDEFINED> instruction: 0xf8000028
    3ab0:	02000028 	andeq	r0, r0, #40	; 0x28
    3ab4:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
    3ab8:	18000028 	stmdane	r0, {r3, r5}
    3abc:	01000029 	tsteq	r0, r9, lsr #32
    3ac0:	00005100 	andeq	r5, r0, r0, lsl #2
    3ac4:	00000000 	andeq	r0, r0, r0
    3ac8:	28ee0000 	stmiacs	lr!, {}^	; <UNPREDICTABLE>
    3acc:	28f00000 	ldmcs	r0!, {}^	; <UNPREDICTABLE>
    3ad0:	00010000 	andeq	r0, r1, r0
    3ad4:	0028f053 	eoreq	pc, r8, r3, asr r0	; <UNPREDICTABLE>
    3ad8:	0028f800 	eoreq	pc, r8, r0, lsl #16
    3adc:	4f000200 	svcmi	0x00000200
    3ae0:	0028f89f 	mlaeq	r8, pc, r8, pc	; <UNPREDICTABLE>
    3ae4:	00290800 	eoreq	r0, r9, r0, lsl #16
    3ae8:	53000100 	movwpl	r0, #256	; 0x100
    3aec:	00002908 	andeq	r2, r0, r8, lsl #18
    3af0:	0000290c 	andeq	r2, r0, ip, lsl #18
    3af4:	00730005 	rsbseq	r0, r3, r5
    3af8:	0c9f2534 	cfldr32eq	mvfx2, [pc], {52}	; 0x34
    3afc:	10000029 	andne	r0, r0, r9, lsr #32
    3b00:	01000029 	tsteq	r0, r9, lsr #32
    3b04:	00005300 	andeq	r5, r0, r0, lsl #6
    3b08:	00000000 	andeq	r0, r0, r0
    3b0c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    3b10:	28e40000 	stmiacs	r4!, {}^	; <UNPREDICTABLE>
    3b14:	00060000 	andeq	r0, r6, r0
    3b18:	00139c0c 	andseq	r9, r3, ip, lsl #24
    3b1c:	00009f50 	andeq	r9, r0, r0, asr pc
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	27700000 	ldrbcs	r0, [r0, -r0]!
    3b28:	277c0000 	ldrbcs	r0, [ip, -r0]!
    3b2c:	00010000 	andeq	r0, r1, r0
    3b30:	00000053 	andeq	r0, r0, r3, asr r0
    3b34:	00000000 	andeq	r0, r0, r0
    3b38:	00279000 	eoreq	r9, r7, r0
    3b3c:	00279c00 	eoreq	r9, r7, r0, lsl #24
    3b40:	52000100 	andpl	r0, r0, #0, 2
	...
    3b4c:	000027a6 	andeq	r2, r0, r6, lsr #15
    3b50:	000027b2 			; <UNDEFINED> instruction: 0x000027b2
    3b54:	00520001 	subseq	r0, r2, r1
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	b2000000 	andlt	r0, r0, #0
    3b60:	a2000027 	andge	r0, r0, #39	; 0x27
    3b64:	01000028 	tsteq	r0, r8, lsr #32
    3b68:	00005300 	andeq	r5, r0, r0, lsl #6
    3b6c:	00000000 	andeq	r0, r0, r0
    3b70:	296a0000 	stmdbcs	sl!, {}^	; <UNPREDICTABLE>
    3b74:	29740000 	ldmdbcs	r4!, {}^	; <UNPREDICTABLE>
    3b78:	00010000 	andeq	r0, r1, r0
    3b7c:	00297450 	eoreq	r7, r9, r0, asr r4
    3b80:	00297e00 	eoreq	r7, r9, r0, lsl #28
    3b84:	70000e00 	andvc	r0, r0, r0, lsl #28
    3b88:	80091200 	andhi	r1, r9, r0, lsl #4
    3b8c:	282b1416 	stmdacs	fp!, {r1, r2, r4, sl, ip}
    3b90:	13160001 	tstne	r6, #1
    3b94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b98:	00000000 	andeq	r0, r0, r0
    3b9c:	00296400 	eoreq	r6, r9, r0, lsl #8
    3ba0:	00299000 	eoreq	r9, r9, r0
    3ba4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3bb0:	00002994 	muleq	r0, r4, r9
    3bb4:	0000299a 	muleq	r0, sl, r9
    3bb8:	00730015 	rsbseq	r0, r3, r5, lsl r0
    3bbc:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3bc0:	14164f22 	ldrne	r4, [r6], #-3874	; 0xfffff0de
    3bc4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3bc8:	0001282d 	andeq	r2, r1, sp, lsr #16
    3bcc:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	a0000000 	andge	r0, r0, r0
    3bd8:	aa000029 	bge	3c84 <__exidx_end+0xef8>
    3bdc:	17000029 	strne	r0, [r0, -r9, lsr #32]
    3be0:	12007400 	andne	r7, r0, #0, 8
    3be4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3be8:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    3bec:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3bf0:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3bf4:	9f131600 	svcls	0x00131600
	...
    3c08:	00520001 	subseq	r0, r2, r1
	...
    3c18:	01000000 	mrseq	r0, (UNDEF: 0)
    3c1c:	00005000 	andeq	r5, r0, r0
	...
    3c2c:	00010000 	andeq	r0, r1, r0
    3c30:	00000051 	andeq	r0, r0, r1, asr r0
	...
    3c40:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c54:	00700016 	rsbseq	r0, r0, r6, lsl r0
    3c58:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
    3c5c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3c60:	0000050c 	andeq	r0, r0, ip, lsl #10
    3c64:	01282d80 	smlawbeq	r8, r0, sp, r2
    3c68:	9f131600 	svcls	0x00131600
	...
    3c74:	000029d4 	ldrdeq	r2, [r0], -r4
    3c78:	00002a16 	andeq	r2, r0, r6, lsl sl
    3c7c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3c80:	002a169f 	mlaeq	sl, pc, r6, r1	; <UNPREDICTABLE>
    3c84:	002a2000 	eoreq	r2, sl, r0
    3c88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3c94:	000029e0 	andeq	r2, r0, r0, ror #19
    3c98:	000029ee 	andeq	r2, r0, lr, ror #19
    3c9c:	f2500001 	vhadd.s16	d16, d0, d1
    3ca0:	0e000029 	cdpeq	0, 0, cr0, cr0, cr9, {1}
    3ca4:	0100002a 	tsteq	r0, sl, lsr #32
    3ca8:	2a105000 	bcs	417cb0 <__ccfg+0x3f7d08>
    3cac:	2a120000 	bcs	483cb4 <__ccfg+0x463d0c>
    3cb0:	00010000 	andeq	r0, r1, r0
    3cb4:	002a1450 	eoreq	r1, sl, r0, asr r4
    3cb8:	002a1600 	eoreq	r1, sl, r0, lsl #12
    3cbc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3cd0:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3cd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3cd8:	00000000 	andeq	r0, r0, r0
    3cdc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3cf0:	00540001 	subseq	r0, r4, r1
    3cf4:	00000000 	andeq	r0, r0, r0
    3cf8:	20000000 	andcs	r0, r0, r0
    3cfc:	5a00002a 	bpl	3dac <__exidx_end+0x1020>
    3d00:	0300002a 	movweq	r0, #42	; 0x2a
    3d04:	9fff0900 	svcls	0x00ff0900
    3d08:	00002a5a 	andeq	r2, r0, sl, asr sl
    3d0c:	00002a5e 	andeq	r2, r0, lr, asr sl
    3d10:	9f440002 	svcls	0x00440002
    3d14:	00002a5e 	andeq	r2, r0, lr, asr sl
    3d18:	00002a62 	andeq	r2, r0, r2, ror #20
    3d1c:	9f450002 	svcls	0x00450002
    3d20:	00002a62 	andeq	r2, r0, r2, ror #20
    3d24:	00002a80 	andeq	r2, r0, r0, lsl #21
    3d28:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3d2c:	002a809f 	mlaeq	sl, pc, r0, r8	; <UNPREDICTABLE>
    3d30:	002a8200 	eoreq	r8, sl, r0, lsl #4
    3d34:	50000100 	andpl	r0, r0, r0, lsl #2
    3d38:	00002a82 	andeq	r2, r0, r2, lsl #21
    3d3c:	00002a84 	andeq	r2, r0, r4, lsl #21
    3d40:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3d44:	002a849f 	mlaeq	sl, pc, r4, r8	; <UNPREDICTABLE>
    3d48:	002a8c00 	eoreq	r8, sl, r0, lsl #24
    3d4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3d58:	00002a30 	andeq	r2, r0, r0, lsr sl
    3d5c:	00002a88 	andeq	r2, r0, r8, lsl #21
    3d60:	00540001 	subseq	r0, r4, r1
    3d64:	00000000 	andeq	r0, r0, r0
    3d68:	a4000000 	strge	r0, [r0], #-0
    3d6c:	ad00002a 	stcge	0, cr0, [r0, #-168]	; 0xffffff58
    3d70:	0100002a 	tsteq	r0, sl, lsr #32
    3d74:	2aad5000 	bcs	feb57d7c <_estack+0xdeb52d7c>
    3d78:	2ac20000 	bcs	ff083d80 <_estack+0xdf07ed80>
    3d7c:	00010000 	andeq	r0, r1, r0
    3d80:	002ac254 	eoreq	ip, sl, r4, asr r2
    3d84:	002ac600 	eoreq	ip, sl, r0, lsl #12
    3d88:	f3000400 	vshl.u8	d0, d0, d0
    3d8c:	c69f5001 	ldrgt	r5, [pc], r1
    3d90:	c800002a 	stmdagt	r0, {r1, r3, r5}
    3d94:	0100002a 	tsteq	r0, sl, lsr #32
    3d98:	2ac85400 	bcs	ff218da0 <_estack+0xdf213da0>
    3d9c:	2acc0000 	bcs	ff303da4 <_estack+0xdf2feda4>
    3da0:	00040000 	andeq	r0, r4, r0
    3da4:	9f5001f3 	svcls	0x005001f3
	...
    3db0:	00002aa4 	andeq	r2, r0, r4, lsr #21
    3db4:	00002aad 	andeq	r2, r0, sp, lsr #21
    3db8:	ad510001 	ldclge	0, cr0, [r1, #-4]
    3dbc:	c200002a 	andgt	r0, r0, #42	; 0x2a
    3dc0:	0100002a 	tsteq	r0, sl, lsr #32
    3dc4:	2ac25500 	bcs	ff0991cc <_estack+0xdf0941cc>
    3dc8:	2ac60000 	bcs	ff183dd0 <_estack+0xdf17edd0>
    3dcc:	00040000 	andeq	r0, r4, r0
    3dd0:	9f5101f3 	svcls	0x005101f3
    3dd4:	00002ac6 	andeq	r2, r0, r6, asr #21
    3dd8:	00002ac8 	andeq	r2, r0, r8, asr #21
    3ddc:	c8550001 	ldmdagt	r5, {r0}^
    3de0:	cc00002a 	stcgt	0, cr0, [r0], {42}	; 0x2a
    3de4:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    3de8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3dec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3df0:	00000000 	andeq	r0, r0, r0
    3df4:	002aae00 	eoreq	sl, sl, r0, lsl #28
    3df8:	002ac500 	eoreq	ip, sl, r0, lsl #10
    3dfc:	70000500 	andvc	r0, r0, r0, lsl #10
    3e00:	9f293000 	svcls	0x00293000
    3e04:	00002ac6 	andeq	r2, r0, r6, asr #21
    3e08:	00002acc 	andeq	r2, r0, ip, asr #21
    3e0c:	00700005 	rsbseq	r0, r0, r5
    3e10:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    3e14:	00000000 	andeq	r0, r0, r0
    3e18:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3e1c:	ce00002a 	cdpgt	0, 0, cr0, cr0, cr10, {1}
    3e20:	0100002a 	tsteq	r0, sl, lsr #32
    3e24:	2ace5000 	bcs	ff397e2c <_estack+0xdf392e2c>
    3e28:	2ad40000 	bcs	ff503e30 <_estack+0xdf4fee30>
    3e2c:	00040000 	andeq	r0, r4, r0
    3e30:	9f5001f3 	svcls	0x005001f3
	...
    3e3c:	00002acc 	andeq	r2, r0, ip, asr #21
    3e40:	00002ad0 	ldrdeq	r2, [r0], -r0
    3e44:	d0510001 	subsle	r0, r1, r1
    3e48:	d400002a 	strle	r0, [r0], #-42	; 0xffffffd6
    3e4c:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    3e50:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3e54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e58:	00000000 	andeq	r0, r0, r0
    3e5c:	002acc00 	eoreq	ip, sl, r0, lsl #24
    3e60:	002ad300 	eoreq	sp, sl, r0, lsl #6
    3e64:	52000100 	andpl	r0, r0, #0, 2
    3e68:	00002ad3 	ldrdeq	r2, [r0], -r3
    3e6c:	00002ad4 	ldrdeq	r2, [r0], -r4
    3e70:	01f30004 	mvnseq	r0, r4
    3e74:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    3e84:	00010000 	andeq	r0, r1, r0
    3e88:	00000050 	andeq	r0, r0, r0, asr r0
    3e8c:	00000000 	andeq	r0, r0, r0
    3e90:	f3000400 	vshl.u8	d0, d0, d0
    3e94:	009f5001 	addseq	r5, pc, r1
	...
    3ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ea8:	00005100 	andeq	r5, r0, r0, lsl #2
    3eac:	00000000 	andeq	r0, r0, r0
    3eb0:	00040000 	andeq	r0, r4, r0
    3eb4:	9f5101f3 	svcls	0x005101f3
	...
    3ec8:	00520001 	subseq	r0, r2, r1
    3ecc:	00000000 	andeq	r0, r0, r0
    3ed0:	04000000 	streq	r0, [r0], #-0
    3ed4:	5201f300 	andpl	pc, r1, #0, 6
    3ed8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	52000100 	andpl	r0, r0, #0, 2
	...
    3eec:	01f30015 	mvnseq	r0, r5, lsl r0
    3ef0:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    3ef4:	01f35201 	mvnseq	r5, r1, lsl #4
    3ef8:	30254052 	eorcc	r4, r5, r2, asr r0
    3efc:	0001282e 	andeq	r2, r1, lr, lsr #16
    3f00:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    3f10:	01000000 	mrseq	r0, (UNDEF: 0)
    3f14:	00005300 	andeq	r5, r0, r0, lsl #6
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	00040000 	andeq	r0, r4, r0
    3f20:	9f5301f3 	svcls	0x005301f3
	...
    3f34:	80700004 	rsbshi	r0, r0, r4
    3f38:	00009f04 	andeq	r9, r0, r4, lsl #30
    3f3c:	00000000 	andeq	r0, r0, r0
    3f40:	000d0000 	andeq	r0, sp, r0
    3f44:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3f48:	5001f324 	andpl	pc, r1, r4, lsr #6
    3f4c:	04802322 	streq	r2, [r0], #802	; 0x322
    3f50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f54:	00000000 	andeq	r0, r0, r0
    3f58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3f64:	01f30052 	mvnseq	r0, r2, asr r0
    3f68:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3f6c:	23225001 			; <UNDEFINED> instruction: 0x23225001
    3f70:	01f30480 	mvnseq	r0, r0, lsl #9
    3f74:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3f78:	f3225001 	vhadd.u32	d5, d2, d1
    3f7c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f80:	01282930 			; <UNDEFINED> instruction: 0x01282930
    3f84:	23131600 	tstcs	r3, #0, 12
    3f88:	01f30484 	mvnseq	r0, r4, lsl #9
    3f8c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3f90:	23225001 			; <UNDEFINED> instruction: 0x23225001
    3f94:	01f30480 	mvnseq	r0, r0, lsl #9
    3f98:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3f9c:	f3225001 	vhadd.u32	d5, d2, d1
    3fa0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3fa4:	01282930 			; <UNDEFINED> instruction: 0x01282930
    3fa8:	f3131600 	vmax.u16	d1, d3, d0
    3fac:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3fb0:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    3fb4:	9f131600 	svcls	0x00131600
	...
    3fc8:	00510001 	subseq	r0, r1, r1
    3fcc:	00000000 	andeq	r0, r0, r0
    3fd0:	2f000000 	svccs	0x00000000
    3fd4:	01f33000 	mvnseq	r3, r0
    3fd8:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    3fdc:	01f35201 	mvnseq	r5, r1, lsl #4
    3fe0:	30254052 	eorcc	r4, r5, r2, asr r0
    3fe4:	0001282e 	andeq	r2, r1, lr, lsr #16
    3fe8:	01f31316 	mvnseq	r1, r6, lsl r3
    3fec:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    3ff0:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
    3ff4:	16000128 	strne	r0, [r0], -r8, lsr #2
    3ff8:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    3ffc:	01282930 			; <UNDEFINED> instruction: 0x01282930
    4000:	9f131600 	svcls	0x00131600
	...
    4014:	00500001 	subseq	r0, r0, r1
    4018:	00000000 	andeq	r0, r0, r0
    401c:	04000000 	streq	r0, [r0], #-0
    4020:	5001f300 	andpl	pc, r1, r0, lsl #6
    4024:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4034:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4040:	01f30004 	mvnseq	r0, r4
    4044:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4054:	00010000 	andeq	r0, r1, r0
    4058:	00000052 	andeq	r0, r0, r2, asr r0
    405c:	00000000 	andeq	r0, r0, r0
    4060:	f3000400 	vshl.u8	d0, d0, d0
    4064:	009f5201 	addseq	r5, pc, r1, lsl #4
    4068:	00000000 	andeq	r0, r0, r0
    406c:	01000000 	mrseq	r0, (UNDEF: 0)
    4070:	00005200 	andeq	r5, r0, r0, lsl #4
    4074:	00000000 	andeq	r0, r0, r0
    4078:	001b0000 	andseq	r0, fp, r0
    407c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4080:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4084:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4088:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    408c:	8000000f 	andhi	r0, r0, pc
    4090:	0001282b 	andeq	r2, r1, fp, lsr #16
    4094:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    40a4:	01000000 	mrseq	r0, (UNDEF: 0)
    40a8:	00005300 	andeq	r5, r0, r0, lsl #6
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	00040000 	andeq	r0, r4, r0
    40b4:	9f5301f3 	svcls	0x005301f3
	...
    40c0:	00530001 	subseq	r0, r3, r1
    40c4:	00000000 	andeq	r0, r0, r0
    40c8:	1b000000 	blne	40d0 <__exidx_end+0x1344>
    40cc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    40d0:	01f31c40 	mvnseq	r1, r0, asr #24
    40d4:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    40d8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    40dc:	00000f0c 	andeq	r0, r0, ip, lsl #30
    40e0:	01282b80 	smlawbeq	r8, r0, fp, r2
    40e4:	9f131600 	svcls	0x00131600
	...
    40f8:	00910002 	addseq	r0, r1, r2
	...
    4104:	007d0002 	rsbseq	r0, sp, r2
	...
    4118:	80700004 	rsbshi	r0, r0, r4
    411c:	00009f04 	andeq	r9, r0, r4, lsl #30
    4120:	00000000 	andeq	r0, r0, r0
    4124:	000d0000 	andeq	r0, sp, r0
    4128:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    412c:	5001f324 	andpl	pc, r1, r4, lsr #6
    4130:	04802322 	streq	r2, [r0], #802	; 0x322
    4134:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4138:	00000000 	andeq	r0, r0, r0
    413c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4148:	01f30064 	mvnseq	r0, r4, rrx
    414c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4150:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4154:	01f30480 	mvnseq	r0, r0, lsl #9
    4158:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    415c:	f3225001 	vhadd.u32	d5, d2, d1
    4160:	4b405301 	blmi	1018d6c <__ccfg+0xff8dc4>
    4164:	0f0c2224 	svceq	0x000c2224
    4168:	2c800000 	stccs	0, cr0, [r0], {0}
    416c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4170:	04842313 	streq	r2, [r4], #787	; 0x313
    4174:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4178:	5001f324 	andpl	pc, r1, r4, lsr #6
    417c:	04802322 	streq	r2, [r0], #802	; 0x322
    4180:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4184:	5001f324 	andpl	pc, r1, r4, lsr #6
    4188:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    418c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4190:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4194:	01282c80 	smlawbeq	r8, r0, ip, r2
    4198:	f3131600 	vmax.u16	d1, d3, d0
    419c:	4b405301 	blmi	1018da8 <__ccfg+0xff8e00>
    41a0:	0f0c2224 	svceq	0x000c2224
    41a4:	2b800000 	blcs	fe0041ac <_estack+0xddfff1ac>
    41a8:	16000128 	strne	r0, [r0], -r8, lsr #2
    41ac:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    41bc:	000a0000 	andeq	r0, sl, r0
    41c0:	ff0a0074 			; <UNDEFINED> instruction: 0xff0a0074
    41c4:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    41c8:	00009f24 	andeq	r9, r0, r4, lsr #30
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	000c0000 	andeq	r0, ip, r0
    41d4:	0294007d 	addseq	r0, r4, #125	; 0x7d
    41d8:	1affff0a 	bne	3e08 <__exidx_end+0x107c>
    41dc:	9f240073 	svcls	0x00240073
	...
    41e8:	007d0024 	rsbseq	r0, sp, r4, lsr #32
    41ec:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    41f0:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    41f4:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    41f8:	01f35301 	mvnseq	r5, r1, lsl #6
    41fc:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4200:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4204:	282b8000 	stmdacs	fp!, {pc}
    4208:	13160001 	tstne	r6, #1
    420c:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    421c:	00010000 	andeq	r0, r1, r0
    4220:	00000050 	andeq	r0, r0, r0, asr r0
    4224:	00000000 	andeq	r0, r0, r0
    4228:	f3000400 	vshl.u8	d0, d0, d0
    422c:	009f5001 	addseq	r5, pc, r1
	...
    423c:	01000000 	mrseq	r0, (UNDEF: 0)
    4240:	00005100 	andeq	r5, r0, r0, lsl #2
    4244:	00000000 	andeq	r0, r0, r0
    4248:	00040000 	andeq	r0, r4, r0
    424c:	9f5101f3 	svcls	0x005101f3
	...
    4260:	00520001 	subseq	r0, r2, r1
    4264:	00000000 	andeq	r0, r0, r0
    4268:	01000000 	mrseq	r0, (UNDEF: 0)
    426c:	00005400 	andeq	r5, r0, r0, lsl #8
    4270:	00000000 	andeq	r0, r0, r0
    4274:	00150000 	andseq	r0, r5, r0
    4278:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    427c:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4280:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4284:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4288:	13160001 	tstne	r6, #1
    428c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    429c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    42a8:	01f3001d 	mvnseq	r0, sp, lsl r0
    42ac:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    42b0:	f3022322 	vcgt.u8	d2, d2, d18
    42b4:	01f35001 	mvnseq	r5, r1
    42b8:	01f32251 	mvnseq	r2, r1, asr r2
    42bc:	30254052 	eorcc	r4, r5, r2, asr r0
    42c0:	0001282e 	andeq	r2, r1, lr, lsr #16
    42c4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    42d4:	06000000 	streq	r0, [r0], -r0
    42d8:	74007500 	strvc	r7, [r0], #-1280	; 0xfffffb00
    42dc:	009f1a00 	addseq	r1, pc, r0, lsl #20
	...
    42ec:	01000000 	mrseq	r0, (UNDEF: 0)
    42f0:	00005500 	andeq	r5, r0, r0, lsl #10
    42f4:	00000000 	andeq	r0, r0, r0
    42f8:	001d0000 	andseq	r0, sp, r0
    42fc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4300:	23225101 			; <UNDEFINED> instruction: 0x23225101
    4304:	5001f302 	andpl	pc, r1, r2, lsl #6
    4308:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    430c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4310:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4314:	13160001 	tstne	r6, #1
    4318:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4328:	75000700 	strvc	r0, [r0, #-1792]	; 0xfffff900
    432c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4330:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    4340:	00050000 	andeq	r0, r5, r0
    4344:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4348:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4358:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4364:	01f30004 	mvnseq	r0, r4
    4368:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4378:	00010000 	andeq	r0, r1, r0
    437c:	00000051 	andeq	r0, r0, r1, asr r0
    4380:	00000000 	andeq	r0, r0, r0
    4384:	f3000400 	vshl.u8	d0, d0, d0
    4388:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4398:	01000000 	mrseq	r0, (UNDEF: 0)
    439c:	00005200 	andeq	r5, r0, r0, lsl #4
    43a0:	00000000 	andeq	r0, r0, r0
    43a4:	00010000 	andeq	r0, r1, r0
    43a8:	00000054 	andeq	r0, r0, r4, asr r0
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    43b4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    43b8:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    43bc:	4b405301 	blmi	1018fc8 <__ccfg+0xff9020>
    43c0:	0f0c2224 	svceq	0x000c2224
    43c4:	2b800000 	blcs	fe0043cc <_estack+0xddfff3cc>
    43c8:	16000128 	strne	r0, [r0], -r8, lsr #2
    43cc:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    43dc:	00010000 	andeq	r0, r1, r0
    43e0:	00000053 	andeq	r0, r0, r3, asr r0
    43e4:	00000000 	andeq	r0, r0, r0
    43e8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    43f4:	01f3001b 	mvnseq	r0, fp, lsl r0
    43f8:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    43fc:	01f35301 	mvnseq	r5, r1, lsl #6
    4400:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4404:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4408:	282b8000 	stmdacs	fp!, {pc}
    440c:	13160001 	tstne	r6, #1
    4410:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4420:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    442c:	00700006 	rsbseq	r0, r0, r6
    4430:	9f220071 	svcls	0x00220071
	...
    443c:	00560001 	subseq	r0, r6, r1
    4440:	00000000 	andeq	r0, r0, r0
    4444:	23000000 	movwcs	r0, #0
    4448:	5001f300 	andpl	pc, r1, r0, lsl #6
    444c:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4450:	01f30223 	mvnseq	r0, r3, lsr #4
    4454:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4458:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    445c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4460:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4464:	01282b80 	smlawbeq	r8, r0, fp, r2
    4468:	9f131600 	svcls	0x00131600
	...
    447c:	00760006 	rsbseq	r0, r6, r6
    4480:	9f1a0074 	svcls	0x001a0074
	...
    448c:	00500001 	subseq	r0, r0, r1
	...
    449c:	01000000 	mrseq	r0, (UNDEF: 0)
    44a0:	00005600 	andeq	r5, r0, r0, lsl #12
    44a4:	00000000 	andeq	r0, r0, r0
    44a8:	00230000 	eoreq	r0, r3, r0
    44ac:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    44b0:	23225101 			; <UNDEFINED> instruction: 0x23225101
    44b4:	5001f302 	andpl	pc, r1, r2, lsl #6
    44b8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    44bc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    44c0:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    44c4:	8000000f 	andhi	r0, r0, pc
    44c8:	0001282b 	andeq	r2, r1, fp, lsr #16
    44cc:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    44dc:	07000000 	streq	r0, [r0, -r0]
    44e0:	0a007600 	beq	21ce8 <__ccfg+0x1d40>
    44e4:	9f1affff 	svcls	0x001affff
	...
    44f8:	00700005 	rsbseq	r0, r0, r5
    44fc:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    4500:	00000000 	andeq	r0, r0, r0
    4504:	d4000000 	strle	r0, [r0], #-0
    4508:	ec00002a 	stc	0, cr0, [r0], {42}	; 0x2a
    450c:	0100002a 	tsteq	r0, sl, lsr #32
    4510:	2aec5000 	bcs	ffb18518 <_estack+0xdfb13518>
    4514:	2b260000 	blcs	98451c <__ccfg+0x964574>
    4518:	00010000 	andeq	r0, r1, r0
    451c:	002b2655 	eoreq	r2, fp, r5, asr r6
    4520:	002b3000 	eoreq	r3, fp, r0
    4524:	f3000400 	vshl.u8	d0, d0, d0
    4528:	009f5001 	addseq	r5, pc, r1
    452c:	00000000 	andeq	r0, r0, r0
    4530:	d4000000 	strle	r0, [r0], #-0
    4534:	da00002a 	ble	45e4 <__exidx_end+0x1858>
    4538:	0100002a 	tsteq	r0, sl, lsr #32
    453c:	2ada5100 	bcs	ff698944 <_estack+0xdf693944>
    4540:	2b120000 	blcs	484548 <__ccfg+0x4645a0>
    4544:	00010000 	andeq	r0, r1, r0
    4548:	002b1254 	eoreq	r1, fp, r4, asr r2
    454c:	002b3000 	eoreq	r3, fp, r0
    4550:	f3000400 	vshl.u8	d0, d0, d0
    4554:	009f5101 	addseq	r5, pc, r1, lsl #2
    4558:	00000000 	andeq	r0, r0, r0
    455c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4560:	2200002b 	andcs	r0, r0, #43	; 0x2b
    4564:	0100002b 	tsteq	r0, fp, lsr #32
    4568:	00005500 	andeq	r5, r0, r0, lsl #10
    456c:	00000000 	andeq	r0, r0, r0
    4570:	2b0e0000 	blcs	384578 <__ccfg+0x3645d0>
    4574:	2b120000 	blcs	48457c <__ccfg+0x4645d4>
    4578:	00010000 	andeq	r0, r1, r0
    457c:	002b1254 	eoreq	r1, fp, r4, asr r2
    4580:	002b2200 	eoreq	r2, fp, r0, lsl #4
    4584:	f3000400 	vshl.u8	d0, d0, d0
    4588:	009f5101 	addseq	r5, pc, r1, lsl #2
    458c:	00000000 	andeq	r0, r0, r0
    4590:	30000000 	andcc	r0, r0, r0
    4594:	4e00002b 	cdpmi	0, 0, cr0, cr0, cr11, {1}
    4598:	0100002b 	tsteq	r0, fp, lsr #32
    459c:	2b4e5000 	blcs	13985a4 <__ccfg+0x13785fc>
    45a0:	2b5c0000 	blcs	17045a8 <__ccfg+0x16e4600>
    45a4:	00040000 	andeq	r0, r4, r0
    45a8:	9f5001f3 	svcls	0x005001f3
	...
    45bc:	00500001 	subseq	r0, r0, r1
    45c0:	00000000 	andeq	r0, r0, r0
    45c4:	01000000 	mrseq	r0, (UNDEF: 0)
    45c8:	00005600 	andeq	r5, r0, r0, lsl #12
    45cc:	00000000 	andeq	r0, r0, r0
    45d0:	00040000 	andeq	r0, r4, r0
    45d4:	9f5001f3 	svcls	0x005001f3
	...
    45e8:	00550001 	subseq	r0, r5, r1
	...
    45f8:	07000000 	streq	r0, [r0, -r0]
    45fc:	73007000 	movwvc	r7, #0
    4600:	9f191c00 	svcls	0x00191c00
	...
    460c:	00700004 	rsbseq	r0, r0, r4
    4610:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    4620:	00040000 	andeq	r0, r4, r0
    4624:	9f07d00a 	svcls	0x0007d00a
	...
    4630:	00500001 	subseq	r0, r0, r1
    4634:	00000000 	andeq	r0, r0, r0
    4638:	05000000 	streq	r0, [r0, #-0]
    463c:	40007200 	andmi	r7, r0, r0, lsl #4
    4640:	00009f25 	andeq	r9, r0, r5, lsr #30
    4644:	00000000 	andeq	r0, r0, r0
    4648:	00010000 	andeq	r0, r1, r0
    464c:	00000050 	andeq	r0, r0, r0, asr r0
    4650:	00000000 	andeq	r0, r0, r0
    4654:	0a000400 	beq	565c <__exidx_end+0x28d0>
    4658:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    465c:	00000000 	andeq	r0, r0, r0
    4660:	01000000 	mrseq	r0, (UNDEF: 0)
    4664:	00005000 	andeq	r5, r0, r0
	...
    4674:	00010000 	andeq	r0, r1, r0
    4678:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4688:	53000100 	movwpl	r0, #256	; 0x100
	...
    469c:	00500001 	subseq	r0, r0, r1
    46a0:	00000000 	andeq	r0, r0, r0
    46a4:	03000000 	movweq	r0, #0
    46a8:	9f1b7000 	svcls	0x001b7000
	...
    46b4:	01f30004 	mvnseq	r0, r4
    46b8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    46c8:	00070000 	andeq	r0, r7, r0
    46cc:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    46d0:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    46e0:	01000000 	mrseq	r0, (UNDEF: 0)
    46e4:	00005000 	andeq	r5, r0, r0
    46e8:	00000000 	andeq	r0, r0, r0
    46ec:	00060000 	andeq	r0, r6, r0
    46f0:	4b5001f3 	blmi	1404ec4 <__ccfg+0x13e4f1c>
    46f4:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    4704:	00010000 	andeq	r0, r1, r0
    4708:	00000055 	andeq	r0, r0, r5, asr r0
    470c:	00000000 	andeq	r0, r0, r0
    4710:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    4714:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    4718:	4b5001f3 	blmi	1404eec <__ccfg+0x13e4f44>
    471c:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    472c:	2c000000 	stccs	0, cr0, [r0], {-0}
    4730:	40007100 	andmi	r7, r0, r0, lsl #2
    4734:	40007126 	andmi	r7, r0, r6, lsr #2
    4738:	70264824 	eorvc	r4, r6, r4, lsr #16
    473c:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    4740:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    4744:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    4748:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    474c:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    4750:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    4754:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    4758:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    475c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4760:	00000000 	andeq	r0, r0, r0
    4764:	71003200 	mrsvc	r3, R8_usr
    4768:	f3264000 	vhadd.u32	d4, d6, d0
    476c:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    4770:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    4774:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    4778:	00712226 	rsbseq	r2, r1, r6, lsr #4
    477c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    4780:	3a1e0075 	bcc	78495c <__ccfg+0x7649b4>
    4784:	01f32226 	mvnseq	r2, r6, lsr #4
    4788:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    478c:	48244800 	stmdami	r4!, {fp, lr}
    4790:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    4794:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    4798:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    47a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    47b4:	01f30004 	mvnseq	r0, r4
    47b8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    47c8:	000b0000 	andeq	r0, fp, r0
    47cc:	00700070 	rsbseq	r0, r0, r0, ror r0
    47d0:	7026461e 	eorvc	r4, r6, lr, lsl r6
    47d4:	009f1c00 	addseq	r1, pc, r0, lsl #24
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	01000000 	mrseq	r0, (UNDEF: 0)
    47e0:	00005000 	andeq	r5, r0, r0
    47e4:	00000000 	andeq	r0, r0, r0
    47e8:	000e0000 	andeq	r0, lr, r0
    47ec:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    47f0:	461e5001 	ldrmi	r5, [lr], -r1
    47f4:	5001f326 	andpl	pc, r1, r6, lsr #6
    47f8:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    4808:	00010000 	andeq	r0, r1, r0
    480c:	00000055 	andeq	r0, r0, r5, asr r0
    4810:	00000000 	andeq	r0, r0, r0
    4814:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    4818:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    482c:	00560001 	subseq	r0, r6, r1
	...
    483c:	06000000 	streq	r0, [r0], -r0
    4840:	76007000 	strvc	r7, [r0], -r0
    4844:	009f1c00 	addseq	r1, pc, r0, lsl #24
    4848:	00000000 	andeq	r0, r0, r0
    484c:	01000000 	mrseq	r0, (UNDEF: 0)
    4850:	00005000 	andeq	r5, r0, r0
	...
    4860:	000a0000 	andeq	r0, sl, r0
    4864:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    4868:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    486c:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    487c:	00010000 	andeq	r0, r1, r0
    4880:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4890:	73000900 	movwvc	r0, #2304	; 0x900
    4894:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    4898:	9f253a1a 	svcls	0x00253a1a
	...
    48ac:	0073000a 	rsbseq	r0, r3, sl
    48b0:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    48b4:	9f25421a 	svcls	0x0025421a
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000002c 	andeq	r0, r0, ip, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	00000100 	andeq	r0, r0, r0, lsl #2
  18:	000001c8 	andeq	r0, r0, r8, asr #3
  1c:	0000006c 	andeq	r0, r0, ip, rrx
  20:	00000234 	andeq	r0, r0, r4, lsr r2
  24:	00000170 	andeq	r0, r0, r0, ror r1
	...
  30:	000000e4 	andeq	r0, r0, r4, ror #1
  34:	07e80002 	strbeq	r0, [r8, r2]!
  38:	00040000 	andeq	r0, r4, r0
  3c:	00000000 	andeq	r0, r0, r0
			i = k;
  40:	000003a4 	andeq	r0, r0, r4, lsr #7
				j->Next = k;
  44:	0000000c 	andeq	r0, r0, ip
  48:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
}
  4c:	0000002c 	andeq	r0, r0, ip, lsr #32
  50:	000003dc 	ldrdeq	r0, [r0], -ip
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
		release;
  58:	00000408 	andeq	r0, r0, r8, lsl #8
  5c:	0000003c 	andeq	r0, r0, ip, lsr r0
  60:	00000000 	andeq	r0, r0, r0
  64:	00000040 	andeq	r0, r0, r0, asr #32
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000020 	andeq	r0, r0, r0, lsr #32
  70:	00000444 	andeq	r0, r0, r4, asr #8
  74:	00000054 	andeq	r0, r0, r4, asr r0
  78:	00000498 	muleq	r0, r8, r4
  7c:	00000040 	andeq	r0, r0, r0, asr #32
  80:	000004d8 	ldrdeq	r0, [r0], -r8
  84:	00000028 	andeq	r0, r0, r8, lsr #32
  88:	00000500 	andeq	r0, r0, r0, lsl #10
  8c:	00000114 	andeq	r0, r0, r4, lsl r1
	descriptors [fd] = s;
  90:	00000614 	andeq	r0, r0, r4, lsl r6
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000050 	andeq	r0, r0, r0, asr r0
  98:	00000664 	andeq	r0, r0, r4, ror #12
	if (s == NULL)
  9c:	00000054 	andeq	r0, r0, r4, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
  a4:	00000038 	andeq	r0, r0, r8, lsr r0
  a8:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  ac:	00000110 	andeq	r0, r0, r0, lsl r1
  b0:	00000000 	andeq	r0, r0, r0
  b4:	0000000c 	andeq	r0, r0, ip
  b8:	00000800 	andeq	r0, r0, r0, lsl #16
  bc:	000000c0 	andeq	r0, r0, r0, asr #1
  c0:	000008c0 	andeq	r0, r0, r0, asr #17
  c4:	00000044 	andeq	r0, r0, r4, asr #32
  c8:	00000904 	andeq	r0, r0, r4, lsl #18
  cc:	0000003c 	andeq	r0, r0, ip, lsr r0
  d0:	00000940 	andeq	r0, r0, r0, asr #18
  d4:	000000a4 	andeq	r0, r0, r4, lsr #1
  d8:	000009e4 	andeq	r0, r0, r4, ror #19
  dc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e0:	00000000 	andeq	r0, r0, r0
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000028 	andeq	r0, r0, r8, lsr #32
  f0:	00000b9c 	muleq	r0, ip, fp
        if(offTime > 0)
  f4:	00000258 	andeq	r0, r0, r8, asr r2
            delay(offTime, Check_PERIOD);
  f8:	00000000 	andeq	r0, r0, r0
        if(ledFlag == 0) {
  fc:	00000030 	andeq	r0, r0, r0, lsr r0
 100:	00000000 	andeq	r0, r0, r0
 104:	0000005c 	andeq	r0, r0, ip, asr r0
            led = redLed;
 108:	00000df4 	strdeq	r0, [r0], -r4
            onTime = redOn;
 10c:	00000060 	andeq	r0, r0, r0, rrx
	...
            offTime = greenOff;
 118:	00000154 	andeq	r0, r0, r4, asr r1
        if(On)
 11c:	1c780002 	ldclne	0, cr0, [r8], #-8
 120:	00040000 	andeq	r0, r4, r0
            leds(led,1);
 124:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 128:	00000e54 	andeq	r0, r0, r4, asr lr
            leds(led,0);
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
 130:	00000e90 	muleq	r0, r0, lr
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	00000f10 	andeq	r0, r0, r0, lsl pc
        if(onTime > 0)
 13c:	00000018 	andeq	r0, r0, r8, lsl r0
            delay(onTime, OFF_PERIOD);
 140:	00000000 	andeq	r0, r0, r0
        when(&On, Check_PERIOD);
 144:	00000024 	andeq	r0, r0, r4, lsr #32
 148:	00000f28 	andeq	r0, r0, r8, lsr #30
        release;
 14c:	00000010 	andeq	r0, r0, r0, lsl r0
            led = greenLed;
 150:	00000000 	andeq	r0, r0, r0
 154:	0000002c 	andeq	r0, r0, ip, lsr #32
            onTime = greenOn;
 158:	00000000 	andeq	r0, r0, r0
            offTime = greenOff;
 15c:	0000004c 	andeq	r0, r0, ip, asr #32
            leds(led,0);
 160:	00000000 	andeq	r0, r0, r0
 164:	00000006 	andeq	r0, r0, r6
 168:	00000f38 	andeq	r0, r0, r8, lsr pc
 16c:	000000cc 	andeq	r0, r0, ip, asr #1
 170:	00001004 	andeq	r1, r0, r4
 174:	00000014 	andeq	r0, r0, r4, lsl r0
        leds(led,0);
 178:	00001018 	andeq	r1, r0, r8, lsl r0
 17c:	00000034 	andeq	r0, r0, r4, lsr r0
 180:	0000104c 	andeq	r1, r0, ip, asr #32
 184:	00000034 	andeq	r0, r0, r4, lsr r0
}
 188:	00000000 	andeq	r0, r0, r0
 18c:	0000002c 	andeq	r0, r0, ip, lsr #32
 190:	00001080 	andeq	r1, r0, r0, lsl #1
 194:	00000024 	andeq	r0, r0, r4, lsr #32
 198:	000010a4 	andeq	r1, r0, r4, lsr #1
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	00000014 	andeq	r0, r0, r4, lsl r0
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	00000040 	andeq	r0, r0, r0, asr #32
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	000010dc 	ldrdeq	r1, [r0], -ip
 1bc:	00000024 	andeq	r0, r0, r4, lsr #32
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000020 	andeq	r0, r0, r0, lsr #32
    word number = 0;
 1c8:	00001100 	andeq	r1, r0, r0, lsl #2
    int numbersIndex = 0;
 1cc:	0000000e 	andeq	r0, r0, lr
 1d0:	00000000 	andeq	r0, r0, r0
        if(settingsInput[i] == ' ') {
 1d4:	00000010 	andeq	r0, r0, r0, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
            numbers[numbersIndex] = number;
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
            number = 0;
 1e4:	00000010 	andeq	r0, r0, r0, lsl r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 1e8:	00000000 	andeq	r0, r0, r0
    redOn = numbers[0];
 1ec:	00000006 	andeq	r0, r0, r6
 1f0:	0000110e 	andeq	r1, r0, lr, lsl #2
    redOff = numbers[1];
 1f4:	00000014 	andeq	r0, r0, r4, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
    greenOn = numbers[2];
 1fc:	0000000e 	andeq	r0, r0, lr
 200:	00001124 	andeq	r1, r0, r4, lsr #2
    greenOff = numbers[3];
 204:	00000024 	andeq	r0, r0, r4, lsr #32
 208:	00001148 	andeq	r1, r0, r8, asr #2
}
 20c:	0000009c 	muleq	r0, ip, r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 210:	000011e4 	andeq	r1, r0, r4, ror #3
 214:	00000050 	andeq	r0, r0, r0, asr r0
            number = number * 10;
 218:	00001234 	andeq	r1, r0, r4, lsr r2
            number += settingsInput[i] - 48;
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	0000127c 	andeq	r1, r0, ip, ror r2
 224:	00000050 	andeq	r0, r0, r0, asr r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000058 	andeq	r0, r0, r8, asr r0
 230:	000012cc 	andeq	r1, r0, ip, asr #5
fsm root {
 234:	000000a8 	andeq	r0, r0, r8, lsr #1
 238:	00001374 	andeq	r1, r0, r4, ror r3
 23c:	00000034 	andeq	r0, r0, r4, lsr r0
 240:	000013a8 	andeq	r1, r0, r8, lsr #7
 244:	00000018 	andeq	r0, r0, r8, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000030 	andeq	r0, r0, r0, lsr r0
        ser_outf(Initial, "Enter your name: ");
 250:	00000000 	andeq	r0, r0, r0
 254:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_in(Get_Name, username, NAME_LENGTH);
 258:	000013c0 	andeq	r1, r0, r0, asr #7
 25c:	0000013c 	andeq	r0, r0, ip, lsr r1
        runfsm blinker;
 260:	00000000 	andeq	r0, r0, r0
 264:	00000024 	andeq	r0, r0, r4, lsr #32
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
 270:	00000104 	andeq	r0, r0, r4, lsl #2
        ser_inf(Get_Choice, "%c", &choice);
 274:	2e9b0002 	cdpcs	0, 9, cr0, cr11, cr2, {0}
 278:	00040000 	andeq	r0, r4, r0
	...
        if (choice == 'A' || choice == 'a'){
 284:	00000016 	andeq	r0, r0, r6, lsl r0
            proceed Adjust_Intervals;
 288:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
 28c:	0000001a 	andeq	r0, r0, sl, lsl r0
        proceed Show_Menu;
 290:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 294:	0000000e 	andeq	r0, r0, lr
 298:	00000000 	andeq	r0, r0, r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 29c:	0000004c 	andeq	r0, r0, ip, asr #32
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	0000008c 	andeq	r0, r0, ip, lsl #1
        processSettingsInput(settings);
 2a8:	00000000 	andeq	r0, r0, r0
        On = YES;
 2ac:	00000070 	andeq	r0, r0, r0, ror r0
 2b0:	00000000 	andeq	r0, r0, r0
        trigger(&On);
 2b4:	000000c0 	andeq	r0, r0, r0, asr #1
        proceed Show_Menu;
 2b8:	00000000 	andeq	r0, r0, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 2bc:	0000006c 	andeq	r0, r0, ip, rrx
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000080 	andeq	r0, r0, r0, lsl #1
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000070 	andeq	r0, r0, r0, ror r0
        proceed Show_Menu;
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000078 	andeq	r0, r0, r8, ror r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	000000bc 	strheq	r0, [r0], -ip
        displayCycle = YES;
 2e8:	00000000 	andeq	r0, r0, r0
        ser_inf(Await_Stop, "%c", &ch);
 2ec:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	00000038 	andeq	r0, r0, r8, lsr r0
        if(ch == 'S' || ch == 's'){
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000000a 	andeq	r0, r0, sl
 300:	00000000 	andeq	r0, r0, r0
            displayCycle = NO;
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
 308:	00000000 	andeq	r0, r0, r0
            proceed Show_Menu;
 30c:	00000060 	andeq	r0, r0, r0, rrx
        proceed Monitor;
 310:	00000000 	andeq	r0, r0, r0
 314:	00000040 	andeq	r0, r0, r0, asr #32
 318:	00000000 	andeq	r0, r0, r0
        leds(1, 0);
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00000000 	andeq	r0, r0, r0
 324:	0000003c 	andeq	r0, r0, ip, lsr r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	00000006 	andeq	r0, r0, r6
        leds(0, 0);
 330:	00000000 	andeq	r0, r0, r0
 334:	00000068 	andeq	r0, r0, r8, rrx
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000050 	andeq	r0, r0, r0, asr r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000009c 	muleq	r0, ip, r0
        } else if (choice == 'S' || choice == 's') {
 348:	00000000 	andeq	r0, r0, r0
            proceed Stop;
 34c:	00000040 	andeq	r0, r0, r0, asr #32
        } else if (choice == 'V' || choice == 'v') {
 350:	00000000 	andeq	r0, r0, r0
            proceed View_Settings;
 354:	00000034 	andeq	r0, r0, r4, lsr r0
        } else if (choice == 'M' || choice == 'm') {
 358:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
 35c:	0000003c 	andeq	r0, r0, ip, lsr r0
 360:	00000000 	andeq	r0, r0, r0
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	000014fc 	strdeq	r1, [r0], -ip
 36c:	00000002 	andeq	r0, r0, r2
	...
 378:	00000034 	andeq	r0, r0, r4, lsr r0
 37c:	41d20002 	bicsmi	r0, r2, r2
 380:	00040000 	andeq	r0, r4, r0
 384:	00000000 	andeq	r0, r0, r0
 388:	000014fe 	strdeq	r1, [r0], -lr
 38c:	00000002 	andeq	r0, r0, r2
 390:	00001500 	andeq	r1, r0, r0, lsl #10
 394:	00000002 	andeq	r0, r0, r2
 398:	00001502 	andeq	r1, r0, r2, lsl #10
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	00001504 	andeq	r1, r0, r4, lsl #10
static void devinit_uart (int devnum) {
 3a4:	00000044 	andeq	r0, r0, r4, asr #32
	...
void udelay (volatile word n) {
 3b0:	00000014 	andeq	r0, r0, r4, lsl r0
 3b4:	434a0002 	movtmi	r0, #40962	; 0xa002
	while (n) {
 3b8:	00040000 	andeq	r0, r4, r0
	...
	while (n--);
 3c8:	00000024 	andeq	r0, r0, r4, lsr #32
 3cc:	48850002 	stmmi	r5, {r1}
		n--;
 3d0:	00040000 	andeq	r0, r4, r0
	...
void mdelay (volatile word n) {
 3dc:	00000002 	andeq	r0, r0, r2
 3e0:	00000000 	andeq	r0, r0, r0
	while (n) {
 3e4:	00000058 	andeq	r0, r0, r8, asr r0
	...
		udelay (999);
 3f0:	00000024 	andeq	r0, r0, r4, lsr #32
 3f4:	4d890002 	stcmi	0, cr0, [r9, #8]
		n--;
 3f8:	00040000 	andeq	r0, r4, r0
	...
 404:	000000cc 	andeq	r0, r0, ip, asr #1
void __pi_ondomain (lword d) {
 408:	00000000 	andeq	r0, r0, r0
 40c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
			__pi_systat.effpdm = 1;
 418:	0000008c 	andeq	r0, r0, ip, lsl #1
	PRCMPowerDomainOn (d);
 41c:	52830002 	addpl	r0, r3, #2
 420:	00040000 	andeq	r0, r4, r0
 424:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 428:	00001550 	andeq	r1, r0, r0, asr r5
 42c:	00000034 	andeq	r0, r0, r4, lsr r0
 430:	00001584 	andeq	r1, r0, r4, lsl #11
	__pi_systat.ondmns |= d;
 434:	00000030 	andeq	r0, r0, r0, lsr r0
 438:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
}
 43c:	00000018 	andeq	r0, r0, r8, lsl r0
 440:	000015cc 	andeq	r1, r0, ip, asr #11
void __pi_syserror (word ec, const char *m) {
 444:	00000054 	andeq	r0, r0, r4, asr r0
	diag ("SYSERR: %x, %s", ec, m);
 448:	00001620 	andeq	r1, r0, r0, lsr #12
 44c:	00000040 	andeq	r0, r0, r0, asr #32
  __ASM volatile ("cpsid i" : : : "memory");
 450:	00001660 	andeq	r1, r0, r0, ror #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 454:	00000024 	andeq	r0, r0, r4, lsr #32
 458:	00001684 	andeq	r1, r0, r4, lsl #13
 45c:	00000014 	andeq	r0, r0, r4, lsl r0
		all_leds_blink;
 460:	00001698 	muleq	r0, r8, r6
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000064 	andeq	r0, r0, r4, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 470:	00000000 	andeq	r0, r0, r0
 474:	00000128 	andeq	r0, r0, r8, lsr #2
 478:	00000000 	andeq	r0, r0, r0
 47c:	000000ec 	andeq	r0, r0, ip, ror #1
 480:	00000000 	andeq	r0, r0, r0
 484:	00000002 	andeq	r0, r0, r2
	while (1) {
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000004 	andeq	r0, r0, r4
 490:	00000000 	andeq	r0, r0, r0
 494:	00000014 	andeq	r0, r0, r4, lsl r0
void tci_run_delay_timer () {
 498:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
 49c:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 4ac:	5d2e0002 	stcpl	0, cr0, [lr, #-8]!
 4b0:	00040000 	andeq	r0, r4, r0
 4b4:	00000000 	andeq	r0, r0, r0
 4b8:	000016ac 	andeq	r1, r0, ip, lsr #13
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 4bc:	00000078 	andeq	r0, r0, r8, ror r0
	...
}
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	61440002 	cmpvs	r4, r2
 4d0:	00040000 	andeq	r0, r4, r0
 4d4:	00000000 	andeq	r0, r0, r0
	cli_aux;
 4d8:	00001724 	andeq	r1, r0, r4, lsr #14
 4dc:	00000054 	andeq	r0, r0, r4, asr r0
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	65940002 	ldrvs	r0, [r4, #2]
	sti_aux;
 4f0:	00040000 	andeq	r0, r4, r0
}
 4f4:	00000000 	andeq	r0, r0, r0
 4f8:	00001778 	andeq	r1, r0, r8, ror r7
 4fc:	00000060 	andeq	r0, r0, r0, rrx
	...
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 50c:	69e40002 	stmibvs	r4!, {r1}^
		if (__pi_utims [0] == 0)
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [0])) {
 518:	000017d8 	ldrdeq	r1, [r0], -r8
 51c:	00000070 	andeq	r0, r0, r0, ror r0
	...
		if (*(__pi_utims [1])) {
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
			aux_timer_inactive = 0;
 52c:	6e150002 	cdpvs	0, 1, cr0, cr5, cr2, {0}
			(*(__pi_utims [1]))--;
 530:	00040000 	andeq	r0, r4, r0
		if (__pi_utims [2] == 0)
 534:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
 538:	00001848 	andeq	r1, r0, r8, asr #16
			(*(__pi_utims [2]))--;
 53c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
				aux_timer_inactive = 0;
 548:	0000002c 	andeq	r0, r0, ip, lsr #32
				(*(__pi_utims [3]))--;
 54c:	72590002 	subsvc	r0, r9, #2
	if (__pi_systat.ledsts) {
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
 558:	00001964 	andeq	r1, r0, r4, ror #18
 55c:	00000020 	andeq	r0, r0, r0, lsr #32
			if (__pi_systat.ledblk) {
 560:	00001984 	andeq	r1, r0, r4, lsl #19
 564:	00000230 	andeq	r0, r0, r0, lsr r2
 568:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 56c:	00000050 	andeq	r0, r0, r0, asr r0
	...
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	784d0002 	stmdavc	sp, {r1}^
				if (__pi_systat.ledsts & 0x4)
 580:	00040000 	andeq	r0, r4, r0
				__pi_systat.ledblk = 0;
 584:	00000000 	andeq	r0, r0, r0
 588:	00001c04 	andeq	r1, r0, r4, lsl #24
			if (__pi_systat.fstblk)
 58c:	00000390 	muleq	r0, r0, r3
	...
	if (events & AON_RTC_EVFLAGS_CH0) {
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
		cli_tim;
 59c:	7de00002 	stclvc	0, cr0, [r0, #8]!
		__pi_new += setdel;
 5a0:	00040000 	andeq	r0, r4, r0
 5a4:	00000000 	andeq	r0, r0, r0
		setdel = 0;
 5a8:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
		RISE_N_SHINE;
 5ac:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 5b8:	00000024 	andeq	r0, r0, r4, lsr #32
		aux_timer_inactive = 1;
 5bc:	7eb90002 	cdpvc	0, 11, cr0, cr9, cr2, {0}
 5c0:	00040000 	andeq	r0, r4, r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 5cc:	00000020 	andeq	r0, r0, r0, lsr #32
				if (__pi_systat.ledsts & 0x2)
 5d0:	00001fc4 	andeq	r1, r0, r4, asr #31
 5d4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
				__pi_systat.ledblk = 1;
 5e0:	0000003c 	andeq	r0, r0, ip, lsr r0
 5e4:	80000002 	andhi	r0, r0, r2
		if (aux_timer_inactive) {
 5e8:	00040000 	andeq	r0, r4, r0
			cli_aux;
 5ec:	00000000 	andeq	r0, r0, r0
 5f0:	00001fdc 	ldrdeq	r1, [r0], -ip
 5f4:	00000008 	andeq	r0, r0, r8
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	00000006 	andeq	r0, r0, r6
 600:	00001fe4 	andeq	r1, r0, r4, ror #31
 604:	00000008 	andeq	r0, r0, r8
 608:	00000000 	andeq	r0, r0, r0
 60c:	00000006 	andeq	r0, r0, r6
 610:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
 614:	00000008 	andeq	r0, r0, r8
	...
	if (setdel) {
 620:	00000024 	andeq	r0, r0, r4, lsr #32
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 624:	813a0002 	teqhi	sl, r2
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 628:	00040000 	andeq	r0, r4, r0
 62c:	00000000 	andeq	r0, r0, r0
 630:	00001fec 	andeq	r1, r0, ip, ror #31
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 634:	000000d4 	ldrdeq	r0, [r0], -r4
				AON_RTC_O_CH0CMP)) - gettav ());
 638:	000020c0 	andeq	r2, r0, r0, asr #1
	return NO;
 63c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 648:	000000b4 	strheq	r0, [r0], -r4
}
 64c:	83450002 	movthi	r0, #20482	; 0x5002
		sti_tim;
 650:	00040000 	andeq	r0, r4, r0
		return YES;
 654:	00000000 	andeq	r0, r0, r0
 658:	00002164 	andeq	r2, r0, r4, ror #2
 65c:	0000007c 	andeq	r0, r0, ip, ror r0
 660:	000021e0 	andeq	r2, r0, r0, ror #3
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 664:	000000ac 	andeq	r0, r0, ip, lsr #1
	UARTDisable (UART0_BASE);
 668:	0000228c 	andeq	r2, r0, ip, lsl #5
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 66c:	0000005c 	andeq	r0, r0, ip, asr r0
	UARTDisable (UART0_BASE);
 670:	000022e8 	andeq	r2, r0, r8, ror #5
	UARTConfigSetExpClk (UART0_BASE,
 674:	00000018 	andeq	r0, r0, r8, lsl r0
 678:	00000000 	andeq	r0, r0, r0
 67c:	00000010 	andeq	r0, r0, r0, lsl r0
 680:	00002300 	andeq	r2, r0, r0, lsl #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 684:	00000010 	andeq	r0, r0, r0, lsl r0
 688:	00002310 	andeq	r2, r0, r0, lsl r3
 68c:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 690:	00002324 	andeq	r2, r0, r4, lsr #6
 694:	00000064 	andeq	r0, r0, r4, rrx
 698:	00002388 	andeq	r2, r0, r8, lsl #7
	urates [0] = rate;
 69c:	00000014 	andeq	r0, r0, r4, lsl r0
}
 6a0:	0000239c 	muleq	r0, ip, r3
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
 6b0:	000023c4 	andeq	r2, r0, r4, asr #7
 6b4:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 6b8:	000023ec 	andeq	r2, r0, ip, ror #7
 6bc:	00000010 	andeq	r0, r0, r0, lsl r0
 6c0:	000023fc 	strdeq	r2, [r0], -ip
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 6c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 6c8:	00002428 	andeq	r2, r0, r8, lsr #8
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
 6d0:	0000243c 	andeq	r2, r0, ip, lsr r4
	__pi_uart_setrate (urates [0], __pi_uart);
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	00002450 	andeq	r2, r0, r0, asr r4
 6dc:	00000110 	andeq	r0, r0, r0, lsl r1
 6e0:	00002560 	andeq	r2, r0, r0, ror #10
 6e4:	00000064 	andeq	r0, r0, r4, rrx
 6e8:	000025c4 	andeq	r2, r0, r4, asr #11
 6ec:	00000028 	andeq	r0, r0, r8, lsr #32
	switch (operation) {
 6f0:	000025ec 	andeq	r2, r0, ip, ror #11
static int ioreq_uart_a (int operation, char *buf, int len) {
 6f4:	00000150 	andeq	r0, r0, r0, asr r1
	...
 700:	0000003c 	andeq	r0, r0, ip, lsr r0
 704:	8e600002 	cdphi	0, 6, cr0, cr0, cr2, {0}
				*buf++ = uart_a_read;
 708:	00040000 	andeq	r0, r4, r0
	...
			while (len && uart_a_char_available) {
 714:	000000f4 	strdeq	r0, [r0], -r4
 718:	0000273c 	andeq	r2, r0, ip, lsr r7
			if (len != operation) {
 71c:	00000220 	andeq	r0, r0, r0, lsr #4
}
 720:	0000295c 	andeq	r2, r0, ip, asr r9
 724:	00000060 	andeq	r0, r0, r0, rrx
			uart_a_disable_int;
 728:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
 72c:	00000078 	andeq	r0, r0, r8, ror r0
				*buf++ = uart_a_read;
 730:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
			uart_a_disable_int;
 734:	00000018 	andeq	r0, r0, r8, lsl r0
	...
			if (uart_a_char_available) {
 740:	00000044 	andeq	r0, r0, r4, asr #32
				uart_a_enable_int;
 744:	97870002 	strls	r0, [r7, r2]
 748:	00040000 	andeq	r0, r4, r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 754:	00000010 	andeq	r0, r0, r0, lsl r0
			return -2;
 758:	00000000 	andeq	r0, r0, r0
 75c:	00000018 	andeq	r0, r0, r8, lsl r0
				uart_a_write (*buf);
 760:	000029d4 	ldrdeq	r2, [r0], -r4
 764:	0000004c 	andeq	r0, r0, ip, asr #32
			while (len && uart_a_room_in_tx) {
 768:	00000000 	andeq	r0, r0, r0
 76c:	00000030 	andeq	r0, r0, r0, lsr r0
 770:	00002a20 	andeq	r2, r0, r0, lsr #20
			if (len != operation) {
 774:	0000006c 	andeq	r0, r0, ip, rrx
			uart_a_disable_int;
 778:	00002a8c 	andeq	r2, r0, ip, lsl #21
 77c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
				uart_a_enable_int;
 788:	00000044 	andeq	r0, r0, r4, asr #32
 78c:	9b570002 	blls	15c079c <__ccfg+0x15a07f4>
				*buf++ = uart_a_read;
 790:	00040000 	andeq	r0, r4, r0
			if (uart_a_room_in_tx) {
 794:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
 798:	00002aa4 	andeq	r2, r0, r4, lsr #21
 79c:	00000028 	andeq	r0, r0, r8, lsr #32
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 7a0:	00002acc 	andeq	r2, r0, ip, asr #21
 7a4:	00000008 	andeq	r0, r0, r8
			uart_a_enable_int;
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	00000022 	andeq	r0, r0, r2, lsr #32
 7b0:	00000000 	andeq	r0, r0, r0
			return 0;
 7b4:	0000002e 	andeq	r0, r0, lr, lsr #32
			if (len == UART_CNTRL_SETRATE) {
 7b8:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
 7bc:	00000034 	andeq	r0, r0, r4, lsr r0
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000040 	andeq	r0, r0, r0, asr #32
	...
			if (len == UART_CNTRL_GETRATE) {
 7d0:	00000064 	andeq	r0, r0, r4, rrx
				return 1;
 7d4:	a1020002 	tstge	r2, r2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 7d8:	00040000 	andeq	r0, r4, r0
			syserror (ENOOPER, "uai");
 7dc:	00000000 	andeq	r0, r0, r0
 7e0:	00002ad4 	ldrdeq	r2, [r0], -r4
 7e4:	0000005c 	andeq	r0, r0, ip, asr r0
 7e8:	00002b30 	andeq	r2, r0, r0, lsr fp
 7ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	00000090 	muleq	r0, r0, r0
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 800:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
 804:	00000060 	andeq	r0, r0, r0, rrx
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000034 	andeq	r0, r0, r4, lsr r0
 810:	00000000 	andeq	r0, r0, r0
 814:	00000038 	andeq	r0, r0, r8, lsr r0
 818:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 81c:	0000000c 	andeq	r0, r0, ip
 820:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 824:	00000034 	andeq	r0, r0, r4, lsr r0
 828:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, READ));
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
       4:	000000fa 	strdeq	r0, [r0], -sl
       8:	00000176 	andeq	r0, r0, r6, ror r1
       c:	00000188 	andeq	r0, r0, r8, lsl #3
      10:	0000018c 	andeq	r0, r0, ip, lsl #3
      14:	000001c8 	andeq	r0, r0, r8, asr #3
	...
      20:	000001c8 	andeq	r0, r0, r8, asr #3
      24:	000001c8 	andeq	r0, r0, r8, asr #3
      28:	000001d2 	ldrdeq	r0, [r0], -r2
      2c:	000001ec 	andeq	r0, r0, ip, ror #3
      30:	00000210 	andeq	r0, r0, r0, lsl r2
      34:	00000234 	andeq	r0, r0, r4, lsr r2
	...
			i = k;
      40:	0000024e 	andeq	r0, r0, lr, asr #4
				j->Next = k;
      44:	00000340 	andeq	r0, r0, r0, asr #6
      48:	00000346 	andeq	r0, r0, r6, asr #6
}
      4c:	00000362 	andeq	r0, r0, r2, ror #6
	...
		release;
      58:	00000272 	andeq	r0, r0, r2, ror r2
      5c:	00000294 	muleq	r0, r4, r2
      60:	00000346 	andeq	r0, r0, r6, asr #6
      64:	0000035e 	andeq	r0, r0, lr, asr r3
	...
      70:	0000032a 	andeq	r0, r0, sl, lsr #6
      74:	0000032c 	andeq	r0, r0, ip, lsr #6
      78:	0000032e 	andeq	r0, r0, lr, lsr #6
      7c:	00000330 	andeq	r0, r0, r0, lsr r3
	...
      88:	000000c8 	andeq	r0, r0, r8, asr #1
      8c:	000001c8 	andeq	r0, r0, r8, asr #3
	descriptors [fd] = s;
      90:	000001c8 	andeq	r0, r0, r8, asr #3
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00000234 	andeq	r0, r0, r4, lsr r2
      98:	00000234 	andeq	r0, r0, r4, lsr r2
	if (s == NULL)
      9c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
		syserror (EMALLOC, "tcv05");
      a8:	00000452 	andeq	r0, r0, r2, asr r4
      ac:	00000458 	andeq	r0, r0, r8, asr r4
      b0:	00000458 	andeq	r0, r0, r8, asr r4
      b4:	00000458 	andeq	r0, r0, r8, asr r4
      b8:	0000045c 	andeq	r0, r0, ip, asr r4
      bc:	0000045e 	andeq	r0, r0, lr, asr r4
	...
      c8:	00000458 	andeq	r0, r0, r8, asr r4
      cc:	0000045a 	andeq	r0, r0, sl, asr r4
      d0:	0000045e 	andeq	r0, r0, lr, asr r4
      d4:	00000460 	andeq	r0, r0, r0, ror #8
	...
      e0:	00000470 	andeq	r0, r0, r0, ror r4
      e4:	00000472 	andeq	r0, r0, r2, ror r4
      e8:	00000474 	andeq	r0, r0, r4, ror r4
      ec:	00000476 	andeq	r0, r0, r6, ror r4
	...
            delay(offTime, Check_PERIOD);
      f8:	000004aa 	andeq	r0, r0, sl, lsr #9
        if(ledFlag == 0) {
      fc:	000004ae 	andeq	r0, r0, lr, lsr #9
     100:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     104:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
            led = redLed;
     108:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
            onTime = redOn;
     10c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
	...
            offTime = greenOff;
     118:	000004e0 	andeq	r0, r0, r0, ror #9
        if(On)
     11c:	000004e6 	andeq	r0, r0, r6, ror #9
     120:	000004e8 	andeq	r0, r0, r8, ror #9
            leds(led,1);
     124:	000004ee 	andeq	r0, r0, lr, ror #9
	...
            leds(led,0);
     130:	00000510 	andeq	r0, r0, r0, lsl r5
     134:	00000596 	muleq	r0, r6, r5
     138:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
        if(onTime > 0)
     13c:	00000614 	andeq	r0, r0, r4, lsl r6
	...
        when(&On, Check_PERIOD);
     148:	00000684 	andeq	r0, r0, r4, lsl #13
        release;
     14c:	00000686 	andeq	r0, r0, r6, lsl #13
            led = greenLed;
     150:	00000688 	andeq	r0, r0, r8, lsl #13
     154:	0000069c 	muleq	r0, ip, r6
	...
            leds(led,0);
     160:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
     164:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
     168:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     16c:	000006c4 	andeq	r0, r0, r4, asr #13
	...
        leds(led,0);
     178:	00000800 	andeq	r0, r0, r0, lsl #16
     17c:	00000804 	andeq	r0, r0, r4, lsl #16
     180:	00000806 	andeq	r0, r0, r6, lsl #16
     184:	00000808 	andeq	r0, r0, r8, lsl #16
}
     188:	0000080a 	andeq	r0, r0, sl, lsl #16
     18c:	0000080c 	andeq	r0, r0, ip, lsl #16
	...
     198:	00000868 	andeq	r0, r0, r8, ror #16
     19c:	0000086c 	andeq	r0, r0, ip, ror #16
     1a0:	0000087e 	andeq	r0, r0, lr, ror r8
     1a4:	000008aa 	andeq	r0, r0, sl, lsr #17
	...
     1b0:	000008c0 	andeq	r0, r0, r0, asr #17
     1b4:	000008c0 	andeq	r0, r0, r0, asr #17
     1b8:	000008c2 	andeq	r0, r0, r2, asr #17
     1bc:	000008c4 	andeq	r0, r0, r4, asr #17
	...
    word number = 0;
     1c8:	000008c4 	andeq	r0, r0, r4, asr #17
    int numbersIndex = 0;
     1cc:	000008c6 	andeq	r0, r0, r6, asr #17
     1d0:	000008c8 	andeq	r0, r0, r8, asr #17
        if(settingsInput[i] == ' ') {
     1d4:	000008ca 	andeq	r0, r0, sl, asr #17
     1d8:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
            numbers[numbersIndex] = number;
     1dc:	000008d6 	ldrdeq	r0, [r0], -r6
     1e0:	000008e0 	andeq	r0, r0, r0, ror #17
            number = 0;
     1e4:	000008e2 	andeq	r0, r0, r2, ror #17
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	000008ee 	andeq	r0, r0, lr, ror #17
    redOn = numbers[0];
     1ec:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
    redOff = numbers[1];
     1f8:	00000904 	andeq	r0, r0, r4, lsl #18
    greenOn = numbers[2];
     1fc:	00000904 	andeq	r0, r0, r4, lsl #18
     200:	00000906 	andeq	r0, r0, r6, lsl #18
    greenOff = numbers[3];
     204:	00000908 	andeq	r0, r0, r8, lsl #18
	...
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	0000090a 	andeq	r0, r0, sl, lsl #18
     214:	0000090c 	andeq	r0, r0, ip, lsl #18
            number = number * 10;
     218:	0000090e 	andeq	r0, r0, lr, lsl #18
            number += settingsInput[i] - 48;
     21c:	00000910 	andeq	r0, r0, r0, lsl r9
     220:	0000091a 	andeq	r0, r0, sl, lsl r9
     224:	0000091e 	andeq	r0, r0, lr, lsl r9
     228:	00000928 	andeq	r0, r0, r8, lsr #18
     22c:	0000092a 	andeq	r0, r0, sl, lsr #18
	...
fsm root {
     238:	00000a0e 	andeq	r0, r0, lr, lsl #20
     23c:	00000a10 	andeq	r0, r0, r0, lsl sl
     240:	00000a12 	andeq	r0, r0, r2, lsl sl
     244:	00000a16 	andeq	r0, r0, r6, lsl sl
     248:	00000a26 	andeq	r0, r0, r6, lsr #20
     24c:	00000a28 	andeq	r0, r0, r8, lsr #20
	...
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	00000a10 	andeq	r0, r0, r0, lsl sl
     25c:	00000a12 	andeq	r0, r0, r2, lsl sl
        runfsm blinker;
     260:	00000a16 	andeq	r0, r0, r6, lsl sl
     264:	00000a26 	andeq	r0, r0, r6, lsr #20
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	00000a28 	andeq	r0, r0, r8, lsr #20
     26c:	00000a62 	andeq	r0, r0, r2, ror #20
	...
        ser_inf(Get_Choice, "%c", &choice);
     278:	00000a1a 	andeq	r0, r0, sl, lsl sl
        if (choice == 'A' || choice == 'a'){
     27c:	00000a1e 	andeq	r0, r0, lr, lsl sl
     280:	00000a46 	andeq	r0, r0, r6, asr #20
     284:	00000a4e 	andeq	r0, r0, lr, asr #20
	...
        proceed Show_Menu;
     290:	00000a1e 	andeq	r0, r0, lr, lsl sl
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	00000a22 	andeq	r0, r0, r2, lsr #20
     298:	00000a5a 	andeq	r0, r0, sl, asr sl
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	00000a5e 	andeq	r0, r0, lr, asr sl
	...
        processSettingsInput(settings);
     2a8:	00000a22 	andeq	r0, r0, r2, lsr #20
        On = YES;
     2ac:	00000a26 	andeq	r0, r0, r6, lsr #20
     2b0:	00000a54 	andeq	r0, r0, r4, asr sl
        trigger(&On);
     2b4:	00000a5a 	andeq	r0, r0, sl, asr sl
	...
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2c0:	00000a62 	andeq	r0, r0, r2, ror #20
     2c4:	00000a64 	andeq	r0, r0, r4, ror #20
     2c8:	00000a66 	andeq	r0, r0, r6, ror #20
     2cc:	00000a68 	andeq	r0, r0, r8, ror #20
     2d0:	00000a6a 	andeq	r0, r0, sl, ror #20
     2d4:	00000a6c 	andeq	r0, r0, ip, ror #20
	...
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	00000a64 	andeq	r0, r0, r4, ror #20
     2e4:	00000a66 	andeq	r0, r0, r6, ror #20
        displayCycle = YES;
     2e8:	00000a6c 	andeq	r0, r0, ip, ror #20
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	00000a6e 	andeq	r0, r0, lr, ror #20
	...
        if(ch == 'S' || ch == 's'){
     2f8:	00000a7e 	andeq	r0, r0, lr, ror sl
     2fc:	00000a80 	andeq	r0, r0, r0, lsl #21
     300:	00000a82 	andeq	r0, r0, r2, lsl #21
            displayCycle = NO;
     304:	00000a84 	andeq	r0, r0, r4, lsl #21
	...
        proceed Monitor;
     310:	00000a96 	muleq	r0, r6, sl
     314:	00000a98 	muleq	r0, r8, sl
     318:	00000a9a 	muleq	r0, sl, sl
        leds(1, 0);
     31c:	00000a9c 	muleq	r0, ip, sl
	...
     328:	00000ade 	ldrdeq	r0, [r0], -lr
     32c:	00000ade 	ldrdeq	r0, [r0], -lr
        leds(0, 0);
     330:	00000ae2 	andeq	r0, r0, r2, ror #21
     334:	00000ae4 	andeq	r0, r0, r4, ror #21
	...
     340:	00000b14 	andeq	r0, r0, r4, lsl fp
     344:	00000b16 	andeq	r0, r0, r6, lsl fp
        } else if (choice == 'S' || choice == 's') {
     348:	00000b18 	andeq	r0, r0, r8, lsl fp
            proceed Stop;
     34c:	00000b20 	andeq	r0, r0, r0, lsr #22
	...
        } else if (choice == 'M' || choice == 'm') {
     358:	00000b9c 	muleq	r0, ip, fp
            proceed Monitor;
     35c:	00000b9c 	muleq	r0, ip, fp
     360:	00000ba2 	andeq	r0, r0, r2, lsr #23
     364:	00000ba4 	andeq	r0, r0, r4, lsr #23
     368:	00000ba6 	andeq	r0, r0, r6, lsr #23
     36c:	00000baa 	andeq	r0, r0, sl, lsr #23
	...
     378:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
     37c:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
     380:	00000bce 	andeq	r0, r0, lr, asr #23
     384:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     388:	00000be2 	andeq	r0, r0, r2, ror #23
     38c:	00000bfe 	strdeq	r0, [r0], -lr
     390:	00000c22 	andeq	r0, r0, r2, lsr #24
     394:	00000d7c 	andeq	r0, r0, ip, ror sp
	...
     3a0:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
static void devinit_uart (int devnum) {
     3a4:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	00000c56 	andeq	r0, r0, r6, asr ip
     3ac:	00000c5a 	andeq	r0, r0, sl, asr ip
	...
	while (n) {
     3b8:	00000c5a 	andeq	r0, r0, sl, asr ip
     3bc:	00000c5a 	andeq	r0, r0, sl, asr ip
}
     3c0:	00000c5e 	andeq	r0, r0, lr, asr ip
	while (n--);
     3c4:	00000c62 	andeq	r0, r0, r2, ror #24
     3c8:	00000c66 	andeq	r0, r0, r6, ror #24
     3cc:	00000c68 	andeq	r0, r0, r8, ror #24
	...
		n--;
     3d8:	00000c5a 	andeq	r0, r0, sl, asr ip
void mdelay (volatile word n) {
     3dc:	00000c5e 	andeq	r0, r0, lr, asr ip
     3e0:	00000c74 	andeq	r0, r0, r4, ror ip
	while (n) {
     3e4:	00000c76 	andeq	r0, r0, r6, ror ip
     3e8:	00000c7a 	andeq	r0, r0, sl, ror ip
}
     3ec:	00000c7e 	andeq	r0, r0, lr, ror ip
	...
		n--;
     3f8:	00000c62 	andeq	r0, r0, r2, ror #24
     3fc:	00000c66 	andeq	r0, r0, r6, ror #24
     400:	00000c68 	andeq	r0, r0, r8, ror #24
     404:	00000c6a 	andeq	r0, r0, sl, ror #24
void __pi_ondomain (lword d) {
     408:	00000c6e 	andeq	r0, r0, lr, ror #24
     40c:	00000c72 	andeq	r0, r0, r2, ror ip
	...
			__pi_systat.effpdm = 1;
     418:	00000c76 	andeq	r0, r0, r6, ror ip
	PRCMPowerDomainOn (d);
     41c:	00000c7a 	andeq	r0, r0, sl, ror ip
     420:	00000c94 	muleq	r0, r4, ip
     424:	00000c98 	muleq	r0, r8, ip
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	00000c9a 	muleq	r0, sl, ip
     42c:	00000ca2 	andeq	r0, r0, r2, lsr #25
	...
	__pi_systat.ondmns |= d;
     438:	00000c8c 	andeq	r0, r0, ip, lsl #25
}
     43c:	00000c8e 	andeq	r0, r0, lr, lsl #25
     440:	00000c90 	muleq	r0, r0, ip
void __pi_syserror (word ec, const char *m) {
     444:	00000c94 	muleq	r0, r4, ip
	...
     450:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	00000cd4 	ldrdeq	r0, [r0], -r4
     458:	00000cd6 	ldrdeq	r0, [r0], -r6
     45c:	00000cde 	ldrdeq	r0, [r0], -lr
	...
		all_leds_blink;
     468:	00000cd4 	ldrdeq	r0, [r0], -r4
     46c:	00000cd6 	ldrdeq	r0, [r0], -r6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	00000ce2 	andeq	r0, r0, r2, ror #25
     474:	00000ce4 	andeq	r0, r0, r4, ror #25
	...
     480:	00000d02 	andeq	r0, r0, r2, lsl #26
     484:	00000d04 	andeq	r0, r0, r4, lsl #26
	while (1) {
     488:	00000d06 	andeq	r0, r0, r6, lsl #26
     48c:	00000d08 	andeq	r0, r0, r8, lsl #26
	...
void tci_run_delay_timer () {
     498:	00000d04 	andeq	r0, r0, r4, lsl #26
	setdel = __pi_mintk - __pi_old;
     49c:	00000d06 	andeq	r0, r0, r6, lsl #26
     4a0:	00000d08 	andeq	r0, r0, r8, lsl #26
     4a4:	00000d0c 	andeq	r0, r0, ip, lsl #26
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4b0:	00000d62 	andeq	r0, r0, r2, ror #26
     4b4:	00000d64 	andeq	r0, r0, r4, ror #26
     4b8:	00000d64 	andeq	r0, r0, r4, ror #26
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	00000d66 	andeq	r0, r0, r6, ror #26
	...
}
     4c8:	00000d6a 	andeq	r0, r0, sl, ror #26
     4cc:	00000d6e 	andeq	r0, r0, lr, ror #26
     4d0:	00000d70 	andeq	r0, r0, r0, ror sp
     4d4:	00000d72 	andeq	r0, r0, r2, ror sp
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	00000001 	andeq	r0, r0, r1
     4e4:	00000001 	andeq	r0, r0, r1
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	00000001 	andeq	r0, r0, r1
	...
}
     4f8:	00000df4 	strdeq	r0, [r0], -r4
     4fc:	00000df4 	strdeq	r0, [r0], -r4
void AONRTCIntHandler () {
     500:	00000df8 	strdeq	r0, [r0], -r8
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	00000e04 	andeq	r0, r0, r4, lsl #28
	...
		if (__pi_utims [0] == 0)
     510:	000003a4 	andeq	r0, r0, r4, lsr #7
     514:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
		if (*(__pi_utims [0])) {
     518:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     51c:	000003dc 	ldrdeq	r0, [r0], -ip
			(*(__pi_utims [0]))--;
     520:	000003dc 	ldrdeq	r0, [r0], -ip
		if (__pi_utims [1] == 0)
     524:	00000406 	andeq	r0, r0, r6, lsl #8
		if (*(__pi_utims [1])) {
     528:	00000408 	andeq	r0, r0, r8, lsl #8
			aux_timer_inactive = 0;
     52c:	00000444 	andeq	r0, r0, r4, asr #8
			(*(__pi_utims [1]))--;
     530:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [2] == 0)
     534:	00000001 	andeq	r0, r0, r1
		if (*(__pi_utims [2])) {
     538:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [2]))--;
     53c:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [3] != 0) {
     540:	00000444 	andeq	r0, r0, r4, asr #8
			if (*(__pi_utims [3])) {
     544:	00000498 	muleq	r0, r8, r4
				aux_timer_inactive = 0;
     548:	00000498 	muleq	r0, r8, r4
				(*(__pi_utims [3]))--;
     54c:	000004d8 	ldrdeq	r0, [r0], -r8
	if (__pi_systat.ledsts) {
     550:	000004d8 	ldrdeq	r0, [r0], -r8
     554:	00000500 	andeq	r0, r0, r0, lsl #10
		if (__pi_systat.ledblc++ == 0) {
     558:	00000500 	andeq	r0, r0, r0, lsl #10
     55c:	00000614 	andeq	r0, r0, r4, lsl r6
			if (__pi_systat.ledblk) {
     560:	00000614 	andeq	r0, r0, r4, lsl r6
     564:	00000664 	andeq	r0, r0, r4, ror #12
     568:	00000664 	andeq	r0, r0, r4, ror #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
     570:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
				if (__pi_systat.ledsts & 0x2)
     574:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     578:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     57c:	00000800 	andeq	r0, r0, r0, lsl #16
				if (__pi_systat.ledsts & 0x4)
     580:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 0;
     584:	00000001 	andeq	r0, r0, r1
     588:	00000800 	andeq	r0, r0, r0, lsl #16
			if (__pi_systat.fstblk)
     58c:	000008c0 	andeq	r0, r0, r0, asr #17
     590:	000008c0 	andeq	r0, r0, r0, asr #17
				__pi_systat.ledblc = 200;
     594:	00000904 	andeq	r0, r0, r4, lsl #18
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	00000904 	andeq	r0, r0, r4, lsl #18
		cli_tim;
     59c:	00000940 	andeq	r0, r0, r0, asr #18
		__pi_new += setdel;
     5a0:	00000940 	andeq	r0, r0, r0, asr #18
     5a4:	000009e4 	andeq	r0, r0, r4, ror #19
		setdel = 0;
     5a8:	000009e4 	andeq	r0, r0, r4, ror #19
		RISE_N_SHINE;
     5ac:	00000b9c 	muleq	r0, ip, fp
		__pi_new += setdel;
     5b0:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     5b4:	00000001 	andeq	r0, r0, r1
     5b8:	00000001 	andeq	r0, r0, r1
		aux_timer_inactive = 1;
     5bc:	00000001 	andeq	r0, r0, r1
     5c0:	00000b9c 	muleq	r0, ip, fp
				if (__pi_systat.ledsts & 0x1)
     5c4:	00000df4 	strdeq	r0, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	00000001 	andeq	r0, r0, r1
     5cc:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x2)
     5d0:	00000001 	andeq	r0, r0, r1
     5d4:	00000001 	andeq	r0, r0, r1
     5d8:	00000df4 	strdeq	r0, [r0], -r4
				if (__pi_systat.ledsts & 0x8)
     5dc:	00000e54 	andeq	r0, r0, r4, asr lr
	...
		if (aux_timer_inactive) {
     5e8:	00000f10 	andeq	r0, r0, r0, lsl pc
			cli_aux;
     5ec:	00000f12 	andeq	r0, r0, r2, lsl pc
     5f0:	00000f12 	andeq	r0, r0, r2, lsl pc
     5f4:	00000f14 	andeq	r0, r0, r4, lsl pc
	...
     600:	00000f46 	andeq	r0, r0, r6, asr #30
     604:	00000fe8 	andeq	r0, r0, r8, ror #31
     608:	00000fec 	andeq	r0, r0, ip, ror #31
     60c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
	cli_tim;
     618:	00001384 	andeq	r1, r0, r4, lsl #7
     61c:	00001386 	andeq	r1, r0, r6, lsl #7
	if (setdel) {
     620:	0000138a 	andeq	r1, r0, sl, lsl #7
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	0000138c 	andeq	r1, r0, ip, lsl #7
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	00001390 	muleq	r0, r0, r3
     62c:	00001394 	muleq	r0, r4, r3
     630:	00001396 	muleq	r0, r6, r3
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     634:	000013a0 	andeq	r1, r0, r0, lsr #7
	...
			setdel = 0;
     640:	000013d2 	ldrdeq	r1, [r0], -r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	000013d4 	ldrdeq	r1, [r0], -r4
     648:	000013d6 	ldrdeq	r1, [r0], -r6
}
     64c:	000013da 	ldrdeq	r1, [r0], -sl
		sti_tim;
     650:	0000146a 	andeq	r1, r0, sl, ror #8
		return YES;
     654:	000014cc 	andeq	r1, r0, ip, asr #9
     658:	000014d0 	ldrdeq	r1, [r0], -r0
     65c:	000014d4 	ldrdeq	r1, [r0], -r4
     660:	000014d6 	ldrdeq	r1, [r0], -r6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	000014d8 	ldrdeq	r1, [r0], -r8
	...
	UARTDisable (UART0_BASE);
     670:	000013ee 	andeq	r1, r0, lr, ror #7
	UARTConfigSetExpClk (UART0_BASE,
     674:	000013f0 	strdeq	r1, [r0], -r0
     678:	000013f0 	strdeq	r1, [r0], -r0
     67c:	000013f2 	strdeq	r1, [r0], -r2
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     688:	00000e54 	andeq	r0, r0, r4, asr lr
     68c:	00000e90 	muleq	r0, r0, lr
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	00000e90 	muleq	r0, r0, lr
     694:	00000f10 	andeq	r0, r0, r0, lsl pc
     698:	00000f10 	andeq	r0, r0, r0, lsl pc
	urates [0] = rate;
     69c:	00000f28 	andeq	r0, r0, r8, lsr #30
}
     6a0:	00000001 	andeq	r0, r0, r1
     6a4:	00000001 	andeq	r0, r0, r1
     6a8:	00000f28 	andeq	r0, r0, r8, lsr #30
     6ac:	00000f38 	andeq	r0, r0, r8, lsr pc
     6b0:	00000001 	andeq	r0, r0, r1
     6b4:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	00000001 	andeq	r0, r0, r1
     6bc:	00000001 	andeq	r0, r0, r1
     6c0:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00000f38 	andeq	r0, r0, r8, lsr pc
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	00001004 	andeq	r1, r0, r4
     6d0:	00001004 	andeq	r1, r0, r4
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	00001018 	andeq	r1, r0, r8, lsl r0
     6d8:	00001018 	andeq	r1, r0, r8, lsl r0
     6dc:	0000104c 	andeq	r1, r0, ip, asr #32
     6e0:	0000104c 	andeq	r1, r0, ip, asr #32
     6e4:	00001080 	andeq	r1, r0, r0, lsl #1
     6e8:	00000001 	andeq	r0, r0, r1
     6ec:	00000001 	andeq	r0, r0, r1
	switch (operation) {
     6f0:	00001080 	andeq	r1, r0, r0, lsl #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	000010a4 	andeq	r1, r0, r4, lsr #1
     6f8:	000010a4 	andeq	r1, r0, r4, lsr #1
     6fc:	000010dc 	ldrdeq	r1, [r0], -ip
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     708:	00000001 	andeq	r0, r0, r1
     70c:	00000001 	andeq	r0, r0, r1
			while (len && uart_a_char_available) {
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	000010dc 	ldrdeq	r1, [r0], -ip
			if (len != operation) {
     71c:	00001100 	andeq	r1, r0, r0, lsl #2
}
     720:	00000001 	andeq	r0, r0, r1
     724:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     728:	00001100 	andeq	r1, r0, r0, lsl #2
			if (uart_a_char_available) {
     72c:	0000110e 	andeq	r1, r0, lr, lsl #2
				*buf++ = uart_a_read;
     730:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     734:	00000001 	andeq	r0, r0, r1
     738:	00000001 	andeq	r0, r0, r1
			if (uart_a_char_available) {
     73c:	00000001 	andeq	r0, r0, r1
     740:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
				goto Redo_rx;
     74c:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	0000110e 	andeq	r1, r0, lr, lsl #2
     754:	00001122 	andeq	r1, r0, r2, lsr #2
			return -2;
     758:	00000001 	andeq	r0, r0, r1
     75c:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     760:	00001124 	andeq	r1, r0, r4, lsr #2
     764:	00001148 	andeq	r1, r0, r8, asr #2
			while (len && uart_a_room_in_tx) {
     768:	00001148 	andeq	r1, r0, r8, asr #2
     76c:	000011e4 	andeq	r1, r0, r4, ror #3
     770:	000011e4 	andeq	r1, r0, r4, ror #3
			if (len != operation) {
     774:	00001234 	andeq	r1, r0, r4, lsr r2
			uart_a_disable_int;
     778:	00001234 	andeq	r1, r0, r4, lsr r2
     77c:	0000127c 	andeq	r1, r0, ip, ror r2
			if (uart_a_room_in_tx) {
     780:	0000127c 	andeq	r1, r0, ip, ror r2
     784:	000012cc 	andeq	r1, r0, ip, asr #5
				uart_a_enable_int;
     788:	00000001 	andeq	r0, r0, r1
     78c:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     790:	000012cc 	andeq	r1, r0, ip, asr #5
			if (uart_a_room_in_tx) {
     794:	00001374 	andeq	r1, r0, r4, ror r3
				uart_a_write (*buf);
     798:	00001374 	andeq	r1, r0, r4, ror r3
     79c:	000013a8 	andeq	r1, r0, r8, lsr #7
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7a0:	000013a8 	andeq	r1, r0, r8, lsr #7
     7a4:	000013c0 	andeq	r1, r0, r0, asr #7
			uart_a_enable_int;
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
     7b0:	00000001 	andeq	r0, r0, r1
			return 0;
     7b4:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     7b8:	000013c0 	andeq	r1, r0, r0, asr #7
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	000014fc 	strdeq	r1, [r0], -ip
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
	...
			if (len == UART_CNTRL_GETRATE) {
     7d0:	00000001 	andeq	r0, r0, r1
				return 1;
     7d4:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
	...
     7f0:	00000001 	andeq	r0, r0, r1
     7f4:	00000001 	andeq	r0, r0, r1
     7f8:	00000001 	andeq	r0, r0, r1
     7fc:	00000001 	andeq	r0, r0, r1
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	00000001 	andeq	r0, r0, r1
     820:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
     834:	00000001 	andeq	r0, r0, r1
     838:	00000001 	andeq	r0, r0, r1
     83c:	00000001 	andeq	r0, r0, r1
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     868:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
}
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
     8c0:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	00000001 	andeq	r0, r0, r1
     8c8:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	000014fc 	strdeq	r1, [r0], -ip
}
     8f4:	000014fe 	strdeq	r1, [r0], -lr
	...
     900:	000014fe 	strdeq	r1, [r0], -lr
void __pinlist_setirq (int val) {
     904:	00001500 	andeq	r1, r0, r0, lsl #10
	for (i = 0; i < N_PINLIST; i++) {
     908:	00001500 	andeq	r1, r0, r0, lsl #10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	00001502 	andeq	r1, r0, r2, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	00001502 	andeq	r1, r0, r2, lsl #10
	for (i = 0; i < N_PINLIST; i++) {
     914:	00001504 	andeq	r1, r0, r4, lsl #10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	00001504 	andeq	r1, r0, r4, lsl #10
     91c:	00001548 	andeq	r1, r0, r8, asr #10
	...
     928:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     92c:	00000001 	andeq	r0, r0, r1
}
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     940:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     944:	00000001 	andeq	r0, r0, r1
	...
	buttons_disable ();
     950:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     954:	00000001 	andeq	r0, r0, r1
     958:	00000001 	andeq	r0, r0, r1
     95c:	00000001 	andeq	r0, r0, r1
	...
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
	...
if (pin_sensor_int) {
     990:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     994:	00000001 	andeq	r0, r0, r1
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
	...
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00000001 	andeq	r0, r0, r1
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
	...
	RISE_N_SHINE;
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
}
     9d0:	00000001 	andeq	r0, r0, r1
     9d4:	00000001 	andeq	r0, r0, r1
	...
     9e0:	00001554 	andeq	r1, r0, r4, asr r5
void system_init () {
     9e4:	00001558 	andeq	r1, r0, r8, asr r5
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	0000155e 	andeq	r1, r0, lr, asr r5
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ec:	00001560 	andeq	r1, r0, r0, ror #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	0000156e 	andeq	r1, r0, lr, ror #10
     9f4:	0000156e 	andeq	r1, r0, lr, ror #10
     9f8:	00001570 	andeq	r1, r0, r0, ror r5
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	00001572 	andeq	r1, r0, r2, ror r5
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a08:	0000155a 	andeq	r1, r0, sl, asr r5
     a0c:	0000155c 	andeq	r1, r0, ip, asr r5
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	00001572 	andeq	r1, r0, r2, ror r5
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a14:	00001574 	andeq	r1, r0, r4, ror r5
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a20:	0000155c 	andeq	r1, r0, ip, asr r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a24:	0000155e 	andeq	r1, r0, lr, asr r5
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	00001560 	andeq	r1, r0, r0, ror #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	00001562 	andeq	r1, r0, r2, ror #10
		pin = (port_confs [i] >> 19) & 0x1f;
     a30:	00001568 	andeq	r1, r0, r8, ror #10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a34:	00001568 	andeq	r1, r0, r8, ror #10
	...
     a40:	0000158c 	andeq	r1, r0, ip, lsl #11
		if (port_confs [i] & 0x80)
     a44:	00001594 	muleq	r0, r4, r5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	0000159e 	muleq	r0, lr, r5
     a4c:	0000159e 	muleq	r0, lr, r5
		if (port_confs [i] & 0x40)
     a50:	000015a2 	andeq	r1, r0, r2, lsr #11
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	000015a4 	andeq	r1, r0, r4, lsr #11
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	000015a4 	andeq	r1, r0, r4, lsr #11
     a64:	000015a4 	andeq	r1, r0, r4, lsr #11
	all_leds_blink;
     a68:	000015a6 	andeq	r1, r0, r6, lsr #11
     a6c:	000015a8 	andeq	r1, r0, r8, lsr #11
	...
     a78:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     a7c:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
     a80:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a84:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
	...
     a90:	000015d4 	ldrdeq	r1, [r0], -r4
     a94:	000015d6 	ldrdeq	r1, [r0], -r6
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	000015da 	ldrdeq	r1, [r0], -sl
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	000015dc 	ldrdeq	r1, [r0], -ip
     aa0:	000015e2 	andeq	r1, r0, r2, ror #11
	IntEnable (INT_AON_RTC_COMB);
     aa4:	000015f2 	strdeq	r1, [r0], -r2
	...
	__pi_malloc_init ();
     ab0:	000015d4 	ldrdeq	r1, [r0], -r4
	IntEnable (INT_AON_GPIO_EDGE);
     ab4:	000015d6 	ldrdeq	r1, [r0], -r6
     ab8:	000015da 	ldrdeq	r1, [r0], -sl
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	000015dc 	ldrdeq	r1, [r0], -ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	000015e2 	andeq	r1, r0, r2, ror #11
     ac4:	000015e2 	andeq	r1, r0, r2, ror #11
     ac8:	000015e4 	andeq	r1, r0, r4, ror #11
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     acc:	000015e6 	andeq	r1, r0, r6, ror #11
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad8:	0000163a 	andeq	r1, r0, sl, lsr r6
     adc:	0000163e 	andeq	r1, r0, lr, lsr r6
	urates [0] = UART_RATE / 100;
     ae0:	00001640 	andeq	r1, r0, r0, asr #12
     ae4:	00001642 	andeq	r1, r0, r2, asr #12
	...
	EXTRA_INITIALIZERS;
     af0:	00001646 	andeq	r1, r0, r6, asr #12
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af4:	00001646 	andeq	r1, r0, r6, asr #12
     af8:	00001648 	andeq	r1, r0, r8, asr #12
     afc:	0000164a 	andeq	r1, r0, sl, asr #12
	...
     b08:	00000001 	andeq	r0, r0, r1
     b0c:	00000001 	andeq	r0, r0, r1
			devinit [i] . init (devinit [i] . param);
     b10:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_UART0_COMB);
     b20:	00000001 	andeq	r0, r0, r1
     b24:	00000001 	andeq	r0, r0, r1
}
     b28:	00000001 	andeq	r0, r0, r1
	tci_run_auxiliary_timer ();
     b2c:	00000001 	andeq	r0, r0, r1
	...
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	00000001 	andeq	r0, r0, r1
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	00000001 	andeq	r0, r0, r1
		diag ("Leftover RAM: %d bytes",
     b40:	00000001 	andeq	r0, r0, r1
     b44:	00000001 	andeq	r0, r0, r1
	...
     b50:	00000001 	andeq	r0, r0, r1
     b54:	00000001 	andeq	r0, r0, r1
     b58:	00000001 	andeq	r0, r0, r1
     b5c:	00000001 	andeq	r0, r0, r1
	...
     b68:	00001550 	andeq	r1, r0, r0, asr r5
     b6c:	00001584 	andeq	r1, r0, r4, lsl #11
     b70:	00001584 	andeq	r1, r0, r4, lsl #11
     b74:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     b78:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     b7c:	000015cc 	andeq	r1, r0, ip, asr #11
     b80:	000015cc 	andeq	r1, r0, ip, asr #11
     b84:	00001620 	andeq	r1, r0, r0, lsr #12
     b88:	00001620 	andeq	r1, r0, r0, lsr #12
     b8c:	00001660 	andeq	r1, r0, r0, ror #12
     b90:	00001660 	andeq	r1, r0, r0, ror #12
     b94:	00001684 	andeq	r1, r0, r4, lsl #13
     b98:	00001684 	andeq	r1, r0, r4, lsl #13
__attribute__ ((noreturn)) void __pi_release () {
     b9c:	00001698 	muleq	r0, r8, r6
     ba0:	00001698 	muleq	r0, r8, r6
     ba4:	000016ac 	andeq	r1, r0, ip, lsr #13
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba8:	00000001 	andeq	r0, r0, r1
	check_stack_overflow;
     bac:	00000001 	andeq	r0, r0, r1
     bb0:	00000001 	andeq	r0, r0, r1
     bb4:	00000001 	andeq	r0, r0, r1
	update_n_wake (MAX_WORD, NO);
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000001 	andeq	r0, r0, r1
	for_all_tasks (__pi_curr) {
     bc4:	00000001 	andeq	r0, r0, r1
     bc8:	00000001 	andeq	r0, r0, r1
     bcc:	00000001 	andeq	r0, r0, r1
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	00000001 	andeq	r0, r0, r1
	__SLEEP;
     bd4:	00000001 	andeq	r0, r0, r1
     bd8:	00000001 	andeq	r0, r0, r1
     bdc:	00000001 	andeq	r0, r0, r1
	...
	system_event_count ++;
     be8:	000016ac 	andeq	r1, r0, ip, lsr #13
	switch (__pi_systat.effpdm) {
     bec:	00001724 	andeq	r1, r0, r4, lsr #14
	...
     bf8:	00001724 	andeq	r1, r0, r4, lsr #14
			__WFI ();
     bfc:	00001778 	andeq	r1, r0, r8, ror r7
	...
	check_stack_overflow;
     c08:	00001778 	andeq	r1, r0, r8, ror r7
     c0c:	000017d8 	ldrdeq	r1, [r0], -r8
	...
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	000017e6 	andeq	r1, r0, r6, ror #15
			goto Redo;
     c1c:	000017e6 	andeq	r1, r0, r6, ror #15
	for_all_tasks (__pi_curr) {
     c20:	000017ec 	andeq	r1, r0, ip, ror #15
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	00001848 	andeq	r1, r0, r8, asr #16
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	000017d8 	ldrdeq	r1, [r0], -r8
     c34:	00001848 	andeq	r1, r0, r8, asr #16
	...
     c40:	0000185c 	andeq	r1, r0, ip, asr r8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	00001940 	andeq	r1, r0, r0, asr #18
     c48:	00001946 	andeq	r1, r0, r6, asr #18
			__WFI ();
     c4c:	0000194a 	andeq	r1, r0, sl, asr #18
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c50:	00001950 	andeq	r1, r0, r0, asr r9
     c54:	00001964 	andeq	r1, r0, r4, ror #18
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	00001848 	andeq	r1, r0, r8, asr #16
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	00001964 	andeq	r1, r0, r4, ror #18
	...
     c70:	00001990 	muleq	r0, r0, r9
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c74:	00001992 	muleq	r0, r2, r9
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	00001a60 	andeq	r1, r0, r0, ror #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	00001a84 	andeq	r1, r0, r4, lsl #21
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c80:	00001a86 	andeq	r1, r0, r6, lsl #21
     c84:	00001ace 	andeq	r1, r0, lr, asr #21
     c88:	00001af8 	strdeq	r1, [r0], -r8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	00001afa 	strdeq	r1, [r0], -sl
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	00001992 	muleq	r0, r2, r9
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c9c:	00001994 	muleq	r0, r4, r9
     ca0:	00001a36 	andeq	r1, r0, r6, lsr sl
     ca4:	00001a60 	andeq	r1, r0, r0, ror #20
     ca8:	00001a84 	andeq	r1, r0, r4, lsl #21
			SysCtrlSetRechargeBeforePowerDown
     cac:	00001a86 	andeq	r1, r0, r6, lsl #21
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb8:	000019d2 	ldrdeq	r1, [r0], -r2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	000019da 	ldrdeq	r1, [r0], -sl
     cc0:	00001b7e 	andeq	r1, r0, lr, ror fp
     cc4:	00001b8a 	andeq	r1, r0, sl, lsl #23
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	00001ad8 	ldrdeq	r1, [r0], -r8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	00001af8 	strdeq	r1, [r0], -r8
     cd8:	00001afa 	strdeq	r1, [r0], -sl
     cdc:	00001b3e 	andeq	r1, r0, lr, lsr fp
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	00001964 	andeq	r1, r0, r4, ror #18
     cec:	00001984 	andeq	r1, r0, r4, lsl #19
     cf0:	00001984 	andeq	r1, r0, r4, lsl #19
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
     cf8:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
     cfc:	00001c04 	andeq	r1, r0, r4, lsl #24
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d08:	00001c18 	andeq	r1, r0, r8, lsl ip
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	00001c1c 	andeq	r1, r0, ip, lsl ip
     d10:	00001ef6 	strdeq	r1, [r0], -r6
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	00001f3e 	andeq	r1, r0, lr, lsr pc
	...
     d20:	00001c1c 	andeq	r1, r0, ip, lsl ip
}
     d24:	00001c22 	andeq	r1, r0, r2, lsr #24
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	00001c5a 	andeq	r1, r0, sl, asr ip
     d2c:	00001cc6 	andeq	r1, r0, r6, asr #25
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	00001f5a 	andeq	r1, r0, sl, asr pc
     d34:	00001f7a 	andeq	r1, r0, sl, ror pc
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d40:	00001d7e 	andeq	r1, r0, lr, ror sp
     d44:	00001df8 	strdeq	r1, [r0], -r8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d48:	00001f82 	andeq	r1, r0, r2, lsl #31
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	00001f8a 	andeq	r1, r0, sl, lsl #31
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d58:	00001e10 	andeq	r1, r0, r0, lsl lr
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	00001e66 	andeq	r1, r0, r6, ror #28
     d60:	00001edc 	ldrdeq	r1, [r0], -ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d64:	00001ef6 	strdeq	r1, [r0], -r6
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d70:	00001e6c 	andeq	r1, r0, ip, ror #28
			PRCMPowerDomainOff (
     d74:	00001edc 	ldrdeq	r1, [r0], -ip
     d78:	00001f3e 	andeq	r1, r0, lr, lsr pc
	__SLEEP;
     d7c:	00001f46 	andeq	r1, r0, r6, asr #30
     d80:	00001f8a 	andeq	r1, r0, sl, lsl #31
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
	...
	goto Redo;
     d90:	00001c04 	andeq	r1, r0, r4, lsl #24
     d94:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
	...
     da0:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     da4:	00001fc4 	andeq	r1, r0, r4, asr #31
	...
     db0:	00000001 	andeq	r0, r0, r1
     db4:	00000001 	andeq	r0, r0, r1
     db8:	00001fc4 	andeq	r1, r0, r4, asr #31
     dbc:	00001fdc 	ldrdeq	r1, [r0], -ip
	...
     dc8:	00001fdc 	ldrdeq	r1, [r0], -ip
     dcc:	00001fe4 	andeq	r1, r0, r4, ror #31
     dd0:	00000001 	andeq	r0, r0, r1
     dd4:	00000001 	andeq	r0, r0, r1
     dd8:	00001fe4 	andeq	r1, r0, r4, ror #31
     ddc:	00001fec 	andeq	r1, r0, ip, ror #31
     de0:	00000001 	andeq	r0, r0, r1
     de4:	00000001 	andeq	r0, r0, r1
     de8:	00000001 	andeq	r0, r0, r1
     dec:	00000001 	andeq	r0, r0, r1
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	00001fec 	andeq	r1, r0, ip, ror #31
     dfc:	000020c0 	andeq	r2, r0, r0, asr #1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	000020c0 	andeq	r2, r0, r0, asr #1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	00002164 	andeq	r2, r0, r4, ror #2
	...
     e10:	00002172 	andeq	r2, r0, r2, ror r1
     e14:	00002174 	andeq	r2, r0, r4, ror r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	00002178 	andeq	r2, r0, r8, ror r1
     e1c:	0000217c 	andeq	r2, r0, ip, ror r1
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e28:	00002480 	andeq	r2, r0, r0, lsl #9
	delay (16, 0);
     e2c:	00002482 	andeq	r2, r0, r2, lsl #9
     e30:	00002484 	andeq	r2, r0, r4, lsl #9
     e34:	00002486 	andeq	r2, r0, r6, lsl #9
	...
	__pi_release ();
     e40:	00002164 	andeq	r2, r0, r4, ror #2
     e44:	000021e0 	andeq	r2, r0, r0, ror #3
     e48:	000021e0 	andeq	r2, r0, r0, ror #3
     e4c:	0000228c 	andeq	r2, r0, ip, lsl #5
     e50:	0000228c 	andeq	r2, r0, ip, lsl #5
static void killev (__pi_pcb_t *pid) {
     e54:	000022e8 	andeq	r2, r0, r8, ror #5
	wfun = (aword)(pid->code);
     e58:	000022e8 	andeq	r2, r0, r8, ror #5
	for_all_tasks (i) {
     e5c:	00002300 	andeq	r2, r0, r0, lsl #6
		for (j = 0; j < nevents (i); j++) {
     e60:	00000001 	andeq	r0, r0, r1
     e64:	00000001 	andeq	r0, r0, r1
     e68:	00002300 	andeq	r2, r0, r0, lsl #6
			    || i->Events [j] . Event == wfun
     e6c:	00002310 	andeq	r2, r0, r0, lsl r3
		for (j = 0; j < nevents (i); j++) {
     e70:	00002310 	andeq	r2, r0, r0, lsl r3
			if (i->Events [j] . Event == (aword)pid
     e74:	00002324 	andeq	r2, r0, r4, lsr #6
     e78:	00002324 	andeq	r2, r0, r4, lsr #6
     e7c:	00002388 	andeq	r2, r0, r8, lsl #7
				wakeupev (i, j);
     e80:	00002388 	andeq	r2, r0, r8, lsl #7
     e84:	0000239c 	muleq	r0, ip, r3
	for_all_tasks (i) {
     e88:	0000239c 	muleq	r0, ip, r3
}
     e8c:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
static void qfree (aword *ch) {
     e94:	000023c4 	andeq	r2, r0, r4, asr #7
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	000023c4 	andeq	r2, r0, r4, asr #7
	cc = (aword*)(mpools + MA_NP);
     e9c:	000023ec 	andeq	r2, r0, ip, ror #7
	m_setnextp (ch, chunk);
     ea0:	000023ec 	andeq	r2, r0, ip, ror #7
	m_setnextp (cc, ch);
     ea4:	000023fc 	strdeq	r2, [r0], -ip
}
     ea8:	000023fc 	strdeq	r2, [r0], -ip
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	00002428 	andeq	r2, r0, r8, lsr #8
     eb0:	00002428 	andeq	r2, r0, r8, lsr #8
     eb4:	0000243c 	andeq	r2, r0, ip, lsr r4
			m_setnextp (cc, m_nextp (chunk));
     eb8:	0000243c 	andeq	r2, r0, ip, lsr r4
			m_size (chunk) += m_hdrlen + m_size (ch);
     ebc:	00002450 	andeq	r2, r0, r0, asr r4
     ec0:	00002450 	andeq	r2, r0, r0, asr r4
     ec4:	00002560 	andeq	r2, r0, r0, ror #10
     ec8:	00002560 	andeq	r2, r0, r0, ror #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	000025c4 	andeq	r2, r0, r4, asr #11
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed0:	000025c4 	andeq	r2, r0, r4, asr #11
     ed4:	000025ec 	andeq	r2, r0, ip, ror #11
     ed8:	000025ec 	andeq	r2, r0, ip, ror #11
			m_setnextp (cc, m_nextp (chunk));
     edc:	0000273c 	andeq	r2, r0, ip, lsr r7
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee8:	00000001 	andeq	r0, r0, r1
     eec:	00000001 	andeq	r0, r0, r1
     ef0:	00000001 	andeq	r0, r0, r1
     ef4:	00000001 	andeq	r0, r0, r1
	...
			if (m_size (chunk) >= m_size (ch))
     f00:	000027b2 			; <UNDEFINED> instruction: 0x000027b2
		chunk = m_nextp (chunk))
     f04:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
     f08:	000027b6 			; <UNDEFINED> instruction: 0x000027b6
     f0c:	000027ba 			; <UNDEFINED> instruction: 0x000027ba
	...
	diag_wchar (c, a);
     f18:	00000001 	andeq	r0, r0, r1
     f1c:	00000001 	andeq	r0, r0, r1
}
     f20:	0000273c 	andeq	r2, r0, ip, lsr r7
     f24:	0000295c 	andeq	r2, r0, ip, asr r9
	syserror (ESTATE, "state");
     f28:	0000295c 	andeq	r2, r0, ip, asr r9
     f2c:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
     f30:	00000001 	andeq	r0, r0, r1
     f34:	00000001 	andeq	r0, r0, r1
void update_n_wake (word min, Boolean force) {
     f38:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	000029d4 	ldrdeq	r2, [r0], -r4
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	00002a22 	andeq	r2, r0, r2, lsr #20
     f4c:	00002a26 	andeq	r2, r0, r6, lsr #20
     f50:	00002a2c 	andeq	r2, r0, ip, lsr #20
     f54:	00002a2e 	andeq	r2, r0, lr, lsr #20
	...
     f60:	00002a26 	andeq	r2, r0, r6, lsr #20
     f64:	00002a2c 	andeq	r2, r0, ip, lsr #20
     f68:	00002a2e 	andeq	r2, r0, lr, lsr #20
     f6c:	00002a36 	andeq	r2, r0, r6, lsr sl
	...
     f78:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
     f7c:	00000001 	andeq	r0, r0, r1
	__pi_mintk = znew + min;
     f80:	00000001 	andeq	r0, r0, r1
     f84:	00000001 	andeq	r0, r0, r1
			if (!twaiting (i))
     f88:	000029d4 	ldrdeq	r2, [r0], -r4
     f8c:	00002a20 	andeq	r2, r0, r0, lsr #20
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	00000001 	andeq	r0, r0, r1
     f94:	00000001 	andeq	r0, r0, r1
     f98:	00002a20 	andeq	r2, r0, r0, lsr #20
     f9c:	00002a8c 	andeq	r2, r0, ip, lsl #21
     fa0:	00002a8c 	andeq	r2, r0, ip, lsl #21
     fa4:	00002aa2 	andeq	r2, r0, r2, lsr #21
	...
     fb0:	00002aa4 	andeq	r2, r0, r4, lsr #21
     fb4:	00002acc 	andeq	r2, r0, ip, asr #21
     fb8:	00002acc 	andeq	r2, r0, ip, asr #21
     fbc:	00002ad4 	ldrdeq	r2, [r0], -r4
				wakeuptm (i);
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
     fc8:	00000001 	andeq	r0, r0, r1
				d = i->Timer - znew;
     fcc:	00000001 	andeq	r0, r0, r1
     fd0:	00000001 	andeq	r0, r0, r1
     fd4:	00000001 	andeq	r0, r0, r1
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	00000001 	andeq	r0, r0, r1
     fdc:	00000001 	andeq	r0, r0, r1
	...
}
     fe8:	00002b36 	andeq	r2, r0, r6, lsr fp
	TCI_RUN_DELAY_TIMER;
     fec:	00002b46 	andeq	r2, r0, r6, asr #22
}
     ff0:	00002b4c 	andeq	r2, r0, ip, asr #22
     ff4:	00002b4e 	andeq	r2, r0, lr, asr #22
	...
    1000:	00002ad4 	ldrdeq	r2, [r0], -r4
void proceed (word state) {
    1004:	00002b30 	andeq	r2, r0, r0, lsr fp
	prcdstate (__pi_curr, state);
    1008:	00002b30 	andeq	r2, r0, r0, lsr fp
    100c:	00002b5c 	andeq	r2, r0, ip, asr fp
	release;
    1010:	00000001 	andeq	r0, r0, r1
    1014:	00000001 	andeq	r0, r0, r1
void __pi_wait (aword event, word state) {
    1018:	00000001 	andeq	r0, r0, r1
	sint j = nevents (__pi_curr);
    101c:	00000001 	andeq	r0, r0, r1
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	00000001 	andeq	r0, r0, r1
    1024:	00000001 	andeq	r0, r0, r1
    1028:	00000001 	andeq	r0, r0, r1
		syserror (ENEVENTS, "sw");
    102c:	00000001 	andeq	r0, r0, r1
    1030:	00000001 	andeq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
    1034:	00000001 	andeq	r0, r0, r1
	incwait (__pi_curr);
    1038:	00000001 	andeq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
    103c:	00000001 	andeq	r0, r0, r1
}
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
void __pi_trigger (aword event) {
    104c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000477 	andeq	r0, r0, r7, ror r4
       4:	01380003 	teqeq	r8, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			i = k;
      40:	2f534f63 	svccs	0x00534f63
				j->Next = k;
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
}
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
        if(offTime > 0)
      f4:	73000001 	movwvc	r0, #1
            delay(offTime, Check_PERIOD);
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
        if(ledFlag == 0) {
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
            led = redLed;
     108:	00030068 	andeq	r0, r3, r8, rrx
            onTime = redOn;
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
            offTime = greenOff;
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
        if(On)
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
            leds(led,1);
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
            leds(led,0);
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     130:	0300682e 	movweq	r6, #2094	; 0x82e
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
        if(onTime > 0)
     13c:	00040068 	andeq	r0, r4, r8, rrx
            delay(onTime, OFF_PERIOD);
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
        when(&On, Check_PERIOD);
     144:	c8020500 	stmdagt	r2, {r8, sl}
     148:	03000000 	movweq	r0, #0
        release;
     14c:	1f05012d 	svcne	0x0005012d
            led = greenLed;
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
            onTime = greenOn;
     158:	03060905 	movweq	r0, #26885	; 0x6905
            offTime = greenOff;
     15c:	0e053c1f 	mcreq	12, 0, r3, cr5, cr15, {0}
            leds(led,0);
     160:	011e0501 	tsteq	lr, r1, lsl #10
     164:	01062805 	tsteq	r6, r5, lsl #16
     168:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
     16c:	052e0630 	streq	r0, [lr, #-1584]!	; 0xfffff9d0
     170:	02040135 	andeq	r0, r4, #1073741837	; 0x4000000d
     174:	8c030505 	cfstr32hi	mvfx0, [r3], {5}
        leds(led,0);
     178:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     180:	06480501 	strbeq	r0, [r8], -r1, lsl #10
     184:	2e7def03 	cdpcs	15, 7, cr14, cr13, cr3, {0}
}
     188:	01065b05 	tsteq	r6, r5, lsl #22
     18c:	4a01b705 	bmi	6dda8 <__ccfg+0x4de00>
     190:	0601ca05 	streq	ip, [r1], -r5, lsl #20
     194:	0293054a 	addseq	r0, r3, #310378496	; 0x12800000
     198:	02980501 	addseq	r0, r8, #4194304	; 0x400000
     19c:	02a00501 	adceq	r0, r0, #4194304	; 0x400000
     1a0:	06f90501 	ldrbteq	r0, [r9], r1, lsl #10
     1a4:	14090501 	strne	r0, [r9], #-1281	; 0xfffffaff
     1a8:	01061405 	tsteq	r6, r5, lsl #8
     1ac:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     1b0:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     1b4:	2e5f0305 	cdpcs	3, 5, cr0, cr15, cr5, {0}
     1b8:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
     1bc:	14051509 	strne	r1, [r5], #-1289	; 0xfffffaf7
     1c0:	0b050106 	bleq	1405e0 <__ccfg+0x120638>
     1c4:	060d052e 	streq	r0, [sp], -lr, lsr #10
    word number = 0;
     1c8:	0611054b 	ldreq	r0, [r1], -fp, asr #10
    int numbersIndex = 0;
     1cc:	060d0501 	streq	r0, [sp], -r1, lsl #10
     1d0:	1405133d 	strne	r1, [r5], #-829	; 0xfffffcc3
        if(settingsInput[i] == ' ') {
     1d4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     1d8:	15053d06 	strne	r3, [r5, #-3334]	; 0xfffff2fa
            numbers[numbersIndex] = number;
     1dc:	05250106 	streq	r0, [r5, #-262]!	; 0xfffffefa
     1e0:	053f0609 	ldreq	r0, [pc, #-1545]!	; fffffbdf <_estack+0xdfffabdf>
            number = 0;
     1e4:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	0d05200b 	stceq	0, cr2, [r5, #-44]	; 0xffffffd4
    redOn = numbers[0];
     1ec:	12053d06 	andne	r3, r5, #384	; 0x180
     1f0:	02b20501 	adcseq	r0, r2, #4194304	; 0x400000
    redOff = numbers[1];
     1f4:	02c20501 	sbceq	r0, r2, #4194304	; 0x400000
     1f8:	06250501 	strteq	r0, [r5], -r1, lsl #10
    greenOn = numbers[2];
     1fc:	06340522 	ldrteq	r0, [r4], -r2, lsr #10
     200:	01390520 	teqeq	r9, r0, lsr #10
    greenOff = numbers[3];
     204:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     208:	01029403 	tsteq	r2, r3, lsl #8
}
     20c:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     214:	e703064c 	str	r0, [r3, -ip, asr #12]
            number = number * 10;
     218:	5f05207d 	svcpl	0x0005207d
            number += settingsInput[i] - 48;
     21c:	bb050106 	bllt	14063c <__ccfg+0x120694>
     220:	ce054a01 	vmlagt.f32	s8, s10, s2
     224:	054a0601 	strbeq	r0, [sl, #-1537]	; 0xfffff9ff
     228:	050106fd 	streq	r0, [r1, #-1789]	; 0xfffff903
     22c:	13051409 	movwne	r1, #21513	; 0x5409
     230:	0b050106 	bleq	140650 <__ccfg+0x1206a8>
fsm root {
     234:	060d0520 	streq	r0, [sp], -r0, lsr #10
     238:	3e090521 	cfsh32cc	mvfx0, mvfx9, #17
     23c:	030d054b 	movweq	r0, #54603	; 0xd54b
     240:	11052e71 	tstne	r5, r1, ror lr
     244:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     248:	05133d06 	ldreq	r3, [r3, #-3334]	; 0xfffff2fa
     24c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
        ser_outf(Initial, "Enter your name: ");
     250:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     254:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	0534060d 	ldreq	r0, [r4, #-1549]!	; 0xfffff9f3
     25c:	22050112 	andcs	r0, r5, #-2147483644	; 0x80000004
        runfsm blinker;
     260:	2e7e0501 	cdpcs	5, 7, cr0, cr14, cr1, {0}
     264:	06018105 	streq	r8, [r1], -r5, lsl #2
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	01900501 	orrseq	r0, r0, r1, lsl #10
     26c:	95052e06 	strls	r2, [r5, #-3590]	; 0xfffff1fa
     270:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
        ser_inf(Get_Choice, "%c", &choice);
     274:	94030505 	strls	r0, [r3], #-1285	; 0xfffffafb
     278:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
        if (choice == 'A' || choice == 'a'){
     27c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     280:	01a80501 			; <UNDEFINED> instruction: 0x01a80501
     284:	7de70306 	stclvc	3, cr0, [r7, #24]!
            proceed Adjust_Intervals;
     288:	01bb052e 			; <UNDEFINED> instruction: 0x01bb052e
            proceed Monitor;
     28c:	7a050106 	bvc	1406ac <__ccfg+0x120704>
        proceed Show_Menu;
     290:	7d056006 	stcvc	0, cr6, [r5, #-24]	; 0xffffffe8
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	8c050106 	stfhis	f0, [r5], {6}
     298:	052e0601 	streq	r0, [lr, #-1537]!	; 0xfffff9ff
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	04010191 	streq	r0, [r1], #-401	; 0xfffffe6f
     2a0:	03050502 	movweq	r0, #21762	; 0x5502
     2a4:	1701028c 	strne	r0, [r1, -ip, lsl #5]
        processSettingsInput(settings);
     2a8:	01063e05 	tsteq	r6, r5, lsl #28
        On = YES;
     2ac:	a4050104 	strge	r0, [r5], #-260	; 0xfffffefc
     2b0:	ef030601 	svc	0x00030601
        trigger(&On);
     2b4:	b7052e7d 	smlsdxlt	r5, sp, lr, r2
        proceed Show_Menu;
     2b8:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	055f0601 	ldrbeq	r0, [pc, #-1537]	; fffffcc3 <_estack+0xdfffacc3>
     2c0:	01050113 	tsteq	r5, r3, lsl r1
     2c4:	13050106 	movwne	r0, #20742	; 0x5106
     2c8:	001e022e 	andseq	r0, lr, lr, lsr #4
     2cc:	30050101 	andcc	r0, r5, r1, lsl #2
     2d0:	c8020500 	stmdagt	r2, {r8, sl}
     2d4:	03000001 	movweq	r0, #1
        proceed Show_Menu;
     2d8:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
     2dc:	14131305 	ldrne	r1, [r3], #-773	; 0xfffffcfb
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	010a0514 	tsteq	sl, r4, lsl r5
     2e4:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
        displayCycle = YES;
     2e8:	0510060a 	ldreq	r0, [r0, #-1546]	; 0xfffff9f6
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	09051c30 	stmdbeq	r5, {r4, r5, sl, fp, ip}
     2f0:	05410622 	strbeq	r0, [r1, #-1570]	; 0xfffff9de
     2f4:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
        if(ch == 'S' || ch == 's'){
     2f8:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
     2fc:	23052f06 	movwcs	r2, #24326	; 0x5f06
     300:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
            displayCycle = NO;
     304:	05135906 	ldreq	r5, [r3, #-2310]	; 0xfffff6fa
     308:	05110614 	ldreq	r0, [r1, #-1556]	; 0xfffff9ec
            proceed Show_Menu;
     30c:	1d052119 	stfnes	f2, [r5, #-100]	; 0xffffff9c
        proceed Monitor;
     310:	15051c06 	strne	r1, [r5, #-3078]	; 0xfffff3fa
     314:	06050501 	streq	r0, [r5], -r1, lsl #10
     318:	0b030601 	bleq	c1b24 <__ccfg+0xa1b7c>
        leds(1, 0);
     31c:	060b052e 	streq	r0, [fp], -lr, lsr #10
     320:	06050501 	streq	r0, [r5], -r1, lsl #10
     324:	060c054b 	streq	r0, [ip], -fp, asr #10
     328:	06050501 	streq	r0, [r5], -r1, lsl #10
     32c:	060d054c 	streq	r0, [sp], -ip, asr #10
        leds(0, 0);
     330:	06050501 	streq	r0, [r5], -r1, lsl #10
     334:	060e054b 	streq	r0, [lr], -fp, asr #10
     338:	4b010501 	blmi	41744 <__ccfg+0x2179c>
     33c:	03061005 	movweq	r1, #24581	; 0x6005
     340:	2c052e75 	stccs	14, cr2, [r5], {117}	; 0x75
     344:	13050106 	movwne	r0, #20742	; 0x5106
        } else if (choice == 'S' || choice == 's') {
     348:	060d0520 	streq	r0, [sp], -r0, lsr #10
            proceed Stop;
     34c:	0614052f 	ldreq	r0, [r4], -pc, lsr #10
        } else if (choice == 'V' || choice == 'v') {
     350:	060d0501 	streq	r0, [sp], -r1, lsl #10
            proceed View_Settings;
     354:	0614053d 			; <UNDEFINED> instruction: 0x0614053d
        } else if (choice == 'M' || choice == 'm') {
     358:	000c0201 	andeq	r0, ip, r1, lsl #4
            proceed Monitor;
     35c:	1a050101 	bne	140768 <__ccfg+0x1207c0>
     360:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
     364:	03000002 	movweq	r0, #2
     368:	05010196 	streq	r0, [r1, #-406]	; 0xfffffe6a
     36c:	1a05011c 	bne	1407e4 <__ccfg+0x12083c>
     370:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     374:	0905ca06 	stmdbeq	r5, {r1, r2, r9, fp, lr, pc}
     378:	4d5b4d15 	ldclmi	13, cr4, [fp, #-84]	; 0xffffffac
     37c:	14580903 	ldrbne	r0, [r8], #-2307	; 0xfffff6fd
     380:	060c055a 			; <UNDEFINED> instruction: 0x060c055a
     384:	060d0501 	streq	r0, [sp], -r1, lsl #10
     388:	05260667 	streq	r0, [r6, #-1639]!	; 0xfffff999
     38c:	3f310609 	svccc	0x00310609
     390:	3e5a144d 	cdpcc	4, 5, cr1, cr10, cr13, {2}
     394:	01060c05 	tsteq	r6, r5, lsl #24
     398:	3e060905 	vmlacc.f16	s0, s12, s10	; <UNPREDICTABLE>
     39c:	3fdd3f30 	svccc	0x00dd3f30
     3a0:	0616054b 	ldreq	r0, [r6], -fp, asr #10
static void devinit_uart (int devnum) {
     3a4:	06090501 	streq	r0, [r9], -r1, lsl #10
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	055a133f 	ldrbeq	r1, [sl, #-831]	; 0xfffffcc1
     3ac:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
void udelay (volatile word n) {
     3b0:	0567060d 	strbeq	r0, [r7, #-1549]!	; 0xfffff9f3
     3b4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	while (n) {
     3b8:	1a052f0d 	bne	14bff4 <__ccfg+0x12c04c>
     3bc:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
}
     3c0:	31090521 	tstcc	r9, r1, lsr #10
	while (n--);
     3c4:	010e053f 	tsteq	lr, pc, lsr r5
     3c8:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
     3cc:	88050178 	stmdahi	r5, {r3, r4, r5, r6, r8}
		n--;
     3d0:	8d050101 	stfhis	f0, [r5, #-4]
     3d4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     3d8:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
void mdelay (volatile word n) {
     3dc:	05170100 	ldreq	r0, [r7, #-256]	; 0xffffff00
     3e0:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
	while (n) {
     3e4:	01a00501 	lsleq	r0, r1, #10
     3e8:	7f8a0306 	svcvc	0x008a0306
}
     3ec:	01b3053c 			; <UNDEFINED> instruction: 0x01b3053c
		udelay (999);
     3f0:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
     3f4:	f6033e05 			; <UNDEFINED> instruction: 0xf6033e05
		n--;
     3f8:	01048200 	mrseq	r8, R12_usr
     3fc:	0301b305 	movweq	fp, #4869	; 0x1305
     400:	05207f8a 	streq	r7, [r0, #-3978]!	; 0xfffff076
     404:	200601c6 	andcs	r0, r6, r6, asr #3
void __pi_ondomain (lword d) {
     408:	01028b05 	tsteq	r2, r5, lsl #22
     40c:	01029005 	tsteq	r2, r5
		if (__pi_systat.effpdm > 1)
     410:	01029805 	tsteq	r2, r5, lsl #16
     414:	0106e105 	tsteq	r6, r5, lsl #2
			__pi_systat.effpdm = 1;
     418:	05130905 	ldreq	r0, [r3, #-2309]	; 0xfffff6fb
	PRCMPowerDomainOn (d);
     41c:	1e05010e 	adfnes	f0, f5, #0.5
     420:	012e0501 			; <UNDEFINED> instruction: 0x012e0501
     424:	04013305 	streq	r3, [r1], #-773	; 0xfffffcfb
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	03050502 	movweq	r0, #21762	; 0x5502
     42c:	170100f0 			; <UNDEFINED> instruction: 0x170100f0
     430:	01063e05 	tsteq	r6, r5, lsl #28
	__pi_systat.ondmns |= d;
     434:	46050104 	strmi	r0, [r5], -r4, lsl #2
     438:	7f8b0306 	svcvc	0x008b0306
}
     43c:	06590520 	ldrbeq	r0, [r9], -r0, lsr #10
     440:	066c0501 	strbteq	r0, [ip], -r1, lsl #10
void __pi_syserror (word ec, const char *m) {
     444:	06010582 	streq	r0, [r1], -r2, lsl #11
	diag ("SYSERR: %x, %s", ec, m);
     448:	06100513 			; <UNDEFINED> instruction: 0x06100513
     44c:	053c4a03 	ldreq	r4, [ip, #-2563]!	; 0xfffff5fd
  __ASM volatile ("cpsid i" : : : "memory");
     450:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	052f060d 	streq	r0, [pc, #-1549]!	; fffffe4f <_estack+0xdfffae4f>
     458:	13052f10 	movwne	r2, #24336	; 0x5f10
     45c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
		all_leds_blink;
     460:	10052f06 	andne	r2, r5, r6, lsl #30
     464:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     468:	060d0501 	streq	r0, [sp], -r1, lsl #10
     46c:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	01052e31 	tsteq	r5, r1, lsr lr
     474:	21022e06 	tstcs	r2, r6, lsl #28
     478:	5c010100 	stfpls	f0, [r1], {-0}
     47c:	03000015 	movweq	r0, #21
     480:	00029b00 	andeq	r9, r2, r0, lsl #22
     484:	fb010200 	blx	40c8e <__ccfg+0x20ce6>
	while (1) {
     488:	01000d0e 	tsteq	r0, lr, lsl #26
     48c:	00010101 	andeq	r0, r1, r1, lsl #2
     490:	00010000 	andeq	r0, r1, r0
     494:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
void tci_run_delay_timer () {
     498:	2f656d6f 	svccs	0x00656d6f
	setdel = __pi_mintk - __pi_old;
     49c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     4a0:	442f6e69 	strtmi	r6, [pc], #-3689	; 4a8 <tci_run_delay_timer+0x10>
     4a4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     4a8:	4f2f706f 	svcmi	0x002f706f
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4ac:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     4b0:	502f5445 	eorpl	r5, pc, r5, asr #8
     4b4:	534f4349 	movtpl	r4, #62281	; 0xf349
     4b8:	6369502f 	cmnvs	r9, #47	; 0x2f
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	sti_tim;
     4c0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
}
     4c4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
     4c8:	2f656d6f 	svccs	0x00656d6f
     4cc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     4d0:	442f6e69 	strtmi	r6, [pc], #-3689	; 4d8 <tci_run_auxiliary_timer>
     4d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	cli_aux;
     4d8:	4f2f706f 	svcmi	0x002f706f
     4dc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	502f5445 	eorpl	r5, pc, r5, asr #8
     4e4:	534f4349 	movtpl	r4, #62281	; 0xf349
     4e8:	6369502f 	cmnvs	r9, #47	; 0x2f
     4ec:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	sti_aux;
     4f0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
}
     4f4:	43432f58 	movtmi	r2, #16216	; 0x3f58
     4f8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     4fc:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
void AONRTCIntHandler () {
     500:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
     508:	2f006269 	svccs	0x00006269
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (__pi_utims [0] == 0)
     510:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     514:	2f6e6974 	svccs	0x006e6974
		if (*(__pi_utims [0])) {
     518:	6b736544 	blvs	1cd9a30 <__ccfg+0x1cb9a88>
     51c:	2f706f74 	svccs	0x00706f74
			(*(__pi_utims [0]))--;
     520:	4f534c4f 	svcmi	0x00534c4f
		if (__pi_utims [1] == 0)
     524:	2f54454e 	svccs	0x0054454e
		if (*(__pi_utims [1])) {
     528:	4f434950 	svcmi	0x00434950
			aux_timer_inactive = 0;
     52c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			(*(__pi_utims [1]))--;
     530:	2f534f63 	svccs	0x00534f63
		if (__pi_utims [2] == 0)
     534:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		if (*(__pi_utims [2])) {
     538:	4f492f73 	svcmi	0x00492f73
			(*(__pi_utims [2]))--;
     53c:	6f682f00 	svcvs	0x00682f00
		if (__pi_utims [3] != 0) {
     540:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 394 <root+0x160>
			if (*(__pi_utims [3])) {
     544:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
				aux_timer_inactive = 0;
     548:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				(*(__pi_utims [3]))--;
     54c:	6f746b73 	svcvs	0x00746b73
	if (__pi_systat.ledsts) {
     550:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     554:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (__pi_systat.ledblc++ == 0) {
     558:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     55c:	2f534f43 	svccs	0x00534f43
			if (__pi_systat.ledblk) {
     560:	4f636950 	svcmi	0x00636950
     564:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
     568:	2f736269 	svccs	0x00736269
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
     570:	0073726f 	rsbseq	r7, r3, pc, ror #4
				if (__pi_systat.ledsts & 0x2)
     574:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c0 <tci_run_delay_timer+0x28>
     578:	616d2f65 	cmnvs	sp, r5, ror #30
     57c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				if (__pi_systat.ledsts & 0x4)
     580:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				__pi_systat.ledblk = 0;
     584:	706f746b 	rsbvc	r7, pc, fp, ror #8
     588:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			if (__pi_systat.fstblk)
     58c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     590:	4349502f 	movtmi	r5, #36911	; 0x902f
				__pi_systat.ledblc = 200;
     594:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	534f6369 	movtpl	r6, #62313	; 0xf369
		cli_tim;
     59c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
		__pi_new += setdel;
     5a0:	006c656e 	rsbeq	r6, ip, lr, ror #10
     5a4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
		setdel = 0;
     5a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
		RISE_N_SHINE;
     5ac:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
		__pi_new += setdel;
     5b0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
		RISE_N_SHINE;
     5b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     5b8:	61652d65 	cmnvs	r5, r5, ror #26
		aux_timer_inactive = 1;
     5bc:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     5c0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
				if (__pi_systat.ledsts & 0x1)
     5c4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     5cc:	6f682f00 	svcvs	0x00682f00
				if (__pi_systat.ledsts & 0x2)
     5d0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 424 <__pi_ondomain+0x1c>
     5d4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     5d8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				if (__pi_systat.ledsts & 0x8)
     5dc:	6f746b73 	svcvs	0x00746b73
				__pi_systat.ledblk = 1;
     5e0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     5e4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (aux_timer_inactive) {
     5e8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			cli_aux;
     5ec:	2f534f43 	svccs	0x00534f43
     5f0:	4f636950 	svcmi	0x00636950
     5f4:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     5f8:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
     5fc:	00010063 	andeq	r0, r1, r3, rrx
     600:	73797300 	cmnvc	r9, #0, 6
     604:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     608:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     60c:	63000002 	movwvs	r0, #2
     610:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
word tci_update_delay_ticks (Boolean force) {
     614:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
	cli_tim;
     618:	0100682e 	tsteq	r0, lr, lsr #16
     61c:	70670000 	rsbvc	r0, r7, r0
	if (setdel) {
     620:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	00000200 	andeq	r0, r0, r0, lsl #4
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	5f717269 	svcpl	0x00717269
     62c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     630:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     634:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
				AON_RTC_O_CH0CMP)) - gettav ());
     638:	00000300 	andeq	r0, r0, r0, lsl #6
	return NO;
     63c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			setdel = 0;
     640:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	72690000 	rsbvc	r0, r9, #0
     648:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
}
     64c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
		sti_tim;
     650:	00682e73 	rsbeq	r2, r8, r3, ror lr
		return YES;
     654:	69000003 	stmdbvs	r0, {r0, r1}
     658:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
     65c:	735f6e69 	cmpvc	pc, #1680	; 0x690
     660:	6f736e65 	svcvs	0x00736e65
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	00682e72 	rsbeq	r2, r8, r2, ror lr
	UARTDisable (UART0_BASE);
     668:	70000004 	andvc	r0, r0, r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     66c:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
	UARTDisable (UART0_BASE);
     670:	00020068 	andeq	r0, r2, r8, rrx
	UARTConfigSetExpClk (UART0_BASE,
     674:	6e6f6100 	powvse	f6, f7, f0
     678:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     67c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     680:	77700000 	ldrbvc	r0, [r0, -r0]!
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
     688:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     68c:	00000200 	andeq	r0, r0, r0, lsl #4
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	5f6e6f61 	svcpl	0x006e6f61
     694:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     698:	00020068 	andeq	r0, r2, r8, rrx
	urates [0] = rate;
     69c:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
}
     6a0:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     6a4:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     6a8:	00000500 	andeq	r0, r0, r0, lsl #10
     6ac:	5f6e6f61 	svcpl	0x006e6f61
     6b0:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
     6b4:	00020068 	andeq	r0, r2, r8, rrx
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	6e6f6100 	powvse	f6, f7, f0
     6bc:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     6c0:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	00020068 	andeq	r0, r2, r8, rrx
     6c8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     6d0:	00060068 	andeq	r0, r6, r8, rrx
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	63726100 	cmnvs	r2, #0, 2
     6d8:	00682e68 	rsbeq	r2, r8, r8, ror #28
     6dc:	6d000001 	stcvs	0, cr0, [r0, #-4]
     6e0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
     6e4:	00010068 	andeq	r0, r1, r8, rrx
     6e8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     6ec:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	switch (operation) {
     6f0:	00682e73 	rsbeq	r2, r8, r3, ror lr
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	62000001 	andvs	r0, r0, #1
     6f8:	6f747475 	svcvs	0x00747475
     6fc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     700:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     704:	00000100 	andeq	r0, r0, r0, lsl #2
				*buf++ = uart_a_read;
     708:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     70c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			while (len && uart_a_char_available) {
     710:	6b000007 	blvs	734 <ioreq_uart_a+0x44>
     714:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     718:	00682e6c 	rsbeq	r2, r8, ip, ror #28
			if (len != operation) {
     71c:	00000005 	andeq	r0, r0, r5
}
     720:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
     724:	0003a402 	andeq	sl, r3, r2, lsl #8
			uart_a_disable_int;
     728:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
			if (uart_a_char_available) {
     72c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
				*buf++ = uart_a_read;
     730:	10062705 	andne	r2, r6, r5, lsl #14
			uart_a_disable_int;
     734:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
     738:	01010005 	tsteq	r1, r5
			if (uart_a_char_available) {
     73c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     740:	0003b002 	andeq	fp, r3, r2
				uart_a_enable_int;
     744:	01180300 	tsteq	r8, r0, lsl #6
     748:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
				goto Redo_rx;
     74c:	09050108 	stmdbeq	r5, {r3, r8}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	08050106 	stmdaeq	r5, {r1, r2, r8}
     754:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
			return -2;
     758:	2b060305 	blcs	181374 <__ccfg+0x1613cc>
     75c:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
				uart_a_write (*buf);
     760:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
     764:	060a0501 	streq	r0, [sl], -r1, lsl #10
			while (len && uart_a_room_in_tx) {
     768:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     76c:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     770:	01060405 	tsteq	r6, r5, lsl #8
			if (len != operation) {
     774:	01000702 	tsteq	r0, r2, lsl #14
			uart_a_disable_int;
     778:	001f0501 	andseq	r0, pc, r1, lsl #10
     77c:	03dc0205 	bicseq	r0, ip, #1342177280	; 0x50000000
			if (uart_a_room_in_tx) {
     780:	1f030000 	svcne	0x00030000
     784:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
				uart_a_enable_int;
     788:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     78c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
				*buf++ = uart_a_read;
     790:	01053c08 	tsteq	r5, r8, lsl #24
			if (uart_a_room_in_tx) {
     794:	06030524 	streq	r0, [r3], -r4, lsr #10
				uart_a_write (*buf);
     798:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
     79c:	07020106 	streq	r0, [r2, -r6, lsl #2]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     7a4:	0205001e 	andeq	r0, r5, #30
			uart_a_enable_int;
     7a8:	00000408 	andeq	r0, r0, r8, lsl #8
     7ac:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
     7b0:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
			return 0;
     7b4:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
			if (len == UART_CNTRL_SETRATE) {
     7b8:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
     7c0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     7c4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
				syserror (EREQPAR, "uar");
     7c8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
			syserror (ENOOPER, "uai");
     7cc:	17052106 	strne	r2, [r5, -r6, lsl #2]
			if (len == UART_CNTRL_GETRATE) {
     7d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				return 1;
     7d4:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
			syserror (ENOOPER, "uai");
     7dc:	06090501 	streq	r0, [r9], -r1, lsl #10
     7e0:	4a080501 	bmi	201bec <__ccfg+0x1e1c44>
     7e4:	30060205 	andcc	r0, r6, r5, lsl #4
     7e8:	01061505 	tsteq	r6, r5, lsl #10
     7ec:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     7f0:	01010005 	tsteq	r1, r5
     7f4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     7f8:	00000002 	andeq	r0, r0, r2
     7fc:	013a0300 	teqeq	sl, r0, lsl #6
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
void UART0IntHandler () {
     804:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	1f052502 	svcne	0x00052502
     80c:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     810:	3c053d06 	stccc	13, cr3, [r5], {6}
     814:	01080501 	tsteq	r8, r1, lsl #10
     818:	01060905 	tsteq	r6, r5, lsl #18
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     820:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
		RISE_N_SHINE;
     824:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     828:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
		i_trigger (devevent (UART_A, READ));
     82c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     830:	06052027 	streq	r2, [r5], -r7, lsr #32
     834:	06040520 	streq	r0, [r4], -r0, lsr #10
     838:	06240521 	strteq	r0, [r4], -r1, lsr #10
     83c:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
     840:	23060205 	movwcs	r0, #25093	; 0x6205
     844:	01061505 	tsteq	r6, r5, lsl #10
     848:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     84c:	01010005 	tsteq	r1, r5
     850:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
     854:	00000002 	andeq	r0, r0, r2
     858:	00ce0300 	sbceq	r0, lr, r0, lsl #6
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     860:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
     864:	06220205 	strteq	r0, [r2], -r5, lsl #4
		i_trigger (devevent (UART_A, WRITE));
     868:	03053633 	movweq	r3, #22067	; 0x5633
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
     870:	01f00304 	mvnseq	r0, r4, lsl #6
		RISE_N_SHINE;
     874:	5c053001 	stcpl	0, cr3, [r5], {1}
     878:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     87c:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
		i_trigger (devevent (UART_A, WRITE));
     880:	0502100a 	streq	r1, [r2, #-10]
     884:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     888:	0205002d 	andeq	r0, r5, #45	; 0x2d
     88c:	00000444 	andeq	r0, r0, r4, asr #8
     890:	01019703 	tsteq	r1, r3, lsl #14
     894:	01140205 	tsteq	r4, r5, lsl #4
     898:	2d051701 	stccs	7, cr1, [r5, #-4]
     89c:	01790306 	cmneq	r9, r6, lsl #6
     8a0:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
     8a4:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
     8a8:	03030503 	movweq	r0, #13571	; 0x3503
}
     8ac:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
     8b0:	062d0504 	strteq	r0, [sp], -r4, lsl #10
     8b4:	2001cb03 	andcs	ip, r1, r3, lsl #22
     8b8:	02050104 	andeq	r0, r5, #4, 2
     8bc:	7f8f0306 	svcvc	0x008f0306
void __buttons_setirq (int val) {
     8c0:	1303053c 	movwne	r0, #13628	; 0x353c
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     8c8:	eb032905 	bl	cace4 <__ccfg+0xaad3c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     8d0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     8d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	7f900303 	svcvc	0x00900303
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     8e0:	00f0032d 	rscseq	r0, r0, sp, lsr #6
     8e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     8e8:	90030603 	andls	r0, r3, r3, lsl #12
     8ec:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     8f0:	eb032905 	bl	cad0c <__ccfg+0xaad64>
}
     8f4:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     8f8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     8fc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     900:	90030603 	andls	r0, r3, r3, lsl #12
void __pinlist_setirq (int val) {
     904:	0101207f 	tsteq	r1, pc, ror r0
	for (i = 0; i < N_PINLIST; i++) {
     908:	01010101 	tsteq	r1, r1, lsl #2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	29050404 	stmdbcs	r5, {r2, sl}
	for (i = 0; i < N_PINLIST; i++) {
     914:	0101a103 	tsteq	r1, r3, lsl #2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     91c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     920:	03030501 	movweq	r0, #13569	; 0x3501
     924:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
     928:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	for (i = 0; i < N_PINLIST; i++) {
     92c:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
}
     930:	06030501 	streq	r0, [r3], -r1, lsl #10
     934:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     938:	29050404 	stmdbcs	r5, {r2, sl}
     93c:	0101a103 	tsteq	r1, r3, lsl #2
void GPIOIntHandler () {
     940:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
if (buttons_int) {
     944:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     948:	06030501 	streq	r0, [r3], -r1, lsl #10
	buttons_disable ();
     94c:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     950:	01010101 	tsteq	r1, r1, lsl #2
	i_trigger ((aword)&__button_list);
     954:	01580101 	cmpeq	r8, r1, lsl #2
     958:	1108052e 	tstne	r8, lr, lsr #10
     95c:	01000902 	tsteq	r0, r2, lsl #18
     960:	001d0501 	andseq	r0, sp, r1, lsl #10
     964:	04980205 	ldreq	r0, [r8], #517	; 0x205
     968:	9d030000 	stcls	0, cr0, [r3, #-0]
     96c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     970:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
     974:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
     978:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     97c:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
	RISE_N_SHINE;
     980:	0602052e 	streq	r0, [r2], -lr, lsr #10
     984:	01760323 	cmneq	r6, r3, lsr #6
     988:	01061105 	tsteq	r6, r5, lsl #2
if (pin_sensor_int) {
     98c:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
     990:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
	i_trigger ((aword)(&__input_pins));
     994:	2a052073 	bcs	148b68 <__ccfg+0x128bc0>
     998:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
     99c:	2076032f 	rsbscs	r0, r6, pc, lsr #6
     9a0:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     9a4:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
     9a8:	23060205 	movwcs	r0, #25093	; 0x6205
     9ac:	2f060105 	svccs	0x00060105
     9b0:	01000b02 	tsteq	r0, r2, lsl #22
     9b4:	00210501 	eoreq	r0, r1, r1, lsl #10
     9b8:	04d80205 	ldrbeq	r0, [r8], #517	; 0x205
     9bc:	aa030000 	bge	c09c4 <__ccfg+0xa0a1c>
	__pinsen_disable_and_clear;
     9c0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	RISE_N_SHINE;
     9c4:	06210517 			; <UNDEFINED> instruction: 0x06210517
     9c8:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     9cc:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
}
     9d0:	03140205 	tsteq	r4, #1342177280	; 0x50000000
     9d4:	11050169 	tstne	r5, r9, ror #2
     9d8:	2f050106 	svccs	0x00050106
     9dc:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     9e0:	2f052017 	svccs	0x00052017
void system_init () {
     9e4:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	2a052e36 	bcs	14c2c8 <__ccfg+0x12c320>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ec:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     9f4:	01052e09 	tsteq	r5, r9, lsl #28
     9f8:	06021306 	streq	r1, [r2], -r6, lsl #6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     a00:	0205001a 	andeq	r0, r5, #26
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	00000500 	andeq	r0, r0, r0, lsl #10
     a08:	0102b703 	tsteq	r2, r3, lsl #14
     a0c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	0e061a05 	vmlaeq.f32	s2, s12, s10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a14:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a18:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1c:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a20:	2b051406 	blcs	145a40 <__ccfg+0x125a98>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a24:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	06050522 	streq	r0, [r5], -r2, lsr #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	06030501 	streq	r0, [r3], -r1, lsl #10
		pin = (port_confs [i] >> 19) & 0x1f;
     a30:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a34:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     a38:	03052e06 	movweq	r2, #24070	; 0x5e06
     a3c:	07053006 	streq	r3, [r5, -r6]
     a40:	06050106 	streq	r0, [r5], -r6, lsl #2
		if (port_confs [i] & 0x80)
     a44:	06040520 	streq	r0, [r4], -r0, lsr #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     a4c:	06040501 	streq	r0, [r4], -r1, lsl #10
		if (port_confs [i] & 0x40)
     a50:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	06030501 	streq	r0, [r3], -r1, lsl #10
     a58:	06120522 	ldreq	r0, [r2], -r2, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5c:	20060501 	andcs	r0, r6, r1, lsl #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a64:	01060705 	tsteq	r6, r5, lsl #14
	all_leds_blink;
     a68:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     a6c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     a70:	1f130617 	svcne	0x00130617
     a74:	2f060405 	svccs	0x00060405
     a78:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
     a7c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     a80:	03052006 	movweq	r2, #20486	; 0x5006
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a84:	07052206 	streq	r2, [r5, -r6, lsl #4]
     a88:	06050106 	streq	r0, [r5], -r6, lsl #2
     a8c:	06040520 	streq	r0, [r4], -r0, lsr #10
     a90:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     a94:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	03052f06 	movweq	r2, #24326	; 0x5f06
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	06120514 			; <UNDEFINED> instruction: 0x06120514
     aa0:	20060501 	andcs	r0, r6, r1, lsl #10
	IntEnable (INT_AON_RTC_COMB);
     aa4:	21060405 	tstcs	r6, r5, lsl #8
     aa8:	01060805 	tsteq	r6, r5, lsl #16
     aac:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
	__pi_malloc_init ();
     ab0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	IntEnable (INT_AON_GPIO_EDGE);
     ab4:	1f130618 	svcne	0x00130618
     ab8:	2f060505 	svccs	0x00060505
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	017da303 	cmneq	sp, r3, lsl #6
     ac4:	01061105 	tsteq	r6, r5, lsl #2
     ac8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     acc:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
     ad0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	06052019 			; <UNDEFINED> instruction: 0x06052019
     ad8:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
     adc:	06130521 	ldreq	r0, [r3], -r1, lsr #10
	urates [0] = UART_RATE / 100;
     ae0:	20070501 	andcs	r0, r7, r1, lsl #10
     ae4:	052f1405 	streq	r1, [pc, #-1029]!	; 6e7 <reinit_uart+0x2f>
	reinit_uart ();
     ae8:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
	EXTRA_INITIALIZERS;
     aec:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
     af0:	06050106 	streq	r0, [r5], -r6, lsl #2
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     af8:	96032905 	strls	r2, [r3], -r5, lsl #18
     afc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b00:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     b04:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b08:	e6030605 	str	r0, [r3], -r5, lsl #12
     b0c:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			devinit [i] . init (devinit [i] . param);
     b10:	08050106 	stmdaeq	r5, {r1, r2, r8}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	06060520 	streq	r0, [r6], -r0, lsr #10
     b18:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     b1c:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
	IntEnable (INT_UART0_COMB);
     b20:	17050501 	strne	r0, [r5, -r1, lsl #10]
     b24:	01062d05 	tsteq	r6, r5, lsl #26
}
     b28:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
	tci_run_auxiliary_timer ();
     b2c:	7de80306 	stclvc	3, cr0, [r8, #24]!
		diag ("");
     b30:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     b34:	06060501 	streq	r0, [r6], -r1, lsl #10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
		diag ("Leftover RAM: %d bytes",
     b40:	06050106 	streq	r0, [r5], -r6, lsl #2
     b44:	01012106 	tsteq	r1, r6, lsl #2
     b48:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     b4c:	03010618 	movweq	r0, #5656	; 0x1618
     b50:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
     b54:	13052206 	movwne	r2, #20998	; 0x5206
     b58:	07050106 	streq	r0, [r5, -r6, lsl #2]
     b5c:	06050520 	streq	r0, [r5], -r0, lsr #10
     b60:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
     b64:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     b68:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
     b6c:	02052e02 	andeq	r2, r5, #2, 28
     b70:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
     b74:	06030501 	streq	r0, [r3], -r1, lsl #10
     b78:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
     b7c:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
     b80:	0c052206 	sfmeq	f2, 4, [r5], {6}
     b84:	0a050106 	beq	140fa4 <__ccfg+0x120ffc>
     b88:	1f0c052f 	svcne	0x000c052f
     b8c:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
     b90:	03051e0c 	movweq	r1, #24076	; 0x5e0c
     b94:	01132f06 	tsteq	r3, r6, lsl #30
     b98:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
__attribute__ ((noreturn)) void __pi_release () {
     b9c:	13060105 	movwne	r0, #24837	; 0x6105
     ba0:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
     ba4:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba8:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
	check_stack_overflow;
     bac:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
     bb0:	06050106 	streq	r0, [r5], -r6, lsl #2
     bb4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
	update_n_wake (MAX_WORD, NO);
     bb8:	c2032905 	andgt	r2, r3, #81920	; 0x14000
     bbc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     bc0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	for_all_tasks (__pi_curr) {
     bc4:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     bc8:	ba030605 	blt	c23e4 <__ccfg+0xa243c>
     bcc:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	08050106 	stmdaeq	r5, {r1, r2, r8}
	__SLEEP;
     bd4:	06060520 	streq	r0, [r6], -r0, lsr #10
     bd8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     bdc:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
     be0:	17050501 	strne	r0, [r5, -r1, lsl #10]
	system_event_count ++;
     be4:	01062d05 	tsteq	r6, r5, lsl #26
     be8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
	switch (__pi_systat.effpdm) {
     bec:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
     bf0:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     bf4:	06060501 	streq	r0, [r6], -r1, lsl #10
     bf8:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			__WFI ();
     bfc:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     c00:	06050106 	streq	r0, [r5], -r6, lsl #2
     c04:	01012106 	tsteq	r1, r6, lsl #2
	check_stack_overflow;
     c08:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     c0c:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c10:	06030501 	streq	r0, [r3], -r1, lsl #10
     c14:	4a02ce03 	bmi	b4428 <__ccfg+0x94480>
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	01060605 	tsteq	r6, r5, lsl #12
			goto Redo;
     c1c:	30060405 	andcc	r0, r6, r5, lsl #8
	for_all_tasks (__pi_curr) {
     c20:	01001502 	tsteq	r0, r2, lsl #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	002d0501 	eoreq	r0, sp, r1, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c28:	06140205 	ldreq	r0, [r4], -r5, lsl #4
     c2c:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
     c34:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
     c38:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3c:	052f0605 	streq	r0, [pc, #-1541]!	; 63f <tci_update_delay_ticks+0x2b>
     c40:	21061f02 	tstcs	r6, r2, lsl #30
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	01060605 	tsteq	r6, r5, lsl #12
     c48:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
			__WFI ();
     c4c:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c50:	06060520 	streq	r0, [r6], -r0, lsr #10
     c54:	06040501 	streq	r0, [r4], -r1, lsl #10
}
     c58:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5c:	06020501 	streq	r0, [r2], -r1, lsl #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	01061005 	tsteq	r6, r5
     c68:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6c:	0187031a 	orreq	r0, r7, sl, lsl r3
     c70:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
     c74:	1f170520 	svcne	0x00170520
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	0a030905 	beq	c3094 <__ccfg+0xa30ec>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	030d0520 	movweq	r0, #54560	; 0xd520
     c80:	0b052076 	bleq	148e60 <__ccfg+0x128eb8>
     c84:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
     c88:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	06010513 			; <UNDEFINED> instruction: 0x06010513
     c90:	06030519 			; <UNDEFINED> instruction: 0x06030519
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	0a052f29 	beq	14c940 <__ccfg+0x12c998>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	09020106 	stmdbeq	r2, {r1, r2, r8}
     c9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     ca0:	02050033 	andeq	r0, r5, #51	; 0x33
     ca4:	00000664 	andeq	r0, r0, r4, ror #12
     ca8:	0105d303 	tsteq	r5, r3, lsl #6
			SysCtrlSetRechargeBeforePowerDown
     cac:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cb0:	03063305 	movweq	r3, #25349	; 0x6305
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb4:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
     cb8:	03330527 	teqeq	r3, #163577856	; 0x9c00000
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	02053c79 	andeq	r3, r5, #30976	; 0x7900
     cc0:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
     cc4:	03050502 	movweq	r0, #21762	; 0x5502
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc8:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
     ccc:	06020501 	streq	r0, [r2], -r1, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	0104ab03 	tsteq	r4, r3, lsl #22
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
     cd8:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
     cdc:	017dd903 	cmneq	sp, r3, lsl #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ce0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			while (!(AONWUCPowerStatusGet () &
     ce4:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	03010501 	movweq	r0, #5377	; 0x1501
     cec:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
     cf0:	03230506 			; <UNDEFINED> instruction: 0x03230506
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
     cf8:	054f0605 	strbeq	r0, [pc, #-1541]	; 6fb <ioreq_uart_a+0xb>
     cfc:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
     d00:	06020501 	streq	r0, [r2], -r1, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	66029e03 	strvs	r9, [r2], -r3, lsl #28
     d08:	01060d05 	tsteq	r6, r5, lsl #26
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	2f060205 	svccs	0x00060205
     d10:	13060105 	movwne	r0, #24837	; 0x6105
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	01000c02 	tsteq	r0, r2, lsl #24
			reinit_uart ();
     d18:	001c0501 	andseq	r0, ip, r1, lsl #10
     d1c:	06b80205 	ldrteq	r0, [r8], r5, lsl #4
     d20:	ef030000 	svc	0x00030000
}
     d24:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
     d2c:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	17050501 	strne	r0, [r5, -r1, lsl #10]
     d34:	01062305 	tsteq	r6, r5, lsl #6
     d38:	02050104 	andeq	r0, r5, #4, 2
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	20028803 	andcs	r8, r2, r3, lsl #16
     d40:	23050604 	movwcs	r0, #22020	; 0x5604
     d44:	207df803 	rsbscs	pc, sp, r3, lsl #16
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d48:	02050104 	andeq	r0, r5, #4, 2
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
     d58:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	17050517 	smladne	r5, r7, r5, r0
     d60:	01062305 	tsteq	r6, r5, lsl #6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d64:	02050104 	andeq	r0, r5, #4, 2
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     d68:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d6c:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
     d70:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
			PRCMPowerDomainOff (
     d74:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
     d78:	01062405 	tsteq	r6, r5, lsl #8
	__SLEEP;
     d7c:	02050104 	andeq	r0, r5, #4, 2
     d80:	7db20306 	ldcvc	3, cr0, [r2, #24]!
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	000e0258 	andeq	r0, lr, r8, asr r2
	goto Redo;
     d88:	3d050101 	stfccs	f0, [r5, #-4]
     d8c:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     d90:	03000006 	movweq	r0, #6
     d94:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
     d98:	3d051402 	cfstrscc	mvf1, [r5, #-8]
     d9c:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
     da0:	0b030605 	bleq	c25bc <__ccfg+0xa2614>
     da4:	060e0582 	streq	r0, [lr], -r2, lsl #11
     da8:	2f080501 	svccs	0x00080501
     dac:	051f0e05 	ldreq	r0, [pc, #-3589]	; ffffffaf <_estack+0xdfffafaf>
     db0:	052f0605 	streq	r0, [pc, #-1541]!	; 7b3 <ioreq_uart_a+0xc3>
     db4:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
     db8:	0f052006 	svceq	0x00052006
     dbc:	0604052e 	streq	r0, [r4], -lr, lsr #10
     dc0:	06070534 			; <UNDEFINED> instruction: 0x06070534
     dc4:	06050501 	streq	r0, [r5], -r1, lsl #10
     dc8:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
     dcc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     dd0:	20340301 	eorscs	r0, r4, r1, lsl #6
     dd4:	a0030905 	andge	r0, r3, r5, lsl #18
     dd8:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
     ddc:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
     de0:	0e052108 	adfeqs	f2, f5, #0.0
     de4:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
     de8:	0b030604 	bleq	c2600 <__ccfg+0xa2658>
     dec:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
     df0:	07050106 	streq	r0, [r5, -r6, lsl #2]
int main (void) {
     df4:	0605052e 	streq	r0, [r5], -lr, lsr #10
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
     dfc:	060b0524 	streq	r0, [fp], -r4, lsr #10
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	21062d04 	tstcs	r6, r4, lsl #26
	system_init ();
     e08:	01060b05 	tsteq	r6, r5, lsl #22
	tcv_init ();
     e0c:	03060505 	movweq	r0, #25861	; 0x6505
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e10:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
     e14:	05053006 	streq	r3, [r5, #-6]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
     e1c:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
     e20:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e24:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     e28:	07053506 	streq	r3, [r5, -r6, lsl #10]
	delay (16, 0);
     e2c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     e30:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
     e34:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	__pi_release ();
     e38:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
     e3c:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
     e40:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
     e44:	03040520 	movweq	r0, #17696	; 0x4520
     e48:	08052030 	stmdaeq	r5, {r4, r5, sp}
     e4c:	03050521 	movweq	r0, #21793	; 0x5521
     e50:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
static void killev (__pi_pcb_t *pid) {
     e54:	3c110306 	ldccc	3, cr0, [r1], {6}
	wfun = (aword)(pid->code);
     e58:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
	for_all_tasks (i) {
     e5c:	1f04053d 	svcne	0x0004053d
		for (j = 0; j < nevents (i); j++) {
     e60:	0b052f06 	bleq	14ca80 <__ccfg+0x12cad8>
     e64:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     e68:	07052506 	streq	r2, [r5, -r6, lsl #10]
			    || i->Events [j] . Event == wfun
     e6c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		for (j = 0; j < nevents (i); j++) {
     e70:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
			if (i->Events [j] . Event == (aword)pid
     e74:	08050106 	stmdaeq	r5, {r1, r2, r8}
     e78:	0605054a 	streq	r0, [r5], -sl, asr #10
     e7c:	06040531 			; <UNDEFINED> instruction: 0x06040531
				wakeupev (i, j);
     e80:	062e1603 	strteq	r1, [lr], -r3, lsl #12
     e84:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
	for_all_tasks (i) {
     e88:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
}
     e8c:	052f0605 	streq	r0, [pc, #-1541]!	; 88f <UART0IntHandler+0x8f>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	7f880302 	svcvc	0x00880302
static void qfree (aword *ch) {
     e94:	06100501 	ldreq	r0, [r0], -r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	030c0501 	movweq	r0, #50433	; 0xc501
	cc = (aword*)(mpools + MA_NP);
     e9c:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
	m_setnextp (ch, chunk);
     ea0:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
	m_setnextp (cc, ch);
     ea4:	0c052f06 	stceq	15, cr2, [r5], {6}
}
     ea8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	20110306 	andscs	r0, r1, r6, lsl #6
     eb0:	01001202 	tsteq	r0, r2, lsl #4
     eb4:	002b0501 	eoreq	r0, fp, r1, lsl #10
			m_setnextp (cc, m_nextp (chunk));
     eb8:	00000205 	andeq	r0, r0, r5, lsl #4
			m_size (chunk) += m_hdrlen + m_size (ch);
     ebc:	ea030000 	b	c0ec4 <__ccfg+0xa0f1c>
     ec0:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
     ec4:	06010514 			; <UNDEFINED> instruction: 0x06010514
     ec8:	00060213 	andeq	r0, r6, r3, lsl r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	19050101 	stmdbne	r5, {r0, r8}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed0:	00020500 	andeq	r0, r2, r0, lsl #10
     ed4:	03000008 	movweq	r0, #8
     ed8:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
			m_setnextp (cc, m_nextp (chunk));
     edc:	06041402 	streq	r1, [r4], -r2, lsl #8
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	12032405 	andne	r2, r3, #83886080	; 0x5000000
     ee4:	17050501 	strne	r0, [r5, -r1, lsl #10]
     ee8:	01062205 	tsteq	r6, r5, lsl #4
     eec:	19050104 	stmdbne	r5, {r2, r8}
     ef0:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
     ef4:	03220506 			; <UNDEFINED> instruction: 0x03220506
			if (m_size (chunk) >= m_size (ch))
     ef8:	01042019 	tsteq	r4, r9, lsl r0
     efc:	6b030605 	blvs	c2718 <__ccfg+0xa2770>
     f00:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
		chunk = m_nextp (chunk))
     f04:	20150322 	andscs	r0, r5, r2, lsr #6
     f08:	02050104 	andeq	r0, r5, #4, 2
     f0c:	206b0306 	rsbcs	r0, fp, r6, lsl #6
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f10:	01060605 	tsteq	r6, r5, lsl #12
	diag_wait (a);
     f14:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
	diag_wchar (c, a);
     f18:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
     f1c:	0603052e 	streq	r0, [r3], -lr, lsr #10
}
     f20:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
     f24:	01010113 	tsteq	r1, r3, lsl r1
	syserror (ESTATE, "state");
     f28:	0620062e 	strteq	r0, [r0], -lr, lsr #12
     f2c:	4a662e66 	bmi	198c8cc <__ccfg+0x196c924>
     f30:	02052e01 	andeq	r2, r5, #1, 28
     f34:	06060515 			; <UNDEFINED> instruction: 0x06060515
void update_n_wake (word min, Boolean force) {
     f38:	20050501 	andcs	r0, r5, r1, lsl #10
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     f40:	03052e18 	movweq	r2, #24088	; 0x5e18
     f44:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	014b062c 	cmpeq	fp, ip, lsr #12
     f4c:	01011358 	tsteq	r1, r8, asr r3
     f50:	20062e01 	andcs	r2, r6, r1, lsl #28
     f54:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
     f58:	0105014a 	tsteq	r5, sl, asr #2
     f5c:	0b023206 	bleq	8d77c <__ccfg+0x6d7d4>
     f60:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     f64:	02050021 	andeq	r0, r5, #33	; 0x21
     f68:	000008c0 	andeq	r0, r0, r0, asr #17
     f6c:	0107d903 	tsteq	r7, r3, lsl #18
     f70:	13140205 	tstne	r4, #1342177280	; 0x50000000
     f74:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
     f78:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
		for_all_tasks (i) {
     f7c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	__pi_mintk = znew + min;
     f80:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
     f84:	03040106 	movweq	r0, #16646	; 0x4106
			if (!twaiting (i))
     f88:	83030305 	movwhi	r0, #13061	; 0x3305
     f8c:	01042079 	tsteq	r4, r9, ror r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	03060205 	movweq	r0, #25093	; 0x6205
     f94:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
     f98:	0305010e 	movweq	r0, #20750	; 0x510e
     f9c:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
     fa0:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
     fa4:	0104017d 	tsteq	r4, sp, ror r1
     fa8:	d3030805 	movwle	r0, #14341	; 0x3805
     fac:	04042002 	streq	r2, [r4], #-2
     fb0:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
     fb4:	0104207d 	tsteq	r4, sp, ror r0
     fb8:	d3030805 	movwle	r0, #14341	; 0x3805
     fbc:	03052002 	movweq	r2, #20482	; 0x5002
				wakeuptm (i);
     fc0:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
     fc4:	21060305 	tstcs	r6, r5, lsl #6
		for_all_tasks (i) {
     fc8:	29050404 	stmdbcs	r5, {r2, sl}
				d = i->Timer - znew;
     fcc:	017da703 	cmneq	sp, r3, lsl #14
     fd0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     fd4:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	01042e2d 	tsteq	r4, sp, lsr #28
     fdc:	03060305 	movweq	r0, #25349	; 0x6305
     fe0:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
	__pi_old = znew;
     fe4:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
}
     fe8:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
	TCI_RUN_DELAY_TIMER;
     fec:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
}
     ff0:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
     ff4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     ff8:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
     ffc:	58410520 	stmdapl	r1, {r5, r8, sl}^
    1000:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
void proceed (word state) {
    1004:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
	prcdstate (__pi_curr, state);
    1008:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
    100c:	03290504 			; <UNDEFINED> instruction: 0x03290504
	release;
    1010:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
    1014:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
void __pi_wait (aword event, word state) {
    1018:	01040106 	tsteq	r4, r6, lsl #2
	sint j = nevents (__pi_curr);
    101c:	03060305 	movweq	r0, #25349	; 0x6305
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    1024:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
    1028:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
		syserror (ENEVENTS, "sw");
    102c:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    1030:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
	setestate (__pi_curr->Events [j], state, event);
    1034:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
	incwait (__pi_curr);
    1038:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	setestate (__pi_curr->Events [j], state, event);
    103c:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
}
    1040:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1044:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1048:	02050021 	andeq	r0, r5, #33	; 0x21
void __pi_trigger (aword event) {
    104c:	00000904 	andeq	r0, r0, r4, lsl #18
	for_all_tasks (i) {
    1050:	0107ec03 	tsteq	r7, r3, lsl #24
		for (j = 0; j < nevents (i); j++) {
    1054:	13140205 	tstne	r4, #1342177280	; 0x50000000
    1058:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    105c:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
    1060:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			if (i->Events [j] . Event == event) {
    1064:	90030621 	andls	r0, r3, r1, lsr #12
    1068:	03040107 	movweq	r0, #16647	; 0x4107
    106c:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
				wakeupev (i, j);
    1070:	01042078 	tsteq	r4, r8, ror r0
    1074:	03060205 	movweq	r0, #25093	; 0x6205
	for_all_tasks (i) {
    1078:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
}
    107c:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
aword __pi_join (aword pid, word st) {
    1080:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
	for_all_tasks (i) {
    1084:	9b033305 	blls	cdca0 <__ccfg+0xadcf8>
    1088:	0104207d 	tsteq	r4, sp, ror r0
	return 0;
    108c:	e6030805 	str	r0, [r3], -r5, lsl #16
		if ((aword)i == pid) {
    1090:	04042002 	streq	r2, [r4], #-2
			__pi_wait (pid, st);
    1094:	9a032d05 	bls	cc4b0 <__ccfg+0xac508>
}
    1098:	0104207d 	tsteq	r4, sp, ror r0
	for_all_tasks (i) {
    109c:	e8030305 	stmda	r3, {r0, r2, r8, r9}
    10a0:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
void delay (word d, word state) {
    10a4:	01060805 	tsteq	r6, r5, lsl #16
	settstate (__pi_curr, state);
    10a8:	051f1e05 	ldreq	r1, [pc, #-3589]	; 2ab <root+0x77>
    10ac:	03052106 	movweq	r2, #20742	; 0x5106
    10b0:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
    10b4:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
	update_n_wake (d, YES);
    10b8:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    10bc:	06330517 			; <UNDEFINED> instruction: 0x06330517
	__pi_curr->Timer = __pi_old + d;
    10c0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    10c4:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	inctimer (__pi_curr);
    10c8:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
    10cc:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    10d0:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
}
    10d4:	03050104 	movweq	r0, #20740	; 0x5104
    10d8:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
	if (fun == NULL)
    10dc:	06410520 	strbeq	r0, [r1], -r0, lsr #10
		return (int) __pi_curr;
    10e0:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
    10e4:	010e051d 	tsteq	lr, sp, lsl r5
	for_all_tasks (i)
    10e8:	01060205 	tsteq	r6, r5, lsl #4
}
    10ec:	03042606 	movweq	r2, #17926	; 0x4606
		if (i->code == fun)
    10f0:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
	for_all_tasks (i)
    10f4:	01040178 	tsteq	r4, r8, ror r1
    10f8:	03060105 	movweq	r0, #24837	; 0x6105
    10fc:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
int __pi_strlen (const char *s) {
    1100:	01010008 	tsteq	r1, r8
	for (i = 0; *(s+i) != '\0'; i++);
    1104:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
}
    1108:	00094002 	andeq	r4, r9, r2
	for (i = 0; *(s+i) != '\0'; i++);
    110c:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
	while (n--)
    1110:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
    1114:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
		*dest++ = *src++;
    1118:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    111c:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
    1120:	07040107 	streq	r0, [r4, -r7, lsl #2]
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	bb030505 	bllt	c2540 <__ccfg+0xa2598>
		syserror (EREQPAR, "addv");
    1128:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
		syserror (ERESOURCE, "addv");
    112c:	0602052e 	streq	r0, [r2], -lr, lsr #10
	if (ioreq [loc] != NULL)
    1130:	01013d3d 	tsteq	r1, sp, lsr sp
    1134:	20063c01 	andcs	r3, r6, r1, lsl #24
		syserror (ERESOURCE, "addv");
    1138:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	ioreq [loc] = rf;
    113c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
}
    1140:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    1144:	050f0105 	streq	r0, [pc, #-261]	; 1047 <__pi_wait+0x2f>
sint io (word retry, word dev, word operation, char *buf, word len) {
    1148:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    114c:	02052004 	andeq	r2, r5, #4
    1150:	01013d06 	tsteq	r1, r6, lsl #26
    1154:	20063c01 	andcs	r3, r6, r1, lsl #24
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1158:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    115c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
    1160:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
		syserror (ENODEVICE, "io");
    1164:	06010501 	streq	r0, [r1], -r1, lsl #10
    1168:	0107d003 	tsteq	r7, r3
	if (len == 0)
    116c:	01000b02 	tsteq	r0, r2, lsl #22
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	00150501 	andseq	r0, r5, r1, lsl #10
    1174:	09e40205 	stmibeq	r4!, {r0, r2, r9}^
	if (ret >= 0)
    1178:	80030000 	andhi	r0, r3, r0
	if (ret == -1) {
    117c:	02050108 	andeq	r0, r5, #8, 2
    1180:	06150514 			; <UNDEFINED> instruction: 0x06150514
		if (retry == WNONE)
    1184:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
		iowait (dev, operation, retry);
    1188:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    118c:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
    1190:	a7030505 	strge	r0, [r3, -r5, lsl #10]
			release;
    1194:	3105017c 	tstcc	r5, ip, ror r1
	if (ret == -2) {
    1198:	01040106 	tsteq	r4, r6, lsl #2
		if (retry != WNONE) {
    119c:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
    11a0:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
			iowait (dev, operation, retry);
    11a4:	bb033105 	bllt	cd5c0 <__ccfg+0xad618>
    11a8:	01042002 	tsteq	r4, r2
			(ioreq [dev]) (NONE, buf, len);
    11ac:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
    11b0:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
    11b4:	9b030505 	blls	c25d0 <__ccfg+0xa2628>
		(ioreq [dev]) (NONE, buf, len);
    11b8:	2d052e02 	stccs	14, cr2, [r5, #-8]
    11bc:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
    11c0:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
}
    11c4:	03310509 	teqeq	r1, #37748736	; 0x2400000
	if (retry != WNONE) {
    11c8:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
		delay (-ret - 2, retry);
    11cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    11d0:	2003dc03 	andcs	sp, r3, r3, lsl #24
    11d4:	0179e703 	cmneq	r9, r3, lsl #14
    11d8:	01070514 	tsteq	r7, r4, lsl r5
		release;
    11dc:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
    11e0:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
    11e8:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
    11ec:	2f060305 	svccs	0x00060305
    11f0:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
    11f4:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
		syserror (ERESOURCE, "mal1");
    11f8:	052f0603 	streq	r0, [pc, #-1539]!	; bfd <__pi_release+0x61>
    11fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1200:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
    1204:	03290504 			; <UNDEFINED> instruction: 0x03290504
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1208:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
	m_size (mpools [0]) = mlen - m_hdrlen;
    120c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1210:	06380517 			; <UNDEFINED> instruction: 0x06380517
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1214:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    1218:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
}
    121c:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
    1220:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    1224:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    1228:	27032905 	strcs	r2, [r3, -r5, lsl #18]
    122c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1230:	01062d05 	tsteq	r6, r5, lsl #26
void __pi_free (aword *ch) {
    1234:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1238:	3c560306 	mrrccc	3, 0, r0, r6, cr6
    123c:	29050404 	stmdbcs	r5, {r2, sl}
		syserror (EMALLOC, "malg");
    1240:	0100db03 	tsteq	r0, r3, lsl #22
    1244:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	mcfree [MA_NP] += m_size (ch);
    1248:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		m_size (ch) ^= MALLOC_UMASK;
    124c:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    1250:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
	mcfree [MA_NP] += m_size (ch);
    1254:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
	QFREE;
    1258:	06010602 	streq	r0, [r1], -r2, lsl #12
	if (mevent [MA_NP] . nwait) {
    125c:	2e069a03 	vmlacs.f32	s18, s12, s6
    1260:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
		trigger ((aword)(&(mevent [MA_NP])));
    1264:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
		mevent [MA_NP] . nwait --;
    1268:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
}
    126c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1270:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1274:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
    1278:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
void kill (aword pid) {
    127c:	7a9a032d 	bvc	fe681f38 <_estack+0xde67cf38>
		pid = (aword) __pi_curr;
    1280:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	j = NULL;
    1284:	e6030602 	str	r0, [r3], -r2, lsl #12
	for_all_tasks (i) {
    1288:	04042005 	streq	r2, [r4], #-5
	syserror (EREQPAR, "kpi");
    128c:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
    1290:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
		if ((aword)i == pid) {
    1294:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1298:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				__PCB = i->Next;
    129c:	e6030602 	str	r0, [r3], -r2, lsl #12
			killev (i);
    12a0:	01012005 	tsteq	r1, r5
			ufree (i);
    12a4:	01010101 	tsteq	r1, r1, lsl #2
			if (i == __pi_curr)
    12a8:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    12ac:	29050404 	stmdbcs	r5, {r2, sl}
				release;
    12b0:	017acb03 	cmneq	sl, r3, lsl #22
				j->Next = i->Next;
    12b4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    12b8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    12bc:	03020501 	movweq	r0, #9473	; 0x2501
}
    12c0:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
    12c4:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    12c8:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
	if (size < 8)
    12cc:	06020501 	streq	r0, [r2], -r1, lsl #10
		_size = 2;
    12d0:	2005b003 	andcs	fp, r5, r3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12d4:	29050404 	stmdbcs	r5, {r2, sl}
		_size = (((aword)size) + 3) >> 2;
    12d8:	017acb03 	cmneq	sl, r3, lsl #22
		if (m_magic (chunk) != MALLOC_MAGIC)
    12dc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		_size = (((aword)size) + 3) >> 2;
    12e0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		if (mevent [MA_NP] . nfail != 255)
    12e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    12e8:	2005b003 	andcs	fp, r5, r3
			mevent [MA_NP] . nfail ++;
    12ec:	01010101 	tsteq	r1, r1, lsl #2
		mnfree [MA_NP] = 0;
    12f0:	23050101 	movwcs	r0, #20737	; 0x5101
    12f4:	01100306 	tsteq	r0, r6, lsl #6
		if (m_magic (chunk) != MALLOC_MAGIC)
    12f8:	70030205 	andvc	r0, r3, r5, lsl #4
    12fc:	01580620 	cmpeq	r8, r0, lsr #12
			syserror (EMALLOC, "malc");
    1300:	010d032e 	tsteq	sp, lr, lsr #6
    1304:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
		if (m_size (chunk) >= _size)
    1308:	017ecd03 	cmneq	lr, r3, lsl #26
    130c:	01062f05 	tsteq	r6, r5, lsl #30
		chunk = m_nextp (chunk)) {
    1310:	27050104 	strcs	r0, [r5, -r4, lsl #2]
		m_setnextp (cc, m_nextp (chunk));
    1314:	2001ba03 	andcs	fp, r1, r3, lsl #20
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1318:	2f050a04 	svccs	0x00050a04
    131c:	207ec603 	rsbscs	ip, lr, r3, lsl #12
			m_size (chunk) = _size;
    1320:	02050104 	andeq	r0, r5, #4, 2
			cc = chunk + _size + m_hdrlen;
    1324:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
    1328:	06230520 	strteq	r0, [r3], -r0, lsr #10
			m_size (cc) = waste - m_hdrlen;
    132c:	03020513 	movweq	r0, #9491	; 0x2513
			QFREE;
    1330:	2305200c 	movwcs	r2, #20492	; 0x500c
		mevent [MA_NP] . nfail = 0;
    1334:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
		mcfree [MA_NP] -= m_size (chunk);
    1338:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    133c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    1340:	27052802 	strcs	r2, [r5, -r2, lsl #16]
    1344:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
		m_size (chunk) |= MALLOC_UMASK;
    1348:	3f280602 	svccc	0x00280602
		if (mnfree [MA_NP] > mcfree [MA_NP])
    134c:	4a0a0331 	bmi	282018 <__ccfg+0x262070>
		m_size (chunk) |= MALLOC_UMASK;
    1350:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
}
    1358:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    135c:	017eae03 	cmneq	lr, r3, lsl #28
    1360:	0d050104 	stfeqs	f0, [r5, #-16]
    1364:	01d40306 	bicseq	r0, r4, r6, lsl #6
    1368:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    136c:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
    1370:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
aword __pi_fork (fsmcode func, aword data) {
    1374:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	0d052001 	stceq	0, cr2, [r5, #-4]
    137c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1380:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
		if ((j = __PCB) == NULL)
    1384:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
	i->Next = NULL;
    1388:	0605152e 	streq	r1, [r5], -lr, lsr #10
	i->data = data;
    138c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if ((j = __PCB) == NULL)
    1390:	0603052e 	streq	r0, [r3], -lr, lsr #10
}
    1394:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
			for (; j->Next != NULL; j = j->Next);
    1398:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
    139c:	030c0401 	movweq	r0, #50177	; 0xc401
	return (aword) i;
    13a0:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
    13a4:	0b040106 	bleq	1017c4 <__ccfg+0xe181c>
	if (mevent [MA_NP] . nwait != 255)
    13a8:	03060505 	movweq	r0, #25861	; 0x6505
    13ac:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
    13b0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		mevent [MA_NP] . nwait ++;
    13b4:	01044b06 	tsteq	r4, r6, lsl #22
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
    13bc:	03054a06 	movweq	r4, #23046	; 0x5a06
void diag (const char *mess, ...) {
    13c0:	13040513 	movwne	r0, #17683	; 0x4513
    13c4:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
    13c8:	cb031902 	blgt	c77d8 <__ccfg+0xa7830>
	diag_disable_int (a, is);
    13cc:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
    13d0:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
    13d4:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
				d = (bc == 16) ? 10000 : 1000000000;
    13d8:	06230517 			; <UNDEFINED> instruction: 0x06230517
	diag_disable_int (a, is);
    13dc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	while (*mess != '\0') {
    13e0:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
	dgout ('\r');
    13e4:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
	dgout ('\n');
    13e8:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
    13ec:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    13f0:	dd030602 	stcle	6, cr0, [r3, #-8]
	diag_wait (a);
    13f4:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
	diag_enable_int (a, is);
    13f8:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    13fc:	03052d02 	movweq	r2, #23810	; 0x5d02
}
    1400:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
    1404:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
    1408:	03051306 	movweq	r1, #21254	; 0x5306
		if (*mess == '%') {
    140c:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
    1410:	1f050101 	svcne	0x00050101
			if (*mess == 'l') {
    1414:	00020500 	andeq	r0, r2, r0, lsl #10
    1418:	03000000 	movweq	r0, #0
				mess++;
    141c:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
				val = va_arg (ap, lword);
    1420:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
				bc = 32;
    1424:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
				bc = 16;
    1428:	2c056615 	stccs	6, cr6, [r5], {21}
			switch (*mess) {
    142c:	20150520 	andscs	r0, r5, r0, lsr #10
    1430:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    1434:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
				dgout ('%');
    1438:	03022301 	movweq	r2, #8961	; 0x2301
    143c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				dgout (*mess);
    1440:	0205001c 	andeq	r0, r5, #28
    1444:	00000000 	andeq	r0, r0, r0
			switch (*mess) {
    1448:	010adb03 	tsteq	sl, r3, lsl #22
					v = __pi_hex_enc_table [
    144c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
					i += 4;
    1450:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
					(val >> (bc - i)) & 0xf];
    1454:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
    1458:	07052506 	streq	r2, [r5, -r6, lsl #10]
					dgout (v);
    145c:	58060520 	stmdapl	r6, {r5, r8, sl}
    1460:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
				while (i < bc) {
    1464:	01060605 	tsteq	r6, r5, lsl #12
			mess++;
    1468:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
					d /= 10;
    146c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
				if ((val >> (bc - 1)) & 1) {
    1470:	06200602 	strteq	r0, [r0], -r2, lsl #12
    1474:	0601054d 	streq	r0, [r1], -sp, asr #10
					dgout ('-');
    1478:	00040213 	andeq	r0, r4, r3, lsl r2
    147c:	31050101 	tstcc	r5, r1, lsl #2
						val |= 0xffff0000;
    1480:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1484:	0300000b 	movweq	r0, #11
    1488:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
				d = (bc == 16) ? 10000 : 1000000000;
    148c:	03041402 	movweq	r1, #17410	; 0x4402
    1490:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
    1494:	01040177 	tsteq	r4, r7, ror r1
					v = (word) (val / d);
    1498:	03063105 	movweq	r3, #24837	; 0x6105
					if (v || d == 1) break;
    149c:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
    14a0:	03030503 	movweq	r0, #13571	; 0x3503
					d /= 10;
    14a4:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	03310501 	teqeq	r1, #4194304	; 0x400000
					dgout (v + '0');
    14ac:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
    14b0:	03030503 	movweq	r0, #13571	; 0x3503
    14b4:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
					d /= 10;
    14b8:	06020501 	streq	r0, [r2], -r1, lsl #10
					val = val - (v * d);
    14bc:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
					if (d == 0) break;
    14c0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
					v = (word) (val / d);
    14c4:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
    14c8:	01046676 	tsteq	r4, r6, ror r6
				if (bc == 16)
    14cc:	03060205 	movweq	r0, #25093	; 0x6205
				d = (bc == 16) ? 10000 : 1000000000;
    14d0:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
					val &= 0xffff;
    14d4:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
					dgout (*s);
    14d8:	19010101 	stmdbne	r1, {r0, r8}
					s++;
    14dc:	01044a5b 	tsteq	r4, fp, asr sl
				while (*s != '\0') {
    14e0:	03061a05 	movweq	r1, #27141	; 0x6a05
    14e4:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
			dgout (*mess++);
    14e8:	0602050d 	streq	r0, [r2], -sp, lsl #10
    14ec:	2076f903 	rsbscs	pc, r6, r3, lsl #18
    14f0:	01010101 	tsteq	r1, r1, lsl #2
    14f4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    14f8:	01360303 	teqeq	r6, r3, lsl #6
}
    14fc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    while(1)
    1500:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
{
    1504:	eb030104 	bl	c191c <__ccfg+0xa1974>
    SetupTrimDevice();
    1508:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
    pui32Src = &_etext;
    150c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1510:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
    __asm("    ldr     r0, =_bss\n"
    1514:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1518:	20150520 	andscs	r0, r5, r0, lsr #10
    151c:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    1520:	216a0604 	cmncs	sl, r4, lsl #12
    1524:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
   main();
    1528:	01778e03 	cmneq	r7, r3, lsl #28
    FaultISR();
    152c:	03050304 	movweq	r0, #21252	; 0x5304
        *pui32Dest++ = *pui32Src++;
    1530:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
    1534:	0302050d 	movweq	r0, #9485	; 0x250d
    1538:	20202055 	eorcs	r2, r0, r5, asr r0
    153c:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
    1540:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
    1544:	a6030305 	strge	r0, [r3], -r5, lsl #6
    1548:	10054a75 	andne	r4, r5, r5, ror sl
    154c:	06050106 	streq	r0, [r5], -r6, lsl #2
static byte get_byte () {
    1550:	20230520 	eorcs	r0, r3, r0, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1554:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    1558:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    155c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    1560:	052f0604 	streq	r0, [pc, #-1540]!	; f64 <update_n_wake+0x2c>
		if (ee_inp)
    1564:	01041c02 	tsteq	r4, r2, lsl #24
			b |= 1;
    1568:	8f030405 	svchi	0x00030405
    156c:	2a052e09 	bcs	14cd98 <__ccfg+0x12cdf0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1570:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	for (b = 0, i = 0; i < 8; i++) {
    1574:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
}
    1578:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    157c:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
    1580:	017fb203 	cmneq	pc, r3, lsl #4
static void put_byte (byte b) {
    1584:	01062905 	tsteq	r6, r5, lsl #18
    1588:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    158c:	00d10306 	sbcseq	r0, r1, r6, lsl #6
    1590:	02044d66 	andeq	r4, r4, #6528	; 0x1980
		if (b & 0x80)
    1594:	9f030505 	svcls	0x00030505
    1598:	01040178 	tsteq	r4, r8, ror r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    159c:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
	for (i = 0; i < 8; i++) {
    15a0:	1a052007 	bne	1495c4 <__ccfg+0x12961c>
		b <<= 1;
    15a4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	for (i = 0; i < 8; i++) {
    15a8:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
}
    15ac:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    15b0:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    15b4:	03050502 	movweq	r0, #21762	; 0x5502
    15b8:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
	put_byte (cmd);
    15bc:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
    15c0:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    15c4:	2007f103 	andcs	pc, r7, r3, lsl #2
    15c8:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
static void wwait (word st, word del) {
    15cc:	0178a003 	cmneq	r8, r3
    15d0:	31050904 	tstcc	r5, r4, lsl #18
    15d4:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
	while (dopen && (rdsr () & 1)) {
    15d8:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
    15dc:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
    15e0:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
    15e4:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
	put_byte (CMD_RDSR);
    15e8:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
	r = get_byte ();
    15ec:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
    15f0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	while (dopen && (rdsr () & 1)) {
    15f4:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
}
    15f8:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
		if (st == WNONE)
    15fc:	a0033105 	andge	r3, r3, r5, lsl #2
    1600:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
			mdelay (1);
    1604:	06520515 			; <UNDEFINED> instruction: 0x06520515
    1608:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			delay (del, st);
    160c:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
    1610:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
			release;
    1614:	7a9b0352 	bvc	fe6c2364 <_estack+0xde6bd364>
    1618:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    161c:	e0030604 	and	r0, r3, r4, lsl #12
static void ready () {
    1620:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
	if (dopen) {
    1624:	86030505 	strhi	r0, [r3], -r5, lsl #10
		wwait (WNONE, 1);
    1628:	01040178 	tsteq	r4, r8, ror r1
    162c:	fc030405 	stc2	4, cr0, [r3], {5}
    1630:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
	dstat = 0;
    1634:	ea030505 	b	c2a50 <__ccfg+0xa2aa8>
}
    1638:	3105017a 	tstcc	r5, sl, ror r1
    163c:	29050106 	stmdbcs	r5, {r1, r2, r8}
    1640:	2004b603 	andcs	fp, r4, r3, lsl #12
	udelay (1);
    1644:	ca033105 	bgt	cda60 <__ccfg+0xadab8>
    1648:	01042e7b 	tsteq	r4, fp, ror lr
	udelay (1);
    164c:	03060405 	movweq	r0, #25605	; 0x6405
		dopen = DOPEN_TEMP;
    1650:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
    1654:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    1658:	6a062004 	bvs	189670 <__ccfg+0x1696c8>
    165c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
static void cclose () {
    1660:	01799f03 	cmneq	r9, r3, lsl #30
	if (dopen == DOPEN_TEMP) {
    1664:	01063f05 	tsteq	r6, r5, lsl #30
    1668:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		wwait (WNONE, 1);
    166c:	2006ed03 	andcs	lr, r6, r3, lsl #26
    1670:	3f050904 	svccc	0x00050904
	cmd_0 (CMD_DP);
    1674:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1678:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		dopen = 0;
    167c:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
}
    1680:	0309042e 	movweq	r0, #37934	; 0x942e
word ee_open () {
    1684:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
	ready ();
    1688:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
	dopen = DOPEN_PERM;
    168c:	03040501 	movweq	r0, #17665	; 0x4501
    1690:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
}
    1694:	03290509 			; <UNDEFINED> instruction: 0x03290509
	if (dopen) {
    1698:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
    169c:	06040501 	streq	r0, [r4], -r1, lsl #10
		dopen = DOPEN_TEMP;
    16a0:	4a00f303 	bmi	3e2b4 <__ccfg+0x1e30c>
		cclose ();
    16a4:	0204404d 	andeq	r4, r4, #77	; 0x4d
}
    16a8:	ea030505 	b	c2ac4 <__ccfg+0xa2b1c>
int ser_in (word st, char *buf, int len) {
    16ac:	01040177 	tsteq	r4, r7, ror r1
    16b0:	99030405 	stmdbls	r3, {r0, r2, sl}
	if (len == 0)
    16b4:	1a052008 	bne	1496dc <__ccfg+0x129734>
	if (__inpline == NULL) {
    16b8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if ((prcs = running (__inserial)) == 0) {
    16bc:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    16c0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
			prcs = runthread (__inserial);
    16c4:	1a052304 	bne	14a2dc <__ccfg+0x12a334>
    16c8:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
			if (prcs == 0) {
    16cc:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
				npwait (st);
    16d0:	017eee03 	cmneq	lr, r3, lsl #28
		release;
    16d4:	01062905 	tsteq	r6, r5, lsl #18
		join (prcs, st);
    16d8:	0d050e04 	stceq	14, cr0, [r5, #-16]
    16dc:	2e7bdb03 	vaddcs.f64	d29, d11, d3
	if (*__inpline == NULL) // bin cmd
    16e0:	29050904 	stmdbcs	r5, {r2, r8, fp}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    16e4:	2004a503 	andcs	sl, r4, r3, lsl #10
	if (prcs >= len)
    16e8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		prcs = len-1;
    16ec:	01970306 	orrseq	r0, r7, r6, lsl #6
	memcpy (buf, __inpline, prcs);
    16f0:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
    16f4:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    16f8:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
	ufree (__inpline);
    16fc:	01065205 	tsteq	r6, r5, lsl #4
	__inpline = NULL;
    1700:	1a050104 	bne	141b18 <__ccfg+0x121b70>
	if (*buf) // if it's NULL, it's a bin cmd
    1704:	068c0306 	streq	r0, [ip], r6, lsl #6
		buf [prcs] = '\0';
    1708:	110a052e 	tstne	sl, lr, lsr #10
}
    170c:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		prcs = strlen (__inpline);
    1710:	017ac303 	cmneq	sl, r3, lsl #6
    1714:	01060d05 	tsteq	r6, r5, lsl #26
		return 0;
    1718:	0a050104 	beq	141b30 <__ccfg+0x121b88>
    171c:	2005bd03 	andcs	fp, r5, r3, lsl #26
    1720:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
int ser_outf (word st, const char *m, ...) {
    1724:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    1728:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
	if ((prcs = running (__outserial)) != 0) {
    172c:	110a0521 	tstne	sl, r1, lsr #10
    1730:	01060b05 	tsteq	r6, r5, lsl #22
		join (prcs, st);
    1734:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
    1738:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
		release;
    173c:	03050509 	movweq	r0, #21769	; 0x5509
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1740:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
    1744:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    1748:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
		umwait (st);
    174c:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    1750:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
	if (runstrand (__outserial, buf) == 0) {
    1754:	06040501 	streq	r0, [r4], -r1, lsl #10
    1758:	2005cb03 	andcs	ip, r5, r3, lsl #22
    175c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
		ufree (buf);
    1760:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
		npwait (st);
    1764:	01063f05 	tsteq	r6, r5, lsl #30
}
    1768:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    176c:	07920306 	ldreq	r0, [r2, r6, lsl #6]
    1770:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1774:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
int ser_inf (word st, const char *fmt, ...) {
    1778:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    177c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (fmt == NULL)
    1780:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
	if (__inpline == NULL) {
    1784:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
		if ((prcs = running (__inserial)) == 0) {
    1788:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    178c:	01040177 	tsteq	r4, r7, ror r1
			prcs = runthread (__inserial);
    1790:	ba030405 	blt	c27ac <__ccfg+0xa2804>
    1794:	09032008 	stmdbeq	r3, {r3, sp}
			if (prcs == 0) {
    1798:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
				npwait (st);
    179c:	017db003 	cmneq	sp, r3
		release;
    17a0:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
		join (prcs, st);
    17a4:	017ed403 	cmneq	lr, r3, lsl #8
    17a8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	va_start (ap, fmt);
    17ac:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
	prcs = vscan (__inpline, fmt, ap);
    17b0:	03010501 	movweq	r0, #5377	; 0x1501
    17b4:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
	ufree (__inpline);
    17b8:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
	__inpline = NULL;
    17bc:	055b2002 	ldrbeq	r2, [fp, #-2]
}
    17c0:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    17c4:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
    17c8:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
		return 0;
    17cc:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    17d0:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    17d4:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
strand (__outserial, const char*)
    17d8:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    17dc:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    17e0:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    17e4:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
endstrand
    17e8:	03050502 	movweq	r0, #21762	; 0x5502
    17ec:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
	ptr = data;
    17f0:	03040501 	movweq	r0, #17665	; 0x4501
    17f4:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
	if (*ptr)
    17f8:	0305050e 	movweq	r0, #21774	; 0x550e
		len = strlen (ptr);
    17fc:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
    1800:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1804:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    1808:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
    180c:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
    1810:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    1814:	06040501 	streq	r0, [r4], -r1, lsl #10
	len -= quant;
    1818:	3c05f703 	stccc	7, cr15, [r5], {3}
    181c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    1820:	01778503 	cmneq	r7, r3, lsl #10
	if (len == 0) {
    1824:	0d050e04 	stceq	14, cr0, [r5, #-16]
		ufree (data);
    1828:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
		finish;
    182c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1830:	96030639 			; <UNDEFINED> instruction: 0x96030639
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1834:	0a052006 	beq	149854 <__ccfg+0x1298ac>
    1838:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    183c:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
    1840:	060d0501 	streq	r0, [sp], -r1, lsl #10
    1844:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
strand (__inserial, address)
    1848:	0696030a 	ldreq	r0, [r6], sl, lsl #6
    184c:	06040520 	streq	r0, [r4], -r0, lsr #10
    1850:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    1854:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
    1858:	06410501 	strbeq	r0, [r1], -r1, lsl #10
	if (__inpline != NULL)
    185c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1860:	08970304 	ldmeq	r7, {r2, r8, r9}
		finish;
    1864:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1868:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    186c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1870:	97030604 	strls	r0, [r3, -r4, lsl #12]
    1874:	04522008 	ldrbeq	r2, [r2], #-8
		umwait (IM_INIT);
    1878:	0302050d 	movweq	r0, #9485	; 0x250d
		release;
    187c:	4a2075d1 	bmi	81efc8 <__ccfg+0x7ff020>
	savedata (data);
    1880:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
	len = MAX_LINE_LENGTH;
    1884:	03030503 	movweq	r0, #13571	; 0x3503
	io (IM_READ, __cport, READ, ptr, 1);
    1888:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
    188c:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    1890:	37021620 	strcc	r1, [r2, -r0, lsr #12]
    1894:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (ptr == (char*) data) { // new line
    1898:	02050012 	andeq	r0, r5, #18
    189c:	00000000 	andeq	r0, r0, r0
		if (*ptr == '\0') { // bin cmd
    18a0:	0100e103 	tsteq	r0, r3, lsl #2
			proceed (IM_BIN);
    18a4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    18a8:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
		if (*ptr < 0x20)
    18ac:	1f212202 	svcne	0x00212202
    18b0:	4b2f2106 	blmi	bc9cd0 <__ccfg+0xba9d28>
			proceed (IM_READ);
    18b4:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    18b8:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (*ptr == '\n' || *ptr == '\r') {
    18bc:	0008022f 	andeq	r0, r8, pc, lsr #4
    18c0:	3a050101 	bcc	141ccc <__ccfg+0x121d24>
    18c4:	00020500 	andeq	r0, r2, r0, lsl #10
		*ptr = '\0';
    18c8:	03000000 	movweq	r0, #0
		__inpline = (char*)data;
    18cc:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
		finish;
    18d0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
	if (len) {
    18d4:	200e063a 	andcs	r0, lr, sl, lsr r6
		ptr++;
    18d8:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    18dc:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
		len--;
    18e0:	06030524 	streq	r0, [r3], -r4, lsr #10
	proceed (IM_READ);
    18e4:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
	io (IM_BIN, __cport, READ, ptr, 1);
    18e8:	06040501 	streq	r0, [r4], -r1, lsl #10
    18ec:	06120530 			; <UNDEFINED> instruction: 0x06120530
    18f0:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    18f4:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    18f8:	01060905 	tsteq	r6, r5, lsl #18
	len -= 2;
    18fc:	2f050f04 	svccs	0x00050f04
	if (len > *ptr + 1) // 1 for 0x04
    1900:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    1904:	03090501 	movweq	r0, #38145	; 0x9501
		len = *ptr + 1;
    1908:	0305206b 	movweq	r2, #20587	; 0x506b
    190c:	0f042106 	svceq	0x00042106
	ptr++;
    1910:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1914:	062f0501 	strteq	r0, [pc], -r1, lsl #10
    1918:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    191c:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    1920:	03060405 	movweq	r0, #25605	; 0x6405
    1924:	0f04206f 	svceq	0x0004206f
    1928:	c3030505 	movwgt	r0, #13573	; 0x3505
	len -= quant;
    192c:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
		__inpline = (char*)data;
    1930:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
		finish;
    1934:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
	ptr += quant;
    1938:	060b0501 	streq	r0, [fp], -r1, lsl #10
    193c:	017fb603 	cmneq	pc, r3, lsl #12
endstrand
    1940:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    1944:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
	proceed (IM_BINL);
    1948:	062f050e 	strteq	r0, [pc], -lr, lsl #10
endstrand
    194c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1950:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    1954:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1958:	06053f04 	streq	r3, [r5], -r4, lsl #30
    195c:	0604052b 	streq	r0, [r4], -fp, lsr #10
    1960:	03052f23 	movweq	r2, #24355	; 0x5f23
		if (res && (d < n))
    1964:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    1968:	03051f09 	movweq	r1, #24329	; 0x5f09
    196c:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
    1970:	01010009 	tsteq	r1, r9
			res [d] = (char) c;
    1974:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
		d++;
    1978:	000df402 	andeq	pc, sp, r2, lsl #8
    197c:	0af10300 	beq	ffc42584 <_estack+0xdfc3d584>
    1980:	16030501 	strne	r0, [r3], -r1, lsl #10
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1984:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    1988:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
    198c:	26250520 	strtcs	r0, [r5], -r0, lsr #10
				enci (10000);
    1990:	051f0305 	ldreq	r0, [pc, #-773]	; 1693 <ee_open+0xf>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1994:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1998:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
	d = 0;
    199c:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
		c = *fm++;
    19a0:	0305010f 	movweq	r0, #20751	; 0x510f
		if (c == '\\') {
    19a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			if ((c = *fm++) == '\0') {
    19a8:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
    19ac:	06207903 	strteq	r7, [r0], -r3, lsl #18
				outc ('\\');
    19b0:	5b5b3231 	blpl	16ce27c <__ccfg+0x16ae2d4>
			if ((c = *fm++) == '\0') {
    19b4:	01061c05 	tsteq	r6, r5, lsl #24
				outc ('\\');
    19b8:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    19bc:	0c052302 	stceq	3, cr2, [r5], {2}
			outc (c);
    19c0:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    19c4:	03043e23 	movweq	r3, #20003	; 0x4e23
			if (c == '\0')
    19c8:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
    19cc:	01040175 	tsteq	r4, r5, ror r1
			outc (c);
    19d0:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
				outc (val);
    19d4:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
				val = (word) va_arg (ap, aword);
    19d8:	e0010100 	and	r0, r1, r0, lsl #2
		if (c == '%') {
    19dc:	0300000e 	movweq	r0, #14
    19e0:	00019000 	andeq	r9, r1, r0
			c = *fm++;
    19e4:	fb010200 	blx	421ee <__ccfg+0x22246>
			switch (c) {
    19e8:	01000d0e 	tsteq	r0, lr, lsl #26
    19ec:	00010101 	andeq	r0, r1, r1, lsl #2
    19f0:	00010000 	andeq	r0, r1, r0
    19f4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    19f8:	2f656d6f 	svccs	0x00656d6f
    19fc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1a00:	442f6e69 	strtmi	r6, [pc], #-3689	; 1a08 <__pi_vfparse+0x84>
    1a04:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				outc ('%');
    1a08:	4f2f706f 	svcmi	0x002f706f
    1a0c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				outc (c);
    1a10:	502f5445 	eorpl	r5, pc, r5, asr #8
    1a14:	534f4349 	movtpl	r4, #62281	; 0xf349
    1a18:	6369502f 	cmnvs	r9, #47	; 0x2f
				if (c == '\0')
    1a1c:	6b2f534f 	blvs	bd6760 <__ccfg+0xbb67b8>
				return d;
    1a20:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
}
    1a24:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    1a28:	2f656d6f 	svccs	0x00656d6f
			switch (c) {
    1a2c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1a30:	442f6e69 	strtmi	r6, [pc], #-3689	; 1a38 <__pi_vfparse+0xb4>
    1a34:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				for (i = 12; ; i -= 4) {
    1a38:	4f2f706f 	svcmi	0x002f706f
				val = (word) va_arg (ap, aword);
    1a3c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
						[ (val >> i) & 0xf ]);
    1a40:	502f5445 	eorpl	r5, pc, r5, asr #8
    1a44:	534f4349 	movtpl	r4, #62281	; 0xf349
    1a48:	6369502f 	cmnvs	r9, #47	; 0x2f
					outc (__pi_hex_enc_table
    1a4c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    1a50:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
					if (i == 0)
    1a54:	43432f58 	movtmi	r2, #16216	; 0x3f58
    1a58:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
				for (i = 12; ; i -= 4) {
    1a5c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
				val = (word) va_arg (ap, aword);
    1a60:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
				if (c == 'd' && (val & 0x8000) != 0) {
    1a64:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
				val = (word) va_arg (ap, aword);
    1a68:	2f006269 	svccs	0x00006269
				if (c == 'd' && (val & 0x8000) != 0) {
    1a6c:	2f727375 	svccs	0x00727375
    1a70:	2f62696c 	svccs	0x0062696c
					outc ('-');
    1a74:	2f636367 	svccs	0x00636367
    1a78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
					val = (~val) + 1;
    1a7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1a80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
				for (i = 12; ; i -= 4) {
    1a84:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
				enci (10000);
    1a88:	2f312e32 	svccs	0x00312e32
    1a8c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1a90:	00656475 	rsbeq	r6, r5, r5, ror r4
    1a94:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 19e0 <__pi_vfparse+0x5c>
    1a98:	616d2f65 	cmnvs	sp, r5, ror #30
    1a9c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1aa0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1aa4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1aa8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1aac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1ab0:	4349502f 	movtmi	r5, #36911	; 0x902f
    1ab4:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ab8:	534f6369 	movtpl	r6, #62313	; 0xf369
    1abc:	3143432f 	cmpcc	r3, pc, lsr #6
    1ac0:	00585833 	subseq	r5, r8, r3, lsr r8
    1ac4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a10 <__pi_vfparse+0x8c>
    1ac8:	616d2f65 	cmnvs	sp, r5, ror #30
    1acc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				if (c == 'd' || c == 'u') {
    1ad0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1ad4:	706f746b 	rsbvc	r7, pc, fp, ror #8
					if (c == 'd' &&
    1ad8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
					val = va_arg (ap, lword);
    1adc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
					fm++;
    1ae0:	4349502f 	movtmi	r5, #36911	; 0x902f
					if (c == 'd' &&
    1ae4:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ae8:	534f6369 	movtpl	r6, #62313	; 0xf369
						outc ('-');
    1aec:	656b0000 	strbvs	r0, [fp, #-0]!
    1af0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
						val = (~val) + 1;
    1af4:	0100632e 	tsteq	r0, lr, lsr #6
				enci (10000);
    1af8:	61750000 	cmnvs	r5, r0
					enci (1000000000UL);
    1afc:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1b00:	00000200 	andeq	r0, r0, r0, lsl #4
    1b04:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1b08:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1b0c:	00000300 	andeq	r0, r0, r0, lsl #6
    1b10:	61647473 	smcvs	18243	; 0x4743
    1b14:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    1b18:	00000300 	andeq	r0, r0, r0, lsl #6
    1b1c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1b20:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1b24:	616d0000 	cmnvs	sp, r0
    1b28:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    1b2c:	00000400 	andeq	r0, r0, r0, lsl #8
    1b30:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    1b34:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1b38:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1b3c:	75620000 	strbvc	r0, [r2, #-0]!
				} else if (c == 'x') {
    1b40:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
					for (i = 28; ; i -= 4) {
    1b44:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
					val = va_arg (ap, lword);
    1b48:	00682e73 	rsbeq	r2, r8, r3, ror lr
							[ (val >> i) & 0xf ]);
    1b4c:	73000004 	movwvc	r0, #4
    1b50:	6f697379 	svcvs	0x00697379
						outc (__pi_hex_enc_table
    1b54:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1b58:	656b0000 	strbvs	r0, [fp, #-0]!
    1b5c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
						if (i == 0)
    1b60:	0100682e 	tsteq	r0, lr, lsr #16
    1b64:	623c0000 	eorsvs	r0, ip, #0
					for (i = 28; ; i -= 4) {
    1b68:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
					outc ('%');
    1b6c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	00260500 	eoreq	r0, r6, r0, lsl #10
					outc ('l');
    1b78:	0e540205 	cdpeq	2, 5, cr0, cr4, cr5, {0}
    1b7c:	c3030000 	movwgt	r0, #12288	; 0x3000
				val = (word) va_arg (ap, aword);
    1b80:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
				outc (val);
    1b84:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    1b88:	03062605 	movweq	r2, #26117	; 0x6605
				while (*st != '\0') {
    1b8c:	02050178 	andeq	r0, r5, #120, 2
    1b90:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    1b94:	02051f07 	andeq	r1, r5, #7, 30
    1b98:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
					outc (*st);
    1b9c:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1ba0:	13053c0a 	movwne	r3, #23562	; 0x5c0a
					st++;
    1ba4:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
		c = *fm++;
    1ba8:	2c060f05 	stccs	15, cr0, [r6], {5}
    1bac:	01060305 	tsteq	r6, r5, lsl #6
    1bb0:	2f060405 	svccs	0x00060405
char *vform (char *res, const char *fm, va_list aq) {
    1bb4:	01061605 	tsteq	r6, r5, lsl #12
    1bb8:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
	if (res != NULL) {
    1bbc:	4b310605 	blmi	c433d8 <__ccfg+0xc23430>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1bc0:	7a030205 	bvc	c23dc <__ccfg+0xa2434>
    1bc4:	06010501 	streq	r0, [r1], -r1, lsl #10
    1bc8:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
}
    1bcc:	01010003 	tsteq	r1, r3
    1bd0:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
	fml = strlen (fm) + 17;
    1bd4:	000e9002 	andeq	r9, lr, r2
    1bd8:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    1bdc:	03020501 	movweq	r0, #9473	; 0x2501
	if ((res = (char*) umalloc (fml)) == NULL)
    1be0:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    1be4:	01060d05 	tsteq	r6, r5, lsl #26
    1be8:	70031f05 	andvc	r1, r3, r5, lsl #30
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1bec:	030d0520 	movweq	r0, #54560	; 0xd520
    1bf0:	1f052e10 	svcne	0x00052e10
    1bf4:	02052006 	andeq	r2, r5, #6
    1bf8:	03060106 	movweq	r0, #24838	; 0x6106
		ufree (res);
    1bfc:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
		goto Again;
    1c00:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
	if (buf == NULL || fmt == NULL)
    1c04:	1f051f05 	svcne	0x00051f05
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c08:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
	if (buf == NULL || fmt == NULL)
    1c0c:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
    1c10:	060f0521 	streq	r0, [pc], -r1, lsr #10
    1c14:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
		    	    case 'u': scanu (lword); break;
    1c18:	0f052306 	svceq	0x00052306
			while (isspace (*buf)) buf++;
    1c1c:	01050106 	tsteq	r5, r6, lsl #2
    1c20:	06030524 	streq	r0, [r3], -r4, lsr #10
	while (*fmt != '\0') {
    1c24:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
		if (*fmt++ != '%')
    1c28:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
		switch (*fmt++) {
    1c2c:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
    1c30:	05213006 	streq	r3, [r1, #-6]!
    1c34:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    1c38:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    1c3c:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    1c40:	0a050106 	beq	142060 <__ccfg+0x1220b8>
    1c44:	1f053406 	svcne	0x00053406
}
    1c48:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
		switch (*fmt++) {
    1c4c:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1c50:	10052f22 	andne	r2, r5, r2, lsr #30
    1c54:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1c58:	ac0b0306 	stcge	3, cr0, [fp], {6}
			while (isspace (*buf)) buf++;
    1c5c:	01060705 	tsteq	r6, r5, lsl #14
    1c60:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
    1c64:	13060905 	movwne	r0, #26885	; 0x6905
    1c68:	01000702 	tsteq	r0, r2, lsl #14
    1c6c:	001c0501 	andseq	r0, ip, r1, lsl #10
    1c70:	0f100205 	svceq	0x00100205
			if (*buf == '\0')
    1c74:	c6030000 	strgt	r0, [r3], -r0
			if (*buf != ',') {
    1c78:	02050108 	andeq	r0, r5, #8, 2
			sap = va_arg (ap, char*);
    1c7c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
			nc++;
    1c80:	df03060d 	svcle	0x0003060d
			if (*buf != ',') {
    1c84:	0104017c 	tsteq	r4, ip, ror r1
				while (!isspace (*buf) && *buf != ',' &&
    1c88:	03060f05 	movweq	r0, #28421	; 0x6f05
    1c8c:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    1c90:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    1c94:	da032405 	ble	cacb0 <__ccfg+0xaad08>
    1c98:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    1c9c:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    1ca0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			while (isspace (*buf)) buf++;
    1ca4:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    1ca8:	052f0620 	streq	r0, [pc, #-1568]!	; 1690 <ee_open+0xc>
    1cac:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    1cb0:	01010005 	tsteq	r1, r5
    1cb4:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
			if (*buf == ',') buf++;
    1cb8:	00000002 	andeq	r0, r0, r2
    1cbc:	00de0300 	sbcseq	r0, lr, r0, lsl #6
			*sap = '\0';
    1cc0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			break;
    1cc4:	06270514 			; <UNDEFINED> instruction: 0x06270514
		    case 'd': scani (word); break;
    1cc8:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    1ccc:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
    1cd0:	20062402 	andcs	r2, r6, r2, lsl #8
    1cd4:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
    1cd8:	01060605 	tsteq	r6, r5, lsl #12
    1cdc:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    1ce0:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
    1ce4:	01000502 	tsteq	r0, r2, lsl #10
    1ce8:	001b0501 	andseq	r0, fp, r1, lsl #10
    1cec:	0f280205 	svceq	0x00280205
    1cf0:	fa030000 	blx	c1cf8 <__ccfg+0xa1d50>
    1cf4:	02050100 	andeq	r0, r5, #0, 2
    1cf8:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    1cfc:	2102051f 	tstcs	r2, pc, lsl r5
    1d00:	01000602 	tsteq	r0, r2, lsl #12
    1d04:	001e0501 	andseq	r0, lr, r1, lsl #10
    1d08:	00000205 	andeq	r0, r0, r5, lsl #4
    1d0c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    1d10:	02050100 	andeq	r0, r5, #0, 2
    1d14:	0e051416 	cfmvdlreq	mvd5, r1
    1d18:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    1d1c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1d20:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    1d24:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1d28:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1d2c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1d30:	1f052e06 	svcne	0x00052e06
    1d34:	20051f06 	andcs	r1, r5, r6, lsl #30
		    case 'u': scanu (word); break;
    1d38:	0e050106 	adfeqs	f0, f5, f6
    1d3c:	02052006 	andeq	r2, r5, #6
    1d40:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1d44:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1d48:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    1d4c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1d50:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1d54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1d58:	02050021 	andeq	r0, r5, #33	; 0x21
    1d5c:	00000000 	andeq	r0, r0, r0
    1d60:	01018e03 	tsteq	r1, r3, lsl #28
    1d64:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    1d68:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1d6c:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    1d70:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
    1d74:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    1d78:	01061205 	tsteq	r6, r5, lsl #4
    1d7c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		    case 'x': scanx (word); break;
    1d80:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1d84:	06054b03 	streq	r4, [r5], -r3, lsl #22
    1d88:	1f050106 	svcne	0x00050106
    1d8c:	20052b06 	andcs	r2, r5, r6, lsl #22
    1d90:	0e050106 	adfeqs	f0, f5, f6
    1d94:	02052006 	andeq	r2, r5, #6
    1d98:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
    1d9c:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    1da0:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
    1da4:	2f030501 	svccs	0x00030501
    1da8:	01061f05 	tsteq	r6, r5, lsl #30
    1dac:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    1db0:	03052012 	movweq	r2, #20498	; 0x5012
    1db4:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1db8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1dbc:	0b053206 	bleq	14e5dc <__ccfg+0x12e634>
    1dc0:	0601052e 	streq	r0, [r1], -lr, lsr #10
    1dc4:	00070213 	andeq	r0, r7, r3, lsl r2
    1dc8:	2a050101 	bcs	1421d4 <__ccfg+0x12222c>
    1dcc:	00020500 	andeq	r0, r2, r0, lsl #10
    1dd0:	03000000 	movweq	r0, #0
    1dd4:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
    1dd8:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    1ddc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1de0:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
    1de4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1de8:	0205002e 	andeq	r0, r5, #46	; 0x2e
    1dec:	00000f38 	andeq	r0, r0, r8, lsr pc
    1df0:	0101ae03 	tsteq	r1, r3, lsl #28
    1df4:	02052006 	andeq	r2, r5, #6
			switch (*fmt++) {
    1df8:	200e0306 	andcs	r0, lr, r6, lsl #6
    1dfc:	01100313 	tsteq	r0, r3, lsl r3
    1e00:	01060605 	tsteq	r6, r5, lsl #12
    1e04:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    1e08:	09030602 	stmdbeq	r3, {r1, r9, sl}
    1e0c:	0606052e 	streq	r0, [r6], -lr, lsr #10
		    	    case 'd': scani (lword); break;
    1e10:	58050501 	stmdapl	r5, {r0, r8, sl}
    1e14:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    1e18:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    1e1c:	0302052e 	movweq	r0, #9518	; 0x252e
    1e20:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    1e24:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1e28:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1e2c:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    1e30:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1e34:	04052007 	streq	r2, [r5], #-7
    1e38:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    1e3c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1e40:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    1e44:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    1e48:	0303053e 	movweq	r0, #13630	; 0x353e
    1e4c:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    1e50:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    1e54:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1e58:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1e5c:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    1e60:	17030603 	strne	r0, [r3, -r3, lsl #12]
    1e64:	06070566 	streq	r0, [r7], -r6, ror #10
    1e68:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
		    	    case 'x': scanx (lword); break;
    1e6c:	03060205 	movweq	r0, #25093	; 0x6205
    1e70:	0b053c16 	bleq	150ed0 <__ccfg+0x130f28>
    1e74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e78:	01054006 	tsteq	r5, r6
    1e7c:	010d0306 	tsteq	sp, r6, lsl #6
    1e80:	73030205 	movwvc	r0, #12805	; 0x3205
    1e84:	0301052e 	movweq	r0, #5422	; 0x152e
    1e88:	0a022e0d 	beq	8d6c4 <__ccfg+0x6d71c>
    1e8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e90:	0205001b 	andeq	r0, r5, #27
    1e94:	00001004 	andeq	r1, r0, r4
    1e98:	0102d203 	tsteq	r2, r3, lsl #4
    1e9c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1ea0:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    1ea4:	4b062202 	blmi	18a6b4 <__ccfg+0x16a70c>
    1ea8:	01000502 	tsteq	r0, r2, lsl #10
    1eac:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1eb0:	10180205 	andsne	r0, r8, r5, lsl #4
    1eb4:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    1eb8:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1ebc:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    1ec0:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    1ec4:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    1ec8:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    1ecc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1ed0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1ed4:	06014c02 	streq	r4, [r1], -r2, lsl #24
    1ed8:	20061f3d 	andcs	r1, r6, sp, lsr pc
		    	    case 'd': scani (lword); break;
    1edc:	01051320 	tsteq	r5, r0, lsr #6
    1ee0:	06022106 	streq	r2, [r2], -r6, lsl #2
    1ee4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1ee8:	02050021 	andeq	r0, r5, #33	; 0x21
    1eec:	0000104c 	andeq	r1, r0, ip, asr #32
    1ef0:	0102e503 	tsteq	r2, r3, lsl #10
    1ef4:	13160205 	tstne	r6, #1342177280	; 0x50000000
		    	    case 'u': scanu (lword); break;
    1ef8:	06210514 			; <UNDEFINED> instruction: 0x06210514
    1efc:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    1f00:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
    1f04:	21061305 	tstcs	r6, r5, lsl #6
    1f08:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    1f0c:	0f052013 	svceq	0x00052013
    1f10:	03054a06 	movweq	r4, #23046	; 0x5a06
    1f14:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1f18:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    1f1c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1f20:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    1f24:	01050d02 	tsteq	r5, r2, lsl #26
    1f28:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    1f2c:	01000302 	tsteq	r0, r2, lsl #6
    1f30:	002d0501 	eoreq	r0, sp, r1, lsl #10
    1f34:	00000205 	andeq	r0, r0, r5, lsl #4
    1f38:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1f3c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
		    	    case 'x': scanx (lword); break;
    1f40:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    1f44:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
			if ((c = *buf++) == '\0')
    1f48:	02052001 	andeq	r2, r5, #1
    1f4c:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
			sap = va_arg (ap, char*);
    1f50:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
			nc++;
    1f54:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
			break;
    1f58:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
			while (isspace (*buf)) buf++;
    1f5c:	01053c02 	tsteq	r5, r2, lsl #24
    1f60:	06030533 			; <UNDEFINED> instruction: 0x06030533
    1f64:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
						*sap++ = *buf++;
    1f68:	1f200501 	svcne	0x00200501
    1f6c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
			while (isspace (*buf)) buf++;
    1f70:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1f74:	0102641f 	tsteq	r2, pc, lsl r4
    1f78:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		return 0;
    1f7c:	02050026 	andeq	r0, r5, #38	; 0x26
    1f80:	00001080 	andeq	r1, r0, r0, lsl #1
		    case 'x': scanx (word); break;
    1f84:	01038703 	tsteq	r3, r3, lsl #14
    1f88:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
		    	    case 'x': scanx (lword); break;
    1f8c:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    1f90:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    1f94:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    1f98:	03052806 	movweq	r2, #22534	; 0x5806
    1f9c:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    1fa0:	01060605 	tsteq	r6, r5, lsl #12
    1fa4:	30060405 	andcc	r0, r6, r5, lsl #8
    1fa8:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    1fac:	06020517 			; <UNDEFINED> instruction: 0x06020517
    1fb0:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    1fb4:	01010004 	tsteq	r1, r4
    1fb8:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1fbc:	0010a402 	andseq	sl, r0, r2, lsl #8
    1fc0:	03990300 	orrseq	r0, r9, #0, 6
    1fc4:	16020501 	strne	r0, [r2], -r1, lsl #10
    1fc8:	0e062105 	adfeqs	f2, f6, f5
    1fcc:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    1fd0:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    1fd4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1fd8:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    1fdc:	20130520 	andscs	r0, r3, r0, lsr #10
    1fe0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    1fe4:	59060105 	stmdbpl	r6, {r0, r2, r8}
    1fe8:	01000502 	tsteq	r0, r2, lsl #10
    1fec:	00140501 	andseq	r0, r4, r1, lsl #10
    1ff0:	00000205 	andeq	r0, r0, r5, lsl #4
    1ff4:	a7030000 	strge	r0, [r3, -r0]
    1ff8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    1ffc:	06010516 			; <UNDEFINED> instruction: 0x06010516
    2000:	00040267 	andeq	r0, r4, r7, ror #4
    2004:	18050101 	stmdane	r5, {r0, r8}
    2008:	00020500 	andeq	r0, r2, r0, lsl #10
    200c:	03000000 	movweq	r0, #0
    2010:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    2014:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2018:	200e0618 	andcs	r0, lr, r8, lsl r6
    201c:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2020:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    2024:	06030501 	streq	r0, [r3], -r1, lsl #10
    2028:	06050521 	streq	r0, [r5], -r1, lsr #10
    202c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2030:	06120535 			; <UNDEFINED> instruction: 0x06120535
    2034:	59010501 	stmdbpl	r1, {r0, r8, sl}
    2038:	03060305 	movweq	r0, #25349	; 0x6305
    203c:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    2040:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2044:	0b052e17 	bleq	14d8a8 <__ccfg+0x12d900>
    2048:	0008023d 	andeq	r0, r8, sp, lsr r2
    204c:	1d050101 	stfnes	f0, [r5, #-4]
    2050:	00020500 	andeq	r0, r2, r0, lsl #10
    2054:	03000000 	movweq	r0, #0
    2058:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    205c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2060:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    2064:	03052405 	movweq	r2, #21509	; 0x5405
    2068:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    206c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2070:	01053206 	tsteq	r5, r6, lsl #4
    2074:	03051306 	movweq	r1, #21254	; 0x5306
    2078:	06022b06 	streq	r2, [r2], -r6, lsl #22
    207c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2080:	0205001d 	andeq	r0, r5, #29
    2084:	000010dc 	ldrdeq	r1, [r0], -ip
    2088:	01049e03 	tsteq	r4, r3, lsl #28
    208c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2090:	01060505 	tsteq	r6, r5, lsl #10
    2094:	2f060305 	svccs	0x00060305
    2098:	01060a05 	tsteq	r6, r5, lsl #20
    209c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    20a0:	0601052e 	streq	r0, [r1], -lr, lsr #10
    20a4:	06030525 	streq	r0, [r3], -r5, lsr #10
    20a8:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    20ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    20b0:	0006023b 	andeq	r0, r6, fp, lsr r2
    20b4:	1d050101 	stfnes	f0, [r5, #-4]
    20b8:	00020500 	andeq	r0, r2, r0, lsl #10
    20bc:	03000000 	movweq	r0, #0
    20c0:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    20c4:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    20c8:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    20cc:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    20d0:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    20d4:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    20d8:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    20dc:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    20e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    20e4:	06051f02 	streq	r1, [r5], -r2, lsl #30
    20e8:	06040521 	streq	r0, [r4], -r1, lsr #10
    20ec:	06050521 	streq	r0, [r5], -r1, lsr #10
    20f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    20f4:	0004023a 	andeq	r0, r4, sl, lsr r2
    20f8:	21050101 	tstcs	r5, r1, lsl #2
    20fc:	00020500 	andeq	r0, r2, r0, lsl #10
    2100:	03000011 	movweq	r0, #17
    2104:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    2108:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    210c:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    2110:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    2114:	02052006 	andeq	r2, r5, #6
    2118:	01050106 	tsteq	r5, r6, lsl #2
    211c:	06220531 			; <UNDEFINED> instruction: 0x06220531
    2120:	011e051d 	tsteq	lr, sp, lsl r5
    2124:	01061f05 	tsteq	r6, r5, lsl #30
    2128:	01000202 	tsteq	r0, r2, lsl #4
    212c:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2130:	00000205 	andeq	r0, r0, r5, lsl #4
    2134:	c1030000 	mrsgt	r0, (UNDEF: 3)
    2138:	02050104 	andeq	r0, r5, #4, 2
    213c:	20200514 	eorcs	r0, r0, r4, lsl r5
    2140:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2144:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2148:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    214c:	2f01052e 	svccs	0x0001052e
    2150:	01000102 	tsteq	r0, r2, lsl #2
    2154:	00330501 	eorseq	r0, r3, r1, lsl #10
    2158:	00000205 	andeq	r0, r0, r5, lsl #4
    215c:	c6030000 	strgt	r0, [r3], -r0
    2160:	02050104 	andeq	r0, r5, #4, 2
    2164:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2168:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    216c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2170:	11052f01 	tstne	r5, r1, lsl #30
    2174:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
    2178:	2f060305 	svccs	0x00060305
    217c:	01060805 	tsteq	r6, r5, lsl #16
    2180:	01000302 	tsteq	r0, r2, lsl #6
    2184:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2188:	00000205 	andeq	r0, r0, r5, lsl #4
    218c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    2190:	02050104 	andeq	r0, r5, #4, 2
    2194:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2198:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    219c:	01010002 	tsteq	r1, r2
    21a0:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    21a4:	00000002 	andeq	r0, r0, r2
    21a8:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    21ac:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    21b0:	01000302 	tsteq	r0, r2, lsl #6
    21b4:	00370501 	eorseq	r0, r7, r1, lsl #10
    21b8:	110e0205 	tstne	lr, r5, lsl #4
    21bc:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    21c0:	02050104 	andeq	r0, r5, #4, 2
    21c4:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    21c8:	30060105 	andcc	r0, r6, r5, lsl #2
    21cc:	1f060305 	svcne	0x00060305
    21d0:	01060d05 	tsteq	r6, r5, lsl #26
    21d4:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    21d8:	01010003 	tsteq	r1, r3
    21dc:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    21e0:	00000002 	andeq	r0, r0, r2
    21e4:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    21e8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    21ec:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    21f0:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    21f4:	051f0603 	ldreq	r0, [pc, #-1539]	; 1bf9 <vform+0x45>
    21f8:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    21fc:	01010003 	tsteq	r1, r3
    2200:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    2204:	00112402 	andseq	r2, r1, r2, lsl #8
    2208:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    220c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2210:	10062b05 	andne	r2, r6, r5, lsl #22
    2214:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    2218:	06210603 	strteq	r0, [r1], -r3, lsl #12
    221c:	06020531 			; <UNDEFINED> instruction: 0x06020531
    2220:	060c052d 	streq	r0, [ip], -sp, lsr #10
    2224:	20050501 	andcs	r0, r5, r1, lsl #10
    2228:	2f060305 	svccs	0x00060305
    222c:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    2230:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2234:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    2238:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    223c:	02050045 	andeq	r0, r5, #69	; 0x45
    2240:	00001148 	andeq	r1, r0, r8, asr #2
    2244:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    2248:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    224c:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
    2250:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
    2254:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2258:	03054a19 	movweq	r4, #23065	; 0x5a19
    225c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    2260:	0605054c 	streq	r0, [r5], -ip, asr #10
    2264:	06020501 	streq	r0, [r2], -r1, lsl #10
    2268:	060f0540 	streq	r0, [pc], -r0, asr #10
    226c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2270:	0605054c 	streq	r0, [r5], -ip, asr #10
    2274:	06020501 	streq	r0, [r2], -r1, lsl #10
    2278:	06050531 			; <UNDEFINED> instruction: 0x06050531
    227c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2280:	0606054f 	streq	r0, [r6], -pc, asr #10
    2284:	06030501 	streq	r0, [r3], -r1, lsl #10
    2288:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
    228c:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    2290:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2294:	01060505 	tsteq	r6, r5, lsl #10
    2298:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    229c:	01060605 	tsteq	r6, r5, lsl #12
    22a0:	4b060405 	blmi	1832bc <__ccfg+0x163314>
    22a4:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    22a8:	06030501 	streq	r0, [r3], -r1, lsl #10
    22ac:	060a0569 	streq	r0, [sl], -r9, ror #10
    22b0:	06030501 	streq	r0, [r3], -r1, lsl #10
    22b4:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    22b8:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    22bc:	20290301 	eorcs	r0, r9, r1, lsl #6
    22c0:	03060205 	movweq	r0, #25093	; 0x6205
    22c4:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    22c8:	03050106 	movweq	r0, #20742	; 0x5106
    22cc:	02752f06 	rsbseq	r2, r5, #6, 30
    22d0:	01010005 	tsteq	r1, r5
    22d4:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    22d8:	0011e402 	andseq	lr, r1, r2, lsl #8
    22dc:	05ef0300 	strbeq	r0, [pc, #768]!	; 25e4 <NOROM_SetupSetAonRtcSubSecInc+0x20>
    22e0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    22e4:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    22e8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    22ec:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    22f0:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    22f4:	580c0520 	stmdapl	ip, {r5, r8, sl}
    22f8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    22fc:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2300:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    2304:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2308:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    230c:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    2310:	2016052b 	andscs	r0, r6, fp, lsr #10
    2314:	21060205 	tstcs	r6, r5, lsl #4
    2318:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    231c:	31060205 	tstcc	r6, r5, lsl #4
    2320:	01061a05 	tsteq	r6, r5, lsl #20
    2324:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    2328:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    232c:	01000d02 	tsteq	r0, r2, lsl #26
    2330:	001c0501 	andseq	r0, ip, r1, lsl #10
    2334:	12340205 	eorsne	r0, r4, #1342177280	; 0x50000000
    2338:	fb030000 	blx	c2342 <__ccfg+0xa239a>
    233c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2340:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2344:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2348:	03050501 	movweq	r0, #21761	; 0x5501
    234c:	0205200c 	andeq	r2, r5, #12
    2350:	07052506 	streq	r2, [r5, -r6, lsl #10]
    2354:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2358:	0603052e 	streq	r0, [r3], -lr, lsr #10
    235c:	11054c2f 	tstne	r5, pc, lsr #24
    2360:	0f051606 	svceq	0x00051606
    2364:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    2368:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    236c:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2370:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2374:	30300602 	eorscc	r0, r0, r2, lsl #12
    2378:	01061505 	tsteq	r6, r5, lsl #10
    237c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2380:	2f2f0603 	svccs	0x002f0603
    2384:	01061a05 	tsteq	r6, r5, lsl #20
    2388:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    238c:	01010008 	tsteq	r1, r8
    2390:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    2394:	00127c02 	andseq	r7, r2, r2, lsl #24
    2398:	03d80300 	bicseq	r0, r8, #0, 6
    239c:	16020501 	strne	r0, [r2], -r1, lsl #10
    23a0:	06170514 			; <UNDEFINED> instruction: 0x06170514
    23a4:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    23a8:	03052605 	movweq	r2, #22021	; 0x5605
    23ac:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    23b0:	07050106 	streq	r0, [r5, -r6, lsl #2]
    23b4:	06020520 	streq	r0, [r2], -r0, lsr #10
    23b8:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
    23bc:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    23c0:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
    23c4:	0305200f 	movweq	r2, #20495	; 0x500f
    23c8:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    23cc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    23d0:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    23d4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    23d8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    23dc:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    23e0:	3d230604 	stccc	6, cr0, [r3, #-16]!
    23e4:	060a052f 	streq	r0, [sl], -pc, lsr #10
    23e8:	20070501 	andcs	r0, r7, r1, lsl #10
    23ec:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    23f0:	060d052a 	streq	r0, [sp], -sl, lsr #10
    23f4:	03010501 	movweq	r0, #5377	; 0x1501
    23f8:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    23fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2400:	0205001c 	andeq	r0, r5, #28
    2404:	00000000 	andeq	r0, r0, r0
    2408:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    240c:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2410:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    2414:	7703061c 	smladvc	r3, ip, r6, r0
    2418:	36040501 	strcc	r0, [r4], -r1, lsl #10
    241c:	051f0605 	ldreq	r0, [pc, #-1541]	; 1e1f <vscan+0x21b>
    2420:	1c052209 	sfmne	f2, 4, [r5], {9}
    2424:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2428:	2010030a 	andscs	r0, r0, sl, lsl #6
    242c:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    2430:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2434:	06020520 	streq	r0, [r2], -r0, lsr #10
    2438:	11030601 	tstne	r3, r1, lsl #12
    243c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2440:	06030501 	streq	r0, [r3], -r1, lsl #10
    2444:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    2448:	01060605 	tsteq	r6, r5, lsl #12
    244c:	59060405 	stmdbpl	r6, {r0, r2, sl}
    2450:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2454:	06050501 	streq	r0, [r5], -r1, lsl #10
    2458:	060b0521 	streq	r0, [fp], -r1, lsr #10
    245c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2460:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2464:	2f090501 	svccs	0x00090501
    2468:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    246c:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    2470:	060d0545 	streq	r0, [sp], -r5, asr #10
    2474:	03010501 	movweq	r0, #5377	; 0x1501
    2478:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    247c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2480:	02050020 	andeq	r0, r5, #32
    2484:	000012cc 	andeq	r1, r0, ip, asr #5
    2488:	0107a203 	tsteq	r7, r3, lsl #4
    248c:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    2490:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2494:	06030501 	streq	r0, [r3], -r1, lsl #10
    2498:	06090525 	streq	r0, [r9], -r5, lsr #10
    249c:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
    24a0:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
    24a4:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    24a8:	2070031a 	rsbscs	r0, r0, sl, lsl r3
    24ac:	10030d05 	andne	r0, r3, r5, lsl #26
    24b0:	2306052e 	movwcs	r0, #25902	; 0x652e
    24b4:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    24b8:	06020520 	streq	r0, [r2], -r0, lsr #10
    24bc:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
    24c0:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
    24c4:	06010602 	streq	r0, [r1], -r2, lsl #12
    24c8:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    24cc:	01190303 	tsteq	r9, r3, lsl #6
    24d0:	01061605 	tsteq	r6, r5, lsl #12
    24d4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    24d8:	052f0604 	streq	r0, [pc, #-1540]!	; 1edc <vscan+0x2d8>
    24dc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    24e0:	0d030603 	stceq	6, cr0, [r3, #-12]
    24e4:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    24e8:	06020501 	streq	r0, [r2], -r1, lsl #10
    24ec:	06090540 	streq	r0, [r9], -r0, asr #10
    24f0:	06030501 	streq	r0, [r3], -r1, lsl #10
    24f4:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    24f8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    24fc:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    2500:	06054c03 	streq	r4, [r5], -r3, lsl #24
    2504:	2e050106 	adfcss	f0, f5, f6
    2508:	4a7a0306 	bmi	1e83128 <__ccfg+0x1e63180>
    250c:	13060905 	movwne	r0, #26885	; 0x6905
    2510:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
    2514:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    2518:	01060e05 	tsteq	r6, r5, lsl #28
    251c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    2520:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    2524:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2528:	052f0604 	streq	r0, [pc, #-1540]!	; 1f2c <vscan+0x328>
    252c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2530:	04052007 	streq	r2, [r5], #-7
    2534:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    2538:	10050106 	andne	r0, r5, r6, lsl #2
    253c:	06040520 	streq	r0, [r4], -r0, lsr #10
    2540:	2e090530 	cfmv64hrcs	mvdx9, r0
    2544:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2548:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    254c:	1a053012 	bne	14e59c <__ccfg+0x12e5f4>
    2550:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2554:	06150522 	ldreq	r0, [r5], -r2, lsr #10
    2558:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    255c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2560:	01060e05 	tsteq	r6, r5, lsl #28
    2564:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2568:	12052906 	andne	r2, r5, #98304	; 0x18000
    256c:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    2570:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2574:	01061305 	tsteq	r6, r5, lsl #6
    2578:	31060305 	tstcc	r6, r5, lsl #6
    257c:	03060105 	movweq	r0, #24837	; 0x6105
    2580:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2584:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2588:	0205002c 	andeq	r0, r5, #44	; 0x2c
    258c:	00001374 	andeq	r1, r0, r4, ror r3
    2590:	0102ab03 	tsteq	r2, r3, lsl #22
    2594:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2598:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    259c:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    25a0:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
    25a4:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
    25a8:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    25ac:	060a0523 	streq	r0, [sl], -r3, lsr #10
    25b0:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    25b4:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    25b8:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    25bc:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    25c0:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    25c4:	13140305 	tstne	r4, #335544320	; 0x14000000
    25c8:	01060605 	tsteq	r6, r5, lsl #12
    25cc:	21060405 	tstcs	r6, r5, lsl #8
    25d0:	01060a05 	tsteq	r6, r5, lsl #20
    25d4:	0f030105 	svceq	0x00030105
    25d8:	060b0520 	streq	r0, [fp], -r0, lsr #10
    25dc:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    25e0:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    25e4:	2f062004 	svccs	0x00062004
    25e8:	01060c05 	tsteq	r6, r5, lsl #24
    25ec:	03060205 	movweq	r0, #25093	; 0x6205
    25f0:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    25f4:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    25f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    25fc:	02050020 	andeq	r0, r5, #32
    2600:	000013a8 	andeq	r1, r0, r8, lsr #7
    2604:	01088103 	tsteq	r8, r3, lsl #2
    2608:	09030205 	stmdbeq	r3, {r0, r2, r9}
    260c:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    2610:	03200501 			; <UNDEFINED> instruction: 0x03200501
    2614:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
    2618:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    261c:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    2620:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    2624:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    2628:	06020501 	streq	r0, [r2], -r1, lsl #10
    262c:	0004023e 	andeq	r0, r4, lr, lsr r2
    2630:	21050101 	tstcs	r5, r1, lsl #2
    2634:	00020500 	andeq	r0, r2, r0, lsl #10
    2638:	03000000 	movweq	r0, #0
    263c:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    2640:	01090302 	tsteq	r9, r2, lsl #6
    2644:	03062105 	movweq	r2, #24837	; 0x6105
    2648:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    264c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2650:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2654:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2658:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    265c:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
    2660:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    2664:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
    2668:	09051402 	stmdbeq	r5, {r1, sl, ip}
    266c:	01050106 	tsteq	r5, r6, lsl #2
    2670:	0006025a 	andeq	r0, r6, sl, asr r2
    2674:	20050101 	andcs	r0, r5, r1, lsl #2
    2678:	00020500 	andeq	r0, r2, r0, lsl #10
    267c:	03000000 	movweq	r0, #0
    2680:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2684:	01090302 	tsteq	r9, r2, lsl #6
    2688:	20051413 	andcs	r1, r5, r3, lsl r4
    268c:	01740306 	cmneq	r4, r6, lsl #6
    2690:	0c031d05 	stceq	13, cr1, [r3], {5}
    2694:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
    2698:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    269c:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    26a0:	06010602 	streq	r0, [r1], -r2, lsl #12
    26a4:	06050524 	streq	r0, [r5], -r4, lsr #10
    26a8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    26ac:	06070521 	streq	r0, [r7], -r1, lsr #10
    26b0:	06020501 	streq	r0, [r2], -r1, lsl #10
    26b4:	0609054c 	streq	r0, [r9], -ip, asr #10
    26b8:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    26bc:	03060305 	movweq	r0, #25349	; 0x6305
    26c0:	23052e79 	movwcs	r2, #24185	; 0x5e79
    26c4:	06052d06 	streq	r2, [r5], -r6, lsl #26
    26c8:	0e054a06 	vmlaeq.f32	s8, s10, s12
    26cc:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    26d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26d4:	02050023 	andeq	r0, r5, #35	; 0x23
    26d8:	000013c0 	andeq	r1, r0, r0, asr #7
    26dc:	01098103 	tsteq	r9, r3, lsl #2
    26e0:	13410205 	movtne	r0, #4613	; 0x1205
    26e4:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    26e8:	03062305 	movweq	r2, #25349	; 0x6305
    26ec:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    26f0:	1f3c0c03 	svcne	0x003c0c03
    26f4:	01012106 	tsteq	r1, r6, lsl #2
    26f8:	03060805 	movweq	r0, #26629	; 0x6805
    26fc:	02052028 	andeq	r2, r5, #40	; 0x28
    2700:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    2704:	2023031c 	eorcs	r0, r3, ip, lsl r3
    2708:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    270c:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    2710:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2714:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2718:	02052008 	andeq	r2, r5, #8
    271c:	00c70306 	sbceq	r0, r7, r6, lsl #6
    2720:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    2724:	060d0502 	streq	r0, [sp], -r2, lsl #10
    2728:	017bcf03 	cmneq	fp, r3, lsl #30
    272c:	0f050104 	svceq	0x00050104
    2730:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    2734:	01020520 	tsteq	r2, r0, lsr #10
    2738:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    273c:	017bca03 	cmneq	fp, r3, lsl #20
    2740:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2744:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    2748:	03020501 	movweq	r0, #9473	; 0x2501
    274c:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    2750:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    2754:	13060105 	movwne	r0, #24837	; 0x6105
    2758:	03060305 	movweq	r0, #25349	; 0x6305
    275c:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    2760:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2764:	134b0604 	movtne	r0, #46596	; 0xb604
    2768:	20060705 	andcs	r0, r6, r5, lsl #14
    276c:	4b060505 	blmi	183b88 <__ccfg+0x163be0>
    2770:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2774:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2778:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    277c:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2780:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2784:	0f060805 	svceq	0x00060805
    2788:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    278c:	31030505 	tstcc	r3, r5, lsl #10
    2790:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    2794:	4a4e0306 	bmi	13833b4 <__ccfg+0x136340c>
    2798:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    279c:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    27a0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    27a4:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    27a8:	11060b05 	tstne	r6, r5, lsl #22
    27ac:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    27b0:	0b052f06 	bleq	14e3d0 <__ccfg+0x12e428>
    27b4:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    27b8:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    27bc:	03010608 	movweq	r0, #5640	; 0x1608
    27c0:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    27c4:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    27c8:	06150513 			; <UNDEFINED> instruction: 0x06150513
    27cc:	200e0501 	andcs	r0, lr, r1, lsl #10
    27d0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    27d4:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 27c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x88>
    27d8:	01060905 	tsteq	r6, r5, lsl #18
    27dc:	21060705 	tstcs	r6, r5, lsl #14
    27e0:	01060b05 	tsteq	r6, r5, lsl #22
    27e4:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    27e8:	01060a05 	tsteq	r6, r5, lsl #20
    27ec:	23060505 	movwcs	r0, #25861	; 0x6505
    27f0:	01061c05 	tsteq	r6, r5, lsl #24
    27f4:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    27f8:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    27fc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2800:	06052e08 	streq	r2, [r5], -r8, lsl #28
    2804:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2808:	0c050106 	stfeqs	f0, [r5], {6}
    280c:	06060520 	streq	r0, [r6], -r0, lsr #10
    2810:	0608052f 	streq	r0, [r8], -pc, lsr #10
    2814:	060b0501 	streq	r0, [fp], -r1, lsl #10
    2818:	0608052a 	streq	r0, [r8], -sl, lsr #10
    281c:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    2820:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    2824:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    2828:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    282c:	051f0805 	ldreq	r0, [pc, #-2053]	; 202f <TrimAfterColdResetWakeupFromShutDown+0x43>
    2830:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    2834:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    2838:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    283c:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    2840:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2844:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    2848:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    284c:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    2850:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    2854:	06080520 	streq	r0, [r8], -r0, lsr #10
    2858:	06060501 	streq	r0, [r6], -r1, lsl #10
    285c:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    2860:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    2864:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
    2868:	03060505 	movweq	r0, #25861	; 0x6505
    286c:	0605206e 	streq	r2, [r5], -lr, rrx
    2870:	2f201703 	svccs	0x00201703
    2874:	01060705 	tsteq	r6, r5, lsl #14
    2878:	1e060b05 	vmlane.f64	d0, d6, d5
    287c:	01060c05 	tsteq	r6, r5, lsl #24
    2880:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2884:	0c030604 	stceq	6, cr0, [r3], {4}
    2888:	000b023c 	andeq	r0, fp, ip, lsr r2
    288c:	0f050101 	svceq	0x00050101
    2890:	00020500 	andeq	r0, r2, r0, lsl #10
    2894:	03000000 	movweq	r0, #0
    2898:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    289c:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    28a0:	18050106 	stmdane	r5, {r1, r2, r8}
    28a4:	2025052e 	eorcs	r0, r5, lr, lsr #10
    28a8:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    28ac:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    28b0:	0602052e 	streq	r0, [r2], -lr, lsr #10
    28b4:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
    28b8:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    28bc:	b7010100 	strlt	r0, [r1, -r0, lsl #2]
    28c0:	0300000c 	movweq	r0, #12
    28c4:	0001a100 	andeq	sl, r1, r0, lsl #2
    28c8:	fb010200 	blx	430d2 <__ccfg+0x2312a>
    28cc:	01000d0e 	tsteq	r0, lr, lsl #26
    28d0:	00010101 	andeq	r0, r1, r1, lsl #2
    28d4:	00010000 	andeq	r0, r1, r0
    28d8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    28dc:	2f656d6f 	svccs	0x00656d6f
    28e0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    28e4:	442f6e69 	strtmi	r6, [pc], #-3689	; 28ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b0>
    28e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    28ec:	4f2f706f 	svcmi	0x002f706f
    28f0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    28f4:	502f5445 	eorpl	r5, pc, r5, asr #8
    28f8:	534f4349 	movtpl	r4, #62281	; 0xf349
    28fc:	6369502f 	cmnvs	r9, #47	; 0x2f
    2900:	502f534f 	eorpl	r5, pc, pc, asr #6
    2904:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    2908:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    290c:	2f004974 	svccs	0x00004974
    2910:	2f727375 	svccs	0x00727375
    2914:	2f62696c 	svccs	0x0062696c
    2918:	2f636367 	svccs	0x00636367
    291c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2920:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    2924:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2928:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    292c:	2f312e32 	svccs	0x00312e32
    2930:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2934:	00656475 	rsbeq	r6, r5, r5, ror r4
    2938:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2884 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x148>
    293c:	616d2f65 	cmnvs	sp, r5, ror #30
    2940:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2944:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2948:	706f746b 	rsbvc	r7, pc, fp, ror #8
    294c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2950:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2954:	4349502f 	movtmi	r5, #36911	; 0x902f
    2958:	502f534f 	eorpl	r5, pc, pc, asr #6
    295c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2960:	3143432f 	cmpcc	r3, pc, lsr #6
    2964:	00585833 	subseq	r5, r8, r3, lsr r8
    2968:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 28b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x178>
    296c:	616d2f65 	cmnvs	sp, r5, ror #30
    2970:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2974:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2978:	706f746b 	rsbvc	r7, pc, fp, ror #8
    297c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2980:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2984:	4349502f 	movtmi	r5, #36911	; 0x902f
    2988:	502f534f 	eorpl	r5, pc, pc, asr #6
    298c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2990:	6f682f00 	svcvs	0x00682f00
    2994:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 27e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xac>
    2998:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    299c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    29a0:	6f746b73 	svcvs	0x00746b73
    29a4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    29a8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    29ac:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    29b0:	2f534f43 	svccs	0x00534f43
    29b4:	4f636950 	svcmi	0x00636950
    29b8:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    29bc:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    29c0:	63740000 	cmnvs	r4, #0
    29c4:	00632e76 	rsbeq	r2, r3, r6, ror lr
    29c8:	73000001 	movwvc	r0, #1
    29cc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    29d0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    29d4:	73000002 	movwvc	r0, #2
    29d8:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    29dc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    29e0:	61000002 	tstvs	r0, r2
    29e4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    29e8:	00030068 	andeq	r0, r3, r8, rrx
    29ec:	63616d00 	cmnvs	r1, #0, 26
    29f0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    29f4:	70000003 	andvc	r0, r0, r3
    29f8:	5f736e69 	svcpl	0x00736e69
    29fc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2a00:	00030068 	andeq	r0, r3, r8, rrx
    2a04:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    2a08:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    2a0c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2a10:	0300682e 	movweq	r6, #2094	; 0x82e
    2a14:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    2a18:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    2a1c:	00040068 	andeq	r0, r4, r8, rrx
    2a20:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2a24:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2a28:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2a2c:	6b000001 	blvs	2a38 <NOROM_ChipInfo_GetHwRevision+0x18>
    2a30:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2a34:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    2a38:	74000005 	strvc	r0, [r0], #-5
    2a3c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    2a40:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2a44:	00000100 	andeq	r0, r0, r0, lsl #2
    2a48:	5f766374 	svcpl	0x00766374
    2a4c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    2a50:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2a54:	00682e61 	rsbeq	r2, r8, r1, ror #28
    2a58:	3c000001 	stccc	0, cr0, [r0], {1}
    2a5c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2a60:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    2a64:	0000003e 	andeq	r0, r0, lr, lsr r0
    2a68:	31050000 	mrscc	r0, (UNDEF: 5)
    2a6c:	00020500 	andeq	r0, r2, r0, lsl #10
    2a70:	03000000 	movweq	r0, #0
    2a74:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    2a78:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    2a7c:	03063105 	movweq	r3, #24837	; 0x6105
    2a80:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    2a84:	16052607 	strne	r2, [r5], -r7, lsl #12
    2a88:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    2a8c:	26060205 	strcs	r0, [r6], -r5, lsl #4
    2a90:	13061a05 	movwne	r1, #27141	; 0x6a05
    2a94:	051f0e05 	ldreq	r0, [pc, #-3589]	; 1c97 <vscan+0x93>
    2a98:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2a9c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2aa0:	0c030602 	stceq	6, cr0, [r3], {2}
    2aa4:	06010520 	streq	r0, [r1], -r0, lsr #10
    2aa8:	00010216 	andeq	r0, r1, r6, lsl r2
    2aac:	2e050101 	adfcss	f0, f5, f1
    2ab0:	00020500 	andeq	r0, r2, r0, lsl #10
    2ab4:	03000000 	movweq	r0, #0
    2ab8:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    2abc:	06051602 	streq	r1, [r5], -r2, lsl #12
    2ac0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2ac4:	06030520 	streq	r0, [r3], -r0, lsr #10
    2ac8:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    2acc:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    2ad0:	21060305 	tstcs	r6, r5, lsl #6
    2ad4:	01062905 	tsteq	r6, r5, lsl #18
    2ad8:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    2adc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2ae0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2ae4:	01024c01 	tsteq	r2, r1, lsl #24
    2ae8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2aec:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2af0:	00000000 	andeq	r0, r0, r0
    2af4:	01028303 	tsteq	r2, r3, lsl #6
    2af8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2afc:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    2b00:	2f062402 	svccs	0x00062402
    2b04:	01130101 	tsteq	r3, r1, lsl #2
    2b08:	01051401 	tsteq	r5, r1, lsl #8
    2b0c:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    2b10:	0002022d 	andeq	r0, r2, sp, lsr #4
    2b14:	3a050101 	bcc	142f20 <__ccfg+0x122f78>
    2b18:	00020500 	andeq	r0, r2, r0, lsl #10
    2b1c:	03000000 	movweq	r0, #0
    2b20:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    2b24:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    2b28:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    2b2c:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    2b30:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    2b34:	20062402 	andcs	r2, r6, r2, lsl #8
    2b38:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    2b3c:	03050106 	movweq	r0, #20742	; 0x5106
    2b40:	02053d06 	andeq	r3, r5, #384	; 0x180
    2b44:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2b48:	20050501 	andcs	r0, r5, r1, lsl #10
    2b4c:	30060305 	andcc	r0, r6, r5, lsl #6
    2b50:	01061705 	tsteq	r6, r5, lsl #14
    2b54:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    2b58:	052f0603 	streq	r0, [pc, #-1539]!	; 255d <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10d>
    2b5c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2b60:	03052011 	movweq	r2, #20497	; 0x5011
    2b64:	0b052106 	bleq	14af84 <__ccfg+0x12afdc>
    2b68:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2b6c:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    2b70:	01050106 	tsteq	r5, r6, lsl #2
    2b74:	0603054b 	streq	r0, [r3], -fp, asr #10
    2b78:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    2b7c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    2b80:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b84:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2b88:	03052014 	movweq	r2, #20500	; 0x5014
    2b8c:	11052106 	tstne	r5, r6, lsl #2
    2b90:	03050106 	movweq	r0, #20742	; 0x5106
    2b94:	0b052106 	bleq	14afb4 <__ccfg+0x12b00c>
    2b98:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    2b9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2ba0:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2ba4:	00000000 	andeq	r0, r0, r0
    2ba8:	0101df03 	tsteq	r1, r3, lsl #30
    2bac:	02052006 	andeq	r2, r5, #6
    2bb0:	20090306 	andcs	r0, r9, r6, lsl #6
    2bb4:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
    2bb8:	01061b05 	tsteq	r6, r5, lsl #22
    2bbc:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2bc0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2bc4:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2bc8:	133c7903 	teqne	ip, #49152	; 0xc000
    2bcc:	03060105 	movweq	r0, #24837	; 0x6105
    2bd0:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    2bd4:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    2bd8:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    2bdc:	06040501 	streq	r0, [r4], -r1, lsl #10
    2be0:	2e90014c 	fmlcssm	f0, f0, #4.0
    2be4:	01055b13 	tsteq	r5, r3, lsl fp
    2be8:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    2bec:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    2bf0:	0c023601 	stceq	6, cr3, [r2], {1}
    2bf4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2bf8:	02050031 	andeq	r0, r5, #49	; 0x31
    2bfc:	00000000 	andeq	r0, r0, r0
    2c00:	0102ba03 	tsteq	r2, r3, lsl #20
    2c04:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    2c08:	03063105 	movweq	r3, #24837	; 0x6105
    2c0c:	06050178 			; <UNDEFINED> instruction: 0x06050178
    2c10:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2c14:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    2c18:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    2c1c:	03050106 	movweq	r0, #20742	; 0x5106
    2c20:	06012f06 	streq	r2, [r1], -r6, lsl #30
    2c24:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    2c28:	133b0621 	teqne	fp, #34603008	; 0x2100000
    2c2c:	4a660601 	bmi	1984438 <__ccfg+0x1964490>
    2c30:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2c34:	03060105 	movweq	r0, #24837	; 0x6105
    2c38:	03053c09 	movweq	r3, #23561	; 0x5c09
    2c3c:	062e7703 	strteq	r7, [lr], -r3, lsl #14
    2c40:	06010536 			; <UNDEFINED> instruction: 0x06010536
    2c44:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
    2c48:	01000b02 	tsteq	r0, r2, lsl #22
    2c4c:	004a0501 	subeq	r0, sl, r1, lsl #10
    2c50:	00000205 	andeq	r0, r0, r5, lsl #4
    2c54:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2c58:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2c5c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    2c60:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    2c64:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    2c68:	0b030505 	bleq	c4084 <__ccfg+0xa40dc>
    2c6c:	034a053c 	movteq	r0, #42300	; 0xa53c
    2c70:	02052075 	andeq	r2, r5, #117	; 0x75
    2c74:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
    2c78:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2c7c:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    2c80:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    2c84:	053c3005 	ldreq	r3, [ip, #-5]!
    2c88:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    2c8c:	03054b06 	movweq	r4, #23302	; 0x5b06
    2c90:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    2c94:	03060205 	movweq	r0, #25093	; 0x6205
    2c98:	13132e6e 	tstne	r3, #1760	; 0x6e0
    2c9c:	06120517 			; <UNDEFINED> instruction: 0x06120517
    2ca0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ca4:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
    2ca8:	20060a05 	andcs	r0, r6, r5, lsl #20
    2cac:	2f060305 	svccs	0x00060305
    2cb0:	01061305 	tsteq	r6, r5, lsl #6
    2cb4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2cb8:	051f0622 	ldreq	r0, [pc, #-1570]	; 269e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb2>
    2cbc:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    2cc0:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    2cc4:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    2cc8:	0105330a 	tsteq	r5, sl, lsl #6
    2ccc:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    2cd0:	73030602 	movwvc	r0, #13826	; 0x3602
    2cd4:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    2cd8:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    2cdc:	2f060205 	svccs	0x00060205
    2ce0:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    2ce4:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    2ce8:	0114132f 	tsteq	r4, pc, lsr #6
    2cec:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    2cf0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2cf4:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    2cf8:	13053206 	movwne	r3, #20998	; 0x5206
    2cfc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d00:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2d04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d08:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    2d0c:	06130515 			; <UNDEFINED> instruction: 0x06130515
    2d10:	06020501 	streq	r0, [r2], -r1, lsl #10
    2d14:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    2d18:	06030501 	streq	r0, [r3], -r1, lsl #10
    2d1c:	0010023d 	andseq	r0, r0, sp, lsr r2
    2d20:	3a050101 	bcc	14312c <__ccfg+0x123184>
    2d24:	00020500 	andeq	r0, r2, r0, lsl #10
    2d28:	03000000 	movweq	r0, #0
    2d2c:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    2d30:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2d34:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    2d38:	0205201b 	andeq	r2, r5, #27
    2d3c:	4a062025 	bmi	18add8 <__ccfg+0x16ae30>
    2d40:	03062706 	movweq	r2, #26374	; 0x6706
    2d44:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    2d48:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    2d4c:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2d50:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2d54:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2d58:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    2d5c:	13410603 	movtne	r0, #5635	; 0x1603
    2d60:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    2d64:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2d68:	02052008 	andeq	r2, r5, #8
    2d6c:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    2d70:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2d74:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2d78:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    2d7c:	0101000b 	tsteq	r1, fp
    2d80:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    2d84:	00000002 	andeq	r0, r0, r2
    2d88:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    2d8c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2d90:	01060505 	tsteq	r6, r5, lsl #10
    2d94:	052f0f05 	streq	r0, [pc, #-3845]!	; 1e97 <vscan+0x293>
    2d98:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    2d9c:	06020521 	streq	r0, [r2], -r1, lsr #10
    2da0:	06100531 			; <UNDEFINED> instruction: 0x06100531
    2da4:	06020501 	streq	r0, [r2], -r1, lsl #10
    2da8:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2dac:	2b0a0501 	blcs	2841b8 <__ccfg+0x264210>
    2db0:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    2db4:	01010004 	tsteq	r1, r4
    2db8:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    2dbc:	00000002 	andeq	r0, r0, r2
    2dc0:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    2dc4:	19020501 	stmdbne	r2, {r0, r8, sl}
    2dc8:	01141313 	tsteq	r4, r3, lsl r3
    2dcc:	03063c05 	movweq	r3, #27653	; 0x6c05
    2dd0:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    2dd4:	200b0302 	andcs	r0, fp, r2, lsl #6
    2dd8:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2ddc:	06201303 	strteq	r1, [r0], -r3, lsl #6
    2de0:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    2de4:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2de8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2dec:	06050521 	streq	r0, [r5], -r1, lsr #10
    2df0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2df4:	06060530 			; <UNDEFINED> instruction: 0x06060530
    2df8:	06040501 	streq	r0, [r4], -r1, lsl #10
    2dfc:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    2e00:	01013d33 	tsteq	r1, r3, lsr sp
    2e04:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    2e08:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    2e0c:	06013006 	streq	r3, [r1], -r6
    2e10:	2e064a4a 	vmlscs.f32	s8, s12, s20
    2e14:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    2e18:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    2e1c:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    2e20:	01052306 	tsteq	r5, r6, lsl #6
    2e24:	0a051306 	beq	147a44 <__ccfg+0x127a9c>
    2e28:	022e7003 	eoreq	r7, lr, #3
    2e2c:	0101000b 	tsteq	r1, fp
    2e30:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2e34:	00000002 	andeq	r0, r0, r2
    2e38:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    2e3c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2e40:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2e44:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2e48:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2e4c:	20090302 	andcs	r0, r9, r2, lsl #6
    2e50:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2e54:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2e58:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2e5c:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2e60:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2e64:	20050501 	andcs	r0, r5, r1, lsl #10
    2e68:	2f060305 	svccs	0x00060305
    2e6c:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2e70:	01061b05 	tsteq	r6, r5, lsl #22
    2e74:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2e78:	0a030603 	beq	c468c <__ccfg+0xa46e4>
    2e7c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2e80:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2e84:	200b030a 	andcs	r0, fp, sl, lsl #6
    2e88:	20061a05 	andcs	r1, r6, r5, lsl #20
    2e8c:	01060305 	tsteq	r6, r5, lsl #6
    2e90:	2f060405 	svccs	0x00060405
    2e94:	11062c05 	tstne	r6, r5, lsl #24
    2e98:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2e9c:	051f062a 	ldreq	r0, [pc, #-1578]	; 287a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2ea0:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    2ea4:	01062105 	tsteq	r6, r5, lsl #2
    2ea8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2eac:	052f0603 	streq	r0, [pc, #-1539]!	; 28b1 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x175>
    2eb0:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2eb4:	20052006 	andcs	r2, r5, r6
    2eb8:	20060520 	andcs	r0, r6, r0, lsr #10
    2ebc:	33060205 	movwcc	r0, #25093	; 0x6205
    2ec0:	06050513 			; <UNDEFINED> instruction: 0x06050513
    2ec4:	06030501 	streq	r0, [r3], -r1, lsl #10
    2ec8:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    2ecc:	0a050f06 	beq	146aec <__ccfg+0x126b44>
    2ed0:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    2ed4:	06030520 	streq	r0, [r3], -r0, lsr #10
    2ed8:	03010501 	movweq	r0, #5377	; 0x1501
    2edc:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    2ee0:	20740306 	rsbscs	r0, r4, r6, lsl #6
    2ee4:	01060805 	tsteq	r6, r5, lsl #16
    2ee8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2eec:	052f0605 	streq	r0, [pc, #-1541]!	; 28ef <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b3>
    2ef0:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    2ef4:	2a052207 	bcs	14b718 <__ccfg+0x12b770>
    2ef8:	0a021e06 	beq	8a718 <__ccfg+0x6a770>
    2efc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2f00:	02050038 	andeq	r0, r5, #56	; 0x38
    2f04:	00000000 	andeq	r0, r0, r0
    2f08:	0105a303 	tsteq	r5, r3, lsl #6
    2f0c:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2f10:	01141313 	tsteq	r4, r3, lsl r3
    2f14:	03063805 	movweq	r3, #26629	; 0x6805
    2f18:	02052077 	andeq	r2, r5, #119	; 0x77
    2f1c:	20200903 	eorcs	r0, r0, r3, lsl #18
    2f20:	03054a06 	movweq	r4, #23046	; 0x5a06
    2f24:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2f28:	03060205 	movweq	r0, #25093	; 0x6205
    2f2c:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    2f30:	01061a05 	tsteq	r6, r5, lsl #20
    2f34:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2f38:	052f0603 	streq	r0, [pc, #-1539]!	; 293d <NOROM_SysCtrlSetRechargeBeforePowerDown+0x201>
    2f3c:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    2f40:	1b050106 	blne	143360 <__ccfg+0x1233b8>
    2f44:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    2f48:	0305206b 	movweq	r2, #20587	; 0x506b
    2f4c:	7cb30306 	ldcvc	3, cr0, [r3], #24
    2f50:	06050520 	streq	r0, [r5], -r0, lsr #10
    2f54:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f58:	06060521 	streq	r0, [r6], -r1, lsr #10
    2f5c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f60:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    2f64:	01061305 	tsteq	r6, r5, lsl #6
    2f68:	20060f05 	andcs	r0, r6, r5, lsl #30
    2f6c:	13060505 	movwne	r0, #25861	; 0x6505
    2f70:	03060905 	movweq	r0, #26885	; 0x6905
    2f74:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    2f78:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    2f7c:	0305200c 	movweq	r2, #20492	; 0x500c
    2f80:	20052f06 	andcs	r2, r5, r6, lsl #30
    2f84:	06050106 	streq	r0, [r5], -r6, lsl #2
    2f88:	20200520 	eorcs	r0, r0, r0, lsr #10
    2f8c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2f90:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    2f94:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2f98:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    2f9c:	0a030601 	beq	c47a8 <__ccfg+0xa4800>
    2fa0:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2fa4:	06090521 	streq	r0, [r9], -r1, lsr #10
    2fa8:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    2fac:	06020520 	streq	r0, [r2], -r0, lsr #10
    2fb0:	03010501 	movweq	r0, #5377	; 0x1501
    2fb4:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    2fb8:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2fbc:	01061e05 	tsteq	r6, r5, lsl #28
    2fc0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2fc4:	2f300604 	svccs	0x00300604
    2fc8:	01060605 	tsteq	r6, r5, lsl #12
    2fcc:	21060405 	tstcs	r6, r5, lsl #8
    2fd0:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    2fd4:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    2fd8:	0101000a 	tsteq	r1, sl
    2fdc:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    2fe0:	00000002 	andeq	r0, r0, r2
    2fe4:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    2fe8:	13020501 	movwne	r0, #9473	; 0x2501
    2fec:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2ff0:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    2ff4:	20207a03 	eorcs	r7, r0, r3, lsl #20
    2ff8:	20420205 	subcs	r0, r2, r5, lsl #4
    2ffc:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    3000:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    3004:	4a580601 	bmi	1604810 <__ccfg+0x15e4868>
    3008:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    300c:	01060e05 	tsteq	r6, r5, lsl #28
    3010:	2f060205 	svccs	0x00060205
    3014:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    3018:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    301c:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    3020:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3024:	03052e05 	movweq	r2, #24069	; 0x5e05
    3028:	06052206 	streq	r2, [r5], -r6, lsl #4
    302c:	0a050106 	beq	14344c <__ccfg+0x1234a4>
    3030:	0301054e 	movweq	r0, #5454	; 0x154e
    3034:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    3038:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    303c:	0117033d 	tsteq	r7, sp, lsr r3
    3040:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3044:	2e3c012e 	rsfcsep	f0, f4, #0.5
    3048:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    304c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3050:	0b054a17 	bleq	1558b4 <__ccfg+0x13590c>
    3054:	58050520 	stmdapl	r5, {r5, r8, sl}
    3058:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    305c:	01060605 	tsteq	r6, r5, lsl #12
    3060:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    3064:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3068:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    306c:	052f0602 	streq	r0, [pc, #-1538]!	; 2a72 <NOROM_ChipInfo_GetHwRevision+0x52>
    3070:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3074:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3078:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    307c:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3080:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3084:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2177 <NOROM_SetupSetVddrLevel+0x13>
    3088:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    308c:	01060905 	tsteq	r6, r5, lsl #18
    3090:	01000c02 	tsteq	r0, r2, lsl #24
    3094:	00440501 	subeq	r0, r4, r1, lsl #10
    3098:	00000205 	andeq	r0, r0, r5, lsl #4
    309c:	87030000 	strhi	r0, [r3, -r0]
    30a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    30a4:	06440516 			; <UNDEFINED> instruction: 0x06440516
    30a8:	0205200e 	andeq	r2, r5, #14
    30ac:	1a052606 	bne	14c8cc <__ccfg+0x12c924>
    30b0:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    30b4:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    30b8:	09030602 	stmdbeq	r3, {r1, r9, sl}
    30bc:	0605054a 	streq	r0, [r5], -sl, asr #10
    30c0:	06030501 	streq	r0, [r3], -r1, lsl #10
    30c4:	1605672f 	strne	r6, [r5], -pc, lsr #14
    30c8:	03050106 	movweq	r0, #20742	; 0x5106
    30cc:	16056706 	strne	r6, [r5], -r6, lsl #14
    30d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    30d4:	01055b06 	tsteq	r5, r6, lsl #22
    30d8:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    30dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    30e0:	0205004b 	andeq	r0, r5, #75	; 0x4b
    30e4:	00000000 	andeq	r0, r0, r0
    30e8:	01069903 	tsteq	r6, r3, lsl #18
    30ec:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    30f0:	03064b05 	movweq	r4, #27397	; 0x6b05
    30f4:	1a05017a 	bne	1436e4 <__ccfg+0x12373c>
    30f8:	034b0526 	movteq	r0, #46374	; 0xb526
    30fc:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    3100:	4a090306 	bmi	243d20 <__ccfg+0x223d78>
    3104:	01060505 	tsteq	r6, r5, lsl #10
    3108:	2f060305 	svccs	0x00060305
    310c:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3110:	06030501 	streq	r0, [r3], -r1, lsl #10
    3114:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3118:	06020501 	streq	r0, [r2], -r1, lsl #10
    311c:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    3120:	00020213 	andeq	r0, r2, r3, lsl r2
    3124:	31050101 	tstcc	r5, r1, lsl #2
    3128:	00020500 	andeq	r0, r2, r0, lsl #10
    312c:	03000000 	movweq	r0, #0
    3130:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    3134:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    3138:	03050106 	movweq	r0, #20742	; 0x5106
    313c:	01052106 	tsteq	r5, r6, lsl #2
    3140:	01023d06 	tsteq	r2, r6, lsl #26
    3144:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3148:	02050048 	andeq	r0, r5, #72	; 0x48
    314c:	00000000 	andeq	r0, r0, r0
    3150:	0106d103 	tsteq	r6, r3, lsl #2
    3154:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3158:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    315c:	01240602 			; <UNDEFINED> instruction: 0x01240602
    3160:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3164:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3168:	4a4a0620 	bmi	12849f0 <__ccfg+0x1264a48>
    316c:	06010513 			; <UNDEFINED> instruction: 0x06010513
    3170:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3174:	01000602 	tsteq	r0, r2, lsl #12
    3178:	00460501 	subeq	r0, r6, r1, lsl #10
    317c:	00000205 	andeq	r0, r0, r5, lsl #4
    3180:	b2030000 	andlt	r0, r3, #0
    3184:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3188:	06460517 			; <UNDEFINED> instruction: 0x06460517
    318c:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    3190:	2f060305 	svccs	0x00060305
    3194:	01060605 	tsteq	r6, r5, lsl #12
    3198:	30060305 	andcc	r0, r6, r5, lsl #6
    319c:	01060605 	tsteq	r6, r5, lsl #12
    31a0:	2f060405 	svccs	0x00060405
    31a4:	06070513 			; <UNDEFINED> instruction: 0x06070513
    31a8:	06040501 	streq	r0, [r4], -r1, lsl #10
    31ac:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    31b0:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    31b4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    31b8:	01060c05 	tsteq	r6, r5, lsl #24
    31bc:	09030105 	stmdbeq	r3, {r0, r2, r8}
    31c0:	06030520 	streq	r0, [r3], -r0, lsr #10
    31c4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    31c8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    31cc:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    31d0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    31d4:	014c0602 	cmpeq	ip, r2, lsl #12
    31d8:	4a062e06 	bmi	18e9f8 <__ccfg+0x16ea50>
    31dc:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    31e0:	01050106 	tsteq	r5, r6, lsl #2
    31e4:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    31e8:	71030b05 	tstvc	r3, r5, lsl #22
    31ec:	000b023c 	andeq	r0, fp, ip, lsr r2
    31f0:	3d050101 	stfccs	f0, [r5, #-4]
    31f4:	00020500 	andeq	r0, r2, r0, lsl #10
    31f8:	03000000 	movweq	r0, #0
    31fc:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    3200:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3204:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3208:	06202402 	strteq	r2, [r0], -r2, lsl #8
    320c:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3210:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    3214:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    3218:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    321c:	43052e22 	movwmi	r2, #24098	; 0x5e22
    3220:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    3224:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    3228:	01010005 	tsteq	r1, r5
    322c:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3230:	00000002 	andeq	r0, r0, r2
    3234:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    3238:	16020501 	strne	r0, [r2], -r1, lsl #10
    323c:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3240:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3244:	4a4a0620 	bmi	1284acc <__ccfg+0x1264b24>
    3248:	06220513 			; <UNDEFINED> instruction: 0x06220513
    324c:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    3250:	01000502 	tsteq	r0, r2, lsl #10
    3254:	00400501 	subeq	r0, r0, r1, lsl #10
    3258:	00000205 	andeq	r0, r0, r5, lsl #4
    325c:	ea030000 	b	c3264 <__ccfg+0xa32bc>
    3260:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3264:	40051416 	andmi	r1, r5, r6, lsl r4
    3268:	017a0306 	cmneq	sl, r6, lsl #6
    326c:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3270:	7a034005 	bvc	d328c <__ccfg+0xb32e4>
    3274:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3278:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    327c:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3280:	01061105 	tsteq	r6, r5, lsl #2
    3284:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3288:	02051d11 	andeq	r1, r5, #1088	; 0x440
    328c:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3290:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3294:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3298:	01060905 	tsteq	r6, r5, lsl #18
    329c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    32a0:	01010002 	tsteq	r1, r2
    32a4:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    32a8:	00000002 	andeq	r0, r0, r2
    32ac:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    32b0:	16020501 	strne	r0, [r2], -r1, lsl #10
    32b4:	01000302 	tsteq	r0, r2, lsl #6
    32b8:	00450501 	subeq	r0, r5, r1, lsl #10
    32bc:	00000205 	andeq	r0, r0, r5, lsl #4
    32c0:	85030000 	strhi	r0, [r3, #-0]
    32c4:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    32c8:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    32cc:	017a0306 	cmneq	sl, r6, lsl #6
    32d0:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    32d4:	31060305 	tstcc	r6, r5, lsl #6
    32d8:	01060605 	tsteq	r6, r5, lsl #12
    32dc:	2f060405 	svccs	0x00060405
    32e0:	2f060305 	svccs	0x00060305
    32e4:	06012e06 	streq	r2, [r1], -r6, lsl #28
    32e8:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    32ec:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    32f0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    32f4:	0a052e06 	beq	14eb14 <__ccfg+0x12eb6c>
    32f8:	27010535 	smladxcs	r1, r5, r5, r0
    32fc:	03060405 	movweq	r0, #25605	; 0x6405
    3300:	20052073 	andcs	r2, r5, r3, ror r0
    3304:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3308:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    330c:	30060405 	andcc	r0, r6, r5, lsl #8
    3310:	01061d05 	tsteq	r6, r5, lsl #26
    3314:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    3318:	060b052f 	streq	r0, [fp], -pc, lsr #10
    331c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3320:	060b0541 	streq	r0, [fp], -r1, asr #10
    3324:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3328:	2f060305 	svccs	0x00060305
    332c:	01060a05 	tsteq	r6, r5, lsl #20
    3330:	01000902 	tsteq	r0, r2, lsl #18
    3334:	00480501 	subeq	r0, r8, r1, lsl #10
    3338:	00000205 	andeq	r0, r0, r5, lsl #4
    333c:	86030000 	strhi	r0, [r3], -r0
    3340:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3344:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3348:	48050106 	stmdami	r5, {r1, r2, r8}
    334c:	20207803 	eorcs	r7, r0, r3, lsl #16
    3350:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3354:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3358:	06030520 	streq	r0, [r3], -r0, lsr #10
    335c:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3360:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3364:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3368:	052f0602 	streq	r0, [pc, #-1538]!	; 2d6e <port_confs+0x62>
    336c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3370:	11052221 	tstne	r5, r1, lsr #4
    3374:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3378:	06210530 			; <UNDEFINED> instruction: 0x06210530
    337c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3380:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3384:	01060505 	tsteq	r6, r5, lsl #10
    3388:	21060305 	tstcs	r6, r5, lsl #6
    338c:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3390:	13060105 	movwne	r0, #24837	; 0x6105
    3394:	01000b02 	tsteq	r0, r2, lsl #22
    3398:	00440501 	subeq	r0, r4, r1, lsl #10
    339c:	00000205 	andeq	r0, r0, r5, lsl #4
    33a0:	a0030000 	andge	r0, r3, r0
    33a4:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    33a8:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    33ac:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    33b0:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    33b4:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    33b8:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    33bc:	03020520 	movweq	r0, #9504	; 0x2520
    33c0:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    33c4:	0603054a 	streq	r0, [r3], -sl, asr #10
    33c8:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    33cc:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    33d0:	0f054706 	svceq	0x00054706
    33d4:	06050106 	streq	r0, [r5], -r6, lsl #2
    33d8:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    33dc:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    33e0:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    33e4:	0a050106 	beq	143804 <__ccfg+0x12385c>
    33e8:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    33ec:	200d0301 	andcs	r0, sp, r1, lsl #6
    33f0:	03060305 	movweq	r0, #25349	; 0x6305
    33f4:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    33f8:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    33fc:	06050106 	streq	r0, [r5], -r6, lsl #2
    3400:	06020574 			; <UNDEFINED> instruction: 0x06020574
    3404:	06050542 	streq	r0, [r5], -r2, asr #10
    3408:	06020501 	streq	r0, [r2], -r1, lsl #10
    340c:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    3410:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    3414:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    3418:	02052006 	andeq	r2, r5, #6
    341c:	0b052306 	bleq	14c03c <__ccfg+0x12c094>
    3420:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3424:	0602054a 	streq	r0, [r2], -sl, asr #10
    3428:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    342c:	0a020106 	beq	8384c <__ccfg+0x638a4>
    3430:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3434:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3438:	00000000 	andeq	r0, r0, r0
    343c:	0109d103 	tsteq	r9, r3, lsl #2
    3440:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3444:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3448:	20780306 	rsbscs	r0, r8, r6, lsl #6
    344c:	20280205 	eorcs	r0, r8, r5, lsl #4
    3450:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3454:	01060505 	tsteq	r6, r5, lsl #10
    3458:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    345c:	01060405 	tsteq	r6, r5, lsl #8
    3460:	21060205 	tstcs	r6, r5, lsl #4
    3464:	01060505 	tsteq	r6, r5, lsl #10
    3468:	33060205 	movwcc	r0, #25093	; 0x6205
    346c:	01060a05 	tsteq	r6, r5, lsl #20
    3470:	2f060205 	svccs	0x00060205
    3474:	1301012f 	movwne	r0, #4399	; 0x112f
    3478:	01060905 	tsteq	r6, r5, lsl #18
    347c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3480:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3484:	01000902 	tsteq	r0, r2, lsl #18
    3488:	00340501 	eorseq	r0, r4, r1, lsl #10
    348c:	00000205 	andeq	r0, r0, r5, lsl #4
    3490:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3494:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3498:	01141316 	tsteq	r4, r6, lsl r3
    349c:	03063405 	movweq	r3, #25605	; 0x6405
    34a0:	02052079 	andeq	r2, r5, #121	; 0x79
    34a4:	4a062027 	bmi	18b548 <__ccfg+0x16b5a0>
    34a8:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    34ac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    34b0:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    34b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    34b8:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    34bc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    34c0:	0a052306 	beq	14c0e0 <__ccfg+0x12c138>
    34c4:	09051006 	stmdbeq	r5, {r1, r2, ip}
    34c8:	21010530 	tstcs	r1, r0, lsr r5
    34cc:	01000702 	tsteq	r0, r2, lsl #14
    34d0:	00350501 	eorseq	r0, r5, r1, lsl #10
    34d4:	00000205 	andeq	r0, r0, r5, lsl #4
    34d8:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    34dc:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    34e0:	06350516 			; <UNDEFINED> instruction: 0x06350516
    34e4:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    34e8:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    34ec:	01300602 	teqeq	r0, r2, lsl #12
    34f0:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    34f4:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    34f8:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    34fc:	06022c02 	streq	r2, [r2], -r2, lsl #24
    3500:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3504:	02050032 	andeq	r0, r5, #50	; 0x32
    3508:	00000000 	andeq	r0, r0, r0
    350c:	010a8403 	tsteq	sl, r3, lsl #8
    3510:	01160205 	tsteq	r6, r5, lsl #4
    3514:	1c063205 	sfmne	f3, 4, [r6], {5}
    3518:	20240205 	eorcs	r0, r4, r5, lsl #4
    351c:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3520:	03060a05 	movweq	r0, #27141	; 0x6a05
    3524:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    3528:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    352c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3530:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    3534:	03051413 	movweq	r1, #21523	; 0x5413
    3538:	06050513 			; <UNDEFINED> instruction: 0x06050513
    353c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3540:	06060521 	streq	r0, [r6], -r1, lsr #10
    3544:	06030501 	streq	r0, [r3], -r1, lsl #10
    3548:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    354c:	01061305 	tsteq	r6, r5, lsl #6
    3550:	20060f05 	andcs	r0, r6, r5, lsl #30
    3554:	13060505 	movwne	r0, #25861	; 0x6505
    3558:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    355c:	08022008 	stmdaeq	r2, {r3, sp}
    3560:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3564:	02050028 	andeq	r0, r5, #40	; 0x28
    3568:	000014fc 	strdeq	r1, [r0], -ip
    356c:	010a8c03 	tsteq	sl, r3, lsl #24
    3570:	1a030105 	bne	c398c <__ccfg+0xa39e4>
    3574:	00010201 	andeq	r0, r1, r1, lsl #4
    3578:	01230101 			; <UNDEFINED> instruction: 0x01230101
    357c:	00030000 	andeq	r0, r3, r0
    3580:	00000089 	andeq	r0, r0, r9, lsl #1
    3584:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3588:	0101000d 	tsteq	r1, sp
    358c:	00000101 	andeq	r0, r0, r1, lsl #2
    3590:	00000100 	andeq	r0, r0, r0, lsl #2
    3594:	6f682f01 	svcvs	0x00682f01
    3598:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 33ec <__exidx_end+0x660>
    359c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    35a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    35a4:	6f746b73 	svcvs	0x00746b73
    35a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    35ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    35b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    35b4:	2f534f43 	svccs	0x00534f43
    35b8:	4f636950 	svcmi	0x00636950
    35bc:	43432f53 	movtmi	r2, #16211	; 0x3f53
    35c0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    35c4:	73752f00 	cmnvc	r5, #0, 30
    35c8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    35cc:	63672f62 	cmnvs	r7, #392	; 0x188
    35d0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    35d4:	6f6e2d6d 	svcvs	0x006e2d6d
    35d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    35dc:	2f696261 	svccs	0x00696261
    35e0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    35e4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    35e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    35ec:	73000065 	movwvc	r0, #101	; 0x65
    35f0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    35f4:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    35f8:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    35fc:	00000100 	andeq	r0, r0, r0, lsl #2
    3600:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3604:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3608:	00000200 	andeq	r0, r0, r0, lsl #4
    360c:	00010500 	andeq	r0, r1, r0, lsl #10
    3610:	14fe0205 	ldrbtne	r0, [lr], #517	; 0x205
    3614:	84030000 	strhi	r0, [r3], #-0
    3618:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    361c:	0a051416 	beq	14867c <__ccfg+0x1286d4>
    3620:	00010210 	andeq	r0, r1, r0, lsl r2
    3624:	01050101 	tsteq	r5, r1, lsl #2
    3628:	00020500 	andeq	r0, r2, r0, lsl #10
    362c:	03000015 	movweq	r0, #21
    3630:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    3634:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3638:	0102100a 	tsteq	r2, sl
    363c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3640:	02050001 	andeq	r0, r5, #1
    3644:	00001502 	andeq	r1, r0, r2, lsl #10
    3648:	0102a803 	tsteq	r2, r3, lsl #16
    364c:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3650:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3654:	01010001 	tsteq	r1, r1
    3658:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    365c:	00150402 	andseq	r0, r5, r2, lsl #8
    3660:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3664:	13050501 	movwne	r0, #21761	; 0x5501
    3668:	06010517 			; <UNDEFINED> instruction: 0x06010517
    366c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    3670:	33062605 	movwcc	r2, #26117	; 0x6605
    3674:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3678:	2105051f 	tstcs	r5, pc, lsl r5
    367c:	20061d05 	andcs	r1, r6, r5, lsl #26
    3680:	01060505 	tsteq	r6, r5, lsl #10
    3684:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3688:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    368c:	01053305 	tsteq	r5, r5, lsl #6
    3690:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3694:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3698:	01061605 	tsteq	r6, r5, lsl #12
    369c:	01001002 	tsteq	r0, r2
    36a0:	00018501 	andeq	r8, r1, r1, lsl #10
    36a4:	7f000300 	svcvc	0x00000300
    36a8:	02000001 	andeq	r0, r0, #1
    36ac:	0d0efb01 	vstreq	d15, [lr, #-4]
    36b0:	01010100 	mrseq	r0, (UNDEF: 17)
    36b4:	00000001 	andeq	r0, r0, r1
    36b8:	01000001 	tsteq	r0, r1
    36bc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    36c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    36c4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    36c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    36cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    36d0:	61652d65 	cmnvs	r5, r5, ror #26
    36d4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    36d8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    36dc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    36e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    36e4:	6f682f00 	svcvs	0x00682f00
    36e8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 353c <__exidx_end+0x7b0>
    36ec:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    36f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    36f4:	6f746b73 	svcvs	0x00746b73
    36f8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    36fc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3700:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3704:	2f534f43 	svccs	0x00534f43
    3708:	4f636950 	svcmi	0x00636950
    370c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3710:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3714:	3143432f 	cmpcc	r3, pc, lsr #6
    3718:	57585833 	smmlarpl	r8, r3, r8, r5
    371c:	2f455241 	svccs	0x00455241
    3720:	00636e69 	rsbeq	r6, r3, r9, ror #28
    3724:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3670 <__exidx_end+0x8e4>
    3728:	616d2f65 	cmnvs	sp, r5, ror #30
    372c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3730:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3734:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3738:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    373c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3740:	4349502f 	movtmi	r5, #36911	; 0x902f
    3744:	502f534f 	eorpl	r5, pc, pc, asr #6
    3748:	534f6369 	movtpl	r6, #62313	; 0xf369
    374c:	3143432f 	cmpcc	r3, pc, lsr #6
    3750:	00585833 	subseq	r5, r8, r3, lsr r8
    3754:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 36a0 <__exidx_end+0x914>
    3758:	616d2f65 	cmnvs	sp, r5, ror #30
    375c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3760:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3764:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3768:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    376c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3770:	4349502f 	movtmi	r5, #36911	; 0x902f
    3774:	502f534f 	eorpl	r5, pc, pc, asr #6
    3778:	534f6369 	movtpl	r6, #62313	; 0xf369
    377c:	6f682f00 	svcvs	0x00682f00
    3780:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 35d4 <__exidx_end+0x848>
    3784:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3788:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    378c:	6f746b73 	svcvs	0x00746b73
    3790:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3794:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3798:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    379c:	2f534f43 	svccs	0x00534f43
    37a0:	4f636950 	svcmi	0x00636950
    37a4:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    37a8:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    37ac:	74730000 	ldrbtvc	r0, [r3], #-0
    37b0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    37b4:	0100682e 	tsteq	r0, lr, lsr #16
    37b8:	77680000 	strbvc	r0, [r8, -r0]!
    37bc:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    37c0:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    37c4:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    37c8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    37cc:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    37d0:	00020068 	andeq	r0, r2, r8, rrx
    37d4:	63726100 	cmnvs	r2, #0, 2
    37d8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    37dc:	6d000003 	stcvs	0, cr0, [r0, #-12]
    37e0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    37e4:	00030068 	andeq	r0, r3, r8, rrx
    37e8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    37ec:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    37f0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    37f4:	62000003 	andvs	r0, r0, #3
    37f8:	6f747475 	svcvs	0x00747475
    37fc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3800:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3804:	00000300 	andeq	r0, r0, r0, lsl #6
    3808:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    380c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3810:	6b000004 	blvs	3828 <__exidx_end+0xa9c>
    3814:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3818:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    381c:	63000005 	movwvs	r0, #5
    3820:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    3824:	00030063 	andeq	r0, r3, r3, rrx
    3828:	02990000 	addseq	r0, r9, #0
    382c:	00030000 	andeq	r0, r3, r0
    3830:	000001c0 	andeq	r0, r0, r0, asr #3
    3834:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3838:	0101000d 	tsteq	r1, sp
    383c:	00000101 	andeq	r0, r0, r1, lsl #2
    3840:	00000100 	andeq	r0, r0, r0, lsl #2
    3844:	6f682f01 	svcvs	0x00682f01
    3848:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 369c <__exidx_end+0x910>
    384c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3850:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3854:	6f746b73 	svcvs	0x00746b73
    3858:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    385c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3860:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3864:	2f534f43 	svccs	0x00534f43
    3868:	4f636950 	svcmi	0x00636950
    386c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3870:	2f736269 	svccs	0x00736269
    3874:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    3878:	0073726f 	rsbseq	r7, r3, pc, ror #4
    387c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 37c8 <__exidx_end+0xa3c>
    3880:	616d2f65 	cmnvs	sp, r5, ror #30
    3884:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3888:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    388c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3890:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3894:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3898:	4349502f 	movtmi	r5, #36911	; 0x902f
    389c:	502f534f 	eorpl	r5, pc, pc, asr #6
    38a0:	534f6369 	movtpl	r6, #62313	; 0xf369
    38a4:	3143432f 	cmpcc	r3, pc, lsr #6
    38a8:	00585833 	subseq	r5, r8, r3, lsr r8
    38ac:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 37f8 <__exidx_end+0xa6c>
    38b0:	616d2f65 	cmnvs	sp, r5, ror #30
    38b4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    38b8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    38bc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    38c0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    38c4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    38c8:	4349502f 	movtmi	r5, #36911	; 0x902f
    38cc:	502f534f 	eorpl	r5, pc, pc, asr #6
    38d0:	534f6369 	movtpl	r6, #62313	; 0xf369
    38d4:	3143432f 	cmpcc	r3, pc, lsr #6
    38d8:	2f585833 	svccs	0x00585833
    38dc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    38e0:	41575858 	cmpmi	r7, r8, asr r8
    38e4:	642f4552 	strtvs	r4, [pc], #-1362	; 38ec <__exidx_end+0xb60>
    38e8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    38ec:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    38f0:	73752f00 	cmnvc	r5, #0, 30
    38f4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    38f8:	63672f62 	cmnvs	r7, #392	; 0x188
    38fc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3900:	6f6e2d6d 	svcvs	0x006e2d6d
    3904:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3908:	2f696261 	svccs	0x00696261
    390c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3910:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3914:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3918:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    391c:	2f656d6f 	svccs	0x00656d6f
    3920:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3924:	442f6e69 	strtmi	r6, [pc], #-3689	; 392c <__exidx_end+0xba0>
    3928:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    392c:	4f2f706f 	svcmi	0x002f706f
    3930:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3934:	502f5445 	eorpl	r5, pc, r5, asr #8
    3938:	534f4349 	movtpl	r4, #62281	; 0xf349
    393c:	6369502f 	cmnvs	r9, #47	; 0x2f
    3940:	2f00534f 	svccs	0x0000534f
    3944:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3948:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    394c:	2f6e6974 	svccs	0x006e6974
    3950:	6b736544 	blvs	1cdce68 <__ccfg+0x1cbcec0>
    3954:	2f706f74 	svccs	0x00706f74
    3958:	4f534c4f 	svcmi	0x00534c4f
    395c:	2f54454e 	svccs	0x0054454e
    3960:	4f434950 	svcmi	0x00434950
    3964:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3968:	2f534f63 	svccs	0x00534f63
    396c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3970:	00006c65 	andeq	r6, r0, r5, ror #24
    3974:	5f6e6970 	svcpl	0x006e6970
    3978:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    397c:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    3980:	00000100 	andeq	r0, r0, r0, lsl #2
    3984:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    3988:	63675f73 	cmnvs	r7, #460	; 0x1cc
    398c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3990:	67000002 	strvs	r0, [r0, -r2]
    3994:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3998:	00030068 	andeq	r0, r3, r8, rrx
    399c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    39a0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    39a4:	00040068 	andeq	r0, r4, r8, rrx
    39a8:	63726100 	cmnvs	r2, #0, 2
    39ac:	00682e68 	rsbeq	r2, r8, r8, ror #28
    39b0:	6d000002 	stcvs	0, cr0, [r0, #-8]
    39b4:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    39b8:	00020068 	andeq	r0, r2, r8, rrx
    39bc:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    39c0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    39c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    39c8:	62000002 	andvs	r0, r0, #2
    39cc:	6f747475 	svcvs	0x00747475
    39d0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    39d4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    39d8:	00000200 	andeq	r0, r0, r0, lsl #4
    39dc:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    39e0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    39e4:	6b000005 	blvs	3a00 <__exidx_end+0xc74>
    39e8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    39ec:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    39f0:	00000006 	andeq	r0, r0, r6
    39f4:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    39f8:	00000002 	andeq	r0, r0, r2
    39fc:	010e0300 	mrseq	r0, ELR_hyp
    3a00:	01011b05 	tsteq	r1, r5, lsl #22
    3a04:	06010501 	streq	r0, [r1], -r1, lsl #10
    3a08:	00010201 	andeq	r0, r1, r1, lsl #4
    3a0c:	3f050101 	svccc	0x00050101
    3a10:	00020500 	andeq	r0, r2, r0, lsl #10
    3a14:	03000000 	movweq	r0, #0
    3a18:	02050110 	andeq	r0, r5, #16, 2
    3a1c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    3a20:	03063f05 	movweq	r3, #28421	; 0x6f05
    3a24:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    3a28:	03052605 	movweq	r2, #22021	; 0x5605
    3a2c:	06052206 	streq	r2, [r5], -r6, lsl #4
    3a30:	03050106 	movweq	r0, #20742	; 0x5106
    3a34:	02044d06 	andeq	r4, r4, #384	; 0x180
    3a38:	0100c103 	tsteq	r0, r3, lsl #2
    3a3c:	40030104 	andmi	r0, r3, r4, lsl #2
    3a40:	044b3d20 	strbeq	r3, [fp], #-3360	; 0xfffff2e0
    3a44:	01330302 	teqeq	r3, r2, lsl #6
    3a48:	4e030104 	adfmis	f0, f3, f4
    3a4c:	31020520 	tstcc	r2, r0, lsr #10
    3a50:	01060705 	tsteq	r6, r5, lsl #14
    3a54:	0f050304 	svceq	0x00050304
    3a58:	2e018b03 	vmlacs.f64	d8, d1, d3
    3a5c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3a60:	207ef503 	rsbscs	pc, lr, r3, lsl #10
    3a64:	21060205 	tstcs	r6, r5, lsl #4
    3a68:	05130b05 	ldreq	r0, [r3, #-2821]	; 0xfffff4fb
    3a6c:	03041303 	movweq	r1, #17155	; 0x4303
    3a70:	83032905 	movwhi	r2, #14597	; 0x3905
    3a74:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3a78:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3a7c:	f803060b 			; <UNDEFINED> instruction: 0xf803060b
    3a80:	0304017e 	movweq	r0, #16766	; 0x417e
    3a84:	88030f05 	stmdahi	r3, {r0, r2, r8, r9, sl, fp}
    3a88:	01042001 	tsteq	r4, r1
    3a8c:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3a90:	0304207e 	movweq	r2, #16510	; 0x407e
    3a94:	88033305 	stmdahi	r3, {r0, r2, r8, r9, ip, sp}
    3a98:	42052e01 	andmi	r2, r5, #1, 28
    3a9c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3aa0:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3aa4:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    3aa8:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    3aac:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    3ab0:	2208051e 	andcs	r0, r8, #125829120	; 0x7800000
    3ab4:	1f063a05 	svcne	0x00063a05
    3ab8:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
    3abc:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    3ac0:	06022301 	streq	r2, [r2], -r1, lsl #6
    3ac4:	3c010100 	stfccs	f0, [r1], {-0}
    3ac8:	03000003 	movweq	r0, #3
    3acc:	0001a900 	andeq	sl, r1, r0, lsl #18
    3ad0:	fb010200 	blx	442da <__ccfg+0x24332>
    3ad4:	01000d0e 	tsteq	r0, lr, lsl #26
    3ad8:	00010101 	andeq	r0, r1, r1, lsl #2
    3adc:	00010000 	andeq	r0, r1, r0
    3ae0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ae4:	2f656d6f 	svccs	0x00656d6f
    3ae8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3aec:	442f6e69 	strtmi	r6, [pc], #-3689	; 3af4 <__exidx_end+0xd68>
    3af0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3af4:	4f2f706f 	svcmi	0x002f706f
    3af8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3afc:	502f5445 	eorpl	r5, pc, r5, asr #8
    3b00:	534f4349 	movtpl	r4, #62281	; 0xf349
    3b04:	6369502f 	cmnvs	r9, #47	; 0x2f
    3b08:	502f534f 	eorpl	r5, pc, pc, asr #6
    3b0c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3b10:	004f492f 	subeq	r4, pc, pc, lsr #18
    3b14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3a60 <__exidx_end+0xcd4>
    3b18:	616d2f65 	cmnvs	sp, r5, ror #30
    3b1c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3b20:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3b24:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3b28:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3b2c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3b30:	4349502f 	movtmi	r5, #36911	; 0x902f
    3b34:	502f534f 	eorpl	r5, pc, pc, asr #6
    3b38:	534f6369 	movtpl	r6, #62313	; 0xf369
    3b3c:	3143432f 	cmpcc	r3, pc, lsr #6
    3b40:	2f585833 	svccs	0x00585833
    3b44:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3b48:	41575858 	cmpmi	r7, r8, asr r8
    3b4c:	642f4552 	strtvs	r4, [pc], #-1362	; 3b54 <__exidx_end+0xdc8>
    3b50:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3b54:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3b58:	73752f00 	cmnvc	r5, #0, 30
    3b5c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3b60:	63672f62 	cmnvs	r7, #392	; 0x188
    3b64:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3b68:	6f6e2d6d 	svcvs	0x006e2d6d
    3b6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3b70:	2f696261 	svccs	0x00696261
    3b74:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3b78:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3b7c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3b80:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3b84:	2f656d6f 	svccs	0x00656d6f
    3b88:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3b8c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3b94 <__exidx_end+0xe08>
    3b90:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3b94:	4f2f706f 	svcmi	0x002f706f
    3b98:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3b9c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ba0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ba4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ba8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3bac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3bb0:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3bb4:	2f656d6f 	svccs	0x00656d6f
    3bb8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3bbc:	442f6e69 	strtmi	r6, [pc], #-3689	; 3bc4 <__exidx_end+0xe38>
    3bc0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3bc4:	4f2f706f 	svcmi	0x002f706f
    3bc8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3bcc:	502f5445 	eorpl	r5, pc, r5, asr #8
    3bd0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3bd4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3bd8:	2f00534f 	svccs	0x0000534f
    3bdc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3be0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3be4:	2f6e6974 	svccs	0x006e6974
    3be8:	6b736544 	blvs	1cdd100 <__ccfg+0x1cbd158>
    3bec:	2f706f74 	svccs	0x00706f74
    3bf0:	4f534c4f 	svcmi	0x00534c4f
    3bf4:	2f54454e 	svccs	0x0054454e
    3bf8:	4f434950 	svcmi	0x00434950
    3bfc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c00:	2f534f63 	svccs	0x00534f63
    3c04:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3c08:	00006c65 	andeq	r6, r0, r5, ror #24
    3c0c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3c10:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    3c14:	00010063 	andeq	r0, r1, r3, rrx
    3c18:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3c1c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3c20:	73000002 	movwvc	r0, #2
    3c24:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3c28:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3c2c:	61000003 	tstvs	r0, r3
    3c30:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3c34:	00040068 	andeq	r0, r4, r8, rrx
    3c38:	63616d00 	cmnvs	r1, #0, 26
    3c3c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3c40:	70000004 	andvc	r0, r0, r4
    3c44:	5f736e69 	svcpl	0x00736e69
    3c48:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3c4c:	00040068 	andeq	r0, r4, r8, rrx
    3c50:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3c54:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3c58:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3c5c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3c60:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3c64:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3c68:	00050068 	andeq	r0, r5, r8, rrx
    3c6c:	72656b00 	rsbvc	r6, r5, #0, 22
    3c70:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3c74:	00060068 	andeq	r0, r6, r8, rrx
    3c78:	01050000 	mrseq	r0, (UNDEF: 5)
    3c7c:	00020500 	andeq	r0, r2, r0, lsl #10
    3c80:	03000000 	movweq	r0, #0
    3c84:	0601011b 			; <UNDEFINED> instruction: 0x0601011b
    3c88:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3c8c:	060e056a 	streq	r0, [lr], -sl, ror #10
    3c90:	20050501 	andcs	r0, r5, r1, lsl #10
    3c94:	31060305 	tstcc	r6, r5, lsl #6
    3c98:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    3c9c:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3ca0:	01870302 	orreq	r0, r7, r2, lsl #6
    3ca4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3ca8:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3cac:	1c0f0520 	cfstr32ne	mvfx0, [pc], {32}
    3cb0:	20061405 	andcs	r1, r6, r5, lsl #8
    3cb4:	01061c05 	tsteq	r6, r5, lsl #24
    3cb8:	06200205 	strteq	r0, [r0], -r5, lsl #4
    3cbc:	4b2e1103 	blmi	b880d0 <__ccfg+0xb68128>
    3cc0:	0303053d 	movweq	r0, #13629	; 0x353d
    3cc4:	02042e71 	andeq	r2, r4, #1808	; 0x710
    3cc8:	fe032905 	vseleq.f16	s4, s6, s10
    3ccc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3cd0:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3cd4:	fd030607 	stc2	6, cr0, [r3, #-28]	; 0xffffffe4
    3cd8:	0204017e 	andeq	r0, r4, #-2147483617	; 0x8000001f
    3cdc:	83030f05 	movwhi	r0, #16133	; 0x3f05
    3ce0:	01042e01 	tsteq	r4, r1, lsl #28
    3ce4:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3ce8:	0204207e 	andeq	r2, r4, #126	; 0x7e
    3cec:	83033305 	movwhi	r3, #13061	; 0x3305
    3cf0:	01042001 	tsteq	r4, r1
    3cf4:	fd030605 	stc2	6, cr0, [r3, #-20]	; 0xffffffec
    3cf8:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    3cfc:	05053006 	streq	r3, [r5, #-6]
    3d00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3d04:	03054006 	movweq	r4, #20486	; 0x5006
    3d08:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
    3d0c:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3d10:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    3d14:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3d18:	16030602 	strne	r0, [r3], -r2, lsl #12
    3d1c:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    3d20:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3d24:	eb030629 	bl	c55d0 <__ccfg+0xa5628>
    3d28:	05055800 	streq	r5, [r5, #-2048]	; 0xfffff800
    3d2c:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    3d30:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3d34:	7f900307 	svcvc	0x00900307
    3d38:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3d3c:	00f0030f 	rscseq	r0, r0, pc, lsl #6
    3d40:	20330520 	eorscs	r0, r3, r0, lsr #10
    3d44:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3d48:	207f9003 	rsbscs	r9, pc, r3
    3d4c:	31060205 	tstcc	r6, r5, lsl #4
    3d50:	01060505 	tsteq	r6, r5, lsl #10
    3d54:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    3d58:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
    3d5c:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3d60:	06290502 	strteq	r0, [r9], -r2, lsl #10
    3d64:	3c00df03 	stccc	15, cr13, [r0], {3}
    3d68:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3d6c:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3d70:	03070501 	movweq	r0, #29953	; 0x7501
    3d74:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3d78:	030f0502 	movweq	r0, #62722	; 0xf502
    3d7c:	042e00e4 	strteq	r0, [lr], #-228	; 0xffffff1c
    3d80:	03070501 	movweq	r0, #29953	; 0x7501
    3d84:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3d88:	03330502 	teqeq	r3, #8388608	; 0x800000
    3d8c:	042000e4 	strteq	r0, [r0], #-228	; 0xffffff1c
    3d90:	03050501 	movweq	r0, #21761	; 0x5501
    3d94:	05207f9c 	streq	r7, [r0, #-3996]!	; 0xfffff064
    3d98:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3d9c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3da0:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3da4:	03053106 	movweq	r3, #20742	; 0x5106
    3da8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3dac:	01052206 	tsteq	r5, r6, lsl #4
    3db0:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    3db4:	0601052c 	streq	r0, [r1], -ip, lsr #10
    3db8:	000c024c 	andeq	r0, ip, ip, asr #4
    3dbc:	29050101 	stmdbcs	r5, {r0, r8}
    3dc0:	00020500 	andeq	r0, r2, r0, lsl #10
    3dc4:	03000000 	movweq	r0, #0
    3dc8:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    3dcc:	0f051602 	svceq	0x00051602
    3dd0:	29050106 	stmdbcs	r5, {r1, r2, r8}
    3dd4:	240f051c 	strcs	r0, [pc], #-1308	; 3ddc <__exidx_end+0x1050>
    3dd8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3ddc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3de0:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    3de4:	2e780303 	cdpcs	3, 7, cr0, cr8, cr3, {0}
    3de8:	40060205 	andmi	r0, r6, r5, lsl #4
    3dec:	01060705 	tsteq	r6, r5, lsl #14
    3df0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    3df4:	2f2f0603 	svccs	0x002f0603
    3df8:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    3dfc:	052c0305 	streq	r0, [ip, #-773]!	; 0xfffffcfb
    3e00:	06023e01 	streq	r3, [r2], -r1, lsl #28
    3e04:	31010100 	mrscc	r0, (UNDEF: 17)
    3e08:	03000009 	movweq	r0, #9
    3e0c:	0001cc00 	andeq	ip, r1, r0, lsl #24
    3e10:	fb010200 	blx	4461a <__ccfg+0x24672>
    3e14:	01000d0e 	tsteq	r0, lr, lsl #26
    3e18:	00010101 	andeq	r0, r1, r1, lsl #2
    3e1c:	00010000 	andeq	r0, r1, r0
    3e20:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3e24:	2f656d6f 	svccs	0x00656d6f
    3e28:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3e2c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3e34 <__exidx_end+0x10a8>
    3e30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3e34:	4f2f706f 	svcmi	0x002f706f
    3e38:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3e3c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3e40:	534f4349 	movtpl	r4, #62281	; 0xf349
    3e44:	6369502f 	cmnvs	r9, #47	; 0x2f
    3e48:	502f534f 	eorpl	r5, pc, pc, asr #6
    3e4c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3e50:	6f74532f 	svcvs	0x0074532f
    3e54:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3e58:	6f682f00 	svcvs	0x00682f00
    3e5c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3cb0 <__exidx_end+0xf24>
    3e60:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3e64:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3e68:	6f746b73 	svcvs	0x00746b73
    3e6c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3e70:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3e74:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3e78:	2f534f43 	svccs	0x00534f43
    3e7c:	4f636950 	svcmi	0x00636950
    3e80:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3e84:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3e88:	3143432f 	cmpcc	r3, pc, lsr #6
    3e8c:	57585833 	smmlarpl	r8, r3, r8, r5
    3e90:	2f455241 	svccs	0x00455241
    3e94:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3e98:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3e9c:	752f0062 	strvc	r0, [pc, #-98]!	; 3e42 <__exidx_end+0x10b6>
    3ea0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3cdc <__exidx_end+0xf50>
    3ea4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3ea8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3eac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3eb0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3eb4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3eb8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3ebc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3ec0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3ec4:	2f006564 	svccs	0x00006564
    3ec8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3ecc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ed0:	2f6e6974 	svccs	0x006e6974
    3ed4:	6b736544 	blvs	1cdd3ec <__ccfg+0x1cbd444>
    3ed8:	2f706f74 	svccs	0x00706f74
    3edc:	4f534c4f 	svcmi	0x00534c4f
    3ee0:	2f54454e 	svccs	0x0054454e
    3ee4:	4f434950 	svcmi	0x00434950
    3ee8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3eec:	2f534f63 	svccs	0x00534f63
    3ef0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3ef4:	2f005858 	svccs	0x00005858
    3ef8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3efc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3f00:	2f6e6974 	svccs	0x006e6974
    3f04:	6b736544 	blvs	1cdd41c <__ccfg+0x1cbd474>
    3f08:	2f706f74 	svccs	0x00706f74
    3f0c:	4f534c4f 	svcmi	0x00534c4f
    3f10:	2f54454e 	svccs	0x0054454e
    3f14:	4f434950 	svcmi	0x00434950
    3f18:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3f1c:	00534f63 	subseq	r4, r3, r3, ror #30
    3f20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3e6c <__exidx_end+0x10e0>
    3f24:	616d2f65 	cmnvs	sp, r5, ror #30
    3f28:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f2c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f30:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f34:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f38:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f3c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f40:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f44:	534f6369 	movtpl	r6, #62313	; 0xf369
    3f48:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3f4c:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3f50:	6f747300 	svcvs	0x00747300
    3f54:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3f58:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    3f5c:	30387235 	eorscc	r7, r8, r5, lsr r2
    3f60:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    3f64:	00000100 	andeq	r0, r0, r0, lsl #2
    3f68:	6f697067 	svcvs	0x00697067
    3f6c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3f70:	74730000 	ldrbtvc	r0, [r3], #-0
    3f74:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3f78:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    3f7c:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 3dc4 <__exidx_end+0x1038>
    3f80:	0100682e 	tsteq	r0, lr, lsr #16
    3f84:	74730000 	ldrbtvc	r0, [r3], #-0
    3f88:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3f8c:	0300682e 	movweq	r6, #2094	; 0x82e
    3f90:	72610000 	rsbvc	r0, r1, #0
    3f94:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3f98:	00000400 	andeq	r0, r0, r0, lsl #8
    3f9c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3fa0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3fa4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3fa8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3fac:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3fb0:	00000400 	andeq	r0, r0, r0, lsl #8
    3fb4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3fb8:	5f736e6f 	svcpl	0x00736e6f
    3fbc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3fc0:	00040068 	andeq	r0, r4, r8, rrx
    3fc4:	73797300 	cmnvc	r9, #0, 6
    3fc8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3fcc:	00000500 	andeq	r0, r0, r0, lsl #10
    3fd0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3fd4:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3fd8:	00000600 	andeq	r0, r0, r0, lsl #12
    3fdc:	00190500 	andseq	r0, r9, r0, lsl #10
    3fe0:	15500205 	ldrbne	r0, [r0, #-517]	; 0xfffffdfb
    3fe4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    3fe8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    3fec:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    3ff0:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    3ff4:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    3ff8:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    3ffc:	20028a03 	andcs	r8, r2, r3, lsl #20
    4000:	19050104 	stmdbne	r5, {r2, r8}
    4004:	2e7df103 	expcse	f7, f3
    4008:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    400c:	2002c503 	andcs	ip, r2, r3, lsl #10
    4010:	d0030f05 	andle	r0, r3, r5, lsl #30
    4014:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    4018:	2000fa03 	andcs	pc, r0, r3, lsl #20
    401c:	03050104 	movweq	r0, #20740	; 0x5104
    4020:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    4024:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4028:	8f03060f 	svchi	0x0003060f
    402c:	01040101 	tsteq	r4, r1, lsl #2
    4030:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    4034:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    4038:	1f050521 	svcne	0x00050521
    403c:	21060305 	tstcs	r6, r5, lsl #6
    4040:	29050204 	stmdbcs	r5, {r2, r9}
    4044:	01018903 	tsteq	r1, r3, lsl #18
    4048:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    404c:	03040501 	movweq	r0, #17665	; 0x4501
    4050:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    4054:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4058:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    405c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4060:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4064:	01041705 	tsteq	r4, r5, lsl #14
    4068:	03060205 	movweq	r0, #25093	; 0x6205
    406c:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    4070:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4074:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4078:	06030501 	streq	r0, [r3], -r1, lsl #10
    407c:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    4080:	29050204 	stmdbcs	r5, {r2, r9}
    4084:	0102b603 	tsteq	r2, r3, lsl #12
    4088:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    408c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    4090:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4094:	207dc003 	rsbscs	ip, sp, r3
    4098:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    409c:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    40a0:	20090301 	andcs	r0, r9, r1, lsl #6
    40a4:	01000702 	tsteq	r0, r2, lsl #14
    40a8:	001f0501 	andseq	r0, pc, r1, lsl #10
    40ac:	15840205 	strne	r0, [r4, #517]	; 0x205
    40b0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    40b4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    40b8:	010e0514 	tsteq	lr, r4, lsl r5
    40bc:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    40c0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    40c4:	01ff032d 	mvnseq	r0, sp, lsr #6
    40c8:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    40cc:	86030603 	strhi	r0, [r3], -r3, lsl #12
    40d0:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    40d4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    40d8:	02042f06 	andeq	r2, r4, #6, 30
    40dc:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    40e0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    40e4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    40e8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    40ec:	89030604 	stmdbhi	r3, {r2, r9, sl}
    40f0:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    40f4:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    40f8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    40fc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4100:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4104:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    4108:	0204207d 	andeq	r2, r4, #125	; 0x7d
    410c:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    4110:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4114:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4118:	017e8c03 	cmneq	lr, r3, lsl #24
    411c:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4120:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4124:	01fb032d 	mvnseq	r0, sp, lsr #6
    4128:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    412c:	8b030603 	blhi	c5940 <__ccfg+0xa5998>
    4130:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4134:	a6032905 	strge	r2, [r3], -r5, lsl #18
    4138:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    413c:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4140:	017dd603 	cmneq	sp, r3, lsl #12
    4144:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4148:	2002aa03 	andcs	sl, r2, r3, lsl #20
    414c:	03050104 	movweq	r0, #20740	; 0x5104
    4150:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4154:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    4158:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    415c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4160:	03010501 	movweq	r0, #5377	; 0x1501
    4164:	05022009 	streq	r2, [r2, #-9]
    4168:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    416c:	0205001e 	andeq	r0, r5, #30
    4170:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
    4174:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4178:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    417c:	cf032905 	svcgt	0x00032905
    4180:	3d050103 	stfccs	f0, [r5, #-12]
    4184:	17050514 	smladne	r5, r4, r5, r0
    4188:	01063805 	tsteq	r6, r5, lsl #16
    418c:	1e050104 	adfnes	f0, f5, f4
    4190:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4194:	38050204 	stmdacc	r5, {r2, r9}
    4198:	2003d803 	andcs	sp, r3, r3, lsl #16
    419c:	02050104 	andeq	r0, r5, #4, 2
    41a0:	7cab0306 	stcvc	3, cr0, [fp], #24
    41a4:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    41a8:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    41ac:	3d050103 	stfccs	f0, [r5, #-12]
    41b0:	17050514 	smladne	r5, r4, r5, r0
    41b4:	01063805 	tsteq	r6, r5, lsl #16
    41b8:	01050104 	tsteq	r5, r4, lsl #2
    41bc:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    41c0:	01000402 	tsteq	r0, r2, lsl #8
    41c4:	00270501 	eoreq	r0, r7, r1, lsl #10
    41c8:	15cc0205 	strbne	r0, [ip, #517]	; 0x205
    41cc:	d7030000 	strle	r0, [r3, -r0]
    41d0:	02050100 	andeq	r0, r5, #0, 2
    41d4:	06270516 			; <UNDEFINED> instruction: 0x06270516
    41d8:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    41dc:	ba033805 	blt	d21f8 <__ccfg+0xb2250>
    41e0:	01042e03 	tsteq	r4, r3, lsl #28
    41e4:	ca030905 	bgt	c6600 <__ccfg+0xa6658>
    41e8:	0204207c 	andeq	r2, r4, #124	; 0x7c
    41ec:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    41f0:	01042e03 	tsteq	r4, r3, lsl #28
    41f4:	03060805 	movweq	r0, #26629	; 0x6805
    41f8:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    41fc:	3c730302 	ldclcc	3, cr0, [r3], #-8
    4200:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4204:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    4208:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    420c:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4210:	06020501 	streq	r0, [r2], -r1, lsl #10
    4214:	017cc003 	cmneq	ip, r3
    4218:	38050204 	stmdacc	r5, {r2, r9}
    421c:	2003c003 	andcs	ip, r3, r3
    4220:	02050104 	andeq	r0, r5, #4, 2
    4224:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4228:	06052f20 	streq	r2, [r5], -r0, lsr #30
    422c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4230:	02042f06 	andeq	r2, r4, #6, 30
    4234:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    4238:	3d050103 	stfccs	f0, [r5, #-12]
    423c:	17050514 	smladne	r5, r4, r5, r0
    4240:	01063805 	tsteq	r6, r5, lsl #16
    4244:	02050104 	andeq	r0, r5, #4, 2
    4248:	7cc30306 	stclvc	3, cr0, [r3], {6}
    424c:	060f052e 	streq	r0, [pc], -lr, lsr #10
    4250:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4254:	03060305 	movweq	r0, #25349	; 0x6305
    4258:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    425c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4260:	4b4c4b06 	blmi	1316e80 <__ccfg+0x12f6ed8>
    4264:	01000702 	tsteq	r0, r2, lsl #14
    4268:	00160501 	andseq	r0, r6, r1, lsl #10
    426c:	16200205 	strtne	r0, [r0], -r5, lsl #4
    4270:	81030000 	mrshi	r0, (UNDEF: 3)
    4274:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4278:	06160516 			; <UNDEFINED> instruction: 0x06160516
    427c:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4280:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4284:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4288:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    428c:	01050106 	tsteq	r5, r6, lsl #2
    4290:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4294:	0302051b 	movweq	r0, #9499	; 0x251b
    4298:	01010166 	tsteq	r1, r6, ror #2
    429c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    42a0:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    42a4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42a8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    42ac:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    42b0:	03020501 	movweq	r0, #9473	; 0x2501
    42b4:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    42b8:	03380502 	teqeq	r8, #8388608	; 0x800000
    42bc:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    42c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    42c4:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    42c8:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    42cc:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    42d0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42d4:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    42dc:	017ce303 	cmneq	ip, r3, lsl #6
    42e0:	38050204 	stmdacc	r5, {r2, r9}
    42e4:	20039d03 	andcs	r9, r3, r3, lsl #26
    42e8:	02050104 	andeq	r0, r5, #4, 2
    42ec:	7ce30306 	stclvc	3, cr0, [r3], #24
    42f0:	03030520 	movweq	r0, #13600	; 0x3520
    42f4:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    42f8:	09020106 	stmdbeq	r2, {r1, r2, r8}
    42fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4300:	02050017 	andeq	r0, r5, #23
    4304:	00001660 	andeq	r1, r0, r0, ror #12
    4308:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    430c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4310:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    4314:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    4318:	06030520 	streq	r0, [r3], -r0, lsr #10
    431c:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    4320:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    4324:	3c130303 	ldccc	3, cr0, [r3], {3}
    4328:	01060905 	tsteq	r6, r5, lsl #18
    432c:	2f060305 	svccs	0x00060305
    4330:	01050101 	tsteq	r5, r1, lsl #2
    4334:	03021406 	movweq	r1, #9222	; 0x2406
    4338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    433c:	02050011 	andeq	r0, r5, #17
    4340:	00001684 	andeq	r1, r0, r4, lsl #13
    4344:	01019203 	tsteq	r1, r3, lsl #4
    4348:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    434c:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    4350:	2f062402 	svccs	0x00062402
    4354:	01060805 	tsteq	r6, r5, lsl #16
    4358:	0e030105 	adfeqs	f0, f3, f5
    435c:	0308052e 	movweq	r0, #34094	; 0x852e
    4360:	02052072 	andeq	r2, r5, #114	; 0x72
    4364:	200d0306 	andcs	r0, sp, r6, lsl #6
    4368:	13060105 	movwne	r0, #24837	; 0x6105
    436c:	01000302 	tsteq	r0, r2, lsl #6
    4370:	00120501 	andseq	r0, r2, r1, lsl #10
    4374:	16980205 	ldrne	r0, [r8], r5, lsl #4
    4378:	a7030000 	strge	r0, [r3, -r0]
    437c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4380:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4384:	20050501 	andcs	r0, r5, r1, lsl #10
    4388:	2f060305 	svccs	0x00060305
    438c:	01060905 	tsteq	r6, r5, lsl #18
    4390:	2f060305 	svccs	0x00060305
    4394:	30060105 	andcc	r0, r6, r5, lsl #2
    4398:	01000302 	tsteq	r0, r2, lsl #6
    439c:	002b0501 	eoreq	r0, fp, r1, lsl #10
    43a0:	00000205 	andeq	r0, r0, r5, lsl #4
    43a4:	af030000 	svcge	0x00030000
    43a8:	20060101 	andcs	r0, r6, r1, lsl #2
    43ac:	30060205 	andcc	r0, r6, r5, lsl #4
    43b0:	01060505 	tsteq	r6, r5, lsl #10
    43b4:	31060205 	tstcc	r6, r5, lsl #4
    43b8:	01060505 	tsteq	r6, r5, lsl #10
    43bc:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    43c0:	02052012 	andeq	r2, r5, #18
    43c4:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    43c8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    43cc:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    43d0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    43d4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    43d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    43dc:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    43e0:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    43e4:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    43e8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    43ec:	aa030602 	bge	c5bfc <__ccfg+0xa5c54>
    43f0:	4b2f207d 	blmi	bcc5ec <__ccfg+0xbac644>
    43f4:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    43f8:	31020520 	tstcc	r2, r0, lsr #10
    43fc:	29050204 	stmdbcs	r5, {r2, r9}
    4400:	0102c703 	tsteq	r2, r3, lsl #14
    4404:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4408:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    440c:	01040106 	tsteq	r4, r6, lsl #2
    4410:	03060205 	movweq	r0, #25093	; 0x6205
    4414:	302e7db4 	strhtcc	r7, [lr], -r4
    4418:	13060105 	movwne	r0, #24837	; 0x6105
    441c:	03060305 	movweq	r0, #25349	; 0x6305
    4420:	0a052e79 	beq	14fe0c <__ccfg+0x12fe64>
    4424:	08050106 	stmdaeq	r5, {r1, r2, r8}
    4428:	030a052e 	movweq	r0, #42286	; 0xa52e
    442c:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    4430:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4434:	02050031 	andeq	r0, r5, #49	; 0x31
    4438:	00000000 	andeq	r0, r0, r0
    443c:	0101ca03 	tsteq	r1, r3, lsl #20
    4440:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4444:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4448:	3105220c 	tstcc	r5, ip, lsl #4
    444c:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    4450:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4454:	03053005 	movweq	r3, #20485	; 0x5005
    4458:	06053206 	streq	r3, [r5], -r6, lsl #4
    445c:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4460:	20060520 	andcs	r0, r6, r0, lsr #10
    4464:	30060305 	andcc	r0, r6, r5, lsl #6
    4468:	01060605 	tsteq	r6, r5, lsl #12
    446c:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4470:	30320603 	eorscc	r0, r2, r3, lsl #12
    4474:	0a030405 	beq	c5490 <__ccfg+0xa54e8>
    4478:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    447c:	20090501 	andcs	r0, r9, r1, lsl #10
    4480:	05201005 	streq	r1, [r0, #-5]!
    4484:	04052009 	streq	r2, [r5], #-9
    4488:	11052206 	tstne	r5, r6, lsl #4
    448c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4490:	201f0520 	andscs	r0, pc, r0, lsr #10
    4494:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4498:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    449c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    44a0:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    44a4:	0b053106 	bleq	1508c4 <__ccfg+0x13091c>
    44a8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    44ac:	052f2f06 	streq	r2, [pc, #-3846]!	; 35ae <__exidx_end+0x822>
    44b0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    44b4:	20310301 	eorscs	r0, r1, r1, lsl #6
    44b8:	03060405 	movweq	r0, #25605	; 0x6405
    44bc:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    44c0:	07050106 	streq	r0, [r5, -r6, lsl #2]
    44c4:	20250520 	eorcs	r0, r5, r0, lsr #10
    44c8:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    44cc:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    44d0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    44d4:	0b052804 	bleq	14e4ec <__ccfg+0x12e544>
    44d8:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    44dc:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    44e0:	03063805 	movweq	r3, #26629	; 0x6805
    44e4:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    44e8:	03040501 	movweq	r0, #17665	; 0x4501
    44ec:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    44f0:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    44f4:	0204207e 	andeq	r2, r4, #126	; 0x7e
    44f8:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    44fc:	3d050103 	stfccs	f0, [r5, #-12]
    4500:	17050514 	smladne	r5, r4, r5, r0
    4504:	01063805 	tsteq	r6, r5, lsl #16
    4508:	02050104 	andeq	r0, r5, #4, 2
    450c:	7cb20306 	ldcvc	3, cr0, [r2], #24
    4510:	4b4b2f20 	blmi	12d0198 <__ccfg+0x12b01f0>
    4514:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    4518:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    451c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4520:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4524:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4528:	06020501 	streq	r0, [r2], -r1, lsl #10
    452c:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    4530:	03060b05 	movweq	r0, #27397	; 0x6b05
    4534:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    4538:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    453c:	01061305 	tsteq	r6, r5, lsl #6
    4540:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4544:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4548:	06050520 	streq	r0, [r5], -r0, lsr #10
    454c:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4550:	06050501 	streq	r0, [r5], -r1, lsl #10
    4554:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4558:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    455c:	03060405 	movweq	r0, #25605	; 0x6405
    4560:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4564:	03010609 	movweq	r0, #5641	; 0x1609
    4568:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    456c:	6b032106 	blvs	cc98c <__ccfg+0xac9e4>
    4570:	0b035920 	bleq	da9f8 <__ccfg+0xbaa50>
    4574:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4578:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    457c:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4580:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4584:	ba030603 	blt	c5d98 <__ccfg+0xa5df0>
    4588:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    458c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4590:	0100083b 	tsteq	r0, fp, lsr r8
    4594:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4598:	00000205 	andeq	r0, r0, r5, lsl #4
    459c:	a0030000 	andge	r0, r3, r0
    45a0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    45a4:	3b051414 	blcc	1495fc <__ccfg+0x129654>
    45a8:	0c050e06 	stceq	14, cr0, [r5], {6}
    45ac:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    45b0:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    45b4:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    45b8:	06030532 			; <UNDEFINED> instruction: 0x06030532
    45bc:	06060532 			; <UNDEFINED> instruction: 0x06060532
    45c0:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    45c4:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    45c8:	053f0603 	ldreq	r0, [pc, #-1539]!	; 3fcd <__exidx_end+0x1241>
    45cc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    45d0:	052f0603 	streq	r0, [pc, #-1539]!	; 3fd5 <__exidx_end+0x1249>
    45d4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    45d8:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    45dc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    45e0:	2f300603 	svccs	0x00300603
    45e4:	01060905 	tsteq	r6, r5, lsl #18
    45e8:	30060305 	andcc	r0, r6, r5, lsl #6
    45ec:	01060c05 	tsteq	r6, r5, lsl #24
    45f0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    45f4:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    45f8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    45fc:	2f210604 	svccs	0x00210604
    4600:	03060105 	movweq	r0, #24837	; 0x6105
    4604:	03050122 	movweq	r0, #20770	; 0x5122
    4608:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    460c:	01061105 	tsteq	r6, r5, lsl #2
    4610:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4614:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    4618:	304a0624 	subcc	r0, sl, r4, lsr #12
    461c:	29050204 	stmdbcs	r5, {r2, r9}
    4620:	0101c803 	tsteq	r1, r3, lsl #16
    4624:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4628:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    462c:	01040106 	tsteq	r4, r6, lsl #2
    4630:	b3030305 	movwlt	r0, #13061	; 0x3305
    4634:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    4638:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    463c:	01042001 	tsteq	r4, r1
    4640:	03060305 	movweq	r0, #25349	; 0x6305
    4644:	2f2e7eb3 	svccs	0x002e7eb3
    4648:	01061905 	tsteq	r6, r5, lsl #18
    464c:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    4650:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4654:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4658:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    465c:	2308052e 	movwcs	r0, #34094	; 0x852e
    4660:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4664:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4668:	03290502 			; <UNDEFINED> instruction: 0x03290502
    466c:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    4670:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4674:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4678:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    467c:	c1030602 	tstgt	r3, r2, lsl #12
    4680:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4684:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4688:	054b4006 	strbeq	r4, [fp, #-6]
    468c:	20730304 	rsbscs	r0, r3, r4, lsl #6
    4690:	01061305 	tsteq	r6, r5, lsl #6
    4694:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4698:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    469c:	06040501 	streq	r0, [r4], -r1, lsl #10
    46a0:	06080559 			; <UNDEFINED> instruction: 0x06080559
    46a4:	030b0501 	movweq	r0, #46337	; 0xb501
    46a8:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    46ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    46b0:	02050012 	andeq	r0, r5, #18
    46b4:	00000000 	andeq	r0, r0, r0
    46b8:	0102da03 	tsteq	r2, r3, lsl #20
    46bc:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    46c0:	01010001 	tsteq	r1, r1
    46c4:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    46c8:	00000002 	andeq	r0, r0, r2
    46cc:	02df0300 	sbcseq	r0, pc, #0, 6
    46d0:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    46d4:	13060105 	movwne	r0, #24837	; 0x6105
    46d8:	01000202 	tsteq	r0, r2, lsl #4
    46dc:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    46e0:	02050029 	andeq	r0, r5, #41	; 0x29
    46e4:	00000000 	andeq	r0, r0, r0
    46e8:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    46ec:	01060505 	tsteq	r6, r5, lsl #10
    46f0:	21060305 	tstcs	r6, r5, lsl #6
    46f4:	01060705 	tsteq	r6, r5, lsl #14
    46f8:	30060205 	andcc	r0, r6, r5, lsl #4
    46fc:	01060505 	tsteq	r6, r5, lsl #10
    4700:	21060305 	tstcs	r6, r5, lsl #6
    4704:	01060805 	tsteq	r6, r5, lsl #16
    4708:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    470c:	13060105 	movwne	r0, #24837	; 0x6105
    4710:	01000302 	tsteq	r0, r2, lsl #6
    4714:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4718:	02050017 	andeq	r0, r5, #23
    471c:	00000000 	andeq	r0, r0, r0
    4720:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    4724:	17051402 	strne	r1, [r5, -r2, lsl #8]
    4728:	02051006 	andeq	r1, r5, #6
    472c:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    4730:	13060105 	movwne	r0, #24837	; 0x6105
    4734:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    4738:	01010002 	tsteq	r1, r2
    473c:	000001c1 	andeq	r0, r0, r1, asr #3
    4740:	01210003 			; <UNDEFINED> instruction: 0x01210003
    4744:	01020000 	mrseq	r0, (UNDEF: 2)
    4748:	000d0efb 	strdeq	r0, [sp], -fp
    474c:	01010101 	tsteq	r1, r1, lsl #2
    4750:	01000000 	mrseq	r0, (UNDEF: 0)
    4754:	2f010000 	svccs	0x00010000
    4758:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    475c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4760:	2f6e6974 	svccs	0x006e6974
    4764:	6b736544 	blvs	1cddc7c <__ccfg+0x1cbdcd4>
    4768:	2f706f74 	svccs	0x00706f74
    476c:	4f534c4f 	svcmi	0x00534c4f
    4770:	2f54454e 	svccs	0x0054454e
    4774:	4f434950 	svcmi	0x00434950
    4778:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    477c:	2f534f63 	svccs	0x00534f63
    4780:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4784:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4788:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    478c:	73752f00 	cmnvc	r5, #0, 30
    4790:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4794:	63672f62 	cmnvs	r7, #392	; 0x188
    4798:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    479c:	6f6e2d6d 	svcvs	0x006e2d6d
    47a0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    47a4:	2f696261 	svccs	0x00696261
    47a8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    47ac:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    47b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    47b4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    47b8:	2f656d6f 	svccs	0x00656d6f
    47bc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    47c0:	442f6e69 	strtmi	r6, [pc], #-3689	; 47c8 <__exidx_end+0x1a3c>
    47c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    47c8:	4f2f706f 	svcmi	0x002f706f
    47cc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    47d0:	502f5445 	eorpl	r5, pc, r5, asr #8
    47d4:	534f4349 	movtpl	r4, #62281	; 0xf349
    47d8:	6369502f 	cmnvs	r9, #47	; 0x2f
    47dc:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    47e0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    47e4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    47e8:	2f656d6f 	svccs	0x00656d6f
    47ec:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    47f0:	442f6e69 	strtmi	r6, [pc], #-3689	; 47f8 <__exidx_end+0x1a6c>
    47f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    47f8:	4f2f706f 	svcmi	0x002f706f
    47fc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4800:	502f5445 	eorpl	r5, pc, r5, asr #8
    4804:	534f4349 	movtpl	r4, #62281	; 0xf349
    4808:	6369502f 	cmnvs	r9, #47	; 0x2f
    480c:	0000534f 	andeq	r5, r0, pc, asr #6
    4810:	5f726573 	svcpl	0x00726573
    4814:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    4818:	00000100 	andeq	r0, r0, r0, lsl #2
    481c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4820:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4824:	00000200 	andeq	r0, r0, r0, lsl #4
    4828:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    482c:	0300682e 	movweq	r6, #2094	; 0x82e
    4830:	616d0000 	cmnvs	sp, r0
    4834:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4838:	00000300 	andeq	r0, r0, r0, lsl #6
    483c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4840:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4844:	0300682e 	movweq	r6, #2094	; 0x82e
    4848:	75620000 	strbvc	r0, [r2, #-0]!
    484c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4850:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4854:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4858:	73000003 	movwvc	r0, #3
    485c:	6f697379 	svcvs	0x00697379
    4860:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4864:	05000000 	streq	r0, [r0, #-0]
    4868:	0205002a 	andeq	r0, r5, #42	; 0x2a
    486c:	000016ac 	andeq	r1, r0, ip, lsr #13
    4870:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    4874:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    4878:	7a03062a 	bvc	c6128 <__ccfg+0xa6180>
    487c:	05052001 	streq	r2, [r5, #-1]
    4880:	06020534 			; <UNDEFINED> instruction: 0x06020534
    4884:	06100532 			; <UNDEFINED> instruction: 0x06100532
    4888:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    488c:	21060305 	tstcs	r6, r5, lsl #6
    4890:	01060f05 	tsteq	r6, r5, lsl #30
    4894:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4898:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    489c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    48a0:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    48a4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    48a8:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    48ac:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    48b0:	054f0205 	strbeq	r0, [pc, #-517]	; 46b3 <__exidx_end+0x1927>
    48b4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    48b8:	052f0603 	streq	r0, [pc, #-1539]!	; 42bd <__exidx_end+0x1531>
    48bc:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    48c0:	02052008 	andeq	r2, r5, #8
    48c4:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    48c8:	03050106 	movweq	r0, #20742	; 0x5106
    48cc:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    48d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    48d4:	3d593e06 	ldclcc	14, cr3, [r9, #-24]	; 0xffffffe8
    48d8:	01060c05 	tsteq	r6, r5, lsl #24
    48dc:	2f060205 	svccs	0x00060205
    48e0:	01060505 	tsteq	r6, r5, lsl #10
    48e4:	2f060305 	svccs	0x00060305
    48e8:	01060e05 	tsteq	r6, r5, lsl #28
    48ec:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
    48f0:	75030603 	strvc	r0, [r3, #-1539]	; 0xfffff9fd
    48f4:	060a052e 	streq	r0, [sl], -lr, lsr #10
    48f8:	4a6e0301 	bmi	1b85504 <__ccfg+0x1b6555c>
    48fc:	01000702 	tsteq	r0, r2, lsl #14
    4900:	00019e01 	andeq	r9, r1, r1, lsl #28
    4904:	3d000300 	stccc	3, cr0, [r0, #-0]
    4908:	02000001 	andeq	r0, r0, #1
    490c:	0d0efb01 	vstreq	d15, [lr, #-4]
    4910:	01010100 	mrseq	r0, (UNDEF: 17)
    4914:	00000001 	andeq	r0, r0, r1
    4918:	01000001 	tsteq	r0, r1
    491c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4868 <__exidx_end+0x1adc>
    4920:	616d2f65 	cmnvs	sp, r5, ror #30
    4924:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4928:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    492c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4930:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4934:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4938:	4349502f 	movtmi	r5, #36911	; 0x902f
    493c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4940:	534f6369 	movtpl	r6, #62313	; 0xf369
    4944:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4948:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    494c:	61697265 	cmnvs	r9, r5, ror #4
    4950:	752f006c 	strvc	r0, [pc, #-108]!	; 48ec <__exidx_end+0x1b60>
    4954:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4790 <__exidx_end+0x1a04>
    4958:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    495c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4960:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4964:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4968:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    496c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4970:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4974:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4978:	2f006564 	svccs	0x00006564
    497c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4980:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4984:	2f6e6974 	svccs	0x006e6974
    4988:	6b736544 	blvs	1cddea0 <__ccfg+0x1cbdef8>
    498c:	2f706f74 	svccs	0x00706f74
    4990:	4f534c4f 	svcmi	0x00534c4f
    4994:	2f54454e 	svccs	0x0054454e
    4998:	4f434950 	svcmi	0x00434950
    499c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    49a0:	2f534f63 	svccs	0x00534f63
    49a4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    49a8:	2f005858 	svccs	0x00005858
    49ac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    49b0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    49b4:	2f6e6974 	svccs	0x006e6974
    49b8:	6b736544 	blvs	1cdded0 <__ccfg+0x1cbdf28>
    49bc:	2f706f74 	svccs	0x00706f74
    49c0:	4f534c4f 	svcmi	0x00534c4f
    49c4:	2f54454e 	svccs	0x0054454e
    49c8:	4f434950 	svcmi	0x00434950
    49cc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    49d0:	00534f63 	subseq	r4, r3, r3, ror #30
    49d4:	72657300 	rsbvc	r7, r5, #0, 6
    49d8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    49dc:	00632e66 	rsbeq	r2, r3, r6, ror #28
    49e0:	73000001 	movwvc	r0, #1
    49e4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    49e8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    49ec:	73000002 	movwvc	r0, #2
    49f0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    49f4:	00682e67 	rsbeq	r2, r8, r7, ror #28
    49f8:	61000002 	tstvs	r0, r2
    49fc:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4a00:	00030068 	andeq	r0, r3, r8, rrx
    4a04:	63616d00 	cmnvs	r1, #0, 26
    4a08:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4a0c:	70000003 	andvc	r0, r0, r3
    4a10:	5f736e69 	svcpl	0x00736e69
    4a14:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4a18:	00030068 	andeq	r0, r3, r8, rrx
    4a1c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4a20:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4a24:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4a28:	0300682e 	movweq	r6, #2094	; 0x82e
    4a2c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4a30:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4a34:	00040068 	andeq	r0, r4, r8, rrx
    4a38:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4a3c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4a40:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4a44:	00000000 	andeq	r0, r0, r0
    4a48:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    4a4c:	00172402 	andseq	r2, r7, r2, lsl #8
    4a50:	010b0300 	mrseq	r0, (UNDEF: 59)
    4a54:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4a58:	2c051413 	cfstrscs	mvf1, [r5], {19}
    4a5c:	017a0306 	cmneq	sl, r6, lsl #6
    4a60:	260e052e 	strcs	r0, [lr], -lr, lsr #10
    4a64:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    4a68:	3d300603 	ldccc	6, cr0, [r0, #-12]!
    4a6c:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    4a70:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
    4a74:	22060d05 	andcs	r0, r6, #320	; 0x140
    4a78:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    4a7c:	060d0522 	streq	r0, [sp], -r2, lsr #10
    4a80:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4a84:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4a88:	054e0205 	strbeq	r0, [lr, #-517]	; 0xfffffdfb
    4a8c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4a90:	03054a05 	movweq	r4, #23045	; 0x5a05
    4a94:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4a98:	01052402 	tsteq	r5, r2, lsl #8
    4a9c:	09021306 	stmdbeq	r2, {r1, r2, r8, r9, ip}
    4aa0:	af010100 	svcge	0x00010100
    4aa4:	03000001 	movweq	r0, #1
    4aa8:	00013c00 	andeq	r3, r1, r0, lsl #24
    4aac:	fb010200 	blx	452b6 <__ccfg+0x2530e>
    4ab0:	01000d0e 	tsteq	r0, lr, lsl #26
    4ab4:	00010101 	andeq	r0, r1, r1, lsl #2
    4ab8:	00010000 	andeq	r0, r1, r0
    4abc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4ac0:	2f656d6f 	svccs	0x00656d6f
    4ac4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4ac8:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ad0 <__exidx_end+0x1d44>
    4acc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ad0:	4f2f706f 	svcmi	0x002f706f
    4ad4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4ad8:	502f5445 	eorpl	r5, pc, r5, asr #8
    4adc:	534f4349 	movtpl	r4, #62281	; 0xf349
    4ae0:	6369502f 	cmnvs	r9, #47	; 0x2f
    4ae4:	502f534f 	eorpl	r5, pc, pc, asr #6
    4ae8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4aec:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4af0:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4af4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4af8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4afc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4b00:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4b04:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4b08:	61652d65 	cmnvs	r5, r5, ror #26
    4b0c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4b10:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4b14:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4b18:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4b1c:	6f682f00 	svcvs	0x00682f00
    4b20:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4974 <__exidx_end+0x1be8>
    4b24:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4b28:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4b2c:	6f746b73 	svcvs	0x00746b73
    4b30:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4b34:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4b38:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4b3c:	2f534f43 	svccs	0x00534f43
    4b40:	4f636950 	svcmi	0x00636950
    4b44:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4b48:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4b4c:	6f682f00 	svcvs	0x00682f00
    4b50:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 49a4 <__exidx_end+0x1c18>
    4b54:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4b58:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4b5c:	6f746b73 	svcvs	0x00746b73
    4b60:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4b64:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4b68:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4b6c:	2f534f43 	svccs	0x00534f43
    4b70:	4f636950 	svcmi	0x00636950
    4b74:	73000053 	movwvc	r0, #83	; 0x53
    4b78:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4b7c:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    4b80:	00000100 	andeq	r0, r0, r0, lsl #2
    4b84:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4b88:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4b8c:	00000200 	andeq	r0, r0, r0, lsl #4
    4b90:	61647473 	smcvs	18243	; 0x4743
    4b94:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4b98:	00000200 	andeq	r0, r0, r0, lsl #4
    4b9c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4ba0:	0300682e 	movweq	r6, #2094	; 0x82e
    4ba4:	616d0000 	cmnvs	sp, r0
    4ba8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4bac:	00000300 	andeq	r0, r0, r0, lsl #6
    4bb0:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4bb4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4bb8:	0300682e 	movweq	r6, #2094	; 0x82e
    4bbc:	75620000 	strbvc	r0, [r2, #-0]!
    4bc0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4bc4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bc8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4bcc:	73000003 	movwvc	r0, #3
    4bd0:	6f697379 	svcvs	0x00697379
    4bd4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4bd8:	623c0000 	eorsvs	r0, ip, #0
    4bdc:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4be0:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4be4:	00000000 	andeq	r0, r0, r0
    4be8:	002d0500 	eoreq	r0, sp, r0, lsl #10
    4bec:	17780205 	ldrbne	r0, [r8, -r5, lsl #4]!
    4bf0:	0d030000 	stceq	0, cr0, [r3, #-0]
    4bf4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    4bf8:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    4bfc:	01780306 	cmneq	r8, r6, lsl #6
    4c00:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    4c04:	23060205 	movwcs	r0, #25093	; 0x6205
    4c08:	01061005 	tsteq	r6, r5
    4c0c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4c10:	052f0603 	streq	r0, [pc, #-1539]!	; 4615 <__exidx_end+0x1889>
    4c14:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4c18:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4c1c:	0b052106 	bleq	14d03c <__ccfg+0x12d094>
    4c20:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4c24:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4c28:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4c2c:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4c30:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    4c34:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    4c38:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4c3c:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    4c40:	01060c05 	tsteq	r6, r5, lsl #24
    4c44:	30060205 	andcc	r0, r6, r5, lsl #4
    4c48:	13060105 	movwne	r0, #24837	; 0x6105
    4c4c:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    4c50:	00060266 	andeq	r0, r6, r6, ror #4
    4c54:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    4c58:	00030000 	andeq	r0, r3, r0
    4c5c:	00000126 	andeq	r0, r0, r6, lsr #2
    4c60:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4c64:	0101000d 	tsteq	r1, sp
    4c68:	00000101 	andeq	r0, r0, r1, lsl #2
    4c6c:	00000100 	andeq	r0, r0, r0, lsl #2
    4c70:	6f682f01 	svcvs	0x00682f01
    4c74:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4ac8 <__exidx_end+0x1d3c>
    4c78:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4c7c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4c80:	6f746b73 	svcvs	0x00746b73
    4c84:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4c88:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4c8c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4c90:	2f534f43 	svccs	0x00534f43
    4c94:	4f636950 	svcmi	0x00636950
    4c98:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4c9c:	2f736269 	svccs	0x00736269
    4ca0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4ca4:	2f006c61 	svccs	0x00006c61
    4ca8:	2f727375 	svccs	0x00727375
    4cac:	2f62696c 	svccs	0x0062696c
    4cb0:	2f636367 	svccs	0x00636367
    4cb4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4cb8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4cbc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4cc0:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4cc4:	2f312e32 	svccs	0x00312e32
    4cc8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4ccc:	00656475 	rsbeq	r6, r5, r5, ror r4
    4cd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c1c <__exidx_end+0x1e90>
    4cd4:	616d2f65 	cmnvs	sp, r5, ror #30
    4cd8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4cdc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4ce0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4ce4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4ce8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4cec:	4349502f 	movtmi	r5, #36911	; 0x902f
    4cf0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4cf4:	534f6369 	movtpl	r6, #62313	; 0xf369
    4cf8:	3143432f 	cmpcc	r3, pc, lsr #6
    4cfc:	00585833 	subseq	r5, r8, r3, lsr r8
    4d00:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c4c <__exidx_end+0x1ec0>
    4d04:	616d2f65 	cmnvs	sp, r5, ror #30
    4d08:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d0c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4d10:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4d14:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4d18:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4d1c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4d20:	502f534f 	eorpl	r5, pc, pc, asr #6
    4d24:	534f6369 	movtpl	r6, #62313	; 0xf369
    4d28:	5f5f0000 	svcpl	0x005f0000
    4d2c:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    4d30:	61697265 	cmnvs	r9, r5, ror #4
    4d34:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4d38:	73000001 	movwvc	r0, #1
    4d3c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4d40:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4d44:	61000002 	tstvs	r0, r2
    4d48:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4d4c:	00030068 	andeq	r0, r3, r8, rrx
    4d50:	63616d00 	cmnvs	r1, #0, 26
    4d54:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4d58:	70000003 	andvc	r0, r0, r3
    4d5c:	5f736e69 	svcpl	0x00736e69
    4d60:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4d64:	00030068 	andeq	r0, r3, r8, rrx
    4d68:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4d6c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4d70:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4d74:	0300682e 	movweq	r6, #2094	; 0x82e
    4d78:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4d7c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4d80:	00040068 	andeq	r0, r4, r8, rrx
    4d84:	01050000 	mrseq	r0, (UNDEF: 5)
    4d88:	d8020500 	stmdale	r2, {r8, sl}
    4d8c:	03000017 	movweq	r0, #23
    4d90:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    4d94:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    4d98:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    4d9c:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    4da0:	01151313 	tsteq	r5, r3, lsl r3
    4da4:	06051301 	streq	r1, [r5], -r1, lsl #6
    4da8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4dac:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    4db0:	03050106 	movweq	r0, #20742	; 0x5106
    4db4:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4db8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4dbc:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    4dc0:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    4dc4:	01060a05 	tsteq	r6, r5, lsl #20
    4dc8:	83060205 	movwhi	r0, #25093	; 0x6205
    4dcc:	01060605 	tsteq	r6, r5, lsl #12
    4dd0:	1f211f21 	svcne	0x00211f21
    4dd4:	21060205 	tstcs	r6, r5, lsl #4
    4dd8:	01060605 	tsteq	r6, r5, lsl #12
    4ddc:	21060205 	tstcs	r6, r5, lsl #4
    4de0:	01060505 	tsteq	r6, r5, lsl #10
    4de4:	30060305 	andcc	r0, r6, r5, lsl #6
    4de8:	4a74033d 	bmi	1d05ae4 <__ccfg+0x1ce5b3c>
    4dec:	01060d05 	tsteq	r6, r5, lsl #26
    4df0:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    4df4:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    4df8:	4b010100 	blmi	45200 <__ccfg+0x25258>
    4dfc:	03000002 	movweq	r0, #2
    4e00:	00012500 	andeq	r2, r1, r0, lsl #10
    4e04:	fb010200 	blx	4560e <__ccfg+0x25666>
    4e08:	01000d0e 	tsteq	r0, lr, lsl #26
    4e0c:	00010101 	andeq	r0, r1, r1, lsl #2
    4e10:	00010000 	andeq	r0, r1, r0
    4e14:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4e18:	2f656d6f 	svccs	0x00656d6f
    4e1c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4e20:	442f6e69 	strtmi	r6, [pc], #-3689	; 4e28 <__exidx_end+0x209c>
    4e24:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4e28:	4f2f706f 	svcmi	0x002f706f
    4e2c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4e30:	502f5445 	eorpl	r5, pc, r5, asr #8
    4e34:	534f4349 	movtpl	r4, #62281	; 0xf349
    4e38:	6369502f 	cmnvs	r9, #47	; 0x2f
    4e3c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4e40:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4e44:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4e48:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4e4c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4e50:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4e54:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4e58:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4e5c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4e60:	61652d65 	cmnvs	r5, r5, ror #26
    4e64:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4e68:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4e6c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4e70:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4e74:	6f682f00 	svcvs	0x00682f00
    4e78:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4ccc <__exidx_end+0x1f40>
    4e7c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4e80:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4e84:	6f746b73 	svcvs	0x00746b73
    4e88:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4e8c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4e90:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4e94:	2f534f43 	svccs	0x00534f43
    4e98:	4f636950 	svcmi	0x00636950
    4e9c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4ea0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4ea4:	6f682f00 	svcvs	0x00682f00
    4ea8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4cfc <__exidx_end+0x1f70>
    4eac:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4eb0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4eb4:	6f746b73 	svcvs	0x00746b73
    4eb8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4ebc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4ec0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4ec4:	2f534f43 	svccs	0x00534f43
    4ec8:	4f636950 	svcmi	0x00636950
    4ecc:	5f000053 	svcpl	0x00000053
    4ed0:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    4ed4:	61697265 	cmnvs	r9, r5, ror #4
    4ed8:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4edc:	73000001 	movwvc	r0, #1
    4ee0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4ee4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4ee8:	61000002 	tstvs	r0, r2
    4eec:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4ef0:	00030068 	andeq	r0, r3, r8, rrx
    4ef4:	63616d00 	cmnvs	r1, #0, 26
    4ef8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4efc:	70000003 	andvc	r0, r0, r3
    4f00:	5f736e69 	svcpl	0x00736e69
    4f04:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4f08:	00030068 	andeq	r0, r3, r8, rrx
    4f0c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4f10:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4f14:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4f18:	0300682e 	movweq	r6, #2094	; 0x82e
    4f1c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4f20:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4f24:	00040068 	andeq	r0, r4, r8, rrx
    4f28:	01050000 	mrseq	r0, (UNDEF: 5)
    4f2c:	48020500 	stmdami	r2, {r8, sl}
    4f30:	03000018 	movweq	r0, #24
    4f34:	06010122 	streq	r0, [r1], -r2, lsr #2
    4f38:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    4f3c:	13136b02 	tstne	r3, #2048	; 0x800
    4f40:	06100516 			; <UNDEFINED> instruction: 0x06100516
    4f44:	20050501 	andcs	r0, r5, r1, lsl #10
    4f48:	30060305 	andcc	r0, r6, r5, lsl #6
    4f4c:	053f0205 	ldreq	r0, [pc, #-517]!	; 4d4f <__exidx_end+0x1fc3>
    4f50:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    4f54:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    4f58:	200b0520 	andcs	r0, fp, r0, lsr #10
    4f5c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4f60:	2f240603 	svccs	0x00240603
    4f64:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    4f68:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    4f6c:	2f061f02 	svccs	0x00061f02
    4f70:	01060605 	tsteq	r6, r5, lsl #12
    4f74:	30060205 	andcc	r0, r6, r5, lsl #4
    4f78:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    4f7c:	01060505 	tsteq	r6, r5, lsl #10
    4f80:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4f84:	01060605 	tsteq	r6, r5, lsl #12
    4f88:	2f060405 	svccs	0x00060405
    4f8c:	01060705 	tsteq	r6, r5, lsl #14
    4f90:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    4f94:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    4f98:	03052106 	movweq	r2, #20742	; 0x5106
    4f9c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    4fa0:	20060501 	andcs	r0, r6, r1, lsl #10
    4fa4:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    4fa8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    4fac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4fb0:	13052e05 	movwne	r2, #24069	; 0x5e05
    4fb4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4fb8:	0608052f 	streq	r0, [r8], -pc, lsr #10
    4fbc:	06030501 	streq	r0, [r3], -r1, lsl #10
    4fc0:	060d052f 	streq	r0, [sp], -pc, lsr #10
    4fc4:	06030501 	streq	r0, [r3], -r1, lsl #10
    4fc8:	3102052f 	tstcc	r2, pc, lsr #10
    4fcc:	01060605 	tsteq	r6, r5, lsl #12
    4fd0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    4fd4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4fd8:	21010606 	tstcs	r1, r6, lsl #12
    4fdc:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    4fe0:	0606052f 	streq	r0, [r6], -pc, lsr #10
    4fe4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4fe8:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    4fec:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4ff0:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    4ff4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4ff8:	07053c11 	smladeq	r5, r1, ip, r3
    4ffc:	06020521 	streq	r0, [r2], -r1, lsr #10
    5000:	0605054b 	streq	r0, [r5], -fp, asr #10
    5004:	06020501 	streq	r0, [r2], -r1, lsl #10
    5008:	060a0524 	streq	r0, [sl], -r4, lsr #10
    500c:	9f060501 	svcls	0x00060501
    5010:	051f0a05 	ldreq	r0, [pc, #-2565]	; 4613 <__exidx_end+0x1887>
    5014:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    5018:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    501c:	052f0602 	streq	r0, [pc, #-1538]!	; 4a22 <__exidx_end+0x1c96>
    5020:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5024:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5028:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    502c:	052f0603 	streq	r0, [pc, #-1539]!	; 4a31 <__exidx_end+0x1ca5>
    5030:	06053002 	streq	r3, [r5], -r2
    5034:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5038:	01053d06 	tsteq	r5, r6, lsl #26
    503c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    5040:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    5044:	000d0230 	andeq	r0, sp, r0, lsr r2
    5048:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    504c:	00030000 	andeq	r0, r3, r0
    5050:	0000013a 	andeq	r0, r0, sl, lsr r1
    5054:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5058:	0101000d 	tsteq	r1, sp
    505c:	00000101 	andeq	r0, r0, r1, lsl #2
    5060:	00000100 	andeq	r0, r0, r0, lsl #2
    5064:	6f682f01 	svcvs	0x00682f01
    5068:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4ebc <__exidx_end+0x2130>
    506c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5070:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5074:	6f746b73 	svcvs	0x00746b73
    5078:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    507c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5080:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5084:	2f534f43 	svccs	0x00534f43
    5088:	4f636950 	svcmi	0x00636950
    508c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5090:	2f736269 	svccs	0x00736269
    5094:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5098:	2f006c61 	svccs	0x00006c61
    509c:	2f727375 	svccs	0x00727375
    50a0:	2f62696c 	svccs	0x0062696c
    50a4:	2f636367 	svccs	0x00636367
    50a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    50ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    50b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    50b4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    50b8:	2f312e32 	svccs	0x00312e32
    50bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    50c0:	00656475 	rsbeq	r6, r5, r5, ror r4
    50c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5010 <__exidx_end+0x2284>
    50c8:	616d2f65 	cmnvs	sp, r5, ror #30
    50cc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    50d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    50d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    50d8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    50dc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    50e0:	4349502f 	movtmi	r5, #36911	; 0x902f
    50e4:	502f534f 	eorpl	r5, pc, pc, asr #6
    50e8:	534f6369 	movtpl	r6, #62313	; 0xf369
    50ec:	3143432f 	cmpcc	r3, pc, lsr #6
    50f0:	00585833 	subseq	r5, r8, r3, lsr r8
    50f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5040 <__exidx_end+0x22b4>
    50f8:	616d2f65 	cmnvs	sp, r5, ror #30
    50fc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5100:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5104:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5108:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    510c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5110:	4349502f 	movtmi	r5, #36911	; 0x902f
    5114:	502f534f 	eorpl	r5, pc, pc, asr #6
    5118:	534f6369 	movtpl	r6, #62313	; 0xf369
    511c:	66760000 	ldrbtvs	r0, [r6], -r0
    5120:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    5124:	00010063 	andeq	r0, r1, r3, rrx
    5128:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    512c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5130:	00020068 	andeq	r0, r2, r8, rrx
    5134:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5138:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    513c:	00020068 	andeq	r0, r2, r8, rrx
    5140:	63726100 	cmnvs	r2, #0, 2
    5144:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5148:	6d000003 	stcvs	0, cr0, [r0, #-12]
    514c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5150:	00030068 	andeq	r0, r3, r8, rrx
    5154:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5158:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    515c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5160:	62000003 	andvs	r0, r0, #3
    5164:	6f747475 	svcvs	0x00747475
    5168:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    516c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5170:	00000300 	andeq	r0, r0, r0, lsl #6
    5174:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5178:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    517c:	3c000004 	stccc	0, cr0, [r0], {4}
    5180:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5184:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5188:	0000003e 	andeq	r0, r0, lr, lsr r0
    518c:	15050000 	strne	r0, [r5, #-0]
    5190:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    5194:	03000019 	movweq	r0, #25
    5198:	0305010c 	movweq	r0, #20748	; 0x510c
    519c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    51a0:	580b0501 	stmdapl	fp, {r0, r8, sl}
    51a4:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    51a8:	01060e05 	tsteq	r6, r5, lsl #28
    51ac:	30060305 	andcc	r0, r6, r5, lsl #6
    51b0:	01060405 	tsteq	r6, r5, lsl #8
    51b4:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    51b8:	01010001 	tsteq	r1, r1
    51bc:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    51c0:	00198402 	andseq	r8, r9, r2, lsl #8
    51c4:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    51c8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    51cc:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    51d0:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    51d4:	03070520 	movweq	r0, #29984	; 0x7520
    51d8:	06052071 			; <UNDEFINED> instruction: 0x06052071
    51dc:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    51e0:	133e0602 	teqne	lr, #2097152	; 0x200000
    51e4:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    51e8:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    51ec:	06040501 	streq	r0, [r4], -r1, lsl #10
    51f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    51f4:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    51f8:	01060505 	tsteq	r6, r5, lsl #10
    51fc:	30060305 	andcc	r0, r6, r5, lsl #6
    5200:	01060605 	tsteq	r6, r5, lsl #12
    5204:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5208:	01060b05 	tsteq	r6, r5, lsl #22
    520c:	052e1005 	streq	r1, [lr, #-5]!
    5210:	07052105 	streq	r2, [r5, -r5, lsl #2]
    5214:	0605052d 	streq	r0, [r5], -sp, lsr #10
    5218:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    521c:	0100da03 	tsteq	r0, r3, lsl #20
    5220:	06070559 			; <UNDEFINED> instruction: 0x06070559
    5224:	06040501 	streq	r0, [r4], -r1, lsl #10
    5228:	4a7fa703 	bmi	1feee3c <__ccfg+0x1fcee94>
    522c:	03060505 	movweq	r0, #25861	; 0x6505
    5230:	062000c2 	strteq	r0, [r0], -r2, asr #1
    5234:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    5238:	06030510 			; <UNDEFINED> instruction: 0x06030510
    523c:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    5240:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5244:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    5248:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    524c:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    5250:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    5254:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    5258:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    525c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5260:	3c090306 	stccc	3, cr0, [r9], {6}
    5264:	01060c05 	tsteq	r6, r5, lsl #24
    5268:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    526c:	7fa90304 	svcvc	0x00a90304
    5270:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    5274:	010f0568 	tsteq	pc, r8, ror #10
    5278:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    527c:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    5280:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    5284:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    5288:	06051406 	streq	r1, [r5], -r6, lsl #8
    528c:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    5290:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    5294:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    5298:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    529c:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    52a0:	16053906 	strne	r3, [r5], -r6, lsl #18
    52a4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    52a8:	06052e06 	streq	r2, [r5], -r6, lsl #28
    52ac:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    52b0:	20090306 	andcs	r0, r9, r6, lsl #6
    52b4:	06120513 			; <UNDEFINED> instruction: 0x06120513
    52b8:	2f080501 	svccs	0x00080501
    52bc:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    52c0:	052f0605 	streq	r0, [pc, #-1541]!	; 4cc3 <__exidx_end+0x1f37>
    52c4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    52c8:	06052012 			; <UNDEFINED> instruction: 0x06052012
    52cc:	05593006 	ldrbeq	r3, [r9, #-6]
    52d0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    52d4:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    52d8:	6f03060c 	svcvs	0x0003060c
    52dc:	03050501 	movweq	r0, #21761	; 0x5501
    52e0:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    52e4:	3c062e01 	stccc	14, cr2, [r6], {1}
    52e8:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    52ec:	4a202082 	bmi	80d4fc <__ccfg+0x7ed554>
    52f0:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    52f4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    52f8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    52fc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5300:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    5304:	05133006 	ldreq	r3, [r3, #-6]
    5308:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    530c:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    5310:	0606052d 	streq	r0, [r6], -sp, lsr #10
    5314:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    5318:	13050106 	movwne	r0, #20742	; 0x5106
    531c:	06070520 	streq	r0, [r7], -r0, lsr #10
    5320:	0b05593f 	bleq	15b824 <__ccfg+0x13b87c>
    5324:	06050106 	streq	r0, [r5], -r6, lsl #2
    5328:	05053006 	streq	r3, [r5, #-6]
    532c:	016f0306 	cmneq	pc, r6, lsl #6
    5330:	11030605 	tstne	r3, r5, lsl #12
    5334:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    5338:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    533c:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    5340:	20582e01 	subscs	r2, r8, r1, lsl #28
    5344:	210c052e 	tstcs	ip, lr, lsr #10
    5348:	01060f05 	tsteq	r6, r5, lsl #30
    534c:	2f060605 	svccs	0x00060605
    5350:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    5354:	0a051406 	beq	14a374 <__ccfg+0x12a3cc>
    5358:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    535c:	21060605 	tstcs	r6, r5, lsl #12
    5360:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    5364:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    5368:	07052e15 	smladeq	r5, r5, lr, r2
    536c:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    5370:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5374:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    5378:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    537c:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    5380:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    5384:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    5388:	134f0505 	movtne	r0, #62725	; 0xf505
    538c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    5390:	2f050511 	svccs	0x00050511
    5394:	13134f06 	tstne	r3, #6, 30
    5398:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    539c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    53a0:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    53a4:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    53a8:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    53ac:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    53b0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    53b4:	02050035 	andeq	r0, r5, #53	; 0x35
    53b8:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    53bc:	01019003 	tsteq	r1, r3
    53c0:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    53c4:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    53c8:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    53cc:	30060305 	andcc	r0, r6, r5, lsl #6
    53d0:	06010567 	streq	r0, [r1], -r7, ror #10
    53d4:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    53d8:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    53dc:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    53e0:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    53e4:	3f060205 	svccc	0x00060205
    53e8:	01061505 	tsteq	r6, r5, lsl #10
    53ec:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    53f0:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    53f4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    53f8:	0b055805 	bleq	15b414 <__ccfg+0x13b46c>
    53fc:	20050520 	andcs	r0, r5, r0, lsr #10
    5400:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    5404:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    5408:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    540c:	03000002 	movweq	r0, #2
    5410:	00013a00 	andeq	r3, r1, r0, lsl #20
    5414:	fb010200 	blx	45c1e <__ccfg+0x25c76>
    5418:	01000d0e 	tsteq	r0, lr, lsl #26
    541c:	00010101 	andeq	r0, r1, r1, lsl #2
    5420:	00010000 	andeq	r0, r1, r0
    5424:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5428:	2f656d6f 	svccs	0x00656d6f
    542c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5430:	442f6e69 	strtmi	r6, [pc], #-3689	; 5438 <__exidx_end+0x26ac>
    5434:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5438:	4f2f706f 	svcmi	0x002f706f
    543c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5440:	502f5445 	eorpl	r5, pc, r5, asr #8
    5444:	534f4349 	movtpl	r4, #62281	; 0xf349
    5448:	6369502f 	cmnvs	r9, #47	; 0x2f
    544c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5450:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5454:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    5458:	006c6169 	rsbeq	r6, ip, r9, ror #2
    545c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5460:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5464:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5468:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    546c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5470:	61652d65 	cmnvs	r5, r5, ror #26
    5474:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5478:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    547c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5480:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5484:	6f682f00 	svcvs	0x00682f00
    5488:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 52dc <__exidx_end+0x2550>
    548c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5490:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5494:	6f746b73 	svcvs	0x00746b73
    5498:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    549c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    54a0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    54a4:	2f534f43 	svccs	0x00534f43
    54a8:	4f636950 	svcmi	0x00636950
    54ac:	43432f53 	movtmi	r2, #16211	; 0x3f53
    54b0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    54b4:	6f682f00 	svcvs	0x00682f00
    54b8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 530c <__exidx_end+0x2580>
    54bc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    54c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    54c4:	6f746b73 	svcvs	0x00746b73
    54c8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    54cc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    54d0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    54d4:	2f534f43 	svccs	0x00534f43
    54d8:	4f636950 	svcmi	0x00636950
    54dc:	76000053 			; <UNDEFINED> instruction: 0x76000053
    54e0:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    54e4:	0100632e 	tsteq	r0, lr, lsr #6
    54e8:	74730000 	ldrbtvc	r0, [r3], #-0
    54ec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    54f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    54f4:	74730000 	ldrbtvc	r0, [r3], #-0
    54f8:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    54fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5500:	72610000 	rsbvc	r0, r1, #0
    5504:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5508:	00000300 	andeq	r0, r0, r0, lsl #6
    550c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5510:	0300682e 	movweq	r6, #2094	; 0x82e
    5514:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    5518:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    551c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5520:	00000300 	andeq	r0, r0, r0, lsl #6
    5524:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    5528:	5f736e6f 	svcpl	0x00736e6f
    552c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5530:	00030068 	andeq	r0, r3, r8, rrx
    5534:	73797300 	cmnvc	r9, #0, 6
    5538:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    553c:	00000400 	andeq	r0, r0, r0, lsl #8
    5540:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5544:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    5548:	00003e6e 	andeq	r3, r0, lr, ror #28
    554c:	05000000 	streq	r0, [r0, #-0]
    5550:	0205003a 	andeq	r0, r5, #58	; 0x3a
    5554:	00001c04 	andeq	r1, r0, r4, lsl #24
    5558:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    555c:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    5560:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5564:	2044033a 	subcs	r0, r4, sl, lsr r3
    5568:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    556c:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    5570:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    5574:	200e0316 	andcs	r0, lr, r6, lsl r3
    5578:	11030b05 	tstne	r3, r5, lsl #22
    557c:	0608052e 	streq	r0, [r8], -lr, lsr #10
    5580:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    5584:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5588:	03052e08 	movweq	r2, #24072	; 0x5e08
    558c:	06052106 	streq	r2, [r5], -r6, lsl #2
    5590:	03050106 	movweq	r0, #20742	; 0x5106
    5594:	0b053006 	bleq	1515b4 <__ccfg+0x13160c>
    5598:	0f050106 	svceq	0x00050106
    559c:	20030520 	andcs	r0, r3, r0, lsr #10
    55a0:	2e030105 	adfcss	f0, f3, f5
    55a4:	030305ac 	movweq	r0, #13740	; 0x35ac
    55a8:	0b053c52 	bleq	1546f8 <__ccfg+0x134750>
    55ac:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    55b0:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    55b4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    55b8:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    55bc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    55c0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    55c4:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    55c8:	06051e08 	streq	r1, [r5], -r8, lsl #28
    55cc:	0604052d 	streq	r0, [r4], -sp, lsr #10
    55d0:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    55d4:	0b050106 	bleq	1459f4 <__ccfg+0x125a4c>
    55d8:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    55dc:	0c050106 	stfeqs	f0, [r5], {6}
    55e0:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    55e4:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    55e8:	0a054e0b 	beq	158e1c <__ccfg+0x138e74>
    55ec:	0b053c06 	bleq	15460c <__ccfg+0x134664>
    55f0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    55f4:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    55f8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    55fc:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    5600:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5604:	11052f06 	tstne	r5, r6, lsl #30
    5608:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    560c:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    5610:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    5614:	013c6606 	teqeq	ip, r6, lsl #12
    5618:	06010620 	streq	r0, [r1], -r0, lsr #12
    561c:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    5620:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    5624:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    5628:	01062e01 	tsteq	r6, r1, lsl #28
    562c:	90822e06 	addls	r2, r2, r6, lsl #28
    5630:	90064a21 	andls	r4, r6, r1, lsr #20
    5634:	013c5806 	teqeq	ip, r6, lsl #16
    5638:	2e06012e 	adfcssp	f0, f6, #0.5
    563c:	82063c06 	andhi	r3, r6, #1536	; 0x600
    5640:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    5644:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    5648:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    564c:	20100501 	andscs	r0, r0, r1, lsl #10
    5650:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    5654:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    5658:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    565c:	013c3c06 	teqeq	ip, r6, lsl #24
    5660:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5664:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    5668:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    566c:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    5670:	3c062e06 	stccc	14, cr2, [r6], {6}
    5674:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    5678:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    567c:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    5680:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    5684:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    5688:	2e060106 	adfcss	f0, f6, f6
    568c:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    5690:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    5694:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5698:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    569c:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    56a0:	06051306 	streq	r1, [r5], -r6, lsl #6
    56a4:	0604052d 	streq	r0, [r4], -sp, lsr #10
    56a8:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    56ac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56b0:	0b052106 	bleq	14dad0 <__ccfg+0x12db28>
    56b4:	07052406 	streq	r2, [r5, -r6, lsl #8]
    56b8:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    56bc:	01060e05 	tsteq	r6, r5, lsl #28
    56c0:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    56c4:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    56c8:	0a031105 	beq	c9ae4 <__ccfg+0xa9b3c>
    56cc:	5116054a 	tstpl	r6, sl, asr #10
    56d0:	01000502 	tsteq	r0, r2, lsl #10
    56d4:	00016701 	andeq	r6, r1, r1, lsl #14
    56d8:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    56dc:	02000001 	andeq	r0, r0, #1
    56e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    56e4:	01010100 	mrseq	r0, (UNDEF: 17)
    56e8:	00000001 	andeq	r0, r0, r1
    56ec:	01000001 	tsteq	r0, r1
    56f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    56f4:	2f2e2e2f 	svccs	0x002e2e2f
    56f8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5700 <__exidx_end+0x2974>
    56fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5700:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5704:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5708:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    570c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5710:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5714:	31303030 	teqcc	r0, r0, lsr r0
    5718:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    571c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5720:	61746562 	cmnvs	r4, r2, ror #10
    5724:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5728:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    572c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5564 <__exidx_end+0x27d8>
    5730:	6f635c73 	svcvs	0x00635c73
    5734:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5738:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    573c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5740:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5744:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5748:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    574c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5750:	3130322d 	teqcc	r0, sp, lsr #4
    5754:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5758:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    575c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5760:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5764:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5768:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    576c:	616d5c65 	cmnvs	sp, r5, ror #24
    5770:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5774:	3a630065 	bcc	18c5910 <__ccfg+0x18a5968>
    5778:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    577c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5780:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5784:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5788:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    578c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5790:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5794:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5798:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    579c:	6f6f745c 	svcvs	0x006f745c
    57a0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    57a4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    57a8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    57ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    57b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    57b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    57bc:	5f342d69 	svcpl	0x00342d69
    57c0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    57c4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    57c8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    57cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    57d0:	61652d65 	cmnvs	r5, r5, ror #26
    57d4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    57d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    57dc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    57e0:	00007379 	andeq	r7, r0, r9, ror r3
    57e4:	5f6e6f61 	svcpl	0x006e6f61
    57e8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    57ec:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    57f0:	00000100 	andeq	r0, r0, r0, lsl #2
    57f4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    57f8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    57fc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5800:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5804:	00000200 	andeq	r0, r0, r0, lsl #4
    5808:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    580c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5810:	00030068 	andeq	r0, r3, r8, rrx
    5814:	6e6f6100 	powvse	f6, f7, f0
    5818:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    581c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    5820:	00010068 	andeq	r0, r1, r8, rrx
    5824:	05000000 	streq	r0, [r0, #-0]
    5828:	001f9402 	andseq	r9, pc, r2, lsl #8
    582c:	013c0300 	teqeq	ip, r0, lsl #6
    5830:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    5834:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    5838:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    583c:	01010009 	tsteq	r1, r9
    5840:	000001a9 	andeq	r0, r0, r9, lsr #3
    5844:	01410002 	cmpeq	r1, r2
    5848:	01020000 	mrseq	r0, (UNDEF: 2)
    584c:	000d0efb 	strdeq	r0, [sp], -fp
    5850:	01010101 	tsteq	r1, r1, lsl #2
    5854:	01000000 	mrseq	r0, (UNDEF: 0)
    5858:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    585c:	2f2e2e2f 	svccs	0x002e2e2f
    5860:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5864:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    5868:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    586c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5870:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5874:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5878:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    587c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5880:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5884:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5888:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    588c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5890:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5894:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5898:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    589c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5734 <__exidx_end+0x29a8>
    58a0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    58a4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    58a8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    58ac:	6f6e2d6d 	svcvs	0x006e2d6d
    58b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    58b4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    58b8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    58bc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    58c0:	615c3371 	cmpvs	ip, r1, ror r3
    58c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    58c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    58cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    58d0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    58d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    58d8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    58dc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    58e0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    58e4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    58e8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    58ec:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    58f0:	31303030 	teqcc	r0, r0, lsr r0
    58f4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    58f8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    58fc:	61746562 	cmnvs	r4, r2, ror #10
    5900:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5904:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5908:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5740 <__exidx_end+0x29b4>
    590c:	6f635c73 	svcvs	0x00635c73
    5910:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5914:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5918:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    591c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5920:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5924:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5928:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    592c:	3130322d 	teqcc	r0, sp, lsr #4
    5930:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5934:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5938:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    593c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5940:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5944:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5948:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    594c:	61000073 	tstvs	r0, r3, ror r0
    5950:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    5954:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    5958:	00000100 	andeq	r0, r0, r0, lsl #2
    595c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5960:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5964:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5968:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    596c:	00000200 	andeq	r0, r0, r0, lsl #4
    5970:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5974:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5978:	00030068 	andeq	r0, r3, r8, rrx
    597c:	6e6f6100 	powvse	f6, f7, f0
    5980:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    5984:	0100682e 	tsteq	r0, lr, lsr #16
    5988:	00000000 	andeq	r0, r0, r0
    598c:	00000205 	andeq	r0, r0, r5, lsl #4
    5990:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    5994:	04020001 	streq	r0, [r2], #-1
    5998:	010a0301 	tsteq	sl, r1, lsl #6
    599c:	01040200 	mrseq	r0, R12_usr
    59a0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    59a4:	02001f01 	andeq	r1, r0, #1, 30
    59a8:	00210104 	eoreq	r0, r1, r4, lsl #2
    59ac:	21010402 	tstcs	r1, r2, lsl #8
    59b0:	01040200 	mrseq	r0, R12_usr
    59b4:	02213021 	eoreq	r3, r1, #33	; 0x21
    59b8:	01010008 	tsteq	r1, r8
    59bc:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    59c0:	0300001f 	movweq	r0, #31
    59c4:	000100d7 	ldrdeq	r0, [r1], -r7
    59c8:	03010402 	movweq	r0, #5122	; 0x1402
    59cc:	0200010c 	andeq	r0, r0, #12, 2
    59d0:	00210104 	eoreq	r0, r1, r4, lsl #2
    59d4:	1f010402 	svcne	0x00010402
    59d8:	01040200 	mrseq	r0, R12_usr
    59dc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    59e0:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    59e4:	31210104 			; <UNDEFINED> instruction: 0x31210104
    59e8:	01000502 	tsteq	r0, r2, lsl #10
    59ec:	00019c01 	andeq	r9, r1, r1, lsl #24
    59f0:	39000200 	stmdbcc	r0, {r9}
    59f4:	02000001 	andeq	r0, r0, #1
    59f8:	0d0efb01 	vstreq	d15, [lr, #-4]
    59fc:	01010100 	mrseq	r0, (UNDEF: 17)
    5a00:	00000001 	andeq	r0, r0, r1
    5a04:	01000001 	tsteq	r0, r1
    5a08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a0c:	2f2e2e2f 	svccs	0x002e2e2f
    5a10:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5a18 <__exidx_end+0x2c8c>
    5a14:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5a18:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5a1c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5a20:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5a24:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5a28:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5a2c:	31303030 	teqcc	r0, r0, lsr r0
    5a30:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5a34:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5a38:	61746562 	cmnvs	r4, r2, ror #10
    5a3c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5a40:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5a44:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 587c <__exidx_end+0x2af0>
    5a48:	6f635c73 	svcvs	0x00635c73
    5a4c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5a50:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5a54:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5a58:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5a5c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5a60:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5a64:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5a68:	3130322d 	teqcc	r0, sp, lsr #4
    5a6c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5a70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5a74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5a78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5a7c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5a80:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5a84:	616d5c65 	cmnvs	sp, r5, ror #24
    5a88:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5a8c:	3a630065 	bcc	18c5c28 <__ccfg+0x18a5c80>
    5a90:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5a94:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5a98:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5a9c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5aa0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5aa4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5aa8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5aac:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5ab0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5ab4:	6f6f745c 	svcvs	0x006f745c
    5ab8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5abc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5ac0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5ac4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5ac8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5acc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ad0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5ad4:	5f342d69 	svcpl	0x00342d69
    5ad8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5adc:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5ae0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ae4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ae8:	61652d65 	cmnvs	r5, r5, ror #26
    5aec:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5af0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5af4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5af8:	00007379 	andeq	r7, r0, r9, ror r3
    5afc:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    5b00:	00010063 	andeq	r0, r1, r3, rrx
    5b04:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5b08:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5b0c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5b10:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5b14:	00020068 	andeq	r0, r2, r8, rrx
    5b18:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5b1c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5b20:	0300682e 	movweq	r6, #2094	; 0x82e
    5b24:	70630000 	rsbvc	r0, r3, r0
    5b28:	00682e75 	rsbeq	r2, r8, r5, ror lr
    5b2c:	00000001 	andeq	r0, r0, r1
    5b30:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    5b34:	0300001f 	movweq	r0, #31
    5b38:	030100f5 	movweq	r0, #4341	; 0x10f5
    5b3c:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    5b40:	00010100 	andeq	r0, r1, r0, lsl #2
    5b44:	00000205 	andeq	r0, r0, r5, lsl #4
    5b48:	c0030000 	andgt	r0, r3, r0
    5b4c:	11030101 	tstne	r3, r1, lsl #2
    5b50:	00030201 	andeq	r0, r3, r1, lsl #4
    5b54:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5b58:	001fe402 	andseq	lr, pc, r2, lsl #8
    5b5c:	028d0300 	addeq	r0, sp, #0, 6
    5b60:	01120301 	tsteq	r2, r1, lsl #6
    5b64:	01000402 	tsteq	r0, r2, lsl #8
    5b68:	02050001 	andeq	r0, r5, #1
    5b6c:	00000000 	andeq	r0, r0, r0
    5b70:	0102d803 	tsteq	r2, r3, lsl #16
    5b74:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    5b78:	01010003 	tsteq	r1, r3
    5b7c:	00020500 	andeq	r0, r2, r0, lsl #10
    5b80:	03000000 	movweq	r0, #0
    5b84:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    5b88:	01000402 	tsteq	r0, r2, lsl #8
    5b8c:	0001e901 	andeq	lr, r1, r1, lsl #18
    5b90:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    5b94:	02000001 	andeq	r0, r0, #1
    5b98:	0d0efb01 	vstreq	d15, [lr, #-4]
    5b9c:	01010100 	mrseq	r0, (UNDEF: 17)
    5ba0:	00000001 	andeq	r0, r0, r1
    5ba4:	01000001 	tsteq	r0, r1
    5ba8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5bac:	2f2e2e2f 	svccs	0x002e2e2f
    5bb0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5bb8 <__exidx_end+0x2e2c>
    5bb4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5bb8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5bbc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5bc0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5bc4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5bc8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5bcc:	31303030 	teqcc	r0, r0, lsr r0
    5bd0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5bd4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5bd8:	61746562 	cmnvs	r4, r2, ror #10
    5bdc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5be0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5be4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5a1c <__exidx_end+0x2c90>
    5be8:	6f635c73 	svcvs	0x00635c73
    5bec:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5bf0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5bf4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5bf8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5bfc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5c00:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5c04:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5c08:	3130322d 	teqcc	r0, sp, lsr #4
    5c0c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5c10:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5c14:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5c18:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5c1c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5c20:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5c24:	616d5c65 	cmnvs	sp, r5, ror #24
    5c28:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5c2c:	3a630065 	bcc	18c5dc8 <__ccfg+0x18a5e20>
    5c30:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5c34:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5c38:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5c3c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5c40:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5c44:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5c48:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5c4c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5c50:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5c54:	6f6f745c 	svcvs	0x006f745c
    5c58:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5c5c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5c60:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5c64:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5c68:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5c6c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5c70:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5c74:	5f342d69 	svcpl	0x00342d69
    5c78:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5c7c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5c80:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5c84:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5c88:	61652d65 	cmnvs	r5, r5, ror #26
    5c8c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5c90:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5c94:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5c98:	00007379 	andeq	r7, r0, r9, ror r3
    5c9c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5ca0:	00632e70 	rsbeq	r2, r3, r0, ror lr
    5ca4:	61000001 	tstvs	r0, r1
    5ca8:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    5cac:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    5cb0:	00000100 	andeq	r0, r0, r0, lsl #2
    5cb4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5cb8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5cbc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5cc0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5cc4:	00000200 	andeq	r0, r0, r0, lsl #4
    5cc8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5ccc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5cd0:	00030068 	andeq	r0, r3, r8, rrx
    5cd4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5cd8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5cdc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5ce0:	00000100 	andeq	r0, r0, r0, lsl #2
    5ce4:	70696863 	rsbvc	r6, r9, r3, ror #16
    5ce8:	6f666e69 	svcvs	0x00666e69
    5cec:	0100682e 	tsteq	r0, lr, lsr #16
    5cf0:	65730000 	ldrbvs	r0, [r3, #-0]!
    5cf4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    5cf8:	00010068 	andeq	r0, r1, r8, rrx
    5cfc:	05000000 	streq	r0, [r0, #-0]
    5d00:	001fec02 	andseq	lr, pc, r2, lsl #24
    5d04:	028d0300 	addeq	r0, sp, #0, 6
    5d08:	0a032001 	beq	cdd14 <__ccfg+0xadd6c>
    5d0c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5d10:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    5d14:	1f212d43 	svcne	0x00212d43
    5d18:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    5d1c:	01046604 	tsteq	r4, r4, lsl #12
    5d20:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    5d24:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    5d28:	2f3d2d4a 	svccs	0x003d2d4a
    5d2c:	2f2f1f2f 	svccs	0x002f1f2f
    5d30:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    5d34:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    5d38:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    5d3c:	0101001e 	tsteq	r1, lr, lsl r0
    5d40:	c0020500 	andgt	r0, r2, r0, lsl #10
    5d44:	03000020 	movweq	r0, #32
    5d48:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    5d4c:	41334330 	teqmi	r3, r0, lsr r3
    5d50:	333c0903 	teqcc	ip, #49152	; 0xc000
    5d54:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    5d58:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    5d5c:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    5d60:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    5d64:	03496742 	movteq	r6, #38722	; 0x9742
    5d68:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    5d6c:	004b6924 	subeq	r6, fp, r4, lsr #18
    5d70:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    5d74:	0013024d 	andseq	r0, r3, sp, asr #4
    5d78:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    5d7c:	00020000 	andeq	r0, r2, r0
    5d80:	00000165 	andeq	r0, r0, r5, ror #2
    5d84:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5d88:	0101000d 	tsteq	r1, sp
    5d8c:	00000101 	andeq	r0, r0, r1, lsl #2
    5d90:	00000100 	andeq	r0, r0, r0, lsl #2
    5d94:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5d98:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5d9c:	2f2e2e2f 	svccs	0x002e2e2f
    5da0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5da4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5da8:	3a630062 	bcc	18c5f38 <__ccfg+0x18a5f90>
    5dac:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5db0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5db4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5db8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5dbc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5dc0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5dc4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5dc8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5dcc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5dd0:	6f6f745c 	svcvs	0x006f745c
    5dd4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5dd8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5ddc:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5de0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5de4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5de8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5dec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5df0:	5f342d69 	svcpl	0x00342d69
    5df4:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5df8:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5dfc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5e00:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5e04:	61652d65 	cmnvs	r5, r5, ror #26
    5e08:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5e0c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5e10:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5e14:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5e18:	6300656e 	movwvs	r6, #1390	; 0x56e
    5e1c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5e20:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5e24:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5e28:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5e2c:	5f393130 	svcpl	0x00393130
    5e30:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5e34:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5e38:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5e3c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5e40:	6f745c36 	svcvs	0x00745c36
    5e44:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5e48:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5e4c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5e50:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5e54:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5e58:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5e5c:	61652d65 	cmnvs	r5, r5, ror #26
    5e60:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5e64:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5e68:	71353130 	teqvc	r5, r0, lsr r1
    5e6c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5e70:	6f6e2d6d 	svcvs	0x006e2d6d
    5e74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5e78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5e7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5e80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5e84:	00737973 	rsbseq	r7, r3, r3, ror r9
    5e88:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5e8c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5e90:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    5e94:	00000100 	andeq	r0, r0, r0, lsl #2
    5e98:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5e9c:	6f725f70 	svcvs	0x00725f70
    5ea0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5ea4:	73000001 	movwvc	r0, #1
    5ea8:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    5eac:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    5eb0:	00010068 	andeq	r0, r1, r8, rrx
    5eb4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5eb8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5ebc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5ec0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5ec4:	00020068 	andeq	r0, r2, r8, rrx
    5ec8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5ecc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5ed0:	0300682e 	movweq	r6, #2094	; 0x82e
    5ed4:	64640000 	strbtvs	r0, [r4], #-0
    5ed8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    5edc:	6f000001 	svcvs	0x00000001
    5ee0:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    5ee4:	00000100 	andeq	r0, r0, r0, lsl #2
    5ee8:	02050000 	andeq	r0, r5, #0
    5eec:	00002164 	andeq	r2, r0, r4, ror #2
    5ef0:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    5ef4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    5ef8:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    5efc:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    5f00:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    5f04:	01042000 	mrseq	r2, (UNDEF: 4)
    5f08:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    5f0c:	d9030204 	stmdble	r3, {r2, r9}
    5f10:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    5f14:	ac030104 	stfges	f0, [r3], {4}
    5f18:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    5f1c:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    5f20:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    5f24:	03587803 	cmpeq	r8, #196608	; 0x30000
    5f28:	7303200d 	movwvc	r2, #12301	; 0x300d
    5f2c:	2010033c 	andscs	r0, r0, ip, lsr r3
    5f30:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5f34:	01000d02 	tsteq	r0, r2, lsl #26
    5f38:	02050001 	andeq	r0, r5, #1
    5f3c:	000021e0 	andeq	r2, r0, r0, ror #3
    5f40:	0101bf03 	tsteq	r1, r3, lsl #30
    5f44:	4a78031a 	bmi	1e06bb4 <__ccfg+0x1de6c0c>
    5f48:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    5f4c:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    5f50:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    5f54:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    5f58:	3002042d 	andcc	r0, r2, sp, lsr #8
    5f5c:	03010421 	movweq	r0, #5153	; 0x1421
    5f60:	2f3d2e0b 	svccs	0x003d2e0b
    5f64:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    5f68:	302c4d66 	eorcc	r4, ip, r6, ror #26
    5f6c:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    5f70:	01001502 	tsteq	r0, r2, lsl #10
    5f74:	02050001 	andeq	r0, r5, #1
    5f78:	0000228c 	andeq	r2, r0, ip, lsl #5
    5f7c:	01049f03 	tsteq	r4, r3, lsl #30
    5f80:	03010c03 	movweq	r0, #7171	; 0x1c03
    5f84:	77032009 	strvc	r2, [r3, -r9]
    5f88:	33312120 	teqcc	r1, #32, 2
    5f8c:	31303027 	teqcc	r0, r7, lsr #32
    5f90:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    5f94:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    5f98:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    5f9c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    5fa0:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    5fa4:	00010100 	andeq	r0, r1, r0, lsl #2
    5fa8:	22e80205 	rsccs	r0, r8, #1342177280	; 0x50000000
    5fac:	e5030000 	str	r0, [r3, #-0]
    5fb0:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    5fb4:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    5fb8:	00050233 	andeq	r0, r5, r3, lsr r2
    5fbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5fc0:	00000002 	andeq	r0, r0, r2
    5fc4:	05810300 	streq	r0, [r1, #768]	; 0x300
    5fc8:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    5fcc:	01010006 	tsteq	r1, r6
    5fd0:	00020500 	andeq	r0, r2, r0, lsl #10
    5fd4:	03000023 	movweq	r0, #35	; 0x23
    5fd8:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    5fdc:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    5fe0:	01010006 	tsteq	r1, r6
    5fe4:	10020500 	andne	r0, r2, r0, lsl #10
    5fe8:	03000023 	movweq	r0, #35	; 0x23
    5fec:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    5ff0:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    5ff4:	01010008 	tsteq	r1, r8
    5ff8:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    5ffc:	03000023 	movweq	r0, #35	; 0x23
    6000:	030105db 	movweq	r0, #5595	; 0x15db
    6004:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    6008:	20770320 	rsbscs	r0, r7, r0, lsr #6
    600c:	03200903 			; <UNDEFINED> instruction: 0x03200903
    6010:	2a352079 	bcs	d4e1fc <__ccfg+0xd2e254>
    6014:	30312232 	eorscc	r2, r1, r2, lsr r2
    6018:	30274732 	eorcc	r4, r7, r2, lsr r7
    601c:	17034732 	smladxne	r3, r2, r7, r4
    6020:	3a36372e 	bcc	d93ce0 <__ccfg+0xd73d38>
    6024:	00080227 	andeq	r0, r8, r7, lsr #4
    6028:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    602c:	00238802 	eoreq	r8, r3, r2, lsl #16
    6030:	06a90300 	strteq	r0, [r9], r0, lsl #6
    6034:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6038:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    603c:	01010003 	tsteq	r1, r3
    6040:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    6044:	03000023 	movweq	r0, #35	; 0x23
    6048:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    604c:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    6050:	00030220 	andeq	r0, r3, r0, lsr #4
    6054:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6058:	0023b002 	eoreq	fp, r3, r2
    605c:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    6060:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6064:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    6068:	01010003 	tsteq	r1, r3
    606c:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    6070:	03000023 	movweq	r0, #35	; 0x23
    6074:	160106e2 	strne	r0, [r1], -r2, ror #13
    6078:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    607c:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    6080:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    6084:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    6088:	01010003 	tsteq	r1, r3
    608c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    6090:	03000023 	movweq	r0, #35	; 0x23
    6094:	16010782 	strne	r0, [r1], -r2, lsl #15
    6098:	00060233 	andeq	r0, r6, r3, lsr r2
    609c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    60a0:	0023fc02 	eoreq	pc, r3, r2, lsl #24
    60a4:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    60a8:	43211601 			; <UNDEFINED> instruction: 0x43211601
    60ac:	03333429 	teqeq	r3, #687865856	; 0x29000000
    60b0:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    60b4:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    60b8:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    60bc:	00010100 	andeq	r0, r1, r0, lsl #2
    60c0:	24280205 	strtcs	r0, [r8], #-517	; 0xfffffdfb
    60c4:	b4030000 	strlt	r0, [r3], #-0
    60c8:	21150107 	tstcs	r5, r7, lsl #2
    60cc:	20090355 	andcs	r0, r9, r5, asr r3
    60d0:	01000302 	tsteq	r0, r2, lsl #6
    60d4:	02050001 	andeq	r0, r5, #1
    60d8:	0000243c 	andeq	r2, r0, ip, lsr r4
    60dc:	0107c803 	tsteq	r7, r3, lsl #16
    60e0:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    60e4:	0302200a 	movweq	r2, #8202	; 0x200a
    60e8:	00010100 	andeq	r0, r1, r0, lsl #2
    60ec:	24500205 	ldrbcs	r0, [r0], #-517	; 0xfffffdfb
    60f0:	a7030000 	strge	r0, [r3, -r0]
    60f4:	03200102 			; <UNDEFINED> instruction: 0x03200102
    60f8:	1f3d2009 	svcne	0x003d2009
    60fc:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    6100:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    6104:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    6108:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    610c:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    6110:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    6114:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    6118:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    611c:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    6120:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    6124:	033d3c09 	teqeq	sp, #2304	; 0x900
    6128:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    612c:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    6130:	40211f3d 	eormi	r1, r1, sp, lsr pc
    6134:	0012024b 	andseq	r0, r2, fp, asr #4
    6138:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    613c:	00256002 	eoreq	r6, r5, r2
    6140:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    6144:	04020001 	streq	r0, [r2], #-1
    6148:	200e0301 	andcs	r0, lr, r1, lsl #6
    614c:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    6150:	4b684d1d 	blmi	1a195cc <__ccfg+0x19f9624>
    6154:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    6158:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    615c:	315b3d01 	cmpcc	fp, r1, lsl #26
    6160:	01000b02 	tsteq	r0, r2, lsl #22
    6164:	02050001 	andeq	r0, r5, #1
    6168:	000025c4 	andeq	r2, r0, r4, asr #11
    616c:	01089303 	tsteq	r8, r3, lsl #6
    6170:	2f010903 	svccs	0x00010903
    6174:	0022212d 	eoreq	r2, r2, sp, lsr #2
    6178:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    617c:	0007024b 	andeq	r0, r7, fp, asr #4
    6180:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6184:	0025ec02 	eoreq	lr, r5, r2, lsl #24
    6188:	039b0300 	orrseq	r0, fp, #0, 6
    618c:	01090301 	tsteq	r9, r1, lsl #6
    6190:	203c7703 	eorscs	r7, ip, r3, lsl #14
    6194:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    6198:	0a033130 	beq	d2660 <__ccfg+0xb26b8>
    619c:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    61a0:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 6088 <__exidx_end+0x32fc>
    61a4:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    61a8:	5226501c 	eorpl	r5, r6, #28
    61ac:	2f4d4f3d 	svccs	0x004d4f3d
    61b0:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    61b4:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    61b8:	5b4b0104 	blpl	12c65d0 <__ccfg+0x12a6628>
    61bc:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    61c0:	4a09033f 	bmi	246ec4 <__ccfg+0x226f1c>
    61c4:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    61c8:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    61cc:	4a7db903 	bmi	1f745e0 <__ccfg+0x1f54638>
    61d0:	01001f02 	tsteq	r0, r2, lsl #30
    61d4:	00036501 	andeq	r6, r3, r1, lsl #10
    61d8:	a8000200 	stmdage	r0, {r9}
    61dc:	02000001 	andeq	r0, r0, #1
    61e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    61e4:	01010100 	mrseq	r0, (UNDEF: 17)
    61e8:	00000001 	andeq	r0, r0, r1
    61ec:	01000001 	tsteq	r0, r1
    61f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    61f4:	2f2e2e2f 	svccs	0x002e2e2f
    61f8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6200 <__exidx_end+0x3474>
    61fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6200:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6204:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6208:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    620c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6210:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6214:	31303030 	teqcc	r0, r0, lsr r0
    6218:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    621c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6220:	61746562 	cmnvs	r4, r2, ror #10
    6224:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6228:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    622c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6064 <__exidx_end+0x32d8>
    6230:	6f635c73 	svcvs	0x00635c73
    6234:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6238:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    623c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6240:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6244:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6248:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    624c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6250:	3130322d 	teqcc	r0, sp, lsr #4
    6254:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6258:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    625c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6260:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6264:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6268:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    626c:	616d5c65 	cmnvs	sp, r5, ror #24
    6270:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6274:	3a630065 	bcc	18c6410 <__ccfg+0x18a6468>
    6278:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    627c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6280:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6284:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6288:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    628c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6290:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6294:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6298:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    629c:	6f6f745c 	svcvs	0x006f745c
    62a0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    62a4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    62a8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    62ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    62b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    62b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    62b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    62bc:	5f342d69 	svcpl	0x00342d69
    62c0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    62c4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    62c8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    62cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    62d0:	61652d65 	cmnvs	r5, r5, ror #26
    62d4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    62d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    62dc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    62e0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    62e4:	2f2e2e2f 	svccs	0x002e2e2f
    62e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    62ec:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    62f0:	73000063 	movwvc	r0, #99	; 0x63
    62f4:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    62f8:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    62fc:	00010063 	andeq	r0, r1, r3, rrx
    6300:	6e6f6100 	powvse	f6, f7, f0
    6304:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    6308:	0100682e 	tsteq	r0, lr, lsr #16
    630c:	736f0000 	cmnvc	pc, #0
    6310:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6314:	70000001 	andvc	r0, r0, r1
    6318:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    631c:	00010068 	andeq	r0, r1, r8, rrx
    6320:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    6324:	725f7075 	subsvc	r7, pc, #117	; 0x75
    6328:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    632c:	00000100 	andeq	r0, r0, r0, lsl #2
    6330:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6334:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6338:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    633c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6340:	00000200 	andeq	r0, r0, r0, lsl #4
    6344:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6348:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    634c:	00030068 	andeq	r0, r3, r8, rrx
    6350:	5f776800 	svcpl	0x00776800
    6354:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6358:	00682e73 	rsbeq	r2, r8, r3, ror lr
    635c:	72000004 	andvc	r0, r0, #4
    6360:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6364:	00000100 	andeq	r0, r0, r0, lsl #2
    6368:	5f737973 	svcpl	0x00737973
    636c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    6370:	0100682e 	tsteq	r0, lr, lsr #16
    6374:	6f610000 	svcvs	0x00610000
    6378:	61625f6e 	cmnvs	r2, lr, ror #30
    637c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    6380:	0100682e 	tsteq	r0, lr, lsr #16
    6384:	00000000 	andeq	r0, r0, r0
    6388:	00000205 	andeq	r0, r0, r5, lsl #4
    638c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    6390:	02040100 	andeq	r0, r4, #0, 2
    6394:	0102e903 	tsteq	r2, r3, lsl #18
    6398:	97030104 	strls	r0, [r3, -r4, lsl #2]
    639c:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    63a0:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    63a4:	01040200 	mrseq	r0, R12_usr
    63a8:	2000ce03 	andcs	ip, r0, r3, lsl #28
    63ac:	02000104 	andeq	r0, r0, #4, 2
    63b0:	d1030104 	tstle	r3, r4, lsl #2
    63b4:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    63b8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    63bc:	4b896701 	blmi	fe25ffc8 <_estack+0xde25afc8>
    63c0:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    63c4:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    63c8:	03010458 	movweq	r0, #5208	; 0x1458
    63cc:	004a7ee4 	subeq	r7, sl, r4, ror #29
    63d0:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    63d4:	81030404 	tsthi	r3, r4, lsl #8
    63d8:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    63dc:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    63e0:	0001043c 	andeq	r0, r1, ip, lsr r4
    63e4:	03010402 	movweq	r0, #5122	; 0x1402
    63e8:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    63ec:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    63f0:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    63f4:	00204203 	eoreq	r4, r0, r3, lsl #4
    63f8:	03010402 	movweq	r0, #5122	; 0x1402
    63fc:	01042e14 	tsteq	r4, r4, lsl lr
    6400:	01040200 	mrseq	r0, R12_usr
    6404:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    6408:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    640c:	4b83281b 	blmi	fe0d0480 <_estack+0xde0cb480>
    6410:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    6414:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    6418:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    641c:	3c140301 	ldccc	3, cr0, [r4], {1}
    6420:	02000104 	andeq	r0, r0, #4, 2
    6424:	8d030104 	stfhis	f0, [r3, #-16]
    6428:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    642c:	01010017 	tsteq	r1, r7, lsl r0
    6430:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    6434:	03000027 	movweq	r0, #39	; 0x27
    6438:	030101da 	movweq	r0, #4570	; 0x11da
    643c:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    6440:	201d0320 	andscs	r0, sp, r0, lsr #6
    6444:	32412f59 	subcc	r2, r1, #356	; 0x164
    6448:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    644c:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    6450:	0305041b 	movweq	r0, #21531	; 0x541b
    6454:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    6458:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    645c:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    6460:	50030504 	andpl	r0, r3, r4, lsl #10
    6464:	01042120 	tsteq	r4, r0, lsr #2
    6468:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    646c:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    6470:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    6474:	03050420 	movweq	r0, #21536	; 0x5420
    6478:	0104204d 	tsteq	r4, sp, asr #32
    647c:	2f2e3403 	svccs	0x002e3403
    6480:	2f692365 	svccs	0x00692365
    6484:	213e214d 	teqcs	lr, sp, asr #2
    6488:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    648c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    6490:	ca4a0f03 	bgt	128a0a4 <__ccfg+0x126a0fc>
    6494:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    6498:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    649c:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    64a0:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    64a4:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    64a8:	31312026 	teqcc	r1, r6, lsr #32
    64ac:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    64b0:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    64b4:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    64b8:	03200903 			; <UNDEFINED> instruction: 0x03200903
    64bc:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    64c0:	7103213c 	tstvc	r3, ip, lsr r1
    64c4:	3c0f0320 	stccc	3, cr0, [pc], {32}
    64c8:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    64cc:	23212265 			; <UNDEFINED> instruction: 0x23212265
    64d0:	20780328 	rsbscs	r0, r8, r8, lsr #6
    64d4:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    64d8:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    64dc:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    64e0:	01010021 	tsteq	r1, r1, lsr #32
    64e4:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    64e8:	03000029 	movweq	r0, #41	; 0x29
    64ec:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    64f0:	a22f2240 	eorge	r2, pc, #64, 4
    64f4:	2a404e24 	bcs	1019d8c <__ccfg+0xff9de4>
    64f8:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    64fc:	00010100 	andeq	r0, r1, r0, lsl #2
    6500:	00000205 	andeq	r0, r0, r5, lsl #4
    6504:	e5030000 	str	r0, [r3, #-0]
    6508:	0c030103 	stfeqs	f0, [r3], {3}
    650c:	30282f20 	eorcc	r2, r8, r0, lsr #30
    6510:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    6514:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    6518:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    651c:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    6520:	1e224b2f 	vmulne.f64	d4, d2, d31
    6524:	000c023e 	andeq	r0, ip, lr, lsr r2
    6528:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    652c:	0029bc02 	eoreq	fp, r9, r2, lsl #24
    6530:	04a60300 	strteq	r0, [r6], #768	; 0x300
    6534:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    6538:	00040226 	andeq	r0, r4, r6, lsr #4
    653c:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    6540:	00020000 	andeq	r0, r2, r0
    6544:	00000143 	andeq	r0, r0, r3, asr #2
    6548:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    654c:	0101000d 	tsteq	r1, sp
    6550:	00000101 	andeq	r0, r0, r1, lsl #2
    6554:	00000100 	andeq	r0, r0, r0, lsl #2
    6558:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    655c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6560:	2f2e2e2f 	svccs	0x002e2e2f
    6564:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6568:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    656c:	3a630062 	bcc	18c66fc <__ccfg+0x18a6754>
    6570:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6574:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6578:	302e322e 	eorcc	r3, lr, lr, lsr #4
    657c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6580:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6584:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6588:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    658c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6590:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6594:	6f6f745c 	svcvs	0x006f745c
    6598:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    659c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    65a0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    65a4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    65a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    65ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    65b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    65b4:	5f342d69 	svcpl	0x00342d69
    65b8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    65bc:	33713531 	cmncc	r1, #205520896	; 0xc400000
    65c0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    65c4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    65c8:	61652d65 	cmnvs	r5, r5, ror #26
    65cc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    65d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    65d4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    65d8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    65dc:	6300656e 	movwvs	r6, #1390	; 0x56e
    65e0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    65e4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    65e8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    65ec:	30302e30 	eorscc	r2, r0, r0, lsr lr
    65f0:	5f393130 	svcpl	0x00393130
    65f4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    65f8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    65fc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6600:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6604:	6f745c36 	svcvs	0x00745c36
    6608:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    660c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6610:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6614:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6618:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    661c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6620:	61652d65 	cmnvs	r5, r5, ror #26
    6624:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6628:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    662c:	71353130 	teqvc	r5, r0, lsr r1
    6630:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6634:	6f6e2d6d 	svcvs	0x006e2d6d
    6638:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    663c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6640:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6644:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6648:	00737973 	rsbseq	r7, r3, r3, ror r9
    664c:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    6650:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    6654:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    6658:	63000001 	movwvs	r0, #1
    665c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    6660:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    6664:	00010068 	andeq	r0, r1, r8, rrx
    6668:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    666c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6670:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6674:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6678:	00020068 	andeq	r0, r2, r8, rrx
    667c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6680:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6684:	0300682e 	movweq	r6, #2094	; 0x82e
    6688:	00000000 	andeq	r0, r0, r0
    668c:	00000205 	andeq	r0, r0, r5, lsl #4
    6690:	c4030000 	strgt	r0, [r3], #-0
    6694:	2f130100 	svccs	0x00130100
    6698:	01000602 	tsteq	r0, r2, lsl #12
    669c:	02050001 	andeq	r0, r5, #1
    66a0:	00000000 	andeq	r0, r0, r0
    66a4:	0100d003 	tsteq	r0, r3
    66a8:	0a032f14 	beq	d2300 <__ccfg+0xb2358>
    66ac:	0008022e 	andeq	r0, r8, lr, lsr #4
    66b0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    66b4:	0029d402 	eoreq	sp, r9, r2, lsl #8
    66b8:	00e60300 	rsceq	r0, r6, r0, lsl #6
    66bc:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    66c0:	9b030204 	blls	c6ed8 <__ccfg+0xa6f30>
    66c4:	01042e01 	tsteq	r4, r1, lsl #28
    66c8:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    66cc:	4b4b4c23 	blmi	12d9760 <__ccfg+0x12b97b8>
    66d0:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    66d4:	01010005 	tsteq	r1, r5
    66d8:	00020500 	andeq	r0, r2, r0, lsl #10
    66dc:	03000000 	movweq	r0, #0
    66e0:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    66e4:	01b00302 	lslseq	r0, r2, #6
    66e8:	03010420 	movweq	r0, #5152	; 0x1420
    66ec:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    66f0:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    66f4:	4a0a033c 	bmi	2873ec <__ccfg+0x267444>
    66f8:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    66fc:	01000502 	tsteq	r0, r2, lsl #10
    6700:	02050001 	andeq	r0, r5, #1
    6704:	00002a20 	andeq	r2, r0, r0, lsr #20
    6708:	0101a603 	tsteq	r1, r3, lsl #12
    670c:	e3030204 	movw	r0, #12804	; 0x3204
    6710:	11032000 	mrsne	r2, (UNDEF: 3)
    6714:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 6664 <__exidx_end+0x38d8>
    6718:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    671c:	8c030104 	stfhis	f0, [r3], {4}
    6720:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    6724:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    6728:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    672c:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    6730:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    6734:	30032064 	andcc	r2, r3, r4, rrx
    6738:	00040220 	andeq	r0, r4, r0, lsr #4
    673c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6740:	002a8c02 	eoreq	r8, sl, r2, lsl #24
    6744:	01e00300 	mvneq	r0, r0, lsl #6
    6748:	03020401 	movweq	r0, #9217	; 0x2401
    674c:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    6750:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    6754:	0302042e 	movweq	r0, #9262	; 0x242e
    6758:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    675c:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    6760:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6764:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    6768:	01000202 	tsteq	r0, r2, lsl #4
    676c:	00021e01 	andeq	r1, r2, r1, lsl #28
    6770:	42000200 	andmi	r0, r0, #0, 4
    6774:	02000001 	andeq	r0, r0, #1
    6778:	0d0efb01 	vstreq	d15, [lr, #-4]
    677c:	01010100 	mrseq	r0, (UNDEF: 17)
    6780:	00000001 	andeq	r0, r0, r1
    6784:	01000001 	tsteq	r0, r1
    6788:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    678c:	2f2e2e2f 	svccs	0x002e2e2f
    6790:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6798 <__exidx_end+0x3a0c>
    6794:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6798:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    679c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    67a0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    67a4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    67a8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    67ac:	31303030 	teqcc	r0, r0, lsr r0
    67b0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    67b4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    67b8:	61746562 	cmnvs	r4, r2, ror #10
    67bc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    67c0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    67c4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 65fc <__exidx_end+0x3870>
    67c8:	6f635c73 	svcvs	0x00635c73
    67cc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    67d0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    67d4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    67d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    67dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    67e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    67e4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    67e8:	3130322d 	teqcc	r0, sp, lsr #4
    67ec:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    67f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    67f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    67f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    67fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6800:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6804:	616d5c65 	cmnvs	sp, r5, ror #24
    6808:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    680c:	3a630065 	bcc	18c69a8 <__ccfg+0x18a6a00>
    6810:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6814:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6818:	302e322e 	eorcc	r3, lr, lr, lsr #4
    681c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6820:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6824:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6828:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    682c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6830:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6834:	6f6f745c 	svcvs	0x006f745c
    6838:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    683c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6840:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6844:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6848:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    684c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6850:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6854:	5f342d69 	svcpl	0x00342d69
    6858:	30322d39 	eorscc	r2, r2, r9, lsr sp
    685c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6860:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6864:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6868:	61652d65 	cmnvs	r5, r5, ror #26
    686c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6870:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6874:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6878:	00007379 	andeq	r7, r0, r9, ror r3
    687c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    6880:	00010068 	andeq	r0, r1, r8, rrx
    6884:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    6888:	0100632e 	tsteq	r0, lr, lsr #6
    688c:	645f0000 	ldrbvs	r0, [pc], #-0	; 6894 <__exidx_end+0x3b08>
    6890:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6894:	745f746c 	ldrbvc	r7, [pc], #-1132	; 689c <__exidx_end+0x3b10>
    6898:	73657079 	cmnvc	r5, #121	; 0x79
    689c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    68a0:	735f0000 	cmpvc	pc, #0
    68a4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    68a8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    68ac:	63000003 	movwvs	r0, #3
    68b0:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    68b4:	00000100 	andeq	r0, r0, r0, lsl #2
    68b8:	02050000 	andeq	r0, r5, #0
    68bc:	00002aa4 	andeq	r2, r0, r4, lsr #21
    68c0:	01018803 	tsteq	r1, r3, lsl #16
    68c4:	50303120 	eorspl	r3, r0, r0, lsr #2
    68c8:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    68cc:	0005022c 	andeq	r0, r5, ip, lsr #4
    68d0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    68d4:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    68d8:	0300002a 	movweq	r0, #42	; 0x2a
    68dc:	030100c3 	movweq	r0, #4291	; 0x10c3
    68e0:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    68e4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    68e8:	02050002 	andeq	r0, r5, #2
    68ec:	00000000 	andeq	r0, r0, r0
    68f0:	0100d803 	tsteq	r0, r3, lsl #16
    68f4:	33010e03 	movwcc	r0, #7683	; 0x1e03
    68f8:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    68fc:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    6900:	01010004 	tsteq	r1, r4
    6904:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    6908:	00000002 	andeq	r0, r0, r2
    690c:	01850300 	orreq	r0, r5, r0, lsl #6
    6910:	20110301 	andscs	r0, r1, r1, lsl #6
    6914:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    6918:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    691c:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    6920:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    6924:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    6928:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    692c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6930:	02050002 	andeq	r0, r5, #2
    6934:	00000000 	andeq	r0, r0, r0
    6938:	0101af03 	tsteq	r1, r3, lsl #30
    693c:	1b201103 	blne	80ad50 <__ccfg+0x7eada8>
    6940:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    6944:	042f2013 	strteq	r2, [pc], #-19	; 694c <__exidx_end+0x3bc0>
    6948:	20690301 	rsbcs	r0, r9, r1, lsl #6
    694c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6950:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6954:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    6958:	01000502 	tsteq	r0, r2, lsl #10
    695c:	00020401 	andeq	r0, r2, r1, lsl #8
    6960:	00000205 	andeq	r0, r0, r5, lsl #4
    6964:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    6968:	11030101 	tstne	r3, r1, lsl #2
    696c:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    6970:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    6974:	0104302d 	tsteq	r4, sp, lsr #32
    6978:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    697c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6980:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6984:	00c80302 	sbceq	r0, r8, r2, lsl #6
    6988:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    698c:	d6010100 	strle	r0, [r1], -r0, lsl #2
    6990:	02000002 	andeq	r0, r0, #2
    6994:	00017c00 	andeq	r7, r1, r0, lsl #24
    6998:	fb010200 	blx	471a2 <__ccfg+0x271fa>
    699c:	01000d0e 	tsteq	r0, lr, lsl #26
    69a0:	00010101 	andeq	r0, r1, r1, lsl #2
    69a4:	00010000 	andeq	r0, r1, r0
    69a8:	2f2e0100 	svccs	0x002e0100
    69ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    69b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    69b4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    69b8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    69bc:	63006269 	movwvs	r6, #617	; 0x269
    69c0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    69c4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    69c8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    69cc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    69d0:	5f393130 	svcpl	0x00393130
    69d4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    69d8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    69dc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    69e0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    69e4:	6f745c36 	svcvs	0x00745c36
    69e8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    69ec:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    69f0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    69f4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    69f8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    69fc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a00:	61652d65 	cmnvs	r5, r5, ror #26
    6a04:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6a08:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6a0c:	71353130 	teqvc	r5, r0, lsr r1
    6a10:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6a14:	6f6e2d6d 	svcvs	0x006e2d6d
    6a18:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a1c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6a20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6a24:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6a28:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6a2c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6a30:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6a34:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6a38:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6a3c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6a40:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6a44:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6a48:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6a4c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6a50:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a54:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6a58:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6a5c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 68f4 <__exidx_end+0x3b68>
    6a60:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6a64:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6a68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6a6c:	6f6e2d6d 	svcvs	0x006e2d6d
    6a70:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a74:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6a78:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6a7c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6a80:	615c3371 	cmpvs	ip, r1, ror r3
    6a84:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6a88:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6a8c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6a90:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6a94:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6a98:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6a9c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6aa0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6aa4:	2f2e2e2f 	svccs	0x002e2e2f
    6aa8:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6aac:	63736f00 	cmnvs	r3, #0, 30
    6ab0:	0100632e 	tsteq	r0, lr, lsr #6
    6ab4:	736f0000 	cmnvc	pc, #0
    6ab8:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6abc:	5f000001 	svcpl	0x00000001
    6ac0:	61666564 	cmnvs	r6, r4, ror #10
    6ac4:	5f746c75 	svcpl	0x00746c75
    6ac8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6acc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6ad0:	5f000002 	svcpl	0x00000002
    6ad4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6ad8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6adc:	00000300 	andeq	r0, r0, r0, lsl #6
    6ae0:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6ae8 <__exidx_end+0x3d5c>
    6ae4:	73657079 	cmnvc	r5, #121	; 0x79
    6ae8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6aec:	6f720000 	svcvs	0x00720000
    6af0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6af4:	61000001 	tstvs	r0, r1
    6af8:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    6afc:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    6b00:	00000100 	andeq	r0, r0, r0, lsl #2
    6b04:	5f6e6f61 	svcpl	0x006e6f61
    6b08:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6b0c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6b10:	00000100 	andeq	r0, r0, r0, lsl #2
    6b14:	02050000 	andeq	r0, r5, #0
    6b18:	00002ad4 	ldrdeq	r2, [r0], -r4
    6b1c:	0100e503 	tsteq	r0, r3, lsl #10
    6b20:	200f0320 	andcs	r0, pc, r0, lsr #6
    6b24:	03207103 			; <UNDEFINED> instruction: 0x03207103
    6b28:	0325200f 			; <UNDEFINED> instruction: 0x0325200f
    6b2c:	03309e09 	teqeq	r0, #9, 28	; 0x90
    6b30:	a3339e09 	teqge	r3, #9, 28	; 0x90
    6b34:	01000702 	tsteq	r0, r2, lsl #14
    6b38:	02050001 	andeq	r0, r5, #1
    6b3c:	00002b30 	andeq	r2, r0, r0, lsr fp
    6b40:	0101a003 	tsteq	r1, r3
    6b44:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    6b48:	3c7a0388 	ldclcc	3, cr0, [sl], #-544	; 0xfffffde0
    6b4c:	06022526 	streq	r2, [r2], -r6, lsr #10
    6b50:	00010100 	andeq	r0, r1, r0, lsl #2
    6b54:	00000205 	andeq	r0, r0, r5, lsl #4
    6b58:	c2030000 	andgt	r0, r3, #0
    6b5c:	25200101 	strcs	r0, [r0, #-257]!	; 0xfffffeff
    6b60:	79033491 	stmdbvc	r3, {r0, r4, r7, sl, ip, sp}
    6b64:	7a03272e 	bvc	d0824 <__ccfg+0xb087c>
    6b68:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    6b6c:	7a030104 	bvc	c6f84 <__ccfg+0xa6fdc>
    6b70:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6b74:	2d305001 	ldccs	0, cr5, [r0, #-4]!
    6b78:	4b241f30 	blmi	90e840 <__ccfg+0x8ee898>
    6b7c:	3d341f3d 	ldccc	15, cr1, [r4, #-244]!	; 0xffffff0c
    6b80:	6d03326c 	sfmvs	f3, 4, [r3, #-432]	; 0xfffffe50
    6b84:	3c100366 	ldccc	3, cr0, [r0], {102}	; 0x66
    6b88:	00090226 	andeq	r0, r9, r6, lsr #4
    6b8c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6b90:	00000002 	andeq	r0, r0, r2
    6b94:	01f30300 	mvnseq	r0, r0, lsl #6
    6b98:	024b2101 	subeq	r2, fp, #1073741824	; 0x40000000
    6b9c:	01010007 	tsteq	r1, r7
    6ba0:	00020500 	andeq	r0, r2, r0, lsl #10
    6ba4:	03000000 	movweq	r0, #0
    6ba8:	24010280 	strcs	r0, [r1], #-640	; 0xfffffd80
    6bac:	22030204 	andcs	r0, r3, #4, 4	; 0x40000000
    6bb0:	03010458 	movweq	r0, #5208	; 0x1458
    6bb4:	02048262 	andeq	r8, r4, #536870918	; 0x20000006
    6bb8:	04203c03 	strteq	r3, [r0], #-3075	; 0xfffff3fd
    6bbc:	4a4a0301 	bmi	12877c8 <__ccfg+0x1267820>
    6bc0:	3d211f3d 	stccc	15, cr1, [r1, #-244]!	; 0xffffff0c
    6bc4:	1f30221f 	svcne	0x0030221f
    6bc8:	02232230 	eoreq	r2, r3, #48, 4
    6bcc:	0101000c 	tsteq	r1, ip
    6bd0:	00020500 	andeq	r0, r2, r0, lsl #10
    6bd4:	03000000 	movweq	r0, #0
    6bd8:	250102a3 	strcs	r0, [r1, #-675]	; 0xfffffd5d
    6bdc:	0302044f 	movweq	r0, #9295	; 0x244f
    6be0:	01044a17 	tsteq	r4, r7, lsl sl
    6be4:	4b4a6d03 	blmi	12a1ff8 <__ccfg+0x1282050>
    6be8:	01000902 	tsteq	r0, r2, lsl #18
    6bec:	02050001 	andeq	r0, r5, #1
    6bf0:	00000000 	andeq	r0, r0, r0
    6bf4:	0102bc03 	tsteq	r2, r3, lsl #24
    6bf8:	20170322 	andscs	r0, r7, r2, lsr #6
    6bfc:	28206903 	stmdacs	r0!, {r0, r1, r8, fp, sp, lr}
    6c00:	033c1003 	teqeq	ip, #3
    6c04:	15032e6c 	strne	r2, [r3, #-3692]	; 0xfffff194
    6c08:	586d032e 	stmdapl	sp!, {r1, r2, r3, r5, r8, r9}^
    6c0c:	03201303 			; <UNDEFINED> instruction: 0x03201303
    6c10:	1103206f 	tstne	r3, pc, rrx
    6c14:	06023f20 	streq	r3, [r2], -r0, lsr #30
    6c18:	00010100 	andeq	r0, r1, r0, lsl #2
    6c1c:	00000205 	andeq	r0, r0, r5, lsl #4
    6c20:	e3030000 	movw	r0, #12288	; 0x3000
    6c24:	21030102 	tstcs	r3, r2, lsl #2
    6c28:	02024d01 	andeq	r4, r2, #1, 26	; 0x40
    6c2c:	00010100 	andeq	r0, r1, r0, lsl #2
    6c30:	00000205 	andeq	r0, r0, r5, lsl #4
    6c34:	90030000 	andls	r0, r3, r0
    6c38:	10030103 	andne	r0, r3, r3, lsl #2
    6c3c:	211f2120 	tstcs	pc, r0, lsr #2
    6c40:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6c44:	02003e01 	andeq	r3, r0, #1, 28
    6c48:	3d3d0104 	ldfccs	f0, [sp, #-16]!
    6c4c:	02341d31 	eorseq	r1, r4, #3136	; 0xc40
    6c50:	01010007 	tsteq	r1, r7
    6c54:	00020500 	andeq	r0, r2, r0, lsl #10
    6c58:	03000000 	movweq	r0, #0
    6c5c:	170103b5 			; <UNDEFINED> instruction: 0x170103b5
    6c60:	3d332c31 	ldccc	12, cr2, [r3, #-196]!	; 0xffffff3c
    6c64:	01000502 	tsteq	r0, r2, lsl #10
    6c68:	Address 0x0000000000006c68 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
      34:	5f5f0065 	svcpl	0x005f0065
      38:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6d0 <_estack+0xdfffa6d0>
      3c:	00747261 	rsbseq	r7, r4, r1, ror #4
			i = k;
      40:	70716572 	rsbsvc	r6, r1, r2, ror r5
				j->Next = k;
      44:	72006d64 	andvc	r6, r0, #100, 26	; 0x1900
      48:	654c6465 	strbvs	r6, [ip, #-1125]	; 0xfffffb9b
}
      4c:	5f5f0064 	svcpl	0x005f0064
      50:	616c7473 	smcvs	51011	; 0xc743
      54:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
		release;
      58:	614e5f74 	hvcvs	58868	; 0xe5f4
      5c:	7300656d 	movwvc	r6, #1389	; 0x56d
      60:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
      64:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
      68:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
      6c:	66666500 	strbtvs	r6, [r6], -r0, lsl #10
      70:	006d6470 	rsbeq	r6, sp, r0, ror r4
      74:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      78:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      7c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
      80:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
      84:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
      88:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
      8c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
	descriptors [fd] = s;
      90:	6e497372 	mcrvs	3, 2, r7, cr9, cr2, {3}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00786564 	rsbseq	r6, r8, r4, ror #10
      98:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
	if (s == NULL)
      9c:	6c006e70 	stcvs	14, cr6, [r0], {112}	; 0x70
		syserror (EMALLOC, "tcv05");
      a0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      a4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      ac:	735f5f00 	cmpvc	pc, #0, 30
      b0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      b4:	6f68535f 	svcvs	0x0068535f
      b8:	654d5f77 	strbvs	r5, [sp, #-3959]	; 0xfffff089
      bc:	5f00756e 	svcpl	0x0000756e
      c0:	5f69705f 	svcpl	0x0069705f
      c4:	5f007473 	svcpl	0x00007473
      c8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      cc:	525f6261 	subspl	r6, pc, #268435462	; 0x10000006
      d0:	425f6e75 	subsmi	r6, pc, #1872	; 0x750
      d4:	6b6e696c 	blvs	1b9a68c <__ccfg+0x1b7a6e4>
      d8:	2f007265 	svccs	0x00007265
      dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      e0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      e4:	2f6e6974 	svccs	0x006e6974
      e8:	6b736544 	blvs	1cd9600 <__ccfg+0x1cb9658>
      ec:	2f706f74 	svccs	0x00706f74
      f0:	4f534c4f 	svcmi	0x00534c4f
        if(offTime > 0)
      f4:	2f54454e 	svccs	0x0054454e
            delay(offTime, Check_PERIOD);
      f8:	4f434950 	svcmi	0x00434950
        if(ledFlag == 0) {
      fc:	70412f53 	subvc	r2, r1, r3, asr pc
     100:	432f7370 			; <UNDEFINED> instruction: 0x432f7370
     104:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
            led = redLed;
     108:	4c5f3436 	cfldrdmi	mvd3, [pc], {54}	; 0x36
            onTime = redOn;
     10c:	00366261 	eorseq	r6, r6, r1, ror #4
     110:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
            offTime = greenOff;
     114:	5f62616c 	svcpl	0x0062616c
     118:	5f46464f 	svcpl	0x0046464f
        if(On)
     11c:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
     120:	5f00444f 	svcpl	0x0000444f
            leds(led,1);
     124:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     128:	495f6261 	ldmdbmi	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
            leds(led,0);
     12c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     130:	73006c61 	movwvc	r6, #3169	; 0xc61
     134:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     138:	76655f6d 	strbtvc	r5, [r5], -sp, ror #30
        if(onTime > 0)
     13c:	5f746e65 	svcpl	0x00746e65
            delay(onTime, OFF_PERIOD);
     140:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
        when(&On, Check_PERIOD);
     144:	5f5f0074 	svcpl	0x005f0074
     148:	616c7473 	smcvs	51011	; 0xc743
        release;
     14c:	74535f62 	ldrbvc	r5, [r3], #-3938	; 0xfffff09e
            led = greenLed;
     150:	6f00706f 	svcvs	0x0000706f
     154:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
            onTime = greenOn;
     158:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
            offTime = greenOff;
     15c:	4c467473 	cfstrdmi	mvd7, [r6], {115}	; 0x73
            leds(led,0);
     160:	64006761 	strvs	r6, [r0], #-1889	; 0xfffff89f
     164:	754e6f69 	strbvc	r6, [lr, #-3945]	; 0xfffff097
     168:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     16c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     170:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     174:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
        leds(led,0);
     178:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     17c:	31393130 	teqcc	r9, r0, lsr r1
     180:	20353230 	eorscs	r3, r5, r0, lsr r2
     184:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
}
     188:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     18c:	415b2029 	cmpmi	fp, r9, lsr #32
     190:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
     194:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
     198:	6172622d 	cmnvs	r2, sp, lsr #4
     19c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     1a0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     1a4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     1a8:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
     1ac:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
     1b0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     1b4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1b8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
     1bc:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     1c0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     1c4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    word number = 0;
     1c8:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
    int numbersIndex = 0;
     1cc:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     1d0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
        if(settingsInput[i] == ' ') {
     1d4:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     1d8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
            numbers[numbersIndex] = number;
     1dc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     1e0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
            number = 0;
     1e4:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    redOn = numbers[0];
     1ec:	7764672d 	strbvc	r6, [r4, -sp, lsr #14]!
     1f0:	2d667261 	sfmcs	f7, 2, [r6, #-388]!	; 0xfffffe7c
    redOff = numbers[1];
     1f4:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
     1f8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    greenOn = numbers[2];
     1fc:	642d7463 	strtvs	r7, [sp], #-1123	; 0xfffffb9d
     200:	66726177 			; <UNDEFINED> instruction: 0x66726177
    greenOff = numbers[3];
     204:	734f2d20 	movtvc	r2, #64800	; 0xfd20
     208:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
}
     20c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
     214:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
            number = number * 10;
     218:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
            number += settingsInput[i] - 48;
     21c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     220:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     224:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     228:	61746164 	cmnvs	r4, r4, ror #2
     22c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     230:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
fsm root {
     234:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     238:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
     23c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     240:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
     244:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
     248:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
     24c:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
        ser_outf(Initial, "Enter your name: ");
     250:	6d662d20 	stclvs	13, cr2, [r6, #-128]!	; 0xffffff80
     254:	652d7861 	strvs	r7, [sp, #-2145]!	; 0xfffff79f
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     25c:	30313d73 	eorscc	r3, r1, r3, ror sp
        runfsm blinker;
     260:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     264:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	5f746e65 	svcpl	0x00746e65
     26c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     270:	2074726f 	rsbscs	r7, r4, pc, ror #4
        ser_inf(Get_Choice, "%c", &choice);
     274:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     278:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
        if (choice == 'A' || choice == 'a'){
     27c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     280:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     284:	5f646f69 	svcpl	0x00646f69
            proceed Adjust_Intervals;
     288:	73660074 	cmnvc	r6, #116	; 0x74
            proceed Monitor;
     28c:	6b6c6274 	blvs	1b18c64 <__ccfg+0x1af8cbc>
        proceed Show_Menu;
     290:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	00726562 	rsbseq	r6, r2, r2, ror #10
     298:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	64654c6e 	strbtvs	r4, [r5], #-3182	; 0xfffff392
     2a0:	6f776100 	svcvs	0x00776100
     2a4:	75006472 	strvc	r6, [r0, #-1138]	; 0xfffffb8e
        processSettingsInput(settings);
     2a8:	6e726573 	mrcvs	5, 3, r6, cr2, cr3, {3}
        On = YES;
     2ac:	00656d61 	rsbeq	r6, r5, r1, ror #26
     2b0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
        trigger(&On);
     2b4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
        proceed Show_Menu;
     2b8:	00746174 	rsbseq	r6, r4, r4, ror r1
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	6f6d6470 	svcvs	0x006d6470
     2c0:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
     2c4:	00657361 	rsbeq	r7, r5, r1, ror #6
     2c8:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     2cc:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
     2d0:	67007265 	strvs	r7, [r0, -r5, ror #4]
     2d4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
        proceed Show_Menu;
     2d8:	4b006e4f 	blmi	1bc1c <__exidx_end+0x18e90>
     2dc:	2f504d54 	svccs	0x00504d54
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
     2e4:	5f5f0063 	svcpl	0x005f0063
        displayCycle = YES;
     2e8:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2f0:	5f00736e 	svcpl	0x0000736e
     2f4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        if(ch == 'S' || ch == 's'){
     2f8:	415f6261 	cmpmi	pc, r1, ror #4
     2fc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     300:	6f74535f 	svcvs	0x0074535f
            displayCycle = NO;
     304:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
     308:	61684364 	cmnvs	r8, r4, ror #6
            proceed Show_Menu;
     30c:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
        proceed Monitor;
     310:	67007265 	strvs	r7, [r0, -r5, ror #4]
     314:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     318:	0066664f 	rsbeq	r6, r6, pc, asr #12
        leds(1, 0);
     31c:	73625f5f 	cmnvc	r2, #380	; 0x17c
     320:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     324:	5f747261 	svcpl	0x00747261
     328:	5f5f005f 	svcpl	0x005f005f
     32c:	5f737362 	svcpl	0x00737362
        leds(0, 0);
     330:	5f646e65 	svcpl	0x00646e65
     334:	7270005f 	rsbsvc	r0, r0, #95	; 0x5f
     338:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     33c:	74655373 	strbtvc	r5, [r5], #-883	; 0xfffffc8d
     340:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     344:	706e4973 	rsbvc	r4, lr, r3, ror r9
        } else if (choice == 'S' || choice == 's') {
     348:	62007475 	andvs	r7, r0, #1962934272	; 0x75000000
            proceed Stop;
     34c:	6b6e696c 	blvs	1b9a904 <__ccfg+0x1b7a95c>
        } else if (choice == 'V' || choice == 'v') {
     350:	73007265 	movwvc	r7, #613	; 0x265
            proceed View_Settings;
     354:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
        } else if (choice == 'M' || choice == 'm') {
     358:	0073676e 	rsbseq	r6, r3, lr, ror #14
            proceed Monitor;
     35c:	5466666f 	strbtpl	r6, [r6], #-1647	; 0xfffff991
     360:	00656d69 	rsbeq	r6, r5, r9, ror #26
     364:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     368:	5f62616c 	svcpl	0x0062616c
     36c:	5f746553 	svcpl	0x00746553
     370:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     374:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
     378:	5f5f0073 	svcpl	0x005f0073
     37c:	616c7473 	smcvs	51011	; 0xc743
     380:	69565f62 	ldmdbvs	r6, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     384:	535f7765 	cmppl	pc, #26476544	; 0x1940000
     388:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     38c:	0073676e 	rsbseq	r6, r3, lr, ror #14
     390:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     394:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     398:	6f680072 	svcvs	0x00680072
     39c:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     3a0:	5f5f0064 	svcpl	0x005f0064
static void devinit_uart (int devnum) {
     3a4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
     3ac:	00747369 	rsbseq	r7, r4, r9, ror #6
void udelay (volatile word n) {
     3b0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     3b4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
	while (n) {
     3b8:	61686320 	cmnvs	r8, r0, lsr #6
     3bc:	50470072 	subpl	r0, r7, r2, ror r0
}
     3c0:	635f4f49 	cmpvs	pc, #292	; 0x124
	while (n--);
     3c4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     3c8:	006f6944 	rsbeq	r6, pc, r4, asr #18
     3cc:	69546e6f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
		n--;
     3d0:	5f00656d 	svcpl	0x0000656d
     3d4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     3d8:	415f6261 	cmpmi	pc, r1, ror #4
void mdelay (volatile word n) {
     3dc:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     3e0:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
	while (n) {
     3e4:	76726574 			; <UNDEFINED> instruction: 0x76726574
     3e8:	00736c61 	rsbseq	r6, r3, r1, ror #24
}
     3ec:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
		udelay (999);
     3f0:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     3f4:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
		n--;
     3f8:	66664f64 	strbtvs	r4, [r6], -r4, ror #30
     3fc:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     400:	73726562 	cmnvc	r2, #411041792	; 0x18800000
     404:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
void __pi_ondomain (lword d) {
     408:	00636c62 	rsbeq	r6, r3, r2, ror #24
     40c:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 30c <root+0xd8>
		if (__pi_systat.effpdm > 1)
     410:	006e6165 	rsbeq	r6, lr, r5, ror #2
     414:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
			__pi_systat.effpdm = 1;
     418:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
	PRCMPowerDomainOn (d);
     41c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     420:	6175006b 	cmnvs	r5, fp, rrx
     424:	745f7472 	ldrbvc	r7, [pc], #-1138	; 42c <__pi_ondomain+0x24>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	735f5f00 	cmpvc	pc, #0, 30
     42c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     430:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
	__pi_systat.ondmns |= d;
     434:	6f68435f 	svcvs	0x0068435f
     438:	00656369 	rsbeq	r6, r5, r9, ror #6
}
     43c:	4664656c 	strbtmi	r6, [r4], -ip, ror #10
     440:	0067616c 	rsbeq	r6, r7, ip, ror #2
void __pi_syserror (word ec, const char *m) {
     444:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
	diag ("SYSERR: %x, %s", ec, m);
     448:	745f7461 	ldrbvc	r7, [pc], #-1121	; 450 <__pi_syserror+0xc>
     44c:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
  __ASM volatile ("cpsid i" : : : "memory");
     450:	0073746e 	rsbseq	r7, r3, lr, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     458:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     45c:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
		all_leds_blink;
     460:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     464:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
     468:	6e4f6465 	cdpvs	4, 4, cr6, cr15, cr5, {3}
     46c:	73696400 	cmnvc	r9, #0, 8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     474:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     478:	6e700065 	cdpvs	0, 7, cr0, cr0, cr5, {3}
     47c:	65006d75 	strvs	r6, [r0, #-3445]	; 0xfffff28b
     480:	6f72746e 	svcvs	0x0072746e
     484:	66007970 			; <UNDEFINED> instruction: 0x66007970
	while (1) {
     488:	7367616c 	cmnvc	r7, #108, 2
     48c:	6f686300 	svcvs	0x00686300
     490:	00656369 	rsbeq	r6, r5, r9, ror #6
     494:	636d7366 	cmnvs	sp, #-1744830463	; 0x98000001
void tci_run_delay_timer () {
     498:	0065646f 	rsbeq	r6, r5, pc, ror #8
	setdel = __pi_mintk - __pi_old;
     49c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     4a0:	5f007375 	svcpl	0x00007375
     4a4:	5f69705f 	svcpl	0x0069705f
     4a8:	5f626370 	svcpl	0x00626370
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4ac:	5f5f0073 	svcpl	0x005f0073
     4b0:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     4b4:	745f6263 	ldrbvc	r6, [pc], #-611	; 4bc <tci_run_delay_timer+0x24>
     4b8:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	68436e65 	stmdavs	r3, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	sti_tim;
     4c0:	63617261 	cmnvs	r1, #268435462	; 0x10000006
}
     4c4:	00726574 	rsbseq	r6, r2, r4, ror r5
     4c8:	746f6f72 	strbtvc	r6, [pc], #-3954	; 4d0 <tci_run_delay_timer+0x38>
     4cc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     4d0:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4d4:	006b746e 	rsbeq	r7, fp, lr, ror #8
	cli_aux;
     4d8:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     4dc:	50470074 	subpl	r0, r7, r4, ror r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	735f4f49 	cmpvc	pc, #292	; 0x124
     4e4:	754f7465 	strbvc	r7, [pc, #-1125]	; 87 <g_pfnVectors+0x87>
     4e8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     4ec:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	sti_aux;
     4f0:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
}
     4f4:	4f41006f 	svcmi	0x0041006f
     4f8:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     4fc:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
void AONRTCIntHandler () {
     500:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     508:	6f4d3233 	svcvs	0x004d3233
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	5f006564 	svcpl	0x00006564
		if (__pi_utims [0] == 0)
     510:	5f69705f 	svcpl	0x0069705f
     514:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
		if (*(__pi_utims [0])) {
     518:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
     51c:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
			(*(__pi_utims [0]))--;
     520:	76617474 			; <UNDEFINED> instruction: 0x76617474
		if (__pi_utims [1] == 0)
     524:	61727500 	cmnvs	r2, r0, lsl #10
		if (*(__pi_utims [1])) {
     528:	00736574 	rsbseq	r6, r3, r4, ror r5
			aux_timer_inactive = 0;
     52c:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
			(*(__pi_utims [1]))--;
     530:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		if (__pi_utims [2] == 0)
     534:	7172695f 	cmnvc	r2, pc, asr r9
		if (*(__pi_utims [2])) {
     538:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
			(*(__pi_utims [2]))--;
     53c:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
		if (__pi_utims [3] != 0) {
     540:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
			if (*(__pi_utims [3])) {
     544:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
				aux_timer_inactive = 0;
     548:	00745f6e 	rsbseq	r5, r4, lr, ror #30
				(*(__pi_utims [3]))--;
     54c:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
	if (__pi_systat.ledsts) {
     550:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
     554:	6b615778 	blvs	185633c <__ccfg+0x1836394>
		if (__pi_systat.ledblc++ == 0) {
     558:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
     55c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
			if (__pi_systat.ledblk) {
     560:	4e4f4100 	dvfmie	f4, f7, f0
     564:	50435557 	subpl	r5, r3, r7, asr r5
     568:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     570:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
				if (__pi_systat.ledsts & 0x2)
     574:	41550074 	cmpmi	r5, r4, ror r0
     578:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     57c:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
				if (__pi_systat.ledsts & 0x4)
     580:	73007261 	movwvc	r7, #609	; 0x261
				__pi_systat.ledblk = 0;
     584:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     588:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
			if (__pi_systat.fstblk)
     58c:	41007469 	tstmi	r0, r9, ror #8
     590:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
				__pi_systat.ledblc = 200;
     594:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
		cli_tim;
     59c:	616e456e 	cmnvs	lr, lr, ror #10
		__pi_new += setdel;
     5a0:	00656c62 	rsbeq	r6, r5, r2, ror #24
     5a4:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
		setdel = 0;
     5a8:	50006c65 	andpl	r6, r0, r5, ror #24
		RISE_N_SHINE;
     5ac:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
		__pi_new += setdel;
     5b0:	6f507563 	svcvs	0x00507563
		RISE_N_SHINE;
     5b4:	4f726577 	svcmi	0x00726577
     5b8:	5f006666 	svcpl	0x00006666
		aux_timer_inactive = 1;
     5bc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     5c0:	50534d5f 	subspl	r4, r3, pc, asr sp
				if (__pi_systat.ledsts & 0x1)
     5c4:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     5cc:	5f00745f 	svcpl	0x0000745f
				if (__pi_systat.ledsts & 0x2)
     5d0:	5f69705f 	svcpl	0x0069705f
     5d4:	6f646e6f 	svcvs	0x00646e6f
     5d8:	6e69616d 	powvsez	f6, f1, #5.0
				if (__pi_systat.ledsts & 0x8)
     5dc:	52415500 	subpl	r5, r1, #0, 10
				__pi_systat.ledblk = 1;
     5e0:	46774854 			; <UNDEFINED> instruction: 0x46774854
     5e4:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
		if (aux_timer_inactive) {
     5e8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
			cli_aux;
     5ec:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     5f0:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     5f4:	5f5f0065 	svcpl	0x005f0065
     5f8:	00424350 	subeq	r4, r2, r0, asr r3
     5fc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     600:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     604:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
     608:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
     60c:	4f410065 	svcmi	0x00410065
     610:	434f494e 	movtmi	r4, #63822	; 0xf94e
word tci_update_delay_ticks (Boolean force) {
     614:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
	cli_tim;
     618:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     61c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
	if (setdel) {
     620:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     62c:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
     630:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     634:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
				AON_RTC_O_CH0CMP)) - gettav ());
     638:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
	return NO;
     63c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
			setdel = 0;
     640:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
     648:	6f6c436c 	svcvs	0x006c436c
}
     64c:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
		sti_tim;
     650:	52500074 	subspl	r0, r0, #116	; 0x74
		return YES;
     654:	61434d43 	cmpvs	r3, r3, asr #26
     658:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
     65c:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
     660:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	UARTDisable (UART0_BASE);
     668:	5000656c 	andpl	r6, r0, ip, ror #10
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     66c:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
	UARTDisable (UART0_BASE);
     670:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
	UARTConfigSetExpClk (UART0_BASE,
     674:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     678:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
     67c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     680:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     688:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     68c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     694:	73747075 	cmnvc	r4, #117	; 0x75
     698:	52415500 	subpl	r5, r1, #0, 10
	urates [0] = rate;
     69c:	46494654 			; <UNDEFINED> instruction: 0x46494654
}
     6a0:	616e454f 	cmnvs	lr, pc, asr #10
     6a4:	00656c62 	rsbeq	r6, r5, r2, ror #24
     6a8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     6ac:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
     6b0:	7367616c 	cmnvc	r7, #108, 2
     6b4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	61755f69 	cmnvs	r5, r9, ror #30
     6bc:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
     6c0:	61727465 	cmnvs	r2, r5, ror #8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	50006574 	andpl	r6, r0, r4, ror r5
     6c8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     6d0:	72464f49 	subvc	r4, r6, #292	; 0x124
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     6d8:	61736944 	cmnvs	r3, r4, asr #18
     6dc:	00656c62 	rsbeq	r6, r5, r2, ror #24
     6e0:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     6e4:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     6e8:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
     6ec:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	switch (operation) {
     6f0:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     6f8:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     6fc:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
     700:	6f6d7265 	svcvs	0x006d7265
     704:	6f006564 	svcvs	0x00006564
				*buf++ = uart_a_read;
     708:	61726570 	cmnvs	r2, r0, ror r5
     70c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			while (len && uart_a_char_available) {
     710:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
     714:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     718:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
			if (len != operation) {
     71c:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
}
     720:	00657669 	rsbeq	r7, r5, r9, ror #12
     724:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
			uart_a_disable_int;
     728:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
			if (uart_a_char_available) {
     72c:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
				*buf++ = uart_a_read;
     730:	5f6f6465 	svcpl	0x006f6465
			uart_a_disable_int;
     734:	5f007874 	svcpl	0x00007874
     738:	5f69705f 	svcpl	0x0069705f
			if (uart_a_char_available) {
     73c:	00646c6f 	rsbeq	r6, r4, pc, ror #24
     740:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				uart_a_enable_int;
     744:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
     748:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
				goto Redo_rx;
     74c:	33697500 	cmncc	r9, #0, 10
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	73614232 	cmnvc	r1, #536870915	; 0x20000003
     754:	5f5f0065 	svcpl	0x005f0065
			return -2;
     758:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
     75c:	615f6966 	cmpvs	pc, r6, ror #18
				uart_a_write (*buf);
     760:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     764:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
			while (len && uart_a_room_in_tx) {
     768:	4e4f4100 	dvfmie	f4, f7, f0
     76c:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
     770:	6156636e 	cmpvs	r6, lr, ror #6
			if (len != operation) {
     774:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
			uart_a_disable_int;
     778:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
     77c:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
			if (uart_a_room_in_tx) {
     780:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
     784:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
				uart_a_enable_int;
     788:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     78c:	61755f74 	cmnvs	r5, r4, ror pc
				*buf++ = uart_a_read;
     790:	41007472 	tstmi	r0, r2, ror r4
			if (uart_a_room_in_tx) {
     794:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
				uart_a_write (*buf);
     798:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
     79c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7a4:	61726170 	cmnvs	r2, r0, ror r1
			uart_a_enable_int;
     7a8:	6374006d 	cmnvs	r4, #109	; 0x6d
     7ac:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     7b0:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
			return 0;
     7b4:	5f79616c 	svcpl	0x0079616c
			if (len == UART_CNTRL_SETRATE) {
     7b8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	5f5f0072 	svcpl	0x005f0072
     7c0:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
     7c4:	61656c65 	cmnvs	r5, r5, ror #24
				syserror (EREQPAR, "uar");
     7c8:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
			syserror (ENOOPER, "uai");
     7cc:	006f6465 	rsbeq	r6, pc, r5, ror #8
			if (len == UART_CNTRL_GETRATE) {
     7d0:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
				return 1;
     7d4:	5f74696e 	svcpl	0x0074696e
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			syserror (ENOOPER, "uai");
     7dc:	726f6600 	rsbvc	r6, pc, #0, 12
     7e0:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
     7e4:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
     7e8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     7ec:	50470065 	subpl	r0, r7, r5, rrx
     7f0:	635f4f49 	cmpvs	pc, #292	; 0x124
     7f4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     7f8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     7fc:	6f694474 	svcvs	0x00694474
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	625f5f00 	subsvs	r5, pc, #0, 30
void UART0IntHandler () {
     804:	6f747475 	svcvs	0x00747475
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     80c:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
     810:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
     814:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     818:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 820 <UART0IntHandler+0x20>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     820:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
		RISE_N_SHINE;
     824:	53007172 	movwpl	r7, #370	; 0x172
     828:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
		i_trigger (devevent (UART_A, READ));
     82c:	6f416c72 	svcvs	0x00416c72
     830:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
     834:	5f5f0063 	svcpl	0x005f0063
     838:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     83c:	6b636174 	blvs	18d8e14 <__ccfg+0x18b8e6c>
     840:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     844:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     848:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
     84c:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
     850:	61696c69 	cmnvs	r9, r9, ror #24
     854:	745f7972 	ldrbvc	r7, [pc], #-2418	; 85c <UART0IntHandler+0x5c>
     858:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     860:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     864:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
		i_trigger (devevent (UART_A, WRITE));
     868:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	50470071 	subpl	r0, r7, r1, ror r0
     870:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
		RISE_N_SHINE;
     874:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     878:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     87c:	52415500 	subpl	r5, r1, #0, 10
		i_trigger (devevent (UART_A, WRITE));
     880:	46494654 			; <UNDEFINED> instruction: 0x46494654
     884:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
     888:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
     88c:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
     890:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
     894:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
     898:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     89c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     8a0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     8a4:	00766174 	rsbseq	r6, r6, r4, ror r1
     8a8:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
}
     8ac:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
     8b0:	616c6564 	cmnvs	ip, r4, ror #10
     8b4:	4f410079 	svcmi	0x00410079
     8b8:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     8bc:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
void __buttons_setirq (int val) {
     8c0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	5f00656c 	svcpl	0x0000656c
     8c8:	5f69705f 	svcpl	0x0069705f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	0077656e 	rsbseq	r6, r7, lr, ror #10
     8d0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     8d4:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
     8e0:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
     8e4:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     8e8:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     8ec:	4100656c 	tstmi	r0, ip, ror #10
     8f0:	61424e4f 	cmpvs	r2, pc, asr #28
}
     8f4:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     8f8:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
     8fc:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
     900:	61746c6f 	cmnvs	r4, pc, ror #24
void __pinlist_setirq (int val) {
     904:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
	for (i = 0; i < N_PINLIST; i++) {
     908:	6f690074 	svcvs	0x00690074
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	5f716572 	svcpl	0x00716572
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
	for (i = 0; i < N_PINLIST; i++) {
     914:	5f00615f 	svcpl	0x0000615f
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	5f69705f 	svcpl	0x0069705f
     91c:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     920:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
     924:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     928:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
	for (i = 0; i < N_PINLIST; i++) {
     92c:	5f007469 	svcpl	0x00007469
}
     930:	5f69705f 	svcpl	0x0069705f
     934:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
     938:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     93c:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
void GPIOIntHandler () {
     940:	006d756e 	rsbeq	r7, sp, lr, ror #10
if (buttons_int) {
     944:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 890 <UART0IntHandler+0x90>
     948:	616d2f65 	cmnvs	sp, r5, ror #30
	buttons_disable ();
     94c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     950:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	i_trigger ((aword)&__button_list);
     954:	706f746b 	rsbvc	r7, pc, fp, ror #8
     958:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     95c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     960:	4349502f 	movtmi	r5, #36911	; 0x902f
     964:	502f534f 	eorpl	r5, pc, pc, asr #6
     968:	534f6369 	movtpl	r6, #62313	; 0xf369
     96c:	3143432f 	cmpcc	r3, pc, lsr #6
     970:	2f585833 	svccs	0x00585833
     974:	6e69616d 	powvsez	f6, f1, #5.0
     978:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
     97c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	RISE_N_SHINE;
     980:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     984:	6142746e 	cmpvs	r2, lr, ror #8
     988:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
if (pin_sensor_int) {
     98c:	41550079 	cmpmi	r5, r9, ror r0
     990:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
	i_trigger ((aword)(&__input_pins));
     994:	616e4574 	smcvs	58452	; 0xe454
     998:	00656c62 	rsbeq	r6, r5, r2, ror #24
     99c:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     9a0:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
     9a4:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
     9a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9ac:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
     9b0:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     9b4:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     9b8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     9bc:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
	__pinsen_disable_and_clear;
     9c0:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
	RISE_N_SHINE;
     9c4:	00746c61 	rsbseq	r6, r4, r1, ror #24
     9c8:	4f706f74 	svcmi	0x00706f74
     9cc:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
}
     9d0:	6174536e 	cmnvs	r4, lr, ror #6
     9d4:	5f006b63 	svcpl	0x00006b63
     9d8:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
     9dc:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
     9e0:	30545241 	subscc	r5, r4, r1, asr #4
void system_init () {
     9e4:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ec:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	53706565 	cmnpl	r0, #423624704	; 0x19400000
     9f4:	7065656c 	rsbvc	r6, r5, ip, ror #10
     9f8:	726f7000 	rsbvc	r7, pc, #0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	6f635f74 	svcvs	0x00635f74
     a00:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     a08:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
     a0c:	5f657461 	svcpl	0x00657461
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	616c6564 	cmnvs	ip, r4, ror #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a14:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a18:	00736b63 	rsbseq	r6, r3, r3, ror #22
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1c:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a20:	00657275 	rsbeq	r7, r5, r5, ror r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a24:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
		pin = (port_confs [i] >> 19) & 0x1f;
     a30:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a34:	5f007665 	svcpl	0x00007665
     a38:	5f69705f 	svcpl	0x0069705f
     a3c:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
     a40:	5f007970 	svcpl	0x00007970
		if (port_confs [i] & 0x80)
     a44:	5f69705f 	svcpl	0x0069705f
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     a4c:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
		if (port_confs [i] & 0x40)
     a50:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	66710074 			; <UNDEFINED> instruction: 0x66710074
     a58:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5c:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	5f5f0071 	svcpl	0x005f0071
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a64:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
	all_leds_blink;
     a68:	006b726f 	rsbeq	r7, fp, pc, ror #4
     a6c:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a70:	6f706d00 	svcvs	0x00706d00
     a74:	00736c6f 	rsbseq	r6, r3, pc, ror #24
     a78:	61765f5f 	cmnvs	r6, pc, asr pc
     a7c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     a80:	74750074 	ldrbtvc	r0, [r5], #-116	; 0xffffff8c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a84:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     a88:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     a8c:	52415500 	subpl	r5, r1, #0, 10
     a90:	73754254 	cmnvc	r5, #84, 4	; 0x40000005
     a94:	5f5f0079 	svcpl	0x005f0079
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 9c0 <GPIOIntHandler+0x80>	; <UNPREDICTABLE>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	6f6c6c61 	svcvs	0x006c6c61
     aa0:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
	IntEnable (INT_AON_RTC_COMB);
     aa4:	2f007469 	svccs	0x00007469
     aa8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     aac:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	__pi_malloc_init ();
     ab0:	2f6e6974 	svccs	0x006e6974
	IntEnable (INT_AON_GPIO_EDGE);
     ab4:	6b736544 	blvs	1cd9fcc <__ccfg+0x1cba024>
     ab8:	2f706f74 	svccs	0x00706f74
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	4f534c4f 	svcmi	0x00534c4f
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	2f54454e 	svccs	0x0054454e
     ac4:	4f434950 	svcmi	0x00434950
     ac8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     acc:	2f534f63 	svccs	0x00534f63
     ad0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	6b2f6c65 	blvs	bdbc70 <__ccfg+0xbbbcc8>
     ad8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     adc:	00632e6c 	rsbeq	r2, r3, ip, ror #28
	urates [0] = UART_RATE / 100;
     ae0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     ae4:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
	reinit_uart ();
     ae8:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
	EXTRA_INITIALIZERS;
     aec:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     af0:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af4:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     af8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     afc:	616d5f69 	cmnvs	sp, r9, ror #30
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b00:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
     b04:	72630065 	rsbvc	r0, r3, #101	; 0x65
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b08:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     b0c:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
			devinit [i] . init (devinit [i] . param);
     b10:	006b6863 	rsbeq	r6, fp, r3, ror #16
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
     b18:	70006565 	andvc	r6, r0, r5, ror #10
     b1c:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
	IntEnable (INT_UART0_COMB);
     b20:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
     b24:	006e656c 	rsbeq	r6, lr, ip, ror #10
}
     b28:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	tci_run_auxiliary_timer ();
     b2c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
		diag ("");
     b30:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
     b34:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	76656464 	strbtvc	r6, [r5], -r4, ror #8
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
		diag ("Leftover RAM: %d bytes",
     b40:	64697000 	strbtvs	r7, [r9], #-0
     b44:	00726576 	rsbseq	r6, r2, r6, ror r5
     b48:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
     b4c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b50:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     b54:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
     b58:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
     b5c:	5f746e65 	svcpl	0x00746e65
     b60:	5f5f0074 	svcpl	0x005f0074
     b64:	63756e67 	cmnvs	r5, #1648	; 0x670
     b68:	5f61765f 	svcpl	0x0061765f
     b6c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     b70:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
     b74:	00656572 	rsbeq	r6, r5, r2, ror r5
     b78:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
     b7c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     b80:	00797274 	rsbseq	r7, r9, r4, ror r2
     b84:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
     b88:	73656d00 	cmnvc	r5, #0, 26
     b8c:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
     b90:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     b94:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b98:	61625f69 	cmnvs	r2, r9, ror #30
__attribute__ ((noreturn)) void __pi_release () {
     b9c:	61747364 	cmnvs	r4, r4, ror #6
     ba0:	5f006574 	svcpl	0x00006574
     ba4:	5f69705f 	svcpl	0x0069705f
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
	check_stack_overflow;
     bac:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     bb0:	61775f69 	cmnvs	r7, r9, ror #30
     bb4:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
	update_n_wake (MAX_WORD, NO);
     bb8:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
     bbc:	6b00646e 	blvs	19d7c <__exidx_end+0x16ff0>
     bc0:	616c6c69 	cmnvs	ip, r9, ror #24
	for_all_tasks (__pi_curr) {
     bc4:	5f006c6c 	svcpl	0x00006c6c
     bc8:	5f69705f 	svcpl	0x0069705f
     bcc:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	00656572 	rsbeq	r6, r5, r2, ror r5
	__SLEEP;
     bd4:	6f6f425f 	svcvs	0x006f425f
     bd8:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
     bdc:	006b6e75 	rsbeq	r6, fp, r5, ror lr
     be0:	61647075 	smcvs	18181	; 0x4705
	system_event_count ++;
     be4:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
     be8:	6b61775f 	blvs	185e96c <__ccfg+0x183e9c4>
	switch (__pi_systat.effpdm) {
     bec:	5f5f0065 	svcpl	0x005f0065
     bf0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     bf4:	00646565 	rsbeq	r6, r4, r5, ror #10
     bf8:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
			__WFI ();
     bfc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     c00:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
     c04:	5f5f0074 	svcpl	0x005f0074
	check_stack_overflow;
     c08:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; b30 <system_init+0x14c>	; <UNPREDICTABLE>
     c0c:	70636d65 	rsbvc	r6, r3, r5, ror #26
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c10:	67640079 			; <UNDEFINED> instruction: 0x67640079
     c14:	0074756f 	rsbseq	r7, r4, pc, ror #10
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	70615f5f 	rsbvc	r5, r1, pc, asr pc
			goto Redo;
     c1c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	for_all_tasks (__pi_curr) {
     c20:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c28:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     c2c:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	666e006e 	strbtvs	r0, [lr], -lr, rrx
     c34:	006c6961 	rsbeq	r6, ip, r1, ror #18
     c38:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     c40:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
     c48:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			__WFI ();
     c4c:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c50:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
     c54:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
     c58:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5c:	70636e72 	rsbvc	r6, r3, r2, ror lr
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	5f5f0079 	svcpl	0x005f0079
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	6a5f6970 	bvs	17db22c <__ccfg+0x17bb284>
     c68:	006e696f 	rsbeq	r6, lr, pc, ror #18
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6c:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     c70:	645f7265 	ldrbvs	r7, [pc], #-613	; c78 <__pi_release+0xdc>
     c74:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	5f5f0065 	svcpl	0x005f0065
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     c80:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
     c84:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
     c88:	715f7663 	cmpvc	pc, r3, ror #12
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     c90:	65727000 	ldrbvs	r7, [r2, #-0]!
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	5f5f0076 	svcpl	0x005f0076
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	5f766374 	svcpl	0x00766374
     c9c:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
     ca0:	00745f72 	rsbseq	r5, r4, r2, ror pc
     ca4:	70766374 	rsbsvc	r6, r6, r4, ror r3
     ca8:	745f7968 	ldrbvc	r7, [pc], #-2408	; cb0 <__pi_release+0x114>
			SysCtrlSetRechargeBeforePowerDown
     cac:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cb0:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     cb8:	2f006c6f 	svccs	0x00006c6f
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     cc0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     cc4:	2f6e6974 	svccs	0x006e6974
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc8:	6b736544 	blvs	1cda1e0 <__ccfg+0x1cba238>
     ccc:	2f706f74 	svccs	0x00706f74
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	4f534c4f 	svcmi	0x00534c4f
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	2f54454e 	svccs	0x0054454e
     cd8:	4f434950 	svcmi	0x00434950
     cdc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ce0:	2f534f63 	svccs	0x00534f63
			while (!(AONWUCPowerStatusGet () &
     ce4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
     cec:	2f497465 	svccs	0x00497465
     cf0:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	63740063 	cmnvs	r4, #99	; 0x63
     cf8:	645f7076 	ldrbvs	r7, [pc], #-118	; d00 <__pi_release+0x164>
     cfc:	6f707369 	svcvs	0x00707369
     d00:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     d08:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	656e0067 	strbvs	r0, [lr, #-103]!	; 0xffffff99
     d10:	63007478 	movwvs	r7, #1144	; 0x478
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
			reinit_uart ();
     d18:	745f6e75 	ldrbvc	r6, [pc], #-3701	; d20 <__pi_release+0x184>
     d1c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d20:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
}
     d24:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     d2c:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	63740074 	cmnvs	r4, #116	; 0x74
     d34:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
     d38:	74006f66 	strvc	r6, [r0], #-3942	; 0xfffff09a
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	6f5f7663 	svcvs	0x005f7663
     d40:	006e6570 	rsbeq	r6, lr, r0, ror r5
     d44:	5f766374 	svcpl	0x00766374
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d48:	706f7264 	rsbvc	r7, pc, r4, ror #4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
     d58:	00797470 	rsbseq	r7, r9, r0, ror r4
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d60:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 400 <mdelay+0x24>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d64:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     d68:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d6c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
     d70:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
			PRCMPowerDomainOff (
     d74:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
     d78:	73657565 	cmnvc	r5, #423624704	; 0x19400000
	__SLEEP;
     d7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; d84 <__pi_release+0x1e8>
     d80:	715f7663 	cmpvc	pc, r3, ror #12
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
	goto Redo;
     d88:	5f00735f 	svcpl	0x0000735f
     d8c:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
     d90:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
     d94:	745f6d65 	ldrbvc	r6, [pc], #-3429	; d9c <__pi_release+0x200>
     d98:	745f5f00 	ldrbvc	r5, [pc], #-3840	; da0 <__pi_release+0x204>
     d9c:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     da0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     da4:	00745f6b 	rsbseq	r5, r4, fp, ror #30
     da8:	70747461 	rsbsvc	r7, r4, r1, ror #8
     dac:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
     db0:	00746e65 	rsbseq	r6, r4, r5, ror #28
     db4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
     db8:	72450065 	subvc	r0, r5, #101	; 0x65
     dbc:	0074725f 	rsbseq	r7, r4, pc, asr r2
     dc0:	5f766374 	svcpl	0x00766374
     dc4:	006f6c63 	rsbeq	r6, pc, r3, ror #24
     dc8:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     dcc:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
     dd0:	0073726f 	rsbseq	r7, r3, pc, ror #4
     dd4:	5f766374 	svcpl	0x00766374
     dd8:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
     ddc:	63740065 	cmnvs	r4, #101	; 0x65
     de0:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
     de4:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
     de8:	6f5f7663 	svcvs	0x005f7663
     dec:	74007475 	strvc	r7, [r0], #-1141	; 0xfffffb8b
     df0:	5f707663 	svcpl	0x00707663
int main (void) {
     df4:	0077656e 	rsbseq	r6, r7, lr, ror #10
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
     dfc:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	745f7663 	ldrbvc	r7, [pc], #-1635	; e08 <main+0x14>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	7000746d 	andvc	r7, r0, sp, ror #8
	system_init ();
     e08:	00737274 	rsbseq	r7, r3, r4, ror r2
	tcv_init ();
     e0c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e10:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     e14:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	706e775f 	rsbvc	r7, lr, pc, asr r7
     e1c:	63740073 	cmnvs	r4, #115	; 0x73
     e20:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e24:	00657469 	rsbeq	r7, r5, r9, ror #8
     e28:	5f766374 	svcpl	0x00766374
	delay (16, 0);
     e2c:	00766372 	rsbseq	r6, r6, r2, ror r3
     e30:	5f766374 	svcpl	0x00766374
     e34:	736f6c63 	cmnvc	pc, #25344	; 0x6300
	__pi_release ();
     e38:	5f5f0065 	svcpl	0x005f0065
     e3c:	5f766374 	svcpl	0x00766374
     e40:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
     e44:	5f637365 	svcpl	0x00637365
     e48:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
     e4c:	70007379 	andvc	r7, r0, r9, ror r3
     e50:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
static void killev (__pi_pcb_t *pid) {
     e54:	006c6163 	rsbeq	r6, ip, r3, ror #2
	wfun = (aword)(pid->code);
     e58:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
	for_all_tasks (i) {
     e5c:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
		for (j = 0; j < nevents (i); j++) {
     e60:	00646575 	rsbeq	r6, r4, r5, ror r5
     e64:	5f766374 	svcpl	0x00766374
     e68:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
			    || i->Events [j] . Event == wfun
     e6c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		for (j = 0; j < nevents (i); j++) {
     e70:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
			if (i->Events [j] . Event == (aword)pid
     e74:	63740074 	cmnvs	r4, #116	; 0x74
     e78:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
     e7c:	6573006d 	ldrbvs	r0, [r3, #-109]!	; 0xffffff93
				wakeupev (i, j);
     e80:	6f697373 	svcvs	0x00697373
     e84:	6374006e 	cmnvs	r4, #110	; 0x6e
	for_all_tasks (i) {
     e88:	635f7076 	cmpvs	pc, #118	; 0x76
}
     e8c:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
static void qfree (aword *ch) {
     e94:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	cc = (aword*)(mpools + MA_NP);
     e9c:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
	m_setnextp (ch, chunk);
     ea0:	63740064 	cmnvs	r4, #100	; 0x64
	m_setnextp (cc, ch);
     ea4:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
}
     ea8:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     eb0:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
     eb4:	006e7265 	rsbeq	r7, lr, r5, ror #4
			m_setnextp (cc, m_nextp (chunk));
     eb8:	5f766374 	svcpl	0x00766374
			m_size (chunk) += m_hdrlen + m_size (ch);
     ebc:	0065706f 	rsbeq	r7, r5, pc, rrx
     ec0:	5f766374 	svcpl	0x00766374
     ec4:	00746d78 	rsbseq	r6, r4, r8, ror sp
     ec8:	61766374 	cmnvs	r6, r4, ror r3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	745f7064 	ldrbvc	r7, [pc], #-100	; ed4 <qfree+0x44>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     ed4:	756c705f 	strbvc	r7, [ip, #-95]!	; 0xffffffa1
     ed8:	65680067 	strbvs	r0, [r8, #-103]!	; 0xffffff99
			m_setnextp (cc, m_nextp (chunk));
     edc:	61006461 	tstvs	r0, r1, ror #8
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
     ee4:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
     ee8:	5f5f0073 	svcpl	0x005f0073
     eec:	5f766374 	svcpl	0x00766374
     ef0:	61656871 	smcvs	22145	; 0x5681
     ef4:	00745f64 	rsbseq	r5, r4, r4, ror #30
			if (m_size (chunk) >= m_size (ch))
     ef8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     efc:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
     f00:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
		chunk = m_nextp (chunk))
     f04:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
     f08:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
     f0c:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f10:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
	diag_wait (a);
     f14:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	diag_wchar (c, a);
     f18:	63725f79 	cmnvs	r2, #484	; 0x1e4
     f1c:	71620076 	smcvc	8198	; 0x2006
}
     f20:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     f24:	756c7000 	strbvc	r7, [ip, #-0]!
	syserror (ESTATE, "state");
     f28:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
     f2c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f34 <__pi_badstate+0xc>
     f30:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     f34:	636f6c62 	cmnvs	pc, #25088	; 0x6200
void update_n_wake (word min, Boolean force) {
     f38:	00735f6b 	rsbseq	r5, r3, fp, ror #30
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
     f40:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
     f44:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	6f635f70 	svcvs	0x00635f70
     f4c:	6f72746e 	svcvs	0x0072746e
     f50:	655f006c 	ldrbvs	r0, [pc, #-108]	; eec <qfree+0x5c>
     f54:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     f58:	645f006b 	ldrbvs	r0, [pc], #-107	; f60 <update_n_wake+0x28>
     f5c:	00617461 	rsbeq	r7, r1, r1, ror #8
     f60:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
     f64:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
     f68:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
     f6c:	5349746c 	movtpl	r7, #37996	; 0x946c
     f70:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
     f74:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f78:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
		for_all_tasks (i) {
     f7c:	61485253 	cmpvs	r8, r3, asr r2
	__pi_mintk = znew + min;
     f80:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f84:	655f0072 	ldrbvs	r0, [pc, #-114]	; f1a <dgout+0xa>
			if (!twaiting (i))
     f88:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     f8c:	62655f00 	rsbvs	r5, r5, #0, 30
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	2f007373 	svccs	0x00007373
     f94:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     f98:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     f9c:	2f6e6974 	svccs	0x006e6974
     fa0:	6b736544 	blvs	1cda4b8 <__ccfg+0x1cba510>
     fa4:	2f706f74 	svccs	0x00706f74
     fa8:	4f534c4f 	svcmi	0x00534c4f
     fac:	2f54454e 	svccs	0x0054454e
     fb0:	4f434950 	svcmi	0x00434950
     fb4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     fb8:	2f534f63 	svccs	0x00534f63
     fbc:	33314343 	teqcc	r1, #201326593	; 0xc000001
				wakeuptm (i);
     fc0:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
     fc4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
		for_all_tasks (i) {
     fc8:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
				d = i->Timer - znew;
     fcc:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     fd0:	73625f00 	cmnvc	r2, #0, 30
     fd4:	655f0073 	ldrbvs	r0, [pc, #-115]	; f69 <update_n_wake+0x31>
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	61746164 	cmnvs	r4, r4, ror #2
     fdc:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
     fe0:	61666544 	cmnvs	r6, r4, asr #10
	__pi_old = znew;
     fe4:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
}
     fe8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
	TCI_RUN_DELAY_TIMER;
     fec:	67007265 	strvs	r7, [r0, -r5, ror #4]
}
     ff0:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
     ff4:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
     ff8:	0073726f 	rsbseq	r7, r3, pc, ror #4
     ffc:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    1000:	73654432 	cmnvc	r5, #838860800	; 0x32000000
void proceed (word state) {
    1004:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
	prcdstate (__pi_curr, state);
    1008:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    100c:	43005253 	movwmi	r5, #595	; 0x253
	release;
    1010:	5f474643 	svcpl	0x00474643
    1014:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
void __pi_wait (aword event, word state) {
    1018:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
	sint j = nevents (__pi_curr);
    101c:	00305f44 	eorseq	r5, r0, r4, asr #30
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1024:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1028:	4f4c5f54 	svcmi	0x004c5f54
		syserror (ENEVENTS, "sw");
    102c:	315f4441 	cmpcc	pc, r1, asr #8
    1030:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	setestate (__pi_curr->Events [j], state, event);
    1034:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
	incwait (__pi_curr);
    1038:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	setestate (__pi_curr->Events [j], state, event);
    103c:	00474946 	subeq	r4, r7, r6, asr #18
}
    1040:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1044:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1048:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
void __pi_trigger (aword event) {
    104c:	00544553 	subseq	r4, r4, r3, asr r5
	for_all_tasks (i) {
    1050:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		for (j = 0; j < nevents (i); j++) {
    1054:	444f4d5f 	strbmi	r4, [pc], #-3423	; 105c <__pi_trigger+0x10>
    1058:	4f435f45 	svcmi	0x00435f45
    105c:	5f00464e 	svcpl	0x0000464e
    1060:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
			if (i->Events [j] . Event == event) {
    1064:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
    1068:	2f656d6f 	svccs	0x00656d6f
    106c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
				wakeupev (i, j);
    1070:	442f6e69 	strtmi	r6, [pc], #-3689	; 1078 <__pi_trigger+0x2c>
    1074:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	for_all_tasks (i) {
    1078:	4f2f706f 	svcmi	0x002f706f
}
    107c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
aword __pi_join (aword pid, word st) {
    1080:	502f5445 	eorpl	r5, pc, r5, asr #8
	for_all_tasks (i) {
    1084:	534f4349 	movtpl	r4, #62281	; 0xf349
    1088:	6369502f 	cmnvs	r9, #47	; 0x2f
	return 0;
    108c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		if ((aword)i == pid) {
    1090:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
			__pi_wait (pid, st);
    1094:	63632f58 	cmnvs	r3, #88, 30	; 0x160
}
    1098:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
	for_all_tasks (i) {
    109c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10a0:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
void delay (word d, word state) {
    10a4:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
	settstate (__pi_curr, state);
    10a8:	445f444e 	ldrbmi	r4, [pc], #-1102	; 10b0 <delay+0xc>
    10ac:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
    10b0:	5347414c 	movtpl	r4, #29004	; 0x714c
    10b4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	update_n_wake (d, YES);
    10b8:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    10bc:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fb0 <update_n_wake+0x78>
	__pi_curr->Timer = __pi_old + d;
    10c0:	305f4341 	subscc	r4, pc, r1, asr #6
    10c4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	inctimer (__pi_curr);
    10c8:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    10cc:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fc0 <update_n_wake+0x88>
    10d0:	315f4341 	cmpcc	pc, r1, asr #6
}
    10d4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10d8:	4f4d5f47 	svcmi	0x004d5f47
	if (fun == NULL)
    10dc:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
		return (int) __pi_curr;
    10e0:	5f464e4f 	svcpl	0x00464e4f
    10e4:	43430031 	movtmi	r0, #12337	; 0x3031
	for_all_tasks (i)
    10e8:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
}
    10ec:	5f474643 	svcpl	0x00474643
		if (i->code == fun)
    10f0:	5f504154 	svcpl	0x00504154
	for_all_tasks (i)
    10f4:	5f504144 	svcpl	0x00504144
    10f8:	43430030 	movtmi	r0, #12336	; 0x3030
    10fc:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
int __pi_strlen (const char *s) {
    1100:	5f474643 	svcpl	0x00474643
	for (i = 0; *(s+i) != '\0'; i++);
    1104:	5f504154 	svcpl	0x00504154
}
    1108:	5f504144 	svcpl	0x00504144
	for (i = 0; *(s+i) != '\0'; i++);
    110c:	63630031 	cmnvs	r3, #49	; 0x31
	while (n--)
    1110:	745f6766 	ldrbvc	r6, [pc], #-1894	; 1118 <__pi_memcpy+0xa>
    1114:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		*dest++ = *src++;
    1118:	43435f47 	movtmi	r5, #16199	; 0x3f47
    111c:	505f4746 	subspl	r4, pc, r6, asr #14
    1120:	5f544f52 	svcpl	0x00544f52
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	5f373231 	svcpl	0x00373231
		syserror (EREQPAR, "addv");
    1128:	43003639 	movwmi	r3, #1593	; 0x639
		syserror (ERESOURCE, "addv");
    112c:	5f474643 	svcpl	0x00474643
	if (ioreq [loc] != NULL)
    1130:	53415245 	movtpl	r5, #4677	; 0x1245
    1134:	4f435f45 	svcmi	0x00435f45
		syserror (ERESOURCE, "addv");
    1138:	4300464e 	movwmi	r4, #1614	; 0x64e
	ioreq [loc] = rf;
    113c:	5f474643 	svcpl	0x00474643
}
    1140:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1144:	4f52505f 	svcmi	0x0052505f
sint io (word retry, word dev, word operation, char *buf, word len) {
    1148:	31335f54 	teqcc	r3, r4, asr pc
    114c:	4300305f 	movwmi	r3, #95	; 0x5f
    1150:	5f474643 	svcpl	0x00474643
    1154:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1158:	41565f45 	cmpmi	r6, r5, asr #30
    115c:	5f44494c 	svcpl	0x0044494c
    1160:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
		syserror (ENODEVICE, "io");
    1164:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1168:	52465f47 	subpl	r5, r6, #284	; 0x11c
	if (len == 0)
    116c:	4f5f5145 	svcmi	0x005f5145
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
    1174:	43430054 	movtmi	r0, #12372	; 0x3054
	if (ret >= 0)
    1178:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	if (ret == -1) {
    117c:	5f474643 	svcpl	0x00474643
    1180:	544f5250 	strbpl	r5, [pc], #-592	; 1188 <io+0x40>
		if (retry == WNONE)
    1184:	5f33365f 	svcpl	0x0033365f
		iowait (dev, operation, retry);
    1188:	43003233 	movwmi	r3, #563	; 0x233
    118c:	5f474643 	svcpl	0x00474643
    1190:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
			release;
    1194:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
	if (ret == -2) {
    1198:	4300305f 	movwmi	r3, #95	; 0x5f
		if (retry != WNONE) {
    119c:	5f474643 	svcpl	0x00474643
    11a0:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
			iowait (dev, operation, retry);
    11a4:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    11a8:	4300315f 	movwmi	r3, #351	; 0x15f
			(ioreq [dev]) (NONE, buf, len);
    11ac:	5f474643 	svcpl	0x00474643
    11b0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11b4:	4f52505f 	svcmi	0x0052505f
		(ioreq [dev]) (NONE, buf, len);
    11b8:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
    11bc:	0034365f 	eorseq	r3, r4, pc, asr r6
    11c0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    11c4:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
	if (retry != WNONE) {
    11c8:	5f464c5f 	svcpl	0x00464c5f
		delay (-ret - 2, retry);
    11cc:	004b4c43 	subeq	r4, fp, r3, asr #24
    11d0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11d4:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    11d8:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
		release;
    11dc:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
    11e0:	534e4f49 	movtpl	r4, #61257	; 0xef49
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11e8:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
    11ec:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    11f0:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
    11f4:	70006b6e 	andvc	r6, r0, lr, ror #22
		syserror (ERESOURCE, "mal1");
    11f8:	735f6e69 	cmpvc	pc, #1680	; 0x690
    11fc:	6f736e65 	svcvs	0x00736e65
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1200:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
    1204:	70006461 	andvc	r6, r0, r1, ror #8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1208:	735f6e69 	cmpvc	pc, #1680	; 0x690
	m_size (mpools [0]) = mlen - m_hdrlen;
    120c:	6f736e65 	svcvs	0x00736e65
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1210:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1214:	2f007469 	svccs	0x00007469
    1218:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    121c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1220:	2f6e6974 	svccs	0x006e6974
    1224:	6b736544 	blvs	1cda73c <__ccfg+0x1cba794>
    1228:	2f706f74 	svccs	0x00706f74
    122c:	4f534c4f 	svcmi	0x00534c4f
    1230:	2f54454e 	svccs	0x0054454e
void __pi_free (aword *ch) {
    1234:	4f434950 	svcmi	0x00434950
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1238:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    123c:	2f534f63 	svccs	0x00534f63
		syserror (EMALLOC, "malg");
    1240:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1244:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
	mcfree [MA_NP] += m_size (ch);
    1248:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		m_size (ch) ^= MALLOC_UMASK;
    124c:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1250:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
	mcfree [MA_NP] += m_size (ch);
    1254:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
	QFREE;
    1258:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
	if (mevent [MA_NP] . nwait) {
    125c:	006d7265 	rsbeq	r7, sp, r5, ror #4
    1260:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
		trigger ((aword)(&(mevent [MA_NP])));
    1264:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		mevent [MA_NP] . nwait --;
    1268:	6f626544 	svcvs	0x00626544
}
    126c:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
    1270:	6f682f00 	svcvs	0x00682f00
    1274:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 10c8 <delay+0x24>
    1278:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
void kill (aword pid) {
    127c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		pid = (aword) __pi_curr;
    1280:	6f746b73 	svcvs	0x00746b73
	j = NULL;
    1284:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	for_all_tasks (i) {
    1288:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	syserror (EREQPAR, "kpi");
    128c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1290:	2f534f43 	svccs	0x00534f43
		if ((aword)i == pid) {
    1294:	4f636950 	svcmi	0x00636950
    1298:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
				__PCB = i->Next;
    129c:	2f736269 	svccs	0x00736269
			killev (i);
    12a0:	622f4f49 	eorvs	r4, pc, #292	; 0x124
			ufree (i);
    12a4:	6f747475 	svcvs	0x00747475
			if (i == __pi_curr)
    12a8:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    12ac:	75627000 	strbvc	r7, [r2, #-0]!
				release;
    12b0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
				j->Next = i->Next;
    12b4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    12b8:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
    12bc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
}
    12c0:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
    12c4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12c8:	63615f73 	cmnvs	r1, #460	; 0x1cc
	if (size < 8)
    12cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
		_size = 2;
    12d0:	6f434500 	svcvs	0x00434500
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12d4:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
		_size = (((aword)size) + 3) >> 2;
    12d8:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
		if (m_magic (chunk) != MALLOC_MAGIC)
    12dc:	655f7469 	ldrbvs	r7, [pc, #-1129]	; e7b <killev+0x27>
		_size = (((aword)size) + 3) >> 2;
    12e0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
		if (mevent [MA_NP] . nfail != 255)
    12e4:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
    12e8:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
			mevent [MA_NP] . nfail ++;
    12ec:	00305f64 	eorseq	r5, r0, r4, ror #30
		mnfree [MA_NP] = 0;
    12f0:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
    12f4:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
		if (m_magic (chunk) != MALLOC_MAGIC)
    12f8:	5f656500 	svcpl	0x00656500
    12fc:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
			syserror (EMALLOC, "malc");
    1300:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    1304:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		if (m_size (chunk) >= _size)
    1308:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    130c:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		chunk = m_nextp (chunk)) {
    1310:	5f656500 	svcpl	0x00656500
		m_setnextp (cc, m_nextp (chunk));
    1314:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1318:	6f435700 	svcvs	0x00435700
    131c:	6300746e 	movwvs	r7, #1134	; 0x46e
			m_size (chunk) = _size;
    1320:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
			cc = chunk + _size + m_hdrlen;
    1324:	73616c00 	cmnvc	r1, #0, 24
    1328:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
			m_size (cc) = waste - m_hdrlen;
    132c:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
			QFREE;
    1330:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
		mevent [MA_NP] . nfail = 0;
    1334:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
		mcfree [MA_NP] -= m_size (chunk);
    1338:	6600636e 	strvs	r6, [r0], -lr, ror #6
    133c:	006d6f72 	rsbeq	r6, sp, r2, ror pc
    1340:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
    1344:	00646165 	rsbeq	r6, r4, r5, ror #2
		m_size (chunk) |= MALLOC_UMASK;
    1348:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    134c:	6f682f00 	svcvs	0x00682f00
		m_size (chunk) |= MALLOC_UMASK;
    1350:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 11a4 <io+0x5c>
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
}
    1358:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    135c:	6f746b73 	svcvs	0x00746b73
    1360:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1364:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1368:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    136c:	2f534f43 	svccs	0x00534f43
    1370:	4f636950 	svcmi	0x00636950
aword __pi_fork (fsmcode func, aword data) {
    1374:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	2f736269 	svccs	0x00736269
    137c:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    1380:	2f656761 	svccs	0x00656761
		if ((j = __PCB) == NULL)
    1384:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
	i->Next = NULL;
    1388:	5f656761 	svcpl	0x00656761
	i->data = data;
    138c:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
		if ((j = __PCB) == NULL)
    1390:	33303872 	teqcc	r0, #7471104	; 0x720000
}
    1394:	00632e35 	rsbeq	r2, r3, r5, lsr lr
			for (; j->Next != NULL; j = j->Next);
    1398:	6f6c6363 	svcvs	0x006c6363
    139c:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
	return (aword) i;
    13a0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    13a4:	706f6300 	rsbvc	r6, pc, r0, lsl #6
	if (mevent [MA_NP] . nwait != 255)
    13a8:	63006e65 	movwvs	r6, #3685	; 0xe65
    13ac:	00727470 	rsbseq	r7, r2, r0, ror r4
    13b0:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
		mevent [MA_NP] . nwait ++;
    13b4:	00657a69 	rsbeq	r7, r5, r9, ror #20
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    13bc:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
void diag (const char *mess, ...) {
    13c0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13c4:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
    13c8:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
	diag_disable_int (a, is);
    13cc:	00746961 	rsbseq	r6, r4, r1, ror #18
    13d0:	5f746567 	svcpl	0x00746567
    13d4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
				d = (bc == 16) ? 10000 : 1000000000;
    13d8:	74757000 	ldrbtvc	r7, [r5], #-0
	diag_disable_int (a, is);
    13dc:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
	while (*mess != '\0') {
    13e0:	5f5f0065 	svcpl	0x005f0065
	dgout ('\r');
    13e4:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
	dgout ('\n');
    13e8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    13ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1338 <__pi_malloc+0x6c>
    13f0:	616d2f65 	cmnvs	sp, r5, ror #30
	diag_wait (a);
    13f4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	diag_enable_int (a, is);
    13f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    13fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
    1400:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1404:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1408:	4349502f 	movtmi	r5, #36911	; 0x902f
		if (*mess == '%') {
    140c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1410:	534f6369 	movtpl	r6, #62313	; 0xf369
			if (*mess == 'l') {
    1414:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1418:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
				mess++;
    141c:	61697265 	cmnvs	r9, r5, ror #4
				val = va_arg (ap, lword);
    1420:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
				bc = 32;
    1424:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
				bc = 16;
    1428:	7300632e 	movwvc	r6, #814	; 0x32e
			switch (*mess) {
    142c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1430:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
    1434:	73007363 	movwvc	r7, #867	; 0x363
				dgout ('%');
    1438:	6f5f7265 	svcvs	0x005f7265
    143c:	00667475 	rsbeq	r7, r6, r5, ror r4
				dgout (*mess);
    1440:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 138c <__pi_fork+0x18>
    1444:	616d2f65 	cmnvs	sp, r5, ror #30
			switch (*mess) {
    1448:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
					v = __pi_hex_enc_table [
    144c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
					i += 4;
    1450:	706f746b 	rsbvc	r7, pc, fp, ror #8
					(val >> (bc - i)) & 0xf];
    1454:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1458:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
					dgout (v);
    145c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1460:	502f534f 	eorpl	r5, pc, pc, asr #6
				while (i < bc) {
    1464:	534f6369 	movtpl	r6, #62313	; 0xf369
			mess++;
    1468:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
					d /= 10;
    146c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
				if ((val >> (bc - 1)) & 1) {
    1470:	61697265 	cmnvs	r9, r5, ror #4
    1474:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
					dgout ('-');
    1478:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 50e <AONRTCIntHandler+0xe>
    147c:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
						val |= 0xffff0000;
    1480:	6f682f00 	svcvs	0x00682f00
    1484:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 12d8 <__pi_malloc+0xc>
    1488:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
				d = (bc == 16) ? 10000 : 1000000000;
    148c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1490:	6f746b73 	svcvs	0x00746b73
    1494:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
					v = (word) (val / d);
    1498:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					if (v || d == 1) break;
    149c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    14a0:	2f534f43 	svccs	0x00534f43
					d /= 10;
    14a4:	4f636950 	svcmi	0x00636950
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
					dgout (v + '0');
    14ac:	2f736269 	svccs	0x00736269
    14b0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    14b4:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
					d /= 10;
    14b8:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
					val = val - (v * d);
    14bc:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
					if (d == 0) break;
    14c0:	72657300 	rsbvc	r7, r5, #0, 6
					v = (word) (val / d);
    14c4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    14c8:	6f682f00 	svcvs	0x00682f00
				if (bc == 16)
    14cc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1320 <__pi_malloc+0x54>
				d = (bc == 16) ? 10000 : 1000000000;
    14d0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
					val &= 0xffff;
    14d4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
					dgout (*s);
    14d8:	6f746b73 	svcvs	0x00746b73
					s++;
    14dc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				while (*s != '\0') {
    14e0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    14e4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			dgout (*mess++);
    14e8:	2f534f43 	svccs	0x00534f43
    14ec:	4f636950 	svcmi	0x00636950
    14f0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    14f4:	2f736269 	svccs	0x00736269
    14f8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
}
    14fc:	5f2f6c61 	svcpl	0x002f6c61
    while(1)
    1500:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
{
    1504:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    SetupTrimDevice();
    1508:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    pui32Src = &_etext;
    150c:	61757100 	cmnvs	r5, r0, lsl #2
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1510:	5f00746e 	svcpl	0x0000746e
    __asm("    ldr     r0, =_bss\n"
    1514:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1518:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    151c:	5f006c61 	svcpl	0x00006c61
    1520:	5f4d4f5f 	svcpl	0x004d4f5f
    1524:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
   main();
    1528:	5f5f0045 	svcpl	0x005f0045
    FaultISR();
    152c:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
        *pui32Dest++ = *pui32Src++;
    1530:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1534:	6f682f00 	svcvs	0x00682f00
    1538:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 138c <__pi_fork+0x18>
    153c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1540:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1544:	6f746b73 	svcvs	0x00746b73
    1548:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    154c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
static byte get_byte () {
    1550:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1554:	2f534f43 	svccs	0x00534f43
    1558:	4f636950 	svcmi	0x00636950
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    155c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1560:	2f736269 	svccs	0x00736269
		if (ee_inp)
    1564:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			b |= 1;
    1568:	5f2f6c61 	svcpl	0x002f6c61
    156c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1570:	61697265 	cmnvs	r9, r5, ror #4
	for (b = 0, i = 0; i < 8; i++) {
    1574:	00632e6c 	rsbeq	r2, r3, ip, ror #28
}
    1578:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14c4 <diag+0x104>
    157c:	616d2f65 	cmnvs	sp, r5, ror #30
    1580:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
static void put_byte (byte b) {
    1584:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1588:	706f746b 	rsbvc	r7, pc, fp, ror #8
    158c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1590:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		if (b & 0x80)
    1594:	4349502f 	movtmi	r5, #36911	; 0x902f
    1598:	502f534f 	eorpl	r5, pc, pc, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    159c:	534f6369 	movtpl	r6, #62313	; 0xf369
	for (i = 0; i < 8; i++) {
    15a0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		b <<= 1;
    15a4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	for (i = 0; i < 8; i++) {
    15a8:	61697265 	cmnvs	r9, r5, ror #4
}
    15ac:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    15b0:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    15b4:	67410063 	strbvs	r0, [r1, -r3, rrx]
    15b8:	006e6961 	rsbeq	r6, lr, r1, ror #18
	put_byte (cmd);
    15bc:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
    15c0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
    15c4:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    15c8:	73726170 	cmnvc	r2, #112, 2
static void wwait (word st, word del) {
    15cc:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
    15d0:	006d726f 	rsbeq	r7, sp, pc, ror #4
    15d4:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
	while (dopen && (rdsr () & 1)) {
    15d8:	5f645f79 	svcpl	0x00645f79
    15dc:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    15e0:	6f682f00 	svcvs	0x00682f00
    15e4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1438 <diag+0x78>
	put_byte (CMD_RDSR);
    15e8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	r = get_byte ();
    15ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    15f0:	6f746b73 	svcvs	0x00746b73
	while (dopen && (rdsr () & 1)) {
    15f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
    15f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (st == WNONE)
    15fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1600:	2f534f43 	svccs	0x00534f43
			mdelay (1);
    1604:	4f636950 	svcmi	0x00636950
    1608:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			delay (del, st);
    160c:	2f736269 	svccs	0x00736269
    1610:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			release;
    1614:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
    1618:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    161c:	7600632e 	strvc	r6, [r0], -lr, lsr #6
static void ready () {
    1620:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
	if (dopen) {
    1624:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
		wwait (WNONE, 1);
    1628:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1630 <ready+0x10>
    162c:	6f776c5f 	svcvs	0x00776c5f
    1630:	4e006472 	mcrmi	4, 0, r6, cr0, cr2, {3}
	dstat = 0;
    1634:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1500 <FaultISR>
}
    1638:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    163c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    1640:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
	udelay (1);
    1644:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
    1648:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
	udelay (1);
    164c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
		dopen = DOPEN_TEMP;
    1650:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    1654:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 165c <ready+0x3c>
    1658:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    165c:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
static void cclose () {
    1660:	5f5f0065 	svcpl	0x005f0065
	if (dopen == DOPEN_TEMP) {
    1664:	33746e69 	cmncc	r4, #1680	; 0x690
    1668:	00745f32 	rsbseq	r5, r4, r2, lsr pc
		wwait (WNONE, 1);
    166c:	20554e47 	subscs	r4, r5, r7, asr #28
    1670:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
	cmd_0 (CMD_DP);
    1674:	20332e39 	eorscs	r2, r3, r9, lsr lr
    1678:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
		dopen = 0;
    167c:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
}
    1680:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
word ee_open () {
    1684:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	ready ();
    1688:	5b202965 	blpl	80bc24 <__ccfg+0x7ebc7c>
	dopen = DOPEN_PERM;
    168c:	2f4d5241 	svccs	0x004d5241
    1690:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
}
    1694:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	if (dopen) {
    1698:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    169c:	6172622d 	cmnvs	r2, sp, lsr #4
		dopen = DOPEN_TEMP;
    16a0:	2068636e 	rsbcs	r6, r8, lr, ror #6
		cclose ();
    16a4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
    16a8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
int ser_in (word st, char *buf, int len) {
    16ac:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
    16b0:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	if (len == 0)
    16b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
	if (__inpline == NULL) {
    16b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
		if ((prcs = running (__inserial)) == 0) {
    16bc:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    16c0:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
			prcs = runthread (__inserial);
    16c4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    16c8:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
			if (prcs == 0) {
    16cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
				npwait (st);
    16d0:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
		release;
    16d4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
		join (prcs, st);
    16d8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
    16dc:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
	if (*__inpline == NULL) // bin cmd
    16e0:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    16e4:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
	if (prcs >= len)
    16e8:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
		prcs = len-1;
    16ec:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
	memcpy (buf, __inpline, prcs);
    16f0:	662d2067 	strtvs	r2, [sp], -r7, rrx
    16f4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    16f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	ufree (__inpline);
    16fc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
	__inpline = NULL;
    1700:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if (*buf) // if it's NULL, it's a bin cmd
    1704:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
		buf [prcs] = '\0';
    1708:	61746164 	cmnvs	r4, r4, ror #2
}
    170c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
		prcs = strlen (__inpline);
    1710:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1714:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
		return 0;
    1718:	006d7361 	rsbeq	r7, sp, r1, ror #6
    171c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1720:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1728 <ser_outf+0x4>
int ser_outf (word st, const char *m, ...) {
    1724:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1728:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	if ((prcs = running (__outserial)) != 0) {
    172c:	2f2e2e2f 	svccs	0x002e2e2f
    1730:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		join (prcs, st);
    1734:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1738:	6f612f62 	svcvs	0x00612f62
		release;
    173c:	61625f6e 	cmnvs	r2, lr, ror #30
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1740:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    1744:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    1748:	43706d65 	cmnmi	r0, #6464	; 0x1940
		umwait (st);
    174c:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
    1750:	6f697463 	svcvs	0x00697463
	if (runstrand (__outserial, buf) == 0) {
    1754:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
    1758:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    175c:	706d6554 	rsbvc	r6, sp, r4, asr r5
		ufree (buf);
    1760:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
		npwait (st);
    1764:	6b6e654a 	blvs	1b9ac94 <__ccfg+0x1b7acec>
}
    1768:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
    176c:	73626f6a 	cmnvc	r2, #424	; 0x1a8
    1770:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
    1774:	70756f72 	rsbsvc	r6, r5, r2, ror pc
int ser_inf (word st, const char *fmt, ...) {
    1778:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
    177c:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
	if (fmt == NULL)
    1780:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
	if (__inpline == NULL) {
    1784:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
		if ((prcs = running (__inserial)) == 0) {
    1788:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    178c:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 1794 <ser_inf+0x1c>
			prcs = runthread (__inserial);
    1790:	73656c75 	cmnvc	r5, #29952	; 0x7500
    1794:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
			if (prcs == 0) {
    1798:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
				npwait (st);
    179c:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
		release;
    17a0:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
		join (prcs, st);
    17a4:	325f6168 	subscc	r6, pc, #104, 2
    17a8:	655f305f 	ldrbvs	r3, [pc, #-95]	; 1751 <ser_outf+0x2d>
	va_start (ap, fmt);
    17ac:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
	prcs = vscan (__inpline, fmt, ap);
    17b0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    17b4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	ufree (__inpline);
    17b8:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
	__inpline = NULL;
    17bc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
}
    17c0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    17c4:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
    17c8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
		return 0;
    17cc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 8d4 <__buttons_setirq+0x14>
    17d0:	33746e69 	cmncc	r4, #1680	; 0x690
    17d4:	00745f32 	rsbseq	r5, r4, r2, lsr pc
strand (__outserial, const char*)
    17d8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    17dc:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    17e0:	53746e65 	cmnpl	r4, #1616	; 0x650
    17e4:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
endstrand
    17e8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 16b4 <ser_in+0x8>
    17ec:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
	ptr = data;
    17f0:	43435452 	movtmi	r5, #13394	; 0x3452
    17f4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
	if (*ptr)
    17f8:	6f43746e 	svcvs	0x0043746e
		len = strlen (ptr);
    17fc:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    1800:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1804:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    1808:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    180c:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
    1810:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    1814:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
	len -= quant;
    1818:	00646165 	rsbeq	r6, r4, r5, ror #2
    181c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1820:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
	if (len == 0) {
    1824:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
		ufree (data);
    1828:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
		finish;
    182c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1830:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1834:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1838:	524f4e00 	subpl	r4, pc, #0, 28
    183c:	415f4d4f 	cmpmi	pc, pc, asr #26
    1840:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    1844:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
strand (__inserial, address)
    1848:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    184c:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
    1850:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1854:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    1858:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
	if (__inpline != NULL)
    185c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1860:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
		finish;
    1864:	63657300 	cmnvs	r5, #0, 6
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    1868:	53646e41 	cmnpl	r4, #1040	; 0x410
    186c:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1870:	2f2e0063 	svccs	0x002e0063
    1874:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		umwait (IM_INIT);
    1878:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		release;
    187c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	savedata (data);
    1880:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	len = MAX_LINE_LENGTH;
    1884:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
	io (IM_READ, __cport, READ, ptr, 1);
    1888:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    188c:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    1890:	7a697300 	bvc	1a5e498 <__ccfg+0x1a3e4f0>
    1894:	70797465 	rsbsvc	r7, r9, r5, ror #8
	if (ptr == (char*) data) { // new line
    1898:	4f4e0065 	svcmi	0x004e0065
    189c:	5f4d4f52 	svcpl	0x004d4f52
		if (*ptr == '\0') { // bin cmd
    18a0:	62555043 	subsvs	r5, r5, #67	; 0x43
			proceed (IM_BIN);
    18a4:	70657361 	rsbvc	r7, r5, r1, ror #6
    18a8:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
		if (*ptr < 0x20)
    18ac:	4f4e0074 	svcmi	0x004e0074
    18b0:	5f4d4f52 	svcpl	0x004d4f52
			proceed (IM_READ);
    18b4:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
    18b8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	if (*ptr == '\n' || *ptr == '\r') {
    18bc:	33697500 	cmncc	r9, #0, 10
    18c0:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
    18c4:	33697500 	cmncc	r9, #0, 10
		*ptr = '\0';
    18c8:	756f4332 	strbvc	r4, [pc, #-818]!	; 159e <put_byte+0x1a>
		__inpline = (char*)data;
    18cc:	4e00746e 	cdpmi	4, 0, cr7, cr0, cr14, {3}
		finish;
    18d0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 179c <ser_inf+0x24>
	if (len) {
    18d4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
		ptr++;
    18d8:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    18dc:	4f4e0064 	svcmi	0x004e0064
		len--;
    18e0:	5f4d4f52 	svcpl	0x004d4f52
	proceed (IM_READ);
    18e4:	63555043 	cmpvs	r5, #67	; 0x43
	io (IM_BIN, __cport, READ, ptr, 1);
    18e8:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
    18ec:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    18f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    18f4:	2f2e2e2f 	svccs	0x002e2e2f
    18f8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
	len -= 2;
    18fc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	if (len > *ptr + 1) // 1 for 0x04
    1900:	70632f62 	rsbvc	r2, r3, r2, ror #30
    1904:	00632e75 	rsbeq	r2, r3, r5, ror lr
		len = *ptr + 1;
    1908:	4f524f4e 	svcmi	0x00524f4e
    190c:	50435f4d 	subpl	r5, r3, sp, asr #30
	ptr++;
    1910:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1914:	6b73616d 	blvs	1cd9ed0 <__ccfg+0x1cb9f28>
    1918:	31706d00 	cmncc	r0, r0, lsl #26
    191c:	00766572 	rsbseq	r6, r6, r2, ror r5
    1920:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1924:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1928:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1768 <ser_outf+0x44>
	len -= quant;
    192c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
		__inpline = (char*)data;
    1930:	61577465 	cmpvs	r7, r5, ror #8
		finish;
    1934:	7075656b 	rsbsvc	r6, r5, fp, ror #10
	ptr += quant;
    1938:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1828 <__outserial+0x50>
    193c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
endstrand
    1940:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1944:	524f4e00 	subpl	r4, pc, #0, 28
	proceed (IM_BINL);
    1948:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
endstrand
    194c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1950:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1954:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1794 <ser_inf+0x1c>
    1958:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    195c:	61577465 	cmpvs	r7, r5, ror #8
    1960:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		if (res && (d < n))
    1964:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1854 <__inserial+0xc>
    1968:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    196c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1970:	31676643 	cmncc	r7, r3, asr #12
			res [d] = (char) c;
    1974:	524f4e00 	subpl	r4, pc, #0, 28
		d++;
    1978:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    197c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1980:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1984:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17c4 <ser_inf+0x4c>
    1988:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    198c:	61577465 	cmpvs	r7, r5, ror #8
				enci (10000);
    1990:	7075656b 	rsbsvc	r6, r5, fp, ror #10
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1994:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1884 <__inserial+0x3c>
    1998:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
	d = 0;
    199c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		c = *fm++;
    19a0:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
		if (c == '\\') {
    19a4:	524f4e00 	subpl	r4, pc, #0, 28
			if ((c = *fm++) == '\0') {
    19a8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    19ac:	70757465 	rsbsvc	r7, r5, r5, ror #8
				outc ('\\');
    19b0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
			if ((c = *fm++) == '\0') {
    19b4:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17f4 <__outserial+0x1c>
				outc ('\\');
    19b8:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    19bc:	61577465 	cmpvs	r7, r5, ror #8
			outc (c);
    19c0:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    19c4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 18b4 <__inserial+0x6c>
			if (c == '\0')
    19c8:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    19cc:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
			outc (c);
    19d0:	33676643 	cmncc	r7, #70254592	; 0x4300000
				outc (val);
    19d4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
				val = (word) va_arg (ap, aword);
    19d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		if (c == '%') {
    19dc:	2f2e2e2f 	svccs	0x002e2e2f
    19e0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
			c = *fm++;
    19e4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			switch (c) {
    19e8:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    19ec:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    19f0:	4f4e0063 	svcmi	0x004e0063
    19f4:	5f4d4f52 	svcpl	0x004d4f52
    19f8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    19fc:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    1a00:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    1a04:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1a0c <__pi_vfparse+0x88>
				outc ('%');
    1a08:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    1a0c:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
				outc (c);
    1a10:	6f54676e 	svcvs	0x0054676e
    1a14:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    1a18:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
				if (c == '\0')
    1a1c:	00676e69 	rsbeq	r6, r7, r9, ror #28
				return d;
    1a20:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
}
    1a24:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1a28:	76655231 			; <UNDEFINED> instruction: 0x76655231
			switch (c) {
    1a2c:	6f697369 	svcvs	0x00697369
    1a30:	4f41006e 	svcmi	0x0041006e
    1a34:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
				for (i = 12; ; i -= 4) {
    1a38:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
				val = (word) va_arg (ap, aword);
    1a3c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
						[ (val >> i) & 0xf ]);
    1a40:	66664f72 	uqsub16vs	r4, r6, r2
    1a44:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    1a48:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
					outc (__pi_hex_enc_table
    1a4c:	6f437265 	svcvs	0x00437265
    1a50:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
					if (i == 0)
    1a54:	00746573 	rsbseq	r6, r4, r3, ror r5
    1a58:	4f524f4e 	svcmi	0x00524f4e
				for (i = 12; ; i -= 4) {
    1a5c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
				val = (word) va_arg (ap, aword);
    1a60:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
				if (c == 'd' && (val & 0x8000) != 0) {
    1a64:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
				val = (word) va_arg (ap, aword);
    1a68:	63697665 	cmnvs	r9, #105906176	; 0x6500000
				if (c == 'd' && (val & 0x8000) != 0) {
    1a6c:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
    1a70:	5f6d6972 	svcpl	0x006d6972
					outc ('-');
    1a74:	67696475 			; <UNDEFINED> instruction: 0x67696475
    1a78:	33697500 	cmncc	r9, #0, 10
					val = (~val) + 1;
    1a7c:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
    1a80:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
				for (i = 12; ; i -= 4) {
    1a84:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
				enci (10000);
    1a88:	006c7463 	rsbeq	r7, ip, r3, ror #8
    1a8c:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1a90:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1a98 <__pi_vfparse+0x114>
    1a94:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1a98:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    1a9c:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    1aa0:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    1aa4:	6f437265 	svcvs	0x00437265
    1aa8:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    1aac:	57746573 			; <UNDEFINED> instruction: 0x57746573
    1ab0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1ab4:	6f724670 	svcvs	0x00724670
    1ab8:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    1abc:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    1ac0:	6b61576e 	blvs	1857880 <__ccfg+0x18378d8>
    1ac4:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    1ac8:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    1acc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
				if (c == 'd' || c == 'u') {
    1ad0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1ad4:	524f4e00 	subpl	r4, pc, #0, 28
					if (c == 'd' &&
    1ad8:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 1ae0 <__pi_vfparse+0x15c>
					val = va_arg (ap, lword);
    1adc:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
					fm++;
    1ae0:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
					if (c == 'd' &&
    1ae4:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    1ae8:	6f46746c 	svcvs	0x0046746c
						outc ('-');
    1aec:	31434372 	hvccc	13362	; 0x3432
    1af0:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
						val = (~val) + 1;
    1af4:	76655277 			; <UNDEFINED> instruction: 0x76655277
				enci (10000);
    1af8:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
					enci (1000000000UL);
    1afc:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
    1b00:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1b04:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    1b08:	6f695666 	svcvs	0x00695666
    1b0c:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    1b10:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
    1b14:	5f6d6972 	svcpl	0x006d6972
    1b18:	00646f62 	rsbeq	r6, r4, r2, ror #30
    1b1c:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1b20:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    1b24:	6b6c4366 	blvs	1b128c4 <__ccfg+0x1af291c>
    1b28:	524f4e00 	subpl	r4, pc, #0, 28
    1b2c:	4f5f4d4f 	svcmi	0x005f4d4f
    1b30:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    1b34:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1b38:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1b3c:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
				} else if (c == 'x') {
    1b40:	72756300 	rsbsvc	r6, r5, #0, 6
					for (i = 28; ; i -= 4) {
    1b44:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
					val = va_arg (ap, lword);
    1b48:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
							[ (val >> i) & 0xf ]);
    1b4c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1b50:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
						outc (__pi_hex_enc_table
    1b54:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1b58:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1b5c:	006c6156 	rsbeq	r6, ip, r6, asr r1
						if (i == 0)
    1b60:	4f524f4e 	svcmi	0x00524f4e
    1b64:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
					for (i = 28; ; i -= 4) {
    1b68:	47707574 			; <UNDEFINED> instruction: 0x47707574
					outc ('%');
    1b6c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1b70:	6f466d69 	svcvs	0x00466d69
    1b74:	616e4172 	smcvs	58386	; 0xe412
					outc ('l');
    1b78:	61707962 	cmnvs	r0, r2, ror #18
    1b7c:	61567373 	cmpvs	r6, r3, ror r3
				val = (word) va_arg (ap, aword);
    1b80:	3165756c 	cmncc	r5, ip, ror #10
				outc (val);
    1b84:	524f4e00 	subpl	r4, pc, #0, 28
    1b88:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
				while (*st != '\0') {
    1b8c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1b90:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1b94:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1b98:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
					outc (*st);
    1b9c:	6f4c726c 	svcvs	0x004c726c
    1ba0:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
					st++;
    1ba4:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
		c = *fm++;
    1ba8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1bac:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 19e4 <__pi_vfparse+0x60>
    1bb0:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
char *vform (char *res, const char *fm, va_list aq) {
    1bb4:	72756300 	rsbsvc	r6, r5, #0, 6
    1bb8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	if (res != NULL) {
    1bbc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1bc0:	6d697600 	stclvs	6, cr7, [r9, #-0]
    1bc4:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    1bc8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
}
    1bcc:	62690030 	rsbvs	r0, r9, #48	; 0x30
    1bd0:	4f736169 	svcmi	0x00736169
	fml = strlen (fm) + 17;
    1bd4:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1bd8:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    1bdc:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
	if ((res = (char*) umalloc (fml)) == NULL)
    1be0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1be4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1be8:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1bec:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    1bf0:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1bf4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1ac0 <__pi_vfparse+0x13c>
    1bf8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		ufree (res);
    1bfc:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
		goto Again;
    1c00:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
	if (buf == NULL || fmt == NULL)
    1c04:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c08:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	if (buf == NULL || fmt == NULL)
    1c0c:	61466648 	cmpvs	r6, r8, asr #12
    1c10:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    1c14:	00747261 	rsbseq	r7, r4, r1, ror #4
		    	    case 'u': scanu (lword); break;
    1c18:	4f524f4e 	svcmi	0x00524f4e
			while (isspace (*buf)) buf++;
    1c1c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1c20:	47707574 			; <UNDEFINED> instruction: 0x47707574
	while (*fmt != '\0') {
    1c24:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
		if (*fmt++ != '%')
    1c28:	6f466d69 	svcvs	0x00466d69
		switch (*fmt++) {
    1c2c:	4f635272 	svcmi	0x00635272
    1c30:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1c34:	61694249 	cmnvs	r9, r9, asr #4
    1c38:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    1c3c:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    1c40:	4161746c 	cmnmi	r1, ip, ror #8
    1c44:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
}
    1c48:	4f4e0074 	svcmi	0x004e0074
		switch (*fmt++) {
    1c4c:	5f4d4f52 	svcpl	0x004d4f52
    1c50:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c54:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c58:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			while (isspace (*buf)) buf++;
    1c5c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1c60:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1c64:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    1c68:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1c6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c70:	52726f46 	rsbspl	r6, r2, #280	; 0x118
			if (*buf == '\0')
    1c74:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
			if (*buf != ',') {
    1c78:	66437478 			; <UNDEFINED> instruction: 0x66437478
			sap = va_arg (ap, char*);
    1c7c:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
			nc++;
    1c80:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
			if (*buf != ',') {
    1c84:	61746c65 	cmnvs	r4, r5, ror #24
				while (!isspace (*buf) && *buf != ',' &&
    1c88:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c8c:	33697500 	cmncc	r9, #0, 10
    1c90:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    1c94:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    1c98:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    1c9c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1ca0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
			while (isspace (*buf)) buf++;
    1ca4:	4f4e0065 	svcmi	0x004e0065
    1ca8:	5f4d4f52 	svcpl	0x004d4f52
    1cac:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cb0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cb4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			if (*buf == ',') buf++;
    1cb8:	41726f46 	cmnmi	r2, r6, asr #30
    1cbc:	6f63706d 	svcvs	0x0063706d
			*sap = '\0';
    1cc0:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
			break;
    1cc4:	4f4e0031 	svcmi	0x004e0031
		    case 'd': scani (word); break;
    1cc8:	5f4d4f52 	svcpl	0x004d4f52
    1ccc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cd0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cd4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cd8:	41726f46 	cmnmi	r2, r6, asr #30
    1cdc:	6f63706d 	svcvs	0x0063706d
    1ce0:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1ce4:	4f4e0032 	svcmi	0x004e0032
    1ce8:	5f4d4f52 	svcpl	0x004d4f52
    1cec:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cf0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cf4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cf8:	41726f46 	cmnmi	r2, r6, asr #30
    1cfc:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1d00:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1d04:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    1d08:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bd4 <vform+0x20>
    1d0c:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1d10:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    1d14:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    1d18:	66006574 			; <UNDEFINED> instruction: 0x66006574
    1d1c:	31676663 	cmncc	r7, r3, ror #12
    1d20:	61746144 	cmnvs	r4, r4, asr #2
    1d24:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1d28:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d2c:	734f6352 	movtvc	r6, #62290	; 0xf352
    1d30:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    1d34:	73616942 	cmnvc	r1, #1081344	; 0x108000
		    case 'u': scanu (word); break;
    1d38:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d3c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1d40:	61740065 	cmnvs	r4, r5, rrx
    1d44:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    1d48:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d4c:	524f4e00 	subpl	r4, pc, #0, 28
    1d50:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1d54:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1d58:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1d5c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1d60:	6152726f 	cmpvs	r2, pc, ror #4
    1d64:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    1d68:	67664374 			; <UNDEFINED> instruction: 0x67664374
    1d6c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1d70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d74:	2f2e2e2f 	svccs	0x002e2e2f
    1d78:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1d7c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		    case 'x': scanx (word); break;
    1d80:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    1d84:	5f707574 	svcpl	0x00707574
    1d88:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    1d8c:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    1d90:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1d94:	00636e49 	rsbeq	r6, r3, r9, asr #28
    1d98:	4f524f4e 	svcmi	0x00524f4e
    1d9c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1da0:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1da4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1da8:	6f466d69 	svcvs	0x00466d69
    1dac:	4f635272 	svcmi	0x00635272
    1db0:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1db4:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    1db8:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    1dbc:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    1dc0:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    1dc4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1c90 <vscan+0x8c>
    1dc8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1dcc:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1dd0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1dd4:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1dd8:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1ddc:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    1de0:	616c7567 	cmnvs	ip, r7, ror #10
    1de4:	41726f74 	cmnmi	r2, r4, ror pc
    1de8:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    1dec:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    1df0:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    1df4:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
			switch (*fmt++) {
    1df8:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    1dfc:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1e00:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1e04:	67695370 			; <UNDEFINED> instruction: 0x67695370
    1e08:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    1e0c:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
		    	    case 'd': scani (lword); break;
    1e10:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1e14:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1e18:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e1c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e20:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e24:	41726f46 	cmnmi	r2, r6, asr #30
    1e28:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e2c:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1e30:	61566e45 	cmpvs	r6, r5, asr #28
    1e34:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1e38:	4f524f4e 	svcmi	0x00524f4e
    1e3c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1e40:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1e44:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1e48:	6f466d69 	svcvs	0x00466d69
    1e4c:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1e50:	6f4d6853 	svcvs	0x004d6853
    1e54:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    1e58:	32336900 	eorscc	r6, r3, #0, 18
    1e5c:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    1e60:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    1e64:	61567264 	cmpvs	r6, r4, ror #4
    1e68:	6f6d006c 	svcvs	0x006d006c
		    	    case 'x': scanx (lword); break;
    1e6c:	6f436564 	svcvs	0x00436564
    1e70:	0031666e 	eorseq	r6, r1, lr, ror #12
    1e74:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1e78:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1e7c:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    1e80:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1e84:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1d50 <vscan+0x14c>
    1e88:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1e8c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1e90:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e94:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1e98:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1e9c:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    1ea0:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    1ea4:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    1ea8:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1eac:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1eb0:	41726f46 	cmnmi	r2, r6, asr #30
    1eb4:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1eb8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ebc:	61566e45 	cmpvs	r6, r5, asr #28
    1ec0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1ec4:	4f524f4e 	svcmi	0x00524f4e
    1ec8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1ecc:	6f6c4343 	svcvs	0x006c4343
    1ed0:	6f536b63 	svcvs	0x00536b63
    1ed4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ed8:	00746547 	rsbseq	r6, r4, r7, asr #10
		    	    case 'd': scani (lword); break;
    1edc:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1ee0:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    1ee4:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1ee8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1eec:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    1ef0:	734f3167 	movtvc	r3, #61799	; 0xf167
    1ef4:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
		    	    case 'u': scanu (lword); break;
    1ef8:	62640066 	rsbvs	r0, r4, #102	; 0x66
    1efc:	6f4c726c 	svcvs	0x004c726c
    1f00:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f04:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1f08:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1f0c:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1d44 <vscan+0x140>
    1f10:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1f14:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1f18:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    1f1c:	6f466d69 	svcvs	0x00466d69
    1f20:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1f24:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1f28:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1f2c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1f30:	43646e41 	cmnmi	r4, #1040	; 0x410
    1f34:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    1f38:	61527277 	cmpvs	r2, r7, ror r2
    1f3c:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
		    	    case 'x': scanx (lword); break;
    1f40:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1f44:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
			if ((c = *buf++) == '\0')
    1f48:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    1f4c:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
			sap = va_arg (ap, char*);
    1f50:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1e1c <vscan+0x218>
			nc++;
    1f54:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
			break;
    1f58:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
			while (isspace (*buf)) buf++;
    1f5c:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    1f60:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    1f64:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
						*sap++ = *buf++;
    1f68:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    1f6c:	524f4e00 	subpl	r4, pc, #0, 28
			while (isspace (*buf)) buf++;
    1f70:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f74:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f78:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
		return 0;
    1f7c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1f80:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
		    case 'x': scanx (word); break;
    1f84:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1dcc <vscan+0x1c8>
    1f88:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
		    	    case 'x': scanx (lword); break;
    1f8c:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    1f90:	6f583233 	svcvs	0x00583233
    1f94:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1f98:	00776f52 	rsbseq	r6, r7, r2, asr pc
    1f9c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1fa0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1fa4:	6f436648 	svcvs	0x00436648
    1fa8:	4f4e006c 	svcmi	0x004e006c
    1fac:	5f4d4f52 	svcpl	0x004d4f52
    1fb0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1fb4:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    1fb8:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1fbc:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    1fc0:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    1fc4:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    1fc8:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    1fcc:	33697500 	cmncc	r9, #0, 10
    1fd0:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    1fd4:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1fd8:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1fdc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    1fe0:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 1e1c <vscan+0x218>
    1fe4:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    1fe8:	4161746c 	cmnmi	r1, ip, ror #8
    1fec:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    1ff0:	33690074 	cmncc	r9, #116	; 0x74
    1ff4:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    1ff8:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    1ffc:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    2000:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2004:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    2008:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    200c:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    2010:	50460065 	subpl	r0, r6, r5, rrx
    2014:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
    2018:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
    201c:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
    2020:	00545f32 	subseq	r5, r4, r2, lsr pc
    2024:	52545046 	subspl	r5, r4, #70	; 0x46
    2028:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
    202c:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
    2030:	6300545f 	movwvs	r5, #1119	; 0x45f
    2034:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    2038:	5300706d 	movwpl	r7, #109	; 0x6d
    203c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2040:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1e78 <vscan+0x274>
    2044:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    2048:	50460066 	subpl	r0, r6, r6, rrx
    204c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2050:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2054:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    2058:	6400545f 	strvs	r5, [r0], #-1119	; 0xfffffba1
    205c:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    2060:	41726464 	cmnmi	r2, r4, ror #8
    2064:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    2068:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    206c:	70007065 	andvc	r7, r0, r5, rrx
    2070:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    2074:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    2078:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    207c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2080:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2084:	524f4e00 	subpl	r4, pc, #0, 28
    2088:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    208c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    2090:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    2094:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    2098:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    209c:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    20a0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    20a4:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    20a8:	6f447265 	svcvs	0x00447265
    20ac:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    20b0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1f7c <vscan+0x378>
    20b4:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    20b8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    20bc:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    20c0:	61686365 	cmnvs	r8, r5, ror #6
    20c4:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    20c8:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    20cc:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    20d0:	6f447265 	svcvs	0x00447265
    20d4:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    20d8:	2f2e2e2f 	svccs	0x002e2e2f
    20dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20e0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    20e4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    20e8:	2f62696c 	svccs	0x0062696c
    20ec:	5f737973 	svcpl	0x00737973
    20f0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    20f4:	5300632e 	movwpl	r6, #814	; 0x32e
    20f8:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    20fc:	56697061 	strbtpl	r7, [r9], -r1, rrx
    2100:	0064696f 	rsbeq	r6, r4, pc, ror #18
    2104:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2108:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    210c:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    2110:	5f525450 	svcpl	0x00525450
    2114:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2118:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    211c:	00545f33 	subseq	r5, r4, r3, lsr pc
    2120:	4f524f4e 	svcmi	0x00524f4e
    2124:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2128:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    212c:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    2130:	6f537465 	svcvs	0x00537465
    2134:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2138:	00746547 	rsbseq	r6, r4, r7, asr #10
    213c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2140:	616d6f44 	cmnvs	sp, r4, asr #30
    2144:	00736e69 	rsbseq	r6, r3, r9, ror #28
    2148:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    214c:	54647000 	strbtpl	r7, [r4], #-0
    2150:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2154:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2158:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    215c:	6b636f6c 	blvs	18ddf14 <__ccfg+0x18bdf6c>
    2160:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
    2164:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    2168:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    216c:	52500065 	subspl	r0, r0, #101	; 0x65
    2170:	6f444d43 	svcvs	0x00444d43
    2174:	6e69616d 	powvsez	f6, f1, #5.0
    2178:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    217c:	7000656c 	andvc	r6, r0, ip, ror #10
    2180:	004d7265 	subeq	r7, sp, r5, ror #4
    2184:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    2188:	61686365 	cmnvs	r8, r5, ror #6
    218c:	50656772 	rsbpl	r6, r5, r2, ror r7
    2190:	6f697265 	svcvs	0x00697265
    2194:	50460064 	subpl	r0, r6, r4, rrx
    2198:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    219c:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    21a0:	5f564544 	svcpl	0x00564544
    21a4:	50460054 	subpl	r0, r6, r4, asr r0
    21a8:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    21ac:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    21b0:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    21b4:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    21b8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    21bc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    21c0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    21c4:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    21c8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    21cc:	414d5f52 	cmpmi	sp, r2, asr pc
    21d0:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    21d4:	7600545f 			; <UNDEFINED> instruction: 0x7600545f
    21d8:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    21dc:	53007061 	movwpl	r7, #97	; 0x61
    21e0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    21e4:	43444174 	movtmi	r4, #16756	; 0x4174
    21e8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    21ec:	706e4942 	rsbvc	r4, lr, r2, asr #18
    21f0:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    21f4:	61746c65 	cmnvs	r4, r5, ror #24
    21f8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    21fc:	33697500 	cmncc	r9, #0, 10
    2200:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    2204:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    2208:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    220c:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    2210:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2214:	5f5f0065 	svcpl	0x005f0065
    2218:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    221c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2220:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2224:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2228:	6f6c0065 	svcvs	0x006c0065
    222c:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    2230:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    2234:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    2238:	72655065 	rsbvc	r5, r5, #101	; 0x65
    223c:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2240:	52545046 	subspl	r5, r4, #70	; 0x46
    2244:	5345525f 	movtpl	r5, #21087	; 0x525f
    2248:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    224c:	545f3144 	ldrbpl	r3, [pc], #-324	; 2254 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x74>
    2250:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2254:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    2258:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    225c:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    2260:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2264:	33637243 	cmncc	r3, #805306372	; 0x30000004
    2268:	46480032 			; <UNDEFINED> instruction: 0x46480032
    226c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2270:	61536563 	cmpvs	r3, r3, ror #10
    2274:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    2278:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    227c:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    2280:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    2284:	00323372 	eorseq	r3, r2, r2, ror r3
    2288:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    228c:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2290:	50460064 	subpl	r0, r6, r4, rrx
    2294:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 214c <NOROM_SetupTrimDevice+0x8c>
    2298:	564e4145 	strbpl	r4, [lr], -r5, asr #2
    229c:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 22a4 <NOROM_SetupGetTrimForAnabypassValue1+0x18>
    22a0:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    22a4:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    22a8:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 20e4 <NOROM_SetupTrimDevice+0x24>
    22ac:	50460064 	subpl	r0, r6, r4, rrx
    22b0:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
    22b4:	4f434344 	svcmi	0x00434344
    22b8:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    22bc:	00545f4e 	subseq	r5, r4, lr, asr #30
    22c0:	52545046 	subspl	r5, r4, #70	; 0x46
    22c4:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2150 <NOROM_SetupTrimDevice+0x90>
    22c8:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    22cc:	00545f46 	subseq	r5, r4, r6, asr #30
    22d0:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    22d4:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    22d8:	646f4d72 	strbtvs	r4, [pc], #-3442	; 22e0 <NOROM_SetupGetTrimForAnabypassValue1+0x54>
    22dc:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    22e0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    22e4:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    22e8:	706e4941 	rsbvc	r4, lr, r1, asr #18
    22ec:	46007475 			; <UNDEFINED> instruction: 0x46007475
    22f0:	5f525450 	svcpl	0x00525450
    22f4:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    22f8:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    22fc:	00545f44 	subseq	r5, r4, r4, asr #30
    2300:	52545046 	subspl	r5, r4, #70	; 0x46
    2304:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2190 <NOROM_SetupSetVddrLevel+0x2c>
    2308:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    230c:	5000545f 	andpl	r5, r0, pc, asr r4
    2310:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    2314:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    2318:	73007465 	movwvc	r7, #1125	; 0x465
    231c:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    2320:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    2324:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    2328:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    232c:	67006174 	smlsdxvs	r0, r4, r1, r6
    2330:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2334:	6f4d3233 	svcvs	0x004d3233
    2338:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    233c:	48004743 	stmdami	r0, {r0, r1, r6, r8, r9, sl, lr}
    2340:	5f445241 	svcpl	0x00445241
    2344:	5f495041 	svcpl	0x00495041
    2348:	75630054 	strbvc	r0, [r3, #-84]!	; 0xffffffac
    234c:	61745372 	cmnvs	r4, r2, ror r3
    2350:	4f006574 	svcmi	0x00006574
    2354:	66484353 			; <UNDEFINED> instruction: 0x66484353
    2358:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    235c:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2360:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2364:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2368:	52435f52 	subpl	r5, r3, #328	; 0x148
    236c:	5f323343 	svcpl	0x00323343
    2370:	6f610054 	svcvs	0x00610054
    2374:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    2378:	506c7463 	rsbpl	r7, ip, r3, ror #8
    237c:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    2380:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    2384:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2388:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    238c:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2390:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    2394:	4e00545f 	cfmvsrmi	mvf0, r5
    2398:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2264 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x84>
    239c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    23a0:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    23a4:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    23a8:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    23ac:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    23b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    23b4:	52545046 	subspl	r5, r4, #70	; 0x46
    23b8:	5346485f 	movtpl	r4, #26719	; 0x685f
    23bc:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    23c0:	46415345 	strbmi	r5, [r1], -r5, asr #6
    23c4:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    23c8:	5f484354 	svcpl	0x00484354
    23cc:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    23d0:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    23d4:	70006575 	andvc	r6, r0, r5, ror r5
    23d8:	6b6f6f4c 	blvs	1bde110 <__ccfg+0x1bbe168>
    23dc:	61547075 	cmpvs	r4, r5, ror r0
    23e0:	00656c62 	rsbeq	r6, r5, r2, ror #24
    23e4:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    23e8:	6f437463 	svcvs	0x00437463
    23ec:	5241706d 	subpl	r7, r1, #109	; 0x6d
    23f0:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    23f4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    23f8:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    23fc:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2400:	316e6f69 	cmncc	lr, r9, ror #30
    2404:	73655200 	cmnvc	r5, #0, 4
    2408:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    240c:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2410:	6f697461 	svcvs	0x00697461
    2414:	5200326e 	andpl	r3, r0, #-536870906	; 0xe0000006
    2418:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    241c:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2420:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2424:	336e6f69 	cmncc	lr, #420	; 0x1a4
    2428:	73655200 	cmnvc	r5, #0, 4
    242c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2430:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2434:	6f697461 	svcvs	0x00697461
    2438:	5300356e 	movwpl	r3, #1390	; 0x56e
    243c:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    2440:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2444:	6f697461 	svcvs	0x00697461
    2448:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    244c:	70006575 	andvc	r6, r0, r5, ror r5
    2450:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    2454:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    2458:	72655065 	rsbvc	r5, r5, #101	; 0x65
    245c:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2460:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    2464:	6f6d7461 	svcvs	0x006d7461
    2468:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    246c:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    2470:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    2474:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    2478:	50007065 	andpl	r7, r0, r5, rrx
    247c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2480:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    2484:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    2488:	5f736c61 	svcpl	0x00736c61
    248c:	50460074 	subpl	r0, r6, r4, ror r0
    2490:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2494:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    2498:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    249c:	4e00545f 	cfmvsrmi	mvf0, r5
    24a0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 236c <NOROM_SetupGetTrimForAmpcompCtrl+0x48>
    24a4:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    24a8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    24ac:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    24b0:	6f565f43 	svcvs	0x00565f43
    24b4:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    24b8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24bc:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    24c0:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    24c4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    24c8:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    24cc:	73616c46 	cmnvc	r1, #17920	; 0x4600
    24d0:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    24d4:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    24d8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    24dc:	4f435f52 	svcmi	0x00435f52
    24e0:	5241504d 	subpl	r5, r1, #77	; 0x4d
    24e4:	545f4645 	ldrbpl	r4, [pc], #-1605	; 24ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x9c>
    24e8:	776f7000 	strbvc	r7, [pc, -r0]!
    24ec:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    24f0:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    24f4:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    24f8:	50460073 	subpl	r0, r6, r3, ror r0
    24fc:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2500:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2504:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    2508:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    250c:	5f525450 	svcpl	0x00525450
    2510:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2514:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2518:	00545f35 	subseq	r5, r4, r5, lsr pc
    251c:	544f5250 	strbpl	r5, [pc], #-592	; 2524 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xd4>
    2520:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2524:	5f544942 	svcpl	0x00544942
    2528:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    252c:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    2530:	00797261 	rsbseq	r7, r9, r1, ror #4
    2534:	4b434150 	blmi	10d2a7c <__ccfg+0x10b2ad4>
    2538:	5f454741 	svcpl	0x00454741
    253c:	00347834 	eorseq	r7, r4, r4, lsr r8
    2540:	50494843 	subpl	r4, r9, r3, asr #16
    2544:	5059545f 	subspl	r5, r9, pc, asr r4
    2548:	43435f45 	movtmi	r5, #16197	; 0x3f45
    254c:	30343632 	eorscc	r3, r4, r2, lsr r6
    2550:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    2554:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    2558:	4d414600 	stclmi	6, cr4, [r1, #-0]
    255c:	5f594c49 	svcpl	0x00594c49
    2560:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2564:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    2568:	4e007a69 	vmlsmi.f32	s14, s0, s19
    256c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2438 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>
    2570:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2574:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2578:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    257c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2580:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    2584:	00796c69 	rsbseq	r6, r9, r9, ror #24
    2588:	4f524f4e 	svcmi	0x00524f4e
    258c:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2590:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2594:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    2598:	61507465 	cmpvs	r0, r5, ror #8
    259c:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    25a0:	70795465 	rsbsvc	r5, r9, r5, ror #8
    25a4:	4f4e0065 	svcmi	0x004e0065
    25a8:	5f4d4f52 	svcpl	0x004d4f52
    25ac:	70696843 	rsbvc	r6, r9, r3, asr #16
    25b0:	6f666e49 	svcvs	0x00666e49
    25b4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    25b8:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    25bc:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    25c0:	70006e6f 	andvc	r6, r0, pc, ror #28
    25c4:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    25c8:	00657079 	rsbeq	r7, r5, r9, ror r0
    25cc:	70696843 	rsbvc	r6, r9, r3, asr #16
    25d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    25d4:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    25d8:	76655277 			; <UNDEFINED> instruction: 0x76655277
    25dc:	6f697369 	svcvs	0x00697369
    25e0:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    25e4:	50494843 	subpl	r4, r9, r3, asr #16
    25e8:	5059545f 	subspl	r5, r9, pc, asr r4
    25ec:	43435f45 	movtmi	r5, #16197	; 0x3f45
    25f0:	30313331 	eorscc	r3, r1, r1, lsr r3
    25f4:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    25f8:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    25fc:	5f796c69 	svcpl	0x00796c69
    2600:	77680074 			; <UNDEFINED> instruction: 0x77680074
    2604:	00766552 	rsbseq	r6, r6, r2, asr r5
    2608:	50494843 	subpl	r4, r9, r3, asr #16
    260c:	5059545f 	subspl	r5, r9, pc, asr r4
    2610:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2614:	30353632 	eorscc	r3, r5, r2, lsr r6
    2618:	43415000 	movtmi	r5, #4096	; 0x1000
    261c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2620:	5343575f 	movtpl	r5, #14175	; 0x375f
    2624:	696d0050 	stmdbvs	sp!, {r4, r6}^
    2628:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    262c:	46007665 	strmi	r7, [r0], -r5, ror #12
    2630:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2634:	43435f59 	movtmi	r5, #16217	; 0x3f59
    2638:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    263c:	0032525f 	eorseq	r5, r2, pc, asr r2
    2640:	50494843 	subpl	r4, r9, r3, asr #16
    2644:	5059545f 	subspl	r5, r9, pc, asr r4
    2648:	43435f45 	movtmi	r5, #16197	; 0x3f45
    264c:	30353331 	eorscc	r3, r5, r1, lsr r3
    2650:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2654:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2658:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    265c:	61467069 	cmpvs	r6, r9, rrx
    2660:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2664:	43437349 	movtmi	r7, #13129	; 0x3349
    2668:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    266c:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2670:	5f594c49 	svcpl	0x00594c49
    2674:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    2678:	006e776f 	rsbeq	r7, lr, pc, ror #14
    267c:	50494843 	subpl	r4, r9, r3, asr #16
    2680:	5059545f 	subspl	r5, r9, pc, asr r4
    2684:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2688:	30323632 	eorscc	r3, r2, r2, lsr r6
    268c:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2690:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    2694:	41460076 	hvcmi	24582	; 0x6006
    2698:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    269c:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    26a0:	00787836 	rsbseq	r7, r8, r6, lsr r8
    26a4:	70696863 	rsbvc	r6, r9, r3, ror #16
    26a8:	006d6146 	rsbeq	r6, sp, r6, asr #2
    26ac:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    26b0:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    26b4:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    26b8:	6366006e 	cmnvs	r6, #110	; 0x6e
    26bc:	50316766 	eorspl	r6, r1, r6, ror #14
    26c0:	6f746f72 	svcvs	0x00746f72
    26c4:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    26c8:	746f7250 	strbtvc	r7, [pc], #-592	; 26d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xe4>
    26cc:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 2518 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc8>
    26d0:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    26d4:	6f746365 	svcvs	0x00746365
    26d8:	00745f72 	rsbseq	r5, r4, r2, ror pc
    26dc:	544f5250 	strbpl	r5, [pc], #-592	; 26e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf8>
    26e0:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    26e4:	5f544942 	svcpl	0x00544942
    26e8:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    26ec:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    26f0:	5f35315f 	svcpl	0x0035315f
    26f4:	48430034 	stmdami	r3, {r2, r4, r5}^
    26f8:	545f5049 	ldrbpl	r5, [pc], #-73	; 2700 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x114>
    26fc:	5f455059 	svcpl	0x00455059
    2700:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    2704:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2708:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    270c:	5f325f56 	svcpl	0x00325f56
    2710:	41460032 	cmpmi	r6, r2, lsr r0
    2714:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    2718:	3143435f 	cmpcc	r3, pc, asr r3
    271c:	00787833 	rsbseq	r7, r8, r3, lsr r8
    2720:	4b434150 	blmi	10d2c68 <__ccfg+0x10b2cc0>
    2724:	5f454741 	svcpl	0x00454741
    2728:	00377837 	eorseq	r7, r7, r7, lsr r8
    272c:	544f5250 	strbpl	r5, [pc], #-592	; 2734 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>
    2730:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2734:	6b6e555f 	blvs	1b97cb8 <__ccfg+0x1b77d10>
    2738:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    273c:	52574800 	subspl	r4, r7, #0, 16
    2740:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2744:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    2748:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2614 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x28>
    274c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2750:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2754:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    2758:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    275c:	70795470 	rsbsvc	r5, r9, r0, ror r4
    2760:	57480065 	strbpl	r0, [r8, -r5, rrx]
    2764:	5f564552 	svcpl	0x00564552
    2768:	00315f32 	eorseq	r5, r1, r2, lsr pc
    276c:	544f5250 	strbpl	r5, [pc], #-592	; 2774 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x38>
    2770:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2774:	5f544942 	svcpl	0x00544942
    2778:	00454c42 	subeq	r4, r5, r2, asr #24
    277c:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    2780:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    2784:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    2788:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    278c:	57480061 	strbpl	r0, [r8, -r1, rrx]
    2790:	5f564552 	svcpl	0x00564552
    2794:	00335f32 	eorseq	r5, r3, r2, lsr pc
    2798:	70696863 	rsbvc	r6, r9, r3, ror #16
    279c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    27a0:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    27a4:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    27a8:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    27ac:	4f545355 	svcmi	0x00545355
    27b0:	00305f4d 	eorseq	r5, r0, sp, asr #30
    27b4:	50494843 	subpl	r4, r9, r3, asr #16
    27b8:	5059545f 	subspl	r5, r9, pc, asr r4
    27bc:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    27c0:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 267c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x90>
    27c4:	4300315f 	movwmi	r3, #351	; 0x15f
    27c8:	5f504948 	svcpl	0x00504948
    27cc:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    27d0:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    27d4:	00303336 	eorseq	r3, r0, r6, lsr r3
    27d8:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    27dc:	5f315f56 	svcpl	0x00315f56
    27e0:	41500030 	cmpmi	r0, r0, lsr r0
    27e4:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    27e8:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    27ec:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    27f0:	2f2e006e 	svccs	0x002e006e
    27f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    27f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    27fc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2800:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2804:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    2808:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    280c:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    2810:	63660063 	cmnvs	r6, #99	; 0x63
    2814:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    2818:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    281c:	68430064 	stmdavs	r3, {r2, r5, r6}^
    2820:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2824:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    2828:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    282c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2830:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    2834:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    2838:	0065646f 	rsbeq	r6, r5, pc, ror #8
    283c:	70696843 	rsbvc	r6, r9, r3, asr #16
    2840:	6f666e49 	svcvs	0x00666e49
    2844:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2848:	6f6e694d 	svcvs	0x006e694d
    284c:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    2850:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    2854:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    2858:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    285c:	4f4e0076 	svcmi	0x004e0076
    2860:	5f4d4f52 	svcpl	0x004d4f52
    2864:	70696843 	rsbvc	r6, r9, r3, asr #16
    2868:	6f666e49 	svcvs	0x00666e49
    286c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2870:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2874:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    2878:	6f725064 	svcvs	0x00725064
    287c:	6f636f74 	svcvs	0x00636f74
    2880:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    2884:	43415000 	movtmi	r5, #4096	; 0x1000
    2888:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    288c:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    2890:	50005245 	andpl	r5, r0, r5, asr #4
    2894:	414b4341 	cmpmi	fp, r1, asr #6
    2898:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 2359 <NOROM_SetupGetTrimForAmpcompCtrl+0x35>
    289c:	50003578 	andpl	r3, r0, r8, ror r5
    28a0:	616b6361 	cmnvs	fp, r1, ror #6
    28a4:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    28a8:	745f6570 	ldrbvc	r6, [pc], #-1392	; 28b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x174>
    28ac:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    28b0:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    28b4:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    28b8:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    28bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    28c0:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    28c4:	5f514554 	svcpl	0x00514554
    28c8:	00305f32 	eorseq	r5, r0, r2, lsr pc
    28cc:	70696843 	rsbvc	r6, r9, r3, asr #16
    28d0:	6f666e49 	svcvs	0x00666e49
    28d4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    28d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    28dc:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    28e0:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    28e4:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    28e8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 27b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x78>
    28ec:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    28f0:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    28f4:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    28f8:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    28fc:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    2900:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2904:	524f4e00 	subpl	r4, pc, #0, 28
    2908:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 2910 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d4>
    290c:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    2910:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    2914:	00646165 	rsbeq	r6, r4, r5, ror #2
    2918:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    291c:	78754100 	ldmdavc	r5!, {r8, lr}^
    2920:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    2924:	61536964 	cmpvs	r3, r4, ror #18
    2928:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    292c:	00657469 	rsbeq	r7, r5, r9, ror #8
    2930:	36316975 			; <UNDEFINED> instruction: 0x36316975
    2934:	61746144 	cmnvs	r4, r4, asr #2
    2938:	33697500 	cmncc	r9, #0, 10
    293c:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    2940:	00617461 	rsbeq	r7, r1, r1, ror #8
    2944:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2948:	61746144 	cmnvs	r4, r4, asr #2
    294c:	33697500 	cmncc	r9, #0, 10
    2950:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    2954:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    2958:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe8>
    295c:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2960:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2964:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    2968:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    296c:	00657469 	rsbeq	r7, r5, r9, ror #8
    2970:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    2974:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    2978:	61563233 	cmpvs	r6, r3, lsr r2
    297c:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    2980:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    2984:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    2988:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    298c:	00646165 	rsbeq	r6, r4, r5, ror #2
    2990:	4f524f4e 	svcmi	0x00524f4e
    2994:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    2998:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    299c:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    29a0:	00657469 	rsbeq	r7, r5, r9, ror #8
    29a4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29a8:	2f2e2e2f 	svccs	0x002e2e2f
    29ac:	642f2e2e 	strtvs	r2, [pc], #-3630	; 29b4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>
    29b0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    29b4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    29b8:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    29bc:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    29c0:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    29c4:	006b7361 	rsbeq	r7, fp, r1, ror #6
    29c8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29cc:	41676552 	cmnmi	r7, r2, asr r5
    29d0:	00726464 	rsbseq	r6, r2, r4, ror #8
    29d4:	71724962 	cmnvc	r2, r2, ror #18
    29d8:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    29dc:	0064656c 	rsbeq	r6, r4, ip, ror #10
    29e0:	7a69536e 	bvc	1a577a0 <__ccfg+0x1a377f8>
    29e4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    29e8:	734f3233 	movtvc	r3, #62003	; 0xf233
    29ec:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    29f0:	6f58656d 	svcvs	0x0058656d
    29f4:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    29f8:	0056435f 	subseq	r4, r6, pc, asr r3
    29fc:	4f524f4e 	svcmi	0x00524f4e
    2a00:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2a04:	5f464843 	svcpl	0x00464843
    2a08:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    2a0c:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    2a10:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    2a14:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2a18:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2a1c:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2a20:	6f58706d 	svcvs	0x0058706d
    2a24:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2a28:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    2a2c:	61745377 	cmnvs	r4, r7, ror r3
    2a30:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a34:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a38:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a3c:	72617000 	rsbvc	r7, r1, #0
    2a40:	31506d61 	cmpcc	r0, r1, ror #26
    2a44:	72617000 	rsbvc	r7, r1, #0
    2a48:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2a4c:	72617000 	rsbvc	r7, r1, #0
    2a50:	33506d61 	cmpcc	r0, #6208	; 0x1840
    2a54:	65727000 	ldrbvs	r7, [r2, #-0]!
    2a58:	756f6976 	strbvc	r6, [pc, #-2422]!	; 20ea <NOROM_SetupTrimDevice+0x2a>
    2a5c:	61745373 	cmnvs	r4, r3, ror r3
    2a60:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a64:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a68:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a6c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2a70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a74:	2f2e2e2f 	svccs	0x002e2e2f
    2a78:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2a7c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2a80:	736f2f62 	cmnvc	pc, #392	; 0x188
    2a84:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2a88:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2a8c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2a90:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2a94:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2a98:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2a9c:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2aa0:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2aa4:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    2aa8:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2aac:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2ab0:	524f4e00 	subpl	r4, pc, #0, 28
    2ab4:	4f5f4d4f 	svcmi	0x005f4d4f
    2ab8:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2abc:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2ac0:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2ac4:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2ac8:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
    2acc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2ad0:	524f4e00 	subpl	r4, pc, #0, 28
    2ad4:	4f5f4d4f 	svcmi	0x005f4d4f
    2ad8:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2adc:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2ae0:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2ae4:	4f63526f 	svcmi	0x0063526f
    2ae8:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2aec:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2af0:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2af4:	4f4e0063 	svcmi	0x004e0063
    2af8:	5f4d4f52 	svcpl	0x004d4f52
    2afc:	5f43534f 	svcpl	0x0043534f
    2b00:	534f5048 	movtpl	r5, #61512	; 0xf048
    2b04:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2b08:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2b0c:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2b10:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2b14:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    2b18:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2b1c:	00746547 	rsbseq	r6, r4, r7, asr #10
    2b20:	4f524f4e 	svcmi	0x00524f4e
    2b24:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2b28:	5f464843 	svcpl	0x00464843
    2b2c:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2b30:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2b34:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2b38:	416c6174 	smcmi	50708	; 0xc614
    2b3c:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b40:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2b44:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2b48:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2b4c:	32586174 	subscc	r6, r8, #116, 2
    2b50:	63736f00 	cmnvs	r3, #0, 30
    2b54:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2b58:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2b5c:	50480073 	subpl	r0, r8, r3, ror r0
    2b60:	5f43534f 	svcpl	0x0043534f
    2b64:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    2b68:	4f716572 	svcmi	0x00716572
    2b6c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b70:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2b74:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b78:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    2b7c:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2b80:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2b84:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    2b88:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
    2b8c:	61746c65 	cmnvs	r4, r5, ror #24
    2b90:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2b94:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2b98:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2b9c:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    2ba0:	50746966 	rsbspl	r6, r4, r6, ror #18
    2ba4:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2ba8:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2bac:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2bb0:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2bb4:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2bb8:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    2bbc:	6f58656d 	svcvs	0x0058656d
    2bc0:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2bc4:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    2bc8:	43534f00 	cmpmi	r3, #0, 30
    2bcc:	6f536648 	svcvs	0x00536648
    2bd0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2bd4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2bd8:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    2bdc:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2a24 <NOROM_ChipInfo_GetHwRevision+0x4>
    2be0:	31685470 	smccc	34112	; 0x8540
    2be4:	63734f00 	cmnvs	r3, #0, 30
    2be8:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2bec:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2bf0:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2bf4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2bf8:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2bfc:	6b61576c 	blvs	18589b4 <__ccfg+0x1838a0c>
    2c00:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    2c04:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2c08:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c0c:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2c10:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
    2c14:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2c18:	00436765 	subeq	r6, r3, r5, ror #14
    2c1c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2c20:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    2c24:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2c28:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
    2c2c:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2c30:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
    2c34:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
    2c38:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b04 <NOROM_OSCClockSourceSet+0x30>
    2c3c:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2c40:	4f50485f 	svcmi	0x0050485f
    2c44:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2c48:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2c4c:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2c50:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2c54:	4f79636e 	svcmi	0x0079636e
    2c58:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c5c:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
    2c60:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    2c64:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
    2c68:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    2c6c:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
    2c70:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
    2c74:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2c78:	6b636f6c 	blvs	18dea30 <__ccfg+0x18bea88>
    2c7c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2c80:	5f006563 	svcpl	0x00006563
    2c84:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2c88:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2c90 <NOROM_OSCClockSourceGet+0x160>
    2c8c:	43667200 	cmnmi	r6, #0, 4
    2c90:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2c94:	4f716572 	svcmi	0x00716572
    2c98:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c9c:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    2ca0:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    2ca4:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2ca8:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2cac:	4f524f4e 	svcmi	0x00524f4e
    2cb0:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2cb4:	5f464843 	svcpl	0x00464843
    2cb8:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2cbc:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2cc0:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
    2cc4:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    2cc8:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    2ccc:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    2cd0:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2cd4:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2cd8:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2cdc:	00656475 	rsbeq	r6, r5, r5, ror r4
    2ce0:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
    2ce4:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    2ce8:	706f4367 	rsbvc	r4, pc, r7, ror #6
    2cec:	4f4e0079 	svcmi	0x004e0079
    2cf0:	5f4d4f52 	svcpl	0x004d4f52
    2cf4:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2cf8:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
    2cfc:	61745374 	cmnvs	r4, r4, ror r3
    2d00:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2d04:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2d08:	72617000 	rsbvc	r7, r1, #0
    2d0c:	30506d61 	subscc	r6, r0, r1, ror #26
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	00000100 	andeq	r0, r0, r0, lsl #2
      20:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      24:	02018e02 	andeq	r8, r1, #2, 28
      28:	0ec4ce61 	cdpeq	14, 12, cr12, cr4, cr1, {3}
      2c:	00000000 	andeq	r0, r0, r0
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	000001c8 	andeq	r0, r0, r8, asr #3
      3c:	0000006c 	andeq	r0, r0, ip, rrx
			i = k;
      40:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
				j->Next = k;
      44:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      48:	0e0a6101 	adfeqe	f6, f2, f1
}
      4c:	000b410c 	andeq	r4, fp, ip, lsl #2
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	00000234 	andeq	r0, r0, r4, lsr r2
      5c:	00000170 	andeq	r0, r0, r0, ror r1
      60:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
      64:	480e4101 	stmdami	lr, {r0, r8, lr}
      68:	0e0a8502 	cfsh32eq	mvfx8, mvfx10, #2
      6c:	000b4204 	andeq	r4, fp, r4, lsl #4
      70:	0000000c 	andeq	r0, r0, ip
      74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      78:	7c020001 	stcvc	0, cr0, [r2], {1}
      7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000070 	andeq	r0, r0, r0, ror r0
      88:	000003a4 	andeq	r0, r0, r4, lsr #7
      8c:	0000000c 	andeq	r0, r0, ip
	descriptors [fd] = s;
      90:	00000018 	andeq	r0, r0, r8, lsl r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00000070 	andeq	r0, r0, r0, ror r0
      98:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
	if (s == NULL)
      9c:	0000002c 	andeq	r0, r0, ip, lsr #32
		syserror (EMALLOC, "tcv05");
      a0:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      a4:	41000e0a 	tstmi	r0, sl, lsl #28
      a8:	0000000b 	andeq	r0, r0, fp
      ac:	00000018 	andeq	r0, r0, r8, lsl r0
      b0:	00000070 	andeq	r0, r0, r0, ror r0
      b4:	000003dc 	ldrdeq	r0, [r0], -ip
      b8:	0000002a 	andeq	r0, r0, sl, lsr #32
      bc:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      c0:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      c4:	000b4204 	andeq	r4, fp, r4, lsl #4
      c8:	00000018 	andeq	r0, r0, r8, lsl r0
      cc:	00000070 	andeq	r0, r0, r0, ror r0
      d0:	00000408 	andeq	r0, r0, r8, lsl #8
      d4:	0000003c 	andeq	r0, r0, ip, lsr r0
      d8:	83100e41 	tsthi	r0, #1040	; 0x410
      dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      e0:	00018e02 	andeq	r8, r1, r2, lsl #28
      e4:	00000018 	andeq	r0, r0, r8, lsl r0
      e8:	00000070 	andeq	r0, r0, r0, ror r0
      ec:	00000000 	andeq	r0, r0, r0
      f0:	00000040 	andeq	r0, r0, r0, asr #32
        if(offTime > 0)
      f4:	83100e41 	tsthi	r0, #1040	; 0x410
            delay(offTime, Check_PERIOD);
      f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        if(ledFlag == 0) {
      fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     100:	00000014 	andeq	r0, r0, r4, lsl r0
     104:	00000070 	andeq	r0, r0, r0, ror r0
            led = redLed;
     108:	00000000 	andeq	r0, r0, r0
            onTime = redOn;
     10c:	00000020 	andeq	r0, r0, r0, lsr #32
     110:	83080e42 	movwhi	r0, #36418	; 0x8e42
            offTime = greenOff;
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
        if(On)
     11c:	00000070 	andeq	r0, r0, r0, ror r0
     120:	00000444 	andeq	r0, r0, r4, asr #8
            leds(led,1);
     124:	00000054 	andeq	r0, r0, r4, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     128:	87080e42 	strhi	r0, [r8, -r2, asr #28]
            leds(led,0);
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
     130:	00000014 	andeq	r0, r0, r4, lsl r0
     134:	00000070 	andeq	r0, r0, r0, ror r0
     138:	00000498 	muleq	r0, r8, r4
        if(onTime > 0)
     13c:	00000040 	andeq	r0, r0, r0, asr #32
            delay(onTime, OFF_PERIOD);
     140:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        when(&On, Check_PERIOD);
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	00000014 	andeq	r0, r0, r4, lsl r0
        release;
     14c:	00000070 	andeq	r0, r0, r0, ror r0
            led = greenLed;
     150:	000004d8 	ldrdeq	r0, [r0], -r8
     154:	00000028 	andeq	r0, r0, r8, lsr #32
            onTime = greenOn;
     158:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
            offTime = greenOff;
     15c:	00018e02 	andeq	r8, r1, r2, lsl #28
            leds(led,0);
     160:	00000014 	andeq	r0, r0, r4, lsl r0
     164:	00000070 	andeq	r0, r0, r0, ror r0
     168:	00000500 	andeq	r0, r0, r0, lsl #10
     16c:	00000114 	andeq	r0, r0, r4, lsl r1
     170:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     174:	00018e02 	andeq	r8, r1, r2, lsl #28
        leds(led,0);
     178:	0000001c 	andeq	r0, r0, ip, lsl r0
     17c:	00000070 	andeq	r0, r0, r0, ror r0
     180:	00000614 	andeq	r0, r0, r4, lsl r6
     184:	00000050 	andeq	r0, r0, r0, asr r0
}
     188:	83180e41 	tsthi	r8, #1040	; 0x410
     18c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     190:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     194:	00018e02 	andeq	r8, r1, r2, lsl #28
     198:	00000018 	andeq	r0, r0, r8, lsl r0
     19c:	00000070 	andeq	r0, r0, r0, ror r0
     1a0:	00000664 	andeq	r0, r0, r4, ror #12
     1a4:	00000054 	andeq	r0, r0, r4, asr r0
     1a8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     1ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     1b4:	0000000c 	andeq	r0, r0, ip
     1b8:	00000070 	andeq	r0, r0, r0, ror r0
     1bc:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
     1c0:	00000038 	andeq	r0, r0, r8, lsr r0
     1c4:	00000020 	andeq	r0, r0, r0, lsr #32
    word number = 0;
     1c8:	00000070 	andeq	r0, r0, r0, ror r0
    int numbersIndex = 0;
     1cc:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1d0:	00000110 	andeq	r0, r0, r0, lsl r1
        if(settingsInput[i] == ' ') {
     1d4:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     1d8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
            numbers[numbersIndex] = number;
     1dc:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1e0:	89038804 	stmdbhi	r3, {r2, fp, pc}
            number = 0;
     1e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     1e8:	0000000c 	andeq	r0, r0, ip
    redOn = numbers[0];
     1ec:	00000070 	andeq	r0, r0, r0, ror r0
     1f0:	00000000 	andeq	r0, r0, r0
    redOff = numbers[1];
     1f4:	0000000c 	andeq	r0, r0, ip
     1f8:	00000018 	andeq	r0, r0, r8, lsl r0
    greenOn = numbers[2];
     1fc:	00000070 	andeq	r0, r0, r0, ror r0
     200:	00000800 	andeq	r0, r0, r0, lsl #16
    greenOff = numbers[3];
     204:	000000c0 	andeq	r0, r0, r0, asr #1
     208:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
}
     20c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     210:	00000001 	andeq	r0, r0, r1
     214:	00000018 	andeq	r0, r0, r8, lsl r0
            number = number * 10;
     218:	00000070 	andeq	r0, r0, r0, ror r0
            number += settingsInput[i] - 48;
     21c:	000008c0 	andeq	r0, r0, r0, asr #17
     220:	00000044 	andeq	r0, r0, r4, asr #32
     224:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     228:	86038504 	strhi	r8, [r3], -r4, lsl #10
     22c:	00018e02 	andeq	r8, r1, r2, lsl #28
     230:	0000001c 	andeq	r0, r0, ip, lsl r0
fsm root {
     234:	00000070 	andeq	r0, r0, r0, ror r0
     238:	00000904 	andeq	r0, r0, r4, lsl #18
     23c:	0000003c 	andeq	r0, r0, ip, lsr r0
     240:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     244:	86048505 	strhi	r8, [r4], -r5, lsl #10
     248:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     24c:	00000001 	andeq	r0, r0, r1
        ser_outf(Initial, "Enter your name: ");
     250:	00000018 	andeq	r0, r0, r8, lsl r0
     254:	00000070 	andeq	r0, r0, r0, ror r0
        ser_in(Get_Name, username, NAME_LENGTH);
     258:	00000940 	andeq	r0, r0, r0, asr #18
     25c:	000000a4 	andeq	r0, r0, r4, lsr #1
        runfsm blinker;
     260:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     264:	86038504 	strhi	r8, [r3], -r4, lsl #10
        ser_outf(Show_Menu, "Welcome %s\n\r"
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000030 	andeq	r0, r0, r0, lsr r0
     270:	00000070 	andeq	r0, r0, r0, ror r0
        ser_inf(Get_Choice, "%c", &choice);
     274:	000009e4 	andeq	r0, r0, r4, ror #19
     278:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
        if (choice == 'A' || choice == 'a'){
     27c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     280:	86078508 	strhi	r8, [r7], -r8, lsl #10
     284:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
            proceed Adjust_Intervals;
     288:	8a038904 	bhi	e26a0 <__ccfg+0xc26f8>
            proceed Monitor;
     28c:	02018e02 	andeq	r8, r1, #2, 28
        proceed Show_Menu;
     290:	cace0aa2 	bgt	ff382d20 <_estack+0xdf37dd20>
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     294:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     298:	000ec4c5 	andeq	ip, lr, r5, asr #9
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     29c:	00000b42 	andeq	r0, r0, r2, asr #22
     2a0:	0000000c 	andeq	r0, r0, ip
     2a4:	00000070 	andeq	r0, r0, r0, ror r0
        processSettingsInput(settings);
     2a8:	00000000 	andeq	r0, r0, r0
        On = YES;
     2ac:	00000024 	andeq	r0, r0, r4, lsr #32
     2b0:	0000000c 	andeq	r0, r0, ip
        trigger(&On);
     2b4:	00000070 	andeq	r0, r0, r0, ror r0
        proceed Show_Menu;
     2b8:	00000000 	andeq	r0, r0, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     2bc:	00000028 	andeq	r0, r0, r8, lsr #32
     2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c4:	00000070 	andeq	r0, r0, r0, ror r0
     2c8:	00000b9c 	muleq	r0, ip, fp
     2cc:	00000258 	andeq	r0, r0, r8, asr r2
     2d0:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     2d4:	8e028b03 	vmlahi.f64	d8, d2, d3
        proceed Show_Menu;
     2d8:	180e4101 	stmdane	lr, {r0, r8, lr}
     2dc:	00070d42 	andeq	r0, r7, r2, asr #26
        ser_outf(Monitor, "Monitor (press S to stop): ");
     2e0:	00000014 	andeq	r0, r0, r4, lsl r0
     2e4:	00000070 	andeq	r0, r0, r0, ror r0
        displayCycle = YES;
     2e8:	00000000 	andeq	r0, r0, r0
        ser_inf(Await_Stop, "%c", &ch);
     2ec:	00000030 	andeq	r0, r0, r0, lsr r0
     2f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     2f4:	00018e02 	andeq	r8, r1, r2, lsl #28
        if(ch == 'S' || ch == 's'){
     2f8:	00000018 	andeq	r0, r0, r8, lsl r0
     2fc:	00000070 	andeq	r0, r0, r0, ror r0
     300:	00000000 	andeq	r0, r0, r0
            displayCycle = NO;
     304:	0000005c 	andeq	r0, r0, ip, asr r0
     308:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
            proceed Show_Menu;
     30c:	86038504 	strhi	r8, [r3], -r4, lsl #10
        proceed Monitor;
     310:	00018e02 	andeq	r8, r1, r2, lsl #28
     314:	00000014 	andeq	r0, r0, r4, lsl r0
     318:	00000070 	andeq	r0, r0, r0, ror r0
        leds(1, 0);
     31c:	00000df4 	strdeq	r0, [r0], -r4
     320:	00000060 	andeq	r0, r0, r0, rrx
     324:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     328:	00018e02 	andeq	r8, r1, r2, lsl #28
     32c:	0000000c 	andeq	r0, r0, ip
        leds(0, 0);
     330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     334:	7c020001 	stcvc	0, cr0, [r2], {1}
     338:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     33c:	00000018 	andeq	r0, r0, r8, lsl r0
     340:	0000032c 	andeq	r0, r0, ip, lsr #6
     344:	00000e54 	andeq	r0, r0, r4, asr lr
        } else if (choice == 'S' || choice == 's') {
     348:	0000003c 	andeq	r0, r0, ip, lsr r0
            proceed Stop;
     34c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        } else if (choice == 'V' || choice == 'v') {
     350:	86038504 	strhi	r8, [r3], -r4, lsl #10
            proceed View_Settings;
     354:	00018e02 	andeq	r8, r1, r2, lsl #28
        } else if (choice == 'M' || choice == 'm') {
     358:	00000018 	andeq	r0, r0, r8, lsl r0
            proceed Monitor;
     35c:	0000032c 	andeq	r0, r0, ip, lsr #6
     360:	00000e90 	muleq	r0, r0, lr
     364:	00000080 	andeq	r0, r0, r0, lsl #1
     368:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     36c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     370:	00000001 	andeq	r0, r0, r1
     374:	0000000c 	andeq	r0, r0, ip
     378:	0000032c 	andeq	r0, r0, ip, lsr #6
     37c:	00000f10 	andeq	r0, r0, r0, lsl pc
     380:	00000018 	andeq	r0, r0, r8, lsl r0
     384:	00000014 	andeq	r0, r0, r4, lsl r0
     388:	0000032c 	andeq	r0, r0, ip, lsr #6
     38c:	00000000 	andeq	r0, r0, r0
     390:	00000024 	andeq	r0, r0, r4, lsr #32
     394:	83080e41 	movwhi	r0, #36417	; 0x8e41
     398:	00018e02 	andeq	r8, r1, r2, lsl #28
     39c:	00000014 	andeq	r0, r0, r4, lsl r0
     3a0:	0000032c 	andeq	r0, r0, ip, lsr #6
static void devinit_uart (int devnum) {
     3a4:	00000f28 	andeq	r0, r0, r8, lsr #30
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	00000010 	andeq	r0, r0, r0, lsl r0
     3ac:	83080e42 	movwhi	r0, #36418	; 0x8e42
void udelay (volatile word n) {
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3b4:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n) {
     3b8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3bc:	00000000 	andeq	r0, r0, r0
}
     3c0:	0000002c 	andeq	r0, r0, ip, lsr #32
	while (n--);
     3c4:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3cc:	00000014 	andeq	r0, r0, r4, lsl r0
		n--;
     3d0:	0000032c 	andeq	r0, r0, ip, lsr #6
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	0000004c 	andeq	r0, r0, ip, asr #32
void mdelay (volatile word n) {
     3dc:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n) {
     3e4:	0000000c 	andeq	r0, r0, ip
     3e8:	0000032c 	andeq	r0, r0, ip, lsr #6
}
     3ec:	00000000 	andeq	r0, r0, r0
		udelay (999);
     3f0:	00000006 	andeq	r0, r0, r6
     3f4:	00000028 	andeq	r0, r0, r8, lsr #32
		n--;
     3f8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3fc:	00000f38 	andeq	r0, r0, r8, lsr pc
     400:	000000cc 	andeq	r0, r0, ip, asr #1
     404:	83180e41 	tsthi	r8, #1040	; 0x410
void __pi_ondomain (lword d) {
     408:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     40c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		if (__pi_systat.effpdm > 1)
     410:	02018e02 	andeq	r8, r1, #2, 28
     414:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
			__pi_systat.effpdm = 1;
     418:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
	PRCMPowerDomainOn (d);
     41c:	0b42000e 	bleq	108045c <__ccfg+0x10604b4>
     420:	00000014 	andeq	r0, r0, r4, lsl r0
     424:	0000032c 	andeq	r0, r0, ip, lsr #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     428:	00001004 	andeq	r1, r0, r4
     42c:	00000014 	andeq	r0, r0, r4, lsl r0
     430:	83080e41 	movwhi	r0, #36417	; 0x8e41
	__pi_systat.ondmns |= d;
     434:	00018e02 	andeq	r8, r1, r2, lsl #28
     438:	00000014 	andeq	r0, r0, r4, lsl r0
}
     43c:	0000032c 	andeq	r0, r0, ip, lsr #6
     440:	00001018 	andeq	r1, r0, r8, lsl r0
void __pi_syserror (word ec, const char *m) {
     444:	00000034 	andeq	r0, r0, r4, lsr r0
	diag ("SYSERR: %x, %s", ec, m);
     448:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     450:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     454:	0000032c 	andeq	r0, r0, ip, lsr #6
     458:	0000104c 	andeq	r1, r0, ip, asr #32
     45c:	00000034 	andeq	r0, r0, r4, lsr r0
		all_leds_blink;
     460:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     464:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     468:	00000001 	andeq	r0, r0, r1
     46c:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     470:	0000032c 	andeq	r0, r0, ip, lsr #6
     474:	00000000 	andeq	r0, r0, r0
     478:	0000002c 	andeq	r0, r0, ip, lsr #32
     47c:	83100e41 	tsthi	r0, #1040	; 0x410
     480:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     484:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (1) {
     488:	00000014 	andeq	r0, r0, r4, lsl r0
     48c:	0000032c 	andeq	r0, r0, ip, lsr #6
     490:	00001080 	andeq	r1, r0, r0, lsl #1
     494:	00000024 	andeq	r0, r0, r4, lsr #32
void tci_run_delay_timer () {
     498:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	setdel = __pi_mintk - __pi_old;
     49c:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a0:	00000018 	andeq	r0, r0, r8, lsl r0
     4a4:	0000032c 	andeq	r0, r0, ip, lsr #6
     4a8:	000010a4 	andeq	r1, r0, r4, lsr #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4ac:	00000038 	andeq	r0, r0, r8, lsr r0
     4b0:	83100e41 	tsthi	r0, #1040	; 0x410
     4b4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4b8:	00018e02 	andeq	r8, r1, r2, lsl #28
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4bc:	0000000c 	andeq	r0, r0, ip
	sti_tim;
     4c0:	0000032c 	andeq	r0, r0, ip, lsr #6
}
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	00000014 	andeq	r0, r0, r4, lsl r0
     4cc:	00000014 	andeq	r0, r0, r4, lsl r0
     4d0:	0000032c 	andeq	r0, r0, ip, lsr #6
     4d4:	00000000 	andeq	r0, r0, r0
	cli_aux;
     4d8:	00000040 	andeq	r0, r0, r0, asr #32
     4dc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
     4e8:	0000032c 	andeq	r0, r0, ip, lsr #6
     4ec:	00000000 	andeq	r0, r0, r0
	sti_aux;
     4f0:	00000018 	andeq	r0, r0, r8, lsl r0
}
     4f4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4fc:	0000000c 	andeq	r0, r0, ip
void AONRTCIntHandler () {
     500:	0000032c 	andeq	r0, r0, ip, lsr #6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     504:	000010dc 	ldrdeq	r1, [r0], -ip
     508:	00000024 	andeq	r0, r0, r4, lsr #32
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     50c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [0] == 0)
     510:	0000032c 	andeq	r0, r0, ip, lsr #6
     514:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [0])) {
     518:	00000020 	andeq	r0, r0, r0, lsr #32
     51c:	0000000c 	andeq	r0, r0, ip
			(*(__pi_utims [0]))--;
     520:	0000032c 	andeq	r0, r0, ip, lsr #6
		if (__pi_utims [1] == 0)
     524:	00001100 	andeq	r1, r0, r0, lsl #2
		if (*(__pi_utims [1])) {
     528:	0000000e 	andeq	r0, r0, lr
			aux_timer_inactive = 0;
     52c:	0000000c 	andeq	r0, r0, ip
			(*(__pi_utims [1]))--;
     530:	0000032c 	andeq	r0, r0, ip, lsr #6
		if (__pi_utims [2] == 0)
     534:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
     538:	00000010 	andeq	r0, r0, r0, lsl r0
			(*(__pi_utims [2]))--;
     53c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [3] != 0) {
     540:	0000032c 	andeq	r0, r0, ip, lsr #6
			if (*(__pi_utims [3])) {
     544:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
     548:	0000001c 	andeq	r0, r0, ip, lsl r0
				(*(__pi_utims [3]))--;
     54c:	0000000c 	andeq	r0, r0, ip
	if (__pi_systat.ledsts) {
     550:	0000032c 	andeq	r0, r0, ip, lsr #6
     554:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
     558:	00000010 	andeq	r0, r0, r0, lsl r0
     55c:	0000000c 	andeq	r0, r0, ip
			if (__pi_systat.ledblk) {
     560:	0000032c 	andeq	r0, r0, ip, lsr #6
     564:	00000000 	andeq	r0, r0, r0
     568:	00000006 	andeq	r0, r0, r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     56c:	0000000c 	andeq	r0, r0, ip
     570:	0000032c 	andeq	r0, r0, ip, lsr #6
				if (__pi_systat.ledsts & 0x2)
     574:	0000110e 	andeq	r1, r0, lr, lsl #2
     578:	00000014 	andeq	r0, r0, r4, lsl r0
     57c:	0000000c 	andeq	r0, r0, ip
				if (__pi_systat.ledsts & 0x4)
     580:	0000032c 	andeq	r0, r0, ip, lsr #6
				__pi_systat.ledblk = 0;
     584:	00000000 	andeq	r0, r0, r0
     588:	0000000e 	andeq	r0, r0, lr
			if (__pi_systat.fstblk)
     58c:	00000014 	andeq	r0, r0, r4, lsl r0
     590:	0000032c 	andeq	r0, r0, ip, lsr #6
				__pi_systat.ledblc = 200;
     594:	00001124 	andeq	r1, r0, r4, lsr #2
	if (events & AON_RTC_EVFLAGS_CH0) {
     598:	00000024 	andeq	r0, r0, r4, lsr #32
		cli_tim;
     59c:	83080e41 	movwhi	r0, #36417	; 0x8e41
		__pi_new += setdel;
     5a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5a4:	00000020 	andeq	r0, r0, r0, lsr #32
		setdel = 0;
     5a8:	0000032c 	andeq	r0, r0, ip, lsr #6
		RISE_N_SHINE;
     5ac:	00001148 	andeq	r1, r0, r8, asr #2
		__pi_new += setdel;
     5b0:	0000009c 	muleq	r0, ip, r0
		RISE_N_SHINE;
     5b4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     5b8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		aux_timer_inactive = 1;
     5bc:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     5c0:	89038804 	stmdbhi	r3, {r2, fp, pc}
				if (__pi_systat.ledsts & 0x1)
     5c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5c8:	00000014 	andeq	r0, r0, r4, lsl r0
     5cc:	0000032c 	andeq	r0, r0, ip, lsr #6
				if (__pi_systat.ledsts & 0x2)
     5d0:	000011e4 	andeq	r1, r0, r4, ror #3
     5d4:	00000050 	andeq	r0, r0, r0, asr r0
     5d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
				if (__pi_systat.ledsts & 0x8)
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 1;
     5e0:	00000014 	andeq	r0, r0, r4, lsl r0
     5e4:	0000032c 	andeq	r0, r0, ip, lsr #6
		if (aux_timer_inactive) {
     5e8:	00001234 	andeq	r1, r0, r4, lsr r2
			cli_aux;
     5ec:	00000048 	andeq	r0, r0, r8, asr #32
     5f0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f8:	00000014 	andeq	r0, r0, r4, lsl r0
     5fc:	0000032c 	andeq	r0, r0, ip, lsr #6
     600:	0000127c 	andeq	r1, r0, ip, ror r2
     604:	00000050 	andeq	r0, r0, r0, asr r0
     608:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
     610:	00000020 	andeq	r0, r0, r0, lsr #32
word tci_update_delay_ticks (Boolean force) {
     614:	0000032c 	andeq	r0, r0, ip, lsr #6
	cli_tim;
     618:	00000000 	andeq	r0, r0, r0
     61c:	00000058 	andeq	r0, r0, r8, asr r0
	if (setdel) {
     620:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     624:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     628:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     62c:	89038804 	stmdbhi	r3, {r2, fp, pc}
     630:	00018e02 	andeq	r8, r1, r2, lsl #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     634:	00000018 	andeq	r0, r0, r8, lsl r0
				AON_RTC_O_CH0CMP)) - gettav ());
     638:	0000032c 	andeq	r0, r0, ip, lsr #6
	return NO;
     63c:	000012cc 	andeq	r1, r0, ip, asr #5
			setdel = 0;
     640:	000000a8 	andeq	r0, r0, r8, lsr #1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     644:	83100e44 	tsthi	r0, #68, 28	; 0x440
     648:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     64c:	00018e02 	andeq	r8, r1, r2, lsl #28
		sti_tim;
     650:	00000018 	andeq	r0, r0, r8, lsl r0
		return YES;
     654:	0000032c 	andeq	r0, r0, ip, lsr #6
     658:	00001374 	andeq	r1, r0, r4, ror r3
     65c:	00000034 	andeq	r0, r0, r4, lsr r0
     660:	83100e41 	tsthi	r0, #1040	; 0x410
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     664:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	UARTDisable (UART0_BASE);
     668:	00018e02 	andeq	r8, r1, r2, lsl #28
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     66c:	0000000c 	andeq	r0, r0, ip
	UARTDisable (UART0_BASE);
     670:	0000032c 	andeq	r0, r0, ip, lsr #6
	UARTConfigSetExpClk (UART0_BASE,
     674:	000013a8 	andeq	r1, r0, r8, lsr #7
     678:	00000018 	andeq	r0, r0, r8, lsl r0
     67c:	00000014 	andeq	r0, r0, r4, lsl r0
     680:	0000032c 	andeq	r0, r0, ip, lsr #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     684:	00000000 	andeq	r0, r0, r0
     688:	00000030 	andeq	r0, r0, r0, lsr r0
     68c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     690:	00018e02 	andeq	r8, r1, r2, lsl #28
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	0000032c 	andeq	r0, r0, ip, lsr #6
	urates [0] = rate;
     69c:	00000000 	andeq	r0, r0, r0
}
     6a0:	00000038 	andeq	r0, r0, r8, lsr r0
     6a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ac:	00000040 	andeq	r0, r0, r0, asr #32
     6b0:	0000032c 	andeq	r0, r0, ip, lsr #6
     6b4:	000013c0 	andeq	r1, r0, r0, asr #7
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	0000013c 	andeq	r0, r0, ip, lsr r1
     6bc:	80100e41 	andshi	r0, r0, r1, asr #28
     6c0:	82038104 	andhi	r8, r3, #4, 2
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6c4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     6c8:	0b84380e 	bleq	fe10e708 <_estack+0xde109708>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6cc:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6d0:	07880887 	streq	r0, [r8, r7, lsl #17]
	__pi_uart_setrate (urates [0], __pi_uart);
     6d4:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     6d8:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     6dc:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6e0:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     6e4:	c341100e 	movtgt	r1, #4110	; 0x100e
     6e8:	0ec0c1c2 	acseqdm	f4, f2
     6ec:	000b4100 	andeq	r4, fp, r0, lsl #2
	switch (operation) {
     6f0:	0000000c 	andeq	r0, r0, ip
static int ioreq_uart_a (int operation, char *buf, int len) {
     6f4:	0000032c 	andeq	r0, r0, ip, lsr #6
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	00000024 	andeq	r0, r0, r4, lsr #32
     700:	0000000c 	andeq	r0, r0, ip
     704:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				*buf++ = uart_a_read;
     708:	7c020001 	stcvc	0, cr0, [r2], {1}
     70c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			while (len && uart_a_char_available) {
     710:	00000014 	andeq	r0, r0, r4, lsl r0
     714:	00000700 	andeq	r0, r0, r0, lsl #14
     718:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     71c:	00000016 	andeq	r0, r0, r6, lsl r0
}
     720:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     724:	00018e02 	andeq	r8, r1, r2, lsl #28
			uart_a_disable_int;
     728:	0000000c 	andeq	r0, r0, ip
			if (uart_a_char_available) {
     72c:	00000700 	andeq	r0, r0, r0, lsl #14
				*buf++ = uart_a_read;
     730:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     734:	0000001a 	andeq	r0, r0, sl, lsl r0
     738:	00000018 	andeq	r0, r0, r8, lsl r0
			if (uart_a_char_available) {
     73c:	00000700 	andeq	r0, r0, r0, lsl #14
     740:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
     744:	0000000e 	andeq	r0, r0, lr
     748:	83080e41 	movwhi	r0, #36417	; 0x8e41
				goto Redo_rx;
     74c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     750:	000ec3ce 	andeq	ip, lr, lr, asr #7
     754:	00000018 	andeq	r0, r0, r8, lsl r0
			return -2;
     758:	00000700 	andeq	r0, r0, r0, lsl #14
     75c:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
     760:	0000004c 	andeq	r0, r0, ip, asr #32
     764:	83100e41 	tsthi	r0, #1040	; 0x410
			while (len && uart_a_room_in_tx) {
     768:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     76c:	00018e02 	andeq	r8, r1, r2, lsl #28
     770:	00000020 	andeq	r0, r0, r0, lsr #32
			if (len != operation) {
     774:	00000700 	andeq	r0, r0, r0, lsl #14
			uart_a_disable_int;
     778:	00000000 	andeq	r0, r0, r0
     77c:	0000008c 	andeq	r0, r0, ip, lsl #1
			if (uart_a_room_in_tx) {
     780:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     784:	5f018e02 	svcpl	0x00018e02
				uart_a_enable_int;
     788:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     78c:	560b4200 	strpl	r4, [fp], -r0, lsl #4
				*buf++ = uart_a_read;
     790:	000ec4ce 	andeq	ip, lr, lr, asr #9
			if (uart_a_room_in_tx) {
     794:	00000020 	andeq	r0, r0, r0, lsr #32
				uart_a_write (*buf);
     798:	00000700 	andeq	r0, r0, r0, lsl #14
     79c:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7a0:	00000070 	andeq	r0, r0, r0, ror r0
     7a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			uart_a_enable_int;
     7a8:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7ac:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7b0:	430b4200 	movwmi	r4, #45568	; 0xb200
			return 0;
     7b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
			if (len == UART_CNTRL_SETRATE) {
     7b8:	0000003c 	andeq	r0, r0, ip, lsr r0
				if (__pi_uart_setrate (*((word*)buf),
     7bc:	00000700 	andeq	r0, r0, r0, lsl #14
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	000000c0 	andeq	r0, r0, r0, asr #1
				syserror (EREQPAR, "uar");
     7c8:	82080e41 	andhi	r0, r8, #1040	; 0x410
			syserror (ENOOPER, "uai");
     7cc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
			if (len == UART_CNTRL_GETRATE) {
     7d0:	0a84300e 	beq	fe10c810 <_estack+0xde107810>
				return 1;
     7d4:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     7d8:	06880787 	streq	r0, [r8], r7, lsl #15
			syserror (ENOOPER, "uai");
     7dc:	048a0589 	streq	r0, [sl], #1417	; 0x589
     7e0:	0a6b038e 	beq	1ac1620 <__ccfg+0x1aa1678>
     7e4:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     7e8:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     7ec:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     7f0:	c2c34108 	sbcgt	r4, r3, #8, 2
     7f4:	0b41000e 	bleq	1040834 <__ccfg+0x102088c>
     7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7fc:	00000700 	andeq	r0, r0, r0, lsl #14
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     800:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     804:	0000006c 	andeq	r0, r0, ip, rrx
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     808:	83180e42 	tsthi	r8, #1056	; 0x420
     80c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     810:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     814:	00018e02 	andeq	r8, r1, r2, lsl #28
     818:	0000000c 	andeq	r0, r0, ip
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     81c:	00000700 	andeq	r0, r0, r0, lsl #14
     820:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     824:	00000024 	andeq	r0, r0, r4, lsr #32
     828:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, READ));
     82c:	00000700 	andeq	r0, r0, r0, lsl #14
     830:	00000000 	andeq	r0, r0, r0
     834:	00000080 	andeq	r0, r0, r0, lsl #1
     838:	83100e42 	tsthi	r0, #1056	; 0x420
     83c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     840:	00018e02 	andeq	r8, r1, r2, lsl #28
     844:	00000014 	andeq	r0, r0, r4, lsl r0
     848:	00000700 	andeq	r0, r0, r0, lsl #14
     84c:	00000000 	andeq	r0, r0, r0
     850:	00000070 	andeq	r0, r0, r0, ror r0
     854:	83080e42 	movwhi	r0, #36418	; 0x8e42
     858:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     85c:	00000018 	andeq	r0, r0, r8, lsl r0
     860:	00000700 	andeq	r0, r0, r0, lsl #14
     864:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
     868:	00000078 	andeq	r0, r0, r8, ror r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     86c:	83100e42 	tsthi	r0, #1056	; 0x420
     870:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		RISE_N_SHINE;
     874:	00018e02 	andeq	r8, r1, r2, lsl #28
     878:	00000020 	andeq	r0, r0, r0, lsr #32
     87c:	00000700 	andeq	r0, r0, r0, lsl #14
		i_trigger (devevent (UART_A, WRITE));
     880:	00000000 	andeq	r0, r0, r0
     884:	000000bc 	strheq	r0, [r0], -ip
     888:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     88c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     890:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     894:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     898:	000b4114 	andeq	r4, fp, r4, lsl r1
     89c:	00000018 	andeq	r0, r0, r8, lsl r0
     8a0:	00000700 	andeq	r0, r0, r0, lsl #14
     8a4:	00000000 	andeq	r0, r0, r0
     8a8:	0000003a 	andeq	r0, r0, sl, lsr r0
}
     8ac:	83100e41 	tsthi	r0, #1040	; 0x410
     8b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8b8:	00000018 	andeq	r0, r0, r8, lsl r0
     8bc:	00000700 	andeq	r0, r0, r0, lsl #14
void __buttons_setirq (int val) {
     8c0:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8c4:	00000038 	andeq	r0, r0, r8, lsr r0
     8c8:	83100e41 	tsthi	r0, #1040	; 0x410
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d4:	0000000c 	andeq	r0, r0, ip
		bn = BUTTON_GPIO (__button_list [i]);
     8d8:	00000700 	andeq	r0, r0, r0, lsl #14
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	0000000a 	andeq	r0, r0, sl
     8e4:	00000018 	andeq	r0, r0, r8, lsl r0
     8e8:	00000700 	andeq	r0, r0, r0, lsl #14
     8ec:	00000000 	andeq	r0, r0, r0
     8f0:	0000002c 	andeq	r0, r0, ip, lsr #32
}
     8f4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     8f8:	4c018e02 	stcmi	14, cr8, [r1], {2}
     8fc:	000ec4ce 	andeq	ip, lr, lr, asr #9
     900:	0000001c 	andeq	r0, r0, ip, lsl r0
void __pinlist_setirq (int val) {
     904:	00000700 	andeq	r0, r0, r0, lsl #14
	for (i = 0; i < N_PINLIST; i++) {
     908:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     90c:	00000060 	andeq	r0, r0, r0, rrx
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	83080e41 	movwhi	r0, #36417	; 0x8e41
	for (i = 0; i < N_PINLIST; i++) {
     914:	61018e02 	tstvs	r1, r2, lsl #28
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     918:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     91c:	000b4300 	andeq	r4, fp, r0, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     920:	00000014 	andeq	r0, r0, r4, lsl r0
     924:	00000700 	andeq	r0, r0, r0, lsl #14
     928:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     92c:	00000040 	andeq	r0, r0, r0, asr #32
}
     930:	83080e42 	movwhi	r0, #36418	; 0x8e42
     934:	00018e02 	andeq	r8, r1, r2, lsl #28
     938:	00000014 	andeq	r0, r0, r4, lsl r0
     93c:	00000700 	andeq	r0, r0, r0, lsl #14
void GPIOIntHandler () {
     940:	00000000 	andeq	r0, r0, r0
if (buttons_int) {
     944:	0000002c 	andeq	r0, r0, ip, lsr #32
     948:	83080e42 	movwhi	r0, #36418	; 0x8e42
	buttons_disable ();
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
     950:	0000001c 	andeq	r0, r0, ip, lsl r0
	i_trigger ((aword)&__button_list);
     954:	00000700 	andeq	r0, r0, r0, lsl #14
     958:	00000000 	andeq	r0, r0, r0
     95c:	0000003c 	andeq	r0, r0, ip, lsr r0
     960:	83180e41 	tsthi	r8, #1040	; 0x410
     964:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     968:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     96c:	00018e02 	andeq	r8, r1, r2, lsl #28
     970:	0000000c 	andeq	r0, r0, ip
     974:	00000700 	andeq	r0, r0, r0, lsl #14
     978:	00000000 	andeq	r0, r0, r0
     97c:	00000006 	andeq	r0, r0, r6
	RISE_N_SHINE;
     980:	0000001c 	andeq	r0, r0, ip, lsl r0
     984:	00000700 	andeq	r0, r0, r0, lsl #14
     988:	00000000 	andeq	r0, r0, r0
if (pin_sensor_int) {
     98c:	00000068 	andeq	r0, r0, r8, rrx
     990:	83180e41 	tsthi	r8, #1040	; 0x410
	i_trigger ((aword)(&__input_pins));
     994:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     998:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     99c:	00018e02 	andeq	r8, r1, r2, lsl #28
     9a0:	00000014 	andeq	r0, r0, r4, lsl r0
     9a4:	00000700 	andeq	r0, r0, r0, lsl #14
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	00000050 	andeq	r0, r0, r0, asr r0
     9b0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     9b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9b8:	0000002c 	andeq	r0, r0, ip, lsr #32
     9bc:	00000700 	andeq	r0, r0, r0, lsl #14
	__pinsen_disable_and_clear;
     9c0:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
     9c4:	0000009c 	muleq	r0, ip, r0
     9c8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9cc:	86088509 	strhi	r8, [r8], -r9, lsl #10
}
     9d0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9d4:	8a048905 	bhi	122df0 <__ccfg+0x102e48>
     9d8:	8e028b03 	vmlahi.f64	d8, d2, d3
     9dc:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9e0:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
void system_init () {
     9e4:	00000b42 	andeq	r0, r0, r2, asr #22
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9e8:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     9ec:	00000700 	andeq	r0, r0, r0, lsl #14
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	00000040 	andeq	r0, r0, r0, asr #32
     9f8:	83080e42 	movwhi	r0, #36418	; 0x8e42
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     9fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     a00:	00000014 	andeq	r0, r0, r4, lsl r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a04:	00000700 	andeq	r0, r0, r0, lsl #14
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	00000034 	andeq	r0, r0, r4, lsr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a10:	83080e42 	movwhi	r0, #36418	; 0x8e42
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a18:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a1c:	00000700 	andeq	r0, r0, r0, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a20:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a24:	0000003c 	andeq	r0, r0, ip, lsr r0
		pin = (port_confs [i] >> 19) & 0x1f;
     a28:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a2c:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
		pin = (port_confs [i] >> 19) & 0x1f;
     a30:	000ec4ce 	andeq	ip, lr, lr, asr #9
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a34:	00000018 	andeq	r0, r0, r8, lsl r0
     a38:	00000700 	andeq	r0, r0, r0, lsl #14
     a3c:	00000000 	andeq	r0, r0, r0
     a40:	0000003c 	andeq	r0, r0, ip, lsr r0
		if (port_confs [i] & 0x80)
     a44:	83100e42 	tsthi	r0, #1056	; 0x420
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a4c:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (port_confs [i] & 0x40)
     a50:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a54:	00000700 	andeq	r0, r0, r0, lsl #14
     a58:	000014fc 	strdeq	r1, [r0], -ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a5c:	00000002 	andeq	r0, r0, r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a60:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	all_leds_blink;
     a68:	7c020001 	stcvc	0, cr0, [r2], {1}
     a6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a70:	0000000c 	andeq	r0, r0, ip
     a74:	00000a60 	andeq	r0, r0, r0, ror #20
     a78:	000014fe 	strdeq	r1, [r0], -lr
     a7c:	00000002 	andeq	r0, r0, r2
     a80:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a84:	00000a60 	andeq	r0, r0, r0, ror #20
     a88:	00001500 	andeq	r1, r0, r0, lsl #10
     a8c:	00000002 	andeq	r0, r0, r2
     a90:	0000000c 	andeq	r0, r0, ip
     a94:	00000a60 	andeq	r0, r0, r0, ror #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     a98:	00001502 	andeq	r1, r0, r2, lsl #10
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     a9c:	00000002 	andeq	r0, r0, r2
     aa0:	00000014 	andeq	r0, r0, r4, lsl r0
	IntEnable (INT_AON_RTC_COMB);
     aa4:	00000a60 	andeq	r0, r0, r0, ror #20
     aa8:	00001504 	andeq	r1, r0, r4, lsl #10
     aac:	00000044 	andeq	r0, r0, r4, asr #32
	__pi_malloc_init ();
     ab0:	83080e41 	movwhi	r0, #36417	; 0x8e41
	IntEnable (INT_AON_GPIO_EDGE);
     ab4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ab8:	0000000c 	andeq	r0, r0, ip
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ac0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ac4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ac8:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     acc:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
     ad0:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ad4:	00000002 	andeq	r0, r0, r2
     ad8:	00000018 	andeq	r0, r0, r8, lsl r0
     adc:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
	urates [0] = UART_RATE / 100;
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00000058 	andeq	r0, r0, r8, asr r0
	reinit_uart ();
     ae8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	EXTRA_INITIALIZERS;
     aec:	86038504 	strhi	r8, [r3], -r4, lsl #10
     af0:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     af4:	0000000c 	andeq	r0, r0, ip
     af8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     afc:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b04:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b08:	00000af4 	strdeq	r0, [r0], -r4
     b0c:	00000000 	andeq	r0, r0, r0
			devinit [i] . init (devinit [i] . param);
     b10:	000000cc 	andeq	r0, r0, ip, asr #1
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b14:	83100e42 	tsthi	r0, #1056	; 0x420
     b18:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b1c:	02018e02 	andeq	r8, r1, #2, 28
	IntEnable (INT_UART0_COMB);
     b20:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
     b24:	000ec3c4 	andeq	ip, lr, r4, asr #7
}
     b28:	ce420b44 	vmlsgt.f64	d16, d2, d4
	tci_run_auxiliary_timer ();
     b2c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
		diag ("");
     b30:	00000000 	andeq	r0, r0, r0
     b34:	00000024 	andeq	r0, r0, r4, lsr #32
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b38:	00000af4 	strdeq	r0, [r0], -r4
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b3c:	00000000 	andeq	r0, r0, r0
		diag ("Leftover RAM: %d bytes",
     b40:	00000038 	andeq	r0, r0, r8, lsr r0
     b44:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     b48:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b4c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b50:	4a0b4300 	bmi	2d1758 <__ccfg+0x2b17b0>
     b54:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b58:	000b4300 	andeq	r4, fp, r0, lsl #6
     b5c:	0000000c 	andeq	r0, r0, ip
     b60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b64:	7c020001 	stcvc	0, cr0, [r2], {1}
     b68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b6c:	00000018 	andeq	r0, r0, r8, lsl r0
     b70:	00000b5c 	andeq	r0, r0, ip, asr fp
     b74:	00001550 	andeq	r1, r0, r0, asr r5
     b78:	00000034 	andeq	r0, r0, r4, lsr r0
     b7c:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     b80:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b84:	00018e02 	andeq	r8, r1, r2, lsl #28
     b88:	00000018 	andeq	r0, r0, r8, lsl r0
     b8c:	00000b5c 	andeq	r0, r0, ip, asr fp
     b90:	00001584 	andeq	r1, r0, r4, lsl #11
     b94:	00000030 	andeq	r0, r0, r0, lsr r0
     b98:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
__attribute__ ((noreturn)) void __pi_release () {
     b9c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     ba0:	00000001 	andeq	r0, r0, r1
     ba4:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     ba8:	00000b5c 	andeq	r0, r0, ip, asr fp
	check_stack_overflow;
     bac:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     bb0:	00000018 	andeq	r0, r0, r8, lsl r0
     bb4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	update_n_wake (MAX_WORD, NO);
     bb8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc0:	00000b5c 	andeq	r0, r0, ip, asr fp
	for_all_tasks (__pi_curr) {
     bc4:	000015cc 	andeq	r1, r0, ip, asr #11
     bc8:	00000054 	andeq	r0, r0, r4, asr r0
     bcc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
  __ASM volatile ("cpsid i" : : : "memory");
     bd0:	86058506 	strhi	r8, [r5], -r6, lsl #10
	__SLEEP;
     bd4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bd8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     be0:	00000b5c 	andeq	r0, r0, ip, asr fp
	system_event_count ++;
     be4:	00001620 	andeq	r1, r0, r0, lsr #12
     be8:	00000040 	andeq	r0, r0, r0, asr #32
	switch (__pi_systat.effpdm) {
     bec:	83180e41 	tsthi	r8, #1040	; 0x410
     bf0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     bf4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     bf8:	00018e02 	andeq	r8, r1, r2, lsl #28
			__WFI ();
     bfc:	00000014 	andeq	r0, r0, r4, lsl r0
     c00:	00000b5c 	andeq	r0, r0, ip, asr fp
     c04:	00001660 	andeq	r1, r0, r0, ror #12
	check_stack_overflow;
     c08:	00000024 	andeq	r0, r0, r4, lsr #32
     c0c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	00000014 	andeq	r0, r0, r4, lsl r0
			(__pi_curr->code) (tstate (__pi_curr));
     c18:	00000b5c 	andeq	r0, r0, ip, asr fp
			goto Redo;
     c1c:	00001684 	andeq	r1, r0, r4, lsl #13
	for_all_tasks (__pi_curr) {
     c20:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c24:	83080e41 	movwhi	r0, #36417	; 0x8e41
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c30:	00000b5c 	andeq	r0, r0, ip, asr fp
     c34:	00001698 	muleq	r0, r8, r6
     c38:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c40:	00000b5c 	andeq	r0, r0, ip, asr fp
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c44:	00000000 	andeq	r0, r0, r0
     c48:	00000064 	andeq	r0, r0, r4, rrx
			__WFI ();
     c4c:	83180e41 	tsthi	r8, #1040	; 0x410
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c50:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c54:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
     c58:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     c60:	00000b5c 	andeq	r0, r0, ip, asr fp
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     c64:	00000000 	andeq	r0, r0, r0
     c68:	00000128 	andeq	r0, r0, r8, lsr #2
			PRCMPowerDomainOff (__pi_systat.ondmns |
     c6c:	83180e41 	tsthi	r8, #1040	; 0x410
     c70:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c74:	87038604 	strhi	r8, [r3, -r4, lsl #12]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c78:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c7c:	00000024 	andeq	r0, r0, r4, lsr #32
     c80:	00000b5c 	andeq	r0, r0, ip, asr fp
     c84:	00000000 	andeq	r0, r0, r0
     c88:	000000ec 	andeq	r0, r0, ip, ror #1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     c8c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     c90:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     c94:	87078608 	strhi	r8, [r7, -r8, lsl #12]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     c98:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     c9c:	8b038a04 	blhi	e34b4 <__ccfg+0xc350c>
     ca0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ca4:	0000000c 	andeq	r0, r0, ip
     ca8:	00000b5c 	andeq	r0, r0, ip, asr fp
			SysCtrlSetRechargeBeforePowerDown
     cac:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cb0:	00000002 	andeq	r0, r0, r2
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cb4:	0000000c 	andeq	r0, r0, ip
     cb8:	00000b5c 	andeq	r0, r0, ip, asr fp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	00000004 	andeq	r0, r0, r4
     cc4:	0000000c 	andeq	r0, r0, ip
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     cc8:	00000b5c 	andeq	r0, r0, ip, asr fp
     ccc:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cd0:	00000014 	andeq	r0, r0, r4, lsl r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     cd4:	00000018 	andeq	r0, r0, r8, lsl r0
     cd8:	00000b5c 	andeq	r0, r0, ip, asr fp
     cdc:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ce0:	0000001a 	andeq	r0, r0, sl, lsl r0
			while (!(AONWUCPowerStatusGet () &
     ce4:	83080e41 	movwhi	r0, #36417	; 0x8e41
			PRCMPowerDomainOn (__pi_systat.ondmns);
     ce8:	4a018e02 	bmi	644f8 <__ccfg+0x44550>
     cec:	000ec3ce 	andeq	ip, lr, lr, asr #7
     cf0:	0000000c 	andeq	r0, r0, ip
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     cf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cf8:	7c020001 	stcvc	0, cr0, [r2], {1}
     cfc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d00:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d04:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d08:	000016ac 	andeq	r1, r0, ip, lsr #13
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d0c:	00000078 	andeq	r0, r0, r8, ror r0
     d10:	83180e41 	tsthi	r8, #1040	; 0x410
			SysCtrlAdjustRechargeAfterPowerDown ();
     d14:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			reinit_uart ();
     d18:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d1c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d20:	0000000c 	andeq	r0, r0, ip
}
     d24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d28:	7c020001 	stcvc	0, cr0, [r2], {1}
     d2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d30:	00000030 	andeq	r0, r0, r0, lsr r0
     d34:	00000d20 	andeq	r0, r0, r0, lsr #26
     d38:	00001724 	andeq	r1, r0, r4, lsr #14
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d3c:	00000054 	andeq	r0, r0, r4, asr r0
     d40:	810c0e41 	tsthi	ip, r1, asr #28
     d44:	83028203 	movwhi	r8, #8707	; 0x2203
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d48:	280e4101 	stmdacs	lr, {r0, r8, lr}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d4c:	06850784 	streq	r0, [r5], r4, lsl #15
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     d50:	048e0586 	streq	r0, [lr], #1414	; 0x586
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     d54:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     d58:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     d5c:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     d60:	000ec1c2 	andeq	ip, lr, r2, asr #3
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d64:	0000000c 	andeq	r0, r0, ip
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     d68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     d6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			PRCMPowerDomainOff (
     d74:	00000030 	andeq	r0, r0, r0, lsr r0
     d78:	00000d64 	andeq	r0, r0, r4, ror #26
	__SLEEP;
     d7c:	00001778 	andeq	r1, r0, r8, ror r7
     d80:	00000060 	andeq	r0, r0, r0, rrx
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	810c0e41 	tsthi	ip, r1, asr #28
	goto Redo;
     d88:	83028203 	movwhi	r8, #8707	; 0x2203
     d8c:	200e4101 	andcs	r4, lr, r1, lsl #2
     d90:	05850684 	streq	r0, [r5, #1668]	; 0x684
     d94:	0a64048e 	beq	1901fd4 <__ccfg+0x18e202c>
     d98:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     d9c:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     da0:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     da4:	0b41000e 	bleq	1040de4 <__ccfg+0x1020e3c>
     da8:	0000000c 	andeq	r0, r0, ip
     dac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     db0:	7c020001 	stcvc	0, cr0, [r2], {1}
     db4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     db8:	00000028 	andeq	r0, r0, r8, lsr #32
     dbc:	00000da8 	andeq	r0, r0, r8, lsr #27
     dc0:	000017d8 	ldrdeq	r1, [r0], -r8
     dc4:	00000070 	andeq	r0, r0, r0, ror r0
     dc8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     dcc:	86048505 	strhi	r8, [r4], -r5, lsl #10
     dd0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     dd4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     dd8:	c7ce4214 	bfigt	r4, r4, #4, #11
     ddc:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     de0:	000b4200 	andeq	r4, fp, r0, lsl #4
     de4:	0000000c 	andeq	r0, r0, ip
     de8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dec:	7c020001 	stcvc	0, cr0, [r2], {1}
     df0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
int main (void) {
     df4:	00000028 	andeq	r0, r0, r8, lsr #32
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     df8:	00000de4 	andeq	r0, r0, r4, ror #27
     dfc:	00001848 	andeq	r1, r0, r8, asr #16
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e00:	0000011c 	andeq	r0, r0, ip, lsl r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e04:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
	system_init ();
     e08:	86048505 	strhi	r8, [r4], -r5, lsl #10
	tcv_init ();
     e0c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e10:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
     e14:	c7ce4214 	bfigt	r4, r4, #4, #11
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e18:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	0000000c 	andeq	r0, r0, ip
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e28:	7c020001 	stcvc	0, cr0, [r2], {1}
	delay (16, 0);
     e2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e30:	0000000c 	andeq	r0, r0, ip
     e34:	00000e20 	andeq	r0, r0, r0, lsr #28
	__pi_release ();
     e38:	00001964 	andeq	r1, r0, r4, ror #18
     e3c:	00000020 	andeq	r0, r0, r0, lsr #32
     e40:	00000028 	andeq	r0, r0, r8, lsr #32
     e44:	00000e20 	andeq	r0, r0, r0, lsr #28
     e48:	00001984 	andeq	r1, r0, r4, lsl #19
     e4c:	00000230 	andeq	r0, r0, r0, lsr r2
     e50:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
static void killev (__pi_pcb_t *pid) {
     e54:	86078508 	strhi	r8, [r7], -r8, lsl #10
	wfun = (aword)(pid->code);
     e58:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
	for_all_tasks (i) {
     e5c:	8a038904 	bhi	e3274 <__ccfg+0xc32cc>
		for (j = 0; j < nevents (i); j++) {
     e60:	02018e02 	andeq	r8, r1, #2, 28
     e64:	200e0a4f 	andcs	r0, lr, pc, asr #20
     e68:	00000b42 	andeq	r0, r0, r2, asr #22
			    || i->Events [j] . Event == wfun
     e6c:	0000001c 	andeq	r0, r0, ip, lsl r0
		for (j = 0; j < nevents (i); j++) {
     e70:	00000e20 	andeq	r0, r0, r0, lsr #28
			if (i->Events [j] . Event == (aword)pid
     e74:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
     e78:	00000050 	andeq	r0, r0, r0, asr r0
     e7c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
				wakeupev (i, j);
     e80:	86058506 	strhi	r8, [r5], -r6, lsl #10
     e84:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	for_all_tasks (i) {
     e88:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     e8c:	0000000c 	andeq	r0, r0, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
static void qfree (aword *ch) {
     e94:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     e98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	cc = (aword*)(mpools + MA_NP);
     e9c:	00000020 	andeq	r0, r0, r0, lsr #32
	m_setnextp (ch, chunk);
     ea0:	00000e8c 	andeq	r0, r0, ip, lsl #29
	m_setnextp (cc, ch);
     ea4:	00001c04 	andeq	r1, r0, r4, lsl #24
}
     ea8:	00000390 	muleq	r0, r0, r3
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     eac:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     eb0:	86068507 	strhi	r8, [r6], -r7, lsl #10
     eb4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
			m_setnextp (cc, m_nextp (chunk));
     eb8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
			m_size (chunk) += m_hdrlen + m_size (ch);
     ebc:	00000001 	andeq	r0, r0, r1
     ec0:	0000000c 	andeq	r0, r0, ip
     ec4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ec8:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ecc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ed0:	0000000c 	andeq	r0, r0, ip
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     ed4:	00000ec0 	andeq	r0, r0, r0, asr #29
     ed8:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
			m_setnextp (cc, m_nextp (chunk));
     edc:	00000030 	andeq	r0, r0, r0, lsr r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     ee0:	0000000c 	andeq	r0, r0, ip
     ee4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ee8:	7c020001 	stcvc	0, cr0, [r2], {1}
     eec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ef0:	0000000c 	andeq	r0, r0, ip
     ef4:	00000ee0 	andeq	r0, r0, r0, ror #29
			if (m_size (chunk) >= m_size (ch))
     ef8:	00000000 	andeq	r0, r0, r0
     efc:	00000020 	andeq	r0, r0, r0, lsr #32
     f00:	0000000c 	andeq	r0, r0, ip
		chunk = m_nextp (chunk))
     f04:	00000ee0 	andeq	r0, r0, r0, ror #29
     f08:	00001fc4 	andeq	r1, r0, r4, asr #31
     f0c:	00000018 	andeq	r0, r0, r8, lsl r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f10:	0000000c 	andeq	r0, r0, ip
	diag_wait (a);
     f14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	diag_wchar (c, a);
     f18:	7c020001 	stcvc	0, cr0, [r2], {1}
     f1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f20:	0000000c 	andeq	r0, r0, ip
}
     f24:	00000f10 	andeq	r0, r0, r0, lsl pc
	syserror (ESTATE, "state");
     f28:	00001fdc 	ldrdeq	r1, [r0], -ip
     f2c:	00000008 	andeq	r0, r0, r8
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	00000f10 	andeq	r0, r0, r0, lsl pc
void update_n_wake (word min, Boolean force) {
     f38:	00000000 	andeq	r0, r0, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     f3c:	00000006 	andeq	r0, r0, r6
     f40:	0000000c 	andeq	r0, r0, ip
     f44:	00000f10 	andeq	r0, r0, r0, lsl pc
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     f48:	00001fe4 	andeq	r1, r0, r4, ror #31
     f4c:	00000008 	andeq	r0, r0, r8
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	00000f10 	andeq	r0, r0, r0, lsl pc
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	00000006 	andeq	r0, r0, r6
     f60:	0000000c 	andeq	r0, r0, ip
     f64:	00000f10 	andeq	r0, r0, r0, lsl pc
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	00000008 	andeq	r0, r0, r8
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f78:	7c020001 	stcvc	0, cr0, [r2], {1}
		for_all_tasks (i) {
     f7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f80:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_mintk = znew + min;
     f84:	00000f70 	andeq	r0, r0, r0, ror pc
			if (!twaiting (i))
     f88:	00001fec 	andeq	r1, r0, ip, ror #31
     f8c:	000000d4 	ldrdeq	r0, [r0], -r4
			if (twakecnd (__pi_old, znew, i->Timer)) {
     f90:	83100e41 	tsthi	r0, #1040	; 0x410
     f94:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f98:	00018e02 	andeq	r8, r1, r2, lsl #28
     f9c:	00000014 	andeq	r0, r0, r4, lsl r0
     fa0:	00000f70 	andeq	r0, r0, r0, ror pc
     fa4:	000020c0 	andeq	r2, r0, r0, asr #1
     fa8:	000000a4 	andeq	r0, r0, r4, lsr #1
     fac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     fb0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fbc:	7c020001 	stcvc	0, cr0, [r2], {1}
				wakeuptm (i);
     fc0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fc4:	00000018 	andeq	r0, r0, r8, lsl r0
		for_all_tasks (i) {
     fc8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
				d = i->Timer - znew;
     fcc:	00002164 	andeq	r2, r0, r4, ror #2
     fd0:	0000007c 	andeq	r0, r0, ip, ror r0
     fd4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		if ((word)(__pi_mintk - znew) < min) 
     fd8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_old = znew;
     fe4:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
}
     fe8:	000021e0 	andeq	r2, r0, r0, ror #3
	TCI_RUN_DELAY_TIMER;
     fec:	000000ac 	andeq	r0, r0, ip, lsr #1
}
     ff0:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     ff4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ff8:	0000000c 	andeq	r0, r0, ip
     ffc:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    1000:	0000228c 	andeq	r2, r0, ip, lsl #5
void proceed (word state) {
    1004:	0000005c 	andeq	r0, r0, ip, asr r0
	prcdstate (__pi_curr, state);
    1008:	0000000c 	andeq	r0, r0, ip
    100c:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	release;
    1010:	000022e8 	andeq	r2, r0, r8, ror #5
    1014:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_wait (aword event, word state) {
    1018:	0000000c 	andeq	r0, r0, ip
	sint j = nevents (__pi_curr);
    101c:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	if (j >= MAX_EVENTS_PER_TASK)
    1020:	00000000 	andeq	r0, r0, r0
    1024:	00000010 	andeq	r0, r0, r0, lsl r0
    1028:	0000000c 	andeq	r0, r0, ip
		syserror (ENEVENTS, "sw");
    102c:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    1030:	00002300 	andeq	r2, r0, r0, lsl #6
	setestate (__pi_curr->Events [j], state, event);
    1034:	00000010 	andeq	r0, r0, r0, lsl r0
	incwait (__pi_curr);
    1038:	0000000c 	andeq	r0, r0, ip
	setestate (__pi_curr->Events [j], state, event);
    103c:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
}
    1040:	00002310 	andeq	r2, r0, r0, lsl r3
    1044:	00000014 	andeq	r0, r0, r4, lsl r0
    1048:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_trigger (aword event) {
    104c:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	for_all_tasks (i) {
    1050:	00002324 	andeq	r2, r0, r4, lsr #6
		for (j = 0; j < nevents (i); j++) {
    1054:	00000064 	andeq	r0, r0, r4, rrx
    1058:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    105c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1060:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (i->Events [j] . Event == event) {
    1064:	0000000c 	andeq	r0, r0, ip
    1068:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    106c:	00002388 	andeq	r2, r0, r8, lsl #7
				wakeupev (i, j);
    1070:	00000014 	andeq	r0, r0, r4, lsl r0
    1074:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    1078:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
}
    107c:	0000239c 	muleq	r0, ip, r3
aword __pi_join (aword pid, word st) {
    1080:	00000014 	andeq	r0, r0, r4, lsl r0
	for_all_tasks (i) {
    1084:	0000000c 	andeq	r0, r0, ip
    1088:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	return 0;
    108c:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
		if ((aword)i == pid) {
    1090:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_wait (pid, st);
    1094:	0000000c 	andeq	r0, r0, ip
}
    1098:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	for_all_tasks (i) {
    109c:	000023c4 	andeq	r2, r0, r4, asr #7
    10a0:	00000028 	andeq	r0, r0, r8, lsr #32
void delay (word d, word state) {
    10a4:	0000000c 	andeq	r0, r0, ip
	settstate (__pi_curr, state);
    10a8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    10ac:	000023ec 	andeq	r2, r0, ip, ror #7
    10b0:	00000010 	andeq	r0, r0, r0, lsl r0
    10b4:	0000000c 	andeq	r0, r0, ip
	update_n_wake (d, YES);
    10b8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    10bc:	000023fc 	strdeq	r2, [r0], -ip
	__pi_curr->Timer = __pi_old + d;
    10c0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c4:	0000000c 	andeq	r0, r0, ip
	inctimer (__pi_curr);
    10c8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    10cc:	00002428 	andeq	r2, r0, r8, lsr #8
    10d0:	00000014 	andeq	r0, r0, r4, lsl r0
}
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	if (fun == NULL)
    10dc:	0000243c 	andeq	r2, r0, ip, lsr r4
		return (int) __pi_curr;
    10e0:	00000014 	andeq	r0, r0, r4, lsl r0
    10e4:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i)
    10e8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
}
    10ec:	00002450 	andeq	r2, r0, r0, asr r4
		if (i->code == fun)
    10f0:	00000110 	andeq	r0, r0, r0, lsl r1
	for_all_tasks (i)
    10f4:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    10f8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10fc:	02018e02 	andeq	r8, r1, #2, 28
int __pi_strlen (const char *s) {
    1100:	00100e76 	andseq	r0, r0, r6, ror lr
	for (i = 0; *(s+i) != '\0'; i++);
    1104:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1108:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	for (i = 0; *(s+i) != '\0'; i++);
    110c:	00002560 	andeq	r2, r0, r0, ror #10
	while (n--)
    1110:	00000064 	andeq	r0, r0, r4, rrx
    1114:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		*dest++ = *src++;
    1118:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    111c:	00000001 	andeq	r0, r0, r1
    1120:	0000000c 	andeq	r0, r0, ip
void adddevfunc (devreqfun_t rf, int loc) {
    1124:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
		syserror (EREQPAR, "addv");
    1128:	000025c4 	andeq	r2, r0, r4, asr #11
		syserror (ERESOURCE, "addv");
    112c:	00000028 	andeq	r0, r0, r8, lsr #32
	if (ioreq [loc] != NULL)
    1130:	00000014 	andeq	r0, r0, r4, lsl r0
    1134:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
		syserror (ERESOURCE, "addv");
    1138:	000025ec 	andeq	r2, r0, ip, ror #11
	ioreq [loc] = rf;
    113c:	00000150 	andeq	r0, r0, r0, asr r1
}
    1140:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1144:	00018e02 	andeq	r8, r1, r2, lsl #28
sint io (word retry, word dev, word operation, char *buf, word len) {
    1148:	0000000c 	andeq	r0, r0, ip
    114c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1150:	7c020001 	stcvc	0, cr0, [r2], {1}
    1154:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1158:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    115c:	00001148 	andeq	r1, r0, r8, asr #2
    1160:	00000000 	andeq	r0, r0, r0
		syserror (ENODEVICE, "io");
    1164:	000000f4 	strdeq	r0, [r0], -r4
    1168:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
	if (len == 0)
    116c:	86058506 	strhi	r8, [r5], -r6, lsl #10
	ret = (ioreq [dev]) (operation, buf, len);
    1170:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1174:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (ret >= 0)
    1178:	00000028 	andeq	r0, r0, r8, lsr #32
	if (ret == -1) {
    117c:	00001148 	andeq	r1, r0, r8, asr #2
    1180:	0000273c 	andeq	r2, r0, ip, lsr r7
		if (retry == WNONE)
    1184:	00000220 	andeq	r0, r0, r0, lsr #4
		iowait (dev, operation, retry);
    1188:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    118c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1190:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
			release;
    1194:	8a048905 	bhi	1235b0 <__ccfg+0x103608>
	if (ret == -2) {
    1198:	8e028b03 	vmlahi.f64	d8, d2, d3
		if (retry != WNONE) {
    119c:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    11a0:	00000024 	andeq	r0, r0, r4, lsr #32
			iowait (dev, operation, retry);
    11a4:	00000014 	andeq	r0, r0, r4, lsl r0
    11a8:	00001148 	andeq	r1, r0, r8, asr #2
			(ioreq [dev]) (NONE, buf, len);
    11ac:	0000295c 	andeq	r2, r0, ip, asr r9
    11b0:	00000060 	andeq	r0, r0, r0, rrx
    11b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		(ioreq [dev]) (NONE, buf, len);
    11b8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11bc:	00000014 	andeq	r0, r0, r4, lsl r0
    11c0:	00001148 	andeq	r1, r0, r8, asr #2
}
    11c4:	00000000 	andeq	r0, r0, r0
	if (retry != WNONE) {
    11c8:	00000078 	andeq	r0, r0, r8, ror r0
		delay (-ret - 2, retry);
    11cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	00001148 	andeq	r1, r0, r8, asr #2
		release;
    11dc:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    11e0:	00000018 	andeq	r0, r0, r8, lsl r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    11f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f4:	0000000c 	andeq	r0, r0, ip
		syserror (ERESOURCE, "mal1");
    11f8:	000011e4 	andeq	r1, r0, r4, ror #3
    11fc:	00000000 	andeq	r0, r0, r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1200:	00000010 	andeq	r0, r0, r0, lsl r0
    1204:	0000000c 	andeq	r0, r0, ip
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1208:	000011e4 	andeq	r1, r0, r4, ror #3
	m_size (mpools [0]) = mlen - m_hdrlen;
    120c:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1210:	00000018 	andeq	r0, r0, r8, lsl r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1214:	0000000c 	andeq	r0, r0, ip
    1218:	000011e4 	andeq	r1, r0, r4, ror #3
}
    121c:	000029d4 	ldrdeq	r2, [r0], -r4
    1220:	0000004c 	andeq	r0, r0, ip, asr #32
    1224:	00000014 	andeq	r0, r0, r4, lsl r0
    1228:	000011e4 	andeq	r1, r0, r4, ror #3
    122c:	00000000 	andeq	r0, r0, r0
    1230:	00000030 	andeq	r0, r0, r0, lsr r0
void __pi_free (aword *ch) {
    1234:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1238:	00018e02 	andeq	r8, r1, r2, lsl #28
    123c:	00000018 	andeq	r0, r0, r8, lsl r0
		syserror (EMALLOC, "malg");
    1240:	000011e4 	andeq	r1, r0, r4, ror #3
    1244:	00002a20 	andeq	r2, r0, r0, lsr #20
	mcfree [MA_NP] += m_size (ch);
    1248:	0000006c 	andeq	r0, r0, ip, rrx
		m_size (ch) ^= MALLOC_UMASK;
    124c:	83100e41 	tsthi	r0, #1040	; 0x410
    1250:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	mcfree [MA_NP] += m_size (ch);
    1254:	00018e02 	andeq	r8, r1, r2, lsl #28
	QFREE;
    1258:	00000014 	andeq	r0, r0, r4, lsl r0
	if (mevent [MA_NP] . nwait) {
    125c:	000011e4 	andeq	r1, r0, r4, ror #3
    1260:	00002a8c 	andeq	r2, r0, ip, lsl #21
		trigger ((aword)(&(mevent [MA_NP])));
    1264:	00000016 	andeq	r0, r0, r6, lsl r0
		mevent [MA_NP] . nwait --;
    1268:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
    126c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1270:	0000000c 	andeq	r0, r0, ip
    1274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1278:	7c020001 	stcvc	0, cr0, [r2], {1}
void kill (aword pid) {
    127c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1280:	00000024 	andeq	r0, r0, r4, lsr #32
	j = NULL;
    1284:	00001270 	andeq	r1, r0, r0, ror r2
	for_all_tasks (i) {
    1288:	00002aa4 	andeq	r2, r0, r4, lsr #21
	syserror (EREQPAR, "kpi");
    128c:	00000028 	andeq	r0, r0, r8, lsr #32
    1290:	83100e41 	tsthi	r0, #1040	; 0x410
		if ((aword)i == pid) {
    1294:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1298:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
				__PCB = i->Next;
    129c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
			killev (i);
    12a0:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
			ufree (i);
    12a4:	0000000b 	andeq	r0, r0, fp
			if (i == __pi_curr)
    12a8:	0000000c 	andeq	r0, r0, ip
    12ac:	00001270 	andeq	r1, r0, r0, ror r2
				release;
    12b0:	00002acc 	andeq	r2, r0, ip, asr #21
				j->Next = i->Next;
    12b4:	00000008 	andeq	r0, r0, r8
    12b8:	0000000c 	andeq	r0, r0, ip
    12bc:	00001270 	andeq	r1, r0, r0, ror r2
}
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	00000022 	andeq	r0, r0, r2, lsr #32
    12c8:	00000018 	andeq	r0, r0, r8, lsl r0
	if (size < 8)
    12cc:	00001270 	andeq	r1, r0, r0, ror r2
		_size = 2;
    12d0:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    12d4:	0000002e 	andeq	r0, r0, lr, lsr #32
		_size = (((aword)size) + 3) >> 2;
    12d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (m_magic (chunk) != MALLOC_MAGIC)
    12dc:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
		_size = (((aword)size) + 3) >> 2;
    12e0:	000ec4ce 	andeq	ip, lr, lr, asr #9
		if (mevent [MA_NP] . nfail != 255)
    12e4:	00000018 	andeq	r0, r0, r8, lsl r0
    12e8:	00001270 	andeq	r1, r0, r0, ror r2
			mevent [MA_NP] . nfail ++;
    12ec:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    12f0:	00000034 	andeq	r0, r0, r4, lsr r0
    12f4:	83100e41 	tsthi	r0, #1040	; 0x410
		if (m_magic (chunk) != MALLOC_MAGIC)
    12f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    12fc:	00018e02 	andeq	r8, r1, r2, lsl #28
			syserror (EMALLOC, "malc");
    1300:	00000018 	andeq	r0, r0, r8, lsl r0
    1304:	00001270 	andeq	r1, r0, r0, ror r2
		if (m_size (chunk) >= _size)
    1308:	00000000 	andeq	r0, r0, r0
    130c:	00000040 	andeq	r0, r0, r0, asr #32
		chunk = m_nextp (chunk)) {
    1310:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		m_setnextp (cc, m_nextp (chunk));
    1314:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1318:	00018e02 	andeq	r8, r1, r2, lsl #28
    131c:	0000000c 	andeq	r0, r0, ip
			m_size (chunk) = _size;
    1320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			cc = chunk + _size + m_hdrlen;
    1324:	7c020001 	stcvc	0, cr0, [r2], {1}
    1328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    132c:	0000001c 	andeq	r0, r0, ip, lsl r0
			QFREE;
    1330:	0000131c 	andeq	r1, r0, ip, lsl r3
		mevent [MA_NP] . nfail = 0;
    1334:	00002ad4 	ldrdeq	r2, [r0], -r4
		mcfree [MA_NP] -= m_size (chunk);
    1338:	0000005c 	andeq	r0, r0, ip, asr r0
    133c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1340:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1344:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		m_size (chunk) |= MALLOC_UMASK;
    1348:	0000100e 	andeq	r1, r0, lr
		if (mnfree [MA_NP] > mcfree [MA_NP])
    134c:	00000014 	andeq	r0, r0, r4, lsl r0
		m_size (chunk) |= MALLOC_UMASK;
    1350:	0000131c 	andeq	r1, r0, ip, lsl r3
			mnfree [MA_NP] = mcfree [MA_NP];
    1354:	00002b30 	andeq	r2, r0, r0, lsr fp
}
    1358:	0000002c 	andeq	r0, r0, ip, lsr #32
    135c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1360:	00018e02 	andeq	r8, r1, r2, lsl #28
    1364:	00000018 	andeq	r0, r0, r8, lsl r0
    1368:	0000131c 	andeq	r1, r0, ip, lsl r3
    136c:	00000000 	andeq	r0, r0, r0
    1370:	00000090 	muleq	r0, r0, r0
aword __pi_fork (fsmcode func, aword data) {
    1374:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1378:	86038504 	strhi	r8, [r3], -r4, lsl #10
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
		if ((j = __PCB) == NULL)
    1384:	0000131c 	andeq	r1, r0, ip, lsl r3
	i->Next = NULL;
    1388:	00000000 	andeq	r0, r0, r0
	i->data = data;
    138c:	00000018 	andeq	r0, r0, r8, lsl r0
		if ((j = __PCB) == NULL)
    1390:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
			for (; j->Next != NULL; j = j->Next);
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
    139c:	0000131c 	andeq	r1, r0, ip, lsl r3
	return (aword) i;
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	00000060 	andeq	r0, r0, r0, rrx
	if (mevent [MA_NP] . nwait != 255)
    13a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
		mevent [MA_NP] . nwait ++;
    13b4:	0000131c 	andeq	r1, r0, ip, lsl r3
	wait ((aword)(&(mevent [MA_NP])), state);
    13b8:	00000000 	andeq	r0, r0, r0
    13bc:	00000034 	andeq	r0, r0, r4, lsr r0
void diag (const char *mess, ...) {
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
	diag_disable_int (a, is);
    13cc:	0000131c 	andeq	r1, r0, ip, lsl r3
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	00000038 	andeq	r0, r0, r8, lsr r0
				d = (bc == 16) ? 10000 : 1000000000;
    13d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	diag_disable_int (a, is);
    13dc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	while (*mess != '\0') {
    13e0:	00000001 	andeq	r0, r0, r1
	dgout ('\r');
    13e4:	0000000c 	andeq	r0, r0, ip
	dgout ('\n');
    13e8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13ec:	00000000 	andeq	r0, r0, r0
    13f0:	0000000c 	andeq	r0, r0, ip
	diag_wait (a);
    13f4:	00000018 	andeq	r0, r0, r8, lsl r0
	diag_enable_int (a, is);
    13f8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13fc:	00000000 	andeq	r0, r0, r0
}
    1400:	00000034 	andeq	r0, r0, r4, lsr r0
    1404:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1408:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (*mess == '%') {
    140c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1410:	0000000c 	andeq	r0, r0, ip
			if (*mess == 'l') {
    1414:	0000131c 	andeq	r1, r0, ip, lsl r3
    1418:	00000000 	andeq	r0, r0, r0
				mess++;
    141c:	0000001c 	andeq	r0, r0, ip, lsl r0
