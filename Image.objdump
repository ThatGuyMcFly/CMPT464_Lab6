
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000015e9 	andeq	r1, r0, r9, ror #11
		// Called to issue a wait request
		if (st == WNONE)
       8:	000015e3 	andeq	r1, r0, r3, ror #11
       c:	000015e5 	andeq	r1, r0, r5, ror #11
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000015e7 	andeq	r1, r0, r7, ror #11
      14:	000015e7 	andeq	r1, r0, r7, ror #11
		when (&__input_pins, st);
      18:	000015e7 	andeq	r1, r0, r7, ror #11
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000015e7 	andeq	r1, r0, r7, ror #11
      30:	000015e7 	andeq	r1, r0, r7, ror #11
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000015e7 	andeq	r1, r0, r7, ror #11
      3c:	000015e7 	andeq	r1, r0, r7, ror #11
      40:	000009cd 	andeq	r0, r0, sp, asr #19
      44:	000015e7 	andeq	r1, r0, r7, ror #11
      48:	000015e7 	andeq	r1, r0, r7, ror #11
}
      4c:	000015e7 	andeq	r1, r0, r7, ror #11
      50:	0000058d 	andeq	r0, r0, sp, lsl #11
      54:	0000088d 	andeq	r0, r0, sp, lsl #17
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000015e7 	andeq	r1, r0, r7, ror #11
	    pbutton++) {
      5c:	000015e7 	andeq	r1, r0, r7, ror #11
      60:	000015e7 	andeq	r1, r0, r7, ror #11
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000015e7 	andeq	r1, r0, r7, ror #11
      68:	000015e7 	andeq	r1, r0, r7, ror #11
      6c:	000015e7 	andeq	r1, r0, r7, ror #11
      70:	000015e7 	andeq	r1, r0, r7, ror #11
      74:	000015e7 	andeq	r1, r0, r7, ror #11
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000015e7 	andeq	r1, r0, r7, ror #11
      7c:	000015e7 	andeq	r1, r0, r7, ror #11
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000015e7 	andeq	r1, r0, r7, ror #11
      84:	000015e7 	andeq	r1, r0, r7, ror #11
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000015e7 	andeq	r1, r0, r7, ror #11
      8c:	000015e7 	andeq	r1, r0, r7, ror #11
      90:	000015e7 	andeq	r1, r0, r7, ror #11
      94:	000015e7 	andeq	r1, r0, r7, ror #11
      98:	000015e7 	andeq	r1, r0, r7, ror #11
		goto Done;

	if (baction == NULL)
      9c:	000015e7 	andeq	r1, r0, r7, ror #11
      a0:	000015e7 	andeq	r1, r0, r7, ror #11
		goto Term;

	(*baction) (pbutton);
      a4:	000015e7 	andeq	r1, r0, r7, ror #11

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000015e7 	andeq	r1, r0, r7, ror #11
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000015e7 	andeq	r1, r0, r7, ror #11
      b0:	000015e7 	andeq	r1, r0, r7, ror #11
endthread
      b4:	000015e7 	andeq	r1, r0, r7, ror #11
      b8:	000015e7 	andeq	r1, r0, r7, ror #11
      bc:	000015e7 	andeq	r1, r0, r7, ror #11
      c0:	000015e7 	andeq	r1, r0, r7, ror #11
      c4:	000015e7 	andeq	r1, r0, r7, ror #11

000000c8 <blinker>:
      c8:	b570      	push	{r4, r5, r6, lr}
      ca:	b300      	cbz	r0, 10e <_Min_Stack_Size+0xe>
word adjustTime(word time) {
    return (time * SECOND)/1000;
}

// Finite state machine for flashing the LEDs and displaying cycle characters
fsm blinker {
      cc:	2801      	cmp	r0, #1
      ce:	f040 808a 	bne.w	1e6 <_Min_Stack_Size+0xe6>
        
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        // turn off the LED that was turned on in the Check_PERIOD state
        leds(led,0);
      d2:	4b47      	ldr	r3, [pc, #284]	; (1f0 <_Min_Stack_Size+0xf0>)
      d4:	4a47      	ldr	r2, [pc, #284]	; (1f4 <_Min_Stack_Size+0xf4>)
      d6:	6819      	ldr	r1, [r3, #0]
      d8:	4b47      	ldr	r3, [pc, #284]	; (1f8 <_Min_Stack_Size+0xf8>)
      da:	2900      	cmp	r1, #0
      dc:	d17a      	bne.n	1d4 <_Min_Stack_Size+0xd4>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      de:	2140      	movs	r1, #64	; 0x40
      e0:	6011      	str	r1, [r2, #0]
      e2:	781a      	ldrb	r2, [r3, #0]
      e4:	0912      	lsrs	r2, r2, #4
      e6:	f002 020e 	and.w	r2, r2, #14
      ea:	7819      	ldrb	r1, [r3, #0]
      ec:	f362 1107 	bfi	r1, r2, #4, #4
      f0:	7019      	strb	r1, [r3, #0]
        
        // Display the off character if required
        if (displayCycle)
      f2:	4b42      	ldr	r3, [pc, #264]	; (1fc <_Min_Stack_Size+0xfc>)
      f4:	781b      	ldrb	r3, [r3, #0]
      f6:	b123      	cbz	r3, 102 <_Min_Stack_Size+0x2>
            ser_outf(Check_PERIOD, "%c ", 'F');
      f8:	2246      	movs	r2, #70	; 0x46
      fa:	2000      	movs	r0, #0
      fc:	4940      	ldr	r1, [pc, #256]	; (200 <_Min_Stack_Size+0x100>)
      fe:	f001 fb83 	bl	1808 <ser_outf>

        // Set the delay if it is set
        if(offTime > 0)
     102:	4b40      	ldr	r3, [pc, #256]	; (204 <_Min_Stack_Size+0x104>)
     104:	8818      	ldrh	r0, [r3, #0]
     106:	2800      	cmp	r0, #0
     108:	d05c      	beq.n	1c4 <_Min_Stack_Size+0xc4>
            delay(offTime, Check_PERIOD);
     10a:	2100      	movs	r1, #0
     10c:	e040      	b.n	190 <_Min_Stack_Size+0x90>
        if(ledFlag == 0) {
     10e:	4a3e      	ldr	r2, [pc, #248]	; (208 <_Min_Stack_Size+0x108>)
     110:	4d37      	ldr	r5, [pc, #220]	; (1f0 <_Min_Stack_Size+0xf0>)
     112:	6813      	ldr	r3, [r2, #0]
     114:	4e3d      	ldr	r6, [pc, #244]	; (20c <_Min_Stack_Size+0x10c>)
     116:	4c3e      	ldr	r4, [pc, #248]	; (210 <_Min_Stack_Size+0x110>)
     118:	493a      	ldr	r1, [pc, #232]	; (204 <_Min_Stack_Size+0x104>)
     11a:	2b00      	cmp	r3, #0
     11c:	d13b      	bne.n	196 <_Min_Stack_Size+0x96>
            led = redLed;
     11e:	483d      	ldr	r0, [pc, #244]	; (214 <_Min_Stack_Size+0x114>)
     120:	6800      	ldr	r0, [r0, #0]
     122:	6028      	str	r0, [r5, #0]
            ch = redCharacter;
     124:	483c      	ldr	r0, [pc, #240]	; (218 <_Min_Stack_Size+0x118>)
     126:	7800      	ldrb	r0, [r0, #0]
     128:	7030      	strb	r0, [r6, #0]
            onTime = redOn;
     12a:	483c      	ldr	r0, [pc, #240]	; (21c <_Min_Stack_Size+0x11c>)
     12c:	8800      	ldrh	r0, [r0, #0]
     12e:	8020      	strh	r0, [r4, #0]
            offTime = redOff;
     130:	483b      	ldr	r0, [pc, #236]	; (220 <_Min_Stack_Size+0x120>)
            offTime = greenOff;
     132:	8800      	ldrh	r0, [r0, #0]
        ledFlag = 1 - ledFlag;
     134:	f1c3 0301 	rsb	r3, r3, #1
            offTime = greenOff;
     138:	8008      	strh	r0, [r1, #0]
    return (time * SECOND)/1000;
     13a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        ledFlag = 1 - ledFlag;
     13e:	6013      	str	r3, [r2, #0]
    return (time * SECOND)/1000;
     140:	880b      	ldrh	r3, [r1, #0]
     142:	8822      	ldrh	r2, [r4, #0]
     144:	029b      	lsls	r3, r3, #10
     146:	fbb3 f3f0 	udiv	r3, r3, r0
     14a:	0292      	lsls	r2, r2, #10
     14c:	fbb2 f2f0 	udiv	r2, r2, r0
     150:	800b      	strh	r3, [r1, #0]
        if (displayCycle)
     152:	4b2a      	ldr	r3, [pc, #168]	; (1fc <_Min_Stack_Size+0xfc>)
    return (time * SECOND)/1000;
     154:	8022      	strh	r2, [r4, #0]
        if (displayCycle)
     156:	781b      	ldrb	r3, [r3, #0]
     158:	b123      	cbz	r3, 164 <_Min_Stack_Size+0x64>
            ser_outf(Check_PERIOD, "%c ", ch);
     15a:	2000      	movs	r0, #0
     15c:	7832      	ldrb	r2, [r6, #0]
     15e:	4928      	ldr	r1, [pc, #160]	; (200 <_Min_Stack_Size+0x100>)
     160:	f001 fb52 	bl	1808 <ser_outf>
        if(onTime > 0){
     164:	8823      	ldrh	r3, [r4, #0]
     166:	2b00      	cmp	r3, #0
     168:	d02b      	beq.n	1c2 <_Min_Stack_Size+0xc2>
            if(On)
     16a:	4b2e      	ldr	r3, [pc, #184]	; (224 <_Min_Stack_Size+0x124>)
     16c:	2040      	movs	r0, #64	; 0x40
     16e:	7819      	ldrb	r1, [r3, #0]
     170:	682a      	ldr	r2, [r5, #0]
     172:	4b21      	ldr	r3, [pc, #132]	; (1f8 <_Min_Stack_Size+0xf8>)
     174:	b1d1      	cbz	r1, 1ac <_Min_Stack_Size+0xac>
                leds(led,1);
     176:	492c      	ldr	r1, [pc, #176]	; (228 <_Min_Stack_Size+0x128>)
                leds(led,0);
     178:	b9d2      	cbnz	r2, 1b0 <_Min_Stack_Size+0xb0>
     17a:	6008      	str	r0, [r1, #0]
     17c:	781a      	ldrb	r2, [r3, #0]
     17e:	0912      	lsrs	r2, r2, #4
     180:	f002 020e 	and.w	r2, r2, #14
     184:	7819      	ldrb	r1, [r3, #0]
     186:	f362 1107 	bfi	r1, r2, #4, #4
     18a:	7019      	strb	r1, [r3, #0]
            delay(onTime, OFF_PERIOD);
     18c:	2101      	movs	r1, #1
     18e:	8820      	ldrh	r0, [r4, #0]
            delay(offTime, Check_PERIOD);
     190:	f000 ffce 	bl	1130 <delay>
     194:	e018      	b.n	1c8 <_Min_Stack_Size+0xc8>
            led = greenLed;
     196:	4825      	ldr	r0, [pc, #148]	; (22c <_Min_Stack_Size+0x12c>)
     198:	6800      	ldr	r0, [r0, #0]
     19a:	6028      	str	r0, [r5, #0]
            ch = greenCharacter;
     19c:	4824      	ldr	r0, [pc, #144]	; (230 <_Min_Stack_Size+0x130>)
     19e:	7800      	ldrb	r0, [r0, #0]
     1a0:	7030      	strb	r0, [r6, #0]
            onTime = greenOn;
     1a2:	4824      	ldr	r0, [pc, #144]	; (234 <_Min_Stack_Size+0x134>)
     1a4:	8800      	ldrh	r0, [r0, #0]
     1a6:	8020      	strh	r0, [r4, #0]
            offTime = greenOff;
     1a8:	4823      	ldr	r0, [pc, #140]	; (238 <_Min_Stack_Size+0x138>)
     1aa:	e7c2      	b.n	132 <_Min_Stack_Size+0x32>
                leds(led,0);
     1ac:	4911      	ldr	r1, [pc, #68]	; (1f4 <_Min_Stack_Size+0xf4>)
     1ae:	e7e3      	b.n	178 <_Min_Stack_Size+0x78>
     1b0:	2a01      	cmp	r2, #1
     1b2:	d1eb      	bne.n	18c <_Min_Stack_Size+0x8c>
     1b4:	2280      	movs	r2, #128	; 0x80
     1b6:	600a      	str	r2, [r1, #0]
     1b8:	781a      	ldrb	r2, [r3, #0]
     1ba:	0912      	lsrs	r2, r2, #4
     1bc:	f002 020d 	and.w	r2, r2, #13
     1c0:	e7e0      	b.n	184 <_Min_Stack_Size+0x84>
            proceed OFF_PERIOD;
     1c2:	2001      	movs	r0, #1
     1c4:	f000 ff64 	bl	1090 <proceed>
        when(&On, Check_PERIOD);
     1c8:	2100      	movs	r1, #0
     1ca:	4816      	ldr	r0, [pc, #88]	; (224 <_Min_Stack_Size+0x124>)
     1cc:	f000 ff6a 	bl	10a4 <__pi_wait>
        release;
     1d0:	f000 fd2a 	bl	c28 <__pi_release>
        leds(led,0);
     1d4:	2901      	cmp	r1, #1
     1d6:	d18c      	bne.n	f2 <blinker+0x2a>
     1d8:	2180      	movs	r1, #128	; 0x80
     1da:	6011      	str	r1, [r2, #0]
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	0912      	lsrs	r2, r2, #4
     1e0:	f002 020d 	and.w	r2, r2, #13
     1e4:	e781      	b.n	ea <blinker+0x22>
        else
            proceed Check_PERIOD;

        when(&On, Check_PERIOD);
        release;
}
     1e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     1ea:	f000 bee3 	b.w	fb4 <__pi_badstate>
     1ee:	bf00      	nop
     1f0:	2000001c 	andcs	r0, r0, ip, lsl r0
     1f4:	400220a0 	andmi	r2, r2, r0, lsr #1
     1f8:	20000094 	mulcs	r0, r4, r0
     1fc:	20000016 	andcs	r0, r0, r6, lsl r0
     200:	00002c40 	andeq	r2, r0, r0, asr #24
     204:	20000024 	andcs	r0, r0, r4, lsr #32
     208:	20000020 	andcs	r0, r0, r0, lsr #32
     20c:	20000015 	andcs	r0, r0, r5, lsl r0
     210:	20000026 	andcs	r0, r0, r6, lsr #32
     214:	20000028 	andcs	r0, r0, r8, lsr #32
     218:	20000008 	andcs	r0, r0, r8
     21c:	2000002e 	andcs	r0, r0, lr, lsr #32
     220:	2000002c 	andcs	r0, r0, ip, lsr #32
     224:	2000000c 	andcs	r0, r0, ip
     228:	40022090 	mulmi	r2, r0, r0
     22c:	20000004 	andcs	r0, r0, r4
     230:	20000000 	andcs	r0, r0, r0
     234:	2000001a 	andcs	r0, r0, sl, lsl r0
     238:	20000018 	andcs	r0, r0, r8, lsl r0

0000023c <processSettingsInput>:
 * 
 * Parameters:
 *  settingsInput: The string that holds the user inputted time intervals
*/
void processSettingsInput(char * settingsInput){
    word numbers[] = {0, 0, 0, 0};
     23c:	2300      	movs	r3, #0
void processSettingsInput(char * settingsInput){
     23e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int numbersIndex = 0;
     240:	461c      	mov	r4, r3
    word numbers[] = {0, 0, 0, 0};
     242:	e9cd 3300 	strd	r3, r3, [sp]

    word number = 0;

    // Extract the intervals from the settings input string
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     246:	1e41      	subs	r1, r0, #1
     248:	3031      	adds	r0, #49	; 0x31
        if(settingsInput[i] == ' ') {
     24a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     24e:	2a20      	cmp	r2, #32
     250:	d11a      	bne.n	288 <processSettingsInput+0x4c>
            // seperate the input on the spaces
            numbers[numbersIndex] = number;
     252:	aa02      	add	r2, sp, #8
     254:	eb02 0244 	add.w	r2, r2, r4, lsl #1
     258:	f822 3c08 	strh.w	r3, [r2, #-8]
            number = 0;
     25c:	2300      	movs	r3, #0
            numbersIndex++;
     25e:	3401      	adds	r4, #1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	4281      	cmp	r1, r0
     262:	d1f2      	bne.n	24a <processSettingsInput+0xe>
            number = number * 10;
            number += settingsInput[i] - 48;
        }
    }

    redOn = numbers[0];
     264:	f8bd 2000 	ldrh.w	r2, [sp]
     268:	4b0c      	ldr	r3, [pc, #48]	; (29c <processSettingsInput+0x60>)
     26a:	801a      	strh	r2, [r3, #0]
    redOff = numbers[1];
     26c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
     270:	4b0b      	ldr	r3, [pc, #44]	; (2a0 <processSettingsInput+0x64>)
     272:	801a      	strh	r2, [r3, #0]

    greenOn = numbers[2];
     274:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     278:	4b0a      	ldr	r3, [pc, #40]	; (2a4 <processSettingsInput+0x68>)
     27a:	801a      	strh	r2, [r3, #0]
    greenOff = numbers[3];
     27c:	4b0a      	ldr	r3, [pc, #40]	; (2a8 <processSettingsInput+0x6c>)
     27e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     282:	801a      	strh	r2, [r3, #0]
}
     284:	b003      	add	sp, #12
     286:	bd30      	pop	{r4, r5, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	3a30      	subs	r2, #48	; 0x30
     28a:	b2d5      	uxtb	r5, r2
     28c:	2d09      	cmp	r5, #9
            number = number * 10;
     28e:	bf9e      	ittt	ls
     290:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
            number += settingsInput[i] - 48;
     294:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
     298:	b29b      	uxthls	r3, r3
     29a:	e7e1      	b.n	260 <processSettingsInput+0x24>
     29c:	2000002e 	andcs	r0, r0, lr, lsr #32
     2a0:	2000002c 	andcs	r0, r0, ip, lsr #32
     2a4:	2000001a 	andcs	r0, r0, sl, lsl r0
     2a8:	20000018 	andcs	r0, r0, r8, lsl r0

000002ac <root>:

// Root finite state machine that handles user input
fsm root {
     2ac:	b510      	push	{r4, lr}
     2ae:	b090      	sub	sp, #64	; 0x40
     2b0:	280a      	cmp	r0, #10
     2b2:	f200 8095 	bhi.w	3e0 <root+0x134>
     2b6:	e8df f000 	tbb	[pc, r0]
     2ba:	140f0a06 	strne	r0, [pc], #-2566	; 2c2 <root+0x16>
     2be:	43312925 	teqmi	r1, #606208	; 0x94000
     2c2:	006f5b54 	rsbeq	r5, pc, r4, asr fp	; <UNPREDICTABLE>
    fsmcode blinkerCode;

    Boolean blinkerRunning = NO;
        
    state Initial:
        ser_outf(Initial, "Enter your name: ");
     2c6:	2000      	movs	r0, #0
     2c8:	4947      	ldr	r1, [pc, #284]	; (3e8 <root+0x13c>)
     2ca:	f001 fa9d 	bl	1808 <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     2ce:	2214      	movs	r2, #20
     2d0:	2001      	movs	r0, #1
     2d2:	4946      	ldr	r1, [pc, #280]	; (3ec <root+0x140>)
     2d4:	f001 fa5c 	bl	1790 <ser_in>

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	2002      	movs	r0, #2
     2da:	4a44      	ldr	r2, [pc, #272]	; (3ec <root+0x140>)
     2dc:	4944      	ldr	r1, [pc, #272]	; (3f0 <root+0x144>)
     2de:	f001 fa93 	bl	1808 <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     2e2:	2003      	movs	r0, #3
     2e4:	4943      	ldr	r1, [pc, #268]	; (3f4 <root+0x148>)
     2e6:	aa03      	add	r2, sp, #12
     2e8:	f001 fab8 	bl	185c <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     2ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
     2f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     2f4:	2b41      	cmp	r3, #65	; 0x41
     2f6:	d167      	bne.n	3c8 <root+0x11c>
            proceed Adjust_Intervals;
     2f8:	2004      	movs	r0, #4
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     2fa:	f000 fec9 	bl	1090 <proceed>
        }

        proceed Show_Menu;
     2fe:	2002      	movs	r0, #2
     300:	f000 fec6 	bl	1090 <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	2000      	movs	r0, #0
     306:	493c      	ldr	r1, [pc, #240]	; (3f8 <root+0x14c>)
     308:	f001 fa7e 	bl	1808 <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	2232      	movs	r2, #50	; 0x32
     30e:	2005      	movs	r0, #5
     310:	a903      	add	r1, sp, #12
     312:	f001 fa3d 	bl	1790 <ser_in>

        processSettingsInput(settings);
     316:	a803      	add	r0, sp, #12
     318:	f7ff ff90 	bl	23c <processSettingsInput>

    state Start_Blinker:

        if(!blinkerRunning) {
     31c:	4c37      	ldr	r4, [pc, #220]	; (3fc <root+0x150>)
     31e:	7821      	ldrb	r1, [r4, #0]
     320:	b931      	cbnz	r1, 330 <root+0x84>
            // only calls the blinker fsm if it isn't running already
            blinkerCode = runfsm blinker;
     322:	4837      	ldr	r0, [pc, #220]	; (400 <root+0x154>)
     324:	f001 f898 	bl	1458 <__pi_fork>
     328:	4b36      	ldr	r3, [pc, #216]	; (404 <root+0x158>)
     32a:	6018      	str	r0, [r3, #0]
            blinkerRunning = YES;
     32c:	2301      	movs	r3, #1
     32e:	7023      	strb	r3, [r4, #0]
        }

        On = YES;
     330:	2301      	movs	r3, #1
     332:	4835      	ldr	r0, [pc, #212]	; (408 <root+0x15c>)
     334:	7003      	strb	r3, [r0, #0]

        trigger(&On);
     336:	f000 fecf 	bl	10d8 <__pi_trigger>

        proceed Show_Menu;
     33a:	2002      	movs	r0, #2
     33c:	f000 fea8 	bl	1090 <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	4b32      	ldr	r3, [pc, #200]	; (40c <root+0x160>)
     342:	4a33      	ldr	r2, [pc, #204]	; (410 <root+0x164>)
     344:	881b      	ldrh	r3, [r3, #0]
     346:	2007      	movs	r0, #7
     348:	9301      	str	r3, [sp, #4]
     34a:	4b32      	ldr	r3, [pc, #200]	; (414 <root+0x168>)
     34c:	4932      	ldr	r1, [pc, #200]	; (418 <root+0x16c>)
     34e:	881b      	ldrh	r3, [r3, #0]
     350:	9300      	str	r3, [sp, #0]
     352:	4b32      	ldr	r3, [pc, #200]	; (41c <root+0x170>)
     354:	8812      	ldrh	r2, [r2, #0]
     356:	881b      	ldrh	r3, [r3, #0]
     358:	f001 fa56 	bl	1808 <ser_outf>
            redOff,
            greenOn,
            greenOff
        );

        proceed Show_Menu;
     35c:	2002      	movs	r0, #2
     35e:	f000 fe97 	bl	1090 <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     362:	2008      	movs	r0, #8
     364:	492e      	ldr	r1, [pc, #184]	; (420 <root+0x174>)
     366:	f001 fa4f 	bl	1808 <ser_outf>
        displayCycle = YES;
     36a:	2201      	movs	r2, #1
     36c:	4b2d      	ldr	r3, [pc, #180]	; (424 <root+0x178>)
     36e:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", &ch);
     370:	2009      	movs	r0, #9
     372:	4920      	ldr	r1, [pc, #128]	; (3f4 <root+0x148>)
     374:	aa03      	add	r2, sp, #12
     376:	f001 fa71 	bl	185c <ser_inf>
        
        // ensures monitoring only stops when 'S' or 's' are entered
        if(ch == 'S' || ch == 's'){
     37a:	f89d 300c 	ldrb.w	r3, [sp, #12]
     37e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     382:	2b53      	cmp	r3, #83	; 0x53
     384:	d105      	bne.n	392 <root+0xe6>
            displayCycle = NO;
     386:	2200      	movs	r2, #0
     388:	4b26      	ldr	r3, [pc, #152]	; (424 <root+0x178>)
            proceed Show_Menu;
     38a:	2002      	movs	r0, #2
            displayCycle = NO;
     38c:	701a      	strb	r2, [r3, #0]
            proceed Show_Menu;
     38e:	f000 fe7f 	bl	1090 <proceed>
        }
        
        proceed Monitor;
     392:	2008      	movs	r0, #8
     394:	f000 fe7c 	bl	1090 <proceed>

    state Stop:
        On = NO;
     398:	2200      	movs	r2, #0
     39a:	4b1b      	ldr	r3, [pc, #108]	; (408 <root+0x15c>)
     39c:	701a      	strb	r2, [r3, #0]

        // Makes sure that the blinker code hasa been assigned to an actual value first
        if(blinkerCode != 0x0) {
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <root+0x158>)
     3a0:	6818      	ldr	r0, [r3, #0]
     3a2:	b108      	cbz	r0, 3a8 <root+0xfc>
            killall(blinkerCode);
     3a4:	f000 ffd8 	bl	1358 <killall>
     3a8:	2240      	movs	r2, #64	; 0x40
     3aa:	4b1f      	ldr	r3, [pc, #124]	; (428 <root+0x17c>)
        }

        // turn off all LEDs
        leds_all(0);

        proceed Show_Menu;
     3ac:	2002      	movs	r0, #2
     3ae:	601a      	str	r2, [r3, #0]
     3b0:	2280      	movs	r2, #128	; 0x80
     3b2:	601a      	str	r2, [r3, #0]
        leds_all(0);
     3b4:	4a1d      	ldr	r2, [pc, #116]	; (42c <root+0x180>)
     3b6:	7813      	ldrb	r3, [r2, #0]
     3b8:	7813      	ldrb	r3, [r2, #0]
     3ba:	f36f 1307 	bfc	r3, #4, #4
     3be:	7013      	strb	r3, [r2, #0]
        proceed Show_Menu;
     3c0:	f000 fe66 	bl	1090 <proceed>
     3c4:	b010      	add	sp, #64	; 0x40
     3c6:	bd10      	pop	{r4, pc}
        } else if (choice == 'S' || choice == 's') {
     3c8:	2b53      	cmp	r3, #83	; 0x53
     3ca:	d101      	bne.n	3d0 <root+0x124>
            proceed Stop;
     3cc:	200a      	movs	r0, #10
     3ce:	e794      	b.n	2fa <root+0x4e>
        } else if (choice == 'V' || choice == 'v') {
     3d0:	2b56      	cmp	r3, #86	; 0x56
     3d2:	d101      	bne.n	3d8 <root+0x12c>
            proceed View_Settings;
     3d4:	2007      	movs	r0, #7
     3d6:	e790      	b.n	2fa <root+0x4e>
        } else if (choice == 'M' || choice == 'm') {
     3d8:	2b4d      	cmp	r3, #77	; 0x4d
     3da:	d190      	bne.n	2fe <root+0x52>
            proceed Monitor;
     3dc:	2008      	movs	r0, #8
     3de:	e78c      	b.n	2fa <root+0x4e>
     3e0:	f000 fde8 	bl	fb4 <__pi_badstate>
     3e4:	e7ee      	b.n	3c4 <root+0x118>
     3e6:	bf00      	nop
     3e8:	00002c44 	andeq	r2, r0, r4, asr #24
     3ec:	20000030 	andcs	r0, r0, r0, lsr r0
     3f0:	00002c56 	andeq	r2, r0, r6, asr ip
     3f4:	00002ce7 	andeq	r2, r0, r7, ror #25
     3f8:	00002cea 	andeq	r2, r0, sl, ror #25
     3fc:	20000014 	andcs	r0, r0, r4, lsl r0
     400:	000000c9 	andeq	r0, r0, r9, asr #1
     404:	20000010 	andcs	r0, r0, r0, lsl r0
     408:	2000000c 	andcs	r0, r0, ip
     40c:	20000018 	andcs	r0, r0, r8, lsl r0
     410:	2000002e 	andcs	r0, r0, lr, lsr #32
     414:	2000001a 	andcs	r0, r0, sl, lsl r0
     418:	00002d1d 	andeq	r2, r0, sp, lsl sp
     41c:	2000002c 	andcs	r0, r0, ip, lsr #32
     420:	00002d58 	andeq	r2, r0, r8, asr sp
     424:	20000016 	andcs	r0, r0, r6, lsl r0
     428:	400220a0 	andmi	r2, r2, r0, lsr #1
     42c:	20000094 	mulcs	r0, r4, r0

00000430 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     430:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     432:	4801      	ldr	r0, [pc, #4]	; (438 <devinit_uart+0x8>)
     434:	f000 bebc 	b.w	11b0 <adddevfunc>
     438:	0000077d 	andeq	r0, r0, sp, ror r7

0000043c <udelay>:
void udelay (volatile word n) {
     43c:	b082      	sub	sp, #8
     43e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     442:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     446:	b29b      	uxth	r3, r3
     448:	b90b      	cbnz	r3, 44e <udelay+0x12>
}
     44a:	b002      	add	sp, #8
     44c:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     44e:	2304      	movs	r3, #4
	while (n--);
     450:	461a      	mov	r2, r3
     452:	3b01      	subs	r3, #1
     454:	b29b      	uxth	r3, r3
     456:	2a00      	cmp	r2, #0
     458:	d1fa      	bne.n	450 <udelay+0x14>
		n--;
     45a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     45e:	3b01      	subs	r3, #1
     460:	b29b      	uxth	r3, r3
     462:	f8ad 3006 	strh.w	r3, [sp, #6]
     466:	e7ec      	b.n	442 <udelay+0x6>

00000468 <mdelay>:
void mdelay (volatile word n) {
     468:	b507      	push	{r0, r1, r2, lr}
     46a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     46e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     472:	b29b      	uxth	r3, r3
     474:	b913      	cbnz	r3, 47c <mdelay+0x14>
}
     476:	b003      	add	sp, #12
     478:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     47c:	f240 30e7 	movw	r0, #999	; 0x3e7
     480:	f7ff ffdc 	bl	43c <udelay>
		n--;
     484:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     488:	3b01      	subs	r3, #1
     48a:	b29b      	uxth	r3, r3
     48c:	f8ad 3006 	strh.w	r3, [sp, #6]
     490:	e7ed      	b.n	46e <mdelay+0x6>
	...

00000494 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     494:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     496:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     498:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     49a:	d505      	bpl.n	4a8 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     49c:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <__pi_ondomain+0x34>)
     49e:	78da      	ldrb	r2, [r3, #3]
     4a0:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     4a2:	bf84      	itt	hi
     4a4:	2201      	movhi	r2, #1
     4a6:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     4a8:	4d08      	ldr	r5, [pc, #32]	; (4cc <__pi_ondomain+0x38>)
     4aa:	4620      	mov	r0, r4
     4ac:	682b      	ldr	r3, [r5, #0]
     4ae:	695b      	ldr	r3, [r3, #20]
     4b0:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b2:	682b      	ldr	r3, [r5, #0]
     4b4:	4620      	mov	r0, r4
     4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     4b8:	4798      	blx	r3
     4ba:	2801      	cmp	r0, #1
     4bc:	d1f9      	bne.n	4b2 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     4be:	4b02      	ldr	r3, [pc, #8]	; (4c8 <__pi_ondomain+0x34>)
     4c0:	6858      	ldr	r0, [r3, #4]
     4c2:	4304      	orrs	r4, r0
     4c4:	605c      	str	r4, [r3, #4]
}
     4c6:	bd38      	pop	{r3, r4, r5, pc}
     4c8:	20000094 	mulcs	r0, r4, r0
     4cc:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

000004d0 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     4d0:	460a      	mov	r2, r1
     4d2:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	4601      	mov	r1, r0
     4d6:	480f      	ldr	r0, [pc, #60]	; (514 <__pi_syserror+0x44>)
     4d8:	f000 ffe4 	bl	14a4 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4dc:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4de:	2540      	movs	r5, #64	; 0x40
     4e0:	462f      	mov	r7, r5
     4e2:	4e0d      	ldr	r6, [pc, #52]	; (518 <__pi_syserror+0x48>)
     4e4:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     4e6:	490d      	ldr	r1, [pc, #52]	; (51c <__pi_syserror+0x4c>)
     4e8:	6037      	str	r7, [r6, #0]
     4ea:	6034      	str	r4, [r6, #0]
     4ec:	780b      	ldrb	r3, [r1, #0]
     4ee:	780b      	ldrb	r3, [r1, #0]
     4f0:	20c8      	movs	r0, #200	; 0xc8
     4f2:	f36f 1307 	bfc	r3, #4, #4
     4f6:	700b      	strb	r3, [r1, #0]
     4f8:	f7ff ffb6 	bl	468 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4fc:	4b08      	ldr	r3, [pc, #32]	; (520 <__pi_syserror+0x50>)
     4fe:	20c8      	movs	r0, #200	; 0xc8
     500:	601d      	str	r5, [r3, #0]
     502:	601c      	str	r4, [r3, #0]
     504:	780b      	ldrb	r3, [r1, #0]
     506:	780b      	ldrb	r3, [r1, #0]
     508:	f36f 1307 	bfc	r3, #4, #4
     50c:	700b      	strb	r3, [r1, #0]
     50e:	f7ff ffab 	bl	468 <mdelay>
	while (1) {
     512:	e7e7      	b.n	4e4 <__pi_syserror+0x14>
     514:	00002d74 	andeq	r2, r0, r4, ror sp
     518:	40022090 	mulmi	r2, r0, r0
     51c:	20000094 	mulcs	r0, r4, r0
     520:	400220a0 	andmi	r2, r2, r0, lsr #1

00000524 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     524:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     526:	4b0a      	ldr	r3, [pc, #40]	; (550 <tci_run_delay_timer+0x2c>)
     528:	881c      	ldrh	r4, [r3, #0]
     52a:	4b0a      	ldr	r3, [pc, #40]	; (554 <tci_run_delay_timer+0x30>)
     52c:	8818      	ldrh	r0, [r3, #0]
     52e:	4b0a      	ldr	r3, [pc, #40]	; (558 <tci_run_delay_timer+0x34>)
     530:	1b00      	subs	r0, r0, r4
     532:	b284      	uxth	r4, r0
     534:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     536:	f001 fdb7 	bl	20a8 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     53a:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     53c:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     540:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     544:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	6018      	str	r0, [r3, #0]
	sti_tim;
     54a:	4b05      	ldr	r3, [pc, #20]	; (560 <tci_run_delay_timer+0x3c>)
     54c:	601a      	str	r2, [r3, #0]
}
     54e:	bd10      	pop	{r4, pc}
     550:	20000092 	mulcs	r0, r2, r0
     554:	20000090 	mulcs	r0, r0, r0
     558:	20000044 	andcs	r0, r0, r4, asr #32
     55c:	40092018 	andmi	r2, r9, r8, lsl r0
     560:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000564 <tci_run_auxiliary_timer>:
	cli_aux;
     564:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     566:	b510      	push	{r4, lr}
	cli_aux;
     568:	4c06      	ldr	r4, [pc, #24]	; (584 <tci_run_auxiliary_timer+0x20>)
     56a:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	f001 fd9c 	bl	20a8 <NOROM_AONRTCCurrent64BitValueGet>
     570:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     572:	4b05      	ldr	r3, [pc, #20]	; (588 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     574:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     578:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     57a:	6018      	str	r0, [r3, #0]
	sti_aux;
     57c:	2301      	movs	r3, #1
     57e:	6023      	str	r3, [r4, #0]
}
     580:	bd10      	pop	{r4, pc}
     582:	bf00      	nop
     584:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     588:	40092020 	andmi	r2, r9, r0, lsr #32

0000058c <AONRTCIntHandler>:
void AONRTCIntHandler () {
     58c:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     58e:	4b3b      	ldr	r3, [pc, #236]	; (67c <AONRTCIntHandler+0xf0>)
     590:	6818      	ldr	r0, [r3, #0]
     592:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     596:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     59a:	d542      	bpl.n	622 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     59c:	4b38      	ldr	r3, [pc, #224]	; (680 <AONRTCIntHandler+0xf4>)
     59e:	6819      	ldr	r1, [r3, #0]
     5a0:	2900      	cmp	r1, #0
     5a2:	d053      	beq.n	64c <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     5a4:	880a      	ldrh	r2, [r1, #0]
     5a6:	2a00      	cmp	r2, #0
     5a8:	d04e      	beq.n	648 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     5aa:	3a01      	subs	r2, #1
     5ac:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     5ae:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     5b0:	685c      	ldr	r4, [r3, #4]
     5b2:	b194      	cbz	r4, 5da <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     5b4:	8821      	ldrh	r1, [r4, #0]
     5b6:	b111      	cbz	r1, 5be <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     5b8:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     5ba:	3901      	subs	r1, #1
     5bc:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     5be:	689c      	ldr	r4, [r3, #8]
     5c0:	b15c      	cbz	r4, 5da <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     5c2:	8821      	ldrh	r1, [r4, #0]
     5c4:	b111      	cbz	r1, 5cc <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     5c6:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     5c8:	3901      	subs	r1, #1
     5ca:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     5cc:	68d9      	ldr	r1, [r3, #12]
     5ce:	b121      	cbz	r1, 5da <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     5d0:	880b      	ldrh	r3, [r1, #0]
     5d2:	b113      	cbz	r3, 5da <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     5d4:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     5d6:	3b01      	subs	r3, #1
     5d8:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     5da:	4b2a      	ldr	r3, [pc, #168]	; (684 <AONRTCIntHandler+0xf8>)
     5dc:	7819      	ldrb	r1, [r3, #0]
     5de:	0909      	lsrs	r1, r1, #4
     5e0:	d047      	beq.n	672 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     5e2:	7859      	ldrb	r1, [r3, #1]
     5e4:	1c4a      	adds	r2, r1, #1
     5e6:	b2d2      	uxtb	r2, r2
     5e8:	705a      	strb	r2, [r3, #1]
     5ea:	b9d1      	cbnz	r1, 622 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     5ec:	781a      	ldrb	r2, [r3, #0]
     5ee:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     5f2:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     5f4:	d02c      	beq.n	650 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     5f6:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	bf42      	ittt	mi
     5fa:	2140      	movmi	r1, #64	; 0x40
     5fc:	4a22      	ldrmi	r2, [pc, #136]	; (688 <AONRTCIntHandler+0xfc>)
     5fe:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     600:	781a      	ldrb	r2, [r3, #0]
     602:	0692      	lsls	r2, r2, #26
     604:	bf42      	ittt	mi
     606:	2180      	movmi	r1, #128	; 0x80
     608:	4a1f      	ldrmi	r2, [pc, #124]	; (688 <AONRTCIntHandler+0xfc>)
     60a:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     60c:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     60e:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     610:	781a      	ldrb	r2, [r3, #0]
     612:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     616:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     618:	781a      	ldrb	r2, [r3, #0]
     61a:	0752      	lsls	r2, r2, #29
     61c:	d501      	bpl.n	622 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     61e:	22c8      	movs	r2, #200	; 0xc8
     620:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     622:	07c3      	lsls	r3, r0, #31
     624:	d50f      	bpl.n	646 <AONRTCIntHandler+0xba>
		cli_tim;
     626:	2100      	movs	r1, #0
     628:	4b18      	ldr	r3, [pc, #96]	; (68c <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     62a:	4a19      	ldr	r2, [pc, #100]	; (690 <AONRTCIntHandler+0x104>)
     62c:	4819      	ldr	r0, [pc, #100]	; (694 <AONRTCIntHandler+0x108>)
		cli_tim;
     62e:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     630:	8803      	ldrh	r3, [r0, #0]
     632:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     634:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     636:	4423      	add	r3, r4
		RISE_N_SHINE;
     638:	4a12      	ldr	r2, [pc, #72]	; (684 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     63a:	b29b      	uxth	r3, r3
     63c:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     63e:	7813      	ldrb	r3, [r2, #0]
     640:	f043 0302 	orr.w	r3, r3, #2
     644:	7013      	strb	r3, [r2, #0]
}
     646:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     648:	2201      	movs	r2, #1
     64a:	e7b1      	b.n	5b0 <AONRTCIntHandler+0x24>
     64c:	2201      	movs	r2, #1
     64e:	e7c4      	b.n	5da <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     650:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     652:	bf42      	ittt	mi
     654:	2140      	movmi	r1, #64	; 0x40
     656:	4a10      	ldrmi	r2, [pc, #64]	; (698 <AONRTCIntHandler+0x10c>)
     658:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     65a:	781a      	ldrb	r2, [r3, #0]
     65c:	0691      	lsls	r1, r2, #26
     65e:	bf42      	ittt	mi
     660:	2180      	movmi	r1, #128	; 0x80
     662:	4a0d      	ldrmi	r2, [pc, #52]	; (698 <AONRTCIntHandler+0x10c>)
     664:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     666:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     668:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     66a:	781a      	ldrb	r2, [r3, #0]
     66c:	f042 0208 	orr.w	r2, r2, #8
     670:	e7d1      	b.n	616 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     672:	2a00      	cmp	r2, #0
     674:	d0d5      	beq.n	622 <AONRTCIntHandler+0x96>
			cli_aux;
     676:	4b09      	ldr	r3, [pc, #36]	; (69c <AONRTCIntHandler+0x110>)
     678:	6019      	str	r1, [r3, #0]
     67a:	e7d2      	b.n	622 <AONRTCIntHandler+0x96>
     67c:	40092004 	andmi	r2, r9, r4
     680:	200000a0 	andcs	r0, r0, r0, lsr #1
     684:	20000094 	mulcs	r0, r4, r0
     688:	40022090 	mulmi	r2, r0, r0
     68c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     690:	20000044 	andcs	r0, r0, r4, asr #32
     694:	2000009c 	mulcs	r0, ip, r0
     698:	400220a0 	andmi	r2, r2, r0, lsr #1
     69c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

000006a0 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     6a2:	2600      	movs	r6, #0
     6a4:	4b0e      	ldr	r3, [pc, #56]	; (6e0 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     6a6:	4f0f      	ldr	r7, [pc, #60]	; (6e4 <tci_update_delay_ticks+0x44>)
	cli_tim;
     6a8:	601e      	str	r6, [r3, #0]
	if (setdel) {
     6aa:	883d      	ldrh	r5, [r7, #0]
     6ac:	b19d      	cbz	r5, 6d6 <tci_update_delay_ticks+0x36>
		if (force) {
     6ae:	b1a0      	cbz	r0, 6da <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	4b0d      	ldr	r3, [pc, #52]	; (6e8 <tci_update_delay_ticks+0x48>)
     6b2:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	f001 fcf8 	bl	20a8 <NOROM_AONRTCCurrent64BitValueGet>
     6b8:	0d80      	lsrs	r0, r0, #22
     6ba:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6be:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     6c2:	b280      	uxth	r0, r0
     6c4:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c6:	1b2c      	subs	r4, r5, r4
	return NO;
     6c8:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ca:	4b08      	ldr	r3, [pc, #32]	; (6ec <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     6cc:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ce:	881a      	ldrh	r2, [r3, #0]
     6d0:	4414      	add	r4, r2
     6d2:	b2a4      	uxth	r4, r4
     6d4:	801c      	strh	r4, [r3, #0]
}
     6d6:	4628      	mov	r0, r5
     6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     6da:	2501      	movs	r5, #1
     6dc:	601d      	str	r5, [r3, #0]
		return YES;
     6de:	e7fa      	b.n	6d6 <tci_update_delay_ticks+0x36>
     6e0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6e4:	20000044 	andcs	r0, r0, r4, asr #32
     6e8:	40092018 	andmi	r2, r9, r8, lsl r0
     6ec:	2000009c 	mulcs	r0, ip, r0

000006f0 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     6f2:	4e0f      	ldr	r6, [pc, #60]	; (730 <__pi_uart_setrate+0x40>)
     6f4:	4d0f      	ldr	r5, [pc, #60]	; (734 <__pi_uart_setrate+0x44>)
     6f6:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     6fa:	68db      	ldr	r3, [r3, #12]
     6fc:	4628      	mov	r0, r5
     6fe:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     700:	2264      	movs	r2, #100	; 0x64
     702:	6833      	ldr	r3, [r6, #0]
     704:	4628      	mov	r0, r5
     706:	4362      	muls	r2, r4
     708:	685e      	ldr	r6, [r3, #4]
     70a:	490b      	ldr	r1, [pc, #44]	; (738 <__pi_uart_setrate+0x48>)
     70c:	2360      	movs	r3, #96	; 0x60
     70e:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	4a0a      	ldr	r2, [pc, #40]	; (73c <__pi_uart_setrate+0x4c>)
}
     712:	2001      	movs	r0, #1
     714:	6813      	ldr	r3, [r2, #0]
     716:	f043 0310 	orr.w	r3, r3, #16
     71a:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	6853      	ldr	r3, [r2, #4]
     71e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     722:	f043 0301 	orr.w	r3, r3, #1
     726:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     728:	4b05      	ldr	r3, [pc, #20]	; (740 <__pi_uart_setrate+0x50>)
     72a:	801c      	strh	r4, [r3, #0]
}
     72c:	bd70      	pop	{r4, r5, r6, pc}
     72e:	bf00      	nop
     730:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     734:	40001000 	andmi	r1, r0, r0
     738:	02dc6c00 	sbcseq	r6, ip, #0, 24
     73c:	4000102c 	andmi	r1, r0, ip, lsr #32
     740:	20000046 	andcs	r0, r0, r6, asr #32

00000744 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	4a08      	ldr	r2, [pc, #32]	; (768 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     746:	4909      	ldr	r1, [pc, #36]	; (76c <reinit_uart+0x28>)
     748:	6813      	ldr	r3, [r2, #0]
     74a:	f043 0310 	orr.w	r3, r3, #16
     74e:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	2212      	movs	r2, #18
     752:	4b07      	ldr	r3, [pc, #28]	; (770 <reinit_uart+0x2c>)
     754:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     756:	4a07      	ldr	r2, [pc, #28]	; (774 <reinit_uart+0x30>)
     758:	6813      	ldr	r3, [r2, #0]
     75a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     75e:	6013      	str	r3, [r2, #0]
     760:	4b05      	ldr	r3, [pc, #20]	; (778 <reinit_uart+0x34>)
     762:	8818      	ldrh	r0, [r3, #0]
     764:	f7ff bfc4 	b.w	6f0 <__pi_uart_setrate>
     768:	4000102c 	andmi	r1, r0, ip, lsr #32
     76c:	20000080 	andcs	r0, r0, r0, lsl #1
     770:	40001034 	andmi	r1, r0, r4, lsr r0
     774:	40001030 	andmi	r1, r0, r0, lsr r0
     778:	20000046 	andcs	r0, r0, r6, asr #32

0000077c <ioreq_uart_a>:
	switch (operation) {
     77c:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     77e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     782:	460d      	mov	r5, r1
     784:	4614      	mov	r4, r2
     786:	2803      	cmp	r0, #3
     788:	d86e      	bhi.n	868 <ioreq_uart_a+0xec>
     78a:	e8df f000 	tbb	[pc, r0]
     78e:	5a471253 	bpl	11c50e2 <__ccfg+0x11a513a>
				*buf++ = uart_a_read;
     792:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     796:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     798:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     79c:	b11e      	cbz	r6, 7a6 <ioreq_uart_a+0x2a>
     79e:	f8d8 3000 	ldr.w	r3, [r8]
     7a2:	06d8      	lsls	r0, r3, #27
     7a4:	d5f5      	bpl.n	792 <ioreq_uart_a+0x16>
			if (len != operation) {
     7a6:	42a6      	cmp	r6, r4
     7a8:	d00a      	beq.n	7c0 <ioreq_uart_a+0x44>
				return operation - len;
     7aa:	1ba4      	subs	r4, r4, r6
}
     7ac:	4620      	mov	r0, r4
     7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     7b2:	4616      	mov	r6, r2
			uart_a_disable_int;
     7b4:	4f2e      	ldr	r7, [pc, #184]	; (870 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     7b6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 884 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     7ba:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 888 <ioreq_uart_a+0x10c>
     7be:	e7ed      	b.n	79c <ioreq_uart_a+0x20>
			uart_a_disable_int;
     7c0:	683b      	ldr	r3, [r7, #0]
     7c2:	2015      	movs	r0, #21
     7c4:	695b      	ldr	r3, [r3, #20]
     7c6:	4798      	blx	r3
			if (uart_a_char_available) {
     7c8:	f8d8 3000 	ldr.w	r3, [r8]
     7cc:	06d9      	lsls	r1, r3, #27
     7ce:	d404      	bmi.n	7da <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	2015      	movs	r0, #21
     7d4:	691b      	ldr	r3, [r3, #16]
     7d6:	4798      	blx	r3
				goto Redo_rx;
     7d8:	e7e0      	b.n	79c <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7da:	4a26      	ldr	r2, [pc, #152]	; (874 <ioreq_uart_a+0xf8>)
     7dc:	7993      	ldrb	r3, [r2, #6]
     7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     7e2:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7e6:	7193      	strb	r3, [r2, #6]
			return -2;
     7e8:	e7e0      	b.n	7ac <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     7ea:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     7ee:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     7f0:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     7f4:	b11e      	cbz	r6, 7fe <ioreq_uart_a+0x82>
     7f6:	f8d8 3000 	ldr.w	r3, [r8]
     7fa:	069a      	lsls	r2, r3, #26
     7fc:	d5f5      	bpl.n	7ea <ioreq_uart_a+0x6e>
			if (len != operation) {
     7fe:	42a6      	cmp	r6, r4
     800:	d1d3      	bne.n	7aa <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     802:	683b      	ldr	r3, [r7, #0]
     804:	2015      	movs	r0, #21
     806:	695b      	ldr	r3, [r3, #20]
     808:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     80a:	f8d8 3000 	ldr.w	r3, [r8]
     80e:	069b      	lsls	r3, r3, #26
     810:	d40b      	bmi.n	82a <ioreq_uart_a+0xae>
				uart_a_enable_int;
     812:	683b      	ldr	r3, [r7, #0]
     814:	2015      	movs	r0, #21
     816:	691b      	ldr	r3, [r3, #16]
     818:	4798      	blx	r3
				goto Redo_tx;
     81a:	e7eb      	b.n	7f4 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     81c:	4616      	mov	r6, r2
			uart_a_disable_int;
     81e:	4f14      	ldr	r7, [pc, #80]	; (870 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     820:	f8df 8060 	ldr.w	r8, [pc, #96]	; 884 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     824:	f8df 9060 	ldr.w	r9, [pc, #96]	; 888 <ioreq_uart_a+0x10c>
     828:	e7e4      	b.n	7f4 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82a:	4a12      	ldr	r2, [pc, #72]	; (874 <ioreq_uart_a+0xf8>)
     82c:	7993      	ldrb	r3, [r2, #6]
     82e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     832:	e7d6      	b.n	7e2 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     834:	4b0e      	ldr	r3, [pc, #56]	; (870 <ioreq_uart_a+0xf4>)
     836:	2015      	movs	r0, #21
     838:	681b      	ldr	r3, [r3, #0]
			return 0;
     83a:	2400      	movs	r4, #0
			uart_a_enable_int;
     83c:	691b      	ldr	r3, [r3, #16]
     83e:	4798      	blx	r3
			return 0;
     840:	e7b4      	b.n	7ac <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     842:	2a01      	cmp	r2, #1
     844:	d109      	bne.n	85a <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     846:	490b      	ldr	r1, [pc, #44]	; (874 <ioreq_uart_a+0xf8>)
     848:	8828      	ldrh	r0, [r5, #0]
     84a:	f7ff ff51 	bl	6f0 <__pi_uart_setrate>
     84e:	2800      	cmp	r0, #0
     850:	d1ac      	bne.n	7ac <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     852:	2003      	movs	r0, #3
     854:	4908      	ldr	r1, [pc, #32]	; (878 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     856:	f7ff fe3b 	bl	4d0 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     85a:	2a02      	cmp	r2, #2
     85c:	d104      	bne.n	868 <ioreq_uart_a+0xec>
	return urates [0];
     85e:	4b07      	ldr	r3, [pc, #28]	; (87c <ioreq_uart_a+0x100>)
				return 1;
     860:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     862:	881b      	ldrh	r3, [r3, #0]
     864:	800b      	strh	r3, [r1, #0]
				return 1;
     866:	e7a1      	b.n	7ac <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     868:	2002      	movs	r0, #2
     86a:	4905      	ldr	r1, [pc, #20]	; (880 <ioreq_uart_a+0x104>)
     86c:	e7f3      	b.n	856 <ioreq_uart_a+0xda>
     86e:	bf00      	nop
     870:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     874:	20000080 	andcs	r0, r0, r0, lsl #1
     878:	00002d83 	andeq	r2, r0, r3, lsl #27
     87c:	20000046 	andcs	r0, r0, r6, asr #32
     880:	00002d87 	andeq	r2, r0, r7, lsl #27
     884:	40001018 	andmi	r1, r0, r8, lsl r0
     888:	40001000 	andmi	r1, r0, r0

0000088c <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     890:	b530      	push	{r4, r5, lr}
     892:	4b29      	ldr	r3, [pc, #164]	; (938 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	4c29      	ldr	r4, [pc, #164]	; (93c <UART0IntHandler+0xb0>)
     896:	601a      	str	r2, [r3, #0]
     898:	6822      	ldr	r2, [r4, #0]
     89a:	06d5      	lsls	r5, r2, #27
     89c:	d423      	bmi.n	8e6 <UART0IntHandler+0x5a>
     89e:	4b28      	ldr	r3, [pc, #160]	; (940 <UART0IntHandler+0xb4>)
     8a0:	799a      	ldrb	r2, [r3, #6]
     8a2:	0610      	lsls	r0, r2, #24
     8a4:	d51f      	bpl.n	8e6 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a6:	799a      	ldrb	r2, [r3, #6]
     8a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     8ac:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8ae:	4a25      	ldr	r2, [pc, #148]	; (944 <UART0IntHandler+0xb8>)
     8b0:	7813      	ldrb	r3, [r2, #0]
     8b2:	f043 0302 	orr.w	r3, r3, #2
     8b6:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     8b8:	4b23      	ldr	r3, [pc, #140]	; (948 <UART0IntHandler+0xbc>)
     8ba:	681a      	ldr	r2, [r3, #0]
     8bc:	b19a      	cbz	r2, 8e6 <UART0IntHandler+0x5a>
     8be:	4610      	mov	r0, r2
     8c0:	2300      	movs	r3, #0
     8c2:	f830 1b10 	ldrh.w	r1, [r0], #16
     8c6:	f001 0107 	and.w	r1, r1, #7
     8ca:	4299      	cmp	r1, r3
     8cc:	dd09      	ble.n	8e2 <UART0IntHandler+0x56>
     8ce:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8d2:	3301      	adds	r3, #1
     8d4:	f515 7f81 	cmn.w	r5, #258	; 0x102
     8d8:	d1f7      	bne.n	8ca <UART0IntHandler+0x3e>
     8da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8de:	889b      	ldrh	r3, [r3, #4]
     8e0:	8013      	strh	r3, [r2, #0]
     8e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8e4:	e7ea      	b.n	8bc <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e6:	6823      	ldr	r3, [r4, #0]
     8e8:	0699      	lsls	r1, r3, #26
     8ea:	d424      	bmi.n	936 <UART0IntHandler+0xaa>
     8ec:	4b14      	ldr	r3, [pc, #80]	; (940 <UART0IntHandler+0xb4>)
     8ee:	799a      	ldrb	r2, [r3, #6]
     8f0:	0652      	lsls	r2, r2, #25
     8f2:	d520      	bpl.n	936 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     8f4:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	799a      	ldrb	r2, [r3, #6]
     8fa:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     8fe:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     900:	4a10      	ldr	r2, [pc, #64]	; (944 <UART0IntHandler+0xb8>)
     902:	7813      	ldrb	r3, [r2, #0]
     904:	f043 0302 	orr.w	r3, r3, #2
     908:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     90a:	4b0f      	ldr	r3, [pc, #60]	; (948 <UART0IntHandler+0xbc>)
     90c:	681a      	ldr	r2, [r3, #0]
     90e:	b192      	cbz	r2, 936 <UART0IntHandler+0xaa>
     910:	4610      	mov	r0, r2
     912:	2300      	movs	r3, #0
     914:	f830 1b10 	ldrh.w	r1, [r0], #16
     918:	f001 0107 	and.w	r1, r1, #7
     91c:	4299      	cmp	r1, r3
     91e:	dd08      	ble.n	932 <UART0IntHandler+0xa6>
     920:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     924:	3301      	adds	r3, #1
     926:	42a5      	cmp	r5, r4
     928:	d1f8      	bne.n	91c <UART0IntHandler+0x90>
     92a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     92e:	889b      	ldrh	r3, [r3, #4]
     930:	8013      	strh	r3, [r2, #0]
     932:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     934:	e7eb      	b.n	90e <UART0IntHandler+0x82>
	}

	RTNI;
}
     936:	bd30      	pop	{r4, r5, pc}
     938:	40001044 	andmi	r1, r0, r4, asr #32
     93c:	40001018 	andmi	r1, r0, r8, lsl r0
     940:	20000080 	andcs	r0, r0, r0, lsl #1
     944:	20000094 	mulcs	r0, r4, r0
     948:	20000048 	andcs	r0, r0, r8, asr #32

0000094c <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     94c:	b570      	push	{r4, r5, r6, lr}
     94e:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     952:	4e0c      	ldr	r6, [pc, #48]	; (984 <__buttons_setirq+0x38>)
     954:	4d0c      	ldr	r5, [pc, #48]	; (988 <__buttons_setirq+0x3c>)
     956:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	4c0c      	ldr	r4, [pc, #48]	; (98c <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     95a:	0a1b      	lsrs	r3, r3, #8
     95c:	fa01 f203 	lsl.w	r2, r1, r3
     960:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     962:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     964:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     966:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     96a:	0a1b      	lsrs	r3, r3, #8
     96c:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96e:	01db      	lsls	r3, r3, #7
     970:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     974:	4322      	orrs	r2, r4
     976:	4323      	orrs	r3, r4
     978:	6010      	str	r0, [r2, #0]
     97a:	6029      	str	r1, [r5, #0]
     97c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     97e:	b662      	cpsie	i
			val;
	}
	sti;
}
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	bf00      	nop
     984:	00002e70 	andeq	r2, r0, r0, ror lr
     988:	400220e0 	andmi	r2, r2, r0, ror #1
     98c:	42000048 	andmi	r0, r0, #72	; 0x48

00000990 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     992:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     994:	2200      	movs	r2, #0
     996:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     998:	4f09      	ldr	r7, [pc, #36]	; (9c0 <__pinlist_setirq+0x30>)
     99a:	4c0a      	ldr	r4, [pc, #40]	; (9c4 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	490a      	ldr	r1, [pc, #40]	; (9c8 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     99e:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     9a0:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9a6:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9aa:	01db      	lsls	r3, r3, #7
     9ac:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     9b0:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     9b2:	2a04      	cmp	r2, #4
     9b4:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b6:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	d1f1      	bne.n	99e <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     9ba:	b662      	cpsie	i
			val;
	}
	sti;
}
     9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9be:	bf00      	nop
     9c0:	00002e6c 	andeq	r2, r0, ip, ror #28
     9c4:	400220e0 	andmi	r2, r2, r0, ror #1
     9c8:	42000048 	andmi	r0, r0, #72	; 0x48

000009cc <GPIOIntHandler>:
void GPIOIntHandler () {
     9cc:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     9ce:	4c23      	ldr	r4, [pc, #140]	; (a5c <GPIOIntHandler+0x90>)
     9d0:	6822      	ldr	r2, [r4, #0]
     9d2:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     9d6:	d01e      	beq.n	a16 <GPIOIntHandler+0x4a>
	buttons_disable ();
     9d8:	2000      	movs	r0, #0
     9da:	f7ff ffb7 	bl	94c <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     9de:	4b20      	ldr	r3, [pc, #128]	; (a60 <GPIOIntHandler+0x94>)
     9e0:	4d20      	ldr	r5, [pc, #128]	; (a64 <GPIOIntHandler+0x98>)
     9e2:	681a      	ldr	r2, [r3, #0]
     9e4:	b192      	cbz	r2, a0c <GPIOIntHandler+0x40>
     9e6:	4610      	mov	r0, r2
     9e8:	2300      	movs	r3, #0
     9ea:	f830 1b10 	ldrh.w	r1, [r0], #16
     9ee:	f001 0107 	and.w	r1, r1, #7
     9f2:	4299      	cmp	r1, r3
     9f4:	dd08      	ble.n	a08 <GPIOIntHandler+0x3c>
     9f6:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     9fa:	3301      	adds	r3, #1
     9fc:	42ae      	cmp	r6, r5
     9fe:	d1f8      	bne.n	9f2 <GPIOIntHandler+0x26>
     a00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     a04:	889b      	ldrh	r3, [r3, #4]
     a06:	8013      	strh	r3, [r2, #0]
     a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a0a:	e7eb      	b.n	9e4 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     a0c:	4a16      	ldr	r2, [pc, #88]	; (a68 <GPIOIntHandler+0x9c>)
     a0e:	7813      	ldrb	r3, [r2, #0]
     a10:	f043 0302 	orr.w	r3, r3, #2
     a14:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     a16:	6823      	ldr	r3, [r4, #0]
     a18:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     a1c:	d01d      	beq.n	a5a <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     a1e:	4b10      	ldr	r3, [pc, #64]	; (a60 <GPIOIntHandler+0x94>)
     a20:	4c12      	ldr	r4, [pc, #72]	; (a6c <GPIOIntHandler+0xa0>)
     a22:	6818      	ldr	r0, [r3, #0]
     a24:	b190      	cbz	r0, a4c <GPIOIntHandler+0x80>
     a26:	4601      	mov	r1, r0
     a28:	2300      	movs	r3, #0
     a2a:	f831 2b10 	ldrh.w	r2, [r1], #16
     a2e:	f002 0207 	and.w	r2, r2, #7
     a32:	429a      	cmp	r2, r3
     a34:	dd08      	ble.n	a48 <GPIOIntHandler+0x7c>
     a36:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     a3a:	3301      	adds	r3, #1
     a3c:	42a5      	cmp	r5, r4
     a3e:	d1f8      	bne.n	a32 <GPIOIntHandler+0x66>
     a40:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     a44:	889b      	ldrh	r3, [r3, #4]
     a46:	8003      	strh	r3, [r0, #0]
     a48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     a4a:	e7eb      	b.n	a24 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     a4c:	f7ff ffa0 	bl	990 <__pinlist_setirq>
	RISE_N_SHINE;
     a50:	4a05      	ldr	r2, [pc, #20]	; (a68 <GPIOIntHandler+0x9c>)
     a52:	7813      	ldrb	r3, [r2, #0]
     a54:	f043 0302 	orr.w	r3, r3, #2
     a58:	7013      	strb	r3, [r2, #0]
}
     a5a:	bd70      	pop	{r4, r5, r6, pc}
     a5c:	400220e0 	andmi	r2, r2, r0, ror #1
     a60:	20000048 	andcs	r0, r0, r8, asr #32
     a64:	00002e70 	andeq	r2, r0, r0, ror lr
     a68:	20000094 	mulcs	r0, r4, r0
     a6c:	00002e6c 	andeq	r2, r0, ip, ror #28

00000a70 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	4c58      	ldr	r4, [pc, #352]	; (bd8 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a76:	2004      	movs	r0, #4
     a78:	f7ff fd0c 	bl	494 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	6823      	ldr	r3, [r4, #0]
     a7e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a82:	69db      	ldr	r3, [r3, #28]
     a84:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a86:	6823      	ldr	r3, [r4, #0]
     a88:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a8e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	6823      	ldr	r3, [r4, #0]
     a92:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a98:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a9a:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	2600      	movs	r6, #0
     a9e:	4c4f      	ldr	r4, [pc, #316]	; (bdc <system_init+0x16c>)
     aa0:	4f4f      	ldr	r7, [pc, #316]	; (be0 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa2:	f8df c17c 	ldr.w	ip, [pc, #380]	; c20 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa6:	f8df e17c 	ldr.w	lr, [pc, #380]	; c24 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aaa:	f8df 8140 	ldr.w	r8, [pc, #320]	; bec <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aae:	f8df 9134 	ldr.w	r9, [pc, #308]	; be4 <system_init+0x174>
     ab2:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     aba:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abe:	0091      	lsls	r1, r2, #2
     ac0:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     ac4:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     ac8:	ea05 0a0c 	and.w	sl, r5, ip
     acc:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     ad0:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad2:	bf44      	itt	mi
     ad4:	ea41 010e 	orrmi.w	r1, r1, lr
     ad8:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     ada:	fa03 f202 	lsl.w	r2, r3, r2
     ade:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	bf4c      	ite	mi
     ae2:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae6:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aea:	2e11      	cmp	r6, #17
     aec:	d1e2      	bne.n	ab4 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aee:	2540      	movs	r5, #64	; 0x40
     af0:	2680      	movs	r6, #128	; 0x80
     af2:	4b3c      	ldr	r3, [pc, #240]	; (be4 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     af4:	493c      	ldr	r1, [pc, #240]	; (be8 <system_init+0x178>)
     af6:	601d      	str	r5, [r3, #0]
     af8:	601e      	str	r6, [r3, #0]
     afa:	780b      	ldrb	r3, [r1, #0]
     afc:	780b      	ldrb	r3, [r1, #0]
     afe:	20c8      	movs	r0, #200	; 0xc8
     b00:	f36f 1307 	bfc	r3, #4, #4
     b04:	700b      	strb	r3, [r1, #0]
     b06:	f7ff fcaf 	bl	468 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b0a:	4b38      	ldr	r3, [pc, #224]	; (bec <system_init+0x17c>)
     b0c:	20c8      	movs	r0, #200	; 0xc8
     b0e:	601d      	str	r5, [r3, #0]
     b10:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b12:	2601      	movs	r6, #1
	all_leds_blink;
     b14:	780b      	ldrb	r3, [r1, #0]
     b16:	780b      	ldrb	r3, [r1, #0]
     b18:	f36f 1307 	bfc	r3, #4, #4
     b1c:	700b      	strb	r3, [r1, #0]
     b1e:	f7ff fca3 	bl	468 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     b22:	4b33      	ldr	r3, [pc, #204]	; (bf0 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b24:	4a33      	ldr	r2, [pc, #204]	; (bf4 <system_init+0x184>)
     b26:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	4b33      	ldr	r3, [pc, #204]	; (bf8 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     b2a:	4d34      	ldr	r5, [pc, #208]	; (bfc <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b2c:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b2e:	4b34      	ldr	r3, [pc, #208]	; (c00 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     b30:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b32:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     b34:	682b      	ldr	r3, [r5, #0]
     b36:	691b      	ldr	r3, [r3, #16]
     b38:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     b3a:	f000 fb99 	bl	1270 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     b3e:	682b      	ldr	r3, [r5, #0]
     b40:	2010      	movs	r0, #16
     b42:	691b      	ldr	r3, [r3, #16]
     b44:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b46:	2002      	movs	r0, #2
     b48:	f7ff fca4 	bl	494 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	68ab      	ldr	r3, [r5, #8]
     b4e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b52:	69db      	ldr	r3, [r3, #28]
     b54:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b56:	68ab      	ldr	r3, [r5, #8]
     b58:	f44f 7000 	mov.w	r0, #512	; 0x200
     b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b5e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	68ab      	ldr	r3, [r5, #8]
     b62:	f44f 7000 	mov.w	r0, #512	; 0x200
     b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b68:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b6a:	2260      	movs	r2, #96	; 0x60
     b6c:	4b25      	ldr	r3, [pc, #148]	; (c04 <system_init+0x194>)
     b6e:	6026      	str	r6, [r4, #0]
     b70:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b72:	f7ff fde7 	bl	744 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b76:	f000 fdf7 	bl	1768 <ee_open>
     b7a:	f000 fdff 	bl	177c <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b7e:	f001 ff8f 	bl	2aa0 <NOROM_SysCtrlResetSourceGet>
     b82:	2808      	cmp	r0, #8
     b84:	d11a      	bne.n	bbc <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b86:	4b20      	ldr	r3, [pc, #128]	; (c08 <system_init+0x198>)
     b88:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b8e:	3b04      	subs	r3, #4
     b90:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     b96:	3324      	adds	r3, #36	; 0x24
     b98:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     b9a:	2000      	movs	r0, #0
     b9c:	f7ff fc48 	bl	430 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	4a1a      	ldr	r2, [pc, #104]	; (c0c <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     ba2:	2015      	movs	r0, #21
     ba4:	6813      	ldr	r3, [r2, #0]
     ba6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     baa:	6013      	str	r3, [r2, #0]
     bac:	4b13      	ldr	r3, [pc, #76]	; (bfc <system_init+0x18c>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	691b      	ldr	r3, [r3, #16]
     bb2:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     bb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     bb8:	f7ff bcd4 	b.w	564 <tci_run_auxiliary_timer>
		diag ("");
     bbc:	4814      	ldr	r0, [pc, #80]	; (c10 <system_init+0x1a0>)
     bbe:	f000 fc71 	bl	14a4 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc2:	4814      	ldr	r0, [pc, #80]	; (c14 <system_init+0x1a4>)
     bc4:	f000 fc6e 	bl	14a4 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	4913      	ldr	r1, [pc, #76]	; (c18 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     bca:	4814      	ldr	r0, [pc, #80]	; (c1c <system_init+0x1ac>)
     bcc:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     bd0:	b289      	uxth	r1, r1
     bd2:	f000 fc67 	bl	14a4 <diag>
     bd6:	e7e0      	b.n	b9a <system_init+0x12a>
     bd8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     bdc:	60082028 	andvs	r2, r8, r8, lsr #32
     be0:	00002df4 	strdeq	r2, [r0], -r4
     be4:	40022090 	mulmi	r2, r0, r0
     be8:	20000094 	mulcs	r0, r4, r0
     bec:	400220a0 	andmi	r2, r2, r0, lsr #1
     bf0:	40092024 	andmi	r2, r9, r4, lsr #32
     bf4:	00050003 	andeq	r0, r5, r3
     bf8:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     bfc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     c00:	40092000 	andmi	r2, r9, r0
     c04:	20000046 	andcs	r0, r0, r6, asr #32
     c08:	4009400c 	andmi	r4, r9, ip
     c0c:	40001038 	andmi	r1, r0, r8, lsr r0
     c10:	00002d57 	andeq	r2, r0, r7, asr sp
     c14:	00002d8b 	andeq	r2, r0, fp, lsl #27
     c18:	200000b4 	strhcs	r0, [r0], -r4
     c1c:	00002dd7 	ldrdeq	r2, [r0], -r7
     c20:	7f077f3f 	svcvc	0x00077f3f
     c24:	42441a00 	submi	r1, r4, #0, 20

00000c28 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     c28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     c2c:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c2e:	4b79      	ldr	r3, [pc, #484]	; (e14 <__pi_release+0x1ec>)
     c30:	af00      	add	r7, sp, #0
     c32:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     c36:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     c3a:	681a      	ldr	r2, [r3, #0]
     c3c:	4b76      	ldr	r3, [pc, #472]	; (e18 <__pi_release+0x1f0>)
     c3e:	429a      	cmp	r2, r3
     c40:	d127      	bne.n	c92 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c42:	4e76      	ldr	r6, [pc, #472]	; (e1c <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     c44:	2100      	movs	r1, #0
     c46:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c4a:	f000 f9bb 	bl	fc4 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     c4e:	4a74      	ldr	r2, [pc, #464]	; (e20 <__pi_release+0x1f8>)
     c50:	4b74      	ldr	r3, [pc, #464]	; (e24 <__pi_release+0x1fc>)
     c52:	6812      	ldr	r2, [r2, #0]
     c54:	601a      	str	r2, [r3, #0]
     c56:	681a      	ldr	r2, [r3, #0]
     c58:	b9fa      	cbnz	r2, c9a <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c5a:	4c73      	ldr	r4, [pc, #460]	; (e28 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c5e:	4d73      	ldr	r5, [pc, #460]	; (e2c <__pi_release+0x204>)
     c60:	782b      	ldrb	r3, [r5, #0]
     c62:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c66:	0798      	lsls	r0, r3, #30
     c68:	607a      	str	r2, [r7, #4]
     c6a:	f100 80cd 	bmi.w	e08 <__pi_release+0x1e0>
	system_event_count ++;
     c6e:	4a70      	ldr	r2, [pc, #448]	; (e30 <__pi_release+0x208>)
     c70:	6813      	ldr	r3, [r2, #0]
     c72:	3301      	adds	r3, #1
     c74:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     c76:	78ea      	ldrb	r2, [r5, #3]
     c78:	2a01      	cmp	r2, #1
     c7a:	b2d3      	uxtb	r3, r2
     c7c:	d017      	beq.n	cae <__pi_release+0x86>
     c7e:	2b02      	cmp	r3, #2
     c80:	d031      	beq.n	ce6 <__pi_release+0xbe>
     c82:	2b00      	cmp	r3, #0
     c84:	f040 8095 	bne.w	db2 <__pi_release+0x18a>
			__WFI ();
     c88:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     c8a:	b662      	cpsie	i
     c8c:	bf00      	nop
     c8e:	bf00      	nop
     c90:	e7e4      	b.n	c5c <__pi_release+0x34>
	check_stack_overflow;
     c92:	200b      	movs	r0, #11
     c94:	4967      	ldr	r1, [pc, #412]	; (e34 <__pi_release+0x20c>)
     c96:	f7ff fc1b 	bl	4d0 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9a:	6851      	ldr	r1, [r2, #4]
     c9c:	b129      	cbz	r1, caa <__pi_release+0x82>
     c9e:	8810      	ldrh	r0, [r2, #0]
     ca0:	0704      	lsls	r4, r0, #28
     ca2:	d102      	bne.n	caa <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	0900      	lsrs	r0, r0, #4
     ca6:	4788      	blx	r1
			goto Redo;
     ca8:	e7cc      	b.n	c44 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     caa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     cac:	e7d2      	b.n	c54 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cae:	4a62      	ldr	r2, [pc, #392]	; (e38 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb2:	6813      	ldr	r3, [r2, #0]
     cb4:	f043 0301 	orr.w	r3, r3, #1
     cb8:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cba:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     cbe:	f043 0303 	orr.w	r3, r3, #3
     cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc6:	4b5d      	ldr	r3, [pc, #372]	; (e3c <__pi_release+0x214>)
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	699b      	ldr	r3, [r3, #24]
     ccc:	4798      	blx	r3
     cce:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	6823      	ldr	r3, [r4, #0]
     cd2:	f043 0304 	orr.w	r3, r3, #4
     cd6:	6023      	str	r3, [r4, #0]
			__WFI ();
     cd8:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cda:	6823      	ldr	r3, [r4, #0]
     cdc:	f023 0304 	bic.w	r3, r3, #4
     ce0:	6023      	str	r3, [r4, #0]
     ce2:	6833      	ldr	r3, [r6, #0]
}
     ce4:	e7d1      	b.n	c8a <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce6:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cea:	687a      	ldr	r2, [r7, #4]
     cec:	4b54      	ldr	r3, [pc, #336]	; (e40 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cee:	f8df b188 	ldr.w	fp, [pc, #392]	; e78 <__pi_release+0x250>
     cf2:	601a      	str	r2, [r3, #0]
     cf4:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf6:	f8df a144 	ldr.w	sl, [pc, #324]	; e3c <__pi_release+0x214>
     cfa:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cfe:	6833      	ldr	r3, [r6, #0]
     d00:	4b50      	ldr	r3, [pc, #320]	; (e44 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d02:	f8df 9178 	ldr.w	r9, [pc, #376]	; e7c <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d06:	f8c3 8000 	str.w	r8, [r3]
     d0a:	6868      	ldr	r0, [r5, #4]
     d0c:	f8da 3000 	ldr.w	r3, [sl]
     d10:	f040 0020 	orr.w	r0, r0, #32
     d14:	699b      	ldr	r3, [r3, #24]
     d16:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	4b4b      	ldr	r3, [pc, #300]	; (e48 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d1a:	2103      	movs	r1, #3
     d1c:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	f8d9 3000 	ldr.w	r3, [r9]
     d24:	4849      	ldr	r0, [pc, #292]	; (e4c <__pi_release+0x224>)
     d26:	f023 0303 	bic.w	r3, r3, #3
     d2a:	f8c9 3000 	str.w	r3, [r9]
     d2e:	4b48      	ldr	r3, [pc, #288]	; (e50 <__pi_release+0x228>)
     d30:	681a      	ldr	r2, [r3, #0]
     d32:	6852      	ldr	r2, [r2, #4]
     d34:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d36:	6878      	ldr	r0, [r7, #4]
     d38:	f001 fd72 	bl	2820 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d3c:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d3e:	6822      	ldr	r2, [r4, #0]
     d40:	f042 0204 	orr.w	r2, r2, #4
     d44:	6022      	str	r2, [r4, #0]
			__WFI ();
     d46:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d4a:	4b41      	ldr	r3, [pc, #260]	; (e50 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d4c:	f022 0204 	bic.w	r2, r2, #4
     d50:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d52:	681b      	ldr	r3, [r3, #0]
     d54:	4641      	mov	r1, r8
     d56:	685b      	ldr	r3, [r3, #4]
     d58:	483c      	ldr	r0, [pc, #240]	; (e4c <__pi_release+0x224>)
     d5a:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	4a3c      	ldr	r2, [pc, #240]	; (e54 <__pi_release+0x22c>)
     d62:	f043 0303 	orr.w	r3, r3, #3
     d66:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6a:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d6e:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     d70:	0699      	lsls	r1, r3, #26
     d72:	d5fc      	bpl.n	d6e <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	f8da 3000 	ldr.w	r3, [sl]
     d78:	6868      	ldr	r0, [r5, #4]
     d7a:	695b      	ldr	r3, [r3, #20]
     d7c:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d7e:	4d2f      	ldr	r5, [pc, #188]	; (e3c <__pi_release+0x214>)
     d80:	4b2a      	ldr	r3, [pc, #168]	; (e2c <__pi_release+0x204>)
     d82:	6858      	ldr	r0, [r3, #4]
     d84:	682b      	ldr	r3, [r5, #0]
     d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d88:	4798      	blx	r3
     d8a:	2801      	cmp	r0, #1
     d8c:	d1f8      	bne.n	d80 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d8e:	4b2d      	ldr	r3, [pc, #180]	; (e44 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	4a2d      	ldr	r2, [pc, #180]	; (e48 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d92:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d94:	2300      	movs	r3, #0
     d96:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	4b29      	ldr	r3, [pc, #164]	; (e40 <__pi_release+0x218>)
     d9a:	6018      	str	r0, [r3, #0]
     d9c:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     d9e:	f001 fe4f 	bl	2a40 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     da2:	f7ff fccf 	bl	744 <reinit_uart>
     da6:	4a2c      	ldr	r2, [pc, #176]	; (e58 <__pi_release+0x230>)
     da8:	6813      	ldr	r3, [r2, #0]
     daa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     dae:	6013      	str	r3, [r2, #0]
}
     db0:	e76b      	b.n	c8a <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db2:	4b2a      	ldr	r3, [pc, #168]	; (e5c <__pi_release+0x234>)
     db4:	2001      	movs	r0, #1
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	68db      	ldr	r3, [r3, #12]
     dba:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dbc:	4a28      	ldr	r2, [pc, #160]	; (e60 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbe:	4929      	ldr	r1, [pc, #164]	; (e64 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc0:	6813      	ldr	r3, [r2, #0]
     dc2:	f023 0301 	bic.w	r3, r3, #1
     dc6:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	4b27      	ldr	r3, [pc, #156]	; (e68 <__pi_release+0x240>)
     dca:	681a      	ldr	r2, [r3, #0]
     dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     dd0:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd2:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     dd6:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	604a      	str	r2, [r1, #4]
     dda:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	687a      	ldr	r2, [r7, #4]
     dde:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	687a      	ldr	r2, [r7, #4]
     de2:	4b22      	ldr	r3, [pc, #136]	; (e6c <__pi_release+0x244>)
     de4:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de6:	2201      	movs	r2, #1
     de8:	4b21      	ldr	r3, [pc, #132]	; (e70 <__pi_release+0x248>)
     dea:	601a      	str	r2, [r3, #0]
     dec:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dee:	4a19      	ldr	r2, [pc, #100]	; (e54 <__pi_release+0x22c>)
     df0:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df2:	069b      	lsls	r3, r3, #26
     df4:	d4fc      	bmi.n	df0 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df6:	2201      	movs	r2, #1
     df8:	4b1e      	ldr	r3, [pc, #120]	; (e74 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     dfa:	2037      	movs	r0, #55	; 0x37
     dfc:	601a      	str	r2, [r3, #0]
     dfe:	4b0f      	ldr	r3, [pc, #60]	; (e3c <__pi_release+0x214>)
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	699b      	ldr	r3, [r3, #24]
     e04:	4798      	blx	r3
			goto DeepSleep;
     e06:	e763      	b.n	cd0 <__pi_release+0xa8>
	__SLEEP;
     e08:	782b      	ldrb	r3, [r5, #0]
     e0a:	f36f 0341 	bfc	r3, #1, #1
     e0e:	702b      	strb	r3, [r5, #0]
     e10:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     e12:	e717      	b.n	c44 <__pi_release+0x1c>
     e14:	20005000 	andcs	r5, r0, r0
     e18:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e1c:	4009202c 	andmi	r2, r9, ip, lsr #32
     e20:	20000048 	andcs	r0, r0, r8, asr #32
     e24:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
     e28:	e000ed10 	and	lr, r0, r0, lsl sp
     e2c:	20000094 	mulcs	r0, r4, r0
     e30:	20000088 	andcs	r0, r0, r8, lsl #1
     e34:	00002dee 	andeq	r2, r0, lr, ror #27
     e38:	4008218c 	andmi	r2, r8, ip, lsl #3
     e3c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     e40:	4009400c 	andmi	r4, r9, ip
     e44:	60082028 	andvs	r2, r8, r8, lsr #32
     e48:	43040180 	movwmi	r0, #16768	; 0x4180
     e4c:	40034000 	andmi	r4, r3, r0
     e50:	100001d8 	ldrdne	r0, [r0], -r8
     e54:	40091014 	andmi	r1, r9, r4, lsl r0
     e58:	40001038 	andmi	r1, r0, r8, lsr r0
     e5c:	100001a0 	andne	r0, r0, r0, lsr #3
     e60:	40091010 	andmi	r1, r9, r0, lsl r0
     e64:	40093000 	andmi	r3, r9, r0
     e68:	40091040 	andmi	r1, r9, r0, asr #32
     e6c:	43220420 			; <UNDEFINED> instruction: 0x43220420
     e70:	40091018 	andmi	r1, r9, r8, lsl r0
     e74:	43040188 	movwmi	r0, #16776	; 0x4188
     e78:	43220200 			; <UNDEFINED> instruction: 0x43220200
     e7c:	40082224 	andmi	r2, r8, r4, lsr #4

00000e80 <main>:

#include "scheduler.h"

}

int main (void) {
     e80:	b510      	push	{r4, lr}
     e82:	4b11      	ldr	r3, [pc, #68]	; (ec8 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	4911      	ldr	r1, [pc, #68]	; (ecc <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e86:	4a12      	ldr	r2, [pc, #72]	; (ed0 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e88:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8c:	4293      	cmp	r3, r2
     e8e:	d1fb      	bne.n	e88 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	4c10      	ldr	r4, [pc, #64]	; (ed4 <main+0x54>)
	system_init ();
     e92:	f7ff fded 	bl	a70 <system_init>
	tcv_init ();
     e96:	f000 fba3 	bl	15e0 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9a:	6823      	ldr	r3, [r4, #0]
     e9c:	2129      	movs	r1, #41	; 0x29
     e9e:	2000      	movs	r0, #0
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	6823      	ldr	r3, [r4, #0]
     ea6:	2120      	movs	r1, #32
     ea8:	681b      	ldr	r3, [r3, #0]
     eaa:	2001      	movs	r0, #1
     eac:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eae:	2100      	movs	r1, #0
     eb0:	4809      	ldr	r0, [pc, #36]	; (ed8 <main+0x58>)
     eb2:	f000 fad1 	bl	1458 <__pi_fork>
     eb6:	4b09      	ldr	r3, [pc, #36]	; (edc <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     eb8:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eba:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     ebc:	2010      	movs	r0, #16
     ebe:	f000 f937 	bl	1130 <delay>
     ec2:	b662      	cpsie	i

	sti;

	__pi_release ();
     ec4:	f7ff feb0 	bl	c28 <__pi_release>
     ec8:	20004bfc 	strdcs	r4, [r0], -ip
     ecc:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     ed0:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     ed4:	10000184 	andne	r0, r0, r4, lsl #3
     ed8:	000002ad 	andeq	r0, r0, sp, lsr #5
     edc:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

00000ee0 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     ee0:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     ee2:	4b0d      	ldr	r3, [pc, #52]	; (f18 <killev+0x38>)
	wfun = (aword)(pid->code);
     ee4:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     ee6:	681a      	ldr	r2, [r3, #0]
     ee8:	b1aa      	cbz	r2, f16 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     eea:	4614      	mov	r4, r2
     eec:	f834 1b10 	ldrh.w	r1, [r4], #16
     ef0:	2300      	movs	r3, #0
     ef2:	f001 0107 	and.w	r1, r1, #7
     ef6:	e001      	b.n	efc <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     ef8:	42b5      	cmp	r5, r6
     efa:	d006      	beq.n	f0a <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     efc:	4299      	cmp	r1, r3
     efe:	dd08      	ble.n	f12 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     f00:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f04:	3301      	adds	r3, #1
     f06:	42a8      	cmp	r0, r5
     f08:	d1f6      	bne.n	ef8 <killev+0x18>
			    ) {
				wakeupev (i, j);
     f0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f0e:	889b      	ldrh	r3, [r3, #4]
     f10:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f14:	e7e8      	b.n	ee8 <killev+0x8>
				break;
			}
		}
	}
}
     f16:	bd70      	pop	{r4, r5, r6, pc}
     f18:	20000048 	andcs	r0, r0, r8, asr #32

00000f1c <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	4a1d      	ldr	r2, [pc, #116]	; (f94 <qfree+0x78>)
static void qfree (aword *ch) {
     f1e:	b530      	push	{r4, r5, lr}
     f20:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f22:	6813      	ldr	r3, [r2, #0]
     f24:	b93b      	cbnz	r3, f36 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f26:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f28:	4a1a      	ldr	r2, [pc, #104]	; (f94 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f2a:	bb53      	cbnz	r3, f82 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f2c:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f2e:	4b1a      	ldr	r3, [pc, #104]	; (f98 <qfree+0x7c>)
	m_setnextp (cc, ch);
     f30:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f32:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     f34:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f36:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     f3a:	3101      	adds	r1, #1
     f3c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     f40:	4288      	cmp	r0, r1
     f42:	d10b      	bne.n	f5c <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     f44:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     f46:	f850 0c04 	ldr.w	r0, [r0, #-4]
     f4a:	f853 1c04 	ldr.w	r1, [r3, #-4]
     f4e:	4401      	add	r1, r0
     f50:	4618      	mov	r0, r3
     f52:	3101      	adds	r1, #1
     f54:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	e7e3      	b.n	f24 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f60:	3101      	adds	r1, #1
     f62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     f66:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     f68:	bf03      	ittte	eq
     f6a:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     f70:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     f74:	461a      	movne	r2, r3
     f76:	bf02      	ittt	eq
     f78:	1949      	addeq	r1, r1, r5
     f7a:	3101      	addeq	r1, #1
     f7c:	f840 1c04 	streq.w	r1, [r0, #-4]
     f80:	e7ea      	b.n	f58 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     f82:	f853 4c04 	ldr.w	r4, [r3, #-4]
     f86:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f8a:	428c      	cmp	r4, r1
     f8c:	d2ce      	bcs.n	f2c <qfree+0x10>
		chunk = m_nextp (chunk))
     f8e:	461a      	mov	r2, r3
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	e7ca      	b.n	f2a <qfree+0xe>
     f94:	2000005c 	andcs	r0, r0, ip, asr r0
     f98:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000f9c <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	4a03      	ldr	r2, [pc, #12]	; (fac <dgout+0x10>)
     f9e:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     fa0:	071b      	lsls	r3, r3, #28
     fa2:	d4fc      	bmi.n	f9e <dgout+0x2>
	diag_wchar (c, a);
     fa4:	4b02      	ldr	r3, [pc, #8]	; (fb0 <dgout+0x14>)
     fa6:	b2c0      	uxtb	r0, r0
     fa8:	6018      	str	r0, [r3, #0]
}
     faa:	4770      	bx	lr
     fac:	40001018 	andmi	r1, r0, r8, lsl r0
     fb0:	40001000 	andmi	r1, r0, r0

00000fb4 <__pi_badstate>:
	syserror (ESTATE, "state");
     fb4:	2007      	movs	r0, #7
void __pi_badstate (void) {
     fb6:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     fb8:	4901      	ldr	r1, [pc, #4]	; (fc0 <__pi_badstate+0xc>)
     fba:	f7ff fa89 	bl	4d0 <__pi_syserror>
     fbe:	bf00      	nop
     fc0:	00002e38 	andeq	r2, r0, r8, lsr lr

00000fc4 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fc6:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	4608      	mov	r0, r1
     fca:	f7ff fb69 	bl	6a0 <tci_update_delay_ticks>
     fce:	2800      	cmp	r0, #0
     fd0:	d154      	bne.n	107c <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd2:	4b2b      	ldr	r3, [pc, #172]	; (1080 <update_n_wake+0xbc>)
     fd4:	4d2b      	ldr	r5, [pc, #172]	; (1084 <update_n_wake+0xc0>)
     fd6:	8819      	ldrh	r1, [r3, #0]
     fd8:	882a      	ldrh	r2, [r5, #0]
     fda:	b289      	uxth	r1, r1
     fdc:	428a      	cmp	r2, r1
     fde:	492a      	ldr	r1, [pc, #168]	; (1088 <update_n_wake+0xc4>)
     fe0:	d803      	bhi.n	fea <update_n_wake+0x26>
     fe2:	8808      	ldrh	r0, [r1, #0]
     fe4:	b280      	uxth	r0, r0
     fe6:	4282      	cmp	r2, r0
     fe8:	d20d      	bcs.n	1006 <update_n_wake+0x42>
     fea:	881e      	ldrh	r6, [r3, #0]
     fec:	8808      	ldrh	r0, [r1, #0]
     fee:	b2b6      	uxth	r6, r6
     ff0:	b280      	uxth	r0, r0
     ff2:	4286      	cmp	r6, r0
     ff4:	d236      	bcs.n	1064 <update_n_wake+0xa0>
     ff6:	8818      	ldrh	r0, [r3, #0]
     ff8:	b280      	uxth	r0, r0
     ffa:	4282      	cmp	r2, r0
     ffc:	d903      	bls.n	1006 <update_n_wake+0x42>
     ffe:	8808      	ldrh	r0, [r1, #0]
    1000:	b280      	uxth	r0, r0
    1002:	4282      	cmp	r2, r0
    1004:	d32e      	bcc.n	1064 <update_n_wake+0xa0>
		for_all_tasks (i) {
    1006:	4a21      	ldr	r2, [pc, #132]	; (108c <update_n_wake+0xc8>)
    1008:	6810      	ldr	r0, [r2, #0]
    100a:	b918      	cbnz	r0, 1014 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    100c:	8818      	ldrh	r0, [r3, #0]
    100e:	4404      	add	r4, r0
    1010:	802c      	strh	r4, [r5, #0]
    1012:	e02c      	b.n	106e <update_n_wake+0xaa>
			if (!twaiting (i))
    1014:	8806      	ldrh	r6, [r0, #0]
    1016:	0732      	lsls	r2, r6, #28
    1018:	d51b      	bpl.n	1052 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101a:	881f      	ldrh	r7, [r3, #0]
    101c:	8842      	ldrh	r2, [r0, #2]
    101e:	b2bf      	uxth	r7, r7
    1020:	42ba      	cmp	r2, r7
    1022:	d803      	bhi.n	102c <update_n_wake+0x68>
    1024:	880f      	ldrh	r7, [r1, #0]
    1026:	b2bf      	uxth	r7, r7
    1028:	42ba      	cmp	r2, r7
    102a:	d20f      	bcs.n	104c <update_n_wake+0x88>
    102c:	f8b3 c000 	ldrh.w	ip, [r3]
    1030:	880f      	ldrh	r7, [r1, #0]
    1032:	fa1f fc8c 	uxth.w	ip, ip
    1036:	b2bf      	uxth	r7, r7
    1038:	45bc      	cmp	ip, r7
    103a:	d20c      	bcs.n	1056 <update_n_wake+0x92>
    103c:	881f      	ldrh	r7, [r3, #0]
    103e:	b2bf      	uxth	r7, r7
    1040:	42ba      	cmp	r2, r7
    1042:	d903      	bls.n	104c <update_n_wake+0x88>
    1044:	880f      	ldrh	r7, [r1, #0]
    1046:	b2bf      	uxth	r7, r7
    1048:	42ba      	cmp	r2, r7
    104a:	d304      	bcc.n	1056 <update_n_wake+0x92>
				wakeuptm (i);
    104c:	f026 060f 	bic.w	r6, r6, #15
    1050:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    1052:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1054:	e7d9      	b.n	100a <update_n_wake+0x46>
				d = i->Timer - znew;
    1056:	881e      	ldrh	r6, [r3, #0]
    1058:	1b92      	subs	r2, r2, r6
    105a:	b292      	uxth	r2, r2
    105c:	4294      	cmp	r4, r2
    105e:	bf28      	it	cs
    1060:	4614      	movcs	r4, r2
    1062:	e7f6      	b.n	1052 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1064:	8818      	ldrh	r0, [r3, #0]
    1066:	1a12      	subs	r2, r2, r0
    1068:	b292      	uxth	r2, r2
    106a:	4294      	cmp	r4, r2
    106c:	d9ce      	bls.n	100c <update_n_wake+0x48>
	__pi_old = znew;
    106e:	881b      	ldrh	r3, [r3, #0]
    1070:	b29b      	uxth	r3, r3
    1072:	800b      	strh	r3, [r1, #0]
}
    1074:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1078:	f7ff ba54 	b.w	524 <tci_run_delay_timer>
}
    107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    107e:	bf00      	nop
    1080:	2000009c 	mulcs	r0, ip, r0
    1084:	20000090 	mulcs	r0, r0, r0
    1088:	20000092 	mulcs	r0, r2, r0
    108c:	20000048 	andcs	r0, r0, r8, asr #32

00001090 <proceed>:
void proceed (word state) {
    1090:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1092:	4b03      	ldr	r3, [pc, #12]	; (10a0 <proceed+0x10>)
    1094:	0100      	lsls	r0, r0, #4
    1096:	681b      	ldr	r3, [r3, #0]
    1098:	8018      	strh	r0, [r3, #0]
	release;
    109a:	f7ff fdc5 	bl	c28 <__pi_release>
    109e:	bf00      	nop
    10a0:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

000010a4 <__pi_wait>:
void __pi_wait (aword event, word state) {
    10a4:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    10a6:	4b0a      	ldr	r3, [pc, #40]	; (10d0 <__pi_wait+0x2c>)
    10a8:	681c      	ldr	r4, [r3, #0]
    10aa:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    10ac:	f013 0f04 	tst.w	r3, #4
    10b0:	f003 0207 	and.w	r2, r3, #7
    10b4:	d003      	beq.n	10be <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    10b6:	2005      	movs	r0, #5
    10b8:	4906      	ldr	r1, [pc, #24]	; (10d4 <__pi_wait+0x30>)
    10ba:	f7ff fa09 	bl	4d0 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    10be:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    10c2:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    10c4:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    10c6:	8191      	strh	r1, [r2, #12]
    10c8:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    10ca:	8023      	strh	r3, [r4, #0]
}
    10cc:	bd10      	pop	{r4, pc}
    10ce:	bf00      	nop
    10d0:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    10d4:	00002e3e 	andeq	r2, r0, lr, lsr lr

000010d8 <__pi_trigger>:
void __pi_trigger (aword event) {
    10d8:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <__pi_trigger+0x30>)
    10dc:	681a      	ldr	r2, [r3, #0]
    10de:	b192      	cbz	r2, 1106 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    10e0:	4614      	mov	r4, r2
    10e2:	2300      	movs	r3, #0
    10e4:	f834 1b10 	ldrh.w	r1, [r4], #16
    10e8:	f001 0107 	and.w	r1, r1, #7
    10ec:	4299      	cmp	r1, r3
    10ee:	dd08      	ble.n	1102 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    10f0:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    10f4:	3301      	adds	r3, #1
    10f6:	4285      	cmp	r5, r0
    10f8:	d1f8      	bne.n	10ec <__pi_trigger+0x14>
				wakeupev (i, j);
    10fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10fe:	889b      	ldrh	r3, [r3, #4]
    1100:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1102:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1104:	e7eb      	b.n	10de <__pi_trigger+0x6>
}
    1106:	bd30      	pop	{r4, r5, pc}
    1108:	20000048 	andcs	r0, r0, r8, asr #32

0000110c <__pi_join>:
aword __pi_join (aword pid, word st) {
    110c:	b510      	push	{r4, lr}
    110e:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1110:	4b06      	ldr	r3, [pc, #24]	; (112c <__pi_join+0x20>)
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	b90b      	cbnz	r3, 111a <__pi_join+0xe>
	return 0;
    1116:	461c      	mov	r4, r3
    1118:	e004      	b.n	1124 <__pi_join+0x18>
		if ((aword)i == pid) {
    111a:	42a3      	cmp	r3, r4
    111c:	d104      	bne.n	1128 <__pi_join+0x1c>
			__pi_wait (pid, st);
    111e:	4620      	mov	r0, r4
    1120:	f7ff ffc0 	bl	10a4 <__pi_wait>
}
    1124:	4620      	mov	r0, r4
    1126:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    112a:	e7f3      	b.n	1114 <__pi_join+0x8>
    112c:	20000048 	andcs	r0, r0, r8, asr #32

00001130 <delay>:
void delay (word d, word state) {
    1130:	b538      	push	{r3, r4, r5, lr}
    1132:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1134:	4d0a      	ldr	r5, [pc, #40]	; (1160 <delay+0x30>)
    1136:	682a      	ldr	r2, [r5, #0]
    1138:	8813      	ldrh	r3, [r2, #0]
    113a:	f003 0307 	and.w	r3, r3, #7
    113e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1142:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    1144:	2101      	movs	r1, #1
    1146:	f7ff ff3d 	bl	fc4 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    114a:	4b06      	ldr	r3, [pc, #24]	; (1164 <delay+0x34>)
    114c:	8818      	ldrh	r0, [r3, #0]
    114e:	682b      	ldr	r3, [r5, #0]
    1150:	4404      	add	r4, r0
    1152:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    1154:	682a      	ldr	r2, [r5, #0]
    1156:	8813      	ldrh	r3, [r2, #0]
    1158:	f043 0308 	orr.w	r3, r3, #8
    115c:	8013      	strh	r3, [r2, #0]
}
    115e:	bd38      	pop	{r3, r4, r5, pc}
    1160:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1164:	20000092 	mulcs	r0, r2, r0

00001168 <running>:
	if (fun == NULL)
    1168:	4603      	mov	r3, r0
    116a:	b910      	cbnz	r0, 1172 <running+0xa>
		return (int) __pi_curr;
    116c:	4b05      	ldr	r3, [pc, #20]	; (1184 <running+0x1c>)
    116e:	6818      	ldr	r0, [r3, #0]
    1170:	4770      	bx	lr
	for_all_tasks (i)
    1172:	4a05      	ldr	r2, [pc, #20]	; (1188 <running+0x20>)
    1174:	6810      	ldr	r0, [r2, #0]
    1176:	b900      	cbnz	r0, 117a <running+0x12>
}
    1178:	4770      	bx	lr
		if (i->code == fun)
    117a:	6842      	ldr	r2, [r0, #4]
    117c:	429a      	cmp	r2, r3
    117e:	d0fb      	beq.n	1178 <running+0x10>
	for_all_tasks (i)
    1180:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1182:	e7f8      	b.n	1176 <running+0xe>
    1184:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1188:	20000048 	andcs	r0, r0, r8, asr #32

0000118c <__pi_strlen>:
int __pi_strlen (const char *s) {
    118c:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    118e:	2000      	movs	r0, #0
    1190:	5c1a      	ldrb	r2, [r3, r0]
    1192:	b902      	cbnz	r2, 1196 <__pi_strlen+0xa>
}
    1194:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1196:	3001      	adds	r0, #1
    1198:	e7fa      	b.n	1190 <__pi_strlen+0x4>

0000119a <__pi_memcpy>:
	while (n--)
    119a:	3801      	subs	r0, #1
    119c:	440a      	add	r2, r1
    119e:	4291      	cmp	r1, r2
    11a0:	d100      	bne.n	11a4 <__pi_memcpy+0xa>
}
    11a2:	4770      	bx	lr
		*dest++ = *src++;
    11a4:	f811 3b01 	ldrb.w	r3, [r1], #1
    11a8:	f800 3f01 	strb.w	r3, [r0, #1]!
    11ac:	e7f7      	b.n	119e <__pi_memcpy+0x4>
	...

000011b0 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    11b2:	b119      	cbz	r1, 11bc <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    11b4:	2003      	movs	r0, #3
    11b6:	4905      	ldr	r1, [pc, #20]	; (11cc <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    11b8:	f7ff f98a 	bl	4d0 <__pi_syserror>
	if (ioreq [loc] != NULL)
    11bc:	4b04      	ldr	r3, [pc, #16]	; (11d0 <adddevfunc+0x20>)
    11be:	681a      	ldr	r2, [r3, #0]
    11c0:	b112      	cbz	r2, 11c8 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    11c2:	2004      	movs	r0, #4
    11c4:	4901      	ldr	r1, [pc, #4]	; (11cc <adddevfunc+0x1c>)
    11c6:	e7f7      	b.n	11b8 <adddevfunc+0x8>
	ioreq [loc] = rf;
    11c8:	6018      	str	r0, [r3, #0]
}
    11ca:	bd08      	pop	{r3, pc}
    11cc:	00002e41 	andeq	r2, r0, r1, asr #28
    11d0:	2000004c 	andcs	r0, r0, ip, asr #32

000011d4 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11d8:	4604      	mov	r4, r0
    11da:	4616      	mov	r6, r2
    11dc:	461d      	mov	r5, r3
    11de:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e2:	b921      	cbnz	r1, 11ee <io+0x1a>
    11e4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 126c <io+0x98>
    11e8:	f8d9 3000 	ldr.w	r3, [r9]
    11ec:	b91b      	cbnz	r3, 11f6 <io+0x22>
		syserror (ENODEVICE, "io");
    11ee:	2001      	movs	r0, #1
    11f0:	491d      	ldr	r1, [pc, #116]	; (1268 <io+0x94>)
    11f2:	f7ff f96d 	bl	4d0 <__pi_syserror>
	if (len == 0)
    11f6:	f1b8 0f00 	cmp.w	r8, #0
    11fa:	d028      	beq.n	124e <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	4642      	mov	r2, r8
    11fe:	4629      	mov	r1, r5
    1200:	4630      	mov	r0, r6
    1202:	4798      	blx	r3
	if (ret >= 0)
    1204:	2800      	cmp	r0, #0
    1206:	da23      	bge.n	1250 <io+0x7c>
	if (ret == -1) {
    1208:	1c41      	adds	r1, r0, #1
    120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    120e:	d108      	bne.n	1222 <io+0x4e>
		if (retry == WNONE)
    1210:	429c      	cmp	r4, r3
    1212:	d01c      	beq.n	124e <io+0x7a>
		iowait (dev, operation, retry);
    1214:	4621      	mov	r1, r4
    1216:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    121a:	f7ff ff43 	bl	10a4 <__pi_wait>
			release;
    121e:	f7ff fd03 	bl	c28 <__pi_release>
	if (ret == -2) {
    1222:	1c82      	adds	r2, r0, #2
    1224:	d116      	bne.n	1254 <io+0x80>
		if (retry != WNONE) {
    1226:	429c      	cmp	r4, r3
    1228:	f8d9 9000 	ldr.w	r9, [r9]
    122c:	d00a      	beq.n	1244 <io+0x70>
			iowait (dev, operation, retry);
    122e:	4621      	mov	r1, r4
    1230:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1234:	f7ff ff36 	bl	10a4 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1238:	4642      	mov	r2, r8
    123a:	4629      	mov	r1, r5
    123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1240:	47c8      	blx	r9
    1242:	e7ec      	b.n	121e <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1244:	4642      	mov	r2, r8
    1246:	4629      	mov	r1, r5
    1248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    124c:	47c8      	blx	r9
		return 0;
    124e:	2000      	movs	r0, #0
}
    1250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1254:	429c      	cmp	r4, r3
    1256:	d0fa      	beq.n	124e <io+0x7a>
		delay (-ret - 2, retry);
    1258:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    125c:	30fe      	adds	r0, #254	; 0xfe
    125e:	4621      	mov	r1, r4
    1260:	b280      	uxth	r0, r0
    1262:	f7ff ff65 	bl	1130 <delay>
		release;
    1266:	e7da      	b.n	121e <io+0x4a>
    1268:	00002e46 	andeq	r2, r0, r6, asr #28
    126c:	2000004c 	andcs	r0, r0, ip, asr #32

00001270 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1270:	4a0d      	ldr	r2, [pc, #52]	; (12a8 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1272:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1274:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1278:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    127c:	089b      	lsrs	r3, r3, #2
    127e:	1e59      	subs	r1, r3, #1
    1280:	29ff      	cmp	r1, #255	; 0xff
    1282:	d803      	bhi.n	128c <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1284:	2004      	movs	r0, #4
    1286:	4909      	ldr	r1, [pc, #36]	; (12ac <__pi_malloc_init+0x3c>)
    1288:	f7ff f922 	bl	4d0 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    128c:	4908      	ldr	r1, [pc, #32]	; (12b0 <__pi_malloc_init+0x40>)
    128e:	1d10      	adds	r0, r2, #4
    1290:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1292:	2000      	movs	r0, #0
    1294:	4907      	ldr	r1, [pc, #28]	; (12b4 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1296:	3b02      	subs	r3, #2
    1298:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129a:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    129e:	4a06      	ldr	r2, [pc, #24]	; (12b8 <__pi_malloc_init+0x48>)
    12a0:	6013      	str	r3, [r2, #0]
    12a2:	4a06      	ldr	r2, [pc, #24]	; (12bc <__pi_malloc_init+0x4c>)
    12a4:	6013      	str	r3, [r2, #0]
}
    12a6:	bd08      	pop	{r3, pc}
    12a8:	200000b4 	strhcs	r0, [r0], -r4
    12ac:	00002e49 	andeq	r2, r0, r9, asr #28
    12b0:	2000005c 	andcs	r0, r0, ip, asr r0
    12b4:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    12b8:	20000050 	andcs	r0, r0, r0, asr r0
    12bc:	20000058 	andcs	r0, r0, r8, asr r0

000012c0 <__pi_free>:
void __pi_free (aword *ch) {
    12c0:	b508      	push	{r3, lr}
	if (ch == NULL)
    12c2:	b1c8      	cbz	r0, 12f8 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
    12c8:	2b00      	cmp	r3, #0
    12ca:	db03      	blt.n	12d4 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    12cc:	2006      	movs	r0, #6
    12ce:	490b      	ldr	r1, [pc, #44]	; (12fc <__pi_free+0x3c>)
    12d0:	f7ff f8fe 	bl	4d0 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    12d4:	490a      	ldr	r1, [pc, #40]	; (1300 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    12d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    12da:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    12dc:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    12e0:	4413      	add	r3, r2
    12e2:	600b      	str	r3, [r1, #0]
	QFREE;
    12e4:	f7ff fe1a 	bl	f1c <qfree>
	if (mevent [MA_NP] . nwait) {
    12e8:	4806      	ldr	r0, [pc, #24]	; (1304 <__pi_free+0x44>)
    12ea:	7803      	ldrb	r3, [r0, #0]
    12ec:	b123      	cbz	r3, 12f8 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    12ee:	f7ff fef3 	bl	10d8 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    12f2:	7803      	ldrb	r3, [r0, #0]
    12f4:	3b01      	subs	r3, #1
    12f6:	7003      	strb	r3, [r0, #0]
}
    12f8:	bd08      	pop	{r3, pc}
    12fa:	bf00      	nop
    12fc:	00002e4e 	andeq	r2, r0, lr, asr #28
    1300:	20000050 	andcs	r0, r0, r0, asr r0
    1304:	20000054 	andcs	r0, r0, r4, asr r0

00001308 <kill>:
void kill (aword pid) {
    1308:	b510      	push	{r4, lr}
	if (pid == 0)
    130a:	b908      	cbnz	r0, 1310 <kill+0x8>
		pid = (aword) __pi_curr;
    130c:	4b0f      	ldr	r3, [pc, #60]	; (134c <kill+0x44>)
    130e:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1310:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1312:	4b0f      	ldr	r3, [pc, #60]	; (1350 <kill+0x48>)
    1314:	681c      	ldr	r4, [r3, #0]
    1316:	b91c      	cbnz	r4, 1320 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1318:	2003      	movs	r0, #3
    131a:	490e      	ldr	r1, [pc, #56]	; (1354 <kill+0x4c>)
    131c:	f7ff f8d8 	bl	4d0 <__pi_syserror>
		if ((aword)i == pid) {
    1320:	4284      	cmp	r4, r0
    1322:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1324:	d10e      	bne.n	1344 <kill+0x3c>
			if (j == NULL)
    1326:	b95a      	cbnz	r2, 1340 <kill+0x38>
				__PCB = i->Next;
    1328:	6019      	str	r1, [r3, #0]
			killev (i);
    132a:	4620      	mov	r0, r4
    132c:	f7ff fdd8 	bl	ee0 <killev>
			ufree (i);
    1330:	f7ff ffc6 	bl	12c0 <__pi_free>
			if (i == __pi_curr)
    1334:	4b05      	ldr	r3, [pc, #20]	; (134c <kill+0x44>)
    1336:	681b      	ldr	r3, [r3, #0]
    1338:	42a3      	cmp	r3, r4
    133a:	d106      	bne.n	134a <kill+0x42>
				release;
    133c:	f7ff fc74 	bl	c28 <__pi_release>
				j->Next = i->Next;
    1340:	62d1      	str	r1, [r2, #44]	; 0x2c
    1342:	e7f2      	b.n	132a <kill+0x22>
    1344:	4622      	mov	r2, r4
    1346:	460c      	mov	r4, r1
    1348:	e7e5      	b.n	1316 <kill+0xe>
}
    134a:	bd10      	pop	{r4, pc}
    134c:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1350:	20000048 	andcs	r0, r0, r8, asr #32
    1354:	00002e53 	andeq	r2, r0, r3, asr lr

00001358 <killall>:
void killall (fsmcode fun) {
    1358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	j = NULL;
    135c:	2400      	movs	r4, #0
	rel = NO;
    135e:	4626      	mov	r6, r4
	for (i = __PCB; i != NULL; ) {
    1360:	4d11      	ldr	r5, [pc, #68]	; (13a8 <killall+0x50>)
void killall (fsmcode fun) {
    1362:	4607      	mov	r7, r0
			if (i == __pi_curr)
    1364:	f8df 9044 	ldr.w	r9, [pc, #68]	; 13ac <killall+0x54>
	for (i = __PCB; i != NULL; ) {
    1368:	6828      	ldr	r0, [r5, #0]
    136a:	b910      	cbnz	r0, 1372 <killall+0x1a>
	if (rel)
    136c:	b1ce      	cbz	r6, 13a2 <killall+0x4a>
		release;
    136e:	f7ff fc5b 	bl	c28 <__pi_release>
		if (i->code == fun) {
    1372:	6843      	ldr	r3, [r0, #4]
    1374:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    1378:	42bb      	cmp	r3, r7
    137a:	d10c      	bne.n	1396 <killall+0x3e>
			if (j == NULL)
    137c:	b974      	cbnz	r4, 139c <killall+0x44>
				__PCB = k;
    137e:	f8c5 8000 	str.w	r8, [r5]
			if (i == __pi_curr)
    1382:	f8d9 3000 	ldr.w	r3, [r9]
				rel = YES;
    1386:	4283      	cmp	r3, r0
    1388:	bf08      	it	eq
    138a:	2601      	moveq	r6, #1
			killev (i);
    138c:	f7ff fda8 	bl	ee0 <killev>
			ufree (i);
    1390:	f7ff ff96 	bl	12c0 <__pi_free>
			i = k;
    1394:	4620      	mov	r0, r4
    1396:	4604      	mov	r4, r0
    1398:	4640      	mov	r0, r8
    139a:	e7e6      	b.n	136a <killall+0x12>
				j->Next = k;
    139c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    13a0:	e7ef      	b.n	1382 <killall+0x2a>
}
    13a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    13a6:	bf00      	nop
    13a8:	20000048 	andcs	r0, r0, r8, asr #32
    13ac:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

000013b0 <__pi_malloc>:
	if (size < 8)
    13b0:	2807      	cmp	r0, #7
		_size = 2;
    13b2:	bf98      	it	ls
    13b4:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    13b6:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	4b21      	ldr	r3, [pc, #132]	; (1440 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    13ba:	bf88      	it	hi
    13bc:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13be:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c0:	4920      	ldr	r1, [pc, #128]	; (1444 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    13c2:	bf88      	it	hi
    13c4:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13c6:	b94c      	cbnz	r4, 13dc <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    13c8:	4a1f      	ldr	r2, [pc, #124]	; (1448 <__pi_malloc+0x98>)
    13ca:	7853      	ldrb	r3, [r2, #1]
    13cc:	2bff      	cmp	r3, #255	; 0xff
    13ce:	d001      	beq.n	13d4 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    13d0:	3301      	adds	r3, #1
    13d2:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    13d4:	2200      	movs	r2, #0
    13d6:	4b1d      	ldr	r3, [pc, #116]	; (144c <__pi_malloc+0x9c>)
    13d8:	601a      	str	r2, [r3, #0]
	return chunk;
    13da:	e02f      	b.n	143c <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    13dc:	6862      	ldr	r2, [r4, #4]
    13de:	428a      	cmp	r2, r1
    13e0:	d003      	beq.n	13ea <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    13e2:	2006      	movs	r0, #6
    13e4:	491a      	ldr	r1, [pc, #104]	; (1450 <__pi_malloc+0xa0>)
    13e6:	f7ff f873 	bl	4d0 <__pi_syserror>
		if (m_size (chunk) >= _size)
    13ea:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    13ee:	4285      	cmp	r5, r0
    13f0:	d202      	bcs.n	13f8 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    13f2:	4623      	mov	r3, r4
    13f4:	4614      	mov	r4, r2
    13f6:	e7e6      	b.n	13c6 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    13f8:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    13fe:	1a1b      	subs	r3, r3, r0
    1400:	2b08      	cmp	r3, #8
    1402:	d909      	bls.n	1418 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1404:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1408:	3001      	adds	r0, #1
    140a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    140e:	3b01      	subs	r3, #1
    1410:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1414:	f7ff fd82 	bl	f1c <qfree>
		mevent [MA_NP] . nfail = 0;
    1418:	2200      	movs	r2, #0
    141a:	4b0b      	ldr	r3, [pc, #44]	; (1448 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    141c:	490d      	ldr	r1, [pc, #52]	; (1454 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    141e:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1420:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1424:	680b      	ldr	r3, [r1, #0]
    1426:	1a9b      	subs	r3, r3, r2
    1428:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    142a:	4908      	ldr	r1, [pc, #32]	; (144c <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    142c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1432:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1436:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1438:	bf38      	it	cc
    143a:	600b      	strcc	r3, [r1, #0]
}
    143c:	4620      	mov	r0, r4
    143e:	bd38      	pop	{r3, r4, r5, pc}
    1440:	2000005c 	andcs	r0, r0, ip, asr r0
    1444:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1448:	20000054 	andcs	r0, r0, r4, asr r0
    144c:	20000058 	andcs	r0, r0, r8, asr r0
    1450:	00002e57 	andeq	r2, r0, r7, asr lr
    1454:	20000050 	andcs	r0, r0, r0, asr r0

00001458 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1458:	b538      	push	{r3, r4, r5, lr}
    145a:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    145c:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    145e:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1460:	f7ff ffa6 	bl	13b0 <__pi_malloc>
    1464:	2300      	movs	r3, #0
    1466:	b138      	cbz	r0, 1478 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1468:	4a07      	ldr	r2, [pc, #28]	; (1488 <__pi_fork+0x30>)
	i->Status = 0;
    146a:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    146c:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    146e:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1470:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1474:	b90b      	cbnz	r3, 147a <__pi_fork+0x22>
			__PCB = i;
    1476:	6010      	str	r0, [r2, #0]
}
    1478:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    147a:	461a      	mov	r2, r3
    147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    147e:	2b00      	cmp	r3, #0
    1480:	d1fb      	bne.n	147a <__pi_fork+0x22>
			j->Next = i;
    1482:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1484:	e7f8      	b.n	1478 <__pi_fork+0x20>
    1486:	bf00      	nop
    1488:	20000048 	andcs	r0, r0, r8, asr #32

0000148c <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    148c:	4a04      	ldr	r2, [pc, #16]	; (14a0 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    148e:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1490:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1492:	4803      	ldr	r0, [pc, #12]	; (14a0 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1494:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1496:	bf1c      	itt	ne
    1498:	3301      	addne	r3, #1
    149a:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    149c:	f7ff be02 	b.w	10a4 <__pi_wait>
    14a0:	20000054 	andcs	r0, r0, r4, asr r0

000014a4 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    14a4:	b40f      	push	{r0, r1, r2, r3}
    14a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    14aa:	ab0a      	add	r3, sp, #40	; 0x28
    14ac:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    14b0:	2015      	movs	r0, #21
	va_start (ap, mess);
    14b2:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    14b4:	4b46      	ldr	r3, [pc, #280]	; (15d0 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    14b6:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    14b8:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    14ba:	f8df 811c 	ldr.w	r8, [pc, #284]	; 15d8 <diag+0x134>
	diag_disable_int (a, is);
    14be:	695b      	ldr	r3, [r3, #20]
    14c0:	4798      	blx	r3
	while (*mess != '\0') {
    14c2:	7820      	ldrb	r0, [r4, #0]
    14c4:	b998      	cbnz	r0, 14ee <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    14c6:	200d      	movs	r0, #13
    14c8:	f7ff fd68 	bl	f9c <dgout>
	dgout ('\n');
    14cc:	200a      	movs	r0, #10
    14ce:	f7ff fd65 	bl	f9c <dgout>
    14d2:	4a40      	ldr	r2, [pc, #256]	; (15d4 <diag+0x130>)
    14d4:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    14d6:	071b      	lsls	r3, r3, #28
    14d8:	d4fc      	bmi.n	14d4 <diag+0x30>
	diag_enable_int (a, is);
    14da:	4b3d      	ldr	r3, [pc, #244]	; (15d0 <diag+0x12c>)
    14dc:	2015      	movs	r0, #21
    14de:	681b      	ldr	r3, [r3, #0]
    14e0:	691b      	ldr	r3, [r3, #16]
    14e2:	4798      	blx	r3
}
    14e4:	b003      	add	sp, #12
    14e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14ea:	b004      	add	sp, #16
    14ec:	4770      	bx	lr
		if (*mess == '%') {
    14ee:	2825      	cmp	r0, #37	; 0x25
    14f0:	f104 0601 	add.w	r6, r4, #1
    14f4:	d169      	bne.n	15ca <diag+0x126>
			if (*mess == 'l') {
    14f6:	9b01      	ldr	r3, [sp, #4]
    14f8:	7862      	ldrb	r2, [r4, #1]
    14fa:	f853 1b04 	ldr.w	r1, [r3], #4
    14fe:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1500:	bf08      	it	eq
    1502:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1504:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1506:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1508:	bf0c      	ite	eq
    150a:	2520      	moveq	r5, #32
				bc = 16;
    150c:	2510      	movne	r5, #16
			switch (*mess) {
    150e:	2b75      	cmp	r3, #117	; 0x75
    1510:	d04e      	beq.n	15b0 <diag+0x10c>
    1512:	d80a      	bhi.n	152a <diag+0x86>
    1514:	2b64      	cmp	r3, #100	; 0x64
    1516:	d01c      	beq.n	1552 <diag+0xae>
    1518:	2b73      	cmp	r3, #115	; 0x73
    151a:	d052      	beq.n	15c2 <diag+0x11e>
				dgout ('%');
    151c:	2025      	movs	r0, #37	; 0x25
    151e:	f7ff fd3d 	bl	f9c <dgout>
				dgout (*mess);
    1522:	7830      	ldrb	r0, [r6, #0]
    1524:	f7ff fd3a 	bl	f9c <dgout>
    1528:	e010      	b.n	154c <diag+0xa8>
			switch (*mess) {
    152a:	2b78      	cmp	r3, #120	; 0x78
    152c:	d1f6      	bne.n	151c <diag+0x78>
    152e:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1530:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 15dc <diag+0x138>
					i += 4;
    1534:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1536:	1b2b      	subs	r3, r5, r4
    1538:	fa21 f303 	lsr.w	r3, r1, r3
    153c:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1540:	f819 0003 	ldrb.w	r0, [r9, r3]
    1544:	f7ff fd2a 	bl	f9c <dgout>
				while (i < bc) {
    1548:	42a5      	cmp	r5, r4
    154a:	dcf3      	bgt.n	1534 <diag+0x90>
			mess++;
    154c:	3601      	adds	r6, #1
					d /= 10;
    154e:	4634      	mov	r4, r6
    1550:	e7b7      	b.n	14c2 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1552:	1e6b      	subs	r3, r5, #1
    1554:	fa21 f303 	lsr.w	r3, r1, r3
    1558:	07da      	lsls	r2, r3, #31
    155a:	d509      	bpl.n	1570 <diag+0xcc>
					dgout ('-');
    155c:	202d      	movs	r0, #45	; 0x2d
    155e:	f7ff fd1d 	bl	f9c <dgout>
					if (bc == 16)
    1562:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1564:	bf04      	itt	eq
    1566:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    156a:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    156e:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1570:	f242 7410 	movw	r4, #10000	; 0x2710
    1574:	2d10      	cmp	r5, #16
    1576:	bf18      	it	ne
    1578:	4644      	movne	r4, r8
					v = (word) (val / d);
    157a:	fbb1 f5f4 	udiv	r5, r1, r4
    157e:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1580:	b935      	cbnz	r5, 1590 <diag+0xec>
    1582:	2c01      	cmp	r4, #1
    1584:	d004      	beq.n	1590 <diag+0xec>
					d /= 10;
    1586:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    158a:	e7f6      	b.n	157a <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    158c:	4c12      	ldr	r4, [pc, #72]	; (15d8 <diag+0x134>)
    158e:	e7f4      	b.n	157a <diag+0xd6>
					dgout (v + '0');
    1590:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1594:	b280      	uxth	r0, r0
    1596:	f7ff fd01 	bl	f9c <dgout>
					if (d == 0) break;
    159a:	2c09      	cmp	r4, #9
					d /= 10;
    159c:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    15a0:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    15a4:	d9d2      	bls.n	154c <diag+0xa8>
					v = (word) (val / d);
    15a6:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    15aa:	461c      	mov	r4, r3
					v = (word) (val / d);
    15ac:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    15ae:	e7ef      	b.n	1590 <diag+0xec>
				if (bc == 16)
    15b0:	2d10      	cmp	r5, #16
    15b2:	d1eb      	bne.n	158c <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    15b4:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    15b8:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    15ba:	e7de      	b.n	157a <diag+0xd6>
					dgout (*s);
    15bc:	f7ff fcee 	bl	f9c <dgout>
					s++;
    15c0:	3101      	adds	r1, #1
				while (*s != '\0') {
    15c2:	7808      	ldrb	r0, [r1, #0]
    15c4:	2800      	cmp	r0, #0
    15c6:	d1f9      	bne.n	15bc <diag+0x118>
    15c8:	e7c0      	b.n	154c <diag+0xa8>
			dgout (*mess++);
    15ca:	f7ff fce7 	bl	f9c <dgout>
    15ce:	e7be      	b.n	154e <diag+0xaa>
    15d0:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    15d4:	40001018 	andmi	r1, r0, r8, lsl r0
    15d8:	3b9aca00 	blcc	fe6b3de0 <_estack+0xde6aede0>
    15dc:	00002e5c 	andeq	r2, r0, ip, asr lr

000015e0 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    15e0:	4770      	bx	lr

000015e2 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    15e2:	e7fe      	b.n	15e2 <NmiSR>

000015e4 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    15e4:	e7fe      	b.n	15e4 <FaultISR>

000015e6 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    15e6:	e7fe      	b.n	15e6 <AONIntHandler>

000015e8 <ResetISR>:
{
    15e8:	b508      	push	{r3, lr}
    SetupTrimDevice();
    15ea:	f000 fddb 	bl	21a4 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15ee:	4b0c      	ldr	r3, [pc, #48]	; (1620 <zero_loop+0x20>)
    pui32Src = &_etext;
    15f0:	4a0c      	ldr	r2, [pc, #48]	; (1624 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f2:	490d      	ldr	r1, [pc, #52]	; (1628 <zero_loop+0x28>)
    15f4:	428b      	cmp	r3, r1
    15f6:	d30d      	bcc.n	1614 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    15f8:	480c      	ldr	r0, [pc, #48]	; (162c <zero_loop+0x2c>)
    15fa:	490d      	ldr	r1, [pc, #52]	; (1630 <zero_loop+0x30>)
    15fc:	f04f 0200 	mov.w	r2, #0

00001600 <zero_loop>:
    1600:	4288      	cmp	r0, r1
    1602:	bfb8      	it	lt
    1604:	f840 2b04 	strlt.w	r2, [r0], #4
    1608:	dbfa      	blt.n	1600 <zero_loop>
   main();
    160a:	f7ff fc39 	bl	e80 <main>
    FaultISR();
    160e:	f7ff ffe9 	bl	15e4 <FaultISR>
}
    1612:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1614:	f852 0b04 	ldr.w	r0, [r2], #4
    1618:	f843 0b04 	str.w	r0, [r3], #4
    161c:	e7ea      	b.n	15f4 <ResetISR+0xc>
    161e:	bf00      	nop
    1620:	20000000 	andcs	r0, r0, r0
    1624:	00002e74 	andeq	r2, r0, r4, ror lr
    1628:	20000009 	andcs	r0, r0, r9
    162c:	2000000c 	andcs	r0, r0, ip
    1630:	200000b4 	strhcs	r0, [r0], -r4

00001634 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1634:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1636:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1638:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    163c:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    163e:	4907      	ldr	r1, [pc, #28]	; (165c <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1640:	4d07      	ldr	r5, [pc, #28]	; (1660 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1642:	4c08      	ldr	r4, [pc, #32]	; (1664 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1644:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1646:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1648:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    164a:	b2c0      	uxtb	r0, r0
			b |= 1;
    164c:	bf48      	it	mi
    164e:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1652:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1654:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1656:	600a      	str	r2, [r1, #0]
    1658:	d1f4      	bne.n	1644 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    165a:	bd70      	pop	{r4, r5, r6, pc}
    165c:	400220a0 	andmi	r2, r2, r0, lsr #1
    1660:	400220c0 	andmi	r2, r2, r0, asr #1
    1664:	40022090 	mulmi	r2, r0, r0

00001668 <put_byte>:

static void put_byte (byte b) {
    1668:	b530      	push	{r4, r5, lr}
    166a:	2308      	movs	r3, #8
    166c:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1670:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1674:	4c06      	ldr	r4, [pc, #24]	; (1690 <put_byte+0x28>)
    1676:	4a07      	ldr	r2, [pc, #28]	; (1694 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1678:	f010 0f80 	tst.w	r0, #128	; 0x80
    167c:	bf14      	ite	ne
    167e:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1680:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1682:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1684:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1686:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1688:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    168a:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    168c:	d1f4      	bne.n	1678 <put_byte+0x10>
	}
}
    168e:	bd30      	pop	{r4, r5, pc}
    1690:	40022090 	mulmi	r2, r0, r0
    1694:	400220a0 	andmi	r2, r2, r0, lsr #1

00001698 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1698:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    169a:	b510      	push	{r4, lr}
    169c:	4c03      	ldr	r4, [pc, #12]	; (16ac <cmd_0+0x14>)
    169e:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    16a0:	f7ff ffe2 	bl	1668 <put_byte>
    16a4:	2300      	movs	r3, #0
    16a6:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    16a8:	bd10      	pop	{r4, pc}
    16aa:	bf00      	nop
    16ac:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000016b0 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    16b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16b4:	4604      	mov	r4, r0
    16b6:	460d      	mov	r5, r1
    16b8:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    16ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1700 <wwait+0x50>
    16be:	4e0f      	ldr	r6, [pc, #60]	; (16fc <wwait+0x4c>)
    16c0:	f898 3000 	ldrb.w	r3, [r8]
    16c4:	b14b      	cbz	r3, 16da <wwait+0x2a>
	put_byte (CMD_RDSR);
    16c6:	2005      	movs	r0, #5
    16c8:	6037      	str	r7, [r6, #0]
    16ca:	f7ff ffcd 	bl	1668 <put_byte>
	r = get_byte ();
    16ce:	f7ff ffb1 	bl	1634 <get_byte>
    16d2:	2300      	movs	r3, #0
    16d4:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    16d6:	07c3      	lsls	r3, r0, #31
    16d8:	d401      	bmi.n	16de <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    16da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    16de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16e2:	429c      	cmp	r4, r3
    16e4:	d103      	bne.n	16ee <wwait+0x3e>
			mdelay (1);
    16e6:	2001      	movs	r0, #1
    16e8:	f7fe febe 	bl	468 <mdelay>
    16ec:	e7e8      	b.n	16c0 <wwait+0x10>
			delay (del, st);
    16ee:	4621      	mov	r1, r4
    16f0:	4628      	mov	r0, r5
    16f2:	f7ff fd1d 	bl	1130 <delay>
			release;
    16f6:	f7ff fa97 	bl	c28 <__pi_release>
    16fa:	bf00      	nop
    16fc:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1700:	20000060 	andcs	r0, r0, r0, rrx

00001704 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1706:	4d0c      	ldr	r5, [pc, #48]	; (1738 <ready+0x34>)
    1708:	782f      	ldrb	r7, [r5, #0]
    170a:	b147      	cbz	r7, 171e <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    170c:	2101      	movs	r1, #1
    170e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1712:	f7ff ffcd 	bl	16b0 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1716:	2200      	movs	r2, #0
    1718:	4b08      	ldr	r3, [pc, #32]	; (173c <ready+0x38>)
    171a:	701a      	strb	r2, [r3, #0]
}
    171c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    171e:	2401      	movs	r4, #1
    1720:	4e07      	ldr	r6, [pc, #28]	; (1740 <ready+0x3c>)
	udelay (1);
    1722:	4620      	mov	r0, r4
    1724:	6034      	str	r4, [r6, #0]
    1726:	f7fe fe89 	bl	43c <udelay>
	udelay (1);
    172a:	4620      	mov	r0, r4
    172c:	6037      	str	r7, [r6, #0]
    172e:	f7fe fe85 	bl	43c <udelay>
		dopen = DOPEN_TEMP;
    1732:	2302      	movs	r3, #2
    1734:	702b      	strb	r3, [r5, #0]
    1736:	e7ee      	b.n	1716 <ready+0x12>
    1738:	20000060 	andcs	r0, r0, r0, rrx
    173c:	20000061 	andcs	r0, r0, r1, rrx
    1740:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001744 <cclose>:
static void cclose () {
    1744:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1746:	4c07      	ldr	r4, [pc, #28]	; (1764 <cclose+0x20>)
    1748:	7823      	ldrb	r3, [r4, #0]
    174a:	2b02      	cmp	r3, #2
    174c:	d109      	bne.n	1762 <cclose+0x1e>
		wwait (WNONE, 1);
    174e:	2101      	movs	r1, #1
    1750:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1754:	f7ff ffac 	bl	16b0 <wwait>
	cmd_0 (CMD_DP);
    1758:	20b9      	movs	r0, #185	; 0xb9
    175a:	f7ff ff9d 	bl	1698 <cmd_0>
		dopen = 0;
    175e:	2300      	movs	r3, #0
    1760:	7023      	strb	r3, [r4, #0]
}
    1762:	bd10      	pop	{r4, pc}
    1764:	20000060 	andcs	r0, r0, r0, rrx

00001768 <ee_open>:

// ============================================================================

word ee_open () {
    1768:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    176a:	f7ff ffcb 	bl	1704 <ready>
	dopen = DOPEN_PERM;
    176e:	2201      	movs	r2, #1
    1770:	4b01      	ldr	r3, [pc, #4]	; (1778 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1772:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1774:	701a      	strb	r2, [r3, #0]
}
    1776:	bd08      	pop	{r3, pc}
    1778:	20000060 	andcs	r0, r0, r0, rrx

0000177c <ee_close>:

void ee_close () {

	if (dopen) {
    177c:	4b03      	ldr	r3, [pc, #12]	; (178c <ee_close+0x10>)
    177e:	781a      	ldrb	r2, [r3, #0]
    1780:	b11a      	cbz	r2, 178a <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1782:	2202      	movs	r2, #2
    1784:	701a      	strb	r2, [r3, #0]
		cclose ();
    1786:	f7ff bfdd 	b.w	1744 <cclose>
	}
}
    178a:	4770      	bx	lr
    178c:	20000060 	andcs	r0, r0, r0, rrx

00001790 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1792:	4604      	mov	r4, r0
    1794:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    1796:	4615      	mov	r5, r2
    1798:	b37a      	cbz	r2, 17fa <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    179a:	4e19      	ldr	r6, [pc, #100]	; (1800 <ser_in+0x70>)
    179c:	6830      	ldr	r0, [r6, #0]
    179e:	b988      	cbnz	r0, 17c4 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    17a0:	4818      	ldr	r0, [pc, #96]	; (1804 <ser_in+0x74>)
    17a2:	f7ff fce1 	bl	1168 <running>
    17a6:	b948      	cbnz	r0, 17bc <ser_in+0x2c>
			prcs = runthread (__inserial);
    17a8:	4601      	mov	r1, r0
    17aa:	4816      	ldr	r0, [pc, #88]	; (1804 <ser_in+0x74>)
    17ac:	f7ff fe54 	bl	1458 <__pi_fork>
			if (prcs == 0) {
    17b0:	b920      	cbnz	r0, 17bc <ser_in+0x2c>
				npwait (st);
    17b2:	4620      	mov	r0, r4
    17b4:	f7ff fe6a 	bl	148c <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    17b8:	f7ff fa36 	bl	c28 <__pi_release>
		join (prcs, st);
    17bc:	4621      	mov	r1, r4
    17be:	f7ff fca5 	bl	110c <__pi_join>
    17c2:	e7f9      	b.n	17b8 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    17c4:	7803      	ldrb	r3, [r0, #0]
    17c6:	b9a3      	cbnz	r3, 17f2 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17c8:	7844      	ldrb	r4, [r0, #1]
    17ca:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    17cc:	42ac      	cmp	r4, r5
		prcs = len-1;
    17ce:	bfa8      	it	ge
    17d0:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    17d4:	4622      	mov	r2, r4
    17d6:	4638      	mov	r0, r7
    17d8:	6831      	ldr	r1, [r6, #0]
    17da:	f7ff fcde 	bl	119a <__pi_memcpy>
	ufree (__inpline);
    17de:	6830      	ldr	r0, [r6, #0]
    17e0:	f7ff fd6e 	bl	12c0 <__pi_free>
	__inpline = NULL;
    17e4:	2300      	movs	r3, #0
    17e6:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    17e8:	783a      	ldrb	r2, [r7, #0]
    17ea:	b102      	cbz	r2, 17ee <ser_in+0x5e>
		buf [prcs] = '\0';
    17ec:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    17ee:	4620      	mov	r0, r4
    17f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    17f2:	f7ff fccb 	bl	118c <__pi_strlen>
    17f6:	4604      	mov	r4, r0
    17f8:	e7e8      	b.n	17cc <ser_in+0x3c>
		return 0;
    17fa:	4614      	mov	r4, r2
    17fc:	e7f7      	b.n	17ee <ser_in+0x5e>
    17fe:	bf00      	nop
    1800:	2000006c 	andcs	r0, r0, ip, rrx
    1804:	0000192d 	andeq	r1, r0, sp, lsr #18

00001808 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1808:	b40e      	push	{r1, r2, r3}
    180a:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    180c:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    180e:	4812      	ldr	r0, [pc, #72]	; (1858 <ser_outf+0x50>)
    1810:	f7ff fcaa 	bl	1168 <running>
    1814:	4606      	mov	r6, r0
    1816:	b120      	cbz	r0, 1822 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1818:	4621      	mov	r1, r4
    181a:	f7ff fc77 	bl	110c <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    181e:	f7ff fa03 	bl	c28 <__pi_release>
	va_start (ap, m);
    1822:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1824:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1826:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1828:	f000 fa36 	bl	1c98 <vform>
    182c:	4605      	mov	r5, r0
    182e:	b918      	cbnz	r0, 1838 <ser_outf+0x30>
		umwait (st);
    1830:	4620      	mov	r0, r4
    1832:	f7ff fe2b 	bl	148c <__pi_waitmem>
    1836:	e7f2      	b.n	181e <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1838:	4601      	mov	r1, r0
    183a:	4807      	ldr	r0, [pc, #28]	; (1858 <ser_outf+0x50>)
    183c:	f7ff fe0c 	bl	1458 <__pi_fork>
    1840:	b918      	cbnz	r0, 184a <ser_outf+0x42>
		ufree (buf);
    1842:	4628      	mov	r0, r5
    1844:	f7ff fd3c 	bl	12c0 <__pi_free>
		npwait (st);
    1848:	e7f2      	b.n	1830 <ser_outf+0x28>
		release;
	}

	return 0;
}
    184a:	4630      	mov	r0, r6
    184c:	b003      	add	sp, #12
    184e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1852:	b003      	add	sp, #12
    1854:	4770      	bx	lr
    1856:	bf00      	nop
    1858:	000018bd 			; <UNDEFINED> instruction: 0x000018bd

0000185c <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    185c:	b40e      	push	{r1, r2, r3}
    185e:	b533      	push	{r0, r1, r4, r5, lr}
    1860:	9905      	ldr	r1, [sp, #20]
    1862:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1864:	b321      	cbz	r1, 18b0 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1866:	4d13      	ldr	r5, [pc, #76]	; (18b4 <ser_inf+0x58>)
    1868:	6828      	ldr	r0, [r5, #0]
    186a:	b988      	cbnz	r0, 1890 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    186c:	4812      	ldr	r0, [pc, #72]	; (18b8 <ser_inf+0x5c>)
    186e:	f7ff fc7b 	bl	1168 <running>
    1872:	b948      	cbnz	r0, 1888 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1874:	4601      	mov	r1, r0
    1876:	4810      	ldr	r0, [pc, #64]	; (18b8 <ser_inf+0x5c>)
    1878:	f7ff fdee 	bl	1458 <__pi_fork>
			if (prcs == 0) {
    187c:	b920      	cbnz	r0, 1888 <ser_inf+0x2c>
				npwait (st);
    187e:	4620      	mov	r0, r4
    1880:	f7ff fe04 	bl	148c <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1884:	f7ff f9d0 	bl	c28 <__pi_release>
		join (prcs, st);
    1888:	4621      	mov	r1, r4
    188a:	f7ff fc3f 	bl	110c <__pi_join>
    188e:	e7f9      	b.n	1884 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1890:	aa06      	add	r2, sp, #24
    1892:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1894:	f000 fa28 	bl	1ce8 <vscan>
    1898:	4604      	mov	r4, r0

	ufree (__inpline);
    189a:	6828      	ldr	r0, [r5, #0]
    189c:	f7ff fd10 	bl	12c0 <__pi_free>
	__inpline = NULL;
    18a0:	2300      	movs	r3, #0
    18a2:	602b      	str	r3, [r5, #0]

	return prcs;
}
    18a4:	4620      	mov	r0, r4
    18a6:	b002      	add	sp, #8
    18a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    18ac:	b003      	add	sp, #12
    18ae:	4770      	bx	lr
		return 0;
    18b0:	460c      	mov	r4, r1
    18b2:	e7f7      	b.n	18a4 <ser_inf+0x48>
    18b4:	2000006c 	andcs	r0, r0, ip, rrx
    18b8:	0000192d 	andeq	r1, r0, sp, lsr #18

000018bc <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    18bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18be:	4b18      	ldr	r3, [pc, #96]	; (1920 <__outserial+0x64>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	689d      	ldr	r5, [r3, #8]
    18c4:	b130      	cbz	r0, 18d4 <__outserial+0x18>
    18c6:	280a      	cmp	r0, #10
    18c8:	d00d      	beq.n	18e6 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    18ca:	b003      	add	sp, #12
    18cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    18d0:	f7ff bb70 	b.w	fb4 <__pi_badstate>
	ptr = data;
    18d4:	4b13      	ldr	r3, [pc, #76]	; (1924 <__outserial+0x68>)
    18d6:	4c14      	ldr	r4, [pc, #80]	; (1928 <__outserial+0x6c>)
    18d8:	601d      	str	r5, [r3, #0]
	if (*ptr)
    18da:	782b      	ldrb	r3, [r5, #0]
    18dc:	b1e3      	cbz	r3, 1918 <__outserial+0x5c>
		len = strlen (ptr);
    18de:	4628      	mov	r0, r5
    18e0:	f7ff fc54 	bl	118c <__pi_strlen>
    18e4:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18e6:	4e0f      	ldr	r6, [pc, #60]	; (1924 <__outserial+0x68>)
    18e8:	4f0f      	ldr	r7, [pc, #60]	; (1928 <__outserial+0x6c>)
    18ea:	883b      	ldrh	r3, [r7, #0]
    18ec:	2201      	movs	r2, #1
    18ee:	9300      	str	r3, [sp, #0]
    18f0:	2100      	movs	r1, #0
    18f2:	6833      	ldr	r3, [r6, #0]
    18f4:	200a      	movs	r0, #10
    18f6:	f7ff fc6d 	bl	11d4 <io>
	ptr += quant;
    18fa:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    18fc:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    18fe:	4403      	add	r3, r0
	len -= quant;
    1900:	1a24      	subs	r4, r4, r0
	ptr += quant;
    1902:	6033      	str	r3, [r6, #0]
	len -= quant;
    1904:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    1906:	2c00      	cmp	r4, #0
    1908:	d1ef      	bne.n	18ea <__outserial+0x2e>
		ufree (data);
    190a:	4628      	mov	r0, r5
    190c:	f7ff fcd8 	bl	12c0 <__pi_free>
		finish;
    1910:	4620      	mov	r0, r4
    1912:	f7ff fcf9 	bl	1308 <kill>
    1916:	e7e8      	b.n	18ea <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1918:	786b      	ldrb	r3, [r5, #1]
    191a:	3303      	adds	r3, #3
    191c:	6023      	str	r3, [r4, #0]
    191e:	e7e2      	b.n	18e6 <__outserial+0x2a>
    1920:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1924:	20000068 	andcs	r0, r0, r8, rrx
    1928:	20000064 	andcs	r0, r0, r4, rrx

0000192c <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    192c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    192e:	4d42      	ldr	r5, [pc, #264]	; (1a38 <__inserial+0x10c>)
    1930:	682a      	ldr	r2, [r5, #0]
    1932:	6894      	ldr	r4, [r2, #8]
    1934:	2803      	cmp	r0, #3
    1936:	d87a      	bhi.n	1a2e <__inserial+0x102>
    1938:	e8df f000 	tbb	[pc, r0]
    193c:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    1940:	4b3e      	ldr	r3, [pc, #248]	; (1a3c <__inserial+0x110>)
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	b113      	cbz	r3, 194c <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    1946:	2000      	movs	r0, #0
    1948:	f7ff fcde 	bl	1308 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    194c:	2040      	movs	r0, #64	; 0x40
    194e:	f7ff fd2f 	bl	13b0 <__pi_malloc>
    1952:	4b3b      	ldr	r3, [pc, #236]	; (1a40 <__inserial+0x114>)
    1954:	4604      	mov	r4, r0
    1956:	6018      	str	r0, [r3, #0]
    1958:	b918      	cbnz	r0, 1962 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    195a:	f7ff fd97 	bl	148c <__pi_waitmem>
		release;
    195e:	f7ff f963 	bl	c28 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    1962:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    1964:	682b      	ldr	r3, [r5, #0]
    1966:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    1968:	4b36      	ldr	r3, [pc, #216]	; (1a44 <__inserial+0x118>)
    196a:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    196c:	2001      	movs	r0, #1
    196e:	2200      	movs	r2, #0
    1970:	4d33      	ldr	r5, [pc, #204]	; (1a40 <__inserial+0x114>)
    1972:	9000      	str	r0, [sp, #0]
    1974:	682b      	ldr	r3, [r5, #0]
    1976:	4611      	mov	r1, r2
    1978:	f7ff fc2c 	bl	11d4 <io>
	if (ptr == (char*) data) { // new line
    197c:	682b      	ldr	r3, [r5, #0]
    197e:	42a3      	cmp	r3, r4
    1980:	d10d      	bne.n	199e <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    1982:	7823      	ldrb	r3, [r4, #0]
    1984:	b923      	cbnz	r3, 1990 <__inserial+0x64>
			ptr++;
    1986:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    1988:	2002      	movs	r0, #2
			ptr++;
    198a:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    198c:	f7ff fb80 	bl	1090 <proceed>
		}

		if (*ptr < 0x20)
    1990:	682b      	ldr	r3, [r5, #0]
    1992:	781b      	ldrb	r3, [r3, #0]
    1994:	2b1f      	cmp	r3, #31
    1996:	d802      	bhi.n	199e <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    1998:	2001      	movs	r0, #1
    199a:	f7ff fb79 	bl	1090 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    199e:	682b      	ldr	r3, [r5, #0]
    19a0:	781a      	ldrb	r2, [r3, #0]
    19a2:	2a0a      	cmp	r2, #10
    19a4:	d001      	beq.n	19aa <__inserial+0x7e>
    19a6:	2a0d      	cmp	r2, #13
    19a8:	d105      	bne.n	19b6 <__inserial+0x8a>
		*ptr = '\0';
    19aa:	2000      	movs	r0, #0
    19ac:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    19ae:	4b23      	ldr	r3, [pc, #140]	; (1a3c <__inserial+0x110>)
    19b0:	601c      	str	r4, [r3, #0]
		finish;
    19b2:	f7ff fca9 	bl	1308 <kill>
	}

	if (len) {
    19b6:	4923      	ldr	r1, [pc, #140]	; (1a44 <__inserial+0x118>)
    19b8:	680b      	ldr	r3, [r1, #0]
    19ba:	b123      	cbz	r3, 19c6 <__inserial+0x9a>
		ptr++;
    19bc:	682a      	ldr	r2, [r5, #0]
		len--;
    19be:	3b01      	subs	r3, #1
		ptr++;
    19c0:	3201      	adds	r2, #1
    19c2:	602a      	str	r2, [r5, #0]
		len--;
    19c4:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    19c6:	2001      	movs	r0, #1
    19c8:	f7ff fb62 	bl	1090 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    19cc:	2301      	movs	r3, #1
    19ce:	2200      	movs	r2, #0
    19d0:	4d1b      	ldr	r5, [pc, #108]	; (1a40 <__inserial+0x114>)
    19d2:	9300      	str	r3, [sp, #0]
    19d4:	4611      	mov	r1, r2
    19d6:	682b      	ldr	r3, [r5, #0]
    19d8:	2002      	movs	r0, #2
    19da:	f7ff fbfb 	bl	11d4 <io>
	len -= 2;
    19de:	4819      	ldr	r0, [pc, #100]	; (1a44 <__inserial+0x118>)
    19e0:	6803      	ldr	r3, [r0, #0]
    19e2:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    19e4:	682b      	ldr	r3, [r5, #0]
    19e6:	f813 1b01 	ldrb.w	r1, [r3], #1
    19ea:	3101      	adds	r1, #1
		len = *ptr + 1;
    19ec:	4291      	cmp	r1, r2
    19ee:	bfd4      	ite	le
    19f0:	6001      	strle	r1, [r0, #0]
    19f2:	6002      	strgt	r2, [r0, #0]
	ptr++;
    19f4:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    19f6:	2200      	movs	r2, #0
    19f8:	4f12      	ldr	r7, [pc, #72]	; (1a44 <__inserial+0x118>)
    19fa:	4d11      	ldr	r5, [pc, #68]	; (1a40 <__inserial+0x114>)
    19fc:	883b      	ldrh	r3, [r7, #0]
    19fe:	4611      	mov	r1, r2
    1a00:	9300      	str	r3, [sp, #0]
    1a02:	682b      	ldr	r3, [r5, #0]
    1a04:	2003      	movs	r0, #3
    1a06:	f7ff fbe5 	bl	11d4 <io>
	len -= quant;
    1a0a:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a0c:	4606      	mov	r6, r0
	len -= quant;
    1a0e:	1a18      	subs	r0, r3, r0
    1a10:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1a12:	b918      	cbnz	r0, 1a1c <__inserial+0xf0>
		__inpline = (char*)data;
    1a14:	4b09      	ldr	r3, [pc, #36]	; (1a3c <__inserial+0x110>)
    1a16:	601c      	str	r4, [r3, #0]
		finish;
    1a18:	f7ff fc76 	bl	1308 <kill>
	}
	ptr += quant;
    1a1c:	6828      	ldr	r0, [r5, #0]
    1a1e:	4430      	add	r0, r6
    1a20:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    1a22:	2003      	movs	r0, #3

endstrand
    1a24:	b003      	add	sp, #12
    1a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    1a2a:	f7ff bb31 	b.w	1090 <proceed>
endstrand
    1a2e:	b003      	add	sp, #12
    1a30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1a34:	f7ff babe 	b.w	fb4 <__pi_badstate>
    1a38:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1a3c:	2000006c 	andcs	r0, r0, ip, rrx
    1a40:	20000074 	andcs	r0, r0, r4, ror r0
    1a44:	20000070 	andcs	r0, r0, r0, ror r0

00001a48 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    1a48:	f8dc 2000 	ldr.w	r2, [ip]
    1a4c:	b132      	cbz	r2, 1a5c <outc.5724+0x14>
    1a4e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1a52:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    1a56:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    1a58:	bf88      	it	hi
    1a5a:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    1a5c:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1a60:	3301      	adds	r3, #1
    1a62:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    1a66:	4770      	bx	lr

00001a68 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1a6c:	461c      	mov	r4, r3
    1a6e:	ab0c      	add	r3, sp, #48	; 0x30
    1a70:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    1a72:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1a74:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    1a76:	4f86      	ldr	r7, [pc, #536]	; (1c90 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a78:	9001      	str	r0, [sp, #4]
    1a7a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    1a7e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1a82:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    1a86:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    1a8a:	d118      	bne.n	1abe <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    1a8c:	f892 9001 	ldrb.w	r9, [r2, #1]
    1a90:	1c95      	adds	r5, r2, #2
				outc ('\\');
    1a92:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    1a96:	f1b9 0f00 	cmp.w	r9, #0
    1a9a:	d10b      	bne.n	1ab4 <__pi_vfparse+0x4c>
				outc ('\\');
    1a9c:	205c      	movs	r0, #92	; 0x5c
    1a9e:	f7ff ffd3 	bl	1a48 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    1aa2:	4648      	mov	r0, r9
    1aa4:	f10d 0c04 	add.w	ip, sp, #4
    1aa8:	f7ff ffce 	bl	1a48 <outc.5724>
			if (c == '\0')
    1aac:	f1b9 0f00 	cmp.w	r9, #0
    1ab0:	d103      	bne.n	1aba <__pi_vfparse+0x52>
    1ab2:	e027      	b.n	1b04 <__pi_vfparse+0x9c>
			outc (c);
    1ab4:	4648      	mov	r0, r9
				outc (val);
    1ab6:	f7ff ffc7 	bl	1a48 <outc.5724>
				val = (word) va_arg (ap, aword);
    1aba:	462a      	mov	r2, r5
    1abc:	e7e1      	b.n	1a82 <__pi_vfparse+0x1a>
		if (c == '%') {
    1abe:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1ac2:	f040 80e2 	bne.w	1c8a <__pi_vfparse+0x222>
			c = *fm++;
    1ac6:	f892 8001 	ldrb.w	r8, [r2, #1]
    1aca:	1c95      	adds	r5, r2, #2
			switch (c) {
    1acc:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    1ad0:	f000 80cd 	beq.w	1c6e <__pi_vfparse+0x206>
    1ad4:	d81b      	bhi.n	1b0e <__pi_vfparse+0xa6>
    1ad6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    1ada:	d033      	beq.n	1b44 <__pi_vfparse+0xdc>
    1adc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    1ae0:	d067      	beq.n	1bb2 <__pi_vfparse+0x14a>
    1ae2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    1ae6:	f000 80bc 	beq.w	1c62 <__pi_vfparse+0x1fa>
				outc ('%');
    1aea:	2025      	movs	r0, #37	; 0x25
    1aec:	f10d 0c04 	add.w	ip, sp, #4
    1af0:	f7ff ffaa 	bl	1a48 <outc.5724>
				outc (c);
    1af4:	4640      	mov	r0, r8
    1af6:	f10d 0c04 	add.w	ip, sp, #4
    1afa:	f7ff ffa5 	bl	1a48 <outc.5724>
				if (c == '\0')
    1afe:	f1b8 0f00 	cmp.w	r8, #0
    1b02:	d1da      	bne.n	1aba <__pi_vfparse+0x52>
Ret:
				return d;
    1b04:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1b08:	b004      	add	sp, #16
    1b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1b0e:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1b12:	d017      	beq.n	1b44 <__pi_vfparse+0xdc>
    1b14:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1b18:	d1e7      	bne.n	1aea <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    1b1a:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1b1e:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1b22:	fa1f f983 	uxth.w	r9, r3
    1b26:	fa49 f308 	asr.w	r3, r9, r8
    1b2a:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1b2e:	5cf8      	ldrb	r0, [r7, r3]
    1b30:	f10d 0c04 	add.w	ip, sp, #4
    1b34:	f7ff ff88 	bl	1a48 <outc.5724>
					if (i == 0)
    1b38:	f1b8 0f00 	cmp.w	r8, #0
    1b3c:	d0bd      	beq.n	1aba <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1b3e:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1b42:	e7f0      	b.n	1b26 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1b44:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1b48:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1b4c:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	d10a      	bne.n	1b68 <__pi_vfparse+0x100>
    1b52:	041b      	lsls	r3, r3, #16
    1b54:	d508      	bpl.n	1b68 <__pi_vfparse+0x100>
					outc ('-');
    1b56:	202d      	movs	r0, #45	; 0x2d
    1b58:	f10d 0c04 	add.w	ip, sp, #4
    1b5c:	f7ff ff74 	bl	1a48 <outc.5724>
					val = (~val) + 1;
    1b60:	f1c9 0900 	rsb	r9, r9, #0
    1b64:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    1b68:	2305      	movs	r3, #5
				enci (10000);
    1b6a:	f242 7810 	movw	r8, #10000	; 0x2710
    1b6e:	fbb9 f0f8 	udiv	r0, r9, r8
    1b72:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1b76:	d103      	bne.n	1b80 <__pi_vfparse+0x118>
    1b78:	3b01      	subs	r3, #1
    1b7a:	d117      	bne.n	1bac <__pi_vfparse+0x144>
    1b7c:	f04f 0801 	mov.w	r8, #1
    1b80:	fa1f fa80 	uxth.w	sl, r0
    1b84:	f10d 0c04 	add.w	ip, sp, #4
    1b88:	3030      	adds	r0, #48	; 0x30
    1b8a:	f7ff ff5d 	bl	1a48 <outc.5724>
    1b8e:	fbb8 f3f6 	udiv	r3, r8, r6
    1b92:	fb08 991a 	mls	r9, r8, sl, r9
    1b96:	f1b8 0f09 	cmp.w	r8, #9
    1b9a:	fa1f f989 	uxth.w	r9, r9
    1b9e:	b29b      	uxth	r3, r3
    1ba0:	d98b      	bls.n	1aba <__pi_vfparse+0x52>
    1ba2:	fbb9 f0f3 	udiv	r0, r9, r3
    1ba6:	4698      	mov	r8, r3
    1ba8:	b2c0      	uxtb	r0, r0
    1baa:	e7e9      	b.n	1b80 <__pi_vfparse+0x118>
    1bac:	fbb8 f8f6 	udiv	r8, r8, r6
    1bb0:	e7dd      	b.n	1b6e <__pi_vfparse+0x106>
				c = *fm;
    1bb2:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    1bb4:	2b64      	cmp	r3, #100	; 0x64
    1bb6:	d001      	beq.n	1bbc <__pi_vfparse+0x154>
    1bb8:	2b75      	cmp	r3, #117	; 0x75
    1bba:	d132      	bne.n	1c22 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    1bbc:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    1bbe:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    1bc2:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    1bc6:	d109      	bne.n	1bdc <__pi_vfparse+0x174>
    1bc8:	f1ba 0f00 	cmp.w	sl, #0
    1bcc:	da06      	bge.n	1bdc <__pi_vfparse+0x174>
						outc ('-');
    1bce:	202d      	movs	r0, #45	; 0x2d
    1bd0:	f10d 0c04 	add.w	ip, sp, #4
    1bd4:	f7ff ff38 	bl	1a48 <outc.5724>
						val = (~val) + 1;
    1bd8:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    1bdc:	230a      	movs	r3, #10
					enci (1000000000UL);
    1bde:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1c94 <__pi_vfparse+0x22c>
    1be2:	fbba f9f8 	udiv	r9, sl, r8
    1be6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1bea:	d103      	bne.n	1bf4 <__pi_vfparse+0x18c>
    1bec:	3b01      	subs	r3, #1
    1bee:	d115      	bne.n	1c1c <__pi_vfparse+0x1b4>
    1bf0:	f04f 0801 	mov.w	r8, #1
    1bf4:	f10d 0c04 	add.w	ip, sp, #4
    1bf8:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1bfc:	f7ff ff24 	bl	1a48 <outc.5724>
    1c00:	f1b8 0f09 	cmp.w	r8, #9
    1c04:	fbb8 f3f6 	udiv	r3, r8, r6
    1c08:	fb08 aa19 	mls	sl, r8, r9, sl
    1c0c:	f67f af55 	bls.w	1aba <__pi_vfparse+0x52>
    1c10:	fbba f9f3 	udiv	r9, sl, r3
    1c14:	4698      	mov	r8, r3
    1c16:	fa5f f989 	uxtb.w	r9, r9
    1c1a:	e7eb      	b.n	1bf4 <__pi_vfparse+0x18c>
    1c1c:	fbb8 f8f6 	udiv	r8, r8, r6
    1c20:	e7df      	b.n	1be2 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1c22:	2b78      	cmp	r3, #120	; 0x78
    1c24:	d114      	bne.n	1c50 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1c26:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1c2a:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1c2e:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1c30:	fa29 f308 	lsr.w	r3, r9, r8
    1c34:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1c38:	5cf8      	ldrb	r0, [r7, r3]
    1c3a:	f10d 0c04 	add.w	ip, sp, #4
    1c3e:	f7ff ff03 	bl	1a48 <outc.5724>
						if (i == 0)
    1c42:	f1b8 0f00 	cmp.w	r8, #0
    1c46:	f43f af38 	beq.w	1aba <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1c4a:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1c4e:	e7ef      	b.n	1c30 <__pi_vfparse+0x1c8>
					outc ('%');
    1c50:	4648      	mov	r0, r9
    1c52:	f10d 0c04 	add.w	ip, sp, #4
    1c56:	f7ff fef7 	bl	1a48 <outc.5724>
					outc ('l');
    1c5a:	4640      	mov	r0, r8
    1c5c:	f10d 0c04 	add.w	ip, sp, #4
    1c60:	e729      	b.n	1ab6 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1c62:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1c66:	f10d 0c04 	add.w	ip, sp, #4
    1c6a:	b280      	uxth	r0, r0
    1c6c:	e723      	b.n	1ab6 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1c6e:	f854 3b04 	ldr.w	r3, [r4], #4
    1c72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1c76:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1c7a:	2800      	cmp	r0, #0
    1c7c:	f43f af1d 	beq.w	1aba <__pi_vfparse+0x52>
					outc (*st);
    1c80:	f10d 0c04 	add.w	ip, sp, #4
    1c84:	f7ff fee0 	bl	1a48 <outc.5724>
					st++;
    1c88:	e7f5      	b.n	1c76 <__pi_vfparse+0x20e>
		c = *fm++;
    1c8a:	1c55      	adds	r5, r2, #1
    1c8c:	e709      	b.n	1aa2 <__pi_vfparse+0x3a>
    1c8e:	bf00      	nop
    1c90:	00002e5c 	andeq	r2, r0, ip, asr lr
    1c94:	3b9aca00 	blcc	fe6b449c <_estack+0xde6af49c>

00001c98 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c9c:	460e      	mov	r6, r1
    1c9e:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1ca0:	4604      	mov	r4, r0
    1ca2:	b140      	cbz	r0, 1cb6 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ca4:	4613      	mov	r3, r2
    1ca6:	460a      	mov	r2, r1
    1ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1cac:	f7ff fedc 	bl	1a68 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1cb0:	4620      	mov	r0, r4
    1cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1cb6:	4608      	mov	r0, r1
    1cb8:	f7ff fa68 	bl	118c <__pi_strlen>
    1cbc:	f100 0511 	add.w	r5, r0, #17
    1cc0:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1cc2:	4628      	mov	r0, r5
    1cc4:	f7ff fb74 	bl	13b0 <__pi_malloc>
    1cc8:	4604      	mov	r4, r0
    1cca:	2800      	cmp	r0, #0
    1ccc:	d0f0      	beq.n	1cb0 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cce:	463b      	mov	r3, r7
    1cd0:	4632      	mov	r2, r6
    1cd2:	4629      	mov	r1, r5
    1cd4:	f7ff fec8 	bl	1a68 <__pi_vfparse>
    1cd8:	4285      	cmp	r5, r0
    1cda:	4680      	mov	r8, r0
    1cdc:	d2e8      	bcs.n	1cb0 <vform+0x18>
		ufree (res);
    1cde:	4620      	mov	r0, r4
    1ce0:	f7ff faee 	bl	12c0 <__pi_free>
		goto Again;
    1ce4:	4645      	mov	r5, r8
    1ce6:	e7ec      	b.n	1cc2 <vform+0x2a>

00001ce8 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1ce8:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1cee:	2800      	cmp	r0, #0
    1cf0:	f000 81b5 	beq.w	205e <vscan+0x376>
    1cf4:	2900      	cmp	r1, #0
    1cf6:	f000 81b4 	beq.w	2062 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1cfa:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1cfc:	270a      	movs	r7, #10
    1cfe:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1d00:	f8df c370 	ldr.w	ip, [pc, #880]	; 2074 <vscan+0x38c>
    1d04:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1d06:	f811 0b01 	ldrb.w	r0, [r1], #1
    1d0a:	b170      	cbz	r0, 1d2a <vscan+0x42>
		if (*fmt++ != '%')
    1d0c:	2825      	cmp	r0, #37	; 0x25
    1d0e:	d1f9      	bne.n	1d04 <vscan+0x1c>
		switch (*fmt++) {
    1d10:	7870      	ldrb	r0, [r6, #1]
    1d12:	1cb1      	adds	r1, r6, #2
    1d14:	286c      	cmp	r0, #108	; 0x6c
    1d16:	f000 80e1 	beq.w	1edc <vscan+0x1f4>
    1d1a:	d809      	bhi.n	1d30 <vscan+0x48>
    1d1c:	2863      	cmp	r0, #99	; 0x63
    1d1e:	f000 8184 	beq.w	202a <vscan+0x342>
    1d22:	2864      	cmp	r0, #100	; 0x64
    1d24:	d043      	beq.n	1dae <vscan+0xc6>
    1d26:	2800      	cmp	r0, #0
    1d28:	d1ec      	bne.n	1d04 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1d2a:	4620      	mov	r0, r4
    1d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1d30:	2875      	cmp	r0, #117	; 0x75
    1d32:	d074      	beq.n	1e1e <vscan+0x136>
    1d34:	2878      	cmp	r0, #120	; 0x78
    1d36:	f000 8098 	beq.w	1e6a <vscan+0x182>
    1d3a:	2873      	cmp	r0, #115	; 0x73
    1d3c:	d1e2      	bne.n	1d04 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1d3e:	7818      	ldrb	r0, [r3, #0]
    1d40:	461e      	mov	r6, r3
    1d42:	f1a0 0e09 	sub.w	lr, r0, #9
    1d46:	fa5f fe8e 	uxtb.w	lr, lr
    1d4a:	f1be 0f17 	cmp.w	lr, #23
    1d4e:	4698      	mov	r8, r3
    1d50:	f103 0301 	add.w	r3, r3, #1
    1d54:	f240 8173 	bls.w	203e <vscan+0x356>
			if (*buf == '\0')
    1d58:	2800      	cmp	r0, #0
    1d5a:	d0e6      	beq.n	1d2a <vscan+0x42>
			if (*buf != ',') {
    1d5c:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1d5e:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1d62:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1d66:	d00e      	beq.n	1d86 <vscan+0x9e>
    1d68:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1d6a:	f818 3b01 	ldrb.w	r3, [r8], #1
    1d6e:	f1a3 0009 	sub.w	r0, r3, #9
    1d72:	2801      	cmp	r0, #1
    1d74:	d907      	bls.n	1d86 <vscan+0x9e>
    1d76:	2b0d      	cmp	r3, #13
    1d78:	d005      	beq.n	1d86 <vscan+0x9e>
    1d7a:	2b2c      	cmp	r3, #44	; 0x2c
    1d7c:	d003      	beq.n	1d86 <vscan+0x9e>
    1d7e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1d82:	f040 8163 	bne.w	204c <vscan+0x364>
			while (isspace (*buf)) buf++;
    1d86:	f896 8000 	ldrb.w	r8, [r6]
    1d8a:	4633      	mov	r3, r6
    1d8c:	f1a8 0009 	sub.w	r0, r8, #9
    1d90:	b2c0      	uxtb	r0, r0
    1d92:	2817      	cmp	r0, #23
    1d94:	f106 0601 	add.w	r6, r6, #1
    1d98:	f240 815b 	bls.w	2052 <vscan+0x36a>
			if (*buf == ',') buf++;
    1d9c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1da0:	bf08      	it	eq
    1da2:	4633      	moveq	r3, r6
			*sap = '\0';
    1da4:	f88e 5000 	strb.w	r5, [lr]
			break;
    1da8:	e7ac      	b.n	1d04 <vscan+0x1c>
		    case 'd': scani (word); break;
    1daa:	2e00      	cmp	r6, #0
    1dac:	d0bd      	beq.n	1d2a <vscan+0x42>
    1dae:	469e      	mov	lr, r3
    1db0:	f813 6b01 	ldrb.w	r6, [r3], #1
    1db4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1db8:	2809      	cmp	r0, #9
    1dba:	d923      	bls.n	1e04 <vscan+0x11c>
    1dbc:	2e2d      	cmp	r6, #45	; 0x2d
    1dbe:	d001      	beq.n	1dc4 <vscan+0xdc>
    1dc0:	2e2b      	cmp	r6, #43	; 0x2b
    1dc2:	d1f2      	bne.n	1daa <vscan+0xc2>
    1dc4:	7818      	ldrb	r0, [r3, #0]
    1dc6:	469e      	mov	lr, r3
    1dc8:	3830      	subs	r0, #48	; 0x30
    1dca:	2809      	cmp	r0, #9
    1dcc:	d8ef      	bhi.n	1dae <vscan+0xc6>
    1dce:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1dd2:	f1d9 0800 	rsbs	r8, r9, #0
    1dd6:	eb48 0809 	adc.w	r8, r8, r9
    1dda:	f852 6b04 	ldr.w	r6, [r2], #4
    1dde:	3401      	adds	r4, #1
    1de0:	8035      	strh	r5, [r6, #0]
    1de2:	f89e 0000 	ldrb.w	r0, [lr]
    1de6:	4673      	mov	r3, lr
    1de8:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1dec:	f1b9 0f09 	cmp.w	r9, #9
    1df0:	f10e 0e01 	add.w	lr, lr, #1
    1df4:	d909      	bls.n	1e0a <vscan+0x122>
    1df6:	f1b8 0f00 	cmp.w	r8, #0
    1dfa:	d183      	bne.n	1d04 <vscan+0x1c>
    1dfc:	8830      	ldrh	r0, [r6, #0]
    1dfe:	4240      	negs	r0, r0
    1e00:	8030      	strh	r0, [r6, #0]
    1e02:	e77f      	b.n	1d04 <vscan+0x1c>
    1e04:	f04f 0800 	mov.w	r8, #0
    1e08:	e7e7      	b.n	1dda <vscan+0xf2>
    1e0a:	8833      	ldrh	r3, [r6, #0]
    1e0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e10:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1e14:	3030      	adds	r0, #48	; 0x30
    1e16:	8030      	strh	r0, [r6, #0]
    1e18:	e7e3      	b.n	1de2 <vscan+0xfa>
		    case 'u': scanu (word); break;
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d085      	beq.n	1d2a <vscan+0x42>
    1e1e:	7818      	ldrb	r0, [r3, #0]
    1e20:	461e      	mov	r6, r3
    1e22:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1e26:	f1be 0f09 	cmp.w	lr, #9
    1e2a:	f103 0301 	add.w	r3, r3, #1
    1e2e:	d8f4      	bhi.n	1e1a <vscan+0x132>
    1e30:	f852 eb04 	ldr.w	lr, [r2], #4
    1e34:	3401      	adds	r4, #1
    1e36:	f8ae 5000 	strh.w	r5, [lr]
    1e3a:	7830      	ldrb	r0, [r6, #0]
    1e3c:	4633      	mov	r3, r6
    1e3e:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1e42:	f1b8 0f09 	cmp.w	r8, #9
    1e46:	f106 0601 	add.w	r6, r6, #1
    1e4a:	f63f af5b 	bhi.w	1d04 <vscan+0x1c>
    1e4e:	f8be 3000 	ldrh.w	r3, [lr]
    1e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1e5a:	3830      	subs	r0, #48	; 0x30
    1e5c:	f8ae 0000 	strh.w	r0, [lr]
    1e60:	e7eb      	b.n	1e3a <vscan+0x152>
		    case 'x': scanx (word); break;
    1e62:	f1be 0f00 	cmp.w	lr, #0
    1e66:	f43f af60 	beq.w	1d2a <vscan+0x42>
    1e6a:	f893 e000 	ldrb.w	lr, [r3]
    1e6e:	461e      	mov	r6, r3
    1e70:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1e74:	2809      	cmp	r0, #9
    1e76:	f103 0301 	add.w	r3, r3, #1
    1e7a:	d904      	bls.n	1e86 <vscan+0x19e>
    1e7c:	f02e 0020 	bic.w	r0, lr, #32
    1e80:	3841      	subs	r0, #65	; 0x41
    1e82:	2805      	cmp	r0, #5
    1e84:	d8ed      	bhi.n	1e62 <vscan+0x17a>
    1e86:	f852 eb04 	ldr.w	lr, [r2], #4
    1e8a:	3401      	adds	r4, #1
    1e8c:	f8ae 5000 	strh.w	r5, [lr]
    1e90:	f106 0805 	add.w	r8, r6, #5
    1e94:	f896 9000 	ldrb.w	r9, [r6]
    1e98:	4633      	mov	r3, r6
    1e9a:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1e9e:	b2c0      	uxtb	r0, r0
    1ea0:	2809      	cmp	r0, #9
    1ea2:	f106 0601 	add.w	r6, r6, #1
    1ea6:	f240 80de 	bls.w	2066 <vscan+0x37e>
    1eaa:	f029 0020 	bic.w	r0, r9, #32
    1eae:	3841      	subs	r0, #65	; 0x41
    1eb0:	2805      	cmp	r0, #5
    1eb2:	f63f af27 	bhi.w	1d04 <vscan+0x1c>
    1eb6:	4546      	cmp	r6, r8
    1eb8:	f43f af24 	beq.w	1d04 <vscan+0x1c>
    1ebc:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1ec0:	2b05      	cmp	r3, #5
    1ec2:	bf94      	ite	ls
    1ec4:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1ec8:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1ecc:	b2c0      	uxtb	r0, r0
    1ece:	f8be 3000 	ldrh.w	r3, [lr]
    1ed2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1ed6:	f8ae 0000 	strh.w	r0, [lr]
    1eda:	e7db      	b.n	1e94 <vscan+0x1ac>
			switch (*fmt++) {
    1edc:	78b0      	ldrb	r0, [r6, #2]
    1ede:	1cf1      	adds	r1, r6, #3
    1ee0:	2875      	cmp	r0, #117	; 0x75
    1ee2:	d07d      	beq.n	1fe0 <vscan+0x2f8>
    1ee4:	d831      	bhi.n	1f4a <vscan+0x262>
    1ee6:	2800      	cmp	r0, #0
    1ee8:	f43f af1f 	beq.w	1d2a <vscan+0x42>
    1eec:	2864      	cmp	r0, #100	; 0x64
    1eee:	f47f af09 	bne.w	1d04 <vscan+0x1c>
    1ef2:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1ef4:	f813 6b01 	ldrb.w	r6, [r3], #1
    1ef8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1efc:	2809      	cmp	r0, #9
    1efe:	d962      	bls.n	1fc6 <vscan+0x2de>
    1f00:	2e2d      	cmp	r6, #45	; 0x2d
    1f02:	d001      	beq.n	1f08 <vscan+0x220>
    1f04:	2e2b      	cmp	r6, #43	; 0x2b
    1f06:	d15b      	bne.n	1fc0 <vscan+0x2d8>
    1f08:	7818      	ldrb	r0, [r3, #0]
    1f0a:	4698      	mov	r8, r3
    1f0c:	3830      	subs	r0, #48	; 0x30
    1f0e:	2809      	cmp	r0, #9
    1f10:	d8ef      	bhi.n	1ef2 <vscan+0x20a>
    1f12:	3e2d      	subs	r6, #45	; 0x2d
    1f14:	4270      	negs	r0, r6
    1f16:	4170      	adcs	r0, r6
    1f18:	f852 eb04 	ldr.w	lr, [r2], #4
    1f1c:	3401      	adds	r4, #1
    1f1e:	f8ce 5000 	str.w	r5, [lr]
    1f22:	f898 6000 	ldrb.w	r6, [r8]
    1f26:	4643      	mov	r3, r8
    1f28:	3e30      	subs	r6, #48	; 0x30
    1f2a:	fa5f f986 	uxtb.w	r9, r6
    1f2e:	f1b9 0f09 	cmp.w	r9, #9
    1f32:	f108 0801 	add.w	r8, r8, #1
    1f36:	d948      	bls.n	1fca <vscan+0x2e2>
    1f38:	2800      	cmp	r0, #0
    1f3a:	f47f aee3 	bne.w	1d04 <vscan+0x1c>
    1f3e:	f8de 0000 	ldr.w	r0, [lr]
    1f42:	4240      	negs	r0, r0
    1f44:	f8ce 0000 	str.w	r0, [lr]
    1f48:	e6dc      	b.n	1d04 <vscan+0x1c>
    1f4a:	2878      	cmp	r0, #120	; 0x78
    1f4c:	f47f aeda 	bne.w	1d04 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1f50:	f893 e000 	ldrb.w	lr, [r3]
    1f54:	461e      	mov	r6, r3
    1f56:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1f5a:	2809      	cmp	r0, #9
    1f5c:	f103 0301 	add.w	r3, r3, #1
    1f60:	d904      	bls.n	1f6c <vscan+0x284>
    1f62:	f02e 0020 	bic.w	r0, lr, #32
    1f66:	3841      	subs	r0, #65	; 0x41
    1f68:	2805      	cmp	r0, #5
    1f6a:	d85a      	bhi.n	2022 <vscan+0x33a>
    1f6c:	f852 eb04 	ldr.w	lr, [r2], #4
    1f70:	3401      	adds	r4, #1
    1f72:	f8ce 5000 	str.w	r5, [lr]
    1f76:	f106 0809 	add.w	r8, r6, #9
    1f7a:	f896 9000 	ldrb.w	r9, [r6]
    1f7e:	4633      	mov	r3, r6
    1f80:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1f84:	b2c0      	uxtb	r0, r0
    1f86:	2809      	cmp	r0, #9
    1f88:	f106 0601 	add.w	r6, r6, #1
    1f8c:	d96f      	bls.n	206e <vscan+0x386>
    1f8e:	f029 0020 	bic.w	r0, r9, #32
    1f92:	3841      	subs	r0, #65	; 0x41
    1f94:	2805      	cmp	r0, #5
    1f96:	f63f aeb5 	bhi.w	1d04 <vscan+0x1c>
    1f9a:	4546      	cmp	r6, r8
    1f9c:	f43f aeb2 	beq.w	1d04 <vscan+0x1c>
    1fa0:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1fa4:	2b05      	cmp	r3, #5
    1fa6:	bf94      	ite	ls
    1fa8:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1fac:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1fb0:	b2c0      	uxtb	r0, r0
    1fb2:	f8de 3000 	ldr.w	r3, [lr]
    1fb6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1fba:	f8ce 0000 	str.w	r0, [lr]
    1fbe:	e7dc      	b.n	1f7a <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1fc0:	2e00      	cmp	r6, #0
    1fc2:	d196      	bne.n	1ef2 <vscan+0x20a>
    1fc4:	e6b1      	b.n	1d2a <vscan+0x42>
    1fc6:	2000      	movs	r0, #0
    1fc8:	e7a6      	b.n	1f18 <vscan+0x230>
    1fca:	f8de 3000 	ldr.w	r3, [lr]
    1fce:	b2b6      	uxth	r6, r6
    1fd0:	437b      	muls	r3, r7
    1fd2:	1b9e      	subs	r6, r3, r6
    1fd4:	f8ce 6000 	str.w	r6, [lr]
    1fd8:	e7a3      	b.n	1f22 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1fda:	2800      	cmp	r0, #0
    1fdc:	f43f aea5 	beq.w	1d2a <vscan+0x42>
    1fe0:	7818      	ldrb	r0, [r3, #0]
    1fe2:	461e      	mov	r6, r3
    1fe4:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1fe8:	f1be 0f09 	cmp.w	lr, #9
    1fec:	f103 0301 	add.w	r3, r3, #1
    1ff0:	d8f3      	bhi.n	1fda <vscan+0x2f2>
    1ff2:	f852 eb04 	ldr.w	lr, [r2], #4
    1ff6:	3401      	adds	r4, #1
    1ff8:	f8ce 5000 	str.w	r5, [lr]
    1ffc:	7830      	ldrb	r0, [r6, #0]
    1ffe:	4633      	mov	r3, r6
    2000:	3830      	subs	r0, #48	; 0x30
    2002:	fa5f f880 	uxtb.w	r8, r0
    2006:	f1b8 0f09 	cmp.w	r8, #9
    200a:	f106 0601 	add.w	r6, r6, #1
    200e:	f63f ae79 	bhi.w	1d04 <vscan+0x1c>
    2012:	f8de 3000 	ldr.w	r3, [lr]
    2016:	b280      	uxth	r0, r0
    2018:	fb07 0003 	mla	r0, r7, r3, r0
    201c:	f8ce 0000 	str.w	r0, [lr]
    2020:	e7ec      	b.n	1ffc <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    2022:	f1be 0f00 	cmp.w	lr, #0
    2026:	d193      	bne.n	1f50 <vscan+0x268>
    2028:	e67f      	b.n	1d2a <vscan+0x42>
			if ((c = *buf++) == '\0')
    202a:	f813 0b01 	ldrb.w	r0, [r3], #1
    202e:	2800      	cmp	r0, #0
    2030:	f43f ae7b 	beq.w	1d2a <vscan+0x42>
			sap = va_arg (ap, char*);
    2034:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    2038:	3401      	adds	r4, #1
			*sap = c;
    203a:	7030      	strb	r0, [r6, #0]
			break;
    203c:	e662      	b.n	1d04 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    203e:	fa2c fe0e 	lsr.w	lr, ip, lr
    2042:	f01e 0f01 	tst.w	lr, #1
    2046:	f47f ae7a 	bne.w	1d3e <vscan+0x56>
    204a:	e687      	b.n	1d5c <vscan+0x74>
						*sap++ = *buf++;
    204c:	f80e 3b01 	strb.w	r3, [lr], #1
    2050:	e68a      	b.n	1d68 <vscan+0x80>
			while (isspace (*buf)) buf++;
    2052:	fa2c f000 	lsr.w	r0, ip, r0
    2056:	07c0      	lsls	r0, r0, #31
    2058:	f53f ae95 	bmi.w	1d86 <vscan+0x9e>
    205c:	e6a2      	b.n	1da4 <vscan+0xbc>
		return 0;
    205e:	4604      	mov	r4, r0
    2060:	e663      	b.n	1d2a <vscan+0x42>
    2062:	460c      	mov	r4, r1
    2064:	e661      	b.n	1d2a <vscan+0x42>
		    case 'x': scanx (word); break;
    2066:	4546      	cmp	r6, r8
    2068:	f47f af31 	bne.w	1ece <vscan+0x1e6>
    206c:	e64a      	b.n	1d04 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    206e:	4546      	cmp	r6, r8
    2070:	d19f      	bne.n	1fb2 <vscan+0x2ca>
    2072:	e647      	b.n	1d04 <vscan+0x1c>
    2074:	00800013 	addeq	r0, r0, r3, lsl r0

00002078 <NOROM_AONBatMonTemperatureGetDegC>:
    2078:	4b08      	ldr	r3, [pc, #32]	; (209c <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    207a:	6818      	ldr	r0, [r3, #0]
    207c:	4b08      	ldr	r3, [pc, #32]	; (20a0 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    207e:	7819      	ldrb	r1, [r3, #0]
    2080:	4b08      	ldr	r3, [pc, #32]	; (20a4 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    2082:	681a      	ldr	r2, [r3, #0]
    2084:	f340 0310 	sbfx	r3, r0, #0, #17
    2088:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    208c:	b248      	sxtb	r0, r1
    208e:	4350      	muls	r0, r2
    2090:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    2094:	3080      	adds	r0, #128	; 0x80
    2096:	1200      	asrs	r0, r0, #8
    2098:	4770      	bx	lr
    209a:	bf00      	nop
    209c:	40095030 	andmi	r5, r9, r0, lsr r0
    20a0:	5000130c 	andpl	r1, r0, ip, lsl #6
    20a4:	40095028 	andmi	r5, r9, r8, lsr #32

000020a8 <NOROM_AONRTCCurrent64BitValueGet>:
    20a8:	4b03      	ldr	r3, [pc, #12]	; (20b8 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    20aa:	4904      	ldr	r1, [pc, #16]	; (20bc <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    20ac:	681a      	ldr	r2, [r3, #0]
    20ae:	6808      	ldr	r0, [r1, #0]
    20b0:	6819      	ldr	r1, [r3, #0]
    20b2:	4291      	cmp	r1, r2
    20b4:	d1f8      	bne.n	20a8 <NOROM_AONRTCCurrent64BitValueGet>
    20b6:	4770      	bx	lr
    20b8:	40092008 	andmi	r2, r9, r8
    20bc:	4009200c 	andmi	r2, r9, ip

000020c0 <NOROM_CPUcpsid>:
    20c0:	f3ef 8010 	mrs	r0, PRIMASK
    20c4:	b672      	cpsid	i
    20c6:	4770      	bx	lr

000020c8 <NOROM_CPUcpsie>:
    20c8:	f3ef 8010 	mrs	r0, PRIMASK
    20cc:	b662      	cpsie	i
    20ce:	4770      	bx	lr

000020d0 <TrimAfterColdResetWakeupFromShutDown>:
    20d0:	b538      	push	{r3, r4, r5, lr}
    20d2:	4605      	mov	r5, r0
    20d4:	4b26      	ldr	r3, [pc, #152]	; (2170 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    20d6:	2201      	movs	r2, #1
    20d8:	601a      	str	r2, [r3, #0]
    20da:	4b26      	ldr	r3, [pc, #152]	; (2174 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    20dc:	681b      	ldr	r3, [r3, #0]
    20de:	2b00      	cmp	r3, #0
    20e0:	d0fb      	beq.n	20da <TrimAfterColdResetWakeupFromShutDown+0xa>
    20e2:	4b25      	ldr	r3, [pc, #148]	; (2178 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    20e4:	22c0      	movs	r2, #192	; 0xc0
    20e6:	601a      	str	r2, [r3, #0]
    20e8:	4b24      	ldr	r3, [pc, #144]	; (217c <TrimAfterColdResetWakeupFromShutDown+0xac>)
    20ea:	681b      	ldr	r3, [r3, #0]
    20ec:	079b      	lsls	r3, r3, #30
    20ee:	bf5f      	itttt	pl
    20f0:	4b23      	ldrpl	r3, [pc, #140]	; (2180 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    20f2:	4a24      	ldrpl	r2, [pc, #144]	; (2184 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    20f4:	681b      	ldrpl	r3, [r3, #0]
    20f6:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    20fa:	bf5c      	itt	pl
    20fc:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    2100:	7013      	strbpl	r3, [r2, #0]
    2102:	4b21      	ldr	r3, [pc, #132]	; (2188 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    2104:	2200      	movs	r2, #0
    2106:	601a      	str	r2, [r3, #0]
    2108:	4b20      	ldr	r3, [pc, #128]	; (218c <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    210a:	681c      	ldr	r4, [r3, #0]
    210c:	4620      	mov	r0, r4
    210e:	f000 f8d9 	bl	22c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    2112:	4628      	mov	r0, r5
    2114:	4621      	mov	r1, r4
    2116:	f000 fa0d 	bl	2534 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    211a:	f240 221d 	movw	r2, #541	; 0x21d
    211e:	4b1c      	ldr	r3, [pc, #112]	; (2190 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	b29b      	uxth	r3, r3
    2124:	4293      	cmp	r3, r2
    2126:	d814      	bhi.n	2152 <TrimAfterColdResetWakeupFromShutDown+0x82>
    2128:	4a1a      	ldr	r2, [pc, #104]	; (2194 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    212a:	6813      	ldr	r3, [r2, #0]
    212c:	6812      	ldr	r2, [r2, #0]
    212e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2132:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2136:	b103      	cbz	r3, 213a <TrimAfterColdResetWakeupFromShutDown+0x6a>
    2138:	3b01      	subs	r3, #1
    213a:	1f91      	subs	r1, r2, #6
    213c:	2901      	cmp	r1, #1
    213e:	bf86      	itte	hi
    2140:	3202      	addhi	r2, #2
    2142:	f002 020f 	andhi.w	r2, r2, #15
    2146:	2207      	movls	r2, #7
    2148:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    214c:	4a12      	ldr	r2, [pc, #72]	; (2198 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    214e:	b2db      	uxtb	r3, r3
    2150:	7013      	strb	r3, [r2, #0]
    2152:	4620      	mov	r0, r4
    2154:	f000 fabc 	bl	26d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    2158:	4b10      	ldr	r3, [pc, #64]	; (219c <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    215a:	2002      	movs	r0, #2
    215c:	681b      	ldr	r3, [r3, #0]
    215e:	68db      	ldr	r3, [r3, #12]
    2160:	4798      	blx	r3
    2162:	4b05      	ldr	r3, [pc, #20]	; (2178 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    2164:	2240      	movs	r2, #64	; 0x40
    2166:	601a      	str	r2, [r3, #0]
    2168:	4b0d      	ldr	r3, [pc, #52]	; (21a0 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    216a:	2201      	movs	r2, #1
    216c:	601a      	str	r2, [r3, #0]
    216e:	bd38      	pop	{r3, r4, r5, pc}
    2170:	40091010 	andmi	r1, r9, r0, lsl r0
    2174:	43220294 			; <UNDEFINED> instruction: 0x43220294
    2178:	400c6000 	andmi	r6, ip, r0
    217c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2180:	50003fac 	andpl	r3, r0, ip, lsr #31
    2184:	40086256 	andmi	r6, r8, r6, asr r2
    2188:	40091040 	andmi	r1, r9, r0, asr #32
    218c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2190:	50001314 	andpl	r1, r0, r4, lsl r3
    2194:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    2198:	40086002 	andmi	r6, r8, r2
    219c:	100001a0 	andne	r0, r0, r0, lsr #3
    21a0:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000021a4 <NOROM_SetupTrimDevice>:
    21a4:	b510      	push	{r4, lr}
    21a6:	4b1f      	ldr	r3, [pc, #124]	; (2224 <NOROM_SetupTrimDevice+0x80>)
    21a8:	681c      	ldr	r4, [r3, #0]
    21aa:	1c63      	adds	r3, r4, #1
    21ac:	bf08      	it	eq
    21ae:	2400      	moveq	r4, #0
    21b0:	f000 fcde 	bl	2b70 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    21b4:	4b1c      	ldr	r3, [pc, #112]	; (2228 <NOROM_SetupTrimDevice+0x84>)
    21b6:	2200      	movs	r2, #0
    21b8:	601a      	str	r2, [r3, #0]
    21ba:	4a1c      	ldr	r2, [pc, #112]	; (222c <NOROM_SetupTrimDevice+0x88>)
    21bc:	2301      	movs	r3, #1
    21be:	6013      	str	r3, [r2, #0]
    21c0:	4a1b      	ldr	r2, [pc, #108]	; (2230 <NOROM_SetupTrimDevice+0x8c>)
    21c2:	6013      	str	r3, [r2, #0]
    21c4:	f000 fa3e 	bl	2644 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    21c8:	4b1a      	ldr	r3, [pc, #104]	; (2234 <NOROM_SetupTrimDevice+0x90>)
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	b123      	cbz	r3, 21d8 <NOROM_SetupTrimDevice+0x34>
    21ce:	4b1a      	ldr	r3, [pc, #104]	; (2238 <NOROM_SetupTrimDevice+0x94>)
    21d0:	4620      	mov	r0, r4
    21d2:	681b      	ldr	r3, [r3, #0]
    21d4:	f7ff ff7c 	bl	20d0 <TrimAfterColdResetWakeupFromShutDown>
    21d8:	4b18      	ldr	r3, [pc, #96]	; (223c <NOROM_SetupTrimDevice+0x98>)
    21da:	2200      	movs	r2, #0
    21dc:	601a      	str	r2, [r3, #0]
    21de:	4a18      	ldr	r2, [pc, #96]	; (2240 <NOROM_SetupTrimDevice+0x9c>)
    21e0:	6813      	ldr	r3, [r2, #0]
    21e2:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    21e6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    21ea:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    21ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    21f2:	6013      	str	r3, [r2, #0]
    21f4:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    21f8:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    21fc:	6813      	ldr	r3, [r2, #0]
    21fe:	f3c3 3301 	ubfx	r3, r3, #12, #2
    2202:	2b01      	cmp	r3, #1
    2204:	bf01      	itttt	eq
    2206:	6813      	ldreq	r3, [r2, #0]
    2208:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    220c:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2210:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2214:	bf04      	itt	eq
    2216:	6011      	streq	r1, [r2, #0]
    2218:	6013      	streq	r3, [r2, #0]
    221a:	4b0a      	ldr	r3, [pc, #40]	; (2244 <NOROM_SetupTrimDevice+0xa0>)
    221c:	681b      	ldr	r3, [r3, #0]
    221e:	2b00      	cmp	r3, #0
    2220:	d1fb      	bne.n	221a <NOROM_SetupTrimDevice+0x76>
    2222:	bd10      	pop	{r4, pc}
    2224:	5000131c 	andpl	r1, r0, ip, lsl r3
    2228:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    222c:	400c605c 	andmi	r6, ip, ip, asr r0
    2230:	43042208 	movwmi	r2, #16904	; 0x4208
    2234:	43280180 			; <UNDEFINED> instruction: 0x43280180
    2238:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    223c:	4008218c 	andmi	r2, r8, ip, lsl #3
    2240:	40032048 	andmi	r2, r3, r8, asr #32
    2244:	4268000c 	rsbmi	r0, r8, #12

00002248 <NOROM_SetupSetVddrLevel>:
    2248:	b530      	push	{r4, r5, lr}
    224a:	4b19      	ldr	r3, [pc, #100]	; (22b0 <NOROM_SetupSetVddrLevel+0x68>)
    224c:	681a      	ldr	r2, [r3, #0]
    224e:	4b19      	ldr	r3, [pc, #100]	; (22b4 <NOROM_SetupSetVddrLevel+0x6c>)
    2250:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2254:	781b      	ldrb	r3, [r3, #0]
    2256:	2a15      	cmp	r2, #21
    2258:	f003 031f 	and.w	r3, r3, #31
    225c:	bf88      	it	hi
    225e:	3a20      	subhi	r2, #32
    2260:	2b15      	cmp	r3, #21
    2262:	bf88      	it	hi
    2264:	3b20      	subhi	r3, #32
    2266:	4293      	cmp	r3, r2
    2268:	d020      	beq.n	22ac <NOROM_SetupSetVddrLevel+0x64>
    226a:	4913      	ldr	r1, [pc, #76]	; (22b8 <NOROM_SetupSetVddrLevel+0x70>)
    226c:	2000      	movs	r0, #0
    226e:	6008      	str	r0, [r1, #0]
    2270:	4608      	mov	r0, r1
    2272:	1ad1      	subs	r1, r2, r3
    2274:	2902      	cmp	r1, #2
    2276:	dc05      	bgt.n	2284 <NOROM_SetupSetVddrLevel+0x3c>
    2278:	f06f 0401 	mvn.w	r4, #1
    227c:	42a1      	cmp	r1, r4
    227e:	bfb8      	it	lt
    2280:	4621      	movlt	r1, r4
    2282:	e000      	b.n	2286 <NOROM_SetupSetVddrLevel+0x3e>
    2284:	2102      	movs	r1, #2
    2286:	440b      	add	r3, r1
    2288:	490c      	ldr	r1, [pc, #48]	; (22bc <NOROM_SetupSetVddrLevel+0x74>)
    228a:	4d0d      	ldr	r5, [pc, #52]	; (22c0 <NOROM_SetupSetVddrLevel+0x78>)
    228c:	680c      	ldr	r4, [r1, #0]
    228e:	f003 041f 	and.w	r4, r3, #31
    2292:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    2296:	802c      	strh	r4, [r5, #0]
    2298:	4293      	cmp	r3, r2
    229a:	f04f 0401 	mov.w	r4, #1
    229e:	600c      	str	r4, [r1, #0]
    22a0:	d1e7      	bne.n	2272 <NOROM_SetupSetVddrLevel+0x2a>
    22a2:	680b      	ldr	r3, [r1, #0]
    22a4:	600c      	str	r4, [r1, #0]
    22a6:	680b      	ldr	r3, [r1, #0]
    22a8:	6004      	str	r4, [r0, #0]
    22aa:	680b      	ldr	r3, [r1, #0]
    22ac:	bd30      	pop	{r4, r5, pc}
    22ae:	bf00      	nop
    22b0:	50001388 	andpl	r1, r0, r8, lsl #7
    22b4:	40086206 	andmi	r6, r8, r6, lsl #4
    22b8:	43200098 			; <UNDEFINED> instruction: 0x43200098
    22bc:	4009202c 	andmi	r2, r9, ip, lsr #32
    22c0:	4008626c 	andmi	r6, r8, ip, ror #4

000022c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    22c4:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    22c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    22cc:	b510      	push	{r4, lr}
    22ce:	4604      	mov	r4, r0
    22d0:	d10f      	bne.n	22f2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    22d2:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    22d6:	4a1e      	ldr	r2, [pc, #120]	; (2350 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    22d8:	2380      	movs	r3, #128	; 0x80
    22da:	7013      	strb	r3, [r2, #0]
    22dc:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    22e0:	f802 3c10 	strb.w	r3, [r2, #-16]
    22e4:	f7ff ffb0 	bl	2248 <NOROM_SetupSetVddrLevel>
    22e8:	4b1a      	ldr	r3, [pc, #104]	; (2354 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    22ea:	681b      	ldr	r3, [r3, #0]
    22ec:	f3c3 2304 	ubfx	r3, r3, #8, #5
    22f0:	e003      	b.n	22fa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    22f2:	4b19      	ldr	r3, [pc, #100]	; (2358 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    22f4:	681b      	ldr	r3, [r3, #0]
    22f6:	f3c3 6304 	ubfx	r3, r3, #24, #5
    22fa:	2b15      	cmp	r3, #21
    22fc:	bf88      	it	hi
    22fe:	3b20      	subhi	r3, #32
    2300:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2304:	3301      	adds	r3, #1
    2306:	2b15      	cmp	r3, #21
    2308:	dc05      	bgt.n	2316 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    230a:	f06f 0209 	mvn.w	r2, #9
    230e:	4293      	cmp	r3, r2
    2310:	bfb8      	it	lt
    2312:	4613      	movlt	r3, r2
    2314:	e000      	b.n	2318 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    2316:	2315      	movs	r3, #21
    2318:	4a10      	ldr	r2, [pc, #64]	; (235c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    231a:	f003 031f 	and.w	r3, r3, #31
    231e:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    2322:	8013      	strh	r3, [r2, #0]
    2324:	4b0e      	ldr	r3, [pc, #56]	; (2360 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	f013 0302 	ands.w	r3, r3, #2
    232c:	bf0a      	itet	eq
    232e:	4a0d      	ldreq	r2, [pc, #52]	; (2364 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    2330:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    2334:	6013      	streq	r3, [r2, #0]
    2336:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    233a:	4a0b      	ldr	r2, [pc, #44]	; (2368 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    233c:	f083 0301 	eor.w	r3, r3, #1
    2340:	6013      	str	r3, [r2, #0]
    2342:	f3c4 6480 	ubfx	r4, r4, #26, #1
    2346:	4b09      	ldr	r3, [pc, #36]	; (236c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    2348:	f084 0401 	eor.w	r4, r4, #1
    234c:	601c      	str	r4, [r3, #0]
    234e:	bd10      	pop	{r4, pc}
    2350:	40086225 	andmi	r6, r8, r5, lsr #4
    2354:	50001388 	andpl	r1, r0, r8, lsl #7
    2358:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    235c:	4008626e 	andmi	r6, r8, lr, ror #4
    2360:	40090000 	andmi	r0, r9, r0
    2364:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    2368:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    236c:	43200008 			; <UNDEFINED> instruction: 0x43200008

00002370 <NOROM_SetupGetTrimForAnabypassValue1>:
    2370:	4b15      	ldr	r3, [pc, #84]	; (23c8 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    2372:	0381      	lsls	r1, r0, #14
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	f3c3 6283 	ubfx	r2, r3, #26, #4
    237a:	f3c3 238f 	ubfx	r3, r3, #10, #16
    237e:	d41f      	bmi.n	23c0 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2380:	f340 2007 	sbfx	r0, r0, #8, #8
    2384:	2800      	cmp	r0, #0
    2386:	da19      	bge.n	23bc <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    2388:	085b      	lsrs	r3, r3, #1
    238a:	d105      	bne.n	2398 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    238c:	0852      	lsrs	r2, r2, #1
    238e:	bf06      	itte	eq
    2390:	2301      	moveq	r3, #1
    2392:	461a      	moveq	r2, r3
    2394:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    2398:	3001      	adds	r0, #1
    239a:	e7f3      	b.n	2384 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    239c:	005b      	lsls	r3, r3, #1
    239e:	f043 0301 	orr.w	r3, r3, #1
    23a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    23a6:	d308      	bcc.n	23ba <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    23a8:	0052      	lsls	r2, r2, #1
    23aa:	f042 0201 	orr.w	r2, r2, #1
    23ae:	2a0f      	cmp	r2, #15
    23b0:	bf86      	itte	hi
    23b2:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    23b6:	220f      	movhi	r2, #15
    23b8:	2301      	movls	r3, #1
    23ba:	3801      	subs	r0, #1
    23bc:	2800      	cmp	r0, #0
    23be:	d1ed      	bne.n	239c <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    23c0:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    23c4:	4770      	bx	lr
    23c6:	bf00      	nop
    23c8:	50001350 	andpl	r1, r0, r0, asr r3

000023cc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    23cc:	4a04      	ldr	r2, [pc, #16]	; (23e0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    23ce:	6813      	ldr	r3, [r2, #0]
    23d0:	6810      	ldr	r0, [r2, #0]
    23d2:	f3c3 0387 	ubfx	r3, r3, #2, #8
    23d6:	f000 0003 	and.w	r0, r0, #3
    23da:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    23de:	4770      	bx	lr
    23e0:	50001350 	andpl	r1, r0, r0, asr r3

000023e4 <NOROM_SetupGetTrimForAmpcompTh2>:
    23e4:	4b02      	ldr	r3, [pc, #8]	; (23f0 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    23e6:	6818      	ldr	r0, [r3, #0]
    23e8:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop
    23f0:	50001374 	andpl	r1, r0, r4, ror r3

000023f4 <NOROM_SetupGetTrimForAmpcompTh1>:
    23f4:	4b03      	ldr	r3, [pc, #12]	; (2404 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    23f6:	6818      	ldr	r0, [r3, #0]
    23f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23fc:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	50001370 	andpl	r1, r0, r0, ror r3

00002408 <NOROM_SetupGetTrimForAmpcompCtrl>:
    2408:	b570      	push	{r4, r5, r6, lr}
    240a:	4b15      	ldr	r3, [pc, #84]	; (2460 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    240c:	4915      	ldr	r1, [pc, #84]	; (2464 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    240e:	681c      	ldr	r4, [r3, #0]
    2410:	6809      	ldr	r1, [r1, #0]
    2412:	f3c4 5203 	ubfx	r2, r4, #20, #4
    2416:	f011 0501 	ands.w	r5, r1, #1
    241a:	f3c4 4303 	ubfx	r3, r4, #16, #4
    241e:	d113      	bne.n	2448 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2420:	4911      	ldr	r1, [pc, #68]	; (2468 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    2422:	6809      	ldr	r1, [r1, #0]
    2424:	f341 2603 	sbfx	r6, r1, #8, #4
    2428:	18b2      	adds	r2, r6, r2
    242a:	d403      	bmi.n	2434 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    242c:	2a0f      	cmp	r2, #15
    242e:	bfa8      	it	ge
    2430:	220f      	movge	r2, #15
    2432:	e000      	b.n	2436 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    2434:	462a      	mov	r2, r5
    2436:	f341 3103 	sbfx	r1, r1, #12, #4
    243a:	18cb      	adds	r3, r1, r3
    243c:	d403      	bmi.n	2446 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    243e:	2b0f      	cmp	r3, #15
    2440:	bfa8      	it	ge
    2442:	230f      	movge	r3, #15
    2444:	e000      	b.n	2448 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2446:	2300      	movs	r3, #0
    2448:	b2a1      	uxth	r1, r4
    244a:	2821      	cmp	r0, #33	; 0x21
    244c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    2450:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2454:	bf84      	itt	hi
    2456:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    245a:	4323      	orrhi	r3, r4
    245c:	4618      	mov	r0, r3
    245e:	bd70      	pop	{r4, r5, r6, pc}
    2460:	50001378 	andpl	r1, r0, r8, ror r3
    2464:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2468:	50003fac 	andpl	r3, r0, ip, lsr #31

0000246c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    246c:	281f      	cmp	r0, #31
    246e:	bf83      	ittte	hi
    2470:	4b02      	ldrhi	r3, [pc, #8]	; (247c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    2472:	6818      	ldrhi	r0, [r3, #0]
    2474:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    2478:	2000      	movls	r0, #0
    247a:	4770      	bx	lr
    247c:	50001398 	mulpl	r0, r8, r3

00002480 <NOROM_SetupGetTrimForAdcShModeEn>:
    2480:	2821      	cmp	r0, #33	; 0x21
    2482:	bf83      	ittte	hi
    2484:	4b02      	ldrhi	r3, [pc, #8]	; (2490 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    2486:	6818      	ldrhi	r0, [r3, #0]
    2488:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    248c:	2001      	movls	r0, #1
    248e:	4770      	bx	lr
    2490:	5000138c 	andpl	r1, r0, ip, lsl #7

00002494 <NOROM_SetupGetTrimForAdcShVbufEn>:
    2494:	2821      	cmp	r0, #33	; 0x21
    2496:	bf83      	ittte	hi
    2498:	4b02      	ldrhi	r3, [pc, #8]	; (24a4 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    249a:	6818      	ldrhi	r0, [r3, #0]
    249c:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    24a0:	2001      	movls	r0, #1
    24a2:	4770      	bx	lr
    24a4:	5000138c 	andpl	r1, r0, ip, lsl #7

000024a8 <NOROM_SetupGetTrimForXoscHfCtl>:
    24a8:	281f      	cmp	r0, #31
    24aa:	bf81      	itttt	hi
    24ac:	4b07      	ldrhi	r3, [pc, #28]	; (24cc <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    24ae:	681b      	ldrhi	r3, [r3, #0]
    24b0:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    24b4:	0080      	lslhi	r0, r0, #2
    24b6:	bf81      	itttt	hi
    24b8:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    24bc:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    24c0:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    24c4:	4318      	orrhi	r0, r3
    24c6:	bf98      	it	ls
    24c8:	2000      	movls	r0, #0
    24ca:	4770      	bx	lr
    24cc:	50001398 	mulpl	r0, r8, r3

000024d0 <NOROM_SetupGetTrimForXoscHfFastStart>:
    24d0:	4b02      	ldr	r3, [pc, #8]	; (24dc <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    24d2:	6818      	ldr	r0, [r3, #0]
    24d4:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    24d8:	4770      	bx	lr
    24da:	bf00      	nop
    24dc:	5000138c 	andpl	r1, r0, ip, lsl #7

000024e0 <NOROM_SetupGetTrimForRadcExtCfg>:
    24e0:	281f      	cmp	r0, #31
    24e2:	bf81      	itttt	hi
    24e4:	4b07      	ldrhi	r3, [pc, #28]	; (2504 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    24e6:	681b      	ldrhi	r3, [r3, #0]
    24e8:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    24ec:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    24f0:	bf81      	itttt	hi
    24f2:	0400      	lslhi	r0, r0, #16
    24f4:	031b      	lslhi	r3, r3, #12
    24f6:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    24fa:	b29b      	uxthhi	r3, r3
    24fc:	bf8c      	ite	hi
    24fe:	4318      	orrhi	r0, r3
    2500:	4801      	ldrls	r0, [pc, #4]	; (2508 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    2502:	4770      	bx	lr
    2504:	50001398 	mulpl	r0, r8, r3
    2508:	403f8000 	eorsmi	r8, pc, r0

0000250c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    250c:	2821      	cmp	r0, #33	; 0x21
    250e:	bf83      	ittte	hi
    2510:	4b02      	ldrhi	r3, [pc, #8]	; (251c <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    2512:	6818      	ldrhi	r0, [r3, #0]
    2514:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    2518:	2000      	movls	r0, #0
    251a:	4770      	bx	lr
    251c:	5000138c 	andpl	r1, r0, ip, lsl #7

00002520 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    2520:	2821      	cmp	r0, #33	; 0x21
    2522:	bf83      	ittte	hi
    2524:	4b02      	ldrhi	r3, [pc, #8]	; (2530 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    2526:	6818      	ldrhi	r0, [r3, #0]
    2528:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    252c:	2000      	movls	r0, #0
    252e:	4770      	bx	lr
    2530:	5000138c 	andpl	r1, r0, ip, lsl #7

00002534 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    2534:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2536:	4605      	mov	r5, r0
    2538:	4608      	mov	r0, r1
    253a:	f7ff ff19 	bl	2370 <NOROM_SetupGetTrimForAnabypassValue1>
    253e:	4c39      	ldr	r4, [pc, #228]	; (2624 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    2540:	4602      	mov	r2, r0
    2542:	2118      	movs	r1, #24
    2544:	4620      	mov	r0, r4
    2546:	f000 fb33 	bl	2bb0 <NOROM_DDI32RegWrite>
    254a:	f7ff ff3f 	bl	23cc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    254e:	4b36      	ldr	r3, [pc, #216]	; (2628 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    2550:	b280      	uxth	r0, r0
    2552:	681b      	ldr	r3, [r3, #0]
    2554:	9000      	str	r0, [sp, #0]
    2556:	685e      	ldr	r6, [r3, #4]
    2558:	4620      	mov	r0, r4
    255a:	212c      	movs	r1, #44	; 0x2c
    255c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2560:	2300      	movs	r3, #0
    2562:	47b0      	blx	r6
    2564:	4b31      	ldr	r3, [pc, #196]	; (262c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    2566:	4620      	mov	r0, r4
    2568:	681a      	ldr	r2, [r3, #0]
    256a:	211c      	movs	r1, #28
    256c:	f3c2 020d 	ubfx	r2, r2, #0, #14
    2570:	f000 fb1e 	bl	2bb0 <NOROM_DDI32RegWrite>
    2574:	f7ff ff36 	bl	23e4 <NOROM_SetupGetTrimForAmpcompTh2>
    2578:	2114      	movs	r1, #20
    257a:	4602      	mov	r2, r0
    257c:	4620      	mov	r0, r4
    257e:	f000 fb17 	bl	2bb0 <NOROM_DDI32RegWrite>
    2582:	f7ff ff37 	bl	23f4 <NOROM_SetupGetTrimForAmpcompTh1>
    2586:	2110      	movs	r1, #16
    2588:	4602      	mov	r2, r0
    258a:	4620      	mov	r0, r4
    258c:	f000 fb10 	bl	2bb0 <NOROM_DDI32RegWrite>
    2590:	4628      	mov	r0, r5
    2592:	f7ff ff39 	bl	2408 <NOROM_SetupGetTrimForAmpcompCtrl>
    2596:	210c      	movs	r1, #12
    2598:	4602      	mov	r2, r0
    259a:	4620      	mov	r0, r4
    259c:	f000 fb08 	bl	2bb0 <NOROM_DDI32RegWrite>
    25a0:	4628      	mov	r0, r5
    25a2:	f7ff ff6d 	bl	2480 <NOROM_SetupGetTrimForAdcShModeEn>
    25a6:	0040      	lsls	r0, r0, #1
    25a8:	4e21      	ldr	r6, [pc, #132]	; (2630 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    25aa:	f040 0020 	orr.w	r0, r0, #32
    25ae:	b2c0      	uxtb	r0, r0
    25b0:	7030      	strb	r0, [r6, #0]
    25b2:	4628      	mov	r0, r5
    25b4:	f7ff ff6e 	bl	2494 <NOROM_SetupGetTrimForAdcShVbufEn>
    25b8:	f040 0010 	orr.w	r0, r0, #16
    25bc:	b2c0      	uxtb	r0, r0
    25be:	7030      	strb	r0, [r6, #0]
    25c0:	4628      	mov	r0, r5
    25c2:	f7ff ff71 	bl	24a8 <NOROM_SetupGetTrimForXoscHfCtl>
    25c6:	2128      	movs	r1, #40	; 0x28
    25c8:	4602      	mov	r2, r0
    25ca:	4620      	mov	r0, r4
    25cc:	f000 faf0 	bl	2bb0 <NOROM_DDI32RegWrite>
    25d0:	4628      	mov	r0, r5
    25d2:	f7ff ff4b 	bl	246c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    25d6:	0040      	lsls	r0, r0, #1
    25d8:	4b16      	ldr	r3, [pc, #88]	; (2634 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    25da:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    25de:	b2c0      	uxtb	r0, r0
    25e0:	7018      	strb	r0, [r3, #0]
    25e2:	4628      	mov	r0, r5
    25e4:	f7ff ff92 	bl	250c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    25e8:	00c0      	lsls	r0, r0, #3
    25ea:	4b13      	ldr	r3, [pc, #76]	; (2638 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    25ec:	f060 007f 	orn	r0, r0, #127	; 0x7f
    25f0:	b2c0      	uxtb	r0, r0
    25f2:	7018      	strb	r0, [r3, #0]
    25f4:	4628      	mov	r0, r5
    25f6:	f7ff ff93 	bl	2520 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    25fa:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    25fe:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    2602:	4b0e      	ldr	r3, [pc, #56]	; (263c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2604:	b280      	uxth	r0, r0
    2606:	8018      	strh	r0, [r3, #0]
    2608:	4628      	mov	r0, r5
    260a:	f7ff ff69 	bl	24e0 <NOROM_SetupGetTrimForRadcExtCfg>
    260e:	2108      	movs	r1, #8
    2610:	4602      	mov	r2, r0
    2612:	4620      	mov	r0, r4
    2614:	f000 facc 	bl	2bb0 <NOROM_DDI32RegWrite>
    2618:	4b09      	ldr	r3, [pc, #36]	; (2640 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    261a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    261e:	601a      	str	r2, [r3, #0]
    2620:	b002      	add	sp, #8
    2622:	bd70      	pop	{r4, r5, r6, pc}
    2624:	400ca000 	andmi	sl, ip, r0
    2628:	100001a4 	andne	r0, r0, r4, lsr #3
    262c:	5000137c 	andpl	r1, r0, ip, ror r3
    2630:	400ca149 	andmi	sl, ip, r9, asr #2
    2634:	400ca14c 	andmi	sl, ip, ip, asr #2
    2638:	400ca141 	andmi	sl, ip, r1, asr #2
    263c:	400ca1dc 	ldrdmi	sl, [ip], -ip
    2640:	400ca040 	andmi	sl, ip, r0, asr #32

00002644 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    2644:	b530      	push	{r4, r5, lr}
    2646:	4b14      	ldr	r3, [pc, #80]	; (2698 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    2648:	681b      	ldr	r3, [r3, #0]
    264a:	2b00      	cmp	r3, #0
    264c:	d1fb      	bne.n	2646 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    264e:	4a13      	ldr	r2, [pc, #76]	; (269c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    2650:	4913      	ldr	r1, [pc, #76]	; (26a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    2652:	6813      	ldr	r3, [r2, #0]
    2654:	6809      	ldr	r1, [r1, #0]
    2656:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    265a:	f023 0307 	bic.w	r3, r3, #7
    265e:	f011 0f04 	tst.w	r1, #4
    2662:	4614      	mov	r4, r2
    2664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2668:	d003      	beq.n	2672 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    266a:	f043 0305 	orr.w	r3, r3, #5
    266e:	6013      	str	r3, [r2, #0]
    2670:	bd30      	pop	{r4, r5, pc}
    2672:	490c      	ldr	r1, [pc, #48]	; (26a4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    2674:	f043 0004 	orr.w	r0, r3, #4
    2678:	680d      	ldr	r5, [r1, #0]
    267a:	07ad      	lsls	r5, r5, #30
    267c:	d009      	beq.n	2692 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    267e:	f043 0307 	orr.w	r3, r3, #7
    2682:	6013      	str	r3, [r2, #0]
    2684:	680b      	ldr	r3, [r1, #0]
    2686:	f003 0303 	and.w	r3, r3, #3
    268a:	2b03      	cmp	r3, #3
    268c:	d1fa      	bne.n	2684 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    268e:	6020      	str	r0, [r4, #0]
    2690:	bd30      	pop	{r4, r5, pc}
    2692:	6010      	str	r0, [r2, #0]
    2694:	bd30      	pop	{r4, r5, pc}
    2696:	bf00      	nop
    2698:	4268000c 	rsbmi	r0, r8, #12
    269c:	40034004 	andmi	r4, r3, r4
    26a0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    26a4:	40034000 	andmi	r4, r3, r0

000026a8 <NOROM_SetupSetAonRtcSubSecInc>:
    26a8:	4b07      	ldr	r3, [pc, #28]	; (26c8 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    26aa:	b282      	uxth	r2, r0
    26ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
    26b0:	601a      	str	r2, [r3, #0]
    26b2:	6058      	str	r0, [r3, #4]
    26b4:	2201      	movs	r2, #1
    26b6:	3308      	adds	r3, #8
    26b8:	601a      	str	r2, [r3, #0]
    26ba:	4a04      	ldr	r2, [pc, #16]	; (26cc <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    26bc:	6812      	ldr	r2, [r2, #0]
    26be:	2a00      	cmp	r2, #0
    26c0:	d0fb      	beq.n	26ba <NOROM_SetupSetAonRtcSubSecInc+0x12>
    26c2:	2200      	movs	r2, #0
    26c4:	601a      	str	r2, [r3, #0]
    26c6:	4770      	bx	lr
    26c8:	400c603c 	andmi	r6, ip, ip, lsr r0
    26cc:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000026d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    26d0:	f3c0 4381 	ubfx	r3, r0, #18, #2
    26d4:	2b01      	cmp	r3, #1
    26d6:	b510      	push	{r4, lr}
    26d8:	4604      	mov	r4, r0
    26da:	d002      	beq.n	26e2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    26dc:	2b02      	cmp	r3, #2
    26de:	d02f      	beq.n	2740 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    26e0:	e02a      	b.n	2738 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    26e2:	4b42      	ldr	r3, [pc, #264]	; (27ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    26e4:	681b      	ldr	r3, [r3, #0]
    26e6:	039a      	lsls	r2, r3, #14
    26e8:	d426      	bmi.n	2738 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    26ea:	4a41      	ldr	r2, [pc, #260]	; (27f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    26ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    26f0:	6011      	str	r1, [r2, #0]
    26f2:	4940      	ldr	r1, [pc, #256]	; (27f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    26f4:	f3c3 3003 	ubfx	r0, r3, #12, #4
    26f8:	680a      	ldr	r2, [r1, #0]
    26fa:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    26fe:	4302      	orrs	r2, r0
    2700:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2704:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    2708:	600a      	str	r2, [r1, #0]
    270a:	f851 2c01 	ldr.w	r2, [r1, #-1]
    270e:	f3c3 2003 	ubfx	r0, r3, #8, #4
    2712:	f022 020f 	bic.w	r2, r2, #15
    2716:	4302      	orrs	r2, r0
    2718:	f851 0c01 	ldr.w	r0, [r1, #-1]
    271c:	f841 2c01 	str.w	r2, [r1, #-1]
    2720:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2724:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    2728:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    272c:	4313      	orrs	r3, r2
    272e:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2732:	f841 3c02 	str.w	r3, [r1, #-2]
    2736:	e003      	b.n	2740 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    2738:	4b2d      	ldr	r3, [pc, #180]	; (27f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    273a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    273e:	601a      	str	r2, [r3, #0]
    2740:	4b2d      	ldr	r3, [pc, #180]	; (27f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	071b      	lsls	r3, r3, #28
    2746:	bf5e      	ittt	pl
    2748:	4b2c      	ldrpl	r3, [pc, #176]	; (27fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    274a:	2240      	movpl	r2, #64	; 0x40
    274c:	601a      	strpl	r2, [r3, #0]
    274e:	4b2c      	ldr	r3, [pc, #176]	; (2800 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    2750:	f44f 7200 	mov.w	r2, #512	; 0x200
    2754:	601a      	str	r2, [r3, #0]
    2756:	f7ff febb 	bl	24d0 <NOROM_SetupGetTrimForXoscHfFastStart>
    275a:	4b2a      	ldr	r3, [pc, #168]	; (2804 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    275c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    2760:	b2c0      	uxtb	r0, r0
    2762:	7018      	strb	r0, [r3, #0]
    2764:	f3c4 5081 	ubfx	r0, r4, #22, #2
    2768:	2801      	cmp	r0, #1
    276a:	d00b      	beq.n	2784 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    276c:	d302      	bcc.n	2774 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    276e:	2802      	cmp	r0, #2
    2770:	d026      	beq.n	27c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    2772:	e028      	b.n	27c6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    2774:	2004      	movs	r0, #4
    2776:	2101      	movs	r1, #1
    2778:	f000 fa1e 	bl	2bb8 <NOROM_OSCClockSourceSet>
    277c:	4822      	ldr	r0, [pc, #136]	; (2808 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    277e:	f7ff ff93 	bl	26a8 <NOROM_SetupSetAonRtcSubSecInc>
    2782:	e024      	b.n	27ce <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2784:	f000 fa46 	bl	2c14 <NOROM_OSCClockSourceGet>
    2788:	4604      	mov	r4, r0
    278a:	2004      	movs	r0, #4
    278c:	4621      	mov	r1, r4
    278e:	f000 fa13 	bl	2bb8 <NOROM_OSCClockSourceSet>
    2792:	2004      	movs	r0, #4
    2794:	f000 fa3e 	bl	2c14 <NOROM_OSCClockSourceGet>
    2798:	42a0      	cmp	r0, r4
    279a:	d1fa      	bne.n	2792 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    279c:	4b1b      	ldr	r3, [pc, #108]	; (280c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    279e:	681c      	ldr	r4, [r3, #0]
    27a0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    27a4:	f7ff ff80 	bl	26a8 <NOROM_SetupSetAonRtcSubSecInc>
    27a8:	4b19      	ldr	r3, [pc, #100]	; (2810 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    27aa:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	0e20      	lsrs	r0, r4, #24
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	2107      	movs	r1, #7
    27b6:	4798      	blx	r3
    27b8:	4b0d      	ldr	r3, [pc, #52]	; (27f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    27ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    27be:	601a      	str	r2, [r3, #0]
    27c0:	2004      	movs	r0, #4
    27c2:	2103      	movs	r1, #3
    27c4:	e001      	b.n	27ca <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    27c6:	2004      	movs	r0, #4
    27c8:	2102      	movs	r1, #2
    27ca:	f000 f9f5 	bl	2bb8 <NOROM_OSCClockSourceSet>
    27ce:	4b11      	ldr	r3, [pc, #68]	; (2814 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    27d0:	4a11      	ldr	r2, [pc, #68]	; (2818 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    27d2:	681b      	ldr	r3, [r3, #0]
    27d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    27d8:	7013      	strb	r3, [r2, #0]
    27da:	f647 0218 	movw	r2, #30744	; 0x7818
    27de:	4b0f      	ldr	r3, [pc, #60]	; (281c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    27e0:	801a      	strh	r2, [r3, #0]
    27e2:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    27e6:	3b44      	subs	r3, #68	; 0x44
    27e8:	681b      	ldr	r3, [r3, #0]
    27ea:	bd10      	pop	{r4, pc}
    27ec:	5000138c 	andpl	r1, r0, ip, lsl #7
    27f0:	400ca040 	andmi	sl, ip, r0, asr #32
    27f4:	4008600c 	andmi	r6, r8, ip
    27f8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    27fc:	400ca068 	andmi	sl, ip, r8, rrx
    2800:	400ca080 	andmi	sl, ip, r0, lsl #1
    2804:	400ca108 	andmi	sl, ip, r8, lsl #2
    2808:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    280c:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2810:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2814:	5000136c 	andpl	r1, r0, ip, ror #6
    2818:	400cb00b 	andmi	fp, ip, fp
    281c:	400cb070 	andmi	fp, ip, r0, ror r0

00002820 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    2820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2824:	4b77      	ldr	r3, [pc, #476]	; (2a04 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    2826:	4607      	mov	r7, r0
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	4e77      	ldr	r6, [pc, #476]	; (2a08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    282c:	f013 0f02 	tst.w	r3, #2
    2830:	d004      	beq.n	283c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    2832:	2308      	movs	r3, #8
    2834:	71b3      	strb	r3, [r6, #6]
    2836:	4a75      	ldr	r2, [pc, #468]	; (2a0c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    2838:	4b75      	ldr	r3, [pc, #468]	; (2a10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    283a:	e0df      	b.n	29fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    283c:	f7ff fc1c 	bl	2078 <NOROM_AONBatMonTemperatureGetDegC>
    2840:	4b74      	ldr	r3, [pc, #464]	; (2a14 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    2842:	681d      	ldr	r5, [r3, #0]
    2844:	172a      	asrs	r2, r5, #28
    2846:	02ac      	lsls	r4, r5, #10
    2848:	f102 0101 	add.w	r1, r2, #1
    284c:	d408      	bmi.n	2860 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    284e:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    2852:	10db      	asrs	r3, r3, #3
    2854:	2b08      	cmp	r3, #8
    2856:	bfa8      	it	ge
    2858:	2308      	movge	r3, #8
    285a:	4299      	cmp	r1, r3
    285c:	bfb8      	it	lt
    285e:	4619      	movlt	r1, r3
    2860:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    2864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2868:	d10a      	bne.n	2880 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    286a:	4b6b      	ldr	r3, [pc, #428]	; (2a18 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    286c:	681a      	ldr	r2, [r3, #0]
    286e:	681b      	ldr	r3, [r3, #0]
    2870:	f3c2 2204 	ubfx	r2, r2, #8, #5
    2874:	2a15      	cmp	r2, #21
    2876:	bf88      	it	hi
    2878:	3a20      	subhi	r2, #32
    287a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    287e:	e00a      	b.n	2896 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2880:	4b66      	ldr	r3, [pc, #408]	; (2a1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2882:	681a      	ldr	r2, [r3, #0]
    2884:	4b66      	ldr	r3, [pc, #408]	; (2a20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    2886:	f3c2 6204 	ubfx	r2, r2, #24, #5
    288a:	681b      	ldr	r3, [r3, #0]
    288c:	2a15      	cmp	r2, #21
    288e:	bf88      	it	hi
    2890:	3a20      	subhi	r2, #32
    2892:	f3c3 4304 	ubfx	r3, r3, #16, #5
    2896:	2b15      	cmp	r3, #21
    2898:	440a      	add	r2, r1
    289a:	bf88      	it	hi
    289c:	3b20      	subhi	r3, #32
    289e:	2a15      	cmp	r2, #21
    28a0:	dc05      	bgt.n	28ae <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    28a2:	f06f 0109 	mvn.w	r1, #9
    28a6:	428a      	cmp	r2, r1
    28a8:	bfb8      	it	lt
    28aa:	460a      	movlt	r2, r1
    28ac:	e000      	b.n	28b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    28ae:	2215      	movs	r2, #21
    28b0:	4c5c      	ldr	r4, [pc, #368]	; (2a24 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    28b2:	f002 011f 	and.w	r1, r2, #31
    28b6:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    28ba:	8021      	strh	r1, [r4, #0]
    28bc:	495a      	ldr	r1, [pc, #360]	; (2a28 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    28be:	6809      	ldr	r1, [r1, #0]
    28c0:	f011 0403 	ands.w	r4, r1, #3
    28c4:	bf18      	it	ne
    28c6:	2401      	movne	r4, #1
    28c8:	0749      	lsls	r1, r1, #29
    28ca:	bf48      	it	mi
    28cc:	f044 0402 	orrmi.w	r4, r4, #2
    28d0:	b10f      	cbz	r7, 28d6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    28d2:	f044 0404 	orr.w	r4, r4, #4
    28d6:	f996 1007 	ldrsb.w	r1, [r6, #7]
    28da:	1a41      	subs	r1, r0, r1
    28dc:	2904      	cmp	r1, #4
    28de:	dc03      	bgt.n	28e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    28e0:	4949      	ldr	r1, [pc, #292]	; (2a08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    28e2:	7989      	ldrb	r1, [r1, #6]
    28e4:	428c      	cmp	r4, r1
    28e6:	d06f      	beq.n	29c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    28e8:	f1b0 010f 	subs.w	r1, r0, #15
    28ec:	9101      	str	r1, [sp, #4]
    28ee:	f004 0101 	and.w	r1, r4, #1
    28f2:	f8df a144 	ldr.w	sl, [pc, #324]	; 2a38 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    28f6:	f004 0904 	and.w	r9, r4, #4
    28fa:	f004 0802 	and.w	r8, r4, #2
    28fe:	460f      	mov	r7, r1
    2900:	d42a      	bmi.n	2958 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2902:	9901      	ldr	r1, [sp, #4]
    2904:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    2908:	ea4f 2e21 	mov.w	lr, r1, asr #8
    290c:	f1be 0f07 	cmp.w	lr, #7
    2910:	9101      	str	r1, [sp, #4]
    2912:	d801      	bhi.n	2918 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2914:	d104      	bne.n	2920 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    2916:	e001      	b.n	291c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    2918:	f04f 0e07 	mov.w	lr, #7
    291c:	2106      	movs	r1, #6
    291e:	e000      	b.n	2922 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    2920:	4671      	mov	r1, lr
    2922:	f8df b118 	ldr.w	fp, [pc, #280]	; 2a3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    2926:	3101      	adds	r1, #1
    2928:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    292c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    2930:	ebc1 0c0c 	rsb	ip, r1, ip
    2934:	fa5f f18c 	uxtb.w	r1, ip
    2938:	f1b9 0f00 	cmp.w	r9, #0
    293c:	d002      	beq.n	2944 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    293e:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    2942:	4459      	add	r1, fp
    2944:	f1b8 0f00 	cmp.w	r8, #0
    2948:	d002      	beq.n	2950 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    294a:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    294e:	4459      	add	r1, fp
    2950:	b12f      	cbz	r7, 295e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2952:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    2956:	e002      	b.n	295e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2958:	f04f 0e00 	mov.w	lr, #0
    295c:	4671      	mov	r1, lr
    295e:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    2962:	fa5f fc8a 	uxtb.w	ip, sl
    2966:	f1b9 0f00 	cmp.w	r9, #0
    296a:	d002      	beq.n	2972 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    296c:	f3ca 2907 	ubfx	r9, sl, #8, #8
    2970:	44cc      	add	ip, r9
    2972:	f1b8 0f00 	cmp.w	r8, #0
    2976:	d002      	beq.n	297e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    2978:	f3ca 4807 	ubfx	r8, sl, #16, #8
    297c:	44c4      	add	ip, r8
    297e:	b10f      	cbz	r7, 2984 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2980:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2984:	1a9b      	subs	r3, r3, r2
    2986:	2b01      	cmp	r3, #1
    2988:	bfb8      	it	lt
    298a:	2301      	movlt	r3, #1
    298c:	9f01      	ldr	r7, [sp, #4]
    298e:	2234      	movs	r2, #52	; 0x34
    2990:	4353      	muls	r3, r2
    2992:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    2996:	4379      	muls	r1, r7
    2998:	b2ed      	uxtb	r5, r5
    299a:	436b      	muls	r3, r5
    299c:	3180      	adds	r1, #128	; 0x80
    299e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    29a2:	fbb3 f1f1 	udiv	r1, r3, r1
    29a6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    29aa:	4561      	cmp	r1, ip
    29ac:	bf28      	it	cs
    29ae:	4661      	movcs	r1, ip
    29b0:	287f      	cmp	r0, #127	; 0x7f
    29b2:	80b1      	strh	r1, [r6, #4]
    29b4:	dc05      	bgt.n	29c2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    29b6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    29ba:	4298      	cmp	r0, r3
    29bc:	bfb8      	it	lt
    29be:	4618      	movlt	r0, r3
    29c0:	e000      	b.n	29c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    29c2:	207f      	movs	r0, #127	; 0x7f
    29c4:	71f0      	strb	r0, [r6, #7]
    29c6:	71b4      	strb	r4, [r6, #6]
    29c8:	4b18      	ldr	r3, [pc, #96]	; (2a2c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    29ca:	2100      	movs	r1, #0
    29cc:	681b      	ldr	r3, [r3, #0]
    29ce:	6033      	str	r3, [r6, #0]
    29d0:	88b3      	ldrh	r3, [r6, #4]
    29d2:	2b1e      	cmp	r3, #30
    29d4:	bf9e      	ittt	ls
    29d6:	4a0c      	ldrls	r2, [pc, #48]	; (2a08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    29d8:	231f      	movls	r3, #31
    29da:	8093      	strhls	r3, [r2, #4]
    29dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    29e0:	d302      	bcc.n	29e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    29e2:	085b      	lsrs	r3, r3, #1
    29e4:	3101      	adds	r1, #1
    29e6:	e7f9      	b.n	29dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    29e8:	4a11      	ldr	r2, [pc, #68]	; (2a30 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    29ea:	3b0f      	subs	r3, #15
    29ec:	430a      	orrs	r2, r1
    29ee:	091b      	lsrs	r3, r3, #4
    29f0:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    29f4:	4a06      	ldr	r2, [pc, #24]	; (2a10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    29f6:	6013      	str	r3, [r2, #0]
    29f8:	4b0e      	ldr	r3, [pc, #56]	; (2a34 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    29fa:	2200      	movs	r2, #0
    29fc:	601a      	str	r2, [r3, #0]
    29fe:	b003      	add	sp, #12
    2a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a04:	40090000 	andmi	r0, r9, r0
    2a08:	20000078 	andcs	r0, r0, r8, ror r0
    2a0c:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2a10:	40091030 	andmi	r1, r9, r0, lsr r0
    2a14:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2a18:	50001388 	andpl	r1, r0, r8, lsl #7
    2a1c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2a20:	5000113c 	andpl	r1, r0, ip, lsr r1
    2a24:	4008626e 	andmi	r6, r8, lr, ror #4
    2a28:	40082224 	andmi	r2, r8, r4, lsr #4
    2a2c:	40092008 	andmi	r2, r9, r8
    2a30:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2a34:	40091034 	andmi	r1, r9, r4, lsr r0
    2a38:	5000139c 	mulpl	r0, ip, r3
    2a3c:	50001398 	mulpl	r0, r8, r3

00002a40 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2a40:	b510      	push	{r4, lr}
    2a42:	4b14      	ldr	r3, [pc, #80]	; (2a94 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2a44:	681c      	ldr	r4, [r3, #0]
    2a46:	b2a4      	uxth	r4, r4
    2a48:	b314      	cbz	r4, 2a90 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    2a4a:	f7ff fb15 	bl	2078 <NOROM_AONBatMonTemperatureGetDegC>
    2a4e:	4b12      	ldr	r3, [pc, #72]	; (2a98 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2a50:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2a54:	4290      	cmp	r0, r2
    2a56:	da05      	bge.n	2a64 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    2a58:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2a5c:	4290      	cmp	r0, r2
    2a5e:	bfb8      	it	lt
    2a60:	4610      	movlt	r0, r2
    2a62:	71d8      	strb	r0, [r3, #7]
    2a64:	889a      	ldrh	r2, [r3, #4]
    2a66:	490c      	ldr	r1, [pc, #48]	; (2a98 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2a68:	4294      	cmp	r4, r2
    2a6a:	d310      	bcc.n	2a8e <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2a6c:	4b0b      	ldr	r3, [pc, #44]	; (2a9c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    2a6e:	6808      	ldr	r0, [r1, #0]
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1aa4      	subs	r4, r4, r2
    2a74:	3302      	adds	r3, #2
    2a76:	1a1b      	subs	r3, r3, r0
    2a78:	2b1f      	cmp	r3, #31
    2a7a:	bf28      	it	cs
    2a7c:	231f      	movcs	r3, #31
    2a7e:	085b      	lsrs	r3, r3, #1
    2a80:	40dc      	lsrs	r4, r3
    2a82:	4414      	add	r4, r2
    2a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2a88:	4294      	cmp	r4, r2
    2a8a:	bf28      	it	cs
    2a8c:	4614      	movcs	r4, r2
    2a8e:	808c      	strh	r4, [r1, #4]
    2a90:	bd10      	pop	{r4, pc}
    2a92:	bf00      	nop
    2a94:	40091034 	andmi	r1, r9, r4, lsr r0
    2a98:	20000078 	andcs	r0, r0, r8, ror r0
    2a9c:	40092008 	andmi	r2, r9, r8

00002aa0 <NOROM_SysCtrlResetSourceGet>:
    2aa0:	4b04      	ldr	r3, [pc, #16]	; (2ab4 <NOROM_SysCtrlResetSourceGet+0x14>)
    2aa2:	681a      	ldr	r2, [r3, #0]
    2aa4:	0412      	lsls	r2, r2, #16
    2aa6:	bf5a      	itte	pl
    2aa8:	6818      	ldrpl	r0, [r3, #0]
    2aaa:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    2aae:	2008      	movmi	r0, #8
    2ab0:	4770      	bx	lr
    2ab2:	bf00      	nop
    2ab4:	40090004 	andmi	r0, r9, r4

00002ab8 <NOROM_ChipInfo_GetChipFamily>:
    2ab8:	f64b 129a 	movw	r2, #47514	; 0xb99a
    2abc:	4b10      	ldr	r3, [pc, #64]	; (2b00 <NOROM_ChipInfo_GetChipFamily+0x48>)
    2abe:	6818      	ldr	r0, [r3, #0]
    2ac0:	f3c0 300f 	ubfx	r0, r0, #12, #16
    2ac4:	4290      	cmp	r0, r2
    2ac6:	d106      	bne.n	2ad6 <NOROM_ChipInfo_GetChipFamily+0x1e>
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	0f1b      	lsrs	r3, r3, #28
    2acc:	2b0b      	cmp	r3, #11
    2ace:	bf0c      	ite	eq
    2ad0:	2004      	moveq	r0, #4
    2ad2:	2000      	movne	r0, #0
    2ad4:	e011      	b.n	2afa <NOROM_ChipInfo_GetChipFamily+0x42>
    2ad6:	f64b 13be 	movw	r3, #47550	; 0xb9be
    2ada:	4298      	cmp	r0, r3
    2adc:	d00a      	beq.n	2af4 <NOROM_ChipInfo_GetChipFamily+0x3c>
    2ade:	f64b 3341 	movw	r3, #47937	; 0xbb41
    2ae2:	4298      	cmp	r0, r3
    2ae4:	d008      	beq.n	2af8 <NOROM_ChipInfo_GetChipFamily+0x40>
    2ae6:	f64b 3320 	movw	r3, #47904	; 0xbb20
    2aea:	4298      	cmp	r0, r3
    2aec:	bf14      	ite	ne
    2aee:	20ff      	movne	r0, #255	; 0xff
    2af0:	2002      	moveq	r0, #2
    2af2:	e002      	b.n	2afa <NOROM_ChipInfo_GetChipFamily+0x42>
    2af4:	2001      	movs	r0, #1
    2af6:	e000      	b.n	2afa <NOROM_ChipInfo_GetChipFamily+0x42>
    2af8:	2003      	movs	r0, #3
    2afa:	b240      	sxtb	r0, r0
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop
    2b00:	50001318 	andpl	r1, r0, r8, lsl r3

00002b04 <NOROM_ChipInfo_GetHwRevision>:
    2b04:	b538      	push	{r3, r4, r5, lr}
    2b06:	4b19      	ldr	r3, [pc, #100]	; (2b6c <NOROM_ChipInfo_GetHwRevision+0x68>)
    2b08:	681d      	ldr	r5, [r3, #0]
    2b0a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2b0e:	6818      	ldr	r0, [r3, #0]
    2b10:	0f2d      	lsrs	r5, r5, #28
    2b12:	b2c4      	uxtb	r4, r0
    2b14:	2c80      	cmp	r4, #128	; 0x80
    2b16:	bf28      	it	cs
    2b18:	2400      	movcs	r4, #0
    2b1a:	f7ff ffcd 	bl	2ab8 <NOROM_ChipInfo_GetChipFamily>
    2b1e:	2804      	cmp	r0, #4
    2b20:	d821      	bhi.n	2b66 <NOROM_ChipInfo_GetHwRevision+0x62>
    2b22:	e8df f000 	tbb	[pc, r0]
    2b26:	1b1b1303 	blne	6c773a <__ccfg+0x6a7792>
    2b2a:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2b2e:	2d07      	cmp	r5, #7
    2b30:	d819      	bhi.n	2b66 <NOROM_ChipInfo_GetHwRevision+0x62>
    2b32:	e8df f005 	tbb	[pc, r5]
    2b36:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    2b3a:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2b3e:	2014      	movs	r0, #20
    2b40:	e012      	b.n	2b68 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b42:	2015      	movs	r0, #21
    2b44:	e010      	b.n	2b68 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b46:	f104 0016 	add.w	r0, r4, #22
    2b4a:	e00a      	b.n	2b62 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2b4c:	b125      	cbz	r5, 2b58 <NOROM_ChipInfo_GetHwRevision+0x54>
    2b4e:	2d02      	cmp	r5, #2
    2b50:	d109      	bne.n	2b66 <NOROM_ChipInfo_GetHwRevision+0x62>
    2b52:	f104 0014 	add.w	r0, r4, #20
    2b56:	e004      	b.n	2b62 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2b58:	200a      	movs	r0, #10
    2b5a:	e005      	b.n	2b68 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b5c:	b91d      	cbnz	r5, 2b66 <NOROM_ChipInfo_GetHwRevision+0x62>
    2b5e:	f104 000a 	add.w	r0, r4, #10
    2b62:	b2c0      	uxtb	r0, r0
    2b64:	e000      	b.n	2b68 <NOROM_ChipInfo_GetHwRevision+0x64>
    2b66:	20ff      	movs	r0, #255	; 0xff
    2b68:	b240      	sxtb	r0, r0
    2b6a:	bd38      	pop	{r3, r4, r5, pc}
    2b6c:	50001318 	andpl	r1, r0, r8, lsl r3

00002b70 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2b70:	b508      	push	{r3, lr}
    2b72:	f7ff ffa1 	bl	2ab8 <NOROM_ChipInfo_GetChipFamily>
    2b76:	2801      	cmp	r0, #1
    2b78:	d103      	bne.n	2b82 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2b7a:	f7ff ffc3 	bl	2b04 <NOROM_ChipInfo_GetHwRevision>
    2b7e:	2813      	cmp	r0, #19
    2b80:	dc00      	bgt.n	2b84 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2b82:	e7fe      	b.n	2b82 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2b84:	bd08      	pop	{r3, pc}
	...

00002b88 <AuxAdiDdiSafeWrite.constprop.1>:
    2b88:	b538      	push	{r3, r4, r5, lr}
    2b8a:	4604      	mov	r4, r0
    2b8c:	460d      	mov	r5, r1
    2b8e:	f7ff fa97 	bl	20c0 <NOROM_CPUcpsid>
    2b92:	4b06      	ldr	r3, [pc, #24]	; (2bac <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2b94:	681a      	ldr	r2, [r3, #0]
    2b96:	2a00      	cmp	r2, #0
    2b98:	d0fb      	beq.n	2b92 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    2b9a:	2201      	movs	r2, #1
    2b9c:	6025      	str	r5, [r4, #0]
    2b9e:	601a      	str	r2, [r3, #0]
    2ba0:	b918      	cbnz	r0, 2baa <AuxAdiDdiSafeWrite.constprop.1+0x22>
    2ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2ba6:	f7ff ba8f 	b.w	20c8 <NOROM_CPUcpsie>
    2baa:	bd38      	pop	{r3, r4, r5, pc}
    2bac:	400c8000 	andmi	r8, ip, r0

00002bb0 <NOROM_DDI32RegWrite>:
    2bb0:	4408      	add	r0, r1
    2bb2:	4611      	mov	r1, r2
    2bb4:	f7ff bfe8 	b.w	2b88 <AuxAdiDdiSafeWrite.constprop.1>

00002bb8 <NOROM_OSCClockSourceSet>:
    2bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2bba:	460c      	mov	r4, r1
    2bbc:	07c1      	lsls	r1, r0, #31
    2bbe:	4605      	mov	r5, r0
    2bc0:	d509      	bpl.n	2bd6 <NOROM_OSCClockSourceSet+0x1e>
    2bc2:	4b12      	ldr	r3, [pc, #72]	; (2c0c <NOROM_OSCClockSourceSet+0x54>)
    2bc4:	b2a2      	uxth	r2, r4
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	2100      	movs	r1, #0
    2bca:	9200      	str	r2, [sp, #0]
    2bcc:	685e      	ldr	r6, [r3, #4]
    2bce:	4810      	ldr	r0, [pc, #64]	; (2c10 <NOROM_OSCClockSourceSet+0x58>)
    2bd0:	2201      	movs	r2, #1
    2bd2:	460b      	mov	r3, r1
    2bd4:	47b0      	blx	r6
    2bd6:	07aa      	lsls	r2, r5, #30
    2bd8:	d509      	bpl.n	2bee <NOROM_OSCClockSourceSet+0x36>
    2bda:	4b0c      	ldr	r3, [pc, #48]	; (2c0c <NOROM_OSCClockSourceSet+0x54>)
    2bdc:	b2a2      	uxth	r2, r4
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	9200      	str	r2, [sp, #0]
    2be2:	685e      	ldr	r6, [r3, #4]
    2be4:	480a      	ldr	r0, [pc, #40]	; (2c10 <NOROM_OSCClockSourceSet+0x58>)
    2be6:	2100      	movs	r1, #0
    2be8:	2202      	movs	r2, #2
    2bea:	2301      	movs	r3, #1
    2bec:	47b0      	blx	r6
    2bee:	076b      	lsls	r3, r5, #29
    2bf0:	d509      	bpl.n	2c06 <NOROM_OSCClockSourceSet+0x4e>
    2bf2:	4b06      	ldr	r3, [pc, #24]	; (2c0c <NOROM_OSCClockSourceSet+0x54>)
    2bf4:	b2a4      	uxth	r4, r4
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	9400      	str	r4, [sp, #0]
    2bfa:	685c      	ldr	r4, [r3, #4]
    2bfc:	4804      	ldr	r0, [pc, #16]	; (2c10 <NOROM_OSCClockSourceSet+0x58>)
    2bfe:	2100      	movs	r1, #0
    2c00:	220c      	movs	r2, #12
    2c02:	2302      	movs	r3, #2
    2c04:	47a0      	blx	r4
    2c06:	b002      	add	sp, #8
    2c08:	bd70      	pop	{r4, r5, r6, pc}
    2c0a:	bf00      	nop
    2c0c:	100001a4 	andne	r0, r0, r4, lsr #3
    2c10:	400ca000 	andmi	sl, ip, r0

00002c14 <NOROM_OSCClockSourceGet>:
    2c14:	b510      	push	{r4, lr}
    2c16:	4b08      	ldr	r3, [pc, #32]	; (2c38 <NOROM_OSCClockSourceGet+0x24>)
    2c18:	2804      	cmp	r0, #4
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	f04f 0134 	mov.w	r1, #52	; 0x34
    2c20:	68dc      	ldr	r4, [r3, #12]
    2c22:	bf07      	ittee	eq
    2c24:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2c28:	231d      	moveq	r3, #29
    2c2a:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2c2e:	231c      	movne	r3, #28
    2c30:	4802      	ldr	r0, [pc, #8]	; (2c3c <NOROM_OSCClockSourceGet+0x28>)
    2c32:	47a0      	blx	r4
    2c34:	bd10      	pop	{r4, pc}
    2c36:	bf00      	nop
    2c38:	100001a4 	andne	r0, r0, r4, lsr #3
    2c3c:	400ca000 	andmi	sl, ip, r0
    2c40:	00206325 	eoreq	r6, r0, r5, lsr #6
    2c44:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2c48:	6f792072 	svcvs	0x00792072
    2c4c:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2c50:	3a656d61 	bcc	195e1dc <__ccfg+0x193e234>
    2c54:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2c58:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 2ab0 <NOROM_SysCtrlResetSourceGet+0x10>
    2c5c:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2c60:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2c64:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2c68:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2c6c:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2c70:	20656874 	rsbcs	r6, r5, r4, ror r8
    2c74:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2c78:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2c7c:	706f2067 	rsbvc	r2, pc, r7, rrx
    2c80:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2c84:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2c88:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2c8c:	6a642941 	bvs	190d198 <__ccfg+0x18ed1f0>
    2c90:	20747375 	rsbscs	r7, r4, r5, ror r3
    2c94:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2c98:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2c9c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2ca0:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2ca4:	0a747261 	beq	1d1f630 <__ccfg+0x1cff688>
    2ca8:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2cac:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2cb0:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2cb4:	6f697461 	svcvs	0x00697461
    2cb8:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2cbc:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2cc0:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2cc4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2cc8:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2ccc:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2cd0:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2cd4:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2cd8:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2cdc:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2ce0:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2ce4:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2ce8:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2cec:	20726574 	rsbscs	r6, r2, r4, ror r5
    2cf0:	20656874 	rsbcs	r6, r5, r4, ror r8
    2cf4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2cf8:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2cfc:	52282073 	eorpl	r2, r8, #115	; 0x73
    2d00:	4f206465 	svcmi	0x00206465
    2d04:	4f202c4e 	svcmi	0x00202c4e
    2d08:	202c4646 	eorcs	r4, ip, r6, asr #12
    2d0c:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2d10:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2d14:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2d18:	203a2946 	eorscs	r2, sl, r6, asr #18
    2d1c:	65522800 	ldrbvs	r2, [r2, #-2048]	; 0xfffff800
    2d20:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2d24:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2d28:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2d2c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2d30:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2d34:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2d38:	6e692029 	cdpvs	0, 6, cr2, cr9, cr9, {1}
    2d3c:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2d40:	3a736c61 	bcc	1cddecc <__ccfg+0x1cbdf24>
    2d44:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
    2d48:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2d4c:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2d50:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2d54:	000d0a29 	andeq	r0, sp, r9, lsr #20
    2d58:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    2d5c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    2d60:	65727028 	ldrbvs	r7, [r2, #-40]!	; 0xffffffd8
    2d64:	53207373 			; <UNDEFINED> instruction: 0x53207373
    2d68:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    2d6c:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2d70:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2d74:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    2d78:	203a5252 	eorscs	r5, sl, r2, asr r2
    2d7c:	202c7825 	eorcs	r7, ip, r5, lsr #16
    2d80:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    2d84:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    2d88:	50006961 	andpl	r6, r0, r1, ror #18
    2d8c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2d90:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    2d94:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    2d98:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    2d9c:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    2da0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2da4:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2da8:	434e5541 	movtmi	r5, #58689	; 0xe541
    2dac:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    2db0:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    2db4:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    2db8:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    2dbc:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 2d44 <NOROM_OSCClockSourceGet+0x130>
    2dc0:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2dc4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2dc8:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    2dcc:	30303220 	eorscc	r3, r0, r0, lsr #4
    2dd0:	30322d32 	eorscc	r2, r2, r2, lsr sp
    2dd4:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    2dd8:	6f746665 	svcvs	0x00746665
    2ddc:	20726576 	rsbscs	r6, r2, r6, ror r5
    2de0:	3a4d4152 	bcc	1353330 <__ccfg+0x1333388>
    2de4:	20642520 	rsbcs	r2, r4, r0, lsr #10
    2de8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2dec:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2df0:	00000000 	andeq	r0, r0, r0

00002df4 <port_confs>:
    2df4:	00306080 	eorseq	r6, r0, r0, lsl #1
    2df8:	00386080 	eorseq	r6, r8, r0, lsl #1
    2dfc:	00186010 	andseq	r6, r8, r0, lsl r0
    2e00:	2010400f 	andscs	r4, r0, pc
    2e04:	30694000 	rsbcc	r4, r9, r0
    2e08:	30714000 	rsbscc	r4, r1, r0
    2e0c:	00b86008 	adcseq	r6, r8, r8
    2e10:	60c94000 	sbcvs	r4, r9, r0
    2e14:	60d14000 	sbcsvs	r4, r1, r0
    2e18:	60d94000 	sbcsvs	r4, r9, r0
    2e1c:	60e14000 	rscvs	r4, r1, r0
    2e20:	00096380 	andeq	r6, r9, r0, lsl #7
    2e24:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2e28:	20402000 	subcs	r2, r0, r0
    2e2c:	00486080 	subeq	r6, r8, r0, lsl #1
    2e30:	00506080 	subseq	r6, r0, r0, lsl #1
    2e34:	00a06000 	adceq	r6, r0, r0
    2e38:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2e3c:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2e40:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2e44:	6f690076 	svcvs	0x00690076
    2e48:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2e4c:	616d0031 	cmnvs	sp, r1, lsr r0
    2e50:	6b00676c 	blvs	1cc08 <_etext+0x19d94>
    2e54:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2e58:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002e5c <__pi_hex_enc_table>:
    2e5c:	33323130 	teqcc	r2, #48, 2
    2e60:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2e64:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2e68:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002e6c <__input_pins>:
    2e6c:	9c9b9a99 	vldmials	fp, {s18-s170}

00002e70 <__button_list>:
    2e70:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .data:

20000000 <greenCharacter>:
char greenCharacter = 'G';
20000000:	00000047 	andeq	r0, r0, r7, asr #32

20000004 <greenLed>:
int greenLed = 1;
20000004:	00000001 	andeq	r0, r0, r1

20000008 <redCharacter>:
char redCharacter = 'R';
20000008:	Address 0x0000000020000008 is out of bounds.


Disassembly of section .bss:

2000000c <On>:
2000000c:	00000000 	andeq	r0, r0, r0

20000010 <blinkerCode.5771>:
20000010:	00000000 	andeq	r0, r0, r0

20000014 <blinkerRunning.5772>:
	...

20000015 <ch.5748>:
	...

20000016 <displayCycle>:
	...

20000018 <greenOff>:
	...

2000001a <greenOn>:
	...

2000001c <led.5747>:
2000001c:	00000000 	andeq	r0, r0, r0

20000020 <ledFlag.5751>:
20000020:	00000000 	andeq	r0, r0, r0

20000024 <offTime.5750>:
	...

20000026 <onTime.5749>:
	...

20000028 <redLed>:
int redLed = 0;
20000028:	00000000 	andeq	r0, r0, r0

2000002c <redOff>:
	...

2000002e <redOn>:
	...

20000030 <username.5770>:
	...

20000044 <setdel>:
	...

20000046 <urates>:
	...

20000048 <__PCB>:
20000048:	00000000 	andeq	r0, r0, r0

2000004c <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
2000004c:	00000000 	andeq	r0, r0, r0

20000050 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000050:	00000000 	andeq	r0, r0, r0

20000054 <mevent>:
20000054:	00000000 	andeq	r0, r0, r0

20000058 <mnfree>:
20000058:	00000000 	andeq	r0, r0, r0

2000005c <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
2000005c:	00000000 	andeq	r0, r0, r0

20000060 <dopen>:
	...

20000061 <dstat>:
20000061:	 	andeq	r0, r0, r0

20000064 <len.5699>:
20000064:	00000000 	andeq	r0, r0, r0

20000068 <ptr.5698>:
20000068:	00000000 	andeq	r0, r0, r0

2000006c <__inpline>:
char *__inpline = NULL;
2000006c:	00000000 	andeq	r0, r0, r0

20000070 <len.5700>:
20000070:	00000000 	andeq	r0, r0, r0

20000074 <ptr.5699>:
20000074:	00000000 	andeq	r0, r0, r0

20000078 <powerQualGlobals>:
	...

20000080 <__pi_uart>:
	...

20000088 <system_event_count>:
20000088:	00000000 	andeq	r0, r0, r0

2000008c <entropy>:
2000008c:	00000000 	andeq	r0, r0, r0

20000090 <__pi_mintk>:
	...

20000092 <__pi_old>:
	...

20000094 <__pi_systat>:
	...

2000009c <__pi_new>:
2000009c:	00000000 	andeq	r0, r0, r0

200000a0 <__pi_utims>:
	...

200000b0 <__pi_curr>:
200000b0:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000b4 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000823 	andeq	r0, r0, r3, lsr #16
       4:	00000003 	andeq	r0, r0, r3
    return (time * SECOND)/1000;
       8:	01040000 	mrseq	r0, (UNDEF: 4)
}
       c:	00000172 	andeq	r0, r0, r2, ror r1
      10:	0002e00c 	andeq	lr, r2, ip
      14:	0000d300 	andeq	sp, r0, r0, lsl #6
      18:	0000d000 	andeq	sp, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
      2c:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
      30:	02000003 	andeq	r0, r0, #3
      34:	00b00504 	adcseq	r0, r0, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000ab05 	andeq	sl, r0, r5, lsl #22
}
      40:	223c0300 	eorscs	r0, ip, #0, 6
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
      54:	00212a03 	eoreq	r2, r1, r3, lsl #20
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	73070202 	movwvc	r0, #29186	; 0x7202
      64:	03000002 	movweq	r0, #2
      68:	000017f3 	strdeq	r1, [r0], -r3
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00850704 	addeq	r0, r5, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00008007 	andeq	r8, r0, r7
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	8a070402 	bhi	1c1098 <__ccfg+0x1a10f0>
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	0000041c 	andeq	r0, r0, ip, lsl r4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	00001600 	andeq	r1, r0, r0, lsl #12
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013f803 	andseq	pc, r3, r3, lsl #16
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	16510300 	ldrbne	r0, [r1], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	a6030000 	strge	r0, [r3], -r0
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	000002c1 	andeq	r0, r0, r1, asr #5
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	000000a4 	andeq	r0, r0, r4, lsr #1
			curr += 0x1000;
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (from >= EE_SIZE || upto < from)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	0000028f 	andeq	r0, r0, pc, lsl #5
			upto = EE_SIZE - 1;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
     114:	0000042b 	andeq	r0, r0, fp, lsr #8
     118:	ac033704 	stcge	7, cr3, [r3], {4}
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
     124:	00000424 	andeq	r0, r0, r4, lsr #8
            ch = redCharacter;
     128:	ac033804 	stcge	8, cr3, [r3], {4}
            onTime = redOn;
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
            offTime = redOff;
     130:	09000004 	stmdbeq	r0, {r2}
        ledFlag = 1 - ledFlag;
     134:	00000415 	andeq	r0, r0, r5, lsl r4
            offTime = greenOff;
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
    return (time * SECOND)/1000;
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
     140:	00004c09 	andeq	r4, r0, r9, lsl #24
     144:	033c0400 	teqeq	ip, #0, 8
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
     14c:	00790902 	rsbseq	r0, r9, r2, lsl #18
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
        if (displayCycle)
     158:	61090300 	mrsvs	r0, (UNDEF: 57)
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	04000001 	streq	r0, [r0], #-1
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
        if(onTime > 0){
     164:	00040000 	andeq	r0, r4, r0
     168:	00045403 	andeq	r5, r4, r3, lsl #8
            if(On)
     16c:	03410400 	movteq	r0, #5120	; 0x1400
     170:	000000da 	ldrdeq	r0, [r0], -sl
     174:	00016806 	andeq	r6, r1, r6, lsl #16
                leds(led,0);
     178:	02b50a00 	adcseq	r0, r5, #0, 20
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
     188:	00000321 	andeq	r0, r0, r1, lsr #6
            delay(onTime, OFF_PERIOD);
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
            delay(offTime, Check_PERIOD);
     190:	01000001 	tsteq	r0, r1
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
            led = greenLed;
     198:	02000001 	andeq	r0, r0, #1
            ch = greenCharacter;
     19c:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
            onTime = greenOn;
     1a4:	0a000001 	beq	1b0 <_Min_Stack_Size+0xb0>
            offTime = greenOff;
     1a8:	0000032f 	andeq	r0, r0, pc, lsr #6
                leds(led,0);
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
     1b0:	01000001 	tsteq	r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
     1bc:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
     1c0:	05000002 	streq	r0, [r0, #-2]
            proceed OFF_PERIOD;
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
        when(&On, Check_PERIOD);
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1cc:	0000062d 	andeq	r0, r0, sp, lsr #12
        release;
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
        leds(led,0);
     1d4:	04000000 	streq	r0, [r0], #-0
     1d8:	00049c09 	andeq	r9, r4, r9, lsl #24
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
     1e0:	000000b8 	strheq	r0, [r0], -r8
     1e4:	32030006 	andcc	r0, r3, #6
}
     1e8:	05000004 	streq	r0, [r0, #-4]
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
     1f0:	e60c0000 	str	r0, [ip], -r0
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
     1fc:	00420a00 	subeq	r0, r2, r0, lsl #20
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
     208:	0c010100 	stfeqs	f0, [r1], {-0}
     20c:	0000009b 	muleq	r0, fp, r0
     210:	0000021b 	andeq	r0, r0, fp, lsl r2
     214:	0000880e 	andeq	r8, r0, lr, lsl #16
     218:	07000300 	streq	r0, [r0, -r0, lsl #6]
     21c:	09910601 	ldmibeq	r1, {r0, r9, sl}
     220:	00000245 	andeq	r0, r0, r5, asr #4
     224:	00048f08 	andeq	r8, r4, r8, lsl #30
     228:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
     230:	00010701 	andeq	r0, r1, r1, lsl #14
     234:	00003d08 	andeq	r3, r0, r8, lsl #26
     238:	03940600 	orrseq	r0, r4, #0, 12
    word numbers[] = {0, 0, 0, 0};
     23c:	000000ac 	andeq	r0, r0, ip, lsr #1
    int numbersIndex = 0;
     240:	00000101 	andeq	r0, r0, r1, lsl #2
    word numbers[] = {0, 0, 0, 0};
     244:	02860300 	addeq	r0, r6, #0, 6
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	96060000 	strls	r0, [r6], -r0
        if(settingsInput[i] == ' ') {
     24c:	00021b03 	andeq	r1, r2, r3, lsl #22
     250:	02450500 	subeq	r0, r5, #0, 10
            numbers[numbersIndex] = number;
     254:	510c0000 	mrspl	r0, (UNDEF: 12)
     258:	61000002 	tstvs	r0, r2
            number = 0;
     25c:	0d000002 	stceq	0, cr0, [r0, #-8]
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	02560500 	subseq	r0, r6, #0, 10
    redOn = numbers[0];
     264:	eb0a0000 	bl	28026c <__ccfg+0x2602c4>
     268:	06000002 	streq	r0, [r0], -r2
    redOff = numbers[1];
     26c:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
     270:	01010000 	mrseq	r0, (UNDEF: 1)
    greenOn = numbers[2];
     274:	0000a70c 	andeq	sl, r0, ip, lsl #14
     278:	00027f00 	andeq	r7, r2, r0, lsl #30
    greenOff = numbers[3];
     27c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     280:	00000274 	andeq	r0, r0, r4, ror r2
}
     284:	0003a70a 	andeq	sl, r3, sl, lsl #14
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	13060700 	movwne	r0, #26368	; 0x6700
     28c:	0000027f 	andeq	r0, r0, pc, ror r2
            number = number * 10;
     290:	410a0101 	tstmi	sl, r1, lsl #2
            number += settingsInput[i] - 48;
     294:	05000001 	streq	r0, [r0, #-1]
     298:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
     29c:	01010000 	mrseq	r0, (UNDEF: 1)
     2a0:	0004a90f 	andeq	sl, r4, pc, lsl #18
     2a4:	016e0800 	cmneq	lr, r0, lsl #16
     2a8:	0002ad10 	andeq	sl, r2, r0, lsl sp
fsm root {
     2ac:	b3040b00 	movwlt	r0, #19200	; 0x4b00
     2b0:	10000002 	andne	r0, r0, r2
     2b4:	0002bf01 	andeq	fp, r2, r1, lsl #30
     2b8:	009b1100 	addseq	r1, fp, r0, lsl #2
     2bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2c0:	000001a2 	andeq	r0, r0, r2, lsr #3
     2c4:	000002ca 	andeq	r0, r0, sl, asr #5
        ser_outf(Initial, "Enter your name: ");
     2c8:	bf05000d 	svclt	0x0005000d
     2cc:	12000002 	andne	r0, r0, #2
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	00000464 	andeq	r0, r0, r4, ror #8
     2d4:	13017f08 	movwne	r7, #7944	; 0x1f08
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	000002ca 	andeq	r0, r0, sl, asr #5
     2dc:	9f120101 	svcls	0x00120101
     2e0:	08000003 	stmdaeq	r0, {r0, r1}
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
        if (choice == 'A' || choice == 'a'){
     2ec:	04941201 	ldreq	r1, [r4], #513	; 0x201
     2f0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     2f4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
            proceed Adjust_Intervals;
     2f8:	01010000 	mrseq	r0, (UNDEF: 1)
            proceed Monitor;
     2fc:	03080813 	movweq	r0, #34835	; 0x8813
        proceed Show_Menu;
     300:	03230903 			; <UNDEFINED> instruction: 0x03230903
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	34140000 	ldrcc	r0, [r4], #-0
     308:	08000022 	stmdaeq	r0, {r1, r5}
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	9b070307 	blls	1c0f30 <__ccfg+0x1a0f88>
     310:	00000000 	andeq	r0, r0, r0
     314:	00057f14 	andeq	r7, r5, r4, lsl pc
        processSettingsInput(settings);
     318:	03080800 	movweq	r0, #34816	; 0x8800
        if(!blinkerRunning) {
     31c:	0000ce08 	andeq	ip, r0, r8, lsl #28
     320:	0f000400 	svceq	0x00000400
            blinkerCode = runfsm blinker;
     324:	00000266 	andeq	r0, r0, r6, ror #4
     328:	03030908 	movweq	r0, #14600	; 0x3908
            blinkerRunning = YES;
     32c:	000002fc 	strdeq	r0, [r0], -ip
        On = YES;
     330:	0004b815 	andeq	fp, r4, r5, lsl r8
     334:	0b083000 	bleq	20c33c <__ccfg+0x1ec394>
        trigger(&On);
     338:	03930803 	orrseq	r0, r3, #196608	; 0x30000
        proceed Show_Menu;
     33c:	b1140000 	tstlt	r4, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	08000004 	stmdaeq	r0, {r2}
     344:	9b070314 	blls	1c0f9c <__ccfg+0x1a0ff4>
     348:	00000000 	andeq	r0, r0, r0
     34c:	0002d214 	andeq	sp, r2, r4, lsl r2
     350:	03150800 	tsteq	r5, #0, 16
     354:	00009b07 	andeq	r9, r0, r7, lsl #22
     358:	ac140200 	lfmge	f0, 4, [r4], {-0}
        proceed Show_Menu;
     35c:	08000004 	stmdaeq	r0, {r2}
     360:	a00a0316 	andge	r0, sl, r6, lsl r3
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	04000002 	streq	r0, [r0], #-2
     368:	000f7f14 	andeq	r7, pc, r4, lsl pc	; <UNPREDICTABLE>
        displayCycle = YES;
     36c:	03170800 	tsteq	r7, #0, 16
        ser_inf(Await_Stop, "%c", &ch);
     370:	0000ce08 	andeq	ip, r0, r8, lsl #28
     374:	5d140800 	ldcpl	8, cr0, [r4, #-0]
     378:	08000004 	stmdaeq	r0, {r2}
        if(ch == 'S' || ch == 's'){
     37c:	930f0318 	movwls	r0, #62232	; 0xf318
     380:	0c000003 	stceq	0, cr0, [r0], {3}
     384:	0002cd14 	andeq	ip, r2, r4, lsl sp
            displayCycle = NO;
     388:	03190800 	tsteq	r9, #0, 16
     38c:	0003a315 	andeq	sl, r3, r5, lsl r3
            proceed Show_Menu;
     390:	0c002c00 	stceq	12, cr2, [r0], {-0}
        proceed Monitor;
     394:	00000323 	andeq	r0, r0, r3, lsr #6
        On = NO;
     398:	000003a3 	andeq	r0, r0, r3, lsr #7
     39c:	0000880e 	andeq	r8, r0, lr, lsl #16
        if(blinkerCode != 0x0) {
     3a0:	0b000300 	bleq	fa8 <dgout+0xc>
            killall(blinkerCode);
     3a4:	00033004 	andeq	r3, r3, r4
     3a8:	04c30f00 	strbeq	r0, [r3], #3840	; 0xf00
        proceed Show_Menu;
     3ac:	1c080000 	stcne	0, cr0, [r8], {-0}
     3b0:	03301b03 	teqeq	r0, #3072	; 0xc00
        leds_all(0);
     3b4:	95120000 	ldrls	r0, [r2, #-0]
     3b8:	08000003 	stmdaeq	r0, {r0, r1}
     3bc:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
        proceed Show_Menu;
     3c0:	01000003 	tsteq	r0, r3
     3c4:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
        } else if (choice == 'S' || choice == 's') {
     3c8:	16000003 	strne	r0, [r0], -r3
            proceed Stop;
     3cc:	0000029d 	muleq	r0, sp, r2
        } else if (choice == 'V' || choice == 'v') {
     3d0:	81051501 	tsthi	r5, r1, lsl #10
            proceed View_Settings;
     3d4:	01000000 	mrseq	r0, (UNDEF: 0)
        } else if (choice == 'M' || choice == 'm') {
     3d8:	00040305 	andeq	r0, r4, r5, lsl #6
            proceed Monitor;
     3dc:	ce162000 	cdpgt	0, 1, cr2, cr6, cr0, {0}
     3e0:	01000004 	tsteq	r0, r4
     3e4:	019b0616 	orrseq	r0, fp, r6, lsl r6
     3e8:	05010000 	streq	r0, [r1, #-0]
     3ec:	00000003 	andeq	r0, r0, r3
     3f0:	02d81620 	sbcseq	r1, r8, #32, 12	; 0x2000000
     3f4:	17010000 	strne	r0, [r1, -r0]
     3f8:	00009b06 	andeq	r9, r0, r6, lsl #22
     3fc:	03050100 	movweq	r0, #20736	; 0x5100
     400:	2000001a 	andcs	r0, r0, sl, lsl r0
     404:	00031816 	andeq	r1, r3, r6, lsl r8
     408:	06180100 	ldreq	r0, [r8], -r0, lsl #2
     40c:	0000009b 	muleq	r0, fp, r0
     410:	18030501 	stmdane	r3, {r0, r8, sl}
     414:	16200000 	strtne	r0, [r0], -r0
     418:	00000053 	andeq	r0, r0, r3, asr r0
     41c:	81051a01 	tsthi	r5, r1, lsl #20
     420:	01000000 	mrseq	r0, (UNDEF: 0)
     424:	00280305 	eoreq	r0, r8, r5, lsl #6
     428:	0b162000 	bleq	588430 <__ccfg+0x568488>
     42c:	01000003 	tsteq	r0, r3
static void devinit_uart (int devnum) {
     430:	019b061b 	orrseq	r0, fp, fp, lsl r6
	adddevfunc (ioreq_uart_a, devnum);
     434:	05010000 	streq	r0, [r1, #-0]
     438:	00000803 	andeq	r0, r0, r3, lsl #16
void udelay (volatile word n) {
     43c:	04771620 	ldrbteq	r1, [r7], #-1568	; 0xfffff9e0
     440:	1c010000 	stcne	0, cr0, [r1], {-0}
	while (n) {
     444:	00009b06 	andeq	r9, r0, r6, lsl #22
     448:	03050100 	movweq	r0, #20736	; 0x5100
}
     44c:	2000002e 	andcs	r0, r0, lr, lsr #32
	while (n--);
     450:	0003fb16 	andeq	pc, r3, r6, lsl fp	; <UNPREDICTABLE>
     454:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
     458:	0000009b 	muleq	r0, fp, r0
		n--;
     45c:	2c030501 	cfstr32cs	mvfx0, [r3], {1}
     460:	17200000 	strne	r0, [r0, -r0]!
     464:	01006e4f 	tsteq	r0, pc, asr #28
void mdelay (volatile word n) {
     468:	008f0922 	addeq	r0, pc, r2, lsr #18
     46c:	05010000 	streq	r0, [r1, #-0]
	while (n) {
     470:	00000c03 	andeq	r0, r0, r3, lsl #24
     474:	047d1620 	ldrbteq	r1, [sp], #-1568	; 0xfffff9e0
}
     478:	23010000 	movwcs	r0, #4096	; 0x1000
		udelay (999);
     47c:	00008f09 	andeq	r8, r0, r9, lsl #30
     480:	03050100 	movweq	r0, #20736	; 0x5100
		n--;
     484:	20000016 	andcs	r0, r0, r6, lsl r0
     488:	04ec0118 	strbteq	r0, [ip], #280	; 0x118
     48c:	9a010000 	bls	40494 <__ccfg+0x204ec>
     490:	02ac0106 	adceq	r0, ip, #-2147483647	; 0x80000001
void __pi_ondomain (lword d) {
     494:	04300000 	ldrteq	r0, [r0], #-0
     498:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (__pi_systat.effpdm > 1)
     49c:	000005f3 	strdeq	r0, [r0], -r3
     4a0:	0000cb19 	andeq	ip, r0, r9, lsl fp
			__pi_systat.effpdm = 1;
     4a4:	119a0100 	orrsne	r0, sl, r0, lsl #2
	PRCMPowerDomainOn (d);
     4a8:	0000009b 	muleq	r0, fp, r0
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	0001311a 	andeq	r3, r1, sl, lsl r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b4:	14a20100 	strtne	r0, [r2], #256	; 0x100
     4b8:	000002c6 	andeq	r0, r0, r6, asr #5
     4bc:	00005a1a 	andeq	r5, r0, sl, lsl sl
	__pi_systat.ondmns |= d;
     4c0:	17a50100 	strne	r0, [r5, r0, lsl #2]!
     4c4:	000002ce 	andeq	r0, r0, lr, asr #5
}
     4c8:	0000b91a 	andeq	fp, r0, sl, lsl r9
     4cc:	18a80100 	stmiane	r8!, {r8}
void __pi_syserror (word ec, const char *m) {
     4d0:	000002d8 	ldrdeq	r0, [r0], -r8
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	0004391a 	andeq	r3, r4, sl, lsl r9
     4d8:	19b10100 	ldmibne	r1!, {r8}
  __ASM volatile ("cpsid i" : : : "memory");
     4dc:	000002e2 	andeq	r0, r0, r2, ror #5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e0:	0003d81a 	andeq	sp, r3, sl, lsl r8
     4e4:	1fc20100 	svcne	0x00c20100
     4e8:	00000304 	andeq	r0, r0, r4, lsl #6
		all_leds_blink;
     4ec:	0003691a 	andeq	r6, r3, sl, lsl r9
     4f0:	1cc50100 	stfnee	f0, [r5], {0}
     4f4:	0000030c 	andeq	r0, r0, ip, lsl #6
     4f8:	0001081a 	andeq	r0, r1, sl, lsl r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4fc:	1ccc0100 	stfnee	f0, [ip], {0}
     500:	0000031c 	andeq	r0, r0, ip, lsl r3
     504:	00037f1a 	andeq	r7, r3, sl, lsl pc
     508:	1cda0100 	ldfnee	f0, [sl], {0}
     50c:	00000340 	andeq	r0, r0, r0, asr #6
     510:	0000001a 	andeq	r0, r0, sl, lsl r0
	while (1) {
     514:	16e40100 	strbtne	r0, [r4], r0, lsl #2
     518:	00000362 	andeq	r0, r0, r2, ror #6
     51c:	0002f81a 	andeq	pc, r2, sl, lsl r8	; <UNPREDICTABLE>
     520:	19e80100 	stmibne	r8!, {r8}^
void tci_run_delay_timer () {
     524:	00000370 	andeq	r0, r0, r0, ror r3
	setdel = __pi_mintk - __pi_old;
     528:	0001541a 	andeq	r5, r1, sl, lsl r4
     52c:	13f40100 	mvnsne	r0, #0, 2
     530:	00000398 	muleq	r0, r8, r3
     534:	0000881b 	andeq	r8, r0, fp, lsl r8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	02ac1c00 	adceq	r1, ip, #0, 24
     53c:	9c010000 	stcls	0, cr0, [r1], {-0}
     540:	0005f311 	andeq	pc, r5, r1, lsl r3	; <UNPREDICTABLE>
     544:	30030500 	andcc	r0, r3, r0, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	1c200000 	stcne	0, cr0, [r0], #-0
	sti_tim;
     54c:	00000031 	andeq	r0, r0, r1, lsr r0
}
     550:	a0149e01 	andsge	r9, r4, r1, lsl #28
     554:	05000002 	streq	r0, [r0, #-2]
     558:	00001003 	andeq	r1, r0, r3
     55c:	04dd1c20 	ldrbeq	r1, [sp], #3104	; 0xc20
     560:	a0010000 	andge	r0, r1, r0
	cli_aux;
     564:	00008f14 	andeq	r8, r0, r4, lsl pc
     568:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	1d200000 	stcne	0, cr0, [r0, #-0]
     570:	000000a0 	andeq	r0, r0, r0, lsr #1
     574:	00000588 	andeq	r0, r0, r8, lsl #11
     578:	0004a21c 	andeq	sl, r4, ip, lsl r2
	sti_aux;
     57c:	0eb20100 	frdeqs	f0, f2, f0
}
     580:	0000019b 	muleq	r0, fp, r1
     584:	00449102 	subeq	r9, r4, r2, lsl #2
     588:	00030c1e 	andeq	r0, r3, lr, lsl ip
void AONRTCIntHandler () {
     58c:	00031c00 	andeq	r1, r3, r0, lsl #24
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	0005a500 	andeq	sl, r5, r0, lsl #10
     594:	03581c00 	cmpeq	r8, #0, 24
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	c6010000 	strgt	r0, [r1], -r0
		if (__pi_utims [0] == 0)
     59c:	0006030e 	andeq	r0, r6, lr, lsl #6
     5a0:	44910200 	ldrmi	r0, [r1], #512	; 0x200
		if (*(__pi_utims [0])) {
     5a4:	03701e00 	cmneq	r0, #0, 28
     5a8:	03980000 	orrseq	r0, r8, #0
			(*(__pi_utims [0]))--;
     5ac:	05c10000 	strbeq	r0, [r1]
		if (__pi_utims [1] == 0)
     5b0:	631f0000 	tstvs	pc, #0
		if (*(__pi_utims [1])) {
     5b4:	e9010068 	stmdb	r1, {r3, r5, r6}
			aux_timer_inactive = 0;
     5b8:	00019b0e 	andeq	r9, r1, lr, lsl #22
			(*(__pi_utims [1]))--;
     5bc:	44910200 	ldrmi	r0, [r1], #512	; 0x200
		if (__pi_utims [2] == 0)
     5c0:	07d32000 	ldrbeq	r2, [r3, r0]
		if (*(__pi_utims [2])) {
     5c4:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
			(*(__pi_utims [2]))--;
     5c8:	00b80000 	adcseq	r0, r8, r0
		if (__pi_utims [3] != 0) {
     5cc:	fd010000 	stc2	0, cr0, [r1, #-0]
			if (*(__pi_utims [3])) {
     5d0:	0005db23 	andeq	sp, r5, r3, lsr #22
				aux_timer_inactive = 0;
     5d4:	07e22100 	strbeq	r2, [r2, r0, lsl #2]!
				(*(__pi_utims [3]))--;
     5d8:	22000000 	andcs	r0, r0, #0
	if (__pi_systat.ledsts) {
     5dc:	000007d3 	ldrdeq	r0, [r0], -r3
     5e0:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
		if (__pi_systat.ledblc++ == 0) {
     5e4:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
     5e8:	2136fd01 	teqcs	r6, r1, lsl #26	; <UNPREDICTABLE>
			if (__pi_systat.ledblk) {
     5ec:	000007e2 	andeq	r0, r0, r2, ror #15
     5f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5f4:	0000019b 	muleq	r0, fp, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	00000603 	andeq	r0, r0, r3, lsl #12
     5fc:	0000880e 	andeq	r8, r0, lr, lsl #16
				if (__pi_systat.ledsts & 0x2)
     600:	0c001300 	stceq	3, cr1, [r0], {-0}
     604:	0000019b 	muleq	r0, fp, r1
     608:	00000613 	andeq	r0, r0, r3, lsl r6
				if (__pi_systat.ledsts & 0x4)
     60c:	0000880e 	andeq	r8, r0, lr, lsl #16
				__pi_systat.ledblk = 0;
     610:	18003100 	stmdane	r0, {r8, ip, sp}
     614:	00033b01 	andeq	r3, r3, r1, lsl #22
			if (__pi_systat.fstblk)
     618:	067e0100 	ldrbteq	r0, [lr], -r0, lsl #2
     61c:	00023c01 	andeq	r3, r2, r1, lsl #24
				__pi_systat.ledblc = 200;
     620:	0002ac00 	andeq	sl, r2, r0, lsl #24
	if (events & AON_RTC_EVFLAGS_CH0) {
     624:	7b9c0100 	blvc	fe700a2c <_estack+0xde6fba2c>
		cli_tim;
     628:	19000006 	stmdbne	r0, {r1, r2}
		__pi_new += setdel;
     62c:	0000006b 	andeq	r0, r0, fp, rrx
     630:	95227e01 	strls	r7, [r2, #-3585]!	; 0xfffff1ff
		setdel = 0;
     634:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
		RISE_N_SHINE;
     638:	1c000000 	stcne	0, cr0, [r0], {-0}
		__pi_new += setdel;
     63c:	00000402 	andeq	r0, r0, r2, lsl #8
		RISE_N_SHINE;
     640:	0b0a7f01 	bleq	2a024c <__ccfg+0x2802a4>
     644:	02000002 	andeq	r0, r0, #2
		aux_timer_inactive = 1;
     648:	97236891 			; <UNDEFINED> instruction: 0x97236891
     64c:	01000000 	mrseq	r0, (UNDEF: 0)
				if (__pi_systat.ledsts & 0x1)
     650:	00810980 	addeq	r0, r1, r0, lsl #19
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     654:	00310000 	eorseq	r0, r1, r0
     658:	96230000 	strtls	r0, [r3], -r0
				if (__pi_systat.ledsts & 0x2)
     65c:	01000002 	tsteq	r0, r2
     660:	009b0a82 	addseq	r0, fp, r2, lsl #21
     664:	00440000 	subeq	r0, r4, r0
				if (__pi_systat.ledsts & 0x8)
     668:	701b0000 	andsvc	r0, fp, r0
				__pi_systat.ledblk = 1;
     66c:	24000000 	strcs	r0, [r0], #-0
     670:	85010069 	strhi	r0, [r1, #-105]	; 0xffffff97
		if (aux_timer_inactive) {
     674:	0000810e 	andeq	r8, r0, lr, lsl #2
			cli_aux;
     678:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     67c:	00035001 	andeq	r5, r3, r1
     680:	06330100 	ldrteq	r0, [r3], -r0, lsl #2
     684:	0000c801 	andeq	ip, r0, r1, lsl #16
     688:	00023c00 	andeq	r3, r2, r0, lsl #24
     68c:	b39c0100 	orrslt	r0, ip, #0, 2
     690:	19000007 	stmdbne	r0, {r0, r1, r2}
     694:	000000cb 	andeq	r0, r0, fp, asr #1
     698:	9b143301 	blls	50d2a4 <__ccfg+0x4ed2fc>
     69c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
word tci_update_delay_ticks (Boolean force) {
     6a0:	1a000000 	bne	6a8 <tci_update_delay_ticks+0x8>
	cli_tim;
     6a4:	00000010 	andeq	r0, r0, r0, lsl r0
     6a8:	0e193d01 	cdpeq	13, 1, cr3, cr9, cr1, {0}
	if (setdel) {
     6ac:	1a000001 	bne	6b8 <tci_update_delay_ticks+0x18>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	0000011e 	andeq	r0, r0, lr, lsl r1
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	d2196501 	andsle	r6, r9, #4194304	; 0x400000
     6b8:	1b000000 	blne	6c0 <tci_update_delay_ticks+0x20>
     6bc:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	64656c1f 	strbtvs	r6, [r5], #-3103	; 0xfffff3e1
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	10340100 	eorsne	r0, r4, r0, lsl #2
	return NO;
     6c8:	00000081 	andeq	r0, r0, r1, lsl #1
			setdel = 0;
     6cc:	001c0305 	andseq	r0, ip, r5, lsl #6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d0:	631f2000 	tstvs	pc, #0
     6d4:	35010068 	strcc	r0, [r1, #-104]	; 0xffffff98
}
     6d8:	00019b11 	andeq	r9, r1, r1, lsl fp
		sti_tim;
     6dc:	15030500 	strne	r0, [r3, #-1280]	; 0xfffffb00
		return YES;
     6e0:	1c200000 	stcne	0, cr0, [r0], #-0
     6e4:	000003d1 	ldrdeq	r0, [r0], -r1
     6e8:	9b113701 	blls	44e2f4 <__ccfg+0x42e34c>
     6ec:	05000000 	streq	r0, [r0, #-0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	00002603 	andeq	r2, r0, r3, lsl #12
	UARTDisable (UART0_BASE);
     6f4:	03611c20 	cmneq	r1, #32, 24	; 0x2000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
	UARTDisable (UART0_BASE);
     6fc:	00009b11 	andeq	r9, r0, r1, lsl fp
	UARTConfigSetExpClk (UART0_BASE,
     700:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     704:	1c200000 	stcne	0, cr0, [r0], #-0
     708:	0000044c 	andeq	r0, r0, ip, asr #8
     70c:	81103b01 	tsthi	r0, r1, lsl #22
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	05000000 	streq	r0, [r0, #-0]
     714:	00002003 	andeq	r2, r0, r3
     718:	07d32520 	ldrbeq	r2, [r3, r0, lsr #10]
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	00de0000 	sbcseq	r0, lr, r0
     720:	00e20000 	rsceq	r0, r2, r0
     724:	67010000 	strvs	r0, [r1, -r0]
	urates [0] = rate;
     728:	00073335 	andeq	r3, r7, r5, lsr r3
}
     72c:	07e22100 	strbeq	r2, [r2, r0, lsl #2]!
     730:	20000000 	andcs	r0, r0, r0
     734:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
     738:	0000013a 	andeq	r0, r0, sl, lsr r1
     73c:	00000018 	andeq	r0, r0, r8, lsl r0
     740:	4d124f01 	ldcmi	15, cr4, [r2, #-4]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	21000007 	tstcs	r0, r7
     748:	000007c6 	andeq	r0, r0, r6, asr #15
     74c:	07b32000 	ldreq	r2, [r3, r0]!
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	01400000 	mrseq	r0, (UNDEF: 64)
     754:	00480000 	subeq	r0, r8, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	50010000 	andpl	r0, r1, r0
     75c:	00076713 	andeq	r6, r7, r3, lsl r7
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	07c62100 	strbeq	r2, [r6, r0, lsl #2]
     764:	25000000 	strcs	r0, [r0, #-0]
     768:	000007d3 	ldrdeq	r0, [r0], -r3
     76c:	0000017a 	andeq	r0, r0, sl, ror r1
     770:	0000017c 	andeq	r0, r0, ip, ror r1
     774:	813d5b01 	teqhi	sp, r1, lsl #22
     778:	21000007 	tstcs	r0, r7
	switch (operation) {
     77c:	000007e2 	andeq	r0, r0, r2, ror #15
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	07d32500 	ldrbeq	r2, [r3, r0, lsl #10]
     784:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
     788:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
     78c:	5b010000 	blpl	40794 <__ccfg+0x207ec>
     790:	00079b99 	muleq	r7, r9, fp
				*buf++ = uart_a_read;
     794:	07e22100 	strbeq	r2, [r2, r0, lsl #2]!
     798:	22000000 	andcs	r0, r0, #0
			while (len && uart_a_char_available) {
     79c:	000007d3 	ldrdeq	r0, [r0], -r3
     7a0:	000001d8 	ldrdeq	r0, [r0], -r8
     7a4:	000001dc 	ldrdeq	r0, [r0], -ip
			if (len != operation) {
     7a8:	21916701 	orrscs	r6, r1, r1, lsl #14
}
     7ac:	000007e2 	andeq	r0, r0, r2, ror #15
     7b0:	26000000 	strcs	r0, [r0], -r0
			uart_a_disable_int;
     7b4:	00040a01 	andeq	r0, r4, r1, lsl #20
			if (uart_a_char_available) {
     7b8:	062e0100 	strteq	r0, [lr], -r0, lsl #2
				*buf++ = uart_a_read;
     7bc:	00009b01 	andeq	r9, r0, r1, lsl #22
			uart_a_disable_int;
     7c0:	07d30100 	ldrbeq	r0, [r3, r0, lsl #2]
     7c4:	8a270000 	bhi	9c07cc <__ccfg+0x9a0824>
			if (uart_a_char_available) {
     7c8:	01000004 	tsteq	r0, r4
     7cc:	009b162e 	addseq	r1, fp, lr, lsr #12
				uart_a_enable_int;
     7d0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7d4:	000003c3 	andeq	r0, r0, r3, asr #7
				goto Redo_rx;
     7d8:	01015402 	tsteq	r1, r2, lsl #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	07f00301 	ldrbeq	r0, [r0, r1, lsl #6]!
     7e0:	68290000 	stmdavs	r9!, {}	; <UNPREDICTABLE>
			return -2;
     7e4:	02000001 	andeq	r0, r0, #1
     7e8:	67190154 			; <UNDEFINED> instruction: 0x67190154
				uart_a_write (*buf);
     7ec:	00000000 	andeq	r0, r0, r0
     7f0:	00002528 	andeq	r2, r0, r8, lsr #10
			while (len && uart_a_room_in_tx) {
     7f4:	011e0200 	tsteq	lr, r0, lsl #4
     7f8:	0d030101 	stfeqs	f0, [r3, #-4]
     7fc:	29000008 	stmdbcs	r0, {r3}
			if (len != operation) {
     800:	00000168 	andeq	r0, r0, r8, ror #2
			uart_a_disable_int;
     804:	17011e02 	strne	r1, [r1, -r2, lsl #28]
     808:	00000067 	andeq	r0, r0, r7, rrx
			if (uart_a_room_in_tx) {
     80c:	07b32a00 	ldreq	r2, [r3, r0, lsl #20]!
	...
				uart_a_enable_int;
     818:	9c010000 	stcls	0, cr0, [r1], {-0}
				*buf++ = uart_a_read;
     81c:	0007c62b 	andeq	ip, r7, fp, lsr #12
			if (uart_a_room_in_tx) {
     820:	0000ac00 	andeq	sl, r0, r0, lsl #24
				uart_a_write (*buf);
     824:	8c000000 	stchi	0, cr0, [r0], {-0}
     828:	03000014 	movweq	r0, #20
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	00026c00 	andeq	r6, r2, r0, lsl #24
     830:	72010400 	andvc	r0, r1, #0, 8
			uart_a_enable_int;
     834:	0c000001 	stceq	0, cr0, [r0], {1}
     838:	00000968 	andeq	r0, r0, r8, ror #18
     83c:	000000d3 	ldrdeq	r0, [r0], -r3
			return 0;
     840:	00000560 	andeq	r0, r0, r0, ror #10
			if (len == UART_CNTRL_SETRATE) {
     844:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
     848:	00000530 	andeq	r0, r0, r0, lsr r5
     84c:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
     850:	02000003 	andeq	r0, r0, #3
				syserror (EREQPAR, "uar");
     854:	03f10502 	mvnseq	r0, #8388608	; 0x800000
			syserror (ENOOPER, "uai");
     858:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
			if (len == UART_CNTRL_GETRATE) {
     85c:	10000016 	andne	r0, r0, r6, lsl r0
				return 1;
     860:	003f1828 	eorseq	r1, pc, r8, lsr #16
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	04020000 	streq	r0, [r2], #-0
			syserror (ENOOPER, "uai");
     868:	0000b005 	andeq	fp, r0, r5
     86c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     870:	000000ab 	andeq	r0, r0, fp, lsr #1
     874:	00223c03 	eoreq	r3, r2, r3, lsl #24
     878:	182e1000 	stmdane	lr!, {ip}
     87c:	00000059 	andeq	r0, r0, r9, asr r0
     880:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
     884:	03000003 	movweq	r0, #3
     888:	0000212a 	andeq	r2, r0, sl, lsr #2
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	6c193110 	ldfvss	f3, [r9], {16}
void UART0IntHandler () {
     890:	02000000 	andeq	r0, r0, #0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
     898:	f3030000 	vhadd.u8	d0, d3, d0
     89c:	10000017 	andne	r0, r0, r7, lsl r0
     8a0:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
     8a4:	04020000 	streq	r0, [r2], #-0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	00008507 	andeq	r8, r0, r7, lsl #10
     8ac:	07080200 	streq	r0, [r8, -r0, lsl #4]
		RISE_N_SHINE;
     8b0:	00000080 	andeq	r0, r0, r0, lsl #1
     8b4:	69050404 	stmdbvs	r5, {r2, sl}
		i_trigger (devevent (UART_A, READ));
     8b8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     8bc:	008a0704 	addeq	r0, sl, r4, lsl #14
     8c0:	1c030000 	stcne	0, cr0, [r3], {-0}
     8c4:	11000004 	tstne	r0, r4
     8c8:	004d1226 	subeq	r1, sp, r6, lsr #4
     8cc:	00030000 	andeq	r0, r3, r0
     8d0:	11000016 	tstne	r0, r6, lsl r0
     8d4:	00601227 	rsbeq	r1, r0, r7, lsr #4
     8d8:	a7050000 	strge	r0, [r5, -r0]
     8dc:	06000000 	streq	r0, [r0], -r0
     8e0:	000000a7 	andeq	r0, r0, r7, lsr #1
     8e4:	00094603 	andeq	r4, r9, r3, lsl #12
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e8:	12281100 	eorne	r1, r8, #0, 2
     8ec:	00000033 	andeq	r0, r0, r3, lsr r0
     8f0:	0013f803 	andseq	pc, r3, r3, lsl #16
		i_trigger (devevent (UART_A, WRITE));
     8f4:	122b1100 	eorne	r1, fp, #0, 2
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	0000004d 	andeq	r0, r0, sp, asr #32
     8fc:	0000c906 	andeq	ip, r0, r6, lsl #18
		RISE_N_SHINE;
     900:	00c90500 	sbceq	r0, r9, r0, lsl #10
     904:	51030000 	mrspl	r0, (UNDEF: 3)
     908:	11000016 	tstne	r0, r6, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     90c:	0073122c 	rsbseq	r1, r3, ip, lsr #4
     910:	df050000 	svcle	0x00050000
     914:	03000000 	movweq	r0, #0
     918:	000002a6 	andeq	r0, r0, r6, lsr #5
     91c:	73122d11 	tstvc	r2, #1088	; 0x440
     920:	03000000 	movweq	r0, #0
     924:	000007a2 	andeq	r0, r0, r2, lsr #15
     928:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
     92c:	07000001 	streq	r0, [r0, -r1]
     930:	0000a704 	andeq	sl, r0, r4, lsl #14
     934:	11080800 	tstne	r8, r0, lsl #16
}
     938:	019c0932 	orrseq	r0, ip, r2, lsr r9
     93c:	c1090000 	mrsgt	r0, (UNDEF: 9)
     940:	11000002 	tstne	r0, r2
     944:	00c90734 	sbceq	r0, r9, r4, lsr r7
     948:	01010000 	mrseq	r0, (UNDEF: 1)
void __buttons_setirq (int val) {
     94c:	a4090007 	strge	r0, [r9], #-7
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	11000000 	mrsne	r0, (UNDEF: 0)
     954:	00c90335 	sbceq	r0, r9, r5, lsr r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	01010000 	mrseq	r0, (UNDEF: 1)
     95c:	8f090006 	svchi	0x00090006
     960:	11000002 	tstne	r0, r2
		bn = BUTTON_GPIO (__button_list [i]);
     964:	00c90336 	sbceq	r0, r9, r6, lsr r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	01010000 	mrseq	r0, (UNDEF: 1)
     96c:	2b090005 	blcs	240988 <__ccfg+0x2209e0>
     970:	11000004 	tstne	r0, r4
     974:	00c90337 	sbceq	r0, r9, r7, lsr r3
     978:	01010000 	mrseq	r0, (UNDEF: 1)
     97c:	24090004 	strcs	r0, [r9], #-4
}
     980:	11000004 	tstne	r0, r4
     984:	00c90338 	sbceq	r0, r9, r8, lsr r3
     988:	04010000 	streq	r0, [r1], #-0
     98c:	150a0000 	strne	r0, [sl, #-0]
void __pinlist_setirq (int val) {
     990:	11000004 	tstne	r0, r4
	for (i = 0; i < N_PINLIST; i++) {
     994:	00c9073a 	sbceq	r0, r9, sl, lsr r7
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     998:	0a010000 	beq	409a0 <__ccfg+0x209f8>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	0000004c 	andeq	r0, r0, ip, asr #32
	for (i = 0; i < N_PINLIST; i++) {
     9a0:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a4:	02000000 	andeq	r0, r0, #0
     9a8:	0000790a 	andeq	r7, r0, sl, lsl #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ac:	033d1100 	teqeq	sp, #0, 2
     9b0:	000000c9 	andeq	r0, r0, r9, asr #1
     9b4:	01610a03 	cmneq	r1, r3, lsl #20
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	3f110000 	svccc	0x00110000
}
     9bc:	0000df08 	andeq	sp, r0, r8, lsl #30
     9c0:	03000400 	movweq	r0, #1024	; 0x400
     9c4:	00000454 	andeq	r0, r0, r4, asr r4
     9c8:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
void GPIOIntHandler () {
     9cc:	06000001 	streq	r0, [r0], -r1
if (buttons_int) {
     9d0:	0000019c 	muleq	r0, ip, r1
     9d4:	0002b50b 	andeq	fp, r2, fp, lsl #10
	buttons_disable ();
     9d8:	1a431100 	bne	10c4de0 <__ccfg+0x10a4e38>
     9dc:	000001a8 	andeq	r0, r0, r8, lsr #3
	i_trigger ((aword)&__button_list);
     9e0:	210b0101 	tstcs	fp, r1, lsl #2
     9e4:	11000003 	tstne	r0, r3
     9e8:	01c90e45 	biceq	r0, r9, r5, asr #28
     9ec:	01010000 	mrseq	r0, (UNDEF: 1)
     9f0:	01cf0407 	biceq	r0, pc, r7, lsl #8
     9f4:	01020000 	mrseq	r0, (UNDEF: 2)
     9f8:	0003be08 	andeq	fp, r3, r8, lsl #28
     9fc:	01cf0500 	biceq	r0, pc, r0, lsl #10
     a00:	2f0b0000 	svccs	0x000b0000
     a04:	11000003 	tstne	r0, r3
     a08:	01c91e45 	biceq	r1, r9, r5, asr #28
	RISE_N_SHINE;
     a0c:	01010000 	mrseq	r0, (UNDEF: 1)
     a10:	8f120808 	svchi	0x00120808
     a14:	00021a09 	andeq	r1, r2, r9, lsl #20
if (pin_sensor_int) {
     a18:	02c80a00 	sbceq	r0, r8, #0, 20
     a1c:	90120000 	andsls	r0, r2, r0
	i_trigger ((aword)(&__input_pins));
     a20:	0000730b 	andeq	r7, r0, fp, lsl #6
     a24:	2d0a0000 	stccs	0, cr0, [sl, #-0]
     a28:	12000006 	andne	r0, r0, #6
     a2c:	00a70891 	umlaleq	r0, r7, r1, r8
     a30:	0a040000 	beq	100a38 <__ccfg+0xe0a90>
     a34:	0000049c 	muleq	r0, ip, r4
     a38:	d5109212 	ldrle	r9, [r0, #-530]	; 0xfffffdee
     a3c:	06000000 	streq	r0, [r0], -r0
     a40:	04320300 	ldrteq	r0, [r2], #-768	; 0xfffffd00
     a44:	93120000 	tstls	r2, #0
     a48:	0001e903 	andeq	lr, r1, r3, lsl #18
	__pinsen_disable_and_clear;
     a4c:	021a0500 	andseq	r0, sl, #0, 10
	RISE_N_SHINE;
     a50:	1a0c0000 	bne	300a58 <__ccfg+0x2e0ab0>
     a54:	36000002 	strcc	r0, [r0], -r2
     a58:	0d000002 	stceq	0, cr0, [r0, #-8]
}
     a5c:	00420b00 	subeq	r0, r2, r0, lsl #22
     a60:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
     a64:	00022b0f 	andeq	r2, r2, pc, lsl #22
     a68:	07010100 	streq	r0, [r1, -r0, lsl #2]
     a6c:	0000da04 	andeq	sp, r0, r4, lsl #20
void system_init () {
     a70:	13010800 	movwne	r0, #6144	; 0x1800
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	02740991 	rsbseq	r0, r4, #2375680	; 0x244000
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a78:	8f090000 	svchi	0x00090000
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	13000004 	movwne	r0, #4
     a80:	00c90793 	smulleq	r0, r9, r3, r7
     a84:	07010000 	streq	r0, [r1, -r0]
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a88:	3d090001 	stccc	0, cr0, [r9, #-4]
     a8c:	13000000 	movwne	r0, #0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	00c90394 	smulleq	r0, r9, r4, r3
     a94:	01010000 	mrseq	r0, (UNDEF: 1)
     a98:	03000000 	movweq	r0, #0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	00000286 	andeq	r0, r0, r6, lsl #5
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	4a039613 	bmi	e62f4 <__ccfg+0xc634c>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	05000002 	streq	r0, [r0, #-2]
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa8:	00000274 	andeq	r0, r0, r4, ror r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aac:	0002800c 	andeq	r8, r2, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab0:	00029000 	andeq	r9, r2, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	00000285 	andeq	r0, r0, r5, lsl #5
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	0002eb0b 	andeq	lr, r2, fp, lsl #22
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac0:	179c1300 	ldrne	r1, [ip, r0, lsl #6]
     ac4:	00000290 	muleq	r0, r0, r2
     ac8:	b30c0101 	movwlt	r0, #49409	; 0xc101
     acc:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
		if (port_confs [i] & 0x80)
     ad0:	0d000002 	stceq	0, cr0, [r0, #-8]
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	02a30500 	adceq	r0, r3, #0, 10
     ad8:	a70b0000 	strge	r0, [fp, -r0]
		if (port_confs [i] & 0x40)
     adc:	14000003 	strne	r0, [r0], #-3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	02ae1306 	adceq	r1, lr, #402653184	; 0x18000000
     ae4:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae8:	0001410b 	andeq	r4, r1, fp, lsl #2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aec:	0ec31200 	cdpeq	2, 12, cr1, cr3, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	all_leds_blink;
     af4:	a90e0101 	stmdbge	lr, {r0, r8}
     af8:	15000004 	strne	r0, [r0, #-4]
     afc:	dc10016e 	ldfles	f0, [r0], {110}	; 0x6e
     b00:	07000002 	streq	r0, [r0, -r2]
     b04:	0002e204 	andeq	lr, r2, r4, lsl #4
     b08:	ee010f00 	cdp	15, 0, cr0, cr1, cr0, {0}
     b0c:	10000002 	andne	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	000000a7 	andeq	r0, r0, r7, lsr #1
     b14:	01d60c00 	bicseq	r0, r6, r0, lsl #24
     b18:	02f90000 	rscseq	r0, r9, #0
     b1c:	000d0000 	andeq	r0, sp, r0
     b20:	0002ee05 	andeq	lr, r2, r5, lsl #28
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b24:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	7f150000 	svcvc	0x00150000
     b2c:	02f91601 	rscseq	r1, r9, #1048576	; 0x100000
	IntEnable (INT_AON_RTC_COMB);
     b30:	01010000 	mrseq	r0, (UNDEF: 1)
     b34:	00039f11 	andeq	r9, r3, r1, lsl pc
     b38:	01821500 	orreq	r1, r2, r0, lsl #10
	__pi_malloc_init ();
     b3c:	0000eb14 	andeq	lr, r0, r4, lsl fp
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	11010100 	mrsne	r0, (UNDEF: 17)
     b44:	00000494 	muleq	r0, r4, r4
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	0e02d815 	mcreq	8, 0, sp, cr2, cr5, {0}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b50:	08120101 	ldmdaeq	r2, {r0, r8}
     b54:	09030315 	stmdbeq	r3, {r0, r2, r4, r8, r9}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	00000352 	andeq	r0, r0, r2, asr r3
     b5c:	00223413 	eoreq	r3, r2, r3, lsl r4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	03071500 	movweq	r1, #29952	; 0x7500
     b64:	0000a707 	andeq	sl, r0, r7, lsl #14
     b68:	7f130000 	svcvc	0x00130000
	urates [0] = UART_RATE / 100;
     b6c:	15000005 	strne	r0, [r0, #-5]
     b70:	f0080308 			; <UNDEFINED> instruction: 0xf0080308
	reinit_uart ();
     b74:	04000000 	streq	r0, [r0], #-0
	EXTRA_INITIALIZERS;
     b78:	02660e00 	rsbeq	r0, r6, #0, 28
     b7c:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b80:	032b0303 			; <UNDEFINED> instruction: 0x032b0303
     b84:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
     b88:	30000004 	andcc	r0, r0, r4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	08030b15 	stmdaeq	r3, {r0, r2, r4, r8, r9, fp}
     b90:	000003c2 	andeq	r0, r0, r2, asr #7
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	0004b113 	andeq	fp, r4, r3, lsl r1
     b98:	03141500 	tsteq	r4, #0, 10
			devinit [i] . init (devinit [i] . param);
     b9c:	0000a708 	andeq	sl, r0, r8, lsl #14
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	d2130000 	andsle	r0, r3, #0
     ba4:	15000002 	strne	r0, [r0, #-2]
     ba8:	a7080315 	smladge	r8, r5, r3, r0
	IntEnable (INT_UART0_COMB);
     bac:	02000000 	andeq	r0, r0, #0
     bb0:	0004ac13 	andeq	sl, r4, r3, lsl ip
}
     bb4:	03161500 	tsteq	r6, #0, 10
	tci_run_auxiliary_timer ();
     bb8:	0002cf0b 	andeq	ip, r2, fp, lsl #30
		diag ("");
     bbc:	7f130400 	svcvc	0x00130400
     bc0:	1500000f 	strne	r0, [r0, #-15]
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	f0090317 			; <UNDEFINED> instruction: 0xf0090317
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		diag ("Leftover RAM: %d bytes",
     bcc:	00045d13 	andeq	r5, r4, r3, lsl sp
     bd0:	03181500 	tsteq	r8, #0, 10
     bd4:	0003c20f 	andeq	ip, r3, pc, lsl #4
     bd8:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
     bdc:	15000002 	strne	r0, [r0, #-2]
     be0:	d2150319 	andsle	r0, r5, #1677721600	; 0x64000000
     be4:	2c000003 	stccs	0, cr0, [r0], {3}
     be8:	03520c00 	cmpeq	r2, #0, 24
     bec:	03d20000 	bicseq	r0, r2, #0
     bf0:	94150000 	ldrls	r0, [r5], #-0
     bf4:	03000000 	movweq	r0, #0
     bf8:	5f040700 	svcpl	0x00040700
     bfc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     c00:	000004c3 	andeq	r0, r0, r3, asr #9
     c04:	1b031c15 	blne	c7c60 <__ccfg+0xa7cb8>
     c08:	0000035f 	andeq	r0, r0, pc, asr r3
     c0c:	00039511 	andeq	r9, r3, r1, lsl r5
     c10:	031e1500 	tsteq	lr, #0, 10
     c14:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
     c18:	07010100 	streq	r0, [r1, -r0, lsl #2]
     c1c:	0003d804 	andeq	sp, r3, r4, lsl #16
     c20:	04f10b00 	ldrbteq	r0, [r1], #2816	; 0xb00
     c24:	1d160000 	ldcne	0, cr0, [r6, #-0]
__attribute__ ((noreturn)) void __pi_release () {
     c28:	0000a713 	andeq	sl, r0, r3, lsl r7
     c2c:	0b010100 	bleq	41034 <__ccfg+0x2108c>
     c30:	0000075b 	andeq	r0, r0, fp, asr r7
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c34:	b81a1e16 	ldmdalt	sl, {r1, r2, r4, r9, sl, fp, ip}
	check_stack_overflow;
     c38:	01000000 	mrseq	r0, (UNDEF: 0)
     c3c:	08eb0b01 	stmiaeq	fp!, {r0, r8, r9, fp}^
     c40:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
	update_n_wake (MAX_WORD, NO);
     c44:	0000b824 	andeq	fp, r0, r4, lsr #16
     c48:	0b010100 	bleq	41050 <__ccfg+0x210a8>
     c4c:	0000061a 	andeq	r0, r0, sl, lsl r6
	for_all_tasks (__pi_curr) {
     c50:	f4142216 			; <UNDEFINED> instruction: 0xf4142216
     c54:	01000003 	tsteq	r0, r3
     c58:	05630301 	strbeq	r0, [r3, #-769]!	; 0xfffffcff
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	43160000 	tstmi	r6, #0
	__SLEEP;
     c60:	00043e10 	andeq	r3, r4, r0, lsl lr
     c64:	44040700 	strmi	r0, [r4], #-1792	; 0xfffff900
     c68:	0f000004 	svceq	0x00000004
     c6c:	00045001 	andeq	r5, r4, r1
	system_event_count ++;
     c70:	008d1000 	addeq	r1, sp, r0
     c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	switch (__pi_systat.effpdm) {
     c78:	09461608 	stmdbeq	r6, {r3, r9, sl, ip}^
     c7c:	00000474 	andeq	r0, r0, r4, ror r4
     c80:	000ac60a 	andeq	ip, sl, sl, lsl #12
     c84:	0f4a1600 	svceq	0x004a1600
			__WFI ();
     c88:	00000432 	andeq	r0, r0, r2, lsr r4
     c8c:	07c80a00 	strbeq	r0, [r8, r0, lsl #20]
     c90:	4b160000 	blmi	580c98 <__ccfg+0x560cf0>
	check_stack_overflow;
     c94:	00008d07 	andeq	r8, r0, r7, lsl #26
     c98:	03000400 	movweq	r0, #1024	; 0x400
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	000005e9 	andeq	r0, r0, r9, ror #11
     ca0:	50034c16 	andpl	r4, r3, r6, lsl ip
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	05000004 	streq	r0, [r0, #-4]
			goto Redo;
     ca8:	00000474 	andeq	r0, r0, r4, ror r4
	for_all_tasks (__pi_curr) {
     cac:	0000fc0c 	andeq	pc, r0, ip, lsl #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	00049500 	andeq	r9, r4, r0, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	00941500 	addseq	r1, r4, r0, lsl #10
     cb8:	00030000 	andeq	r0, r3, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cbc:	00093b0b 	andeq	r3, r9, fp, lsl #22
     cc0:	120d0100 	andne	r0, sp, #0, 2
     cc4:	00000485 	andeq	r0, r0, r5, lsl #9
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	800c0101 	andhi	r0, ip, r1, lsl #2
     ccc:	b3000004 	movwlt	r0, #4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	15000004 	strne	r0, [r0, #-4]
     cd4:	00000094 	muleq	r0, r4, r0
			__WFI ();
     cd8:	a3050001 	movwge	r0, #20481	; 0x5001
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cdc:	16000004 	strne	r0, [r0], -r4
     ce0:	0000094b 	andeq	r0, r0, fp, asr #18
}
     ce4:	b318cf01 	tstlt	r8, #1, 30
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce8:	0c000004 	stceq	0, cr0, [r0], {4}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	000000eb 	andeq	r0, r0, fp, ror #1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	000004d4 	ldrdeq	r0, [r0], -r4
     cf4:	00009415 	andeq	r9, r0, r5, lsl r4
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	05001000 	streq	r1, [r0, #-0]
     cfc:	000004c4 	andeq	r0, r0, r4, asr #9
     d00:	00074817 	andeq	r4, r7, r7, lsl r8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d04:	0dec0100 	stfeqe	f0, [ip]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d08:	000004d4 	ldrdeq	r0, [r0], -r4
     d0c:	f4030501 	vst3.8	{d0,d2,d4}, [r3], r1
     d10:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
     d14:	000005c8 	andeq	r0, r0, r8, asr #11
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	0d010c01 	stceq	12, cr0, [r1, #-4]
     d1c:	000000a7 	andeq	r0, r0, r7, lsr #1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	00440305 	subeq	r0, r4, r5, lsl #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	36192000 	ldrcc	r2, [r9], -r0
     d28:	01000002 	tsteq	r0, r2
     d2c:	050802d0 	streq	r0, [r8, #-720]	; 0xfffffd30
     d30:	00008003 	andeq	r8, r0, r3
     d34:	00a70c20 	adceq	r0, r7, r0, lsr #24
			SysCtrlSetRechargeBeforePowerDown
     d38:	051e0000 	ldreq	r0, [lr, #-0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3c:	94150000 	ldrls	r0, [r5], #-0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	00000000 	andeq	r0, r0, r0
     d44:	05491800 	strbeq	r1, [r9, #-2048]	; 0xfffff800
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	d2010000 	andle	r0, r1, #0
     d4c:	050e0d02 	streq	r0, [lr, #-3330]	; 0xfffff2fe
     d50:	03050000 	movweq	r0, #20480	; 0x5000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d54:	20000046 	andcs	r0, r0, r6, asr #32
     d58:	0002c119 	andeq	ip, r2, r9, lsl r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	048c0100 	streq	r0, [ip], #256	; 0x100
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	88030507 	stmdahi	r3, {r0, r1, r2, r8, sl}
     d64:	1a200000 	bne	800d6c <__ccfg+0x7e0dc4>
     d68:	00053d01 	andeq	r3, r5, r1, lsl #26
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6c:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
			while (!(AONWUCPowerStatusGet () &
     d70:	008d0105 	addeq	r0, sp, r5, lsl #2
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
     d78:	0ee00000 	cdpeq	0, 14, cr0, cr0, cr0, {0}
     d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d80:	00000584 	andeq	r0, r0, r4, lsl #11
     d84:	0005481b 	andeq	r4, r5, fp, lsl r8
     d88:	00057200 	andeq	r7, r5, r0, lsl #4
     d8c:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	11057601 	tstne	r5, r1, lsl #12
     d94:	000000bd 	strheq	r0, [r0], -sp
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	11f71d00 	mvnsne	r1, r0, lsl #26
     d9c:	0ec20000 	cdpeq	0, 12, cr0, cr2, cr0, {0}
			SysCtrlAdjustRechargeAfterPowerDown ();
     da0:	0ec40000 	cdpeq	0, 12, cr0, cr4, cr0, {0}
			reinit_uart ();
     da4:	8d010000 	stchi	0, cr0, [r1, #-0]
     da8:	1e000205 	cdpne	2, 0, cr0, cr0, cr5, {0}
     dac:	0007e201 	andeq	lr, r7, r1, lsl #4
}
     db0:	05680100 	strbeq	r0, [r8, #-256]!	; 0xffffff00
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db4:	000c2821 	andeq	r2, ip, r1, lsr #16
     db8:	000e8000 	andeq	r8, lr, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dbc:	e49c0100 	ldr	r0, [ip], #256	; 0x100
     dc0:	1f000007 	svcne	0x00000007
     dc4:	000007ef 	andeq	r0, r0, pc, ror #15
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	2001080d 	andcs	r0, r1, sp, lsl #16
     dcc:	000011d0 	ldrdeq	r1, [r0], -r0
     dd0:	00000c28 	andeq	r0, r0, r8, lsr #24
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	000003a8 	andeq	r0, r0, r8, lsr #7
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	02056a01 	andeq	r6, r5, #4096	; 0x1000
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	0011df21 	andseq	sp, r1, r1, lsr #30
     de4:	12220000 	eorne	r0, r2, #0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de8:	42000008 	andmi	r0, r0, #8
     dec:	c800000c 	stmdagt	r0, {r2, r3}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	0d000003 	stceq	0, cr0, [r0, #-12]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	07b30227 	ldreq	r0, [r3, r7, lsr #4]!
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df8:	c8230000 	stmdagt	r3!, {}	; <UNPREDICTABLE>
     dfc:	24000003 	strcs	r0, [r0], #-3
			PRCMPowerDomainOff (
     e00:	00000820 	andeq	r0, r0, r0, lsr #16
     e04:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	__SLEEP;
     e08:	00125c25 	andseq	r5, r2, r5, lsr #24
     e0c:	000c4200 	andeq	r4, ip, r0, lsl #4
  __ASM volatile ("cpsie i" : : : "memory");
     e10:	0003f000 	andeq	pc, r3, r0
	goto Redo;
     e14:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
     e18:	14381d04 	ldrtne	r1, [r8], #-3332	; 0xfffff2fc
     e1c:	0cba0000 	ldceq	0, cr0, [sl]
     e20:	0cc60000 	stcleq	0, cr0, [r6], {0}
     e24:	a4010000 	strge	r0, [r1], #-0
     e28:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
     e2c:	ce000012 	mcrgt	0, 0, r0, cr0, cr2, {0}
     e30:	d000000c 	andle	r0, r0, ip
     e34:	0100000c 	tsteq	r0, ip
     e38:	250404aa 	strcs	r0, [r4, #-1194]	; 0xfffffb56
     e3c:	000012c0 	andeq	r1, r0, r0, asr #5
     e40:	00000ce6 	andeq	r0, r0, r6, ror #25
     e44:	00000408 	andeq	r0, r0, r8, lsl #8
     e48:	0404bb01 	streq	fp, [r4], #-2817	; 0xfffff4ff
     e4c:	00144325 	andseq	r4, r4, r5, lsr #6
     e50:	000ce600 	andeq	lr, ip, r0, lsl #12
     e54:	00042800 	andeq	r2, r4, r0, lsl #16
     e58:	04c50100 	strbeq	r0, [r5], #256	; 0x100
     e5c:	128e2004 	addne	r2, lr, #4
     e60:	0cee0000 	stcleq	0, cr0, [lr]
     e64:	04480000 	strbeq	r0, [r8], #-0
     e68:	c0010000 	andgt	r0, r1, r0
     e6c:	06510404 	ldrbeq	r0, [r1], -r4, lsl #8
     e70:	9d210000 	stcls	0, cr0, [r1, #-0]
     e74:	00000012 	andeq	r0, r0, r2, lsl r0
     e78:	00125c1d 	andseq	r5, r2, sp, lsl ip
     e7c:	000cfe00 	andeq	pc, ip, r0, lsl #28
int main (void) {
     e80:	000d0000 	andeq	r0, sp, r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	04c30100 	strbeq	r0, [r3], #256	; 0x100
     e88:	142d2504 	strtne	r2, [sp], #-1284	; 0xfffffafc
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8c:	0d020000 	stceq	0, cr0, [r2, #-0]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	04680000 	strbteq	r0, [r8], #-0
	system_init ();
     e94:	d5010000 	strle	r0, [r1, #-0]
	tcv_init ();
     e98:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	18000014 	stmdane	r0, {r2, r4}
     ea0:	8800000d 	stmdahi	r0, {r0, r2, r3}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	01000004 	tsteq	r0, r4
     ea8:	8e0404cc 	cdphi	4, 0, cr0, cr4, cr12, {6}
     eac:	21000006 	tstcs	r0, r6
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	0000145d 	andeq	r1, r0, sp, asr r4
     eb4:	125c1d00 	subsne	r1, ip, #0, 26
	delay (16, 0);
     eb8:	0d3c0000 	ldceq	0, cr0, [ip, #-0]
     ebc:	0d3e0000 	ldceq	0, cr0, [lr, #-0]
     ec0:	df010000 	svcle	0x00010000
	__pi_release ();
     ec4:	38250404 	stmdacc	r5!, {r2, sl}
     ec8:	5c000014 	stcpl	0, cr0, [r0], {20}
     ecc:	a000000d 	andge	r0, r0, sp
     ed0:	01000004 	tsteq	r0, r4
     ed4:	250404e8 	strcs	r0, [r4, #-1256]	; 0xfffffb18
     ed8:	0000127f 	andeq	r1, r0, pc, ror r2
     edc:	00000d60 	andeq	r0, r0, r0, ror #26
static void killev (__pi_pcb_t *pid) {
     ee0:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
	wfun = (aword)(pid->code);
     ee4:	0d04ee01 	stceq	14, cr14, [r4, #-4]
	for_all_tasks (i) {
     ee8:	00128e26 	andseq	r8, r2, r6, lsr #28
		for (j = 0; j < nevents (i); j++) {
     eec:	000d6a00 	andeq	r6, sp, r0, lsl #20
     ef0:	000d6e00 	andeq	r6, sp, r0, lsl #28
     ef4:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
			    || i->Events [j] . Event == wfun
     ef8:	0006dc04 	andeq	sp, r6, r4, lsl #24
		for (j = 0; j < nevents (i); j++) {
     efc:	129d2100 	addsne	r2, sp, #0, 2
			if (i->Events [j] . Event == (aword)pid
     f00:	25000000 	strcs	r0, [r0, #-0]
     f04:	00001443 	andeq	r1, r0, r3, asr #8
     f08:	00000d8e 	andeq	r0, r0, lr, lsl #27
				wakeupev (i, j);
     f0c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f10:	0404f701 	streq	pc, [r4], #-1793	; 0xfffff8ff
	for_all_tasks (i) {
     f14:	00144e20 	andseq	r4, r4, r0, lsr #28
}
     f18:	000d9000 	andeq	r9, sp, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	0004e800 	andeq	lr, r4, r0, lsl #16
static void qfree (aword *ch) {
     f20:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	00070804 	andeq	r0, r7, r4, lsl #16
	cc = (aword*)(mpools + MA_NP);
     f28:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
	m_setnextp (ch, chunk);
     f2c:	1d000000 	stcne	0, cr0, [r0, #-0]
	m_setnextp (cc, ch);
     f30:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
}
     f34:	00000d98 	muleq	r0, r8, sp
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f38:	00000d9c 	muleq	r0, ip, sp
     f3c:	0404fd01 	streq	pc, [r4], #-3329	; 0xfffff2ff
     f40:	00125c1d 	andseq	r5, r2, sp, lsl ip
			m_setnextp (cc, m_nextp (chunk));
     f44:	000d9c00 	andeq	r9, sp, r0, lsl #24
			m_size (chunk) += m_hdrlen + m_size (ch);
     f48:	000d9e00 	andeq	r9, sp, r0, lsl #28
     f4c:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     f50:	0b952604 	bleq	fe54a768 <_estack+0xde545768>
     f54:	0da60000 	stceq	0, cr0, [r6]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	0db20000 	ldceq	0, cr0, [r2]
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	0d010000 	stceq	0, cr0, [r1, #-0]
     f60:	075c0405 	ldrbeq	r0, [ip, -r5, lsl #8]
     f64:	11270000 			; <UNDEFINED> instruction: 0x11270000
			m_setnextp (cc, m_nextp (chunk));
     f68:	a6000013 			; <UNDEFINED> instruction: 0xa6000013
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	b000000d 	andlt	r0, r0, sp
     f70:	0100000d 	tsteq	r0, sp
     f74:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
     f78:	0000132d 	andeq	r1, r0, sp, lsr #6
     f7c:	00132021 	andseq	r2, r3, r1, lsr #32
     f80:	1d000000 	stcne	0, cr0, [r0, #-0]
			if (m_size (chunk) >= m_size (ch))
     f84:	0000125c 	andeq	r1, r0, ip, asr r2
     f88:	00000dda 	ldrdeq	r0, [r0], -sl
     f8c:	00000ddc 	ldrdeq	r0, [r0], -ip
		chunk = m_nextp (chunk))
     f90:	04053e01 	streq	r3, [r5], #-3585	; 0xfffff1ff
     f94:	0012741d 	andseq	r7, r2, sp, lsl r4
     f98:	000ddc00 	andeq	sp, sp, r0, lsl #24
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	000dec00 	andeq	lr, sp, r0, lsl #24
	diag_wait (a);
     fa0:	05410100 	strbeq	r0, [r1, #-256]	; 0xffffff00
	diag_wchar (c, a);
     fa4:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
     fa8:	0dec0000 	stcleq	0, cr0, [ip]
}
     fac:	0dee0000 	stcleq	0, cr0, [lr]
     fb0:	44010000 	strmi	r0, [r1], #-0
	syserror (ESTATE, "state");
     fb4:	7f250405 	svcvc	0x00250405
     fb8:	ee000012 	mcr	0, 0, r0, cr0, cr2, {0}
     fbc:	0000000d 	andeq	r0, r0, sp
     fc0:	01000005 	tsteq	r0, r5
void update_n_wake (word min, Boolean force) {
     fc4:	250b0547 	strcs	r0, [fp, #-1351]	; 0xfffffab9
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	0000146b 	andeq	r1, r0, fp, ror #8
     fcc:	00000df6 	strdeq	r0, [r0], -r6
     fd0:	00000518 	andeq	r0, r0, r8, lsl r5
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	04054b01 	streq	r4, [r5], #-2817	; 0xfffff4ff
     fd8:	ed280000 	stc	0, cr0, [r8, #-0]
     fdc:	5c000011 	stcpl	0, cr0, [r0], {17}
     fe0:	5e00000c 	cdppl	0, 0, cr0, cr0, cr12, {0}
     fe4:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
     fe8:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
     fec:	8a000011 	bhi	1038 <update_n_wake+0x74>
     ff0:	8c00000c 	stchi	0, cr0, [r0], {12}
     ff4:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
     ff8:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
     ffc:	10000011 	andne	r0, r0, r1, lsl r0
    1000:	1200000e 	andne	r0, r0, #14
    1004:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
		for_all_tasks (i) {
    1008:	1a000227 	bne	18ac <ser_inf+0x50>
	__pi_mintk = znew + min;
    100c:	00085a01 	andeq	r5, r8, r1, lsl #20
    1010:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0xffffff00
			if (!twaiting (i))
    1014:	00a70106 	adceq	r0, r7, r6, lsl #2
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1020:	9c010000 	stcls	0, cr0, [r1], {-0}
    1024:	00000812 	andeq	r0, r0, r2, lsl r8
    1028:	00637329 	rsbeq	r7, r3, r9, lsr #6
    102c:	07055e01 	streq	r5, [r5, -r1, lsl #28]
    1030:	000000a7 	andeq	r0, r0, r7, lsr #1
    1034:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1038:	077a2a00 	ldrbeq	r2, [sl, -r0, lsl #20]!
    103c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1040:	2a031404 	bcs	c6058 <__ccfg+0xa60b0>
    1044:	2b000008 	blcs	106c <update_n_wake+0xa8>
    1048:	00000a13 	andeq	r0, r0, r3, lsl sl
				wakeuptm (i);
    104c:	0104ad01 	tsteq	r4, r1, lsl #26
    1050:	1e012c00 	cdpne	12, 0, cr2, cr1, cr0, {0}
		for_all_tasks (i) {
    1054:	01000007 	tsteq	r0, r7
				d = i->Timer - znew;
    1058:	0106047e 	tsteq	r6, lr, ror r4
	...
		if ((word)(__pi_mintk - znew) < min) 
    1064:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
    1068:	c32d0000 			; <UNDEFINED> instruction: 0xc32d0000
    106c:	01000002 	tsteq	r0, r2
	__pi_old = znew;
    1070:	a719047e 			; <UNDEFINED> instruction: 0xa719047e
}
    1074:	d2000000 	andle	r0, r0, #0
	TCI_RUN_DELAY_TIMER;
    1078:	00000000 	andeq	r0, r0, r0
}
    107c:	05a7011e 	streq	r0, [r7, #286]!	; 0x11e
    1080:	01010000 	mrseq	r0, (UNDEF: 1)
    1084:	0a700604 	beq	1c0289c <__ccfg+0x1be28f4>
    1088:	0c280000 	stceq	0, cr0, [r8], #-0
    108c:	9c010000 	stcls	0, cr0, [r1], {-0}
void proceed (word state) {
    1090:	00000a1e 	andeq	r0, r0, lr, lsl sl
	prcdstate (__pi_curr, state);
    1094:	000b9a2e 	andeq	r9, fp, lr, lsr #20
    1098:	000ba000 	andeq	sl, fp, r0
	release;
    109c:	00088600 	andeq	r8, r8, r0, lsl #12
    10a0:	00691c00 	rsbeq	r1, r9, r0, lsl #24
void __pi_wait (aword event, word state) {
    10a4:	0b046b01 	bleq	11bcb0 <__ccfg+0xfbd08>
	sint j = nevents (__pi_curr);
    10a8:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (j >= MAX_EVENTS_PER_TASK)
    10ac:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    10b0:	0a9a0000 	beq	fe6810b8 <_estack+0xde67c0b8>
    10b4:	02880000 	addeq	r0, r8, #0
		syserror (ENEVENTS, "sw");
    10b8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    10bc:	54200204 	strtpl	r0, [r0], #-516	; 0xfffffdfc
	setestate (__pi_curr->Events [j], state, event);
    10c0:	9c00000f 	stcls	0, cr0, [r0], {15}
	incwait (__pi_curr);
    10c4:	a800000a 	stmdage	r0, {r1, r3}
	setestate (__pi_curr->Events [j], state, event);
    10c8:	01000002 	tsteq	r0, r2
}
    10cc:	1a02040b 	bne	82100 <__ccfg+0x62158>
    10d0:	23000009 	movwcs	r0, #9
    10d4:	000002a8 	andeq	r0, r0, r8, lsr #5
void __pi_trigger (aword event) {
    10d8:	000f612f 	andeq	r6, pc, pc, lsr #2
	for_all_tasks (i) {
    10dc:	0f6d3000 	svceq	0x006d3000
		for (j = 0; j < nevents (i); j++) {
    10e0:	02a80000 	adceq	r0, r8, #0
    10e4:	6e310000 	cdpvs	0, 3, cr0, cr1, cr0, {0}
    10e8:	e500000f 	str	r0, [r0, #-15]
    10ec:	22000000 	andcs	r0, r0, #0
			if (i->Events [j] . Event == event) {
    10f0:	000013c9 	andeq	r1, r0, r9, asr #7
    10f4:	00000aa6 	andeq	r0, r0, r6, lsr #21
    10f8:	000002c8 	andeq	r0, r0, r8, asr #5
				wakeupev (i, j);
    10fc:	e704fa01 	str	pc, [r4, -r1, lsl #20]
    1100:	21000008 	tstcs	r0, r8
	for_all_tasks (i) {
    1104:	000013e5 	andeq	r1, r0, r5, ror #7
}
    1108:	0013d821 	andseq	sp, r3, r1, lsr #16
aword __pi_join (aword pid, word st) {
    110c:	f3220000 	vhadd.u32	d0, d2, d0
	for_all_tasks (i) {
    1110:	aa000013 	bge	1164 <delay+0x34>
    1114:	e000000a 	and	r0, r0, sl
	return 0;
    1118:	01000002 	tsteq	r0, r2
		if ((aword)i == pid) {
    111c:	090104fe 	stmdbeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl}
			__pi_wait (pid, st);
    1120:	02210000 	eoreq	r0, r1, #0
}
    1124:	00000014 	andeq	r0, r0, r4, lsl r0
	for_all_tasks (i) {
    1128:	00141032 	andseq	r1, r4, r2, lsr r0
    112c:	000aae00 	andeq	sl, sl, r0, lsl #28
void delay (word d, word state) {
    1130:	0002f800 	andeq	pc, r2, r0, lsl #16
	settstate (__pi_curr, state);
    1134:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    1138:	00141f21 	andseq	r1, r4, r1, lsr #30
    113c:	00000000 	andeq	r0, r0, r0
    1140:	14102000 	ldrne	r2, [r0], #-0
	update_n_wake (d, YES);
    1144:	0aee0000 	beq	ffb8114c <_estack+0xdfb7c14c>
    1148:	03100000 	tsteq	r0, #0
	__pi_curr->Timer = __pi_old + d;
    114c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1150:	09350204 	ldmdbeq	r5!, {r2, r9}
	inctimer (__pi_curr);
    1154:	1f210000 	svcne	0x00210000
    1158:	00000014 	andeq	r0, r0, r4, lsl r0
    115c:	00141020 	andseq	r1, r4, r0, lsr #32
}
    1160:	000af000 	andeq	pc, sl, r0
    1164:	00033000 	andeq	r3, r3, r0
	if (fun == NULL)
    1168:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
		return (int) __pi_curr;
    116c:	00095002 	andeq	r5, r9, r2
    1170:	141f2100 	ldrne	r2, [pc], #-256	; 1178 <running+0x10>
	for_all_tasks (i)
    1174:	20000000 	andcs	r0, r0, r0
}
    1178:	000013f3 	strdeq	r1, [r0], -r3
		if (i->code == fun)
    117c:	00000b0a 	andeq	r0, r0, sl, lsl #22
	for_all_tasks (i)
    1180:	00000348 	andeq	r0, r0, r8, asr #6
    1184:	02040e01 	andeq	r0, r4, #1, 28
    1188:	0000096b 	andeq	r0, r0, fp, ror #18
int __pi_strlen (const char *s) {
    118c:	00140221 	andseq	r0, r4, r1, lsr #4
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	f3260000 	vhadd.u32	d0, d6, d0
}
    1194:	10000013 	andne	r0, r0, r3, lsl r0
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	1200000b 	andne	r0, r0, #11
	while (n--)
    119c:	0100000b 	tsteq	r0, fp
    11a0:	8602040e 	strhi	r0, [r2], -lr, lsl #8
		*dest++ = *src++;
    11a4:	21000009 	tstcs	r0, r9
    11a8:	00001402 	andeq	r1, r0, r2, lsl #8
    11ac:	12342000 	eorsne	r2, r4, #0
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	0b220000 	bleq	8811b8 <__ccfg+0x861210>
		syserror (EREQPAR, "addv");
    11b4:	03600000 	cmneq	r0, #0
		syserror (ERESOURCE, "addv");
    11b8:	1b010000 	blne	411c0 <__ccfg+0x21218>
	if (ioreq [loc] != NULL)
    11bc:	09a10204 	stmibeq	r1!, {r2, r9}
    11c0:	43210000 			; <UNDEFINED> instruction: 0x43210000
		syserror (ERESOURCE, "addv");
    11c4:	00000012 	andeq	r0, r0, r2, lsl r0
	ioreq [loc] = rf;
    11c8:	000ccb26 	andeq	ip, ip, r6, lsr #22
}
    11cc:	000b4c00 	andeq	r4, fp, r0, lsl #24
    11d0:	000b7600 	andeq	r7, fp, r0, lsl #12
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	043e0100 	ldrteq	r0, [lr], #-256	; 0xffffff00
    11d8:	0009c802 	andeq	ip, r9, r2, lsl #16
    11dc:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    11e0:	0b6a0000 	bleq	1a811e8 <__ccfg+0x1a61240>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e4:	03780000 	cmneq	r8, #0
    11e8:	01010000 	mrseq	r0, (UNDEF: 1)
    11ec:	26000203 	strcs	r0, [r0], -r3, lsl #4
		syserror (ENODEVICE, "io");
    11f0:	000012ab 	andeq	r1, r0, fp, lsr #5
    11f4:	00000b86 	andeq	r0, r0, r6, lsl #23
	if (len == 0)
    11f8:	00000b9a 	muleq	r0, sl, fp
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	03045101 	movweq	r5, #16641	; 0x4101
    1200:	000009ef 	andeq	r0, r0, pc, ror #19
	if (ret >= 0)
    1204:	0012b61d 	andseq	fp, r2, sp, lsl r6
	if (ret == -1) {
    1208:	000b8600 	andeq	r8, fp, r0, lsl #12
    120c:	000b8a00 	andeq	r8, fp, r0, lsl #20
		if (retry == WNONE)
    1210:	01140b00 	tsteq	r4, r0, lsl #22
		iowait (dev, operation, retry);
    1214:	95330005 	ldrls	r0, [r3, #-5]!
    1218:	a000000b 	andge	r0, r0, fp
    121c:	9000000b 	andls	r0, r0, fp
			release;
    1220:	01000003 	tsteq	r0, r3
	if (ret == -2) {
    1224:	33020472 	movwcc	r0, #9330	; 0x2472
		if (retry != WNONE) {
    1228:	00001311 	andeq	r1, r0, r1, lsl r3
    122c:	00000ba0 	andeq	r0, r0, r0, lsr #23
			iowait (dev, operation, retry);
    1230:	00000390 	muleq	r0, r0, r3
    1234:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
			(ioreq [dev]) (NONE, buf, len);
    1238:	00132d21 	andseq	r2, r3, r1, lsr #26
    123c:	13202100 	nopne	{0}	; <UNPREDICTABLE>
    1240:	00000000 	andeq	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    1244:	81012c00 	tsthi	r1, r0, lsl #24
    1248:	01000008 	tsteq	r0, r8
    124c:	010603ed 	smlatteq	r6, sp, r3, r0
}
    1250:	00000990 	muleq	r0, r0, r9
	if (retry != WNONE) {
    1254:	000009cc 	andeq	r0, r0, ip, asr #19
		delay (-ret - 2, retry);
    1258:	0aa79c01 	beq	fe9e8264 <_estack+0xde9e3264>
    125c:	76340000 	ldrtvc	r0, [r4], -r0
    1260:	01006c61 	tsteq	r0, r1, ror #24
    1264:	8d1c03ed 	ldchi	3, cr0, [ip, #-948]	; 0xfffffc4c
		release;
    1268:	01000000 	mrseq	r0, (UNDEF: 0)
    126c:	00692950 	rsbeq	r2, r9, r0, asr r9
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1270:	0603ef01 	streq	lr, [r3], -r1, lsl #30
    1274:	0000008d 	andeq	r0, r0, sp, lsl #1
    1278:	00000103 	andeq	r0, r0, r3, lsl #2
    127c:	006e6229 	rsbeq	r6, lr, r9, lsr #4
    1280:	0803f001 	stmdaeq	r3, {r0, ip, sp, lr, pc}
		syserror (ERESOURCE, "mal1");
    1284:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1288:	00000121 	andeq	r0, r0, r1, lsr #2
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    128c:	0011ed25 	andseq	lr, r1, r5, lsr #26
    1290:	00099000 	andeq	r9, r9, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1294:	00024800 	andeq	r4, r2, r0, lsl #16
	m_size (mpools [0]) = mlen - m_hdrlen;
    1298:	03f20100 	mvnseq	r0, #0, 2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a0:	09960000 	ldmibeq	r6, {}	; <UNPREDICTABLE>
    12a4:	02600000 	rsbeq	r0, r0, #0
}
    12a8:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    12ac:	0a950303 	beq	fe541ec0 <_estack+0xde53cec0>
    12b0:	bb350000 	bllt	d412b8 <__ccfg+0xd21310>
    12b4:	21000013 	tstcs	r0, r3, lsl r0
    12b8:	00000001 	andeq	r0, r0, r1
    12bc:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
void __pi_free (aword *ch) {
    12c0:	0009ba00 	andeq	fp, r9, r0, lsl #20
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	0009bc00 	andeq	fp, r9, r0, lsl #24
    12c8:	03f90100 	mvnseq	r0, #0, 2
		syserror (EMALLOC, "malg");
    12cc:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
    12d0:	00000825 	andeq	r0, r0, r5, lsr #16
	mcfree [MA_NP] += m_size (ch);
    12d4:	0603da01 	streq	sp, [r3], -r1, lsl #20
		m_size (ch) ^= MALLOC_UMASK;
    12d8:	00094c01 	andeq	r4, r9, r1, lsl #24
    12dc:	00099000 	andeq	r9, r9, r0
	mcfree [MA_NP] += m_size (ch);
    12e0:	2c9c0100 	ldfcss	f0, [ip], {0}
	QFREE;
    12e4:	3400000b 	strcc	r0, [r0], #-11
	if (mevent [MA_NP] . nwait) {
    12e8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    12ec:	1c03da01 			; <UNDEFINED> instruction: 0x1c03da01
		trigger ((aword)(&(mevent [MA_NP])));
    12f0:	0000008d 	andeq	r0, r0, sp, lsl #1
		mevent [MA_NP] . nwait --;
    12f4:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
}
    12f8:	03dc0100 	bicseq	r0, ip, #0, 2
    12fc:	00008d06 	andeq	r8, r0, r6, lsl #26
    1300:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
    1304:	03dd0100 	bicseq	r0, sp, #0, 2
void kill (aword pid) {
    1308:	0000df08 	andeq	sp, r0, r8, lsl #30
		pid = (aword) __pi_curr;
    130c:	00013400 	andeq	r3, r1, r0, lsl #8
	j = NULL;
    1310:	11ed2500 	mvnne	r2, r0, lsl #10
	for_all_tasks (i) {
    1314:	094c0000 	stmdbeq	ip, {}^	; <UNPREDICTABLE>
	syserror (EREQPAR, "kpi");
    1318:	02000000 	andeq	r0, r0, #0
    131c:	df010000 	svcle	0x00010000
		if ((aword)i == pid) {
    1320:	ac200203 	sfmge	f0, 4, [r0], #-12
    1324:	50000013 	andpl	r0, r0, r3, lsl r0
				__PCB = i->Next;
    1328:	18000009 	stmdane	r0, {r0, r3}
			killev (i);
    132c:	01000002 	tsteq	r0, r2
			ufree (i);
    1330:	1a0303e2 	bne	c22c0 <__ccfg+0xa2318>
			if (i == __pi_curr)
    1334:	3500000b 	strcc	r0, [r0, #-11]
    1338:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
				release;
    133c:	00000147 	andeq	r0, r0, r7, asr #2
				j->Next = i->Next;
    1340:	11f71d00 	mvnsne	r1, r0, lsl #26
    1344:	097e0000 	ldmdbeq	lr!, {}^	; <UNPREDICTABLE>
    1348:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
}
    134c:	e6010000 	str	r0, [r1], -r0
    1350:	1e000203 	cdpne	2, 0, cr0, cr0, cr3, {0}
    1354:	00089201 	andeq	r9, r8, r1, lsl #4
void killall (fsmcode fun) {
    1358:	03c60100 	biceq	r0, r6, #0, 2
	j = NULL;
    135c:	0009cc06 	andeq	ip, r9, r6, lsl #24
	for (i = __PCB; i != NULL; ) {
    1360:	000a7000 	andeq	r7, sl, r0
			if (i == __pi_curr)
    1364:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
	for (i = __PCB; i != NULL; ) {
    1368:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
	if (rel)
    136c:	000009de 	ldrdeq	r0, [r0], -lr
		release;
    1370:	00000a0c 	andeq	r0, r0, ip, lsl #20
		if (i->code == fun) {
    1374:	00000b6e 	andeq	r0, r0, lr, ror #22
    1378:	07006a36 	smladxeq	r0, r6, sl, r6
			if (j == NULL)
    137c:	008d0203 	addeq	r0, sp, r3, lsl #4
				__PCB = k;
    1380:	015a0000 	cmpeq	sl, r0
			if (i == __pi_curr)
    1384:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
				rel = YES;
    1388:	02030700 	andeq	r0, r3, #0, 14
			killev (i);
    138c:	000003f4 	strdeq	r0, [r0], -r4
			ufree (i);
    1390:	0000016d 	andeq	r0, r0, sp, ror #2
			i = k;
    1394:	0a1e3700 	beq	78ef9c <__ccfg+0x76eff4>
    1398:	0a4c0000 	beq	13013a0 <__ccfg+0x12e13f8>
				j->Next = k;
    139c:	6a360000 	bvs	d813a4 <__ccfg+0xd613fc>
    13a0:	02020800 	andeq	r0, r2, #0, 16
}
    13a4:	0000008d 	andeq	r0, r0, sp, lsl #1
    13a8:	00000180 	andeq	r0, r0, r0, lsl #3
    13ac:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
	if (size < 8)
    13b0:	03f40202 	mvnseq	r0, #536870912	; 0x20000000
		_size = 2;
    13b4:	01930000 	orrseq	r0, r3, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	00000000 	andeq	r0, r0, r0
		_size = (((aword)size) + 3) >> 2;
    13bc:	0006a638 	andeq	sl, r6, r8, lsr r6
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c0:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
		_size = (((aword)size) + 3) >> 2;
    13c4:	011e0314 	tsteq	lr, r4, lsl r3
		if (mevent [MA_NP] . nfail != 255)
    13c8:	00000a03 	andeq	r0, r0, r3, lsl #20
    13cc:	06038201 	streq	r8, [r3], -r1, lsl #4
			mevent [MA_NP] . nfail ++;
    13d0:	0000088c 	andeq	r0, r0, ip, lsl #17
		mnfree [MA_NP] = 0;
    13d4:	0000094c 	andeq	r0, r0, ip, asr #18
    13d8:	0c289c01 	stceq	12, cr9, [r8], #-4
		if (m_magic (chunk) != MALLOC_MAGIC)
    13dc:	b82e0000 	stmdalt	lr!, {}	; <UNPREDICTABLE>
    13e0:	e6000008 	str	r0, [r0], -r8
			syserror (EMALLOC, "malc");
    13e4:	e3000008 	movw	r0, #8
    13e8:	2900000b 	stmdbcs	r0, {r0, r1, r3}
		if (m_size (chunk) >= _size)
    13ec:	8901006a 	stmdbhi	r1, {r1, r3, r5, r6}
    13f0:	008d0303 	addeq	r0, sp, r3, lsl #6
		chunk = m_nextp (chunk)) {
    13f4:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
		m_setnextp (cc, m_nextp (chunk));
    13f8:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13fc:	03890100 	orreq	r0, r9, #0, 2
    1400:	0003f403 	andeq	pc, r3, r3, lsl #8
			m_size (chunk) = _size;
    1404:	0001b900 	andeq	fp, r1, r0, lsl #18
			cc = chunk + _size + m_hdrlen;
    1408:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    140c:	0b000001 	bleq	1418 <__pi_malloc+0x68>
			m_size (cc) = waste - m_hdrlen;
    1410:	2900000c 	stmdbcs	r0, {r2, r3}
			QFREE;
    1414:	8f01006a 	svchi	0x0001006a
		mevent [MA_NP] . nfail = 0;
    1418:	008d0303 	addeq	r0, sp, r3, lsl #6
		mcfree [MA_NP] -= m_size (chunk);
    141c:	01cc0000 	biceq	r0, ip, r0
    1420:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    1424:	038f0100 	orreq	r0, pc, #0, 2
    1428:	0003f403 	andeq	pc, r3, r3, lsl #8
		m_size (chunk) |= MALLOC_UMASK;
    142c:	0001df00 	andeq	sp, r1, r0, lsl #30
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	e7330000 	ldr	r0, [r3, -r0]!
		m_size (chunk) |= MALLOC_UMASK;
    1434:	8c000012 	stchi	0, cr0, [r0], {18}
			mnfree [MA_NP] = mcfree [MA_NP];
    1438:	c8000008 	stmdagt	r0, {r3}
}
    143c:	01000001 	tsteq	r0, r1
    1440:	21020384 	smlabbcs	r2, r4, r3, r0
    1444:	00001303 	andeq	r1, r0, r3, lsl #6
    1448:	0012f621 	andseq	pc, r2, r1, lsr #12
    144c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    1450:	000007aa 	andeq	r0, r0, sl, lsr #15
    1454:	0d037d01 	stceq	13, cr7, [r3, #-4]
aword __pi_fork (fsmcode func, aword data) {
    1458:	00043001 	andeq	r3, r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    145c:	00043c00 	andeq	r3, r4, r0, lsl #24
    1460:	529c0100 	addspl	r0, ip, #0, 2
    1464:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
		if ((j = __PCB) == NULL)
    1468:	00000961 	andeq	r0, r0, r1, ror #18
	i->Next = NULL;
    146c:	1f037d01 	svcne	0x00037d01
	i->data = data;
    1470:	0000008d 	andeq	r0, r0, sp, lsl #1
		if ((j = __PCB) == NULL)
    1474:	000001f2 	strdeq	r0, [r0], -r2
}
    1478:	092e3a00 	stmdbeq	lr!, {r9, fp, ip, sp}
			for (; j->Next != NULL; j = j->Next);
    147c:	10010000 	andne	r0, r1, r0
    1480:	8d010c03 	stchi	12, cr0, [r1, #-12]
	return (aword) i;
    1484:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1488:	8c000007 	stchi	0, cr0, [r0], {7}
	if (mevent [MA_NP] . nwait != 255)
    148c:	01000008 	tsteq	r0, r8
    1490:	000ccb9c 	muleq	ip, ip, fp
    1494:	072b2d00 	streq	r2, [fp, -r0, lsl #26]!
		mevent [MA_NP] . nwait ++;
    1498:	10010000 	andne	r0, r1, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    149c:	008d1e03 	addeq	r1, sp, r3, lsl #28
    14a0:	02100000 	andseq	r0, r0, #0
void diag (const char *mess, ...) {
    14a4:	623b0000 	eorsvs	r0, fp, #0
    14a8:	01006675 	tsteq	r0, r5, ror r6
    14ac:	c92f0310 	stmdbgt	pc!, {r4, r8, r9}	; <UNPREDICTABLE>
	diag_disable_int (a, is);
    14b0:	23000001 	movwcs	r0, #1
    14b4:	3b000002 	blcc	14c4 <diag+0x20>
    14b8:	006e656c 	rsbeq	r6, lr, ip, ror #10
				d = (bc == 16) ? 10000 : 1000000000;
    14bc:	38031001 	stmdacc	r3, {r0, ip}
	diag_disable_int (a, is);
    14c0:	0000008d 	andeq	r0, r0, sp, lsl #1
	while (*mess != '\0') {
    14c4:	000002c5 	andeq	r0, r0, r5, asr #5
	dgout ('\r');
    14c8:	0006522b 	andeq	r5, r6, fp, lsr #4
	dgout ('\n');
    14cc:	03180100 	tsteq	r8, #0, 2
    14d0:	07532b01 	ldrbeq	r2, [r3, -r1, lsl #22]
    14d4:	3d010000 	stccc	0, cr0, [r1, #-0]
	diag_wait (a);
    14d8:	44270103 	strtmi	r0, [r7], #-259	; 0xfffffefd
	diag_enable_int (a, is);
    14dc:	5e00000d 	cdppl	0, 0, cr0, cr0, cr13, {0}
    14e0:	60000008 	andvs	r0, r0, r8
}
    14e4:	01000008 	tsteq	r0, r8
    14e8:	21150365 	tstcs	r5, r5, ror #6
    14ec:	00000d58 	andeq	r0, r0, r8, asr sp
		if (*mess == '%') {
    14f0:	f4380000 			; <UNDEFINED> instruction: 0xf4380000
    14f4:	01000007 	tsteq	r0, r7
			if (*mess == 'l') {
    14f8:	010d02fc 	strdeq	r0, [sp, -ip]
    14fc:	0007f53c 	andeq	pc, r7, ip, lsr r5	; <UNPREDICTABLE>
				mess++;
    1500:	02f00100 	rscseq	r0, r0, #0, 2
				val = va_arg (ap, lword);
    1504:	0007440d 	andeq	r4, r7, sp, lsl #8
				bc = 32;
    1508:	00077c00 	andeq	r7, r7, r0, lsl #24
				bc = 16;
    150c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
			switch (*mess) {
    1510:	2000000d 	andcs	r0, r0, sp
    1514:	0000133b 	andeq	r1, r0, fp, lsr r3
    1518:	00000744 	andeq	r0, r0, r4, asr #14
				dgout ('%');
    151c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1520:	0202f501 	andeq	pc, r2, #4194304	; 0x400000
				dgout (*mess);
    1524:	00000d07 	andeq	r0, r0, r7, lsl #26
    1528:	00134a21 	andseq	r4, r3, r1, lsr #20
			switch (*mess) {
    152c:	75260000 	strvc	r0, [r6, #-0]!
					v = __pi_hex_enc_table [
    1530:	50000013 	andpl	r0, r0, r3, lsl r0
					i += 4;
    1534:	56000007 	strpl	r0, [r0], -r7
					(val >> (bc - i)) & 0xf];
    1538:	01000007 	tsteq	r0, r7
    153c:	2c0202f6 	sfmcs	f0, 4, [r2], {246}	; 0xf6
					dgout (v);
    1540:	2100000d 	tstcs	r0, sp
    1544:	0000139e 	muleq	r0, lr, r3
				while (i < bc) {
    1548:	00139121 	andseq	r9, r3, r1, lsr #2
			mess++;
    154c:	13842100 	orrne	r2, r4, #0, 2
					d /= 10;
    1550:	27000000 	strcs	r0, [r0, -r0]
				if ((val >> (bc - 1)) & 1) {
    1554:	000012ca 	andeq	r1, r0, sl, asr #5
    1558:	00000756 	andeq	r0, r0, r6, asr r7
					dgout ('-');
    155c:	00000760 	andeq	r0, r0, r0, ror #14
    1560:	0202f701 	andeq	pc, r2, #262144	; 0x40000
						val |= 0xffff0000;
    1564:	0012d921 	andseq	sp, r2, r1, lsr #18
    1568:	3d000000 	stccc	0, cr0, [r0, #-0]
    156c:	00062001 	andeq	r2, r6, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1570:	02eb0100 	rsceq	r0, fp, #0, 2
    1574:	00a70106 	adceq	r0, r7, r6, lsl #2
    1578:	65010000 	strvs	r0, [r1, #-0]
					v = (word) (val / d);
    157c:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
					if (v || d == 1) break;
    1580:	01006175 	tsteq	r0, r5, ror r1
    1584:	652702eb 	strvs	r0, [r7, #-747]!	; 0xfffffd15
					d /= 10;
    1588:	0000000d 	andeq	r0, r0, sp
				d = (bc == 16) ? 10000 : 1000000000;
    158c:	02260407 	eoreq	r0, r6, #117440512	; 0x7000000
					dgout (v + '0');
    1590:	011a0000 	tsteq	sl, r0
    1594:	000006d9 	ldrdeq	r0, [r0], -r9
    1598:	0902d401 	stmdbeq	r2, {r0, sl, ip, lr, pc}
					d /= 10;
    159c:	00009b01 	andeq	r9, r0, r1, lsl #22
					val = val - (v * d);
    15a0:	0006f000 	andeq	pc, r6, r0
					if (d == 0) break;
    15a4:	00074400 	andeq	r4, r7, r0, lsl #8
					v = (word) (val / d);
    15a8:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    15ac:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
				if (bc == 16)
    15b0:	0000062d 	andeq	r0, r0, sp, lsr #12
				d = (bc == 16) ? 10000 : 1000000000;
    15b4:	2102d401 	tstcs	r2, r1, lsl #8
					val &= 0xffff;
    15b8:	000000a7 	andeq	r0, r0, r7, lsr #1
					dgout (*s);
    15bc:	00000351 	andeq	r0, r0, r1, asr r3
					s++;
    15c0:	0061753b 	rsbeq	r7, r1, fp, lsr r5
				while (*s != '\0') {
    15c4:	2f02d401 	svccs	0x0002d401
    15c8:	00000dc1 	andeq	r0, r0, r1, asr #27
			dgout (*mess++);
    15cc:	00000364 	andeq	r0, r0, r4, ror #6
    15d0:	00135833 	andseq	r5, r3, r3, lsr r8
    15d4:	00071000 	andeq	r1, r7, r0
    15d8:	00019800 	andeq	r9, r1, r0, lsl #16
    15dc:	02e60100 	rsceq	r0, r6, #0, 2
}
    15e0:	13672102 	cmnne	r7, #-2147483648	; 0x80000000
    while(1)
    15e4:	00000000 	andeq	r0, r0, r0
{
    15e8:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
    SetupTrimDevice();
    15ec:	011a0000 	tsteq	sl, r0
    pui32Src = &_etext;
    15f0:	00000a29 	andeq	r0, r0, r9, lsr #20
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f4:	06018a01 	streq	r8, [r1], -r1, lsl #20
    __asm("    ldr     r0, =_bss\n"
    15f8:	0000a701 	andeq	sl, r0, r1, lsl #14
    15fc:	0006a000 	andeq	sl, r6, r0
    1600:	0006f000 	andeq	pc, r6, r0
    1604:	0f9c0100 	svceq	0x009c0100
    1608:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
   main();
    160c:	00000801 	andeq	r0, r0, r1, lsl #16
    FaultISR();
    1610:	26018a01 	strcs	r8, [r1], -r1, lsl #20
        *pui32Dest++ = *pui32Src++;
    1614:	0000009b 	muleq	r0, fp, r0
    1618:	00000377 	andeq	r0, r0, r7, ror r3
    161c:	0058453f 	subseq	r4, r8, pc, lsr r5
    1620:	0101a401 	tsteq	r1, r1, lsl #8
    1624:	000f461d 	andeq	r4, pc, sp, lsl r6	; <UNPREDICTABLE>
    1628:	0006b400 	andeq	fp, r6, r0, lsl #8
    162c:	0006be00 	andeq	fp, r6, r0, lsl #28
    1630:	019c0100 	orrseq	r0, ip, r0, lsl #2
static byte get_byte () {
    1634:	011e001a 	tsteq	lr, sl, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1638:	000007b7 			; <UNDEFINED> instruction: 0x000007b7
    163c:	06013801 	streq	r3, [r1], -r1, lsl #16
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1640:	0000058c 	andeq	r0, r0, ip, lsl #11
    1644:	000006a0 	andeq	r0, r0, r0, lsr #13
		if (ee_inp)
    1648:	0ec19c01 	cdpeq	12, 12, cr9, cr1, cr1, {0}
			b |= 1;
    164c:	cc400000 	margt	acc0, r0, r0
    1650:	01000008 	tsteq	r0, r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1654:	df08013a 	svcle	0x0008013a
	for (b = 0, i = 0; i < 8; i++) {
    1658:	95000000 	strls	r0, [r0, #-0]
}
    165c:	41000003 	tstmi	r0, r3
    1660:	00545545 	subseq	r5, r4, r5, asr #10
    1664:	01016801 	tsteq	r1, r1, lsl #16
static void put_byte (byte b) {
    1668:	000005da 	ldrdeq	r0, [r0], -sl
    166c:	00018023 	andeq	r8, r1, r3, lsr #32
    1670:	07354000 	ldreq	r4, [r5, -r0]!
    1674:	47010000 	strmi	r0, [r1, -r0]
		if (b & 0x80)
    1678:	009b0b01 	addseq	r0, fp, r1, lsl #22
    167c:	03e00000 	mvneq	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1680:	10420000 	subne	r0, r2, r0
	for (i = 0; i < 8; i++) {
    1684:	f8000014 			; <UNDEFINED> instruction: 0xf8000014
		b <<= 1;
    1688:	00000005 	andeq	r0, r0, r5
	for (i = 0; i < 8; i++) {
    168c:	05000006 	streq	r0, [r0, #-6]
}
    1690:	0e75060d 	cdpeq	6, 7, cr0, cr5, cr13, {0}
    1694:	1f210000 	svcne	0x00210000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1698:	00000014 	andeq	r0, r0, r4, lsl r0
    169c:	00141042 	andseq	r1, r4, r2, asr #32
	put_byte (cmd);
    16a0:	00060400 	andeq	r0, r6, r0, lsl #8
    16a4:	00060c00 	andeq	r0, r6, r0, lsl #24
}
    16a8:	060f0500 	streq	r0, [pc], -r0, lsl #10
    16ac:	00000e8f 	andeq	r0, r0, pc, lsl #29
static void wwait (word st, word del) {
    16b0:	00141f21 	andseq	r1, r4, r1, lsr #30
    16b4:	f3420000 	vhadd.u8	d16, d2, d0
    16b8:	52000013 	andpl	r0, r0, #19
	while (dopen && (rdsr () & 1)) {
    16bc:	5a000006 	bpl	16dc <wwait+0x2c>
    16c0:	05000006 	streq	r0, [r0, #-6]
    16c4:	0ea90617 	mcreq	6, 5, r0, cr9, cr7, {0}
    16c8:	02210000 	eoreq	r0, r1, #0
	put_byte (CMD_RDSR);
    16cc:	00000014 	andeq	r0, r0, r4, lsl r0
	r = get_byte ();
    16d0:	0013f343 	andseq	pc, r3, r3, asr #6
    16d4:	00065e00 	andeq	r5, r6, r0, lsl #28
	while (dopen && (rdsr () & 1)) {
    16d8:	00066600 	andeq	r6, r6, r0, lsl #12
}
    16dc:	06190500 	ldreq	r0, [r9], -r0, lsl #10
		if (st == WNONE)
    16e0:	00140221 	andseq	r0, r4, r1, lsr #4
    16e4:	00000000 	andeq	r0, r0, r0
			mdelay (1);
    16e8:	0869011e 	stmdaeq	r9!, {r1, r2, r3, r4, r8}^
    16ec:	2b010000 	blcs	416f4 <__ccfg+0x2174c>
			delay (del, st);
    16f0:	05640601 	strbeq	r0, [r4, #-1537]!	; 0xfffff9ff
    16f4:	058c0000 	streq	r0, [ip]
			release;
    16f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    16fc:	00000ef1 	strdeq	r0, [r0], -r1
    1700:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
static void ready () {
    1704:	00056c00 	andeq	r6, r5, r0, lsl #24
	if (dopen) {
    1708:	00016800 	andeq	r6, r1, r0, lsl #16
		wwait (WNONE, 1);
    170c:	01320100 	teqeq	r2, r0, lsl #2
    1710:	0f38212c 	svceq	0x0038212c
    1714:	00000000 	andeq	r0, r0, r0
	dstat = 0;
    1718:	07ce011e 	bfieq	r0, lr, #2, #13
}
    171c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1720:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    1724:	05640000 	strbeq	r0, [r4, #-0]!
	udelay (1);
    1728:	9c010000 	stcls	0, cr0, [r1], {-0}
    172c:	00000f25 	andeq	r0, r0, r5, lsr #30
	udelay (1);
    1730:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
		dopen = DOPEN_TEMP;
    1734:	00053600 	andeq	r3, r5, r0, lsl #12
    1738:	00014800 	andeq	r4, r1, r0, lsl #16
    173c:	01250100 			; <UNDEFINED> instruction: 0x01250100
    1740:	0f38352c 	svceq	0x0038352c
static void cclose () {
    1744:	041f0000 	ldreq	r0, [pc], #-0	; 174c <cclose+0x8>
	if (dopen == DOPEN_TEMP) {
    1748:	00000000 	andeq	r0, r0, r0
    174c:	0008c544 	andeq	ip, r8, r4, asr #10
		wwait (WNONE, 1);
    1750:	01170100 	tsteq	r7, r0, lsl #2
    1754:	00df0115 	sbcseq	r0, pc, r5, lsl r1	; <UNPREDICTABLE>
	cmd_0 (CMD_DP);
    1758:	46030000 	strmi	r0, [r3], -r0
    175c:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
		dopen = 0;
    1760:	006c6564 	rsbeq	r6, ip, r4, ror #10
}
    1764:	22011701 	andcs	r1, r1, #262144	; 0x40000
word ee_open () {
    1768:	000000a7 	andeq	r0, r0, r7, lsr #1
	ready ();
    176c:	05424500 	strbeq	r4, [r2, #-1280]	; 0xfffffb00
	dopen = DOPEN_PERM;
    1770:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1774:	00a71401 	adceq	r1, r7, r1, lsl #8
}
    1778:	46030000 	strmi	r0, [r3], -r0
	if (dopen) {
    177c:	00000a1d 	andeq	r0, r0, sp, lsl sl
    1780:	0314ee01 	tsteq	r4, #1, 28
		dopen = DOPEN_TEMP;
    1784:	00000f7a 	andeq	r0, r0, sl, ror pc
		cclose ();
    1788:	6e697047 	cdpvs	0, 6, cr7, cr9, cr7, {2}
}
    178c:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
int ser_in (word st, char *buf, int len) {
    1790:	0000008d 	andeq	r0, r0, sp, lsl #1
    1794:	00694748 	rsbeq	r4, r9, r8, asr #14
	if (len == 0)
    1798:	8d0bf401 	cfstrshi	mvf15, [fp, #-4]
	if (__inpline == NULL) {
    179c:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    17a0:	53014900 	movwpl	r4, #6400	; 0x1900
    17a4:	01000009 	tsteq	r0, r9
			prcs = runthread (__inserial);
    17a8:	d0010698 	mulle	r1, r8, r6
    17ac:	24000004 	strcs	r0, [r0], #-4
			if (prcs == 0) {
    17b0:	01000005 	tsteq	r0, r5
				npwait (st);
    17b4:	0010249c 	mulseq	r0, ip, r4
		release;
    17b8:	63654a00 	cmnvs	r5, #0, 20
		join (prcs, st);
    17bc:	1a980100 	bne	fe601bc4 <_estack+0xde5fcbc4>
    17c0:	000000a7 	andeq	r0, r0, r7, lsr #1
	if (*__inpline == NULL) // bin cmd
    17c4:	00000432 	andeq	r0, r0, r2, lsr r4
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17c8:	01006d4a 	tsteq	r0, sl, asr #26
	if (prcs >= len)
    17cc:	10242a98 	mlane	r4, r8, sl, r2
		prcs = len-1;
    17d0:	04450000 	strbeq	r0, [r5], #-0
	memcpy (buf, __inpline, prcs);
    17d4:	ed280000 	stc	0, cr0, [r8, #-0]
    17d8:	dc000011 	stcle	0, cr0, [r0], {17}
    17dc:	de000004 	cdple	0, 0, cr0, cr0, cr4, {0}
	ufree (__inpline);
    17e0:	01000004 	tsteq	r0, r4
	__inpline = NULL;
    17e4:	102202a8 	eorne	r0, r2, r8, lsr #5
	if (*buf) // if it's NULL, it's a bin cmd
    17e8:	de000014 	mcrle	0, 0, r0, cr0, cr4, {0}
		buf [prcs] = '\0';
    17ec:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
}
    17f0:	01000000 	mrseq	r0, (UNDEF: 0)
		prcs = strlen (__inpline);
    17f4:	0fd903b8 	svceq	0x00d903b8
    17f8:	1f210000 	svcne	0x00210000
		return 0;
    17fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1800:	00141022 	andseq	r1, r4, r2, lsr #32
    1804:	0004e400 	andeq	lr, r4, r0, lsl #8
int ser_outf (word st, const char *m, ...) {
    1808:	00011800 	andeq	r1, r1, r0, lsl #16
    180c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
	if ((prcs = running (__outserial)) != 0) {
    1810:	00000ff3 	strdeq	r0, [r0], -r3
    1814:	00141f21 	andseq	r1, r4, r1, lsr #30
		join (prcs, st);
    1818:	f3220000 	vhadd.u32	d0, d2, d0
    181c:	fc000013 	stc2	0, cr0, [r0], {19}
		release;
    1820:	30000004 	andcc	r0, r0, r4
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1824:	01000001 	tsteq	r0, r1
    1828:	100d03b8 			; <UNDEFINED> instruction: 0x100d03b8
    182c:	02210000 	eoreq	r0, r1, #0
		umwait (st);
    1830:	00000014 	andeq	r0, r0, r4, lsl r0
    1834:	0013f343 	andseq	pc, r3, r3, asr #6
	if (runstrand (__outserial, buf) == 0) {
    1838:	00050200 	andeq	r0, r5, r0, lsl #4
    183c:	00050400 	andeq	r0, r5, r0, lsl #8
    1840:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
		ufree (buf);
    1844:	00140221 	andseq	r0, r4, r1, lsr #4
		npwait (st);
    1848:	07000000 	streq	r0, [r0, -r0]
}
    184c:	0001d604 	andeq	sp, r1, r4, lsl #12
    1850:	f4014900 	vst2.8	{d4,d6}, [r1], r0
    1854:	01000008 	tsteq	r0, r8
    1858:	00010672 	andeq	r0, r1, r2, ror r6
int ser_inf (word st, const char *fmt, ...) {
    185c:	00000000 	andeq	r0, r0, r0
    1860:	01000000 	mrseq	r0, (UNDEF: 0)
	if (fmt == NULL)
    1864:	0010ca9c 	mulseq	r0, ip, sl
	if (__inpline == NULL) {
    1868:	74734a00 	ldrbtvc	r4, [r3], #-2560	; 0xfffff600
		if ((prcs = running (__inserial)) == 0) {
    186c:	18720100 	ldmdane	r2!, {r8}^
    1870:	000000a7 	andeq	r0, r0, r7, lsr #1
			prcs = runthread (__inserial);
    1874:	00000463 	andeq	r0, r0, r3, ror #8
    1878:	6e65734a 	cdpvs	3, 6, cr7, cr5, cr10, {2}
			if (prcs == 0) {
    187c:	28720100 	ldmdacs	r2!, {r8}^
				npwait (st);
    1880:	00000244 	andeq	r0, r0, r4, asr #4
		release;
    1884:	00000476 	andeq	r0, r0, r6, ror r4
		join (prcs, st);
    1888:	6c61764a 	stclvs	6, cr7, [r1], #-296	; 0xfffffed8
    188c:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
	va_start (ap, fmt);
    1890:	000000fc 	strdeq	r0, [r0], -ip
	prcs = vscan (__inpline, fmt, ap);
    1894:	00000494 	muleq	r0, r4, r4
    1898:	00055d4b 	andeq	r5, r5, fp, asr #26
	ufree (__inpline);
    189c:	0e740100 	rpweqs	f0, f4, f0
	__inpline = NULL;
    18a0:	000000c9 	andeq	r0, r0, r9, asr #1
}
    18a4:	00000305 	andeq	r0, r0, r5, lsl #6
    18a8:	404c0000 	submi	r0, ip, r0
    18ac:	0100000a 	tsteq	r0, sl
		return 0;
    18b0:	00000178 	andeq	r0, r0, r8, ror r1
    18b4:	204d0000 	subcs	r0, sp, r0
    18b8:	00000012 	andeq	r0, r0, r2, lsl r0
strand (__outserial, const char*)
    18bc:	30000000 	andcc	r0, r0, r0
    18c0:	01000005 	tsteq	r0, r5
    18c4:	01420381 	smlalbbeq	r0, r2, r1, r3
    18c8:	00000012 	andeq	r0, r0, r2, lsl r0
endstrand
    18cc:	00000000 	andeq	r0, r0, r0
    18d0:	01000000 	mrseq	r0, (UNDEF: 0)
	ptr = data;
    18d4:	10b9127e 	adcsne	r1, r9, lr, ror r2
    18d8:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
	if (*ptr)
    18dc:	00000012 	andeq	r0, r0, r2, lsl r0
		len = strlen (ptr);
    18e0:	00122a28 	andseq	r2, r2, r8, lsr #20
	...
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18ec:	03840100 	orreq	r0, r4, #0, 2
    18f0:	e7014e00 	str	r4, [r1, -r0, lsl #28]
    18f4:	01000009 	tsteq	r0, r9
    18f8:	00010662 	andeq	r0, r1, r2, ror #12
	len -= quant;
    18fc:	00000000 	andeq	r0, r0, r0
    1900:	01000000 	mrseq	r0, (UNDEF: 0)
    1904:	fc01499c 	stc2	9, cr4, [r1], {156}	; 0x9c	; <UNPREDICTABLE>
	if (len == 0) {
    1908:	01000004 	tsteq	r0, r4
		ufree (data);
    190c:	0001064f 	andeq	r0, r1, pc, asr #12
		finish;
    1910:	00000000 	andeq	r0, r0, r0
    1914:	01000000 	mrseq	r0, (UNDEF: 0)
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1918:	0011079c 	mulseq	r1, ip, r7
    191c:	12512800 	subsne	r2, r1, #0, 16
	...
    1928:	5f010000 	svcpl	0x00010000
strand (__inserial, address)
    192c:	01490003 	cmpeq	r9, r3
    1930:	00000533 	andeq	r0, r0, r3, lsr r5
    1934:	01063b01 	tsteq	r6, r1, lsl #22
	...
	if (__inpline != NULL)
    1940:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    1944:	644a0000 	strbvs	r0, [sl], #-0
		finish;
    1948:	1c3b0100 	ldfnes	f0, [fp], #-0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    194c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1950:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    1954:	f3014900 	vmls.i8	d4, d1, d0
    1958:	01000005 	tsteq	r0, r5
		umwait (IM_INIT);
    195c:	9401062b 	strls	r0, [r1], #-1579	; 0xfffff9d5
		release;
    1960:	d0000004 	andle	r0, r0, r4
	savedata (data);
    1964:	01000004 	tsteq	r0, r4
	len = MAX_LINE_LENGTH;
    1968:	0011559c 	mulseq	r1, ip, r5
	io (IM_READ, __cport, READ, ptr, 1);
    196c:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    1970:	df1b2b01 	svcle	0x001b2b01
    1974:	d0000000 	andle	r0, r0, r0
    1978:	00000004 	andeq	r0, r0, r4
	if (ptr == (char*) data) { // new line
    197c:	08360149 	ldmdaeq	r6!, {r0, r3, r6, r8}
    1980:	20010000 	andcs	r0, r1, r0
		if (*ptr == '\0') { // bin cmd
    1984:	04680106 	strbteq	r0, [r8], #-262	; 0xfffffefa
			proceed (IM_BIN);
    1988:	04920000 	ldreq	r0, [r2], #0
    198c:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (*ptr < 0x20)
    1990:	0000117c 	andeq	r1, r0, ip, ror r1
    1994:	01006e4a 	tsteq	r0, sl, asr #28
			proceed (IM_READ);
    1998:	00b81c20 	adcseq	r1, r8, r0, lsr #24
    199c:	04ee0000 	strbteq	r0, [lr], #0
	if (*ptr == '\n' || *ptr == '\r') {
    19a0:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    19a4:	0008d301 	andeq	sp, r8, r1, lsl #6
    19a8:	06190100 	ldreq	r0, [r9], -r0, lsl #2
		*ptr = '\0';
    19ac:	00043c01 	andeq	r3, r4, r1, lsl #24
		__inpline = (char*)data;
    19b0:	00046800 	andeq	r6, r4, r0, lsl #16
		finish;
    19b4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
	if (len) {
    19b8:	4f000011 	svcmi	0x00000011
		ptr++;
    19bc:	1901006e 	stmdbne	r1, {r1, r2, r3, r5, r6}
    19c0:	0000b81c 	andeq	fp, r0, ip, lsl r8
		len--;
    19c4:	43500100 	cmpmi	r0, #0, 2
	proceed (IM_READ);
    19c8:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
	io (IM_BIN, __cport, READ, ptr, 1);
    19cc:	00000450 	andeq	r0, r0, r0, asr r4
    19d0:	0000045a 	andeq	r0, r0, sl, asr r4
    19d4:	21031b01 	tstcs	r3, r1, lsl #22
    19d8:	000011c5 	andeq	r1, r0, r5, asr #3
    19dc:	fb500000 	blx	14019e6 <__ccfg+0x13e1a3e>
	len -= 2;
    19e0:	01000009 	tsteq	r0, r9
	if (len > *ptr + 1) // 1 for 0x04
    19e4:	03011415 	movweq	r1, #5141	; 0x1415
    19e8:	000011d0 	ldrdeq	r1, [r0], -r0
		len = *ptr + 1;
    19ec:	01006e51 	tsteq	r0, r1, asr lr
    19f0:	00b82b15 	adcseq	r2, r8, r5, lsl fp
	ptr++;
    19f4:	52000000 	andpl	r0, r0, #0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    19f8:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    19fc:	35011a03 	strcc	r1, [r1, #-2563]	; 0xfffff5fd
    1a00:	11ed0301 	mvnne	r0, r1, lsl #6
    1a04:	ec530000 	mra	r0, r3, acc0
    1a08:	03000009 	movweq	r0, #9
    1a0c:	7348011a 	movtvc	r0, #33050	; 0x811a
	len -= quant;
    1a10:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    1a14:	00083d54 	andeq	r3, r8, r4, asr sp
		finish;
    1a18:	355b0300 	ldrbcc	r0, [fp, #-768]	; 0xfffffd00
	ptr += quant;
    1a1c:	50540301 	subspl	r0, r4, r1, lsl #6
    1a20:	03000005 	movweq	r0, #5
endstrand
    1a24:	03013550 	movweq	r3, #5456	; 0x1550
    1a28:	00091355 	andeq	r1, r9, r5, asr r3
	proceed (IM_BINL);
    1a2c:	01bf0f00 			; <UNDEFINED> instruction: 0x01bf0f00
endstrand
    1a30:	00007301 	andeq	r7, r0, r1, lsl #6
    1a34:	12200300 	eorne	r0, r0, #0, 6
    1a38:	9f160000 	svcls	0x00160000
    1a3c:	0f000009 	svceq	0x00000009
    1a40:	00730ec1 	rsbseq	r0, r3, r1, asr #29
    1a44:	54000000 	strpl	r0, [r0], #-0
		if (res && (d < n))
    1a48:	000008da 	ldrdeq	r0, [r0], -sl
    1a4c:	0101900f 	tsteq	r1, pc
    1a50:	051a5403 	ldreq	r5, [sl, #-1027]	; 0xfffffbfd
    1a54:	7b0f0000 	blvc	3c1a5c <__ccfg+0x3a1ab4>
			res [d] = (char) c;
    1a58:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
		d++;
    1a5c:	0000078d 	andeq	r0, r0, sp, lsl #15
    1a60:	0103660a 	tsteq	r3, sl, lsl #12
    1a64:	12510301 	subsne	r0, r1, #67108864	; 0x4000000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a68:	64530000 	ldrbvs	r0, [r3], #-0
    1a6c:	0a000007 	beq	1a90 <__pi_vfparse+0x28>
    1a70:	731f0366 	tstvc	pc, #-1744830463	; 0x98000001
				enci (10000);
    1a74:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a78:	0008b256 	andeq	fp, r8, r6, asr r2
    1a7c:	014c0200 	mrseq	r0, (UNDEF: 108)
	d = 0;
    1a80:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
		c = *fm++;
    1a84:	0000084b 	andeq	r0, r0, fp, asr #16
		if (c == '\\') {
    1a88:	0101c402 	tsteq	r1, r2, lsl #8
			if ((c = *fm++) == '\0') {
    1a8c:	06665703 	strbteq	r5, [r6], -r3, lsl #14
    1a90:	ad020000 	stcge	0, cr0, [r2, #-0]
				outc ('\\');
    1a94:	00730101 	rsbseq	r0, r3, r1, lsl #2
			if ((c = *fm++) == '\0') {
    1a98:	56030000 	strpl	r0, [r3], -r0
				outc ('\\');
    1a9c:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    1aa0:	0102450e 	tsteq	r2, lr, lsl #10
			outc (c);
    1aa4:	85580301 	ldrbhi	r0, [r8, #-769]	; 0xfffffcff
    1aa8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
			if (c == '\0')
    1aac:	0101022c 	tsteq	r1, ip, lsr #4
    1ab0:	00000073 	andeq	r0, r0, r3, ror r0
			outc (c);
    1ab4:	05705203 	ldrbeq	r5, [r0, #-515]!	; 0xfffffdfd
				outc (val);
    1ab8:	dc0e0000 	stcle	0, cr0, [lr], {-0}
				val = (word) va_arg (ap, aword);
    1abc:	03010101 	movweq	r0, #4353	; 0x1101
		if (c == '%') {
    1ac0:	000012ab 	andeq	r1, r0, fp, lsr #5
    1ac4:	00052a53 	andeq	r2, r5, r3, asr sl
			c = *fm++;
    1ac8:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
			switch (c) {
    1acc:	0000731f 	andeq	r7, r0, pc, lsl r3
    1ad0:	eb560000 	bl	1581ad8 <__ccfg+0x1561b30>
    1ad4:	0b000006 	bleq	1af4 <__pi_vfparse+0x8c>
    1ad8:	0101010f 	tsteq	r1, pc, lsl #2
    1adc:	06325403 	ldrteq	r5, [r2], -r3, lsl #8
    1ae0:	ed0c0000 	stc	0, cr0, [ip, #-0]
    1ae4:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    1ae8:	00000900 	andeq	r0, r0, r0, lsl #18
				outc ('%');
    1aec:	0101d60c 	tsteq	r1, ip, lsl #12
    1af0:	06015203 	streq	r5, [r1], -r3, lsl #4
				outc (c);
    1af4:	40060000 	andmi	r0, r6, r0
    1af8:	03010104 	movweq	r0, #4356	; 0x1104
    1afc:	000012e7 	andeq	r1, r0, r7, ror #5
				if (c == '\0')
    1b00:	00077153 	andeq	r7, r7, r3, asr r1
				return d;
    1b04:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
}
    1b08:	00007324 	andeq	r7, r0, r4, lsr #6
    1b0c:	9a520000 	bls	1481b14 <__ccfg+0x1461b6c>
			switch (c) {
    1b10:	06000005 	streq	r0, [r0], -r5
    1b14:	01010391 			; <UNDEFINED> instruction: 0x01010391
    1b18:	00131103 	andseq	r1, r3, r3, lsl #2
				for (i = 12; ; i -= 4) {
    1b1c:	07715300 	ldrbeq	r5, [r1, -r0, lsl #6]!
				val = (word) va_arg (ap, aword);
    1b20:	91060000 	mrsls	r0, (UNDEF: 6)
						[ (val >> i) & 0xf ]);
    1b24:	00731703 	rsbseq	r1, r3, r3, lsl #14
    1b28:	cc530000 	mragt	r0, r3, acc0
    1b2c:	06000006 	streq	r0, [r0], -r6
					outc (__pi_hex_enc_table
    1b30:	732a0391 			; <UNDEFINED> instruction: 0x732a0391
    1b34:	00000000 	andeq	r0, r0, r0
					if (i == 0)
    1b38:	0009b252 	andeq	fp, r9, r2, asr r2
    1b3c:	030c0600 	movweq	r0, #50688	; 0xc600
				for (i = 12; ; i -= 4) {
    1b40:	3b030101 	blcc	c1f4c <__ccfg+0xa1fa4>
				val = (word) va_arg (ap, aword);
    1b44:	53000013 	movwpl	r0, #19
				if (c == 'd' && (val & 0x8000) != 0) {
    1b48:	00000771 	andeq	r0, r0, r1, ror r7
				val = (word) va_arg (ap, aword);
    1b4c:	18030c06 	stmdane	r3, {r1, r2, sl, fp}
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	00000073 	andeq	r0, r0, r3, ror r0
    1b54:	0006cc53 	andeq	ip, r6, r3, asr ip
					outc ('-');
    1b58:	030c0600 	movweq	r0, #50688	; 0xc600
    1b5c:	0000732b 	andeq	r7, r0, fp, lsr #6
					val = (~val) + 1;
    1b60:	bd520000 	ldcllt	0, cr0, [r2, #-0]
    1b64:	06000006 	streq	r0, [r0], -r6
				for (i = 12; ; i -= 4) {
    1b68:	010101e7 	smlatteq	r1, r7, r1, r0
				enci (10000);
    1b6c:	00135803 	andseq	r5, r3, r3, lsl #16
    1b70:	07715300 	ldrbeq	r5, [r1, -r0, lsl #6]!
    1b74:	e7060000 	str	r0, [r6, -r0]
    1b78:	00731901 	rsbseq	r1, r3, r1, lsl #18
    1b7c:	52000000 	andpl	r0, r0, #0
    1b80:	00000807 	andeq	r0, r0, r7, lsl #16
    1b84:	0101ba06 	tsteq	r1, r6, lsl #20
    1b88:	13750301 	cmnne	r5, #67108864	; 0x4000000
    1b8c:	71530000 	cmpvc	r3, r0
    1b90:	06000007 	streq	r0, [r0], -r7
    1b94:	731501ba 	tstvc	r5, #-2147483602	; 0x8000002e
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	0008a152 	andeq	sl, r8, r2, asr r1
    1ba0:	01390600 	teqeq	r9, r0, lsl #12
    1ba4:	ac030101 	stfges	f0, [r3], {1}
    1ba8:	53000013 	movwpl	r0, #19
    1bac:	00000771 	andeq	r0, r0, r1, ror r7
    1bb0:	1b013906 	blne	4ffd0 <__ccfg+0x30028>
				if (c == 'd' || c == 'u') {
    1bb4:	00000073 	andeq	r0, r0, r3, ror r0
    1bb8:	00065a53 	andeq	r5, r6, r3, asr sl
					if (c == 'd' &&
    1bbc:	01390600 	teqeq	r9, r0, lsl #12
					val = va_arg (ap, lword);
    1bc0:	0000732e 	andeq	r7, r0, lr, lsr #6
					fm++;
    1bc4:	06465300 	strbeq	r5, [r6], -r0, lsl #6
					if (c == 'd' &&
    1bc8:	3a060000 	bcc	181bd0 <__ccfg+0x161c28>
    1bcc:	00731b01 	rsbseq	r1, r3, r1, lsl #22
						outc ('-');
    1bd0:	52000000 	andpl	r0, r0, #0
    1bd4:	00000812 	andeq	r0, r0, r2, lsl r8
						val = (~val) + 1;
    1bd8:	01028404 	tsteq	r2, r4, lsl #8
				enci (10000);
    1bdc:	13c90301 	bicne	r0, r9, #67108864	; 0x4000000
					enci (1000000000UL);
    1be0:	68530000 	ldmdavs	r3, {}^	; <UNPREDICTABLE>
    1be4:	04000001 	streq	r0, [r0], #-1
    1be8:	731e0284 	tstvc	lr, #132, 4	; 0x40000008
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	00050252 	andeq	r0, r5, r2, asr r2
    1bf4:	02060400 	andeq	r0, r6, #0, 8
    1bf8:	f3030101 	vrhadd.u8	d0, d3, d1
    1bfc:	53000013 	movwpl	r0, #19
    1c00:	00000168 	andeq	r0, r0, r8, ror #2
    1c04:	23020604 	movwcs	r0, #9732	; 0x2604
    1c08:	00000073 	andeq	r0, r0, r3, ror r0
    1c0c:	0009d553 	andeq	sp, r9, r3, asr r5
    1c10:	02060400 	andeq	r0, r6, #0, 8
    1c14:	00007337 	andeq	r7, r0, r7, lsr r3
    1c18:	c3520000 	cmpgt	r2, #0
    1c1c:	04000003 	streq	r0, [r0], #-3
    1c20:	01010154 	tsteq	r1, r4, asr r1
				} else if (c == 'x') {
    1c24:	00141003 	andseq	r1, r4, r3
					for (i = 28; ; i -= 4) {
    1c28:	01685300 	cmneq	r8, r0, lsl #6
					val = va_arg (ap, lword);
    1c2c:	54040000 	strpl	r0, [r4], #-0
							[ (val >> i) & 0xf ]);
    1c30:	00731901 	rsbseq	r1, r3, r1, lsl #18
    1c34:	52000000 	andpl	r0, r0, #0
						outc (__pi_hex_enc_table
    1c38:	00000025 	andeq	r0, r0, r5, lsr #32
    1c3c:	01011e04 	tsteq	r1, r4, lsl #28
    1c40:	142d0301 	strtne	r0, [sp], #-769	; 0xfffffcff
						if (i == 0)
    1c44:	68530000 	ldmdavs	r3, {}^	; <UNPREDICTABLE>
    1c48:	04000001 	streq	r0, [r0], #-1
					for (i = 28; ; i -= 4) {
    1c4c:	7317011e 	tstvc	r7, #-2147483641	; 0x80000007
					outc ('%');
    1c50:	00000000 	andeq	r0, r0, r0
    1c54:	00070456 	andeq	r0, r7, r6, asr r4
    1c58:	04630900 	strbteq	r0, [r3], #-2304	; 0xfffff700
					outc ('l');
    1c5c:	56030101 	strpl	r0, [r3], -r1, lsl #2
    1c60:	00000676 	andeq	r0, r0, r6, ror r6
				val = (word) va_arg (ap, aword);
    1c64:	01045409 	tsteq	r4, r9, lsl #8
				outc (val);
    1c68:	8f560301 	svchi	0x00560301
    1c6c:	09000006 	stmdbeq	r0, {r1, r2}
				while (*st != '\0') {
    1c70:	0101022a 	tsteq	r1, sl, lsr #4
    1c74:	09c05203 	stmibeq	r0, {r0, r1, r9, ip, lr}^
    1c78:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    1c7c:	03010101 	movweq	r0, #4353	; 0x1101
					outc (*st);
    1c80:	0000146b 	andeq	r1, r0, fp, ror #8
    1c84:	00069b53 	andeq	r9, r6, r3, asr fp
					st++;
    1c88:	01680900 	cmneq	r8, r0, lsl #18
		c = *fm++;
    1c8c:	0000731f 	andeq	r7, r0, pc, lsl r3
    1c90:	cf560000 	svcgt	0x00560000
    1c94:	09000005 	stmdbeq	r0, {r0, r2}
char *vform (char *res, const char *fm, va_list aq) {
    1c98:	01010132 	tsteq	r1, r2, lsr r1
    1c9c:	0d445903 	vstreq.16	s11, [r4, #-6]	; <UNPREDICTABLE>
	...
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cac:	000d5835 	andeq	r5, sp, r5, lsr r8
}
    1cb0:	00050100 	andeq	r0, r5, r0, lsl #2
    1cb4:	1f000000 	svcne	0x00000000
	fml = strlen (fm) + 17;
    1cb8:	03000012 	movweq	r0, #18
    1cbc:	0007d800 	andeq	sp, r7, r0, lsl #16
    1cc0:	72010400 	andvc	r0, r1, #0, 8
	if ((res = (char*) umalloc (fml)) == NULL)
    1cc4:	0c000001 	stceq	0, cr0, [r0], {1}
    1cc8:	00000acb 	andeq	r0, r0, fp, asr #21
    1ccc:	000000d3 	ldrdeq	r0, [r0], -r3
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd0:	000006d8 	ldrdeq	r0, [r0], -r8
    1cd4:	00000000 	andeq	r0, r0, r0
    1cd8:	00001a90 	muleq	r0, r0, sl
    1cdc:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
		ufree (res);
    1ce0:	02000003 	andeq	r0, r0, #3
		goto Again;
    1ce4:	03f10502 	mvnseq	r0, #8388608	; 0x800000
	if (buf == NULL || fmt == NULL)
    1ce8:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cec:	03000016 	movweq	r0, #22
	if (buf == NULL || fmt == NULL)
    1cf0:	003f1828 	eorseq	r1, pc, r8, lsr #16
    1cf4:	04020000 	streq	r0, [r2], #-0
    1cf8:	0000b005 	andeq	fp, r0, r5
		    	    case 'u': scanu (lword); break;
    1cfc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
			while (isspace (*buf)) buf++;
    1d00:	000000ab 	andeq	r0, r0, fp, lsr #1
    1d04:	00223c03 	eoreq	r3, r2, r3, lsl #24
	while (*fmt != '\0') {
    1d08:	182e0300 	stmdane	lr!, {r8, r9}
		if (*fmt++ != '%')
    1d0c:	00000059 	andeq	r0, r0, r9, asr r0
		switch (*fmt++) {
    1d10:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    1d14:	03000003 	movweq	r0, #3
    1d18:	0000212a 	andeq	r2, r0, sl, lsr #2
    1d1c:	6c193103 	ldfvss	f3, [r9], {3}
    1d20:	02000000 	andeq	r0, r0, #0
    1d24:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    1d28:	f3030000 	vhadd.u8	d0, d3, d0
}
    1d2c:	03000017 	movweq	r0, #23
		switch (*fmt++) {
    1d30:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    1d34:	04020000 	streq	r0, [r2], #-0
    1d38:	00008507 	andeq	r8, r0, r7, lsl #10
    1d3c:	07080200 	streq	r0, [r8, -r0, lsl #4]
			while (isspace (*buf)) buf++;
    1d40:	00000080 	andeq	r0, r0, r0, lsl #1
    1d44:	69050404 	stmdbvs	r5, {r2, sl}
    1d48:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1d4c:	008a0704 	addeq	r0, sl, r4, lsl #14
    1d50:	86030000 	strhi	r0, [r3], -r0
    1d54:	0400000b 	streq	r0, [r0], #-11
			if (*buf == '\0')
    1d58:	00a71b28 	adceq	r1, r7, r8, lsr #22
			if (*buf != ',') {
    1d5c:	9c050000 	stcls	0, cr0, [r5], {-0}
			sap = va_arg (ap, char*);
    1d60:	0400000a 	streq	r0, [r0], #-10
			nc++;
    1d64:	00bf000b 	adcseq	r0, pc, fp
			if (*buf != ',') {
    1d68:	3c060000 	stccc	0, cr0, [r6], {-0}
				while (!isspace (*buf) && *buf != ',' &&
    1d6c:	bf00000c 	svclt	0x0000000c
    1d70:	00000000 	andeq	r0, r0, r0
    1d74:	04070001 	streq	r0, [r7], #-1
    1d78:	000a9e03 	andeq	r9, sl, r3, lsl #28
    1d7c:	18630400 	stmdane	r3!, {sl}^
    1d80:	0000009b 	muleq	r0, fp, r0
    1d84:	00041c03 	andeq	r1, r4, r3, lsl #24
			while (isspace (*buf)) buf++;
    1d88:	12260500 	eorne	r0, r6, #0, 10
    1d8c:	0000004d 	andeq	r0, r0, sp, asr #32
    1d90:	00160003 	andseq	r0, r6, r3
    1d94:	12270500 	eorne	r0, r7, #0, 10
    1d98:	00000060 	andeq	r0, r0, r0, rrx
			if (*buf == ',') buf++;
    1d9c:	0000d908 	andeq	sp, r0, r8, lsl #18
    1da0:	00d90900 	sbcseq	r0, r9, r0, lsl #18
			*sap = '\0';
    1da4:	46030000 	strmi	r0, [r3], -r0
			break;
    1da8:	05000009 	streq	r0, [r0, #-9]
		    case 'd': scani (word); break;
    1dac:	00331228 	eorseq	r1, r3, r8, lsr #4
    1db0:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    1db4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1db8:	004d122b 	subeq	r1, sp, fp, lsr #4
    1dbc:	fb090000 	blx	241dc6 <__ccfg+0x221e1e>
    1dc0:	03000000 	movweq	r0, #0
    1dc4:	00001651 	andeq	r1, r0, r1, asr r6
    1dc8:	73122c05 	tstvc	r2, #1280	; 0x500
    1dcc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1dd0:	0000010c 	andeq	r0, r0, ip, lsl #2
    1dd4:	0002a603 	andeq	sl, r2, r3, lsl #12
    1dd8:	122d0500 	eorne	r0, sp, #0, 10
    1ddc:	00000073 	andeq	r0, r0, r3, ror r0
    1de0:	0007a203 	andeq	sl, r7, r3, lsl #4
    1de4:	102e0500 	eorne	r0, lr, r0, lsl #10
    1de8:	00000135 	andeq	r0, r0, r5, lsr r1
    1dec:	00d9040a 	sbcseq	r0, r9, sl, lsl #8
    1df0:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    1df4:	c9093205 	stmdbgt	r9, {r0, r2, r9, ip, sp}
    1df8:	0c000001 	stceq	0, cr0, [r0], {1}
    1dfc:	000002c1 	andeq	r0, r0, r1, asr #5
    1e00:	fb073405 	blx	1cee1e <__ccfg+0x1aee76>
    1e04:	01000000 	mrseq	r0, (UNDEF: 0)
    1e08:	0c000701 	stceq	7, cr0, [r0], {1}
    1e0c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1e10:	fb033505 	blx	cf22e <__ccfg+0xaf286>
    1e14:	01000000 	mrseq	r0, (UNDEF: 0)
    1e18:	0c000601 	stceq	6, cr0, [r0], {1}
		    case 'u': scanu (word); break;
    1e1c:	0000028f 	andeq	r0, r0, pc, lsl #5
    1e20:	fb033605 	blx	cf63e <__ccfg+0xaf696>
    1e24:	01000000 	mrseq	r0, (UNDEF: 0)
    1e28:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    1e2c:	0000042b 	andeq	r0, r0, fp, lsr #8
    1e30:	fb033705 	blx	cfa4e <__ccfg+0xafaa6>
    1e34:	01000000 	mrseq	r0, (UNDEF: 0)
    1e38:	0c000401 	cfstrseq	mvf0, [r0], {1}
    1e3c:	00000424 	andeq	r0, r0, r4, lsr #8
    1e40:	fb033805 	blx	cfe5e <__ccfg+0xafeb6>
    1e44:	01000000 	mrseq	r0, (UNDEF: 0)
    1e48:	0d000004 	stceq	0, cr0, [r0, #-16]
    1e4c:	00000415 	andeq	r0, r0, r5, lsl r4
    1e50:	fb073a05 	blx	1d066e <__ccfg+0x1b06c6>
    1e54:	01000000 	mrseq	r0, (UNDEF: 0)
    1e58:	00004c0d 	andeq	r4, r0, sp, lsl #24
    1e5c:	033c0500 	teqeq	ip, #0, 10
    1e60:	000000fb 	strdeq	r0, [r0], -fp
		    case 'x': scanx (word); break;
    1e64:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    1e68:	3d050000 	stccc	0, cr0, [r5, #-0]
    1e6c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1e70:	610d0300 	mrsvs	r0, SP_mon
    1e74:	05000001 	streq	r0, [r0, #-1]
    1e78:	010c083f 	tsteq	ip, pc, lsr r8
    1e7c:	00040000 	andeq	r0, r4, r0
    1e80:	00045403 	andeq	r5, r4, r3, lsl #8
    1e84:	03410500 	movteq	r0, #5376	; 0x1500
    1e88:	0000013b 	andeq	r0, r0, fp, lsr r1
    1e8c:	0001c909 	andeq	ip, r1, r9, lsl #18
    1e90:	02b50e00 	adcseq	r0, r5, #0, 28
    1e94:	43050000 	movwmi	r0, #20480	; 0x5000
    1e98:	0001d51a 	andeq	sp, r1, sl, lsl r5
    1e9c:	0e010100 	adfeqs	f0, f1, f0
    1ea0:	00000321 	andeq	r0, r0, r1, lsr #6
    1ea4:	f60e4505 			; <UNDEFINED> instruction: 0xf60e4505
    1ea8:	01000001 	tsteq	r0, r1
    1eac:	fc040a01 	stc2	10, cr0, [r4], {1}	; <UNPREDICTABLE>
    1eb0:	02000001 	andeq	r0, r0, #1
    1eb4:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    1eb8:	fc080000 	stc2	0, cr0, [r8], {-0}
    1ebc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1ec0:	0000032f 	andeq	r0, r0, pc, lsr #6
    1ec4:	f61e4505 			; <UNDEFINED> instruction: 0xf61e4505
    1ec8:	01000001 	tsteq	r0, r1
    1ecc:	06080b01 	streq	r0, [r8], -r1, lsl #22
    1ed0:	0247098f 	subeq	r0, r7, #2342912	; 0x23c000
    1ed4:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    1ed8:	06000002 	streq	r0, [r0], -r2
			switch (*fmt++) {
    1edc:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
    1ee0:	0d000000 	stceq	0, cr0, [r0, #-0]
    1ee4:	0000062d 	andeq	r0, r0, sp, lsr #12
    1ee8:	d9089106 	stmdble	r8, {r1, r2, r8, ip, pc}
    1eec:	04000000 	streq	r0, [r0], #-0
    1ef0:	00049c0d 	andeq	r9, r4, sp, lsl #24
		    	    case 'd': scani (lword); break;
    1ef4:	10920600 	addsne	r0, r2, r0, lsl #12
    1ef8:	00000107 	andeq	r0, r0, r7, lsl #2
    1efc:	32030006 	andcc	r0, r3, #6
    1f00:	06000004 	streq	r0, [r0], -r4
    1f04:	02160393 	andseq	r0, r6, #1275068418	; 0x4c000002
    1f08:	470f0000 	strmi	r0, [pc, -r0]
    1f0c:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    1f10:	10000002 	andne	r0, r0, r2
    1f14:	00420e00 	subeq	r0, r2, r0, lsl #28
    1f18:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    1f1c:	0002530f 	andeq	r5, r2, pc, lsl #6
    1f20:	0b010100 	bleq	42328 <__ccfg+0x22380>
    1f24:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    1f28:	00000296 	muleq	r0, r6, r2
    1f2c:	00048f0c 	andeq	r8, r4, ip, lsl #30
    1f30:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    1f34:	000000fb 	strdeq	r0, [r0], -fp
    1f38:	00010701 	andeq	r0, r1, r1, lsl #14
    1f3c:	00003d0c 	andeq	r3, r0, ip, lsl #26
    1f40:	03940700 	orrseq	r0, r4, #0, 14
    1f44:	000000fb 	strdeq	r0, [r0], -fp
    1f48:	00000101 	andeq	r0, r0, r1, lsl #2
    1f4c:	02860300 	addeq	r0, r6, #0, 6
		    	    case 'x': scanx (lword); break;
    1f50:	96070000 	strls	r0, [r7], -r0
    1f54:	00026c03 	andeq	r6, r2, r3, lsl #24
    1f58:	02960800 	addseq	r0, r6, #0, 16
    1f5c:	a20f0000 	andge	r0, pc, #0
    1f60:	b2000002 	andlt	r0, r0, #2
    1f64:	10000002 	andne	r0, r0, r2
    1f68:	02a70800 	adceq	r0, r7, #0, 16
    1f6c:	eb0e0000 	bl	381f74 <__ccfg+0x361fcc>
    1f70:	07000002 	streq	r0, [r0, -r2]
    1f74:	02b2179c 	adcseq	r1, r2, #156, 14	; 0x2700000
    1f78:	01010000 	mrseq	r0, (UNDEF: 1)
    1f7c:	0000e50f 	andeq	lr, r0, pc, lsl #10
    1f80:	0002d000 	andeq	sp, r2, r0
    1f84:	08001000 	stmdaeq	r0, {ip}
    1f88:	000002c5 	andeq	r0, r0, r5, asr #5
    1f8c:	0003a70e 	andeq	sl, r3, lr, lsl #14
    1f90:	13060800 	movwne	r0, #26624	; 0x6800
    1f94:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f98:	410e0101 	tstmi	lr, r1, lsl #2
    1f9c:	06000001 	streq	r0, [r0], -r1
    1fa0:	010c0ec3 	smlabteq	ip, r3, lr, r0
    1fa4:	01010000 	mrseq	r0, (UNDEF: 1)
    1fa8:	0004a911 	andeq	sl, r4, r1, lsl r9
    1fac:	016e0900 	cmneq	lr, r0, lsl #18
    1fb0:	0002fe10 	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
    1fb4:	04040a00 	streq	r0, [r4], #-2560	; 0xfffff600
    1fb8:	12000003 	andne	r0, r0, #3
    1fbc:	00031001 	andeq	r1, r3, r1
		    	    case 'd': scani (lword); break;
    1fc0:	00d91300 	sbcseq	r1, r9, r0, lsl #6
    1fc4:	0f000000 	svceq	0x00000000
    1fc8:	00000203 	andeq	r0, r0, r3, lsl #4
    1fcc:	0000031b 	andeq	r0, r0, fp, lsl r3
    1fd0:	10080010 	andne	r0, r8, r0, lsl r0
    1fd4:	14000003 	strne	r0, [r0], #-3
    1fd8:	00000464 	andeq	r0, r0, r4, ror #8
		    	    case 'u': scanu (lword); break;
    1fdc:	16017f09 	strne	r7, [r1], -r9, lsl #30
    1fe0:	0000031b 	andeq	r0, r0, fp, lsl r3
    1fe4:	9f140101 	svcls	0x00140101
    1fe8:	09000003 	stmdbeq	r0, {r0, r1}
    1fec:	18140182 	ldmdane	r4, {r1, r7, r8}
    1ff0:	01000001 	tsteq	r0, r1
    1ff4:	04941401 	ldreq	r1, [r4], #1025	; 0x401
    1ff8:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    1ffc:	010c0e02 	tsteq	ip, r2, lsl #28
    2000:	01010000 	mrseq	r0, (UNDEF: 1)
    2004:	03090815 	movweq	r0, #38933	; 0x9815
    2008:	03740903 	cmneq	r4, #49152	; 0xc000
    200c:	34160000 	ldrcc	r0, [r6], #-0
    2010:	09000022 	stmdbeq	r0, {r1, r5}
    2014:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    2018:	00000000 	andeq	r0, r0, r0
    201c:	00057f16 	andeq	r7, r5, r6, lsl pc
    2020:	03080900 	movweq	r0, #35072	; 0x8900
		    	    case 'x': scanx (lword); break;
    2024:	00011d08 	andeq	r1, r1, r8, lsl #26
    2028:	11000400 	tstne	r0, r0, lsl #8
			if ((c = *buf++) == '\0')
    202c:	00000266 	andeq	r0, r0, r6, ror #4
    2030:	03030909 	movweq	r0, #14601	; 0x3909
			sap = va_arg (ap, char*);
    2034:	0000034d 	andeq	r0, r0, sp, asr #6
			nc++;
    2038:	0004b817 	andeq	fp, r4, r7, lsl r8
			break;
    203c:	0b093000 	bleq	24e044 <__ccfg+0x22e09c>
			while (isspace (*buf)) buf++;
    2040:	03e40803 	mvneq	r0, #196608	; 0x30000
    2044:	b1160000 	tstlt	r6, r0
    2048:	09000004 	stmdbeq	r0, {r2}
						*sap++ = *buf++;
    204c:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    2050:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    2054:	0002d216 	andeq	sp, r2, r6, lsl r2
    2058:	03150900 	tsteq	r5, #0, 18
    205c:	0000d908 	andeq	sp, r0, r8, lsl #18
		return 0;
    2060:	ac160200 	lfmge	f0, 4, [r6], {-0}
    2064:	09000004 	stmdbeq	r0, {r2}
		    case 'x': scanx (word); break;
    2068:	f10b0316 			; <UNDEFINED> instruction: 0xf10b0316
    206c:	04000002 	streq	r0, [r0], #-2
		    	    case 'x': scanx (lword); break;
    2070:	000f7f16 	andeq	r7, pc, r6, lsl pc	; <UNPREDICTABLE>
    2074:	03170900 	tsteq	r7, #0, 18
    2078:	00011d09 	andeq	r1, r1, r9, lsl #26
    207c:	5d160800 	ldcpl	8, cr0, [r6, #-0]
    2080:	09000004 	stmdbeq	r0, {r2}
    2084:	e40f0318 	str	r0, [pc], #-792	; 208c <NOROM_AONBatMonTemperatureGetDegC+0x14>
    2088:	0c000003 	stceq	0, cr0, [r0], {3}
    208c:	0002cd16 	andeq	ip, r2, r6, lsl sp
    2090:	03190900 	tsteq	r9, #0, 18
    2094:	0003f415 	andeq	pc, r3, r5, lsl r4	; <UNPREDICTABLE>
    2098:	0f002c00 	svceq	0x00002c00
    209c:	00000374 	andeq	r0, r0, r4, ror r3
    20a0:	000003f4 	strdeq	r0, [r0], -r4
    20a4:	00009418 	andeq	r9, r0, r8, lsl r4
    20a8:	0a000300 	beq	2cb0 <NOROM_OSCClockSourceGet+0x9c>
    20ac:	00038104 	andeq	r8, r3, r4, lsl #2
    20b0:	04c31100 	strbeq	r1, [r3], #256	; 0x100
    20b4:	1c090000 	stcne	0, cr0, [r9], {-0}
    20b8:	03811b03 	orreq	r1, r1, #3072	; 0xc00
    20bc:	95140000 	ldrls	r0, [r4, #-0]
    20c0:	09000003 	stmdbeq	r0, {r0, r1}
    20c4:	1614031e 			; <UNDEFINED> instruction: 0x1614031e
    20c8:	01000004 	tsteq	r0, r4
    20cc:	fa040a01 	blx	1048d8 <__ccfg+0xe4930>
    20d0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    20d4:	000004f1 	strdeq	r0, [r0], -r1
    20d8:	d9131d0a 	ldmdble	r3, {r1, r3, r8, sl, fp, ip}
    20dc:	01000000 	mrseq	r0, (UNDEF: 0)
    20e0:	075b0e01 	ldrbeq	r0, [fp, -r1, lsl #28]
    20e4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    20e8:	0000ea1a 	andeq	lr, r0, sl, lsl sl
    20ec:	0e010100 	adfeqs	f0, f1, f0
    20f0:	000008eb 	andeq	r0, r0, fp, ror #17
    20f4:	ea241e0a 	b	909924 <__ccfg+0x8e997c>
    20f8:	01000000 	mrseq	r0, (UNDEF: 0)
    20fc:	061a0e01 	ldreq	r0, [sl], -r1, lsl #28
    2100:	220a0000 	andcs	r0, sl, #0
    2104:	00041614 	andeq	r1, r4, r4, lsl r6
    2108:	03010100 	movweq	r0, #4352	; 0x1100
    210c:	00000a48 	andeq	r0, r0, r8, asr #20
    2110:	600f440a 	andvs	r4, pc, sl, lsl #8
    2114:	0a000004 	beq	212c <TrimAfterColdResetWakeupFromShutDown+0x5c>
    2118:	00046604 	andeq	r6, r4, r4, lsl #12
    211c:	8d011900 	vstrhi.16	s2, [r1, #-0]	; <UNPREDICTABLE>
    2120:	80000000 	andhi	r0, r0, r0
    2124:	13000004 	movwne	r0, #4
    2128:	0000008d 	andeq	r0, r0, sp, lsl #1
    212c:	0001f613 	andeq	pc, r1, r3, lsl r6	; <UNPREDICTABLE>
    2130:	008d1300 	addeq	r1, sp, r0, lsl #6
    2134:	1a000000 	bne	213c <TrimAfterColdResetWakeupFromShutDown+0x6c>
    2138:	0000033e 	andeq	r0, r0, lr, lsr r3
    213c:	05070c01 	streq	r0, [r7, #-3073]	; 0xfffff3ff
    2140:	00008c03 	andeq	r8, r0, r3, lsl #24
    2144:	0c121b20 			; <UNDEFINED> instruction: 0x0c121b20
    2148:	10010000 	andne	r0, r1, r0
    214c:	00010c07 	andeq	r0, r1, r7, lsl #24
    2150:	03050100 	movweq	r0, #20736	; 0x5100
    2154:	00000000 	andeq	r0, r0, r0
    2158:	0004461a 	andeq	r4, r4, sl, lsl r6
    215c:	0d1a0100 	ldfeqs	f0, [sl, #-0]
    2160:	00480305 	subeq	r0, r8, r5, lsl #6
    2164:	540f2000 	strpl	r2, [pc], #-0	; 216c <TrimAfterColdResetWakeupFromShutDown+0x9c>
    2168:	bf000004 	svclt	0x00000004
    216c:	18000004 	stmdane	r0, {r2}
    2170:	00000094 	muleq	r0, r4, r0
    2174:	801c0000 	andshi	r0, ip, r0
    2178:	0100000a 	tsteq	r0, sl
    217c:	04af141e 	strteq	r1, [pc], #1054	; 2184 <TrimAfterColdResetWakeupFromShutDown+0xb4>
    2180:	03050000 	movweq	r0, #20480	; 0x5000
    2184:	2000004c 	andcs	r0, r0, ip, asr #32
    2188:	0001da1a 	andeq	sp, r1, sl, lsl sl
    218c:	13220100 			; <UNDEFINED> instruction: 0x13220100
    2190:	00940305 	addseq	r0, r4, r5, lsl #6
    2194:	071a2000 	ldreq	r2, [sl, -r0]
    2198:	01000004 	tsteq	r0, r4
    219c:	03050d27 	movweq	r0, #23847	; 0x5d27
    21a0:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
    21a4:	00041c1a 	andeq	r1, r4, sl, lsl ip
    21a8:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    21ac:	00900305 	addseq	r0, r0, r5, lsl #6
    21b0:	2a1a2000 	bcs	68a1b8 <__ccfg+0x66a210>
    21b4:	01000004 	tsteq	r0, r4
    21b8:	03050f31 	movweq	r0, #24369	; 0x5f31
    21bc:	20000092 	mulcs	r0, r2, r0
    21c0:	0004381a 	andeq	r3, r4, sl, lsl r8
    21c4:	19310100 	ldmdbne	r1!, {r8}
    21c8:	009c0305 	addseq	r0, ip, r5, lsl #6
    21cc:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    21d0:	27000001 	strcs	r0, [r0, -r1]
    21d4:	18000005 	stmdane	r0, {r0, r2}
    21d8:	00000094 	muleq	r0, r4, r0
    21dc:	3b1b0003 	blcc	6c21f0 <__ccfg+0x6a2248>
    21e0:	01000009 	tsteq	r0, r9
    21e4:	05170a36 	ldreq	r0, [r7, #-2614]	; 0xfffff5ca
    21e8:	05010000 	streq	r0, [r1, #-0]
    21ec:	0000a003 	andeq	sl, r0, r3
    21f0:	03201a20 			; <UNDEFINED> instruction: 0x03201a20
    21f4:	3f010000 	svccc	0x00010000
    21f8:	5c03050c 	cfstr32pl	mvfx0, [r3], {12}
    21fc:	1a00002e 	bne	22bc <NOROM_SetupSetVddrLevel+0x74>
    2200:	0000032f 	andeq	r0, r0, pc, lsr #6
    2204:	050d4501 	streq	r4, [sp, #-1281]	; 0xfffffaff
    2208:	00000003 	andeq	r0, r0, r3
    220c:	01020b00 	tsteq	r2, r0, lsl #22
    2210:	057a0949 	ldrbeq	r0, [sl, #-2377]!	; 0xfffff6b7
    2214:	740d0000 	strvc	r0, [sp], #-0
    2218:	0100000a 	tsteq	r0, sl
    221c:	00fb074a 	rscseq	r0, fp, sl, asr #14
    2220:	0d000000 	stceq	0, cr0, [r0, #-0]
    2224:	00000c56 	andeq	r0, r0, r6, asr ip
    2228:	fb074b01 	blx	1d4e36 <__ccfg+0x1b4e8e>
    222c:	01000000 	mrseq	r0, (UNDEF: 0)
    2230:	0b7d0300 	bleq	1f42e38 <__ccfg+0x1f22e90>
    2234:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2238:	00055603 	andeq	r5, r5, r3, lsl #12
    223c:	057a0f00 	ldrbeq	r0, [sl, #-3840]!	; 0xfffff100
    2240:	05960000 	ldreq	r0, [r6]
    2244:	94180000 	ldrls	r0, [r8], #-0
    2248:	00000000 	andeq	r0, r0, r0
    224c:	0bb21c00 	bleq	fec89254 <_estack+0xdec84254>
    2250:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2254:	00058611 	andeq	r8, r5, r1, lsl r6
    2258:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    225c:	0f200000 	svceq	0x00200000
    2260:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2264:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2268:	00009418 	andeq	r9, r0, r8, lsl r4
    226c:	0a000000 	beq	2274 <NOROM_SetupSetVddrLevel+0x2c>
    2270:	00011d04 	andeq	r1, r1, r4, lsl #26
    2274:	0a951d00 	beq	fe54967c <_estack+0xde54467c>
    2278:	bd010000 	stclt	0, cr0, [r1, #-0]
    227c:	05a80f02 	streq	r0, [r8, #3842]!	; 0xf02
    2280:	03050000 	movweq	r0, #20480	; 0x5000
    2284:	2000005c 	andcs	r0, r0, ip, asr r0
    2288:	00011d0f 	andeq	r1, r1, pc, lsl #26
    228c:	0005e100 	andeq	lr, r5, r0, lsl #2
    2290:	00941800 	addseq	r1, r4, r0, lsl #16
    2294:	00000000 	andeq	r0, r0, r0
    2298:	000b381d 	andeq	r3, fp, sp, lsl r8
    229c:	02c20100 	sbceq	r0, r2, #0, 2
    22a0:	0005d10e 	andeq	sp, r5, lr, lsl #2
    22a4:	58030500 	stmdapl	r3, {r8, sl}
    22a8:	1d200000 	stcne	0, cr0, [r0, #-0]
    22ac:	00000b95 	muleq	r0, r5, fp
    22b0:	2602c201 	strcs	ip, [r2], -r1, lsl #4
    22b4:	000005d1 	ldrdeq	r0, [r0], -r1
    22b8:	00500305 	subseq	r0, r0, r5, lsl #6
    22bc:	011e2000 	tsteq	lr, r0
    22c0:	00000bde 	ldrdeq	r0, [r0], -lr
    22c4:	07052f01 	streq	r2, [r5, -r1, lsl #30]
    22c8:	00010c01 	andeq	r0, r1, r1, lsl #24
	...
    22d4:	1f9c0100 	svcne	0x009c0100
    22d8:	000b6c01 	andeq	r6, fp, r1, lsl #24
    22dc:	04820100 	streq	r0, [r2], #256	; 0x100
    22e0:	14a40106 	strtne	r0, [r4], #262	; 0x106
    22e4:	15e00000 	strbne	r0, [r0, #0]!
    22e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    22ec:	0000070e 	andeq	r0, r0, lr, lsl #14
    22f0:	000bad20 	andeq	sl, fp, r0, lsr #26
    22f4:	04820100 	streq	r0, [r2], #256	; 0x100
    22f8:	00070e18 	andeq	r0, r7, r8, lsl lr
    22fc:	00051400 	andeq	r1, r5, r0, lsl #8
    2300:	76222100 	strtvc	r2, [r2], -r0, lsl #2
    2304:	01006c61 	tsteq	r0, r1, ror #24
    2308:	0c080487 	cfstrseq	mvf0, [r8], {135}	; 0x87
    230c:	54000001 	strpl	r0, [r0], #-1
    2310:	23000005 	movwcs	r0, #5
    2314:	01007061 	tsteq	r0, r1, rrx
    2318:	c10a0488 	smlabbgt	sl, r8, r4, r0
    231c:	02000000 	andeq	r0, r0, #0
    2320:	62224c91 	eorvs	r4, r2, #37120	; 0x9100
    2324:	89010063 	stmdbhi	r1, {r0, r1, r5, r6}
    2328:	00ef0704 	rsceq	r0, pc, r4, lsl #14
    232c:	05930000 	ldreq	r0, [r3]
    2330:	76220000 	strtvc	r0, [r2], -r0
    2334:	048a0100 	streq	r0, [sl], #256	; 0x100
    2338:	0000d907 	andeq	sp, r0, r7, lsl #18
    233c:	0005c700 	andeq	ip, r5, r0, lsl #14
    2340:	73692400 	cmnvc	r9, #0, 8
    2344:	048b0100 	streq	r0, [fp], #256	; 0x100
    2348:	0000fb07 	andeq	pc, r0, r7, lsl #22
    234c:	0c662500 	cfstr64eq	mvdx2, [r6], #-0
    2350:	b0010000 	andlt	r0, r1, r0
    2354:	15700104 	ldrbne	r0, [r0, #-260]!	; 0xfffffefc
    2358:	30260000 	eorcc	r0, r6, r0
    235c:	4c000015 	stcmi	0, cr0, [r0], {21}
    2360:	c0000015 	andgt	r0, r0, r5, lsl r0
    2364:	22000006 	andcs	r0, r0, #6
    2368:	9f010069 	svcls	0x00010069
    236c:	00ef0a04 	rsceq	r0, pc, r4, lsl #20
    2370:	05f00000 	ldrbeq	r0, [r0, #0]!
    2374:	27000000 	strcs	r0, [r0, -r0]
    2378:	00000690 	muleq	r0, r0, r6
    237c:	000006d9 	ldrdeq	r0, [r0], -r9
    2380:	01006422 	tsteq	r0, r2, lsr #8
    2384:	0c0b04a9 	cfstrseq	mvf0, [fp], {169}	; 0xa9
    2388:	03000001 	movweq	r0, #1
    238c:	00000006 	andeq	r0, r0, r6
    2390:	0015bc26 	andseq	fp, r5, r6, lsr #24
    2394:	0015ca00 	andseq	ip, r5, r0, lsl #20
    2398:	0006f600 	andeq	pc, r6, r0, lsl #12
    239c:	00732200 	rsbseq	r2, r3, r0, lsl #4
    23a0:	0b04c601 	bleq	133bac <__ccfg+0x113c04>
    23a4:	000001f6 	strdeq	r0, [r0], -r6
    23a8:	0000062c 	andeq	r0, r0, ip, lsr #12
    23ac:	10c12800 	sbcne	r2, r1, r0, lsl #16
    23b0:	14d20000 	ldrbne	r0, [r2], #0
    23b4:	06c00000 	strbeq	r0, [r0], r0
    23b8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    23bc:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    23c0:	00000010 	andeq	r0, r0, r0, lsl r0
    23c4:	03040a00 	movweq	r0, #18944	; 0x4a00
    23c8:	2a000002 	bcs	23d8 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0xc>
    23cc:	00000c36 	andeq	r0, r0, r6, lsr ip
    23d0:	0d044701 	stceq	7, cr4, [r4, #-4]
    23d4:	000f9c01 	andeq	r9, pc, r1, lsl #24
    23d8:	000fb400 	andeq	fp, pc, r0, lsl #8
    23dc:	539c0100 	orrspl	r0, ip, #0, 2
    23e0:	2b000007 	blcs	2404 <NOROM_SetupGetTrimForAmpcompTh1+0x10>
    23e4:	47010063 	strmi	r0, [r1, -r3, rrx]
    23e8:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    23ec:	063f0000 	ldrteq	r0, [pc], -r0
    23f0:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    23f4:	9c000010 	stcls	0, cr0, [r0], {16}
    23f8:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    23fc:	01000006 	tsteq	r0, r6
    2400:	29020449 	stmdbcs	r2, {r0, r3, r6, sl}
    2404:	000010d4 	ldrdeq	r1, [r0], -r4
    2408:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    240c:	00000b1d 	andeq	r0, r0, sp, lsl fp
    2410:	06042801 	streq	r2, [r4], -r1, lsl #16
    2414:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    2420:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    2424:	2b000007 	blcs	2448 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2428:	0100636e 	tsteq	r0, lr, ror #6
    242c:	291c0428 	ldmdbcs	ip, {r3, r5, sl}
    2430:	52000001 	andpl	r0, r0, #1
    2434:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    2438:	00000bfe 	strdeq	r0, [r0], -lr
    243c:	09043101 	stmdbeq	r4, {r0, r8, ip, sp}
    2440:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2444:	00000670 	andeq	r0, r0, r0, ror r6
    2448:	78616d22 	stmdavc	r1!, {r1, r5, r8, sl, fp, sp, lr}^
    244c:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    2450:	00011d08 	andeq	r1, r1, r8, lsl #26
    2454:	00068e00 	andeq	r8, r6, r0, lsl #28
    2458:	0b332d00 	bleq	ccd860 <__ccfg+0xcad8b8>
    245c:	32010000 	andcc	r0, r1, #0
    2460:	011d0d04 	tsteq	sp, r4, lsl #26
    2464:	06ac0000 	strteq	r0, [ip], r0
    2468:	2c000000 	stccs	0, cr0, [r0], {-0}
    246c:	000beb01 	andeq	lr, fp, r1, lsl #22
    2470:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2474:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    2480:	9c010000 	stcls	0, cr0, [r1], {-0}
    2484:	000007e3 	andeq	r0, r0, r3, ror #15
    2488:	6e696d2b 	cdpvs	13, 6, cr6, cr9, cr11, {1}
    248c:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2490:	0001291c 	andeq	r2, r1, ip, lsl r9
    2494:	0006d500 	andeq	sp, r6, r0, lsl #10
    2498:	011f0000 	tsteq	pc, r0
    249c:	00000bd1 	ldrdeq	r0, [r0], -r1
    24a0:	06040201 	streq	r0, [r4], -r1, lsl #4
    24a4:	00148c01 	andseq	r8, r4, r1, lsl #24
    24a8:	0014a400 	andseq	sl, r4, r0, lsl #8
    24ac:	0e9c0100 	fmleqe	f0, f4, f0
    24b0:	20000008 	andcs	r0, r0, r8
    24b4:	00000bc1 	andeq	r0, r0, r1, asr #23
    24b8:	19040201 	stmdbne	r4, {r0, r9}
    24bc:	000000d9 	ldrdeq	r0, [r0], -r9
    24c0:	000006e8 	andeq	r0, r0, r8, ror #13
    24c4:	67012c00 	strvs	r2, [r1, -r0, lsl #24]
    24c8:	0100000a 	tsteq	r0, sl
    24cc:	010803a3 	smlatbeq	r8, r3, r3, r0
    24d0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    24d4:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
    24d8:	00001458 	andeq	r1, r0, r8, asr r4
    24dc:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    24e0:	d7200000 	strle	r0, [r0, -r0]!
    24e4:	01000013 	tsteq	r0, r3, lsl r0
    24e8:	d91a03a3 	ldmdble	sl, {r0, r1, r5, r7, r8, r9}
    24ec:	fb000000 	blx	24f6 <NOROM_SetupGetTrimForRadcExtCfg+0x16>
    24f0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    24f4:	00000bfe 	strdeq	r0, [r0], -lr
    24f8:	0903ab01 	stmdbeq	r3, {r0, r8, r9, fp, sp, pc}
    24fc:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2500:	0000070e 	andeq	r0, r0, lr, lsl #14
    2504:	00636322 	rsbeq	r6, r3, r2, lsr #6
    2508:	1103ab01 	tstne	r3, r1, lsl #22
    250c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2510:	00000742 	andeq	r0, r0, r2, asr #14
    2514:	000b9c2d 	andeq	r9, fp, sp, lsr #24
    2518:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    251c:	00011d15 	andeq	r1, r1, r5, lsl sp
    2520:	00076b00 	andeq	r6, r7, r0, lsl #22
    2524:	13d62d00 	bicsne	r2, r6, #0, 26
    2528:	af010000 	svcge	0x00010000
    252c:	011d0803 	tsteq	sp, r3, lsl #16
    2530:	077e0000 	ldrbeq	r0, [lr, -r0]!
    2534:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2538:	000c5c01 	andeq	r5, ip, r1, lsl #24
    253c:	037c0100 	cmneq	ip, #0, 2
    2540:	9d010106 	stflss	f0, [r1, #-24]	; 0xffffffe8
    2544:	2f000008 	svccs	0x00000008
    2548:	01006863 	tsteq	r0, r3, ror #16
    254c:	b818037c 	ldmdalt	r8, {r2, r3, r4, r5, r6, r8, r9}
    2550:	00000005 	andeq	r0, r0, r5
    2554:	000a7a2a 	andeq	r7, sl, sl, lsr #20
    2558:	034a0100 	movteq	r0, #41216	; 0xa100
    255c:	0f1c010d 	svceq	0x001c010d
    2560:	0f9c0000 	svceq	0x009c0000
    2564:	9c010000 	stcls	0, cr0, [r1], {-0}
    2568:	000008e7 	andeq	r0, r0, r7, ror #17
    256c:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    2570:	1b034a01 	blne	d4d7c <__ccfg+0xb4dd4>
    2574:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2578:	000007a8 	andeq	r0, r0, r8, lsr #15
    257c:	000bfe2d 	andeq	pc, fp, sp, lsr #28
    2580:	03570100 	cmpeq	r7, #0, 2
    2584:	0005b809 	andeq	fp, r5, r9, lsl #16
    2588:	0007c600 	andeq	ip, r7, r0, lsl #12
    258c:	63632200 	cmnvs	r3, #0, 4
    2590:	03570100 	cmpeq	r7, #0, 2
    2594:	0005b811 	andeq	fp, r5, r1, lsl r8
    2598:	00080700 	andeq	r0, r8, r0, lsl #14
    259c:	01300000 	teqeq	r0, r0
    25a0:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    25a4:	0602f001 	streq	pc, [r2], -r1
    25a8:	00001270 	andeq	r1, r0, r0, ror r2
    25ac:	000012c0 	andeq	r1, r0, r0, asr #5
    25b0:	09119c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}
    25b4:	472d0000 	strmi	r0, [sp, -r0]!
    25b8:	0100000b 	tsteq	r0, fp
    25bc:	1d0802f5 	sfmne	f0, 4, [r8, #-980]	; 0xfffffc2c
    25c0:	3b000001 	blcc	25cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x98>
    25c4:	00000008 	andeq	r0, r0, r8
    25c8:	6f690131 	svcvs	0x00690131
    25cc:	02790100 	rsbseq	r0, r9, #0, 2
    25d0:	00ef0106 	rsceq	r0, pc, r6, lsl #2
    25d4:	11d40000 	bicsne	r0, r4, r0
    25d8:	12700000 	rsbsne	r0, r0, #0
    25dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    25e0:	00000994 	muleq	r0, r4, r9
    25e4:	000ba220 	andeq	sl, fp, r0, lsr #4
    25e8:	02790100 	rsbseq	r0, r9, #0, 2
    25ec:	0000d90f 	andeq	sp, r0, pc, lsl #18
    25f0:	00085900 	andeq	r5, r8, r0, lsl #18
    25f4:	65642b00 	strbvs	r2, [r4, #-2816]!	; 0xfffff500
    25f8:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    25fc:	00d91b02 	sbcseq	r1, r9, r2, lsl #22
    2600:	08770000 	ldmdaeq	r7!, {}^	; <UNPREDICTABLE>
    2604:	2b200000 	blcs	80260c <__ccfg+0x7e2664>
    2608:	01000007 	tsteq	r0, r7
    260c:	d9250279 	stmdble	r5!, {r0, r3, r4, r5, r6, r9}
    2610:	95000000 	strls	r0, [r0, #-0]
    2614:	2b000008 	blcs	263c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>
    2618:	00667562 	rsbeq	r7, r6, r2, ror #10
    261c:	36027901 	strcc	r7, [r2], -r1, lsl #18
    2620:	000001f6 	strdeq	r0, [r0], -r6
    2624:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    2628:	6e656c2b 	cdpvs	12, 6, cr6, cr5, cr11, {1}
    262c:	02790100 	rsbseq	r0, r9, #0, 2
    2630:	0000d940 	andeq	sp, r0, r0, asr #18
    2634:	0008d100 	andeq	sp, r8, r0, lsl #2
    2638:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    263c:	7b010074 	blvc	42814 <__ccfg+0x2286c>
    2640:	00ef0702 	rsceq	r0, pc, r2, lsl #14
    2644:	08f10000 	ldmeq	r1!, {}^	; <UNPREDICTABLE>
    2648:	1f000000 	svcne	0x00000000
    264c:	000b5a01 	andeq	r5, fp, r1, lsl #20
    2650:	02690100 	rsbeq	r0, r9, #0, 2
    2654:	11b00106 	lslsne	r0, r6, #2
    2658:	11d40000 	bicsne	r0, r4, r0
    265c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2660:	000009cf 	andeq	r0, r0, pc, asr #19
    2664:	0066722b 	rsbeq	r7, r6, fp, lsr #4
    2668:	1e026901 	vmlane.f16	s12, s4, s2	; <UNPREDICTABLE>
    266c:	00000454 	andeq	r0, r0, r4, asr r4
    2670:	00000925 	andeq	r0, r0, r5, lsr #18
    2674:	636f6c2b 	cmnvs	pc, #11008	; 0x2b00
    2678:	02690100 	rsbeq	r0, r9, #0, 2
    267c:	00008d26 	andeq	r8, r0, r6, lsr #26
    2680:	00094e00 	andeq	r4, r9, r0, lsl #28
    2684:	011f0000 	tsteq	pc, r0
    2688:	00000c6d 	andeq	r0, r0, sp, ror #24
    268c:	06025f01 	streq	r5, [r2], -r1, lsl #30
    2690:	00000001 	andeq	r0, r0, r1
    2694:	00000000 	andeq	r0, r0, r0
    2698:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    269c:	2000000a 	andcs	r0, r0, sl
    26a0:	00000ba8 	andeq	r0, r0, r8, lsr #23
    26a4:	19025f01 	stmdbne	r2, {r0, r8, r9, sl, fp, ip, lr}
    26a8:	000001f6 	strdeq	r0, [r0], -r6
    26ac:	00000977 	andeq	r0, r0, r7, ror r9
    26b0:	01006332 	tsteq	r0, r2, lsr r3
    26b4:	fc24025f 	stc2	2, cr0, [r4], #-380	; 0xfffffe84
    26b8:	01000001 	tsteq	r0, r1
    26bc:	006e2b51 	rsbeq	r2, lr, r1, asr fp
    26c0:	2b025f01 	blcs	9a2cc <__ccfg+0x7a324>
    26c4:	0000008d 	andeq	r0, r0, sp, lsl #1
    26c8:	00000995 	muleq	r0, r5, r9
    26cc:	2a011f00 	bcs	4a2d4 <__ccfg+0x2a32c>
    26d0:	0100000c 	tsteq	r0, ip
    26d4:	01060259 	tsteq	r6, r9, asr r2
    26d8:	0000119a 	muleq	r0, sl, r1
    26dc:	000011ae 	andeq	r1, r0, lr, lsr #3
    26e0:	0a619c01 	beq	18696ec <__ccfg+0x1849744>
    26e4:	a8200000 	stmdage	r0!, {}	; <UNPREDICTABLE>
    26e8:	0100000b 	tsteq	r0, fp
    26ec:	f6190259 			; <UNDEFINED> instruction: 0xf6190259
    26f0:	a8000001 	stmdage	r0, {r0}
    26f4:	2b000009 	blcs	2720 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x50>
    26f8:	00637273 	rsbeq	r7, r3, r3, ror r2
    26fc:	2b025901 	blcs	98b08 <__ccfg+0x78b60>
    2700:	0000070e 	andeq	r0, r0, lr, lsl #14
    2704:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    2708:	01006e2b 	tsteq	r0, fp, lsr #28
    270c:	8d340259 	lfmhi	f0, 4, [r4, #-356]!	; 0xfffffe9c
    2710:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    2714:	00000009 	andeq	r0, r0, r9
    2718:	0c9e011f 	ldfeqs	f0, [lr], {31}
    271c:	54010000 	strpl	r0, [r1], #-0
    2720:	00010602 	andeq	r0, r1, r2, lsl #12
    2724:	00000000 	andeq	r0, r0, r0
    2728:	01000000 	mrseq	r0, (UNDEF: 0)
    272c:	000aa69c 	muleq	sl, ip, r6
    2730:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    2734:	1a025401 	bne	97740 <__ccfg+0x77798>
    2738:	000001f6 	strdeq	r0, [r0], -r6
    273c:	000009ec 	andeq	r0, r0, ip, ror #19
    2740:	0100732b 	tsteq	r0, fp, lsr #6
    2744:	0e290254 	mcreq	2, 1, r0, cr9, cr4, {2}
    2748:	ff000007 			; <UNDEFINED> instruction: 0xff000007
    274c:	32000009 	andcc	r0, r0, #9
    2750:	5401006e 	strpl	r0, [r1], #-110	; 0xffffff92
    2754:	008d3002 	addeq	r3, sp, r2
    2758:	52010000 	andpl	r0, r1, #0
    275c:	71011f00 	tstvc	r1, r0, lsl #30
    2760:	0100000b 	tsteq	r0, fp
    2764:	0106024e 	tsteq	r6, lr, asr #4
	...
    2770:	0ade9c01 	beq	ff7a977c <_estack+0xdf7a477c>
    2774:	642b0000 	strtvs	r0, [fp], #-0
    2778:	024e0100 	subeq	r0, lr, #0, 2
    277c:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    2780:	000a1200 	andeq	r1, sl, r0, lsl #4
    2784:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2788:	28024e01 	stmdacs	r2, {r0, r9, sl, fp, lr}
    278c:	0000070e 	andeq	r0, r0, lr, lsl #14
    2790:	00000a30 	andeq	r0, r0, r0, lsr sl
    2794:	79011f00 	stmdbvc	r1, {r8, r9, sl, fp, ip}
    2798:	0100000c 	tsteq	r0, ip
    279c:	01060247 	tsteq	r6, r7, asr #4
	...
    27a8:	0b259c01 	bleq	9697b4 <__ccfg+0x94980c>
    27ac:	642b0000 	strtvs	r0, [fp], #-0
    27b0:	02470100 	subeq	r0, r7, #0, 2
    27b4:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    27b8:	000a4300 	andeq	r4, sl, r0, lsl #6
    27bc:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    27c0:	29024701 	stmdbcs	r2, {r0, r8, r9, sl, lr}
    27c4:	0000070e 	andeq	r0, r0, lr, lsl #14
    27c8:	00000a61 	andeq	r0, r0, r1, ror #20
    27cc:	01006e2b 	tsteq	r0, fp, lsr #28
    27d0:	8d300247 	lfmhi	f0, 4, [r0, #-284]!	; 0xfffffee4
    27d4:	74000000 	strvc	r0, [r0], #-0
    27d8:	0000000a 	andeq	r0, r0, sl
    27dc:	0a5b011f 	beq	16c2c60 <__ccfg+0x16a2cb8>
    27e0:	42010000 	andmi	r0, r1, #0
    27e4:	00010602 	andeq	r0, r1, r2, lsl #12
    27e8:	00000000 	andeq	r0, r0, r0
    27ec:	01000000 	mrseq	r0, (UNDEF: 0)
    27f0:	000b5d9c 	muleq	fp, ip, sp
    27f4:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    27f8:	19024201 	stmdbne	r2, {r0, r9, lr}
    27fc:	000001f6 	strdeq	r0, [r0], -r6
    2800:	00000a87 	andeq	r0, r0, r7, lsl #21
    2804:	0100732b 	tsteq	r0, fp, lsr #6
    2808:	0e280242 	cdpeq	2, 2, cr0, cr8, cr2, {2}
    280c:	9a000007 	bls	2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10>
    2810:	0000000a 	andeq	r0, r0, sl
    2814:	0b11012c 	bleq	442ccc <__ccfg+0x422d24>
    2818:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    281c:	8d010502 	cfstr32hi	mvfx0, [r1, #-8]
    2820:	8c000000 	stchi	0, cr0, [r0], {-0}
    2824:	9a000011 	bls	2870 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x50>
    2828:	01000011 	tsteq	r0, r1, lsl r0
    282c:	000b999c 	muleq	fp, ip, r9
    2830:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2834:	1e023901 	vmlane.f16	s6, s4, s2	; <UNPREDICTABLE>
    2838:	0000070e 	andeq	r0, r0, lr, lsl #14
    283c:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    2840:	01006922 	tsteq	r0, r2, lsr #18
    2844:	8d06023b 	sfmhi	f0, 4, [r6, #-236]	; 0xffffff14
    2848:	d6000000 	strle	r0, [r0], -r0
    284c:	0000000a 	andeq	r0, r0, sl
    2850:	0b2a012c 	bleq	a82d08 <__ccfg+0xa62d60>
    2854:	2d010000 	stccs	0, cr0, [r1, #-0]
    2858:	d9010602 	stmdble	r1, {r1, r9, sl}
	...
    2864:	01000000 	mrseq	r0, (UNDEF: 0)
    2868:	000be69c 	muleq	fp, ip, r6
    286c:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    2870:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    2874:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    2878:	0ae90000 	beq	ffa42880 <_estack+0xdfa3d880>
    287c:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2880:	022f0100 	eoreq	r0, pc, #0, 2
    2884:	0004160e 	andeq	r1, r4, lr, lsl #12
    2888:	000b0700 	andeq	r0, fp, r0, lsl #14
    288c:	00632200 	rsbeq	r2, r3, r0, lsl #4
    2890:	07023001 	streq	r3, [r2, -r1]
    2894:	000000d9 	ldrdeq	r0, [r0], -r9
    2898:	00000b25 	andeq	r0, r0, r5, lsr #22
    289c:	2b012c00 	blcs	4d8a4 <__ccfg+0x2d8fc>
    28a0:	0100000b 	tsteq	r0, fp
    28a4:	0107021f 	tsteq	r7, pc, lsl r2
    28a8:	0000011d 	andeq	r0, r0, sp, lsl r1
    28ac:	00001168 	andeq	r1, r0, r8, ror #2
    28b0:	0000118c 	andeq	r1, r0, ip, lsl #3
    28b4:	0c229c01 	stceq	12, cr9, [r2], #-4
    28b8:	662b0000 	strtvs	r0, [fp], -r0
    28bc:	01006e75 	tsteq	r0, r5, ror lr
    28c0:	f118021f 			; <UNDEFINED> instruction: 0xf118021f
    28c4:	38000002 	stmdacc	r0, {r1}
    28c8:	2300000b 	movwcs	r0, #11
    28cc:	21010069 	tstcs	r1, r9, rrx
    28d0:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    28d4:	50010000 	andpl	r0, r1, r0
    28d8:	1c012c00 	stcne	12, cr2, [r1], {-0}
    28dc:	0100000c 	tsteq	r0, ip
    28e0:	01090213 	tsteq	r9, r3, lsl r2
    28e4:	000002f1 	strdeq	r0, [r0], -r1
	...
    28f0:	0c609c01 	stcleq	12, cr9, [r0], #-4
    28f4:	702b0000 	eorvc	r0, fp, r0
    28f8:	01006469 	tsteq	r0, r9, ror #8
    28fc:	1d180213 	lfmne	f0, 4, [r8, #-76]	; 0xffffffb4
    2900:	61000001 	tstvs	r0, r1
    2904:	2200000b 	andcs	r0, r0, #11
    2908:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    290c:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    2910:	0b7f0000 	bleq	1fc2918 <__ccfg+0x1fa2970>
    2914:	1f000000 	svcne	0x00000000
    2918:	000be301 	andeq	lr, fp, r1, lsl #6
    291c:	01f50100 	mvnseq	r0, r0, lsl #2
    2920:	13580106 	cmpne	r8, #-2147483647	; 0x80000001
    2924:	13b00000 	movsne	r0, #0
    2928:	9c010000 	stcls	0, cr0, [r1], {-0}
    292c:	00000cc9 	andeq	r0, r0, r9, asr #25
    2930:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    2934:	01f50100 	mvnseq	r0, r0, lsl #2
    2938:	0002f117 	andeq	pc, r2, r7, lsl r1	; <UNPREDICTABLE>
    293c:	000b9d00 	andeq	r9, fp, r0, lsl #26
    2940:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    2944:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
    2948:	00cd0a01 	sbceq	r0, sp, r1, lsl #20
    294c:	0bbb0000 	bleq	feec2954 <_estack+0xdeebd954>
    2950:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2954:	01fa0100 	mvnseq	r0, r0, lsl #2
    2958:	0004160e 	andeq	r1, r4, lr, lsl #12
    295c:	000bce00 	andeq	ip, fp, r0, lsl #28
    2960:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    2964:	1201fa01 	andne	pc, r1, #4096	; 0x1000
    2968:	00000416 	andeq	r0, r0, r6, lsl r4
    296c:	00000c02 	andeq	r0, r0, r2, lsl #24
    2970:	01006b22 	tsteq	r0, r2, lsr #22
    2974:	161601fa 			; <UNDEFINED> instruction: 0x161601fa
    2978:	20000004 	andcs	r0, r0, r4
    297c:	0000000c 	andeq	r0, r0, ip
    2980:	0a90011f 	beq	fe402e04 <_estack+0xde3fde04>
    2984:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2988:	08010601 	stmdaeq	r1, {r0, r9, sl}
    298c:	58000013 	stmdapl	r0, {r0, r1, r4}
    2990:	01000013 	tsteq	r0, r3, lsl r0
    2994:	000d0e9c 	muleq	sp, ip, lr
    2998:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    299c:	d9010064 	stmdble	r1, {r2, r5, r6}
    29a0:	011d1201 	tsteq	sp, r1, lsl #4
    29a4:	0c3e0000 	ldceq	0, cr0, [lr], #-0
    29a8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    29ac:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    29b0:	0004160e 	andeq	r1, r4, lr, lsl #12
    29b4:	000c7200 	andeq	r7, ip, r0, lsl #4
    29b8:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    29bc:	1201dd01 	andne	sp, r1, #1, 26	; 0x40
    29c0:	00000416 	andeq	r0, r0, r6, lsl r4
    29c4:	0a542a00 	beq	150d1cc <__ccfg+0x14ed224>
    29c8:	c4010000 	strgt	r0, [r1], #-0
    29cc:	e0010d01 	and	r0, r1, r1, lsl #26
    29d0:	1c00000e 	stcne	0, cr0, [r0], {14}
    29d4:	0100000f 	tsteq	r0, pc
    29d8:	000d639c 	muleq	sp, ip, r3
    29dc:	69703200 	ldmdbvs	r0!, {r9, ip, sp}^
    29e0:	c4010064 	strgt	r0, [r1], #-100	; 0xffffff9c
    29e4:	04162101 	ldreq	r2, [r6], #-257	; 0xfffffeff
    29e8:	50010000 	andpl	r0, r1, r0
    29ec:	000c512d 	andeq	r5, ip, sp, lsr #2
    29f0:	01c80100 	biceq	r0, r8, r0, lsl #2
    29f4:	00011d08 	andeq	r1, r1, r8, lsl #26
    29f8:	000c9b00 	andeq	r9, ip, r0, lsl #22
    29fc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    2a00:	0601c901 	streq	ip, [r1], -r1, lsl #18
    2a04:	0000008d 	andeq	r0, r0, sp, lsl #1
    2a08:	00000cae 	andeq	r0, r0, lr, lsr #25
    2a0c:	01006923 	tsteq	r0, r3, lsr #18
    2a10:	160e01ca 	strne	r0, [lr], -sl, asr #3
    2a14:	01000004 	tsteq	r0, r4
    2a18:	012c0052 	qsubeq	r0, r2, ip
    2a1c:	00000c24 	andeq	r0, r0, r4, lsr #24
    2a20:	0601b301 	streq	fp, [r1], -r1, lsl #6
    2a24:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    2a30:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    2a34:	2b00000d 	blcs	2a70 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x30>
    2a38:	00646970 	rsbeq	r6, r4, r0, ror r9
    2a3c:	1301b301 	movwne	fp, #4865	; 0x1301
    2a40:	0000011d 	andeq	r0, r0, sp, lsl r1
    2a44:	00000cc1 	andeq	r0, r0, r1, asr #25
    2a48:	01006922 	tsteq	r0, r2, lsr #18
    2a4c:	160e01b5 			; <UNDEFINED> instruction: 0x160e01b5
    2a50:	df000004 	svcle	0x00000004
    2a54:	0000000c 	andeq	r0, r0, ip
    2a58:	0a730133 	beq	1cc2f2c <__ccfg+0x1ca2f84>
    2a5c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2a60:	00010601 	andeq	r0, r1, r1, lsl #12
    2a64:	00000000 	andeq	r0, r0, r0
    2a68:	01000000 	mrseq	r0, (UNDEF: 0)
    2a6c:	db011f9c 	blle	4a8e4 <__ccfg+0x2a93c>
    2a70:	01000018 	tsteq	r0, r8, lsl r0
    2a74:	0106019a 			; <UNDEFINED> instruction: 0x0106019a
    2a78:	00001130 	andeq	r1, r0, r0, lsr r1
    2a7c:	00001168 	andeq	r1, r0, r8, ror #2
    2a80:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    2a84:	642b0000 	strtvs	r0, [fp], #-0
    2a88:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2a8c:	0000d912 	andeq	sp, r0, r2, lsl r9
    2a90:	000cfd00 	andeq	pc, ip, r0, lsl #26
    2a94:	0bc12000 	bleq	ff04aa9c <_estack+0xdf045a9c>
    2a98:	9a010000 	bls	42aa0 <__ccfg+0x22af8>
    2a9c:	00d91a01 	sbcseq	r1, r9, r1, lsl #20
    2aa0:	0d100000 	ldceq	0, cr0, [r0, #-0]
    2aa4:	2c000000 	stccs	0, cr0, [r0], {-0}
    2aa8:	000c8601 	andeq	r8, ip, r1, lsl #12
    2aac:	01880100 	orreq	r0, r8, r0, lsl #2
    2ab0:	011d0107 	tsteq	sp, r7, lsl #2
    2ab4:	110c0000 	mrsne	r0, (UNDEF: 12)
    2ab8:	11300000 	teqne	r0, r0
    2abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ac0:	00000e3e 	andeq	r0, r0, lr, lsr lr
    2ac4:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2ac8:	01880100 	orreq	r0, r8, r0, lsl #2
    2acc:	00011d18 	andeq	r1, r1, r8, lsl sp
    2ad0:	000d2300 	andeq	r2, sp, r0, lsl #6
    2ad4:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    2ad8:	01880100 	orreq	r0, r8, r0, lsl #2
    2adc:	0000d922 	andeq	sp, r0, r2, lsr #18
    2ae0:	000d4c00 	andeq	r4, sp, r0, lsl #24
    2ae4:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2ae8:	0e018a01 	vmlaeq.f32	s16, s2, s2
    2aec:	00000416 	andeq	r0, r0, r6, lsl r4
    2af0:	00000d6a 	andeq	r0, r0, sl, ror #26
    2af4:	4c011f00 	stcmi	15, cr1, [r1], {-0}
    2af8:	0100000b 	tsteq	r0, fp
    2afc:	01060178 	tsteq	r6, r8, ror r1
	...
    2b08:	0e969c01 	cdpeq	12, 9, cr9, cr6, cr1, {0}
    2b0c:	702b0000 	eorvc	r0, fp, r0
    2b10:	01006469 	tsteq	r0, r9, ror #8
    2b14:	1d1b0178 	ldfnes	f0, [fp, #-480]	; 0xfffffe20
    2b18:	88000001 	stmdahi	r0, {r0}
    2b1c:	2000000d 	andcs	r0, r0, sp
    2b20:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    2b24:	26017801 	strcs	r7, [r1], -r1, lsl #16
    2b28:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b2c:	00000d9b 	muleq	r0, fp, sp
    2b30:	01006923 	tsteq	r0, r3, lsr #18
    2b34:	160e017c 			; <UNDEFINED> instruction: 0x160e017c
    2b38:	01000004 	tsteq	r0, r4
    2b3c:	006a2250 	rsbeq	r2, sl, r0, asr r2
    2b40:	07017d01 	streq	r7, [r1, -r1, lsl #26]
    2b44:	0000008d 	andeq	r0, r0, sp, lsl #1
    2b48:	00000db9 			; <UNDEFINED> instruction: 0x00000db9
    2b4c:	04011f00 	streq	r1, [r1], #-3840	; 0xfffff100
    2b50:	0100000b 	tsteq	r0, fp
    2b54:	01060166 	tsteq	r6, r6, ror #2
    2b58:	000010d8 	ldrdeq	r1, [r0], -r8
    2b5c:	0000110c 	andeq	r1, r0, ip, lsl #2
    2b60:	0edb9c01 	cdpeq	12, 13, cr9, cr11, cr1, {0}
    2b64:	b3340000 	teqlt	r4, #0
    2b68:	0100000b 	tsteq	r0, fp
    2b6c:	1d1a0166 	ldfnes	f0, [sl, #-408]	; 0xfffffe68
    2b70:	01000001 	tsteq	r0, r1
    2b74:	006a2250 	rsbeq	r2, sl, r0, asr r2
    2b78:	06016a01 	streq	r6, [r1], -r1, lsl #20
    2b7c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2b80:	00000dd7 	ldrdeq	r0, [r0], -r7
    2b84:	01006923 	tsteq	r0, r3, lsr #18
    2b88:	160e016b 	strne	r0, [lr], -fp, ror #2
    2b8c:	01000004 	tsteq	r0, r4
    2b90:	012e0052 	qsubeq	r0, r2, lr
    2b94:	00000bc7 	andeq	r0, r0, r7, asr #23
    2b98:	06015901 	streq	r5, [r1], -r1, lsl #18
    2b9c:	0f110101 	svceq	0x00110101
    2ba0:	b3350000 	teqlt	r5, #0
    2ba4:	0100000b 	tsteq	r0, fp
    2ba8:	1d170159 	ldfnes	f0, [r7, #-356]	; 0xfffffe9c
    2bac:	35000001 	strcc	r0, [r0, #-1]
    2bb0:	00000bc1 	andeq	r0, r0, r1, asr #23
    2bb4:	23015901 	movwcs	r5, #6401	; 0x1901
    2bb8:	000000d9 	ldrdeq	r0, [r0], -r9
    2bbc:	01006a24 	tsteq	r0, r4, lsr #20
    2bc0:	ef07015d 	svc	0x0007015d
    2bc4:	00000000 	andeq	r0, r0, r0
    2bc8:	0b3f011f 	bleq	fc304c <__ccfg+0xfa30a4>
    2bcc:	53010000 	movwpl	r0, #4096	; 0x1000
    2bd0:	90010601 	andls	r0, r1, r1, lsl #12
    2bd4:	a4000010 	strge	r0, [r0], #-16
    2bd8:	01000010 	tsteq	r0, r0, lsl r0
    2bdc:	000f3c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    2be0:	0bc12000 	bleq	ff04abe8 <_estack+0xdf045be8>
    2be4:	53010000 	movwpl	r0, #4096	; 0x1000
    2be8:	00d91401 	sbcseq	r1, r9, r1, lsl #8
    2bec:	0dea0000 	stcleq	0, cr0, [sl]
    2bf0:	2c000000 	stccs	0, cr0, [r0], {-0}
    2bf4:	000a8601 	andeq	r8, sl, r1, lsl #12
    2bf8:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    2bfc:	011d0107 	tsteq	sp, r7, lsl #2
    2c00:	14580000 	ldrbne	r0, [r8], #-0
    2c04:	148c0000 	strne	r0, [ip], #0
    2c08:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c0c:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    2c10:	000b6020 	andeq	r6, fp, r0, lsr #32
    2c14:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    2c18:	0002f11a 	andeq	pc, r2, sl, lsl r1	; <UNPREDICTABLE>
    2c1c:	000dfd00 	andeq	pc, sp, r0, lsl #26
    2c20:	0f7f2000 	svceq	0x007f2000
    2c24:	2c010000 	stccs	0, cr0, [r1], {-0}
    2c28:	011d2601 	tsteq	sp, r1, lsl #12
    2c2c:	0e1b0000 	cdpeq	0, 1, cr0, cr11, cr0, {0}
    2c30:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2c34:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    2c38:	0004160e 	andeq	r1, r4, lr, lsl #12
    2c3c:	36500100 	ldrbcc	r0, [r0], -r0, lsl #2
    2c40:	00000668 	andeq	r0, r0, r8, ror #12
    2c44:	01006a22 	tsteq	r0, r2, lsr #20
    2c48:	160f013d 			; <UNDEFINED> instruction: 0x160f013d
    2c4c:	39000004 	stmdbcc	r0, {r2}
    2c50:	0000000e 	andeq	r0, r0, lr
    2c54:	04013700 	streq	r3, [r1], #-1792	; 0xfffff900
    2c58:	0100000c 	tsteq	r0, ip
    2c5c:	010106af 	smlatbeq	r1, pc, r6, r0	; <UNPREDICTABLE>
    2c60:	00000fe3 	andeq	r0, r0, r3, ror #31
    2c64:	6e696d38 	mcrvs	13, 3, r6, cr9, cr8, {1}
    2c68:	1aaf0100 	bne	febc3070 <_estack+0xdebbe070>
    2c6c:	000000d9 	ldrdeq	r0, [r0], -r9
    2c70:	00080139 	andeq	r0, r8, r9, lsr r1
    2c74:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    2c78:	000000cd 	andeq	r0, r0, sp, asr #1
    2c7c:	0100693a 	tsteq	r0, sl, lsr r9
    2c80:	04160ebd 	ldreq	r0, [r6], #-3773	; 0xfffff143
    2c84:	643a0000 	ldrtvs	r0, [sl], #-0
    2c88:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    2c8c:	000000d9 	ldrdeq	r0, [r0], -r9
    2c90:	4b4f4d3b 	blmi	13d6184 <__ccfg+0x13b61dc>
    2c94:	01090100 	mrseq	r0, (UNDEF: 25)
    2c98:	013c0001 	teqeq	ip, r1
    2c9c:	00000c41 	andeq	r0, r0, r1, asr #24
    2ca0:	0106a701 	tsteq	r6, r1, lsl #14
	...
    2cac:	10189c01 	andsne	r9, r8, r1, lsl #24
    2cb0:	743d0000 	ldrtvc	r0, [sp], #-0
    2cb4:	1fa70100 	svcne	0x00a70100
    2cb8:	00000129 	andeq	r0, r0, r9, lsr #2
    2cbc:	00000e62 	andeq	r0, r0, r2, ror #28
    2cc0:	0100763d 	tsteq	r0, sp, lsr r6
    2cc4:	00d927a7 	sbcseq	r2, r9, r7, lsr #15
    2cc8:	0e750000 	cdpeq	0, 7, cr0, cr5, cr0, {0}
    2ccc:	3c000000 	stccc	0, cr0, [r0], {-0}
    2cd0:	000c9001 	andeq	r9, ip, r1
    2cd4:	068f0100 	streq	r0, [pc], r0, lsl #2
    2cd8:	00000001 	andeq	r0, r0, r1
    2cdc:	00000000 	andeq	r0, r0, r0
    2ce0:	4e9c0100 	fmlmie	f0, f4, f0
    2ce4:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2ce8:	01007475 	tsteq	r0, r5, ror r4
    2cec:	01291d8f 	smlawbeq	r9, pc, sp, r1	; <UNPREDICTABLE>
    2cf0:	0e880000 	cdpeq	0, 8, cr0, cr8, cr0, {0}
    2cf4:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    2cf8:	06930100 	ldreq	r0, [r3], r0, lsl #2
    2cfc:	0000008d 	andeq	r0, r0, sp, lsl #1
    2d00:	00000ea6 	andeq	r0, r0, r6, lsr #29
    2d04:	a6013c00 	strge	r3, [r1], -r0, lsl #24
    2d08:	0100000a 	tsteq	r0, sl
    2d0c:	0001067f 	andeq	r0, r1, pc, ror r6
    2d10:	00000000 	andeq	r0, r0, r0
    2d14:	01000000 	mrseq	r0, (UNDEF: 0)
    2d18:	0010849c 	mulseq	r0, ip, r4
    2d1c:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    2d20:	1a7f0100 	bne	1fc3128 <__ccfg+0x1fa3180>
    2d24:	00000129 	andeq	r0, r0, r9, lsr #2
    2d28:	00000ec4 	andeq	r0, r0, r4, asr #29
    2d2c:	0100693e 	tsteq	r0, lr, lsr r9
    2d30:	008d0683 	addeq	r0, sp, r3, lsl #13
    2d34:	0eed0000 	cdpeq	0, 14, cr0, cr13, cr0, {0}
    2d38:	3f000000 	svccc	0x00000000
    2d3c:	000bb901 	andeq	fp, fp, r1, lsl #18
    2d40:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2d44:	000fb401 	andeq	fp, pc, r1, lsl #8
    2d48:	000fc400 	andeq	ip, pc, r0, lsl #8
    2d4c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    2d50:	00000b65 	andeq	r0, r0, r5, ror #22
    2d54:	01145f01 	tsteq	r4, r1, lsl #30
    2d58:	00000416 	andeq	r0, r0, r6, lsl r4
    2d5c:	0010c101 	andseq	ip, r0, r1, lsl #2
    2d60:	69703800 	ldmdbvs	r0!, {fp, ip, sp}^
    2d64:	5f010064 	svcpl	0x00010064
    2d68:	00011d22 	andeq	r1, r1, r2, lsr #26
    2d6c:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    2d70:	16176101 	ldrne	r6, [r7], -r1, lsl #2
    2d74:	00000004 	andeq	r0, r0, r4
    2d78:	000ab141 	andeq	fp, sl, r1, asr #2
    2d7c:	029e0200 	addseq	r0, lr, #0, 4
    2d80:	10e20101 	rscne	r0, r2, r1, lsl #2
    2d84:	e2030000 	and	r0, r3, #0
    2d88:	35000010 	strcc	r0, [r0, #-16]
    2d8c:	00000771 	andeq	r0, r0, r1, ror r7
    2d90:	13029e02 	movwne	r9, #11778	; 0x2e02
    2d94:	00000073 	andeq	r0, r0, r3, ror r0
    2d98:	02010200 	andeq	r0, r1, #0, 4
    2d9c:	00000bf8 	strdeq	r0, [r0], -r8
    2da0:	00109842 	andseq	r9, r0, r2, asr #16
	...
    2dac:	2e9c0100 	fmlcse	f0, f4, f0
    2db0:	43000011 	movwmi	r0, #17
    2db4:	000010aa 	andeq	r1, r0, sl, lsr #1
    2db8:	00000f0b 	andeq	r0, r0, fp, lsl #30
    2dbc:	0010b644 	andseq	fp, r0, r4, asr #12
    2dc0:	000f3400 	andeq	r3, pc, r0, lsl #8
    2dc4:	10984500 	addsne	r4, r8, r0, lsl #10
	...
    2dd0:	5f010000 	svcpl	0x00010000
    2dd4:	10aa4314 	adcne	r4, sl, r4, lsl r3
    2dd8:	0f520000 	svceq	0x00520000
    2ddc:	b6460000 	strblt	r0, [r6], -r0
    2de0:	00000010 	andeq	r0, r0, r0, lsl r0
    2de4:	0f9e4200 	svceq	0x009e4200
    2de8:	0fc40000 	svceq	0x00c40000
    2dec:	10900000 	addsne	r0, r0, r0
    2df0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2df4:	0000119a 	muleq	r0, sl, r1
    2df8:	000fad43 	andeq	sl, pc, r3, asr #26
    2dfc:	000f6500 	andeq	r6, pc, r0, lsl #10
    2e00:	0fb94300 	svceq	0x00b94300
    2e04:	0f780000 	svceq	0x00780000
    2e08:	c5460000 	strbgt	r0, [r6, #-0]
    2e0c:	4600000f 	strmi	r0, [r0], -pc
    2e10:	00000fcf 	andeq	r0, r0, pc, asr #31
    2e14:	000f9e47 	andeq	r9, pc, r7, asr #28
    2e18:	000fd200 	andeq	sp, pc, r0, lsl #4
    2e1c:	00065000 	andeq	r5, r6, r0
    2e20:	06af0100 	strteq	r0, [pc], r0, lsl #2
    2e24:	000fb929 	andeq	fp, pc, r9, lsr #18
    2e28:	0fad4300 	svceq	0x00ad4300
    2e2c:	0f8b0000 	svceq	0x008b0000
    2e30:	50360000 	eorspl	r0, r6, r0
    2e34:	44000006 	strmi	r0, [r0], #-6
    2e38:	00000fc5 	andeq	r0, r0, r5, asr #31
    2e3c:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    2e40:	000fcf46 	andeq	ip, pc, r6, asr #30
    2e44:	0fd94800 	svceq	0x00d94800
    2e48:	106e0000 	rsbne	r0, lr, r0
    2e4c:	00000000 	andeq	r0, r0, r0
    2e50:	0edb4200 	cdpeq	2, 13, cr4, cr11, cr0, {0}
    2e54:	10a40000 	adcne	r0, r4, r0
    2e58:	10d80000 	sbcsne	r0, r8, r0
    2e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e60:	000011ee 	andeq	r1, r0, lr, ror #3
    2e64:	000eeb43 	andeq	lr, lr, r3, asr #22
    2e68:	000fd200 	andeq	sp, pc, r0, lsl #4
    2e6c:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    2e70:	0ff00000 	svceq	0x00f00000	; IMB
    2e74:	05460000 	strbeq	r0, [r6, #-0]
    2e78:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    2e7c:	00000edb 	ldrdeq	r0, [r0], -fp
    2e80:	000010b6 	strheq	r1, [r0], -r6
    2e84:	000010be 	strheq	r1, [r0], -lr
    2e88:	06015901 	streq	r5, [r1], -r1, lsl #18
    2e8c:	000eeb43 	andeq	lr, lr, r3, asr #22
    2e90:	00100e00 	andseq	r0, r0, r0, lsl #28
    2e94:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    2e98:	10210000 	eorne	r0, r1, r0
    2e9c:	05460000 	strbeq	r0, [r6, #-0]
    2ea0:	0000000f 	andeq	r0, r0, pc
    2ea4:	08804a00 	stmeq	r0, {r9, fp, lr}
    2ea8:	12c00000 	sbcne	r0, r0, #0
    2eac:	13080000 	movwne	r0, #32768	; 0x8000
    2eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2eb4:	00089043 	andeq	r9, r8, r3, asr #32
    2eb8:	00103400 	andseq	r3, r0, r0, lsl #8
    2ebc:	08804900 	stmeq	r0, {r8, fp, lr}
    2ec0:	12cc0000 	sbcne	r0, ip, #0
    2ec4:	12d40000 	sbcsne	r0, r4, #0
    2ec8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2ecc:	90430603 	subls	r0, r3, r3, lsl #12
    2ed0:	52000008 	andpl	r0, r0, #8
    2ed4:	00000010 	andeq	r0, r0, r0, lsl r0
    2ed8:	13330000 	teqne	r3, #0
    2edc:	00030000 	andeq	r0, r3, r0
    2ee0:	00000c47 	andeq	r0, r0, r7, asr #24
    2ee4:	01720104 	cmneq	r2, r4, lsl #2
    2ee8:	df0c0000 	svcle	0x000c0000
    2eec:	d300000c 	movwle	r0, #12
    2ef0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2ef4:	00000008 	andeq	r0, r0, r8
    2ef8:	74000000 	strvc	r0, [r0], #-0
    2efc:	02000029 	andeq	r0, r0, #41	; 0x29
    2f00:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    2f04:	02020000 	andeq	r0, r2, #0
    2f08:	0003f105 	andeq	pc, r3, r5, lsl #2
    2f0c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2f10:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2f14:	ab050802 	blge	144f24 <__ccfg+0x124f7c>
    2f18:	03000000 	movweq	r0, #0
    2f1c:	0000223c 	andeq	r2, r0, ip, lsr r2
    2f20:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    2f24:	02000000 	andeq	r0, r0, #0
    2f28:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    2f2c:	2a030000 	bcs	c2f34 <__ccfg+0xa2f8c>
    2f30:	02000021 	andeq	r0, r0, #33	; 0x21
    2f34:	00601931 	rsbeq	r1, r0, r1, lsr r9
    2f38:	02020000 	andeq	r0, r2, #0
    2f3c:	00027307 	andeq	r7, r2, r7, lsl #6
    2f40:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    2f44:	34020000 	strcc	r0, [r2], #-0
    2f48:	00007319 	andeq	r7, r0, r9, lsl r3
    2f4c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2f50:	00000085 	andeq	r0, r0, r5, lsl #1
    2f54:	80070802 	andhi	r0, r7, r2, lsl #16
    2f58:	04000000 	streq	r0, [r0], #-0
    2f5c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2f60:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2f64:	00008a07 	andeq	r8, r0, r7, lsl #20
    2f68:	0b860300 	bleq	fe183b70 <_estack+0xde17eb70>
    2f6c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2f70:	00009b1b 	andeq	r9, r0, fp, lsl fp
    2f74:	0a9c0500 	beq	fe70437c <_estack+0xde6ff37c>
    2f78:	0d040000 	stceq	0, cr0, [r4, #-0]
    2f7c:	0000b300 	andeq	fp, r0, r0, lsl #6
    2f80:	0c3c0600 	ldceq	6, cr0, [ip], #-0
    2f84:	00b30000 	adcseq	r0, r3, r0
    2f88:	01000000 	mrseq	r0, (UNDEF: 0)
    2f8c:	03040700 	movweq	r0, #18176	; 0x4700
    2f90:	00000a9e 	muleq	r0, lr, sl
    2f94:	8f186303 	svchi	0x00186303
    2f98:	03000000 	movweq	r0, #0
    2f9c:	0000041c 	andeq	r0, r0, ip, lsl r4
    2fa0:	41122604 	tstmi	r2, r4, lsl #12
    2fa4:	03000000 	movweq	r0, #0
    2fa8:	00001600 	andeq	r1, r0, r0, lsl #12
    2fac:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    2fb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fb4:	000000cd 	andeq	r0, r0, sp, asr #1
    2fb8:	0000cd09 	andeq	ip, r0, r9, lsl #26
    2fbc:	13f80300 	mvnsne	r0, #0, 6
    2fc0:	2b040000 	blcs	102fc8 <__ccfg+0xe3020>
    2fc4:	00004112 	andeq	r4, r0, r2, lsl r1
    2fc8:	00e30900 	rsceq	r0, r3, r0, lsl #18
    2fcc:	e3080000 	movw	r0, #32768	; 0x8000
    2fd0:	03000000 	movweq	r0, #0
    2fd4:	00001651 	andeq	r1, r0, r1, asr r6
    2fd8:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    2fdc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fe0:	000000f9 	strdeq	r0, [r0], -r9
    2fe4:	0002a603 	andeq	sl, r2, r3, lsl #12
    2fe8:	122d0400 	eorne	r0, sp, #0, 8
    2fec:	00000067 	andeq	r0, r0, r7, rrx
    2ff0:	0007a203 	andeq	sl, r7, r3, lsl #4
    2ff4:	102e0400 	eorne	r0, lr, r0, lsl #8
    2ff8:	00000122 	andeq	r0, r0, r2, lsr #2
    2ffc:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    3000:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    3004:	b6093204 	strlt	r3, [r9], -r4, lsl #4
    3008:	0c000001 	stceq	0, cr0, [r0], {1}
    300c:	000002c1 	andeq	r0, r0, r1, asr #5
    3010:	e3073404 	movw	r3, #29700	; 0x7404
    3014:	01000000 	mrseq	r0, (UNDEF: 0)
    3018:	0c000701 	stceq	7, cr0, [r0], {1}
    301c:	000000a4 	andeq	r0, r0, r4, lsr #1
    3020:	e3033504 	movw	r3, #13572	; 0x3504
    3024:	01000000 	mrseq	r0, (UNDEF: 0)
    3028:	0c000601 	stceq	6, cr0, [r0], {1}
    302c:	0000028f 	andeq	r0, r0, pc, lsl #5
    3030:	e3033604 	movw	r3, #13828	; 0x3604
    3034:	01000000 	mrseq	r0, (UNDEF: 0)
    3038:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    303c:	0000042b 	andeq	r0, r0, fp, lsr #8
    3040:	e3033704 	movw	r3, #14084	; 0x3704
    3044:	01000000 	mrseq	r0, (UNDEF: 0)
    3048:	0c000401 	cfstrseq	mvf0, [r0], {1}
    304c:	00000424 	andeq	r0, r0, r4, lsr #8
    3050:	e3033804 	movw	r3, #14340	; 0x3804
    3054:	01000000 	mrseq	r0, (UNDEF: 0)
    3058:	0d000004 	stceq	0, cr0, [r0, #-16]
    305c:	00000415 	andeq	r0, r0, r5, lsl r4
    3060:	e3073a04 	movw	r3, #31236	; 0x7a04
    3064:	01000000 	mrseq	r0, (UNDEF: 0)
    3068:	00004c0d 	andeq	r4, r0, sp, lsl #24
    306c:	033c0400 	teqeq	ip, #0, 8
    3070:	000000e3 	andeq	r0, r0, r3, ror #1
    3074:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    3078:	3d040000 	stccc	0, cr0, [r4, #-0]
    307c:	0000e303 	andeq	lr, r0, r3, lsl #6
    3080:	610d0300 	mrsvs	r0, SP_mon
    3084:	04000001 	streq	r0, [r0], #-1
    3088:	00f9083f 	rscseq	r0, r9, pc, lsr r8
    308c:	00040000 	andeq	r0, r4, r0
    3090:	00045403 	andeq	r5, r4, r3, lsl #8
    3094:	03410400 	movteq	r0, #5120	; 0x1400
    3098:	00000128 	andeq	r0, r0, r8, lsr #2
    309c:	0001b609 	andeq	fp, r1, r9, lsl #12
    30a0:	02b50e00 	adcseq	r0, r5, #0, 28
    30a4:	43040000 	movwmi	r0, #16384	; 0x4000
    30a8:	0001c21a 	andeq	ip, r1, sl, lsl r2
    30ac:	0e010100 	adfeqs	f0, f1, f0
    30b0:	00000321 	andeq	r0, r0, r1, lsr #6
    30b4:	e30e4504 	movw	r4, #58628	; 0xe504
    30b8:	01000001 	tsteq	r0, r1
    30bc:	e9040a01 	stmdb	r4, {r0, r9, fp}
    30c0:	02000001 	andeq	r0, r0, #1
    30c4:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    30c8:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    30cc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    30d0:	0000032f 	andeq	r0, r0, pc, lsr #6
    30d4:	e31e4504 	tst	lr, #4, 10	; 0x1000000
    30d8:	01000001 	tsteq	r0, r1
    30dc:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    30e0:	0234098f 	eorseq	r0, r4, #2342912	; 0x23c000
    30e4:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    30e8:	05000002 	streq	r0, [r0, #-2]
    30ec:	00670b90 	mlseq	r7, r0, fp, r0
    30f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    30f4:	0000062d 	andeq	r0, r0, sp, lsr #12
    30f8:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    30fc:	04000000 	streq	r0, [r0], #-0
    3100:	00049c0d 	andeq	r9, r4, sp, lsl #24
    3104:	10920500 	addsne	r0, r2, r0, lsl #10
    3108:	000000ef 	andeq	r0, r0, pc, ror #1
    310c:	32030006 	andcc	r0, r3, #6
    3110:	05000004 	streq	r0, [r0, #-4]
    3114:	02030393 	andeq	r0, r3, #1275068418	; 0x4c000002
    3118:	340f0000 	strcc	r0, [pc], #-0	; 3120 <__exidx_end+0x2ac>
    311c:	4b000002 	blmi	312c <__exidx_end+0x2b8>
    3120:	10000002 	andne	r0, r0, r2
    3124:	00420e00 	subeq	r0, r2, r0, lsl #28
    3128:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    312c:	0002400f 	andeq	r4, r2, pc
    3130:	0a010100 	beq	43538 <__ccfg+0x23590>
    3134:	0000f404 	andeq	pc, r0, r4, lsl #8
    3138:	06010b00 	streq	r0, [r1], -r0, lsl #22
    313c:	02890991 	addeq	r0, r9, #2375680	; 0x244000
    3140:	8f0c0000 	svchi	0x000c0000
    3144:	06000004 	streq	r0, [r0], -r4
    3148:	00e30793 	smlaleq	r0, r3, r3, r7
    314c:	07010000 	streq	r0, [r1, -r0]
    3150:	3d0c0001 	stccc	0, cr0, [ip, #-4]
    3154:	06000000 	streq	r0, [r0], -r0
    3158:	00e30394 	smlaleq	r0, r3, r4, r3
    315c:	01010000 	mrseq	r0, (UNDEF: 1)
    3160:	03000000 	movweq	r0, #0
    3164:	00000286 	andeq	r0, r0, r6, lsl #5
    3168:	5f039606 	svcpl	0x00039606
    316c:	08000002 	stmdaeq	r0, {r1}
    3170:	00000289 	andeq	r0, r0, r9, lsl #5
    3174:	0002950f 	andeq	r9, r2, pc, lsl #10
    3178:	0002a500 	andeq	sl, r2, r0, lsl #10
    317c:	08001000 	stmdaeq	r0, {ip}
    3180:	0000029a 	muleq	r0, sl, r2
    3184:	0002eb0e 	andeq	lr, r2, lr, lsl #22
    3188:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    318c:	000002a5 	andeq	r0, r0, r5, lsr #5
    3190:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    3194:	c3000000 	movwgt	r0, #0
    3198:	10000002 	andne	r0, r0, r2
    319c:	02b80800 	adcseq	r0, r8, #0, 16
    31a0:	a70e0000 	strge	r0, [lr, -r0]
    31a4:	07000003 	streq	r0, [r0, -r3]
    31a8:	02c31306 	sbceq	r1, r3, #402653184	; 0x18000000
    31ac:	01010000 	mrseq	r0, (UNDEF: 1)
    31b0:	0001410e 	andeq	r4, r1, lr, lsl #2
    31b4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    31b8:	000000f9 	strdeq	r0, [r0], -r9
    31bc:	a9110101 	ldmdbge	r1, {r0, r8}
    31c0:	08000004 	stmdaeq	r0, {r2}
    31c4:	f110016e 			; <UNDEFINED> instruction: 0xf110016e
    31c8:	0a000002 	beq	31d8 <__exidx_end+0x364>
    31cc:	0002f704 	andeq	pc, r2, r4, lsl #14
    31d0:	03011200 	movweq	r1, #4608	; 0x1200
    31d4:	13000003 	movwne	r0, #3
    31d8:	000000cd 	andeq	r0, r0, sp, asr #1
    31dc:	01f00f00 	mvnseq	r0, r0, lsl #30
    31e0:	030e0000 	movweq	r0, #57344	; 0xe000
    31e4:	00100000 	andseq	r0, r0, r0
    31e8:	00030308 	andeq	r0, r3, r8, lsl #6
    31ec:	04641400 	strbteq	r1, [r4], #-1024	; 0xfffffc00
    31f0:	7f080000 	svcvc	0x00080000
    31f4:	030e1601 	movweq	r1, #58881	; 0xe601
    31f8:	01010000 	mrseq	r0, (UNDEF: 1)
    31fc:	00039f14 	andeq	r9, r3, r4, lsl pc
    3200:	01820800 	orreq	r0, r2, r0, lsl #16
    3204:	00010514 	andeq	r0, r1, r4, lsl r5
    3208:	0b010100 	bleq	43610 <__ccfg+0x23668>
    320c:	09080904 	stmdbeq	r8, {r2, r8, fp}
    3210:	00000355 	andeq	r0, r0, r5, asr r3
    3214:	000efe0d 	andeq	pc, lr, sp, lsl #28
    3218:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    321c:	000000cd 	andeq	r0, r0, sp, asr #1
    3220:	0e7c0d00 	cdpeq	13, 7, cr0, cr12, cr0, {0}
    3224:	10090000 	andne	r0, r9, r0
    3228:	0000cd03 	andeq	ip, r0, r3, lsl #26
    322c:	03000200 	movweq	r0, #512	; 0x200
    3230:	00000eec 	andeq	r0, r0, ip, ror #29
    3234:	31031109 	tstcc	r3, r9, lsl #2
    3238:	0b000003 	bleq	324c <__exidx_end+0x3d8>
    323c:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    3240:	000003d3 	ldrdeq	r0, [r0], -r3
    3244:	000edc0d 	andeq	sp, lr, sp, lsl #24
    3248:	08170900 	ldmdaeq	r7, {r8, fp}
    324c:	000003ed 	andeq	r0, r0, sp, ror #7
    3250:	0de40d00 	stcleq	13, cr0, [r4]
    3254:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    3258:	00040808 	andeq	r0, r4, r8, lsl #16
    325c:	4c0d0400 	cfstrsmi	mvf0, [sp], {-0}
    3260:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3264:	043e0819 	ldrteq	r0, [lr], #-2073	; 0xfffff7e7
    3268:	0d080000 	stceq	0, cr0, [r8, #-0]
    326c:	00000e9a 	muleq	r0, sl, lr
    3270:	59081a09 	stmdbpl	r8, {r0, r3, r9, fp, ip}
    3274:	0c000004 	stceq	0, cr0, [r0], {4}
    3278:	000e0b0d 	andeq	r0, lr, sp, lsl #22
    327c:	081b0900 	ldmdaeq	fp, {r8, fp}
    3280:	0000046f 	andeq	r0, r0, pc, ror #8
    3284:	0ee40d10 	mcreq	13, 7, r0, cr4, cr0, {0}
    3288:	1c090000 	stcne	0, cr0, [r9], {-0}
    328c:	00046f08 	andeq	r6, r4, r8, lsl #30
    3290:	230d1400 	movwcs	r1, #54272	; 0xd400
    3294:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3298:	046f081d 	strbteq	r0, [pc], #-2077	; 32a0 <__exidx_end+0x42c>
    329c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    32a0:	00000d56 	andeq	r0, r0, r6, asr sp
    32a4:	81061e09 	tsthi	r6, r9, lsl #28
    32a8:	1c000000 	stcne	0, cr0, [r0], {-0}
    32ac:	81011500 	tsthi	r1, r0, lsl #10
    32b0:	ed000000 	stc	0, cr0, [r0, #-0]
    32b4:	13000003 	movwne	r0, #3
    32b8:	00000081 	andeq	r0, r0, r1, lsl #1
    32bc:	00008113 	andeq	r8, r0, r3, lsl r1
    32c0:	00b51300 	adcseq	r1, r5, r0, lsl #6
    32c4:	0a000000 	beq	32cc <__exidx_end+0x458>
    32c8:	0003d304 	andeq	sp, r3, r4, lsl #6
    32cc:	81011500 	tsthi	r1, r0, lsl #10
    32d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    32d4:	13000004 	movwne	r0, #4
    32d8:	00000081 	andeq	r0, r0, r1, lsl #1
    32dc:	00008113 	andeq	r8, r0, r3, lsl r1
    32e0:	040a0000 	streq	r0, [sl], #-0
    32e4:	000003f3 	strdeq	r0, [r0], -r3
    32e8:	00810115 	addeq	r0, r1, r5, lsl r1
    32ec:	04320000 	ldrteq	r0, [r2], #-0
    32f0:	81130000 	tsthi	r3, r0
    32f4:	13000000 	movwne	r0, #0
    32f8:	00000116 	andeq	r0, r0, r6, lsl r1
    32fc:	00008113 	andeq	r8, r0, r3, lsl r1
    3300:	04321300 	ldrteq	r1, [r2], #-768	; 0xfffffd00
    3304:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3308:	00000004 	andeq	r0, r0, r4
    330c:	0081040a 	addeq	r0, r1, sl, lsl #8
    3310:	040a0000 	streq	r0, [sl], #-0
    3314:	00000355 	andeq	r0, r0, r5, asr r3
    3318:	040e040a 	streq	r0, [lr], #-1034	; 0xfffffbf6
    331c:	01150000 	tsteq	r5, r0
    3320:	00000081 	andeq	r0, r0, r1, lsl #1
    3324:	00000459 	andeq	r0, r0, r9, asr r4
    3328:	00011613 	andeq	r1, r1, r3, lsl r6
    332c:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    3330:	0a000000 	beq	3338 <__exidx_end+0x4c4>
    3334:	00044404 	andeq	r4, r4, r4, lsl #8
    3338:	81011500 	tsthi	r1, r0, lsl #10
    333c:	6f000000 	svcvs	0x00000000
    3340:	13000004 	movwne	r0, #4
    3344:	00000116 	andeq	r0, r0, r6, lsl r1
    3348:	5f040a00 	svcpl	0x00040a00
    334c:	03000004 	movweq	r0, #4
    3350:	00000d41 	andeq	r0, r0, r1, asr #26
    3354:	61031f09 	tstvs	r3, r9, lsl #30
    3358:	08000003 	stmdaeq	r0, {r0, r1}
    335c:	00000475 	andeq	r0, r0, r5, ror r4
    3360:	000da116 	andeq	sl, sp, r6, lsl r1
    3364:	24090800 	strcs	r0, [r9], #-2048	; 0xfffff800
    3368:	0004ae08 	andeq	sl, r4, r8, lsl #28
    336c:	0d320d00 	ldceq	13, cr0, [r2, #-0]
    3370:	25090000 	strcs	r0, [r9, #-0]
    3374:	0004ae18 	andeq	sl, r4, r8, lsl lr
    3378:	b50d0000 	strlt	r0, [sp, #-0]
    337c:	0900000c 	stmdbeq	r0, {r2, r3}
    3380:	04ae0626 	strteq	r0, [lr], #1574	; 0x626
    3384:	00040000 	andeq	r0, r4, r0
    3388:	0486040a 	streq	r0, [r6], #1034	; 0x40a
    338c:	af030000 	svcge	0x00030000
    3390:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3394:	04861e29 	streq	r1, [r6], #3625	; 0xe29
    3398:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    339c:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    33a0:	04861e2a 	streq	r1, [r6], #3626	; 0xe2a
    33a4:	020b0000 	andeq	r0, fp, #0
    33a8:	36023f09 	strcc	r3, [r2], -r9, lsl #30
    33ac:	0c000005 	stceq	0, cr0, [r0], {5}
    33b0:	00000e81 	andeq	r0, r0, r1, lsl #29
    33b4:	cd094009 	stcgt	0, cr4, [r9, #-36]	; 0xffffffdc
    33b8:	02000000 	andeq	r0, r0, #0
    33bc:	0c000f01 	stceq	15, cr0, [r0], {1}
    33c0:	00000f60 	andeq	r0, r0, r0, ror #30
    33c4:	cd044109 	stfgts	f4, [r4, #-36]	; 0xffffffdc
    33c8:	02000000 	andeq	r0, r0, #0
    33cc:	0c000e01 	stceq	14, cr0, [r0], {1}
    33d0:	00000dd1 	ldrdeq	r0, [r0], -r1
    33d4:	cd044209 	sfmgt	f4, 4, [r4, #-36]	; 0xffffffdc
    33d8:	02000000 	andeq	r0, r0, #0
    33dc:	0c000d01 	stceq	13, cr0, [r0], {1}
    33e0:	00000ea2 	andeq	r0, r0, r2, lsr #29
    33e4:	cd044309 	stcgt	3, cr4, [r4, #-36]	; 0xffffffdc
    33e8:	02000000 	andeq	r0, r0, #0
    33ec:	0c000607 	stceq	6, cr0, [r0], {7}
    33f0:	00000f1c 	andeq	r0, r0, ip, lsl pc
    33f4:	cd044409 	cfstrsgt	mvf4, [r4, #-36]	; 0xffffffdc
    33f8:	02000000 	andeq	r0, r0, #0
    33fc:	0c000303 	stceq	3, cr0, [r0], {3}
    3400:	00000e6e 	andeq	r0, r0, lr, ror #28
    3404:	cd044509 	cfstr32gt	mvfx4, [r4, #-36]	; 0xffffffdc
    3408:	02000000 	andeq	r0, r0, #0
    340c:	00000003 	andeq	r0, r0, r3
    3410:	3d090217 	sfmcc	f0, 4, [r9, #-92]	; 0xffffffa4
    3414:	00055609 	andeq	r5, r5, r9, lsl #12
    3418:	0dd81800 	ldcleq	8, cr1, [r8]
    341c:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    3420:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3424:	00621900 	rsbeq	r1, r2, r0, lsl #18
    3428:	cc044609 	stcgt	6, cr4, [r4], {9}
    342c:	00000004 	andeq	r0, r0, r4
    3430:	000cba03 	andeq	fp, ip, r3, lsl #20
    3434:	03470900 	movteq	r0, #30976	; 0x7900
    3438:	00000536 	andeq	r0, r0, r6, lsr r5
    343c:	50090817 	andpl	r0, r9, r7, lsl r8
    3440:	00058405 	andeq	r8, r5, r5, lsl #8
    3444:	0f421800 	svceq	0x00421800
    3448:	51090000 	mrspl	r0, (UNDEF: 9)
    344c:	0004b410 	andeq	fp, r4, r0, lsl r4
    3450:	0e301800 	cdpeq	8, 3, cr1, cr0, cr0, {0}
    3454:	52090000 	andpl	r0, r9, #0
    3458:	0003550b 	andeq	r5, r3, fp, lsl #10
    345c:	51160000 	tstpl	r6, r0
    3460:	0c00000f 	stceq	0, cr0, [r0], {15}
    3464:	b7084c09 	strlt	r4, [r8, -r9, lsl #24]
    3468:	1a000005 	bne	3484 <__exidx_end+0x610>
    346c:	58090075 	stmdapl	r9, {r0, r2, r4, r5, r6}
    3470:	00056207 	andeq	r6, r5, r7, lsl #4
    3474:	230d0000 	movwcs	r0, #53248	; 0xd000
    3478:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    347c:	00cd0763 	sbceq	r0, sp, r3, ror #14
    3480:	0d080000 	stceq	0, cr0, [r8, #-0]
    3484:	00000f03 	andeq	r0, r0, r3, lsl #30
    3488:	56106809 	ldrpl	r6, [r0], -r9, lsl #16
    348c:	0a000005 	beq	34a8 <__exidx_end+0x634>
    3490:	0dbd0300 	ldceq	3, cr0, [sp]
    3494:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    3498:	0005841f 	andeq	r8, r5, pc, lsl r4
    349c:	090c0b00 	stmdbeq	ip, {r8, r9, fp}
    34a0:	05e7097b 	strbeq	r0, [r7, #2427]!	; 0x97b
    34a4:	1c0d0000 	stcne	0, cr0, [sp], {-0}
    34a8:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    34ac:	04c0117f 	strbeq	r1, [r0], #383	; 0x17f
    34b0:	0d000000 	stceq	0, cr0, [r0, #-0]
    34b4:	00000ed1 	ldrdeq	r0, [r0], -r1
    34b8:	56118309 	ldrpl	r8, [r1], -r9, lsl #6
    34bc:	08000005 	stmdaeq	r0, {r0, r2}
    34c0:	0e5e0300 	cdpeq	3, 5, cr0, cr14, cr0, {0}
    34c4:	92090000 	andls	r0, r9, #0
    34c8:	0005c303 	andeq	ip, r5, r3, lsl #6
    34cc:	04941400 	ldreq	r1, [r4], #1024	; 0x400
    34d0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    34d4:	00f90e02 	rscseq	r0, r9, r2, lsl #28
    34d8:	01010000 	mrseq	r0, (UNDEF: 1)
    34dc:	0308081b 	movweq	r0, #34843	; 0x881b
    34e0:	06290903 	strteq	r0, [r9], -r3, lsl #18
    34e4:	341c0000 	ldrcc	r0, [ip], #-0
    34e8:	08000022 	stmdaeq	r0, {r1, r5}
    34ec:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	00057f1c 	andeq	r7, r5, ip, lsl pc
    34f8:	03080800 	movweq	r0, #34816	; 0x8800
    34fc:	00010a08 	andeq	r0, r1, r8, lsl #20
    3500:	11000400 	tstne	r0, r0, lsl #8
    3504:	00000266 	andeq	r0, r0, r6, ror #4
    3508:	03030908 	movweq	r0, #14600	; 0x3908
    350c:	00000602 	andeq	r0, r0, r2, lsl #12
    3510:	0004b81d 	andeq	fp, r4, sp, lsl r8
    3514:	0b083000 	bleq	20f51c <__ccfg+0x1ef574>
    3518:	06990803 	ldreq	r0, [r9], r3, lsl #16
    351c:	b11c0000 	tstlt	ip, r0
    3520:	08000004 	stmdaeq	r0, {r2}
    3524:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    3528:	00000000 	andeq	r0, r0, r0
    352c:	0002d21c 	andeq	sp, r2, ip, lsl r2
    3530:	03150800 	tsteq	r5, #0, 16
    3534:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3538:	ac1c0200 	lfmge	f0, 4, [ip], {-0}
    353c:	08000004 	stmdaeq	r0, {r2}
    3540:	e40b0316 	str	r0, [fp], #-790	; 0xfffffcea
    3544:	04000002 	streq	r0, [r0], #-2
    3548:	000f7f1c 	andeq	r7, pc, ip, lsl pc	; <UNPREDICTABLE>
    354c:	03170800 	tsteq	r7, #0, 16
    3550:	00010a09 	andeq	r0, r1, r9, lsl #20
    3554:	5d1c0800 	ldcpl	8, cr0, [ip, #-0]
    3558:	08000004 	stmdaeq	r0, {r2}
    355c:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    3560:	0c000006 	stceq	0, cr0, [r0], {6}
    3564:	0002cd1c 	andeq	ip, r2, ip, lsl sp
    3568:	03190800 	tsteq	r9, #0, 16
    356c:	0006a915 	andeq	sl, r6, r5, lsl r9
    3570:	0f002c00 	svceq	0x00002c00
    3574:	00000629 	andeq	r0, r0, r9, lsr #12
    3578:	000006a9 	andeq	r0, r0, r9, lsr #13
    357c:	0000881e 	andeq	r8, r0, lr, lsl r8
    3580:	0a000300 	beq	4188 <__exidx_end+0x1314>
    3584:	00063604 	andeq	r3, r6, r4, lsl #12
    3588:	04c31100 	strbeq	r1, [r3], #256	; 0x100
    358c:	1c080000 	stcne	0, cr0, [r8], {-0}
    3590:	06361b03 	ldrteq	r1, [r6], -r3, lsl #22
    3594:	95140000 	ldrls	r0, [r4, #-0]
    3598:	08000003 	stmdaeq	r0, {r0, r1}
    359c:	cb14031e 	blgt	50421c <__ccfg+0x4e4274>
    35a0:	01000006 	tsteq	r0, r6
    35a4:	af040a01 	svcge	0x00040a01
    35a8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    35ac:	000004f1 	strdeq	r0, [r0], -r1
    35b0:	cd131d0a 	ldcgt	13, cr1, [r3, #-40]	; 0xffffffd8
    35b4:	01000000 	mrseq	r0, (UNDEF: 0)
    35b8:	075b0e01 	ldrbeq	r0, [fp, -r1, lsl #28]
    35bc:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    35c0:	0000de1a 	andeq	sp, r0, sl, lsl lr
    35c4:	0e010100 	adfeqs	f0, f1, f0
    35c8:	000008eb 	andeq	r0, r0, fp, ror #17
    35cc:	de241e0a 	cdple	14, 2, cr1, cr4, cr10, {0}
    35d0:	01000000 	mrseq	r0, (UNDEF: 0)
    35d4:	061a0e01 	ldreq	r0, [sl], -r1, lsl #28
    35d8:	220a0000 	andcs	r0, sl, #0
    35dc:	0006cb14 	andeq	ip, r6, r4, lsl fp
    35e0:	03010100 	movweq	r0, #4352	; 0x1100
    35e4:	00000d37 	andeq	r0, r0, r7, lsr sp
    35e8:	150f0e0b 	strne	r0, [pc, #-3595]	; 27e5 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x115>
    35ec:	0a000007 	beq	3610 <__exidx_end+0x79c>
    35f0:	00071b04 	andeq	r1, r7, r4, lsl #22
    35f4:	81011500 	tsthi	r1, r0, lsl #10
    35f8:	30000000 	andcc	r0, r0, r0
    35fc:	13000007 	movwne	r0, #7
    3600:	00000081 	andeq	r0, r0, r1, lsl #1
    3604:	00011613 	andeq	r1, r1, r3, lsl r6
    3608:	400f0000 	andmi	r0, pc, r0
    360c:	40000007 	andmi	r0, r0, r7
    3610:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3614:	00000088 	andeq	r0, r0, r8, lsl #1
    3618:	040a0007 	streq	r0, [sl], #-7
    361c:	000005e7 	andeq	r0, r0, r7, ror #11
    3620:	000dec1f 	andeq	lr, sp, pc, lsl ip
    3624:	150d0c00 	strne	r0, [sp, #-3072]	; 0xfffff400
    3628:	00000730 	andeq	r0, r0, r0, lsr r7
    362c:	00000305 	andeq	r0, r0, r5, lsl #6
    3630:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
    3634:	68000007 	stmdavs	r0, {r0, r1, r2}
    3638:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    363c:	00000088 	andeq	r0, r0, r8, lsl #1
    3640:	731f0002 	tstvc	pc, #2
    3644:	0c00000e 	stceq	0, cr0, [r0], {14}
    3648:	07581413 	smmlaeq	r8, r3, r4, r1
    364c:	03050000 	movweq	r0, #20480	; 0x5000
    3650:	00000000 	andeq	r0, r0, r0
    3654:	00078a0f 	andeq	r8, r7, pc, lsl #20
    3658:	00078a00 	andeq	r8, r7, r0, lsl #20
    365c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3660:	00020000 	andeq	r0, r2, r0
    3664:	04c0040a 	strbeq	r0, [r0], #1034	; 0x40a
    3668:	991f0000 	ldmdbls	pc, {}	; <UNPREDICTABLE>
    366c:	0c00000d 	stceq	0, cr0, [r0], {13}
    3670:	077a1319 			; <UNDEFINED> instruction: 0x077a1319
    3674:	03050000 	movweq	r0, #20480	; 0x5000
    3678:	00000000 	andeq	r0, r0, r0
    367c:	0000810f 	andeq	r8, r0, pc, lsl #2
    3680:	0007b200 	andeq	fp, r7, r0, lsl #4
    3684:	00881e00 	addeq	r1, r8, r0, lsl #28
    3688:	00020000 	andeq	r0, r2, r0
    368c:	000d711f 	andeq	r7, sp, pc, lsl r1
    3690:	0f1e0c00 	svceq	0x001e0c00
    3694:	000007a2 	andeq	r0, r0, r2, lsr #15
    3698:	00000305 	andeq	r0, r0, r5, lsl #6
    369c:	d40f0000 	strle	r0, [pc], #-0	; 36a4 <__exidx_end+0x830>
    36a0:	d4000007 	strle	r0, [r0], #-7
    36a4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    36a8:	00000088 	andeq	r0, r0, r8, lsl #1
    36ac:	040a0002 	streq	r0, [sl], #-2
    36b0:	00000481 	andeq	r0, r0, r1, lsl #9
    36b4:	000f491f 	andeq	r4, pc, pc, lsl r9	; <UNPREDICTABLE>
    36b8:	1b230c00 	blne	8c66c0 <__ccfg+0x8a6718>
    36bc:	000007c4 	andeq	r0, r0, r4, asr #15
    36c0:	00000305 	andeq	r0, r0, r5, lsl #6
    36c4:	01200000 			; <UNDEFINED> instruction: 0x01200000
    36c8:	00000e91 	muleq	r0, r1, lr
    36cc:	01050d01 	tsteq	r5, r1, lsl #26
    36d0:	0015e001 	andseq	lr, r5, r1
    36d4:	0015e200 	andseq	lr, r5, r0, lsl #4
    36d8:	219c0100 	orrscs	r0, ip, r0, lsl #2
    36dc:	000d8001 	andeq	r8, sp, r1
    36e0:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    36e4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    36f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36f4:	00000863 	andeq	r0, r0, r3, ror #16
    36f8:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    36fc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3700:	0000812d 	andeq	r8, r0, sp, lsr #2
    3704:	00106500 	andseq	r6, r0, r0, lsl #10
    3708:	114e2300 	mrsne	r2, SPSR_hyp
    370c:	00000000 	andeq	r0, r0, r0
    3710:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
    3714:	0a010000 	beq	4371c <__ccfg+0x23774>
    3718:	60240905 	eorvs	r0, r4, r5, lsl #18
    371c:	83000011 	movwhi	r0, #17
    3720:	25000010 	strcs	r0, [r0, #-16]
    3724:	00000840 	andeq	r0, r0, r0, asr #16
    3728:	00116b26 	andseq	r6, r1, r6, lsr #22
    372c:	00109600 	andseq	r9, r0, r0, lsl #12
    3730:	11762600 	cmnne	r6, r0, lsl #12
    3734:	10b40000 	adcsne	r0, r4, r0
    3738:	00000000 	andeq	r0, r0, r0
    373c:	c6012700 	strgt	r2, [r1], -r0, lsl #14
    3740:	0100000e 	tsteq	r0, lr
    3744:	010104fa 	strdeq	r0, [r1, -sl]
	...
    3750:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    3754:	70220000 	eorvc	r0, r2, r0
    3758:	0100746b 	tsteq	r0, fp, ror #8
    375c:	163004fa 			; <UNDEFINED> instruction: 0x163004fa
    3760:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    3764:	28000010 	stmdacs	r0, {r4}
    3768:	fe010062 	cdp2	0, 0, cr0, cr1, cr2, {3}
    376c:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3770:	10fc0000 	rscsne	r0, ip, r0
    3774:	0a000000 	beq	377c <__exidx_end+0x908>
    3778:	0005b704 	andeq	fp, r5, r4, lsl #14
    377c:	c8012100 	stmdagt	r1, {r8, sp}
    3780:	0100000c 	tsteq	r0, ip
    3784:	010104e9 	smlatteq	r1, r9, r4, r0
    3788:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3794:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    3798:	70220000 	eorvc	r0, r2, r0
    379c:	01007968 	tsteq	r0, r8, ror #18
    37a0:	812f04e9 	smulwthi	pc, r9, r4	; <UNPREDICTABLE>
    37a4:	1a000000 	bne	37ac <__exidx_end+0x938>
    37a8:	28000011 	stmdacs	r0, {r0, r4}
    37ac:	0100716f 	tsteq	r0, pc, ror #2
    37b0:	8a0b04ed 	bhi	2c4b6c <__ccfg+0x2a4bc4>
    37b4:	38000007 	stmdacc	r0, {r0, r1, r2}
    37b8:	28000011 	stmdacs	r0, {r0, r4}
    37bc:	ee010062 	cdp	0, 0, cr0, cr1, cr2, {3}
    37c0:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    37c4:	114b0000 	mrsne	r0, (UNDEF: 75)
    37c8:	21000000 	mrscs	r0, (UNDEF: 0)
    37cc:	000d4b01 	andeq	r4, sp, r1, lsl #22
    37d0:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    37d4:	01160101 	tsteq	r6, r1, lsl #2
	...
    37e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    37e4:	00000950 	andeq	r0, r0, r0, asr r9
    37e8:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    37ec:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    37f0:	0000812f 	andeq	r8, r0, pc, lsr #2
    37f4:	00116a00 	andseq	r6, r1, r0, lsl #20
    37f8:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    37fc:	d201006e 	andle	r0, r1, #110	; 0x6e
    3800:	04323904 	ldrteq	r3, [r2], #-2308	; 0xfffff6fc
    3804:	11880000 	orrne	r0, r8, r0
    3808:	6f280000 	svcvs	0x00280000
    380c:	d7010071 	smlsdxle	r1, r1, r0, r0
    3810:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    3814:	11a60000 			; <UNDEFINED> instruction: 0x11a60000
    3818:	62280000 	eorvs	r0, r8, #0
    381c:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    3820:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3824:	0011c400 	andseq	ip, r1, r0, lsl #8
    3828:	01210000 			; <UNDEFINED> instruction: 0x01210000
    382c:	00000f37 	andeq	r0, r0, r7, lsr pc
    3830:	0104a101 	tsteq	r4, r1, lsl #2
    3834:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3840:	eb9c0100 	bl	fe703c48 <_estack+0xde6fec48>
    3844:	22000009 	andcs	r0, r0, #9
    3848:	00796870 	rsbseq	r6, r9, r0, ror r8
    384c:	2b04a101 	blcs	12bc58 <__ccfg+0x10bcb0>
    3850:	00000081 	andeq	r0, r0, r1, lsl #1
    3854:	000011ee 	andeq	r1, r0, lr, ror #3
    3858:	01007022 	tsteq	r0, r2, lsr #32
    385c:	163804a1 	ldrtne	r0, [r8], -r1, lsr #9
    3860:	22000001 	andcs	r0, r0, #1
    3864:	22000012 	andcs	r0, r0, #18
    3868:	006e656c 	rsbeq	r6, lr, ip, ror #10
    386c:	3f04a101 	svccc	0x0004a101
    3870:	00000081 	andeq	r0, r0, r1, lsl #1
    3874:	00001256 	andeq	r1, r0, r6, asr r2
    3878:	676c7029 	strbvs	r7, [ip, -r9, lsr #32]!
    387c:	04a60100 	strteq	r0, [r6], #256	; 0x100
    3880:	00008106 	andeq	r8, r0, r6, lsl #2
    3884:	73642800 	cmnvc	r4, #0, 16
    3888:	a6010070 			; <UNDEFINED> instruction: 0xa6010070
    388c:	00810b04 	addeq	r0, r1, r4, lsl #22
    3890:	128a0000 	addne	r0, sl, #0
    3894:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
    3898:	01007365 	tsteq	r0, r5, ror #6
    389c:	811004a6 	tsthi	r0, r6, lsr #9
    38a0:	02000000 	andeq	r0, r0, #0
    38a4:	612a5091 			; <UNDEFINED> instruction: 0x612a5091
    38a8:	a7010070 	smlsdxge	r1, r0, r0, r0
    38ac:	03550b04 	cmpeq	r5, #4, 22	; 0x1000
    38b0:	91020000 	mrsls	r0, (UNDEF: 2)
    38b4:	00632854 	rsbeq	r2, r3, r4, asr r8
    38b8:	0a04a801 	beq	12d8c4 <__ccfg+0x10d91c>
    38bc:	00000116 	andeq	r0, r0, r6, lsl r1
    38c0:	000012a8 	andeq	r1, r0, r8, lsr #5
    38c4:	27012100 	strcs	r2, [r1, -r0, lsl #2]
    38c8:	0100000d 	tsteq	r0, sp
    38cc:	01010487 	smlabbeq	r1, r7, r4, r0
    38d0:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    38dc:	0a4a9c01 	beq	12aa8e8 <__ccfg+0x128a940>
    38e0:	70220000 	eorvc	r0, r2, r0
    38e4:	01007968 	tsteq	r0, r8, ror #18
    38e8:	812b0487 	smlawbhi	fp, r7, r4, r0
    38ec:	bb000000 	bllt	38f4 <__exidx_end+0xa80>
    38f0:	22000012 	andcs	r0, r0, #18
    38f4:	01007370 	tsteq	r0, r0, ror r3
    38f8:	093a0487 	ldmdbeq	sl!, {r0, r1, r2, r7, sl}
    38fc:	d9000007 	stmdble	r0, {r0, r1, r2}
    3900:	2b000012 	blcs	3950 <__exidx_end+0xadc>
    3904:	00000d5a 	andeq	r0, r0, sl, asr sp
    3908:	42048701 	andmi	r8, r4, #262144	; 0x40000
    390c:	00000081 	andeq	r0, r0, r1, lsl #1
    3910:	000012f7 	strdeq	r1, [r0], -r7
    3914:	01007128 	tsteq	r0, r8, lsr #2
    3918:	8a0b048d 	bhi	2c4b54 <__ccfg+0x2a4bac>
    391c:	15000007 	strne	r0, [r0, #-7]
    3920:	00000013 	andeq	r0, r0, r3, lsl r0
    3924:	0e13012c 	mufeqsp	f0, f3, #4.0
    3928:	86010000 	strhi	r0, [r1], -r0
    392c:	16010103 	strne	r0, [r1], -r3, lsl #2
    3930:	01000001 	tsteq	r0, r1
    3934:	00000a91 	muleq	r0, r1, sl
    3938:	0013d72d 	andseq	sp, r3, sp, lsr #14
    393c:	03860100 	orreq	r0, r6, #0, 2
    3940:	0000812d 	andeq	r8, r0, sp, lsr #2
    3944:	73642e00 	cmnvc	r4, #0, 28
    3948:	86010070 			; <UNDEFINED> instruction: 0x86010070
    394c:	00813703 	addeq	r3, r1, r3, lsl #14
    3950:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    3954:	01007365 	tsteq	r0, r5, ror #6
    3958:	81400386 	smlalbbhi	r0, r0, r6, r3	; <UNPREDICTABLE>
    395c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3960:	8a010070 	bhi	43b28 <__ccfg+0x23b80>
    3964:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3968:	27000000 	strcs	r0, [r0, -r0]
    396c:	000d1a01 	andeq	r1, sp, r1, lsl #20
    3970:	037f0100 	cmneq	pc, #0, 2
    3974:	00000101 	andeq	r0, r0, r1, lsl #2
    3978:	00000000 	andeq	r0, r0, r0
    397c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3980:	00000acb 	andeq	r0, r0, fp, asr #21
    3984:	01007022 	tsteq	r0, r2, lsr #32
    3988:	1632037f 			; <UNDEFINED> instruction: 0x1632037f
    398c:	44000001 	strmi	r0, [r0], #-1
    3990:	22000013 	andcs	r0, r0, #19
    3994:	00707364 	rsbseq	r7, r0, r4, ror #6
    3998:	39037f01 	stmdbcc	r3, {r0, r8, r9, sl, fp, ip, sp, lr}
    399c:	00000081 	andeq	r0, r0, r1, lsl #1
    39a0:	00001357 	andeq	r1, r0, r7, asr r3
    39a4:	aa012100 	bge	4bdac <__ccfg+0x2be04>
    39a8:	0100000e 	tsteq	r0, lr
    39ac:	0101036b 	tsteq	r1, fp, ror #6
    39b0:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    39bc:	0b259c01 	bleq	96a9c8 <__ccfg+0x94aa20>
    39c0:	70220000 	eorvc	r0, r2, r0
    39c4:	036b0100 	cmneq	fp, #0, 2
    39c8:	00011633 	andeq	r1, r1, r3, lsr r6
    39cc:	00136a00 	andseq	r6, r3, r0, lsl #20
    39d0:	0f2a2b00 	svceq	0x002a2b00
    39d4:	6b010000 	blvs	439dc <__ccfg+0x23a34>
    39d8:	00813a03 	addeq	r3, r1, r3, lsl #20
    39dc:	13880000 	orrne	r0, r8, #0
    39e0:	70280000 	eorvc	r0, r8, r0
    39e4:	6f010063 	svcvs	0x00010063
    39e8:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    39ec:	13a60000 			; <UNDEFINED> instruction: 0x13a60000
    39f0:	70290000 	eorvc	r0, r9, r0
    39f4:	6f010070 	svcvs	0x00010070
    39f8:	089d1103 	ldmeq	sp, {r0, r1, r8, ip}
    39fc:	27000000 	strcs	r0, [r0, -r0]
    3a00:	000d8d01 	andeq	r8, sp, r1, lsl #26
    3a04:	03630100 	cmneq	r3, #0, 2
    3a08:	00000101 	andeq	r0, r0, r1, lsl #2
    3a0c:	00000000 	andeq	r0, r0, r0
    3a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a14:	00000b5f 	andeq	r0, r0, pc, asr fp
    3a18:	01007022 	tsteq	r0, r2, lsr #32
    3a1c:	16310363 	ldrtne	r0, [r1], -r3, ror #6
    3a20:	c4000001 	strgt	r0, [r0], #-1
    3a24:	22000013 	andcs	r0, r0, #19
    3a28:	00796870 	rsbseq	r6, r9, r0, ror r8
    3a2c:	38036301 	stmdacc	r3, {r0, r8, r9, sp, lr}
    3a30:	00000081 	andeq	r0, r0, r1, lsl #1
    3a34:	000013e2 	andeq	r1, r0, r2, ror #7
    3a38:	b5012700 	strlt	r2, [r1, #-1792]	; 0xfffff900
    3a3c:	0100000e 	tsteq	r0, lr
    3a40:	0101035a 	tsteq	r1, sl, asr r3
	...
    3a4c:	0b999c01 	bleq	fe66aa58 <_estack+0xde665a58>
    3a50:	70220000 	eorvc	r0, r2, r0
    3a54:	035a0100 	cmpeq	sl, #0, 2
    3a58:	00011631 	andeq	r1, r1, r1, lsr r6
    3a5c:	00140000 	andseq	r0, r4, r0
    3a60:	65732200 	ldrbvs	r2, [r3, #-512]!	; 0xfffffe00
    3a64:	5a010073 	bpl	43c38 <__ccfg+0x23c90>
    3a68:	00813803 	addeq	r3, r1, r3, lsl #16
    3a6c:	141e0000 	ldrne	r0, [lr], #-0
    3a70:	2c000000 	stccs	0, cr0, [r0], {-0}
    3a74:	000f6901 	andeq	r6, pc, r1, lsl #18
    3a78:	03520100 	cmpeq	r2, #0, 2
    3a7c:	00810101 	addeq	r0, r1, r1, lsl #2
    3a80:	d5010000 	strle	r0, [r1, #-0]
    3a84:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    3a88:	00796870 	rsbseq	r6, r9, r0, ror r8
    3a8c:	2d035201 	sfmcs	f5, 4, [r3, #-4]
    3a90:	00000081 	andeq	r0, r0, r1, lsl #1
    3a94:	74706f2e 	ldrbtvc	r6, [r0], #-3886	; 0xfffff0d2
    3a98:	03520100 	cmpeq	r2, #0, 2
    3a9c:	00008136 	andeq	r8, r0, r6, lsr r1
    3aa0:	72612e00 	rsbvc	r2, r1, #0, 28
    3aa4:	52010067 	andpl	r0, r1, #103	; 0x67
    3aa8:	01164303 	tsteq	r6, r3, lsl #6
    3aac:	21000000 	mrscs	r0, (UNDEF: 0)
    3ab0:	000cd301 	andeq	sp, ip, r1, lsl #6
    3ab4:	03330100 	teqeq	r3, #0, 2
    3ab8:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ac8:	00000c3e 	andeq	r0, r0, lr, lsr ip
    3acc:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3ad0:	2c033301 	stccs	3, cr3, [r3], {1}
    3ad4:	00000081 	andeq	r0, r0, r1, lsl #1
    3ad8:	0000143c 	andeq	r1, r0, ip, lsr r4
    3adc:	74706f22 	ldrbtvc	r6, [r0], #-3874	; 0xfffff0de
    3ae0:	03330100 	teqeq	r3, #0, 2
    3ae4:	00008134 	andeq	r8, r0, r4, lsr r1
    3ae8:	00147b00 	andseq	r7, r4, r0, lsl #22
    3aec:	72612200 	rsbvc	r2, r1, #0, 4
    3af0:	33010067 	movwcc	r0, #4199	; 0x1067
    3af4:	01164103 	tsteq	r6, r3, lsl #2
    3af8:	14a40000 	strtne	r0, [r4], #0
    3afc:	002f0000 	eoreq	r0, pc, r0
    3b00:	00000000 	andeq	r0, r0, r0
    3b04:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3b08:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    3b0c:	07d41503 	ldrbeq	r1, [r4, r3, lsl #10]
    3b10:	14cd0000 	strbne	r0, [sp], #0
    3b14:	00000000 	andeq	r0, r0, r0
    3b18:	0d680127 	stfeqe	f0, [r8, #-156]!	; 0xffffff64
    3b1c:	2b010000 	blcs	43b24 <__ccfg+0x23b7c>
    3b20:	00010103 	andeq	r0, r1, r3, lsl #2
    3b24:	00000000 	andeq	r0, r0, r0
    3b28:	01000000 	mrseq	r0, (UNDEF: 0)
    3b2c:	000c679c 	muleq	ip, ip, r7
    3b30:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3b34:	2e032b01 	vmlacs.f64	d2, d3, d1
    3b38:	00000116 	andeq	r0, r0, r6, lsl r1
    3b3c:	000014e0 	andeq	r1, r0, r0, ror #9
    3b40:	42012100 	andmi	r2, r1, #0, 2
    3b44:	0100000e 	tsteq	r0, lr
    3b48:	0101031a 	tsteq	r1, sl, lsl r3
    3b4c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3b58:	0cc19c01 	stcleq	12, cr9, [r1], {1}
    3b5c:	70220000 	eorvc	r0, r2, r0
    3b60:	031a0100 	tsteq	sl, #0, 2
    3b64:	0001162e 	andeq	r1, r1, lr, lsr #12
    3b68:	0014fe00 	andseq	pc, r4, r0, lsl #28
    3b6c:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    3b70:	1a010066 	bne	43d10 <__ccfg+0x23d68>
    3b74:	02593d03 	subseq	r3, r9, #3, 26	; 0xc0
    3b78:	151c0000 	ldrne	r0, [ip, #-0]
    3b7c:	6c220000 	stcvs	0, cr0, [r2], #-0
    3b80:	01006e65 	tsteq	r0, r5, ror #28
    3b84:	8146031a 	cmphi	r6, sl, lsl r3
    3b88:	2f000000 	svccs	0x00000000
    3b8c:	29000015 	stmdbcs	r0, {r0, r2, r4}
    3b90:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    3b94:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3b98:	21000000 	mrscs	r0, (UNDEF: 0)
    3b9c:	000e8801 	andeq	r8, lr, r1, lsl #16
    3ba0:	03080100 	movweq	r0, #33024	; 0x8100
    3ba4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3bb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bb4:	00000d1b 	andeq	r0, r0, fp, lsl sp
    3bb8:	01007022 	tsteq	r0, r2, lsr #32
    3bbc:	162d0308 	strtne	r0, [sp], -r8, lsl #6
    3bc0:	4d000001 	stcmi	0, cr0, [r0, #-4]
    3bc4:	22000015 	andcs	r0, r0, #21
    3bc8:	00667562 	rsbeq	r7, r6, r2, ror #10
    3bcc:	36030801 	strcc	r0, [r3], -r1, lsl #16
    3bd0:	00000d1b 	andeq	r0, r0, fp, lsl sp
    3bd4:	0000156b 	andeq	r1, r0, fp, ror #10
    3bd8:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3bdc:	03080100 	movweq	r0, #33024	; 0x8100
    3be0:	0000813f 	andeq	r8, r0, pc, lsr r1
    3be4:	00158900 	andseq	r8, r5, r0, lsl #18
    3be8:	00622900 	rsbeq	r2, r2, r0, lsl #18
    3bec:	0c030c01 	stceq	12, cr0, [r3], {1}
    3bf0:	0000089d 	muleq	r0, sp, r8
    3bf4:	e3040a00 	movw	r0, #18944	; 0x4a00
    3bf8:	21000000 	mrscs	r0, (UNDEF: 0)
    3bfc:	000e3901 	andeq	r3, lr, r1, lsl #18
    3c00:	02cd0100 	sbceq	r0, sp, #0, 2
    3c04:	01160101 	tsteq	r6, r1, lsl #2
	...
    3c10:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c14:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    3c18:	000bc12b 	andeq	ip, fp, fp, lsr #2
    3c1c:	02cd0100 	sbceq	r0, sp, #0, 2
    3c20:	0000cd2e 	andeq	ip, r0, lr, lsr #26
    3c24:	0015a700 	andseq	sl, r5, r0, lsl #14
    3c28:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3c2c:	02cd0100 	sbceq	r0, sp, #0, 2
    3c30:	00008139 	andeq	r8, r0, r9, lsr r1
    3c34:	0015c500 	andseq	ip, r5, r0, lsl #10
    3c38:	0f232b00 	svceq	0x00232b00
    3c3c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3c40:	00814102 	addeq	r4, r1, r2, lsl #2
    3c44:	15ee0000 	strbne	r0, [lr, #0]!
    3c48:	75220000 	strvc	r0, [r2, #-0]!
    3c4c:	01006772 	tsteq	r0, r2, ror r7
    3c50:	c11102ce 	tstgt	r1, lr, asr #5
    3c54:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3c58:	28000016 	stmdacs	r0, {r1, r2, r4}
    3c5c:	cf010062 	svcgt	0x00010062
    3c60:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3c64:	164b0000 	strbne	r0, [fp], -r0
    3c68:	2b300000 	blcs	c03c70 <__ccfg+0xbe3cc8>
    3c6c:	0100000e 	tsteq	r0, lr
    3c70:	550b02d0 	strpl	r0, [fp, #-720]	; 0xfffffd30
    3c74:	02000003 	andeq	r0, r0, #3
    3c78:	732a6491 			; <UNDEFINED> instruction: 0x732a6491
    3c7c:	02d10100 	sbcseq	r0, r1, #0, 2
    3c80:	0007400d 	andeq	r4, r7, sp
    3c84:	28570100 	ldmdacs	r7, {r8}^
    3c88:	00646965 	rsbeq	r6, r4, r5, ror #18
    3c8c:	0602d201 	streq	sp, [r2], -r1, lsl #4
    3c90:	00000081 	andeq	r0, r0, r1, lsl #1
    3c94:	00001669 	andeq	r1, r0, r9, ror #12
    3c98:	f8012100 			; <UNDEFINED> instruction: 0xf8012100
    3c9c:	0100000d 	tsteq	r0, sp
    3ca0:	010102a4 	smlatbeq	r1, r4, r2, r0
    3ca4:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3cb0:	0e729c01 	cdpeq	12, 7, cr9, cr2, cr1, {0}
    3cb4:	66220000 	strtvs	r0, [r2], -r0
    3cb8:	a4010064 	strge	r0, [r1], #-100	; 0xffffff9c
    3cbc:	00812a02 	addeq	r2, r1, r2, lsl #20
    3cc0:	16920000 	ldrne	r0, [r2], r0
    3cc4:	2a2b0000 	bcs	ac3ccc <__ccfg+0xaa3d24>
    3cc8:	0100000f 	tsteq	r0, pc
    3ccc:	813202a4 	teqhi	r2, r4, lsr #5
    3cd0:	c6000000 	strgt	r0, [r0], -r0
    3cd4:	28000016 	stmdacs	r0, {r1, r2, r4}
    3cd8:	a8010073 	stmdage	r1, {r0, r1, r4, r5, r6}
    3cdc:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3ce0:	16fa0000 	ldrbtne	r0, [sl], r0
    3ce4:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    3ce8:	a9010071 	stmdbge	r1, {r0, r4, r5, r6}
    3cec:	00810602 	addeq	r0, r1, r2, lsl #12
    3cf0:	175f0000 	ldrbne	r0, [pc, -r0]
    3cf4:	72280000 	eorvc	r0, r8, #0
    3cf8:	aa010071 	bge	43ec4 <__ccfg+0x23f1c>
    3cfc:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3d00:	177d0000 	ldrbne	r0, [sp, -r0]!
    3d04:	62280000 	eorvs	r0, r8, #0
    3d08:	02ab0100 	adceq	r0, fp, #0, 2
    3d0c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3d10:	00179b00 	andseq	r9, r7, r0, lsl #22
    3d14:	0dde3100 	ldfeqe	f3, [lr]
    3d18:	c0010000 	andgt	r0, r1, r0
    3d1c:	00000102 	andeq	r0, r0, r2, lsl #2
    3d20:	4e320000 	cdpmi	0, 3, cr0, cr2, cr0, {0}
    3d24:	00000011 	andeq	r0, r0, r1, lsl r0
    3d28:	00000000 	andeq	r0, r0, r0
    3d2c:	01000000 	mrseq	r0, (UNDEF: 0)
    3d30:	330a02bb 	movwcc	r0, #41659	; 0xa2bb
    3d34:	00001160 	andeq	r1, r0, r0, ror #2
    3d38:	00116b26 	andseq	r6, r1, r6, lsr #22
    3d3c:	0017c400 	andseq	ip, r7, r0, lsl #8
    3d40:	11762600 	cmnne	r6, r0, lsl #12
    3d44:	17d70000 	ldrbne	r0, [r7, r0]
    3d48:	00000000 	andeq	r0, r0, r0
    3d4c:	0cab0121 	stfeqs	f0, [fp], #132	; 0x84
    3d50:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3d54:	81010102 	tsthi	r1, r2, lsl #2
	...
    3d60:	01000000 	mrseq	r0, (UNDEF: 0)
    3d64:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    3d68:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3d6c:	027d0100 	rsbseq	r0, sp, #0, 2
    3d70:	0000812a 	andeq	r8, r0, sl, lsr #2
    3d74:	0017ea00 	andseq	lr, r7, r0, lsl #20
    3d78:	0f2a2b00 	svceq	0x002a2b00
    3d7c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3d80:	00813202 	addeq	r3, r1, r2, lsl #4
    3d84:	181e0000 	ldmdane	lr, {}	; <UNPREDICTABLE>
    3d88:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3d8c:	02810100 	addeq	r0, r1, #0, 2
    3d90:	0007400d 	andeq	r4, r7, sp
    3d94:	00184700 	andseq	r4, r8, r0, lsl #14
    3d98:	716e2800 	cmnvc	lr, r0, lsl #16
    3d9c:	02820100 	addeq	r0, r2, #0, 2
    3da0:	00008106 	andeq	r8, r0, r6, lsl #2
    3da4:	0018ac00 	andseq	sl, r8, r0, lsl #24
    3da8:	71722800 	cmnvc	r2, r0, lsl #16
    3dac:	02830100 	addeq	r0, r3, #0, 2
    3db0:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3db4:	0018ca00 	andseq	ip, r8, r0, lsl #20
    3db8:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3dbc:	0c028401 	cfstrseq	mvf8, [r2], {1}
    3dc0:	0000089d 	muleq	r0, sp, r8
    3dc4:	000018f3 	strdeq	r1, [r0], -r3
    3dc8:	2f012100 	svccs	0x00012100
    3dcc:	0100000f 	tsteq	r0, pc
    3dd0:	01010256 	tsteq	r1, r6, asr r2
    3dd4:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3de0:	0f5c9c01 	svceq	0x005c9c01
    3de4:	c12b0000 			; <UNDEFINED> instruction: 0xc12b0000
    3de8:	0100000b 	tsteq	r0, fp
    3dec:	cd2d0256 	sfmgt	f0, 4, [sp, #-344]!	; 0xfffffea8
    3df0:	27000000 	strcs	r0, [r0, -r0]
    3df4:	22000019 	andcs	r0, r0, #25
    3df8:	01006466 	tsteq	r0, r6, ror #8
    3dfc:	81380256 	teqhi	r8, r6, asr r2
    3e00:	3a000000 	bcc	3e08 <__exidx_end+0xf94>
    3e04:	28000019 	stmdacs	r0, {r0, r3, r4}
    3e08:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
    3e0c:	01160a02 	tsteq	r6, r2, lsl #20
    3e10:	19790000 	ldmdbne	r9!, {}^	; <UNPREDICTABLE>
    3e14:	62280000 	eorvs	r0, r8, #0
    3e18:	025e0100 	subseq	r0, lr, #0, 2
    3e1c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3e20:	00198c00 	andseq	r8, r9, r0, lsl #24
    3e24:	71722800 	cmnvc	r2, r0, lsl #16
    3e28:	025f0100 	subseq	r0, pc, #0, 2
    3e2c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3e30:	0019b500 	andseq	fp, r9, r0, lsl #10
    3e34:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3e38:	00000ef5 	strdeq	r0, [r0], -r5
    3e3c:	01024a01 	tsteq	r2, r1, lsl #20
    3e40:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3e4c:	999c0100 	ldmibls	ip, {r8}
    3e50:	2200000f 	andcs	r0, r0, #15
    3e54:	0064726f 	rsbeq	r7, r4, pc, ror #4
    3e58:	29024a01 	stmdbcs	r2, {r0, r9, fp, lr}
    3e5c:	00000081 	andeq	r0, r0, r1, lsl #1
    3e60:	000019ef 	andeq	r1, r0, pc, ror #19
    3e64:	006c7034 	rsbeq	r7, ip, r4, lsr r0
    3e68:	3f024a01 	svccc	0x00024a01
    3e6c:	000007d4 	ldrdeq	r0, [r0], -r4
    3e70:	21005101 	tstcs	r0, r1, lsl #2
    3e74:	000e5401 	andeq	r5, lr, r1, lsl #8
    3e78:	02290100 	eoreq	r0, r9, #0, 2
    3e7c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3e88:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e8c:	00000ff6 	strdeq	r0, [r0], -r6
    3e90:	000bc12b 	andeq	ip, fp, fp, lsr #2
    3e94:	02290100 	eoreq	r0, r9, #0, 2
    3e98:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    3e9c:	001a0d00 	andseq	r0, sl, r0, lsl #26
    3ea0:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3ea4:	02290100 	eoreq	r0, r9, #0, 2
    3ea8:	00008136 	andeq	r8, r0, r6, lsr r1
    3eac:	001a2b00 	andseq	r2, sl, r0, lsl #22
    3eb0:	00732800 	rsbseq	r2, r3, r0, lsl #16
    3eb4:	0d022b01 	vstreq	d2, [r2, #-4]
    3eb8:	00000740 	andeq	r0, r0, r0, asr #14
    3ebc:	00001a75 	andeq	r1, r0, r5, ror sl
    3ec0:	01006228 	tsteq	r0, r8, lsr #4
    3ec4:	9d0c022c 	sfmls	f0, 4, [ip, #-176]	; 0xffffff50
    3ec8:	88000008 	stmdahi	r0, {r3}
    3ecc:	0000001a 	andeq	r0, r0, sl, lsl r0
    3ed0:	0d5f0121 	ldfeqe	f0, [pc, #-132]	; 3e54 <__exidx_end+0xfe0>
    3ed4:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3ed8:	81010101 	tsthi	r1, r1, lsl #2
	...
    3ee4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ee8:	0010839c 	mulseq	r0, ip, r3
    3eec:	0bc12b00 	bleq	ff04eaf4 <_estack+0xdf049af4>
    3ef0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3ef4:	00cd2a01 	sbceq	r2, sp, r1, lsl #20
    3ef8:	1a9b0000 	bne	fe6c3f00 <_estack+0xde6bef00>
    3efc:	70220000 	eorvc	r0, r2, r0
    3f00:	01007968 	tsteq	r0, r8, ror #18
    3f04:	813501f6 	teqhi	r5, r6	; <illegal shifter operand>
    3f08:	c4000000 	strgt	r0, [r0], #-0
    3f0c:	2b00001a 	blcs	3f7c <__exidx_end+0x1108>
    3f10:	00000ec1 	andeq	r0, r0, r1, asr #29
    3f14:	3e01f601 	cfmadd32cc	mvax0, mvfx15, mvfx1, mvfx1
    3f18:	00000081 	andeq	r0, r0, r1, lsl #1
    3f1c:	00001b19 	andeq	r1, r0, r9, lsl fp
    3f20:	64662835 	strbtvs	r2, [r6], #-2101	; 0xfffff7cb
    3f24:	01f80100 	mvnseq	r0, r0, lsl #2
    3f28:	00008106 	andeq	r8, r0, r6, lsl #2
    3f2c:	001b5100 	andseq	r5, fp, r0, lsl #2
    3f30:	0dcc3600 	stcleq	6, cr3, [ip]
    3f34:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3f38:	05560a01 	ldrbeq	r0, [r6, #-2561]	; 0xfffff5ff
    3f3c:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3f40:	01fa0100 	mvnseq	r0, r0, lsl #2
    3f44:	0007400d 	andeq	r4, r7, sp
    3f48:	001b6f00 	andseq	r6, fp, r0, lsl #30
    3f4c:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    3f50:	01fc0100 	mvnseq	r0, r0, lsl #2
    3f54:	0000b50b 	andeq	fp, r0, fp, lsl #10
    3f58:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3f5c:	02012700 	andeq	r2, r1, #0, 14
    3f60:	0100000e 	tsteq	r0, lr
    3f64:	0101013b 	tsteq	r1, fp, lsr r1
	...
    3f70:	10bb9c01 	adcsne	r9, fp, r1, lsl #24
    3f74:	70220000 	eorvc	r0, r2, r0
    3f78:	013b0100 	teqeq	fp, r0, lsl #2
    3f7c:	0001162e 	andeq	r1, r1, lr, lsr #12
    3f80:	001bb900 	andseq	fp, fp, r0, lsl #18
    3f84:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3f88:	0c014101 	stfeqs	f4, [r1], {1}
    3f8c:	0000089d 	muleq	r0, sp, r8
    3f90:	00001be2 	andeq	r1, r0, r2, ror #23
    3f94:	70613700 	rsbvc	r3, r1, r0, lsl #14
    3f98:	14010062 	strne	r0, [r1], #-98	; 0xffffff9e
    3f9c:	9d010101 	stflss	f0, [r1, #-4]
    3fa0:	00000008 	andeq	r0, r0, r8
    3fa4:	00000000 	andeq	r0, r0, r0
    3fa8:	01000000 	mrseq	r0, (UNDEF: 0)
    3fac:	0011029c 	mulseq	r1, ip, r2
    3fb0:	13d72b00 	bicsne	r2, r7, #0, 22
    3fb4:	14010000 	strne	r0, [r1], #-0
    3fb8:	00cd2b01 	sbceq	r2, sp, r1, lsl #22
    3fbc:	1c160000 	ldcne	0, cr0, [r6], {-0}
    3fc0:	702a0000 	eorvc	r0, sl, r0
    3fc4:	01190100 	tsteq	r9, r0, lsl #2
    3fc8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3fcc:	29500100 	ldmdbcs	r0, {r8}^
    3fd0:	01007363 	tsteq	r0, r3, ror #6
    3fd4:	cd07011a 	stfgts	f0, [r7, #-104]	; 0xffffff98
    3fd8:	00000000 	andeq	r0, r0, r0
    3fdc:	706c7238 	rsbvc	r7, ip, r8, lsr r2
    3fe0:	01040100 	mrseq	r0, (UNDEF: 20)
    3fe4:	00000101 	andeq	r0, r0, r1, lsl #2
    3fe8:	00000000 	andeq	r0, r0, r0
    3fec:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ff0:	0000112a 	andeq	r1, r0, sl, lsr #2
    3ff4:	01007022 	tsteq	r0, r2, lsr #32
    3ff8:	9d2b0104 	stflss	f0, [fp, #-16]!
    3ffc:	29000008 	stmdbcs	r0, {r3}
    4000:	0000001c 	andeq	r0, r0, ip, lsl r0
    4004:	000d1f39 	andeq	r1, sp, r9, lsr pc
    4008:	01e00100 	mvneq	r0, r0, lsl #2
    400c:	114e0101 	cmpne	lr, r1, lsl #2
    4010:	703a0000 	eorsvc	r0, sl, r0
    4014:	2fe00100 	svccs	0x00e00100
    4018:	0000089d 	muleq	r0, sp, r8
    401c:	0076643a 	rsbseq	r6, r6, sl, lsr r4
    4020:	8136e001 	teqhi	r6, r1
    4024:	00000000 	andeq	r0, r0, r0
    4028:	000d7a3b 	andeq	r7, sp, fp, lsr sl
    402c:	01cf0100 	biceq	r0, pc, r0, lsl #2
    4030:	00008101 	andeq	r8, r0, r1, lsl #2
    4034:	11810100 	orrne	r0, r1, r0, lsl #2
    4038:	6f3a0000 	svcvs	0x003a0000
    403c:	cf010071 	svcgt	0x00010071
    4040:	00078a2b 	andeq	r8, r7, fp, lsr #20
    4044:	716e3c00 	cmnvc	lr, r0, lsl #24
    4048:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    404c:	00000081 	andeq	r0, r0, r1, lsl #1
    4050:	0100623c 	tsteq	r0, ip, lsr r2
    4054:	089d0cd4 	ldmeq	sp, {r2, r4, r6, r7, sl, fp}
    4058:	3d000000 	stccc	0, cr0, [r0, #-0]
    405c:	00716e65 	rsbseq	r6, r1, r5, ror #28
    4060:	0101a801 	tsteq	r1, r1, lsl #16
    4064:	0011a401 	andseq	sl, r1, r1, lsl #8
    4068:	00713a00 	rsbseq	r3, r1, r0, lsl #20
    406c:	8a2aa801 	bhi	aae078 <__ccfg+0xa8e0d0>
    4070:	3a000007 	bcc	4094 <__exidx_end+0x1220>
    4074:	a8010070 	stmdage	r1, {r4, r5, r6}
    4078:	00089d37 	andeq	r9, r8, r7, lsr sp
    407c:	643d0000 	ldrtvs	r0, [sp], #-0
    4080:	01007165 	tsteq	r0, r5, ror #2
    4084:	0101017f 	tsteq	r1, pc, ror r1
    4088:	000011bd 			; <UNDEFINED> instruction: 0x000011bd
    408c:	0100703a 	tsteq	r0, sl, lsr r0
    4090:	089d2b7f 	ldmeq	sp, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    4094:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4098:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    40a4:	11f29c01 	mvnsne	r9, r1, lsl #24
    40a8:	b23f0000 	eorslt	r0, pc, #0
    40ac:	01000011 	tsteq	r0, r1, lsl r0
    40b0:	11a44050 			; <UNDEFINED> instruction: 0x11a44050
	...
    40bc:	7f010000 	svcvc	0x00010000
    40c0:	11b22401 			; <UNDEFINED> instruction: 0x11b22401
    40c4:	1c3c0000 	ldcne	0, cr0, [ip], #-0
    40c8:	00000000 	andeq	r0, r0, r0
    40cc:	0011813e 	andseq	r8, r1, lr, lsr r1
	...
    40d8:	3b9c0100 	blcc	fe7044e0 <_estack+0xde6ff4e0>
    40dc:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    40e0:	0000118f 	andeq	r1, r0, pc, lsl #3
    40e4:	00001c4f 	andeq	r1, r0, pc, asr #24
    40e8:	00119924 	andseq	r9, r1, r4, lsr #18
    40ec:	001c8300 	andseq	r8, ip, r0, lsl #6
    40f0:	11814000 	orrne	r4, r1, r0
	...
    40fc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    4100:	118f2401 	orrne	r2, pc, r1, lsl #8
    4104:	1cb70000 	ldcne	0, cr0, [r7]
    4108:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    410c:	d5000011 	strle	r0, [r0, #-17]	; 0xffffffef
    4110:	0000001c 	andeq	r0, r0, ip, lsl r0
    4114:	112a3e00 			; <UNDEFINED> instruction: 0x112a3e00
	...
    4120:	9c010000 	stcls	0, cr0, [r1], {-0}
    4124:	00001280 	andeq	r1, r0, r0, lsl #5
    4128:	00113824 	andseq	r3, r1, r4, lsr #16
    412c:	001cf300 	andseq	pc, ip, r0, lsl #6
    4130:	11422400 	cmpne	r2, r0, lsl #8
    4134:	1d480000 	stclne	0, cr0, [r8, #-0]
    4138:	2a410000 	bcs	1044140 <__ccfg+0x1024198>
    413c:	00000011 	andeq	r0, r0, r1, lsl r0
    4140:	20000000 	andcs	r0, r0, r0
    4144:	01000008 	tsteq	r0, r8
    4148:	423301e0 	eorsmi	r0, r3, #224, 2	; 0x38
    414c:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    4150:	00001138 	andeq	r1, r0, r8, lsr r1
    4154:	00001d5b 	andeq	r1, r0, fp, asr sp
    4158:	993e0000 	ldmdbls	lr!, {}	; <UNPREDICTABLE>
    415c:	0000000b 	andeq	r0, r0, fp
    4160:	00000000 	andeq	r0, r0, r0
    4164:	01000000 	mrseq	r0, (UNDEF: 0)
    4168:	0012d89c 	mulseq	r2, ip, r8
    416c:	0bad2400 	bleq	feb4d174 <_estack+0xdeb48174>
    4170:	1d790000 	ldclne	0, cr0, [r9, #-0]
    4174:	ba240000 	blt	90417c <__ccfg+0x8e41d4>
    4178:	9700000b 	strls	r0, [r0, -fp]
    417c:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4180:	00000bc7 	andeq	r0, r0, r7, asr #23
    4184:	00001dc0 	andeq	r1, r0, r0, asr #27
    4188:	000b9932 	andeq	r9, fp, r2, lsr r9
	...
    4194:	03520100 	cmpeq	r2, #0, 2
    4198:	0bad3301 	bleq	feb50da4 <_estack+0xdeb4bda4>
    419c:	ba240000 	blt	9041a4 <__ccfg+0x8e41fc>
    41a0:	e900000b 	stmdb	r0, {r0, r1, r3}
    41a4:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    41a8:	00000bc7 	andeq	r0, r0, r7, asr #23
    41ac:	00001dfc 	strdeq	r1, [r0], -ip
    41b0:	4a420000 	bmi	10841b8 <__ccfg+0x1064210>
    41b4:	0000000a 	andeq	r0, r0, sl
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	01000000 	mrseq	r0, (UNDEF: 0)
    41c0:	0a5e249c 	beq	178d438 <__ccfg+0x176d490>
    41c4:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    41c8:	6b240000 	blvs	9041d0 <__ccfg+0x8e4228>
    41cc:	2200000a 	andcs	r0, r0, #10
    41d0:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    41d4:	00000a78 	andeq	r0, r0, r8, ror sl
    41d8:	00001e82 	andeq	r1, r0, r2, lsl #29
    41dc:	000a8526 	andeq	r8, sl, r6, lsr #10
    41e0:	001ecc00 	andseq	ip, lr, r0, lsl #24
    41e4:	0a4a3200 	beq	12909ec <__ccfg+0x1270a44>
	...
    41f0:	86010000 	strhi	r0, [r1], -r0
    41f4:	5e330103 	rsfpls	f0, f3, f3
    41f8:	2400000a 	strcs	r0, [r0], #-10
    41fc:	00000a6b 	andeq	r0, r0, fp, ror #20
    4200:	00001f00 	andeq	r1, r0, r0, lsl #30
    4204:	000a7833 	andeq	r7, sl, r3, lsr r8
    4208:	0a854300 	beq	fe154e10 <_estack+0xde14fe10>
    420c:	00000000 	andeq	r0, r0, r0
    4210:	00017400 	andeq	r7, r1, r0, lsl #8
    4214:	23000300 	movwcs	r0, #768	; 0x300
    4218:	04000010 	streq	r0, [r0], #-16
    421c:	00017201 	andeq	r7, r1, r1, lsl #4
    4220:	0fb70c00 	svceq	0x00b70c00
    4224:	00d30000 	sbcseq	r0, r3, r0
    4228:	09500000 	ldmdbeq	r0, {}^	; <UNPREDICTABLE>
    422c:	00000000 	andeq	r0, r0, r0
    4230:	362f0000 	strtcc	r0, [pc], -r0
    4234:	01020000 	mrseq	r0, (UNDEF: 2)
    4238:	0003b706 	andeq	fp, r3, r6, lsl #14
    423c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4240:	000003f1 	strdeq	r0, [r0], -r1
    4244:	b0050402 	andlt	r0, r5, r2, lsl #8
    4248:	02000000 	andeq	r0, r0, #0
    424c:	00ab0508 	adceq	r0, fp, r8, lsl #10
    4250:	01020000 	mrseq	r0, (UNDEF: 2)
    4254:	0003b508 	andeq	fp, r3, r8, lsl #10
    4258:	07020200 	streq	r0, [r2, -r0, lsl #4]
    425c:	00000273 	andeq	r0, r0, r3, ror r2
    4260:	0017f303 	andseq	pc, r7, r3, lsl #6
    4264:	19340200 	ldmdbne	r4!, {r9}
    4268:	0000005b 	andeq	r0, r0, fp, asr r0
    426c:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    4270:	02000000 	andeq	r0, r0, #0
    4274:	00800708 	addeq	r0, r0, r8, lsl #14
    4278:	04040000 	streq	r0, [r4], #-0
    427c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4280:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4284:	0000008a 	andeq	r0, r0, sl, lsl #1
    4288:	00820405 	addeq	r0, r2, r5, lsl #8
    428c:	77060000 	strvc	r0, [r6, -r0]
    4290:	07000000 	streq	r0, [r0, -r0]
    4294:	4f040501 	svcmi	0x00040501
    4298:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    429c:	00000faa 	andeq	r0, r0, sl, lsr #31
    42a0:	4f117f01 	svcmi	0x00117f01
    42a4:	01000000 	mrseq	r0, (UNDEF: 0)
    42a8:	0f7e0801 	svceq	0x007e0801
    42ac:	80010000 	andhi	r0, r1, r0
    42b0:	00004f11 	andeq	r4, r0, r1, lsl pc
    42b4:	08010100 	stmdaeq	r1, {r8}
    42b8:	00000ffa 	strdeq	r0, [r0], -sl
    42bc:	4f118101 	svcmi	0x00118101
    42c0:	01000000 	mrseq	r0, (UNDEF: 0)
    42c4:	0ff50801 	svceq	0x00f50801
    42c8:	82010000 	andhi	r0, r1, #0
    42cc:	00004f11 	andeq	r4, r0, r1, lsl pc
    42d0:	08010100 	stmdaeq	r1, {r8}
    42d4:	00000fb1 			; <UNDEFINED> instruction: 0x00000fb1
    42d8:	4f118301 	svcmi	0x00118301
    42dc:	01000000 	mrseq	r0, (UNDEF: 0)
    42e0:	0f760801 	svceq	0x00760801
    42e4:	84010000 	strhi	r0, [r1], #-0
    42e8:	00004f11 	andeq	r4, r0, r1, lsl pc
    42ec:	09010100 	stmdbeq	r1, {r8}
    42f0:	0000007d 	andeq	r0, r0, sp, ror r0
    42f4:	000000ee 	andeq	r0, r0, lr, ror #1
    42f8:	0000700a 	andeq	r7, r0, sl
    42fc:	06003100 	streq	r3, [r0], -r0, lsl #2
    4300:	000000de 	ldrdeq	r0, [r0], -lr
    4304:	0010130b 	andseq	r1, r0, fp, lsl #6
    4308:	0f8e0100 	svceq	0x008e0100
    430c:	000000ee 	andeq	r0, r0, lr, ror #1
    4310:	00030501 	andeq	r0, r3, r1, lsl #10
    4314:	0c000000 	stceq	0, cr0, [r0], {-0}
    4318:	00001001 	andeq	r1, r0, r1
    431c:	01012801 	tsteq	r1, r1, lsl #16
    4320:	0015e601 	andseq	lr, r5, r1, lsl #12
    4324:	0015e800 	andseq	lr, r5, r0, lsl #16
    4328:	0c9c0100 	ldfeqs	f0, [ip], {0}
    432c:	00000f8d 	andeq	r0, r0, sp, lsl #31
    4330:	01011601 	tsteq	r1, r1, lsl #12
    4334:	0015e401 	andseq	lr, r5, r1, lsl #8
    4338:	0015e600 	andseq	lr, r5, r0, lsl #12
    433c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4340:	00000f9d 	muleq	r0, sp, pc	; <UNPREDICTABLE>
    4344:	01010401 	tsteq	r1, r1, lsl #8
    4348:	0015e201 	andseq	lr, r5, r1, lsl #4
    434c:	0015e400 	andseq	lr, r5, r0, lsl #8
    4350:	0d9c0100 	ldfeqs	f0, [ip]
    4354:	00102a01 	andseq	r2, r0, r1, lsl #20
    4358:	01d20100 	bicseq	r0, r2, r0, lsl #2
    435c:	0015e801 	andseq	lr, r5, r1, lsl #16
    4360:	00162c00 	andseq	r2, r6, r0, lsl #24
    4364:	0e9c0100 	fmleqe	f0, f4, f0
    4368:	00000f84 	andeq	r0, r0, r4, lsl #31
    436c:	840fd401 	strhi	sp, [pc], #-1025	; 4374 <__exidx_end+0x1500>
    4370:	13000000 	movwne	r0, #0
    4374:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    4378:	00001020 	andeq	r1, r0, r0, lsr #32
    437c:	841ad401 	ldrhi	sp, [sl], #-1025	; 0xfffffbff
    4380:	31000000 	mrscc	r0, (UNDEF: 0)
    4384:	0000001f 	andeq	r0, r0, pc, lsl r0
    4388:	00053700 	andeq	r3, r5, r0, lsl #14
    438c:	e8000300 	stmda	r0, {r8, r9}
    4390:	04000010 	streq	r0, [r0], #-16
    4394:	00017201 	andeq	r7, r1, r1, lsl #4
    4398:	108a0c00 	addne	r0, sl, r0, lsl #24
    439c:	00d30000 	sbcseq	r0, r3, r0
    43a0:	37560000 	ldrbcc	r0, [r6, -r0]
    43a4:	01020000 	mrseq	r0, (UNDEF: 2)
    43a8:	0003b706 	andeq	fp, r3, r6, lsl #14
    43ac:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    43b0:	000003f1 	strdeq	r0, [r0], -r1
    43b4:	b0050402 	andlt	r0, r5, r2, lsl #8
    43b8:	02000000 	andeq	r0, r0, #0
    43bc:	00ab0508 	adceq	r0, fp, r8, lsl #10
    43c0:	3c030000 	stccc	0, cr0, [r3], {-0}
    43c4:	01000022 	tsteq	r0, r2, lsr #32
    43c8:	0045182e 	subeq	r1, r5, lr, lsr #16
    43cc:	01020000 	mrseq	r0, (UNDEF: 2)
    43d0:	0003b508 	andeq	fp, r3, r8, lsl #10
    43d4:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    43d8:	31010000 	mrscc	r0, (UNDEF: 1)
    43dc:	00005819 	andeq	r5, r0, r9, lsl r8
    43e0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    43e4:	00000273 	andeq	r0, r0, r3, ror r2
    43e8:	0017f303 	andseq	pc, r7, r3, lsl #6
    43ec:	19340100 	ldmdbne	r4!, {r8}
    43f0:	0000006b 	andeq	r0, r0, fp, rrx
    43f4:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    43f8:	02000000 	andeq	r0, r0, #0
    43fc:	00800708 	addeq	r0, r0, r8, lsl #14
    4400:	04040000 	streq	r0, [r4], #-0
    4404:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4408:	07040200 	streq	r0, [r4, -r0, lsl #4]
    440c:	0000008a 	andeq	r0, r0, sl, lsl #1
    4410:	2f025805 	svccs	0x00025805
    4414:	0001af09 	andeq	sl, r1, r9, lsl #30
    4418:	11e40600 	mvnne	r0, r0, lsl #12
    441c:	31020000 	mrscc	r0, (UNDEF: 2)
    4420:	00005f10 	andeq	r5, r0, r0, lsl pc
    4424:	f9060000 			; <UNDEFINED> instruction: 0xf9060000
    4428:	02000010 	andeq	r0, r0, #16
    442c:	005f1032 	subseq	r1, pc, r2, lsr r0	; <UNPREDICTABLE>
    4430:	06040000 	streq	r0, [r4], -r0
    4434:	000010c1 	andeq	r1, r0, r1, asr #1
    4438:	5f103302 	svcpl	0x00103302
    443c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4440:	00107406 	andseq	r7, r0, r6, lsl #8
    4444:	10340200 	eorsne	r0, r4, r0, lsl #4
    4448:	0000005f 	andeq	r0, r0, pc, asr r0
    444c:	1033060c 	eorsne	r0, r3, ip, lsl #12
    4450:	35020000 	strcc	r0, [r2, #-0]
    4454:	00005f10 	andeq	r5, r0, r0, lsl pc
    4458:	44061000 	strmi	r1, [r6], #-0
    445c:	02000010 	andeq	r0, r0, #16
    4460:	005f1036 	subseq	r1, pc, r6, lsr r0	; <UNPREDICTABLE>
    4464:	06140000 	ldreq	r0, [r4], -r0
    4468:	00001064 	andeq	r1, r0, r4, rrx
    446c:	5f103702 	svcpl	0x00103702
    4470:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4474:	00118906 	andseq	r8, r1, r6, lsl #18
    4478:	10380200 	eorsne	r0, r8, r0, lsl #4
    447c:	0000005f 	andeq	r0, r0, pc, asr r0
    4480:	10d9061c 	sbcsne	r0, r9, ip, lsl r6
    4484:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    4488:	00005f10 	andeq	r5, r0, r0, lsl pc
    448c:	e9062000 	stmdb	r6, {sp}
    4490:	02000010 	andeq	r0, r0, #16
    4494:	005f103a 	subseq	r1, pc, sl, lsr r0	; <UNPREDICTABLE>
    4498:	06240000 	strteq	r0, [r4], -r0
    449c:	000011af 	andeq	r1, r0, pc, lsr #3
    44a0:	5f103b02 	svcpl	0x00103b02
    44a4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    44a8:	0011bf06 	andseq	fp, r1, r6, lsl #30
    44ac:	103c0200 	eorsne	r0, ip, r0, lsl #4
    44b0:	0000005f 	andeq	r0, r0, pc, asr r0
    44b4:	1055062c 	subsne	r0, r5, ip, lsr #12
    44b8:	3d020000 	stccc	0, cr0, [r2, #-0]
    44bc:	00005f10 	andeq	r5, r0, r0, lsl pc
    44c0:	4f063000 	svcmi	0x00063000
    44c4:	02000011 	andeq	r0, r0, #17
    44c8:	005f103e 	subseq	r1, pc, lr, lsr r0	; <UNPREDICTABLE>
    44cc:	06340000 	ldrteq	r0, [r4], -r0
    44d0:	000011f4 	strdeq	r1, [r0], -r4
    44d4:	5f103f02 	svcpl	0x00103f02
    44d8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    44dc:	00110a06 	andseq	r0, r1, r6, lsl #20
    44e0:	10400200 	subne	r0, r0, r0, lsl #4
    44e4:	0000005f 	andeq	r0, r0, pc, asr r0
    44e8:	111e063c 	tstne	lr, ip, lsr r6
    44ec:	41020000 	mrsmi	r0, (UNDEF: 2)
    44f0:	00005f10 	andeq	r5, r0, r0, lsl pc
    44f4:	73064000 	movwvc	r4, #24576	; 0x6000
    44f8:	02000011 	andeq	r0, r0, #17
    44fc:	005f1042 	subseq	r1, pc, r2, asr #32
    4500:	06440000 	strbeq	r0, [r4], -r0
    4504:	0000115f 	andeq	r1, r0, pc, asr r1
    4508:	5f104302 	svcpl	0x00104302
    450c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4510:	00119a06 	andseq	r9, r1, r6, lsl #20
    4514:	10440200 	subne	r0, r4, r0, lsl #4
    4518:	0000005f 	andeq	r0, r0, pc, asr r0
    451c:	11cf064c 	bicne	r0, pc, ip, asr #12
    4520:	45020000 	strmi	r0, [r2, #-0]
    4524:	00005f10 	andeq	r5, r0, r0, lsl pc
    4528:	39065000 	stmdbcc	r6, {ip, lr}
    452c:	02000011 	andeq	r0, r0, #17
    4530:	005f1046 	subseq	r1, pc, r6, asr #32
    4534:	00540000 	subseq	r0, r4, r0
    4538:	00113203 	andseq	r3, r1, r3, lsl #4
    453c:	03470200 	movteq	r0, #29184	; 0x7200
    4540:	00000087 	andeq	r0, r0, r7, lsl #1
    4544:	0001af07 	andeq	sl, r1, r7, lsl #30
    4548:	10830800 	addne	r0, r3, r0, lsl #16
    454c:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    4550:	0001bb15 	andeq	fp, r1, r5, lsl fp
    4554:	03010100 	movweq	r0, #4352	; 0x1100
    4558:	00001600 	andeq	r1, r0, r0, lsl #12
    455c:	4c122703 	ldcmi	7, cr2, [r2], {3}
    4560:	07000000 	streq	r0, [r0, -r0]
    4564:	000001ce 	andeq	r0, r0, lr, asr #3
    4568:	0001ce09 	andeq	ip, r1, r9, lsl #28
    456c:	13f80300 	mvnsne	r0, #0, 6
    4570:	2b030000 	blcs	c4578 <__ccfg+0xa45d0>
    4574:	00003912 	andeq	r3, r0, r2, lsl r9
    4578:	01e40900 	mvneq	r0, r0, lsl #18
    457c:	51030000 	mrspl	r0, (UNDEF: 3)
    4580:	03000016 	movweq	r0, #22
    4584:	005f122c 	subseq	r1, pc, ip, lsr #4
    4588:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    458c:	03000001 	movweq	r0, #1
    4590:	000002a6 	andeq	r0, r0, r6, lsr #5
    4594:	5f122d03 	svcpl	0x00122d03
    4598:	05000000 	streq	r0, [r0, #-0]
    459c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    45a0:	000002a0 	andeq	r0, r0, r0, lsr #5
    45a4:	0002c10a 	andeq	ip, r2, sl, lsl #2
    45a8:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    45ac:	000001e4 	andeq	r0, r0, r4, ror #3
    45b0:	00070101 	andeq	r0, r7, r1, lsl #2
    45b4:	0000a40a 	andeq	sl, r0, sl, lsl #8
    45b8:	03350300 	teqeq	r5, #0, 6
    45bc:	000001e4 	andeq	r0, r0, r4, ror #3
    45c0:	00060101 	andeq	r0, r6, r1, lsl #2
    45c4:	00028f0a 	andeq	r8, r2, sl, lsl #30
    45c8:	03360300 	teqeq	r6, #0, 6
    45cc:	000001e4 	andeq	r0, r0, r4, ror #3
    45d0:	00050101 	andeq	r0, r5, r1, lsl #2
    45d4:	00042b0a 	andeq	r2, r4, sl, lsl #22
    45d8:	03370300 	teqeq	r7, #0, 6
    45dc:	000001e4 	andeq	r0, r0, r4, ror #3
    45e0:	00040101 	andeq	r0, r4, r1, lsl #2
    45e4:	0004240a 	andeq	r2, r4, sl, lsl #8
    45e8:	03380300 	teqeq	r8, #0, 6
    45ec:	000001e4 	andeq	r0, r0, r4, ror #3
    45f0:	00000401 	andeq	r0, r0, r1, lsl #8
    45f4:	00041506 	andeq	r1, r4, r6, lsl #10
    45f8:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    45fc:	000001e4 	andeq	r0, r0, r4, ror #3
    4600:	004c0601 	subeq	r0, ip, r1, lsl #12
    4604:	3c030000 	stccc	0, cr0, [r3], {-0}
    4608:	0001e403 	andeq	lr, r1, r3, lsl #8
    460c:	79060200 	stmdbvc	r6, {r9}
    4610:	03000000 	movweq	r0, #0
    4614:	01e4033d 	mvneq	r0, sp, lsr r3
    4618:	06030000 	streq	r0, [r3], -r0
    461c:	00000161 	andeq	r0, r0, r1, ror #2
    4620:	f5083f03 			; <UNDEFINED> instruction: 0xf5083f03
    4624:	04000001 	streq	r0, [r0], #-1
    4628:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    462c:	41030000 	mrsmi	r0, (UNDEF: 3)
    4630:	00021203 	andeq	r1, r2, r3, lsl #4
    4634:	02a00900 	adceq	r0, r0, #0, 18
    4638:	b5080000 	strlt	r0, [r8, #-0]
    463c:	03000002 	movweq	r0, #2
    4640:	02ac1a43 	adceq	r1, ip, #274432	; 0x43000
    4644:	01010000 	mrseq	r0, (UNDEF: 1)
    4648:	00032108 	andeq	r2, r3, r8, lsl #2
    464c:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    4650:	000002cd 	andeq	r0, r0, sp, asr #5
    4654:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4658:	000002d3 	ldrdeq	r0, [r0], -r3
    465c:	be080102 	adflte	f0, f0, f2
    4660:	07000003 	streq	r0, [r0, -r3]
    4664:	000002d3 	ldrdeq	r0, [r0], -r3
    4668:	00032f08 	andeq	r2, r3, r8, lsl #30
    466c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    4670:	000002cd 	andeq	r0, r0, sp, asr #5
    4674:	08050101 	stmdaeq	r5, {r0, r8}
    4678:	1e098f04 	cdpne	15, 0, cr8, cr9, cr4, {0}
    467c:	06000003 	streq	r0, [r0], -r3
    4680:	000002c8 	andeq	r0, r0, r8, asr #5
    4684:	5f0b9004 	svcpl	0x000b9004
    4688:	00000000 	andeq	r0, r0, r0
    468c:	00062d06 	andeq	r2, r6, r6, lsl #26
    4690:	08910400 	ldmeq	r1, {sl}
    4694:	000001ce 	andeq	r0, r0, lr, asr #3
    4698:	049c0604 	ldreq	r0, [ip], #1540	; 0x604
    469c:	92040000 	andls	r0, r4, #0
    46a0:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    46a4:	03000600 	movweq	r0, #1536	; 0x600
    46a8:	00000432 	andeq	r0, r0, r2, lsr r4
    46ac:	ed039304 	stc	3, cr9, [r3, #-16]
    46b0:	0c000002 	stceq	0, cr0, [r0], {2}
    46b4:	0000031e 	andeq	r0, r0, lr, lsl r3
    46b8:	00000335 	andeq	r0, r0, r5, lsr r3
    46bc:	4208000d 	andmi	r0, r8, #13
    46c0:	04000000 	streq	r0, [r0], #-0
    46c4:	032a0f99 			; <UNDEFINED> instruction: 0x032a0f99
    46c8:	01010000 	mrseq	r0, (UNDEF: 1)
    46cc:	91050105 	tstls	r5, r5, lsl #2
    46d0:	00036d09 	andeq	r6, r3, r9, lsl #26
    46d4:	048f0a00 	streq	r0, [pc], #2560	; 46dc <__exidx_end+0x1868>
    46d8:	93050000 	movwls	r0, #20480	; 0x5000
    46dc:	0001e407 	andeq	lr, r1, r7, lsl #8
    46e0:	01070100 	mrseq	r0, (UNDEF: 23)
    46e4:	003d0a00 	eorseq	r0, sp, r0, lsl #20
    46e8:	94050000 	strls	r0, [r5], #-0
    46ec:	0001e403 	andeq	lr, r1, r3, lsl #8
    46f0:	00010100 	andeq	r0, r1, r0, lsl #2
    46f4:	86030000 	strhi	r0, [r3], -r0
    46f8:	05000002 	streq	r0, [r0, #-2]
    46fc:	03430396 	movteq	r0, #13206	; 0x3396
    4700:	6d070000 	stcvs	0, cr0, [r7, #-0]
    4704:	0c000003 	stceq	0, cr0, [r0], {3}
    4708:	00000379 	andeq	r0, r0, r9, ror r3
    470c:	00000389 	andeq	r0, r0, r9, lsl #7
    4710:	7e07000d 	cdpvc	0, 0, cr0, cr7, cr13, {0}
    4714:	08000003 	stmdaeq	r0, {r0, r1}
    4718:	000002eb 	andeq	r0, r0, fp, ror #5
    471c:	89179c05 	ldmdbhi	r7, {r0, r2, sl, fp, ip, pc}
    4720:	01000003 	tsteq	r0, r3
    4724:	01da0c01 	bicseq	r0, sl, r1, lsl #24
    4728:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
    472c:	000d0000 	andeq	r0, sp, r0
    4730:	00039c07 	andeq	r9, r3, r7, lsl #24
    4734:	03a70800 			; <UNDEFINED> instruction: 0x03a70800
    4738:	06060000 	streq	r0, [r6], -r0
    473c:	0003a713 	andeq	sl, r3, r3, lsl r7
    4740:	08010100 	stmdaeq	r1, {r8}
    4744:	00000141 	andeq	r0, r0, r1, asr #2
    4748:	f50ec304 			; <UNDEFINED> instruction: 0xf50ec304
    474c:	01000001 	tsteq	r0, r1
    4750:	04a90e01 	strteq	r0, [r9], #3585	; 0xe01
    4754:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    4758:	03d51001 	bicseq	r1, r5, #1
    475c:	040b0000 	streq	r0, [fp], #-0
    4760:	000003db 	ldrdeq	r0, [r0], -fp
    4764:	03e7010f 	mvneq	r0, #-1073741821	; 0xc0000003
    4768:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    476c:	00000001 	andeq	r0, r0, r1
    4770:	0002da0c 	andeq	sp, r2, ip, lsl #20
    4774:	0003f200 	andeq	pc, r3, r0, lsl #4
    4778:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    477c:	000003e7 	andeq	r0, r0, r7, ror #7
    4780:	00046411 	andeq	r6, r4, r1, lsl r4
    4784:	017f0700 	cmneq	pc, r0, lsl #14
    4788:	0003f216 	andeq	pc, r3, r6, lsl r2	; <UNPREDICTABLE>
    478c:	11010100 	mrsne	r0, (UNDEF: 17)
    4790:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    4794:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    4798:	00000201 	andeq	r0, r0, r1, lsl #4
    479c:	94110101 	ldrls	r0, [r1], #-257	; 0xfffffeff
    47a0:	07000004 	streq	r0, [r0, -r4]
    47a4:	f50e02d8 			; <UNDEFINED> instruction: 0xf50e02d8
    47a8:	01000001 	tsteq	r0, r1
    47ac:	07081201 	streq	r1, [r8, -r1, lsl #4]
    47b0:	4b090303 	blmi	2453c4 <__ccfg+0x22541c>
    47b4:	13000004 	movwne	r0, #4
    47b8:	00002234 	andeq	r2, r0, r4, lsr r2
    47bc:	07030707 	streq	r0, [r3, -r7, lsl #14]
    47c0:	000001ce 	andeq	r0, r0, lr, asr #3
    47c4:	057f1300 	ldrbeq	r1, [pc, #-768]!	; 44cc <__exidx_end+0x1658>
    47c8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    47cc:	02060803 	andeq	r0, r6, #196608	; 0x30000
    47d0:	00040000 	andeq	r0, r4, r0
    47d4:	0002660e 	andeq	r6, r2, lr, lsl #12
    47d8:	03090700 	movweq	r0, #38656	; 0x9700
    47dc:	00042403 	andeq	r2, r4, r3, lsl #8
    47e0:	04b81400 	ldrteq	r1, [r8], #1024	; 0x400
    47e4:	07300000 	ldreq	r0, [r0, -r0]!
    47e8:	bb08030b 	bllt	20541c <__ccfg+0x1e5474>
    47ec:	13000004 	movwne	r0, #4
    47f0:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    47f4:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    47f8:	000001ce 	andeq	r0, r0, lr, asr #3
    47fc:	02d21300 	sbcseq	r1, r2, #0, 6
    4800:	15070000 	strne	r0, [r7, #-0]
    4804:	01ce0803 	biceq	r0, lr, r3, lsl #16
    4808:	13020000 	movwne	r0, #8192	; 0x2000
    480c:	000004ac 	andeq	r0, r0, ip, lsr #9
    4810:	0b031607 	bleq	ca034 <__ccfg+0xaa08c>
    4814:	000003c8 	andeq	r0, r0, r8, asr #7
    4818:	0f7f1304 	svceq	0x007f1304
    481c:	17070000 	strne	r0, [r7, -r0]
    4820:	02060903 	andeq	r0, r6, #49152	; 0xc000
    4824:	13080000 	movwne	r0, #32768	; 0x8000
    4828:	0000045d 	andeq	r0, r0, sp, asr r4
    482c:	0f031807 	svceq	0x00031807
    4830:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4834:	02cd130c 	sbceq	r1, sp, #12, 6	; 0x30000000
    4838:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    483c:	04cb1503 	strbeq	r1, [fp], #1283	; 0x503
    4840:	002c0000 	eoreq	r0, ip, r0
    4844:	00044b0c 	andeq	r4, r4, ip, lsl #22
    4848:	0004cb00 	andeq	ip, r4, r0, lsl #22
    484c:	00801500 	addeq	r1, r0, r0, lsl #10
    4850:	00030000 	andeq	r0, r3, r0
    4854:	0458040b 	ldrbeq	r0, [r8], #-1035	; 0xfffffbf5
    4858:	c30e0000 	movwgt	r0, #57344	; 0xe000
    485c:	07000004 	streq	r0, [r0, -r4]
    4860:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    4864:	11000004 	tstne	r0, r4
    4868:	00000395 	muleq	r0, r5, r3
    486c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    4870:	000004ed 	andeq	r0, r0, sp, ror #9
    4874:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4878:	000004d1 	ldrdeq	r0, [r0], -r1
    487c:	0004f108 	andeq	pc, r4, r8, lsl #2
    4880:	131d0800 	tstne	sp, #0, 16
    4884:	000001ce 	andeq	r0, r0, lr, asr #3
    4888:	5b080101 	blpl	204c94 <__ccfg+0x1e4cec>
    488c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    4890:	01df1a1e 	bicseq	r1, pc, lr, lsl sl	; <UNPREDICTABLE>
    4894:	01010000 	mrseq	r0, (UNDEF: 1)
    4898:	0008eb08 	andeq	lr, r8, r8, lsl #22
    489c:	241e0800 	ldrcs	r0, [lr], #-2048	; 0xfffff800
    48a0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    48a4:	1a080101 	bne	204cb0 <__ccfg+0x1e4d08>
    48a8:	08000006 	stmdaeq	r0, {r1, r2}
    48ac:	04ed1422 	strbteq	r1, [sp], #1058	; 0x422
    48b0:	01010000 	mrseq	r0, (UNDEF: 1)
    48b4:	0001c016 	andeq	ip, r1, r6, lsl r0
    48b8:	02170900 	andseq	r0, r7, #0, 18
    48bc:	a803050e 	stmdage	r3, {r1, r2, r3, r8, sl}
    48c0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    48c4:	00000500 	andeq	r0, r0, r0, lsl #10
    48c8:	12070003 	andne	r0, r7, #3
    48cc:	01040000 	mrseq	r0, (UNDEF: 4)
    48d0:	00000172 	andeq	r0, r0, r2, ror r1
    48d4:	00123b0c 	andseq	r3, r2, ip, lsl #22
    48d8:	0000d300 	andeq	sp, r0, r0, lsl #6
    48dc:	0009a000 	andeq	sl, r9, r0
    48e0:	00000000 	andeq	r0, r0, r0
    48e4:	0038df00 	eorseq	sp, r8, r0, lsl #30
    48e8:	06010200 	streq	r0, [r1], -r0, lsl #4
    48ec:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    48f0:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    48f4:	02000003 	andeq	r0, r0, #3
    48f8:	00b00504 	adcseq	r0, r0, r4, lsl #10
    48fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4900:	0000ab05 	andeq	sl, r0, r5, lsl #22
    4904:	223c0300 	eorscs	r0, ip, #0, 6
    4908:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    490c:	00004d18 	andeq	r4, r0, r8, lsl sp
    4910:	08010200 	stmdaeq	r1, {r9}
    4914:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    4918:	00212a03 	eoreq	r2, r1, r3, lsl #20
    491c:	19310400 	ldmdbne	r1!, {sl}
    4920:	00000060 	andeq	r0, r0, r0, rrx
    4924:	73070202 	movwvc	r0, #29186	; 0x7202
    4928:	03000002 	movweq	r0, #2
    492c:	000017f3 	strdeq	r1, [r0], -r3
    4930:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    4934:	02000000 	andeq	r0, r0, #0
    4938:	00850704 	addeq	r0, r5, r4, lsl #14
    493c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4940:	00008007 	andeq	r8, r0, r7
    4944:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4948:	00746e69 	rsbseq	r6, r4, r9, ror #28
    494c:	8a070402 	bhi	1c595c <__ccfg+0x1a59b4>
    4950:	03000000 	movweq	r0, #0
    4954:	00001600 	andeq	r1, r0, r0, lsl #12
    4958:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    495c:	05000000 	streq	r0, [r0, #-0]
    4960:	0000008f 	andeq	r0, r0, pc, lsl #1
    4964:	00008f06 	andeq	r8, r0, r6, lsl #30
    4968:	13f80300 	mvnsne	r0, #0, 6
    496c:	2b050000 	blcs	144974 <__ccfg+0x1249cc>
    4970:	00004112 	andeq	r4, r0, r2, lsl r1
    4974:	00a50600 	adceq	r0, r5, r0, lsl #12
    4978:	a5050000 	strge	r0, [r5, #-0]
    497c:	03000000 	movweq	r0, #0
    4980:	00001651 	andeq	r1, r0, r1, asr r6
    4984:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    4988:	05000000 	streq	r0, [r0, #-0]
    498c:	000000bb 	strheq	r0, [r0], -fp
    4990:	0002a603 	andeq	sl, r2, r3, lsl #12
    4994:	122d0500 	eorne	r0, sp, #0, 10
    4998:	00000067 	andeq	r0, r0, r7, rrx
    499c:	0007a203 	andeq	sl, r7, r3, lsl #4
    49a0:	102e0500 	eorne	r0, lr, r0, lsl #10
    49a4:	000000e4 	andeq	r0, r0, r4, ror #1
    49a8:	008f0407 	addeq	r0, pc, r7, lsl #8
    49ac:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    49b0:	78093205 	stmdavc	r9, {r0, r2, r9, ip, sp}
    49b4:	09000001 	stmdbeq	r0, {r0}
    49b8:	000002c1 	andeq	r0, r0, r1, asr #5
    49bc:	a5073405 	strge	r3, [r7, #-1029]	; 0xfffffbfb
    49c0:	01000000 	mrseq	r0, (UNDEF: 0)
    49c4:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    49c8:	000000a4 	andeq	r0, r0, r4, lsr #1
    49cc:	a5033505 	strge	r3, [r3, #-1285]	; 0xfffffafb
    49d0:	01000000 	mrseq	r0, (UNDEF: 0)
    49d4:	09000601 	stmdbeq	r0, {r0, r9, sl}
    49d8:	0000028f 	andeq	r0, r0, pc, lsl #5
    49dc:	a5033605 	strge	r3, [r3, #-1541]	; 0xfffff9fb
    49e0:	01000000 	mrseq	r0, (UNDEF: 0)
    49e4:	09000501 	stmdbeq	r0, {r0, r8, sl}
    49e8:	0000042b 	andeq	r0, r0, fp, lsr #8
    49ec:	a5033705 	strge	r3, [r3, #-1797]	; 0xfffff8fb
    49f0:	01000000 	mrseq	r0, (UNDEF: 0)
    49f4:	09000401 	stmdbeq	r0, {r0, sl}
    49f8:	00000424 	andeq	r0, r0, r4, lsr #8
    49fc:	a5033805 	strge	r3, [r3, #-2053]	; 0xfffff7fb
    4a00:	01000000 	mrseq	r0, (UNDEF: 0)
    4a04:	0a000004 	beq	4a1c <__exidx_end+0x1ba8>
    4a08:	00000415 	andeq	r0, r0, r5, lsl r4
    4a0c:	a5073a05 	strge	r3, [r7, #-2565]	; 0xfffff5fb
    4a10:	01000000 	mrseq	r0, (UNDEF: 0)
    4a14:	00004c0a 	andeq	r4, r0, sl, lsl #24
    4a18:	033c0500 	teqeq	ip, #0, 10
    4a1c:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a20:	00790a02 	rsbseq	r0, r9, r2, lsl #20
    4a24:	3d050000 	stccc	0, cr0, [r5, #-0]
    4a28:	0000a503 	andeq	sl, r0, r3, lsl #10
    4a2c:	610a0300 	mrsvs	r0, (UNDEF: 58)
    4a30:	05000001 	streq	r0, [r0, #-1]
    4a34:	00bb083f 	adcseq	r0, fp, pc, lsr r8
    4a38:	00040000 	andeq	r0, r4, r0
    4a3c:	00045403 	andeq	r5, r4, r3, lsl #8
    4a40:	03410500 	movteq	r0, #5376	; 0x1500
    4a44:	000000ea 	andeq	r0, r0, sl, ror #1
    4a48:	00017806 	andeq	r7, r1, r6, lsl #16
    4a4c:	02b50b00 	adcseq	r0, r5, #0, 22
    4a50:	43050000 	movwmi	r0, #20480	; 0x5000
    4a54:	0001841a 	andeq	r8, r1, sl, lsl r4
    4a58:	0b010100 	bleq	44e60 <__ccfg+0x24eb8>
    4a5c:	00000321 	andeq	r0, r0, r1, lsr #6
    4a60:	a50e4505 	strge	r4, [lr, #-1285]	; 0xfffffafb
    4a64:	01000001 	tsteq	r0, r1
    4a68:	ab040701 	blge	106674 <__ccfg+0xe66cc>
    4a6c:	02000001 	andeq	r0, r0, #1
    4a70:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    4a74:	ab050000 	blge	144a7c <__ccfg+0x124ad4>
    4a78:	0b000001 	bleq	4a84 <__exidx_end+0x1c10>
    4a7c:	0000032f 	andeq	r0, r0, pc, lsr #6
    4a80:	a51e4505 	ldrge	r4, [lr, #-1285]	; 0xfffffafb
    4a84:	01000001 	tsteq	r0, r1
    4a88:	06080801 	streq	r0, [r8], -r1, lsl #16
    4a8c:	01f6098f 	mvnseq	r0, pc, lsl #19
    4a90:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
    4a94:	06000002 	streq	r0, [r0], -r2
    4a98:	00670b90 	mlseq	r7, r0, fp, r0
    4a9c:	0a000000 	beq	4aa4 <__exidx_end+0x1c30>
    4aa0:	0000062d 	andeq	r0, r0, sp, lsr #12
    4aa4:	8f089106 	svchi	0x00089106
    4aa8:	04000000 	streq	r0, [r0], #-0
    4aac:	00049c0a 	andeq	r9, r4, sl, lsl #24
    4ab0:	10920600 	addsne	r0, r2, r0, lsl #12
    4ab4:	000000b1 	strheq	r0, [r0], -r1
    4ab8:	32030006 	andcc	r0, r3, #6
    4abc:	06000004 	streq	r0, [r0], -r4
    4ac0:	01c50393 			; <UNDEFINED> instruction: 0x01c50393
    4ac4:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    4ac8:	0d000001 	stceq	0, cr0, [r0, #-4]
    4acc:	0d000002 	stceq	0, cr0, [r0, #-8]
    4ad0:	00420b00 	subeq	r0, r2, r0, lsl #22
    4ad4:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    4ad8:	0002020f 	andeq	r0, r2, pc, lsl #4
    4adc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4ae0:	0000b604 	andeq	fp, r0, r4, lsl #12
    4ae4:	07010800 	streq	r0, [r1, -r0, lsl #16]
    4ae8:	024b0991 	subeq	r0, fp, #2375680	; 0x244000
    4aec:	8f090000 	svchi	0x00090000
    4af0:	07000004 	streq	r0, [r0, -r4]
    4af4:	00a50793 	umlaleq	r0, r5, r3, r7
    4af8:	07010000 	streq	r0, [r1, -r0]
    4afc:	3d090001 	stccc	0, cr0, [r9, #-4]
    4b00:	07000000 	streq	r0, [r0, -r0]
    4b04:	00a50394 	umlaleq	r0, r5, r4, r3
    4b08:	01010000 	mrseq	r0, (UNDEF: 1)
    4b0c:	03000000 	movweq	r0, #0
    4b10:	00000286 	andeq	r0, r0, r6, lsl #5
    4b14:	21039607 	tstcs	r3, r7, lsl #12
    4b18:	05000002 	streq	r0, [r0, #-2]
    4b1c:	0000024b 	andeq	r0, r0, fp, asr #4
    4b20:	0002570c 	andeq	r5, r2, ip, lsl #14
    4b24:	00026700 	andeq	r6, r2, r0, lsl #14
    4b28:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4b2c:	0000025c 	andeq	r0, r0, ip, asr r2
    4b30:	0002eb0b 	andeq	lr, r2, fp, lsl #22
    4b34:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    4b38:	00000267 	andeq	r0, r0, r7, ror #4
    4b3c:	9b0c0101 	blls	304f48 <__ccfg+0x2e4fa0>
    4b40:	85000000 	strhi	r0, [r0, #-0]
    4b44:	0d000002 	stceq	0, cr0, [r0, #-8]
    4b48:	027a0500 	rsbseq	r0, sl, #0, 10
    4b4c:	a70b0000 	strge	r0, [fp, -r0]
    4b50:	08000003 	stmdaeq	r0, {r0, r1}
    4b54:	02851306 	addeq	r1, r5, #402653184	; 0x18000000
    4b58:	01010000 	mrseq	r0, (UNDEF: 1)
    4b5c:	0001410b 	andeq	r4, r1, fp, lsl #2
    4b60:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    4b64:	000000bb 	strheq	r0, [r0], -fp
    4b68:	a90e0101 	stmdbge	lr, {r0, r8}
    4b6c:	09000004 	stmdbeq	r0, {r2}
    4b70:	b310016e 	tstlt	r0, #-2147483621	; 0x8000001b
    4b74:	07000002 	streq	r0, [r0, -r2]
    4b78:	0002b904 	andeq	fp, r2, r4, lsl #18
    4b7c:	c5010f00 	strgt	r0, [r1, #-3840]	; 0xfffff100
    4b80:	10000002 	andne	r0, r0, r2
    4b84:	0000008f 	andeq	r0, r0, pc, lsl #1
    4b88:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    4b8c:	02d00000 	sbcseq	r0, r0, #0
    4b90:	000d0000 	andeq	r0, sp, r0
    4b94:	0002c505 	andeq	ip, r2, r5, lsl #10
    4b98:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
    4b9c:	7f090000 	svcvc	0x00090000
    4ba0:	02d01601 	sbcseq	r1, r0, #1048576	; 0x100000
    4ba4:	01010000 	mrseq	r0, (UNDEF: 1)
    4ba8:	00039f11 	andeq	r9, r3, r1, lsl pc
    4bac:	01820900 	orreq	r0, r2, r0, lsl #18
    4bb0:	0000c714 	andeq	ip, r0, r4, lsl r7
    4bb4:	11010100 	mrsne	r0, (UNDEF: 17)
    4bb8:	00000494 	muleq	r0, r4, r4
    4bbc:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    4bc0:	000000bb 	strheq	r0, [r0], -fp
    4bc4:	08120101 	ldmdaeq	r2, {r0, r8}
    4bc8:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    4bcc:	00000329 	andeq	r0, r0, r9, lsr #6
    4bd0:	00223413 	eoreq	r3, r2, r3, lsl r4
    4bd4:	03070900 	movweq	r0, #30976	; 0x7900
    4bd8:	00008f07 	andeq	r8, r0, r7, lsl #30
    4bdc:	7f130000 	svcvc	0x00130000
    4be0:	09000005 	stmdbeq	r0, {r0, r2}
    4be4:	cc080308 	stcgt	3, cr0, [r8], {8}
    4be8:	04000000 	streq	r0, [r0], #-0
    4bec:	02660e00 	rsbeq	r0, r6, #0, 28
    4bf0:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    4bf4:	03020303 	movweq	r0, #8963	; 0x2303
    4bf8:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
    4bfc:	30000004 	andcc	r0, r0, r4
    4c00:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    4c04:	00000399 	muleq	r0, r9, r3
    4c08:	0004b113 	andeq	fp, r4, r3, lsl r1
    4c0c:	03140900 	tsteq	r4, #0, 18
    4c10:	00008f08 	andeq	r8, r0, r8, lsl #30
    4c14:	d2130000 	andsle	r0, r3, #0
    4c18:	09000002 	stmdbeq	r0, {r1}
    4c1c:	8f080315 	svchi	0x00080315
    4c20:	02000000 	andeq	r0, r0, #0
    4c24:	0004ac13 	andeq	sl, r4, r3, lsl ip
    4c28:	03160900 	tsteq	r6, #0, 18
    4c2c:	0002a60b 	andeq	sl, r2, fp, lsl #12
    4c30:	7f130400 	svcvc	0x00130400
    4c34:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    4c38:	cc090317 	stcgt	3, cr0, [r9], {23}
    4c3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4c40:	00045d13 	andeq	r5, r4, r3, lsl sp
    4c44:	03180900 	tsteq	r8, #0, 18
    4c48:	0003990f 	andeq	r9, r3, pc, lsl #18
    4c4c:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
    4c50:	09000002 	stmdbeq	r0, {r1}
    4c54:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    4c58:	2c000003 	stccs	0, cr0, [r0], {3}
    4c5c:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
    4c60:	03a90000 			; <UNDEFINED> instruction: 0x03a90000
    4c64:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    4c68:	03000000 	movweq	r0, #0
    4c6c:	36040700 	strcc	r0, [r4], -r0, lsl #14
    4c70:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    4c74:	000004c3 	andeq	r0, r0, r3, asr #9
    4c78:	1b031c09 	blne	cbca4 <__ccfg+0xabcfc>
    4c7c:	00000336 	andeq	r0, r0, r6, lsr r3
    4c80:	00039511 	andeq	r9, r3, r1, lsl r5
    4c84:	031e0900 	tsteq	lr, #0, 18
    4c88:	0003cb14 	andeq	ip, r3, r4, lsl fp
    4c8c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4c90:	0003af04 	andeq	sl, r3, r4, lsl #30
    4c94:	04f10b00 	ldrbteq	r0, [r1], #2816	; 0xb00
    4c98:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    4c9c:	00008f13 	andeq	r8, r0, r3, lsl pc
    4ca0:	0b010100 	bleq	450a8 <__ccfg+0x25100>
    4ca4:	0000075b 	andeq	r0, r0, fp, asr r7
    4ca8:	a01a1e0a 	andsge	r1, sl, sl, lsl #28
    4cac:	01000000 	mrseq	r0, (UNDEF: 0)
    4cb0:	08eb0b01 	stmiaeq	fp!, {r0, r8, r9, fp}^
    4cb4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    4cb8:	0000a024 	andeq	sl, r0, r4, lsr #32
    4cbc:	0b010100 	bleq	450c4 <__ccfg+0x2511c>
    4cc0:	0000061a 	andeq	r0, r0, sl, lsl r6
    4cc4:	cb14220a 	blgt	50d4f4 <__ccfg+0x4ed54c>
    4cc8:	01000003 	tsteq	r0, r3
    4ccc:	026c1601 	rsbeq	r1, ip, #1048576	; 0x100000
    4cd0:	0d010000 	stceq	0, cr0, [r1, #-0]
    4cd4:	6c030510 	cfstr32vs	mvfx0, [r3], {16}
    4cd8:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    4cdc:	00121b01 	andseq	r1, r2, r1, lsl #22
    4ce0:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    4ce4:	00000001 	andeq	r0, r0, r1
    4ce8:	00000000 	andeq	r0, r0, r0
    4cec:	bb9c0100 	bllt	fe7050f4 <_estack+0xde7000f4>
    4cf0:	18000004 	stmdane	r0, {r2}
    4cf4:	01007473 	tsteq	r0, r3, ror r4
    4cf8:	008f1c11 	addeq	r1, pc, r1, lsl ip	; <UNPREDICTABLE>
    4cfc:	1f4f0000 	svcne	0x004f0000
    4d00:	16190000 	ldrne	r0, [r9], -r0
    4d04:	01000012 	tsteq	r0, r2, lsl r0
    4d08:	021b2c11 	andseq	r2, fp, #4352	; 0x1100
    4d0c:	1f6d0000 	svcne	0x006d0000
    4d10:	76180000 	ldrvc	r0, [r8], -r0
    4d14:	01006c61 	tsteq	r0, r1, ror #24
    4d18:	00d83a11 	sbcseq	r3, r8, r1, lsl sl
    4d1c:	1f8b0000 	svcne	0x008b0000
    4d20:	701a0000 	andsvc	r0, sl, r0
    4d24:	12130100 	andsne	r0, r3, #0, 2
    4d28:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4d2c:	0100691b 	tsteq	r0, fp, lsl r9
    4d30:	008f0714 	addeq	r0, pc, r4, lsl r7	; <UNPREDICTABLE>
    4d34:	1fa90000 	svcne	0x00a90000
    4d38:	761a0000 	ldrvc	r0, [sl], -r0
    4d3c:	07150100 	ldreq	r0, [r5, -r0, lsl #2]
    4d40:	000000a5 	andeq	r0, r0, r5, lsr #1
    4d44:	0004d41c 	andeq	sp, r4, ip, lsl r4
	...
    4d50:	031c0100 	tsteq	ip, #0, 2
    4d54:	0004de1c 	andeq	sp, r4, ip, lsl lr
	...
    4d60:	031f0100 	tsteq	pc, #0, 2
    4d64:	0004e81d 	andeq	lr, r4, sp, lsl r8
    4d68:	00000000 	andeq	r0, r0, r0
    4d6c:	00097800 	andeq	r7, r9, r0, lsl #16
    4d70:	0b260100 	bleq	985178 <__ccfg+0x9651d0>
    4d74:	0004f61e 	andeq	pc, r4, lr, lsl r6	; <UNPREDICTABLE>
    4d78:	001fbc00 	andseq	fp, pc, r0, lsl #24
    4d7c:	07000000 	streq	r0, [r0, -r0]
    4d80:	00025704 	andeq	r5, r2, r4, lsl #14
    4d84:	2b011f00 	blcs	4c98c <__ccfg+0x2c9e4>
    4d88:	01000012 	tsteq	r0, r2, lsl r0
    4d8c:	0000060f 	andeq	r0, r0, pc, lsl #12
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d98:	00083d20 	andeq	r3, r8, r0, lsr #26
    4d9c:	355b0200 	ldrbcc	r0, [fp, #-512]	; 0xfffffe00
    4da0:	50200301 	eorpl	r0, r0, r1, lsl #6
    4da4:	02000005 	andeq	r0, r0, #5
    4da8:	03013550 	movweq	r3, #5456	; 0x1550
    4dac:	00120921 	andseq	r0, r2, r1, lsr #18
    4db0:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    4db4:	00006701 	andeq	r6, r0, r1, lsl #14
    4db8:	68220300 	stmdavs	r2!, {r8, r9}
    4dbc:	03000001 	movweq	r0, #1
    4dc0:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    4dc4:	00000000 	andeq	r0, r0, r0
    4dc8:	000004f6 	strdeq	r0, [r0], -r6
    4dcc:	13f80003 	mvnsne	r0, #3
    4dd0:	01040000 	mrseq	r0, (UNDEF: 4)
    4dd4:	00000172 	andeq	r0, r0, r2, ror r1
    4dd8:	0012950c 	andseq	r9, r2, ip, lsl #10
    4ddc:	0000d300 	andeq	sp, r0, r0, lsl #6
    4de0:	000a1800 	andeq	r1, sl, r0, lsl #16
    4de4:	00000000 	andeq	r0, r0, r0
    4de8:	003b7c00 	eorseq	r7, fp, r0, lsl #24
    4dec:	06010200 	streq	r0, [r1], -r0, lsl #4
    4df0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    4df4:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    4df8:	02000003 	andeq	r0, r0, #3
    4dfc:	00b00504 	adcseq	r0, r0, r4, lsl #10
    4e00:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4e04:	0000ab05 	andeq	sl, r0, r5, lsl #22
    4e08:	223c0300 	eorscs	r0, ip, #0, 6
    4e0c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    4e10:	00004d18 	andeq	r4, r0, r8, lsl sp
    4e14:	08010200 	stmdaeq	r1, {r9}
    4e18:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    4e1c:	00212a03 	eoreq	r2, r1, r3, lsl #20
    4e20:	19310300 	ldmdbne	r1!, {r8, r9}
    4e24:	00000060 	andeq	r0, r0, r0, rrx
    4e28:	73070202 	movwvc	r0, #29186	; 0x7202
    4e2c:	03000002 	movweq	r0, #2
    4e30:	000017f3 	strdeq	r1, [r0], -r3
    4e34:	73193403 	tstvc	r9, #50331648	; 0x3000000
    4e38:	02000000 	andeq	r0, r0, #0
    4e3c:	00850704 	addeq	r0, r5, r4, lsl #14
    4e40:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4e44:	00008007 	andeq	r8, r0, r7
    4e48:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4e4c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4e50:	8a070402 	bhi	1c5e60 <__ccfg+0x1a5eb8>
    4e54:	03000000 	movweq	r0, #0
    4e58:	00001600 	andeq	r1, r0, r0, lsl #12
    4e5c:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    4e60:	05000000 	streq	r0, [r0, #-0]
    4e64:	0000008f 	andeq	r0, r0, pc, lsl #1
    4e68:	00008f06 	andeq	r8, r0, r6, lsl #30
    4e6c:	13f80300 	mvnsne	r0, #0, 6
    4e70:	2b040000 	blcs	104e78 <__ccfg+0xe4ed0>
    4e74:	00004112 	andeq	r4, r0, r2, lsl r1
    4e78:	00a50600 	adceq	r0, r5, r0, lsl #12
    4e7c:	51030000 	mrspl	r0, (UNDEF: 3)
    4e80:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    4e84:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    4e88:	b6050000 	strlt	r0, [r5], -r0
    4e8c:	03000000 	movweq	r0, #0
    4e90:	000002a6 	andeq	r0, r0, r6, lsr #5
    4e94:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    4e98:	07000000 	streq	r0, [r0, -r0]
    4e9c:	09320408 	ldmdbeq	r2!, {r3, sl}
    4ea0:	00000161 	andeq	r0, r0, r1, ror #2
    4ea4:	0002c108 	andeq	ip, r2, r8, lsl #2
    4ea8:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    4eac:	000000a5 	andeq	r0, r0, r5, lsr #1
    4eb0:	00070101 	andeq	r0, r7, r1, lsl #2
    4eb4:	0000a408 	andeq	sl, r0, r8, lsl #8
    4eb8:	03350400 	teqeq	r5, #0, 8
    4ebc:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ec0:	00060101 	andeq	r0, r6, r1, lsl #2
    4ec4:	00028f08 	andeq	r8, r2, r8, lsl #30
    4ec8:	03360400 	teqeq	r6, #0, 8
    4ecc:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ed0:	00050101 	andeq	r0, r5, r1, lsl #2
    4ed4:	00042b08 	andeq	r2, r4, r8, lsl #22
    4ed8:	03370400 	teqeq	r7, #0, 8
    4edc:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ee0:	00040101 	andeq	r0, r4, r1, lsl #2
    4ee4:	00042408 	andeq	r2, r4, r8, lsl #8
    4ee8:	03380400 	teqeq	r8, #0, 8
    4eec:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ef0:	00000401 	andeq	r0, r0, r1, lsl #8
    4ef4:	00041509 	andeq	r1, r4, r9, lsl #10
    4ef8:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    4efc:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f00:	004c0901 	subeq	r0, ip, r1, lsl #18
    4f04:	3c040000 	stccc	0, cr0, [r4], {-0}
    4f08:	0000a503 	andeq	sl, r0, r3, lsl #10
    4f0c:	79090200 	stmdbvc	r9, {r9}
    4f10:	04000000 	streq	r0, [r0], #-0
    4f14:	00a5033d 	adceq	r0, r5, sp, lsr r3
    4f18:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4f1c:	00000161 	andeq	r0, r0, r1, ror #2
    4f20:	b6083f04 	strlt	r3, [r8], -r4, lsl #30
    4f24:	04000000 	streq	r0, [r0], #-0
    4f28:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    4f2c:	41040000 	mrsmi	r0, (UNDEF: 4)
    4f30:	0000d303 	andeq	sp, r0, r3, lsl #6
    4f34:	01610600 	cmneq	r1, r0, lsl #12
    4f38:	b50a0000 	strlt	r0, [sl, #-0]
    4f3c:	04000002 	streq	r0, [r0], #-2
    4f40:	016d1a43 	cmneq	sp, r3, asr #20
    4f44:	01010000 	mrseq	r0, (UNDEF: 1)
    4f48:	0003210a 	andeq	r2, r3, sl, lsl #2
    4f4c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    4f50:	0000018e 	andeq	r0, r0, lr, lsl #3
    4f54:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4f58:	00000194 	muleq	r0, r4, r1
    4f5c:	be080102 	adflte	f0, f0, f2
    4f60:	05000003 	streq	r0, [r0, #-3]
    4f64:	00000194 	muleq	r0, r4, r1
    4f68:	00032f0a 	andeq	r2, r3, sl, lsl #30
    4f6c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    4f70:	0000018e 	andeq	r0, r0, lr, lsl #3
    4f74:	08070101 	stmdaeq	r7, {r0, r8}
    4f78:	df098f05 	svcle	0x00098f05
    4f7c:	09000001 	stmdbeq	r0, {r0}
    4f80:	000002c8 	andeq	r0, r0, r8, asr #5
    4f84:	670b9005 	strvs	r9, [fp, -r5]
    4f88:	00000000 	andeq	r0, r0, r0
    4f8c:	00062d09 	andeq	r2, r6, r9, lsl #26
    4f90:	08910500 	ldmeq	r1, {r8, sl}
    4f94:	0000008f 	andeq	r0, r0, pc, lsl #1
    4f98:	049c0904 	ldreq	r0, [ip], #2308	; 0x904
    4f9c:	92050000 	andls	r0, r5, #0
    4fa0:	0000b110 	andeq	fp, r0, r0, lsl r1
    4fa4:	03000600 	movweq	r0, #1536	; 0x600
    4fa8:	00000432 	andeq	r0, r0, r2, lsr r4
    4fac:	ae039305 	cdpge	3, 0, cr9, cr3, cr5, {0}
    4fb0:	0c000001 	stceq	0, cr0, [r0], {1}
    4fb4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4fb8:	000001f6 	strdeq	r0, [r0], -r6
    4fbc:	420a000d 	andmi	r0, sl, #13
    4fc0:	05000000 	streq	r0, [r0, #-0]
    4fc4:	01eb0f99 	strexheq	r0, r9, [fp]
    4fc8:	01010000 	mrseq	r0, (UNDEF: 1)
    4fcc:	91060107 	tstls	r6, r7, lsl #2
    4fd0:	00022e09 	andeq	r2, r2, r9, lsl #28
    4fd4:	048f0800 	streq	r0, [pc], #2048	; 4fdc <__exidx_end+0x2168>
    4fd8:	93060000 	movwls	r0, #24576	; 0x6000
    4fdc:	0000a507 	andeq	sl, r0, r7, lsl #10
    4fe0:	01070100 	mrseq	r0, (UNDEF: 23)
    4fe4:	003d0800 	eorseq	r0, sp, r0, lsl #16
    4fe8:	94060000 	strls	r0, [r6], #-0
    4fec:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ff0:	00010100 	andeq	r0, r1, r0, lsl #2
    4ff4:	86030000 	strhi	r0, [r3], -r0
    4ff8:	06000002 	streq	r0, [r0], -r2
    4ffc:	02040396 	andeq	r0, r4, #1476395010	; 0x58000002
    5000:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5004:	0c000002 	stceq	0, cr0, [r0], {2}
    5008:	0000023a 	andeq	r0, r0, sl, lsr r2
    500c:	0000024a 	andeq	r0, r0, sl, asr #4
    5010:	3f05000d 	svccc	0x0005000d
    5014:	0a000002 	beq	5024 <__exidx_end+0x21b0>
    5018:	000002eb 	andeq	r0, r0, fp, ror #5
    501c:	4a179c06 	bmi	5ec03c <__ccfg+0x5cc094>
    5020:	01000002 	tsteq	r0, r2
    5024:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5028:	02680000 	rsbeq	r0, r8, #0
    502c:	000d0000 	andeq	r0, sp, r0
    5030:	00025d05 	andeq	r5, r2, r5, lsl #26
    5034:	03a70a00 			; <UNDEFINED> instruction: 0x03a70a00
    5038:	06070000 	streq	r0, [r7], -r0
    503c:	00026813 	andeq	r6, r2, r3, lsl r8
    5040:	0a010100 	beq	45448 <__ccfg+0x254a0>
    5044:	00000141 	andeq	r0, r0, r1, asr #2
    5048:	b60ec305 	strlt	ip, [lr], -r5, lsl #6
    504c:	01000000 	mrseq	r0, (UNDEF: 0)
    5050:	04a90e01 	strteq	r0, [r9], #3585	; 0xe01
    5054:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    5058:	02961001 	addseq	r1, r6, #1
    505c:	040b0000 	streq	r0, [fp], #-0
    5060:	0000029c 	muleq	r0, ip, r2
    5064:	02a8010f 	adceq	r0, r8, #-1073741821	; 0xc0000003
    5068:	8f100000 	svchi	0x00100000
    506c:	00000000 	andeq	r0, r0, r0
    5070:	00019b0c 	andeq	r9, r1, ip, lsl #22
    5074:	0002b300 	andeq	fp, r2, r0, lsl #6
    5078:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    507c:	000002a8 	andeq	r0, r0, r8, lsr #5
    5080:	00046411 	andeq	r6, r4, r1, lsl r4
    5084:	017f0800 	cmneq	pc, r0, lsl #16
    5088:	0002b316 	andeq	fp, r2, r6, lsl r3
    508c:	11010100 	mrsne	r0, (UNDEF: 17)
    5090:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    5094:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    5098:	000000c2 	andeq	r0, r0, r2, asr #1
    509c:	94110101 	ldrls	r0, [r1], #-257	; 0xfffffeff
    50a0:	08000004 	stmdaeq	r0, {r2}
    50a4:	b60e02d8 			; <UNDEFINED> instruction: 0xb60e02d8
    50a8:	01000000 	mrseq	r0, (UNDEF: 0)
    50ac:	08081201 	stmdaeq	r8, {r0, r9, ip}
    50b0:	0c090303 	stceq	3, cr0, [r9], {3}
    50b4:	13000003 	movwne	r0, #3
    50b8:	00002234 	andeq	r2, r0, r4, lsr r2
    50bc:	07030708 	streq	r0, [r3, -r8, lsl #14]
    50c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    50c4:	057f1300 	ldrbeq	r1, [pc, #-768]!	; 4dcc <__exidx_end+0x1f58>
    50c8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    50cc:	00c70803 	sbceq	r0, r7, r3, lsl #16
    50d0:	00040000 	andeq	r0, r4, r0
    50d4:	0002660e 	andeq	r6, r2, lr, lsl #12
    50d8:	03090800 	movweq	r0, #38912	; 0x9800
    50dc:	0002e503 	andeq	lr, r2, r3, lsl #10
    50e0:	04b81400 	ldrteq	r1, [r8], #1024	; 0x400
    50e4:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    50e8:	7c08030b 	stcvc	3, cr0, [r8], {11}
    50ec:	13000003 	movwne	r0, #3
    50f0:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    50f4:	08031408 	stmdaeq	r3, {r3, sl, ip}
    50f8:	0000008f 	andeq	r0, r0, pc, lsl #1
    50fc:	02d21300 	sbcseq	r1, r2, #0, 6
    5100:	15080000 	strne	r0, [r8, #-0]
    5104:	008f0803 	addeq	r0, pc, r3, lsl #16
    5108:	13020000 	movwne	r0, #8192	; 0x2000
    510c:	000004ac 	andeq	r0, r0, ip, lsr #9
    5110:	0b031608 	bleq	ca938 <__ccfg+0xaa990>
    5114:	00000289 	andeq	r0, r0, r9, lsl #5
    5118:	0f7f1304 	svceq	0x007f1304
    511c:	17080000 	strne	r0, [r8, -r0]
    5120:	00c70903 	sbceq	r0, r7, r3, lsl #18
    5124:	13080000 	movwne	r0, #32768	; 0x8000
    5128:	0000045d 	andeq	r0, r0, sp, asr r4
    512c:	0f031808 	svceq	0x00031808
    5130:	0000037c 	andeq	r0, r0, ip, ror r3
    5134:	02cd130c 	sbceq	r1, sp, #12, 6	; 0x30000000
    5138:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    513c:	038c1503 	orreq	r1, ip, #12582912	; 0xc00000
    5140:	002c0000 	eoreq	r0, ip, r0
    5144:	00030c0c 	andeq	r0, r3, ip, lsl #24
    5148:	00038c00 	andeq	r8, r3, r0, lsl #24
    514c:	00881500 	addeq	r1, r8, r0, lsl #10
    5150:	00030000 	andeq	r0, r3, r0
    5154:	0319040b 	tsteq	r9, #184549376	; 0xb000000
    5158:	c30e0000 	movwgt	r0, #57344	; 0xe000
    515c:	08000004 	stmdaeq	r0, {r2}
    5160:	191b031c 	ldmdbne	fp, {r2, r3, r4, r8, r9}
    5164:	11000003 	tstne	r0, r3
    5168:	00000395 	muleq	r0, r5, r3
    516c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    5170:	000003ae 	andeq	r0, r0, lr, lsr #7
    5174:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5178:	00000392 	muleq	r0, r2, r3
    517c:	0004f10a 	andeq	pc, r4, sl, lsl #2
    5180:	131d0900 	tstne	sp, #0, 18
    5184:	0000008f 	andeq	r0, r0, pc, lsl #1
    5188:	5b0a0101 	blpl	285594 <__ccfg+0x2655ec>
    518c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    5190:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    5194:	01010000 	mrseq	r0, (UNDEF: 1)
    5198:	0008eb0a 	andeq	lr, r8, sl, lsl #22
    519c:	241e0900 	ldrcs	r0, [lr], #-2304	; 0xfffff700
    51a0:	000000a0 	andeq	r0, r0, r0, lsr #1
    51a4:	1a0a0101 	bne	2855b0 <__ccfg+0x265608>
    51a8:	09000006 	stmdbeq	r0, {r1, r2}
    51ac:	03ae1422 			; <UNDEFINED> instruction: 0x03ae1422
    51b0:	01010000 	mrseq	r0, (UNDEF: 1)
    51b4:	00128416 	andseq	r8, r2, r6, lsl r4
    51b8:	0f080100 	svceq	0x00080100
    51bc:	00000296 	muleq	r0, r6, r2
    51c0:	00000305 	andeq	r0, r0, r5, lsl #6
    51c4:	d1160000 	tstle	r6, r0
    51c8:	01000012 	tsteq	r0, r2, lsl r0
    51cc:	008f0d09 	addeq	r0, pc, r9, lsl #26
    51d0:	03050000 	movweq	r0, #20480	; 0x5000
    51d4:	00000000 	andeq	r0, r0, r0
    51d8:	00026d17 	andeq	r6, r2, r7, lsl sp
    51dc:	0c0a0100 	stfeqs	f0, [sl], {-0}
    51e0:	2e700305 	cdpcs	3, 7, cr0, cr0, cr5, {0}
    51e4:	01180000 	tsteq	r8, r0
    51e8:	000012e6 	andeq	r1, r0, r6, ror #5
    51ec:	01065801 	tsteq	r6, r1, lsl #16
	...
    51f8:	04479c01 	strbeq	r9, [r7], #-3073	; 0xfffff3ff
    51fc:	61190000 	tstvs	r9, r0
    5200:	01007463 	tsteq	r0, r3, ror #8
    5204:	02961d58 	addseq	r1, r6, #88, 26	; 0x1600
    5208:	1fcf0000 	svcne	0x00cf0000
    520c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5210:	0012d901 	andseq	sp, r2, r1, lsl #18
    5214:	011c0100 	tsteq	ip, r0, lsl #2
    5218:	00000001 	andeq	r0, r0, r1
    521c:	00000000 	andeq	r0, r0, r0
    5220:	de9c0100 	fmllee	f0, f4, f0
    5224:	1a000004 	bne	523c <__exidx_end+0x23c8>
    5228:	000000cb 	andeq	r0, r0, fp, asr #1
    522c:	8f011c01 	svchi	0x00011c01
    5230:	0b000000 	bleq	5238 <__exidx_end+0x23c4>
    5234:	1b000020 	blne	52bc <__exidx_end+0x2448>
    5238:	0000127f 	andeq	r1, r0, pc, ror r2
    523c:	00012101 	andeq	r2, r1, r1, lsl #2
    5240:	1b000000 	blne	5248 <__exidx_end+0x23d4>
    5244:	0000128c 	andeq	r1, r0, ip, lsl #5
    5248:	00013001 	andeq	r3, r1, r1
    524c:	1b000000 	blne	5254 <__exidx_end+0x23e0>
    5250:	000013e3 	andeq	r1, r0, r3, ror #7
    5254:	00013701 	andeq	r3, r1, r1, lsl #14
    5258:	1c000000 	stcne	0, cr0, [r0], {-0}
    525c:	000004de 	ldrdeq	r0, [r0], -lr
    5260:	00000000 	andeq	r0, r0, r0
    5264:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    5268:	ad072b01 	vstrge	d2, [r7, #-4]
    526c:	1d000004 	stcne	0, cr0, [r0, #-16]
    5270:	000004ec 	andeq	r0, r0, ip, ror #9
    5274:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    5278:	00000000 	andeq	r0, r0, r0
    527c:	09e00000 	stmibeq	r0!, {}^	; <UNPREDICTABLE>
    5280:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5284:	0004c707 	andeq	ip, r4, r7, lsl #14
    5288:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    528c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5290:	000004de 	ldrdeq	r0, [r0], -lr
    5294:	00000000 	andeq	r0, r0, r0
    5298:	000009f8 	strdeq	r0, [r0], -r8
    529c:	1d074a01 	vstrne	s8, [r7, #-4]
    52a0:	000004ec 	andeq	r0, r0, ip, ror #9
    52a4:	091f0000 	ldmdbeq	pc, {}	; <UNPREDICTABLE>
    52a8:	02000012 	andeq	r0, r0, #18
    52ac:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    52b0:	03000000 	movweq	r0, #0
    52b4:	00016820 	andeq	r6, r1, r0, lsr #16
    52b8:	18a40200 	stmiane	r4!, {r9}
    52bc:	00000067 	andeq	r0, r0, r7, rrx
    52c0:	0aa70000 	beq	fe9c52c8 <_estack+0xde9c02c8>
    52c4:	00030000 	andeq	r0, r3, r0
    52c8:	000015c3 	andeq	r1, r0, r3, asr #11
    52cc:	01720104 	cmneq	r2, r4, lsl #2
    52d0:	710c0000 	mrsvc	r0, (UNDEF: 12)
    52d4:	d3000013 	movwle	r0, #19
    52d8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    52dc:	0000000b 	andeq	r0, r0, fp
    52e0:	bc000000 	stclt	0, cr0, [r0], {-0}
    52e4:	0200003e 	andeq	r0, r0, #62	; 0x3e
    52e8:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    52ec:	02020000 	andeq	r0, r2, #0
    52f0:	0003f105 	andeq	pc, r3, r5, lsl #2
    52f4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    52f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    52fc:	ab050802 	blge	14730c <__ccfg+0x127364>
    5300:	03000000 	movweq	r0, #0
    5304:	0000223c 	andeq	r2, r0, ip, lsr r2
    5308:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    530c:	02000000 	andeq	r0, r0, #0
    5310:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    5314:	2a030000 	bcs	c531c <__ccfg+0xa5374>
    5318:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    531c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5320:	02020000 	andeq	r0, r2, #0
    5324:	00027307 	andeq	r7, r2, r7, lsl #6
    5328:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    532c:	34040000 	strcc	r0, [r4], #-0
    5330:	00007319 	andeq	r7, r0, r9, lsl r3
    5334:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5338:	00000085 	andeq	r0, r0, r5, lsl #1
    533c:	80070802 	andhi	r0, r7, r2, lsl #16
    5340:	04000000 	streq	r0, [r0], #-0
    5344:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5348:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    534c:	00008a07 	andeq	r8, r0, r7, lsl #20
    5350:	041c0300 	ldreq	r0, [ip], #-768	; 0xfffffd00
    5354:	26050000 	strcs	r0, [r5], -r0
    5358:	00004112 	andeq	r4, r0, r2, lsl r1
    535c:	16000300 	strne	r0, [r0], -r0, lsl #6
    5360:	27050000 	strcs	r0, [r5, -r0]
    5364:	00005412 	andeq	r5, r0, r2, lsl r4
    5368:	009b0500 	addseq	r0, fp, r0, lsl #10
    536c:	9b060000 	blls	185374 <__ccfg+0x1653cc>
    5370:	03000000 	movweq	r0, #0
    5374:	000013f8 	strdeq	r1, [r0], -r8
    5378:	41122b05 	tstmi	r2, r5, lsl #22
    537c:	06000000 	streq	r0, [r0], -r0
    5380:	000000b1 	strheq	r0, [r0], -r1
    5384:	0000b105 	andeq	fp, r0, r5, lsl #2
    5388:	16510300 	ldrbne	r0, [r1], -r0, lsl #6
    538c:	2c050000 	stccs	0, cr0, [r5], {-0}
    5390:	00006712 	andeq	r6, r0, r2, lsl r7
    5394:	00c70500 	sbceq	r0, r7, r0, lsl #10
    5398:	a6030000 	strge	r0, [r3], -r0
    539c:	05000002 	streq	r0, [r0, #-2]
    53a0:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    53a4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    53a8:	72093205 	andvc	r3, r9, #1342177280	; 0x50000000
    53ac:	08000001 	stmdaeq	r0, {r0}
    53b0:	000002c1 	andeq	r0, r0, r1, asr #5
    53b4:	b1073405 	tstlt	r7, r5, lsl #8
    53b8:	01000000 	mrseq	r0, (UNDEF: 0)
    53bc:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    53c0:	000000a4 	andeq	r0, r0, r4, lsr #1
    53c4:	b1033505 	tstlt	r3, r5, lsl #10
    53c8:	01000000 	mrseq	r0, (UNDEF: 0)
    53cc:	08000601 	stmdaeq	r0, {r0, r9, sl}
    53d0:	0000028f 	andeq	r0, r0, pc, lsl #5
    53d4:	b1033605 	tstlt	r3, r5, lsl #12
    53d8:	01000000 	mrseq	r0, (UNDEF: 0)
    53dc:	08000501 	stmdaeq	r0, {r0, r8, sl}
    53e0:	0000042b 	andeq	r0, r0, fp, lsr #8
    53e4:	b1033705 	tstlt	r3, r5, lsl #14
    53e8:	01000000 	mrseq	r0, (UNDEF: 0)
    53ec:	08000401 	stmdaeq	r0, {r0, sl}
    53f0:	00000424 	andeq	r0, r0, r4, lsr #8
    53f4:	b1033805 	tstlt	r3, r5, lsl #16
    53f8:	01000000 	mrseq	r0, (UNDEF: 0)
    53fc:	09000004 	stmdbeq	r0, {r2}
    5400:	00000415 	andeq	r0, r0, r5, lsl r4
    5404:	b1073a05 	tstlt	r7, r5, lsl #20
    5408:	01000000 	mrseq	r0, (UNDEF: 0)
    540c:	00004c09 	andeq	r4, r0, r9, lsl #24
    5410:	033c0500 	teqeq	ip, #0, 10
    5414:	000000b1 	strheq	r0, [r0], -r1
    5418:	00790902 	rsbseq	r0, r9, r2, lsl #18
    541c:	3d050000 	stccc	0, cr0, [r5, #-0]
    5420:	0000b103 	andeq	fp, r0, r3, lsl #2
    5424:	61090300 	mrsvs	r0, (UNDEF: 57)
    5428:	05000001 	streq	r0, [r0, #-1]
    542c:	00c7083f 	sbceq	r0, r7, pc, lsr r8
    5430:	00040000 	andeq	r0, r4, r0
    5434:	00045403 	andeq	r5, r4, r3, lsl #8
    5438:	03410500 	movteq	r0, #5376	; 0x1500
    543c:	000000e4 	andeq	r0, r0, r4, ror #1
    5440:	00017206 	andeq	r7, r1, r6, lsl #4
    5444:	02b50a00 	adcseq	r0, r5, #0, 20
    5448:	43050000 	movwmi	r0, #20480	; 0x5000
    544c:	00017e1a 	andeq	r7, r1, sl, lsl lr
    5450:	0a010100 	beq	45858 <__ccfg+0x258b0>
    5454:	00000321 	andeq	r0, r0, r1, lsr #6
    5458:	9f0e4505 	svcls	0x000e4505
    545c:	01000001 	tsteq	r0, r1
    5460:	a5040b01 	strge	r0, [r4, #-2817]	; 0xfffff4ff
    5464:	02000001 	andeq	r0, r0, #1
    5468:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    546c:	a5050000 	strge	r0, [r5, #-0]
    5470:	0a000001 	beq	547c <__exidx_end+0x2608>
    5474:	0000032f 	andeq	r0, r0, pc, lsr #6
    5478:	9f1e4505 	svcls	0x001e4505
    547c:	01000001 	tsteq	r0, r1
    5480:	06080701 	streq	r0, [r8], -r1, lsl #14
    5484:	01f0098f 	mvnseq	r0, pc, lsl #19
    5488:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    548c:	06000002 	streq	r0, [r0], -r2
    5490:	00670b90 	mlseq	r7, r0, fp, r0
    5494:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5498:	0000062d 	andeq	r0, r0, sp, lsr #12
    549c:	9b089106 	blls	2298bc <__ccfg+0x209914>
    54a0:	04000000 	streq	r0, [r0], #-0
    54a4:	00049c09 	andeq	r9, r4, r9, lsl #24
    54a8:	10920600 	addsne	r0, r2, r0, lsl #12
    54ac:	000000bd 	strheq	r0, [r0], -sp
    54b0:	32030006 	andcc	r0, r3, #6
    54b4:	06000004 	streq	r0, [r0], -r4
    54b8:	01bf0393 			; <UNDEFINED> instruction: 0x01bf0393
    54bc:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    54c0:	07000001 	streq	r0, [r0, -r1]
    54c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    54c8:	00420a00 	subeq	r0, r2, r0, lsl #20
    54cc:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    54d0:	0001fc0f 	andeq	pc, r1, pc, lsl #24
    54d4:	0b010100 	bleq	458dc <__ccfg+0x25934>
    54d8:	0000c204 	andeq	ip, r0, r4, lsl #4
    54dc:	07010700 	streq	r0, [r1, -r0, lsl #14]
    54e0:	02450991 	subeq	r0, r5, #2375680	; 0x244000
    54e4:	8f080000 	svchi	0x00080000
    54e8:	07000004 	streq	r0, [r0, -r4]
    54ec:	00b10793 	umlalseq	r0, r1, r3, r7
    54f0:	07010000 	streq	r0, [r1, -r0]
    54f4:	3d080001 	stccc	0, cr0, [r8, #-4]
    54f8:	07000000 	streq	r0, [r0, -r0]
    54fc:	00b10394 	umlalseq	r0, r1, r4, r3
    5500:	01010000 	mrseq	r0, (UNDEF: 1)
    5504:	03000000 	movweq	r0, #0
    5508:	00000286 	andeq	r0, r0, r6, lsl #5
    550c:	1b039607 	blne	ead30 <__ccfg+0xcad88>
    5510:	05000002 	streq	r0, [r0, #-2]
    5514:	00000245 	andeq	r0, r0, r5, asr #4
    5518:	0002510c 	andeq	r5, r2, ip, lsl #2
    551c:	00026100 	andeq	r6, r2, r0, lsl #2
    5520:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5524:	00000256 	andeq	r0, r0, r6, asr r2
    5528:	0002eb0a 	andeq	lr, r2, sl, lsl #22
    552c:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    5530:	00000261 	andeq	r0, r0, r1, ror #4
    5534:	a70c0101 	strge	r0, [ip, -r1, lsl #2]
    5538:	7f000000 	svcvc	0x00000000
    553c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5540:	02740500 	rsbseq	r0, r4, #0, 10
    5544:	a70a0000 	strge	r0, [sl, -r0]
    5548:	08000003 	stmdaeq	r0, {r0, r1}
    554c:	027f1306 	rsbseq	r1, pc, #402653184	; 0x18000000
    5550:	01010000 	mrseq	r0, (UNDEF: 1)
    5554:	0001410a 	andeq	r4, r1, sl, lsl #2
    5558:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    555c:	000000c7 	andeq	r0, r0, r7, asr #1
    5560:	a90e0101 	stmdbge	lr, {r0, r8}
    5564:	09000004 	stmdbeq	r0, {r2}
    5568:	ad10016e 	ldfges	f0, [r0, #-440]	; 0xfffffe48
    556c:	0b000002 	bleq	557c <__exidx_end+0x2708>
    5570:	0002b304 	andeq	fp, r2, r4, lsl #6
    5574:	bf010f00 	svclt	0x00010f00
    5578:	10000002 	andne	r0, r0, r2
    557c:	0000009b 	muleq	r0, fp, r0
    5580:	01ac0c00 			; <UNDEFINED> instruction: 0x01ac0c00
    5584:	02ca0000 	sbceq	r0, sl, #0
    5588:	000d0000 	andeq	r0, sp, r0
    558c:	0002bf05 	andeq	fp, r2, r5, lsl #30
    5590:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
    5594:	7f090000 	svcvc	0x00090000
    5598:	02ca1601 	sbceq	r1, sl, #1048576	; 0x100000
    559c:	01010000 	mrseq	r0, (UNDEF: 1)
    55a0:	00039f11 	andeq	r9, r3, r1, lsl pc
    55a4:	01820900 	orreq	r0, r2, r0, lsl #18
    55a8:	0000d314 	andeq	sp, r0, r4, lsl r3
    55ac:	11010100 	mrsne	r0, (UNDEF: 17)
    55b0:	00000494 	muleq	r0, r4, r4
    55b4:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    55b8:	000000c7 	andeq	r0, r0, r7, asr #1
    55bc:	08120101 	ldmdaeq	r2, {r0, r8}
    55c0:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    55c4:	00000323 	andeq	r0, r0, r3, lsr #6
    55c8:	00223413 	eoreq	r3, r2, r3, lsl r4
    55cc:	03070900 	movweq	r0, #30976	; 0x7900
    55d0:	00009b07 	andeq	r9, r0, r7, lsl #22
    55d4:	7f130000 	svcvc	0x00130000
    55d8:	09000005 	stmdbeq	r0, {r0, r2}
    55dc:	d8080308 	stmdale	r8, {r3, r8, r9}
    55e0:	04000000 	streq	r0, [r0], #-0
    55e4:	02660e00 	rsbeq	r0, r6, #0, 28
    55e8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    55ec:	02fc0303 	rscseq	r0, ip, #201326592	; 0xc000000
    55f0:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
    55f4:	30000004 	andcc	r0, r0, r4
    55f8:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    55fc:	00000393 	muleq	r0, r3, r3
    5600:	0004b113 	andeq	fp, r4, r3, lsl r1
    5604:	03140900 	tsteq	r4, #0, 18
    5608:	00009b08 	andeq	r9, r0, r8, lsl #22
    560c:	d2130000 	andsle	r0, r3, #0
    5610:	09000002 	stmdbeq	r0, {r1}
    5614:	9b080315 	blls	206270 <__ccfg+0x1e62c8>
    5618:	02000000 	andeq	r0, r0, #0
    561c:	0004ac13 	andeq	sl, r4, r3, lsl ip
    5620:	03160900 	tsteq	r6, #0, 18
    5624:	0002a00b 	andeq	sl, r2, fp
    5628:	7f130400 	svcvc	0x00130400
    562c:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    5630:	d8090317 	stmdale	r9, {r0, r1, r2, r4, r8, r9}
    5634:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5638:	00045d13 	andeq	r5, r4, r3, lsl sp
    563c:	03180900 	tsteq	r8, #0, 18
    5640:	0003930f 	andeq	r9, r3, pc, lsl #6
    5644:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
    5648:	09000002 	stmdbeq	r0, {r1}
    564c:	a3150319 	tstge	r5, #1677721600	; 0x64000000
    5650:	2c000003 	stccs	0, cr0, [r0], {3}
    5654:	03230c00 			; <UNDEFINED> instruction: 0x03230c00
    5658:	03a30000 			; <UNDEFINED> instruction: 0x03a30000
    565c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5660:	03000000 	movweq	r0, #0
    5664:	30040b00 	andcc	r0, r4, r0, lsl #22
    5668:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    566c:	000004c3 	andeq	r0, r0, r3, asr #9
    5670:	1b031c09 	blne	cc69c <__ccfg+0xac6f4>
    5674:	00000330 	andeq	r0, r0, r0, lsr r3
    5678:	00039511 	andeq	r9, r3, r1, lsl r5
    567c:	031e0900 	tsteq	lr, #0, 18
    5680:	0003c514 	andeq	ip, r3, r4, lsl r5
    5684:	0b010100 	bleq	45a8c <__ccfg+0x25ae4>
    5688:	0003a904 	andeq	sl, r3, r4, lsl #18
    568c:	04f10a00 	ldrbteq	r0, [r1], #2560	; 0xa00
    5690:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    5694:	00009b13 	andeq	r9, r0, r3, lsl fp
    5698:	0a010100 	beq	45aa0 <__ccfg+0x25af8>
    569c:	0000075b 	andeq	r0, r0, fp, asr r7
    56a0:	ac1a1e0a 	ldcge	14, cr1, [sl], {10}
    56a4:	01000000 	mrseq	r0, (UNDEF: 0)
    56a8:	08eb0a01 	stmiaeq	fp!, {r0, r9, fp}^
    56ac:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    56b0:	0000ac24 	andeq	sl, r0, r4, lsr #24
    56b4:	0a010100 	beq	45abc <__ccfg+0x25b14>
    56b8:	0000061a 	andeq	r0, r0, sl, lsl r6
    56bc:	c514220a 	ldrgt	r2, [r4, #-522]	; 0xfffffdf6
    56c0:	01000003 	tsteq	r0, r3
    56c4:	039a1601 	orrseq	r1, sl, #1048576	; 0x100000
    56c8:	0f010000 	svceq	0x00010000
    56cc:	0000c70f 	andeq	ip, r0, pc, lsl #14
    56d0:	00030500 	andeq	r0, r3, r0, lsl #10
    56d4:	16000000 	strne	r0, [r0], -r0
    56d8:	00001349 	andeq	r1, r0, r9, asr #6
    56dc:	c7150f01 	ldrgt	r0, [r5, -r1, lsl #30]
    56e0:	05000000 	streq	r0, [r0, #-0]
    56e4:	00000003 	andeq	r0, r0, r3
    56e8:	13cf1600 	bicne	r1, pc, #0, 12
    56ec:	10010000 	andne	r0, r1, r0
    56f0:	00021514 	andeq	r1, r2, r4, lsl r5
    56f4:	00030500 	andeq	r0, r3, r0, lsl #10
    56f8:	16000000 	strne	r0, [r0], -r0
    56fc:	0000132f 	andeq	r1, r0, pc, lsr #6
    5700:	b10d1201 	tstlt	sp, r1, lsl #4
    5704:	05000000 	streq	r0, [r0, #-0]
    5708:	00006003 	andeq	r6, r0, r3
    570c:	13c31620 	bicne	r1, r3, #32, 12	; 0x2000000
    5710:	13010000 	movwne	r0, #4096	; 0x1000
    5714:	0000b103 	andeq	fp, r0, r3, lsl #2
    5718:	61030500 	tstvs	r3, r0, lsl #10
    571c:	16200000 	strtne	r0, [r0], -r0
    5720:	00000c25 	andeq	r0, r0, r5, lsr #24
    5724:	9b0d1501 	blls	34ab30 <__ccfg+0x32ab88>
    5728:	05000000 	streq	r0, [r0, #-0]
    572c:	00000003 	andeq	r0, r0, r3
    5730:	fb011700 	blx	4b33a <__ccfg+0x2b392>
    5734:	03000012 	movweq	r0, #18
    5738:	00000613 	andeq	r0, r0, r3, lsl r6
    573c:	00000000 	andeq	r0, r0, r0
    5740:	9c010000 	stcls	0, cr0, [r1], {-0}
    5744:	13d40118 	bicsne	r0, r4, #24, 2
    5748:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    574c:	00c70107 	sbceq	r0, r7, r7, lsl #2
	...
    5758:	9c010000 	stcls	0, cr0, [r1], {-0}
    575c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    5760:	00726519 	rsbseq	r6, r2, r9, lsl r5
    5764:	bc190803 	ldclt	8, cr0, [r9], {3}
    5768:	3f000004 	svccc	0x00000004
    576c:	1a000020 	bne	57f4 <__exidx_end+0x2980>
    5770:	00757265 	rsbseq	r7, r5, r5, ror #4
    5774:	c2240803 	eorgt	r0, r4, #196608	; 0x30000
    5778:	01000004 	tsteq	r0, r4
    577c:	040b0051 	streq	r0, [fp], #-81	; 0xffffffaf
    5780:	0000008f 	andeq	r0, r0, pc, lsl #1
    5784:	00c7040b 	sbceq	r0, r7, fp, lsl #8
    5788:	011b0000 	tsteq	fp, r0
    578c:	00001357 	andeq	r1, r0, r7, asr r3
    5790:	06016001 	streq	r6, [r1], -r1
    5794:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    57a0:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    57a4:	1c000004 	stcne	0, cr0, [r0], {4}
    57a8:	01007473 	tsteq	r0, r3, ror r4
    57ac:	9b140160 	blls	505d34 <__ccfg+0x4e5d8c>
    57b0:	52000000 	andpl	r0, r0, #0
    57b4:	00000020 	andeq	r0, r0, r0, lsr #32
    57b8:	134e011d 	movtne	r0, #57629	; 0xe11d
    57bc:	5b010000 	blpl	457c4 <__ccfg+0x2581c>
    57c0:	00000601 	andeq	r0, r0, r1, lsl #12
    57c4:	00000000 	andeq	r0, r0, r0
    57c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    57cc:	1326011b 			; <UNDEFINED> instruction: 0x1326011b
    57d0:	21010000 	mrscs	r0, (UNDEF: 1)
    57d4:	9b010601 	blls	46fe0 <__ccfg+0x27038>
	...
    57e0:	01000000 	mrseq	r0, (UNDEF: 0)
    57e4:	0005c09c 	muleq	r5, ip, r0
    57e8:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    57ec:	01210100 			; <UNDEFINED> instruction: 0x01210100
    57f0:	00009b15 	andeq	r9, r0, r5, lsl fp
    57f4:	00206500 	eoreq	r6, r0, r0, lsl #10
    57f8:	00611c00 	rsbeq	r1, r1, r0, lsl #24
    57fc:	1f012101 	svcne	0x00012101
    5800:	000000c7 	andeq	r0, r0, r7, asr #1
    5804:	00002078 	andeq	r2, r0, r8, ror r0
    5808:	0100731c 	tsteq	r0, ip, lsl r3
    580c:	152e0121 	strne	r0, [lr, #-289]!	; 0xfffffedf
    5810:	96000002 	strls	r0, [r0], -r2
    5814:	1c000020 	stcne	0, cr0, [r0], {32}
    5818:	006e656c 	rsbeq	r6, lr, ip, ror #10
    581c:	36012101 	strcc	r2, [r1], -r1, lsl #2
    5820:	0000009b 	muleq	r0, fp, r0
    5824:	000020a9 	andeq	r2, r0, r9, lsr #1
    5828:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    582c:	07012301 	streq	r2, [r1, -r1, lsl #6]
    5830:	0000009b 	muleq	r0, fp, r0
    5834:	000020bc 	strheq	r2, [r0], -ip
    5838:	00133d1f 	andseq	r3, r3, pc, lsl sp
    583c:	01320100 	teqeq	r2, r0, lsl #2
    5840:	00000001 	andeq	r0, r0, r1
    5844:	09f62000 	ldmibeq	r6!, {sp}^
    5848:	00000000 	andeq	r0, r0, r0
    584c:	0ba00000 	bleq	fe805854 <_estack+0xde800854>
    5850:	43010000 	movwmi	r0, #4096	; 0x1000
    5854:	05a30301 	streq	r0, [r3, #769]!	; 0x301
    5858:	12210000 	eorne	r0, r1, #0
    585c:	2100000a 	tstcs	r0, sl
    5860:	00000a05 	andeq	r0, r0, r5, lsl #20
    5864:	09f62200 	ldmibeq	r6!, {r9, sp}^
	...
    5870:	50010000 	andpl	r0, r1, r0
    5874:	12210301 	eorne	r0, r1, #67108864	; 0x4000000
    5878:	2100000a 	tstcs	r0, sl
    587c:	00000a05 	andeq	r0, r0, r5, lsl #20
    5880:	01180000 	tsteq	r8, r0
    5884:	0000131d 	andeq	r1, r0, sp, lsl r3
    5888:	0106cb01 	tsteq	r6, r1, lsl #22
    588c:	0000009b 	muleq	r0, fp, r0
	...
    5898:	06819c01 	streq	r9, [r1], r1, lsl #24
    589c:	73190000 	tstvc	r9, #0
    58a0:	cb010074 	blgt	45a78 <__ccfg+0x25ad0>
    58a4:	00009b15 	andeq	r9, r0, r5, lsl fp
    58a8:	0020e500 	eoreq	lr, r0, r0, lsl #10
    58ac:	135f2300 	cmpne	pc, #0, 6
    58b0:	cb010000 	blgt	458b8 <__ccfg+0x25910>
    58b4:	0000c71f 	andeq	ip, r0, pc, lsl r7
    58b8:	00210300 	eoreq	r0, r1, r0, lsl #6
    58bc:	13092300 	movwne	r2, #37632	; 0x9300
    58c0:	cb010000 	blgt	458c8 <__ccfg+0x25920>
    58c4:	0000c72b 	andeq	ip, r0, fp, lsr #14
    58c8:	00212c00 	eoreq	r2, r1, r0, lsl #24
    58cc:	12f52400 	rscsne	r2, r5, #0, 8
    58d0:	e6010000 	str	r0, [r1], -r0
    58d4:	00000001 	andeq	r0, r0, r1
    58d8:	13e22400 	mvnne	r2, #0, 8
    58dc:	ea010000 	b	458e4 <__ccfg+0x2593c>
    58e0:	00000001 	andeq	r0, r0, r1
    58e4:	085e2500 	ldmdaeq	lr, {r8, sl, sp}^
    58e8:	00000000 	andeq	r0, r0, r0
    58ec:	0b700000 	bleq	1c058f4 <__ccfg+0x1be594c>
    58f0:	fc010000 	stc2	0, cr0, [r1], {-0}
    58f4:	08782604 	ldmdaeq	r8!, {r2, r9, sl, sp}^
    58f8:	214a0000 	mrscs	r0, (UNDEF: 74)
    58fc:	6c260000 	stcvs	0, cr0, [r6], #-0
    5900:	5d000008 	stcpl	0, cr0, [r0, #-32]	; 0xffffffe0
    5904:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    5908:	000009f6 	strdeq	r0, [r0], -r6
    590c:	00000000 	andeq	r0, r0, r0
    5910:	00000b88 	andeq	r0, r0, r8, lsl #23
    5914:	64024301 	strvs	r4, [r2], #-769	; 0xfffffcff
    5918:	21000006 	tstcs	r0, r6
    591c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5920:	000a0521 	andeq	r0, sl, r1, lsr #10
    5924:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5928:	00000009 	andeq	r0, r0, r9
    592c:	00000000 	andeq	r0, r0, r0
    5930:	01000000 	mrseq	r0, (UNDEF: 0)
    5934:	12210248 	eorne	r0, r1, #72, 4	; 0x80000004
    5938:	2100000a 	tstcs	r0, sl
    593c:	00000a05 	andeq	r0, r0, r5, lsl #20
    5940:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5944:	00136401 	andseq	r6, r3, r1, lsl #8
    5948:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
    594c:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    5958:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    595c:	19000007 	stmdbne	r0, {r0, r1, r2}
    5960:	b0010061 	andlt	r0, r1, r1, rrx
    5964:	0000c715 	andeq	ip, r0, r5, lsl r7
    5968:	00217000 	eoreq	r7, r1, r0
    596c:	00731900 	rsbseq	r1, r3, r0, lsl #18
    5970:	041eb001 	ldreq	fp, [lr], #-1
    5974:	99000007 	stmdbls	r0, {r0, r1, r2}
    5978:	19000021 	stmdbne	r0, {r0, r5}
    597c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5980:	9b26b001 	blls	9b198c <__ccfg+0x9919e4>
    5984:	cd000000 	stcgt	0, cr0, [r0, #-0]
    5988:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    598c:	000009f6 	strdeq	r0, [r0], -r6
    5990:	00000000 	andeq	r0, r0, r0
    5994:	00000b58 	andeq	r0, r0, r8, asr fp
    5998:	e802ba01 	stmda	r2, {r0, r9, fp, ip, sp, pc}
    599c:	21000006 	tstcs	r0, r6
    59a0:	00000a12 	andeq	r0, r0, r2, lsl sl
    59a4:	000a0521 	andeq	r0, sl, r1, lsr #10
    59a8:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    59ac:	00000009 	andeq	r0, r0, r9
    59b0:	00000000 	andeq	r0, r0, r0
    59b4:	01000000 	mrseq	r0, (UNDEF: 0)
    59b8:	122102c4 	eorne	r0, r1, #196, 4	; 0x4000000c
    59bc:	2100000a 	tstcs	r0, sl
    59c0:	00000a05 	andeq	r0, r0, r5, lsl #20
    59c4:	040b0000 	streq	r0, [fp], #-0
    59c8:	000000b1 	strheq	r0, [r0], -r1
    59cc:	13140117 	tstne	r4, #-1073741819	; 0xc0000005
    59d0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    59d4:	00177c06 	andseq	r7, r7, r6, lsl #24
    59d8:	00179000 	andseq	r9, r7, r0
    59dc:	299c0100 	ldmibcs	ip, {r8}
    59e0:	00133501 	andseq	r3, r3, r1, lsl #10
    59e4:	06930100 	ldreq	r0, [r3], r0, lsl #2
    59e8:	0000009b 	muleq	r0, fp, r0
    59ec:	00001768 	andeq	r1, r0, r8, ror #14
    59f0:	0000177c 	andeq	r1, r0, ip, ror r7
    59f4:	dc2a9c01 	stcle	12, cr9, [sl], #-4
    59f8:	01000013 	tsteq	r0, r3, lsl r0
    59fc:	17040d82 	strne	r0, [r4, -r2, lsl #27]
    5a00:	17440000 	strbne	r0, [r4, -r0]
    5a04:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a08:	00000796 	muleq	r0, r6, r7
    5a0c:	00079f28 	andeq	r9, r7, r8, lsr #30
    5a10:	00171e00 	andseq	r1, r7, r0, lsl #28
    5a14:	00173200 	andseq	r3, r7, r0, lsl #4
    5a18:	038a0100 	orreq	r0, sl, #0, 2
    5a1c:	0009f627 	andeq	pc, r9, r7, lsr #12
    5a20:	00171e00 	andseq	r1, r7, r0, lsl #28
    5a24:	000b2800 	andeq	r2, fp, r0, lsl #16
    5a28:	02720100 	rsbseq	r0, r2, #0, 2
    5a2c:	00000779 	andeq	r0, r0, r9, ror r7
    5a30:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a34:	0a052100 	beq	14de3c <__ccfg+0x12de94>
    5a38:	25000000 	strcs	r0, [r0, #-0]
    5a3c:	000009f6 	strdeq	r0, [r0], -r6
    5a40:	0000172a 	andeq	r1, r0, sl, lsr #14
    5a44:	00000b40 	andeq	r0, r0, r0, asr #22
    5a48:	21027401 	tstcs	r2, r1, lsl #8
    5a4c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5a50:	000a0521 	andeq	r0, sl, r1, lsr #10
    5a54:	00000000 	andeq	r0, r0, r0
    5a58:	0013bc2b 	andseq	fp, r3, fp, lsr #24
    5a5c:	0d780100 	ldfeqe	f0, [r8, #-0]
    5a60:	13c92b01 	bicne	r2, r9, #1024	; 0x400
    5a64:	6d010000 	stcvs	0, cr0, [r1, #-0]
    5a68:	e82b010d 	stmda	fp!, {r0, r2, r3, r8}
    5a6c:	01000013 	tsteq	r0, r3, lsl r0
    5a70:	2c010d66 	stccs	13, cr0, [r1], {102}	; 0x66
    5a74:	000013ee 	andeq	r1, r0, lr, ror #7
    5a78:	010d5801 	tsteq	sp, r1, lsl #16
    5a7c:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    5a80:	00001704 	andeq	r1, r0, r4, lsl #14
    5a84:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    5a88:	73190000 	tstvc	r9, #0
    5a8c:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    5a90:	00009b19 	andeq	r9, r0, r9, lsl fp
    5a94:	0021eb00 	eoreq	lr, r1, r0, lsl #22
    5a98:	65641900 	strbvs	r1, [r4, #-2304]!	; 0xfffff700
    5a9c:	5801006c 	stmdapl	r1, {r2, r3, r5, r6}
    5aa0:	00009b22 	andeq	r9, r0, r2, lsr #22
    5aa4:	0021fe00 	eoreq	pc, r1, r0, lsl #28
    5aa8:	08422500 	stmdaeq	r2, {r8, sl, sp}^
    5aac:	16b80000 	ldrtne	r0, [r8], r0
    5ab0:	0ae00000 	beq	ff805ab8 <_estack+0xdf800ab8>
    5ab4:	5c010000 	stcpl	0, cr0, [r1], {-0}
    5ab8:	0ae02d13 	beq	ff810f0c <_estack+0xdf80bf0c>
    5abc:	532e0000 			; <UNDEFINED> instruction: 0x532e0000
    5ac0:	11000008 	tstne	r0, r8
    5ac4:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    5ac8:	000009f6 	strdeq	r0, [r0], -r6
    5acc:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
    5ad0:	00000b00 	andeq	r0, r0, r0, lsl #22
    5ad4:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
    5ad8:	21000008 	tstcs	r0, r8
    5adc:	00000a12 	andeq	r0, r0, r2, lsl sl
    5ae0:	000a0521 	andeq	r0, sl, r1, lsr #10
    5ae4:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5ae8:	d2000009 	andle	r0, r0, #9
    5aec:	d6000016 			; <UNDEFINED> instruction: 0xd6000016
    5af0:	01000016 	tsteq	r0, r6, lsl r0
    5af4:	12210254 	eorne	r0, r1, #84, 4	; 0x40000005
    5af8:	2100000a 	tstcs	r0, sl
    5afc:	00000a05 	andeq	r0, r0, r5, lsl #20
    5b00:	00000000 	andeq	r0, r0, r0
    5b04:	00136c2f 	andseq	r6, r3, pc, lsr #24
    5b08:	0d4b0100 	stfeqe	f0, [fp, #-0]
    5b0c:	000000b1 	strheq	r0, [r0], -r1
    5b10:	00085e01 	andeq	r5, r8, r1, lsl #28
    5b14:	00723000 	rsbseq	r3, r2, r0
    5b18:	b1074f01 	tstlt	r7, r1, lsl #30
    5b1c:	00000000 	andeq	r0, r0, r0
    5b20:	00134331 	andseq	r4, r3, r1, lsr r3
    5b24:	0d410100 	stfeqe	f0, [r1, #-0]
    5b28:	08830101 	stmeq	r3, {r0, r8}
    5b2c:	63320000 	teqvs	r2, #0
    5b30:	0100646d 	tsteq	r0, sp, ror #8
    5b34:	00b11941 	adcseq	r1, r1, r1, asr #18
    5b38:	61320000 	teqvs	r2, r0
    5b3c:	24410100 	strbcs	r0, [r1], #-256	; 0xffffff00
    5b40:	000000c7 	andeq	r0, r0, r7, asr #1
    5b44:	130e2c00 	movwne	r2, #60416	; 0xec00
    5b48:	3a010000 	bcc	45b50 <__ccfg+0x25ba8>
    5b4c:	1698010d 	ldrne	r0, [r8], sp, lsl #2
    5b50:	16b00000 	ldrtne	r0, [r0], r0
    5b54:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b58:	000008e5 	andeq	r0, r0, r5, ror #17
    5b5c:	646d6319 	strbtvs	r6, [sp], #-793	; 0xfffffce7
    5b60:	193a0100 	ldmdbne	sl!, {r8}
    5b64:	000000b1 	strheq	r0, [r0], -r1
    5b68:	00002224 	andeq	r2, r0, r4, lsr #4
    5b6c:	0009f627 	andeq	pc, r9, r7, lsr #12
    5b70:	00169800 	andseq	r9, r6, r0, lsl #16
    5b74:	000ac800 	andeq	ip, sl, r0, lsl #16
    5b78:	023c0100 	eorseq	r0, ip, #0, 2
    5b7c:	000008c9 	andeq	r0, r0, r9, asr #17
    5b80:	000a1221 	andeq	r1, sl, r1, lsr #4
    5b84:	0a052100 	beq	14df8c <__ccfg+0x12dfe4>
    5b88:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5b8c:	000009f6 	strdeq	r0, [r0], -r6
    5b90:	000016a4 	andeq	r1, r0, r4, lsr #13
    5b94:	000016a8 	andeq	r1, r0, r8, lsr #13
    5b98:	21023e01 	tstcs	r2, r1, lsl #28
    5b9c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5ba0:	000a0521 	andeq	r0, sl, r1, lsr #10
    5ba4:	2c000000 	stccs	0, cr0, [r0], {-0}
    5ba8:	000013fd 	strdeq	r1, [r0], -sp
    5bac:	010d2901 	tsteq	sp, r1, lsl #18
    5bb0:	00001668 	andeq	r1, r0, r8, ror #12
    5bb4:	00001698 	muleq	r0, r8, r6
    5bb8:	09799c01 	ldmdbeq	r9!, {r0, sl, fp, ip, pc}^
    5bbc:	62190000 	andsvs	r0, r9, #0
    5bc0:	1c290100 	stfnes	f0, [r9], #-0
    5bc4:	000000b1 	strheq	r0, [r0], -r1
    5bc8:	00002237 	andeq	r2, r0, r7, lsr r2
    5bcc:	01006930 	tsteq	r0, r0, lsr r9
    5bd0:	0081062b 	addeq	r0, r1, fp, lsr #12
    5bd4:	3d270000 	stccc	0, cr0, [r7, #-0]
    5bd8:	7000000a 	andvc	r0, r0, sl
    5bdc:	90000016 	andls	r0, r0, r6, lsl r0
    5be0:	0100000a 	tsteq	r0, sl
    5be4:	092e0332 	stmdbeq	lr!, {r1, r4, r5, r8, r9}
    5be8:	4c210000 	stcmi	0, cr0, [r1], #-0
    5bec:	0000000a 	andeq	r0, r0, sl
    5bf0:	000a3d33 	andeq	r3, sl, r3, lsr sp
    5bf4:	00167c00 	andseq	r7, r6, r0, lsl #24
    5bf8:	00168000 	andseq	r8, r6, r0
    5bfc:	042f0100 	strteq	r0, [pc], #-256	; 5c04 <__exidx_end+0x2d90>
    5c00:	00000948 	andeq	r0, r0, r8, asr #18
    5c04:	000a4c21 	andeq	r4, sl, r1, lsr #24
    5c08:	20330000 	eorscs	r0, r3, r0
    5c0c:	8000000a 	andhi	r0, r0, sl
    5c10:	82000016 	andhi	r0, r0, #22
    5c14:	01000016 	tsteq	r0, r6, lsl r0
    5c18:	09620431 	stmdbeq	r2!, {r0, r4, r5, sl}^
    5c1c:	2f210000 	svccs	0x00210000
    5c20:	0000000a 	andeq	r0, r0, sl
    5c24:	000a2025 	andeq	r2, sl, r5, lsr #32
    5c28:	00168800 	andseq	r8, r6, r0, lsl #16
    5c2c:	000ab000 	andeq	fp, sl, r0
    5c30:	03330100 	teqeq	r3, #0, 2
    5c34:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5c38:	34000000 	strcc	r0, [r0], #-0
    5c3c:	000013f4 	strdeq	r1, [r0], -r4
    5c40:	b10d1901 	tstlt	sp, r1, lsl #18
    5c44:	34000000 	strcc	r0, [r0], #-0
    5c48:	68000016 	stmdavs	r0, {r1, r2, r4}
    5c4c:	01000016 	tsteq	r0, r6, lsl r0
    5c50:	0009f69c 	muleq	r9, ip, r6
    5c54:	00693000 	rsbeq	r3, r9, r0
    5c58:	81061b01 	tsthi	r6, r1, lsl #22
    5c5c:	35000000 	strcc	r0, [r0, #-0]
    5c60:	1c010062 	stcne	0, cr0, [r1], {98}	; 0x62
    5c64:	0000b107 	andeq	fp, r0, r7, lsl #2
    5c68:	00225500 	eoreq	r5, r2, r0, lsl #10
    5c6c:	0a3d2700 	beq	f4f874 <__ccfg+0xf2f8cc>
    5c70:	16380000 	ldrtne	r0, [r8], -r0
    5c74:	0a300000 	beq	c05c7c <__ccfg+0xbe5cd4>
    5c78:	22010000 	andcs	r0, r1, #0
    5c7c:	0009c503 	andeq	ip, r9, r3, lsl #10
    5c80:	0a4c2100 	beq	130e088 <__ccfg+0x12ee0e0>
    5c84:	27000000 	strcs	r0, [r0, -r0]
    5c88:	00000a20 	andeq	r0, r0, r0, lsr #20
    5c8c:	0000163e 	andeq	r1, r0, lr, lsr r6
    5c90:	00000a58 	andeq	r0, r0, r8, asr sl
    5c94:	df032301 	svcle	0x00032301
    5c98:	21000009 	tstcs	r0, r9
    5c9c:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5ca0:	0a5a2500 	beq	168f0a8 <__ccfg+0x166f100>
    5ca4:	16400000 	strbne	r0, [r0], -r0
    5ca8:	0a700000 	beq	1c05cb0 <__ccfg+0x1be5d08>
    5cac:	20010000 	andcs	r0, r1, r0
    5cb0:	0a6c2107 	beq	1b0e0d4 <__ccfg+0x1aee12c>
    5cb4:	00000000 	andeq	r0, r0, r0
    5cb8:	00050236 	andeq	r0, r5, r6, lsr r2
    5cbc:	02060200 	andeq	r0, r6, #0, 4
    5cc0:	20030101 	andcs	r0, r3, r1, lsl #2
    5cc4:	3700000a 	strcc	r0, [r0, -sl]
    5cc8:	00000168 	andeq	r0, r0, r8, ror #2
    5ccc:	23020602 	movwcs	r0, #9730	; 0x2602
    5cd0:	00000067 	andeq	r0, r0, r7, rrx
    5cd4:	0009d537 	andeq	sp, r9, r7, lsr r5
    5cd8:	02060200 	andeq	r0, r6, #0, 4
    5cdc:	00006737 	andeq	r6, r0, r7, lsr r7
    5ce0:	c3360000 	teqgt	r6, #0
    5ce4:	02000003 	andeq	r0, r0, #3
    5ce8:	01010154 	tsteq	r1, r4, asr r1
    5cec:	000a3d03 	andeq	r3, sl, r3, lsl #26
    5cf0:	01683700 	cmneq	r8, r0, lsl #14
    5cf4:	54020000 	strpl	r0, [r2], #-0
    5cf8:	00671901 	rsbeq	r1, r7, r1, lsl #18
    5cfc:	36000000 	strcc	r0, [r0], -r0
    5d00:	00000025 	andeq	r0, r0, r5, lsr #32
    5d04:	01011e02 	tsteq	r1, r2, lsl #28
    5d08:	0a5a0301 	beq	1686914 <__ccfg+0x166696c>
    5d0c:	68370000 	ldmdavs	r7!, {}	; <UNPREDICTABLE>
    5d10:	02000001 	andeq	r0, r0, #1
    5d14:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
    5d18:	00000000 	andeq	r0, r0, r0
    5d1c:	00120938 	andseq	r0, r2, r8, lsr r9
    5d20:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    5d24:	00006701 	andeq	r6, r0, r1, lsl #14
    5d28:	0a790300 	beq	1e46930 <__ccfg+0x1e26988>
    5d2c:	68390000 	ldmdavs	r9!, {}	; <UNPREDICTABLE>
    5d30:	02000001 	andeq	r0, r0, #1
    5d34:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    5d38:	3a000000 	bcc	5d40 <__exidx_end+0x2ecc>
    5d3c:	00000796 	muleq	r0, r6, r7
    5d40:	00001744 	andeq	r1, r0, r4, asr #14
    5d44:	00001768 	andeq	r1, r0, r8, ror #14
    5d48:	96289c01 	strtls	r9, [r8], -r1, lsl #24
    5d4c:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    5d50:	62000017 	andvs	r0, r0, #23
    5d54:	01000017 	tsteq	r0, r7, lsl r0
    5d58:	a83b0d78 	ldmdage	fp!, {r3, r4, r5, r6, r8, sl, fp}
    5d5c:	58000007 	stmdapl	r0, {r0, r1, r2}
    5d60:	5e000017 	mcrpl	0, 0, r0, cr0, cr7, {0}
    5d64:	01000017 	tsteq	r0, r7, lsl r0
    5d68:	0000037c 	andeq	r0, r0, ip, ror r3
    5d6c:	00041200 	andeq	r1, r4, r0, lsl #4
    5d70:	69000300 	stmdbvs	r0, {r8, r9}
    5d74:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    5d78:	00017201 	andeq	r7, r1, r1, lsl #4
    5d7c:	14100c00 	ldrne	r0, [r0], #-3072	; 0xfffff400
    5d80:	00d30000 	sbcseq	r0, r3, r0
    5d84:	0c380000 	ldceq	0, cr0, [r8], #-0
    5d88:	00000000 	andeq	r0, r0, r0
    5d8c:	47f10000 	ldrbmi	r0, [r1, r0]!
    5d90:	01020000 	mrseq	r0, (UNDEF: 2)
    5d94:	0003b706 	andeq	fp, r3, r6, lsl #14
    5d98:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5d9c:	000003f1 	strdeq	r0, [r0], -r1
    5da0:	b0050402 	andlt	r0, r5, r2, lsl #8
    5da4:	02000000 	andeq	r0, r0, #0
    5da8:	00ab0508 	adceq	r0, fp, r8, lsl #10
    5dac:	3c030000 	stccc	0, cr0, [r3], {-0}
    5db0:	02000022 	andeq	r0, r0, #34	; 0x22
    5db4:	004d182e 	subeq	r1, sp, lr, lsr #16
    5db8:	01020000 	mrseq	r0, (UNDEF: 2)
    5dbc:	0003b508 	andeq	fp, r3, r8, lsl #10
    5dc0:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    5dc4:	31020000 	mrscc	r0, (UNDEF: 2)
    5dc8:	00006019 	andeq	r6, r0, r9, lsl r0
    5dcc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5dd0:	00000273 	andeq	r0, r0, r3, ror r2
    5dd4:	0017f303 	andseq	pc, r7, r3, lsl #6
    5dd8:	19340200 	ldmdbne	r4!, {r9}
    5ddc:	00000073 	andeq	r0, r0, r3, ror r0
    5de0:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    5de4:	02000000 	andeq	r0, r0, #0
    5de8:	00800708 	addeq	r0, r0, r8, lsl #14
    5dec:	04040000 	streq	r0, [r4], #-0
    5df0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5df4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5df8:	0000008a 	andeq	r0, r0, sl, lsl #1
    5dfc:	00160003 	andseq	r0, r6, r3
    5e00:	12270300 	eorne	r0, r7, #0, 6
    5e04:	00000054 	andeq	r0, r0, r4, asr r0
    5e08:	00008f05 	andeq	r8, r0, r5, lsl #30
    5e0c:	13f80300 	mvnsne	r0, #0, 6
    5e10:	2b030000 	blcs	c5e18 <__ccfg+0xa5e70>
    5e14:	00004112 	andeq	r4, r0, r2, lsl r1
    5e18:	00a00600 	adceq	r0, r0, r0, lsl #12
    5e1c:	51030000 	mrspl	r0, (UNDEF: 3)
    5e20:	03000016 	movweq	r0, #22
    5e24:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5e28:	b1050000 	mrslt	r0, (UNDEF: 5)
    5e2c:	03000000 	movweq	r0, #0
    5e30:	000002a6 	andeq	r0, r0, r6, lsr #5
    5e34:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    5e38:	07000000 	streq	r0, [r0, -r0]
    5e3c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    5e40:	0000015c 	andeq	r0, r0, ip, asr r1
    5e44:	0002c108 	andeq	ip, r2, r8, lsl #2
    5e48:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    5e4c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e50:	00070101 	andeq	r0, r7, r1, lsl #2
    5e54:	0000a408 	andeq	sl, r0, r8, lsl #8
    5e58:	03350300 	teqeq	r5, #0, 6
    5e5c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e60:	00060101 	andeq	r0, r6, r1, lsl #2
    5e64:	00028f08 	andeq	r8, r2, r8, lsl #30
    5e68:	03360300 	teqeq	r6, #0, 6
    5e6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e70:	00050101 	andeq	r0, r5, r1, lsl #2
    5e74:	00042b08 	andeq	r2, r4, r8, lsl #22
    5e78:	03370300 	teqeq	r7, #0, 6
    5e7c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e80:	00040101 	andeq	r0, r4, r1, lsl #2
    5e84:	00042408 	andeq	r2, r4, r8, lsl #8
    5e88:	03380300 	teqeq	r8, #0, 6
    5e8c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e90:	00000401 	andeq	r0, r0, r1, lsl #8
    5e94:	00041509 	andeq	r1, r4, r9, lsl #10
    5e98:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    5e9c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5ea0:	004c0901 	subeq	r0, ip, r1, lsl #18
    5ea4:	3c030000 	stccc	0, cr0, [r3], {-0}
    5ea8:	0000a003 	andeq	sl, r0, r3
    5eac:	79090200 	stmdbvc	r9, {r9}
    5eb0:	03000000 	movweq	r0, #0
    5eb4:	00a0033d 	adceq	r0, r0, sp, lsr r3
    5eb8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    5ebc:	00000161 	andeq	r0, r0, r1, ror #2
    5ec0:	b1083f03 	tstlt	r8, r3, lsl #30
    5ec4:	04000000 	streq	r0, [r0], #-0
    5ec8:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    5ecc:	41030000 	mrsmi	r0, (UNDEF: 3)
    5ed0:	0000ce03 	andeq	ip, r0, r3, lsl #28
    5ed4:	015c0600 	cmpeq	ip, r0, lsl #12
    5ed8:	b50a0000 	strlt	r0, [sl, #-0]
    5edc:	03000002 	movweq	r0, #2
    5ee0:	01681a43 	cmneq	r8, r3, asr #20
    5ee4:	01010000 	mrseq	r0, (UNDEF: 1)
    5ee8:	0003210a 	andeq	r2, r3, sl, lsl #2
    5eec:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    5ef0:	00000189 	andeq	r0, r0, r9, lsl #3
    5ef4:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5ef8:	0000018f 	andeq	r0, r0, pc, lsl #3
    5efc:	be080102 	adflte	f0, f0, f2
    5f00:	05000003 	streq	r0, [r0, #-3]
    5f04:	0000018f 	andeq	r0, r0, pc, lsl #3
    5f08:	00032f0a 	andeq	r2, r3, sl, lsl #30
    5f0c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    5f10:	00000189 	andeq	r0, r0, r9, lsl #3
    5f14:	08070101 	stmdaeq	r7, {r0, r8}
    5f18:	da098f04 	ble	269b30 <__ccfg+0x249b88>
    5f1c:	09000001 	stmdbeq	r0, {r0}
    5f20:	000002c8 	andeq	r0, r0, r8, asr #5
    5f24:	670b9004 	strvs	r9, [fp, -r4]
    5f28:	00000000 	andeq	r0, r0, r0
    5f2c:	00062d09 	andeq	r2, r6, r9, lsl #26
    5f30:	08910400 	ldmeq	r1, {sl}
    5f34:	0000008f 	andeq	r0, r0, pc, lsl #1
    5f38:	049c0904 	ldreq	r0, [ip], #2308	; 0x904
    5f3c:	92040000 	andls	r0, r4, #0
    5f40:	0000ac10 	andeq	sl, r0, r0, lsl ip
    5f44:	03000600 	movweq	r0, #1536	; 0x600
    5f48:	00000432 	andeq	r0, r0, r2, lsr r4
    5f4c:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    5f50:	0c000001 	stceq	0, cr0, [r0], {1}
    5f54:	000001da 	ldrdeq	r0, [r0], -sl
    5f58:	000001f1 	strdeq	r0, [r0], -r1
    5f5c:	420a000d 	andmi	r0, sl, #13
    5f60:	04000000 	streq	r0, [r0], #-0
    5f64:	01e60f99 	strexheq	r0, r9, [r6]
    5f68:	01010000 	mrseq	r0, (UNDEF: 1)
    5f6c:	91050107 	tstls	r5, r7, lsl #2
    5f70:	00022909 	andeq	r2, r2, r9, lsl #18
    5f74:	048f0800 	streq	r0, [pc], #2048	; 5f7c <__exidx_end+0x3108>
    5f78:	93050000 	movwls	r0, #20480	; 0x5000
    5f7c:	0000a007 	andeq	sl, r0, r7
    5f80:	01070100 	mrseq	r0, (UNDEF: 23)
    5f84:	003d0800 	eorseq	r0, sp, r0, lsl #16
    5f88:	94050000 	strls	r0, [r5], #-0
    5f8c:	0000a003 	andeq	sl, r0, r3
    5f90:	00010100 	andeq	r0, r1, r0, lsl #2
    5f94:	86030000 	strhi	r0, [r3], -r0
    5f98:	05000002 	streq	r0, [r0, #-2]
    5f9c:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    5fa0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    5fa4:	0c000002 	stceq	0, cr0, [r0], {2}
    5fa8:	00000235 	andeq	r0, r0, r5, lsr r2
    5fac:	00000245 	andeq	r0, r0, r5, asr #4
    5fb0:	3a05000d 	bcc	145fec <__ccfg+0x126044>
    5fb4:	0a000002 	beq	5fc4 <__exidx_end+0x3150>
    5fb8:	000002eb 	andeq	r0, r0, fp, ror #5
    5fbc:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    5fc0:	01000002 	tsteq	r0, r2
    5fc4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5fc8:	02630000 	rsbeq	r0, r3, #0
    5fcc:	000d0000 	andeq	r0, sp, r0
    5fd0:	00025805 	andeq	r5, r2, r5, lsl #16
    5fd4:	03a70a00 			; <UNDEFINED> instruction: 0x03a70a00
    5fd8:	06060000 	streq	r0, [r6], -r0
    5fdc:	00026313 	andeq	r6, r2, r3, lsl r3
    5fe0:	0a010100 	beq	463e8 <__ccfg+0x26440>
    5fe4:	00000141 	andeq	r0, r0, r1, asr #2
    5fe8:	b10ec304 	tstlt	lr, r4, lsl #6
    5fec:	01000000 	mrseq	r0, (UNDEF: 0)
    5ff0:	04a90e01 	strteq	r0, [r9], #3585	; 0xe01
    5ff4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    5ff8:	02911001 	addseq	r1, r1, #1
    5ffc:	040b0000 	streq	r0, [fp], #-0
    6000:	00000297 	muleq	r0, r7, r2
    6004:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    6008:	8f100000 	svchi	0x00100000
    600c:	00000000 	andeq	r0, r0, r0
    6010:	0001960c 	andeq	r9, r1, ip, lsl #12
    6014:	0002ae00 	andeq	sl, r2, r0, lsl #28
    6018:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    601c:	000002a3 	andeq	r0, r0, r3, lsr #5
    6020:	00046411 	andeq	r6, r4, r1, lsl r4
    6024:	017f0700 	cmneq	pc, r0, lsl #14
    6028:	0002ae16 	andeq	sl, r2, r6, lsl lr
    602c:	11010100 	mrsne	r0, (UNDEF: 17)
    6030:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    6034:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    6038:	000000bd 	strheq	r0, [r0], -sp
    603c:	94110101 	ldrls	r0, [r1], #-257	; 0xfffffeff
    6040:	07000004 	streq	r0, [r0, -r4]
    6044:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    6048:	01000000 	mrseq	r0, (UNDEF: 0)
    604c:	07081201 	streq	r1, [r8, -r1, lsl #4]
    6050:	07090303 	streq	r0, [r9, -r3, lsl #6]
    6054:	13000003 	movwne	r0, #3
    6058:	00002234 	andeq	r2, r0, r4, lsr r2
    605c:	07030707 	streq	r0, [r3, -r7, lsl #14]
    6060:	0000008f 	andeq	r0, r0, pc, lsl #1
    6064:	057f1300 	ldrbeq	r1, [pc, #-768]!	; 5d6c <__exidx_end+0x2ef8>
    6068:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    606c:	00c20803 	sbceq	r0, r2, r3, lsl #16
    6070:	00040000 	andeq	r0, r4, r0
    6074:	0002660e 	andeq	r6, r2, lr, lsl #12
    6078:	03090700 	movweq	r0, #38656	; 0x9700
    607c:	0002e003 	andeq	lr, r2, r3
    6080:	04b81400 	ldrteq	r1, [r8], #1024	; 0x400
    6084:	07300000 	ldreq	r0, [r0, -r0]!
    6088:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    608c:	13000003 	movwne	r0, #3
    6090:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    6094:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6098:	0000008f 	andeq	r0, r0, pc, lsl #1
    609c:	02d21300 	sbcseq	r1, r2, #0, 6
    60a0:	15070000 	strne	r0, [r7, #-0]
    60a4:	008f0803 	addeq	r0, pc, r3, lsl #16
    60a8:	13020000 	movwne	r0, #8192	; 0x2000
    60ac:	000004ac 	andeq	r0, r0, ip, lsr #9
    60b0:	0b031607 	bleq	cb8d4 <__ccfg+0xab92c>
    60b4:	00000284 	andeq	r0, r0, r4, lsl #5
    60b8:	0f7f1304 	svceq	0x007f1304
    60bc:	17070000 	strne	r0, [r7, -r0]
    60c0:	00c20903 	sbceq	r0, r2, r3, lsl #18
    60c4:	13080000 	movwne	r0, #32768	; 0x8000
    60c8:	0000045d 	andeq	r0, r0, sp, asr r4
    60cc:	0f031807 	svceq	0x00031807
    60d0:	00000377 	andeq	r0, r0, r7, ror r3
    60d4:	02cd130c 	sbceq	r1, sp, #12, 6	; 0x30000000
    60d8:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    60dc:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    60e0:	002c0000 	eoreq	r0, ip, r0
    60e4:	0003070c 	andeq	r0, r3, ip, lsl #14
    60e8:	00038700 	andeq	r8, r3, r0, lsl #14
    60ec:	00881500 	addeq	r1, r8, r0, lsl #10
    60f0:	00030000 	andeq	r0, r3, r0
    60f4:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    60f8:	c30e0000 	movwgt	r0, #57344	; 0xe000
    60fc:	07000004 	streq	r0, [r0, -r4]
    6100:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6104:	11000003 	tstne	r0, r3
    6108:	00000395 	muleq	r0, r5, r3
    610c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    6110:	000003a9 	andeq	r0, r0, r9, lsr #7
    6114:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6118:	0000038d 	andeq	r0, r0, sp, lsl #7
    611c:	0014060a 	andseq	r0, r4, sl, lsl #12
    6120:	0e090100 	adfeqe	f0, f1, f0
    6124:	00000189 	andeq	r0, r0, r9, lsl #3
    6128:	01160101 	tsteq	r6, r1, lsl #2
    612c:	0000144f 	andeq	r1, r0, pc, asr #8
    6130:	01050d01 	tsteq	r5, r1, lsl #26
    6134:	00000081 	andeq	r0, r0, r1, lsl #1
    6138:	00001790 	muleq	r0, r0, r7
    613c:	00001808 	andeq	r1, r0, r8, lsl #16
    6140:	73179c01 	tstvc	r7, #256	; 0x100
    6144:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    6148:	00008f12 	andeq	r8, r0, r2, lsl pc
    614c:	00227300 	eoreq	r7, r2, r0, lsl #6
    6150:	75621700 	strbvc	r1, [r2, #-1792]!	; 0xfffff900
    6154:	0d010066 	stceq	0, cr0, [r1, #-408]	; 0xfffffe68
    6158:	0001891c 	andeq	r8, r1, ip, lsl r9
    615c:	00229100 	eoreq	r9, r2, r0, lsl #2
    6160:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0xfffff900
    6164:	0d01006e 	stceq	0, cr0, [r1, #-440]	; 0xfffffe48
    6168:	00008125 	andeq	r8, r0, r5, lsr #2
    616c:	0022e600 	eoreq	lr, r2, r0, lsl #12
    6170:	14561800 	ldrbne	r1, [r6], #-2048	; 0xfffff800
    6174:	11010000 	mrsne	r0, (UNDEF: 1)
    6178:	00008106 	andeq	r8, r0, r6, lsl #2
    617c:	00233b00 	eoreq	r3, r3, r0, lsl #22
    6180:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6184:	03000004 	movweq	r0, #4
    6188:	001ab800 	andseq	fp, sl, r0, lsl #16
    618c:	72010400 	andvc	r0, r1, #0, 8
    6190:	0c000001 	stceq	0, cr0, [r0], {1}
    6194:	00001464 	andeq	r1, r0, r4, ror #8
    6198:	000000d3 	ldrdeq	r0, [r0], -r3
    619c:	00000c48 	andeq	r0, r0, r8, asr #24
    61a0:	00000000 	andeq	r0, r0, r0
    61a4:	000049b6 			; <UNDEFINED> instruction: 0x000049b6
    61a8:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    61ac:	02000003 	andeq	r0, r0, #3
    61b0:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    61b4:	04020000 	streq	r0, [r2], #-0
    61b8:	0000b005 	andeq	fp, r0, r5
    61bc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    61c0:	000000ab 	andeq	r0, r0, fp, lsr #1
    61c4:	00223c03 	eoreq	r3, r2, r3, lsl #24
    61c8:	182e0200 	stmdane	lr!, {r9}
    61cc:	0000004d 	andeq	r0, r0, sp, asr #32
    61d0:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    61d4:	03000003 	movweq	r0, #3
    61d8:	0000212a 	andeq	r2, r0, sl, lsr #2
    61dc:	60193102 	andsvs	r3, r9, r2, lsl #2
    61e0:	02000000 	andeq	r0, r0, #0
    61e4:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    61e8:	f3030000 	vhadd.u8	d0, d3, d0
    61ec:	02000017 	andeq	r0, r0, #23
    61f0:	00731934 	rsbseq	r1, r3, r4, lsr r9
    61f4:	04020000 	streq	r0, [r2], #-0
    61f8:	00008507 	andeq	r8, r0, r7, lsl #10
    61fc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6200:	00000080 	andeq	r0, r0, r0, lsl #1
    6204:	69050404 	stmdbvs	r5, {r2, sl}
    6208:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    620c:	008a0704 	addeq	r0, sl, r4, lsl #14
    6210:	86030000 	strhi	r0, [r3], -r0
    6214:	0300000b 	movweq	r0, #11
    6218:	009b1b28 	addseq	r1, fp, r8, lsr #22
    621c:	9c050000 	stcls	0, cr0, [r5], {-0}
    6220:	0400000a 	streq	r0, [r0], #-10
    6224:	00b30009 	adcseq	r0, r3, r9
    6228:	3c060000 	stccc	0, cr0, [r6], {-0}
    622c:	b300000c 	movwlt	r0, #12
    6230:	00000000 	andeq	r0, r0, r0
    6234:	04070001 	streq	r0, [r7], #-1
    6238:	000a9e03 	andeq	r9, sl, r3, lsl #28
    623c:	18630300 	stmdane	r3!, {r8, r9}^
    6240:	0000008f 	andeq	r0, r0, pc, lsl #1
    6244:	00160003 	andseq	r0, r6, r3
    6248:	12270400 	eorne	r0, r7, #0, 8
    624c:	00000054 	andeq	r0, r0, r4, asr r0
    6250:	0000c108 	andeq	ip, r0, r8, lsl #2
    6254:	13f80300 	mvnsne	r0, #0, 6
    6258:	2b040000 	blcs	106260 <__ccfg+0xe62b8>
    625c:	00004112 	andeq	r4, r0, r2, lsl r1
    6260:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    6264:	51030000 	mrspl	r0, (UNDEF: 3)
    6268:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    626c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6270:	e3080000 	movw	r0, #32768	; 0x8000
    6274:	03000000 	movweq	r0, #0
    6278:	000002a6 	andeq	r0, r0, r6, lsr #5
    627c:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    6280:	0a000000 	beq	6288 <__exidx_end+0x3414>
    6284:	09320408 	ldmdbeq	r2!, {r3, sl}
    6288:	0000018e 	andeq	r0, r0, lr, lsl #3
    628c:	0002c10b 	andeq	ip, r2, fp, lsl #2
    6290:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    6294:	000000d2 	ldrdeq	r0, [r0], -r2
    6298:	00070101 	andeq	r0, r7, r1, lsl #2
    629c:	0000a40b 	andeq	sl, r0, fp, lsl #8
    62a0:	03350400 	teqeq	r5, #0, 8
    62a4:	000000d2 	ldrdeq	r0, [r0], -r2
    62a8:	00060101 	andeq	r0, r6, r1, lsl #2
    62ac:	00028f0b 	andeq	r8, r2, fp, lsl #30
    62b0:	03360400 	teqeq	r6, #0, 8
    62b4:	000000d2 	ldrdeq	r0, [r0], -r2
    62b8:	00050101 	andeq	r0, r5, r1, lsl #2
    62bc:	00042b0b 	andeq	r2, r4, fp, lsl #22
    62c0:	03370400 	teqeq	r7, #0, 8
    62c4:	000000d2 	ldrdeq	r0, [r0], -r2
    62c8:	00040101 	andeq	r0, r4, r1, lsl #2
    62cc:	0004240b 	andeq	r2, r4, fp, lsl #8
    62d0:	03380400 	teqeq	r8, #0, 8
    62d4:	000000d2 	ldrdeq	r0, [r0], -r2
    62d8:	00000401 	andeq	r0, r0, r1, lsl #8
    62dc:	0004150c 	andeq	r1, r4, ip, lsl #10
    62e0:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    62e4:	000000d2 	ldrdeq	r0, [r0], -r2
    62e8:	004c0c01 	subeq	r0, ip, r1, lsl #24
    62ec:	3c040000 	stccc	0, cr0, [r4], {-0}
    62f0:	0000d203 	andeq	sp, r0, r3, lsl #4
    62f4:	790c0200 	stmdbvc	ip, {r9}
    62f8:	04000000 	streq	r0, [r0], #-0
    62fc:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    6300:	0c030000 	stceq	0, cr0, [r3], {-0}
    6304:	00000161 	andeq	r0, r0, r1, ror #2
    6308:	e3083f04 	movw	r3, #36612	; 0x8f04
    630c:	04000000 	streq	r0, [r0], #-0
    6310:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    6314:	41040000 	mrsmi	r0, (UNDEF: 4)
    6318:	00010003 	andeq	r0, r1, r3
    631c:	018e0900 	orreq	r0, lr, r0, lsl #18
    6320:	b50d0000 	strlt	r0, [sp, #-0]
    6324:	04000002 	streq	r0, [r0], #-2
    6328:	019a1a43 	orrseq	r1, sl, r3, asr #20
    632c:	01010000 	mrseq	r0, (UNDEF: 1)
    6330:	0003210d 	andeq	r2, r3, sp, lsl #2
    6334:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    6338:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    633c:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    6340:	000001c1 	andeq	r0, r0, r1, asr #3
    6344:	be080102 	adflte	f0, f0, f2
    6348:	08000003 	stmdaeq	r0, {r0, r1}
    634c:	000001c1 	andeq	r0, r0, r1, asr #3
    6350:	00032f0d 	andeq	r2, r3, sp, lsl #30
    6354:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    6358:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    635c:	080a0101 	stmdaeq	sl, {r0, r8}
    6360:	0c098f05 	stceq	15, cr8, [r9], {5}
    6364:	0c000002 	stceq	0, cr0, [r0], {2}
    6368:	000002c8 	andeq	r0, r0, r8, asr #5
    636c:	670b9005 	strvs	r9, [fp, -r5]
    6370:	00000000 	andeq	r0, r0, r0
    6374:	00062d0c 	andeq	r2, r6, ip, lsl #26
    6378:	08910500 	ldmeq	r1, {r8, sl}
    637c:	000000c1 	andeq	r0, r0, r1, asr #1
    6380:	049c0c04 	ldreq	r0, [ip], #3076	; 0xc04
    6384:	92050000 	andls	r0, r5, #0
    6388:	0000de10 	andeq	sp, r0, r0, lsl lr
    638c:	03000600 	movweq	r0, #1536	; 0x600
    6390:	00000432 	andeq	r0, r0, r2, lsr r4
    6394:	db039305 	blle	eafb0 <__ccfg+0xcb008>
    6398:	0f000001 	svceq	0x00000001
    639c:	0000020c 	andeq	r0, r0, ip, lsl #4
    63a0:	00000223 	andeq	r0, r0, r3, lsr #4
    63a4:	420d0010 	andmi	r0, sp, #16
    63a8:	05000000 	streq	r0, [r0, #-0]
    63ac:	02180f99 	andseq	r0, r8, #612	; 0x264
    63b0:	01010000 	mrseq	r0, (UNDEF: 1)
    63b4:	9106010a 	tstls	r6, sl, lsl #2
    63b8:	00025b09 	andeq	r5, r2, r9, lsl #22
    63bc:	048f0b00 	streq	r0, [pc], #2816	; 63c4 <__exidx_end+0x3550>
    63c0:	93060000 	movwls	r0, #24576	; 0x6000
    63c4:	0000d207 	andeq	sp, r0, r7, lsl #4
    63c8:	01070100 	mrseq	r0, (UNDEF: 23)
    63cc:	003d0b00 	eorseq	r0, sp, r0, lsl #22
    63d0:	94060000 	strls	r0, [r6], #-0
    63d4:	0000d203 	andeq	sp, r0, r3, lsl #4
    63d8:	00010100 	andeq	r0, r1, r0, lsl #2
    63dc:	86030000 	strhi	r0, [r3], -r0
    63e0:	06000002 	streq	r0, [r0], -r2
    63e4:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    63e8:	5b080000 	blpl	2063f0 <__ccfg+0x1e6448>
    63ec:	0f000002 	svceq	0x00000002
    63f0:	00000267 	andeq	r0, r0, r7, ror #4
    63f4:	00000277 	andeq	r0, r0, r7, ror r2
    63f8:	6c080010 	stcvs	0, cr0, [r8], {16}
    63fc:	0d000002 	stceq	0, cr0, [r0, #-8]
    6400:	000002eb 	andeq	r0, r0, fp, ror #5
    6404:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    6408:	01000002 	tsteq	r0, r2
    640c:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    6410:	02950000 	addseq	r0, r5, #0
    6414:	00100000 	andseq	r0, r0, r0
    6418:	00028a08 	andeq	r8, r2, r8, lsl #20
    641c:	03a70d00 			; <UNDEFINED> instruction: 0x03a70d00
    6420:	06070000 	streq	r0, [r7], -r0
    6424:	00029513 	andeq	r9, r2, r3, lsl r5
    6428:	0d010100 	stfeqs	f0, [r1, #-0]
    642c:	00000141 	andeq	r0, r0, r1, asr #2
    6430:	e30ec305 	movw	ip, #58117	; 0xe305
    6434:	01000000 	mrseq	r0, (UNDEF: 0)
    6438:	04a91101 	strteq	r1, [r9], #257	; 0x101
    643c:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    6440:	02c31001 	sbceq	r1, r3, #1
    6444:	040e0000 	streq	r0, [lr], #-0
    6448:	000002c9 	andeq	r0, r0, r9, asr #5
    644c:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    6450:	c1130000 	tstgt	r3, r0
    6454:	00000000 	andeq	r0, r0, r0
    6458:	0001c80f 	andeq	ip, r1, pc, lsl #16
    645c:	0002e000 	andeq	lr, r2, r0
    6460:	08001000 	stmdaeq	r0, {ip}
    6464:	000002d5 	ldrdeq	r0, [r0], -r5
    6468:	00046414 	andeq	r6, r4, r4, lsl r4
    646c:	017f0800 	cmneq	pc, r0, lsl #16
    6470:	0002e016 	andeq	lr, r2, r6, lsl r0
    6474:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6478:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    647c:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    6480:	000000ef 	andeq	r0, r0, pc, ror #1
    6484:	94140101 	ldrls	r0, [r4], #-257	; 0xfffffeff
    6488:	08000004 	stmdaeq	r0, {r2}
    648c:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    6490:	01000000 	mrseq	r0, (UNDEF: 0)
    6494:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    6498:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    649c:	16000003 	strne	r0, [r0], -r3
    64a0:	00002234 	andeq	r2, r0, r4, lsr r2
    64a4:	07030708 	streq	r0, [r3, -r8, lsl #14]
    64a8:	000000c1 	andeq	r0, r0, r1, asr #1
    64ac:	057f1600 	ldrbeq	r1, [pc, #-1536]!	; 5eb4 <__exidx_end+0x3040>
    64b0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    64b4:	00f40803 	rscseq	r0, r4, r3, lsl #16
    64b8:	00040000 	andeq	r0, r4, r0
    64bc:	00026611 	andeq	r6, r2, r1, lsl r6
    64c0:	03090800 	movweq	r0, #38912	; 0x9800
    64c4:	00031203 	andeq	r1, r3, r3, lsl #4
    64c8:	04b81700 	ldrteq	r1, [r8], #1792	; 0x700
    64cc:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    64d0:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    64d4:	16000003 	strne	r0, [r0], -r3
    64d8:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    64dc:	08031408 	stmdaeq	r3, {r3, sl, ip}
    64e0:	000000c1 	andeq	r0, r0, r1, asr #1
    64e4:	02d21600 	sbcseq	r1, r2, #0, 12
    64e8:	15080000 	strne	r0, [r8, #-0]
    64ec:	00c10803 	sbceq	r0, r1, r3, lsl #16
    64f0:	16020000 	strne	r0, [r2], -r0
    64f4:	000004ac 	andeq	r0, r0, ip, lsr #9
    64f8:	0b031608 	bleq	cbd20 <__ccfg+0xabd78>
    64fc:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    6500:	0f7f1604 	svceq	0x007f1604
    6504:	17080000 	strne	r0, [r8, -r0]
    6508:	00f40903 	rscseq	r0, r4, r3, lsl #18
    650c:	16080000 	strne	r0, [r8], -r0
    6510:	0000045d 	andeq	r0, r0, sp, asr r4
    6514:	0f031808 	svceq	0x00031808
    6518:	000003a9 	andeq	r0, r0, r9, lsr #7
    651c:	02cd160c 	sbceq	r1, sp, #12, 12	; 0xc00000
    6520:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    6524:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    6528:	002c0000 	eoreq	r0, ip, r0
    652c:	0003390f 	andeq	r3, r3, pc, lsl #18
    6530:	0003b900 	andeq	fp, r3, r0, lsl #18
    6534:	00881800 	addeq	r1, r8, r0, lsl #16
    6538:	00030000 	andeq	r0, r3, r0
    653c:	0346040e 	movteq	r0, #25614	; 0x640e
    6540:	c3110000 	tstgt	r1, #0
    6544:	08000004 	stmdaeq	r0, {r2}
    6548:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    654c:	14000003 	strne	r0, [r0], #-3
    6550:	00000395 	muleq	r0, r5, r3
    6554:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    6558:	000003db 	ldrdeq	r0, [r0], -fp
    655c:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    6560:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    6564:	145b0119 	ldrbne	r0, [fp], #-281	; 0xfffffee7
    6568:	0c010000 	stceq	0, cr0, [r1], {-0}
    656c:	00810105 	addeq	r0, r1, r5, lsl #2
    6570:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6574:	185c0000 	ldmdane	ip, {}^	; <UNPREDICTABLE>
    6578:	9c010000 	stcls	0, cr0, [r1], {-0}
    657c:	00000449 	andeq	r0, r0, r9, asr #8
    6580:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    6584:	c1140c01 	tstgt	r4, r1, lsl #24
    6588:	85000000 	strhi	r0, [r0, #-0]
    658c:	1b000023 	blne	6620 <__exidx_end+0x37ac>
    6590:	0c01006d 	stceq	0, cr0, [r1], {109}	; 0x6d
    6594:	00044924 	andeq	r4, r4, r4, lsr #18
    6598:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    659c:	14561d1c 	ldrbne	r1, [r6], #-3356	; 0xfffff2e4
    65a0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    65a4:	00008106 	andeq	r8, r0, r6, lsl #2
    65a8:	00239800 	eoreq	r9, r3, r0, lsl #16
    65ac:	75621e00 	strbvc	r1, [r2, #-3584]!	; 0xfffff200
    65b0:	0f010066 	svceq	0x00010066
    65b4:	0001bb08 	andeq	fp, r1, r8, lsl #22
    65b8:	0023d700 	eoreq	sp, r3, r0, lsl #14
    65bc:	70611f00 	rsbvc	r1, r1, r0, lsl #30
    65c0:	0a100100 	beq	4069c8 <__ccfg+0x3e6a20>
    65c4:	000000b5 	strheq	r0, [r0], -r5
    65c8:	005c9102 	subseq	r9, ip, r2, lsl #2
    65cc:	01c8040e 	biceq	r0, r8, lr, lsl #8
    65d0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    65d4:	03000004 	movweq	r0, #4
    65d8:	001c6400 	andseq	r6, ip, r0, lsl #8
    65dc:	72010400 	andvc	r0, r1, #0, 8
    65e0:	0c000001 	stceq	0, cr0, [r0], {1}
    65e4:	000014a5 	andeq	r1, r0, r5, lsr #9
    65e8:	000000d3 	ldrdeq	r0, [r0], -r3
    65ec:	00000c58 	andeq	r0, r0, r8, asr ip
    65f0:	00000000 	andeq	r0, r0, r0
    65f4:	00004b58 	andeq	r4, r0, r8, asr fp
    65f8:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    65fc:	02000003 	andeq	r0, r0, #3
    6600:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    6604:	04020000 	streq	r0, [r2], #-0
    6608:	0000b005 	andeq	fp, r0, r5
    660c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6610:	000000ab 	andeq	r0, r0, fp, lsr #1
    6614:	00223c03 	eoreq	r3, r2, r3, lsl #24
    6618:	182e0200 	stmdane	lr!, {r9}
    661c:	0000004d 	andeq	r0, r0, sp, asr #32
    6620:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    6624:	03000003 	movweq	r0, #3
    6628:	0000212a 	andeq	r2, r0, sl, lsr #2
    662c:	60193102 	andsvs	r3, r9, r2, lsl #2
    6630:	02000000 	andeq	r0, r0, #0
    6634:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    6638:	f3030000 	vhadd.u8	d0, d3, d0
    663c:	02000017 	andeq	r0, r0, #23
    6640:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6644:	04020000 	streq	r0, [r2], #-0
    6648:	00008507 	andeq	r8, r0, r7, lsl #10
    664c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6650:	00000080 	andeq	r0, r0, r0, lsl #1
    6654:	69050404 	stmdbvs	r5, {r2, sl}
    6658:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    665c:	008a0704 	addeq	r0, sl, r4, lsl #14
    6660:	86030000 	strhi	r0, [r3], -r0
    6664:	0300000b 	movweq	r0, #11
    6668:	009b1b28 	addseq	r1, fp, r8, lsr #22
    666c:	9c050000 	stcls	0, cr0, [r5], {-0}
    6670:	0400000a 	streq	r0, [r0], #-10
    6674:	00b30009 	adcseq	r0, r3, r9
    6678:	3c060000 	stccc	0, cr0, [r6], {-0}
    667c:	b300000c 	movwlt	r0, #12
    6680:	00000000 	andeq	r0, r0, r0
    6684:	04070001 	streq	r0, [r7], #-1
    6688:	000a9e03 	andeq	r9, sl, r3, lsl #28
    668c:	18630300 	stmdane	r3!, {r8, r9}^
    6690:	0000008f 	andeq	r0, r0, pc, lsl #1
    6694:	00160003 	andseq	r0, r6, r3
    6698:	12270400 	eorne	r0, r7, #0, 8
    669c:	00000054 	andeq	r0, r0, r4, asr r0
    66a0:	0000c108 	andeq	ip, r0, r8, lsl #2
    66a4:	13f80300 	mvnsne	r0, #0, 6
    66a8:	2b040000 	blcs	1066b0 <__ccfg+0xe6708>
    66ac:	00004112 	andeq	r4, r0, r2, lsl r1
    66b0:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    66b4:	51030000 	mrspl	r0, (UNDEF: 3)
    66b8:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    66bc:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    66c0:	e3080000 	movw	r0, #32768	; 0x8000
    66c4:	03000000 	movweq	r0, #0
    66c8:	000002a6 	andeq	r0, r0, r6, lsr #5
    66cc:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    66d0:	0a000000 	beq	66d8 <__exidx_end+0x3864>
    66d4:	09320408 	ldmdbeq	r2!, {r3, sl}
    66d8:	0000018e 	andeq	r0, r0, lr, lsl #3
    66dc:	0002c10b 	andeq	ip, r2, fp, lsl #2
    66e0:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    66e4:	000000d2 	ldrdeq	r0, [r0], -r2
    66e8:	00070101 	andeq	r0, r7, r1, lsl #2
    66ec:	0000a40b 	andeq	sl, r0, fp, lsl #8
    66f0:	03350400 	teqeq	r5, #0, 8
    66f4:	000000d2 	ldrdeq	r0, [r0], -r2
    66f8:	00060101 	andeq	r0, r6, r1, lsl #2
    66fc:	00028f0b 	andeq	r8, r2, fp, lsl #30
    6700:	03360400 	teqeq	r6, #0, 8
    6704:	000000d2 	ldrdeq	r0, [r0], -r2
    6708:	00050101 	andeq	r0, r5, r1, lsl #2
    670c:	00042b0b 	andeq	r2, r4, fp, lsl #22
    6710:	03370400 	teqeq	r7, #0, 8
    6714:	000000d2 	ldrdeq	r0, [r0], -r2
    6718:	00040101 	andeq	r0, r4, r1, lsl #2
    671c:	0004240b 	andeq	r2, r4, fp, lsl #8
    6720:	03380400 	teqeq	r8, #0, 8
    6724:	000000d2 	ldrdeq	r0, [r0], -r2
    6728:	00000401 	andeq	r0, r0, r1, lsl #8
    672c:	0004150c 	andeq	r1, r4, ip, lsl #10
    6730:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    6734:	000000d2 	ldrdeq	r0, [r0], -r2
    6738:	004c0c01 	subeq	r0, ip, r1, lsl #24
    673c:	3c040000 	stccc	0, cr0, [r4], {-0}
    6740:	0000d203 	andeq	sp, r0, r3, lsl #4
    6744:	790c0200 	stmdbvc	ip, {r9}
    6748:	04000000 	streq	r0, [r0], #-0
    674c:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    6750:	0c030000 	stceq	0, cr0, [r3], {-0}
    6754:	00000161 	andeq	r0, r0, r1, ror #2
    6758:	e3083f04 	movw	r3, #36612	; 0x8f04
    675c:	04000000 	streq	r0, [r0], #-0
    6760:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
    6764:	41040000 	mrsmi	r0, (UNDEF: 4)
    6768:	00010003 	andeq	r0, r1, r3
    676c:	018e0900 	orreq	r0, lr, r0, lsl #18
    6770:	b50d0000 	strlt	r0, [sp, #-0]
    6774:	04000002 	streq	r0, [r0], #-2
    6778:	019a1a43 	orrseq	r1, sl, r3, asr #20
    677c:	01010000 	mrseq	r0, (UNDEF: 1)
    6780:	0003210d 	andeq	r2, r3, sp, lsl #2
    6784:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    6788:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    678c:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    6790:	000001c1 	andeq	r0, r0, r1, asr #3
    6794:	be080102 	adflte	f0, f0, f2
    6798:	08000003 	stmdaeq	r0, {r0, r1}
    679c:	000001c1 	andeq	r0, r0, r1, asr #3
    67a0:	00032f0d 	andeq	r2, r3, sp, lsl #30
    67a4:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    67a8:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    67ac:	080a0101 	stmdaeq	sl, {r0, r8}
    67b0:	0c098f05 	stceq	15, cr8, [r9], {5}
    67b4:	0c000002 	stceq	0, cr0, [r0], {2}
    67b8:	000002c8 	andeq	r0, r0, r8, asr #5
    67bc:	670b9005 	strvs	r9, [fp, -r5]
    67c0:	00000000 	andeq	r0, r0, r0
    67c4:	00062d0c 	andeq	r2, r6, ip, lsl #26
    67c8:	08910500 	ldmeq	r1, {r8, sl}
    67cc:	000000c1 	andeq	r0, r0, r1, asr #1
    67d0:	049c0c04 	ldreq	r0, [ip], #3076	; 0xc04
    67d4:	92050000 	andls	r0, r5, #0
    67d8:	0000de10 	andeq	sp, r0, r0, lsl lr
    67dc:	03000600 	movweq	r0, #1536	; 0x600
    67e0:	00000432 	andeq	r0, r0, r2, lsr r4
    67e4:	db039305 	blle	eb400 <__ccfg+0xcb458>
    67e8:	0f000001 	svceq	0x00000001
    67ec:	0000020c 	andeq	r0, r0, ip, lsl #4
    67f0:	00000223 	andeq	r0, r0, r3, lsr #4
    67f4:	420d0010 	andmi	r0, sp, #16
    67f8:	05000000 	streq	r0, [r0, #-0]
    67fc:	02180f99 	andseq	r0, r8, #612	; 0x264
    6800:	01010000 	mrseq	r0, (UNDEF: 1)
    6804:	9106010a 	tstls	r6, sl, lsl #2
    6808:	00025b09 	andeq	r5, r2, r9, lsl #22
    680c:	048f0b00 	streq	r0, [pc], #2816	; 6814 <__exidx_end+0x39a0>
    6810:	93060000 	movwls	r0, #24576	; 0x6000
    6814:	0000d207 	andeq	sp, r0, r7, lsl #4
    6818:	01070100 	mrseq	r0, (UNDEF: 23)
    681c:	003d0b00 	eorseq	r0, sp, r0, lsl #22
    6820:	94060000 	strls	r0, [r6], #-0
    6824:	0000d203 	andeq	sp, r0, r3, lsl #4
    6828:	00010100 	andeq	r0, r1, r0, lsl #2
    682c:	86030000 	strhi	r0, [r3], -r0
    6830:	06000002 	streq	r0, [r0], -r2
    6834:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    6838:	5b080000 	blpl	206840 <__ccfg+0x1e6898>
    683c:	0f000002 	svceq	0x00000002
    6840:	00000267 	andeq	r0, r0, r7, ror #4
    6844:	00000277 	andeq	r0, r0, r7, ror r2
    6848:	6c080010 	stcvs	0, cr0, [r8], {16}
    684c:	0d000002 	stceq	0, cr0, [r0, #-8]
    6850:	000002eb 	andeq	r0, r0, fp, ror #5
    6854:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    6858:	01000002 	tsteq	r0, r2
    685c:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    6860:	02950000 	addseq	r0, r5, #0
    6864:	00100000 	andseq	r0, r0, r0
    6868:	00028a08 	andeq	r8, r2, r8, lsl #20
    686c:	03a70d00 			; <UNDEFINED> instruction: 0x03a70d00
    6870:	06070000 	streq	r0, [r7], -r0
    6874:	00029513 	andeq	r9, r2, r3, lsl r5
    6878:	0d010100 	stfeqs	f0, [r1, #-0]
    687c:	00000141 	andeq	r0, r0, r1, asr #2
    6880:	e30ec305 	movw	ip, #58117	; 0xe305
    6884:	01000000 	mrseq	r0, (UNDEF: 0)
    6888:	04a91101 	strteq	r1, [r9], #257	; 0x101
    688c:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    6890:	02c31001 	sbceq	r1, r3, #1
    6894:	040e0000 	streq	r0, [lr], #-0
    6898:	000002c9 	andeq	r0, r0, r9, asr #5
    689c:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    68a0:	c1130000 	tstgt	r3, r0
    68a4:	00000000 	andeq	r0, r0, r0
    68a8:	0001c80f 	andeq	ip, r1, pc, lsl #16
    68ac:	0002e000 	andeq	lr, r2, r0
    68b0:	08001000 	stmdaeq	r0, {ip}
    68b4:	000002d5 	ldrdeq	r0, [r0], -r5
    68b8:	00046414 	andeq	r6, r4, r4, lsl r4
    68bc:	017f0800 	cmneq	pc, r0, lsl #16
    68c0:	0002e016 	andeq	lr, r2, r6, lsl r0
    68c4:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    68c8:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    68cc:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    68d0:	000000ef 	andeq	r0, r0, pc, ror #1
    68d4:	94140101 	ldrls	r0, [r4], #-257	; 0xfffffeff
    68d8:	08000004 	stmdaeq	r0, {r2}
    68dc:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    68e0:	01000000 	mrseq	r0, (UNDEF: 0)
    68e4:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    68e8:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    68ec:	16000003 	strne	r0, [r0], -r3
    68f0:	00002234 	andeq	r2, r0, r4, lsr r2
    68f4:	07030708 	streq	r0, [r3, -r8, lsl #14]
    68f8:	000000c1 	andeq	r0, r0, r1, asr #1
    68fc:	057f1600 	ldrbeq	r1, [pc, #-1536]!	; 6304 <__exidx_end+0x3490>
    6900:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6904:	00f40803 	rscseq	r0, r4, r3, lsl #16
    6908:	00040000 	andeq	r0, r4, r0
    690c:	00026611 	andeq	r6, r2, r1, lsl r6
    6910:	03090800 	movweq	r0, #38912	; 0x9800
    6914:	00031203 	andeq	r1, r3, r3, lsl #4
    6918:	04b81700 	ldrteq	r1, [r8], #1792	; 0x700
    691c:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    6920:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    6924:	16000003 	strne	r0, [r0], -r3
    6928:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    692c:	08031408 	stmdaeq	r3, {r3, sl, ip}
    6930:	000000c1 	andeq	r0, r0, r1, asr #1
    6934:	02d21600 	sbcseq	r1, r2, #0, 12
    6938:	15080000 	strne	r0, [r8, #-0]
    693c:	00c10803 	sbceq	r0, r1, r3, lsl #16
    6940:	16020000 	strne	r0, [r2], -r0
    6944:	000004ac 	andeq	r0, r0, ip, lsr #9
    6948:	0b031608 	bleq	cc170 <__ccfg+0xac1c8>
    694c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    6950:	0f7f1604 	svceq	0x007f1604
    6954:	17080000 	strne	r0, [r8, -r0]
    6958:	00f40903 	rscseq	r0, r4, r3, lsl #18
    695c:	16080000 	strne	r0, [r8], -r0
    6960:	0000045d 	andeq	r0, r0, sp, asr r4
    6964:	0f031808 	svceq	0x00031808
    6968:	000003a9 	andeq	r0, r0, r9, lsr #7
    696c:	02cd160c 	sbceq	r1, sp, #12, 12	; 0xc00000
    6970:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    6974:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    6978:	002c0000 	eoreq	r0, ip, r0
    697c:	0003390f 	andeq	r3, r3, pc, lsl #18
    6980:	0003b900 	andeq	fp, r3, r0, lsl #18
    6984:	00881800 	addeq	r1, r8, r0, lsl #16
    6988:	00030000 	andeq	r0, r3, r0
    698c:	0346040e 	movteq	r0, #25614	; 0x640e
    6990:	c3110000 	tstgt	r1, #0
    6994:	08000004 	stmdaeq	r0, {r2}
    6998:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    699c:	14000003 	strne	r0, [r0], #-3
    69a0:	00000395 	muleq	r0, r5, r3
    69a4:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    69a8:	000003db 	ldrdeq	r0, [r0], -fp
    69ac:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    69b0:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    69b4:	0014060d 	andseq	r0, r4, sp, lsl #12
    69b8:	0e0a0100 	adfeqe	f0, f2, f0
    69bc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    69c0:	01190101 	tsteq	r9, r1, lsl #2
    69c4:	000014e5 	andeq	r1, r0, r5, ror #9
    69c8:	01050e01 	tsteq	r5, r1, lsl #28
    69cc:	00000081 	andeq	r0, r0, r1, lsl #1
    69d0:	0000185c 	andeq	r1, r0, ip, asr r8
    69d4:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    69d8:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    69dc:	731a0000 	tstvc	sl, #0
    69e0:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    69e4:	0000c113 	andeq	ip, r0, r3, lsl r1
    69e8:	00240b00 	eoreq	r0, r4, r0, lsl #22
    69ec:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    69f0:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    69f4:	00044923 	andeq	r4, r4, r3, lsr #18
    69f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    69fc:	14561d1c 	ldrbne	r1, [r6], #-3356	; 0xfffff2e4
    6a00:	13010000 	movwne	r0, #4096	; 0x1000
    6a04:	00008106 	andeq	r8, r0, r6, lsl #2
    6a08:	00242900 	eoreq	r2, r4, r0, lsl #18
    6a0c:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    6a10:	0a140100 	beq	506e18 <__ccfg+0x4e6e70>
    6a14:	000000b5 	strheq	r0, [r0], -r5
    6a18:	00649102 	rsbeq	r9, r4, r2, lsl #2
    6a1c:	01c8040e 	biceq	r0, r8, lr, lsl #8
    6a20:	2d000000 	stccs	0, cr0, [r0, #-0]
    6a24:	03000004 	movweq	r0, #4
    6a28:	001dff00 	andseq	pc, sp, r0, lsl #30
    6a2c:	72010400 	andvc	r0, r1, #0, 8
    6a30:	0c000001 	stceq	0, cr0, [r0], {1}
    6a34:	000014ed 	andeq	r1, r0, sp, ror #9
    6a38:	000000d3 	ldrdeq	r0, [r0], -r3
    6a3c:	00000c80 	andeq	r0, r0, r0, lsl #25
    6a40:	00000000 	andeq	r0, r0, r0
    6a44:	00004d0b 	andeq	r4, r0, fp, lsl #26
    6a48:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    6a4c:	02000003 	andeq	r0, r0, #3
    6a50:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    6a54:	04020000 	streq	r0, [r2], #-0
    6a58:	0000b005 	andeq	fp, r0, r5
    6a5c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6a60:	000000ab 	andeq	r0, r0, fp, lsr #1
    6a64:	00223c03 	eoreq	r3, r2, r3, lsl #24
    6a68:	182e0200 	stmdane	lr!, {r9}
    6a6c:	0000004d 	andeq	r0, r0, sp, asr #32
    6a70:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    6a74:	03000003 	movweq	r0, #3
    6a78:	0000212a 	andeq	r2, r0, sl, lsr #2
    6a7c:	60193102 	andsvs	r3, r9, r2, lsl #2
    6a80:	02000000 	andeq	r0, r0, #0
    6a84:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    6a88:	f3030000 	vhadd.u8	d0, d3, d0
    6a8c:	02000017 	andeq	r0, r0, #23
    6a90:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6a94:	04020000 	streq	r0, [r2], #-0
    6a98:	00008507 	andeq	r8, r0, r7, lsl #10
    6a9c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6aa0:	00000080 	andeq	r0, r0, r0, lsl #1
    6aa4:	69050404 	stmdbvs	r5, {r2, sl}
    6aa8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6aac:	008a0704 	addeq	r0, sl, r4, lsl #14
    6ab0:	00030000 	andeq	r0, r3, r0
    6ab4:	03000016 	movweq	r0, #22
    6ab8:	00541227 	subseq	r1, r4, r7, lsr #4
    6abc:	8f050000 	svchi	0x00050000
    6ac0:	03000000 	movweq	r0, #0
    6ac4:	000013f8 	strdeq	r1, [r0], -r8
    6ac8:	41122b03 	tstmi	r2, r3, lsl #22
    6acc:	06000000 	streq	r0, [r0], -r0
    6ad0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ad4:	00165103 	andseq	r5, r6, r3, lsl #2
    6ad8:	122c0300 	eorne	r0, ip, #0, 6
    6adc:	00000067 	andeq	r0, r0, r7, rrx
    6ae0:	0000b105 	andeq	fp, r0, r5, lsl #2
    6ae4:	02a60300 	adceq	r0, r6, #0, 6
    6ae8:	2d030000 	stccs	0, cr0, [r3, #-0]
    6aec:	00006712 	andeq	r6, r0, r2, lsl r7
    6af0:	03080700 	movweq	r0, #34560	; 0x8700
    6af4:	015c0932 	cmpeq	ip, r2, lsr r9
    6af8:	c1080000 	mrsgt	r0, (UNDEF: 8)
    6afc:	03000002 	movweq	r0, #2
    6b00:	00a00734 	adceq	r0, r0, r4, lsr r7
    6b04:	01010000 	mrseq	r0, (UNDEF: 1)
    6b08:	a4080007 	strge	r0, [r8], #-7
    6b0c:	03000000 	movweq	r0, #0
    6b10:	00a00335 	adceq	r0, r0, r5, lsr r3
    6b14:	01010000 	mrseq	r0, (UNDEF: 1)
    6b18:	8f080006 	svchi	0x00080006
    6b1c:	03000002 	movweq	r0, #2
    6b20:	00a00336 	adceq	r0, r0, r6, lsr r3
    6b24:	01010000 	mrseq	r0, (UNDEF: 1)
    6b28:	2b080005 	blcs	206b44 <__ccfg+0x1e6b9c>
    6b2c:	03000004 	movweq	r0, #4
    6b30:	00a00337 	adceq	r0, r0, r7, lsr r3
    6b34:	01010000 	mrseq	r0, (UNDEF: 1)
    6b38:	24080004 	strcs	r0, [r8], #-4
    6b3c:	03000004 	movweq	r0, #4
    6b40:	00a00338 	adceq	r0, r0, r8, lsr r3
    6b44:	04010000 	streq	r0, [r1], #-0
    6b48:	15090000 	strne	r0, [r9, #-0]
    6b4c:	03000004 	movweq	r0, #4
    6b50:	00a0073a 	adceq	r0, r0, sl, lsr r7
    6b54:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6b58:	0000004c 	andeq	r0, r0, ip, asr #32
    6b5c:	a0033c03 	andge	r3, r3, r3, lsl #24
    6b60:	02000000 	andeq	r0, r0, #0
    6b64:	00007909 	andeq	r7, r0, r9, lsl #18
    6b68:	033d0300 	teqeq	sp, #0, 6
    6b6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6b70:	01610903 	cmneq	r1, r3, lsl #18
    6b74:	3f030000 	svccc	0x00030000
    6b78:	0000b108 	andeq	fp, r0, r8, lsl #2
    6b7c:	03000400 	movweq	r0, #1024	; 0x400
    6b80:	00000454 	andeq	r0, r0, r4, asr r4
    6b84:	ce034103 	adfgts	f4, f3, f3
    6b88:	06000000 	streq	r0, [r0], -r0
    6b8c:	0000015c 	andeq	r0, r0, ip, asr r1
    6b90:	0002b50a 	andeq	fp, r2, sl, lsl #10
    6b94:	1a430300 	bne	10c779c <__ccfg+0x10a77f4>
    6b98:	00000168 	andeq	r0, r0, r8, ror #2
    6b9c:	210a0101 	tstcs	sl, r1, lsl #2
    6ba0:	03000003 	movweq	r0, #3
    6ba4:	01890e45 	orreq	r0, r9, r5, asr #28
    6ba8:	01010000 	mrseq	r0, (UNDEF: 1)
    6bac:	018f040b 	orreq	r0, pc, fp, lsl #8
    6bb0:	01020000 	mrseq	r0, (UNDEF: 2)
    6bb4:	0003be08 	andeq	fp, r3, r8, lsl #28
    6bb8:	018f0500 	orreq	r0, pc, r0, lsl #10
    6bbc:	2f0a0000 	svccs	0x000a0000
    6bc0:	03000003 	movweq	r0, #3
    6bc4:	01891e45 	orreq	r1, r9, r5, asr #28
    6bc8:	01010000 	mrseq	r0, (UNDEF: 1)
    6bcc:	8f040807 	svchi	0x00040807
    6bd0:	0001da09 	andeq	sp, r1, r9, lsl #20
    6bd4:	02c80900 	sbceq	r0, r8, #0, 18
    6bd8:	90040000 	andls	r0, r4, r0
    6bdc:	0000670b 	andeq	r6, r0, fp, lsl #14
    6be0:	2d090000 	stccs	0, cr0, [r9, #-0]
    6be4:	04000006 	streq	r0, [r0], #-6
    6be8:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    6bec:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6bf0:	0000049c 	muleq	r0, ip, r4
    6bf4:	ac109204 	lfmge	f1, 1, [r0], {4}
    6bf8:	06000000 	streq	r0, [r0], -r0
    6bfc:	04320300 	ldrteq	r0, [r2], #-768	; 0xfffffd00
    6c00:	93040000 	movwls	r0, #16384	; 0x4000
    6c04:	0001a903 	andeq	sl, r1, r3, lsl #18
    6c08:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    6c0c:	01f10000 	mvnseq	r0, r0
    6c10:	000d0000 	andeq	r0, sp, r0
    6c14:	0000420a 	andeq	r4, r0, sl, lsl #4
    6c18:	0f990400 	svceq	0x00990400
    6c1c:	000001e6 	andeq	r0, r0, r6, ror #3
    6c20:	01070101 	tsteq	r7, r1, lsl #2
    6c24:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    6c28:	08000002 	stmdaeq	r0, {r1}
    6c2c:	0000048f 	andeq	r0, r0, pc, lsl #9
    6c30:	a0079305 	andge	r9, r7, r5, lsl #6
    6c34:	01000000 	mrseq	r0, (UNDEF: 0)
    6c38:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    6c3c:	0000003d 	andeq	r0, r0, sp, lsr r0
    6c40:	a0039405 	andge	r9, r3, r5, lsl #8
    6c44:	01000000 	mrseq	r0, (UNDEF: 0)
    6c48:	00000001 	andeq	r0, r0, r1
    6c4c:	00028603 	andeq	r8, r2, r3, lsl #12
    6c50:	03960500 	orrseq	r0, r6, #0, 10
    6c54:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6c58:	00022905 	andeq	r2, r2, r5, lsl #18
    6c5c:	02350c00 	eorseq	r0, r5, #0, 24
    6c60:	02450000 	subeq	r0, r5, #0
    6c64:	000d0000 	andeq	r0, sp, r0
    6c68:	00023a05 	andeq	r3, r2, r5, lsl #20
    6c6c:	02eb0a00 	rsceq	r0, fp, #0, 20
    6c70:	9c050000 	stcls	0, cr0, [r5], {-0}
    6c74:	00024517 	andeq	r4, r2, r7, lsl r5
    6c78:	0c010100 	stfeqs	f0, [r1], {-0}
    6c7c:	0000009b 	muleq	r0, fp, r0
    6c80:	00000263 	andeq	r0, r0, r3, ror #4
    6c84:	5805000d 	stmdapl	r5, {r0, r2, r3}
    6c88:	0a000002 	beq	6c98 <__exidx_end+0x3e24>
    6c8c:	000003a7 	andeq	r0, r0, r7, lsr #7
    6c90:	63130606 	tstvs	r3, #6291456	; 0x600000
    6c94:	01000002 	tsteq	r0, r2
    6c98:	01410a01 	cmpeq	r1, r1, lsl #20
    6c9c:	c3040000 	movwgt	r0, #16384	; 0x4000
    6ca0:	0000b10e 	andeq	fp, r0, lr, lsl #2
    6ca4:	0e010100 	adfeqs	f0, f1, f0
    6ca8:	000004a9 	andeq	r0, r0, r9, lsr #9
    6cac:	10016e07 	andne	r6, r1, r7, lsl #28
    6cb0:	00000291 	muleq	r0, r1, r2
    6cb4:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    6cb8:	010f0000 	mrseq	r0, CPSR
    6cbc:	000002a3 	andeq	r0, r0, r3, lsr #5
    6cc0:	00008f10 	andeq	r8, r0, r0, lsl pc
    6cc4:	960c0000 	strls	r0, [ip], -r0
    6cc8:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    6ccc:	0d000002 	stceq	0, cr0, [r0, #-8]
    6cd0:	02a30500 	adceq	r0, r3, #0, 10
    6cd4:	64110000 	ldrvs	r0, [r1], #-0
    6cd8:	07000004 	streq	r0, [r0, -r4]
    6cdc:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    6ce0:	01000002 	tsteq	r0, r2
    6ce4:	039f1101 	orrseq	r1, pc, #1073741824	; 0x40000000
    6ce8:	82070000 	andhi	r0, r7, #0
    6cec:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    6cf0:	01010000 	mrseq	r0, (UNDEF: 1)
    6cf4:	00049411 	andeq	r9, r4, r1, lsl r4
    6cf8:	02d80700 	sbcseq	r0, r8, #0, 14
    6cfc:	0000b10e 	andeq	fp, r0, lr, lsl #2
    6d00:	12010100 	andne	r0, r1, #0, 2
    6d04:	03030708 	movweq	r0, #14088	; 0x3708
    6d08:	00030709 	andeq	r0, r3, r9, lsl #14
    6d0c:	22341300 	eorscs	r1, r4, #0, 6
    6d10:	07070000 	streq	r0, [r7, -r0]
    6d14:	008f0703 	addeq	r0, pc, r3, lsl #14
    6d18:	13000000 	movwne	r0, #0
    6d1c:	0000057f 	andeq	r0, r0, pc, ror r5
    6d20:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    6d24:	000000c2 	andeq	r0, r0, r2, asr #1
    6d28:	660e0004 	strvs	r0, [lr], -r4
    6d2c:	07000002 	streq	r0, [r0, -r2]
    6d30:	e0030309 	and	r0, r3, r9, lsl #6
    6d34:	14000002 	strne	r0, [r0], #-2
    6d38:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    6d3c:	030b0730 	movweq	r0, #46896	; 0xb730
    6d40:	00037708 	andeq	r7, r3, r8, lsl #14
    6d44:	04b11300 	ldrteq	r1, [r1], #768	; 0x300
    6d48:	14070000 	strne	r0, [r7], #-0
    6d4c:	008f0803 	addeq	r0, pc, r3, lsl #16
    6d50:	13000000 	movwne	r0, #0
    6d54:	000002d2 	ldrdeq	r0, [r0], -r2
    6d58:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    6d5c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6d60:	04ac1302 	strteq	r1, [ip], #770	; 0x302
    6d64:	16070000 	strne	r0, [r7], -r0
    6d68:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    6d6c:	13040000 	movwne	r0, #16384	; 0x4000
    6d70:	00000f7f 	andeq	r0, r0, pc, ror pc
    6d74:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    6d78:	000000c2 	andeq	r0, r0, r2, asr #1
    6d7c:	045d1308 	ldrbeq	r1, [sp], #-776	; 0xfffffcf8
    6d80:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    6d84:	03770f03 	cmneq	r7, #3, 30
    6d88:	130c0000 	movwne	r0, #49152	; 0xc000
    6d8c:	000002cd 	andeq	r0, r0, sp, asr #5
    6d90:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    6d94:	00000387 	andeq	r0, r0, r7, lsl #7
    6d98:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    6d9c:	87000003 	strhi	r0, [r0, -r3]
    6da0:	15000003 	strne	r0, [r0, #-3]
    6da4:	00000088 	andeq	r0, r0, r8, lsl #1
    6da8:	040b0003 	streq	r0, [fp], #-3
    6dac:	00000314 	andeq	r0, r0, r4, lsl r3
    6db0:	0004c30e 	andeq	ip, r4, lr, lsl #6
    6db4:	031c0700 	tsteq	ip, #0, 14
    6db8:	0003141b 	andeq	r1, r3, fp, lsl r4
    6dbc:	03951100 	orrseq	r1, r5, #0, 2
    6dc0:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    6dc4:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    6dc8:	01010000 	mrseq	r0, (UNDEF: 1)
    6dcc:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    6dd0:	01160000 	tsteq	r6, r0
    6dd4:	00001537 	andeq	r1, r0, r7, lsr r5
    6dd8:	01011d01 	tsteq	r1, r1, lsl #26
    6ddc:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    6de0:	0000192c 	andeq	r1, r0, ip, lsr #18
    6de4:	042a9c01 	strteq	r9, [sl], #-3073	; 0xfffff3ff
    6de8:	cb170000 	blgt	5c6df0 <__ccfg+0x5a6e48>
    6dec:	01000000 	mrseq	r0, (UNDEF: 0)
    6df0:	008f011d 	addeq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    6df4:	24730000 	ldrbtcs	r0, [r3], #-0
    6df8:	7f180000 	svcvc	0x00180000
    6dfc:	0100000f 	tsteq	r0, pc
    6e00:	042a011d 	strteq	r0, [sl], #-285	; 0xfffffee3
    6e04:	249c0000 	ldrcs	r0, [ip], #0
    6e08:	43190000 	tstmi	r9, #0
    6e0c:	01000015 	tsteq	r0, r5, lsl r0
    6e10:	681a0130 	ldmdavs	sl, {r4, r5, r8}
    6e14:	1b00000c 	blne	6e4c <__exidx_end+0x3fd8>
    6e18:	00727470 	rsbseq	r7, r2, r0, ror r4
    6e1c:	2a152201 	bcs	54f628 <__ccfg+0x52f680>
    6e20:	05000004 	streq	r0, [r0, #-4]
    6e24:	00006803 	andeq	r6, r0, r3, lsl #16
    6e28:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    6e2c:	2301006e 	movwcs	r0, #4206	; 0x106e
    6e30:	0000810d 	andeq	r8, r0, sp, lsl #2
    6e34:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    6e38:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    6e3c:	00001531 	andeq	r1, r0, r1, lsr r5
    6e40:	81062401 	tsthi	r6, r1, lsl #8
    6e44:	c6000000 	strgt	r0, [r0], -r0
    6e48:	00000024 	andeq	r0, r0, r4, lsr #32
    6e4c:	96040b00 	strls	r0, [r4], -r0, lsl #22
    6e50:	00000001 	andeq	r0, r0, r1
    6e54:	00000440 	andeq	r0, r0, r0, asr #8
    6e58:	1f730003 	svcne	0x00730003
    6e5c:	01040000 	mrseq	r0, (UNDEF: 4)
    6e60:	00000172 	andeq	r0, r0, r2, ror r1
    6e64:	0015590c 	andseq	r5, r5, ip, lsl #18
    6e68:	0000d300 	andeq	sp, r0, r0, lsl #6
    6e6c:	000cb000 	andeq	fp, ip, r0
    6e70:	00000000 	andeq	r0, r0, r0
    6e74:	004eb000 	subeq	fp, lr, r0
    6e78:	06010200 	streq	r0, [r1], -r0, lsl #4
    6e7c:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    6e80:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    6e84:	02000003 	andeq	r0, r0, #3
    6e88:	00b00504 	adcseq	r0, r0, r4, lsl #10
    6e8c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6e90:	0000ab05 	andeq	sl, r0, r5, lsl #22
    6e94:	223c0300 	eorscs	r0, ip, #0, 6
    6e98:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6e9c:	00004d18 	andeq	r4, r0, r8, lsl sp
    6ea0:	08010200 	stmdaeq	r1, {r9}
    6ea4:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    6ea8:	00212a03 	eoreq	r2, r1, r3, lsl #20
    6eac:	19310200 	ldmdbne	r1!, {r9}
    6eb0:	00000060 	andeq	r0, r0, r0, rrx
    6eb4:	73070202 	movwvc	r0, #29186	; 0x7202
    6eb8:	03000002 	movweq	r0, #2
    6ebc:	000017f3 	strdeq	r1, [r0], -r3
    6ec0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6ec4:	02000000 	andeq	r0, r0, #0
    6ec8:	00850704 	addeq	r0, r5, r4, lsl #14
    6ecc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6ed0:	00008007 	andeq	r8, r0, r7
    6ed4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6ed8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6edc:	8a070402 	bhi	1c7eec <__ccfg+0x1a7f44>
    6ee0:	03000000 	movweq	r0, #0
    6ee4:	00001600 	andeq	r1, r0, r0, lsl #12
    6ee8:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    6eec:	05000000 	streq	r0, [r0, #-0]
    6ef0:	0000008f 	andeq	r0, r0, pc, lsl #1
    6ef4:	0013f803 	andseq	pc, r3, r3, lsl #16
    6ef8:	122b0300 	eorne	r0, fp, #0, 6
    6efc:	00000041 	andeq	r0, r0, r1, asr #32
    6f00:	0000a006 	andeq	sl, r0, r6
    6f04:	16510300 	ldrbne	r0, [r1], -r0, lsl #6
    6f08:	2c030000 	stccs	0, cr0, [r3], {-0}
    6f0c:	00006712 	andeq	r6, r0, r2, lsl r7
    6f10:	00b10500 	adcseq	r0, r1, r0, lsl #10
    6f14:	a6030000 	strge	r0, [r3], -r0
    6f18:	03000002 	movweq	r0, #2
    6f1c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6f20:	a2030000 	andge	r0, r3, #0
    6f24:	03000007 	movweq	r0, #7
    6f28:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    6f2c:	04070000 	streq	r0, [r7], #-0
    6f30:	0000008f 	andeq	r0, r0, pc, lsl #1
    6f34:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    6f38:	00016e09 	andeq	r6, r1, r9, lsl #28
    6f3c:	02c10900 	sbceq	r0, r1, #0, 18
    6f40:	34030000 	strcc	r0, [r3], #-0
    6f44:	0000a007 	andeq	sl, r0, r7
    6f48:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6f4c:	00a40900 	adceq	r0, r4, r0, lsl #18
    6f50:	35030000 	strcc	r0, [r3, #-0]
    6f54:	0000a003 	andeq	sl, r0, r3
    6f58:	06010100 	streq	r0, [r1], -r0, lsl #2
    6f5c:	028f0900 	addeq	r0, pc, #0, 18
    6f60:	36030000 	strcc	r0, [r3], -r0
    6f64:	0000a003 	andeq	sl, r0, r3
    6f68:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6f6c:	042b0900 	strteq	r0, [fp], #-2304	; 0xfffff700
    6f70:	37030000 	strcc	r0, [r3, -r0]
    6f74:	0000a003 	andeq	sl, r0, r3
    6f78:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6f7c:	04240900 	strteq	r0, [r4], #-2304	; 0xfffff700
    6f80:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    6f84:	0000a003 	andeq	sl, r0, r3
    6f88:	00040100 	andeq	r0, r4, r0, lsl #2
    6f8c:	04150a00 	ldreq	r0, [r5], #-2560	; 0xfffff600
    6f90:	3a030000 	bcc	c6f98 <__ccfg+0xa6ff0>
    6f94:	0000a007 	andeq	sl, r0, r7
    6f98:	4c0a0100 	stfmis	f0, [sl], {-0}
    6f9c:	03000000 	movweq	r0, #0
    6fa0:	00a0033c 	adceq	r0, r0, ip, lsr r3
    6fa4:	0a020000 	beq	86fac <__ccfg+0x67004>
    6fa8:	00000079 	andeq	r0, r0, r9, ror r0
    6fac:	a0033d03 	andge	r3, r3, r3, lsl #26
    6fb0:	03000000 	movweq	r0, #0
    6fb4:	0001610a 	andeq	r6, r1, sl, lsl #2
    6fb8:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    6fbc:	000000b1 	strheq	r0, [r0], -r1
    6fc0:	54030004 	strpl	r0, [r3], #-4
    6fc4:	03000004 	movweq	r0, #4
    6fc8:	00e00341 	rsceq	r0, r0, r1, asr #6
    6fcc:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    6fd0:	0b000001 	bleq	6fdc <__exidx_end+0x4168>
    6fd4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    6fd8:	7a1a4303 	bvc	697bec <__ccfg+0x677c44>
    6fdc:	01000001 	tsteq	r0, r1
    6fe0:	03210b01 			; <UNDEFINED> instruction: 0x03210b01
    6fe4:	45030000 	strmi	r0, [r3, #-0]
    6fe8:	00019b0e 	andeq	r9, r1, lr, lsl #22
    6fec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6ff0:	0001a104 	andeq	sl, r1, r4, lsl #2
    6ff4:	08010200 	stmdaeq	r1, {r9}
    6ff8:	000003be 			; <UNDEFINED> instruction: 0x000003be
    6ffc:	0001a105 	andeq	sl, r1, r5, lsl #2
    7000:	032f0b00 			; <UNDEFINED> instruction: 0x032f0b00
    7004:	45030000 	strmi	r0, [r3, #-0]
    7008:	00019b1e 	andeq	r9, r1, lr, lsl fp
    700c:	08010100 	stmdaeq	r1, {r8}
    7010:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    7014:	000001ec 	andeq	r0, r0, ip, ror #3
    7018:	0002c80a 	andeq	ip, r2, sl, lsl #16
    701c:	0b900400 	bleq	fe408024 <_estack+0xde403024>
    7020:	00000067 	andeq	r0, r0, r7, rrx
    7024:	062d0a00 	strteq	r0, [sp], -r0, lsl #20
    7028:	91040000 	mrsls	r0, (UNDEF: 4)
    702c:	00008f08 	andeq	r8, r0, r8, lsl #30
    7030:	9c0a0400 	cfstrsls	mvf0, [sl], {-0}
    7034:	04000004 	streq	r0, [r0], #-4
    7038:	00ac1092 	umlaleq	r1, ip, r2, r0
    703c:	00060000 	andeq	r0, r6, r0
    7040:	00043203 	andeq	r3, r4, r3, lsl #4
    7044:	03930400 	orrseq	r0, r3, #0, 8
    7048:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    704c:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    7050:	00020300 	andeq	r0, r2, r0, lsl #6
    7054:	0b000d00 	bleq	a45c <__exidx_end+0x75e8>
    7058:	00000042 	andeq	r0, r0, r2, asr #32
    705c:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    7060:	01000001 	tsteq	r0, r1
    7064:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    7068:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    706c:	8f090000 	svchi	0x00090000
    7070:	05000004 	streq	r0, [r0, #-4]
    7074:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    7078:	07010000 	streq	r0, [r1, -r0]
    707c:	3d090001 	stccc	0, cr0, [r9, #-4]
    7080:	05000000 	streq	r0, [r0, #-0]
    7084:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    7088:	01010000 	mrseq	r0, (UNDEF: 1)
    708c:	03000000 	movweq	r0, #0
    7090:	00000286 	andeq	r0, r0, r6, lsl #5
    7094:	11039605 	tstne	r3, r5, lsl #12
    7098:	05000002 	streq	r0, [r0, #-2]
    709c:	0000023b 	andeq	r0, r0, fp, lsr r2
    70a0:	0002470c 	andeq	r4, r2, ip, lsl #14
    70a4:	00025700 	andeq	r5, r2, r0, lsl #14
    70a8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    70ac:	0000024c 	andeq	r0, r0, ip, asr #4
    70b0:	0002eb0b 	andeq	lr, r2, fp, lsl #22
    70b4:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    70b8:	00000257 	andeq	r0, r0, r7, asr r2
    70bc:	9b0c0101 	blls	3074c8 <__ccfg+0x2e7520>
    70c0:	75000000 	strvc	r0, [r0, #-0]
    70c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    70c8:	026a0500 	rsbeq	r0, sl, #0, 10
    70cc:	a70b0000 	strge	r0, [fp, -r0]
    70d0:	06000003 	streq	r0, [r0], -r3
    70d4:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    70d8:	01010000 	mrseq	r0, (UNDEF: 1)
    70dc:	0001410b 	andeq	r4, r1, fp, lsl #2
    70e0:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    70e4:	000000b1 	strheq	r0, [r0], -r1
    70e8:	a90e0101 	stmdbge	lr, {r0, r8}
    70ec:	07000004 	streq	r0, [r0, -r4]
    70f0:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    70f4:	07000002 	streq	r0, [r0, -r2]
    70f8:	0002a904 	andeq	sl, r2, r4, lsl #18
    70fc:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    7100:	10000002 	andne	r0, r0, r2
    7104:	0000008f 	andeq	r0, r0, pc, lsl #1
    7108:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    710c:	02c00000 	sbceq	r0, r0, #0
    7110:	000d0000 	andeq	r0, sp, r0
    7114:	0002b505 	andeq	fp, r2, r5, lsl #10
    7118:	04641100 	strbteq	r1, [r4], #-256	; 0xffffff00
    711c:	7f070000 	svcvc	0x00070000
    7120:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    7124:	01010000 	mrseq	r0, (UNDEF: 1)
    7128:	00039f11 	andeq	r9, r3, r1, lsl pc
    712c:	01820700 	orreq	r0, r2, r0, lsl #14
    7130:	0000bd14 	andeq	fp, r0, r4, lsl sp
    7134:	11010100 	mrsne	r0, (UNDEF: 17)
    7138:	00000494 	muleq	r0, r4, r4
    713c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    7140:	000000b1 	strheq	r0, [r0], -r1
    7144:	08120101 	ldmdaeq	r2, {r0, r8}
    7148:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    714c:	00000319 	andeq	r0, r0, r9, lsl r3
    7150:	00223413 	eoreq	r3, r2, r3, lsl r4
    7154:	03070700 	movweq	r0, #30464	; 0x7700
    7158:	00008f07 	andeq	r8, r0, r7, lsl #30
    715c:	7f130000 	svcvc	0x00130000
    7160:	07000005 	streq	r0, [r0, -r5]
    7164:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    7168:	04000000 	streq	r0, [r0], #-0
    716c:	02660e00 	rsbeq	r0, r6, #0, 28
    7170:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7174:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    7178:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
    717c:	30000004 	andcc	r0, r0, r4
    7180:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7184:	00000389 	andeq	r0, r0, r9, lsl #7
    7188:	0004b113 	andeq	fp, r4, r3, lsl r1
    718c:	03140700 	tsteq	r4, #0, 14
    7190:	00008f08 	andeq	r8, r0, r8, lsl #30
    7194:	d2130000 	andsle	r0, r3, #0
    7198:	07000002 	streq	r0, [r0, -r2]
    719c:	8f080315 	svchi	0x00080315
    71a0:	02000000 	andeq	r0, r0, #0
    71a4:	0004ac13 	andeq	sl, r4, r3, lsl ip
    71a8:	03160700 	tsteq	r6, #0, 14
    71ac:	0002960b 	andeq	r9, r2, fp, lsl #12
    71b0:	7f130400 	svcvc	0x00130400
    71b4:	0700000f 	streq	r0, [r0, -pc]
    71b8:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    71bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    71c0:	00045d13 	andeq	r5, r4, r3, lsl sp
    71c4:	03180700 	tsteq	r8, #0, 14
    71c8:	0003890f 	andeq	r8, r3, pc, lsl #18
    71cc:	cd130c00 	ldcgt	12, cr0, [r3, #-0]
    71d0:	07000002 	streq	r0, [r0, -r2]
    71d4:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    71d8:	2c000003 	stccs	0, cr0, [r0], {3}
    71dc:	03190c00 	tsteq	r9, #0, 24
    71e0:	03990000 	orrseq	r0, r9, #0
    71e4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    71e8:	03000000 	movweq	r0, #0
    71ec:	26040700 	strcs	r0, [r4], -r0, lsl #14
    71f0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    71f4:	000004c3 	andeq	r0, r0, r3, asr #9
    71f8:	1b031c07 	blne	ce21c <__ccfg+0xae274>
    71fc:	00000326 	andeq	r0, r0, r6, lsr #6
    7200:	00039511 	andeq	r9, r3, r1, lsl r5
    7204:	031e0700 	tsteq	lr, #0, 14
    7208:	0003bb14 	andeq	fp, r3, r4, lsl fp
    720c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7210:	00039f04 	andeq	r9, r3, r4, lsl #30
    7214:	14061600 	strne	r1, [r6], #-1536	; 0xfffffa00
    7218:	0d010000 	stceq	0, cr0, [r1, #-0]
    721c:	00019b07 	andeq	r9, r1, r7, lsl #22
    7220:	03050100 	movweq	r0, #20736	; 0x5100
    7224:	2000006c 	andcs	r0, r0, ip, rrx
    7228:	154e0117 	strbne	r0, [lr, #-279]	; 0xfffffee9
    722c:	23010000 	movwcs	r0, #4096	; 0x1000
    7230:	192c0101 	stmdbne	ip!, {r0, r8}
    7234:	1a480000 	bne	120723c <__ccfg+0x11e7294>
    7238:	9c010000 	stcls	0, cr0, [r1], {-0}
    723c:	0000cb18 	andeq	ip, r0, r8, lsl fp
    7240:	01230100 			; <UNDEFINED> instruction: 0x01230100
    7244:	0000008f 	andeq	r0, r0, pc, lsl #1
    7248:	000024d9 	ldrdeq	r2, [r0], -r9
    724c:	000f7f19 	andeq	r7, pc, r9, lsl pc	; <UNPREDICTABLE>
    7250:	01230100 			; <UNDEFINED> instruction: 0x01230100
    7254:	000000ce 	andeq	r0, r0, lr, asr #1
    7258:	000024f7 	strdeq	r2, [r0], -r7
    725c:	000c901a 	andeq	r9, ip, sl, lsl r0
    7260:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    7264:	28010072 	stmdacs	r1, {r1, r4, r5, r6}
    7268:	00019b0f 	andeq	r9, r1, pc, lsl #22
    726c:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    7270:	1b200000 	blne	807278 <__ccfg+0x7e72d0>
    7274:	006e656c 	rsbeq	r6, lr, ip, ror #10
    7278:	810d2901 	tsthi	sp, r1, lsl #18
    727c:	05000000 	streq	r0, [r0, #-0]
    7280:	00007003 	andeq	r7, r0, r3
    7284:	15311920 	ldrne	r1, [r1, #-2336]!	; 0xfffff6e0
    7288:	2a010000 	bcs	47290 <__ccfg+0x272e8>
    728c:	00008106 	andeq	r8, r0, r6, lsl #2
    7290:	00254d00 	eoreq	r4, r5, r0, lsl #26
    7294:	00000000 	andeq	r0, r0, r0
    7298:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    729c:	20eb0003 	rsccs	r0, fp, r3
    72a0:	01040000 	mrseq	r0, (UNDEF: 4)
    72a4:	00000172 	andeq	r0, r0, r2, ror r1
    72a8:	00159c0c 	andseq	r9, r5, ip, lsl #24
    72ac:	0000d300 	andeq	sp, r0, r0, lsl #6
    72b0:	000d3800 	andeq	r3, sp, r0, lsl #16
    72b4:	00000000 	andeq	r0, r0, r0
    72b8:	0050ff00 	subseq	pc, r0, r0, lsl #30
    72bc:	06010200 	streq	r0, [r1], -r0, lsl #4
    72c0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    72c4:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    72c8:	02000003 	andeq	r0, r0, #3
    72cc:	00b00504 	adcseq	r0, r0, r4, lsl #10
    72d0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    72d4:	0000ab05 	andeq	sl, r0, r5, lsl #22
    72d8:	223c0300 	eorscs	r0, ip, #0, 6
    72dc:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    72e0:	00004d18 	andeq	r4, r0, r8, lsl sp
    72e4:	08010200 	stmdaeq	r1, {r9}
    72e8:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    72ec:	00212a03 	eoreq	r2, r1, r3, lsl #20
    72f0:	19310200 	ldmdbne	r1!, {r9}
    72f4:	00000060 	andeq	r0, r0, r0, rrx
    72f8:	73070202 	movwvc	r0, #29186	; 0x7202
    72fc:	03000002 	movweq	r0, #2
    7300:	000017f3 	strdeq	r1, [r0], -r3
    7304:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7308:	02000000 	andeq	r0, r0, #0
    730c:	00850704 	addeq	r0, r5, r4, lsl #14
    7310:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7314:	00008007 	andeq	r8, r0, r7
    7318:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    731c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7320:	8a070402 	bhi	1c8330 <__ccfg+0x1a8388>
    7324:	03000000 	movweq	r0, #0
    7328:	00000b86 	andeq	r0, r0, r6, lsl #23
    732c:	9b1b2803 	blls	6d1340 <__ccfg+0x6b1398>
    7330:	05000000 	streq	r0, [r0, #-0]
    7334:	00000a9c 	muleq	r0, ip, sl
    7338:	b3000904 	movwlt	r0, #2308	; 0x904
    733c:	06000000 	streq	r0, [r0], -r0
    7340:	00000c3c 	andeq	r0, r0, ip, lsr ip
    7344:	000000b3 	strheq	r0, [r0], -r3
    7348:	07000100 	streq	r0, [r0, -r0, lsl #2]
    734c:	0a9e0304 	beq	fe787f64 <_estack+0xde782f64>
    7350:	63030000 	movwvs	r0, #12288	; 0x3000
    7354:	00008f18 	andeq	r8, r0, r8, lsl pc
    7358:	16000300 	strne	r0, [r0], -r0, lsl #6
    735c:	27040000 	strcs	r0, [r4, -r0]
    7360:	00005412 	andeq	r5, r0, r2, lsl r4
    7364:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7368:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    736c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    7370:	0041122b 	subeq	r1, r1, fp, lsr #4
    7374:	d2090000 	andle	r0, r9, #0
    7378:	03000000 	movweq	r0, #0
    737c:	00001651 	andeq	r1, r0, r1, asr r6
    7380:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7384:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7388:	000000e3 	andeq	r0, r0, r3, ror #1
    738c:	0002a603 	andeq	sl, r2, r3, lsl #12
    7390:	122d0400 	eorne	r0, sp, #0, 8
    7394:	00000067 	andeq	r0, r0, r7, rrx
    7398:	0007a203 	andeq	sl, r7, r3, lsl #4
    739c:	102e0400 	eorne	r0, lr, r0, lsl #8
    73a0:	0000010c 	andeq	r0, r0, ip, lsl #2
    73a4:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    73a8:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    73ac:	a0093204 	andge	r3, r9, r4, lsl #4
    73b0:	0c000001 	stceq	0, cr0, [r0], {1}
    73b4:	000002c1 	andeq	r0, r0, r1, asr #5
    73b8:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    73bc:	01000000 	mrseq	r0, (UNDEF: 0)
    73c0:	0c000701 	stceq	7, cr0, [r0], {1}
    73c4:	000000a4 	andeq	r0, r0, r4, lsr #1
    73c8:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    73cc:	01000000 	mrseq	r0, (UNDEF: 0)
    73d0:	0c000601 	stceq	6, cr0, [r0], {1}
    73d4:	0000028f 	andeq	r0, r0, pc, lsl #5
    73d8:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    73dc:	01000000 	mrseq	r0, (UNDEF: 0)
    73e0:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    73e4:	0000042b 	andeq	r0, r0, fp, lsr #8
    73e8:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    73ec:	01000000 	mrseq	r0, (UNDEF: 0)
    73f0:	0c000401 	cfstrseq	mvf0, [r0], {1}
    73f4:	00000424 	andeq	r0, r0, r4, lsr #8
    73f8:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    73fc:	01000000 	mrseq	r0, (UNDEF: 0)
    7400:	0d000004 	stceq	0, cr0, [r0, #-16]
    7404:	00000415 	andeq	r0, r0, r5, lsl r4
    7408:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    740c:	01000000 	mrseq	r0, (UNDEF: 0)
    7410:	00004c0d 	andeq	r4, r0, sp, lsl #24
    7414:	033c0400 	teqeq	ip, #0, 8
    7418:	000000d2 	ldrdeq	r0, [r0], -r2
    741c:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    7420:	3d040000 	stccc	0, cr0, [r4, #-0]
    7424:	0000d203 	andeq	sp, r0, r3, lsl #4
    7428:	610d0300 	mrsvs	r0, SP_mon
    742c:	04000001 	streq	r0, [r0], #-1
    7430:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    7434:	00040000 	andeq	r0, r4, r0
    7438:	00045403 	andeq	r5, r4, r3, lsl #8
    743c:	03410400 	movteq	r0, #5120	; 0x1400
    7440:	00000112 	andeq	r0, r0, r2, lsl r1
    7444:	0001a009 	andeq	sl, r1, r9
    7448:	02b50e00 	adcseq	r0, r5, #0, 28
    744c:	43040000 	movwmi	r0, #16384	; 0x4000
    7450:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    7454:	0e010100 	adfeqs	f0, f1, f0
    7458:	00000321 	andeq	r0, r0, r1, lsr #6
    745c:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    7460:	01000001 	tsteq	r0, r1
    7464:	d3040a01 	movwle	r0, #18945	; 0x4a01
    7468:	02000001 	andeq	r0, r0, #1
    746c:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    7470:	d3080000 	movwle	r0, #32768	; 0x8000
    7474:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7478:	0000032f 	andeq	r0, r0, pc, lsr #6
    747c:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    7480:	01000001 	tsteq	r0, r1
    7484:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    7488:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    748c:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    7490:	05000002 	streq	r0, [r0, #-2]
    7494:	00670b90 	mlseq	r7, r0, fp, r0
    7498:	0d000000 	stceq	0, cr0, [r0, #-0]
    749c:	0000062d 	andeq	r0, r0, sp, lsr #12
    74a0:	c1089105 	tstgt	r8, r5, lsl #2
    74a4:	04000000 	streq	r0, [r0], #-0
    74a8:	00049c0d 	andeq	r9, r4, sp, lsl #24
    74ac:	10920500 	addsne	r0, r2, r0, lsl #10
    74b0:	000000de 	ldrdeq	r0, [r0], -lr
    74b4:	32030006 	andcc	r0, r3, #6
    74b8:	05000004 	streq	r0, [r0, #-4]
    74bc:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    74c0:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    74c4:	35000002 	strcc	r0, [r0, #-2]
    74c8:	10000002 	andne	r0, r0, r2
    74cc:	00420e00 	subeq	r0, r2, r0, lsl #28
    74d0:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    74d4:	00022a0f 	andeq	r2, r2, pc, lsl #20
    74d8:	0b010100 	bleq	478e0 <__ccfg+0x27938>
    74dc:	09910601 	ldmibeq	r1, {r0, r9, sl}
    74e0:	0000026d 	andeq	r0, r0, sp, ror #4
    74e4:	00048f0c 	andeq	r8, r4, ip, lsl #30
    74e8:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    74ec:	000000d2 	ldrdeq	r0, [r0], -r2
    74f0:	00010701 	andeq	r0, r1, r1, lsl #14
    74f4:	00003d0c 	andeq	r3, r0, ip, lsl #26
    74f8:	03940600 	orrseq	r0, r4, #0, 12
    74fc:	000000d2 	ldrdeq	r0, [r0], -r2
    7500:	00000101 	andeq	r0, r0, r1, lsl #2
    7504:	02860300 	addeq	r0, r6, #0, 6
    7508:	96060000 	strls	r0, [r6], -r0
    750c:	00024303 	andeq	r4, r2, r3, lsl #6
    7510:	026d0800 	rsbeq	r0, sp, #0, 16
    7514:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    7518:	89000002 	stmdbhi	r0, {r1}
    751c:	10000002 	andne	r0, r0, r2
    7520:	027e0800 	rsbseq	r0, lr, #0, 16
    7524:	eb0e0000 	bl	38752c <__ccfg+0x367584>
    7528:	06000002 	streq	r0, [r0], -r2
    752c:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    7530:	01010000 	mrseq	r0, (UNDEF: 1)
    7534:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    7538:	0002a700 	andeq	sl, r2, r0, lsl #14
    753c:	08001000 	stmdaeq	r0, {ip}
    7540:	0000029c 	muleq	r0, ip, r2
    7544:	0003a70e 	andeq	sl, r3, lr, lsl #14
    7548:	13060700 	movwne	r0, #26368	; 0x6700
    754c:	000002a7 	andeq	r0, r0, r7, lsr #5
    7550:	410e0101 	tstmi	lr, r1, lsl #2
    7554:	05000001 	streq	r0, [r0, #-1]
    7558:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    755c:	01010000 	mrseq	r0, (UNDEF: 1)
    7560:	0004a911 	andeq	sl, r4, r1, lsl r9
    7564:	016e0800 	cmneq	lr, r0, lsl #16
    7568:	0002d510 	andeq	sp, r2, r0, lsl r5
    756c:	db040a00 	blle	109d74 <__ccfg+0xe9dcc>
    7570:	12000002 	andne	r0, r0, #2
    7574:	0002e701 	andeq	lr, r2, r1, lsl #14
    7578:	00c11300 	sbceq	r1, r1, r0, lsl #6
    757c:	0f000000 	svceq	0x00000000
    7580:	000001da 	ldrdeq	r0, [r0], -sl
    7584:	000002f2 	strdeq	r0, [r0], -r2
    7588:	e7080010 	smlad	r8, r0, r0, r0
    758c:	14000002 	strne	r0, [r0], #-2
    7590:	00000464 	andeq	r0, r0, r4, ror #8
    7594:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7598:	000002f2 	strdeq	r0, [r0], -r2
    759c:	9f140101 	svcls	0x00140101
    75a0:	08000003 	stmdaeq	r0, {r0, r1}
    75a4:	ef140182 	svc	0x00140182
    75a8:	01000000 	mrseq	r0, (UNDEF: 0)
    75ac:	04941401 	ldreq	r1, [r4], #1025	; 0x401
    75b0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    75b4:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    75b8:	01010000 	mrseq	r0, (UNDEF: 1)
    75bc:	03080815 	movweq	r0, #34837	; 0x8815
    75c0:	034b0903 	movteq	r0, #47363	; 0xb903
    75c4:	34160000 	ldrcc	r0, [r6], #-0
    75c8:	08000022 	stmdaeq	r0, {r1, r5}
    75cc:	c1070307 	tstgt	r7, r7, lsl #6
    75d0:	00000000 	andeq	r0, r0, r0
    75d4:	00057f16 	andeq	r7, r5, r6, lsl pc
    75d8:	03080800 	movweq	r0, #34816	; 0x8800
    75dc:	0000f408 	andeq	pc, r0, r8, lsl #8
    75e0:	11000400 	tstne	r0, r0, lsl #8
    75e4:	00000266 	andeq	r0, r0, r6, ror #4
    75e8:	03030908 	movweq	r0, #14600	; 0x3908
    75ec:	00000324 	andeq	r0, r0, r4, lsr #6
    75f0:	0004b817 	andeq	fp, r4, r7, lsl r8
    75f4:	0b083000 	bleq	2135fc <__ccfg+0x1f3654>
    75f8:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    75fc:	b1160000 	tstlt	r6, r0
    7600:	08000004 	stmdaeq	r0, {r2}
    7604:	c1080314 	tstgt	r8, r4, lsl r3
    7608:	00000000 	andeq	r0, r0, r0
    760c:	0002d216 	andeq	sp, r2, r6, lsl r2
    7610:	03150800 	tsteq	r5, #0, 16
    7614:	0000c108 	andeq	ip, r0, r8, lsl #2
    7618:	ac160200 	lfmge	f0, 4, [r6], {-0}
    761c:	08000004 	stmdaeq	r0, {r2}
    7620:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    7624:	04000002 	streq	r0, [r0], #-2
    7628:	000f7f16 	andeq	r7, pc, r6, lsl pc	; <UNPREDICTABLE>
    762c:	03170800 	tsteq	r7, #0, 16
    7630:	0000f409 	andeq	pc, r0, r9, lsl #8
    7634:	5d160800 	ldcpl	8, cr0, [r6, #-0]
    7638:	08000004 	stmdaeq	r0, {r2}
    763c:	bb0f0318 	bllt	3c82a4 <__ccfg+0x3a82fc>
    7640:	0c000003 	stceq	0, cr0, [r0], {3}
    7644:	0002cd16 	andeq	ip, r2, r6, lsl sp
    7648:	03190800 	tsteq	r9, #0, 16
    764c:	0003cb15 	andeq	ip, r3, r5, lsl fp
    7650:	0f002c00 	svceq	0x00002c00
    7654:	0000034b 	andeq	r0, r0, fp, asr #6
    7658:	000003cb 	andeq	r0, r0, fp, asr #7
    765c:	00008818 	andeq	r8, r0, r8, lsl r8
    7660:	0a000300 	beq	8268 <__exidx_end+0x53f4>
    7664:	00035804 	andeq	r5, r3, r4, lsl #16
    7668:	04c31100 	strbeq	r1, [r3], #256	; 0x100
    766c:	1c080000 	stcne	0, cr0, [r8], {-0}
    7670:	03581b03 	cmpeq	r8, #3072	; 0xc00
    7674:	95140000 	ldrls	r0, [r4, #-0]
    7678:	08000003 	stmdaeq	r0, {r0, r1}
    767c:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    7680:	01000003 	tsteq	r0, r3
    7684:	d1040a01 	tstle	r4, r1, lsl #20
    7688:	19000003 	stmdbne	r0, {r0, r1}
    768c:	0015f201 	andseq	pc, r5, r1, lsl #4
    7690:	07910100 	ldreq	r0, [r1, r0, lsl #2]
    7694:	0001cd01 	andeq	ip, r1, r1, lsl #26
    7698:	001c9800 	andseq	r9, ip, r0, lsl #16
    769c:	001ce800 	andseq	lr, ip, r0, lsl #16
    76a0:	689c0100 	ldmvs	ip, {r8}
    76a4:	1a000004 	bne	76bc <__exidx_end+0x4848>
    76a8:	00736572 	rsbseq	r6, r3, r2, ror r5
    76ac:	cd149101 	ldfgtd	f1, [r4, #-4]
    76b0:	6b000001 	blvs	76bc <__exidx_end+0x4848>
    76b4:	1a000025 	bne	7750 <__exidx_end+0x48dc>
    76b8:	01006d66 	tsteq	r0, r6, ror #26
    76bc:	04682591 	strbteq	r2, [r8], #-1425	; 0xfffffa6f
    76c0:	25b50000 	ldrcs	r0, [r5, #0]!
    76c4:	611a0000 	tstvs	sl, r0
    76c8:	91010071 	tstls	r1, r1, ror r0
    76cc:	0000b531 	andeq	fp, r0, r1, lsr r5
    76d0:	0025f400 	eoreq	pc, r5, r0, lsl #8
    76d4:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    76d8:	9301006c 	movwls	r0, #4204	; 0x106c
    76dc:	0000c107 	andeq	ip, r0, r7, lsl #2
    76e0:	00262800 	eoreq	r2, r6, r0, lsl #16
    76e4:	00641b00 	rsbeq	r1, r4, r0, lsl #22
    76e8:	c10c9301 	tstgt	ip, r1, lsl #6
    76ec:	46000000 	strmi	r0, [r0], -r0
    76f0:	1c000026 	stcne	0, cr0, [r0], {38}	; 0x26
    76f4:	000015da 	ldrdeq	r1, [r0], -sl
    76f8:	c2019e01 	andgt	r9, r1, #1, 28
    76fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    7700:	01da040a 	bicseq	r0, sl, sl, lsl #8
    7704:	011d0000 	tsteq	sp, r0
    7708:	000015e5 	andeq	r1, r0, r5, ror #11
    770c:	01060801 	tsteq	r6, r1, lsl #16
    7710:	000000c1 	andeq	r0, r0, r1, asr #1
    7714:	00001a68 	andeq	r1, r0, r8, ror #20
    7718:	00001c98 	muleq	r0, r8, ip
    771c:	721a9c01 	andsvc	r9, sl, #256	; 0x100
    7720:	01007365 	tsteq	r0, r5, ror #6
    7724:	01cd1a08 	biceq	r1, sp, r8, lsl #20
    7728:	26590000 	ldrbcs	r0, [r9], -r0
    772c:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    7730:	24080100 	strcs	r0, [r8], #-256	; 0xffffff00
    7734:	000000c1 	andeq	r0, r0, r1, asr #1
    7738:	0000266c 	andeq	r2, r0, ip, ror #12
    773c:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    7740:	68330801 	ldmdavs	r3!, {r0, fp}
    7744:	7f000004 	svcvc	0x00000004
    7748:	1a000026 	bne	77e8 <__exidx_end+0x4974>
    774c:	01007061 	tsteq	r0, r1, rrx
    7750:	00b53f08 	adcseq	r3, r5, r8, lsl #30
    7754:	26a80000 	strtcs	r0, [r8], r0
    7758:	631b0000 	tstvs	fp, #0
    775c:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    7760:	000001d3 	ldrdeq	r0, [r0], -r3
    7764:	0000274a 	andeq	r2, r0, sl, asr #14
    7768:	0100641e 	tsteq	r0, lr, lsl r4
    776c:	00c1070b 	sbceq	r0, r1, fp, lsl #14
    7770:	91040000 	mrsls	r0, (UNDEF: 4)
    7774:	1f062354 	svcne	0x00062354
    7778:	000015e0 	andeq	r1, r0, r0, ror #11
    777c:	01070d01 	tsteq	r7, r1, lsl #26
    7780:	00001a48 	andeq	r1, r0, r8, asr #20
    7784:	00001a68 	andeq	r1, r0, r8, ror #20
    7788:	7c059c01 	stcvc	12, cr9, [r5], {1}
    778c:	06082300 	streq	r2, [r8], -r0, lsl #6
    7790:	00000509 	andeq	r0, r0, r9, lsl #10
    7794:	01006320 	tsteq	r0, r0, lsr #6
    7798:	00c1120d 	sbceq	r1, r1, sp, lsl #4
    779c:	50010000 	andpl	r0, r1, r0
    77a0:	6f452100 	svcvs	0x00452100
    77a4:	8801006c 	stmdahi	r1, {r2, r3, r5, r6}
    77a8:	001aa201 	andseq	sl, sl, r1, lsl #4
    77ac:	65522100 	ldrbvs	r2, [r2, #-256]	; 0xffffff00
    77b0:	8b010074 	blhi	47988 <__ccfg+0x279e0>
    77b4:	001b0401 	andseq	r0, fp, r1, lsl #8
    77b8:	0ce82200 	sfmeq	f2, 2, [r8]
    77bc:	05450000 	strbeq	r0, [r5, #-0]
    77c0:	76230000 	strtvc	r0, [r3], -r0
    77c4:	01006c61 	tsteq	r0, r1, ror #24
    77c8:	00c10a3a 	sbceq	r0, r1, sl, lsr sl
    77cc:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    77d0:	133a0100 	teqne	sl, #0, 2
    77d4:	00000081 	andeq	r0, r0, r1, lsl #1
    77d8:	00002830 	andeq	r2, r0, r0, lsr r8
    77dc:	0cc02200 	sfmeq	f2, 2, [r0], {0}
    77e0:	056d0000 	strbeq	r0, [sp, #-0]!
    77e4:	761b0000 	ldrvc	r0, [fp], -r0
    77e8:	01006c61 	tsteq	r0, r1, ror #24
    77ec:	00c10a46 	sbceq	r0, r1, r6, asr #20
    77f0:	28430000 	stmdacs	r3, {}^	; <UNPREDICTABLE>
    77f4:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    77f8:	0f460100 	svceq	0x00460100
    77fc:	000000c1 	andeq	r0, r0, r1, asr #1
    7800:	0000286c 	andeq	r2, r0, ip, ror #16
    7804:	0d202200 	sfmeq	f2, 4, [r0, #-0]
    7808:	05950000 	ldreq	r0, [r5]
    780c:	761b0000 	ldrvc	r0, [fp], -r0
    7810:	01006c61 	tsteq	r0, r1, ror #24
    7814:	00e30c55 	rsceq	r0, r3, r5, asr ip
    7818:	28950000 	ldmcs	r5, {}	; <UNPREDICTABLE>
    781c:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    7820:	11550100 	cmpne	r5, r0, lsl #2
    7824:	000000e3 	andeq	r0, r0, r3, ror #1
    7828:	000028a8 	andeq	r2, r0, r8, lsr #17
    782c:	1c262400 	cfstrsne	mvf2, [r6], #-0
    7830:	1c500000 	mrane	r0, r0, acc0
    7834:	05bf0000 	ldreq	r0, [pc, #0]!	; 783c <__exidx_end+0x49c8>
    7838:	761e0000 	ldrvc	r0, [lr], -r0
    783c:	01006c61 	tsteq	r0, r1, ror #24
    7840:	00e30c60 	rsceq	r0, r3, r0, ror #24
    7844:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    7848:	0100691b 	tsteq	r0, fp, lsl r9
    784c:	00810a61 	addeq	r0, r1, r1, ror #20
    7850:	28d10000 	ldmcs	r1, {}^	; <UNPREDICTABLE>
    7854:	22000000 	andcs	r0, r0, #0
    7858:	00000d08 	andeq	r0, r0, r8, lsl #26
    785c:	000005d9 	ldrdeq	r0, [r0], -r9
    7860:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    7864:	0a710100 	beq	1c47c6c <__ccfg+0x1c27cc4>
    7868:	000000c1 	andeq	r0, r0, r1, asr #1
    786c:	000028e4 	andeq	r2, r0, r4, ror #17
    7870:	1c6e2500 	cfstr64ne	mvdx2, [lr], #-0
    7874:	1c8a0000 	stcne	0, cr0, [sl], {0}
    7878:	731b0000 	tstvc	fp, #0
    787c:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    7880:	0001cd0b 	andeq	ip, r1, fp, lsl #26
    7884:	00290400 	eoreq	r0, r9, r0, lsl #8
    7888:	00000000 	andeq	r0, r0, r0
    788c:	0000058f 	andeq	r0, r0, pc, lsl #11
    7890:	22fd0003 	rscscs	r0, sp, #3
    7894:	01040000 	mrseq	r0, (UNDEF: 4)
    7898:	00000172 	andeq	r0, r0, r2, ror r1
    789c:	0016050c 	andseq	r0, r6, ip, lsl #10
    78a0:	0000d300 	andeq	sp, r0, r0, lsl #6
    78a4:	000de000 	andeq	lr, sp, r0
    78a8:	00000000 	andeq	r0, r0, r0
    78ac:	0054c000 	subseq	ip, r4, r0
    78b0:	06010200 	streq	r0, [r1], -r0, lsl #4
    78b4:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    78b8:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    78bc:	02000003 	andeq	r0, r0, #3
    78c0:	00b00504 	adcseq	r0, r0, r4, lsl #10
    78c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    78c8:	0000ab05 	andeq	sl, r0, r5, lsl #22
    78cc:	223c0300 	eorscs	r0, ip, #0, 6
    78d0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    78d4:	00004d18 	andeq	r4, r0, r8, lsl sp
    78d8:	08010200 	stmdaeq	r1, {r9}
    78dc:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    78e0:	00212a03 	eoreq	r2, r1, r3, lsl #20
    78e4:	19310200 	ldmdbne	r1!, {r9}
    78e8:	00000060 	andeq	r0, r0, r0, rrx
    78ec:	73070202 	movwvc	r0, #29186	; 0x7202
    78f0:	03000002 	movweq	r0, #2
    78f4:	000017f3 	strdeq	r1, [r0], -r3
    78f8:	73193402 	tstvc	r9, #33554432	; 0x2000000
    78fc:	02000000 	andeq	r0, r0, #0
    7900:	00850704 	addeq	r0, r5, r4, lsl #14
    7904:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7908:	00008007 	andeq	r8, r0, r7
    790c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7910:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7914:	8a070402 	bhi	1c8924 <__ccfg+0x1a897c>
    7918:	03000000 	movweq	r0, #0
    791c:	00000b86 	andeq	r0, r0, r6, lsl #23
    7920:	9b1b2803 	blls	6d1934 <__ccfg+0x6b198c>
    7924:	05000000 	streq	r0, [r0, #-0]
    7928:	00000a9c 	muleq	r0, ip, sl
    792c:	b3000904 	movwlt	r0, #2308	; 0x904
    7930:	06000000 	streq	r0, [r0], -r0
    7934:	00000c3c 	andeq	r0, r0, ip, lsr ip
    7938:	000000b3 	strheq	r0, [r0], -r3
    793c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7940:	0a9e0304 	beq	fe788558 <_estack+0xde783558>
    7944:	63030000 	movwvs	r0, #12288	; 0x3000
    7948:	00008f18 	andeq	r8, r0, r8, lsl pc
    794c:	041c0300 	ldreq	r0, [ip], #-768	; 0xfffffd00
    7950:	26040000 	strcs	r0, [r4], -r0
    7954:	00004112 	andeq	r4, r0, r2, lsl r1
    7958:	16000300 	strne	r0, [r0], -r0, lsl #6
    795c:	27040000 	strcs	r0, [r4, -r0]
    7960:	00005412 	andeq	r5, r0, r2, lsl r4
    7964:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    7968:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    796c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    7970:	0041122b 	subeq	r1, r1, fp, lsr #4
    7974:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    7978:	03000000 	movweq	r0, #0
    797c:	00001651 	andeq	r1, r0, r1, asr r6
    7980:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7984:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7988:	000000ef 	andeq	r0, r0, pc, ror #1
    798c:	0002a603 	andeq	sl, r2, r3, lsl #12
    7990:	122d0400 	eorne	r0, sp, #0, 8
    7994:	00000067 	andeq	r0, r0, r7, rrx
    7998:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    799c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    79a0:	a0093204 	andge	r3, r9, r4, lsl #4
    79a4:	0c000001 	stceq	0, cr0, [r0], {1}
    79a8:	000002c1 	andeq	r0, r0, r1, asr #5
    79ac:	de073404 	cdple	4, 0, cr3, cr7, cr4, {0}
    79b0:	01000000 	mrseq	r0, (UNDEF: 0)
    79b4:	0c000701 	stceq	7, cr0, [r0], {1}
    79b8:	000000a4 	andeq	r0, r0, r4, lsr #1
    79bc:	de033504 	cfsh32le	mvfx3, mvfx3, #4
    79c0:	01000000 	mrseq	r0, (UNDEF: 0)
    79c4:	0c000601 	stceq	6, cr0, [r0], {1}
    79c8:	0000028f 	andeq	r0, r0, pc, lsl #5
    79cc:	de033604 	cfmadd32le	mvax0, mvfx3, mvfx3, mvfx4
    79d0:	01000000 	mrseq	r0, (UNDEF: 0)
    79d4:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    79d8:	0000042b 	andeq	r0, r0, fp, lsr #8
    79dc:	de033704 	cdple	7, 0, cr3, cr3, cr4, {0}
    79e0:	01000000 	mrseq	r0, (UNDEF: 0)
    79e4:	0c000401 	cfstrseq	mvf0, [r0], {1}
    79e8:	00000424 	andeq	r0, r0, r4, lsr #8
    79ec:	de033804 	cdple	8, 0, cr3, cr3, cr4, {0}
    79f0:	01000000 	mrseq	r0, (UNDEF: 0)
    79f4:	0d000004 	stceq	0, cr0, [r0, #-16]
    79f8:	00000415 	andeq	r0, r0, r5, lsl r4
    79fc:	de073a04 	vmlale.f32	s6, s14, s8
    7a00:	01000000 	mrseq	r0, (UNDEF: 0)
    7a04:	00004c0d 	andeq	r4, r0, sp, lsl #24
    7a08:	033c0400 	teqeq	ip, #0, 8
    7a0c:	000000de 	ldrdeq	r0, [r0], -lr
    7a10:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    7a14:	3d040000 	stccc	0, cr0, [r4, #-0]
    7a18:	0000de03 	andeq	sp, r0, r3, lsl #28
    7a1c:	610d0300 	mrsvs	r0, SP_mon
    7a20:	04000001 	streq	r0, [r0], #-1
    7a24:	00ef083f 	rsceq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    7a28:	00040000 	andeq	r0, r4, r0
    7a2c:	00045403 	andeq	r5, r4, r3, lsl #8
    7a30:	03410400 	movteq	r0, #5120	; 0x1400
    7a34:	00000112 	andeq	r0, r0, r2, lsl r1
    7a38:	0001a009 	andeq	sl, r1, r9
    7a3c:	02b50e00 	adcseq	r0, r5, #0, 28
    7a40:	43040000 	movwmi	r0, #16384	; 0x4000
    7a44:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    7a48:	0e010100 	adfeqs	f0, f1, f0
    7a4c:	00000321 	andeq	r0, r0, r1, lsr #6
    7a50:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    7a54:	01000001 	tsteq	r0, r1
    7a58:	d3040a01 	movwle	r0, #18945	; 0x4a01
    7a5c:	02000001 	andeq	r0, r0, #1
    7a60:	03be0801 			; <UNDEFINED> instruction: 0x03be0801
    7a64:	d3080000 	movwle	r0, #32768	; 0x8000
    7a68:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7a6c:	0000032f 	andeq	r0, r0, pc, lsr #6
    7a70:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    7a74:	01000001 	tsteq	r0, r1
    7a78:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    7a7c:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    7a80:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    7a84:	05000002 	streq	r0, [r0, #-2]
    7a88:	00670b90 	mlseq	r7, r0, fp, r0
    7a8c:	0d000000 	stceq	0, cr0, [r0, #-0]
    7a90:	0000062d 	andeq	r0, r0, sp, lsr #12
    7a94:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    7a98:	04000000 	streq	r0, [r0], #-0
    7a9c:	00049c0d 	andeq	r9, r4, sp, lsl #24
    7aa0:	10920500 	addsne	r0, r2, r0, lsl #10
    7aa4:	000000ea 	andeq	r0, r0, sl, ror #1
    7aa8:	32030006 	andcc	r0, r3, #6
    7aac:	05000004 	streq	r0, [r0, #-4]
    7ab0:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    7ab4:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    7ab8:	35000002 	strcc	r0, [r0, #-2]
    7abc:	10000002 	andne	r0, r0, r2
    7ac0:	00420e00 	subeq	r0, r2, r0, lsl #28
    7ac4:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7ac8:	00022a0f 	andeq	r2, r2, pc, lsl #20
    7acc:	0b010100 	bleq	47ed4 <__ccfg+0x27f2c>
    7ad0:	09910601 	ldmibeq	r1, {r0, r9, sl}
    7ad4:	0000026d 	andeq	r0, r0, sp, ror #4
    7ad8:	00048f0c 	andeq	r8, r4, ip, lsl #30
    7adc:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7ae0:	000000de 	ldrdeq	r0, [r0], -lr
    7ae4:	00010701 	andeq	r0, r1, r1, lsl #14
    7ae8:	00003d0c 	andeq	r3, r0, ip, lsl #26
    7aec:	03940600 	orrseq	r0, r4, #0, 12
    7af0:	000000de 	ldrdeq	r0, [r0], -lr
    7af4:	00000101 	andeq	r0, r0, r1, lsl #2
    7af8:	02860300 	addeq	r0, r6, #0, 6
    7afc:	96060000 	strls	r0, [r6], -r0
    7b00:	00024303 	andeq	r4, r2, r3, lsl #6
    7b04:	026d0800 	rsbeq	r0, sp, #0, 16
    7b08:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    7b0c:	89000002 	stmdbhi	r0, {r1}
    7b10:	10000002 	andne	r0, r0, r2
    7b14:	027e0800 	rsbseq	r0, lr, #0, 16
    7b18:	eb0e0000 	bl	387b20 <__ccfg+0x367b78>
    7b1c:	06000002 	streq	r0, [r0], -r2
    7b20:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    7b24:	01010000 	mrseq	r0, (UNDEF: 1)
    7b28:	0000d90f 	andeq	sp, r0, pc, lsl #18
    7b2c:	0002a700 	andeq	sl, r2, r0, lsl #14
    7b30:	08001000 	stmdaeq	r0, {ip}
    7b34:	0000029c 	muleq	r0, ip, r2
    7b38:	0003a70e 	andeq	sl, r3, lr, lsl #14
    7b3c:	13060700 	movwne	r0, #26368	; 0x6700
    7b40:	000002a7 	andeq	r0, r0, r7, lsr #5
    7b44:	410e0101 	tstmi	lr, r1, lsl #2
    7b48:	05000001 	streq	r0, [r0, #-1]
    7b4c:	00ef0ec3 	rsceq	r0, pc, r3, asr #29
    7b50:	01010000 	mrseq	r0, (UNDEF: 1)
    7b54:	0004a911 	andeq	sl, r4, r1, lsl r9
    7b58:	016e0800 	cmneq	lr, r0, lsl #16
    7b5c:	0002d510 	andeq	sp, r2, r0, lsl r5
    7b60:	db040a00 	blle	10a368 <__ccfg+0xea3c0>
    7b64:	12000002 	andne	r0, r0, #2
    7b68:	0002e701 	andeq	lr, r2, r1, lsl #14
    7b6c:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    7b70:	0f000000 	svceq	0x00000000
    7b74:	000001da 	ldrdeq	r0, [r0], -sl
    7b78:	000002f2 	strdeq	r0, [r0], -r2
    7b7c:	e7080010 	smlad	r8, r0, r0, r0
    7b80:	14000002 	strne	r0, [r0], #-2
    7b84:	00000464 	andeq	r0, r0, r4, ror #8
    7b88:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7b8c:	000002f2 	strdeq	r0, [r0], -r2
    7b90:	9f140101 	svcls	0x00140101
    7b94:	08000003 	stmdaeq	r0, {r0, r1}
    7b98:	fb140182 	blx	5081aa <__ccfg+0x4e8202>
    7b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    7ba0:	04941401 	ldreq	r1, [r4], #1025	; 0x401
    7ba4:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7ba8:	00ef0e02 	rsceq	r0, pc, r2, lsl #28
    7bac:	01010000 	mrseq	r0, (UNDEF: 1)
    7bb0:	03080815 	movweq	r0, #34837	; 0x8815
    7bb4:	034b0903 	movteq	r0, #47363	; 0xb903
    7bb8:	34160000 	ldrcc	r0, [r6], #-0
    7bbc:	08000022 	stmdaeq	r0, {r1, r5}
    7bc0:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    7bc4:	00000000 	andeq	r0, r0, r0
    7bc8:	00057f16 	andeq	r7, r5, r6, lsl pc
    7bcc:	03080800 	movweq	r0, #34816	; 0x8800
    7bd0:	00010008 	andeq	r0, r1, r8
    7bd4:	11000400 	tstne	r0, r0, lsl #8
    7bd8:	00000266 	andeq	r0, r0, r6, ror #4
    7bdc:	03030908 	movweq	r0, #14600	; 0x3908
    7be0:	00000324 	andeq	r0, r0, r4, lsr #6
    7be4:	0004b817 	andeq	fp, r4, r7, lsl r8
    7be8:	0b083000 	bleq	213bf0 <__ccfg+0x1f3c48>
    7bec:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    7bf0:	b1160000 	tstlt	r6, r0
    7bf4:	08000004 	stmdaeq	r0, {r2}
    7bf8:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    7bfc:	00000000 	andeq	r0, r0, r0
    7c00:	0002d216 	andeq	sp, r2, r6, lsl r2
    7c04:	03150800 	tsteq	r5, #0, 16
    7c08:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7c0c:	ac160200 	lfmge	f0, 4, [r6], {-0}
    7c10:	08000004 	stmdaeq	r0, {r2}
    7c14:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    7c18:	04000002 	streq	r0, [r0], #-2
    7c1c:	000f7f16 	andeq	r7, pc, r6, lsl pc	; <UNPREDICTABLE>
    7c20:	03170800 	tsteq	r7, #0, 16
    7c24:	00010009 	andeq	r0, r1, r9
    7c28:	5d160800 	ldcpl	8, cr0, [r6, #-0]
    7c2c:	08000004 	stmdaeq	r0, {r2}
    7c30:	bb0f0318 	bllt	3c8898 <__ccfg+0x3a88f0>
    7c34:	0c000003 	stceq	0, cr0, [r0], {3}
    7c38:	0002cd16 	andeq	ip, r2, r6, lsl sp
    7c3c:	03190800 	tsteq	r9, #0, 16
    7c40:	0003cb15 	andeq	ip, r3, r5, lsl fp
    7c44:	0f002c00 	svceq	0x00002c00
    7c48:	0000034b 	andeq	r0, r0, fp, asr #6
    7c4c:	000003cb 	andeq	r0, r0, fp, asr #7
    7c50:	00008818 	andeq	r8, r0, r8, lsl r8
    7c54:	0a000300 	beq	885c <__exidx_end+0x59e8>
    7c58:	00035804 	andeq	r5, r3, r4, lsl #16
    7c5c:	04c31100 	strbeq	r1, [r3], #256	; 0x100
    7c60:	1c080000 	stcne	0, cr0, [r8], {-0}
    7c64:	03581b03 	cmpeq	r8, #3072	; 0xc00
    7c68:	95140000 	ldrls	r0, [r4, #-0]
    7c6c:	08000003 	stmdaeq	r0, {r0, r1}
    7c70:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    7c74:	01000003 	tsteq	r0, r3
    7c78:	d1040a01 	tstle	r4, r1, lsl #20
    7c7c:	19000003 	stmdbne	r0, {r0, r1}
    7c80:	00164301 	andseq	r4, r6, r1, lsl #6
    7c84:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    7c88:	00008101 	andeq	r8, r0, r1, lsl #2
    7c8c:	001ce800 	andseq	lr, ip, r0, lsl #16
    7c90:	00207800 	eoreq	r7, r0, r0, lsl #16
    7c94:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    7c98:	1a000005 	bne	7cb4 <__exidx_end+0x4e40>
    7c9c:	00667562 	rsbeq	r7, r6, r2, ror #10
    7ca0:	86180801 	ldrhi	r0, [r8], -r1, lsl #16
    7ca4:	17000005 	strne	r0, [r0, -r5]
    7ca8:	1a000029 	bne	7d54 <__exidx_end+0x4ee0>
    7cac:	00746d66 	rsbseq	r6, r4, r6, ror #26
    7cb0:	86290801 	strthi	r0, [r9], -r1, lsl #16
    7cb4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    7cb8:	1a00002b 	bne	7d6c <__exidx_end+0x4ef8>
    7cbc:	01007061 	tsteq	r0, r1, rrx
    7cc0:	00b53608 	adcseq	r3, r5, r8, lsl #12
    7cc4:	2b420000 	blcs	1087ccc <__ccfg+0x1067d24>
    7cc8:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
    7ccc:	0a010063 	beq	47e60 <__ccfg+0x27eb8>
    7cd0:	00008106 	andeq	r8, r0, r6, lsl #2
    7cd4:	002bdb00 	eoreq	sp, fp, r0, lsl #22
    7cd8:	15f81c00 	ldrbne	r1, [r8, #3072]!	; 0xc00
    7cdc:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    7ce0:	16491c11 			; <UNDEFINED> instruction: 0x16491c11
    7ce4:	55010000 	strpl	r0, [r1, #-0]
    7ce8:	1daa1d16 	stcne	13, cr1, [sl, #88]!	; 0x58
    7cec:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
    7cf0:	04880000 	streq	r0, [r8], #0
    7cf4:	761e0000 	ldrvc	r0, [lr], -r0
    7cf8:	01007061 	tsteq	r0, r1, rrx
    7cfc:	010c114e 	tsteq	ip, lr, asr #2
    7d00:	56010000 	strpl	r0, [r1], -r0
    7d04:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    7d08:	c1114e01 	tstgt	r1, r1, lsl #28
    7d0c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    7d10:	0000002c 	andeq	r0, r0, ip, lsr #32
    7d14:	001e1a1d 	andseq	r1, lr, sp, lsl sl
    7d18:	001e6200 	andseq	r6, lr, r0, lsl #4
    7d1c:	0004a400 	andeq	sl, r4, r0, lsl #8
    7d20:	61761e00 	cmnvs	r6, r0, lsl #28
    7d24:	4f010070 	svcmi	0x00010070
    7d28:	00010c11 	andeq	r0, r1, r1, lsl ip
    7d2c:	005e0100 	subseq	r0, lr, r0, lsl #2
    7d30:	000d901f 	andeq	r9, sp, pc, lsl r0
    7d34:	0004d500 	andeq	sp, r4, r0, lsl #10
    7d38:	61761e00 	cmnvs	r6, r0, lsl #28
    7d3c:	50010070 	andpl	r0, r1, r0, ror r0
    7d40:	00010c11 	andeq	r0, r1, r1, lsl ip
    7d44:	205e0100 	subscs	r0, lr, r0, lsl #2
    7d48:	01006364 	tsteq	r0, r4, ror #6
    7d4c:	00811150 	addeq	r1, r1, r0, asr r1
    7d50:	631b0000 	tstvs	fp, #0
    7d54:	11500100 	cmpne	r0, r0, lsl #2
    7d58:	000001d3 	ldrdeq	r0, [r0], -r3
    7d5c:	00002c7a 	andeq	r2, r0, sl, ror ip
    7d60:	0da81f00 	stceq	15, cr1, [r8]
    7d64:	04fc0000 	ldrbteq	r0, [ip], #0
    7d68:	761e0000 	ldrvc	r0, [lr], -r0
    7d6c:	01007061 	tsteq	r0, r1, rrx
    7d70:	058c1655 	streq	r1, [ip, #1621]	; 0x655
    7d74:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7d78:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    7d7c:	c1165501 	tstgt	r6, r1, lsl #10
    7d80:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    7d84:	0000002c 	andeq	r0, r0, ip, lsr #32
    7d88:	000d581f 	andeq	r5, sp, pc, lsl r8
    7d8c:	00051400 	andeq	r1, r5, r0, lsl #8
    7d90:	61761e00 	cmnvs	r6, r0, lsl #28
    7d94:	56010070 			; <UNDEFINED> instruction: 0x56010070
    7d98:	00058c16 	andeq	r8, r5, r6, lsl ip
    7d9c:	005e0100 	subseq	r0, lr, r0, lsl #2
    7da0:	000dc01f 	andeq	ip, sp, pc, lsl r0
    7da4:	00054500 	andeq	r4, r5, r0, lsl #10
    7da8:	61761e00 	cmnvs	r6, r0, lsl #28
    7dac:	57010070 	smlsdxpl	r1, r0, r0, r0
    7db0:	00058c16 	andeq	r8, r5, r6, lsl ip
    7db4:	205e0100 	subscs	r0, lr, r0, lsl #2
    7db8:	01006364 	tsteq	r0, r4, ror #6
    7dbc:	00811657 	addeq	r1, r1, r7, asr r6
    7dc0:	631b0000 	tstvs	fp, #0
    7dc4:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    7dc8:	000001d3 	ldrdeq	r0, [r0], -r3
    7dcc:	00002cb6 			; <UNDEFINED> instruction: 0x00002cb6
    7dd0:	202a1d00 	eorcs	r1, sl, r0, lsl #26
    7dd4:	203e0000 	eorscs	r0, lr, r0
    7dd8:	056f0000 	strbeq	r0, [pc, #-0]!	; 7de0 <__exidx_end+0x4f6c>
    7ddc:	631b0000 	tstvs	fp, #0
    7de0:	095c0100 	ldmdbeq	ip, {r8}^
    7de4:	000001d3 	ldrdeq	r0, [r0], -r3
    7de8:	00002cd4 	ldrdeq	r2, [r0], -r4
    7dec:	7061731e 	rsbvc	r7, r1, lr, lsl r3
    7df0:	0d5c0100 	ldfeqe	f0, [ip, #-0]
    7df4:	000001cd 	andeq	r0, r0, sp, asr #3
    7df8:	21005601 	tstcs	r0, r1, lsl #12
    7dfc:	00000d70 	andeq	r0, r0, r0, ror sp
    7e00:	7061731b 	rsbvc	r7, r1, fp, lsl r3
    7e04:	0a660100 	beq	198820c <__ccfg+0x1968264>
    7e08:	000001cd 	andeq	r0, r0, sp, asr #3
    7e0c:	00002ce7 	andeq	r2, r0, r7, ror #25
    7e10:	040a0000 	streq	r0, [sl], #-0
    7e14:	000001da 	ldrdeq	r0, [r0], -sl
    7e18:	00ef040a 	rsceq	r0, pc, sl, lsl #8
    7e1c:	d5000000 	strle	r0, [r0, #-0]
    7e20:	04000000 	streq	r0, [r0], #-0
    7e24:	0024b900 	eoreq	fp, r4, r0, lsl #18
    7e28:	90010400 	andls	r0, r1, r0, lsl #8
    7e2c:	01000016 	tsteq	r0, r6, lsl r0
    7e30:	00001749 	andeq	r1, r0, r9, asr #14
    7e34:	00001785 	andeq	r1, r0, r5, lsl #15
    7e38:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7e3c:	00000000 	andeq	r0, r0, r0
    7e40:	0000578a 	andeq	r5, r0, sl, lsl #15
    7e44:	00174002 	andseq	r4, r7, r2
    7e48:	301b0200 	andscc	r0, fp, r0, lsl #4
    7e4c:	03000000 	movweq	r0, #0
    7e50:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    7e54:	01030000 	mrseq	r0, (UNDEF: 3)
    7e58:	0003b508 	andeq	fp, r3, r8, lsl #10
    7e5c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    7e60:	000003f1 	strdeq	r0, [r0], -r1
    7e64:	73070203 	movwvc	r0, #29187	; 0x7203
    7e68:	02000002 	andeq	r0, r0, #2
    7e6c:	00001686 	andeq	r1, r0, r6, lsl #13
    7e70:	00573f02 	subseq	r3, r7, r2, lsl #30
    7e74:	04030000 	streq	r0, [r3], #-0
    7e78:	0000b005 	andeq	fp, r0, r5
    7e7c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7e80:	00000085 	andeq	r0, r0, r5, lsl #1
    7e84:	ab050803 	blge	149e98 <__ccfg+0x129ef0>
    7e88:	03000000 	movweq	r0, #0
    7e8c:	00800708 	addeq	r0, r0, r8, lsl #14
    7e90:	04040000 	streq	r0, [r4], #-0
    7e94:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7e98:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7e9c:	0000008a 	andeq	r0, r0, sl, lsl #1
    7ea0:	00174202 	andseq	r4, r7, r2, lsl #4
    7ea4:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    7ea8:	02000000 	andeq	r0, r0, #0
    7eac:	00001688 	andeq	r1, r0, r8, lsl #13
    7eb0:	004c1f03 	subeq	r1, ip, r3, lsl #30
    7eb4:	57050000 	strpl	r0, [r5, -r0]
    7eb8:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7ebc:	00008caa 	andeq	r8, r0, sl, lsr #25
    7ec0:	00207800 	eoreq	r7, r0, r0, lsl #16
    7ec4:	00003000 	andeq	r3, r0, r0
    7ec8:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    7ecc:	0000177a 	andeq	r1, r0, sl, ror r7
    7ed0:	008c3e01 	addeq	r3, ip, r1, lsl #28
    7ed4:	2d050000 	stccs	0, cr0, [r5, #-0]
    7ed8:	6b060000 	blvs	187ee0 <__ccfg+0x167f38>
    7edc:	01000017 	tsteq	r0, r7, lsl r0
    7ee0:	00008c3f 	andeq	r8, r0, pc, lsr ip
    7ee4:	002d1e00 	eoreq	r1, sp, r0, lsl #28
    7ee8:	16790700 	ldrbtne	r0, [r9], -r0, lsl #14
    7eec:	40010000 	andmi	r0, r1, r0
    7ef0:	00000081 	andeq	r0, r0, r1, lsl #1
    7ef4:	00005101 	andeq	r5, r0, r1, lsl #2
    7ef8:	00000143 	andeq	r0, r0, r3, asr #2
    7efc:	25280004 	strcs	r0, [r8, #-4]!
    7f00:	01040000 	mrseq	r0, (UNDEF: 4)
    7f04:	00001690 	muleq	r0, r0, r6
    7f08:	00189601 	andseq	r9, r8, r1, lsl #12
    7f0c:	00178500 	andseq	r8, r7, r0, lsl #10
    7f10:	000e0000 	andeq	r0, lr, r0
    7f14:	00000000 	andeq	r0, r0, r0
    7f18:	0058f500 	subseq	pc, r8, r0, lsl #10
    7f1c:	06010200 	streq	r0, [r1], -r0, lsl #4
    7f20:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    7f24:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    7f28:	02000003 	andeq	r0, r0, #3
    7f2c:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    7f30:	02020000 	andeq	r0, r2, #0
    7f34:	00027307 	andeq	r7, r2, r7, lsl #6
    7f38:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7f3c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7f40:	0017f103 	andseq	pc, r7, r3, lsl #2
    7f44:	53410200 	movtpl	r0, #4608	; 0x1200
    7f48:	02000000 	andeq	r0, r0, #0
    7f4c:	00850704 	addeq	r0, r5, r4, lsl #14
    7f50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7f54:	0000ab05 	andeq	sl, r0, r5, lsl #22
    7f58:	18400300 	stmdane	r0, {r8, r9}^
    7f5c:	5b020000 	blpl	87f64 <__ccfg+0x67fbc>
    7f60:	0000006c 	andeq	r0, r0, ip, rrx
    7f64:	80070802 	andhi	r0, r7, r2, lsl #16
    7f68:	04000000 	streq	r0, [r0], #-0
    7f6c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7f70:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7f74:	00008a07 	andeq	r8, r0, r7, lsl #20
    7f78:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    7f7c:	20030000 	andcs	r0, r3, r0
    7f80:	00000048 	andeq	r0, r0, r8, asr #32
    7f84:	00184203 	andseq	r4, r8, r3, lsl #4
    7f88:	61260300 			; <UNDEFINED> instruction: 0x61260300
    7f8c:	05000000 	streq	r0, [r0, #-0]
    7f90:	0000180b 	andeq	r1, r0, fp, lsl #16
    7f94:	81034504 	tsthi	r3, r4, lsl #10
    7f98:	00000000 	andeq	r0, r0, r0
    7f9c:	20000000 	andcs	r0, r0, r0
    7fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fa4:	0000dd9c 	muleq	r0, ip, sp
    7fa8:	17fc0600 	ldrbne	r0, [ip, r0, lsl #12]!
    7fac:	40010000 	andmi	r0, r1, r0
    7fb0:	00000081 	andeq	r0, r0, r1, lsl #1
    7fb4:	00002d53 	andeq	r2, r0, r3, asr sp
    7fb8:	00184b06 	andseq	r4, r8, r6, lsl #22
    7fbc:	81410100 	mrshi	r0, (UNDEF: 81)
    7fc0:	66000000 	strvs	r0, [r0], -r0
    7fc4:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    7fc8:	0000182e 	andeq	r1, r0, lr, lsr #16
    7fcc:	00814201 	addeq	r4, r1, r1, lsl #4
    7fd0:	52010000 	andpl	r0, r1, #0
    7fd4:	185d0500 	ldmdane	sp, {r8, sl}^
    7fd8:	53040000 	movwpl	r0, #16384	; 0x4000
    7fdc:	00008c03 	andeq	r8, r0, r3, lsl #24
    7fe0:	0020a800 	eoreq	sl, r0, r0, lsl #16
    7fe4:	00001800 	andeq	r1, r0, r0, lsl #16
    7fe8:	2f9c0100 	svccs	0x009c0100
    7fec:	08000001 	stmdaeq	r0, {r0}
    7ff0:	16590108 	ldrbne	r0, [r9], -r8, lsl #2
    7ff4:	09000001 	stmdbeq	r0, {r0}
    7ff8:	000017e5 	andeq	r1, r0, r5, ror #15
    7ffc:	008c5a01 	addeq	r5, ip, r1, lsl #20
    8000:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    8004:	01000018 	tsteq	r0, r8, lsl r0
    8008:	00012f5b 	andeq	r2, r1, fp, asr pc
    800c:	7e0a0000 	cdpvc	0, 0, cr0, cr10, cr0, {0}
    8010:	01000018 	tsteq	r0, r8, lsl r0
    8014:	0000f75c 	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
    8018:	182e0700 	stmdane	lr!, {r8, r9, sl}
    801c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    8020:	00000081 	andeq	r0, r0, r1, lsl #1
    8024:	0b005101 	bleq	1c430 <__exidx_end+0x195bc>
    8028:	00000081 	andeq	r0, r0, r1, lsl #1
    802c:	0000013f 	andeq	r0, r0, pc, lsr r1
    8030:	00013f0c 	andeq	r3, r1, ip, lsl #30
    8034:	02000100 	andeq	r0, r0, #0, 2
    8038:	18b50704 	ldmne	r5!, {r2, r8, r9, sl}
    803c:	36000000 	strcc	r0, [r0], -r0
    8040:	04000001 	streq	r0, [r0], #-1
    8044:	0025d200 	eoreq	sp, r5, r0, lsl #4
    8048:	90010400 	andls	r0, r1, r0, lsl #8
    804c:	01000016 	tsteq	r0, r6, lsl r0
    8050:	00001911 	andeq	r1, r0, r1, lsl r9
    8054:	00001785 	andeq	r1, r0, r5, lsl #15
    8058:	00000e18 	andeq	r0, r0, r8, lsl lr
    805c:	00000000 	andeq	r0, r0, r0
    8060:	00005aa2 	andeq	r5, r0, r2, lsr #21
    8064:	b7060102 	strlt	r0, [r6, -r2, lsl #2]
    8068:	02000003 	andeq	r0, r0, #3
    806c:	03b50801 			; <UNDEFINED> instruction: 0x03b50801
    8070:	02020000 	andeq	r0, r2, #0
    8074:	0003f105 	andeq	pc, r3, r5, lsl #2
    8078:	07020200 	streq	r0, [r2, -r0, lsl #4]
    807c:	00000273 	andeq	r0, r0, r3, ror r2
    8080:	b0050402 	andlt	r0, r5, r2, lsl #8
    8084:	03000000 	movweq	r0, #0
    8088:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    808c:	00534102 	subseq	r4, r3, r2, lsl #2
    8090:	04020000 	streq	r0, [r2], #-0
    8094:	00008507 	andeq	r8, r0, r7, lsl #10
    8098:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    809c:	000000ab 	andeq	r0, r0, fp, lsr #1
    80a0:	80070802 	andhi	r0, r7, r2, lsl #16
    80a4:	04000000 	streq	r0, [r0], #-0
    80a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    80ac:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    80b0:	00008a07 	andeq	r8, r0, r7, lsl #20
    80b4:	17f30300 	ldrbne	r0, [r3, r0, lsl #6]!
    80b8:	20030000 	andcs	r0, r3, r0
    80bc:	00000048 	andeq	r0, r0, r8, asr #32
    80c0:	0018f305 	andseq	pc, r8, r5, lsl #6
    80c4:	766a0400 	strbtvc	r0, [sl], -r0, lsl #8
    80c8:	c0000000 	andgt	r0, r0, r0
    80cc:	08000020 	stmdaeq	r0, {r5}
    80d0:	01000000 	mrseq	r0, (UNDEF: 0)
    80d4:	0000a69c 	muleq	r0, ip, r6
    80d8:	18e10600 	stmiane	r1!, {r9, sl}^
    80dc:	77010000 	strvc	r0, [r1, -r0]
    80e0:	00000076 	andeq	r0, r0, r6, ror r0
    80e4:	192c0500 	stmdbne	ip!, {r8, sl}
    80e8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    80ec:	00000076 	andeq	r0, r0, r6, ror r0
    80f0:	00000000 	andeq	r0, r0, r0
    80f4:	00000006 	andeq	r0, r0, r6
    80f8:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    80fc:	e1060000 	mrs	r0, (UNDEF: 6)
    8100:	01000018 	tsteq	r0, r8, lsl r0
    8104:	000076c2 	andeq	r7, r0, r2, asr #13
    8108:	02050000 	andeq	r0, r5, #0
    810c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    8110:	00007684 	andeq	r7, r0, r4, lsl #13
    8114:	0020c800 	eoreq	ip, r0, r0, lsl #16
    8118:	00000800 	andeq	r0, r0, r0, lsl #16
    811c:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    8120:	07000000 	streq	r0, [r0, -r0]
    8124:	000018e1 	andeq	r1, r0, r1, ror #17
    8128:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    812c:	00000000 	andeq	r0, r0, r0
    8130:	0018be08 	andseq	fp, r8, r8, lsl #28
    8134:	015b0400 	cmpeq	fp, r0, lsl #8
    8138:	00000076 	andeq	r0, r0, r6, ror r0
    813c:	00000000 	andeq	r0, r0, r0
    8140:	00000006 	andeq	r0, r0, r6
    8144:	01189c01 	tsteq	r8, r1, lsl #24
    8148:	e1070000 	mrs	r0, (UNDEF: 7)
    814c:	01000018 	tsteq	r0, r8, lsl r0
    8150:	0076015a 	rsbseq	r0, r6, sl, asr r1
    8154:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8158:	000018d2 	ldrdeq	r1, [r0], -r2
    815c:	00016c04 	andeq	r6, r1, r4, lsl #24
    8160:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8164:	01000000 	mrseq	r0, (UNDEF: 0)
    8168:	18e90a9c 	stmiane	r9!, {r2, r3, r4, r7, r9, fp}^
    816c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    8170:	00007601 	andeq	r7, r0, r1, lsl #12
    8174:	00500100 	subseq	r0, r0, r0, lsl #2
    8178:	00020700 	andeq	r0, r2, r0, lsl #14
    817c:	82000400 	andhi	r0, r0, #0, 8
    8180:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    8184:	00169001 	andseq	r9, r6, r1
    8188:	19f90100 	ldmibne	r9!, {r8}^
    818c:	17850000 	strne	r0, [r5, r0]
    8190:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    8194:	00000000 	andeq	r0, r0, r0
    8198:	5c420000 	marpl	acc0, r0, r2
    819c:	01020000 	mrseq	r0, (UNDEF: 2)
    81a0:	0003b706 	andeq	fp, r3, r6, lsl #14
    81a4:	08010200 	stmdaeq	r1, {r9}
    81a8:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    81ac:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    81b0:	02000003 	andeq	r0, r0, #3
    81b4:	02730702 	rsbseq	r0, r3, #524288	; 0x80000
    81b8:	04020000 	streq	r0, [r2], #-0
    81bc:	0000b005 	andeq	fp, r0, r5
    81c0:	17f10300 	ldrbne	r0, [r1, r0, lsl #6]!
    81c4:	41030000 	mrsmi	r0, (UNDEF: 3)
    81c8:	00000053 	andeq	r0, r0, r3, asr r0
    81cc:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    81d0:	02000000 	andeq	r0, r0, #0
    81d4:	00ab0508 	adceq	r0, fp, r8, lsl #10
    81d8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    81dc:	00008007 	andeq	r8, r0, r7
    81e0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    81e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    81e8:	8a070402 	bhi	1c91f8 <__ccfg+0x1a9250>
    81ec:	03000000 	movweq	r0, #0
    81f0:	000017f3 	strdeq	r1, [r0], -r3
    81f4:	00482004 	subeq	r2, r8, r4
    81f8:	56050000 	strpl	r0, [r5], -r0
    81fc:	0200001a 	andeq	r0, r0, #26
    8200:	06030330 			; <UNDEFINED> instruction: 0x06030330
    8204:	00001ac1 	andeq	r1, r0, r1, asr #21
    8208:	0501fd01 	streq	pc, [r1, #-3329]	; 0xfffff2ff
    820c:	00001a69 	andeq	r1, r0, r9, ror #20
    8210:	01018201 	tsteq	r1, r1, lsl #4
    8214:	00194407 	andseq	r4, r9, r7, lsl #8
    8218:	010d0100 	mrseq	r0, (UNDEF: 29)
    821c:	000020d0 	ldrdeq	r2, [r0], -r0
    8220:	000000d4 	ldrdeq	r0, [r0], -r4
    8224:	016d9c01 	cmneq	sp, r1, lsl #24
    8228:	44080000 	strmi	r0, [r8], #-0
    822c:	0100001a 	tsteq	r0, sl, lsl r0
    8230:	0076010d 	rsbseq	r0, r6, sp, lsl #2
    8234:	2d790000 	ldclcs	0, cr0, [r9, #-0]
    8238:	b0090000 	andlt	r0, r9, r0
    823c:	0100001a 	tsteq	r0, sl, lsl r0
    8240:	0076010f 	rsbseq	r0, r6, pc, lsl #2
    8244:	2da50000 	stccs	0, cr0, [r5]
    8248:	3d090000 	stccc	0, cr0, [r9, #-0]
    824c:	01000019 	tsteq	r0, r9, lsl r0
    8250:	00760110 	rsbseq	r0, r6, r0, lsl r1
    8254:	2db80000 	ldccs	0, cr0, [r8]
    8258:	810a0000 	mrshi	r0, (UNDEF: 10)
    825c:	02000000 	andeq	r0, r0, #0
    8260:	06000021 	streq	r0, [r0], -r1, lsr #32
    8264:	01000000 	mrseq	r0, (UNDEF: 0)
    8268:	280b0136 	stmdacs	fp, {r1, r2, r4, r5, r8}
    826c:	2a000021 	bcs	82f8 <__exidx_end+0x5484>
    8270:	1f000000 	svcne	0x00000000
    8274:	09000001 	stmdbeq	r0, {r0}
    8278:	00001b36 	andeq	r1, r0, r6, lsr fp
    827c:	76015301 	strvc	r5, [r1], -r1, lsl #6
    8280:	d1000000 	mrsle	r0, (UNDEF: 0)
    8284:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    8288:	00001a92 	muleq	r0, r2, sl
    828c:	76015401 	strvc	r5, [r1], -r1, lsl #8
    8290:	e4000000 	str	r0, [r0], #-0
    8294:	0000002d 	andeq	r0, r0, sp, lsr #32
    8298:	0021120c 	eoreq	r1, r1, ip, lsl #4
    829c:	0001c300 	andeq	ip, r1, r0, lsl #6
    82a0:	00013300 	andeq	r3, r1, r0, lsl #6
    82a4:	50010d00 	andpl	r0, r1, r0, lsl #26
    82a8:	00007402 	andeq	r7, r0, r2, lsl #8
    82ac:	00211a0c 	eoreq	r1, r1, ip, lsl #20
    82b0:	0001d400 	andeq	sp, r1, r0, lsl #8
    82b4:	00014d00 	andeq	r4, r1, r0, lsl #26
    82b8:	51010d00 	tstpl	r1, r0, lsl #26
    82bc:	0d007402 	cfstrseq	mvf7, [r0, #-8]
    82c0:	75025001 	strvc	r5, [r2, #-1]
    82c4:	580c0000 	stmdapl	ip, {}	; <UNPREDICTABLE>
    82c8:	ea000021 	b	8354 <__exidx_end+0x54e0>
    82cc:	61000001 	tstvs	r0, r1
    82d0:	0d000001 	stceq	0, cr0, [r0, #-4]
    82d4:	74025001 	strvc	r5, [r2], #-1
    82d8:	620e0000 	andvs	r0, lr, #0
    82dc:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    82e0:	32015001 	andcc	r5, r1, #1
    82e4:	7c0f0000 	stcvc	0, cr0, [pc], {-0}
    82e8:	0700001a 	smladeq	r0, sl, r0, r0
    82ec:	0021a45f 	eoreq	sl, r1, pc, asr r4
    82f0:	0000a400 	andeq	sl, r0, r0, lsl #8
    82f4:	c39c0100 	orrsgt	r0, ip, #0, 2
    82f8:	10000001 	andne	r0, r0, r1
    82fc:	00001a44 	andeq	r1, r0, r4, asr #20
    8300:	00767201 	rsbseq	r7, r6, r1, lsl #4
    8304:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    8308:	9d100000 	ldcls	0, cr0, [r0, #-0]
    830c:	0100001a 	tsteq	r0, sl, lsl r0
    8310:	00007673 	andeq	r7, r0, r3, ror r6
    8314:	002e2200 	eoreq	r2, lr, r0, lsl #4
    8318:	21b41100 			; <UNDEFINED> instruction: 0x21b41100
    831c:	01fb0000 	mvnseq	r0, r0
    8320:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    8324:	03000021 	movweq	r0, #33	; 0x21
    8328:	12000002 	andne	r0, r0, #2
    832c:	000021d8 	ldrdeq	r2, [r0], -r8
    8330:	0000009b 	muleq	r0, fp, r0
    8334:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    8338:	00000074 	andeq	r0, r0, r4, ror r0
    833c:	00196913 	andseq	r6, r9, r3, lsl r9
    8340:	d46c0500 	strbtle	r0, [ip], #-1280	; 0xfffffb00
    8344:	14000001 	strne	r0, [r0], #-1
    8348:	00000076 	andeq	r0, r0, r6, ror r0
    834c:	19991300 	ldmibne	r9, {r8, r9, ip}
    8350:	73050000 	movwvc	r0, #20480	; 0x5000
    8354:	000001ea 	andeq	r0, r0, sl, ror #3
    8358:	00007614 	andeq	r7, r0, r4, lsl r6
    835c:	00761400 	rsbseq	r1, r6, r0, lsl #8
    8360:	13000000 	movwne	r0, #0
    8364:	000019c9 	andeq	r1, r0, r9, asr #19
    8368:	01fb7a05 	mvnseq	r7, r5, lsl #20
    836c:	76140000 	ldrvc	r0, [r4], -r0
    8370:	00000000 	andeq	r0, r0, r0
    8374:	001af915 	andseq	pc, sl, r5, lsl r9	; <UNPREDICTABLE>
    8378:	02430600 	subeq	r0, r3, #0, 12
    837c:	001a1616 	andseq	r1, sl, r6, lsl r6
    8380:	00fd0500 	rscseq	r0, sp, r0, lsl #10
    8384:	00000b17 	andeq	r0, r0, r7, lsl fp
    8388:	27c40004 	strbcs	r0, [r4, r4]
    838c:	01040000 	mrseq	r0, (UNDEF: 4)
    8390:	00001690 	muleq	r0, r0, r6
    8394:	001d9101 	andseq	r9, sp, r1, lsl #2
    8398:	00178500 	andseq	r8, r7, r0, lsl #10
    839c:	000e9000 	andeq	r9, lr, r0
    83a0:	00000000 	andeq	r0, r0, r0
    83a4:	005e2f00 	subseq	r2, lr, r0, lsl #30
    83a8:	06010200 	streq	r0, [r1], -r0, lsl #4
    83ac:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    83b0:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    83b4:	02000003 	andeq	r0, r0, #3
    83b8:	03f10502 	mvnseq	r0, #8388608	; 0x800000
    83bc:	02020000 	andeq	r0, r2, #0
    83c0:	00027307 	andeq	r7, r2, r7, lsl #6
    83c4:	16860300 	strne	r0, [r6], r0, lsl #6
    83c8:	3f040000 	svccc	0x00040000
    83cc:	0000004c 	andeq	r0, r0, ip, asr #32
    83d0:	b0050402 	andlt	r0, r5, r2, lsl #8
    83d4:	03000000 	movweq	r0, #0
    83d8:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    83dc:	005e4104 	subseq	r4, lr, r4, lsl #2
    83e0:	04020000 	streq	r0, [r2], #-0
    83e4:	00008507 	andeq	r8, r0, r7, lsl #10
    83e8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    83ec:	000000ab 	andeq	r0, r0, fp, lsr #1
    83f0:	80070802 	andhi	r0, r7, r2, lsl #16
    83f4:	04000000 	streq	r0, [r0], #-0
    83f8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    83fc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8400:	00008a07 	andeq	r8, r0, r7, lsl #20
    8404:	16880300 	strne	r0, [r8], r0, lsl #6
    8408:	1f050000 	svcne	0x00050000
    840c:	00000041 	andeq	r0, r0, r1, asr #32
    8410:	0017f303 	andseq	pc, r7, r3, lsl #6
    8414:	53200500 	noppl	{0}	; <UNPREDICTABLE>
    8418:	05000000 	streq	r0, [r0, #-0]
    841c:	00001e24 	andeq	r1, r0, r4, lsr #28
    8420:	0081e902 	addeq	lr, r1, r2, lsl #18
    8424:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    8428:	06000000 	streq	r0, [r0], -r0
    842c:	00001b74 	andeq	r1, r0, r4, ror fp
    8430:	008ce902 	addeq	lr, ip, r2, lsl #18
    8434:	7d070000 	stcvc	0, cr0, [r7, #-0]
    8438:	0200001e 	andeq	r0, r0, #30
    843c:	000081ef 	andeq	r8, r0, pc, ror #3
    8440:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    8444:	0200001b 	andeq	r0, r0, #27
    8448:	00008cab 	andeq	r8, r0, fp, lsr #25
    844c:	00e70100 	rsceq	r0, r7, r0, lsl #2
    8450:	44090000 	strmi	r0, [r9], #-0
    8454:	0100001a 	tsteq	r0, sl, lsl r0
    8458:	008c0329 	addeq	r0, ip, r9, lsr #6
    845c:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    8460:	0100001f 	tsteq	r0, pc, lsl r0
    8464:	008c032b 	addeq	r0, ip, fp, lsr #6
    8468:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    846c:	00001e5c 	andeq	r1, r0, ip, asr lr
    8470:	008c8102 	addeq	r8, ip, r2, lsl #2
    8474:	10010000 	andne	r0, r1, r0
    8478:	09000001 	stmdbeq	r0, {r0}
    847c:	00001a44 	andeq	r1, r0, r4, asr #20
    8480:	8c033c01 	stchi	12, cr3, [r3], {1}
    8484:	0a000000 	beq	848c <__exidx_end+0x5618>
    8488:	00001ecd 	andeq	r1, r0, sp, asr #29
    848c:	8c033e01 	stchi	14, cr3, [r3], {1}
    8490:	00000000 	andeq	r0, r0, r0
    8494:	001d0a08 	andseq	r0, sp, r8, lsl #20
    8498:	8c880200 	sfmhi	f0, 4, [r8], {0}
    849c:	01000000 	mrseq	r0, (UNDEF: 0)
    84a0:	00000139 	andeq	r0, r0, r9, lsr r1
    84a4:	001a4409 	andseq	r4, sl, r9, lsl #8
    84a8:	034f0100 	movteq	r0, #61696	; 0xf100
    84ac:	0000008c 	andeq	r0, r0, ip, lsl #1
    84b0:	001e410a 	andseq	r4, lr, sl, lsl #2
    84b4:	03510100 	cmpeq	r1, #0, 2
    84b8:	0000008c 	andeq	r0, r0, ip, lsl #1
    84bc:	1c6e0800 	stclne	8, cr0, [lr], #-0
    84c0:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    84c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    84c8:	00016e01 	andeq	r6, r1, r1, lsl #28
    84cc:	1a440900 	bne	110a8d4 <__ccfg+0x10ea92c>
    84d0:	62010000 	andvs	r0, r1, #0
    84d4:	00008c03 	andeq	r8, r0, r3, lsl #24
    84d8:	1bfe0a00 	blne	fff8ace0 <_estack+0xdff85ce0>
    84dc:	64010000 	strvs	r0, [r1], #-0
    84e0:	00008c03 	andeq	r8, r0, r3, lsl #24
    84e4:	1d3f0a00 	vldmdbne	pc!, {s0-s-1}
    84e8:	65010000 	strvs	r0, [r1, #-0]
    84ec:	00008c03 	andeq	r8, r0, r3, lsl #24
    84f0:	71080000 	mrsvc	r0, (UNDEF: 8)
    84f4:	0200001d 	andeq	r0, r0, #29
    84f8:	00008cb2 			; <UNDEFINED> instruction: 0x00008cb2
    84fc:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    8500:	44090000 	strmi	r0, [r9], #-0
    8504:	0100001a 	tsteq	r0, sl, lsl r0
    8508:	008c0394 	umulleq	r0, ip, r4, r3
    850c:	8d0a0000 	stchi	0, cr0, [sl, #-0]
    8510:	0100001c 	tsteq	r0, ip, lsl r0
    8514:	008c0396 	umulleq	r0, ip, r6, r3
    8518:	3f0a0000 	svccc	0x000a0000
    851c:	0100001d 	tsteq	r0, sp, lsl r0
    8520:	008c0397 	umulleq	r0, ip, r7, r3
    8524:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8528:	00001c3c 	andeq	r1, r0, ip, lsr ip
    852c:	008cb902 	addeq	fp, ip, r2, lsl #18
    8530:	cc010000 	stcgt	0, cr0, [r1], {-0}
    8534:	09000001 	stmdbeq	r0, {r0}
    8538:	00001a44 	andeq	r1, r0, r4, asr #20
    853c:	8c03b401 	cfstrshi	mvf11, [r3], {1}
    8540:	0a000000 	beq	8548 <__exidx_end+0x56d4>
    8544:	00001d49 	andeq	r1, r0, r9, asr #26
    8548:	8c03b601 	stchi	6, cr11, [r3], {1}
    854c:	00000000 	andeq	r0, r0, r0
    8550:	001de708 	andseq	lr, sp, r8, lsl #14
    8554:	8cdf0200 	lfmhi	f0, 2, [pc], {0}
    8558:	01000000 	mrseq	r0, (UNDEF: 0)
    855c:	000001f5 	strdeq	r0, [r0], -r5
    8560:	001a4409 	andseq	r4, sl, r9, lsl #8
    8564:	03c80100 	biceq	r0, r8, #0, 2
    8568:	0000008c 	andeq	r0, r0, ip, lsl #1
    856c:	001f3e0a 	andseq	r3, pc, sl, lsl #28
    8570:	03ca0100 	biceq	r0, sl, #0, 2
    8574:	0000008c 	andeq	r0, r0, ip, lsl #1
    8578:	1ea70800 	cdpne	8, 10, cr0, cr7, cr0, {0}
    857c:	d7020000 	strle	r0, [r2, -r0]
    8580:	0000008c 	andeq	r0, r0, ip, lsl #1
    8584:	00021201 	andeq	r1, r2, r1, lsl #4
    8588:	1ff10a00 	svcne	0x00f10a00
    858c:	83010000 	movwhi	r0, #4096	; 0x1000
    8590:	00008c02 	andeq	r8, r0, r2, lsl #24
    8594:	4b0b0000 	blmi	2c859c <__ccfg+0x2a85f4>
    8598:	03000008 	movweq	r0, #8
    859c:	ce0c03c4 	cdpgt	3, 0, cr0, cr12, cr4, {6}
    85a0:	0200001f 	andeq	r0, r0, #31
    85a4:	2248010f 	subcs	r0, r8, #-1073741821	; 0xc0000003
    85a8:	007c0000 	rsbseq	r0, ip, r0
    85ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    85b0:	000002c4 	andeq	r0, r0, r4, asr #5
    85b4:	001ab00d 	andseq	fp, sl, sp
    85b8:	8c7f0100 	ldfhie	f0, [pc], #-0	; 85c0 <__exidx_end+0x574c>
    85bc:	35000000 	strcc	r0, [r0, #-0]
    85c0:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    85c4:	00001fe6 	andeq	r1, r0, r6, ror #31
    85c8:	008c8101 	addeq	r8, ip, r1, lsl #2
    85cc:	660e0000 	strvs	r0, [lr], -r0
    85d0:	0100001d 	tsteq	r0, sp, lsl r0
    85d4:	00008182 	andeq	r8, r0, r2, lsl #3
    85d8:	0f520100 	svceq	0x00520100
    85dc:	00001bd9 	ldrdeq	r1, [r0], -r9
    85e0:	00818301 	addeq	r8, r1, r1, lsl #6
    85e4:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
    85e8:	a70f0000 	strge	r0, [pc, -r0]
    85ec:	0100001c 	tsteq	r0, ip, lsl r0
    85f0:	00008184 	andeq	r8, r0, r4, lsl #3
    85f4:	002e6900 	eoreq	r6, lr, r0, lsl #18
    85f8:	00971000 	addseq	r1, r7, r0
    85fc:	22560000 	subscs	r0, r6, #0
    8600:	0e600000 	cdpeq	0, 6, cr0, cr0, cr0, {0}
    8604:	97010000 	strls	r0, [r1, -r0]
    8608:	0000029b 	muleq	r0, fp, r2
    860c:	0000a711 	andeq	sl, r0, r1, lsl r7
    8610:	0e601200 	cdpeq	2, 6, cr1, cr0, cr0, {0}
    8614:	b2130000 	andslt	r0, r3, #0
    8618:	01000000 	mrseq	r0, (UNDEF: 0)
    861c:	14000052 	strne	r0, [r0], #-82	; 0xffffffae
    8620:	00000097 	muleq	r0, r7, r0
    8624:	00002260 	andeq	r2, r0, r0, ror #4
    8628:	00000006 	andeq	r0, r0, r6
    862c:	a7119801 	ldrge	r9, [r1, -r1, lsl #16]
    8630:	15000000 	strne	r0, [r0, #-0]
    8634:	00002260 	andeq	r2, r0, r0, ror #4
    8638:	00000006 	andeq	r0, r0, r6
    863c:	0000b216 	andeq	fp, r0, r6, lsl r2
    8640:	002e9700 	eoreq	r9, lr, r0, lsl #14
    8644:	00000000 	andeq	r0, r0, r0
    8648:	00196917 	andseq	r6, r9, r7, lsl r9
    864c:	c46c0200 	strbtgt	r0, [ip], #-512	; 0xfffffe00
    8650:	ac000022 	stcge	0, cr0, [r0], {34}	; 0x22
    8654:	01000000 	mrseq	r0, (UNDEF: 0)
    8658:	0003439c 	muleq	r3, ip, r3
    865c:	1ab00d00 	bne	fec0ba64 <_estack+0xdec06a64>
    8660:	bf010000 	svclt	0x00010000
    8664:	0000008c 	andeq	r0, r0, ip, lsl #1
    8668:	00002eaa 	andeq	r2, r0, sl, lsr #29
    866c:	001f000f 	andseq	r0, pc, pc
    8670:	81c10100 	bichi	r0, r1, r0, lsl #2
    8674:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    8678:	0f00002e 	svceq	0x0000002e
    867c:	00002016 	andeq	r2, r0, r6, lsl r0
    8680:	0081c201 	addeq	ip, r1, r1, lsl #4
    8684:	2f070000 	svccs	0x00070000
    8688:	97180000 	ldrls	r0, [r8, -r0]
    868c:	fa000000 	blx	8694 <__exidx_end+0x5820>
    8690:	06000022 	streq	r0, [r0], -r2, lsr #32
    8694:	01000000 	mrseq	r0, (UNDEF: 0)
    8698:	000332ee 	andeq	r3, r3, lr, ror #5
    869c:	00a71100 	adceq	r1, r7, r0, lsl #2
    86a0:	fa150000 	blx	5486a8 <__ccfg+0x528700>
    86a4:	06000022 	streq	r0, [r0], -r2, lsr #32
    86a8:	16000000 	strne	r0, [r0], -r0
    86ac:	000000b2 	strheq	r0, [r0], -r2
    86b0:	00002f2e 	andeq	r2, r0, lr, lsr #30
    86b4:	e8190000 	ldmda	r9, {}	; <UNPREDICTABLE>
    86b8:	1a000022 	bne	8748 <__exidx_end+0x58d4>
    86bc:	1a000002 	bne	86cc <__exidx_end+0x5858>
    86c0:	74025001 	strvc	r5, [r2], #-1
    86c4:	1b000000 	blne	86cc <__exidx_end+0x5858>
    86c8:	00001b84 	andeq	r1, r0, r4, lsl #23
    86cc:	008ca402 	addeq	sl, ip, r2, lsl #8
    86d0:	23700000 	cmncs	r0, #0
    86d4:	005c0000 	subseq	r0, ip, r0
    86d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    86dc:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    86e0:	001ab01c 	andseq	fp, sl, ip, lsl r0
    86e4:	021f0100 	andseq	r0, pc, #0, 2
    86e8:	0000008c 	andeq	r0, r0, ip, lsl #1
    86ec:	00002f41 	andeq	r2, r0, r1, asr #30
    86f0:	001e981d 	andseq	r9, lr, sp, lsl r8
    86f4:	02210100 	eoreq	r0, r1, #0, 2
    86f8:	0000008c 	andeq	r0, r0, ip, lsl #1
    86fc:	00002f62 	andeq	r2, r0, r2, ror #30
    8700:	001fb21d 	andseq	fp, pc, sp, lsl r2	; <UNPREDICTABLE>
    8704:	02220100 	eoreq	r0, r2, #0, 2
    8708:	0000008c 	andeq	r0, r0, ip, lsl #1
    870c:	00002f75 	andeq	r2, r0, r5, ror pc
    8710:	001fc01d 	andseq	ip, pc, sp, lsl r0	; <UNPREDICTABLE>
    8714:	02230100 	eoreq	r0, r3, #0, 2
    8718:	0000008c 	andeq	r0, r0, ip, lsl #1
    871c:	00002fc3 	andeq	r2, r0, r3, asr #31
    8720:	001fff1d 	andseq	pc, pc, sp, lsl pc	; <UNPREDICTABLE>
    8724:	02240100 	eoreq	r0, r4, #0, 2
    8728:	00000081 	andeq	r0, r0, r1, lsl #1
    872c:	0000302b 	andeq	r3, r0, fp, lsr #32
    8730:	001ff11d 	andseq	pc, pc, sp, lsl r1	; <UNPREDICTABLE>
    8734:	02250100 	eoreq	r0, r5, #0, 2
    8738:	0000008c 	andeq	r0, r0, ip, lsl #1
    873c:	0000304a 	andeq	r3, r0, sl, asr #32
    8740:	1dbc1b00 			; <UNDEFINED> instruction: 0x1dbc1b00
    8744:	c1020000 	mrsgt	r0, (UNDEF: 2)
    8748:	0000008c 	andeq	r0, r0, ip, lsl #1
    874c:	000023cc 	andeq	r2, r0, ip, asr #7
    8750:	00000018 	andeq	r0, r0, r8, lsl r0
    8754:	03e79c01 	mvneq	r9, #256	; 0x100
    8758:	f11d0000 			; <UNDEFINED> instruction: 0xf11d0000
    875c:	0100001f 	tsteq	r0, pc, lsl r0
    8760:	008c0267 	addeq	r0, ip, r7, ror #4
    8764:	306f0000 	rsbcc	r0, pc, r0
    8768:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    876c:	000001f5 	strdeq	r0, [r0], -r5
    8770:	00000000 	andeq	r0, r0, r0
    8774:	00000010 	andeq	r0, r0, r0, lsl r0
    8778:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
    877c:	05160000 	ldreq	r0, [r6, #-0]
    8780:	96000002 	strls	r0, [r0], -r2
    8784:	00000030 	andeq	r0, r0, r0, lsr r0
    8788:	001cea1b 	andseq	lr, ip, fp, lsl sl
    878c:	8c9d0200 	lfmhi	f0, 4, [sp], {0}
    8790:	e4000000 	str	r0, [r0], #-0
    8794:	10000023 	andne	r0, r0, r3, lsr #32
    8798:	01000000 	mrseq	r0, (UNDEF: 0)
    879c:	00043e9c 	muleq	r4, ip, lr
    87a0:	1ff11d00 	svcne	0x00f11d00
    87a4:	97010000 	strls	r0, [r1, -r0]
    87a8:	00008c02 	andeq	r8, r0, r2, lsl #24
    87ac:	0030af00 	eorseq	sl, r0, r0, lsl #30
    87b0:	1e981d00 	cdpne	13, 9, cr1, cr8, cr0, {0}
    87b4:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    87b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    87bc:	0030d000 	eorseq	sp, r0, r0
    87c0:	ca1b0000 	bgt	6c87c8 <__ccfg+0x6a8820>
    87c4:	0200001c 	andeq	r0, r0, #28
    87c8:	00008c96 	muleq	r0, r6, ip
    87cc:	0023f400 	eoreq	pc, r3, r0, lsl #8
    87d0:	00001400 	andeq	r1, r0, r0, lsl #8
    87d4:	789c0100 	ldmvc	ip, {r8}
    87d8:	1d000004 	stcne	0, cr0, [r0, #-16]
    87dc:	00001ff1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    87e0:	8c02ba01 			; <UNDEFINED> instruction: 0x8c02ba01
    87e4:	e3000000 	movw	r0, #0
    87e8:	1d000030 	stcne	0, cr0, [r0, #-192]	; 0xffffff40
    87ec:	00001e98 	muleq	r0, r8, lr
    87f0:	8c02bb01 			; <UNDEFINED> instruction: 0x8c02bb01
    87f4:	04000000 	streq	r0, [r0], #-0
    87f8:	00000031 	andeq	r0, r0, r1, lsr r0
    87fc:	001f911b 	andseq	r9, pc, fp, lsl r1	; <UNPREDICTABLE>
    8800:	8c8f0200 	sfmhi	f0, 4, [pc], {0}
    8804:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8808:	64000024 	strvs	r0, [r0], #-36	; 0xffffffdc
    880c:	01000000 	mrseq	r0, (UNDEF: 0)
    8810:	0004fe9c 	muleq	r4, ip, lr
    8814:	1a441c00 	bne	110f81c <__ccfg+0x10ef874>
    8818:	db010000 	blle	48820 <__ccfg+0x28878>
    881c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8820:	00311700 	eorseq	r1, r1, r0, lsl #14
    8824:	1ff11d00 	svcne	0x00f11d00
    8828:	dd010000 	stcle	0, cr0, [r1, #-0]
    882c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8830:	00313800 	eorseq	r3, r1, r0, lsl #16
    8834:	1e981d00 	cdpne	13, 9, cr1, cr8, cr0, {0}
    8838:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    883c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8840:	00316c00 	eorseq	r6, r1, r0, lsl #24
    8844:	1bf21d00 	blne	ffc8fc4c <_estack+0xdfc8ac4c>
    8848:	df010000 	svcle	0x00010000
    884c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8850:	00317f00 	eorseq	r7, r1, r0, lsl #30
    8854:	1f691d00 	svcne	0x00691d00
    8858:	e0010000 	and	r0, r1, r0
    885c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8860:	0031ad00 	eorseq	sl, r1, r0, lsl #26
    8864:	1e8e0a00 	vdivne.f32	s0, s28, s0
    8868:	e1010000 	mrs	r0, (UNDEF: 1)
    886c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8870:	1c621d00 	stclne	13, cr1, [r2], #-0
    8874:	e2010000 	and	r0, r1, #0
    8878:	00008102 	andeq	r8, r0, r2, lsl #2
    887c:	0031db00 	eorseq	sp, r1, r0, lsl #22
    8880:	be1e0000 	cdplt	0, 1, cr0, cr14, cr0, {0}
    8884:	6c000000 	stcvs	0, cr0, [r0], {-0}
    8888:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    888c:	01000000 	mrseq	r0, (UNDEF: 0)
    8890:	00054a9c 	muleq	r5, ip, sl
    8894:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    8898:	32560000 	subscc	r0, r6, #0
    889c:	da160000 	ble	5888a4 <__ccfg+0x5688fc>
    88a0:	77000000 	strvc	r0, [r0, -r0]
    88a4:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    88a8:	0000246e 	andeq	r2, r0, lr, ror #8
    88ac:	0000000a 	andeq	r0, r0, sl
    88b0:	0000ce1f 	andeq	ip, r0, pc, lsl lr
    88b4:	00329600 	eorseq	r9, r2, r0, lsl #12
    88b8:	246e1500 	strbtcs	r1, [lr], #-1280	; 0xfffffb00
    88bc:	000a0000 	andeq	r0, sl, r0
    88c0:	da160000 	ble	5888c8 <__ccfg+0x568920>
    88c4:	b7000000 	strlt	r0, [r0, -r0]
    88c8:	00000032 	andeq	r0, r0, r2, lsr r0
    88cc:	e71e0000 	ldr	r0, [lr, -r0]
    88d0:	80000000 	andhi	r0, r0, r0
    88d4:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    88d8:	01000000 	mrseq	r0, (UNDEF: 0)
    88dc:	0005969c 	muleq	r5, ip, r6
    88e0:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    88e4:	32ca0000 	sbccc	r0, sl, #0
    88e8:	03160000 	tsteq	r6, #0
    88ec:	eb000001 	bl	88f8 <__exidx_end+0x5a84>
    88f0:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    88f4:	00002482 	andeq	r2, r0, r2, lsl #9
    88f8:	0000000a 	andeq	r0, r0, sl
    88fc:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
    8900:	00330a00 	eorseq	r0, r3, r0, lsl #20
    8904:	24821500 	strcs	r1, [r2], #1280	; 0x500
    8908:	000a0000 	andeq	r0, sl, r0
    890c:	03160000 	tsteq	r6, #0
    8910:	2b000001 	blcs	891c <__exidx_end+0x5aa8>
    8914:	00000033 	andeq	r0, r0, r3, lsr r0
    8918:	101e0000 	andsne	r0, lr, r0
    891c:	94000001 	strls	r0, [r0], #-1
    8920:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    8924:	01000000 	mrseq	r0, (UNDEF: 0)
    8928:	0005e29c 	muleq	r5, ip, r2
    892c:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    8930:	333e0000 	teqcc	lr, #0
    8934:	2c160000 	ldccs	0, cr0, [r6], {-0}
    8938:	5f000001 	svcpl	0x00000001
    893c:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    8940:	00002496 	muleq	r0, r6, r4
    8944:	0000000a 	andeq	r0, r0, sl
    8948:	0001201f 	andeq	r2, r1, pc, lsl r0
    894c:	00337e00 	eorseq	r7, r3, r0, lsl #28
    8950:	24961500 	ldrcs	r1, [r6], #1280	; 0x500
    8954:	000a0000 	andeq	r0, sl, r0
    8958:	2c160000 	ldccs	0, cr0, [r6], {-0}
    895c:	9f000001 	svcls	0x00000001
    8960:	00000033 	andeq	r0, r0, r3, lsr r0
    8964:	391e0000 	ldmdbcc	lr, {}	; <UNPREDICTABLE>
    8968:	a8000001 	stmdage	r0, {r0}
    896c:	28000024 	stmdacs	r0, {r2, r5}
    8970:	01000000 	mrseq	r0, (UNDEF: 0)
    8974:	00063c9c 	muleq	r6, ip, ip
    8978:	01491f00 	cmpeq	r9, r0, lsl #30
    897c:	33b20000 			; <UNDEFINED> instruction: 0x33b20000
    8980:	55160000 	ldrpl	r0, [r6, #-0]
    8984:	d3000001 	movwle	r0, #1
    8988:	20000033 	andcs	r0, r0, r3, lsr r0
    898c:	00000161 	andeq	r0, r0, r1, ror #2
    8990:	0024aa15 	eoreq	sl, r4, r5, lsl sl
    8994:	00001c00 	andeq	r1, r0, r0, lsl #24
    8998:	01491f00 	cmpeq	r9, r0, lsl #30
    899c:	33f20000 	mvnscc	r0, #0
    89a0:	aa150000 	bge	5489a8 <__ccfg+0x528a00>
    89a4:	1c000024 	stcne	0, cr0, [r0], {36}	; 0x24
    89a8:	16000000 	strne	r0, [r0], -r0
    89ac:	00000155 	andeq	r0, r0, r5, asr r1
    89b0:	00003413 	andeq	r3, r0, r3, lsl r4
    89b4:	00016116 	andeq	r6, r1, r6, lsl r1
    89b8:	00344000 	eorseq	r4, r4, r0
    89bc:	00000000 	andeq	r0, r0, r0
    89c0:	001c171b 	andseq	r1, ip, fp, lsl r7
    89c4:	8ccf0200 	sfmhi	f0, 2, [pc], {0}
    89c8:	d0000000 	andle	r0, r0, r0
    89cc:	10000024 	andne	r0, r0, r4, lsr #32
    89d0:	01000000 	mrseq	r0, (UNDEF: 0)
    89d4:	0006669c 	muleq	r6, ip, r6
    89d8:	1cb11d00 	ldcne	13, cr1, [r1]
    89dc:	84010000 	strhi	r0, [r1], #-0
    89e0:	00008c03 	andeq	r8, r0, r3, lsl #24
    89e4:	00345300 	eorseq	r5, r4, r0, lsl #6
    89e8:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    89ec:	e0000001 	and	r0, r0, r1
    89f0:	2c000024 	stccs	0, cr0, [r0], {36}	; 0x24
    89f4:	01000000 	mrseq	r0, (UNDEF: 0)
    89f8:	0006c09c 	muleq	r6, ip, r0
    89fc:	017e1f00 	cmneq	lr, r0, lsl #30
    8a00:	346e0000 	strbtcc	r0, [lr], #-0
    8a04:	8a160000 	bhi	588a0c <__ccfg+0x568a64>
    8a08:	8f000001 	svchi	0x00000001
    8a0c:	20000034 	andcs	r0, r0, r4, lsr r0
    8a10:	00000196 	muleq	r0, r6, r1
    8a14:	0024e215 	eoreq	lr, r4, r5, lsl r2
    8a18:	00001e00 	andeq	r1, r0, r0, lsl #28
    8a1c:	017e1f00 	cmneq	lr, r0, lsl #30
    8a20:	34b20000 	ldrtcc	r0, [r2], #0
    8a24:	e2150000 	ands	r0, r5, #0
    8a28:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    8a2c:	16000000 	strne	r0, [r0], -r0
    8a30:	0000018a 	andeq	r0, r0, sl, lsl #3
    8a34:	000034d3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    8a38:	00019616 	andeq	r9, r1, r6, lsl r6
    8a3c:	00350000 	eorseq	r0, r5, r0
    8a40:	00000000 	andeq	r0, r0, r0
    8a44:	0001a31e 	andeq	sl, r1, lr, lsl r3
    8a48:	00250c00 	eoreq	r0, r5, r0, lsl #24
    8a4c:	00001400 	andeq	r1, r0, r0, lsl #8
    8a50:	0c9c0100 	ldfeqs	f0, [ip], {0}
    8a54:	1f000007 	svcne	0x00000007
    8a58:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    8a5c:	00003513 	andeq	r3, r0, r3, lsl r5
    8a60:	0001bf16 	andeq	fp, r1, r6, lsl pc
    8a64:	00353400 	eorseq	r3, r5, r0, lsl #8
    8a68:	250e1500 	strcs	r1, [lr, #-1280]	; 0xfffffb00
    8a6c:	000a0000 	andeq	r0, sl, r0
    8a70:	b31f0000 	tstlt	pc, #0
    8a74:	53000001 	movwpl	r0, #1
    8a78:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8a7c:	0000250e 	andeq	r2, r0, lr, lsl #10
    8a80:	0000000a 	andeq	r0, r0, sl
    8a84:	0001bf16 	andeq	fp, r1, r6, lsl pc
    8a88:	00357400 	eorseq	r7, r5, r0, lsl #8
    8a8c:	00000000 	andeq	r0, r0, r0
    8a90:	0001cc1e 	andeq	ip, r1, lr, lsl ip
    8a94:	00252000 	eoreq	r2, r5, r0
    8a98:	00001400 	andeq	r1, r0, r0, lsl #8
    8a9c:	589c0100 	ldmpl	ip, {r8}
    8aa0:	1f000007 	svcne	0x00000007
    8aa4:	000001dc 	ldrdeq	r0, [r0], -ip
    8aa8:	00003587 	andeq	r3, r0, r7, lsl #11
    8aac:	0001e816 	andeq	lr, r1, r6, lsl r8
    8ab0:	0035a800 	eorseq	sl, r5, r0, lsl #16
    8ab4:	25221500 	strcs	r1, [r2, #-1280]!	; 0xfffffb00
    8ab8:	000a0000 	andeq	r0, sl, r0
    8abc:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
    8ac0:	c7000001 	strgt	r0, [r0, -r1]
    8ac4:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8ac8:	00002522 	andeq	r2, r0, r2, lsr #10
    8acc:	0000000a 	andeq	r0, r0, sl
    8ad0:	0001e816 	andeq	lr, r1, r6, lsl r8
    8ad4:	0035e800 	eorseq	lr, r5, r0, lsl #16
    8ad8:	00000000 	andeq	r0, r0, r0
    8adc:	00199917 	andseq	r9, r9, r7, lsl r9
    8ae0:	34730200 	ldrbtcc	r0, [r3], #-512	; 0xfffffe00
    8ae4:	10000025 	andne	r0, r0, r5, lsr #32
    8ae8:	01000001 	tsteq	r0, r1
    8aec:	0009639c 	muleq	r9, ip, r3
    8af0:	1a441c00 	bne	110faf8 <__ccfg+0x10efb50>
    8af4:	27010000 	strcs	r0, [r1, -r0]
    8af8:	00008c01 	andeq	r8, r0, r1, lsl #24
    8afc:	0035fb00 	eorseq	pc, r5, r0, lsl #22
    8b00:	1ab01c00 	bne	fec0fb08 <_estack+0xdec0ab08>
    8b04:	27010000 	strcs	r0, [r1, -r0]
    8b08:	00008c01 	andeq	r8, r0, r1, lsl #24
    8b0c:	00362700 	eorseq	r2, r6, r0, lsl #14
    8b10:	1e1b1d00 	cdpne	13, 1, cr1, cr11, cr0, {0}
    8b14:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    8b18:	00008c01 	andeq	r8, r0, r1, lsl #24
    8b1c:	00364800 	eorseq	r4, r6, r0, lsl #16
    8b20:	01f52100 	mvnseq	r2, r0, lsl #2
    8b24:	25640000 	strbcs	r0, [r4, #-0]!
    8b28:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    8b2c:	40010000 	andmi	r0, r1, r0
    8b30:	0007c101 	andeq	ip, r7, r1, lsl #2
    8b34:	0e781200 	cdpeq	2, 7, cr1, cr8, cr0, {0}
    8b38:	05160000 	ldreq	r0, [r6, #-0]
    8b3c:	16000002 	strne	r0, [r0], -r2
    8b40:	00000037 	andeq	r0, r0, r7, lsr r0
    8b44:	253e2200 	ldrcs	r2, [lr, #-512]!	; 0xfffffe00
    8b48:	03430000 	movteq	r0, #12288	; 0x3000
    8b4c:	07d60000 	ldrbeq	r0, [r6, r0]
    8b50:	011a0000 	tsteq	sl, r0
    8b54:	01f30350 	mvnseq	r0, r0, asr r3
    8b58:	4a220051 	bmi	888ca4 <__ccfg+0x868cfc>
    8b5c:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8b60:	ef00000a 	svc	0x0000000a
    8b64:	1a000007 	bne	8b88 <__exidx_end+0x5d14>
    8b68:	48015101 	stmdami	r1, {r0, r8, ip, lr}
    8b6c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8b70:	23000074 	movwcs	r0, #116	; 0x74
    8b74:	0000254e 	andeq	r2, r0, lr, asr #10
    8b78:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    8b7c:	00256424 	eoreq	r6, r5, r4, lsr #8
    8b80:	00760200 	rsbseq	r0, r6, r0, lsl #4
    8b84:	0000081d 	andeq	r0, r0, sp, lsl r8
    8b88:	0153011a 	cmpeq	r3, sl, lsl r1
    8b8c:	52011a30 	andpl	r1, r1, #48, 20	; 0x30000
    8b90:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
    8b94:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8b98:	011a2c08 	tsteq	sl, r8, lsl #24
    8b9c:	00740250 	rsbseq	r0, r4, r0, asr r2
    8ba0:	25742200 	ldrbcs	r2, [r4, #-512]!	; 0xfffffe00
    8ba4:	0ad60000 	beq	ff588bac <_estack+0xdf583bac>
    8ba8:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
    8bac:	011a0000 	tsteq	sl, r0
    8bb0:	1a4c0151 	bne	13090fc <__ccfg+0x12e9154>
    8bb4:	74025001 	strvc	r5, [r2], #-1
    8bb8:	78230000 	stmdavc	r3!, {}	; <UNPREDICTABLE>
    8bbc:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    8bc0:	22000004 	andcs	r0, r0, #4
    8bc4:	00002582 	andeq	r2, r0, r2, lsl #11
    8bc8:	00000ad6 	ldrdeq	r0, [r0], -r6
    8bcc:	00000858 	andeq	r0, r0, r8, asr r8
    8bd0:	0151011a 	cmpeq	r1, sl, lsl r1
    8bd4:	50011a44 	andpl	r1, r1, r4, asr #20
    8bd8:	00007402 	andeq	r7, r0, r2, lsl #8
    8bdc:	00258623 	eoreq	r8, r5, r3, lsr #12
    8be0:	00043e00 	andeq	r3, r4, r0, lsl #28
    8be4:	25902200 	ldrcs	r2, [r0, #512]	; 0x200
    8be8:	0ad60000 	beq	ff588bf0 <_estack+0xdf583bf0>
    8bec:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    8bf0:	011a0000 	tsteq	sl, r0
    8bf4:	1a400151 	bne	1009140 <__ccfg+0xfe9198>
    8bf8:	74025001 	strvc	r5, [r2], #-1
    8bfc:	96220000 	strtls	r0, [r2], -r0
    8c00:	78000025 	stmdavc	r0, {r0, r2, r5}
    8c04:	8e000004 	cdphi	0, 0, cr0, cr0, cr4, {0}
    8c08:	1a000008 	bne	8c30 <__exidx_end+0x5dbc>
    8c0c:	75025001 	strvc	r5, [r2, #-1]
    8c10:	a0220000 	eorge	r0, r2, r0
    8c14:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8c18:	a700000a 	strge	r0, [r0, -sl]
    8c1c:	1a000008 	bne	8c44 <__exidx_end+0x5dd0>
    8c20:	3c015101 	stfccs	f5, [r1], {1}
    8c24:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c28:	22000074 	andcs	r0, r0, #116	; 0x74
    8c2c:	000025a6 	andeq	r2, r0, r6, lsr #11
    8c30:	000000e7 	andeq	r0, r0, r7, ror #1
    8c34:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    8c38:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c3c:	22000075 	andcs	r0, r0, #117	; 0x75
    8c40:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
    8c44:	00000110 	andeq	r0, r0, r0, lsl r1
    8c48:	000008cf 	andeq	r0, r0, pc, asr #17
    8c4c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c50:	22000075 	andcs	r0, r0, #117	; 0x75
    8c54:	000025c6 	andeq	r2, r0, r6, asr #11
    8c58:	00000139 	andeq	r0, r0, r9, lsr r1
    8c5c:	000008e3 	andeq	r0, r0, r3, ror #17
    8c60:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c64:	22000075 	andcs	r0, r0, #117	; 0x75
    8c68:	000025d0 	ldrdeq	r2, [r0], -r0
    8c6c:	00000ad6 	ldrdeq	r0, [r0], -r6
    8c70:	000008fd 	strdeq	r0, [r0], -sp
    8c74:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8c78:	011a2808 	tsteq	sl, r8, lsl #16
    8c7c:	00740250 	rsbseq	r0, r4, r0, asr r2
    8c80:	25d62200 	ldrbcs	r2, [r6, #512]	; 0x200
    8c84:	00be0000 	adcseq	r0, lr, r0
    8c88:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    8c8c:	011a0000 	tsteq	sl, r0
    8c90:	00750250 	rsbseq	r0, r5, r0, asr r2
    8c94:	25e82200 	strbcs	r2, [r8, #512]!	; 0x200
    8c98:	01a30000 			; <UNDEFINED> instruction: 0x01a30000
    8c9c:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
    8ca0:	011a0000 	tsteq	sl, r0
    8ca4:	00750250 	rsbseq	r0, r5, r0, asr r2
    8ca8:	25fa2200 	ldrbcs	r2, [sl, #512]!	; 0x200
    8cac:	01cc0000 	biceq	r0, ip, r0
    8cb0:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    8cb4:	011a0000 	tsteq	sl, r0
    8cb8:	00750250 	rsbseq	r0, r5, r0, asr r2
    8cbc:	260e2200 	strcs	r2, [lr], -r0, lsl #4
    8cc0:	016e0000 	cmneq	lr, r0
    8cc4:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    8cc8:	011a0000 	tsteq	sl, r0
    8ccc:	00750250 	rsbseq	r0, r5, r0, asr r2
    8cd0:	26181900 	ldrcs	r1, [r8], -r0, lsl #18
    8cd4:	0ad60000 	beq	ff588cdc <_estack+0xdf583cdc>
    8cd8:	011a0000 	tsteq	sl, r0
    8cdc:	1a380151 	bne	e09228 <__ccfg+0xde9280>
    8ce0:	74025001 	strvc	r5, [r2], #-1
    8ce4:	17000000 	strne	r0, [r0, -r0]
    8ce8:	00001a16 	andeq	r1, r0, r6, lsl sl
    8cec:	2644fd02 	strbcs	pc, [r4], -r2, lsl #26	; <UNPREDICTABLE>
    8cf0:	00640000 	rsbeq	r0, r4, r0
    8cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    8cf8:	00000989 	andeq	r0, r0, r9, lsl #19
    8cfc:	001be51d 	andseq	lr, fp, sp, lsl r5
    8d00:	03eb0100 	mvneq	r0, #0, 2
    8d04:	0000008c 	andeq	r0, r0, ip, lsl #1
    8d08:	0000372f 	andeq	r3, r0, pc, lsr #14
    8d0c:	1f730c00 	svcne	0x00730c00
    8d10:	06020000 	streq	r0, [r2], -r0
    8d14:	0026a801 	eoreq	sl, r6, r1, lsl #16
    8d18:	00002800 	andeq	r2, r0, r0, lsl #16
    8d1c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    8d20:	1c000009 	stcne	0, cr0, [r0], {9}
    8d24:	00001db2 			; <UNDEFINED> instruction: 0x00001db2
    8d28:	8c041301 	stchi	3, cr1, [r4], {1}
    8d2c:	4a000000 	bmi	8d34 <__exidx_end+0x5ec0>
    8d30:	00000037 	andeq	r0, r0, r7, lsr r0
    8d34:	0019c917 	andseq	ip, r9, r7, lsl r9
    8d38:	d07a0200 	rsbsle	r0, sl, r0, lsl #4
    8d3c:	50000026 	andpl	r0, r0, r6, lsr #32
    8d40:	01000001 	tsteq	r0, r1
    8d44:	000ad69c 	muleq	sl, ip, r6
    8d48:	1ab01c00 	bne	fec0fd50 <_estack+0xdec0ad50>
    8d4c:	9b010000 	blls	48d54 <__ccfg+0x28dac>
    8d50:	00008c01 	andeq	r8, r0, r1, lsl #24
    8d54:	00376b00 	eorseq	r6, r7, r0, lsl #22
    8d58:	1f111d00 	svcne	0x00111d00
    8d5c:	9d010000 	stcls	0, cr0, [r1, #-0]
    8d60:	00008c01 	andeq	r8, r0, r1, lsl #24
    8d64:	0037c600 	eorseq	ip, r7, r0, lsl #12
    8d68:	1e1b1d00 	cdpne	13, 1, cr1, cr11, cr0, {0}
    8d6c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    8d70:	00008c01 	andeq	r8, r0, r1, lsl #24
    8d74:	0037d900 	eorseq	sp, r7, r0, lsl #18
    8d78:	1b651d00 	blne	1950180 <__ccfg+0x19301d8>
    8d7c:	9f010000 	svcls	0x00010000
    8d80:	00008c01 	andeq	r8, r0, r1, lsl #24
    8d84:	0037ec00 	eorseq	lr, r7, r0, lsl #24
    8d88:	1b401d00 	blne	1010190 <__ccfg+0xff01e8>
    8d8c:	a0010000 	andge	r0, r1, r0
    8d90:	00008c01 	andeq	r8, r0, r1, lsl #24
    8d94:	00380a00 	eorseq	r0, r8, r0, lsl #20
    8d98:	02122500 	andseq	r2, r2, #0, 10
    8d9c:	27e20000 	strbcs	r0, [r2, r0]!
    8da0:	003e0000 	eorseq	r0, lr, r0
    8da4:	16010000 	strne	r0, [r1], -r0
    8da8:	275a2302 	ldrbcs	r2, [sl, -r2, lsl #6]
    8dac:	063c0000 	ldrteq	r0, [ip], -r0
    8db0:	7c220000 	stcvc	0, cr0, [r2], #-0
    8db4:	f2000027 	vhadd.s8	d0, d0, d23
    8db8:	4600000a 	strmi	r0, [r0], -sl
    8dbc:	1a00000a 	bne	8dec <__exidx_end+0x5f78>
    8dc0:	31015101 	tstcc	r1, r1, lsl #2
    8dc4:	0150011a 	cmpeq	r0, sl, lsl r1
    8dc8:	82220034 	eorhi	r0, r2, #52	; 0x34
    8dcc:	89000027 	stmdbhi	r0, {r0, r1, r2, r5}
    8dd0:	5d000009 	stcpl	0, cr0, [r0, #-36]	; 0xffffffdc
    8dd4:	1a00000a 	bne	8e04 <__exidx_end+0x5f90>
    8dd8:	0c055001 	stceq	0, cr5, [r5], {1}
    8ddc:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    8de0:	27882300 	strcs	r2, [r8, r0, lsl #6]
    8de4:	0b080000 	bleq	208dec <__ccfg+0x1e8e44>
    8de8:	92220000 	eorls	r0, r2, #0
    8dec:	f2000027 	vhadd.s8	d0, d0, d23
    8df0:	7f00000a 	svcvc	0x0000000a
    8df4:	1a00000a 	bne	8e24 <__exidx_end+0x5fb0>
    8df8:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    8dfc:	50011a00 	andpl	r1, r1, r0, lsl #20
    8e00:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8e04:	00002798 	muleq	r0, r8, r7
    8e08:	00000b08 	andeq	r0, r0, r8, lsl #22
    8e0c:	00000a92 	muleq	r0, r2, sl
    8e10:	0150011a 	cmpeq	r0, sl, lsl r1
    8e14:	a8220034 	stmdage	r2!, {r2, r4, r5}
    8e18:	89000027 	stmdbhi	r0, {r0, r1, r2, r5}
    8e1c:	ac000009 	stcge	0, cr0, [r0], {9}
    8e20:	1a00000a 	bne	8e50 <__exidx_end+0x5fdc>
    8e24:	74085001 	strvc	r5, [r8], #-1
    8e28:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    8e2c:	001a00ff 	ldrsheq	r0, [sl], -pc	; <UNPREDICTABLE>
    8e30:	0027b826 	eoreq	fp, r7, r6, lsr #16
    8e34:	000acc00 	andeq	ip, sl, r0, lsl #24
    8e38:	52011a00 	andpl	r1, r1, #0, 20
    8e3c:	60000c05 	andvs	r0, r0, r5, lsl #24
    8e40:	011a6000 	tsteq	sl, r0
    8e44:	1a370151 	bne	dc9390 <__ccfg+0xda93e8>
    8e48:	74045001 	strvc	r5, [r4], #-1
    8e4c:	00254800 	eoreq	r4, r5, r0, lsl #16
    8e50:	0027ce23 	eoreq	ip, r7, r3, lsr #28
    8e54:	000af200 	andeq	pc, sl, r0, lsl #4
    8e58:	2b270000 	blcs	9c8e60 <__ccfg+0x9a8eb8>
    8e5c:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    8e60:	0af201ca 	beq	ffc89590 <_estack+0xdfc84590>
    8e64:	8c280000 	stchi	0, cr0, [r8], #-0
    8e68:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8e6c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e70:	00008c28 	andeq	r8, r0, r8, lsr #24
    8e74:	4d290000 	stcmi	0, cr0, [r9, #-0]
    8e78:	0700001b 	smladeq	r0, fp, r0, r0
    8e7c:	000b08f9 	strdeq	r0, [fp], -r9
    8e80:	008c2800 	addeq	r2, ip, r0, lsl #16
    8e84:	8c280000 	stchi	0, cr0, [r8], #-0
    8e88:	00000000 	andeq	r0, r0, r0
    8e8c:	001ee82a 	andseq	lr, lr, sl, lsr #16
    8e90:	01100700 	tsteq	r0, r0, lsl #14
    8e94:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e98:	00008c28 	andeq	r8, r0, r8, lsr #24
    8e9c:	23000000 	movwcs	r0, #0
    8ea0:	04000009 	streq	r0, [r0], #-9
    8ea4:	002a2500 	eoreq	r2, sl, r0, lsl #10
    8ea8:	90010400 	andls	r0, r1, r0, lsl #8
    8eac:	01000016 	tsteq	r0, r6, lsl r0
    8eb0:	000020fb 	strdeq	r2, [r0], -fp
    8eb4:	00001785 	andeq	r1, r0, r5, lsl #15
    8eb8:	00000f68 	andeq	r0, r0, r8, ror #30
    8ebc:	00000000 	andeq	r0, r0, r0
    8ec0:	0000628a 	andeq	r6, r0, sl, lsl #5
    8ec4:	00174002 	andseq	r4, r7, r2
    8ec8:	301b0600 	andscc	r0, fp, r0, lsl #12
    8ecc:	03000000 	movweq	r0, #0
    8ed0:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    8ed4:	3a020000 	bcc	88edc <__ccfg+0x68f34>
    8ed8:	06000022 	streq	r0, [r0], -r2, lsr #32
    8edc:	0000421d 	andeq	r4, r0, sp, lsl r2
    8ee0:	08010300 	stmdaeq	r1, {r8, r9}
    8ee4:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    8ee8:	f1050203 			; <UNDEFINED> instruction: 0xf1050203
    8eec:	02000003 	andeq	r0, r0, #3
    8ef0:	00002128 	andeq	r2, r0, r8, lsr #2
    8ef4:	005b2b06 	subseq	r2, fp, r6, lsl #22
    8ef8:	02030000 	andeq	r0, r3, #0
    8efc:	00027307 	andeq	r7, r2, r7, lsl #6
    8f00:	16860200 	strne	r0, [r6], r0, lsl #4
    8f04:	3f060000 	svccc	0x00060000
    8f08:	0000006d 	andeq	r0, r0, sp, rrx
    8f0c:	b0050403 	andlt	r0, r5, r3, lsl #8
    8f10:	02000000 	andeq	r0, r0, #0
    8f14:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    8f18:	007f4106 	rsbseq	r4, pc, r6, lsl #2
    8f1c:	04030000 	streq	r0, [r3], #-0
    8f20:	00008507 	andeq	r8, r0, r7, lsl #10
    8f24:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    8f28:	000000ab 	andeq	r0, r0, fp, lsr #1
    8f2c:	80070803 	andhi	r0, r7, r3, lsl #16
    8f30:	04000000 	streq	r0, [r0], #-0
    8f34:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8f38:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    8f3c:	00008a07 	andeq	r8, r0, r7, lsl #20
    8f40:	17420200 	strbne	r0, [r2, -r0, lsl #4]
    8f44:	13070000 	movwne	r0, #28672	; 0x7000
    8f48:	00000025 	andeq	r0, r0, r5, lsr #32
    8f4c:	00223c02 	eoreq	r3, r2, r2, lsl #24
    8f50:	37140700 	ldrcc	r0, [r4, -r0, lsl #14]
    8f54:	02000000 	andeq	r0, r0, #0
    8f58:	0000212a 	andeq	r2, r0, sl, lsr #2
    8f5c:	00501a07 	subseq	r1, r0, r7, lsl #20
    8f60:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    8f64:	07000016 	smladeq	r0, r6, r0, r0
    8f68:	0000621f 	andeq	r6, r0, pc, lsl r2
    8f6c:	17f30200 	ldrbne	r0, [r3, r0, lsl #4]!
    8f70:	20070000 	andcs	r0, r7, r0
    8f74:	00000074 	andeq	r0, r0, r4, ror r0
    8f78:	00231302 	eoreq	r1, r3, r2, lsl #6
    8f7c:	e4330800 	ldrt	r0, [r3], #-2048	; 0xfffff800
    8f80:	05000000 	streq	r0, [r0, #-0]
    8f84:	0000ea04 	andeq	lr, r0, r4, lsl #20
    8f88:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    8f8c:	000000f1 	strdeq	r0, [r0], -r1
    8f90:	0000fc07 	andeq	pc, r0, r7, lsl #24
    8f94:	00ad0800 	adceq	r0, sp, r0, lsl #16
    8f98:	02000000 	andeq	r0, r0, #0
    8f9c:	00002389 	andeq	r2, r0, r9, lsl #7
    8fa0:	01074209 	tsteq	r7, r9, lsl #4
    8fa4:	04050000 	streq	r0, [r5], #-0
    8fa8:	0000010d 	andeq	r0, r0, sp, lsl #2
    8fac:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8fb0:	00012600 	andeq	r2, r1, r0, lsl #12
    8fb4:	01260800 			; <UNDEFINED> instruction: 0x01260800
    8fb8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    8fbc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8fc0:	000000ce 	andeq	r0, r0, lr, asr #1
    8fc4:	ad040500 	cfstr32ge	mvfx0, [r4, #-0]
    8fc8:	02000000 	andeq	r0, r0, #0
    8fcc:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    8fd0:	01374609 	teqeq	r7, r9, lsl #12
    8fd4:	04050000 	streq	r0, [r5], #-0
    8fd8:	0000013d 	andeq	r0, r0, sp, lsr r1
    8fdc:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    8fe0:	251e0200 	ldrcs	r0, [lr, #-512]	; 0xfffffe00
    8fe4:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    8fe8:	00000137 	andeq	r0, r0, r7, lsr r1
    8fec:	00226402 	eoreq	r6, r2, r2, lsl #8
    8ff0:	584a0900 	stmdapl	sl, {r8, fp}^
    8ff4:	05000001 	streq	r0, [r0, #-1]
    8ff8:	00015e04 	andeq	r5, r1, r4, lsl #28
    8ffc:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    9000:	016d0000 	cmneq	sp, r0
    9004:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9008:	00000000 	andeq	r0, r0, r0
    900c:	0021ca02 	eoreq	ip, r1, r2, lsl #20
    9010:	374c0900 	strbcc	r0, [ip, -r0, lsl #18]
    9014:	02000001 	andeq	r0, r0, #1
    9018:	00002133 	andeq	r2, r0, r3, lsr r1
    901c:	01074e09 	tsteq	r7, r9, lsl #28
    9020:	ba020000 	blt	89028 <__ccfg+0x69080>
    9024:	09000021 	stmdbeq	r0, {r0, r5}
    9028:	0000e451 	andeq	lr, r0, r1, asr r4
    902c:	20360200 	eorscs	r0, r6, r0, lsl #4
    9030:	53090000 	movwpl	r0, #36864	; 0x9000
    9034:	00000199 	muleq	r0, r9, r1
    9038:	019f0405 	orrseq	r0, pc, r5, lsl #8
    903c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    9040:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    9044:	08000001 	stmdaeq	r0, {r0}
    9048:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    904c:	0000b808 	andeq	fp, r0, r8, lsl #16
    9050:	00b80800 	adcseq	r0, r8, r0, lsl #16
    9054:	05000000 	streq	r0, [r0, #-0]
    9058:	0000b804 	andeq	fp, r0, r4, lsl #16
    905c:	23ad0200 			; <UNDEFINED> instruction: 0x23ad0200
    9060:	57090000 	strpl	r0, [r9, -r0]
    9064:	000001c9 	andeq	r0, r0, r9, asr #3
    9068:	01cf0405 	biceq	r0, pc, r5, lsl #8
    906c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    9070:	e3000000 	movw	r0, #0
    9074:	08000001 	stmdaeq	r0, {r0}
    9078:	000001e3 	andeq	r0, r0, r3, ror #3
    907c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    9080:	04050000 	streq	r0, [r5], #-0
    9084:	000000ce 	andeq	r0, r0, lr, asr #1
    9088:	0021ed02 	eoreq	lr, r1, r2, lsl #26
    908c:	c95a0900 	ldmdbgt	sl, {r8, fp}^
    9090:	02000001 	andeq	r0, r0, #1
    9094:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    9098:	01c95d09 	biceq	r5, r9, r9, lsl #26
    909c:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
    90a0:	09000020 	stmdbeq	r0, {r5}
    90a4:	0001c960 	andeq	ip, r1, r0, ror #18
    90a8:	23d80200 	bicscs	r0, r8, #0, 4
    90ac:	63090000 	movwvs	r0, #36864	; 0x9000
    90b0:	000000e4 	andeq	r0, r0, r4, ror #1
    90b4:	00206e02 	eoreq	r6, r0, r2, lsl #28
    90b8:	20650900 	rsbcs	r0, r5, r0, lsl #18
    90bc:	05000002 	streq	r0, [r0, #-2]
    90c0:	00022604 	andeq	r2, r2, r4, lsl #12
    90c4:	02310700 	eorseq	r0, r1, #0, 14
    90c8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    90cc:	00000000 	andeq	r0, r0, r0
    90d0:	00252f02 	eoreq	r2, r5, r2, lsl #30
    90d4:	20670900 	rsbcs	r0, r7, r0, lsl #18
    90d8:	02000002 	andeq	r0, r0, #2
    90dc:	00002324 	andeq	r2, r0, r4, lsr #6
    90e0:	00eb6909 	rsceq	r6, fp, r9, lsl #18
    90e4:	fd020000 	stc2	0, cr0, [r2, #-0]
    90e8:	09000024 	stmdbeq	r0, {r2, r5}
    90ec:	0000eb6b 	andeq	lr, r0, fp, ror #22
    90f0:	22d20200 	sbcscs	r0, r2, #0, 4
    90f4:	6d090000 	stcvs	0, cr0, [r9, #-0]
    90f8:	000000eb 	andeq	r0, r0, fp, ror #1
    90fc:	0022e402 	eoreq	lr, r2, r2, lsl #8
    9100:	eb6f0900 	bl	1bcb508 <__ccfg+0x1bab560>
    9104:	0b000000 	bleq	910c <__exidx_end+0x6298>
    9108:	557a094c 	ldrbpl	r0, [sl, #-2380]!	; 0xfffff6b4
    910c:	0c000003 	stceq	0, cr0, [r0], {3}
    9110:	00002288 	andeq	r2, r0, r8, lsl #5
    9114:	00fc7c09 	rscseq	r7, ip, r9, lsl #24
    9118:	0c000000 	stceq	0, cr0, [r0], {-0}
    911c:	000024f0 	strdeq	r2, [r0], -r0
    9120:	012c7d09 			; <UNDEFINED> instruction: 0x012c7d09
    9124:	0c040000 	stceq	0, cr0, [r4], {-0}
    9128:	000022ac 	andeq	r2, r0, ip, lsr #5
    912c:	01427e09 	cmpeq	r2, r9, lsl #28
    9130:	0c080000 	stceq	0, cr0, [r8], {-0}
    9134:	00002417 	andeq	r2, r0, r7, lsl r4
    9138:	014d7f09 	cmpeq	sp, r9, lsl #30
    913c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    9140:	00002429 	andeq	r2, r0, r9, lsr #8
    9144:	016d8009 	cmneq	sp, r9
    9148:	0c100000 	ldceq	0, cr0, [r0], {-0}
    914c:	0000243b 	andeq	r2, r0, fp, lsr r4
    9150:	01788109 	cmneq	r8, r9, lsl #2
    9154:	0c140000 	ldceq	0, cr0, [r4], {-0}
    9158:	00002186 	andeq	r2, r0, r6, lsl #3
    915c:	01838209 	orreq	r8, r3, r9, lsl #4
    9160:	0c180000 	ldceq	0, cr0, [r8], {-0}
    9164:	000022a1 	andeq	r2, r0, r1, lsr #5
    9168:	018e8309 	orreq	r8, lr, r9, lsl #6
    916c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    9170:	000023f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9174:	01be8409 			; <UNDEFINED> instruction: 0x01be8409
    9178:	0c200000 	stceq	0, cr0, [r0], #-0
    917c:	00002229 	andeq	r2, r0, r9, lsr #4
    9180:	01e98509 	mvneq	r8, r9, lsl #10
    9184:	0c240000 	stceq	0, cr0, [r4], #-0
    9188:	00002244 	andeq	r2, r0, r4, asr #4
    918c:	01f48609 	mvnseq	r8, r9, lsl #12
    9190:	0c280000 	stceq	0, cr0, [r8], #-0
    9194:	0000245f 	andeq	r2, r0, pc, asr r4
    9198:	01ff8709 	mvnseq	r8, r9, lsl #14
    919c:	0c2c0000 	stceq	0, cr0, [ip], #-0
    91a0:	000021db 	ldrdeq	r2, [r0], -fp
    91a4:	02158809 	andseq	r8, r5, #589824	; 0x90000
    91a8:	0c300000 	ldceq	0, cr0, [r0], #-0
    91ac:	0000244d 	andeq	r2, r0, sp, asr #8
    91b0:	02318909 	eorseq	r8, r1, #147456	; 0x24000
    91b4:	0c340000 	ldceq	0, cr0, [r4], #-0
    91b8:	0000228e 	andeq	r2, r0, lr, lsl #5
    91bc:	020a8a09 	andeq	r8, sl, #36864	; 0x9000
    91c0:	0c380000 	ldceq	0, cr0, [r8], #-0
    91c4:	00002302 	andeq	r2, r0, r2, lsl #6
    91c8:	023c8b09 	eorseq	r8, ip, #9216	; 0x2400
    91cc:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    91d0:	00002408 	andeq	r2, r0, r8, lsl #8
    91d4:	02478c09 	subeq	r8, r7, #2304	; 0x900
    91d8:	0c400000 	mareq	acc0, r0, r0
    91dc:	00002203 	andeq	r2, r0, r3, lsl #4
    91e0:	02528d09 	subseq	r8, r2, #576	; 0x240
    91e4:	0c440000 	mareq	acc0, r0, r4
    91e8:	0000205f 	andeq	r2, r0, pc, asr r0
    91ec:	025d8e09 	subseq	r8, sp, #9, 28	; 0x90
    91f0:	00480000 	subeq	r0, r8, r0
    91f4:	00236302 	eoreq	r6, r3, r2, lsl #6
    91f8:	688f0900 	stmvs	pc, {r8, fp}	; <UNPREDICTABLE>
    91fc:	0b000002 	bleq	920c <__exidx_end+0x6398>
    9200:	994e0108 	stmdbls	lr, {r3, r8}^
    9204:	0c000003 	stceq	0, cr0, [r0], {3}
    9208:	000023a6 	andeq	r2, r0, r6, lsr #7
    920c:	00ce4f01 	sbceq	r4, lr, r1, lsl #30
    9210:	0c000000 	stceq	0, cr0, [r0], {-0}
    9214:	00002473 	andeq	r2, r0, r3, ror r4
    9218:	00b85001 	adcseq	r5, r8, r1
    921c:	0c040000 	stceq	0, cr0, [r4], {-0}
    9220:	00002232 	andeq	r2, r0, r2, lsr r2
    9224:	00ad5101 	adceq	r5, sp, r1, lsl #2
    9228:	0c060000 	stceq	0, cr0, [r6], {-0}
    922c:	00002171 	andeq	r2, r0, r1, ror r1
    9230:	00a25201 	adceq	r5, r2, r1, lsl #4
    9234:	00070000 	andeq	r0, r7, r0
    9238:	00249f02 	eoreq	r9, r4, r2, lsl #30
    923c:	60530100 	subsvs	r0, r3, r0, lsl #2
    9240:	0d000003 	stceq	0, cr0, [r0, #-12]
    9244:	00000570 	andeq	r0, r0, r0, ror r5
    9248:	0301dc02 	movweq	sp, #7170	; 0x1c02
    924c:	000003be 			; <UNDEFINED> instruction: 0x000003be
    9250:	00052a0e 	andeq	r2, r5, lr, lsl #20
    9254:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    9258:	000000ce 	andeq	r0, r0, lr, asr #1
    925c:	05850f00 	streq	r0, [r5, #3840]	; 0xf00
    9260:	2c020000 	stccs	0, cr0, [r2], {-0}
    9264:	0000ce02 	andeq	ip, r0, r2, lsl #28
    9268:	8f100300 	svchi	0x00100300
    926c:	04000006 	streq	r0, [r0], #-6
    9270:	1103022a 	tstne	r3, sl, lsr #4
    9274:	00001e24 	andeq	r1, r0, r4, lsr #28
    9278:	00c3e905 	sbceq	lr, r3, r5, lsl #18
    927c:	fb030000 	blx	c9286 <__ccfg+0xa92de>
    9280:	12000003 	andne	r0, r0, #3
    9284:	00001b74 	andeq	r1, r0, r4, ror fp
    9288:	00cee905 	sbceq	lr, lr, r5, lsl #18
    928c:	7d130000 	ldcvc	0, cr0, [r3, #-0]
    9290:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    9294:	0000c3ef 	andeq	ip, r0, pc, ror #7
    9298:	920d0000 	andls	r0, sp, #0
    929c:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    92a0:	1503025c 	strne	r0, [r3, #-604]	; 0xfffffda4
    92a4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    92a8:	00002160 	andeq	r2, r0, r0, ror #2
    92ac:	ce025c04 	cdpgt	12, 0, cr5, cr2, cr4, {0}
    92b0:	00000000 	andeq	r0, r0, r0
    92b4:	00237710 	eoreq	r7, r3, r0, lsl r7
    92b8:	01400300 	mrseq	r0, SPSR_irq
    92bc:	23330f03 	teqcs	r3, #3, 30
    92c0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    92c4:	00042b02 	andeq	r2, r4, r2, lsl #22
    92c8:	01030300 	mrseq	r0, SP_svc
    92cc:	000bf802 	andeq	pc, fp, r2, lsl #16
    92d0:	23bb1400 			; <UNDEFINED> instruction: 0x23bb1400
    92d4:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
    92d8:	00000000 	andeq	r0, r0, r0
    92dc:	000000f4 	strdeq	r0, [r0], -r4
    92e0:	05cd9c01 	strbeq	r9, [sp, #3073]	; 0xc01
    92e4:	21150000 	tstcs	r5, r0
    92e8:	01000022 	tsteq	r0, r2, lsr #32
    92ec:	0000ce7b 	andeq	ip, r0, fp, ror lr
    92f0:	00381d00 	eorseq	r1, r8, r0, lsl #26
    92f4:	21781600 	cmncs	r8, r0, lsl #12
    92f8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    92fc:	000000ce 	andeq	r0, r0, lr, asr #1
    9300:	a41707ff 	ldrge	r0, [r7], #-2047	; 0xfffff801
    9304:	00000003 	andeq	r0, r0, r3
    9308:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    930c:	0100000f 	tsteq	r0, pc
    9310:	00047d81 	andeq	r7, r4, r1, lsl #27
    9314:	03b11800 			; <UNDEFINED> instruction: 0x03b11800
    9318:	00010000 	andeq	r0, r1, r0
    931c:	0003be19 	andeq	fp, r3, r9, lsl lr
    9320:	00000000 	andeq	r0, r0, r0
    9324:	00000400 	andeq	r0, r0, r0, lsl #8
    9328:	1a820100 	bne	fe089730 <_estack+0xde084730>
    932c:	00000415 	andeq	r0, r0, r5, lsl r4
    9330:	00000000 	andeq	r0, r0, r0
    9334:	00000008 	andeq	r0, r0, r8
    9338:	04a9a101 	strteq	sl, [r9], #257	; 0x101
    933c:	001b0000 	andseq	r0, fp, r0
    9340:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    9344:	00000008 	andeq	r0, r0, r8
    9348:	0003cb19 	andeq	ip, r3, r9, lsl fp
    934c:	00000000 	andeq	r0, r0, r0
    9350:	00000600 	andeq	r0, r0, r0, lsl #12
    9354:	19b10100 	ldmibne	r1!, {r8}
    9358:	0000041e 	andeq	r0, r0, lr, lsl r4
    935c:	00000000 	andeq	r0, r0, r0
    9360:	00000004 	andeq	r0, r0, r4
    9364:	fb1ab201 	blx	6b5b72 <__ccfg+0x695bca>
    9368:	00000003 	andeq	r0, r0, r3
    936c:	0a000000 	beq	9374 <__exidx_end+0x6500>
    9370:	01000000 	mrseq	r0, (UNDEF: 0)
    9374:	0004e1b8 			; <UNDEFINED> instruction: 0x0004e1b8
    9378:	04081800 	streq	r1, [r8], #-2048	; 0xfffff800
    937c:	00110000 	andseq	r0, r1, r0
    9380:	0003cb19 	andeq	ip, r3, r9, lsl fp
    9384:	00000000 	andeq	r0, r0, r0
    9388:	00000400 	andeq	r0, r0, r0, lsl #8
    938c:	19b90100 	ldmibne	r9!, {r8}
    9390:	0000041e 	andeq	r0, r0, lr, lsl r4
    9394:	00000000 	andeq	r0, r0, r0
    9398:	00000002 	andeq	r0, r0, r2
    939c:	cb19ba01 	blgt	677ba8 <__ccfg+0x657c00>
    93a0:	00000003 	andeq	r0, r0, r3
    93a4:	06000000 	streq	r0, [r0], -r0
    93a8:	01000000 	mrseq	r0, (UNDEF: 0)
    93ac:	041e19cf 	ldreq	r1, [lr], #-2511	; 0xfffff631
    93b0:	00000000 	andeq	r0, r0, r0
    93b4:	00020000 	andeq	r0, r2, r0
    93b8:	d0010000 	andle	r0, r1, r0
    93bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    93c0:	00052e00 	andeq	r2, r5, r0, lsl #28
    93c4:	50011d00 	andpl	r1, r1, r0, lsl #26
    93c8:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
    93cc:	00001c00 	andeq	r1, r0, r0, lsl #24
    93d0:	053f0000 	ldreq	r0, [pc, #-0]!	; 93d8 <__exidx_end+0x6564>
    93d4:	011d0000 	tsteq	sp, r0
    93d8:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    93dc:	001e0007 	andseq	r0, lr, r7
    93e0:	ef000000 	svc	0x00000000
    93e4:	57000008 	strpl	r0, [r0, -r8]
    93e8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    93ec:	31015101 	tstcc	r1, r1, lsl #2
    93f0:	0150011d 	cmpeq	r0, sp, lsl r1
    93f4:	001e0033 	andseq	r0, lr, r3, lsr r0
    93f8:	ef000000 	svc	0x00000000
    93fc:	6f000008 	svcvs	0x00000008
    9400:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9404:	33015101 	movwcc	r5, #4353	; 0x1101
    9408:	0150011d 	cmpeq	r0, sp, lsl r1
    940c:	001e0034 	andseq	r0, lr, r4, lsr r0
    9410:	05000000 	streq	r0, [r0, #-0]
    9414:	82000009 	andhi	r0, r0, #9
    9418:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    941c:	31015001 	tstcc	r1, r1
    9420:	00001c00 	andeq	r1, r0, r0, lsl #24
    9424:	05910000 	ldreq	r0, [r1]
    9428:	011d0000 	tsteq	sp, r0
    942c:	00370150 	eorseq	r0, r7, r0, asr r1
    9430:	0000001c 	andeq	r0, r0, ip, lsl r0
    9434:	0005a000 	andeq	sl, r5, r0
    9438:	50011d00 	andpl	r1, r1, r0, lsl #26
    943c:	1c003701 	stcne	7, cr3, [r0], {1}
    9440:	00000000 	andeq	r0, r0, r0
    9444:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    9448:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    944c:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    9450:	00000000 	andeq	r0, r0, r0
    9454:	000005c0 	andeq	r0, r0, r0, asr #11
    9458:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    945c:	1f000076 	svcne	0x00000076
    9460:	00000000 	andeq	r0, r0, r0
    9464:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    9468:	00000076 	andeq	r0, r0, r6, ror r0
    946c:	0020d320 	eoreq	sp, r0, r0, lsr #6
    9470:	01010a00 	tsteq	r1, r0, lsl #20
    9474:	00002820 	andeq	r2, r0, r0, lsr #16
    9478:	00000220 	andeq	r0, r0, r0, lsr #4
    947c:	07c89c01 	strbeq	r9, [r8, r1, lsl #24]
    9480:	f4210000 	vld4.8	{d0-d3}, [r1], r0
    9484:	01000022 	tsteq	r0, r2, lsr #32
    9488:	0000ceda 	ldrdeq	ip, [r0], -sl
    948c:	00384800 	eorseq	r4, r8, r0, lsl #16
    9490:	20571500 	subscs	r1, r7, r0, lsl #10
    9494:	dc010000 	stcle	0, cr0, [r1], {-0}
    9498:	000000c3 	andeq	r0, r0, r3, asr #1
    949c:	00003874 	andeq	r3, r0, r4, ror r8
    94a0:	00233f15 	eoreq	r3, r3, r5, lsl pc
    94a4:	c3dd0100 	bicsgt	r0, sp, #0, 2
    94a8:	92000000 	andls	r0, r0, #0
    94ac:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    94b0:	00002275 	andeq	r2, r0, r5, ror r2
    94b4:	00c3de01 	sbceq	sp, r3, r1, lsl #28
    94b8:	38ec0000 	stmiacc	ip!, {}^	; <UNPREDICTABLE>
    94bc:	91150000 	tstls	r5, r0
    94c0:	01000024 	tsteq	r0, r4, lsr #32
    94c4:	0000c3df 	ldrdeq	ip, [r0], -pc	; <UNPREDICTABLE>
    94c8:	00390a00 	eorseq	r0, r9, r0, lsl #20
    94cc:	20281500 	eorcs	r1, r8, r0, lsl #10
    94d0:	e0010000 	and	r0, r1, r0
    94d4:	000000c3 	andeq	r0, r0, r3, asr #1
    94d8:	00003928 	andeq	r3, r0, r8, lsr #18
    94dc:	00207f22 	eoreq	r7, r0, r2, lsr #30
    94e0:	c3e10100 	mvngt	r0, #0, 2
    94e4:	01000000 	mrseq	r0, (UNDEF: 0)
    94e8:	1ab01553 	bne	fec0ea3c <_estack+0xdec09a3c>
    94ec:	e2010000 	and	r0, r1, #0
    94f0:	000000ce 	andeq	r0, r0, lr, asr #1
    94f4:	0000393b 	andeq	r3, r0, fp, lsr r9
    94f8:	00236e15 	eoreq	r6, r3, r5, lsl lr
    94fc:	cee30100 	cdpgt	1, 14, cr0, cr3, cr0, {0}
    9500:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    9504:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    9508:	00002093 	muleq	r0, r3, r0
    950c:	00cee401 	sbceq	lr, lr, r1, lsl #8
    9510:	396d0000 	stmdbcc	sp!, {}^	; <UNPREDICTABLE>
    9514:	64230000 	strtvs	r0, [r3], #-0
    9518:	e5010069 	str	r0, [r1, #-105]	; 0xffffff97
    951c:	000000ce 	andeq	r0, r0, lr, asr #1
    9520:	00003980 	andeq	r3, r0, r0, lsl #19
    9524:	69696423 	stmdbvs	r9!, {r0, r1, r5, sl, sp, lr}^
    9528:	cee60100 	cdpgt	1, 14, cr0, cr6, cr0, {0}
    952c:	b6000000 	strlt	r0, [r0], -r0
    9530:	23000039 	movwcs	r0, #57	; 0x39
    9534:	01006974 	tsteq	r0, r4, ror r9
    9538:	0000cee7 	andeq	ip, r0, r7, ror #29
    953c:	0039ec00 	eorseq	lr, r9, r0, lsl #24
    9540:	64632300 	strbtvs	r2, [r3], #-768	; 0xfffffd00
    9544:	cee80100 	cdpgt	1, 14, cr0, cr8, cr0, {0}
    9548:	5c000000 	stcpl	0, cr0, [r0], {-0}
    954c:	2300003a 	movwcs	r0, #58	; 0x3a
    9550:	01006c63 	tsteq	r0, r3, ror #24
    9554:	0000cee9 	andeq	ip, r0, r9, ror #29
    9558:	003a6f00 	eorseq	r6, sl, r0, lsl #30
    955c:	20a41500 	adccs	r1, r4, r0, lsl #10
    9560:	ea010000 	b	49568 <__ccfg+0x295c0>
    9564:	000000ce 	andeq	r0, r0, lr, asr #1
    9568:	00003a82 	andeq	r3, r0, r2, lsl #21
    956c:	01006b24 	tsteq	r0, r4, lsr #22
    9570:	0000ceeb 	andeq	ip, r0, fp, ror #29
    9574:	21fb1300 	mvnscs	r1, r0, lsl #6
    9578:	ec010000 	stc	0, cr0, [r1], {-0}
    957c:	000000ce 	andeq	r0, r0, lr, asr #1
    9580:	0021a815 	eoreq	sl, r1, r5, lsl r8
    9584:	ceed0100 	cdpgt	1, 14, cr0, cr13, cr0, {0}
    9588:	a0000000 	andge	r0, r0, r0
    958c:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    9590:	0000216c 	andeq	r2, r0, ip, ror #2
    9594:	00ceee01 	sbceq	lr, lr, r1, lsl #28
    9598:	3ac90000 	bcc	ff2495a0 <_estack+0xdf2445a0>
    959c:	a3150000 	tstge	r5, #0
    95a0:	01000021 	tsteq	r0, r1, lsr #32
    95a4:	0000ceef 	andeq	ip, r0, pc, ror #29
    95a8:	003ae800 	eorseq	lr, sl, r0, lsl #16
    95ac:	23fb1500 	mvnscs	r1, #0, 10
    95b0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    95b4:	000007c8 	andeq	r0, r0, r8, asr #15
    95b8:	00003b2c 	andeq	r3, r0, ip, lsr #22
    95bc:	00284e25 	eoreq	r4, r8, r5, lsr #28
    95c0:	00001200 	andeq	r1, r0, r0, lsl #4
    95c4:	00073b00 	andeq	r3, r7, r0, lsl #22
    95c8:	234b2600 	movtcs	r2, #46592	; 0xb600
    95cc:	0a010000 	beq	495d4 <__ccfg+0x2962c>
    95d0:	0000c301 	andeq	ip, r0, r1, lsl #6
    95d4:	003b4400 	eorseq	r4, fp, r0, lsl #8
    95d8:	d4270000 	strtle	r0, [r7], #-0
    95dc:	74000003 	strvc	r0, [r0], #-3
    95e0:	06000028 	streq	r0, [r0], -r8, lsr #32
    95e4:	01000000 	mrseq	r0, (UNDEF: 0)
    95e8:	07680111 			; <UNDEFINED> instruction: 0x07680111
    95ec:	e4280000 	strt	r0, [r8], #-0
    95f0:	29000003 	stmdbcs	r0, {r0, r1}
    95f4:	00002874 	andeq	r2, r0, r4, ror r8
    95f8:	00000006 	andeq	r0, r0, r6
    95fc:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    9600:	003b5700 	eorseq	r5, fp, r0, lsl #14
    9604:	27000000 	strcs	r0, [r0, -r0]
    9608:	000003d4 	ldrdeq	r0, [r0], -r4
    960c:	0000288c 	andeq	r2, r0, ip, lsl #17
    9610:	00000006 	andeq	r0, r0, r6
    9614:	95011b01 	strls	r1, [r1, #-2817]	; 0xfffff4ff
    9618:	28000007 	stmdacs	r0, {r0, r1, r2}
    961c:	000003e4 	andeq	r0, r0, r4, ror #7
    9620:	00288c29 	eoreq	r8, r8, r9, lsr #24
    9624:	00000600 	andeq	r0, r0, r0, lsl #12
    9628:	03ef2a00 	mvneq	r2, #0, 20
    962c:	3b6a0000 	blcc	1a89634 <__ccfg+0x1a6968c>
    9630:	00000000 	andeq	r0, r0, r0
    9634:	0003d42b 	andeq	sp, r3, fp, lsr #8
    9638:	00289600 	eoreq	r9, r8, r0, lsl #12
    963c:	000f5000 	andeq	r5, pc, r0
    9640:	011f0100 	tsteq	pc, r0, lsl #2
    9644:	000007be 			; <UNDEFINED> instruction: 0x000007be
    9648:	0003e428 	andeq	lr, r3, r8, lsr #8
    964c:	0f502c00 	svceq	0x00502c00
    9650:	ef2a0000 	svc	0x002a0000
    9654:	7d000003 	stcvc	0, cr0, [r0, #-12]
    9658:	0000003b 	andeq	r0, r0, fp, lsr r0
    965c:	28401b00 	stmdacs	r0, {r8, r9, fp, ip}^
    9660:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    9664:	05000000 	streq	r0, [r0, #-0]
    9668:	0007ce04 	andeq	ip, r7, r4, lsl #28
    966c:	00ce2d00 	sbceq	r2, lr, r0, lsl #26
    9670:	a9200000 	stmdbge	r0!, {}	; <UNPREDICTABLE>
    9674:	0a000020 	beq	96fc <__exidx_end+0x6888>
    9678:	2a400117 	bcs	1009adc <__ccfg+0xfe9b34>
    967c:	00600000 	rsbeq	r0, r0, r0
    9680:	9c010000 	stcls	0, cr0, [r1], {-0}
    9684:	00000833 	andeq	r0, r0, r3, lsr r8
    9688:	00205726 	eoreq	r5, r0, r6, lsr #14
    968c:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    9690:	000000c3 	andeq	r0, r0, r3, asr #1
    9694:	00003b90 	muleq	r0, r0, fp
    9698:	00224e26 	eoreq	r4, r2, r6, lsr #28
    969c:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    96a0:	000000ce 	andeq	r0, r0, lr, asr #1
    96a4:	00003bbb 			; <UNDEFINED> instruction: 0x00003bbb
    96a8:	00221726 	eoreq	r1, r2, r6, lsr #14
    96ac:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    96b0:	000000ce 	andeq	r0, r0, lr, asr #1
    96b4:	00003bce 	andeq	r3, r0, lr, asr #23
    96b8:	0021a826 	eoreq	sl, r1, r6, lsr #16
    96bc:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    96c0:	000000ce 	andeq	r0, r0, lr, asr #1
    96c4:	00003bf5 	strdeq	r3, [r0], -r5
    96c8:	002a4e1b 	eoreq	r4, sl, fp, lsl lr
    96cc:	00091b00 	andeq	r1, r9, r0, lsl #22
    96d0:	c3200000 	nopgt	{0}	; <UNPREDICTABLE>
    96d4:	0a000024 	beq	976c <__exidx_end+0x68f8>
    96d8:	00000129 	andeq	r0, r0, r9, lsr #2
    96dc:	00780000 	rsbseq	r0, r8, r0
    96e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    96e4:	0000088a 	andeq	r0, r0, sl, lsl #17
    96e8:	0022c526 	eoreq	ip, r2, r6, lsr #10
    96ec:	01e70100 	mvneq	r0, r0, lsl #2
    96f0:	000000ce 	andeq	r0, r0, lr, asr #1
    96f4:	00003c1e 	andeq	r3, r0, lr, lsl ip
    96f8:	00248426 	eoreq	r8, r4, r6, lsr #8
    96fc:	01e80100 	mvneq	r0, r0, lsl #2
    9700:	000000ce 	andeq	r0, r0, lr, asr #1
    9704:	00003c31 	andeq	r3, r0, r1, lsr ip
    9708:	001ab026 	andseq	fp, sl, r6, lsr #32
    970c:	01e90100 	mvneq	r0, r0, lsl #2
    9710:	000000ce 	andeq	r0, r0, lr, asr #1
    9714:	00003c44 	andeq	r3, r0, r4, asr #24
    9718:	00239626 	eoreq	r9, r3, r6, lsr #12
    971c:	01ea0100 	mvneq	r0, r0, lsl #2
    9720:	000000ce 	andeq	r0, r0, lr, asr #1
    9724:	00003c57 	andeq	r3, r0, r7, asr ip
    9728:	21442e00 	cmpcs	r4, r0, lsl #28
    972c:	420a0000 	andmi	r0, sl, #0
    9730:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9734:	002aa000 	eoreq	sl, sl, r0
    9738:	00001800 	andeq	r1, r0, r0, lsl #16
    973c:	229c0100 	addscs	r0, ip, #0, 2
    9740:	0000250d 	andeq	r2, r0, sp, lsl #10
    9744:	03995501 	orrseq	r5, r9, #4194304	; 0x400000
    9748:	03050000 	movweq	r0, #20480	; 0x5000
    974c:	20000078 	andcs	r0, r0, r8, ror r0
    9750:	0000ce2f 	andeq	ip, r0, pc, lsr #28
    9754:	0008c100 	andeq	ip, r8, r0, lsl #2
    9758:	08c13000 	stmiaeq	r1, {ip, sp}^
    975c:	000c0000 	andeq	r0, ip, r0
    9760:	b5070403 	strlt	r0, [r7, #-1027]	; 0xfffffbfd
    9764:	22000018 	andcs	r0, r0, #24
    9768:	00002353 	andeq	r2, r0, r3, asr r3
    976c:	08d96101 	ldmeq	r9, {r0, r8, sp, lr}^
    9770:	03050000 	movweq	r0, #20480	; 0x5000
    9774:	00000000 	andeq	r0, r0, r0
    9778:	0008b12d 	andeq	fp, r8, sp, lsr #2
    977c:	211b3100 	tstcs	fp, r0, lsl #2
    9780:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    9784:	000008ef 	andeq	r0, r0, pc, ror #17
    9788:	0000d908 	andeq	sp, r0, r8, lsl #18
    978c:	4d310000 	ldcmi	0, cr0, [r1, #-0]
    9790:	0300001b 	movweq	r0, #27
    9794:	000905f9 	strdeq	r0, [r9], -r9
    9798:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    979c:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    97a0:	00000000 	andeq	r0, r0, r0
    97a4:	001ee832 	andseq	lr, lr, r2, lsr r8
    97a8:	01100300 	tsteq	r0, r0, lsl #6
    97ac:	000000ce 	andeq	r0, r0, lr, asr #1
    97b0:	0000091b 	andeq	r0, r0, fp, lsl r9
    97b4:	0000ce08 	andeq	ip, r0, r8, lsl #28
    97b8:	57330000 	ldrpl	r0, [r3, -r0]!
    97bc:	0b000016 	bleq	981c <__exidx_end+0x69a8>
    97c0:	0000c3aa 	andeq	ip, r0, sl, lsr #7
    97c4:	03cc0000 	biceq	r0, ip, #0
    97c8:	00040000 	andeq	r0, r4, r0
    97cc:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    97d0:	16900104 	ldrne	r0, [r0], r4, lsl #2
    97d4:	16010000 	strne	r0, [r1], -r0
    97d8:	85000028 	strhi	r0, [r0, #-40]	; 0xffffffd8
    97dc:	c8000017 	stmdagt	r0, {r0, r1, r2, r4}
    97e0:	0000000f 	andeq	r0, r0, pc
    97e4:	f3000000 	vhadd.u8	d0, d0, d0
    97e8:	02000065 	andeq	r0, r0, #101	; 0x65
    97ec:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    97f0:	01020000 	mrseq	r0, (UNDEF: 2)
    97f4:	0003b508 	andeq	fp, r3, r8, lsl #10
    97f8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    97fc:	000003f1 	strdeq	r0, [r0], -r1
    9800:	73070202 	movwvc	r0, #29186	; 0x7202
    9804:	02000002 	andeq	r0, r0, #2
    9808:	00b00504 	adcseq	r0, r0, r4, lsl #10
    980c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    9810:	03000017 	movweq	r0, #23
    9814:	00005341 	andeq	r5, r0, r1, asr #6
    9818:	07040200 	streq	r0, [r4, -r0, lsl #4]
    981c:	00000085 	andeq	r0, r0, r5, lsl #1
    9820:	ab050802 	blge	14b830 <__ccfg+0x12b888>
    9824:	02000000 	andeq	r0, r0, #0
    9828:	00800708 	addeq	r0, r0, r8, lsl #14
    982c:	04040000 	streq	r0, [r4], #-0
    9830:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    9834:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9838:	0000008a 	andeq	r0, r0, sl, lsl #1
    983c:	0017f303 	andseq	pc, r7, r3, lsl #6
    9840:	48200400 	stmdami	r0!, {sl}
    9844:	05000000 	streq	r0, [r0, #-0]
    9848:	a2630201 	rsbge	r0, r3, #268435456	; 0x10000000
    984c:	06000000 	streq	r0, [r0], -r0
    9850:	00002750 	andeq	r2, r0, r0, asr r7
    9854:	27900600 	ldrcs	r0, [r0, r0, lsl #12]
    9858:	06020000 	streq	r0, [r2], -r0
    985c:	00002700 	andeq	r2, r0, r0, lsl #14
    9860:	25400604 	strbcs	r0, [r0, #-1540]	; 0xfffff9fc
    9864:	00080000 	andeq	r0, r8, r0
    9868:	0026ec03 	eoreq	lr, r6, r3, lsl #24
    986c:	81680200 	cmnhi	r8, r0, lsl #4
    9870:	05000000 	streq	r0, [r0, #-0]
    9874:	daa50201 	ble	fe94a080 <_estack+0xde945080>
    9878:	06000000 	streq	r0, [r0], -r0
    987c:	00002806 	andeq	r2, r0, r6, lsl #16
    9880:	2558067f 	ldrbcs	r0, [r8, #-1663]	; 0xfffff981
    9884:	06000000 	streq	r0, [r0], -r0
    9888:	000028b7 			; <UNDEFINED> instruction: 0x000028b7
    988c:	27440601 	strbcs	r0, [r4, -r1, lsl #12]
    9890:	06020000 	streq	r0, [r2], -r0
    9894:	000028a9 	andeq	r2, r0, r9, lsr #17
    9898:	263d0603 	ldrtcs	r0, [sp], -r3, lsl #12
    989c:	00040000 	andeq	r0, r4, r0
    98a0:	0028c303 	eoreq	ip, r8, r3, lsl #6
    98a4:	adac0200 	sfmge	f0, 4, [ip]
    98a8:	07000000 	streq	r0, [r0, -r0]
    98ac:	013d0201 	teqeq	sp, r1, lsl #4
    98b0:	00000125 	andeq	r0, r0, r5, lsr #2
    98b4:	00271a06 	eoreq	r1, r7, r6, lsl #20
    98b8:	08067f00 	stmdaeq	r6, {r8, r9, sl, fp, ip, sp, lr}
    98bc:	00000026 	andeq	r0, r0, r6, lsr #32
    98c0:	00266406 	eoreq	r6, r6, r6, lsl #8
    98c4:	a0060100 	andge	r0, r6, r0, lsl #2
    98c8:	02000026 	andeq	r0, r0, #38	; 0x26
    98cc:	0027eb06 	eoreq	lr, r7, r6, lsl #22
    98d0:	64060300 	strvs	r0, [r6], #-768	; 0xfffffd00
    98d4:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    98d8:	00262c06 	eoreq	r2, r6, r6, lsl #24
    98dc:	c5060500 	strgt	r0, [r6, #-1280]	; 0xfffffb00
    98e0:	06000027 	streq	r0, [r0], -r7, lsr #32
    98e4:	0027d806 	eoreq	sp, r7, r6, lsl #16
    98e8:	08000700 	stmdaeq	r0, {r8, r9, sl}
    98ec:	000025f0 	strdeq	r2, [r0], -r0
    98f0:	e5014702 	str	r4, [r1, #-1794]	; 0xfffff8fe
    98f4:	07000000 	streq	r0, [r0, -r0]
    98f8:	01590201 	cmpeq	r9, r1, lsl #4
    98fc:	0000015f 	andeq	r0, r0, pc, asr r1
    9900:	00269106 	eoreq	r9, r6, r6, lsl #2
    9904:	ba067f00 	blt	1a950c <__ccfg+0x189564>
    9908:	00000026 	andeq	r0, r0, r6, lsr #32
    990c:	00273606 	eoreq	r3, r7, r6, lsl #12
    9910:	7d060100 	stfvcs	f0, [r6, #-0]
    9914:	02000025 	andeq	r0, r0, #37	; 0x25
    9918:	0027a006 	eoreq	sl, r7, r6
    991c:	53060300 	movwpl	r0, #25344	; 0x6300
    9920:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    9924:	26190800 	ldrcs	r0, [r9], -r0, lsl #16
    9928:	60020000 	andvs	r0, r2, r0
    992c:	00013101 	andeq	r3, r1, r1, lsl #2
    9930:	02010700 	andeq	r0, r1, #0, 14
    9934:	019901b8 			; <UNDEFINED> instruction: 0x019901b8
    9938:	d0060000 	andle	r0, r6, r0
    993c:	7f000026 	svcvc	0x00000026
    9940:	0027fc06 	eoreq	pc, r7, r6, lsl #24
    9944:	61060a00 	tstvs	r6, r0, lsl #20
    9948:	14000027 	strne	r0, [r0], #-39	; 0xffffffd9
    994c:	00278606 	eoreq	r8, r7, r6, lsl #12
    9950:	2c061500 	cfstr32cs	mvfx1, [r6], {-0}
    9954:	16000027 	strne	r0, [r0], -r7, lsr #32
    9958:	0027b206 	eoreq	fp, r7, r6, lsl #4
    995c:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
    9960:	000025fb 	strdeq	r2, [r0], -fp
    9964:	6b01bf02 	blvs	79574 <__ccfg+0x595cc>
    9968:	09000001 	stmdbeq	r0, {r0}
    996c:	00002842 	andeq	r2, r0, r2, asr #16
    9970:	76010702 	strvc	r0, [r1], -r2, lsl #14
    9974:	03000000 	movweq	r0, #0
    9978:	00258f0a 	eoreq	r8, r5, sl, lsl #30
    997c:	016a0200 	cmneq	sl, r0, lsl #4
    9980:	0000015f 	andeq	r0, r0, pc, asr r1
    9984:	0001da01 	andeq	sp, r1, r1, lsl #20
    9988:	26c80b00 	strbcs	r0, [r8], r0, lsl #22
    998c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    9990:	0000015f 	andeq	r0, r0, pc, asr r1
    9994:	0025750b 	eoreq	r7, r5, fp, lsl #10
    9998:	76690100 	strbtvc	r0, [r9], -r0, lsl #2
    999c:	00000000 	andeq	r0, r0, r0
    99a0:	0028f009 	eoreq	pc, r8, r9
    99a4:	01320200 	teqeq	r2, r0, lsl #4
    99a8:	00000076 	andeq	r0, r0, r6, ror r0
    99ac:	28820c03 	stmcs	r2, {r0, r1, sl, fp}
    99b0:	72020000 	andvc	r0, r2, #0
    99b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    99b8:	00000000 	andeq	r0, r0, r0
    99bc:	00000010 	andeq	r0, r0, r0, lsl r0
    99c0:	ac0d9c01 	stcge	12, cr9, [sp], {1}
    99c4:	02000025 	andeq	r0, r0, #37	; 0x25
    99c8:	0000dab6 			; <UNDEFINED> instruction: 0x0000dab6
    99cc:	00000000 	andeq	r0, r0, r0
    99d0:	00001800 	andeq	r1, r0, r0, lsl #16
    99d4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    99d8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    99dc:	000025e7 	andeq	r2, r0, r7, ror #11
    99e0:	00da5201 	sbcseq	r5, sl, r1, lsl #4
    99e4:	3c6a0000 	stclcc	0, cr0, [sl], #-0
    99e8:	0f000000 	svceq	0x00000000
    99ec:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    99f0:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    99f4:	0000004c 	andeq	r0, r0, ip, asr #32
    99f8:	026e9c01 	rsbeq	r9, lr, #256	; 0x100
    99fc:	c3100000 	tstgt	r0, #0
    9a00:	92000001 	andls	r0, r0, #1
    9a04:	1000003c 	andne	r0, r0, ip, lsr r0
    9a08:	000001ce 	andeq	r0, r0, lr, asr #3
    9a0c:	00003cb2 			; <UNDEFINED> instruction: 0x00003cb2
    9a10:	002ac811 	eoreq	ip, sl, r1, lsl r8
    9a14:	00000e00 	andeq	r0, r0, r0, lsl #28
    9a18:	01c31200 	biceq	r1, r3, r0, lsl #4
    9a1c:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
    9a20:	13000001 	movwne	r0, #1
    9a24:	000001a5 	andeq	r0, r0, r5, lsr #3
    9a28:	00002ac8 	andeq	r2, r0, r8, asr #21
    9a2c:	00000004 	andeq	r0, r0, r4
    9a30:	00007001 	andeq	r7, r0, r1
    9a34:	00276b14 	eoreq	r6, r7, r4, lsl fp
    9a38:	01510200 	cmpeq	r1, r0, lsl #4
    9a3c:	00000125 	andeq	r0, r0, r5, lsr #2
    9a40:	00000000 	andeq	r0, r0, r0
    9a44:	00000030 	andeq	r0, r0, r0, lsr r0
    9a48:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
    9a4c:	bc0e0000 	stclt	0, cr0, [lr], {-0}
    9a50:	01000027 	tsteq	r0, r7, lsr #32
    9a54:	00012585 	andeq	r2, r1, r5, lsl #11
    9a58:	003ce600 	eorseq	lr, ip, r0, lsl #12
    9a5c:	28360b00 	ldmdacs	r6!, {r8, r9, fp}
    9a60:	86010000 	strhi	r0, [r1], -r0
    9a64:	00000076 	andeq	r0, r0, r6, ror r0
    9a68:	0026de0e 	eoreq	sp, r6, lr, lsl #28
    9a6c:	76870100 	strvc	r0, [r7], r0, lsl #2
    9a70:	06000000 	streq	r0, [r0], -r0
    9a74:	1300003d 	movwne	r0, #61	; 0x3d
    9a78:	000001da 	ldrdeq	r0, [r0], -sl
    9a7c:	00000000 	andeq	r0, r0, r0
    9a80:	00000004 	andeq	r0, r0, r4
    9a84:	00158601 	andseq	r8, r5, r1, lsl #12
    9a88:	b2000000 	andlt	r0, r0, #0
    9a8c:	00000001 	andeq	r0, r0, r1
    9a90:	00286016 	eoreq	r6, r8, r6, lsl r0
    9a94:	01190200 	tsteq	r9, r0, lsl #4
    9a98:	00000076 	andeq	r0, r0, r6, ror r0
    9a9c:	0002e803 	andeq	lr, r2, r3, lsl #16
    9aa0:	264a1700 	strbcs	r1, [sl], -r0, lsl #14
    9aa4:	1b020000 	blne	89aac <__ccfg+0x69b04>
    9aa8:	00007601 	andeq	r7, r0, r1, lsl #12
    9aac:	ca140000 	bgt	509ab4 <__ccfg+0x4e9b0c>
    9ab0:	02000025 	andeq	r0, r0, #37	; 0x25
    9ab4:	019901c9 	orrseq	r0, r9, r9, asr #3
    9ab8:	2b040000 	blcs	109ac0 <__ccfg+0xe9b18>
    9abc:	006c0000 	rsbeq	r0, ip, r0
    9ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ac4:	00000365 	andeq	r0, r0, r5, ror #6
    9ac8:	0026260e 	eoreq	r2, r6, lr, lsl #12
    9acc:	99a80100 	stmibls	r8!, {r8}
    9ad0:	19000001 	stmdbne	r0, {r0}
    9ad4:	0b00003d 	bleq	9bd0 <__exidx_end+0x6d5c>
    9ad8:	000026b1 			; <UNDEFINED> instruction: 0x000026b1
    9adc:	0076a901 	rsbseq	sl, r6, r1, lsl #18
    9ae0:	77180000 	ldrvc	r0, [r8, -r0]
    9ae4:	01000028 	tsteq	r0, r8, lsr #32
    9ae8:	000076aa 	andeq	r7, r0, sl, lsr #13
    9aec:	19540100 	ldmdbne	r4, {r8}^
    9af0:	000001a5 	andeq	r0, r0, r5, lsr #3
    9af4:	00002b06 	andeq	r2, r0, r6, lsl #22
    9af8:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    9afc:	ca1aa901 	bgt	6b3f08 <__ccfg+0x693f60>
    9b00:	0a000002 	beq	9b10 <__exidx_end+0x6c9c>
    9b04:	b000002b 	andlt	r0, r0, fp, lsr #32
    9b08:	0100000f 	tsteq	r0, pc
    9b0c:	00035baa 	andeq	r5, r3, sl, lsr #23
    9b10:	0fb01b00 	svceq	0x00b01b00
    9b14:	db100000 	blle	409b1c <__ccfg+0x3e9b74>
    9b18:	76000002 	strvc	r0, [r0], -r2
    9b1c:	0000003d 	andeq	r0, r0, sp, lsr r0
    9b20:	2b1e1500 	blcs	78ef28 <__ccfg+0x76ef80>
    9b24:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9b28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9b2c:	00002675 	andeq	r2, r0, r5, ror r6
    9b30:	72018302 	andvc	r8, r1, #134217728	; 0x8000000
    9b34:	03000003 	movweq	r0, #3
    9b38:	f8020102 			; <UNDEFINED> instruction: 0xf8020102
    9b3c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    9b40:	000028d1 	ldrdeq	r2, [r0], -r1
    9b44:	7201f002 	andvc	pc, r1, #2
    9b48:	03000003 	movweq	r0, #3
    9b4c:	001af91c 	andseq	pc, sl, ip, lsl r9	; <UNPREDICTABLE>
    9b50:	02430200 	subeq	r0, r3, #0, 4
    9b54:	00002b70 	andeq	r2, r0, r0, ror fp
    9b58:	00000016 	andeq	r0, r0, r6, lsl r0
    9b5c:	651d9c01 	ldrvs	r9, [sp, #-3073]	; 0xfffff3ff
    9b60:	72000003 	andvc	r0, r0, #3
    9b64:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    9b68:	01000000 	mrseq	r0, (UNDEF: 0)
    9b6c:	0003b5e2 	andeq	fp, r3, r2, ror #11
    9b70:	2b761500 	blcs	1d8ef78 <__ccfg+0x1d6efd0>
    9b74:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9b78:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9b7c:	00000379 	andeq	r0, r0, r9, ror r3
    9b80:	00002b7a 	andeq	r2, r0, sl, ror fp
    9b84:	00000004 	andeq	r0, r0, r4
    9b88:	7e15e301 	cdpvc	3, 1, cr14, cr5, cr1, {0}
    9b8c:	e800002b 	stmda	r0, {r0, r1, r3, r5}
    9b90:	00000002 	andeq	r0, r0, r2
    9b94:	05a70000 	streq	r0, [r7, #0]!
    9b98:	00040000 	andeq	r0, r4, r0
    9b9c:	00002ead 	andeq	r2, r0, sp, lsr #29
    9ba0:	16900104 	ldrne	r0, [r0], r4, lsl #2
    9ba4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    9ba8:	85000029 	strhi	r0, [r0, #-41]	; 0xffffffd7
    9bac:	00000017 	andeq	r0, r0, r7, lsl r0
    9bb0:	00000010 	andeq	r0, r0, r0, lsl r0
    9bb4:	22000000 	andcs	r0, r0, #0
    9bb8:	02000068 	andeq	r0, r0, #104	; 0x68
    9bbc:	03b70601 			; <UNDEFINED> instruction: 0x03b70601
    9bc0:	3a030000 	bcc	c9bc8 <__ccfg+0xa9c20>
    9bc4:	03000022 	movweq	r0, #34	; 0x22
    9bc8:	0000371d 	andeq	r3, r0, sp, lsl r7
    9bcc:	08010200 	stmdaeq	r1, {r9}
    9bd0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    9bd4:	f1050202 			; <UNDEFINED> instruction: 0xf1050202
    9bd8:	03000003 	movweq	r0, #3
    9bdc:	00002128 	andeq	r2, r0, r8, lsr #2
    9be0:	00502b03 	subseq	r2, r0, r3, lsl #22
    9be4:	02020000 	andeq	r0, r2, #0
    9be8:	00027307 	andeq	r7, r2, r7, lsl #6
    9bec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9bf0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    9bf4:	0017f103 	andseq	pc, r7, r3, lsl #2
    9bf8:	69410300 	stmdbvs	r1, {r8, r9}^
    9bfc:	02000000 	andeq	r0, r0, #0
    9c00:	00850704 	addeq	r0, r5, r4, lsl #14
    9c04:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9c08:	0000ab05 	andeq	sl, r0, r5, lsl #22
    9c0c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9c10:	00000080 	andeq	r0, r0, r0, lsl #1
    9c14:	69050404 	stmdbvs	r5, {r2, sl}
    9c18:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    9c1c:	008a0704 	addeq	r0, sl, r4, lsl #14
    9c20:	3c030000 	stccc	0, cr0, [r3], {-0}
    9c24:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    9c28:	00002c14 	andeq	r2, r0, r4, lsl ip
    9c2c:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    9c30:	1a040000 	bne	109c38 <__ccfg+0xe9c90>
    9c34:	00000045 	andeq	r0, r0, r5, asr #32
    9c38:	0017f303 	andseq	pc, r7, r3, lsl #6
    9c3c:	5e200400 	cdppl	4, 2, cr0, cr0, cr0, {0}
    9c40:	05000000 	streq	r0, [r0, #-0]
    9c44:	00002941 	andeq	r2, r0, r1, asr #18
    9c48:	e6038901 	str	r8, [r3], -r1, lsl #18
    9c4c:	06000000 	streq	r0, [r0], -r0
    9c50:	00002923 	andeq	r2, r0, r3, lsr #18
    9c54:	00a28901 	adceq	r8, r2, r1, lsl #18
    9c58:	94060000 	strls	r0, [r6], #-0
    9c5c:	01000029 	tsteq	r0, r9, lsr #32
    9c60:	0000a289 	andeq	sl, r0, r9, lsl #5
    9c64:	2a040600 	bcs	10b46c <__ccfg+0xeb4c4>
    9c68:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9c6c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c70:	0029f807 	eoreq	pc, r9, r7, lsl #16
    9c74:	e68c0100 	str	r0, [ip], r0, lsl #2
    9c78:	00000000 	andeq	r0, r0, r0
    9c7c:	f8020102 			; <UNDEFINED> instruction: 0xf8020102
    9c80:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    9c84:	000029a2 	andeq	r2, r0, r2, lsr #19
    9c88:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9c8c:	2a030000 	bcs	c9c94 <__ccfg+0xa9cec>
    9c90:	06000001 	streq	r0, [r0], -r1
    9c94:	00002923 	andeq	r2, r0, r3, lsr #18
    9c98:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9c9c:	04060000 	streq	r0, [r6], #-0
    9ca0:	0100002a 	tsteq	r0, sl, lsr #32
    9ca4:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    9ca8:	293c0700 	ldmdbcs	ip!, {r8, r9, sl}
    9cac:	ab010000 	blge	49cb4 <__ccfg+0x29d0c>
    9cb0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9cb4:	0029f807 	eoreq	pc, r9, r7, lsl #16
    9cb8:	e6ad0100 	strt	r0, [sp], r0, lsl #2
    9cbc:	00000000 	andeq	r0, r0, r0
    9cc0:	0000ad09 	andeq	sl, r0, r9, lsl #26
    9cc4:	002b8800 	eoreq	r8, fp, r0, lsl #16
    9cc8:	00002800 	andeq	r2, r0, r0, lsl #16
    9ccc:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    9cd0:	0a000001 	beq	9cdc <__exidx_end+0x6e68>
    9cd4:	000000b9 	strheq	r0, [r0], -r9
    9cd8:	00003d89 	andeq	r3, r0, r9, lsl #27
    9cdc:	0000c40a 	andeq	ip, r0, sl, lsl #8
    9ce0:	003dce00 	eorseq	ip, sp, r0, lsl #28
    9ce4:	00da0b00 	sbcseq	r0, sl, r0, lsl #22
    9ce8:	3e130000 	cdpcc	0, 1, cr0, cr3, cr0, {0}
    9cec:	cf0c0000 	svcgt	0x000c0000
    9cf0:	04000000 	streq	r0, [r0], #-0
    9cf4:	002b920d 	eoreq	r9, fp, sp, lsl #4
    9cf8:	00059400 	andeq	r9, r5, r0, lsl #8
    9cfc:	2baa0e00 	blcs	fea8d504 <_estack+0xdea88504>
    9d00:	059f0000 	ldreq	r0, [pc]	; 9d08 <__exidx_end+0x6e94>
    9d04:	0f000000 	svceq	0x00000000
    9d08:	00001d2b 	andeq	r1, r0, fp, lsr #26
    9d0c:	b001ca01 	andlt	ip, r1, r1, lsl #20
    9d10:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    9d14:	01000000 	mrseq	r0, (UNDEF: 0)
    9d18:	0001d19c 	muleq	r1, ip, r1
    9d1c:	07711000 	ldrbeq	r1, [r1, -r0]!
    9d20:	42020000 	andmi	r0, r2, #0
    9d24:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d28:	00003e39 	andeq	r3, r0, r9, lsr lr
    9d2c:	00290310 	eoreq	r0, r9, r0, lsl r3
    9d30:	a2420200 	subge	r0, r2, #0, 4
    9d34:	5a000000 	bpl	9d3c <__exidx_end+0x6ec8>
    9d38:	1000003e 	andne	r0, r0, lr, lsr r0
    9d3c:	0000299a 	muleq	r0, sl, r9
    9d40:	00a24302 	adceq	r4, r2, r2, lsl #6
    9d44:	3e7b0000 	cdpcc	0, 7, cr0, cr11, cr0, {0}
    9d48:	b8110000 	ldmdalt	r1, {}	; <UNPREDICTABLE>
    9d4c:	2a00002b 	bcs	9e00 <__exidx_end+0x6f8c>
    9d50:	12000001 	andne	r0, r0, #1
    9d54:	f3035101 	vrhadd.u8	d5, d3, d1
    9d58:	01125201 	tsteq	r2, r1, lsl #4
    9d5c:	01f30750 	mvnseq	r0, r0, asr r7
    9d60:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    9d64:	0f000022 	svceq	0x00000022
    9d68:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    9d6c:	0001df01 	andeq	sp, r1, r1, lsl #30
    9d70:	22000000 	andcs	r0, r0, #0
    9d74:	01000000 	mrseq	r0, (UNDEF: 0)
    9d78:	0002ea9c 	muleq	r2, ip, sl
    9d7c:	07711000 	ldrbeq	r1, [r1, -r0]!
    9d80:	57020000 	strpl	r0, [r2, -r0]
    9d84:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d88:	00003e9c 	muleq	r0, ip, lr
    9d8c:	00290310 	eoreq	r0, r9, r0, lsl r3
    9d90:	a2570200 	subsge	r0, r7, #0, 4
    9d94:	bd000000 	stclt	0, cr0, [r0, #-0]
    9d98:	1000003e 	andne	r0, r0, lr, lsr r0
    9d9c:	000029e3 	andeq	r2, r0, r3, ror #19
    9da0:	00a25802 	adceq	r5, r2, r2, lsl #16
    9da4:	3ede0000 	cdpcc	0, 13, cr0, cr14, cr0, {0}
    9da8:	5d100000 	ldcpl	0, cr0, [r0, #-0]
    9dac:	02000029 	andeq	r0, r0, #41	; 0x29
    9db0:	0000a258 	andeq	sl, r0, r8, asr r2
    9db4:	003f2900 	eorseq	r2, pc, r0, lsl #18
    9db8:	29ec1300 	stmibcs	ip!, {r8, r9, ip}^
    9dbc:	5a020000 	bpl	89dc4 <__ccfg+0x69e1c>
    9dc0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9dc4:	00003f4a 	andeq	r3, r0, sl, asr #30
    9dc8:	00296813 	eoreq	r6, r9, r3, lsl r8
    9dcc:	a25b0200 	subsge	r0, fp, #0, 4
    9dd0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    9dd4:	1100003f 	tstne	r0, pc, lsr r0
    9dd8:	00000000 	andeq	r0, r0, r0
    9ddc:	0000012a 	andeq	r0, r0, sl, lsr #2
    9de0:	45510112 	ldrbmi	r0, [r1, #-274]	; 0xfffffeee
    9de4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9de8:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9dec:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9df0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9df4:	13160001 	tstne	r6, #1
    9df8:	f3302440 	vshl.u64	q1, q0, q0
    9dfc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e00:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    9e04:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e08:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9e0c:	f3131600 	vmax.u16	d1, d3, d0
    9e10:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e14:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    9e18:	0001282e 	andeq	r2, r1, lr, lsr #16
    9e1c:	01f31316 	mvnseq	r1, r6, lsl r3
    9e20:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    9e24:	13160001 	tstne	r6, #1
    9e28:	50011221 	andpl	r1, r1, r1, lsr #4
    9e2c:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
    9e30:	01f32431 	mvnseq	r2, r1, lsr r4
    9e34:	80232250 	eorhi	r2, r3, r0, asr r2
    9e38:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9e3c:	01f32431 	mvnseq	r2, r1, lsr r4
    9e40:	01f32250 	mvnseq	r2, r0, asr r2
    9e44:	30254052 	eorcc	r4, r5, r2, asr r0
    9e48:	00012829 	andeq	r2, r1, r9, lsr #16
    9e4c:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    9e50:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9e54:	01f32431 	mvnseq	r2, r1, lsr r4
    9e58:	80232250 	eorhi	r2, r3, r0, asr r2
    9e5c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9e60:	01f32431 	mvnseq	r2, r1, lsr r4
    9e64:	01f32250 	mvnseq	r2, r0, asr r2
    9e68:	30254052 	eorcc	r4, r5, r2, asr r0
    9e6c:	00012829 	andeq	r2, r1, r9, lsr #16
    9e70:	01f31316 	mvnseq	r1, r6, lsl r3
    9e74:	30254052 	eorcc	r4, r5, r2, asr r0
    9e78:	0001282e 	andeq	r2, r1, lr, lsr #16
    9e7c:	00001316 	andeq	r1, r0, r6, lsl r3
    9e80:	00297b0f 	eoreq	r7, r9, pc, lsl #22
    9e84:	01f60100 	mvnseq	r0, r0, lsl #2
    9e88:	00000000 	andeq	r0, r0, r0
    9e8c:	0000002e 	andeq	r0, r0, lr, lsr #32
    9e90:	041f9c01 	ldreq	r9, [pc], #-3073	; 9e98 <__exidx_end+0x7024>
    9e94:	71100000 	tstvc	r0, r0
    9e98:	02000007 	andeq	r0, r0, #7
    9e9c:	0000a283 	andeq	sl, r0, r3, lsl #5
    9ea0:	00402a00 	subeq	r2, r0, r0, lsl #20
    9ea4:	29031000 	stmdbcs	r3, {ip}
    9ea8:	83020000 	movwhi	r0, #8192	; 0x2000
    9eac:	000000a2 	andeq	r0, r0, r2, lsr #1
    9eb0:	0000404b 	andeq	r4, r0, fp, asr #32
    9eb4:	0029e310 	eoreq	lr, r9, r0, lsl r3
    9eb8:	a2840200 	addge	r0, r4, #0, 4
    9ebc:	6c000000 	stcvs	0, cr0, [r0], {-0}
    9ec0:	10000040 	andne	r0, r0, r0, asr #32
    9ec4:	00002971 	andeq	r2, r0, r1, ror r9
    9ec8:	00a28402 	adceq	r8, r2, r2, lsl #8
    9ecc:	40bd0000 	adcsmi	r0, sp, r0
    9ed0:	68100000 	ldmdavs	r0, {}	; <UNPREDICTABLE>
    9ed4:	02000029 	andeq	r0, r0, #41	; 0x29
    9ed8:	00009785 	andeq	r9, r0, r5, lsl #15
    9edc:	00410e00 	subeq	r0, r1, r0, lsl #28
    9ee0:	29ec1300 	stmibcs	ip!, {r8, r9, ip}^
    9ee4:	87020000 	strhi	r0, [r2, -r0]
    9ee8:	000000a2 	andeq	r0, r0, r2, lsr #1
    9eec:	0000412e 	andeq	r4, r0, lr, lsr #2
    9ef0:	00295d13 	eoreq	r5, r9, r3, lsl sp
    9ef4:	a2880200 	addge	r0, r8, #0, 4
    9ef8:	d4000000 	strle	r0, [r0], #-0
    9efc:	11000041 	tstne	r0, r1, asr #32
    9f00:	00000000 	andeq	r0, r0, r0
    9f04:	0000012a 	andeq	r0, r0, sl, lsr #2
    9f08:	40510112 	subsmi	r0, r1, r2, lsl r1
    9f0c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9f10:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9f14:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9f18:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9f1c:	8000000f 	andhi	r0, r0, pc
    9f20:	0001282b 	andeq	r2, r1, fp, lsr #16
    9f24:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
    9f28:	0294007d 	addseq	r0, r4, #125	; 0x7d
    9f2c:	1affff0a 	bne	9b5c <__exidx_end+0x6ce8>
    9f30:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9f34:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    9f38:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9f3c:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9f40:	8000000f 	andhi	r0, r0, pc
    9f44:	0001282b 	andeq	r2, r1, fp, lsr #16
    9f48:	21241316 			; <UNDEFINED> instruction: 0x21241316
    9f4c:	63500112 	cmpvs	r0, #-2147483644	; 0x80000004
    9f50:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9f54:	5001f324 	andpl	pc, r1, r4, lsr #6
    9f58:	04802322 	streq	r2, [r0], #802	; 0x322
    9f5c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9f60:	5001f324 	andpl	pc, r1, r4, lsr #6
    9f64:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    9f68:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f6c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f70:	01282c80 	smlawbeq	r8, r0, ip, r2
    9f74:	23131600 	tstcs	r3, #0, 12
    9f78:	01f30484 	mvnseq	r0, r4, lsl #9
    9f7c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9f80:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9f84:	01f30480 	mvnseq	r0, r0, lsl #9
    9f88:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9f8c:	f3225001 	vhadd.u32	d5, d2, d1
    9f90:	4b405301 	blmi	101eb9c <__ccfg+0xffebf4>
    9f94:	0f0c2224 	svceq	0x000c2224
    9f98:	2c800000 	stccs	0, cr0, [r0], {0}
    9f9c:	16000128 	strne	r0, [r0], -r8, lsr #2
    9fa0:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    9fa4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9fa8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9fac:	01282b80 	smlawbeq	r8, r0, fp, r2
    9fb0:	00131600 	andseq	r1, r3, r0, lsl #12
    9fb4:	29291400 	stmdbcs	r9!, {sl, ip}
    9fb8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    9fbc:	00009702 	andeq	r9, r0, r2, lsl #14
    9fc0:	00000000 	andeq	r0, r0, r0
    9fc4:	00003400 	andeq	r3, r0, r0, lsl #8
    9fc8:	d29c0100 	addsle	r0, ip, #0, 2
    9fcc:	10000004 	andne	r0, r0, r4
    9fd0:	00000771 	andeq	r0, r0, r1, ror r7
    9fd4:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9fd8:	42340000 	eorsmi	r0, r4, #0
    9fdc:	03100000 	tsteq	r0, #0
    9fe0:	02000029 	andeq	r0, r0, #41	; 0x29
    9fe4:	0000a2af 	andeq	sl, r0, pc, lsr #5
    9fe8:	00425500 	subeq	r5, r2, r0, lsl #10
    9fec:	29e31000 	stmibcs	r3!, {ip}^
    9ff0:	af020000 	svcge	0x00020000
    9ff4:	000000a2 	andeq	r0, r0, r2, lsr #1
    9ff8:	00004276 	andeq	r4, r0, r6, ror r2
    9ffc:	0029ec13 	eoreq	lr, r9, r3, lsl ip
    a000:	a2b10200 	adcsge	r0, r1, #0, 4
    a004:	b3000000 	movwlt	r0, #0
    a008:	13000042 	movwne	r0, #66	; 0x42
    a00c:	00002954 	andeq	r2, r0, r4, asr r9
    a010:	0097b202 	addseq	fp, r7, r2, lsl #4
    a014:	42ed0000 	rscmi	r0, sp, #0
    a018:	ed150000 	ldc	0, cr0, [r5, #-0]
    a01c:	00000000 	andeq	r0, r0, r0
    a020:	1a000000 	bne	a028 <__exidx_end+0x71b4>
    a024:	02000000 	andeq	r0, r0, #0
    a028:	01080cca 	smlabteq	r8, sl, ip, r0
    a02c:	0a020000 	beq	8a034 <__ccfg+0x6a08c>
    a030:	000000fd 	strdeq	r0, [r0], -sp
    a034:	00004305 	andeq	r4, r0, r5, lsl #6
    a038:	00000016 	andeq	r0, r0, r6, lsl r0
    a03c:	00001a00 	andeq	r1, r0, r0, lsl #20
    a040:	01130b00 	tsteq	r3, r0, lsl #22
    a044:	433f0000 	teqmi	pc, #0
    a048:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    a04c:	58000001 	stmdapl	r0, {r0}
    a050:	0d000043 	stceq	0, cr0, [r0, #-268]	; 0xfffffef4
    a054:	00000000 	andeq	r0, r0, r0
    a058:	00000594 	muleq	r0, r4, r5
    a05c:	0000000d 	andeq	r0, r0, sp
    a060:	00059f00 	andeq	r9, r5, r0, lsl #30
    a064:	00000000 	andeq	r0, r0, r0
    a068:	00290b14 	eoreq	r0, r9, r4, lsl fp
    a06c:	021d0100 	andseq	r0, sp, #0, 2
    a070:	00000097 	muleq	r0, r7, r0
    a074:	00000000 	andeq	r0, r0, r0
    a078:	00000040 	andeq	r0, r0, r0, asr #32
    a07c:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
    a080:	71100000 	tstvc	r0, r0
    a084:	02000007 	andeq	r0, r0, #7
    a088:	0000a2dd 	ldrdeq	sl, [r0], -sp
    a08c:	00436f00 	subeq	r6, r3, r0, lsl #30
    a090:	29031000 	stmdbcs	r3, {ip}
    a094:	dd020000 	stcle	0, cr0, [r2, #-0]
    a098:	000000a2 	andeq	r0, r0, r2, lsr #1
    a09c:	00004390 	muleq	r0, r0, r3
    a0a0:	0029e310 	eoreq	lr, r9, r0, lsl r3
    a0a4:	a2de0200 	sbcsge	r0, lr, #0, 4
    a0a8:	b1000000 	mrslt	r0, (UNDEF: 0)
    a0ac:	10000043 	andne	r0, r0, r3, asr #32
    a0b0:	00002971 	andeq	r2, r0, r1, ror r9
    a0b4:	00a2de02 	adceq	sp, r2, r2, lsl #28
    a0b8:	43f40000 	mvnsmi	r0, #0
    a0bc:	ec130000 	ldc	0, cr0, [r3], {-0}
    a0c0:	02000029 	andeq	r0, r0, #41	; 0x29
    a0c4:	0000a2e0 	andeq	sl, r0, r0, ror #5
    a0c8:	00443700 	subeq	r3, r4, r0, lsl #14
    a0cc:	29541300 	ldmdbcs	r4, {r8, r9, ip}^
    a0d0:	e1020000 	mrs	r0, (UNDEF: 2)
    a0d4:	00000097 	muleq	r0, r7, r0
    a0d8:	00004492 	muleq	r0, r2, r4
    a0dc:	0000ed15 	andeq	lr, r0, r5, lsl sp
    a0e0:	00000000 	andeq	r0, r0, r0
    a0e4:	00001a00 	andeq	r1, r0, r0, lsl #20
    a0e8:	0cfa0200 	lfmeq	f0, 2, [sl]
    a0ec:	00000108 	andeq	r0, r0, r8, lsl #2
    a0f0:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
    a0f4:	44b50000 	ldrtmi	r0, [r5], #0
    a0f8:	00160000 	andseq	r0, r6, r0
    a0fc:	1a000000 	bne	a104 <__exidx_end+0x7290>
    a100:	0b000000 	bleq	a108 <__exidx_end+0x7294>
    a104:	00000113 	andeq	r0, r0, r3, lsl r1
    a108:	000044f5 	strdeq	r4, [r0], -r5
    a10c:	00011e0b 	andeq	r1, r1, fp, lsl #28
    a110:	00450e00 	subeq	r0, r5, r0, lsl #28
    a114:	00000d00 	andeq	r0, r0, r0, lsl #26
    a118:	05940000 	ldreq	r0, [r4]
    a11c:	000d0000 	andeq	r0, sp, r0
    a120:	9f000000 	svcls	0x00000000
    a124:	00000005 	andeq	r0, r0, r5
    a128:	f3170000 	vhadd.u16	d0, d7, d0
    a12c:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    a130:	0000a26a 	andeq	sl, r0, sl, ror #4
    a134:	19021700 	stmdbne	r2, {r8, r9, sl, ip}
    a138:	84050000 	strhi	r0, [r5], #-0
    a13c:	000000a2 	andeq	r0, r0, r2, lsr #1
    a140:	0008bf00 	andeq	fp, r8, r0, lsl #30
    a144:	01000400 	tsteq	r0, r0, lsl #8
    a148:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    a14c:	00169001 	andseq	r9, r6, r1
    a150:	2a910100 	bcs	fe44a558 <_estack+0xde445558>
    a154:	17850000 	strne	r0, [r5, r0]
    a158:	10500000 	subsne	r0, r0, r0
    a15c:	00000000 	andeq	r0, r0, r0
    a160:	6a440000 	bvs	110a168 <__ccfg+0x10ea1c0>
    a164:	01020000 	mrseq	r0, (UNDEF: 2)
    a168:	0003b706 	andeq	fp, r3, r6, lsl #14
    a16c:	223a0300 	eorscs	r0, sl, #0, 6
    a170:	1d030000 	stcne	0, cr0, [r3, #-0]
    a174:	00000037 	andeq	r0, r0, r7, lsr r0
    a178:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
    a17c:	03000003 	movweq	r0, #3
    a180:	00002ca7 	andeq	r2, r0, r7, lsr #25
    a184:	00492903 	subeq	r2, r9, r3, lsl #18
    a188:	02020000 	andeq	r0, r2, #0
    a18c:	0003f105 	andeq	pc, r3, r5, lsl #2
    a190:	21280300 			; <UNDEFINED> instruction: 0x21280300
    a194:	2b030000 	blcs	ca19c <__ccfg+0xaa1f4>
    a198:	0000005b 	andeq	r0, r0, fp, asr r0
    a19c:	73070202 	movwvc	r0, #29186	; 0x7202
    a1a0:	03000002 	movweq	r0, #2
    a1a4:	00001686 	andeq	r1, r0, r6, lsl #13
    a1a8:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    a1ac:	04020000 	streq	r0, [r2], #-0
    a1b0:	0000b005 	andeq	fp, r0, r5
    a1b4:	17f10300 	ldrbne	r0, [r1, r0, lsl #6]!
    a1b8:	41030000 	mrsmi	r0, (UNDEF: 3)
    a1bc:	0000007f 	andeq	r0, r0, pc, ror r0
    a1c0:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    a1c4:	02000000 	andeq	r0, r0, #0
    a1c8:	00ab0508 	adceq	r0, fp, r8, lsl #10
    a1cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a1d0:	00008007 	andeq	r8, r0, r7
    a1d4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a1d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a1dc:	8a070402 	bhi	1cb1ec <__ccfg+0x1ab244>
    a1e0:	03000000 	movweq	r0, #0
    a1e4:	0000223c 	andeq	r2, r0, ip, lsr r2
    a1e8:	002c1404 	eoreq	r1, ip, r4, lsl #8
    a1ec:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    a1f0:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    a1f4:	00003e19 	andeq	r3, r0, r9, lsl lr
    a1f8:	212a0300 			; <UNDEFINED> instruction: 0x212a0300
    a1fc:	1a040000 	bne	10a204 <__ccfg+0xea25c>
    a200:	00000050 	andeq	r0, r0, r0, asr r0
    a204:	00168803 	andseq	r8, r6, r3, lsl #16
    a208:	621f0400 	andsvs	r0, pc, #0, 8
    a20c:	03000000 	movweq	r0, #0
    a210:	000017f3 	strdeq	r1, [r0], -r3
    a214:	00742004 	rsbseq	r2, r4, r4
    a218:	13030000 	movwne	r0, #12288	; 0x3000
    a21c:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    a220:	0000e433 	andeq	lr, r0, r3, lsr r4
    a224:	ea040500 	b	10b62c <__ccfg+0xeb684>
    a228:	06000000 	streq	r0, [r0], -r0
    a22c:	00f10405 	rscseq	r0, r1, r5, lsl #8
    a230:	fc070000 	stc2	0, cr0, [r7], {-0}
    a234:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a238:	000000a2 	andeq	r0, r0, r2, lsr #1
    a23c:	23890300 	orrcs	r0, r9, #0, 6
    a240:	42060000 	andmi	r0, r6, #0
    a244:	00000107 	andeq	r0, r0, r7, lsl #2
    a248:	010d0405 	tsteq	sp, r5, lsl #8
    a24c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a250:	26000000 	strcs	r0, [r0], -r0
    a254:	08000001 	stmdaeq	r0, {r0}
    a258:	00000126 	andeq	r0, r0, r6, lsr #2
    a25c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a260:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a264:	05000000 	streq	r0, [r0, #-0]
    a268:	0000a204 	andeq	sl, r0, r4, lsl #4
    a26c:	24b20300 	ldrtcs	r0, [r2], #768	; 0x300
    a270:	46060000 	strmi	r0, [r6], -r0
    a274:	00000137 	andeq	r0, r0, r7, lsr r1
    a278:	013d0405 	teqeq	sp, r5, lsl #8
    a27c:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    a280:	03000000 	movweq	r0, #0
    a284:	0000251e 	andeq	r2, r0, lr, lsl r5
    a288:	01374806 	teqeq	r7, r6, lsl #16
    a28c:	64030000 	strvs	r0, [r3], #-0
    a290:	06000022 	streq	r0, [r0], -r2, lsr #32
    a294:	0001584a 	andeq	r5, r1, sl, asr #16
    a298:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    a29c:	09000001 	stmdbeq	r0, {r0}
    a2a0:	000000ce 	andeq	r0, r0, lr, asr #1
    a2a4:	0000016d 	andeq	r0, r0, sp, ror #2
    a2a8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a2ac:	ca030000 	bgt	ca2b4 <__ccfg+0xaa30c>
    a2b0:	06000021 	streq	r0, [r0], -r1, lsr #32
    a2b4:	0001374c 	andeq	r3, r1, ip, asr #14
    a2b8:	21330300 	teqcs	r3, r0, lsl #6
    a2bc:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    a2c0:	00000107 	andeq	r0, r0, r7, lsl #2
    a2c4:	0021ba03 	eoreq	fp, r1, r3, lsl #20
    a2c8:	e4510600 	ldrb	r0, [r1], #-1536	; 0xfffffa00
    a2cc:	03000000 	movweq	r0, #0
    a2d0:	00002036 	andeq	r2, r0, r6, lsr r0
    a2d4:	01995306 	orrseq	r5, r9, r6, lsl #6
    a2d8:	04050000 	streq	r0, [r5], #-0
    a2dc:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    a2e0:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a2e4:	0001b800 	andeq	fp, r1, r0, lsl #16
    a2e8:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    a2ec:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    a2f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a2f4:	000000b8 	strheq	r0, [r0], -r8
    a2f8:	b8040500 	stmdalt	r4, {r8, sl}
    a2fc:	03000000 	movweq	r0, #0
    a300:	000023ad 	andeq	r2, r0, sp, lsr #7
    a304:	01c95706 	biceq	r5, r9, r6, lsl #14
    a308:	04050000 	streq	r0, [r5], #-0
    a30c:	000001cf 	andeq	r0, r0, pc, asr #3
    a310:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a314:	0001e300 	andeq	lr, r1, r0, lsl #6
    a318:	01e30800 	mvneq	r0, r0, lsl #16
    a31c:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a320:	00000000 	andeq	r0, r0, r0
    a324:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    a328:	ed030000 	stc	0, cr0, [r3, #-0]
    a32c:	06000021 	streq	r0, [r0], -r1, lsr #32
    a330:	0001c95a 	andeq	ip, r1, sl, asr r9
    a334:	22b60300 	adcscs	r0, r6, #0, 6
    a338:	5d060000 	stcpl	0, cr0, [r6, #-0]
    a33c:	000001c9 	andeq	r0, r0, r9, asr #3
    a340:	00204803 	eoreq	r4, r0, r3, lsl #16
    a344:	c9600600 	stmdbgt	r0!, {r9, sl}^
    a348:	03000001 	movweq	r0, #1
    a34c:	000023d8 	ldrdeq	r2, [r0], -r8
    a350:	00e46306 	rsceq	r6, r4, r6, lsl #6
    a354:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    a358:	06000020 	streq	r0, [r0], -r0, lsr #32
    a35c:	00022065 	andeq	r2, r2, r5, rrx
    a360:	26040500 	strcs	r0, [r4], -r0, lsl #10
    a364:	07000002 	streq	r0, [r0, -r2]
    a368:	00000231 	andeq	r0, r0, r1, lsr r2
    a36c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a370:	2f030000 	svccs	0x00030000
    a374:	06000025 	streq	r0, [r0], -r5, lsr #32
    a378:	00022067 	andeq	r2, r2, r7, rrx
    a37c:	23240300 			; <UNDEFINED> instruction: 0x23240300
    a380:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    a384:	000000eb 	andeq	r0, r0, fp, ror #1
    a388:	0024fd03 	eoreq	pc, r4, r3, lsl #26
    a38c:	eb6b0600 	bl	1acbb94 <__ccfg+0x1aabbec>
    a390:	03000000 	movweq	r0, #0
    a394:	000022d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a398:	00eb6d06 	rsceq	r6, fp, r6, lsl #26
    a39c:	e4030000 	str	r0, [r3], #-0
    a3a0:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3a4:	0000eb6f 	andeq	lr, r0, pc, ror #22
    a3a8:	064c0b00 	strbeq	r0, [ip], -r0, lsl #22
    a3ac:	0003557a 	andeq	r5, r3, sl, ror r5
    a3b0:	22880c00 	addcs	r0, r8, #0, 24
    a3b4:	7c060000 	stcvc	0, cr0, [r6], {-0}
    a3b8:	000000fc 	strdeq	r0, [r0], -ip
    a3bc:	24f00c00 	ldrbtcs	r0, [r0], #3072	; 0xc00
    a3c0:	7d060000 	stcvc	0, cr0, [r6, #-0]
    a3c4:	0000012c 	andeq	r0, r0, ip, lsr #2
    a3c8:	22ac0c04 	adccs	r0, ip, #4, 24	; 0x400
    a3cc:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    a3d0:	00000142 	andeq	r0, r0, r2, asr #2
    a3d4:	24170c08 	ldrcs	r0, [r7], #-3080	; 0xfffff3f8
    a3d8:	7f060000 	svcvc	0x00060000
    a3dc:	0000014d 	andeq	r0, r0, sp, asr #2
    a3e0:	24290c0c 	strtcs	r0, [r9], #-3084	; 0xfffff3f4
    a3e4:	80060000 	andhi	r0, r6, r0
    a3e8:	0000016d 	andeq	r0, r0, sp, ror #2
    a3ec:	243b0c10 	ldrtcs	r0, [fp], #-3088	; 0xfffff3f0
    a3f0:	81060000 	mrshi	r0, (UNDEF: 6)
    a3f4:	00000178 	andeq	r0, r0, r8, ror r1
    a3f8:	21860c14 	orrcs	r0, r6, r4, lsl ip
    a3fc:	82060000 	andhi	r0, r6, #0
    a400:	00000183 	andeq	r0, r0, r3, lsl #3
    a404:	22a10c18 	adccs	r0, r1, #24, 24	; 0x1800
    a408:	83060000 	movwhi	r0, #24576	; 0x6000
    a40c:	0000018e 	andeq	r0, r0, lr, lsl #3
    a410:	23f20c1c 	mvnscs	r0, #28, 24	; 0x1c00
    a414:	84060000 	strhi	r0, [r6], #-0
    a418:	000001be 			; <UNDEFINED> instruction: 0x000001be
    a41c:	22290c20 	eorcs	r0, r9, #32, 24	; 0x2000
    a420:	85060000 	strhi	r0, [r6, #-0]
    a424:	000001e9 	andeq	r0, r0, r9, ror #3
    a428:	22440c24 	subcs	r0, r4, #36, 24	; 0x2400
    a42c:	86060000 	strhi	r0, [r6], -r0
    a430:	000001f4 	strdeq	r0, [r0], -r4
    a434:	245f0c28 	ldrbcs	r0, [pc], #-3112	; a43c <__exidx_end+0x75c8>
    a438:	87060000 	strhi	r0, [r6, -r0]
    a43c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a440:	21db0c2c 	bicscs	r0, fp, ip, lsr #24
    a444:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    a448:	00000215 	andeq	r0, r0, r5, lsl r2
    a44c:	244d0c30 	strbcs	r0, [sp], #-3120	; 0xfffff3d0
    a450:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    a454:	00000231 	andeq	r0, r0, r1, lsr r2
    a458:	228e0c34 	addcs	r0, lr, #52, 24	; 0x3400
    a45c:	8a060000 	bhi	18a464 <__ccfg+0x16a4bc>
    a460:	0000020a 	andeq	r0, r0, sl, lsl #4
    a464:	23020c38 	movwcs	r0, #11320	; 0x2c38
    a468:	8b060000 	blhi	18a470 <__ccfg+0x16a4c8>
    a46c:	0000023c 	andeq	r0, r0, ip, lsr r2
    a470:	24080c3c 	strcs	r0, [r8], #-3132	; 0xfffff3c4
    a474:	8c060000 	stchi	0, cr0, [r6], {-0}
    a478:	00000247 	andeq	r0, r0, r7, asr #4
    a47c:	22030c40 	andcs	r0, r3, #64, 24	; 0x4000
    a480:	8d060000 	stchi	0, cr0, [r6, #-0]
    a484:	00000252 	andeq	r0, r0, r2, asr r2
    a488:	205f0c44 	subscs	r0, pc, r4, asr #24
    a48c:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    a490:	0000025d 	andeq	r0, r0, sp, asr r2
    a494:	63030048 	movwvs	r0, #12360	; 0x3048
    a498:	06000023 	streq	r0, [r0], -r3, lsr #32
    a49c:	0002688f 	andeq	r6, r2, pc, lsl #17
    a4a0:	01140b00 	tsteq	r4, r0, lsl #22
    a4a4:	0003a554 	andeq	sl, r3, r4, asr r5
    a4a8:	2a790c00 	bcs	1e4d4b0 <__ccfg+0x1e2d508>
    a4ac:	55010000 	strpl	r0, [r1, #-0]
    a4b0:	000000ce 	andeq	r0, r0, lr, asr #1
    a4b4:	2bde0c00 	blcs	ff78d4bc <_estack+0xdf7884bc>
    a4b8:	56010000 	strpl	r0, [r1], -r0
    a4bc:	000000ce 	andeq	r0, r0, lr, asr #1
    a4c0:	2a120c04 	bcs	48d4d8 <__ccfg+0x46d530>
    a4c4:	57010000 	strpl	r0, [r1, -r0]
    a4c8:	000000ce 	andeq	r0, r0, lr, asr #1
    a4cc:	2aac0c08 	bcs	feb0d4f4 <_estack+0xdeb084f4>
    a4d0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a4d4:	000000ce 	andeq	r0, r0, lr, asr #1
    a4d8:	2a420c0c 	bcs	108d510 <__ccfg+0x106d568>
    a4dc:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    a4e0:	000000c3 	andeq	r0, r0, r3, asr #1
    a4e4:	09030010 	stmdbeq	r3, {r4}
    a4e8:	0100002c 	tsteq	r0, ip, lsr #32
    a4ec:	0003605a 	andeq	r6, r3, sl, asr r0
    a4f0:	1b4d0d00 	blne	134d8f8 <__ccfg+0x132d950>
    a4f4:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    a4f8:	0003d301 	andeq	sp, r3, r1, lsl #6
    a4fc:	2c2c0e00 	stccs	14, cr0, [ip], #-0
    a500:	65010000 	strvs	r0, [r1, #-0]
    a504:	000000ce 	andeq	r0, r0, lr, asr #1
    a508:	002a0a0e 	eoreq	r0, sl, lr, lsl #20
    a50c:	ce650100 	powgts	f0, f5, f0
    a510:	00000000 	andeq	r0, r0, r0
    a514:	001ee80f 	andseq	lr, lr, pc, lsl #16
    a518:	01100200 	tsteq	r0, r0, lsl #4
    a51c:	000000ce 	andeq	r0, r0, lr, asr #1
    a520:	0003fb01 	andeq	pc, r3, r1, lsl #22
    a524:	2c2c0e00 	stccs	14, cr0, [ip], #-0
    a528:	a0010000 	andge	r0, r1, r0
    a52c:	000000ce 	andeq	r0, r0, lr, asr #1
    a530:	002c9710 	eoreq	r9, ip, r0, lsl r7
    a534:	cea20100 	fdvgts	f0, f2, f0
    a538:	00000000 	andeq	r0, r0, r0
    a53c:	0003b011 	andeq	fp, r3, r1, lsl r0
    a540:	002bb800 	eoreq	fp, fp, r0, lsl #16
    a544:	00005c00 	andeq	r5, r0, r0, lsl #24
    a548:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    a54c:	12000004 	andne	r0, r0, #4
    a550:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    a554:	00004525 	andeq	r4, r0, r5, lsr #10
    a558:	0003c712 	andeq	ip, r3, r2, lsl r7
    a55c:	00455100 	subeq	r5, r5, r0, lsl #2
    a560:	2bf21300 	blcs	ffc8f168 <_estack+0xdfc8a168>
    a564:	00140000 	andseq	r0, r4, r0
    a568:	04610000 	strbteq	r0, [r1], #-0
    a56c:	bc120000 	ldclt	0, cr0, [r2], {-0}
    a570:	7d000003 	stcvc	0, cr0, [r0, #-12]
    a574:	12000045 	andne	r0, r0, #69	; 0x45
    a578:	000003c7 	andeq	r0, r0, r7, asr #7
    a57c:	00004590 	muleq	r0, r0, r5
    a580:	002c0614 	eoreq	r0, ip, r4, lsl r6
    a584:	00740200 	rsbseq	r0, r4, r0, lsl #4
    a588:	01530115 	cmpeq	r3, r5, lsl r1
    a58c:	52011532 	andpl	r1, r1, #209715200	; 0xc800000
    a590:	01153c01 	tsteq	r5, r1, lsl #24
    a594:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a598:	0c055001 	stceq	0, cr5, [r5], {1}
    a59c:	400ca000 	andmi	sl, ip, r0
    a5a0:	d6160000 	ldrle	r0, [r6], -r0
    a5a4:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a5a8:	048d0076 	streq	r0, [sp], #118	; 0x76
    a5ac:	01150000 	tsteq	r5, r0
    a5b0:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    a5b4:	31015201 	tstcc	r1, r1, lsl #4
    a5b8:	01510115 	cmpeq	r1, r5, lsl r1
    a5bc:	50011530 	andpl	r1, r1, r0, lsr r5
    a5c0:	a0000c05 	andge	r0, r0, r5, lsl #24
    a5c4:	0215400c 	andseq	r4, r5, #12
    a5c8:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    a5cc:	ee140000 	cdp	0, 1, cr0, cr4, cr0, {0}
    a5d0:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a5d4:	01150076 	tsteq	r5, r6, ror r0
    a5d8:	15310153 	ldrne	r0, [r1, #-339]!	; 0xfffffead
    a5dc:	32015201 	andcc	r5, r1, #268435456	; 0x10000000
    a5e0:	01510115 	cmpeq	r1, r5, lsl r1
    a5e4:	50011530 	andpl	r1, r1, r0, lsr r5
    a5e8:	a0000c05 	andge	r0, r0, r5, lsl #24
    a5ec:	0215400c 	andseq	r4, r5, #12
    a5f0:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    a5f4:	11000000 	mrsne	r0, (UNDEF: 0)
    a5f8:	000003d3 	ldrdeq	r0, [r0], -r3
    a5fc:	00002c14 	andeq	r2, r0, r4, lsl ip
    a600:	0000002c 	andeq	r0, r0, ip, lsr #32
    a604:	050d9c01 	streq	r9, [sp, #-3073]	; 0xfffff3ff
    a608:	e4120000 	ldr	r0, [r2], #-0
    a60c:	b1000003 	tstlt	r0, r3
    a610:	17000045 	strne	r0, [r0, -r5, asr #32]
    a614:	000003ef 	andeq	r0, r0, pc, ror #7
    a618:	38185001 	ldmdacc	r8, {r0, ip, lr}
    a61c:	f4000010 	vst4.8	{d0-d3}, [r0 :64], r0
    a620:	19000004 	stmdbne	r0, {r2}
    a624:	000003e4 	andeq	r0, r0, r4, ror #7
    a628:	10381a04 	eorsne	r1, r8, r4, lsl #20
    a62c:	ef1b0000 	svc	0x001b0000
    a630:	00000003 	andeq	r0, r0, r3
    a634:	2c341400 	cfldrscs	mvf1, [r4], #-0
    a638:	74020000 	strvc	r0, [r2], #-0
    a63c:	51011500 	tstpl	r1, r0, lsl #10
    a640:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    a644:	0c055001 	stceq	0, cr5, [r5], {1}
    a648:	400ca000 	andmi	sl, ip, r0
    a64c:	121c0000 	andsne	r0, ip, #0
    a650:	0200002d 	andeq	r0, r0, #45	; 0x2d
    a654:	00ce0184 	sbceq	r0, lr, r4, lsl #3
    a658:	00000000 	andeq	r0, r0, r0
    a65c:	00900000 	addseq	r0, r0, r0
    a660:	9c010000 	stcls	0, cr0, [r1], {-0}
    a664:	00000576 	andeq	r0, r0, r6, ror r5
    a668:	002c181d 	eoreq	r1, ip, sp, lsl r8
    a66c:	cec20100 	polgts	f0, f2, f0
    a670:	d2000000 	andle	r0, r0, #0
    a674:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    a678:	00002b96 	muleq	r0, r6, fp
    a67c:	00cec401 	sbceq	ip, lr, r1, lsl #8
    a680:	45fe0000 	ldrbmi	r0, [lr, #0]!
    a684:	af1e0000 	svcge	0x001e0000
    a688:	0100002b 	tsteq	r0, fp, lsr #32
    a68c:	0000c3c5 	andeq	ip, r0, r5, asr #7
    a690:	00461100 	subeq	r1, r6, r0, lsl #2
    a694:	2a4e1e00 	bcs	1391e9c <__ccfg+0x1371ef4>
    a698:	c6010000 	strgt	r0, [r1], -r0
    a69c:	000000ce 	andeq	r0, r0, lr, asr #1
    a6a0:	00004638 	andeq	r4, r0, r8, lsr r6
    a6a4:	0000001f 	andeq	r0, r0, pc, lsl r0
    a6a8:	00089e00 	andeq	r9, r8, r0, lsl #28
    a6ac:	00001f00 	andeq	r1, r0, r0, lsl #30
    a6b0:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    a6b4:	20000000 	andcs	r0, r0, r0
    a6b8:	00002ad5 	ldrdeq	r2, [r0], -r5
    a6bc:	00019102 	andeq	r9, r1, r2, lsl #2
    a6c0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a6c4:	01000000 	mrseq	r0, (UNDEF: 0)
    a6c8:	0005ae9c 	muleq	r5, ip, lr
    a6cc:	00002100 	andeq	r2, r0, r0, lsl #2
    a6d0:	03b00000 	movseq	r0, #0
    a6d4:	05a40000 	streq	r0, [r4, #0]!
    a6d8:	01150000 	tsteq	r5, r0
    a6dc:	15310151 	ldrne	r0, [r1, #-337]!	; 0xfffffeaf
    a6e0:	33015001 	movwcc	r5, #4097	; 0x1001
    a6e4:	00001f00 	andeq	r1, r0, r0, lsl #30
    a6e8:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a6ec:	22000000 	andcs	r0, r0, #0
    a6f0:	00002bed 	andeq	r2, r0, sp, ror #23
    a6f4:	bb012202 	bllt	52f04 <__ccfg+0x32f5c>
    a6f8:	03000005 	movweq	r0, #5
    a6fc:	f8020102 			; <UNDEFINED> instruction: 0xf8020102
    a700:	2300000b 	movwcs	r0, #11
    a704:	00002377 	andeq	r2, r0, r7, ror r3
    a708:	03014002 	movweq	r4, #4098	; 0x1002
    a70c:	002a201c 	eoreq	r2, sl, ip, lsl r0
    a710:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
    a714:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    a718:	00000000 	andeq	r0, r0, r0
    a71c:	00000060 	andeq	r0, r0, r0, rrx
    a720:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    a724:	ce240000 	cdpgt	0, 2, cr0, cr4, cr0, {0}
    a728:	0100002b 	tsteq	r0, fp, lsr #32
    a72c:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    a730:	468c0000 	strmi	r0, [ip], r0
    a734:	4a240000 	bmi	90a73c <__ccfg+0x8ea794>
    a738:	0100002c 	tsteq	r0, ip, lsr #32
    a73c:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    a740:	469f0000 	ldrmi	r0, [pc], r0
    a744:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    a748:	00000005 	andeq	r0, r0, r5
    a74c:	10000000 	andne	r0, r0, r0
    a750:	01000000 	mrseq	r0, (UNDEF: 0)
    a754:	063c0109 	ldrteq	r0, [ip], -r9, lsl #2
    a758:	00140000 	andseq	r0, r4, r0
    a75c:	02000000 	andeq	r0, r0, #0
    a760:	01150074 	tsteq	r5, r4, ror r0
    a764:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    a768:	31015201 	tstcc	r1, r1, lsl #4
    a76c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    a770:	01153408 	tsteq	r5, r8, lsl #8
    a774:	000c0550 	andeq	r0, ip, r0, asr r5
    a778:	00400ca0 	subeq	r0, r0, r0, lsr #25
    a77c:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    a780:	00000000 	andeq	r0, r0, r0
    a784:	00080000 	andeq	r0, r8, r0
    a788:	0a010000 	beq	4a790 <__ccfg+0x2a7e8>
    a78c:	00065a01 	andeq	r5, r6, r1, lsl #20
    a790:	00001f00 	andeq	r1, r0, r0, lsl #30
    a794:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    a798:	21000000 	mrscs	r0, (UNDEF: 0)
    a79c:	00000000 	andeq	r0, r0, r0
    a7a0:	000003d3 	ldrdeq	r0, [r0], -r3
    a7a4:	0000066d 	andeq	r0, r0, sp, ror #12
    a7a8:	01500115 	cmpeq	r0, r5, lsl r1
    a7ac:	001f0031 	andseq	r0, pc, r1, lsr r0	; <UNPREDICTABLE>
    a7b0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a7b4:	00000008 	andeq	r0, r0, r8
    a7b8:	002af520 	eoreq	pc, sl, r0, lsr #10
    a7bc:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
    a7c0:	00000000 	andeq	r0, r0, r0
    a7c4:	00000034 	andeq	r0, r0, r4, lsr r0
    a7c8:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    a7cc:	c2250000 	eorgt	r0, r5, #0
    a7d0:	00000005 	andeq	r0, r0, r5
    a7d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a7d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a7dc:	06ab012f 	strteq	r0, [fp], pc, lsr #2
    a7e0:	001f0000 	andseq	r0, pc, r0
    a7e4:	b5000000 	strlt	r0, [r0, #-0]
    a7e8:	00000008 	andeq	r0, r0, r8
    a7ec:	00000021 	andeq	r0, r0, r1, lsr #32
    a7f0:	0003b000 	andeq	fp, r3, r0
    a7f4:	0006c300 	andeq	ip, r6, r0, lsl #6
    a7f8:	51011500 	tstpl	r1, r0, lsl #10
    a7fc:	01153001 	tsteq	r5, r1
    a800:	00330150 	eorseq	r0, r3, r0, asr r1
    a804:	00000021 	andeq	r0, r0, r1, lsr #32
    a808:	0003d300 	andeq	sp, r3, r0, lsl #6
    a80c:	0006d600 	andeq	sp, r6, r0, lsl #12
    a810:	50011500 	andpl	r1, r1, r0, lsl #10
    a814:	1f003101 	svcne	0x00003101
    a818:	00000000 	andeq	r0, r0, r0
    a81c:	0000089e 	muleq	r0, lr, r8
    a820:	0000001f 	andeq	r0, r0, pc, lsl r0
    a824:	0008aa00 	andeq	sl, r8, r0, lsl #20
    a828:	1a1c0000 	bne	70a830 <__ccfg+0x6ea888>
    a82c:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a830:	00c301f2 	strdeq	r0, [r3], #18
    a834:	00000000 	andeq	r0, r0, r0
    a838:	00380000 	eorseq	r0, r8, r0
    a83c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a840:	0000079a 	muleq	r0, sl, r7
    a844:	002c3726 	eoreq	r3, ip, r6, lsr #14
    a848:	013c0100 	teqeq	ip, r0, lsl #2
    a84c:	000000c3 	andeq	r0, r0, r3, asr #1
    a850:	000046b2 			; <UNDEFINED> instruction: 0x000046b2
    a854:	002bc427 	eoreq	ip, fp, r7, lsr #8
    a858:	013f0100 	teqeq	pc, r0, lsl #2
    a85c:	000000ce 	andeq	r0, r0, lr, asr #1
    a860:	2d275101 	stfcss	f5, [r7, #-4]!
    a864:	0100002d 	tsteq	r0, sp, lsr #32
    a868:	00c30141 	sbceq	r0, r3, r1, asr #2
    a86c:	71050000 	mrsvc	r0, (UNDEF: 5)
    a870:	9f264000 	svcls	0x00264000
    a874:	002a6127 	eoreq	r6, sl, r7, lsr #2
    a878:	01430100 	mrseq	r0, (UNDEF: 83)
    a87c:	000000c3 	andeq	r0, r0, r3, asr #1
    a880:	40007107 	andmi	r7, r0, r7, lsl #2
    a884:	9f264824 	svcls	0x00264824
    a888:	002a6927 	eoreq	r6, sl, r7, lsr #18
    a88c:	01450100 	mrseq	r0, (UNDEF: 85)
    a890:	000000c3 	andeq	r0, r0, r3, asr #1
    a894:	48007107 	stmdami	r0, {r0, r1, r2, r8, ip, sp, lr}
    a898:	9f264824 	svcls	0x00264824
    a89c:	002a7124 	eoreq	r7, sl, r4, lsr #2
    a8a0:	01470100 	mrseq	r0, (UNDEF: 87)
    a8a4:	000000c3 	andeq	r0, r0, r3, asr #1
    a8a8:	000046e0 	andeq	r4, r0, r0, ror #13
    a8ac:	002abe24 	eoreq	fp, sl, r4, lsr #28
    a8b0:	01560100 	cmpeq	r6, r0, lsl #2
    a8b4:	000000c3 	andeq	r0, r0, r3, asr #1
    a8b8:	000046f9 	strdeq	r4, [r0], -r9
    a8bc:	002b6924 	eoreq	r6, fp, r4, lsr #18
    a8c0:	01570100 	cmpeq	r7, r0, lsl #2
    a8c4:	000000c3 	andeq	r0, r0, r3, asr #1
    a8c8:	0000471c 	andeq	r4, r0, ip, lsl r7
    a8cc:	01006428 	tsteq	r0, r8, lsr #8
    a8d0:	00c30158 	sbceq	r0, r3, r8, asr r1
    a8d4:	47450000 	strbmi	r0, [r5, -r0]
    a8d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    a8dc:	00002c5b 	andeq	r2, r0, fp, asr ip
    a8e0:	ad020e02 	stcge	14, cr0, [r2, #-8]
    a8e4:	00000000 	andeq	r0, r0, r0
    a8e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    a8ec:	01000000 	mrseq	r0, (UNDEF: 0)
    a8f0:	0007d59c 	muleq	r7, ip, r5
    a8f4:	2b822600 	blcs	fe0940fc <_estack+0xde08f0fc>
    a8f8:	63010000 	movwvs	r0, #4096	; 0x1000
    a8fc:	0000c301 	andeq	ip, r0, r1, lsl #6
    a900:	0047bf00 	subeq	fp, r7, r0, lsl #30
    a904:	2cb12400 	cfldrscs	mvf2, [r1]
    a908:	85010000 	strhi	r0, [r1, #-0]
    a90c:	0000c301 	andeq	ip, r0, r1, lsl #6
    a910:	0047e000 	subeq	lr, r7, r0
    a914:	441c0000 	ldrmi	r0, [ip], #-0
    a918:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a91c:	00ce01c2 	sbceq	r0, lr, r2, asr #3
    a920:	00000000 	andeq	r0, r0, r0
    a924:	00340000 	eorseq	r0, r4, r0
    a928:	9c010000 	stcls	0, cr0, [r1], {-0}
    a92c:	00000842 	andeq	r0, r0, r2, asr #16
    a930:	002d0424 	eoreq	r0, sp, r4, lsr #8
    a934:	01920100 	orrseq	r0, r2, r0, lsl #2
    a938:	000000ce 	andeq	r0, r0, lr, asr #1
    a93c:	00004820 	andeq	r4, r0, r0, lsr #16
    a940:	002c4024 	eoreq	r4, ip, r4, lsr #32
    a944:	01930100 	orrseq	r0, r3, r0, lsl #2
    a948:	000000ce 	andeq	r0, r0, lr, asr #1
    a94c:	00004842 	andeq	r4, r0, r2, asr #16
    a950:	00221724 	eoreq	r1, r2, r4, lsr #14
    a954:	01940100 	orrseq	r0, r4, r0, lsl #2
    a958:	000000ce 	andeq	r0, r0, lr, asr #1
    a95c:	00004855 	andeq	r4, r0, r5, asr r8
    a960:	002aec24 	eoreq	lr, sl, r4, lsr #24
    a964:	01950100 	orrseq	r0, r5, r0, lsl #2
    a968:	000000ce 	andeq	r0, r0, lr, asr #1
    a96c:	00004878 	andeq	r4, r0, r8, ror r8
    a970:	0000001f 	andeq	r0, r0, pc, lsl r0
    a974:	00089e00 	andeq	r9, r8, r0, lsl #28
    a978:	00001f00 	andeq	r1, r0, r0, lsl #30
    a97c:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a980:	1c000000 	stcne	0, cr0, [r0], {-0}
    a984:	00002cd0 	ldrdeq	r2, [r0], -r0
    a988:	ce01d302 	cdpgt	3, 0, cr13, cr1, cr2, {0}
    a98c:	00000000 	andeq	r0, r0, r0
    a990:	1c000000 	stcne	0, cr0, [r0], {-0}
    a994:	01000000 	mrseq	r0, (UNDEF: 0)
    a998:	00088d9c 	muleq	r8, ip, sp
    a99c:	2bfe2400 	blcs	fff939a4 <_estack+0xdff8e9a4>
    a9a0:	b7010000 	strlt	r0, [r1, -r0]
    a9a4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a9a8:	00489400 	subeq	r9, r8, r0, lsl #8
    a9ac:	2cc22400 	cfstrdcs	mvd2, [r2], {0}
    a9b0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    a9b4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a9b8:	0048a700 	subeq	sl, r8, r0, lsl #14
    a9bc:	2ac82400 	bcs	ff2139c4 <_estack+0xdf20e9c4>
    a9c0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    a9c4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a9c8:	0048c200 	subeq	ip, r8, r0, lsl #4
    a9cc:	75290000 	strvc	r0, [r9, #-0]!
    a9d0:	0100002b 	tsteq	r0, fp, lsr #32
    a9d4:	0003a55c 	andeq	sl, r3, ip, asr r5
    a9d8:	00030500 	andeq	r0, r3, r0, lsl #10
    a9dc:	2a000000 	bcs	a9e4 <__exidx_end+0x7b70>
    a9e0:	0000180b 	andeq	r1, r0, fp, lsl #16
    a9e4:	ce034507 	cfsh32gt	mvfx4, mvfx3, #7
    a9e8:	2b000000 	blcs	a9f0 <__exidx_end+0x7b7c>
    a9ec:	00001657 	andeq	r1, r0, r7, asr r6
    a9f0:	00c3aa08 	sbceq	sl, r3, r8, lsl #20
    a9f4:	1b2c0000 	blne	b0a9fc <__ccfg+0xaeaa54>
    a9f8:	06000021 	streq	r0, [r0], -r1, lsr #32
    a9fc:	00d90899 	smullseq	r0, r9, r9, r8
    aa00:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
    return (time * SECOND)/1000;
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
}
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
      40:	13490035 	movtne	r0, #36917	; 0x9035
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0xe50>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
			wwait (st, 50);
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
			curr += 0x1000;
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
		if (from >= EE_SIZE || upto < from)
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
			upto = EE_SIZE - 1;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	0a020c3f 	beq	83224 <__ccfg+0x6327c>
     124:	34170000 	ldrcc	r0, [r7], #-0
            ch = redCharacter;
     128:	3a080300 	bcc	200d30 <__ccfg+0x1e0d88>
            onTime = redOn;
     12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            offTime = redOff;
     130:	3f13490b 	svccc	0x0013490b
        ledFlag = 1 - ledFlag;
     134:	000a020c 	andeq	r0, sl, ip, lsl #4
            offTime = greenOff;
     138:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    return (time * SECOND)/1000;
     13c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     140:	0b3b0b3a 	bleq	ec2e30 <__ccfg+0xea2e88>
     144:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     148:	01120111 	tsteq	r2, r1, lsl r1
     14c:	13010a40 	movwne	r0, #6720	; 0x1a40
     150:	05190000 	ldreq	r0, [r9, #-0]
     154:	3a0e0300 	bcc	380d5c <__ccfg+0x360db4>
        if (displayCycle)
     158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     160:	1a000006 	bne	180 <_Min_Stack_Size+0x80>
        if(onTime > 0){
     164:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
            if(On)
     16c:	01110b39 	tsteq	r1, r9, lsr fp
     170:	0b1b0000 	bleq	6c0178 <__ccfg+0x6a01d0>
     174:	00065501 	andeq	r5, r6, r1, lsl #10
                leds(led,0);
     178:	00341c00 	eorseq	r1, r4, r0, lsl #24
     17c:	0b3a0e03 	bleq	e83990 <__ccfg+0xe639e8>
     180:	0b390b3b 	bleq	e42e74 <__ccfg+0xe22ecc>
     184:	0a021349 	beq	84eb0 <__ccfg+0x64f08>
     188:	0b1d0000 	bleq	740190 <__ccfg+0x7201e8>
            delay(onTime, OFF_PERIOD);
     18c:	01065501 	tsteq	r6, r1, lsl #10
            delay(offTime, Check_PERIOD);
     190:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     194:	0111010b 	tsteq	r1, fp, lsl #2
            led = greenLed;
     198:	13010112 	movwne	r0, #4370	; 0x1112
            ch = greenCharacter;
     19c:	341f0000 	ldrcc	r0, [pc], #-0	; 1a4 <_Min_Stack_Size+0xa4>
     1a0:	3a080300 	bcc	200da8 <__ccfg+0x1e0e00>
            onTime = greenOn;
     1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            offTime = greenOff;
     1a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
                leds(led,0);
     1ac:	2000000a 	andcs	r0, r0, sl
     1b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
     1b8:	0b590b58 	bleq	1642f20 <__ccfg+0x1622f78>
     1bc:	13010b57 	movwne	r0, #6999	; 0x1b57
     1c0:	05210000 	streq	r0, [r1, #-0]!
            proceed OFF_PERIOD;
     1c4:	00133100 	andseq	r3, r3, r0, lsl #2
        when(&On, Check_PERIOD);
     1c8:	011d2200 	tsteq	sp, r0, lsl #4
     1cc:	01111331 	tsteq	r1, r1, lsr r3
        release;
     1d0:	0b580112 	bleq	1600620 <__ccfg+0x15e0678>
        leds(led,0);
     1d4:	0b570b59 	bleq	15c2f40 <__ccfg+0x15a2f98>
     1d8:	34230000 	strtcc	r0, [r3], #-0
     1dc:	3a0e0300 	bcc	380de4 <__ccfg+0x360e3c>
     1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     1e8:	24000006 	strcs	r0, [r0], #-6
     1ec:	08030034 	stmdaeq	r3, {r2, r4, r5}
     1f0:	0b3b0b3a 	bleq	ec2ee0 <__ccfg+0xea2f38>
     1f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1f8:	1d250000 	stcne	0, cr0, [r5, #-0]
     1fc:	11133101 	tstne	r3, r1, lsl #2
     200:	58011201 	stmdapl	r1, {r0, r9, ip}
     204:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     208:	0013010b 	andseq	r0, r3, fp, lsl #2
     20c:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     210:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
     218:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     21c:	0b201349 	bleq	804f48 <__ccfg+0x7e4fa0>
     220:	00001301 	andeq	r1, r0, r1, lsl #6
     224:	03000527 	movweq	r0, #1319	; 0x527
     228:	3b0b3a0e 	blcc	2cea68 <__ccfg+0x2aeac0>
     22c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     230:	28000013 	stmdacs	r0, {r0, r1, r4}
     234:	0e03012e 	adfeqsp	f0, f3, #0.5
     238:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    word numbers[] = {0, 0, 0, 0};
     23c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    int numbersIndex = 0;
     240:	13010b20 	movwne	r0, #6944	; 0x1b20
    word numbers[] = {0, 0, 0, 0};
     244:	05290000 	streq	r0, [r9, #-0]!
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	3a0e0300 	bcc	380e50 <__ccfg+0x360ea8>
        if(settingsInput[i] == ' ') {
     24c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     250:	0013490b 	andseq	r4, r3, fp, lsl #18
            numbers[numbersIndex] = number;
     254:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     258:	01111331 	tsteq	r1, r1, lsr r3
            number = 0;
     25c:	0a400112 	beq	10006ac <__ccfg+0xfe0704>
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	052b0000 	streq	r0, [fp, #-0]!
    redOn = numbers[0];
     264:	02133100 	andseq	r3, r3, #0, 2
     268:	00000006 	andeq	r0, r0, r6
    redOff = numbers[1];
     26c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     270:	030b130e 	movweq	r1, #45838	; 0xb30e
    greenOn = numbers[2];
     274:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     278:	10011106 	andne	r1, r1, r6, lsl #2
    greenOff = numbers[3];
     27c:	02000006 	andeq	r0, r0, #6
     280:	0b0b0024 	bleq	2c0318 <__ccfg+0x2a0370>
}
     284:	0e030b3e 	vmoveq.16	d3[0], r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	16030000 	strne	r0, [r3], -r0
     28c:	3a0e0300 	bcc	380e94 <__ccfg+0x360eec>
            number = number * 10;
     290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            number += settingsInput[i] - 48;
     294:	0013490b 	andseq	r4, r3, fp, lsl #18
     298:	00240400 	eoreq	r0, r4, r0, lsl #8
     29c:	0b3e0b0b 	bleq	f82ed0 <__ccfg+0xf62f28>
     2a0:	00000803 	andeq	r0, r0, r3, lsl #16
     2a4:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     2a8:	06000013 			; <UNDEFINED> instruction: 0x06000013
fsm root {
     2ac:	13490035 	movtne	r0, #36917	; 0x9035
     2b0:	0f070000 	svceq	0x00070000
     2b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     2b8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     2bc:	0b0b0113 	bleq	2c0710 <__ccfg+0x2a0768>
     2c0:	0b3b0b3a 	bleq	ec2fb0 <__ccfg+0xea3008>
     2c4:	13010b39 	movwne	r0, #6969	; 0x1b39
        ser_outf(Initial, "Enter your name: ");
     2c8:	0d090000 	stceq	0, cr0, [r9, #-0]
     2cc:	3a0e0300 	bcc	380ed4 <__ccfg+0x360f2c>
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2d4:	0b13490b 	bleq	4d2708 <__ccfg+0x4b2760>
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     2dc:	000b380b 	andeq	r3, fp, fp, lsl #16
     2e0:	000d0a00 	andeq	r0, sp, r0, lsl #20
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	0b3a0e03 	bleq	e83af8 <__ccfg+0xe63b50>
     2e8:	0b390b3b 	bleq	e42fdc <__ccfg+0xe23034>
        if (choice == 'A' || choice == 'a'){
     2ec:	0b381349 	bleq	e05018 <__ccfg+0xde5070>
     2f0:	340b0000 	strcc	r0, [fp], #-0
     2f4:	3a0e0300 	bcc	380efc <__ccfg+0x360f54>
            proceed Adjust_Intervals;
     2f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            proceed Monitor;
     2fc:	3f13490b 	svccc	0x0013490b
        proceed Show_Menu;
     300:	000c3c0c 	andeq	r3, ip, ip, lsl #24
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	01010c00 	tsteq	r1, r0, lsl #24
     308:	13011349 	movwne	r1, #4937	; 0x1349
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	210d0000 	mrscs	r0, (UNDEF: 13)
     310:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     314:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
        processSettingsInput(settings);
     318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        if(!blinkerRunning) {
     31c:	13490b39 	movtne	r0, #39737	; 0x9b39
     320:	150f0000 	strne	r0, [pc, #-0]	; 328 <root+0x7c>
            blinkerCode = runfsm blinker;
     324:	010c2701 	tsteq	ip, r1, lsl #14
     328:	10000013 	andne	r0, r0, r3, lsl r0
            blinkerRunning = YES;
     32c:	13490005 	movtne	r0, #36869	; 0x9005
        On = YES;
     330:	34110000 	ldrcc	r0, [r1], #-0
     334:	3a0e0300 	bcc	380f3c <__ccfg+0x360f94>
        trigger(&On);
     338:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        proceed Show_Menu;
     33c:	3f13490b 	svccc	0x0013490b
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     344:	01131200 	tsteq	r3, r0, lsl #4
     348:	0b3a0b0b 	bleq	e82f7c <__ccfg+0xe62fd4>
     34c:	0b39053b 	bleq	e41840 <__ccfg+0xe21898>
     350:	00001301 	andeq	r1, r0, r1, lsl #6
     354:	03000d13 	movweq	r0, #3347	; 0xd13
     358:	3b0b3a0e 	blcc	2ceb98 <__ccfg+0x2aebf0>
        proceed Show_Menu;
     35c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     360:	000b3813 	andeq	r3, fp, r3, lsl r8
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	01131400 	tsteq	r3, r0, lsl #8
     368:	0b0b0e03 	bleq	2c3b7c <__ccfg+0x2a3bd4>
        displayCycle = YES;
     36c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        ser_inf(Await_Stop, "%c", &ch);
     370:	13010b39 	movwne	r0, #6969	; 0x1b39
     374:	21150000 	tstcs	r5, r0
     378:	2f134900 	svccs	0x00134900
        if(ch == 'S' || ch == 's'){
     37c:	1600000b 	strne	r0, [r0], -fp
     380:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     384:	0b3b0b3a 	bleq	ec3074 <__ccfg+0xea30cc>
            displayCycle = NO;
     388:	13490b39 	movtne	r0, #39737	; 0x9b39
     38c:	34170000 	ldrcc	r0, [r7], #-0
            proceed Show_Menu;
     390:	3a0e0300 	bcc	380f98 <__ccfg+0x360ff0>
        proceed Monitor;
     394:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        On = NO;
     398:	3f13490b 	svccc	0x0013490b
     39c:	000a020c 	andeq	r0, sl, ip, lsl #4
        if(blinkerCode != 0x0) {
     3a0:	00341800 	eorseq	r1, r4, r0, lsl #16
            killall(blinkerCode);
     3a4:	0b3a0e03 	bleq	e83bb8 <__ccfg+0xe63c10>
     3a8:	0b39053b 	bleq	e4189c <__ccfg+0xe218f4>
        proceed Show_Menu;
     3ac:	0a021349 	beq	850d8 <__ccfg+0x65130>
     3b0:	34190000 	ldrcc	r0, [r9], #-0
        leds_all(0);
     3b4:	3a134700 	bcc	4d1fbc <__ccfg+0x4b2014>
     3b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3bc:	000a020b 	andeq	r0, sl, fp, lsl #4
        proceed Show_Menu;
     3c0:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     3c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        } else if (choice == 'S' || choice == 's') {
     3c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
            proceed Stop;
     3cc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
        } else if (choice == 'V' || choice == 'v') {
     3d0:	01111349 	tsteq	r1, r9, asr #6
            proceed View_Settings;
     3d4:	0a400112 	beq	1000824 <__ccfg+0xfe087c>
        } else if (choice == 'M' || choice == 'm') {
     3d8:	00001301 	andeq	r1, r0, r1, lsl #6
            proceed Monitor;
     3dc:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
     3e0:	00130106 	andseq	r0, r3, r6, lsl #2
     3e4:	00341c00 	eorseq	r1, r4, r0, lsl #24
     3e8:	0b3a0803 	bleq	e823fc <__ccfg+0xe62454>
     3ec:	0b39053b 	bleq	e418e0 <__ccfg+0xe21938>
     3f0:	00001349 	andeq	r1, r0, r9, asr #6
     3f4:	31001d1d 	tstcc	r0, sp, lsl sp
     3f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3fc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     400:	000b5705 	andeq	r5, fp, r5, lsl #14
     404:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     408:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     40c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     410:	01110b39 	tsteq	r1, r9, lsr fp
     414:	0a400112 	beq	1000864 <__ccfg+0xfe08bc>
     418:	00001301 	andeq	r1, r0, r1, lsl #6
     41c:	03000a1f 	movweq	r0, #2591	; 0xa1f
     420:	3b0b3a0e 	blcc	2cec60 <__ccfg+0x2aecb8>
     424:	000b390b 	andeq	r3, fp, fp, lsl #18
     428:	011d2000 	tsteq	sp, r0
     42c:	01521331 	cmpeq	r2, r1, lsr r3
static void devinit_uart (int devnum) {
     430:	0b580655 	bleq	1601d8c <__ccfg+0x15e1de4>
	adddevfunc (ioreq_uart_a, devnum);
     434:	0b570559 	bleq	15c19a0 <__ccfg+0x15a19f8>
     438:	00001301 	andeq	r1, r0, r1, lsl #6
void udelay (volatile word n) {
     43c:	31000521 	tstcc	r0, r1, lsr #10
     440:	22000013 	andcs	r0, r0, #19
	while (n) {
     444:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     448:	06550152 			; <UNDEFINED> instruction: 0x06550152
}
     44c:	0b590b58 	bleq	16431b4 <__ccfg+0x162320c>
	while (n--);
     450:	13010b57 	movwne	r0, #6999	; 0x1b57
     454:	0b230000 	bleq	8c045c <__ccfg+0x8a04b4>
     458:	00065501 	andeq	r5, r6, r1, lsl #10
		n--;
     45c:	000a2400 	andeq	r2, sl, r0, lsl #8
     460:	01111331 	tsteq	r1, r1, lsr r3
     464:	1d250000 	stcne	0, cr0, [r5, #-0]
void mdelay (volatile word n) {
     468:	52133100 	andspl	r3, r3, #0, 2
     46c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	while (n) {
     470:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     474:	2600000b 	strcs	r0, [r0], -fp
}
     478:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		udelay (999);
     47c:	01120111 	tsteq	r2, r1, lsl r1
     480:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		n--;
     484:	13010b57 	movwne	r0, #6999	; 0x1b57
     488:	1d270000 	stcne	0, cr0, [r7, #-0]
     48c:	11133101 	tstne	r3, r1, lsl #2
     490:	58011201 	stmdapl	r1, {r0, r9, ip}
void __pi_ondomain (lword d) {
     494:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     498:	2800000b 	stmdacs	r0, {r0, r1, r3}
		if (__pi_systat.effpdm > 1)
     49c:	1331001d 	teqne	r1, #29
     4a0:	01120111 	tsteq	r2, r1, lsl r1
			__pi_systat.effpdm = 1;
     4a4:	0b590b58 	bleq	164320c <__ccfg+0x1623264>
	PRCMPowerDomainOn (d);
     4a8:	00000b57 	andeq	r0, r0, r7, asr fp
     4ac:	03003429 	movweq	r3, #1065	; 0x429
     4b0:	3b0b3a08 	blcc	2cecd8 <__ccfg+0x2aed30>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     4b8:	00060213 	andeq	r0, r6, r3, lsl r2
     4bc:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
	__pi_systat.ondmns |= d;
     4c0:	0b3a0e03 	bleq	e83cd4 <__ccfg+0xe63d2c>
     4c4:	0b39053b 	bleq	e419b8 <__ccfg+0xe21a10>
}
     4c8:	13010b20 	movwne	r0, #6944	; 0x1b20
     4cc:	0a2b0000 	beq	ac04d4 <__ccfg+0xaa052c>
void __pi_syserror (word ec, const char *m) {
     4d0:	3a0e0300 	bcc	3810d8 <__ccfg+0x361130>
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d8:	2c00000b 	stccs	0, cr0, [r0], {11}
  __ASM volatile ("cpsid i" : : : "memory");
     4dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 42c <root+0x180>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e0:	0b3a0e03 	bleq	e83cf4 <__ccfg+0xe63d4c>
     4e4:	0b39053b 	bleq	e419d8 <__ccfg+0xe21a30>
     4e8:	01110c27 	tsteq	r1, r7, lsr #24
		all_leds_blink;
     4ec:	0a400112 	beq	100093c <__ccfg+0xfe0994>
     4f0:	00001301 	andeq	r1, r0, r1, lsl #6
     4f4:	0300052d 	movweq	r0, #1325	; 0x52d
     4f8:	3b0b3a0e 	blcc	2ced38 <__ccfg+0x2aed90>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     500:	00060213 	andeq	r0, r6, r3, lsl r2
     504:	010b2e00 	tsteq	fp, r0, lsl #28
     508:	01120111 	tsteq	r2, r1, lsl r1
     50c:	00001301 	andeq	r1, r0, r1, lsl #6
     510:	3100342f 	tstcc	r0, pc, lsr #8
	while (1) {
     514:	30000013 	andcc	r0, r0, r3, lsl r0
     518:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
     51c:	00000655 	andeq	r0, r0, r5, asr r6
     520:	31003431 	tstcc	r0, r1, lsr r4
void tci_run_delay_timer () {
     524:	00060213 	andeq	r0, r6, r3, lsl r2
	setdel = __pi_mintk - __pi_old;
     528:	011d3200 	tsteq	sp, r0, lsl #4
     52c:	01521331 	cmpeq	r2, r1, lsr r3
     530:	0b580655 	bleq	1601e8c <__ccfg+0x15e1ee4>
     534:	0b570b59 	bleq	15c32a0 <__ccfg+0x15a32f8>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	1d330000 	ldcne	0, cr0, [r3, #-0]
     53c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     540:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     544:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	3400000b 	strcc	r0, [r0], #-11
	sti_tim;
     54c:	08030005 	stmdaeq	r3, {r0, r2}
}
     550:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     554:	13490b39 	movtne	r0, #39737	; 0x9b39
     558:	00000a02 	andeq	r0, r0, r2, lsl #20
     55c:	31000535 	tstcc	r0, r5, lsr r5
     560:	00060213 	andeq	r0, r6, r3, lsl r2
	cli_aux;
     564:	00343600 	eorseq	r3, r4, r0, lsl #12
     568:	0b3a0803 	bleq	e8257c <__ccfg+0xe625d4>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	0b390b3b 	bleq	e43260 <__ccfg+0xe232b8>
     570:	06021349 	streq	r1, [r2], -r9, asr #6
     574:	0b370000 	bleq	dc057c <__ccfg+0xda05d4>
     578:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
	sti_aux;
     57c:	38000001 	stmdacc	r0, {r0}
}
     580:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     588:	0b200b39 	bleq	803274 <__ccfg+0x7e32cc>
void AONRTCIntHandler () {
     58c:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	3a0e0301 	bcc	38119c <__ccfg+0x3611f4>
     594:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	110c270b 	tstne	ip, fp, lsl #14
		if (__pi_utims [0] == 0)
     59c:	40011201 	andmi	r1, r1, r1, lsl #4
     5a0:	0013010a 	andseq	r0, r3, sl, lsl #2
		if (*(__pi_utims [0])) {
     5a4:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
     5a8:	0b3a0e03 	bleq	e83dbc <__ccfg+0xe63e14>
			(*(__pi_utims [0]))--;
     5ac:	0b39053b 	bleq	e41aa0 <__ccfg+0xe21af8>
		if (__pi_utims [1] == 0)
     5b0:	13490c27 	movtne	r0, #39975	; 0x9c27
		if (*(__pi_utims [1])) {
     5b4:	01120111 	tsteq	r2, r1, lsl r1
			aux_timer_inactive = 0;
     5b8:	13010a40 	movwne	r0, #6720	; 0x1a40
			(*(__pi_utims [1]))--;
     5bc:	053b0000 	ldreq	r0, [fp, #-0]!
		if (__pi_utims [2] == 0)
     5c0:	3a080300 	bcc	2011c8 <__ccfg+0x1e1220>
		if (*(__pi_utims [2])) {
     5c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			(*(__pi_utims [2]))--;
     5c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (__pi_utims [3] != 0) {
     5cc:	3c000006 	stccc	0, cr0, [r0], {6}
			if (*(__pi_utims [3])) {
     5d0:	0e03012e 	adfeqsp	f0, f3, #0.5
				aux_timer_inactive = 0;
     5d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				(*(__pi_utims [3]))--;
     5d8:	01110b39 	tsteq	r1, r9, lsr fp
	if (__pi_systat.ledsts) {
     5dc:	0a400112 	beq	1000a2c <__ccfg+0xfe0a84>
     5e0:	00001301 	andeq	r1, r0, r1, lsl #6
		if (__pi_systat.ledblc++ == 0) {
     5e4:	3f012e3d 	svccc	0x00012e3d
     5e8:	3a0e030c 	bcc	381220 <__ccfg+0x361278>
			if (__pi_systat.ledblk) {
     5ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     5f4:	010b2013 	tsteq	fp, r3, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     5fc:	08030005 	stmdaeq	r3, {r0, r2}
				if (__pi_systat.ledsts & 0x2)
     600:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     604:	13490b39 	movtne	r0, #39737	; 0x9b39
     608:	0a3f0000 	beq	fc0610 <__ccfg+0xfa0668>
				if (__pi_systat.ledsts & 0x4)
     60c:	3a080300 	bcc	201214 <__ccfg+0x1e126c>
				__pi_systat.ledblk = 0;
     610:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     614:	4000000b 	andmi	r0, r0, fp
			if (__pi_systat.fstblk)
     618:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     61c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				__pi_systat.ledblc = 200;
     620:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (events & AON_RTC_EVFLAGS_CH0) {
     624:	00000602 	andeq	r0, r0, r2, lsl #12
		cli_tim;
     628:	03000a41 	movweq	r0, #2625	; 0xa41
		__pi_new += setdel;
     62c:	3b0b3a08 	blcc	2cee54 <__ccfg+0x2aeeac>
     630:	110b3905 	tstne	fp, r5, lsl #18
		setdel = 0;
     634:	42000001 	andmi	r0, r0, #1
		RISE_N_SHINE;
     638:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		__pi_new += setdel;
     63c:	01120111 	tsteq	r2, r1, lsl r1
		RISE_N_SHINE;
     640:	0b590b58 	bleq	16433a8 <__ccfg+0x1623400>
     644:	13010b57 	movwne	r0, #6999	; 0x1b57
		aux_timer_inactive = 1;
     648:	1d430000 	stclne	0, cr0, [r3, #-0]
     64c:	11133101 	tstne	r3, r1, lsl #2
				if (__pi_systat.ledsts & 0x1)
     650:	58011201 	stmdapl	r1, {r0, r9, ip}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     654:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     658:	4400000b 	strmi	r0, [r0], #-11
				if (__pi_systat.ledsts & 0x2)
     65c:	0e03012e 	adfeqsp	f0, f3, #0.5
     660:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     664:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				if (__pi_systat.ledsts & 0x8)
     668:	0b201349 	bleq	805394 <__ccfg+0x7e53ec>
				__pi_systat.ledblk = 1;
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	03002e45 	movweq	r2, #3653	; 0xe45
		if (aux_timer_inactive) {
     674:	3b0b3a0e 	blcc	2ceeb4 <__ccfg+0x2aef0c>
			cli_aux;
     678:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     67c:	000b2013 	andeq	r2, fp, r3, lsl r0
     680:	012e4600 			; <UNDEFINED> instruction: 0x012e4600
     684:	0b3a0e03 	bleq	e83e98 <__ccfg+0xe63ef0>
     688:	0b390b3b 	bleq	e4337c <__ccfg+0xe233d4>
     68c:	13010b20 	movwne	r0, #6944	; 0x1b20
     690:	34470000 	strbcc	r0, [r7], #-0
     694:	3a080300 	bcc	20129c <__ccfg+0x1e12f4>
     698:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     69c:	0013490b 	andseq	r4, r3, fp, lsl #18
word tci_update_delay_ticks (Boolean force) {
     6a0:	010b4800 	tsteq	fp, r0, lsl #16
	cli_tim;
     6a4:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
     6a8:	030c3f01 	movweq	r3, #52993	; 0xcf01
	if (setdel) {
     6ac:	3b0b3a0e 	blcc	2ceeec <__ccfg+0x2aef44>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	1201110c 	andne	r1, r1, #12, 2
     6b8:	010a4001 	tsteq	sl, r1
     6bc:	4a000013 	bmi	710 <__pi_uart_setrate+0x20>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	08030005 	stmdaeq	r3, {r0, r2}
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	0b3b0b3a 	bleq	ec33b4 <__ccfg+0xea340c>
	return NO;
     6c8:	13490b39 	movtne	r0, #39737	; 0x9b39
			setdel = 0;
     6cc:	00000602 	andeq	r0, r0, r2, lsl #12
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d0:	0300344b 	movweq	r3, #1099	; 0x44b
     6d4:	3b0b3a0e 	blcc	2cef14 <__ccfg+0x2aef6c>
}
     6d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		sti_tim;
     6dc:	000a0213 	andeq	r0, sl, r3, lsl r2
		return YES;
     6e0:	000a4c00 	andeq	r4, sl, r0, lsl #24
     6e4:	0b3a0e03 	bleq	e83ef8 <__ccfg+0xe63f50>
     6e8:	0b390b3b 	bleq	e433dc <__ccfg+0xe23434>
     6ec:	00000111 	andeq	r0, r0, r1, lsl r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	31001d4d 	tstcc	r0, sp, asr #26
	UARTDisable (UART0_BASE);
     6f4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	UARTDisable (UART0_BASE);
     6fc:	000b570b 	andeq	r5, fp, fp, lsl #14
	UARTConfigSetExpClk (UART0_BASE,
     700:	002e4e00 	eoreq	r4, lr, r0, lsl #28
     704:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     708:	0b3b0b3a 	bleq	ec33f8 <__ccfg+0xea3450>
     70c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	01120111 	tsteq	r2, r1, lsl r1
     714:	00000a40 	andeq	r0, r0, r0, asr #20
     718:	0300054f 	movweq	r0, #1359	; 0x54f
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	3b0b3a08 	blcc	2cef44 <__ccfg+0x2aef9c>
     720:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     724:	000a0213 	andeq	r0, sl, r3, lsl r2
	urates [0] = rate;
     728:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
}
     72c:	0b3a0e03 	bleq	e83f40 <__ccfg+0xe63f98>
     730:	0b390b3b 	bleq	e43424 <__ccfg+0xe2347c>
     734:	0b200c27 	bleq	8037d8 <__ccfg+0x7e3830>
     738:	00001301 	andeq	r1, r0, r1, lsl #6
     73c:	03000551 	movweq	r0, #1361	; 0x551
     740:	3b0b3a08 	blcc	2cef68 <__ccfg+0x2aefc0>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     748:	52000013 	andpl	r0, r0, #19
     74c:	0e03012e 	adfeqsp	f0, f3, #0.5
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     754:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	13010b20 	movwne	r0, #6944	; 0x1b20
     75c:	05530000 	ldrbeq	r0, [r3, #-0]
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	3a0e0300 	bcc	381368 <__ccfg+0x3613c0>
     764:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     768:	0013490b 	andseq	r4, r3, fp, lsl #18
     76c:	002e5400 	eoreq	r5, lr, r0, lsl #8
     770:	0b3a0e03 	bleq	e83f84 <__ccfg+0xe63fdc>
     774:	0b390b3b 	bleq	e43468 <__ccfg+0xe234c0>
     778:	0b200c27 	bleq	80381c <__ccfg+0x7e3874>
	switch (operation) {
     77c:	2e550000 	cdpcs	0, 5, cr0, cr5, cr0, {0}
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	3a0e0301 	bcc	38138c <__ccfg+0x3613e4>
     784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     788:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     78c:	010b2013 	tsteq	fp, r3, lsl r0
     790:	56000013 			; <UNDEFINED> instruction: 0x56000013
				*buf++ = uart_a_read;
     794:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     798:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			while (len && uart_a_char_available) {
     79c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7a0:	00000b20 	andeq	r0, r0, r0, lsr #22
     7a4:	03002e57 	movweq	r2, #3671	; 0xe57
			if (len != operation) {
     7a8:	3b0b3a0e 	blcc	2cefe8 <__ccfg+0x2af040>
}
     7ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     7b0:	2013490c 	andscs	r4, r3, ip, lsl #18
			uart_a_disable_int;
     7b4:	5800000b 	stmdapl	r0, {r0, r1, r3}
			if (uart_a_char_available) {
     7b8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				*buf++ = uart_a_read;
     7bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			uart_a_disable_int;
     7c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7c4:	0b201349 	bleq	8054f0 <__ccfg+0x7e5548>
			if (uart_a_char_available) {
     7c8:	2e590000 	cdpcs	0, 5, cr0, cr9, cr0, {0}
     7cc:	11133101 	tstne	r3, r1, lsl #2
				uart_a_enable_int;
     7d0:	40011201 	andmi	r1, r1, r1, lsl #4
     7d4:	0000000a 	andeq	r0, r0, sl
				goto Redo_rx;
     7d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	030b130e 	movweq	r1, #45838	; 0xb30e
     7e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			return -2;
     7e4:	10011106 	andne	r1, r1, r6, lsl #2
     7e8:	02000006 	andeq	r0, r0, #6
				uart_a_write (*buf);
     7ec:	0b0b0024 	bleq	2c0884 <__ccfg+0x2a08dc>
     7f0:	0e030b3e 	vmoveq.16	d3[0], r0
			while (len && uart_a_room_in_tx) {
     7f4:	16030000 	strne	r0, [r3], -r0
     7f8:	3a0e0300 	bcc	381400 <__ccfg+0x361458>
     7fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (len != operation) {
     800:	0013490b 	andseq	r4, r3, fp, lsl #18
			uart_a_disable_int;
     804:	00240400 	eoreq	r0, r4, r0, lsl #8
     808:	0b3e0b0b 	bleq	f8343c <__ccfg+0xf63494>
			if (uart_a_room_in_tx) {
     80c:	00000803 	andeq	r0, r0, r3, lsl #16
     810:	03011305 	movweq	r1, #4869	; 0x1305
				uart_a_enable_int;
     814:	3a0b0b0e 	bcc	2c3454 <__ccfg+0x2a34ac>
     818:	010b3b0b 	tsteq	fp, fp, lsl #22
				*buf++ = uart_a_read;
     81c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			if (uart_a_room_in_tx) {
     820:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				uart_a_write (*buf);
     824:	0b381349 	bleq	e05550 <__ccfg+0xde55a8>
     828:	00000c34 	andeq	r0, r0, r4, lsr ip
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	0b000f07 	bleq	4450 <__exidx_end+0x15dc>
     830:	0800000b 	stmdaeq	r0, {r0, r1, r3}
			uart_a_enable_int;
     834:	13490026 	movtne	r0, #36902	; 0x9026
     838:	35090000 	strcc	r0, [r9, #-0]
     83c:	00134900 	andseq	r4, r3, r0, lsl #18
			return 0;
     840:	000f0a00 	andeq	r0, pc, r0, lsl #20
			if (len == UART_CNTRL_SETRATE) {
     844:	13490b0b 	movtne	r0, #39691	; 0x9b0b
				if (__pi_uart_setrate (*((word*)buf),
     848:	130b0000 	movwne	r0, #45056	; 0xb000
     84c:	3a0b0b01 	bcc	2c3458 <__ccfg+0x2a34b0>
     850:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				syserror (EREQPAR, "uar");
     854:	0013010b 	andseq	r0, r3, fp, lsl #2
			syserror (ENOOPER, "uai");
     858:	000d0c00 	andeq	r0, sp, r0, lsl #24
			if (len == UART_CNTRL_GETRATE) {
     85c:	0b3a0e03 	bleq	e84070 <__ccfg+0xe640c8>
				return 1;
     860:	0b390b3b 	bleq	e43554 <__ccfg+0xe235ac>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	0b0b1349 	bleq	2c5590 <__ccfg+0x2a55e8>
			syserror (ENOOPER, "uai");
     868:	0b0c0b0d 	bleq	3034a4 <__ccfg+0x2e34fc>
     86c:	00000b38 	andeq	r0, r0, r8, lsr fp
     870:	03000d0d 	movweq	r0, #3341	; 0xd0d
     874:	3b0b3a0e 	blcc	2cf0b4 <__ccfg+0x2af10c>
     878:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     87c:	000b3813 	andeq	r3, fp, r3, lsl r8
     880:	00340e00 	eorseq	r0, r4, r0, lsl #28
     884:	0b3a0e03 	bleq	e84098 <__ccfg+0xe640f0>
     888:	0b390b3b 	bleq	e4357c <__ccfg+0xe235d4>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 770 <reinit_uart+0x2c>
void UART0IntHandler () {
     890:	00000c3c 	andeq	r0, r0, ip, lsr ip
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     898:	00130113 	andseq	r0, r3, r3, lsl r1
     89c:	00211000 	eoreq	r1, r1, r0
     8a0:	16110000 	ldrne	r0, [r1], -r0
     8a4:	3a0e0300 	bcc	3814ac <__ccfg+0x361504>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8ac:	0013490b 	andseq	r4, r3, fp, lsl #18
		RISE_N_SHINE;
     8b0:	01151200 	tsteq	r5, r0, lsl #4
     8b4:	13010c27 	movwne	r0, #7207	; 0x1c27
		i_trigger (devevent (UART_A, READ));
     8b8:	05130000 	ldreq	r0, [r3, #-0]
     8bc:	00134900 	andseq	r4, r3, r0, lsl #18
     8c0:	00341400 	eorseq	r1, r4, r0, lsl #8
     8c4:	0b3a0e03 	bleq	e840d8 <__ccfg+0xe64130>
     8c8:	0b39053b 	bleq	e41dbc <__ccfg+0xe21e14>
     8cc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 7b0 <ioreq_uart_a+0x34>
     8d0:	00000c3c 	andeq	r0, r0, ip, lsr ip
     8d4:	0b011315 	bleq	45530 <__ccfg+0x25588>
     8d8:	3b0b3a0b 	blcc	2cf10c <__ccfg+0x2af164>
     8dc:	010b3905 	tsteq	fp, r5, lsl #18
     8e0:	16000013 			; <UNDEFINED> instruction: 0x16000013
     8e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     8f0:	00000b38 	andeq	r0, r0, r8, lsr fp
		i_trigger (devevent (UART_A, WRITE));
     8f4:	03011317 	movweq	r1, #4887	; 0x1317
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	3a0b0b0e 	bcc	2c3538 <__ccfg+0x2a3590>
     8fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		RISE_N_SHINE;
     900:	0013010b 	andseq	r0, r3, fp, lsl #2
     904:	00211800 	eoreq	r1, r1, r0, lsl #16
     908:	0b2f1349 	bleq	bc5634 <__ccfg+0xba568c>
		i_trigger (devevent (UART_A, WRITE));
     90c:	15190000 	ldrne	r0, [r9, #-0]
     910:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     914:	00130113 	andseq	r0, r3, r3, lsl r1
     918:	00341a00 	eorseq	r1, r4, r0, lsl #20
     91c:	0b3a1347 	bleq	e85640 <__ccfg+0xe65698>
     920:	0b390b3b 	bleq	e43614 <__ccfg+0xe2366c>
     924:	00000a02 	andeq	r0, r0, r2, lsl #20
     928:	0300341b 	movweq	r3, #1051	; 0x41b
     92c:	3b0b3a0e 	blcc	2cf16c <__ccfg+0x2af1c4>
     930:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     934:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
}
     938:	1c00000a 	stcne	0, cr0, [r0], {10}
     93c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     940:	0b3b0b3a 	bleq	ec3630 <__ccfg+0xea3688>
     944:	13490b39 	movtne	r0, #39737	; 0x9b39
     948:	00000a02 	andeq	r0, r0, r2, lsl #20
void __buttons_setirq (int val) {
     94c:	0300341d 	movweq	r3, #1053	; 0x41d
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	3b0b3a0e 	blcc	2cf190 <__ccfg+0x2af1e8>
     954:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	000a0213 	andeq	r0, sl, r3, lsl r2
     95c:	002e1e00 	eoreq	r1, lr, r0, lsl #28
     960:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		bn = BUTTON_GPIO (__button_list [i]);
     964:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     96c:	01111349 	tsteq	r1, r9, asr #6
     970:	0a400112 	beq	1000dc0 <__ccfg+0xfe0e18>
     974:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     978:	030c3f01 	movweq	r3, #52993	; 0xcf01
     97c:	3b0b3a0e 	blcc	2cf1bc <__ccfg+0x2af214>
}
     980:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     984:	1201110c 	andne	r1, r1, #12, 2
     988:	010a4001 	tsteq	sl, r1
     98c:	20000013 	andcs	r0, r0, r3, lsl r0
void __pinlist_setirq (int val) {
     990:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	for (i = 0; i < N_PINLIST; i++) {
     994:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     998:	13490b39 	movtne	r0, #39737	; 0x9b39
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	00000602 	andeq	r0, r0, r2, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
     9a0:	00001821 	andeq	r1, r0, r1, lsr #16
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a4:	00342200 	eorseq	r2, r4, r0, lsl #4
     9a8:	0b3a0803 	bleq	e829bc <__ccfg+0xe62a14>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ac:	0b39053b 	bleq	e41ea0 <__ccfg+0xe21ef8>
     9b0:	06021349 	streq	r1, [r2], -r9, asr #6
     9b4:	34230000 	strtcc	r0, [r3], #-0
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	3a080300 	bcc	2015c0 <__ccfg+0x1e1618>
}
     9bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9c4:	2400000a 	strcs	r0, [r0], #-10
     9c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
void GPIOIntHandler () {
     9cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
if (buttons_int) {
     9d0:	13490b39 	movtne	r0, #39737	; 0x9b39
     9d4:	0a250000 	beq	9409dc <__ccfg+0x920a34>
	buttons_disable ();
     9d8:	3a0e0300 	bcc	3815e0 <__ccfg+0x361638>
     9dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	i_trigger ((aword)&__button_list);
     9e0:	0001110b 	andeq	r1, r1, fp, lsl #2
     9e4:	010b2600 	tsteq	fp, r0, lsl #12
     9e8:	01120111 	tsteq	r2, r1, lsl r1
     9ec:	00001301 	andeq	r1, r0, r1, lsl #6
     9f0:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
     9f4:	00130106 	andseq	r0, r3, r6, lsl #2
     9f8:	011d2800 	tsteq	sp, r0, lsl #16
     9fc:	01521331 	cmpeq	r2, r1, lsr r3
     a00:	0b580655 	bleq	160235c <__ccfg+0x15e23b4>
     a04:	0b570559 	bleq	15c1f70 <__ccfg+0x15a1fc8>
     a08:	05290000 	streq	r0, [r9, #-0]!
	RISE_N_SHINE;
     a0c:	00133100 	andseq	r3, r3, r0, lsl #2
     a10:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     a14:	0b3a0e03 	bleq	e84228 <__ccfg+0xe64280>
if (pin_sensor_int) {
     a18:	0b39053b 	bleq	e41f0c <__ccfg+0xe21f64>
     a1c:	01110c27 	tsteq	r1, r7, lsr #24
	i_trigger ((aword)(&__input_pins));
     a20:	0a400112 	beq	1000e70 <__ccfg+0xfe0ec8>
     a24:	00001301 	andeq	r1, r0, r1, lsl #6
     a28:	0300052b 	movweq	r0, #1323	; 0x52b
     a2c:	3b0b3a08 	blcc	2cf254 <__ccfg+0x2af2ac>
     a30:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a34:	00060213 	andeq	r0, r6, r3, lsl r2
     a38:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     a3c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     a40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a44:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     a48:	01111349 	tsteq	r1, r9, asr #6
	__pinsen_disable_and_clear;
     a4c:	0a400112 	beq	1000e9c <__ccfg+0xfe0ef4>
	RISE_N_SHINE;
     a50:	00001301 	andeq	r1, r0, r1, lsl #6
     a54:	0300342d 	movweq	r3, #1069	; 0x42d
     a58:	3b0b3a0e 	blcc	2cf298 <__ccfg+0x2af2f0>
}
     a5c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a60:	00060213 	andeq	r0, r6, r3, lsl r2
     a64:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     a68:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     a6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void system_init () {
     a70:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	13010b20 	movwne	r0, #6944	; 0x1b20
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a78:	052f0000 	streq	r0, [pc, #-0]!	; a80 <system_init+0x10>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	3a080300 	bcc	201684 <__ccfg+0x1e16dc>
     a80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a84:	0013490b 	andseq	r4, r3, fp, lsl #18
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a88:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
     a8c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a94:	01110b39 	tsteq	r1, r9, lsr fp
     a98:	0a400112 	beq	1000ee8 <__ccfg+0xfe0f40>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	3f012e31 	svccc	0x00012e31
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	3a08030c 	bcc	2016dc <__ccfg+0x1e1734>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aac:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	010a4001 	tsteq	sl, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	32000013 	andcc	r0, r0, #19
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	08030005 	stmdaeq	r3, {r0, r2}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ac4:	13490b39 	movtne	r0, #39737	; 0x9b39
     ac8:	00000a02 	andeq	r0, r0, r2, lsl #20
     acc:	3f002e33 	svccc	0x00002e33
		if (port_confs [i] & 0x80)
     ad0:	3a0e030c 	bcc	381708 <__ccfg+0x361760>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ad8:	110c270b 	tstne	ip, fp, lsl #14
		if (port_confs [i] & 0x40)
     adc:	40011201 	andmi	r1, r1, r1, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	3400000a 	strcc	r0, [r0], #-10
     ae4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aec:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af0:	00000a02 	andeq	r0, r0, r2, lsl #20
	all_leds_blink;
     af4:	03000535 	movweq	r0, #1333	; 0x535
     af8:	3b0b3a0e 	blcc	2cf338 <__ccfg+0x2af390>
     afc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b00:	36000013 			; <UNDEFINED> instruction: 0x36000013
     b04:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     b08:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     b0c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	3b0b3a0e 	blcc	2cf350 <__ccfg+0x2af3a8>
     b14:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     b18:	010b200c 	tsteq	fp, ip
     b1c:	38000013 	stmdacc	r0, {r0, r1, r4}
     b20:	08030005 	stmdaeq	r3, {r0, r2}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b24:	0b3b0b3a 	bleq	ec3814 <__ccfg+0xea386c>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	13490b39 	movtne	r0, #39737	; 0x9b39
     b2c:	05390000 	ldreq	r0, [r9, #-0]!
	IntEnable (INT_AON_RTC_COMB);
     b30:	3a0e0300 	bcc	381738 <__ccfg+0x361790>
     b34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b38:	0013490b 	andseq	r4, r3, fp, lsl #18
	__pi_malloc_init ();
     b3c:	00343a00 	eorseq	r3, r4, r0, lsl #20
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	0b3a0803 	bleq	e82b54 <__ccfg+0xe62bac>
     b44:	0b390b3b 	bleq	e43838 <__ccfg+0xe23890>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	00001349 	andeq	r1, r0, r9, asr #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	03000a3b 	movweq	r0, #2619	; 0xa3b
     b50:	3b0b3a08 	blcc	2cf378 <__ccfg+0x2af3d0>
     b54:	000b3905 	andeq	r3, fp, r5, lsl #18
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     b5c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	0b3b0b3a 	bleq	ec3850 <__ccfg+0xea38a8>
     b64:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     b68:	01120111 	tsteq	r2, r1, lsl r1
	urates [0] = UART_RATE / 100;
     b6c:	13010a40 	movwne	r0, #6720	; 0x1a40
     b70:	053d0000 	ldreq	r0, [sp, #-0]!
	reinit_uart ();
     b74:	3a080300 	bcc	20177c <__ccfg+0x1e17d4>
	EXTRA_INITIALIZERS;
     b78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b80:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
     b84:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b88:	0b3b0b3a 	bleq	ec3878 <__ccfg+0xea38d0>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b90:	00000602 	andeq	r0, r0, r2, lsl #12
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	3f002e3f 	svccc	0x00002e3f
     b98:	3a0e030c 	bcc	3817d0 <__ccfg+0x361828>
			devinit [i] . init (devinit [i] . param);
     b9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	110c270b 	tstne	ip, fp, lsl #14
     ba4:	40011201 	andmi	r1, r1, r1, lsl #4
     ba8:	4000000a 	andmi	r0, r0, sl
	IntEnable (INT_UART0_COMB);
     bac:	0e03012e 	adfeqsp	f0, f3, #0.5
     bb0:	0b3b0b3a 	bleq	ec38a0 <__ccfg+0xea38f8>
}
     bb4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	tci_run_auxiliary_timer ();
     bb8:	0b201349 	bleq	8058e4 <__ccfg+0x7e593c>
		diag ("");
     bbc:	00001301 	andeq	r1, r0, r1, lsl #6
     bc0:	03012e41 	movweq	r2, #7745	; 0x1e41
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	3b0b3a0e 	blcc	2cf404 <__ccfg+0x2af45c>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		diag ("Leftover RAM: %d bytes",
     bcc:	2013490c 	andscs	r4, r3, ip, lsl #18
     bd0:	0013010b 	andseq	r0, r3, fp, lsl #2
     bd4:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     bd8:	01111331 	tsteq	r1, r1, lsr r3
     bdc:	0a400112 	beq	100102c <__ccfg+0xfe1084>
     be0:	00001301 	andeq	r1, r0, r1, lsl #6
     be4:	31000543 	tstcc	r0, r3, asr #10
     be8:	00060213 	andeq	r0, r6, r3, lsl r2
     bec:	00344400 	eorseq	r4, r4, r0, lsl #8
     bf0:	06021331 			; <UNDEFINED> instruction: 0x06021331
     bf4:	1d450000 	stclne	0, cr0, [r5, #-0]
     bf8:	11133101 	tstne	r3, r1, lsl #2
     bfc:	58011201 	stmdapl	r1, {r0, r9, ip}
     c00:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     c04:	4600000b 	strmi	r0, [r0], -fp
     c08:	13310034 	teqne	r1, #52	; 0x34
     c0c:	1d470000 	stclne	0, cr0, [r7, #-0]
     c10:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     c14:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     c18:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     c1c:	4800000b 	stmdami	r0, {r0, r1, r3}
     c20:	1331000a 	teqne	r1, #10
     c24:	00000111 	andeq	r0, r0, r1, lsl r1
__attribute__ ((noreturn)) void __pi_release () {
     c28:	31011d49 	tstcc	r1, r9, asr #26
     c2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c30:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c34:	000b5705 	andeq	r5, fp, r5, lsl #14
	check_stack_overflow;
     c38:	012e4a00 			; <UNDEFINED> instruction: 0x012e4a00
     c3c:	01111331 	tsteq	r1, r1, lsr r3
     c40:	0a400112 	beq	1001090 <__ccfg+0xfe10e8>
	update_n_wake (MAX_WORD, NO);
     c44:	01000000 	mrseq	r0, (UNDEF: 0)
     c48:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c4c:	0e030b13 	vmoveq.32	d3[0], r0
	for_all_tasks (__pi_curr) {
     c50:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     c54:	06100111 			; <UNDEFINED> instruction: 0x06100111
     c58:	24020000 	strcs	r0, [r2], #-0
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	__SLEEP;
     c60:	000e030b 	andeq	r0, lr, fp, lsl #6
     c64:	00160300 	andseq	r0, r6, r0, lsl #6
     c68:	0b3a0e03 	bleq	e8447c <__ccfg+0xe644d4>
     c6c:	0b390b3b 	bleq	e43960 <__ccfg+0xe239b8>
	system_event_count ++;
     c70:	00001349 	andeq	r1, r0, r9, asr #6
     c74:	0b002404 	bleq	9c8c <__exidx_end+0x6e18>
	switch (__pi_systat.effpdm) {
     c78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c7c:	05000008 	streq	r0, [r0, #-8]
     c80:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     c84:	0b3a0b0b 	bleq	e838b8 <__ccfg+0xe63910>
			__WFI ();
     c88:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c8c:	0d060000 	stceq	0, cr0, [r6, #-0]
     c90:	490e0300 	stmdbmi	lr, {r8, r9}
	check_stack_overflow;
     c94:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     c98:	0700000c 	streq	r0, [r0, -ip]
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	0b0b000f 	bleq	2c0ce0 <__ccfg+0x2a0d38>
     ca0:	26080000 	strcs	r0, [r8], -r0
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	00134900 	andseq	r4, r3, r0, lsl #18
			goto Redo;
     ca8:	00350900 	eorseq	r0, r5, r0, lsl #18
	for_all_tasks (__pi_curr) {
     cac:	00001349 	andeq	r1, r0, r9, asr #6
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	0b000f0a 	bleq	48e0 <__exidx_end+0x1a6c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	0013490b 	andseq	r4, r3, fp, lsl #18
     cb8:	01130b00 	tsteq	r3, r0, lsl #22
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cbc:	0b3a0b0b 	bleq	e838f0 <__ccfg+0xe63948>
     cc0:	0b390b3b 	bleq	e439b4 <__ccfg+0xe23a0c>
     cc4:	00001301 	andeq	r1, r0, r1, lsl #6
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	03000d0c 	movweq	r0, #3340	; 0xd0c
     ccc:	3b0b3a0e 	blcc	2cf50c <__ccfg+0x2af564>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cd4:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			__WFI ();
     cd8:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cdc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     ce0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
     ce4:	0b3b0b3a 	bleq	ec39d4 <__ccfg+0xea3a2c>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce8:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	00000b38 	andeq	r0, r0, r8, lsr fp
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	0300340e 	movweq	r3, #1038	; 0x40e
     cf4:	3b0b3a0e 	blcc	2cf534 <__ccfg+0x2af58c>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cfc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     d00:	0f00000c 	svceq	0x0000000c
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d04:	13490101 	movtne	r0, #37121	; 0x9101
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d08:	00001301 	andeq	r1, r0, r1, lsl #6
     d0c:	00002110 	andeq	r2, r0, r0, lsl r1
     d10:	00161100 	andseq	r1, r6, r0, lsl #2
     d14:	0b3a0e03 	bleq	e84528 <__ccfg+0xe64580>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	0b39053b 	bleq	e4220c <__ccfg+0xe22264>
     d1c:	00001349 	andeq	r1, r0, r9, asr #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	27011512 	smladcs	r1, r2, r5, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	0013010c 	andseq	r0, r3, ip, lsl #2
     d28:	00051300 	andeq	r1, r5, r0, lsl #6
     d2c:	00001349 	andeq	r1, r0, r9, asr #6
     d30:	03003414 	movweq	r3, #1044	; 0x414
     d34:	3b0b3a0e 	blcc	2cf574 <__ccfg+0x2af5cc>
			SysCtrlSetRechargeBeforePowerDown
     d38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	1500000c 	strne	r0, [r0, #-12]
     d44:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	13011349 	movwne	r1, #4937	; 0x1349
     d4c:	13160000 	tstne	r6, #0
     d50:	0b0e0301 	bleq	38195c <__ccfg+0x3619b4>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d54:	3b0b3a0b 	blcc	2cf588 <__ccfg+0x2af5e0>
     d58:	010b390b 	tsteq	fp, fp, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	17000013 	smladne	r0, r3, r0, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	0b0b0117 	bleq	2c11c4 <__ccfg+0x2a121c>
     d64:	0b3b0b3a 	bleq	ec3a54 <__ccfg+0xea3aac>
     d68:	13010b39 	movwne	r0, #6969	; 0x1b39
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6c:	0d180000 	ldceq	0, cr0, [r8, #-0]
			while (!(AONWUCPowerStatusGet () &
     d70:	3a0e0300 	bcc	381978 <__ccfg+0x3619d0>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d78:	0013490b 	andseq	r4, r3, fp, lsl #18
     d7c:	000d1900 	andeq	r1, sp, r0, lsl #18
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d80:	0b3a0803 	bleq	e82d94 <__ccfg+0xe62dec>
     d84:	0b390b3b 	bleq	e43a78 <__ccfg+0xe23ad0>
     d88:	00001349 	andeq	r1, r0, r9, asr #6
     d8c:	03000d1a 	movweq	r0, #3354	; 0xd1a
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	3b0b3a08 	blcc	2cf5b8 <__ccfg+0x2af610>
     d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	000b3813 	andeq	r3, fp, r3, lsl r8
     d9c:	01131b00 	tsteq	r3, r0, lsl #22
			SysCtrlAdjustRechargeAfterPowerDown ();
     da0:	0b3a0b0b 	bleq	e839d4 <__ccfg+0xe63a2c>
			reinit_uart ();
     da4:	0b39053b 	bleq	e42298 <__ccfg+0xe222f0>
     da8:	00001301 	andeq	r1, r0, r1, lsl #6
     dac:	03000d1c 	movweq	r0, #3356	; 0xd1c
}
     db0:	3b0b3a0e 	blcc	2cf5f0 <__ccfg+0x2af648>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     db8:	000b3813 	andeq	r3, fp, r3, lsl r8
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dbc:	01131d00 	tsteq	r3, r0, lsl #26
     dc0:	0b0b0e03 	bleq	2c45d4 <__ccfg+0x2a462c>
     dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	13010b39 	movwne	r0, #6969	; 0x1b39
     dcc:	211e0000 	tstcs	lr, r0
     dd0:	2f134900 	svccs	0x00134900
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	1f00000b 	svcne	0x0000000b
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	0b3b0b3a 	bleq	ec3acc <__ccfg+0xea3b24>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	13490b39 	movtne	r0, #39737	; 0x9b39
     de4:	00000a02 	andeq	r0, r0, r2, lsl #20
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de8:	3f002e20 	svccc	0x00002e20
     dec:	3a0e030c 	bcc	381a24 <__ccfg+0x361a7c>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	110c270b 	tstne	ip, fp, lsl #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df8:	40011201 	andmi	r1, r1, r1, lsl #4
     dfc:	2100000a 	tstcs	r0, sl
			PRCMPowerDomainOff (
     e00:	0c3f012e 	ldfeqs	f0, [pc], #-184	; d50 <__pi_release+0x128>
     e04:	0b3a0e03 	bleq	e84618 <__ccfg+0xe64670>
	__SLEEP;
     e08:	0b39053b 	bleq	e422fc <__ccfg+0xe22354>
     e0c:	13490c27 	movtne	r0, #39975	; 0x9c27
  __ASM volatile ("cpsie i" : : : "memory");
     e10:	01120111 	tsteq	r2, r1, lsl r1
	goto Redo;
     e14:	13010a40 	movwne	r0, #6720	; 0x1a40
     e18:	05220000 	streq	r0, [r2, #-0]!
     e1c:	3a080300 	bcc	201a24 <__ccfg+0x1e1a7c>
     e20:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e28:	23000006 	movwcs	r0, #6
     e2c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     e30:	06550152 			; <UNDEFINED> instruction: 0x06550152
     e34:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     e38:	00000b57 	andeq	r0, r0, r7, asr fp
     e3c:	31000524 	tstcc	r0, r4, lsr #10
     e40:	00060213 	andeq	r0, r6, r3, lsl r2
     e44:	010b2500 	tsteq	fp, r0, lsl #10
     e48:	00000655 	andeq	r0, r0, r5, asr r6
     e4c:	31003426 	tstcc	r0, r6, lsr #8
     e50:	00060213 	andeq	r0, r6, r3, lsl r2
     e54:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     e58:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e60:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     e64:	01120111 	tsteq	r2, r1, lsl r1
     e68:	13010a40 	movwne	r0, #6720	; 0x1a40
     e6c:	34280000 	strtcc	r0, [r8], #-0
     e70:	3a080300 	bcc	201a78 <__ccfg+0x1e1ad0>
     e74:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e7c:	29000006 	stmdbcs	r0, {r1, r2}
int main (void) {
     e80:	08030034 	stmdaeq	r3, {r2, r4, r5}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e88:	13490b39 	movtne	r0, #39737	; 0x9b39
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8c:	342a0000 	strtcc	r0, [sl], #-0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	3a080300 	bcc	201a98 <__ccfg+0x1e1af0>
	system_init ();
     e94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	tcv_init ();
     e98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	2b00000a 	blcs	ecc <main+0x4c>
     ea0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ea8:	13490b39 	movtne	r0, #39737	; 0x9b39
     eac:	00000602 	andeq	r0, r0, r2, lsl #12
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	3f012e2c 	svccc	0x00012e2c
     eb4:	3a0e030c 	bcc	381aec <__ccfg+0x361b44>
	delay (16, 0);
     eb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ebc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     ec0:	010b2013 	tsteq	fp, r3, lsl r0
	__pi_release ();
     ec4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     ec8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ecc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ed0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ed4:	052e0000 	streq	r0, [lr, #-0]!
     ed8:	3a080300 	bcc	201ae0 <__ccfg+0x1e1b38>
     edc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
static void killev (__pi_pcb_t *pid) {
     ee0:	0013490b 	andseq	r4, r3, fp, lsl #18
	wfun = (aword)(pid->code);
     ee4:	010b2f00 	tsteq	fp, r0, lsl #30
	for_all_tasks (i) {
     ee8:	01120111 	tsteq	r2, r1, lsl r1
		for (j = 0; j < nevents (i); j++) {
     eec:	34300000 	ldrtcc	r0, [r0], #-0
     ef0:	3a0e0300 	bcc	381af8 <__ccfg+0x361b50>
     ef4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			    || i->Events [j] . Event == wfun
     ef8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		for (j = 0; j < nevents (i); j++) {
     efc:	3100000a 	tstcc	r0, sl
			if (i->Events [j] . Event == (aword)pid
     f00:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     f04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f08:	01110b39 	tsteq	r1, r9, lsr fp
				wakeupev (i, j);
     f0c:	1d320000 	ldcne	0, cr0, [r2, #-0]
     f10:	11133101 	tstne	r3, r1, lsl #2
	for_all_tasks (i) {
     f14:	58011201 	stmdapl	r1, {r0, r9, ip}
}
     f18:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	3300000b 	movwcc	r0, #11
static void qfree (aword *ch) {
     f20:	13310005 	teqne	r1, #5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	05340000 	ldreq	r0, [r4, #-0]!
	cc = (aword*)(mpools + MA_NP);
     f28:	3a080300 	bcc	201b30 <__ccfg+0x1e1b88>
	m_setnextp (ch, chunk);
     f2c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	m_setnextp (cc, ch);
     f30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     f34:	3500000a 	strcc	r0, [r0, #-10]
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f38:	00000018 	andeq	r0, r0, r8, lsl r0
     f3c:	03003436 	movweq	r3, #1078	; 0x436
     f40:	3b0b3a0e 	blcc	2cf780 <__ccfg+0x2af7d8>
			m_setnextp (cc, m_nextp (chunk));
     f44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			m_size (chunk) += m_hdrlen + m_size (ch);
     f48:	37000013 	smladcc	r0, r3, r0, r0
     f4c:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     f50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f54:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	01111349 	tsteq	r1, r9, asr #6
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	0a400112 	beq	10013ac <__ccfg+0xfe1404>
     f60:	00001301 	andeq	r1, r0, r1, lsl #6
     f64:	03012e38 	movweq	r2, #7736	; 0x1e38
			m_setnextp (cc, m_nextp (chunk));
     f68:	3b0b3a08 	blcc	2cf790 <__ccfg+0x2af7e8>
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     f70:	1201110c 	andne	r1, r1, #12, 2
     f74:	010a4001 	tsteq	sl, r1
     f78:	39000013 	stmdbcc	r0, {r0, r1, r4}
     f7c:	0e03012e 	adfeqsp	f0, f3, #0.5
     f80:	0b3b0b3a 	bleq	ec3c70 <__ccfg+0xea3cc8>
			if (m_size (chunk) >= m_size (ch))
     f84:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f88:	13010b20 	movwne	r0, #6944	; 0x1b20
     f8c:	053a0000 	ldreq	r0, [sl, #-0]!
		chunk = m_nextp (chunk))
     f90:	3a080300 	bcc	201b98 <__ccfg+0x1e1bf0>
     f94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f98:	0013490b 	andseq	r4, r3, fp, lsl #18
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
	diag_wait (a);
     fa0:	0b3a0e03 	bleq	e847b4 <__ccfg+0xe6480c>
	diag_wchar (c, a);
     fa4:	0b390b3b 	bleq	e43c98 <__ccfg+0xe23cf0>
     fa8:	13490c27 	movtne	r0, #39975	; 0x9c27
}
     fac:	13010b20 	movwne	r0, #6944	; 0x1b20
     fb0:	343c0000 	ldrtcc	r0, [ip], #-0
	syserror (ESTATE, "state");
     fb4:	3a080300 	bcc	201bbc <__ccfg+0x1e1c14>
     fb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fbc:	0013490b 	andseq	r4, r3, fp, lsl #18
     fc0:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
void update_n_wake (word min, Boolean force) {
     fc4:	0b3a0803 	bleq	e82fd8 <__ccfg+0xe63030>
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	0b390b3b 	bleq	e43cbc <__ccfg+0xe23d14>
     fcc:	0b200c27 	bleq	804070 <__ccfg+0x7e40c8>
     fd0:	00001301 	andeq	r1, r0, r1, lsl #6
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	31012e3e 	tstcc	r1, lr, lsr lr
     fd8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fdc:	010a4001 	tsteq	sl, r1
     fe0:	3f000013 	svccc	0x00000013
     fe4:	13310005 	teqne	r1, #5
     fe8:	00000a02 	andeq	r0, r0, r2, lsl #20
     fec:	31011d40 	tstcc	r1, r0, asr #26
     ff0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ff4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     ff8:	000b570b 	andeq	r5, fp, fp, lsl #14
     ffc:	011d4100 	tsteq	sp, r0, lsl #2
    1000:	01521331 	cmpeq	r2, r1, lsr r3
    1004:	0b580655 	bleq	1602960 <__ccfg+0x15e29b8>
		for_all_tasks (i) {
    1008:	0b570b59 	bleq	15c3d74 <__ccfg+0x15a3dcc>
	__pi_mintk = znew + min;
    100c:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
    1010:	11133101 	tstne	r3, r1, lsl #2
			if (!twaiting (i))
    1014:	40011201 	andmi	r1, r1, r1, lsl #4
    1018:	4300000a 	movwmi	r0, #10
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101c:	13310034 	teqne	r1, #52	; 0x34
    1020:	01000000 	mrseq	r0, (UNDEF: 0)
    1024:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1028:	0e030b13 	vmoveq.32	d3[0], r0
    102c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1030:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1034:	24020000 	strcs	r0, [r2], #-0
    1038:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    103c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1040:	00160300 	andseq	r0, r6, r0, lsl #6
    1044:	0b3a0e03 	bleq	e84858 <__ccfg+0xe648b0>
    1048:	0b390b3b 	bleq	e43d3c <__ccfg+0xe23d94>
				wakeuptm (i);
    104c:	00001349 	andeq	r1, r0, r9, asr #6
    1050:	0b002404 	bleq	a068 <__exidx_end+0x71f4>
		for_all_tasks (i) {
    1054:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
				d = i->Timer - znew;
    1058:	05000008 	streq	r0, [r0, #-8]
    105c:	0b0b000f 	bleq	2c10a0 <__ccfg+0x2a10f8>
    1060:	00001349 	andeq	r1, r0, r9, asr #6
		if ((word)(__pi_mintk - znew) < min) 
    1064:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    1068:	07000013 	smladeq	r0, r3, r0, r0
    106c:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
	__pi_old = znew;
    1070:	34080000 	strcc	r0, [r8], #-0
}
    1074:	3a0e0300 	bcc	381c7c <__ccfg+0x361cd4>
	TCI_RUN_DELAY_TIMER;
    1078:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    107c:	3f13490b 	svccc	0x0013490b
    1080:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1084:	01010900 	tsteq	r1, r0, lsl #18
    1088:	13011349 	movwne	r1, #4937	; 0x1349
    108c:	210a0000 	mrscs	r0, (UNDEF: 10)
void proceed (word state) {
    1090:	2f134900 	svccs	0x00134900
	prcdstate (__pi_curr, state);
    1094:	0b00000b 	bleq	10c8 <__pi_wait+0x24>
    1098:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	release;
    109c:	0b3b0b3a 	bleq	ec3d8c <__ccfg+0xea3de4>
    10a0:	13490b39 	movtne	r0, #39737	; 0x9b39
void __pi_wait (aword event, word state) {
    10a4:	0a020c3f 	beq	841a8 <__ccfg+0x64200>
	sint j = nevents (__pi_curr);
    10a8:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
	if (j >= MAX_EVENTS_PER_TASK)
    10ac:	3a0e0300 	bcc	381cb4 <__ccfg+0x361d0c>
    10b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b4:	110c270b 	tstne	ip, fp, lsl #14
		syserror (ENEVENTS, "sw");
    10b8:	40011201 	andmi	r1, r1, r1, lsl #4
    10bc:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
	setestate (__pi_curr->Events [j], state, event);
    10c0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1010 <update_n_wake+0x4c>
	incwait (__pi_curr);
    10c4:	0b3a0e03 	bleq	e848d8 <__ccfg+0xe64930>
	setestate (__pi_curr->Events [j], state, event);
    10c8:	0b390b3b 	bleq	e43dbc <__ccfg+0xe23e14>
}
    10cc:	01110c27 	tsteq	r1, r7, lsr #24
    10d0:	0a400112 	beq	1001520 <__ccfg+0xfe1578>
    10d4:	340e0000 	strcc	r0, [lr], #-0
void __pi_trigger (aword event) {
    10d8:	3a0e0300 	bcc	381ce0 <__ccfg+0x361d38>
	for_all_tasks (i) {
    10dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		for (j = 0; j < nevents (i); j++) {
    10e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10e4:	00000006 	andeq	r0, r0, r6
    10e8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    10ec:	030b130e 	movweq	r1, #45838	; 0xb30e
			if (i->Events [j] . Event == event) {
    10f0:	100e1b0e 	andne	r1, lr, lr, lsl #22
    10f4:	02000006 	andeq	r0, r0, #6
    10f8:	0b0b0024 	bleq	2c1190 <__ccfg+0x2a11e8>
				wakeupev (i, j);
    10fc:	0e030b3e 	vmoveq.16	d3[0], r0
    1100:	16030000 	strne	r0, [r3], -r0
	for_all_tasks (i) {
    1104:	3a0e0300 	bcc	381d0c <__ccfg+0x361d64>
}
    1108:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
aword __pi_join (aword pid, word st) {
    110c:	0013490b 	andseq	r4, r3, fp, lsl #18
	for_all_tasks (i) {
    1110:	00240400 	eoreq	r0, r4, r0, lsl #8
    1114:	0b3e0b0b 	bleq	f83d48 <__ccfg+0xf63da0>
	return 0;
    1118:	00000803 	andeq	r0, r0, r3, lsl #16
		if ((aword)i == pid) {
    111c:	0b011305 	bleq	45d38 <__ccfg+0x25d90>
			__pi_wait (pid, st);
    1120:	3b0b3a0b 	blcc	2cf954 <__ccfg+0x2af9ac>
}
    1124:	010b390b 	tsteq	fp, fp, lsl #18
	for_all_tasks (i) {
    1128:	06000013 			; <UNDEFINED> instruction: 0x06000013
    112c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
void delay (word d, word state) {
    1130:	0b3b0b3a 	bleq	ec3e20 <__ccfg+0xea3e78>
	settstate (__pi_curr, state);
    1134:	13490b39 	movtne	r0, #39737	; 0x9b39
    1138:	00000b38 	andeq	r0, r0, r8, lsr fp
    113c:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    1140:	08000013 	stmdaeq	r0, {r0, r1, r4}
	update_n_wake (d, YES);
    1144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1148:	0b3b0b3a 	bleq	ec3e38 <__ccfg+0xea3e90>
	__pi_curr->Timer = __pi_old + d;
    114c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1150:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	inctimer (__pi_curr);
    1154:	35090000 	strcc	r0, [r9, #-0]
    1158:	00134900 	andseq	r4, r3, r0, lsl #18
    115c:	000d0a00 	andeq	r0, sp, r0, lsl #20
}
    1160:	0b3a0e03 	bleq	e84974 <__ccfg+0xe649cc>
    1164:	0b390b3b 	bleq	e43e58 <__ccfg+0xe23eb0>
	if (fun == NULL)
    1168:	0b0b1349 	bleq	2c5e94 <__ccfg+0x2a5eec>
		return (int) __pi_curr;
    116c:	0b0c0b0d 	bleq	303da8 <__ccfg+0x2e3e00>
    1170:	00000b38 	andeq	r0, r0, r8, lsr fp
	for_all_tasks (i)
    1174:	0b000f0b 	bleq	4da8 <__exidx_end+0x1f34>
}
    1178:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (i->code == fun)
    117c:	01010c00 	tsteq	r1, r0, lsl #24
	for_all_tasks (i)
    1180:	13011349 	movwne	r1, #4937	; 0x1349
    1184:	210d0000 	mrscs	r0, (UNDEF: 13)
    1188:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
int __pi_strlen (const char *s) {
    118c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1194:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	150f0000 	strne	r0, [pc, #-0]	; 11a0 <__pi_memcpy+0x6>
	while (n--)
    119c:	010c2701 	tsteq	ip, r1, lsl #14
    11a0:	10000013 	andne	r0, r0, r3, lsl r0
		*dest++ = *src++;
    11a4:	13490005 	movtne	r0, #36869	; 0x9005
    11a8:	34110000 	ldrcc	r0, [r1], #-0
    11ac:	3a0e0300 	bcc	381db4 <__ccfg+0x361e0c>
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (EREQPAR, "addv");
    11b4:	3f13490b 	svccc	0x0013490b
		syserror (ERESOURCE, "addv");
    11b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	if (ioreq [loc] != NULL)
    11bc:	01131200 	tsteq	r3, r0, lsl #4
    11c0:	0b3a0b0b 	bleq	e83df4 <__ccfg+0xe63e4c>
		syserror (ERESOURCE, "addv");
    11c4:	0b39053b 	bleq	e426b8 <__ccfg+0xe22710>
	ioreq [loc] = rf;
    11c8:	00001301 	andeq	r1, r0, r1, lsl #6
}
    11cc:	03000d13 	movweq	r0, #3347	; 0xd13
    11d0:	3b0b3a0e 	blcc	2cfa10 <__ccfg+0x2afa68>
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    11d8:	000b3813 	andeq	r3, fp, r3, lsl r8
    11dc:	01131400 	tsteq	r3, r0, lsl #8
    11e0:	0b0b0e03 	bleq	2c49f4 <__ccfg+0x2a4a4c>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11e8:	13010b39 	movwne	r0, #6969	; 0x1b39
    11ec:	21150000 	tstcs	r5, r0
		syserror (ENODEVICE, "io");
    11f0:	2f134900 	svccs	0x00134900
    11f4:	1600000b 	strne	r0, [r0], -fp
	if (len == 0)
    11f8:	13470034 	movtne	r0, #28724	; 0x7034
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1200:	0a020b39 	beq	83eec <__ccfg+0x63f44>
	if (ret >= 0)
    1204:	01000000 	mrseq	r0, (UNDEF: 0)
	if (ret == -1) {
    1208:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    120c:	0e030b13 	vmoveq.32	d3[0], r0
		if (retry == WNONE)
    1210:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		iowait (dev, operation, retry);
    1214:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1218:	24020000 	strcs	r0, [r2], #-0
    121c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			release;
    1220:	000e030b 	andeq	r0, lr, fp, lsl #6
	if (ret == -2) {
    1224:	00160300 	andseq	r0, r6, r0, lsl #6
		if (retry != WNONE) {
    1228:	0b3a0e03 	bleq	e84a3c <__ccfg+0xe64a94>
    122c:	0b390b3b 	bleq	e43f20 <__ccfg+0xe23f78>
			iowait (dev, operation, retry);
    1230:	00001349 	andeq	r1, r0, r9, asr #6
    1234:	0b002404 	bleq	a24c <__exidx_end+0x73d8>
			(ioreq [dev]) (NONE, buf, len);
    1238:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    123c:	05000008 	streq	r0, [r0, #-8]
    1240:	13490026 	movtne	r0, #36902	; 0x9026
		(ioreq [dev]) (NONE, buf, len);
    1244:	35060000 	strcc	r0, [r6, #-0]
    1248:	00134900 	andseq	r4, r3, r0, lsl #18
    124c:	000f0700 	andeq	r0, pc, r0, lsl #14
}
    1250:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	if (retry != WNONE) {
    1254:	13080000 	movwne	r0, #32768	; 0x8000
		delay (-ret - 2, retry);
    1258:	3a0b0b01 	bcc	2c3e64 <__ccfg+0x2a3ebc>
    125c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1260:	0013010b 	andseq	r0, r3, fp, lsl #2
    1264:	000d0900 	andeq	r0, sp, r0, lsl #18
		release;
    1268:	0b3a0e03 	bleq	e84a7c <__ccfg+0xe64ad4>
    126c:	0b390b3b 	bleq	e43f60 <__ccfg+0xe23fb8>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1270:	0b0b1349 	bleq	2c5f9c <__ccfg+0x2a5ff4>
    1274:	0b0c0b0d 	bleq	303eb0 <__ccfg+0x2e3f08>
    1278:	00000b38 	andeq	r0, r0, r8, lsr fp
    127c:	03000d0a 	movweq	r0, #3338	; 0xd0a
    1280:	3b0b3a0e 	blcc	2cfac0 <__ccfg+0x2afb18>
		syserror (ERESOURCE, "mal1");
    1284:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1288:	000b3813 	andeq	r3, fp, r3, lsl r8
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    128c:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1290:	0b3a0e03 	bleq	e84aa4 <__ccfg+0xe64afc>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1294:	0b390b3b 	bleq	e43f88 <__ccfg+0xe23fe0>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1298:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 117c <running+0x14>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a0:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    12a4:	00130113 	andseq	r0, r3, r3, lsl r1
}
    12a8:	00210d00 	eoreq	r0, r1, r0, lsl #26
    12ac:	160e0000 	strne	r0, [lr], -r0
    12b0:	3a0e0300 	bcc	381eb8 <__ccfg+0x361f10>
    12b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    12bc:	01150f00 	tsteq	r5, r0, lsl #30
void __pi_free (aword *ch) {
    12c0:	13010c27 	movwne	r0, #7207	; 0x1c27
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	05100000 	ldreq	r0, [r0, #-0]
    12c8:	00134900 	andseq	r4, r3, r0, lsl #18
		syserror (EMALLOC, "malg");
    12cc:	00341100 	eorseq	r1, r4, r0, lsl #2
    12d0:	0b3a0e03 	bleq	e84ae4 <__ccfg+0xe64b3c>
	mcfree [MA_NP] += m_size (ch);
    12d4:	0b39053b 	bleq	e427c8 <__ccfg+0xe22820>
		m_size (ch) ^= MALLOC_UMASK;
    12d8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 11bc <adddevfunc+0xc>
    12dc:	00000c3c 	andeq	r0, r0, ip, lsr ip
	mcfree [MA_NP] += m_size (ch);
    12e0:	0b011312 	bleq	45f30 <__ccfg+0x25f88>
	QFREE;
    12e4:	3b0b3a0b 	blcc	2cfb18 <__ccfg+0x2afb70>
	if (mevent [MA_NP] . nwait) {
    12e8:	010b3905 	tsteq	fp, r5, lsl #18
    12ec:	13000013 	movwne	r0, #19
		trigger ((aword)(&(mevent [MA_NP])));
    12f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		mevent [MA_NP] . nwait --;
    12f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    12f8:	13490b39 	movtne	r0, #39737	; 0x9b39
    12fc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1300:	03011314 	movweq	r1, #4884	; 0x1314
    1304:	3a0b0b0e 	bcc	2c3f44 <__ccfg+0x2a3f9c>
void kill (aword pid) {
    1308:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		pid = (aword) __pi_curr;
    130c:	0013010b 	andseq	r0, r3, fp, lsl #2
	j = NULL;
    1310:	00211500 	eoreq	r1, r1, r0, lsl #10
	for_all_tasks (i) {
    1314:	0b2f1349 	bleq	bc6040 <__ccfg+0xba6098>
	syserror (EREQPAR, "kpi");
    1318:	34160000 	ldrcc	r0, [r6], #-0
    131c:	3a134700 	bcc	4d2f24 <__ccfg+0x4b2f7c>
		if ((aword)i == pid) {
    1320:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1324:	000a020b 	andeq	r0, sl, fp, lsl #4
				__PCB = i->Next;
    1328:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
			killev (i);
    132c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			ufree (i);
    1330:	0b3b0b3a 	bleq	ec4020 <__ccfg+0xea4078>
			if (i == __pi_curr)
    1334:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1338:	01120111 	tsteq	r2, r1, lsl r1
				release;
    133c:	13010a40 	movwne	r0, #6720	; 0x1a40
				j->Next = i->Next;
    1340:	05180000 	ldreq	r0, [r8, #-0]
    1344:	3a080300 	bcc	201f4c <__ccfg+0x1e1fa4>
    1348:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    134c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1350:	19000006 	stmdbne	r0, {r1, r2}
    1354:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
void killall (fsmcode fun) {
    1358:	0b3b0b3a 	bleq	ec4048 <__ccfg+0xea40a0>
	j = NULL;
    135c:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (i = __PCB; i != NULL; ) {
    1360:	00000602 	andeq	r0, r0, r2, lsl #12
			if (i == __pi_curr)
    1364:	0300341a 	movweq	r3, #1050	; 0x41a
	for (i = __PCB; i != NULL; ) {
    1368:	3b0b3a08 	blcc	2cfb90 <__ccfg+0x2afbe8>
	if (rel)
    136c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		release;
    1370:	1b000013 	blne	13c4 <__pi_malloc+0x14>
		if (i->code == fun) {
    1374:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1378:	0b3b0b3a 	bleq	ec4068 <__ccfg+0xea40c0>
			if (j == NULL)
    137c:	13490b39 	movtne	r0, #39737	; 0x9b39
				__PCB = k;
    1380:	00000602 	andeq	r0, r0, r2, lsl #12
			if (i == __pi_curr)
    1384:	31001d1c 	tstcc	r0, ip, lsl sp
				rel = YES;
    1388:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			killev (i);
    138c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
			ufree (i);
    1390:	000b570b 	andeq	r5, fp, fp, lsl #14
			i = k;
    1394:	011d1d00 	tsteq	sp, r0, lsl #26
    1398:	01521331 	cmpeq	r2, r1, lsr r3
				j->Next = k;
    139c:	0b580655 	bleq	1602cf8 <__ccfg+0x15e2d50>
    13a0:	0b570b59 	bleq	15c410c <__ccfg+0x15a4164>
}
    13a4:	051e0000 	ldreq	r0, [lr, #-0]
    13a8:	02133100 	andseq	r3, r3, #0, 2
    13ac:	1f000006 	svcne	0x00000006
	if (size < 8)
    13b0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1300 <__pi_free+0x40>
		_size = 2;
    13b4:	0b3a0e03 	bleq	e84bc8 <__ccfg+0xe64c20>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	0b390b3b 	bleq	e440ac <__ccfg+0xe24104>
		_size = (((aword)size) + 3) >> 2;
    13bc:	01120111 	tsteq	r2, r1, lsl r1
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c0:	00000a40 	andeq	r0, r0, r0, asr #20
		_size = (((aword)size) + 3) >> 2;
    13c4:	03002e20 	movweq	r2, #3616	; 0xe20
		if (mevent [MA_NP] . nfail != 255)
    13c8:	3b0b3a0e 	blcc	2cfc08 <__ccfg+0x2afc60>
    13cc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			mevent [MA_NP] . nfail ++;
    13d0:	000b200c 	andeq	r2, fp, ip
		mnfree [MA_NP] = 0;
    13d4:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    13d8:	0b3a0e03 	bleq	e84bec <__ccfg+0xe64c44>
		if (m_magic (chunk) != MALLOC_MAGIC)
    13dc:	0b390b3b 	bleq	e440d0 <__ccfg+0xe24128>
    13e0:	13490c27 	movtne	r0, #39975	; 0x9c27
			syserror (EMALLOC, "malc");
    13e4:	00000b20 	andeq	r0, r0, r0, lsr #22
    13e8:	03000522 	movweq	r0, #1314	; 0x522
		if (m_size (chunk) >= _size)
    13ec:	3b0b3a0e 	blcc	2cfc2c <__ccfg+0x2afc84>
    13f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		chunk = m_nextp (chunk)) {
    13f4:	00000013 	andeq	r0, r0, r3, lsl r0
		m_setnextp (cc, m_nextp (chunk));
    13f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13fc:	030b130e 	movweq	r1, #45838	; 0xb30e
    1400:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			m_size (chunk) = _size;
    1404:	10011106 	andne	r1, r1, r6, lsl #2
			cc = chunk + _size + m_hdrlen;
    1408:	02000006 	andeq	r0, r0, #6
    140c:	0b0b0024 	bleq	2c14a4 <__ccfg+0x2a14fc>
			m_size (cc) = waste - m_hdrlen;
    1410:	0e030b3e 	vmoveq.16	d3[0], r0
			QFREE;
    1414:	16030000 	strne	r0, [r3], -r0
		mevent [MA_NP] . nfail = 0;
    1418:	3a0e0300 	bcc	382020 <__ccfg+0x362078>
		mcfree [MA_NP] -= m_size (chunk);
    141c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1420:	0013490b 	andseq	r4, r3, fp, lsl #18
    1424:	00240400 	eoreq	r0, r4, r0, lsl #8
    1428:	0b3e0b0b 	bleq	f8405c <__ccfg+0xf640b4>
		m_size (chunk) |= MALLOC_UMASK;
    142c:	00000803 	andeq	r0, r0, r3, lsl #16
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
		m_size (chunk) |= MALLOC_UMASK;
    1434:	06000013 			; <UNDEFINED> instruction: 0x06000013
			mnfree [MA_NP] = mcfree [MA_NP];
    1438:	13490035 	movtne	r0, #36917	; 0x9035
}
    143c:	13070000 	movwne	r0, #28672	; 0x7000
    1440:	3a0b0b01 	bcc	2c404c <__ccfg+0x2a40a4>
    1444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1448:	0013010b 	andseq	r0, r3, fp, lsl #2
    144c:	000d0800 	andeq	r0, sp, r0, lsl #16
    1450:	0b3a0e03 	bleq	e84c64 <__ccfg+0xe64cbc>
    1454:	0b390b3b 	bleq	e44148 <__ccfg+0xe241a0>
aword __pi_fork (fsmcode func, aword data) {
    1458:	0b0b1349 	bleq	2c6184 <__ccfg+0x2a61dc>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    145c:	0b0c0b0d 	bleq	304098 <__ccfg+0x2e40f0>
    1460:	00000b38 	andeq	r0, r0, r8, lsr fp
    1464:	03000d09 	movweq	r0, #3337	; 0xd09
		if ((j = __PCB) == NULL)
    1468:	3b0b3a0e 	blcc	2cfca8 <__ccfg+0x2afd00>
	i->Next = NULL;
    146c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	i->data = data;
    1470:	000b3813 	andeq	r3, fp, r3, lsl r8
		if ((j = __PCB) == NULL)
    1474:	00340a00 	eorseq	r0, r4, r0, lsl #20
}
    1478:	0b3a0e03 	bleq	e84c8c <__ccfg+0xe64ce4>
			for (; j->Next != NULL; j = j->Next);
    147c:	0b390b3b 	bleq	e44170 <__ccfg+0xe241c8>
    1480:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1364 <killall+0xc>
	return (aword) i;
    1484:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1488:	0b000f0b 	bleq	50bc <__exidx_end+0x2248>
	if (mevent [MA_NP] . nwait != 255)
    148c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1490:	01010c00 	tsteq	r1, r0, lsl #24
    1494:	13011349 	movwne	r1, #4937	; 0x1349
		mevent [MA_NP] . nwait ++;
    1498:	210d0000 	mrscs	r0, (UNDEF: 13)
	wait ((aword)(&(mevent [MA_NP])), state);
    149c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    14a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
void diag (const char *mess, ...) {
    14a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    14ac:	150f0000 	strne	r0, [pc, #-0]	; 14b4 <diag+0x10>
	diag_disable_int (a, is);
    14b0:	010c2701 	tsteq	ip, r1, lsl #14
    14b4:	10000013 	andne	r0, r0, r3, lsl r0
    14b8:	13490005 	movtne	r0, #36869	; 0x9005
				d = (bc == 16) ? 10000 : 1000000000;
    14bc:	34110000 	ldrcc	r0, [r1], #-0
	diag_disable_int (a, is);
    14c0:	3a0e0300 	bcc	3820c8 <__ccfg+0x362120>
	while (*mess != '\0') {
    14c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	dgout ('\r');
    14c8:	3f13490b 	svccc	0x0013490b
	dgout ('\n');
    14cc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    14d0:	01131200 	tsteq	r3, r0, lsl #4
    14d4:	0b3a0b0b 	bleq	e84108 <__ccfg+0xe64160>
	diag_wait (a);
    14d8:	0b39053b 	bleq	e429cc <__ccfg+0xe22a24>
	diag_enable_int (a, is);
    14dc:	00001301 	andeq	r1, r0, r1, lsl #6
    14e0:	03000d13 	movweq	r0, #3347	; 0xd13
}
    14e4:	3b0b3a0e 	blcc	2cfd24 <__ccfg+0x2afd7c>
    14e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    14ec:	000b3813 	andeq	r3, fp, r3, lsl r8
		if (*mess == '%') {
    14f0:	01131400 	tsteq	r3, r0, lsl #8
    14f4:	0b0b0e03 	bleq	2c4d08 <__ccfg+0x2a4d60>
			if (*mess == 'l') {
    14f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14fc:	13010b39 	movwne	r0, #6969	; 0x1b39
				mess++;
    1500:	21150000 	tstcs	r5, r0
				val = va_arg (ap, lword);
    1504:	2f134900 	svccs	0x00134900
				bc = 32;
    1508:	1600000b 	strne	r0, [r0], -fp
				bc = 16;
    150c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			switch (*mess) {
    1510:	0b3b0b3a 	bleq	ec4200 <__ccfg+0xea4258>
    1514:	13490b39 	movtne	r0, #39737	; 0x9b39
    1518:	00000a02 	andeq	r0, r0, r2, lsl #20
				dgout ('%');
    151c:	47003417 	smladmi	r0, r7, r4, r3
    1520:	3b0b3a13 	blcc	2cfd74 <__ccfg+0x2afdcc>
				dgout (*mess);
    1524:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    1528:	1800000a 	stmdane	r0, {r1, r3}
			switch (*mess) {
    152c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 147c <__pi_fork+0x24>
					v = __pi_hex_enc_table [
    1530:	0b3a0e03 	bleq	e84d44 <__ccfg+0xe64d9c>
					i += 4;
    1534:	0b390b3b 	bleq	e44228 <__ccfg+0xe24280>
					(val >> (bc - i)) & 0xf];
    1538:	01110c27 	tsteq	r1, r7, lsr #24
    153c:	0a400112 	beq	100198c <__ccfg+0xfe19e4>
					dgout (v);
    1540:	00001301 	andeq	r1, r0, r1, lsl #6
    1544:	03000519 	movweq	r0, #1305	; 0x519
				while (i < bc) {
    1548:	3b0b3a08 	blcc	2cfd70 <__ccfg+0x2afdc8>
			mess++;
    154c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					d /= 10;
    1550:	00060213 	andeq	r0, r6, r3, lsl r2
				if ((val >> (bc - 1)) & 1) {
    1554:	00051a00 	andeq	r1, r5, r0, lsl #20
    1558:	0b3a0e03 	bleq	e84d6c <__ccfg+0xe64dc4>
					dgout ('-');
    155c:	0b390b3b 	bleq	e44250 <__ccfg+0xe242a8>
    1560:	06021349 	streq	r1, [r2], -r9, asr #6
						val |= 0xffff0000;
    1564:	0a1b0000 	beq	6c156c <__ccfg+0x6a15c4>
    1568:	3a0e0300 	bcc	382170 <__ccfg+0x3621c8>
    156c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				d = (bc == 16) ? 10000 : 1000000000;
    1570:	0001110b 	andeq	r1, r1, fp, lsl #2
    1574:	011d1c00 	tsteq	sp, r0, lsl #24
    1578:	01521331 	cmpeq	r2, r1, lsr r3
					v = (word) (val / d);
    157c:	0b580655 	bleq	1602ed8 <__ccfg+0x15e2f30>
					if (v || d == 1) break;
    1580:	0b570b59 	bleq	15c42ec <__ccfg+0x15a4344>
    1584:	00001301 	andeq	r1, r0, r1, lsl #6
					d /= 10;
    1588:	3100051d 	tstcc	r0, sp, lsl r5
				d = (bc == 16) ? 10000 : 1000000000;
    158c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
					dgout (v + '0');
    1590:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1594:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1598:	0b590b58 	bleq	1644300 <__ccfg+0x1624358>
					d /= 10;
    159c:	00000b57 	andeq	r0, r0, r7, asr fp
					val = val - (v * d);
    15a0:	03012e1f 	movweq	r2, #7711	; 0x1e1f
					if (d == 0) break;
    15a4:	3b0b3a0e 	blcc	2cfde4 <__ccfg+0x2afe3c>
					v = (word) (val / d);
    15a8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    15ac:	2013490c 	andscs	r4, r3, ip, lsl #18
				if (bc == 16)
    15b0:	2000000b 	andcs	r0, r0, fp
				d = (bc == 16) ? 10000 : 1000000000;
    15b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
					val &= 0xffff;
    15b8:	0b3b0b3a 	bleq	ec42a8 <__ccfg+0xea4300>
					dgout (*s);
    15bc:	13490b39 	movtne	r0, #39737	; 0x9b39
					s++;
    15c0:	01000000 	mrseq	r0, (UNDEF: 0)
				while (*s != '\0') {
    15c4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    15c8:	0e030b13 	vmoveq.32	d3[0], r0
			dgout (*mess++);
    15cc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    15d0:	06100111 			; <UNDEFINED> instruction: 0x06100111
    15d4:	24020000 	strcs	r0, [r2], #-0
    15d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    15dc:	000e030b 	andeq	r0, lr, fp, lsl #6
}
    15e0:	00160300 	andseq	r0, r6, r0, lsl #6
    while(1)
    15e4:	0b3a0e03 	bleq	e84df8 <__ccfg+0xe64e50>
{
    15e8:	0b390b3b 	bleq	e442dc <__ccfg+0xe24334>
    SetupTrimDevice();
    15ec:	00001349 	andeq	r1, r0, r9, asr #6
    pui32Src = &_etext;
    15f0:	0b002404 	bleq	a608 <__exidx_end+0x7794>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    __asm("    ldr     r0, =_bss\n"
    15f8:	05000008 	streq	r0, [r0, #-8]
    15fc:	13490026 	movtne	r0, #36902	; 0x9026
    1600:	35060000 	strcc	r0, [r6, #-0]
    1604:	00134900 	andseq	r4, r3, r0, lsl #18
    1608:	01130700 	tsteq	r3, r0, lsl #14
   main();
    160c:	0b3a0b0b 	bleq	e84240 <__ccfg+0xe64298>
    FaultISR();
    1610:	0b390b3b 	bleq	e44304 <__ccfg+0xe2435c>
        *pui32Dest++ = *pui32Src++;
    1614:	00001301 	andeq	r1, r0, r1, lsl #6
    1618:	03000d08 	movweq	r0, #3336	; 0xd08
    161c:	3b0b3a0e 	blcc	2cfe5c <__ccfg+0x2afeb4>
    1620:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1624:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1628:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    162c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1630:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
static byte get_byte () {
    1634:	0b3b0b3a 	bleq	ec4324 <__ccfg+0xea437c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1638:	13490b39 	movtne	r0, #39737	; 0x9b39
    163c:	00000b38 	andeq	r0, r0, r8, lsr fp
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1640:	0300340a 	movweq	r3, #1034	; 0x40a
    1644:	3b0b3a0e 	blcc	2cfe84 <__ccfg+0x2afedc>
		if (ee_inp)
    1648:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			b |= 1;
    164c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1650:	0b00000c 	bleq	1688 <put_byte+0x20>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1654:	0b0b000f 	bleq	2c1698 <__ccfg+0x2a16f0>
	for (b = 0, i = 0; i < 8; i++) {
    1658:	00001349 	andeq	r1, r0, r9, asr #6
}
    165c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1660:	00130113 	andseq	r0, r3, r3, lsl r1
    1664:	00210d00 	eoreq	r0, r1, r0, lsl #26
static void put_byte (byte b) {
    1668:	160e0000 	strne	r0, [lr], -r0
    166c:	3a0e0300 	bcc	382274 <__ccfg+0x3622cc>
    1670:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1674:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (b & 0x80)
    1678:	01150f00 	tsteq	r5, r0, lsl #30
    167c:	13010c27 	movwne	r0, #7207	; 0x1c27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1680:	05100000 	ldreq	r0, [r0, #-0]
	for (i = 0; i < 8; i++) {
    1684:	00134900 	andseq	r4, r3, r0, lsl #18
		b <<= 1;
    1688:	00341100 	eorseq	r1, r4, r0, lsl #2
	for (i = 0; i < 8; i++) {
    168c:	0b3a0e03 	bleq	e84ea0 <__ccfg+0xe64ef8>
}
    1690:	0b39053b 	bleq	e42b84 <__ccfg+0xe22bdc>
    1694:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1578 <diag+0xd4>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1698:	00000c3c 	andeq	r0, r0, ip, lsr ip
    169c:	0b011312 	bleq	462ec <__ccfg+0x26344>
	put_byte (cmd);
    16a0:	3b0b3a0b 	blcc	2cfed4 <__ccfg+0x2aff2c>
    16a4:	010b3905 	tsteq	fp, r5, lsl #18
}
    16a8:	13000013 	movwne	r0, #19
    16ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
static void wwait (word st, word del) {
    16b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    16b8:	00000b38 	andeq	r0, r0, r8, lsr fp
	while (dopen && (rdsr () & 1)) {
    16bc:	03011314 	movweq	r1, #4884	; 0x1314
    16c0:	3a0b0b0e 	bcc	2c4300 <__ccfg+0x2a4358>
    16c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c8:	0013010b 	andseq	r0, r3, fp, lsl #2
	put_byte (CMD_RDSR);
    16cc:	00211500 	eoreq	r1, r1, r0, lsl #10
	r = get_byte ();
    16d0:	0b2f1349 	bleq	bc63fc <__ccfg+0xba6454>
    16d4:	34160000 	ldrcc	r0, [r6], #-0
	while (dopen && (rdsr () & 1)) {
    16d8:	3a0e0300 	bcc	3822e0 <__ccfg+0x362338>
}
    16dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (st == WNONE)
    16e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16e4:	1700000a 	strne	r0, [r0, -sl]
			mdelay (1);
    16e8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1638 <get_byte+0x4>
    16ec:	0b3a0e03 	bleq	e84f00 <__ccfg+0xe64f58>
			delay (del, st);
    16f0:	0b390b3b 	bleq	e443e4 <__ccfg+0xe2443c>
    16f4:	01120111 	tsteq	r2, r1, lsl r1
			release;
    16f8:	00000a40 	andeq	r0, r0, r0, asr #20
    16fc:	3f012e18 	svccc	0x00012e18
    1700:	3a0e030c 	bcc	382338 <__ccfg+0x362390>
static void ready () {
    1704:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (dopen) {
    1708:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		wwait (WNONE, 1);
    170c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1710:	010a4001 	tsteq	sl, r1
    1714:	19000013 	stmdbne	r0, {r0, r1, r4}
	dstat = 0;
    1718:	08030005 	stmdaeq	r3, {r0, r2}
}
    171c:	0b3b0b3a 	bleq	ec440c <__ccfg+0xea4464>
    1720:	13490b39 	movtne	r0, #39737	; 0x9b39
    1724:	00000602 	andeq	r0, r0, r2, lsl #12
	udelay (1);
    1728:	0300051a 	movweq	r0, #1306	; 0x51a
    172c:	3b0b3a08 	blcc	2cff54 <__ccfg+0x2affac>
	udelay (1);
    1730:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		dopen = DOPEN_TEMP;
    1734:	000a0213 	andeq	r0, sl, r3, lsl r2
    1738:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    173c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
static void cclose () {
    1744:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	if (dopen == DOPEN_TEMP) {
    1748:	01111349 	tsteq	r1, r9, asr #6
    174c:	0a400112 	beq	1001b9c <__ccfg+0xfe1bf4>
		wwait (WNONE, 1);
    1750:	00001301 	andeq	r1, r0, r1, lsl #6
    1754:	0300051c 	movweq	r0, #1308	; 0x51c
	cmd_0 (CMD_DP);
    1758:	3b0b3a08 	blcc	2cff80 <__ccfg+0x2affd8>
    175c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		dopen = 0;
    1760:	00060213 	andeq	r0, r6, r3, lsl r2
}
    1764:	002e1d00 	eoreq	r1, lr, r0, lsl #26
word ee_open () {
    1768:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	ready ();
    176c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	dopen = DOPEN_PERM;
    1770:	01110b39 	tsteq	r1, r9, lsr fp
    1774:	0a400112 	beq	1001bc4 <__ccfg+0xfe1c1c>
}
    1778:	341e0000 	ldrcc	r0, [lr], #-0
	if (dopen) {
    177c:	3a080300 	bcc	202384 <__ccfg+0x1e23dc>
    1780:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		dopen = DOPEN_TEMP;
    1784:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		cclose ();
    1788:	1f000006 	svcne	0x00000006
}
    178c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
int ser_in (word st, char *buf, int len) {
    1790:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1794:	01110b39 	tsteq	r1, r9, lsr fp
	if (len == 0)
    1798:	1d200000 	stcne	0, cr0, [r0, #-0]
	if (__inpline == NULL) {
    179c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		if ((prcs = running (__inserial)) == 0) {
    17a0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    17a4:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			prcs = runthread (__inserial);
    17a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    17ac:	00052100 	andeq	r2, r5, r0, lsl #2
			if (prcs == 0) {
    17b0:	00001331 	andeq	r1, r0, r1, lsr r3
				npwait (st);
    17b4:	31011d22 	tstcc	r1, r2, lsr #26
		release;
    17b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		join (prcs, st);
    17bc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    17c0:	000b5705 	andeq	r5, fp, r5, lsl #14
	if (*__inpline == NULL) // bin cmd
    17c4:	00052300 	andeq	r2, r5, r0, lsl #6
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17c8:	0b3a0e03 	bleq	e84fdc <__ccfg+0xe65034>
	if (prcs >= len)
    17cc:	0b390b3b 	bleq	e444c0 <__ccfg+0xe24518>
		prcs = len-1;
    17d0:	06021349 	streq	r1, [r2], -r9, asr #6
	memcpy (buf, __inpline, prcs);
    17d4:	0a240000 	beq	9017dc <__ccfg+0x8e1834>
    17d8:	3a0e0300 	bcc	3823e0 <__ccfg+0x362438>
    17dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	ufree (__inpline);
    17e0:	0001110b 	andeq	r1, r1, fp, lsl #2
	__inpline = NULL;
    17e4:	011d2500 	tsteq	sp, r0, lsl #10
	if (*buf) // if it's NULL, it's a bin cmd
    17e8:	01521331 	cmpeq	r2, r1, lsr r3
		buf [prcs] = '\0';
    17ec:	0b580655 	bleq	1603148 <__ccfg+0x15e31a0>
}
    17f0:	0b570b59 	bleq	15c455c <__ccfg+0x15a45b4>
		prcs = strlen (__inpline);
    17f4:	05260000 	streq	r0, [r6, #-0]!
    17f8:	02133100 	andseq	r3, r3, #0, 2
		return 0;
    17fc:	27000006 	strcs	r0, [r0, -r6]
    1800:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1804:	06550152 			; <UNDEFINED> instruction: 0x06550152
int ser_outf (word st, const char *m, ...) {
    1808:	0b590b58 	bleq	1644570 <__ccfg+0x16245c8>
    180c:	13010b57 	movwne	r0, #6999	; 0x1b57
	if ((prcs = running (__outserial)) != 0) {
    1810:	1d280000 	stcne	0, cr0, [r8, #-0]
    1814:	11133101 	tstne	r3, r1, lsl #2
		join (prcs, st);
    1818:	58011201 	stmdapl	r1, {r0, r9, ip}
    181c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		release;
    1820:	2900000b 	stmdbcs	r0, {r0, r1, r3}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1824:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1774 <ee_open+0xc>
    1828:	0b3a0e03 	bleq	e8503c <__ccfg+0xe65094>
    182c:	0b390b3b 	bleq	e44520 <__ccfg+0xe24578>
		umwait (st);
    1830:	01111349 	tsteq	r1, r9, asr #6
    1834:	0a400112 	beq	1001c84 <__ccfg+0xfe1cdc>
	if (runstrand (__outserial, buf) == 0) {
    1838:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    183c:	3a0e0301 	bcc	382448 <__ccfg+0x3624a0>
    1840:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ufree (buf);
    1844:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		npwait (st);
    1848:	010a4001 	tsteq	sl, r1
}
    184c:	2b000013 	blcs	18a0 <ser_inf+0x44>
    1850:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    1854:	0b3b0b3a 	bleq	ec4544 <__ccfg+0xea459c>
    1858:	0b200b39 	bleq	804544 <__ccfg+0x7e459c>
int ser_inf (word st, const char *fmt, ...) {
    185c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    1860:	3a0e0301 	bcc	38246c <__ccfg+0x3624c4>
	if (fmt == NULL)
    1864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (__inpline == NULL) {
    1868:	110c270b 	tstne	ip, fp, lsl #14
		if ((prcs = running (__inserial)) == 0) {
    186c:	40011201 	andmi	r1, r1, r1, lsl #4
    1870:	0013010a 	andseq	r0, r3, sl, lsl #2
			prcs = runthread (__inserial);
    1874:	010b2d00 	tsteq	fp, r0, lsl #26
    1878:	00000655 	andeq	r0, r0, r5, asr r6
			if (prcs == 0) {
    187c:	3100342e 	tstcc	r0, lr, lsr #8
				npwait (st);
    1880:	00060213 	andeq	r0, r6, r3, lsl r2
		release;
    1884:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
		join (prcs, st);
    1888:	0b3a0e03 	bleq	e8509c <__ccfg+0xe650f4>
    188c:	0b390b3b 	bleq	e44580 <__ccfg+0xe245d8>
	va_start (ap, fmt);
    1890:	0b201349 	bleq	8065bc <__ccfg+0x7e6614>
	prcs = vscan (__inpline, fmt, ap);
    1894:	00001301 	andeq	r1, r0, r1, lsl #6
    1898:	03003430 	movweq	r3, #1072	; 0x430
	ufree (__inpline);
    189c:	3b0b3a08 	blcc	2d00c4 <__ccfg+0x2b011c>
	__inpline = NULL;
    18a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    18a4:	31000013 	tstcc	r0, r3, lsl r0
    18a8:	0e03012e 	adfeqsp	f0, f3, #0.5
    18ac:	0b3b0b3a 	bleq	ec459c <__ccfg+0xea45f4>
		return 0;
    18b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    18b4:	13010b20 	movwne	r0, #6944	; 0x1b20
    18b8:	05320000 	ldreq	r0, [r2, #-0]!
strand (__outserial, const char*)
    18bc:	3a080300 	bcc	2024c4 <__ccfg+0x1e251c>
    18c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    18c8:	011d3300 	tsteq	sp, r0, lsl #6
endstrand
    18cc:	01111331 	tsteq	r1, r1, lsr r3
    18d0:	0b580112 	bleq	1601d20 <__ccfg+0x15e1d78>
	ptr = data;
    18d4:	0b570b59 	bleq	15c4640 <__ccfg+0x15a4698>
    18d8:	00001301 	andeq	r1, r0, r1, lsl #6
	if (*ptr)
    18dc:	03012e34 	movweq	r2, #7732	; 0x1e34
		len = strlen (ptr);
    18e0:	3b0b3a0e 	blcc	2d0120 <__ccfg+0x2b0178>
    18e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    18ec:	010a4001 	tsteq	sl, r1
    18f0:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    18f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    18f8:	0b3b0b3a 	bleq	ec45e8 <__ccfg+0xea4640>
	len -= quant;
    18fc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1900:	00000602 	andeq	r0, r0, r2, lsl #12
    1904:	03012e36 	movweq	r2, #7734	; 0x1e36
	if (len == 0) {
    1908:	3b0b3a0e 	blcc	2d0148 <__ccfg+0x2b01a0>
		ufree (data);
    190c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		finish;
    1910:	010b200c 	tsteq	fp, ip
    1914:	37000013 	smladcc	r0, r3, r0, r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1918:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    191c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1920:	13490b39 	movtne	r0, #39737	; 0x9b39
    1924:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1928:	3a0e0301 	bcc	382534 <__ccfg+0x36258c>
strand (__inserial, address)
    192c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1930:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1934:	010b2013 	tsteq	fp, r3, lsl r0
    1938:	39000013 	stmdbcc	r0, {r0, r1, r4}
    193c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	if (__inpline != NULL)
    1940:	0b3b0b3a 	bleq	ec4630 <__ccfg+0xea4688>
    1944:	13490b39 	movtne	r0, #39737	; 0x9b39
		finish;
    1948:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    194c:	11133101 	tstne	r3, r1, lsl #2
    1950:	40011201 	andmi	r1, r1, r1, lsl #4
    1954:	3b00000a 	blcc	1984 <__inserial+0x58>
    1958:	1331001d 	teqne	r1, #29
		umwait (IM_INIT);
    195c:	01120111 	tsteq	r2, r1, lsl r1
		release;
    1960:	0b590b58 	bleq	16446c8 <__ccfg+0x1624720>
	savedata (data);
    1964:	00000b57 	andeq	r0, r0, r7, asr fp
	len = MAX_LINE_LENGTH;
    1968:	01110100 	tsteq	r1, r0, lsl #2
	io (IM_READ, __cport, READ, ptr, 1);
    196c:	0b130e25 	bleq	4c5208 <__ccfg+0x4a5260>
    1970:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1974:	01110655 	tsteq	r1, r5, asr r6
    1978:	00000610 	andeq	r0, r0, r0, lsl r6
	if (ptr == (char*) data) { // new line
    197c:	0b002402 	bleq	a98c <__exidx_end+0x7b18>
    1980:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if (*ptr == '\0') { // bin cmd
    1984:	0300000e 	movweq	r0, #14
			proceed (IM_BIN);
    1988:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    198c:	0b3b0b3a 	bleq	ec467c <__ccfg+0xea46d4>
		if (*ptr < 0x20)
    1990:	13490b39 	movtne	r0, #39737	; 0x9b39
    1994:	24040000 	strcs	r0, [r4], #-0
			proceed (IM_READ);
    1998:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    199c:	0008030b 	andeq	r0, r8, fp, lsl #6
	if (*ptr == '\n' || *ptr == '\r') {
    19a0:	00260500 	eoreq	r0, r6, r0, lsl #10
    19a4:	00001349 	andeq	r1, r0, r9, asr #6
    19a8:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
		*ptr = '\0';
    19ac:	07000013 	smladeq	r0, r3, r0, r0
		__inpline = (char*)data;
    19b0:	0b0b0113 	bleq	2c1e04 <__ccfg+0x2a1e5c>
		finish;
    19b4:	0b3b0b3a 	bleq	ec46a4 <__ccfg+0xea46fc>
	if (len) {
    19b8:	13010b39 	movwne	r0, #6969	; 0x1b39
		ptr++;
    19bc:	0d080000 	stceq	0, cr0, [r8, #-0]
    19c0:	3a0e0300 	bcc	3825c8 <__ccfg+0x362620>
		len--;
    19c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	proceed (IM_READ);
    19c8:	0b13490b 	bleq	4d3dfc <__ccfg+0x4b3e54>
	io (IM_BIN, __cport, READ, ptr, 1);
    19cc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    19d0:	000b380b 	andeq	r3, fp, fp, lsl #16
    19d4:	000d0900 	andeq	r0, sp, r0, lsl #18
    19d8:	0b3a0e03 	bleq	e851ec <__ccfg+0xe65244>
    19dc:	0b390b3b 	bleq	e446d0 <__ccfg+0xe24728>
	len -= 2;
    19e0:	0b381349 	bleq	e0670c <__ccfg+0xde6764>
	if (len > *ptr + 1) // 1 for 0x04
    19e4:	340a0000 	strcc	r0, [sl], #-0
    19e8:	3a0e0300 	bcc	3825f0 <__ccfg+0x362648>
		len = *ptr + 1;
    19ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19f0:	3f13490b 	svccc	0x0013490b
	ptr++;
    19f4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	quant = io (IM_BINL, __cport, READ, ptr, len);
    19f8:	000f0b00 	andeq	r0, pc, r0, lsl #22
    19fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1a00:	010c0000 	mrseq	r0, (UNDEF: 12)
    1a04:	01134901 	tsteq	r3, r1, lsl #18
    1a08:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1a0c:	00000021 	andeq	r0, r0, r1, lsr #32
	len -= quant;
    1a10:	0300160e 	movweq	r1, #1550	; 0x60e
		__inpline = (char*)data;
    1a14:	3b0b3a0e 	blcc	2d0254 <__ccfg+0x2b02ac>
		finish;
    1a18:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	ptr += quant;
    1a1c:	0f000013 	svceq	0x00000013
    1a20:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
endstrand
    1a24:	00001301 	andeq	r1, r0, r1, lsl #6
    1a28:	49000510 	stmdbmi	r0, {r4, r8, sl}
	proceed (IM_BINL);
    1a2c:	11000013 	tstne	r0, r3, lsl r0
endstrand
    1a30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a38:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a3c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1a40:	13120000 	tstne	r2, #0
    1a44:	3a0b0b01 	bcc	2c4650 <__ccfg+0x2a46a8>
		if (res && (d < n))
    1a48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a50:	000d1300 	andeq	r1, sp, r0, lsl #6
    1a54:	0b3a0e03 	bleq	e85268 <__ccfg+0xe652c0>
			res [d] = (char) c;
    1a58:	0b39053b 	bleq	e42f4c <__ccfg+0xe22fa4>
		d++;
    1a5c:	0b381349 	bleq	e06788 <__ccfg+0xde67e0>
    1a60:	13140000 	tstne	r4, #0
    1a64:	0b0e0301 	bleq	382670 <__ccfg+0x3626c8>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a68:	3b0b3a0b 	blcc	2d029c <__ccfg+0x2b02f4>
    1a6c:	010b3905 	tsteq	fp, r5, lsl #18
    1a70:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
				enci (10000);
    1a74:	13490021 	movtne	r0, #36897	; 0x9021
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a78:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1a7c:	3f012e16 	svccc	0x00012e16
	d = 0;
    1a80:	3a0e030c 	bcc	3826b8 <__ccfg+0x362710>
		c = *fm++;
    1a84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (c == '\\') {
    1a88:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			if ((c = *fm++) == '\0') {
    1a8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a90:	000a4001 	andeq	r4, sl, r1
				outc ('\\');
    1a94:	00051700 	andeq	r1, r5, r0, lsl #14
			if ((c = *fm++) == '\0') {
    1a98:	0b3a0803 	bleq	e83aac <__ccfg+0xe63b04>
				outc ('\\');
    1a9c:	0b390b3b 	bleq	e44790 <__ccfg+0xe247e8>
    1aa0:	06021349 	streq	r1, [r2], -r9, asr #6
			outc (c);
    1aa4:	34180000 	ldrcc	r0, [r8], #-0
    1aa8:	3a0e0300 	bcc	3826b0 <__ccfg+0x362708>
			if (c == '\0')
    1aac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ab0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			outc (c);
    1ab4:	00000006 	andeq	r0, r0, r6
				outc (val);
    1ab8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				val = (word) va_arg (ap, aword);
    1abc:	030b130e 	movweq	r1, #45838	; 0xb30e
		if (c == '%') {
    1ac0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1ac4:	10011106 	andne	r1, r1, r6, lsl #2
			c = *fm++;
    1ac8:	02000006 	andeq	r0, r0, #6
			switch (c) {
    1acc:	0b0b0024 	bleq	2c1b64 <__ccfg+0x2a1bbc>
    1ad0:	0e030b3e 	vmoveq.16	d3[0], r0
    1ad4:	16030000 	strne	r0, [r3], -r0
    1ad8:	3a0e0300 	bcc	3826e0 <__ccfg+0x362738>
    1adc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ae0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ae4:	00240400 	eoreq	r0, r4, r0, lsl #8
    1ae8:	0b3e0b0b 	bleq	f8471c <__ccfg+0xf64774>
				outc ('%');
    1aec:	00000803 	andeq	r0, r0, r3, lsl #16
    1af0:	03011305 	movweq	r1, #4869	; 0x1305
				outc (c);
    1af4:	3a0b0b0e 	bcc	2c4734 <__ccfg+0x2a478c>
    1af8:	010b3b0b 	tsteq	fp, fp, lsl #22
    1afc:	06000013 			; <UNDEFINED> instruction: 0x06000013
				if (c == '\0')
    1b00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				return d;
    1b04:	0b381349 	bleq	e06830 <__ccfg+0xde6888>
}
    1b08:	00000c34 	andeq	r0, r0, r4, lsr ip
    1b0c:	0b000f07 	bleq	5730 <__exidx_end+0x28bc>
			switch (c) {
    1b10:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1b14:	13490026 	movtne	r0, #36902	; 0x9026
    1b18:	35090000 	strcc	r0, [r9, #-0]
				for (i = 12; ; i -= 4) {
    1b1c:	00134900 	andseq	r4, r3, r0, lsl #18
				val = (word) va_arg (ap, aword);
    1b20:	01130a00 	tsteq	r3, r0, lsl #20
						[ (val >> i) & 0xf ]);
    1b24:	0b3a0b0b 	bleq	e84758 <__ccfg+0xe647b0>
    1b28:	0b390b3b 	bleq	e4481c <__ccfg+0xe24874>
    1b2c:	00001301 	andeq	r1, r0, r1, lsl #6
					outc (__pi_hex_enc_table
    1b30:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1b34:	3b0b3a0e 	blcc	2d0374 <__ccfg+0x2b03cc>
					if (i == 0)
    1b38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b3c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
				for (i = 12; ; i -= 4) {
    1b40:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
				val = (word) va_arg (ap, aword);
    1b44:	0c00000b 	stceq	0, cr0, [r0], {11}
				if (c == 'd' && (val & 0x8000) != 0) {
    1b48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				val = (word) va_arg (ap, aword);
    1b4c:	0b3b0b3a 	bleq	ec483c <__ccfg+0xea4894>
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b54:	00000b38 	andeq	r0, r0, r8, lsr fp
					outc ('-');
    1b58:	0300340d 	movweq	r3, #1037	; 0x40d
    1b5c:	3b0b3a0e 	blcc	2d039c <__ccfg+0x2b03f4>
					val = (~val) + 1;
    1b60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b64:	3c0c3f13 	stccc	15, cr3, [ip], {19}
				for (i = 12; ; i -= 4) {
    1b68:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
				enci (10000);
    1b6c:	0b0b000f 	bleq	2c1bb0 <__ccfg+0x2a1c08>
    1b70:	00001349 	andeq	r1, r0, r9, asr #6
    1b74:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1b78:	00130113 	andseq	r0, r3, r3, lsl r1
    1b7c:	00211000 	eoreq	r1, r1, r0
    1b80:	16110000 	ldrne	r0, [r1], -r0
    1b84:	3a0e0300 	bcc	38278c <__ccfg+0x3627e4>
    1b88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b90:	01151200 	tsteq	r5, r0, lsl #4
    1b94:	13010c27 	movwne	r0, #7207	; 0x1c27
    1b98:	05130000 	ldreq	r0, [r3, #-0]
    1b9c:	00134900 	andseq	r4, r3, r0, lsl #18
    1ba0:	00341400 	eorseq	r1, r4, r0, lsl #8
    1ba4:	0b3a0e03 	bleq	e853b8 <__ccfg+0xe65410>
    1ba8:	0b39053b 	bleq	e4309c <__ccfg+0xe230f4>
    1bac:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1a90 <__pi_vfparse+0x28>
    1bb0:	00000c3c 	andeq	r0, r0, ip, lsr ip
				if (c == 'd' || c == 'u') {
    1bb4:	0b011315 	bleq	46810 <__ccfg+0x26868>
    1bb8:	3b0b3a0b 	blcc	2d03ec <__ccfg+0x2b0444>
					if (c == 'd' &&
    1bbc:	010b3905 	tsteq	fp, r5, lsl #18
					val = va_arg (ap, lword);
    1bc0:	16000013 			; <UNDEFINED> instruction: 0x16000013
					fm++;
    1bc4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					if (c == 'd' &&
    1bc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
						outc ('-');
    1bd0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1bd4:	03011317 	movweq	r1, #4887	; 0x1317
						val = (~val) + 1;
    1bd8:	3a0b0b0e 	bcc	2c4818 <__ccfg+0x2a4870>
				enci (10000);
    1bdc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					enci (1000000000UL);
    1be0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1be4:	00211800 	eoreq	r1, r1, r0, lsl #16
    1be8:	0b2f1349 	bleq	bc6914 <__ccfg+0xba696c>
    1bec:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1bf0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1bf4:	3b0b3a0e 	blcc	2d0434 <__ccfg+0x2b048c>
    1bf8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1bfc:	1113490c 	tstne	r3, ip, lsl #18
    1c00:	40011201 	andmi	r1, r1, r1, lsl #4
    1c04:	0013010a 	andseq	r0, r3, sl, lsl #2
    1c08:	00051a00 	andeq	r1, r5, r0, lsl #20
    1c0c:	0b3a0803 	bleq	e83c20 <__ccfg+0xe63c78>
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
    1c14:	06021349 	streq	r1, [r2], -r9, asr #6
    1c18:	051b0000 	ldreq	r0, [fp, #-0]
    1c1c:	3a080300 	bcc	202824 <__ccfg+0x1e287c>
    1c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				} else if (c == 'x') {
    1c24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					for (i = 28; ; i -= 4) {
    1c28:	1c00000a 	stcne	0, cr0, [r0], {10}
					val = va_arg (ap, lword);
    1c2c:	00000018 	andeq	r0, r0, r8, lsl r0
							[ (val >> i) & 0xf ]);
    1c30:	0300341d 	movweq	r3, #1053	; 0x41d
    1c34:	3b0b3a0e 	blcc	2d0474 <__ccfg+0x2b04cc>
						outc (__pi_hex_enc_table
    1c38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c3c:	00060213 	andeq	r0, r6, r3, lsl r2
    1c40:	00341e00 	eorseq	r1, r4, r0, lsl #28
						if (i == 0)
    1c44:	0b3a0803 	bleq	e83c58 <__ccfg+0xe63cb0>
    1c48:	0b390b3b 	bleq	e4493c <__ccfg+0xe24994>
					for (i = 28; ; i -= 4) {
    1c4c:	06021349 	streq	r1, [r2], -r9, asr #6
					outc ('%');
    1c50:	341f0000 	ldrcc	r0, [pc], #-0	; 1c58 <__pi_vfparse+0x1f0>
    1c54:	3a080300 	bcc	20285c <__ccfg+0x1e28b4>
    1c58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					outc ('l');
    1c5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c60:	0000000a 	andeq	r0, r0, sl
				val = (word) va_arg (ap, aword);
    1c64:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				outc (val);
    1c68:	030b130e 	movweq	r1, #45838	; 0xb30e
    1c6c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				while (*st != '\0') {
    1c70:	10011106 	andne	r1, r1, r6, lsl #2
    1c74:	02000006 	andeq	r0, r0, #6
    1c78:	0b0b0024 	bleq	2c1d10 <__ccfg+0x2a1d68>
    1c7c:	0e030b3e 	vmoveq.16	d3[0], r0
					outc (*st);
    1c80:	16030000 	strne	r0, [r3], -r0
    1c84:	3a0e0300 	bcc	38288c <__ccfg+0x3628e4>
					st++;
    1c88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		c = *fm++;
    1c8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c90:	00240400 	eoreq	r0, r4, r0, lsl #8
    1c94:	0b3e0b0b 	bleq	f848c8 <__ccfg+0xf64920>
char *vform (char *res, const char *fm, va_list aq) {
    1c98:	00000803 	andeq	r0, r0, r3, lsl #16
    1c9c:	03011305 	movweq	r1, #4869	; 0x1305
	if (res != NULL) {
    1ca0:	3a0b0b0e 	bcc	2c48e0 <__ccfg+0x2a4938>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ca4:	010b3b0b 	tsteq	fp, fp, lsl #22
    1ca8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1cac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    1cb0:	0b381349 	bleq	e069dc <__ccfg+0xde6a34>
    1cb4:	00000c34 	andeq	r0, r0, r4, lsr ip
	fml = strlen (fm) + 17;
    1cb8:	0b000f07 	bleq	58dc <__exidx_end+0x2a68>
    1cbc:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1cc0:	13490026 	movtne	r0, #36902	; 0x9026
	if ((res = (char*) umalloc (fml)) == NULL)
    1cc4:	35090000 	strcc	r0, [r9, #-0]
    1cc8:	00134900 	andseq	r4, r3, r0, lsl #18
    1ccc:	01130a00 	tsteq	r3, r0, lsl #20
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd0:	0b3a0b0b 	bleq	e84904 <__ccfg+0xe6495c>
    1cd4:	0b390b3b 	bleq	e449c8 <__ccfg+0xe24a20>
    1cd8:	00001301 	andeq	r1, r0, r1, lsl #6
    1cdc:	03000d0b 	movweq	r0, #3339	; 0xd0b
		ufree (res);
    1ce0:	3b0b3a0e 	blcc	2d0520 <__ccfg+0x2b0578>
		goto Again;
    1ce4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (buf == NULL || fmt == NULL)
    1ce8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cec:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	if (buf == NULL || fmt == NULL)
    1cf0:	0c00000b 	stceq	0, cr0, [r0], {11}
    1cf4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1cf8:	0b3b0b3a 	bleq	ec49e8 <__ccfg+0xea4a40>
		    	    case 'u': scanu (lword); break;
    1cfc:	13490b39 	movtne	r0, #39737	; 0x9b39
			while (isspace (*buf)) buf++;
    1d00:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d04:	0300340d 	movweq	r3, #1037	; 0x40d
	while (*fmt != '\0') {
    1d08:	3b0b3a0e 	blcc	2d0548 <__ccfg+0x2b05a0>
		if (*fmt++ != '%')
    1d0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		switch (*fmt++) {
    1d10:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1d14:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1d18:	0b0b000f 	bleq	2c1d5c <__ccfg+0x2a1db4>
    1d1c:	00001349 	andeq	r1, r0, r9, asr #6
    1d20:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1d24:	00130113 	andseq	r0, r3, r3, lsl r1
    1d28:	00211000 	eoreq	r1, r1, r0
}
    1d2c:	16110000 	ldrne	r0, [r1], -r0
		switch (*fmt++) {
    1d30:	3a0e0300 	bcc	382938 <__ccfg+0x362990>
    1d34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d38:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d3c:	01151200 	tsteq	r5, r0, lsl #4
			while (isspace (*buf)) buf++;
    1d40:	13010c27 	movwne	r0, #7207	; 0x1c27
    1d44:	05130000 	ldreq	r0, [r3, #-0]
    1d48:	00134900 	andseq	r4, r3, r0, lsl #18
    1d4c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1d50:	0b3a0e03 	bleq	e85564 <__ccfg+0xe655bc>
    1d54:	0b39053b 	bleq	e43248 <__ccfg+0xe232a0>
			if (*buf == '\0')
    1d58:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1c3c <__pi_vfparse+0x1d4>
			if (*buf != ',') {
    1d5c:	00000c3c 	andeq	r0, r0, ip, lsr ip
			sap = va_arg (ap, char*);
    1d60:	0b011315 	bleq	469bc <__ccfg+0x26a14>
			nc++;
    1d64:	3b0b3a0b 	blcc	2d0598 <__ccfg+0x2b05f0>
			if (*buf != ',') {
    1d68:	010b3905 	tsteq	fp, r5, lsl #18
				while (!isspace (*buf) && *buf != ',' &&
    1d6c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1d70:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d78:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d7c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d80:	03011317 	movweq	r1, #4887	; 0x1317
    1d84:	3a0b0b0e 	bcc	2c49c4 <__ccfg+0x2a4a1c>
			while (isspace (*buf)) buf++;
    1d88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d8c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d90:	00211800 	eoreq	r1, r1, r0, lsl #16
    1d94:	0b2f1349 	bleq	bc6ac0 <__ccfg+0xba6b18>
    1d98:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
			if (*buf == ',') buf++;
    1d9c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1da0:	3b0b3a0e 	blcc	2d05e0 <__ccfg+0x2b0638>
			*sap = '\0';
    1da4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			break;
    1da8:	1113490c 	tstne	r3, ip, lsl #18
		    case 'd': scani (word); break;
    1dac:	40011201 	andmi	r1, r1, r1, lsl #4
    1db0:	0013010a 	andseq	r0, r3, sl, lsl #2
    1db4:	00051a00 	andeq	r1, r5, r0, lsl #20
    1db8:	0b3a0803 	bleq	e83dcc <__ccfg+0xe63e24>
    1dbc:	0b390b3b 	bleq	e44ab0 <__ccfg+0xe24b08>
    1dc0:	06021349 	streq	r1, [r2], -r9, asr #6
    1dc4:	051b0000 	ldreq	r0, [fp, #-0]
    1dc8:	3a080300 	bcc	2029d0 <__ccfg+0x1e2a28>
    1dcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dd0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1dd4:	1c00000a 	stcne	0, cr0, [r0], {10}
    1dd8:	00000018 	andeq	r0, r0, r8, lsl r0
    1ddc:	0300341d 	movweq	r3, #1053	; 0x41d
    1de0:	3b0b3a0e 	blcc	2d0620 <__ccfg+0x2b0678>
    1de4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1de8:	00060213 	andeq	r0, r6, r3, lsl r2
    1dec:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1df0:	0b3a0803 	bleq	e83e04 <__ccfg+0xe63e5c>
    1df4:	0b390b3b 	bleq	e44ae8 <__ccfg+0xe24b40>
    1df8:	0a021349 	beq	86b24 <__ccfg+0x66b7c>
    1dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    1e00:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1e04:	0e030b13 	vmoveq.32	d3[0], r0
    1e08:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1e0c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1e10:	24020000 	strcs	r0, [r2], #-0
    1e14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e18:	000e030b 	andeq	r0, lr, fp, lsl #6
		    case 'u': scanu (word); break;
    1e1c:	00160300 	andseq	r0, r6, r0, lsl #6
    1e20:	0b3a0e03 	bleq	e85634 <__ccfg+0xe6568c>
    1e24:	0b390b3b 	bleq	e44b18 <__ccfg+0xe24b70>
    1e28:	00001349 	andeq	r1, r0, r9, asr #6
    1e2c:	0b002404 	bleq	ae44 <__exidx_end+0x7fd0>
    1e30:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e34:	05000008 	streq	r0, [r0, #-8]
    1e38:	13490026 	movtne	r0, #36902	; 0x9026
    1e3c:	35060000 	strcc	r0, [r6, #-0]
    1e40:	00134900 	andseq	r4, r3, r0, lsl #18
    1e44:	01130700 	tsteq	r3, r0, lsl #14
    1e48:	0b3a0b0b 	bleq	e84a7c <__ccfg+0xe64ad4>
    1e4c:	0b390b3b 	bleq	e44b40 <__ccfg+0xe24b98>
    1e50:	00001301 	andeq	r1, r0, r1, lsl #6
    1e54:	03000d08 	movweq	r0, #3336	; 0xd08
    1e58:	3b0b3a0e 	blcc	2d0698 <__ccfg+0x2b06f0>
    1e5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e60:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		    case 'x': scanx (word); break;
    1e64:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1e68:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1e6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e70:	0b3b0b3a 	bleq	ec4b60 <__ccfg+0xea4bb8>
    1e74:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e78:	00000b38 	andeq	r0, r0, r8, lsr fp
    1e7c:	0300340a 	movweq	r3, #1034	; 0x40a
    1e80:	3b0b3a0e 	blcc	2d06c0 <__ccfg+0x2b0718>
    1e84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e88:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1e8c:	0b00000c 	bleq	1ec4 <vscan+0x1dc>
    1e90:	0b0b000f 	bleq	2c1ed4 <__ccfg+0x2a1f2c>
    1e94:	00001349 	andeq	r1, r0, r9, asr #6
    1e98:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1e9c:	00130113 	andseq	r0, r3, r3, lsl r1
    1ea0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1ea4:	160e0000 	strne	r0, [lr], -r0
    1ea8:	3a0e0300 	bcc	382ab0 <__ccfg+0x362b08>
    1eac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1eb0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1eb4:	01150f00 	tsteq	r5, r0, lsl #30
    1eb8:	13010c27 	movwne	r0, #7207	; 0x1c27
    1ebc:	05100000 	ldreq	r0, [r0, #-0]
    1ec0:	00134900 	andseq	r4, r3, r0, lsl #18
    1ec4:	00341100 	eorseq	r1, r4, r0, lsl #2
    1ec8:	0b3a0e03 	bleq	e856dc <__ccfg+0xe65734>
    1ecc:	0b39053b 	bleq	e433c0 <__ccfg+0xe23418>
    1ed0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1db4 <vscan+0xcc>
    1ed4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1ed8:	0b011312 	bleq	46b28 <__ccfg+0x26b80>
			switch (*fmt++) {
    1edc:	3b0b3a0b 	blcc	2d0710 <__ccfg+0x2b0768>
    1ee0:	010b3905 	tsteq	fp, r5, lsl #18
    1ee4:	13000013 	movwne	r0, #19
    1ee8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1eec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ef0:	13490b39 	movtne	r0, #39737	; 0x9b39
		    	    case 'd': scani (lword); break;
    1ef4:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ef8:	03011314 	movweq	r1, #4884	; 0x1314
    1efc:	3a0b0b0e 	bcc	2c4b3c <__ccfg+0x2a4b94>
    1f00:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f04:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f08:	00211500 	eoreq	r1, r1, r0, lsl #10
    1f0c:	0b2f1349 	bleq	bc6c38 <__ccfg+0xba6c90>
    1f10:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1f14:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1f18:	3b0b3a0e 	blcc	2d0758 <__ccfg+0x2b07b0>
    1f1c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1f20:	1201110c 	andne	r1, r1, #12, 2
    1f24:	010a4001 	tsteq	sl, r1
    1f28:	17000013 	smladne	r0, r3, r0, r0
    1f2c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1f30:	0b3b0b3a 	bleq	ec4c20 <__ccfg+0xea4c78>
    1f34:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f38:	00000602 	andeq	r0, r0, r2, lsl #12
    1f3c:	03003418 	movweq	r3, #1048	; 0x418
    1f40:	3b0b3a0e 	blcc	2d0780 <__ccfg+0x2b07d8>
    1f44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f48:	00060213 	andeq	r0, r6, r3, lsl r2
    1f4c:	000a1900 	andeq	r1, sl, r0, lsl #18
		    	    case 'x': scanx (lword); break;
    1f50:	0b3a0e03 	bleq	e85764 <__ccfg+0xe657bc>
    1f54:	0b390b3b 	bleq	e44c48 <__ccfg+0xe24ca0>
    1f58:	0b1a0000 	bleq	681f60 <__ccfg+0x661fb8>
    1f5c:	00065501 	andeq	r5, r6, r1, lsl #10
    1f60:	00341b00 	eorseq	r1, r4, r0, lsl #22
    1f64:	0b3a0803 	bleq	e83f78 <__ccfg+0xe63fd0>
    1f68:	0b390b3b 	bleq	e44c5c <__ccfg+0xe24cb4>
    1f6c:	0a021349 	beq	86c98 <__ccfg+0x66cf0>
    1f70:	01000000 	mrseq	r0, (UNDEF: 0)
    1f74:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1f78:	0e030b13 	vmoveq.32	d3[0], r0
    1f7c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1f80:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1f84:	24020000 	strcs	r0, [r2], #-0
    1f88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1f8c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1f90:	00160300 	andseq	r0, r6, r0, lsl #6
    1f94:	0b3a0e03 	bleq	e857a8 <__ccfg+0xe65800>
    1f98:	0b390b3b 	bleq	e44c8c <__ccfg+0xe24ce4>
    1f9c:	00001349 	andeq	r1, r0, r9, asr #6
    1fa0:	0b002404 	bleq	afb8 <__exidx_end+0x8144>
    1fa4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1fa8:	05000008 	streq	r0, [r0, #-8]
    1fac:	13490026 	movtne	r0, #36902	; 0x9026
    1fb0:	35060000 	strcc	r0, [r6, #-0]
    1fb4:	00134900 	andseq	r4, r3, r0, lsl #18
    1fb8:	000f0700 	andeq	r0, pc, r0, lsl #14
    1fbc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		    	    case 'd': scani (lword); break;
    1fc0:	13080000 	movwne	r0, #32768	; 0x8000
    1fc4:	3a0b0b01 	bcc	2c4bd0 <__ccfg+0x2a4c28>
    1fc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fcc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1fd0:	000d0900 	andeq	r0, sp, r0, lsl #18
    1fd4:	0b3a0e03 	bleq	e857e8 <__ccfg+0xe65840>
    1fd8:	0b390b3b 	bleq	e44ccc <__ccfg+0xe24d24>
		    	    case 'u': scanu (lword); break;
    1fdc:	0b0b1349 	bleq	2c6d08 <__ccfg+0x2a6d60>
    1fe0:	0b0c0b0d 	bleq	304c1c <__ccfg+0x2e4c74>
    1fe4:	00000b38 	andeq	r0, r0, r8, lsr fp
    1fe8:	03000d0a 	movweq	r0, #3338	; 0xd0a
    1fec:	3b0b3a0e 	blcc	2d082c <__ccfg+0x2b0884>
    1ff0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ff4:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ff8:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1ffc:	0b3a0e03 	bleq	e85810 <__ccfg+0xe65868>
    2000:	0b390b3b 	bleq	e44cf4 <__ccfg+0xe24d4c>
    2004:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1ee8 <vscan+0x200>
    2008:	00000c3c 	andeq	r0, r0, ip, lsr ip
    200c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    2010:	00130113 	andseq	r0, r3, r3, lsl r1
    2014:	00210d00 	eoreq	r0, r1, r0, lsl #26
    2018:	160e0000 	strne	r0, [lr], -r0
    201c:	3a0e0300 	bcc	382c24 <__ccfg+0x362c7c>
    2020:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		    	    case 'x': scanx (lword); break;
    2024:	0013490b 	andseq	r4, r3, fp, lsl #18
    2028:	01150f00 	tsteq	r5, r0, lsl #30
			if ((c = *buf++) == '\0')
    202c:	13010c27 	movwne	r0, #7207	; 0x1c27
    2030:	05100000 	ldreq	r0, [r0, #-0]
			sap = va_arg (ap, char*);
    2034:	00134900 	andseq	r4, r3, r0, lsl #18
			nc++;
    2038:	00341100 	eorseq	r1, r4, r0, lsl #2
			break;
    203c:	0b3a0e03 	bleq	e85850 <__ccfg+0xe658a8>
			while (isspace (*buf)) buf++;
    2040:	0b39053b 	bleq	e43534 <__ccfg+0xe2358c>
    2044:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f28 <vscan+0x240>
    2048:	00000c3c 	andeq	r0, r0, ip, lsr ip
						*sap++ = *buf++;
    204c:	0b011312 	bleq	46c9c <__ccfg+0x26cf4>
    2050:	3b0b3a0b 	blcc	2d0884 <__ccfg+0x2b08dc>
			while (isspace (*buf)) buf++;
    2054:	010b3905 	tsteq	fp, r5, lsl #18
    2058:	13000013 	movwne	r0, #19
    205c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		return 0;
    2060:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2064:	13490b39 	movtne	r0, #39737	; 0x9b39
		    case 'x': scanx (word); break;
    2068:	00000b38 	andeq	r0, r0, r8, lsr fp
    206c:	03011314 	movweq	r1, #4884	; 0x1314
		    	    case 'x': scanx (lword); break;
    2070:	3a0b0b0e 	bcc	2c4cb0 <__ccfg+0x2a4d08>
    2074:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2078:	0013010b 	andseq	r0, r3, fp, lsl #2
    207c:	00211500 	eoreq	r1, r1, r0, lsl #10
    2080:	0b2f1349 	bleq	bc6dac <__ccfg+0xba6e04>
    2084:	34160000 	ldrcc	r0, [r6], #-0
    2088:	3a0e0300 	bcc	382c90 <__ccfg+0x362ce8>
    208c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2090:	3f13490b 	svccc	0x0013490b
    2094:	000a020c 	andeq	r0, sl, ip, lsl #4
    2098:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    209c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    20a0:	0b3b0b3a 	bleq	ec4d90 <__ccfg+0xea4de8>
    20a4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    20a8:	01120111 	tsteq	r2, r1, lsl r1
    20ac:	00000a40 	andeq	r0, r0, r0, asr #20
    20b0:	03000518 	movweq	r0, #1304	; 0x518
    20b4:	3b0b3a0e 	blcc	2d08f4 <__ccfg+0x2b094c>
    20b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20bc:	00060213 	andeq	r0, r6, r3, lsl r2
    20c0:	00341900 	eorseq	r1, r4, r0, lsl #18
    20c4:	0b3a0e03 	bleq	e858d8 <__ccfg+0xe65930>
    20c8:	0b390b3b 	bleq	e44dbc <__ccfg+0xe24e14>
    20cc:	06021349 	streq	r1, [r2], -r9, asr #6
    20d0:	0b1a0000 	bleq	6820d8 <__ccfg+0x662130>
    20d4:	00065501 	andeq	r5, r6, r1, lsl #10
    20d8:	00341b00 	eorseq	r1, r4, r0, lsl #22
    20dc:	0b3a0803 	bleq	e840f0 <__ccfg+0xe64148>
    20e0:	0b390b3b 	bleq	e44dd4 <__ccfg+0xe24e2c>
    20e4:	0a021349 	beq	86e10 <__ccfg+0x66e68>
    20e8:	01000000 	mrseq	r0, (UNDEF: 0)
    20ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    20f0:	0e030b13 	vmoveq.32	d3[0], r0
    20f4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    20f8:	06100111 			; <UNDEFINED> instruction: 0x06100111
    20fc:	24020000 	strcs	r0, [r2], #-0
    2100:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2104:	000e030b 	andeq	r0, lr, fp, lsl #6
    2108:	00160300 	andseq	r0, r6, r0, lsl #6
    210c:	0b3a0e03 	bleq	e85920 <__ccfg+0xe65978>
    2110:	0b390b3b 	bleq	e44e04 <__ccfg+0xe24e5c>
    2114:	00001349 	andeq	r1, r0, r9, asr #6
    2118:	0b002404 	bleq	b130 <__exidx_end+0x82bc>
    211c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2120:	05000008 	streq	r0, [r0, #-8]
    2124:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2128:	0b3a0b0b 	bleq	e84d5c <__ccfg+0xe64db4>
    212c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2130:	0d060000 	stceq	0, cr0, [r6, #-0]
    2134:	490e0300 	stmdbmi	lr, {r8, r9}
    2138:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    213c:	0700000c 	streq	r0, [r0, -ip]
    2140:	0b0b000f 	bleq	2c2184 <__ccfg+0x2a21dc>
    2144:	26080000 	strcs	r0, [r8], -r0
    2148:	00134900 	andseq	r4, r3, r0, lsl #18
    214c:	00350900 	eorseq	r0, r5, r0, lsl #18
    2150:	00001349 	andeq	r1, r0, r9, asr #6
    2154:	0b000f0a 	bleq	5d84 <__exidx_end+0x2f10>
    2158:	0013490b 	andseq	r4, r3, fp, lsl #18
    215c:	01130b00 	tsteq	r3, r0, lsl #22
    2160:	0b3a0b0b 	bleq	e84d94 <__ccfg+0xe64dec>
    2164:	0b390b3b 	bleq	e44e58 <__ccfg+0xe24eb0>
    2168:	00001301 	andeq	r1, r0, r1, lsl #6
    216c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2170:	3b0b3a0e 	blcc	2d09b0 <__ccfg+0x2b0a08>
    2174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2178:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    217c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2180:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2184:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2188:	0b3b0b3a 	bleq	ec4e78 <__ccfg+0xea4ed0>
    218c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2190:	00000b38 	andeq	r0, r0, r8, lsr fp
    2194:	0300340e 	movweq	r3, #1038	; 0x40e
    2198:	3b0b3a0e 	blcc	2d09d8 <__ccfg+0x2b0a30>
    219c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    21a0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    21a4:	0f00000c 	svceq	0x0000000c
    21a8:	13490101 	movtne	r0, #37121	; 0x9101
    21ac:	00001301 	andeq	r1, r0, r1, lsl #6
    21b0:	00002110 	andeq	r2, r0, r0, lsl r1
    21b4:	00161100 	andseq	r1, r6, r0, lsl #2
    21b8:	0b3a0e03 	bleq	e859cc <__ccfg+0xe65a24>
    21bc:	0b39053b 	bleq	e436b0 <__ccfg+0xe23708>
    21c0:	00001349 	andeq	r1, r0, r9, asr #6
    21c4:	27011512 	smladcs	r1, r2, r5, r1
    21c8:	0013010c 	andseq	r0, r3, ip, lsl #2
    21cc:	00051300 	andeq	r1, r5, r0, lsl #6
    21d0:	00001349 	andeq	r1, r0, r9, asr #6
    21d4:	03003414 	movweq	r3, #1044	; 0x414
    21d8:	3b0b3a0e 	blcc	2d0a18 <__ccfg+0x2b0a70>
    21dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21e0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    21e4:	1500000c 	strne	r0, [r0, #-12]
    21e8:	0b0b0113 	bleq	2c263c <__ccfg+0x2a2694>
    21ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21f0:	13010b39 	movwne	r0, #6969	; 0x1b39
    21f4:	0d160000 	ldceq	0, cr0, [r6, #-0]
    21f8:	3a0e0300 	bcc	382e00 <__ccfg+0x362e58>
    21fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2200:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2204:	1700000b 	strne	r0, [r0, -fp]
    2208:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    220c:	0b3a0b0b 	bleq	e84e40 <__ccfg+0xe64e98>
    2210:	0b39053b 	bleq	e43704 <__ccfg+0xe2375c>
    2214:	00001301 	andeq	r1, r0, r1, lsl #6
    2218:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    221c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2220:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    2224:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2228:	0b3b0b3a 	bleq	ec4f18 <__ccfg+0xea4f70>
    222c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2230:	01111349 	tsteq	r1, r9, asr #6
    2234:	0a400112 	beq	1002684 <__ccfg+0xfe26dc>
    2238:	00001301 	andeq	r1, r0, r1, lsl #6
    223c:	0300051a 	movweq	r0, #1306	; 0x51a
    2240:	3b0b3a08 	blcc	2d0a68 <__ccfg+0x2b0ac0>
    2244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2248:	00060213 	andeq	r0, r6, r3, lsl r2
    224c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2250:	0b3a0803 	bleq	e84264 <__ccfg+0xe642bc>
    2254:	0b390b3b 	bleq	e44f48 <__ccfg+0xe24fa0>
    2258:	06021349 	streq	r1, [r2], -r9, asr #6
    225c:	0a1c0000 	beq	702264 <__ccfg+0x6e22bc>
    2260:	3a0e0300 	bcc	382e68 <__ccfg+0x362ec0>
    2264:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2268:	0001110b 	andeq	r1, r1, fp, lsl #2
    226c:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
    2270:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2274:	0b3b0b3a 	bleq	ec4f64 <__ccfg+0xea4fbc>
    2278:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    227c:	01111349 	tsteq	r1, r9, asr #6
    2280:	0a400112 	beq	10026d0 <__ccfg+0xfe2728>
    2284:	341e0000 	ldrcc	r0, [lr], #-0
    2288:	3a080300 	bcc	202e90 <__ccfg+0x1e2ee8>
    228c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2294:	1f00000a 	svcne	0x0000000a
    2298:	0e03012e 	adfeqsp	f0, f3, #0.5
    229c:	0b3b0b3a 	bleq	ec4f8c <__ccfg+0xea4fe4>
    22a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    22a4:	01120111 	tsteq	r2, r1, lsl r1
    22a8:	0a480a40 	beq	1204bb0 <__ccfg+0x11e4c08>
    22ac:	00001301 	andeq	r1, r0, r1, lsl #6
    22b0:	03000520 	movweq	r0, #1312	; 0x520
    22b4:	3b0b3a08 	blcc	2d0adc <__ccfg+0x2b0b34>
    22b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    22bc:	000a0213 	andeq	r0, sl, r3, lsl r2
    22c0:	000a2100 	andeq	r2, sl, r0, lsl #2
    22c4:	0b3a0803 	bleq	e842d8 <__ccfg+0xe64330>
    22c8:	0b390b3b 	bleq	e44fbc <__ccfg+0xe25014>
    22cc:	00000111 	andeq	r0, r0, r1, lsl r1
    22d0:	55010b22 	strpl	r0, [r1, #-2850]	; 0xfffff4de
    22d4:	00130106 	andseq	r0, r3, r6, lsl #2
    22d8:	00342300 	eorseq	r2, r4, r0, lsl #6
    22dc:	0b3a0803 	bleq	e842f0 <__ccfg+0xe64348>
    22e0:	0b390b3b 	bleq	e44fd4 <__ccfg+0xe2502c>
    22e4:	00001349 	andeq	r1, r0, r9, asr #6
    22e8:	11010b24 	tstne	r1, r4, lsr #22
    22ec:	01011201 	tsteq	r1, r1, lsl #4
    22f0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    22f4:	0111010b 	tsteq	r1, fp, lsl #2
    22f8:	00000112 	andeq	r0, r0, r2, lsl r1
    22fc:	01110100 	tsteq	r1, r0, lsl #2
    2300:	0b130e25 	bleq	4c5b9c <__ccfg+0x4a5bf4>
    2304:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2308:	01110655 	tsteq	r1, r5, asr r6
    230c:	00000610 	andeq	r0, r0, r0, lsl r6
    2310:	0b002402 	bleq	b320 <__exidx_end+0x84ac>
    2314:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2318:	0300000e 	movweq	r0, #14
    231c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2320:	0b3b0b3a 	bleq	ec5010 <__ccfg+0xea5068>
    2324:	13490b39 	movtne	r0, #39737	; 0x9b39
    2328:	24040000 	strcs	r0, [r4], #-0
    232c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2330:	0008030b 	andeq	r0, r8, fp, lsl #6
    2334:	01130500 	tsteq	r3, r0, lsl #10
    2338:	0b0b0e03 	bleq	2c5b4c <__ccfg+0x2a5ba4>
    233c:	0b3b0b3a 	bleq	ec502c <__ccfg+0xea5084>
    2340:	00001301 	andeq	r1, r0, r1, lsl #6
    2344:	03000d06 	movweq	r0, #3334	; 0xd06
    2348:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    234c:	000c340b 	andeq	r3, ip, fp, lsl #8
    2350:	000f0700 	andeq	r0, pc, r0, lsl #14
    2354:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2358:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    235c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2360:	13490035 	movtne	r0, #36917	; 0x9035
    2364:	0f0a0000 	svceq	0x000a0000
    2368:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    236c:	0b000013 	bleq	23c0 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2370:	0b0b0113 	bleq	2c27c4 <__ccfg+0x2a281c>
    2374:	0b3b0b3a 	bleq	ec5064 <__ccfg+0xea50bc>
    2378:	13010b39 	movwne	r0, #6969	; 0x1b39
    237c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2380:	3a0e0300 	bcc	382f88 <__ccfg+0x362fe0>
    2384:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2388:	0b13490b 	bleq	4d47bc <__ccfg+0x4b4814>
    238c:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2390:	000b380b 	andeq	r3, fp, fp, lsl #16
    2394:	000d0d00 	andeq	r0, sp, r0, lsl #26
    2398:	0b3a0e03 	bleq	e85bac <__ccfg+0xe65c04>
    239c:	0b390b3b 	bleq	e45090 <__ccfg+0xe250e8>
    23a0:	0b381349 	bleq	e070cc <__ccfg+0xde7124>
    23a4:	340e0000 	strcc	r0, [lr], #-0
    23a8:	3a0e0300 	bcc	382fb0 <__ccfg+0x363008>
    23ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23b0:	3f13490b 	svccc	0x0013490b
    23b4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    23b8:	01010f00 	tsteq	r1, r0, lsl #30
    23bc:	13011349 	movwne	r1, #4937	; 0x1349
    23c0:	21100000 	tstcs	r0, r0
    23c4:	11000000 	mrsne	r0, (UNDEF: 0)
    23c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    23cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23d0:	13490b39 	movtne	r0, #39737	; 0x9b39
    23d4:	15120000 	ldrne	r0, [r2, #-0]
    23d8:	010c2701 	tsteq	ip, r1, lsl #14
    23dc:	13000013 	movwne	r0, #19
    23e0:	13490005 	movtne	r0, #36869	; 0x9005
    23e4:	34140000 	ldrcc	r0, [r4], #-0
    23e8:	3a0e0300 	bcc	382ff0 <__ccfg+0x363048>
    23ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23f0:	3f13490b 	svccc	0x0013490b
    23f4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    23f8:	01131500 	tsteq	r3, r0, lsl #10
    23fc:	0b3a0b0b 	bleq	e85030 <__ccfg+0xe65088>
    2400:	0b39053b 	bleq	e438f4 <__ccfg+0xe2394c>
    2404:	00001301 	andeq	r1, r0, r1, lsl #6
    2408:	03000d16 	movweq	r0, #3350	; 0xd16
    240c:	3b0b3a0e 	blcc	2d0c4c <__ccfg+0x2b0ca4>
    2410:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2414:	000b3813 	andeq	r3, fp, r3, lsl r8
    2418:	01131700 	tsteq	r3, r0, lsl #14
    241c:	0b0b0e03 	bleq	2c5c30 <__ccfg+0x2a5c88>
    2420:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2424:	13010b39 	movwne	r0, #6969	; 0x1b39
    2428:	21180000 	tstcs	r8, r0
    242c:	2f134900 	svccs	0x00134900
    2430:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2434:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2384 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    2438:	0b3a0e03 	bleq	e85c4c <__ccfg+0xe65ca4>
    243c:	0b390b3b 	bleq	e45130 <__ccfg+0xe25188>
    2440:	13490c27 	movtne	r0, #39975	; 0x9c27
    2444:	01120111 	tsteq	r2, r1, lsl r1
    2448:	13010a40 	movwne	r0, #6720	; 0x1a40
    244c:	051a0000 	ldreq	r0, [sl, #-0]
    2450:	3a080300 	bcc	203058 <__ccfg+0x1e30b0>
    2454:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2458:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    245c:	1b000006 	blne	247c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>
    2460:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2464:	0b3b0b3a 	bleq	ec5154 <__ccfg+0xea51ac>
    2468:	13490b39 	movtne	r0, #39737	; 0x9b39
    246c:	00000602 	andeq	r0, r0, r2, lsl #12
    2470:	03000a1c 	movweq	r0, #2588	; 0xa1c
    2474:	3b0b3a0e 	blcc	2d0cb4 <__ccfg+0x2b0d0c>
    2478:	000b390b 	andeq	r3, fp, fp, lsl #18
    247c:	010b1d00 	tsteq	fp, r0, lsl #26
    2480:	01120111 	tsteq	r2, r1, lsl r1
    2484:	00001301 	andeq	r1, r0, r1, lsl #6
    2488:	0300341e 	movweq	r3, #1054	; 0x41e
    248c:	3b0b3a08 	blcc	2d0cb4 <__ccfg+0x2b0d0c>
    2490:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2494:	000a0213 	andeq	r0, sl, r3, lsl r2
    2498:	010b1f00 	tsteq	fp, r0, lsl #30
    249c:	13010655 	movwne	r0, #5717	; 0x1655
    24a0:	34200000 	strtcc	r0, [r0], #-0
    24a4:	3a080300 	bcc	2030ac <__ccfg+0x1e3104>
    24a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    24b0:	010b2100 	mrseq	r2, (UNDEF: 27)
    24b4:	00000655 	andeq	r0, r0, r5, asr r6
    24b8:	01110100 	tsteq	r1, r0, lsl #2
    24bc:	0b130e25 	bleq	4c5d58 <__ccfg+0x4a5db0>
    24c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    24c4:	01111755 	tsteq	r1, r5, asr r7
    24c8:	00001710 	andeq	r1, r0, r0, lsl r7
    24cc:	03001602 	movweq	r1, #1538	; 0x602
    24d0:	3b0b3a0e 	blcc	2d0d10 <__ccfg+0x2b0d68>
    24d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    24d8:	00240300 	eoreq	r0, r4, r0, lsl #6
    24dc:	0b3e0b0b 	bleq	f85110 <__ccfg+0xf65168>
    24e0:	00000e03 	andeq	r0, r0, r3, lsl #28
    24e4:	0b002404 	bleq	b4fc <__exidx_end+0x8688>
    24e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    24ec:	05000008 	streq	r0, [r0, #-8]
    24f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24f4:	0b3a0e03 	bleq	e85d08 <__ccfg+0xe65d60>
    24f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    24fc:	01111349 	tsteq	r1, r9, asr #6
    2500:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2504:	00194297 	mulseq	r9, r7, r2
    2508:	00340600 	eorseq	r0, r4, r0, lsl #12
    250c:	0b3a0e03 	bleq	e85d20 <__ccfg+0xe65d78>
    2510:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2514:	00001702 	andeq	r1, r0, r2, lsl #14
    2518:	03003407 	movweq	r3, #1031	; 0x407
    251c:	3b0b3a0e 	blcc	2d0d5c <__ccfg+0x2b0db4>
    2520:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2524:	00000018 	andeq	r0, r0, r8, lsl r0
    2528:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    252c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2530:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2534:	10011117 	andne	r1, r1, r7, lsl r1
    2538:	02000017 	andeq	r0, r0, #23
    253c:	0b0b0024 	bleq	2c25d4 <__ccfg+0x2a262c>
    2540:	0e030b3e 	vmoveq.16	d3[0], r0
    2544:	16030000 	strne	r0, [r3], -r0
    2548:	3a0e0300 	bcc	383150 <__ccfg+0x3631a8>
    254c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2550:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2554:	0b0b0024 	bleq	2c25ec <__ccfg+0x2a2644>
    2558:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    255c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2560:	03193f01 	tsteq	r9, #1, 30
    2564:	3b0b3a0e 	blcc	2d0da4 <__ccfg+0x2b0dfc>
    2568:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    256c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2570:	97184006 	ldrls	r4, [r8, -r6]
    2574:	13011942 	movwne	r1, #6466	; 0x1942
    2578:	34060000 	strcc	r0, [r6], #-0
    257c:	3a0e0300 	bcc	383184 <__ccfg+0x3631dc>
    2580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2584:	00170213 	andseq	r0, r7, r3, lsl r2
    2588:	00340700 	eorseq	r0, r4, r0, lsl #14
    258c:	0b3a0e03 	bleq	e85da0 <__ccfg+0xe65df8>
    2590:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2594:	00001802 	andeq	r1, r0, r2, lsl #16
    2598:	0b011708 	bleq	481c0 <__ccfg+0x28218>
    259c:	3b0b3a0b 	blcc	2d0dd0 <__ccfg+0x2b0e28>
    25a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    25a4:	000d0900 	andeq	r0, sp, r0, lsl #18
    25a8:	0b3a0e03 	bleq	e85dbc <__ccfg+0xe65e14>
    25ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25b0:	340a0000 	strcc	r0, [sl], #-0
    25b4:	3a0e0300 	bcc	3831bc <__ccfg+0x363214>
    25b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25bc:	0b000013 	bleq	2610 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xdc>
    25c0:	13490101 	movtne	r0, #37121	; 0x9101
    25c4:	00001301 	andeq	r1, r0, r1, lsl #6
    25c8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    25cc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    25d0:	11010000 	mrsne	r0, (UNDEF: 1)
    25d4:	130e2501 	movwne	r2, #58625	; 0xe501
    25d8:	1b0e030b 	blne	38320c <__ccfg+0x363264>
    25dc:	1117550e 	tstne	r7, lr, lsl #10
    25e0:	00171001 	andseq	r1, r7, r1
    25e4:	00240200 	eoreq	r0, r4, r0, lsl #4
    25e8:	0b3e0b0b 	bleq	f8521c <__ccfg+0xf65274>
    25ec:	00000e03 	andeq	r0, r0, r3, lsl #28
    25f0:	03001603 	movweq	r1, #1539	; 0x603
    25f4:	3b0b3a0e 	blcc	2d0e34 <__ccfg+0x2b0e8c>
    25f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    25fc:	00240400 	eoreq	r0, r4, r0, lsl #8
    2600:	0b3e0b0b 	bleq	f85234 <__ccfg+0xf6528c>
    2604:	00000803 	andeq	r0, r0, r3, lsl #16
    2608:	3f012e05 	svccc	0x00012e05
    260c:	3a0e0319 	bcc	383278 <__ccfg+0x3632d0>
    2610:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2614:	11134919 	tstne	r3, r9, lsl r9
    2618:	40061201 	andmi	r1, r6, r1, lsl #4
    261c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2620:	00001301 	andeq	r1, r0, r1, lsl #6
    2624:	03003406 	movweq	r3, #1030	; 0x406
    2628:	3b0b3a0e 	blcc	2d0e68 <__ccfg+0x2b0ec0>
    262c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2630:	00340700 	eorseq	r0, r4, r0, lsl #14
    2634:	0b3a0e03 	bleq	e85e48 <__ccfg+0xe65ea0>
    2638:	1349053b 	movtne	r0, #38203	; 0x953b
    263c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2640:	03193f01 	tsteq	r9, #1, 30
    2644:	3b0b3a0e 	blcc	2d0e84 <__ccfg+0x2b0edc>
    2648:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    264c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2650:	97184006 	ldrls	r4, [r8, -r6]
    2654:	13011942 	movwne	r1, #6466	; 0x1942
    2658:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    265c:	03193f01 	tsteq	r9, #1, 30
    2660:	3b0b3a0e 	blcc	2d0ea0 <__ccfg+0x2b0ef8>
    2664:	11192705 	tstne	r9, r5, lsl #14
    2668:	40061201 	andmi	r1, r6, r1, lsl #4
    266c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2670:	050a0000 	streq	r0, [sl, #-0]
    2674:	3a0e0300 	bcc	38327c <__ccfg+0x3632d4>
    2678:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    267c:	00180213 	andseq	r0, r8, r3, lsl r2
    2680:	11010000 	mrsne	r0, (UNDEF: 1)
    2684:	130e2501 	movwne	r2, #58625	; 0xe501
    2688:	1b0e030b 	blne	3832bc <__ccfg+0x363314>
    268c:	1117550e 	tstne	r7, lr, lsl #10
    2690:	00171001 	andseq	r1, r7, r1
    2694:	00240200 	eoreq	r0, r4, r0, lsl #4
    2698:	0b3e0b0b 	bleq	f852cc <__ccfg+0xf65324>
    269c:	00000e03 	andeq	r0, r0, r3, lsl #28
    26a0:	03001603 	movweq	r1, #1539	; 0x603
    26a4:	3b0b3a0e 	blcc	2d0ee4 <__ccfg+0x2b0f3c>
    26a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    26ac:	00240400 	eoreq	r0, r4, r0, lsl #8
    26b0:	0b3e0b0b 	bleq	f852e4 <__ccfg+0xf6533c>
    26b4:	00000803 	andeq	r0, r0, r3, lsl #16
    26b8:	03002e05 	movweq	r2, #3589	; 0xe05
    26bc:	3b0b3a0e 	blcc	2d0efc <__ccfg+0x2b0f54>
    26c0:	20192705 	andscs	r2, r9, r5, lsl #14
    26c4:	0600000b 	streq	r0, [r0], -fp
    26c8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    26cc:	0b3b0b3a 	bleq	ec53bc <__ccfg+0xea5414>
    26d0:	0b201927 	bleq	808b74 <__ccfg+0x7e8bcc>
    26d4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    26d8:	3a0e0301 	bcc	3832e4 <__ccfg+0x36333c>
    26dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    26e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    26e4:	97184006 	ldrls	r4, [r8, -r6]
    26e8:	13011942 	movwne	r1, #6466	; 0x1942
    26ec:	05080000 	streq	r0, [r8, #-0]
    26f0:	3a0e0300 	bcc	3832f8 <__ccfg+0x363350>
    26f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26f8:	00170213 	andseq	r0, r7, r3, lsl r2
    26fc:	00340900 	eorseq	r0, r4, r0, lsl #18
    2700:	0b3a0e03 	bleq	e85f14 <__ccfg+0xe65f6c>
    2704:	1349053b 	movtne	r0, #38203	; 0x953b
    2708:	00001702 	andeq	r1, r0, r2, lsl #14
    270c:	31001d0a 	tstcc	r0, sl, lsl #26
    2710:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2714:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2718:	0b000005 	bleq	2734 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x64>
    271c:	0111010b 	tsteq	r1, fp, lsl #2
    2720:	13010612 	movwne	r0, #5650	; 0x1612
    2724:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
    2728:	11010182 	smlabbne	r1, r2, r1, r0
    272c:	01133101 	tsteq	r3, r1, lsl #2
    2730:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2734:	0001828a 	andeq	r8, r1, sl, lsl #5
    2738:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    273c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    2740:	01018289 	smlabbeq	r1, r9, r2, r8
    2744:	00000111 	andeq	r0, r0, r1, lsl r1
    2748:	3f012e0f 	svccc	0x00012e0f
    274c:	3a0e0319 	bcc	3833b8 <__ccfg+0x363410>
    2750:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2754:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2758:	97184006 	ldrls	r4, [r8, -r6]
    275c:	13011942 	movwne	r1, #6466	; 0x1942
    2760:	34100000 	ldrcc	r0, [r0], #-0
    2764:	3a0e0300 	bcc	38336c <__ccfg+0x3633c4>
    2768:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    276c:	00170213 	andseq	r0, r7, r3, lsl r2
    2770:	82891100 	addhi	r1, r9, #0, 2
    2774:	01110001 	tsteq	r1, r1
    2778:	00001331 	andeq	r1, r0, r1, lsr r3
    277c:	01828912 	orreq	r8, r2, r2, lsl r9
    2780:	31011101 	tstcc	r1, r1, lsl #2
    2784:	13000013 	movwne	r0, #19
    2788:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    278c:	0b3a0e03 	bleq	e85fa0 <__ccfg+0xe65ff8>
    2790:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2794:	1301193c 	movwne	r1, #6460	; 0x193c
    2798:	05140000 	ldreq	r0, [r4, #-0]
    279c:	00134900 	andseq	r4, r3, r0, lsl #18
    27a0:	002e1500 	eoreq	r1, lr, r0, lsl #10
    27a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    27a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    27ac:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    27b0:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    27b4:	03193f00 	tsteq	r9, #0, 30
    27b8:	3b0b3a0e 	blcc	2d0ff8 <__ccfg+0x2b1050>
    27bc:	3c19270b 	ldccc	7, cr2, [r9], {11}
    27c0:	00000019 	andeq	r0, r0, r9, lsl r0
    27c4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    27c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    27cc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    27d0:	10011117 	andne	r1, r1, r7, lsl r1
    27d4:	02000017 	andeq	r0, r0, #23
    27d8:	0b0b0024 	bleq	2c2870 <__ccfg+0x2a28c8>
    27dc:	0e030b3e 	vmoveq.16	d3[0], r0
    27e0:	16030000 	strne	r0, [r3], -r0
    27e4:	3a0e0300 	bcc	3833ec <__ccfg+0x363444>
    27e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27ec:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    27f0:	0b0b0024 	bleq	2c2888 <__ccfg+0x2a28e0>
    27f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    27f8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    27fc:	3a0e0301 	bcc	383408 <__ccfg+0x363460>
    2800:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2804:	20134919 	andscs	r4, r3, r9, lsl r9
    2808:	0013010b 	andseq	r0, r3, fp, lsl #2
    280c:	00050600 	andeq	r0, r5, r0, lsl #12
    2810:	0b3a0e03 	bleq	e86024 <__ccfg+0xe6607c>
    2814:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2818:	34070000 	strcc	r0, [r7], #-0
    281c:	3a0e0300 	bcc	383424 <__ccfg+0x36347c>
    2820:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2824:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2828:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    282c:	0b3a0e03 	bleq	e86040 <__ccfg+0xe66098>
    2830:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2834:	0b201349 	bleq	807560 <__ccfg+0x7e75b8>
    2838:	00001301 	andeq	r1, r0, r1, lsl #6
    283c:	03000509 	movweq	r0, #1289	; 0x509
    2840:	3b0b3a0e 	blcc	2d1080 <__ccfg+0x2b10d8>
    2844:	00134905 	andseq	r4, r3, r5, lsl #18
    2848:	00340a00 	eorseq	r0, r4, r0, lsl #20
    284c:	0b3a0e03 	bleq	e86060 <__ccfg+0xe660b8>
    2850:	1349053b 	movtne	r0, #38203	; 0x953b
    2854:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    2858:	3a0e0300 	bcc	383460 <__ccfg+0x3634b8>
    285c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2860:	000b2019 	andeq	r2, fp, r9, lsl r0
    2864:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
    2868:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    286c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2870:	01111927 	tsteq	r1, r7, lsr #18
    2874:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2878:	01194297 			; <UNDEFINED> instruction: 0x01194297
    287c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2880:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2884:	0b3b0b3a 	bleq	ec5574 <__ccfg+0xea55cc>
    2888:	17021349 	strne	r1, [r2, -r9, asr #6]
    288c:	340e0000 	strcc	r0, [lr], #-0
    2890:	3a0e0300 	bcc	383498 <__ccfg+0x3634f0>
    2894:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2898:	00180213 	andseq	r0, r8, r3, lsl r2
    289c:	00340f00 	eorseq	r0, r4, r0, lsl #30
    28a0:	0b3a0e03 	bleq	e860b4 <__ccfg+0xe6610c>
    28a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28a8:	00001702 	andeq	r1, r0, r2, lsl #14
    28ac:	31011d10 	tstcc	r1, r0, lsl sp
    28b0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    28b4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    28b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    28bc:	00051100 	andeq	r1, r5, r0, lsl #2
    28c0:	00001331 	andeq	r1, r0, r1, lsr r3
    28c4:	55010b12 	strpl	r0, [r1, #-2834]	; 0xfffff4ee
    28c8:	13000017 	movwne	r0, #23
    28cc:	13310034 	teqne	r1, #52	; 0x34
    28d0:	00001802 	andeq	r1, r0, r2, lsl #16
    28d4:	31011d14 	tstcc	r1, r4, lsl sp
    28d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    28dc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    28e0:	1500000b 	strne	r0, [r0, #-11]
    28e4:	0111010b 	tsteq	r1, fp, lsl #2
    28e8:	00000612 	andeq	r0, r0, r2, lsl r6
    28ec:	31003416 	tstcc	r0, r6, lsl r4
    28f0:	00170213 	andseq	r0, r7, r3, lsl r2
    28f4:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    28f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    28fc:	0b3b0b3a 	bleq	ec55ec <__ccfg+0xea5644>
    2900:	01111927 	tsteq	r1, r7, lsr #18
    2904:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2908:	01194297 			; <UNDEFINED> instruction: 0x01194297
    290c:	18000013 	stmdane	r0, {r0, r1, r4}
    2910:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2914:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2918:	0b590b58 	bleq	1645680 <__ccfg+0x16256d8>
    291c:	00001301 	andeq	r1, r0, r1, lsl #6
    2920:	01828919 	orreq	r8, r2, r9, lsl r9
    2924:	31011101 	tstcc	r1, r1, lsl #2
    2928:	1a000013 	bne	297c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15c>
    292c:	0001828a 	andeq	r8, r1, sl, lsl #5
    2930:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2934:	1b000018 	blne	299c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x17c>
    2938:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2944:	01111349 	tsteq	r1, r9, asr #6
    2948:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    294c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2950:	1c000013 	stcne	0, cr0, [r0], {19}
    2954:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2958:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    295c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2960:	341d0000 	ldrcc	r0, [sp], #-0
    2964:	3a0e0300 	bcc	38356c <__ccfg+0x3635c4>
    2968:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    296c:	00170213 	andseq	r0, r7, r3, lsl r2
    2970:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    2974:	01111331 	tsteq	r1, r1, lsr r3
    2978:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    297c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2980:	1f000013 	svcne	0x00000013
    2984:	13310005 	teqne	r1, #5
    2988:	00001702 	andeq	r1, r0, r2, lsl #14
    298c:	31003420 	tstcc	r0, r0, lsr #8
    2990:	21000013 	tstcs	r0, r3, lsl r0
    2994:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2998:	17550152 			; <UNDEFINED> instruction: 0x17550152
    299c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    29a0:	00001301 	andeq	r1, r0, r1, lsl #6
    29a4:	01828922 	orreq	r8, r2, r2, lsr #18
    29a8:	31011101 	tstcc	r1, r1, lsl #2
    29ac:	00130113 	andseq	r0, r3, r3, lsl r1
    29b0:	82892300 	addhi	r2, r9, #0, 6
    29b4:	01110001 	tsteq	r1, r1
    29b8:	00001331 	andeq	r1, r0, r1, lsr r3
    29bc:	01828924 	orreq	r8, r2, r4, lsr #18
    29c0:	93011101 	movwls	r1, #4353	; 0x1101
    29c4:	13011842 	movwne	r1, #6210	; 0x1842
    29c8:	1d250000 	stcne	0, cr0, [r5, #-0]
    29cc:	11133100 	tstne	r3, r0, lsl #2
    29d0:	58061201 	stmdapl	r6, {r0, r9, ip}
    29d4:	0005590b 	andeq	r5, r5, fp, lsl #18
    29d8:	82892600 	addhi	r2, r9, #0, 12
    29dc:	01110101 	tsteq	r1, r1, lsl #2
    29e0:	00001301 	andeq	r1, r0, r1, lsl #6
    29e4:	3f012e27 	svccc	0x00012e27
    29e8:	3a0e0319 	bcc	383654 <__ccfg+0x3636ac>
    29ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    29f0:	01193c19 	tsteq	r9, r9, lsl ip
    29f4:	28000013 	stmdacs	r0, {r0, r1, r4}
    29f8:	13490005 	movtne	r0, #36869	; 0x9005
    29fc:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    2a00:	03193f01 	tsteq	r9, #1, 30
    2a04:	3b0b3a0e 	blcc	2d1244 <__ccfg+0x2b129c>
    2a08:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2a0c:	00130119 	andseq	r0, r3, r9, lsl r1
    2a10:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    2a14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a1c:	13491927 	movtne	r1, #39207	; 0x9927
    2a20:	0000193c 	andeq	r1, r0, ip, lsr r9
    2a24:	01110100 	tsteq	r1, r0, lsl #2
    2a28:	0b130e25 	bleq	4c62c4 <__ccfg+0x4a631c>
    2a2c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2a30:	01111755 	tsteq	r1, r5, asr r7
    2a34:	00001710 	andeq	r1, r0, r0, lsl r7
    2a38:	03001602 	movweq	r1, #1538	; 0x602
    2a3c:	3b0b3a0e 	blcc	2d127c <__ccfg+0x2b12d4>
    2a40:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a44:	00240300 	eoreq	r0, r4, r0, lsl #6
    2a48:	0b3e0b0b 	bleq	f8567c <__ccfg+0xf656d4>
    2a4c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2a50:	0b002404 	bleq	ba68 <__exidx_end+0x8bf4>
    2a54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a58:	05000008 	streq	r0, [r0, #-8]
    2a5c:	0b0b000f 	bleq	2c2aa0 <__ccfg+0x2a2af8>
    2a60:	00001349 	andeq	r1, r0, r9, asr #6
    2a64:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    2a68:	07000019 	smladeq	r0, r9, r0, r0
    2a6c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2a70:	00001301 	andeq	r1, r0, r1, lsl #6
    2a74:	49000508 	stmdbmi	r0, {r3, r8, sl}
    2a78:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2a7c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2a80:	13011349 	movwne	r1, #4937	; 0x1349
    2a84:	150a0000 	strne	r0, [sl, #-0]
    2a88:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    2a8c:	0b000013 	bleq	2ae0 <NOROM_ChipInfo_GetChipFamily+0x28>
    2a90:	0b0b0113 	bleq	2c2ee4 <__ccfg+0x2a2f3c>
    2a94:	0b3b0b3a 	bleq	ec5784 <__ccfg+0xea57dc>
    2a98:	00001301 	andeq	r1, r0, r1, lsl #6
    2a9c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2aa0:	3b0b3a0e 	blcc	2d12e0 <__ccfg+0x2b1338>
    2aa4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2aa8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2aac:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ab0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ab4:	0b201927 	bleq	808f58 <__ccfg+0x7e8fb0>
    2ab8:	00001301 	andeq	r1, r0, r1, lsl #6
    2abc:	0300050e 	movweq	r0, #1294	; 0x50e
    2ac0:	3b0b3a0e 	blcc	2d1300 <__ccfg+0x2b1358>
    2ac4:	00134905 	andseq	r4, r3, r5, lsl #18
    2ac8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    2acc:	0b3a0e03 	bleq	e862e0 <__ccfg+0xe66338>
    2ad0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ad4:	0b201349 	bleq	807800 <__ccfg+0x7e7858>
    2ad8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    2adc:	3a0e0300 	bcc	3836e4 <__ccfg+0x36373c>
    2ae0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ae4:	000b2019 	andeq	r2, fp, r9, lsl r0
    2ae8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    2aec:	0b3a0e03 	bleq	e86300 <__ccfg+0xe66358>
    2af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2af4:	0b201349 	bleq	807820 <__ccfg+0x7e7878>
    2af8:	00001301 	andeq	r1, r0, r1, lsl #6
    2afc:	03000512 	movweq	r0, #1298	; 0x512
    2b00:	3b0b3a0e 	blcc	2d1340 <__ccfg+0x2b1398>
    2b04:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b08:	00341300 	eorseq	r1, r4, r0, lsl #6
    2b0c:	0b3a0e03 	bleq	e86320 <__ccfg+0xe66378>
    2b10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b14:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2b18:	03193f01 	tsteq	r9, #1, 30
    2b1c:	3b0b3a0e 	blcc	2d135c <__ccfg+0x2b13b4>
    2b20:	1119270b 	tstne	r9, fp, lsl #14
    2b24:	40061201 	andmi	r1, r6, r1, lsl #4
    2b28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2b2c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b30:	03003415 	movweq	r3, #1045	; 0x415
    2b34:	3b0b3a0e 	blcc	2d1374 <__ccfg+0x2b13cc>
    2b38:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b3c:	16000017 			; <UNDEFINED> instruction: 0x16000017
    2b40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b44:	0b3b0b3a 	bleq	ec5834 <__ccfg+0xea588c>
    2b48:	051c1349 	ldreq	r1, [ip, #-841]	; 0xfffffcb7
    2b4c:	1d170000 	ldcne	0, cr0, [r7, #-0]
    2b50:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2b54:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2b58:	010b590b 	tsteq	fp, fp, lsl #18
    2b5c:	18000013 	stmdane	r0, {r0, r1, r4}
    2b60:	13310005 	teqne	r1, #5
    2b64:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2b68:	31001d19 	tstcc	r0, r9, lsl sp
    2b6c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2b70:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2b74:	1a00000b 	bne	2ba8 <AuxAdiDdiSafeWrite.constprop.1+0x20>
    2b78:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2b7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b80:	0b590b58 	bleq	16458e8 <__ccfg+0x1625940>
    2b84:	00001301 	andeq	r1, r0, r1, lsl #6
    2b88:	0182891b 	orreq	r8, r2, fp, lsl r9
    2b8c:	31011100 	mrscc	r1, (UNDEF: 17)
    2b90:	1c000013 	stcne	0, cr0, [r0], {19}
    2b94:	01018289 	smlabbeq	r1, r9, r2, r8
    2b98:	13010111 	movwne	r0, #4369	; 0x1111
    2b9c:	8a1d0000 	bhi	742ba4 <__ccfg+0x722bfc>
    2ba0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2ba4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2ba8:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    2bac:	11010182 	smlabbne	r1, r2, r1, r0
    2bb0:	01133101 	tsteq	r3, r1, lsl #2
    2bb4:	1f000013 	svcne	0x00000013
    2bb8:	01018289 	smlabbeq	r1, r9, r2, r8
    2bbc:	00000111 	andeq	r0, r0, r1, lsl r1
    2bc0:	3f012e20 	svccc	0x00012e20
    2bc4:	3a0e0319 	bcc	383830 <__ccfg+0x363888>
    2bc8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2bcc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2bd0:	97184006 	ldrls	r4, [r8, -r6]
    2bd4:	13011942 	movwne	r1, #6466	; 0x1942
    2bd8:	05210000 	streq	r0, [r1, #-0]!
    2bdc:	3a0e0300 	bcc	3837e4 <__ccfg+0x36383c>
    2be0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2be4:	00170213 	andseq	r0, r7, r3, lsl r2
    2be8:	00342200 	eorseq	r2, r4, r0, lsl #4
    2bec:	0b3a0e03 	bleq	e86400 <__ccfg+0xe66458>
    2bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bf4:	00001802 	andeq	r1, r0, r2, lsl #16
    2bf8:	03003423 	movweq	r3, #1059	; 0x423
    2bfc:	3b0b3a08 	blcc	2d1424 <__ccfg+0x2b147c>
    2c00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c04:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    2c08:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c0c:	0b3b0b3a 	bleq	ec58fc <__ccfg+0xea5954>
    2c10:	00001349 	andeq	r1, r0, r9, asr #6
    2c14:	11010b25 	tstne	r1, r5, lsr #22
    2c18:	01061201 	tsteq	r6, r1, lsl #4
    2c1c:	26000013 			; <UNDEFINED> instruction: 0x26000013
    2c20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2c24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c28:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c2c:	1d270000 	stcne	0, cr0, [r7, #-0]
    2c30:	11133101 	tstne	r3, r1, lsl #2
    2c34:	58061201 	stmdapl	r6, {r0, r9, ip}
    2c38:	0105590b 	tsteq	r5, fp, lsl #18
    2c3c:	28000013 	stmdacs	r0, {r0, r1, r4}
    2c40:	13310005 	teqne	r1, #5
    2c44:	0b290000 	bleq	a42c4c <__ccfg+0xa22ca4>
    2c48:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2c4c:	2a000006 	bcs	2c6c <NOROM_OSCClockSourceGet+0x58>
    2c50:	13310034 	teqne	r1, #52	; 0x34
    2c54:	00001702 	andeq	r1, r0, r2, lsl #14
    2c58:	31011d2b 	tstcc	r1, fp, lsr #26
    2c5c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2c60:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2c64:	00130105 	andseq	r0, r3, r5, lsl #2
    2c68:	010b2c00 	tsteq	fp, r0, lsl #24
    2c6c:	00001755 	andeq	r1, r0, r5, asr r7
    2c70:	4900262d 	stmdbmi	r0, {r0, r2, r3, r5, r9, sl, sp}
    2c74:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    2c78:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2c7c:	0b3a0e03 	bleq	e86490 <__ccfg+0xe664e8>
    2c80:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2c84:	01111349 	tsteq	r1, r9, asr #6
    2c88:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2c8c:	00194297 	mulseq	r9, r7, r2
    2c90:	01012f00 	tsteq	r1, r0, lsl #30
    2c94:	13011349 	movwne	r1, #4937	; 0x1349
    2c98:	21300000 	teqcs	r0, r0
    2c9c:	2f134900 	svccs	0x00134900
    2ca0:	3100000b 	tstcc	r0, fp
    2ca4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ca8:	0b3a0e03 	bleq	e864bc <__ccfg+0xe66514>
    2cac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2cb0:	1301193c 	movwne	r1, #6460	; 0x193c
    2cb4:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
    2cb8:	03193f01 	tsteq	r9, #1, 30
    2cbc:	3b0b3a0e 	blcc	2d14fc <__ccfg+0x2b1554>
    2cc0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2cc4:	01193c13 	tsteq	r9, r3, lsl ip
    2cc8:	33000013 	movwcc	r0, #19
    2ccc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2cd0:	0b3a0e03 	bleq	e864e4 <__ccfg+0xe6653c>
    2cd4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2cd8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ce4:	0e030b13 	vmoveq.32	d3[0], r0
    2ce8:	17550e1b 	smmlane	r5, fp, lr, r0
    2cec:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2cf0:	24020000 	strcs	r0, [r2], #-0
    2cf4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2cf8:	000e030b 	andeq	r0, lr, fp, lsl #6
    2cfc:	00160300 	andseq	r0, r6, r0, lsl #6
    2d00:	0b3a0e03 	bleq	e86514 <__ccfg+0xe6656c>
    2d04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d08:	24040000 	strcs	r0, [r4], #-0
    2d0c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2d10:	0008030b 	andeq	r0, r8, fp, lsl #6
    2d14:	01040500 	tsteq	r4, r0, lsl #10
    2d18:	0b3a0b0b 	bleq	e8594c <__ccfg+0xe659a4>
    2d1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2d20:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    2d24:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    2d28:	0700000d 	streq	r0, [r0, -sp]
    2d2c:	0b0b0104 	bleq	2c3144 <__ccfg+0x2a319c>
    2d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d34:	00001301 	andeq	r1, r0, r1, lsl #6
    2d38:	03001608 	movweq	r1, #1544	; 0x608
    2d3c:	3b0b3a0e 	blcc	2d157c <__ccfg+0x2b15d4>
    2d40:	00134905 	andseq	r4, r3, r5, lsl #18
    2d44:	002e0900 	eoreq	r0, lr, r0, lsl #18
    2d48:	0b3a0e03 	bleq	e8655c <__ccfg+0xe665b4>
    2d4c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2d50:	0b201349 	bleq	807a7c <__ccfg+0x7e7ad4>
    2d54:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    2d58:	03193f01 	tsteq	r9, #1, 30
    2d5c:	3b0b3a0e 	blcc	2d159c <__ccfg+0x2b15f4>
    2d60:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d64:	010b2013 	tsteq	fp, r3, lsl r0
    2d68:	0b000013 	bleq	2dbc <NOROM_OSCClockSourceGet+0x1a8>
    2d6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d70:	0b3b0b3a 	bleq	ec5a60 <__ccfg+0xea5ab8>
    2d74:	00001349 	andeq	r1, r0, r9, asr #6
    2d78:	3f002e0c 	svccc	0x00002e0c
    2d7c:	3a0e0319 	bcc	3839e8 <__ccfg+0x363a40>
    2d80:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d84:	11134919 	tstne	r3, r9, lsl r9
    2d88:	40061201 	andmi	r1, r6, r1, lsl #4
    2d8c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2d90:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    2d94:	03193f01 	tsteq	r9, #1, 30
    2d98:	3b0b3a0e 	blcc	2d15d8 <__ccfg+0x2b1630>
    2d9c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2da0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2da4:	97184006 	ldrls	r4, [r8, -r6]
    2da8:	13011942 	movwne	r1, #6466	; 0x1942
    2dac:	340e0000 	strcc	r0, [lr], #-0
    2db0:	3a0e0300 	bcc	3839b8 <__ccfg+0x363a10>
    2db4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2db8:	00170213 	andseq	r0, r7, r3, lsl r2
    2dbc:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    2dc0:	01111331 	tsteq	r1, r1, lsr r3
    2dc4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2dc8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2dcc:	10000013 	andne	r0, r0, r3, lsl r0
    2dd0:	13310034 	teqne	r1, #52	; 0x34
    2dd4:	00001702 	andeq	r1, r0, r2, lsl #14
    2dd8:	11010b11 	tstne	r1, r1, lsl fp
    2ddc:	00061201 	andeq	r1, r6, r1, lsl #4
    2de0:	00341200 	eorseq	r1, r4, r0, lsl #4
    2de4:	00001331 	andeq	r1, r0, r1, lsr r3
    2de8:	31001d13 	tstcc	r0, r3, lsl sp
    2dec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2df0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2df4:	1400000b 	strne	r0, [r0], #-11
    2df8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2dfc:	0b3a0e03 	bleq	e86610 <__ccfg+0xe66668>
    2e00:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e04:	01111349 	tsteq	r1, r9, asr #6
    2e08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2e0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2e10:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2e14:	00018289 	andeq	r8, r1, r9, lsl #5
    2e18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2e1c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    2e20:	3a0e0301 	bcc	383a2c <__ccfg+0x363a84>
    2e24:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2e28:	20134919 	andscs	r4, r3, r9, lsl r9
    2e2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e30:	00341700 	eorseq	r1, r4, r0, lsl #14
    2e34:	0b3a0e03 	bleq	e86648 <__ccfg+0xe666a0>
    2e38:	1349053b 	movtne	r0, #38203	; 0x953b
    2e3c:	34180000 	ldrcc	r0, [r8], #-0
    2e40:	3a0e0300 	bcc	383a48 <__ccfg+0x363aa0>
    2e44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e48:	00180213 	andseq	r0, r8, r3, lsl r2
    2e4c:	001d1900 	andseq	r1, sp, r0, lsl #18
    2e50:	01521331 	cmpeq	r2, r1, lsr r3
    2e54:	0b581755 	bleq	1608bb0 <__ccfg+0x15e8c08>
    2e58:	00000b59 	andeq	r0, r0, r9, asr fp
    2e5c:	31011d1a 	tstcc	r1, sl, lsl sp
    2e60:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2e64:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2e68:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e6c:	010b1b00 	tsteq	fp, r0, lsl #22
    2e70:	00001755 	andeq	r1, r0, r5, asr r7
    2e74:	3f012e1c 	svccc	0x00012e1c
    2e78:	3a0e0319 	bcc	383ae4 <__ccfg+0x363b3c>
    2e7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2e80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2e84:	97184006 	ldrls	r4, [r8, -r6]
    2e88:	00001942 	andeq	r1, r0, r2, asr #18
    2e8c:	31011d1d 	tstcc	r1, sp, lsl sp
    2e90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e94:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2e98:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e9c:	011d1e00 	tsteq	sp, r0, lsl #28
    2ea0:	01111331 	tsteq	r1, r1, lsr r3
    2ea4:	0b580612 	bleq	16046f4 <__ccfg+0x15e474c>
    2ea8:	00000b59 	andeq	r0, r0, r9, asr fp
    2eac:	01110100 	tsteq	r1, r0, lsl #2
    2eb0:	0b130e25 	bleq	4c674c <__ccfg+0x4a67a4>
    2eb4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2eb8:	01111755 	tsteq	r1, r5, asr r7
    2ebc:	00001710 	andeq	r1, r0, r0, lsl r7
    2ec0:	0b002402 	bleq	bed0 <__exidx_end+0x905c>
    2ec4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ec8:	0300000e 	movweq	r0, #14
    2ecc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2ed0:	0b3b0b3a 	bleq	ec5bc0 <__ccfg+0xea5c18>
    2ed4:	00001349 	andeq	r1, r0, r9, asr #6
    2ed8:	0b002404 	bleq	bef0 <__exidx_end+0x907c>
    2edc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ee0:	05000008 	streq	r0, [r0, #-8]
    2ee4:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ee8:	0b3b0b3a 	bleq	ec5bd8 <__ccfg+0xea5c30>
    2eec:	0b201927 	bleq	809390 <__ccfg+0x7e93e8>
    2ef0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ef4:	03000506 	movweq	r0, #1286	; 0x506
    2ef8:	3b0b3a0e 	blcc	2d1738 <__ccfg+0x2b1790>
    2efc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f00:	00340700 	eorseq	r0, r4, r0, lsl #14
    2f04:	0b3a0e03 	bleq	e86718 <__ccfg+0xe66770>
    2f08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f0c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2f10:	3a0e0301 	bcc	383b1c <__ccfg+0x363b74>
    2f14:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2f18:	20134919 	andscs	r4, r3, r9, lsl r9
    2f1c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f20:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2f24:	01111331 	tsteq	r1, r1, lsr r3
    2f28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f2c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2f30:	0a000013 	beq	2f84 <__exidx_end+0x110>
    2f34:	13310005 	teqne	r1, #5
    2f38:	00001702 	andeq	r1, r0, r2, lsl #14
    2f3c:	3100340b 	tstcc	r0, fp, lsl #8
    2f40:	00170213 	andseq	r0, r7, r3, lsl r2
    2f44:	00050c00 	andeq	r0, r5, r0, lsl #24
    2f48:	0b1c1331 	bleq	707c14 <__ccfg+0x6e7c6c>
    2f4c:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    2f50:	11000182 	smlabbne	r0, r2, r1, r0
    2f54:	00133101 	andseq	r3, r3, r1, lsl #2
    2f58:	82890e00 	addhi	r0, r9, #0, 28
    2f5c:	01110001 	tsteq	r1, r1
    2f60:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2f64:	0f000013 	svceq	0x00000013
    2f68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2f6c:	0b3a0e03 	bleq	e86780 <__ccfg+0xe667d8>
    2f70:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2f74:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f78:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2f7c:	00130119 	andseq	r0, r3, r9, lsl r1
    2f80:	00051000 	andeq	r1, r5, r0
    2f84:	0b3a0e03 	bleq	e86798 <__ccfg+0xe667f0>
    2f88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f8c:	00001702 	andeq	r1, r0, r2, lsl #14
    2f90:	01828911 	orreq	r8, r2, r1, lsl r9
    2f94:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    2f98:	13311942 	teqne	r1, #1081344	; 0x108000
    2f9c:	8a120000 	bhi	482fa4 <__ccfg+0x462ffc>
    2fa0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2fa4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2fa8:	34130000 	ldrcc	r0, [r3], #-0
    2fac:	3a0e0300 	bcc	383bb4 <__ccfg+0x363c0c>
    2fb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fb4:	00170213 	andseq	r0, r7, r3, lsl r2
    2fb8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2fbc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2fc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fc4:	13491927 	movtne	r1, #39207	; 0x9927
    2fc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2fcc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2fd0:	00130119 	andseq	r0, r3, r9, lsl r1
    2fd4:	011d1500 	tsteq	sp, r0, lsl #10
    2fd8:	01111331 	tsteq	r1, r1, lsr r3
    2fdc:	0b580612 	bleq	160482c <__ccfg+0x15e4884>
    2fe0:	00000b59 	andeq	r0, r0, r9, asr fp
    2fe4:	11010b16 	tstne	r1, r6, lsl fp
    2fe8:	00061201 	andeq	r1, r6, r1, lsl #4
    2fec:	002e1700 	eoreq	r1, lr, r0, lsl #14
    2ff0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2ff4:	0b3b0b3a 	bleq	ec5ce4 <__ccfg+0xea5d3c>
    2ff8:	13491927 	movtne	r1, #39207	; 0x9927
    2ffc:	0000193c 	andeq	r1, r0, ip, lsr r9
    3000:	01110100 	tsteq	r1, r0, lsl #2
    3004:	0b130e25 	bleq	4c68a0 <__ccfg+0x4a68f8>
    3008:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    300c:	01111755 	tsteq	r1, r5, asr r7
    3010:	00001710 	andeq	r1, r0, r0, lsl r7
    3014:	0b002402 	bleq	c024 <__exidx_end+0x91b0>
    3018:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    301c:	0300000e 	movweq	r0, #14
    3020:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3024:	0b3b0b3a 	bleq	ec5d14 <__ccfg+0xea5d6c>
    3028:	00001349 	andeq	r1, r0, r9, asr #6
    302c:	0b002404 	bleq	c044 <__exidx_end+0x91d0>
    3030:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3034:	05000008 	streq	r0, [r0, #-8]
    3038:	0b0b000f 	bleq	2c307c <__ccfg+0x2a30d4>
    303c:	00001349 	andeq	r1, r0, r9, asr #6
    3040:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    3044:	07000019 	smladeq	r0, r9, r0, r0
    3048:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    304c:	00001301 	andeq	r1, r0, r1, lsl #6
    3050:	49000508 	stmdbmi	r0, {r3, r8, sl}
    3054:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3058:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    305c:	13011349 	movwne	r1, #4937	; 0x1349
    3060:	150a0000 	strne	r0, [sl, #-0]
    3064:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3068:	0b000013 	bleq	30bc <__exidx_end+0x248>
    306c:	0b0b0113 	bleq	2c34c0 <__ccfg+0x2a3518>
    3070:	0b3b0b3a 	bleq	ec5d60 <__ccfg+0xea5db8>
    3074:	00001301 	andeq	r1, r0, r1, lsl #6
    3078:	03000d0c 	movweq	r0, #3340	; 0xd0c
    307c:	3b0b3a0e 	blcc	2d18bc <__ccfg+0x2b1914>
    3080:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3084:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3088:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    308c:	0b3a0e03 	bleq	e868a0 <__ccfg+0xe668f8>
    3090:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3094:	13010b20 	movwne	r0, #6944	; 0x1b20
    3098:	050e0000 	streq	r0, [lr, #-0]
    309c:	3a0e0300 	bcc	383ca4 <__ccfg+0x363cfc>
    30a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30a4:	0f000013 	svceq	0x00000013
    30a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    30ac:	0b3a0e03 	bleq	e868c0 <__ccfg+0xe66918>
    30b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    30b4:	0b201349 	bleq	807de0 <__ccfg+0x7e7e38>
    30b8:	00001301 	andeq	r1, r0, r1, lsl #6
    30bc:	03003410 	movweq	r3, #1040	; 0x410
    30c0:	3b0b3a0e 	blcc	2d1900 <__ccfg+0x2b1958>
    30c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    30c8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    30cc:	01111331 	tsteq	r1, r1, lsr r3
    30d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    30d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    30d8:	12000013 	andne	r0, r0, #19
    30dc:	13310005 	teqne	r1, #5
    30e0:	00001702 	andeq	r1, r0, r2, lsl #14
    30e4:	11010b13 	tstne	r1, r3, lsl fp
    30e8:	01061201 	tsteq	r6, r1, lsl #4
    30ec:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    30f0:	01018289 	smlabbeq	r1, r9, r2, r8
    30f4:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    30f8:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    30fc:	0001828a 	andeq	r8, r1, sl, lsl #5
    3100:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3104:	16000018 			; <UNDEFINED> instruction: 0x16000018
    3108:	01018289 	smlabbeq	r1, r9, r2, r8
    310c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3110:	00130118 	andseq	r0, r3, r8, lsl r1
    3114:	00341700 	eorseq	r1, r4, r0, lsl #14
    3118:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    311c:	0b180000 	bleq	603124 <__ccfg+0x5e317c>
    3120:	01175501 	tsteq	r7, r1, lsl #10
    3124:	19000013 	stmdbne	r0, {r0, r1, r4}
    3128:	13310005 	teqne	r1, #5
    312c:	00000b1c 	andeq	r0, r0, ip, lsl fp
    3130:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    3134:	1b000017 	blne	3198 <__exidx_end+0x324>
    3138:	13310034 	teqne	r1, #52	; 0x34
    313c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    3140:	03193f01 	tsteq	r9, #1, 30
    3144:	3b0b3a0e 	blcc	2d1984 <__ccfg+0x2b19dc>
    3148:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    314c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3150:	97184006 	ldrls	r4, [r8, -r6]
    3154:	13011942 	movwne	r1, #6466	; 0x1942
    3158:	051d0000 	ldreq	r0, [sp, #-0]
    315c:	3a0e0300 	bcc	383d64 <__ccfg+0x363dbc>
    3160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3164:	00170213 	andseq	r0, r7, r3, lsl r2
    3168:	00341e00 	eorseq	r1, r4, r0, lsl #28
    316c:	0b3a0e03 	bleq	e86980 <__ccfg+0xe669d8>
    3170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3174:	00001702 	andeq	r1, r0, r2, lsl #14
    3178:	0182891f 	orreq	r8, r2, pc, lsl r9
    317c:	31011100 	mrscc	r1, (UNDEF: 17)
    3180:	20000013 	andcs	r0, r0, r3, lsl r0
    3184:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3188:	0b3a0e03 	bleq	e8699c <__ccfg+0xe669f4>
    318c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3190:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3194:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3198:	00130119 	andseq	r0, r3, r9, lsl r1
    319c:	82892100 	addhi	r2, r9, #0, 2
    31a0:	01110101 	tsteq	r1, r1, lsl #2
    31a4:	13011331 	movwne	r1, #4913	; 0x1331
    31a8:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    31ac:	3a0e0300 	bcc	383db4 <__ccfg+0x363e0c>
    31b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    31b4:	20134919 	andscs	r4, r3, r9, lsl r9
    31b8:	2300000b 	movwcs	r0, #11
    31bc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    31c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    31c4:	0b201927 	bleq	809668 <__ccfg+0x7e96c0>
    31c8:	34240000 	strtcc	r0, [r4], #-0
    31cc:	3a0e0300 	bcc	383dd4 <__ccfg+0x363e2c>
    31d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    31d4:	00170213 	andseq	r0, r7, r3, lsl r2
    31d8:	011d2500 	tsteq	sp, r0, lsl #10
    31dc:	01111331 	tsteq	r1, r1, lsr r3
    31e0:	0b580612 	bleq	1604a30 <__ccfg+0x15e4a88>
    31e4:	13010559 	movwne	r0, #5465	; 0x1559
    31e8:	05260000 	streq	r0, [r6, #-0]!
    31ec:	3a0e0300 	bcc	383df4 <__ccfg+0x363e4c>
    31f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    31f4:	00170213 	andseq	r0, r7, r3, lsl r2
    31f8:	00342700 	eorseq	r2, r4, r0, lsl #14
    31fc:	0b3a0e03 	bleq	e86a10 <__ccfg+0xe66a68>
    3200:	1349053b 	movtne	r0, #38203	; 0x953b
    3204:	00001802 	andeq	r1, r0, r2, lsl #16
    3208:	03003428 	movweq	r3, #1064	; 0x428
    320c:	3b0b3a08 	blcc	2d1a34 <__ccfg+0x2b1a8c>
    3210:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3214:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    3218:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    321c:	0b3b0b3a 	bleq	ec5f0c <__ccfg+0xea5f64>
    3220:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3224:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    3228:	03193f00 	tsteq	r9, #0, 30
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
    3230:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3234:	00193c13 	andseq	r3, r9, r3, lsl ip
    3238:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    323c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3240:	0b3b0b3a 	bleq	ec5f30 <__ccfg+0xea5f88>
    3244:	13491927 	movtne	r1, #39207	; 0x9927
    3248:	0000193c 	andeq	r1, r0, ip, lsr r9
    324c:	3f012e2c 	svccc	0x00012e2c
    3250:	3a0e0319 	bcc	383ebc <__ccfg+0x363f14>
    3254:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3258:	00193c19 	andseq	r3, r9, r9, lsl ip
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000002ac 	andeq	r0, r0, ip, lsr #5
       4:	000002c8 	andeq	r0, r0, r8, asr #5
    return (time * SECOND)/1000;
       8:	e0500001 	subs	r0, r0, r1
}
       c:	e3000003 	movw	r0, #3
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	023c0000 	eorseq	r0, ip, #0
      20:	024a0000 	subeq	r0, sl, #0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	00024a00 	andeq	r4, r2, r0, lsl #20
      34:	0002ac00 	andeq	sl, r2, r0, lsl #24
      38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
      44:	0000024a 	andeq	r0, r0, sl, asr #4
      48:	0000025c 	andeq	r0, r0, ip, asr r2
      4c:	60530001 	subsvs	r0, r3, r1
      50:	6a000002 	bvs	60 <g_pfnVectors+0x60>
      54:	01000002 	tsteq	r0, r2
		release;
      58:	02885300 	addeq	r5, r8, #0, 6
      5c:	02940000 	addseq	r0, r4, #0
      60:	00010000 	andeq	r0, r1, r0
      64:	00029a53 	andeq	r9, r2, r3, asr sl
      68:	0002ac00 	andeq	sl, r2, r0, lsl #24
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      78:	000000c8 	andeq	r0, r0, r8, asr #1
      7c:	000000fc 	strdeq	r0, [r0], -ip
      80:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
      84:	20000001 	andcs	r0, r0, r1
      88:	01000001 	tsteq	r0, r1
      8c:	01965000 	orrseq	r5, r6, r0
	descriptors [fd] = s;
      90:	01980000 	orrseq	r0, r8, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	0001d450 	andeq	sp, r1, r0, asr r4
	if (s == NULL)
      9c:	0001ed00 	andeq	lr, r1, r0, lsl #26
		syserror (EMALLOC, "tcv05");
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      b4:	00500001 	subseq	r0, r0, r1
	...
      c4:	01000000 	mrseq	r0, (UNDEF: 0)
      c8:	00005000 	andeq	r5, r0, r0
	...
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00000050 	andeq	r0, r0, r0, asr r0
      e0:	00000000 	andeq	r0, r0, r0
      e4:	000ab400 	andeq	fp, sl, r0, lsl #8
      e8:	000aba00 	andeq	fp, sl, r0, lsl #20
      ec:	56000100 	strpl	r0, [r0], -r0, lsl #2
      f0:	00000aea 	andeq	r0, r0, sl, ror #21
			wwait (st, 50);
      f4:	00000aee 	andeq	r0, r0, lr, ror #21
			curr += 0x1000;
      f8:	00560001 	subseq	r0, r6, r1
      fc:	00000000 	andeq	r0, r0, r0
		if (from >= EE_SIZE || upto < from)
     100:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     104:	a2000009 	andge	r0, r0, #9
			upto = EE_SIZE - 1;
     108:	01000009 	tsteq	r0, r9
     10c:	09b85200 	ldmibeq	r8!, {r9, ip, lr}
     110:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
     114:	00010000 	andeq	r0, r1, r0
     118:	00000052 	andeq	r0, r0, r2, asr r0
     11c:	00000000 	andeq	r0, r0, r0
     120:	0009a600 	andeq	sl, r9, r0, lsl #12
     124:	0009ac00 	andeq	sl, r9, r0, lsl #24
            ch = redCharacter;
     128:	53000100 	movwpl	r0, #256	; 0x100
	...
        ledFlag = 1 - ledFlag;
     134:	0000095c 	andeq	r0, r0, ip, asr r9
            offTime = greenOff;
     138:	00000966 	andeq	r0, r0, r6, ror #18
    return (time * SECOND)/1000;
     13c:	00530001 	subseq	r0, r3, r1
     140:	00000000 	andeq	r0, r0, r0
     144:	5c000000 	stcpl	0, cr0, [r0], {-0}
     148:	62000009 	andvs	r0, r0, #9
     14c:	01000009 	tsteq	r0, r9
     150:	00005300 	andeq	r5, r0, r0, lsl #6
     154:	00000000 	andeq	r0, r0, r0
        if (displayCycle)
     158:	09f20000 	ldmibeq	r2!, {}^	; <UNPREDICTABLE>
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	09fc0000 	ldmibeq	ip!, {}^	; <UNPREDICTABLE>
     160:	00010000 	andeq	r0, r1, r0
        if(onTime > 0){
     164:	00000053 	andeq	r0, r0, r3, asr r0
     168:	00000000 	andeq	r0, r0, r0
            if(On)
     16c:	0009e400 	andeq	lr, r9, r0, lsl #8
     170:	000a0e00 	andeq	r0, sl, r0, lsl #28
     174:	52000100 	andpl	r0, r0, #0, 2
	...
                leds(led,0);
     180:	00000a32 	andeq	r0, r0, r2, lsr sl
     184:	00000a3c 	andeq	r0, r0, ip, lsr sl
     188:	00530001 	subseq	r0, r3, r1
            delay(onTime, OFF_PERIOD);
     18c:	00000000 	andeq	r0, r0, r0
            delay(offTime, Check_PERIOD);
     190:	24000000 	strcs	r0, [r0], #-0
     194:	5a00000a 	bpl	1c4 <_Min_Stack_Size+0xc4>
            led = greenLed;
     198:	0100000a 	tsteq	r0, sl
            ch = greenCharacter;
     19c:	00005000 	andeq	r5, r0, r0
     1a0:	00000000 	andeq	r0, r0, r0
            onTime = greenOn;
     1a4:	08ca0000 	stmiaeq	sl, {}^	; <UNPREDICTABLE>
            offTime = greenOff;
     1a8:	08d40000 	ldmeq	r4, {}^	; <UNPREDICTABLE>
                leds(led,0);
     1ac:	00010000 	andeq	r0, r1, r0
     1b0:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	0008bc00 	andeq	fp, r8, r0, lsl #24
     1bc:	0008e600 	andeq	lr, r8, r0, lsl #12
     1c0:	52000100 	andpl	r0, r0, #0, 2
	...
        when(&On, Check_PERIOD);
     1cc:	0000091c 	andeq	r0, r0, ip, lsl r9
        release;
     1d0:	00000926 	andeq	r0, r0, r6, lsr #18
        leds(led,0);
     1d4:	00530001 	subseq	r0, r3, r1
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     1e0:	36000009 	strcc	r0, [r0], -r9
     1e4:	01000009 	tsteq	r0, r9
}
     1e8:	00005200 	andeq	r5, r0, r0, lsl #4
     1ec:	00000000 	andeq	r0, r0, r0
     1f0:	04300000 	ldrteq	r0, [r0], #-0
     1f4:	04340000 	ldrteq	r0, [r4], #-0
     1f8:	00010000 	andeq	r0, r1, r0
     1fc:	00043450 	andeq	r3, r4, r0, asr r4
     200:	00043700 	andeq	r3, r4, r0, lsl #14
     204:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     210:	0000077c 	andeq	r0, r0, ip, ror r7
     214:	0000077e 	andeq	r0, r0, lr, ror r7
     218:	00500001 	subseq	r0, r0, r1
     21c:	00000000 	andeq	r0, r0, r0
     220:	7c000000 	stcvc	0, cr0, [r0], {-0}
     224:	92000007 	andls	r0, r0, #7
     228:	01000007 	tsteq	r0, r7
     22c:	07925100 	ldreq	r5, [r2, r0, lsl #2]
     230:	07960000 	ldreq	r0, [r6, r0]
     234:	00010000 	andeq	r0, r1, r0
     238:	00079c55 	andeq	r9, r7, r5, asr ip
    word numbers[] = {0, 0, 0, 0};
     23c:	0007b200 	andeq	fp, r7, r0, lsl #4
    int numbersIndex = 0;
     240:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    word numbers[] = {0, 0, 0, 0};
     244:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	000007c0 	andeq	r0, r0, r0, asr #15
        if(settingsInput[i] == ' ') {
     24c:	c0510001 	subsgt	r0, r1, r1
     250:	ee000007 	cdp	0, 0, cr0, cr0, cr7, {0}
            numbers[numbersIndex] = number;
     254:	01000007 	tsteq	r0, r7
     258:	07f45500 	ldrbeq	r5, [r4, r0, lsl #10]!
            number = 0;
     25c:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	00010000 	andeq	r0, r1, r0
    redOn = numbers[0];
     264:	00081c55 	andeq	r1, r8, r5, asr ip
     268:	00082a00 	andeq	r2, r8, r0, lsl #20
    redOff = numbers[1];
     26c:	51000100 	mrspl	r0, (UNDEF: 16)
     270:	0000082a 	andeq	r0, r0, sl, lsr #16
    greenOn = numbers[2];
     274:	00000834 	andeq	r0, r0, r4, lsr r8
     278:	34550001 	ldrbcc	r0, [r5], #-1
    greenOff = numbers[3];
     27c:	3f000008 	svccc	0x00000008
     280:	01000008 	tsteq	r0, r8
}
     284:	083f5100 	ldmdaeq	pc!, {r8, ip, lr}	; <UNPREDICTABLE>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	08420000 	stmdaeq	r2, {}^	; <UNPREDICTABLE>
     28c:	00010000 	andeq	r0, r1, r0
            number = number * 10;
     290:	00084255 	andeq	r4, r8, r5, asr r2
            number += settingsInput[i] - 48;
     294:	00084800 	andeq	r4, r8, r0, lsl #16
     298:	51000100 	mrspl	r0, (UNDEF: 16)
     29c:	00000848 	andeq	r0, r0, r8, asr #16
     2a0:	0000085a 	andeq	r0, r0, sl, asr r8
     2a4:	5a550001 	bpl	15402b0 <__ccfg+0x1520308>
     2a8:	6c000008 	stcvs	0, cr0, [r0], {8}
fsm root {
     2ac:	01000008 	tsteq	r0, r8
     2b0:	086c5100 	stmdaeq	ip!, {r8, ip, lr}^
     2b4:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
     2b8:	00010000 	andeq	r0, r1, r0
     2bc:	00000055 	andeq	r0, r0, r5, asr r0
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	00077c00 	andeq	r7, r7, r0, lsl #24
        ser_outf(Initial, "Enter your name: ");
     2c8:	00079200 	andeq	r9, r7, r0, lsl #4
     2cc:	52000100 	andpl	r0, r0, #0, 2
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	00000792 	muleq	r0, r2, r7
     2d4:	00000798 	muleq	r0, r8, r7
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	9c560001 	mrrcls	0, 0, r0, r6, cr1
     2dc:	ac000007 	stcge	0, cr0, [r0], {7}
     2e0:	01000007 	tsteq	r0, r7
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	07b25600 	ldreq	r5, [r2, r0, lsl #12]!
     2e8:	07c00000 	strbeq	r0, [r0, r0]
        if (choice == 'A' || choice == 'a'){
     2ec:	00010000 	andeq	r0, r1, r0
     2f0:	0007c052 	andeq	ip, r7, r2, asr r0
     2f4:	0007f000 	andeq	pc, r7, r0
            proceed Adjust_Intervals;
     2f8:	56000100 	strpl	r0, [r0], -r0, lsl #2
            proceed Monitor;
     2fc:	000007f4 	strdeq	r0, [r0], -r4
        proceed Show_Menu;
     300:	0000081c 	andeq	r0, r0, ip, lsl r8
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	1c560001 	mrrcne	0, 0, r0, r6, cr1
     308:	2a000008 	bcs	330 <root+0x84>
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	01000008 	tsteq	r0, r8
     310:	082a5200 	stmdaeq	sl!, {r9, ip, lr}
     314:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
        processSettingsInput(settings);
     318:	00010000 	andeq	r0, r1, r0
        if(!blinkerRunning) {
     31c:	00083456 	andeq	r3, r8, r6, asr r4
     320:	00083f00 	andeq	r3, r8, r0, lsl #30
            blinkerCode = runfsm blinker;
     324:	52000100 	andpl	r0, r0, #0, 2
     328:	00000842 	andeq	r0, r0, r2, asr #16
            blinkerRunning = YES;
     32c:	0000084d 	andeq	r0, r0, sp, asr #16
        On = YES;
     330:	4d520001 	ldclmi	0, cr0, [r2, #-4]
     334:	5a000008 	bpl	35c <root+0xb0>
        trigger(&On);
     338:	01000008 	tsteq	r0, r8
        proceed Show_Menu;
     33c:	085a5400 	ldmdaeq	sl, {sl, ip, lr}^
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
     344:	00010000 	andeq	r0, r1, r0
     348:	00000052 	andeq	r0, r0, r2, asr r0
     34c:	00000000 	andeq	r0, r0, r0
     350:	0006f000 	andeq	pc, r6, r0
     354:	0006fe00 	andeq	pc, r6, r0, lsl #28
     358:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     368:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
        displayCycle = YES;
     36c:	00510001 	subseq	r0, r1, r1
        ser_inf(Await_Stop, "%c", &ch);
     370:	00000000 	andeq	r0, r0, r0
     374:	a0000000 	andge	r0, r0, r0
     378:	b7000006 	strlt	r0, [r0, -r6]
        if(ch == 'S' || ch == 's'){
     37c:	01000006 	tsteq	r0, r6
     380:	06da5000 	ldrbeq	r5, [sl], r0
     384:	06f00000 	ldrbteq	r0, [r0], r0
            displayCycle = NO;
     388:	00010000 	andeq	r0, r1, r0
     38c:	00000050 	andeq	r0, r0, r0, asr r0
            proceed Show_Menu;
     390:	00000000 	andeq	r0, r0, r0
        proceed Monitor;
     394:	00059600 	andeq	r9, r5, r0, lsl #12
        On = NO;
     398:	0005a600 	andeq	sl, r5, r0, lsl #12
     39c:	52000100 	andpl	r0, r0, #0, 2
        if(blinkerCode != 0x0) {
     3a0:	000005a6 	andeq	r0, r0, r6, lsr #11
            killall(blinkerCode);
     3a4:	000005ae 	andeq	r0, r0, lr, lsr #11
     3a8:	040c0005 	streq	r0, [ip], #-5
        proceed Show_Menu;
     3ac:	48400920 	stmdami	r0, {r5, r8, fp}^
     3b0:	4c000006 	stcmi	0, cr0, [r0], {6}
        leds_all(0);
     3b4:	05000006 	streq	r0, [r0, #-6]
     3b8:	20040c00 	andcs	r0, r4, r0, lsl #24
     3bc:	064c4009 	strbeq	r4, [ip], -r9
        proceed Show_Menu;
     3c0:	064e0000 	strbeq	r0, [lr], -r0
     3c4:	00010000 	andeq	r0, r1, r0
        } else if (choice == 'S' || choice == 's') {
     3c8:	00064e52 	andeq	r4, r6, r2, asr lr
            proceed Stop;
     3cc:	00065000 	andeq	r5, r6, r0
        } else if (choice == 'V' || choice == 'v') {
     3d0:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
            proceed View_Settings;
     3d4:	40092004 	andmi	r2, r9, r4
	...
     3e0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     3e4:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     3e8:	be520001 	cdplt	0, 5, cr0, cr2, cr1, {0}
     3ec:	c8000005 	stmdagt	r0, {r0, r2}
     3f0:	01000005 	tsteq	r0, r5
     3f4:	05cc5200 	strbeq	r5, [ip, #512]	; 0x200
     3f8:	05d60000 	ldrbeq	r0, [r6]
     3fc:	00010000 	andeq	r0, r1, r0
     400:	0005da52 	andeq	sp, r5, r2, asr sl
     404:	0005e600 	andeq	lr, r5, r0, lsl #12
     408:	52000100 	andpl	r0, r0, #0, 2
     40c:	00000672 	andeq	r0, r0, r2, ror r6
     410:	00000676 	andeq	r0, r0, r6, ror r6
     414:	00520001 	subseq	r0, r2, r1
     418:	00000000 	andeq	r0, r0, r0
     41c:	36000000 	strcc	r0, [r0], -r0
     420:	48000005 	stmdami	r0, {r0, r2}
     424:	01000005 	tsteq	r0, r5
     428:	00005400 	andeq	r5, r0, r0, lsl #8
     42c:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
     430:	04d00000 	ldrbeq	r0, [r0], #0
	adddevfunc (ioreq_uart_a, devnum);
     434:	04d80000 	ldrbeq	r0, [r8], #0
     438:	00010000 	andeq	r0, r1, r0
void udelay (volatile word n) {
     43c:	00000050 	andeq	r0, r0, r0, asr r0
     440:	00000000 	andeq	r0, r0, r0
	while (n) {
     444:	0004d000 	andeq	sp, r4, r0
     448:	0004d600 	andeq	sp, r4, r0, lsl #12
}
     44c:	51000100 	mrspl	r0, (UNDEF: 16)
	while (n--);
     450:	000004d6 	ldrdeq	r0, [r0], -r6
     454:	000004db 	ldrdeq	r0, [r0], -fp
     458:	00520001 	subseq	r0, r2, r1
	...
void mdelay (volatile word n) {
     468:	01000000 	mrseq	r0, (UNDEF: 0)
     46c:	00005000 	andeq	r5, r0, r0
	...
		udelay (999);
     47c:	00010000 	andeq	r0, r1, r0
     480:	00000051 	andeq	r0, r0, r1, asr r0
		n--;
     484:	00000000 	andeq	r0, r0, r0
     488:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (__pi_systat.effpdm > 1)
     49c:	00520001 	subseq	r0, r2, r1
     4a0:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
     4a4:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPowerDomainOn (d);
     4a8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b8:	00010000 	andeq	r0, r1, r0
     4bc:	00000050 	andeq	r0, r0, r0, asr r0
	__pi_systat.ondmns |= d;
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
void __pi_syserror (word ec, const char *m) {
     4d0:	00000494 	muleq	r0, r4, r4
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	000004ac 	andeq	r0, r0, ip, lsr #9
     4d8:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
  __ASM volatile ("cpsid i" : : : "memory");
     4dc:	c4000004 	strgt	r0, [r0], #-4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e0:	01000004 	tsteq	r0, r4
     4e4:	00005400 	andeq	r5, r0, r0, lsl #8
     4e8:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
     4ec:	04680000 	strbteq	r0, [r8], #-0
     4f0:	046e0000 	strbteq	r0, [lr], #-0
     4f4:	00010000 	andeq	r0, r1, r0
     4f8:	00000050 	andeq	r0, r0, r0, asr r0
	...
     508:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (1) {
     514:	000014a4 	andeq	r1, r0, r4, lsr #9
     518:	000014c2 	andeq	r1, r0, r2, asr #9
     51c:	70910002 	addsvc	r0, r1, r2
     520:	000014c2 	andeq	r1, r0, r2, asr #9
void tci_run_delay_timer () {
     524:	000014ea 	andeq	r1, r0, sl, ror #9
	setdel = __pi_mintk - __pi_old;
     528:	ee540001 	cdp	0, 5, cr0, cr4, cr1, {0}
     52c:	f6000014 			; <UNDEFINED> instruction: 0xf6000014
     530:	01000014 	tsteq	r0, r4, lsl r0
     534:	15045400 	strne	r5, [r4, #-1024]	; 0xfffffc00
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	154e0000 	strbne	r0, [lr, #-0]
     53c:	00010000 	andeq	r0, r1, r0
     540:	00155256 	andseq	r5, r5, r6, asr r2
     544:	0015ca00 	andseq	ip, r5, r0, lsl #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
}
     554:	0000150e 	andeq	r1, r0, lr, lsl #10
     558:	0000154c 	andeq	r1, r0, ip, asr #10
     55c:	52510001 	subspl	r0, r1, #1
     560:	64000015 	strvs	r0, [r0], #-21	; 0xffffffeb
	cli_aux;
     564:	01000015 	tsteq	r0, r5, lsl r0
     568:	15705100 	ldrbne	r5, [r0, #-256]!	; 0xffffff00
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	157a0000 	ldrbne	r0, [sl, #-0]!
     570:	00010000 	andeq	r0, r1, r0
     574:	00158c51 	andseq	r8, r5, r1, asr ip
     578:	00159000 	andseq	r9, r5, r0
	sti_aux;
     57c:	51000100 	mrspl	r0, (UNDEF: 16)
}
     580:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
     584:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     588:	00510001 	subseq	r0, r1, r1
void AONRTCIntHandler () {
     58c:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     594:	4c000015 	stcmi	0, cr0, [r0], {21}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	01000015 	tsteq	r0, r5, lsl r0
		if (__pi_utims [0] == 0)
     59c:	15525500 	ldrbne	r5, [r2, #-1280]	; 0xfffffb00
     5a0:	157a0000 	ldrbne	r0, [sl, #-0]!
		if (*(__pi_utims [0])) {
     5a4:	00010000 	andeq	r0, r1, r0
     5a8:	00158c55 	andseq	r8, r5, r5, asr ip
			(*(__pi_utims [0]))--;
     5ac:	00159000 	andseq	r9, r5, r0
		if (__pi_utims [1] == 0)
     5b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		if (*(__pi_utims [1])) {
     5b4:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
			aux_timer_inactive = 0;
     5b8:	000015ca 	andeq	r1, r0, sl, asr #11
			(*(__pi_utims [1]))--;
     5bc:	00550001 	subseq	r0, r5, r1
		if (__pi_utims [2] == 0)
     5c0:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
     5c4:	80000000 	andhi	r0, r0, r0
			(*(__pi_utims [2]))--;
     5c8:	8c000015 	stchi	0, cr0, [r0], {21}
		if (__pi_utims [3] != 0) {
     5cc:	01000015 	tsteq	r0, r5, lsl r0
			if (*(__pi_utims [3])) {
     5d0:	15905500 	ldrne	r5, [r0, #1280]	; 0x500
				aux_timer_inactive = 0;
     5d4:	15aa0000 	strne	r0, [sl, #0]!
				(*(__pi_utims [3]))--;
     5d8:	00010000 	andeq	r0, r1, r0
	if (__pi_systat.ledsts) {
     5dc:	0015ae55 	andseq	sl, r5, r5, asr lr
     5e0:	0015b000 	andseq	fp, r5, r0
		if (__pi_systat.ledblc++ == 0) {
     5e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			if (__pi_systat.ledblk) {
     5f0:	00001534 	andeq	r1, r0, r4, lsr r5
     5f4:	0000154c 	andeq	r1, r0, ip, asr #10
     5f8:	00540001 	subseq	r0, r4, r1
     5fc:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     600:	7a000000 	bvc	608 <AONRTCIntHandler+0x7c>
     604:	8c000015 	stchi	0, cr0, [r0], {21}
     608:	01000015 	tsteq	r0, r5, lsl r0
				if (__pi_systat.ledsts & 0x4)
     60c:	15905400 	ldrne	r5, [r0, #1024]	; 0x400
				__pi_systat.ledblk = 0;
     610:	15a40000 	strne	r0, [r4, #0]!
     614:	00010000 	andeq	r0, r1, r0
			if (__pi_systat.fstblk)
     618:	0015a454 	andseq	sl, r5, r4, asr r4
     61c:	0015b000 	andseq	fp, r5, r0
				__pi_systat.ledblc = 200;
     620:	53000100 	movwpl	r0, #256	; 0x100
	...
		__pi_new += setdel;
     62c:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
     630:	000015ca 	andeq	r1, r0, sl, asr #11
		setdel = 0;
     634:	00510001 	subseq	r0, r1, r1
		RISE_N_SHINE;
     638:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
     63c:	9c000000 	stcls	0, cr0, [r0], {-0}
		RISE_N_SHINE;
     640:	a800000f 	stmdage	r0, {r0, r1, r2, r3}
     644:	0100000f 	tsteq	r0, pc
		aux_timer_inactive = 1;
     648:	00005000 	andeq	r5, r0, r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     658:	00010000 	andeq	r0, r1, r0
				if (__pi_systat.ledsts & 0x2)
     65c:	00000050 	andeq	r0, r0, r0, asr r0
     660:	00000000 	andeq	r0, r0, r0
     664:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			cli_aux;
     678:	00510001 	subseq	r0, r1, r1
     67c:	00000000 	andeq	r0, r0, r0
     680:	01000000 	mrseq	r0, (UNDEF: 0)
     684:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     694:	00010000 	andeq	r0, r1, r0
     698:	00000052 	andeq	r0, r0, r2, asr r0
     69c:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
     6a0:	52000100 	andpl	r0, r0, #0, 2
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	00530001 	subseq	r0, r3, r1
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	00005300 	andeq	r5, r0, r0, lsl #6
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	00000000 	andeq	r0, r0, r0
	return NO;
     6c8:	00010000 	andeq	r0, r1, r0
			setdel = 0;
     6cc:	00000053 	andeq	r0, r0, r3, asr r0
	...
		sti_tim;
     6dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		return YES;
     6e8:	0000148c 	andeq	r1, r0, ip, lsl #9
     6ec:	00001494 	muleq	r0, r4, r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	00500001 	subseq	r0, r0, r1
	UARTDisable (UART0_BASE);
     6f4:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	b0000000 	andlt	r0, r0, r0
	UARTDisable (UART0_BASE);
     6fc:	b6000013 			; <UNDEFINED> instruction: 0xb6000013
	UARTConfigSetExpClk (UART0_BASE,
     700:	01000013 	tsteq	r0, r3, lsl r0
     704:	00005000 	andeq	r5, r0, r0
     708:	00000000 	andeq	r0, r0, r0
     70c:	13c60000 	bicne	r0, r6, #0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	13f20000 	mvnsne	r0, #0
     714:	00010000 	andeq	r0, r1, r0
     718:	0013f254 	andseq	pc, r3, r4, asr r2	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	0013f800 	andseq	pc, r3, r0, lsl #16
     720:	52000100 	andpl	r0, r0, #0, 2
     724:	000013f8 	strdeq	r1, [r0], -r8
	urates [0] = rate;
     728:	00001440 	andeq	r1, r0, r0, asr #8
}
     72c:	40540001 	subsmi	r0, r4, r1
     730:	58000014 	stmdapl	r0, {r2, r4}
     734:	01000014 	tsteq	r0, r4, lsl r0
     738:	00005000 	andeq	r5, r0, r0
     73c:	00000000 	andeq	r0, r0, r0
     740:	13f20000 	mvnsne	r0, #0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	13f60000 	mvnsne	r0, #0
     748:	00010000 	andeq	r0, r1, r0
     74c:	0013f654 	andseq	pc, r3, r4, asr r6	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	0013f800 	andseq	pc, r3, r0, lsl #16
     754:	53000100 	movwpl	r0, #256	; 0x100
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	0000140e 	andeq	r1, r0, lr, lsl #8
     75c:	00001417 	andeq	r1, r0, r7, lsl r4
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	00500001 	subseq	r0, r0, r1
	...
     76c:	10000014 	andne	r0, r0, r4, lsl r0
     770:	01000014 	tsteq	r0, r4, lsl r0
     774:	00005300 	andeq	r5, r0, r0, lsl #6
     778:	00000000 	andeq	r0, r0, r0
	switch (operation) {
     77c:	13c60000 	bicne	r0, r6, #0
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	13e40000 	mvnne	r0, #0
     784:	00010000 	andeq	r0, r1, r0
     788:	0013ea50 	andseq	lr, r3, r0, asr sl
     78c:	00140a00 	andseq	r0, r4, r0, lsl #20
     790:	50000100 	andpl	r0, r0, r0, lsl #2
				*buf++ = uart_a_read;
     794:	0000140a 	andeq	r1, r0, sl, lsl #8
     798:	00001414 	andeq	r1, r0, r4, lsl r4
			while (len && uart_a_char_available) {
     79c:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
			if (len != operation) {
     7a8:	00000f1c 	andeq	r0, r0, ip, lsl pc
}
     7ac:	00000f4a 	andeq	r0, r0, sl, asr #30
     7b0:	58500001 	ldmdapl	r0, {r0}^
			uart_a_disable_int;
     7b4:	9c00000f 	stcls	0, cr0, [r0], {15}
			if (uart_a_char_available) {
     7b8:	0100000f 	tsteq	r0, pc
				*buf++ = uart_a_read;
     7bc:	00005000 	andeq	r5, r0, r0
			uart_a_disable_int;
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	0f240000 	svceq	0x00240000
			if (uart_a_char_available) {
     7c8:	0f300000 	svceq	0x00300000
     7cc:	00010000 	andeq	r0, r1, r0
				uart_a_enable_int;
     7d0:	000f3053 	andeq	r3, pc, r3, asr r0	; <UNPREDICTABLE>
     7d4:	000f3200 	andeq	r3, pc, r0, lsl #4
				goto Redo_rx;
     7d8:	70000200 	andvc	r0, r0, r0, lsl #4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	000f3600 	andeq	r3, pc, r0, lsl #12
     7e0:	000f8e00 	andeq	r8, pc, r0, lsl #28
			return -2;
     7e4:	53000100 	movwpl	r0, #256	; 0x100
     7e8:	00000f8e 	andeq	r0, r0, lr, lsl #31
				uart_a_write (*buf);
     7ec:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
     7f0:	00730002 	rsbseq	r0, r3, r2
			while (len && uart_a_room_in_tx) {
     7f4:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
     7f8:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     7fc:	00530001 	subseq	r0, r3, r1
			if (len != operation) {
     800:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     804:	24000000 	strcs	r0, [r0], #-0
     808:	2600000f 	strcs	r0, [r0], -pc
			if (uart_a_room_in_tx) {
     80c:	0100000f 	tsteq	r0, pc
     810:	0f365200 	svceq	0x00365200
				uart_a_enable_int;
     814:	0f760000 	svceq	0x00760000
     818:	00010000 	andeq	r0, r1, r0
				*buf++ = uart_a_read;
     81c:	000f8e52 	andeq	r8, pc, r2, asr lr	; <UNPREDICTABLE>
			if (uart_a_room_in_tx) {
     820:	000f9200 	andeq	r9, pc, r0, lsl #4
				uart_a_write (*buf);
     824:	53000100 	movwpl	r0, #256	; 0x100
     828:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     830:	00520001 	subseq	r0, r2, r1
			uart_a_enable_int;
     834:	00000000 	andeq	r0, r0, r0
     838:	80000000 	andhi	r0, r0, r0
     83c:	88000012 	stmdahi	r0, {r1, r4}
			return 0;
     840:	01000012 	tsteq	r0, r2, lsl r0
			if (len == UART_CNTRL_SETRATE) {
     844:	128c5100 	addne	r5, ip, #0, 2
				if (__pi_uart_setrate (*((word*)buf),
     848:	128e0000 	addne	r0, lr, #0
     84c:	00010000 	andeq	r0, r1, r0
     850:	00000051 	andeq	r0, r0, r1, asr r0
				syserror (EREQPAR, "uar");
     854:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     858:	0011d400 	andseq	sp, r1, r0, lsl #8
			if (len == UART_CNTRL_GETRATE) {
     85c:	0011f000 	andseq	pc, r1, r0
				return 1;
     860:	50000100 	andpl	r0, r0, r0, lsl #2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	000011f6 	strdeq	r1, [r0], -r6
			syserror (ENOOPER, "uai");
     868:	00001202 	andeq	r1, r0, r2, lsl #4
     86c:	00500001 	subseq	r0, r0, r1
     870:	00000000 	andeq	r0, r0, r0
     874:	d4000000 	strle	r0, [r0], #-0
     878:	f2000011 	vqadd.s8	d0, d0, d1
     87c:	01000011 	tsteq	r0, r1, lsl r0
     880:	11f65100 	mvnsne	r5, r0, lsl #2
     884:	12000000 	andne	r0, r0, #0
     888:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	00000051 	andeq	r0, r0, r1, asr r0
void UART0IntHandler () {
     890:	00000000 	andeq	r0, r0, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	0011d400 	andseq	sp, r1, r0, lsl #8
     898:	0011f500 	andseq	pc, r1, r0, lsl #10
     89c:	52000100 	andpl	r0, r0, #0, 2
     8a0:	000011f6 	strdeq	r1, [r0], -r6
     8a4:	000011fe 	strdeq	r1, [r0], -lr
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	00520001 	subseq	r0, r2, r1
     8ac:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     8b0:	d4000000 	strle	r0, [r0], #-0
     8b4:	ec000011 	stc	0, cr0, [r0], {17}
		i_trigger (devevent (UART_A, READ));
     8b8:	01000011 	tsteq	r0, r1, lsl r0
     8bc:	11ec5300 	mvnne	r5, r0, lsl #6
     8c0:	12700000 	rsbsne	r0, r0, #0
     8c4:	00010000 	andeq	r0, r1, r0
     8c8:	00000055 	andeq	r0, r0, r5, asr r0
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	0011d400 	andseq	sp, r1, r0, lsl #8
     8d4:	00125400 	andseq	r5, r2, r0, lsl #8
     8d8:	91000200 	mrsls	r0, R8_usr
     8dc:	00125400 	andseq	r5, r2, r0, lsl #8
     8e0:	00127000 	andseq	r7, r2, r0
     8e4:	91000200 	mrsls	r0, R8_usr
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8f0:	00120400 	andseq	r0, r2, r0, lsl #8
		i_trigger (devevent (UART_A, WRITE));
     8f4:	00121a00 	andseq	r1, r2, r0, lsl #20
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	50000100 	andpl	r0, r0, r0, lsl #2
     8fc:	00001222 	andeq	r1, r0, r2, lsr #4
		RISE_N_SHINE;
     900:	00001234 	andeq	r1, r0, r4, lsr r2
     904:	44500001 	ldrbmi	r0, [r0], #-1
     908:	4c000012 	stcmi	0, cr0, [r0], {18}
		i_trigger (devevent (UART_A, WRITE));
     90c:	01000012 	tsteq	r0, r2, lsl r0
     910:	12545000 	subsne	r5, r4, #0
     914:	125c0000 	subsne	r0, ip, #0
     918:	00010000 	andeq	r0, r1, r0
     91c:	00000050 	andeq	r0, r0, r0, asr r0
     920:	00000000 	andeq	r0, r0, r0
     924:	0011b000 	andseq	fp, r1, r0
     928:	0011b600 	andseq	fp, r1, r0, lsl #12
     92c:	50000100 	andpl	r0, r0, r0, lsl #2
     930:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     934:	000011c4 	andeq	r1, r0, r4, asr #3
}
     938:	c8500001 	ldmdagt	r0, {r0}^
     93c:	d4000011 	strle	r0, [r0], #-17	; 0xffffffef
     940:	01000011 	tsteq	r0, r1, lsl r0
     944:	00005000 	andeq	r5, r0, r0
     948:	00000000 	andeq	r0, r0, r0
void __buttons_setirq (int val) {
     94c:	11b00000 	movsne	r0, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	11b80000 			; <UNDEFINED> instruction: 0x11b80000
     954:	00010000 	andeq	r0, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	0011bc51 	andseq	fp, r1, r1, asr ip
     95c:	0011c600 	andseq	ip, r1, r0, lsl #12
     960:	51000100 	mrspl	r0, (UNDEF: 16)
		bn = BUTTON_GPIO (__button_list [i]);
     964:	000011c8 	andeq	r1, r0, r8, asr #3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	000011d4 	ldrdeq	r1, [r0], -r4
     96c:	00510001 	subseq	r0, r1, r1
	...
     97c:	01000000 	mrseq	r0, (UNDEF: 0)
}
     980:	00005000 	andeq	r5, r0, r0
     984:	00000000 	andeq	r0, r0, r0
     988:	00010000 	andeq	r0, r1, r0
     98c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	52000100 	andpl	r0, r0, #0, 2
	...
     9a8:	0000119a 	muleq	r0, sl, r1
     9ac:	0000119c 	muleq	r0, ip, r1
     9b0:	00500001 	subseq	r0, r0, r1
     9b4:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	9a000000 	bls	9c0 <__pinlist_setirq+0x30>
}
     9bc:	a4000011 	strge	r0, [r0], #-17	; 0xffffffef
     9c0:	01000011 	tsteq	r0, r1, lsl r0
     9c4:	11a85100 			; <UNDEFINED> instruction: 0x11a85100
     9c8:	11ae0000 			; <UNDEFINED> instruction: 0x11ae0000
void GPIOIntHandler () {
     9cc:	00010000 	andeq	r0, r1, r0
if (buttons_int) {
     9d0:	00000051 	andeq	r0, r0, r1, asr r0
     9d4:	00000000 	andeq	r0, r0, r0
	buttons_disable ();
     9d8:	00119a00 	andseq	r9, r1, r0, lsl #20
     9dc:	00119e00 	andseq	r9, r1, r0, lsl #28
	i_trigger ((aword)&__button_list);
     9e0:	52000100 	andpl	r0, r0, #0, 2
	...
     9f4:	00500001 	subseq	r0, r0, r1
	...
     a04:	01000000 	mrseq	r0, (UNDEF: 0)
     a08:	00005100 	andeq	r5, r0, r0, lsl #2
	...
if (pin_sensor_int) {
     a18:	00010000 	andeq	r0, r1, r0
     a1c:	00000050 	andeq	r0, r0, r0, asr r0
	i_trigger ((aword)(&__input_pins));
     a20:	00000000 	andeq	r0, r0, r0
     a24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a38:	00510001 	subseq	r0, r1, r1
	...
     a48:	01000000 	mrseq	r0, (UNDEF: 0)
	__pinsen_disable_and_clear;
     a4c:	00005000 	andeq	r5, r0, r0
	RISE_N_SHINE;
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00010000 	andeq	r0, r1, r0
     a58:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
     a68:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	00520001 	subseq	r0, r2, r1
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a8c:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	00005000 	andeq	r5, r0, r0
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	00010000 	andeq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	00000051 	andeq	r0, r0, r1, asr r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	0000118c 	andeq	r1, r0, ip, lsl #3
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	00001190 	muleq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac0:	90500001 	subsls	r0, r0, r1
     ac4:	9a000011 	bls	b10 <system_init+0xa0>
     ac8:	01000011 	tsteq	r0, r1, lsl r0
     acc:	00005300 	andeq	r5, r0, r0, lsl #6
		if (port_confs [i] & 0x80)
     ad0:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	11900000 	orrsne	r0, r0, r0
     ad8:	119a0000 	orrsne	r0, sl, r0
		if (port_confs [i] & 0x40)
     adc:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	00000050 	andeq	r0, r0, r0, asr r0
	...
     af0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	all_leds_blink;
     afc:	00510001 	subseq	r0, r1, r1
	...
     b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	00005200 	andeq	r5, r0, r0, lsl #4
     b14:	00000000 	andeq	r0, r0, r0
     b18:	00010000 	andeq	r0, r1, r0
     b1c:	00000052 	andeq	r0, r0, r2, asr r0
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b2c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	IntEnable (INT_AON_RTC_COMB);
     b38:	00001168 	andeq	r1, r0, r8, ror #2
	__pi_malloc_init ();
     b3c:	00001170 	andeq	r1, r0, r0, ror r1
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	72500001 	subsvc	r0, r0, #1
     b44:	76000011 			; <UNDEFINED> instruction: 0x76000011
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	01000011 	tsteq	r0, r1, lsl r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	11765000 	cmnne	r6, r0
     b50:	118c0000 	orrne	r0, ip, r0
     b54:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	00000053 	andeq	r0, r0, r3, asr r0
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	reinit_uart ();
     b74:	00500001 	subseq	r0, r0, r1
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	00005000 	andeq	r5, r0, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	00010000 	andeq	r0, r1, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	00000050 	andeq	r0, r0, r0, asr r0
     b98:	00000000 	andeq	r0, r0, r0
			devinit [i] . init (devinit [i] . param);
     b9c:	00135800 	andseq	r5, r3, r0, lsl #16
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	00136a00 	andseq	r6, r3, r0, lsl #20
     ba4:	50000100 	andpl	r0, r0, r0, lsl #2
     ba8:	0000136a 	andeq	r1, r0, sl, ror #6
	IntEnable (INT_UART0_COMB);
     bac:	000013a6 	andeq	r1, r0, r6, lsr #7
     bb0:	00570001 	subseq	r0, r7, r1
}
     bb4:	00000000 	andeq	r0, r0, r0
	tci_run_auxiliary_timer ();
     bb8:	6a000000 	bvs	bc0 <system_init+0x150>
		diag ("");
     bbc:	a6000013 			; <UNDEFINED> instruction: 0xa6000013
     bc0:	01000013 	tsteq	r0, r3, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	00005600 	andeq	r5, r0, r0, lsl #12
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	00000000 	andeq	r0, r0, r0
		diag ("Leftover RAM: %d bytes",
     bcc:	136a0000 	cmnne	sl, #0
     bd0:	13710000 	cmnne	r1, #0
     bd4:	00010000 	andeq	r0, r1, r0
     bd8:	00137250 	andseq	r7, r3, r0, asr r2
     bdc:	00139300 	andseq	r9, r3, r0, lsl #6
     be0:	50000100 	andpl	r0, r0, r0, lsl #2
     be4:	00001394 	muleq	r0, r4, r3
     be8:	00001396 	muleq	r0, r6, r3
     bec:	9c580001 	mrrcls	0, 0, r0, r8, cr1
     bf0:	b0000013 	andlt	r0, r0, r3, lsl r0
     bf4:	01000013 	tsteq	r0, r3, lsl r0
     bf8:	00005000 	andeq	r5, r0, r0
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	136a0000 	cmnne	sl, #0
     c04:	13960000 	orrsne	r0, r6, #0
     c08:	00010000 	andeq	r0, r1, r0
     c0c:	00139c54 	andseq	r9, r3, r4, asr ip
     c10:	0013a600 	andseq	sl, r3, r0, lsl #12
     c14:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     c20:	0000137c 	andeq	r1, r0, ip, ror r3
     c24:	00001396 	muleq	r0, r6, r3
__attribute__ ((noreturn)) void __pi_release () {
     c28:	9c580001 	mrrcls	0, 0, r0, r8, cr1
     c2c:	a2000013 	andge	r0, r0, #19
     c30:	01000013 	tsteq	r0, r3, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c34:	00005800 	andeq	r5, r0, r0, lsl #16
	check_stack_overflow;
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	13080000 	movwne	r0, #32768	; 0x8000
     c40:	13100000 	tstne	r0, #0
	update_n_wake (MAX_WORD, NO);
     c44:	00010000 	andeq	r0, r1, r0
     c48:	00131050 	andseq	r1, r3, r0, asr r0
     c4c:	00131a00 	andseq	r1, r3, r0, lsl #20
	for_all_tasks (__pi_curr) {
     c50:	50000100 	andpl	r0, r0, r0, lsl #2
     c54:	00001320 	andeq	r1, r0, r0, lsr #6
     c58:	0000132c 	andeq	r1, r0, ip, lsr #6
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	40500001 	subsmi	r0, r0, r1
	__SLEEP;
     c60:	4a000013 	bmi	cb4 <__pi_release+0x8c>
     c64:	01000013 	tsteq	r0, r3, lsl r0
     c68:	00005000 	andeq	r5, r0, r0
     c6c:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
     c70:	13160000 	tstne	r6, #0
     c74:	13480000 	movtne	r0, #32768	; 0x8000
	switch (__pi_systat.effpdm) {
     c78:	00010000 	andeq	r0, r1, r0
     c7c:	00134854 	andseq	r4, r3, r4, asr r8
     c80:	00134a00 	andseq	r4, r3, r0, lsl #20
     c84:	52000100 	andpl	r0, r0, #0, 2
			__WFI ();
     c88:	0000134a 	andeq	r1, r0, sl, asr #6
     c8c:	0000134c 	andeq	r1, r0, ip, asr #6
     c90:	00540001 	subseq	r0, r4, r1
	check_stack_overflow;
     c94:	00000000 	andeq	r0, r0, r0
     c98:	e6000000 	str	r0, [r0], -r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	1800000e 	stmdane	r0, {r1, r2, r3}
     ca0:	0100000f 	tsteq	r0, pc
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	00005600 	andeq	r5, r0, r0, lsl #12
			goto Redo;
     ca8:	00000000 	andeq	r0, r0, r0
	for_all_tasks (__pi_curr) {
     cac:	0efc0000 	cdpeq	0, 15, cr0, cr12, cr0, {0}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	0f060000 	svceq	0x00060000
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	00010000 	andeq	r0, r1, r0
     cb8:	00000053 	andeq	r0, r0, r3, asr r0
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd4:	00540001 	subseq	r0, r4, r1
	...
}
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	00005000 	andeq	r5, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	00010000 	andeq	r0, r1, r0
     cf4:	00000050 	andeq	r0, r0, r0, asr r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	00113000 	andseq	r3, r1, r0
     d00:	00114900 	andseq	r4, r1, r0, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d10:	00001130 	andeq	r1, r0, r0, lsr r1
     d14:	00001146 	andeq	r1, r0, r6, asr #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	00510001 	subseq	r0, r1, r1
     d1c:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	0c000000 	stceq	0, cr0, [r0], {-0}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	20000011 	andcs	r0, r0, r1, lsl r0
     d28:	01000011 	tsteq	r0, r1, lsl r0
     d2c:	11205000 			; <UNDEFINED> instruction: 0x11205000
     d30:	11240000 			; <UNDEFINED> instruction: 0x11240000
     d34:	00010000 	andeq	r0, r1, r0
			SysCtrlSetRechargeBeforePowerDown
     d38:	00112854 	andseq	r2, r1, r4, asr r8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3c:	00113000 	andseq	r3, r1, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d4c:	0000110c 	andeq	r1, r0, ip, lsl #2
     d50:	00001123 	andeq	r1, r0, r3, lsr #2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d54:	28510001 	ldmdacs	r1, {r0}^
     d58:	30000011 	andcc	r0, r0, r1, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	01000011 	tsteq	r0, r1, lsl r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	00005100 	andeq	r5, r0, r0, lsl #2
     d64:	00000000 	andeq	r0, r0, r0
     d68:	11140000 	tstne	r4, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6c:	11230000 			; <UNDEFINED> instruction: 0x11230000
			while (!(AONWUCPowerStatusGet () &
     d70:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	00112853 	andseq	r2, r1, r3, asr r8
     d78:	00113000 	andseq	r3, r1, r0
     d7c:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	00500001 	subseq	r0, r0, r1
	...
			SysCtrlAdjustRechargeAfterPowerDown ();
     da0:	01000000 	mrseq	r0, (UNDEF: 0)
			reinit_uart ();
     da4:	00005100 	andeq	r5, r0, r0, lsl #2
     da8:	00000000 	andeq	r0, r0, r0
     dac:	00010000 	andeq	r0, r1, r0
}
     db0:	00000055 	andeq	r0, r0, r5, asr r0
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc0:	52000100 	andpl	r0, r0, #0, 2
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dcc:	00520001 	subseq	r0, r2, r1
     dd0:	00000000 	andeq	r0, r0, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	ec000000 	stc	0, cr0, [r0], {-0}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	f6000010 			; <UNDEFINED> instruction: 0xf6000010
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	01000010 	tsteq	r0, r0, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	00005300 	andeq	r5, r0, r0, lsl #6
     de4:	00000000 	andeq	r0, r0, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de8:	10900000 	addsne	r0, r0, r0
     dec:	10960000 	addsne	r0, r6, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	00010000 	andeq	r0, r1, r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	00000050 	andeq	r0, r0, r0, asr r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	00145800 	andseq	r5, r4, r0, lsl #16
			PRCMPowerDomainOff (
     e00:	00145e00 	andseq	r5, r4, r0, lsl #28
     e04:	50000100 	andpl	r0, r0, r0, lsl #2
	__SLEEP;
     e08:	0000145e 	andeq	r1, r0, lr, asr r4
     e0c:	0000148c 	andeq	r1, r0, ip, lsl #9
  __ASM volatile ("cpsie i" : : : "memory");
     e10:	00550001 	subseq	r0, r5, r1
	goto Redo;
     e14:	00000000 	andeq	r0, r0, r0
     e18:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     e1c:	63000014 	movwvs	r0, #20
     e20:	01000014 	tsteq	r0, r4, lsl r0
     e24:	14635100 	strbtne	r5, [r3], #-256	; 0xffffff00
     e28:	148c0000 	strne	r0, [ip], #0
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	00000054 	andeq	r0, r0, r4, asr r0
     e34:	00000000 	andeq	r0, r0, r0
     e38:	00147400 	andseq	r7, r4, r0, lsl #8
     e3c:	00147800 	andseq	r7, r4, r0, lsl #16
     e40:	53000100 	movwpl	r0, #256	; 0x100
     e44:	0000147a 	andeq	r1, r0, sl, ror r4
     e48:	0000147e 	andeq	r1, r0, lr, ror r4
     e4c:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
     e50:	8c000014 	stchi	0, cr0, [r0], {20}
     e54:	01000014 	tsteq	r0, r4, lsl r0
     e58:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     e68:	00010000 	andeq	r0, r1, r0
     e6c:	00000050 	andeq	r0, r0, r0, asr r0
	...
     e7c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	00500001 	subseq	r0, r0, r1
	system_init ();
     e94:	00000000 	andeq	r0, r0, r0
	tcv_init ();
     e98:	01000000 	mrseq	r0, (UNDEF: 0)
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	00005000 	andeq	r5, r0, r0
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     eac:	00010000 	andeq	r0, r1, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	00000053 	andeq	r0, r0, r3, asr r0
     eb4:	00000000 	andeq	r0, r0, r0
	delay (16, 0);
     eb8:	53000100 	movwpl	r0, #256	; 0x100
	...
	__pi_release ();
     ecc:	00500001 	subseq	r0, r0, r1
     ed0:	00000000 	andeq	r0, r0, r0
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005300 	andeq	r5, r0, r0, lsl #6
     edc:	00000000 	andeq	r0, r0, r0
static void killev (__pi_pcb_t *pid) {
     ee0:	00010000 	andeq	r0, r1, r0
	wfun = (aword)(pid->code);
     ee4:	00000053 	andeq	r0, r0, r3, asr r0
	...
		for (j = 0; j < nevents (i); j++) {
     ef4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == (aword)pid
     f00:	00500001 	subseq	r0, r0, r1
	...
				wakeupev (i, j);
     f10:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
     f14:	00005000 	andeq	r5, r0, r0
}
     f18:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	00010000 	andeq	r0, r1, r0
static void qfree (aword *ch) {
     f20:	00000053 	andeq	r0, r0, r3, asr r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	00000000 	andeq	r0, r0, r0
	cc = (aword*)(mpools + MA_NP);
     f28:	53000100 	movwpl	r0, #256	; 0x100
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f3c:	00500001 	subseq	r0, r0, r1
     f40:	00000000 	andeq	r0, r0, r0
			m_setnextp (cc, m_nextp (chunk));
     f44:	01000000 	mrseq	r0, (UNDEF: 0)
			m_size (chunk) += m_hdrlen + m_size (ch);
     f48:	00005000 	andeq	r5, r0, r0
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	00010000 	andeq	r0, r1, r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	00000053 	andeq	r0, r0, r3, asr r0
     f60:	00000000 	andeq	r0, r0, r0
     f64:	000fc400 	andeq	ip, pc, r0, lsl #8
			m_setnextp (cc, m_nextp (chunk));
     f68:	000fca00 	andeq	ip, pc, r0, lsl #20
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f78:	00000fc4 	andeq	r0, r0, r4, asr #31
     f7c:	00000fcd 	andeq	r0, r0, sp, asr #31
     f80:	00510001 	subseq	r0, r1, r1
			if (m_size (chunk) >= m_size (ch))
     f84:	00000000 	andeq	r0, r0, r0
     f88:	d2000000 	andle	r0, r0, #0
     f8c:	1000000f 	andne	r0, r0, pc
		chunk = m_nextp (chunk))
     f90:	01000010 	tsteq	r0, r0, lsl r0
     f94:	10145400 	andsne	r5, r4, r0, lsl #8
     f98:	10620000 	rsbne	r0, r2, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	00010000 	andeq	r0, r1, r0
	diag_wait (a);
     fa0:	00106454 	andseq	r6, r0, r4, asr r4
	diag_wchar (c, a);
     fa4:	00106e00 	andseq	r6, r0, r0, lsl #28
     fa8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	syserror (ESTATE, "state");
     fb4:	0000100a 	andeq	r1, r0, sl
     fb8:	0000100c 	andeq	r1, r0, ip
     fbc:	14500001 	ldrbne	r0, [r0], #-1
     fc0:	64000010 	strvs	r0, [r0], #-16
void update_n_wake (word min, Boolean force) {
     fc4:	01000010 	tsteq	r0, r0, lsl r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	00005000 	andeq	r5, r0, r0
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	10a40000 	adcne	r0, r4, r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	10b80000 	adcsne	r0, r8, r0
     fd8:	00010000 	andeq	r0, r1, r0
     fdc:	0010be50 	andseq	fp, r0, r0, asr lr
     fe0:	0010d800 	andseq	sp, r0, r0, lsl #16
     fe4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ff0:	000010a4 	andeq	r1, r0, r4, lsr #1
     ff4:	000010ba 	strheq	r1, [r0], -sl
     ff8:	be510001 	cdplt	0, 5, cr0, cr1, cr1, {0}
     ffc:	c4000010 	strgt	r0, [r0], #-16
    1000:	01000010 	tsteq	r0, r0, lsl r0
    1004:	00005100 	andeq	r5, r0, r0, lsl #2
		for_all_tasks (i) {
    1008:	00000000 	andeq	r0, r0, r0
	__pi_mintk = znew + min;
    100c:	10b60000 	adcsne	r0, r6, r0
    1010:	10b80000 	adcsne	r0, r8, r0
			if (!twaiting (i))
    1014:	00010000 	andeq	r0, r1, r0
    1018:	00000050 	andeq	r0, r0, r0, asr r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101c:	00000000 	andeq	r0, r0, r0
    1020:	0010b600 	andseq	fp, r0, r0, lsl #12
    1024:	0010ba00 	andseq	fp, r0, r0, lsl #20
    1028:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1034:	000012c0 	andeq	r1, r0, r0, asr #5
    1038:	000012ce 	andeq	r1, r0, lr, asr #5
    103c:	d4500001 	ldrble	r0, [r0], #-1
    1040:	e7000012 	smlad	r0, r2, r0, r0
    1044:	01000012 	tsteq	r0, r2, lsl r0
    1048:	00005000 	andeq	r5, r0, r0
				wakeuptm (i);
    104c:	00000000 	andeq	r0, r0, r0
    1050:	12cc0000 	sbcne	r0, ip, #0
		for_all_tasks (i) {
    1054:	12ce0000 	sbcne	r0, lr, #0
				d = i->Timer - znew;
    1058:	00010000 	andeq	r0, r1, r0
    105c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if ((word)(__pi_mintk - znew) < min) 
    106c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	TCI_RUN_DELAY_TIMER;
    1078:	00500001 	subseq	r0, r0, r1
	...
}
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
    108c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	release;
    109c:	00010000 	andeq	r0, r1, r0
    10a0:	00000054 	andeq	r0, r0, r4, asr r0
void __pi_wait (aword event, word state) {
    10a4:	00000000 	andeq	r0, r0, r0
	sint j = nevents (__pi_curr);
    10a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		syserror (ENEVENTS, "sw");
    10bc:	00500001 	subseq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
    10c0:	00000000 	andeq	r0, r0, r0
	incwait (__pi_curr);
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
	setestate (__pi_curr->Events [j], state, event);
    10c8:	00005000 	andeq	r5, r0, r0
}
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00020000 	andeq	r0, r2, r0
    10d4:	00000075 	andeq	r0, r0, r5, ror r0
	...
		for (j = 0; j < nevents (i); j++) {
    10e4:	00010000 	andeq	r0, r1, r0
    10e8:	00000050 	andeq	r0, r0, r0, asr r0
    10ec:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == event) {
    10f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i) {
    1104:	00540001 	subseq	r0, r4, r1
}
    1108:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
    1110:	00005000 	andeq	r5, r0, r0
	...
			__pi_wait (pid, st);
    1120:	00010000 	andeq	r0, r1, r0
}
    1124:	00000050 	andeq	r0, r0, r0, asr r0
	for_all_tasks (i) {
    1128:	00000000 	andeq	r0, r0, r0
    112c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	settstate (__pi_curr, state);
    1140:	00530001 	subseq	r0, r3, r1
	...
	__pi_curr->Timer = __pi_old + d;
    1150:	01000000 	mrseq	r0, (UNDEF: 0)
	inctimer (__pi_curr);
    1154:	00005000 	andeq	r5, r0, r0
    1158:	00000000 	andeq	r0, r0, r0
    115c:	00020000 	andeq	r0, r2, r0
}
    1160:	00000073 	andeq	r0, r0, r3, ror r0
	...
		return (int) __pi_curr;
    1170:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i)
    1174:	00000050 	andeq	r0, r0, r0, asr r0
}
    1178:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
    117c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	00510001 	subseq	r0, r1, r1
}
    1194:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	01000000 	mrseq	r0, (UNDEF: 0)
	while (n--)
    119c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		*dest++ = *src++;
    11ac:	00010000 	andeq	r0, r1, r0
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	00000053 	andeq	r0, r0, r3, asr r0
		syserror (EREQPAR, "addv");
    11b4:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "addv");
    11b8:	53000100 	movwpl	r0, #256	; 0x100
	...
}
    11cc:	00500001 	subseq	r0, r0, r1
    11d0:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	01000000 	mrseq	r0, (UNDEF: 0)
    11d8:	00005000 	andeq	r5, r0, r0
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00020000 	andeq	r0, r2, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e4:	00000073 	andeq	r0, r0, r3, ror r0
	...
		syserror (ENODEVICE, "io");
    11f4:	00010000 	andeq	r0, r1, r0
	if (len == 0)
    11f8:	00000050 	andeq	r0, r0, r0, asr r0
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (ret == -1) {
    120c:	00500001 	subseq	r0, r0, r1
		if (retry == WNONE)
    1210:	00000000 	andeq	r0, r0, r0
		iowait (dev, operation, retry);
    1214:	01000000 	mrseq	r0, (UNDEF: 0)
    1218:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		if (retry != WNONE) {
    1228:	00010000 	andeq	r0, r1, r0
    122c:	00000051 	andeq	r0, r0, r1, asr r0
			iowait (dev, operation, retry);
    1230:	00000000 	andeq	r0, r0, r0
    1234:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
			(ioreq [dev]) (NONE, buf, len);
    1240:	00510001 	subseq	r0, r1, r1
		(ioreq [dev]) (NONE, buf, len);
    1244:	00000000 	andeq	r0, r0, r0
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
    124c:	00005700 	andeq	r5, r0, r0, lsl #14
	...
		delay (-ret - 2, retry);
    125c:	00010000 	andeq	r0, r1, r0
    1260:	00000052 	andeq	r0, r0, r2, asr r0
    1264:	00000000 	andeq	r0, r0, r0
		release;
    1268:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1274:	00520001 	subseq	r0, r2, r1
    1278:	00000000 	andeq	r0, r0, r0
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
    1280:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1290:	00010000 	andeq	r0, r1, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1294:	00000050 	andeq	r0, r0, r0, asr r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1298:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    12b0:	00500001 	subseq	r0, r0, r1
	...
void __pi_free (aword *ch) {
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	00005000 	andeq	r5, r0, r0
    12c8:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "malg");
    12cc:	00010000 	andeq	r0, r1, r0
    12d0:	00000054 	andeq	r0, r0, r4, asr r0
	...
	mcfree [MA_NP] += m_size (ch);
    12e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (mevent [MA_NP] . nwait) {
    12ec:	00510001 	subseq	r0, r1, r1
	...
}
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1300:	00005200 	andeq	r5, r0, r0, lsl #4
    1304:	00000000 	andeq	r0, r0, r0
void kill (aword pid) {
    1308:	00010000 	andeq	r0, r1, r0
		pid = (aword) __pi_curr;
    130c:	00000052 	andeq	r0, r0, r2, asr r0
	...
	syserror (EREQPAR, "kpi");
    131c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				__PCB = i->Next;
    1328:	00740007 	rsbseq	r0, r4, r7
			killev (i);
    132c:	00722432 	rsbseq	r2, r2, r2, lsr r4
			ufree (i);
    1330:	00000022 	andeq	r0, r0, r2, lsr #32
			if (i == __pi_curr)
    1334:	00000000 	andeq	r0, r0, r0
    1338:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    134c:	00500001 	subseq	r0, r0, r1
	...
	j = NULL;
    135c:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = __PCB; i != NULL; ) {
    1360:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		release;
    1370:	00010000 	andeq	r0, r1, r0
		if (i->code == fun) {
    1374:	00000050 	andeq	r0, r0, r0, asr r0
    1378:	00000000 	andeq	r0, r0, r0
			if (j == NULL)
    137c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			ufree (i);
    1390:	00510001 	subseq	r0, r1, r1
			i = k;
    1394:	00000000 	andeq	r0, r0, r0
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
				j->Next = k;
    139c:	00005600 	andeq	r5, r0, r0, lsl #12
	...
}
    13ac:	00010000 	andeq	r0, r1, r0
	if (size < 8)
    13b0:	00000050 	andeq	r0, r0, r0, asr r0
		_size = 2;
    13b4:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		if (mevent [MA_NP] . nfail != 255)
    13cc:	00500001 	subseq	r0, r0, r1
			mevent [MA_NP] . nfail ++;
    13d0:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	00005000 	andeq	r5, r0, r0
	...
			syserror (EMALLOC, "malc");
    13e8:	00010000 	andeq	r0, r1, r0
		if (m_size (chunk) >= _size)
    13ec:	00000051 	andeq	r0, r0, r1, asr r0
    13f0:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk)) {
    13f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			cc = chunk + _size + m_hdrlen;
    1408:	00500001 	subseq	r0, r0, r1
    140c:	00000000 	andeq	r0, r0, r0
			m_size (cc) = waste - m_hdrlen;
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
			QFREE;
    1414:	00005000 	andeq	r5, r0, r0
	...
		mcfree [MA_NP] -= m_size (chunk);
    1424:	00010000 	andeq	r0, r1, r0
    1428:	00000051 	andeq	r0, r0, r1, asr r0
		m_size (chunk) |= MALLOC_UMASK;
    142c:	00000000 	andeq	r0, r0, r0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    1444:	00500001 	subseq	r0, r0, r1
    1448:	00000000 	andeq	r0, r0, r0
    144c:	01000000 	mrseq	r0, (UNDEF: 0)
    1450:	00005000 	andeq	r5, r0, r0
    1454:	00000000 	andeq	r0, r0, r0
aword __pi_fork (fsmcode func, aword data) {
    1458:	00010000 	andeq	r0, r1, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    145c:	00000050 	andeq	r0, r0, r0, asr r0
    1460:	00000000 	andeq	r0, r0, r0
    1464:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	i->data = data;
    1470:	00500001 	subseq	r0, r0, r1
	...
			for (; j->Next != NULL; j = j->Next);
    1480:	01000000 	mrseq	r0, (UNDEF: 0)
	return (aword) i;
    1484:	00005100 	andeq	r5, r0, r0, lsl #2
    1488:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait != 255)
    148c:	00010000 	andeq	r0, r1, r0
    1490:	00000051 	andeq	r0, r0, r1, asr r0
    1494:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait ++;
    1498:	51000100 	mrspl	r0, (UNDEF: 16)
	...
void diag (const char *mess, ...) {
    14ac:	00520001 	subseq	r0, r2, r1
	diag_disable_int (a, is);
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	01000000 	mrseq	r0, (UNDEF: 0)
    14b8:	00005200 	andeq	r5, r0, r0, lsl #4
				d = (bc == 16) ? 10000 : 1000000000;
    14bc:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    14c0:	00010000 	andeq	r0, r1, r0
	while (*mess != '\0') {
    14c4:	00000052 	andeq	r0, r0, r2, asr r0
	...
    14d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    14e8:	00500001 	subseq	r0, r0, r1
    14ec:	00000000 	andeq	r0, r0, r0
		if (*mess == '%') {
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
    14f4:	00005000 	andeq	r5, r0, r0
	...
				val = va_arg (ap, lword);
    1504:	00010000 	andeq	r0, r1, r0
				bc = 32;
    1508:	00000050 	andeq	r0, r0, r0, asr r0
				bc = 16;
    150c:	00000000 	andeq	r0, r0, r0
			switch (*mess) {
    1510:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				dgout (*mess);
    1524:	00510001 	subseq	r0, r1, r1
	...
					i += 4;
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
					(val >> (bc - i)) & 0xf];
    1538:	00005200 	andeq	r5, r0, r0, lsl #4
    153c:	00000000 	andeq	r0, r0, r0
					dgout (v);
    1540:	00010000 	andeq	r0, r1, r0
    1544:	00000055 	andeq	r0, r0, r5, asr r0
	...
				if ((val >> (bc - 1)) & 1) {
    1554:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					dgout ('-');
    1560:	00540001 	subseq	r0, r4, r1
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
    1574:	00005100 	andeq	r5, r0, r0, lsl #2
    1578:	00000000 	andeq	r0, r0, r0
					v = (word) (val / d);
    157c:	00010000 	andeq	r0, r1, r0
					if (v || d == 1) break;
    1580:	00000050 	andeq	r0, r0, r0, asr r0
	...
					dgout (v + '0');
    1590:	52000100 	andpl	r0, r0, #0, 2
	...
					d /= 10;
    159c:	00550001 	subseq	r0, r5, r1
	...
					v = (word) (val / d);
    15ac:	01000000 	mrseq	r0, (UNDEF: 0)
				if (bc == 16)
    15b0:	00005000 	andeq	r5, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    15b4:	00000000 	andeq	r0, r0, r0
					val &= 0xffff;
    15b8:	00010000 	andeq	r0, r1, r0
					dgout (*s);
    15bc:	00000050 	andeq	r0, r0, r0, asr r0
	...
			dgout (*mess++);
    15cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    15d8:	00510001 	subseq	r0, r1, r1
    15dc:	00000000 	andeq	r0, r0, r0
}
    15e0:	01000000 	mrseq	r0, (UNDEF: 0)
    while(1)
    15e4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f4:	00010000 	andeq	r0, r1, r0
    __asm("    ldr     r0, =_bss\n"
    15f8:	00000052 	andeq	r0, r0, r2, asr r0
    15fc:	00000000 	andeq	r0, r0, r0
    1600:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
   main();
    160c:	00520001 	subseq	r0, r2, r1
    FaultISR();
    1610:	00000000 	andeq	r0, r0, r0
        *pui32Dest++ = *pui32Src++;
    1614:	01000000 	mrseq	r0, (UNDEF: 0)
    1618:	00005400 	andeq	r5, r0, r0, lsl #8
    161c:	00000000 	andeq	r0, r0, r0
    1620:	00010000 	andeq	r0, r1, r0
    1624:	00000054 	andeq	r0, r0, r4, asr r0
    1628:	00000000 	andeq	r0, r0, r0
    162c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1640:	00530001 	subseq	r0, r3, r1
	...
			b |= 1;
    1650:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1654:	00005000 	andeq	r5, r0, r0
	for (b = 0, i = 0; i < 8; i++) {
    1658:	00000000 	andeq	r0, r0, r0
}
    165c:	00010000 	andeq	r0, r1, r0
    1660:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    167c:	00500001 	subseq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1680:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < 8; i++) {
    1684:	01000000 	mrseq	r0, (UNDEF: 0)
		b <<= 1;
    1688:	00005000 	andeq	r5, r0, r0
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1698:	00010000 	andeq	r0, r1, r0
    169c:	00000050 	andeq	r0, r0, r0, asr r0
	put_byte (cmd);
    16a0:	00000000 	andeq	r0, r0, r0
    16a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
static void wwait (word st, word del) {
    16b0:	00500001 	subseq	r0, r0, r1
    16b4:	00000000 	andeq	r0, r0, r0
    16b8:	01000000 	mrseq	r0, (UNDEF: 0)
	while (dopen && (rdsr () & 1)) {
    16bc:	00005000 	andeq	r5, r0, r0
	...
	put_byte (CMD_RDSR);
    16cc:	00010000 	andeq	r0, r1, r0
	r = get_byte ();
    16d0:	00000051 	andeq	r0, r0, r1, asr r0
    16d4:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    16d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (st == WNONE)
    16e4:	00510001 	subseq	r0, r1, r1
			mdelay (1);
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	01000000 	mrseq	r0, (UNDEF: 0)
			delay (del, st);
    16f0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			release;
    1700:	00010000 	andeq	r0, r1, r0
static void ready () {
    1704:	00000054 	andeq	r0, r0, r4, asr r0
	if (dopen) {
    1708:	00000000 	andeq	r0, r0, r0
		wwait (WNONE, 1);
    170c:	70000a00 	andvc	r0, r0, r0, lsl #20
    1710:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1714:	00000000 	andeq	r0, r0, r0
	dstat = 0;
    1718:	00000022 	andeq	r0, r0, r2, lsr #32
}
    171c:	00000000 	andeq	r0, r0, r0
    1720:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    172c:	0070000a 	rsbseq	r0, r0, sl
	udelay (1);
    1730:	00032432 	andeq	r2, r3, r2, lsr r4
		dopen = DOPEN_TEMP;
    1734:	22000000 	andcs	r0, r0, #0
	...
    1740:	00540001 	subseq	r0, r4, r1
static void cclose () {
    1744:	00000000 	andeq	r0, r0, r0
	if (dopen == DOPEN_TEMP) {
    1748:	0a000000 	beq	1750 <cclose+0xc>
    174c:	32007000 	andcc	r7, r0, #0
		wwait (WNONE, 1);
    1750:	00000324 	andeq	r0, r0, r4, lsr #6
    1754:	00220000 	eoreq	r0, r2, r0
	...
}
    1764:	01000000 	mrseq	r0, (UNDEF: 0)
word ee_open () {
    1768:	00005500 	andeq	r5, r0, r0, lsl #10
	ready ();
    176c:	00000000 	andeq	r0, r0, r0
	dopen = DOPEN_PERM;
    1770:	00010000 	andeq	r0, r1, r0
    1774:	00000055 	andeq	r0, r0, r5, asr r0
	...
		dopen = DOPEN_TEMP;
    1784:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
int ser_in (word st, char *buf, int len) {
    1790:	00540001 	subseq	r0, r4, r1
	...
		if ((prcs = running (__inserial)) == 0) {
    17a0:	01000000 	mrseq	r0, (UNDEF: 0)
    17a4:	00005000 	andeq	r5, r0, r0
			prcs = runthread (__inserial);
    17a8:	00000000 	andeq	r0, r0, r0
    17ac:	00010000 	andeq	r0, r1, r0
			if (prcs == 0) {
    17b0:	00000050 	andeq	r0, r0, r0, asr r0
				npwait (st);
    17b4:	00000000 	andeq	r0, r0, r0
		release;
    17b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (prcs >= len)
    17cc:	00550001 	subseq	r0, r5, r1
	...
	memcpy (buf, __inpline, prcs);
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
	ufree (__inpline);
    17e0:	00005000 	andeq	r5, r0, r0
	...
}
    17f0:	00010000 	andeq	r0, r1, r0
		prcs = strlen (__inpline);
    17f4:	00000050 	andeq	r0, r0, r0, asr r0
    17f8:	00000000 	andeq	r0, r0, r0
		return 0;
    17fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int ser_outf (word st, const char *m, ...) {
    1808:	00500001 	subseq	r0, r0, r1
    180c:	00000000 	andeq	r0, r0, r0
	if ((prcs = running (__outserial)) != 0) {
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
    1814:	00005000 	andeq	r5, r0, r0
	...
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1824:	00010000 	andeq	r0, r1, r0
    1828:	00000051 	andeq	r0, r0, r1, asr r0
    182c:	00000000 	andeq	r0, r0, r0
		umwait (st);
    1830:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (runstrand (__outserial, buf) == 0) {
    183c:	00510001 	subseq	r0, r1, r1
	...
}
    184c:	01000000 	mrseq	r0, (UNDEF: 0)
    1850:	00005300 	andeq	r5, r0, r0, lsl #6
    1854:	00000000 	andeq	r0, r0, r0
    1858:	000a0000 	andeq	r0, sl, r0
int ser_inf (word st, const char *fmt, ...) {
    185c:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1860:	00000003 	andeq	r0, r0, r3
	if (fmt == NULL)
    1864:	00002200 	andeq	r2, r0, r0, lsl #4
	if (__inpline == NULL) {
    1868:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    186c:	00010000 	andeq	r0, r1, r0
    1870:	00000053 	andeq	r0, r0, r3, asr r0
			prcs = runthread (__inserial);
    1874:	00000000 	andeq	r0, r0, r0
    1878:	70000a00 	andvc	r0, r0, r0, lsl #20
			if (prcs == 0) {
    187c:	03243200 			; <UNDEFINED> instruction: 0x03243200
				npwait (st);
    1880:	00000000 	andeq	r0, r0, r0
		release;
    1884:	00000022 	andeq	r0, r0, r2, lsr #32
		join (prcs, st);
    1888:	00000000 	andeq	r0, r0, r0
    188c:	53000100 	movwpl	r0, #256	; 0x100
	...
	prcs = vscan (__inpline, fmt, ap);
    1898:	0070000a 	rsbseq	r0, r0, sl
	ufree (__inpline);
    189c:	00032432 	andeq	r2, r3, r2, lsr r4
	__inpline = NULL;
    18a0:	22000000 	andcs	r0, r0, #0
	...
		return 0;
    18b4:	00500001 	subseq	r0, r0, r1
    18b8:	00000000 	andeq	r0, r0, r0
strand (__outserial, const char*)
    18bc:	01000000 	mrseq	r0, (UNDEF: 0)
    18c0:	00005000 	andeq	r5, r0, r0
	...
endstrand
    18d0:	00010000 	andeq	r0, r1, r0
	ptr = data;
    18d4:	00000053 	andeq	r0, r0, r3, asr r0
    18d8:	00000000 	andeq	r0, r0, r0
	if (*ptr)
    18dc:	53000100 	movwpl	r0, #256	; 0x100
	...
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18e8:	00530001 	subseq	r0, r3, r1
	...
    18f8:	01000000 	mrseq	r0, (UNDEF: 0)
	len -= quant;
    18fc:	00005200 	andeq	r5, r0, r0, lsl #4
    1900:	00000000 	andeq	r0, r0, r0
    1904:	00010000 	andeq	r0, r1, r0
	if (len == 0) {
    1908:	00000052 	andeq	r0, r0, r2, asr r0
		ufree (data);
    190c:	00000000 	andeq	r0, r0, r0
		finish;
    1910:	52000100 	andpl	r0, r0, #0, 2
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    191c:	00520001 	subseq	r0, r2, r1
	...
strand (__inserial, address)
    192c:	01000000 	mrseq	r0, (UNDEF: 0)
    1930:	00005000 	andeq	r5, r0, r0
	...
	if (__inpline != NULL)
    1940:	00010000 	andeq	r0, r1, r0
    1944:	00000051 	andeq	r0, r0, r1, asr r0
		finish;
    1948:	00000000 	andeq	r0, r0, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    194c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1958:	00510001 	subseq	r0, r1, r1
		umwait (IM_INIT);
    195c:	00000000 	andeq	r0, r0, r0
		release;
    1960:	01000000 	mrseq	r0, (UNDEF: 0)
	savedata (data);
    1964:	00005100 	andeq	r5, r0, r0, lsl #2
	len = MAX_LINE_LENGTH;
    1968:	00000000 	andeq	r0, r0, r0
	io (IM_READ, __cport, READ, ptr, 1);
    196c:	00010000 	andeq	r0, r1, r0
    1970:	00000051 	andeq	r0, r0, r1, asr r0
	...
	if (ptr == (char*) data) { // new line
    1980:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (*ptr < 0x20)
    1994:	00540001 	subseq	r0, r4, r1
			proceed (IM_READ);
    1998:	00000000 	andeq	r0, r0, r0
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*ptr == '\n' || *ptr == '\r') {
    19a0:	00005000 	andeq	r5, r0, r0
    19a4:	00000000 	andeq	r0, r0, r0
    19a8:	00010000 	andeq	r0, r1, r0
		*ptr = '\0';
    19ac:	00000054 	andeq	r0, r0, r4, asr r0
	...
		ptr++;
    19bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	proceed (IM_READ);
    19c8:	00500001 	subseq	r0, r0, r1
	io (IM_BIN, __cport, READ, ptr, 1);
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	07000000 	streq	r0, [r0, -r0]
    19d4:	32007100 	andcc	r7, r0, #0, 2
    19d8:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	...
	if (len > *ptr + 1) // 1 for 0x04
    19e4:	00500001 	subseq	r0, r0, r1
	...
	ptr++;
    19f4:	01000000 	mrseq	r0, (UNDEF: 0)
	quant = io (IM_BINL, __cport, READ, ptr, len);
    19f8:	00005000 	andeq	r5, r0, r0
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	00010000 	andeq	r0, r1, r0
    1a04:	00000050 	andeq	r0, r0, r0, asr r0
	...
		__inpline = (char*)data;
    1a14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	ptr += quant;
    1a20:	00500001 	subseq	r0, r0, r1
	...
endstrand
    1a30:	01000000 	mrseq	r0, (UNDEF: 0)
    1a34:	00005100 	andeq	r5, r0, r0, lsl #2
    1a38:	00000000 	andeq	r0, r0, r0
    1a3c:	00010000 	andeq	r0, r1, r0
    1a40:	00000055 	andeq	r0, r0, r5, asr r0
    1a44:	00000000 	andeq	r0, r0, r0
		if (res && (d < n))
    1a48:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1a54:	00550001 	subseq	r0, r5, r1
			res [d] = (char) c;
    1a58:	00000000 	andeq	r0, r0, r0
		d++;
    1a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a60:	00005100 	andeq	r5, r0, r0, lsl #2
    1a64:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a68:	00010000 	andeq	r0, r1, r0
    1a6c:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1a7c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			if ((c = *fm++) == '\0') {
    1a90:	00500001 	subseq	r0, r0, r1
	...
				outc ('\\');
    1aa0:	01000000 	mrseq	r0, (UNDEF: 0)
			outc (c);
    1aa4:	00005000 	andeq	r5, r0, r0
    1aa8:	00000000 	andeq	r0, r0, r0
			if (c == '\0')
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	00000050 	andeq	r0, r0, r0, asr r0
			outc (c);
    1ab4:	00000000 	andeq	r0, r0, r0
				outc (val);
    1ab8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (c) {
    1acc:	00510001 	subseq	r0, r1, r1
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad8:	00005700 	andeq	r5, r0, r0, lsl #14
    1adc:	00000000 	andeq	r0, r0, r0
    1ae0:	00010000 	andeq	r0, r1, r0
    1ae4:	00000051 	andeq	r0, r0, r1, asr r0
    1ae8:	00000000 	andeq	r0, r0, r0
				outc ('%');
    1aec:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
				outc (c);
    1af8:	00570001 	subseq	r0, r7, r1
    1afc:	00000000 	andeq	r0, r0, r0
				if (c == '\0')
    1b00:	01000000 	mrseq	r0, (UNDEF: 0)
				return d;
    1b04:	00005100 	andeq	r5, r0, r0, lsl #2
}
    1b08:	00000000 	andeq	r0, r0, r0
    1b0c:	00010000 	andeq	r0, r1, r0
			switch (c) {
    1b10:	00000057 	andeq	r0, r0, r7, asr r0
	...
				val = (word) va_arg (ap, aword);
    1b20:	91000200 	mrsls	r0, R8_usr
						[ (val >> i) & 0xf ]);
    1b24:	00000078 	andeq	r0, r0, r8, ror r0
    1b28:	00000000 	andeq	r0, r0, r0
    1b2c:	91000200 	mrsls	r0, R8_usr
					outc (__pi_hex_enc_table
    1b30:	00000078 	andeq	r0, r0, r8, ror r0
    1b34:	00000000 	andeq	r0, r0, r0
					if (i == 0)
    1b38:	91000200 	mrsls	r0, R8_usr
    1b3c:	00000078 	andeq	r0, r0, r8, ror r0
				for (i = 12; ; i -= 4) {
    1b40:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1b44:	91000200 	mrsls	r0, R8_usr
				if (c == 'd' && (val & 0x8000) != 0) {
    1b48:	00000078 	andeq	r0, r0, r8, ror r0
	...
					outc ('-');
    1b58:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
					val = (~val) + 1;
    1b64:	00560001 	subseq	r0, r6, r1
	...
				enci (10000);
    1b74:	01000000 	mrseq	r0, (UNDEF: 0)
    1b78:	00005000 	andeq	r5, r0, r0
    1b7c:	00000000 	andeq	r0, r0, r0
    1b80:	00010000 	andeq	r0, r1, r0
    1b84:	00000054 	andeq	r0, r0, r4, asr r0
    1b88:	00000000 	andeq	r0, r0, r0
    1b8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1b98:	00540001 	subseq	r0, r4, r1
    1b9c:	00000000 	andeq	r0, r0, r0
    1ba0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ba4:	00005000 	andeq	r5, r0, r0
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	00010000 	andeq	r0, r1, r0
    1bb0:	00000054 	andeq	r0, r0, r4, asr r0
	...
					val = va_arg (ap, lword);
    1bc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					if (c == 'd' &&
    1bcc:	00500001 	subseq	r0, r0, r1
						outc ('-');
    1bd0:	00000000 	andeq	r0, r0, r0
    1bd4:	01000000 	mrseq	r0, (UNDEF: 0)
						val = (~val) + 1;
    1bd8:	00005000 	andeq	r5, r0, r0
	...
					enci (1000000000UL);
    1be8:	00010000 	andeq	r0, r1, r0
    1bec:	00000054 	andeq	r0, r0, r4, asr r0
    1bf0:	00000000 	andeq	r0, r0, r0
    1bf4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c00:	00540001 	subseq	r0, r4, r1
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	01000000 	mrseq	r0, (UNDEF: 0)
    1c0c:	00005000 	andeq	r5, r0, r0
	...
    1c1c:	00010000 	andeq	r0, r1, r0
    1c20:	00000050 	andeq	r0, r0, r0, asr r0
	...
							[ (val >> i) & 0xf ]);
    1c30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						if (i == 0)
    1c44:	00500001 	subseq	r0, r0, r1
	...
					outc ('%');
    1c54:	01000000 	mrseq	r0, (UNDEF: 0)
    1c58:	00005000 	andeq	r5, r0, r0
					outc ('l');
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	00010000 	andeq	r0, r1, r0
				val = (word) va_arg (ap, aword);
    1c64:	00000055 	andeq	r0, r0, r5, asr r0
				outc (val);
    1c68:	00000000 	andeq	r0, r0, r0
    1c6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				while (*st != '\0') {
    1c78:	00550001 	subseq	r0, r5, r1
	...
					st++;
    1c88:	01000000 	mrseq	r0, (UNDEF: 0)
		c = *fm++;
    1c8c:	00005100 	andeq	r5, r0, r0, lsl #2
    1c90:	00000000 	andeq	r0, r0, r0
    1c94:	00010000 	andeq	r0, r1, r0
char *vform (char *res, const char *fm, va_list aq) {
    1c98:	00000054 	andeq	r0, r0, r4, asr r0
    1c9c:	00000000 	andeq	r0, r0, r0
	if (res != NULL) {
    1ca0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1cac:	00540001 	subseq	r0, r4, r1
	...
	fml = strlen (fm) + 17;
    1cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc0:	00005000 	andeq	r5, r0, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    1cc4:	00000000 	andeq	r0, r0, r0
    1cc8:	00010000 	andeq	r0, r1, r0
    1ccc:	00000055 	andeq	r0, r0, r5, asr r0
	...
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cdc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (buf == NULL || fmt == NULL)
    1ce8:	00540001 	subseq	r0, r4, r1
	...
    1cf8:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'u': scanu (lword); break;
    1cfc:	00005000 	andeq	r5, r0, r0
			while (isspace (*buf)) buf++;
    1d00:	00000000 	andeq	r0, r0, r0
    1d04:	00010000 	andeq	r0, r1, r0
	while (*fmt != '\0') {
    1d08:	00000054 	andeq	r0, r0, r4, asr r0
		if (*fmt++ != '%')
    1d0c:	00000000 	andeq	r0, r0, r0
		switch (*fmt++) {
    1d10:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1d1c:	00500001 	subseq	r0, r0, r1
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	01000000 	mrseq	r0, (UNDEF: 0)
    1d28:	00005400 	andeq	r5, r0, r0, lsl #8
}
    1d2c:	00000000 	andeq	r0, r0, r0
		switch (*fmt++) {
    1d30:	00010000 	andeq	r0, r1, r0
    1d34:	00000050 	andeq	r0, r0, r0, asr r0
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (isspace (*buf)) buf++;
    1d50:	00510001 	subseq	r0, r1, r1
	...
			sap = va_arg (ap, char*);
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
			nc++;
    1d64:	00005000 	andeq	r5, r0, r0
			if (*buf != ',') {
    1d68:	00000000 	andeq	r0, r0, r0
				while (!isspace (*buf) && *buf != ',' &&
    1d6c:	00010000 	andeq	r0, r1, r0
    1d70:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1d80:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (isspace (*buf)) buf++;
    1d8c:	00530001 	subseq	r0, r3, r1
	...
			if (*buf == ',') buf++;
    1d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1da0:	00005100 	andeq	r5, r0, r0, lsl #2
			*sap = '\0';
    1da4:	00000000 	andeq	r0, r0, r0
			break;
    1da8:	00010000 	andeq	r0, r1, r0
		    case 'd': scani (word); break;
    1dac:	00000050 	andeq	r0, r0, r0, asr r0
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dc8:	00520001 	subseq	r0, r2, r1
    1dcc:	00000000 	andeq	r0, r0, r0
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	00005100 	andeq	r5, r0, r0, lsl #2
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	00010000 	andeq	r0, r1, r0
    1de0:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1df0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1e04:	00510001 	subseq	r0, r1, r1
	...
    1e14:	01000000 	mrseq	r0, (UNDEF: 0)
    1e18:	00005000 	andeq	r5, r0, r0
	...
		    case 'u': scanu (word); break;
    1e28:	00010000 	andeq	r0, r1, r0
    1e2c:	00000051 	andeq	r0, r0, r1, asr r0
    1e30:	00000000 	andeq	r0, r0, r0
    1e34:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1e40:	00510001 	subseq	r0, r1, r1
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	01000000 	mrseq	r0, (UNDEF: 0)
    1e4c:	00005600 	andeq	r5, r0, r0, lsl #12
    1e50:	00000000 	andeq	r0, r0, r0
    1e54:	00010000 	andeq	r0, r1, r0
    1e58:	00000051 	andeq	r0, r0, r1, asr r0
    1e5c:	00000000 	andeq	r0, r0, r0
    1e60:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		    case 'x': scanx (word); break;
    1e6c:	00510001 	subseq	r0, r1, r1
    1e70:	00000000 	andeq	r0, r0, r0
    1e74:	01000000 	mrseq	r0, (UNDEF: 0)
    1e78:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    1e88:	00010000 	andeq	r0, r1, r0
    1e8c:	00000052 	andeq	r0, r0, r2, asr r0
    1e90:	00000000 	andeq	r0, r0, r0
    1e94:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1ea0:	00520001 	subseq	r0, r2, r1
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	00005500 	andeq	r5, r0, r0, lsl #10
    1eb0:	00000000 	andeq	r0, r0, r0
    1eb4:	00010000 	andeq	r0, r1, r0
    1eb8:	00000052 	andeq	r0, r0, r2, asr r0
    1ebc:	00000000 	andeq	r0, r0, r0
    1ec0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1ed4:	00500001 	subseq	r0, r0, r1
    1ed8:	00000000 	andeq	r0, r0, r0
			switch (*fmt++) {
    1edc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ee0:	00005000 	andeq	r5, r0, r0
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	00010000 	andeq	r0, r1, r0
    1eec:	00000054 	andeq	r0, r0, r4, asr r0
    1ef0:	00000000 	andeq	r0, r0, r0
		    	    case 'd': scani (lword); break;
    1ef4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f08:	00510001 	subseq	r0, r1, r1
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1f14:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    1f18:	01000016 	tsteq	r0, r6, lsl r0
    1f1c:	16185200 	ldrne	r5, [r8], -r0, lsl #4
    1f20:	162c0000 	strtne	r0, [ip], -r0
    1f24:	00010000 	andeq	r0, r1, r0
    1f28:	00000052 	andeq	r0, r0, r2, asr r0
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	0015f400 	andseq	pc, r5, r0, lsl #8
    1f34:	00160d00 	andseq	r0, r6, r0, lsl #26
    1f38:	53000100 	movwpl	r0, #256	; 0x100
    1f3c:	0000161c 	andeq	r1, r0, ip, lsl r6
    1f40:	0000162c 	andeq	r1, r0, ip, lsr #12
    1f44:	00530001 	subseq	r0, r3, r1
	...
		    	    case 'x': scanx (lword); break;
    1f54:	01000000 	mrseq	r0, (UNDEF: 0)
    1f58:	00005000 	andeq	r5, r0, r0
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	00010000 	andeq	r0, r1, r0
    1f64:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1f74:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1f80:	00510001 	subseq	r0, r1, r1
	...
    1f90:	01000000 	mrseq	r0, (UNDEF: 0)
    1f94:	00005200 	andeq	r5, r0, r0, lsl #4
    1f98:	00000000 	andeq	r0, r0, r0
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1fb0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		    	    case 'd': scani (lword); break;
    1fc4:	00500001 	subseq	r0, r0, r1
	...
    1fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd8:	00005000 	andeq	r5, r0, r0
		    	    case 'u': scanu (lword); break;
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	00050000 	andeq	r0, r5, r0
    1fe4:	00000003 	andeq	r0, r0, r3
	...
    1ff0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1ffc:	00030005 	andeq	r0, r3, r5
	...
    2010:	01000000 	mrseq	r0, (UNDEF: 0)
    2014:	00005000 	andeq	r5, r0, r0
    2018:	00000000 	andeq	r0, r0, r0
    201c:	00010000 	andeq	r0, r1, r0
    2020:	00000050 	andeq	r0, r0, r0, asr r0
		    	    case 'x': scanx (lword); break;
    2024:	00000000 	andeq	r0, r0, r0
    2028:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			sap = va_arg (ap, char*);
    2034:	00500001 	subseq	r0, r0, r1
	...
			while (isspace (*buf)) buf++;
    2044:	01000000 	mrseq	r0, (UNDEF: 0)
    2048:	00005000 	andeq	r5, r0, r0
	...
			while (isspace (*buf)) buf++;
    2058:	00010000 	andeq	r0, r1, r0
    205c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    case 'x': scanx (word); break;
    206c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2080:	00510001 	subseq	r0, r1, r1
    2084:	00000000 	andeq	r0, r0, r0
    2088:	01000000 	mrseq	r0, (UNDEF: 0)
    208c:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    209c:	00010000 	andeq	r0, r1, r0
    20a0:	00000052 	andeq	r0, r0, r2, asr r0
	...
    20b0:	53000100 	movwpl	r0, #256	; 0x100
	...
    20c4:	00540001 	subseq	r0, r4, r1
    20c8:	00000000 	andeq	r0, r0, r0
    20cc:	01000000 	mrseq	r0, (UNDEF: 0)
    20d0:	00005400 	andeq	r5, r0, r0, lsl #8
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	00010000 	andeq	r0, r1, r0
    20dc:	00000054 	andeq	r0, r0, r4, asr r0
	...
    20ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    20f8:	00500001 	subseq	r0, r0, r1
	...
    2108:	01000000 	mrseq	r0, (UNDEF: 0)
    210c:	00005100 	andeq	r5, r0, r0, lsl #2
    2110:	00000000 	andeq	r0, r0, r0
    2114:	00010000 	andeq	r0, r1, r0
    2118:	00000056 	andeq	r0, r0, r6, asr r0
    211c:	00000000 	andeq	r0, r0, r0
    2120:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2134:	00520001 	subseq	r0, r2, r1
    2138:	00000000 	andeq	r0, r0, r0
    213c:	01000000 	mrseq	r0, (UNDEF: 0)
    2140:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2150:	00010000 	andeq	r0, r1, r0
    2154:	00000054 	andeq	r0, r0, r4, asr r0
	...
    2164:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2178:	00500001 	subseq	r0, r0, r1
    217c:	00000000 	andeq	r0, r0, r0
    2180:	01000000 	mrseq	r0, (UNDEF: 0)
    2184:	00005500 	andeq	r5, r0, r0, lsl #10
    2188:	00000000 	andeq	r0, r0, r0
    218c:	00010000 	andeq	r0, r1, r0
    2190:	00000050 	andeq	r0, r0, r0, asr r0
	...
    21a0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    21ac:	00560001 	subseq	r0, r6, r1
    21b0:	00000000 	andeq	r0, r0, r0
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	00005600 	andeq	r5, r0, r0, lsl #12
    21bc:	00000000 	andeq	r0, r0, r0
    21c0:	00010000 	andeq	r0, r1, r0
    21c4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    21d4:	52000100 	andpl	r0, r0, #0, 2
	...
    21e0:	00520001 	subseq	r0, r2, r1
    21e4:	00000000 	andeq	r0, r0, r0
    21e8:	b0000000 	andlt	r0, r0, r0
    21ec:	c0000016 	andgt	r0, r0, r6, lsl r0
    21f0:	01000016 	tsteq	r0, r6, lsl r0
    21f4:	00005000 	andeq	r5, r0, r0
    21f8:	00000000 	andeq	r0, r0, r0
    21fc:	16b00000 	ldrtne	r0, [r0], r0
    2200:	16c00000 	strbne	r0, [r0], r0
    2204:	00010000 	andeq	r0, r1, r0
    2208:	00000051 	andeq	r0, r0, r1, asr r0
    220c:	00000000 	andeq	r0, r0, r0
    2210:	0016d200 	andseq	sp, r6, r0, lsl #4
    2214:	0016d600 	andseq	sp, r6, r0, lsl #12
    2218:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2224:	00001698 	muleq	r0, r8, r6
    2228:	000016a3 	andeq	r1, r0, r3, lsr #13
    222c:	00500001 	subseq	r0, r0, r1
    2230:	00000000 	andeq	r0, r0, r0
    2234:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2238:	84000016 	strhi	r0, [r0], #-22	; 0xffffffea
    223c:	01000016 	tsteq	r0, r6, lsl r0
    2240:	168c5000 	strne	r5, [ip], r0
    2244:	16980000 	ldrne	r0, [r8], r0
    2248:	00010000 	andeq	r0, r1, r0
    224c:	00000050 	andeq	r0, r0, r0, asr r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	00164400 	andseq	r4, r6, r0, lsl #8
    2258:	00164800 	andseq	r4, r6, r0, lsl #16
    225c:	50000100 	andpl	r0, r0, r0, lsl #2
    2260:	0000164c 	andeq	r1, r0, ip, asr #12
    2264:	00001668 	andeq	r1, r0, r8, ror #12
    2268:	00500001 	subseq	r0, r0, r1
    226c:	00000000 	andeq	r0, r0, r0
    2270:	90000000 	andls	r0, r0, r0
    2274:	9e000017 	mcrls	0, 0, r0, cr0, cr7, {0}
    2278:	01000017 	tsteq	r0, r7, lsl r0
    227c:	17fa5000 	ldrbne	r5, [sl, r0]!
    2280:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    2284:	00010000 	andeq	r0, r1, r0
    2288:	00000050 	andeq	r0, r0, r0, asr r0
    228c:	00000000 	andeq	r0, r0, r0
    2290:	00179000 	andseq	r9, r7, r0
    2294:	0017a500 	andseq	sl, r7, r0, lsl #10
    2298:	51000100 	mrspl	r0, (UNDEF: 16)
    229c:	000017a5 	andeq	r1, r0, r5, lsr #15
    22a0:	000017c4 	andeq	r1, r0, r4, asr #15
    22a4:	c4570001 	ldrbgt	r0, [r7], #-1
    22a8:	cc000017 	stcgt	0, cr0, [r0], {23}
    22ac:	01000017 	tsteq	r0, r7, lsl r0
    22b0:	17cc5100 	strbne	r5, [ip, r0, lsl #2]
    22b4:	17f20000 	ldrbne	r0, [r2, r0]!
    22b8:	00010000 	andeq	r0, r1, r0
    22bc:	0017f257 	andseq	pc, r7, r7, asr r2	; <UNPREDICTABLE>
    22c0:	0017f500 	andseq	pc, r7, r0, lsl #10
    22c4:	51000100 	mrspl	r0, (UNDEF: 16)
    22c8:	000017f5 	strdeq	r1, [r0], -r5
    22cc:	000017fa 	strdeq	r1, [r0], -sl
    22d0:	fa570001 	blx	15c22dc <__ccfg+0x15a2334>
    22d4:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    22d8:	01000018 	tsteq	r0, r8, lsl r0
    22dc:	00005100 	andeq	r5, r0, r0, lsl #2
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	17900000 	ldrne	r0, [r0, r0]
    22e8:	17a50000 	strne	r0, [r5, r0]!
    22ec:	00010000 	andeq	r0, r1, r0
    22f0:	0017a552 	andseq	sl, r7, r2, asr r5
    22f4:	0017c400 	andseq	ip, r7, r0, lsl #8
    22f8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    22fc:	000017c4 	andeq	r1, r0, r4, asr #15
    2300:	000017cc 	andeq	r1, r0, ip, asr #15
    2304:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
    2308:	f2000017 	vqadd.s8	d0, d0, d7
    230c:	01000017 	tsteq	r0, r7, lsl r0
    2310:	17f25500 	ldrbne	r5, [r2, r0, lsl #10]!
    2314:	17f50000 	ldrbne	r0, [r5, r0]!
    2318:	00010000 	andeq	r0, r1, r0
    231c:	0017f552 	andseq	pc, r7, r2, asr r5	; <UNPREDICTABLE>
    2320:	0017fa00 	andseq	pc, r7, r0, lsl #20
    2324:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2328:	000017fa 	strdeq	r1, [r0], -sl
    232c:	00001808 	andeq	r1, r0, r8, lsl #16
    2330:	00520001 	subseq	r0, r2, r1
    2334:	00000000 	andeq	r0, r0, r0
    2338:	a6000000 	strge	r0, [r0], -r0
    233c:	ac000017 	stcge	0, cr0, [r0], {23}
    2340:	01000017 	tsteq	r0, r7, lsl r0
    2344:	17ac5000 	strne	r5, [ip, r0]!
    2348:	17af0000 	strne	r0, [pc, r0]!
    234c:	00010000 	andeq	r0, r1, r0
    2350:	0017b051 	andseq	fp, r7, r1, asr r0
    2354:	0017b400 	andseq	fp, r7, r0, lsl #8
    2358:	50000100 	andpl	r0, r0, r0, lsl #2
    235c:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    2360:	000017c1 	andeq	r1, r0, r1, asr #15
    2364:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2368:	ee000017 	mcr	0, 0, r0, cr0, cr7, {0}
    236c:	01000017 	tsteq	r0, r7, lsl r0
    2370:	17f85400 	ldrbne	r5, [r8, r0, lsl #8]!
    2374:	17fa0000 	ldrbne	r0, [sl, r0]!
    2378:	00010000 	andeq	r0, r1, r0
    237c:	00000050 	andeq	r0, r0, r0, asr r0
    2380:	00000000 	andeq	r0, r0, r0
    2384:	00180800 	andseq	r0, r8, r0, lsl #16
    2388:	00181000 	andseq	r1, r8, r0
    238c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2398:	00001814 	andeq	r1, r0, r4, lsl r8
    239c:	0000181d 	andeq	r1, r0, sp, lsl r8
    23a0:	1d500001 	ldclne	0, cr0, [r0, #-4]
    23a4:	22000018 	andcs	r0, r0, #24
    23a8:	01000018 	tsteq	r0, r8, lsl r0
    23ac:	18225600 	stmdane	r2!, {r9, sl, ip, lr}
    23b0:	182b0000 	stmdane	fp!, {}	; <UNPREDICTABLE>
    23b4:	00010000 	andeq	r0, r1, r0
    23b8:	00182b50 	andseq	r2, r8, r0, asr fp
    23bc:	00185200 	andseq	r5, r8, r0, lsl #4
    23c0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    23c4:	00001852 	andeq	r1, r0, r2, asr r8
    23c8:	0000185c 	andeq	r1, r0, ip, asr r8
    23cc:	00500001 	subseq	r0, r0, r1
    23d0:	00000000 	andeq	r0, r0, r0
    23d4:	2c000000 	stccs	0, cr0, [r0], {-0}
    23d8:	30000018 	andcc	r0, r0, r8, lsl r0
    23dc:	01000018 	tsteq	r0, r8, lsl r0
    23e0:	18305000 	ldmdane	r0!, {ip, lr}
    23e4:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    23e8:	00010000 	andeq	r0, r1, r0
    23ec:	00183855 	andseq	r3, r8, r5, asr r8
    23f0:	00183c00 	andseq	r3, r8, r0, lsl #24
    23f4:	50000100 	andpl	r0, r0, r0, lsl #2
    23f8:	0000183c 	andeq	r1, r0, ip, lsr r8
    23fc:	00001852 	andeq	r1, r0, r2, asr r8
    2400:	00550001 	subseq	r0, r5, r1
    2404:	00000000 	andeq	r0, r0, r0
    2408:	5c000000 	stcpl	0, cr0, [r0], {-0}
    240c:	6a000018 	bvs	2474 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x8>
    2410:	01000018 	tsteq	r0, r8, lsl r0
    2414:	18b05000 	ldmne	r0!, {ip, lr}
    2418:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    241c:	00010000 	andeq	r0, r1, r0
    2420:	00000050 	andeq	r0, r0, r0, asr r0
    2424:	00000000 	andeq	r0, r0, r0
    2428:	00187200 	andseq	r7, r8, r0, lsl #4
    242c:	00187800 	andseq	r7, r8, r0, lsl #16
    2430:	50000100 	andpl	r0, r0, r0, lsl #2
    2434:	00001878 	andeq	r1, r0, r8, ror r8
    2438:	0000187b 	andeq	r1, r0, fp, ror r8
    243c:	7c510001 	mrrcvc	0, 0, r0, r1, cr1
    2440:	80000018 	andhi	r0, r0, r8, lsl r0
    2444:	01000018 	tsteq	r0, r8, lsl r0
    2448:	18885000 	stmne	r8, {ip, lr}
    244c:	188d0000 	stmne	sp, {}	; <UNPREDICTABLE>
    2450:	00010000 	andeq	r0, r1, r0
    2454:	00189a50 	andseq	r9, r8, r0, asr sl
    2458:	00189c00 	andseq	r9, r8, r0, lsl #24
    245c:	50000100 	andpl	r0, r0, r0, lsl #2
    2460:	0000189c 	muleq	r0, ip, r8
    2464:	000018a4 	andeq	r1, r0, r4, lsr #17
    2468:	00540001 	subseq	r0, r4, r1
    246c:	00000000 	andeq	r0, r0, r0
    2470:	bc000000 	stclt	0, cr0, [r0], {-0}
    2474:	d3000018 	movwle	r0, #24
    2478:	01000018 	tsteq	r0, r8, lsl r0
    247c:	18d45000 	ldmne	r4, {ip, lr}^
    2480:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    2484:	00010000 	andeq	r0, r1, r0
    2488:	00191850 	andseq	r1, r9, r0, asr r8
    248c:	00192c00 	andseq	r2, r9, r0, lsl #24
    2490:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    249c:	000018c4 	andeq	r1, r0, r4, asr #17
    24a0:	000018d0 	ldrdeq	r1, [r0], -r0
    24a4:	d0550001 	subsle	r0, r5, r1
    24a8:	d3000018 	movwle	r0, #24
    24ac:	02000018 	andeq	r0, r0, #24
    24b0:	d4087300 	strle	r7, [r8], #-768	; 0xfffffd00
    24b4:	2c000018 	stccs	0, cr0, [r0], {24}
    24b8:	01000019 	tsteq	r0, r9, lsl r0
    24bc:	00005500 	andeq	r5, r0, r0, lsl #10
    24c0:	00000000 	andeq	r0, r0, r0
    24c4:	18fa0000 	ldmne	sl!, {}^	; <UNPREDICTABLE>
    24c8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    24cc:	00010000 	andeq	r0, r1, r0
    24d0:	00000050 	andeq	r0, r0, r0, asr r0
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	00192c00 	andseq	r2, r9, r0, lsl #24
    24dc:	00194800 	andseq	r4, r9, r0, lsl #16
    24e0:	50000100 	andpl	r0, r0, r0, lsl #2
    24e4:	00001a2e 	andeq	r1, r0, lr, lsr #20
    24e8:	00001a37 	andeq	r1, r0, r7, lsr sl
    24ec:	00500001 	subseq	r0, r0, r1
    24f0:	00000000 	andeq	r0, r0, r0
    24f4:	34000000 	strcc	r0, [r0], #-0
    24f8:	56000019 			; <UNDEFINED> instruction: 0x56000019
    24fc:	01000019 	tsteq	r0, r9, lsl r0
    2500:	19565400 	ldmdbne	r6, {sl, ip, lr}^
    2504:	195d0000 	ldmdbne	sp, {}^	; <UNPREDICTABLE>
    2508:	00010000 	andeq	r0, r1, r0
    250c:	00195d50 	andseq	r5, r9, r0, asr sp
    2510:	00196200 	andseq	r6, r9, r0, lsl #4
    2514:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2518:	00001962 	andeq	r1, r0, r2, ror #18
    251c:	0000196c 	andeq	r1, r0, ip, ror #18
    2520:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2524:	2a000019 	bcs	2590 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x5c>
    2528:	0100001a 	tsteq	r0, sl, lsl r0
    252c:	1a2e5400 	bne	b97534 <__ccfg+0xb7758c>
    2530:	1a340000 	bne	d02538 <__ccfg+0xce2590>
    2534:	00010000 	andeq	r0, r1, r0
    2538:	001a3454 	andseq	r3, sl, r4, asr r4
    253c:	001a3700 	andseq	r3, sl, r0, lsl #14
    2540:	72000200 	andvc	r0, r0, #0, 4
    2544:	00000008 	andeq	r0, r0, r8
    2548:	00000000 	andeq	r0, r0, r0
    254c:	001a0e00 	andseq	r0, sl, r0, lsl #28
    2550:	001a1000 	andseq	r1, sl, r0
    2554:	50000100 	andpl	r0, r0, r0, lsl #2
    2558:	00001a10 	andeq	r1, r0, r0, lsl sl
    255c:	00001a2a 	andeq	r1, r0, sl, lsr #20
    2560:	00560001 	subseq	r0, r6, r1
    2564:	00000000 	andeq	r0, r0, r0
    2568:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    256c:	af00001c 	svcge	0x0000001c
    2570:	0100001c 	tsteq	r0, ip, lsl r0
    2574:	1caf5000 	stcne	0, cr5, [pc]	; 257c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x48>
    2578:	1cb60000 	ldcne	0, cr0, [r6]
    257c:	00010000 	andeq	r0, r1, r0
    2580:	001cb654 	andseq	fp, ip, r4, asr r6
    2584:	001cb800 	andseq	fp, ip, r0, lsl #16
    2588:	50000100 	andpl	r0, r0, r0, lsl #2
    258c:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    2590:	00001cc8 	andeq	r1, r0, r8, asr #25
    2594:	c8540001 	ldmdagt	r4, {r0}^
    2598:	d700001c 	smladle	r0, ip, r0, r0
    259c:	0100001c 	tsteq	r0, ip, lsl r0
    25a0:	1cd75000 	ldclne	0, cr5, [r7], {0}
    25a4:	1ce80000 	stclne	0, cr0, [r8]
    25a8:	00010000 	andeq	r0, r1, r0
    25ac:	00000054 	andeq	r0, r0, r4, asr r0
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	001c9800 	andseq	r9, ip, r0, lsl #16
    25b8:	001cac00 	andseq	sl, ip, r0, lsl #24
    25bc:	51000100 	mrspl	r0, (UNDEF: 16)
    25c0:	00001cac 	andeq	r1, r0, ip, lsr #25
    25c4:	00001caf 	andeq	r1, r0, pc, lsr #25
    25c8:	af520001 	svcge	0x00520001
    25cc:	b600001c 			; <UNDEFINED> instruction: 0xb600001c
    25d0:	0100001c 	tsteq	r0, ip, lsl r0
    25d4:	1cb65600 	ldcne	6, cr5, [r6]
    25d8:	1cbb0000 	ldcne	0, cr0, [fp]
    25dc:	00010000 	andeq	r0, r1, r0
    25e0:	001cbb51 	andseq	fp, ip, r1, asr fp
    25e4:	001ce800 	andseq	lr, ip, r0, lsl #16
    25e8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    25f4:	00001c98 	muleq	r0, r8, ip
    25f8:	00001ca0 	andeq	r1, r0, r0, lsr #25
    25fc:	a4520001 	ldrbge	r0, [r2], #-1
    2600:	a800001c 	stmdage	r0, {r2, r3, r4}
    2604:	0100001c 	tsteq	r0, ip, lsl r0
    2608:	1cb05200 	lfmne	f5, 4, [r0]
    260c:	1cb60000 	ldcne	0, cr0, [r6]
    2610:	00010000 	andeq	r0, r1, r0
    2614:	001cc257 	andseq	ip, ip, r7, asr r2
    2618:	001ce800 	andseq	lr, ip, r0, lsl #16
    261c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    2628:	00001cc2 	andeq	r1, r0, r2, asr #25
    262c:	00001ce4 	andeq	r1, r0, r4, ror #25
    2630:	e4550001 	ldrb	r0, [r5], #-1
    2634:	e800001c 	stmda	r0, {r2, r3, r4}
    2638:	0100001c 	tsteq	r0, ip, lsl r0
    263c:	00005800 	andeq	r5, r0, r0, lsl #16
    2640:	00000000 	andeq	r0, r0, r0
    2644:	1cdc0000 	ldclne	0, cr0, [ip], {0}
    2648:	1ce00000 	stclne	0, cr0, [r0]
    264c:	00010000 	andeq	r0, r1, r0
    2650:	00000050 	andeq	r0, r0, r0, asr r0
    2654:	00000000 	andeq	r0, r0, r0
    2658:	001a6800 	andseq	r6, sl, r0, lsl #16
    265c:	001a8200 	andseq	r8, sl, r0, lsl #4
    2660:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    266c:	00001a68 	andeq	r1, r0, r8, ror #20
    2670:	00001a82 	andeq	r1, r0, r2, lsl #21
    2674:	00510001 	subseq	r0, r1, r1
    2678:	00000000 	andeq	r0, r0, r0
    267c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2680:	8200001a 	andhi	r0, r0, #26
    2684:	0100001a 	tsteq	r0, sl, lsl r0
    2688:	1a925200 	bne	fe496e90 <_estack+0xde491e90>
    268c:	1abe0000 	bne	fef82694 <_estack+0xdef7d694>
    2690:	00010000 	andeq	r0, r1, r0
    2694:	001acc55 	andseq	ip, sl, r5, asr ip
    2698:	001c8a00 	andseq	r8, ip, r0, lsl #20
    269c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    26a8:	00001a68 	andeq	r1, r0, r8, ror #20
    26ac:	00001a6c 	andeq	r1, r0, ip, ror #20
    26b0:	6e530001 	cdpvs	0, 5, cr0, cr3, cr1, {0}
    26b4:	7000001a 	andvc	r0, r0, sl, lsl r0
    26b8:	0300001a 	movweq	r0, #26
    26bc:	04935300 	ldreq	r5, [r3], #768	; 0x300
    26c0:	00001a70 	andeq	r1, r0, r0, ror sl
    26c4:	00001aba 			; <UNDEFINED> instruction: 0x00001aba
    26c8:	93540003 	cmpls	r4, #3
    26cc:	001aba04 	andseq	fp, sl, r4, lsl #20
    26d0:	001b0e00 	andseq	r0, fp, r0, lsl #28
    26d4:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    26d8:	1b0e0493 	blne	38392c <__ccfg+0x363984>
    26dc:	1b1a0000 	blne	6826e4 <__ccfg+0x66273c>
    26e0:	00030000 	andeq	r0, r3, r0
    26e4:	22049354 	andcs	r9, r4, #84, 6	; 0x50000001
    26e8:	4400001b 	strmi	r0, [r0], #-27	; 0xffffffe5
    26ec:	0300001b 	movweq	r0, #27
    26f0:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26f4:	00001b48 	andeq	r1, r0, r8, asr #22
    26f8:	00001bc2 	andeq	r1, r0, r2, asr #23
    26fc:	93540003 	cmpls	r4, #3
    2700:	001bc804 	andseq	ip, fp, r4, lsl #16
    2704:	001bdc00 	andseq	sp, fp, r0, lsl #24
    2708:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    270c:	1c220493 	cfstrsne	mvf0, [r2], #-588	; 0xfffffdb4
    2710:	1c2e0000 	stcne	0, cr0, [lr], #-0
    2714:	00030000 	andeq	r0, r3, r0
    2718:	50049354 	andpl	r9, r4, r4, asr r3
    271c:	6200001c 	andvs	r0, r0, #28
    2720:	0300001c 	movweq	r0, #28
    2724:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2728:	00001c66 	andeq	r1, r0, r6, ror #24
    272c:	00001c6e 	andeq	r1, r0, lr, ror #24
    2730:	93540003 	cmpls	r4, #3
    2734:	001c7204 	andseq	r7, ip, r4, lsl #4
    2738:	001c9800 	andseq	r9, ip, r0, lsl #16
    273c:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2740:	00000493 	muleq	r0, r3, r4
    2744:	00000000 	andeq	r0, r0, r0
    2748:	1a860000 	bne	fe182750 <_estack+0xde17d750>
    274c:	1a900000 	bne	fe402754 <_estack+0xde3fd754>
    2750:	00010000 	andeq	r0, r1, r0
    2754:	001a9059 	andseq	r9, sl, r9, asr r0
    2758:	001a9200 	andseq	r9, sl, r0, lsl #4
    275c:	72000200 	andvc	r0, r0, #0, 4
    2760:	001a9200 	andseq	r9, sl, r0, lsl #4
    2764:	001ab600 	andseq	fp, sl, r0, lsl #12
    2768:	59000100 	stmdbpl	r0, {r8}
    276c:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
    2770:	00001acc 	andeq	r1, r0, ip, asr #21
    2774:	cc590001 	mrrcgt	0, 0, r0, r9, cr1
    2778:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    277c:	0100001b 	tsteq	r0, fp, lsl r0
    2780:	1b0e5800 	blne	398788 <__ccfg+0x3787e0>
    2784:	1b1e0000 	blne	78278c <__ccfg+0x7627e4>
    2788:	00010000 	andeq	r0, r1, r0
    278c:	001b1e58 	andseq	r1, fp, r8, asr lr
    2790:	001b2600 	andseq	r2, fp, r0, lsl #12
    2794:	72000200 	andvc	r0, r0, #0, 4
    2798:	001b4401 	andseq	r4, fp, r1, lsl #8
    279c:	001b6e00 	andseq	r6, fp, r0, lsl #28
    27a0:	58000100 	stmdapl	r0, {r8}
    27a4:	00001b72 	andeq	r1, r0, r2, ror fp
    27a8:	00001b76 	andeq	r1, r0, r6, ror fp
    27ac:	80500001 	subshi	r0, r0, r1
    27b0:	8a00001b 	bhi	2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x4>
    27b4:	0100001b 	tsteq	r0, fp, lsl r0
    27b8:	1baa5000 	blne	fea967c0 <_estack+0xdea917c0>
    27bc:	1bac0000 	blne	feb027c4 <_estack+0xdeafd7c4>
    27c0:	00010000 	andeq	r0, r1, r0
    27c4:	001bb250 	andseq	fp, fp, r0, asr r2
    27c8:	001bb400 	andseq	fp, fp, r0, lsl #8
    27cc:	58000100 	stmdapl	r0, {r8}
    27d0:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    27d4:	00001bd7 	ldrdeq	r1, [r0], -r7
    27d8:	e6530001 	ldrb	r0, [r3], -r1
    27dc:	ea00001b 	b	2850 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x30>
    27e0:	0100001b 	tsteq	r0, fp, lsl r0
    27e4:	1bf45900 	blne	ffd18bec <_estack+0xdfd13bec>
    27e8:	1c140000 	ldcne	0, cr0, [r4], {-0}
    27ec:	00010000 	andeq	r0, r1, r0
    27f0:	001c1a59 	andseq	r1, ip, r9, asr sl
    27f4:	001c1c00 	andseq	r1, ip, r0, lsl #24
    27f8:	59000100 	stmdbpl	r0, {r8}
    27fc:	00001c22 	andeq	r1, r0, r2, lsr #24
    2800:	00001c30 	andeq	r1, r0, r0, lsr ip
    2804:	50530001 	subspl	r0, r3, r1
    2808:	5900001c 	stmdbpl	r0, {r2, r3, r4}
    280c:	0100001c 	tsteq	r0, ip, lsl r0
    2810:	1c625300 	stclne	3, cr5, [r2], #-0
    2814:	1c760000 	ldclne	0, cr0, [r6], #-0
    2818:	00010000 	andeq	r0, r1, r0
    281c:	001c8a58 	andseq	r8, ip, r8, asr sl
    2820:	001c9800 	andseq	r9, ip, r0, lsl #16
    2824:	59000100 	stmdbpl	r0, {r8}
	...
    2830:	00001b26 	andeq	r1, r0, r6, lsr #22
    2834:	00001b44 	andeq	r1, r0, r4, asr #22
    2838:	00580001 	subseq	r0, r8, r1
    283c:	00000000 	andeq	r0, r0, r0
    2840:	50000000 	andpl	r0, r0, r0
    2844:	6400001b 	strvs	r0, [r0], #-27	; 0xffffffe5
    2848:	0100001b 	tsteq	r0, fp, lsl r0
    284c:	1b685900 	blne	1a18c54 <__ccfg+0x19f8cac>
    2850:	1b960000 	blne	fe582858 <_estack+0xde57d858>
    2854:	00010000 	andeq	r0, r1, r0
    2858:	001b9e59 	andseq	r9, fp, r9, asr lr
    285c:	001bb200 	andseq	fp, fp, r0, lsl #4
    2860:	59000100 	stmdbpl	r0, {r8}
	...
    286c:	00001b6e 	andeq	r1, r0, lr, ror #22
    2870:	00001ba0 	andeq	r1, r0, r0, lsr #23
    2874:	a0580001 	subsge	r0, r8, r1
    2878:	ac00001b 	stcge	0, cr0, [r0], {27}
    287c:	0100001b 	tsteq	r0, fp, lsl r0
    2880:	1bac5300 	blne	feb17488 <_estack+0xdeb12488>
    2884:	1bb20000 	blne	fec8288c <_estack+0xdec7d88c>
    2888:	00010000 	andeq	r0, r1, r0
    288c:	00000058 	andeq	r0, r0, r8, asr r0
    2890:	00000000 	andeq	r0, r0, r0
    2894:	001bdc00 	andseq	sp, fp, r0, lsl #24
    2898:	001c2200 	andseq	r2, ip, r0, lsl #4
    289c:	5a000100 	bpl	2ca4 <NOROM_OSCClockSourceGet+0x90>
	...
    28a8:	00001be2 	andeq	r1, r0, r2, ror #23
    28ac:	00001c0c 	andeq	r1, r0, ip, lsl #24
    28b0:	0c580001 	mrrceq	0, 0, r0, r8, cr1
    28b4:	1c00001c 	stcne	0, cr0, [r0], {28}
    28b8:	0100001c 	tsteq	r0, ip, lsl r0
    28bc:	1c1c5300 	ldcne	3, cr5, [ip], {-0}
    28c0:	1c220000 	stcne	0, cr0, [r2], #-0
    28c4:	00010000 	andeq	r0, r1, r0
    28c8:	00000058 	andeq	r0, r0, r8, asr r0
    28cc:	00000000 	andeq	r0, r0, r0
    28d0:	001c3000 	andseq	r3, ip, r0
    28d4:	001c5000 	andseq	r5, ip, r0
    28d8:	58000100 	stmdapl	r0, {r8}
	...
    28e4:	00001c62 	andeq	r1, r0, r2, ror #24
    28e8:	00001c66 	andeq	r1, r0, r6, ror #24
    28ec:	00740002 	rsbseq	r0, r4, r2
    28f0:	00001c66 	andeq	r1, r0, r6, ror #24
    28f4:	00001c6e 	andeq	r1, r0, lr, ror #24
    28f8:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
    2904:	00001c7a 	andeq	r1, r0, sl, ror ip
    2908:	00001c88 	andeq	r1, r0, r8, lsl #25
    290c:	00580001 	subseq	r0, r8, r1
    2910:	00000000 	andeq	r0, r0, r0
    2914:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2918:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    291c:	0100001d 	tsteq	r0, sp, lsl r0
    2920:	1d425000 	stclne	0, cr5, [r2, #-0]
    2924:	1d540000 	ldclne	0, cr0, [r4, #-0]
    2928:	00010000 	andeq	r0, r1, r0
    292c:	001d5453 	andseq	r5, sp, r3, asr r4
    2930:	001d6800 	andseq	r6, sp, r0, lsl #16
    2934:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2938:	00001d6a 	andeq	r1, r0, sl, ror #26
    293c:	00001d86 	andeq	r1, r0, r6, lsl #27
    2940:	98560001 	ldmdals	r6, {r0}^
    2944:	a400001d 	strge	r0, [r0], #-29	; 0xffffffe3
    2948:	0100001d 	tsteq	r0, sp, lsl r0
    294c:	1da45600 	stcne	6, cr5, [r4]
    2950:	1daa0000 	stcne	0, cr0, [sl]
    2954:	00010000 	andeq	r0, r1, r0
    2958:	001db053 	andseq	fp, sp, r3, asr r0
    295c:	001db400 	andseq	fp, sp, r0, lsl #8
    2960:	53000100 	movwpl	r0, #256	; 0x100
    2964:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
    2968:	00001dc4 	andeq	r1, r0, r4, asr #27
    296c:	c45e0001 	ldrbgt	r0, [lr], #-1
    2970:	da00001d 	ble	29ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1cc>
    2974:	0100001d 	tsteq	r0, sp, lsl r0
    2978:	1dda5300 	ldclne	3, cr5, [sl]
    297c:	1de20000 	stclne	0, cr0, [r2]
    2980:	00010000 	andeq	r0, r1, r0
    2984:	001de85e 	andseq	lr, sp, lr, asr r8
    2988:	001e0400 	andseq	r0, lr, r0, lsl #8
    298c:	53000100 	movwpl	r0, #256	; 0x100
    2990:	00001e04 	andeq	r1, r0, r4, lsl #28
    2994:	00001e0a 	andeq	r1, r0, sl, lsl #28
    2998:	0a5e0001 	beq	17829a4 <__ccfg+0x17629fc>
    299c:	0c00001e 	stceq	0, cr0, [r0], {30}
    29a0:	0100001e 	tsteq	r0, lr, lsl r0
    29a4:	1e185300 	cdpne	3, 1, cr5, cr8, cr0, {0}
    29a8:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
    29ac:	00010000 	andeq	r0, r1, r0
    29b0:	001e1a5e 	andseq	r1, lr, lr, asr sl
    29b4:	001e2e00 	andseq	r2, lr, r0, lsl #28
    29b8:	53000100 	movwpl	r0, #256	; 0x100
    29bc:	00001e2e 	andeq	r1, r0, lr, lsr #28
    29c0:	00001e3e 	andeq	r1, r0, lr, lsr lr
    29c4:	3e560001 	cdpcc	0, 5, cr0, cr6, cr1, {0}
    29c8:	5200001e 	andpl	r0, r0, #30
    29cc:	0100001e 	tsteq	r0, lr, lsl r0
    29d0:	1e605300 	cdpne	3, 6, cr5, cr0, cr0, {0}
    29d4:	1e620000 	cdpne	0, 6, cr0, cr2, cr0, {0}
    29d8:	00010000 	andeq	r0, r1, r0
    29dc:	001e6256 	andseq	r6, lr, r6, asr r2
    29e0:	001e7a00 	andseq	r7, lr, r0, lsl #20
    29e4:	53000100 	movwpl	r0, #256	; 0x100
    29e8:	00001e7a 	andeq	r1, r0, sl, ror lr
    29ec:	00001e94 	muleq	r0, r4, lr
    29f0:	9a560001 	bls	15829fc <__ccfg+0x1562a54>
    29f4:	bc00001e 	stclt	0, cr0, [r0], {30}
    29f8:	0100001e 	tsteq	r0, lr, lsl r0
    29fc:	1ebc5300 	cdpne	3, 11, cr5, cr12, cr0, {0}
    2a00:	1ece0000 	cdpne	0, 12, cr0, cr14, cr0, {0}
    2a04:	00010000 	andeq	r0, r1, r0
    2a08:	001ef456 	andseq	pc, lr, r6, asr r4	; <UNPREDICTABLE>
    2a0c:	001ef800 	andseq	pc, lr, r0, lsl #16
    2a10:	53000100 	movwpl	r0, #256	; 0x100
    2a14:	00001ef8 	strdeq	r1, [r0], -r8
    2a18:	00001f08 	andeq	r1, r0, r8, lsl #30
    2a1c:	08580001 	ldmdaeq	r8, {r0}^
    2a20:	1800001f 	stmdane	r0, {r0, r1, r2, r3, r4}
    2a24:	0100001f 	tsteq	r0, pc, lsl r0
    2a28:	1f185300 	svcne	0x00185300
    2a2c:	1f220000 	svcne	0x00220000
    2a30:	00010000 	andeq	r0, r1, r0
    2a34:	001f2858 	andseq	r2, pc, r8, asr r8	; <UNPREDICTABLE>
    2a38:	001f4a00 	andseq	r4, pc, r0, lsl #20
    2a3c:	53000100 	movwpl	r0, #256	; 0x100
    2a40:	00001f50 	andeq	r1, r0, r0, asr pc
    2a44:	00001f60 	andeq	r1, r0, r0, ror #30
    2a48:	60530001 	subsvs	r0, r3, r1
    2a4c:	7a00001f 	bvc	2ad0 <NOROM_ChipInfo_GetChipFamily+0x18>
    2a50:	0100001f 	tsteq	r0, pc, lsl r0
    2a54:	1f805600 	svcne	0x00805600
    2a58:	1fa00000 	svcne	0x00a00000
    2a5c:	00010000 	andeq	r0, r1, r0
    2a60:	001fa053 	andseq	sl, pc, r3, asr r0	; <UNPREDICTABLE>
    2a64:	001fb200 	andseq	fp, pc, r0, lsl #4
    2a68:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a6c:	00001fc6 	andeq	r1, r0, r6, asr #31
    2a70:	00001fca 	andeq	r1, r0, sl, asr #31
    2a74:	ca580001 	bgt	1602a80 <__ccfg+0x15e2ad8>
    2a78:	ce00001f 	mcrgt	0, 0, r0, cr0, cr15, {0}
    2a7c:	0100001f 	tsteq	r0, pc, lsl r0
    2a80:	1fd85300 	svcne	0x00d85300
    2a84:	1fda0000 	svcne	0x00da0000
    2a88:	00010000 	andeq	r0, r1, r0
    2a8c:	001fda58 	andseq	sp, pc, r8, asr sl	; <UNPREDICTABLE>
    2a90:	001ff000 	andseq	pc, pc, r0
    2a94:	53000100 	movwpl	r0, #256	; 0x100
    2a98:	00001ff0 	strdeq	r1, [r0], -r0
    2a9c:	00002000 	andeq	r2, r0, r0
    2aa0:	00560001 	subseq	r0, r6, r1
    2aa4:	16000020 	strne	r0, [r0], -r0, lsr #32
    2aa8:	01000020 	tsteq	r0, r0, lsr #32
    2aac:	20205300 	eorcs	r5, r0, r0, lsl #6
    2ab0:	20220000 	eorcs	r0, r2, r0
    2ab4:	00010000 	andeq	r0, r1, r0
    2ab8:	00202256 	eoreq	r2, r0, r6, asr r2
    2abc:	00202a00 	eoreq	r2, r0, r0, lsl #20
    2ac0:	53000100 	movwpl	r0, #256	; 0x100
    2ac4:	0000202e 	andeq	r2, r0, lr, lsr #32
    2ac8:	0000203e 	andeq	r2, r0, lr, lsr r0
    2acc:	3e530001 	cdpcc	0, 5, cr0, cr3, cr1, {0}
    2ad0:	4c000020 	stcmi	0, cr0, [r0], {32}
    2ad4:	01000020 	tsteq	r0, r0, lsr #32
    2ad8:	204c5600 	subcs	r5, ip, r0, lsl #12
    2adc:	20520000 	subscs	r0, r2, r0
    2ae0:	00010000 	andeq	r0, r1, r0
    2ae4:	00205258 	eoreq	r5, r0, r8, asr r2
    2ae8:	00205e00 	eoreq	r5, r0, r0, lsl #28
    2aec:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2af0:	0000205e 	andeq	r2, r0, lr, asr r0
    2af4:	00002066 	andeq	r2, r0, r6, rrx
    2af8:	66500001 	ldrbvs	r0, [r0], -r1
    2afc:	78000020 	stmdavc	r0, {r5}
    2b00:	01000020 	tsteq	r0, r0, lsr #32
    2b04:	00005300 	andeq	r5, r0, r0, lsl #6
    2b08:	00000000 	andeq	r0, r0, r0
    2b0c:	1ce80000 	stclne	0, cr0, [r8]
    2b10:	1d060000 	stcne	0, cr0, [r6, #-0]
    2b14:	00010000 	andeq	r0, r1, r0
    2b18:	001d0651 	andseq	r0, sp, r1, asr r6
    2b1c:	001d0c00 	andseq	r0, sp, r0, lsl #24
    2b20:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2b24:	00001d0c 	andeq	r1, r0, ip, lsl #26
    2b28:	00001d2a 	andeq	r1, r0, sl, lsr #26
    2b2c:	30510001 	subscc	r0, r1, r1
    2b30:	7800001d 	stmdavc	r0, {r0, r2, r3, r4}
    2b34:	01000020 	tsteq	r0, r0, lsr #32
    2b38:	00005100 	andeq	r5, r0, r0, lsl #2
    2b3c:	00000000 	andeq	r0, r0, r0
    2b40:	1ce80000 	stclne	0, cr0, [r8]
    2b44:	1ce80000 	stclne	0, cr0, [r8]
    2b48:	00010000 	andeq	r0, r1, r0
    2b4c:	001ce852 	andseq	lr, ip, r2, asr r8
    2b50:	001d0400 	andseq	r0, sp, r0, lsl #8
    2b54:	52000300 	andpl	r0, r0, #0, 6
    2b58:	1daa0493 	cfstrsne	mvf0, [sl, #588]!	; 0x24c
    2b5c:	1dde0000 	ldclne	0, cr0, [lr]
    2b60:	00010000 	andeq	r0, r1, r0
    2b64:	001e0452 	andseq	r0, lr, r2, asr r4
    2b68:	001e0a00 	andseq	r0, lr, r0, lsl #20
    2b6c:	52000100 	andpl	r0, r0, #0, 2
    2b70:	00001e1a 	andeq	r1, r0, sl, lsl lr
    2b74:	00001e34 	andeq	r1, r0, r4, lsr lr
    2b78:	62520001 	subsvs	r0, r2, #1
    2b7c:	8a00001e 	bhi	2bfc <NOROM_OSCClockSourceSet+0x44>
    2b80:	0100001e 	tsteq	r0, lr, lsl r0
    2b84:	1edc5200 	cdpne	2, 13, cr5, cr12, cr0, {0}
    2b88:	1f1c0000 	svcne	0x001c0000
    2b8c:	00010000 	andeq	r0, r1, r0
    2b90:	001f4a52 	andseq	r4, pc, r2, asr sl	; <UNPREDICTABLE>
    2b94:	001f7000 	andseq	r7, pc, r0
    2b98:	52000100 	andpl	r0, r0, #0, 2
    2b9c:	00001fc0 	andeq	r1, r0, r0, asr #31
    2ba0:	00001fca 	andeq	r1, r0, sl, asr #31
    2ba4:	da520001 	ble	1482bb0 <__ccfg+0x1462c08>
    2ba8:	f600001f 			; <UNDEFINED> instruction: 0xf600001f
    2bac:	0100001f 	tsteq	r0, pc, lsl r0
    2bb0:	20225200 	eorcs	r5, r2, r0, lsl #4
    2bb4:	20380000 	eorscs	r0, r8, r0
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	00203e52 	eoreq	r3, r0, r2, asr lr
    2bc0:	00204c00 	eoreq	r4, r0, r0, lsl #24
    2bc4:	52000100 	andpl	r0, r0, #0, 2
    2bc8:	0000205e 	andeq	r2, r0, lr, asr r0
    2bcc:	00002066 	andeq	r2, r0, r6, rrx
    2bd0:	00520001 	subseq	r0, r2, r1
    2bd4:	00000000 	andeq	r0, r0, r0
    2bd8:	66000000 	strvs	r0, [r0], -r0
    2bdc:	6800001d 	stmdavs	r0, {r0, r2, r3, r4}
    2be0:	0100001d 	tsteq	r0, sp, lsl r0
    2be4:	1de05400 	cfstrdne	mvd5, [r0]
    2be8:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    2bec:	00010000 	andeq	r0, r1, r0
    2bf0:	001e0a54 	andseq	r0, lr, r4, asr sl
    2bf4:	001e1a00 	andseq	r1, lr, r0, lsl #20
    2bf8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bfc:	00001e36 	andeq	r1, r0, r6, lsr lr
    2c00:	00001e62 	andeq	r1, r0, r2, ror #28
    2c04:	8c540001 	mrrchi	0, 0, r0, r4, cr1
    2c08:	dc00001e 	stcle	0, cr0, [r0], {30}
    2c0c:	0100001e 	tsteq	r0, lr, lsl r0
    2c10:	1f1e5400 	svcne	0x001e5400
    2c14:	1f4a0000 	svcne	0x004a0000
    2c18:	00010000 	andeq	r0, r1, r0
    2c1c:	001f7254 	andseq	r7, pc, r4, asr r2	; <UNPREDICTABLE>
    2c20:	001fc000 	andseq	ip, pc, r0
    2c24:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c28:	00001fca 	andeq	r1, r0, sl, asr #31
    2c2c:	00001fda 	ldrdeq	r1, [r0], -sl
    2c30:	f8540001 			; <UNDEFINED> instruction: 0xf8540001
    2c34:	2200001f 	andcs	r0, r0, #31
    2c38:	01000020 	tsteq	r0, r0, lsr #32
    2c3c:	203a5400 	eorscs	r5, sl, r0, lsl #8
    2c40:	203e0000 	eorscs	r0, lr, r0
    2c44:	00010000 	andeq	r0, r1, r0
    2c48:	00206654 	eoreq	r6, r0, r4, asr r6
    2c4c:	00207800 	eoreq	r7, r0, r0, lsl #16
    2c50:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2c5c:	00001dda 	ldrdeq	r1, [r0], -sl
    2c60:	00001e04 	andeq	r1, r0, r4, lsl #28
    2c64:	0a580001 	beq	1602c70 <__ccfg+0x15e2cc8>
    2c68:	1a00001e 	bne	2ce8 <NOROM_OSCClockSourceGet+0xd4>
    2c6c:	0100001e 	tsteq	r0, lr, lsl r0
    2c70:	00005800 	andeq	r5, r0, r0, lsl #16
    2c74:	00000000 	andeq	r0, r0, r0
    2c78:	1ebc0000 	cdpne	0, 11, cr0, cr12, cr0, {0}
    2c7c:	1ece0000 	cdpne	0, 12, cr0, cr14, cr0, {0}
    2c80:	00010000 	andeq	r0, r1, r0
    2c84:	001ece59 	andseq	ip, lr, r9, asr lr
    2c88:	001ed600 	andseq	sp, lr, r0, lsl #12
    2c8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2c98:	00001f18 	andeq	r1, r0, r8, lsl pc
    2c9c:	00001f42 	andeq	r1, r0, r2, asr #30
    2ca0:	ca500001 	bgt	1402cac <__ccfg+0x13e2d04>
    2ca4:	da00001f 	ble	2d28 <NOROM_OSCClockSourceGet+0x114>
    2ca8:	0100001f 	tsteq	r0, pc, lsl r0
    2cac:	00005000 	andeq	r5, r0, r0
    2cb0:	00000000 	andeq	r0, r0, r0
    2cb4:	1fa00000 	svcne	0x00a00000
    2cb8:	1fb20000 	svcne	0x00b20000
    2cbc:	00010000 	andeq	r0, r1, r0
    2cc0:	001fb259 	andseq	fp, pc, r9, asr r2	; <UNPREDICTABLE>
    2cc4:	001fba00 	andseq	fp, pc, r0, lsl #20
    2cc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2cd4:	0000202e 	andeq	r2, r0, lr, lsr #32
    2cd8:	0000203e 	andeq	r2, r0, lr, lsr r0
    2cdc:	00500001 	subseq	r0, r0, r1
    2ce0:	00000000 	andeq	r0, r0, r0
    2ce4:	6a000000 	bvs	2cec <NOROM_OSCClockSourceGet+0xd8>
    2ce8:	8600001d 			; <UNDEFINED> instruction: 0x8600001d
    2cec:	0100001d 	tsteq	r0, sp, lsl r0
    2cf0:	20505e00 	subscs	r5, r0, r0, lsl #28
    2cf4:	20520000 	subscs	r0, r2, r0
    2cf8:	00010000 	andeq	r0, r1, r0
    2cfc:	0000005e 	andeq	r0, r0, lr, asr r0
    2d00:	00000000 	andeq	r0, r0, r0
    2d04:	00207c00 	eoreq	r7, r0, r0, lsl #24
    2d08:	00208e00 	eoreq	r8, r0, r0, lsl #28
    2d0c:	70000700 	andvc	r0, r0, r0, lsl #14
    2d10:	3f243f00 	svccc	0x00243f00
    2d14:	00009f26 	andeq	r9, r0, r6, lsr #30
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	20840000 	addcs	r0, r4, r0
    2d20:	208c0000 	addcs	r0, ip, r0
    2d24:	000d0000 	andeq	r0, sp, r0
    2d28:	717a8072 	cmnvc	sl, r2, ror r0
    2d2c:	48244800 	stmdami	r4!, {fp, lr}
    2d30:	26341e26 	ldrtcs	r1, [r4], -r6, lsr #28
    2d34:	00208c9f 	mlaeq	r0, pc, ip, r8	; <UNPREDICTABLE>
    2d38:	0020a800 	eoreq	sl, r0, r0, lsl #16
    2d3c:	71000c00 	tstvc	r0, r0, lsl #24
    2d40:	48244800 	stmdami	r4!, {fp, lr}
    2d44:	1e007226 	cdpne	2, 0, cr7, cr0, cr6, {1}
    2d48:	009f2634 	addseq	r2, pc, r4, lsr r6	; <UNPREDICTABLE>
	...
    2d58:	01000000 	mrseq	r0, (UNDEF: 0)
    2d5c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2d6c:	00010000 	andeq	r0, r1, r0
    2d70:	00000050 	andeq	r0, r0, r0, asr r0
    2d74:	00000000 	andeq	r0, r0, r0
    2d78:	0020d000 	eoreq	sp, r0, r0
    2d7c:	00210e00 	eoreq	r0, r1, r0, lsl #28
    2d80:	50000100 	andpl	r0, r0, r0, lsl #2
    2d84:	0000210e 	andeq	r2, r0, lr, lsl #2
    2d88:	00002170 	andeq	r2, r0, r0, ror r1
    2d8c:	70550001 	subsvc	r0, r5, r1
    2d90:	a4000021 	strge	r0, [r0], #-33	; 0xffffffdf
    2d94:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    2d98:	5001f300 	andpl	pc, r1, r0, lsl #6
    2d9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2da0:	00000000 	andeq	r0, r0, r0
    2da4:	00210c00 	eoreq	r0, r1, r0, lsl #24
    2da8:	00217000 	eoreq	r7, r1, r0
    2dac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2db8:	00002122 	andeq	r2, r0, r2, lsr #2
    2dbc:	00002124 	andeq	r2, r0, r4, lsr #2
    2dc0:	00730007 	rsbseq	r0, r3, r7
    2dc4:	1affff0a 	bne	29f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d4>
    2dc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2dcc:	00000000 	andeq	r0, r0, r0
    2dd0:	00213200 	eoreq	r3, r1, r0, lsl #4
    2dd4:	00214c00 	eoreq	r4, r1, r0, lsl #24
    2dd8:	53000100 	movwpl	r0, #256	; 0x100
	...
    2de4:	00002136 	andeq	r2, r0, r6, lsr r1
    2de8:	00002142 	andeq	r2, r0, r2, asr #2
    2dec:	42520001 	subsmi	r0, r2, #1
    2df0:	46000021 	strmi	r0, [r0], -r1, lsr #32
    2df4:	03000021 	movweq	r0, #33	; 0x21
    2df8:	9f067100 	svcls	0x00067100
    2dfc:	00002146 	andeq	r2, r0, r6, asr #2
    2e00:	0000214e 	andeq	r2, r0, lr, asr #2
    2e04:	00520001 	subseq	r0, r2, r1
    2e08:	00000000 	andeq	r0, r0, r0
    2e0c:	aa000000 	bge	2e14 <port_confs+0x20>
    2e10:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    2e14:	01000022 	tsteq	r0, r2, lsr #32
    2e18:	00005400 	andeq	r5, r0, r0, lsl #8
    2e1c:	00000000 	andeq	r0, r0, r0
    2e20:	22100000 	andscs	r0, r0, #0
    2e24:	221a0000 	andscs	r0, sl, #0
    2e28:	00010000 	andeq	r0, r1, r0
    2e2c:	00000053 	andeq	r0, r0, r3, asr r0
    2e30:	00000000 	andeq	r0, r0, r0
    2e34:	00224800 	eoreq	r4, r2, r0, lsl #16
    2e38:	00226e00 	eoreq	r6, r2, r0, lsl #28
    2e3c:	50000100 	andpl	r0, r0, r0, lsl #2
    2e40:	0000226e 	andeq	r2, r0, lr, ror #4
    2e44:	000022c4 	andeq	r2, r0, r4, asr #5
    2e48:	01f30004 	mvnseq	r0, r4
    2e4c:	00009f50 	andeq	r9, r0, r0, asr pc
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	22700000 	rsbscs	r0, r0, #0
    2e58:	22a40000 	adccs	r0, r4, #0
    2e5c:	00010000 	andeq	r0, r1, r0
    2e60:	00000053 	andeq	r0, r0, r3, asr r0
    2e64:	00000000 	andeq	r0, r0, r0
    2e68:	00227400 	eoreq	r7, r2, r0, lsl #8
    2e6c:	00228200 	eoreq	r8, r2, r0, lsl #4
    2e70:	51000100 	mrspl	r0, (UNDEF: 16)
    2e74:	00002282 	andeq	r2, r0, r2, lsl #5
    2e78:	00002284 	andeq	r2, r0, r4, lsl #5
    2e7c:	00720006 	rsbseq	r0, r2, r6
    2e80:	9f1c0073 	svcls	0x001c0073
    2e84:	00002284 	andeq	r2, r0, r4, lsl #5
    2e88:	0000228a 	andeq	r2, r0, sl, lsl #5
    2e8c:	00510001 	subseq	r0, r1, r1
    2e90:	00000000 	andeq	r0, r0, r0
    2e94:	60000000 	andvs	r0, r0, r0
    2e98:	72000022 	andvc	r0, r0, #34	; 0x22
    2e9c:	01000022 	tsteq	r0, r2, lsr #32
    2ea0:	00005300 	andeq	r5, r0, r0, lsl #6
    2ea4:	00000000 	andeq	r0, r0, r0
    2ea8:	22c40000 	sbccs	r0, r4, #0
    2eac:	22e70000 	rsccs	r0, r7, #0
    2eb0:	00010000 	andeq	r0, r1, r0
    2eb4:	0022e750 	eoreq	lr, r2, r0, asr r7
    2eb8:	0022f200 	eoreq	pc, r2, r0, lsl #4
    2ebc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2ec0:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2ec4:	000022fa 	strdeq	r2, [r0], -sl
    2ec8:	fa500001 	blx	1402ed4 <__ccfg+0x13e2f2c>
    2ecc:	46000022 	strmi	r0, [r0], -r2, lsr #32
    2ed0:	01000023 	tsteq	r0, r3, lsr #32
    2ed4:	00005400 	andeq	r5, r0, r0, lsl #8
    2ed8:	00000000 	andeq	r0, r0, r0
    2edc:	23000000 	movwcs	r0, #0
    2ee0:	23040000 	movwcs	r0, #16384	; 0x4000
    2ee4:	00010000 	andeq	r0, r1, r0
    2ee8:	00230653 	eoreq	r0, r3, r3, asr r6
    2eec:	00231400 	eoreq	r1, r3, r0, lsl #8
    2ef0:	53000100 	movwpl	r0, #256	; 0x100
    2ef4:	00002316 	andeq	r2, r0, r6, lsl r3
    2ef8:	0000231e 	andeq	r2, r0, lr, lsl r3
    2efc:	00530001 	subseq	r0, r3, r1
	...
    2f08:	34000023 	strcc	r0, [r0], #-35	; 0xffffffdd
    2f0c:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    2f10:	4c007400 	cfstrsmi	mvf7, [r0], {-0}
    2f14:	23349f26 	teqcs	r4, #38, 30	; 0x98
    2f18:	23700000 	cmncs	r0, #0
    2f1c:	00060000 	andeq	r0, r6, r0
    2f20:	4c5001f3 	ldfmie	f0, [r0], {243}	; 0xf3
    2f24:	00009f26 	andeq	r9, r0, r6, lsr #30
    2f28:	00000000 	andeq	r0, r0, r0
    2f2c:	22fa0000 	rscscs	r0, sl, #0
    2f30:	23040000 	movwcs	r0, #16384	; 0x4000
    2f34:	00010000 	andeq	r0, r1, r0
    2f38:	00000053 	andeq	r0, r0, r3, asr r0
    2f3c:	00000000 	andeq	r0, r0, r0
    2f40:	00237000 	eoreq	r7, r3, r0
    2f44:	00238400 	eoreq	r8, r3, r0, lsl #8
    2f48:	50000100 	andpl	r0, r0, r0, lsl #2
    2f4c:	00002384 	andeq	r2, r0, r4, lsl #7
    2f50:	000023cc 	andeq	r2, r0, ip, asr #7
    2f54:	01f30004 	mvnseq	r0, r4
    2f58:	00009f50 	andeq	r9, r0, r0, asr pc
    2f5c:	00000000 	andeq	r0, r0, r0
    2f60:	23760000 	cmncs	r6, #0
    2f64:	237e0000 	cmncs	lr, #0
    2f68:	00010000 	andeq	r0, r1, r0
    2f6c:	00000053 	andeq	r0, r0, r3, asr r0
    2f70:	00000000 	andeq	r0, r0, r0
    2f74:	00237a00 	eoreq	r7, r3, r0, lsl #20
    2f78:	00238c00 	eoreq	r8, r3, r0, lsl #24
    2f7c:	52000100 	andpl	r0, r0, #0, 2
    2f80:	0000238c 	andeq	r2, r0, ip, lsl #7
    2f84:	0000238e 	andeq	r2, r0, lr, lsl #7
    2f88:	00720005 	rsbseq	r0, r2, r5
    2f8c:	8e9f2531 	mrchi	5, 4, r2, cr15, cr1, {1}
    2f90:	94000023 	strls	r0, [r0], #-35	; 0xffffffdd
    2f94:	01000023 	tsteq	r0, r3, lsr #32
    2f98:	23985200 	orrscs	r5, r8, #0, 4
    2f9c:	23aa0000 			; <UNDEFINED> instruction: 0x23aa0000
    2fa0:	00010000 	andeq	r0, r1, r0
    2fa4:	0023ae52 	eoreq	sl, r3, r2, asr lr
    2fa8:	0023b800 	eoreq	fp, r3, r0, lsl #16
    2fac:	52000100 	andpl	r0, r0, #0, 2
    2fb0:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    2fb4:	000023cc 	andeq	r2, r0, ip, asr #7
    2fb8:	00520001 	subseq	r0, r2, r1
    2fbc:	00000000 	andeq	r0, r0, r0
    2fc0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    2fc4:	88000023 	stmdahi	r0, {r0, r1, r5}
    2fc8:	01000023 	tsteq	r0, r3, lsr #32
    2fcc:	23885300 	orrcs	r5, r8, #0, 6
    2fd0:	238a0000 	orrcs	r0, sl, #0
    2fd4:	00050000 	andeq	r0, r5, r0
    2fd8:	25310073 	ldrcs	r0, [r1, #-115]!	; 0xffffff8d
    2fdc:	00238a9f 	mlaeq	r3, pc, sl, r8	; <UNPREDICTABLE>
    2fe0:	00238c00 	eoreq	r8, r3, r0, lsl #24
    2fe4:	53000100 	movwpl	r0, #256	; 0x100
    2fe8:	0000238c 	andeq	r2, r0, ip, lsl #7
    2fec:	00002398 	muleq	r0, r8, r3
    2ff0:	ff0a0004 			; <UNDEFINED> instruction: 0xff0a0004
    2ff4:	23989fff 	orrscs	r9, r8, #1020	; 0x3fc
    2ff8:	239e0000 	orrscs	r0, lr, #0
    2ffc:	00010000 	andeq	r0, r1, r0
    3000:	0023a253 	eoreq	sl, r3, r3, asr r2
    3004:	0023a800 	eoreq	sl, r3, r0, lsl #16
    3008:	53000100 	movwpl	r0, #256	; 0x100
    300c:	000023a8 	andeq	r2, r0, r8, lsr #7
    3010:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    3014:	9f310002 	svcls	0x00310002
    3018:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    301c:	000023cc 	andeq	r2, r0, ip, asr #7
    3020:	00530001 	subseq	r0, r3, r1
    3024:	00000000 	andeq	r0, r0, r0
    3028:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    302c:	84000023 	strhi	r0, [r0], #-35	; 0xffffffdd
    3030:	02000023 	andeq	r0, r0, #35	; 0x23
    3034:	849f3000 	ldrhi	r3, [pc], #0	; 303c <__exidx_end+0x1c8>
    3038:	c0000023 	andgt	r0, r0, r3, lsr #32
    303c:	01000023 	tsteq	r0, r3, lsr #32
    3040:	00005000 	andeq	r5, r0, r0
    3044:	00000000 	andeq	r0, r0, r0
    3048:	23c00000 	biccs	r0, r0, #0
    304c:	23c40000 	biccs	r0, r4, #0
    3050:	00080000 	andeq	r0, r8, r0
    3054:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    3058:	9f210073 	svcls	0x00210073
    305c:	000023c4 	andeq	r2, r0, r4, asr #7
    3060:	000023cc 	andeq	r2, r0, ip, asr #7
    3064:	00500001 	subseq	r0, r0, r1
    3068:	00000000 	andeq	r0, r0, r0
    306c:	d6000000 	strle	r0, [r0], -r0
    3070:	da000023 	ble	3104 <__exidx_end+0x290>
    3074:	0a000023 	beq	3108 <__exidx_end+0x294>
    3078:	33007000 	movwcc	r7, #0
    307c:	7324381a 			; <UNDEFINED> instruction: 0x7324381a
    3080:	de9f2100 	fmllee	f2, f7, f0
    3084:	e4000023 	str	r0, [r0], #-35	; 0xffffffdd
    3088:	01000023 	tsteq	r0, r3, lsr #32
    308c:	00005000 	andeq	r5, r0, r0
	...
    309c:	00070000 	andeq	r0, r7, r0
    30a0:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    30a4:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    30b0:	ec000023 	stc	0, cr0, [r0], {35}	; 0x23
    30b4:	0f000023 	svceq	0x00000023
    30b8:	08007000 	stmdaeq	r0, {ip, sp, lr}
    30bc:	00701afc 	ldrshteq	r1, [r0], #-172	; 0xffffff54
    30c0:	f3f88011 	vshr.u32	d24, d1, #8
    30c4:	9f211a67 	svcls	0x00211a67
	...
    30d0:	000023e8 	andeq	r2, r0, r8, ror #7
    30d4:	000023ec 	andeq	r2, r0, ip, ror #7
    30d8:	00500001 	subseq	r0, r0, r1
    30dc:	00000000 	andeq	r0, r0, r0
    30e0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    30e4:	fc000023 	stc2	0, cr0, [r0], {35}	; 0x23
    30e8:	0f000023 	svceq	0x00000023
    30ec:	08007000 	stmdaeq	r0, {ip, sp, lr}
    30f0:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    30f4:	fcffc00c 	ldc2l	0, cr12, [pc], #48	; 312c <__exidx_end+0x2b8>
    30f8:	9f211a00 	svcls	0x00211a00
	...
    3104:	000023f8 	strdeq	r2, [r0], -r8
    3108:	000023fc 	strdeq	r2, [r0], -ip
    310c:	00500001 	subseq	r0, r0, r1
    3110:	00000000 	andeq	r0, r0, r0
    3114:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3118:	5e000024 	cdppl	0, 0, cr0, cr0, cr4, {1}
    311c:	01000024 	tsteq	r0, r4, lsr #32
    3120:	245e5000 	ldrbcs	r5, [lr], #-0
    3124:	246c0000 	strbtcs	r0, [ip], #-0
    3128:	00040000 	andeq	r0, r4, r0
    312c:	9f5001f3 	svcls	0x005001f3
	...
    3138:	00002448 	andeq	r2, r0, r8, asr #8
    313c:	00002450 	andeq	r2, r0, r0, asr r4
    3140:	00740017 	rsbseq	r0, r4, r7, lsl r0
    3144:	1aff000a 	bne	fffc3174 <_estack+0xdffbe174>
    3148:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
    314c:	0072211a 	rsbseq	r2, r2, sl, lsl r1
    3150:	73212444 			; <UNDEFINED> instruction: 0x73212444
    3154:	21244000 			; <UNDEFINED> instruction: 0x21244000
    3158:	0024549f 	mlaeq	r4, pc, r4, r5	; <UNPREDICTABLE>
    315c:	00246c00 	eoreq	r6, r4, r0, lsl #24
    3160:	53000100 	movwpl	r0, #256	; 0x100
	...
    316c:	00002410 	andeq	r2, r0, r0, lsl r4
    3170:	0000245a 	andeq	r2, r0, sl, asr r4
    3174:	00540001 	subseq	r0, r4, r1
    3178:	00000000 	andeq	r0, r0, r0
    317c:	16000000 	strne	r0, [r0], -r0
    3180:	2a000024 	bcs	3218 <__exidx_end+0x3a4>
    3184:	01000024 	tsteq	r0, r4, lsr #32
    3188:	242a5200 	strtcs	r5, [sl], #-512	; 0xfffffe00
    318c:	24360000 	ldrtcs	r0, [r6], #-0
    3190:	00060000 	andeq	r0, r6, r0
    3194:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    3198:	24489f24 	strbcs	r9, [r8], #-3876	; 0xfffff0dc
    319c:	24500000 	ldrbcs	r0, [r0], #-0
    31a0:	00010000 	andeq	r0, r1, r0
    31a4:	00000052 	andeq	r0, r0, r2, asr r0
    31a8:	00000000 	andeq	r0, r0, r0
    31ac:	00241e00 	eoreq	r1, r4, r0, lsl #28
    31b0:	00243c00 	eoreq	r3, r4, r0, lsl #24
    31b4:	53000100 	movwpl	r0, #256	; 0x100
    31b8:	0000243c 	andeq	r2, r0, ip, lsr r4
    31bc:	00002448 	andeq	r2, r0, r8, asr #8
    31c0:	00740006 	rsbseq	r0, r4, r6
    31c4:	9f24f009 	svcls	0x0024f009
    31c8:	00002448 	andeq	r2, r0, r8, asr #8
    31cc:	00002454 	andeq	r2, r0, r4, asr r4
    31d0:	00530001 	subseq	r0, r3, r1
    31d4:	00000000 	andeq	r0, r0, r0
    31d8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    31dc:	2a000024 	bcs	3274 <__exidx_end+0x400>
    31e0:	06000024 	streq	r0, [r0], -r4, lsr #32
    31e4:	72007600 	andvc	r7, r0, #0, 12
    31e8:	2a9f2200 	bcs	fe7cb9f0 <_estack+0xde7c69f0>
    31ec:	32000024 	andcc	r0, r0, #36	; 0x24
    31f0:	01000024 	tsteq	r0, r4, lsr #32
    31f4:	24325200 	ldrtcs	r5, [r2], #-512	; 0xfffffe00
    31f8:	24340000 	ldrtcs	r0, [r4], #-0
    31fc:	00090000 	andeq	r0, r9, r0
    3200:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    3204:	22007624 	andcs	r7, r0, #36, 12	; 0x2400000
    3208:	0024349f 	mlaeq	r4, pc, r4, r3	; <UNPREDICTABLE>
    320c:	00243600 	eoreq	r3, r4, r0, lsl #12
    3210:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3214:	0000243a 	andeq	r2, r0, sl, lsr r4
    3218:	0000243c 	andeq	r2, r0, ip, lsr r4
    321c:	00710006 	rsbseq	r0, r1, r6
    3220:	9f220073 	svcls	0x00220073
    3224:	0000243c 	andeq	r2, r0, ip, lsr r4
    3228:	00002444 	andeq	r2, r0, r4, asr #8
    322c:	44530001 	ldrbmi	r0, [r3], #-1
    3230:	46000024 	strmi	r0, [r0], -r4, lsr #32
    3234:	09000024 	stmdbeq	r0, {r2, r5}
    3238:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    323c:	007124f0 	ldrshteq	r2, [r1], #-64	; 0xffffffc0
    3240:	24469f22 	strbcs	r9, [r6], #-3874	; 0xfffff0de
    3244:	24480000 	strbcs	r0, [r8], #-0
    3248:	00020000 	andeq	r0, r2, r0
    324c:	00009f30 	andeq	r9, r0, r0, lsr pc
    3250:	00000000 	andeq	r0, r0, r0
    3254:	246c0000 	strbtcs	r0, [ip], #-0
    3258:	24740000 	ldrbtcs	r0, [r4], #-0
    325c:	00010000 	andeq	r0, r1, r0
    3260:	00247450 	eoreq	r7, r4, r0, asr r4
    3264:	00248000 	eoreq	r8, r4, r0
    3268:	f3000400 	vshl.u8	d0, d0, d0
    326c:	009f5001 	addseq	r5, pc, r1
    3270:	00000000 	andeq	r0, r0, r0
    3274:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3278:	7a000024 	bvc	3310 <__exidx_end+0x49c>
    327c:	02000024 	andeq	r0, r0, #36	; 0x24
    3280:	7a9f3000 	bvc	fe7cf288 <_estack+0xde7ca288>
    3284:	80000024 	andhi	r0, r0, r4, lsr #32
    3288:	01000024 	tsteq	r0, r4, lsr #32
    328c:	00005000 	andeq	r5, r0, r0
    3290:	00000000 	andeq	r0, r0, r0
    3294:	246e0000 	strbtcs	r0, [lr], #-0
    3298:	24740000 	ldrbtcs	r0, [r4], #-0
    329c:	00010000 	andeq	r0, r1, r0
    32a0:	00247450 	eoreq	r7, r4, r0, asr r4
    32a4:	00248000 	eoreq	r8, r4, r0
    32a8:	f3000400 	vshl.u8	d0, d0, d0
    32ac:	009f5001 	addseq	r5, pc, r1
    32b0:	00000000 	andeq	r0, r0, r0
    32b4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    32b8:	7a000024 	bvc	3350 <__exidx_end+0x4dc>
    32bc:	01000024 	tsteq	r0, r4, lsr #32
    32c0:	00005000 	andeq	r5, r0, r0
    32c4:	00000000 	andeq	r0, r0, r0
    32c8:	24800000 	strcs	r0, [r0], #0
    32cc:	24880000 	strcs	r0, [r8], #0
    32d0:	00010000 	andeq	r0, r1, r0
    32d4:	00248850 	eoreq	r8, r4, r0, asr r8
    32d8:	00249400 	eoreq	r9, r4, r0, lsl #8
    32dc:	f3000400 	vshl.u8	d0, d0, d0
    32e0:	009f5001 	addseq	r5, pc, r1
    32e4:	00000000 	andeq	r0, r0, r0
    32e8:	80000000 	andhi	r0, r0, r0
    32ec:	8e000024 	cdphi	0, 0, cr0, cr0, cr4, {1}
    32f0:	02000024 	andeq	r0, r0, #36	; 0x24
    32f4:	8e9f3100 	fmlhie	f3, f7, f0
    32f8:	94000024 	strls	r0, [r0], #-36	; 0xffffffdc
    32fc:	01000024 	tsteq	r0, r4, lsr #32
    3300:	00005000 	andeq	r5, r0, r0
    3304:	00000000 	andeq	r0, r0, r0
    3308:	24820000 	strcs	r0, [r2], #0
    330c:	24880000 	strcs	r0, [r8], #0
    3310:	00010000 	andeq	r0, r1, r0
    3314:	00248850 	eoreq	r8, r4, r0, asr r8
    3318:	00249400 	eoreq	r9, r4, r0, lsl #8
    331c:	f3000400 	vshl.u8	d0, d0, d0
    3320:	009f5001 	addseq	r5, pc, r1
    3324:	00000000 	andeq	r0, r0, r0
    3328:	8c000000 	stchi	0, cr0, [r0], {-0}
    332c:	8e000024 	cdphi	0, 0, cr0, cr0, cr4, {1}
    3330:	01000024 	tsteq	r0, r4, lsr #32
    3334:	00005000 	andeq	r5, r0, r0
    3338:	00000000 	andeq	r0, r0, r0
    333c:	24940000 	ldrcs	r0, [r4], #0
    3340:	249c0000 	ldrcs	r0, [ip], #0
    3344:	00010000 	andeq	r0, r1, r0
    3348:	00249c50 	eoreq	r9, r4, r0, asr ip
    334c:	0024a800 	eoreq	sl, r4, r0, lsl #16
    3350:	f3000400 	vshl.u8	d0, d0, d0
    3354:	009f5001 	addseq	r5, pc, r1
    3358:	00000000 	andeq	r0, r0, r0
    335c:	94000000 	strls	r0, [r0], #-0
    3360:	a2000024 	andge	r0, r0, #36	; 0x24
    3364:	02000024 	andeq	r0, r0, #36	; 0x24
    3368:	a29f3100 	addsge	r3, pc, #0, 2
    336c:	a8000024 	stmdage	r0, {r2, r5}
    3370:	01000024 	tsteq	r0, r4, lsr #32
    3374:	00005000 	andeq	r5, r0, r0
    3378:	00000000 	andeq	r0, r0, r0
    337c:	24960000 	ldrcs	r0, [r6], #0
    3380:	249c0000 	ldrcs	r0, [ip], #0
    3384:	00010000 	andeq	r0, r1, r0
    3388:	00249c50 	eoreq	r9, r4, r0, asr ip
    338c:	0024a800 	eoreq	sl, r4, r0, lsl #16
    3390:	f3000400 	vshl.u8	d0, d0, d0
    3394:	009f5001 	addseq	r5, pc, r1
    3398:	00000000 	andeq	r0, r0, r0
    339c:	a0000000 	andge	r0, r0, r0
    33a0:	a2000024 	andge	r0, r0, #36	; 0x24
    33a4:	01000024 	tsteq	r0, r4, lsr #32
    33a8:	00005000 	andeq	r5, r0, r0
    33ac:	00000000 	andeq	r0, r0, r0
    33b0:	24a80000 	strtcs	r0, [r8], #0
    33b4:	24b40000 	ldrtcs	r0, [r4], #0
    33b8:	00010000 	andeq	r0, r1, r0
    33bc:	0024b450 	eoreq	fp, r4, r0, asr r4
    33c0:	0024d000 	eoreq	sp, r4, r0
    33c4:	f3000400 	vshl.u8	d0, d0, d0
    33c8:	009f5001 	addseq	r5, pc, r1
    33cc:	00000000 	andeq	r0, r0, r0
    33d0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    33d4:	ca000024 	bgt	346c <__exidx_end+0x5f8>
    33d8:	02000024 	andeq	r0, r0, #36	; 0x24
    33dc:	ca9f3000 	bgt	fe7cf3e4 <_estack+0xde7ca3e4>
    33e0:	d0000024 	andle	r0, r0, r4, lsr #32
    33e4:	01000024 	tsteq	r0, r4, lsr #32
    33e8:	00005000 	andeq	r5, r0, r0
    33ec:	00000000 	andeq	r0, r0, r0
    33f0:	24aa0000 	strtcs	r0, [sl], #0
    33f4:	24b40000 	ldrtcs	r0, [r4], #0
    33f8:	00010000 	andeq	r0, r1, r0
    33fc:	0024b450 	eoreq	fp, r4, r0, asr r4
    3400:	0024d000 	eoreq	sp, r4, r0
    3404:	f3000400 	vshl.u8	d0, d0, d0
    3408:	009f5001 	addseq	r5, pc, r1
    340c:	00000000 	andeq	r0, r0, r0
    3410:	bc000000 	stclt	0, cr0, [r0], {-0}
    3414:	c4000024 	strgt	r0, [r0], #-36	; 0xffffffdc
    3418:	10000024 	andne	r0, r0, r4, lsr #32
    341c:	4c007300 	stcmi	3, cr7, [r0], {-0}
    3420:	481a2446 	ldmdami	sl, {r1, r2, r6, sl, sp}
    3424:	72243225 	eorvc	r3, r4, #1342177282	; 0x50000002
    3428:	21243800 			; <UNDEFINED> instruction: 0x21243800
    342c:	0024c69f 	mlaeq	r4, pc, r6, ip	; <UNPREDICTABLE>
    3430:	0024ca00 	eoreq	ip, r4, r0, lsl #20
    3434:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3440:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    3444:	000024c4 	andeq	r2, r0, r4, asr #9
    3448:	00530001 	subseq	r0, r3, r1
    344c:	00000000 	andeq	r0, r0, r0
    3450:	d4000000 	strle	r0, [r0], #-0
    3454:	d8000024 	stmdale	r0, {r2, r5}
    3458:	09000024 	stmdbeq	r0, {r2, r5}
    345c:	48007000 	stmdami	r0, {ip, sp, lr}
    3460:	431a2440 	tstmi	sl, #64, 8	; 0x40000000
    3464:	00009f25 	andeq	r9, r0, r5, lsr #30
    3468:	00000000 	andeq	r0, r0, r0
    346c:	24e00000 	strbtcs	r0, [r0], #0
    3470:	24ec0000 	strbtcs	r0, [ip], #0
    3474:	00010000 	andeq	r0, r1, r0
    3478:	0024ec50 	eoreq	lr, r4, r0, asr ip
    347c:	00250c00 	eoreq	r0, r5, r0, lsl #24
    3480:	f3000400 	vshl.u8	d0, d0, d0
    3484:	009f5001 	addseq	r5, pc, r1
    3488:	00000000 	andeq	r0, r0, r0
    348c:	e0000000 	and	r0, r0, r0
    3490:	02000024 	andeq	r0, r0, #36	; 0x24
    3494:	06000025 	streq	r0, [r0], -r5, lsr #32
    3498:	80000c00 	andhi	r0, r0, r0, lsl #24
    349c:	029f403f 	addseq	r4, pc, #63	; 0x3f
    34a0:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    34a4:	01000025 	tsteq	r0, r5, lsr #32
    34a8:	00005000 	andeq	r5, r0, r0
    34ac:	00000000 	andeq	r0, r0, r0
    34b0:	24e20000 	strbtcs	r0, [r2], #0
    34b4:	24ec0000 	strbtcs	r0, [ip], #0
    34b8:	00010000 	andeq	r0, r1, r0
    34bc:	0024ec50 	eoreq	lr, r4, r0, asr ip
    34c0:	00250c00 	eoreq	r0, r5, r0, lsl #24
    34c4:	f3000400 	vshl.u8	d0, d0, d0
    34c8:	009f5001 	addseq	r5, pc, r1
    34cc:	00000000 	andeq	r0, r0, r0
    34d0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    34d4:	f6000024 			; <UNDEFINED> instruction: 0xf6000024
    34d8:	10000024 	andne	r0, r0, r4, lsr #32
    34dc:	0a007300 	beq	200e4 <__ccfg+0x13c>
    34e0:	341a03f0 	ldrcc	r0, [sl], #-1008	; 0xfffffc10
    34e4:	72244025 	eorvc	r4, r4, #37	; 0x25
    34e8:	21244600 			; <UNDEFINED> instruction: 0x21244600
    34ec:	0025009f 	mlaeq	r5, pc, r0, r0	; <UNPREDICTABLE>
    34f0:	00250200 	eoreq	r0, r5, r0, lsl #4
    34f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3500:	000024e8 	andeq	r2, r0, r8, ror #9
    3504:	000024f6 	strdeq	r2, [r0], -r6
    3508:	00530001 	subseq	r0, r3, r1
    350c:	00000000 	andeq	r0, r0, r0
    3510:	0c000000 	stceq	0, cr0, [r0], {-0}
    3514:	14000025 	strne	r0, [r0], #-37	; 0xffffffdb
    3518:	01000025 	tsteq	r0, r5, lsr #32
    351c:	25145000 	ldrcs	r5, [r4, #-0]
    3520:	25200000 	strcs	r0, [r0, #-0]!
    3524:	00040000 	andeq	r0, r4, r0
    3528:	9f5001f3 	svcls	0x005001f3
	...
    3534:	0000250c 	andeq	r2, r0, ip, lsl #10
    3538:	0000251a 	andeq	r2, r0, sl, lsl r5
    353c:	9f300002 	svcls	0x00300002
    3540:	0000251a 	andeq	r2, r0, sl, lsl r5
    3544:	00002520 	andeq	r2, r0, r0, lsr #10
    3548:	00500001 	subseq	r0, r0, r1
    354c:	00000000 	andeq	r0, r0, r0
    3550:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3554:	14000025 	strne	r0, [r0], #-37	; 0xffffffdb
    3558:	01000025 	tsteq	r0, r5, lsr #32
    355c:	25145000 	ldrcs	r5, [r4, #-0]
    3560:	25200000 	strcs	r0, [r0, #-0]!
    3564:	00040000 	andeq	r0, r4, r0
    3568:	9f5001f3 	svcls	0x005001f3
	...
    3574:	00002518 	andeq	r2, r0, r8, lsl r5
    3578:	0000251a 	andeq	r2, r0, sl, lsl r5
    357c:	00500001 	subseq	r0, r0, r1
    3580:	00000000 	andeq	r0, r0, r0
    3584:	20000000 	andcs	r0, r0, r0
    3588:	28000025 	stmdacs	r0, {r0, r2, r5}
    358c:	01000025 	tsteq	r0, r5, lsr #32
    3590:	25285000 	strcs	r5, [r8, #-0]!
    3594:	25340000 	ldrcs	r0, [r4, #-0]!
    3598:	00040000 	andeq	r0, r4, r0
    359c:	9f5001f3 	svcls	0x005001f3
	...
    35a8:	00002520 	andeq	r2, r0, r0, lsr #10
    35ac:	0000252e 	andeq	r2, r0, lr, lsr #10
    35b0:	9f300002 	svcls	0x00300002
    35b4:	0000252e 	andeq	r2, r0, lr, lsr #10
    35b8:	00002534 	andeq	r2, r0, r4, lsr r5
    35bc:	00500001 	subseq	r0, r0, r1
    35c0:	00000000 	andeq	r0, r0, r0
    35c4:	22000000 	andcs	r0, r0, #0
    35c8:	28000025 	stmdacs	r0, {r0, r2, r5}
    35cc:	01000025 	tsteq	r0, r5, lsr #32
    35d0:	25285000 	strcs	r5, [r8, #-0]!
    35d4:	25340000 	ldrcs	r0, [r4, #-0]!
    35d8:	00040000 	andeq	r0, r4, r0
    35dc:	9f5001f3 	svcls	0x005001f3
	...
    35e8:	0000252c 	andeq	r2, r0, ip, lsr #10
    35ec:	0000252e 	andeq	r2, r0, lr, lsr #10
    35f0:	00500001 	subseq	r0, r0, r1
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	34000000 	strcc	r0, [r0], #-0
    35fc:	3a000025 	bcc	3698 <__exidx_end+0x824>
    3600:	01000025 	tsteq	r0, r5, lsr #32
    3604:	253a5000 	ldrcs	r5, [sl, #-0]!
    3608:	26240000 	strtcs	r0, [r4], -r0
    360c:	00010000 	andeq	r0, r1, r0
    3610:	00262455 	eoreq	r2, r6, r5, asr r4
    3614:	00264400 	eoreq	r4, r6, r0, lsl #8
    3618:	f3000400 	vshl.u8	d0, d0, d0
    361c:	009f5001 	addseq	r5, pc, r1
    3620:	00000000 	andeq	r0, r0, r0
    3624:	34000000 	strcc	r0, [r0], #-0
    3628:	3d000025 	stccc	0, cr0, [r0, #-148]	; 0xffffff6c
    362c:	01000025 	tsteq	r0, r5, lsr #32
    3630:	253d5100 	ldrcs	r5, [sp, #-256]!	; 0xffffff00
    3634:	26440000 	strbcs	r0, [r4], -r0
    3638:	00040000 	andeq	r0, r4, r0
    363c:	9f5101f3 	svcls	0x005101f3
	...
    3648:	00002542 	andeq	r2, r0, r2, asr #10
    364c:	00002546 	andeq	r2, r0, r6, asr #10
    3650:	46500001 	ldrbmi	r0, [r0], -r1
    3654:	49000025 	stmdbmi	r0, {r0, r2, r5}
    3658:	01000025 	tsteq	r0, r5, lsr #32
    365c:	254e5200 	strbcs	r5, [lr, #-512]	; 0xfffffe00
    3660:	25520000 	ldrbcs	r0, [r2, #-0]
    3664:	00010000 	andeq	r0, r1, r0
    3668:	00257c50 	eoreq	r7, r5, r0, asr ip
    366c:	00257e00 	eoreq	r7, r5, r0, lsl #28
    3670:	50000100 	andpl	r0, r0, r0, lsl #2
    3674:	0000257e 	andeq	r2, r0, lr, ror r5
    3678:	00002581 	andeq	r2, r0, r1, lsl #11
    367c:	8a520001 	bhi	1483688 <__ccfg+0x14636e0>
    3680:	8c000025 	stchi	0, cr0, [r0], {37}	; 0x25
    3684:	01000025 	tsteq	r0, r5, lsr #32
    3688:	258c5000 	strcs	r5, [ip]
    368c:	258f0000 	strcs	r0, [pc]	; 3694 <__exidx_end+0x820>
    3690:	00010000 	andeq	r0, r1, r0
    3694:	00259a52 	eoreq	r9, r5, r2, asr sl
    3698:	00259c00 	eoreq	r9, r5, r0, lsl #24
    369c:	50000100 	andpl	r0, r0, r0, lsl #2
    36a0:	0000259c 	muleq	r0, ip, r5
    36a4:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    36a8:	a6520001 	ldrbge	r0, [r2], -r1
    36ac:	a8000025 	stmdage	r0, {r0, r2, r5}
    36b0:	01000025 	tsteq	r0, r5, lsr #32
    36b4:	25b85000 	ldrcs	r5, [r8, #0]!
    36b8:	25bc0000 	ldrcs	r0, [ip, #0]!
    36bc:	00010000 	andeq	r0, r1, r0
    36c0:	0025ca50 	eoreq	ip, r5, r0, asr sl
    36c4:	0025cc00 	eoreq	ip, r5, r0, lsl #24
    36c8:	50000100 	andpl	r0, r0, r0, lsl #2
    36cc:	000025cc 	andeq	r2, r0, ip, asr #11
    36d0:	000025cf 	andeq	r2, r0, pc, asr #11
    36d4:	d6520001 	ldrble	r0, [r2], -r1
    36d8:	d8000025 	stmdale	r0, {r0, r2, r5}
    36dc:	01000025 	tsteq	r0, r5, lsr #32
    36e0:	25e85000 	strbcs	r5, [r8, #0]!
    36e4:	25ea0000 	strbcs	r0, [sl, #0]!
    36e8:	00010000 	andeq	r0, r1, r0
    36ec:	0025fa50 	eoreq	pc, r5, r0, asr sl	; <UNPREDICTABLE>
    36f0:	0025fe00 	eoreq	pc, r5, r0, lsl #28
    36f4:	50000100 	andpl	r0, r0, r0, lsl #2
    36f8:	00002612 	andeq	r2, r0, r2, lsl r6
    36fc:	00002614 	andeq	r2, r0, r4, lsl r6
    3700:	14500001 	ldrbne	r0, [r0], #-1
    3704:	17000026 	strne	r0, [r0, -r6, lsr #32]
    3708:	01000026 	tsteq	r0, r6, lsr #32
    370c:	00005200 	andeq	r5, r0, r0, lsl #4
    3710:	00000000 	andeq	r0, r0, r0
    3714:	256a0000 	strbcs	r0, [sl, #-0]!
    3718:	25700000 	ldrbcs	r0, [r0, #-0]!
    371c:	00070000 	andeq	r0, r7, r0
    3720:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    3724:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    3728:	00000000 	andeq	r0, r0, r0
    372c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    3730:	68000026 	stmdavs	r0, {r1, r2, r5}
    3734:	09000026 	stmdbeq	r0, {r1, r2, r5}
    3738:	0c007300 	stceq	3, cr7, [r0], {-0}
    373c:	20000004 	andcs	r0, r0, r4
    3740:	00009f21 	andeq	r9, r0, r1, lsr #30
    3744:	00000000 	andeq	r0, r0, r0
    3748:	26a80000 	strtcs	r0, [r8], r0
    374c:	26b00000 	ldrtcs	r0, [r0], r0
    3750:	00010000 	andeq	r0, r1, r0
    3754:	0026b050 	eoreq	fp, r6, r0, asr r0
    3758:	0026d000 	eoreq	sp, r6, r0
    375c:	f3000400 	vshl.u8	d0, d0, d0
    3760:	009f5001 	addseq	r5, pc, r1
    3764:	00000000 	andeq	r0, r0, r0
    3768:	d0000000 	andle	r0, r0, r0
    376c:	f8000026 			; <UNDEFINED> instruction: 0xf8000026
    3770:	01000026 	tsteq	r0, r6, lsr #32
    3774:	26f85000 	ldrbtcs	r5, [r8], r0
    3778:	27380000 	ldrcs	r0, [r8, -r0]!
    377c:	00010000 	andeq	r0, r1, r0
    3780:	00273854 	eoreq	r3, r7, r4, asr r8
    3784:	00274000 	eoreq	r4, r7, r0
    3788:	50000100 	andpl	r0, r0, r0, lsl #2
    378c:	00002740 	andeq	r2, r0, r0, asr #14
    3790:	0000278a 	andeq	r2, r0, sl, lsl #15
    3794:	8a540001 	bhi	15037a0 <__ccfg+0x14e37f8>
    3798:	c6000027 	strgt	r0, [r0], -r7, lsr #32
    379c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    37a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    37a4:	0027c69f 	mlaeq	r7, pc, r6, ip	; <UNPREDICTABLE>
    37a8:	0027ca00 	eoreq	ip, r7, r0, lsl #20
    37ac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    37b0:	000027ca 	andeq	r2, r0, sl, asr #15
    37b4:	00002820 	andeq	r2, r0, r0, lsr #16
    37b8:	01f30004 	mvnseq	r0, r4
    37bc:	00009f50 	andeq	r9, r0, r0, asr pc
    37c0:	00000000 	andeq	r0, r0, r0
    37c4:	26e60000 	strbtcs	r0, [r6], r0
    37c8:	27280000 	strcs	r0, [r8, -r0]!
    37cc:	00010000 	andeq	r0, r1, r0
    37d0:	00000053 	andeq	r0, r0, r3, asr r0
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	00275a00 	eoreq	r5, r7, r0, lsl #20
    37dc:	00276000 	eoreq	r6, r7, r0
    37e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    37ec:	0000278a 	andeq	r2, r0, sl, lsl #15
    37f0:	0000278c 	andeq	r2, r0, ip, lsl #15
    37f4:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    37f8:	a0000027 	andge	r0, r0, r7, lsr #32
    37fc:	01000027 	tsteq	r0, r7, lsr #32
    3800:	00005400 	andeq	r5, r0, r0, lsl #8
    3804:	00000000 	andeq	r0, r0, r0
    3808:	27a00000 	strcs	r0, [r0, r0]!
    380c:	27c00000 	strbcs	r0, [r0, r0]
    3810:	00010000 	andeq	r0, r1, r0
    3814:	00000054 	andeq	r0, r0, r4, asr r0
	...
    3824:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3830:	7f750003 	svcvc	0x00750003
    3834:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3838:	00000000 	andeq	r0, r0, r0
    383c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3848:	00002820 	andeq	r2, r0, r0, lsr #16
    384c:	0000283f 	andeq	r2, r0, pc, lsr r8
    3850:	3f500001 	svccc	0x00500001
    3854:	00000028 	andeq	r0, r0, r8, lsr #32
    3858:	01000029 	tsteq	r0, r9, lsr #32
    385c:	29005700 	stmdbcs	r0, {r8, r9, sl, ip, lr}
    3860:	2a400000 	bcs	1003868 <__ccfg+0xfe38c0>
    3864:	00040000 	andeq	r0, r4, r0
    3868:	9f5001f3 	svcls	0x005001f3
	...
    3874:	00002840 	andeq	r2, r0, r0, asr #16
    3878:	000029c0 	andeq	r2, r0, r0, asr #19
    387c:	c2500001 	subsgt	r0, r0, #1
    3880:	fc000029 	stc2	0, cr0, [r0], {41}	; 0x29
    3884:	01000029 	tsteq	r0, r9, lsr #32
    3888:	00005000 	andeq	r5, r0, r0
    388c:	00000000 	andeq	r0, r0, r0
    3890:	28e80000 	stmiacs	r8!, {}^	; <UNPREDICTABLE>
    3894:	28ec0000 	stmiacs	ip!, {}^	; <UNPREDICTABLE>
    3898:	00030000 	andeq	r0, r3, r0
    389c:	ec9f7170 	ldfs	f7, [pc], {112}	; 0x70
    38a0:	f2000028 	vhadd.s8	d0, d0, d24
    38a4:	01000028 	tsteq	r0, r8, lsr #32
    38a8:	28f25100 	ldmcs	r2!, {r8, ip, lr}^
    38ac:	29120000 	ldmdbcs	r2, {}	; <UNPREDICTABLE>
    38b0:	00020000 	andeq	r0, r2, r0
    38b4:	29125491 	ldmdbcs	r2, {r0, r4, r7, sl, ip, lr}
    38b8:	291e0000 	ldmdbcs	lr, {}	; <UNPREDICTABLE>
    38bc:	00010000 	andeq	r0, r1, r0
    38c0:	00291e51 	eoreq	r1, r9, r1, asr lr
    38c4:	00292000 	eoreq	r2, r9, r0
    38c8:	91000200 	mrsls	r0, R8_usr
    38cc:	00292054 	eoreq	r2, r9, r4, asr r0
    38d0:	00292200 	eoreq	r2, r9, r0, lsl #4
    38d4:	51000100 	mrspl	r0, (UNDEF: 16)
    38d8:	00002922 	andeq	r2, r0, r2, lsr #18
    38dc:	000029c8 	andeq	r2, r0, r8, asr #19
    38e0:	54910002 	ldrpl	r0, [r1], #2
	...
    38ec:	0000284c 	andeq	r2, r0, ip, asr #16
    38f0:	000028a6 	andeq	r2, r0, r6, lsr #17
    38f4:	ae510001 	cdpge	0, 5, cr0, cr1, cr1, {0}
    38f8:	b0000028 	andlt	r0, r0, r8, lsr #32
    38fc:	01000028 	tsteq	r0, r8, lsr #32
    3900:	00005100 	andeq	r5, r0, r0, lsl #2
    3904:	00000000 	andeq	r0, r0, r0
    3908:	289e0000 	ldmcs	lr, {}	; <UNPREDICTABLE>
    390c:	28ac0000 	stmiacs	ip!, {}	; <UNPREDICTABLE>
    3910:	00010000 	andeq	r0, r1, r0
    3914:	0028ae52 	eoreq	sl, r8, r2, asr lr
    3918:	00299000 	eoreq	r9, r9, r0
    391c:	52000100 	andpl	r0, r0, #0, 2
	...
    3928:	0000289e 	muleq	r0, lr, r8
    392c:	00002986 	andeq	r2, r0, r6, lsl #19
    3930:	00530001 	subseq	r0, r3, r1
    3934:	00000000 	andeq	r0, r0, r0
    3938:	44000000 	strmi	r0, [r0], #-0
    393c:	9a000028 	bls	39e4 <__exidx_end+0xb70>
    3940:	01000029 	tsteq	r0, r9, lsr #32
    3944:	00005500 	andeq	r5, r0, r0, lsl #10
    3948:	00000000 	andeq	r0, r0, r0
    394c:	28400000 	stmdacs	r0, {}^	; <UNPREDICTABLE>
    3950:	28c80000 	stmiacs	r8, {}^	; <UNPREDICTABLE>
    3954:	00020000 	andeq	r0, r2, r0
    3958:	28c89f30 	stmiacs	r8, {r4, r5, r8, r9, sl, fp, ip, pc}^
    395c:	29fc0000 	ldmibcs	ip!, {}^	; <UNPREDICTABLE>
    3960:	00010000 	andeq	r0, r1, r0
    3964:	00000054 	andeq	r0, r0, r4, asr r0
    3968:	00000000 	andeq	r0, r0, r0
    396c:	0028c000 	eoreq	ip, r8, r0
    3970:	0028ca00 	eoreq	ip, r8, r0, lsl #20
    3974:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3980:	000028e8 	andeq	r2, r0, r8, ror #17
    3984:	00002938 	andeq	r2, r0, r8, lsr r9
    3988:	9f300002 	svcls	0x00300002
    398c:	00002938 	andeq	r2, r0, r8, lsr r9
    3990:	00002958 	andeq	r2, r0, r8, asr r9
    3994:	58510001 	ldmdapl	r1, {r0}^
    3998:	5e000029 	cdppl	0, 0, cr0, cr0, cr9, {1}
    399c:	02000029 	andeq	r0, r0, #41	; 0x29
    39a0:	5e9f3000 	cdppl	0, 9, cr3, cr15, cr0, {0}
    39a4:	98000029 	stmdals	r0, {r0, r3, r5}
    39a8:	01000029 	tsteq	r0, r9, lsr #32
    39ac:	00005100 	andeq	r5, r0, r0, lsl #2
    39b0:	00000000 	andeq	r0, r0, r0
    39b4:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    39b8:	29180000 	ldmdbcs	r8, {}	; <UNPREDICTABLE>
    39bc:	00010000 	andeq	r0, r1, r0
    39c0:	0029205e 	eoreq	r2, r9, lr, asr r0
    39c4:	00292200 	eoreq	r2, r9, r0, lsl #4
    39c8:	5e000100 	adfpls	f0, f0, f0
    39cc:	00002922 	andeq	r2, r0, r2, lsr #18
    39d0:	00002928 	andeq	r2, r0, r8, lsr #18
    39d4:	28510001 	ldmdacs	r1, {r0}^
    39d8:	30000029 	andcc	r0, r0, r9, lsr #32
    39dc:	03000029 	movweq	r0, #41	; 0x29
    39e0:	9f7f7100 	svcls	0x007f7100
	...
    39ec:	000028e8 	andeq	r2, r0, r8, ror #17
    39f0:	00002912 	andeq	r2, r0, r2, lsl r9
    39f4:	9f300002 	svcls	0x00300002
    39f8:	00002912 	andeq	r2, r0, r2, lsl r9
    39fc:	0000291c 	andeq	r2, r0, ip, lsl r9
    3a00:	1c5e0001 	mrrcne	0, 0, r0, lr, cr1
    3a04:	1e000029 	cdpne	0, 0, cr0, cr0, cr9, {1}
    3a08:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    3a0c:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    3a10:	291e9f26 	ldmdbcs	lr, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    3a14:	29200000 	stmdbcs	r0!, {}	; <UNPREDICTABLE>
    3a18:	00060000 	andeq	r0, r6, r0
    3a1c:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    3a20:	29209f26 	stmdbcs	r0!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    3a24:	29220000 	stmdbcs	r2!, {}	; <UNPREDICTABLE>
    3a28:	00010000 	andeq	r0, r1, r0
    3a2c:	0029225e 	eoreq	r2, r9, lr, asr r2
    3a30:	00295800 	eoreq	r5, r9, r0, lsl #16
    3a34:	91000600 	tstls	r0, r0, lsl #12
    3a38:	26380654 			; <UNDEFINED> instruction: 0x26380654
    3a3c:	0029589f 	mlaeq	r9, pc, r8, r5	; <UNPREDICTABLE>
    3a40:	00295e00 	eoreq	r5, r9, r0, lsl #28
    3a44:	30000200 	andcc	r0, r0, r0, lsl #4
    3a48:	00295e9f 	mlaeq	r9, pc, lr, r5	; <UNPREDICTABLE>
    3a4c:	0029c800 	eoreq	ip, r9, r0, lsl #16
    3a50:	5e000100 	adfpls	f0, f0, f0
	...
    3a5c:	00002934 	andeq	r2, r0, r4, lsr r9
    3a60:	00002958 	andeq	r2, r0, r8, asr r9
    3a64:	005c0001 	subseq	r0, ip, r1
    3a68:	00000000 	andeq	r0, r0, r0
    3a6c:	62000000 	andvs	r0, r0, #0
    3a70:	c8000029 	stmdagt	r0, {r0, r3, r5}
    3a74:	01000029 	tsteq	r0, r9, lsr #32
    3a78:	00005a00 	andeq	r5, r0, r0, lsl #20
    3a7c:	00000000 	andeq	r0, r0, r0
    3a80:	29660000 	stmdbcs	r6!, {}^	; <UNPREDICTABLE>
    3a84:	29a20000 	stmibcs	r2!, {}	; <UNPREDICTABLE>
    3a88:	00010000 	andeq	r0, r1, r0
    3a8c:	0029a25c 	eoreq	sl, r9, ip, asr r2
    3a90:	0029a600 	eoreq	sl, r9, r0, lsl #12
    3a94:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3aa0:	000029a6 	andeq	r2, r0, r6, lsr #19
    3aa4:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    3aa8:	00710017 	rsbseq	r0, r1, r7, lsl r0
    3aac:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3ab0:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    3ab4:	4b401416 	blmi	1008b14 <__ccfg+0xfe8b6c>
    3ab8:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3abc:	13160001 	tstne	r6, #1
    3ac0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ac4:	00000000 	andeq	r0, r0, r0
    3ac8:	0029d000 	eoreq	sp, r9, r0
    3acc:	0029dc00 	eoreq	sp, r9, r0, lsl #24
    3ad0:	30000200 	andcc	r0, r0, r0, lsl #4
    3ad4:	0029dc9f 	mlaeq	r9, pc, ip, sp	; <UNPREDICTABLE>
    3ad8:	0029fc00 	eoreq	pc, r9, r0, lsl #24
    3adc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ae8:	000029d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    3aec:	000029d4 	ldrdeq	r2, [r0], -r4
    3af0:	d4530001 	ldrble	r0, [r3], #-1
    3af4:	dc000029 	stcle	0, cr0, [r0], {41}	; 0x29
    3af8:	02000029 	andeq	r0, r0, #41	; 0x29
    3afc:	dc9f4f00 	ldcle	15, cr4, [pc], {0}
    3b00:	ec000029 	stc	0, cr0, [r0], {41}	; 0x29
    3b04:	01000029 	tsteq	r0, r9, lsr #32
    3b08:	29ec5300 	stmibcs	ip!, {r8, r9, ip, lr}^
    3b0c:	29f00000 	ldmibcs	r0!, {}^	; <UNPREDICTABLE>
    3b10:	00050000 	andeq	r0, r5, r0
    3b14:	25340073 	ldrcs	r0, [r4, #-115]!	; 0xffffff8d
    3b18:	0029f09f 	mlaeq	r9, pc, r0, pc	; <UNPREDICTABLE>
    3b1c:	0029f400 	eoreq	pc, r9, r0, lsl #8
    3b20:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b2c:	000028e8 	andeq	r2, r0, r8, ror #17
    3b30:	000029c8 	andeq	r2, r0, r8, asr #19
    3b34:	9c0c0006 	stcls	0, cr0, [ip], {6}
    3b38:	9f500013 	svcls	0x00500013
	...
    3b44:	00002854 	andeq	r2, r0, r4, asr r8
    3b48:	00002860 	andeq	r2, r0, r0, ror #16
    3b4c:	00530001 	subseq	r0, r3, r1
    3b50:	00000000 	andeq	r0, r0, r0
    3b54:	74000000 	strvc	r0, [r0], #-0
    3b58:	80000028 	andhi	r0, r0, r8, lsr #32
    3b5c:	01000028 	tsteq	r0, r8, lsr #32
    3b60:	00005200 	andeq	r5, r0, r0, lsl #4
    3b64:	00000000 	andeq	r0, r0, r0
    3b68:	288a0000 	stmcs	sl, {}	; <UNPREDICTABLE>
    3b6c:	28960000 	ldmcs	r6, {}	; <UNPREDICTABLE>
    3b70:	00010000 	andeq	r0, r1, r0
    3b74:	00000052 	andeq	r0, r0, r2, asr r0
    3b78:	00000000 	andeq	r0, r0, r0
    3b7c:	00289600 	eoreq	r9, r8, r0, lsl #12
    3b80:	00298600 	eoreq	r8, r9, r0, lsl #12
    3b84:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b90:	00002a4e 	andeq	r2, r0, lr, asr #20
    3b94:	00002a58 	andeq	r2, r0, r8, asr sl
    3b98:	58500001 	ldmdapl	r0, {r0}^
    3b9c:	6200002a 	andvs	r0, r0, #42	; 0x2a
    3ba0:	0e00002a 	cdpeq	0, 0, cr0, cr0, cr10, {1}
    3ba4:	12007000 	andne	r7, r0, #0
    3ba8:	14168009 	ldrne	r8, [r6], #-9
    3bac:	0001282b 	andeq	r2, r1, fp, lsr #16
    3bb0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3bb4:	00000000 	andeq	r0, r0, r0
    3bb8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    3bbc:	7400002a 	strvc	r0, [r0], #-42	; 0xffffffd6
    3bc0:	0100002a 	tsteq	r0, sl, lsr #32
    3bc4:	00005400 	andeq	r5, r0, r0, lsl #8
    3bc8:	00000000 	andeq	r0, r0, r0
    3bcc:	2a780000 	bcs	1e03bd4 <__ccfg+0x1de3c2c>
    3bd0:	2a7e0000 	bcs	1f83bd8 <__ccfg+0x1f63c30>
    3bd4:	00150000 	andseq	r0, r5, r0
    3bd8:	40120073 	andsmi	r0, r2, r3, ror r0
    3bdc:	4f22244b 	svcmi	0x0022244b
    3be0:	4b401416 	blmi	1008c40 <__ccfg+0xfe8c98>
    3be4:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3be8:	13160001 	tstne	r6, #1
    3bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	002a8400 	eoreq	r8, sl, r0, lsl #8
    3bf8:	002a8e00 	eoreq	r8, sl, r0, lsl #28
    3bfc:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    3c00:	4b401200 	blmi	1008408 <__ccfg+0xfe8460>
    3c04:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    3c08:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    3c0c:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    3c10:	16000128 	strne	r0, [r0], -r8, lsr #2
    3c14:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    3c24:	00010000 	andeq	r0, r1, r0
    3c28:	00000052 	andeq	r0, r0, r2, asr r0
	...
    3c38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3c4c:	00510001 	subseq	r0, r1, r1
	...
    3c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c60:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    3c70:	00160000 	andseq	r0, r6, r0
    3c74:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    3c78:	4b400070 	blmi	1003e40 <__ccfg+0xfe3e98>
    3c7c:	050c2224 	streq	r2, [ip, #-548]	; 0xfffffddc
    3c80:	2d800000 	stccs	0, cr0, [r0]
    3c84:	16000128 	strne	r0, [r0], -r8, lsr #2
    3c88:	00009f13 	andeq	r9, r0, r3, lsl pc
    3c8c:	00000000 	andeq	r0, r0, r0
    3c90:	2ab80000 	bcs	fee03c98 <_estack+0xdedfec98>
    3c94:	2afa0000 	bcs	ffe83c9c <_estack+0xdfe7ec9c>
    3c98:	00030000 	andeq	r0, r3, r0
    3c9c:	fa9fff09 	blx	fe8038c8 <_estack+0xde7fe8c8>
    3ca0:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    3ca4:	0100002b 	tsteq	r0, fp, lsr #32
    3ca8:	00005000 	andeq	r5, r0, r0
    3cac:	00000000 	andeq	r0, r0, r0
    3cb0:	2ac40000 	bcs	ff103cb8 <_estack+0xdf0fecb8>
    3cb4:	2ad20000 	bcs	ff483cbc <_estack+0xdf47ecbc>
    3cb8:	00010000 	andeq	r0, r1, r0
    3cbc:	002ad650 	eoreq	sp, sl, r0, asr r6
    3cc0:	002af200 	eoreq	pc, sl, r0, lsl #4
    3cc4:	50000100 	andpl	r0, r0, r0, lsl #2
    3cc8:	00002af4 	strdeq	r2, [r0], -r4
    3ccc:	00002af6 	strdeq	r2, [r0], -r6
    3cd0:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    3cd4:	fa00002a 	blx	3d84 <__exidx_end+0xf10>
    3cd8:	0100002a 	tsteq	r0, sl, lsr #32
    3cdc:	00005000 	andeq	r5, r0, r0
	...
    3cec:	00030000 	andeq	r0, r3, r0
    3cf0:	009fff09 	addseq	pc, pc, r9, lsl #30
    3cf4:	00000000 	andeq	r0, r0, r0
    3cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    3cfc:	00005000 	andeq	r5, r0, r0
	...
    3d0c:	00010000 	andeq	r0, r1, r0
    3d10:	00000054 	andeq	r0, r0, r4, asr r0
    3d14:	00000000 	andeq	r0, r0, r0
    3d18:	002b0400 	eoreq	r0, fp, r0, lsl #8
    3d1c:	002b3e00 	eoreq	r3, fp, r0, lsl #28
    3d20:	09000300 	stmdbeq	r0, {r8, r9}
    3d24:	2b3e9fff 	blcs	fabd28 <__ccfg+0xf8bd80>
    3d28:	2b420000 	blcs	1083d30 <__ccfg+0x1063d88>
    3d2c:	00020000 	andeq	r0, r2, r0
    3d30:	2b429f44 	blcs	10aba48 <__ccfg+0x108baa0>
    3d34:	2b460000 	blcs	1183d3c <__ccfg+0x1163d94>
    3d38:	00020000 	andeq	r0, r2, r0
    3d3c:	2b469f45 	blcs	11aba58 <__ccfg+0x118bab0>
    3d40:	2b640000 	blcs	1903d48 <__ccfg+0x18e3da0>
    3d44:	00030000 	andeq	r0, r3, r0
    3d48:	649fff09 	ldrvs	pc, [pc], #3849	; 3d50 <__exidx_end+0xedc>
    3d4c:	6600002b 	strvs	r0, [r0], -fp, lsr #32
    3d50:	0100002b 	tsteq	r0, fp, lsr #32
    3d54:	2b665000 	blcs	1997d5c <__ccfg+0x1977db4>
    3d58:	2b680000 	blcs	1a03d60 <__ccfg+0x19e3db8>
    3d5c:	00030000 	andeq	r0, r3, r0
    3d60:	689fff09 	ldmvs	pc, {r0, r3, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    3d64:	7000002b 	andvc	r0, r0, fp, lsr #32
    3d68:	0100002b 	tsteq	r0, fp, lsr #32
    3d6c:	00005000 	andeq	r5, r0, r0
    3d70:	00000000 	andeq	r0, r0, r0
    3d74:	2b140000 	blcs	503d7c <__ccfg+0x4e3dd4>
    3d78:	2b6c0000 	blcs	1b03d80 <__ccfg+0x1ae3dd8>
    3d7c:	00010000 	andeq	r0, r1, r0
    3d80:	00000054 	andeq	r0, r0, r4, asr r0
    3d84:	00000000 	andeq	r0, r0, r0
    3d88:	002b8800 	eoreq	r8, fp, r0, lsl #16
    3d8c:	002b9100 	eoreq	r9, fp, r0, lsl #2
    3d90:	50000100 	andpl	r0, r0, r0, lsl #2
    3d94:	00002b91 	muleq	r0, r1, fp
    3d98:	00002ba6 	andeq	r2, r0, r6, lsr #23
    3d9c:	a6540001 	ldrbge	r0, [r4], -r1
    3da0:	aa00002b 	bge	3e54 <__exidx_end+0xfe0>
    3da4:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    3da8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3dac:	002baa9f 	mlaeq	fp, pc, sl, sl	; <UNPREDICTABLE>
    3db0:	002bac00 	eoreq	sl, fp, r0, lsl #24
    3db4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3db8:	00002bac 	andeq	r2, r0, ip, lsr #23
    3dbc:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
    3dc0:	01f30004 	mvnseq	r0, r4
    3dc4:	00009f50 	andeq	r9, r0, r0, asr pc
    3dc8:	00000000 	andeq	r0, r0, r0
    3dcc:	2b880000 	blcs	fe203dd4 <_estack+0xde1fedd4>
    3dd0:	2b910000 	blcs	fe443dd8 <_estack+0xde43edd8>
    3dd4:	00010000 	andeq	r0, r1, r0
    3dd8:	002b9151 	eoreq	r9, fp, r1, asr r1
    3ddc:	002ba600 	eoreq	sl, fp, r0, lsl #12
    3de0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3de4:	00002ba6 	andeq	r2, r0, r6, lsr #23
    3de8:	00002baa 	andeq	r2, r0, sl, lsr #23
    3dec:	01f30004 	mvnseq	r0, r4
    3df0:	2baa9f51 	blcs	feaabb3c <_estack+0xdeaa6b3c>
    3df4:	2bac0000 	blcs	feb03dfc <_estack+0xdeafedfc>
    3df8:	00010000 	andeq	r0, r1, r0
    3dfc:	002bac55 	eoreq	sl, fp, r5, asr ip
    3e00:	002bb000 	eoreq	fp, fp, r0
    3e04:	f3000400 	vshl.u8	d0, d0, d0
    3e08:	009f5101 	addseq	r5, pc, r1, lsl #2
    3e0c:	00000000 	andeq	r0, r0, r0
    3e10:	92000000 	andls	r0, r0, #0
    3e14:	a900002b 	stmdbge	r0, {r0, r1, r3, r5}
    3e18:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    3e1c:	30007000 	andcc	r7, r0, r0
    3e20:	2baa9f29 	blcs	feaabacc <_estack+0xdeaa6acc>
    3e24:	2bb00000 	blcs	fec03e2c <_estack+0xdebfee2c>
    3e28:	00050000 	andeq	r0, r5, r0
    3e2c:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    3e30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e34:	00000000 	andeq	r0, r0, r0
    3e38:	002bb000 	eoreq	fp, fp, r0
    3e3c:	002bb200 	eoreq	fp, fp, r0, lsl #4
    3e40:	50000100 	andpl	r0, r0, r0, lsl #2
    3e44:	00002bb2 			; <UNDEFINED> instruction: 0x00002bb2
    3e48:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    3e4c:	01f30004 	mvnseq	r0, r4
    3e50:	00009f50 	andeq	r9, r0, r0, asr pc
    3e54:	00000000 	andeq	r0, r0, r0
    3e58:	2bb00000 	blcs	fec03e60 <_estack+0xdebfee60>
    3e5c:	2bb40000 	blcs	fed03e64 <_estack+0xdecfee64>
    3e60:	00010000 	andeq	r0, r1, r0
    3e64:	002bb451 	eoreq	fp, fp, r1, asr r4
    3e68:	002bb800 	eoreq	fp, fp, r0, lsl #16
    3e6c:	f3000400 	vshl.u8	d0, d0, d0
    3e70:	009f5101 	addseq	r5, pc, r1, lsl #2
    3e74:	00000000 	andeq	r0, r0, r0
    3e78:	b0000000 	andlt	r0, r0, r0
    3e7c:	b700002b 	strlt	r0, [r0, -fp, lsr #32]
    3e80:	0100002b 	tsteq	r0, fp, lsr #32
    3e84:	2bb75200 	blcs	fedd868c <_estack+0xdedd368c>
    3e88:	2bb80000 	blcs	fee03e90 <_estack+0xdedfee90>
    3e8c:	00040000 	andeq	r0, r4, r0
    3e90:	9f5201f3 	svcls	0x005201f3
	...
    3ea4:	00500001 	subseq	r0, r0, r1
    3ea8:	00000000 	andeq	r0, r0, r0
    3eac:	04000000 	streq	r0, [r0], #-0
    3eb0:	5001f300 	andpl	pc, r1, r0, lsl #6
    3eb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ec4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ed0:	01f30004 	mvnseq	r0, r4
    3ed4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3ee4:	00010000 	andeq	r0, r1, r0
    3ee8:	00000052 	andeq	r0, r0, r2, asr r0
    3eec:	00000000 	andeq	r0, r0, r0
    3ef0:	f3000400 	vshl.u8	d0, d0, d0
    3ef4:	009f5201 	addseq	r5, pc, r1, lsl #4
    3ef8:	00000000 	andeq	r0, r0, r0
    3efc:	01000000 	mrseq	r0, (UNDEF: 0)
    3f00:	00005200 	andeq	r5, r0, r0, lsl #4
    3f04:	00000000 	andeq	r0, r0, r0
    3f08:	00150000 	andseq	r0, r5, r0
    3f0c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3f10:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    3f14:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3f18:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    3f1c:	13160001 	tstne	r6, #1
    3f20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f30:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f3c:	01f30004 	mvnseq	r0, r4
    3f40:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    3f50:	00040000 	andeq	r0, r4, r0
    3f54:	9f048070 	svcls	0x00048070
	...
    3f60:	01f3000d 	mvnseq	r0, sp
    3f64:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3f68:	23225001 			; <UNDEFINED> instruction: 0x23225001
    3f6c:	009f0480 	addseq	r0, pc, r0, lsl #9
    3f70:	00000000 	andeq	r0, r0, r0
    3f74:	01000000 	mrseq	r0, (UNDEF: 0)
    3f78:	00005000 	andeq	r5, r0, r0
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	00520000 	subseq	r0, r2, r0
    3f84:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3f88:	5001f324 	andpl	pc, r1, r4, lsr #6
    3f8c:	04802322 	streq	r2, [r0], #802	; 0x322
    3f90:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3f94:	5001f324 	andpl	pc, r1, r4, lsr #6
    3f98:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    3f9c:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    3fa0:	16000128 	strne	r0, [r0], -r8, lsr #2
    3fa4:	04842313 	streq	r2, [r4], #787	; 0x313
    3fa8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3fac:	5001f324 	andpl	pc, r1, r4, lsr #6
    3fb0:	04802322 	streq	r2, [r0], #802	; 0x322
    3fb4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3fb8:	5001f324 	andpl	pc, r1, r4, lsr #6
    3fbc:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    3fc0:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    3fc4:	16000128 	strne	r0, [r0], -r8, lsr #2
    3fc8:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    3fcc:	2e302540 	cfneg32cs	mvfx2, mvfx0
    3fd0:	16000128 	strne	r0, [r0], -r8, lsr #2
    3fd4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    3fe4:	00010000 	andeq	r0, r1, r0
    3fe8:	00000051 	andeq	r0, r0, r1, asr r0
    3fec:	00000000 	andeq	r0, r0, r0
    3ff0:	30002f00 	andcc	r2, r0, r0, lsl #30
    3ff4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3ff8:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    3ffc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4000:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4004:	13160001 	tstne	r6, #1
    4008:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    400c:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    4010:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4014:	f3131600 	vmax.u16	d1, d3, d0
    4018:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    401c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4020:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4030:	00010000 	andeq	r0, r1, r0
    4034:	00000050 	andeq	r0, r0, r0, asr r0
    4038:	00000000 	andeq	r0, r0, r0
    403c:	f3000400 	vshl.u8	d0, d0, d0
    4040:	009f5001 	addseq	r5, pc, r1
	...
    4050:	01000000 	mrseq	r0, (UNDEF: 0)
    4054:	00005100 	andeq	r5, r0, r0, lsl #2
    4058:	00000000 	andeq	r0, r0, r0
    405c:	00040000 	andeq	r0, r4, r0
    4060:	9f5101f3 	svcls	0x005101f3
	...
    4074:	00520001 	subseq	r0, r2, r1
    4078:	00000000 	andeq	r0, r0, r0
    407c:	04000000 	streq	r0, [r0], #-0
    4080:	5201f300 	andpl	pc, r1, #0, 6
    4084:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4088:	00000000 	andeq	r0, r0, r0
    408c:	52000100 	andpl	r0, r0, #0, 2
	...
    4098:	01f3001b 	mvnseq	r0, fp, lsl r0
    409c:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    40a0:	01f35201 	mvnseq	r5, r1, lsl #4
    40a4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    40a8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    40ac:	282b8000 	stmdacs	fp!, {pc}
    40b0:	13160001 	tstne	r6, #1
    40b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    40c4:	53000100 	movwpl	r0, #256	; 0x100
	...
    40d0:	01f30004 	mvnseq	r0, r4
    40d4:	00009f53 	andeq	r9, r0, r3, asr pc
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	00010000 	andeq	r0, r1, r0
    40e0:	00000053 	andeq	r0, r0, r3, asr r0
    40e4:	00000000 	andeq	r0, r0, r0
    40e8:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    40ec:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    40f0:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    40f4:	4b405301 	blmi	1018d00 <__ccfg+0xff8d58>
    40f8:	0f0c2224 	svceq	0x000c2224
    40fc:	2b800000 	blcs	fe004104 <_estack+0xddfff104>
    4100:	16000128 	strne	r0, [r0], -r8, lsr #2
    4104:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4114:	00020000 	andeq	r0, r2, r0
    4118:	00000091 	muleq	r0, r1, r0
    411c:	00000000 	andeq	r0, r0, r0
    4120:	00020000 	andeq	r0, r2, r0
    4124:	0000007d 	andeq	r0, r0, sp, ror r0
	...
    4134:	00040000 	andeq	r0, r4, r0
    4138:	9f048070 	svcls	0x00048070
	...
    4144:	01f3000d 	mvnseq	r0, sp
    4148:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    414c:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4150:	009f0480 	addseq	r0, pc, r0, lsl #9
    4154:	00000000 	andeq	r0, r0, r0
    4158:	01000000 	mrseq	r0, (UNDEF: 0)
    415c:	00005000 	andeq	r5, r0, r0
    4160:	00000000 	andeq	r0, r0, r0
    4164:	00640000 	rsbeq	r0, r4, r0
    4168:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    416c:	5001f324 	andpl	pc, r1, r4, lsr #6
    4170:	04802322 	streq	r2, [r0], #802	; 0x322
    4174:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4178:	5001f324 	andpl	pc, r1, r4, lsr #6
    417c:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4180:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4184:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4188:	01282c80 	smlawbeq	r8, r0, ip, r2
    418c:	23131600 	tstcs	r3, #0, 12
    4190:	01f30484 	mvnseq	r0, r4, lsl #9
    4194:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4198:	23225001 			; <UNDEFINED> instruction: 0x23225001
    419c:	01f30480 	mvnseq	r0, r0, lsl #9
    41a0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    41a4:	f3225001 	vhadd.u32	d5, d2, d1
    41a8:	4b405301 	blmi	1018db4 <__ccfg+0xff8e0c>
    41ac:	0f0c2224 	svceq	0x000c2224
    41b0:	2c800000 	stccs	0, cr0, [r0], {0}
    41b4:	16000128 	strne	r0, [r0], -r8, lsr #2
    41b8:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    41bc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    41c0:	00000f0c 	andeq	r0, r0, ip, lsl #30
    41c4:	01282b80 	smlawbeq	r8, r0, fp, r2
    41c8:	9f131600 	svcls	0x00131600
	...
    41dc:	0074000a 	rsbseq	r0, r4, sl
    41e0:	1affff0a 	bne	3e10 <__exidx_end+0xf9c>
    41e4:	9f240073 	svcls	0x00240073
	...
    41f0:	007d000c 	rsbseq	r0, sp, ip
    41f4:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    41f8:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    41fc:	00009f24 	andeq	r9, r0, r4, lsr #30
    4200:	00000000 	andeq	r0, r0, r0
    4204:	00240000 	eoreq	r0, r4, r0
    4208:	0294007d 	addseq	r0, r4, #125	; 0x7d
    420c:	1affff0a 	bne	3e3c <__exidx_end+0xfc8>
    4210:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4214:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    4218:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    421c:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4220:	8000000f 	andhi	r0, r0, pc
    4224:	0001282b 	andeq	r2, r1, fp, lsr #16
    4228:	9f241316 	svcls	0x00241316
	...
    423c:	00500001 	subseq	r0, r0, r1
    4240:	00000000 	andeq	r0, r0, r0
    4244:	04000000 	streq	r0, [r0], #-0
    4248:	5001f300 	andpl	pc, r1, r0, lsl #6
    424c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    425c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4268:	01f30004 	mvnseq	r0, r4
    426c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    427c:	00010000 	andeq	r0, r1, r0
    4280:	00000052 	andeq	r0, r0, r2, asr r0
    4284:	00000000 	andeq	r0, r0, r0
    4288:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4294:	01f30015 	mvnseq	r0, r5, lsl r0
    4298:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    429c:	01f35201 	mvnseq	r5, r1, lsl #4
    42a0:	30254052 	eorcc	r4, r5, r2, asr r0
    42a4:	0001282e 	andeq	r2, r1, lr, lsr #16
    42a8:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    42b8:	01000000 	mrseq	r0, (UNDEF: 0)
    42bc:	00005500 	andeq	r5, r0, r0, lsl #10
    42c0:	00000000 	andeq	r0, r0, r0
    42c4:	001d0000 	andseq	r0, sp, r0
    42c8:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    42cc:	23225101 			; <UNDEFINED> instruction: 0x23225101
    42d0:	5001f302 	andpl	pc, r1, r2, lsl #6
    42d4:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    42d8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    42dc:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    42e0:	13160001 	tstne	r6, #1
    42e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    42f4:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    42f8:	1a007400 	bne	21300 <__ccfg+0x1358>
    42fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    430c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4318:	01f3001d 	mvnseq	r0, sp, lsl r0
    431c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4320:	f3022322 	vcgt.u8	d2, d2, d18
    4324:	01f35001 	mvnseq	r5, r1
    4328:	01f32251 	mvnseq	r2, r1, asr r2
    432c:	30254052 	eorcc	r4, r5, r2, asr r0
    4330:	0001282e 	andeq	r2, r1, lr, lsr #16
    4334:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4344:	07000000 	streq	r0, [r0, -r0]
    4348:	0a007500 	beq	21750 <__ccfg+0x17a8>
    434c:	9f1affff 	svcls	0x001affff
	...
    4360:	00700005 	rsbseq	r0, r0, r5
    4364:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    4374:	01000000 	mrseq	r0, (UNDEF: 0)
    4378:	00005000 	andeq	r5, r0, r0
    437c:	00000000 	andeq	r0, r0, r0
    4380:	00040000 	andeq	r0, r4, r0
    4384:	9f5001f3 	svcls	0x005001f3
	...
    4398:	00510001 	subseq	r0, r1, r1
    439c:	00000000 	andeq	r0, r0, r0
    43a0:	04000000 	streq	r0, [r0], #-0
    43a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    43a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    43b8:	52000100 	andpl	r0, r0, #0, 2
	...
    43c4:	00540001 	subseq	r0, r4, r1
    43c8:	00000000 	andeq	r0, r0, r0
    43cc:	1b000000 	blne	43d4 <__exidx_end+0x1560>
    43d0:	5201f300 	andpl	pc, r1, #0, 6
    43d4:	01f32540 	mvnseq	r2, r0, asr #10
    43d8:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    43dc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    43e0:	00000f0c 	andeq	r0, r0, ip, lsl #30
    43e4:	01282b80 	smlawbeq	r8, r0, fp, r2
    43e8:	9f131600 	svcls	0x00131600
	...
    43fc:	00530001 	subseq	r0, r3, r1
    4400:	00000000 	andeq	r0, r0, r0
    4404:	01000000 	mrseq	r0, (UNDEF: 0)
    4408:	00005500 	andeq	r5, r0, r0, lsl #10
    440c:	00000000 	andeq	r0, r0, r0
    4410:	001b0000 	andseq	r0, fp, r0
    4414:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4418:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    441c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4420:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4424:	8000000f 	andhi	r0, r0, pc
    4428:	0001282b 	andeq	r2, r1, fp, lsr #16
    442c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    443c:	01000000 	mrseq	r0, (UNDEF: 0)
    4440:	00005600 	andeq	r5, r0, r0, lsl #12
    4444:	00000000 	andeq	r0, r0, r0
    4448:	00060000 	andeq	r0, r6, r0
    444c:	00710070 	rsbseq	r0, r1, r0, ror r0
    4450:	00009f22 	andeq	r9, r0, r2, lsr #30
    4454:	00000000 	andeq	r0, r0, r0
    4458:	00010000 	andeq	r0, r1, r0
    445c:	00000056 	andeq	r0, r0, r6, asr r0
    4460:	00000000 	andeq	r0, r0, r0
    4464:	f3002300 	vcgt.u8	d2, d0, d0
    4468:	01f35001 	mvnseq	r5, r1
    446c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    4470:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4474:	f3225101 	vrhadd.u32	d5, d2, d1
    4478:	4b405301 	blmi	1019084 <__ccfg+0xff90dc>
    447c:	0f0c2224 	svceq	0x000c2224
    4480:	2b800000 	blcs	fe004488 <_estack+0xddfff488>
    4484:	16000128 	strne	r0, [r0], -r8, lsr #2
    4488:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4498:	00060000 	andeq	r0, r6, r0
    449c:	00740076 	rsbseq	r0, r4, r6, ror r0
    44a0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    44a4:	00000000 	andeq	r0, r0, r0
    44a8:	00010000 	andeq	r0, r1, r0
    44ac:	00000050 	andeq	r0, r0, r0, asr r0
	...
    44bc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    44c8:	01f30023 	mvnseq	r0, r3, lsr #32
    44cc:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    44d0:	f3022322 	vcgt.u8	d2, d2, d18
    44d4:	01f35001 	mvnseq	r5, r1
    44d8:	01f32251 	mvnseq	r2, r1, asr r2
    44dc:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    44e0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    44e4:	282b8000 	stmdacs	fp!, {pc}
    44e8:	13160001 	tstne	r6, #1
    44ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    44fc:	76000700 	strvc	r0, [r0], -r0, lsl #14
    4500:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4504:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    4514:	00050000 	andeq	r0, r5, r0
    4518:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    451c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4520:	00000000 	andeq	r0, r0, r0
    4524:	002bb800 	eoreq	fp, fp, r0, lsl #16
    4528:	002bd000 	eoreq	sp, fp, r0
    452c:	50000100 	andpl	r0, r0, r0, lsl #2
    4530:	00002bd0 	ldrdeq	r2, [r0], -r0
    4534:	00002c0a 	andeq	r2, r0, sl, lsl #24
    4538:	0a550001 	beq	1544544 <__ccfg+0x152459c>
    453c:	1400002c 	strne	r0, [r0], #-44	; 0xffffffd4
    4540:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    4544:	5001f300 	andpl	pc, r1, r0, lsl #6
    4548:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    454c:	00000000 	andeq	r0, r0, r0
    4550:	002bb800 	eoreq	fp, fp, r0, lsl #16
    4554:	002bbe00 	eoreq	fp, fp, r0, lsl #28
    4558:	51000100 	mrspl	r0, (UNDEF: 16)
    455c:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
    4560:	00002bf6 	strdeq	r2, [r0], -r6
    4564:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
    4568:	1400002b 	strne	r0, [r0], #-43	; 0xffffffd5
    456c:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    4570:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4574:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4578:	00000000 	andeq	r0, r0, r0
    457c:	002bf200 	eoreq	pc, fp, r0, lsl #4
    4580:	002c0600 	eoreq	r0, ip, r0, lsl #12
    4584:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4590:	00002bf2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    4594:	00002bf6 	strdeq	r2, [r0], -r6
    4598:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
    459c:	0600002b 	streq	r0, [r0], -fp, lsr #32
    45a0:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    45a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    45a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	002c1400 	eoreq	r1, ip, r0, lsl #8
    45b4:	002c3200 	eoreq	r3, ip, r0, lsl #4
    45b8:	50000100 	andpl	r0, r0, r0, lsl #2
    45bc:	00002c32 	andeq	r2, r0, r2, lsr ip
    45c0:	00002c40 	andeq	r2, r0, r0, asr #24
    45c4:	01f30004 	mvnseq	r0, r4
    45c8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    45d8:	00010000 	andeq	r0, r1, r0
    45dc:	00000050 	andeq	r0, r0, r0, asr r0
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    45f0:	01f30004 	mvnseq	r0, r4
    45f4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4604:	00010000 	andeq	r0, r1, r0
    4608:	00000055 	andeq	r0, r0, r5, asr r0
	...
    4618:	70000700 	andvc	r0, r0, r0, lsl #14
    461c:	1c007300 	stcne	3, cr7, [r0], {-0}
    4620:	00009f19 	andeq	r9, r0, r9, lsl pc
    4624:	00000000 	andeq	r0, r0, r0
    4628:	00040000 	andeq	r0, r4, r0
    462c:	9f190070 	svcls	0x00190070
	...
    4640:	d00a0004 	andle	r0, sl, r4
    4644:	00009f07 	andeq	r9, r0, r7, lsl #30
    4648:	00000000 	andeq	r0, r0, r0
    464c:	00010000 	andeq	r0, r1, r0
    4650:	00000050 	andeq	r0, r0, r0, asr r0
    4654:	00000000 	andeq	r0, r0, r0
    4658:	72000500 	andvc	r0, r0, #0, 10
    465c:	9f254000 	svcls	0x00254000
	...
    4668:	00500001 	subseq	r0, r0, r1
    466c:	00000000 	andeq	r0, r0, r0
    4670:	04000000 	streq	r0, [r0], #-0
    4674:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    4678:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    467c:	00000000 	andeq	r0, r0, r0
    4680:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4694:	00500001 	subseq	r0, r0, r1
	...
    46a4:	01000000 	mrseq	r0, (UNDEF: 0)
    46a8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    46b8:	00010000 	andeq	r0, r1, r0
    46bc:	00000050 	andeq	r0, r0, r0, asr r0
    46c0:	00000000 	andeq	r0, r0, r0
    46c4:	70000300 	andvc	r0, r0, r0, lsl #6
    46c8:	00009f1b 	andeq	r9, r0, fp, lsl pc
    46cc:	00000000 	andeq	r0, r0, r0
    46d0:	00040000 	andeq	r0, r4, r0
    46d4:	9f5001f3 	svcls	0x005001f3
	...
    46e8:	00740007 	rsbseq	r0, r4, r7
    46ec:	26482448 	strbcs	r2, [r8], -r8, asr #8
    46f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4700:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    470c:	01f30006 	mvnseq	r0, r6
    4710:	9f1c4b50 	svcls	0x001c4b50
	...
    4724:	00550001 	subseq	r0, r5, r1
    4728:	00000000 	andeq	r0, r0, r0
    472c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4730:	5001f300 	andpl	pc, r1, r0, lsl #6
    4734:	01f31c4b 	mvnseq	r1, fp, asr #24
    4738:	1e1c4b50 			; <UNDEFINED> instruction: 0x1e1c4b50
    473c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    474c:	71002c00 	tstvc	r0, r0, lsl #24
    4750:	71264000 			; <UNDEFINED> instruction: 0x71264000
    4754:	48244000 	stmdami	r4!, {lr}
    4758:	1e007026 	cdpne	0, 0, cr7, cr0, cr6, {1}
    475c:	71222633 			; <UNDEFINED> instruction: 0x71222633
    4760:	48244800 	stmdami	r4!, {fp, lr}
    4764:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    4768:	7422263a 	strtvc	r2, [r2], #-1594	; 0xfffff9c6
    476c:	48244800 	stmdami	r4!, {fp, lr}
    4770:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    4774:	421e0070 	andsmi	r0, lr, #112	; 0x70
    4778:	009f2226 	addseq	r2, pc, r6, lsr #4
    477c:	00000000 	andeq	r0, r0, r0
    4780:	32000000 	andcc	r0, r0, #0
    4784:	40007100 	andmi	r7, r0, r0, lsl #2
    4788:	5001f326 	andpl	pc, r1, r6, lsr #6
    478c:	00711c4b 	rsbseq	r1, r1, fp, asr #24
    4790:	26482440 	strbcs	r2, [r8], -r0, asr #8
    4794:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    4798:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    479c:	00752648 	rsbseq	r2, r5, r8, asr #12
    47a0:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    47a4:	4b5001f3 	blmi	1404f78 <__ccfg+0x13e4fd0>
    47a8:	4800741c 	stmdami	r0, {r2, r3, r4, sl, ip, sp, lr}
    47ac:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    47b0:	421e0075 	andsmi	r0, lr, #117	; 0x75
    47b4:	009f2226 	addseq	r2, pc, r6, lsr #4
	...
    47c4:	01000000 	mrseq	r0, (UNDEF: 0)
    47c8:	00005000 	andeq	r5, r0, r0
    47cc:	00000000 	andeq	r0, r0, r0
    47d0:	00040000 	andeq	r0, r4, r0
    47d4:	9f5001f3 	svcls	0x005001f3
	...
    47e8:	0070000b 	rsbseq	r0, r0, fp
    47ec:	461e0070 			; <UNDEFINED> instruction: 0x461e0070
    47f0:	1c007026 	stcne	0, cr7, [r0], {38}	; 0x26
    47f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47f8:	00000000 	andeq	r0, r0, r0
    47fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4808:	01f3000e 	mvnseq	r0, lr
    480c:	5001f350 	andpl	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    4810:	f326461e 	vmin.u32	d4, d6, d14
    4814:	9f1c5001 	svcls	0x001c5001
	...
    4828:	00550001 	subseq	r0, r5, r1
    482c:	00000000 	andeq	r0, r0, r0
    4830:	05000000 	streq	r0, [r0, #-0]
    4834:	10380c00 	eorsne	r0, r8, r0, lsl #24
    4838:	00004009 	andeq	r4, r0, r9
	...
    4848:	00010000 	andeq	r0, r1, r0
    484c:	00000056 	andeq	r0, r0, r6, asr r0
	...
    485c:	70000600 	andvc	r0, r0, r0, lsl #12
    4860:	1c007600 	stcne	6, cr7, [r0], {-0}
    4864:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4868:	00000000 	andeq	r0, r0, r0
    486c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4880:	0070000a 	rsbseq	r0, r0, sl
    4884:	2444fc08 	strbcs	pc, [r4], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    4888:	9f25461a 	svcls	0x0025461a
	...
    489c:	00530001 	subseq	r0, r3, r1
	...
    48ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    48b0:	0a007300 	beq	214b8 <__ccfg+0x1510>
    48b4:	3a1afc00 	bcc	6c38bc <__ccfg+0x6a3914>
    48b8:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    48c8:	000a0000 	andeq	r0, sl, r0
    48cc:	fc080073 	stc2	0, cr0, [r8], {115}	; 0x73
    48d0:	421a2440 	andsmi	r2, sl, #64, 8	; 0x40000000
    48d4:	00009f25 	andeq	r9, r0, r5, lsr #30
    48d8:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
    return (time * SECOND)/1000;
   8:	00040000 	andeq	r0, r4, r0
}
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	00000174 	andeq	r0, r0, r4, ror r1
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000e 	andeq	r0, r0, lr
  20:	0000023c 	andeq	r0, r0, ip, lsr r2
  24:	00000070 	andeq	r0, r0, r0, ror r0
  28:	000002ac 	andeq	r0, r0, ip, lsr #5
  2c:	00000184 	andeq	r0, r0, r4, lsl #3
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	08270002 	stmdaeq	r7!, {r1}
}
  40:	00040000 	andeq	r0, r4, r0
  44:	00000000 	andeq	r0, r0, r0
  48:	00000430 	andeq	r0, r0, r0, lsr r4
  4c:	0000000c 	andeq	r0, r0, ip
  50:	0000043c 	andeq	r0, r0, ip, lsr r4
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	00000468 	andeq	r0, r0, r8, ror #8
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
  60:	00000494 	muleq	r0, r4, r4
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	00000524 	andeq	r0, r0, r4, lsr #10
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	00000564 	andeq	r0, r0, r4, ror #10
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	descriptors [fd] = s;
  90:	0000058c 	andeq	r0, r0, ip, lsl #11
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	000006a0 	andeq	r0, r0, r0, lsr #13
	if (s == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	00000744 	andeq	r0, r0, r4, asr #14
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	0000077c 	andeq	r0, r0, ip, ror r7
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	0000088c 	andeq	r0, r0, ip, lsl #17
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	0000094c 	andeq	r0, r0, ip, asr #18
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	00000990 	muleq	r0, r0, r9
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	000009cc 	andeq	r0, r0, ip, asr #19
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	00000a70 	andeq	r0, r0, r0, ror sl
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
			curr += 0x1000;
  f8:	00000c28 	andeq	r0, r0, r8, lsr #24
  fc:	00000258 	andeq	r0, r0, r8, asr r2
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
			upto = EE_SIZE - 1;
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	00000e80 	andeq	r0, r0, r0, lsl #29
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1cb70002 	ldcne	0, cr0, [r7], #8
            ch = redCharacter;
 128:	00040000 	andeq	r0, r4, r0
            onTime = redOn;
 12c:	00000000 	andeq	r0, r0, r0
            offTime = redOff;
 130:	00000ee0 	andeq	r0, r0, r0, ror #29
        ledFlag = 1 - ledFlag;
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
            offTime = greenOff;
 138:	00000f1c 	andeq	r0, r0, ip, lsl pc
    return (time * SECOND)/1000;
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
 140:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
 150:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
 154:	00000010 	andeq	r0, r0, r0, lsl r0
        if (displayCycle)
 158:	00000000 	andeq	r0, r0, r0
            ser_outf(Check_PERIOD, "%c ", ch);
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
 160:	00000000 	andeq	r0, r0, r0
        if(onTime > 0){
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000000 	andeq	r0, r0, r0
            if(On)
 16c:	00000006 	andeq	r0, r0, r6
 170:	00000fc4 	andeq	r0, r0, r4, asr #31
 174:	000000cc 	andeq	r0, r0, ip, asr #1
                leds(led,0);
 178:	00001090 	muleq	r0, r0, r0
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	000010a4 	andeq	r1, r0, r4, lsr #1
 184:	00000034 	andeq	r0, r0, r4, lsr r0
 188:	000010d8 	ldrdeq	r1, [r0], -r8
            delay(onTime, OFF_PERIOD);
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
            delay(offTime, Check_PERIOD);
 190:	00000000 	andeq	r0, r0, r0
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
            led = greenLed;
 198:	0000110c 	andeq	r1, r0, ip, lsl #2
            ch = greenCharacter;
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	00001130 	andeq	r1, r0, r0, lsr r1
            onTime = greenOn;
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
            offTime = greenOff;
 1a8:	00000000 	andeq	r0, r0, r0
                leds(led,0);
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	00001168 	andeq	r1, r0, r8, ror #2
            proceed OFF_PERIOD;
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
        when(&On, Check_PERIOD);
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
        release;
 1d0:	0000118c 	andeq	r1, r0, ip, lsl #3
        leds(led,0);
 1d4:	0000000e 	andeq	r0, r0, lr
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
 1f8:	0000119a 	muleq	r0, sl, r1
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	0000000e 	andeq	r0, r0, lr
 208:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	000011d4 	ldrdeq	r1, [r0], -r4
 214:	0000009c 	muleq	r0, ip, r0
 218:	00001270 	andeq	r1, r0, r0, ror r2
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	000012c0 	andeq	r1, r0, r0, asr #5
 224:	00000048 	andeq	r0, r0, r8, asr #32
 228:	00001308 	andeq	r1, r0, r8, lsl #6
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	00001358 	andeq	r1, r0, r8, asr r3
 234:	00000058 	andeq	r0, r0, r8, asr r0
 238:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
    word numbers[] = {0, 0, 0, 0};
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
    int numbersIndex = 0;
 240:	00001458 	andeq	r1, r0, r8, asr r4
    word numbers[] = {0, 0, 0, 0};
 244:	00000034 	andeq	r0, r0, r4, lsr r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 248:	0000148c 	andeq	r1, r0, ip, lsl #9
        if(settingsInput[i] == ' ') {
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	00000000 	andeq	r0, r0, r0
            numbers[numbersIndex] = number;
 254:	00000030 	andeq	r0, r0, r0, lsr r0
 258:	00000000 	andeq	r0, r0, r0
            number = 0;
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 260:	000014a4 	andeq	r1, r0, r4, lsr #9
    redOn = numbers[0];
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
 268:	00000000 	andeq	r0, r0, r0
    redOff = numbers[1];
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
    greenOn = numbers[2];
 278:	00000104 	andeq	r0, r0, r4, lsl #2
    greenOff = numbers[3];
 27c:	2eda0002 	cdpcs	0, 13, cr0, cr10, cr2, {0}
 280:	00040000 	andeq	r0, r4, r0
	...
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
            number = number * 10;
 290:	00000000 	andeq	r0, r0, r0
            number += settingsInput[i] - 48;
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
 298:	00000000 	andeq	r0, r0, r0
 29c:	0000000e 	andeq	r0, r0, lr
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
 2a8:	00000000 	andeq	r0, r0, r0
fsm root {
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
        ser_outf(Initial, "Enter your name: ");
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_in(Get_Name, username, NAME_LENGTH);
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
        ser_outf(Show_Menu, "Welcome %s\n\r"
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
 2e0:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Choice, "%c", &choice);
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
 2e8:	00000000 	andeq	r0, r0, r0
        if (choice == 'A' || choice == 'a'){
 2ec:	000000bc 	strheq	r0, [r0], -ip
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
            proceed Adjust_Intervals;
 2f8:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
        proceed Show_Menu;
 300:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 304:	0000000a 	andeq	r0, r0, sl
 308:	00000000 	andeq	r0, r0, r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	00000060 	andeq	r0, r0, r0, rrx
        processSettingsInput(settings);
 318:	00000000 	andeq	r0, r0, r0
        if(!blinkerRunning) {
 31c:	00000040 	andeq	r0, r0, r0, asr #32
 320:	00000000 	andeq	r0, r0, r0
            blinkerCode = runfsm blinker;
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	00000000 	andeq	r0, r0, r0
            blinkerRunning = YES;
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
        On = YES;
 330:	00000000 	andeq	r0, r0, r0
 334:	00000006 	andeq	r0, r0, r6
        trigger(&On);
 338:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 33c:	00000068 	andeq	r0, r0, r8, rrx
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 340:	00000000 	andeq	r0, r0, r0
 344:	00000050 	andeq	r0, r0, r0, asr r0
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00000000 	andeq	r0, r0, r0
 354:	00000040 	andeq	r0, r0, r0, asr #32
 358:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00000000 	andeq	r0, r0, r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
        displayCycle = YES;
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
        ser_inf(Await_Stop, "%c", &ch);
 370:	000015e0 	andeq	r1, r0, r0, ror #11
 374:	00000002 	andeq	r0, r0, r2
	...
        if(ch == 'S' || ch == 's'){
 380:	00000034 	andeq	r0, r0, r4, lsr r0
 384:	42110002 	andsmi	r0, r1, #2
            displayCycle = NO;
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
            proceed Show_Menu;
 390:	000015e2 	andeq	r1, r0, r2, ror #11
        proceed Monitor;
 394:	00000002 	andeq	r0, r0, r2
        On = NO;
 398:	000015e4 	andeq	r1, r0, r4, ror #11
 39c:	00000002 	andeq	r0, r0, r2
        if(blinkerCode != 0x0) {
 3a0:	000015e6 	andeq	r1, r0, r6, ror #11
            killall(blinkerCode);
 3a4:	00000002 	andeq	r0, r0, r2
 3a8:	000015e8 	andeq	r1, r0, r8, ror #11
        proceed Show_Menu;
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
        leds_all(0);
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	43890002 	orrmi	r0, r9, #2
        proceed Show_Menu;
 3c0:	00040000 	andeq	r0, r4, r0
	...
        } else if (choice == 'V' || choice == 'v') {
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
            proceed View_Settings;
 3d4:	48c40002 	stmiami	r4, {r1}^
        } else if (choice == 'M' || choice == 'm') {
 3d8:	00040000 	andeq	r0, r4, r0
	...
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
 3fc:	4dc80002 	stclmi	0, cr0, [r8, #8]
 400:	00040000 	andeq	r0, r4, r0
	...
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
 410:	00000000 	andeq	r0, r0, r0
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
 424:	52c20002 	sbcpl	r0, r2, #2
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
 430:	00001634 	andeq	r1, r0, r4, lsr r6
	adddevfunc (ioreq_uart_a, devnum);
 434:	00000034 	andeq	r0, r0, r4, lsr r0
 438:	00001668 	andeq	r1, r0, r8, ror #12
void udelay (volatile word n) {
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
 440:	00001698 	muleq	r0, r8, r6
	while (n) {
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
}
 44c:	00000054 	andeq	r0, r0, r4, asr r0
	while (n--);
 450:	00001704 	andeq	r1, r0, r4, lsl #14
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00001744 	andeq	r1, r0, r4, asr #14
		n--;
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	00001768 	andeq	r1, r0, r8, ror #14
 464:	00000014 	andeq	r0, r0, r4, lsl r0
void mdelay (volatile word n) {
 468:	0000177c 	andeq	r1, r0, ip, ror r7
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n) {
 470:	00000000 	andeq	r0, r0, r0
 474:	00000064 	andeq	r0, r0, r4, rrx
}
 478:	00000000 	andeq	r0, r0, r0
		udelay (999);
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
 480:	00000000 	andeq	r0, r0, r0
		n--;
 484:	000000ec 	andeq	r0, r0, ip, ror #1
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000002 	andeq	r0, r0, r2
 490:	00000000 	andeq	r0, r0, r0
void __pi_ondomain (lword d) {
 494:	00000004 	andeq	r0, r0, r4
 498:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
	PRCMPowerDomainOn (d);
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 4b4:	5d6d0002 	stclpl	0, cr0, [sp, #-8]!
 4b8:	00040000 	andeq	r0, r4, r0
 4bc:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
 4c0:	00001790 	muleq	r0, r0, r7
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
void __pi_syserror (word ec, const char *m) {
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
	diag ("SYSERR: %x, %s", ec, m);
 4d4:	61830002 	orrvs	r0, r3, r2
 4d8:	00040000 	andeq	r0, r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 4dc:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 4e0:	00001808 	andeq	r1, r0, r8, lsl #16
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
		all_leds_blink;
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	65d30002 	ldrbvs	r0, [r3, #2]
 4f8:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 4fc:	00000000 	andeq	r0, r0, r0
 500:	0000185c 	andeq	r1, r0, ip, asr r8
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (1) {
 514:	6a230002 	bvs	8c0524 <__ccfg+0x8a057c>
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
void tci_run_delay_timer () {
 524:	00000070 	andeq	r0, r0, r0, ror r0
	...
	setdel = __pi_mintk - __pi_old;
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	6e540002 	cdpvs	0, 5, cr0, cr4, cr2, {0}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 538:	00040000 	andeq	r0, r4, r0
 53c:	00000000 	andeq	r0, r0, r0
 540:	0000192c 	andeq	r1, r0, ip, lsr #18
 544:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
}
 550:	0000002c 	andeq	r0, r0, ip, lsr #32
 554:	72980002 	addsvc	r0, r8, #2
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
 560:	00001a48 	andeq	r1, r0, r8, asr #20
	cli_aux;
 564:	00000020 	andeq	r0, r0, r0, lsr #32
 568:	00001a68 	andeq	r1, r0, r8, ror #20
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 56c:	00000230 	andeq	r0, r0, r0, lsr r2
 570:	00001c98 	muleq	r0, r8, ip
 574:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	788c0002 	stmvc	ip, {r1}
 588:	00040000 	andeq	r0, r4, r0
void AONRTCIntHandler () {
 58c:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 590:	00001ce8 	andeq	r1, r0, r8, ror #25
 594:	00000390 	muleq	r0, r0, r3
	...
		if (__pi_utims [0] == 0)
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
		if (*(__pi_utims [0])) {
 5a4:	7e1f0002 	cdpvc	0, 1, cr0, cr15, cr2, {0}
 5a8:	00040000 	andeq	r0, r4, r0
			(*(__pi_utims [0]))--;
 5ac:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
 5b0:	00002078 	andeq	r2, r0, r8, ror r0
		if (*(__pi_utims [1])) {
 5b4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
		if (__pi_utims [2] == 0)
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
		if (*(__pi_utims [2])) {
 5c4:	7ef80002 	cdpvc	0, 15, cr0, cr8, cr2, {0}
			(*(__pi_utims [2]))--;
 5c8:	00040000 	andeq	r0, r4, r0
	...
				aux_timer_inactive = 0;
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
				(*(__pi_utims [3]))--;
 5d8:	000020a8 	andeq	r2, r0, r8, lsr #1
	if (__pi_systat.ledsts) {
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		if (__pi_systat.ledblc++ == 0) {
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
			if (__pi_systat.ledblk) {
 5ec:	803f0002 	eorshi	r0, pc, r2
 5f0:	00040000 	andeq	r0, r4, r0
 5f4:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 5f8:	000020c0 	andeq	r2, r0, r0, asr #1
 5fc:	00000008 	andeq	r0, r0, r8
				if (__pi_systat.ledsts & 0x2)
 600:	00000000 	andeq	r0, r0, r0
 604:	00000006 	andeq	r0, r0, r6
 608:	000020c8 	andeq	r2, r0, r8, asr #1
				if (__pi_systat.ledsts & 0x4)
 60c:	00000008 	andeq	r0, r0, r8
				__pi_systat.ledblk = 0;
 610:	00000000 	andeq	r0, r0, r0
 614:	00000006 	andeq	r0, r0, r6
			if (__pi_systat.fstblk)
 618:	00000000 	andeq	r0, r0, r0
 61c:	00000008 	andeq	r0, r0, r8
	...
		cli_tim;
 628:	00000024 	andeq	r0, r0, r4, lsr #32
		__pi_new += setdel;
 62c:	81790002 	cmnhi	r9, r2
 630:	00040000 	andeq	r0, r4, r0
		setdel = 0;
 634:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 638:	000020d0 	ldrdeq	r2, [r0], -r0
		__pi_new += setdel;
 63c:	000000d4 	ldrdeq	r0, [r0], -r4
		RISE_N_SHINE;
 640:	000021a4 	andeq	r2, r0, r4, lsr #3
 644:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
				if (__pi_systat.ledsts & 0x1)
 650:	000000b4 	strheq	r0, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 654:	83840002 	orrhi	r0, r4, #2
 658:	00040000 	andeq	r0, r4, r0
				if (__pi_systat.ledsts & 0x2)
 65c:	00000000 	andeq	r0, r0, r0
 660:	00002248 	andeq	r2, r0, r8, asr #4
 664:	0000007c 	andeq	r0, r0, ip, ror r0
				if (__pi_systat.ledsts & 0x8)
 668:	000022c4 	andeq	r2, r0, r4, asr #5
				__pi_systat.ledblk = 1;
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
 670:	00002370 	andeq	r2, r0, r0, ror r3
		if (aux_timer_inactive) {
 674:	0000005c 	andeq	r0, r0, ip, asr r0
			cli_aux;
 678:	000023cc 	andeq	r2, r0, ip, asr #7
 67c:	00000018 	andeq	r0, r0, r8, lsl r0
 680:	00000000 	andeq	r0, r0, r0
 684:	00000010 	andeq	r0, r0, r0, lsl r0
 688:	000023e4 	andeq	r2, r0, r4, ror #7
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
 690:	000023f4 	strdeq	r2, [r0], -r4
 694:	00000014 	andeq	r0, r0, r4, lsl r0
 698:	00002408 	andeq	r2, r0, r8, lsl #8
 69c:	00000064 	andeq	r0, r0, r4, rrx
word tci_update_delay_ticks (Boolean force) {
 6a0:	0000246c 	andeq	r2, r0, ip, ror #8
	cli_tim;
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	00002480 	andeq	r2, r0, r0, lsl #9
	if (setdel) {
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6b0:	00002494 	muleq	r0, r4, r4
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
 6b8:	000024a8 	andeq	r2, r0, r8, lsr #9
 6bc:	00000028 	andeq	r0, r0, r8, lsr #32
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6c0:	000024d0 	ldrdeq	r2, [r0], -r0
				AON_RTC_O_CH0CMP)) - gettav ());
 6c4:	00000010 	andeq	r0, r0, r0, lsl r0
	return NO;
 6c8:	000024e0 	andeq	r2, r0, r0, ror #9
			setdel = 0;
 6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6d0:	0000250c 	andeq	r2, r0, ip, lsl #10
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
}
 6d8:	00002520 	andeq	r2, r0, r0, lsr #10
		sti_tim;
 6dc:	00000014 	andeq	r0, r0, r4, lsl r0
		return YES;
 6e0:	00002534 	andeq	r2, r0, r4, lsr r5
 6e4:	00000110 	andeq	r0, r0, r0, lsl r1
 6e8:	00002644 	andeq	r2, r0, r4, asr #12
 6ec:	00000064 	andeq	r0, r0, r4, rrx
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6f0:	000026a8 	andeq	r2, r0, r8, lsr #13
	UARTDisable (UART0_BASE);
 6f4:	00000028 	andeq	r0, r0, r8, lsr #32
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6f8:	000026d0 	ldrdeq	r2, [r0], -r0
	UARTDisable (UART0_BASE);
 6fc:	00000150 	andeq	r0, r0, r0, asr r1
	...
	UARTConfigSetExpClk (UART0_BASE,
 708:	0000003c 	andeq	r0, r0, ip, lsr r0
 70c:	8e9f0002 	cdphi	0, 9, cr0, cr15, cr2, {0}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 710:	00040000 	andeq	r0, r4, r0
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 71c:	000000f4 	strdeq	r0, [r0], -r4
 720:	00002820 	andeq	r2, r0, r0, lsr #16
 724:	00000220 	andeq	r0, r0, r0, lsr #4
	urates [0] = rate;
 728:	00002a40 	andeq	r2, r0, r0, asr #20
}
 72c:	00000060 	andeq	r0, r0, r0, rrx
 730:	00000000 	andeq	r0, r0, r0
 734:	00000078 	andeq	r0, r0, r8, ror r0
 738:	00002aa0 	andeq	r2, r0, r0, lsr #21
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 748:	00000044 	andeq	r0, r0, r4, asr #32
 74c:	97c60002 	strbls	r0, [r6, r2]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 750:	00040000 	andeq	r0, r4, r0
	...
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 75c:	00000010 	andeq	r0, r0, r0, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
 760:	00000000 	andeq	r0, r0, r0
 764:	00000018 	andeq	r0, r0, r8, lsl r0
 768:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
 76c:	0000004c 	andeq	r0, r0, ip, asr #32
 770:	00000000 	andeq	r0, r0, r0
 774:	00000030 	andeq	r0, r0, r0, lsr r0
 778:	00002b04 	andeq	r2, r0, r4, lsl #22
	switch (operation) {
 77c:	0000006c 	andeq	r0, r0, ip, rrx
static int ioreq_uart_a (int operation, char *buf, int len) {
 780:	00002b70 	andeq	r2, r0, r0, ror fp
 784:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 790:	00000044 	andeq	r0, r0, r4, asr #32
				*buf++ = uart_a_read;
 794:	9b960002 	blls	fe5807a4 <_estack+0xde57b7a4>
 798:	00040000 	andeq	r0, r4, r0
			while (len && uart_a_char_available) {
 79c:	00000000 	andeq	r0, r0, r0
 7a0:	00002b88 	andeq	r2, r0, r8, lsl #23
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
			if (len != operation) {
 7a8:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
}
 7ac:	00000008 	andeq	r0, r0, r8
 7b0:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 7b4:	00000022 	andeq	r0, r0, r2, lsr #32
			if (uart_a_char_available) {
 7b8:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
 7bc:	0000002e 	andeq	r0, r0, lr, lsr #32
			uart_a_disable_int;
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000034 	andeq	r0, r0, r4, lsr r0
			if (uart_a_char_available) {
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
				goto Redo_rx;
 7d8:	00000064 	andeq	r0, r0, r4, rrx
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 7dc:	a1410002 	cmpge	r1, r2
 7e0:	00040000 	andeq	r0, r4, r0
			return -2;
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
				uart_a_write (*buf);
 7ec:	0000005c 	andeq	r0, r0, ip, asr r0
 7f0:	00002c14 	andeq	r2, r0, r4, lsl ip
			while (len && uart_a_room_in_tx) {
 7f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000090 	muleq	r0, r0, r0
			if (len != operation) {
 800:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 804:	00000018 	andeq	r0, r0, r8, lsl r0
 808:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
 80c:	00000060 	andeq	r0, r0, r0, rrx
 810:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 814:	00000034 	andeq	r0, r0, r4, lsr r0
 818:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
 81c:	00000038 	andeq	r0, r0, r8, lsr r0
			if (uart_a_room_in_tx) {
 820:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
 824:	0000000c 	andeq	r0, r0, ip
 828:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 82c:	00000034 	andeq	r0, r0, r4, lsr r0
 830:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000001e6 	andeq	r0, r0, r6, ror #3
    return (time * SECOND)/1000;
       8:	000001ea 	andeq	r0, r0, sl, ror #3
}
       c:	0000023c 	andeq	r0, r0, ip, lsr r2
	...
      18:	0000013a 	andeq	r0, r0, sl, lsr r1
      1c:	0000013e 	andeq	r0, r0, lr, lsr r1
      20:	00000140 	andeq	r0, r0, r0, asr #2
      24:	00000140 	andeq	r0, r0, r0, asr #2
      28:	00000142 	andeq	r0, r0, r2, asr #2
      2c:	00000144 	andeq	r0, r0, r4, asr #2
      30:	0000014a 	andeq	r0, r0, sl, asr #2
      34:	00000150 	andeq	r0, r0, r0, asr r1
      38:	00000154 	andeq	r0, r0, r4, asr r1
      3c:	00000156 	andeq	r0, r0, r6, asr r1
	...
      48:	00000140 	andeq	r0, r0, r0, asr #2
      4c:	00000142 	andeq	r0, r0, r2, asr #2
      50:	00000144 	andeq	r0, r0, r4, asr #2
      54:	0000014a 	andeq	r0, r0, sl, asr #2
		release;
      58:	00000150 	andeq	r0, r0, r0, asr r1
      5c:	00000152 	andeq	r0, r0, r2, asr r1
      60:	00000156 	andeq	r0, r0, r6, asr r1
      64:	00000156 	andeq	r0, r0, r6, asr r1
	...
      70:	00000246 	andeq	r0, r0, r6, asr #4
      74:	00000264 	andeq	r0, r0, r4, ror #4
      78:	00000288 	andeq	r0, r0, r8, lsl #5
      7c:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
      88:	000002c6 	andeq	r0, r0, r6, asr #5
      8c:	000003c4 	andeq	r0, r0, r4, asr #7
	descriptors [fd] = s;
      90:	000003c8 	andeq	r0, r0, r8, asr #7
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	000003e4 	andeq	r0, r0, r4, ror #7
	...
		syserror (EMALLOC, "tcv05");
      a0:	000002e2 	andeq	r0, r0, r2, ror #5
      a4:	00000304 	andeq	r0, r0, r4, lsl #6
      a8:	000003c8 	andeq	r0, r0, r8, asr #7
      ac:	000003e0 	andeq	r0, r0, r0, ror #7
	...
      b8:	000003a8 	andeq	r0, r0, r8, lsr #7
      bc:	000003ac 	andeq	r0, r0, ip, lsr #7
      c0:	000003ae 	andeq	r0, r0, lr, lsr #7
      c4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
	...
      d0:	000000c8 	andeq	r0, r0, r8, asr #1
      d4:	0000023c 	andeq	r0, r0, ip, lsr r2
      d8:	00000001 	andeq	r0, r0, r1
      dc:	00000001 	andeq	r0, r0, r1
      e0:	0000023c 	andeq	r0, r0, ip, lsr r2
      e4:	000002ac 	andeq	r0, r0, ip, lsr #5
      e8:	000002ac 	andeq	r0, r0, ip, lsr #5
      ec:	00000430 	andeq	r0, r0, r0, lsr r4
	...
			curr += 0x1000;
      f8:	000004de 	ldrdeq	r0, [r0], -lr
      fc:	000004e4 	andeq	r0, r0, r4, ror #9
		if (from >= EE_SIZE || upto < from)
     100:	000004e4 	andeq	r0, r0, r4, ror #9
     104:	000004e4 	andeq	r0, r0, r4, ror #9
			upto = EE_SIZE - 1;
     108:	000004e8 	andeq	r0, r0, r8, ror #9
     10c:	000004ea 	andeq	r0, r0, sl, ror #9
	...
     118:	000004e4 	andeq	r0, r0, r4, ror #9
     11c:	000004e6 	andeq	r0, r0, r6, ror #9
     120:	000004ea 	andeq	r0, r0, sl, ror #9
     124:	000004ec 	andeq	r0, r0, ip, ror #9
	...
            offTime = redOff;
     130:	000004fc 	strdeq	r0, [r0], -ip
        ledFlag = 1 - ledFlag;
     134:	000004fe 	strdeq	r0, [r0], -lr
            offTime = greenOff;
     138:	00000500 	andeq	r0, r0, r0, lsl #10
    return (time * SECOND)/1000;
     13c:	00000502 	andeq	r0, r0, r2, lsl #10
	...
     148:	00000536 	andeq	r0, r0, r6, lsr r5
     14c:	0000053a 	andeq	r0, r0, sl, lsr r5
     150:	0000053c 	andeq	r0, r0, ip, lsr r5
     154:	0000053e 	andeq	r0, r0, lr, lsr r5
        if (displayCycle)
     158:	00000540 	andeq	r0, r0, r0, asr #10
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	00000548 	andeq	r0, r0, r8, asr #10
	...
        if(onTime > 0){
     168:	0000056c 	andeq	r0, r0, ip, ror #10
            if(On)
     16c:	00000572 	andeq	r0, r0, r2, ror r5
     170:	00000574 	andeq	r0, r0, r4, ror r5
     174:	0000057a 	andeq	r0, r0, sl, ror r5
	...
                leds(led,0);
     180:	0000059c 	muleq	r0, ip, r5
     184:	00000622 	andeq	r0, r0, r2, lsr #12
     188:	00000648 	andeq	r0, r0, r8, asr #12
            delay(onTime, OFF_PERIOD);
     18c:	000006a0 	andeq	r0, r0, r0, lsr #13
	...
            led = greenLed;
     198:	00000710 	andeq	r0, r0, r0, lsl r7
            ch = greenCharacter;
     19c:	00000712 	andeq	r0, r0, r2, lsl r7
     1a0:	00000714 	andeq	r0, r0, r4, lsl r7
            onTime = greenOn;
     1a4:	00000728 	andeq	r0, r0, r8, lsr #14
	...
                leds(led,0);
     1b0:	00000744 	andeq	r0, r0, r4, asr #14
     1b4:	00000746 	andeq	r0, r0, r6, asr #14
     1b8:	00000748 	andeq	r0, r0, r8, asr #14
     1bc:	00000750 	andeq	r0, r0, r0, asr r7
	...
        when(&On, Check_PERIOD);
     1c8:	0000088c 	andeq	r0, r0, ip, lsl #17
     1cc:	00000890 	muleq	r0, r0, r8
        release;
     1d0:	00000892 	muleq	r0, r2, r8
        leds(led,0);
     1d4:	00000894 	muleq	r0, r4, r8
     1d8:	00000896 	muleq	r0, r6, r8
     1dc:	00000898 	muleq	r0, r8, r8
	...
}
     1e8:	000008f4 	strdeq	r0, [r0], -r4
     1ec:	000008f8 	strdeq	r0, [r0], -r8
     1f0:	0000090a 	andeq	r0, r0, sl, lsl #18
     1f4:	00000936 	andeq	r0, r0, r6, lsr r9
	...
     200:	0000094c 	andeq	r0, r0, ip, asr #18
     204:	0000094c 	andeq	r0, r0, ip, asr #18
     208:	0000094e 	andeq	r0, r0, lr, asr #18
     20c:	00000950 	andeq	r0, r0, r0, asr r9
	...
     218:	00000950 	andeq	r0, r0, r0, asr r9
     21c:	00000952 	andeq	r0, r0, r2, asr r9
     220:	00000954 	andeq	r0, r0, r4, asr r9
     224:	00000956 	andeq	r0, r0, r6, asr r9
     228:	0000095c 	andeq	r0, r0, ip, asr r9
     22c:	00000962 	andeq	r0, r0, r2, ror #18
     230:	0000096c 	andeq	r0, r0, ip, ror #18
     234:	0000096e 	andeq	r0, r0, lr, ror #18
     238:	0000097a 	andeq	r0, r0, sl, ror r9
    word numbers[] = {0, 0, 0, 0};
     23c:	0000097c 	andeq	r0, r0, ip, ror r9
	...
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	00000990 	muleq	r0, r0, r9
        if(settingsInput[i] == ' ') {
     24c:	00000990 	muleq	r0, r0, r9
     250:	00000992 	muleq	r0, r2, r9
            numbers[numbersIndex] = number;
     254:	00000994 	muleq	r0, r4, r9
	...
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	00000996 	muleq	r0, r6, r9
    redOn = numbers[0];
     264:	00000998 	muleq	r0, r8, r9
     268:	0000099a 	muleq	r0, sl, r9
    redOff = numbers[1];
     26c:	0000099c 	muleq	r0, ip, r9
     270:	000009a6 	andeq	r0, r0, r6, lsr #19
    greenOn = numbers[2];
     274:	000009aa 	andeq	r0, r0, sl, lsr #19
     278:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    greenOff = numbers[3];
     27c:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
	...
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	00000a9a 	muleq	r0, sl, sl
     28c:	00000a9c 	muleq	r0, ip, sl
            number = number * 10;
     290:	00000a9e 	muleq	r0, lr, sl
            number += settingsInput[i] - 48;
     294:	00000aa2 	andeq	r0, r0, r2, lsr #21
     298:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     29c:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
	...
     2a8:	00000a9c 	muleq	r0, ip, sl
fsm root {
     2ac:	00000a9e 	muleq	r0, lr, sl
     2b0:	00000aa2 	andeq	r0, r0, r2, lsr #21
     2b4:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     2b8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
     2bc:	00000aee 	andeq	r0, r0, lr, ror #21
	...
        ser_outf(Initial, "Enter your name: ");
     2c8:	00000aa6 	andeq	r0, r0, r6, lsr #21
     2cc:	00000aaa 	andeq	r0, r0, sl, lsr #21
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	00000ad2 	ldrdeq	r0, [r0], -r2
     2d4:	00000ada 	ldrdeq	r0, [r0], -sl
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2e0:	00000aaa 	andeq	r0, r0, sl, lsr #21
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	00000aae 	andeq	r0, r0, lr, lsr #21
     2e8:	00000ae6 	andeq	r0, r0, r6, ror #21
        if (choice == 'A' || choice == 'a'){
     2ec:	00000aea 	andeq	r0, r0, sl, ror #21
	...
            proceed Adjust_Intervals;
     2f8:	00000aae 	andeq	r0, r0, lr, lsr #21
            proceed Monitor;
     2fc:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
        proceed Show_Menu;
     300:	00000ae0 	andeq	r0, r0, r0, ror #21
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	00000ae6 	andeq	r0, r0, r6, ror #21
	...
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     310:	00000aee 	andeq	r0, r0, lr, ror #21
     314:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        processSettingsInput(settings);
     318:	00000af2 	strdeq	r0, [r0], -r2
        if(!blinkerRunning) {
     31c:	00000af4 	strdeq	r0, [r0], -r4
     320:	00000af6 	strdeq	r0, [r0], -r6
            blinkerCode = runfsm blinker;
     324:	00000af8 	strdeq	r0, [r0], -r8
	...
        On = YES;
     330:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     334:	00000af2 	strdeq	r0, [r0], -r2
        trigger(&On);
     338:	00000af8 	strdeq	r0, [r0], -r8
        proceed Show_Menu;
     33c:	00000afa 	strdeq	r0, [r0], -sl
	...
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     348:	00000b0a 	andeq	r0, r0, sl, lsl #22
     34c:	00000b0c 	andeq	r0, r0, ip, lsl #22
     350:	00000b0e 	andeq	r0, r0, lr, lsl #22
     354:	00000b10 	andeq	r0, r0, r0, lsl fp
	...
        proceed Show_Menu;
     360:	00000b22 	andeq	r0, r0, r2, lsr #22
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	00000b24 	andeq	r0, r0, r4, lsr #22
     368:	00000b26 	andeq	r0, r0, r6, lsr #22
        displayCycle = YES;
     36c:	00000b28 	andeq	r0, r0, r8, lsr #22
	...
        ser_inf(Await_Stop, "%c", &ch);
     378:	00000b6a 	andeq	r0, r0, sl, ror #22
        if(ch == 'S' || ch == 's'){
     37c:	00000b6a 	andeq	r0, r0, sl, ror #22
     380:	00000b6e 	andeq	r0, r0, lr, ror #22
     384:	00000b70 	andeq	r0, r0, r0, ror fp
	...
            proceed Show_Menu;
     390:	00000ba0 	andeq	r0, r0, r0, lsr #23
        proceed Monitor;
     394:	00000ba2 	andeq	r0, r0, r2, lsr #23
        On = NO;
     398:	00000ba4 	andeq	r0, r0, r4, lsr #23
     39c:	00000bac 	andeq	r0, r0, ip, lsr #23
	...
     3a8:	00000c28 	andeq	r0, r0, r8, lsr #24
        proceed Show_Menu;
     3ac:	00000c28 	andeq	r0, r0, r8, lsr #24
     3b0:	00000c2e 	andeq	r0, r0, lr, lsr #24
        leds_all(0);
     3b4:	00000c30 	andeq	r0, r0, r0, lsr ip
     3b8:	00000c32 	andeq	r0, r0, r2, lsr ip
     3bc:	00000c36 	andeq	r0, r0, r6, lsr ip
	...
        } else if (choice == 'S' || choice == 's') {
     3c8:	00000c42 	andeq	r0, r0, r2, asr #24
            proceed Stop;
     3cc:	00000c44 	andeq	r0, r0, r4, asr #24
        } else if (choice == 'V' || choice == 'v') {
     3d0:	00000c5a 	andeq	r0, r0, sl, asr ip
            proceed View_Settings;
     3d4:	00000c5c 	andeq	r0, r0, ip, asr ip
        } else if (choice == 'M' || choice == 'm') {
     3d8:	00000c6e 	andeq	r0, r0, lr, ror #24
            proceed Monitor;
     3dc:	00000c8a 	andeq	r0, r0, sl, lsl #25
     3e0:	00000cae 	andeq	r0, r0, lr, lsr #25
     3e4:	00000e08 	andeq	r0, r0, r8, lsl #28
	...
     3f0:	00000c42 	andeq	r0, r0, r2, asr #24
     3f4:	00000c44 	andeq	r0, r0, r4, asr #24
     3f8:	00000ce2 	andeq	r0, r0, r2, ror #25
     3fc:	00000ce6 	andeq	r0, r0, r6, ror #25
	...
     408:	00000ce6 	andeq	r0, r0, r6, ror #25
     40c:	00000ce6 	andeq	r0, r0, r6, ror #25
     410:	00000cea 	andeq	r0, r0, sl, ror #25
     414:	00000cee 	andeq	r0, r0, lr, ror #25
     418:	00000cf2 	strdeq	r0, [r0], -r2
     41c:	00000cf4 	strdeq	r0, [r0], -r4
	...
     428:	00000ce6 	andeq	r0, r0, r6, ror #25
     42c:	00000cea 	andeq	r0, r0, sl, ror #25
static void devinit_uart (int devnum) {
     430:	00000d00 	andeq	r0, r0, r0, lsl #26
	adddevfunc (ioreq_uart_a, devnum);
     434:	00000d02 	andeq	r0, r0, r2, lsl #26
     438:	00000d06 	andeq	r0, r0, r6, lsl #26
void udelay (volatile word n) {
     43c:	00000d0a 	andeq	r0, r0, sl, lsl #26
	...
	while (n) {
     448:	00000cee 	andeq	r0, r0, lr, ror #25
}
     44c:	00000cf2 	strdeq	r0, [r0], -r2
	while (n--);
     450:	00000cf4 	strdeq	r0, [r0], -r4
     454:	00000cf6 	strdeq	r0, [r0], -r6
     458:	00000cfa 	strdeq	r0, [r0], -sl
		n--;
     45c:	00000cfe 	strdeq	r0, [r0], -lr
	...
void mdelay (volatile word n) {
     468:	00000d02 	andeq	r0, r0, r2, lsl #26
     46c:	00000d06 	andeq	r0, r0, r6, lsl #26
	while (n) {
     470:	00000d20 	andeq	r0, r0, r0, lsr #26
     474:	00000d24 	andeq	r0, r0, r4, lsr #26
}
     478:	00000d26 	andeq	r0, r0, r6, lsr #26
		udelay (999);
     47c:	00000d2e 	andeq	r0, r0, lr, lsr #26
	...
		n--;
     488:	00000d18 	andeq	r0, r0, r8, lsl sp
     48c:	00000d1a 	andeq	r0, r0, sl, lsl sp
     490:	00000d1c 	andeq	r0, r0, ip, lsl sp
void __pi_ondomain (lword d) {
     494:	00000d20 	andeq	r0, r0, r0, lsr #26
	...
		if (__pi_systat.effpdm > 1)
     4a0:	00000d5c 	andeq	r0, r0, ip, asr sp
			__pi_systat.effpdm = 1;
     4a4:	00000d60 	andeq	r0, r0, r0, ror #26
	PRCMPowerDomainOn (d);
     4a8:	00000d62 	andeq	r0, r0, r2, ror #26
     4ac:	00000d6a 	andeq	r0, r0, sl, ror #26
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b8:	00000d60 	andeq	r0, r0, r0, ror #26
     4bc:	00000d62 	andeq	r0, r0, r2, ror #26
	__pi_systat.ondmns |= d;
     4c0:	00000d6e 	andeq	r0, r0, lr, ror #26
     4c4:	00000d70 	andeq	r0, r0, r0, ror sp
	...
void __pi_syserror (word ec, const char *m) {
     4d0:	00000d8e 	andeq	r0, r0, lr, lsl #27
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	00000d90 	muleq	r0, r0, sp
     4d8:	00000d92 	muleq	r0, r2, sp
     4dc:	00000d94 	muleq	r0, r4, sp
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e8:	00000d90 	muleq	r0, r0, sp
		all_leds_blink;
     4ec:	00000d92 	muleq	r0, r2, sp
     4f0:	00000d94 	muleq	r0, r4, sp
     4f4:	00000d98 	muleq	r0, r8, sp
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     500:	00000dee 	andeq	r0, r0, lr, ror #27
     504:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     508:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     50c:	00000df2 	strdeq	r0, [r0], -r2
	...
	while (1) {
     518:	00000df6 	strdeq	r0, [r0], -r6
     51c:	00000dfa 	strdeq	r0, [r0], -sl
     520:	00000dfc 	strdeq	r0, [r0], -ip
void tci_run_delay_timer () {
     524:	00000dfe 	strdeq	r0, [r0], -lr
	...
	setdel = __pi_mintk - __pi_old;
     530:	00000001 	andeq	r0, r0, r1
     534:	00000001 	andeq	r0, r0, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	00000001 	andeq	r0, r0, r1
     53c:	00000001 	andeq	r0, r0, r1
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	00000e80 	andeq	r0, r0, r0, lsl #29
	sti_tim;
     54c:	00000e80 	andeq	r0, r0, r0, lsl #29
}
     550:	00000e84 	andeq	r0, r0, r4, lsl #29
     554:	00000e90 	muleq	r0, r0, lr
	...
     560:	00000430 	andeq	r0, r0, r0, lsr r4
	cli_aux;
     564:	0000043c 	andeq	r0, r0, ip, lsr r4
     568:	0000043c 	andeq	r0, r0, ip, lsr r4
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	00000468 	andeq	r0, r0, r8, ror #8
     570:	00000468 	andeq	r0, r0, r8, ror #8
     574:	00000492 	muleq	r0, r2, r4
     578:	00000494 	muleq	r0, r4, r4
	sti_aux;
     57c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
     580:	00000001 	andeq	r0, r0, r1
     584:	00000001 	andeq	r0, r0, r1
     588:	00000001 	andeq	r0, r0, r1
void AONRTCIntHandler () {
     58c:	00000001 	andeq	r0, r0, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     594:	00000524 	andeq	r0, r0, r4, lsr #10
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	00000524 	andeq	r0, r0, r4, lsr #10
		if (__pi_utims [0] == 0)
     59c:	00000564 	andeq	r0, r0, r4, ror #10
     5a0:	00000564 	andeq	r0, r0, r4, ror #10
		if (*(__pi_utims [0])) {
     5a4:	0000058c 	andeq	r0, r0, ip, lsl #11
     5a8:	0000058c 	andeq	r0, r0, ip, lsl #11
			(*(__pi_utims [0]))--;
     5ac:	000006a0 	andeq	r0, r0, r0, lsr #13
		if (__pi_utims [1] == 0)
     5b0:	000006a0 	andeq	r0, r0, r0, lsr #13
		if (*(__pi_utims [1])) {
     5b4:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			aux_timer_inactive = 0;
     5b8:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			(*(__pi_utims [1]))--;
     5bc:	00000744 	andeq	r0, r0, r4, asr #14
		if (__pi_utims [2] == 0)
     5c0:	00000744 	andeq	r0, r0, r4, asr #14
		if (*(__pi_utims [2])) {
     5c4:	0000077c 	andeq	r0, r0, ip, ror r7
			(*(__pi_utims [2]))--;
     5c8:	0000077c 	andeq	r0, r0, ip, ror r7
		if (__pi_utims [3] != 0) {
     5cc:	0000088c 	andeq	r0, r0, ip, lsl #17
			if (*(__pi_utims [3])) {
     5d0:	00000001 	andeq	r0, r0, r1
				aux_timer_inactive = 0;
     5d4:	00000001 	andeq	r0, r0, r1
				(*(__pi_utims [3]))--;
     5d8:	0000088c 	andeq	r0, r0, ip, lsl #17
	if (__pi_systat.ledsts) {
     5dc:	0000094c 	andeq	r0, r0, ip, asr #18
     5e0:	0000094c 	andeq	r0, r0, ip, asr #18
		if (__pi_systat.ledblc++ == 0) {
     5e4:	00000990 	muleq	r0, r0, r9
     5e8:	00000990 	muleq	r0, r0, r9
			if (__pi_systat.ledblk) {
     5ec:	000009cc 	andeq	r0, r0, ip, asr #19
     5f0:	000009cc 	andeq	r0, r0, ip, asr #19
     5f4:	00000a70 	andeq	r0, r0, r0, ror sl
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	00000a70 	andeq	r0, r0, r0, ror sl
     5fc:	00000c28 	andeq	r0, r0, r8, lsr #24
				if (__pi_systat.ledsts & 0x2)
     600:	00000001 	andeq	r0, r0, r1
     604:	00000001 	andeq	r0, r0, r1
     608:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x4)
     60c:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 0;
     610:	00000c28 	andeq	r0, r0, r8, lsr #24
     614:	00000e80 	andeq	r0, r0, r0, lsl #29
			if (__pi_systat.fstblk)
     618:	00000001 	andeq	r0, r0, r1
     61c:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblc = 200;
     620:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     624:	00000001 	andeq	r0, r0, r1
		cli_tim;
     628:	00000e80 	andeq	r0, r0, r0, lsl #29
		__pi_new += setdel;
     62c:	00000ee0 	andeq	r0, r0, r0, ror #29
	...
		RISE_N_SHINE;
     638:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
		__pi_new += setdel;
     63c:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
		RISE_N_SHINE;
     640:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
     644:	00000fa0 	andeq	r0, r0, r0, lsr #31
	...
				if (__pi_systat.ledsts & 0x1)
     650:	00000fd2 	ldrdeq	r0, [r0], -r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     654:	00001074 	andeq	r1, r0, r4, ror r0
     658:	00001078 	andeq	r1, r0, r8, ror r0
				if (__pi_systat.ledsts & 0x2)
     65c:	0000107c 	andeq	r1, r0, ip, ror r0
	...
				if (__pi_systat.ledsts & 0x8)
     668:	00001468 	andeq	r1, r0, r8, ror #8
				__pi_systat.ledblk = 1;
     66c:	0000146a 	andeq	r1, r0, sl, ror #8
     670:	0000146e 	andeq	r1, r0, lr, ror #8
		if (aux_timer_inactive) {
     674:	00001470 	andeq	r1, r0, r0, ror r4
			cli_aux;
     678:	00001474 	andeq	r1, r0, r4, ror r4
     67c:	00001478 	andeq	r1, r0, r8, ror r4
     680:	0000147a 	andeq	r1, r0, sl, ror r4
     684:	00001484 	andeq	r1, r0, r4, lsl #9
	...
     690:	000014b6 			; <UNDEFINED> instruction: 0x000014b6
     694:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
     698:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
     69c:	000014be 			; <UNDEFINED> instruction: 0x000014be
word tci_update_delay_ticks (Boolean force) {
     6a0:	0000154e 	andeq	r1, r0, lr, asr #10
	cli_tim;
     6a4:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
     6a8:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
	if (setdel) {
     6ac:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	000015ba 			; <UNDEFINED> instruction: 0x000015ba
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	000014d2 	ldrdeq	r1, [r0], -r2
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	000014d4 	ldrdeq	r1, [r0], -r4
	return NO;
     6c8:	000014d4 	ldrdeq	r1, [r0], -r4
			setdel = 0;
     6cc:	000014d6 	ldrdeq	r1, [r0], -r6
	...
}
     6d8:	00000ee0 	andeq	r0, r0, r0, ror #29
		sti_tim;
     6dc:	00000f1c 	andeq	r0, r0, ip, lsl pc
		return YES;
     6e0:	00000f1c 	andeq	r0, r0, ip, lsl pc
     6e4:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     6e8:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     6ec:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     6f4:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
	UARTDisable (UART0_BASE);
     6fc:	00000fc4 	andeq	r0, r0, r4, asr #31
	UARTConfigSetExpClk (UART0_BASE,
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
     708:	00000001 	andeq	r0, r0, r1
     70c:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	00000fc4 	andeq	r0, r0, r4, asr #31
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	00001090 	muleq	r0, r0, r0
     720:	00001090 	muleq	r0, r0, r0
     724:	000010a4 	andeq	r1, r0, r4, lsr #1
	urates [0] = rate;
     728:	000010a4 	andeq	r1, r0, r4, lsr #1
}
     72c:	000010d8 	ldrdeq	r1, [r0], -r8
     730:	000010d8 	ldrdeq	r1, [r0], -r8
     734:	0000110c 	andeq	r1, r0, ip, lsl #2
     738:	00000001 	andeq	r0, r0, r1
     73c:	00000001 	andeq	r0, r0, r1
     740:	0000110c 	andeq	r1, r0, ip, lsl #2
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	00001130 	andeq	r1, r0, r0, lsr r1
     748:	00001130 	andeq	r1, r0, r0, lsr r1
     74c:	00001168 	andeq	r1, r0, r8, ror #2
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	00000001 	andeq	r0, r0, r1
     75c:	00000001 	andeq	r0, r0, r1
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	00000001 	andeq	r0, r0, r1
     764:	00000001 	andeq	r0, r0, r1
     768:	00001168 	andeq	r1, r0, r8, ror #2
     76c:	0000118c 	andeq	r1, r0, ip, lsl #3
     770:	00000001 	andeq	r0, r0, r1
     774:	00000001 	andeq	r0, r0, r1
     778:	0000118c 	andeq	r1, r0, ip, lsl #3
	switch (operation) {
     77c:	0000119a 	muleq	r0, sl, r1
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
     788:	00000001 	andeq	r0, r0, r1
     78c:	00000001 	andeq	r0, r0, r1
     790:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     794:	00000001 	andeq	r0, r0, r1
     798:	00000001 	andeq	r0, r0, r1
			while (len && uart_a_char_available) {
     79c:	00000001 	andeq	r0, r0, r1
     7a0:	0000119a 	muleq	r0, sl, r1
     7a4:	000011ae 	andeq	r1, r0, lr, lsr #3
			if (len != operation) {
     7a8:	00000001 	andeq	r0, r0, r1
}
     7ac:	00000001 	andeq	r0, r0, r1
     7b0:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
			uart_a_disable_int;
     7b4:	000011d4 	ldrdeq	r1, [r0], -r4
			if (uart_a_char_available) {
     7b8:	000011d4 	ldrdeq	r1, [r0], -r4
				*buf++ = uart_a_read;
     7bc:	00001270 	andeq	r1, r0, r0, ror r2
			uart_a_disable_int;
     7c0:	00001270 	andeq	r1, r0, r0, ror r2
     7c4:	000012c0 	andeq	r1, r0, r0, asr #5
			if (uart_a_char_available) {
     7c8:	000012c0 	andeq	r1, r0, r0, asr #5
     7cc:	00001308 	andeq	r1, r0, r8, lsl #6
				uart_a_enable_int;
     7d0:	00001308 	andeq	r1, r0, r8, lsl #6
     7d4:	00001358 	andeq	r1, r0, r8, asr r3
				goto Redo_rx;
     7d8:	00001358 	andeq	r1, r0, r8, asr r3
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     7e0:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
			return -2;
     7e4:	00001458 	andeq	r1, r0, r8, asr r4
     7e8:	00001458 	andeq	r1, r0, r8, asr r4
				uart_a_write (*buf);
     7ec:	0000148c 	andeq	r1, r0, ip, lsl #9
     7f0:	0000148c 	andeq	r1, r0, ip, lsl #9
			while (len && uart_a_room_in_tx) {
     7f4:	000014a4 	andeq	r1, r0, r4, lsr #9
     7f8:	00000001 	andeq	r0, r0, r1
     7fc:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     800:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     804:	00000001 	andeq	r0, r0, r1
     808:	000014a4 	andeq	r1, r0, r4, lsr #9
			if (uart_a_room_in_tx) {
     80c:	000015e0 	andeq	r1, r0, r0, ror #11
     810:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     814:	00000001 	andeq	r0, r0, r1
	...
			if (uart_a_room_in_tx) {
     820:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
			uart_a_enable_int;
     834:	00000001 	andeq	r0, r0, r1
	...
			return 0;
     840:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     844:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
	...
			syserror (ENOOPER, "uai");
     858:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     85c:	00000001 	andeq	r0, r0, r1
				return 1;
     860:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
     888:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
     890:	00000001 	andeq	r0, r0, r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00000001 	andeq	r0, r0, r1
     8c4:	00000001 	andeq	r0, r0, r1
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     8f4:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
     908:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
}
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	000015e0 	andeq	r1, r0, r0, ror #11
     944:	000015e2 	andeq	r1, r0, r2, ror #11
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	000015e2 	andeq	r1, r0, r2, ror #11
     954:	000015e4 	andeq	r1, r0, r4, ror #11
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	000015e4 	andeq	r1, r0, r4, ror #11
     95c:	000015e6 	andeq	r1, r0, r6, ror #11
     960:	000015e6 	andeq	r1, r0, r6, ror #11
		bn = BUTTON_GPIO (__button_list [i]);
     964:	000015e8 	andeq	r1, r0, r8, ror #11
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	000015e8 	andeq	r1, r0, r8, ror #11
     96c:	0000162c 	andeq	r1, r0, ip, lsr #12
	...
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
}
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     990:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     994:	00000001 	andeq	r0, r0, r1
	...
     9a0:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ac:	00000001 	andeq	r0, r0, r1
	...
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	00000001 	andeq	r0, r0, r1
}
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
     9c8:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     9cc:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     9d0:	00000001 	andeq	r0, r0, r1
     9d4:	00000001 	andeq	r0, r0, r1
	...
	i_trigger ((aword)&__button_list);
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
	...
     9f8:	00000001 	andeq	r0, r0, r1
     9fc:	00000001 	andeq	r0, r0, r1
     a00:	00000001 	andeq	r0, r0, r1
     a04:	00000001 	andeq	r0, r0, r1
     a08:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     a0c:	00000001 	andeq	r0, r0, r1
	...
if (pin_sensor_int) {
     a18:	00000001 	andeq	r0, r0, r1
     a1c:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     a20:	00000001 	andeq	r0, r0, r1
     a24:	00000001 	andeq	r0, r0, r1
	...
     a30:	00001638 	andeq	r1, r0, r8, lsr r6
     a34:	0000163c 	andeq	r1, r0, ip, lsr r6
     a38:	00001642 	andeq	r1, r0, r2, asr #12
     a3c:	00001644 	andeq	r1, r0, r4, asr #12
     a40:	00001652 	andeq	r1, r0, r2, asr r6
     a44:	00001652 	andeq	r1, r0, r2, asr r6
     a48:	00001654 	andeq	r1, r0, r4, asr r6
	__pinsen_disable_and_clear;
     a4c:	00001656 	andeq	r1, r0, r6, asr r6
	...
	RISE_N_SHINE;
     a58:	0000163e 	andeq	r1, r0, lr, lsr r6
}
     a5c:	00001640 	andeq	r1, r0, r0, asr #12
     a60:	00001656 	andeq	r1, r0, r6, asr r6
     a64:	00001658 	andeq	r1, r0, r8, asr r6
	...
void system_init () {
     a70:	00001640 	andeq	r1, r0, r0, asr #12
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	00001642 	andeq	r1, r0, r2, asr #12
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a78:	00001644 	andeq	r1, r0, r4, asr #12
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	00001646 	andeq	r1, r0, r6, asr #12
     a80:	0000164c 	andeq	r1, r0, ip, asr #12
     a84:	0000164c 	andeq	r1, r0, ip, asr #12
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	00001670 	andeq	r1, r0, r0, ror r6
     a94:	00001678 	andeq	r1, r0, r8, ror r6
     a98:	00001682 	andeq	r1, r0, r2, lsl #13
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	00001682 	andeq	r1, r0, r2, lsl #13
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	00001686 	andeq	r1, r0, r6, lsl #13
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	00001688 	andeq	r1, r0, r8, lsl #13
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab0:	00001688 	andeq	r1, r0, r8, lsl #13
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	00001688 	andeq	r1, r0, r8, lsl #13
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	0000168a 	andeq	r1, r0, sl, lsl #13
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	0000168c 	andeq	r1, r0, ip, lsl #13
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac8:	00001698 	muleq	r0, r8, r6
     acc:	0000169a 	muleq	r0, sl, r6
		if (port_confs [i] & 0x80)
     ad0:	0000169c 	muleq	r0, ip, r6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	000016a0 	andeq	r1, r0, r0, lsr #13
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
     ae4:	000016ba 			; <UNDEFINED> instruction: 0x000016ba
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae8:	000016be 			; <UNDEFINED> instruction: 0x000016be
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aec:	000016c0 	andeq	r1, r0, r0, asr #13
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af0:	000016c6 	andeq	r1, r0, r6, asr #13
	all_leds_blink;
     af4:	000016d6 	ldrdeq	r1, [r0], -r6
	...
     b00:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
     b04:	000016ba 			; <UNDEFINED> instruction: 0x000016ba
     b08:	000016be 			; <UNDEFINED> instruction: 0x000016be
     b0c:	000016c0 	andeq	r1, r0, r0, asr #13
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	000016c6 	andeq	r1, r0, r6, asr #13
     b14:	000016c6 	andeq	r1, r0, r6, asr #13
     b18:	000016c8 	andeq	r1, r0, r8, asr #13
     b1c:	000016ca 	andeq	r1, r0, sl, asr #13
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	0000171e 	andeq	r1, r0, lr, lsl r7
     b2c:	00001722 	andeq	r1, r0, r2, lsr #14
	IntEnable (INT_AON_RTC_COMB);
     b30:	00001724 	andeq	r1, r0, r4, lsr #14
     b34:	00001726 	andeq	r1, r0, r6, lsr #14
	...
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	0000172a 	andeq	r1, r0, sl, lsr #14
     b44:	0000172a 	andeq	r1, r0, sl, lsr #14
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	0000172c 	andeq	r1, r0, ip, lsr #14
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	0000172e 	andeq	r1, r0, lr, lsr #14
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	00000001 	andeq	r0, r0, r1
     b5c:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	00000001 	andeq	r0, r0, r1
     b64:	00000001 	andeq	r0, r0, r1
	...
	urates [0] = UART_RATE / 100;
     b70:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     b74:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
     b78:	00000001 	andeq	r0, r0, r1
     b7c:	00000001 	andeq	r0, r0, r1
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b88:	00000001 	andeq	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	00000001 	andeq	r0, r0, r1
     b90:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	00000001 	andeq	r0, r0, r1
     ba4:	00000001 	andeq	r0, r0, r1
     ba8:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_UART0_COMB);
     bac:	00000001 	andeq	r0, r0, r1
	...
	tci_run_auxiliary_timer ();
     bb8:	00001634 	andeq	r1, r0, r4, lsr r6
		diag ("");
     bbc:	00001668 	andeq	r1, r0, r8, ror #12
     bc0:	00001668 	andeq	r1, r0, r8, ror #12
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	00001698 	muleq	r0, r8, r6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	00001698 	muleq	r0, r8, r6
		diag ("Leftover RAM: %d bytes",
     bcc:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
     bd0:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
     bd4:	00001704 	andeq	r1, r0, r4, lsl #14
     bd8:	00001704 	andeq	r1, r0, r4, lsl #14
     bdc:	00001744 	andeq	r1, r0, r4, asr #14
     be0:	00001744 	andeq	r1, r0, r4, asr #14
     be4:	00001768 	andeq	r1, r0, r8, ror #14
     be8:	00001768 	andeq	r1, r0, r8, ror #14
     bec:	0000177c 	andeq	r1, r0, ip, ror r7
     bf0:	0000177c 	andeq	r1, r0, ip, ror r7
     bf4:	00001790 	muleq	r0, r0, r7
     bf8:	00000001 	andeq	r0, r0, r1
     bfc:	00000001 	andeq	r0, r0, r1
     c00:	00000001 	andeq	r0, r0, r1
     c04:	00000001 	andeq	r0, r0, r1
     c08:	00000001 	andeq	r0, r0, r1
     c0c:	00000001 	andeq	r0, r0, r1
     c10:	00000001 	andeq	r0, r0, r1
     c14:	00000001 	andeq	r0, r0, r1
     c18:	00000001 	andeq	r0, r0, r1
     c1c:	00000001 	andeq	r0, r0, r1
     c20:	00000001 	andeq	r0, r0, r1
     c24:	00000001 	andeq	r0, r0, r1
__attribute__ ((noreturn)) void __pi_release () {
     c28:	00000001 	andeq	r0, r0, r1
     c2c:	00000001 	andeq	r0, r0, r1
	...
	check_stack_overflow;
     c38:	00001790 	muleq	r0, r0, r7
     c3c:	00001808 	andeq	r1, r0, r8, lsl #16
	...
	update_n_wake (MAX_WORD, NO);
     c48:	00001808 	andeq	r1, r0, r8, lsl #16
     c4c:	0000185c 	andeq	r1, r0, ip, asr r8
	...
	for_all_tasks (__pi_curr) {
     c58:	0000185c 	andeq	r1, r0, ip, asr r8
     c5c:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
	...
	__SLEEP;
     c68:	000018ca 	andeq	r1, r0, sl, asr #17
     c6c:	000018ca 	andeq	r1, r0, sl, asr #17
	system_event_count ++;
     c70:	000018d0 	ldrdeq	r1, [r0], -r0
     c74:	0000192c 	andeq	r1, r0, ip, lsr #18
	...
	switch (__pi_systat.effpdm) {
     c80:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
     c84:	0000192c 	andeq	r1, r0, ip, lsr #18
	...
     c90:	00001940 	andeq	r1, r0, r0, asr #18
	check_stack_overflow;
     c94:	00001a24 	andeq	r1, r0, r4, lsr #20
     c98:	00001a2a 	andeq	r1, r0, sl, lsr #20
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	00001a2e 	andeq	r1, r0, lr, lsr #20
     ca0:	00001a34 	andeq	r1, r0, r4, lsr sl
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	00001a48 	andeq	r1, r0, r8, asr #20
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	0000192c 	andeq	r1, r0, ip, lsr #18
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	00001a48 	andeq	r1, r0, r8, asr #20
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cc0:	00001a74 	andeq	r1, r0, r4, ror sl
     cc4:	00001a76 	andeq	r1, r0, r6, ror sl
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	00001b44 	andeq	r1, r0, r4, asr #22
     ccc:	00001b68 	andeq	r1, r0, r8, ror #22
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	00001b6a 	andeq	r1, r0, sl, ror #22
     cd4:	00001bb2 			; <UNDEFINED> instruction: 0x00001bb2
			__WFI ();
     cd8:	00001bdc 	ldrdeq	r1, [r0], -ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cdc:	00001bde 	ldrdeq	r1, [r0], -lr
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce8:	00001a76 	andeq	r1, r0, r6, ror sl
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	00001a78 	andeq	r1, r0, r8, ror sl
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	00001b1a 	andeq	r1, r0, sl, lsl fp
     cf4:	00001b44 	andeq	r1, r0, r4, asr #22
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	00001b68 	andeq	r1, r0, r8, ror #22
     cfc:	00001b6a 	andeq	r1, r0, sl, ror #22
	...
     d08:	00001ab6 			; <UNDEFINED> instruction: 0x00001ab6
     d0c:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
     d10:	00001c62 	andeq	r1, r0, r2, ror #24
     d14:	00001c6e 	andeq	r1, r0, lr, ror #24
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	00001bbc 			; <UNDEFINED> instruction: 0x00001bbc
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	00001bdc 	ldrdeq	r1, [r0], -ip
     d28:	00001bde 	ldrdeq	r1, [r0], -lr
     d2c:	00001c22 	andeq	r1, r0, r2, lsr #24
	...
			SysCtrlSetRechargeBeforePowerDown
     d38:	00001a48 	andeq	r1, r0, r8, asr #20
     d3c:	00001a68 	andeq	r1, r0, r8, ror #20
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	00001a68 	andeq	r1, r0, r8, ror #20
     d44:	00001c98 	muleq	r0, r8, ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	00001c98 	muleq	r0, r8, ip
     d4c:	00001ce8 	andeq	r1, r0, r8, ror #25
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d58:	00001cfc 	strdeq	r1, [r0], -ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	00001d00 	andeq	r1, r0, r0, lsl #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	00001fda 	ldrdeq	r1, [r0], -sl
     d64:	00002022 	andeq	r2, r0, r2, lsr #32
	...
			while (!(AONWUCPowerStatusGet () &
     d70:	00001d00 	andeq	r1, r0, r0, lsl #26
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	00001d06 	andeq	r1, r0, r6, lsl #26
     d78:	00001d3e 	andeq	r1, r0, lr, lsr sp
     d7c:	00001daa 	andeq	r1, r0, sl, lsr #27
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d80:	0000203e 	andeq	r2, r0, lr, lsr r0
     d84:	0000205e 	andeq	r2, r0, lr, asr r0
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	00001e62 	andeq	r1, r0, r2, ror #28
     d94:	00001edc 	ldrdeq	r1, [r0], -ip
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	00002066 	andeq	r2, r0, r6, rrx
     d9c:	0000206e 	andeq	r2, r0, lr, rrx
	...
     da8:	00001ef4 	strdeq	r1, [r0], -r4
     dac:	00001f4a 	andeq	r1, r0, sl, asr #30
}
     db0:	00001fc0 	andeq	r1, r0, r0, asr #31
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db4:	00001fda 	ldrdeq	r1, [r0], -sl
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dc0:	00001f50 	andeq	r1, r0, r0, asr pc
     dc4:	00001fc0 	andeq	r1, r0, r0, asr #31
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	00002022 	andeq	r2, r0, r2, lsr #32
     dcc:	0000202a 	andeq	r2, r0, sl, lsr #32
     dd0:	0000206e 	andeq	r2, r0, lr, rrx
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	00002078 	andeq	r2, r0, r8, ror r0
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	00001ce8 	andeq	r1, r0, r8, ror #25
     de4:	00002078 	andeq	r2, r0, r8, ror r0
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	00002078 	andeq	r2, r0, r8, ror r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	000020a8 	andeq	r2, r0, r8, lsr #1
	...
			PRCMPowerDomainOff (
     e00:	00000001 	andeq	r0, r0, r1
     e04:	00000001 	andeq	r0, r0, r1
	__SLEEP;
     e08:	000020a8 	andeq	r2, r0, r8, lsr #1
     e0c:	000020c0 	andeq	r2, r0, r0, asr #1
	...
	goto Redo;
     e18:	000020c0 	andeq	r2, r0, r0, asr #1
     e1c:	000020c8 	andeq	r2, r0, r8, asr #1
     e20:	00000001 	andeq	r0, r0, r1
     e24:	00000001 	andeq	r0, r0, r1
     e28:	000020c8 	andeq	r2, r0, r8, asr #1
     e2c:	000020d0 	ldrdeq	r2, [r0], -r0
     e30:	00000001 	andeq	r0, r0, r1
     e34:	00000001 	andeq	r0, r0, r1
     e38:	00000001 	andeq	r0, r0, r1
     e3c:	00000001 	andeq	r0, r0, r1
	...
     e48:	000020d0 	ldrdeq	r2, [r0], -r0
     e4c:	000021a4 	andeq	r2, r0, r4, lsr #3
     e50:	000021a4 	andeq	r2, r0, r4, lsr #3
     e54:	00002248 	andeq	r2, r0, r8, asr #4
	...
     e60:	00002256 	andeq	r2, r0, r6, asr r2
     e64:	00002258 	andeq	r2, r0, r8, asr r2
     e68:	0000225c 	andeq	r2, r0, ip, asr r2
     e6c:	00002260 	andeq	r2, r0, r0, ror #4
	...
     e78:	00002564 	andeq	r2, r0, r4, ror #10
     e7c:	00002566 	andeq	r2, r0, r6, ror #10
int main (void) {
     e80:	00002568 	andeq	r2, r0, r8, ror #10
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	0000256a 	andeq	r2, r0, sl, ror #10
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	00002248 	andeq	r2, r0, r8, asr #4
	system_init ();
     e94:	000022c4 	andeq	r2, r0, r4, asr #5
	tcv_init ();
     e98:	000022c4 	andeq	r2, r0, r4, asr #5
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	00002370 	andeq	r2, r0, r0, ror r3
     ea0:	00002370 	andeq	r2, r0, r0, ror r3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	000023cc 	andeq	r2, r0, ip, asr #7
     ea8:	000023cc 	andeq	r2, r0, ip, asr #7
     eac:	000023e4 	andeq	r2, r0, r4, ror #7
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	00000001 	andeq	r0, r0, r1
     eb4:	00000001 	andeq	r0, r0, r1
	delay (16, 0);
     eb8:	000023e4 	andeq	r2, r0, r4, ror #7
     ebc:	000023f4 	strdeq	r2, [r0], -r4
     ec0:	000023f4 	strdeq	r2, [r0], -r4
	__pi_release ();
     ec4:	00002408 	andeq	r2, r0, r8, lsl #8
     ec8:	00002408 	andeq	r2, r0, r8, lsl #8
     ecc:	0000246c 	andeq	r2, r0, ip, ror #8
     ed0:	0000246c 	andeq	r2, r0, ip, ror #8
     ed4:	00002480 	andeq	r2, r0, r0, lsl #9
     ed8:	00002480 	andeq	r2, r0, r0, lsl #9
     edc:	00002494 	muleq	r0, r4, r4
static void killev (__pi_pcb_t *pid) {
     ee0:	00002494 	muleq	r0, r4, r4
	wfun = (aword)(pid->code);
     ee4:	000024a8 	andeq	r2, r0, r8, lsr #9
	for_all_tasks (i) {
     ee8:	000024a8 	andeq	r2, r0, r8, lsr #9
		for (j = 0; j < nevents (i); j++) {
     eec:	000024d0 	ldrdeq	r2, [r0], -r0
     ef0:	000024d0 	ldrdeq	r2, [r0], -r0
     ef4:	000024e0 	andeq	r2, r0, r0, ror #9
			    || i->Events [j] . Event == wfun
     ef8:	000024e0 	andeq	r2, r0, r0, ror #9
		for (j = 0; j < nevents (i); j++) {
     efc:	0000250c 	andeq	r2, r0, ip, lsl #10
			if (i->Events [j] . Event == (aword)pid
     f00:	0000250c 	andeq	r2, r0, ip, lsl #10
     f04:	00002520 	andeq	r2, r0, r0, lsr #10
     f08:	00002520 	andeq	r2, r0, r0, lsr #10
				wakeupev (i, j);
     f0c:	00002534 	andeq	r2, r0, r4, lsr r5
     f10:	00002534 	andeq	r2, r0, r4, lsr r5
	for_all_tasks (i) {
     f14:	00002644 	andeq	r2, r0, r4, asr #12
}
     f18:	00002644 	andeq	r2, r0, r4, asr #12
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	000026a8 	andeq	r2, r0, r8, lsr #13
static void qfree (aword *ch) {
     f20:	000026a8 	andeq	r2, r0, r8, lsr #13
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	000026d0 	ldrdeq	r2, [r0], -r0
	cc = (aword*)(mpools + MA_NP);
     f28:	000026d0 	ldrdeq	r2, [r0], -r0
	m_setnextp (ch, chunk);
     f2c:	00002820 	andeq	r2, r0, r0, lsr #16
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     f44:	00000001 	andeq	r0, r0, r1
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     f50:	00002896 	muleq	r0, r6, r8
     f54:	00002898 	muleq	r0, r8, r8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	0000289a 	muleq	r0, sl, r8
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	0000289e 	muleq	r0, lr, r8
	...
			m_setnextp (cc, m_nextp (chunk));
     f68:	00000001 	andeq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	00000001 	andeq	r0, r0, r1
     f70:	00002820 	andeq	r2, r0, r0, lsr #16
     f74:	00002a40 	andeq	r2, r0, r0, asr #20
     f78:	00002a40 	andeq	r2, r0, r0, asr #20
     f7c:	00002aa0 	andeq	r2, r0, r0, lsr #21
     f80:	00000001 	andeq	r0, r0, r1
			if (m_size (chunk) >= m_size (ch))
     f84:	00000001 	andeq	r0, r0, r1
     f88:	00002aa0 	andeq	r2, r0, r0, lsr #21
     f8c:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
	...
		chunk = m_nextp (chunk))
     f98:	00002b06 	andeq	r2, r0, r6, lsl #22
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	00002b0a 	andeq	r2, r0, sl, lsl #22
	diag_wait (a);
     fa0:	00002b10 	andeq	r2, r0, r0, lsl fp
	diag_wchar (c, a);
     fa4:	00002b12 	andeq	r2, r0, r2, lsl fp
	...
}
     fb0:	00002b0a 	andeq	r2, r0, sl, lsl #22
	syserror (ESTATE, "state");
     fb4:	00002b10 	andeq	r2, r0, r0, lsl fp
     fb8:	00002b12 	andeq	r2, r0, r2, lsl fp
     fbc:	00002b1a 	andeq	r2, r0, sl, lsl fp
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	00000001 	andeq	r0, r0, r1
     fcc:	00000001 	andeq	r0, r0, r1
     fd0:	00000001 	andeq	r0, r0, r1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	00000001 	andeq	r0, r0, r1
     fd8:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
     fdc:	00002b04 	andeq	r2, r0, r4, lsl #22
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
     fe8:	00002b04 	andeq	r2, r0, r4, lsl #22
     fec:	00002b70 	andeq	r2, r0, r0, ror fp
     ff0:	00002b70 	andeq	r2, r0, r0, ror fp
     ff4:	00002b86 	andeq	r2, r0, r6, lsl #23
	...
    1000:	00002b88 	andeq	r2, r0, r8, lsl #23
    1004:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
		for_all_tasks (i) {
    1008:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
	__pi_mintk = znew + min;
    100c:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    1010:	00000001 	andeq	r0, r0, r1
			if (!twaiting (i))
    1014:	00000001 	andeq	r0, r0, r1
    1018:	00000001 	andeq	r0, r0, r1
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101c:	00000001 	andeq	r0, r0, r1
    1020:	00000001 	andeq	r0, r0, r1
    1024:	00000001 	andeq	r0, r0, r1
    1028:	00000001 	andeq	r0, r0, r1
    102c:	00000001 	andeq	r0, r0, r1
	...
    1038:	00002c1a 	andeq	r2, r0, sl, lsl ip
    103c:	00002c2a 	andeq	r2, r0, sl, lsr #24
    1040:	00002c30 	andeq	r2, r0, r0, lsr ip
    1044:	00002c32 	andeq	r2, r0, r2, lsr ip
	...
				wakeuptm (i);
    1050:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
		for_all_tasks (i) {
    1054:	00002c14 	andeq	r2, r0, r4, lsl ip
				d = i->Timer - znew;
    1058:	00002c14 	andeq	r2, r0, r4, lsl ip
    105c:	00002c40 	andeq	r2, r0, r0, asr #24
    1060:	00000001 	andeq	r0, r0, r1
		if ((word)(__pi_mintk - znew) < min) 
    1064:	00000001 	andeq	r0, r0, r1
    1068:	00000001 	andeq	r0, r0, r1
    106c:	00000001 	andeq	r0, r0, r1
	__pi_old = znew;
    1070:	00000001 	andeq	r0, r0, r1
}
    1074:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
    1078:	00000001 	andeq	r0, r0, r1
}
    107c:	00000001 	andeq	r0, r0, r1
    1080:	00000001 	andeq	r0, r0, r1
    1084:	00000001 	andeq	r0, r0, r1
    1088:	00000001 	andeq	r0, r0, r1
    108c:	00000001 	andeq	r0, r0, r1
void proceed (word state) {
    1090:	00000001 	andeq	r0, r0, r1
	prcdstate (__pi_curr, state);
    1094:	00000001 	andeq	r0, r0, r1
    1098:	00000001 	andeq	r0, r0, r1
	release;
    109c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000052c 	andeq	r0, r0, ip, lsr #10
       4:	01380003 	teqeq	r8, r3
    return (time * SECOND)/1000;
       8:	01020000 	mrseq	r0, (UNDEF: 2)
}
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
      40:	2f534f63 	svccs	0x00534f63
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
            ch = redCharacter;
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
            onTime = redOn;
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
            offTime = redOff;
     130:	0300682e 	movweq	r6, #2094	; 0x82e
        ledFlag = 1 - ledFlag;
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
            offTime = greenOff;
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    return (time * SECOND)/1000;
     13c:	00040068 	andeq	r0, r4, r8, rrx
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
     144:	c8020500 	stmdagt	r2, {r8, sl}
     148:	03000000 	movweq	r0, #0
     14c:	1f050132 	svcne	0x00050132
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
        if (displayCycle)
     158:	03060905 	movweq	r0, #26885	; 0x6905
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	0e054a34 			; <UNDEFINED> instruction: 0x0e054a34
     160:	011e0501 	tsteq	lr, r1, lsl #10
        if(onTime > 0){
     164:	01062805 	tsteq	r6, r5, lsl #16
     168:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
            if(On)
     16c:	052e0630 	streq	r0, [lr, #-1584]!	; 0xfffff9d0
     170:	02040135 	andeq	r0, r4, #1073741837	; 0x4000000d
     174:	f2030505 	vrshl.s8	d0, d5, d3
                leds(led,0);
     178:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     180:	06480501 	strbeq	r0, [r8], -r1, lsl #10
     184:	2e7e8903 	vaddcs.f16	s17, s28, s6	; <UNPREDICTABLE>
     188:	01065b05 	tsteq	r6, r5, lsl #22
            delay(onTime, OFF_PERIOD);
     18c:	4a01b705 	bmi	6dda8 <__ccfg+0x4de00>
            delay(offTime, Check_PERIOD);
     190:	0601ca05 	streq	ip, [r1], -r5, lsl #20
     194:	0293054a 	addseq	r0, r3, #310378496	; 0x12800000
            led = greenLed;
     198:	02980501 	addseq	r0, r8, #4194304	; 0x400000
            ch = greenCharacter;
     19c:	02a00501 	adceq	r0, r0, #4194304	; 0x400000
     1a0:	06f90501 	ldrbteq	r0, [r9], r1, lsl #10
            onTime = greenOn;
     1a4:	15090501 	strne	r0, [r9, #-1281]	; 0xfffffaff
            offTime = greenOff;
     1a8:	01060d05 	tsteq	r6, r5, lsl #26
                leds(led,0);
     1ac:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     1b0:	052f060d 	streq	r0, [pc, #-1549]!	; fffffbab <_estack+0xdfffabab>
     1b4:	14055b09 	strne	r5, [r5], #-2825	; 0xfffff4f7
     1b8:	0b050106 	bleq	1405d8 <__ccfg+0x120630>
     1bc:	060d052e 	streq	r0, [sp], -lr, lsr #10
     1c0:	0305052f 	movweq	r0, #21807	; 0x552f
            proceed OFF_PERIOD;
     1c4:	14132e45 	ldrne	r2, [r3], #-3653	; 0xfffff1bb
        when(&On, Check_PERIOD);
     1c8:	09051513 	stmdbeq	r5, {r0, r1, r4, r8, sl, ip}
     1cc:	06140516 			; <UNDEFINED> instruction: 0x06140516
        release;
     1d0:	660b0501 	strvs	r0, [fp], -r1, lsl #10
        leds(led,0);
     1d4:	2f060d05 	svccs	0x00060d05
     1d8:	01061105 	tsteq	r6, r5, lsl #2
     1dc:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     1e0:	01061005 	tsteq	r6, r5
     1e4:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
}
     1e8:	01061405 	tsteq	r6, r5, lsl #8
     1ec:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     1f0:	01061505 	tsteq	r6, r5, lsl #10
     1f4:	052a2425 	streq	r2, [sl, #-1061]!	; 0xfffffbdb
     1f8:	05240609 	streq	r0, [r4, #-1545]!	; 0xfffff9f7
     1fc:	63030619 	movwvs	r0, #13849	; 0x3619
     200:	03110501 	tsteq	r1, #4194304	; 0x400000
     204:	09052e1d 	stmdbeq	r5, {r0, r2, r3, r4, r9, sl, fp, sp}
     208:	05052306 	streq	r2, [r5, #-774]	; 0xfffffcfa
     20c:	05016003 	streq	r6, [r1, #-3]
     210:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     214:	12053c19 	andne	r3, r5, #6400	; 0x1900
     218:	2019052e 	andscs	r0, r9, lr, lsr #10
     21c:	24030d05 	strcs	r0, [r3], #-3333	; 0xfffff2fb
     220:	0319053c 	tsteq	r9, #60, 10	; 0xf000000
     224:	0905205c 	stmdbeq	r5, {r2, r3, r4, r6, sp}
     228:	20210306 	eorcs	r0, r1, r6, lsl #6
     22c:	5f030505 	svcpl	0x00030505
     230:	03090501 	movweq	r0, #38145	; 0x9501
     234:	0c050124 	stfeqs	f0, [r5], {36}	; 0x24
     238:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    word numbers[] = {0, 0, 0, 0};
     23c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    int numbersIndex = 0;
     240:	060b055a 			; <UNDEFINED> instruction: 0x060b055a
    word numbers[] = {0, 0, 0, 0};
     244:	060d0501 	streq	r0, [sp], -r1, lsl #10
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	0610053e 			; <UNDEFINED> instruction: 0x0610053e
        if(settingsInput[i] == ' ') {
     24c:	2e0f0501 	cfsh32cs	mvfx0, mvfx15, #1
     250:	4b061105 	blmi	18466c <__ccfg+0x1646c4>
            numbers[numbersIndex] = number;
     254:	05011605 	streq	r1, [r1, #-1541]	; 0xfffff9fb
     258:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
            number = 0;
     25c:	050102c6 	streq	r0, [r1, #-710]	; 0xfffffd3a
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	05220629 	streq	r0, [r2, #-1577]!	; 0xfffff9d7
    redOn = numbers[0];
     264:	05200638 	streq	r0, [r0, #-1592]!	; 0xfffff9c8
     268:	0204013d 	andeq	r0, r4, #1073741839	; 0x4000000f
    redOff = numbers[1];
     26c:	fe030505 	cdp2	5, 0, cr0, cr3, cr5, {0}
     270:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
    greenOn = numbers[2];
     274:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     278:	06500501 	ldrbeq	r0, [r0], -r1, lsl #10
    greenOff = numbers[3];
     27c:	207dfd03 	rsbscs	pc, sp, r3, lsl #26
     280:	01066305 	tsteq	r6, r5, lsl #6
}
     284:	4a01bf05 	bmi	6fea0 <__ccfg+0x4fef8>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	0601d205 	streq	sp, [r1], -r5, lsl #4
     28c:	0781054a 	streq	r0, [r1, sl, asr #10]
            number = number * 10;
     290:	150d0501 	strne	r0, [sp, #-1281]	; 0xfffffaff
            number += settingsInput[i] - 48;
     294:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
     298:	3c560306 	mrrccc	3, 0, r0, r6, cr6
     29c:	01061105 	tsteq	r6, r5, lsl #2
     2a0:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     2a4:	01061005 	tsteq	r6, r5
     2a8:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
fsm root {
     2ac:	01061405 	tsteq	r6, r5, lsl #8
     2b0:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     2b4:	01061505 	tsteq	r6, r5, lsl #10
     2b8:	03061105 	movweq	r1, #24837	; 0x6105
     2bc:	16052e13 			; <UNDEFINED> instruction: 0x16052e13
     2c0:	01260501 			; <UNDEFINED> instruction: 0x01260501
     2c4:	2e018205 	cdpcs	2, 0, cr8, cr1, cr5, {0}
        ser_outf(Initial, "Enter your name: ");
     2c8:	06018505 	streq	r8, [r1], -r5, lsl #10
     2cc:	01940501 	orrseq	r0, r4, r1, lsl #10
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	99052e06 	stmdbls	r5, {r1, r2, r9, sl, fp, sp}
     2d4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	fe030505 	cdp2	5, 0, cr0, cr3, cr5, {0}
     2dc:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     2e0:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	01ac0501 			; <UNDEFINED> instruction: 0x01ac0501
     2e8:	7dfd0306 	ldclvc	3, cr0, [sp, #24]!
        if (choice == 'A' || choice == 'a'){
     2ec:	01bf052e 			; <UNDEFINED> instruction: 0x01bf052e
     2f0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     2f4:	09055d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, lr}
            proceed Adjust_Intervals;
     2f8:	7a054b3f 	bvc	152ffc <__ccfg+0x133054>
            proceed Monitor;
     2fc:	067d0531 			; <UNDEFINED> instruction: 0x067d0531
        proceed Show_Menu;
     300:	018c0501 	orreq	r0, ip, r1, lsl #10
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	91052e06 	tstls	r5, r6, lsl #28
     308:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	f2030505 	vrshl.s8	d0, d5, d3
     310:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     314:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
        processSettingsInput(settings);
     318:	01a40501 			; <UNDEFINED> instruction: 0x01a40501
        if(!blinkerRunning) {
     31c:	7e890306 	cdpvc	3, 8, cr0, cr9, cr6, {0}
     320:	01b7052e 			; <UNDEFINED> instruction: 0x01b7052e
            blinkerCode = runfsm blinker;
     324:	01050106 	tsteq	r5, r6, lsl #2
     328:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
            blinkerRunning = YES;
     32c:	05011305 	streq	r1, [r1, #-773]	; 0xfffffcfb
        On = YES;
     330:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     334:	29022e13 	stmdbcs	r2, {r0, r1, r4, r9, sl, fp, sp}
        trigger(&On);
     338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
        proceed Show_Menu;
     33c:	0205001c 	andeq	r0, r5, #28
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	00000000 	andeq	r0, r0, r0
     344:	05012d03 	streq	r2, [r1, #-3331]	; 0xfffff2fd
     348:	19051305 	stmdbne	r5, {r0, r2, r8, r9, ip}
     34c:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     350:	2019052e 	andscs	r0, r9, lr, lsr #10
     354:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     358:	01010002 	tsteq	r1, r2
        proceed Show_Menu;
     35c:	05003005 	streq	r3, [r0, #-5]
     360:	00023c02 	andeq	r3, r2, r2, lsl #24
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	00fd0300 	rscseq	r0, sp, r0, lsl #6
     368:	13050501 	movwne	r0, #21761	; 0x5501
        displayCycle = YES;
     36c:	01060a05 	tsteq	r6, r5, lsl #20
        ser_inf(Await_Stop, "%c", &ch);
     370:	051f3005 	ldreq	r3, [pc, #-5]	; 373 <root+0xc7>
     374:	0a052209 	beq	148ba0 <__ccfg+0x128bf8>
     378:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
        if(ch == 'S' || ch == 's'){
     37c:	0515142f 	ldreq	r1, [r5, #-1071]	; 0xfffffbd1
     380:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
     384:	2f090501 	svccs	0x00090501
            displayCycle = NO;
     388:	01061905 	tsteq	r6, r5, lsl #18
     38c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
            proceed Show_Menu;
     390:	0530060d 	ldreq	r0, [r0, #-1549]!	; 0xfffff9f3
        proceed Monitor;
     394:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
        On = NO;
     398:	1359060d 	cmpne	r9, #13631488	; 0xd00000
     39c:	11061405 	tstne	r6, r5, lsl #8
        if(blinkerCode != 0x0) {
     3a0:	05211905 	streq	r1, [r1, #-2309]!	; 0xfffff6fb
            killall(blinkerCode);
     3a4:	051b061d 	ldreq	r0, [fp, #-1565]	; 0xfffff9e3
     3a8:	05050115 	streq	r0, [r5, #-277]	; 0xfffffeeb
        proceed Show_Menu;
     3ac:	03060106 	movweq	r0, #24838	; 0x6106
     3b0:	0b052e0d 	bleq	14bbec <__ccfg+0x12bc44>
        leds_all(0);
     3b4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     3b8:	0c054b06 			; <UNDEFINED> instruction: 0x0c054b06
     3bc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
        proceed Show_Menu;
     3c0:	0d054c06 	stceq	12, cr4, [r5, #-24]	; 0xffffffe8
     3c4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
        } else if (choice == 'S' || choice == 's') {
     3c8:	0e054b06 	vmlaeq.f64	d4, d5, d6
            proceed Stop;
     3cc:	01050106 	tsteq	r5, r6, lsl #2
        } else if (choice == 'V' || choice == 'v') {
     3d0:	0610054b 	ldreq	r0, [r0], -fp, asr #10
            proceed View_Settings;
     3d4:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
        } else if (choice == 'M' || choice == 'm') {
     3d8:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
            proceed Monitor;
     3dc:	0d052013 	stceq	0, cr2, [r5, #-76]	; 0xffffffb4
     3e0:	14053006 	strne	r3, [r5], #-6
     3e4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     3e8:	14053d06 	strne	r3, [r5], #-3334	; 0xfffff2fa
     3ec:	0c020106 	stfeqs	f0, [r2], {6}
     3f0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     3f4:	0205001a 	andeq	r0, r5, #26
     3f8:	000002ac 	andeq	r0, r0, ip, lsr #5
     3fc:	01019903 	tsteq	r1, r3, lsl #18
     400:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
     404:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
     408:	14ca0605 	strbne	r0, [sl], #1541	; 0x605
     40c:	15090514 	strne	r0, [r9, #-1300]	; 0xfffffaec
     410:	09035b4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, fp, ip, lr}
     414:	055a1458 	ldrbeq	r1, [sl, #-1112]	; 0xfffffba8
     418:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     41c:	0667060d 	strbteq	r0, [r7], -sp, lsl #12
     420:	06090526 	streq	r0, [r9], -r6, lsr #10
     424:	144d3f31 	strbne	r3, [sp], #-3889	; 0xfffff0cf
     428:	0c05405a 	stceq	0, cr4, [r5], {90}	; 0x5a
     42c:	0b050106 	bleq	14084c <__ccfg+0x1208a4>
static void devinit_uart (int devnum) {
     430:	060d0520 	streq	r0, [sp], -r0, lsr #10
	adddevfunc (ioreq_uart_a, devnum);
     434:	061b0530 			; <UNDEFINED> instruction: 0x061b0530
     438:	3c190501 	cfldr32cc	mvfx0, [r9], {1}
void udelay (volatile word n) {
     43c:	2f060d05 	svccs	0x00060d05
     440:	01061c05 	tsteq	r6, r5, lsl #24
	while (n) {
     444:	31060905 	tstcc	r6, r5, lsl #18
     448:	01060c05 	tsteq	r6, r5, lsl #24
}
     44c:	3e060905 	vmlacc.f16	s0, s12, s10	; <UNPREDICTABLE>
	while (n--);
     450:	3fdd3f30 	svccc	0x00dd3f30
     454:	0616054b 	ldreq	r0, [r6], -fp, asr #10
     458:	06090501 	streq	r0, [r9], -r1, lsl #10
		n--;
     45c:	055b133f 	ldrbeq	r1, [fp, #-831]	; 0xfffffcc1
     460:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     464:	0567060d 	strbeq	r0, [r7, #-1549]!	; 0xfffff9f3
void mdelay (volatile word n) {
     468:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
     46c:	1a052f0d 	bne	14c0a8 <__ccfg+0x12c100>
	while (n) {
     470:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
     474:	31090521 	tstcc	r9, r1, lsr #10
}
     478:	060c053f 			; <UNDEFINED> instruction: 0x060c053f
		udelay (999);
     47c:	06090501 	streq	r0, [r9], -r1, lsl #10
     480:	0618053f 			; <UNDEFINED> instruction: 0x0618053f
		n--;
     484:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
     488:	21060d05 	tstcs	r6, r5, lsl #26
     48c:	05320905 	ldreq	r0, [r2, #-2309]!	; 0xfffff6fb
     490:	1e05010e 	adfnes	f0, f5, #0.5
void __pi_ondomain (lword d) {
     494:	01230501 			; <UNDEFINED> instruction: 0x01230501
     498:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
		if (__pi_systat.effpdm > 1)
     49c:	0100dc03 	tsteq	r0, r3, lsl #24
     4a0:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
			__pi_systat.effpdm = 1;
     4a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	PRCMPowerDomainOn (d);
     4a8:	7fa10309 	svcvc	0x00a10309
     4ac:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
     4b0:	00df033e 	sbcseq	r0, pc, lr, lsr r3	; <UNPREDICTABLE>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     4b8:	9f030636 	svcls	0x00030636
     4bc:	0204207f 	andeq	r2, r4, #127	; 0x7f
	__pi_systat.ondmns |= d;
     4c0:	dc030505 	cfstr32le	mvfx0, [r3], {5}
     4c4:	05170100 	ldreq	r0, [r7, #-256]	; 0xffffff00
}
     4c8:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     4cc:	06490501 	strbeq	r0, [r9], -r1, lsl #10
void __pi_syserror (word ec, const char *m) {
     4d0:	2e7f9f03 	cdpcs	15, 7, cr9, cr15, cr3, {0}
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	05014e05 	streq	r4, [r1, #-3589]	; 0xfffff1fb
     4d8:	5b050156 	blpl	140a38 <__ccfg+0x120a90>
     4dc:	01600501 	cmneq	r0, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e0:	05016805 	streq	r6, [r1, #-2053]	; 0xfffff7fb
     4e4:	8005016d 	andhi	r0, r5, sp, ror #2
     4e8:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
		all_leds_blink;
     4ec:	66060193 			; <UNDEFINED> instruction: 0x66060193
     4f0:	0103d305 	tsteq	r3, r5, lsl #6
     4f4:	05140905 	ldreq	r0, [r4, #-2309]	; 0xfffff6fb
     4f8:	01062f01 	tsteq	r6, r1, lsl #30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4fc:	03061005 	movweq	r1, #24581	; 0x6005
     500:	052e7fb8 	streq	r7, [lr, #-4024]!	; 0xfffff048
     504:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     508:	052f060d 	streq	r0, [pc, #-1549]!	; ffffff03 <_estack+0xdfffaf03>
     50c:	13052f10 	movwne	r2, #24336	; 0x5f10
     510:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
	while (1) {
     514:	10052f06 	andne	r2, r5, r6, lsl #30
     518:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     51c:	060d0501 	streq	r0, [sp], -r1, lsl #10
     520:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
void tci_run_delay_timer () {
     524:	052e00c3 	streq	r0, [lr, #-195]!	; 0xffffff3d
	setdel = __pi_mintk - __pi_old;
     528:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
     52c:	01010026 	tsteq	r1, r6, lsr #32
     530:	0000155c 	andeq	r1, r0, ip, asr r5
     534:	029b0003 	addseq	r0, fp, #3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	01020000 	mrseq	r0, (UNDEF: 2)
     53c:	000d0efb 	strdeq	r0, [sp], -fp
     540:	01010101 	tsteq	r1, r1, lsl #2
     544:	01000000 	mrseq	r0, (UNDEF: 0)
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	2f010000 	svccs	0x00010000
	sti_tim;
     54c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
     550:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     554:	2f6e6974 	svccs	0x006e6974
     558:	6b736544 	blvs	1cd9a70 <__ccfg+0x1cb9ac8>
     55c:	2f706f74 	svccs	0x00706f74
     560:	4f534c4f 	svcmi	0x00534c4f
	cli_aux;
     564:	2f54454e 	svccs	0x0054454e
     568:	4f434950 	svcmi	0x00434950
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     570:	2f534f63 	svccs	0x00534f63
     574:	33314343 	teqcc	r1, #201326593	; 0xc000001
     578:	2f005858 	svccs	0x00005858
	sti_aux;
     57c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
     580:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     584:	2f6e6974 	svccs	0x006e6974
     588:	6b736544 	blvs	1cd9aa0 <__ccfg+0x1cb9af8>
void AONRTCIntHandler () {
     58c:	2f706f74 	svccs	0x00706f74
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	4f534c4f 	svcmi	0x00534c4f
     594:	2f54454e 	svccs	0x0054454e
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	4f434950 	svcmi	0x00434950
		if (__pi_utims [0] == 0)
     59c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     5a0:	2f534f63 	svccs	0x00534f63
		if (*(__pi_utims [0])) {
     5a4:	33314343 	teqcc	r1, #201326593	; 0xc000001
     5a8:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
			(*(__pi_utims [0]))--;
     5ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		if (__pi_utims [1] == 0)
     5b0:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
		if (*(__pi_utims [1])) {
     5b4:	72642f45 	rsbvc	r2, r4, #276	; 0x114
			aux_timer_inactive = 0;
     5b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
			(*(__pi_utims [1]))--;
     5bc:	0062696c 	rsbeq	r6, r2, ip, ror #18
		if (__pi_utims [2] == 0)
     5c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50c <__pi_syserror+0x3c>
		if (*(__pi_utims [2])) {
     5c4:	616d2f65 	cmnvs	sp, r5, ror #30
			(*(__pi_utims [2]))--;
     5c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		if (__pi_utims [3] != 0) {
     5cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			if (*(__pi_utims [3])) {
     5d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
				aux_timer_inactive = 0;
     5d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				(*(__pi_utims [3]))--;
     5d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (__pi_systat.ledsts) {
     5dc:	4349502f 	movtmi	r5, #36911	; 0x902f
     5e0:	502f534f 	eorpl	r5, pc, pc, asr #6
		if (__pi_systat.ledblc++ == 0) {
     5e4:	534f6369 	movtpl	r6, #62313	; 0xf369
     5e8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
			if (__pi_systat.ledblk) {
     5ec:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
     5f0:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
     5f4:	2f656d6f 	svccs	0x00656d6f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     5fc:	442f6e69 	strtmi	r6, [pc], #-3689	; 604 <AONRTCIntHandler+0x78>
				if (__pi_systat.ledsts & 0x2)
     600:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     604:	4f2f706f 	svcmi	0x002f706f
     608:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				if (__pi_systat.ledsts & 0x4)
     60c:	502f5445 	eorpl	r5, pc, r5, asr #8
				__pi_systat.ledblk = 0;
     610:	534f4349 	movtpl	r4, #62281	; 0xf349
     614:	6369502f 	cmnvs	r9, #47	; 0x2f
			if (__pi_systat.fstblk)
     618:	502f534f 	eorpl	r5, pc, pc, asr #6
     61c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
				__pi_systat.ledblc = 200;
     620:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
	if (events & AON_RTC_EVFLAGS_CH0) {
     624:	73726f73 	cmnvc	r2, #460	; 0x1cc
		cli_tim;
     628:	6f682f00 	svcvs	0x00682f00
		__pi_new += setdel;
     62c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 480 <mdelay+0x18>
     630:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		setdel = 0;
     634:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		RISE_N_SHINE;
     638:	6f746b73 	svcvs	0x00746b73
		__pi_new += setdel;
     63c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		RISE_N_SHINE;
     640:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     644:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		aux_timer_inactive = 1;
     648:	2f534f43 	svccs	0x00534f43
     64c:	4f636950 	svcmi	0x00636950
				if (__pi_systat.ledsts & 0x1)
     650:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     654:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     658:	73752f00 	cmnvc	r5, #0, 30
				if (__pi_systat.ledsts & 0x2)
     65c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     660:	63672f62 	cmnvs	r7, #392	; 0x188
     664:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
				if (__pi_systat.ledsts & 0x8)
     668:	6f6e2d6d 	svcvs	0x006e2d6d
				__pi_systat.ledblk = 1;
     66c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     670:	2f696261 	svccs	0x00696261
		if (aux_timer_inactive) {
     674:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
			cli_aux;
     678:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     67c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     680:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     684:	2f656d6f 	svccs	0x00656d6f
     688:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     68c:	442f6e69 	strtmi	r6, [pc], #-3689	; 694 <AONRTCIntHandler+0x108>
     690:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     694:	4f2f706f 	svcmi	0x002f706f
     698:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     69c:	502f5445 	eorpl	r5, pc, r5, asr #8
word tci_update_delay_ticks (Boolean force) {
     6a0:	534f4349 	movtpl	r4, #62281	; 0xf349
	cli_tim;
     6a4:	6369502f 	cmnvs	r9, #47	; 0x2f
     6a8:	0000534f 	andeq	r5, r0, pc, asr #6
	if (setdel) {
     6ac:	6e69616d 	powvsez	f6, f1, #5.0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	0100632e 	tsteq	r0, lr, lsr #6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     6b8:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
     6bc:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	00000200 	andeq	r0, r0, r0, lsl #4
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
	return NO;
     6c8:	63675f73 	cmnvs	r7, #460	; 0x1cc
			setdel = 0;
     6cc:	00682e63 	rsbeq	r2, r8, r3, ror #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d0:	67000001 	strvs	r0, [r0, -r1]
     6d4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
}
     6d8:	00020068 	andeq	r0, r2, r8, rrx
		sti_tim;
     6dc:	71726900 	cmnvc	r2, r0, lsl #18
		return YES;
     6e0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     6e4:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
     6e8:	2e736465 	cdpcs	4, 7, cr6, cr3, cr5, {3}
     6ec:	00030068 	andeq	r0, r3, r8, rrx
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	72617500 	rsbvc	r7, r1, #0, 10
	UARTDisable (UART0_BASE);
     6f4:	00682e74 	rsbeq	r2, r8, r4, ror lr
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	69000002 	stmdbvs	r0, {r1}
	UARTDisable (UART0_BASE);
     6fc:	625f7172 	subsvs	r7, pc, #-2147483620	; 0x8000001c
	UARTConfigSetExpClk (UART0_BASE,
     700:	6f747475 	svcvs	0x00747475
     704:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     708:	00000300 	andeq	r0, r0, r0, lsl #6
     70c:	5f717269 	svcpl	0x00717269
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	5f6e6970 	svcpl	0x006e6970
     714:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
     718:	682e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	00000400 	andeq	r0, r0, r0, lsl #8
     720:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
     724:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	urates [0] = rate;
     728:	6f610000 	svcvs	0x00610000
}
     72c:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
     730:	00682e63 	rsbeq	r2, r8, r3, ror #28
     734:	70000002 	andvc	r0, r0, r2
     738:	635f7277 	cmpvs	pc, #1879048199	; 0x70000007
     73c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
     740:	00020068 	andeq	r0, r2, r8, rrx
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	6e6f6100 	powvse	f6, f7, f0
     748:	636f695f 	cmnvs	pc, #1556480	; 0x17c000
     74c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	63730000 	cmnvs	r3, #0
     754:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
     75c:	00050068 	andeq	r0, r5, r8, rrx
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	6e6f6100 	powvse	f6, f7, f0
     764:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
     768:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     76c:	6f610000 	svcvs	0x00610000
     770:	61625f6e 	cmnvs	r2, lr, ror #30
     774:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
     778:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	switch (operation) {
     77c:	74730000 	ldrbtvc	r0, [r3], #-0
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     784:	0600682e 	streq	r6, [r0], -lr, lsr #16
     788:	72610000 	rsbvc	r0, r1, #0
     78c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     790:	00000100 	andeq	r0, r0, r0, lsl #2
				*buf++ = uart_a_read;
     794:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     798:	0100682e 	tsteq	r0, lr, lsr #16
			while (len && uart_a_char_available) {
     79c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
     7a0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     7a4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
			if (len != operation) {
     7a8:	00000100 	andeq	r0, r0, r0, lsl #2
}
     7ac:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     7b0:	5f736e6f 	svcpl	0x00736e6f
			uart_a_disable_int;
     7b4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
			if (uart_a_char_available) {
     7b8:	00010068 	andeq	r0, r1, r8, rrx
				*buf++ = uart_a_read;
     7bc:	73797300 	cmnvc	r9, #0, 6
			uart_a_disable_int;
     7c0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     7c4:	00000700 	andeq	r0, r0, r0, lsl #14
			if (uart_a_char_available) {
     7c8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     7cc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
				uart_a_enable_int;
     7d0:	00000500 	andeq	r0, r0, r0, lsl #10
     7d4:	00270500 	eoreq	r0, r7, r0, lsl #10
				goto Redo_rx;
     7d8:	04300205 	ldrteq	r0, [r0], #-517	; 0xfffffdfb
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	fc030000 	stc2	0, cr0, [r3], {-0}
     7e0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			return -2;
     7e4:	06270514 			; <UNDEFINED> instruction: 0x06270514
     7e8:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
				uart_a_write (*buf);
     7ec:	01000502 	tsteq	r0, r2, lsl #10
     7f0:	001f0501 	andseq	r0, pc, r1, lsl #10
			while (len && uart_a_room_in_tx) {
     7f4:	043c0205 	ldrteq	r0, [ip], #-517	; 0xfffffdfb
     7f8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     7fc:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
			if (len != operation) {
     800:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
			uart_a_disable_int;
     804:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     808:	01053c08 	tsteq	r5, r8, lsl #24
			if (uart_a_room_in_tx) {
     80c:	06030524 	streq	r0, [r3], -r4, lsr #10
     810:	1b02052b 	blne	81cc4 <__ccfg+0x61d1c>
				uart_a_enable_int;
     814:	05010d05 	streq	r0, [r1, #-3333]	; 0xfffff2fb
     818:	0a050108 	beq	140c40 <__ccfg+0x120c98>
				*buf++ = uart_a_read;
     81c:	08050106 	stmdaeq	r5, {r1, r2, r8}
			if (uart_a_room_in_tx) {
     820:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
				uart_a_write (*buf);
     824:	06040534 			; <UNDEFINED> instruction: 0x06040534
     828:	00070201 	andeq	r0, r7, r1, lsl #4
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	1f050101 	svcne	0x00050101
     830:	68020500 	stmdavs	r2, {r8, sl}
			uart_a_enable_int;
     834:	03000004 	movweq	r0, #4
     838:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
     83c:	0108053d 	tsteq	r8, sp, lsr r5
			return 0;
     840:	01060905 	tsteq	r6, r5, lsl #18
			if (len == UART_CNTRL_SETRATE) {
     844:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
				if (__pi_uart_setrate (*((word*)buf),
     848:	03052401 	movweq	r2, #21505	; 0x5401
     84c:	054b3906 	strbeq	r3, [fp, #-2310]	; 0xfffff6fa
     850:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
				syserror (EREQPAR, "uar");
     854:	01010007 	tsteq	r1, r7
			syserror (ENOOPER, "uai");
     858:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
			if (len == UART_CNTRL_GETRATE) {
     85c:	00049402 	andeq	r9, r4, r2, lsl #8
				return 1;
     860:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
			syserror (ENOOPER, "uai");
     868:	050e061e 	streq	r0, [lr, #-1566]	; 0xfffff9e2
     86c:	1e052405 	cdpne	4, 0, cr2, cr5, cr5, {0}
     870:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
     874:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     878:	01061205 	tsteq	r6, r5, lsl #4
     87c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     880:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     884:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     888:	593f0602 	ldmdbpl	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	05013b05 	streq	r3, [r1, #-2821]	; 0xfffff4fb
void UART0IntHandler () {
     890:	09050108 	stmdbeq	r5, {r3, r8}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	08050106 	stmdaeq	r5, {r1, r2, r8}
     898:	0602054a 	streq	r0, [r2], -sl, asr #10
     89c:	06150530 			; <UNDEFINED> instruction: 0x06150530
     8a0:	4b010501 	blmi	41cac <__ccfg+0x21d04>
     8a4:	01000502 	tsteq	r0, r2, lsl #10
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	001f0501 	andseq	r0, pc, r1, lsl #10
     8ac:	00000205 	andeq	r0, r0, r5, lsl #4
		RISE_N_SHINE;
     8b0:	3a030000 	bcc	c08b8 <__ccfg+0xa0910>
     8b4:	17020501 	strne	r0, [r2, -r1, lsl #10]
		i_trigger (devevent (UART_A, READ));
     8b8:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
     8bc:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
     8c0:	02051b1f 	andeq	r1, r5, #31744	; 0x7c00
     8c4:	053d0625 	ldreq	r0, [sp, #-1573]!	; 0xfffff9db
     8c8:	0805013c 	stmdaeq	r5, {r2, r3, r4, r5, r8}
     8cc:	06090501 	streq	r0, [r9], -r1, lsl #10
     8d0:	4a080501 	bmi	201cdc <__ccfg+0x1e1d34>
     8d4:	30060205 	andcc	r0, r6, r5, lsl #4
     8d8:	01060505 	tsteq	r6, r5, lsl #10
     8dc:	4b060305 	blmi	1814f8 <__ccfg+0x161550>
     8e0:	01061205 	tsteq	r6, r5, lsl #4
     8e4:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e8:	04052006 	streq	r2, [r5], #-6
     8ec:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
     8f0:	17050106 	strne	r0, [r5, -r6, lsl #2]
		i_trigger (devevent (UART_A, WRITE));
     8f4:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	06150523 	ldreq	r0, [r5], -r3, lsr #10
     8fc:	4b010501 	blmi	41d08 <__ccfg+0x21d60>
		RISE_N_SHINE;
     900:	01000502 	tsteq	r0, r2, lsl #10
     904:	00130501 	andseq	r0, r3, r1, lsl #10
     908:	00000205 	andeq	r0, r0, r5, lsl #4
		i_trigger (devevent (UART_A, WRITE));
     90c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     910:	02050100 	andeq	r0, r5, #0, 2
     914:	06130514 			; <UNDEFINED> instruction: 0x06130514
     918:	2202051e 	andcs	r0, r2, #125829120	; 0x7800000
     91c:	05363306 	ldreq	r3, [r6, #-774]!	; 0xfffffcfa
     920:	02041303 	andeq	r1, r4, #201326592	; 0xc000000
     924:	f0030405 			; <UNDEFINED> instruction: 0xf0030405
     928:	05300101 	ldreq	r0, [r0, #-257]!	; 0xfffffeff
     92c:	0501065c 	streq	r0, [r1, #-1628]	; 0xfffff9a4
     930:	143e0604 	ldrtne	r0, [lr], #-1540	; 0xfffff9fc
     934:	02100a05 	andseq	r0, r0, #20480	; 0x5000
}
     938:	01010005 	tsteq	r1, r5
     93c:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
     940:	0004d002 	andeq	sp, r4, r2
     944:	01970300 	orrseq	r0, r7, r0, lsl #6
     948:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
void __buttons_setirq (int val) {
     94c:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
     954:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	4a090306 	bmi	241578 <__ccfg+0x2215d0>
     95c:	03050304 	movweq	r0, #21252	; 0x5304
     960:	017fb503 	cmneq	pc, r3, lsl #10
		bn = BUTTON_GPIO (__button_list [i]);
     964:	2d050404 	cfstrscs	mvf0, [r5, #-16]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	01cb0306 	biceq	r0, fp, r6, lsl #6
     96c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     970:	8f030602 	svchi	0x00030602
     974:	03053c7f 	movweq	r3, #23679	; 0x5c7f
     978:	04010113 	streq	r0, [r1], #-275	; 0xfffffeed
     97c:	03290504 			; <UNDEFINED> instruction: 0x03290504
}
     980:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
     984:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     988:	01040106 	tsteq	r4, r6, lsl #2
     98c:	90030305 	andls	r0, r3, r5, lsl #6
void __pinlist_setirq (int val) {
     990:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
	for (i = 0; i < N_PINLIST; i++) {
     994:	f0032d05 			; <UNDEFINED> instruction: 0xf0032d05
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     998:	01042000 	mrseq	r2, (UNDEF: 4)
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	03060305 	movweq	r0, #25349	; 0x6305
	for (i = 0; i < N_PINLIST; i++) {
     9a0:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a4:	03290504 			; <UNDEFINED> instruction: 0x03290504
     9a8:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ac:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     9b0:	01040106 	tsteq	r4, r6, lsl #2
     9b4:	03060305 	movweq	r0, #25349	; 0x6305
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	01207f90 			; <UNDEFINED> instruction: 0x01207f90
}
     9bc:	01010101 	tsteq	r1, r1, lsl #2
     9c0:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
     9c4:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     9c8:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
void GPIOIntHandler () {
     9cc:	17050501 	strne	r0, [r5, -r1, lsl #10]
if (buttons_int) {
     9d0:	01062d05 	tsteq	r6, r5, lsl #26
     9d4:	03050104 	movweq	r0, #20740	; 0x5104
	buttons_disable ();
     9d8:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     9dc:	2d050404 	cfstrscs	mvf0, [r5, #-16]
	i_trigger ((aword)&__button_list);
     9e0:	2001a603 	andcs	sl, r1, r3, lsl #12
     9e4:	03050104 	movweq	r0, #20740	; 0x5104
     9e8:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
     9ec:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     9f0:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
     9f4:	17050501 	strne	r0, [r5, -r1, lsl #10]
     9f8:	01062d05 	tsteq	r6, r5, lsl #26
     9fc:	03050104 	movweq	r0, #20740	; 0x5104
     a00:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
     a04:	01010120 	tsteq	r1, r0, lsr #2
     a08:	58010101 	stmdapl	r1, {r0, r8}
	RISE_N_SHINE;
     a0c:	08052e01 	stmdaeq	r5, {r0, r9, sl, fp, sp}
     a10:	00090211 	andeq	r0, r9, r1, lsl r2
     a14:	1d050101 	stfnes	f0, [r5, #-4]
if (pin_sensor_int) {
     a18:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
     a1c:	03000005 	movweq	r0, #5
	i_trigger ((aword)(&__input_pins));
     a20:	0501029d 	streq	r0, [r1, #-669]	; 0xfffffd63
     a24:	1d051602 	stcne	6, cr1, [r5, #-8]
     a28:	16050e06 	strne	r0, [r5], -r6, lsl #28
     a2c:	4a090524 	bmi	241ec4 <__ccfg+0x221f1c>
     a30:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
     a34:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
     a38:	76032306 	strvc	r2, [r3], -r6, lsl #6
     a3c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     a40:	03020501 	movweq	r0, #9473	; 0x2501
     a44:	2f052e0d 	svccs	0x00052e0d
     a48:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
	__pinsen_disable_and_clear;
     a4c:	200a032a 	andcs	r0, sl, sl, lsr #6
	RISE_N_SHINE;
     a50:	76032f05 	strvc	r2, [r3], -r5, lsl #30
     a54:	2e360520 	cfabs64cs	mvdx0, mvdx6
     a58:	0a032a05 	beq	cb274 <__ccfg+0xab2cc>
}
     a5c:	0602052e 	streq	r0, [r2], -lr, lsr #10
     a60:	06010523 	streq	r0, [r1], -r3, lsr #10
     a64:	000b022f 	andeq	r0, fp, pc, lsr #4
     a68:	21050101 	tstcs	r5, r1, lsl #2
     a6c:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
void system_init () {
     a70:	03000005 	movweq	r0, #5
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	050102aa 	streq	r0, [r1, #-682]	; 0xfffffd56
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a78:	21051702 	tstcs	r5, r2, lsl #14
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	02051b06 	andeq	r1, r5, #6144	; 0x1800
     a80:	06090525 	streq	r0, [r9], -r5, lsr #10
     a84:	1402052e 	strne	r0, [r2], #-1326	; 0xfffffad2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a88:	05016903 	streq	r6, [r1, #-2307]	; 0xfffff6fd
     a8c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	2a052e2f 	bcs	14c354 <__ccfg+0x12c3ac>
     a94:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
     a98:	2069032f 	rsbcs	r0, r9, pc, lsr #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	2017032a 	andscs	r0, r7, sl, lsr #6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	23060205 	movwcs	r0, #25093	; 0x6205
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa8:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aac:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab0:	01010006 	tsteq	r1, r6
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	00058c02 	andeq	r8, r5, r2, lsl #24
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	02b70300 	adcseq	r0, r7, #0, 6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     ac4:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
     ac8:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
     acc:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
		if (port_confs [i] & 0x80)
     ad0:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
     ad8:	02051e2b 	andeq	r1, r5, #688	; 0x2b0
		if (port_confs [i] & 0x40)
     adc:	05052206 	streq	r2, [r5, #-518]	; 0xfffffdfa
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	03050106 	movweq	r0, #20742	; 0x5106
     ae4:	15182506 	ldrne	r2, [r8, #-1286]	; 0xfffffafa
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae8:	01061205 	tsteq	r6, r5, lsl #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aec:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
	all_leds_blink;
     af4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     af8:	04052006 	streq	r2, [r5], #-6
     afc:	17052f06 	strne	r2, [r5, -r6, lsl #30]
     b00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     b04:	17052f06 	strne	r2, [r5, -r6, lsl #30]
     b08:	03050106 	movweq	r0, #20742	; 0x5106
     b0c:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	06050106 	streq	r0, [r5], -r6, lsl #2
     b14:	06030520 	streq	r0, [r3], -r0, lsr #10
     b18:	06070522 	streq	r0, [r7], -r2, lsr #10
     b1c:	20060501 	andcs	r0, r6, r1, lsl #10
     b20:	21060405 	tstcs	r6, r5, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b24:	13061705 	movwne	r1, #26373	; 0x6705
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     b2c:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
	IntEnable (INT_AON_RTC_COMB);
     b30:	01061205 	tsteq	r6, r5, lsl #4
     b34:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b38:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
	__pi_malloc_init ();
     b3c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	04052006 	streq	r2, [r5], #-6
     b44:	17052106 	strne	r2, [r5, -r6, lsl #2]
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	051f1306 	ldreq	r1, [pc, #-774]	; 84a <ioreq_uart_a+0xce>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	052f0604 	streq	r0, [pc, #-1540]!	; 550 <tci_run_delay_timer+0x2c>
     b50:	12051403 	andne	r1, r5, #50331648	; 0x3000000
     b54:	06050106 	streq	r0, [r5], -r6, lsl #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	06040520 	streq	r0, [r4], -r0, lsr #10
     b5c:	06080521 	streq	r0, [r8], -r1, lsr #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	20070501 	andcs	r0, r7, r1, lsl #10
     b64:	21060505 	tstcs	r6, r5, lsl #10
     b68:	13061805 	movwne	r1, #26629	; 0x6805
	urates [0] = UART_RATE / 100;
     b6c:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     b70:	0505042f 	streq	r0, [r5, #-1071]	; 0xfffffbd1
	reinit_uart ();
     b74:	7da30302 	stcvc	3, cr0, [r3, #8]!
	EXTRA_INITIALIZERS;
     b78:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     b7c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b80:	30060305 	andcc	r0, r6, r5, lsl #6
     b84:	01061205 	tsteq	r6, r5, lsl #4
     b88:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
     b90:	13052106 	movwne	r2, #20742	; 0x5106
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	07050106 	streq	r0, [r5, -r6, lsl #2]
     b98:	2f140520 	svccs	0x00140520
			devinit [i] . init (devinit [i] . param);
     b9c:	051f0705 	ldreq	r0, [pc, #-1797]	; 49f <__pi_ondomain+0xb>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     ba4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     ba8:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
	IntEnable (INT_UART0_COMB);
     bac:	03290504 			; <UNDEFINED> instruction: 0x03290504
     bb0:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
}
     bb4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	tci_run_auxiliary_timer ();
     bb8:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
		diag ("");
     bbc:	03060505 	movweq	r0, #25861	; 0x6505
     bc0:	054a7de6 	strbeq	r7, [sl, #-3558]	; 0xfffff21a
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	06052008 	streq	r2, [r5], -r8
		diag ("Leftover RAM: %d bytes",
     bcc:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     bd0:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
     bd4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     bd8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     bdc:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     be0:	e8030605 	stmda	r3, {r0, r2, r9, sl}
     be4:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     be8:	06050106 	streq	r0, [r5], -r6, lsl #2
     bec:	01012106 	tsteq	r1, r6, lsl #2
     bf0:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     bf4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     bf8:	01210606 			; <UNDEFINED> instruction: 0x01210606
     bfc:	13050501 	movwne	r0, #21761	; 0x5501
     c00:	01061805 	tsteq	r6, r5, lsl #16
     c04:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
     c08:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
     c0c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     c10:	05052007 	streq	r2, [r5, #-7]
     c14:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
     c18:	01040106 	tsteq	r4, r6, lsl #2
     c1c:	03060b05 	movweq	r0, #27397	; 0x6b05
     c20:	052e02cd 	streq	r0, [lr, #-717]!	; 0xfffffd33
     c24:	05051a02 	streq	r1, [r5, #-2562]	; 0xfffff5fe
__attribute__ ((noreturn)) void __pi_release () {
     c28:	03050106 	movweq	r0, #20742	; 0x5106
     c2c:	0c053406 	cfstrseq	mvf3, [r5], {6}
     c30:	03053006 	movweq	r3, #20486	; 0x5006
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c34:	0522062c 	streq	r0, [r2, #-1580]!	; 0xfffff9d4
	check_stack_overflow;
     c38:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     c3c:	0c052f0a 	stceq	15, cr2, [r5], {10}
     c40:	2203051f 	andcs	r0, r3, #130023424	; 0x7c00000
	update_n_wake (MAX_WORD, NO);
     c44:	051e0c05 	ldreq	r0, [lr, #-3077]	; 0xfffff3fb
     c48:	132f0603 			; <UNDEFINED> instruction: 0x132f0603
     c4c:	02054a01 	andeq	r4, r5, #4096	; 0x1000
	for_all_tasks (__pi_curr) {
     c50:	06010519 			; <UNDEFINED> instruction: 0x06010519
     c54:	03160513 	tsteq	r6, #79691776	; 0x4c00000
     c58:	05042045 	streq	r2, [r4, #-69]	; 0xffffffbb
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	03060505 	movweq	r0, #25861	; 0x6505
	__SLEEP;
     c60:	054a7dc9 	strbeq	r7, [sl, #-3529]	; 0xfffff237
     c64:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     c68:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     c6c:	03290504 			; <UNDEFINED> instruction: 0x03290504
	system_event_count ++;
     c70:	050102c2 	streq	r0, [r1, #-706]	; 0xfffffd3e
     c74:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	switch (__pi_systat.effpdm) {
     c78:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
     c7c:	03060505 	movweq	r0, #25861	; 0x6505
     c80:	054a7dba 	strbeq	r7, [sl, #-3514]	; 0xfffff246
     c84:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
			__WFI ();
     c88:	06052008 	streq	r2, [r5], -r8
     c8c:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     c90:	c0032905 	andgt	r2, r3, r5, lsl #18
	check_stack_overflow;
     c94:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     c98:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     ca0:	bc030605 	stclt	6, cr0, [r3], {5}
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			goto Redo;
     ca8:	06050106 	streq	r0, [r5], -r6, lsl #2
	for_all_tasks (__pi_curr) {
     cac:	01012106 	tsteq	r1, r6, lsl #2
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     cb8:	01210606 			; <UNDEFINED> instruction: 0x01210606
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cbc:	13050501 	movwne	r0, #21761	; 0x5501
     cc0:	01061805 	tsteq	r6, r5, lsl #16
     cc4:	03050104 	movweq	r0, #20740	; 0x5104
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	02ce0306 	sbceq	r0, lr, #402653184	; 0x18000000
     ccc:	0606054a 	streq	r0, [r6], -sl, asr #10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	06040501 	streq	r0, [r4], -r1, lsl #10
     cd4:	00150230 	andseq	r0, r5, r0, lsr r2
			__WFI ();
     cd8:	2d050101 	stfcss	f0, [r5, #-4]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cdc:	a0020500 	andge	r0, r2, r0, lsl #10
     ce0:	03000006 	movweq	r0, #6
}
     ce4:	05010389 	streq	r0, [r1, #-905]	; 0xfffffc77
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce8:	2d051602 	stccs	6, cr1, [r5, #-8]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	2f060524 	svccs	0x00060524
     cf4:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	06060521 	streq	r0, [r6], -r1, lsr #10
     cfc:	20050501 	andcs	r0, r5, r1, lsl #10
     d00:	03060305 	movweq	r0, #25349	; 0x6305
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d04:	06052009 	streq	r2, [r5], -r9
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d08:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     d0c:	1a052306 	bne	14992c <__ccfg+0x129984>
     d10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     d14:	7ef90306 	cdpvc	3, 15, cr0, cr9, cr6, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	0610052e 	ldreq	r0, [r0], -lr, lsr #10
     d1c:	2e2e0501 	cfsh64cs	mvdx0, mvdx14, #1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	87031a05 	strhi	r1, [r3, -r5, lsl #20]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	052f3c01 	streq	r3, [pc, #-3073]!	; 12b <_Min_Stack_Size+0x2b>
     d28:	17052018 	smladne	r5, r8, r0, r2
     d2c:	0309051f 	movweq	r0, #38175	; 0x951f
     d30:	0d05200a 	stceq	0, cr2, [r5, #-40]	; 0xffffffd8
     d34:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
			SysCtrlSetRechargeBeforePowerDown
     d38:	0d05230b 	stceq	3, cr2, [r5, #-44]	; 0xffffffd4
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3c:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	0105134d 	tsteq	r5, sp, asr #6
     d44:	03051906 	movweq	r1, #22790	; 0x5906
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	052f2906 	streq	r2, [pc, #-2310]!	; 44a <udelay+0xe>
     d4c:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
     d50:	01010009 	tsteq	r1, r9
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d54:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
     d58:	0006f002 	andeq	pc, r6, r2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	05d30300 	ldrbeq	r0, [r3, #768]	; 0x300
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     d64:	06330517 			; <UNDEFINED> instruction: 0x06330517
     d68:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6c:	33052702 	movwcc	r2, #22274	; 0x5702
			while (!(AONWUCPowerStatusGet () &
     d70:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	3e062702 	cdpcc	7, 0, cr2, cr6, cr2, {0}
     d78:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     d7c:	017bd503 	cmneq	fp, r3, lsl #10
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d80:	02050104 	andeq	r0, r5, #4, 2
     d84:	04ab0306 	strteq	r0, [fp], #774	; 0x306
     d88:	09030601 	stmdbeq	r3, {r0, r9, sl}
     d8c:	05060482 	streq	r0, [r6, #-1154]	; 0xfffffb7e
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	7dd90324 	ldclvc	3, cr0, [r9, #144]	; 0x90
     d94:	17050501 	strne	r0, [r5, -r1, lsl #10]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	01062305 	tsteq	r6, r5, lsl #6
     d9c:	01050104 	tsteq	r5, r4, lsl #2
			SysCtrlAdjustRechargeAfterPowerDown ();
     da0:	2002a503 	andcs	sl, r2, r3, lsl #10
			reinit_uart ();
     da4:	23050604 	movwcs	r0, #22020	; 0x5604
     da8:	207ddb03 	rsbscs	sp, sp, r3, lsl #22
     dac:	4f060505 	svcmi	0x00060505
}
     db0:	01062205 	tsteq	r6, r5, lsl #4
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db4:	02050104 	andeq	r0, r5, #4, 2
     db8:	029e0306 	addseq	r0, lr, #402653184	; 0x18000000
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dbc:	060d0566 	streq	r0, [sp], -r6, ror #10
     dc0:	06020501 	streq	r0, [r2], -r1, lsl #10
     dc4:	0601052f 	streq	r0, [r1], -pc, lsr #10
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	000c0213 	andeq	r0, ip, r3, lsl r2
     dcc:	1c050101 	stfnes	f0, [r5], {1}
     dd0:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	03000007 	movweq	r0, #7
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	050105ef 	streq	r0, [r1, #-1519]	; 0xfffffa11
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	06041702 	streq	r1, [r4], -r2, lsl #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	f7032405 			; <UNDEFINED> instruction: 0xf7032405
     de4:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de8:	06230517 			; <UNDEFINED> instruction: 0x06230517
     dec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	02880302 	addeq	r0, r8, #134217728	; 0x8000000
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df8:	7df80323 	ldclvc	3, cr0, [r8, #140]!	; 0x8c
     dfc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			PRCMPowerDomainOff (
     e00:	85030602 	strhi	r0, [r3, #-1538]	; 0xfffff9fe
     e04:	06044a02 	streq	r4, [r4], -r2, lsl #20
	__SLEEP;
     e08:	c9032405 	stmdbgt	r3, {r0, r2, sl, sp}
     e0c:	2d05017c 	stfcss	f0, [r5, #-496]	; 0xfffffe10
  __ASM volatile ("cpsie i" : : : "memory");
     e10:	05051717 	streq	r1, [r5, #-1815]	; 0xfffff8e9
	goto Redo;
     e14:	06230517 			; <UNDEFINED> instruction: 0x06230517
     e18:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     e1c:	a9030602 	stmdbge	r3, {r1, r9, sl}
     e20:	06043c03 	streq	r3, [r4], -r3, lsl #24
     e24:	ce032705 	cdpgt	7, 0, cr2, cr3, cr5, {0}
     e28:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     e2c:	06240514 			; <UNDEFINED> instruction: 0x06240514
     e30:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     e34:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
     e38:	0e02587d 	mcreq	8, 0, r5, cr2, cr13, {3}
     e3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     e40:	0205003d 	andeq	r0, r5, #61	; 0x3d
     e44:	0000077c 	andeq	r0, r0, ip, ror r7
     e48:	01068f03 	tsteq	r6, r3, lsl #30
     e4c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     e50:	2e1e063d 	mrccs	6, 0, r0, cr14, cr13, {1}
     e54:	03060505 	movweq	r0, #25861	; 0x6505
     e58:	0e05820b 	cdpeq	2, 0, cr8, cr5, cr11, {0}
     e5c:	08050106 	stmdaeq	r5, {r1, r2, r8}
     e60:	1f0e052f 	svcne	0x000e052f
     e64:	2f060505 	svccs	0x00060505
     e68:	050f0a05 	streq	r0, [pc, #-2565]	; 46b <mdelay+0x3>
     e6c:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
     e70:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     e74:	07053406 	streq	r3, [r5, -r6, lsl #8]
     e78:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     e7c:	2e280306 	cdpcs	3, 2, cr0, cr8, cr6, {0}
int main (void) {
     e80:	01061605 	tsteq	r6, r5, lsl #12
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	34030105 	strcc	r0, [r3], #-261	; 0xfffffefb
     e88:	03090520 	movweq	r0, #38176	; 0x9520
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8c:	053c7fa0 	ldreq	r7, [ip, #-4000]!	; 0xfffff060
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	200b0304 	andcs	r0, fp, r4, lsl #6
	system_init ();
     e94:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
	tcv_init ();
     e98:	2e74030e 	cdpcs	3, 7, cr0, cr4, cr14, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	03060405 	movweq	r0, #25605	; 0x6405
     ea0:	054b3c0b 	strbeq	r3, [fp, #-3083]	; 0xfffff3f5
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     ea8:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
     eac:	054b3006 	strbeq	r3, [fp, #-6]
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	0b052404 	bleq	149ec8 <__ccfg+0x129f20>
     eb4:	4a240306 	bmi	901ad4 <__ccfg+0x8e1b2c>
	delay (16, 0);
     eb8:	062d0405 	strteq	r0, [sp], -r5, lsl #8
     ebc:	060b0521 	streq	r0, [fp], -r1, lsr #10
     ec0:	06050501 	streq	r0, [r5], -r1, lsl #10
	__pi_release ();
     ec4:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
     ec8:	05300608 	ldreq	r0, [r0, #-1544]!	; 0xfffff9f8
     ecc:	2f061e05 	svccs	0x00061e05
     ed0:	0e0a0513 	mcreq	5, 0, r0, cr10, cr3, {0}
     ed4:	20061205 	andcs	r1, r6, r5, lsl #4
     ed8:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
     edc:	05350604 	ldreq	r0, [r5, #-1540]!	; 0xfffff9fc
static void killev (__pi_pcb_t *pid) {
     ee0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	wfun = (aword)(pid->code);
     ee4:	4b340604 	blmi	d026fc <__ccfg+0xce2754>
	for_all_tasks (i) {
     ee8:	01060805 	tsteq	r6, r5, lsl #16
		for (j = 0; j < nevents (i); j++) {
     eec:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     ef0:	4b2f0605 	blmi	bc270c <__ccfg+0xba2764>
     ef4:	03060905 	movweq	r0, #26885	; 0x6905
			    || i->Events [j] . Event == wfun
     ef8:	0405204d 	streq	r2, [r5], #-77	; 0xffffffb3
		for (j = 0; j < nevents (i); j++) {
     efc:	05203003 	streq	r3, [r0, #-3]!
			if (i->Events [j] . Event == (aword)pid
     f00:	05052108 	streq	r2, [r5, #-264]	; 0xfffffef8
     f04:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
     f08:	11030604 	tstne	r3, r4, lsl #12
				wakeupev (i, j);
     f0c:	0b055e3c 	bleq	158804 <__ccfg+0x13885c>
     f10:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
	for_all_tasks (i) {
     f14:	052f061f 	streq	r0, [pc, #-1567]!	; 8fd <UART0IntHandler+0x71>
}
     f18:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
static void qfree (aword *ch) {
     f20:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	052f0605 	streq	r0, [pc, #-1541]!	; 927 <UART0IntHandler+0x9b>
	cc = (aword*)(mpools + MA_NP);
     f28:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	m_setnextp (ch, chunk);
     f2c:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
	m_setnextp (cc, ch);
     f30:	04053106 	streq	r3, [r5], #-262	; 0xfffffefa
}
     f34:	2e160306 	cdpcs	3, 1, cr0, cr6, cr6, {0}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f38:	2e6d0306 	cdpcs	3, 6, cr0, cr13, cr6, {0}
     f3c:	01060705 	tsteq	r6, r5, lsl #14
     f40:	2f060505 	svccs	0x00060505
			m_setnextp (cc, m_nextp (chunk));
     f44:	88030205 	stmdahi	r3, {r0, r2, r9}
			m_size (chunk) += m_hdrlen + m_size (ch);
     f48:	1005017f 	andne	r0, r5, pc, ror r1
     f4c:	0c050106 	stfeqs	f0, [r5], {6}
     f50:	2000f903 	andcs	pc, r0, r3, lsl #18
     f54:	051f1305 	ldreq	r1, [pc, #-773]	; c57 <__pi_release+0x2f>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	052f0605 	streq	r0, [pc, #-1541]!	; 95b <__buttons_setirq+0xf>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     f60:	11030604 	tstne	r3, r4, lsl #12
     f64:	00120220 	andseq	r0, r2, r0, lsr #4
			m_setnextp (cc, m_nextp (chunk));
     f68:	2b050101 	blcs	141374 <__ccfg+0x1213cc>
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	00020500 	andeq	r0, r2, r0, lsl #10
     f70:	03000000 	movweq	r0, #0
     f74:	050105ea 	streq	r0, [r1, #-1514]	; 0xfffffa16
     f78:	01051402 	tsteq	r5, r2, lsl #8
     f7c:	06021306 	streq	r1, [r2], -r6, lsl #6
     f80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			if (m_size (chunk) >= m_size (ch))
     f84:	02050019 	andeq	r0, r5, #25
     f88:	0000088c 	andeq	r0, r0, ip, lsl #17
     f8c:	01078103 	tsteq	r7, r3, lsl #2
		chunk = m_nextp (chunk))
     f90:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
     f94:	03240506 			; <UNDEFINED> instruction: 0x03240506
     f98:	05050112 	streq	r0, [r5, #-274]	; 0xfffffeee
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	06220517 			; <UNDEFINED> instruction: 0x06220517
	diag_wait (a);
     fa0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	diag_wchar (c, a);
     fa4:	2e670319 	mcrcs	3, 3, r0, cr7, cr9, {0}
     fa8:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
}
     fac:	04201903 	strteq	r1, [r0], #-2307	; 0xfffff6fd
     fb0:	03060501 	movweq	r0, #25857	; 0x6501
	syserror (ESTATE, "state");
     fb4:	0604206b 	streq	r2, [r4], -fp, rrx
     fb8:	15032205 	strne	r2, [r3, #-517]	; 0xfffffdfb
     fbc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     fc0:	6b030602 	blvs	c27d0 <__ccfg+0xa2828>
void update_n_wake (word min, Boolean force) {
     fc4:	06060520 	streq	r0, [r6], -r0, lsr #10
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	20050501 	andcs	r0, r5, r1, lsl #10
     fcc:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
     fd0:	03052e1c 	movweq	r2, #24092	; 0x5e1c
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	014b2f06 	cmpeq	fp, r6, lsl #30
     fd8:	01011358 	tsteq	r1, r8, asr r3
     fdc:	20062e01 	andcs	r2, r6, r1, lsl #28
     fe0:	662e6606 	strtvs	r6, [lr], -r6, lsl #12
     fe4:	052e014a 	streq	r0, [lr, #-330]!	; 0xfffffeb6
     fe8:	06051502 	streq	r1, [r5], -r2, lsl #10
     fec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     ff0:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
     ff4:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
     ff8:	062f0603 	strteq	r0, [pc], -r3, lsl #12
     ffc:	4b062c14 	blmi	18c054 <__ccfg+0x16c0ac>
    1000:	01135801 	tsteq	r3, r1, lsl #16
    1004:	062e0101 	strteq	r0, [lr], -r1, lsl #2
		for_all_tasks (i) {
    1008:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
	__pi_mintk = znew + min;
    100c:	05014a58 	streq	r4, [r1, #-2648]	; 0xfffff5a8
    1010:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
			if (!twaiting (i))
    1014:	0101000b 	tsteq	r1, fp
    1018:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101c:	00094c02 	andeq	r4, r9, r2, lsl #24
    1020:	07d90300 	ldrbeq	r0, [r9, r0, lsl #6]
    1024:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1028:	03041413 	movweq	r1, #17427	; 0x4413
    102c:	fe030305 	cdp2	3, 0, cr0, cr3, cr5, {0}
    1030:	01040178 	tsteq	r4, r8, ror r1
    1034:	03062105 	movweq	r2, #24837	; 0x6105
    1038:	040106fd 	streq	r0, [r1], #-1789	; 0xfffff903
    103c:	03030503 	movweq	r0, #13571	; 0x3503
    1040:	04207983 	strteq	r7, [r0], #-2435	; 0xfffff67d
    1044:	06020501 	streq	r0, [r2], -r1, lsl #10
    1048:	20078303 	andcs	r8, r7, r3, lsl #6
				wakeuptm (i);
    104c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1050:	04041303 	streq	r1, [r4], #-771	; 0xfffffcfd
		for_all_tasks (i) {
    1054:	03063305 	movweq	r3, #25349	; 0x6305
				d = i->Timer - znew;
    1058:	04017dad 	streq	r7, [r1], #-3501	; 0xfffff253
    105c:	03080501 	movweq	r0, #34049	; 0x8501
    1060:	042002d3 	strteq	r0, [r0], #-723	; 0xfffffd2d
		if ((word)(__pi_mintk - znew) < min) 
    1064:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1068:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
    106c:	03080501 	movweq	r0, #34049	; 0x8501
	__pi_old = znew;
    1070:	052002d3 	streq	r0, [r0, #-723]!	; 0xfffffd2d
}
    1074:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
	TCI_RUN_DELAY_TIMER;
    1078:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
}
    107c:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    1080:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
    1084:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1088:	01063305 	tsteq	r6, r5, lsl #6
    108c:	042e2d05 	strteq	r2, [lr], #-3333	; 0xfffff2fb
void proceed (word state) {
    1090:	06030501 	streq	r0, [r3], -r1, lsl #10
	prcdstate (__pi_curr, state);
    1094:	2002d503 	andcs	sp, r2, r3, lsl #10
    1098:	1e060805 	cdpne	8, 0, cr0, cr6, cr5, {0}
	release;
    109c:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
    10a0:	04042c08 	streq	r2, [r4], #-3080	; 0xfffff3f8
void __pi_wait (aword event, word state) {
    10a4:	ad033305 	stcge	3, cr3, [r3, #-20]	; 0xffffffec
	sint j = nevents (__pi_curr);
    10a8:	0104207d 	tsteq	r4, sp, ror r0
	if (j >= MAX_EVENTS_PER_TASK)
    10ac:	d5030305 	strle	r0, [r3, #-773]	; 0xfffffcfb
    10b0:	41052002 	tstmi	r5, r2
    10b4:	061d0558 			; <UNDEFINED> instruction: 0x061d0558
		syserror (ENEVENTS, "sw");
    10b8:	010e051d 	tsteq	lr, sp, lsl r5
    10bc:	13130305 	tstne	r3, #335544320	; 0x14000000
	setestate (__pi_curr->Events [j], state, event);
    10c0:	29050404 	stmdbcs	r5, {r2, sl}
	incwait (__pi_curr);
    10c4:	017da703 	cmneq	sp, r3, lsl #14
	setestate (__pi_curr->Events [j], state, event);
    10c8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
}
    10cc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    10d0:	06030501 	streq	r0, [r3], -r1, lsl #10
    10d4:	2002d503 	andcs	sp, r2, r3, lsl #10
void __pi_trigger (aword event) {
    10d8:	01064105 	tsteq	r6, r5, lsl #2
	for_all_tasks (i) {
    10dc:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
		for (j = 0; j < nevents (i); j++) {
    10e0:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10e4:	03041802 	movweq	r1, #18434	; 0x4802
    10e8:	ec030305 	stc	3, cr0, [r3], {5}
    10ec:	01040178 	tsteq	r4, r8, ror r1
			if (i->Events [j] . Event == event) {
    10f0:	03060105 	movweq	r0, #24837	; 0x6105
    10f4:	02200795 	eoreq	r0, r0, #39059456	; 0x2540000
    10f8:	01010008 	tsteq	r1, r8
				wakeupev (i, j);
    10fc:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1100:	00099002 	andeq	r9, r9, r2
	for_all_tasks (i) {
    1104:	07ec0300 	strbeq	r0, [ip, r0, lsl #6]!
}
    1108:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
aword __pi_join (aword pid, word st) {
    110c:	03041413 	movweq	r1, #17427	; 0x4413
	for_all_tasks (i) {
    1110:	eb030305 	bl	c1d2c <__ccfg+0xa1d84>
    1114:	01040178 	tsteq	r4, r8, ror r1
	return 0;
    1118:	03062105 	movweq	r2, #24837	; 0x6105
		if ((aword)i == pid) {
    111c:	04010790 	streq	r0, [r1], #-1936	; 0xfffff870
			__pi_wait (pid, st);
    1120:	03030503 	movweq	r0, #13571	; 0x3503
}
    1124:	042078f0 	strteq	r7, [r0], #-2288	; 0xfffff710
	for_all_tasks (i) {
    1128:	06020501 	streq	r0, [r2], -r1, lsl #10
    112c:	20079603 	andcs	r9, r7, r3, lsl #12
void delay (word d, word state) {
    1130:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
	settstate (__pi_curr, state);
    1134:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
    1138:	03330504 	teqeq	r3, #4, 10	; 0x1000000
    113c:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
    1140:	03080501 	movweq	r0, #34049	; 0x8501
	update_n_wake (d, YES);
    1144:	042002e6 	strteq	r0, [r0], #-742	; 0xfffffd1a
    1148:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	__pi_curr->Timer = __pi_old + d;
    114c:	04207d9a 	strteq	r7, [r0], #-3482	; 0xfffff266
    1150:	03030501 	movweq	r0, #13569	; 0x3501
	inctimer (__pi_curr);
    1154:	062002e8 	strteq	r0, [r0], -r8, ror #5
    1158:	0608051e 			; <UNDEFINED> instruction: 0x0608051e
    115c:	1f1e0501 	svcne	0x001e0501
}
    1160:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1164:	042f0603 	strteq	r0, [pc], #-1539	; 116c <running+0x4>
	if (fun == NULL)
    1168:	03290504 			; <UNDEFINED> instruction: 0x03290504
		return (int) __pi_curr;
    116c:	05017d94 	streq	r7, [r1, #-3476]	; 0xfffff26c
    1170:	33051705 	movwcc	r1, #22277	; 0x5705
	for_all_tasks (i)
    1174:	01040106 	tsteq	r4, r6, lsl #2
}
    1178:	e8030305 	stmda	r3, {r0, r2, r8, r9}
		if (i->code == fun)
    117c:	02052e02 	andeq	r2, r5, #2, 28
	for_all_tasks (i)
    1180:	05040447 	streq	r0, [r4, #-1095]	; 0xfffffbb9
    1184:	7d9b032d 	ldcvc	3, cr0, [fp, #180]	; 0xb4
    1188:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
int __pi_strlen (const char *s) {
    118c:	e8030603 	stmda	r3, {r0, r1, r9, sl}
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	41052002 	tstmi	r5, r2
}
    1194:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
	while (n--)
    119c:	06020501 	streq	r0, [r2], -r1, lsl #10
    11a0:	04260601 	strteq	r0, [r6], #-1537	; 0xfffff9ff
		*dest++ = *src++;
    11a4:	03030503 	movweq	r0, #13571	; 0x3503
    11a8:	040178d9 	streq	r7, [r1], #-2265	; 0xfffff727
    11ac:	06010501 	streq	r0, [r1], -r1, lsl #10
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	2007a803 	andcs	sl, r7, r3, lsl #16
		syserror (EREQPAR, "addv");
    11b4:	01000802 	tsteq	r0, r2, lsl #16
		syserror (ERESOURCE, "addv");
    11b8:	00180501 	andseq	r0, r8, r1, lsl #10
	if (ioreq [loc] != NULL)
    11bc:	09cc0205 	stmibeq	ip, {r0, r2, r9}^
    11c0:	c5030000 	strgt	r0, [r3, #-0]
		syserror (ERESOURCE, "addv");
    11c4:	07040107 	streq	r0, [r4, -r7, lsl #2]
	ioreq [loc] = rf;
    11c8:	bb030105 	bllt	c15e4 <__ccfg+0xa163c>
}
    11cc:	01040178 	tsteq	r4, r8, ror r1
    11d0:	03061805 	movweq	r1, #26629	; 0x6805
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
    11d8:	03050507 	movweq	r0, #21767	; 0x5507
    11dc:	052078bb 	streq	r7, [r0, #-2235]!	; 0xfffff745
    11e0:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e4:	013d3d06 	teqeq	sp, r6, lsl #26
    11e8:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    11ec:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
		syserror (ENODEVICE, "io");
    11f0:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
    11f4:	04580113 	ldrbeq	r0, [r8], #-275	; 0xfffffeed
	if (len == 0)
    11f8:	0f010508 	svceq	0x00010508
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	01060505 	tsteq	r6, r5, lsl #10
    1200:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
	if (ret >= 0)
    1204:	013d0602 	teqeq	sp, r2, lsl #12
	if (ret == -1) {
    1208:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    120c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
		if (retry == WNONE)
    1210:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
		iowait (dev, operation, retry);
    1214:	58012f13 	stmdapl	r1, {r0, r1, r4, r8, r9, sl, fp, sp}
    1218:	01050104 	tsteq	r5, r4, lsl #2
    121c:	07d00306 	ldrbeq	r0, [r0, r6, lsl #6]
			release;
    1220:	000b0201 	andeq	r0, fp, r1, lsl #4
	if (ret == -2) {
    1224:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
		if (retry != WNONE) {
    1228:	70020500 	andvc	r0, r2, r0, lsl #10
    122c:	0300000a 	movweq	r0, #10
			iowait (dev, operation, retry);
    1230:	05010880 	streq	r0, [r1, #-2176]	; 0xfffff780
    1234:	15051402 	strne	r1, [r5, #-1026]	; 0xfffffbfe
			(ioreq [dev]) (NONE, buf, len);
    1238:	02051006 	andeq	r1, r5, #6
    123c:	3e061e32 	mcrcc	14, 0, r1, cr6, cr2, {1}
    1240:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
		(ioreq [dev]) (NONE, buf, len);
    1244:	03050509 	movweq	r0, #21769	; 0x5509
    1248:	05017ca7 	streq	r7, [r1, #-3239]	; 0xfffff359
    124c:	04010631 	streq	r0, [r1], #-1585	; 0xfffff9cf
}
    1250:	030b0501 	movweq	r0, #46337	; 0xb501
	if (retry != WNONE) {
    1254:	04207dc5 	strteq	r7, [r0], #-3525	; 0xfffff23b
		delay (-ret - 2, retry);
    1258:	03310509 	teqeq	r1, #37748736	; 0x2400000
    125c:	042002bb 	strteq	r0, [r0], #-699	; 0xfffffd45
    1260:	03320501 	teqeq	r2, #4194304	; 0x400000
    1264:	042e7dc8 	strteq	r7, [lr], #-3528	; 0xfffff238
		release;
    1268:	03050504 	movweq	r0, #21764	; 0x5504
    126c:	052e029b 	streq	r0, [lr, #-667]!	; 0xfffffd65
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1270:	7ecc032d 	cdpvc	3, 12, cr0, cr12, cr13, {1}
    1274:	2e4a032e 	cdpcs	3, 4, cr0, cr10, cr14, {1}
    1278:	31050904 	tstcc	r5, r4, lsl #18
    127c:	2e028703 	cdpcs	7, 0, cr8, cr2, cr3, {0}
    1280:	02050104 	andeq	r0, r5, #4, 2
		syserror (ERESOURCE, "mal1");
    1284:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
    1288:	79e70320 	stmibvc	r7!, {r5, r8, r9}^
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    128c:	07051401 	streq	r1, [r5, -r1, lsl #8]
    1290:	01120501 	tsteq	r2, r1, lsl #10
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1294:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
	m_size (mpools [0]) = mlen - m_hdrlen;
    1298:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	07052c3d 	smladxeq	r5, sp, ip, r2
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a0:	06030522 	streq	r0, [r3], -r2, lsr #10
    12a4:	0632052f 	ldrteq	r0, [r2], -pc, lsr #10
}
    12a8:	2e210558 	mcrcs	5, 1, r0, cr1, cr8, {2}
    12ac:	2f060305 	svccs	0x00060305
    12b0:	01060605 	tsteq	r6, r5, lsl #12
    12b4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    12b8:	29050404 	stmdbcs	r5, {r2, sl}
    12bc:	01029103 	tsteq	r2, r3, lsl #2
void __pi_free (aword *ch) {
    12c0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    12c8:	01043c06 	tsteq	r4, r6, lsl #24
		syserror (EMALLOC, "malg");
    12cc:	03060305 	movweq	r0, #25349	; 0x6305
    12d0:	05207de9 	streq	r7, [r0, #-3561]!	; 0xfffff217
	mcfree [MA_NP] += m_size (ch);
    12d4:	052e0606 	streq	r0, [lr, #-1542]!	; 0xfffff9fa
		m_size (ch) ^= MALLOC_UMASK;
    12d8:	04210604 	strteq	r0, [r1], #-1540	; 0xfffff9fc
    12dc:	03290504 			; <UNDEFINED> instruction: 0x03290504
	mcfree [MA_NP] += m_size (ch);
    12e0:	05050127 	streq	r0, [r5, #-295]	; 0xfffffed9
	QFREE;
    12e4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	if (mevent [MA_NP] . nwait) {
    12e8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    12ec:	56030604 	strpl	r0, [r3], -r4, lsl #12
		trigger ((aword)(&(mevent [MA_NP])));
    12f0:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
		mevent [MA_NP] . nwait --;
    12f4:	00db0329 	sbcseq	r0, fp, r9, lsr #6
}
    12f8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    12fc:	01062d05 	tsteq	r6, r5, lsl #26
    1300:	3c050104 	stfccs	f0, [r5], {4}
    1304:	7f960306 	svcvc	0x00960306
void kill (aword pid) {
    1308:	0112052e 	tsteq	r2, lr, lsr #10
		pid = (aword) __pi_curr;
    130c:	01060205 	tsteq	r6, r5, lsl #4
	j = NULL;
    1310:	069a0306 	ldreq	r0, [sl], r6, lsl #6
	for_all_tasks (i) {
    1314:	0401012e 	streq	r0, [r1], #-302	; 0xfffffed2
	syserror (EREQPAR, "kpi");
    1318:	03290504 			; <UNDEFINED> instruction: 0x03290504
    131c:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
		if ((aword)i == pid) {
    1320:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1324:	01040106 	tsteq	r4, r6, lsl #2
				__PCB = i->Next;
    1328:	e6030205 	str	r0, [r3], -r5, lsl #4
			killev (i);
    132c:	04043c05 	streq	r3, [r4], #-3077	; 0xfffff3fb
			ufree (i);
    1330:	9a032d05 	bls	cc74c <__ccfg+0xac7a4>
			if (i == __pi_curr)
    1334:	0104207a 	tsteq	r4, sl, ror r0
    1338:	03060205 	movweq	r0, #25093	; 0x6205
				release;
    133c:	042005e6 	strteq	r0, [r0], #-1510	; 0xfffffa1a
				j->Next = i->Next;
    1340:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1344:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    1348:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
}
    134c:	01040106 	tsteq	r4, r6, lsl #2
    1350:	03060205 	movweq	r0, #25093	; 0x6205
    1354:	012005e6 	smulwteq	r0, r6, r5
void killall (fsmcode fun) {
    1358:	01010101 	tsteq	r1, r1, lsl #2
	j = NULL;
    135c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
	for (i = __PCB; i != NULL; ) {
    1360:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
			if (i == __pi_curr)
    1364:	7acb0329 	bvc	ff2c2010 <_estack+0xdf2bd010>
	for (i = __PCB; i != NULL; ) {
    1368:	17050501 	strne	r0, [r5, -r1, lsl #10]
	if (rel)
    136c:	01062d05 	tsteq	r6, r5, lsl #26
		release;
    1370:	02050104 	andeq	r0, r5, #4, 2
		if (i->code == fun) {
    1374:	2005b003 	andcs	fp, r5, r3
    1378:	2d050404 	cfstrscs	mvf0, [r5, #-16]
			if (j == NULL)
    137c:	207ad003 	rsbscs	sp, sl, r3
				__PCB = k;
    1380:	02050104 	andeq	r0, r5, #4, 2
			if (i == __pi_curr)
    1384:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
				rel = YES;
    1388:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
			killev (i);
    138c:	7acb0329 	bvc	ff2c2038 <_estack+0xdf2bd038>
			ufree (i);
    1390:	17050501 	strne	r0, [r5, -r1, lsl #10]
			i = k;
    1394:	01062d05 	tsteq	r6, r5, lsl #26
    1398:	02050104 	andeq	r0, r5, #4, 2
				j->Next = k;
    139c:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
    13a0:	01010120 	tsteq	r1, r0, lsr #2
}
    13a4:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    13a8:	10030623 	andne	r0, r3, r3, lsr #12
    13ac:	03020501 	movweq	r0, #9473	; 0x2501
	if (size < 8)
    13b0:	58062070 	stmdapl	r6, {r4, r5, r6, sp}
		_size = 2;
    13b4:	0d032e01 	stceq	14, cr2, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	050a0401 	streq	r0, [sl, #-1025]	; 0xfffffbff
		_size = (((aword)size) + 3) >> 2;
    13bc:	7ecd0305 	cdpvc	3, 12, cr0, cr13, cr5, {0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c0:	062f0501 	strteq	r0, [pc], -r1, lsl #10
		_size = (((aword)size) + 3) >> 2;
    13c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (mevent [MA_NP] . nfail != 255)
    13c8:	01ba0327 			; <UNDEFINED> instruction: 0x01ba0327
    13cc:	050a0420 	streq	r0, [sl, #-1056]	; 0xfffffbe0
			mevent [MA_NP] . nfail ++;
    13d0:	7ec6032f 	cdpvc	3, 12, cr0, cr6, cr15, {1}
		mnfree [MA_NP] = 0;
    13d4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    13d8:	b5030602 	strlt	r0, [r3, #-1538]	; 0xfffff9fe
		if (m_magic (chunk) != MALLOC_MAGIC)
    13dc:	23052001 	movwcs	r2, #20481	; 0x5001
    13e0:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
			syserror (EMALLOC, "malc");
    13e4:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    13e8:	20740323 	rsbscs	r0, r4, r3, lsr #6
		if (m_size (chunk) >= _size)
    13ec:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    13f0:	01062705 	tsteq	r6, r5, lsl #14
		chunk = m_nextp (chunk)) {
    13f4:	05280205 	streq	r0, [r8, #-517]!	; 0xfffffdfb
		m_setnextp (cc, m_nextp (chunk));
    13f8:	20780327 	rsbscs	r0, r8, r7, lsr #6
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13fc:	28060205 	stmdacs	r6, {r0, r2, r9}
    1400:	0a03313f 	beq	cd904 <__ccfg+0xad95c>
			m_size (chunk) = _size;
    1404:	c003404a 	andgt	r4, r3, sl, asr #32
			cc = chunk + _size + m_hdrlen;
    1408:	5959017d 	ldmdbpl	r9, {r0, r2, r3, r4, r5, r6, r8}^
    140c:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
			m_size (cc) = waste - m_hdrlen;
    1410:	7eae0305 	cdpvc	3, 10, cr0, cr14, cr5, {0}
			QFREE;
    1414:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		mevent [MA_NP] . nfail = 0;
    1418:	d403060d 	strle	r0, [r3], #-1549	; 0xfffff9f3
		mcfree [MA_NP] -= m_size (chunk);
    141c:	09040101 	stmdbeq	r4, {r0, r8}
    1420:	ac033105 	stfges	f3, [r3], {5}
    1424:	01042e7e 	tsteq	r4, lr, ror lr
    1428:	03060205 	movweq	r0, #25093	; 0x6205
		m_size (chunk) |= MALLOC_UMASK;
    142c:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		m_size (chunk) |= MALLOC_UMASK;
    1434:	03220602 			; <UNDEFINED> instruction: 0x03220602
			mnfree [MA_NP] = mcfree [MA_NP];
    1438:	012e02c7 	smlawteq	lr, r7, r2, r0
}
    143c:	05152e2e 	ldreq	r2, [r5, #-3630]	; 0xfffff1d2
    1440:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1444:	03052e05 	movweq	r2, #24069	; 0x5e05
    1448:	0b043006 	bleq	10d468 <__ccfg+0xed4c0>
    144c:	c3030505 	movwgt	r0, #13573	; 0x3505
    1450:	0c040179 	stfeqs	f0, [r4], {121}	; 0x79
    1454:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
aword __pi_fork (fsmcode func, aword data) {
    1458:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    145c:	0605050b 	streq	r0, [r5], -fp, lsl #10
    1460:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
    1464:	05010634 	streq	r0, [r1, #-1588]	; 0xfffff9cc
		if ((j = __PCB) == NULL)
    1468:	044b0605 	strbeq	r0, [fp], #-1541	; 0xfffff9fb
	i->Next = NULL;
    146c:	03150501 	tsteq	r5, #4194304	; 0x400000
	i->data = data;
    1470:	054a06d5 	strbeq	r0, [sl, #-1749]	; 0xfffff92b
		if ((j = __PCB) == NULL)
    1474:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
}
    1478:	3a150513 	bcc	5428cc <__ccfg+0x522924>
			for (; j->Next != NULL; j = j->Next);
    147c:	03190205 	tsteq	r9, #1342177280	; 0x50000000
    1480:	04017ecb 	streq	r7, [r1], #-3787	; 0xfffff135
	return (aword) i;
    1484:	03240506 			; <UNDEFINED> instruction: 0x03240506
    1488:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
	if (mevent [MA_NP] . nwait != 255)
    148c:	23051705 	movwcs	r1, #22277	; 0x5705
    1490:	01040106 	tsteq	r4, r6, lsl #2
    1494:	dd030205 	sfmle	f0, 4, [r3, #-20]	; 0xffffffec
		mevent [MA_NP] . nwait ++;
    1498:	06042002 	streq	r2, [r4], -r2
	wait ((aword)(&(mevent [MA_NP])), state);
    149c:	a3032305 	movwge	r2, #13061	; 0x3305
    14a0:	0104207d 	tsteq	r4, sp, ror r0
void diag (const char *mess, ...) {
    14a4:	03060205 	movweq	r0, #25093	; 0x6205
    14a8:	4e4a02dd 	mcrmi	2, 2, r0, cr10, cr13, {6}
    14ac:	13060105 	movwne	r0, #24837	; 0x6105
	diag_disable_int (a, is);
    14b0:	052d0205 	streq	r0, [sp, #-517]!	; 0xfffffdfb
    14b4:	5f030603 	svcpl	0x00030603
    14b8:	0541412e 	strbeq	r4, [r1, #-302]	; 0xfffffed2
				d = (bc == 16) ? 10000 : 1000000000;
    14bc:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
	diag_disable_int (a, is);
    14c0:	2f021f03 	svccs	0x00021f03
	while (*mess != '\0') {
    14c4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	dgout ('\r');
    14c8:	0205001f 	andeq	r0, r5, #31
	dgout ('\n');
    14cc:	00000000 	andeq	r0, r0, r0
    14d0:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
    14d4:	16170205 	ldrne	r0, [r7], -r5, lsl #4
	diag_wait (a);
    14d8:	01062c05 	tsteq	r6, r5, lsl #24
	diag_enable_int (a, is);
    14dc:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
    14e0:	1505202c 	strne	r2, [r5, #-44]	; 0xffffffd4
}
    14e4:	21120520 	tstcs	r2, r0, lsr #10
    14e8:	4a1f1505 	bmi	7c6904 <__ccfg+0x7a695c>
    14ec:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
		if (*mess == '%') {
    14f0:	01010003 	tsteq	r1, r3
    14f4:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
			if (*mess == 'l') {
    14f8:	00000002 	andeq	r0, r0, r2
    14fc:	0adb0300 	beq	ff6c2104 <_estack+0xdf6bd104>
				mess++;
    1500:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
				val = va_arg (ap, lword);
    1504:	010f0514 	tsteq	pc, r4, lsl r5	; <UNPREDICTABLE>
				bc = 32;
    1508:	0e061c05 	cdpeq	12, 0, cr1, cr6, cr5, {0}
				bc = 16;
    150c:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
			switch (*mess) {
    1510:	06052007 	streq	r2, [r5], -r7
    1514:	06030558 			; <UNDEFINED> instruction: 0x06030558
    1518:	0606052e 	streq	r0, [r6], -lr, lsr #10
				dgout ('%');
    151c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1520:	010f052d 	tsteq	pc, sp, lsr #10
				dgout (*mess);
    1524:	20060205 	andcs	r0, r6, r5, lsl #4
    1528:	01054d06 	tsteq	r5, r6, lsl #26
			switch (*mess) {
    152c:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
					v = __pi_hex_enc_table [
    1530:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
					i += 4;
    1534:	02050031 	andeq	r0, r5, #49	; 0x31
					(val >> (bc - i)) & 0xf];
    1538:	00000c28 	andeq	r0, r0, r8, lsr #24
    153c:	010ae703 	tsteq	sl, r3, lsl #14
					dgout (v);
    1540:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    1544:	03030503 	movweq	r0, #13571	; 0x3503
				while (i < bc) {
    1548:	040177b2 	streq	r7, [r1], #-1970	; 0xfffff84e
			mess++;
    154c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
					d /= 10;
    1550:	0108cc03 	tsteq	r8, r3, lsl #24
				if ((val >> (bc - 1)) & 1) {
    1554:	03050304 	movweq	r0, #21252	; 0x5304
    1558:	3c77b403 	cfldrdcc	mvd11, [r7], #-12
					dgout ('-');
    155c:	31050104 	tstcc	r5, r4, lsl #2
    1560:	2008cc03 	andcs	ip, r8, r3, lsl #24
						val |= 0xffff0000;
    1564:	03050304 	movweq	r0, #21252	; 0x5304
    1568:	2077b403 	rsbscs	fp, r7, r3, lsl #8
    156c:	02050104 	andeq	r0, r5, #4, 2
				d = (bc == 16) ? 10000 : 1000000000;
    1570:	08d00306 	ldmeq	r0, {r1, r2, r8, r9}^
    1574:	0204012e 	andeq	r0, r4, #-2147483637	; 0x8000000b
    1578:	03060505 	movweq	r0, #25861	; 0x6505
					v = (word) (val / d);
    157c:	046676dd 	strbteq	r7, [r6], #-1757	; 0xfffff923
					if (v || d == 1) break;
    1580:	06020501 	streq	r0, [r2], -r1, lsl #10
    1584:	2009a303 	andcs	sl, r9, r3, lsl #6
					d /= 10;
    1588:	9b030d04 	blls	c49a0 <__ccfg+0xa49f8>
				d = (bc == 16) ? 10000 : 1000000000;
    158c:	01010175 	tsteq	r1, r5, ror r1
					dgout (v + '0');
    1590:	044a5b19 	strbeq	r5, [sl], #-2841	; 0xfffff4e7
    1594:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    1598:	2e099d03 	cdpcs	13, 0, cr9, cr9, cr3, {0}
					d /= 10;
    159c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
					val = val - (v * d);
    15a0:	76f90306 	ldrbtvc	r0, [r9], r6, lsl #6
					if (d == 0) break;
    15a4:	01010120 	tsteq	r1, r0, lsr #2
					v = (word) (val / d);
    15a8:	03040101 	movweq	r0, #16641	; 0x4101
    15ac:	36030305 	strcc	r0, [r3], -r5, lsl #6
				if (bc == 16)
    15b0:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
				d = (bc == 16) ? 10000 : 1000000000;
    15b4:	204a0302 	subcs	r0, sl, r2, lsl #6
					val &= 0xffff;
    15b8:	03010482 	movweq	r0, #5250	; 0x1482
					dgout (*s);
    15bc:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
					s++;
    15c0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
				while (*s != '\0') {
    15c4:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    15c8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
			dgout (*mess++);
    15cc:	15052002 	strne	r2, [r5, #-2]
    15d0:	20020520 	andcs	r0, r2, r0, lsr #10
    15d4:	6a060405 	bvs	1825f0 <__ccfg+0x162648>
    15d8:	050d0421 	streq	r0, [sp, #-1057]	; 0xfffffbdf
    15dc:	778e0302 	strvc	r0, [lr, r2, lsl #6]
}
    15e0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    while(1)
    15e4:	012b0303 			; <UNDEFINED> instruction: 0x012b0303
{
    15e8:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    SetupTrimDevice();
    15ec:	20205503 	eorcs	r5, r0, r3, lsl #10
    pui32Src = &_etext;
    15f0:	03010420 	movweq	r0, #5152	; 0x1420
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f4:	04200ac5 	strteq	r0, [r0], #-2757	; 0xfffff53b
    __asm("    ldr     r0, =_bss\n"
    15f8:	0303050d 	movweq	r0, #13581	; 0x350d
    15fc:	054a75a6 	strbeq	r7, [sl, #-1446]	; 0xfffffa5a
    1600:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    1604:	23052006 	movwcs	r2, #20486	; 0x5006
    1608:	201f0520 	andscs	r0, pc, r0, lsr #10
   main();
    160c:	30060405 	andcc	r0, r6, r5, lsl #8
    FaultISR();
    1610:	01060e05 	tsteq	r6, r5, lsl #28
        *pui32Dest++ = *pui32Src++;
    1614:	2f060405 	svccs	0x00060405
    1618:	041c0205 	ldreq	r0, [ip], #-517	; 0xfffffdfb
    161c:	03040501 	movweq	r0, #17665	; 0x4501
    1620:	052e098f 	streq	r0, [lr, #-2447]!	; 0xfffff671
    1624:	0501062a 	streq	r0, [r1, #-1578]	; 0xfffff9d6
    1628:	2a052704 	bcs	14b240 <__ccfg+0x12b298>
    162c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    1630:	044e0604 	strbeq	r0, [lr], #-1540	; 0xfffff9fc
static byte get_byte () {
    1634:	7fb20309 	svcvc	0x00b20309
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1638:	06290501 	strteq	r0, [r9], -r1, lsl #10
    163c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1640:	d1030604 	tstle	r3, r4, lsl #12
    1644:	044d6600 	strbeq	r6, [sp], #-1536	; 0xfffffa00
		if (ee_inp)
    1648:	03050502 	movweq	r0, #21762	; 0x5502
			b |= 1;
    164c:	0401789f 	streq	r7, [r1], #-2207	; 0xfffff761
    1650:	03040501 	movweq	r0, #17665	; 0x4501
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1654:	052007e5 	streq	r0, [r0, #-2021]!	; 0xfffff81b
	for (b = 0, i = 0; i < 8; i++) {
    1658:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
}
    165c:	214b0604 	cmpcs	fp, r4, lsl #12
    1660:	01061a05 	tsteq	r6, r5, lsl #20
    1664:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
static void put_byte (byte b) {
    1668:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    166c:	01789603 	cmneq	r8, r3, lsl #12
    1670:	21060105 	tstcs	r6, r5, lsl #2
    1674:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		if (b & 0x80)
    1678:	07f10306 	ldrbeq	r0, [r1, r6, lsl #6]!
    167c:	050c0420 	streq	r0, [ip, #-1056]	; 0xfffffbe0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1680:	78a00305 	stmiavc	r0!, {r0, r2, r8, r9}
	for (i = 0; i < 8; i++) {
    1684:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
		b <<= 1;
    1688:	d4030631 	strle	r0, [r3], #-1585	; 0xfffff9cf
	for (i = 0; i < 8; i++) {
    168c:	0c040102 	stfeqs	f0, [r4], {2}
}
    1690:	ac032e05 	stcge	14, cr2, [r3], {5}
    1694:	0e042e7d 	mcreq	14, 0, r2, cr4, cr13, {3}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1698:	88035205 	stmdahi	r3, {r0, r2, r9, ip, lr}
    169c:	0c042e02 	stceq	14, cr2, [r4], {2}
	put_byte (cmd);
    16a0:	f8032e05 			; <UNDEFINED> instruction: 0xf8032e05
    16a4:	01042e7d 	tsteq	r4, sp, ror lr
}
    16a8:	03060405 	movweq	r0, #25605	; 0x6405
    16ac:	042007e5 	strteq	r0, [r0], #-2021	; 0xfffff81b
static void wwait (word st, word del) {
    16b0:	0331050e 	teqeq	r1, #58720256	; 0x3800000
    16b4:	05017aa0 	streq	r7, [r1, #-2720]	; 0xfffff560
    16b8:	52051505 	andpl	r1, r5, #20971520	; 0x1400000
	while (dopen && (rdsr () & 1)) {
    16bc:	01040106 	tsteq	r4, r6, lsl #2
    16c0:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    16c4:	0e042005 	cdpeq	0, 0, cr2, cr4, cr5, {0}
    16c8:	9b035205 	blls	d5ee4 <__ccfg+0xb5f3c>
	put_byte (CMD_RDSR);
    16cc:	01042e7a 	tsteq	r4, sl, ror lr
	r = get_byte ();
    16d0:	03060405 	movweq	r0, #25605	; 0x6405
    16d4:	042e05e0 	strteq	r0, [lr], #-1504	; 0xfffffa20
	while (dopen && (rdsr () & 1)) {
    16d8:	03050502 	movweq	r0, #21762	; 0x5502
}
    16dc:	04017886 	streq	r7, [r1], #-2182	; 0xfffff77a
		if (st == WNONE)
    16e0:	03040501 	movweq	r0, #17665	; 0x4501
    16e4:	042007fc 	strteq	r0, [r0], #-2044	; 0xfffff804
			mdelay (1);
    16e8:	03050509 	movweq	r0, #21769	; 0x5509
    16ec:	05017aea 	streq	r7, [r1, #-2794]	; 0xfffff516
			delay (del, st);
    16f0:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    16f4:	04b60329 	ldrteq	r0, [r6], #809	; 0x329
			release;
    16f8:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    16fc:	042e7bca 	strteq	r7, [lr], #-3018	; 0xfffff436
    1700:	06040501 	streq	r0, [r4], -r1, lsl #10
static void ready () {
    1704:	2e059903 	vmlacs.f16	s18, s10, s6	; <UNPREDICTABLE>
	if (dopen) {
    1708:	01062305 	tsteq	r6, r5, lsl #6
		wwait (WNONE, 1);
    170c:	06200405 	strteq	r0, [r0], -r5, lsl #8
    1710:	0509046a 	streq	r0, [r9, #-1130]	; 0xfffffb96
    1714:	799f0305 	ldmibvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
	dstat = 0;
    1718:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
}
    171c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1720:	06ed0304 	strbteq	r0, [sp], r4, lsl #6
    1724:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
	udelay (1);
    1728:	7993033f 	ldmibvc	r3, {r0, r1, r2, r3, r4, r5, r8, r9}
    172c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	udelay (1);
    1730:	ea030604 	b	c2f48 <__ccfg+0xa2fa0>
		dopen = DOPEN_TEMP;
    1734:	09042e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, sp}
    1738:	017f9003 	cmneq	pc, r3
    173c:	01062905 	tsteq	r6, r5, lsl #18
    1740:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
static void cclose () {
    1744:	2e00f303 	cdpcs	3, 0, cr15, cr0, cr3, {0}
	if (dopen == DOPEN_TEMP) {
    1748:	29050904 	stmdbcs	r5, {r2, r8, fp}
    174c:	207f8d03 	rsbscs	r8, pc, r3, lsl #26
		wwait (WNONE, 1);
    1750:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1754:	00f30306 	rscseq	r0, r3, r6, lsl #6
	cmd_0 (CMD_DP);
    1758:	04404d4a 	strbeq	r4, [r0], #-3402	; 0xfffff2b6
    175c:	03050502 	movweq	r0, #21762	; 0x5502
		dopen = 0;
    1760:	040177ea 	streq	r7, [r1], #-2026	; 0xfffff816
}
    1764:	03040501 	movweq	r0, #17665	; 0x4501
word ee_open () {
    1768:	05200899 	streq	r0, [r0, #-2201]!	; 0xfffff767
	ready ();
    176c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	dopen = DOPEN_PERM;
    1770:	214b0604 	cmpcs	fp, r4, lsl #12
    1774:	01061a05 	tsteq	r6, r5, lsl #20
}
    1778:	05230405 	streq	r0, [r3, #-1029]!	; 0xfffffbfb
	if (dopen) {
    177c:	04051d1a 	streq	r1, [r5], #-3354	; 0xfffff2e6
    1780:	04593f06 	ldrbeq	r3, [r9], #-3846	; 0xfffff0fa
		dopen = DOPEN_TEMP;
    1784:	7eee0309 	cdpvc	3, 14, cr0, cr14, cr9, {0}
		cclose ();
    1788:	06290501 	strteq	r0, [r9], -r1, lsl #10
}
    178c:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
int ser_in (word st, char *buf, int len) {
    1790:	7bdb030d 	blvc	ff6c23cc <_estack+0xdf6bd3cc>
    1794:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
	if (len == 0)
    1798:	04a50329 	strteq	r0, [r5], #809	; 0x329
	if (__inpline == NULL) {
    179c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		if ((prcs = running (__inserial)) == 0) {
    17a0:	97030604 	strls	r0, [r3, -r4, lsl #12]
    17a4:	0e044a01 	vmlaeq.f32	s8, s8, s2
			prcs = runthread (__inserial);
    17a8:	f3033105 	vrhadd.u8	d3, d3, d5
    17ac:	05050179 	streq	r0, [r5, #-377]	; 0xfffffe87
			if (prcs == 0) {
    17b0:	06520515 			; <UNDEFINED> instruction: 0x06520515
				npwait (st);
    17b4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		release;
    17b8:	8c03061a 	stchi	6, cr0, [r3], {26}
		join (prcs, st);
    17bc:	0a052e06 	beq	14cfdc <__ccfg+0x12d034>
    17c0:	050e0411 	streq	r0, [lr, #-1041]	; 0xfffffbef
	if (*__inpline == NULL) // bin cmd
    17c4:	7ac30305 	bvc	ff0c23e0 <_estack+0xdf0bd3e0>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17c8:	060d0501 	streq	r0, [sp], -r1, lsl #10
	if (prcs >= len)
    17cc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		prcs = len-1;
    17d0:	05bd030a 	ldreq	r0, [sp, #778]!	; 0x30a
	memcpy (buf, __inpline, prcs);
    17d4:	06040520 	streq	r0, [r4], -r0, lsr #10
    17d8:	0b055932 	bleq	157ca8 <__ccfg+0x137d00>
    17dc:	1a050106 	bne	141bfc <__ccfg+0x121c54>
	ufree (__inpline);
    17e0:	0a052106 	beq	149c00 <__ccfg+0x129c58>
	__inpline = NULL;
    17e4:	060b0511 			; <UNDEFINED> instruction: 0x060b0511
	if (*buf) // if it's NULL, it's a bin cmd
    17e8:	580a0501 	stmdapl	sl, {r0, r8, sl}
		buf [prcs] = '\0';
    17ec:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
}
    17f0:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
		prcs = strlen (__inpline);
    17f4:	017ab803 	cmneq	sl, r3, lsl #16
    17f8:	01063105 	tsteq	r6, r5, lsl #2
		return 0;
    17fc:	bc033f05 	stclt	15, cr3, [r3], {5}
    1800:	3105207e 	tstcc	r5, lr, ror r0
    1804:	2001c403 	andcs	ip, r1, r3, lsl #8
int ser_outf (word st, const char *m, ...) {
    1808:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    180c:	05cb0306 	strbeq	r0, [fp, #774]	; 0x306
	if ((prcs = running (__outserial)) != 0) {
    1810:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    1814:	78f10305 	ldmvc	r1!, {r0, r2, r8, r9}^
		join (prcs, st);
    1818:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    181c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		release;
    1820:	92030604 	andls	r0, r3, #4, 12	; 0x400000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1824:	0c042e07 	stceq	14, cr2, [r4], {7}
    1828:	f5030505 			; <UNDEFINED> instruction: 0xf5030505
    182c:	2e050177 	mcrcs	1, 0, r0, cr5, cr7, {3}
		umwait (st);
    1830:	01040106 	tsteq	r4, r6, lsl #2
    1834:	03060405 	movweq	r0, #25605	; 0x6405
	if (runstrand (__outserial, buf) == 0) {
    1838:	042e088e 	strteq	r0, [lr], #-2190	; 0xfffff772
    183c:	03050502 	movweq	r0, #21762	; 0x5502
    1840:	040177c9 	streq	r7, [r1], #-1993	; 0xfffff837
		ufree (buf);
    1844:	03040501 	movweq	r0, #17665	; 0x4501
		npwait (st);
    1848:	032008ba 			; <UNDEFINED> instruction: 0x032008ba
}
    184c:	052f2e09 	streq	r2, [pc, #-3593]!	; a4b <GPIOIntHandler+0x7f>
    1850:	7db00302 	ldcvc	3, cr0, [r0, #8]!
    1854:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
    1858:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
int ser_inf (word st, const char *fmt, ...) {
    185c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1860:	01062305 	tsteq	r6, r5, lsl #6
	if (fmt == NULL)
    1864:	01050104 	tsteq	r5, r4, lsl #2
	if (__inpline == NULL) {
    1868:	5801a803 	stmdapl	r1, {r0, r1, fp, sp, pc}
		if ((prcs = running (__inserial)) == 0) {
    186c:	03060405 	movweq	r0, #25605	; 0x6405
    1870:	5b2002f0 	blpl	802438 <__ccfg+0x7e2490>
			prcs = runthread (__inserial);
    1874:	01062c05 	tsteq	r6, r5, lsl #24
    1878:	05273205 	streq	r3, [r7, #-517]!	; 0xfffffdfb
			if (prcs == 0) {
    187c:	2079032c 	rsbscs	r0, r9, ip, lsr #6
				npwait (st);
    1880:	4c060405 	cfstrsmi	mvf0, [r6], {5}
		release;
    1884:	01062d05 	tsteq	r6, r5, lsl #26
		join (prcs, st);
    1888:	5d060405 	cfstrspl	mvf0, [r6, #-20]	; 0xffffffec
    188c:	01063205 	tsteq	r6, r5, lsl #4
	va_start (ap, fmt);
    1890:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
	prcs = vscan (__inpline, fmt, ap);
    1894:	01063205 	tsteq	r6, r5, lsl #4
    1898:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
	ufree (__inpline);
    189c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	__inpline = NULL;
    18a0:	01778b03 	cmneq	r7, r3, lsl #22
}
    18a4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    18a8:	2008f803 	andcs	pc, r8, r3, lsl #16
    18ac:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		return 0;
    18b0:	017a8803 	cmneq	sl, r3, lsl #16
    18b4:	01062d05 	tsteq	r6, r5, lsl #26
    18b8:	31060505 	tstcc	r6, r5, lsl #10
strand (__outserial, const char*)
    18bc:	01064d05 	tsteq	r6, r5, lsl #26
    18c0:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    18c4:	01062e05 	tsteq	r6, r5, lsl #28
    18c8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
endstrand
    18cc:	05f70306 	ldrbeq	r0, [r7, #774]!	; 0x306
    18d0:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
	ptr = data;
    18d4:	77850305 	strvc	r0, [r5, r5, lsl #6]
    18d8:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
	if (*ptr)
    18dc:	e803060d 	stmda	r3, {r0, r2, r3, r9, sl}
		len = strlen (ptr);
    18e0:	01042002 	tsteq	r4, r2
    18e4:	03063905 	movweq	r3, #26885	; 0x6905
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18e8:	05200696 	streq	r0, [r0, #-1686]!	; 0xfffff96a
    18ec:	0e04010a 	adfeqs	f0, f4, #2.0
    18f0:	ea030505 	b	c2d0c <__ccfg+0xa2d64>
    18f4:	0d050179 	stfeqs	f0, [r5, #-484]	; 0xfffffe1c
    18f8:	01040106 	tsteq	r4, r6, lsl #2
	len -= quant;
    18fc:	96030a05 	strls	r0, [r3], -r5, lsl #20
    1900:	04052006 	streq	r2, [r5], #-6
    1904:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
	if (len == 0) {
    1908:	ec030505 	cfstr32	mvfx0, [r3], {5}
		ufree (data);
    190c:	41050177 	tstmi	r5, r7, ror r1
		finish;
    1910:	01040106 	tsteq	r4, r6, lsl #2
    1914:	97030405 	strls	r0, [r3, -r5, lsl #8]
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1918:	09042e08 	stmdbeq	r4, {r3, r9, sl, fp, sp}
    191c:	e9034105 	stmdb	r3, {r0, r2, r8, lr}
    1920:	01042077 	tsteq	r4, r7, ror r0
    1924:	03060405 	movweq	r0, #25605	; 0x6405
    1928:	52200897 	eorpl	r0, r0, #9895936	; 0x970000
strand (__inserial, address)
    192c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1930:	2075d103 	rsbscs	sp, r5, r3, lsl #2
    1934:	0101014a 	tsteq	r1, sl, asr #2
    1938:	03050304 	movweq	r0, #21252	; 0x5304
    193c:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
	if (__inpline != NULL)
    1940:	0302050d 	movweq	r0, #9485	; 0x250d
    1944:	02162055 	andseq	r2, r6, #85	; 0x55
		finish;
    1948:	01010037 	tsteq	r1, r7, lsr r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    194c:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    1950:	00000002 	andeq	r0, r0, r2
    1954:	00e10300 	rsceq	r0, r1, r0, lsl #6
    1958:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		umwait (IM_INIT);
    195c:	1e061205 	cdpne	2, 0, cr1, cr6, cr5, {0}
		release;
    1960:	21220205 			; <UNDEFINED> instruction: 0x21220205
	savedata (data);
    1964:	2f21061f 	svccs	0x0021061f
	len = MAX_LINE_LENGTH;
    1968:	08053f4b 	stmdaeq	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
	io (IM_READ, __cport, READ, ptr, 1);
    196c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1970:	08022f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, sp}
    1974:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1978:	0205003a 	andeq	r0, r5, #58	; 0x3a
	if (ptr == (char*) data) { // new line
    197c:	00000000 	andeq	r0, r0, r0
    1980:	0100f103 	tsteq	r0, r3, lsl #2	; <UNPREDICTABLE>
		if (*ptr == '\0') { // bin cmd
    1984:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
			proceed (IM_BIN);
    1988:	0e063a05 	vmlaeq.f32	s6, s12, s10
    198c:	24060520 	strcs	r0, [r6], #-1312	; 0xfffffae0
		if (*ptr < 0x20)
    1990:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    1994:	03052405 	movweq	r2, #21509	; 0x5405
			proceed (IM_READ);
    1998:	06053f06 	streq	r3, [r5], -r6, lsl #30
    199c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (*ptr == '\n' || *ptr == '\r') {
    19a0:	12053006 	andne	r3, r5, #6
    19a4:	0b050106 	bleq	141dc4 <__ccfg+0x121e1c>
    19a8:	0603052e 	streq	r0, [r3], -lr, lsr #10
		*ptr = '\0';
    19ac:	06090525 	streq	r0, [r9], -r5, lsr #10
		__inpline = (char*)data;
    19b0:	050f0401 	streq	r0, [pc, #-1025]	; 15b7 <diag+0x113>
		finish;
    19b4:	2015032f 	andscs	r0, r5, pc, lsr #6
	if (len) {
    19b8:	09050104 	stmdbeq	r5, {r2, r8}
		ptr++;
    19bc:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    19c0:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
		len--;
    19c4:	0305050f 	movweq	r0, #21775	; 0x550f
	proceed (IM_READ);
    19c8:	2f050114 	svccs	0x00050114
	io (IM_BIN, __cport, READ, ptr, 1);
    19cc:	01040106 	tsteq	r4, r6, lsl #2
    19d0:	7a030105 	bvc	c1dec <__ccfg+0xa1e44>
    19d4:	06040520 	streq	r0, [r4], -r0, lsr #10
    19d8:	04206f03 	strteq	r6, [r0], #-3843	; 0xfffff0fd
    19dc:	0305050f 	movweq	r0, #21775	; 0x550f
	len -= 2;
    19e0:	140100c3 	strne	r0, [r1], #-195	; 0xffffff3d
	if (len > *ptr + 1) // 1 for 0x04
    19e4:	01061805 	tsteq	r6, r5, lsl #16
    19e8:	33060505 	movwcc	r0, #25861	; 0x6505
		len = *ptr + 1;
    19ec:	0b050104 	bleq	141e04 <__ccfg+0x121e5c>
    19f0:	7fb60306 	svcvc	0x00b60306
	ptr++;
    19f4:	06030501 	streq	r0, [r3], -r1, lsl #10
	quant = io (IM_BINL, __cport, READ, ptr, len);
    19f8:	050f0434 	streq	r0, [pc, #-1076]	; 15cc <diag+0x128>
    19fc:	2f050e05 	svccs	0x00050e05
    1a00:	01040106 	tsteq	r4, r6, lsl #2
    1a04:	41060305 	tstmi	r6, r5, lsl #6
    1a08:	01060605 	tsteq	r6, r5, lsl #12
    1a0c:	053f0405 	ldreq	r0, [pc, #-1029]!	; 160f <zero_loop+0xf>
	len -= quant;
    1a10:	04052b06 	streq	r2, [r5], #-2822	; 0xfffff4fa
		__inpline = (char*)data;
    1a14:	052f2306 	streq	r2, [pc, #-774]!	; 1716 <ready+0x12>
		finish;
    1a18:	13062203 	movwne	r2, #25091	; 0x6203
	ptr += quant;
    1a1c:	051f0905 	ldreq	r0, [pc, #-2309]	; 111f <__pi_join+0x13>
    1a20:	2f210603 	svccs	0x00210603
endstrand
    1a24:	01000902 	tsteq	r0, r2, lsl #18
    1a28:	00110501 	andseq	r0, r1, r1, lsl #10
	proceed (IM_BINL);
    1a2c:	0e800205 	cdpeq	2, 8, cr0, cr0, cr5, {0}
endstrand
    1a30:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1a34:	0305010a 	movweq	r0, #20746	; 0x510a
    1a38:	0f051316 	svceq	0x00051316
    1a3c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    1a40:	2505200d 	strcs	r2, [r5, #-13]
    1a44:	1f030526 	svcne	0x00030526
		if (res && (d < n))
    1a48:	21060405 	tstcs	r6, r5, lsl #8
    1a4c:	01062505 	tsteq	r6, r5, lsl #10
    1a50:	2d063705 	stccs	7, cr3, [r6, #-20]	; 0xffffffec
    1a54:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
			res [d] = (char) c;
    1a58:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
		d++;
    1a5c:	06320602 	ldrteq	r0, [r2], -r2, lsl #12
    1a60:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1a64:	5b323106 	blpl	c8de84 <__ccfg+0xc6dedc>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a68:	061c055b 			; <UNDEFINED> instruction: 0x061c055b
    1a6c:	4a0c0501 	bmi	302e78 <__ccfg+0x2e2ed0>
    1a70:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
				enci (10000);
    1a74:	02051d0c 	andeq	r1, r5, #12, 26	; 0x300
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a78:	043e2306 	ldrteq	r2, [lr], #-774	; 0xfffffcfa
    1a7c:	03030503 	movweq	r0, #13571	; 0x3503
	d = 0;
    1a80:	040175c5 	streq	r7, [r1], #-1477	; 0xfffffa3b
		c = *fm++;
    1a84:	03020501 	movweq	r0, #9473	; 0x2501
		if (c == '\\') {
    1a88:	02200abd 	eoreq	r0, r0, #774144	; 0xbd000
			if ((c = *fm++) == '\0') {
    1a8c:	0101000e 	tsteq	r1, lr
    1a90:	00000ee0 	andeq	r0, r0, r0, ror #29
				outc ('\\');
    1a94:	01900003 	orrseq	r0, r0, r3
			if ((c = *fm++) == '\0') {
    1a98:	01020000 	mrseq	r0, (UNDEF: 2)
				outc ('\\');
    1a9c:	000d0efb 	strdeq	r0, [sp], -fp
    1aa0:	01010101 	tsteq	r1, r1, lsl #2
			outc (c);
    1aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa8:	2f010000 	svccs	0x00010000
			if (c == '\0')
    1aac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1ab0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
			outc (c);
    1ab4:	2f6e6974 	svccs	0x006e6974
				outc (val);
    1ab8:	6b736544 	blvs	1cdafd0 <__ccfg+0x1cbb028>
				val = (word) va_arg (ap, aword);
    1abc:	2f706f74 	svccs	0x00706f74
		if (c == '%') {
    1ac0:	4f534c4f 	svcmi	0x00534c4f
    1ac4:	2f54454e 	svccs	0x0054454e
			c = *fm++;
    1ac8:	4f434950 	svcmi	0x00434950
			switch (c) {
    1acc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1ad0:	2f534f63 	svccs	0x00534f63
    1ad4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    1ad8:	2f006c65 	svccs	0x00006c65
    1adc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1ae0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1ae4:	2f6e6974 	svccs	0x006e6974
    1ae8:	6b736544 	blvs	1cdb000 <__ccfg+0x1cbb058>
				outc ('%');
    1aec:	2f706f74 	svccs	0x00706f74
    1af0:	4f534c4f 	svcmi	0x00534c4f
				outc (c);
    1af4:	2f54454e 	svccs	0x0054454e
    1af8:	4f434950 	svcmi	0x00434950
    1afc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				if (c == '\0')
    1b00:	2f534f63 	svccs	0x00534f63
				return d;
    1b04:	33314343 	teqcc	r1, #201326593	; 0xc000001
}
    1b08:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    1b0c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
			switch (c) {
    1b10:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    1b14:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    1b18:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
				for (i = 12; ; i -= 4) {
    1b1c:	0062696c 	rsbeq	r6, r2, ip, ror #18
				val = (word) va_arg (ap, aword);
    1b20:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
						[ (val >> i) & 0xf ]);
    1b24:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1b28:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1b2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
					outc (__pi_hex_enc_table
    1b30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1b34:	61652d65 	cmnvs	r5, r5, ror #26
					if (i == 0)
    1b38:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1b3c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
				for (i = 12; ; i -= 4) {
    1b40:	636e692f 	cmnvs	lr, #770048	; 0xbc000
				val = (word) va_arg (ap, aword);
    1b44:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
				if (c == 'd' && (val & 0x8000) != 0) {
    1b48:	6f682f00 	svcvs	0x00682f00
				val = (word) va_arg (ap, aword);
    1b4c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 19a0 <__inserial+0x74>
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1b54:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
					outc ('-');
    1b58:	6f746b73 	svcvs	0x00746b73
    1b5c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
					val = (~val) + 1;
    1b60:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1b64:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				for (i = 12; ; i -= 4) {
    1b68:	2f534f43 	svccs	0x00534f43
				enci (10000);
    1b6c:	4f636950 	svcmi	0x00636950
    1b70:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1b74:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1b78:	6f682f00 	svcvs	0x00682f00
    1b7c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 19d0 <__inserial+0xa4>
    1b80:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1b84:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1b88:	6f746b73 	svcvs	0x00746b73
    1b8c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1b90:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1b94:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1b98:	2f534f43 	svccs	0x00534f43
    1b9c:	4f636950 	svcmi	0x00636950
    1ba0:	6b000053 	blvs	1cf4 <vscan+0xc>
    1ba4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1ba8:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    1bac:	75000001 	strvc	r0, [r0, #-1]
    1bb0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
				if (c == 'd' || c == 'u') {
    1bb4:	00020068 	andeq	r0, r2, r8, rrx
    1bb8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
					if (c == 'd' &&
    1bbc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
					val = va_arg (ap, lword);
    1bc0:	00030068 	andeq	r0, r3, r8, rrx
					fm++;
    1bc4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
					if (c == 'd' &&
    1bc8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    1bcc:	00030068 	andeq	r0, r3, r8, rrx
						outc ('-');
    1bd0:	63726100 	cmnvs	r2, #0, 2
    1bd4:	00682e68 	rsbeq	r2, r8, r8, ror #28
						val = (~val) + 1;
    1bd8:	6d000004 	stcvs	0, cr0, [r0, #-16]
				enci (10000);
    1bdc:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
					enci (1000000000UL);
    1be0:	00040068 	andeq	r0, r4, r8, rrx
    1be4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1be8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1bec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1bf0:	62000004 	andvs	r0, r0, #4
    1bf4:	6f747475 	svcvs	0x00747475
    1bf8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    1bfc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    1c00:	00000400 	andeq	r0, r0, r0, lsl #8
    1c04:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1c08:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1c0c:	6b000005 	blvs	1c28 <__pi_vfparse+0x1c0>
    1c10:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1c14:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    1c18:	3c000001 	stccc	0, cr0, [r0], {1}
    1c1c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1c20:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
				} else if (c == 'x') {
    1c24:	0000003e 	andeq	r0, r0, lr, lsr r0
					for (i = 28; ; i -= 4) {
    1c28:	26050000 	strcs	r0, [r5], -r0
					val = va_arg (ap, lword);
    1c2c:	e0020500 	and	r0, r2, r0, lsl #10
							[ (val >> i) & 0xf ]);
    1c30:	0300000e 	movweq	r0, #14
    1c34:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
						outc (__pi_hex_enc_table
    1c38:	13131602 	tstne	r3, #2097152	; 0x200000
    1c3c:	06260514 			; <UNDEFINED> instruction: 0x06260514
    1c40:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
						if (i == 0)
    1c44:	20090302 	andcs	r0, r9, r2, lsl #6
    1c48:	051f0705 	ldreq	r0, [pc, #-1797]	; 154b <diag+0xa7>
					for (i = 28; ; i -= 4) {
    1c4c:	20210602 	eorcs	r0, r1, r2, lsl #12
					outc ('%');
    1c50:	21061305 	tstcs	r6, r5, lsl #6
    1c54:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
    1c58:	08052013 	stmdaeq	r5, {r0, r1, r4, sp}
					outc ('l');
    1c5c:	060f053e 			; <UNDEFINED> instruction: 0x060f053e
    1c60:	0603052c 	streq	r0, [r3], -ip, lsr #10
				val = (word) va_arg (ap, aword);
    1c64:	06040501 	streq	r0, [r4], -r1, lsl #10
				outc (val);
    1c68:	0616052f 	ldreq	r0, [r6], -pc, lsr #10
    1c6c:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
				while (*st != '\0') {
    1c70:	31060505 	tstcc	r6, r5, lsl #10
    1c74:	0302054b 	movweq	r0, #9547	; 0x254b
    1c78:	0105017a 	tsteq	r5, sl, ror r1
    1c7c:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
					outc (*st);
    1c80:	01000302 	tsteq	r0, r2, lsl #6
    1c84:	001f0501 	andseq	r0, pc, r1, lsl #10
					st++;
    1c88:	0f1c0205 	svceq	0x001c0205
		c = *fm++;
    1c8c:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    1c90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1c94:	14010d03 	strne	r0, [r1], #-3331	; 0xfffff2fd
char *vform (char *res, const char *fm, va_list aq) {
    1c98:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    1c9c:	031f0501 	tsteq	pc, #4194304	; 0x400000
	if (res != NULL) {
    1ca0:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ca4:	052e1003 	streq	r1, [lr, #-3]!
    1ca8:	0520061f 	streq	r0, [r0, #-1567]!	; 0xfffff9e1
    1cac:	06010602 	streq	r0, [r1], -r2, lsl #12
}
    1cb0:	13201103 			; <UNDEFINED> instruction: 0x13201103
    1cb4:	01060d05 	tsteq	r6, r5, lsl #26
	fml = strlen (fm) + 17;
    1cb8:	051f0505 	ldreq	r0, [pc, #-1285]	; 17bb <ser_in+0x2b>
    1cbc:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
    1cc0:	06010602 	streq	r0, [r1], -r2, lsl #12
	if ((res = (char*) umalloc (fml)) == NULL)
    1cc4:	0f052125 	svceq	0x00052125
    1cc8:	02051506 	andeq	r1, r5, #25165824	; 0x1800000
    1ccc:	0523061d 	streq	r0, [r3, #-1565]!	; 0xfffff9e3
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    1cd4:	03052401 	movweq	r2, #21505	; 0x5401
    1cd8:	20620306 	rsbcs	r0, r2, r6, lsl #6
    1cdc:	01061e05 	tsteq	r6, r5, lsl #28
		ufree (res);
    1ce0:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
		goto Again;
    1ce4:	21300604 	teqcs	r0, r4, lsl #12
	if (buf == NULL || fmt == NULL)
    1ce8:	01061305 	tsteq	r6, r5, lsl #6
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cec:	91060405 	tstls	r6, r5, lsl #8
	if (buf == NULL || fmt == NULL)
    1cf0:	050d2e05 	streq	r2, [sp, #-3589]	; 0xfffff1fb
    1cf4:	05010636 	streq	r0, [r1, #-1590]	; 0xfffff9ca
    1cf8:	0534060a 	ldreq	r0, [r4, #-1546]!	; 0xfffff9f6
		    	    case 'u': scanu (lword); break;
    1cfc:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
			while (isspace (*buf)) buf++;
    1d00:	0405580d 	streq	r5, [r5], #-2061	; 0xfffff7f3
    1d04:	052f2206 	streq	r2, [pc, #-518]!	; 1b06 <__pi_vfparse+0x9e>
	while (*fmt != '\0') {
    1d08:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
		if (*fmt++ != '%')
    1d0c:	0b030604 	bleq	c3524 <__ccfg+0xa357c>
		switch (*fmt++) {
    1d10:	060705ac 	streq	r0, [r7], -ip, lsr #11
    1d14:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    1d18:	06090564 	streq	r0, [r9], -r4, ror #10
    1d1c:	00070213 	andeq	r0, r7, r3, lsl r2
    1d20:	1c050101 	stfnes	f0, [r5], {1}
    1d24:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1d28:	0300000f 	movweq	r0, #15
}
    1d2c:	050108c6 	streq	r0, [r1, #-2246]	; 0xfffff73a
		switch (*fmt++) {
    1d30:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    1d34:	03060d05 	movweq	r0, #27909	; 0x6d05
    1d38:	04017cdf 	streq	r7, [r1], #-3295	; 0xfffff321
    1d3c:	060f0501 	streq	r0, [pc], -r1, lsl #10
			while (isspace (*buf)) buf++;
    1d40:	2003a103 	andcs	sl, r3, r3, lsl #2
    1d44:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    1d48:	03240502 			; <UNDEFINED> instruction: 0x03240502
    1d4c:	05017cda 	streq	r7, [r1, #-3290]	; 0xfffff326
    1d50:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    1d54:	01040106 	tsteq	r4, r6, lsl #2
			if (*buf == '\0')
    1d58:	a1030205 	tstge	r3, r5, lsl #4
			if (*buf != ',') {
    1d5c:	2f062003 	svccs	0x00062003
			sap = va_arg (ap, char*);
    1d60:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
			nc++;
    1d64:	01000502 	tsteq	r0, r2, lsl #10
			if (*buf != ',') {
    1d68:	00270501 	eoreq	r0, r7, r1, lsl #10
				while (!isspace (*buf) && *buf != ',' &&
    1d6c:	00000205 	andeq	r0, r0, r5, lsl #4
    1d70:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1d74:	02050100 	andeq	r0, r5, #0, 2
    1d78:	27051414 	smladcs	r5, r4, r4, r1
    1d7c:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    1d80:	1c270524 	cfstr32ne	mvfx0, [r7], #-144	; 0xffffff70
    1d84:	06240205 	strteq	r0, [r4], -r5, lsl #4
			while (isspace (*buf)) buf++;
    1d88:	03052320 	movweq	r2, #21280	; 0x5320
    1d8c:	06060548 	streq	r0, [r6], -r8, asr #10
    1d90:	06020501 	streq	r0, [r2], -r1, lsl #10
    1d94:	0601052d 	streq	r0, [r1], -sp, lsr #10
    1d98:	00050232 	andeq	r0, r5, r2, lsr r2
			if (*buf == ',') buf++;
    1d9c:	1b050101 	blne	1421a8 <__ccfg+0x122200>
    1da0:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
			*sap = '\0';
    1da4:	0300000f 	movweq	r0, #15
			break;
    1da8:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
		    case 'd': scani (word); break;
    1dac:	1b051302 	blne	1469bc <__ccfg+0x126a14>
    1db0:	02051f06 	andeq	r1, r5, #6, 30
    1db4:	00060221 	andeq	r0, r6, r1, lsr #4
    1db8:	1e050101 	adfnes	f0, f5, f1
    1dbc:	00020500 	andeq	r0, r2, r0, lsl #10
    1dc0:	03000000 	movweq	r0, #0
    1dc4:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    1dc8:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    1dcc:	1e05010e 	adfnes	f0, f5, #0.5
    1dd0:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    1dd4:	05340905 	ldreq	r0, [r4, #-2309]!	; 0xfffff6fb
    1dd8:	207a031e 	rsbscs	r0, sl, lr, lsl r3
    1ddc:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    1de0:	01061205 	tsteq	r6, r5, lsl #4
    1de4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1de8:	051f061f 	ldreq	r0, [pc, #-1567]	; 17d1 <ser_in+0x41>
    1dec:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1df0:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1df4:	06010602 	streq	r0, [r1], -r2, lsl #12
    1df8:	13030532 	movwne	r0, #13618	; 0x3532
    1dfc:	153b0205 	ldrne	r0, [fp, #-517]!	; 0xfffffdfb
    1e00:	01061105 	tsteq	r6, r5, lsl #2
    1e04:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1e08:	01010006 	tsteq	r1, r6
    1e0c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1e10:	00000002 	andeq	r0, r0, r2
    1e14:	018e0300 	orreq	r0, lr, r0, lsl #6
    1e18:	16020501 	strne	r0, [r2], -r1, lsl #10
		    case 'u': scanu (word); break;
    1e1c:	010e0514 	tsteq	lr, r4, lsl r5
    1e20:	20060905 	andcs	r0, r6, r5, lsl #18
    1e24:	7a032105 	bvc	ca240 <__ccfg+0xaa298>
    1e28:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1e2c:	06120527 	ldreq	r0, [r2], -r7, lsr #10
    1e30:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1e34:	21060405 	tstcs	r6, r5, lsl #8
    1e38:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
    1e3c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1e40:	052b061f 	streq	r0, [fp, #-1567]!	; 0xfffff9e1
    1e44:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1e48:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1e4c:	06010602 	streq	r0, [r1], -r2, lsl #12
    1e50:	580b0534 	stmdapl	fp, {r2, r4, r5, r8, sl}
    1e54:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    1e58:	03050108 	movweq	r0, #20744	; 0x5108
    1e5c:	061f052f 	ldreq	r0, [pc], -pc, lsr #10
    1e60:	20210501 	eorcs	r0, r1, r1, lsl #10
		    case 'x': scanx (word); break;
    1e64:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    1e68:	052f0603 	streq	r0, [pc, #-1539]!	; 186d <ser_inf+0x11>
    1e6c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1e70:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    1e74:	01052e0b 	tsteq	r5, fp, lsl #28
    1e78:	07021306 	streq	r1, [r2, -r6, lsl #6]
    1e7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e80:	0205002a 	andeq	r0, r5, #42	; 0x2a
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	0101a603 	tsteq	r1, r3, lsl #12
    1e8c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1e90:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1e94:	02210602 	eoreq	r0, r1, #2097152	; 0x200000
    1e98:	01010002 	tsteq	r1, r2
    1e9c:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    1ea0:	000fc402 	andeq	ip, pc, r2, lsl #8
    1ea4:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    1ea8:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1eac:	0e030602 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx2
    1eb0:	10031320 	andne	r1, r3, r0, lsr #6
    1eb4:	06060501 	streq	r0, [r6], -r1, lsl #10
    1eb8:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    1ebc:	03060205 	movweq	r0, #25093	; 0x6205
    1ec0:	06052e09 	streq	r2, [r5], -r9, lsl #28
    1ec4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1ec8:	3c060558 	cfstr32cc	mvfx0, [r6], {88}	; 0x58
    1ecc:	08060305 	stmdaeq	r6, {r0, r2, r8, r9}
    1ed0:	02052e27 	andeq	r2, r5, #624	; 0x270
    1ed4:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    1ed8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
			switch (*fmt++) {
    1edc:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    1ee0:	2e590306 	cdpcs	3, 5, cr0, cr9, cr6, {0}
    1ee4:	01060905 	tsteq	r6, r5, lsl #18
    1ee8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    1eec:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    1ef0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		    	    case 'd': scani (lword); break;
    1ef4:	08053c07 	stmdaeq	r5, {r0, r1, r2, sl, fp, ip, sp}
    1ef8:	0605052e 	streq	r0, [r5], -lr, lsr #10
    1efc:	03053e08 	movweq	r3, #24072	; 0x5e08
    1f00:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
    1f04:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
    1f08:	01061205 	tsteq	r6, r5, lsl #4
    1f0c:	21060505 	tstcs	r6, r5, lsl #10
    1f10:	11060705 	tstne	r6, r5, lsl #14
    1f14:	03060305 	movweq	r0, #25349	; 0x6305
    1f18:	07056617 	smladeq	r5, r7, r6, r6
    1f1c:	06050106 	streq	r0, [r5], -r6, lsl #2
    1f20:	0602052e 	streq	r0, [r2], -lr, lsr #10
    1f24:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    1f28:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    1f2c:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    1f30:	0d030601 	stceq	6, cr0, [r3, #-4]
    1f34:	03020501 	movweq	r0, #9473	; 0x2501
    1f38:	01052e73 	tsteq	r5, r3, ror lr
    1f3c:	022e0d03 	eoreq	r0, lr, #3, 26	; 0xc0
    1f40:	0101000a 	tsteq	r1, sl
    1f44:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
    1f48:	00109002 	andseq	r9, r0, r2
    1f4c:	02d20300 	sbcseq	r0, r2, #0, 6
		    	    case 'x': scanx (lword); break;
    1f50:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1f54:	10061b05 	andne	r1, r6, r5, lsl #22
    1f58:	06220205 	strteq	r0, [r2], -r5, lsl #4
    1f5c:	0005024b 	andeq	r0, r5, fp, asr #4
    1f60:	2a050101 	bcs	14236c <__ccfg+0x1223c4>
    1f64:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    1f68:	03000010 	movweq	r0, #16
    1f6c:	050102d8 	streq	r0, [r1, #-728]	; 0xfffffd28
    1f70:	2a051602 	bcs	147780 <__ccfg+0x1277d8>
    1f74:	0b050e06 	bleq	145794 <__ccfg+0x1257ec>
    1f78:	3e050524 	cfsh32cc	mvfx0, mvfx5, #20
    1f7c:	4a060205 	bmi	182798 <__ccfg+0x1627f0>
    1f80:	01060505 	tsteq	r6, r5, lsl #10
    1f84:	21060305 	tstcs	r6, r5, lsl #6
    1f88:	014c0205 	cmpeq	ip, r5, lsl #4
    1f8c:	061f3d06 	ldreq	r3, [pc], -r6, lsl #26
    1f90:	05132020 	ldreq	r2, [r3, #-32]	; 0xffffffe0
    1f94:	02210601 	eoreq	r0, r1, #1048576	; 0x100000
    1f98:	01010006 	tsteq	r1, r6
    1f9c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1fa0:	0010d802 	andseq	sp, r0, r2, lsl #16
    1fa4:	02e50300 	rsceq	r0, r5, #0, 6
    1fa8:	16020501 	strne	r0, [r2], -r1, lsl #10
    1fac:	21051413 	tstcs	r5, r3, lsl r4
    1fb0:	01790306 	cmneq	r9, r6, lsl #6
    1fb4:	06270205 	strteq	r0, [r7], -r5, lsl #4
    1fb8:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    1fbc:	200a0521 	andcs	r0, sl, r1, lsr #10
		    	    case 'd': scani (lword); break;
    1fc0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    1fc4:	054a060f 	strbeq	r0, [sl, #-1551]	; 0xfffff9f1
    1fc8:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1fcc:	052f0604 	streq	r0, [pc, #-1540]!	; 19d0 <__inserial+0xa4>
    1fd0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    1fd4:	4b5a0605 	blmi	16837f0 <__ccfg+0x1663848>
    1fd8:	050d0205 	streq	r0, [sp, #-517]	; 0xfffffdfb
		    	    case 'u': scanu (lword); break;
    1fdc:	09030601 	stmdbeq	r3, {r0, r9, sl}
    1fe0:	0003022e 	andeq	r0, r3, lr, lsr #4
    1fe4:	2d050101 	stfcss	f0, [r5, #-4]
    1fe8:	00020500 	andeq	r0, r2, r0, lsl #10
    1fec:	03000000 	movweq	r0, #0
    1ff0:	050102f7 	streq	r0, [r1, #-759]	; 0xfffffd09
    1ff4:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    1ff8:	03062d05 	movweq	r2, #27909	; 0x6d05
    1ffc:	05200179 	streq	r0, [r0, #-377]!	; 0xfffffe87
    2000:	30062702 	andcc	r2, r6, r2, lsl #14
    2004:	01060905 	tsteq	r6, r5, lsl #18
    2008:	2e060e05 	cdpcs	14, 0, cr0, cr6, cr5, {0}
    200c:	01061205 	tsteq	r6, r5, lsl #4
    2010:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
    2014:	03053301 	movweq	r3, #21249	; 0x5301
    2018:	06051c06 	streq	r1, [r5], -r6, lsl #24
    201c:	20050106 	andcs	r0, r5, r6, lsl #2
    2020:	2106051f 	tstcs	r6, pc, lsl r5
		    	    case 'x': scanx (lword); break;
    2024:	21060405 	tstcs	r6, r5, lsl #8
    2028:	02641f05 	rsbeq	r1, r4, #5, 30
			if ((c = *buf++) == '\0')
    202c:	01010001 	tsteq	r1, r1
    2030:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
			sap = va_arg (ap, char*);
    2034:	00110c02 	andseq	r0, r1, r2, lsl #24
			nc++;
    2038:	03870300 	orreq	r0, r7, #0, 6
			break;
    203c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			while (isspace (*buf)) buf++;
    2040:	06260514 			; <UNDEFINED> instruction: 0x06260514
    2044:	0205200e 	andeq	r2, r5, #14
    2048:	052e0624 	streq	r0, [lr, #-1572]!	; 0xfffff9dc
						*sap++ = *buf++;
    204c:	05280609 	streq	r0, [r8, #-1545]!	; 0xfffff9f7
    2050:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
			while (isspace (*buf)) buf++;
    2054:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2058:	06040501 	streq	r0, [r4], -r1, lsl #10
    205c:	01053d30 	tsteq	r5, r0, lsr sp
		return 0;
    2060:	02051706 	andeq	r1, r5, #1572864	; 0x180000
    2064:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
		    case 'x': scanx (word); break;
    2068:	01000402 	tsteq	r0, r2, lsl #8
    206c:	00210501 	eoreq	r0, r1, r1, lsl #10
		    	    case 'x': scanx (lword); break;
    2070:	11300205 	teqne	r0, r5, lsl #4
    2074:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    2078:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    207c:	06210516 			; <UNDEFINED> instruction: 0x06210516
    2080:	0205200e 	andeq	r2, r5, #14
    2084:	3e850624 	cdpcc	6, 8, cr0, cr5, cr4, {1}
    2088:	01061e05 	tsteq	r6, r5, lsl #28
    208c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    2090:	1305201e 	movwne	r2, #20510	; 0x501e
    2094:	06020520 	streq	r0, [r2], -r0, lsr #10
    2098:	06010522 	streq	r0, [r1], -r2, lsr #10
    209c:	00050259 	andeq	r0, r5, r9, asr r2
    20a0:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
    20a4:	00020500 	andeq	r0, r2, r0, lsl #10
    20a8:	03000000 	movweq	r0, #0
    20ac:	050103a7 	streq	r0, [r1, #-935]	; 0xfffffc59
    20b0:	01051602 	tsteq	r5, r2, lsl #12
    20b4:	04026706 	streq	r6, [r2], #-1798	; 0xfffff8fa
    20b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    20bc:	02050018 	andeq	r0, r5, #24
    20c0:	00000000 	andeq	r0, r0, r0
    20c4:	0103b203 	tsteq	r3, r3, lsl #4
    20c8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    20cc:	0e061805 	cdpeq	8, 0, cr1, cr6, cr5, {0}
    20d0:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    20d4:	05055a06 	streq	r5, [r5, #-2566]	; 0xfffff5fa
    20d8:	03050106 	movweq	r0, #20742	; 0x5106
    20dc:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    20e0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    20e4:	12053506 	andne	r3, r5, #25165824	; 0x1800000
    20e8:	01050106 	tsteq	r5, r6, lsl #2
    20ec:	06030559 			; <UNDEFINED> instruction: 0x06030559
    20f0:	3d207a03 	vstmdbcc	r0!, {s14-s16}
    20f4:	01060605 	tsteq	r6, r5, lsl #12
    20f8:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    20fc:	08023d0b 	stmdaeq	r2, {r0, r1, r3, r8, sl, fp, ip, sp}
    2100:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2104:	0205001d 	andeq	r0, r5, #29
    2108:	00000000 	andeq	r0, r0, r0
    210c:	01049203 	tsteq	r4, r3, lsl #4
    2110:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2114:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
    2118:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    211c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2120:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2124:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2128:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    212c:	022b0603 	eoreq	r0, fp, #3145728	; 0x300000
    2130:	01010006 	tsteq	r1, r6
    2134:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    2138:	00116802 	andseq	r6, r1, r2, lsl #16
    213c:	049e0300 	ldreq	r0, [lr], #768	; 0x300
    2140:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2144:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2148:	06030501 	streq	r0, [r3], -r1, lsl #10
    214c:	060a052f 	streq	r0, [sl], -pc, lsr #10
    2150:	06020501 	streq	r0, [r2], -r1, lsl #10
    2154:	01052e3e 	tsteq	r5, lr, lsr lr
    2158:	03052506 	movweq	r2, #21766	; 0x5506
    215c:	06051c06 	streq	r1, [r5], -r6, lsl #24
    2160:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2164:	06023b06 	streq	r3, [r2], -r6, lsl #22
    2168:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    216c:	0205001d 	andeq	r0, r5, #29
    2170:	00000000 	andeq	r0, r0, r0
    2174:	0104ac03 	tsteq	r4, r3, lsl #24
    2178:	13140205 	tstne	r4, #1342177280	; 0x50000000
    217c:	1d051314 	stcne	3, cr1, [r5, #-80]	; 0xffffffb0
    2180:	017a0306 	cmneq	sl, r6, lsl #6
    2184:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
    2188:	2e062102 	adfcss	f2, f6, f2
    218c:	24060105 	strcs	r0, [r6], #-261	; 0xfffffefb
    2190:	1d060305 	stcne	3, cr0, [r6, #-20]	; 0xffffffec
    2194:	01060605 	tsteq	r6, r5, lsl #12
    2198:	051f0205 	ldreq	r0, [pc, #-517]	; 1f9b <vscan+0x2b3>
    219c:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    21a0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    21a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    21a8:	04023a06 	streq	r3, [r2], #-2566	; 0xfffff5fa
    21ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    21b0:	02050021 	andeq	r0, r5, #33	; 0x21
    21b4:	0000118c 	andeq	r1, r0, ip, lsl #3
    21b8:	0104b803 	tsteq	r4, r3, lsl #16
    21bc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    21c0:	0e062105 	adfeqs	f2, f6, f5
    21c4:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
    21c8:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    21cc:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    21d0:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
    21d4:	1e051d06 	cdpne	13, 0, cr1, cr5, cr6, {0}
    21d8:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    21dc:	00020201 	andeq	r0, r2, r1, lsl #4
    21e0:	2b050101 	blcs	1425ec <__ccfg+0x122644>
    21e4:	00020500 	andeq	r0, r2, r0, lsl #10
    21e8:	03000000 	movweq	r0, #0
    21ec:	050104c1 	streq	r0, [r1, #-1217]	; 0xfffffb3f
    21f0:	20051402 	andcs	r1, r5, r2, lsl #8
    21f4:	01080520 	tsteq	r8, r0, lsr #10
    21f8:	01061a05 	tsteq	r6, r5, lsl #20
    21fc:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    2200:	01052e08 	tsteq	r5, r8, lsl #28
    2204:	0001022f 	andeq	r0, r1, pc, lsr #4
    2208:	33050101 	movwcc	r0, #20737	; 0x5101
    220c:	00020500 	andeq	r0, r2, r0, lsl #10
    2210:	03000000 	movweq	r0, #0
    2214:	050104c6 	streq	r0, [r1, #-1222]	; 0xfffffb3a
    2218:	08051402 	stmdaeq	r5, {r1, sl, ip}
    221c:	3002052e 	andcc	r0, r2, lr, lsr #10
    2220:	01060505 	tsteq	r6, r5, lsl #10
    2224:	052f0105 	streq	r0, [pc, #-261]!	; 2127 <TrimAfterColdResetWakeupFromShutDown+0x57>
    2228:	0d051d11 	stceq	13, cr1, [r5, #-68]	; 0xffffffbc
    222c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2230:	0608052f 	streq	r0, [r8], -pc, lsr #10
    2234:	00030201 	andeq	r0, r3, r1, lsl #4
    2238:	2b050101 	blcs	142644 <__ccfg+0x12269c>
    223c:	00020500 	andeq	r0, r2, r0, lsl #10
    2240:	03000000 	movweq	r0, #0
    2244:	050104cd 	streq	r0, [r1, #-1229]	; 0xfffffb33
    2248:	08051402 	stmdaeq	r5, {r1, sl, ip}
    224c:	4b02052e 	blmi	8370c <__ccfg+0x63764>
    2250:	01000202 	tsteq	r0, r2, lsl #4
    2254:	00330501 	eorseq	r0, r3, r1, lsl #10
    2258:	00000205 	andeq	r0, r0, r5, lsl #4
    225c:	d3030000 	movwle	r0, #12288	; 0x3000
    2260:	02050104 	andeq	r0, r5, #4, 2
    2264:	00030214 	andeq	r0, r3, r4, lsl r2
    2268:	37050101 	strcc	r0, [r5, -r1, lsl #2]
    226c:	9a020500 	bls	83674 <__ccfg+0x636cc>
    2270:	03000011 	movweq	r0, #17
    2274:	050104d8 	streq	r0, [r1, #-1240]	; 0xfffffb28
    2278:	08051402 	stmdaeq	r5, {r1, sl, ip}
    227c:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2280:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2284:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
    2288:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    228c:	01000302 	tsteq	r0, r2, lsl #6
    2290:	002e0501 	eoreq	r0, lr, r1, lsl #10
    2294:	00000205 	andeq	r0, r0, r5, lsl #4
    2298:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    229c:	02050104 	andeq	r0, r5, #4, 2
    22a0:	20080514 	andcs	r0, r8, r4, lsl r5
    22a4:	30060105 	andcc	r0, r6, r5, lsl #2
    22a8:	1f060305 	svcne	0x00060305
    22ac:	01060b05 	tsteq	r6, r5, lsl #22
    22b0:	01000302 	tsteq	r0, r2, lsl #6
    22b4:	002b0501 	eoreq	r0, fp, r1, lsl #10
    22b8:	11b00205 	lslsne	r0, r5, #4
    22bc:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    22c0:	02050104 	andeq	r0, r5, #4, 2
    22c4:	062b0514 			; <UNDEFINED> instruction: 0x062b0514
    22c8:	22050510 	andcs	r0, r5, #16, 10	; 0x4000000
    22cc:	21060305 	tstcs	r6, r5, lsl #6
    22d0:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    22d4:	0c052d06 	stceq	13, cr2, [r5], {6}
    22d8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    22dc:	06030520 	streq	r0, [r3], -r0, lsr #10
    22e0:	3e02052f 	cfsh32cc	mvfx0, mvfx2, #31
    22e4:	01060e05 	tsteq	r6, r5, lsl #28
    22e8:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    22ec:	01010005 	tsteq	r1, r5
    22f0:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    22f4:	0011d402 	andseq	sp, r1, r2, lsl #8
    22f8:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
    22fc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2300:	06450514 			; <UNDEFINED> instruction: 0x06450514
    2304:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
    2308:	2022055c 	eorcs	r0, r2, ip, asr r5
    230c:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    2310:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2314:	05054c02 	streq	r4, [r5, #-3074]	; 0xfffff3fe
    2318:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    231c:	0f054006 	svceq	0x00054006
    2320:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2324:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
    2328:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    232c:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    2330:	03050106 	movweq	r0, #20742	; 0x5106
    2334:	06054f06 	streq	r4, [r5], -r6, lsl #30
    2338:	03050106 	movweq	r0, #20742	; 0x5106
    233c:	05593006 	ldrbeq	r3, [r9, #-6]
    2340:	010d0304 	tsteq	sp, r4, lsl #6
    2344:	76030205 	strvc	r0, [r3], -r5, lsl #4
    2348:	0605052e 	streq	r0, [r5], -lr, lsr #10
    234c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2350:	06060535 			; <UNDEFINED> instruction: 0x06060535
    2354:	06040501 	streq	r0, [r4], -r1, lsl #10
    2358:	0b05594b 	bleq	15888c <__ccfg+0x1388e4>
    235c:	03050106 	movweq	r0, #20742	; 0x5106
    2360:	0a056906 	beq	15c780 <__ccfg+0x13c7d8>
    2364:	03050106 	movweq	r0, #20742	; 0x5106
    2368:	0a055906 	beq	158788 <__ccfg+0x1387e0>
    236c:	01610306 	cmneq	r1, r6, lsl #6
    2370:	29030105 	stmdbcs	r3, {r0, r2, r8}
    2374:	06020520 	streq	r0, [r2], -r0, lsr #10
    2378:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    237c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2380:	752f0603 	strvc	r0, [pc, #-1539]!	; 1d85 <vscan+0x9d>
    2384:	01000502 	tsteq	r0, r2, lsl #10
    2388:	001a0501 	andseq	r0, sl, r1, lsl #10
    238c:	12700205 	rsbsne	r0, r0, #1342177280	; 0x50000000
    2390:	ef030000 	svc	0x00030000
    2394:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    2398:	01130317 	tsteq	r3, r7, lsl r3
    239c:	01061505 	tsteq	r6, r5, lsl #10
    23a0:	68031a05 	stmdavs	r3, {r0, r2, r9, fp, ip}
    23a4:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    23a8:	0c052018 	stceq	0, cr2, [r5], {24}
    23ac:	20050558 	andcs	r0, r5, r8, asr r5
    23b0:	31060305 	tstcc	r6, r5, lsl #6
    23b4:	05520205 	ldrbeq	r0, [r2, #-517]	; 0xfffffdfb
    23b8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    23bc:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    23c0:	05150617 	ldreq	r0, [r5, #-1559]	; 0xfffff9e9
    23c4:	16052b1d 			; <UNDEFINED> instruction: 0x16052b1d
    23c8:	06020520 	streq	r0, [r2], -r0, lsr #10
    23cc:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    23d0:	06020514 			; <UNDEFINED> instruction: 0x06020514
    23d4:	061a0531 			; <UNDEFINED> instruction: 0x061a0531
    23d8:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    23dc:	2c030105 	stfcss	f0, [r3], {5}
    23e0:	000d022e 	andeq	r0, sp, lr, lsr #4
    23e4:	1c050101 	stfnes	f0, [r5], {1}
    23e8:	c0020500 	andgt	r0, r2, r0, lsl #10
    23ec:	03000012 	movweq	r0, #18
    23f0:	050106fb 	streq	r0, [r1, #-1787]	; 0xfffff905
    23f4:	010c0302 	tsteq	ip, r2, lsl #6
    23f8:	03061c05 	movweq	r1, #27653	; 0x6c05
    23fc:	05050174 	streq	r0, [r5, #-372]	; 0xfffffe8c
    2400:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    2404:	05250602 	streq	r0, [r5, #-1538]!	; 0xfffff9fe
    2408:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    240c:	03052e05 	movweq	r2, #24069	; 0x5e05
    2410:	054c2f06 	strbeq	r2, [ip, #-3846]	; 0xfffff0fa
    2414:	05160611 	ldreq	r0, [r6, #-1553]	; 0xfffff9ef
    2418:	11051c0f 	tstne	r5, pc, lsl #24
    241c:	1c0f0532 	cfstr32ne	mvfx0, [pc], {50}	; 0x32
    2420:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    2424:	01061105 	tsteq	r6, r5, lsl #2
    2428:	30060205 	andcc	r0, r6, r5, lsl #4
    242c:	06150530 			; <UNDEFINED> instruction: 0x06150530
    2430:	20050501 	andcs	r0, r5, r1, lsl #10
    2434:	2f060305 	svccs	0x00060305
    2438:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
    243c:	42010501 	andmi	r0, r1, #4194304	; 0x400000
    2440:	01000802 	tsteq	r0, r2, lsl #16
    2444:	00170501 	andseq	r0, r7, r1, lsl #10
    2448:	13080205 	movwne	r0, #33285	; 0x8205
    244c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2450:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2454:	17051416 	smladne	r5, r6, r4, r1
    2458:	017a0306 	cmneq	sl, r6, lsl #6
    245c:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    2460:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2464:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2468:	02052007 	andeq	r2, r5, #7
    246c:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
    2470:	05110604 	ldreq	r0, [r1, #-1540]	; 0xfffff9fc
    2474:	2e062102 	adfcss	f2, f6, f2
    2478:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    247c:	4a720303 	bmi	1c83090 <__ccfg+0x1c630e8>
    2480:	01060605 	tsteq	r6, r5, lsl #12
    2484:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    2488:	01060705 	tsteq	r6, r5, lsl #14
    248c:	21060505 	tstcs	r6, r5, lsl #10
    2490:	01060b05 	tsteq	r6, r5, lsl #22
    2494:	23060405 	movwcs	r0, #25605	; 0x6405
    2498:	0a052f3d 	beq	14e194 <__ccfg+0x12e1ec>
    249c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    24a0:	06050520 	streq	r0, [r5], -r0, lsr #10
    24a4:	0d052a3d 	vstreq	s4, [r5, #-244]	; 0xffffff0c
    24a8:	01050106 	tsteq	r5, r6, lsl #2
    24ac:	02580a03 	subseq	r0, r8, #12288	; 0x3000
    24b0:	01010007 	tsteq	r1, r7
    24b4:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    24b8:	00135802 	andseq	r5, r3, r2, lsl #16
    24bc:	03f40300 	mvnseq	r0, #0, 6
    24c0:	16020501 	strne	r0, [r2], -r1, lsl #10
    24c4:	13131413 	tstne	r3, #318767104	; 0x13000000
    24c8:	03061c05 	movweq	r1, #27653	; 0x6c05
    24cc:	04050177 	streq	r0, [r5], #-375	; 0xfffffe89
    24d0:	1f060536 	svcne	0x00060536
    24d4:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
    24d8:	2077031c 	rsbscs	r0, r7, ip, lsl r3
    24dc:	10030a05 	andne	r0, r3, r5, lsl #20
    24e0:	03090520 	movweq	r0, #38176	; 0x9520
    24e4:	12052e79 	andne	r2, r5, #1936	; 0x790
    24e8:	02052006 	andeq	r2, r5, #6
    24ec:	03060106 	movweq	r0, #24838	; 0x6106
    24f0:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
    24f4:	03050106 	movweq	r0, #20742	; 0x5106
    24f8:	6f032106 	svcvs	0x00032106
    24fc:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2500:	06040501 	streq	r0, [r4], -r1, lsl #10
    2504:	07051359 	smlsdeq	r5, r9, r3, r1
    2508:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    250c:	0b052106 	bleq	14a92c <__ccfg+0x12a984>
    2510:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2514:	07053106 	streq	r3, [r5, -r6, lsl #2]
    2518:	09050106 	stmdbeq	r5, {r1, r2, r8}
    251c:	0604052f 	streq	r0, [r4], -pc, lsr #10
    2520:	052f2f3d 	streq	r2, [pc, #-3901]!	; 15eb <ResetISR+0x3>
    2524:	0d054505 	cfstr32eq	mvfx4, [r5, #-20]	; 0xffffffec
    2528:	01050106 	tsteq	r5, r6, lsl #2
    252c:	023c0d03 	eorseq	r0, ip, #3, 26	; 0xc0
    2530:	01010007 	tsteq	r1, r7
    2534:	05002005 	streq	r2, [r0, #-5]
    2538:	0013b002 	andseq	fp, r3, r2
    253c:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    2540:	1a020501 	bne	8394c <__ccfg+0x639a4>
    2544:	05051416 	streq	r1, [r5, #-1046]	; 0xfffffbea
    2548:	03050106 	movweq	r0, #20742	; 0x5106
    254c:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
    2550:	20050f06 	andcs	r0, r5, r6, lsl #30
    2554:	052e7003 	streq	r7, [lr, #-3]!
    2558:	2023030d 	eorcs	r0, r3, sp, lsl #6
    255c:	70031a05 	andvc	r1, r3, r5, lsl #20
    2560:	030d0520 	movweq	r0, #54560	; 0xd520
    2564:	06052e10 			; <UNDEFINED> instruction: 0x06052e10
    2568:	03090523 	movweq	r0, #38179	; 0x9523
    256c:	0205206d 	andeq	r2, r5, #109	; 0x6d
    2570:	2e0f0306 	cdpcs	3, 0, cr0, cr15, cr6, {0}
    2574:	011f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    2578:	01060205 	tsteq	r6, r5, lsl #4
    257c:	20090306 	andcs	r0, r9, r6, lsl #6
    2580:	19030305 	stmdbne	r3, {r0, r2, r8, r9}
    2584:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    2588:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    258c:	2f060405 	svccs	0x00060405
    2590:	01061b05 	tsteq	r6, r5, lsl #22
    2594:	03060305 	movweq	r0, #25349	; 0x6305
    2598:	12052e0d 	andne	r2, r5, #13, 28	; 0xd0
    259c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    25a0:	09054006 	stmdbeq	r5, {r1, r2, lr}
    25a4:	03050106 	movweq	r0, #20742	; 0x5106
    25a8:	204f0306 	subcs	r0, pc, r6, lsl #6
    25ac:	01060605 	tsteq	r6, r5, lsl #12
    25b0:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    25b4:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    25b8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    25bc:	7a03062e 	bvc	c3e7c <__ccfg+0xa3ed4>
    25c0:	0609054a 	streq	r0, [r9], -sl, asr #10
    25c4:	06020513 			; <UNDEFINED> instruction: 0x06020513
    25c8:	14030544 	strne	r0, [r3], #-1348	; 0xfffffabc
    25cc:	060e0522 	streq	r0, [lr], -r2, lsr #10
    25d0:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    25d4:	30060405 	andcc	r0, r6, r5, lsl #8
    25d8:	01061305 	tsteq	r6, r5, lsl #6
    25dc:	2f060405 	svccs	0x00060405
    25e0:	01061705 	tsteq	r6, r5, lsl #14
    25e4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    25e8:	052f0604 	streq	r0, [pc, #-1540]!	; 1fec <vscan+0x304>
    25ec:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    25f0:	04052010 	streq	r2, [r5], #-16
    25f4:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    25f8:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
    25fc:	01061a05 	tsteq	r6, r5, lsl #20
    2600:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
    2604:	03051e1a 	movweq	r1, #24090	; 0x5e1a
    2608:	15052206 	strne	r2, [r5, #-518]	; 0xfffffdfa
    260c:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    2610:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2614:	060e053d 			; <UNDEFINED> instruction: 0x060e053d
    2618:	25120501 	ldrcs	r0, [r2, #-1281]	; 0xfffffaff
    261c:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    2620:	06052512 			; <UNDEFINED> instruction: 0x06052512
    2624:	06040529 	streq	r0, [r4], -r9, lsr #10
    2628:	06130522 	ldreq	r0, [r3], -r2, lsr #10
    262c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2630:	06010531 			; <UNDEFINED> instruction: 0x06010531
    2634:	02011b03 	andeq	r1, r1, #3072	; 0xc00
    2638:	0101000e 	tsteq	r1, lr
    263c:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    2640:	00145802 	andseq	r5, r4, r2, lsl #16
    2644:	02ab0300 	adceq	r0, fp, #0, 6
    2648:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    264c:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    2650:	1905200e 	stmdbne	r5, {r1, r2, r3, sp}
    2654:	1c2c0524 	cfstr32ne	mvfx0, [ip], #-144	; 0xffffff70
    2658:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    265c:	02053c05 	andeq	r3, r5, #1280	; 0x500
    2660:	0a052306 	beq	14b280 <__ccfg+0x12b2d8>
    2664:	010b0306 	tsteq	fp, r6, lsl #6
    2668:	77030c05 	strvc	r0, [r3, -r5, lsl #24]
    266c:	260a0520 	strcs	r0, [sl], -r0, lsr #10
    2670:	20760323 	rsbscs	r0, r6, r3, lsr #6
    2674:	2f060205 	svccs	0x00060205
    2678:	14030518 	strne	r0, [r3], #-1304	; 0xfffffae8
    267c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    2680:	06040501 	streq	r0, [r4], -r1, lsl #10
    2684:	060a0521 	streq	r0, [sl], -r1, lsr #10
    2688:	03010501 	movweq	r0, #5377	; 0x1501
    268c:	0b05200f 	bleq	14a6d0 <__ccfg+0x12a728>
    2690:	20730306 	rsbscs	r0, r3, r6, lsl #6
    2694:	20060c05 	andcs	r0, r6, r5, lsl #24
    2698:	06200405 	strteq	r0, [r0], -r5, lsl #8
    269c:	060c052f 	streq	r0, [ip], -pc, lsr #10
    26a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    26a4:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    26a8:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    26ac:	01010004 	tsteq	r1, r4
    26b0:	05002005 	streq	r2, [r0, #-5]
    26b4:	00148c02 	andseq	r8, r4, r2, lsl #24
    26b8:	08810300 	stmeq	r1, {r8, r9}
    26bc:	03020501 	movweq	r0, #9473	; 0x2501
    26c0:	15050109 	strne	r0, [r5, #-265]	; 0xfffffef7
    26c4:	20050106 	andcs	r0, r5, r6, lsl #2
    26c8:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    26cc:	20090315 	andcs	r0, r9, r5, lsl r3
    26d0:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    26d4:	03051d05 	movweq	r1, #23813	; 0x5d05
    26d8:	1a052106 	bne	14aaf8 <__ccfg+0x12ab50>
    26dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    26e0:	04023e06 	streq	r3, [r2], #-3590	; 0xfffff1fa
    26e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26e8:	02050021 	andeq	r0, r5, #33	; 0x21
    26ec:	00000000 	andeq	r0, r0, r0
    26f0:	01089403 	tsteq	r8, r3, lsl #8
    26f4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26f8:	06210501 	strteq	r0, [r1], -r1, lsl #10
    26fc:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    2700:	3c090305 	stccc	3, cr0, [r9], {5}
    2704:	21060305 	tstcs	r6, r5, lsl #6
    2708:	01060805 	tsteq	r6, r5, lsl #16
    270c:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    2710:	12052008 	andne	r2, r5, #8
    2714:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    2718:	4c060305 	stcmi	3, cr0, [r6], {5}
    271c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2720:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2724:	06025a01 	streq	r5, [r2], -r1, lsl #20
    2728:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    272c:	02050020 	andeq	r0, r5, #32
    2730:	00000000 	andeq	r0, r0, r0
    2734:	0108a703 	tsteq	r8, r3, lsl #14
    2738:	09030205 	stmdbeq	r3, {r0, r2, r9}
    273c:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
    2740:	74030620 	strvc	r0, [r3], #-1568	; 0xfffff9e0
    2744:	031d0501 	tsteq	sp, #4194304	; 0x400000
    2748:	1205200c 	andne	r2, r5, #12
    274c:	200b052e 	andcs	r0, fp, lr, lsr #10
    2750:	20062f05 	andcs	r2, r6, r5, lsl #30
    2754:	01060205 	tsteq	r6, r5, lsl #4
    2758:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    275c:	03052e06 	movweq	r2, #24070	; 0x5e06
    2760:	07052106 	streq	r2, [r5, -r6, lsl #2]
    2764:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2768:	09054c06 	stmdbeq	r5, {r1, r2, sl, fp, lr}
    276c:	01050106 	tsteq	r5, r6, lsl #2
    2770:	0603053e 			; <UNDEFINED> instruction: 0x0603053e
    2774:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    2778:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
    277c:	054a0606 	strbeq	r0, [sl, #-1542]	; 0xfffff9fa
    2780:	0201060e 	andeq	r0, r1, #14680064	; 0xe00000
    2784:	01010004 	tsteq	r1, r4
    2788:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    278c:	0014a402 	andseq	sl, r4, r2, lsl #8
    2790:	09810300 	stmibeq	r1, {r8, r9}
    2794:	41020501 	tstmi	r2, r1, lsl #10
    2798:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    279c:	06230514 			; <UNDEFINED> instruction: 0x06230514
    27a0:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    27a4:	3c0c0302 	stccc	3, cr0, [ip], {2}
    27a8:	0121061f 			; <UNDEFINED> instruction: 0x0121061f
    27ac:	06080501 	streq	r0, [r8], -r1, lsl #10
    27b0:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    27b4:	20580302 	subscs	r0, r8, r2, lsl #6
    27b8:	23031c05 	movwcs	r1, #15365	; 0x3c05
    27bc:	03020520 	movweq	r0, #9504	; 0x2520
    27c0:	2e062e5d 	mcrcs	14, 0, r2, cr6, cr13, {2}
    27c4:	01080514 	tsteq	r8, r4, lsl r5
    27c8:	01060905 	tsteq	r6, r5, lsl #18
    27cc:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    27d0:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    27d4:	3d3d2000 	ldccc	0, cr2, [sp, #-0]
    27d8:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    27dc:	7bcf0306 	blvc	ff3c33fc <_estack+0xdf3be3fc>
    27e0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    27e4:	b103060f 	tstlt	r3, pc, lsl #12
    27e8:	02052004 	andeq	r2, r5, #4
    27ec:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    27f0:	7bca0324 	blvc	ff283488 <_estack+0xdf27e488>
    27f4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    27f8:	01060d05 	tsteq	r6, r5, lsl #26
    27fc:	02050104 	andeq	r0, r5, #4, 2
    2800:	2004b103 	andcs	fp, r4, r3, lsl #2
    2804:	01012f06 	tsteq	r1, r6, lsl #30
    2808:	06010558 			; <UNDEFINED> instruction: 0x06010558
    280c:	06030513 			; <UNDEFINED> instruction: 0x06030513
    2810:	587fb603 	ldmdapl	pc!, {r0, r1, r9, sl, ip, sp, pc}^	; <UNPREDICTABLE>
    2814:	01060605 	tsteq	r6, r5, lsl #12
    2818:	4b060405 	blmi	183834 <__ccfg+0x16388c>
    281c:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2820:	06050520 	streq	r0, [r5], -r0, lsr #10
    2824:	0513134b 	ldreq	r1, [r3, #-843]	; 0xfffffcb5
    2828:	2d010609 	stccs	6, cr0, [r1, #-36]	; 0xffffffdc
    282c:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
    2830:	20770308 	rsbscs	r0, r7, r8, lsl #6
    2834:	32060505 	andcc	r0, r6, #20971520	; 0x1400000
    2838:	06080515 			; <UNDEFINED> instruction: 0x06080515
    283c:	0604050f 	streq	r0, [r4], -pc, lsl #10
    2840:	03050525 	movweq	r0, #21797	; 0x5525
    2844:	053d7431 	ldreq	r7, [sp, #-1073]!	; 0xfffffbcf
    2848:	4e030604 	cfmadd32mi	mvax0, mvfx0, mvfx3, mvfx4
    284c:	411d054a 	tstmi	sp, sl, asr #10
    2850:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    2854:	01060805 	tsteq	r6, r5, lsl #16
    2858:	21060605 	tstcs	r6, r5, lsl #12
    285c:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    2860:	3c180511 	cfldr32cc	mvfx0, [r8], {17}
    2864:	052f0605 	streq	r0, [pc, #-1541]!	; 2267 <NOROM_SetupSetVddrLevel+0x1f>
    2868:	0546060b 	strbeq	r0, [r6, #-1547]	; 0xfffff9f5
    286c:	2e310304 	cdpcs	3, 3, cr0, cr1, cr4, {0}
    2870:	01060805 	tsteq	r6, r5, lsl #16
    2874:	05206a03 	streq	r6, [r0, #-2563]!	; 0xfffff5fd
    2878:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    287c:	1505132e 	strne	r1, [r5, #-814]	; 0xfffffcd2
    2880:	0e050106 	adfeqs	f0, f5, f6
    2884:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    2888:	2f060605 	svccs	0x00060605
    288c:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    2890:	06070501 	streq	r0, [r7], -r1, lsl #10
    2894:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2898:	06060501 	streq	r0, [r6], -r1, lsl #10
    289c:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    28a0:	06050501 	streq	r0, [r5], -r1, lsl #10
    28a4:	061c0523 	ldreq	r0, [ip], -r3, lsr #10
    28a8:	06050501 	streq	r0, [r5], -r1, lsl #10
    28ac:	14060559 	strne	r0, [r6], #-1369	; 0xfffffaa7
    28b0:	01061605 	tsteq	r6, r5, lsl #12
    28b4:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    28b8:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    28bc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    28c0:	0605200c 	streq	r2, [r5], -ip
    28c4:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    28c8:	0b050106 	bleq	142ce8 <__ccfg+0x122d40>
    28cc:	08052a06 	stmdaeq	r5, {r1, r2, r9, fp, sp}
    28d0:	1c051406 	cfstrsne	mvf1, [r5], {6}
    28d4:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
    28d8:	13060535 	movwne	r0, #25909	; 0x6535
    28dc:	06090559 			; <UNDEFINED> instruction: 0x06090559
    28e0:	1f080514 	svcne	0x00080514
    28e4:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    28e8:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    28ec:	01060905 	tsteq	r6, r5, lsl #18
    28f0:	21060605 	tstcs	r6, r5, lsl #12
    28f4:	01061605 	tsteq	r6, r5, lsl #12
    28f8:	222c0805 	eorcs	r0, ip, #327680	; 0x50000
    28fc:	1b060b05 	blne	185518 <__ccfg+0x165570>
    2900:	13060605 	movwne	r0, #26117	; 0x6605
    2904:	03060505 	movweq	r0, #25861	; 0x6505
    2908:	08052009 	stmdaeq	r5, {r0, r3, sp}
    290c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2910:	1c052f06 	stcne	15, cr2, [r5], {6}
    2914:	016e0306 	cmneq	lr, r6, lsl #6
    2918:	12030a05 	andne	r0, r3, #20480	; 0x5000
    291c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2920:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    2924:	20170306 	andscs	r0, r7, r6, lsl #6
    2928:	0607052f 	streq	r0, [r7], -pc, lsr #10
    292c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    2930:	060c051e 			; <UNDEFINED> instruction: 0x060c051e
    2934:	200b0501 	andcs	r0, fp, r1, lsl #10
    2938:	03060405 	movweq	r0, #25605	; 0x6405
    293c:	0b023c0c 	bleq	91974 <__ccfg+0x719cc>
    2940:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2944:	0205000f 	andeq	r0, r5, #15
    2948:	00000000 	andeq	r0, r0, r0
    294c:	010aae03 	tsteq	sl, r3, lsl #28
    2950:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    2954:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    2958:	25052e18 	strcs	r2, [r5, #-3608]	; 0xfffff1e8
    295c:	20180520 	andscs	r0, r8, r0, lsr #10
    2960:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2964:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
    2968:	14062106 	strne	r2, [r6], #-262	; 0xfffffefa
    296c:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    2970:	01010008 	tsteq	r1, r8
    2974:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
    2978:	01a10003 			; <UNDEFINED> instruction: 0x01a10003
    297c:	01020000 	mrseq	r0, (UNDEF: 2)
    2980:	000d0efb 	strdeq	r0, [sp], -fp
    2984:	01010101 	tsteq	r1, r1, lsl #2
    2988:	01000000 	mrseq	r0, (UNDEF: 0)
    298c:	2f010000 	svccs	0x00010000
    2990:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2994:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    2998:	2f6e6974 	svccs	0x006e6974
    299c:	6b736544 	blvs	1cdbeb4 <__ccfg+0x1cbbf0c>
    29a0:	2f706f74 	svccs	0x00706f74
    29a4:	4f534c4f 	svcmi	0x00534c4f
    29a8:	2f54454e 	svccs	0x0054454e
    29ac:	4f434950 	svcmi	0x00434950
    29b0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    29b4:	2f534f63 	svccs	0x00534f63
    29b8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    29bc:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    29c0:	00497465 	subeq	r7, r9, r5, ror #8
    29c4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    29c8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    29cc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    29d0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    29d4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    29d8:	61652d65 	cmnvs	r5, r5, ror #26
    29dc:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    29e0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    29e4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    29e8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    29ec:	6f682f00 	svcvs	0x00682f00
    29f0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2844 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x24>
    29f4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    29f8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    29fc:	6f746b73 	svcvs	0x00746b73
    2a00:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2a04:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2a08:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a0c:	2f534f43 	svccs	0x00534f43
    2a10:	4f636950 	svcmi	0x00636950
    2a14:	43432f53 	movtmi	r2, #16211	; 0x3f53
    2a18:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2a1c:	6f682f00 	svcvs	0x00682f00
    2a20:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2874 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x54>
    2a24:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2a28:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2a2c:	6f746b73 	svcvs	0x00746b73
    2a30:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2a34:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2a38:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a3c:	2f534f43 	svccs	0x00534f43
    2a40:	4f636950 	svcmi	0x00636950
    2a44:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    2a48:	2f656d6f 	svccs	0x00656d6f
    2a4c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2a50:	442f6e69 	strtmi	r6, [pc], #-3689	; 2a58 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x18>
    2a54:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2a58:	4f2f706f 	svcmi	0x002f706f
    2a5c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2a60:	502f5445 	eorpl	r5, pc, r5, asr #8
    2a64:	534f4349 	movtpl	r4, #62281	; 0xf349
    2a68:	6369502f 	cmnvs	r9, #47	; 0x2f
    2a6c:	6b2f534f 	blvs	bd77b0 <__ccfg+0xbb7808>
    2a70:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2a74:	7400006c 	strvc	r0, [r0], #-108	; 0xffffff94
    2a78:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
    2a7c:	00000100 	andeq	r0, r0, r0, lsl #2
    2a80:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2a84:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2a88:	00000200 	andeq	r0, r0, r0, lsl #4
    2a8c:	61647473 	smcvs	18243	; 0x4743
    2a90:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    2a94:	00000200 	andeq	r0, r0, r0, lsl #4
    2a98:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    2a9c:	0300682e 	movweq	r6, #2094	; 0x82e
    2aa0:	616d0000 	cmnvs	sp, r0
    2aa4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    2aa8:	00000300 	andeq	r0, r0, r0, lsl #6
    2aac:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    2ab0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2ab4:	0300682e 	movweq	r6, #2094	; 0x82e
    2ab8:	75620000 	strbvc	r0, [r2, #-0]!
    2abc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    2ac0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2ac4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2ac8:	73000003 	movwvc	r0, #3
    2acc:	6f697379 	svcvs	0x00697379
    2ad0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    2ad4:	63740000 	cmnvs	r4, #0
    2ad8:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
    2adc:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    2ae0:	00000100 	andeq	r0, r0, r0, lsl #2
    2ae4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    2ae8:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    2aec:	00000500 	andeq	r0, r0, r0, lsl #10
    2af0:	70766374 	rsbsvc	r6, r6, r4, ror r3
    2af4:	2e737968 	vsubcs.f16	s15, s6, s17	; <UNPREDICTABLE>
    2af8:	00010068 	andeq	r0, r1, r8, rrx
    2afc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2b00:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 2b08 <NOROM_ChipInfo_GetHwRevision+0x4>
    2b04:	61645f65 	cmnvs	r4, r5, ror #30
    2b08:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    2b0c:	00000100 	andeq	r0, r0, r0, lsl #2
    2b10:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    2b14:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    2b18:	00003e6e 	andeq	r3, r0, lr, ror #28
    2b1c:	05000000 	streq	r0, [r0, #-0]
    2b20:	02050031 	andeq	r0, r5, #49	; 0x31
    2b24:	00000000 	andeq	r0, r0, r0
    2b28:	01029303 	tsteq	r2, r3, lsl #6
    2b2c:	13170205 	tstne	r7, #1342177280	; 0x50000000
    2b30:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2b34:	20017803 	andcs	r7, r1, r3, lsl #16
    2b38:	05260705 	streq	r0, [r6, #-1797]!	; 0xfffff8fb
    2b3c:	05052216 	streq	r2, [r5, #-534]	; 0xfffffdea
    2b40:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2b44:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    2b48:	1f0e0513 	svcne	0x000e0513
    2b4c:	21060205 	tstcs	r6, r5, lsl #4
    2b50:	01061a05 	tsteq	r6, r5, lsl #20
    2b54:	03060205 	movweq	r0, #25093	; 0x6205
    2b58:	0105200c 	tsteq	r5, ip
    2b5c:	01021606 	tsteq	r2, r6, lsl #12
    2b60:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b64:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2b68:	00000000 	andeq	r0, r0, r0
    2b6c:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    2b70:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2b74:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2b78:	03052005 	movweq	r2, #20485	; 0x5005
    2b7c:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
    2b80:	1c050106 	stfnes	f0, [r5], {6}
    2b84:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2b88:	06290521 	strteq	r0, [r9], -r1, lsr #10
    2b8c:	201c0501 	andscs	r0, ip, r1, lsl #10
    2b90:	21060305 	tstcs	r6, r5, lsl #6
    2b94:	01061a05 	tsteq	r6, r5, lsl #20
    2b98:	024c0105 	subeq	r0, ip, #1073741825	; 0x40000001
    2b9c:	01010001 	tsteq	r1, r1
    2ba0:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2ba4:	00000002 	andeq	r0, r0, r2
    2ba8:	02830300 	addeq	r0, r3, #0, 6
    2bac:	16020501 	strne	r0, [r2], -r1, lsl #10
    2bb0:	0e062e05 	cdpeq	14, 0, cr2, cr6, cr5, {0}
    2bb4:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2bb8:	1301012f 	movwne	r0, #4399	; 0x112f
    2bbc:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    2bc0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2bc4:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    2bc8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2bcc:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2bd0:	00000000 	andeq	r0, r0, r0
    2bd4:	0101a703 	tsteq	r1, r3, lsl #14
    2bd8:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    2bdc:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    2be0:	01240602 			; <UNDEFINED> instruction: 0x01240602
    2be4:	1c063a05 			; <UNDEFINED> instruction: 0x1c063a05
    2be8:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2bec:	05134a20 	ldreq	r4, [r3, #-2592]	; 0xfffff5e0
    2bf0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2bf4:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    2bf8:	06052f02 	streq	r2, [r5], -r2, lsl #30
    2bfc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2c00:	06030520 	streq	r0, [r3], -r0, lsr #10
    2c04:	06170530 			; <UNDEFINED> instruction: 0x06170530
    2c08:	21140501 	tstcs	r4, r1, lsl #10
    2c0c:	2f060305 	svccs	0x00060305
    2c10:	01060405 	tsteq	r6, r5, lsl #8
    2c14:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    2c18:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c1c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2c20:	05280602 	streq	r0, [r8, #-1538]!	; 0xfffff9fe
    2c24:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    2c28:	03054b01 	movweq	r4, #23297	; 0x5b01
    2c2c:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    2c30:	01061405 	tsteq	r6, r5, lsl #8
    2c34:	21060305 	tstcs	r6, r5, lsl #6
    2c38:	01061705 	tsteq	r6, r5, lsl #14
    2c3c:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
    2c40:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c44:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2c48:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c4c:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    2c50:	01010005 	tsteq	r1, r5
    2c54:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2c58:	00000002 	andeq	r0, r0, r2
    2c5c:	01df0300 	bicseq	r0, pc, r0, lsl #6
    2c60:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    2c64:	09030602 	stmdbeq	r3, {r1, r9, sl}
    2c68:	04053020 	streq	r3, [r5], #-32	; 0xffffffe0
    2c6c:	061b0584 	ldreq	r0, [fp], -r4, lsl #11
    2c70:	06040501 	streq	r0, [r4], -r1, lsl #10
    2c74:	5806014c 	stmdapl	r6, {r2, r3, r6, r8}
    2c78:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
    2c7c:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
    2c80:	06010513 			; <UNDEFINED> instruction: 0x06010513
    2c84:	05201203 	streq	r1, [r0, #-515]!	; 0xfffffdfd
    2c88:	2e750304 	cdpcs	3, 7, cr0, cr5, cr4, {0}
    2c8c:	1b052b06 	blne	14d8ac <__ccfg+0x12d904>
    2c90:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2c94:	90014c06 	andls	r4, r1, r6, lsl #24
    2c98:	055b132e 	ldrbeq	r1, [fp, #-814]	; 0xfffffcd2
    2c9c:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    2ca0:	2e780304 	cdpcs	3, 7, cr0, cr8, cr4, {0}
    2ca4:	02360105 	eorseq	r0, r6, #1073741825	; 0x40000001
    2ca8:	0101000c 	tsteq	r1, ip
    2cac:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    2cb0:	00000002 	andeq	r0, r0, r2
    2cb4:	02ba0300 	adcseq	r0, sl, #0, 6
    2cb8:	18020501 	stmdane	r2, {r0, r8, sl}
    2cbc:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2cc0:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    2cc4:	20090306 	andcs	r0, r9, r6, lsl #6
    2cc8:	052d0405 	streq	r0, [sp, #-1029]!	; 0xfffffbfb
    2ccc:	052f0602 	streq	r0, [pc, #-1538]!	; 26d2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x2>
    2cd0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2cd4:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    2cd8:	4a066606 	bmi	19c4f8 <__ccfg+0x17c550>
    2cdc:	3b062106 	blcc	18b0fc <__ccfg+0x16b154>
    2ce0:	66060113 			; <UNDEFINED> instruction: 0x66060113
    2ce4:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2ce8:	06010513 			; <UNDEFINED> instruction: 0x06010513
    2cec:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2cf0:	2e770303 	cdpcs	3, 7, cr0, cr7, cr3, {0}
    2cf4:	01053606 	tsteq	r5, r6, lsl #12
    2cf8:	03052106 	movweq	r2, #20742	; 0x5106
    2cfc:	000b022d 	andeq	r0, fp, sp, lsr #4
    2d00:	4a050101 	bmi	14310c <__ccfg+0x123164>
    2d04:	00020500 	andeq	r0, r2, r0, lsl #10
    2d08:	03000000 	movweq	r0, #0
    2d0c:	050103f5 	streq	r0, [r1, #-1013]	; 0xfffffc0b
    2d10:	13131402 	tstne	r3, #33554432	; 0x2000000
    2d14:	4a051314 	bmi	14796c <__ccfg+0x1279c4>
    2d18:	01790306 	cmneq	r9, r6, lsl #6
    2d1c:	0305053c 	movweq	r0, #21820	; 0x553c
    2d20:	4a053c0b 	bmi	151d54 <__ccfg+0x131dac>
    2d24:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    2d28:	24062702 	strcs	r2, [r6], #-1794	; 0xfffff8fe
    2d2c:	01060505 	tsteq	r6, r5, lsl #10
    2d30:	05203005 	streq	r3, [r0, #-5]!
    2d34:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    2d38:	3c30053d 	cfldr32cc	mvfx0, [r0], #-244	; 0xffffff0c
    2d3c:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2d40:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    2d44:	15030603 	strne	r0, [r3, #-1539]	; 0xfffff9fd
    2d48:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2d4c:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    2d50:	12051713 	andne	r1, r5, #4980736	; 0x4c0000
    2d54:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d58:	0f057606 	svceq	0x00057606
    2d5c:	060a0501 	streq	r0, [sl], -r1, lsl #10
    2d60:	06030520 	streq	r0, [r3], -r0, lsr #10
    2d64:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    2d68:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2d6c:	1f062205 	svcne	0x00062205
    2d70:	01062405 	tsteq	r6, r5, lsl #8
    2d74:	20060f05 	andcs	r0, r6, r5, lsl #30
    2d78:	01060205 	tsteq	r6, r5, lsl #4
    2d7c:	05330a05 	ldreq	r0, [r3, #-2565]!	; 0xfffff5fb
    2d80:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    2d84:	03060205 	movweq	r0, #25093	; 0x6205
    2d88:	1a056673 	bne	15c75c <__ccfg+0x13c7b4>
    2d8c:	13051506 	movwne	r1, #21766	; 0x5506
    2d90:	06020539 			; <UNDEFINED> instruction: 0x06020539
    2d94:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
    2d98:	1e020514 	mcrne	5, 0, r0, cr2, cr4, {0}
    2d9c:	14132f06 	ldrne	r2, [r3], #-3846	; 0xfffff0fa
    2da0:	143c4a01 	ldrtne	r4, [ip], #-2561	; 0xfffff5ff
    2da4:	01060605 	tsteq	r6, r5, lsl #12
    2da8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2dac:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2db0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2db4:	052f0602 	streq	r0, [pc, #-1538]!	; 27ba <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xea>
    2db8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2dbc:	6d030602 	stcvs	6, cr0, [r3, #-8]
    2dc0:	13051520 	movwne	r1, #21792	; 0x5520
    2dc4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dc8:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    2dcc:	03050106 	movweq	r0, #20742	; 0x5106
    2dd0:	10023d06 	andne	r3, r2, r6, lsl #26
    2dd4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2dd8:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2ddc:	00000000 	andeq	r0, r0, r0
    2de0:	0104a803 	tsteq	r4, r3, lsl #16
    2de4:	13140205 	tstne	r4, #1342177280	; 0x50000000
    2de8:	3a050114 	bcc	143240 <__ccfg+0x123298>
    2dec:	05201b06 	streq	r1, [r0, #-2822]!	; 0xfffff4fa
    2df0:	06202502 	strteq	r2, [r0], -r2, lsl #10
    2df4:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2df8:	143c7903 	ldrtne	r7, [ip], #-2307	; 0xfffff6fd
    2dfc:	06011514 			; <UNDEFINED> instruction: 0x06011514
    2e00:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
    2e04:	0605142e 	streq	r1, [r5], -lr, lsr #8
    2e08:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2e0c:	300a052e 	andcc	r0, sl, lr, lsr #10
    2e10:	41060305 	tstmi	r6, r5, lsl #6
    2e14:	2b080513 	blcs	204268 <__ccfg+0x1e42c0>
    2e18:	01060a05 	tsteq	r6, r5, lsl #20
    2e1c:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2e20:	3d330602 	ldccc	6, cr0, [r3, #-8]!
    2e24:	01061305 	tsteq	r6, r5, lsl #6
    2e28:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    2e2c:	13060105 	movwne	r0, #24837	; 0x6105
    2e30:	01000b02 	tsteq	r0, r2, lsl #22
    2e34:	00430501 	subeq	r0, r3, r1, lsl #10
    2e38:	00000205 	andeq	r0, r0, r5, lsl #4
    2e3c:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    2e40:	02050104 	andeq	r0, r5, #4, 2
    2e44:	06050516 			; <UNDEFINED> instruction: 0x06050516
    2e48:	2f0f0501 	svccs	0x000f0501
    2e4c:	053b2605 	ldreq	r2, [fp, #-1541]!	; 0xfffff9fb
    2e50:	0205211d 	andeq	r2, r5, #1073741831	; 0x40000007
    2e54:	10053106 	andne	r3, r5, r6, lsl #2
    2e58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2e5c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2e60:	0a050106 	beq	143280 <__ccfg+0x1232d8>
    2e64:	3201052b 	andcc	r0, r1, #180355072	; 0xac00000
    2e68:	01000402 	tsteq	r0, r2, lsl #8
    2e6c:	003c0501 	eorseq	r0, ip, r1, lsl #10
    2e70:	00000205 	andeq	r0, r0, r5, lsl #4
    2e74:	d5030000 	strle	r0, [r3, #-0]
    2e78:	02050104 	andeq	r0, r5, #4, 2
    2e7c:	14131319 	ldrne	r1, [r3], #-793	; 0xfffffce7
    2e80:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    2e84:	20207503 	eorcs	r7, r0, r3, lsl #10
    2e88:	0b030205 	bleq	c36a4 <__ccfg+0xa36fc>
    2e8c:	4a062020 	bmi	18af14 <__ccfg+0x16af6c>
    2e90:	20130306 	andscs	r0, r3, r6, lsl #6
    2e94:	3c6d0306 	stclcc	3, cr0, [sp], #-24	; 0xffffffe8
    2e98:	04051314 	streq	r1, [r5], #-788	; 0xfffffcec
    2e9c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2ea0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2ea4:	03050106 	movweq	r0, #20742	; 0x5106
    2ea8:	06053006 	streq	r3, [r5], -r6
    2eac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2eb0:	053d4b06 	ldreq	r4, [sp, #-2822]!	; 0xfffff4fa
    2eb4:	013d3302 	teqeq	sp, r2, lsl #6
    2eb8:	14061501 	strne	r1, [r6], #-1281	; 0xfffffaff
    2ebc:	051e0405 	ldreq	r0, [lr, #-1029]	; 0xfffffbfb
    2ec0:	01300602 	teqeq	r0, r2, lsl #12
    2ec4:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    2ec8:	3e132e2e 	cdpcc	14, 1, cr2, cr3, cr14, {1}
    2ecc:	13062205 	movwne	r2, #25093	; 0x6205
    2ed0:	05571505 	ldrbeq	r1, [r7, #-1285]	; 0xfffffafb
    2ed4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    2ed8:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2edc:	2e70030a 	cdpcs	3, 7, cr0, cr0, cr10, {0}
    2ee0:	01000b02 	tsteq	r0, r2, lsl #22
    2ee4:	00380501 	eorseq	r0, r8, r1, lsl #10
    2ee8:	00000205 	andeq	r0, r0, r5, lsl #4
    2eec:	fc030000 	stc2	0, cr0, [r3], {-0}
    2ef0:	02050104 	andeq	r0, r5, #4, 2
    2ef4:	13131316 	tstne	r3, #1476395008	; 0x58000000
    2ef8:	38050114 	stmdacc	r5, {r2, r4, r8}
    2efc:	20770306 	rsbscs	r0, r7, r6, lsl #6
    2f00:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2f04:	4a062020 	bmi	18af8c <__ccfg+0x16afe4>
    2f08:	03060305 	movweq	r0, #25349	; 0x6305
    2f0c:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    2f10:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2f14:	1a051414 	bne	147f6c <__ccfg+0x127fc4>
    2f18:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2f1c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f20:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    2f24:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    2f28:	20050501 	andcs	r0, r5, r1, lsl #10
    2f2c:	03060305 	movweq	r0, #25349	; 0x6305
    2f30:	0505200a 	streq	r2, [r5, #-10]
    2f34:	01750306 	cmneq	r5, r6, lsl #6
    2f38:	0b030a05 	bleq	c5754 <__ccfg+0xa57ac>
    2f3c:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    2f40:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f44:	06040501 	streq	r0, [r4], -r1, lsl #10
    2f48:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    2f4c:	21060511 	tstcs	r6, r1, lsl r5
    2f50:	1f062a05 	svcne	0x00062a05
    2f54:	6f030905 	svcvs	0x00030905
    2f58:	06210520 	strteq	r0, [r1], -r0, lsr #10
    2f5c:	200c0501 	andcs	r0, ip, r1, lsl #10
    2f60:	2f060305 	svccs	0x00060305
    2f64:	01062005 	tsteq	r6, r5
    2f68:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2f6c:	06052020 	streq	r2, [r5], -r0, lsr #32
    2f70:	06020520 	streq	r0, [r2], -r0, lsr #10
    2f74:	05051333 	streq	r1, [r5, #-819]	; 0xfffffccd
    2f78:	03050106 	movweq	r0, #20742	; 0x5106
    2f7c:	05422a06 	strbeq	r2, [r2, #-2566]	; 0xfffff5fa
    2f80:	050f0605 	streq	r0, [pc, #-1541]	; 2983 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x163>
    2f84:	1a05230a 	bne	14bbb4 <__ccfg+0x12bc0c>
    2f88:	03052006 	movweq	r2, #20486	; 0x5006
    2f8c:	01050106 	tsteq	r5, r6, lsl #2
    2f90:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    2f94:	74030604 	strvc	r0, [r3], #-1540	; 0xfffff9fc
    2f98:	06080520 	streq	r0, [r8], -r0, lsr #10
    2f9c:	20070501 	andcs	r0, r7, r1, lsl #10
    2fa0:	2f060505 	svccs	0x00060505
    2fa4:	10062c05 	andne	r2, r6, r5, lsl #24
    2fa8:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    2fac:	021e062a 	andseq	r0, lr, #44040192	; 0x2a00000
    2fb0:	0101000a 	tsteq	r1, sl
    2fb4:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2fb8:	00000002 	andeq	r0, r0, r2
    2fbc:	05a30300 	streq	r0, [r3, #768]!	; 0x300
    2fc0:	16020501 	strne	r0, [r2], -r1, lsl #10
    2fc4:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2fc8:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2fcc:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2fd0:	20090302 	andcs	r0, r9, r2, lsl #6
    2fd4:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2fd8:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2fdc:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2fe0:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2fe4:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2fe8:	20050501 	andcs	r0, r5, r1, lsl #10
    2fec:	2f060305 	svccs	0x00060305
    2ff0:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
    2ff4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2ff8:	3805201b 	stmdacc	r5, {r0, r1, r3, r4, sp}
    2ffc:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    3000:	b3030603 	movwlt	r0, #13827	; 0x3603
    3004:	0505207c 	streq	r2, [r5, #-124]	; 0xffffff84
    3008:	03050106 	movweq	r0, #20742	; 0x5106
    300c:	06052106 	streq	r2, [r5], -r6, lsl #2
    3010:	03050106 	movweq	r0, #20742	; 0x5106
    3014:	11053106 	tstne	r5, r6, lsl #2
    3018:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    301c:	060f0501 	streq	r0, [pc], -r1, lsl #10
    3020:	06050520 	streq	r0, [r5], -r0, lsr #10
    3024:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3028:	2003dc03 	andcs	sp, r3, r3, lsl #24
    302c:	01062105 	tsteq	r6, r5, lsl #2
    3030:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    3034:	052f0603 	streq	r0, [pc, #-1539]!	; 2a39 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x219>
    3038:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    303c:	20052006 	andcs	r2, r5, r6
    3040:	20060520 	andcs	r0, r6, r0, lsr #10
    3044:	33060205 	movwcc	r0, #25093	; 0x6205
    3048:	01061b05 	tsteq	r6, r5, lsl #22
    304c:	2b060305 	blcs	183c68 <__ccfg+0x163cc0>
    3050:	03060105 	movweq	r0, #24837	; 0x6105
    3054:	02053c0a 	andeq	r3, r5, #2560	; 0xa00
    3058:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    305c:	19050106 	stmdbne	r5, {r1, r2, r8}
    3060:	02052006 	andeq	r2, r5, #6
    3064:	01050106 	tsteq	r5, r6, lsl #2
    3068:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    306c:	77030603 	strvc	r0, [r3, -r3, lsl #12]
    3070:	061e052e 	ldreq	r0, [lr], -lr, lsr #10
    3074:	20060501 	andcs	r0, r6, r1, lsl #10
    3078:	30060405 	andcc	r0, r6, r5, lsl #8
    307c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3080:	06040501 	streq	r0, [r4], -r1, lsl #10
    3084:	1b290521 	blne	a44510 <__ccfg+0xa24568>
    3088:	01062b05 	tsteq	r6, r5, lsl #22
    308c:	01000a02 	tsteq	r0, r2, lsl #20
    3090:	00160501 	andseq	r0, r6, r1, lsl #10
    3094:	00000205 	andeq	r0, r0, r5, lsl #4
    3098:	cd030000 	stcgt	0, cr0, [r3, #-0]
    309c:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    30a0:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    30a4:	16050114 			; <UNDEFINED> instruction: 0x16050114
    30a8:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    30ac:	42020520 	andmi	r0, r2, #32, 10	; 0x8000000
    30b0:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    30b4:	14380624 	ldrtne	r0, [r8], #-1572	; 0xfffff9dc
    30b8:	58060114 	stmdapl	r6, {r2, r4, r8}
    30bc:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    30c0:	060e0516 			; <UNDEFINED> instruction: 0x060e0516
    30c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    30c8:	060d052f 	streq	r0, [sp], -pc, lsr #10
    30cc:	1e0e0514 	mcrne	5, 0, r0, cr14, cr4, {0}
    30d0:	30060205 	andcc	r0, r6, r5, lsl #4
    30d4:	01060d05 	tsteq	r6, r5, lsl #26
    30d8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    30dc:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    30e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    30e4:	01054e0a 	tsteq	r5, sl, lsl #28
    30e8:	05202103 	streq	r2, [r0, #-259]!	; 0xfffffefd
    30ec:	5c030604 	stcpl	6, cr0, [r3], {4}
    30f0:	17033d2e 	strne	r3, [r3, -lr, lsr #26]
    30f4:	03020501 	movweq	r0, #9473	; 0x2501
    30f8:	3c012e6e 	stccc	14, cr2, [r1], {110}	; 0x6e
    30fc:	010b032e 	tsteq	fp, lr, lsr #6
    3100:	01060b05 	tsteq	r6, r5, lsl #22
    3104:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    3108:	0505200b 	streq	r2, [r5, #-11]
    310c:	06030558 			; <UNDEFINED> instruction: 0x06030558
    3110:	06060522 	streq	r0, [r6], -r2, lsr #10
    3114:	06040501 	streq	r0, [r4], -r1, lsl #10
    3118:	5002054e 	andpl	r0, r2, lr, asr #10
    311c:	01061005 	tsteq	r6, r5
    3120:	2f060205 	svccs	0x00060205
    3124:	01060505 	tsteq	r6, r5, lsl #10
    3128:	21060305 	tstcs	r6, r5, lsl #6
    312c:	01061a05 	tsteq	r6, r5, lsl #20
    3130:	4b060205 	blmi	18394c <__ccfg+0x1639a4>
    3134:	01061b05 	tsteq	r6, r5, lsl #22
    3138:	1f2f1505 	svcne	0x002f1505
    313c:	21060205 	tstcs	r6, r5, lsl #4
    3140:	06090514 			; <UNDEFINED> instruction: 0x06090514
    3144:	000c0201 	andeq	r0, ip, r1, lsl #4
    3148:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    314c:	00020500 	andeq	r0, r2, r0, lsl #10
    3150:	03000000 	movweq	r0, #0
    3154:	05010687 	streq	r0, [r1, #-1671]	; 0xfffff979
    3158:	44051602 	strmi	r1, [r5], #-1538	; 0xfffff9fe
    315c:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    3160:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    3164:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3168:	2e7a0344 	cdpcs	3, 7, cr0, cr10, cr4, {2}
    316c:	03060205 	movweq	r0, #25093	; 0x6205
    3170:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    3174:	03050106 	movweq	r0, #20742	; 0x5106
    3178:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    317c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3180:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
    3184:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3188:	055b0602 	ldrbeq	r0, [fp, #-1538]	; 0xfffff9fe
    318c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3190:	01010002 	tsteq	r1, r2
    3194:	05004b05 	streq	r4, [r0, #-2821]	; 0xfffff4fb
    3198:	00000002 	andeq	r0, r0, r2
    319c:	06990300 	ldreq	r0, [r9], r0, lsl #6
    31a0:	16020501 	strne	r0, [r2], -r1, lsl #10
    31a4:	064b0514 			; <UNDEFINED> instruction: 0x064b0514
    31a8:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    31ac:	4b05261a 	blmi	14ca1c <__ccfg+0x12ca74>
    31b0:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    31b4:	09030602 	stmdbeq	r3, {r1, r9, sl}
    31b8:	0605054a 	streq	r0, [r5], -sl, asr #10
    31bc:	06030501 	streq	r0, [r3], -r1, lsl #10
    31c0:	1605672f 	strne	r6, [r5], -pc, lsr #14
    31c4:	03050106 	movweq	r0, #20742	; 0x5106
    31c8:	16056706 	strne	r6, [r5], -r6, lsl #14
    31cc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    31d0:	01055a06 	tsteq	r5, r6, lsl #20
    31d4:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    31d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    31dc:	02050031 	andeq	r0, r5, #49	; 0x31
    31e0:	00000000 	andeq	r0, r0, r0
    31e4:	0106aa03 	tsteq	r6, r3, lsl #20
    31e8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    31ec:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    31f0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    31f4:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    31f8:	01010001 	tsteq	r1, r1
    31fc:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    3200:	00000002 	andeq	r0, r0, r2
    3204:	06d10300 	ldrbeq	r0, [r1], r0, lsl #6
    3208:	06020501 	streq	r0, [r2], -r1, lsl #10
    320c:	1c480524 	cfstr64ne	mvdx0, [r8], {36}	; 0x24
    3210:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3214:	06480501 	strbeq	r0, [r8], -r1, lsl #10
    3218:	0205200e 	andeq	r2, r5, #14
    321c:	4a062024 	bmi	18b2b4 <__ccfg+0x16b30c>
    3220:	0105134a 	tsteq	r5, sl, asr #6
    3224:	13051306 	movwne	r1, #21254	; 0x5306
    3228:	0006022d 	andeq	r0, r6, sp, lsr #4
    322c:	46050101 	strmi	r0, [r5], -r1, lsl #2
    3230:	00020500 	andeq	r0, r2, r0, lsl #10
    3234:	03000000 	movweq	r0, #0
    3238:	050106b2 	streq	r0, [r1, #-1714]	; 0xfffff94e
    323c:	46051702 	strmi	r1, [r5], -r2, lsl #14
    3240:	05050d06 	streq	r0, [r5, #-3334]	; 0xfffff2fa
    3244:	06030525 	streq	r0, [r3], -r5, lsr #10
    3248:	0606052f 	streq	r0, [r6], -pc, lsr #10
    324c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3250:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3254:	06040501 	streq	r0, [r4], -r1, lsl #10
    3258:	0705132f 	streq	r1, [r5, -pc, lsr #6]
    325c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3260:	0b053006 	bleq	14f280 <__ccfg+0x12f2d8>
    3264:	07050106 	streq	r0, [r5, -r6, lsl #2]
    3268:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    326c:	060c0522 	streq	r0, [ip], -r2, lsr #10
    3270:	03010501 	movweq	r0, #5377	; 0x1501
    3274:	03052009 	movweq	r2, #20489	; 0x5009
    3278:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    327c:	01060605 	tsteq	r6, r5, lsl #12
    3280:	30060305 	andcc	r0, r6, r5, lsl #6
    3284:	01061305 	tsteq	r6, r5, lsl #6
    3288:	4c060205 	sfmmi	f0, 4, [r6], {5}
    328c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3290:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3294:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
    3298:	09052101 	stmdbeq	r5, {r0, r8, sp}
    329c:	030b052d 	movweq	r0, #46381	; 0xb52d
    32a0:	0b023c71 	bleq	9246c <__ccfg+0x724c4>
    32a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    32a8:	0205003d 	andeq	r0, r5, #61	; 0x3d
    32ac:	00000000 	andeq	r0, r0, r0
    32b0:	0106d903 	tsteq	r6, r3, lsl #18
    32b4:	01160205 	tsteq	r6, r5, lsl #4
    32b8:	1c063d05 	stcne	13, cr3, [r6], {5}
    32bc:	20240205 	eorcs	r0, r4, r5, lsl #4
    32c0:	134a4a06 	movtne	r4, #43526	; 0xaa06
    32c4:	01062505 	tsteq	r6, r5, lsl #10
    32c8:	67060205 	strvs	r0, [r6, -r5, lsl #4]
    32cc:	01064305 	tsteq	r6, r5, lsl #6
    32d0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    32d4:	22052e43 	andcs	r2, r5, #1072	; 0x430
    32d8:	4b01052e 	blmi	44798 <__ccfg+0x247f0>
    32dc:	01000502 	tsteq	r0, r2, lsl #10
    32e0:	003d0501 	eorseq	r0, sp, r1, lsl #10
    32e4:	00000205 	andeq	r0, r0, r5, lsl #4
    32e8:	e2030000 	and	r0, r3, #0
    32ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32f0:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    32f4:	02051c06 	andeq	r1, r5, #1536	; 0x600
    32f8:	4a062024 	bmi	18b390 <__ccfg+0x16b3e8>
    32fc:	2205134a 	andcs	r1, r5, #671088641	; 0x28000001
    3300:	01050106 	tsteq	r5, r6, lsl #2
    3304:	00050267 	andeq	r0, r5, r7, ror #4
    3308:	40050101 	andmi	r0, r5, r1, lsl #2
    330c:	00020500 	andeq	r0, r2, r0, lsl #10
    3310:	03000000 	movweq	r0, #0
    3314:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    3318:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    331c:	7a030640 	bvc	c4c24 <__ccfg+0xa4c7c>
    3320:	0c052001 	stceq	0, cr2, [r5], {1}
    3324:	03400526 	movteq	r0, #1318	; 0x526
    3328:	0c052e7a 	stceq	14, cr2, [r5], {122}	; 0x7a
    332c:	2e050526 	cfsh32cs	mvfx0, mvfx5, #22
    3330:	33060205 	movwcc	r0, #25093	; 0x6205
    3334:	06110584 	ldreq	r0, [r1], -r4, lsl #11
    3338:	31020501 	tstcc	r2, r1, lsl #10
    333c:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
    3340:	13210602 			; <UNDEFINED> instruction: 0x13210602
    3344:	11061a05 	tstne	r6, r5, lsl #20
    3348:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    334c:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    3350:	21010501 	tstcs	r1, r1, lsl #10
    3354:	01000202 	tsteq	r0, r2, lsl #4
    3358:	003e0501 	eorseq	r0, lr, r1, lsl #10
    335c:	00000205 	andeq	r0, r0, r5, lsl #4
    3360:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3364:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3368:	00030216 	andeq	r0, r3, r6, lsl r2
    336c:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    3370:	00020500 	andeq	r0, r2, r0, lsl #10
    3374:	03000000 	movweq	r0, #0
    3378:	05010785 	streq	r0, [r1, #-1925]	; 0xfffff87b
    337c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3380:	7a030645 	bvc	c4c9c <__ccfg+0xa4cf4>
    3384:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    3388:	06030526 	streq	r0, [r3], -r6, lsr #10
    338c:	06060531 			; <UNDEFINED> instruction: 0x06060531
    3390:	06040501 	streq	r0, [r4], -r1, lsl #10
    3394:	0603052f 	streq	r0, [r3], -pc, lsr #10
    3398:	012e062f 			; <UNDEFINED> instruction: 0x012e062f
    339c:	4a062e06 	bmi	18ebbc <__ccfg+0x16ec14>
    33a0:	011d033c 	tsteq	sp, ip, lsr r3
    33a4:	01060c05 	tsteq	r6, r5, lsl #24
    33a8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    33ac:	0105350a 	tsteq	r5, sl, lsl #10
    33b0:	06040527 	streq	r0, [r4], -r7, lsr #10
    33b4:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    33b8:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    33bc:	12053104 	andne	r3, r5, #4, 2
    33c0:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    33c4:	061d0530 			; <UNDEFINED> instruction: 0x061d0530
    33c8:	06040501 	streq	r0, [r4], -r1, lsl #10
    33cc:	0b052f3d 	bleq	14f0c8 <__ccfg+0x12f120>
    33d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33d4:	0b054106 	bleq	1537f4 <__ccfg+0x13384c>
    33d8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    33dc:	0603052e 	streq	r0, [r3], -lr, lsr #10
    33e0:	060a052f 	streq	r0, [sl], -pc, lsr #10
    33e4:	00090201 	andeq	r0, r9, r1, lsl #4
    33e8:	48050101 	stmdami	r5, {r0, r8}
    33ec:	00020500 	andeq	r0, r2, r0, lsl #10
    33f0:	03000000 	movweq	r0, #0
    33f4:	05010986 	streq	r0, [r1, #-2438]	; 0xfffff67a
    33f8:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
    33fc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3400:	20780348 	rsbscs	r0, r8, r8, asr #6
    3404:	28050520 	stmdacs	r5, {r5, r8, sl}
    3408:	05203105 	streq	r3, [r0, #-261]!	; 0xfffffefb
    340c:	03052025 	movweq	r2, #20517	; 0x5025
    3410:	35063d06 	strcc	r3, [r6, #-3334]	; 0xfffff2fa
    3414:	29060205 	stmdbcs	r6, {r0, r2, r9}
    3418:	01061105 	tsteq	r6, r5, lsl #2
    341c:	2f060205 	svccs	0x00060205
    3420:	01061105 	tsteq	r6, r5, lsl #2
    3424:	05222105 	streq	r2, [r2, #-261]!	; 0xfffffefb
    3428:	02051e11 	andeq	r1, r5, #272	; 0x110
    342c:	21053006 	tstcs	r5, r6
    3430:	10050106 	andne	r0, r5, r6, lsl #2
    3434:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3438:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    343c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3440:	3d020521 	cfstr32cc	mvfx0, [r2, #-132]	; 0xffffff7c
    3444:	06010534 			; <UNDEFINED> instruction: 0x06010534
    3448:	000b0213 	andeq	r0, fp, r3, lsl r2
    344c:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3450:	00020500 	andeq	r0, r2, r0, lsl #10
    3454:	03000000 	movweq	r0, #0
    3458:	050109a0 	streq	r0, [r1, #-2464]	; 0xfffff660
    345c:	13131702 	tstne	r3, #524288	; 0x80000
    3460:	44050114 	strmi	r0, [r5], #-276	; 0xfffffeec
    3464:	01770306 	cmneq	r7, r6, lsl #6
    3468:	09030205 	stmdbeq	r3, {r0, r2, r9}
    346c:	0344052e 	movteq	r0, #17710	; 0x452e
    3470:	02052077 	andeq	r2, r5, #119	; 0x77
    3474:	204a0903 	subcs	r0, sl, r3, lsl #18
    3478:	03054a06 	movweq	r4, #23046	; 0x5a06
    347c:	200d0306 	andcs	r0, sp, r6, lsl #6
    3480:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    3484:	05470603 	strbeq	r0, [r7, #-1539]	; 0xfffff9fd
    3488:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    348c:	28053c06 	stmdacs	r5, {r1, r2, sl, fp, ip, sp}
    3490:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3494:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
    3498:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    349c:	2e16030a 	cdpcs	3, 1, cr0, cr6, cr10, {0}
    34a0:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    34a4:	06030520 	streq	r0, [r3], -r0, lsr #10
    34a8:	013c6703 	teqeq	ip, r3, lsl #14
    34ac:	05132e58 	ldreq	r2, [r3, #-3672]	; 0xfffff1a8
    34b0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    34b4:	02057406 	andeq	r7, r5, #100663296	; 0x6000000
    34b8:	05054206 	streq	r4, [r5, #-518]	; 0xfffffdfa
    34bc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    34c0:	0c053606 	stceq	6, cr3, [r5], {6}
    34c4:	16050106 	strne	r0, [r5], -r6, lsl #2
    34c8:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    34cc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    34d0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    34d4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    34d8:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    34dc:	05683206 	strbeq	r3, [r8, #-518]!	; 0xfffffdfa
    34e0:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    34e4:	0101000a 	tsteq	r1, sl
    34e8:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    34ec:	00000002 	andeq	r0, r0, r2
    34f0:	09d10300 	ldmibeq	r1, {r8, r9}^
    34f4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    34f8:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    34fc:	7803063e 	stmdavc	r3, {r1, r2, r3, r4, r5, r9, sl}
    3500:	28020520 	stmdacs	r2, {r5, r8, sl}
    3504:	4a4a0620 	bmi	1284d8c <__ccfg+0x1264de4>
    3508:	06050514 			; <UNDEFINED> instruction: 0x06050514
    350c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3510:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3514:	06020501 	streq	r0, [r2], -r1, lsl #10
    3518:	06050521 	streq	r0, [r5], -r1, lsr #10
    351c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3520:	060a0533 			; <UNDEFINED> instruction: 0x060a0533
    3524:	06020501 	streq	r0, [r2], -r1, lsl #10
    3528:	01012f2f 	tsteq	r1, pc, lsr #30
    352c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3530:	21010501 	tstcs	r1, r1, lsl #10
    3534:	79030a05 	stmdbvc	r3, {r0, r2, r9, fp}
    3538:	00090220 	andeq	r0, r9, r0, lsr #4
    353c:	34050101 	strcc	r0, [r5], #-257	; 0xfffffeff
    3540:	00020500 	andeq	r0, r2, r0, lsl #10
    3544:	03000000 	movweq	r0, #0
    3548:	050109e8 	streq	r0, [r1, #-2536]	; 0xfffff618
    354c:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    3550:	06340501 	ldrteq	r0, [r4], -r1, lsl #10
    3554:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    3558:	06202702 	strteq	r2, [r0], -r2, lsl #14
    355c:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3560:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3564:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3568:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    356c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3570:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3574:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3578:	0510060a 	ldreq	r0, [r0, #-1546]	; 0xfffff9f6
    357c:	01053009 	tsteq	r5, r9
    3580:	00070221 	andeq	r0, r7, r1, lsr #4
    3584:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    3588:	00020500 	andeq	r0, r2, r0, lsl #10
    358c:	03000000 	movweq	r0, #0
    3590:	050109f9 	streq	r0, [r1, #-2553]	; 0xfffff607
    3594:	35051602 	strcc	r1, [r5, #-1538]	; 0xfffff9fe
    3598:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    359c:	2c0c0526 	cfstr32cs	mvfx0, [ip], {38}	; 0x26
    35a0:	30060205 	andcc	r0, r6, r5, lsl #4
    35a4:	4a4a0601 	bmi	1284db0 <__ccfg+0x1264e08>
    35a8:	134a2e06 	movtne	r2, #44550	; 0xae06
    35ac:	3e060105 	adfccs	f0, f6, f5
    35b0:	022c0205 	eoreq	r0, ip, #1342177280	; 0x50000000
    35b4:	01010006 	tsteq	r1, r6
    35b8:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
    35bc:	00000002 	andeq	r0, r0, r2
    35c0:	0a840300 	beq	fe1041c8 <_estack+0xde0ff1c8>
    35c4:	16020501 	strne	r0, [r2], -r1, lsl #10
    35c8:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    35cc:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    35d0:	4a4a0620 	bmi	1284e58 <__ccfg+0x1264eb0>
    35d4:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    35d8:	0177cc03 	cmneq	r7, r3, lsl #24
    35dc:	b4030905 	strlt	r0, [r3], #-2309	; 0xfffff6fb
    35e0:	02052008 	andeq	r2, r5, #8
    35e4:	77c90306 	strbvc	r0, [r9, r6, lsl #6]
    35e8:	0514133c 	ldreq	r1, [r4, #-828]	; 0xfffffcc4
    35ec:	05051303 	streq	r1, [r5, #-771]	; 0xfffffcfd
    35f0:	03050106 	movweq	r0, #20742	; 0x5106
    35f4:	06052106 	streq	r2, [r5], -r6, lsl #2
    35f8:	03050106 	movweq	r0, #20742	; 0x5106
    35fc:	11053106 	tstne	r5, r6, lsl #2
    3600:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    3604:	060f0501 	streq	r0, [pc], -r1, lsl #10
    3608:	06050520 	streq	r0, [r5], -r0, lsr #10
    360c:	03010513 	movweq	r0, #5395	; 0x1513
    3610:	022008b4 	eoreq	r0, r0, #180, 16	; 0xb40000
    3614:	01010008 	tsteq	r1, r8
    3618:	05002805 	streq	r2, [r0, #-2053]	; 0xfffff7fb
    361c:	0015e002 	andseq	lr, r5, r2
    3620:	0a8c0300 	beq	fe304228 <_estack+0xde2ff228>
    3624:	03010501 	movweq	r0, #5377	; 0x1501
    3628:	0102011a 	tsteq	r2, sl, lsl r1
    362c:	23010100 	movwcs	r0, #4352	; 0x1100
    3630:	03000001 	movweq	r0, #1
    3634:	00008900 	andeq	r8, r0, r0, lsl #18
    3638:	fb010200 	blx	43e42 <__ccfg+0x23e9a>
    363c:	01000d0e 	tsteq	r0, lr, lsl #26
    3640:	00010101 	andeq	r0, r1, r1, lsl #2
    3644:	00010000 	andeq	r0, r1, r0
    3648:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    364c:	2f656d6f 	svccs	0x00656d6f
    3650:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3654:	442f6e69 	strtmi	r6, [pc], #-3689	; 365c <__exidx_end+0x7e8>
    3658:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    365c:	4f2f706f 	svcmi	0x002f706f
    3660:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3664:	502f5445 	eorpl	r5, pc, r5, asr #8
    3668:	534f4349 	movtpl	r4, #62281	; 0xf349
    366c:	6369502f 	cmnvs	r9, #47	; 0x2f
    3670:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3674:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3678:	752f0058 	strvc	r0, [pc, #-88]!	; 3628 <__exidx_end+0x7b4>
    367c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 34b8 <__exidx_end+0x644>
    3680:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3684:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3688:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    368c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3690:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3694:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3698:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    369c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    36a0:	00006564 	andeq	r6, r0, r4, ror #10
    36a4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    36a8:	5f707574 	svcpl	0x00707574
    36ac:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    36b0:	00010063 	andeq	r0, r1, r3, rrx
    36b4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    36b8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    36bc:	00020068 	andeq	r0, r2, r8, rrx
    36c0:	01050000 	mrseq	r0, (UNDEF: 5)
    36c4:	e2020500 	and	r0, r2, #0, 10
    36c8:	03000015 	movweq	r0, #21
    36cc:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    36d0:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    36d4:	0102100a 	tsteq	r2, sl
    36d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36dc:	02050001 	andeq	r0, r5, #1
    36e0:	000015e4 	andeq	r1, r0, r4, ror #11
    36e4:	01029603 	tsteq	r2, r3, lsl #12
    36e8:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    36ec:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    36f0:	01010001 	tsteq	r1, r1
    36f4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    36f8:	0015e602 	andseq	lr, r5, r2, lsl #12
    36fc:	02a80300 	adceq	r0, r8, #0, 6
    3700:	16050501 	strne	r0, [r5], -r1, lsl #10
    3704:	100a0514 	andne	r0, sl, r4, lsl r5
    3708:	01000102 	tsteq	r0, r2, lsl #2
    370c:	00010501 	andeq	r0, r1, r1, lsl #10
    3710:	15e80205 	strbne	r0, [r8, #517]!	; 0x205
    3714:	d2030000 	andle	r0, r3, #0
    3718:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    371c:	01051713 	tsteq	r5, r3, lsl r7
    3720:	017a0306 	cmneq	sl, r6, lsl #6
    3724:	06260505 	strteq	r0, [r6], -r5, lsl #10
    3728:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    372c:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    3730:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    3734:	06050520 	streq	r0, [r5], -r0, lsr #10
    3738:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    373c:	900d0304 	andls	r0, sp, r4, lsl #6
    3740:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3744:	052f0601 	streq	r0, [pc, #-1537]!	; 314b <__exidx_end+0x2d7>
    3748:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    374c:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    3750:	00100201 	andseq	r0, r0, r1, lsl #4
    3754:	01850101 	orreq	r0, r5, r1, lsl #2
    3758:	00030000 	andeq	r0, r3, r0
    375c:	0000017f 	andeq	r0, r0, pc, ror r1
    3760:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3764:	0101000d 	tsteq	r1, sp
    3768:	00000101 	andeq	r0, r0, r1, lsl #2
    376c:	00000100 	andeq	r0, r0, r0, lsl #2
    3770:	73752f01 	cmnvc	r5, #1, 30
    3774:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3778:	63672f62 	cmnvs	r7, #392	; 0x188
    377c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3780:	6f6e2d6d 	svcvs	0x006e2d6d
    3784:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3788:	2f696261 	svccs	0x00696261
    378c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3790:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3794:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3798:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    379c:	2f656d6f 	svccs	0x00656d6f
    37a0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    37a4:	442f6e69 	strtmi	r6, [pc], #-3689	; 37ac <__exidx_end+0x938>
    37a8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    37ac:	4f2f706f 	svcmi	0x002f706f
    37b0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    37b4:	502f5445 	eorpl	r5, pc, r5, asr #8
    37b8:	534f4349 	movtpl	r4, #62281	; 0xf349
    37bc:	6369502f 	cmnvs	r9, #47	; 0x2f
    37c0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    37c4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    37c8:	43432f58 	movtmi	r2, #16216	; 0x3f58
    37cc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37d0:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    37d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    37d8:	6f682f00 	svcvs	0x00682f00
    37dc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3630 <__exidx_end+0x7bc>
    37e0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37e4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37e8:	6f746b73 	svcvs	0x00746b73
    37ec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37f0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37f4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37f8:	2f534f43 	svccs	0x00534f43
    37fc:	4f636950 	svcmi	0x00636950
    3800:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3804:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3808:	6f682f00 	svcvs	0x00682f00
    380c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3660 <__exidx_end+0x7ec>
    3810:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3814:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3818:	6f746b73 	svcvs	0x00746b73
    381c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3820:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3824:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3828:	2f534f43 	svccs	0x00534f43
    382c:	4f636950 	svcmi	0x00636950
    3830:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3834:	2f656d6f 	svccs	0x00656d6f
    3838:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    383c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3844 <__exidx_end+0x9d0>
    3840:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3844:	4f2f706f 	svcmi	0x002f706f
    3848:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    384c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3850:	534f4349 	movtpl	r4, #62281	; 0xf349
    3854:	6369502f 	cmnvs	r9, #47	; 0x2f
    3858:	6b2f534f 	blvs	bd859c <__ccfg+0xbb85f4>
    385c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3860:	7300006c 	movwvc	r0, #108	; 0x6c
    3864:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3868:	00682e74 	rsbeq	r2, r8, r4, ror lr
    386c:	68000001 	stmdavs	r0, {r0}
    3870:	63635f77 	cmnvs	r3, #476	; 0x1dc
    3874:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    3878:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    387c:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    3880:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3884:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3888:	72610000 	rsbvc	r0, r1, #0
    388c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3890:	00000300 	andeq	r0, r0, r0, lsl #6
    3894:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3898:	0300682e 	movweq	r6, #2094	; 0x82e
    389c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    38a0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    38a4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    38a8:	00000300 	andeq	r0, r0, r0, lsl #6
    38ac:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    38b0:	5f736e6f 	svcpl	0x00736e6f
    38b4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    38b8:	00030068 	andeq	r0, r3, r8, rrx
    38bc:	73797300 	cmnvc	r9, #0, 6
    38c0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    38c4:	00000400 	andeq	r0, r0, r0, lsl #8
    38c8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    38cc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    38d0:	00000500 	andeq	r0, r0, r0, lsl #10
    38d4:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    38d8:	0300632e 	movweq	r6, #814	; 0x32e
    38dc:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    38e0:	03000002 	movweq	r0, #2
    38e4:	0001c000 	andeq	ip, r1, r0
    38e8:	fb010200 	blx	440f2 <__ccfg+0x2414a>
    38ec:	01000d0e 	tsteq	r0, lr, lsl #26
    38f0:	00010101 	andeq	r0, r1, r1, lsl #2
    38f4:	00010000 	andeq	r0, r1, r0
    38f8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    38fc:	2f656d6f 	svccs	0x00656d6f
    3900:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3904:	442f6e69 	strtmi	r6, [pc], #-3689	; 390c <__exidx_end+0xa98>
    3908:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    390c:	4f2f706f 	svcmi	0x002f706f
    3910:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3914:	502f5445 	eorpl	r5, pc, r5, asr #8
    3918:	534f4349 	movtpl	r4, #62281	; 0xf349
    391c:	6369502f 	cmnvs	r9, #47	; 0x2f
    3920:	502f534f 	eorpl	r5, pc, pc, asr #6
    3924:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3928:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    392c:	73726f73 	cmnvc	r2, #460	; 0x1cc
    3930:	6f682f00 	svcvs	0x00682f00
    3934:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3788 <__exidx_end+0x914>
    3938:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    393c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3940:	6f746b73 	svcvs	0x00746b73
    3944:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3948:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    394c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3950:	2f534f43 	svccs	0x00534f43
    3954:	4f636950 	svcmi	0x00636950
    3958:	43432f53 	movtmi	r2, #16211	; 0x3f53
    395c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3960:	6f682f00 	svcvs	0x00682f00
    3964:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 37b8 <__exidx_end+0x944>
    3968:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    396c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3970:	6f746b73 	svcvs	0x00746b73
    3974:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3978:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    397c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3980:	2f534f43 	svccs	0x00534f43
    3984:	4f636950 	svcmi	0x00636950
    3988:	43432f53 	movtmi	r2, #16211	; 0x3f53
    398c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3990:	3143432f 	cmpcc	r3, pc, lsr #6
    3994:	57585833 	smmlarpl	r8, r3, r8, r5
    3998:	2f455241 	svccs	0x00455241
    399c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    39a0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    39a4:	752f0062 	strvc	r0, [pc, #-98]!	; 394a <__exidx_end+0xad6>
    39a8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 37e4 <__exidx_end+0x970>
    39ac:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    39b0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    39b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    39b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    39bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    39c0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    39c4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    39c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    39cc:	2f006564 	svccs	0x00006564
    39d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    39d4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    39d8:	2f6e6974 	svccs	0x006e6974
    39dc:	6b736544 	blvs	1cdcef4 <__ccfg+0x1cbcf4c>
    39e0:	2f706f74 	svccs	0x00706f74
    39e4:	4f534c4f 	svcmi	0x00534c4f
    39e8:	2f54454e 	svccs	0x0054454e
    39ec:	4f434950 	svcmi	0x00434950
    39f0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39f4:	00534f63 	subseq	r4, r3, r3, ror #30
    39f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3944 <__exidx_end+0xad0>
    39fc:	616d2f65 	cmnvs	sp, r5, ror #30
    3a00:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3a04:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3a08:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3a0c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3a10:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3a14:	4349502f 	movtmi	r5, #36911	; 0x902f
    3a18:	502f534f 	eorpl	r5, pc, pc, asr #6
    3a1c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3a20:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3a24:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3a28:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3a2c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    3a30:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    3a34:	00010063 	andeq	r0, r1, r3, rrx
    3a38:	736d6300 	cmnvc	sp, #0, 6
    3a3c:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    3a40:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3a44:	00000200 	andeq	r0, r0, r0, lsl #4
    3a48:	6f697067 	svcvs	0x00697067
    3a4c:	0300682e 	movweq	r6, #2094	; 0x82e
    3a50:	74730000 	ldrbtvc	r0, [r3], #-0
    3a54:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3a58:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3a5c:	72610000 	rsbvc	r0, r1, #0
    3a60:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3a64:	00000200 	andeq	r0, r0, r0, lsl #4
    3a68:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3a6c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a70:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3a74:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3a78:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3a7c:	00000200 	andeq	r0, r0, r0, lsl #4
    3a80:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3a84:	5f736e6f 	svcpl	0x00736e6f
    3a88:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3a8c:	00020068 	andeq	r0, r2, r8, rrx
    3a90:	73797300 	cmnvc	r9, #0, 6
    3a94:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3a98:	00000500 	andeq	r0, r0, r0, lsl #10
    3a9c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3aa0:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3aa4:	00000600 	andeq	r0, r0, r0, lsl #12
    3aa8:	00190500 	andseq	r0, r9, r0, lsl #10
    3aac:	00000205 	andeq	r0, r0, r5, lsl #4
    3ab0:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    3ab4:	011b0501 	tsteq	fp, r1, lsl #10
    3ab8:	01050101 	tsteq	r5, r1, lsl #2
    3abc:	01020106 	tsteq	r2, r6, lsl #2
    3ac0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3ac4:	0205003f 	andeq	r0, r5, #63	; 0x3f
    3ac8:	00000000 	andeq	r0, r0, r0
    3acc:	05011003 	streq	r1, [r1, #-3]
    3ad0:	13131402 	tstne	r3, #33554432	; 0x2000000
    3ad4:	063f0514 			; <UNDEFINED> instruction: 0x063f0514
    3ad8:	20017a03 	andcs	r7, r1, r3, lsl #20
    3adc:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3ae0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    3ae4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3ae8:	044d0603 	strbeq	r0, [sp], #-1539	; 0xfffff9fd
    3aec:	00c10302 	sbceq	r0, r1, r2, lsl #6
    3af0:	03010401 	movweq	r0, #5121	; 0x1401
    3af4:	4b3d2040 	blmi	f4bbfc <__ccfg+0xf2bc54>
    3af8:	33030204 	movwcc	r0, #12804	; 0x3204
    3afc:	03010401 	movweq	r0, #5121	; 0x1401
    3b00:	0205204e 	andeq	r2, r5, #78	; 0x4e
    3b04:	06070531 			; <UNDEFINED> instruction: 0x06070531
    3b08:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3b0c:	018b030f 	orreq	r0, fp, pc, lsl #6
    3b10:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3b14:	7ef50307 	cdpvc	3, 15, cr0, cr5, cr7, {0}
    3b18:	06020520 	streq	r0, [r2], -r0, lsr #10
    3b1c:	130b0521 	movwne	r0, #46369	; 0xb521
    3b20:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    3b24:	03290503 			; <UNDEFINED> instruction: 0x03290503
    3b28:	05010183 	streq	r0, [r1, #-387]	; 0xfffffe7d
    3b2c:	01041705 	tsteq	r4, r5, lsl #14
    3b30:	03060b05 	movweq	r0, #27397	; 0x6b05
    3b34:	04017ef8 	streq	r7, [r1], #-3832	; 0xfffff108
    3b38:	030f0503 	movweq	r0, #62723	; 0xf503
    3b3c:	04200188 	strteq	r0, [r0], #-392	; 0xfffffe78
    3b40:	030b0501 	movweq	r0, #46337	; 0xb501
    3b44:	04207ef8 	strteq	r7, [r0], #-3832	; 0xfffff108
    3b48:	03330503 	teqeq	r3, #12582912	; 0xc00000
    3b4c:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    3b50:	01042042 	tsteq	r4, r2, asr #32
    3b54:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b58:	08052e7e 	stmdaeq	r5, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    3b5c:	201f052e 	andscs	r0, pc, lr, lsr #10
    3b60:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3b64:	08051e02 	stmdaeq	r5, {r1, r9, sl, fp, ip}
    3b68:	063a0522 	ldrteq	r0, [sl], -r2, lsr #10
    3b6c:	010b051f 	tsteq	fp, pc, lsl r5
    3b70:	11060205 	tstne	r6, r5, lsl #4
    3b74:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    3b78:	01010006 	tsteq	r1, r6
    3b7c:	0000033c 	andeq	r0, r0, ip, lsr r3
    3b80:	01a90003 			; <UNDEFINED> instruction: 0x01a90003
    3b84:	01020000 	mrseq	r0, (UNDEF: 2)
    3b88:	000d0efb 	strdeq	r0, [sp], -fp
    3b8c:	01010101 	tsteq	r1, r1, lsl #2
    3b90:	01000000 	mrseq	r0, (UNDEF: 0)
    3b94:	2f010000 	svccs	0x00010000
    3b98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b9c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ba0:	2f6e6974 	svccs	0x006e6974
    3ba4:	6b736544 	blvs	1cdd0bc <__ccfg+0x1cbd114>
    3ba8:	2f706f74 	svccs	0x00706f74
    3bac:	4f534c4f 	svcmi	0x00534c4f
    3bb0:	2f54454e 	svccs	0x0054454e
    3bb4:	4f434950 	svcmi	0x00434950
    3bb8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3bbc:	2f534f63 	svccs	0x00534f63
    3bc0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3bc4:	4f492f73 	svcmi	0x00492f73
    3bc8:	6f682f00 	svcvs	0x00682f00
    3bcc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3a20 <__exidx_end+0xbac>
    3bd0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3bd4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3bd8:	6f746b73 	svcvs	0x00746b73
    3bdc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3be0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3be4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3be8:	2f534f43 	svccs	0x00534f43
    3bec:	4f636950 	svcmi	0x00636950
    3bf0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3bf4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3bf8:	3143432f 	cmpcc	r3, pc, lsr #6
    3bfc:	57585833 	smmlarpl	r8, r3, r8, r5
    3c00:	2f455241 	svccs	0x00455241
    3c04:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3c08:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3c0c:	752f0062 	strvc	r0, [pc, #-98]!	; 3bb2 <__exidx_end+0xd3e>
    3c10:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3a4c <__exidx_end+0xbd8>
    3c14:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3c18:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3c1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3c20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3c24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3c28:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3c2c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3c30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3c34:	2f006564 	svccs	0x00006564
    3c38:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c3c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3c40:	2f6e6974 	svccs	0x006e6974
    3c44:	6b736544 	blvs	1cdd15c <__ccfg+0x1cbd1b4>
    3c48:	2f706f74 	svccs	0x00706f74
    3c4c:	4f534c4f 	svcmi	0x00534c4f
    3c50:	2f54454e 	svccs	0x0054454e
    3c54:	4f434950 	svcmi	0x00434950
    3c58:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c5c:	2f534f63 	svccs	0x00534f63
    3c60:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3c64:	2f005858 	svccs	0x00005858
    3c68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c6c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3c70:	2f6e6974 	svccs	0x006e6974
    3c74:	6b736544 	blvs	1cdd18c <__ccfg+0x1cbd1e4>
    3c78:	2f706f74 	svccs	0x00706f74
    3c7c:	4f534c4f 	svcmi	0x00534c4f
    3c80:	2f54454e 	svccs	0x0054454e
    3c84:	4f434950 	svcmi	0x00434950
    3c88:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c8c:	00534f63 	subseq	r4, r3, r3, ror #30
    3c90:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3bdc <__exidx_end+0xd68>
    3c94:	616d2f65 	cmnvs	sp, r5, ror #30
    3c98:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3c9c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ca0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ca4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ca8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3cac:	4349502f 	movtmi	r5, #36911	; 0x902f
    3cb0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3cb4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3cb8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3cbc:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3cc0:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3cc4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3cc8:	0100632e 	tsteq	r0, lr, lsr #6
    3ccc:	70670000 	rsbvc	r0, r7, r0
    3cd0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3cd4:	00000200 	andeq	r0, r0, r0, lsl #4
    3cd8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3cdc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3ce0:	00000300 	andeq	r0, r0, r0, lsl #6
    3ce4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3ce8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3cec:	616d0000 	cmnvs	sp, r0
    3cf0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3cf4:	00000400 	andeq	r0, r0, r0, lsl #8
    3cf8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3cfc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d00:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3d04:	75620000 	strbvc	r0, [r2, #-0]!
    3d08:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3d0c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3d10:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3d14:	73000004 	movwvc	r0, #4
    3d18:	6f697379 	svcvs	0x00697379
    3d1c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3d20:	656b0000 	strbvs	r0, [fp, #-0]!
    3d24:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3d28:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3d2c:	05000000 	streq	r0, [r0, #-0]
    3d30:	02050001 	andeq	r0, r5, #1
    3d34:	00000000 	andeq	r0, r0, r0
    3d38:	01011b03 	tsteq	r1, r3, lsl #22
    3d3c:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
    3d40:	0e056a06 	vmlaeq.f32	s12, s10, s12
    3d44:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3d48:	06030520 	streq	r0, [r3], -r0, lsr #10
    3d4c:	40020531 	andmi	r0, r2, r1, lsr r5
    3d50:	01060f05 	tsteq	r6, r5, lsl #30
    3d54:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    3d58:	01042e01 	tsteq	r4, r1, lsl #28
    3d5c:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3d60:	0f05207e 	svceq	0x0005207e
    3d64:	0614051c 			; <UNDEFINED> instruction: 0x0614051c
    3d68:	061c0520 	ldreq	r0, [ip], -r0, lsr #10
    3d6c:	20020501 	andcs	r0, r2, r1, lsl #10
    3d70:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
    3d74:	03053d4b 	movweq	r3, #23883	; 0x5d4b
    3d78:	042e7103 	strteq	r7, [lr], #-259	; 0xfffffefd
    3d7c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3d80:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    3d84:	01041705 	tsteq	r4, r5, lsl #14
    3d88:	03060705 	movweq	r0, #26373	; 0x6705
    3d8c:	04017efd 	streq	r7, [r1], #-3837	; 0xfffff103
    3d90:	030f0502 	movweq	r0, #62722	; 0xf502
    3d94:	042e0183 	strteq	r0, [lr], #-387	; 0xfffffe7d
    3d98:	03070501 	movweq	r0, #29953	; 0x7501
    3d9c:	04207efd 	strteq	r7, [r0], #-3837	; 0xfffff103
    3da0:	03330502 	teqeq	r3, #8388608	; 0x800000
    3da4:	04200183 	strteq	r0, [r0], #-387	; 0xfffffe7d
    3da8:	03060501 	movweq	r0, #25857	; 0x6501
    3dac:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    3db0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3db4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3db8:	05400604 	strbeq	r0, [r0, #-1540]	; 0xfffff9fc
    3dbc:	12030603 	andne	r0, r3, #3145728	; 0x300000
    3dc0:	052f062e 	streq	r0, [pc, #-1582]!	; 379a <__exidx_end+0x926>
    3dc4:	20640306 	rsbcs	r0, r4, r6, lsl #6
    3dc8:	01060d05 	tsteq	r6, r5, lsl #26
    3dcc:	03060205 	movweq	r0, #25093	; 0x6205
    3dd0:	07053c16 	smladeq	r5, r6, ip, r3
    3dd4:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3dd8:	03062905 	movweq	r2, #26885	; 0x6905
    3ddc:	055800eb 	ldrbeq	r0, [r8, #-235]	; 0xffffff15
    3de0:	0f051705 	svceq	0x00051705
    3de4:	01040106 	tsteq	r4, r6, lsl #2
    3de8:	90030705 	andls	r0, r3, r5, lsl #14
    3dec:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3df0:	f0030f05 			; <UNDEFINED> instruction: 0xf0030f05
    3df4:	33052000 	movwcc	r2, #20480	; 0x5000
    3df8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3dfc:	7f900305 	svcvc	0x00900305
    3e00:	06020520 	streq	r0, [r2], -r0, lsr #10
    3e04:	06050531 			; <UNDEFINED> instruction: 0x06050531
    3e08:	06030501 	streq	r0, [r3], -r1, lsl #10
    3e0c:	5102053e 	tstpl	r2, lr, lsr r5
    3e10:	01060705 	tsteq	r6, r5, lsl #14
    3e14:	29050204 	stmdbcs	r5, {r2, r9}
    3e18:	00df0306 	sbcseq	r0, pc, r6, lsl #6
    3e1c:	1705053c 	smladxne	r5, ip, r5, r0
    3e20:	01060f05 	tsteq	r6, r5, lsl #30
    3e24:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3e28:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e2c:	0f050204 	svceq	0x00050204
    3e30:	2e00e403 	cdpcs	4, 0, cr14, cr0, cr3, {0}
    3e34:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3e38:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e3c:	33050204 	movwcc	r0, #20996	; 0x5204
    3e40:	2000e403 	andcs	lr, r0, r3, lsl #8
    3e44:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3e48:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e4c:	31060205 	tstcc	r6, r5, lsl #4
    3e50:	01060e05 	tsteq	r6, r5, lsl #28
    3e54:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3e58:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e5c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    3e60:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    3e64:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    3e68:	01052c02 	tsteq	r5, r2, lsl #24
    3e6c:	0c024c06 	stceq	12, cr4, [r2], {6}
    3e70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e74:	02050029 	andeq	r0, r5, #41	; 0x29
    3e78:	00000000 	andeq	r0, r0, r0
    3e7c:	0100d703 	tsteq	r0, r3, lsl #14
    3e80:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3e84:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3e88:	0f051c29 	svceq	0x00051c29
    3e8c:	20050524 	andcs	r0, r5, r4, lsr #10
    3e90:	21060305 	tstcs	r6, r5, lsl #6
    3e94:	1a060105 	bne	1842b0 <__ccfg+0x164308>
    3e98:	78030305 	stmdavc	r3, {r0, r2, r8, r9}
    3e9c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3ea0:	06070540 	streq	r0, [r7], -r0, asr #10
    3ea4:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    3ea8:	2f060305 	svccs	0x00060305
    3eac:	0601052f 	streq	r0, [r1], -pc, lsr #10
    3eb0:	2c030522 	cfstr32cs	mvfx0, [r3], {34}	; 0x22
    3eb4:	023e0105 	eorseq	r0, lr, #1073741825	; 0x40000001
    3eb8:	01010006 	tsteq	r1, r6
    3ebc:	00000931 	andeq	r0, r0, r1, lsr r9
    3ec0:	01cc0003 	biceq	r0, ip, r3
    3ec4:	01020000 	mrseq	r0, (UNDEF: 2)
    3ec8:	000d0efb 	strdeq	r0, [sp], -fp
    3ecc:	01010101 	tsteq	r1, r1, lsl #2
    3ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ed4:	2f010000 	svccs	0x00010000
    3ed8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3edc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ee0:	2f6e6974 	svccs	0x006e6974
    3ee4:	6b736544 	blvs	1cdd3fc <__ccfg+0x1cbd454>
    3ee8:	2f706f74 	svccs	0x00706f74
    3eec:	4f534c4f 	svcmi	0x00534c4f
    3ef0:	2f54454e 	svccs	0x0054454e
    3ef4:	4f434950 	svcmi	0x00434950
    3ef8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3efc:	2f534f63 	svccs	0x00534f63
    3f00:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3f04:	74532f73 	ldrbvc	r2, [r3], #-3955	; 0xfffff08d
    3f08:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3f0c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3f10:	2f656d6f 	svccs	0x00656d6f
    3f14:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3f18:	442f6e69 	strtmi	r6, [pc], #-3689	; 3f20 <__exidx_end+0x10ac>
    3f1c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3f20:	4f2f706f 	svcmi	0x002f706f
    3f24:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3f28:	502f5445 	eorpl	r5, pc, r5, asr #8
    3f2c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f30:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f34:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3f38:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3f3c:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3f40:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f44:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3f48:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3f4c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3f50:	2f006269 	svccs	0x00006269
    3f54:	2f727375 	svccs	0x00727375
    3f58:	2f62696c 	svccs	0x0062696c
    3f5c:	2f636367 	svccs	0x00636367
    3f60:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3f64:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3f68:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3f6c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3f70:	2f312e32 	svccs	0x00312e32
    3f74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3f78:	00656475 	rsbeq	r6, r5, r5, ror r4
    3f7c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ec8 <__exidx_end+0x1054>
    3f80:	616d2f65 	cmnvs	sp, r5, ror #30
    3f84:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f88:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f8c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f90:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f94:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f98:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f9c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3fa0:	534f6369 	movtpl	r6, #62313	; 0xf369
    3fa4:	3143432f 	cmpcc	r3, pc, lsr #6
    3fa8:	00585833 	subseq	r5, r8, r3, lsr r8
    3fac:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ef8 <__exidx_end+0x1084>
    3fb0:	616d2f65 	cmnvs	sp, r5, ror #30
    3fb4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3fb8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fbc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3fc0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3fc4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3fc8:	4349502f 	movtmi	r5, #36911	; 0x902f
    3fcc:	502f534f 	eorpl	r5, pc, pc, asr #6
    3fd0:	534f6369 	movtpl	r6, #62313	; 0xf369
    3fd4:	6f682f00 	svcvs	0x00682f00
    3fd8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3e2c <__exidx_end+0xfb8>
    3fdc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3fe0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3fe4:	6f746b73 	svcvs	0x00746b73
    3fe8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3fec:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ff0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3ff4:	2f534f43 	svccs	0x00534f43
    3ff8:	4f636950 	svcmi	0x00636950
    3ffc:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    4000:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4004:	74730000 	ldrbtvc	r0, [r3], #-0
    4008:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    400c:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    4010:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    4014:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
    4018:	00010063 	andeq	r0, r1, r3, rrx
    401c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4020:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4024:	73000002 	movwvc	r0, #2
    4028:	61726f74 	cmnvs	r2, r4, ror pc
    402c:	655f6567 	ldrbvs	r6, [pc, #-1383]	; 3acd <__exidx_end+0xc59>
    4030:	6f727065 	svcvs	0x00727065
    4034:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    4038:	73000001 	movwvc	r0, #1
    403c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4040:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4044:	61000003 	tstvs	r0, r3
    4048:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    404c:	00040068 	andeq	r0, r4, r8, rrx
    4050:	63616d00 	cmnvs	r1, #0, 26
    4054:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4058:	70000004 	andvc	r0, r0, r4
    405c:	5f736e69 	svcpl	0x00736e69
    4060:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4064:	00040068 	andeq	r0, r4, r8, rrx
    4068:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    406c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4070:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4074:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4078:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    407c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4080:	00050068 	andeq	r0, r5, r8, rrx
    4084:	72656b00 	rsbvc	r6, r5, #0, 22
    4088:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    408c:	00060068 	andeq	r0, r6, r8, rrx
    4090:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    4094:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    4098:	03000016 	movweq	r0, #22
    409c:	02050118 	andeq	r0, r5, #24, 2
    40a0:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    40a4:	19050115 	stmdbne	r5, {r0, r2, r4, r8}
    40a8:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
    40ac:	05020425 	streq	r0, [r2, #-1061]	; 0xfffffbdb
    40b0:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    40b4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    40b8:	7df10319 	ldclvc	3, cr0, [r1, #100]!	; 0x64
    40bc:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    40c0:	02c5032d 	sbceq	r0, r5, #-1275068416	; 0xb4000000
    40c4:	030f0520 	movweq	r0, #62752	; 0xf520
    40c8:	05207ed0 	streq	r7, [r0, #-3792]!	; 0xfffff130
    40cc:	00fa032d 	rscseq	r0, sl, sp, lsr #6
    40d0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    40d4:	f7030603 			; <UNDEFINED> instruction: 0xf7030603
    40d8:	0204207d 	andeq	r2, r4, #125	; 0x7d
    40dc:	03060f05 	movweq	r0, #28421	; 0x6f05
    40e0:	0401018f 	streq	r0, [r1], #-399	; 0xfffffe71
    40e4:	03050501 	movweq	r0, #21761	; 0x5501
    40e8:	05207ef1 	streq	r7, [r0, #-3825]!	; 0xfffff10f
    40ec:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    40f0:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    40f4:	05020421 	streq	r0, [r2, #-1057]	; 0xfffffbdf
    40f8:	01890329 	orreq	r0, r9, r9, lsr #6
    40fc:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4100:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4104:	017ef303 	cmneq	lr, r3, lsl #6	; <UNPREDICTABLE>
    4108:	01060605 	tsteq	r6, r5, lsl #12
    410c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4110:	29050204 	stmdbcs	r5, {r2, r9}
    4114:	01028103 	tsteq	r2, r3, lsl #2
    4118:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    411c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4120:	017df603 	cmneq	sp, r3, lsl #12	; <UNPREDICTABLE>
    4124:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4128:	20028a03 	andcs	r8, r2, r3, lsl #20
    412c:	03050104 	movweq	r0, #20740	; 0x5104
    4130:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
    4134:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4138:	02b60329 	adcseq	r0, r6, #-1543503872	; 0xa4000000
    413c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4140:	01062d05 	tsteq	r6, r5, lsl #26
    4144:	1c050104 	stfnes	f0, [r5], {4}
    4148:	7dc00306 	stclvc	3, cr0, [r0, #24]
    414c:	01150520 	tsteq	r5, r0, lsr #10
    4150:	01060205 	tsteq	r6, r5, lsl #4
    4154:	09030105 	stmdbeq	r3, {r0, r2, r8}
    4158:	00070220 	andeq	r0, r7, r0, lsr #4
    415c:	1f050101 	svcne	0x00050101
    4160:	68020500 	stmdavs	r2, {r8, sl}
    4164:	03000016 	movweq	r0, #22
    4168:	02050128 	andeq	r0, r5, #40, 2
    416c:	0e051414 	cfmvdlreq	mvd5, r1
    4170:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    4174:	0204200e 	andeq	r2, r4, #14
    4178:	ff032d05 			; <UNDEFINED> instruction: 0xff032d05
    417c:	01043c01 	tsteq	r4, r1, lsl #24
    4180:	03060305 	movweq	r0, #25349	; 0x6305
    4184:	054a7e86 	strbeq	r7, [sl, #-3718]	; 0xfffff17a
    4188:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    418c:	042f0604 	strteq	r0, [pc], #-1540	; 4194 <__exidx_end+0x1320>
    4190:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4194:	050101f4 	streq	r0, [r1, #-500]	; 0xfffffe0c
    4198:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    419c:	01040106 	tsteq	r4, r6, lsl #2
    41a0:	03060405 	movweq	r0, #25605	; 0x6405
    41a4:	042e7e89 	strteq	r7, [lr], #-3721	; 0xfffff177
    41a8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41ac:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    41b0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    41b4:	01040106 	tsteq	r4, r6, lsl #2
    41b8:	03060305 	movweq	r0, #25349	; 0x6305
    41bc:	04207dd4 	strteq	r7, [r0], #-3540	; 0xfffff22c
    41c0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41c4:	050101f1 	streq	r0, [r1, #-497]	; 0xfffffe0f
    41c8:	01041705 	tsteq	r4, r5, lsl #14
    41cc:	7e8c0306 	cdpvc	3, 8, cr0, cr12, cr6, {0}
    41d0:	03020501 	movweq	r0, #9473	; 0x2501
    41d4:	02042079 	andeq	r2, r4, #121	; 0x79
    41d8:	fb032d05 	blx	cf5f6 <__ccfg+0xaf64e>
    41dc:	01042001 	tsteq	r4, r1
    41e0:	03060305 	movweq	r0, #25349	; 0x6305
    41e4:	04207e8b 	strteq	r7, [r0], #-3723	; 0xfffff175
    41e8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41ec:	050102a6 	streq	r0, [r1, #-678]	; 0xfffffd5a
    41f0:	01041705 	tsteq	r4, r5, lsl #14
    41f4:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    41f8:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    41fc:	02aa032d 	adceq	r0, sl, #-1275068416	; 0xb4000000
    4200:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4204:	d6030603 	strle	r0, [r3], -r3, lsl #12
    4208:	1505207d 	strne	r2, [r5, #-125]	; 0xffffff83
    420c:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    4210:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    4214:	01050106 	tsteq	r5, r6, lsl #2
    4218:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    421c:	01010005 	tsteq	r1, r5
    4220:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    4224:	00169802 	andseq	r9, r6, r2, lsl #16
    4228:	01390300 	teqeq	r9, r0, lsl #6
    422c:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    4230:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4234:	050103cf 	streq	r0, [r1, #-975]	; 0xfffffc31
    4238:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    423c:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4240:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4244:	7ca8031e 	stcvc	3, cr0, [r8], #120	; 0x78
    4248:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    424c:	03d80338 	bicseq	r0, r8, #56, 6	; 0xe0000000
    4250:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4254:	ab030602 	blge	c5a64 <__ccfg+0xa5abc>
    4258:	042f2e7c 	strteq	r2, [pc], #-3708	; 4260 <__exidx_end+0x13ec>
    425c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4260:	050103cd 	streq	r0, [r1, #-973]	; 0xfffffc33
    4264:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4268:	06380517 			; <UNDEFINED> instruction: 0x06380517
    426c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4270:	7cad0301 	stcvc	3, cr0, [sp], #4
    4274:	0004022e 	andeq	r0, r4, lr, lsr #4
    4278:	27050101 	strcs	r0, [r5, -r1, lsl #2]
    427c:	b0020500 	andlt	r0, r2, r0, lsl #10
    4280:	03000016 	movweq	r0, #22
    4284:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    4288:	27051602 	strcs	r1, [r5, -r2, lsl #12]
    428c:	042e0e06 	strteq	r0, [lr], #-3590	; 0xfffff1fa
    4290:	03380502 	teqeq	r8, #8388608	; 0x800000
    4294:	042e03ba 	strteq	r0, [lr], #-954	; 0xfffffc46
    4298:	03090501 	movweq	r0, #38145	; 0x9501
    429c:	04207cca 	strteq	r7, [r0], #-3274	; 0xfffff336
    42a0:	03380502 	teqeq	r8, #8388608	; 0x800000
    42a4:	042e03b6 	strteq	r0, [lr], #-950	; 0xfffffc4a
    42a8:	06080501 	streq	r0, [r8], -r1, lsl #10
    42ac:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    42b0:	73030205 	movwvc	r0, #12805	; 0x3205
    42b4:	0204143c 	andeq	r1, r4, #60, 8	; 0x3c000000
    42b8:	ba032905 	blt	ce6d4 <__ccfg+0xae72c>
    42bc:	3d050103 	stfccs	f0, [r5, #-12]
    42c0:	17050514 	smladne	r5, r4, r5, r0
    42c4:	02050104 	andeq	r0, r5, #4, 2
    42c8:	7cc00306 	stclvc	3, cr0, [r0], {6}
    42cc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    42d0:	03c00338 	biceq	r0, r0, #56, 6	; 0xe0000000
    42d4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    42d8:	c0030602 	andgt	r0, r3, r2, lsl #12
    42dc:	052f207c 	streq	r2, [pc, #-124]!	; 4268 <__exidx_end+0x13f4>
    42e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    42e4:	042f0602 	strteq	r0, [pc], #-1538	; 42ec <__exidx_end+0x1478>
    42e8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    42ec:	050103b7 	streq	r0, [r1, #-951]	; 0xfffffc49
    42f0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    42f4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    42f8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    42fc:	c3030602 	movwgt	r0, #13826	; 0x3602
    4300:	0f052e7c 	svceq	0x00052e7c
    4304:	01051906 	tsteq	r5, r6, lsl #18
    4308:	06030536 			; <UNDEFINED> instruction: 0x06030536
    430c:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4310:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4314:	4c4b0604 	mcrrmi	6, 0, r0, fp, cr4
    4318:	0007024b 	andeq	r0, r7, fp, asr #4
    431c:	16050101 	strne	r0, [r5], -r1, lsl #2
    4320:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    4324:	03000017 	movweq	r0, #23
    4328:	05010181 	streq	r0, [r1, #-385]	; 0xfffffe7f
    432c:	16051602 	strne	r1, [r5], -r2, lsl #12
    4330:	06050e06 	streq	r0, [r5], -r6, lsl #28
    4334:	20050524 	andcs	r0, r5, r4, lsr #10
    4338:	30060305 	andcc	r0, r6, r5, lsl #6
    433c:	055e0205 	ldrbeq	r0, [lr, #-517]	; 0xfffffdfb
    4340:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4344:	03053d01 	movweq	r3, #23809	; 0x5d01
    4348:	02051b06 	andeq	r1, r5, #6144	; 0x1800
    434c:	01016603 	tsteq	r1, r3, lsl #12
    4350:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    4354:	99032905 	stmdbls	r3, {r0, r2, r8, fp, sp}
    4358:	3d050103 	stfccs	f0, [r5, #-12]
    435c:	17050514 	smladne	r5, r4, r5, r0
    4360:	01063805 	tsteq	r6, r5, lsl #16
    4364:	02050104 	andeq	r0, r5, #4, 2
    4368:	2e7ce103 	expcse	f6, f3
    436c:	38050204 	stmdacc	r5, {r2, r9}
    4370:	20039f03 	andcs	r9, r3, r3, lsl #30
    4374:	02050104 	andeq	r0, r5, #4, 2
    4378:	7ce10306 	stclvc	3, cr0, [r1], #24
    437c:	02042f20 	andeq	r2, r4, #32, 30	; 0x80
    4380:	97032905 	strls	r2, [r3, -r5, lsl #18]
    4384:	3d050103 	stfccs	f0, [r5, #-12]
    4388:	17050514 	smladne	r5, r4, r5, r0
    438c:	02050104 	andeq	r0, r5, #4, 2
    4390:	7ce30306 	stclvc	3, cr0, [r3], #24
    4394:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4398:	039d0338 	orrseq	r0, sp, #56, 6	; 0xe0000000
    439c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    43a0:	e3030602 	movw	r0, #13826	; 0x3602
    43a4:	0305207c 	movweq	r2, #20604	; 0x507c
    43a8:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    43ac:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    43b0:	01010009 	tsteq	r1, r9
    43b4:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    43b8:	00174402 	andseq	r4, r7, r2, lsl #8
    43bc:	00f70300 	rscseq	r0, r7, r0, lsl #6
    43c0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    43c4:	10061705 	andne	r1, r6, r5, lsl #14
    43c8:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    43cc:	03052005 	movweq	r2, #20485	; 0x5005
    43d0:	05593d06 	ldrbeq	r3, [r9, #-3334]	; 0xfffff2fa
    43d4:	016e0302 	cmneq	lr, r2, lsl #6
    43d8:	13030305 	movwne	r0, #13061	; 0x3305
    43dc:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    43e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    43e4:	0501012f 	streq	r0, [r1, #-303]	; 0xfffffed1
    43e8:	02140601 	andseq	r0, r4, #1048576	; 0x100000
    43ec:	01010003 	tsteq	r1, r3
    43f0:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    43f4:	00176802 	andseq	r6, r7, r2, lsl #16
    43f8:	01920300 	orrseq	r0, r2, r0, lsl #6
    43fc:	16020501 	strne	r0, [r2], -r1, lsl #10
    4400:	0e061105 	adfeqs	f1, f6, f5
    4404:	06240205 	strteq	r0, [r4], -r5, lsl #4
    4408:	0608052f 	streq	r0, [r8], -pc, lsr #10
    440c:	03010501 	movweq	r0, #5377	; 0x1501
    4410:	08052e0e 	stmdaeq	r5, {r1, r2, r3, r9, sl, fp, sp}
    4414:	05207203 	streq	r7, [r0, #-515]!	; 0xfffffdfd
    4418:	0d030602 	stceq	6, cr0, [r3, #-8]
    441c:	06010520 	streq	r0, [r1], -r0, lsr #10
    4420:	00030213 	andeq	r0, r3, r3, lsl r2
    4424:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    4428:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    442c:	03000017 	movweq	r0, #23
    4430:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    4434:	06051402 	streq	r1, [r5], -r2, lsl #8
    4438:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    443c:	06030520 	streq	r0, [r3], -r0, lsr #10
    4440:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4444:	06030501 	streq	r0, [r3], -r1, lsl #10
    4448:	0601052f 	streq	r0, [r1], -pc, lsr #10
    444c:	00030230 	andeq	r0, r3, r0, lsr r2
    4450:	2b050101 	blcs	14485c <__ccfg+0x1248b4>
    4454:	00020500 	andeq	r0, r2, r0, lsl #10
    4458:	03000000 	movweq	r0, #0
    445c:	060101af 	streq	r0, [r1], -pc, lsr #3
    4460:	06020520 	streq	r0, [r2], -r0, lsr #10
    4464:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4468:	06020501 	streq	r0, [r2], -r1, lsl #10
    446c:	06050531 			; <UNDEFINED> instruction: 0x06050531
    4470:	3c180501 	cfldr32cc	mvfx0, [r8], {1}
    4474:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    4478:	303f0602 	eorscc	r0, pc, r2, lsl #12
    447c:	29050204 	stmdbcs	r5, {r2, r9}
    4480:	0102d103 	tsteq	r2, r3, lsl #2
    4484:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4488:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    448c:	01040106 	tsteq	r4, r6, lsl #2
    4490:	aa030205 	bge	c4cac <__ccfg+0xa4d04>
    4494:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    4498:	d6033805 	strle	r3, [r3], -r5, lsl #16
    449c:	01042002 	tsteq	r4, r2
    44a0:	03060205 	movweq	r0, #25093	; 0x6205
    44a4:	2f207daa 	svccs	0x00207daa
    44a8:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    44ac:	02052008 	andeq	r2, r5, #8
    44b0:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    44b4:	02c70329 	sbceq	r0, r7, #-1543503872	; 0xa4000000
    44b8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    44bc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    44c0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    44c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    44c8:	2e7db403 	cdpcs	4, 7, cr11, cr13, cr3, {0}
    44cc:	06010530 			; <UNDEFINED> instruction: 0x06010530
    44d0:	06030513 			; <UNDEFINED> instruction: 0x06030513
    44d4:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    44d8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    44dc:	0a052e08 	beq	14fd04 <__ccfg+0x12fd5c>
    44e0:	023c7403 	eorseq	r7, ip, #50331648	; 0x3000000
    44e4:	01010005 	tsteq	r1, r5
    44e8:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    44ec:	00000002 	andeq	r0, r0, r2
    44f0:	01ca0300 	biceq	r0, sl, r0, lsl #6
    44f4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    44f8:	10063105 	andne	r3, r6, r5, lsl #2
    44fc:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    4500:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    4504:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    4508:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    450c:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4510:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4514:	06052017 			; <UNDEFINED> instruction: 0x06052017
    4518:	06030520 	streq	r0, [r3], -r0, lsr #10
    451c:	06060530 			; <UNDEFINED> instruction: 0x06060530
    4520:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    4524:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4528:	03040530 	movweq	r0, #17712	; 0x4530
    452c:	1005010a 	andne	r0, r5, sl, lsl #2
    4530:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4534:	20100520 	andscs	r0, r0, r0, lsr #10
    4538:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    453c:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4540:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4544:	1f052009 	svcne	0x00052009
    4548:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
    454c:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
    4550:	01060d05 	tsteq	r6, r5, lsl #26
    4554:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    4558:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    455c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4560:	2f2f0605 	svccs	0x002f0605
    4564:	01060c05 	tsteq	r6, r5, lsl #24
    4568:	31030105 	tstcc	r3, r5, lsl #2
    456c:	06040520 	streq	r0, [r4], -r0, lsr #10
    4570:	05205203 	streq	r5, [r0, #-515]!	; 0xfffffdfd
    4574:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4578:	25052007 	strcs	r2, [r5, #-7]
    457c:	201d0520 	andscs	r0, sp, r0, lsr #10
    4580:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4584:	01060b05 	tsteq	r6, r5, lsl #22
    4588:	05280405 	streq	r0, [r8, #-1029]!	; 0xfffffbfb
    458c:	04051e0b 	streq	r1, [r5], #-3595	; 0xfffff1f5
    4590:	042f2206 	strteq	r2, [pc], #-518	; 4598 <__exidx_end+0x1724>
    4594:	06380502 	ldrteq	r0, [r8], -r2, lsl #10
    4598:	01029603 	tsteq	r2, r3, lsl #12
    459c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    45a0:	2e7dea03 	vaddcs.f32	s29, s26, s6
    45a4:	03060205 	movweq	r0, #25093	; 0x6205
    45a8:	04207ec7 	strteq	r7, [r0], #-3783	; 0xfffff139
    45ac:	03290502 			; <UNDEFINED> instruction: 0x03290502
    45b0:	050103c8 	streq	r0, [r1, #-968]	; 0xfffffc38
    45b4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    45b8:	06380517 			; <UNDEFINED> instruction: 0x06380517
    45bc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    45c0:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
    45c4:	4b2f207c 	blmi	bcc7bc <__ccfg+0xbac814>
    45c8:	02043d4b 	andeq	r3, r4, #4800	; 0x12c0
    45cc:	c3032905 	movwgt	r2, #14597	; 0x3905
    45d0:	3d050103 	stfccs	f0, [r5, #-12]
    45d4:	17050514 	smladne	r5, r4, r5, r0
    45d8:	01063805 	tsteq	r6, r5, lsl #16
    45dc:	02050104 	andeq	r0, r5, #4, 2
    45e0:	7dee0306 	stclvc	3, cr0, [lr, #24]!
    45e4:	060b052e 	streq	r0, [fp], -lr, lsr #10
    45e8:	05825503 	streq	r5, [r2, #1283]	; 0x503
    45ec:	1f030609 	svcne	0x00030609
    45f0:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    45f4:	2e0c0501 	cfsh32cs	mvfx0, mvfx12, #1
    45f8:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
    45fc:	05052022 	streq	r2, [r5, #-34]	; 0xffffffde
    4600:	0b053e06 	bleq	153e20 <__ccfg+0x133e78>
    4604:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4608:	0b053106 	bleq	150a28 <__ccfg+0x130a80>
    460c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4610:	06040535 			; <UNDEFINED> instruction: 0x06040535
    4614:	592e0a03 	stmdbpl	lr!, {r0, r1, r9, fp}
    4618:	01060905 	tsteq	r6, r5, lsl #18
    461c:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
    4620:	03210604 			; <UNDEFINED> instruction: 0x03210604
    4624:	0359206b 	cmpeq	r9, #107	; 0x6b
    4628:	054b200b 	strbeq	r2, [fp, #-11]
    462c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4630:	4b5e0604 	blmi	1785e48 <__ccfg+0x1765ea0>
    4634:	01060905 	tsteq	r6, r5, lsl #18
    4638:	03060305 	movweq	r0, #25349	; 0x6305
    463c:	05587fba 	ldrbeq	r7, [r8, #-4026]	; 0xfffff046
    4640:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4644:	00083b09 	andeq	r3, r8, r9, lsl #22
    4648:	3b050101 	blcc	144a54 <__ccfg+0x124aac>
    464c:	00020500 	andeq	r0, r2, r0, lsl #10
    4650:	03000000 	movweq	r0, #0
    4654:	050102a0 	streq	r0, [r1, #-672]	; 0xfffffd60
    4658:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    465c:	050e063b 	streq	r0, [lr, #-1595]	; 0xfffff9c5
    4660:	3b05320c 	blcc	150e98 <__ccfg+0x130ef0>
    4664:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    4668:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    466c:	03053205 	movweq	r3, #20997	; 0x5205
    4670:	06053206 	streq	r3, [r5], -r6, lsl #4
    4674:	1a050106 	bne	144a94 <__ccfg+0x124aec>
    4678:	2e14053c 	mrccs	5, 0, r0, cr4, cr12, {1}
    467c:	3f060305 	svccc	0x00060305
    4680:	01060805 	tsteq	r6, r5, lsl #16
    4684:	2f060305 	svccs	0x00060305
    4688:	01060805 	tsteq	r6, r5, lsl #16
    468c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4690:	01060805 	tsteq	r6, r5, lsl #16
    4694:	30060305 	andcc	r0, r6, r5, lsl #6
    4698:	0609052f 	streq	r0, [r9], -pc, lsr #10
    469c:	06030501 	streq	r0, [r3], -r1, lsl #10
    46a0:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    46a4:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    46a8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    46ac:	01060a05 	tsteq	r6, r5, lsl #20
    46b0:	21060405 	tstcs	r6, r5, lsl #8
    46b4:	0601052f 	streq	r0, [r1], -pc, lsr #10
    46b8:	05012203 	streq	r2, [r1, #-515]	; 0xfffffdfd
    46bc:	62030603 	andvs	r0, r3, #3145728	; 0x300000
    46c0:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    46c4:	20060501 	andcs	r0, r6, r1, lsl #10
    46c8:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    46cc:	4a062406 	bmi	18d6ec <__ccfg+0x16d744>
    46d0:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    46d4:	01c80329 	biceq	r0, r8, r9, lsr #6
    46d8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    46dc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    46e0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    46e4:	03030501 	movweq	r0, #13569	; 0x3501
    46e8:	043c7eb3 	ldrteq	r7, [ip], #-3763	; 0xfffff14d
    46ec:	03380502 	teqeq	r8, #8388608	; 0x800000
    46f0:	042001cd 	strteq	r0, [r0], #-461	; 0xfffffe33
    46f4:	06030501 	streq	r0, [r3], -r1, lsl #10
    46f8:	2e7eb303 	cdpcs	3, 7, cr11, cr14, cr3, {0}
    46fc:	0619052f 	ldreq	r0, [r9], -pc, lsr #10
    4700:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
    4704:	3e4b4b06 	vmlacc.f64	d20, d11, d6
    4708:	31060805 	tstcc	r6, r5, lsl #16
    470c:	052b0c05 	streq	r0, [fp, #-3077]!	; 0xfffff3fb
    4710:	08052e09 	stmdaeq	r5, {r0, r3, r9, sl, fp, sp}
    4714:	06090523 	streq	r0, [r9], -r3, lsr #10
    4718:	2603051d 			; <UNDEFINED> instruction: 0x2603051d
    471c:	29050204 	stmdbcs	r5, {r2, r9}
    4720:	0101bb03 	tsteq	r1, r3, lsl #22
    4724:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4728:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    472c:	01040106 	tsteq	r4, r6, lsl #2
    4730:	03060205 	movweq	r0, #25093	; 0x6205
    4734:	053c7ec1 	ldreq	r7, [ip, #-3777]!	; 0xfffff13f
    4738:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    473c:	4b400602 	blmi	1005f4c <__ccfg+0xfe5fa4>
    4740:	73030405 	movwvc	r0, #13317	; 0x3405
    4744:	06130520 	ldreq	r0, [r3], -r0, lsr #10
    4748:	3c040501 	cfstr32cc	mvfx0, [r4], {1}
    474c:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4750:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4754:	08055906 	stmdaeq	r5, {r1, r2, r8, fp, ip, lr}
    4758:	0b050106 	bleq	144b78 <__ccfg+0x124bd0>
    475c:	024a5d03 	subeq	r5, sl, #3, 26	; 0xc0
    4760:	0101000d 	tsteq	r1, sp
    4764:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4768:	00000002 	andeq	r0, r0, r2
    476c:	02da0300 	sbcseq	r0, sl, #0, 6
    4770:	15010501 	strne	r0, [r1, #-1281]	; 0xfffffaff
    4774:	01000102 	tsteq	r0, r2, lsl #2
    4778:	00180501 	andseq	r0, r8, r1, lsl #10
    477c:	00000205 	andeq	r0, r0, r5, lsl #4
    4780:	df030000 	svcle	0x00030000
    4784:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4788:	06010515 			; <UNDEFINED> instruction: 0x06010515
    478c:	00020213 	andeq	r0, r2, r3, lsl r2
    4790:	03040101 	movweq	r0, #16641	; 0x4101
    4794:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    4798:	00000002 	andeq	r0, r0, r2
    479c:	02051900 	andeq	r1, r5, #0, 18
    47a0:	06050514 			; <UNDEFINED> instruction: 0x06050514
    47a4:	06030501 	streq	r0, [r3], -r1, lsl #10
    47a8:	06070521 	streq	r0, [r7], -r1, lsr #10
    47ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    47b0:	06050530 			; <UNDEFINED> instruction: 0x06050530
    47b4:	06030501 	streq	r0, [r3], -r1, lsl #10
    47b8:	06080521 	streq	r0, [r8], -r1, lsr #10
    47bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    47c0:	0601053e 			; <UNDEFINED> instruction: 0x0601053e
    47c4:	00030213 	andeq	r0, r3, r3, lsl r2
    47c8:	03040101 	movweq	r0, #16641	; 0x4101
    47cc:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    47d0:	00000002 	andeq	r0, r0, r2
    47d4:	01120300 	tsteq	r2, r0, lsl #6
    47d8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    47dc:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    47e0:	2f062202 	svccs	0x00062202
    47e4:	06010567 	streq	r0, [r1], -r7, ror #10
    47e8:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    47ec:	01000202 	tsteq	r0, r2, lsl #4
    47f0:	0001c101 	andeq	ip, r1, r1, lsl #2
    47f4:	21000300 	mrscs	r0, LR_irq
    47f8:	02000001 	andeq	r0, r0, #1
    47fc:	0d0efb01 	vstreq	d15, [lr, #-4]
    4800:	01010100 	mrseq	r0, (UNDEF: 17)
    4804:	00000001 	andeq	r0, r0, r1
    4808:	01000001 	tsteq	r0, r1
    480c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4758 <__exidx_end+0x18e4>
    4810:	616d2f65 	cmnvs	sp, r5, ror #30
    4814:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4818:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    481c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4820:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4824:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4828:	4349502f 	movtmi	r5, #36911	; 0x902f
    482c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4830:	534f6369 	movtpl	r6, #62313	; 0xf369
    4834:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4838:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    483c:	61697265 	cmnvs	r9, r5, ror #4
    4840:	752f006c 	strvc	r0, [pc, #-108]!	; 47dc <__exidx_end+0x1968>
    4844:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4680 <__exidx_end+0x180c>
    4848:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    484c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4850:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4854:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4858:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    485c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4860:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4864:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4868:	2f006564 	svccs	0x00006564
    486c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4870:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4874:	2f6e6974 	svccs	0x006e6974
    4878:	6b736544 	blvs	1cddd90 <__ccfg+0x1cbdde8>
    487c:	2f706f74 	svccs	0x00706f74
    4880:	4f534c4f 	svcmi	0x00534c4f
    4884:	2f54454e 	svccs	0x0054454e
    4888:	4f434950 	svcmi	0x00434950
    488c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4890:	2f534f63 	svccs	0x00534f63
    4894:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4898:	2f005858 	svccs	0x00005858
    489c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    48a0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    48a4:	2f6e6974 	svccs	0x006e6974
    48a8:	6b736544 	blvs	1cdddc0 <__ccfg+0x1cbde18>
    48ac:	2f706f74 	svccs	0x00706f74
    48b0:	4f534c4f 	svcmi	0x00534c4f
    48b4:	2f54454e 	svccs	0x0054454e
    48b8:	4f434950 	svcmi	0x00434950
    48bc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    48c0:	00534f63 	subseq	r4, r3, r3, ror #30
    48c4:	72657300 	rsbvc	r7, r5, #0, 6
    48c8:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    48cc:	00010063 	andeq	r0, r1, r3, rrx
    48d0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    48d4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    48d8:	00020068 	andeq	r0, r2, r8, rrx
    48dc:	63726100 	cmnvs	r2, #0, 2
    48e0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    48e4:	6d000003 	stcvs	0, cr0, [r0, #-12]
    48e8:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    48ec:	00030068 	andeq	r0, r3, r8, rrx
    48f0:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    48f4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    48f8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    48fc:	62000003 	andvs	r0, r0, #3
    4900:	6f747475 	svcvs	0x00747475
    4904:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4908:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    490c:	00000300 	andeq	r0, r0, r0, lsl #6
    4910:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4914:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4918:	00000004 	andeq	r0, r0, r4
    491c:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    4920:	00179002 	andseq	r9, r7, r2
    4924:	010c0300 	mrseq	r0, LR_mon
    4928:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    492c:	03062a05 	movweq	r2, #27141	; 0x6a05
    4930:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    4934:	02053405 	andeq	r3, r5, #83886080	; 0x5000000
    4938:	10053206 	andne	r3, r5, r6, lsl #4
    493c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4940:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4944:	060f0521 	streq	r0, [pc], -r1, lsr #10
    4948:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    494c:	21060405 	tstcs	r6, r5, lsl #8
    4950:	01060b05 	tsteq	r6, r5, lsl #22
    4954:	4b060405 	blmi	185970 <__ccfg+0x1659c8>
    4958:	01060705 	tsteq	r6, r5, lsl #14
    495c:	21060505 	tstcs	r6, r5, lsl #10
    4960:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    4964:	4f02052d 	svcmi	0x0002052d
    4968:	01060505 	tsteq	r6, r5, lsl #10
    496c:	2f060305 	svccs	0x00060305
    4970:	01061305 	tsteq	r6, r5, lsl #6
    4974:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    4978:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    497c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4980:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4984:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4988:	593e0602 	ldmdbpl	lr!, {r1, r9, sl}
    498c:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4990:	06020501 	streq	r0, [r2], -r1, lsl #10
    4994:	0605052f 	streq	r0, [r5], -pc, lsr #10
    4998:	06030501 	streq	r0, [r3], -r1, lsl #10
    499c:	060e052f 	streq	r0, [lr], -pc, lsr #10
    49a0:	22010501 	andcs	r0, r1, #4194304	; 0x400000
    49a4:	03060305 	movweq	r0, #25349	; 0x6305
    49a8:	0a052e75 	beq	150384 <__ccfg+0x1303dc>
    49ac:	6e030106 	adfvss	f0, f3, f6
    49b0:	0007024a 	andeq	r0, r7, sl, asr #4
    49b4:	019e0101 	orrseq	r0, lr, r1, lsl #2
    49b8:	00030000 	andeq	r0, r3, r0
    49bc:	0000013d 	andeq	r0, r0, sp, lsr r1
    49c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    49c4:	0101000d 	tsteq	r1, sp
    49c8:	00000101 	andeq	r0, r0, r1, lsl #2
    49cc:	00000100 	andeq	r0, r0, r0, lsl #2
    49d0:	6f682f01 	svcvs	0x00682f01
    49d4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4828 <__exidx_end+0x19b4>
    49d8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    49dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    49e0:	6f746b73 	svcvs	0x00746b73
    49e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    49e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    49ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    49f0:	2f534f43 	svccs	0x00534f43
    49f4:	4f636950 	svcmi	0x00636950
    49f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    49fc:	2f736269 	svccs	0x00736269
    4a00:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4a04:	2f006c61 	svccs	0x00006c61
    4a08:	2f727375 	svccs	0x00727375
    4a0c:	2f62696c 	svccs	0x0062696c
    4a10:	2f636367 	svccs	0x00636367
    4a14:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4a18:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4a1c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4a20:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4a24:	2f312e32 	svccs	0x00312e32
    4a28:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4a2c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4a30:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 497c <__exidx_end+0x1b08>
    4a34:	616d2f65 	cmnvs	sp, r5, ror #30
    4a38:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4a3c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4a40:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a44:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a48:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a4c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a50:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a54:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a58:	3143432f 	cmpcc	r3, pc, lsr #6
    4a5c:	00585833 	subseq	r5, r8, r3, lsr r8
    4a60:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 49ac <__exidx_end+0x1b38>
    4a64:	616d2f65 	cmnvs	sp, r5, ror #30
    4a68:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4a6c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4a70:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a74:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a78:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a7c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a80:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a84:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a88:	65730000 	ldrbvs	r0, [r3, #-0]!
    4a8c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 3b22 <__exidx_end+0xcae>
    4a90:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    4a94:	00000100 	andeq	r0, r0, r0, lsl #2
    4a98:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4a9c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4aa0:	00000200 	andeq	r0, r0, r0, lsl #4
    4aa4:	61647473 	smcvs	18243	; 0x4743
    4aa8:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4aac:	00000200 	andeq	r0, r0, r0, lsl #4
    4ab0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4ab4:	0300682e 	movweq	r6, #2094	; 0x82e
    4ab8:	616d0000 	cmnvs	sp, r0
    4abc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4ac0:	00000300 	andeq	r0, r0, r0, lsl #6
    4ac4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4ac8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4acc:	0300682e 	movweq	r6, #2094	; 0x82e
    4ad0:	75620000 	strbvc	r0, [r2, #-0]!
    4ad4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4ad8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4adc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4ae0:	73000003 	movwvc	r0, #3
    4ae4:	6f697379 	svcvs	0x00697379
    4ae8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4aec:	623c0000 	eorsvs	r0, ip, #0
    4af0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4af4:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4af8:	00000000 	andeq	r0, r0, r0
    4afc:	002c0500 	eoreq	r0, ip, r0, lsl #10
    4b00:	18080205 	stmdane	r8, {r0, r2, r9}
    4b04:	0b030000 	bleq	c4b0c <__ccfg+0xa4b64>
    4b08:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4b0c:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    4b10:	7a03062c 	bvc	c63c8 <__ccfg+0xa6420>
    4b14:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    4b18:	3c050526 	cfstr32cc	mvfx0, [r5], {38}	; 0x26
    4b1c:	30060305 	andcc	r0, r6, r5, lsl #6
    4b20:	010a033d 	tsteq	sl, sp, lsr r3
    4b24:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4b28:	060d052e 	streq	r0, [sp], -lr, lsr #10
    4b2c:	1e020522 	cfsh32ne	mvfx0, mvfx2, #18
    4b30:	0d052206 	sfmeq	f2, 4, [r5, #-24]	; 0xffffffe8
    4b34:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4b38:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4b3c:	4e020532 	mcrmi	5, 0, r0, cr2, cr2, {1}
    4b40:	01060605 	tsteq	r6, r5, lsl #12
    4b44:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    4b48:	3d210603 	stccc	6, cr0, [r1, #-12]!
    4b4c:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    4b50:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4b54:	01010009 	tsteq	r1, r9
    4b58:	000001af 	andeq	r0, r0, pc, lsr #3
    4b5c:	013c0003 	teqeq	ip, r3
    4b60:	01020000 	mrseq	r0, (UNDEF: 2)
    4b64:	000d0efb 	strdeq	r0, [sp], -fp
    4b68:	01010101 	tsteq	r1, r1, lsl #2
    4b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b70:	2f010000 	svccs	0x00010000
    4b74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4b78:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4b7c:	2f6e6974 	svccs	0x006e6974
    4b80:	6b736544 	blvs	1cde098 <__ccfg+0x1cbe0f0>
    4b84:	2f706f74 	svccs	0x00706f74
    4b88:	4f534c4f 	svcmi	0x00534c4f
    4b8c:	2f54454e 	svccs	0x0054454e
    4b90:	4f434950 	svcmi	0x00434950
    4b94:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4b98:	2f534f63 	svccs	0x00534f63
    4b9c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4ba0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4ba4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4ba8:	73752f00 	cmnvc	r5, #0, 30
    4bac:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4bb0:	63672f62 	cmnvs	r7, #392	; 0x188
    4bb4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4bb8:	6f6e2d6d 	svcvs	0x006e2d6d
    4bbc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4bc0:	2f696261 	svccs	0x00696261
    4bc4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4bc8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4bcc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4bd0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4bd4:	2f656d6f 	svccs	0x00656d6f
    4bd8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4bdc:	442f6e69 	strtmi	r6, [pc], #-3689	; 4be4 <__exidx_end+0x1d70>
    4be0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4be4:	4f2f706f 	svcmi	0x002f706f
    4be8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4bec:	502f5445 	eorpl	r5, pc, r5, asr #8
    4bf0:	534f4349 	movtpl	r4, #62281	; 0xf349
    4bf4:	6369502f 	cmnvs	r9, #47	; 0x2f
    4bf8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4bfc:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4c00:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4c04:	2f656d6f 	svccs	0x00656d6f
    4c08:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4c0c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4c14 <__exidx_end+0x1da0>
    4c10:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c14:	4f2f706f 	svcmi	0x002f706f
    4c18:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4c1c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4c20:	534f4349 	movtpl	r4, #62281	; 0xf349
    4c24:	6369502f 	cmnvs	r9, #47	; 0x2f
    4c28:	0000534f 	andeq	r5, r0, pc, asr #6
    4c2c:	5f726573 	svcpl	0x00726573
    4c30:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    4c34:	00010063 	andeq	r0, r1, r3, rrx
    4c38:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4c3c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4c40:	00020068 	andeq	r0, r2, r8, rrx
    4c44:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4c48:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    4c4c:	00020068 	andeq	r0, r2, r8, rrx
    4c50:	63726100 	cmnvs	r2, #0, 2
    4c54:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4c58:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4c5c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4c60:	00030068 	andeq	r0, r3, r8, rrx
    4c64:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4c68:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c6c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c70:	62000003 	andvs	r0, r0, #3
    4c74:	6f747475 	svcvs	0x00747475
    4c78:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4c7c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4c80:	00000300 	andeq	r0, r0, r0, lsl #6
    4c84:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4c88:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4c8c:	3c000004 	stccc	0, cr0, [r0], {4}
    4c90:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4c94:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    4c98:	0000003e 	andeq	r0, r0, lr, lsr r0
    4c9c:	2d050000 	stccs	0, cr0, [r5, #-0]
    4ca0:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    4ca4:	03000018 	movweq	r0, #24
    4ca8:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    4cac:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    4cb0:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    4cb4:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    4cb8:	06020536 			; <UNDEFINED> instruction: 0x06020536
    4cbc:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    4cc0:	20050501 	andcs	r0, r5, r1, lsl #10
    4cc4:	2f060305 	svccs	0x00060305
    4cc8:	01060f05 	tsteq	r6, r5, lsl #30
    4ccc:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4cd0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4cd4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4cd8:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4cdc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4ce0:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4ce4:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4ce8:	304f0205 	subcc	r0, pc, r5, lsl #4
    4cec:	01060905 	tsteq	r6, r5, lsl #18
    4cf0:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4cf4:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4cf8:	06020501 	streq	r0, [r2], -r1, lsl #10
    4cfc:	06010530 			; <UNDEFINED> instruction: 0x06010530
    4d00:	030a0513 	movweq	r0, #42259	; 0xa513
    4d04:	06026669 	streq	r6, [r2], -r9, ror #12
    4d08:	a1010100 	mrsge	r0, (UNDEF: 17)
    4d0c:	03000001 	movweq	r0, #1
    4d10:	00012600 	andeq	r2, r1, r0, lsl #12
    4d14:	fb010200 	blx	4551e <__ccfg+0x25576>
    4d18:	01000d0e 	tsteq	r0, lr, lsl #26
    4d1c:	00010101 	andeq	r0, r1, r1, lsl #2
    4d20:	00010000 	andeq	r0, r1, r0
    4d24:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4d28:	2f656d6f 	svccs	0x00656d6f
    4d2c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4d30:	442f6e69 	strtmi	r6, [pc], #-3689	; 4d38 <__exidx_end+0x1ec4>
    4d34:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4d38:	4f2f706f 	svcmi	0x002f706f
    4d3c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4d40:	502f5445 	eorpl	r5, pc, r5, asr #8
    4d44:	534f4349 	movtpl	r4, #62281	; 0xf349
    4d48:	6369502f 	cmnvs	r9, #47	; 0x2f
    4d4c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4d50:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4d54:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4d58:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4d5c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4d60:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4d64:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4d68:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4d6c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4d70:	61652d65 	cmnvs	r5, r5, ror #26
    4d74:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4d78:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4d7c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4d80:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4d84:	6f682f00 	svcvs	0x00682f00
    4d88:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4bdc <__exidx_end+0x1d68>
    4d8c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d90:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d94:	6f746b73 	svcvs	0x00746b73
    4d98:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d9c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4da0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4da4:	2f534f43 	svccs	0x00534f43
    4da8:	4f636950 	svcmi	0x00636950
    4dac:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4db0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4db4:	6f682f00 	svcvs	0x00682f00
    4db8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4c0c <__exidx_end+0x1d98>
    4dbc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4dc0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4dc4:	6f746b73 	svcvs	0x00746b73
    4dc8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4dcc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4dd0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4dd4:	2f534f43 	svccs	0x00534f43
    4dd8:	4f636950 	svcmi	0x00636950
    4ddc:	5f000053 	svcpl	0x00000053
    4de0:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4de4:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4de8:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    4dec:	00000100 	andeq	r0, r0, r0, lsl #2
    4df0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4df4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4df8:	00000200 	andeq	r0, r0, r0, lsl #4
    4dfc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4e00:	0300682e 	movweq	r6, #2094	; 0x82e
    4e04:	616d0000 	cmnvs	sp, r0
    4e08:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4e0c:	00000300 	andeq	r0, r0, r0, lsl #6
    4e10:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4e14:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4e18:	0300682e 	movweq	r6, #2094	; 0x82e
    4e1c:	75620000 	strbvc	r0, [r2, #-0]!
    4e20:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4e24:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e28:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4e2c:	73000003 	movwvc	r0, #3
    4e30:	6f697379 	svcvs	0x00697379
    4e34:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4e38:	05000000 	streq	r0, [r0, #-0]
    4e3c:	02050001 	andeq	r0, r5, #1
    4e40:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    4e44:	01011c03 	tsteq	r1, r3, lsl #24
    4e48:	3c062006 	stccc	0, cr2, [r6], {6}
    4e4c:	013c2603 	teqeq	ip, r3, lsl #12
    4e50:	5f030205 	svcpl	0x00030205
    4e54:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    4e58:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    4e5c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4e60:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    4e64:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4e68:	052f0603 	streq	r0, [pc, #-1539]!	; 486d <__exidx_end+0x19f9>
    4e6c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4e70:	0a053c07 	beq	153e94 <__ccfg+0x133eec>
    4e74:	06020528 	streq	r0, [r2], -r8, lsr #10
    4e78:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4e7c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4e80:	06060583 	streq	r0, [r6], -r3, lsl #11
    4e84:	211f2101 	tstcs	pc, r1, lsl #2
    4e88:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    4e8c:	06060521 	streq	r0, [r6], -r1, lsr #10
    4e90:	06020501 	streq	r0, [r2], -r1, lsl #10
    4e94:	06050521 	streq	r0, [r5], -r1, lsr #10
    4e98:	06030501 	streq	r0, [r3], -r1, lsl #10
    4e9c:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    4ea0:	060d054a 	streq	r0, [sp], -sl, asr #10
    4ea4:	20110501 	andscs	r0, r1, r1, lsl #10
    4ea8:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    4eac:	01010008 	tsteq	r1, r8
    4eb0:	0000024b 	andeq	r0, r0, fp, asr #4
    4eb4:	01250003 			; <UNDEFINED> instruction: 0x01250003
    4eb8:	01020000 	mrseq	r0, (UNDEF: 2)
    4ebc:	000d0efb 	strdeq	r0, [sp], -fp
    4ec0:	01010101 	tsteq	r1, r1, lsl #2
    4ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ec8:	2f010000 	svccs	0x00010000
    4ecc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4ed0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4ed4:	2f6e6974 	svccs	0x006e6974
    4ed8:	6b736544 	blvs	1cde3f0 <__ccfg+0x1cbe448>
    4edc:	2f706f74 	svccs	0x00706f74
    4ee0:	4f534c4f 	svcmi	0x00534c4f
    4ee4:	2f54454e 	svccs	0x0054454e
    4ee8:	4f434950 	svcmi	0x00434950
    4eec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4ef0:	2f534f63 	svccs	0x00534f63
    4ef4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4ef8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4efc:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4f00:	73752f00 	cmnvc	r5, #0, 30
    4f04:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4f08:	63672f62 	cmnvs	r7, #392	; 0x188
    4f0c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4f10:	6f6e2d6d 	svcvs	0x006e2d6d
    4f14:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4f18:	2f696261 	svccs	0x00696261
    4f1c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4f20:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4f24:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4f28:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4f2c:	2f656d6f 	svccs	0x00656d6f
    4f30:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4f34:	442f6e69 	strtmi	r6, [pc], #-3689	; 4f3c <__exidx_end+0x20c8>
    4f38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4f3c:	4f2f706f 	svcmi	0x002f706f
    4f40:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4f44:	502f5445 	eorpl	r5, pc, r5, asr #8
    4f48:	534f4349 	movtpl	r4, #62281	; 0xf349
    4f4c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4f50:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4f54:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4f58:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4f5c:	2f656d6f 	svccs	0x00656d6f
    4f60:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4f64:	442f6e69 	strtmi	r6, [pc], #-3689	; 4f6c <__exidx_end+0x20f8>
    4f68:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4f6c:	4f2f706f 	svcmi	0x002f706f
    4f70:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4f74:	502f5445 	eorpl	r5, pc, r5, asr #8
    4f78:	534f4349 	movtpl	r4, #62281	; 0xf349
    4f7c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4f80:	0000534f 	andeq	r5, r0, pc, asr #6
    4f84:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    4f88:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4f8c:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    4f90:	00000100 	andeq	r0, r0, r0, lsl #2
    4f94:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4f98:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4f9c:	00000200 	andeq	r0, r0, r0, lsl #4
    4fa0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4fa4:	0300682e 	movweq	r6, #2094	; 0x82e
    4fa8:	616d0000 	cmnvs	sp, r0
    4fac:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4fb0:	00000300 	andeq	r0, r0, r0, lsl #6
    4fb4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4fb8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4fbc:	0300682e 	movweq	r6, #2094	; 0x82e
    4fc0:	75620000 	strbvc	r0, [r2, #-0]!
    4fc4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4fc8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4fcc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4fd0:	73000003 	movwvc	r0, #3
    4fd4:	6f697379 	svcvs	0x00697379
    4fd8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4fdc:	05000000 	streq	r0, [r0, #-0]
    4fe0:	02050001 	andeq	r0, r5, #1
    4fe4:	0000192c 	andeq	r1, r0, ip, lsr #18
    4fe8:	01012203 	tsteq	r1, r3, lsl #4
    4fec:	3c062006 	stccc	0, cr2, [r6], {6}
    4ff0:	136b0205 	cmnne	fp, #1342177280	; 0x50000000
    4ff4:	10051613 	andne	r1, r5, r3, lsl r6
    4ff8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4ffc:	06030520 	streq	r0, [r3], -r0, lsr #10
    5000:	3f020530 	svccc	0x00020530
    5004:	01061d05 	tsteq	r6, r5, lsl #26
    5008:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
    500c:	0b05201d 	bleq	14d088 <__ccfg+0x12d0e0>
    5010:	20050520 	andcs	r0, r5, r0, lsr #10
    5014:	24060305 	strcs	r0, [r6], #-773	; 0xfffffcfb
    5018:	3002052f 	andcc	r0, r2, pc, lsr #10
    501c:	13060605 	movwne	r0, #26117	; 0x6605
    5020:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
    5024:	0606052f 	streq	r0, [r6], -pc, lsr #10
    5028:	06020501 	streq	r0, [r2], -r1, lsl #10
    502c:	16010130 			; <UNDEFINED> instruction: 0x16010130
    5030:	06050583 	streq	r0, [r5], -r3, lsl #11
    5034:	06030501 	streq	r0, [r3], -r1, lsl #10
    5038:	0606053d 			; <UNDEFINED> instruction: 0x0606053d
    503c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5040:	0607052f 	streq	r0, [r7], -pc, lsr #10
    5044:	21040501 	tstcs	r4, r1, lsl #10
    5048:	051f0705 	ldreq	r0, [pc, #-1797]	; 494b <__exidx_end+0x1ad7>
    504c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5050:	07053103 	streq	r3, [r5, -r3, lsl #2]
    5054:	06050106 	streq	r0, [r5], -r6, lsl #2
    5058:	06040520 	streq	r0, [r4], -r0, lsr #10
    505c:	3e02053e 	mcrcc	5, 0, r0, cr2, cr14, {1}
    5060:	01060605 	tsteq	r6, r5, lsl #12
    5064:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5068:	03052e13 	movweq	r2, #24083	; 0x5e13
    506c:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    5070:	03050106 	movweq	r0, #20742	; 0x5106
    5074:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    5078:	03050106 	movweq	r0, #20742	; 0x5106
    507c:	02052f06 	andeq	r2, r5, #6, 30
    5080:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5084:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    5088:	21060305 	tstcs	r6, r5, lsl #6
    508c:	01060605 	tsteq	r6, r5, lsl #12
    5090:	03051f21 	movweq	r1, #24353	; 0x5f21
    5094:	06052f06 	streq	r2, [r5], -r6, lsl #30
    5098:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    509c:	91402306 	cmpls	r0, r6, lsl #6
    50a0:	01060605 	tsteq	r6, r5, lsl #12
    50a4:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    50a8:	01060c05 	tsteq	r6, r5, lsl #24
    50ac:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    50b0:	02052107 	andeq	r2, r5, #-1073741823	; 0xc0000001
    50b4:	05054b06 	streq	r4, [r5, #-2822]	; 0xfffff4fa
    50b8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    50bc:	0a052406 	beq	14e0dc <__ccfg+0x12e134>
    50c0:	06050106 	streq	r0, [r5], -r6, lsl #2
    50c4:	1f0a059f 	svcne	0x000a059f
    50c8:	21060205 	tstcs	r6, r5, lsl #4
    50cc:	01060605 	tsteq	r6, r5, lsl #12
    50d0:	2f060205 	svccs	0x00060205
    50d4:	01060505 	tsteq	r6, r5, lsl #10
    50d8:	21060305 	tstcs	r6, r5, lsl #6
    50dc:	01060d05 	tsteq	r6, r5, lsl #26
    50e0:	2f060305 	svccs	0x00060305
    50e4:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    50e8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50ec:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    50f0:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    50f4:	01053a02 	tsteq	r5, r2, lsl #20
    50f8:	0d023006 	stceq	0, cr3, [r2, #-24]	; 0xffffffe8
    50fc:	bd010100 	stflts	f0, [r1, #-0]
    5100:	03000003 	movweq	r0, #3
    5104:	00013a00 	andeq	r3, r1, r0, lsl #20
    5108:	fb010200 	blx	45912 <__ccfg+0x2596a>
    510c:	01000d0e 	tsteq	r0, lr, lsl #26
    5110:	00010101 	andeq	r0, r1, r1, lsl #2
    5114:	00010000 	andeq	r0, r1, r0
    5118:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    511c:	2f656d6f 	svccs	0x00656d6f
    5120:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5124:	442f6e69 	strtmi	r6, [pc], #-3689	; 512c <__exidx_end+0x22b8>
    5128:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    512c:	4f2f706f 	svcmi	0x002f706f
    5130:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5134:	502f5445 	eorpl	r5, pc, r5, asr #8
    5138:	534f4349 	movtpl	r4, #62281	; 0xf349
    513c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5140:	502f534f 	eorpl	r5, pc, pc, asr #6
    5144:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5148:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    514c:	006c6169 	rsbeq	r6, ip, r9, ror #2
    5150:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5154:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5158:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    515c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5160:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5164:	61652d65 	cmnvs	r5, r5, ror #26
    5168:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    516c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    5170:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5174:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5178:	6f682f00 	svcvs	0x00682f00
    517c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4fd0 <__exidx_end+0x215c>
    5180:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5184:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5188:	6f746b73 	svcvs	0x00746b73
    518c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5190:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5194:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5198:	2f534f43 	svccs	0x00534f43
    519c:	4f636950 	svcmi	0x00636950
    51a0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    51a4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    51a8:	6f682f00 	svcvs	0x00682f00
    51ac:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5000 <__exidx_end+0x218c>
    51b0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    51b4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    51b8:	6f746b73 	svcvs	0x00746b73
    51bc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    51c0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    51c4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    51c8:	2f534f43 	svccs	0x00534f43
    51cc:	4f636950 	svcmi	0x00636950
    51d0:	76000053 			; <UNDEFINED> instruction: 0x76000053
    51d4:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    51d8:	0100632e 	tsteq	r0, lr, lsr #6
    51dc:	74730000 	ldrbtvc	r0, [r3], #-0
    51e0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    51e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    51e8:	74730000 	ldrbtvc	r0, [r3], #-0
    51ec:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    51f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    51f4:	72610000 	rsbvc	r0, r1, #0
    51f8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    51fc:	00000300 	andeq	r0, r0, r0, lsl #6
    5200:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5204:	0300682e 	movweq	r6, #2094	; 0x82e
    5208:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    520c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5210:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5214:	00000300 	andeq	r0, r0, r0, lsl #6
    5218:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    521c:	5f736e6f 	svcpl	0x00736e6f
    5220:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5224:	00030068 	andeq	r0, r3, r8, rrx
    5228:	73797300 	cmnvc	r9, #0, 6
    522c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5230:	00000400 	andeq	r0, r0, r0, lsl #8
    5234:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5238:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    523c:	00003e6e 	andeq	r3, r0, lr, ror #28
    5240:	05000000 	streq	r0, [r0, #-0]
    5244:	02050015 	andeq	r0, r5, #21
    5248:	00001a48 	andeq	r1, r0, r8, asr #20
    524c:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    5250:	06051303 	streq	r1, [r5], -r3, lsl #6
    5254:	0b050106 	bleq	145674 <__ccfg+0x1256cc>
    5258:	06040558 			; <UNDEFINED> instruction: 0x06040558
    525c:	060e053e 			; <UNDEFINED> instruction: 0x060e053e
    5260:	06030501 	streq	r0, [r3], -r1, lsl #10
    5264:	06040530 			; <UNDEFINED> instruction: 0x06040530
    5268:	59020501 	stmdbpl	r2, {r0, r8, sl}
    526c:	01000102 	tsteq	r0, r2, lsl #2
    5270:	00430501 	subeq	r0, r3, r1, lsl #10
    5274:	1a680205 	bne	1a05a90 <__ccfg+0x19e5ae8>
    5278:	06190000 	ldreq	r0, [r9], -r0
    527c:	2006052e 	andcs	r0, r6, lr, lsr #10
    5280:	1d030405 	cfstrsne	mvf0, [r3, #-20]	; 0xffffffec
    5284:	0305052e 	movweq	r0, #21806	; 0x552e
    5288:	07052028 	streq	r2, [r5, -r8, lsr #32]
    528c:	05207103 	streq	r7, [r0, #-259]!	; 0xfffffefd
    5290:	204a0306 	subcs	r0, sl, r6, lsl #6
    5294:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    5298:	03051413 	movweq	r1, #21523	; 0x5413
    529c:	03020518 	movweq	r0, #9496	; 0x2518
    52a0:	04050112 	streq	r0, [r5], #-274	; 0xfffffeee
    52a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    52a8:	03053006 	movweq	r3, #20486	; 0x5006
    52ac:	06050514 			; <UNDEFINED> instruction: 0x06050514
    52b0:	06030501 	streq	r0, [r3], -r1, lsl #10
    52b4:	06060530 			; <UNDEFINED> instruction: 0x06060530
    52b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    52bc:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    52c0:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    52c4:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    52c8:	05052d07 	streq	r2, [r5, #-3335]	; 0xfffff2f9
    52cc:	053d3d06 	ldreq	r3, [sp, #-3334]!	; 0xfffff2fa
    52d0:	00da0304 	sbcseq	r0, sl, r4, lsl #6
    52d4:	07055901 	streq	r5, [r5, -r1, lsl #18]
    52d8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    52dc:	7fa70306 	svcvc	0x00a70306
    52e0:	0605054a 	streq	r0, [r5], -sl, asr #10
    52e4:	2000c203 	andcs	ip, r0, r3, lsl #4
    52e8:	12052f06 	andne	r2, r5, #6, 30
    52ec:	03051006 	movweq	r1, #20486	; 0x5006
    52f0:	2e430306 	cdpcs	3, 4, cr0, cr3, cr6, {0}
    52f4:	01060605 	tsteq	r6, r5, lsl #12
    52f8:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    52fc:	01060605 	tsteq	r6, r5, lsl #12
    5300:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    5304:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5308:	00c90305 	sbceq	r0, r9, r5, lsl #6
    530c:	055959e4 	ldrbeq	r5, [r9, #-2532]	; 0xfffff61c
    5310:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5314:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    5318:	060c053c 			; <UNDEFINED> instruction: 0x060c053c
    531c:	31010501 	tstcc	r1, r1, lsl #10
    5320:	a9030405 	stmdbge	r3, {r0, r2, sl}
    5324:	05053c7f 	streq	r3, [r5, #-3199]	; 0xfffff381
    5328:	0f056806 	svceq	0x00056806
    532c:	13050501 	movwne	r0, #21761	; 0x5501
    5330:	13060c05 	movwne	r0, #27653	; 0x6c05
    5334:	052d1205 	streq	r1, [sp, #-517]!	; 0xfffffdfb
    5338:	052f0605 	streq	r0, [pc, #-1541]!	; 4d3b <__exidx_end+0x1ec7>
    533c:	0514060e 	ldreq	r0, [r4, #-1550]	; 0xfffff9f2
    5340:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    5344:	0513060e 	ldreq	r0, [r3, #-1550]	; 0xfffff9f2
    5348:	06052e14 			; <UNDEFINED> instruction: 0x06052e14
    534c:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    5350:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5354:	05390614 	ldreq	r0, [r9, #-1556]!	; 0xfffff9ec
    5358:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    535c:	052e0612 	streq	r0, [lr, #-1554]!	; 0xfffff9ee
    5360:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5364:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    5368:	12051320 	andne	r1, r5, #32, 6	; 0x80000000
    536c:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5370:	2d09052f 	cfstr32cs	mvfx0, [r9, #-188]	; 0xffffff44
    5374:	2f060505 	svccs	0x00060505
    5378:	01060805 	tsteq	r6, r5, lsl #16
    537c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    5380:	59300606 	ldmdbpl	r0!, {r1, r2, r9, sl}
    5384:	01060a05 	tsteq	r6, r5, lsl #20
    5388:	4c060505 	cfstr32mi	mvfx0, [r6], {5}
    538c:	03060c05 	movweq	r0, #27653	; 0x6c05
    5390:	0505016f 	streq	r0, [r5, #-367]	; 0xfffffe91
    5394:	06201103 	strteq	r1, [r0], -r3, lsl #2
    5398:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    539c:	014a063c 	cmpeq	sl, ip, lsr r6
    53a0:	20208274 	eorcs	r8, r0, r4, ror r2
    53a4:	252e204a 	strcs	r2, [lr, #-74]!	; 0xffffffb6
    53a8:	01060705 	tsteq	r6, r5, lsl #14
    53ac:	21060505 	tstcs	r6, r5, lsl #10
    53b0:	01060805 	tsteq	r6, r5, lsl #16
    53b4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    53b8:	13300606 	teqne	r0, #6291456	; 0x600000
    53bc:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    53c0:	051f0a05 	ldreq	r0, [pc, #-2565]	; 49c3 <__exidx_end+0x1b4f>
    53c4:	06052d08 	streq	r2, [r5], -r8, lsl #26
    53c8:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    53cc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    53d0:	07052013 	smladeq	r5, r3, r0, r2
    53d4:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    53d8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    53dc:	05300606 	ldreq	r0, [r0, #-1542]!	; 0xfffff9fa
    53e0:	6f030605 	svcvs	0x00030605
    53e4:	03060501 	movweq	r0, #25857	; 0x6501
    53e8:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    53ec:	3c062e01 	stccc	14, cr2, [r6], {1}
    53f0:	66014a06 	strvs	r4, [r1], -r6, lsl #20
    53f4:	582e0166 	stmdapl	lr!, {r1, r2, r5, r6, r8}
    53f8:	0c052e20 	stceq	14, cr2, [r5], {32}
    53fc:	060f0521 	streq	r0, [pc], -r1, lsr #10
    5400:	06060501 	streq	r0, [r6], -r1, lsl #10
    5404:	0513132f 	ldreq	r1, [r3, #-815]	; 0xfffffcd1
    5408:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    540c:	08052d0a 	stmdaeq	r5, {r1, r3, r8, sl, fp, sp}
    5410:	0606052d 	streq	r0, [r6], -sp, lsr #10
    5414:	14070521 	strne	r0, [r7], #-1313	; 0xfffffadf
    5418:	13060f05 	movwne	r0, #28421	; 0x6f05
    541c:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
    5420:	5a062d07 	bpl	190844 <__ccfg+0x17089c>
    5424:	01060a05 	tsteq	r6, r5, lsl #20
    5428:	47061505 	strmi	r1, [r6, -r5, lsl #10]
    542c:	01061705 	tsteq	r6, r5, lsl #14
    5430:	2e061305 	cdpcs	3, 0, cr1, cr6, cr5, {0}
    5434:	13060705 	movwne	r0, #26373	; 0x6705
    5438:	26060605 	strcs	r0, [r6], -r5, lsl #12
    543c:	4f050559 	svcmi	0x00050559
    5440:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    5444:	05051106 	streq	r1, [r5, #-262]	; 0xfffffefa
    5448:	134f062f 	movtne	r0, #63023	; 0xf62f
    544c:	4a0b0513 	bmi	2c68a0 <__ccfg+0x2a68f8>
    5450:	01060c05 	tsteq	r6, r5, lsl #24
    5454:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    5458:	4b3d0606 	blmi	f46c78 <__ccfg+0xf26cd0>
    545c:	03060a05 	movweq	r0, #27141	; 0x6a05
    5460:	02207fad 	eoreq	r7, r0, #692	; 0x2b4
    5464:	01010007 	tsteq	r1, r7
    5468:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    546c:	001c9802 	andseq	r9, ip, r2, lsl #16
    5470:	01900300 	orrseq	r0, r0, r0, lsl #6
    5474:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5478:	06350514 			; <UNDEFINED> instruction: 0x06350514
    547c:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
    5480:	06030532 			; <UNDEFINED> instruction: 0x06030532
    5484:	01056730 	tsteq	r5, r0, lsr r7
    5488:	01120306 	tsteq	r2, r6, lsl #6
    548c:	03060205 	movweq	r0, #25093	; 0x6205
    5490:	08053c72 	stmdaeq	r5, {r1, r4, r5, r6, sl, fp, ip, sp}
    5494:	06050106 	streq	r0, [r5], -r6, lsl #2
    5498:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    549c:	0615053f 			; <UNDEFINED> instruction: 0x0615053f
    54a0:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    54a4:	40060205 	andmi	r0, r6, r5, lsl #4
    54a8:	01060b05 	tsteq	r6, r5, lsl #22
    54ac:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    54b0:	0505200b 	streq	r2, [r5, #-11]
    54b4:	06030520 	streq	r0, [r3], -r0, lsr #10
    54b8:	02133d22 	andseq	r3, r3, #2176	; 0x880
    54bc:	01010002 	tsteq	r1, r2
    54c0:	000002c6 	andeq	r0, r0, r6, asr #5
    54c4:	013a0003 	teqeq	sl, r3
    54c8:	01020000 	mrseq	r0, (UNDEF: 2)
    54cc:	000d0efb 	strdeq	r0, [sp], -fp
    54d0:	01010101 	tsteq	r1, r1, lsl #2
    54d4:	01000000 	mrseq	r0, (UNDEF: 0)
    54d8:	2f010000 	svccs	0x00010000
    54dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    54e0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    54e4:	2f6e6974 	svccs	0x006e6974
    54e8:	6b736544 	blvs	1cdea00 <__ccfg+0x1cbea58>
    54ec:	2f706f74 	svccs	0x00706f74
    54f0:	4f534c4f 	svcmi	0x00534c4f
    54f4:	2f54454e 	svccs	0x0054454e
    54f8:	4f434950 	svcmi	0x00434950
    54fc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5500:	2f534f63 	svccs	0x00534f63
    5504:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5508:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    550c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5510:	73752f00 	cmnvc	r5, #0, 30
    5514:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5518:	63672f62 	cmnvs	r7, #392	; 0x188
    551c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5520:	6f6e2d6d 	svcvs	0x006e2d6d
    5524:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5528:	2f696261 	svccs	0x00696261
    552c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5530:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5534:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5538:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    553c:	2f656d6f 	svccs	0x00656d6f
    5540:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5544:	442f6e69 	strtmi	r6, [pc], #-3689	; 554c <__exidx_end+0x26d8>
    5548:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    554c:	4f2f706f 	svcmi	0x002f706f
    5550:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5554:	502f5445 	eorpl	r5, pc, r5, asr #8
    5558:	534f4349 	movtpl	r4, #62281	; 0xf349
    555c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5560:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5564:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5568:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    556c:	2f656d6f 	svccs	0x00656d6f
    5570:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5574:	442f6e69 	strtmi	r6, [pc], #-3689	; 557c <__exidx_end+0x2708>
    5578:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    557c:	4f2f706f 	svcmi	0x002f706f
    5580:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5584:	502f5445 	eorpl	r5, pc, r5, asr #8
    5588:	534f4349 	movtpl	r4, #62281	; 0xf349
    558c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5590:	0000534f 	andeq	r5, r0, pc, asr #6
    5594:	61637376 	smcvs	14134	; 0x3736
    5598:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    559c:	73000001 	movwvc	r0, #1
    55a0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    55a4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    55a8:	73000002 	movwvc	r0, #2
    55ac:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    55b0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    55b4:	61000002 	tstvs	r0, r2
    55b8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    55bc:	00030068 	andeq	r0, r3, r8, rrx
    55c0:	63616d00 	cmnvs	r1, #0, 26
    55c4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    55c8:	70000003 	andvc	r0, r0, r3
    55cc:	5f736e69 	svcpl	0x00736e69
    55d0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    55d4:	00030068 	andeq	r0, r3, r8, rrx
    55d8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    55dc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    55e0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    55e4:	0300682e 	movweq	r6, #2094	; 0x82e
    55e8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    55ec:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    55f0:	00040068 	andeq	r0, r4, r8, rrx
    55f4:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    55f8:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    55fc:	003e6e69 	eorseq	r6, lr, r9, ror #28
    5600:	00000000 	andeq	r0, r0, r0
    5604:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    5608:	001ce802 	andseq	lr, ip, r2, lsl #16
    560c:	02051900 	andeq	r1, r5, #0, 18
    5610:	013a0314 	teqeq	sl, r4, lsl r3
    5614:	01060505 	tsteq	r6, r5, lsl #10
    5618:	44033a05 	strmi	r3, [r3], #-2565	; 0xfffff5fb
    561c:	03050520 	movweq	r0, #21792	; 0x5520
    5620:	12052e3c 	andne	r2, r5, #60, 28	; 0x3c0
    5624:	4005053c 	andmi	r0, r5, ip, lsr r5
    5628:	0e031605 	cfmadd32eq	mvax0, mvfx1, mvfx3, mvfx5
    562c:	030b0520 	movweq	r0, #46368	; 0xb520
    5630:	08052e11 	stmdaeq	r5, {r0, r4, r9, sl, fp, sp}
    5634:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    5638:	01060905 	tsteq	r6, r5, lsl #18
    563c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    5640:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5644:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5648:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    564c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5650:	0305200f 	movweq	r2, #20495	; 0x500f
    5654:	03010520 	movweq	r0, #5408	; 0x1520
    5658:	0305ac2e 	movweq	sl, #23598	; 0x5c2e
    565c:	053c5203 	ldreq	r5, [ip, #-515]!	; 0xfffffdfd
    5660:	741b030b 	ldrvc	r0, [fp], #-779	; 0xfffffcf5
    5664:	2e060a05 	vmlacs.f32	s0, s12, s10
    5668:	01060b05 	tsteq	r6, r5, lsl #22
    566c:	ad060405 	cfstrsge	mvf0, [r6, #-20]	; 0xffffffec
    5670:	01060705 	tsteq	r6, r5, lsl #14
    5674:	30060405 	andcc	r0, r6, r5, lsl #8
    5678:	15060705 	strne	r0, [r6, #-1797]	; 0xfffff8fb
    567c:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    5680:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    5684:	05142f06 	ldreq	r2, [r4, #-3846]	; 0xfffff0fa
    5688:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    568c:	052f060b 	streq	r0, [pc, #-1547]!	; 5089 <__exidx_end+0x2215>
    5690:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5694:	1c05660c 	stcne	6, cr6, [r5], {12}
    5698:	2e2b052e 	cfsh64cs	mvdx0, mvdx11, #30
    569c:	054e0b05 	strbeq	r0, [lr, #-2821]	; 0xfffff4fb
    56a0:	053c060a 	ldreq	r0, [ip, #-1546]!	; 0xfffff9f6
    56a4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    56a8:	05830604 	streq	r0, [r3, #1540]	; 0x604
    56ac:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    56b0:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    56b4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    56b8:	052f0604 	streq	r0, [pc, #-1540]!	; 50bc <__exidx_end+0x2248>
    56bc:	20590311 	subscs	r0, r9, r1, lsl r3
    56c0:	2e66063c 	mcrcs	6, 3, r0, cr6, cr12, {1}
    56c4:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    56c8:	3c66063c 	stclcc	6, cr0, [r6], #-240	; 0xffffff10
    56cc:	01062001 	tsteq	r6, r1
    56d0:	3c743c06 	ldclcc	12, cr3, [r4], #-24	; 0xffffffe8
    56d4:	3c064a06 			; <UNDEFINED> instruction: 0x3c064a06
    56d8:	902e2174 	eorls	r2, lr, r4, ror r1
    56dc:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    56e0:	822e0601 	eorhi	r0, lr, #1048576	; 0x100000
    56e4:	064a2190 			; <UNDEFINED> instruction: 0x064a2190
    56e8:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    56ec:	06012e01 	streq	r2, [r1], -r1, lsl #28
    56f0:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    56f4:	3c066682 	stccc	6, cr6, [r6], {130}	; 0x82
    56f8:	053c3c3c 	ldreq	r3, [ip, #-3132]!	; 0xfffff3c4
    56fc:	0c057704 	stceq	7, cr7, [r5], {4}
    5700:	10050106 	andne	r0, r5, r6, lsl #2
    5704:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    5708:	2e6606ae 	cdpcs	6, 6, cr0, cr6, cr14, {5}
    570c:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    5710:	3c3c063c 	ldccc	6, cr0, [ip], #-240	; 0xffffff10
    5714:	01062e01 	tsteq	r6, r1, lsl #28
    5718:	3c823c06 	stccc	12, cr3, [r2], {6}
    571c:	06900692 			; <UNDEFINED> instruction: 0x06900692
    5720:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    5724:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    5728:	6674063c 			; <UNDEFINED> instruction: 0x6674063c
    572c:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    5730:	3c06723c 	sfmcc	f7, 4, [r6], {60}	; 0x3c
    5734:	21742e06 	cmncs	r4, r6, lsl #28
    5738:	013c903c 	teqeq	ip, ip, lsr r0
    573c:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5740:	2174902e 	cmncs	r4, lr, lsr #32
    5744:	144f0405 	strbne	r0, [pc], #-1029	; 574c <__exidx_end+0x28d8>
    5748:	01060b05 	tsteq	r6, r5, lsl #22
    574c:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    5750:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5754:	05130608 	ldreq	r0, [r3, #-1544]	; 0xfffff9f8
    5758:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    575c:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    5760:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5764:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5768:	0524060b 	streq	r0, [r4, #-1547]!	; 0xfffff9f5
    576c:	09030607 	stmdbeq	r3, {r0, r1, r2, r9, sl}
    5770:	060e0574 			; <UNDEFINED> instruction: 0x060e0574
    5774:	3e0b0501 	cfsh32cc	mvfx0, mvfx11, #1
    5778:	54030a05 	strpl	r0, [r3], #-2565	; 0xfffff5fb
    577c:	03110566 	tsteq	r1, #427819008	; 0x19800000
    5780:	16054a0a 	strne	r4, [r5], -sl, lsl #20
    5784:	00050251 	andeq	r0, r5, r1, asr r2
    5788:	01670101 	cmneq	r7, r1, lsl #2
    578c:	00020000 	andeq	r0, r2, r0
    5790:	00000147 	andeq	r0, r0, r7, asr #2
    5794:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5798:	0101000d 	tsteq	r1, sp
    579c:	00000101 	andeq	r0, r0, r1, lsl #2
    57a0:	00000100 	andeq	r0, r0, r0, lsl #2
    57a4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    57a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    57ac:	2f2e2e2f 	svccs	0x002e2e2f
    57b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    57b4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    57b8:	3a630062 	bcc	18c5948 <__ccfg+0x18a59a0>
    57bc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    57c0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    57c4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    57c8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    57cc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    57d0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    57d4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    57d8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    57dc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    57e0:	6f6f745c 	svcvs	0x006f745c
    57e4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    57e8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    57ec:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    57f0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    57f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    57fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5800:	5f342d69 	svcpl	0x00342d69
    5804:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5808:	33713531 	cmncc	r1, #205520896	; 0xc400000
    580c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5810:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5814:	61652d65 	cmnvs	r5, r5, ror #26
    5818:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    581c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5820:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5824:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5828:	6300656e 	movwvs	r6, #1390	; 0x56e
    582c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5830:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5834:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5838:	30302e30 	eorscc	r2, r0, r0, lsr lr
    583c:	5f393130 	svcpl	0x00393130
    5840:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5844:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5848:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    584c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5850:	6f745c36 	svcvs	0x00745c36
    5854:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5858:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    585c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5860:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5864:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5868:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    586c:	61652d65 	cmnvs	r5, r5, ror #26
    5870:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5874:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5878:	71353130 	teqvc	r5, r0, lsr r1
    587c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5880:	6f6e2d6d 	svcvs	0x006e2d6d
    5884:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5888:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    588c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5890:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5894:	00737973 	rsbseq	r7, r3, r3, ror r9
    5898:	6e6f6100 	powvse	f6, f7, f0
    589c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    58a0:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    58a4:	00010063 	andeq	r0, r1, r3, rrx
    58a8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    58ac:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    58b0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    58b4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    58b8:	00020068 	andeq	r0, r2, r8, rrx
    58bc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    58c0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    58c4:	0300682e 	movweq	r6, #2094	; 0x82e
    58c8:	6f610000 	svcvs	0x00610000
    58cc:	61625f6e 	cmnvs	r2, lr, ror #30
    58d0:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    58d4:	0100682e 	tsteq	r0, lr, lsr #16
    58d8:	00000000 	andeq	r0, r0, r0
    58dc:	20780205 	rsbscs	r0, r8, r5, lsl #4
    58e0:	3c030000 	stccc	0, cr0, [r3], {-0}
    58e4:	2f361a01 	svccs	0x00361a01
    58e8:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    58ec:	3d4c2e09 	stclcc	14, cr2, [ip, #-36]	; 0xffffffdc
    58f0:	01000902 	tsteq	r0, r2, lsl #18
    58f4:	0001a901 	andeq	sl, r1, r1, lsl #18
    58f8:	41000200 	mrsmi	r0, R8_usr
    58fc:	02000001 	andeq	r0, r0, #1
    5900:	0d0efb01 	vstreq	d15, [lr, #-4]
    5904:	01010100 	mrseq	r0, (UNDEF: 17)
    5908:	00000001 	andeq	r0, r0, r1
    590c:	01000001 	tsteq	r0, r1
    5910:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5914:	2f2e2e2f 	svccs	0x002e2e2f
    5918:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5920 <__exidx_end+0x2aac>
    591c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5920:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5924:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5928:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    592c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5930:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5934:	31303030 	teqcc	r0, r0, lsr r0
    5938:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    593c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5940:	61746562 	cmnvs	r4, r2, ror #10
    5944:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5948:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    594c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5784 <__exidx_end+0x2910>
    5950:	6f635c73 	svcvs	0x00635c73
    5954:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5958:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    595c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5960:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5964:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5968:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    596c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5970:	3130322d 	teqcc	r0, sp, lsr #4
    5974:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5978:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    597c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5980:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5984:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5988:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    598c:	616d5c65 	cmnvs	sp, r5, ror #24
    5990:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5994:	3a630065 	bcc	18c5b30 <__ccfg+0x18a5b88>
    5998:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    599c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    59a0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    59a4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    59a8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    59ac:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    59b0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    59b4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    59b8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    59bc:	6f6f745c 	svcvs	0x006f745c
    59c0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    59c4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    59c8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    59cc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    59d0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    59d4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    59d8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    59dc:	5f342d69 	svcpl	0x00342d69
    59e0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    59e4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    59e8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    59ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    59f0:	61652d65 	cmnvs	r5, r5, ror #26
    59f4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    59f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    59fc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5a00:	00007379 	andeq	r7, r0, r9, ror r3
    5a04:	5f6e6f61 	svcpl	0x006e6f61
    5a08:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    5a0c:	00010063 	andeq	r0, r1, r3, rrx
    5a10:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5a14:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5a18:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5a1c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5a20:	00020068 	andeq	r0, r2, r8, rrx
    5a24:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5a28:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5a2c:	0300682e 	movweq	r6, #2094	; 0x82e
    5a30:	6f610000 	svcvs	0x00610000
    5a34:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    5a38:	00682e63 	rsbeq	r2, r8, r3, ror #28
    5a3c:	00000001 	andeq	r0, r0, r1
    5a40:	00020500 	andeq	r0, r2, r0, lsl #10
    5a44:	03000000 	movweq	r0, #0
    5a48:	0200013e 	andeq	r0, r0, #-2147483633	; 0x8000000f
    5a4c:	0a030104 	beq	c5e64 <__ccfg+0xa5ebc>
    5a50:	04020001 	streq	r0, [r2], #-1
    5a54:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5a58:	001f0104 	andseq	r0, pc, r4, lsl #2
    5a5c:	21010402 	tstcs	r1, r2, lsl #8
    5a60:	01040200 	mrseq	r0, R12_usr
    5a64:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a68:	21302101 	teqcs	r0, r1, lsl #2
    5a6c:	01000802 	tsteq	r0, r2, lsl #16
    5a70:	02050001 	andeq	r0, r5, #1
    5a74:	000020a8 	andeq	r2, r0, r8, lsr #1
    5a78:	0100d703 	tsteq	r0, r3, lsl #14
    5a7c:	01040200 	mrseq	r0, R12_usr
    5a80:	00010c03 	andeq	r0, r1, r3, lsl #24
    5a84:	21010402 	tstcs	r1, r2, lsl #8
    5a88:	01040200 	mrseq	r0, R12_usr
    5a8c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    5a90:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5a94:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a98:	21010402 	tstcs	r1, r2, lsl #8
    5a9c:	00050231 	andeq	r0, r5, r1, lsr r2
    5aa0:	019c0101 	orrseq	r0, ip, r1, lsl #2
    5aa4:	00020000 	andeq	r0, r2, r0
    5aa8:	00000139 	andeq	r0, r0, r9, lsr r1
    5aac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5ab0:	0101000d 	tsteq	r1, sp
    5ab4:	00000101 	andeq	r0, r0, r1, lsl #2
    5ab8:	00000100 	andeq	r0, r0, r0, lsl #2
    5abc:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5ac0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ac4:	2f2e2e2f 	svccs	0x002e2e2f
    5ac8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5acc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5ad0:	3a630062 	bcc	18c5c60 <__ccfg+0x18a5cb8>
    5ad4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5ad8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5adc:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5ae0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5ae4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5ae8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5aec:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5af0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5af4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5af8:	6f6f745c 	svcvs	0x006f745c
    5afc:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5b00:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5b04:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5b08:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5b0c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b10:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b14:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b18:	5f342d69 	svcpl	0x00342d69
    5b1c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5b20:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5b24:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5b28:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5b2c:	61652d65 	cmnvs	r5, r5, ror #26
    5b30:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5b34:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5b38:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5b3c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5b40:	6300656e 	movwvs	r6, #1390	; 0x56e
    5b44:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5b48:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5b4c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5b50:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5b54:	5f393130 	svcpl	0x00393130
    5b58:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5b5c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5b60:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5b64:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5b68:	6f745c36 	svcvs	0x00745c36
    5b6c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5b70:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5b74:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5b78:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5b7c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5b80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5b84:	61652d65 	cmnvs	r5, r5, ror #26
    5b88:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5b8c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5b90:	71353130 	teqvc	r5, r0, lsr r1
    5b94:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5b98:	6f6e2d6d 	svcvs	0x006e2d6d
    5b9c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5ba0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5ba4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5ba8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5bac:	00737973 	rsbseq	r7, r3, r3, ror r9
    5bb0:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    5bb4:	0100632e 	tsteq	r0, lr, lsr #6
    5bb8:	645f0000 	ldrbvs	r0, [pc], #-0	; 5bc0 <__exidx_end+0x2d4c>
    5bbc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5bc0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5bc8 <__exidx_end+0x2d54>
    5bc4:	73657079 	cmnvc	r5, #121	; 0x79
    5bc8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5bcc:	735f0000 	cmpvc	pc, #0
    5bd0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5bd4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5bd8:	63000003 	movwvs	r0, #3
    5bdc:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    5be0:	00000100 	andeq	r0, r0, r0, lsl #2
    5be4:	02050000 	andeq	r0, r5, #0
    5be8:	000020c0 	andeq	r2, r0, r0, asr #1
    5bec:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
    5bf0:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    5bf4:	01010004 	tsteq	r1, r4
    5bf8:	00020500 	andeq	r0, r2, r0, lsl #10
    5bfc:	03000000 	movweq	r0, #0
    5c00:	030101c0 	movweq	r0, #4544	; 0x11c0
    5c04:	03020111 	movweq	r0, #8465	; 0x2111
    5c08:	00010100 	andeq	r0, r1, r0, lsl #2
    5c0c:	20c80205 	sbccs	r0, r8, r5, lsl #4
    5c10:	8d030000 	stchi	0, cr0, [r3, #-0]
    5c14:	12030102 	andne	r0, r3, #-2147483648	; 0x80000000
    5c18:	00040201 	andeq	r0, r4, r1, lsl #4
    5c1c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5c20:	00000002 	andeq	r0, r0, r2
    5c24:	02d80300 	sbcseq	r0, r8, #0, 6
    5c28:	01110301 	tsteq	r1, r1, lsl #6
    5c2c:	01000302 	tsteq	r0, r2, lsl #6
    5c30:	02050001 	andeq	r0, r5, #1
    5c34:	00000000 	andeq	r0, r0, r0
    5c38:	01039e03 	tsteq	r3, r3, lsl #28
    5c3c:	00040216 	andeq	r0, r4, r6, lsl r2
    5c40:	01e90101 	mvneq	r0, r1, lsl #2
    5c44:	00020000 	andeq	r0, r2, r0
    5c48:	00000167 	andeq	r0, r0, r7, ror #2
    5c4c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5c50:	0101000d 	tsteq	r1, sp
    5c54:	00000101 	andeq	r0, r0, r1, lsl #2
    5c58:	00000100 	andeq	r0, r0, r0, lsl #2
    5c5c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5c60:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c64:	2f2e2e2f 	svccs	0x002e2e2f
    5c68:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5c6c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5c70:	3a630062 	bcc	18c5e00 <__ccfg+0x18a5e58>
    5c74:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5c78:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5c7c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5c80:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5c84:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5c88:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5c8c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5c90:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5c94:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5c98:	6f6f745c 	svcvs	0x006f745c
    5c9c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5ca0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5ca4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5ca8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5cac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5cb0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5cb4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5cb8:	5f342d69 	svcpl	0x00342d69
    5cbc:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5cc0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5cc4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5cc8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ccc:	61652d65 	cmnvs	r5, r5, ror #26
    5cd0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5cd4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5cd8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5cdc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5ce0:	6300656e 	movwvs	r6, #1390	; 0x56e
    5ce4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5ce8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5cec:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5cf0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5cf4:	5f393130 	svcpl	0x00393130
    5cf8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5cfc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5d00:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5d04:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5d08:	6f745c36 	svcvs	0x00745c36
    5d0c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5d10:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5d14:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5d18:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5d1c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5d20:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5d24:	61652d65 	cmnvs	r5, r5, ror #26
    5d28:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5d2c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5d30:	71353130 	teqvc	r5, r0, lsr r1
    5d34:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5d38:	6f6e2d6d 	svcvs	0x006e2d6d
    5d3c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5d40:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5d44:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5d48:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5d4c:	00737973 	rsbseq	r7, r3, r3, ror r9
    5d50:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5d54:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    5d58:	00000100 	andeq	r0, r0, r0, lsl #2
    5d5c:	5f6e6f61 	svcpl	0x006e6f61
    5d60:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    5d64:	00010068 	andeq	r0, r1, r8, rrx
    5d68:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5d6c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5d70:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5d74:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5d78:	00020068 	andeq	r0, r2, r8, rrx
    5d7c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5d80:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5d84:	0300682e 	movweq	r6, #2094	; 0x82e
    5d88:	65730000 	ldrbvs	r0, [r3, #-0]!
    5d8c:	5f707574 	svcpl	0x00707574
    5d90:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    5d94:	00010068 	andeq	r0, r1, r8, rrx
    5d98:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    5d9c:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    5da0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5da4:	73000001 	movwvc	r0, #1
    5da8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    5dac:	0100682e 	tsteq	r0, lr, lsr #16
    5db0:	00000000 	andeq	r0, r0, r0
    5db4:	20d00205 	sbcscs	r0, r0, r5, lsl #4
    5db8:	8d030000 	stchi	0, cr0, [r3, #-0]
    5dbc:	03200102 			; <UNDEFINED> instruction: 0x03200102
    5dc0:	0200200a 	andeq	r2, r0, #10
    5dc4:	4f410104 	svcmi	0x00410104
    5dc8:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    5dcc:	0302041f 	movweq	r0, #9247	; 0x241f
    5dd0:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    5dd4:	7c860301 	stcvc	3, cr0, [r6], {1}
    5dd8:	0342363c 	movteq	r3, #9788	; 0x263c
    5ddc:	3d2d4a09 	vpushcc	{s8-s16}
    5de0:	2f1f2f2f 	svccs	0x001f2f2f
    5de4:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    5de8:	0a032548 	beq	cf310 <__ccfg+0xaf368>
    5dec:	3f5d4158 	svccc	0x005d4158
    5df0:	01001e02 	tsteq	r0, r2, lsl #28
    5df4:	02050001 	andeq	r0, r5, #1
    5df8:	000021a4 	andeq	r2, r0, r4, lsr #3
    5dfc:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    5e00:	33433028 	movtcc	r3, #12328	; 0x3028
    5e04:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    5e08:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    5e0c:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    5e10:	03207903 			; <UNDEFINED> instruction: 0x03207903
    5e14:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    5e18:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    5e1c:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    5e20:	4b69242d 	blmi	1a4eedc <__ccfg+0x1a2ef34>
    5e24:	01040200 	mrseq	r0, R12_usr
    5e28:	13024d27 	movwne	r4, #11559	; 0x2d27
    5e2c:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    5e30:	02000004 	andeq	r0, r0, #4
    5e34:	00016500 	andeq	r6, r1, r0, lsl #10
    5e38:	fb010200 	blx	46642 <__ccfg+0x2669a>
    5e3c:	01000d0e 	tsteq	r0, lr, lsl #26
    5e40:	00010101 	andeq	r0, r1, r1, lsl #2
    5e44:	00010000 	andeq	r0, r1, r0
    5e48:	2f2e0100 	svccs	0x002e0100
    5e4c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5e50:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e54:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    5e58:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    5e5c:	63006269 	movwvs	r6, #617	; 0x269
    5e60:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5e64:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5e68:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5e6c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5e70:	5f393130 	svcpl	0x00393130
    5e74:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5e78:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5e7c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5e80:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5e84:	6f745c36 	svcvs	0x00745c36
    5e88:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5e8c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5e90:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5e94:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5e98:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5e9c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ea0:	61652d65 	cmnvs	r5, r5, ror #26
    5ea4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5ea8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5eac:	71353130 	teqvc	r5, r0, lsr r1
    5eb0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5eb4:	6f6e2d6d 	svcvs	0x006e2d6d
    5eb8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5ebc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5ec0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5ec4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5ec8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5ecc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    5ed0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5ed4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5ed8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5edc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5ee0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5ee4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5ee8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5eec:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5ef0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5ef4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5ef8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5efc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5d94 <__exidx_end+0x2f20>
    5f00:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5f04:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5f08:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5f0c:	6f6e2d6d 	svcvs	0x006e2d6d
    5f10:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5f14:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5f18:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5f1c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5f20:	615c3371 	cmpvs	ip, r1, ror r3
    5f24:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5f28:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5f2c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5f30:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5f34:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5f38:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    5f3c:	65730000 	ldrbvs	r0, [r3, #-0]!
    5f40:	5f707574 	svcpl	0x00707574
    5f44:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    5f48:	00010063 	andeq	r0, r1, r3, rrx
    5f4c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5f50:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5f54:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5f58:	00000100 	andeq	r0, r0, r0, lsl #2
    5f5c:	5f737973 	svcpl	0x00737973
    5f60:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    5f64:	0100682e 	tsteq	r0, lr, lsr #16
    5f68:	645f0000 	ldrbvs	r0, [pc], #-0	; 5f70 <__exidx_end+0x30fc>
    5f6c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5f70:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5f78 <__exidx_end+0x3104>
    5f74:	73657079 	cmnvc	r5, #121	; 0x79
    5f78:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5f7c:	735f0000 	cmpvc	pc, #0
    5f80:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5f84:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5f88:	64000003 	strvs	r0, [r0], #-3
    5f8c:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    5f90:	00000100 	andeq	r0, r0, r0, lsl #2
    5f94:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    5f98:	00010068 	andeq	r0, r1, r8, rrx
    5f9c:	05000000 	streq	r0, [r0, #-0]
    5fa0:	00224802 	eoreq	r4, r2, r2, lsl #16
    5fa4:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    5fa8:	200b0301 	andcs	r0, fp, r1, lsl #6
    5fac:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    5fb0:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    5fb4:	0302042e 	movweq	r0, #9262	; 0x242e
    5fb8:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    5fbc:	7fa80301 	svcvc	0x00a80301
    5fc0:	03020420 	movweq	r0, #9248	; 0x2420
    5fc4:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    5fc8:	03010421 	movweq	r0, #5153	; 0x1421
    5fcc:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    5fd0:	652f214d 	strvs	r2, [pc, #-333]!	; 5e8b <__exidx_end+0x3017>
    5fd4:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    5fd8:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    5fdc:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    5fe0:	10033c73 	andne	r3, r3, r3, ror ip
    5fe4:	21212120 			; <UNDEFINED> instruction: 0x21212120
    5fe8:	000d0221 	andeq	r0, sp, r1, lsr #4
    5fec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5ff0:	0022c402 	eoreq	ip, r2, r2, lsl #8
    5ff4:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    5ff8:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    5ffc:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    6000:	7a03200e 	bvc	ce040 <__ccfg+0xae098>
    6004:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    6008:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    600c:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    6010:	01042130 	tsteq	r4, r0, lsr r1
    6014:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    6018:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    601c:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    6020:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    6024:	0015022d 	andseq	r0, r5, sp, lsr #4
    6028:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    602c:	00237002 	eoreq	r7, r3, r2
    6030:	049f0300 	ldreq	r0, [pc], #768	; 6038 <__exidx_end+0x31c4>
    6034:	010c0301 	tsteq	ip, r1, lsl #6
    6038:	03200903 			; <UNDEFINED> instruction: 0x03200903
    603c:	31212077 			; <UNDEFINED> instruction: 0x31212077
    6040:	30302733 	eorscc	r2, r0, r3, lsr r7
    6044:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    6048:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    604c:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    6050:	20760327 	rsbscs	r0, r6, r7, lsr #6
    6054:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    6058:	01010006 	tsteq	r1, r6
    605c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    6060:	03000023 	movweq	r0, #35	; 0x23
    6064:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    6068:	20790334 	rsbscs	r0, r9, r4, lsr r3
    606c:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    6070:	00010100 	andeq	r0, r1, r0, lsl #2
    6074:	00000205 	andeq	r0, r0, r5, lsl #4
    6078:	81030000 	mrshi	r0, (UNDEF: 3)
    607c:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    6080:	01000602 	tsteq	r0, r2, lsl #12
    6084:	02050001 	andeq	r0, r5, #1
    6088:	000023e4 	andeq	r2, r0, r4, ror #7
    608c:	01059503 	tsteq	r5, r3, lsl #10
    6090:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    6094:	01000602 	tsteq	r0, r2, lsl #12
    6098:	02050001 	andeq	r0, r5, #1
    609c:	000023f4 	strdeq	r2, [r0], -r4
    60a0:	0105b803 	tsteq	r5, r3, lsl #16
    60a4:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    60a8:	01000802 	tsteq	r0, r2, lsl #16
    60ac:	02050001 	andeq	r0, r5, #1
    60b0:	00002408 	andeq	r2, r0, r8, lsl #8
    60b4:	0105db03 	tsteq	r5, r3, lsl #22
    60b8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    60bc:	77032009 	strvc	r2, [r3, -r9]
    60c0:	20090320 	andcs	r0, r9, r0, lsr #6
    60c4:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    60c8:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    60cc:	27473230 	smlaldxcs	r3, r7, r0, r2
    60d0:	03473230 	movteq	r3, #29232	; 0x7230
    60d4:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    60d8:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    60dc:	00010100 	andeq	r0, r1, r0, lsl #2
    60e0:	246c0205 	strbtcs	r0, [ip], #-517	; 0xfffffdfb
    60e4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    60e8:	21150106 	tstcs	r5, r6, lsl #2
    60ec:	20090355 	andcs	r0, r9, r5, asr r3
    60f0:	01000302 	tsteq	r0, r2, lsl #6
    60f4:	02050001 	andeq	r0, r5, #1
    60f8:	00002480 	andeq	r2, r0, r0, lsl #9
    60fc:	0106bc03 	tsteq	r6, r3, lsl #24
    6100:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    6104:	03022009 	movweq	r2, #8201	; 0x2009
    6108:	00010100 	andeq	r0, r1, r0, lsl #2
    610c:	24940205 	ldrcs	r0, [r4], #517	; 0x205
    6110:	cf030000 	svcgt	0x00030000
    6114:	21150106 	tstcs	r5, r6, lsl #2
    6118:	20090355 	andcs	r0, r9, r5, asr r3
    611c:	01000302 	tsteq	r0, r2, lsl #6
    6120:	02050001 	andeq	r0, r5, #1
    6124:	000024a8 	andeq	r2, r0, r8, lsr #9
    6128:	0106e203 	tsteq	r6, r3, lsl #4
    612c:	2f432116 	svccs	0x00432116
    6130:	40207a03 	eormi	r7, r0, r3, lsl #20
    6134:	71032c35 	tstvc	r3, r5, lsr ip
    6138:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    613c:	01000302 	tsteq	r0, r2, lsl #6
    6140:	02050001 	andeq	r0, r5, #1
    6144:	000024d0 	ldrdeq	r2, [r0], -r0
    6148:	01078203 	tsteq	r7, r3, lsl #4
    614c:	06023316 			; <UNDEFINED> instruction: 0x06023316
    6150:	00010100 	andeq	r0, r1, r0, lsl #2
    6154:	24e00205 	strbtcs	r0, [r0], #517	; 0x205
    6158:	94030000 	strls	r0, [r3], #-0
    615c:	21160107 	tstcs	r6, r7, lsl #2
    6160:	33342943 	teqcc	r4, #1097728	; 0x10c000
    6164:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    6168:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    616c:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    6170:	01010005 	tsteq	r1, r5
    6174:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    6178:	03000025 	movweq	r0, #37	; 0x25
    617c:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    6180:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    6184:	00030220 	andeq	r0, r3, r0, lsr #4
    6188:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    618c:	00252002 	eoreq	r2, r5, r2
    6190:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    6194:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6198:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    619c:	01010003 	tsteq	r1, r3
    61a0:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    61a4:	03000025 	movweq	r0, #37	; 0x25
    61a8:	200102a7 	andcs	r0, r1, r7, lsr #5
    61ac:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    61b0:	2f4e211f 	svccs	0x004e211f
    61b4:	ac02d103 	stfged	f5, [r2], {3}
    61b8:	207db903 	rsbscs	fp, sp, r3, lsl #18
    61bc:	2002c703 	andcs	ip, r2, r3, lsl #14
    61c0:	207db903 	rsbscs	fp, sp, r3, lsl #18
    61c4:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    61c8:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    61cc:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    61d0:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    61d4:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    61d8:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    61dc:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    61e0:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    61e4:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    61e8:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    61ec:	00010100 	andeq	r0, r1, r0, lsl #2
    61f0:	26440205 	strbcs	r0, [r4], -r5, lsl #4
    61f4:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    61f8:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    61fc:	0e030104 	adfeqs	f0, f3, f4
    6200:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    6204:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    6208:	207a034b 	rsbscs	r0, sl, fp, asr #6
    620c:	02004134 	andeq	r4, r0, #52, 2
    6210:	5b3d0104 	blpl	f46628 <__ccfg+0xf26680>
    6214:	000b0231 	andeq	r0, fp, r1, lsr r2
    6218:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    621c:	0026a802 	eoreq	sl, r6, r2, lsl #16
    6220:	08930300 	ldmeq	r3, {r8, r9}
    6224:	01090301 	tsteq	r9, r1, lsl #6
    6228:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    622c:	01040200 	mrseq	r0, R12_usr
    6230:	07024b3d 	smladxeq	r2, sp, fp, r4
    6234:	00010100 	andeq	r0, r1, r0, lsl #2
    6238:	26d00205 	ldrbcs	r0, [r0], r5, lsl #4
    623c:	9b030000 	blls	c6244 <__ccfg+0xa629c>
    6240:	09030103 	stmdbeq	r3, {r0, r1, r8}
    6244:	3c770301 	ldclcc	3, cr0, [r7], #-4
    6248:	20090320 	andcs	r0, r9, r0, lsr #6
    624c:	03313052 	teqeq	r1, #82	; 0x52
    6250:	2b234a0a 	blcs	8d8a80 <__ccfg+0x8b8ad8>
    6254:	2f24484c 	svccs	0x0024484c
    6258:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    625c:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    6260:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 6120 <__exidx_end+0x32ac>
    6264:	4b845d2f 	blmi	fe11d728 <_estack+0xde118728>
    6268:	003d243d 	eorseq	r2, sp, sp, lsr r4
    626c:	4b010402 	blmi	4727c <__ccfg+0x272d4>
    6270:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    6274:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    6278:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    627c:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    6280:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    6284:	001f024a 	andseq	r0, pc, sl, asr #4
    6288:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    628c:	00020000 	andeq	r0, r2, r0
    6290:	000001a8 	andeq	r0, r0, r8, lsr #3
    6294:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6298:	0101000d 	tsteq	r1, sp
    629c:	00000101 	andeq	r0, r0, r1, lsl #2
    62a0:	00000100 	andeq	r0, r0, r0, lsl #2
    62a4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    62a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    62ac:	2f2e2e2f 	svccs	0x002e2e2f
    62b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    62b4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    62b8:	3a630062 	bcc	18c6448 <__ccfg+0x18a64a0>
    62bc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    62c0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    62c4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    62c8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    62cc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    62d0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    62d4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    62d8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    62dc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    62e0:	6f6f745c 	svcvs	0x006f745c
    62e4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    62e8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    62ec:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    62f0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    62f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    62f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    62fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6300:	5f342d69 	svcpl	0x00342d69
    6304:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6308:	33713531 	cmncc	r1, #205520896	; 0xc400000
    630c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6310:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6314:	61652d65 	cmnvs	r5, r5, ror #26
    6318:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    631c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6320:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6324:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6328:	6300656e 	movwvs	r6, #1390	; 0x56e
    632c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6330:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6334:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6338:	30302e30 	eorscc	r2, r0, r0, lsr lr
    633c:	5f393130 	svcpl	0x00393130
    6340:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6344:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6348:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    634c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6350:	6f745c36 	svcvs	0x00745c36
    6354:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6358:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    635c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6360:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6364:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6368:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    636c:	61652d65 	cmnvs	r5, r5, ror #26
    6370:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6374:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6378:	71353130 	teqvc	r5, r0, lsr r1
    637c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6380:	6f6e2d6d 	svcvs	0x006e2d6d
    6384:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6388:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    638c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6390:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6394:	00737973 	rsbseq	r7, r3, r3, ror r9
    6398:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    639c:	2f2e2e2f 	svccs	0x002e2e2f
    63a0:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    63a4:	0000636e 	andeq	r6, r0, lr, ror #6
    63a8:	5f737973 	svcpl	0x00737973
    63ac:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    63b0:	0100632e 	tsteq	r0, lr, lsr #6
    63b4:	6f610000 	svcvs	0x00610000
    63b8:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    63bc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    63c0:	6f000001 	svcvs	0x00000001
    63c4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    63c8:	00000100 	andeq	r0, r0, r0, lsl #2
    63cc:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    63d0:	0100682e 	tsteq	r0, lr, lsr #16
    63d4:	65730000 	ldrbvs	r0, [r3, #-0]!
    63d8:	5f707574 	svcpl	0x00707574
    63dc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    63e0:	00010068 	andeq	r0, r1, r8, rrx
    63e4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    63e8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    63ec:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    63f0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    63f4:	00020068 	andeq	r0, r2, r8, rrx
    63f8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    63fc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6400:	0300682e 	movweq	r6, #2094	; 0x82e
    6404:	77680000 	strbvc	r0, [r8, -r0]!
    6408:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    640c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6410:	00000400 	andeq	r0, r0, r0, lsl #8
    6414:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6418:	00010068 	andeq	r0, r1, r8, rrx
    641c:	73797300 	cmnvc	r9, #0, 6
    6420:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    6424:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    6428:	61000001 	tstvs	r0, r1
    642c:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    6430:	6f6d7461 	svcvs	0x006d7461
    6434:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    6438:	00000001 	andeq	r0, r0, r1
    643c:	00020500 	andeq	r0, r2, r0, lsl #10
    6440:	03000000 	movweq	r0, #0
    6444:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    6448:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    644c:	03010401 	movweq	r0, #5121	; 0x1401
    6450:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    6454:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    6458:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    645c:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    6460:	00010420 	andeq	r0, r1, r0, lsr #8
    6464:	03010402 	movweq	r0, #5122	; 0x1402
    6468:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    646c:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    6470:	89670104 	stmdbhi	r7!, {r2, r8}^
    6474:	4a09034b 	bmi	2471a8 <__ccfg+0x227200>
    6478:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    647c:	01045801 	tsteq	r4, r1, lsl #16
    6480:	4a7ee403 	bmi	1fbf494 <__ccfg+0x1f9f4ec>
    6484:	01040200 	mrseq	r0, R12_usr
    6488:	0304045d 	movweq	r0, #17501	; 0x445d
    648c:	00740381 	rsbseq	r0, r4, r1, lsl #7
    6490:	03010402 	movweq	r0, #5122	; 0x1402
    6494:	01043c14 	tsteq	r4, r4, lsl ip
    6498:	01040200 	mrseq	r0, R12_usr
    649c:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    64a0:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    64a4:	1c322e03 	ldcne	14, cr2, [r2], #-12
    64a8:	20420324 	subcs	r0, r2, r4, lsr #6
    64ac:	01040200 	mrseq	r0, R12_usr
    64b0:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    64b4:	04020001 	streq	r0, [r2], #-1
    64b8:	7cf70301 	ldclvc	3, cr0, [r7], #4
    64bc:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    64c0:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    64c4:	1b24384b 	blne	9145f8 <__ccfg+0x8f4650>
    64c8:	e7030404 	str	r0, [r3, -r4, lsl #8]
    64cc:	02002e02 	andeq	r2, r0, #2, 28
    64d0:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    64d4:	0001043c 	andeq	r0, r1, ip, lsr r4
    64d8:	03010402 	movweq	r0, #5122	; 0x1402
    64dc:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    64e0:	01001702 	tsteq	r0, r2, lsl #14
    64e4:	02050001 	andeq	r0, r5, #1
    64e8:	00002820 	andeq	r2, r0, r0, lsr #16
    64ec:	0101da03 	tsteq	r1, r3, lsl #20
    64f0:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    64f4:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    64f8:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    64fc:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    6500:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    6504:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    6508:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    650c:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    6510:	1b32432e 	blne	c971d0 <__ccfg+0xc77228>
    6514:	03050433 	movweq	r0, #21555	; 0x5433
    6518:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    651c:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    6520:	51030504 	tstpl	r3, r4, lsl #10
    6524:	0301042e 	movweq	r0, #5166	; 0x142e
    6528:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    652c:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    6530:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    6534:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    6538:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    653c:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    6540:	58060104 	stmdapl	r6, {r2, r8}
    6544:	4a0f0306 	bmi	3c7164 <__ccfg+0x3a71bc>
    6548:	2a2f3fca 	bcs	bd6478 <__ccfg+0xbb64d0>
    654c:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    6550:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    6554:	213e3d3e 	teqcs	lr, lr, lsr sp
    6558:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    655c:	31202603 			; <UNDEFINED> instruction: 0x31202603
    6560:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    6564:	0b03213e 	bleq	cea64 <__ccfg+0xaeabc>
    6568:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    656c:	2009033c 	andcs	r0, r9, ip, lsr r3
    6570:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    6574:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    6578:	0f032071 	svceq	0x00032071
    657c:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    6580:	21226521 			; <UNDEFINED> instruction: 0x21226521
    6584:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    6588:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    658c:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    6590:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    6594:	01002102 	tsteq	r0, r2, lsl #2
    6598:	02050001 	andeq	r0, r5, #1
    659c:	00002a40 	andeq	r2, r0, r0, asr #20
    65a0:	0103b603 	tsteq	r3, r3, lsl #12
    65a4:	2f224027 	svccs	0x00224027
    65a8:	404e24a2 	submi	r2, lr, r2, lsr #9
    65ac:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    65b0:	01010009 	tsteq	r1, r9
    65b4:	00020500 	andeq	r0, r2, r0, lsl #10
    65b8:	03000000 	movweq	r0, #0
    65bc:	030103e5 	movweq	r0, #5093	; 0x13e5
    65c0:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    65c4:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    65c8:	211f322d 	tstcs	pc, sp, lsr #4
    65cc:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    65d0:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    65d4:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    65d8:	0c023e1e 	stceq	14, cr3, [r2], {30}
    65dc:	00010100 	andeq	r0, r1, r0, lsl #2
    65e0:	2aa00205 	bcs	fe806dfc <_estack+0xde801dfc>
    65e4:	a6030000 	strge	r0, [r3], -r0
    65e8:	3f130104 	svccc	0x00130104
    65ec:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    65f0:	2b010100 	blcs	469f8 <__ccfg+0x26a50>
    65f4:	02000002 	andeq	r0, r0, #2
    65f8:	00014300 	andeq	r4, r1, r0, lsl #6
    65fc:	fb010200 	blx	46e06 <__ccfg+0x26e5e>
    6600:	01000d0e 	tsteq	r0, lr, lsl #26
    6604:	00010101 	andeq	r0, r1, r1, lsl #2
    6608:	00010000 	andeq	r0, r1, r0
    660c:	2f2e0100 	svccs	0x002e0100
    6610:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6614:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6618:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    661c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6620:	63006269 	movwvs	r6, #617	; 0x269
    6624:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6628:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    662c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6630:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6634:	5f393130 	svcpl	0x00393130
    6638:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    663c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6640:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6644:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6648:	6f745c36 	svcvs	0x00745c36
    664c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6650:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6654:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6658:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    665c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6660:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6664:	61652d65 	cmnvs	r5, r5, ror #26
    6668:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    666c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6670:	71353130 	teqvc	r5, r0, lsr r1
    6674:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6678:	6f6e2d6d 	svcvs	0x006e2d6d
    667c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6680:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6684:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6688:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    668c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6690:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6694:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6698:	63635c69 	cmnvs	r3, #26880	; 0x6900
    669c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    66a0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    66a4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    66a8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    66ac:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    66b0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    66b4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    66b8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    66bc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    66c0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6558 <__exidx_end+0x36e4>
    66c4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    66c8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    66cc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    66d0:	6f6e2d6d 	svcvs	0x006e2d6d
    66d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    66d8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    66dc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    66e0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    66e4:	615c3371 	cmpvs	ip, r1, ror r3
    66e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    66ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    66f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    66f4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    66f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    66fc:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6700:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    6704:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    6708:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    670c:	00000100 	andeq	r0, r0, r0, lsl #2
    6710:	70696863 	rsbvc	r6, r9, r3, ror #16
    6714:	6f666e69 	svcvs	0x00666e69
    6718:	0100682e 	tsteq	r0, lr, lsr #16
    671c:	645f0000 	ldrbvs	r0, [pc], #-0	; 6724 <__exidx_end+0x38b0>
    6720:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6724:	745f746c 	ldrbvc	r7, [pc], #-1132	; 672c <__exidx_end+0x38b8>
    6728:	73657079 	cmnvc	r5, #121	; 0x79
    672c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6730:	735f0000 	cmpvc	pc, #0
    6734:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6738:	00682e74 	rsbeq	r2, r8, r4, ror lr
    673c:	00000003 	andeq	r0, r0, r3
    6740:	00020500 	andeq	r0, r2, r0, lsl #10
    6744:	03000000 	movweq	r0, #0
    6748:	130100c4 	movwne	r0, #4292	; 0x10c4
    674c:	0006022f 	andeq	r0, r6, pc, lsr #4
    6750:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6754:	00000002 	andeq	r0, r0, r2
    6758:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    675c:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    6760:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    6764:	00010100 	andeq	r0, r1, r0, lsl #2
    6768:	2ab80205 	bcs	fee06f84 <_estack+0xdee01f84>
    676c:	e6030000 	str	r0, [r3], -r0
    6770:	2a1a0100 	bcs	686b78 <__ccfg+0x666bd0>
    6774:	0302044e 	movweq	r0, #9294	; 0x244e
    6778:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    677c:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    6780:	4b4c232e 	blmi	130f440 <__ccfg+0x12ef498>
    6784:	242f724b 	strtcs	r7, [pc], #-587	; 678c <__exidx_end+0x3918>
    6788:	01000502 	tsteq	r0, r2, lsl #10
    678c:	02050001 	andeq	r0, r5, #1
    6790:	00000000 	andeq	r0, r0, r0
    6794:	01018303 	tsteq	r1, r3, lsl #6
    6798:	b0030204 	andlt	r0, r3, r4, lsl #4
    679c:	01042001 	tsteq	r4, r1
    67a0:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    67a4:	03233139 			; <UNDEFINED> instruction: 0x03233139
    67a8:	0a033c78 	beq	d5990 <__ccfg+0xb59e8>
    67ac:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    67b0:	00050225 	andeq	r0, r5, r5, lsr #4
    67b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    67b8:	002b0402 	eoreq	r0, fp, r2, lsl #8
    67bc:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    67c0:	03020401 	movweq	r0, #9217	; 0x2401
    67c4:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    67c8:	6f032e11 	svcvs	0x00032e11
    67cc:	2011033c 	andscs	r0, r1, ip, lsr r3
    67d0:	03010425 	movweq	r0, #5157	; 0x1425
    67d4:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    67d8:	21222195 			; <UNDEFINED> instruction: 0x21222195
    67dc:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    67e0:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    67e4:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    67e8:	03206403 			; <UNDEFINED> instruction: 0x03206403
    67ec:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    67f0:	00010100 	andeq	r0, r1, r0, lsl #2
    67f4:	2b700205 	blcs	1c07010 <__ccfg+0x1be7068>
    67f8:	e0030000 	and	r0, r3, r0
    67fc:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6800:	2001a403 	andcs	sl, r1, r3, lsl #8
    6804:	dd030104 	stfles	f0, [r3, #-16]
    6808:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    680c:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    6810:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    6814:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    6818:	09030104 	stmdbeq	r3, {r2, r8}
    681c:	0002022e 	andeq	r0, r2, lr, lsr #4
    6820:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    6824:	00020000 	andeq	r0, r2, r0
    6828:	00000142 	andeq	r0, r0, r2, asr #2
    682c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6830:	0101000d 	tsteq	r1, sp
    6834:	00000101 	andeq	r0, r0, r1, lsl #2
    6838:	00000100 	andeq	r0, r0, r0, lsl #2
    683c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6840:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6844:	2f2e2e2f 	svccs	0x002e2e2f
    6848:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    684c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6850:	3a630062 	bcc	18c69e0 <__ccfg+0x18a6a38>
    6854:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6858:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    685c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6860:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6864:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6868:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    686c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6870:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6874:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6878:	6f6f745c 	svcvs	0x006f745c
    687c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6880:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6884:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6888:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    688c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6890:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6894:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6898:	5f342d69 	svcpl	0x00342d69
    689c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    68a0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    68a4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    68a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    68ac:	61652d65 	cmnvs	r5, r5, ror #26
    68b0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    68b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    68b8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    68bc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    68c0:	6300656e 	movwvs	r6, #1390	; 0x56e
    68c4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    68c8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    68cc:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    68d0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    68d4:	5f393130 	svcpl	0x00393130
    68d8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    68dc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    68e0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    68e4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    68e8:	6f745c36 	svcvs	0x00745c36
    68ec:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    68f0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    68f4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    68f8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    68fc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6900:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6904:	61652d65 	cmnvs	r5, r5, ror #26
    6908:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    690c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6910:	71353130 	teqvc	r5, r0, lsr r1
    6914:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6918:	6f6e2d6d 	svcvs	0x006e2d6d
    691c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6920:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6924:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6928:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    692c:	00737973 	rsbseq	r7, r3, r3, ror r9
    6930:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    6934:	0100682e 	tsteq	r0, lr, lsr #16
    6938:	64640000 	strbtvs	r0, [r4], #-0
    693c:	00632e69 	rsbeq	r2, r3, r9, ror #28
    6940:	5f000001 	svcpl	0x00000001
    6944:	61666564 	cmnvs	r6, r4, ror #10
    6948:	5f746c75 	svcpl	0x00746c75
    694c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6950:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6954:	5f000002 	svcpl	0x00000002
    6958:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    695c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6960:	00000300 	andeq	r0, r0, r0, lsl #6
    6964:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    6968:	00010068 	andeq	r0, r1, r8, rrx
    696c:	05000000 	streq	r0, [r0, #-0]
    6970:	002b8802 	eoreq	r8, fp, r2, lsl #16
    6974:	01880300 	orreq	r0, r8, r0, lsl #6
    6978:	30312001 	eorscc	r2, r1, r1
    697c:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    6980:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    6984:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6988:	02050002 	andeq	r0, r5, #2
    698c:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
    6990:	0100c303 	tsteq	r0, r3, lsl #6
    6994:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    6998:	01010004 	tsteq	r1, r4
    699c:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69a0:	00000002 	andeq	r0, r0, r2
    69a4:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    69a8:	010e0301 	tsteq	lr, r1, lsl #6
    69ac:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    69b0:	4f35352e 	svcmi	0x0035352e
    69b4:	01000402 	tsteq	r0, r2, lsl #8
    69b8:	00020401 	andeq	r0, r2, r1, lsl #8
    69bc:	00000205 	andeq	r0, r0, r5, lsl #4
    69c0:	85030000 	strhi	r0, [r3, #-0]
    69c4:	11030101 	tstne	r3, r1, lsl #2
    69c8:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    69cc:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    69d0:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    69d4:	7103342e 	tstvc	r3, lr, lsr #8
    69d8:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    69dc:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    69e0:	01010002 	tsteq	r1, r2
    69e4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69e8:	00000002 	andeq	r0, r0, r2
    69ec:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    69f0:	20110301 	andscs	r0, r1, r1, lsl #6
    69f4:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    69f8:	2f201303 	svccs	0x00201303
    69fc:	69030104 	stmdbvs	r3, {r2, r8}
    6a00:	234d3020 	movtcs	r3, #53280	; 0xd020
    6a04:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    6a08:	1d030204 	sfmne	f0, 4, [r3, #-16]
    6a0c:	0005022e 	andeq	r0, r5, lr, lsr #4
    6a10:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6a14:	00020500 	andeq	r0, r2, r0, lsl #10
    6a18:	03000000 	movweq	r0, #0
    6a1c:	030101de 	movweq	r0, #4574	; 0x11de
    6a20:	031b2011 	tsteq	fp, #17
    6a24:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    6a28:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    6a2c:	7fb90301 	svcvc	0x00b90301
    6a30:	234d3020 	movtcs	r3, #53280	; 0xd020
    6a34:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    6a38:	c8030204 	stmdagt	r3, {r2, r9}
    6a3c:	02422e00 	subeq	r2, r2, #0, 28
    6a40:	01010005 	tsteq	r1, r5
    6a44:	000002d6 	ldrdeq	r0, [r0], -r6
    6a48:	017c0002 	cmneq	ip, r2
    6a4c:	01020000 	mrseq	r0, (UNDEF: 2)
    6a50:	000d0efb 	strdeq	r0, [sp], -fp
    6a54:	01010101 	tsteq	r1, r1, lsl #2
    6a58:	01000000 	mrseq	r0, (UNDEF: 0)
    6a5c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6a60:	2f2e2e2f 	svccs	0x002e2e2f
    6a64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a68:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6a6c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6a70:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6a74:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6a78:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6a7c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6a80:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6a84:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6a88:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6a8c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6a90:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6a94:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a98:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6a9c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6aa0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6938 <__exidx_end+0x3ac4>
    6aa4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6aa8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6aac:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6ab0:	6f6e2d6d 	svcvs	0x006e2d6d
    6ab4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6ab8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6abc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6ac0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6ac4:	615c3371 	cmpvs	ip, r1, ror r3
    6ac8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6acc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6ad0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6ad4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6ad8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6adc:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6ae0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6ae4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ae8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6aec:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6af0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6af4:	31303030 	teqcc	r0, r0, lsr r0
    6af8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6afc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6b00:	61746562 	cmnvs	r4, r2, ror #10
    6b04:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6b08:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6b0c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6944 <__exidx_end+0x3ad0>
    6b10:	6f635c73 	svcvs	0x00635c73
    6b14:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6b18:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6b1c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6b20:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b24:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b28:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b2c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6b30:	3130322d 	teqcc	r0, sp, lsr #4
    6b34:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6b38:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6b3c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6b40:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6b44:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6b48:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6b4c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6b50:	2f2e0073 	svccs	0x002e0073
    6b54:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6b58:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6b60:	736f0000 	cmnvc	pc, #0
    6b64:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6b68:	6f000001 	svcvs	0x00000001
    6b6c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    6b70:	00000100 	andeq	r0, r0, r0, lsl #2
    6b74:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6b78:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6b7c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6b80:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6b84:	00000200 	andeq	r0, r0, r0, lsl #4
    6b88:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6b8c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6b90:	00030068 	andeq	r0, r3, r8, rrx
    6b94:	5f776800 	svcpl	0x00776800
    6b98:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6ba0:	72000004 	andvc	r0, r0, #4
    6ba4:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6ba8:	00000100 	andeq	r0, r0, r0, lsl #2
    6bac:	5f6e6f61 	svcpl	0x006e6f61
    6bb0:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6bb4:	00010068 	andeq	r0, r1, r8, rrx
    6bb8:	6e6f6100 	powvse	f6, f7, f0
    6bbc:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    6bc0:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    6bc4:	00010068 	andeq	r0, r1, r8, rrx
    6bc8:	05000000 	streq	r0, [r0, #-0]
    6bcc:	002bb802 	eoreq	fp, fp, r2, lsl #16
    6bd0:	00e50300 	rsceq	r0, r5, r0, lsl #6
    6bd4:	0f032001 	svceq	0x00032001
    6bd8:	20710320 	rsbscs	r0, r1, r0, lsr #6
    6bdc:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    6be0:	309e0903 	addscc	r0, lr, r3, lsl #18
    6be4:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    6be8:	000702a3 	andeq	r0, r7, r3, lsr #5
    6bec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6bf0:	002c1402 	eoreq	r1, ip, r2, lsl #8
    6bf4:	01a00300 	lsleq	r0, r0, #6
    6bf8:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    6bfc:	7a038822 	bvc	e8c8c <__ccfg+0xc8ce4>
    6c00:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    6c04:	01010006 	tsteq	r1, r6
    6c08:	00020500 	andeq	r0, r2, r0, lsl #10
    6c0c:	03000000 	movweq	r0, #0
    6c10:	200101c2 	andcs	r0, r1, r2, asr #3
    6c14:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    6c18:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    6c1c:	00262e7a 	eoreq	r2, r6, sl, ror lr
    6c20:	03010402 	movweq	r0, #5122	; 0x1402
    6c24:	0200207a 	andeq	r2, r0, #122	; 0x7a
    6c28:	30500104 	subscc	r0, r0, r4, lsl #2
    6c2c:	241f302d 	ldrcs	r3, [pc], #-45	; 6c34 <__exidx_end+0x3dc0>
    6c30:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 6c38 <__exidx_end+0x3dc4>
    6c34:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    6c38:	1003666d 	andne	r6, r3, sp, ror #12
    6c3c:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    6c40:	00010100 	andeq	r0, r1, r0, lsl #2
    6c44:	00000205 	andeq	r0, r0, r5, lsl #4
    6c48:	f3030000 	vhadd.u8	d0, d3, d0
    6c4c:	4b210101 	blmi	847058 <__ccfg+0x8270b0>
    6c50:	01000702 	tsteq	r0, r2, lsl #14
    6c54:	02050001 	andeq	r0, r5, #1
    6c58:	00000000 	andeq	r0, r0, r0
    6c5c:	01028003 	tsteq	r2, r3
    6c60:	03020424 	movweq	r0, #9252	; 0x2424
    6c64:	01045822 	tsteq	r4, r2, lsr #16
    6c68:	04826203 	streq	r6, [r2], #515	; 0x203
    6c6c:	203c0302 	eorscs	r0, ip, r2, lsl #6
    6c70:	4a030104 	bmi	c7088 <__ccfg+0xa70e0>
    6c74:	211f3d4a 	tstcs	pc, sl, asr #26
    6c78:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    6c7c:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    6c80:	01000c02 	tsteq	r0, r2, lsl #24
    6c84:	02050001 	andeq	r0, r5, #1
    6c88:	00000000 	andeq	r0, r0, r0
    6c8c:	0102a303 	tsteq	r2, r3, lsl #6
    6c90:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    6c94:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    6c98:	4a6d0301 	bmi	1b478a4 <__ccfg+0x1b278fc>
    6c9c:	0009024b 	andeq	r0, r9, fp, asr #4
    6ca0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6ca4:	00000002 	andeq	r0, r0, r2
    6ca8:	02bc0300 	adcseq	r0, ip, #0, 6
    6cac:	17032201 	strne	r2, [r3, -r1, lsl #4]
    6cb0:	20690320 	rsbcs	r0, r9, r0, lsr #6
    6cb4:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    6cb8:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    6cbc:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    6cc0:	20130358 	andscs	r0, r3, r8, asr r3
    6cc4:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    6cc8:	023f2011 	eorseq	r2, pc, #17
    6ccc:	01010006 	tsteq	r1, r6
    6cd0:	00020500 	andeq	r0, r2, r0, lsl #10
    6cd4:	03000000 	movweq	r0, #0
    6cd8:	030102e3 	movweq	r0, #4835	; 0x12e3
    6cdc:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    6ce0:	01010002 	tsteq	r1, r2
    6ce4:	00020500 	andeq	r0, r2, r0, lsl #10
    6ce8:	03000000 	movweq	r0, #0
    6cec:	03010390 	movweq	r0, #5008	; 0x1390
    6cf0:	1f212010 	svcne	0x00212010
    6cf4:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    6cf8:	003e0104 	eorseq	r0, lr, r4, lsl #2
    6cfc:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6d00:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    6d04:	01000702 	tsteq	r0, r2, lsl #14
    6d08:	02050001 	andeq	r0, r5, #1
    6d0c:	00000000 	andeq	r0, r0, r0
    6d10:	0103b503 	tsteq	r3, r3, lsl #10
    6d14:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    6d18:	0005023d 	andeq	r0, r5, sp, lsr r2
    6d1c:	Address 0x0000000000006d1c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
    return (time * SECOND)/1000;
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
}
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
      34:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
      38:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
      3c:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
}
      40:	5f5f0065 	svcpl	0x005f0065
      44:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6dc <_estack+0xdfffa6dc>
      48:	00747261 	rsbseq	r7, r4, r1, ror #4
      4c:	70716572 	rsbsvc	r6, r1, r2, ror r5
      50:	72006d64 	andvc	r6, r0, #100, 26	; 0x1900
      54:	654c6465 	strbvs	r6, [ip, #-1125]	; 0xfffffb9b
		release;
      58:	5f5f0064 	svcpl	0x005f0064
      5c:	616c7473 	smcvs	51011	; 0xc743
      60:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
      64:	614e5f74 	hvcvs	58868	; 0xe5f4
      68:	7300656d 	movwvc	r6, #1389	; 0x56d
      6c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
      70:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
      74:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
      78:	66666500 	strbtvs	r6, [r6], -r0, lsl #10
      7c:	006d6470 	rsbeq	r6, sp, r0, ror r4
      80:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      84:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      88:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
      8c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	descriptors [fd] = s;
      90:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
      98:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
	if (s == NULL)
      9c:	6e497372 	mcrvs	3, 2, r7, cr9, cr2, {3}
		syserror (EMALLOC, "tcv05");
      a0:	00786564 	rsbseq	r6, r8, r4, ror #10
      a4:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
      a8:	6c006e70 	stcvs	14, cr6, [r0], {112}	; 0x70
      ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      b8:	735f5f00 	cmpvc	pc, #0, 30
      bc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      c0:	6f68535f 	svcvs	0x0068535f
      c4:	654d5f77 	strbvs	r5, [sp, #-3959]	; 0xfffff089
      c8:	5f00756e 	svcpl	0x0000756e
      cc:	5f69705f 	svcpl	0x0069705f
      d0:	2f007473 	svccs	0x00007473
      d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      d8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      dc:	2f6e6974 	svccs	0x006e6974
      e0:	6b736544 	blvs	1cd95f8 <__ccfg+0x1cb9650>
      e4:	2f706f74 	svccs	0x00706f74
      e8:	4f534c4f 	svcmi	0x00534c4f
      ec:	2f54454e 	svccs	0x0054454e
      f0:	4f434950 	svcmi	0x00434950
			wwait (st, 50);
      f4:	70412f53 	subvc	r2, r1, r3, asr pc
			curr += 0x1000;
      f8:	432f7370 			; <UNDEFINED> instruction: 0x432f7370
      fc:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
		if (from >= EE_SIZE || upto < from)
     100:	4c5f3436 	cfldrdmi	mvd3, [pc], {54}	; 0x36
     104:	00366261 	eorseq	r6, r6, r1, ror #4
			upto = EE_SIZE - 1;
     108:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     10c:	5f62616c 	svcpl	0x0062616c
     110:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     114:	6c425f74 	mcrrvs	15, 7, r5, r2, cr4
     118:	656b6e69 	strbvs	r6, [fp, #-3689]!	; 0xfffff197
     11c:	5f5f0072 	svcpl	0x005f0072
     120:	616c7473 	smcvs	51011	; 0xc743
     124:	464f5f62 	strbmi	r5, [pc], -r2, ror #30
            ch = redCharacter;
     128:	45505f46 	ldrbmi	r5, [r0, #-3910]	; 0xfffff0ba
            onTime = redOn;
     12c:	444f4952 	strbmi	r4, [pc], #-2386	; 134 <_Min_Stack_Size+0x34>
            offTime = redOff;
     130:	735f5f00 	cmpvc	pc, #0, 30
        ledFlag = 1 - ledFlag;
     134:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
            offTime = greenOff;
     138:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    return (time * SECOND)/1000;
     13c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     140:	73797300 	cmnvc	r9, #0, 6
     144:	5f6d6574 	svcpl	0x006d6574
     148:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     14c:	6f635f74 	svcvs	0x00635f74
     150:	00746e75 	rsbseq	r6, r4, r5, ror lr
     154:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        if (displayCycle)
     158:	5f62616c 	svcpl	0x0062616c
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
     160:	646e6f00 	strbtvs	r6, [lr], #-3840	; 0xfffff100
        if(onTime > 0){
     164:	00736e6d 	rsbseq	r6, r3, sp, ror #28
     168:	4e6f6964 	vnmulmi.f16	s13, s30, s9	; <UNPREDICTABLE>
            if(On)
     16c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     170:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
     174:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
                leds(led,0);
     178:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
     17c:	20312e32 	eorscs	r2, r1, r2, lsr lr
     180:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
     184:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
     188:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
            delay(onTime, OFF_PERIOD);
     18c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
            delay(offTime, Check_PERIOD);
     190:	5b202965 	blpl	80a72c <__ccfg+0x7ea784>
     194:	2f4d5241 	svccs	0x004d5241
            led = greenLed;
     198:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
            ch = greenCharacter;
     19c:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
     1a0:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
            onTime = greenOn;
     1a4:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
            offTime = greenOff;
     1a8:	6f697369 	svcvs	0x00697369
                leds(led,0);
     1ac:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
     1b0:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1b4:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     1b8:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     1bc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
     1c0:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
            proceed OFF_PERIOD;
     1c4:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
        when(&On, Check_PERIOD);
     1c8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     1cc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
        release;
     1d0:	616f6c66 	cmnvs	pc, r6, ror #24
        leds(led,0);
     1d4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     1d8:	6f733d69 	svcvs	0x00733d69
     1dc:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
     1e0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     1e4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
}
     1e8:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
     1ec:	672d206d 	strvs	r2, [sp, -sp, rrx]!
     1f0:	64672d20 	strbtvs	r2, [r7], #-3360	; 0xfffff2e0
     1f4:	66726177 			; <UNDEFINED> instruction: 0x66726177
     1f8:	2d20332d 	stccs	3, cr3, [r0, #-180]!	; 0xffffff4c
     1fc:	72747367 	rsbsvc	r7, r4, #-1677721599	; 0x9c000001
     200:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     204:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     208:	4f2d2066 	svcmi	0x002d2066
     20c:	732d2073 			; <UNDEFINED> instruction: 0x732d2073
     210:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     214:	2d203939 			; <UNDEFINED> instruction: 0x2d203939
     218:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
     21c:	6f697463 	svcvs	0x00697463
     220:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
     224:	6f697463 	svcvs	0x00697463
     228:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
     22c:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
     230:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
     234:	6f697463 	svcvs	0x00697463
     238:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
    word numbers[] = {0, 0, 0, 0};
     23c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ac <g_pfnVectors+0xac>
    int numbersIndex = 0;
     240:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    word numbers[] = {0, 0, 0, 0};
     244:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
        if(settingsInput[i] == ' ') {
     24c:	20676e69 	rsbcs	r6, r7, r9, ror #28
     250:	7361662d 	cmnvc	r1, #47185920	; 0x2d00000
            numbers[numbersIndex] = number;
     254:	662d206d 	strtvs	r2, [sp], -sp, rrx
     258:	2d78616d 	ldfcse	f6, [r8, #-436]!	; 0xfffffe4c
            number = 0;
     25c:	6f727265 	svcvs	0x00727265
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	313d7372 	teqcc	sp, r2, ror r3
    redOn = numbers[0];
     264:	5f5f0030 	svcpl	0x005f0030
     268:	655f6970 	ldrbvs	r6, [pc, #-2416]	; fffff900 <_estack+0xdfffa900>
    redOff = numbers[1];
     26c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     270:	7300745f 	movwvc	r7, #1119	; 0x45f
    greenOn = numbers[2];
     274:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     278:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
    greenOff = numbers[3];
     27c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     280:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
}
     284:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	646f696e 	strbtvs	r6, [pc], #-2414	; 290 <processSettingsInput+0x54>
     28c:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
            number = number * 10;
     290:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
            number += settingsInput[i] - 48;
     294:	756e006b 	strbvc	r0, [lr, #-107]!	; 0xffffff95
     298:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     29c:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
     2a0:	654c6e65 	strbvs	r6, [ip, #-3685]	; 0xfffff19b
     2a4:	77610064 	strbvc	r0, [r1, -r4, rrx]!
     2a8:	0064726f 	rsbeq	r7, r4, pc, ror #4
fsm root {
     2ac:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     2b0:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
     2b4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     2b8:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     2bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     2c0:	6d647000 	stclvs	0, cr7, [r4, #-0]
     2c4:	0065646f 	rsbeq	r6, r5, pc, ror #8
        ser_outf(Initial, "Enter your name: ");
     2c8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
     2cc:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	69540074 	ldmdbvs	r4, {r2, r4, r5, r6}^
     2d4:	0072656d 	rsbseq	r6, r2, sp, ror #10
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
     2dc:	006e4f6e 	rsbeq	r4, lr, lr, ror #30
     2e0:	504d544b 	subpl	r5, sp, fp, asr #8
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	7070612f 	rsbsvc	r6, r0, pc, lsr #2
     2e8:	5f00632e 	svcpl	0x0000632e
        if (choice == 'A' || choice == 'a'){
     2ec:	706e695f 	rsbvc	r6, lr, pc, asr r9
     2f0:	705f7475 	subsvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
     2f4:	00736e69 	rsbseq	r6, r3, r9, ror #28
            proceed Adjust_Intervals;
     2f8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
            proceed Monitor;
     2fc:	5f62616c 	svcpl	0x0062616c
        proceed Show_Menu;
     300:	69617741 	stmdbvs	r1!, {r0, r6, r8, r9, sl, ip, sp, lr}^
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	74535f74 	ldrbvc	r5, [r3], #-3956	; 0xfffff08c
     308:	7200706f 	andvc	r7, r0, #111	; 0x6f
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	68436465 	stmdavs	r3, {r0, r2, r5, r6, sl, sp, lr}^
     310:	63617261 	cmnvs	r1, #268435462	; 0x10000006
     314:	00726574 	rsbseq	r6, r2, r4, ror r5
        processSettingsInput(settings);
     318:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
        if(!blinkerRunning) {
     31c:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
     320:	625f5f00 	subsvs	r5, pc, #0, 30
            blinkerCode = runfsm blinker;
     324:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
     328:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
            blinkerRunning = YES;
     32c:	5f005f5f 	svcpl	0x00005f5f
        On = YES;
     330:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
     334:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
        trigger(&On);
     338:	70005f5f 	andvc	r5, r0, pc, asr pc
        proceed Show_Menu;
     33c:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	65537373 	ldrbvs	r7, [r3, #-883]	; 0xfffffc8d
     344:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     348:	6e497367 	cdpvs	3, 4, cr7, cr9, cr7, {3}
     34c:	00747570 	rsbseq	r7, r4, r0, ror r5
     350:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
     354:	0072656b 	rsbseq	r6, r2, fp, ror #10
     358:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
        proceed Show_Menu;
     35c:	73676e69 	cmnvc	r7, #1680	; 0x690
     360:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     368:	735f5f00 	cmpvc	pc, #0, 30
        displayCycle = YES;
     36c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
        ser_inf(Await_Stop, "%c", &ch);
     370:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     374:	746e495f 	strbtvc	r4, [lr], #-2399	; 0xfffff6a1
     378:	61767265 	cmnvs	r6, r5, ror #4
        if(ch == 'S' || ch == 's'){
     37c:	5f00736c 	svcpl	0x0000736c
     380:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     384:	565f6261 	ldrbpl	r6, [pc], -r1, ror #4
            displayCycle = NO;
     388:	5f776569 	svcpl	0x00776569
     38c:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
            proceed Show_Menu;
     390:	73676e69 	cmnvc	r7, #1680	; 0x690
        proceed Monitor;
     394:	705f5f00 	subsvc	r5, pc, r0, lsl #30
        On = NO;
     398:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
     39c:	68007272 	stmdavs	r0, {r1, r4, r5, r6, r9, ip, sp, lr}
        if(blinkerCode != 0x0) {
     3a0:	5f74736f 	svcpl	0x0074736f
            killall(blinkerCode);
     3a4:	5f006469 	svcpl	0x00006469
     3a8:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
        proceed Show_Menu;
     3ac:	5f6e6f74 	svcpl	0x006e6f74
     3b0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
        leds_all(0);
     3b4:	736e7500 	cmnvc	lr, #0, 10
     3b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     3bc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
        proceed Show_Menu;
     3c0:	47007261 	strmi	r7, [r0, -r1, ror #4]
     3c4:	5f4f4950 	svcpl	0x004f4950
        } else if (choice == 'S' || choice == 's') {
     3c8:	61656c63 	cmnvs	r5, r3, ror #24
            proceed Stop;
     3cc:	6f694472 	svcvs	0x00694472
        } else if (choice == 'V' || choice == 'v') {
     3d0:	546e6f00 	strbtpl	r6, [lr], #-3840	; 0xfffff100
            proceed View_Settings;
     3d4:	00656d69 	rsbeq	r6, r5, r9, ror #26
        } else if (choice == 'M' || choice == 'm') {
     3d8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
            proceed Monitor;
     3dc:	5f62616c 	svcpl	0x0062616c
     3e0:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     3e4:	495f7473 	ldmdbmi	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     3e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     3ec:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
     3f0:	6f687300 	svcvs	0x00687300
     3f4:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     3f8:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
     3fc:	664f6465 	strbvs	r6, [pc], -r5, ror #8
     400:	756e0066 	strbvc	r0, [lr, #-102]!	; 0xffffff9a
     404:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     408:	64610073 	strbtvs	r0, [r1], #-115	; 0xffffff8d
     40c:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
     410:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     414:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     418:	00636c62 	rsbeq	r6, r3, r2, ror #24
     41c:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 31c <root+0x70>
     420:	006e6165 	rsbeq	r6, lr, r5, ror #2
     424:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     428:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
     42c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
static void devinit_uart (int devnum) {
     430:	6175006b 	cmnvs	r5, fp, rrx
	adddevfunc (ioreq_uart_a, devnum);
     434:	745f7472 	ldrbvc	r7, [pc], #-1138	; 43c <udelay>
     438:	735f5f00 	cmpvc	pc, #0, 30
void udelay (volatile word n) {
     43c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     440:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
	while (n) {
     444:	6f68435f 	svcvs	0x0068435f
     448:	00656369 	rsbeq	r6, r5, r9, ror #6
}
     44c:	4664656c 	strbtmi	r6, [r4], -ip, ror #10
	while (n--);
     450:	0067616c 	rsbeq	r6, r7, ip, ror #2
     454:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     458:	745f7461 	ldrbvc	r7, [pc], #-1121	; 460 <udelay+0x24>
		n--;
     45c:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
     460:	0073746e 	rsbseq	r7, r3, lr, ror #8
     464:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void mdelay (volatile word n) {
     468:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     46c:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
	while (n) {
     470:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     474:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
}
     478:	6e4f6465 	cdpvs	4, 4, cr6, cr15, cr5, {3}
		udelay (999);
     47c:	73696400 	cmnvc	r9, #0, 8
     480:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
		n--;
     484:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     488:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     48c:	7000656d 	andvc	r6, r0, sp, ror #10
     490:	006d756e 	rsbeq	r7, sp, lr, ror #10
void __pi_ondomain (lword d) {
     494:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     498:	0079706f 	rsbseq	r7, r9, pc, rrx
		if (__pi_systat.effpdm > 1)
     49c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     4a0:	68630073 	stmdavs	r3!, {r0, r1, r4, r5, r6}^
			__pi_systat.effpdm = 1;
     4a4:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
	PRCMPowerDomainOn (d);
     4a8:	6d736600 	ldclvs	6, cr6, [r3, #-0]
     4ac:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     4b0:	61745300 	cmnvs	r4, r0, lsl #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b4:	00737574 	rsbseq	r7, r3, r4, ror r5
     4b8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     4bc:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
	__pi_systat.ondmns |= d;
     4c0:	5f00735f 	svcpl	0x0000735f
     4c4:	5f69705f 	svcpl	0x0069705f
}
     4c8:	5f626370 	svcpl	0x00626370
     4cc:	72670074 	rsbvc	r0, r7, #116	; 0x74
void __pi_syserror (word ec, const char *m) {
     4d0:	436e6565 	cmnmi	lr, #423624704	; 0x19400000
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	61726168 	cmnvs	r2, r8, ror #2
     4d8:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
  __ASM volatile ("cpsid i" : : : "memory");
     4dc:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e0:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
     4e4:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
     4e8:	00676e69 	rsbeq	r6, r7, r9, ror #28
		all_leds_blink;
     4ec:	746f6f72 	strbtvc	r6, [pc], #-3954	; 4f4 <__pi_syserror+0x24>
     4f0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     4f4:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4f8:	006b746e 	rsbeq	r7, fp, lr, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4fc:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     500:	50470074 	subpl	r0, r7, r4, ror r0
     504:	735f4f49 	cmpvc	pc, #292	; 0x124
     508:	754f7465 	strbvc	r7, [pc, #-1125]	; ab <g_pfnVectors+0xab>
     50c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     510:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	while (1) {
     514:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
     518:	4f41006f 	svcmi	0x0041006f
     51c:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     520:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
void tci_run_delay_timer () {
     524:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
	setdel = __pi_mintk - __pi_old;
     528:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     52c:	6f4d3233 	svcvs	0x004d3233
     530:	5f006564 	svcpl	0x00006564
     534:	5f69705f 	svcpl	0x0069705f
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
     53c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
     540:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
     544:	76617474 			; <UNDEFINED> instruction: 0x76617474
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	61727500 	cmnvs	r2, r0, lsl #10
	sti_tim;
     54c:	00736574 	rsbseq	r6, r3, r4, ror r5
}
     550:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
     554:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     558:	7172695f 	cmnvc	r2, pc, asr r9
     55c:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
     560:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
	cli_aux;
     564:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     568:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     570:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     574:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
     578:	6b615778 	blvs	1856360 <__ccfg+0x18363b8>
	sti_aux;
     57c:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
}
     580:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     584:	4e4f4100 	dvfmie	f4, f7, f0
     588:	50435557 	subpl	r5, r3, r7, asr r5
void AONRTCIntHandler () {
     58c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     594:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	41550074 	cmpmi	r5, r4, ror r0
		if (__pi_utims [0] == 0)
     59c:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     5a0:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
		if (*(__pi_utims [0])) {
     5a4:	73007261 	movwvc	r7, #609	; 0x261
     5a8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
			(*(__pi_utims [0]))--;
     5ac:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
		if (__pi_utims [1] == 0)
     5b0:	41007469 	tstmi	r0, r9, ror #8
		if (*(__pi_utims [1])) {
     5b4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
			aux_timer_inactive = 0;
     5b8:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
			(*(__pi_utims [1]))--;
     5bc:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
		if (__pi_utims [2] == 0)
     5c0:	616e456e 	cmnvs	lr, lr, ror #10
		if (*(__pi_utims [2])) {
     5c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
			(*(__pi_utims [2]))--;
     5c8:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
		if (__pi_utims [3] != 0) {
     5cc:	50006c65 	andpl	r6, r0, r5, ror #24
			if (*(__pi_utims [3])) {
     5d0:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
				aux_timer_inactive = 0;
     5d4:	6f507563 	svcvs	0x00507563
				(*(__pi_utims [3]))--;
     5d8:	4f726577 	svcmi	0x00726577
	if (__pi_systat.ledsts) {
     5dc:	5f006666 	svcpl	0x00006666
     5e0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
		if (__pi_systat.ledblc++ == 0) {
     5e4:	50534d5f 	subspl	r4, r3, pc, asr sp
     5e8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
			if (__pi_systat.ledblk) {
     5ec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     5f0:	5f00745f 	svcpl	0x0000745f
     5f4:	5f69705f 	svcpl	0x0069705f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	6f646e6f 	svcvs	0x00646e6f
     5fc:	6e69616d 	powvsez	f6, f1, #5.0
				if (__pi_systat.ledsts & 0x2)
     600:	52415500 	subpl	r5, r1, #0, 10
     604:	46774854 			; <UNDEFINED> instruction: 0x46774854
     608:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
				if (__pi_systat.ledsts & 0x4)
     60c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
				__pi_systat.ledblk = 0;
     610:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     614:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
			if (__pi_systat.fstblk)
     618:	5f5f0065 	svcpl	0x005f0065
     61c:	00424350 	subeq	r4, r2, r0, asr r3
				__pi_systat.ledblc = 200;
     620:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	if (events & AON_RTC_EVFLAGS_CH0) {
     624:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
		cli_tim;
     628:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
		__pi_new += setdel;
     62c:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
     630:	4f410065 	svcmi	0x00410065
		setdel = 0;
     634:	434f494e 	movtmi	r4, #63822	; 0xf94e
		RISE_N_SHINE;
     638:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
		__pi_new += setdel;
     63c:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
		RISE_N_SHINE;
     640:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     644:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
		aux_timer_inactive = 1;
     648:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
     64c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
				if (__pi_systat.ledsts & 0x1)
     650:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     654:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
     658:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
				if (__pi_systat.ledsts & 0x2)
     65c:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
     660:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     664:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
				if (__pi_systat.ledsts & 0x8)
     668:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
				__pi_systat.ledblk = 1;
     66c:	6f6c436c 	svcvs	0x006c436c
     670:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
		if (aux_timer_inactive) {
     674:	52500074 	subspl	r0, r0, #116	; 0x74
			cli_aux;
     678:	61434d43 	cmpvs	r3, r3, asr #26
     67c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
     680:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
     684:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     688:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     68c:	5000656c 	andpl	r6, r0, ip, ror #10
     690:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
     694:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     698:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     69c:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
word tci_update_delay_ticks (Boolean force) {
     6a0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
	cli_tim;
     6a4:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
     6a8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	if (setdel) {
     6ac:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     6b8:	73747075 	cmnvc	r4, #117	; 0x75
     6bc:	52415500 	subpl	r5, r1, #0, 10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	46494654 			; <UNDEFINED> instruction: 0x46494654
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	616e454f 	cmnvs	lr, pc, asr #10
	return NO;
     6c8:	00656c62 	rsbeq	r6, r5, r2, ror #24
			setdel = 0;
     6cc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d0:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
     6d4:	7367616c 	cmnvc	r7, #108, 2
}
     6d8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		sti_tim;
     6dc:	61755f69 	cmnvs	r5, r9, ror #30
		return YES;
     6e0:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
     6e4:	61727465 	cmnvs	r2, r5, ror #8
     6e8:	50006574 	andpl	r6, r0, r4, ror r5
     6ec:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
	UARTDisable (UART0_BASE);
     6f4:	72464f49 	subvc	r4, r6, #292	; 0x124
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
	UARTDisable (UART0_BASE);
     6fc:	61736944 	cmnvs	r3, r4, asr #18
	UARTConfigSetExpClk (UART0_BASE,
     700:	00656c62 	rsbeq	r6, r5, r2, ror #24
     704:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     708:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     70c:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     714:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     718:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     720:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
     724:	6f6d7265 	svcvs	0x006d7265
	urates [0] = rate;
     728:	6f006564 	svcvs	0x00006564
}
     72c:	61726570 	cmnvs	r2, r0, ror r5
     730:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     734:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
     738:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     73c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     740:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	00657669 	rsbeq	r7, r5, r9, ror #12
     748:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     74c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
     754:	5f6f6465 	svcpl	0x006f6465
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	5f007874 	svcpl	0x00007874
     75c:	5f69705f 	svcpl	0x0069705f
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	00646c6f 	rsbeq	r6, r4, pc, ror #24
     764:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     768:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
     76c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     770:	33697500 	cmncc	r9, #0, 10
     774:	73614232 	cmnvc	r1, #536870915	; 0x20000003
     778:	5f5f0065 	svcpl	0x005f0065
	switch (operation) {
     77c:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	615f6966 	cmpvs	pc, r6, ror #18
     784:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     788:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
     78c:	4e4f4100 	dvfmie	f4, f7, f0
     790:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
				*buf++ = uart_a_read;
     794:	6156636e 	cmpvs	r6, lr, ror #6
     798:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
			while (len && uart_a_char_available) {
     79c:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
     7a0:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
     7a4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
			if (len != operation) {
     7a8:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
}
     7ac:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     7b0:	61755f74 	cmnvs	r5, r4, ror pc
			uart_a_disable_int;
     7b4:	41007472 	tstmi	r0, r2, ror r4
			if (uart_a_char_available) {
     7b8:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
				*buf++ = uart_a_read;
     7bc:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
			uart_a_disable_int;
     7c0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     7c4:	0072656c 	rsbseq	r6, r2, ip, ror #10
			if (uart_a_char_available) {
     7c8:	61726170 	cmnvs	r2, r0, ror r1
     7cc:	6374006d 	cmnvs	r4, #109	; 0x6d
				uart_a_enable_int;
     7d0:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     7d4:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
				goto Redo_rx;
     7d8:	5f79616c 	svcpl	0x0079616c
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     7e0:	5f5f0072 	svcpl	0x005f0072
			return -2;
     7e4:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
     7e8:	61656c65 	cmnvs	r5, r5, ror #24
				uart_a_write (*buf);
     7ec:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
     7f0:	006f6465 	rsbeq	r6, pc, r5, ror #8
			while (len && uart_a_room_in_tx) {
     7f4:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
     7f8:	5f74696e 	svcpl	0x0074696e
     7fc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			if (len != operation) {
     800:	726f6600 	rsbvc	r6, pc, #0, 12
			uart_a_disable_int;
     804:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
     808:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
			if (uart_a_room_in_tx) {
     80c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     810:	50470065 	subpl	r0, r7, r5, rrx
				uart_a_enable_int;
     814:	635f4f49 	cmpvs	pc, #292	; 0x124
     818:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
				*buf++ = uart_a_read;
     81c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
			if (uart_a_room_in_tx) {
     820:	6f694474 	svcvs	0x00694474
				uart_a_write (*buf);
     824:	625f5f00 	subsvs	r5, pc, #0, 30
     828:	6f747475 	svcvs	0x00747475
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     830:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
			uart_a_enable_int;
     834:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
     838:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     83c:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 844 <ioreq_uart_a+0xc8>
			return 0;
     840:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
			if (len == UART_CNTRL_SETRATE) {
     844:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
				if (__pi_uart_setrate (*((word*)buf),
     848:	53007172 	movwpl	r7, #370	; 0x172
     84c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
     850:	6f416c72 	svcvs	0x00416c72
				syserror (EREQPAR, "uar");
     854:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
			syserror (ENOOPER, "uai");
     858:	5f5f0063 	svcpl	0x005f0063
			if (len == UART_CNTRL_GETRATE) {
     85c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
				return 1;
     860:	6b636174 	blvs	18d8e38 <__ccfg+0x18b8e90>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
			syserror (ENOOPER, "uai");
     868:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     86c:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
     870:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
     874:	61696c69 	cmnvs	r9, r9, ror #24
     878:	745f7972 	ldrbvc	r7, [pc], #-2418	; 880 <ioreq_uart_a+0x104>
     87c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     880:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     884:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     888:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
void UART0IntHandler () {
     890:	50470071 	subpl	r0, r7, r1, ror r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
     898:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     89c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     8a0:	52415500 	subpl	r5, r1, #0, 10
     8a4:	46494654 			; <UNDEFINED> instruction: 0x46494654
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
     8ac:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
		RISE_N_SHINE;
     8b0:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
     8b4:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
		i_trigger (devevent (UART_A, READ));
     8b8:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
     8bc:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     8c0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     8c4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     8c8:	00766174 	rsbseq	r6, r6, r4, ror r1
     8cc:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     8d0:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
     8d4:	616c6564 	cmnvs	ip, r4, ror #10
     8d8:	4f410079 	svcmi	0x00410079
     8dc:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     8e0:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
     8e4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e8:	5f00656c 	svcpl	0x0000656c
     8ec:	5f69705f 	svcpl	0x0069705f
     8f0:	0077656e 	rsbseq	r6, r7, lr, ror #10
		i_trigger (devevent (UART_A, WRITE));
     8f4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     8fc:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
		RISE_N_SHINE;
     900:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
     904:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
     908:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
		i_trigger (devevent (UART_A, WRITE));
     90c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     910:	4100656c 	tstmi	r0, ip, ror #10
     914:	61424e4f 	cmpvs	r2, pc, asr #28
     918:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     91c:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
     920:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
     924:	61746c6f 	cmnvs	r4, pc, ror #24
     928:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
     92c:	6f690074 	svcvs	0x00690074
     930:	5f716572 	svcpl	0x00716572
     934:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
}
     938:	5f00615f 	svcpl	0x0000615f
     93c:	5f69705f 	svcpl	0x0069705f
     940:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     944:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
     948:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
void __buttons_setirq (int val) {
     94c:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	5f007469 	svcpl	0x00007469
     954:	5f69705f 	svcpl	0x0069705f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
     95c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     960:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
		bn = BUTTON_GPIO (__button_list [i]);
     964:	006d756e 	rsbeq	r7, sp, lr, ror #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 8b4 <UART0IntHandler+0x28>
     96c:	616d2f65 	cmnvs	sp, r5, ror #30
     970:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     974:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     978:	706f746b 	rsbvc	r7, pc, fp, ror #8
     97c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
}
     980:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     984:	4349502f 	movtmi	r5, #36911	; 0x902f
     988:	502f534f 	eorpl	r5, pc, pc, asr #6
     98c:	534f6369 	movtpl	r6, #62313	; 0xf369
void __pinlist_setirq (int val) {
     990:	3143432f 	cmpcc	r3, pc, lsr #6
	for (i = 0; i < N_PINLIST; i++) {
     994:	2f585833 	svccs	0x00585833
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     998:	6e69616d 	powvsez	f6, f1, #5.0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
	for (i = 0; i < N_PINLIST; i++) {
     9a0:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     9a8:	6142746e 	cmpvs	r2, lr, ror #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ac:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     9b0:	41550079 	cmpmi	r5, r9, ror r0
     9b4:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	616e4574 	smcvs	58452	; 0xe454
}
     9bc:	00656c62 	rsbeq	r6, r5, r2, ror #24
     9c0:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     9c4:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
     9c8:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
void GPIOIntHandler () {
     9cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
if (buttons_int) {
     9d0:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
     9d4:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
	buttons_disable ();
     9d8:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     9dc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
	i_trigger ((aword)&__button_list);
     9e0:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
     9e4:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     9e8:	00746c61 	rsbseq	r6, r4, r1, ror #24
     9ec:	4f706f74 	svcmi	0x00706f74
     9f0:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
     9f4:	6174536e 	cmnvs	r4, lr, ror #6
     9f8:	5f006b63 	svcpl	0x00006b63
     9fc:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
     a00:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
     a04:	30545241 	subscc	r5, r4, r1, asr #4
     a08:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
	RISE_N_SHINE;
     a0c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     a10:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     a14:	53706565 	cmnpl	r0, #423624704	; 0x19400000
if (pin_sensor_int) {
     a18:	7065656c 	rsbvc	r6, r5, ip, ror #10
     a1c:	726f7000 	rsbvc	r7, pc, #0
	i_trigger ((aword)(&__input_pins));
     a20:	6f635f74 	svcvs	0x00635f74
     a24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a28:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     a2c:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
     a30:	5f657461 	svcpl	0x00657461
     a34:	616c6564 	cmnvs	ip, r4, ror #10
     a38:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a3c:	00736b63 	rsbseq	r6, r3, r3, ror #22
     a40:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
     a44:	00657275 	rsbeq	r7, r5, r5, ror r2
     a48:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
	__pinsen_disable_and_clear;
     a4c:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
	RISE_N_SHINE;
     a50:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     a54:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a58:	5f007665 	svcpl	0x00007665
}
     a5c:	5f69705f 	svcpl	0x0069705f
     a60:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
     a64:	5f007970 	svcpl	0x00007970
     a68:	5f69705f 	svcpl	0x0069705f
     a6c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
void system_init () {
     a70:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a78:	66710074 			; <UNDEFINED> instruction: 0x66710074
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	00656572 	rsbeq	r6, r5, r2, ror r5
     a80:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
     a84:	5f5f0071 	svcpl	0x005f0071
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a88:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     a8c:	006b726f 	rsbeq	r7, fp, pc, ror #4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a94:	6f706d00 	svcvs	0x00706d00
     a98:	00736c6f 	rsbseq	r6, r3, pc, ror #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	61765f5f 	cmnvs	r6, pc, asr pc
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	74750074 	ldrbtvc	r0, [r5], #-116	; 0xffffff8c
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aac:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab0:	52415500 	subpl	r5, r1, #0, 10
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	73754254 	cmnvc	r5, #84, 4	; 0x40000005
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	5f5f0079 	svcpl	0x005f0079
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 9e4 <GPIOIntHandler+0x18>	; <UNPREDICTABLE>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac0:	6f6c6c61 	svcvs	0x006c6c61
     ac4:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
     ac8:	2f007469 	svccs	0x00007469
     acc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (port_confs [i] & 0x80)
     ad0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	2f6e6974 	svccs	0x006e6974
     ad8:	6b736544 	blvs	1cd9ff0 <__ccfg+0x1cba048>
		if (port_confs [i] & 0x40)
     adc:	2f706f74 	svccs	0x00706f74
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	4f534c4f 	svcmi	0x00534c4f
     ae4:	2f54454e 	svccs	0x0054454e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae8:	4f434950 	svcmi	0x00434950
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af0:	2f534f63 	svccs	0x00534f63
	all_leds_blink;
     af4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     af8:	6b2f6c65 	blvs	bdbc94 <__ccfg+0xbbbcec>
     afc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     b00:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     b04:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     b08:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     b0c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b14:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     b18:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     b1c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b20:	616d5f69 	cmnvs	sp, r9, ror #30
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b24:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	72630065 	rsbvc	r0, r3, #101	; 0x65
     b2c:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
	IntEnable (INT_AON_RTC_COMB);
     b30:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
     b34:	006b6863 	rsbeq	r6, fp, r3, ror #16
     b38:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
	__pi_malloc_init ();
     b3c:	70006565 	andvc	r6, r0, r5, ror #10
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
     b44:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	006e656c 	rsbeq	r6, lr, ip, ror #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     b50:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     b54:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
     b5c:	76656464 	strbtvc	r6, [r5], -r4, ror #8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     b64:	64697000 	strbtvs	r7, [r9], #-0
     b68:	00726576 	rsbseq	r6, r2, r6, ror r5
	urates [0] = UART_RATE / 100;
     b6c:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
     b70:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	reinit_uart ();
     b74:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
	EXTRA_INITIALIZERS;
     b78:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
     b7c:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b80:	5f746e65 	svcpl	0x00746e65
     b84:	5f5f0074 	svcpl	0x005f0074
     b88:	63756e67 	cmnvs	r5, #1648	; 0x670
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	5f61765f 	svcpl	0x0061765f
     b90:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
     b98:	00656572 	rsbeq	r6, r5, r2, ror r5
			devinit [i] . init (devinit [i] . param);
     b9c:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     ba4:	00797274 	rsbseq	r7, r9, r4, ror r2
     ba8:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
	IntEnable (INT_UART0_COMB);
     bac:	73656d00 	cmnvc	r5, #0, 26
     bb0:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
}
     bb4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
	tci_run_auxiliary_timer ();
     bb8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		diag ("");
     bbc:	61625f69 	cmnvs	r2, r9, ror #30
     bc0:	61747364 	cmnvs	r4, r4, ror #6
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	5f006574 	svcpl	0x00006574
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	5f69705f 	svcpl	0x0069705f
		diag ("Leftover RAM: %d bytes",
     bcc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     bd0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     bd4:	61775f69 	cmnvs	r7, r9, ror #30
     bd8:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
     bdc:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
     be0:	6b00646e 	blvs	19da0 <__exidx_end+0x16f2c>
     be4:	616c6c69 	cmnvs	ip, r9, ror #24
     be8:	5f006c6c 	svcpl	0x00006c6c
     bec:	5f69705f 	svcpl	0x0069705f
     bf0:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
     bf4:	00656572 	rsbeq	r6, r5, r2, ror r5
     bf8:	6f6f425f 	svcvs	0x006f425f
     bfc:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
     c00:	006b6e75 	rsbeq	r6, fp, r5, ror lr
     c04:	61647075 	smcvs	18181	; 0x4705
     c08:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
     c0c:	6b61775f 	blvs	185e990 <__ccfg+0x183e9e8>
     c10:	5f5f0065 	svcpl	0x005f0065
     c14:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     c18:	00646565 	rsbeq	r6, r4, r5, ror #10
     c1c:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
     c20:	0065646f 	rsbeq	r6, r5, pc, ror #8
     c24:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
__attribute__ ((noreturn)) void __pi_release () {
     c28:	5f5f0074 	svcpl	0x005f0074
     c2c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; b54 <system_init+0xe4>	; <UNPREDICTABLE>
     c30:	70636d65 	rsbvc	r6, r3, r5, ror #26
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c34:	67640079 			; <UNDEFINED> instruction: 0x67640079
	check_stack_overflow;
     c38:	0074756f 	rsbseq	r7, r4, pc, ror #10
     c3c:	70615f5f 	rsbvc	r5, r1, pc, asr pc
     c40:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	update_n_wake (MAX_WORD, NO);
     c44:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     c48:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     c4c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	for_all_tasks (__pi_curr) {
     c50:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
     c54:	666e006e 	strbtvs	r0, [lr], -lr, rrx
     c58:	006c6961 	rsbeq	r6, ip, r1, ror #18
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	__SLEEP;
     c60:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     c64:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
     c68:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
     c6c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	system_event_count ++;
     c70:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
     c74:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
	switch (__pi_systat.effpdm) {
     c78:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c7c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     c80:	70636e72 	rsbvc	r6, r3, r2, ror lr
     c84:	5f5f0079 	svcpl	0x005f0079
			__WFI ();
     c88:	6a5f6970 	bvs	17db250 <__ccfg+0x17bb2a8>
     c8c:	006e696f 	rsbeq	r6, lr, pc, ror #18
     c90:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
	check_stack_overflow;
     c94:	645f7265 	ldrbvs	r7, [pc], #-613	; c9c <__pi_release+0x74>
     c98:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	5f5f0065 	svcpl	0x005f0065
     ca0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
			goto Redo;
     ca8:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
	for_all_tasks (__pi_curr) {
     cac:	715f7663 	cmpvc	pc, r3, ror #12
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	65727000 	ldrbvs	r7, [r2, #-0]!
     cb8:	5f5f0076 	svcpl	0x005f0076
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cbc:	5f766374 	svcpl	0x00766374
     cc0:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
     cc4:	00745f72 	rsbseq	r5, r4, r2, ror pc
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	70766374 	rsbsvc	r6, r6, r4, ror r3
     ccc:	745f7968 	ldrbvc	r7, [pc], #-2408	; cd4 <__pi_release+0xac>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
     cd4:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
			__WFI ();
     cd8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cdc:	2f006c6f 	svccs	0x00006c6f
     ce0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
     ce4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce8:	2f6e6974 	svccs	0x006e6974
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	6b736544 	blvs	1cda204 <__ccfg+0x1cba25c>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	2f706f74 	svccs	0x00706f74
     cf4:	4f534c4f 	svcmi	0x00534c4f
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	2f54454e 	svccs	0x0054454e
     cfc:	4f434950 	svcmi	0x00434950
     d00:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d04:	2f534f63 	svccs	0x00534f63
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d08:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     d0c:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
     d10:	2f497465 	svccs	0x00497465
     d14:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	63740063 	cmnvs	r4, #99	; 0x63
     d1c:	645f7076 	ldrbvs	r7, [pc], #-118	; d24 <__pi_release+0xfc>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	6f707369 	svcvs	0x00707369
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
     d28:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     d2c:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
     d30:	656e0067 	strbvs	r0, [lr, #-103]!	; 0xffffff99
     d34:	63007478 	movwvs	r7, #1144	; 0x478
			SysCtrlSetRechargeBeforePowerDown
     d38:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3c:	745f6e75 	ldrbvc	r6, [pc], #-3701	; d44 <__pi_release+0x11c>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d44:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
     d4c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     d50:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d54:	63740074 	cmnvs	r4, #116	; 0x74
     d58:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	74006f66 	strvc	r6, [r0], #-3942	; 0xfffff09a
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	6f5f7663 	svcvs	0x005f7663
     d64:	006e6570 	rsbeq	r6, lr, r0, ror r5
     d68:	5f766374 	svcpl	0x00766374
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6c:	706f7264 	rsbvc	r7, pc, r4, ror #4
			while (!(AONWUCPowerStatusGet () &
     d70:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
     d78:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
     d7c:	00797470 	rsbseq	r7, r9, r0, ror r4
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d80:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d84:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 424 <root+0x178>
     d88:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
     d8c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
     d94:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
     d9c:	73657565 	cmnvc	r5, #423624704	; 0x19400000
			SysCtrlAdjustRechargeAfterPowerDown ();
     da0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; da8 <__pi_release+0x180>
			reinit_uart ();
     da4:	715f7663 	cmpvc	pc, r3, ror #12
     da8:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     dac:	5f00735f 	svcpl	0x0000735f
}
     db0:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db4:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
     db8:	745f6d65 	ldrbvc	r6, [pc], #-3429	; dc0 <__pi_release+0x198>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dbc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; dc4 <__pi_release+0x19c>
     dc0:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     dc4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	00745f6b 	rsbseq	r5, r4, fp, ror #30
     dcc:	70747461 	rsbsvc	r7, r4, r1, ror #8
     dd0:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	00746e65 	rsbseq	r6, r4, r5, ror #28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	72450065 	subvc	r0, r5, #101	; 0x65
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	0074725f 	rsbseq	r7, r4, pc, asr r2
     de4:	5f766374 	svcpl	0x00766374
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de8:	006f6c63 	rsbeq	r6, pc, r3, ror #24
     dec:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	0073726f 	rsbseq	r7, r3, pc, ror #4
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df8:	5f766374 	svcpl	0x00766374
     dfc:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
			PRCMPowerDomainOff (
     e00:	63740065 	cmnvs	r4, #101	; 0x65
     e04:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
	__SLEEP;
     e08:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
     e0c:	6f5f7663 	svcvs	0x005f7663
  __ASM volatile ("cpsie i" : : : "memory");
     e10:	74007475 	strvc	r7, [r0], #-1141	; 0xfffffb8b
	goto Redo;
     e14:	5f707663 	svcpl	0x00707663
     e18:	0077656e 	rsbseq	r6, r7, lr, ror #10
     e1c:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
     e20:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
     e24:	745f7663 	ldrbvc	r7, [pc], #-1635	; e2c <__pi_release+0x204>
     e28:	7000746d 	andvc	r7, r0, sp, ror #8
     e2c:	00737274 	rsbseq	r7, r3, r4, ror r2
     e30:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     e34:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     e38:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e3c:	706e775f 	rsbvc	r7, lr, pc, asr r7
     e40:	63740073 	cmnvs	r4, #115	; 0x73
     e44:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
     e48:	00657469 	rsbeq	r7, r5, r9, ror #8
     e4c:	5f766374 	svcpl	0x00766374
     e50:	00766372 	rsbseq	r6, r6, r2, ror r3
     e54:	5f766374 	svcpl	0x00766374
     e58:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     e5c:	5f5f0065 	svcpl	0x005f0065
     e60:	5f766374 	svcpl	0x00766374
     e64:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
     e68:	5f637365 	svcpl	0x00637365
     e6c:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
     e70:	70007379 	andvc	r7, r0, r9, ror r3
     e74:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
     e78:	006c6163 	rsbeq	r6, ip, r3, ror #2
     e7c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
int main (void) {
     e80:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	00646575 	rsbeq	r6, r4, r5, ror r5
     e88:	5f766374 	svcpl	0x00766374
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	system_init ();
     e94:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
	tcv_init ();
     e98:	63740074 	cmnvs	r4, #116	; 0x74
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
     ea0:	6573006d 	ldrbvs	r0, [r3, #-109]!	; 0xffffff93
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	6f697373 	svcvs	0x00697373
     ea8:	6374006e 	cmnvs	r4, #110	; 0x6e
     eac:	635f7076 	cmpvs	pc, #118	; 0x76
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
     eb4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	delay (16, 0);
     eb8:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
     ebc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     ec0:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
	__pi_release ();
     ec4:	63740064 	cmnvs	r4, #100	; 0x64
     ec8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     ecc:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     ed0:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     ed4:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
     ed8:	006e7265 	rsbeq	r7, lr, r5, ror #4
     edc:	5f766374 	svcpl	0x00766374
static void killev (__pi_pcb_t *pid) {
     ee0:	0065706f 	rsbeq	r7, r5, pc, rrx
	wfun = (aword)(pid->code);
     ee4:	5f766374 	svcpl	0x00766374
	for_all_tasks (i) {
     ee8:	00746d78 	rsbseq	r6, r4, r8, ror sp
		for (j = 0; j < nevents (i); j++) {
     eec:	61766374 	cmnvs	r6, r4, ror r3
     ef0:	745f7064 	ldrbvc	r7, [pc], #-100	; ef8 <killev+0x18>
     ef4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			    || i->Events [j] . Event == wfun
     ef8:	756c705f 	strbvc	r7, [ip, #-95]!	; 0xffffffa1
		for (j = 0; j < nevents (i); j++) {
     efc:	65680067 	strbvs	r0, [r8, #-103]!	; 0xffffff99
			if (i->Events [j] . Event == (aword)pid
     f00:	61006461 	tstvs	r0, r1, ror #8
     f04:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
     f08:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
				wakeupev (i, j);
     f0c:	5f5f0073 	svcpl	0x005f0073
     f10:	5f766374 	svcpl	0x00766374
	for_all_tasks (i) {
     f14:	61656871 	smcvs	22145	; 0x5681
}
     f18:	00745f64 	rsbseq	r5, r4, r4, ror #30
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
static void qfree (aword *ch) {
     f20:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
	cc = (aword*)(mpools + MA_NP);
     f28:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
	m_setnextp (ch, chunk);
     f2c:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
	m_setnextp (cc, ch);
     f30:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
}
     f34:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f38:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     f3c:	63725f79 	cmnvs	r2, #484	; 0x1e4
     f40:	71620076 	smcvc	8198	; 0x2006
			m_setnextp (cc, m_nextp (chunk));
     f44:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
			m_size (chunk) += m_hdrlen + m_size (ch);
     f48:	756c7000 	strbvc	r7, [ip, #-0]!
     f4c:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
     f50:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f58 <qfree+0x3c>
     f54:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	636f6c62 	cmnvs	pc, #25088	; 0x6200
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	00735f6b 	rsbseq	r5, r3, fp, ror #30
     f60:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
     f64:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
			m_setnextp (cc, m_nextp (chunk));
     f68:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	6f635f70 	svcvs	0x00635f70
     f70:	6f72746e 	svcvs	0x0072746e
     f74:	655f006c 	ldrbvs	r0, [pc, #-108]	; f10 <killev+0x30>
     f78:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     f7c:	645f006b 	ldrbvs	r0, [pc], #-107	; f84 <qfree+0x68>
     f80:	00617461 	rsbeq	r7, r1, r1, ror #8
			if (m_size (chunk) >= m_size (ch))
     f84:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
     f88:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
     f8c:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
		chunk = m_nextp (chunk))
     f90:	5349746c 	movtpl	r7, #37996	; 0x946c
     f94:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
     f98:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
	diag_wait (a);
     fa0:	61485253 	cmpvs	r8, r3, asr r2
	diag_wchar (c, a);
     fa4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     fa8:	655f0072 	ldrbvs	r0, [pc, #-114]	; f3e <qfree+0x22>
}
     fac:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     fb0:	62655f00 	rsbvs	r5, r5, #0, 30
	syserror (ESTATE, "state");
     fb4:	2f007373 	svccs	0x00007373
     fb8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     fbc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     fc0:	2f6e6974 	svccs	0x006e6974
void update_n_wake (word min, Boolean force) {
     fc4:	6b736544 	blvs	1cda4dc <__ccfg+0x1cba534>
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	2f706f74 	svccs	0x00706f74
     fcc:	4f534c4f 	svcmi	0x00534c4f
     fd0:	2f54454e 	svccs	0x0054454e
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	4f434950 	svcmi	0x00434950
     fd8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     fdc:	2f534f63 	svccs	0x00534f63
     fe0:	33314343 	teqcc	r1, #201326593	; 0xc000001
     fe4:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
     fe8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     fec:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
     ff0:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     ff4:	73625f00 	cmnvc	r2, #0, 30
     ff8:	655f0073 	ldrbvs	r0, [pc, #-115]	; f8d <qfree+0x71>
     ffc:	61746164 	cmnvs	r4, r4, ror #2
    1000:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
    1004:	61666544 	cmnvs	r6, r4, asr #10
		for_all_tasks (i) {
    1008:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
	__pi_mintk = znew + min;
    100c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1010:	67007265 	strvs	r7, [r0, -r5, ror #4]
			if (!twaiting (i))
    1014:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    1018:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101c:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1020:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    1024:	73654432 	cmnvc	r5, #838860800	; 0x32000000
    1028:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
    102c:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1030:	43005253 	movwmi	r5, #595	; 0x253
    1034:	5f474643 	svcpl	0x00474643
    1038:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
    103c:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
    1040:	00305f44 	eorseq	r5, r0, r4, asr #30
    1044:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1048:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
				wakeuptm (i);
    104c:	4f4c5f54 	svcmi	0x004c5f54
    1050:	315f4441 	cmpcc	pc, r1, asr #8
		for_all_tasks (i) {
    1054:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				d = i->Timer - znew;
    1058:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
    105c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1060:	00474946 	subeq	r4, r7, r6, asr #18
		if ((word)(__pi_mintk - znew) < min) 
    1064:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1068:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    106c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
	__pi_old = znew;
    1070:	00544553 	subseq	r4, r4, r3, asr r5
}
    1074:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	TCI_RUN_DELAY_TIMER;
    1078:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1080 <update_n_wake+0xbc>
}
    107c:	4f435f45 	svcmi	0x00435f45
    1080:	5f00464e 	svcpl	0x0000464e
    1084:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    1088:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
    108c:	2f656d6f 	svccs	0x00656d6f
void proceed (word state) {
    1090:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	prcdstate (__pi_curr, state);
    1094:	442f6e69 	strtmi	r6, [pc], #-3689	; 109c <proceed+0xc>
    1098:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	release;
    109c:	4f2f706f 	svcmi	0x002f706f
    10a0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
void __pi_wait (aword event, word state) {
    10a4:	502f5445 	eorpl	r5, pc, r5, asr #8
	sint j = nevents (__pi_curr);
    10a8:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (j >= MAX_EVENTS_PER_TASK)
    10ac:	6369502f 	cmnvs	r9, #47	; 0x2f
    10b0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    10b4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		syserror (ENEVENTS, "sw");
    10b8:	63632f58 	cmnvs	r3, #88, 30	; 0x160
    10bc:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
	setestate (__pi_curr->Events [j], state, event);
    10c0:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	incwait (__pi_curr);
    10c4:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	setestate (__pi_curr->Events [j], state, event);
    10c8:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
}
    10cc:	445f444e 	ldrbmi	r4, [pc], #-1102	; 10d4 <__pi_wait+0x30>
    10d0:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
    10d4:	5347414c 	movtpl	r4, #29004	; 0x714c
void __pi_trigger (aword event) {
    10d8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	for_all_tasks (i) {
    10dc:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		for (j = 0; j < nevents (i); j++) {
    10e0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fd4 <update_n_wake+0x10>
    10e4:	305f4341 	subscc	r4, pc, r1, asr #6
    10e8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    10ec:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
			if (i->Events [j] . Event == event) {
    10f0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; fe4 <update_n_wake+0x20>
    10f4:	315f4341 	cmpcc	pc, r1, asr #6
    10f8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				wakeupev (i, j);
    10fc:	4f4d5f47 	svcmi	0x004d5f47
    1100:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
	for_all_tasks (i) {
    1104:	5f464e4f 	svcpl	0x00464e4f
}
    1108:	43430031 	movtmi	r0, #12337	; 0x3031
aword __pi_join (aword pid, word st) {
    110c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	for_all_tasks (i) {
    1110:	5f474643 	svcpl	0x00474643
    1114:	5f504154 	svcpl	0x00504154
	return 0;
    1118:	5f504144 	svcpl	0x00504144
		if ((aword)i == pid) {
    111c:	43430030 	movtmi	r0, #12336	; 0x3030
			__pi_wait (pid, st);
    1120:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
}
    1124:	5f474643 	svcpl	0x00474643
	for_all_tasks (i) {
    1128:	5f504154 	svcpl	0x00504154
    112c:	5f504144 	svcpl	0x00504144
void delay (word d, word state) {
    1130:	63630031 	cmnvs	r3, #49	; 0x31
	settstate (__pi_curr, state);
    1134:	745f6766 	ldrbvc	r6, [pc], #-1894	; 113c <delay+0xc>
    1138:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    113c:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1140:	505f4746 	subspl	r4, pc, r6, asr #14
	update_n_wake (d, YES);
    1144:	5f544f52 	svcpl	0x00544f52
    1148:	5f373231 	svcpl	0x00373231
	__pi_curr->Timer = __pi_old + d;
    114c:	43003639 	movwmi	r3, #1593	; 0x639
    1150:	5f474643 	svcpl	0x00474643
	inctimer (__pi_curr);
    1154:	53415245 	movtpl	r5, #4677	; 0x1245
    1158:	4f435f45 	svcmi	0x00435f45
    115c:	4300464e 	movwmi	r4, #1614	; 0x64e
}
    1160:	5f474643 	svcpl	0x00474643
    1164:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (fun == NULL)
    1168:	4f52505f 	svcmi	0x0052505f
		return (int) __pi_curr;
    116c:	31335f54 	teqcc	r3, r4, asr pc
    1170:	4300305f 	movwmi	r3, #95	; 0x5f
	for_all_tasks (i)
    1174:	5f474643 	svcpl	0x00474643
}
    1178:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
		if (i->code == fun)
    117c:	41565f45 	cmpmi	r6, r5, asr #30
	for_all_tasks (i)
    1180:	5f44494c 	svcpl	0x0044494c
    1184:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1188:	46434300 	strbmi	r4, [r3], -r0, lsl #6
int __pi_strlen (const char *s) {
    118c:	52465f47 	subpl	r5, r6, #284	; 0x11c
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	4f5f5145 	svcmi	0x005f5145
}
    1194:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	43430054 	movtmi	r0, #12372	; 0x3054
	while (n--)
    119c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    11a0:	5f474643 	svcpl	0x00474643
		*dest++ = *src++;
    11a4:	544f5250 	strbpl	r5, [pc], #-592	; 11ac <__pi_memcpy+0x12>
    11a8:	5f33365f 	svcpl	0x0033365f
    11ac:	43003233 	movwmi	r3, #563	; 0x233
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	5f474643 	svcpl	0x00474643
		syserror (EREQPAR, "addv");
    11b4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
		syserror (ERESOURCE, "addv");
    11b8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
	if (ioreq [loc] != NULL)
    11bc:	4300305f 	movwmi	r3, #95	; 0x5f
    11c0:	5f474643 	svcpl	0x00474643
		syserror (ERESOURCE, "addv");
    11c4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
	ioreq [loc] = rf;
    11c8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
}
    11cc:	4300315f 	movwmi	r3, #351	; 0x15f
    11d0:	5f474643 	svcpl	0x00474643
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11d8:	4f52505f 	svcmi	0x0052505f
    11dc:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
    11e0:	0034365f 	eorseq	r3, r4, pc, asr r6
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11e8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    11ec:	5f464c5f 	svcpl	0x00464c5f
		syserror (ENODEVICE, "io");
    11f0:	004b4c43 	subeq	r4, fp, r3, asr #24
    11f4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (len == 0)
    11f8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1200:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
	if (ret >= 0)
    1204:	534e4f49 	movtpl	r4, #61257	; 0xef49
	if (ret == -1) {
    1208:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    120c:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
		if (retry == WNONE)
    1210:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
		iowait (dev, operation, retry);
    1214:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
    1218:	70006b6e 	andvc	r6, r0, lr, ror #22
    121c:	735f6e69 	cmpvc	pc, #1680	; 0x690
			release;
    1220:	6f736e65 	svcvs	0x00736e65
	if (ret == -2) {
    1224:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
		if (retry != WNONE) {
    1228:	70006461 	andvc	r6, r0, r1, ror #8
    122c:	735f6e69 	cmpvc	pc, #1680	; 0x690
			iowait (dev, operation, retry);
    1230:	6f736e65 	svcvs	0x00736e65
    1234:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
			(ioreq [dev]) (NONE, buf, len);
    1238:	2f007469 	svccs	0x00007469
    123c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1240:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		(ioreq [dev]) (NONE, buf, len);
    1244:	2f6e6974 	svccs	0x006e6974
    1248:	6b736544 	blvs	1cda760 <__ccfg+0x1cba7b8>
    124c:	2f706f74 	svccs	0x00706f74
}
    1250:	4f534c4f 	svcmi	0x00534c4f
	if (retry != WNONE) {
    1254:	2f54454e 	svccs	0x0054454e
		delay (-ret - 2, retry);
    1258:	4f434950 	svcmi	0x00434950
    125c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1260:	2f534f63 	svccs	0x00534f63
    1264:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		release;
    1268:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    126c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1270:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1274:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1278:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    127c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    1280:	006d7265 	rsbeq	r7, sp, r5, ror #4
		syserror (ERESOURCE, "mal1");
    1284:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
    1288:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    128c:	6f626544 	svcvs	0x00626544
    1290:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1294:	6f682f00 	svcvs	0x00682f00
	m_size (mpools [0]) = mlen - m_hdrlen;
    1298:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 10ec <__pi_trigger+0x14>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    12a4:	6f746b73 	svcvs	0x00746b73
}
    12a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    12ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    12b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    12b4:	2f534f43 	svccs	0x00534f43
    12b8:	4f636950 	svcmi	0x00636950
    12bc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
void __pi_free (aword *ch) {
    12c0:	2f736269 	svccs	0x00736269
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	622f4f49 	eorvs	r4, pc, #292	; 0x124
    12c8:	6f747475 	svcvs	0x00747475
		syserror (EMALLOC, "malg");
    12cc:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    12d0:	75627000 	strbvc	r7, [r2, #-0]!
	mcfree [MA_NP] += m_size (ch);
    12d4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
		m_size (ch) ^= MALLOC_UMASK;
    12d8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    12dc:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
	mcfree [MA_NP] += m_size (ch);
    12e0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	QFREE;
    12e4:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
	if (mevent [MA_NP] . nwait) {
    12e8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    12ec:	63615f73 	cmnvs	r1, #460	; 0x1cc
		trigger ((aword)(&(mevent [MA_NP])));
    12f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
		mevent [MA_NP] . nwait --;
    12f4:	6f434500 	svcvs	0x00434500
}
    12f8:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
    12fc:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    1300:	655f7469 	ldrbvs	r7, [pc, #-1129]	; e9f <main+0x1f>
    1304:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
void kill (aword pid) {
    1308:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
		pid = (aword) __pi_curr;
    130c:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
	j = NULL;
    1310:	00305f64 	eorseq	r5, r0, r4, ror #30
	for_all_tasks (i) {
    1314:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
	syserror (EREQPAR, "kpi");
    1318:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    131c:	5f656500 	svcpl	0x00656500
		if ((aword)i == pid) {
    1320:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    1324:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
				__PCB = i->Next;
    1328:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
			killev (i);
    132c:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
			ufree (i);
    1330:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
			if (i == __pi_curr)
    1334:	5f656500 	svcpl	0x00656500
    1338:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
				release;
    133c:	6f435700 	svcvs	0x00435700
				j->Next = i->Next;
    1340:	6300746e 	movwvs	r7, #1134	; 0x46e
    1344:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
    1348:	73616c00 	cmnvc	r1, #0, 24
}
    134c:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
    1350:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
    1354:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
void killall (fsmcode fun) {
    1358:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
	j = NULL;
    135c:	6600636e 	strvs	r6, [r0], -lr, ror #6
	for (i = __PCB; i != NULL; ) {
    1360:	006d6f72 	rsbeq	r6, sp, r2, ror pc
			if (i == __pi_curr)
    1364:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
	for (i = __PCB; i != NULL; ) {
    1368:	00646165 	rsbeq	r6, r4, r5, ror #2
	if (rel)
    136c:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
		release;
    1370:	6f682f00 	svcvs	0x00682f00
		if (i->code == fun) {
    1374:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 11c8 <adddevfunc+0x18>
    1378:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			if (j == NULL)
    137c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				__PCB = k;
    1380:	6f746b73 	svcvs	0x00746b73
			if (i == __pi_curr)
    1384:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				rel = YES;
    1388:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			killev (i);
    138c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			ufree (i);
    1390:	2f534f43 	svccs	0x00534f43
			i = k;
    1394:	4f636950 	svcmi	0x00636950
    1398:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
				j->Next = k;
    139c:	2f736269 	svccs	0x00736269
    13a0:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
}
    13a4:	2f656761 	svccs	0x00656761
    13a8:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    13ac:	5f656761 	svcpl	0x00656761
	if (size < 8)
    13b0:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
		_size = 2;
    13b4:	33303872 	teqcc	r0, #7471104	; 0x720000
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	00632e35 	rsbeq	r2, r3, r5, lsr lr
		_size = (((aword)size) + 3) >> 2;
    13bc:	6f6c6363 	svcvs	0x006c6363
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c0:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
		_size = (((aword)size) + 3) >> 2;
    13c4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		if (mevent [MA_NP] . nfail != 255)
    13c8:	706f6300 	rsbvc	r6, pc, r0, lsl #6
    13cc:	63006e65 	movwvs	r6, #3685	; 0xe65
			mevent [MA_NP] . nfail ++;
    13d0:	00727470 	rsbseq	r7, r2, r0, ror r4
		mnfree [MA_NP] = 0;
    13d4:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    13d8:	00657a69 	rsbeq	r7, r5, r9, ror #20
		if (m_magic (chunk) != MALLOC_MAGIC)
    13dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    13e0:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
			syserror (EMALLOC, "malc");
    13e4:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13e8:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
		if (m_size (chunk) >= _size)
    13ec:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
    13f0:	00746961 	rsbseq	r6, r4, r1, ror #18
		chunk = m_nextp (chunk)) {
    13f4:	5f746567 	svcpl	0x00746567
		m_setnextp (cc, m_nextp (chunk));
    13f8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13fc:	74757000 	ldrbtvc	r7, [r5], #-0
    1400:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
			m_size (chunk) = _size;
    1404:	5f5f0065 	svcpl	0x005f0065
			cc = chunk + _size + m_hdrlen;
    1408:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
    140c:	00656e69 	rsbeq	r6, r5, r9, ror #28
			m_size (cc) = waste - m_hdrlen;
    1410:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 135c <killall+0x4>
			QFREE;
    1414:	616d2f65 	cmnvs	sp, r5, ror #30
		mevent [MA_NP] . nfail = 0;
    1418:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		mcfree [MA_NP] -= m_size (chunk);
    141c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1420:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1424:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1428:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		m_size (chunk) |= MALLOC_UMASK;
    142c:	4349502f 	movtmi	r5, #36911	; 0x902f
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	502f534f 	eorpl	r5, pc, pc, asr #6
		m_size (chunk) |= MALLOC_UMASK;
    1434:	534f6369 	movtpl	r6, #62313	; 0xf369
			mnfree [MA_NP] = mcfree [MA_NP];
    1438:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
}
    143c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1440:	61697265 	cmnvs	r9, r5, ror #4
    1444:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1448:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    144c:	7300632e 	movwvc	r6, #814	; 0x32e
    1450:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1454:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
aword __pi_fork (fsmcode func, aword data) {
    1458:	73007363 	movwvc	r7, #867	; 0x363
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    145c:	6f5f7265 	svcvs	0x005f7265
    1460:	00667475 	rsbeq	r7, r6, r5, ror r4
    1464:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13b0 <__pi_malloc>
		if ((j = __PCB) == NULL)
    1468:	616d2f65 	cmnvs	sp, r5, ror #30
	i->Next = NULL;
    146c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	i->data = data;
    1470:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		if ((j = __PCB) == NULL)
    1474:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
    1478:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			for (; j->Next != NULL; j = j->Next);
    147c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1480:	4349502f 	movtmi	r5, #36911	; 0x902f
	return (aword) i;
    1484:	502f534f 	eorpl	r5, pc, pc, asr #6
    1488:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (mevent [MA_NP] . nwait != 255)
    148c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1490:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1494:	61697265 	cmnvs	r9, r5, ror #4
		mevent [MA_NP] . nwait ++;
    1498:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
	wait ((aword)(&(mevent [MA_NP])), state);
    149c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 532 <tci_run_delay_timer+0xe>
    14a0:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
void diag (const char *mess, ...) {
    14a4:	6f682f00 	svcvs	0x00682f00
    14a8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 12fc <__pi_free+0x3c>
    14ac:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	diag_disable_int (a, is);
    14b0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    14b4:	6f746b73 	svcvs	0x00746b73
    14b8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				d = (bc == 16) ? 10000 : 1000000000;
    14bc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	diag_disable_int (a, is);
    14c0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	while (*mess != '\0') {
    14c4:	2f534f43 	svccs	0x00534f43
	dgout ('\r');
    14c8:	4f636950 	svcmi	0x00636950
	dgout ('\n');
    14cc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    14d0:	2f736269 	svccs	0x00736269
    14d4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	diag_wait (a);
    14d8:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
	diag_enable_int (a, is);
    14dc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    14e0:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
}
    14e4:	72657300 	rsbvc	r7, r5, #0, 6
    14e8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    14ec:	6f682f00 	svcvs	0x00682f00
		if (*mess == '%') {
    14f0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1344 <kill+0x3c>
    14f4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			if (*mess == 'l') {
    14f8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    14fc:	6f746b73 	svcvs	0x00746b73
				mess++;
    1500:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				val = va_arg (ap, lword);
    1504:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				bc = 32;
    1508:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				bc = 16;
    150c:	2f534f43 	svccs	0x00534f43
			switch (*mess) {
    1510:	4f636950 	svcmi	0x00636950
    1514:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1518:	2f736269 	svccs	0x00736269
				dgout ('%');
    151c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1520:	5f2f6c61 	svcpl	0x002f6c61
				dgout (*mess);
    1524:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1528:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			switch (*mess) {
    152c:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
					v = __pi_hex_enc_table [
    1530:	61757100 	cmnvs	r5, r0, lsl #2
					i += 4;
    1534:	5f00746e 	svcpl	0x0000746e
					(val >> (bc - i)) & 0xf];
    1538:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    153c:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
					dgout (v);
    1540:	5f006c61 	svcpl	0x00006c61
    1544:	5f4d4f5f 	svcpl	0x004d4f5f
				while (i < bc) {
    1548:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
			mess++;
    154c:	5f5f0045 	svcpl	0x005f0045
					d /= 10;
    1550:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
				if ((val >> (bc - 1)) & 1) {
    1554:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1558:	6f682f00 	svcvs	0x00682f00
					dgout ('-');
    155c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 13b0 <__pi_malloc>
    1560:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
						val |= 0xffff0000;
    1564:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1568:	6f746b73 	svcvs	0x00746b73
    156c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				d = (bc == 16) ? 10000 : 1000000000;
    1570:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1574:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1578:	2f534f43 	svccs	0x00534f43
					v = (word) (val / d);
    157c:	4f636950 	svcmi	0x00636950
					if (v || d == 1) break;
    1580:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1584:	2f736269 	svccs	0x00736269
					d /= 10;
    1588:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
				d = (bc == 16) ? 10000 : 1000000000;
    158c:	5f2f6c61 	svcpl	0x002f6c61
					dgout (v + '0');
    1590:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    1594:	61697265 	cmnvs	r9, r5, ror #4
    1598:	00632e6c 	rsbeq	r2, r3, ip, ror #28
					d /= 10;
    159c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14e8 <diag+0x44>
					val = val - (v * d);
    15a0:	616d2f65 	cmnvs	sp, r5, ror #30
					if (d == 0) break;
    15a4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
					v = (word) (val / d);
    15a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    15ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
				if (bc == 16)
    15b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				d = (bc == 16) ? 10000 : 1000000000;
    15b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
					val &= 0xffff;
    15b8:	4349502f 	movtmi	r5, #36911	; 0x902f
					dgout (*s);
    15bc:	502f534f 	eorpl	r5, pc, pc, asr #6
					s++;
    15c0:	534f6369 	movtpl	r6, #62313	; 0xf369
				while (*s != '\0') {
    15c4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    15c8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
			dgout (*mess++);
    15cc:	61697265 	cmnvs	r9, r5, ror #4
    15d0:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    15d4:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    15d8:	67410063 	strbvs	r0, [r1, -r3, rrx]
    15dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
}
    15e0:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
    while(1)
    15e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
{
    15e8:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    SetupTrimDevice();
    15ec:	73726170 	cmnvc	r2, #112, 2
    pui32Src = &_etext;
    15f0:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    15f4:	006d726f 	rsbeq	r7, sp, pc, ror #4
    __asm("    ldr     r0, =_bss\n"
    15f8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
    15fc:	5f645f79 	svcpl	0x00645f79
    1600:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    1604:	6f682f00 	svcvs	0x00682f00
    1608:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 145c <__pi_fork+0x4>
   main();
    160c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    FaultISR();
    1610:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
        *pui32Dest++ = *pui32Src++;
    1614:	6f746b73 	svcvs	0x00746b73
    1618:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    161c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1620:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1624:	2f534f43 	svccs	0x00534f43
    1628:	4f636950 	svcmi	0x00636950
    162c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1630:	2f736269 	svccs	0x00736269
static byte get_byte () {
    1634:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1638:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
    163c:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1640:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    1644:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
		if (ee_inp)
    1648:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
			b |= 1;
    164c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1654 <get_byte+0x20>
    1650:	6f776c5f 	svcvs	0x00776c5f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1654:	4e006472 	mcrmi	4, 0, r6, cr0, cr2, {3}
	for (b = 0, i = 0; i < 8; i++) {
    1658:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1524 <diag+0x80>
}
    165c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    1660:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    1664:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
static void put_byte (byte b) {
    1668:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
    166c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1670:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    1674:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
		if (b & 0x80)
    1678:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 1680 <put_byte+0x18>
    167c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1680:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
	for (i = 0; i < 8; i++) {
    1684:	5f5f0065 	svcpl	0x005f0065
		b <<= 1;
    1688:	33746e69 	cmncc	r4, #1680	; 0x690
	for (i = 0; i < 8; i++) {
    168c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
}
    1690:	20554e47 	subscs	r4, r5, r7, asr #28
    1694:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1698:	20332e39 	eorscs	r2, r3, r9, lsr lr
    169c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	put_byte (cmd);
    16a0:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
    16a4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
}
    16a8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    16ac:	5b202965 	blpl	80bc48 <__ccfg+0x7ebca0>
static void wwait (word st, word del) {
    16b0:	2f4d5241 	svccs	0x004d5241
    16b4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
    16b8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	while (dopen && (rdsr () & 1)) {
    16bc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    16c0:	6172622d 	cmnvs	r2, sp, lsr #4
    16c4:	2068636e 	rsbcs	r6, r8, lr, ror #6
    16c8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
	put_byte (CMD_RDSR);
    16cc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
	r = get_byte ();
    16d0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
    16d4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	while (dopen && (rdsr () & 1)) {
    16d8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
}
    16dc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
		if (st == WNONE)
    16e0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    16e4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
			mdelay (1);
    16e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    16ec:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
			delay (del, st);
    16f0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    16f4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
			release;
    16f8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
    16fc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
    1700:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
static void ready () {
    1704:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
	if (dopen) {
    1708:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
		wwait (WNONE, 1);
    170c:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
    1710:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    1714:	662d2067 	strtvs	r2, [sp], -r7, rrx
	dstat = 0;
    1718:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
}
    171c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1720:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    1724:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	udelay (1);
    1728:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    172c:	61746164 	cmnvs	r4, r4, ror #2
	udelay (1);
    1730:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
		dopen = DOPEN_TEMP;
    1734:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1738:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    173c:	006d7361 	rsbeq	r7, sp, r1, ror #6
    1740:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
static void cclose () {
    1744:	745f3874 	ldrbvc	r3, [pc], #-2164	; 174c <cclose+0x8>
	if (dopen == DOPEN_TEMP) {
    1748:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    174c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		wwait (WNONE, 1);
    1750:	2f2e2e2f 	svccs	0x002e2e2f
    1754:	76697264 	strbtvc	r7, [r9], -r4, ror #4
	cmd_0 (CMD_DP);
    1758:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    175c:	6f612f62 	svcvs	0x00612f62
		dopen = 0;
    1760:	61625f6e 	cmnvs	r2, lr, ror #30
}
    1764:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
word ee_open () {
    1768:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
	ready ();
    176c:	43706d65 	cmnmi	r0, #6464	; 0x1940
	dopen = DOPEN_PERM;
    1770:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
    1774:	6f697463 	svcvs	0x00697463
}
    1778:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
	if (dopen) {
    177c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1780:	706d6554 	rsbvc	r6, sp, r4, asr r5
		dopen = DOPEN_TEMP;
    1784:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
		cclose ();
    1788:	6b6e654a 	blvs	1b9acb8 <__ccfg+0x1b7ad10>
}
    178c:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
int ser_in (word st, char *buf, int len) {
    1790:	73626f6a 	cmnvc	r2, #424	; 0x1a8
    1794:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
	if (len == 0)
    1798:	70756f72 	rsbsvc	r6, r5, r2, ror pc
	if (__inpline == NULL) {
    179c:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
		if ((prcs = running (__inserial)) == 0) {
    17a0:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
    17a4:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
			prcs = runthread (__inserial);
    17a8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    17ac:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
			if (prcs == 0) {
    17b0:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 17b8 <ser_in+0x28>
				npwait (st);
    17b4:	73656c75 	cmnvc	r5, #29952	; 0x7500
		release;
    17b8:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
		join (prcs, st);
    17bc:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
    17c0:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
	if (*__inpline == NULL) // bin cmd
    17c4:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    17c8:	325f6168 	subscc	r6, pc, #104, 2
	if (prcs >= len)
    17cc:	655f305f 	ldrbvs	r3, [pc, #-95]	; 1775 <ee_open+0xd>
		prcs = len-1;
    17d0:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
	memcpy (buf, __inpline, prcs);
    17d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    17d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    17dc:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
	ufree (__inpline);
    17e0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
	__inpline = NULL;
    17e4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
	if (*buf) // if it's NULL, it's a bin cmd
    17e8:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
		buf [prcs] = '\0';
    17ec:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
}
    17f0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 8f8 <UART0IntHandler+0x6c>
		prcs = strlen (__inpline);
    17f4:	33746e69 	cmncc	r4, #1680	; 0x690
    17f8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
		return 0;
    17fc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1800:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1804:	53746e65 	cmnpl	r4, #1616	; 0x650
int ser_outf (word st, const char *m, ...) {
    1808:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    180c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 16d8 <wwait+0x28>
	if ((prcs = running (__outserial)) != 0) {
    1810:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    1814:	43435452 	movtmi	r5, #13394	; 0x3452
		join (prcs, st);
    1818:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    181c:	6f43746e 	svcvs	0x0043746e
		release;
    1820:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1824:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    1828:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    182c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
		umwait (st);
    1830:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
    1834:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
	if (runstrand (__outserial, buf) == 0) {
    1838:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
    183c:	00646165 	rsbeq	r6, r4, r5, ror #2
    1840:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		ufree (buf);
    1844:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
		npwait (st);
    1848:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
}
    184c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    1850:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1854:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
    1858:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
int ser_inf (word st, const char *fmt, ...) {
    185c:	524f4e00 	subpl	r4, pc, #0, 28
    1860:	415f4d4f 	cmpmi	pc, pc, asr #26
	if (fmt == NULL)
    1864:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
	if (__inpline == NULL) {
    1868:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
		if ((prcs = running (__inserial)) == 0) {
    186c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1870:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
			prcs = runthread (__inserial);
    1874:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1878:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
			if (prcs == 0) {
    187c:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
				npwait (st);
    1880:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
		release;
    1884:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
		join (prcs, st);
    1888:	63657300 	cmnvs	r5, #0, 6
    188c:	53646e41 	cmnpl	r4, #1040	; 0x410
	va_start (ap, fmt);
    1890:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
	prcs = vscan (__inpline, fmt, ap);
    1894:	2f2e0063 	svccs	0x002e0063
    1898:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	ufree (__inpline);
    189c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	__inpline = NULL;
    18a0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
}
    18a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    18a8:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    18ac:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
		return 0;
    18b0:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    18b4:	7a697300 	bvc	1a5e4bc <__ccfg+0x1a3e514>
    18b8:	70797465 	rsbsvc	r7, r9, r5, ror #8
strand (__outserial, const char*)
    18bc:	4f4e0065 	svcmi	0x004e0065
    18c0:	5f4d4f52 	svcpl	0x004d4f52
    18c4:	62555043 	subsvs	r5, r5, #67	; 0x43
    18c8:	70657361 	rsbvc	r7, r5, r1, ror #6
endstrand
    18cc:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
    18d0:	4f4e0074 	svcmi	0x004e0074
	ptr = data;
    18d4:	5f4d4f52 	svcpl	0x004d4f52
    18d8:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
	if (*ptr)
    18dc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
		len = strlen (ptr);
    18e0:	33697500 	cmncc	r9, #0, 10
    18e4:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    18e8:	33697500 	cmncc	r9, #0, 10
    18ec:	756f4332 	strbvc	r4, [pc, #-818]!	; 15c2 <diag+0x11e>
    18f0:	4e00746e 	cdpmi	4, 0, cr7, cr0, cr14, {3}
    18f4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 17c0 <ser_in+0x30>
    18f8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
	len -= quant;
    18fc:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    1900:	4f4e0064 	svcmi	0x004e0064
    1904:	5f4d4f52 	svcpl	0x004d4f52
	if (len == 0) {
    1908:	63555043 	cmpvs	r5, #67	; 0x43
		ufree (data);
    190c:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
		finish;
    1910:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1914:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1918:	2f2e2e2f 	svccs	0x002e2e2f
    191c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1920:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1924:	70632f62 	rsbvc	r2, r3, r2, ror #30
    1928:	00632e75 	rsbeq	r2, r3, r5, ror lr
strand (__inserial, address)
    192c:	4f524f4e 	svcmi	0x00524f4e
    1930:	50435f4d 	subpl	r5, r3, sp, asr #30
    1934:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
    1938:	6b73616d 	blvs	1cd9ef4 <__ccfg+0x1cb9f4c>
    193c:	31706d00 	cmncc	r0, r0, lsl #26
	if (__inpline != NULL)
    1940:	00766572 	rsbseq	r6, r6, r2, ror r5
    1944:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		finish;
    1948:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    194c:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 178c <ee_close+0x10>
    1950:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1954:	61577465 	cmpvs	r7, r5, ror #8
    1958:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		umwait (IM_INIT);
    195c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 184c <ser_outf+0x44>
		release;
    1960:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
	savedata (data);
    1964:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
	len = MAX_LINE_LENGTH;
    1968:	524f4e00 	subpl	r4, pc, #0, 28
	io (IM_READ, __cport, READ, ptr, 1);
    196c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1970:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1974:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1978:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17b8 <ser_in+0x28>
	if (ptr == (char*) data) { // new line
    197c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1980:	61577465 	cmpvs	r7, r5, ror #8
		if (*ptr == '\0') { // bin cmd
    1984:	7075656b 	rsbsvc	r6, r5, fp, ror #10
			proceed (IM_BIN);
    1988:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1878 <ser_inf+0x1c>
    198c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
		if (*ptr < 0x20)
    1990:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1994:	31676643 	cmncc	r7, r3, asr #12
			proceed (IM_READ);
    1998:	524f4e00 	subpl	r4, pc, #0, 28
    199c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
	if (*ptr == '\n' || *ptr == '\r') {
    19a0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    19a4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    19a8:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 17e8 <ser_in+0x58>
		*ptr = '\0';
    19ac:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
		__inpline = (char*)data;
    19b0:	61577465 	cmpvs	r7, r5, ror #8
		finish;
    19b4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
	if (len) {
    19b8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 18a8 <ser_inf+0x4c>
		ptr++;
    19bc:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    19c0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		len--;
    19c4:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
	proceed (IM_READ);
    19c8:	524f4e00 	subpl	r4, pc, #0, 28
	io (IM_BIN, __cport, READ, ptr, 1);
    19cc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    19d0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    19d4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    19d8:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1818 <ser_outf+0x10>
    19dc:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
	len -= 2;
    19e0:	61577465 	cmpvs	r7, r5, ror #8
	if (len > *ptr + 1) // 1 for 0x04
    19e4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    19e8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 18d8 <__outserial+0x1c>
		len = *ptr + 1;
    19ec:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    19f0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
	ptr++;
    19f4:	33676643 	cmncc	r7, #70254592	; 0x4300000
	quant = io (IM_BINL, __cport, READ, ptr, len);
    19f8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    19fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a00:	2f2e2e2f 	svccs	0x002e2e2f
    1a04:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1a08:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1a0c:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
	len -= quant;
    1a10:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
		__inpline = (char*)data;
    1a14:	4f4e0063 	svcmi	0x004e0063
		finish;
    1a18:	5f4d4f52 	svcpl	0x004d4f52
	ptr += quant;
    1a1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1a20:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
endstrand
    1a24:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    1a28:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1a30 <__inserial+0x104>
	proceed (IM_BINL);
    1a2c:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
endstrand
    1a30:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1a34:	6f54676e 	svcvs	0x0054676e
    1a38:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    1a3c:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    1a40:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1a44:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		if (res && (d < n))
    1a48:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1a4c:	76655231 			; <UNDEFINED> instruction: 0x76655231
    1a50:	6f697369 	svcvs	0x00697369
    1a54:	4f41006e 	svcmi	0x0041006e
			res [d] = (char) c;
    1a58:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
		d++;
    1a5c:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
    1a60:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1a64:	66664f72 	uqsub16vs	r4, r6, r2
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a68:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    1a6c:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    1a70:	6f437265 	svcvs	0x00437265
				enci (10000);
    1a74:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1a78:	00746573 	rsbseq	r6, r4, r3, ror r5
    1a7c:	4f524f4e 	svcmi	0x00524f4e
	d = 0;
    1a80:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
		c = *fm++;
    1a84:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
		if (c == '\\') {
    1a88:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
			if ((c = *fm++) == '\0') {
    1a8c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1a90:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
				outc ('\\');
    1a94:	5f6d6972 	svcpl	0x006d6972
			if ((c = *fm++) == '\0') {
    1a98:	67696475 			; <UNDEFINED> instruction: 0x67696475
				outc ('\\');
    1a9c:	33697500 	cmncc	r9, #0, 10
    1aa0:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
			outc (c);
    1aa4:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    1aa8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
			if (c == '\0')
    1aac:	006c7463 	rsbeq	r7, ip, r3, ror #8
    1ab0:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
			outc (c);
    1ab4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1abc <__pi_vfparse+0x54>
				outc (val);
    1ab8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
				val = (word) va_arg (ap, aword);
    1abc:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
		if (c == '%') {
    1ac0:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    1ac4:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
			c = *fm++;
    1ac8:	6f437265 	svcvs	0x00437265
			switch (c) {
    1acc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    1ad0:	57746573 			; <UNDEFINED> instruction: 0x57746573
    1ad4:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1ad8:	6f724670 	svcvs	0x00724670
    1adc:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    1ae0:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    1ae4:	6b61576e 	blvs	18578a4 <__ccfg+0x18378fc>
    1ae8:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
				outc ('%');
    1aec:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    1af0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
				outc (c);
    1af4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1af8:	524f4e00 	subpl	r4, pc, #0, 28
    1afc:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 1b04 <__pi_vfparse+0x9c>
				if (c == '\0')
    1b00:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
				return d;
    1b04:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
}
    1b08:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    1b0c:	6f46746c 	svcvs	0x0046746c
			switch (c) {
    1b10:	31434372 	hvccc	13362	; 0x3432
    1b14:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
    1b18:	76655277 			; <UNDEFINED> instruction: 0x76655277
				for (i = 12; ; i -= 4) {
    1b1c:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
				val = (word) va_arg (ap, aword);
    1b20:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
						[ (val >> i) & 0xf ]);
    1b24:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1b28:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    1b2c:	6f695666 	svcvs	0x00695666
					outc (__pi_hex_enc_table
    1b30:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    1b34:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
					if (i == 0)
    1b38:	5f6d6972 	svcpl	0x006d6972
    1b3c:	00646f62 	rsbeq	r6, r4, r2, ror #30
				for (i = 12; ; i -= 4) {
    1b40:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
				val = (word) va_arg (ap, aword);
    1b44:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
				if (c == 'd' && (val & 0x8000) != 0) {
    1b48:	6b6c4366 	blvs	1b128e8 <__ccfg+0x1af2940>
				val = (word) va_arg (ap, aword);
    1b4c:	524f4e00 	subpl	r4, pc, #0, 28
				if (c == 'd' && (val & 0x8000) != 0) {
    1b50:	4f5f4d4f 	svcmi	0x005f4d4f
    1b54:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
					outc ('-');
    1b58:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1b5c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
					val = (~val) + 1;
    1b60:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    1b64:	72756300 	rsbsvc	r6, r5, #0, 6
				for (i = 12; ; i -= 4) {
    1b68:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
				enci (10000);
    1b6c:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
    1b70:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1b74:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1b78:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1b7c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1b80:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1b84:	4f524f4e 	svcmi	0x00524f4e
    1b88:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b8c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1b90:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1b94:	6f466d69 	svcvs	0x00466d69
    1b98:	616e4172 	smcvs	58386	; 0xe412
    1b9c:	61707962 	cmnvs	r0, r2, ror #18
    1ba0:	61567373 	cmpvs	r6, r3, ror r3
    1ba4:	3165756c 	cmncc	r5, ip, ror #10
    1ba8:	524f4e00 	subpl	r4, pc, #0, 28
    1bac:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1bb0:	70757465 	rsbsvc	r7, r5, r5, ror #8
				if (c == 'd' || c == 'u') {
    1bb4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1bb8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
					if (c == 'd' &&
    1bbc:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
					val = va_arg (ap, lword);
    1bc0:	6f4c726c 	svcvs	0x004c726c
					fm++;
    1bc4:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
					if (c == 'd' &&
    1bc8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1bcc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
						outc ('-');
    1bd0:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1a08 <__inserial+0xdc>
    1bd4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
						val = (~val) + 1;
    1bd8:	72756300 	rsbsvc	r6, r5, #0, 6
				enci (10000);
    1bdc:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
					enci (1000000000UL);
    1be0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1be4:	6d697600 	stclvs	6, cr7, [r9, #-0]
    1be8:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    1bec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1bf0:	62690030 	rsbvs	r0, r9, #48	; 0x30
    1bf4:	4f736169 	svcmi	0x00736169
    1bf8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    1bfc:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    1c00:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1c04:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1c08:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1c0c:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    1c10:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    1c14:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1c18:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1ae4 <__pi_vfparse+0x7c>
    1c1c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1c20:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
				} else if (c == 'x') {
    1c24:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
					for (i = 28; ; i -= 4) {
    1c28:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
					val = va_arg (ap, lword);
    1c2c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
							[ (val >> i) & 0xf ]);
    1c30:	61466648 	cmpvs	r6, r8, asr #12
    1c34:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
						outc (__pi_hex_enc_table
    1c38:	00747261 	rsbseq	r7, r4, r1, ror #4
    1c3c:	4f524f4e 	svcmi	0x00524f4e
    1c40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
						if (i == 0)
    1c44:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1c48:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
					for (i = 28; ; i -= 4) {
    1c4c:	6f466d69 	svcvs	0x00466d69
					outc ('%');
    1c50:	4f635272 	svcmi	0x00635272
    1c54:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1c58:	61694249 	cmnvs	r9, r9, asr #4
					outc ('l');
    1c5c:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    1c60:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
				val = (word) va_arg (ap, aword);
    1c64:	4161746c 	cmnmi	r1, ip, ror #8
				outc (val);
    1c68:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    1c6c:	4f4e0074 	svcmi	0x004e0074
				while (*st != '\0') {
    1c70:	5f4d4f52 	svcpl	0x004d4f52
    1c74:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c78:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c7c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
					outc (*st);
    1c80:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1c84:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
					st++;
    1c88:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
		c = *fm++;
    1c8c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1c90:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c94:	52726f46 	rsbspl	r6, r2, #280	; 0x118
char *vform (char *res, const char *fm, va_list aq) {
    1c98:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    1c9c:	66437478 			; <UNDEFINED> instruction: 0x66437478
	if (res != NULL) {
    1ca0:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ca4:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
    1ca8:	61746c65 	cmnvs	r4, r5, ror #24
    1cac:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
}
    1cb0:	33697500 	cmncc	r9, #0, 10
    1cb4:	736f5832 	cmnvc	pc, #3276800	; 0x320000
	fml = strlen (fm) + 17;
    1cb8:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    1cbc:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    1cc0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
	if ((res = (char*) umalloc (fml)) == NULL)
    1cc4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1cc8:	4f4e0065 	svcmi	0x004e0065
    1ccc:	5f4d4f52 	svcpl	0x004d4f52
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1cd0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cd4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cd8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1cdc:	41726f46 	cmnmi	r2, r6, asr #30
		ufree (res);
    1ce0:	6f63706d 	svcvs	0x0063706d
		goto Again;
    1ce4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
	if (buf == NULL || fmt == NULL)
    1ce8:	4f4e0031 	svcmi	0x004e0031
int vscan (const char *buf, const char *fmt, va_list ap) {
    1cec:	5f4d4f52 	svcpl	0x004d4f52
	if (buf == NULL || fmt == NULL)
    1cf0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1cf4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1cf8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		    	    case 'u': scanu (lword); break;
    1cfc:	41726f46 	cmnmi	r2, r6, asr #30
			while (isspace (*buf)) buf++;
    1d00:	6f63706d 	svcvs	0x0063706d
    1d04:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
	while (*fmt != '\0') {
    1d08:	4f4e0032 	svcmi	0x004e0032
		if (*fmt++ != '%')
    1d0c:	5f4d4f52 	svcpl	0x004d4f52
		switch (*fmt++) {
    1d10:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1d14:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1d18:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d1c:	41726f46 	cmnmi	r2, r6, asr #30
    1d20:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1d24:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1d28:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
}
    1d2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bf8 <__pi_vfparse+0x190>
		switch (*fmt++) {
    1d30:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1d34:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    1d38:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    1d3c:	66006574 			; <UNDEFINED> instruction: 0x66006574
			while (isspace (*buf)) buf++;
    1d40:	31676663 	cmncc	r7, r3, ror #12
    1d44:	61746144 	cmnvs	r4, r4, asr #2
    1d48:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1d4c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d50:	734f6352 	movtvc	r6, #62290	; 0xf352
    1d54:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
			if (*buf == '\0')
    1d58:	73616942 	cmnvc	r1, #1081344	; 0x108000
			if (*buf != ',') {
    1d5c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			sap = va_arg (ap, char*);
    1d60:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
			nc++;
    1d64:	61740065 	cmnvs	r4, r5, rrx
			if (*buf != ',') {
    1d68:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
				while (!isspace (*buf) && *buf != ',' &&
    1d6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d70:	524f4e00 	subpl	r4, pc, #0, 28
    1d74:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1d78:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1d7c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1d80:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1d84:	6152726f 	cmpvs	r2, pc, ror #4
			while (isspace (*buf)) buf++;
    1d88:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    1d8c:	67664374 			; <UNDEFINED> instruction: 0x67664374
    1d90:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1d94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d98:	2f2e2e2f 	svccs	0x002e2e2f
			if (*buf == ',') buf++;
    1d9c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1da0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			*sap = '\0';
    1da4:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
			break;
    1da8:	5f707574 	svcpl	0x00707574
		    case 'd': scani (word); break;
    1dac:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    1db0:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    1db4:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1db8:	00636e49 	rsbeq	r6, r3, r9, asr #28
    1dbc:	4f524f4e 	svcmi	0x00524f4e
    1dc0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1dc4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1dc8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1dcc:	6f466d69 	svcvs	0x00466d69
    1dd0:	4f635272 	svcmi	0x00635272
    1dd4:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1dd8:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    1ddc:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    1de0:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    1de4:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    1de8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1cb4 <vform+0x1c>
    1dec:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1df0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1df4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1df8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1dfc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1e00:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    1e04:	616c7567 	cmnvs	ip, r7, ror #10
    1e08:	41726f74 	cmnmi	r2, r4, ror pc
    1e0c:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    1e10:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    1e14:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    1e18:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
		    case 'u': scanu (word); break;
    1e1c:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    1e20:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1e24:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1e28:	67695370 			; <UNDEFINED> instruction: 0x67695370
    1e2c:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    1e30:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    1e34:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1e38:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1e3c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e40:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1e44:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e48:	41726f46 	cmnmi	r2, r6, asr #30
    1e4c:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e50:	66756256 			; <UNDEFINED> instruction: 0x66756256
    1e54:	61566e45 	cmpvs	r6, r5, asr #28
    1e58:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1e5c:	4f524f4e 	svcmi	0x00524f4e
    1e60:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
		    case 'x': scanx (word); break;
    1e64:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1e68:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1e6c:	6f466d69 	svcvs	0x00466d69
    1e70:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1e74:	6f4d6853 	svcvs	0x004d6853
    1e78:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    1e7c:	32336900 	eorscc	r6, r3, #0, 18
    1e80:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    1e84:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    1e88:	61567264 	cmpvs	r6, r4, ror #4
    1e8c:	6f6d006c 	svcvs	0x006d006c
    1e90:	6f436564 	svcvs	0x00436564
    1e94:	0031666e 	eorseq	r6, r1, lr, ror #12
    1e98:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1e9c:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    1ea0:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    1ea4:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1ea8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1d74 <vscan+0x8c>
    1eac:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1eb0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1eb4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1eb8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1ebc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1ec0:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    1ec4:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    1ec8:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    1ecc:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1ed0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1ed4:	41726f46 	cmnmi	r2, r6, asr #30
    1ed8:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
			switch (*fmt++) {
    1edc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ee0:	61566e45 	cmpvs	r6, r5, asr #28
    1ee4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1ee8:	4f524f4e 	svcmi	0x00524f4e
    1eec:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1ef0:	6f6c4343 	svcvs	0x006c4343
		    	    case 'd': scani (lword); break;
    1ef4:	6f536b63 	svcvs	0x00536b63
    1ef8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1efc:	00746547 	rsbseq	r6, r4, r7, asr #10
    1f00:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1f04:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    1f08:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1f0c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1f10:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    1f14:	734f3167 	movtvc	r3, #61799	; 0xf167
    1f18:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    1f1c:	62640066 	rsbvs	r0, r4, #102	; 0x66
    1f20:	6f4c726c 	svcvs	0x004c726c
    1f24:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f28:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1f2c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1f30:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 1d68 <vscan+0x80>
    1f34:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    1f38:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1f3c:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    1f40:	6f466d69 	svcvs	0x00466d69
    1f44:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1f48:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1f4c:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
		    	    case 'x': scanx (lword); break;
    1f50:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1f54:	43646e41 	cmnmi	r4, #1040	; 0x410
    1f58:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    1f5c:	61527277 	cmpvs	r2, r7, ror r2
    1f60:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    1f64:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1f68:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    1f6c:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    1f70:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1f74:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1e40 <vscan+0x158>
    1f78:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1f7c:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    1f80:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    1f84:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    1f88:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1f8c:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    1f90:	524f4e00 	subpl	r4, pc, #0, 28
    1f94:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f98:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f9c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1fa0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1fa4:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    1fa8:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1df0 <vscan+0x108>
    1fac:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    1fb0:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    1fb4:	6f583233 	svcvs	0x00583233
    1fb8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1fbc:	00776f52 	rsbseq	r6, r7, r2, asr pc
		    	    case 'd': scani (lword); break;
    1fc0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1fc4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1fc8:	6f436648 	svcvs	0x00436648
    1fcc:	4f4e006c 	svcmi	0x004e006c
    1fd0:	5f4d4f52 	svcpl	0x004d4f52
    1fd4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1fd8:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
		    	    case 'u': scanu (lword); break;
    1fdc:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1fe0:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    1fe4:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    1fe8:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    1fec:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    1ff0:	33697500 	cmncc	r9, #0, 10
    1ff4:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    1ff8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1ffc:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    2000:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2004:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 1e40 <vscan+0x158>
    2008:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    200c:	4161746c 	cmnmi	r1, ip, ror #8
    2010:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    2014:	33690074 	cmncc	r9, #116	; 0x74
    2018:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    201c:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    2020:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
		    	    case 'x': scanx (lword); break;
    2024:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2028:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
			if ((c = *buf++) == '\0')
    202c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2030:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
			sap = va_arg (ap, char*);
    2034:	50460065 	subpl	r0, r6, r5, rrx
			nc++;
    2038:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
			break;
    203c:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
			while (isspace (*buf)) buf++;
    2040:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
    2044:	00545f32 	subseq	r5, r4, r2, lsr pc
    2048:	52545046 	subspl	r5, r4, #70	; 0x46
						*sap++ = *buf++;
    204c:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
    2050:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
			while (isspace (*buf)) buf++;
    2054:	6300545f 	movwvs	r5, #1119	; 0x45f
    2058:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    205c:	5300706d 	movwpl	r7, #109	; 0x6d
		return 0;
    2060:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2064:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1e9c <vscan+0x1b4>
		    case 'x': scanx (word); break;
    2068:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    206c:	50460066 	subpl	r0, r6, r6, rrx
		    	    case 'x': scanx (lword); break;
    2070:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2074:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2078:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    207c:	6400545f 	strvs	r5, [r0], #-1119	; 0xfffffba1
    2080:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    2084:	41726464 	cmnmi	r2, r4, ror #8
    2088:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    208c:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    2090:	70007065 	andvc	r7, r0, r5, rrx
    2094:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    2098:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    209c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    20a0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    20a4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    20a8:	524f4e00 	subpl	r4, pc, #0, 28
    20ac:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    20b0:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    20b4:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    20b8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    20bc:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    20c0:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    20c4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    20c8:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    20cc:	6f447265 	svcvs	0x00447265
    20d0:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    20d4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1fa0 <vscan+0x2b8>
    20d8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    20dc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    20e0:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    20e4:	61686365 	cmnvs	r8, r5, ror #6
    20e8:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    20ec:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    20f0:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    20f4:	6f447265 	svcvs	0x00447265
    20f8:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    20fc:	2f2e2e2f 	svccs	0x002e2e2f
    2100:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2104:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2108:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    210c:	2f62696c 	svccs	0x0062696c
    2110:	5f737973 	svcpl	0x00737973
    2114:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    2118:	5300632e 	movwpl	r6, #814	; 0x32e
    211c:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    2120:	56697061 	strbtpl	r7, [r9], -r1, rrx
    2124:	0064696f 	rsbeq	r6, r4, pc, ror #18
    2128:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    212c:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    2130:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    2134:	5f525450 	svcpl	0x00525450
    2138:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    213c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2140:	00545f33 	subseq	r5, r4, r3, lsr pc
    2144:	4f524f4e 	svcmi	0x00524f4e
    2148:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    214c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    2150:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    2154:	6f537465 	svcvs	0x00537465
    2158:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    215c:	00746547 	rsbseq	r6, r4, r7, asr #10
    2160:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2164:	616d6f44 	cmnvs	sp, r4, asr #30
    2168:	00736e69 	rsbseq	r6, r3, r9, ror #28
    216c:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    2170:	54647000 	strbtpl	r7, [r4], #-0
    2174:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2178:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    217c:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    2180:	6b636f6c 	blvs	18ddf38 <__ccfg+0x18bdf90>
    2184:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
    2188:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    218c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2190:	52500065 	subspl	r0, r0, #101	; 0x65
    2194:	6f444d43 	svcvs	0x00444d43
    2198:	6e69616d 	powvsez	f6, f1, #5.0
    219c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    21a0:	7000656c 	andvc	r6, r0, ip, ror #10
    21a4:	004d7265 	subeq	r7, sp, r5, ror #4
    21a8:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    21ac:	61686365 	cmnvs	r8, r5, ror #6
    21b0:	50656772 	rsbpl	r6, r5, r2, ror r7
    21b4:	6f697265 	svcvs	0x00697265
    21b8:	50460064 	subpl	r0, r6, r4, rrx
    21bc:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    21c0:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    21c4:	5f564544 	svcpl	0x00564544
    21c8:	50460054 	subpl	r0, r6, r4, asr r0
    21cc:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    21d0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    21d4:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    21d8:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    21dc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    21e0:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    21e4:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    21e8:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    21ec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    21f0:	414d5f52 	cmpmi	sp, r2, asr pc
    21f4:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    21f8:	7600545f 			; <UNDEFINED> instruction: 0x7600545f
    21fc:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    2200:	53007061 	movwpl	r7, #97	; 0x61
    2204:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2208:	43444174 	movtmi	r4, #16756	; 0x4174
    220c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2210:	706e4942 	rsbvc	r4, lr, r2, asr #18
    2214:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    2218:	61746c65 	cmnvs	r4, r5, ror #24
    221c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2220:	33697500 	cmncc	r9, #0, 10
    2224:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    2228:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    222c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2230:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    2234:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2238:	5f5f0065 	svcpl	0x005f0065
    223c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2240:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2244:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2248:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    224c:	6f6c0065 	svcvs	0x006c0065
    2250:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    2254:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    2258:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    225c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2260:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2264:	52545046 	subspl	r5, r4, #70	; 0x46
    2268:	5345525f 	movtpl	r5, #21087	; 0x525f
    226c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2270:	545f3144 	ldrbpl	r3, [pc], #-324	; 2278 <NOROM_SetupSetVddrLevel+0x30>
    2274:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2278:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    227c:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    2280:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    2284:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2288:	33637243 	cmncc	r3, #805306372	; 0x30000004
    228c:	46480032 			; <UNDEFINED> instruction: 0x46480032
    2290:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2294:	61536563 	cmpvs	r3, r3, ror #10
    2298:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    229c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    22a0:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    22a4:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    22a8:	00323372 	eorseq	r3, r2, r2, ror r3
    22ac:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    22b0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    22b4:	50460064 	subpl	r0, r6, r4, rrx
    22b8:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2170 <TrimAfterColdResetWakeupFromShutDown+0xa0>
    22bc:	564e4145 	strbpl	r4, [lr], -r5, asr #2
    22c0:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 22c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x4>
    22c4:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    22c8:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    22cc:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2108 <TrimAfterColdResetWakeupFromShutDown+0x38>
    22d0:	50460064 	subpl	r0, r6, r4, rrx
    22d4:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
    22d8:	4f434344 	svcmi	0x00434344
    22dc:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    22e0:	00545f4e 	subseq	r5, r4, lr, asr #30
    22e4:	52545046 	subspl	r5, r4, #70	; 0x46
    22e8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2174 <TrimAfterColdResetWakeupFromShutDown+0xa4>
    22ec:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    22f0:	00545f46 	subseq	r5, r4, r6, asr #30
    22f4:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    22f8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    22fc:	646f4d72 	strbtvs	r4, [pc], #-3442	; 2304 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x40>
    2300:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    2304:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2308:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    230c:	706e4941 	rsbvc	r4, lr, r1, asr #18
    2310:	46007475 			; <UNDEFINED> instruction: 0x46007475
    2314:	5f525450 	svcpl	0x00525450
    2318:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    231c:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    2320:	00545f44 	subseq	r5, r4, r4, asr #30
    2324:	52545046 	subspl	r5, r4, #70	; 0x46
    2328:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 21b4 <NOROM_SetupTrimDevice+0x10>
    232c:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    2330:	5000545f 	andpl	r5, r0, pc, asr r4
    2334:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    2338:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    233c:	73007465 	movwvc	r7, #1125	; 0x465
    2340:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    2344:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    2348:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    234c:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    2350:	67006174 	smlsdxvs	r0, r4, r1, r6
    2354:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2358:	6f4d3233 	svcvs	0x004d3233
    235c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    2360:	48004743 	stmdami	r0, {r0, r1, r6, r8, r9, sl, lr}
    2364:	5f445241 	svcpl	0x00445241
    2368:	5f495041 	svcpl	0x00495041
    236c:	75630054 	strbvc	r0, [r3, #-84]!	; 0xffffffac
    2370:	61745372 	cmnvs	r4, r2, ror r3
    2374:	4f006574 	svcmi	0x00006574
    2378:	66484353 			; <UNDEFINED> instruction: 0x66484353
    237c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2380:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2384:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2388:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    238c:	52435f52 	subpl	r5, r3, #328	; 0x148
    2390:	5f323343 	svcpl	0x00323343
    2394:	6f610054 	svcvs	0x00610054
    2398:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    239c:	506c7463 	rsbpl	r7, ip, r3, ror #8
    23a0:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    23a4:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    23a8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    23ac:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    23b0:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    23b4:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    23b8:	4e00545f 	cfmvsrmi	mvf0, r5
    23bc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2288 <NOROM_SetupSetVddrLevel+0x40>
    23c0:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    23c4:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    23c8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    23cc:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    23d0:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    23d4:	00676e69 	rsbeq	r6, r7, r9, ror #28
    23d8:	52545046 	subspl	r5, r4, #70	; 0x46
    23dc:	5346485f 	movtpl	r4, #26719	; 0x685f
    23e0:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    23e4:	46415345 	strbmi	r5, [r1], -r5, asr #6
    23e8:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    23ec:	5f484354 	svcpl	0x00484354
    23f0:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    23f4:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    23f8:	70006575 	andvc	r6, r0, r5, ror r5
    23fc:	6b6f6f4c 	blvs	1bde134 <__ccfg+0x1bbe18c>
    2400:	61547075 	cmpvs	r4, r5, ror r0
    2404:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2408:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    240c:	6f437463 	svcvs	0x00437463
    2410:	5241706d 	subpl	r7, r1, #109	; 0x6d
    2414:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    2418:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    241c:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2420:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2424:	316e6f69 	cmncc	lr, r9, ror #30
    2428:	73655200 	cmnvc	r5, #0, 4
    242c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2430:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2434:	6f697461 	svcvs	0x00697461
    2438:	5200326e 	andpl	r3, r0, #-536870906	; 0xe0000006
    243c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2440:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2444:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2448:	336e6f69 	cmncc	lr, #420	; 0x1a4
    244c:	73655200 	cmnvc	r5, #0, 4
    2450:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2454:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2458:	6f697461 	svcvs	0x00697461
    245c:	5300356e 	movwpl	r3, #1390	; 0x56e
    2460:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    2464:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2468:	6f697461 	svcvs	0x00697461
    246c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2470:	70006575 	andvc	r6, r0, r5, ror r5
    2474:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    2478:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    247c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2480:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2484:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    2488:	6f6d7461 	svcvs	0x006d7461
    248c:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    2490:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    2494:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    2498:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    249c:	50007065 	andpl	r7, r0, r5, rrx
    24a0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    24a4:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    24a8:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    24ac:	5f736c61 	svcpl	0x00736c61
    24b0:	50460074 	subpl	r0, r6, r4, ror r0
    24b4:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    24b8:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    24bc:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    24c0:	4e00545f 	cfmvsrmi	mvf0, r5
    24c4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2390 <NOROM_SetupGetTrimForAnabypassValue1+0x20>
    24c8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    24cc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    24d0:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    24d4:	6f565f43 	svcvs	0x00565f43
    24d8:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    24dc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24e0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    24e4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    24e8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    24ec:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    24f0:	73616c46 	cmnvc	r1, #17920	; 0x4600
    24f4:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    24f8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    24fc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2500:	4f435f52 	svcmi	0x00435f52
    2504:	5241504d 	subpl	r5, r1, #77	; 0x4d
    2508:	545f4645 	ldrbpl	r4, [pc], #-1605	; 2510 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x4>
    250c:	776f7000 	strbvc	r7, [pc, -r0]!
    2510:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    2514:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    2518:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    251c:	50460073 	subpl	r0, r6, r3, ror r0
    2520:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2524:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2528:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    252c:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2530:	5f525450 	svcpl	0x00525450
    2534:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2538:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    253c:	00545f35 	subseq	r5, r4, r5, lsr pc
    2540:	544f5250 	strbpl	r5, [pc], #-592	; 2548 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x14>
    2544:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2548:	5f544942 	svcpl	0x00544942
    254c:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    2550:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    2554:	00797261 	rsbseq	r7, r9, r1, ror #4
    2558:	4b434150 	blmi	10d2aa0 <__ccfg+0x10b2af8>
    255c:	5f454741 	svcpl	0x00454741
    2560:	00347834 	eorseq	r7, r4, r4, lsr r8
    2564:	50494843 	subpl	r4, r9, r3, asr #16
    2568:	5059545f 	subspl	r5, r9, pc, asr r4
    256c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2570:	30343632 	eorscc	r3, r4, r2, lsr r6
    2574:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    2578:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    257c:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2580:	5f594c49 	svcpl	0x00594c49
    2584:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2588:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    258c:	4e007a69 	vmlsmi.f32	s14, s0, s19
    2590:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 245c <NOROM_SetupGetTrimForAmpcompCtrl+0x54>
    2594:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2598:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    259c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    25a0:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    25a4:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    25a8:	00796c69 	rsbseq	r6, r9, r9, ror #24
    25ac:	4f524f4e 	svcmi	0x00524f4e
    25b0:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    25b4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    25b8:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    25bc:	61507465 	cmpvs	r0, r5, ror #8
    25c0:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    25c4:	70795465 	rsbsvc	r5, r9, r5, ror #8
    25c8:	4f4e0065 	svcmi	0x004e0065
    25cc:	5f4d4f52 	svcpl	0x004d4f52
    25d0:	70696843 	rsbvc	r6, r9, r3, asr #16
    25d4:	6f666e49 	svcvs	0x00666e49
    25d8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    25dc:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    25e0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    25e4:	70006e6f 	andvc	r6, r0, pc, ror #28
    25e8:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    25ec:	00657079 	rsbeq	r7, r5, r9, ror r0
    25f0:	70696843 	rsbvc	r6, r9, r3, asr #16
    25f4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    25f8:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    25fc:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2600:	6f697369 	svcvs	0x00697369
    2604:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    2608:	50494843 	subpl	r4, r9, r3, asr #16
    260c:	5059545f 	subspl	r5, r9, pc, asr r4
    2610:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2614:	30313331 	eorscc	r3, r1, r1, lsr r3
    2618:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    261c:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    2620:	5f796c69 	svcpl	0x00796c69
    2624:	77680074 			; <UNDEFINED> instruction: 0x77680074
    2628:	00766552 	rsbseq	r6, r6, r2, asr r5
    262c:	50494843 	subpl	r4, r9, r3, asr #16
    2630:	5059545f 	subspl	r5, r9, pc, asr r4
    2634:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2638:	30353632 	eorscc	r3, r5, r2, lsr r6
    263c:	43415000 	movtmi	r5, #4096	; 0x1000
    2640:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2644:	5343575f 	movtpl	r5, #14175	; 0x375f
    2648:	696d0050 	stmdbvs	sp!, {r4, r6}^
    264c:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    2650:	46007665 	strmi	r7, [r0], -r5, ror #12
    2654:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2658:	43435f59 	movtmi	r5, #16217	; 0x3f59
    265c:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    2660:	0032525f 	eorseq	r5, r2, pc, asr r2
    2664:	50494843 	subpl	r4, r9, r3, asr #16
    2668:	5059545f 	subspl	r5, r9, pc, asr r4
    266c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    2670:	30353331 	eorscc	r3, r5, r1, lsr r3
    2674:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2678:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    267c:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2680:	61467069 	cmpvs	r6, r9, rrx
    2684:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2688:	43437349 	movtmi	r7, #13129	; 0x3349
    268c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2690:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2694:	5f594c49 	svcpl	0x00594c49
    2698:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    269c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    26a0:	50494843 	subpl	r4, r9, r3, asr #16
    26a4:	5059545f 	subspl	r5, r9, pc, asr r4
    26a8:	43435f45 	movtmi	r5, #16197	; 0x3f45
    26ac:	30323632 	eorscc	r3, r2, r2, lsr r6
    26b0:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    26b4:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    26b8:	41460076 	hvcmi	24582	; 0x6006
    26bc:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    26c0:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    26c4:	00787836 	rsbseq	r7, r8, r6, lsr r8
    26c8:	70696863 	rsbvc	r6, r9, r3, ror #16
    26cc:	006d6146 	rsbeq	r6, sp, r6, asr #2
    26d0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    26d4:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    26d8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    26dc:	6366006e 	cmnvs	r6, #110	; 0x6e
    26e0:	50316766 	eorspl	r6, r1, r6, ror #14
    26e4:	6f746f72 	svcvs	0x00746f72
    26e8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    26ec:	746f7250 	strbtvc	r7, [pc], #-592	; 26f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x24>
    26f0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x8>
    26f4:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    26f8:	6f746365 	svcvs	0x00746365
    26fc:	00745f72 	rsbseq	r5, r4, r2, ror pc
    2700:	544f5250 	strbpl	r5, [pc], #-592	; 2708 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x38>
    2704:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2708:	5f544942 	svcpl	0x00544942
    270c:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    2710:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    2714:	5f35315f 	svcpl	0x0035315f
    2718:	48430034 	stmdami	r3, {r2, r4, r5}^
    271c:	545f5049 	ldrbpl	r5, [pc], #-73	; 2724 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x54>
    2720:	5f455059 	svcpl	0x00455059
    2724:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    2728:	006e776f 	rsbeq	r7, lr, pc, ror #14
    272c:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2730:	5f325f56 	svcpl	0x00325f56
    2734:	41460032 	cmpmi	r6, r2, lsr r0
    2738:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    273c:	3143435f 	cmpcc	r3, pc, asr r3
    2740:	00787833 	rsbseq	r7, r8, r3, lsr r8
    2744:	4b434150 	blmi	10d2c8c <__ccfg+0x10b2ce4>
    2748:	5f454741 	svcpl	0x00454741
    274c:	00377837 	eorseq	r7, r7, r7, lsr r8
    2750:	544f5250 	strbpl	r5, [pc], #-592	; 2758 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x88>
    2754:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2758:	6b6e555f 	blvs	1b97cdc <__ccfg+0x1b77d34>
    275c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    2760:	52574800 	subspl	r4, r7, #0, 16
    2764:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2768:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    276c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2638 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>
    2770:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2774:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2778:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    277c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2780:	70795470 	rsbsvc	r5, r9, r0, ror r4
    2784:	57480065 	strbpl	r0, [r8, -r5, rrx]
    2788:	5f564552 	svcpl	0x00564552
    278c:	00315f32 	eorseq	r5, r1, r2, lsr pc
    2790:	544f5250 	strbpl	r5, [pc], #-592	; 2798 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc8>
    2794:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2798:	5f544942 	svcpl	0x00544942
    279c:	00454c42 	subeq	r4, r5, r2, asr #24
    27a0:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    27a4:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    27a8:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    27ac:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    27b0:	57480061 	strbpl	r0, [r8, -r1, rrx]
    27b4:	5f564552 	svcpl	0x00564552
    27b8:	00335f32 	eorseq	r5, r3, r2, lsr pc
    27bc:	70696863 	rsbvc	r6, r9, r3, ror #16
    27c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    27c4:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    27c8:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    27cc:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    27d0:	4f545355 	svcmi	0x00545355
    27d4:	00305f4d 	eorseq	r5, r0, sp, asr #30
    27d8:	50494843 	subpl	r4, r9, r3, asr #16
    27dc:	5059545f 	subspl	r5, r9, pc, asr r4
    27e0:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    27e4:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 26a0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>
    27e8:	4300315f 	movwmi	r3, #351	; 0x15f
    27ec:	5f504948 	svcpl	0x00504948
    27f0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    27f4:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    27f8:	00303336 	eorseq	r3, r0, r6, lsr r3
    27fc:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2800:	5f315f56 	svcpl	0x00315f56
    2804:	41500030 	cmpmi	r0, r0, lsr r0
    2808:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    280c:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    2810:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    2814:	2f2e006e 	svccs	0x002e006e
    2818:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    281c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2820:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2824:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2828:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    282c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2830:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    2834:	63660063 	cmnvs	r6, #99	; 0x63
    2838:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    283c:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2840:	68430064 	stmdavs	r3, {r2, r5, r6}^
    2844:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2848:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    284c:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    2850:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2854:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    2858:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    285c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2860:	70696843 	rsbvc	r6, r9, r3, asr #16
    2864:	6f666e49 	svcvs	0x00666e49
    2868:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    286c:	6f6e694d 	svcvs	0x006e694d
    2870:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    2874:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    2878:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    287c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2880:	4f4e0076 	svcmi	0x004e0076
    2884:	5f4d4f52 	svcpl	0x004d4f52
    2888:	70696843 	rsbvc	r6, r9, r3, asr #16
    288c:	6f666e49 	svcvs	0x00666e49
    2890:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2894:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2898:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    289c:	6f725064 	svcvs	0x00725064
    28a0:	6f636f74 	svcvs	0x00636f74
    28a4:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    28a8:	43415000 	movtmi	r5, #4096	; 0x1000
    28ac:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    28b0:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    28b4:	50005245 	andpl	r5, r0, r5, asr #4
    28b8:	414b4341 	cmpmi	fp, r1, asr #6
    28bc:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 237d <NOROM_SetupGetTrimForAnabypassValue1+0xd>
    28c0:	50003578 	andpl	r3, r0, r8, ror r5
    28c4:	616b6361 	cmnvs	fp, r1, ror #6
    28c8:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    28cc:	745f6570 	ldrbvc	r6, [pc], #-1392	; 28d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb4>
    28d0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    28d4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    28d8:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    28dc:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    28e0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    28e4:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    28e8:	5f514554 	svcpl	0x00514554
    28ec:	00305f32 	eorseq	r5, r0, r2, lsr pc
    28f0:	70696843 	rsbvc	r6, r9, r3, asr #16
    28f4:	6f666e49 	svcvs	0x00666e49
    28f8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    28fc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    2900:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    2904:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    2908:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    290c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 27d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x108>
    2910:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2914:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2918:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    291c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    2920:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    2924:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2928:	524f4e00 	subpl	r4, pc, #0, 28
    292c:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 2934 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x114>
    2930:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    2934:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    2938:	00646165 	rsbeq	r6, r4, r5, ror #2
    293c:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    2940:	78754100 	ldmdavc	r5!, {r8, lr}^
    2944:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    2948:	61536964 	cmpvs	r3, r4, ror #18
    294c:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    2950:	00657469 	rsbeq	r7, r5, r9, ror #8
    2954:	36316975 			; <UNDEFINED> instruction: 0x36316975
    2958:	61746144 	cmnvs	r4, r4, asr #2
    295c:	33697500 	cmncc	r9, #0, 10
    2960:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    2964:	00617461 	rsbeq	r7, r1, r1, ror #8
    2968:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    296c:	61746144 	cmnvs	r4, r4, asr #2
    2970:	33697500 	cmncc	r9, #0, 10
    2974:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    2978:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    297c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2848 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x28>
    2980:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2984:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2988:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    298c:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    2990:	00657469 	rsbeq	r7, r5, r9, ror #8
    2994:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    2998:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    299c:	61563233 	cmpvs	r6, r3, lsr r2
    29a0:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    29a4:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    29a8:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    29ac:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    29b0:	00646165 	rsbeq	r6, r4, r5, ror #2
    29b4:	4f524f4e 	svcmi	0x00524f4e
    29b8:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    29bc:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    29c0:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    29c4:	00657469 	rsbeq	r7, r5, r9, ror #8
    29c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29cc:	2f2e2e2f 	svccs	0x002e2e2f
    29d0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 29d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b8>
    29d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    29d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    29dc:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    29e0:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    29e4:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    29e8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    29ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29f0:	41676552 	cmnmi	r7, r2, asr r5
    29f4:	00726464 	rsbseq	r6, r2, r4, ror #8
    29f8:	71724962 	cmnvc	r2, r2, ror #18
    29fc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2a00:	0064656c 	rsbeq	r6, r4, ip, ror #10
    2a04:	7a69536e 	bvc	1a577c4 <__ccfg+0x1a3781c>
    2a08:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    2a0c:	734f3233 	movtvc	r3, #62003	; 0xf233
    2a10:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    2a14:	6f58656d 	svcvs	0x0058656d
    2a18:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2a1c:	0056435f 	subseq	r4, r6, pc, asr r3
    2a20:	4f524f4e 	svcmi	0x00524f4e
    2a24:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2a28:	5f464843 	svcpl	0x00464843
    2a2c:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    2a30:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    2a34:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    2a38:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2a3c:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2a40:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2a44:	6f58706d 	svcvs	0x0058706d
    2a48:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2a4c:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    2a50:	61745377 	cmnvs	r4, r7, ror r3
    2a54:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a58:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a5c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a60:	72617000 	rsbvc	r7, r1, #0
    2a64:	31506d61 	cmpcc	r0, r1, ror #26
    2a68:	72617000 	rsbvc	r7, r1, #0
    2a6c:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2a70:	72617000 	rsbvc	r7, r1, #0
    2a74:	33506d61 	cmpcc	r0, #6208	; 0x1840
    2a78:	65727000 	ldrbvs	r7, [r2, #-0]!
    2a7c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 210e <TrimAfterColdResetWakeupFromShutDown+0x3e>
    2a80:	61745373 	cmnvs	r4, r3, ror r3
    2a84:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a88:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a8c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a90:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2a94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a98:	2f2e2e2f 	svccs	0x002e2e2f
    2a9c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2aa0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2aa4:	736f2f62 	cmnvc	pc, #392	; 0x188
    2aa8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2aac:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2ab0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2ab4:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2ab8:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2abc:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2ac0:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2ac4:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2ac8:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    2acc:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2ad0:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2ad4:	524f4e00 	subpl	r4, pc, #0, 28
    2ad8:	4f5f4d4f 	svcmi	0x005f4d4f
    2adc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2ae0:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2ae4:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2ae8:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2aec:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
    2af0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2af4:	524f4e00 	subpl	r4, pc, #0, 28
    2af8:	4f5f4d4f 	svcmi	0x005f4d4f
    2afc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2b00:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2b04:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2b08:	4f63526f 	svcmi	0x0063526f
    2b0c:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2b10:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2b14:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2b18:	4f4e0063 	svcmi	0x004e0063
    2b1c:	5f4d4f52 	svcpl	0x004d4f52
    2b20:	5f43534f 	svcpl	0x0043534f
    2b24:	534f5048 	movtpl	r5, #61512	; 0xf048
    2b28:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2b2c:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2b30:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2b34:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2b38:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    2b3c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2b40:	00746547 	rsbseq	r6, r4, r7, asr #10
    2b44:	4f524f4e 	svcmi	0x00524f4e
    2b48:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2b4c:	5f464843 	svcpl	0x00464843
    2b50:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2b54:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2b58:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2b5c:	416c6174 	smcmi	50708	; 0xc614
    2b60:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b64:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2b68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2b6c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2b70:	32586174 	subscc	r6, r8, #116, 2
    2b74:	63736f00 	cmnvs	r3, #0, 30
    2b78:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2b7c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2b80:	50480073 	subpl	r0, r8, r3, ror r0
    2b84:	5f43534f 	svcpl	0x0043534f
    2b88:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    2b8c:	4f716572 	svcmi	0x00716572
    2b90:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b94:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2b98:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b9c:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    2ba0:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2ba4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2ba8:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    2bac:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
    2bb0:	61746c65 	cmnvs	r4, r5, ror #24
    2bb4:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2bb8:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2bbc:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2bc0:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    2bc4:	50746966 	rsbspl	r6, r4, r6, ror #18
    2bc8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2bcc:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2bd0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2bd4:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2bd8:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2bdc:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    2be0:	6f58656d 	svcvs	0x0058656d
    2be4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2be8:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    2bec:	43534f00 	cmpmi	r3, #0, 30
    2bf0:	6f536648 	svcvs	0x00536648
    2bf4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2bf8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2bfc:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    2c00:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2a48 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x8>
    2c04:	31685470 	smccc	34112	; 0x8540
    2c08:	63734f00 	cmnvs	r3, #0, 30
    2c0c:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2c10:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2c14:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2c18:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2c1c:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2c20:	6b61576c 	blvs	18589d8 <__ccfg+0x1838a30>
    2c24:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    2c28:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2c2c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c30:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2c34:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
    2c38:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2c3c:	00436765 	subeq	r6, r3, r5, ror #14
    2c40:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2c44:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    2c48:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2c4c:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
    2c50:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2c54:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
    2c58:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
    2c5c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b28 <NOROM_ChipInfo_GetHwRevision+0x24>
    2c60:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2c64:	4f50485f 	svcmi	0x0050485f
    2c68:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2c6c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2c70:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2c74:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2c78:	4f79636e 	svcmi	0x0079636e
    2c7c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c80:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
    2c84:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    2c88:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
    2c8c:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    2c90:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
    2c94:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
    2c98:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2c9c:	6b636f6c 	blvs	18dea54 <__ccfg+0x18beaac>
    2ca0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2ca4:	5f006563 	svcpl	0x00006563
    2ca8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2cac:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2cb4 <NOROM_OSCClockSourceGet+0xa0>
    2cb0:	43667200 	cmnmi	r6, #0, 4
    2cb4:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2cb8:	4f716572 	svcmi	0x00716572
    2cbc:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2cc0:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    2cc4:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    2cc8:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2ccc:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2cd0:	4f524f4e 	svcmi	0x00524f4e
    2cd4:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2cd8:	5f464843 	svcpl	0x00464843
    2cdc:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    2ce0:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2ce4:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
    2ce8:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    2cec:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    2cf0:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    2cf4:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2cf8:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2cfc:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2d00:	00656475 	rsbeq	r6, r5, r5, ror r4
    2d04:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
    2d08:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    2d0c:	706f4367 	rsbvc	r4, pc, r7, ror #6
    2d10:	4f4e0079 	svcmi	0x004e0079
    2d14:	5f4d4f52 	svcpl	0x004d4f52
    2d18:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2d1c:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
    2d20:	61745374 	cmnvs	r4, r4, ror r3
    2d24:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2d28:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2d2c:	72617000 	rsbvc	r7, r1, #0
    2d30:	30506d61 	subscc	r6, r0, r1, ror #26
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
    return (time * SECOND)/1000;
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
}
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
    return (time * SECOND)/1000;
   8:	01006962 	tsteq	r0, r2, ror #18
}
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    return (time * SECOND)/1000;
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000020 	andeq	r0, r0, r0, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	00000174 	andeq	r0, r0, r4, ror r1
      20:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      24:	86038504 	strhi	r8, [r3], -r4, lsl #10
      28:	02018e02 	andeq	r8, r1, #2, 28
      2c:	c5c6ce90 	strbgt	ip, [r6, #3728]	; 0xe90
      30:	00000ec4 	andeq	r0, r0, r4, asr #29
      34:	0000000c 	andeq	r0, r0, ip
	...
      40:	0000000e 	andeq	r0, r0, lr
      44:	0000001c 	andeq	r0, r0, ip, lsl r0
      48:	00000000 	andeq	r0, r0, r0
      4c:	0000023c 	andeq	r0, r0, ip, lsr r2
      50:	00000070 	andeq	r0, r0, r0, ror r0
      54:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
      58:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      5c:	0e0a6301 	cdpeq	3, 0, cr6, cr10, cr1, {0}
      60:	000b410c 	andeq	r4, fp, ip, lsl #2
      64:	00000020 	andeq	r0, r0, r0, lsr #32
      68:	00000000 	andeq	r0, r0, r0
      6c:	000002ac 	andeq	r0, r0, ip, lsr #5
      70:	00000184 	andeq	r0, r0, r4, lsl #3
      74:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      78:	41018e02 	tstmi	r1, r2, lsl #28
      7c:	8b02480e 	blhi	920bc <__ccfg+0x72114>
      80:	41080e0a 	tstmi	r8, sl, lsl #28
      84:	0000000b 	andeq	r0, r0, fp
      88:	0000000c 	andeq	r0, r0, ip
      8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	descriptors [fd] = s;
      90:	7c020001 	stcvc	0, cr0, [r2], {1}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      98:	0000000c 	andeq	r0, r0, ip
	if (s == NULL)
      9c:	00000088 	andeq	r0, r0, r8, lsl #1
		syserror (EMALLOC, "tcv05");
      a0:	00000430 	andeq	r0, r0, r0, lsr r4
      a4:	0000000c 	andeq	r0, r0, ip
      a8:	00000018 	andeq	r0, r0, r8, lsl r0
      ac:	00000088 	andeq	r0, r0, r8, lsl #1
      b0:	0000043c 	andeq	r0, r0, ip, lsr r4
      b4:	0000002c 	andeq	r0, r0, ip, lsr #32
      b8:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      bc:	41000e0a 	tstmi	r0, sl, lsl #28
      c0:	0000000b 	andeq	r0, r0, fp
      c4:	00000018 	andeq	r0, r0, r8, lsl r0
      c8:	00000088 	andeq	r0, r0, r8, lsl #1
      cc:	00000468 	andeq	r0, r0, r8, ror #8
      d0:	0000002a 	andeq	r0, r0, sl, lsr #32
      d4:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      d8:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      dc:	000b4204 	andeq	r4, fp, r4, lsl #4
      e0:	00000018 	andeq	r0, r0, r8, lsl r0
      e4:	00000088 	andeq	r0, r0, r8, lsl #1
      e8:	00000494 	muleq	r0, r4, r4
      ec:	0000003c 	andeq	r0, r0, ip, lsr r0
      f0:	83100e41 	tsthi	r0, #1040	; 0x410
			wwait (st, 50);
      f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			curr += 0x1000;
      f8:	00018e02 	andeq	r8, r1, r2, lsl #28
      fc:	00000018 	andeq	r0, r0, r8, lsl r0
		if (from >= EE_SIZE || upto < from)
     100:	00000088 	andeq	r0, r0, r8, lsl #1
     104:	00000000 	andeq	r0, r0, r0
			upto = EE_SIZE - 1;
     108:	00000040 	andeq	r0, r0, r0, asr #32
     10c:	83100e41 	tsthi	r0, #1040	; 0x410
     110:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
     11c:	00000088 	andeq	r0, r0, r8, lsl #1
     120:	00000000 	andeq	r0, r0, r0
     124:	00000020 	andeq	r0, r0, r0, lsr #32
            ch = redCharacter;
     128:	83080e42 	movwhi	r0, #36418	; 0x8e42
            onTime = redOn;
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
            offTime = redOff;
     130:	00000014 	andeq	r0, r0, r4, lsl r0
        ledFlag = 1 - ledFlag;
     134:	00000088 	andeq	r0, r0, r8, lsl #1
            offTime = greenOff;
     138:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    return (time * SECOND)/1000;
     13c:	00000054 	andeq	r0, r0, r4, asr r0
     140:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	00000014 	andeq	r0, r0, r4, lsl r0
     14c:	00000088 	andeq	r0, r0, r8, lsl #1
     150:	00000524 	andeq	r0, r0, r4, lsr #10
     154:	00000040 	andeq	r0, r0, r0, asr #32
        if (displayCycle)
     158:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
            ser_outf(Check_PERIOD, "%c ", ch);
     15c:	00018e02 	andeq	r8, r1, r2, lsl #28
     160:	00000014 	andeq	r0, r0, r4, lsl r0
        if(onTime > 0){
     164:	00000088 	andeq	r0, r0, r8, lsl #1
     168:	00000564 	andeq	r0, r0, r4, ror #10
            if(On)
     16c:	00000028 	andeq	r0, r0, r8, lsr #32
     170:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     174:	00018e02 	andeq	r8, r1, r2, lsl #28
                leds(led,0);
     178:	00000014 	andeq	r0, r0, r4, lsl r0
     17c:	00000088 	andeq	r0, r0, r8, lsl #1
     180:	0000058c 	andeq	r0, r0, ip, lsl #11
     184:	00000114 	andeq	r0, r0, r4, lsl r1
     188:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
            delay(onTime, OFF_PERIOD);
     18c:	00018e02 	andeq	r8, r1, r2, lsl #28
            delay(offTime, Check_PERIOD);
     190:	0000001c 	andeq	r0, r0, ip, lsl r0
     194:	00000088 	andeq	r0, r0, r8, lsl #1
            led = greenLed;
     198:	000006a0 	andeq	r0, r0, r0, lsr #13
            ch = greenCharacter;
     19c:	00000050 	andeq	r0, r0, r0, asr r0
     1a0:	83180e41 	tsthi	r8, #1040	; 0x410
            onTime = greenOn;
     1a4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
            offTime = greenOff;
     1a8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
                leds(led,0);
     1ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     1b0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1b4:	00000088 	andeq	r0, r0, r8, lsl #1
     1b8:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1bc:	00000054 	andeq	r0, r0, r4, asr r0
     1c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
            proceed OFF_PERIOD;
     1c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
        when(&On, Check_PERIOD);
     1c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     1cc:	0000000c 	andeq	r0, r0, ip
        release;
     1d0:	00000088 	andeq	r0, r0, r8, lsl #1
        leds(led,0);
     1d4:	00000744 	andeq	r0, r0, r4, asr #14
     1d8:	00000038 	andeq	r0, r0, r8, lsr r0
     1dc:	00000020 	andeq	r0, r0, r0, lsr #32
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
     1e4:	0000077c 	andeq	r0, r0, ip, ror r7
}
     1e8:	00000110 	andeq	r0, r0, r0, lsl r1
     1ec:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     1f0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1f4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1f8:	89038804 	stmdbhi	r3, {r2, fp, pc}
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000088 	andeq	r0, r0, r8, lsl #1
     208:	00000000 	andeq	r0, r0, r0
     20c:	0000000c 	andeq	r0, r0, ip
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	00000088 	andeq	r0, r0, r8, lsl #1
     218:	0000088c 	andeq	r0, r0, ip, lsl #17
     21c:	000000c0 	andeq	r0, r0, r0, asr #1
     220:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     224:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     228:	00000001 	andeq	r0, r0, r1
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
     230:	00000088 	andeq	r0, r0, r8, lsl #1
     234:	0000094c 	andeq	r0, r0, ip, asr #18
     238:	00000044 	andeq	r0, r0, r4, asr #32
    word numbers[] = {0, 0, 0, 0};
     23c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    int numbersIndex = 0;
     240:	86038504 	strhi	r8, [r3], -r4, lsl #10
    word numbers[] = {0, 0, 0, 0};
     244:	00018e02 	andeq	r8, r1, r2, lsl #28
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
        if(settingsInput[i] == ' ') {
     24c:	00000088 	andeq	r0, r0, r8, lsl #1
     250:	00000990 	muleq	r0, r0, r9
            numbers[numbersIndex] = number;
     254:	0000003c 	andeq	r0, r0, ip, lsr r0
     258:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
            number = 0;
     25c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     260:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    redOn = numbers[0];
     264:	00000001 	andeq	r0, r0, r1
     268:	00000018 	andeq	r0, r0, r8, lsl r0
    redOff = numbers[1];
     26c:	00000088 	andeq	r0, r0, r8, lsl #1
     270:	000009cc 	andeq	r0, r0, ip, asr #19
    greenOn = numbers[2];
     274:	000000a4 	andeq	r0, r0, r4, lsr #1
     278:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    greenOff = numbers[3];
     27c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     284:	00000030 	andeq	r0, r0, r0, lsr r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     288:	00000088 	andeq	r0, r0, r8, lsl #1
     28c:	00000a70 	andeq	r0, r0, r0, ror sl
            number = number * 10;
     290:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
            number += settingsInput[i] - 48;
     294:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     298:	86078508 	strhi	r8, [r7], -r8, lsl #10
     29c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2a0:	8a038904 	bhi	e26b8 <__ccfg+0xc2710>
     2a4:	02018e02 	andeq	r8, r1, #2, 28
     2a8:	cace0aa2 	bgt	ff382d38 <_estack+0xdf37dd38>
fsm root {
     2ac:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2b0:	000ec4c5 	andeq	ip, lr, r5, asr #9
     2b4:	00000b42 	andeq	r0, r0, r2, asr #22
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	00000088 	andeq	r0, r0, r8, lsl #1
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_outf(Initial, "Enter your name: ");
     2c8:	0000000c 	andeq	r0, r0, ip
     2cc:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_in(Get_Name, username, NAME_LENGTH);
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	00000028 	andeq	r0, r0, r8, lsr #32
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2dc:	00000088 	andeq	r0, r0, r8, lsl #1
     2e0:	00000c28 	andeq	r0, r0, r8, lsr #24
        ser_inf(Get_Choice, "%c", &choice);
     2e4:	00000258 	andeq	r0, r0, r8, asr r2
     2e8:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        if (choice == 'A' || choice == 'a'){
     2ec:	8e028b03 	vmlahi.f64	d8, d2, d3
     2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     2f4:	00070d42 	andeq	r0, r7, r2, asr #26
            proceed Adjust_Intervals;
     2f8:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed Monitor;
     2fc:	00000088 	andeq	r0, r0, r8, lsl #1
        proceed Show_Menu;
     300:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     304:	00000030 	andeq	r0, r0, r0, lsr r0
     308:	83080e42 	movwhi	r0, #36418	; 0x8e42
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     30c:	00018e02 	andeq	r8, r1, r2, lsl #28
     310:	00000018 	andeq	r0, r0, r8, lsl r0
     314:	00000088 	andeq	r0, r0, r8, lsl #1
        processSettingsInput(settings);
     318:	00000000 	andeq	r0, r0, r0
        if(!blinkerRunning) {
     31c:	0000005c 	andeq	r0, r0, ip, asr r0
     320:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
            blinkerCode = runfsm blinker;
     324:	86038504 	strhi	r8, [r3], -r4, lsl #10
     328:	00018e02 	andeq	r8, r1, r2, lsl #28
            blinkerRunning = YES;
     32c:	00000014 	andeq	r0, r0, r4, lsl r0
        On = YES;
     330:	00000088 	andeq	r0, r0, r8, lsl #1
     334:	00000e80 	andeq	r0, r0, r0, lsl #29
        trigger(&On);
     338:	00000060 	andeq	r0, r0, r0, rrx
        proceed Show_Menu;
     33c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     340:	00018e02 	andeq	r8, r1, r2, lsl #28
     344:	0000000c 	andeq	r0, r0, ip
     348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     34c:	7c020001 	stcvc	0, cr0, [r2], {1}
     350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     354:	00000018 	andeq	r0, r0, r8, lsl r0
     358:	00000344 	andeq	r0, r0, r4, asr #6
        proceed Show_Menu;
     35c:	00000ee0 	andeq	r0, r0, r0, ror #29
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
     364:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     368:	86038504 	strhi	r8, [r3], -r4, lsl #10
        displayCycle = YES;
     36c:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_inf(Await_Stop, "%c", &ch);
     370:	00000018 	andeq	r0, r0, r8, lsl r0
     374:	00000344 	andeq	r0, r0, r4, asr #6
     378:	00000f1c 	andeq	r0, r0, ip, lsl pc
        if(ch == 'S' || ch == 's'){
     37c:	00000080 	andeq	r0, r0, r0, lsl #1
     380:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     384:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
            displayCycle = NO;
     388:	00000001 	andeq	r0, r0, r1
     38c:	0000000c 	andeq	r0, r0, ip
            proceed Show_Menu;
     390:	00000344 	andeq	r0, r0, r4, asr #6
        proceed Monitor;
     394:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
        On = NO;
     398:	00000018 	andeq	r0, r0, r8, lsl r0
     39c:	00000014 	andeq	r0, r0, r4, lsl r0
        if(blinkerCode != 0x0) {
     3a0:	00000344 	andeq	r0, r0, r4, asr #6
            killall(blinkerCode);
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	00000024 	andeq	r0, r0, r4, lsr #32
        proceed Show_Menu;
     3ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
        leds_all(0);
     3b4:	00000014 	andeq	r0, r0, r4, lsl r0
     3b8:	00000344 	andeq	r0, r0, r4, asr #6
     3bc:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
        proceed Show_Menu;
     3c0:	00000010 	andeq	r0, r0, r0, lsl r0
     3c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
        } else if (choice == 'S' || choice == 's') {
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Stop;
     3cc:	00000014 	andeq	r0, r0, r4, lsl r0
        } else if (choice == 'V' || choice == 'v') {
     3d0:	00000344 	andeq	r0, r0, r4, asr #6
            proceed View_Settings;
     3d4:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'M' || choice == 'm') {
     3d8:	0000002c 	andeq	r0, r0, ip, lsr #32
            proceed Monitor;
     3dc:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e4:	00000014 	andeq	r0, r0, r4, lsl r0
     3e8:	00000344 	andeq	r0, r0, r4, asr #6
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0000004c 	andeq	r0, r0, ip, asr #32
     3f4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3fc:	0000000c 	andeq	r0, r0, ip
     400:	00000344 	andeq	r0, r0, r4, asr #6
     404:	00000000 	andeq	r0, r0, r0
     408:	00000006 	andeq	r0, r0, r6
     40c:	00000028 	andeq	r0, r0, r8, lsr #32
     410:	00000344 	andeq	r0, r0, r4, asr #6
     414:	00000fc4 	andeq	r0, r0, r4, asr #31
     418:	000000cc 	andeq	r0, r0, ip, asr #1
     41c:	83180e41 	tsthi	r8, #1040	; 0x410
     420:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     424:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     428:	02018e02 	andeq	r8, r1, #2, 28
     42c:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
static void devinit_uart (int devnum) {
     430:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
	adddevfunc (ioreq_uart_a, devnum);
     434:	0b42000e 	bleq	1080474 <__ccfg+0x10604cc>
     438:	00000014 	andeq	r0, r0, r4, lsl r0
void udelay (volatile word n) {
     43c:	00000344 	andeq	r0, r0, r4, asr #6
     440:	00001090 	muleq	r0, r0, r0
	while (n) {
     444:	00000014 	andeq	r0, r0, r4, lsl r0
     448:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n--);
     450:	00000014 	andeq	r0, r0, r4, lsl r0
     454:	00000344 	andeq	r0, r0, r4, asr #6
     458:	000010a4 	andeq	r1, r0, r4, lsr #1
		n--;
     45c:	00000034 	andeq	r0, r0, r4, lsr r0
     460:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
void mdelay (volatile word n) {
     468:	00000018 	andeq	r0, r0, r8, lsl r0
     46c:	00000344 	andeq	r0, r0, r4, asr #6
	while (n) {
     470:	000010d8 	ldrdeq	r1, [r0], -r8
     474:	00000034 	andeq	r0, r0, r4, lsr r0
}
     478:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		udelay (999);
     47c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     480:	00000001 	andeq	r0, r0, r1
		n--;
     484:	00000018 	andeq	r0, r0, r8, lsl r0
     488:	00000344 	andeq	r0, r0, r4, asr #6
     48c:	00000000 	andeq	r0, r0, r0
     490:	0000002c 	andeq	r0, r0, ip, lsr #32
void __pi_ondomain (lword d) {
     494:	83100e41 	tsthi	r0, #1040	; 0x410
     498:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (__pi_systat.effpdm > 1)
     49c:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_systat.effpdm = 1;
     4a4:	00000344 	andeq	r0, r0, r4, asr #6
	PRCMPowerDomainOn (d);
     4a8:	0000110c 	andeq	r1, r0, ip, lsl #2
     4ac:	00000024 	andeq	r0, r0, r4, lsr #32
     4b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b8:	00000018 	andeq	r0, r0, r8, lsl r0
     4bc:	00000344 	andeq	r0, r0, r4, asr #6
	__pi_systat.ondmns |= d;
     4c0:	00001130 	andeq	r1, r0, r0, lsr r1
     4c4:	00000038 	andeq	r0, r0, r8, lsr r0
}
     4c8:	83100e41 	tsthi	r0, #1040	; 0x410
     4cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
void __pi_syserror (word ec, const char *m) {
     4d0:	00018e02 	andeq	r8, r1, r2, lsl #28
	diag ("SYSERR: %x, %s", ec, m);
     4d4:	0000000c 	andeq	r0, r0, ip
     4d8:	00000344 	andeq	r0, r0, r4, asr #6
  __ASM volatile ("cpsid i" : : : "memory");
     4dc:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4e0:	00000014 	andeq	r0, r0, r4, lsl r0
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
     4e8:	00000344 	andeq	r0, r0, r4, asr #6
		all_leds_blink;
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	00000040 	andeq	r0, r0, r0, asr #32
     4f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
     500:	00000344 	andeq	r0, r0, r4, asr #6
     504:	00000000 	andeq	r0, r0, r0
     508:	00000018 	andeq	r0, r0, r8, lsl r0
     50c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (1) {
     514:	0000000c 	andeq	r0, r0, ip
     518:	00000344 	andeq	r0, r0, r4, asr #6
     51c:	00001168 	andeq	r1, r0, r8, ror #2
     520:	00000024 	andeq	r0, r0, r4, lsr #32
void tci_run_delay_timer () {
     524:	0000000c 	andeq	r0, r0, ip
	setdel = __pi_mintk - __pi_old;
     528:	00000344 	andeq	r0, r0, r4, asr #6
     52c:	00000000 	andeq	r0, r0, r0
     530:	00000020 	andeq	r0, r0, r0, lsr #32
     534:	0000000c 	andeq	r0, r0, ip
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	00000344 	andeq	r0, r0, r4, asr #6
     53c:	0000118c 	andeq	r1, r0, ip, lsl #3
     540:	0000000e 	andeq	r0, r0, lr
     544:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     548:	00000344 	andeq	r0, r0, r4, asr #6
	sti_tim;
     54c:	00000000 	andeq	r0, r0, r0
}
     550:	00000010 	andeq	r0, r0, r0, lsl r0
     554:	0000000c 	andeq	r0, r0, ip
     558:	00000344 	andeq	r0, r0, r4, asr #6
     55c:	00000000 	andeq	r0, r0, r0
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
	cli_aux;
     564:	0000000c 	andeq	r0, r0, ip
     568:	00000344 	andeq	r0, r0, r4, asr #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     56c:	00000000 	andeq	r0, r0, r0
     570:	00000010 	andeq	r0, r0, r0, lsl r0
     574:	0000000c 	andeq	r0, r0, ip
     578:	00000344 	andeq	r0, r0, r4, asr #6
	sti_aux;
     57c:	00000000 	andeq	r0, r0, r0
}
     580:	00000006 	andeq	r0, r0, r6
     584:	0000000c 	andeq	r0, r0, ip
     588:	00000344 	andeq	r0, r0, r4, asr #6
void AONRTCIntHandler () {
     58c:	0000119a 	muleq	r0, sl, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     590:	00000014 	andeq	r0, r0, r4, lsl r0
     594:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     598:	00000344 	andeq	r0, r0, r4, asr #6
		if (__pi_utims [0] == 0)
     59c:	00000000 	andeq	r0, r0, r0
     5a0:	0000000e 	andeq	r0, r0, lr
		if (*(__pi_utims [0])) {
     5a4:	00000014 	andeq	r0, r0, r4, lsl r0
     5a8:	00000344 	andeq	r0, r0, r4, asr #6
			(*(__pi_utims [0]))--;
     5ac:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
		if (__pi_utims [1] == 0)
     5b0:	00000024 	andeq	r0, r0, r4, lsr #32
		if (*(__pi_utims [1])) {
     5b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
			aux_timer_inactive = 0;
     5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
			(*(__pi_utims [1]))--;
     5bc:	00000020 	andeq	r0, r0, r0, lsr #32
		if (__pi_utims [2] == 0)
     5c0:	00000344 	andeq	r0, r0, r4, asr #6
		if (*(__pi_utims [2])) {
     5c4:	000011d4 	ldrdeq	r1, [r0], -r4
			(*(__pi_utims [2]))--;
     5c8:	0000009c 	muleq	r0, ip, r0
		if (__pi_utims [3] != 0) {
     5cc:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			if (*(__pi_utims [3])) {
     5d0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
				aux_timer_inactive = 0;
     5d4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
				(*(__pi_utims [3]))--;
     5d8:	89038804 	stmdbhi	r3, {r2, fp, pc}
	if (__pi_systat.ledsts) {
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e0:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.ledblc++ == 0) {
     5e4:	00000344 	andeq	r0, r0, r4, asr #6
     5e8:	00001270 	andeq	r1, r0, r0, ror r2
			if (__pi_systat.ledblk) {
     5ec:	00000050 	andeq	r0, r0, r0, asr r0
     5f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5f8:	00000014 	andeq	r0, r0, r4, lsl r0
     5fc:	00000344 	andeq	r0, r0, r4, asr #6
				if (__pi_systat.ledsts & 0x2)
     600:	000012c0 	andeq	r1, r0, r0, asr #5
     604:	00000048 	andeq	r0, r0, r8, asr #32
     608:	83080e41 	movwhi	r0, #36417	; 0x8e41
				if (__pi_systat.ledsts & 0x4)
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 0;
     610:	00000014 	andeq	r0, r0, r4, lsl r0
     614:	00000344 	andeq	r0, r0, r4, asr #6
			if (__pi_systat.fstblk)
     618:	00001308 	andeq	r1, r0, r8, lsl #6
     61c:	00000050 	andeq	r0, r0, r0, asr r0
				__pi_systat.ledblc = 200;
     620:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (events & AON_RTC_EVFLAGS_CH0) {
     624:	00018e02 	andeq	r8, r1, r2, lsl #28
		cli_tim;
     628:	00000020 	andeq	r0, r0, r0, lsr #32
		__pi_new += setdel;
     62c:	00000344 	andeq	r0, r0, r4, asr #6
     630:	00001358 	andeq	r1, r0, r8, asr r3
		setdel = 0;
     634:	00000058 	andeq	r0, r0, r8, asr r0
		RISE_N_SHINE;
     638:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		__pi_new += setdel;
     63c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		RISE_N_SHINE;
     640:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     644:	89038804 	stmdbhi	r3, {r2, fp, pc}
		aux_timer_inactive = 1;
     648:	00018e02 	andeq	r8, r1, r2, lsl #28
     64c:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x1)
     650:	00000344 	andeq	r0, r0, r4, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     654:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     658:	000000a8 	andeq	r0, r0, r8, lsr #1
				if (__pi_systat.ledsts & 0x2)
     65c:	83100e44 	tsthi	r0, #68, 28	; 0x440
     660:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     664:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x8)
     668:	00000018 	andeq	r0, r0, r8, lsl r0
				__pi_systat.ledblk = 1;
     66c:	00000344 	andeq	r0, r0, r4, asr #6
     670:	00001458 	andeq	r1, r0, r8, asr r4
		if (aux_timer_inactive) {
     674:	00000034 	andeq	r0, r0, r4, lsr r0
			cli_aux;
     678:	83100e41 	tsthi	r0, #1040	; 0x410
     67c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
     684:	0000000c 	andeq	r0, r0, ip
     688:	00000344 	andeq	r0, r0, r4, asr #6
     68c:	0000148c 	andeq	r1, r0, ip, lsl #9
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	00000344 	andeq	r0, r0, r4, asr #6
     69c:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
     6a0:	00000030 	andeq	r0, r0, r0, lsr r0
	cli_tim;
     6a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6a8:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (setdel) {
     6ac:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6b0:	00000344 	andeq	r0, r0, r4, asr #6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6b4:	00000000 	andeq	r0, r0, r0
     6b8:	00000038 	andeq	r0, r0, r8, lsr r0
     6bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
				AON_RTC_O_CH0CMP)) - gettav ());
     6c4:	00000040 	andeq	r0, r0, r0, asr #32
	return NO;
     6c8:	00000344 	andeq	r0, r0, r4, asr #6
			setdel = 0;
     6cc:	000014a4 	andeq	r1, r0, r4, lsr #9
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d0:	0000013c 	andeq	r0, r0, ip, lsr r1
     6d4:	80100e41 	andshi	r0, r0, r1, asr #28
}
     6d8:	82038104 	andhi	r8, r3, #4, 2
		sti_tim;
     6dc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		return YES;
     6e0:	0b84380e 	bleq	fe10e720 <_estack+0xde109720>
     6e4:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6e8:	07880887 	streq	r0, [r8, r7, lsl #17]
     6ec:	058e0689 	streq	r0, [lr, #1673]	; 0x689
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f0:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
	UARTDisable (UART0_BASE);
     6f4:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6f8:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
	UARTDisable (UART0_BASE);
     6fc:	c341100e 	movtgt	r1, #4110	; 0x100e
	UARTConfigSetExpClk (UART0_BASE,
     700:	0ec0c1c2 	acseqdm	f4, f2
     704:	000b4100 	andeq	r4, fp, r0, lsl #2
     708:	0000000c 	andeq	r0, r0, ip
     70c:	00000344 	andeq	r0, r0, r4, asr #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	00000000 	andeq	r0, r0, r0
     714:	00000024 	andeq	r0, r0, r4, lsr #32
     718:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     71c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     720:	7c020001 	stcvc	0, cr0, [r2], {1}
     724:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	urates [0] = rate;
     728:	00000014 	andeq	r0, r0, r4, lsl r0
}
     72c:	00000718 	andeq	r0, r0, r8, lsl r7
     730:	00000000 	andeq	r0, r0, r0
     734:	00000016 	andeq	r0, r0, r6, lsl r0
     738:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
     740:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     744:	00000718 	andeq	r0, r0, r8, lsl r7
     748:	00000000 	andeq	r0, r0, r0
     74c:	0000001a 	andeq	r0, r0, sl, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     750:	00000018 	andeq	r0, r0, r8, lsl r0
     754:	00000718 	andeq	r0, r0, r8, lsl r7
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     758:	00000000 	andeq	r0, r0, r0
     75c:	0000000e 	andeq	r0, r0, lr
	__pi_uart_setrate (urates [0], __pi_uart);
     760:	83080e41 	movwhi	r0, #36417	; 0x8e41
     764:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     768:	000ec3ce 	andeq	ip, lr, lr, asr #7
     76c:	00000018 	andeq	r0, r0, r8, lsl r0
     770:	00000718 	andeq	r0, r0, r8, lsl r7
     774:	00000000 	andeq	r0, r0, r0
     778:	0000004c 	andeq	r0, r0, ip, asr #32
	switch (operation) {
     77c:	83100e41 	tsthi	r0, #1040	; 0x410
static int ioreq_uart_a (int operation, char *buf, int len) {
     780:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     784:	00018e02 	andeq	r8, r1, r2, lsl #28
     788:	00000020 	andeq	r0, r0, r0, lsr #32
     78c:	00000718 	andeq	r0, r0, r8, lsl r7
     790:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     794:	0000008c 	andeq	r0, r0, ip, lsl #1
     798:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			while (len && uart_a_char_available) {
     79c:	5f018e02 	svcpl	0x00018e02
     7a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7a4:	560b4200 	strpl	r4, [fp], -r0, lsl #4
			if (len != operation) {
     7a8:	000ec4ce 	andeq	ip, lr, lr, asr #9
}
     7ac:	00000020 	andeq	r0, r0, r0, lsr #32
     7b0:	00000718 	andeq	r0, r0, r8, lsl r7
			uart_a_disable_int;
     7b4:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
     7b8:	00000070 	andeq	r0, r0, r0, ror r0
				*buf++ = uart_a_read;
     7bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			uart_a_disable_int;
     7c0:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7c4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			if (uart_a_char_available) {
     7c8:	430b4200 	movwmi	r4, #45568	; 0xb200
     7cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
				uart_a_enable_int;
     7d0:	0000003c 	andeq	r0, r0, ip, lsr r0
     7d4:	00000718 	andeq	r0, r0, r8, lsl r7
				goto Redo_rx;
     7d8:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7dc:	000000c0 	andeq	r0, r0, r0, asr #1
     7e0:	82080e41 	andhi	r0, r8, #1040	; 0x410
			return -2;
     7e4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7e8:	0a84300e 	beq	fe10c828 <_estack+0xde107828>
				uart_a_write (*buf);
     7ec:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
     7f0:	06880787 	streq	r0, [r8], r7, lsl #15
			while (len && uart_a_room_in_tx) {
     7f4:	048a0589 	streq	r0, [sl], #1417	; 0x589
     7f8:	0a6b038e 	beq	1ac1638 <__ccfg+0x1aa1690>
     7fc:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
			if (len != operation) {
     800:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
			uart_a_disable_int;
     804:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     808:	c2c34108 	sbcgt	r4, r3, #8, 2
			if (uart_a_room_in_tx) {
     80c:	0b41000e 	bleq	104084c <__ccfg+0x10208a4>
     810:	0000001c 	andeq	r0, r0, ip, lsl r0
				uart_a_enable_int;
     814:	00000718 	andeq	r0, r0, r8, lsl r7
     818:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     81c:	0000006c 	andeq	r0, r0, ip, rrx
			if (uart_a_room_in_tx) {
     820:	83180e42 	tsthi	r8, #1056	; 0x420
				uart_a_write (*buf);
     824:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     828:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     82c:	00018e02 	andeq	r8, r1, r2, lsl #28
     830:	0000000c 	andeq	r0, r0, ip
			uart_a_enable_int;
     834:	00000718 	andeq	r0, r0, r8, lsl r7
     838:	00000000 	andeq	r0, r0, r0
     83c:	00000024 	andeq	r0, r0, r4, lsr #32
			return 0;
     840:	00000018 	andeq	r0, r0, r8, lsl r0
			if (len == UART_CNTRL_SETRATE) {
     844:	00000718 	andeq	r0, r0, r8, lsl r7
				if (__pi_uart_setrate (*((word*)buf),
     848:	00000000 	andeq	r0, r0, r0
     84c:	00000080 	andeq	r0, r0, r0, lsl #1
     850:	83100e42 	tsthi	r0, #1056	; 0x420
				syserror (EREQPAR, "uar");
     854:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			syserror (ENOOPER, "uai");
     858:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (len == UART_CNTRL_GETRATE) {
     85c:	00000014 	andeq	r0, r0, r4, lsl r0
				return 1;
     860:	00000718 	andeq	r0, r0, r8, lsl r7
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     864:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     868:	00000070 	andeq	r0, r0, r0, ror r0
     86c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     870:	00018e02 	andeq	r8, r1, r2, lsl #28
     874:	00000018 	andeq	r0, r0, r8, lsl r0
     878:	00000718 	andeq	r0, r0, r8, lsl r7
     87c:	00000000 	andeq	r0, r0, r0
     880:	00000078 	andeq	r0, r0, r8, ror r0
     884:	83100e42 	tsthi	r0, #1056	; 0x420
     888:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     88c:	00018e02 	andeq	r8, r1, r2, lsl #28
void UART0IntHandler () {
     890:	00000020 	andeq	r0, r0, r0, lsr #32
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     894:	00000718 	andeq	r0, r0, r8, lsl r7
     898:	00000000 	andeq	r0, r0, r0
     89c:	000000bc 	strheq	r0, [r0], -ip
     8a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     8a4:	86048505 	strhi	r8, [r4], -r5, lsl #10
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     8ac:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
		RISE_N_SHINE;
     8b0:	000b4114 	andeq	r4, fp, r4, lsl r1
     8b4:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, READ));
     8b8:	00000718 	andeq	r0, r0, r8, lsl r7
     8bc:	00000000 	andeq	r0, r0, r0
     8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c4:	83100e41 	tsthi	r0, #1040	; 0x410
     8c8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d0:	00000018 	andeq	r0, r0, r8, lsl r0
     8d4:	00000718 	andeq	r0, r0, r8, lsl r7
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00000038 	andeq	r0, r0, r8, lsr r0
     8e0:	83100e41 	tsthi	r0, #1040	; 0x410
     8e4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8ec:	0000000c 	andeq	r0, r0, ip
     8f0:	00000718 	andeq	r0, r0, r8, lsl r7
		i_trigger (devevent (UART_A, WRITE));
     8f4:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8f8:	0000000a 	andeq	r0, r0, sl
     8fc:	00000018 	andeq	r0, r0, r8, lsl r0
		RISE_N_SHINE;
     900:	00000718 	andeq	r0, r0, r8, lsl r7
     904:	00000000 	andeq	r0, r0, r0
     908:	0000002c 	andeq	r0, r0, ip, lsr #32
		i_trigger (devevent (UART_A, WRITE));
     90c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     910:	4c018e02 	stcmi	14, cr8, [r1], {2}
     914:	000ec4ce 	andeq	ip, lr, lr, asr #9
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000718 	andeq	r0, r0, r8, lsl r7
     920:	00000000 	andeq	r0, r0, r0
     924:	00000060 	andeq	r0, r0, r0, rrx
     928:	83080e41 	movwhi	r0, #36417	; 0x8e41
     92c:	61018e02 	tstvs	r1, r2, lsl #28
     930:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     934:	000b4300 	andeq	r4, fp, r0, lsl #6
}
     938:	00000014 	andeq	r0, r0, r4, lsl r0
     93c:	00000718 	andeq	r0, r0, r8, lsl r7
     940:	00000000 	andeq	r0, r0, r0
     944:	00000040 	andeq	r0, r0, r0, asr #32
     948:	83080e42 	movwhi	r0, #36418	; 0x8e42
void __buttons_setirq (int val) {
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     950:	00000014 	andeq	r0, r0, r4, lsl r0
     954:	00000718 	andeq	r0, r0, r8, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	00000000 	andeq	r0, r0, r0
     95c:	0000002c 	andeq	r0, r0, ip, lsr #32
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
		bn = BUTTON_GPIO (__button_list [i]);
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     968:	0000001c 	andeq	r0, r0, ip, lsl r0
     96c:	00000718 	andeq	r0, r0, r8, lsl r7
     970:	00000000 	andeq	r0, r0, r0
     974:	0000003c 	andeq	r0, r0, ip, lsr r0
     978:	83180e41 	tsthi	r8, #1040	; 0x410
     97c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
}
     980:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     984:	00018e02 	andeq	r8, r1, r2, lsl #28
     988:	0000000c 	andeq	r0, r0, ip
     98c:	00000718 	andeq	r0, r0, r8, lsl r7
void __pinlist_setirq (int val) {
     990:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     994:	00000006 	andeq	r0, r0, r6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     99c:	00000718 	andeq	r0, r0, r8, lsl r7
	for (i = 0; i < N_PINLIST; i++) {
     9a0:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9a4:	00000068 	andeq	r0, r0, r8, rrx
     9a8:	83180e41 	tsthi	r8, #1040	; 0x410
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     9b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9b4:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	00000014 	andeq	r0, r0, r4, lsl r0
}
     9bc:	00000718 	andeq	r0, r0, r8, lsl r7
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	00000050 	andeq	r0, r0, r0, asr r0
     9c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
void GPIOIntHandler () {
     9cc:	00018e02 	andeq	r8, r1, r2, lsl #28
if (buttons_int) {
     9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
     9d4:	00000718 	andeq	r0, r0, r8, lsl r7
	buttons_disable ();
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	0000009c 	muleq	r0, ip, r0
	i_trigger ((aword)&__button_list);
     9e0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9e4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9e8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9ec:	8a048905 	bhi	122e08 <__ccfg+0x102e60>
     9f0:	8e028b03 	vmlahi.f64	d8, d2, d3
     9f4:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9f8:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     9fc:	00000b42 	andeq	r0, r0, r2, asr #22
     a00:	00000014 	andeq	r0, r0, r4, lsl r0
     a04:	00000718 	andeq	r0, r0, r8, lsl r7
     a08:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
     a0c:	00000040 	andeq	r0, r0, r0, asr #32
     a10:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
if (pin_sensor_int) {
     a18:	00000014 	andeq	r0, r0, r4, lsl r0
     a1c:	00000718 	andeq	r0, r0, r8, lsl r7
	i_trigger ((aword)(&__input_pins));
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00000034 	andeq	r0, r0, r4, lsr r0
     a28:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a30:	00000018 	andeq	r0, r0, r8, lsl r0
     a34:	00000718 	andeq	r0, r0, r8, lsl r7
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	0000003c 	andeq	r0, r0, ip, lsr r0
     a40:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a44:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a48:	000ec4ce 	andeq	ip, lr, lr, asr #9
	__pinsen_disable_and_clear;
     a4c:	00000018 	andeq	r0, r0, r8, lsl r0
	RISE_N_SHINE;
     a50:	00000718 	andeq	r0, r0, r8, lsl r7
     a54:	00000000 	andeq	r0, r0, r0
     a58:	0000003c 	andeq	r0, r0, ip, lsr r0
}
     a5c:	83100e42 	tsthi	r0, #1056	; 0x420
     a60:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a64:	00018e02 	andeq	r8, r1, r2, lsl #28
     a68:	0000000c 	andeq	r0, r0, ip
     a6c:	00000718 	andeq	r0, r0, r8, lsl r7
void system_init () {
     a70:	000015e0 	andeq	r1, r0, r0, ror #11
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a74:	00000002 	andeq	r0, r0, r2
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a78:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a80:	7c020001 	stcvc	0, cr0, [r2], {1}
     a84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a88:	0000000c 	andeq	r0, r0, ip
     a8c:	00000a78 	andeq	r0, r0, r8, ror sl
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a90:	000015e2 	andeq	r1, r0, r2, ror #11
     a94:	00000002 	andeq	r0, r0, r2
     a98:	0000000c 	andeq	r0, r0, ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a9c:	00000a78 	andeq	r0, r0, r8, ror sl
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aa0:	000015e4 	andeq	r1, r0, r4, ror #11
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa4:	00000002 	andeq	r0, r0, r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aa8:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aac:	00000a78 	andeq	r0, r0, r8, ror sl
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ab0:	000015e6 	andeq	r1, r0, r6, ror #11
		pin = (port_confs [i] >> 19) & 0x1f;
     ab4:	00000002 	andeq	r0, r0, r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab8:	00000014 	andeq	r0, r0, r4, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
     abc:	00000a78 	andeq	r0, r0, r8, ror sl
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ac0:	000015e8 	andeq	r1, r0, r8, ror #11
     ac4:	00000044 	andeq	r0, r0, r4, asr #32
     ac8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     acc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (port_confs [i] & 0x80)
     ad0:	0000000c 	andeq	r0, r0, ip
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ad8:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (port_confs [i] & 0x40)
     adc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ae0:	0000000c 	andeq	r0, r0, ip
     ae4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae8:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aec:	00000002 	andeq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af0:	00000018 	andeq	r0, r0, r8, lsl r0
	all_leds_blink;
     af4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     af8:	00000000 	andeq	r0, r0, r0
     afc:	00000058 	andeq	r0, r0, r8, asr r0
     b00:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b04:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b08:	00018e02 	andeq	r8, r1, r2, lsl #28
     b0c:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b14:	7c020001 	stcvc	0, cr0, [r2], {1}
     b18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     b20:	00000b0c 	andeq	r0, r0, ip, lsl #22
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b24:	00000000 	andeq	r0, r0, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b28:	000000cc 	andeq	r0, r0, ip, asr #1
     b2c:	83100e42 	tsthi	r0, #1056	; 0x420
	IntEnable (INT_AON_RTC_COMB);
     b30:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b34:	02018e02 	andeq	r8, r1, #2, 28
     b38:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
	__pi_malloc_init ();
     b3c:	000ec3c4 	andeq	ip, lr, r4, asr #7
	IntEnable (INT_AON_GPIO_EDGE);
     b40:	ce420b44 	vmlsgt.f64	d16, d2, d4
     b44:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b48:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b4c:	00000024 	andeq	r0, r0, r4, lsr #32
     b50:	00000b0c 	andeq	r0, r0, ip, lsl #22
     b54:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b58:	00000038 	andeq	r0, r0, r8, lsr r0
     b5c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b60:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b64:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b68:	4a0b4300 	bmi	2d1770 <__ccfg+0x2b17c8>
	urates [0] = UART_RATE / 100;
     b6c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b70:	000b4300 	andeq	r4, fp, r0, lsl #6
	reinit_uart ();
     b74:	0000000c 	andeq	r0, r0, ip
	EXTRA_INITIALIZERS;
     b78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b7c:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b84:	00000018 	andeq	r0, r0, r8, lsl r0
     b88:	00000b74 	andeq	r0, r0, r4, ror fp
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b8c:	00001634 	andeq	r1, r0, r4, lsr r6
     b90:	00000034 	andeq	r0, r0, r4, lsr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b94:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     b98:	86038504 	strhi	r8, [r3], -r4, lsl #10
			devinit [i] . init (devinit [i] . param);
     b9c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     ba0:	00000018 	andeq	r0, r0, r8, lsl r0
     ba4:	00000b74 	andeq	r0, r0, r4, ror fp
     ba8:	00001668 	andeq	r1, r0, r8, ror #12
	IntEnable (INT_UART0_COMB);
     bac:	00000030 	andeq	r0, r0, r0, lsr r0
     bb0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
}
     bb4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	tci_run_auxiliary_timer ();
     bb8:	00000001 	andeq	r0, r0, r1
		diag ("");
     bbc:	00000014 	andeq	r0, r0, r4, lsl r0
     bc0:	00000b74 	andeq	r0, r0, r4, ror fp
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bc4:	00001698 	muleq	r0, r8, r6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bc8:	00000018 	andeq	r0, r0, r8, lsl r0
		diag ("Leftover RAM: %d bytes",
     bcc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd8:	00000b74 	andeq	r0, r0, r4, ror fp
     bdc:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
     be0:	00000054 	andeq	r0, r0, r4, asr r0
     be4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     be8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bf0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	00000b74 	andeq	r0, r0, r4, ror fp
     bfc:	00001704 	andeq	r1, r0, r4, lsl #14
     c00:	00000040 	andeq	r0, r0, r0, asr #32
     c04:	83180e41 	tsthi	r8, #1040	; 0x410
     c08:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c0c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	00000014 	andeq	r0, r0, r4, lsl r0
     c18:	00000b74 	andeq	r0, r0, r4, ror fp
     c1c:	00001744 	andeq	r1, r0, r4, asr #14
     c20:	00000024 	andeq	r0, r0, r4, lsr #32
     c24:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
__attribute__ ((noreturn)) void __pi_release () {
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
     c30:	00000b74 	andeq	r0, r0, r4, ror fp
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c34:	00001768 	andeq	r1, r0, r8, ror #14
	check_stack_overflow;
     c38:	00000014 	andeq	r0, r0, r4, lsl r0
     c3c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c40:	00018e02 	andeq	r8, r1, r2, lsl #28
	update_n_wake (MAX_WORD, NO);
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	00000b74 	andeq	r0, r0, r4, ror fp
     c4c:	0000177c 	andeq	r1, r0, ip, ror r7
	for_all_tasks (__pi_curr) {
     c50:	00000014 	andeq	r0, r0, r4, lsl r0
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000b74 	andeq	r0, r0, r4, ror fp
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	00000000 	andeq	r0, r0, r0
	__SLEEP;
     c60:	00000064 	andeq	r0, r0, r4, rrx
     c64:	83180e41 	tsthi	r8, #1040	; 0x410
     c68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	system_event_count ++;
     c70:	00018e02 	andeq	r8, r1, r2, lsl #28
     c74:	0000001c 	andeq	r0, r0, ip, lsl r0
	switch (__pi_systat.effpdm) {
     c78:	00000b74 	andeq	r0, r0, r4, ror fp
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	00000128 	andeq	r0, r0, r8, lsr #2
     c84:	83180e41 	tsthi	r8, #1040	; 0x410
			__WFI ();
     c88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c90:	00018e02 	andeq	r8, r1, r2, lsl #28
	check_stack_overflow;
     c94:	00000024 	andeq	r0, r0, r4, lsr #32
     c98:	00000b74 	andeq	r0, r0, r4, ror fp
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	000000ec 	andeq	r0, r0, ip, ror #1
			(__pi_curr->code) (tstate (__pi_curr));
     ca4:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
			goto Redo;
     ca8:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
	for_all_tasks (__pi_curr) {
     cac:	87078608 	strhi	r8, [r7, -r8, lsl #12]
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cb0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cb4:	8b038a04 	blhi	e34cc <__ccfg+0xc3524>
     cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	00000b74 	andeq	r0, r0, r4, ror fp
     cc4:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cc8:	00000002 	andeq	r0, r0, r2
     ccc:	0000000c 	andeq	r0, r0, ip
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cd0:	00000b74 	andeq	r0, r0, r4, ror fp
     cd4:	00000000 	andeq	r0, r0, r0
			__WFI ();
     cd8:	00000004 	andeq	r0, r0, r4
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cdc:	0000000c 	andeq	r0, r0, ip
     ce0:	00000b74 	andeq	r0, r0, r4, ror fp
}
     ce4:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce8:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cec:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cf0:	00000b74 	andeq	r0, r0, r4, ror fp
     cf4:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cf8:	0000001a 	andeq	r0, r0, sl, lsl r0
     cfc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d00:	4a018e02 	bmi	64510 <__ccfg+0x44568>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d04:	000ec3ce 	andeq	ip, lr, lr, asr #7
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d08:	0000000c 	andeq	r0, r0, ip
     d0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d10:	7c020001 	stcvc	0, cr0, [r2], {1}
     d14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
     d1c:	00000d08 	andeq	r0, r0, r8, lsl #26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d20:	00001790 	muleq	r0, r0, r7
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d24:	00000078 	andeq	r0, r0, r8, ror r0
     d28:	83180e41 	tsthi	r8, #1040	; 0x410
     d2c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d30:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
			SysCtrlSetRechargeBeforePowerDown
     d38:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d40:	7c020001 	stcvc	0, cr0, [r2], {1}
     d44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d48:	00000030 	andeq	r0, r0, r0, lsr r0
     d4c:	00000d38 	andeq	r0, r0, r8, lsr sp
     d50:	00001808 	andeq	r1, r0, r8, lsl #16
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d54:	00000054 	andeq	r0, r0, r4, asr r0
     d58:	810c0e41 	tsthi	ip, r1, asr #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d5c:	83028203 	movwhi	r8, #8707	; 0x2203
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d60:	280e4101 	stmdacs	lr, {r0, r8, lr}
     d64:	06850784 	streq	r0, [r5], r4, lsl #15
     d68:	048e0586 	streq	r0, [lr], #1414	; 0x586
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d6c:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
			while (!(AONWUCPowerStatusGet () &
     d70:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d74:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     d78:	000ec1c2 	andeq	ip, lr, r2, asr #3
     d7c:	0000000c 	andeq	r0, r0, ip
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d84:	7c020001 	stcvc	0, cr0, [r2], {1}
     d88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d8c:	00000030 	andeq	r0, r0, r0, lsr r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d90:	00000d7c 	andeq	r0, r0, ip, ror sp
     d94:	0000185c 	andeq	r1, r0, ip, asr r8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d98:	00000060 	andeq	r0, r0, r0, rrx
     d9c:	810c0e41 	tsthi	ip, r1, asr #28
			SysCtrlAdjustRechargeAfterPowerDown ();
     da0:	83028203 	movwhi	r8, #8707	; 0x2203
			reinit_uart ();
     da4:	200e4101 	andcs	r4, lr, r1, lsl #2
     da8:	05850684 	streq	r0, [r5, #1668]	; 0x684
     dac:	0a64048e 	beq	1901fec <__ccfg+0x18e2044>
}
     db0:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     db4:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     db8:	c1c2c341 	bicgt	ip, r2, r1, asr #6
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dbc:	0b41000e 	bleq	1040dfc <__ccfg+0x1020e54>
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     dc8:	7c020001 	stcvc	0, cr0, [r2], {1}
     dcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dd0:	00000028 	andeq	r0, r0, r8, lsr #32
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dd4:	00000dc0 	andeq	r0, r0, r0, asr #27
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dd8:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     ddc:	00000070 	andeq	r0, r0, r0, ror r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     de0:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     de4:	86048505 	strhi	r8, [r4], -r5, lsl #10
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     de8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     dec:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     df0:	c7ce4214 	bfigt	r4, r4, #4, #11
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     df4:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     df8:	000b4200 	andeq	r4, fp, r0, lsl #4
     dfc:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (
     e00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e04:	7c020001 	stcvc	0, cr0, [r2], {1}
	__SLEEP;
     e08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e0c:	00000028 	andeq	r0, r0, r8, lsr #32
  __ASM volatile ("cpsie i" : : : "memory");
     e10:	00000dfc 	strdeq	r0, [r0], -ip
	goto Redo;
     e14:	0000192c 	andeq	r1, r0, ip, lsr #18
     e18:	0000011c 	andeq	r0, r0, ip, lsl r1
     e1c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     e20:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e24:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e28:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
     e2c:	c7ce4214 	bfigt	r4, r4, #4, #11
     e30:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e34:	00000000 	andeq	r0, r0, r0
     e38:	0000000c 	andeq	r0, r0, ip
     e3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e40:	7c020001 	stcvc	0, cr0, [r2], {1}
     e44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	00000e38 	andeq	r0, r0, r8, lsr lr
     e50:	00001a48 	andeq	r1, r0, r8, asr #20
     e54:	00000020 	andeq	r0, r0, r0, lsr #32
     e58:	00000028 	andeq	r0, r0, r8, lsr #32
     e5c:	00000e38 	andeq	r0, r0, r8, lsr lr
     e60:	00001a68 	andeq	r1, r0, r8, ror #20
     e64:	00000230 	andeq	r0, r0, r0, lsr r2
     e68:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
     e6c:	86078508 	strhi	r8, [r7], -r8, lsl #10
     e70:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     e74:	8a038904 	bhi	e328c <__ccfg+0xc32e4>
     e78:	02018e02 	andeq	r8, r1, #2, 28
     e7c:	200e0a4f 	andcs	r0, lr, pc, asr #20
int main (void) {
     e80:	00000b42 	andeq	r0, r0, r2, asr #22
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e84:	0000001c 	andeq	r0, r0, ip, lsl r0
     e88:	00000e38 	andeq	r0, r0, r8, lsr lr
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e8c:	00001c98 	muleq	r0, r8, ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	00000050 	andeq	r0, r0, r0, asr r0
	system_init ();
     e94:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
	tcv_init ();
     e98:	86058506 	strhi	r8, [r5], -r6, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e9c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ea0:	00018e02 	andeq	r8, r1, r2, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     ea4:	0000000c 	andeq	r0, r0, ip
     ea8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eac:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eb0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     eb4:	00000020 	andeq	r0, r0, r0, lsr #32
	delay (16, 0);
     eb8:	00000ea4 	andeq	r0, r0, r4, lsr #29
     ebc:	00001ce8 	andeq	r1, r0, r8, ror #25
     ec0:	00000390 	muleq	r0, r0, r3
	__pi_release ();
     ec4:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     ec8:	86068507 	strhi	r8, [r6], -r7, lsl #10
     ecc:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     ed0:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
     ed4:	00000001 	andeq	r0, r0, r1
     ed8:	0000000c 	andeq	r0, r0, ip
     edc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
static void killev (__pi_pcb_t *pid) {
     ee0:	7c020001 	stcvc	0, cr0, [r2], {1}
	wfun = (aword)(pid->code);
     ee4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ee8:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
     eec:	00000ed8 	ldrdeq	r0, [r0], -r8
     ef0:	00002078 	andeq	r2, r0, r8, ror r0
     ef4:	00000030 	andeq	r0, r0, r0, lsr r0
			    || i->Events [j] . Event == wfun
     ef8:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
     efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (i->Events [j] . Event == (aword)pid
     f00:	7c020001 	stcvc	0, cr0, [r2], {1}
     f04:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f08:	0000000c 	andeq	r0, r0, ip
				wakeupev (i, j);
     f0c:	00000ef8 	strdeq	r0, [r0], -r8
     f10:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
     f14:	00000020 	andeq	r0, r0, r0, lsr #32
}
     f18:	0000000c 	andeq	r0, r0, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f1c:	00000ef8 	strdeq	r0, [r0], -r8
static void qfree (aword *ch) {
     f20:	000020a8 	andeq	r2, r0, r8, lsr #1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f24:	00000018 	andeq	r0, r0, r8, lsl r0
	cc = (aword*)(mpools + MA_NP);
     f28:	0000000c 	andeq	r0, r0, ip
	m_setnextp (ch, chunk);
     f2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	m_setnextp (cc, ch);
     f30:	7c020001 	stcvc	0, cr0, [r2], {1}
}
     f34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f38:	0000000c 	andeq	r0, r0, ip
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f3c:	00000f28 	andeq	r0, r0, r8, lsr #30
     f40:	000020c0 	andeq	r2, r0, r0, asr #1
			m_setnextp (cc, m_nextp (chunk));
     f44:	00000008 	andeq	r0, r0, r8
			m_size (chunk) += m_hdrlen + m_size (ch);
     f48:	0000000c 	andeq	r0, r0, ip
     f4c:	00000f28 	andeq	r0, r0, r8, lsr #30
     f50:	00000000 	andeq	r0, r0, r0
     f54:	00000006 	andeq	r0, r0, r6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f58:	0000000c 	andeq	r0, r0, ip
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f5c:	00000f28 	andeq	r0, r0, r8, lsr #30
     f60:	000020c8 	andeq	r2, r0, r8, asr #1
     f64:	00000008 	andeq	r0, r0, r8
			m_setnextp (cc, m_nextp (chunk));
     f68:	0000000c 	andeq	r0, r0, ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     f6c:	00000f28 	andeq	r0, r0, r8, lsr #30
     f70:	00000000 	andeq	r0, r0, r0
     f74:	00000006 	andeq	r0, r0, r6
     f78:	0000000c 	andeq	r0, r0, ip
     f7c:	00000f28 	andeq	r0, r0, r8, lsr #30
     f80:	00000000 	andeq	r0, r0, r0
			if (m_size (chunk) >= m_size (ch))
     f84:	00000008 	andeq	r0, r0, r8
     f88:	0000000c 	andeq	r0, r0, ip
     f8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		chunk = m_nextp (chunk))
     f90:	7c020001 	stcvc	0, cr0, [r2], {1}
     f94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f98:	00000018 	andeq	r0, r0, r8, lsl r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f9c:	00000f88 	andeq	r0, r0, r8, lsl #31
	diag_wait (a);
     fa0:	000020d0 	ldrdeq	r2, [r0], -r0
	diag_wchar (c, a);
     fa4:	000000d4 	ldrdeq	r0, [r0], -r4
     fa8:	83100e41 	tsthi	r0, #1040	; 0x410
}
     fac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     fb0:	00018e02 	andeq	r8, r1, r2, lsl #28
	syserror (ESTATE, "state");
     fb4:	00000014 	andeq	r0, r0, r4, lsl r0
     fb8:	00000f88 	andeq	r0, r0, r8, lsl #31
     fbc:	000021a4 	andeq	r2, r0, r4, lsr #3
     fc0:	000000a4 	andeq	r0, r0, r4, lsr #1
void update_n_wake (word min, Boolean force) {
     fc4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	00018e02 	andeq	r8, r1, r2, lsl #28
     fcc:	0000000c 	andeq	r0, r0, ip
     fd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fd4:	7c020001 	stcvc	0, cr0, [r2], {1}
     fd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fdc:	00000018 	andeq	r0, r0, r8, lsl r0
     fe0:	00000fcc 	andeq	r0, r0, ip, asr #31
     fe4:	00002248 	andeq	r2, r0, r8, asr #4
     fe8:	0000007c 	andeq	r0, r0, ip, ror r0
     fec:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     ff0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	00000014 	andeq	r0, r0, r4, lsl r0
     ffc:	00000fcc 	andeq	r0, r0, ip, asr #31
    1000:	000022c4 	andeq	r2, r0, r4, asr #5
    1004:	000000ac 	andeq	r0, r0, ip, lsr #1
		for_all_tasks (i) {
    1008:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
	__pi_mintk = znew + min;
    100c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1010:	0000000c 	andeq	r0, r0, ip
			if (!twaiting (i))
    1014:	00000fcc 	andeq	r0, r0, ip, asr #31
    1018:	00002370 	andeq	r2, r0, r0, ror r3
			if (twakecnd (__pi_old, znew, i->Timer)) {
    101c:	0000005c 	andeq	r0, r0, ip, asr r0
    1020:	0000000c 	andeq	r0, r0, ip
    1024:	00000fcc 	andeq	r0, r0, ip, asr #31
    1028:	000023cc 	andeq	r2, r0, ip, asr #7
    102c:	00000018 	andeq	r0, r0, r8, lsl r0
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000fcc 	andeq	r0, r0, ip, asr #31
    1038:	00000000 	andeq	r0, r0, r0
    103c:	00000010 	andeq	r0, r0, r0, lsl r0
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000fcc 	andeq	r0, r0, ip, asr #31
    1048:	000023e4 	andeq	r2, r0, r4, ror #7
				wakeuptm (i);
    104c:	00000010 	andeq	r0, r0, r0, lsl r0
    1050:	0000000c 	andeq	r0, r0, ip
		for_all_tasks (i) {
    1054:	00000fcc 	andeq	r0, r0, ip, asr #31
				d = i->Timer - znew;
    1058:	000023f4 	strdeq	r2, [r0], -r4
    105c:	00000014 	andeq	r0, r0, r4, lsl r0
    1060:	00000018 	andeq	r0, r0, r8, lsl r0
		if ((word)(__pi_mintk - znew) < min) 
    1064:	00000fcc 	andeq	r0, r0, ip, asr #31
    1068:	00002408 	andeq	r2, r0, r8, lsl #8
    106c:	00000064 	andeq	r0, r0, r4, rrx
	__pi_old = znew;
    1070:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
    1074:	86038504 	strhi	r8, [r3], -r4, lsl #10
	TCI_RUN_DELAY_TIMER;
    1078:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    107c:	0000000c 	andeq	r0, r0, ip
    1080:	00000fcc 	andeq	r0, r0, ip, asr #31
    1084:	0000246c 	andeq	r2, r0, ip, ror #8
    1088:	00000014 	andeq	r0, r0, r4, lsl r0
    108c:	0000000c 	andeq	r0, r0, ip
void proceed (word state) {
    1090:	00000fcc 	andeq	r0, r0, ip, asr #31
	prcdstate (__pi_curr, state);
    1094:	00002480 	andeq	r2, r0, r0, lsl #9
    1098:	00000014 	andeq	r0, r0, r4, lsl r0
	release;
    109c:	0000000c 	andeq	r0, r0, ip
    10a0:	00000fcc 	andeq	r0, r0, ip, asr #31
void __pi_wait (aword event, word state) {
    10a4:	00002494 	muleq	r0, r4, r4
	sint j = nevents (__pi_curr);
    10a8:	00000014 	andeq	r0, r0, r4, lsl r0
	if (j >= MAX_EVENTS_PER_TASK)
    10ac:	0000000c 	andeq	r0, r0, ip
    10b0:	00000fcc 	andeq	r0, r0, ip, asr #31
    10b4:	000024a8 	andeq	r2, r0, r8, lsr #9
		syserror (ENEVENTS, "sw");
    10b8:	00000028 	andeq	r0, r0, r8, lsr #32
    10bc:	0000000c 	andeq	r0, r0, ip
	setestate (__pi_curr->Events [j], state, event);
    10c0:	00000fcc 	andeq	r0, r0, ip, asr #31
	incwait (__pi_curr);
    10c4:	000024d0 	ldrdeq	r2, [r0], -r0
	setestate (__pi_curr->Events [j], state, event);
    10c8:	00000010 	andeq	r0, r0, r0, lsl r0
}
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	00000fcc 	andeq	r0, r0, ip, asr #31
    10d4:	000024e0 	andeq	r2, r0, r0, ror #9
void __pi_trigger (aword event) {
    10d8:	0000002c 	andeq	r0, r0, ip, lsr #32
	for_all_tasks (i) {
    10dc:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
    10e0:	00000fcc 	andeq	r0, r0, ip, asr #31
    10e4:	0000250c 	andeq	r2, r0, ip, lsl #10
    10e8:	00000014 	andeq	r0, r0, r4, lsl r0
    10ec:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == event) {
    10f0:	00000fcc 	andeq	r0, r0, ip, asr #31
    10f4:	00002520 	andeq	r2, r0, r0, lsr #10
    10f8:	00000014 	andeq	r0, r0, r4, lsl r0
				wakeupev (i, j);
    10fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1100:	00000fcc 	andeq	r0, r0, ip, asr #31
	for_all_tasks (i) {
    1104:	00002534 	andeq	r2, r0, r4, lsr r5
}
    1108:	00000110 	andeq	r0, r0, r0, lsl r1
aword __pi_join (aword pid, word st) {
    110c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	for_all_tasks (i) {
    1110:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1114:	02018e02 	andeq	r8, r1, #2, 28
	return 0;
    1118:	00100e76 	andseq	r0, r0, r6, ror lr
		if ((aword)i == pid) {
    111c:	00000018 	andeq	r0, r0, r8, lsl r0
			__pi_wait (pid, st);
    1120:	00000fcc 	andeq	r0, r0, ip, asr #31
}
    1124:	00002644 	andeq	r2, r0, r4, asr #12
	for_all_tasks (i) {
    1128:	00000064 	andeq	r0, r0, r4, rrx
    112c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
void delay (word d, word state) {
    1130:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	settstate (__pi_curr, state);
    1134:	00000001 	andeq	r0, r0, r1
    1138:	0000000c 	andeq	r0, r0, ip
    113c:	00000fcc 	andeq	r0, r0, ip, asr #31
    1140:	000026a8 	andeq	r2, r0, r8, lsr #13
	update_n_wake (d, YES);
    1144:	00000028 	andeq	r0, r0, r8, lsr #32
    1148:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_curr->Timer = __pi_old + d;
    114c:	00000fcc 	andeq	r0, r0, ip, asr #31
    1150:	000026d0 	ldrdeq	r2, [r0], -r0
	inctimer (__pi_curr);
    1154:	00000150 	andeq	r0, r0, r0, asr r1
    1158:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    115c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (fun == NULL)
    1168:	7c020001 	stcvc	0, cr0, [r2], {1}
		return (int) __pi_curr;
    116c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1170:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i)
    1174:	00001160 	andeq	r1, r0, r0, ror #2
}
    1178:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
    117c:	000000f4 	strdeq	r0, [r0], -r4
	for_all_tasks (i)
    1180:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1184:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1188:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
int __pi_strlen (const char *s) {
    118c:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	00000028 	andeq	r0, r0, r8, lsr #32
}
    1194:	00001160 	andeq	r1, r0, r0, ror #2
	for (i = 0; *(s+i) != '\0'; i++);
    1198:	00002820 	andeq	r2, r0, r0, lsr #16
	while (n--)
    119c:	00000220 	andeq	r0, r0, r0, lsr #4
    11a0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
		*dest++ = *src++;
    11a4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11a8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    11ac:	8a048905 	bhi	1235c8 <__ccfg+0x103620>
void adddevfunc (devreqfun_t rf, int loc) {
    11b0:	8e028b03 	vmlahi.f64	d8, d2, d3
		syserror (EREQPAR, "addv");
    11b4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
		syserror (ERESOURCE, "addv");
    11b8:	00000024 	andeq	r0, r0, r4, lsr #32
	if (ioreq [loc] != NULL)
    11bc:	00000014 	andeq	r0, r0, r4, lsl r0
    11c0:	00001160 	andeq	r1, r0, r0, ror #2
		syserror (ERESOURCE, "addv");
    11c4:	00002a40 	andeq	r2, r0, r0, asr #20
	ioreq [loc] = rf;
    11c8:	00000060 	andeq	r0, r0, r0, rrx
}
    11cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11d0:	00018e02 	andeq	r8, r1, r2, lsl #28
sint io (word retry, word dev, word operation, char *buf, word len) {
    11d4:	00000014 	andeq	r0, r0, r4, lsl r0
    11d8:	00001160 	andeq	r1, r0, r0, ror #2
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00000078 	andeq	r0, r0, r8, ror r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11ec:	0000000c 	andeq	r0, r0, ip
		syserror (ENODEVICE, "io");
    11f0:	00001160 	andeq	r1, r0, r0, ror #2
    11f4:	00002aa0 	andeq	r2, r0, r0, lsr #21
	if (len == 0)
    11f8:	00000018 	andeq	r0, r0, r8, lsl r0
	ret = (ioreq [dev]) (operation, buf, len);
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (ret >= 0)
    1204:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (ret == -1) {
    1208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    120c:	0000000c 	andeq	r0, r0, ip
		if (retry == WNONE)
    1210:	000011fc 	strdeq	r1, [r0], -ip
		iowait (dev, operation, retry);
    1214:	00000000 	andeq	r0, r0, r0
    1218:	00000010 	andeq	r0, r0, r0, lsl r0
    121c:	0000000c 	andeq	r0, r0, ip
			release;
    1220:	000011fc 	strdeq	r1, [r0], -ip
	if (ret == -2) {
    1224:	00000000 	andeq	r0, r0, r0
		if (retry != WNONE) {
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
    122c:	0000000c 	andeq	r0, r0, ip
			iowait (dev, operation, retry);
    1230:	000011fc 	strdeq	r1, [r0], -ip
    1234:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
			(ioreq [dev]) (NONE, buf, len);
    1238:	0000004c 	andeq	r0, r0, ip, asr #32
    123c:	00000014 	andeq	r0, r0, r4, lsl r0
    1240:	000011fc 	strdeq	r1, [r0], -ip
		(ioreq [dev]) (NONE, buf, len);
    1244:	00000000 	andeq	r0, r0, r0
    1248:	00000030 	andeq	r0, r0, r0, lsr r0
    124c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
    1250:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (retry != WNONE) {
    1254:	00000018 	andeq	r0, r0, r8, lsl r0
		delay (-ret - 2, retry);
    1258:	000011fc 	strdeq	r1, [r0], -ip
    125c:	00002b04 	andeq	r2, r0, r4, lsl #22
    1260:	0000006c 	andeq	r0, r0, ip, rrx
    1264:	83100e41 	tsthi	r0, #1040	; 0x410
		release;
    1268:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    126c:	00018e02 	andeq	r8, r1, r2, lsl #28
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1270:	00000014 	andeq	r0, r0, r4, lsl r0
    1274:	000011fc 	strdeq	r1, [r0], -ip
    1278:	00002b70 	andeq	r2, r0, r0, ror fp
    127c:	00000016 	andeq	r0, r0, r6, lsl r0
    1280:	83080e41 	movwhi	r0, #36417	; 0x8e41
		syserror (ERESOURCE, "mal1");
    1284:	00018e02 	andeq	r8, r1, r2, lsl #28
    1288:	0000000c 	andeq	r0, r0, ip
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    128c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1290:	7c020001 	stcvc	0, cr0, [r2], {1}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1294:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1298:	00000024 	andeq	r0, r0, r4, lsr #32
    129c:	00001288 	andeq	r1, r0, r8, lsl #5
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12a0:	00002b88 	andeq	r2, r0, r8, lsl #23
    12a4:	00000028 	andeq	r0, r0, r8, lsr #32
}
    12a8:	83100e41 	tsthi	r0, #1040	; 0x410
    12ac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    12b0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    12b4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    12b8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    12bc:	0000000b 	andeq	r0, r0, fp
void __pi_free (aword *ch) {
    12c0:	0000000c 	andeq	r0, r0, ip
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12c4:	00001288 	andeq	r1, r0, r8, lsl #5
    12c8:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
		syserror (EMALLOC, "malg");
    12cc:	00000008 	andeq	r0, r0, r8
    12d0:	0000000c 	andeq	r0, r0, ip
	mcfree [MA_NP] += m_size (ch);
    12d4:	00001288 	andeq	r1, r0, r8, lsl #5
		m_size (ch) ^= MALLOC_UMASK;
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	00000022 	andeq	r0, r0, r2, lsr #32
	mcfree [MA_NP] += m_size (ch);
    12e0:	00000018 	andeq	r0, r0, r8, lsl r0
	QFREE;
    12e4:	00001288 	andeq	r1, r0, r8, lsl #5
	if (mevent [MA_NP] . nwait) {
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	0000002e 	andeq	r0, r0, lr, lsr #32
		trigger ((aword)(&(mevent [MA_NP])));
    12f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		mevent [MA_NP] . nwait --;
    12f4:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
}
    12f8:	000ec4ce 	andeq	ip, lr, lr, asr #9
    12fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1300:	00001288 	andeq	r1, r0, r8, lsl #5
    1304:	00000000 	andeq	r0, r0, r0
void kill (aword pid) {
    1308:	00000034 	andeq	r0, r0, r4, lsr r0
		pid = (aword) __pi_curr;
    130c:	83100e41 	tsthi	r0, #1040	; 0x410
	j = NULL;
    1310:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	for_all_tasks (i) {
    1314:	00018e02 	andeq	r8, r1, r2, lsl #28
	syserror (EREQPAR, "kpi");
    1318:	00000018 	andeq	r0, r0, r8, lsl r0
    131c:	00001288 	andeq	r1, r0, r8, lsl #5
		if ((aword)i == pid) {
    1320:	00000000 	andeq	r0, r0, r0
    1324:	00000040 	andeq	r0, r0, r0, asr #32
				__PCB = i->Next;
    1328:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			killev (i);
    132c:	86038504 	strhi	r8, [r3], -r4, lsl #10
			ufree (i);
    1330:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (i == __pi_curr)
    1334:	0000000c 	andeq	r0, r0, ip
    1338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				release;
    133c:	7c020001 	stcvc	0, cr0, [r2], {1}
				j->Next = i->Next;
    1340:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1344:	0000001c 	andeq	r0, r0, ip, lsl r0
    1348:	00001334 	andeq	r1, r0, r4, lsr r3
}
    134c:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    1350:	0000005c 	andeq	r0, r0, ip, asr r0
    1354:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
void killall (fsmcode fun) {
    1358:	86038504 	strhi	r8, [r3], -r4, lsl #10
	j = NULL;
    135c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
	for (i = __PCB; i != NULL; ) {
    1360:	0000100e 	andeq	r1, r0, lr
			if (i == __pi_curr)
    1364:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = __PCB; i != NULL; ) {
    1368:	00001334 	andeq	r1, r0, r4, lsr r3
	if (rel)
    136c:	00002c14 	andeq	r2, r0, r4, lsl ip
		release;
    1370:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (i->code == fun) {
    1374:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1378:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (j == NULL)
    137c:	00000018 	andeq	r0, r0, r8, lsl r0
				__PCB = k;
    1380:	00001334 	andeq	r1, r0, r4, lsr r3
			if (i == __pi_curr)
    1384:	00000000 	andeq	r0, r0, r0
				rel = YES;
    1388:	00000090 	muleq	r0, r0, r0
			killev (i);
    138c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			ufree (i);
    1390:	86038504 	strhi	r8, [r3], -r4, lsl #10
			i = k;
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
				j->Next = k;
    139c:	00001334 	andeq	r1, r0, r4, lsr r3
    13a0:	00000000 	andeq	r0, r0, r0
}
    13a4:	00000018 	andeq	r0, r0, r8, lsl r0
    13a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (size < 8)
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
		_size = 2;
    13b4:	00001334 	andeq	r1, r0, r4, lsr r3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b8:	00000000 	andeq	r0, r0, r0
		_size = (((aword)size) + 3) >> 2;
    13bc:	00000060 	andeq	r0, r0, r0, rrx
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		_size = (((aword)size) + 3) >> 2;
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (mevent [MA_NP] . nfail != 255)
    13c8:	00000014 	andeq	r0, r0, r4, lsl r0
    13cc:	00001334 	andeq	r1, r0, r4, lsr r3
			mevent [MA_NP] . nfail ++;
    13d0:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    13d4:	00000034 	andeq	r0, r0, r4, lsr r0
    13d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (m_magic (chunk) != MALLOC_MAGIC)
    13dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    13e0:	00000018 	andeq	r0, r0, r8, lsl r0
			syserror (EMALLOC, "malc");
    13e4:	00001334 	andeq	r1, r0, r4, lsr r3
    13e8:	00000000 	andeq	r0, r0, r0
		if (m_size (chunk) >= _size)
    13ec:	00000038 	andeq	r0, r0, r8, lsr r0
    13f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		chunk = m_nextp (chunk)) {
    13f4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		m_setnextp (cc, m_nextp (chunk));
    13f8:	00000001 	andeq	r0, r0, r1
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13fc:	0000000c 	andeq	r0, r0, ip
    1400:	00001334 	andeq	r1, r0, r4, lsr r3
			m_size (chunk) = _size;
    1404:	00000000 	andeq	r0, r0, r0
			cc = chunk + _size + m_hdrlen;
    1408:	0000000c 	andeq	r0, r0, ip
    140c:	00000018 	andeq	r0, r0, r8, lsl r0
			m_size (cc) = waste - m_hdrlen;
    1410:	00001334 	andeq	r1, r0, r4, lsr r3
			QFREE;
    1414:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nfail = 0;
    1418:	00000034 	andeq	r0, r0, r4, lsr r0
		mcfree [MA_NP] -= m_size (chunk);
    141c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1420:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1424:	00018e02 	andeq	r8, r1, r2, lsl #28
    1428:	0000000c 	andeq	r0, r0, ip
		m_size (chunk) |= MALLOC_UMASK;
    142c:	00001334 	andeq	r1, r0, r4, lsr r3
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1430:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
